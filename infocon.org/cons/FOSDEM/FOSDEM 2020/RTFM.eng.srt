1
00:00:14,920 --> 00:00:19,198
foreign okay so it's okay

2
00:00:17,359 --> 00:00:21,520
let me let me introduce uh president

3
00:00:19,199 --> 00:00:24,480
here our last speaker for

4
00:00:21,520 --> 00:00:25,519
the uh room after a long weekend that

5
00:00:24,480 --> 00:00:27,279
you have been

6
00:00:25,519 --> 00:00:28,639
uh getting all this knowledge from open

7
00:00:27,279 --> 00:00:29,359
source pro you can free software

8
00:00:28,640 --> 00:00:31,359
projects

9
00:00:29,359 --> 00:00:32,719
probably you're a little bit tired now i

10
00:00:31,359 --> 00:00:34,000
was lucky to be also the proven

11
00:00:32,719 --> 00:00:35,680
committee of this

12
00:00:34,000 --> 00:00:37,360
year and we selected specifically

13
00:00:35,680 --> 00:00:38,719
federico to be here because we know that

14
00:00:37,360 --> 00:00:41,200
he has good energy

15
00:00:38,719 --> 00:00:42,000
and very interesting topic to close up

16
00:00:41,200 --> 00:00:44,960
our room

17
00:00:42,000 --> 00:00:46,480
so um today was probably going to be

18
00:00:44,960 --> 00:00:48,960
able to deliver our very last talk

19
00:00:46,480 --> 00:00:50,160
in a very good way he used to live in

20
00:00:48,960 --> 00:00:52,480
the uk

21
00:00:50,160 --> 00:00:54,078
but before brexit he realized and had

22
00:00:52,480 --> 00:00:55,839
some enlightening information so i

23
00:00:54,079 --> 00:00:57,680
always go back to my home country so

24
00:00:55,840 --> 00:00:59,920
directly from italy please welcome

25
00:00:57,680 --> 00:01:04,000
federico

26
00:00:59,920 --> 00:01:06,799
thank you very much so

27
00:01:04,000 --> 00:01:07,680
yes my name is federico live in italy

28
00:01:06,799 --> 00:01:11,040
and

29
00:01:07,680 --> 00:01:14,080
yeah today this is the last

30
00:01:11,040 --> 00:01:17,759
talk of the day we will have

31
00:01:14,080 --> 00:01:18,798
some sort of stories rather technical

32
00:01:17,759 --> 00:01:22,159
stuff so

33
00:01:18,799 --> 00:01:23,759
it will keep you awake because it has

34
00:01:22,159 --> 00:01:27,600
been a very tiring

35
00:01:23,759 --> 00:01:30,159
weekend as the fosdem normally is so

36
00:01:27,600 --> 00:01:31,039
little word about myself this is my

37
00:01:30,159 --> 00:01:33,759
lovely cat

38
00:01:31,040 --> 00:01:35,280
oddsy uh this is me it's better the cat

39
00:01:33,759 --> 00:01:38,079
is on the front because he's

40
00:01:35,280 --> 00:01:40,079
cuter so he's much better in this way i

41
00:01:38,079 --> 00:01:42,798
was born in 1972

42
00:01:40,079 --> 00:01:43,119
i look younger but as my girlfriend says

43
00:01:42,799 --> 00:01:45,280
i

44
00:01:43,119 --> 00:01:47,040
am a time lord i'm a huge fan of doctor

45
00:01:45,280 --> 00:01:50,240
who so

46
00:01:47,040 --> 00:01:50,640
that's reason why i don't look old but

47
00:01:50,240 --> 00:01:53,119
i'm

48
00:01:50,640 --> 00:01:54,799
really really old in my opinion i

49
00:01:53,119 --> 00:01:57,840
started with the i.t

50
00:01:54,799 --> 00:02:01,439
in 1982 with the tron movie

51
00:01:57,840 --> 00:02:04,240
an amazing movie and i joined

52
00:02:01,439 --> 00:02:05,520
the oracle secret order dba secret

53
00:02:04,240 --> 00:02:08,399
society

54
00:02:05,520 --> 00:02:08,959
in 2004 this is the the way i like to

55
00:02:08,399 --> 00:02:12,000
describe

56
00:02:08,959 --> 00:02:13,920
my that period of my life is is like

57
00:02:12,000 --> 00:02:17,280
being part of the secret societies

58
00:02:13,920 --> 00:02:19,760
for sure in 2006 i

59
00:02:17,280 --> 00:02:20,640
discovered this crazy database at that

60
00:02:19,760 --> 00:02:23,920
time was the

61
00:02:20,640 --> 00:02:27,679
7.4 it was a massive bet for me

62
00:02:23,920 --> 00:02:28,079
and it's a bet i i believe i won because

63
00:02:27,680 --> 00:02:31,280
now

64
00:02:28,080 --> 00:02:32,800
posgres has been constantly gaining

65
00:02:31,280 --> 00:02:36,080
momentum is becoming

66
00:02:32,800 --> 00:02:39,519
something amazing is still amazing and

67
00:02:36,080 --> 00:02:43,200
like debris i have a positive tattoo

68
00:02:39,519 --> 00:02:43,200
on my left shoulder so

69
00:02:44,480 --> 00:02:49,760
so i'm really committed to postgres uh

70
00:02:47,760 --> 00:02:50,959
i work as freelance devops and data

71
00:02:49,760 --> 00:02:54,079
engineer in the

72
00:02:50,959 --> 00:02:57,200
meantime when i'm not at the conferences

73
00:02:54,080 --> 00:02:59,280
those are my contacts technical blog i

74
00:02:57,200 --> 00:02:59,920
write stuff about postgres this is my

75
00:02:59,280 --> 00:03:03,280
twitter

76
00:02:59,920 --> 00:03:05,920
so if you want to follow me

77
00:03:03,280 --> 00:03:08,400
very happy to to get that and this is my

78
00:03:05,920 --> 00:03:10,238
github page where i have a couple of

79
00:03:08,400 --> 00:03:12,480
interesting projects one of those i

80
00:03:10,239 --> 00:03:13,680
spoke yesterday i i talked yesterday at

81
00:03:12,480 --> 00:03:17,599
the python dev room

82
00:03:13,680 --> 00:03:19,120
about a compactor for posgres in cloud

83
00:03:17,599 --> 00:03:21,040
without the use of extensions

84
00:03:19,120 --> 00:03:22,959
it's a interesting project another one

85
00:03:21,040 --> 00:03:23,679
is a replication tool from my sequel to

86
00:03:22,959 --> 00:03:26,560
postgres so

87
00:03:23,680 --> 00:03:26,560
it can help you to

88
00:03:27,040 --> 00:03:32,000
escape my sequel if you are using it and

89
00:03:29,840 --> 00:03:36,400
the last one is linkedin

90
00:03:32,000 --> 00:03:39,760
so today we are talking about rtfm

91
00:03:36,400 --> 00:03:43,519
anybody knows what rtfm means right so

92
00:03:39,760 --> 00:03:47,040
the f read the f manual what the f

93
00:03:43,519 --> 00:03:51,680
stands for fantastic fabulous

94
00:03:47,040 --> 00:03:55,280
funny fancy well not exactly

95
00:03:51,680 --> 00:03:57,040
he i'm not speaking that word now

96
00:03:55,280 --> 00:03:59,519
even because he's in live streaming i

97
00:03:57,040 --> 00:04:02,560
don't like to to swear in like

98
00:03:59,519 --> 00:04:05,760
live streaming but that's it so

99
00:04:02,560 --> 00:04:08,319
what is the uh talk about telling

100
00:04:05,760 --> 00:04:12,159
stories of people that didn't do

101
00:04:08,319 --> 00:04:14,480
the rtfm and caused issues so

102
00:04:12,159 --> 00:04:15,200
issues disaster so like any other

103
00:04:14,480 --> 00:04:18,079
disaster

104
00:04:15,200 --> 00:04:18,880
i decide to put defcon levels like war

105
00:04:18,079 --> 00:04:22,079
games

106
00:04:18,880 --> 00:04:24,479
so we have disaster of defcon 5

107
00:04:22,079 --> 00:04:25,440
just the startling noise the dba is

108
00:04:24,479 --> 00:04:28,400
vaguely impressed

109
00:04:25,440 --> 00:04:28,880
so well something happened the second

110
00:04:28,400 --> 00:04:32,159
level

111
00:04:28,880 --> 00:04:35,440
defcon 4 tripping over feet dba alarmed

112
00:04:32,160 --> 00:04:38,240
oh something wrong is happening and

113
00:04:35,440 --> 00:04:39,040
earthquake for death country jumping on

114
00:04:38,240 --> 00:04:42,240
the seat

115
00:04:39,040 --> 00:04:44,639
and i believe er

116
00:04:42,240 --> 00:04:46,400
having an earthquake under your cities

117
00:04:44,639 --> 00:04:49,520
is something very very startling

118
00:04:46,400 --> 00:04:52,799
i live in a quite seismic

119
00:04:49,520 --> 00:04:56,799
area of italy so sometimes we uh

120
00:04:52,800 --> 00:04:59,520
we get this sort of emotions uh defcon 2

121
00:04:56,800 --> 00:05:00,400
asteroid dropping from the sky dba

122
00:04:59,520 --> 00:05:03,758
freaking out

123
00:05:00,400 --> 00:05:05,120
and then the defcon one daleks daleks

124
00:05:03,759 --> 00:05:07,759
invading the earth

125
00:05:05,120 --> 00:05:08,960
dba going berserk it happened to me

126
00:05:07,759 --> 00:05:12,000
going berserk

127
00:05:08,960 --> 00:05:14,880
admiring all around the office

128
00:05:12,000 --> 00:05:16,880
then we have the dramatist persona still

129
00:05:14,880 --> 00:05:17,680
from war games this is the professor

130
00:05:16,880 --> 00:05:21,520
falcon

131
00:05:17,680 --> 00:05:23,680
myself old ugly quite cynical

132
00:05:21,520 --> 00:05:25,280
and it's the perfect incarnation of the

133
00:05:23,680 --> 00:05:28,320
db right

134
00:05:25,280 --> 00:05:31,599
and the others david lightman

135
00:05:28,320 --> 00:05:34,800
uh young reckless very very smart

136
00:05:31,600 --> 00:05:38,080
and we idea that can cause the third

137
00:05:34,800 --> 00:05:42,080
world war if they they are not uh

138
00:05:38,080 --> 00:05:45,520
careful so table of contents

139
00:05:42,080 --> 00:05:48,800
we have three stories and a wrap up

140
00:05:45,520 --> 00:05:52,080
to discuss about what we've seen

141
00:05:48,800 --> 00:05:55,120
the battle did it emergency shut down

142
00:05:52,080 --> 00:05:58,560
and cast a spell three stories of three

143
00:05:55,120 --> 00:06:02,160
rtfm that never happened and what caused

144
00:05:58,560 --> 00:06:04,160
them now they were fixed by myself

145
00:06:02,160 --> 00:06:05,440
so let's start with the battle did it

146
00:06:04,160 --> 00:06:08,880
defcon 4

147
00:06:05,440 --> 00:06:12,000
not a big deal caused by the others

148
00:06:08,880 --> 00:06:16,280
let's see the context we had

149
00:06:12,000 --> 00:06:19,759
that was back in 2013 it was postgres

150
00:06:16,280 --> 00:06:22,400
9.1 still the old pgx

151
00:06:19,759 --> 00:06:24,319
log not too much about monitoring there

152
00:06:22,400 --> 00:06:27,039
was no fancy things

153
00:06:24,319 --> 00:06:29,600
and we had this system with one very

154
00:06:27,039 --> 00:06:32,960
expensive fusion io cards the

155
00:06:29,600 --> 00:06:35,919
at that time they were pioneering the

156
00:06:32,960 --> 00:06:37,919
the the disks in pci express they were

157
00:06:35,919 --> 00:06:41,198
massively expensive

158
00:06:37,919 --> 00:06:41,758
this system worked quite nice but had

159
00:06:41,199 --> 00:06:44,960
this

160
00:06:41,759 --> 00:06:46,160
strange table we use it as a working

161
00:06:44,960 --> 00:06:48,560
queue so

162
00:06:46,160 --> 00:06:49,919
some records all the records were picked

163
00:06:48,560 --> 00:06:52,160
in some way

164
00:06:49,919 --> 00:06:54,880
and these records were used for

165
00:06:52,160 --> 00:06:57,840
processing some stuff in other places

166
00:06:54,880 --> 00:06:58,560
this table had just 100 million rows not

167
00:06:57,840 --> 00:07:00,799
so big

168
00:06:58,560 --> 00:07:02,400
in my opinion quite big for that time

169
00:07:00,800 --> 00:07:05,280
now is is getting

170
00:07:02,400 --> 00:07:06,799
medium size for for the for the size we

171
00:07:05,280 --> 00:07:09,758
are using now

172
00:07:06,800 --> 00:07:11,280
uh in this level at two time stem fields

173
00:07:09,759 --> 00:07:14,400
these two time stamp fields

174
00:07:11,280 --> 00:07:17,039
were updated twice one for the start and

175
00:07:14,400 --> 00:07:21,919
one for the end of the processing

176
00:07:17,039 --> 00:07:25,440
for each row and each row was 160 byte

177
00:07:21,919 --> 00:07:30,000
in average length now

178
00:07:25,440 --> 00:07:32,639
anybody knows the mvcc how it works

179
00:07:30,000 --> 00:07:34,880
in buzzers there's no update so this

180
00:07:32,639 --> 00:07:37,280
thing was inserting twice

181
00:07:34,880 --> 00:07:38,639
these rows every time and each row were

182
00:07:37,280 --> 00:07:41,758
processed

183
00:07:38,639 --> 00:07:44,080
and they stable add indices so the

184
00:07:41,759 --> 00:07:45,759
the rows changed pages and the indices

185
00:07:44,080 --> 00:07:49,039
started bloating

186
00:07:45,759 --> 00:07:50,879
and also they were the primary key onto

187
00:07:49,039 --> 00:07:54,318
industry fields

188
00:07:50,879 --> 00:07:55,199
so the problem wasn't exactly the bloat

189
00:07:54,319 --> 00:07:57,039
the table

190
00:07:55,199 --> 00:07:59,280
copied quite well with the performance

191
00:07:57,039 --> 00:08:02,560
but the problem was the ssd

192
00:07:59,280 --> 00:08:05,359
on ssd we have limited rights and

193
00:08:02,560 --> 00:08:05,680
writing a lot of stuff on this ssd even

194
00:08:05,360 --> 00:08:08,800
with

195
00:08:05,680 --> 00:08:11,840
round robin for the blocks caused

196
00:08:08,800 --> 00:08:12,479
a massive exhaustion of rights that was

197
00:08:11,840 --> 00:08:15,520
the

198
00:08:12,479 --> 00:08:17,360
i o just on the pgx log thanks goodness

199
00:08:15,520 --> 00:08:20,240
it was on rotating disk otherwise

200
00:08:17,360 --> 00:08:21,039
it will be much much worse and the data

201
00:08:20,240 --> 00:08:24,240
file will read

202
00:08:21,039 --> 00:08:24,800
even harder in this thing so the table

203
00:08:24,240 --> 00:08:28,879
was

204
00:08:24,800 --> 00:08:32,000
rewritten every day every day this table

205
00:08:28,879 --> 00:08:34,000
got new blocks and the rows started

206
00:08:32,000 --> 00:08:36,799
accumulating inside it

207
00:08:34,000 --> 00:08:38,240
the dead rose and outer vacuums started

208
00:08:36,799 --> 00:08:40,159
every six hours

209
00:08:38,240 --> 00:08:42,240
flushing more the more blocks on the

210
00:08:40,159 --> 00:08:46,160
disk so consuming even more

211
00:08:42,240 --> 00:08:48,800
the uh the rights on this uh fusion i o

212
00:08:46,160 --> 00:08:50,240
and in just three months the available

213
00:08:48,800 --> 00:08:53,760
price drops for 80

214
00:08:50,240 --> 00:08:55,360
to 44 percent just eight months left

215
00:08:53,760 --> 00:08:58,480
before the dozens day

216
00:08:55,360 --> 00:09:01,279
and the doomsday in ssd world it means

217
00:08:58,480 --> 00:09:03,120
disk in read-only mode at some point it

218
00:09:01,279 --> 00:09:06,720
just stopped accepting rights

219
00:09:03,120 --> 00:09:10,160
daleks coming down to invade the earth

220
00:09:06,720 --> 00:09:13,519
so how was fixing this thing

221
00:09:10,160 --> 00:09:15,519
well the primary key i redesigned

222
00:09:13,519 --> 00:09:16,959
slightly this thing i didn't touch the

223
00:09:15,519 --> 00:09:20,560
existing table

224
00:09:16,959 --> 00:09:22,000
because it was so uh deeply coupled with

225
00:09:20,560 --> 00:09:24,880
the rest of things so i could not

226
00:09:22,000 --> 00:09:26,560
change this thing but i created a new

227
00:09:24,880 --> 00:09:29,680
table aggregating

228
00:09:26,560 --> 00:09:31,199
the fields of the primary key the first

229
00:09:29,680 --> 00:09:33,279
field has common value

230
00:09:31,200 --> 00:09:34,320
and the second field use it as a

231
00:09:33,279 --> 00:09:37,120
grouping key

232
00:09:34,320 --> 00:09:37,839
used to be stored inside an integer

233
00:09:37,120 --> 00:09:40,560
array

234
00:09:37,839 --> 00:09:43,440
so accessing from the first field and

235
00:09:40,560 --> 00:09:45,599
accessing the single pieces of the array

236
00:09:43,440 --> 00:09:47,760
physical location of the array i could

237
00:09:45,600 --> 00:09:50,560
access exactly the point

238
00:09:47,760 --> 00:09:52,399
inside the other table without rotating

239
00:09:50,560 --> 00:09:55,040
the rows inside the other table

240
00:09:52,399 --> 00:09:57,440
and when the fix came in the wall

241
00:09:55,040 --> 00:09:58,240
generation rate dropped to 40 megabytes

242
00:09:57,440 --> 00:10:00,959
per second

243
00:09:58,240 --> 00:10:01,839
from 1.5 gigabytes and this is the

244
00:10:00,959 --> 00:10:04,959
mooning graph

245
00:10:01,839 --> 00:10:07,440
of the writes available this

246
00:10:04,959 --> 00:10:08,399
is the operation the mad operation and

247
00:10:07,440 --> 00:10:10,800
then we

248
00:10:08,399 --> 00:10:11,440
when the fix came in everything went

249
00:10:10,800 --> 00:10:13,519
flat

250
00:10:11,440 --> 00:10:15,279
no more risk i estimated that the

251
00:10:13,519 --> 00:10:18,480
remaining pb

252
00:10:15,279 --> 00:10:22,320
will last for at least 10 years at that

253
00:10:18,480 --> 00:10:25,760
writing rate that was amazing so

254
00:10:22,320 --> 00:10:29,760
how do you avoid this sort of situation

255
00:10:25,760 --> 00:10:31,279
doing rtfm and for retfm i can recommend

256
00:10:29,760 --> 00:10:35,200
you these two

257
00:10:31,279 --> 00:10:36,160
links mvcc slides and video from bruce

258
00:10:35,200 --> 00:10:39,680
mambian

259
00:10:36,160 --> 00:10:43,439
i love bruce presentations uh

260
00:10:39,680 --> 00:10:46,560
go to his his website his mom jean.us

261
00:10:43,440 --> 00:10:49,519
watch it is something you will learn

262
00:10:46,560 --> 00:10:51,119
a lot of stuff every time i visit i come

263
00:10:49,519 --> 00:10:51,839
to the conference and there's a talk

264
00:10:51,120 --> 00:10:55,279
with

265
00:10:51,839 --> 00:10:57,839
from ruse is something like bam for me

266
00:10:55,279 --> 00:11:00,160
the my brain explodes every time so

267
00:10:57,839 --> 00:11:02,800
watch this video it will explain very

268
00:11:00,160 --> 00:11:06,480
very clearly how the mvcc works

269
00:11:02,800 --> 00:11:08,880
and how you can avoid the uh

270
00:11:06,480 --> 00:11:11,279
the risk of exhausting your rights but

271
00:11:08,880 --> 00:11:14,079
also reducing the i o so

272
00:11:11,279 --> 00:11:16,720
reduced i o it means having a more

273
00:11:14,079 --> 00:11:19,760
efficient caching more efficient

274
00:11:16,720 --> 00:11:20,880
database and more responsive working for

275
00:11:19,760 --> 00:11:22,720
you

276
00:11:20,880 --> 00:11:23,920
this is the first store this was the

277
00:11:22,720 --> 00:11:27,279
first story so

278
00:11:23,920 --> 00:11:30,640
let's move to the next one that was me

279
00:11:27,279 --> 00:11:33,519
and i caused the defcon one situation

280
00:11:30,640 --> 00:11:34,560
emergency shutdown that was an amazing

281
00:11:33,519 --> 00:11:38,079
discovery

282
00:11:34,560 --> 00:11:40,880
uh by the way this story

283
00:11:38,079 --> 00:11:42,640
tomorrow on my blog it will appear the

284
00:11:40,880 --> 00:11:45,920
the blog post about this story

285
00:11:42,640 --> 00:11:46,319
we all the explanation so uh if you look

286
00:11:45,920 --> 00:11:48,800
at

287
00:11:46,320 --> 00:11:49,920
the blog tomorrow uh you will find the

288
00:11:48,800 --> 00:11:53,199
uh

289
00:11:49,920 --> 00:11:56,000
even better described uh about what we

290
00:11:53,200 --> 00:11:57,360
uh i found about this this experience in

291
00:11:56,000 --> 00:12:01,639
this experience

292
00:11:57,360 --> 00:12:02,880
so context virtual machine that was in

293
00:12:01,639 --> 00:12:06,880
2016

294
00:12:02,880 --> 00:12:08,839
2017 probably postgres 9.6

295
00:12:06,880 --> 00:12:11,920
virtual machine for business

296
00:12:08,839 --> 00:12:13,040
intelligence fairly big database 1.4

297
00:12:11,920 --> 00:12:15,199
terabytes

298
00:12:13,040 --> 00:12:16,639
real-time replica from my sequel to

299
00:12:15,200 --> 00:12:20,240
posgress using

300
00:12:16,639 --> 00:12:23,519
my tool pg chameleon this tool

301
00:12:20,240 --> 00:12:25,680
can first read the rows from my sequel

302
00:12:23,519 --> 00:12:26,639
stores into postgres and then use this

303
00:12:25,680 --> 00:12:30,479
information for

304
00:12:26,639 --> 00:12:34,160
generate ddl and replay against postgres

305
00:12:30,480 --> 00:12:35,839
and now this is done through a plpg sql

306
00:12:34,160 --> 00:12:38,560
function

307
00:12:35,839 --> 00:12:39,839
replace the data and also manage all the

308
00:12:38,560 --> 00:12:42,160
error that can appear

309
00:12:39,839 --> 00:12:43,600
during the replay so you can exclude

310
00:12:42,160 --> 00:12:45,760
tables you can you can do

311
00:12:43,600 --> 00:12:48,560
some interesting stuff so everything

312
00:12:45,760 --> 00:12:52,160
works very very nicely

313
00:12:48,560 --> 00:12:55,119
monitoring not yet implemented my bad

314
00:12:52,160 --> 00:12:56,560
i was too busy on working on that thing

315
00:12:55,120 --> 00:12:59,519
and

316
00:12:56,560 --> 00:13:00,399
yeah everything went fine people

317
00:12:59,519 --> 00:13:02,880
analysts

318
00:13:00,399 --> 00:13:04,560
were very very happy they gave me this

319
00:13:02,880 --> 00:13:07,040
t-shirt

320
00:13:04,560 --> 00:13:08,319
as a gift for bringing postgres in place

321
00:13:07,040 --> 00:13:11,360
on my sequel

322
00:13:08,320 --> 00:13:14,800
and the day started normally

323
00:13:11,360 --> 00:13:17,200
and then i heard screams people not

324
00:13:14,800 --> 00:13:17,920
running any more queries with honorable

325
00:13:17,200 --> 00:13:21,040
errors

326
00:13:17,920 --> 00:13:24,319
and but the database was up as usual

327
00:13:21,040 --> 00:13:27,519
but the nightly maintenance failed and

328
00:13:24,320 --> 00:13:29,680
i got this message in the log

329
00:13:27,519 --> 00:13:31,760
database is not accepting commands to

330
00:13:29,680 --> 00:13:32,638
avoid wrap-around data loss in database

331
00:13:31,760 --> 00:13:35,680
analytics

332
00:13:32,639 --> 00:13:39,440
this was the only shutdown

333
00:13:35,680 --> 00:13:43,040
emergency mode i even had in my career

334
00:13:39,440 --> 00:13:44,959
starting from 2006 on postgres and i was

335
00:13:43,040 --> 00:13:46,839
the cause of that so i'm very proud of

336
00:13:44,959 --> 00:13:49,920
that

337
00:13:46,839 --> 00:13:52,000
so i don't know if you have even read

338
00:13:49,920 --> 00:13:53,040
this part of the manual on the on the

339
00:13:52,000 --> 00:13:56,320
postgres.org

340
00:13:53,040 --> 00:13:59,279
website but it's quite scary uh

341
00:13:56,320 --> 00:14:00,800
what happened when this is uh when these

342
00:13:59,279 --> 00:14:04,800
messages appear it means

343
00:14:00,800 --> 00:14:08,639
you are you have at least one tuple

344
00:14:04,800 --> 00:14:11,120
uh at just less and less than one

345
00:14:08,639 --> 00:14:12,079
million rows from disappearing from the

346
00:14:11,120 --> 00:14:14,480
database

347
00:14:12,079 --> 00:14:15,920
which is in inside the database

348
00:14:14,480 --> 00:14:18,320
architecture

349
00:14:15,920 --> 00:14:19,839
the rows are compared against numbers

350
00:14:18,320 --> 00:14:22,959
and these numbers are just

351
00:14:19,839 --> 00:14:26,560
32 bytes integers so

352
00:14:22,959 --> 00:14:29,040
they 32 bits integers so they've wrapped

353
00:14:26,560 --> 00:14:29,599
every 4 billion times every 4 billion

354
00:14:29,040 --> 00:14:32,800
numbers

355
00:14:29,600 --> 00:14:35,600
they start from the number one and we

356
00:14:32,800 --> 00:14:36,560
restart the sequence and everything

357
00:14:35,600 --> 00:14:39,199
bigger

358
00:14:36,560 --> 00:14:39,839
is in the future everything's smaller in

359
00:14:39,199 --> 00:14:42,399
the past

360
00:14:39,839 --> 00:14:43,279
so as soon as it wraps around everything

361
00:14:42,399 --> 00:14:45,120
becomes

362
00:14:43,279 --> 00:14:47,760
in the future postgres have a very

363
00:14:45,120 --> 00:14:50,880
clever way to avoid this scenario

364
00:14:47,760 --> 00:14:51,439
but this often the number of lot

365
00:14:50,880 --> 00:14:53,600
available

366
00:14:51,440 --> 00:14:56,160
2 billion in the future 2 billion in the

367
00:14:53,600 --> 00:14:59,360
past whatever is the number

368
00:14:56,160 --> 00:15:01,920
and that is the reason why

369
00:14:59,360 --> 00:15:03,279
so you have to run vacuum or out of

370
00:15:01,920 --> 00:15:05,120
vacuum to perform

371
00:15:03,279 --> 00:15:08,880
the operation of freezing the roads

372
00:15:05,120 --> 00:15:08,880
before this problem happens

373
00:15:09,199 --> 00:15:14,639
so what caused that

374
00:15:12,399 --> 00:15:17,279
insufficient out of account processes

375
00:15:14,639 --> 00:15:19,199
databases should have the auto vacuum on

376
00:15:17,279 --> 00:15:20,959
because out of vacuum does a lot of

377
00:15:19,199 --> 00:15:23,439
stuff and in particular

378
00:15:20,959 --> 00:15:24,079
can save you from having these sort of

379
00:15:23,440 --> 00:15:25,920
issues

380
00:15:24,079 --> 00:15:27,519
but tuning the out of arkham is very

381
00:15:25,920 --> 00:15:30,079
important because

382
00:15:27,519 --> 00:15:30,560
fewer out of vacuum on databases with a

383
00:15:30,079 --> 00:15:33,680
lot of

384
00:15:30,560 --> 00:15:34,000
updates may not pick the correct table

385
00:15:33,680 --> 00:15:36,959
for

386
00:15:34,000 --> 00:15:38,560
doing the out of vacuum when is needed

387
00:15:36,959 --> 00:15:39,518
or when the out of argument for to

388
00:15:38,560 --> 00:15:42,560
prevent

389
00:15:39,519 --> 00:15:45,759
x i develop around can start

390
00:15:42,560 --> 00:15:49,680
too late for saving your database

391
00:15:45,759 --> 00:15:52,160
and the other reason was myself

392
00:15:49,680 --> 00:15:52,800
the reason apparently i haven't found

393
00:15:52,160 --> 00:15:54,880
any

394
00:15:52,800 --> 00:15:56,079
reference about this behavior an

395
00:15:54,880 --> 00:15:58,959
apparently undercover

396
00:15:56,079 --> 00:16:00,160
undocumented behavior of the plp gsql

397
00:15:58,959 --> 00:16:03,920
functions

398
00:16:00,160 --> 00:16:06,000
uh you know the functions in postgres

399
00:16:03,920 --> 00:16:06,639
are single transaction when you run this

400
00:16:06,000 --> 00:16:09,440
function

401
00:16:06,639 --> 00:16:10,399
when it finishes and commits you get all

402
00:16:09,440 --> 00:16:13,440
the changes

403
00:16:10,399 --> 00:16:17,199
otherwise you roll back everything so

404
00:16:13,440 --> 00:16:20,399
they consume just one x id right

405
00:16:17,199 --> 00:16:24,160
well not really because if you have an

406
00:16:20,399 --> 00:16:27,040
exception inside your function's body

407
00:16:24,160 --> 00:16:29,040
inside this exception there is an idml

408
00:16:27,040 --> 00:16:32,399
insert delete update

409
00:16:29,040 --> 00:16:33,120
each time this dml is executed consumes

410
00:16:32,399 --> 00:16:36,480
an extra

411
00:16:33,120 --> 00:16:39,759
x id so my function for replaying stuff

412
00:16:36,480 --> 00:16:42,800
in pg chameleon was consuming 100 000

413
00:16:39,759 --> 00:16:44,720
x id every time completed a batch to

414
00:16:42,800 --> 00:16:48,399
replay

415
00:16:44,720 --> 00:16:50,959
and it replaced exactly the dml

416
00:16:48,399 --> 00:16:51,440
for loop in an exception consuming an x

417
00:16:50,959 --> 00:16:54,239
id

418
00:16:51,440 --> 00:16:56,639
so i will show you slightly more in

419
00:16:54,240 --> 00:16:59,839
detail this thing so we create a table t

420
00:16:56,639 --> 00:17:01,839
test with the id integer no foreign keys

421
00:16:59,839 --> 00:17:04,400
no primary key just a simple table

422
00:17:01,839 --> 00:17:05,439
just the data then we have this function

423
00:17:04,400 --> 00:17:08,640
that

424
00:17:05,439 --> 00:17:09,439
fn loop with no exception we declare

425
00:17:08,640 --> 00:17:12,079
this number

426
00:17:09,439 --> 00:17:13,760
and then we loop over this number from

427
00:17:12,079 --> 00:17:17,520
one to one thousand

428
00:17:13,760 --> 00:17:19,679
and we do an insert for each loop okay

429
00:17:17,520 --> 00:17:21,679
then we have the same function but

430
00:17:19,679 --> 00:17:22,319
inside the loop we have a begin

431
00:17:21,679 --> 00:17:24,640
exception

432
00:17:22,319 --> 00:17:25,760
when others then null so if there's any

433
00:17:24,640 --> 00:17:29,200
error just a

434
00:17:25,760 --> 00:17:34,080
function uh skip the

435
00:17:29,200 --> 00:17:35,840
the loop the iteration and continues so

436
00:17:34,080 --> 00:17:37,760
you have little sense in this context

437
00:17:35,840 --> 00:17:38,559
but it can be useful to have the

438
00:17:37,760 --> 00:17:41,679
exception

439
00:17:38,559 --> 00:17:44,559
so let's check with this database i

440
00:17:41,679 --> 00:17:45,679
vacuum freeze my database starting from

441
00:17:44,559 --> 00:17:48,160
three i run

442
00:17:45,679 --> 00:17:48,960
three queries before doing that select

443
00:17:48,160 --> 00:17:51,919
that name

444
00:17:48,960 --> 00:17:54,000
age of that frozen xid from pg database

445
00:17:51,919 --> 00:17:56,320
where that name is equal test

446
00:17:54,000 --> 00:17:57,120
so it returns the name and the age of

447
00:17:56,320 --> 00:17:59,760
the oldest

448
00:17:57,120 --> 00:18:00,479
transaction id inside the database that

449
00:17:59,760 --> 00:18:04,000
is not

450
00:18:00,480 --> 00:18:07,039
frozen then i execute the fn

451
00:18:04,000 --> 00:18:10,400
loop no exception and after that

452
00:18:07,039 --> 00:18:11,600
my x id increased by one so jumps from

453
00:18:10,400 --> 00:18:14,000
three to one

454
00:18:11,600 --> 00:18:15,520
as expected now let's do the same with

455
00:18:14,000 --> 00:18:19,280
the other function

456
00:18:15,520 --> 00:18:21,600
age starting five after this query

457
00:18:19,280 --> 00:18:23,120
then i run this thing and the eight

458
00:18:21,600 --> 00:18:26,240
jumps to one thousand

459
00:18:23,120 --> 00:18:29,360
and six so one thousands

460
00:18:26,240 --> 00:18:31,760
x id one for each dml

461
00:18:29,360 --> 00:18:34,479
inside the for loop plus the x id for

462
00:18:31,760 --> 00:18:38,320
the function itself

463
00:18:34,480 --> 00:18:40,720
so how this was fixed

464
00:18:38,320 --> 00:18:42,000
this is a the emergency handling in the

465
00:18:40,720 --> 00:18:43,679
in the database universe

466
00:18:42,000 --> 00:18:45,120
you forget everything you silence

467
00:18:43,679 --> 00:18:47,600
everything and first thing

468
00:18:45,120 --> 00:18:48,719
silence luck because we people were

469
00:18:47,600 --> 00:18:51,360
screaming in

470
00:18:48,720 --> 00:18:53,039
a private message getting a lot of noise

471
00:18:51,360 --> 00:18:56,000
from slack so silence luck

472
00:18:53,039 --> 00:18:57,840
moving to an empty uh meeting room put

473
00:18:56,000 --> 00:19:02,160
the message i know

474
00:18:57,840 --> 00:19:03,678
on the on the screen on the door

475
00:19:02,160 --> 00:19:06,480
and then start the cluster in single

476
00:19:03,679 --> 00:19:09,120
user mode is an amazing experience i

477
00:19:06,480 --> 00:19:12,000
don't want to repeat anymore

478
00:19:09,120 --> 00:19:15,199
uh if you have ever worked with psql

479
00:19:12,000 --> 00:19:18,960
psql is fantastic

480
00:19:15,200 --> 00:19:22,400
line completion backslash commands

481
00:19:18,960 --> 00:19:25,200
no the single user mode is something

482
00:19:22,400 --> 00:19:25,679
horrible you get a lot of stuff a lot of

483
00:19:25,200 --> 00:19:27,840
noise

484
00:19:25,679 --> 00:19:30,000
and you have nothing to do you have to

485
00:19:27,840 --> 00:19:30,879
type every single letter of your query

486
00:19:30,000 --> 00:19:33,440
you can do

487
00:19:30,880 --> 00:19:33,919
probably maybe maybe the copy copy and

488
00:19:33,440 --> 00:19:36,400
paste

489
00:19:33,919 --> 00:19:38,160
maybe may work but there's no way for

490
00:19:36,400 --> 00:19:41,919
loading files in external

491
00:19:38,160 --> 00:19:45,200
so i think it should be improved this

492
00:19:41,919 --> 00:19:46,160
the this interface so it should be kept

493
00:19:45,200 --> 00:19:48,240
that way so people

494
00:19:46,160 --> 00:19:49,440
is so scared that they will try to avoid

495
00:19:48,240 --> 00:19:52,400
any

496
00:19:49,440 --> 00:19:53,600
at any cost so start the cluster in

497
00:19:52,400 --> 00:19:56,960
single user mode

498
00:19:53,600 --> 00:19:58,559
get the aj in tables and vacuum the

499
00:19:56,960 --> 00:20:02,480
aging tables

500
00:19:58,559 --> 00:20:07,440
and do a postmortem analysis so

501
00:20:02,480 --> 00:20:10,559
analyze what went wrong who was the uh

502
00:20:07,440 --> 00:20:13,520
the cause of that thing myself and

503
00:20:10,559 --> 00:20:15,200
so yeah and this is a very useful query

504
00:20:13,520 --> 00:20:16,559
for getting the adjacent tables i think

505
00:20:15,200 --> 00:20:18,240
this one

506
00:20:16,559 --> 00:20:20,080
not sure if i derive it from the

507
00:20:18,240 --> 00:20:23,440
postgresql wiki

508
00:20:20,080 --> 00:20:23,760
which is a oh is a is an amazing source

509
00:20:23,440 --> 00:20:26,960
of

510
00:20:23,760 --> 00:20:27,679
information or from the pg check

511
00:20:26,960 --> 00:20:31,039
postgres

512
00:20:27,679 --> 00:20:33,520
the um the bucardo per script for uh for

513
00:20:31,039 --> 00:20:36,320
nagios but this is very useful because

514
00:20:33,520 --> 00:20:38,559
taking into account the frozen excited

515
00:20:36,320 --> 00:20:40,559
the red frozen x id for the table but

516
00:20:38,559 --> 00:20:43,840
also for the associated toes table

517
00:20:40,559 --> 00:20:46,960
because you can get a table that looks

518
00:20:43,840 --> 00:20:48,320
nice but if maybe the associated toes

519
00:20:46,960 --> 00:20:51,600
table is aging

520
00:20:48,320 --> 00:20:55,439
so this query gets everything outside

521
00:20:51,600 --> 00:20:57,678
for any relation table

522
00:20:55,440 --> 00:20:59,760
or any materialized view because do not

523
00:20:57,679 --> 00:21:02,480
forget about the materialized views

524
00:20:59,760 --> 00:21:03,039
materialized views are basically tables

525
00:21:02,480 --> 00:21:06,559
that

526
00:21:03,039 --> 00:21:07,200
follow the same rules and when you get

527
00:21:06,559 --> 00:21:09,760
this

528
00:21:07,200 --> 00:21:10,559
maybe something more fancy can be done

529
00:21:09,760 --> 00:21:13,600
something like

530
00:21:10,559 --> 00:21:14,399
using format for building up the vacuum

531
00:21:13,600 --> 00:21:16,480
statements

532
00:21:14,400 --> 00:21:19,039
straight from that thing dumping on a

533
00:21:16,480 --> 00:21:22,720
file this is a very oracle style for

534
00:21:19,039 --> 00:21:25,840
using i'm still using that that approach

535
00:21:22,720 --> 00:21:29,120
so rtfm

536
00:21:25,840 --> 00:21:31,678
what i missed in this thing

537
00:21:29,120 --> 00:21:33,280
well i wasn't able to find this case on

538
00:21:31,679 --> 00:21:36,480
the documentation

539
00:21:33,280 --> 00:21:37,840
if you look on the exception part

540
00:21:36,480 --> 00:21:41,120
trapping exception

541
00:21:37,840 --> 00:21:44,559
on the postgres online manual

542
00:21:41,120 --> 00:21:46,479
it says yes use exception with caution

543
00:21:44,559 --> 00:21:48,559
because they are more expensive

544
00:21:46,480 --> 00:21:49,840
compared to the function with no

545
00:21:48,559 --> 00:21:53,440
exception blocks

546
00:21:49,840 --> 00:21:57,120
but it says nothing about the exhaustion

547
00:21:53,440 --> 00:22:00,159
of the transaction x id

548
00:21:57,120 --> 00:22:02,799
so it may be useful to add a

549
00:22:00,159 --> 00:22:03,520
warning uh i will not by myself i will

550
00:22:02,799 --> 00:22:07,039
submit

551
00:22:03,520 --> 00:22:11,280
a patch for the postgres manual i

552
00:22:07,039 --> 00:22:13,679
i need help for building up the uh

553
00:22:11,280 --> 00:22:14,720
the entire thing so uh how to build the

554
00:22:13,679 --> 00:22:17,919
the documentation

555
00:22:14,720 --> 00:22:20,240
i i tried and i failed so

556
00:22:17,919 --> 00:22:21,760
i need to learn and that's the amazing

557
00:22:20,240 --> 00:22:24,799
part of this this job

558
00:22:21,760 --> 00:22:27,760
you learn constantly so

559
00:22:24,799 --> 00:22:28,960
cast the spell that is another amazing

560
00:22:27,760 --> 00:22:32,080
story

561
00:22:28,960 --> 00:22:36,000
uh let me recap today

562
00:22:32,080 --> 00:22:40,080
uh 2012 2012

563
00:22:36,000 --> 00:22:44,720
i started the second job in the uk

564
00:22:40,080 --> 00:22:47,360
on posg sql a very large database

565
00:22:44,720 --> 00:22:50,080
and that time there were a mixed

566
00:22:47,360 --> 00:22:51,760
environment between posgus 9-0 posgus

567
00:22:50,080 --> 00:22:54,158
9-1

568
00:22:51,760 --> 00:22:55,440
then i upgraded everything to posgas92

569
00:22:54,159 --> 00:22:59,039
it was

570
00:22:55,440 --> 00:23:01,919
an interesting experience so we had this

571
00:22:59,039 --> 00:23:03,120
large database at that time it was large

572
00:23:01,919 --> 00:23:06,480
two terabytes

573
00:23:03,120 --> 00:23:09,199
uh still fusion i o on that thing

574
00:23:06,480 --> 00:23:09,679
on that database i remember i i joked

575
00:23:09,200 --> 00:23:12,000
about

576
00:23:09,679 --> 00:23:13,280
playing tetris with the with the tables

577
00:23:12,000 --> 00:23:16,400
and table spaces

578
00:23:13,280 --> 00:23:18,480
because periodically the active uh

579
00:23:16,400 --> 00:23:20,480
partition were moved on to fusion i o

580
00:23:18,480 --> 00:23:22,080
but there was no not enough space for

581
00:23:20,480 --> 00:23:24,240
keeping everything onto it

582
00:23:22,080 --> 00:23:25,199
so the expiring partition were put on

583
00:23:24,240 --> 00:23:28,000
rotating disk

584
00:23:25,200 --> 00:23:28,720
and every year and every month there was

585
00:23:28,000 --> 00:23:31,440
this

586
00:23:28,720 --> 00:23:33,760
this movement or tetris so playing a lot

587
00:23:31,440 --> 00:23:36,480
about the with the space

588
00:23:33,760 --> 00:23:37,200
in the other normal design and for

589
00:23:36,480 --> 00:23:40,480
horrible

590
00:23:37,200 --> 00:23:44,960
i mean table with few

591
00:23:40,480 --> 00:23:48,480
fields one etch store field

592
00:23:44,960 --> 00:23:50,720
and java mediated the

593
00:23:48,480 --> 00:23:52,000
structure straight into the edge store

594
00:23:50,720 --> 00:23:54,400
field

595
00:23:52,000 --> 00:23:56,559
and that was causing a lot of problem uh

596
00:23:54,400 --> 00:24:00,080
until the day i removed that thing

597
00:23:56,559 --> 00:24:03,600
and we ended with a 91 field

598
00:24:00,080 --> 00:24:06,559
table quite big and

599
00:24:03,600 --> 00:24:08,719
we had it was one of my first assignment

600
00:24:06,559 --> 00:24:11,918
doing performance tuning on a query

601
00:24:08,720 --> 00:24:12,880
uh that retrieved just 150 rows in six

602
00:24:11,919 --> 00:24:15,919
minutes

603
00:24:12,880 --> 00:24:18,480
okay the storage were big

604
00:24:15,919 --> 00:24:19,200
but that was absolutely insane the

605
00:24:18,480 --> 00:24:21,600
storage

606
00:24:19,200 --> 00:24:22,320
it was in ssd it was incred lightning

607
00:24:21,600 --> 00:24:25,600
fast so

608
00:24:22,320 --> 00:24:29,039
there was something else uh

609
00:24:25,600 --> 00:24:31,360
the we had this super expensive

610
00:24:29,039 --> 00:24:34,879
fusion io storage and super expensive

611
00:24:31,360 --> 00:24:38,559
cpu and memory state of the art in 2013

612
00:24:34,880 --> 00:24:39,760
we are talking about a 35 pound 35 000

613
00:24:38,559 --> 00:24:42,399
pounds server

614
00:24:39,760 --> 00:24:43,840
bare metal no virtualization everything

615
00:24:42,400 --> 00:24:46,480
installed

616
00:24:43,840 --> 00:24:48,000
on that thing and the performance

617
00:24:46,480 --> 00:24:51,679
horribly

618
00:24:48,000 --> 00:24:54,400
so checking the execution plan well

619
00:24:51,679 --> 00:24:56,240
first check the statistics are okay then

620
00:24:54,400 --> 00:24:58,640
check the execution plan

621
00:24:56,240 --> 00:25:01,679
the execution plan was absolutely okay

622
00:24:58,640 --> 00:25:04,480
no problem at all

623
00:25:01,679 --> 00:25:05,200
there were a sub query with wrong join

624
00:25:04,480 --> 00:25:08,480
criteria

625
00:25:05,200 --> 00:25:09,120
try to fix it but no success in slowing

626
00:25:08,480 --> 00:25:11,840
in

627
00:25:09,120 --> 00:25:12,959
improving the speed of this this query

628
00:25:11,840 --> 00:25:15,760
and but

629
00:25:12,960 --> 00:25:17,120
at some point i did a select star from

630
00:25:15,760 --> 00:25:20,000
the same query

631
00:25:17,120 --> 00:25:20,559
and the query completed in seconds not

632
00:25:20,000 --> 00:25:23,840
minutes

633
00:25:20,559 --> 00:25:26,000
oh something started alarming there's

634
00:25:23,840 --> 00:25:27,360
some some bells started ringing in my

635
00:25:26,000 --> 00:25:31,120
head so

636
00:25:27,360 --> 00:25:34,559
well what went wrong in this thing

637
00:25:31,120 --> 00:25:37,760
uh you know h store is not so

638
00:25:34,559 --> 00:25:39,279
complex he's some sort of grandfather of

639
00:25:37,760 --> 00:25:42,640
the jason

640
00:25:39,279 --> 00:25:45,279
so is uh every time whatever you

641
00:25:42,640 --> 00:25:47,120
store inside the key you get the text

642
00:25:45,279 --> 00:25:50,720
data type

643
00:25:47,120 --> 00:25:52,399
so if you are a strongly typed

644
00:25:50,720 --> 00:25:55,360
language on the other side you have to

645
00:25:52,400 --> 00:25:57,840
do a cast for this data type

646
00:25:55,360 --> 00:25:58,879
and the developers instead of doing

647
00:25:57,840 --> 00:26:02,720
classic cast

648
00:25:58,880 --> 00:26:05,679
column colon data type

649
00:26:02,720 --> 00:26:06,480
decide to write a plp gsql function for

650
00:26:05,679 --> 00:26:10,320
each type

651
00:26:06,480 --> 00:26:11,840
they wanted to cast

652
00:26:10,320 --> 00:26:14,720
you are reaching the point you are

653
00:26:11,840 --> 00:26:18,158
seeing what what's the problem

654
00:26:14,720 --> 00:26:20,080
so we add this function

655
00:26:18,159 --> 00:26:21,600
yeah this is a pseudo function it's not

656
00:26:20,080 --> 00:26:24,240
exactly the same i don't remember

657
00:26:21,600 --> 00:26:25,360
how it was so i rewritten trying to

658
00:26:24,240 --> 00:26:28,480
follow the same

659
00:26:25,360 --> 00:26:32,240
the same idea so they written cast

660
00:26:28,480 --> 00:26:35,279
integer cast to text why

661
00:26:32,240 --> 00:26:39,600
cast to float cast to

662
00:26:35,279 --> 00:26:42,640
some timestamp they passed the key name

663
00:26:39,600 --> 00:26:45,039
and the metadata store the metastore

664
00:26:42,640 --> 00:26:47,200
as a parameter so they used this

665
00:26:45,039 --> 00:26:49,520
information to retrieve the information

666
00:26:47,200 --> 00:26:51,760
and doing a cast straight into the

667
00:26:49,520 --> 00:26:55,039
return

668
00:26:51,760 --> 00:26:59,440
was an amazing idea right

669
00:26:55,039 --> 00:27:03,840
well and we had this sort of select

670
00:26:59,440 --> 00:27:07,039
uh count another 80

671
00:27:03,840 --> 00:27:07,760
sec 80 call metacolumns written in this

672
00:27:07,039 --> 00:27:12,000
way

673
00:27:07,760 --> 00:27:13,919
so every time oh but it was also worse

674
00:27:12,000 --> 00:27:16,880
this this is the optimized

675
00:27:13,919 --> 00:27:18,960
version they made this thing at lower

676
00:27:16,880 --> 00:27:22,399
level of the sub select when the sub

677
00:27:18,960 --> 00:27:22,799
select processed hundreds and hundreds

678
00:27:22,399 --> 00:27:25,120
of

679
00:27:22,799 --> 00:27:27,279
rows before doing the final filter for

680
00:27:25,120 --> 00:27:30,559
the 160 rows

681
00:27:27,279 --> 00:27:32,480
so all time every time you have

682
00:27:30,559 --> 00:27:33,600
something like that inside your select

683
00:27:32,480 --> 00:27:37,520
list

684
00:27:33,600 --> 00:27:38,320
the h store dot so the shared object get

685
00:27:37,520 --> 00:27:40,320
accessed

686
00:27:38,320 --> 00:27:43,279
and the transformation from the edge

687
00:27:40,320 --> 00:27:46,559
store stored on disk which is basically

688
00:27:43,279 --> 00:27:49,200
text separated by pipes with a needle

689
00:27:46,559 --> 00:27:50,158
get transformed in memory transformed in

690
00:27:49,200 --> 00:27:53,279
datum

691
00:27:50,159 --> 00:27:55,360
the library does the magic there's a lot

692
00:27:53,279 --> 00:27:56,399
of context changes between the memory

693
00:27:55,360 --> 00:27:59,678
the main memory

694
00:27:56,399 --> 00:28:02,399
and the memory used for the uh

695
00:27:59,679 --> 00:28:04,000
the shared object then this thing gets

696
00:28:02,399 --> 00:28:06,320
passed through posgress

697
00:28:04,000 --> 00:28:07,520
postgres does the final cast because he

698
00:28:06,320 --> 00:28:10,960
has to cast into the

699
00:28:07,520 --> 00:28:13,279
the primitive type and finally the

700
00:28:10,960 --> 00:28:15,360
shared object gets discarded and this is

701
00:28:13,279 --> 00:28:17,600
just for this one then he start again

702
00:28:15,360 --> 00:28:18,719
and again and again count for every

703
00:28:17,600 --> 00:28:21,279
single row

704
00:28:18,720 --> 00:28:24,720
it was even faster six minutes it was

705
00:28:21,279 --> 00:28:28,960
incredibly faster in my opinion

706
00:28:24,720 --> 00:28:28,960
so how this was fixed

707
00:28:29,679 --> 00:28:37,279
yes oh no our method is okay

708
00:28:34,159 --> 00:28:39,600
you are wrong you don't understand all

709
00:28:37,279 --> 00:28:41,600
the implications we are using all the

710
00:28:39,600 --> 00:28:44,320
structures we are using

711
00:28:41,600 --> 00:28:46,080
man i want to do a simple cast well

712
00:28:44,320 --> 00:28:48,240
there was another function i don't

713
00:28:46,080 --> 00:28:52,000
mention in that at this point

714
00:28:48,240 --> 00:28:55,360
which made a slightly different thing

715
00:28:52,000 --> 00:28:56,000
converted to text and then performed an

716
00:28:55,360 --> 00:28:58,158
internal

717
00:28:56,000 --> 00:29:00,000
aggregation in a different way array

718
00:28:58,159 --> 00:29:02,720
aggregation works

719
00:29:00,000 --> 00:29:04,640
not skipping an analysis they kept the

720
00:29:02,720 --> 00:29:06,640
nulls inside the aggregated array

721
00:29:04,640 --> 00:29:08,399
they've written

722
00:29:06,640 --> 00:29:09,760
some sort of different aggregation

723
00:29:08,399 --> 00:29:12,399
function just for

724
00:29:09,760 --> 00:29:13,440
keeping in the nulls inside the area i

725
00:29:12,399 --> 00:29:15,840
don't know why

726
00:29:13,440 --> 00:29:16,559
why people want to keep nulls which are

727
00:29:15,840 --> 00:29:19,520
basically

728
00:29:16,559 --> 00:29:20,080
nothing but they they made in this way

729
00:29:19,520 --> 00:29:23,200
and

730
00:29:20,080 --> 00:29:26,320
that was the only function left in place

731
00:29:23,200 --> 00:29:28,960
because there was no

732
00:29:26,320 --> 00:29:30,879
way to to change in another way well at

733
00:29:28,960 --> 00:29:31,279
that time i didn't know too much about

734
00:29:30,880 --> 00:29:33,840
the

735
00:29:31,279 --> 00:29:34,720
custom aggregations custom aggregation

736
00:29:33,840 --> 00:29:36,639
is uh

737
00:29:34,720 --> 00:29:38,799
something amazing in postgres have a

738
00:29:36,640 --> 00:29:42,159
look there's a blog post about

739
00:29:38,799 --> 00:29:44,879
from josh berkus and on my blog how to

740
00:29:42,159 --> 00:29:46,720
build up a custom aggregate you can do

741
00:29:44,880 --> 00:29:49,039
fantastic thing with this thing so

742
00:29:46,720 --> 00:29:50,240
it started with the argument when the

743
00:29:49,039 --> 00:29:53,679
argument finished

744
00:29:50,240 --> 00:29:57,279
probably a couple of weeks we i

745
00:29:53,679 --> 00:30:00,320
finally i've been authorized to

746
00:29:57,279 --> 00:30:02,480
rewrite the join and get rid of

747
00:30:00,320 --> 00:30:04,158
all the select list and the query

748
00:30:02,480 --> 00:30:06,799
dropped to 10 seconds

749
00:30:04,159 --> 00:30:08,559
it will be faster probably if i will be

750
00:30:06,799 --> 00:30:11,840
able to remove

751
00:30:08,559 --> 00:30:15,440
also the the final uh the final

752
00:30:11,840 --> 00:30:17,279
piece of uh of code so leave along and

753
00:30:15,440 --> 00:30:20,559
prosper

754
00:30:17,279 --> 00:30:23,760
and what to do for

755
00:30:20,559 --> 00:30:26,320
rtfm this is a very complex uh

756
00:30:23,760 --> 00:30:29,039
this is a complicated answer because

757
00:30:26,320 --> 00:30:31,120
working with postgres is not simple

758
00:30:29,039 --> 00:30:33,120
it seems simple but posgers is an

759
00:30:31,120 --> 00:30:35,439
incredibly complex

760
00:30:33,120 --> 00:30:36,479
environment an incredibly complex

761
00:30:35,440 --> 00:30:38,799
product

762
00:30:36,480 --> 00:30:39,679
the first thing to do is read the docs

763
00:30:38,799 --> 00:30:42,799
so

764
00:30:39,679 --> 00:30:47,200
get into the concept of what is

765
00:30:42,799 --> 00:30:49,679
a plpg sql function maybe if they

766
00:30:47,200 --> 00:30:50,559
would have used the sql function the

767
00:30:49,679 --> 00:30:52,880
damage

768
00:30:50,559 --> 00:30:54,799
wouldn't be too big because the sql

769
00:30:52,880 --> 00:30:55,840
functions are built in in postgres and

770
00:30:54,799 --> 00:30:59,279
they get in line

771
00:30:55,840 --> 00:31:01,840
so it would be much much better

772
00:30:59,279 --> 00:31:02,960
so use the p the procedural language

773
00:31:01,840 --> 00:31:06,399
only if you

774
00:31:02,960 --> 00:31:09,600
need the procedural language i also seen

775
00:31:06,399 --> 00:31:14,399
a procedural language used for

776
00:31:09,600 --> 00:31:16,158
transforming data in etl procedures

777
00:31:14,399 --> 00:31:19,279
this is the wrong way to do it because

778
00:31:16,159 --> 00:31:22,080
the performance is completely screwed

779
00:31:19,279 --> 00:31:22,640
the best way to do this sort of stuff is

780
00:31:22,080 --> 00:31:25,199
to

781
00:31:22,640 --> 00:31:25,919
do insert select so if you can stick on

782
00:31:25,200 --> 00:31:28,399
the

783
00:31:25,919 --> 00:31:30,240
pure sql as much as possible you will

784
00:31:28,399 --> 00:31:33,918
get the best performance

785
00:31:30,240 --> 00:31:38,399
and the less churn in memory caused by

786
00:31:33,919 --> 00:31:41,120
context changes if you have some idea

787
00:31:38,399 --> 00:31:42,959
before starting implementing it and

788
00:31:41,120 --> 00:31:45,518
maybe wasting your time

789
00:31:42,960 --> 00:31:46,000
ask the community we have a lot of

790
00:31:45,519 --> 00:31:48,559
channels

791
00:31:46,000 --> 00:31:49,279
for doing that uh of course mailing

792
00:31:48,559 --> 00:31:52,799
lists

793
00:31:49,279 --> 00:31:55,679
they are very very nice irc

794
00:31:52,799 --> 00:31:57,600
uh on the postgres channel on freenode

795
00:31:55,679 --> 00:32:01,039
there is a slack application

796
00:31:57,600 --> 00:32:02,080
and there is the telegram channel if you

797
00:32:01,039 --> 00:32:04,559
use telegram

798
00:32:02,080 --> 00:32:05,360
and in this room there are two admins me

799
00:32:04,559 --> 00:32:07,760
and janine

800
00:32:05,360 --> 00:32:08,399
on the bottom so we add the admin of the

801
00:32:07,760 --> 00:32:12,080
telegram

802
00:32:08,399 --> 00:32:14,158
chat so and the last thing

803
00:32:12,080 --> 00:32:15,918
if you can get it because it's quite

804
00:32:14,159 --> 00:32:19,039
it's still quite difficult to find

805
00:32:15,919 --> 00:32:23,440
a pure dba or postgres expert

806
00:32:19,039 --> 00:32:23,440
at dba level either dba

807
00:32:23,679 --> 00:32:30,320
and more important listen to the dba

808
00:32:26,799 --> 00:32:33,840
is uh do do not

809
00:32:30,320 --> 00:32:36,399
i remember there was um a t-shirt called

810
00:32:33,840 --> 00:32:37,519
with written i am a dba can we start

811
00:32:36,399 --> 00:32:39,840
assuming that i am

812
00:32:37,519 --> 00:32:41,120
always right and then we can continue

813
00:32:39,840 --> 00:32:44,399
discussing

814
00:32:41,120 --> 00:32:45,678
well is not that true because dba make a

815
00:32:44,399 --> 00:32:49,279
lot of errors

816
00:32:45,679 --> 00:32:53,120
a lot of mistakes i'm here for

817
00:32:49,279 --> 00:32:56,240
testing as a testimony about that so

818
00:32:53,120 --> 00:33:00,158
that is important if a dba comes in

819
00:32:56,240 --> 00:33:02,159
and asks for uh somewhat optimization

820
00:33:00,159 --> 00:33:03,440
is because not just because he's arguing

821
00:33:02,159 --> 00:33:05,840
for something

822
00:33:03,440 --> 00:33:06,640
uh abstract it's because there's a real

823
00:33:05,840 --> 00:33:09,600
problem

824
00:33:06,640 --> 00:33:10,320
even if the problem is not yet there dba

825
00:33:09,600 --> 00:33:14,799
usually

826
00:33:10,320 --> 00:33:18,080
look forward to the problems so

827
00:33:14,799 --> 00:33:22,240
i've been incredibly fast so

828
00:33:18,080 --> 00:33:24,320
let's go for the wrap up the

829
00:33:22,240 --> 00:33:25,519
well i can i can explain how to cook

830
00:33:24,320 --> 00:33:28,639
carbonara in

831
00:33:25,519 --> 00:33:33,679
the extra time if you want seriously i

832
00:33:28,640 --> 00:33:38,559
do you remember i presented uh in london

833
00:33:33,679 --> 00:33:41,519
no cream no cream

834
00:33:38,559 --> 00:33:42,720
so wrap up about this thing greetings

835
00:33:41,519 --> 00:33:44,880
but yeah the best

836
00:33:42,720 --> 00:33:47,600
the only wing in the move is not to play

837
00:33:44,880 --> 00:33:51,679
not really true

838
00:33:47,600 --> 00:33:54,879
rtfm reading the manual

839
00:33:51,679 --> 00:33:55,840
is important but it's also very

840
00:33:54,880 --> 00:34:00,159
important

841
00:33:55,840 --> 00:34:03,199
to read between the lines of the manual

842
00:34:00,159 --> 00:34:06,080
and in posgers in particular we have

843
00:34:03,200 --> 00:34:08,159
an amazing opportunity other databases

844
00:34:06,080 --> 00:34:11,440
closed sources databases or

845
00:34:08,159 --> 00:34:14,240
databases starting with all

846
00:34:11,440 --> 00:34:15,200
do not allow the users and the dba to

847
00:34:14,239 --> 00:34:17,359
access

848
00:34:15,199 --> 00:34:19,199
what's happening to know exactly what's

849
00:34:17,359 --> 00:34:20,000
happening inside the database they even

850
00:34:19,199 --> 00:34:22,879
wrap

851
00:34:20,000 --> 00:34:23,599
and obfuscate the procedures in postgres

852
00:34:22,879 --> 00:34:26,960
we have

853
00:34:23,599 --> 00:34:29,919
access to the source code uh

854
00:34:26,960 --> 00:34:30,399
i like to think about the postgresql as

855
00:34:29,918 --> 00:34:33,759
a

856
00:34:30,399 --> 00:34:35,759
super poetry written in c this is what

857
00:34:33,760 --> 00:34:39,119
i've written on my book

858
00:34:35,760 --> 00:34:41,839
because the uh is easy

859
00:34:39,119 --> 00:34:42,879
is it poetry you can read you you don't

860
00:34:41,839 --> 00:34:44,960
have to be

861
00:34:42,879 --> 00:34:46,399
a c developer for understanding what's

862
00:34:44,960 --> 00:34:49,599
going on in postgres

863
00:34:46,399 --> 00:34:52,399
first because the readme is

864
00:34:49,599 --> 00:34:54,720
they are amazing every single section

865
00:34:52,399 --> 00:34:55,040
they read me will explain a lot of stuff

866
00:34:54,719 --> 00:34:57,279
so

867
00:34:55,040 --> 00:34:58,079
if you are in doubt check inside the

868
00:34:57,280 --> 00:34:59,920
source code

869
00:34:58,079 --> 00:35:01,599
and if you are see developer you will be

870
00:34:59,920 --> 00:35:04,240
massively advantaged

871
00:35:01,599 --> 00:35:04,960
about the what's going on inside your

872
00:35:04,240 --> 00:35:08,078
database

873
00:35:04,960 --> 00:35:11,280
and maybe you will build up

874
00:35:08,079 --> 00:35:15,119
something more and more efficient so

875
00:35:11,280 --> 00:35:18,160
basically doing rtfm but

876
00:35:15,119 --> 00:35:21,680
with steroids maybe i think

877
00:35:18,160 --> 00:35:22,480
we are finished and yeah this is the

878
00:35:21,680 --> 00:35:25,598
license

879
00:35:22,480 --> 00:35:26,720
and that's all folks i've been 16

880
00:35:25,599 --> 00:35:29,760
minutes

881
00:35:26,720 --> 00:35:32,160
earlier sorry been very very fast and

882
00:35:29,760 --> 00:35:36,000
there are any questions

883
00:35:32,160 --> 00:35:36,000
yeah for the people who ask questions

884
00:35:36,230 --> 00:35:43,119
[Laughter]

885
00:35:39,440 --> 00:35:45,040
okay your third story

886
00:35:43,119 --> 00:35:46,800
if i was right so when you wrapped your

887
00:35:45,040 --> 00:35:49,040
query in uh

888
00:35:46,800 --> 00:35:50,400
then you turned it into a sub query it

889
00:35:49,040 --> 00:35:53,920
become faster why

890
00:35:50,400 --> 00:35:58,560
no it becomes uh no the uh sorry i

891
00:35:53,920 --> 00:36:01,440
i didn't explain clearly basically the

892
00:35:58,560 --> 00:36:03,040
cast functions the pl function were

893
00:36:01,440 --> 00:36:06,079
inside the sub query

894
00:36:03,040 --> 00:36:08,079
so the query was even slower because the

895
00:36:06,079 --> 00:36:10,800
sub query

896
00:36:08,079 --> 00:36:11,119
process more rows than the upper query

897
00:36:10,800 --> 00:36:13,280
if

898
00:36:11,119 --> 00:36:15,599
inside your subquery you have a filter

899
00:36:13,280 --> 00:36:17,200
this sub-query first filters these rows

900
00:36:15,599 --> 00:36:20,400
and then returns these rows

901
00:36:17,200 --> 00:36:21,040
but when you process this rows at where

902
00:36:20,400 --> 00:36:24,400
condition

903
00:36:21,040 --> 00:36:27,119
also they get passed through the

904
00:36:24,400 --> 00:36:28,079
select list and then discarded meanwhile

905
00:36:27,119 --> 00:36:31,359
they got

906
00:36:28,079 --> 00:36:32,560
filtered so moving all the expensive

907
00:36:31,359 --> 00:36:35,920
computation part

908
00:36:32,560 --> 00:36:36,400
outside at the maximum level according

909
00:36:35,920 --> 00:36:39,680
with the

910
00:36:36,400 --> 00:36:42,240
eventual aggregations or anything

911
00:36:39,680 --> 00:36:43,598
it can improve massively your query i

912
00:36:42,240 --> 00:36:47,439
remember they were

913
00:36:43,599 --> 00:36:50,560
a a query we a

914
00:36:47,440 --> 00:36:51,520
format function a two chart function at

915
00:36:50,560 --> 00:36:54,000
lower level

916
00:36:51,520 --> 00:36:54,800
just moving this two chart to the upper

917
00:36:54,000 --> 00:36:58,160
level

918
00:36:54,800 --> 00:37:01,520
he changed completely drop it from

919
00:36:58,160 --> 00:37:01,520
seconds to milliseconds

920
00:37:06,960 --> 00:37:10,000
the very first example what did you do

921
00:37:09,440 --> 00:37:13,119
to fix

922
00:37:10,000 --> 00:37:15,280
it uh the first example oh

923
00:37:13,119 --> 00:37:16,320
sorry repeat the question okay okay can

924
00:37:15,280 --> 00:37:18,960
you repeat the question

925
00:37:16,320 --> 00:37:19,599
uh what was the fix of mine in the first

926
00:37:18,960 --> 00:37:22,320
example

927
00:37:19,599 --> 00:37:23,839
oh okay the the first example the uh the

928
00:37:22,320 --> 00:37:27,119
butler the butler the

929
00:37:23,839 --> 00:37:30,240
uh the exhausting of the rice right okay

930
00:37:27,119 --> 00:37:32,880
so um what i did uh i

931
00:37:30,240 --> 00:37:33,359
changed the the logic inside this table

932
00:37:32,880 --> 00:37:36,320
so

933
00:37:33,359 --> 00:37:37,279
the original table at two time stem

934
00:37:36,320 --> 00:37:40,160
fields

935
00:37:37,280 --> 00:37:41,119
so the processor updated the first time

936
00:37:40,160 --> 00:37:43,598
stamp and set

937
00:37:41,119 --> 00:37:44,480
starting the the processing and then

938
00:37:43,599 --> 00:37:46,720
when he finished

939
00:37:44,480 --> 00:37:47,760
updated the second timestamp to say okay

940
00:37:46,720 --> 00:37:50,799
i'm finished

941
00:37:47,760 --> 00:37:52,640
and then this was used in a select order

942
00:37:50,800 --> 00:37:56,000
by by timestamp to get

943
00:37:52,640 --> 00:37:58,400
the road no yet processed so

944
00:37:56,000 --> 00:38:00,640
this was causing a lot of writes what i

945
00:37:58,400 --> 00:38:02,000
did i used the primary key which was a

946
00:38:00,640 --> 00:38:04,720
composite key by

947
00:38:02,000 --> 00:38:05,680
two values to aggregate this information

948
00:38:04,720 --> 00:38:09,118
inside

949
00:38:05,680 --> 00:38:11,440
a one common value and an

950
00:38:09,119 --> 00:38:12,880
integral array are you familiar with the

951
00:38:11,440 --> 00:38:16,720
arrays in posgas

952
00:38:12,880 --> 00:38:18,800
so the integer array is positional so

953
00:38:16,720 --> 00:38:20,959
pointing the single element i could

954
00:38:18,800 --> 00:38:21,359
access the exact value of the primary

955
00:38:20,960 --> 00:38:23,520
key

956
00:38:21,359 --> 00:38:25,119
and using this primary key without

957
00:38:23,520 --> 00:38:28,400
updating anything

958
00:38:25,119 --> 00:38:28,880
i will just uh look on the on the row

959
00:38:28,400 --> 00:38:31,599
and say

960
00:38:28,880 --> 00:38:33,280
okay this is the row i want to update

961
00:38:31,599 --> 00:38:35,680
and then another table

962
00:38:33,280 --> 00:38:37,119
uh changing this counter moved my

963
00:38:35,680 --> 00:38:39,040
pointer inside this

964
00:38:37,119 --> 00:38:40,400
this array without touching anything and

965
00:38:39,040 --> 00:38:43,920
then i had the periodic

966
00:38:40,400 --> 00:38:45,920
uh reaggregator which run every day for

967
00:38:43,920 --> 00:38:47,359
collecting new rows inside this big

968
00:38:45,920 --> 00:38:51,599
queue

969
00:38:47,359 --> 00:38:54,078
so one of the way to improve the

970
00:38:51,599 --> 00:38:55,280
performance in postgres when you deal

971
00:38:54,079 --> 00:38:58,960
with queues

972
00:38:55,280 --> 00:39:00,320
keep all the updated fields in one table

973
00:38:58,960 --> 00:39:02,640
in one separate table

974
00:39:00,320 --> 00:39:04,000
because in postgres uh you generate new

975
00:39:02,640 --> 00:39:06,160
rows every time you

976
00:39:04,000 --> 00:39:09,200
you you perform an update if you if you

977
00:39:06,160 --> 00:39:11,279
have a row 160 bytes

978
00:39:09,200 --> 00:39:14,240
and you update the boolean you generate

979
00:39:11,280 --> 00:39:16,720
160 bytes not just the boolean so

980
00:39:14,240 --> 00:39:17,598
this is very important to understand for

981
00:39:16,720 --> 00:39:20,319
avoiding

982
00:39:17,599 --> 00:39:20,960
this sort of stuff but more important

983
00:39:20,320 --> 00:39:24,640
avoiding

984
00:39:20,960 --> 00:39:29,839
blood on table and blood on indices

985
00:39:24,640 --> 00:39:29,839
any other questions

986
00:39:31,520 --> 00:39:35,119
well that was interesting because oh

987
00:39:34,560 --> 00:39:38,078
sorry

988
00:39:35,119 --> 00:39:39,520
uh okay so yes i forgot about the

989
00:39:38,079 --> 00:39:42,800
there's no

990
00:39:39,520 --> 00:39:47,119
okay so why out of vacuum didn't work

991
00:39:42,800 --> 00:39:51,520
in my second example

992
00:39:47,119 --> 00:39:54,480
that was a problem caused by the number

993
00:39:51,520 --> 00:39:57,119
or out of account workers so there were

994
00:39:54,480 --> 00:39:59,520
too many tables that needed to be

995
00:39:57,119 --> 00:40:00,560
vacuumed and there were too few out of

996
00:39:59,520 --> 00:40:02,880
arkham workers so

997
00:40:00,560 --> 00:40:05,200
out of vacuum spend a lot of times on

998
00:40:02,880 --> 00:40:11,839
the same tables without picking the

999
00:40:05,200 --> 00:40:11,839
the tables that with the data are doing

1000
00:40:14,800 --> 00:40:19,280
did you get to the bottom of like why

1001
00:40:16,240 --> 00:40:22,799
the exceptions were adding so many

1002
00:40:19,280 --> 00:40:25,839
things okay the ydx id

1003
00:40:22,800 --> 00:40:26,240
why the exception adds uh the x id to

1004
00:40:25,839 --> 00:40:29,680
the

1005
00:40:26,240 --> 00:40:32,640
uh to the comp of the the function

1006
00:40:29,680 --> 00:40:33,839
uh well uh i can suppose i spoke with a

1007
00:40:32,640 --> 00:40:36,960
friend of mine which

1008
00:40:33,839 --> 00:40:39,520
is uh sql developers c developer

1009
00:40:36,960 --> 00:40:41,200
is also i think i also contributed to

1010
00:40:39,520 --> 00:40:44,800
some part of postgres

1011
00:40:41,200 --> 00:40:47,759
so and

1012
00:40:44,800 --> 00:40:49,520
it may be because they think because it

1013
00:40:47,760 --> 00:40:52,560
needs to be

1014
00:40:49,520 --> 00:40:55,280
rolled back inside the transaction

1015
00:40:52,560 --> 00:40:56,319
needs an extra transaction for managing

1016
00:40:55,280 --> 00:40:59,359
the rollback

1017
00:40:56,319 --> 00:41:02,480
at uh data area level so inside the

1018
00:40:59,359 --> 00:41:03,040
pgx act where the the commit status is

1019
00:41:02,480 --> 00:41:06,240
so

1020
00:41:03,040 --> 00:41:06,960
you basically get one x id then all the

1021
00:41:06,240 --> 00:41:10,160
xid

1022
00:41:06,960 --> 00:41:13,040
that they get uh committed in a virtual

1023
00:41:10,160 --> 00:41:14,960
way meanwhile the function uh progress

1024
00:41:13,040 --> 00:41:16,800
and then when the function commits

1025
00:41:14,960 --> 00:41:18,079
everything gets committed and everything

1026
00:41:16,800 --> 00:41:21,440
becomes visible so

1027
00:41:18,079 --> 00:41:24,560
this can be a structural uh

1028
00:41:21,440 --> 00:41:26,160
reason so is is a choice made for b for

1029
00:41:24,560 --> 00:41:28,640
having possible the

1030
00:41:26,160 --> 00:41:29,759
roll back the the exception to cancel

1031
00:41:28,640 --> 00:41:35,839
and roll back the

1032
00:41:29,760 --> 00:41:35,839
the pieces executed

1033
00:41:44,319 --> 00:41:47,359
yeah the stories were all related to

1034
00:41:46,240 --> 00:41:50,000
postgres9 so

1035
00:41:47,359 --> 00:41:51,598
back in the past this is a flash from

1036
00:41:50,000 --> 00:41:55,200
the past about this thing

1037
00:41:51,599 --> 00:41:55,680
uh and in posgus 12 probably you will

1038
00:41:55,200 --> 00:41:59,040
get the

1039
00:41:55,680 --> 00:42:00,879
same results because the uh

1040
00:41:59,040 --> 00:42:02,400
it didn't change too much we still have

1041
00:42:00,880 --> 00:42:05,200
the mvcc

1042
00:42:02,400 --> 00:42:07,520
we still have auto vacuum which works in

1043
00:42:05,200 --> 00:42:10,399
the same way like in the version nine

1044
00:42:07,520 --> 00:42:11,440
and also the plpg sql function works in

1045
00:42:10,400 --> 00:42:15,760
the same way

1046
00:42:11,440 --> 00:42:16,960
like the uh like it was in the nine i

1047
00:42:15,760 --> 00:42:20,560
think in 9.6

1048
00:42:16,960 --> 00:42:21,920
starting the 9.6 we are faster for uh

1049
00:42:20,560 --> 00:42:24,319
running out of vehicles when

1050
00:42:21,920 --> 00:42:27,359
automatically starts because of the um

1051
00:42:24,319 --> 00:42:29,680
excited apparatus oh so is so out of

1052
00:42:27,359 --> 00:42:31,119
vacuum is prioritized over the exciting

1053
00:42:29,680 --> 00:42:34,560
wrap around so probably

1054
00:42:31,119 --> 00:42:36,560
the okay just the uh the

1055
00:42:34,560 --> 00:42:38,240
the rose so it will be much more effect

1056
00:42:36,560 --> 00:42:40,480
so probably the second

1057
00:42:38,240 --> 00:42:41,680
story wouldn't happen with the with the

1058
00:42:40,480 --> 00:42:46,400
newer version

1059
00:42:41,680 --> 00:42:46,399
okay cool thanks for the information

1060
00:42:52,319 --> 00:42:59,279
uh i think so i think the

1061
00:42:55,680 --> 00:43:00,399
audience is asking if the save point

1062
00:42:59,280 --> 00:43:03,920
inside the transaction

1063
00:43:00,400 --> 00:43:07,760
will consume next id

1064
00:43:03,920 --> 00:43:11,359
i want to try but i think he may

1065
00:43:07,760 --> 00:43:13,359
because the in any case is is managed at

1066
00:43:11,359 --> 00:43:16,400
xid level

1067
00:43:13,359 --> 00:43:17,920
so yeah but i will try i will try thank

1068
00:43:16,400 --> 00:43:21,440
you

1069
00:43:17,920 --> 00:43:22,240
i have a question okay um you mentioned

1070
00:43:21,440 --> 00:43:24,000
ways of uh

1071
00:43:22,240 --> 00:43:25,439
getting help from the community like the

1072
00:43:24,000 --> 00:43:28,240
mainly telegram

1073
00:43:25,440 --> 00:43:29,280
chats and everything but when you figure

1074
00:43:28,240 --> 00:43:30,799
out that there is something that is

1075
00:43:29,280 --> 00:43:31,839
missing from the documentation how do

1076
00:43:30,800 --> 00:43:34,400
you contribute

1077
00:43:31,839 --> 00:43:35,279
to help the documentation to be better

1078
00:43:34,400 --> 00:43:38,240
good well

1079
00:43:35,280 --> 00:43:41,119
this is a very good question so uh if

1080
00:43:38,240 --> 00:43:43,200
you find that there is a missing

1081
00:43:41,119 --> 00:43:44,400
part of the in the documentation how do

1082
00:43:43,200 --> 00:43:47,439
you contribute

1083
00:43:44,400 --> 00:43:49,440
well uh i will start with

1084
00:43:47,440 --> 00:43:51,440
following the listening to the talk of

1085
00:43:49,440 --> 00:43:54,079
leticia

1086
00:43:51,440 --> 00:43:57,359
demystifying contributing postgresql

1087
00:43:54,079 --> 00:44:00,000
which is a very interesting talk so

1088
00:43:57,359 --> 00:44:02,480
foster should be still online to uh so

1089
00:44:00,000 --> 00:44:03,440
it is an amazing talk for uh that can

1090
00:44:02,480 --> 00:44:05,760
drive to

1091
00:44:03,440 --> 00:44:06,560
uh contribute to the postgres community

1092
00:44:05,760 --> 00:44:09,119
and how to

1093
00:44:06,560 --> 00:44:11,440
write the documentation so i will just

1094
00:44:09,119 --> 00:44:14,960
and this is probably what i will do

1095
00:44:11,440 --> 00:44:17,119
uh submit the patch for adding this

1096
00:44:14,960 --> 00:44:20,880
information to the alert box

1097
00:44:17,119 --> 00:44:29,520
on the postgres documentation so

1098
00:44:20,880 --> 00:44:32,720
filling up the the missing parts

1099
00:44:29,520 --> 00:44:35,839
when you made the second table

1100
00:44:32,720 --> 00:44:36,879
with the array is that a good way of

1101
00:44:35,839 --> 00:44:40,480
handling

1102
00:44:36,880 --> 00:44:43,839
queues in general in sql

1103
00:44:40,480 --> 00:44:47,839
or was that just working around

1104
00:44:43,839 --> 00:44:50,078
okay uh okay the the question is if

1105
00:44:47,839 --> 00:44:52,720
using the arrays for handling the queues

1106
00:44:50,079 --> 00:44:55,440
is the best way to manage

1107
00:44:52,720 --> 00:44:56,240
cues in postgres and the answer is yes

1108
00:44:55,440 --> 00:44:58,800
definitely

1109
00:44:56,240 --> 00:45:02,078
because the arrays in particular if you

1110
00:44:58,800 --> 00:45:05,520
do not update the array

1111
00:45:02,079 --> 00:45:06,079
ordering you will have a complete static

1112
00:45:05,520 --> 00:45:08,319
table

1113
00:45:06,079 --> 00:45:09,359
and you can just use a pointer an

1114
00:45:08,319 --> 00:45:11,359
integer for

1115
00:45:09,359 --> 00:45:12,480
pointing the element inside the array so

1116
00:45:11,359 --> 00:45:15,200
you will limit

1117
00:45:12,480 --> 00:45:16,079
the updates just to that tiny little

1118
00:45:15,200 --> 00:45:19,839
integral

1119
00:45:16,079 --> 00:45:19,839
so yes

1120
00:45:20,160 --> 00:45:24,240
as a back end developer i often use a

1121
00:45:22,880 --> 00:45:26,480
pause way to

1122
00:45:24,240 --> 00:45:27,439
like just do queries and when i don't

1123
00:45:26,480 --> 00:45:30,400
know what to do i

1124
00:45:27,440 --> 00:45:31,520
go see the manual but there's never some

1125
00:45:30,400 --> 00:45:34,079
place where i can

1126
00:45:31,520 --> 00:45:34,560
actually understand how power really

1127
00:45:34,079 --> 00:45:37,599
works

1128
00:45:34,560 --> 00:45:38,560
internally where can i find this uh this

1129
00:45:37,599 --> 00:45:42,079
information

1130
00:45:38,560 --> 00:45:42,078
can i do product placement

1131
00:45:42,480 --> 00:45:45,680
well uh there are there are a lot oh

1132
00:45:44,640 --> 00:45:49,598
sorry

1133
00:45:45,680 --> 00:45:52,960
okay the question is um where to find

1134
00:45:49,599 --> 00:45:57,520
uh how posgress works internally

1135
00:45:52,960 --> 00:46:00,240
so uh i will start from the

1136
00:45:57,520 --> 00:46:01,119
manual from the open source code from

1137
00:46:00,240 --> 00:46:03,279
the source code

1138
00:46:01,119 --> 00:46:06,880
is it this is where i learned how

1139
00:46:03,280 --> 00:46:09,920
postgres works internally

1140
00:46:06,880 --> 00:46:13,040
i've written a book about this thing

1141
00:46:09,920 --> 00:46:15,040
it will come out next week but the

1142
00:46:13,040 --> 00:46:17,119
there are a lot of informations about

1143
00:46:15,040 --> 00:46:20,240
this thing so i will start

1144
00:46:17,119 --> 00:46:20,960
from the readme inside i don't remember

1145
00:46:20,240 --> 00:46:23,919
is the

1146
00:46:20,960 --> 00:46:24,319
tuple storage tuple or something like

1147
00:46:23,920 --> 00:46:27,520
that

1148
00:46:24,319 --> 00:46:29,759
or eat page dot h there is the uh

1149
00:46:27,520 --> 00:46:31,359
read me with all the discussion and how

1150
00:46:29,760 --> 00:46:33,359
the entire thing works

1151
00:46:31,359 --> 00:46:34,960
but these uh i will start from that

1152
00:46:33,359 --> 00:46:37,839
thing read from the source

1153
00:46:34,960 --> 00:46:38,960
and you will never get wrong do you know

1154
00:46:37,839 --> 00:46:41,759
explain analyze

1155
00:46:38,960 --> 00:46:43,839
for looking at queries so when you run

1156
00:46:41,760 --> 00:46:45,680
explain analyze and then your query

1157
00:46:43,839 --> 00:46:46,960
is going to tell you whether it's using

1158
00:46:45,680 --> 00:46:50,799
oh you're mentioning

1159
00:46:46,960 --> 00:46:52,319
uh you asked and then you will see okay

1160
00:46:50,800 --> 00:46:54,560
you're using this index or is doing a

1161
00:46:52,319 --> 00:46:58,800
sequential scan oh you you mean

1162
00:46:54,560 --> 00:47:01,359
are you sorry okay i i misunderstood

1163
00:46:58,800 --> 00:47:04,480
your question

1164
00:47:01,359 --> 00:47:06,880
ah you want to know the internal oh

1165
00:47:04,480 --> 00:47:08,240
yeah okay sounds good sounds good no you

1166
00:47:06,880 --> 00:47:10,560
can you can't get wrong

1167
00:47:08,240 --> 00:47:13,040
but if you want to know what your query

1168
00:47:10,560 --> 00:47:14,640
is doing use explain or explain analyze

1169
00:47:13,040 --> 00:47:17,440
to display the execution plan

1170
00:47:14,640 --> 00:47:18,319
and see uh you will see what the query

1171
00:47:17,440 --> 00:47:19,440
is doing

1172
00:47:18,319 --> 00:47:22,400
and from that point you continue with

1173
00:47:19,440 --> 00:47:25,200
the source code yeah

1174
00:47:22,400 --> 00:47:38,079
okay so cool thank you very much thank

1175
00:47:25,200 --> 00:47:38,078
you very much

