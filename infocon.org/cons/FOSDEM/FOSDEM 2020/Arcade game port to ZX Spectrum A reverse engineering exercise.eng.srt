1
00:00:06,240 --> 00:00:10,480
okay

2
00:00:07,200 --> 00:00:11,599
um so good afternoon or good evening

3
00:00:10,480 --> 00:00:14,559
it's night already

4
00:00:11,599 --> 00:00:16,240
uh so we are and my name is martinez i'm

5
00:00:14,559 --> 00:00:18,320
going to present this

6
00:00:16,239 --> 00:00:19,279
part of arcade game for the next

7
00:00:18,320 --> 00:00:22,400
spectrum

8
00:00:19,279 --> 00:00:23,119
but this is applicable to any part that

9
00:00:22,400 --> 00:00:25,598
you want to do

10
00:00:23,119 --> 00:00:27,039
to a micro machine and that you can

11
00:00:25,599 --> 00:00:30,720
eventually

12
00:00:27,039 --> 00:00:34,800
implement for other systems okay

13
00:00:30,720 --> 00:00:37,680
uh first question who played on a zx

14
00:00:34,800 --> 00:00:43,519
spectrum raise your hands

15
00:00:37,680 --> 00:00:48,000
okay who coded in zx basic

16
00:00:43,520 --> 00:00:48,000
okay who caught it in assembly

17
00:00:48,399 --> 00:00:53,920
okay fine it's gonna be painful for some

18
00:00:50,879 --> 00:00:57,839
of you that didn't raise your hands

19
00:00:53,920 --> 00:01:00,079
okay um and by the way who did program a

20
00:00:57,840 --> 00:01:00,079
game

21
00:01:00,160 --> 00:01:07,439
okay cool so we are going to these

22
00:01:03,760 --> 00:01:11,200
um topics i will go one by one

23
00:01:07,439 --> 00:01:14,320
there are several um slides for each

24
00:01:11,200 --> 00:01:18,000
and we'll go through all them

25
00:01:14,320 --> 00:01:20,960
okay so how do you choose a port

26
00:01:18,000 --> 00:01:21,759
okay the first thing you need to decide

27
00:01:20,960 --> 00:01:24,720
is what's your

28
00:01:21,759 --> 00:01:26,560
target platform in this case i chose a

29
00:01:24,720 --> 00:01:28,240
zx spectrum 48k

30
00:01:26,560 --> 00:01:30,640
it could be anything else but this is

31
00:01:28,240 --> 00:01:33,679
one i chose

32
00:01:30,640 --> 00:01:34,159
then you need to select a game whatever

33
00:01:33,680 --> 00:01:36,720
game

34
00:01:34,159 --> 00:01:38,400
fences you okay probably something you

35
00:01:36,720 --> 00:01:40,400
like to play

36
00:01:38,400 --> 00:01:42,640
and then you need to select an origin

37
00:01:40,400 --> 00:01:45,680
because that particular game

38
00:01:42,640 --> 00:01:47,840
can can have been implemented in several

39
00:01:45,680 --> 00:01:49,840
other platforms right

40
00:01:47,840 --> 00:01:51,200
for some of you this might feel the

41
00:01:49,840 --> 00:01:52,960
other way around so

42
00:01:51,200 --> 00:01:55,280
it should be like three two one and not

43
00:01:52,960 --> 00:01:57,679
one two three that's the logic

44
00:01:55,280 --> 00:01:58,719
of someone that is going to do a port

45
00:01:57,680 --> 00:02:00,960
for profit

46
00:01:58,719 --> 00:02:01,759
for something that already exists for a

47
00:02:00,960 --> 00:02:05,119
hobbyist

48
00:02:01,759 --> 00:02:06,960
that's the the actual uh idea because

49
00:02:05,119 --> 00:02:08,160
your hobby is about a specific

50
00:02:06,960 --> 00:02:11,599
microcomputer

51
00:02:08,160 --> 00:02:14,959
so the order is usually one two three

52
00:02:11,599 --> 00:02:16,238
okay and after you selected this you

53
00:02:14,959 --> 00:02:18,480
have to be sure

54
00:02:16,239 --> 00:02:20,840
if it's possible to be done or you can

55
00:02:18,480 --> 00:02:23,840
try and you can fail

56
00:02:20,840 --> 00:02:26,720
okay so regarding

57
00:02:23,840 --> 00:02:27,840
the target platform you need you really

58
00:02:26,720 --> 00:02:30,560
need to know

59
00:02:27,840 --> 00:02:31,760
your platform this is not just about

60
00:02:30,560 --> 00:02:33,920
software

61
00:02:31,760 --> 00:02:35,840
you need to know the architecture of the

62
00:02:33,920 --> 00:02:39,510
of the system of the machine

63
00:02:35,840 --> 00:02:41,680
because that plays a really important

64
00:02:39,510 --> 00:02:44,480
[Music]

65
00:02:41,680 --> 00:02:45,840
step in the in the conversion so

66
00:02:44,480 --> 00:02:48,000
basically

67
00:02:45,840 --> 00:02:49,280
you you can throw everything away that

68
00:02:48,000 --> 00:02:51,760
you already know

69
00:02:49,280 --> 00:02:52,720
about developing a game like for example

70
00:02:51,760 --> 00:02:54,160
you might say

71
00:02:52,720 --> 00:02:55,920
okay i'm going to clear the screen or

72
00:02:54,160 --> 00:02:57,840
something like that and

73
00:02:55,920 --> 00:02:59,599
your computer probably doesn't allow you

74
00:02:57,840 --> 00:03:01,519
to do that you have to think differently

75
00:02:59,599 --> 00:03:02,879
from what you do on a pc currently

76
00:03:01,519 --> 00:03:05,920
so you have to determine all the

77
00:03:02,879 --> 00:03:08,560
hardware limits experimentally

78
00:03:05,920 --> 00:03:10,399
and what do you need to do you need to

79
00:03:08,560 --> 00:03:12,319
at least develop a game

80
00:03:10,400 --> 00:03:13,920
on the system so that you can get the

81
00:03:12,319 --> 00:03:16,640
feel of what

82
00:03:13,920 --> 00:03:18,000
it really hurts doing a game for that

83
00:03:16,640 --> 00:03:21,279
system then you know

84
00:03:18,000 --> 00:03:22,560
all the problems you get and by the way

85
00:03:21,280 --> 00:03:24,879
you should develop

86
00:03:22,560 --> 00:03:26,080
another game why because you learn

87
00:03:24,879 --> 00:03:27,920
valuable lessons

88
00:03:26,080 --> 00:03:29,680
with the first game so you should

89
00:03:27,920 --> 00:03:32,399
develop another game

90
00:03:29,680 --> 00:03:34,959
before you do actually try to do a

91
00:03:32,400 --> 00:03:34,959
conversion

92
00:03:35,280 --> 00:03:42,080
uh and what's really difficult

93
00:03:39,120 --> 00:03:44,400
is that you really know need to know

94
00:03:42,080 --> 00:03:47,360
your game what do i mean by this

95
00:03:44,400 --> 00:03:48,959
there are probably in even features in

96
00:03:47,360 --> 00:03:50,720
the game

97
00:03:48,959 --> 00:03:52,239
you need to play the game to actually

98
00:03:50,720 --> 00:03:54,319
find them

99
00:03:52,239 --> 00:03:55,280
you need to get the feel for it i mean

100
00:03:54,319 --> 00:03:58,319
the game

101
00:03:55,280 --> 00:04:00,720
okay because it's

102
00:03:58,319 --> 00:04:01,599
actually playing that you know our game

103
00:04:00,720 --> 00:04:03,920
feels so

104
00:04:01,599 --> 00:04:05,359
is it a fast game is it a slow game it's

105
00:04:03,920 --> 00:04:08,559
a puzzle game

106
00:04:05,360 --> 00:04:11,680
it's an action game whatever okay and

107
00:04:08,560 --> 00:04:14,400
very important is also you need to watch

108
00:04:11,680 --> 00:04:15,200
others play because you have your own

109
00:04:14,400 --> 00:04:17,918
vices

110
00:04:15,200 --> 00:04:19,039
while playing a game and sometimes you

111
00:04:17,918 --> 00:04:21,440
play with a friend

112
00:04:19,040 --> 00:04:23,120
or you see a friend playing and you see

113
00:04:21,440 --> 00:04:23,919
different things that you never saw in

114
00:04:23,120 --> 00:04:27,440
the game before

115
00:04:23,919 --> 00:04:29,440
okay so you should watch others play

116
00:04:27,440 --> 00:04:30,960
and you should play with others also

117
00:04:29,440 --> 00:04:34,000
okay why

118
00:04:30,960 --> 00:04:34,719
because they can for example let's think

119
00:04:34,000 --> 00:04:37,040
about a

120
00:04:34,720 --> 00:04:38,160
fighting game for example playing with a

121
00:04:37,040 --> 00:04:40,320
different opponent

122
00:04:38,160 --> 00:04:42,000
a human opponent will give you new

123
00:04:40,320 --> 00:04:44,639
insight so how to play

124
00:04:42,000 --> 00:04:46,000
okay or a puzzle game in battle mode for

125
00:04:44,639 --> 00:04:49,280
example

126
00:04:46,000 --> 00:04:52,479
so what is game essence

127
00:04:49,280 --> 00:04:54,479
what is important in a game how well do

128
00:04:52,479 --> 00:04:58,320
we know a game

129
00:04:54,479 --> 00:05:01,440
so i bet all of you know this game right

130
00:04:58,320 --> 00:05:03,599
name obviously right

131
00:05:01,440 --> 00:05:06,080
so do you actually know this game do you

132
00:05:03,600 --> 00:05:08,320
know the names of the ghosts

133
00:05:06,080 --> 00:05:10,000
do you know what each ghost actually

134
00:05:08,320 --> 00:05:12,639
does in terms of going after

135
00:05:10,000 --> 00:05:13,680
you or going a different pattern to

136
00:05:12,639 --> 00:05:15,280
follow you

137
00:05:13,680 --> 00:05:17,280
so you probably don't know everything

138
00:05:15,280 --> 00:05:19,758
about this game okay so you need to

139
00:05:17,280 --> 00:05:22,400
study a little bit more

140
00:05:19,759 --> 00:05:24,639
this is obviously tetris right it's

141
00:05:22,400 --> 00:05:25,599
written in there with the reverse star

142
00:05:24,639 --> 00:05:27,440
so

143
00:05:25,600 --> 00:05:29,120
is this a name that you can say you

144
00:05:27,440 --> 00:05:31,919
completely know

145
00:05:29,120 --> 00:05:34,240
is it completely random is that long bar

146
00:05:31,919 --> 00:05:36,560
always when you want it

147
00:05:34,240 --> 00:05:37,360
probably not right so as you can see

148
00:05:36,560 --> 00:05:39,039
here

149
00:05:37,360 --> 00:05:41,440
there is a different distribution of

150
00:05:39,039 --> 00:05:45,440
parts and is that by mistake

151
00:05:41,440 --> 00:05:47,919
is that by chance or is it a specific

152
00:05:45,440 --> 00:05:49,199
uh designed feature to make the game

153
00:05:47,919 --> 00:05:52,240
simpler or harder

154
00:05:49,199 --> 00:05:56,639
okay so you need to go for that

155
00:05:52,240 --> 00:05:58,319
anyone knows this game puzzle bomb yeah

156
00:05:56,639 --> 00:06:00,080
so or bust a move that's another

157
00:05:58,319 --> 00:06:02,080
commercial name so

158
00:06:00,080 --> 00:06:03,840
what do you know about this game it's a

159
00:06:02,080 --> 00:06:06,639
match 3 right

160
00:06:03,840 --> 00:06:09,280
it has some speed increase eventually

161
00:06:06,639 --> 00:06:10,800
but what are the patterns of the

162
00:06:09,280 --> 00:06:13,039
bubbles that you get do they have a

163
00:06:10,800 --> 00:06:14,800
specific pattern is it

164
00:06:13,039 --> 00:06:16,479
the same when you're playing two players

165
00:06:14,800 --> 00:06:17,520
what's different about it so you have to

166
00:06:16,479 --> 00:06:19,919
start

167
00:06:17,520 --> 00:06:21,599
to look at these games and find out

168
00:06:19,919 --> 00:06:24,880
what's different about them

169
00:06:21,600 --> 00:06:27,440
who knows this game hard time

170
00:06:24,880 --> 00:06:27,440
what's that

171
00:06:28,160 --> 00:06:32,400
it's the boss of the first level right

172
00:06:30,800 --> 00:06:34,639
there is a way to beat it

173
00:06:32,400 --> 00:06:36,159
and that way is slightly different

174
00:06:34,639 --> 00:06:36,960
depending on the implementation of the

175
00:06:36,160 --> 00:06:38,960
system

176
00:06:36,960 --> 00:06:41,440
where the r type was actually ported

177
00:06:38,960 --> 00:06:43,758
into because they didn't always use the

178
00:06:41,440 --> 00:06:47,600
same source code

179
00:06:43,759 --> 00:06:50,560
okay so

180
00:06:47,600 --> 00:06:51,680
the game that i proposed to port was

181
00:06:50,560 --> 00:06:55,199
magical drop two

182
00:06:51,680 --> 00:06:59,360
who knows the magical drop too no one

183
00:06:55,199 --> 00:07:02,080
okay great one point for me

184
00:06:59,360 --> 00:07:03,120
so i'm gonna show you three clips for

185
00:07:02,080 --> 00:07:06,159
magical drop

186
00:07:03,120 --> 00:07:08,720
it's a puzzle game like uh puzzle bubble

187
00:07:06,160 --> 00:07:10,639
but it's a match three game so you join

188
00:07:08,720 --> 00:07:14,080
three colors of the same stuff

189
00:07:10,639 --> 00:07:16,960
and you will see it uh pop okay

190
00:07:14,080 --> 00:07:18,880
now take to attention that the left side

191
00:07:16,960 --> 00:07:31,840
is a human player on the right side

192
00:07:18,880 --> 00:07:31,840
the cpu player okay so let's watch that

193
00:07:42,319 --> 00:07:46,319
have you noticed anything in particular

194
00:07:47,840 --> 00:07:51,198
yeah there is an attack pattern when you

195
00:07:49,840 --> 00:07:53,440
play fast enough

196
00:07:51,199 --> 00:07:54,400
and did you notice anything else let's

197
00:07:53,440 --> 00:07:57,280
see the second

198
00:07:54,400 --> 00:07:58,960
movie do you have a jack yes you can

199
00:07:57,280 --> 00:08:04,400
plug it in here on this side

200
00:07:58,960 --> 00:08:04,400
does it reach right here

201
00:08:05,680 --> 00:08:09,680
no here here you're fine

202
00:08:10,840 --> 00:08:17,840
here i guess

203
00:08:14,160 --> 00:08:17,840
i get 20 more seconds right

204
00:08:18,479 --> 00:08:23,120
okay let me see if i can continue okay

205
00:08:21,599 --> 00:08:25,039
so let's see the second video

206
00:08:23,120 --> 00:08:26,240
now try to pay attention what is

207
00:08:25,039 --> 00:08:27,919
happening

208
00:08:26,240 --> 00:08:31,520
into the sound now that we have better

209
00:08:27,919 --> 00:08:31,520
sound on the left player

210
00:08:31,759 --> 00:08:41,839
this one got it

211
00:08:43,760 --> 00:08:46,880
i think sound is not

212
00:08:47,200 --> 00:08:54,800
oh or you can just use your mac

213
00:08:50,880 --> 00:08:58,320
mic on the this on the speaker

214
00:08:54,800 --> 00:08:58,319
he's actually getting out

215
00:08:59,120 --> 00:09:02,720
did you notice or where you're looking

216
00:09:00,399 --> 00:09:02,720
at me

217
00:09:03,200 --> 00:09:07,890
do i need to repeat it no right yes

218
00:09:06,800 --> 00:09:10,880
you should pay attention

219
00:09:07,890 --> 00:09:15,600
[Laughter]

220
00:09:10,880 --> 00:09:15,600
okay so i think

221
00:09:17,200 --> 00:09:23,839
no i passed one too much okay

222
00:09:39,279 --> 00:09:42,080
what did you hear

223
00:09:43,200 --> 00:09:46,240
a guy actually bashing a lot of keys

224
00:09:45,680 --> 00:09:49,279
right

225
00:09:46,240 --> 00:09:50,880
trying to be really speedy right to beat

226
00:09:49,279 --> 00:09:54,000
the the other character that looks

227
00:09:50,880 --> 00:09:59,439
exactly the same right so

228
00:09:54,000 --> 00:09:59,440
last item take a look at the computer

229
00:10:02,839 --> 00:10:05,839
now

230
00:10:18,000 --> 00:10:22,640
that's not fair right he's getting a lot

231
00:10:20,560 --> 00:10:24,640
better patterns than me

232
00:10:22,640 --> 00:10:27,600
that's specific to that character so

233
00:10:24,640 --> 00:10:29,920
it's important for us to know our game

234
00:10:27,600 --> 00:10:33,839
so what's the essence of this game can

235
00:10:29,920 --> 00:10:33,839
anyone phrase it in one word

236
00:10:36,640 --> 00:10:44,839
speed okay but we are parting this

237
00:10:39,920 --> 00:10:46,959
to the next spectrum so we are kind of

238
00:10:44,839 --> 00:10:50,320
um

239
00:10:46,959 --> 00:10:50,640
maybe okay so what are we up against

240
00:10:50,320 --> 00:10:52,959
what

241
00:10:50,640 --> 00:10:54,720
is our challenge this is the neo geo the

242
00:10:52,959 --> 00:10:57,040
arcade version that i chose

243
00:10:54,720 --> 00:10:58,560
this has all these big chips in there

244
00:10:57,040 --> 00:11:01,199
right

245
00:10:58,560 --> 00:11:02,079
and besides that this is the mighty

246
00:11:01,200 --> 00:11:04,160
spectrum

247
00:11:02,079 --> 00:11:05,599
it doesn't look so mighty when compared

248
00:11:04,160 --> 00:11:07,839
to that one right

249
00:11:05,600 --> 00:11:08,800
and even worse that thing works with

250
00:11:07,839 --> 00:11:11,279
cartridges

251
00:11:08,800 --> 00:11:12,479
and each cartridges adds a few more

252
00:11:11,279 --> 00:11:18,079
chips

253
00:11:12,480 --> 00:11:20,640
so you're going on a huge battle right

254
00:11:18,079 --> 00:11:22,560
so what's the actual specs of the arcade

255
00:11:20,640 --> 00:11:25,040
versus the spectrum

256
00:11:22,560 --> 00:11:26,239
the first thing that pops to mind is

257
00:11:25,040 --> 00:11:29,120
that

258
00:11:26,240 --> 00:11:31,360
we are one cpu less and they they are

259
00:11:29,120 --> 00:11:33,279
actually using a faster z80 just for the

260
00:11:31,360 --> 00:11:35,279
sound

261
00:11:33,279 --> 00:11:36,320
it's not it's not going to go going to

262
00:11:35,279 --> 00:11:39,360
go away

263
00:11:36,320 --> 00:11:41,519
very well right and the video has

264
00:11:39,360 --> 00:11:43,360
problems right we have a lot less

265
00:11:41,519 --> 00:11:46,640
resolution and a lot like

266
00:11:43,360 --> 00:11:48,640
colors we might not dismay

267
00:11:46,640 --> 00:11:51,760
and so the first thing is that we're

268
00:11:48,640 --> 00:11:53,920
going to look at

269
00:11:51,760 --> 00:11:53,920
the

270
00:11:54,880 --> 00:11:58,720
someone is ringing me okay this is the

271
00:11:57,360 --> 00:12:01,839
architecture

272
00:11:58,720 --> 00:12:02,480
very um very quick overlook of the

273
00:12:01,839 --> 00:12:05,680
arctic

274
00:12:02,480 --> 00:12:07,680
architecture of the zx spectrum and you

275
00:12:05,680 --> 00:12:08,880
have here the paul video encoder so to

276
00:12:07,680 --> 00:12:11,519
generate the video signal

277
00:12:08,880 --> 00:12:12,720
you have the crystal for the paul collar

278
00:12:11,519 --> 00:12:14,959
carrier

279
00:12:12,720 --> 00:12:15,839
then we have a crystal that uses is used

280
00:12:14,959 --> 00:12:18,399
by the ula

281
00:12:15,839 --> 00:12:19,360
to generate part of the video and it's

282
00:12:18,399 --> 00:12:22,639
divided by

283
00:12:19,360 --> 00:12:25,920
four to give the clock to the cpu so

284
00:12:22,639 --> 00:12:26,800
here we are at 3.5 megahertz so we got a

285
00:12:25,920 --> 00:12:29,920
big loss

286
00:12:26,800 --> 00:12:30,560
in clock cycle right it would it could

287
00:12:29,920 --> 00:12:32,639
go to

288
00:12:30,560 --> 00:12:34,160
four megabytes but in the spectrum is at

289
00:12:32,639 --> 00:12:37,519
3.5

290
00:12:34,160 --> 00:12:40,399
so the big problem is that

291
00:12:37,519 --> 00:12:42,000
when the cpu wants to access high ram

292
00:12:40,399 --> 00:12:44,000
those 32k

293
00:12:42,000 --> 00:12:46,160
it can do that exclusively without any

294
00:12:44,000 --> 00:12:48,959
problems without any interference

295
00:12:46,160 --> 00:12:50,079
but when we are generating the video the

296
00:12:48,959 --> 00:12:52,959
ula

297
00:12:50,079 --> 00:12:54,959
will repeat this every uh 20

298
00:12:52,959 --> 00:12:55,839
milliseconds because it's 50 times a

299
00:12:54,959 --> 00:12:57,839
second

300
00:12:55,839 --> 00:13:00,079
and we'll have actually have to share

301
00:12:57,839 --> 00:13:03,920
this the the bus the dress bus

302
00:13:00,079 --> 00:13:06,800
and the data bus with the with the cpu

303
00:13:03,920 --> 00:13:07,760
but since the ula is greedy it what it

304
00:13:06,800 --> 00:13:11,279
actually does

305
00:13:07,760 --> 00:13:12,560
is it stops the cpu on its tracks if it

306
00:13:11,279 --> 00:13:14,959
sees an access

307
00:13:12,560 --> 00:13:17,279
to the same address so it's actually

308
00:13:14,959 --> 00:13:19,439
doing contention to our cpu

309
00:13:17,279 --> 00:13:21,040
so we are actually losing clock cycles

310
00:13:19,440 --> 00:13:23,279
that could be very useful

311
00:13:21,040 --> 00:13:25,360
so we will eventually look like that

312
00:13:23,279 --> 00:13:28,959
when the uli is actually putting the

313
00:13:25,360 --> 00:13:35,440
the video output okay

314
00:13:28,959 --> 00:13:38,719
so um if we are going to

315
00:13:35,440 --> 00:13:41,760
to do a game can anyone tell me

316
00:13:38,720 --> 00:13:43,680
what are the cycles of a game loop for

317
00:13:41,760 --> 00:13:48,160
example

318
00:13:43,680 --> 00:13:51,760
usually do what clear screen draw screen

319
00:13:48,160 --> 00:13:51,760
and process game logic right

320
00:13:53,040 --> 00:13:56,480
so the question is okay clear screen can

321
00:13:56,160 --> 00:13:59,839
we

322
00:13:56,480 --> 00:14:03,279
draw a full screen buffer per frame

323
00:13:59,839 --> 00:14:06,240
50 times a second some guys

324
00:14:03,279 --> 00:14:07,360
already hurt so we have this resolution

325
00:14:06,240 --> 00:14:10,639
right

326
00:14:07,360 --> 00:14:11,519
and you know you have this pixel buffer

327
00:14:10,639 --> 00:14:14,720
size so

328
00:14:11,519 --> 00:14:16,959
the resolution times divided by 8 times

329
00:14:14,720 --> 00:14:17,920
192 that's the number of bytes you have

330
00:14:16,959 --> 00:14:21,119
to push

331
00:14:17,920 --> 00:14:22,160
every screen to fill it up and we have

332
00:14:21,120 --> 00:14:25,199
the callers

333
00:14:22,160 --> 00:14:28,480
which are a different bank on the side

334
00:14:25,199 --> 00:14:30,639
which has 678 bytes

335
00:14:28,480 --> 00:14:31,680
so in total that's a big number for us

336
00:14:30,639 --> 00:14:34,959
to do

337
00:14:31,680 --> 00:14:35,599
every single frame okay now the question

338
00:14:34,959 --> 00:14:38,638
is

339
00:14:35,600 --> 00:14:40,639
as always i was as i was asking is this

340
00:14:38,639 --> 00:14:44,160
possible so we have

341
00:14:40,639 --> 00:14:46,959
paul actually doing 50 hertz refresh

342
00:14:44,160 --> 00:14:49,279
frame height so that means we have 10 20

343
00:14:46,959 --> 00:14:52,880
milliseconds per frame

344
00:14:49,279 --> 00:14:53,760
and and the ula steals some of it from

345
00:14:52,880 --> 00:14:56,800
us

346
00:14:53,760 --> 00:14:58,959
okay and then we have

347
00:14:56,800 --> 00:14:59,920
70 thousand fixed per frame that looks

348
00:14:58,959 --> 00:15:02,479
like a lot

349
00:14:59,920 --> 00:15:04,560
but zit uses the minimum instructions

350
00:15:02,480 --> 00:15:07,680
uses four ticks or four clocks

351
00:15:04,560 --> 00:15:09,279
per instruction the fastest uh copy

352
00:15:07,680 --> 00:15:12,719
instruction is an ldi

353
00:15:09,279 --> 00:15:13,519
takes 16 clock cycles so in fact we are

354
00:15:12,720 --> 00:15:15,440
only left

355
00:15:13,519 --> 00:15:16,880
even when we use the trick of the poop

356
00:15:15,440 --> 00:15:20,160
and uh pop

357
00:15:16,880 --> 00:15:22,480
push not poop sorry um

358
00:15:20,160 --> 00:15:24,160
and requires some more instructions but

359
00:15:22,480 --> 00:15:26,399
copies two bytes that would

360
00:15:24,160 --> 00:15:29,160
actually be very close to that number

361
00:15:26,399 --> 00:15:32,000
because it's two bytes so 33

362
00:15:29,160 --> 00:15:34,639
333 instructions would get me

363
00:15:32,000 --> 00:15:36,720
very near that value but then i wouldn't

364
00:15:34,639 --> 00:15:39,440
be able to do anything else right

365
00:15:36,720 --> 00:15:41,920
okay so you don't have enough time to do

366
00:15:39,440 --> 00:15:44,079
a full frame

367
00:15:41,920 --> 00:15:46,240
okay so what are our screen update

368
00:15:44,079 --> 00:15:49,359
options what can we do

369
00:15:46,240 --> 00:15:50,720
ideas we can do like project management

370
00:15:49,360 --> 00:15:54,000
we start cutting

371
00:15:50,720 --> 00:15:56,079
right reduce

372
00:15:54,000 --> 00:15:57,519
screen active area okay so if we just

373
00:15:56,079 --> 00:16:00,160
draw part of the screen

374
00:15:57,519 --> 00:16:02,000
you are faking it right you you use less

375
00:16:00,160 --> 00:16:04,160
cpu

376
00:16:02,000 --> 00:16:05,519
you can do partial updates just update a

377
00:16:04,160 --> 00:16:09,360
small section of it

378
00:16:05,519 --> 00:16:12,079
okay so less cpu and

379
00:16:09,360 --> 00:16:12,880
if you look like at this you'll see that

380
00:16:12,079 --> 00:16:15,680
there is

381
00:16:12,880 --> 00:16:16,399
the field is filled in and the idea is

382
00:16:15,680 --> 00:16:18,079
that

383
00:16:16,399 --> 00:16:21,040
there is another thing we can do which

384
00:16:18,079 --> 00:16:24,638
called i called colors for draw effect

385
00:16:21,040 --> 00:16:25,040
what does that mean if everyone knows i

386
00:16:24,639 --> 00:16:26,720
think

387
00:16:25,040 --> 00:16:29,199
for the next spectrum we can only have

388
00:16:26,720 --> 00:16:31,279
two colors for each character right

389
00:16:29,199 --> 00:16:32,479
and if you put colors on it you'll

390
00:16:31,279 --> 00:16:34,560
notice there is the one

391
00:16:32,480 --> 00:16:37,199
that is really weird because now it's

392
00:16:34,560 --> 00:16:39,599
gone so it's everything black right

393
00:16:37,199 --> 00:16:40,959
because the ink and the paper the two

394
00:16:39,600 --> 00:16:44,160
colors you can have are

395
00:16:40,959 --> 00:16:47,199
identical well you can you can use that

396
00:16:44,160 --> 00:16:49,680
for color for draw effect right so if i

397
00:16:47,199 --> 00:16:52,319
paint everything the way i want it

398
00:16:49,680 --> 00:16:53,519
i have a game that i don't need to

399
00:16:52,320 --> 00:16:56,560
change the pixels

400
00:16:53,519 --> 00:16:58,160
only the colors a lot less code but this

401
00:16:56,560 --> 00:17:00,160
looks like a 1982

402
00:16:58,160 --> 00:17:01,279
game so you might just do a little

403
00:17:00,160 --> 00:17:04,399
change

404
00:17:01,279 --> 00:17:06,799
make it look better some colors and then

405
00:17:04,400 --> 00:17:07,439
some lighting some more lighting on

406
00:17:06,799 --> 00:17:10,079
there

407
00:17:07,439 --> 00:17:12,000
and then we can do a mix of everything

408
00:17:10,079 --> 00:17:14,399
which is what i've just did

409
00:17:12,000 --> 00:17:15,119
and we get the game similar to this

410
00:17:14,400 --> 00:17:18,720
right

411
00:17:15,119 --> 00:17:21,039
this was the goal okay

412
00:17:18,720 --> 00:17:22,640
graphics challenge and i'm gonna have to

413
00:17:21,039 --> 00:17:25,679
speed up a little

414
00:17:22,640 --> 00:17:28,799
so the arcade has that resolution which

415
00:17:25,679 --> 00:17:31,039
looks a lot smaller than this one but

416
00:17:28,799 --> 00:17:32,000
it's this is actually fake because we

417
00:17:31,039 --> 00:17:35,280
only have this resolution

418
00:17:32,000 --> 00:17:37,039
the rest is border right so we only get

419
00:17:35,280 --> 00:17:39,840
that

420
00:17:37,039 --> 00:17:40,720
so that means we have to do some magic

421
00:17:39,840 --> 00:17:42,959
when we do

422
00:17:40,720 --> 00:17:44,320
we need to have a screen that has a lot

423
00:17:42,960 --> 00:17:47,360
of

424
00:17:44,320 --> 00:17:49,439
pixel data we might have to glue

425
00:17:47,360 --> 00:17:51,439
our pixel to the border and use the

426
00:17:49,440 --> 00:17:52,080
border as fake like it looks that it's

427
00:17:51,440 --> 00:17:55,520
bigger

428
00:17:52,080 --> 00:17:55,918
okay so these are just experiments to

429
00:17:55,520 --> 00:17:58,559
see

430
00:17:55,919 --> 00:17:59,600
if we could do the main uh graphics for

431
00:17:58,559 --> 00:18:01,360
the game

432
00:17:59,600 --> 00:18:03,439
and they actually they look similar

433
00:18:01,360 --> 00:18:06,639
enough to be a nice game

434
00:18:03,440 --> 00:18:09,360
so this is the one player game single

435
00:18:06,640 --> 00:18:12,080
or single player sorry and this is the

436
00:18:09,360 --> 00:18:12,080
two player game

437
00:18:12,840 --> 00:18:19,120
okay these are some nice graphics

438
00:18:16,160 --> 00:18:20,960
that were needed to be converted for the

439
00:18:19,120 --> 00:18:22,320
characters of the game

440
00:18:20,960 --> 00:18:24,240
but they will have a further impact

441
00:18:22,320 --> 00:18:28,159
further on okay

442
00:18:24,240 --> 00:18:30,400
so a port

443
00:18:28,160 --> 00:18:32,240
implies you have access to the source

444
00:18:30,400 --> 00:18:34,320
code the original source code

445
00:18:32,240 --> 00:18:36,160
when you don't have that it's not the

446
00:18:34,320 --> 00:18:37,840
port anymore because you need to reverse

447
00:18:36,160 --> 00:18:40,320
engineering everything

448
00:18:37,840 --> 00:18:41,678
everything is hard to come by you don't

449
00:18:40,320 --> 00:18:44,159
have a clear

450
00:18:41,679 --> 00:18:45,120
idea of what everything is you the code

451
00:18:44,160 --> 00:18:47,600
is actually doing

452
00:18:45,120 --> 00:18:49,600
because you don't have the code right so

453
00:18:47,600 --> 00:18:51,280
reverse engineering is actually

454
00:18:49,600 --> 00:18:53,520
when you have will not have access to

455
00:18:51,280 --> 00:18:56,240
original code and everything

456
00:18:53,520 --> 00:18:58,000
is a pain to actually get to the most

457
00:18:56,240 --> 00:18:59,360
simple things you have to try and try

458
00:18:58,000 --> 00:19:03,679
and try again

459
00:18:59,360 --> 00:19:11,679
okay i'm gonna play another small video

460
00:19:03,679 --> 00:19:14,849
rules for playing the game

461
00:19:11,680 --> 00:19:14,849
[Music]

462
00:19:17,390 --> 00:19:20,829
[Music]

463
00:19:22,840 --> 00:19:31,599
right

464
00:19:24,980 --> 00:19:31,599
[Music]

465
00:19:34,820 --> 00:19:38,369
[Music]

466
00:19:41,520 --> 00:19:44,799
so what do they tell us it's a match 3

467
00:19:44,000 --> 00:19:48,000
game

468
00:19:44,799 --> 00:19:50,480
and only give us the basic mechanics why

469
00:19:48,000 --> 00:19:52,480
because this was an arcade game they

470
00:19:50,480 --> 00:19:54,559
want your coins so you need to

471
00:19:52,480 --> 00:19:55,600
spend some coins to learn more about the

472
00:19:54,559 --> 00:19:57,760
game about

473
00:19:55,600 --> 00:19:58,639
combos about attack patterns about

474
00:19:57,760 --> 00:20:01,919
scores

475
00:19:58,640 --> 00:20:04,880
you can do different plays that the same

476
00:20:01,919 --> 00:20:07,440
amount of bubbles pops will actually

477
00:20:04,880 --> 00:20:10,480
give you

478
00:20:07,440 --> 00:20:13,120
will actually give you less points

479
00:20:10,480 --> 00:20:15,200
or less attacks to the enemy so these

480
00:20:13,120 --> 00:20:16,080
are all the characters i've been able to

481
00:20:15,200 --> 00:20:19,200
define

482
00:20:16,080 --> 00:20:21,760
what um these things are

483
00:20:19,200 --> 00:20:22,240
these are the the power-ups but i

484
00:20:21,760 --> 00:20:24,480
haven't

485
00:20:22,240 --> 00:20:26,799
quite figured out what if this is just a

486
00:20:24,480 --> 00:20:28,159
way to say this is a better character

487
00:20:26,799 --> 00:20:29,840
than the other one

488
00:20:28,159 --> 00:20:32,320
or if it's something more and changes

489
00:20:29,840 --> 00:20:35,360
the gameplay i haven't found out it yet

490
00:20:32,320 --> 00:20:36,639
but what i had to do was i had actually

491
00:20:35,360 --> 00:20:39,520
to play this game

492
00:20:36,640 --> 00:20:41,200
a lot okay so that i could find the

493
00:20:39,520 --> 00:20:42,960
attack patterns for each of the

494
00:20:41,200 --> 00:20:43,520
characters okay and i found out that

495
00:20:42,960 --> 00:20:46,400
it's a

496
00:20:43,520 --> 00:20:46,960
eight by eight sorry seven by eight uh

497
00:20:46,400 --> 00:20:49,520
pattern

498
00:20:46,960 --> 00:20:50,880
that repeats for each one of them this

499
00:20:49,520 --> 00:20:53,440
was hard to do

500
00:20:50,880 --> 00:20:55,919
this is not code okay so what

501
00:20:53,440 --> 00:20:57,679
compromises did we have to do

502
00:20:55,919 --> 00:20:59,440
so we don't have the background because

503
00:20:57,679 --> 00:21:02,960
we can handle that

504
00:20:59,440 --> 00:21:05,280
uh we don't have um distinct patterns

505
00:21:02,960 --> 00:21:07,919
for example this is exactly same players

506
00:21:05,280 --> 00:21:09,360
but when switch they change colors

507
00:21:07,919 --> 00:21:11,840
maybe we could that if we have enough

508
00:21:09,360 --> 00:21:13,840
memory and we don't have characters

509
00:21:11,840 --> 00:21:15,760
as backgrounds of the game so we cannot

510
00:21:13,840 --> 00:21:18,320
do that because we are faking it with

511
00:21:15,760 --> 00:21:20,879
color instead of pixels right

512
00:21:18,320 --> 00:21:21,678
so when we have we have this completely

513
00:21:20,880 --> 00:21:23,840
distinct

514
00:21:21,679 --> 00:21:25,039
uh thing but at least the gameplay we

515
00:21:23,840 --> 00:21:28,480
hope will be

516
00:21:25,039 --> 00:21:30,000
uh the same so going back for the color

517
00:21:28,480 --> 00:21:32,880
for dry effect what boost

518
00:21:30,000 --> 00:21:33,440
does this actually give us so this is

519
00:21:32,880 --> 00:21:36,159
what

520
00:21:33,440 --> 00:21:36,799
we were used to have in terms of bytes

521
00:21:36,159 --> 00:21:39,679
right

522
00:21:36,799 --> 00:21:41,600
but if i only process the colors i have

523
00:21:39,679 --> 00:21:44,640
a boost of wait time so i have

524
00:21:41,600 --> 00:21:47,918
a free uh time for

525
00:21:44,640 --> 00:21:49,679
computing game logic and i have less

526
00:21:47,919 --> 00:21:50,799
contention with the uli so some more

527
00:21:49,679 --> 00:21:54,080
cycles that i can

528
00:21:50,799 --> 00:21:58,559
eventually use okay and for the

529
00:21:54,080 --> 00:21:59,439
50 uh uh sorry for the 50 hertz palm

530
00:21:58,559 --> 00:22:01,760
frame rate

531
00:21:59,440 --> 00:22:02,880
i can actually do 50 hertz if i'm

532
00:22:01,760 --> 00:22:05,760
careful with the code

533
00:22:02,880 --> 00:22:05,760
and optimize it

534
00:22:06,320 --> 00:22:09,520
okay tips and tricks this is the hard

535
00:22:08,960 --> 00:22:12,799
part

536
00:22:09,520 --> 00:22:13,280
okay okay which data structure should i

537
00:22:12,799 --> 00:22:15,760
use

538
00:22:13,280 --> 00:22:15,760
for that

539
00:22:21,600 --> 00:22:29,199
yeah it's an array or a vector right

540
00:22:25,840 --> 00:22:31,918
agreed but that's what i mean so

541
00:22:29,200 --> 00:22:33,840
to represent this we need to decide so

542
00:22:31,919 --> 00:22:37,760
should the array or the grid

543
00:22:33,840 --> 00:22:38,559
be in memory like horizontal or vertical

544
00:22:37,760 --> 00:22:40,640
first

545
00:22:38,559 --> 00:22:41,760
does that influence our code does that

546
00:22:40,640 --> 00:22:44,960
make ourselves

547
00:22:41,760 --> 00:22:46,640
faster it probably does okay so

548
00:22:44,960 --> 00:22:49,120
we as you notice in the videos the

549
00:22:46,640 --> 00:22:51,679
animations are pretty much vertical

550
00:22:49,120 --> 00:22:53,760
so that's a good choice to be vertical

551
00:22:51,679 --> 00:22:54,400
because with a simple increment we'll go

552
00:22:53,760 --> 00:22:57,440
to what

553
00:22:54,400 --> 00:22:58,480
where you want instead of doing ads to

554
00:22:57,440 --> 00:23:01,679
go to the other

555
00:22:58,480 --> 00:23:04,240
side and another important thing is that

556
00:23:01,679 --> 00:23:05,120
we need to do color match search on that

557
00:23:04,240 --> 00:23:08,320
array

558
00:23:05,120 --> 00:23:11,918
okay okay

559
00:23:08,320 --> 00:23:14,158
how do we do color match search we start

560
00:23:11,919 --> 00:23:15,200
on one place and then we have to check

561
00:23:14,159 --> 00:23:18,080
every other

562
00:23:15,200 --> 00:23:19,919
adjoining uh area right and then we see

563
00:23:18,080 --> 00:23:20,480
there is another color there and we keep

564
00:23:19,919 --> 00:23:23,360
going

565
00:23:20,480 --> 00:23:24,960
keep going and we'll pop everything that

566
00:23:23,360 --> 00:23:27,840
we find and then we

567
00:23:24,960 --> 00:23:29,840
roll back and we continue on that side

568
00:23:27,840 --> 00:23:31,840
this is how we do a color match

569
00:23:29,840 --> 00:23:33,678
and notice that i marked it with white

570
00:23:31,840 --> 00:23:34,720
that means you need to mark it so that

571
00:23:33,679 --> 00:23:37,360
when you

572
00:23:34,720 --> 00:23:39,280
come back you know okay i've been here

573
00:23:37,360 --> 00:23:42,320
before okay

574
00:23:39,280 --> 00:23:43,039
okay so what's simple c code for now i'm

575
00:23:42,320 --> 00:23:45,520
not going

576
00:23:43,039 --> 00:23:46,720
into assembly right now okay so it's a

577
00:23:45,520 --> 00:23:50,000
mark and sweep

578
00:23:46,720 --> 00:23:52,080
kind of thing so if at that position

579
00:23:50,000 --> 00:23:53,279
there is something of the current color

580
00:23:52,080 --> 00:23:56,158
i'm checking

581
00:23:53,279 --> 00:23:58,080
then i will go and check the left the

582
00:23:56,159 --> 00:23:59,919
sorry the first the top the left and

583
00:23:58,080 --> 00:24:03,360
then the right and the bottom

584
00:23:59,919 --> 00:24:07,200
uh but what happens if you look at

585
00:24:03,360 --> 00:24:09,439
those spots on the corners if i go to an

586
00:24:07,200 --> 00:24:10,880
array and try to visit something outside

587
00:24:09,440 --> 00:24:15,120
the array

588
00:24:10,880 --> 00:24:17,440
what do i get crash

589
00:24:15,120 --> 00:24:19,840
not garbage really crash garbage you get

590
00:24:17,440 --> 00:24:22,000
on a pc because it's protected right

591
00:24:19,840 --> 00:24:23,678
here you're gonna get the crash so we

592
00:24:22,000 --> 00:24:27,039
need to somehow

593
00:24:23,679 --> 00:24:30,640
check that we are not doing that but

594
00:24:27,039 --> 00:24:31,279
if we do that you need to do something

595
00:24:30,640 --> 00:24:34,799
like that

596
00:24:31,279 --> 00:24:37,919
right if that position is still valid

597
00:24:34,799 --> 00:24:41,039
then we do the same right and the smart

598
00:24:37,919 --> 00:24:41,039
guys here would say

599
00:24:41,200 --> 00:24:48,159
what around the whole field

600
00:24:44,480 --> 00:24:51,120
you're going there you're right so uh

601
00:24:48,159 --> 00:24:52,080
we could do a refactor and just put uh

602
00:24:51,120 --> 00:24:55,520
valid on top

603
00:24:52,080 --> 00:24:58,559
right the problem is that this implies

604
00:24:55,520 --> 00:25:00,799
that i need to do an extra check can we

605
00:24:58,559 --> 00:25:04,080
do better and that guy is

606
00:25:00,799 --> 00:25:08,799
on the spot okay so

607
00:25:04,080 --> 00:25:11,678
the idea is that if we do

608
00:25:08,799 --> 00:25:13,120
if we find a way to avoid the edge cases

609
00:25:11,679 --> 00:25:16,799
what can we do

610
00:25:13,120 --> 00:25:16,799
and you you cannot speak now

611
00:25:21,440 --> 00:25:26,640
um kind of so

612
00:25:24,720 --> 00:25:28,559
that one was also right so you can

613
00:25:26,640 --> 00:25:32,240
create what is called the fence

614
00:25:28,559 --> 00:25:35,039
so an area out sorry an area

615
00:25:32,240 --> 00:25:36,799
outside that is safe because it's still

616
00:25:35,039 --> 00:25:39,760
part of the array but you only

617
00:25:36,799 --> 00:25:40,240
handle inside okay so even if you go

618
00:25:39,760 --> 00:25:42,960
there

619
00:25:40,240 --> 00:25:43,279
no problem still in the array so if we

620
00:25:42,960 --> 00:25:45,120
have

621
00:25:43,279 --> 00:25:47,360
any pattern and the best way to explain

622
00:25:45,120 --> 00:25:49,039
this is like this is kind of an iceland

623
00:25:47,360 --> 00:25:50,639
so if you have water all around you

624
00:25:49,039 --> 00:25:52,559
cannot go anywhere right

625
00:25:50,640 --> 00:25:54,480
so it's safe and that's basically what

626
00:25:52,559 --> 00:25:56,559
he did you put water all around

627
00:25:54,480 --> 00:25:58,559
on an iceland and we'll never get out of

628
00:25:56,559 --> 00:26:02,399
the iceland sorry

629
00:25:58,559 --> 00:26:04,720
okay okay

630
00:26:02,400 --> 00:26:06,000
i'm going to do a quick recap of common

631
00:26:04,720 --> 00:26:09,200
optimizations

632
00:26:06,000 --> 00:26:12,799
and i'll do a comparison between

633
00:26:09,200 --> 00:26:16,400
c that most people know and to assembly

634
00:26:12,799 --> 00:26:18,320
okay so when we do tell call

635
00:26:16,400 --> 00:26:20,000
optimization is that if the last

636
00:26:18,320 --> 00:26:22,240
thing you're going to call is another

637
00:26:20,000 --> 00:26:23,679
function it means that when you call the

638
00:26:22,240 --> 00:26:25,679
other function the other function

639
00:26:23,679 --> 00:26:27,760
comes back and then you go back again

640
00:26:25,679 --> 00:26:28,480
right so we have something like this we

641
00:26:27,760 --> 00:26:30,960
call and then

642
00:26:28,480 --> 00:26:32,480
it returns takes all these clock cycles

643
00:26:30,960 --> 00:26:35,120
and then we return again

644
00:26:32,480 --> 00:26:36,000
right so instead we could do something

645
00:26:35,120 --> 00:26:38,320
like this we

646
00:26:36,000 --> 00:26:39,440
comment the return statement and just

647
00:26:38,320 --> 00:26:42,158
jump because

648
00:26:39,440 --> 00:26:43,360
that uh function will do the return for

649
00:26:42,159 --> 00:26:46,559
us right

650
00:26:43,360 --> 00:26:48,399
okay and we saved 17 clock cycles just

651
00:26:46,559 --> 00:26:51,600
in that optimization

652
00:26:48,400 --> 00:26:55,039
okay next

653
00:26:51,600 --> 00:26:57,439
okay move invariants out of the loop

654
00:26:55,039 --> 00:26:59,200
so what we have is that delta equals

655
00:26:57,440 --> 00:27:01,360
base plus offset

656
00:26:59,200 --> 00:27:02,559
that doesn't change anywhere in the loop

657
00:27:01,360 --> 00:27:05,760
right so it's

658
00:27:02,559 --> 00:27:07,200
out of there and outside that's most

659
00:27:05,760 --> 00:27:09,679
typical optimizations that

660
00:27:07,200 --> 00:27:11,120
are current knowledge right we can also

661
00:27:09,679 --> 00:27:13,279
enroll loops

662
00:27:11,120 --> 00:27:14,320
so we can substitute that for loop and

663
00:27:13,279 --> 00:27:17,919
just do

664
00:27:14,320 --> 00:27:19,120
a simple dump and then we can optimize

665
00:27:17,919 --> 00:27:21,120
this a little bit more

666
00:27:19,120 --> 00:27:22,799
because we know that all the results of

667
00:27:21,120 --> 00:27:24,080
these instructions right and we can do

668
00:27:22,799 --> 00:27:27,039
that

669
00:27:24,080 --> 00:27:29,600
something else we can do enroll in

670
00:27:27,039 --> 00:27:32,960
multiples of n why

671
00:27:29,600 --> 00:27:35,039
because if the e on top the limit is

672
00:27:32,960 --> 00:27:37,520
three thousand or some huge number

673
00:27:35,039 --> 00:27:38,480
we can't not unroll everything right

674
00:27:37,520 --> 00:27:40,799
that's crazy

675
00:27:38,480 --> 00:27:41,520
we wouldn't be able to do it so we might

676
00:27:40,799 --> 00:27:44,480
enroll

677
00:27:41,520 --> 00:27:45,760
in blocks in n so that we can do

678
00:27:44,480 --> 00:27:49,200
optimization

679
00:27:45,760 --> 00:27:52,960
and what do we gain with this we do less

680
00:27:49,200 --> 00:27:56,240
code controlling the loop cycle right

681
00:27:52,960 --> 00:27:58,480
this is the standard stuff and

682
00:27:56,240 --> 00:27:59,440
we can always do inline functions does

683
00:27:58,480 --> 00:28:03,200
anyone though

684
00:27:59,440 --> 00:28:04,880
does not know what an inline function is

685
00:28:03,200 --> 00:28:07,520
everyone knows what an inline function

686
00:28:04,880 --> 00:28:10,559
is okay

687
00:28:07,520 --> 00:28:12,399
so what is a portion in line

688
00:28:10,559 --> 00:28:14,320
so an inline function basically is just

689
00:28:12,399 --> 00:28:16,158
to replace that

690
00:28:14,320 --> 00:28:17,678
function call with the contents of the

691
00:28:16,159 --> 00:28:19,039
function this is actually a

692
00:28:17,679 --> 00:28:19,919
representation of the function to

693
00:28:19,039 --> 00:28:23,440
calculate the

694
00:28:19,919 --> 00:28:26,799
the y uh vector

695
00:28:23,440 --> 00:28:30,320
for the screen and if we know

696
00:28:26,799 --> 00:28:33,039
that in one in eight times

697
00:28:30,320 --> 00:28:34,879
we'll get that sorry seven eight times

698
00:28:33,039 --> 00:28:38,480
you'll get that first if

699
00:28:34,880 --> 00:28:40,960
i can avoid actually doing the call how

700
00:28:38,480 --> 00:28:43,039
actually putting the if on the code

701
00:28:40,960 --> 00:28:44,720
directly and then i only only call this

702
00:28:43,039 --> 00:28:46,320
one one

703
00:28:44,720 --> 00:28:48,159
every eight times right another

704
00:28:46,320 --> 00:28:51,120
optimization

705
00:28:48,159 --> 00:28:53,200
and this is the big mother right self

706
00:28:51,120 --> 00:28:54,879
modifying code we need to demystify this

707
00:28:53,200 --> 00:28:56,240
because you can do very complex stuff

708
00:28:54,880 --> 00:28:59,120
with this but the main

709
00:28:56,240 --> 00:29:01,440
part is very simple so what this means

710
00:28:59,120 --> 00:29:03,840
is start code at 6000

711
00:29:01,440 --> 00:29:05,120
and then we define a variable that has

712
00:29:03,840 --> 00:29:08,320
that uh

713
00:29:05,120 --> 00:29:09,520
value and starts in 6000 because that's

714
00:29:08,320 --> 00:29:11,279
what we said

715
00:29:09,520 --> 00:29:13,120
and when you here we have an instruction

716
00:29:11,279 --> 00:29:15,200
that loads a register

717
00:29:13,120 --> 00:29:16,719
with the contents of that variable with

718
00:29:15,200 --> 00:29:20,480
the contents of an address

719
00:29:16,720 --> 00:29:25,440
right that takes 20 cycles

720
00:29:20,480 --> 00:29:28,960
but if we load um

721
00:29:25,440 --> 00:29:30,000
an address for the hl register it's a

722
00:29:28,960 --> 00:29:33,360
special case

723
00:29:30,000 --> 00:29:36,399
it only takes 16 uh cycles

724
00:29:33,360 --> 00:29:39,279
but if we are going to do this in a loop

725
00:29:36,399 --> 00:29:39,760
and if that thing the value that we want

726
00:29:39,279 --> 00:29:42,960
is

727
00:29:39,760 --> 00:29:44,799
not actually changing or

728
00:29:42,960 --> 00:29:46,480
we don't have enough registers to keep

729
00:29:44,799 --> 00:29:48,080
it we can actually

730
00:29:46,480 --> 00:29:50,080
put an instruction like that with a

731
00:29:48,080 --> 00:29:52,799
constant but that constant

732
00:29:50,080 --> 00:29:53,520
is changeable when we start the the

733
00:29:52,799 --> 00:29:56,480
function

734
00:29:53,520 --> 00:29:57,279
but not within the loop okay so what we

735
00:29:56,480 --> 00:30:00,799
can do

736
00:29:57,279 --> 00:30:03,440
is actually define an embedded variable

737
00:30:00,799 --> 00:30:04,639
which actually points to the to the

738
00:30:03,440 --> 00:30:06,159
thing

739
00:30:04,640 --> 00:30:08,320
of that is in the middle of the

740
00:30:06,159 --> 00:30:11,039
instruction so the load hl

741
00:30:08,320 --> 00:30:11,918
as this this representation but when i

742
00:30:11,039 --> 00:30:15,120
use this

743
00:30:11,919 --> 00:30:17,679
um dollar what it means is that

744
00:30:15,120 --> 00:30:18,719
current position in memory plus one so

745
00:30:17,679 --> 00:30:21,679
my variable

746
00:30:18,720 --> 00:30:22,559
will actually share these bytes with the

747
00:30:21,679 --> 00:30:25,039
instruction

748
00:30:22,559 --> 00:30:26,960
okay this is the main simplest

749
00:30:25,039 --> 00:30:29,360
self-modifying code you can have

750
00:30:26,960 --> 00:30:30,320
but look at the difference sorry look at

751
00:30:29,360 --> 00:30:34,719
the difference here

752
00:30:30,320 --> 00:30:34,720
20 cycles and 10 cycles okay

753
00:30:35,360 --> 00:30:40,080
okay loop update optimization this is

754
00:30:38,640 --> 00:30:42,240
something that i came up

755
00:30:40,080 --> 00:30:43,520
uh but i don't think it's new it's

756
00:30:42,240 --> 00:30:45,760
something that everyone that

757
00:30:43,520 --> 00:30:47,039
actually gets into the problem will find

758
00:30:45,760 --> 00:30:48,960
out i think

759
00:30:47,039 --> 00:30:50,879
that is a for loop consists in three

760
00:30:48,960 --> 00:30:53,360
parts like four why

761
00:30:50,880 --> 00:30:54,240
uh i need init condition and update and

762
00:30:53,360 --> 00:30:57,600
then you do

763
00:30:54,240 --> 00:31:00,000
the block uh code right so what you

764
00:30:57,600 --> 00:31:02,240
usually have is something like this

765
00:31:00,000 --> 00:31:04,720
right so you start initialization you

766
00:31:02,240 --> 00:31:06,399
identify the condition and you update

767
00:31:04,720 --> 00:31:08,080
the control variable right and then you

768
00:31:06,399 --> 00:31:10,799
do something inside

769
00:31:08,080 --> 00:31:12,320
but that's the simplest case you can do

770
00:31:10,799 --> 00:31:15,039
something different

771
00:31:12,320 --> 00:31:16,240
like calculating something that is more

772
00:31:15,039 --> 00:31:20,480
heavy right

773
00:31:16,240 --> 00:31:23,039
so can we optimize this

774
00:31:20,480 --> 00:31:26,320
what's the problem with this anyone

775
00:31:23,039 --> 00:31:26,320
knows what's the problem with this

776
00:31:29,519 --> 00:31:34,880
you might not no you will not need the

777
00:31:32,559 --> 00:31:36,879
the last y okay the last why you

778
00:31:34,880 --> 00:31:40,000
calculate you'll not need it

779
00:31:36,880 --> 00:31:40,480
okay why because you calculate the next

780
00:31:40,000 --> 00:31:43,279
y

781
00:31:40,480 --> 00:31:43,760
and then you check the control condition

782
00:31:43,279 --> 00:31:47,120
and

783
00:31:43,760 --> 00:31:47,679
you calculated i the the number uh the

784
00:31:47,120 --> 00:31:50,158
counter

785
00:31:47,679 --> 00:31:50,880
but you don't need the y and you just

786
00:31:50,159 --> 00:31:53,279
saved

787
00:31:50,880 --> 00:31:54,080
a few instructions it might not look

788
00:31:53,279 --> 00:31:57,120
much but

789
00:31:54,080 --> 00:31:57,120
i'll give you an example

790
00:31:57,200 --> 00:32:02,960
okay so imagine this is a sprite

791
00:32:00,720 --> 00:32:04,399
it's composed in these lines for each

792
00:32:02,960 --> 00:32:06,240
byte is a line

793
00:32:04,399 --> 00:32:08,239
and that you want to mirror this into

794
00:32:06,240 --> 00:32:11,360
the screen in reverse

795
00:32:08,240 --> 00:32:13,360
okay so what you want to have to do to

796
00:32:11,360 --> 00:32:15,840
make this happen without duplicating the

797
00:32:13,360 --> 00:32:15,840
the data

798
00:32:15,919 --> 00:32:19,519
you need to actually access it in a

799
00:32:17,519 --> 00:32:21,919
different order right

800
00:32:19,519 --> 00:32:23,519
but you can do it in two different ways

801
00:32:21,919 --> 00:32:23,840
so if you look at the bytes in memory

802
00:32:23,519 --> 00:32:27,519
they

803
00:32:23,840 --> 00:32:30,000
are in order so you can do what

804
00:32:27,519 --> 00:32:32,320
one pointer runs to one side the other

805
00:32:30,000 --> 00:32:35,279
pointer runs to the other side right

806
00:32:32,320 --> 00:32:35,918
so this you can actually change the

807
00:32:35,279 --> 00:32:38,240
order

808
00:32:35,919 --> 00:32:39,200
you can actually write on the screen in

809
00:32:38,240 --> 00:32:41,519
reverse order

810
00:32:39,200 --> 00:32:43,120
or you can go in reverse order on the

811
00:32:41,519 --> 00:32:45,519
sprite it's up to you

812
00:32:43,120 --> 00:32:47,360
but on the case of the spectrum it's

813
00:32:45,519 --> 00:32:48,960
better to reverse the order on the

814
00:32:47,360 --> 00:32:52,639
sprite date

815
00:32:48,960 --> 00:32:56,000
okay okay this is the

816
00:32:52,640 --> 00:32:58,240
the last example i think it's a huge one

817
00:32:56,000 --> 00:32:59,519
and we'll i will talk i will explain it

818
00:32:58,240 --> 00:33:03,200
in assembly

819
00:32:59,519 --> 00:33:06,640
okay so rp blitz is a function

820
00:33:03,200 --> 00:33:08,720
that uh does pixel bleeding in reverse

821
00:33:06,640 --> 00:33:10,080
exactly what i mentioned before right

822
00:33:08,720 --> 00:33:12,240
and this is adaptive structure

823
00:33:10,080 --> 00:33:13,918
that i'm using not very important except

824
00:33:12,240 --> 00:33:17,600
for the last part

825
00:33:13,919 --> 00:33:20,480
and i'm going to show you that the hl

826
00:33:17,600 --> 00:33:21,760
register points to that position and the

827
00:33:20,480 --> 00:33:23,360
destination register

828
00:33:21,760 --> 00:33:25,360
actually points to the screen pixel

829
00:33:23,360 --> 00:33:28,240
address when we get to that

830
00:33:25,360 --> 00:33:31,360
code on top okay so what we do we

831
00:33:28,240 --> 00:33:35,200
calculate the pixel address

832
00:33:31,360 --> 00:33:38,320
by actually reading from there

833
00:33:35,200 --> 00:33:41,919
and then we save the pointer for later

834
00:33:38,320 --> 00:33:43,279
we calculate the move the pixel address

835
00:33:41,919 --> 00:33:46,720
to the hl

836
00:33:43,279 --> 00:33:49,600
register and one more

837
00:33:46,720 --> 00:33:50,640
so now we decrement it because for the

838
00:33:49,600 --> 00:33:53,039
next

839
00:33:50,640 --> 00:33:54,240
time we need to go to the next uh pixel

840
00:33:53,039 --> 00:33:56,960
address

841
00:33:54,240 --> 00:33:57,919
and then we calculate the pointer we

842
00:33:56,960 --> 00:34:00,000
increment the

843
00:33:57,919 --> 00:34:01,440
the pointer again because we are we want

844
00:34:00,000 --> 00:34:04,159
to point now

845
00:34:01,440 --> 00:34:04,640
to this one the hl register actually

846
00:34:04,159 --> 00:34:07,279
moved

847
00:34:04,640 --> 00:34:08,399
right we need to calculate that and why

848
00:34:07,279 --> 00:34:12,159
do we need this

849
00:34:08,399 --> 00:34:15,759
remember the zx 80 doesn't

850
00:34:12,159 --> 00:34:18,800
um sorry the z80 doesn't

851
00:34:15,760 --> 00:34:20,399
have multiplication so to optimize this

852
00:34:18,800 --> 00:34:22,399
we can have the sprite data

853
00:34:20,399 --> 00:34:23,759
already composed with width and height

854
00:34:22,399 --> 00:34:26,000
multiplied so you

855
00:34:23,760 --> 00:34:27,359
won't have to do that math right so you

856
00:34:26,000 --> 00:34:29,199
need to actually get

857
00:34:27,359 --> 00:34:30,879
that so that we can get that value to

858
00:34:29,199 --> 00:34:34,078
add to go to the bottom

859
00:34:30,879 --> 00:34:37,359
of the sprite data okay and

860
00:34:34,079 --> 00:34:40,399
now we actually notice this that

861
00:34:37,359 --> 00:34:42,319
rp bleed w that's a variable but that's

862
00:34:40,399 --> 00:34:45,118
a variable that's going to be

863
00:34:42,320 --> 00:34:45,839
uh self-modifying code okay take note of

864
00:34:45,119 --> 00:34:48,159
that

865
00:34:45,839 --> 00:34:49,440
and then we do some more math to

866
00:34:48,159 --> 00:34:52,480
calculate the width

867
00:34:49,440 --> 00:34:52,879
and the swap swap that data again and

868
00:34:52,480 --> 00:34:55,760
then

869
00:34:52,879 --> 00:34:56,319
decrement again to go a little bit

870
00:34:55,760 --> 00:34:59,440
further

871
00:34:56,320 --> 00:35:01,280
okay so the current uh destination

872
00:34:59,440 --> 00:35:03,040
register narrow has this data

873
00:35:01,280 --> 00:35:04,640
screen breaks all address plus size

874
00:35:03,040 --> 00:35:08,160
minus one

875
00:35:04,640 --> 00:35:11,279
okay and then we actually load

876
00:35:08,160 --> 00:35:14,399
the bleed height from another variable

877
00:35:11,280 --> 00:35:17,280
and now so this part is the actual

878
00:35:14,400 --> 00:35:19,119
init function of this four cycle

879
00:35:17,280 --> 00:35:22,640
remember that

880
00:35:19,119 --> 00:35:22,640
so now what do we do

881
00:35:23,680 --> 00:35:27,839
this is auto screen okay i can tell you

882
00:35:27,119 --> 00:35:29,839
what it

883
00:35:27,839 --> 00:35:31,759
what's in there it's a jump to an

884
00:35:29,839 --> 00:35:34,560
instruction that is down here

885
00:35:31,760 --> 00:35:35,440
it's not very problematic okay so it's a

886
00:35:34,560 --> 00:35:38,400
jump to this

887
00:35:35,440 --> 00:35:39,040
address so what is this this is the body

888
00:35:38,400 --> 00:35:42,400
of the four

889
00:35:39,040 --> 00:35:44,800
cycle okay and then we

890
00:35:42,400 --> 00:35:46,480
decrement the variable that controls the

891
00:35:44,800 --> 00:35:48,320
cycle we test it

892
00:35:46,480 --> 00:35:50,640
and if we have still stuff to do we're

893
00:35:48,320 --> 00:35:54,079
going to jump back on top

894
00:35:50,640 --> 00:35:55,920
right and then we are going to do what

895
00:35:54,079 --> 00:35:57,119
uh do everything that we need to

896
00:35:55,920 --> 00:36:00,480
calculate the next

897
00:35:57,119 --> 00:36:01,920
y right i'm going to speed it up a

898
00:36:00,480 --> 00:36:05,760
little bit

899
00:36:01,920 --> 00:36:09,359
and here you can see the example here

900
00:36:05,760 --> 00:36:12,800
partial inline of function increment

901
00:36:09,359 --> 00:36:13,359
screen y okay and if it's the special

902
00:36:12,800 --> 00:36:16,560
case

903
00:36:13,359 --> 00:36:19,520
here we will not do the jump

904
00:36:16,560 --> 00:36:20,480
and uh we will save some instructions

905
00:36:19,520 --> 00:36:23,359
basically

906
00:36:20,480 --> 00:36:23,760
all the that is in the call and beside

907
00:36:23,359 --> 00:36:26,400
that

908
00:36:23,760 --> 00:36:27,040
there is a trick here because it's

909
00:36:26,400 --> 00:36:28,880
cheaper

910
00:36:27,040 --> 00:36:30,880
to actually decrement in an increment

911
00:36:28,880 --> 00:36:33,200
when it go through this route

912
00:36:30,880 --> 00:36:35,280
because it takes four cycles for each

913
00:36:33,200 --> 00:36:35,598
decrement instead of a jump that would

914
00:36:35,280 --> 00:36:38,240
take

915
00:36:35,599 --> 00:36:39,040
ten okay four by four plus four it's

916
00:36:38,240 --> 00:36:41,439
eight

917
00:36:39,040 --> 00:36:43,440
so that's faster and then we do some

918
00:36:41,440 --> 00:36:46,320
more processing

919
00:36:43,440 --> 00:36:47,839
trying not to make you guys sleep and

920
00:36:46,320 --> 00:36:50,880
here is the instruction

921
00:36:47,839 --> 00:36:53,279
uh where it's being used again as

922
00:36:50,880 --> 00:36:55,200
a variable right dynamic code there is

923
00:36:53,280 --> 00:36:57,920
the that little guy there

924
00:36:55,200 --> 00:37:00,078
showing there is a possible case of this

925
00:36:57,920 --> 00:37:02,400
memory dysfunction

926
00:37:00,079 --> 00:37:03,920
and then we do some calculation to get

927
00:37:02,400 --> 00:37:07,119
back to the right position

928
00:37:03,920 --> 00:37:10,480
on the on the sprite data

929
00:37:07,119 --> 00:37:13,200
and now you can see that all this

930
00:37:10,480 --> 00:37:14,000
is what we would repeat on the last

931
00:37:13,200 --> 00:37:17,040
cycle

932
00:37:14,000 --> 00:37:17,760
if we didn't need the the y variable on

933
00:37:17,040 --> 00:37:19,759
the last cycle

934
00:37:17,760 --> 00:37:21,359
because on the last cycle we will exit

935
00:37:19,760 --> 00:37:23,839
here and we will not do

936
00:37:21,359 --> 00:37:24,560
all this and that the first time we just

937
00:37:23,839 --> 00:37:27,040
jumped

938
00:37:24,560 --> 00:37:28,640
from here to here to avoid that because

939
00:37:27,040 --> 00:37:32,079
we don't need that in the first

940
00:37:28,640 --> 00:37:35,279
time okay

941
00:37:32,079 --> 00:37:35,280
and now

942
00:37:35,359 --> 00:37:41,200
i can show you a demo if i'm still

943
00:37:38,800 --> 00:37:41,200
allowed

944
00:37:42,480 --> 00:37:48,000
if not questions hurry up

945
00:37:45,760 --> 00:37:48,000
okay

946
00:37:49,680 --> 00:37:56,560
oh that's fine we'll stay

947
00:37:52,880 --> 00:37:56,560
so let me

948
00:37:59,359 --> 00:38:05,839
trying to

949
00:38:07,359 --> 00:38:09,680
okay

950
00:38:12,800 --> 00:38:16,160
where is firefox

951
00:38:16,560 --> 00:38:23,040
okay i tried to load this a while ago

952
00:38:19,920 --> 00:38:23,040
to see if it would work

953
00:38:23,520 --> 00:38:27,280
this is the game uh the video link is on

954
00:38:26,640 --> 00:38:30,400
the page

955
00:38:27,280 --> 00:38:31,440
okay this is the me playing the game in

956
00:38:30,400 --> 00:38:36,400
the

957
00:38:31,440 --> 00:38:36,400
the spectrum version okay

958
00:38:37,040 --> 00:38:42,640
the idea is if you can see

959
00:38:40,880 --> 00:38:44,240
there is actually you see the balls

960
00:38:42,640 --> 00:38:46,960
going up and down

961
00:38:44,240 --> 00:38:49,680
although the video kodak is actually

962
00:38:46,960 --> 00:38:52,000
messing that a little bit

963
00:38:49,680 --> 00:38:54,640
but you can see that the the application

964
00:38:52,000 --> 00:38:58,400
is actually running at 50 hertz

965
00:38:54,640 --> 00:39:01,440
and with some time to spare at the end

966
00:38:58,400 --> 00:39:03,520
okay this works in in a

967
00:39:01,440 --> 00:39:04,800
single place when you have more columns

968
00:39:03,520 --> 00:39:07,599
and you have also the sec

969
00:39:04,800 --> 00:39:09,839
the two-player play and it works like

970
00:39:07,599 --> 00:39:09,839
this

971
00:39:10,079 --> 00:39:15,839
and that's it thank you very much

972
00:39:22,880 --> 00:39:31,060
any questions

973
00:39:27,950 --> 00:39:31,060
[Music]

974
00:39:33,760 --> 00:39:40,880
uh it's a used it's a huge source code

975
00:39:37,760 --> 00:39:44,000
and uh it's not worth it

976
00:39:40,880 --> 00:39:47,599
although i got a lot of the

977
00:39:44,000 --> 00:39:49,440
screen graphics as uh

978
00:39:47,599 --> 00:39:51,520
as a base to work the graphics on the

979
00:39:49,440 --> 00:39:53,680
spectrum but the code is huge there is

980
00:39:51,520 --> 00:39:53,680
no

981
00:39:55,200 --> 00:39:58,960
doing this documentation there's no

982
00:39:56,240 --> 00:40:01,200
existing tooling to extract

983
00:39:58,960 --> 00:40:02,000
well there is but you you're gonna take

984
00:40:01,200 --> 00:40:05,680
some time

985
00:40:02,000 --> 00:40:10,400
to actually do that it's possible

986
00:40:05,680 --> 00:40:18,319
but it's not easy it's hard

987
00:40:10,400 --> 00:40:18,319
thank you

