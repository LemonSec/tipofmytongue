1
00:00:14,160 --> 00:00:18,240
okay

2
00:00:14,559 --> 00:00:20,400
thank you um hi my name is macbeth

3
00:00:18,240 --> 00:00:23,278
uh i work for a company called clix we

4
00:00:20,400 --> 00:00:26,640
build a web search engine and a browser

5
00:00:23,279 --> 00:00:28,320
uh fork of firefox

6
00:00:26,640 --> 00:00:31,760
i usually work on privacy but i'm gonna

7
00:00:28,320 --> 00:00:33,360
talk about something else today

8
00:00:31,760 --> 00:00:34,800
and that is that protocol in the browser

9
00:00:33,360 --> 00:00:36,320
so this is something we've been

10
00:00:34,800 --> 00:00:39,280
experimenting with on the side

11
00:00:36,320 --> 00:00:40,239
um what can the browser bring to empower

12
00:00:39,280 --> 00:00:42,079
users

13
00:00:40,239 --> 00:00:43,360
and we're quite inspired by the beaker

14
00:00:42,079 --> 00:00:46,879
browser which is the electron

15
00:00:43,360 --> 00:00:50,160
based browser that put the dap protocol

16
00:00:46,879 --> 00:00:51,920
inside it so this is kind of a story of

17
00:00:50,160 --> 00:00:55,199
the process of trying to get

18
00:00:51,920 --> 00:00:58,719
this idea so put a d web protocol

19
00:00:55,199 --> 00:01:00,480
inside firefox

20
00:00:58,719 --> 00:01:02,719
so firstly what why do you actually want

21
00:01:00,480 --> 00:01:05,280
to put uh deweb protocols

22
00:01:02,719 --> 00:01:06,080
in the browser so why is dweb good for

23
00:01:05,280 --> 00:01:07,920
the web

24
00:01:06,080 --> 00:01:10,840
i'm going to give a few examples there

25
00:01:07,920 --> 00:01:12,320
are many but a few that are relevant for

26
00:01:10,840 --> 00:01:14,880
that

27
00:01:12,320 --> 00:01:15,839
um so the first the kind of biggest

28
00:01:14,880 --> 00:01:18,399
thing is that

29
00:01:15,840 --> 00:01:19,840
you get rid of servers so in the case of

30
00:01:18,400 --> 00:01:22,400
dat i can just

31
00:01:19,840 --> 00:01:24,240
say type in the command line.share some

32
00:01:22,400 --> 00:01:26,159
folder

33
00:01:24,240 --> 00:01:27,360
and then it's going to give me a link

34
00:01:26,159 --> 00:01:29,119
and i can give that to someone else and

35
00:01:27,360 --> 00:01:30,799
they can load my webpage

36
00:01:29,119 --> 00:01:32,000
this is really powerful and if we

37
00:01:30,799 --> 00:01:34,000
integrate that in the browser you could

38
00:01:32,000 --> 00:01:35,280
just have a button to create a website

39
00:01:34,000 --> 00:01:37,280
and you don't need to have any

40
00:01:35,280 --> 00:01:41,840
infrastructure any servers

41
00:01:37,280 --> 00:01:41,840
no man in the middle you have a website

42
00:01:42,640 --> 00:01:46,720
second it's offline by default which is

43
00:01:44,880 --> 00:01:49,199
really handy so

44
00:01:46,720 --> 00:01:50,079
if i've loaded a website i can reload it

45
00:01:49,200 --> 00:01:53,280
without

46
00:01:50,079 --> 00:01:55,119
internet this is super useful and

47
00:01:53,280 --> 00:01:56,399
now the web has lots of mechanisms to

48
00:01:55,119 --> 00:01:59,280
try to

49
00:01:56,399 --> 00:01:59,920
uh achieve this uh so bring it back on

50
00:01:59,280 --> 00:02:01,520
top of the

51
00:01:59,920 --> 00:02:03,040
normal web stack with service workers

52
00:02:01,520 --> 00:02:04,079
and all this but this is really

53
00:02:03,040 --> 00:02:08,239
complicated the

54
00:02:04,079 --> 00:02:10,160
d-web just does this by default

55
00:02:08,239 --> 00:02:11,360
um it's also super transparent so we're

56
00:02:10,160 --> 00:02:14,000
familiar with

57
00:02:11,360 --> 00:02:16,000
um with view source on the web you can

58
00:02:14,000 --> 00:02:18,959
look at all the front-end code

59
00:02:16,000 --> 00:02:20,560
but if there's no servers there is no

60
00:02:18,959 --> 00:02:22,480
back-end code that you

61
00:02:20,560 --> 00:02:23,920
usually can't see it actually all has to

62
00:02:22,480 --> 00:02:26,799
be

63
00:02:23,920 --> 00:02:28,160
inside the front end source code so you

64
00:02:26,800 --> 00:02:31,120
can view source

65
00:02:28,160 --> 00:02:31,120
of the server as well

66
00:02:32,239 --> 00:02:36,239
um it's also self archiving so if you

67
00:02:34,480 --> 00:02:39,280
take a

68
00:02:36,239 --> 00:02:40,640
dash example and there's this api called

69
00:02:39,280 --> 00:02:44,080
data archive

70
00:02:40,640 --> 00:02:45,679
um and i can open some address and i can

71
00:02:44,080 --> 00:02:46,560
just look at the history of edits to

72
00:02:45,680 --> 00:02:48,080
that page

73
00:02:46,560 --> 00:02:49,680
and also i can request a specific

74
00:02:48,080 --> 00:02:51,760
version so you can have proper

75
00:02:49,680 --> 00:02:52,720
permalinks which are permanent because

76
00:02:51,760 --> 00:02:54,879
they are

77
00:02:52,720 --> 00:02:57,440
to a fixed version that will not will

78
00:02:54,879 --> 00:02:57,440
not change

79
00:02:58,480 --> 00:03:04,560
um so quick intro on what that is

80
00:03:02,480 --> 00:03:05,840
so that is a protocol that was developed

81
00:03:04,560 --> 00:03:09,040
a few years ago

82
00:03:05,840 --> 00:03:12,159
firstly uh with the intention of um

83
00:03:09,040 --> 00:03:13,599
aiding data sharing in academia between

84
00:03:12,159 --> 00:03:16,319
research groups

85
00:03:13,599 --> 00:03:17,280
um and as i mentioned the beaker browser

86
00:03:16,319 --> 00:03:18,799
kind of

87
00:03:17,280 --> 00:03:21,280
gave a bit more attention for the web

88
00:03:18,800 --> 00:03:24,640
use case with their

89
00:03:21,280 --> 00:03:24,640
with their browser a couple of years ago

90
00:03:25,440 --> 00:03:28,959
we can describe it as basically file

91
00:03:27,120 --> 00:03:31,200
space based single writer data

92
00:03:28,959 --> 00:03:33,519
synchronization protocol

93
00:03:31,200 --> 00:03:34,879
so there's a cli you can install with

94
00:03:33,519 --> 00:03:36,640
npm

95
00:03:34,879 --> 00:03:39,040
and then just type that shares and

96
00:03:36,640 --> 00:03:41,040
folder this gives you

97
00:03:39,040 --> 00:03:43,120
an address on the network and then on

98
00:03:41,040 --> 00:03:44,400
any other computer in the world i can

99
00:03:43,120 --> 00:03:46,159
just write this

100
00:03:44,400 --> 00:03:48,560
and it's going to pull the data directly

101
00:03:46,159 --> 00:03:48,560
off me

102
00:03:51,680 --> 00:03:56,480
um underneath there's two main

103
00:03:53,760 --> 00:03:58,959
components of the dat stack

104
00:03:56,480 --> 00:04:00,560
there's data structure which is in the

105
00:03:58,959 --> 00:04:04,640
hyperdrive module

106
00:04:00,560 --> 00:04:04,640
and peer discovery in discovery swarm

107
00:04:05,200 --> 00:04:09,439
uh so what is hyperdrive this is a file

108
00:04:07,360 --> 00:04:10,400
like abstraction on top of append only

109
00:04:09,439 --> 00:04:12,000
logs

110
00:04:10,400 --> 00:04:14,879
so underneath you have these append only

111
00:04:12,000 --> 00:04:14,879
logs which gives you

112
00:04:15,040 --> 00:04:19,039
the verification of that only one person

113
00:04:17,440 --> 00:04:22,160
can write this data

114
00:04:19,040 --> 00:04:25,520
and the file like abstraction is nice is

115
00:04:22,160 --> 00:04:26,479
a good high level way of organizing the

116
00:04:25,520 --> 00:04:29,120
data

117
00:04:26,479 --> 00:04:30,400
so the way this works is i can just so

118
00:04:29,120 --> 00:04:33,840
the top snippet i just

119
00:04:30,400 --> 00:04:37,120
create a drive on top of some storage um

120
00:04:33,840 --> 00:04:38,479
and then i can use simple file commands

121
00:04:37,120 --> 00:04:42,080
like write file

122
00:04:38,479 --> 00:04:45,199
um but this drive also has a key

123
00:04:42,080 --> 00:04:46,960
which is this address of the data

124
00:04:45,199 --> 00:04:48,720
and then this magic method called

125
00:04:46,960 --> 00:04:50,000
replicate

126
00:04:48,720 --> 00:04:52,479
so i call this method it's going to give

127
00:04:50,000 --> 00:04:53,680
me a stream

128
00:04:52,479 --> 00:04:56,560
now what i can do is on a different

129
00:04:53,680 --> 00:04:59,680
device i can create

130
00:04:56,560 --> 00:05:02,720
a new hyperdrive and

131
00:04:59,680 --> 00:05:05,039
use this key that the first one that was

132
00:05:02,720 --> 00:05:08,560
generated in the first hyperdrive

133
00:05:05,039 --> 00:05:11,919
um and now what i just need to do is get

134
00:05:08,560 --> 00:05:14,800
this other stream so this could be um

135
00:05:11,919 --> 00:05:15,280
over a socket or any other kind of way

136
00:05:14,800 --> 00:05:18,560
of

137
00:05:15,280 --> 00:05:20,000
piping data between two devices uh and i

138
00:05:18,560 --> 00:05:20,479
pipe these two replication streams

139
00:05:20,000 --> 00:05:22,880
together

140
00:05:20,479 --> 00:05:24,080
and now my data is replicated so i can

141
00:05:22,880 --> 00:05:26,800
now call

142
00:05:24,080 --> 00:05:27,919
make api calls on my hyperdrive and

143
00:05:26,800 --> 00:05:30,720
retrieve this data

144
00:05:27,919 --> 00:05:30,719
from the other peer

145
00:05:32,560 --> 00:05:37,680
discovery swarm is for connecting to

146
00:05:36,000 --> 00:05:39,919
peers for a topic

147
00:05:37,680 --> 00:05:41,840
so i have a swarm and i just give some

148
00:05:39,919 --> 00:05:44,159
topic name

149
00:05:41,840 --> 00:05:44,960
it doesn't matter what and then it's

150
00:05:44,160 --> 00:05:47,520
just going to

151
00:05:44,960 --> 00:05:48,799
give me events with connections to other

152
00:05:47,520 --> 00:05:52,080
peers

153
00:05:48,800 --> 00:05:54,800
very simple behind the scenes this works

154
00:05:52,080 --> 00:05:57,919
on a few different things like dht and

155
00:05:54,800 --> 00:05:57,919
mdns discovery

156
00:06:02,080 --> 00:06:07,840
um so yeah so we just put these two

157
00:06:04,560 --> 00:06:07,840
things together

158
00:06:11,280 --> 00:06:14,400
um yeah so we just put these things

159
00:06:13,280 --> 00:06:16,239
together

160
00:06:14,400 --> 00:06:17,840
so what the hyperdrive has is what's

161
00:06:16,240 --> 00:06:19,039
called a discovery key which is a key

162
00:06:17,840 --> 00:06:22,318
derived from the

163
00:06:19,039 --> 00:06:24,560
actual address key this

164
00:06:22,319 --> 00:06:26,960
means that your actual address is hidden

165
00:06:24,560 --> 00:06:29,039
from the network

166
00:06:26,960 --> 00:06:30,080
so i join and then i'll get a connection

167
00:06:29,039 --> 00:06:35,840
from another peer

168
00:06:30,080 --> 00:06:35,840
and then i do this replication piping

169
00:06:36,400 --> 00:06:40,159
okay so moving to how to uh implement

170
00:06:39,600 --> 00:06:43,600
that

171
00:06:40,160 --> 00:06:45,039
in firefox um so what we're aiming for

172
00:06:43,600 --> 00:06:46,880
is basically that you can have in the

173
00:06:45,039 --> 00:06:48,560
url bar just put an address in

174
00:06:46,880 --> 00:06:51,680
that is a data address and the browser

175
00:06:48,560 --> 00:06:51,680
is going to load it like a web page

176
00:06:52,240 --> 00:06:55,520
so there's kind of two requirements that

177
00:06:54,319 --> 00:06:57,680
come out of this

178
00:06:55,520 --> 00:06:58,560
um first we want to actually run the dot

179
00:06:57,680 --> 00:07:00,720
network code

180
00:06:58,560 --> 00:07:04,240
in the browser this at the moment is all

181
00:07:00,720 --> 00:07:05,520
implemented in in node.js

182
00:07:04,240 --> 00:07:07,680
and secondly you want to make the

183
00:07:05,520 --> 00:07:09,198
browser understand that data is a

184
00:07:07,680 --> 00:07:10,160
protocol that should be handled by this

185
00:07:09,199 --> 00:07:15,919
bit of code

186
00:07:10,160 --> 00:07:17,039
that we're running with the dat network

187
00:07:15,919 --> 00:07:19,198
so firstly you think

188
00:07:17,039 --> 00:07:20,240
where do i implement something like that

189
00:07:19,199 --> 00:07:22,720
in a

190
00:07:20,240 --> 00:07:24,400
in a browser like firefox so first

191
00:07:22,720 --> 00:07:26,400
option we might say native code this is

192
00:07:24,400 --> 00:07:27,840
obviously where the http https

193
00:07:26,400 --> 00:07:31,198
implementations

194
00:07:27,840 --> 00:07:32,239
are at the moment which would be

195
00:07:31,199 --> 00:07:33,759
possible

196
00:07:32,240 --> 00:07:37,120
but there's a few challenges there so

197
00:07:33,759 --> 00:07:39,120
firstly the um

198
00:07:37,120 --> 00:07:40,560
native code in firefox is very

199
00:07:39,120 --> 00:07:45,199
complicated

200
00:07:40,560 --> 00:07:46,879
is extremely high velocity project

201
00:07:45,199 --> 00:07:48,879
and we have to interface with node.js

202
00:07:46,879 --> 00:07:50,960
anyway which

203
00:07:48,879 --> 00:07:52,560
would be tricky uh to link up with the

204
00:07:50,960 --> 00:07:54,638
existing c plus plus

205
00:07:52,560 --> 00:07:56,879
so at least for the first step for

206
00:07:54,639 --> 00:08:00,720
prototyping this this is

207
00:07:56,879 --> 00:08:02,080
not a good approach um so secondly we

208
00:08:00,720 --> 00:08:03,840
could do a web extension so web

209
00:08:02,080 --> 00:08:06,159
extensions are standardized

210
00:08:03,840 --> 00:08:08,878
uh apis for extending browser

211
00:08:06,160 --> 00:08:12,160
functionality

212
00:08:08,879 --> 00:08:15,520
um this is this is the first attempt um

213
00:08:12,160 --> 00:08:16,960
project is called datfox with that in a

214
00:08:15,520 --> 00:08:19,520
web extension

215
00:08:16,960 --> 00:08:21,198
um and the reason i think this is

216
00:08:19,520 --> 00:08:22,479
possible is because there's this api in

217
00:08:21,199 --> 00:08:24,960
web extension

218
00:08:22,479 --> 00:08:26,400
where you can declare a protocol handler

219
00:08:24,960 --> 00:08:29,280
and they also

220
00:08:26,400 --> 00:08:30,239
mozilla whitelisted these dweb protocols

221
00:08:29,280 --> 00:08:31,840
so you can have

222
00:08:30,240 --> 00:08:34,240
a protocol called that and you can

223
00:08:31,840 --> 00:08:36,240
register it

224
00:08:34,240 --> 00:08:39,039
and this is how you declare it in your

225
00:08:36,240 --> 00:08:39,039
manifest file

226
00:08:39,120 --> 00:08:42,399
but you can see the problem here so the

227
00:08:40,559 --> 00:08:43,760
last thing we have here is a uri

228
00:08:42,399 --> 00:08:46,959
template

229
00:08:43,760 --> 00:08:47,439
this is both specifying uh where to go

230
00:08:46,959 --> 00:08:51,040
if i

231
00:08:47,440 --> 00:08:52,560
if i get adapt url um where to redirect

232
00:08:51,040 --> 00:08:54,319
it to

233
00:08:52,560 --> 00:08:57,518
um so this is just a protocol switch

234
00:08:54,320 --> 00:08:57,519
it's not a protocol handler

235
00:08:59,120 --> 00:09:03,600
and because i can only switch to http

236
00:09:01,839 --> 00:09:06,170
and i cannot run a http

237
00:09:03,600 --> 00:09:07,760
server inside the browser extension

238
00:09:06,170 --> 00:09:09,599
[Music]

239
00:09:07,760 --> 00:09:11,600
i can't actually serve this request

240
00:09:09,600 --> 00:09:14,560
content from the browser

241
00:09:11,600 --> 00:09:15,839
um so even if i could do the first

242
00:09:14,560 --> 00:09:19,119
requirement of running that

243
00:09:15,839 --> 00:09:23,040
in the extension i cannot link it up

244
00:09:19,120 --> 00:09:24,720
with the protocol um

245
00:09:23,040 --> 00:09:27,120
despite that we have there is an

246
00:09:24,720 --> 00:09:29,920
extension you can install for firefox

247
00:09:27,120 --> 00:09:31,600
um but what it does is it requires you

248
00:09:29,920 --> 00:09:35,040
to install a secondary

249
00:09:31,600 --> 00:09:37,920
uh executable and node.js process

250
00:09:35,040 --> 00:09:39,839
which will then do the that part so we

251
00:09:37,920 --> 00:09:43,439
read out we do some

252
00:09:39,839 --> 00:09:46,560
tricks with with proxying so that when

253
00:09:43,440 --> 00:09:48,320
this initial redirect happens

254
00:09:46,560 --> 00:09:50,800
the extension picks it up and roots it

255
00:09:48,320 --> 00:09:53,600
via this helper process to load data

256
00:09:50,800 --> 00:09:53,599
from the dat network

257
00:09:54,320 --> 00:09:57,440
and the image doesn't work

258
00:09:59,360 --> 00:10:06,720
but this so this works okay um

259
00:10:04,320 --> 00:10:08,959
but a few issues here so the that

260
00:10:06,720 --> 00:10:11,440
protocol is not displayed in the ul by

261
00:10:08,959 --> 00:10:13,518
it says http

262
00:10:11,440 --> 00:10:14,959
um it's also a bit cumbersome to install

263
00:10:13,519 --> 00:10:18,079
because you have to

264
00:10:14,959 --> 00:10:19,680
download this extra process and

265
00:10:18,079 --> 00:10:22,399
some manifests have to be set to link

266
00:10:19,680 --> 00:10:23,760
these things together

267
00:10:22,399 --> 00:10:25,200
also there's some quirks with this

268
00:10:23,760 --> 00:10:27,200
protocol implementation because it's not

269
00:10:25,200 --> 00:10:29,120
designed for this use case

270
00:10:27,200 --> 00:10:31,360
so it only works on top level loads if i

271
00:10:29,120 --> 00:10:33,920
have a absolute

272
00:10:31,360 --> 00:10:36,880
url for um an image or something it's

273
00:10:33,920 --> 00:10:36,880
not going to load properly

274
00:10:39,519 --> 00:10:42,880
so is there some other something else we

275
00:10:41,200 --> 00:10:47,839
can do to

276
00:10:42,880 --> 00:10:47,839
get a better integration

277
00:10:48,160 --> 00:10:53,839
well actually there's so in

278
00:10:51,279 --> 00:10:54,800
firefox there's this these uh so-called

279
00:10:53,839 --> 00:10:57,360
experimental

280
00:10:54,800 --> 00:10:58,240
apis which are the way you implement a

281
00:10:57,360 --> 00:11:01,440
new

282
00:10:58,240 --> 00:11:03,360
web extension api um

283
00:11:01,440 --> 00:11:06,320
and about a year and a half ago there's

284
00:11:03,360 --> 00:11:09,440
uh some mozillians who came up with this

285
00:11:06,320 --> 00:11:12,720
project called lib dweb and

286
00:11:09,440 --> 00:11:13,760
these this were experimental api

287
00:11:12,720 --> 00:11:16,880
implementations

288
00:11:13,760 --> 00:11:19,040
designed to aid uh or

289
00:11:16,880 --> 00:11:20,560
help people build lib d web uh build

290
00:11:19,040 --> 00:11:23,319
d-web applications

291
00:11:20,560 --> 00:11:25,680
or d-web extensions and this has

292
00:11:23,320 --> 00:11:29,200
implementations for protocol handlers

293
00:11:25,680 --> 00:11:32,399
tcp sockets udp sockets and so on

294
00:11:29,200 --> 00:11:34,240
um so what this looks like for example

295
00:11:32,399 --> 00:11:36,480
for protocol handler i can just write

296
00:11:34,240 --> 00:11:38,480
this in my extension code

297
00:11:36,480 --> 00:11:39,839
register protocol and directly have a

298
00:11:38,480 --> 00:11:43,680
handler there so this is

299
00:11:39,839 --> 00:11:45,839
exactly what we need likewise i can just

300
00:11:43,680 --> 00:11:49,760
create tcp sockets and send

301
00:11:45,839 --> 00:11:51,360
data across so now we have all of the

302
00:11:49,760 --> 00:11:53,200
kind of fundamental requirements to do

303
00:11:51,360 --> 00:11:57,839
what we want to do which is run

304
00:11:53,200 --> 00:11:57,839
everything inside the extension

305
00:11:58,560 --> 00:12:03,279
but there's some kind of still some dots

306
00:12:01,760 --> 00:12:06,079
to be joined

307
00:12:03,279 --> 00:12:07,839
um because so in the discovery swarm

308
00:12:06,079 --> 00:12:09,680
module somewhere deep in the dependency

309
00:12:07,839 --> 00:12:11,920
tree we just have

310
00:12:09,680 --> 00:12:13,920
some module that does require net or

311
00:12:11,920 --> 00:12:15,839
required dgram so

312
00:12:13,920 --> 00:12:17,680
they just expect these node.js apis to

313
00:12:15,839 --> 00:12:19,920
be there

314
00:12:17,680 --> 00:12:21,760
so we have to make that link to kind of

315
00:12:19,920 --> 00:12:24,880
give an alternative implementation so

316
00:12:21,760 --> 00:12:27,920
you can use that instead

317
00:12:24,880 --> 00:12:30,720
um so this is a

318
00:12:27,920 --> 00:12:32,160
library called uh lib d webify that i

319
00:12:30,720 --> 00:12:34,480
put together but

320
00:12:32,160 --> 00:12:35,839
the this was helped a lot by

321
00:12:34,480 --> 00:12:38,560
contributions in the community

322
00:12:35,839 --> 00:12:39,920
because people came up with a shim

323
00:12:38,560 --> 00:12:42,239
implementation of

324
00:12:39,920 --> 00:12:43,599
net and dram on top of these lib d web

325
00:12:42,240 --> 00:12:45,279
apis

326
00:12:43,600 --> 00:12:46,959
and we can put that all together into a

327
00:12:45,279 --> 00:12:50,399
browser five plugin

328
00:12:46,959 --> 00:12:52,479
so what browser file usually does is

329
00:12:50,399 --> 00:12:54,240
sees these car node libraries and

330
00:12:52,480 --> 00:12:56,399
replaces them with shims

331
00:12:54,240 --> 00:12:57,760
and things like net would just have an

332
00:12:56,399 --> 00:12:59,680
empty shim

333
00:12:57,760 --> 00:13:01,360
um what this does is it instead of

334
00:12:59,680 --> 00:13:02,560
replacing with the empty shim uses these

335
00:13:01,360 --> 00:13:06,320
new ones

336
00:13:02,560 --> 00:13:09,279
to uh to give this extra functionality

337
00:13:06,320 --> 00:13:09,279
on top of these apis

338
00:13:11,519 --> 00:13:15,200
so yeah this is a extension called

339
00:13:13,839 --> 00:13:18,959
webext

340
00:13:15,200 --> 00:13:21,839
um which does this so it loads

341
00:13:18,959 --> 00:13:23,199
dash web pages and it has the protocol

342
00:13:21,839 --> 00:13:24,959
correct and is loading everything

343
00:13:23,200 --> 00:13:28,800
internally in the browser so

344
00:13:24,959 --> 00:13:30,399
now that instead of running on v8 inside

345
00:13:28,800 --> 00:13:35,839
node.js it's running

346
00:13:30,399 --> 00:13:35,839
on spidermonkey inside firefox

347
00:13:36,880 --> 00:13:40,560
so yeah so now we have native like

348
00:13:38,320 --> 00:13:43,519
protocol support

349
00:13:40,560 --> 00:13:45,040
and we run the full stack there's also

350
00:13:43,519 --> 00:13:46,480
some other nice benefits that

351
00:13:45,040 --> 00:13:48,079
actually this data is in the user

352
00:13:46,480 --> 00:13:49,279
profile directory so we're not just

353
00:13:48,079 --> 00:13:52,399
storing it's a random

354
00:13:49,279 --> 00:13:55,600
other place keeps people's data

355
00:13:52,399 --> 00:13:57,760
separate we also found that so the new

356
00:13:55,600 --> 00:13:59,920
um

357
00:13:57,760 --> 00:14:01,600
android webview implementation based on

358
00:13:59,920 --> 00:14:03,040
gecko called geckoview

359
00:14:01,600 --> 00:14:06,880
you can also run this in that and then

360
00:14:03,040 --> 00:14:06,880
you have support on mobile

361
00:14:07,360 --> 00:14:11,760
but there's one main disadvantage is

362
00:14:09,519 --> 00:14:12,160
that for these experimental apis you

363
00:14:11,760 --> 00:14:15,199
need

364
00:14:12,160 --> 00:14:16,639
privileged context so you need to be

365
00:14:15,199 --> 00:14:18,719
signed especially to say you're allowed

366
00:14:16,639 --> 00:14:20,480
to use apis

367
00:14:18,720 --> 00:14:22,160
this means that this cannot be offered

368
00:14:20,480 --> 00:14:24,880
on the add-on store has to be bundled

369
00:14:22,160 --> 00:14:24,880
with a browser

370
00:14:27,519 --> 00:14:30,560
but luckily as i mentioned at the start

371
00:14:29,040 --> 00:14:33,920
i work for a company who does

372
00:14:30,560 --> 00:14:35,518
build a browser um so

373
00:14:33,920 --> 00:14:37,680
we're currently offering this in beta

374
00:14:35,519 --> 00:14:39,120
but soon to be on release of the clix

375
00:14:37,680 --> 00:14:41,680
browser

376
00:14:39,120 --> 00:14:43,279
um and also an upcoming new version of

377
00:14:41,680 --> 00:14:46,319
the android browser would have this

378
00:14:43,279 --> 00:14:46,320
we'll have this in as well

379
00:14:46,959 --> 00:14:51,279
um so i'd do a quick demo so if you've

380
00:14:50,160 --> 00:14:53,519
noticed that i'm

381
00:14:51,279 --> 00:14:54,639
running these slides in the browser in

382
00:14:53,519 --> 00:14:58,240
on adapt page

383
00:14:54,639 --> 00:15:01,120
if you have a that browser or

384
00:14:58,240 --> 00:15:01,839
um just want to i'll just have the um

385
00:15:01,120 --> 00:15:03,920
cli

386
00:15:01,839 --> 00:15:06,639
you can just download this and see

387
00:15:03,920 --> 00:15:11,040
what's happening at the same time

388
00:15:06,639 --> 00:15:13,839
but yeah so this is the web so i can um

389
00:15:11,040 --> 00:15:14,560
i can inspect and i can run commands in

390
00:15:13,839 --> 00:15:17,120
the page

391
00:15:14,560 --> 00:15:19,119
so i mentioned at the top this um that

392
00:15:17,120 --> 00:15:21,040
archive api that uh

393
00:15:19,120 --> 00:15:24,160
was created in beaker browser as a way

394
00:15:21,040 --> 00:15:24,160
of allowing sites to

395
00:15:24,320 --> 00:15:30,800
modify themselves essentially using uh

396
00:15:27,760 --> 00:15:33,439
that front that commands

397
00:15:30,800 --> 00:15:35,040
so we can all do that you can also do

398
00:15:33,440 --> 00:15:36,639
that here is that big enough

399
00:15:35,040 --> 00:15:40,639
so i can create this that archive for

400
00:15:36,639 --> 00:15:42,800
this current page that i'm on

401
00:15:40,639 --> 00:15:45,440
and i can get some info about the

402
00:15:42,800 --> 00:15:47,120
current site that i'm loading

403
00:15:45,440 --> 00:15:49,519
you see there's some some metadata about

404
00:15:47,120 --> 00:15:51,040
the site so it has this address so this

405
00:15:49,519 --> 00:15:54,800
is the actual address of the

406
00:15:51,040 --> 00:15:57,839
dash item on this is the amount of

407
00:15:54,800 --> 00:15:59,439
data for the whole thing um

408
00:15:57,839 --> 00:16:01,519
and then what's important is this thing

409
00:15:59,440 --> 00:16:03,120
so this is owner is true

410
00:16:01,519 --> 00:16:04,720
this means that on this device i have

411
00:16:03,120 --> 00:16:07,600
the private key

412
00:16:04,720 --> 00:16:10,079
for this that archive which means i can

413
00:16:07,600 --> 00:16:10,079
write it

414
00:16:11,279 --> 00:16:13,439
so

415
00:16:16,079 --> 00:16:21,120
as i can write it i can just call right

416
00:16:19,040 --> 00:16:24,639
file

417
00:16:21,120 --> 00:16:27,920
and write a new file in so now if i

418
00:16:24,639 --> 00:16:31,519
go to a new page well

419
00:16:27,920 --> 00:16:36,639
so this file i just wrote

420
00:16:31,519 --> 00:16:39,040
but i can also

421
00:16:36,639 --> 00:16:40,639
also delete it obviously and now for

422
00:16:39,040 --> 00:16:43,599
refresh

423
00:16:40,639 --> 00:16:44,079
it's gone and if you were syncing you

424
00:16:43,600 --> 00:16:46,160
would be

425
00:16:44,079 --> 00:16:48,839
get to get these changes in real time uh

426
00:16:46,160 --> 00:16:51,839
from my device

427
00:16:48,839 --> 00:16:51,839
um

428
00:16:54,639 --> 00:16:58,079
uh yeah and also we have history of

429
00:16:56,720 --> 00:17:00,720
course

430
00:16:58,079 --> 00:17:02,959
so you can see a list all of all the

431
00:17:00,720 --> 00:17:04,480
edits i've made to this page

432
00:17:02,959 --> 00:17:07,198
so you see i tested out the demo a few

433
00:17:04,480 --> 00:17:07,199
times beforehand

434
00:17:08,079 --> 00:17:11,119
but then i can show that we have this

435
00:17:10,160 --> 00:17:14,319
idea of version

436
00:17:11,119 --> 00:17:17,359
urls as well so at this version this

437
00:17:14,319 --> 00:17:19,599
file doesn't exist anymore but it

438
00:17:17,359 --> 00:17:22,079
existed in a previous version

439
00:17:19,599 --> 00:17:24,559
so i can just put the version number in

440
00:17:22,079 --> 00:17:24,559
the url

441
00:17:24,880 --> 00:17:27,919
or which version was it

442
00:17:28,799 --> 00:17:34,320
okay so at version 38 this file existed

443
00:17:32,559 --> 00:17:35,760
so now this is a permanent link to this

444
00:17:34,320 --> 00:17:38,080
version of this file which will never

445
00:17:35,760 --> 00:17:38,080
change

446
00:17:41,919 --> 00:17:44,160
okay

447
00:17:45,760 --> 00:17:49,679
all right so what are the next steps so

448
00:17:47,679 --> 00:17:53,440
we

449
00:17:49,679 --> 00:17:55,919
um got reasonable support so far

450
00:17:53,440 --> 00:17:58,080
um but there are a few challenges coming

451
00:17:55,919 --> 00:17:59,600
up so

452
00:17:58,080 --> 00:18:02,559
the first major thing is we want to try

453
00:17:59,600 --> 00:18:05,120
to upstream lib d-web

454
00:18:02,559 --> 00:18:06,799
because it's outside firefox core but

455
00:18:05,120 --> 00:18:07,600
the implementations the experimental

456
00:18:06,799 --> 00:18:09,360
apis use

457
00:18:07,600 --> 00:18:10,879
internal firefox apis which are

458
00:18:09,360 --> 00:18:13,199
constantly changing

459
00:18:10,880 --> 00:18:16,000
so this is quite a maintenance burden to

460
00:18:13,200 --> 00:18:19,679
keep having to fix this with

461
00:18:16,000 --> 00:18:22,240
every other firefox version

462
00:18:19,679 --> 00:18:23,440
so take one example this service

463
00:18:22,240 --> 00:18:26,480
discovery

464
00:18:23,440 --> 00:18:29,039
implementation libdyweb the

465
00:18:26,480 --> 00:18:30,480
cloud internal class it used was just

466
00:18:29,039 --> 00:18:32,000
removed from firefox a couple of

467
00:18:30,480 --> 00:18:34,880
versions ago

468
00:18:32,000 --> 00:18:35,600
um because there was no test that says

469
00:18:34,880 --> 00:18:37,120
this is

470
00:18:35,600 --> 00:18:39,520
we need to keep this so they thought oh

471
00:18:37,120 --> 00:18:41,840
i'll just clean out this old stuff

472
00:18:39,520 --> 00:18:43,200
so now's the ticket to bring it back but

473
00:18:41,840 --> 00:18:44,159
this is the kind of thing we can avoid

474
00:18:43,200 --> 00:18:47,679
by upstreaming this

475
00:18:44,160 --> 00:18:49,280
into the into mozilla central so that

476
00:18:47,679 --> 00:18:53,440
they will have tests for this and

477
00:18:49,280 --> 00:18:53,440
these will these apis will keep working

478
00:18:55,360 --> 00:18:59,360
um there's also some improvements to do

479
00:18:56,960 --> 00:19:02,559
in the protocol handler integration so

480
00:18:59,360 --> 00:19:07,280
um because

481
00:19:02,559 --> 00:19:09,440
the browser is not so um

482
00:19:07,280 --> 00:19:10,320
this implementation is is kind of a bit

483
00:19:09,440 --> 00:19:14,720
of a

484
00:19:10,320 --> 00:19:18,080
hack and it mostly works for most

485
00:19:14,720 --> 00:19:18,799
most parts of html and javascript but

486
00:19:18,080 --> 00:19:20,559
it's

487
00:19:18,799 --> 00:19:23,039
the browser doesn't understand it

488
00:19:20,559 --> 00:19:24,879
necessarily as a http page and certain

489
00:19:23,039 --> 00:19:25,919
elements break and certain storages

490
00:19:24,880 --> 00:19:28,640
break

491
00:19:25,919 --> 00:19:29,679
um so that's something needs to be fixed

492
00:19:28,640 --> 00:19:31,440
um

493
00:19:29,679 --> 00:19:33,280
also we don't have control over other

494
00:19:31,440 --> 00:19:35,600
parts of the experience so

495
00:19:33,280 --> 00:19:36,639
this info bar so the one next to the url

496
00:19:35,600 --> 00:19:38,719
which is meant to show you some

497
00:19:36,640 --> 00:19:41,120
information about the page

498
00:19:38,720 --> 00:19:42,000
we're not yet able to add information

499
00:19:41,120 --> 00:19:43,760
there to

500
00:19:42,000 --> 00:19:45,840
explain what this is what this protocol

501
00:19:43,760 --> 00:19:45,840
is

502
00:19:48,880 --> 00:19:52,799
also so far the dart network has not

503
00:19:50,799 --> 00:19:54,960
been tested at scale

504
00:19:52,799 --> 00:19:55,840
this is something we'd like to do to see

505
00:19:54,960 --> 00:19:58,400
how

506
00:19:55,840 --> 00:19:59,600
this discovery mechanism scales up if

507
00:19:58,400 --> 00:20:01,760
you get

508
00:19:59,600 --> 00:20:02,799
several orders of magnitude more users

509
00:20:01,760 --> 00:20:06,240
on adapt

510
00:20:02,799 --> 00:20:07,120
site and also to test different network

511
00:20:06,240 --> 00:20:11,840
environments so

512
00:20:07,120 --> 00:20:14,239
lots of users will be will be behind

513
00:20:11,840 --> 00:20:14,959
different types of nuts and whether they

514
00:20:14,240 --> 00:20:16,640
can always

515
00:20:14,960 --> 00:20:20,480
escape that and make connections to

516
00:20:16,640 --> 00:20:23,039
other peers

517
00:20:20,480 --> 00:20:24,640
there's also that version two so a new

518
00:20:23,039 --> 00:20:27,919
version of the protocol

519
00:20:24,640 --> 00:20:30,159
is is uh coming up soon and there's some

520
00:20:27,919 --> 00:20:31,440
extra challenges on getting that to work

521
00:20:30,159 --> 00:20:34,000
uh in this context

522
00:20:31,440 --> 00:20:35,600
uh largely because of new crypto that

523
00:20:34,000 --> 00:20:36,720
it's trying to use which is not

524
00:20:35,600 --> 00:20:39,199
doesn't have an implementation for the

525
00:20:36,720 --> 00:20:39,200
web yet

526
00:20:39,760 --> 00:20:43,039
and yeah then we want to build more

527
00:20:41,360 --> 00:20:46,158
things on that so more

528
00:20:43,039 --> 00:20:49,360
applications that users can use to

529
00:20:46,159 --> 00:20:52,080
publish sites or upload things and send

530
00:20:49,360 --> 00:20:52,080
them to their friends

531
00:20:52,640 --> 00:20:56,240
um obviously goes about saying that all

532
00:20:54,400 --> 00:20:58,400
of this stuff is open source so

533
00:20:56,240 --> 00:21:00,320
these are just a load of links to

534
00:20:58,400 --> 00:21:01,039
different projects here so that project

535
00:21:00,320 --> 00:21:04,559
stuff

536
00:21:01,039 --> 00:21:06,158
hyperdrive uh lib d-web

537
00:21:04,559 --> 00:21:08,320
and these extension implementations at

538
00:21:06,159 --> 00:21:09,760
the bottom

539
00:21:08,320 --> 00:21:11,280
uh it didn't all fit on the slides

540
00:21:09,760 --> 00:21:12,640
there's another one which is the browser

541
00:21:11,280 --> 00:21:17,840
but yeah

542
00:21:12,640 --> 00:21:17,840
so thank you any questions

543
00:21:20,240 --> 00:21:31,840
we have five minutes for questions so

544
00:21:23,840 --> 00:21:31,840
almost five

545
00:21:42,000 --> 00:21:46,960
hello thank you for your talk um

546
00:21:45,039 --> 00:21:48,559
so currently beaker browser experienced

547
00:21:46,960 --> 00:21:51,200
many extensions

548
00:21:48,559 --> 00:21:54,080
to the um android garden project with

549
00:21:51,200 --> 00:21:55,840
many more features

550
00:21:54,080 --> 00:21:57,600
the bigger browser gets many more

551
00:21:55,840 --> 00:21:59,760
extensions

552
00:21:57,600 --> 00:22:01,760
regarding the on world garden project is

553
00:21:59,760 --> 00:22:03,360
this will you try to implement this as

554
00:22:01,760 --> 00:22:06,879
well

555
00:22:03,360 --> 00:22:08,959
um yeah we'll have to see um

556
00:22:06,880 --> 00:22:11,120
i'm kind of waiting for when the

557
00:22:08,960 --> 00:22:13,679
finalized version of that comes out

558
00:22:11,120 --> 00:22:14,158
um ideally this would work in user land

559
00:22:13,679 --> 00:22:17,280
so

560
00:22:14,159 --> 00:22:18,880
we just provide the base support um but

561
00:22:17,280 --> 00:22:23,360
we'll see

562
00:22:18,880 --> 00:22:26,000
um also considering exposing kind of

563
00:22:23,360 --> 00:22:26,719
an api so other extensions can also talk

564
00:22:26,000 --> 00:22:28,240
to

565
00:22:26,720 --> 00:22:30,320
this extension to do kind of

566
00:22:28,240 --> 00:22:32,799
peer-to-peer stuff as well

567
00:22:30,320 --> 00:22:36,080
so expose some of the lower level apis

568
00:22:32,799 --> 00:22:38,158
for building applications for that

569
00:22:36,080 --> 00:22:39,520
so i wanted to ask what's the main

570
00:22:38,159 --> 00:22:42,880
difference between that

571
00:22:39,520 --> 00:22:46,000
and ipfs the main difference

572
00:22:42,880 --> 00:22:48,960
yeah any difference because i am i don't

573
00:22:46,000 --> 00:22:50,159
see really what's yeah the difference

574
00:22:48,960 --> 00:22:54,000
basically

575
00:22:50,159 --> 00:22:57,039
okay so one main difference with

576
00:22:54,000 --> 00:22:58,960
that is that um it's

577
00:22:57,039 --> 00:23:01,919
scoped to a particular address so i'd

578
00:22:58,960 --> 00:23:04,080
make one hyperdrive i have this address

579
00:23:01,919 --> 00:23:06,320
and this is a separate individual swarm

580
00:23:04,080 --> 00:23:09,039
so i'll only ever talk to people

581
00:23:06,320 --> 00:23:10,480
for that address ipfs is going for more

582
00:23:09,039 --> 00:23:13,440
global network

583
00:23:10,480 --> 00:23:15,440
um so you put any file in ipfs and you

584
00:23:13,440 --> 00:23:19,440
talk to everyone in the whole network

585
00:23:15,440 --> 00:23:22,480
to tell people that this file is here um

586
00:23:19,440 --> 00:23:24,000
that is also not content addressed

587
00:23:22,480 --> 00:23:25,760
so you just have a key pair as an

588
00:23:24,000 --> 00:23:27,440
address and then you put data into that

589
00:23:25,760 --> 00:23:29,760
folder

590
00:23:27,440 --> 00:23:31,200
ipfs content addresses everything it's

591
00:23:29,760 --> 00:23:33,760
an ipfs

592
00:23:31,200 --> 00:23:35,840
when you put a file in the address for

593
00:23:33,760 --> 00:23:36,720
that file is based on what's in the file

594
00:23:35,840 --> 00:23:38,480
and

595
00:23:36,720 --> 00:23:39,840
this is then immutable so that address

596
00:23:38,480 --> 00:23:42,320
is always that file

597
00:23:39,840 --> 00:23:43,600
but uh dash has this mutability on top

598
00:23:42,320 --> 00:23:46,000
because it's not tied to content

599
00:23:43,600 --> 00:23:46,000
addressing

600
00:23:46,640 --> 00:23:50,400
so i missed one minute of your of your

601
00:23:48,720 --> 00:23:51,440
talk so sorry if you've covered it in

602
00:23:50,400 --> 00:23:52,799
that one minute but

603
00:23:51,440 --> 00:23:54,799
my question is i know there's a

604
00:23:52,799 --> 00:23:57,600
javascript implementation of that

605
00:23:54,799 --> 00:23:58,799
yes yes does it it and but it's marked

606
00:23:57,600 --> 00:24:02,000
as unsupported

607
00:23:58,799 --> 00:24:05,120
how how unsupported is it the the old

608
00:24:02,000 --> 00:24:06,240
one um so there's a few different

609
00:24:05,120 --> 00:24:09,439
approaches

610
00:24:06,240 --> 00:24:12,480
in the dash ecosystem to the web

611
00:24:09,440 --> 00:24:15,279
um so hyperdrive itself

612
00:24:12,480 --> 00:24:16,080
is agnostic of how you find and talk to

613
00:24:15,279 --> 00:24:18,720
other peers

614
00:24:16,080 --> 00:24:19,760
and this has always been browserifiable

615
00:24:18,720 --> 00:24:20,559
so you can always put that in the

616
00:24:19,760 --> 00:24:24,240
browser

617
00:24:20,559 --> 00:24:27,120
um because the networking the discovery

618
00:24:24,240 --> 00:24:28,640
swarm part is tied to being able to open

619
00:24:27,120 --> 00:24:29,840
tcp sockets

620
00:24:28,640 --> 00:24:32,880
uh obviously that doesn't work in the

621
00:24:29,840 --> 00:24:34,080
browser so

622
00:24:32,880 --> 00:24:36,000
then there's a few different ways you

623
00:24:34,080 --> 00:24:39,120
can get around this um

624
00:24:36,000 --> 00:24:41,279
the js was using webrtc

625
00:24:39,120 --> 00:24:42,158
to talk to but then it's in the problem

626
00:24:41,279 --> 00:24:44,320
with that is it's an

627
00:24:42,159 --> 00:24:45,679
incompatible network so you have like

628
00:24:44,320 --> 00:24:47,120
one swarm which is

629
00:24:45,679 --> 00:24:49,520
that in the browser people and then

630
00:24:47,120 --> 00:24:51,199
another swarm which is that node people

631
00:24:49,520 --> 00:24:52,559
and they couldn't talk to each other so

632
00:24:51,200 --> 00:24:54,080
then there's um

633
00:24:52,559 --> 00:24:56,960
a few other approaches you can for

634
00:24:54,080 --> 00:24:58,720
example open a websocket to a gateway

635
00:24:56,960 --> 00:25:00,880
and synchronize data with them and they

636
00:24:58,720 --> 00:25:04,000
can bridge to the rest of the network

637
00:25:00,880 --> 00:25:04,480
um there's also other ones that act as

638
00:25:04,000 --> 00:25:08,000
just

639
00:25:04,480 --> 00:25:11,679
a other types of gateway which just

640
00:25:08,000 --> 00:25:14,880
act as a discovery gateway so

641
00:25:11,679 --> 00:25:17,520
you just stream to this

642
00:25:14,880 --> 00:25:19,039
and they will find other peers and then

643
00:25:17,520 --> 00:25:20,480
proxy their streams so actually that

644
00:25:19,039 --> 00:25:21,360
that gateway doesn't know anything about

645
00:25:20,480 --> 00:25:25,120
what you're

646
00:25:21,360 --> 00:25:27,678
looking at um what we're doing now

647
00:25:25,120 --> 00:25:29,520
in this is doing a combined approach so

648
00:25:27,679 --> 00:25:31,760
because we can do the normal networking

649
00:25:29,520 --> 00:25:34,158
but we can put webrtc alongside it

650
00:25:31,760 --> 00:25:35,840
to help with discovery because sometimes

651
00:25:34,159 --> 00:25:38,080
it doesn't work over sockets

652
00:25:35,840 --> 00:25:39,678
okay thank you very much we do not have

653
00:25:38,080 --> 00:25:43,840
any more time for questions

654
00:25:39,679 --> 00:25:43,840
thank you again for giving this talk

