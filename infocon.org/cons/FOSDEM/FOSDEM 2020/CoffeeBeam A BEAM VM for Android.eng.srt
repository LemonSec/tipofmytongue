1
00:00:04,960 --> 00:00:10,000
the beam enthusiast

2
00:00:06,399 --> 00:00:12,080
since 2007 so uh an og for for the beam

3
00:00:10,000 --> 00:00:13,920
i mean the beam is very old but still

4
00:00:12,080 --> 00:00:16,320
very all-time

5
00:00:13,920 --> 00:00:17,279
enthusiast and uh he will be talking

6
00:00:16,320 --> 00:00:19,359
about uh

7
00:00:17,279 --> 00:00:21,359
a bim vm for android following luke

8
00:00:19,359 --> 00:00:24,720
stock on beam on on the browser

9
00:00:21,359 --> 00:00:27,519
and the alien beam on on on

10
00:00:24,720 --> 00:00:31,840
embedded now beam for android so let's

11
00:00:27,519 --> 00:00:31,839
give it up for victor

12
00:00:32,960 --> 00:00:38,000
thank you welcome everyone so

13
00:00:36,320 --> 00:00:39,760
as it was mentioned in the introduction

14
00:00:38,000 --> 00:00:44,000
i have been a beam enthusiast since

15
00:00:39,760 --> 00:00:46,239
2007 but today i would like to talk

16
00:00:44,000 --> 00:00:47,360
about a project that i started last

17
00:00:46,239 --> 00:00:49,519
summer

18
00:00:47,360 --> 00:00:51,039
so it's basically half years work or a

19
00:00:49,520 --> 00:00:54,320
bit more

20
00:00:51,039 --> 00:00:54,320
which is named the coffee bean

21
00:00:55,520 --> 00:01:00,480
let's look at the questions that i would

22
00:00:57,600 --> 00:01:03,920
like to answer today

23
00:01:00,480 --> 00:01:06,080
first i wanted to

24
00:01:03,920 --> 00:01:08,320
know how the bim file actually works so

25
00:01:06,080 --> 00:01:10,560
that was my main motivation

26
00:01:08,320 --> 00:01:11,759
i was i was really curious how to get it

27
00:01:10,560 --> 00:01:15,520
running

28
00:01:11,760 --> 00:01:18,799
and also i found it a use case that

29
00:01:15,520 --> 00:01:21,199
why not run the bim files on android

30
00:01:18,799 --> 00:01:22,560
in a very very simple way so you should

31
00:01:21,200 --> 00:01:26,880
imagine a

32
00:01:22,560 --> 00:01:30,000
lightweight beam execution environment

33
00:01:26,880 --> 00:01:33,199
so i wanted to skip all the different

34
00:01:30,000 --> 00:01:34,880
stuff which can be issues

35
00:01:33,200 --> 00:01:36,320
on android like getting the right

36
00:01:34,880 --> 00:01:41,759
privileges

37
00:01:36,320 --> 00:01:46,240
for running the files or or using some

38
00:01:41,759 --> 00:01:50,000
scripting layers to to provide

39
00:01:46,240 --> 00:01:51,360
a base foundation for the beam and also

40
00:01:50,000 --> 00:01:54,079
to

41
00:01:51,360 --> 00:01:56,320
to just make it make it work in a simple

42
00:01:54,079 --> 00:01:56,320
way

43
00:01:56,640 --> 00:02:01,040
so i thought that this should be

44
00:01:59,600 --> 00:02:03,039
possible

45
00:02:01,040 --> 00:02:04,240
let's see later if this is possible or

46
00:02:03,040 --> 00:02:06,640
not

47
00:02:04,240 --> 00:02:08,079
what do you need to make it happen so

48
00:02:06,640 --> 00:02:11,360
what are the building blocks

49
00:02:08,080 --> 00:02:14,879
that you can use how these

50
00:02:11,360 --> 00:02:16,879
parts fit together so i'm talking

51
00:02:14,879 --> 00:02:19,840
about the airline parts the beam part

52
00:02:16,879 --> 00:02:23,120
but also the android part

53
00:02:19,840 --> 00:02:25,360
and last but not least how can we

54
00:02:23,120 --> 00:02:26,319
ensure the communication between the

55
00:02:25,360 --> 00:02:29,280
phone and

56
00:02:26,319 --> 00:02:29,280
the airline vm

57
00:02:30,319 --> 00:02:33,920
yes so this seems possible what i've

58
00:02:32,640 --> 00:02:36,319
done

59
00:02:33,920 --> 00:02:38,238
but different you know quite a lot of

60
00:02:36,319 --> 00:02:40,160
ways

61
00:02:38,239 --> 00:02:41,920
if you are using ireland to build

62
00:02:40,160 --> 00:02:44,480
android applications

63
00:02:41,920 --> 00:02:45,599
this this coffee beam uh execution

64
00:02:44,480 --> 00:02:48,079
environment

65
00:02:45,599 --> 00:02:49,040
uh basically ensures that they are

66
00:02:48,080 --> 00:02:52,160
robust

67
00:02:49,040 --> 00:02:54,400
that's quite okay so it does

68
00:02:52,160 --> 00:02:56,079
what you expect from a beam fire so it

69
00:02:54,400 --> 00:02:56,800
understands the the basic airline

70
00:02:56,080 --> 00:02:59,120
mechanism

71
00:02:56,800 --> 00:03:00,000
and also being a functional programming

72
00:02:59,120 --> 00:03:03,120
language

73
00:03:00,000 --> 00:03:05,760
a function with the same parameters

74
00:03:03,120 --> 00:03:06,959
will result in the same will give the

75
00:03:05,760 --> 00:03:09,359
same result

76
00:03:06,959 --> 00:03:10,640
also it is concurrent so processes are

77
00:03:09,360 --> 00:03:13,680
supported

78
00:03:10,640 --> 00:03:14,640
uh you can start as many processes in

79
00:03:13,680 --> 00:03:17,680
the vm

80
00:03:14,640 --> 00:03:21,359
as you want scalable well

81
00:03:17,680 --> 00:03:25,200
this is not yet implemented but uh

82
00:03:21,360 --> 00:03:27,680
it's it may be doable soft real time

83
00:03:25,200 --> 00:03:32,159
it just depends on the capabilities of

84
00:03:27,680 --> 00:03:35,200
your android device

85
00:03:32,159 --> 00:03:38,640
let's see a short demo what i made

86
00:03:35,200 --> 00:03:42,560
this is basically the tic-tac-toe game

87
00:03:38,640 --> 00:03:44,319
built on the coffee bean vm and

88
00:03:42,560 --> 00:03:45,840
in the background there is a beam

89
00:03:44,319 --> 00:03:48,238
process

90
00:03:45,840 --> 00:03:50,319
running the game logic and also managing

91
00:03:48,239 --> 00:03:52,480
the computer intelligence

92
00:03:50,319 --> 00:03:53,518
if you're watching online you should

93
00:03:52,480 --> 00:04:01,839
find the link

94
00:03:53,519 --> 00:04:04,879
to this video at the topic description

95
00:04:01,840 --> 00:04:05,760
so i'm playing with the axe the computer

96
00:04:04,879 --> 00:04:10,480
is with the

97
00:04:05,760 --> 00:04:12,720
circle and as you can see

98
00:04:10,480 --> 00:04:14,159
the beam intelligence is working on the

99
00:04:12,720 --> 00:04:19,120
mobile phone

100
00:04:14,159 --> 00:04:19,120
providing the next steps to the computer

101
00:04:23,360 --> 00:04:26,960
so it seems possible but what do you

102
00:04:25,199 --> 00:04:29,840
need for that

103
00:04:26,960 --> 00:04:29,840
to make it work

104
00:04:30,160 --> 00:04:37,440
first basically uh you need to get

105
00:04:34,320 --> 00:04:40,639
android to understand the beam file

106
00:04:37,440 --> 00:04:42,960
as the main language for android is java

107
00:04:40,639 --> 00:04:44,800
there are also many other ways to to do

108
00:04:42,960 --> 00:04:46,239
this like kotlin or c plus plus and

109
00:04:44,800 --> 00:04:49,919
things like that

110
00:04:46,240 --> 00:04:53,199
i chose java to understand bin file

111
00:04:49,919 --> 00:04:56,240
also uh you need to load the beam in

112
00:04:53,199 --> 00:04:59,040
an android way because this this is not

113
00:04:56,240 --> 00:05:00,080
as simple as a usual file system on your

114
00:04:59,040 --> 00:05:03,280
pc

115
00:05:00,080 --> 00:05:07,198
uh there are special privileges

116
00:05:03,280 --> 00:05:09,758
that you need to access files and also

117
00:05:07,199 --> 00:05:11,520
in this project you want the beam files

118
00:05:09,759 --> 00:05:13,600
to be presented

119
00:05:11,520 --> 00:05:15,680
in the source code integrated in into

120
00:05:13,600 --> 00:05:19,120
the android basically

121
00:05:15,680 --> 00:05:20,800
uh as a library or as a resource that

122
00:05:19,120 --> 00:05:23,919
you can reuse

123
00:05:20,800 --> 00:05:26,160
what i wanted to avoid is to recompile

124
00:05:23,919 --> 00:05:27,359
the beam files in a special way that it

125
00:05:26,160 --> 00:05:29,120
will fit android

126
00:05:27,360 --> 00:05:32,320
so these beam files basically are

127
00:05:29,120 --> 00:05:35,360
runnable on every pc as well

128
00:05:32,320 --> 00:05:37,120
you need to create a vm for sure that

129
00:05:35,360 --> 00:05:38,080
executes this beam so there should be a

130
00:05:37,120 --> 00:05:41,360
logic

131
00:05:38,080 --> 00:05:43,198
on executing the the parse beam file

132
00:05:41,360 --> 00:05:45,120
and also you need to provide a way of

133
00:05:43,199 --> 00:05:48,880
communication to interact

134
00:05:45,120 --> 00:05:49,520
with the android this is a different

135
00:05:48,880 --> 00:05:53,199
approach

136
00:05:49,520 --> 00:05:54,080
and what i chose is to use high-level

137
00:05:53,199 --> 00:05:57,440
structures

138
00:05:54,080 --> 00:05:58,240
in the vm implementation so i i didn't

139
00:05:57,440 --> 00:06:00,639
want to

140
00:05:58,240 --> 00:06:01,759
to manage the the low-level memory or

141
00:06:00,639 --> 00:06:04,400
optimize for low

142
00:06:01,759 --> 00:06:05,360
uh memory usage managing the bits and

143
00:06:04,400 --> 00:06:07,919
bytes

144
00:06:05,360 --> 00:06:09,840
because in an android phone you have

145
00:06:07,919 --> 00:06:12,080
plenty of memories so it's

146
00:06:09,840 --> 00:06:13,440
uh it's not not a bottleneck the more

147
00:06:12,080 --> 00:06:15,680
the bottleneck is

148
00:06:13,440 --> 00:06:16,880
the cpu power so if you are using a lot

149
00:06:15,680 --> 00:06:19,280
of cpu

150
00:06:16,880 --> 00:06:21,840
uh then it will shorten your device's

151
00:06:19,280 --> 00:06:21,840
lifetime

152
00:06:22,639 --> 00:06:29,680
how these parts fit together basically

153
00:06:26,080 --> 00:06:32,400
you have the vm written in java and also

154
00:06:29,680 --> 00:06:33,039
compiled into a jar library that you can

155
00:06:32,400 --> 00:06:35,919
use

156
00:06:33,039 --> 00:06:36,639
so the green boxes are what you can use

157
00:06:35,919 --> 00:06:39,680
for free

158
00:06:36,639 --> 00:06:42,080
that you get for free you need to add

159
00:06:39,680 --> 00:06:43,039
to this library your own custom bim

160
00:06:42,080 --> 00:06:46,000
files that you com

161
00:06:43,039 --> 00:06:47,919
pre-compiled and insert the whole thing

162
00:06:46,000 --> 00:06:49,840
into an android activity i will talk

163
00:06:47,919 --> 00:06:52,880
about this later

164
00:06:49,840 --> 00:06:56,000
and also you have to have a beam client

165
00:06:52,880 --> 00:06:57,120
or a customized beam client which has

166
00:06:56,000 --> 00:07:00,400
the purpose of

167
00:06:57,120 --> 00:07:02,160
managing the vm itself and also handling

168
00:07:00,400 --> 00:07:04,560
the communication between the vm

169
00:07:02,160 --> 00:07:06,319
and your android application when

170
00:07:04,560 --> 00:07:08,720
everything is ready you package it into

171
00:07:06,319 --> 00:07:11,680
an apk

172
00:07:08,720 --> 00:07:12,639
and you have a deployable android

173
00:07:11,680 --> 00:07:16,479
application

174
00:07:12,639 --> 00:07:19,919
using airlock on your phone

175
00:07:16,479 --> 00:07:21,360
the main client is partially implemented

176
00:07:19,919 --> 00:07:24,080
in the vm itself

177
00:07:21,360 --> 00:07:24,960
so you get a beam client class which

178
00:07:24,080 --> 00:07:27,680
provides

179
00:07:24,960 --> 00:07:29,198
the basic functionality like starting

180
00:07:27,680 --> 00:07:32,319
and stopping the vm

181
00:07:29,199 --> 00:07:34,240
also loading the bim file and

182
00:07:32,319 --> 00:07:36,160
applying custom functions which are

183
00:07:34,240 --> 00:07:38,000
basically translated into airline

184
00:07:36,160 --> 00:07:40,639
function cores

185
00:07:38,000 --> 00:07:42,240
and what you need to implement yourself

186
00:07:40,639 --> 00:07:44,720
is to provide input for

187
00:07:42,240 --> 00:07:45,680
which functions and which arguments to

188
00:07:44,720 --> 00:07:48,720
apply

189
00:07:45,680 --> 00:07:51,599
and provide a way to to handle

190
00:07:48,720 --> 00:07:53,280
the results of your function course and

191
00:07:51,599 --> 00:07:55,840
also

192
00:07:53,280 --> 00:07:57,119
to implement callbacks for your custom

193
00:07:55,840 --> 00:07:59,520
function calls

194
00:07:57,120 --> 00:08:02,319
from inside the vm to the outside world

195
00:07:59,520 --> 00:08:02,318
to the android

196
00:08:05,680 --> 00:08:09,280
i promise you that this will be the most

197
00:08:07,280 --> 00:08:12,878
complex slide for today

198
00:08:09,280 --> 00:08:16,000
for this talk let me just uh

199
00:08:12,879 --> 00:08:18,080
show the behavior of this tic-tac-toe

200
00:08:16,000 --> 00:08:21,919
game what i implemented

201
00:08:18,080 --> 00:08:26,000
so you first start an android activity

202
00:08:21,919 --> 00:08:28,639
which is basically a way of creating

203
00:08:26,000 --> 00:08:29,520
interactive applications you can imagine

204
00:08:28,639 --> 00:08:33,039
activity

205
00:08:29,520 --> 00:08:34,799
as a class a java class uh which

206
00:08:33,039 --> 00:08:37,598
has the functionality to interact with

207
00:08:34,799 --> 00:08:41,279
the user getting the gui elements

208
00:08:37,599 --> 00:08:44,159
together and and also uh

209
00:08:41,279 --> 00:08:46,320
managing the uh the process in an

210
00:08:44,159 --> 00:08:48,640
android way so it provides gui processes

211
00:08:46,320 --> 00:08:51,680
and other processes as well

212
00:08:48,640 --> 00:08:54,800
so you can imagine the android

213
00:08:51,680 --> 00:08:57,839
activity as a simple application

214
00:08:54,800 --> 00:09:00,319
from this android activity you can call

215
00:08:57,839 --> 00:09:02,240
the beam client or the customized beam

216
00:09:00,320 --> 00:09:04,880
client

217
00:09:02,240 --> 00:09:07,200
which you have implemented to apply a

218
00:09:04,880 --> 00:09:09,439
function called to the vm

219
00:09:07,200 --> 00:09:10,959
basically you provide strings like the

220
00:09:09,440 --> 00:09:13,680
module name function name

221
00:09:10,959 --> 00:09:14,079
and the argument list which is a special

222
00:09:13,680 --> 00:09:16,800
type

223
00:09:14,080 --> 00:09:19,760
that that is implemented in java in

224
00:09:16,800 --> 00:09:22,479
order to understand the beam structures

225
00:09:19,760 --> 00:09:23,120
the tic-tac-toe game will start the

226
00:09:22,480 --> 00:09:25,839
internal

227
00:09:23,120 --> 00:09:27,680
airline function callistic tactile start

228
00:09:25,839 --> 00:09:30,640
which returns the pit

229
00:09:27,680 --> 00:09:32,800
this speed is transformed back as a

230
00:09:30,640 --> 00:09:35,120
function callback inside the android

231
00:09:32,800 --> 00:09:36,160
so you you have the gameped which you

232
00:09:35,120 --> 00:09:38,399
can refer to

233
00:09:36,160 --> 00:09:40,800
this game pin is basically a new process

234
00:09:38,399 --> 00:09:43,360
that is started inside the vm

235
00:09:40,800 --> 00:09:45,680
you press the new game button then it

236
00:09:43,360 --> 00:09:49,600
will also apply a function called

237
00:09:45,680 --> 00:09:50,640
starts a new game and the game process

238
00:09:49,600 --> 00:09:53,440
actually

239
00:09:50,640 --> 00:09:55,120
uh sends updates repeatedly to the

240
00:09:53,440 --> 00:09:57,680
android vm

241
00:09:55,120 --> 00:09:58,959
uh with the custom function called being

242
00:09:57,680 --> 00:10:01,120
client update

243
00:09:58,959 --> 00:10:03,119
how to handle this update function it

244
00:10:01,120 --> 00:10:06,480
basically depends on how you write

245
00:10:03,120 --> 00:10:08,800
the android activity in this game

246
00:10:06,480 --> 00:10:10,160
this update contains the information

247
00:10:08,800 --> 00:10:12,240
about the game

248
00:10:10,160 --> 00:10:14,319
the board the current state of the board

249
00:10:12,240 --> 00:10:15,760
and what action or event has happened

250
00:10:14,320 --> 00:10:17,839
like

251
00:10:15,760 --> 00:10:19,360
the player or the computer has placed a

252
00:10:17,839 --> 00:10:22,640
sign on the table

253
00:10:19,360 --> 00:10:25,200
or the board has changed someone has

254
00:10:22,640 --> 00:10:26,640
won someone has lost or the game ends in

255
00:10:25,200 --> 00:10:30,480
a draw

256
00:10:26,640 --> 00:10:31,360
like in the video also when you click a

257
00:10:30,480 --> 00:10:34,800
field

258
00:10:31,360 --> 00:10:38,720
it invokes in the same way function

259
00:10:34,800 --> 00:10:42,240
apply apply mfa tic tac to put

260
00:10:38,720 --> 00:10:44,320
then a board update happens and

261
00:10:42,240 --> 00:10:46,079
also they put player events so the

262
00:10:44,320 --> 00:10:48,320
player has put

263
00:10:46,079 --> 00:10:51,279
their sign on the board then the

264
00:10:48,320 --> 00:10:51,279
computers turn

265
00:10:51,839 --> 00:10:56,320
this also updates the board and after

266
00:10:54,720 --> 00:11:00,000
many many iterations

267
00:10:56,320 --> 00:11:02,720
you will end up with uh updating

268
00:11:00,000 --> 00:11:04,959
the board with the event like draw win

269
00:11:02,720 --> 00:11:08,079
or loss

270
00:11:04,959 --> 00:11:11,119
so this is this is basically the

271
00:11:08,079 --> 00:11:11,120
game communication

272
00:11:11,360 --> 00:11:15,920
and the game logic is fully implemented

273
00:11:15,200 --> 00:11:19,279
inside

274
00:11:15,920 --> 00:11:21,279
one airline module in about 200 lines

275
00:11:19,279 --> 00:11:22,320
this is the game flow and the computer's

276
00:11:21,279 --> 00:11:25,600
intelligence

277
00:11:22,320 --> 00:11:27,440
and also there are some special

278
00:11:25,600 --> 00:11:29,279
callback handling which is which are

279
00:11:27,440 --> 00:11:31,200
written inside the android activity in

280
00:11:29,279 --> 00:11:33,680
java to handle this

281
00:11:31,200 --> 00:11:34,480
this functionality but the vm is

282
00:11:33,680 --> 00:11:37,519
untouched

283
00:11:34,480 --> 00:11:39,200
so the library that that is provided by

284
00:11:37,519 --> 00:11:43,839
the coffee bean vm

285
00:11:39,200 --> 00:11:43,839
uh basically you can use it as is

286
00:11:45,839 --> 00:11:51,279
this is a public project so this is the

287
00:11:48,640 --> 00:11:53,519
github address

288
00:11:51,279 --> 00:11:54,959
where you can check the source code and

289
00:11:53,519 --> 00:11:57,200
also

290
00:11:54,959 --> 00:11:58,800
i will encourage you to contribute to

291
00:11:57,200 --> 00:12:00,320
this as well because there is a lot of

292
00:11:58,800 --> 00:12:03,839
work to be done

293
00:12:00,320 --> 00:12:06,160
like future plans i o handling

294
00:12:03,839 --> 00:12:08,000
this is not yet implemented also it is a

295
00:12:06,160 --> 00:12:08,719
big question how to handle i o in

296
00:12:08,000 --> 00:12:12,000
android

297
00:12:08,720 --> 00:12:15,680
because you usually don't have

298
00:12:12,000 --> 00:12:18,720
a mechanism to to fetch or or

299
00:12:15,680 --> 00:12:21,519
view the log files or you don't have a

300
00:12:18,720 --> 00:12:23,760
terminal screen where you can examine

301
00:12:21,519 --> 00:12:25,839
the results of function calls so

302
00:12:23,760 --> 00:12:26,800
you need to hand it to handle it in a

303
00:12:25,839 --> 00:12:29,760
different way

304
00:12:26,800 --> 00:12:30,399
also fire handling is is a bit tricky in

305
00:12:29,760 --> 00:12:33,680
android

306
00:12:30,399 --> 00:12:36,959
so there are a lot of questions in that

307
00:12:33,680 --> 00:12:38,000
network support yeah it would be really

308
00:12:36,959 --> 00:12:41,599
good to have a cluster

309
00:12:38,000 --> 00:12:46,399
android phones working together as

310
00:12:41,600 --> 00:12:48,800
uh nodes of one distribution group

311
00:12:46,399 --> 00:12:50,959
this is this is still a dream but i hope

312
00:12:48,800 --> 00:12:53,439
it will come in the future

313
00:12:50,959 --> 00:12:54,000
node management advanced number handling

314
00:12:53,440 --> 00:12:57,120
of course

315
00:12:54,000 --> 00:12:58,639
uh java doesn't support the big numbers

316
00:12:57,120 --> 00:13:00,320
as a built-in type so you have to you

317
00:12:58,639 --> 00:13:03,680
have to implement the mechanism

318
00:13:00,320 --> 00:13:05,360
uh yourself based on uh

319
00:13:03,680 --> 00:13:07,199
what has been done already in airline

320
00:13:05,360 --> 00:13:10,240
handling big numbers

321
00:13:07,200 --> 00:13:13,839
and also there are lots of beeps beefs

322
00:13:10,240 --> 00:13:14,320
built-in functions that are still need

323
00:13:13,839 --> 00:13:18,160
to be

324
00:13:14,320 --> 00:13:18,160
implemented or to be reviewed

325
00:13:19,120 --> 00:13:25,600
and for the end some useful reading

326
00:13:22,160 --> 00:13:28,800
so these were the sources which i used

327
00:13:25,600 --> 00:13:31,440
uh to understand the beam and and get a

328
00:13:28,800 --> 00:13:32,000
more detailed picture on how beam works

329
00:13:31,440 --> 00:13:34,240
and

330
00:13:32,000 --> 00:13:37,440
which i use basically in the coffee bean

331
00:13:34,240 --> 00:13:37,440
vm implementation

332
00:13:38,399 --> 00:13:41,680
so we have a lot of time so we have more

333
00:13:40,480 --> 00:13:49,199
time for questions

334
00:13:41,680 --> 00:13:51,839
thanks for your attention

335
00:13:49,199 --> 00:13:52,240
yes um i'm assuming that you went to

336
00:13:51,839 --> 00:13:55,279
beam

337
00:13:52,240 --> 00:13:57,440
wisdom uh that you're

338
00:13:55,279 --> 00:13:59,120
did you look at urging which hasn't been

339
00:13:57,440 --> 00:14:01,839
updated in a while at all or was this

340
00:13:59,120 --> 00:14:06,320
like a from scratch implementation

341
00:14:01,839 --> 00:14:09,680
so the question was uh if urgent was

342
00:14:06,320 --> 00:14:11,360
an option or if i have looked

343
00:14:09,680 --> 00:14:15,680
in the source as mentioned in the bmv

344
00:14:11,360 --> 00:14:17,440
storms yes i studied this solution

345
00:14:15,680 --> 00:14:20,160
this is a common question so i put up

346
00:14:17,440 --> 00:14:22,880
this into a slide

347
00:14:20,160 --> 00:14:26,160
i have examined a lot of different

348
00:14:22,880 --> 00:14:29,360
options one of them was erjang

349
00:14:26,160 --> 00:14:32,240
why i didn't really use this

350
00:14:29,360 --> 00:14:32,560
implementation is that yep some parts

351
00:14:32,240 --> 00:14:34,079
were

352
00:14:32,560 --> 00:14:36,000
really nice and really useful for

353
00:14:34,079 --> 00:14:39,279
example in handling

354
00:14:36,000 --> 00:14:42,480
the different airline types uh

355
00:14:39,279 --> 00:14:45,680
i didn't take the code as is i had some

356
00:14:42,480 --> 00:14:47,600
i had to make some modifications uh but

357
00:14:45,680 --> 00:14:50,719
of course i wanted to use uh

358
00:14:47,600 --> 00:14:52,320
it in a different way so using the the

359
00:14:50,720 --> 00:14:54,480
meaning of the types in

360
00:14:52,320 --> 00:14:56,560
understanding beam files but not in

361
00:14:54,480 --> 00:14:57,760
recompilation of the codes so that's why

362
00:14:56,560 --> 00:15:01,760
air young

363
00:14:57,760 --> 00:15:01,760
as a complete option was not considered

364
00:15:02,000 --> 00:15:04,959
any other question

365
00:15:08,000 --> 00:15:15,519
yes what are the specific

366
00:15:12,480 --> 00:15:19,440
complicated configuration installation

367
00:15:15,519 --> 00:15:22,880
parts of building airline for android

368
00:15:19,440 --> 00:15:22,880
for non-rooted devices

369
00:15:23,519 --> 00:15:28,959
apart from rooted devices what separates

370
00:15:29,040 --> 00:15:36,079
uh please clarify the question i

371
00:15:32,800 --> 00:15:37,920
if i'm not mistaken online

372
00:15:36,079 --> 00:15:39,519
i mean the beam can be cross compiled

373
00:15:37,920 --> 00:15:42,800
for android

374
00:15:39,519 --> 00:15:46,000
and so rooted devices

375
00:15:42,800 --> 00:15:48,560
can boot that pretty easily but what

376
00:15:46,000 --> 00:15:50,240
made what makes it more complex for

377
00:15:48,560 --> 00:15:53,040
non-rooted devices

378
00:15:50,240 --> 00:15:55,040
yes so basically bing files are files

379
00:15:53,040 --> 00:15:57,120
the question was that uh

380
00:15:55,040 --> 00:15:59,279
what makes uh this beamfire handling

381
00:15:57,120 --> 00:16:01,680
more complex on android phones

382
00:15:59,279 --> 00:16:03,040
uh although there are some cross

383
00:16:01,680 --> 00:16:06,399
compilation

384
00:16:03,040 --> 00:16:06,399
functionalities that you can use

385
00:16:06,560 --> 00:16:11,279
basically beam files are files so you

386
00:16:09,680 --> 00:16:14,399
have to handle them

387
00:16:11,279 --> 00:16:15,600
as binary input as accessing file on a

388
00:16:14,399 --> 00:16:17,920
file system

389
00:16:15,600 --> 00:16:18,880
which is not always easy on an android

390
00:16:17,920 --> 00:16:23,040
phone you

391
00:16:18,880 --> 00:16:25,439
have to get the resources or get

392
00:16:23,040 --> 00:16:27,120
access to the resources into to the

393
00:16:25,440 --> 00:16:30,160
directory where this file is

394
00:16:27,120 --> 00:16:31,600
is located and uh and this is sometimes

395
00:16:30,160 --> 00:16:35,120
not so easy

396
00:16:31,600 --> 00:16:37,759
and uh also uh in this solution

397
00:16:35,120 --> 00:16:40,160
you can basically uh use a pre-compiled

398
00:16:37,759 --> 00:16:43,519
beam and put it

399
00:16:40,160 --> 00:16:45,120
as a resource inside uh your custom

400
00:16:43,519 --> 00:16:47,199
application without changing the

401
00:16:45,120 --> 00:16:48,399
original content of the airline source

402
00:16:47,199 --> 00:16:51,439
from which being

403
00:16:48,399 --> 00:16:54,079
this beam file was compiled so so that

404
00:16:51,440 --> 00:16:54,079
was my goal

405
00:16:54,240 --> 00:17:02,160
yes how do you test

406
00:16:59,199 --> 00:17:04,559
your own virtual machine implementation

407
00:17:02,160 --> 00:17:05,918
to be sure that it behaves similarly to

408
00:17:04,559 --> 00:17:08,720
erickson's virtual machine

409
00:17:05,919 --> 00:17:10,880
yes i have a lot of different test cases

410
00:17:08,720 --> 00:17:14,079
basically using the amp framework

411
00:17:10,880 --> 00:17:16,799
for compiling the java code uh

412
00:17:14,079 --> 00:17:18,399
creating the the jar library but also

413
00:17:16,799 --> 00:17:20,559
there is a test module

414
00:17:18,400 --> 00:17:22,000
uh where you input a lot of airlong

415
00:17:20,559 --> 00:17:23,599
expressions and

416
00:17:22,000 --> 00:17:25,439
have an expectation on the on the

417
00:17:23,599 --> 00:17:27,678
functional results and

418
00:17:25,439 --> 00:17:28,559
and this is how it is tested uh this

419
00:17:27,679 --> 00:17:32,240
involves

420
00:17:28,559 --> 00:17:33,200
also creating new processes or checking

421
00:17:32,240 --> 00:17:35,520
how the

422
00:17:33,200 --> 00:17:37,919
the the more tricky parts in dvm are

423
00:17:35,520 --> 00:17:37,918
handled

424
00:17:38,160 --> 00:17:43,600
so the end test framework is basically

425
00:17:39,919 --> 00:17:43,600
the answer but what you use as a

426
00:17:44,840 --> 00:17:47,840
framework

427
00:17:48,080 --> 00:18:01,840
sorry we made this

428
00:18:02,960 --> 00:18:05,039
you

