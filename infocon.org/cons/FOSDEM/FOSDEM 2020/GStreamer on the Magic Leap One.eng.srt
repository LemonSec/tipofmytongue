1
00:00:12,160 --> 00:00:16,480
so we move to our next talk

2
00:00:14,559 --> 00:00:18,400
i remind you that if you want to ask any

3
00:00:16,480 --> 00:00:20,199
questions either from the room or

4
00:00:18,400 --> 00:00:24,320
remotely you can go to

5
00:00:20,199 --> 00:00:25,920
onlinequestions.org even 20147

6
00:00:24,320 --> 00:00:28,240
and ask questions there or vote for

7
00:00:25,920 --> 00:00:29,840
questions that have already been asked

8
00:00:28,240 --> 00:00:33,160
our next talk is about this streamer on

9
00:00:29,840 --> 00:00:37,360
the magiclip one please welcome xavier

10
00:00:33,160 --> 00:00:42,000
[Applause]

11
00:00:37,360 --> 00:00:44,719
hi so i'm xavier working at colabora

12
00:00:42,000 --> 00:00:45,440
today i'm presenting uh g-streamer so

13
00:00:44,719 --> 00:00:48,960
the work i've

14
00:00:45,440 --> 00:00:52,480
done last year to put this streamer on a

15
00:00:48,960 --> 00:00:55,600
magiclip one device showing it

16
00:00:52,480 --> 00:00:58,879
there so those are those are

17
00:00:55,600 --> 00:01:01,760
augmented reality so

18
00:00:58,879 --> 00:01:03,680
the magiclip is building those glasses

19
00:01:01,760 --> 00:01:07,759
and they are selling it

20
00:01:03,680 --> 00:01:11,119
online augmented reality

21
00:01:07,760 --> 00:01:14,000
is glasses you can see through

22
00:01:11,119 --> 00:01:15,280
so you see your own the real world

23
00:01:14,000 --> 00:01:18,400
environment

24
00:01:15,280 --> 00:01:21,600
and you can add virtual elements

25
00:01:18,400 --> 00:01:24,720
inside your your living room or

26
00:01:21,600 --> 00:01:28,000
anywhere you are and for example you can

27
00:01:24,720 --> 00:01:31,280
add a tv screen on the on the wall

28
00:01:28,000 --> 00:01:33,040
in your living room and when

29
00:01:31,280 --> 00:01:34,880
you can watch tv like that with the

30
00:01:33,040 --> 00:01:38,079
glasses that's

31
00:01:34,880 --> 00:01:38,798
not the same thing as vr because virtual

32
00:01:38,079 --> 00:01:41,919
reality

33
00:01:38,799 --> 00:01:43,759
is a completely opaque device

34
00:01:41,920 --> 00:01:45,600
so you can't see anything from the real

35
00:01:43,759 --> 00:01:49,680
world

36
00:01:45,600 --> 00:01:53,119
you see only virtual environment

37
00:01:49,680 --> 00:01:54,159
and so if you walk you just walk into

38
00:01:53,119 --> 00:01:58,560
the world

39
00:01:54,159 --> 00:01:58,560
and that's not happening with ar

40
00:01:59,040 --> 00:02:03,759
magiclip has three elements so first you

41
00:02:02,479 --> 00:02:06,840
have the glasses

42
00:02:03,759 --> 00:02:08,000
and then the glasses is the the

43
00:02:06,840 --> 00:02:11,440
lightweight

44
00:02:08,000 --> 00:02:14,000
and the the light pack is

45
00:02:11,440 --> 00:02:15,920
connected with a cable you cannot remove

46
00:02:14,000 --> 00:02:16,640
the cable so that the left back the life

47
00:02:15,920 --> 00:02:19,440
pack uh

48
00:02:16,640 --> 00:02:22,079
light pack is the the computer itself

49
00:02:19,440 --> 00:02:25,680
doing all the cpu and gpu

50
00:02:22,080 --> 00:02:29,120
and so all the other stuff i'm going to

51
00:02:25,680 --> 00:02:32,400
to to code is going to run on the

52
00:02:29,120 --> 00:02:34,000
the small round computer there and of

53
00:02:32,400 --> 00:02:38,959
course you have a controller

54
00:02:34,000 --> 00:02:38,959
to manipulate virtual objects

55
00:02:41,120 --> 00:02:47,280
so a bit of specs the light pack

56
00:02:44,800 --> 00:02:48,840
is where the os is running it's an

57
00:02:47,280 --> 00:02:51,840
nvidia tegra

58
00:02:48,840 --> 00:02:56,959
x2 chipset with fixed 6

59
00:02:51,840 --> 00:02:56,959
core and it's arm 64.

60
00:02:57,680 --> 00:03:03,440
the os is called luminos

61
00:03:01,200 --> 00:03:04,640
it's based on androids but there is no

62
00:03:03,440 --> 00:03:07,280
java

63
00:03:04,640 --> 00:03:08,640
so basically as far as i know they do

64
00:03:07,280 --> 00:03:09,680
they are doing that to get vendor

65
00:03:08,640 --> 00:03:12,958
support

66
00:03:09,680 --> 00:03:14,720
from nvidia probably and

67
00:03:12,959 --> 00:03:16,080
the media stack is what i really

68
00:03:14,720 --> 00:03:20,239
concentrate on and

69
00:03:16,080 --> 00:03:23,840
it is staged right from android

70
00:03:20,239 --> 00:03:29,040
there is a public sdk it has

71
00:03:23,840 --> 00:03:29,040
a complete c api for everything so

72
00:03:29,120 --> 00:03:32,879
on android you have java api to write

73
00:03:31,760 --> 00:03:35,920
java code but

74
00:03:32,879 --> 00:03:39,518
they write everything in c uh

75
00:03:35,920 --> 00:03:42,720
for the the the middleware and you have

76
00:03:39,519 --> 00:03:43,840
a say plus plus api for all the the ui

77
00:03:42,720 --> 00:03:46,879
toolkits

78
00:03:43,840 --> 00:03:50,640
and the more advanced features

79
00:03:46,879 --> 00:03:53,518
um yeah they have

80
00:03:50,640 --> 00:03:54,879
for for the audio side they have custom

81
00:03:53,519 --> 00:03:58,319
apis that's something i've

82
00:03:54,879 --> 00:03:59,679
never seen on android so they brought it

83
00:03:58,319 --> 00:04:02,000
from scratch

84
00:03:59,680 --> 00:04:02,879
and they also worked from scratch on

85
00:04:02,000 --> 00:04:05,519
build system

86
00:04:02,879 --> 00:04:08,399
called mabu because we don't have enough

87
00:04:05,519 --> 00:04:08,400
build system yet

88
00:04:09,439 --> 00:04:12,560
the project i've been working on with

89
00:04:11,519 --> 00:04:16,239
collabora

90
00:04:12,560 --> 00:04:19,280
was sponsored by mozilla

91
00:04:16,238 --> 00:04:24,239
mozilla has their new browser

92
00:04:19,279 --> 00:04:27,039
called servo servo is written in rust

93
00:04:24,240 --> 00:04:27,759
it's a brand new browser and i want to

94
00:04:27,040 --> 00:04:32,320
uh

95
00:04:27,759 --> 00:04:35,520
to point it to various uh vr and ar

96
00:04:32,320 --> 00:04:36,400
devices and they had an issue because

97
00:04:35,520 --> 00:04:38,320
they put it

98
00:04:36,400 --> 00:04:39,840
on magiclip device but they cannot

99
00:04:38,320 --> 00:04:42,560
render any media

100
00:04:39,840 --> 00:04:43,119
so the video and audio was not working

101
00:04:42,560 --> 00:04:46,000
because

102
00:04:43,120 --> 00:04:46,720
they are using g streamer for on desktop

103
00:04:46,000 --> 00:04:50,960
to

104
00:04:46,720 --> 00:04:54,240
to play all the media but they couldn't

105
00:04:50,960 --> 00:04:55,440
port magically a g streamer to magical

106
00:04:54,240 --> 00:04:57,600
device

107
00:04:55,440 --> 00:04:58,639
so they contacted us at collabora

108
00:04:57,600 --> 00:05:02,639
collabora and

109
00:04:58,639 --> 00:05:02,639
we helped them to support it

110
00:05:04,400 --> 00:05:10,320
so yeah servo written invests

111
00:05:08,400 --> 00:05:12,000
so the build system is cargos yet

112
00:05:10,320 --> 00:05:15,919
another build system

113
00:05:12,000 --> 00:05:18,720
um they have various python

114
00:05:15,919 --> 00:05:21,120
scripts on top of cargo to drive the

115
00:05:18,720 --> 00:05:21,120
build

116
00:05:22,000 --> 00:05:25,759
yeah so alan jeffrey already did before

117
00:05:24,800 --> 00:05:28,400
contacting me

118
00:05:25,759 --> 00:05:30,160
they already did all the porting of uh

119
00:05:28,400 --> 00:05:33,758
server to magiclip

120
00:05:30,160 --> 00:05:33,759
except for the multimedia parts

121
00:05:34,479 --> 00:05:37,758
so i'm not i want i won't be speaking

122
00:05:37,120 --> 00:05:40,240
about

123
00:05:37,759 --> 00:05:42,479
that's that geroni from from them they

124
00:05:40,240 --> 00:05:46,000
have a blog post already uh telling

125
00:05:42,479 --> 00:05:48,159
all the all the story for that side

126
00:05:46,000 --> 00:05:49,280
uh concentrating on the multimedia part

127
00:05:48,160 --> 00:05:53,440
here

128
00:05:49,280 --> 00:05:56,638
um yeah so the for the video

129
00:05:53,440 --> 00:05:59,759
that they are using uh appsync uh

130
00:05:56,639 --> 00:06:02,240
that means for the that means that every

131
00:05:59,759 --> 00:06:03,360
that they don't let g streamer rendering

132
00:06:02,240 --> 00:06:05,600
the the video

133
00:06:03,360 --> 00:06:08,000
they get the frames uh out of the

134
00:06:05,600 --> 00:06:12,000
streamer and they render them

135
00:06:08,000 --> 00:06:12,000
themselves in their application

136
00:06:12,400 --> 00:06:16,479
and for the audio then let's on the

137
00:06:14,720 --> 00:06:17,360
opposite side and for the audio telegram

138
00:06:16,479 --> 00:06:20,479
streamer do

139
00:06:17,360 --> 00:06:22,160
all ever do everything itself so

140
00:06:20,479 --> 00:06:23,758
gstreamer is supposed to detect the

141
00:06:22,160 --> 00:06:26,560
platform and plug the

142
00:06:23,759 --> 00:06:29,600
the right audio sync of course there is

143
00:06:26,560 --> 00:06:32,000
no adjusting for magiclip yet

144
00:06:29,600 --> 00:06:34,560
so g streamer that's a multimedia

145
00:06:32,000 --> 00:06:36,720
framework written in c

146
00:06:34,560 --> 00:06:37,600
they had an auto tools build system

147
00:06:36,720 --> 00:06:40,080
thankfully it's

148
00:06:37,600 --> 00:06:41,199
removed now and it's fully amazon build

149
00:06:40,080 --> 00:06:42,719
system now so

150
00:06:41,199 --> 00:06:44,319
that's the third build system in my

151
00:06:42,720 --> 00:06:47,440
presentation

152
00:06:44,319 --> 00:06:51,360
um yeah

153
00:06:47,440 --> 00:06:52,240
so um gstreamer already has support for

154
00:06:51,360 --> 00:06:55,120
androids

155
00:06:52,240 --> 00:06:56,960
uh but they are using the the java api

156
00:06:55,120 --> 00:07:00,000
through gni

157
00:06:56,960 --> 00:07:02,638
um so yeah

158
00:07:00,000 --> 00:07:04,400
g streamer is like as for people that

159
00:07:02,639 --> 00:07:05,520
don't know gstreamer it's like a

160
00:07:04,400 --> 00:07:08,400
pipeline when you have

161
00:07:05,520 --> 00:07:10,240
elements you can connect together to to

162
00:07:08,400 --> 00:07:13,280
write your um

163
00:07:10,240 --> 00:07:15,440
your your rendering

164
00:07:13,280 --> 00:07:17,198
and so the first step is to actually

165
00:07:15,440 --> 00:07:19,840
build this trimmer

166
00:07:17,199 --> 00:07:21,120
using the the sdk there's two two ways

167
00:07:19,840 --> 00:07:24,000
possible

168
00:07:21,120 --> 00:07:26,479
either you use a gst build or you use

169
00:07:24,000 --> 00:07:29,520
cerberus

170
00:07:26,479 --> 00:07:31,520
gc builds use mason and has many set

171
00:07:29,520 --> 00:07:33,520
projects to build every single

172
00:07:31,520 --> 00:07:36,080
dependency you can

173
00:07:33,520 --> 00:07:37,680
uh at least the art dependency but there

174
00:07:36,080 --> 00:07:39,199
are some optional dependencies that it

175
00:07:37,680 --> 00:07:43,199
cannot build yet

176
00:07:39,199 --> 00:07:43,199
uh on the other side serboro

177
00:07:43,360 --> 00:07:48,319
they can build every possible dependency

178
00:07:46,240 --> 00:07:52,319
with their own build system

179
00:07:48,319 --> 00:07:55,680
and but it's more complicated and

180
00:07:52,319 --> 00:07:58,800
less integrated so since i'm amazon

181
00:07:55,680 --> 00:07:59,360
developer i decided to go with the gst

182
00:07:58,800 --> 00:08:02,720
builds

183
00:07:59,360 --> 00:08:04,160
uh a new way of doing things and i've

184
00:08:02,720 --> 00:08:08,000
not been using this

185
00:08:04,160 --> 00:08:10,319
silver for this uh for this work because

186
00:08:08,000 --> 00:08:14,400
one of the main reasons is that on magic

187
00:08:10,319 --> 00:08:14,400
i didn't need any external dependency

188
00:08:14,560 --> 00:08:17,919
so my project was really like small

189
00:08:16,800 --> 00:08:20,400
scope so

190
00:08:17,919 --> 00:08:22,479
i don't have to depend on any auto tools

191
00:08:20,400 --> 00:08:23,679
library external libraries et cetera so

192
00:08:22,479 --> 00:08:27,840
i decided to go with

193
00:08:23,680 --> 00:08:31,120
gc build and use only amazon for that

194
00:08:27,840 --> 00:08:33,919
um yeah

195
00:08:31,120 --> 00:08:34,320
so the first thing to do is write a

196
00:08:33,919 --> 00:08:37,919
cross

197
00:08:34,320 --> 00:08:38,800
file uh using the the because there is a

198
00:08:37,919 --> 00:08:42,240
tool chain

199
00:08:38,799 --> 00:08:43,199
uh in the magiclip sdk you can download

200
00:08:42,240 --> 00:08:46,160
there is a dual

201
00:08:43,200 --> 00:08:46,959
tool chain there you write a cross file

202
00:08:46,160 --> 00:08:50,880
compile

203
00:08:46,959 --> 00:08:54,079
and hopefully it works right

204
00:08:50,880 --> 00:08:56,000
so the the cross file is

205
00:08:54,080 --> 00:08:57,839
something like that a bit simplified

206
00:08:56,000 --> 00:09:00,880
here but yeah so you

207
00:08:57,839 --> 00:09:01,839
you define your you you pretend it's

208
00:09:00,880 --> 00:09:04,480
android because

209
00:09:01,839 --> 00:09:05,200
g streamer has many uh special case for

210
00:09:04,480 --> 00:09:08,800
androids

211
00:09:05,200 --> 00:09:09,839
and um you want to use those special

212
00:09:08,800 --> 00:09:14,800
cases

213
00:09:09,839 --> 00:09:14,800
uh you define that it's a arm 64

214
00:09:14,959 --> 00:09:18,640
architecture and yeah yeah like you see

215
00:09:17,920 --> 00:09:22,160
here

216
00:09:18,640 --> 00:09:25,279
a little bit trick i did

217
00:09:22,160 --> 00:09:30,000
i don't write the full path to all those

218
00:09:25,279 --> 00:09:33,279
binaries i've got a variable there

219
00:09:30,000 --> 00:09:33,279
magiclip sdk

220
00:09:34,959 --> 00:09:38,719
at the beginning i was using this file

221
00:09:36,800 --> 00:09:41,519
that was actually uh

222
00:09:38,720 --> 00:09:42,480
processed it by said just to replace all

223
00:09:41,519 --> 00:09:44,959
the variables

224
00:09:42,480 --> 00:09:47,279
before passing that to to mason but

225
00:09:44,959 --> 00:09:50,079
spoiler alert have a merge request

226
00:09:47,279 --> 00:09:51,760
amazon to support that kind of syntax

227
00:09:50,080 --> 00:09:53,760
inside amazon itself

228
00:09:51,760 --> 00:09:55,760
so you don't have to repeat all the full

229
00:09:53,760 --> 00:09:58,800
path where you installed your

230
00:09:55,760 --> 00:09:58,800
your tool chain anymore

231
00:09:59,279 --> 00:10:06,399
um yeah so the first issue i went

232
00:10:03,040 --> 00:10:10,000
uh when building gstreamer is that

233
00:10:06,399 --> 00:10:13,720
uh glib depends of icon v

234
00:10:10,000 --> 00:10:16,640
and the sdk for magiclip actually has

235
00:10:13,720 --> 00:10:18,720
iconv.h the header but

236
00:10:16,640 --> 00:10:20,079
surprisingly they don't have the

237
00:10:18,720 --> 00:10:21,680
implementation

238
00:10:20,079 --> 00:10:25,040
usually the implementation comes from

239
00:10:21,680 --> 00:10:28,160
the ellipses but no symbols there

240
00:10:25,040 --> 00:10:31,120
don't know why um so

241
00:10:28,160 --> 00:10:33,760
i had to build uh icon v from the gnu

242
00:10:31,120 --> 00:10:35,519
project

243
00:10:33,760 --> 00:10:36,959
of course that's yet another build

244
00:10:35,519 --> 00:10:40,480
system auto tools now

245
00:10:36,959 --> 00:10:42,000
that face but i can handle it configure

246
00:10:40,480 --> 00:10:44,880
make make install

247
00:10:42,000 --> 00:10:45,600
all the good stuff and it works it

248
00:10:44,880 --> 00:10:47,200
builds

249
00:10:45,600 --> 00:10:49,440
you can install that in the path

250
00:10:47,200 --> 00:10:52,880
somewhere and you can

251
00:10:49,440 --> 00:10:56,079
add the the dash l and

252
00:10:52,880 --> 00:10:58,720
i flags in your mazen cross file to

253
00:10:56,079 --> 00:11:01,680
pick the the icon v implementation you

254
00:10:58,720 --> 00:11:04,880
just built

255
00:11:01,680 --> 00:11:08,239
um next step so

256
00:11:04,880 --> 00:11:08,800
with that icon v issue fixed you can

257
00:11:08,240 --> 00:11:11,360
actually

258
00:11:08,800 --> 00:11:12,319
now build the full g stream or hit past

259
00:11:11,360 --> 00:11:15,440
and

260
00:11:12,320 --> 00:11:16,240
the problem is it's it does it does it

261
00:11:15,440 --> 00:11:19,120
too well

262
00:11:16,240 --> 00:11:19,680
you have many like more than 100 plugins

263
00:11:19,120 --> 00:11:22,079
builds

264
00:11:19,680 --> 00:11:22,800
but you don't care about them one trick

265
00:11:22,079 --> 00:11:24,800
i use

266
00:11:22,800 --> 00:11:26,640
it's a really nice feature you have in

267
00:11:24,800 --> 00:11:29,199
amazon is you can

268
00:11:26,640 --> 00:11:30,240
disable all all the features all

269
00:11:29,200 --> 00:11:33,360
together with the

270
00:11:30,240 --> 00:11:34,320
auto features equally disabled that

271
00:11:33,360 --> 00:11:37,360
means that

272
00:11:34,320 --> 00:11:39,120
with gst builds if you do that it will

273
00:11:37,360 --> 00:11:41,920
disable every single plugin

274
00:11:39,120 --> 00:11:43,200
and build really the minimum the leap g

275
00:11:41,920 --> 00:11:46,640
streamer core

276
00:11:43,200 --> 00:11:48,000
and nothing else and then you can add

277
00:11:46,640 --> 00:11:51,199
yourself

278
00:11:48,000 --> 00:11:51,920
the the the exact plugins you want to

279
00:11:51,200 --> 00:11:54,320
enable

280
00:11:51,920 --> 00:11:57,839
and will be it will build just that so

281
00:11:54,320 --> 00:12:01,040
you save a lot of time and a lot of

282
00:11:57,839 --> 00:12:04,320
memory because uh the full build takes

283
00:12:01,040 --> 00:12:05,920
like almost 200 megabytes for the

284
00:12:04,320 --> 00:12:08,160
application you want to ship

285
00:12:05,920 --> 00:12:09,920
but if you enable only the few things

286
00:12:08,160 --> 00:12:12,560
it's uh it's down to less than 10

287
00:12:09,920 --> 00:12:15,760
megabytes

288
00:12:12,560 --> 00:12:16,959
um yes yeah so there are a few options

289
00:12:15,760 --> 00:12:20,160
you have to pass

290
00:12:16,959 --> 00:12:24,319
uh you want to enable gl of course

291
00:12:20,160 --> 00:12:27,839
the gl supports in ng streamer

292
00:12:24,320 --> 00:12:32,000
on magiclip device they have gl es2

293
00:12:27,839 --> 00:12:35,040
on egl platform

294
00:12:32,000 --> 00:12:36,800
and yeah the the windows system it's i

295
00:12:35,040 --> 00:12:38,240
fake it to android because

296
00:12:36,800 --> 00:12:41,680
android is already implemented to

297
00:12:38,240 --> 00:12:44,320
gstreamer and it's really similar

298
00:12:41,680 --> 00:12:44,319
on magically

299
00:12:46,480 --> 00:12:54,959
yeah another trick again i had

300
00:12:49,839 --> 00:12:54,959
that id when working on this project is

301
00:12:55,600 --> 00:12:58,800
when g street manages tumor builds

302
00:12:58,079 --> 00:13:01,760
itself

303
00:12:58,800 --> 00:13:03,040
it uh you get every plugin as a separate

304
00:13:01,760 --> 00:13:05,040
library

305
00:13:03,040 --> 00:13:06,880
and that's not really convenient if you

306
00:13:05,040 --> 00:13:08,880
want to package that in your application

307
00:13:06,880 --> 00:13:12,959
because you have many files to compile

308
00:13:08,880 --> 00:13:14,959
to copy inside your package and

309
00:13:12,959 --> 00:13:16,479
magically device was actually actually

310
00:13:14,959 --> 00:13:20,160
not really happy with that

311
00:13:16,480 --> 00:13:21,279
because they don't let you have any dl

312
00:13:20,160 --> 00:13:24,639
open

313
00:13:21,279 --> 00:13:26,800
on any shared object outside the binary

314
00:13:24,639 --> 00:13:28,480
the folder so you cannot split

315
00:13:26,800 --> 00:13:30,719
like on distribution you have a

316
00:13:28,480 --> 00:13:34,000
gstreamer dash 1.0

317
00:13:30,720 --> 00:13:38,079
subdirectory in your slash lib and

318
00:13:34,000 --> 00:13:40,079
um to so gstreamer will only look for

319
00:13:38,079 --> 00:13:40,638
plugins there but you cannot do that

320
00:13:40,079 --> 00:13:42,560
trick

321
00:13:40,639 --> 00:13:43,920
on magically because they have security

322
00:13:42,560 --> 00:13:46,638
rules that forbid that

323
00:13:43,920 --> 00:13:47,599
so you cannot deal open those files so

324
00:13:46,639 --> 00:13:51,279
one trick

325
00:13:47,600 --> 00:13:53,440
i've done is um if you build

326
00:13:51,279 --> 00:13:56,000
that's a patch uh still waiting for

327
00:13:53,440 --> 00:13:59,839
review on git lab if someone from

328
00:13:56,000 --> 00:14:00,880
gstreamer developers want to to give it

329
00:13:59,839 --> 00:14:04,079
a try

330
00:14:00,880 --> 00:14:08,480
um if you build g streamer with

331
00:14:04,079 --> 00:14:10,479
a default arrow it gets static

332
00:14:08,480 --> 00:14:12,079
it will build every plugin that's a

333
00:14:10,480 --> 00:14:15,279
static plugin

334
00:14:12,079 --> 00:14:18,319
and at the end it's going there is a

335
00:14:15,279 --> 00:14:19,120
added a a bit of code in their amazon

336
00:14:18,320 --> 00:14:22,560
file

337
00:14:19,120 --> 00:14:25,519
that bring all those static libraries

338
00:14:22,560 --> 00:14:26,239
build them in into a single libgi stream

339
00:14:25,519 --> 00:14:30,240
give g

340
00:14:26,240 --> 00:14:34,079
stream of full shared library

341
00:14:30,240 --> 00:14:36,000
and it also generates a small c file

342
00:14:34,079 --> 00:14:39,120
that

343
00:14:36,000 --> 00:14:42,560
register all the plugins you just built

344
00:14:39,120 --> 00:14:45,199
so you have a single function to call to

345
00:14:42,560 --> 00:14:47,518
initialize all the static plugins

346
00:14:45,199 --> 00:14:48,560
and you can use one single shared

347
00:14:47,519 --> 00:14:51,199
library and

348
00:14:48,560 --> 00:14:53,518
don't you don't have to to manage all

349
00:14:51,199 --> 00:14:59,839
those plugins and dl open anymore

350
00:14:53,519 --> 00:14:59,839
you just directly link to that library

351
00:15:01,120 --> 00:15:07,440
so now that we have gstreamer builds

352
00:15:04,320 --> 00:15:08,800
a small version of gstreamer with one

353
00:15:07,440 --> 00:15:12,079
single library

354
00:15:08,800 --> 00:15:15,359
the next step is to build that into a

355
00:15:12,079 --> 00:15:18,239
magiclip application package so

356
00:15:15,360 --> 00:15:19,120
as i said that the mabu build system

357
00:15:18,240 --> 00:15:21,040
custom from

358
00:15:19,120 --> 00:15:23,040
magiclip they brought i don't think

359
00:15:21,040 --> 00:15:24,839
there is anyone else

360
00:15:23,040 --> 00:15:26,480
using that i think they've wrought that

361
00:15:24,839 --> 00:15:29,759
themselves

362
00:15:26,480 --> 00:15:32,800
luckily it's pretty easy to use

363
00:15:29,759 --> 00:15:36,160
you define the include path you want

364
00:15:32,800 --> 00:15:37,680
so i gave them the the the path where i

365
00:15:36,160 --> 00:15:41,360
installed

366
00:15:37,680 --> 00:15:41,920
my g streamer glib and etc everything

367
00:15:41,360 --> 00:15:45,279
that

368
00:15:41,920 --> 00:15:48,399
gst builds builds and

369
00:15:45,279 --> 00:15:49,759
you can just copy some files so that's

370
00:15:48,399 --> 00:15:52,880
the data

371
00:15:49,759 --> 00:15:57,440
list those files are just copy inside

372
00:15:52,880 --> 00:15:59,439
the the application package

373
00:15:57,440 --> 00:16:00,560
so as you see there is only two files to

374
00:15:59,440 --> 00:16:03,839
copy the

375
00:16:00,560 --> 00:16:08,319
the g streamer full shared library

376
00:16:03,839 --> 00:16:12,000
and that icon v shared library because

377
00:16:08,320 --> 00:16:14,880
they don't they don't have it um

378
00:16:12,000 --> 00:16:15,279
yeah as i said uh you just have in your

379
00:16:14,880 --> 00:16:17,279
main

380
00:16:15,279 --> 00:16:19,680
application you just have to call gst

381
00:16:17,279 --> 00:16:22,000
units and that new function gst in its

382
00:16:19,680 --> 00:16:23,839
static plugins

383
00:16:22,000 --> 00:16:25,920
that new function is implemented into

384
00:16:23,839 --> 00:16:29,279
the distribu full

385
00:16:25,920 --> 00:16:29,839
shell library and that's it you can

386
00:16:29,279 --> 00:16:31,920
actually

387
00:16:29,839 --> 00:16:32,880
already with that you can already run

388
00:16:31,920 --> 00:16:36,319
gstream

389
00:16:32,880 --> 00:16:38,800
on your on your device but you have no

390
00:16:36,320 --> 00:16:38,800
codex

391
00:16:39,519 --> 00:16:45,199
um yeah so for the codex parts

392
00:16:43,600 --> 00:16:47,360
of course you want to use the codex from

393
00:16:45,199 --> 00:16:51,839
the platform you don't want to use

394
00:16:47,360 --> 00:16:51,839
software decoders so

395
00:16:52,240 --> 00:16:56,000
if you look inside the public sdk you

396
00:16:54,399 --> 00:16:59,199
will find

397
00:16:56,000 --> 00:17:01,360
media codec and media codec lists and

398
00:16:59,199 --> 00:17:02,399
if you open them it's really surprising

399
00:17:01,360 --> 00:17:05,360
you actually have

400
00:17:02,399 --> 00:17:07,119
one for one exactly the same api as the

401
00:17:05,359 --> 00:17:10,159
android java api

402
00:17:07,119 --> 00:17:14,159
they just translated it in a c

403
00:17:10,160 --> 00:17:14,160
and it's exactly the same api

404
00:17:15,119 --> 00:17:18,719
so that's that's actually a good thing

405
00:17:17,760 --> 00:17:21,280
for me because

406
00:17:18,720 --> 00:17:23,280
g streamer already already has that

407
00:17:21,280 --> 00:17:26,720
android media codec

408
00:17:23,280 --> 00:17:30,000
emc plugin uh working

409
00:17:26,720 --> 00:17:33,520
uh the the only issue with that is that

410
00:17:30,000 --> 00:17:37,200
um so gstreamer used the java api

411
00:17:33,520 --> 00:17:39,918
so i had to move all those jni codes

412
00:17:37,200 --> 00:17:40,960
uh separate it ins behind the wrapper

413
00:17:39,919 --> 00:17:44,160
layer

414
00:17:40,960 --> 00:17:45,160
and implement that vapor layer with the

415
00:17:44,160 --> 00:17:46,400
magiclip

416
00:17:45,160 --> 00:17:49,200
[Music]

417
00:17:46,400 --> 00:17:50,160
api so you can build time select if you

418
00:17:49,200 --> 00:17:53,600
are building it

419
00:17:50,160 --> 00:17:55,760
for magiclip or for android

420
00:17:53,600 --> 00:17:56,959
and all the rest of the card is exactly

421
00:17:55,760 --> 00:18:00,080
the same so

422
00:17:56,960 --> 00:18:03,360
that's a really good

423
00:18:00,080 --> 00:18:07,199
of sharing that code and those patches

424
00:18:03,360 --> 00:18:11,918
are already merged in g streamer master

425
00:18:07,200 --> 00:18:11,919
so that's coming soon in 1 18.

426
00:18:12,840 --> 00:18:17,918
um yeah so

427
00:18:15,520 --> 00:18:18,799
yeah and now that that's an extra option

428
00:18:17,919 --> 00:18:23,039
you have to pass

429
00:18:18,799 --> 00:18:25,600
to um to mazen to enable to

430
00:18:23,039 --> 00:18:26,400
enable in gst plugins but the magiclip

431
00:18:25,600 --> 00:18:30,399
option

432
00:18:26,400 --> 00:18:33,760
that will select that new uh

433
00:18:30,400 --> 00:18:33,760
implementation for the codex

434
00:18:34,640 --> 00:18:42,000
uh video thing now um

435
00:18:37,840 --> 00:18:45,199
so as i said the the codex produce

436
00:18:42,000 --> 00:18:49,200
gl texture external e or

437
00:18:45,200 --> 00:18:54,080
oes but servo was

438
00:18:49,200 --> 00:18:57,200
was expecting texture 2d

439
00:18:54,080 --> 00:18:59,439
so i i did not work on that but mozilla

440
00:18:57,200 --> 00:19:01,520
had to modify their application to

441
00:18:59,440 --> 00:19:03,760
actually to support both

442
00:19:01,520 --> 00:19:05,760
formats for the textures because so they

443
00:19:03,760 --> 00:19:08,960
have the app they're absent that get

444
00:19:05,760 --> 00:19:11,840
those textures to gl textures and how to

445
00:19:08,960 --> 00:19:15,440
modify their code to to support that

446
00:19:11,840 --> 00:19:17,840
to render that um you actually write

447
00:19:15,440 --> 00:19:19,200
a magiclip application with a planar

448
00:19:17,840 --> 00:19:21,280
resource object

449
00:19:19,200 --> 00:19:23,039
that's like a widget that exposes you an

450
00:19:21,280 --> 00:19:26,080
egl context

451
00:19:23,039 --> 00:19:27,520
so you can draw with yourself with the

452
00:19:26,080 --> 00:19:32,159
egl

453
00:19:27,520 --> 00:19:32,160
api on that surface

454
00:19:33,360 --> 00:19:37,678
yeah so you have to uh to handle the egl

455
00:19:36,160 --> 00:19:40,400
context

456
00:19:37,679 --> 00:19:42,320
sharing with gstreamer because gstreamer

457
00:19:40,400 --> 00:19:45,440
has its own context

458
00:19:42,320 --> 00:19:46,799
for the for the decoder and so the

459
00:19:45,440 --> 00:19:51,360
decoder produce

460
00:19:46,799 --> 00:19:53,600
a texture with the its own context but

461
00:19:51,360 --> 00:19:55,600
the you have to tell gstreamer about

462
00:19:53,600 --> 00:19:57,840
your application context

463
00:19:55,600 --> 00:19:59,520
so gstreamer can share those both

464
00:19:57,840 --> 00:20:01,120
contacts so you can use the texture

465
00:19:59,520 --> 00:20:04,480
inside the

466
00:20:01,120 --> 00:20:04,479
application context as well

467
00:20:05,760 --> 00:20:09,760
sadly you cannot use gl image sync

468
00:20:08,240 --> 00:20:12,880
directly

469
00:20:09,760 --> 00:20:16,080
uh i i try to use it but there is

470
00:20:12,880 --> 00:20:18,880
some slight missing api there uh

471
00:20:16,080 --> 00:20:20,000
because they don't expose the native

472
00:20:18,880 --> 00:20:22,799
window

473
00:20:20,000 --> 00:20:23,919
uh i'm pretty sure inside that planner

474
00:20:22,799 --> 00:20:26,400
resources

475
00:20:23,919 --> 00:20:27,360
there must be a native window but the

476
00:20:26,400 --> 00:20:29,440
api don't

477
00:20:27,360 --> 00:20:30,799
don't give you a pointer to it so you

478
00:20:29,440 --> 00:20:33,919
can you cannot

479
00:20:30,799 --> 00:20:35,280
pass usually you would pass that native

480
00:20:33,919 --> 00:20:38,960
window down to gl

481
00:20:35,280 --> 00:20:41,280
image sync and the sync will

482
00:20:38,960 --> 00:20:42,880
do all the rendering for you but since

483
00:20:41,280 --> 00:20:44,320
you don't have that pointer you cannot

484
00:20:42,880 --> 00:20:46,799
do that so you have

485
00:20:44,320 --> 00:20:49,840
your you must use that app sync and do

486
00:20:46,799 --> 00:20:52,559
the rendering yourself

487
00:20:49,840 --> 00:20:53,280
a bit frustrating because it's really

488
00:20:52,559 --> 00:20:56,879
missing just

489
00:20:53,280 --> 00:21:00,399
one single getter just to get there

490
00:20:56,880 --> 00:21:00,400
maybe they will have it later

491
00:21:00,880 --> 00:21:07,760
audio thing part um they have

492
00:21:04,159 --> 00:21:11,120
two completely different uh objects

493
00:21:07,760 --> 00:21:14,960
uh header files uh ml audio.h

494
00:21:11,120 --> 00:21:17,039
and audionode.h one is c low level api

495
00:21:14,960 --> 00:21:19,520
and the other one is c plus plus high

496
00:21:17,039 --> 00:21:22,799
level api

497
00:21:19,520 --> 00:21:23,280
the reason for that is there are two

498
00:21:22,799 --> 00:21:27,679
ways

499
00:21:23,280 --> 00:21:30,639
for rendering audio on magiclip device

500
00:21:27,679 --> 00:21:31,360
the device itself has stereo speakers

501
00:21:30,640 --> 00:21:35,280
right onto

502
00:21:31,360 --> 00:21:39,360
your ears but since the source of the

503
00:21:35,280 --> 00:21:40,879
audio is somewhere in the 3d world

504
00:21:39,360 --> 00:21:42,559
either you can just play the yoyo

505
00:21:40,880 --> 00:21:45,440
plainly as a stereo

506
00:21:42,559 --> 00:21:46,000
stereo audio but you do not you cannot

507
00:21:45,440 --> 00:21:49,120
really

508
00:21:46,000 --> 00:21:49,840
know from where the the audio comes and

509
00:21:49,120 --> 00:21:52,479
that's the c

510
00:21:49,840 --> 00:21:54,399
api what the c api implements but the c

511
00:21:52,480 --> 00:21:57,120
plus plus api is smarter

512
00:21:54,400 --> 00:21:59,280
because that's actually a widget that

513
00:21:57,120 --> 00:22:02,320
you can plug inside your ui

514
00:21:59,280 --> 00:22:05,760
it's a invisible widget

515
00:22:02,320 --> 00:22:08,399
but that tells the audio stream exactly

516
00:22:05,760 --> 00:22:09,440
from where in the space the audio comes

517
00:22:08,400 --> 00:22:12,880
and

518
00:22:09,440 --> 00:22:16,159
there that widget is capable of

519
00:22:12,880 --> 00:22:18,240
uh modifying the audio you sent to

520
00:22:16,159 --> 00:22:19,200
to sounds like if it comes from that

521
00:22:18,240 --> 00:22:22,400
position

522
00:22:19,200 --> 00:22:24,240
so if you if there is a video wall here

523
00:22:22,400 --> 00:22:25,840
and you turn your head you hear the

524
00:22:24,240 --> 00:22:27,840
audio coming from there

525
00:22:25,840 --> 00:22:29,760
it's really impressive that's that makes

526
00:22:27,840 --> 00:22:33,120
all the difference for the immersion

527
00:22:29,760 --> 00:22:34,879
you have um

528
00:22:33,120 --> 00:22:37,199
yeah so if you look at those headers

529
00:22:34,880 --> 00:22:39,840
it's really it's weird because

530
00:22:37,200 --> 00:22:40,960
it's exactly the same api implemented

531
00:22:39,840 --> 00:22:44,720
twice

532
00:22:40,960 --> 00:22:44,720
one in c and one in surplus plus

533
00:22:44,960 --> 00:22:49,440
so it's exactly the same calls so i

534
00:22:47,840 --> 00:22:52,639
brought in g streamer

535
00:22:49,440 --> 00:22:56,880
a wrapper again so you can pick

536
00:22:52,640 --> 00:22:59,919
one of them at runtime um

537
00:22:56,880 --> 00:23:03,679
yeah so if you want to use the

538
00:22:59,919 --> 00:23:08,400
the 3d uh spatial

539
00:23:03,679 --> 00:23:11,760
audio um you have to tell to g streamer

540
00:23:08,400 --> 00:23:12,159
exactly you have to pass that audio node

541
00:23:11,760 --> 00:23:14,000
object

542
00:23:12,159 --> 00:23:15,600
cpu space object down to g streamer so

543
00:23:14,000 --> 00:23:18,799
gstreamer can use

544
00:23:15,600 --> 00:23:22,879
that object instead of using the plain

545
00:23:18,799 --> 00:23:25,280
c api um so i brought that

546
00:23:22,880 --> 00:23:26,080
a new element in gstreamer called ml

547
00:23:25,280 --> 00:23:29,120
audio

548
00:23:26,080 --> 00:23:31,039
or mlogiosync and

549
00:23:29,120 --> 00:23:34,158
when that audio thing wants to render

550
00:23:31,039 --> 00:23:34,158
audio it's

551
00:23:34,320 --> 00:23:38,960
it's it's going to pop a message on the

552
00:23:37,440 --> 00:23:40,000
bus and the application is supposed to

553
00:23:38,960 --> 00:23:43,200
reply to that

554
00:23:40,000 --> 00:23:44,400
message going uh with the pointer to

555
00:23:43,200 --> 00:23:47,360
that audio node

556
00:23:44,400 --> 00:23:48,400
object and if you do that it's going to

557
00:23:47,360 --> 00:23:51,760
to use that

558
00:23:48,400 --> 00:23:56,799
cps plus api and you get really nice

559
00:23:51,760 --> 00:23:59,440
special audio up streaming

560
00:23:56,799 --> 00:24:01,520
so thanks to mozilla for sponsoring all

561
00:23:59,440 --> 00:24:03,600
that work

562
00:24:01,520 --> 00:24:05,279
and they even sponsored this upstreaming

563
00:24:03,600 --> 00:24:08,240
of of all that work

564
00:24:05,279 --> 00:24:10,320
so everything is already merged so you

565
00:24:08,240 --> 00:24:11,520
can use that with gstreamer master right

566
00:24:10,320 --> 00:24:13,918
away

567
00:24:11,520 --> 00:24:16,320
thanks to olivier credits who did all

568
00:24:13,919 --> 00:24:18,000
the review

569
00:24:16,320 --> 00:24:19,760
you can also find the standalone

570
00:24:18,000 --> 00:24:23,760
applications uh

571
00:24:19,760 --> 00:24:26,879
demo at that url and

572
00:24:23,760 --> 00:24:27,279
that demo uh is not using servo so it's

573
00:24:26,880 --> 00:24:30,960
just

574
00:24:27,279 --> 00:24:35,440
a plain video player you can try and we

575
00:24:30,960 --> 00:24:40,159
have a demo at ibc showing that

576
00:24:35,440 --> 00:24:40,159
yeah coming that next gstreamer release

577
00:24:40,240 --> 00:24:43,600
and now daddymo

578
00:24:44,080 --> 00:24:48,960
because this streamer is always tested

579
00:24:46,000 --> 00:24:52,159
with video testers

580
00:24:48,960 --> 00:24:55,200
as you can see magiclip

581
00:24:52,159 --> 00:25:01,840
is capable of detecting the the surfaces

582
00:24:55,200 --> 00:25:01,840
and cut the video at the right place

583
00:25:04,550 --> 00:25:08,720
[Music]

584
00:25:06,240 --> 00:25:08,720
there we go

585
00:25:09,919 --> 00:25:17,679
any question thank you we have

586
00:25:14,240 --> 00:25:18,880
um we have no question online uh we have

587
00:25:17,679 --> 00:25:21,200
a question from the

588
00:25:18,880 --> 00:25:22,320
remote uh remotely uh the people who

589
00:25:21,200 --> 00:25:24,000
attend remotely

590
00:25:22,320 --> 00:25:25,840
asking if we can put the slides in full

591
00:25:24,000 --> 00:25:28,640
screen it's difficult to do it all the

592
00:25:25,840 --> 00:25:31,199
time because we want to see you

593
00:25:28,640 --> 00:25:31,919
we try but your slides are down on the

594
00:25:31,200 --> 00:25:33,520
wall from

595
00:25:31,919 --> 00:25:35,679
the website yeah the fordham website

596
00:25:33,520 --> 00:25:38,799
because we're well behaved

597
00:25:35,679 --> 00:25:41,360
that's good all speakers to do that any

598
00:25:38,799 --> 00:25:48,879
question from the floor

599
00:25:41,360 --> 00:25:48,879
we can take one question yes please

600
00:25:52,120 --> 00:25:55,120
yes

601
00:25:55,600 --> 00:25:58,879
because the the magical platform is

602
00:25:57,520 --> 00:26:01,679
closed source

603
00:25:58,880 --> 00:26:02,480
uh oh sorry the so the question is why i

604
00:26:01,679 --> 00:26:04,400
don't uh

605
00:26:02,480 --> 00:26:06,880
just make a pull request to add the

606
00:26:04,400 --> 00:26:10,559
getter the missing getter for

607
00:26:06,880 --> 00:26:12,400
uh to be able to use uh gle mesh sync

608
00:26:10,559 --> 00:26:14,158
the reason is that the platform is

609
00:26:12,400 --> 00:26:15,760
closed source right so i cannot just do

610
00:26:14,159 --> 00:26:18,799
a pull request

611
00:26:15,760 --> 00:26:21,679
to have an issue tracker so i

612
00:26:18,799 --> 00:26:22,799
already actually some of the apis i'm

613
00:26:21,679 --> 00:26:25,919
using right now

614
00:26:22,799 --> 00:26:27,279
were missing so i did some uh requests

615
00:26:25,919 --> 00:26:30,400
to get them

616
00:26:27,279 --> 00:26:33,600
um but yeah you're right that i could

617
00:26:30,400 --> 00:26:36,960
request that api as well uh i don't

618
00:26:33,600 --> 00:26:38,799
think i reported that issue yet

619
00:26:36,960 --> 00:26:41,039
and very quickly is this augmented

620
00:26:38,799 --> 00:26:44,080
reality helmet widely available

621
00:26:41,039 --> 00:26:47,360
uh widely not but i think it's

622
00:26:44,080 --> 00:26:49,100
you can buy it in the u.s only

623
00:26:47,360 --> 00:26:51,120
just for a few thousand bucks

624
00:26:49,100 --> 00:27:03,199
[Laughter]

625
00:26:51,120 --> 00:27:03,199
so anyone can buy it

