1
00:00:05,120 --> 00:00:07,759
welcome everybody

2
00:00:06,240 --> 00:00:09,679
i don't think our next speaker needs

3
00:00:07,759 --> 00:00:11,920
much of an introduction

4
00:00:09,679 --> 00:00:13,360
jeremy is a core samba contributor and

5
00:00:11,920 --> 00:00:16,400
of course a big defender of

6
00:00:13,360 --> 00:00:17,439
open source software so give me a hand

7
00:00:16,400 --> 00:00:20,880
in welcoming him

8
00:00:17,440 --> 00:00:20,880
and what's new in samba

9
00:00:25,199 --> 00:00:28,880
thanks very much i'm jeremy allison i

10
00:00:27,760 --> 00:00:31,279
work for google

11
00:00:28,880 --> 00:00:32,558
in their open source programs office but

12
00:00:31,279 --> 00:00:34,079
i just want to say

13
00:00:32,558 --> 00:00:35,839
no google lawyers have reviewed this

14
00:00:34,079 --> 00:00:38,000
talk um so

15
00:00:35,840 --> 00:00:39,200
you know what what terrifies me is

16
00:00:38,000 --> 00:00:42,000
reading in the papers

17
00:00:39,200 --> 00:00:43,200
the next day uh you know google engineer

18
00:00:42,000 --> 00:00:45,680
says

19
00:00:43,200 --> 00:00:47,120
so so this is not a google talk this is

20
00:00:45,680 --> 00:00:49,680
a talk on behalf of samba

21
00:00:47,120 --> 00:00:51,440
so please don't mix the two up um google

22
00:00:49,680 --> 00:00:52,640
pay me but most of my work i actually do

23
00:00:51,440 --> 00:00:56,559
for samba

24
00:00:52,640 --> 00:00:58,800
so um what i'm going to talk about

25
00:00:56,559 --> 00:01:00,718
is the piece of samba that i work on the

26
00:00:58,800 --> 00:01:03,760
most which is the file server

27
00:01:00,719 --> 00:01:06,000
which is the piece that

28
00:01:03,760 --> 00:01:07,600
is most visible in samba there's also an

29
00:01:06,000 --> 00:01:09,840
active directory server

30
00:01:07,600 --> 00:01:11,280
there's also the authentication piece

31
00:01:09,840 --> 00:01:14,400
there's also a

32
00:01:11,280 --> 00:01:16,799
increasingly legacy printing services

33
00:01:14,400 --> 00:01:17,680
but the file server is mostly what

34
00:01:16,799 --> 00:01:20,080
people

35
00:01:17,680 --> 00:01:21,520
want to know about so before i can talk

36
00:01:20,080 --> 00:01:23,920
about what's new

37
00:01:21,520 --> 00:01:26,640
and what we're doing a lot of which is

38
00:01:23,920 --> 00:01:28,479
internal kinds of work

39
00:01:26,640 --> 00:01:29,840
i really need to talk about how the file

40
00:01:28,479 --> 00:01:32,640
server is actually built

41
00:01:29,840 --> 00:01:34,560
internally oh by the way if you would

42
00:01:32,640 --> 00:01:35,759
like to ask a question please feel free

43
00:01:34,560 --> 00:01:38,320
to put your hand up

44
00:01:35,759 --> 00:01:38,880
at any time and i can take questions so

45
00:01:38,320 --> 00:01:41,439
this is

46
00:01:38,880 --> 00:01:43,439
kind of a an overview talk not

47
00:01:41,439 --> 00:01:46,720
necessarily diving into the details

48
00:01:43,439 --> 00:01:48,398
of all the protocols etc um at least on

49
00:01:46,720 --> 00:01:50,000
the file server side i can dive in as

50
00:01:48,399 --> 00:01:51,680
deeply as you would like to go

51
00:01:50,000 --> 00:01:53,439
but hopefully this is a talk that's

52
00:01:51,680 --> 00:01:56,240
accessible to a broader audience than

53
00:01:53,439 --> 00:01:58,880
just smb3 engineering geeks

54
00:01:56,240 --> 00:02:00,399
anyway so the file server has basically

55
00:01:58,880 --> 00:02:02,960
three conceptual layers

56
00:02:00,399 --> 00:02:04,880
there's the protocol parsing layer the

57
00:02:02,960 --> 00:02:06,719
packets coming off the network

58
00:02:04,880 --> 00:02:08,160
and then we have to ex we have to unpack

59
00:02:06,719 --> 00:02:11,280
them into a set of

60
00:02:08,160 --> 00:02:12,640
smb one two or three commands then we

61
00:02:11,280 --> 00:02:15,840
have the most complex

62
00:02:12,640 --> 00:02:19,279
layer inside of samba which is

63
00:02:15,840 --> 00:02:22,400
what we think of as the nt fs

64
00:02:19,280 --> 00:02:24,720
emulation layer so um

65
00:02:22,400 --> 00:02:25,520
if uh people here don't run windows

66
00:02:24,720 --> 00:02:26,800
which

67
00:02:25,520 --> 00:02:28,800
foster there's probably quite a few

68
00:02:26,800 --> 00:02:31,440
people who've never run windows uh

69
00:02:28,800 --> 00:02:33,120
ntfs is the windows file system and it

70
00:02:31,440 --> 00:02:33,680
has a set of semantics that are very

71
00:02:33,120 --> 00:02:35,680
different

72
00:02:33,680 --> 00:02:37,120
to the standard posix file systems that

73
00:02:35,680 --> 00:02:38,160
we know and love on linux and other

74
00:02:37,120 --> 00:02:40,080
unixes

75
00:02:38,160 --> 00:02:41,840
so what one of the main jobs of sambar

76
00:02:40,080 --> 00:02:44,959
is actually to translate

77
00:02:41,840 --> 00:02:46,160
the smb requests which are essentially

78
00:02:44,959 --> 00:02:49,200
ntfs

79
00:02:46,160 --> 00:02:51,120
semantics on the wire into a set of

80
00:02:49,200 --> 00:02:55,119
things that

81
00:02:51,120 --> 00:02:57,360
allow posix to emulate ntfs so that's a

82
00:02:55,120 --> 00:02:59,360
the layer underneath then below that the

83
00:02:57,360 --> 00:03:01,519
lowest layer we have the vfs

84
00:02:59,360 --> 00:03:02,879
now the vfs is the virtual file system

85
00:03:01,519 --> 00:03:04,800
interface if you're familiar with the

86
00:03:02,879 --> 00:03:05,679
linux kernel it's very similar to that

87
00:03:04,800 --> 00:03:07,840
it has a set of

88
00:03:05,680 --> 00:03:09,840
pluggable function calls it's

89
00:03:07,840 --> 00:03:11,760
unfortunately much more complex than the

90
00:03:09,840 --> 00:03:14,800
linux vfs because we have to do a lot

91
00:03:11,760 --> 00:03:16,480
more to emulate ntfs

92
00:03:14,800 --> 00:03:18,080
but the nice thing about the vfs because

93
00:03:16,480 --> 00:03:20,480
it's pluggable you can actually

94
00:03:18,080 --> 00:03:22,640
write plugins to that that will talk to

95
00:03:20,480 --> 00:03:24,879
external file systems so we have plugins

96
00:03:22,640 --> 00:03:27,440
for ceph we have plugins for cluster

97
00:03:24,879 --> 00:03:29,679
we have plugins for gpfs and there are a

98
00:03:27,440 --> 00:03:31,359
whole host of proprietary file systems

99
00:03:29,680 --> 00:03:32,640
out there that also use samba as their

100
00:03:31,360 --> 00:03:35,200
smb front end

101
00:03:32,640 --> 00:03:35,760
and then translate using our vfs into

102
00:03:35,200 --> 00:03:38,958
their

103
00:03:35,760 --> 00:03:39,599
um into their proprietary storage back

104
00:03:38,959 --> 00:03:41,920
ends

105
00:03:39,599 --> 00:03:43,440
uh we have a we have plugins that adapt

106
00:03:41,920 --> 00:03:46,159
our semantics to

107
00:03:43,440 --> 00:03:46,879
zfs uh another advanced file systems we

108
00:03:46,159 --> 00:03:49,760
have a

109
00:03:46,879 --> 00:03:51,200
buttrefs plugin that exposes snapshots

110
00:03:49,760 --> 00:03:54,720
etc etc

111
00:03:51,200 --> 00:03:56,879
um that's um

112
00:03:54,720 --> 00:03:58,319
that's basically why why sambra is so

113
00:03:56,879 --> 00:04:01,120
flexible that's what people

114
00:03:58,319 --> 00:04:02,958
um that's the interface that people work

115
00:04:01,120 --> 00:04:04,959
on the most

116
00:04:02,959 --> 00:04:06,000
practical terms is nowhere near as clean

117
00:04:04,959 --> 00:04:07,760
as it looks uh

118
00:04:06,000 --> 00:04:09,200
at least for the smb one code which is

119
00:04:07,760 --> 00:04:12,720
the oldest layer of code

120
00:04:09,200 --> 00:04:15,439
um inside samba and kind of

121
00:04:12,720 --> 00:04:16,720
the in the smb1 code the ntfs semantics

122
00:04:15,439 --> 00:04:18,320
are kind of mixed in with the protocol

123
00:04:16,720 --> 00:04:20,479
parsing and it's kind of ugly

124
00:04:18,320 --> 00:04:22,639
and i'm busily trying to kill it the

125
00:04:20,478 --> 00:04:24,639
smv2 layers which came later are much

126
00:04:22,639 --> 00:04:28,080
much better designed

127
00:04:24,639 --> 00:04:29,520
so um working on samba is that anyone

128
00:04:28,080 --> 00:04:30,639
familiar with a classic milton bradley

129
00:04:29,520 --> 00:04:34,400
game mousetrap

130
00:04:30,639 --> 00:04:37,040
yeah some of the old people so

131
00:04:34,400 --> 00:04:38,719
yes young people like what is this does

132
00:04:37,040 --> 00:04:40,960
it run on his screen

133
00:04:38,720 --> 00:04:42,320
um so if you're familiar with mousetrap

134
00:04:40,960 --> 00:04:45,520
it's a terrible game

135
00:04:42,320 --> 00:04:48,159
um i used to play it with my family and

136
00:04:45,520 --> 00:04:49,919
and friends and what happens is you

137
00:04:48,160 --> 00:04:52,160
slowly build this mouse trap

138
00:04:49,919 --> 00:04:53,520
with different cards which is pretty

139
00:04:52,160 --> 00:04:54,880
much like building samba

140
00:04:53,520 --> 00:04:56,639
and then at some point somebody pulls

141
00:04:54,880 --> 00:04:58,320
the mouse trap card and the

142
00:04:56,639 --> 00:04:59,840
ball goes rolling through this

143
00:04:58,320 --> 00:05:03,039
increasingly heath robinson

144
00:04:59,840 --> 00:05:05,679
sequence of things and almost invariably

145
00:05:03,039 --> 00:05:07,120
somewhere along the line the ball falls

146
00:05:05,680 --> 00:05:07,600
off and doesn't go where it's supposed

147
00:05:07,120 --> 00:05:10,160
to go

148
00:05:07,600 --> 00:05:10,639
and the user says oh there's something

149
00:05:10,160 --> 00:05:12,400
wrong

150
00:05:10,639 --> 00:05:14,479
to which the summer developers reply

151
00:05:12,400 --> 00:05:17,359
there's always something wrong

152
00:05:14,479 --> 00:05:17,680
um so that's kind of how we see sombra

153
00:05:17,360 --> 00:05:19,280
is

154
00:05:17,680 --> 00:05:20,639
it there are always things that we need

155
00:05:19,280 --> 00:05:21,599
to improve there's always things that

156
00:05:20,639 --> 00:05:23,440
are broken

157
00:05:21,600 --> 00:05:25,199
and we're just trying to build a better

158
00:05:23,440 --> 00:05:27,840
mousetrap for for the user

159
00:05:25,199 --> 00:05:30,000
um it's not always about as successfully

160
00:05:27,840 --> 00:05:32,400
as the milton bradley game i'm afraid

161
00:05:30,000 --> 00:05:33,600
so what what are we doing in s b some of

162
00:05:32,400 --> 00:05:35,120
these things are already done some of

163
00:05:33,600 --> 00:05:36,639
these things are under progress

164
00:05:35,120 --> 00:05:38,880
some of these things on this list are

165
00:05:36,639 --> 00:05:42,400
speculative so first of all

166
00:05:38,880 --> 00:05:43,840
die smb1 die um we really would like to

167
00:05:42,400 --> 00:05:45,440
remove smb1 which is the oldest

168
00:05:43,840 --> 00:05:47,198
microsoft protocol i'll talk a little

169
00:05:45,440 --> 00:05:50,479
bit about that later

170
00:05:47,199 --> 00:05:52,880
the vfs layer is old it was designed in

171
00:05:50,479 --> 00:05:56,000
the late 90s early 2000s

172
00:05:52,880 --> 00:05:56,400
it is the posix of the day it is greatly

173
00:05:56,000 --> 00:05:59,520
in

174
00:05:56,400 --> 00:06:02,239
need of modernization so that is

175
00:05:59,520 --> 00:06:03,919
um in progress right now it's probably a

176
00:06:02,240 --> 00:06:05,680
one to two year job but we'll get there

177
00:06:03,919 --> 00:06:07,280
in the end

178
00:06:05,680 --> 00:06:09,120
making samba more asynchronous

179
00:06:07,280 --> 00:06:11,679
internally and hide

180
00:06:09,120 --> 00:06:13,360
threading which we we need and we use

181
00:06:11,680 --> 00:06:15,199
quite heavily now but hide that under

182
00:06:13,360 --> 00:06:18,240
the covers for reasons again that i will

183
00:06:15,199 --> 00:06:20,160
cover later obviously we need to

184
00:06:18,240 --> 00:06:21,440
improve our performance and as part of

185
00:06:20,160 --> 00:06:24,720
that a

186
00:06:21,440 --> 00:06:25,360
single uh server uh file system

187
00:06:24,720 --> 00:06:27,600
performance

188
00:06:25,360 --> 00:06:29,440
is pretty damn good you can saturate

189
00:06:27,600 --> 00:06:31,360
10gb with smb3

190
00:06:29,440 --> 00:06:33,199
going to samba on a local file system

191
00:06:31,360 --> 00:06:35,840
with ssds no problem

192
00:06:33,199 --> 00:06:36,479
so that's great what we would like to do

193
00:06:35,840 --> 00:06:38,479
is to get

194
00:06:36,479 --> 00:06:40,800
a similar level of performance with a

195
00:06:38,479 --> 00:06:41,520
clustered smb solution and that's much

196
00:06:40,800 --> 00:06:42,720
harder

197
00:06:41,520 --> 00:06:45,039
and that's where a lot of the

198
00:06:42,720 --> 00:06:47,680
performance work is going into right now

199
00:06:45,039 --> 00:06:48,960
um on the active directory side on the

200
00:06:47,680 --> 00:06:50,240
well

201
00:06:48,960 --> 00:06:51,919
we have to interface with active

202
00:06:50,240 --> 00:06:53,440
directory and services that are

203
00:06:51,919 --> 00:06:55,039
accessible through smb

204
00:06:53,440 --> 00:06:56,639
so there's some service frame framework

205
00:06:55,039 --> 00:06:57,919
improvements i'm going to talk about

206
00:06:56,639 --> 00:07:00,160
and then there is the exciting

207
00:06:57,919 --> 00:07:01,599
completely speculative no code yet

208
00:07:00,160 --> 00:07:04,319
but we think this is where we're going

209
00:07:01,599 --> 00:07:08,080
to go which is smb over the google quick

210
00:07:04,319 --> 00:07:10,800
protocol so ned pyle

211
00:07:08,080 --> 00:07:12,560
um who's actually the relationship with

212
00:07:10,800 --> 00:07:13,440
microsoft has completely changed from

213
00:07:12,560 --> 00:07:15,120
the utterly

214
00:07:13,440 --> 00:07:16,639
adversarial relationship we used to have

215
00:07:15,120 --> 00:07:19,759
when we were suing them

216
00:07:16,639 --> 00:07:21,120
um strangely enough um

217
00:07:19,759 --> 00:07:24,000
we actually get an incredible with

218
00:07:21,120 --> 00:07:25,840
microsoft they invite us up to work with

219
00:07:24,000 --> 00:07:27,440
them we get direct access to their smb

220
00:07:25,840 --> 00:07:28,080
engineers they work with our test code

221
00:07:27,440 --> 00:07:29,919
we

222
00:07:28,080 --> 00:07:31,440
work with their test code we test each

223
00:07:29,919 --> 00:07:33,198
other's implementations

224
00:07:31,440 --> 00:07:35,120
and nedpal one of their evangelists

225
00:07:33,199 --> 00:07:36,319
basically says friends don't let friends

226
00:07:35,120 --> 00:07:38,319
use smb1

227
00:07:36,319 --> 00:07:39,919
so does anyone here still have smb1 on

228
00:07:38,319 --> 00:07:42,960
their network

229
00:07:39,919 --> 00:07:43,840
yeah yeah pretty much i mean i have it

230
00:07:42,960 --> 00:07:47,120
at home i have

231
00:07:43,840 --> 00:07:48,560
internet of let's just say let's use the

232
00:07:47,120 --> 00:07:51,599
polite term internet of

233
00:07:48,560 --> 00:07:56,400
of garbage devices that i can't update

234
00:07:51,599 --> 00:07:58,159
um that still use an insist on smb1

235
00:07:56,400 --> 00:07:59,840
we would really one of the things that

236
00:07:58,160 --> 00:08:01,440
drags down the implementation in samba

237
00:07:59,840 --> 00:08:03,198
is keeping smb1 going

238
00:08:01,440 --> 00:08:04,719
it causes a lot of issues there are

239
00:08:03,199 --> 00:08:06,319
things in there that are never actually

240
00:08:04,720 --> 00:08:07,360
used but you have to have as part of the

241
00:08:06,319 --> 00:08:09,840
protocol spec

242
00:08:07,360 --> 00:08:10,960
we want to get rid of it cody's still

243
00:08:09,840 --> 00:08:13,840
there so what do we do

244
00:08:10,960 --> 00:08:16,479
in 4.11 we we made the great

245
00:08:13,840 --> 00:08:18,239
announcement was we flipped a default

246
00:08:16,479 --> 00:08:19,680
we changed one line of code and said

247
00:08:18,240 --> 00:08:23,840
smb1 by default

248
00:08:19,680 --> 00:08:23,840
off and then we said we've removed smb1

249
00:08:23,919 --> 00:08:27,198
and all the press picked it up and

250
00:08:25,280 --> 00:08:30,318
cheered it was a one-line code change

251
00:08:27,199 --> 00:08:32,320
uh all the code is still there um what

252
00:08:30,319 --> 00:08:33,519
we're planning to do is we are planning

253
00:08:32,320 --> 00:08:35,680
to get rid of it

254
00:08:33,519 --> 00:08:38,240
um and the way we will do that is first

255
00:08:35,679 --> 00:08:38,880
of all we have an entire regression test

256
00:08:38,240 --> 00:08:41,519
suite

257
00:08:38,880 --> 00:08:43,039
that depends partly on smb 2 and above

258
00:08:41,519 --> 00:08:44,720
partly in smb1

259
00:08:43,039 --> 00:08:46,800
all of those tests are in the process

260
00:08:44,720 --> 00:08:48,720
right now susie is helping a great deal

261
00:08:46,800 --> 00:08:51,839
with this red hat's helping too

262
00:08:48,720 --> 00:08:56,480
are being migrated to smb2

263
00:08:51,839 --> 00:08:58,399
we'll probably keep the tests alive

264
00:08:56,480 --> 00:08:59,920
but eventually we are going to throw

265
00:08:58,399 --> 00:09:02,240
that code out we are going to be a

266
00:08:59,920 --> 00:09:04,560
complete smb2 only server

267
00:09:02,240 --> 00:09:08,080
and the last version of samba that

268
00:09:04,560 --> 00:09:10,079
supports smp1 will be 4.x.y

269
00:09:08,080 --> 00:09:12,959
because whenever we've deleted the last

270
00:09:10,080 --> 00:09:16,320
smb1 code i'm going to call it samba 5.

271
00:09:12,959 --> 00:09:18,640
that's my definition of samba 5.

272
00:09:16,320 --> 00:09:20,880
having that code in there makes it

273
00:09:18,640 --> 00:09:24,080
increasingly hard to modernize the

274
00:09:20,880 --> 00:09:25,680
internals and to do the clustering work

275
00:09:24,080 --> 00:09:28,160
mostly it's past name base which we're

276
00:09:25,680 --> 00:09:30,640
trying to get rid of and

277
00:09:28,160 --> 00:09:32,719
essentially before i can really finish

278
00:09:30,640 --> 00:09:35,040
the smb2 extensions

279
00:09:32,720 --> 00:09:36,720
uh i need to update the vfs so there's a

280
00:09:35,040 --> 00:09:37,599
lot of there's a lot of dependencies in

281
00:09:36,720 --> 00:09:40,240
the chain on this

282
00:09:37,600 --> 00:09:41,120
which we're working on but let's die smb

283
00:09:40,240 --> 00:09:42,480
one die

284
00:09:41,120 --> 00:09:45,120
so eventually what we're planning is

285
00:09:42,480 --> 00:09:46,640
that people who really have to have smb1

286
00:09:45,120 --> 00:09:48,720
will have the last version of samba

287
00:09:46,640 --> 00:09:50,560
which supports sme one people probably

288
00:09:48,720 --> 00:09:52,720
run it on raspberry pi's and then do an

289
00:09:50,560 --> 00:09:55,119
smb2 mount from the raspberry pi

290
00:09:52,720 --> 00:09:56,959
to the real real server and just gateway

291
00:09:55,120 --> 00:09:58,160
to smb1 and that's

292
00:09:56,959 --> 00:10:00,319
there are people out there who are going

293
00:09:58,160 --> 00:10:02,240
to need that a few years ago we had a

294
00:10:00,320 --> 00:10:03,920
guy turn up and said my industrial

295
00:10:02,240 --> 00:10:05,760
controller in germany that's running a

296
00:10:03,920 --> 00:10:07,760
blast furnace runs a dos

297
00:10:05,760 --> 00:10:09,519
and no your latest version of samba

298
00:10:07,760 --> 00:10:10,319
stopped stopped working with me what did

299
00:10:09,519 --> 00:10:12,079
you do

300
00:10:10,320 --> 00:10:14,240
and so we had to go back and fix it you

301
00:10:12,079 --> 00:10:16,479
know i mean and we have os2 people

302
00:10:14,240 --> 00:10:17,760
and you know and microsoft has abandoned

303
00:10:16,480 --> 00:10:19,519
those customers so it's it

304
00:10:17,760 --> 00:10:21,120
is nice to show the power of free

305
00:10:19,519 --> 00:10:23,519
software by keeping those things running

306
00:10:21,120 --> 00:10:25,920
if we can

307
00:10:23,519 --> 00:10:28,320
um as i say the vfs was originally

308
00:10:25,920 --> 00:10:31,120
designed around posix the 1990s it's

309
00:10:28,320 --> 00:10:33,200
open close read write very simple

310
00:10:31,120 --> 00:10:35,040
modern unix system calls i don't know

311
00:10:33,200 --> 00:10:35,519
however most people are probably using

312
00:10:35,040 --> 00:10:38,399
some

313
00:10:35,519 --> 00:10:39,440
web framework wrapped in rust or go or c

314
00:10:38,399 --> 00:10:42,240
plus plus or whatever

315
00:10:39,440 --> 00:10:44,160
but down and dirty under the covers the

316
00:10:42,240 --> 00:10:47,519
modern unix system calls our open app

317
00:10:44,160 --> 00:10:50,719
f-stat remove rmdr act they all work

318
00:10:47,519 --> 00:10:51,519
relative to a file descriptor and their

319
00:10:50,720 --> 00:10:54,240
sim link safe

320
00:10:51,519 --> 00:10:56,160
if used correctly so we have a boatload

321
00:10:54,240 --> 00:10:56,720
of code in summer making a sim link safe

322
00:10:56,160 --> 00:10:59,600
that can

323
00:10:56,720 --> 00:11:00,959
go away when we move all our vfs

324
00:10:59,600 --> 00:11:04,079
interfaces to the at

325
00:11:00,959 --> 00:11:07,359
versions the other issue

326
00:11:04,079 --> 00:11:09,120
is that multi-threaded operations we

327
00:11:07,360 --> 00:11:10,959
would like to thread as much as possible

328
00:11:09,120 --> 00:11:13,519
of samba for parallelization

329
00:11:10,959 --> 00:11:14,160
improvements on multi-core systems

330
00:11:13,519 --> 00:11:16,000
they're not

331
00:11:14,160 --> 00:11:17,519
terribly well served by the current vfs

332
00:11:16,000 --> 00:11:19,760
design the current vfs design

333
00:11:17,519 --> 00:11:21,680
assumes that the credentials stay the

334
00:11:19,760 --> 00:11:22,319
same throughout the entirety of the call

335
00:11:21,680 --> 00:11:23,680
chain

336
00:11:22,320 --> 00:11:25,920
when you're running in a multi-threaded

337
00:11:23,680 --> 00:11:28,000
environment that's not necessarily true

338
00:11:25,920 --> 00:11:29,519
especially on linux you can attach

339
00:11:28,000 --> 00:11:30,240
different credentials to different

340
00:11:29,519 --> 00:11:33,200
threads

341
00:11:30,240 --> 00:11:34,959
and so you know samba works by changing

342
00:11:33,200 --> 00:11:36,959
the credentials to the user

343
00:11:34,959 --> 00:11:38,560
who were impersonating on behalf of the

344
00:11:36,959 --> 00:11:39,920
client and so

345
00:11:38,560 --> 00:11:41,680
there are issues where we want to make

346
00:11:39,920 --> 00:11:44,240
sure that

347
00:11:41,680 --> 00:11:45,519
if we're halfway through processing a

348
00:11:44,240 --> 00:11:46,959
chain of requests

349
00:11:45,519 --> 00:11:48,560
we have to switch users that we're

350
00:11:46,959 --> 00:11:50,399
blocked and we have to switch users to

351
00:11:48,560 --> 00:11:52,479
process another set of requests

352
00:11:50,399 --> 00:11:54,320
that essentially the user isolation is

353
00:11:52,480 --> 00:11:57,360
is correct that so that's actually quite

354
00:11:54,320 --> 00:11:59,839
hard to do in the existing vfs

355
00:11:57,360 --> 00:12:02,160
so our new bfs looks like uh it was the

356
00:11:59,839 --> 00:12:05,200
old you know smb vfs make their

357
00:12:02,160 --> 00:12:06,800
now it's smb me vfs make their app and

358
00:12:05,200 --> 00:12:08,160
instead of just passing in a standard

359
00:12:06,800 --> 00:12:10,959
integer file descriptor

360
00:12:08,160 --> 00:12:12,880
we pass a pointer to uh one of our

361
00:12:10,959 --> 00:12:14,800
directors one of our internal file open

362
00:12:12,880 --> 00:12:17,200
structures which has a lot more

363
00:12:14,800 --> 00:12:19,040
stuff attached to it and it makes the

364
00:12:17,200 --> 00:12:20,880
coding inside samba a lot easier

365
00:12:19,040 --> 00:12:23,199
and all names then passed in will become

366
00:12:20,880 --> 00:12:25,439
relative to the directory uh file

367
00:12:23,200 --> 00:12:26,240
pointer passed in so that actually moves

368
00:12:25,440 --> 00:12:29,440
us a lot

369
00:12:26,240 --> 00:12:31,920
closer to ntfs uh windows

370
00:12:29,440 --> 00:12:34,000
style requirements the one of the things

371
00:12:31,920 --> 00:12:35,439
uh i don't really like win32 and i don't

372
00:12:34,000 --> 00:12:36,880
really like the windows interface but

373
00:12:35,440 --> 00:12:38,639
one of the things that they really did

374
00:12:36,880 --> 00:12:39,200
get right is that everything is handle

375
00:12:38,639 --> 00:12:40,720
based

376
00:12:39,200 --> 00:12:42,720
everything is handle based there are

377
00:12:40,720 --> 00:12:44,480
very few path name operations

378
00:12:42,720 --> 00:12:45,760
mostly what you do is you take it or

379
00:12:44,480 --> 00:12:47,440
rather the path names

380
00:12:45,760 --> 00:12:49,040
what happens under the covers is a path

381
00:12:47,440 --> 00:12:50,480
name is translated internally into a

382
00:12:49,040 --> 00:12:51,279
handle and then the handle is what is

383
00:12:50,480 --> 00:12:54,320
operated on

384
00:12:51,279 --> 00:12:56,320
and so we need to be the same um

385
00:12:54,320 --> 00:12:58,079
this should when we're finished make it

386
00:12:56,320 --> 00:13:00,880
a lot easier for vfs

387
00:12:58,079 --> 00:13:02,800
oems to plug in advanced clustered file

388
00:13:00,880 --> 00:13:05,839
systems and to make sambara

389
00:13:02,800 --> 00:13:07,439
an easy front end for clustered uh seth

390
00:13:05,839 --> 00:13:10,639
gluster and all the other

391
00:13:07,440 --> 00:13:13,279
uh and the proprietary ones too

392
00:13:10,639 --> 00:13:14,880
the problem is we we stamp out a new

393
00:13:13,279 --> 00:13:17,839
release every six months

394
00:13:14,880 --> 00:13:18,160
and we're halfway through so i'm hoping

395
00:13:17,839 --> 00:13:20,480
so

396
00:13:18,160 --> 00:13:21,600
basically the vfs in 4.12 is kind of

397
00:13:20,480 --> 00:13:24,720
half handle

398
00:13:21,600 --> 00:13:25,680
half at base and half not i'm hoping for

399
00:13:24,720 --> 00:13:28,240
4.13

400
00:13:25,680 --> 00:13:30,000
um it will be finished unfortunately

401
00:13:28,240 --> 00:13:31,600
because a lot of the vfs vendors keep

402
00:13:30,000 --> 00:13:34,079
their code out of tree

403
00:13:31,600 --> 00:13:35,519
this some of unavoidable churn um that

404
00:13:34,079 --> 00:13:37,199
it's going to be a little painful but

405
00:13:35,519 --> 00:13:39,440
it's something we have to do in order to

406
00:13:37,200 --> 00:13:40,639
modernize the file server

407
00:13:39,440 --> 00:13:42,320
so i don't know if anyone's seen that

408
00:13:40,639 --> 00:13:43,760
before or probably can't read it but

409
00:13:42,320 --> 00:13:45,600
it's actually from the mozilla offices

410
00:13:43,760 --> 00:13:47,519
in san francisco i love this because

411
00:13:45,600 --> 00:13:49,680
it's it's so it's just as true now as

412
00:13:47,519 --> 00:13:51,199
when it was posted in the early 2000s

413
00:13:49,680 --> 00:13:52,800
and that little poster up there that

414
00:13:51,199 --> 00:13:53,920
guy's about six foot or so and that

415
00:13:52,800 --> 00:13:55,439
poster up there says

416
00:13:53,920 --> 00:13:57,839
must be this tall to write

417
00:13:55,440 --> 00:14:02,240
multi-threaded code

418
00:13:57,839 --> 00:14:04,399
and that and that is just true um

419
00:14:02,240 --> 00:14:06,079
there was a a boatload of samba

420
00:14:04,399 --> 00:14:07,600
competitors that were rewritten and that

421
00:14:06,079 --> 00:14:09,760
big thing was oh we're threaded rather

422
00:14:07,600 --> 00:14:11,760
than that old crafty crappy samba

423
00:14:09,760 --> 00:14:13,279
many of them have failed or at least had

424
00:14:11,760 --> 00:14:15,120
horrible horrible bugs

425
00:14:13,279 --> 00:14:17,519
because they were multi-threaded it's

426
00:14:15,120 --> 00:14:20,399
really really hard to get that right

427
00:14:17,519 --> 00:14:21,040
i mean it can be done obviously and um

428
00:14:20,399 --> 00:14:23,040
you know

429
00:14:21,040 --> 00:14:24,399
a company was bought who actually

430
00:14:23,040 --> 00:14:26,240
produced one of these things

431
00:14:24,399 --> 00:14:28,880
simply to get access to the engineers

432
00:14:26,240 --> 00:14:30,480
who could fix the damn bugs that were

433
00:14:28,880 --> 00:14:31,920
causing a major am to have problems who

434
00:14:30,480 --> 00:14:35,120
was using it

435
00:14:31,920 --> 00:14:36,959
so most of our code is still single

436
00:14:35,120 --> 00:14:39,760
threaded but what we try and do

437
00:14:36,959 --> 00:14:40,719
is do send receive calls to make things

438
00:14:39,760 --> 00:14:42,319
asynchronous

439
00:14:40,720 --> 00:14:44,000
now we're single threaded going out the

440
00:14:42,320 --> 00:14:45,680
socket because you've got one stream of

441
00:14:44,000 --> 00:14:46,160
requests coming in a stream of requests

442
00:14:45,680 --> 00:14:47,760
coming out

443
00:14:46,160 --> 00:14:50,160
you can't really parallelize that you're

444
00:14:47,760 --> 00:14:54,000
just going down one single

445
00:14:50,160 --> 00:14:56,000
uh synchronous wire um so

446
00:14:54,000 --> 00:14:57,040
we are trying to move the vfs so that

447
00:14:56,000 --> 00:15:00,399
you can have multiple

448
00:14:57,040 --> 00:15:02,880
outstanding calls going on inside samba

449
00:15:00,399 --> 00:15:04,480
simultaneously and you know the

450
00:15:02,880 --> 00:15:05,600
synchronization point is still reading

451
00:15:04,480 --> 00:15:08,560
and writing to the client

452
00:15:05,600 --> 00:15:09,519
but our new calls look like smb of vfs p

453
00:15:08,560 --> 00:15:12,239
read send

454
00:15:09,519 --> 00:15:13,920
and smv vfsp read receive so what will

455
00:15:12,240 --> 00:15:15,279
happen is the control flow will come in

456
00:15:13,920 --> 00:15:17,040
we'll pass a read call

457
00:15:15,279 --> 00:15:18,560
we'll issue the p read send and then

458
00:15:17,040 --> 00:15:20,719
we'll go back to our main event loop

459
00:15:18,560 --> 00:15:21,760
and do other stuff and when the event

460
00:15:20,720 --> 00:15:25,760
when the send is

461
00:15:21,760 --> 00:15:27,680
when the read is finished um and as

462
00:15:25,760 --> 00:15:29,680
fill the buffer to go back out the wire

463
00:15:27,680 --> 00:15:31,680
then uh p read receive is called and

464
00:15:29,680 --> 00:15:33,519
that then picks up where the reed

465
00:15:31,680 --> 00:15:35,359
started and finishes processing going

466
00:15:33,519 --> 00:15:37,759
out the wire

467
00:15:35,360 --> 00:15:39,199
and that actually allows us we have a

468
00:15:37,759 --> 00:15:41,680
really really nice

469
00:15:39,199 --> 00:15:43,758
p thread pool implementation has anyone

470
00:15:41,680 --> 00:15:46,638
ever written a pthread pool

471
00:15:43,759 --> 00:15:48,160
oh okay uh yes yes they're really really

472
00:15:46,639 --> 00:15:50,160
hard aren't they jeff

473
00:15:48,160 --> 00:15:51,600
sorry uh we had one person there who's

474
00:15:50,160 --> 00:15:53,839
also a samba team member

475
00:15:51,600 --> 00:15:55,519
um who but whose pthread work was was

476
00:15:53,839 --> 00:15:58,800
different from samba

477
00:15:55,519 --> 00:16:00,560
it's a nightmare to get right um

478
00:15:58,800 --> 00:16:01,920
we have a p thread pool implementation

479
00:16:00,560 --> 00:16:03,359
that's been written and worked on by

480
00:16:01,920 --> 00:16:04,959
some of the cleverest engineers i know

481
00:16:03,360 --> 00:16:07,199
in cerner in germany

482
00:16:04,959 --> 00:16:08,399
they are still finding synchronization

483
00:16:07,199 --> 00:16:10,319
books five

484
00:16:08,399 --> 00:16:11,600
seven years later it's really really

485
00:16:10,320 --> 00:16:12,480
really hard that's the

486
00:16:11,600 --> 00:16:14,480
must be this tool to write

487
00:16:12,480 --> 00:16:15,600
multi-threaded code even if they stand

488
00:16:14,480 --> 00:16:16,639
on top of each other they're probably

489
00:16:15,600 --> 00:16:20,399
not that tall

490
00:16:16,639 --> 00:16:21,680
um so what we do is we try and hide our

491
00:16:20,399 --> 00:16:24,720
threading infrastructure

492
00:16:21,680 --> 00:16:26,719
inside the vfs course so our threading

493
00:16:24,720 --> 00:16:28,800
infrastructure is as simple as possible

494
00:16:26,720 --> 00:16:29,440
we say okay we're going to do a spin up

495
00:16:28,800 --> 00:16:31,439
a thread

496
00:16:29,440 --> 00:16:32,639
make this system call do the thing

497
00:16:31,440 --> 00:16:35,600
return

498
00:16:32,639 --> 00:16:36,399
no complex synchronization of big data

499
00:16:35,600 --> 00:16:39,040
structures

500
00:16:36,399 --> 00:16:39,759
no locking all over the place we just

501
00:16:39,040 --> 00:16:42,480
try and hide

502
00:16:39,759 --> 00:16:43,600
the simplest things inside threats which

503
00:16:42,480 --> 00:16:46,720
is

504
00:16:43,600 --> 00:16:48,320
manageable i think the

505
00:16:46,720 --> 00:16:50,399
impersonation infrastructure is in

506
00:16:48,320 --> 00:16:52,079
progress not putting the code yet

507
00:16:50,399 --> 00:16:54,000
and what we're planning to do is every

508
00:16:52,079 --> 00:16:56,479
single vfs call will basically have a

509
00:16:54,000 --> 00:16:57,959
user credentials structure attached

510
00:16:56,480 --> 00:17:00,079
so that it's basically saying

511
00:16:57,959 --> 00:17:03,279
asynchronously do this thing

512
00:17:00,079 --> 00:17:05,039
as this user so at that point

513
00:17:03,279 --> 00:17:07,039
all of the underlying code has the

514
00:17:05,039 --> 00:17:08,240
information it needs if it needs to

515
00:17:07,039 --> 00:17:10,720
change credentials

516
00:17:08,240 --> 00:17:12,959
and on some systems like freebsd our two

517
00:17:10,720 --> 00:17:14,400
main systems now are linux and freebsd

518
00:17:12,959 --> 00:17:16,079
all of the other old unixes have

519
00:17:14,400 --> 00:17:17,839
essentially died

520
00:17:16,079 --> 00:17:19,438
flowers is dead illumas illuminated all

521
00:17:17,839 --> 00:17:20,958
of them uh and that's

522
00:17:19,439 --> 00:17:23,280
that's why we're able to move to the

523
00:17:20,959 --> 00:17:25,039
modern linux cisco interface of the at

524
00:17:23,280 --> 00:17:26,319
calls a lot of the older unixes have

525
00:17:25,039 --> 00:17:29,440
just don't have it

526
00:17:26,319 --> 00:17:31,440
anyway um so um

527
00:17:29,440 --> 00:17:33,440
freebsd which is our only other major

528
00:17:31,440 --> 00:17:34,559
platform doesn't have per thread

529
00:17:33,440 --> 00:17:36,160
credentials and i've

530
00:17:34,559 --> 00:17:38,080
been bugging them to put that in for

531
00:17:36,160 --> 00:17:40,240
about seven years and they're

532
00:17:38,080 --> 00:17:42,080
hopefully they will they will get there

533
00:17:40,240 --> 00:17:43,520
linux already has that we have uh the

534
00:17:42,080 --> 00:17:45,600
ability to attach

535
00:17:43,520 --> 00:17:47,520
uh specific user credentials to a single

536
00:17:45,600 --> 00:17:52,000
p thread so

537
00:17:47,520 --> 00:17:54,639
okay um we've moved standardized uh

538
00:17:52,000 --> 00:17:56,480
to the gnu tls encryption code that was

539
00:17:54,640 --> 00:17:59,360
work marvelous work done by andre

540
00:17:56,480 --> 00:18:01,120
schneer at red hat and that gives for

541
00:17:59,360 --> 00:18:02,879
encrypted s b connections which are

542
00:18:01,120 --> 00:18:03,520
increasingly important everybody runs

543
00:18:02,880 --> 00:18:05,840
everything

544
00:18:03,520 --> 00:18:06,799
everyone should run anything everything

545
00:18:05,840 --> 00:18:10,879
encrypted on the wire

546
00:18:06,799 --> 00:18:10,879
is stef encrypted on the wire jeff

547
00:18:11,360 --> 00:18:14,159
so the question the the question was

548
00:18:13,120 --> 00:18:14,719
he's definitely christian on the wire

549
00:18:14,160 --> 00:18:17,360
and

550
00:18:14,720 --> 00:18:18,080
yeah honest we've done it now um no one

551
00:18:17,360 --> 00:18:20,240
should be putting

552
00:18:18,080 --> 00:18:21,760
anything on the white unencrypted ever

553
00:18:20,240 --> 00:18:23,360
for any reason whatsoever

554
00:18:21,760 --> 00:18:25,200
everything on the network should be

555
00:18:23,360 --> 00:18:26,959
encrypted you cannot trust

556
00:18:25,200 --> 00:18:29,360
anything between a client and server

557
00:18:26,960 --> 00:18:31,280
endpoint just i don't care who makes it

558
00:18:29,360 --> 00:18:32,879
whether it's from the us from china

559
00:18:31,280 --> 00:18:34,639
whatever just everything should be end

560
00:18:32,880 --> 00:18:37,919
to end encrypted

561
00:18:34,640 --> 00:18:38,400
and so smb can do that and the gnu tls

562
00:18:37,919 --> 00:18:41,520
actually

563
00:18:38,400 --> 00:18:43,360
speeds up quite significantly mostly by

564
00:18:41,520 --> 00:18:46,639
just moving to a new aas

565
00:18:43,360 --> 00:18:50,639
advanced encryption standard algorithm

566
00:18:46,640 --> 00:18:52,320
um sorry the question is

567
00:18:50,640 --> 00:18:53,919
is that the default setting well for

568
00:18:52,320 --> 00:18:55,840
4.12 um

569
00:18:53,919 --> 00:18:56,960
i think the clients will negotiate that

570
00:18:55,840 --> 00:18:59,520
by default

571
00:18:56,960 --> 00:19:01,280
you have to turn that on uh per share or

572
00:18:59,520 --> 00:19:04,320
you can turn it on per share or globally

573
00:19:01,280 --> 00:19:06,720
it default depends if you ran with

574
00:19:04,320 --> 00:19:07,840
nosmb.com for a minimum smv.conf it

575
00:19:06,720 --> 00:19:11,919
would not be encrypted

576
00:19:07,840 --> 00:19:14,080
it's a one-line encryption uh equals

577
00:19:11,919 --> 00:19:15,760
mandatory and then everything going in

578
00:19:14,080 --> 00:19:17,840
and out of the server must be encrypted

579
00:19:15,760 --> 00:19:22,720
and it won't talk to you if it isn't

580
00:19:17,840 --> 00:19:25,120
so that's only smb3 by the way um

581
00:19:22,720 --> 00:19:26,400
so vista clients and windows 7 clients i

582
00:19:25,120 --> 00:19:28,080
don't think they will do that

583
00:19:26,400 --> 00:19:31,280
it's only modern windows 10 clients will

584
00:19:28,080 --> 00:19:33,918
do that and of course the linux client

585
00:19:31,280 --> 00:19:36,720
uh there's a i'm the samba clamp sorry

586
00:19:33,919 --> 00:19:39,919
okay i better hurry up um

587
00:19:36,720 --> 00:19:42,240
uh cernette has been working on the

588
00:19:39,919 --> 00:19:43,360
shemo databases essentially a lot of

589
00:19:42,240 --> 00:19:45,360
refactoring work that

590
00:19:43,360 --> 00:19:47,120
users haven't been seeing but what it

591
00:19:45,360 --> 00:19:49,280
has led in a very common case

592
00:19:47,120 --> 00:19:51,360
where you bring up a boatload of windows

593
00:19:49,280 --> 00:19:53,840
clients they all connect to one share

594
00:19:51,360 --> 00:19:55,199
they all take a changed notify handle on

595
00:19:53,840 --> 00:19:55,678
the root of the share which basically

596
00:19:55,200 --> 00:19:57,840
means

597
00:19:55,679 --> 00:19:59,600
oh yeah and if it's not too much trouble

598
00:19:57,840 --> 00:20:01,600
server if anyone changes

599
00:19:59,600 --> 00:20:03,360
anything on this share please send out

600
00:20:01,600 --> 00:20:06,000
asynchronous notifications and let me

601
00:20:03,360 --> 00:20:08,000
know oh great that's not putting a

602
00:20:06,000 --> 00:20:09,120
burden on the server at all is it really

603
00:20:08,000 --> 00:20:11,360
oh no oh

604
00:20:09,120 --> 00:20:12,399
give me ten more so you'll have like a

605
00:20:11,360 --> 00:20:14,399
thousand clients

606
00:20:12,400 --> 00:20:16,159
making that kind of call which means

607
00:20:14,400 --> 00:20:17,840
you've got a thousand opens on

608
00:20:16,159 --> 00:20:19,039
one particular handle at the root of the

609
00:20:17,840 --> 00:20:20,879
share and they're all they all have to

610
00:20:19,039 --> 00:20:22,240
be notified when anything changes

611
00:20:20,880 --> 00:20:24,080
and that's a horrible performance

612
00:20:22,240 --> 00:20:25,679
bottleneck so um

613
00:20:24,080 --> 00:20:27,600
valkyrie surnet managed to speed that up

614
00:20:25,679 --> 00:20:29,440
by a factor of 20 by basically

615
00:20:27,600 --> 00:20:30,559
refactoring the way our internal

616
00:20:29,440 --> 00:20:32,720
structures are handled

617
00:20:30,559 --> 00:20:34,559
it's complex i had to review the code i

618
00:20:32,720 --> 00:20:36,799
actually can't remember what it was now

619
00:20:34,559 --> 00:20:37,840
but it's very clever uh and it speeds up

620
00:20:36,799 --> 00:20:40,720
a lot

621
00:20:37,840 --> 00:20:41,520
um so the other thing they've been doing

622
00:20:40,720 --> 00:20:43,360
is separating

623
00:20:41,520 --> 00:20:45,200
separating out a lot of our data models

624
00:20:43,360 --> 00:20:46,639
to make them more cluster friendly

625
00:20:45,200 --> 00:20:49,120
i'll talk a little bit about that later

626
00:20:46,640 --> 00:20:51,200
but when you're doing an smb cluster

627
00:20:49,120 --> 00:20:52,959
the difference between that and nfs v3

628
00:20:51,200 --> 00:20:54,720
at least is that you have an enormous

629
00:20:52,960 --> 00:20:56,880
amount of state that s b

630
00:20:54,720 --> 00:20:57,919
needs to keep coherent between members

631
00:20:56,880 --> 00:21:01,120
of the cluster

632
00:20:57,919 --> 00:21:02,400
and so the more you conflate the data

633
00:21:01,120 --> 00:21:04,000
structures

634
00:21:02,400 --> 00:21:06,159
that you need to swap around the worse

635
00:21:04,000 --> 00:21:08,159
the traffic between cluster member gets

636
00:21:06,159 --> 00:21:10,080
so there's a lot of optimization work

637
00:21:08,159 --> 00:21:12,480
that can be done to actually make the

638
00:21:10,080 --> 00:21:14,720
cluster communication more efficient

639
00:21:12,480 --> 00:21:16,720
by looking at those data structures and

640
00:21:14,720 --> 00:21:18,159
then we've done a lot of uh

641
00:21:16,720 --> 00:21:20,000
against it's done a lot of work on the

642
00:21:18,159 --> 00:21:21,520
caching performance improvements

643
00:21:20,000 --> 00:21:23,679
there's just been a lot of small

644
00:21:21,520 --> 00:21:25,360
scalability work people identifying and

645
00:21:23,679 --> 00:21:27,200
fixing bottlenecks

646
00:21:25,360 --> 00:21:29,439
and then the other cool thing is uh has

647
00:21:27,200 --> 00:21:31,919
anyone heard of the new linux i o u ring

648
00:21:29,440 --> 00:21:33,840
um asynchronous io implementation so we

649
00:21:31,919 --> 00:21:37,520
have a module under development

650
00:21:33,840 --> 00:21:40,320
um it's um because it's german it's

651
00:21:37,520 --> 00:21:41,760
everything's done except the testing um

652
00:21:40,320 --> 00:21:45,200
it exists already

653
00:21:41,760 --> 00:21:47,120
it needs integrating no i i'm no i

654
00:21:45,200 --> 00:21:48,480
i'm sorry that sounded really bad i

655
00:21:47,120 --> 00:21:49,918
didn't mean to sound really bad

656
00:21:48,480 --> 00:21:52,159
what i meant what i was trying to say

657
00:21:49,919 --> 00:21:53,280
was that i'm incredibly impressed by the

658
00:21:52,159 --> 00:21:55,919
german engineering they

659
00:21:53,280 --> 00:21:57,200
get this stuff done really quickly the

660
00:21:55,919 --> 00:21:58,960
part of the testing is it needs a

661
00:21:57,200 --> 00:21:59,840
specific version of linux with the i o

662
00:21:58,960 --> 00:22:02,320
urine library

663
00:21:59,840 --> 00:22:03,918
um it's not their fault what i meant is

664
00:22:02,320 --> 00:22:05,760
they're excellent engineers i'm sorry if

665
00:22:03,919 --> 00:22:07,760
i

666
00:22:05,760 --> 00:22:09,280
i have to work with them every day so

667
00:22:07,760 --> 00:22:10,640
i'm really not trying to

668
00:22:09,280 --> 00:22:13,200
i'm really not trying to criticize them

669
00:22:10,640 --> 00:22:14,960
there uh what i'm trying to explain is

670
00:22:13,200 --> 00:22:17,039
why isn't already in the code base

671
00:22:14,960 --> 00:22:18,320
and they're kind of you know why isn't

672
00:22:17,039 --> 00:22:20,960
it in the code base well it

673
00:22:18,320 --> 00:22:23,600
needs the tests um so we need to have it

674
00:22:20,960 --> 00:22:25,120
integrated into the tests

675
00:22:23,600 --> 00:22:26,719
which i'll talk to a little bit about

676
00:22:25,120 --> 00:22:29,840
some building infrastructure

677
00:22:26,720 --> 00:22:31,360
um yes i really sorry sorry too i i

678
00:22:29,840 --> 00:22:34,559
offended the germans and that's

679
00:22:31,360 --> 00:22:37,840
that's so hard to do sorry

680
00:22:34,559 --> 00:22:40,720
okay so clustering improvements um

681
00:22:37,840 --> 00:22:41,439
as i mentioned before uh persistent

682
00:22:40,720 --> 00:22:43,600
handles

683
00:22:41,440 --> 00:22:44,480
our persistent handles will always be

684
00:22:43,600 --> 00:22:46,959
slow

685
00:22:44,480 --> 00:22:49,440
i don't care uh a persistent handle is

686
00:22:46,960 --> 00:22:52,559
where a client opens a handle and says

687
00:22:49,440 --> 00:22:54,960
i have a handle on this file if you

688
00:22:52,559 --> 00:22:56,799
if your entire cluster dies and you go

689
00:22:54,960 --> 00:22:58,559
away for a hundred years

690
00:22:56,799 --> 00:23:00,158
and then you come back on an ip address

691
00:22:58,559 --> 00:23:00,960
i know about and i reconnect and i hand

692
00:23:00,159 --> 00:23:04,320
you that handle

693
00:23:00,960 --> 00:23:05,039
my data had better be there in exactly

694
00:23:04,320 --> 00:23:06,879
the same state

695
00:23:05,039 --> 00:23:09,039
with all the locks that i had with all

696
00:23:06,880 --> 00:23:12,960
the pending operations still pending

697
00:23:09,039 --> 00:23:15,520
everything has to be what that means is

698
00:23:12,960 --> 00:23:16,480
every open has to check all other opens

699
00:23:15,520 --> 00:23:19,280
on the share mode

700
00:23:16,480 --> 00:23:21,360
and you have to do three uh you have to

701
00:23:19,280 --> 00:23:24,240
do essentially transactions

702
00:23:21,360 --> 00:23:25,520
acid transactions on every state change

703
00:23:24,240 --> 00:23:27,360
think about that

704
00:23:25,520 --> 00:23:29,520
every read every right every lock

705
00:23:27,360 --> 00:23:32,000
everything has to be persisted

706
00:23:29,520 --> 00:23:32,559
onto stable storage before you can

707
00:23:32,000 --> 00:23:36,720
return

708
00:23:32,559 --> 00:23:39,760
that operation completed now it's

709
00:23:36,720 --> 00:23:40,720
uh let me the so the question one does

710
00:23:39,760 --> 00:23:42,480
every read

711
00:23:40,720 --> 00:23:44,080
uh i don't think read has to be

712
00:23:42,480 --> 00:23:45,600
persisted but you have to be able to

713
00:23:44,080 --> 00:23:47,199
return the same data

714
00:23:45,600 --> 00:23:49,039
uh i think you would have to cache the

715
00:23:47,200 --> 00:23:50,720
data such that

716
00:23:49,039 --> 00:23:52,400
if the cluster went down before you'd

717
00:23:50,720 --> 00:23:54,159
returned you were still returning the

718
00:23:52,400 --> 00:23:56,480
same data that you were

719
00:23:54,159 --> 00:23:58,799
reading i believe i'd have to look very

720
00:23:56,480 --> 00:24:02,159
carefully at the guarantees on that

721
00:23:58,799 --> 00:24:05,279
um it's yeah it's

722
00:24:02,159 --> 00:24:06,960
difficult and it will be slow

723
00:24:05,279 --> 00:24:08,480
so the only the only programs that

724
00:24:06,960 --> 00:24:11,360
really really need it

725
00:24:08,480 --> 00:24:12,960
are a sql server to be honest a sql

726
00:24:11,360 --> 00:24:14,320
server running on an smb share really

727
00:24:12,960 --> 00:24:16,159
needs this everything else

728
00:24:14,320 --> 00:24:17,760
they claim they need it they claim their

729
00:24:16,159 --> 00:24:19,760
data is important um

730
00:24:17,760 --> 00:24:21,600
they are make backups screw you guys i

731
00:24:19,760 --> 00:24:23,440
mean

732
00:24:21,600 --> 00:24:25,120
your data is not that important i don't

733
00:24:23,440 --> 00:24:27,200
care how important you think it is

734
00:24:25,120 --> 00:24:28,639
your database you're important everyone

735
00:24:27,200 --> 00:24:31,440
else use the database

736
00:24:28,640 --> 00:24:32,240
um and they'll take care of it for you

737
00:24:31,440 --> 00:24:33,679
um so

738
00:24:32,240 --> 00:24:35,440
with the result of that persistent

739
00:24:33,679 --> 00:24:36,960
handles at least in a windows cluster

740
00:24:35,440 --> 00:24:39,279
are usually turned on on a per

741
00:24:36,960 --> 00:24:41,200
share basis so it's like okay here's my

742
00:24:39,279 --> 00:24:41,919
slow share i have persistent handles

743
00:24:41,200 --> 00:24:43,440
turned on

744
00:24:41,919 --> 00:24:45,039
for all the other shares the clients can

745
00:24:43,440 --> 00:24:46,720
ask the persistent handles and we'll say

746
00:24:45,039 --> 00:24:49,279
no

747
00:24:46,720 --> 00:24:50,159
so we have a plan for doing this um it's

748
00:24:49,279 --> 00:24:51,840
all scoped out

749
00:24:50,159 --> 00:24:53,440
it just needs essentially the

750
00:24:51,840 --> 00:24:53,760
engineering time and effort putting into

751
00:24:53,440 --> 00:24:57,520
it

752
00:24:53,760 --> 00:25:00,000
i'm expecting it to be coming in uh

753
00:24:57,520 --> 00:25:01,200
4.x where x is greater than 12 but i

754
00:25:00,000 --> 00:25:03,039
don't know what that number is

755
00:25:01,200 --> 00:25:04,640
um but there is a lot of there's a lot

756
00:25:03,039 --> 00:25:05,120
of oems who've asked for this there's a

757
00:25:04,640 --> 00:25:07,039
lot of

758
00:25:05,120 --> 00:25:08,399
uh requests for it because people really

759
00:25:07,039 --> 00:25:10,640
want to run oh the other the other

760
00:25:08,400 --> 00:25:13,520
people who need it are people running

761
00:25:10,640 --> 00:25:15,279
um vms ooh i better hurry uh vms who

762
00:25:13,520 --> 00:25:17,520
want to persist vm state and they're

763
00:25:15,279 --> 00:25:19,760
running they need position handles too

764
00:25:17,520 --> 00:25:21,120
there's been many improvements in samba

765
00:25:19,760 --> 00:25:24,158
ctdb cluster

766
00:25:21,120 --> 00:25:24,879
clustering not um the least of which is

767
00:25:24,159 --> 00:25:27,440
the

768
00:25:24,880 --> 00:25:28,400
ability to separate out the clustering

769
00:25:27,440 --> 00:25:30,159
calls

770
00:25:28,400 --> 00:25:33,120
such that if you want to this is another

771
00:25:30,159 --> 00:25:34,720
oem ask the oems have said well samba is

772
00:25:33,120 --> 00:25:36,320
great we love the smb stuff i

773
00:25:34,720 --> 00:25:38,400
we think our cluster manager is better

774
00:25:36,320 --> 00:25:40,000
than yours why can't we use samba with

775
00:25:38,400 --> 00:25:41,679
our cluster manager why do we have to

776
00:25:40,000 --> 00:25:44,240
layer yours on top of hours

777
00:25:41,679 --> 00:25:44,880
so the idea is to separate that out so

778
00:25:44,240 --> 00:25:47,360
that

779
00:25:44,880 --> 00:25:49,039
ctdb is separable from samba still

780
00:25:47,360 --> 00:25:52,639
tested and integrated and that's

781
00:25:49,039 --> 00:25:55,520
what we would benchmark against but

782
00:25:52,640 --> 00:25:57,279
allows oems to make make sambar a little

783
00:25:55,520 --> 00:25:58,480
more modular and flexible so an oem who

784
00:25:57,279 --> 00:25:59,600
has their own cluster manager that

785
00:25:58,480 --> 00:26:01,840
they're really happy with

786
00:25:59,600 --> 00:26:02,719
they can keep using that the other thing

787
00:26:01,840 --> 00:26:05,120
that we need for that

788
00:26:02,720 --> 00:26:07,200
is we need to have ctdb merged into our

789
00:26:05,120 --> 00:26:10,239
continuous integration

790
00:26:07,200 --> 00:26:12,080
testing so yes as i said

791
00:26:10,240 --> 00:26:13,679
pluggable clustering decouple to allow

792
00:26:12,080 --> 00:26:17,360
third-party cluster managers

793
00:26:13,679 --> 00:26:19,919
okay uh who here has written their own

794
00:26:17,360 --> 00:26:21,600
crypto code

795
00:26:19,919 --> 00:26:23,600
yes sucks doesn't it and it was full of

796
00:26:21,600 --> 00:26:26,559
holes like mine um

797
00:26:23,600 --> 00:26:27,840
so get don't write your own crypto it's

798
00:26:26,559 --> 00:26:30,000
just like you wouldn't

799
00:26:27,840 --> 00:26:31,678
smelt the metal to make your own car

800
00:26:30,000 --> 00:26:33,679
don't write your own crypto code leave

801
00:26:31,679 --> 00:26:36,000
it to the experts and in this case

802
00:26:33,679 --> 00:26:37,520
we just decided to standardize on gnu

803
00:26:36,000 --> 00:26:39,279
tls we needed to feed back to the

804
00:26:37,520 --> 00:26:40,639
genutless maintainers to fix some of the

805
00:26:39,279 --> 00:26:44,080
things we needed

806
00:26:40,640 --> 00:26:44,640
but essentially just don't do your own

807
00:26:44,080 --> 00:26:48,000
crypto

808
00:26:44,640 --> 00:26:50,000
uh it sucks you'll get it wrong so

809
00:26:48,000 --> 00:26:52,400
you know we we basically outsourced that

810
00:26:50,000 --> 00:26:55,120
source of cves which are vulnerability

811
00:26:52,400 --> 00:26:57,440
uh announcements to to gnu tls so now we

812
00:26:55,120 --> 00:27:00,799
can blame them for everyone that's great

813
00:26:57,440 --> 00:27:03,120
um so during because of the history of

814
00:27:00,799 --> 00:27:04,960
samba growth we have two rpc server

815
00:27:03,120 --> 00:27:05,360
remote procedural server implementations

816
00:27:04,960 --> 00:27:06,640
and

817
00:27:05,360 --> 00:27:08,399
to remote procedural client

818
00:27:06,640 --> 00:27:09,919
implementations back when the project

819
00:27:08,400 --> 00:27:11,679
was kind of fragmenting we've now

820
00:27:09,919 --> 00:27:13,360
stitched it back together we need to

821
00:27:11,679 --> 00:27:14,720
drop two of

822
00:27:13,360 --> 00:27:16,080
hopefully not both servers and both

823
00:27:14,720 --> 00:27:17,120
clients but we need to drop one server

824
00:27:16,080 --> 00:27:19,120
and one client

825
00:27:17,120 --> 00:27:20,639
that to merge the framework back into

826
00:27:19,120 --> 00:27:23,279
something manageable that's

827
00:27:20,640 --> 00:27:24,480
ongoing work um there's a massive patch

828
00:27:23,279 --> 00:27:27,840
set running in gitlab

829
00:27:24,480 --> 00:27:31,039
it will eventually get put in um and

830
00:27:27,840 --> 00:27:32,480
ah fully asynchronous rpc calls uh the

831
00:27:31,039 --> 00:27:33,600
person who is working on that i believe

832
00:27:32,480 --> 00:27:34,159
is in this room and i'm going to put

833
00:27:33,600 --> 00:27:35,918
them on the spot

834
00:27:34,159 --> 00:27:38,320
gunther how close is that work to be

835
00:27:35,919 --> 00:27:38,320
merged

836
00:27:44,480 --> 00:27:47,679
so gunther tells me he's going to

837
00:27:45,840 --> 00:27:49,439
rewrite all the old code to match the

838
00:27:47,679 --> 00:27:51,679
new rpc server framework thank you

839
00:27:49,440 --> 00:27:54,000
that's great i will await the check-in

840
00:27:51,679 --> 00:27:57,360
i'm happy to review gunther um and we

841
00:27:54,000 --> 00:27:59,200
need that for the smb witness service

842
00:27:57,360 --> 00:28:01,039
and there's also some work that's

843
00:27:59,200 --> 00:28:03,440
ongoing um

844
00:28:01,039 --> 00:28:04,720
to allow the other thing that uh some

845
00:28:03,440 --> 00:28:06,799
vendors have said is well we have a

846
00:28:04,720 --> 00:28:07,600
great smb server we we like ours we

847
00:28:06,799 --> 00:28:09,600
don't want yours

848
00:28:07,600 --> 00:28:10,799
but you do our pc services which really

849
00:28:09,600 --> 00:28:12,158
which really sucks by the way if

850
00:28:10,799 --> 00:28:14,559
anyone's ever implemented the

851
00:28:12,159 --> 00:28:16,640
windows rpc it's awful terrible and a

852
00:28:14,559 --> 00:28:19,039
massive source of cves

853
00:28:16,640 --> 00:28:20,720
so they would like to use our rpc

854
00:28:19,039 --> 00:28:22,080
framework but not our file server so

855
00:28:20,720 --> 00:28:23,520
there's some work going on to make

856
00:28:22,080 --> 00:28:24,720
somewhere more modular there going to

857
00:28:23,520 --> 00:28:27,120
hurry up a little

858
00:28:24,720 --> 00:28:28,240
smb of a quick has anyone ever heard of

859
00:28:27,120 --> 00:28:30,799
quick

860
00:28:28,240 --> 00:28:32,080
okay cool oh wow all right it's so so

861
00:28:30,799 --> 00:28:34,000
it's going to take over the world

862
00:28:32,080 --> 00:28:35,840
microsoft actually have servers and

863
00:28:34,000 --> 00:28:37,840
clients running with smb of a quick

864
00:28:35,840 --> 00:28:39,360
the great thing about that is that all

865
00:28:37,840 --> 00:28:41,439
of the isps who block

866
00:28:39,360 --> 00:28:42,959
the s b port 445 they're screwed they

867
00:28:41,440 --> 00:28:44,720
can't block the quick protocol because

868
00:28:42,960 --> 00:28:47,039
it's running over https

869
00:28:44,720 --> 00:28:47,840
essentially so you can actually then

870
00:28:47,039 --> 00:28:49,760
share files

871
00:28:47,840 --> 00:28:52,959
um a lot of people are going to be very

872
00:28:49,760 --> 00:28:54,158
unhappy about this but anyway

873
00:28:52,960 --> 00:28:56,000
they're very happy to open it and

874
00:28:54,159 --> 00:28:57,679
document everything that you need

875
00:28:56,000 --> 00:29:00,080
microsoft is a joy to work with these

876
00:28:57,679 --> 00:29:00,480
days so you know we've been looking at

877
00:29:00,080 --> 00:29:02,000
this

878
00:29:00,480 --> 00:29:03,600
we've been looking for possible quick

879
00:29:02,000 --> 00:29:03,919
libraries on linux it's not going to be

880
00:29:03,600 --> 00:29:05,760
too

881
00:29:03,919 --> 00:29:07,520
hard i think to adopt one and work with

882
00:29:05,760 --> 00:29:10,320
it our big issues

883
00:29:07,520 --> 00:29:12,000
are a quick connection comes in it's

884
00:29:10,320 --> 00:29:14,799
essentially talking to a web server

885
00:29:12,000 --> 00:29:16,320
how do we how do we there as far as i

886
00:29:14,799 --> 00:29:18,879
know there are no standard ways

887
00:29:16,320 --> 00:29:20,639
on linux web servers of essentially

888
00:29:18,880 --> 00:29:22,240
having a port mapper where you have a

889
00:29:20,640 --> 00:29:24,080
request coming in saying i'm not really

890
00:29:22,240 --> 00:29:25,039
a web server request i'm an s p request

891
00:29:24,080 --> 00:29:26,879
coming in over quick

892
00:29:25,039 --> 00:29:28,158
please route me to the smb server i

893
00:29:26,880 --> 00:29:29,760
don't know how that's done yet i don't

894
00:29:28,159 --> 00:29:30,480
think anyone's worked that out on linux

895
00:29:29,760 --> 00:29:32,559
yet

896
00:29:30,480 --> 00:29:33,840
mostly quickies being used just for web

897
00:29:32,559 --> 00:29:36,080
uh traffic

898
00:29:33,840 --> 00:29:38,000
so there's lots of interest in this we

899
00:29:36,080 --> 00:29:40,480
think it's gonna break open and make smb

900
00:29:38,000 --> 00:29:41,840
accessible everywhere

901
00:29:40,480 --> 00:29:43,520
but we don't quite know how it's going

902
00:29:41,840 --> 00:29:46,399
to work yet and i

903
00:29:43,520 --> 00:29:47,520
truly believe that smb3 of a quick is

904
00:29:46,399 --> 00:29:49,439
the way that most

905
00:29:47,520 --> 00:29:51,200
on-premises clients are going to talk to

906
00:29:49,440 --> 00:29:53,440
cloud storage in the future because it's

907
00:29:51,200 --> 00:29:54,559
just such a nice protocol fully

908
00:29:53,440 --> 00:29:57,279
encrypted

909
00:29:54,559 --> 00:29:58,320
um you know it has all of the semantics

910
00:29:57,279 --> 00:30:00,480
that you would want

911
00:29:58,320 --> 00:30:02,080
to make seamless cloud computing a

912
00:30:00,480 --> 00:30:04,159
reality you basically you plug your

913
00:30:02,080 --> 00:30:06,879
ethernet into the wall and you've got

914
00:30:04,159 --> 00:30:08,880
multi petabytes or exabytes of storage

915
00:30:06,880 --> 00:30:11,679
available to you all over smb

916
00:30:08,880 --> 00:30:13,360
so a lot of work in active directory

917
00:30:11,679 --> 00:30:14,799
that's been done by catalyst

918
00:30:13,360 --> 00:30:16,240
the catalyst company in new zealand

919
00:30:14,799 --> 00:30:17,600
they're mostly the one who opened it i'm

920
00:30:16,240 --> 00:30:20,399
really going to hurry up now

921
00:30:17,600 --> 00:30:22,639
um they've now got installation scaling

922
00:30:20,399 --> 00:30:24,879
up to 300 thousand user objects

923
00:30:22,640 --> 00:30:26,640
um a lot of performance improvements

924
00:30:24,880 --> 00:30:28,000
gone into that a preform model

925
00:30:26,640 --> 00:30:30,480
they will they can do smart card

926
00:30:28,000 --> 00:30:32,480
authentication they have a json security

927
00:30:30,480 --> 00:30:33,840
logging module that will um produce

928
00:30:32,480 --> 00:30:36,640
security logging in

929
00:30:33,840 --> 00:30:38,000
json possible format there are some

930
00:30:36,640 --> 00:30:39,520
large european governments

931
00:30:38,000 --> 00:30:41,120
that are using this i'm not going to

932
00:30:39,520 --> 00:30:42,480
mention any names that they can do a

933
00:30:41,120 --> 00:30:44,639
separate talk of their own and they do

934
00:30:42,480 --> 00:30:46,799
actually

935
00:30:44,640 --> 00:30:48,799
the missing features are active

936
00:30:46,799 --> 00:30:51,039
directory web services

937
00:30:48,799 --> 00:30:52,158
and the issue with that for us is we

938
00:30:51,039 --> 00:30:53,679
really don't want to be in the web

939
00:30:52,159 --> 00:30:54,559
server business we tried that once and

940
00:30:53,679 --> 00:30:57,120
we suck at it

941
00:30:54,559 --> 00:30:58,000
um we just don't want to be a web server

942
00:30:57,120 --> 00:30:59,600
so again

943
00:30:58,000 --> 00:31:01,360
we need to find some way to integrate

944
00:30:59,600 --> 00:31:02,158
with web servers so the active directory

945
00:31:01,360 --> 00:31:03,760
web request

946
00:31:02,159 --> 00:31:05,519
remember on windows all this stuff is

947
00:31:03,760 --> 00:31:06,640
integrated you're basically running ins

948
00:31:05,519 --> 00:31:08,559
and it knows how to root

949
00:31:06,640 --> 00:31:10,080
stuff to do the s b requests or the

950
00:31:08,559 --> 00:31:11,678
active directory requests

951
00:31:10,080 --> 00:31:13,678
we need to figure that out in the open

952
00:31:11,679 --> 00:31:16,080
source components on linux i don't know

953
00:31:13,679 --> 00:31:19,600
how we're going to do that yet that's

954
00:31:16,080 --> 00:31:21,120
less of my area okay uh project

955
00:31:19,600 --> 00:31:23,039
infrastructure we moved to gitlab who's

956
00:31:21,120 --> 00:31:24,479
on git lab

957
00:31:23,039 --> 00:31:26,158
okay well everyone have some github

958
00:31:24,480 --> 00:31:29,360
screw you guys it's proprietary

959
00:31:26,159 --> 00:31:30,480
um git labs where the cool kids are

960
00:31:29,360 --> 00:31:33,199
gnome's there

961
00:31:30,480 --> 00:31:34,240
so our project workflow is mostly now on

962
00:31:33,200 --> 00:31:36,320
gitlab

963
00:31:34,240 --> 00:31:37,919
um you can still work on some of the old

964
00:31:36,320 --> 00:31:39,678
ways sending patches to the mailing list

965
00:31:37,919 --> 00:31:40,880
but mostly what you do now is you make

966
00:31:39,679 --> 00:31:45,360
pull requests

967
00:31:40,880 --> 00:31:47,039
uh note requests on gitlab and you can

968
00:31:45,360 --> 00:31:48,719
any user can run the continuous

969
00:31:47,039 --> 00:31:50,720
integration so they can actually

970
00:31:48,720 --> 00:31:51,919
submit a patch and say hey i run your

971
00:31:50,720 --> 00:31:53,919
test suite and my patch

972
00:31:51,919 --> 00:31:55,039
doesn't break it because that's kind of

973
00:31:53,919 --> 00:31:56,399
a uh you know

974
00:31:55,039 --> 00:31:57,919
otherwise they would have to spend that

975
00:31:56,399 --> 00:31:59,439
it's like four to six hours running the

976
00:31:57,919 --> 00:32:00,960
regression twist test suite on a

977
00:31:59,440 --> 00:32:02,320
powerful local machine

978
00:32:00,960 --> 00:32:04,080
now they can just outsource it to the

979
00:32:02,320 --> 00:32:06,158
gitlab cloud and that

980
00:32:04,080 --> 00:32:08,320
really works well so we still maintain

981
00:32:06,159 --> 00:32:10,399
the code quality by having to have

982
00:32:08,320 --> 00:32:12,720
two sam core samba team engineering

983
00:32:10,399 --> 00:32:14,879
review before we will actually merge it

984
00:32:12,720 --> 00:32:16,399
and plus we're paranoid and our real

985
00:32:14,880 --> 00:32:18,000
source code doesn't live in gitlab

986
00:32:16,399 --> 00:32:20,080
uh the gitlab is a mirror of our real

987
00:32:18,000 --> 00:32:23,519
source code which still lives on a

988
00:32:20,080 --> 00:32:24,799
independently maintained server a lot of

989
00:32:23,519 --> 00:32:26,720
fuzzing work has been done

990
00:32:24,799 --> 00:32:28,320
we originally first with codenomicon a

991
00:32:26,720 --> 00:32:29,200
proprietary tool which was utterly

992
00:32:28,320 --> 00:32:31,439
superb

993
00:32:29,200 --> 00:32:32,960
they still will run on us for free

994
00:32:31,440 --> 00:32:34,640
because we're kind of a famous project

995
00:32:32,960 --> 00:32:36,559
but this is i mean

996
00:32:34,640 --> 00:32:38,880
we would really like open source tools

997
00:32:36,559 --> 00:32:40,879
so um a catalyst has been doing a lot of

998
00:32:38,880 --> 00:32:43,679
work to integrate with oss fuzz

999
00:32:40,880 --> 00:32:44,799
running in the cloud and a boatload of

1000
00:32:43,679 --> 00:32:46,399
bugs have turned up

1001
00:32:44,799 --> 00:32:47,840
in code that we thought was safe and

1002
00:32:46,399 --> 00:32:50,080
stable and you know

1003
00:32:47,840 --> 00:32:51,600
none of them of course cvs yet i think

1004
00:32:50,080 --> 00:32:54,840
maybe maybe one or two

1005
00:32:51,600 --> 00:32:57,439
um but yeah this is uh this is a new

1006
00:32:54,840 --> 00:32:59,439
frontier we're hoping that samba will be

1007
00:32:57,440 --> 00:33:01,600
so battle-hardened i mean you know we

1008
00:32:59,440 --> 00:33:03,120
already got a sort of a five-star review

1009
00:33:01,600 --> 00:33:06,240
from the security

1010
00:33:03,120 --> 00:33:07,439
um the quality of code we still suck we

1011
00:33:06,240 --> 00:33:10,240
still have a lot of bugs

1012
00:33:07,440 --> 00:33:10,880
um you know if if we're this bad god

1013
00:33:10,240 --> 00:33:14,159
help

1014
00:33:10,880 --> 00:33:17,120
you know joe random github project

1015
00:33:14,159 --> 00:33:18,559
um so general assembly updates not

1016
00:33:17,120 --> 00:33:20,399
really something specific

1017
00:33:18,559 --> 00:33:21,678
uh ronnie solberg who works for red hat

1018
00:33:20,399 --> 00:33:22,959
don't know whether you know him he's a

1019
00:33:21,679 --> 00:33:25,360
washout contributor

1020
00:33:22,960 --> 00:33:26,240
author of lib nfs he decided to do the

1021
00:33:25,360 --> 00:33:28,479
same thing

1022
00:33:26,240 --> 00:33:30,960
uh with smb he said ah you guys are

1023
00:33:28,480 --> 00:33:32,000
bloated fat and ugly i'm gonna write a

1024
00:33:30,960 --> 00:33:35,679
minimal one

1025
00:33:32,000 --> 00:33:39,039
so on his own he wrote a 140 kilobyte

1026
00:33:35,679 --> 00:33:41,039
smb2 user space library zero copy

1027
00:33:39,039 --> 00:33:43,039
no external dependencies it literally

1028
00:33:41,039 --> 00:33:45,039
just uses lib c

1029
00:33:43,039 --> 00:33:46,640
now having said that the first time i

1030
00:33:45,039 --> 00:33:48,240
looked at the code when he said oh look

1031
00:33:46,640 --> 00:33:50,320
at this it's great i said ah

1032
00:33:48,240 --> 00:33:52,000
you've got an integer app overflow here

1033
00:33:50,320 --> 00:33:54,080
okay i'll fix it outfit

1034
00:33:52,000 --> 00:33:55,039
so it's now being reviewed a lot more

1035
00:33:54,080 --> 00:33:58,399
robust

1036
00:33:55,039 --> 00:34:00,799
and it's incredibly tiny you can build

1037
00:33:58,399 --> 00:34:02,639
don't let anyone say oh smb2 too bloated

1038
00:34:00,799 --> 00:34:05,679
as a client i can't i can't use it

1039
00:34:02,640 --> 00:34:07,039
you can put that tiny it's ldpl you can

1040
00:34:05,679 --> 00:34:09,760
put that tiny

1041
00:34:07,039 --> 00:34:11,359
uh user space library in anything he

1042
00:34:09,760 --> 00:34:13,919
someone had it running on some kind of

1043
00:34:11,359 --> 00:34:16,560
game console that he was using to

1044
00:34:13,918 --> 00:34:17,598
uh have a file server appear to be a

1045
00:34:16,560 --> 00:34:20,639
game cartridge

1046
00:34:17,599 --> 00:34:22,399
um source anyway plus the linux kernel

1047
00:34:20,639 --> 00:34:24,240
um courtesy of samsung is getting

1048
00:34:22,399 --> 00:34:27,279
experimental smb2

1049
00:34:24,239 --> 00:34:28,879
only server ksmbd uh right now it's kind

1050
00:34:27,280 --> 00:34:29,520
of a toy there's a lot of missing

1051
00:34:28,879 --> 00:34:33,359
features

1052
00:34:29,520 --> 00:34:34,879
but i uh went to the linux kernel talk

1053
00:34:33,359 --> 00:34:36,879
you know how linux kernel works

1054
00:34:34,879 --> 00:34:38,159
at the beginning of this and so i we're

1055
00:34:36,879 --> 00:34:40,960
doomed

1056
00:34:38,159 --> 00:34:42,639
eventually those guys will develop it so

1057
00:34:40,960 --> 00:34:43,359
much that it'll probably overtake us but

1058
00:34:42,639 --> 00:34:45,280
hey

1059
00:34:43,359 --> 00:34:47,279
uh not yet and so we're still having fun

1060
00:34:45,280 --> 00:34:48,000
with samba uh it's very limited

1061
00:34:47,280 --> 00:34:49,679
functionality

1062
00:34:48,000 --> 00:34:51,440
but it's it's something to look at uh

1063
00:34:49,679 --> 00:34:53,520
it's not in anyone's tree i think

1064
00:34:51,440 --> 00:34:55,280
um but if you're interested in that uh

1065
00:34:53,520 --> 00:34:58,320
the linux file sys

1066
00:34:55,280 --> 00:35:00,240
file server file system

1067
00:34:58,320 --> 00:35:01,440
ah one of the linux kernel mailing lists

1068
00:35:00,240 --> 00:35:02,879
has the details and they're working on

1069
00:35:01,440 --> 00:35:04,560
that in public so that'll be interesting

1070
00:35:02,880 --> 00:35:06,560
to look at

1071
00:35:04,560 --> 00:35:17,839
and that's it woohoo i finished on time

1072
00:35:06,560 --> 00:35:17,839
how about that any questions

1073
00:35:19,599 --> 00:35:21,680
you

