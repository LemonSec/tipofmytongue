1
00:00:05,120 --> 00:00:08,720
hello and welcome to my talk i'm stefan

2
00:00:07,040 --> 00:00:11,519
karkovsky i'm

3
00:00:08,720 --> 00:00:14,000
working at g note labs as a developer

4
00:00:11,519 --> 00:00:16,640
since more than 10 years now

5
00:00:14,000 --> 00:00:18,560
and i was focusing on the arm

6
00:00:16,640 --> 00:00:22,000
architecture mainly in the

7
00:00:18,560 --> 00:00:25,119
last years sorry

8
00:00:22,000 --> 00:00:29,359
and within the last 10 months

9
00:00:25,119 --> 00:00:32,479
we achieved quite a few steps to

10
00:00:29,359 --> 00:00:33,920
run gnode on mv8 machines on certain arm

11
00:00:32,479 --> 00:00:36,480
v8 hardware

12
00:00:33,920 --> 00:00:38,320
and today i want to demonstrate this to

13
00:00:36,480 --> 00:00:39,919
you so it's more technical demonstration

14
00:00:38,320 --> 00:00:42,480
with the focus on the demonstration not

15
00:00:39,920 --> 00:00:45,360
so much on the technical details

16
00:00:42,480 --> 00:00:46,559
and as you have seen the previous talk

17
00:00:45,360 --> 00:00:50,320
um

18
00:00:46,559 --> 00:00:52,000
we are used to uh run our presentations

19
00:00:50,320 --> 00:00:55,039
on our own software stacks so

20
00:00:52,000 --> 00:00:58,800
this same applies to this talk and

21
00:00:55,039 --> 00:01:01,120
like norman uh already told you uh with

22
00:00:58,800 --> 00:01:02,559
with regard to his setup it's the same

23
00:01:01,120 --> 00:01:05,679
to me so

24
00:01:02,559 --> 00:01:07,679
it was done a day before i was

25
00:01:05,680 --> 00:01:08,720
starting to foster them so cross fingers

26
00:01:07,680 --> 00:01:12,240
that everybody

27
00:01:08,720 --> 00:01:12,880
everything will work so before we come

28
00:01:12,240 --> 00:01:15,839
to the

29
00:01:12,880 --> 00:01:16,720
uh actual uh demonstration uh where i

30
00:01:15,840 --> 00:01:19,520
want to show

31
00:01:16,720 --> 00:01:21,920
um three different aspects uh that might

32
00:01:19,520 --> 00:01:24,479
be interesting for embedded systems

33
00:01:21,920 --> 00:01:24,960
which you could already use right now

34
00:01:24,479 --> 00:01:27,119
with

35
00:01:24,960 --> 00:01:28,080
note i want to give you a short

36
00:01:27,119 --> 00:01:31,200
introduction

37
00:01:28,080 --> 00:01:34,960
on g notes history on arm

38
00:01:31,200 --> 00:01:38,079
and what were the findings of us that we

39
00:01:34,960 --> 00:01:39,199
made out of this experiences then i will

40
00:01:38,079 --> 00:01:42,158
showcase you

41
00:01:39,200 --> 00:01:43,360
certain aspects and then we come to a

42
00:01:42,159 --> 00:01:46,399
short

43
00:01:43,360 --> 00:01:50,000
roadmap for this year related to

44
00:01:46,399 --> 00:01:54,079
the um development so

45
00:01:50,000 --> 00:01:56,960
this picture shows a rough sketch

46
00:01:54,079 --> 00:01:58,158
what kind of different arm hardware was

47
00:01:56,960 --> 00:02:01,759
entering the g note

48
00:01:58,159 --> 00:02:02,479
landscape and what you can see i don't

49
00:02:01,759 --> 00:02:05,920
want to go

50
00:02:02,479 --> 00:02:09,119
go into much detail but we had slight

51
00:02:05,920 --> 00:02:12,640
different arm architectures from version

52
00:02:09,119 --> 00:02:13,920
4 until now version 8. and we collected

53
00:02:12,640 --> 00:02:16,079
a lot of experiences

54
00:02:13,920 --> 00:02:16,958
also with different soc vendors like

55
00:02:16,080 --> 00:02:19,360
broadcom

56
00:02:16,959 --> 00:02:21,760
the series that were used in the

57
00:02:19,360 --> 00:02:24,879
raspberry pi's

58
00:02:21,760 --> 00:02:27,280
omap iv from texas instruments an

59
00:02:24,879 --> 00:02:29,599
incarnation of the panda board and

60
00:02:27,280 --> 00:02:32,560
exynos 5 from samsung

61
00:02:29,599 --> 00:02:33,280
in incarnation of the undeal board and

62
00:02:32,560 --> 00:02:36,400
we did not

63
00:02:33,280 --> 00:02:37,680
just run a kernel on top of it with some

64
00:02:36,400 --> 00:02:41,680
timer driver and

65
00:02:37,680 --> 00:02:43,840
uart but really tried hard to develop

66
00:02:41,680 --> 00:02:45,440
uh different device drivers for the

67
00:02:43,840 --> 00:02:48,959
peripherals for it

68
00:02:45,440 --> 00:02:53,040
and um so we had

69
00:02:48,959 --> 00:02:56,319
zarta as other

70
00:02:53,040 --> 00:02:59,679
drivers or sd card or

71
00:02:56,319 --> 00:03:02,799
different display engine

72
00:02:59,680 --> 00:03:05,360
and so on and the experiences

73
00:03:02,800 --> 00:03:06,239
for from this kind of development was

74
00:03:05,360 --> 00:03:09,040
that it's

75
00:03:06,239 --> 00:03:09,599
a pain and that it's really painful if

76
00:03:09,040 --> 00:03:12,560
you are

77
00:03:09,599 --> 00:03:14,640
just a small operating system open

78
00:03:12,560 --> 00:03:18,000
source operating system

79
00:03:14,640 --> 00:03:22,799
with no access to documentation at

80
00:03:18,000 --> 00:03:26,080
all and so the best reference you

81
00:03:22,800 --> 00:03:29,360
might get is uh linux kernel drivers

82
00:03:26,080 --> 00:03:32,000
written by the soc vendors themselves

83
00:03:29,360 --> 00:03:34,799
so there's not so much semantics that

84
00:03:32,000 --> 00:03:37,760
you can read out of it

85
00:03:34,799 --> 00:03:38,400
and in the worst case you've got even

86
00:03:37,760 --> 00:03:41,840
blob

87
00:03:38,400 --> 00:03:43,200
drivers which are just loaded by the

88
00:03:41,840 --> 00:03:47,280
linux kernel drivers

89
00:03:43,200 --> 00:03:50,640
inside so like hdmi blobs and whatever

90
00:03:47,280 --> 00:03:54,159
so the situation is not that good but

91
00:03:50,640 --> 00:03:57,679
um the best experiences we made

92
00:03:54,159 --> 00:04:02,239
so far where with nxp

93
00:03:57,680 --> 00:04:05,280
based the imx series

94
00:04:02,239 --> 00:04:07,760
and their system on ships so i wouldn't

95
00:04:05,280 --> 00:04:09,120
say it's uh it's great and everything is

96
00:04:07,760 --> 00:04:11,120
fine with nxp

97
00:04:09,120 --> 00:04:12,480
and i don't want to make marketing now

98
00:04:11,120 --> 00:04:15,200
for them but

99
00:04:12,480 --> 00:04:17,839
from our experiences it was best with

100
00:04:15,200 --> 00:04:19,680
regard to open documentation and we used

101
00:04:17,839 --> 00:04:22,799
it for instance for our

102
00:04:19,680 --> 00:04:23,280
uh extensive studies with using trust

103
00:04:22,800 --> 00:04:26,320
soon

104
00:04:23,280 --> 00:04:27,280
with uh doing secure boot on this kind

105
00:04:26,320 --> 00:04:30,320
of platforms

106
00:04:27,280 --> 00:04:34,080
and also um

107
00:04:30,320 --> 00:04:35,280
yeah we made some good experiences here

108
00:04:34,080 --> 00:04:37,758
so

109
00:04:35,280 --> 00:04:40,400
this is what i wanted to give you uh as

110
00:04:37,759 --> 00:04:40,400
a result of

111
00:04:40,720 --> 00:04:44,479
of this kind of history and we are not

112
00:04:43,280 --> 00:04:47,919
the only ones

113
00:04:44,479 --> 00:04:51,440
obviously that um seem to

114
00:04:47,919 --> 00:04:54,159
recognize uh that nxp makes a better

115
00:04:51,440 --> 00:04:54,880
documentation so there are several open

116
00:04:54,160 --> 00:04:58,479
hardware

117
00:04:54,880 --> 00:05:01,759
um projects right now

118
00:04:58,479 --> 00:05:05,440
that use this kind of systems on ship

119
00:05:01,759 --> 00:05:09,840
so here you see the usb armory which

120
00:05:05,440 --> 00:05:10,560
now has already a second version of it

121
00:05:09,840 --> 00:05:14,000
which was

122
00:05:10,560 --> 00:05:17,039
presented i think at ccc congress

123
00:05:14,000 --> 00:05:20,080
this year or last year and

124
00:05:17,039 --> 00:05:20,800
it's a kind of a smart card system where

125
00:05:20,080 --> 00:05:23,199
you can

126
00:05:20,800 --> 00:05:24,160
store your cryptographic material which

127
00:05:23,199 --> 00:05:27,440
you can use

128
00:05:24,160 --> 00:05:31,120
for signing stuff or just storing

129
00:05:27,440 --> 00:05:34,560
encrypted stuff and it's running on an

130
00:05:31,120 --> 00:05:36,560
nxp imx5 and it's completely open

131
00:05:34,560 --> 00:05:38,000
so you can download the layout and you

132
00:05:36,560 --> 00:05:41,919
can assemble it yourself

133
00:05:38,000 --> 00:05:43,199
if you like and we also had a gnode port

134
00:05:41,919 --> 00:05:46,080
on the first version

135
00:05:43,199 --> 00:05:47,199
so yeah i'm looking forward for the

136
00:05:46,080 --> 00:05:50,479
second one

137
00:05:47,199 --> 00:05:54,479
and there is this mnt reform it's a

138
00:05:50,479 --> 00:05:57,520
very cool uh self-made uh laptop project

139
00:05:54,479 --> 00:06:00,318
by m t research and it's really

140
00:05:57,520 --> 00:06:01,919
somehow a one-person project i mean

141
00:06:00,319 --> 00:06:03,919
they're more than one person but

142
00:06:01,919 --> 00:06:06,080
from the technical side it's more it's

143
00:06:03,919 --> 00:06:08,880
not not more than one person

144
00:06:06,080 --> 00:06:10,400
and again you get all the material you

145
00:06:08,880 --> 00:06:12,000
can just download it you can build it

146
00:06:10,400 --> 00:06:15,198
yourself

147
00:06:12,000 --> 00:06:19,440
including a nice mechanical keyboard

148
00:06:15,199 --> 00:06:22,080
and i'm really looking forward to bring

149
00:06:19,440 --> 00:06:22,639
the sculpt os which you uh just had a

150
00:06:22,080 --> 00:06:25,840
look at

151
00:06:22,639 --> 00:06:29,440
if you attended the previous talk

152
00:06:25,840 --> 00:06:32,840
uh to this kind of device and

153
00:06:29,440 --> 00:06:36,000
we have this librium 5

154
00:06:32,840 --> 00:06:36,880
smartphone which uses the same system on

155
00:06:36,000 --> 00:06:41,840
ship like

156
00:06:36,880 --> 00:06:45,039
the mnt reform and this is the imx8m

157
00:06:41,840 --> 00:06:48,239
so it's an arm v8 nxp

158
00:06:45,039 --> 00:06:50,719
system on ship and again

159
00:06:48,240 --> 00:06:51,440
uh what they try to achieve is giving

160
00:06:50,720 --> 00:06:54,319
back

161
00:06:51,440 --> 00:06:55,120
control to the user uh getting a

162
00:06:54,319 --> 00:06:57,759
smartphone

163
00:06:55,120 --> 00:06:59,440
which is mostly block block free as far

164
00:06:57,759 --> 00:07:02,960
as they can get with it

165
00:06:59,440 --> 00:07:05,520
and um yeah i think we

166
00:07:02,960 --> 00:07:06,560
have this mindset in common with those

167
00:07:05,520 --> 00:07:09,599
kind of projects

168
00:07:06,560 --> 00:07:12,000
and this is uh somewhere uh where we

169
00:07:09,599 --> 00:07:14,319
like to meet and we also like to take

170
00:07:12,000 --> 00:07:17,759
this lightroom 5

171
00:07:14,319 --> 00:07:19,759
to make a android-like

172
00:07:17,759 --> 00:07:21,120
environment an android runtime

173
00:07:19,759 --> 00:07:23,680
replacement so to say

174
00:07:21,120 --> 00:07:26,800
and those of you who attended the talk

175
00:07:23,680 --> 00:07:30,080
from alexander zenye about

176
00:07:26,800 --> 00:07:34,479
their component framework

177
00:07:30,080 --> 00:07:38,400
know what i mean okay so

178
00:07:34,479 --> 00:07:40,159
um this board for those of you who are

179
00:07:38,400 --> 00:07:42,799
not sitting in the first line

180
00:07:40,160 --> 00:07:44,160
is staying here in front of me on the

181
00:07:42,800 --> 00:07:47,199
table and i

182
00:07:44,160 --> 00:07:49,360
have the presentation now on this device

183
00:07:47,199 --> 00:07:50,800
so it's the same system on ship like in

184
00:07:49,360 --> 00:07:54,080
the lightroom 5 and in the

185
00:07:50,800 --> 00:07:56,400
mnt reform and

186
00:07:54,080 --> 00:07:58,520
you see we have some ethernet connector

187
00:07:56,400 --> 00:07:59,679
usb connector

188
00:07:58,520 --> 00:08:03,440
[Music]

189
00:07:59,680 --> 00:08:06,960
hdmi connector and sd card

190
00:08:03,440 --> 00:08:09,039
and we have peripherals drivers

191
00:08:06,960 --> 00:08:10,400
running right now in the system that

192
00:08:09,039 --> 00:08:14,000
drive all those

193
00:08:10,400 --> 00:08:17,198
kind of devices and

194
00:08:14,000 --> 00:08:20,800
yeah but this is not everything

195
00:08:17,199 --> 00:08:24,080
um but to show you this and not just uh

196
00:08:20,800 --> 00:08:26,160
list items i like to come to the actual

197
00:08:24,080 --> 00:08:30,318
demonstration part

198
00:08:26,160 --> 00:08:33,599
so what are the use cases for genome

199
00:08:30,319 --> 00:08:35,839
used in in the embedded world so

200
00:08:33,599 --> 00:08:37,519
just imagine you stand in front of the

201
00:08:35,839 --> 00:08:39,039
ticket machine and the ticket is showing

202
00:08:37,519 --> 00:08:42,560
you blue screen

203
00:08:39,039 --> 00:08:44,640
or you drive in public transport and it

204
00:08:42,559 --> 00:08:48,079
doesn't show up the next station

205
00:08:44,640 --> 00:08:51,760
but some weird other desktop or whatever

206
00:08:48,080 --> 00:08:53,760
and of course uh the atm

207
00:08:51,760 --> 00:08:55,439
doesn't give you cash because it's want

208
00:08:53,760 --> 00:08:58,000
to do a windows upgrade

209
00:08:55,440 --> 00:08:59,279
right now and doesn't work out until it

210
00:08:58,000 --> 00:09:03,279
gets this

211
00:08:59,279 --> 00:09:06,240
so those are not some hypothetical uh

212
00:09:03,279 --> 00:09:08,399
examples but i think all of you somehow

213
00:09:06,240 --> 00:09:10,080
experienced already something like this

214
00:09:08,399 --> 00:09:12,000
and here you see the wannacry attack at

215
00:09:10,080 --> 00:09:12,880
deutsche bahn where they were out of

216
00:09:12,000 --> 00:09:14,800
order for

217
00:09:12,880 --> 00:09:17,040
several hours or even days i'm not sure

218
00:09:14,800 --> 00:09:19,519
anymore so

219
00:09:17,040 --> 00:09:21,760
um what you actually need is not a fully

220
00:09:19,519 --> 00:09:23,760
fledged

221
00:09:21,760 --> 00:09:25,839
a desktop operating system like

222
00:09:23,760 --> 00:09:26,800
microsoft for a kiosk system but you

223
00:09:25,839 --> 00:09:30,399
need a custom

224
00:09:26,800 --> 00:09:33,839
tailored solution and

225
00:09:30,399 --> 00:09:36,000
of course the costs for those who

226
00:09:33,839 --> 00:09:37,440
develop such systems are standing in the

227
00:09:36,000 --> 00:09:40,399
way if you have to do

228
00:09:37,440 --> 00:09:40,720
this all on your own but those of you

229
00:09:40,399 --> 00:09:43,279
who

230
00:09:40,720 --> 00:09:44,000
attended the previous talk have seen how

231
00:09:43,279 --> 00:09:47,040
easily

232
00:09:44,000 --> 00:09:48,160
it is to integrate a custom custom

233
00:09:47,040 --> 00:09:51,079
tailored

234
00:09:48,160 --> 00:09:53,040
environment but of course you need some

235
00:09:51,080 --> 00:09:55,920
[Music]

236
00:09:53,040 --> 00:09:56,480
support in form of components for this

237
00:09:55,920 --> 00:09:58,880
and

238
00:09:56,480 --> 00:10:00,880
what you see here right now is again the

239
00:09:58,880 --> 00:10:02,320
slide central thing this administration

240
00:10:00,880 --> 00:10:05,360
console

241
00:10:02,320 --> 00:10:08,480
and uh i want to show you um

242
00:10:05,360 --> 00:10:11,680
now that in

243
00:10:08,480 --> 00:10:14,720
this system there are already

244
00:10:11,680 --> 00:10:17,599
on the small arm machine which

245
00:10:14,720 --> 00:10:19,200
only uses the first cpu because i didn't

246
00:10:17,600 --> 00:10:21,920
wrote a load balancer

247
00:10:19,200 --> 00:10:23,839
which automatically uh drives the

248
00:10:21,920 --> 00:10:26,000
components on different cpus and

249
00:10:23,839 --> 00:10:28,160
uh did not manually tweak that so

250
00:10:26,000 --> 00:10:30,720
everything is running on the first cpu

251
00:10:28,160 --> 00:10:32,800
and we have already 76 components

252
00:10:30,720 --> 00:10:35,839
running in this system

253
00:10:32,800 --> 00:10:36,959
and as you can see it's like yeah i mean

254
00:10:35,839 --> 00:10:39,600
it's

255
00:10:36,959 --> 00:10:40,800
all all everything is software rendered

256
00:10:39,600 --> 00:10:43,680
so it's

257
00:10:40,800 --> 00:10:46,240
uh really uh usable as as a display

258
00:10:43,680 --> 00:10:47,120
system display panel was as a kiosk

259
00:10:46,240 --> 00:10:50,720
system

260
00:10:47,120 --> 00:10:52,079
now we have very easy um widget set a

261
00:10:50,720 --> 00:10:55,519
very simple one

262
00:10:52,079 --> 00:10:58,319
and maybe uh your programmers are not

263
00:10:55,519 --> 00:11:00,800
coming to this kind of widget set or

264
00:10:58,320 --> 00:11:02,800
programming in a gnode environment

265
00:11:00,800 --> 00:11:04,000
but of course we can also start

266
00:11:02,800 --> 00:11:08,319
something else so

267
00:11:04,000 --> 00:11:11,760
let's start this qt5 text editor

268
00:11:08,320 --> 00:11:13,120
i mean of course this takes some time

269
00:11:11,760 --> 00:11:15,519
because

270
00:11:13,120 --> 00:11:16,560
everything is read from a non-optimized

271
00:11:15,519 --> 00:11:19,600
sd card

272
00:11:16,560 --> 00:11:23,119
you can see all which is now doing is uh

273
00:11:19,600 --> 00:11:25,839
some io and his it's heavily

274
00:11:23,120 --> 00:11:26,959
uh copying over the bytes from from the

275
00:11:25,839 --> 00:11:31,040
sd card

276
00:11:26,959 --> 00:11:34,079
but in the end crossing fingers

277
00:11:31,040 --> 00:11:36,560
we will see this text editor you already

278
00:11:34,079 --> 00:11:36,560
know from

279
00:11:37,040 --> 00:11:42,480
the scalp version on x86 so

280
00:11:40,720 --> 00:11:45,040
what i wanted to show you we did not

281
00:11:42,480 --> 00:11:45,360
just ported some peripheral drivers but

282
00:11:45,040 --> 00:11:48,079
we

283
00:11:45,360 --> 00:11:48,880
really went to the whole software stack

284
00:11:48,079 --> 00:11:52,079
so we have

285
00:11:48,880 --> 00:11:55,760
different libraries like png and

286
00:11:52,079 --> 00:11:59,199
qt5 qt5 and tcp stack

287
00:11:55,760 --> 00:12:02,480
of course in libsy itself and uh

288
00:11:59,200 --> 00:12:04,800
the base library of g note obviously

289
00:12:02,480 --> 00:12:06,399
and we went to the whole software stack

290
00:12:04,800 --> 00:12:09,120
to make this

291
00:12:06,399 --> 00:12:09,600
happen within the ten months so i'm

292
00:12:09,120 --> 00:12:12,959
quite

293
00:12:09,600 --> 00:12:14,880
convinced that we will also achieve more

294
00:12:12,959 --> 00:12:16,479
with regard to the hardware targets i

295
00:12:14,880 --> 00:12:20,720
already mentioned

296
00:12:16,480 --> 00:12:20,720
okay but let's come back to the slides

297
00:12:21,810 --> 00:12:26,560
[Music]

298
00:12:23,519 --> 00:12:30,000
another example so

299
00:12:26,560 --> 00:12:33,279
today everybody uh talks about iot

300
00:12:30,000 --> 00:12:36,639
and all those crappy devices that

301
00:12:33,279 --> 00:12:41,600
are out there

302
00:12:36,639 --> 00:12:45,440
and probably the idea is to have some

303
00:12:41,600 --> 00:12:50,720
uh shield gateways to to

304
00:12:45,440 --> 00:12:50,720
as edge devices which are then

305
00:12:51,279 --> 00:12:57,760
but a better shield those kind of uh

306
00:12:54,639 --> 00:12:59,920
iot devices and this is such a device

307
00:12:57,760 --> 00:13:01,120
but of course you um always have the

308
00:12:59,920 --> 00:13:03,439
problem of

309
00:13:01,120 --> 00:13:04,399
firmware upgrades in such environments

310
00:13:03,440 --> 00:13:06,720
and

311
00:13:04,399 --> 00:13:07,680
as you have seen we have this depot

312
00:13:06,720 --> 00:13:11,680
packaging

313
00:13:07,680 --> 00:13:15,040
mechanism and i can show you

314
00:13:11,680 --> 00:13:18,479
ah sorry wrong key

315
00:13:15,040 --> 00:13:22,000
i can show you um maybe you didn't

316
00:13:18,480 --> 00:13:23,360
notice but i have a vulnerability in my

317
00:13:22,000 --> 00:13:25,040
backdrop

318
00:13:23,360 --> 00:13:28,320
application and somebody defaced my

319
00:13:25,040 --> 00:13:31,760
wallpaper so

320
00:13:28,320 --> 00:13:34,720
an upgrade routine that regularly

321
00:13:31,760 --> 00:13:35,439
gets information about new packages

322
00:13:34,720 --> 00:13:37,760
might

323
00:13:35,440 --> 00:13:39,120
get now the information about a fixed

324
00:13:37,760 --> 00:13:42,639
version

325
00:13:39,120 --> 00:13:43,760
and now i will be the upgrade routine

326
00:13:42,639 --> 00:13:46,639
because

327
00:13:43,760 --> 00:13:47,760
it's not there yet but i just do it by

328
00:13:46,639 --> 00:13:51,120
hand

329
00:13:47,760 --> 00:13:52,240
so first i take away this q5 it's in the

330
00:13:51,120 --> 00:13:57,680
way

331
00:13:52,240 --> 00:14:01,279
and i open up a new component

332
00:13:57,680 --> 00:14:04,079
oh no okay

333
00:14:01,279 --> 00:14:05,519
now exactly this happened what uh what

334
00:14:04,079 --> 00:14:09,040
shouldn't happen

335
00:14:05,519 --> 00:14:11,920
um so i have to reboot i think the

336
00:14:09,040 --> 00:14:13,040
scalp manager is not uh not a weibull

337
00:14:11,920 --> 00:14:17,839
yet

338
00:14:13,040 --> 00:14:17,839
yeah sorry but that can happen

339
00:14:20,639 --> 00:14:24,560
what exactly happened sorry what exactly

340
00:14:23,600 --> 00:14:27,440
uh there's some

341
00:14:24,560 --> 00:14:28,160
there's some um i i think the scalp

342
00:14:27,440 --> 00:14:30,560
manager

343
00:14:28,160 --> 00:14:32,079
which is this graphical user interface

344
00:14:30,560 --> 00:14:35,599
for administration

345
00:14:32,079 --> 00:14:38,319
missed some signal or gaps

346
00:14:35,600 --> 00:14:39,360
maybe it had to do a resource request or

347
00:14:38,320 --> 00:14:41,680
whatever

348
00:14:39,360 --> 00:14:42,399
i cannot show you now because i do not

349
00:14:41,680 --> 00:14:45,599
have

350
00:14:42,399 --> 00:14:46,320
some report some some lock output here

351
00:14:45,600 --> 00:14:49,680
to

352
00:14:46,320 --> 00:14:53,519
to look at it so yeah as i mentioned

353
00:14:49,680 --> 00:14:56,839
it's it was ready the day before so

354
00:14:53,519 --> 00:14:58,079
okay uh sorry for this but we continue

355
00:14:56,839 --> 00:15:00,720
just

356
00:14:58,079 --> 00:15:00,719
just go ahead

357
00:15:01,839 --> 00:15:13,839
okay so i reuse

358
00:15:05,760 --> 00:15:13,839
the image from the sd card

359
00:15:20,720 --> 00:15:27,760
okay so here we are again and to fix

360
00:15:24,079 --> 00:15:32,000
the um broken backdrop package

361
00:15:27,760 --> 00:15:35,279
i now first copy over this uh

362
00:15:32,000 --> 00:15:37,600
deploy configuration which

363
00:15:35,279 --> 00:15:38,320
contains all the packages are which are

364
00:15:37,600 --> 00:15:42,000
now

365
00:15:38,320 --> 00:15:44,000
running in this runtime and i copy it

366
00:15:42,000 --> 00:15:47,600
over to

367
00:15:44,000 --> 00:15:52,320
a non automatically managed

368
00:15:47,600 --> 00:15:52,320
space so in the normal config

369
00:15:52,399 --> 00:15:55,839
no i missed that sorry

370
00:15:57,360 --> 00:16:02,800
okay so now uh it's

371
00:16:00,399 --> 00:16:05,040
known that that we want to hand

372
00:16:02,800 --> 00:16:07,279
something manually and don't want

373
00:16:05,040 --> 00:16:08,399
the system to manage it automatically

374
00:16:07,279 --> 00:16:12,320
anymore so

375
00:16:08,399 --> 00:16:12,320
i go over and

376
00:16:14,720 --> 00:16:21,199
and here you see this

377
00:16:18,399 --> 00:16:22,480
stixx blue black backdrop which is the

378
00:16:21,199 --> 00:16:25,599
package

379
00:16:22,480 --> 00:16:28,399
containing the bug so i just

380
00:16:25,600 --> 00:16:29,360
know as the upgrade routine that there's

381
00:16:28,399 --> 00:16:33,360
a minus a

382
00:16:29,360 --> 00:16:33,360
version of it and i just

383
00:16:33,440 --> 00:16:36,560
saved the file and what you see now is

384
00:16:36,000 --> 00:16:39,680
uh

385
00:16:36,560 --> 00:16:40,560
yeah it throws away uh the original

386
00:16:39,680 --> 00:16:42,638
version

387
00:16:40,560 --> 00:16:43,680
it's downloading the new version

388
00:16:42,639 --> 00:16:48,000
verifies it

389
00:16:43,680 --> 00:16:51,279
extracts it and replaces uh the running

390
00:16:48,000 --> 00:16:54,079
stuff and if you somehow um

391
00:16:51,279 --> 00:16:56,240
yeah see that there are problems with it

392
00:16:54,079 --> 00:16:58,560
maybe with a watchdog mechanism

393
00:16:56,240 --> 00:17:02,160
the component is not coming up again

394
00:16:58,560 --> 00:17:02,160
yeah we can just revert it of course

395
00:17:02,839 --> 00:17:05,839
so

396
00:17:11,839 --> 00:17:16,000
sorry sorry yeah of course so i show it

397
00:17:14,720 --> 00:17:19,679
again

398
00:17:16,000 --> 00:17:20,160
zack okay now it does not has to

399
00:17:19,679 --> 00:17:23,919
download

400
00:17:20,160 --> 00:17:27,280
of course so it's fixed

401
00:17:23,919 --> 00:17:30,840
okay so last example i have to hurry up

402
00:17:27,280 --> 00:17:33,840
because we are already running out of

403
00:17:30,840 --> 00:17:33,840
time

404
00:17:35,520 --> 00:17:39,840
okay last example ops

405
00:17:40,000 --> 00:17:45,520
legacy software in industrial contexts

406
00:17:43,360 --> 00:17:48,799
so often you have

407
00:17:45,520 --> 00:17:52,000
some custom software which

408
00:17:48,799 --> 00:17:55,679
costs a lot of money which

409
00:17:52,000 --> 00:17:59,039
a lot of men power was used to

410
00:17:55,679 --> 00:18:00,000
to do this only for very few instances

411
00:17:59,039 --> 00:18:03,600
of this

412
00:18:00,000 --> 00:18:06,480
running software and they are also tied

413
00:18:03,600 --> 00:18:07,360
to a specific operating system version

414
00:18:06,480 --> 00:18:10,320
so they use

415
00:18:07,360 --> 00:18:11,280
specific drivers on on their own and you

416
00:18:10,320 --> 00:18:14,399
cannot just

417
00:18:11,280 --> 00:18:18,080
replace it with a newer version of

418
00:18:14,400 --> 00:18:21,039
my microsoft or whatever so

419
00:18:18,080 --> 00:18:22,399
here the problem is uh they run out of

420
00:18:21,039 --> 00:18:26,000
support

421
00:18:22,400 --> 00:18:29,280
um maybe they are also edge devices and

422
00:18:26,000 --> 00:18:30,960
you want to give some possibility to run

423
00:18:29,280 --> 00:18:35,039
this legacy os

424
00:18:30,960 --> 00:18:35,039
so what we did is

425
00:18:35,120 --> 00:18:43,439
we have a virtual machine monitor

426
00:18:39,120 --> 00:18:47,199
for arm v8

427
00:18:43,440 --> 00:18:50,320
so i start a linux vm

428
00:18:47,200 --> 00:18:53,360
um and this linux

429
00:18:50,320 --> 00:18:54,480
of course linux is big so it's a generic

430
00:18:53,360 --> 00:18:57,120
rv8 kernel

431
00:18:54,480 --> 00:18:58,960
of 18 megabyte or something like this so

432
00:18:57,120 --> 00:19:01,520
it needs some time to

433
00:18:58,960 --> 00:19:02,080
be copied again from the sd card and

434
00:19:01,520 --> 00:19:06,080
this

435
00:19:02,080 --> 00:19:08,720
was a joint project it was not uh

436
00:19:06,080 --> 00:19:10,159
we did not finance it on our own but it

437
00:19:08,720 --> 00:19:12,720
was a

438
00:19:10,160 --> 00:19:14,480
corporate work with bedrock system who

439
00:19:12,720 --> 00:19:15,760
also sit in this room and i want to

440
00:19:14,480 --> 00:19:18,960
thank

441
00:19:15,760 --> 00:19:21,440
at this place for supporting us in

442
00:19:18,960 --> 00:19:22,400
in in doing so because they do a much

443
00:19:21,440 --> 00:19:24,799
more ambition

444
00:19:22,400 --> 00:19:26,320
project of building up a virtual machine

445
00:19:24,799 --> 00:19:29,200
monitor

446
00:19:26,320 --> 00:19:30,960
that is gets formally approved but at

447
00:19:29,200 --> 00:19:35,200
that point they were not

448
00:19:30,960 --> 00:19:37,200
ready to develop it

449
00:19:35,200 --> 00:19:38,880
right now in their system so we rapid

450
00:19:37,200 --> 00:19:40,720
prototype so to say and

451
00:19:38,880 --> 00:19:42,799
g node and they could use it as a

452
00:19:40,720 --> 00:19:45,200
blueprint and

453
00:19:42,799 --> 00:19:47,760
as far as i know they are envisioned to

454
00:19:45,200 --> 00:19:52,640
open source their version two so we are

455
00:19:47,760 --> 00:19:55,919
very uh looking forward to to use that

456
00:19:52,640 --> 00:19:59,120
too so i just want to show you um

457
00:19:55,919 --> 00:19:59,919
this is not just some linux working but

458
00:19:59,120 --> 00:20:03,360
it also has

459
00:19:59,919 --> 00:20:08,480
network access via word i o

460
00:20:03,360 --> 00:20:08,479
and um so i can

461
00:20:08,720 --> 00:20:11,919
i can start a movie

462
00:20:13,520 --> 00:20:18,000
a network stream movie hopefully if the

463
00:20:15,840 --> 00:20:21,360
network is working yeah okay

464
00:20:18,000 --> 00:20:24,640
so um the vmm contains

465
00:20:21,360 --> 00:20:24,639
uh um

466
00:20:24,799 --> 00:20:30,400
a real complete cpu model um

467
00:20:28,320 --> 00:20:32,080
it has models for generic interrupt

468
00:20:30,400 --> 00:20:37,440
controller version 2

469
00:20:32,080 --> 00:20:40,960
and n3 for the generic timer of arm

470
00:20:37,440 --> 00:20:43,600
and it has drivers for word i o console

471
00:20:40,960 --> 00:20:47,120
and forward io network

472
00:20:43,600 --> 00:20:50,480
and yeah i think

473
00:20:47,120 --> 00:20:53,439
i have some minutes left okay

474
00:20:50,480 --> 00:20:54,799
so this is star wars uh streamed over

475
00:20:53,440 --> 00:20:59,360
telnet

476
00:20:54,799 --> 00:21:03,280
um let's come to the road map again

477
00:20:59,360 --> 00:21:06,320
so those are my technical demonstrations

478
00:21:03,280 --> 00:21:09,360
and my last slide is uh

479
00:21:06,320 --> 00:21:13,760
the roadmap for the upcoming year

480
00:21:09,360 --> 00:21:16,000
so um i definitely want to

481
00:21:13,760 --> 00:21:17,440
push this sculpt development on arm v8

482
00:21:16,000 --> 00:21:20,080
further so

483
00:21:17,440 --> 00:21:21,120
scalp on this mnt reform would be really

484
00:21:20,080 --> 00:21:23,678
cool

485
00:21:21,120 --> 00:21:25,520
but for this to happen we need some kind

486
00:21:23,679 --> 00:21:27,840
of platform driver so

487
00:21:25,520 --> 00:21:29,520
now the drivers are running but we do

488
00:21:27,840 --> 00:21:32,080
not have

489
00:21:29,520 --> 00:21:33,760
access to the pci bus for instance we do

490
00:21:32,080 --> 00:21:36,080
not have access to the

491
00:21:33,760 --> 00:21:37,280
clocking and power management and we

492
00:21:36,080 --> 00:21:40,158
need this kind of

493
00:21:37,280 --> 00:21:42,559
stuff in in incarnation of a platform

494
00:21:40,159 --> 00:21:45,919
driver

495
00:21:42,559 --> 00:21:47,200
we want to have more word iod

496
00:21:45,919 --> 00:21:49,120
support so that we can use it

497
00:21:47,200 --> 00:21:51,360
interactively of course

498
00:21:49,120 --> 00:21:52,639
then we could really use a skype os

499
00:21:51,360 --> 00:21:55,918
desktop like we

500
00:21:52,640 --> 00:21:58,960
know it from the x86 world

501
00:21:55,919 --> 00:22:00,400
and of course it would be pretty cool to

502
00:21:58,960 --> 00:22:04,400
use hardware

503
00:22:00,400 --> 00:22:07,200
accelerated graphics so those are the

504
00:22:04,400 --> 00:22:08,000
plans for this year and now i'm open for

505
00:22:07,200 --> 00:22:12,370
questions

506
00:22:08,000 --> 00:22:19,420
thank you for your attention

507
00:22:12,370 --> 00:22:19,419
[Applause]

508
00:22:21,919 --> 00:22:25,280
ah sorry i forgot to mention it's our

509
00:22:23,919 --> 00:22:27,600
own kernel so

510
00:22:25,280 --> 00:22:29,039
we did not use another one ah sorry i

511
00:22:27,600 --> 00:22:31,678
have to repeat the question

512
00:22:29,039 --> 00:22:33,200
i forgot so the question was what kernel

513
00:22:31,679 --> 00:22:36,080
did we used so

514
00:22:33,200 --> 00:22:38,480
in the initial development of rb8 in the

515
00:22:36,080 --> 00:22:41,918
very first release where we

516
00:22:38,480 --> 00:22:44,400
brought the first rv8 support in

517
00:22:41,919 --> 00:22:45,520
we used fiasco oc because it already has

518
00:22:44,400 --> 00:22:48,240
mv8 support

519
00:22:45,520 --> 00:22:49,679
but then we implemented it in our own

520
00:22:48,240 --> 00:22:51,919
kernel and also this whole

521
00:22:49,679 --> 00:22:55,840
virtualization support stuff is part of

522
00:22:51,919 --> 00:22:55,840
our own car

523
00:22:55,919 --> 00:22:58,640
other questions

524
00:23:00,080 --> 00:23:09,840
okay let's close the session

525
00:23:13,360 --> 00:23:15,439
you

