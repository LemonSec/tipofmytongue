1
00:00:05,600 --> 00:00:10,639
good morning

2
00:00:07,600 --> 00:00:10,639
is it okay with the mic

3
00:00:13,759 --> 00:00:17,600
so after everything you heard about the

4
00:00:16,480 --> 00:00:20,080
serious things

5
00:00:17,600 --> 00:00:21,520
you can do with ada now something

6
00:00:20,080 --> 00:00:25,759
totally

7
00:00:21,520 --> 00:00:25,759
unserious hack

8
00:00:26,080 --> 00:00:31,439
what's hack you have the choice hack ada

9
00:00:30,480 --> 00:00:34,960
compiler

10
00:00:31,439 --> 00:00:35,760
hello world ada compiler hackers ada

11
00:00:34,960 --> 00:00:39,360
compiler

12
00:00:35,760 --> 00:00:42,960
so you get it it's not a real

13
00:00:39,360 --> 00:00:47,039
ada compiler at least at the time being

14
00:00:42,960 --> 00:00:47,039
you don't know in 10 years or whatever

15
00:00:48,640 --> 00:00:52,000
so it's experimental

16
00:00:52,960 --> 00:01:00,559
it's very likely to be

17
00:00:56,160 --> 00:01:04,479
forever incomplete and very incomplete

18
00:01:00,559 --> 00:01:08,320
so what's the goal the goal is to have

19
00:01:04,479 --> 00:01:12,640
a comp an aida system for

20
00:01:08,320 --> 00:01:14,639
beginners or for people who are more

21
00:01:12,640 --> 00:01:17,360
used to script languages

22
00:01:14,640 --> 00:01:18,240
you see you have your bit of code you

23
00:01:17,360 --> 00:01:22,159
punch a key

24
00:01:18,240 --> 00:01:22,158
you get a result something like that

25
00:01:22,400 --> 00:01:29,920
but it also can be useful for

26
00:01:26,159 --> 00:01:30,720
real header developers if you start a

27
00:01:29,920 --> 00:01:34,479
little

28
00:01:30,720 --> 00:01:37,439
piece of code a little algorithm and

29
00:01:34,479 --> 00:01:38,159
you want to to have something simple to

30
00:01:37,439 --> 00:01:41,199
play with

31
00:01:38,159 --> 00:01:41,840
and then you can port it to gnat or

32
00:01:41,200 --> 00:01:45,360
whatever

33
00:01:41,840 --> 00:01:48,960
when it becomes more complex

34
00:01:45,360 --> 00:01:53,119
unfortunately hack already existed

35
00:01:48,960 --> 00:01:56,559
in another form so it was already

36
00:01:53,119 --> 00:02:00,399
done but

37
00:01:56,560 --> 00:02:03,360
it was a dead

38
00:02:00,399 --> 00:02:05,200
project but the idea was to leverage

39
00:02:03,360 --> 00:02:09,520
this work

40
00:02:05,200 --> 00:02:14,560
and actually it's a renovation work so

41
00:02:09,520 --> 00:02:14,560
like pimp my rides for the the old cars

42
00:02:14,640 --> 00:02:22,238
so you had something which was written

43
00:02:18,319 --> 00:02:23,280
in pascal it run only on old system that

44
00:02:22,239 --> 00:02:26,480
nobody

45
00:02:23,280 --> 00:02:26,480
knows anymore

46
00:02:26,560 --> 00:02:31,519
and the main problem was it was written

47
00:02:30,160 --> 00:02:34,560
in pascal

48
00:02:31,519 --> 00:02:37,200
so it means it was written in

49
00:02:34,560 --> 00:02:38,480
dialects actually two dialects you have

50
00:02:37,200 --> 00:02:43,040
two versions of this

51
00:02:38,480 --> 00:02:46,799
small ada which is the ancestor of hack

52
00:02:43,040 --> 00:02:49,359
two version which are incompatible and

53
00:02:46,800 --> 00:02:50,239
so you need to to do something like that

54
00:02:49,360 --> 00:02:53,440
so

55
00:02:50,239 --> 00:02:57,519
the idea was to port

56
00:02:53,440 --> 00:03:00,560
this project to a language which is

57
00:02:57,519 --> 00:03:04,159
very portable which is

58
00:03:00,560 --> 00:03:07,599
time resistant because it's a long term

59
00:03:04,159 --> 00:03:11,920
project and the ideal choice

60
00:03:07,599 --> 00:03:12,399
of course is ada and the consequence of

61
00:03:11,920 --> 00:03:16,238
it

62
00:03:12,400 --> 00:03:20,720
you have an a full ada in ada compiler

63
00:03:16,239 --> 00:03:20,720
down to the code generation

64
00:03:22,560 --> 00:03:27,040
a bit of history behind so you see it's

65
00:03:25,599 --> 00:03:30,798
a

66
00:03:27,040 --> 00:03:33,040
very old project or you have a long

67
00:03:30,799 --> 00:03:37,360
history but

68
00:03:33,040 --> 00:03:40,159
it happens more and more um

69
00:03:37,360 --> 00:03:40,879
so it began with a special pascal

70
00:03:40,159 --> 00:03:44,159
compiler

71
00:03:40,879 --> 00:03:44,959
pascal in pascal written by the inventor

72
00:03:44,159 --> 00:03:48,079
of pascal

73
00:03:44,959 --> 00:03:50,959
himself and then

74
00:03:48,080 --> 00:03:53,360
in 86 there was something called

75
00:03:50,959 --> 00:03:58,480
copascal with the introduction of

76
00:03:53,360 --> 00:04:02,239
cohoutins and someone had the idea of

77
00:03:58,480 --> 00:04:05,280
porting this small this uh copa scale

78
00:04:02,239 --> 00:04:10,400
to the ada syntax and

79
00:04:05,280 --> 00:04:13,439
do the ada tasking for concurrency

80
00:04:10,400 --> 00:04:14,879
and then what happened uh does and the

81
00:04:13,439 --> 00:04:18,560
old mac os

82
00:04:14,879 --> 00:04:22,799
disappeared and the projectile as well

83
00:04:18,560 --> 00:04:22,799
was more or less dead

84
00:04:23,199 --> 00:04:29,280
but you could find it on internet and i

85
00:04:26,320 --> 00:04:32,199
also got some copies

86
00:04:29,280 --> 00:04:34,080
through email so it was a kind of

87
00:04:32,199 --> 00:04:37,840
archaeological

88
00:04:34,080 --> 00:04:38,560
work basically so uh 20 years ago

89
00:04:37,840 --> 00:04:42,320
already

90
00:04:38,560 --> 00:04:46,400
i tried to translate translates

91
00:04:42,320 --> 00:04:48,800
small ada the codes into ada

92
00:04:46,400 --> 00:04:50,159
and the main roadblock was there were

93
00:04:48,800 --> 00:04:53,759
there are plenty of

94
00:04:50,160 --> 00:04:57,440
with statement in pascal which makes

95
00:04:53,759 --> 00:05:01,440
abstraction of a variable of

96
00:04:57,440 --> 00:05:03,759
type record type and the translator

97
00:05:01,440 --> 00:05:06,800
needs to know

98
00:05:03,759 --> 00:05:07,440
what to do with that so i had to improve

99
00:05:06,800 --> 00:05:11,120
the

100
00:05:07,440 --> 00:05:13,600
p2ada translator

101
00:05:11,120 --> 00:05:14,560
actually it's kind of almost a pascal

102
00:05:13,600 --> 00:05:18,479
compiler

103
00:05:14,560 --> 00:05:21,919
hiding and it understands these

104
00:05:18,479 --> 00:05:25,360
statements and a few years later after

105
00:05:21,919 --> 00:05:28,719
some manual work

106
00:05:25,360 --> 00:05:32,880
finally the at least hello worlds

107
00:05:28,720 --> 00:05:36,320
but also more complex things like

108
00:05:32,880 --> 00:05:40,400
recursion and nesting and so on

109
00:05:36,320 --> 00:05:40,400
are working i will demonstrate later

110
00:05:41,039 --> 00:05:48,320
so now you have the long history behind

111
00:05:44,800 --> 00:05:52,400
now we have even longer future

112
00:05:48,320 --> 00:05:55,440
before so you have two steps

113
00:05:52,400 --> 00:05:59,679
parallel but the most urgent thing

114
00:05:55,440 --> 00:06:04,400
is to get rid of the pascalis

115
00:05:59,680 --> 00:06:04,400
some rules that are absolutely not

116
00:06:04,840 --> 00:06:12,560
either not ada at all

117
00:06:08,880 --> 00:06:16,159
typically um you have in pascal

118
00:06:12,560 --> 00:06:20,800
and in i think almost every language

119
00:06:16,160 --> 00:06:23,360
except ada silent um

120
00:06:20,800 --> 00:06:25,199
numerical type conversions like you have

121
00:06:23,360 --> 00:06:29,520
an integer and suddenly

122
00:06:25,199 --> 00:06:32,000
it's converted magically into a float

123
00:06:29,520 --> 00:06:34,799
and you have a float type magically

124
00:06:32,000 --> 00:06:38,800
converted into another float type

125
00:06:34,800 --> 00:06:42,479
and you have roundings and so it's a

126
00:06:38,800 --> 00:06:46,319
nice feature of many languages

127
00:06:42,479 --> 00:06:50,960
except eda it's nice but it's actually

128
00:06:46,319 --> 00:06:54,960
a bad idea it's it's a cause of

129
00:06:50,960 --> 00:06:59,280
a good portion of bugs in every software

130
00:06:54,960 --> 00:07:01,039
you you made that's only an example but

131
00:06:59,280 --> 00:07:04,638
you have some

132
00:07:01,039 --> 00:07:07,759
pascal things remaining so

133
00:07:04,639 --> 00:07:10,880
they need to be removed and the third

134
00:07:07,759 --> 00:07:13,720
step is to

135
00:07:10,880 --> 00:07:14,840
increase this small

136
00:07:13,720 --> 00:07:17,520
[Music]

137
00:07:14,840 --> 00:07:20,560
subset because hack

138
00:07:17,520 --> 00:07:24,400
currently um as you

139
00:07:20,560 --> 00:07:27,520
see here features only

140
00:07:24,400 --> 00:07:30,400
the let's say the pascal subset but

141
00:07:27,520 --> 00:07:30,750
it's already not too bad you can already

142
00:07:30,400 --> 00:07:32,239
do

143
00:07:30,750 --> 00:07:35,039
[Music]

144
00:07:32,240 --> 00:07:36,479
cool things with that so you can define

145
00:07:35,039 --> 00:07:40,479
your own types

146
00:07:36,479 --> 00:07:44,560
you have nesting and

147
00:07:40,479 --> 00:07:48,318
recursion but you don't have yet

148
00:07:44,560 --> 00:07:48,319
probably the most useful

149
00:07:48,400 --> 00:07:53,120
feature of ada which is the modularity

150
00:07:51,199 --> 00:07:55,280
the packages

151
00:07:53,120 --> 00:07:56,960
and also you don't have generics and the

152
00:07:55,280 --> 00:08:00,239
list is

153
00:07:56,960 --> 00:08:03,599
down to here because every

154
00:08:00,240 --> 00:08:03,599
almost everything is missing

155
00:08:04,160 --> 00:08:11,520
so it's really work in progress

156
00:08:07,919 --> 00:08:14,560
um some metrics about hack

157
00:08:11,520 --> 00:08:17,919
the whole compiler and the

158
00:08:14,560 --> 00:08:19,520
virtual machine interpreter it needs two

159
00:08:17,919 --> 00:08:22,159
seconds

160
00:08:19,520 --> 00:08:24,000
depending on the machine uh to compile

161
00:08:22,160 --> 00:08:27,039
with schnapps

162
00:08:24,000 --> 00:08:28,639
gnats is the free ada compiler you heard

163
00:08:27,039 --> 00:08:31,680
about

164
00:08:28,639 --> 00:08:34,320
just before the

165
00:08:31,680 --> 00:08:35,519
build time of let's say you have a piece

166
00:08:34,320 --> 00:08:38,560
of code

167
00:08:35,519 --> 00:08:42,000
you play with hack it's less than

168
00:08:38,559 --> 00:08:45,119
100 of a second so it really

169
00:08:42,000 --> 00:08:47,680
compiles and typically a beginner or a

170
00:08:45,120 --> 00:08:50,240
script language user

171
00:08:47,680 --> 00:08:50,959
who just doesn't know what's a compiler

172
00:08:50,240 --> 00:08:54,480
is

173
00:08:50,959 --> 00:08:57,920
whatever they just see this person

174
00:08:54,480 --> 00:09:01,279
wants to to to just run the the thing it

175
00:08:57,920 --> 00:09:03,599
runs without even

176
00:09:01,279 --> 00:09:06,800
you he doesn't notice there is a

177
00:09:03,600 --> 00:09:06,800
compilation behind

178
00:09:07,360 --> 00:09:14,240
it's completely portable so it's really

179
00:09:10,640 --> 00:09:15,519
you can compile it on a linux whatever

180
00:09:14,240 --> 00:09:20,720
system

181
00:09:15,519 --> 00:09:24,080
that's leveraging the portability of ada

182
00:09:20,720 --> 00:09:27,600
so don't no conditional whatever no

183
00:09:24,080 --> 00:09:32,399
no special codes the

184
00:09:27,600 --> 00:09:34,959
source um either source input to hack

185
00:09:32,399 --> 00:09:36,800
can be a file but it can be actually any

186
00:09:34,959 --> 00:09:39,119
stream so you could

187
00:09:36,800 --> 00:09:40,319
have a zip archive for instance with a

188
00:09:39,120 --> 00:09:44,480
with a library

189
00:09:40,320 --> 00:09:47,920
and compile all that or editor data

190
00:09:44,480 --> 00:09:52,160
or web stream you can you could have

191
00:09:47,920 --> 00:09:52,160
you could put hack on a web server

192
00:09:53,839 --> 00:09:58,959
currently the target there is only one

193
00:09:56,959 --> 00:10:03,439
target it's a virtual machine

194
00:09:58,959 --> 00:10:06,319
but you can do everything with

195
00:10:03,440 --> 00:10:07,279
with hack i mean it's open source it's

196
00:10:06,320 --> 00:10:11,760
free

197
00:10:07,279 --> 00:10:15,439
you can implement your own target

198
00:10:11,760 --> 00:10:15,439
ideally through an abstraction

199
00:10:16,959 --> 00:10:21,040
so where do you find hack it's on

200
00:10:20,000 --> 00:10:24,560
sourceforge

201
00:10:21,040 --> 00:10:27,680
on github you can google it and

202
00:10:24,560 --> 00:10:31,680
you find it easily

203
00:10:27,680 --> 00:10:35,040
and there is i can mention two

204
00:10:31,680 --> 00:10:38,800
open source projects one is

205
00:10:35,040 --> 00:10:43,680
layer is is an editor with an

206
00:10:38,800 --> 00:10:47,199
ada focus which embeds

207
00:10:43,680 --> 00:10:50,160
this compiler this hack compiler as well

208
00:10:47,200 --> 00:10:51,680
but you could also embed into your

209
00:10:50,160 --> 00:10:55,360
editor whatever

210
00:10:51,680 --> 00:10:56,800
it's all open and i mentioned pascal to

211
00:10:55,360 --> 00:11:00,079
ada if you

212
00:10:56,800 --> 00:11:03,120
so this translator which was the basis

213
00:11:00,079 --> 00:11:07,279
of translating small ada

214
00:11:03,120 --> 00:11:10,720
into hack now if i have just a little

215
00:11:07,279 --> 00:11:15,839
some minutes i can i show you a bit

216
00:11:10,720 --> 00:11:15,839
how it works

217
00:11:16,720 --> 00:11:21,120
so let's see i'm just completely

218
00:11:19,279 --> 00:11:28,079
beginning

219
00:11:21,120 --> 00:11:32,560
with a blank page

220
00:11:28,079 --> 00:11:35,199
i have a few notions of the syntax but

221
00:11:32,560 --> 00:11:35,199
let's try

222
00:11:39,920 --> 00:11:47,680
okay something like that and

223
00:11:43,519 --> 00:11:50,399
okay so let's try oh i forgot

224
00:11:47,680 --> 00:11:52,638
okay instead of text io which is

225
00:11:50,399 --> 00:11:55,600
familiar

226
00:11:52,639 --> 00:11:57,519
i have a special package so that's

227
00:11:55,600 --> 00:12:00,959
something

228
00:11:57,519 --> 00:12:03,760
that also uh there's a real

229
00:12:00,959 --> 00:12:04,239
hack pack for a real ada compiler like

230
00:12:03,760 --> 00:12:05,839
nathan

231
00:12:04,240 --> 00:12:07,600
and so on so you can run the same

232
00:12:05,839 --> 00:12:11,279
program with hack

233
00:12:07,600 --> 00:12:14,480
and a serious header compiler

234
00:12:11,279 --> 00:12:25,839
okay but i get my hello oh

235
00:12:14,480 --> 00:12:25,839
and it's too trivial i put a loop

236
00:12:28,399 --> 00:12:40,240
i forget the end loop and oh

237
00:12:31,440 --> 00:12:40,240
a missing closing loop okay

238
00:12:40,320 --> 00:12:43,519
and perhaps i i just display something

239
00:12:43,200 --> 00:12:46,079
with

240
00:12:43,519 --> 00:12:46,079
the number

241
00:12:49,680 --> 00:12:55,120
so here you go you have i square and so

242
00:12:52,560 --> 00:12:55,119
on and so on

243
00:12:55,530 --> 00:13:00,240
[Music]

244
00:12:57,200 --> 00:13:00,240
here a real

245
00:13:02,560 --> 00:13:09,680
a real use i had i i had to

246
00:13:06,639 --> 00:13:10,560
given year months and day i had to to

247
00:13:09,680 --> 00:13:11,760
give them

248
00:13:10,560 --> 00:13:14,399
[Music]

249
00:13:11,760 --> 00:13:15,519
have an algorithm that gives the number

250
00:13:14,399 --> 00:13:18,880
of days since

251
00:13:15,519 --> 00:13:22,639
a date but since

252
00:13:18,880 --> 00:13:26,240
1901 it's for

253
00:13:22,639 --> 00:13:29,519
dates in spreadsheets they began

254
00:13:26,240 --> 00:13:32,880
bidding around this date so so

255
00:13:29,519 --> 00:13:36,320
it's an a small snippet

256
00:13:32,880 --> 00:13:40,720
i've developed with hack and

257
00:13:36,320 --> 00:13:42,800
so you have the result

258
00:13:40,720 --> 00:13:48,639
so it is typically something you can

259
00:13:42,800 --> 00:13:52,399
already do with hack

260
00:13:48,639 --> 00:13:57,760
here you have a diabolic

261
00:13:52,399 --> 00:14:02,399
diabolical recursive function

262
00:13:57,760 --> 00:14:06,160
by a mathematician called ackermann

263
00:14:02,399 --> 00:14:09,360
and yeah so you have

264
00:14:06,160 --> 00:14:12,880
it's very deeply recursive and

265
00:14:09,360 --> 00:14:12,880
you you have the same

266
00:14:13,040 --> 00:14:19,920
with gnat so so the same piece of code i

267
00:14:17,440 --> 00:14:19,920
run it

268
00:14:21,279 --> 00:14:28,560
it's a bit slower of course which

269
00:14:24,560 --> 00:14:31,040
so it needs to be built and

270
00:14:28,560 --> 00:14:31,839
yeah it's a you you see the advantage of

271
00:14:31,040 --> 00:14:34,880
having uh

272
00:14:31,839 --> 00:14:38,399
something perhaps faster like

273
00:14:34,880 --> 00:14:39,279
a hack for a small piece of code you

274
00:14:38,399 --> 00:14:41,440
don't

275
00:14:39,279 --> 00:14:42,639
perhaps a beginner would be afraid by

276
00:14:41,440 --> 00:14:46,160
all this compile

277
00:14:42,639 --> 00:14:50,240
bind and link whatever and

278
00:14:46,160 --> 00:14:50,240
so you have also the same results

279
00:14:50,399 --> 00:14:59,839
yeah so questions

280
00:15:00,800 --> 00:15:04,319
did you already try to create web

281
00:15:03,040 --> 00:15:07,199
services with the

282
00:15:04,320 --> 00:15:07,199
other web server

283
00:15:07,680 --> 00:15:14,399
so web services no i didn't try

284
00:15:11,040 --> 00:15:19,120
so far but you can plug

285
00:15:14,399 --> 00:15:22,240
any stream to that so it's feasible but

286
00:15:19,120 --> 00:15:27,839
i did not try you know

287
00:15:22,240 --> 00:15:27,839
the idea would be to use it as a

288
00:15:30,190 --> 00:15:36,800
[Music]

289
00:15:32,880 --> 00:15:39,279
it could be a good idea but perhaps

290
00:15:36,800 --> 00:15:40,959
at the moment the quality is really bad

291
00:15:39,279 --> 00:15:44,000
with it with actually

292
00:15:40,959 --> 00:15:45,758
it's a bit it's still a bit buggy or not

293
00:15:44,000 --> 00:15:49,199
real it does

294
00:15:45,759 --> 00:15:52,240
so it's i would first address that

295
00:15:49,199 --> 00:15:52,880
the quality issues and then put as a web

296
00:15:52,240 --> 00:15:56,079
service

297
00:15:52,880 --> 00:15:58,480
because it would be a bad promotion for

298
00:15:56,079 --> 00:15:58,479
ada

299
00:16:06,639 --> 00:16:14,079
so for runtime runtime errors uh

300
00:16:10,800 --> 00:16:17,839
uh presently there is absolutely uh

301
00:16:14,079 --> 00:16:22,719
nothing i think no exceptions and so on

302
00:16:17,839 --> 00:16:25,279
so either perhaps it could be good for a

303
00:16:22,720 --> 00:16:27,279
target with where you don't want

304
00:16:25,279 --> 00:16:30,399
exceptions for instance

305
00:16:27,279 --> 00:16:34,480
perhaps or very small embedded you see

306
00:16:30,399 --> 00:16:36,959
complex thing or you

307
00:16:34,480 --> 00:16:38,320
we would need to to add exceptions to to

308
00:16:36,959 --> 00:16:39,599
hack yeah

309
00:16:38,320 --> 00:16:41,440
so currently yeah it's a bit

310
00:16:39,600 --> 00:16:44,320
disappointing it's there is no

311
00:16:41,440 --> 00:16:46,959
no no exception or disappointing or not

312
00:16:44,320 --> 00:16:46,959
depending on

313
00:17:00,560 --> 00:17:04,000
works properly for a certain piece of

314
00:17:02,240 --> 00:17:08,240
code by compare the output to

315
00:17:04,000 --> 00:17:11,839
naft or derek please you know the

316
00:17:08,240 --> 00:17:15,039
the ig i mean now it's uh

317
00:17:11,839 --> 00:17:17,520
the common denominator is very small but

318
00:17:15,039 --> 00:17:20,799
the idea to increase this

319
00:17:17,520 --> 00:17:23,839
common part to increase the subset

320
00:17:20,799 --> 00:17:26,480
so it would be even

321
00:17:23,839 --> 00:17:27,520
if it is a very small subset it would be

322
00:17:26,480 --> 00:17:30,080
real ada

323
00:17:27,520 --> 00:17:33,600
it would be completely compatible it's

324
00:17:30,080 --> 00:17:36,080
not the idea of making a branch of ada

325
00:17:33,600 --> 00:17:38,000
or whatever it's better to to to have

326
00:17:36,080 --> 00:17:41,918
something that you you can

327
00:17:38,000 --> 00:17:46,080
use in a different system in objected

328
00:17:41,919 --> 00:17:48,720
gnat whatever using it as a

329
00:17:46,080 --> 00:17:50,240
way of proving that the hack compiler

330
00:17:48,720 --> 00:17:53,280
works properly for a piece of code

331
00:17:50,240 --> 00:17:57,120
ah yeah yeah of course i i do

332
00:17:53,280 --> 00:18:00,160
i do that already to do

333
00:17:57,120 --> 00:18:01,840
to check yeah of course uh yeah it's

334
00:18:00,160 --> 00:18:06,320
also useful for that

335
00:18:01,840 --> 00:18:06,320
for for debugging uh hack basically

336
00:18:06,720 --> 00:18:12,000
when it comes it uses all the code of

337
00:18:09,120 --> 00:18:12,000
the processor

338
00:18:12,240 --> 00:18:15,840
just when core is used for compilation

339
00:18:14,640 --> 00:18:18,320
yeah

340
00:18:15,840 --> 00:18:18,320
so uh

341
00:18:20,000 --> 00:18:22,799
it's very quick

342
00:18:24,960 --> 00:18:28,880
what are you what are you using

343
00:18:32,480 --> 00:18:39,360
uh currently it's um using

344
00:18:35,520 --> 00:18:43,120
uh only uh it's an adrock

345
00:18:39,360 --> 00:18:46,159
parser so it originates from this

346
00:18:43,120 --> 00:18:46,879
pascal parser it's recursive and so it's

347
00:18:46,160 --> 00:18:49,919
a

348
00:18:46,880 --> 00:18:56,400
so it's an own parser basically it's a

349
00:18:49,919 --> 00:18:59,200
big piece of code

350
00:18:56,400 --> 00:18:59,200
other questions

351
00:19:00,180 --> 00:19:03,289
[Music]

352
00:19:07,919 --> 00:19:11,120
i think we had to discuss with the

353
00:19:09,679 --> 00:19:13,280
microservices or

354
00:19:11,120 --> 00:19:14,320
or the web service provider i think it

355
00:19:13,280 --> 00:19:16,960
might be reasonable to

356
00:19:14,320 --> 00:19:17,520
provide this also as a package so that

357
00:19:16,960 --> 00:19:19,919
it

358
00:19:17,520 --> 00:19:20,799
had the potential to be used for dynamic

359
00:19:19,919 --> 00:19:24,400
compilation

360
00:19:20,799 --> 00:19:24,400
in some environments

361
00:19:35,919 --> 00:19:39,120
yeah it's it's a possibility i i think

362
00:19:38,720 --> 00:19:42,480
it's

363
00:19:39,120 --> 00:19:42,479
really open you you can

364
00:19:46,320 --> 00:19:49,120
other questions

365
00:19:51,360 --> 00:19:53,840
then yeah

366
00:19:53,980 --> 00:20:01,039
[Applause]

