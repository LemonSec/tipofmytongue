1
00:00:06,399 --> 00:00:10,160
i can

2
00:00:06,960 --> 00:00:14,879
okay so okay i will start

3
00:00:10,160 --> 00:00:17,359
so hey let me talk now

4
00:00:14,880 --> 00:00:18,480
it's my fault i know i started okay i

5
00:00:17,359 --> 00:00:21,520
need to stay here

6
00:00:18,480 --> 00:00:24,640
they told me don't go around stop

7
00:00:21,520 --> 00:00:25,519
to uh just jump all the you know all the

8
00:00:24,640 --> 00:00:28,240
intro

9
00:00:25,519 --> 00:00:29,679
and uh the agenda will be i would do a

10
00:00:28,240 --> 00:00:32,879
small step back

11
00:00:29,679 --> 00:00:34,960
just to let you understand my

12
00:00:32,880 --> 00:00:36,399
mentality and how i try to approach

13
00:00:34,960 --> 00:00:39,760
things and then

14
00:00:36,399 --> 00:00:42,879
why we have uh why we use hash join

15
00:00:39,760 --> 00:00:45,519
and what kind of test

16
00:00:42,879 --> 00:00:46,239
baseline i build up and then the test

17
00:00:45,520 --> 00:00:50,399
between

18
00:00:46,239 --> 00:00:52,239
different distributions uh for uh for

19
00:00:50,399 --> 00:00:54,559
hash join and then my personal

20
00:00:52,239 --> 00:00:59,038
consideration can you hear me

21
00:00:54,559 --> 00:01:03,199
on the back yes perfect so

22
00:00:59,039 --> 00:01:05,360
these numbers come from a city that is

23
00:01:03,199 --> 00:01:06,720
somewhere in an island that is not part

24
00:01:05,360 --> 00:01:11,119
of europe anymore

25
00:01:06,720 --> 00:01:11,119
which is london and uh

26
00:01:11,280 --> 00:01:15,119
okay i i was trying to figure out some

27
00:01:13,840 --> 00:01:16,799
statistics and uh

28
00:01:15,119 --> 00:01:19,040
actually london was the only one giving

29
00:01:16,799 --> 00:01:22,159
me quickly some numbers

30
00:01:19,040 --> 00:01:23,439
uh and we have 10 million people and we

31
00:01:22,159 --> 00:01:25,840
have 60 000

32
00:01:23,439 --> 00:01:26,798
different uh streets that can be that

33
00:01:25,840 --> 00:01:29,920
are reported

34
00:01:26,799 --> 00:01:30,799
so far that's what they said and 30 000

35
00:01:29,920 --> 00:01:33,079
different uh

36
00:01:30,799 --> 00:01:34,560
professions or you know work

37
00:01:33,079 --> 00:01:38,559
categorization

38
00:01:34,560 --> 00:01:39,360
and as human being if i think i want to

39
00:01:38,560 --> 00:01:42,159
know

40
00:01:39,360 --> 00:01:43,119
uh who is the physicians in that

41
00:01:42,159 --> 00:01:45,680
specific

42
00:01:43,119 --> 00:01:47,040
building that is in front of me i put i

43
00:01:45,680 --> 00:01:49,920
you know i realize i

44
00:01:47,040 --> 00:01:51,439
just picture in front of my my eyes

45
00:01:49,920 --> 00:01:53,920
someone so people

46
00:01:51,439 --> 00:01:54,960
that is living in front of me and these

47
00:01:53,920 --> 00:01:58,399
are physicians

48
00:01:54,960 --> 00:02:01,520
right something like that now

49
00:01:58,399 --> 00:02:04,399
uh how a remote database a

50
00:02:01,520 --> 00:02:05,280
remote sorry relation database works is

51
00:02:04,399 --> 00:02:07,840
totally different

52
00:02:05,280 --> 00:02:08,878
right you try to optimize what he is

53
00:02:07,840 --> 00:02:11,760
looking for

54
00:02:08,878 --> 00:02:12,480
based on the information he got by each

55
00:02:11,760 --> 00:02:14,560
table

56
00:02:12,480 --> 00:02:16,079
and by the number of rows so it's trying

57
00:02:14,560 --> 00:02:18,160
to optimize the things

58
00:02:16,080 --> 00:02:19,200
so for instance we can have a plan

59
00:02:18,160 --> 00:02:21,120
saying

60
00:02:19,200 --> 00:02:23,119
let's start with the streets and so we

61
00:02:21,120 --> 00:02:25,520
have one streets one address

62
00:02:23,120 --> 00:02:26,640
at the end and then identify all the

63
00:02:25,520 --> 00:02:29,200
people living there

64
00:02:26,640 --> 00:02:31,040
let's say 40 people living in a bill in

65
00:02:29,200 --> 00:02:33,760
that specific building

66
00:02:31,040 --> 00:02:34,640
and at the end how many physicians we

67
00:02:33,760 --> 00:02:37,920
will have just

68
00:02:34,640 --> 00:02:39,679
one and this is a possible plan right

69
00:02:37,920 --> 00:02:41,280
another plan that looks like very

70
00:02:39,680 --> 00:02:43,599
similar actually if you check

71
00:02:41,280 --> 00:02:45,519
the first one is starting with more rows

72
00:02:43,599 --> 00:02:46,480
number the second one starts with the

73
00:02:45,519 --> 00:02:48,879
last number

74
00:02:46,480 --> 00:02:50,720
with less rows say okay no let's start

75
00:02:48,879 --> 00:02:53,440
with the professions category right

76
00:02:50,720 --> 00:02:54,000
and see how many professions uh are in

77
00:02:53,440 --> 00:02:55,519
uh

78
00:02:54,000 --> 00:02:57,440
are you looking for so filter for

79
00:02:55,519 --> 00:02:59,920
credential for for profession

80
00:02:57,440 --> 00:03:00,560
uh i am looking for a physicians so one

81
00:02:59,920 --> 00:03:03,040
role

82
00:03:00,560 --> 00:03:04,879
uh then featured the 10 million people

83
00:03:03,040 --> 00:03:08,079
and then at the end

84
00:03:04,879 --> 00:03:11,120
filter for the address now

85
00:03:08,080 --> 00:03:13,599
if you those two things it looks like

86
00:03:11,120 --> 00:03:14,640
very close and uh quite the same but

87
00:03:13,599 --> 00:03:17,440
they are not

88
00:03:14,640 --> 00:03:19,760
if you use an index on the different

89
00:03:17,440 --> 00:03:22,800
tables and you do the calculation

90
00:03:19,760 --> 00:03:23,599
the first plan will result in more or

91
00:03:22,800 --> 00:03:26,640
less in 10

92
00:03:23,599 --> 00:03:29,119
000 rows

93
00:03:26,640 --> 00:03:30,559
look up i mean it will look for 10 000

94
00:03:29,120 --> 00:03:34,239
rows well the second one

95
00:03:30,560 --> 00:03:35,680
will look for 600 000 rows if we remove

96
00:03:34,239 --> 00:03:38,560
the indexes

97
00:03:35,680 --> 00:03:40,239
the scan will cost us 10 million rows in

98
00:03:38,560 --> 00:03:43,360
the first plan and then

99
00:03:40,239 --> 00:03:46,239
17 billions for the second one i think

100
00:03:43,360 --> 00:03:49,440
this is a huge difference don't you

101
00:03:46,239 --> 00:03:51,680
they were not the same at all right okay

102
00:03:49,440 --> 00:03:53,920
and also if the second one was looking

103
00:03:51,680 --> 00:03:54,480
as uh the best option because start with

104
00:03:53,920 --> 00:03:56,079
the table

105
00:03:54,480 --> 00:03:57,599
the smaller table it actually doesn't

106
00:03:56,080 --> 00:03:59,760
work well

107
00:03:57,599 --> 00:04:00,959
it's failing there's all the calculation

108
00:03:59,760 --> 00:04:03,359
if i have to show you all the

109
00:04:00,959 --> 00:04:05,760
calculation we will say here until uh

110
00:04:03,360 --> 00:04:06,720
fred's speech but so trust me that that

111
00:04:05,760 --> 00:04:08,480
was coming up

112
00:04:06,720 --> 00:04:10,480
and this is why we have ash join

113
00:04:08,480 --> 00:04:13,200
actually because uh

114
00:04:10,480 --> 00:04:15,518
no no why this is why why we have a hash

115
00:04:13,200 --> 00:04:18,959
join we have hash join because

116
00:04:15,519 --> 00:04:21,680
in case like uh uh the first uh

117
00:04:18,959 --> 00:04:23,280
the first case the first column here uh

118
00:04:21,680 --> 00:04:26,639
that uses an index

119
00:04:23,280 --> 00:04:29,520
we have um this is coming from

120
00:04:26,639 --> 00:04:30,400
yeah from queer all the tests comes from

121
00:04:29,520 --> 00:04:34,479
dbt

122
00:04:30,400 --> 00:04:36,159
3 and uh on each test i have

123
00:04:34,479 --> 00:04:38,080
reporting that when there is an

124
00:04:36,160 --> 00:04:39,600
exception or there is something to say i

125
00:04:38,080 --> 00:04:41,599
report

126
00:04:39,600 --> 00:04:45,120
the query number so you can go back and

127
00:04:41,600 --> 00:04:47,680
check and analyze what i'm saying

128
00:04:45,120 --> 00:04:48,960
the data for instance if i use an index

129
00:04:47,680 --> 00:04:51,360
the data used for that

130
00:04:48,960 --> 00:04:52,239
specific nested loop index next that

131
00:04:51,360 --> 00:04:55,360
loop

132
00:04:52,240 --> 00:04:58,160
cost 12 megabytes

133
00:04:55,360 --> 00:04:59,840
if i remove the index and the same kind

134
00:04:58,160 --> 00:05:02,400
of

135
00:04:59,840 --> 00:05:03,359
block nested loop at that point that is

136
00:05:02,400 --> 00:05:06,479
going through

137
00:05:03,360 --> 00:05:07,600
uh you know the full scan will cost one

138
00:05:06,479 --> 00:05:10,800
gigabyte

139
00:05:07,600 --> 00:05:12,960
so there is a huge improve increase of

140
00:05:10,800 --> 00:05:14,160
dimension and number of rows it needs to

141
00:05:12,960 --> 00:05:18,400
be parse

142
00:05:14,160 --> 00:05:20,400
right and scan our evo we know that

143
00:05:18,400 --> 00:05:21,679
and when scan takes place we have a

144
00:05:20,400 --> 00:05:24,479
block nested loop

145
00:05:21,680 --> 00:05:25,840
and this is why we have hash join that's

146
00:05:24,479 --> 00:05:29,599
to help us to

147
00:05:25,840 --> 00:05:32,479
prevent that now um

148
00:05:29,600 --> 00:05:34,560
and if with the new mask well uh um

149
00:05:32,479 --> 00:05:35,599
explain with three you can easily see

150
00:05:34,560 --> 00:05:38,800
when there is an s

151
00:05:35,600 --> 00:05:42,240
join and what kind of uh things

152
00:05:38,800 --> 00:05:44,560
it does now uh eric already explained

153
00:05:42,240 --> 00:05:45,600
everything about hash join i'm not going

154
00:05:44,560 --> 00:05:48,080
to repeat

155
00:05:45,600 --> 00:05:50,560
uh just brief mention we have a lot of

156
00:05:48,080 --> 00:05:52,800
mariadb people monty itself

157
00:05:50,560 --> 00:05:54,720
but i'm not going to explain hash join

158
00:05:52,800 --> 00:05:57,759
in mariadb i'm just saying

159
00:05:54,720 --> 00:05:59,360
uh using the i called all mysql iterator

160
00:05:57,759 --> 00:06:01,680
to differentiate to the new mask

161
00:05:59,360 --> 00:06:02,479
iterator but it's the mariadb mysql

162
00:06:01,680 --> 00:06:06,160
iterator

163
00:06:02,479 --> 00:06:07,840
classic join uh approach equi-condition

164
00:06:06,160 --> 00:06:10,240
subjoin and different

165
00:06:07,840 --> 00:06:11,280
algorithm right that for the block

166
00:06:10,240 --> 00:06:13,600
nested loop

167
00:06:11,280 --> 00:06:15,039
but we are interested only for the to

168
00:06:13,600 --> 00:06:18,960
the hash join

169
00:06:15,039 --> 00:06:22,240
now i was not sure to show if i would

170
00:06:18,960 --> 00:06:23,758
show that but i will this is an image

171
00:06:22,240 --> 00:06:26,560
coming from

172
00:06:23,759 --> 00:06:27,919
mysql showing the difference between in

173
00:06:26,560 --> 00:06:30,639
performance between

174
00:06:27,919 --> 00:06:32,080
blog nested loop and hash join but to me

175
00:06:30,639 --> 00:06:34,639
this is misleading

176
00:06:32,080 --> 00:06:35,280
because that assumed and and sorry this

177
00:06:34,639 --> 00:06:38,560
also use

178
00:06:35,280 --> 00:06:40,799
um dbt 3 as test

179
00:06:38,560 --> 00:06:41,759
and you can see the query on the on the

180
00:06:40,800 --> 00:06:44,080
bottom

181
00:06:41,759 --> 00:06:45,440
um i think this is misleading because it

182
00:06:44,080 --> 00:06:49,680
gives you the idea that

183
00:06:45,440 --> 00:06:53,759
everything works perfectly

184
00:06:49,680 --> 00:06:55,680
much better using hash join

185
00:06:53,759 --> 00:06:57,520
but this is true only when you remove

186
00:06:55,680 --> 00:07:01,520
all the indexes

187
00:06:57,520 --> 00:07:04,560
and you know we know that dbt tests use

188
00:07:01,520 --> 00:07:05,919
multiple hash multiple joints and i

189
00:07:04,560 --> 00:07:08,639
don't think there will be

190
00:07:05,919 --> 00:07:09,359
there will be one single dba here that

191
00:07:08,639 --> 00:07:12,479
will remove

192
00:07:09,360 --> 00:07:13,759
all the index in production uh to do the

193
00:07:12,479 --> 00:07:16,000
you know

194
00:07:13,759 --> 00:07:17,039
to make to see if this is more efficient

195
00:07:16,000 --> 00:07:19,520
or not so

196
00:07:17,039 --> 00:07:22,240
in my opinion when we analyze this kind

197
00:07:19,520 --> 00:07:25,359
of things we need to analyze the things

198
00:07:22,240 --> 00:07:25,919
removing maybe just one index in the

199
00:07:25,360 --> 00:07:29,280
join

200
00:07:25,919 --> 00:07:32,400
and to and see what is going to happen

201
00:07:29,280 --> 00:07:36,239
with a mix of nested loop for the index

202
00:07:32,400 --> 00:07:39,520
and hash join okay which for me is more

203
00:07:36,240 --> 00:07:40,240
real than other situation uh the test i

204
00:07:39,520 --> 00:07:43,280
have done

205
00:07:40,240 --> 00:07:47,520
for the baseline i was using dbt tress

206
00:07:43,280 --> 00:07:47,919
dbt 3 with factor 1 and photo 3 a fatto

207
00:07:47,520 --> 00:07:50,960
4

208
00:07:47,919 --> 00:07:57,198
photo 1 15 buffer pool photo 4 doesn't

209
00:07:50,960 --> 00:07:58,000
fit in buffer pool and mysql 80819 ps018

210
00:07:57,199 --> 00:08:02,479
mariadb

211
00:07:58,000 --> 00:08:03,199
10 412 and everything was more or less

212
00:08:02,479 --> 00:08:05,520
configured

213
00:08:03,199 --> 00:08:06,560
as a default except the buffer pull

214
00:08:05,520 --> 00:08:09,680
dimension

215
00:08:06,560 --> 00:08:12,960
i had adaptive hash

216
00:08:09,680 --> 00:08:15,840
index disabled and the buffer pull

217
00:08:12,960 --> 00:08:17,520
the gem buffer pull to one gigabyte for

218
00:08:15,840 --> 00:08:19,280
one specific reason but

219
00:08:17,520 --> 00:08:20,560
because i don't want to spilt on this

220
00:08:19,280 --> 00:08:23,440
come as much as i can

221
00:08:20,560 --> 00:08:24,160
okay everything should be in memory now

222
00:08:23,440 --> 00:08:26,479
from the first

223
00:08:24,160 --> 00:08:27,840
round of tests what come up is that

224
00:08:26,479 --> 00:08:29,359
lower is better

225
00:08:27,840 --> 00:08:31,039
and from the first round of tests what

226
00:08:29,360 --> 00:08:34,640
comes up this is

227
00:08:31,039 --> 00:08:38,000
against standard dbt 310

228
00:08:34,640 --> 00:08:40,080
dbt3 with all the indexes right

229
00:08:38,000 --> 00:08:41,120
we have that db factor one and the big

230
00:08:40,080 --> 00:08:42,719
photo four are

231
00:08:41,120 --> 00:08:44,720
more or less the trend is more or less

232
00:08:42,719 --> 00:08:47,440
there and what it seems

233
00:08:44,720 --> 00:08:48,080
what it seems is that maria db is going

234
00:08:47,440 --> 00:08:50,320
uh

235
00:08:48,080 --> 00:08:51,360
it's taking longer monty stay there

236
00:08:50,320 --> 00:08:55,440
don't worry

237
00:08:51,360 --> 00:08:58,080
stay there yeah okay okay uh

238
00:08:55,440 --> 00:08:59,600
but yeah it looks like it's taking

239
00:08:58,080 --> 00:09:03,440
longer and actually

240
00:08:59,600 --> 00:09:06,959
the sum of the time is is higher right

241
00:09:03,440 --> 00:09:10,560
but if we start to analyze uh

242
00:09:06,959 --> 00:09:13,839
how many times this this row has been

243
00:09:10,560 --> 00:09:16,640
really for real more uh efficient

244
00:09:13,839 --> 00:09:17,519
than the others so how many times

245
00:09:16,640 --> 00:09:20,800
mariadb

246
00:09:17,519 --> 00:09:22,320
or my scholar has been more efficient

247
00:09:20,800 --> 00:09:25,680
than

248
00:09:22,320 --> 00:09:27,920
percona and mysql we will see that

249
00:09:25,680 --> 00:09:29,040
the that we have almost an equal

250
00:09:27,920 --> 00:09:31,519
distribution

251
00:09:29,040 --> 00:09:32,560
just one query two query are different

252
00:09:31,519 --> 00:09:35,680
right

253
00:09:32,560 --> 00:09:38,800
and this is so what's going on here

254
00:09:35,680 --> 00:09:40,399
what is going on is that we have the two

255
00:09:38,800 --> 00:09:40,800
distribution doing more or less the same

256
00:09:40,399 --> 00:09:44,560
thing

257
00:09:40,800 --> 00:09:47,599
except few cases and this is for dbt re

258
00:09:44,560 --> 00:09:50,959
test with the indexes

259
00:09:47,600 --> 00:09:54,080
now the hash join run i

260
00:09:50,959 --> 00:09:55,518
i did only with uh factor one because i

261
00:09:54,080 --> 00:09:58,880
want everything buffer pull

262
00:09:55,519 --> 00:10:00,800
again i try to minimize the disk um

263
00:09:58,880 --> 00:10:02,240
only a few queries are relevant so the

264
00:10:00,800 --> 00:10:06,479
the ones that have very

265
00:10:02,240 --> 00:10:09,920
significant hash joints and um

266
00:10:06,480 --> 00:10:11,360
and i also didn't kept separated

267
00:10:09,920 --> 00:10:13,199
percona and mask while they used the

268
00:10:11,360 --> 00:10:15,600
same algorithm

269
00:10:13,200 --> 00:10:17,040
and interesting was that some query were

270
00:10:15,600 --> 00:10:20,640
hung unless

271
00:10:17,040 --> 00:10:21,279
a few changes right and the tests were

272
00:10:20,640 --> 00:10:24,160
done with

273
00:10:21,279 --> 00:10:26,399
buffer pool empty and then redone again

274
00:10:24,160 --> 00:10:29,439
with the buffer pool field

275
00:10:26,399 --> 00:10:33,200
because you will see what happened

276
00:10:29,440 --> 00:10:36,320
and at first run what is comes up is

277
00:10:33,200 --> 00:10:37,600
totally the contrary mario db is much

278
00:10:36,320 --> 00:10:40,880
more efficient

279
00:10:37,600 --> 00:10:44,079
than mysql in

280
00:10:40,880 --> 00:10:47,519
the total time that is actually taken by

281
00:10:44,079 --> 00:10:51,680
marie db is less in executing

282
00:10:47,519 --> 00:10:52,399
the uh the joint and this is interesting

283
00:10:51,680 --> 00:10:55,359
because that

284
00:10:52,399 --> 00:10:56,640
is for hash joint total time and with

285
00:10:55,360 --> 00:10:58,959
the base with the

286
00:10:56,640 --> 00:11:01,199
index we saw that there were some

287
00:10:58,959 --> 00:11:02,319
difference keep in mind that i was

288
00:11:01,200 --> 00:11:04,959
summarizing here

289
00:11:02,320 --> 00:11:05,519
not all the queries but just the one

290
00:11:04,959 --> 00:11:08,000
that i

291
00:11:05,519 --> 00:11:09,760
also apply for the hash join so the

292
00:11:08,000 --> 00:11:13,360
results are a little bit different

293
00:11:09,760 --> 00:11:16,480
from the previous graph but again if i

294
00:11:13,360 --> 00:11:17,519
start to count how many times was my

295
00:11:16,480 --> 00:11:21,200
square

296
00:11:17,519 --> 00:11:23,360
better than uh marietti b or

297
00:11:21,200 --> 00:11:24,880
visa versa how many times my adb was

298
00:11:23,360 --> 00:11:28,720
better than my sql

299
00:11:24,880 --> 00:11:32,480
we see that with the buffer pool empty

300
00:11:28,720 --> 00:11:35,440
mario b was nine over six and the

301
00:11:32,480 --> 00:11:35,920
buffer pool uh field was eight over

302
00:11:35,440 --> 00:11:39,200
seven

303
00:11:35,920 --> 00:11:43,760
so guys we are there right no

304
00:11:39,200 --> 00:11:46,800
okay and again why so

305
00:11:43,760 --> 00:11:50,240
uh the query execution time

306
00:11:46,800 --> 00:11:51,279
here is the buffer pool empty tell us

307
00:11:50,240 --> 00:11:55,040
that

308
00:11:51,279 --> 00:11:58,560
again once more the two distro are

309
00:11:55,040 --> 00:12:01,599
very close one to uh to the other in

310
00:11:58,560 --> 00:12:04,800
their in how they perform except

311
00:12:01,600 --> 00:12:08,560
few cases in few cases we can see that

312
00:12:04,800 --> 00:12:12,399
um the mask well run was dramatically

313
00:12:08,560 --> 00:12:15,040
worse than than the one in mariadb

314
00:12:12,399 --> 00:12:16,079
and we have for instance query 19 that

315
00:12:15,040 --> 00:12:18,719
is taking much

316
00:12:16,079 --> 00:12:19,839
longer or query two that is taking

317
00:12:18,720 --> 00:12:22,959
longer as well

318
00:12:19,839 --> 00:12:25,839
and then we have a special case here

319
00:12:22,959 --> 00:12:26,719
that i will describe as an interesting

320
00:12:25,839 --> 00:12:29,920
case that is

321
00:12:26,720 --> 00:12:33,839
the famous query five and

322
00:12:29,920 --> 00:12:37,360
uh eric we have been uh

323
00:12:33,839 --> 00:12:41,279
yeah working on that interestingly um

324
00:12:37,360 --> 00:12:44,639
when the buffer pool is actually filled

325
00:12:41,279 --> 00:12:48,320
the my mariadb is

326
00:12:44,639 --> 00:12:51,760
in some cases less efficient than before

327
00:12:48,320 --> 00:12:56,399
and and mysql is able to gain

328
00:12:51,760 --> 00:13:00,000
a little bit of uh you know over it

329
00:12:56,399 --> 00:13:00,399
but again as we see the queries that

330
00:13:00,000 --> 00:13:02,800
were

331
00:13:00,399 --> 00:13:03,519
not correct the query that we're taking

332
00:13:02,800 --> 00:13:06,959
long

333
00:13:03,519 --> 00:13:11,680
they were still taking long

334
00:13:06,959 --> 00:13:14,800
and here we have an example query 5.

335
00:13:11,680 --> 00:13:17,040
with index the query 5 takes 71

336
00:13:14,800 --> 00:13:18,399
seconds in mysql with a buffer pull

337
00:13:17,040 --> 00:13:21,680
empty and a

338
00:13:18,399 --> 00:13:23,360
5 second with buffer pool failed maria

339
00:13:21,680 --> 00:13:26,399
db takes 70 seconds

340
00:13:23,360 --> 00:13:27,120
and four seconds 88 so mario db is

341
00:13:26,399 --> 00:13:29,920
better

342
00:13:27,120 --> 00:13:31,279
mass 12 take a little bit uh longer but

343
00:13:29,920 --> 00:13:34,800
it's a matter of few

344
00:13:31,279 --> 00:13:37,839
you know few things it's not really

345
00:13:34,800 --> 00:13:40,240
too much in a hash join with hash join

346
00:13:37,839 --> 00:13:42,639
we have that the first one

347
00:13:40,240 --> 00:13:43,360
the first one is great uh i can't

348
00:13:42,639 --> 00:13:46,320
believe that

349
00:13:43,360 --> 00:13:47,199
okay the uh the first one for uh buffer

350
00:13:46,320 --> 00:13:50,880
pool empty

351
00:13:47,199 --> 00:13:54,880
in my squad will take 44 447

352
00:13:50,880 --> 00:13:56,240
seconds and maria db 955 seconds so my

353
00:13:54,880 --> 00:13:59,279
squad's much better

354
00:13:56,240 --> 00:14:03,680
but the second running mask will take

355
00:13:59,279 --> 00:14:07,439
eric how many hours

356
00:14:03,680 --> 00:14:10,560
yeah it's 47 hours

357
00:14:07,440 --> 00:14:12,720
it takes 47 hours

358
00:14:10,560 --> 00:14:14,000
actually i was killing the query and say

359
00:14:12,720 --> 00:14:17,440
okay

360
00:14:14,000 --> 00:14:18,240
i reported that to our guys my friends i

361
00:14:17,440 --> 00:14:21,279
love you guys

362
00:14:18,240 --> 00:14:26,320
you know i love you but it was

363
00:14:21,279 --> 00:14:26,320
it was 47 hours and

364
00:14:27,199 --> 00:14:34,639
yeah and the problem here was

365
00:14:30,399 --> 00:14:37,920
that actually the the plan was changed

366
00:14:34,639 --> 00:14:41,519
by the um the the

367
00:14:37,920 --> 00:14:42,719
optimizer and uh it it was not

368
00:14:41,519 --> 00:14:45,040
recognizing

369
00:14:42,720 --> 00:14:46,000
correctly few things and it was

370
00:14:45,040 --> 00:14:49,360
executing

371
00:14:46,000 --> 00:14:52,320
crazy query we in fact in the first

372
00:14:49,360 --> 00:14:53,360
run the one with the buffer pool empty

373
00:14:52,320 --> 00:14:55,680
we were having

374
00:14:53,360 --> 00:14:56,399
data read per join for that specific

375
00:14:55,680 --> 00:14:59,599
drawing

376
00:14:56,399 --> 00:15:02,720
only 129 gigabyte

377
00:14:59,600 --> 00:15:03,920
but in the second run when the buffer

378
00:15:02,720 --> 00:15:07,120
pull was

379
00:15:03,920 --> 00:15:09,839
filled it was doing

380
00:15:07,120 --> 00:15:10,399
four terabytes their data just because

381
00:15:09,839 --> 00:15:13,440
it was

382
00:15:10,399 --> 00:15:16,560
reiterating and doing the thing right

383
00:15:13,440 --> 00:15:20,240
wrong plan of course

384
00:15:16,560 --> 00:15:23,760
there are way of fixing this right

385
00:15:20,240 --> 00:15:27,120
and uh the one way the trick to make it

386
00:15:23,760 --> 00:15:30,160
work better was to change the cost

387
00:15:27,120 --> 00:15:33,680
in the mysql engine cost table

388
00:15:30,160 --> 00:15:34,959
to say hey this query the cost of the

389
00:15:33,680 --> 00:15:37,439
query is the same

390
00:15:34,959 --> 00:15:38,560
either if you use memory or if you use

391
00:15:37,440 --> 00:15:40,880
uh

392
00:15:38,560 --> 00:15:42,479
the desk wait wait wait wait wait what

393
00:15:40,880 --> 00:15:46,079
time wait

394
00:15:42,480 --> 00:15:47,920
and um and actually it works fine and uh

395
00:15:46,079 --> 00:15:49,120
and it works fine and the time at the

396
00:15:47,920 --> 00:15:52,240
end was uh

397
00:15:49,120 --> 00:15:54,160
acceptable uh but obviously that cannot

398
00:15:52,240 --> 00:15:56,240
be used in production right

399
00:15:54,160 --> 00:15:58,160
because you cannot change the cost model

400
00:15:56,240 --> 00:15:59,920
in production you will screw up all your

401
00:15:58,160 --> 00:16:01,759
applications

402
00:15:59,920 --> 00:16:03,120
well you scroll up the access to the

403
00:16:01,759 --> 00:16:06,000
application

404
00:16:03,120 --> 00:16:08,079
um there is another case that i was

405
00:16:06,000 --> 00:16:11,680
mentioning to you the query 19

406
00:16:08,079 --> 00:16:14,399
with a hash join was uh

407
00:16:11,680 --> 00:16:16,638
yeah the query 19 with ash join was in

408
00:16:14,399 --> 00:16:17,519
my squad was taking 10 minutes of 57

409
00:16:16,639 --> 00:16:20,079
second

410
00:16:17,519 --> 00:16:21,680
and in marietti b was taking two minutes

411
00:16:20,079 --> 00:16:24,719
and 70 seconds

412
00:16:21,680 --> 00:16:27,920
but the interesting part here is

413
00:16:24,720 --> 00:16:29,279
if you check the plan it's totally

414
00:16:27,920 --> 00:16:32,479
different

415
00:16:29,279 --> 00:16:34,000
the plan from marietti b was starting

416
00:16:32,480 --> 00:16:37,279
with the small table

417
00:16:34,000 --> 00:16:40,959
index blah blah the par the plan with

418
00:16:37,279 --> 00:16:43,920
from mysql was starting with

419
00:16:40,959 --> 00:16:44,880
the part table using word filtering

420
00:16:43,920 --> 00:16:48,560
whatever

421
00:16:44,880 --> 00:16:48,560
and it was not going very well

422
00:17:02,160 --> 00:17:05,439
uh maybe maybe you're right i i have the

423
00:17:04,959 --> 00:17:07,839
notes

424
00:17:05,439 --> 00:17:09,919
if you want to let me fix that i will

425
00:17:07,839 --> 00:17:13,039
fix doesn't change

426
00:17:09,919 --> 00:17:16,799
the results are the same

427
00:17:13,039 --> 00:17:16,799
doesn't change

428
00:17:17,199 --> 00:17:21,839
uh no the point was the order uh the

429
00:17:20,160 --> 00:17:24,079
point was the order and

430
00:17:21,839 --> 00:17:26,480
actually uh actually was doing the

431
00:17:24,079 --> 00:17:28,799
nested loop exactly because it was not

432
00:17:26,480 --> 00:17:32,160
doing at the end what we should do and

433
00:17:28,799 --> 00:17:35,360
in fact if you change the join order and

434
00:17:32,160 --> 00:17:39,200
you set this exactly the same gen order

435
00:17:35,360 --> 00:17:41,600
well actually it's still uh

436
00:17:39,200 --> 00:17:42,400
well it's a report block nested loop but

437
00:17:41,600 --> 00:17:44,639
actually in the

438
00:17:42,400 --> 00:17:46,080
if you do the plan with the tree you see

439
00:17:44,640 --> 00:17:49,120
the hash join

440
00:17:46,080 --> 00:17:52,240
but it's uh the difference is that

441
00:17:49,120 --> 00:17:52,799
when you're using the other plan the

442
00:17:52,240 --> 00:17:54,799
plan

443
00:17:52,799 --> 00:17:56,639
will bring you to two minutes and 18

444
00:17:54,799 --> 00:17:58,320
seconds exactly the same thing that

445
00:17:56,640 --> 00:18:01,440
mariadb was doing

446
00:17:58,320 --> 00:18:02,559
so it's it was a plan so what is at the

447
00:18:01,440 --> 00:18:04,240
end so guys that

448
00:18:02,559 --> 00:18:05,840
we are talking about one second now

449
00:18:04,240 --> 00:18:06,720
we're talking about one second here one

450
00:18:05,840 --> 00:18:08,559
second there

451
00:18:06,720 --> 00:18:10,559
what's the difference here what's the

452
00:18:08,559 --> 00:18:11,678
makes real the difference where the

453
00:18:10,559 --> 00:18:15,360
problem with

454
00:18:11,679 --> 00:18:18,880
is the optimizer okay

455
00:18:15,360 --> 00:18:19,439
why uh i'm almost there i think in terms

456
00:18:18,880 --> 00:18:22,799
of time

457
00:18:19,440 --> 00:18:29,840
right yeah but i i'm checking

458
00:18:22,799 --> 00:18:29,840
i'm 23 minutes so i should i should stop

459
00:18:31,919 --> 00:18:38,559
i know there will be questions so um

460
00:18:36,400 --> 00:18:40,480
so consideration the problem here is

461
00:18:38,559 --> 00:18:41,200
that yes the two implementations are

462
00:18:40,480 --> 00:18:44,799
very

463
00:18:41,200 --> 00:18:47,360
they perform more or less uh the same

464
00:18:44,799 --> 00:18:49,280
well similar okay they don't they are

465
00:18:47,360 --> 00:18:51,439
absolutely not the same thing

466
00:18:49,280 --> 00:18:52,559
one uses one algorithm another one using

467
00:18:51,440 --> 00:18:55,919
a different algorithm

468
00:18:52,559 --> 00:18:56,480
one can spill to disk we don't in this

469
00:18:55,919 --> 00:18:59,600
test

470
00:18:56,480 --> 00:19:01,919
i didn't use try to did not use

471
00:18:59,600 --> 00:19:02,959
the spell to this having john buffer

472
00:19:01,919 --> 00:19:05,600
quite large but

473
00:19:02,960 --> 00:19:07,600
of course if i have a you know i speak

474
00:19:05,600 --> 00:19:10,799
to this kind of how because sometimes

475
00:19:07,600 --> 00:19:12,159
the the join that was bigger than one

476
00:19:10,799 --> 00:19:15,200
gigabyte right so

477
00:19:12,160 --> 00:19:18,320
it was not fitting in memory right eric

478
00:19:15,200 --> 00:19:19,280
so it was in any case in any case use

479
00:19:18,320 --> 00:19:21,840
that

480
00:19:19,280 --> 00:19:22,840
but i was trying to reducing that the

481
00:19:21,840 --> 00:19:25,840
point here

482
00:19:22,840 --> 00:19:29,120
is that changes are

483
00:19:25,840 --> 00:19:29,678
very minimal what instead makes the huge

484
00:19:29,120 --> 00:19:33,360
difference

485
00:19:29,679 --> 00:19:36,799
is the optimizer and the problem

486
00:19:33,360 --> 00:19:38,959
is that i don't think that we have

487
00:19:36,799 --> 00:19:41,600
the hash implementation talking

488
00:19:38,960 --> 00:19:44,000
correctly with the optimizer

489
00:19:41,600 --> 00:19:45,439
my perception is that whatever we see

490
00:19:44,000 --> 00:19:48,640
here is because

491
00:19:45,440 --> 00:19:50,000
the optimizer needs to have a little bit

492
00:19:48,640 --> 00:19:53,600
more

493
00:19:50,000 --> 00:19:57,280
information in order to be

494
00:19:53,600 --> 00:20:01,280
more precise in choosing the right plan

495
00:19:57,280 --> 00:20:05,120
how you guys can do it i have no idea

496
00:20:01,280 --> 00:20:08,879
but my point here is as it is right now

497
00:20:05,120 --> 00:20:12,320
we may have similar issues in production

498
00:20:08,880 --> 00:20:14,799
and affect the production right uh much

499
00:20:12,320 --> 00:20:15,439
worse than a block nested loop that is

500
00:20:14,799 --> 00:20:18,080
known

501
00:20:15,440 --> 00:20:18,559
it will it's already implemented is

502
00:20:18,080 --> 00:20:21,199
there

503
00:20:18,559 --> 00:20:21,600
it will take what it will take but at

504
00:20:21,200 --> 00:20:23,919
least

505
00:20:21,600 --> 00:20:25,520
is predictable more or less right is

506
00:20:23,919 --> 00:20:28,480
already considered

507
00:20:25,520 --> 00:20:29,918
um i'm not saying that hash join is bad

508
00:20:28,480 --> 00:20:32,400
actually hash john is good

509
00:20:29,919 --> 00:20:34,080
i'm just saying that we need to have a

510
00:20:32,400 --> 00:20:37,440
better way and better mechanism

511
00:20:34,080 --> 00:20:39,199
a better way to provide feedback to the

512
00:20:37,440 --> 00:20:42,000
optimizer

513
00:20:39,200 --> 00:20:43,120
and uh okay the masquerade has joined

514
00:20:42,000 --> 00:20:45,840
with spill to disk

515
00:20:43,120 --> 00:20:46,320
is totally different conversation it

516
00:20:45,840 --> 00:20:48,639
needs to

517
00:20:46,320 --> 00:20:49,520
have comparison you know pairs with

518
00:20:48,640 --> 00:20:53,120
pairs not

519
00:20:49,520 --> 00:20:55,679
not with something different and uh

520
00:20:53,120 --> 00:20:56,479
what else uh yeah instrumentation

521
00:20:55,679 --> 00:20:58,159
mariadb

522
00:20:56,480 --> 00:21:00,080
please give us a little bit better

523
00:20:58,159 --> 00:21:02,640
instrumentation to analyze the

524
00:21:00,080 --> 00:21:03,199
the hash join itself because uh the only

525
00:21:02,640 --> 00:21:06,799
way

526
00:21:03,200 --> 00:21:07,840
we have right now is to do the json x

527
00:21:06,799 --> 00:21:10,799
you know explain

528
00:21:07,840 --> 00:21:12,080
json which is not enough we don't have

529
00:21:10,799 --> 00:21:17,840
all the numbers that

530
00:21:12,080 --> 00:21:17,840
we may need but

531
00:21:21,919 --> 00:21:25,280
yeah i don't care if it's tree or if

532
00:21:24,000 --> 00:21:29,280
it's js and just give

533
00:21:25,280 --> 00:21:32,158
give us more more detail yeah

534
00:21:29,280 --> 00:21:32,879
and uh yeah and the other thing is in

535
00:21:32,159 --> 00:21:35,280
order to

536
00:21:32,880 --> 00:21:36,960
given this feature let's say it's still

537
00:21:35,280 --> 00:21:39,440
new

538
00:21:36,960 --> 00:21:41,280
i would say please give us the option to

539
00:21:39,440 --> 00:21:43,919
play around it

540
00:21:41,280 --> 00:21:45,120
enabling the disabling enabling the

541
00:21:43,919 --> 00:21:47,919
other disabled and the other

542
00:21:45,120 --> 00:21:49,039
for the back purpose because if you just

543
00:21:47,919 --> 00:21:52,080
force

544
00:21:49,039 --> 00:21:53,200
all of us to go in one direction that

545
00:21:52,080 --> 00:21:55,199
will be uh

546
00:21:53,200 --> 00:21:56,320
wrong things to do i mean we need the

547
00:21:55,200 --> 00:21:59,600
option to say

548
00:21:56,320 --> 00:22:03,360
okay use hash join use block nested loop

549
00:21:59,600 --> 00:22:05,840
use this use that on on you know

550
00:22:03,360 --> 00:22:06,559
on on the session of course but really

551
00:22:05,840 --> 00:22:08,480
to be

552
00:22:06,559 --> 00:22:10,158
sure that that is what is going to

553
00:22:08,480 --> 00:22:13,200
happen right

554
00:22:10,159 --> 00:22:15,760
um that's it thank you

555
00:22:13,200 --> 00:22:15,760
question

556
00:22:16,960 --> 00:22:23,200
do we have time for questions yes and

557
00:22:20,159 --> 00:22:27,840
yeah i am not sure that i can answer by

558
00:22:23,200 --> 00:22:27,840
the way

559
00:22:36,240 --> 00:22:39,280
okay the question was thank you the

560
00:22:38,799 --> 00:22:41,918
question

561
00:22:39,280 --> 00:22:43,039
can you repeat the question i know i

562
00:22:41,919 --> 00:22:46,960
know i know

563
00:22:43,039 --> 00:22:50,240
um the question was um what i meant

564
00:22:46,960 --> 00:22:53,840
when i was saying buffer fool i

565
00:22:50,240 --> 00:22:56,960
i meant i was saying buffer field

566
00:22:53,840 --> 00:22:58,799
by the query meaning that the query had

567
00:22:56,960 --> 00:23:01,440
already executed

568
00:22:58,799 --> 00:23:02,240
in order to be already read all the data

569
00:23:01,440 --> 00:23:05,360
from the disk

570
00:23:02,240 --> 00:23:05,919
and put the data as page in the buffer

571
00:23:05,360 --> 00:23:08,559
pool

572
00:23:05,919 --> 00:23:09,039
so the next run it doesn't have to go on

573
00:23:08,559 --> 00:23:13,200
disk

574
00:23:09,039 --> 00:23:13,200
but just read the data directly from

575
00:23:14,080 --> 00:23:18,399
one of them didn't

576
00:23:19,120 --> 00:23:23,199
yeah no the the one that was going

577
00:23:21,520 --> 00:23:24,080
slower because the planet was changed

578
00:23:23,200 --> 00:23:26,799
and was uh

579
00:23:24,080 --> 00:23:29,678
ineffectively doing that right right

580
00:23:26,799 --> 00:23:29,679
don't kick yourself

581
00:23:47,200 --> 00:23:51,840
but there was no concurrent joints just

582
00:23:58,400 --> 00:24:03,840
wait a second if i put a joint buffer

583
00:24:01,440 --> 00:24:04,880
to one gig i'm giving mariadb some

584
00:24:03,840 --> 00:24:06,799
benefit

585
00:24:04,880 --> 00:24:08,960
because i'm giving you more space

586
00:24:06,799 --> 00:24:11,120
because they can spill on disk while

587
00:24:08,960 --> 00:24:13,279
with uh with my adb if i understand

588
00:24:11,120 --> 00:24:14,879
correctly the implementation and please

589
00:24:13,279 --> 00:24:17,360
correct me if i'm wrong

590
00:24:14,880 --> 00:24:19,360
if i have a smaller join buffer and the

591
00:24:17,360 --> 00:24:21,600
other settings i'd never remember that

592
00:24:19,360 --> 00:24:23,360
that is related to the john buffett cell

593
00:24:21,600 --> 00:24:26,080
also the

594
00:24:23,360 --> 00:24:26,399
uh well yeah there is another one that

595
00:24:26,080 --> 00:24:29,279
is

596
00:24:26,400 --> 00:24:31,600
correlated so i give you display i give

597
00:24:29,279 --> 00:24:34,559
my adb the space to work

598
00:24:31,600 --> 00:24:36,879
as much as close as the in memory as

599
00:24:34,559 --> 00:24:40,799
much as close as the hash joined

600
00:24:36,880 --> 00:24:44,320
yes yeah no that was on purpose to give

601
00:24:40,799 --> 00:24:46,080
oh you know to to try to compare i mean

602
00:24:44,320 --> 00:24:49,200
april with apple because the

603
00:24:46,080 --> 00:24:49,199
implementation is different

604
00:24:56,320 --> 00:25:00,639
no okay that one was a specific case but

605
00:24:59,279 --> 00:25:02,960
on the other side i have

606
00:25:00,640 --> 00:25:04,159
if you want i can share with you my text

607
00:25:02,960 --> 00:25:07,760
file with all the notes

608
00:25:04,159 --> 00:25:15,840
and you will see okay any other question

609
00:25:07,760 --> 00:25:15,840
no okay

610
00:25:29,840 --> 00:25:34,320
because i think there's something wrong

611
00:25:31,279 --> 00:25:38,480
with the statistics i think there's less

612
00:25:34,320 --> 00:25:38,480
memory than it actually is fix it

613
00:25:39,039 --> 00:25:43,840
do it fix it

614
00:25:46,799 --> 00:25:57,840
yeah okay thank you very much guys

615
00:26:00,799 --> 00:26:02,879
you

