1
00:00:14,920 --> 00:00:20,080
okay

2
00:00:16,720 --> 00:00:23,198
hello i will i will talk

3
00:00:20,080 --> 00:00:23,839
again about the octo but not really for

4
00:00:23,199 --> 00:00:26,960
a product

5
00:00:23,840 --> 00:00:28,640
for some specific tools we can use

6
00:00:26,960 --> 00:00:31,840
additionally

7
00:00:28,640 --> 00:00:31,840
on an image

8
00:00:31,920 --> 00:00:38,079
i am a cto of smiley cs

9
00:00:35,280 --> 00:00:40,559
smile is a french company in paris and

10
00:00:38,079 --> 00:00:44,239
several towns in france and some

11
00:00:40,559 --> 00:00:45,280
place in brussels i am teacher and

12
00:00:44,239 --> 00:00:48,800
long-term

13
00:00:45,280 --> 00:00:51,199
user of open source software

14
00:00:48,800 --> 00:00:53,360
i'm teacher writer and by the english

15
00:00:51,199 --> 00:00:57,519
speaker

16
00:00:53,360 --> 00:00:57,519
this is my favorite competence

17
00:00:57,600 --> 00:01:03,120
um we i will talk about uh using build

18
00:01:00,960 --> 00:01:06,159
system for our industrial

19
00:01:03,120 --> 00:01:08,640
uh there are there was several yocto uh

20
00:01:06,159 --> 00:01:12,640
presentation today so i will be very

21
00:01:08,640 --> 00:01:15,119
quick about yokto about the introduction

22
00:01:12,640 --> 00:01:16,960
i will try to do a demo if it will be

23
00:01:15,119 --> 00:01:19,520
the third demo today and

24
00:01:16,960 --> 00:01:20,000
maybe the third demo will fail or i

25
00:01:19,520 --> 00:01:23,439
don't know

26
00:01:20,000 --> 00:01:26,560
because the two previously move fade so

27
00:01:23,439 --> 00:01:28,399
not for me but more the robot was broken

28
00:01:26,560 --> 00:01:30,880
maybe the pie will work

29
00:01:28,400 --> 00:01:30,880
i don't know

30
00:01:31,439 --> 00:01:36,240
we will create a recipe not for creating

31
00:01:34,240 --> 00:01:38,320
a recipe but to use

32
00:01:36,240 --> 00:01:40,560
in order to use some tools on the recipe

33
00:01:38,320 --> 00:01:44,158
to modify the recipe to

34
00:01:40,560 --> 00:01:46,240
update the recipe we will try to build a

35
00:01:44,159 --> 00:01:49,280
kernel module with the octo

36
00:01:46,240 --> 00:01:52,880
inside the octo or outside the octo

37
00:01:49,280 --> 00:01:56,799
and the last part maybe

38
00:01:52,880 --> 00:01:59,280
the most interested part is about ci

39
00:01:56,799 --> 00:02:01,360
for example testing packages or testing

40
00:01:59,280 --> 00:02:03,600
the functionality on an image

41
00:02:01,360 --> 00:02:05,119
you can write some scripts to test

42
00:02:03,600 --> 00:02:08,239
functionalities

43
00:02:05,119 --> 00:02:10,000
and i will do a lot of demos because

44
00:02:08,239 --> 00:02:11,920
when you do demos you don't speak a lot

45
00:02:10,000 --> 00:02:16,080
so it's okay

46
00:02:11,920 --> 00:02:19,599
for everybody well when you have

47
00:02:16,080 --> 00:02:23,760
an industrial project you have some

48
00:02:19,599 --> 00:02:26,238
necessary tasks but costly tax such as

49
00:02:23,760 --> 00:02:27,760
installing the bsp from yorktown for

50
00:02:26,239 --> 00:02:31,920
example or bill root or

51
00:02:27,760 --> 00:02:35,359
ptx list which is the next conference

52
00:02:31,920 --> 00:02:38,399
you have to create the sdk

53
00:02:35,360 --> 00:02:40,400
for buildings apps it

54
00:02:38,400 --> 00:02:42,480
should be done with the same with the

55
00:02:40,400 --> 00:02:44,319
same tool

56
00:02:42,480 --> 00:02:47,040
you have to develop your your

57
00:02:44,319 --> 00:02:47,040
applications

58
00:02:47,760 --> 00:02:54,720
which is your job most of time

59
00:02:51,760 --> 00:02:55,760
nobody wants to sell and to buy a linux

60
00:02:54,720 --> 00:02:58,080
system it's a

61
00:02:55,760 --> 00:03:00,239
it's not interesting forever for at all

62
00:02:58,080 --> 00:03:01,920
for for the people

63
00:03:00,239 --> 00:03:03,680
so they want the system to work and the

64
00:03:01,920 --> 00:03:06,000
application to work

65
00:03:03,680 --> 00:03:07,200
and then you you have to integrate and

66
00:03:06,000 --> 00:03:12,400
maintain the system

67
00:03:07,200 --> 00:03:12,399
in the long term um

68
00:03:13,599 --> 00:03:18,480
it's strange because it doesn't

69
00:03:16,800 --> 00:03:20,080
it's not the last version of the slides

70
00:03:18,480 --> 00:03:23,840
i think this is but

71
00:03:20,080 --> 00:03:26,400
here so build system such as yokto

72
00:03:23,840 --> 00:03:29,040
is not uh it's not a development tool

73
00:03:26,400 --> 00:03:32,080
but it's a tool to to generate the sdk

74
00:03:29,040 --> 00:03:34,159
to to create the bsp and to create

75
00:03:32,080 --> 00:03:36,000
tools in order to manage the system and

76
00:03:34,159 --> 00:03:40,000
the image and the assist

77
00:03:36,000 --> 00:03:42,799
install system and

78
00:03:40,000 --> 00:03:43,840
i will show some some tool to to debug

79
00:03:42,799 --> 00:03:47,840
not debug but

80
00:03:43,840 --> 00:03:49,760
develop inside in in inside the octo

81
00:03:47,840 --> 00:03:51,760
but most of the time the octo is not a

82
00:03:49,760 --> 00:03:52,720
tool for development it's a tool for

83
00:03:51,760 --> 00:03:54,798
integration

84
00:03:52,720 --> 00:03:56,640
and development is done outside youtube

85
00:03:54,799 --> 00:03:57,760
but it's still possible for example to

86
00:03:56,640 --> 00:04:00,879
compile

87
00:03:57,760 --> 00:04:04,720
kernel modules or and to

88
00:04:00,879 --> 00:04:07,280
test to remote debug applications inside

89
00:04:04,720 --> 00:04:07,280
yoktube

90
00:04:07,360 --> 00:04:10,640
and the developing application needs

91
00:04:09,439 --> 00:04:13,680
some

92
00:04:10,640 --> 00:04:16,079
additional steps such as ci

93
00:04:13,680 --> 00:04:19,120
to test packages and to test an image

94
00:04:16,079 --> 00:04:19,120
for complex systems

95
00:04:19,279 --> 00:04:22,880
so some the most tools are the

96
00:04:21,759 --> 00:04:26,240
octoberroot

97
00:04:22,880 --> 00:04:27,600
openwrt pptxdx et cetera but yoktu is

98
00:04:26,240 --> 00:04:29,600
the most famous today we

99
00:04:27,600 --> 00:04:32,160
all the conference uh they speak they

100
00:04:29,600 --> 00:04:34,160
spoke about the octo and the next one

101
00:04:32,160 --> 00:04:35,520
except the next one we will speak about

102
00:04:34,160 --> 00:04:40,160
uh this better

103
00:04:35,520 --> 00:04:44,880
there are lots of yocto users around

104
00:04:40,160 --> 00:04:49,600
so uh yoktor is based on open embedded

105
00:04:44,880 --> 00:04:53,680
it's a prefix for um

106
00:04:49,600 --> 00:04:53,680
system international system of majors

107
00:04:54,080 --> 00:04:57,440
and the york two main concepts are other

108
00:04:56,479 --> 00:05:00,240
metadata

109
00:04:57,440 --> 00:05:02,080
the recipes the extended recipes so we

110
00:05:00,240 --> 00:05:03,039
will create like standard recipes with

111
00:05:02,080 --> 00:05:05,599
tools during

112
00:05:03,039 --> 00:05:06,240
the conference as configurations the

113
00:05:05,600 --> 00:05:08,840
classes

114
00:05:06,240 --> 00:05:10,479
include and the layer which contains the

115
00:05:08,840 --> 00:05:12,560
metadata and for

116
00:05:10,479 --> 00:05:13,840
building your recipe you have to to do

117
00:05:12,560 --> 00:05:16,080
the bake

118
00:05:13,840 --> 00:05:17,840
with bake my recipe and we create a

119
00:05:16,080 --> 00:05:19,919
package you can install

120
00:05:17,840 --> 00:05:22,000
so you can integrate the package

121
00:05:19,919 --> 00:05:24,880
directly in in the image

122
00:05:22,000 --> 00:05:26,240
or you can install the package using a

123
00:05:24,880 --> 00:05:29,919
package system such as

124
00:05:26,240 --> 00:05:33,039
ipk rpm or dev

125
00:05:29,919 --> 00:05:33,680
my system as it is a small small system

126
00:05:33,039 --> 00:05:37,440
i use

127
00:05:33,680 --> 00:05:39,680
apk okay this is the the principle of

128
00:05:37,440 --> 00:05:44,320
yokto with the layers

129
00:05:39,680 --> 00:05:46,080
and you have the in yellow

130
00:05:44,320 --> 00:05:48,240
the the octal layers and then you have

131
00:05:46,080 --> 00:05:53,520
to add the bsp

132
00:05:48,240 --> 00:05:55,199
example for the raspberry pi or etc

133
00:05:53,520 --> 00:05:57,840
so if you run for example if you want to

134
00:05:55,199 --> 00:06:00,639
build a yocto image for raspberry pi you

135
00:05:57,840 --> 00:06:04,239
have to download

136
00:06:00,639 --> 00:06:06,479
yokto actually the pokey sources

137
00:06:04,240 --> 00:06:07,759
you have to get the raspberry pi

138
00:06:06,479 --> 00:06:10,960
hardware layer

139
00:06:07,759 --> 00:06:15,440
with the same branch

140
00:06:10,960 --> 00:06:17,599
you have to create a build environment

141
00:06:15,440 --> 00:06:19,600
you have to add the layers necessary

142
00:06:17,600 --> 00:06:22,240
layers for the first test is

143
00:06:19,600 --> 00:06:22,639
the only necessary additional layers is

144
00:06:22,240 --> 00:06:25,600
a

145
00:06:22,639 --> 00:06:26,880
little raspberry pi uh layer and you

146
00:06:25,600 --> 00:06:30,479
define the machine

147
00:06:26,880 --> 00:06:33,440
and you create a very simple image

148
00:06:30,479 --> 00:06:37,440
to to test the board okay and you put it

149
00:06:33,440 --> 00:06:37,440
on an sd card in case of a raspberry pi

150
00:06:38,080 --> 00:06:43,120
this is a that's an example of a very

151
00:06:40,319 --> 00:06:46,000
simple recipe

152
00:06:43,120 --> 00:06:46,560
a very simple program based on cmake we

153
00:06:46,000 --> 00:06:50,639
can

154
00:06:46,560 --> 00:06:54,800
build with a with a distribution

155
00:06:50,639 --> 00:06:54,800
so i will show the bill for example

156
00:06:58,560 --> 00:07:02,400
i remove the bill to show there is no no

157
00:07:00,560 --> 00:07:05,599
problem but i will

158
00:07:02,400 --> 00:07:10,638
build it again okay

159
00:07:05,599 --> 00:07:10,639
so if you if you build the recipe

160
00:07:14,840 --> 00:07:17,840
okay

161
00:07:21,919 --> 00:07:25,440
you can you can see the package

162
00:07:28,840 --> 00:07:31,840
created

163
00:07:33,919 --> 00:07:39,440
okay with a sinkhole binary which is on

164
00:07:37,039 --> 00:07:39,440
the board

165
00:07:39,599 --> 00:07:42,960
i was afraid about the demo so i put it

166
00:07:41,599 --> 00:07:45,840
on the board before

167
00:07:42,960 --> 00:07:45,840
okay

168
00:07:48,560 --> 00:07:53,919
well in the octo there is a very

169
00:07:52,879 --> 00:07:56,720
interesting uh

170
00:07:53,919 --> 00:07:57,440
feature which is the bb open with the bb

171
00:07:56,720 --> 00:08:00,720
open it's an

172
00:07:57,440 --> 00:08:03,840
it's a quite of extension of a recipe

173
00:08:00,720 --> 00:08:07,440
uh so you start from a bb

174
00:08:03,840 --> 00:08:10,479
recipe and you add the bb open with data

175
00:08:07,440 --> 00:08:13,039
for example patch or etc or

176
00:08:10,479 --> 00:08:15,039
configuration for busy box or the linux

177
00:08:13,039 --> 00:08:18,080
kernel or anything you want

178
00:08:15,039 --> 00:08:21,680
and you can generate a different package

179
00:08:18,080 --> 00:08:26,240
with with different data

180
00:08:21,680 --> 00:08:28,080
based on the same initial recipe so

181
00:08:26,240 --> 00:08:29,599
the most famous example is a splash

182
00:08:28,080 --> 00:08:32,718
screen so

183
00:08:29,599 --> 00:08:35,838
standard splash screen provided by uh

184
00:08:32,719 --> 00:08:39,279
by uh yokto you

185
00:08:35,839 --> 00:08:42,240
update the the logo

186
00:08:39,279 --> 00:08:44,399
and you get a new logo for example with

187
00:08:42,240 --> 00:08:45,760
the octo logo or the raspberry pi you go

188
00:08:44,399 --> 00:08:47,440
based on the

189
00:08:45,760 --> 00:08:48,880
if you start with the with the open

190
00:08:47,440 --> 00:08:52,320
embedded logo

191
00:08:48,880 --> 00:08:55,519
okay first

192
00:08:52,320 --> 00:08:55,920
the first uh very simple tool is that

193
00:08:55,519 --> 00:08:59,360
shell

194
00:08:55,920 --> 00:09:00,000
dev shell is just a shell you can start

195
00:08:59,360 --> 00:09:03,600
from your

196
00:09:00,000 --> 00:09:06,160
to modify a source code so for example

197
00:09:03,600 --> 00:09:08,000
it it opens a new terminal so we will

198
00:09:06,160 --> 00:09:11,360
start with a

199
00:09:08,000 --> 00:09:15,360
with the recipe and so we type bit back

200
00:09:11,360 --> 00:09:15,360
mice minus c the shell

201
00:09:15,440 --> 00:09:19,440
my epoxy make for example

202
00:09:21,040 --> 00:09:23,839
okay

203
00:09:26,080 --> 00:09:34,839
you get a new terminal very small

204
00:09:29,680 --> 00:09:37,839
and you can you can edit the code for

205
00:09:34,839 --> 00:09:37,839
example

206
00:09:42,640 --> 00:09:48,880
okay and you have no

207
00:09:46,000 --> 00:09:51,519
just uh you you don't use a beatback

208
00:09:48,880 --> 00:09:54,160
tools you just use a standard tools

209
00:09:51,519 --> 00:09:54,160
here you can

210
00:09:55,760 --> 00:09:58,000
okay

211
00:10:02,160 --> 00:10:09,920
okay and you can for example you can

212
00:10:05,279 --> 00:10:09,920
copy the the

213
00:10:10,079 --> 00:10:15,839
the binary to the to the board in order

214
00:10:12,480 --> 00:10:15,839
to do a small test for example

215
00:10:16,839 --> 00:10:19,839
speed

216
00:10:20,640 --> 00:10:22,880
okay

217
00:10:23,920 --> 00:10:27,680
oh yes no

218
00:10:27,920 --> 00:10:31,040
yes stop

219
00:10:31,680 --> 00:10:34,719
problems are starting

220
00:10:35,680 --> 00:10:43,279
no it's not four it's not four it's

221
00:10:38,720 --> 00:10:43,279
three yeah yes

222
00:10:44,839 --> 00:10:49,839
yes

223
00:10:46,560 --> 00:10:50,479
so there's a new new example modified by

224
00:10:49,839 --> 00:10:53,680
the

225
00:10:50,480 --> 00:10:54,560
simple but it's not that very

226
00:10:53,680 --> 00:10:58,839
interesting but

227
00:10:54,560 --> 00:11:01,680
it's a possibility to do a small test

228
00:10:58,839 --> 00:11:04,399
okay

229
00:11:01,680 --> 00:11:06,479
the next tool which is much more

230
00:11:04,399 --> 00:11:10,240
interesting is a dev tool

231
00:11:06,480 --> 00:11:12,880
so devtool is a way to modify recipe

232
00:11:10,240 --> 00:11:13,760
not modify the the sources inside or

233
00:11:12,880 --> 00:11:17,360
inside your

234
00:11:13,760 --> 00:11:17,839
octo so you you start uh you start that

235
00:11:17,360 --> 00:11:19,839
tool

236
00:11:17,839 --> 00:11:23,760
on an existing recipe for example you

237
00:11:19,839 --> 00:11:27,040
can create this recipe with devtool but

238
00:11:23,760 --> 00:11:29,439
and it will create in another layer

239
00:11:27,040 --> 00:11:31,439
it will create a bb pen happen to for

240
00:11:29,440 --> 00:11:33,920
example to apply your patch

241
00:11:31,440 --> 00:11:36,160
to the initial recipe but you can do

242
00:11:33,920 --> 00:11:39,120
that by hand for example if you

243
00:11:36,160 --> 00:11:39,519
create a new layer a new edit etc but if

244
00:11:39,120 --> 00:11:42,399
you

245
00:11:39,519 --> 00:11:43,760
want to do a sim in a simple way you can

246
00:11:42,399 --> 00:11:45,519
use the tool for that

247
00:11:43,760 --> 00:11:47,120
there are lots of functionalities in

248
00:11:45,519 --> 00:11:50,000
devtool but

249
00:11:47,120 --> 00:11:51,920
this is a very simple example i can do

250
00:11:50,000 --> 00:11:56,959
in some units here

251
00:11:51,920 --> 00:12:00,800
so for example um

252
00:11:56,959 --> 00:12:04,000
instead of the shell i use a dev tool

253
00:12:00,800 --> 00:12:11,839
not with buildback devtool

254
00:12:04,000 --> 00:12:11,839
modify okay

255
00:12:11,920 --> 00:12:14,240
okay

256
00:12:16,079 --> 00:12:20,719
well so when you

257
00:12:22,399 --> 00:12:26,399
it adds a local directory which is

258
00:12:25,360 --> 00:12:28,240
workspace

259
00:12:26,399 --> 00:12:30,959
which is called workspace where the

260
00:12:28,240 --> 00:12:34,720
devtool copies the sources of the recipe

261
00:12:30,959 --> 00:12:36,719
and you can add and it's automatically

262
00:12:34,720 --> 00:12:39,440
add

263
00:12:36,720 --> 00:12:40,079
the new layer to the bb layered of

264
00:12:39,440 --> 00:12:43,519
course

265
00:12:40,079 --> 00:12:47,199
to the list of the layer okay so you can

266
00:12:43,519 --> 00:12:49,279
you can go to the to the workspace

267
00:12:47,200 --> 00:12:50,240
and the main difference is that the

268
00:12:49,279 --> 00:12:55,279
sources is

269
00:12:50,240 --> 00:12:55,279
managed by git so you change the source

270
00:12:57,760 --> 00:13:07,839
devtool instead of the shell

271
00:13:00,959 --> 00:13:07,839
you call me just the motif

272
00:13:08,000 --> 00:13:13,120
dev tool demo okay

273
00:13:13,760 --> 00:13:19,680
and you you just have to to create a new

274
00:13:17,360 --> 00:13:24,639
layer for example

275
00:13:19,680 --> 00:13:24,638
create player metaphors them menu

276
00:13:25,040 --> 00:13:29,439
it exists so i will remove because

277
00:13:27,830 --> 00:13:33,680
[Music]

278
00:13:29,440 --> 00:13:38,320
i want to be a honest

279
00:13:33,680 --> 00:13:44,239
okay i create a new layer

280
00:13:38,320 --> 00:13:46,959
i add a layer but it's an empty layer

281
00:13:44,240 --> 00:13:46,959
okay three

282
00:13:49,360 --> 00:13:52,959
there is nothing except some small

283
00:13:51,360 --> 00:13:57,440
example which is not

284
00:13:52,959 --> 00:14:02,160
useful for us and then you can

285
00:13:57,440 --> 00:14:05,600
devtool finish

286
00:14:02,160 --> 00:14:10,319
uh my pack c make

287
00:14:05,600 --> 00:14:14,079
and you just give the the parts of the

288
00:14:10,320 --> 00:14:17,519
of the new layer okay

289
00:14:14,079 --> 00:14:17,839
so it's a bit of it creates everything

290
00:14:17,519 --> 00:14:21,440
to

291
00:14:17,839 --> 00:14:24,880
to to create a bb appoint for the recipe

292
00:14:21,440 --> 00:14:26,320
okay so as he said you you have to to

293
00:14:24,880 --> 00:14:31,839
remove the

294
00:14:26,320 --> 00:14:31,839
the workspace which is a

295
00:14:32,000 --> 00:14:35,199
not not this one

296
00:14:37,600 --> 00:14:42,000
it was the wrong line you remove the

297
00:14:41,120 --> 00:14:45,360
workspace

298
00:14:42,000 --> 00:14:50,000
because it's not useful anymore

299
00:14:45,360 --> 00:14:50,000
and now you can build the recipe again

300
00:14:50,800 --> 00:14:58,000
with beatback and you should notice

301
00:14:54,079 --> 00:15:01,040
if it works that the version of the

302
00:14:58,000 --> 00:15:04,639
the release will be

303
00:15:01,040 --> 00:15:08,719
will not be upgraded okay but it's not

304
00:15:04,639 --> 00:15:11,440
it's not a problem uh yes because uh

305
00:15:08,720 --> 00:15:11,440
yeah okay

306
00:15:12,720 --> 00:15:15,680
i forgot something

307
00:15:20,000 --> 00:15:26,320
so you have the here you are the result

308
00:15:23,680 --> 00:15:29,920
of the

309
00:15:26,320 --> 00:15:34,079
other modification and the best way

310
00:15:29,920 --> 00:15:34,079
is the following is to create

311
00:15:35,120 --> 00:15:40,560
to change the version of the of the

312
00:15:38,839 --> 00:15:43,600
recipe

313
00:15:40,560 --> 00:15:48,079
in the to force

314
00:15:43,600 --> 00:15:49,519
it to to compile again so with the

315
00:15:48,079 --> 00:15:51,120
package system you can update the

316
00:15:49,519 --> 00:15:55,839
package

317
00:15:51,120 --> 00:15:55,839
much more easily okay

318
00:15:57,519 --> 00:16:03,040
so you have a new package with the r1

319
00:15:59,440 --> 00:16:03,040
version instead of r0

320
00:16:06,839 --> 00:16:09,839
okay

321
00:16:12,880 --> 00:16:17,839
uh with the with the octo you can create

322
00:16:15,199 --> 00:16:18,800
it's a very interesting feature of yokto

323
00:16:17,839 --> 00:16:22,240
you can create a

324
00:16:18,800 --> 00:16:25,199
sdk which is called extend extensible

325
00:16:22,240 --> 00:16:26,720
sdk you can install very easily on

326
00:16:25,199 --> 00:16:29,359
another

327
00:16:26,720 --> 00:16:31,839
pc linux system with quite the same

328
00:16:29,360 --> 00:16:35,120
distribution

329
00:16:31,839 --> 00:16:37,600
it creates a shell script which includes

330
00:16:35,120 --> 00:16:38,480
the sdk and you just have to run the

331
00:16:37,600 --> 00:16:42,240
script

332
00:16:38,480 --> 00:16:45,600
to uh to install the the cross compiler

333
00:16:42,240 --> 00:16:48,480
and the sdk is mostly the cost compiler

334
00:16:45,600 --> 00:16:49,360
across debugger you have an eclipse

335
00:16:48,480 --> 00:16:52,720
plugin

336
00:16:49,360 --> 00:16:55,839
your qm emulator if if necessary

337
00:16:52,720 --> 00:16:57,040
and you don't need to to know your tool

338
00:16:55,839 --> 00:16:59,040
to use it

339
00:16:57,040 --> 00:17:00,639
and it's very interesting because in

340
00:16:59,040 --> 00:17:04,079
most of

341
00:17:00,639 --> 00:17:06,000
companies you have a team integrating

342
00:17:04,079 --> 00:17:08,639
and testing the packages

343
00:17:06,000 --> 00:17:10,480
with york2 and system knowledge and most

344
00:17:08,640 --> 00:17:11,520
of people they don't know anything about

345
00:17:10,480 --> 00:17:14,559
yocto they really

346
00:17:11,520 --> 00:17:18,230
they build up their own pack system

347
00:17:14,559 --> 00:17:19,439
they build their own programs with their

348
00:17:18,230 --> 00:17:21,439
[Music]

349
00:17:19,439 --> 00:17:22,559
knowledge and they give they give the

350
00:17:21,439 --> 00:17:24,400
sources one stat

351
00:17:22,559 --> 00:17:26,079
tested do they give the sources to the

352
00:17:24,400 --> 00:17:29,919
octo team to integrate

353
00:17:26,079 --> 00:17:32,559
the new version as a package

354
00:17:29,919 --> 00:17:33,679
okay so there is a specific

355
00:17:32,559 --> 00:17:36,720
documentation in the

356
00:17:33,679 --> 00:17:40,799
octo documentation about the

357
00:17:36,720 --> 00:17:42,480
sdk uh the simple way to to create the

358
00:17:40,799 --> 00:17:44,879
sdk is to use a

359
00:17:42,480 --> 00:17:46,400
bitpack metal chain which creates a

360
00:17:44,880 --> 00:17:49,120
basic sdk

361
00:17:46,400 --> 00:17:50,799
and you have to just have to execute the

362
00:17:49,120 --> 00:17:54,080
search script to install the

363
00:17:50,799 --> 00:17:57,440
sdk as follows with

364
00:17:54,080 --> 00:17:57,678
sourcing the script which is provided by

365
00:17:57,440 --> 00:18:00,960
the

366
00:17:57,679 --> 00:18:03,120
by octo for example

367
00:18:00,960 --> 00:18:04,400
i can do i'm going to do it it's already

368
00:18:03,120 --> 00:18:07,760
installed so i can

369
00:18:04,400 --> 00:18:11,919
but i can do it so you

370
00:18:07,760 --> 00:18:15,280
you go to a you source the

371
00:18:11,919 --> 00:18:18,480
opt for key

372
00:18:15,280 --> 00:18:21,600
3d environment okay and so the

373
00:18:18,480 --> 00:18:23,840
rcc is modified so you

374
00:18:21,600 --> 00:18:23,840
just

375
00:18:26,840 --> 00:18:29,840
okay

376
00:18:29,919 --> 00:18:33,280
it's not a dot keyo

377
00:18:34,080 --> 00:18:42,399
okay okay

378
00:18:39,120 --> 00:18:44,719
but most of time you may have to

379
00:18:42,400 --> 00:18:47,760
integrate some specific libraries

380
00:18:44,720 --> 00:18:49,039
or scripts or anything you want for

381
00:18:47,760 --> 00:18:51,520
example when you use a

382
00:18:49,039 --> 00:18:52,879
qt qt you have a queue make you have

383
00:18:51,520 --> 00:18:54,639
some script

384
00:18:52,880 --> 00:18:56,799
when if you use the xenomize the

385
00:18:54,640 --> 00:19:00,240
extension the real-time

386
00:18:56,799 --> 00:19:02,080
extension for linux you have some tools

387
00:19:00,240 --> 00:19:04,320
and specific libraries so you want to

388
00:19:02,080 --> 00:19:06,799
integrate the libraries in the

389
00:19:04,320 --> 00:19:07,760
in the sdk and for that to create an

390
00:19:06,799 --> 00:19:09,760
image

391
00:19:07,760 --> 00:19:11,200
for example an image will intake

392
00:19:09,760 --> 00:19:15,120
including xenomic

393
00:19:11,200 --> 00:19:18,400
and you use the populate sdk

394
00:19:15,120 --> 00:19:19,840
function to to get the sdk which

395
00:19:18,400 --> 00:19:23,840
includes the same libraries

396
00:19:19,840 --> 00:19:24,559
as the image and you you can also

397
00:19:23,840 --> 00:19:27,120
include the

398
00:19:24,559 --> 00:19:28,399
kernel sources if you want to develop

399
00:19:27,120 --> 00:19:30,799
kernel modules

400
00:19:28,400 --> 00:19:33,679
with the sdk so you can do it everything

401
00:19:30,799 --> 00:19:33,679
outside your tool

402
00:19:34,000 --> 00:19:37,600
okay so for example if you want to

403
00:19:35,679 --> 00:19:40,960
compile a module you you do

404
00:19:37,600 --> 00:19:43,360
make a kernel c equal etcetera so

405
00:19:40,960 --> 00:19:44,320
um and you give the the path to the

406
00:19:43,360 --> 00:19:49,039
kernel sources

407
00:19:44,320 --> 00:19:49,039
you use by by the board okay

408
00:19:49,200 --> 00:19:53,840
for example with a simple module

409
00:19:55,919 --> 00:20:02,170
it's a kernel it's a still

410
00:19:59,360 --> 00:20:03,360
hello mac kernel

411
00:20:02,170 --> 00:20:07,840
[Music]

412
00:20:03,360 --> 00:20:07,840
src equal slash

413
00:20:13,240 --> 00:20:20,720
usrc kernel

414
00:20:16,080 --> 00:20:24,320
okay and you copy

415
00:20:20,720 --> 00:20:24,320
you copy the module

416
00:20:25,120 --> 00:20:28,399
to the bob and you load the module for

417
00:20:27,120 --> 00:20:31,678
example

418
00:20:28,400 --> 00:20:37,039
it's mod hello dot here

419
00:20:31,679 --> 00:20:37,039
okay so you have the module in the board

420
00:20:37,600 --> 00:20:41,918
there is a functionality to to do the

421
00:20:39,760 --> 00:20:44,320
same with inside doctor

422
00:20:41,919 --> 00:20:45,039
and there is a directory which is used

423
00:20:44,320 --> 00:20:47,840
for the

424
00:20:45,039 --> 00:20:49,919
kernel recipes if you integrate the

425
00:20:47,840 --> 00:20:52,320
module in the kernel in a recipe

426
00:20:49,919 --> 00:20:54,559
uh in the in but it is in the york2

427
00:20:52,320 --> 00:20:55,039
directory not outside the octo directory

428
00:20:54,559 --> 00:20:58,158
you can

429
00:20:55,039 --> 00:20:59,760
use it from from yocto but it's not i

430
00:20:58,159 --> 00:21:03,039
think it's not a good way but

431
00:20:59,760 --> 00:21:07,039
you can use it if you want it's a

432
00:21:03,039 --> 00:21:09,919
tmp workshop etc build artifacts

433
00:21:07,039 --> 00:21:12,480
exactly the kernel source necessary to

434
00:21:09,919 --> 00:21:17,200
combine a module

435
00:21:12,480 --> 00:21:21,120
okay so uh the last part is to

436
00:21:17,200 --> 00:21:24,159
try to use some ci functionalities

437
00:21:21,120 --> 00:21:26,080
um so when you you add

438
00:21:24,159 --> 00:21:27,280
functions you modify your system you

439
00:21:26,080 --> 00:21:30,080
want to

440
00:21:27,280 --> 00:21:30,399
um to check there is no regression on

441
00:21:30,080 --> 00:21:33,120
the

442
00:21:30,400 --> 00:21:34,400
on the system after an upgrade on the

443
00:21:33,120 --> 00:21:37,360
standard components

444
00:21:34,400 --> 00:21:37,679
and on added application you you develop

445
00:21:37,360 --> 00:21:39,600
with

446
00:21:37,679 --> 00:21:40,799
sdk and then you add packages for

447
00:21:39,600 --> 00:21:42,879
example

448
00:21:40,799 --> 00:21:45,520
so you have lots of method and tools for

449
00:21:42,880 --> 00:21:48,159
that it's very famous and

450
00:21:45,520 --> 00:21:48,879
i don't want to talk about it again and

451
00:21:48,159 --> 00:21:50,960
there are two

452
00:21:48,880 --> 00:21:52,880
uh two functions provided by the octo

453
00:21:50,960 --> 00:21:56,000
which is a p-test

454
00:21:52,880 --> 00:21:57,440
to test the package and test image to

455
00:21:56,000 --> 00:21:59,600
test the image

456
00:21:57,440 --> 00:22:01,760
and of course it's possible to extend

457
00:21:59,600 --> 00:22:04,799
there are lots of examples in yocto

458
00:22:01,760 --> 00:22:08,000
for standard packages such as busy box

459
00:22:04,799 --> 00:22:10,720
bluesy etc but you can define your

460
00:22:08,000 --> 00:22:11,360
your own test for p-test or for test

461
00:22:10,720 --> 00:22:14,480
email

462
00:22:11,360 --> 00:22:18,879
okay so we will try to for example for p

463
00:22:14,480 --> 00:22:21,440
test in the local.conf you have to

464
00:22:18,880 --> 00:22:22,720
to add some destroy features and image

465
00:22:21,440 --> 00:22:25,679
features

466
00:22:22,720 --> 00:22:26,240
to include the pts functionalities and

467
00:22:25,679 --> 00:22:29,520
once

468
00:22:26,240 --> 00:22:30,720
you create a specific image with this

469
00:22:29,520 --> 00:22:32,400
modification you

470
00:22:30,720 --> 00:22:33,760
you have all the package including the

471
00:22:32,400 --> 00:22:37,280
p-test strips

472
00:22:33,760 --> 00:22:40,400
in the user lib etc test

473
00:22:37,280 --> 00:22:43,280
so my my distro is my image

474
00:22:40,400 --> 00:22:43,760
usb test so for example you can see

475
00:22:43,280 --> 00:22:48,799
there is

476
00:22:43,760 --> 00:22:52,840
in user lib you have for example in

477
00:22:48,799 --> 00:22:55,120
uc box you have the pitas for musicbox

478
00:22:52,840 --> 00:22:58,320
etc and you have

479
00:22:55,120 --> 00:23:00,320
a command to see what

480
00:22:58,320 --> 00:23:01,360
are the package including a p-test

481
00:23:00,320 --> 00:23:03,918
script

482
00:23:01,360 --> 00:23:03,918
like okay

483
00:23:04,960 --> 00:23:12,240
and you can you can you can test

484
00:23:08,400 --> 00:23:13,120
a package with uh with the pitas runner

485
00:23:12,240 --> 00:23:16,400
or

486
00:23:13,120 --> 00:23:18,719
command inside on the board or from ssh

487
00:23:16,400 --> 00:23:21,120
which is much easier if you want to

488
00:23:18,720 --> 00:23:22,640
to have an automatic test so as an

489
00:23:21,120 --> 00:23:26,000
example we develop

490
00:23:22,640 --> 00:23:28,400
a small program

491
00:23:26,000 --> 00:23:31,440
which converts uh celsius to far night

492
00:23:28,400 --> 00:23:31,440
which is very useful

493
00:23:31,600 --> 00:23:34,959
okay and we want to check the program is

494
00:23:33,919 --> 00:23:38,480
okay

495
00:23:34,960 --> 00:23:41,919
so with the program

496
00:23:38,480 --> 00:23:41,919
we we give a script

497
00:23:49,200 --> 00:23:53,520
with uh some uh script which is called

498
00:23:52,000 --> 00:23:57,039
one bitters is a simple

499
00:23:53,520 --> 00:24:00,400
share script and um

500
00:23:57,039 --> 00:24:02,799
a list of data

501
00:24:00,400 --> 00:24:04,799
uh with which is simply a tensorator

502
00:24:02,799 --> 00:24:05,120
temperature incestuous and temperature

503
00:24:04,799 --> 00:24:07,360
in

504
00:24:05,120 --> 00:24:08,799
in fahrenheit and we run the test to see

505
00:24:07,360 --> 00:24:12,000
if the program

506
00:24:08,799 --> 00:24:13,918
gives the right value for fahrenheit so

507
00:24:12,000 --> 00:24:18,640
for example i do the

508
00:24:13,919 --> 00:24:21,919
p test far

509
00:24:18,640 --> 00:24:24,640
okay and you you begin the test

510
00:24:21,919 --> 00:24:25,840
so and you have the the result of the

511
00:24:24,640 --> 00:24:28,880
test

512
00:24:25,840 --> 00:24:32,000
and of course you can do that from ssh

513
00:24:28,880 --> 00:24:34,240
and you can do it if you if you type

514
00:24:32,000 --> 00:24:36,159
only peter's runner you run all the

515
00:24:34,240 --> 00:24:39,039
tests but it's very wrong okay

516
00:24:36,159 --> 00:24:39,039
i will not do this

517
00:24:40,880 --> 00:24:50,720
and uh another one is a global testing

518
00:24:48,400 --> 00:24:53,520
it's quite different because instead of

519
00:24:50,720 --> 00:24:55,039
testing a package on the board

520
00:24:53,520 --> 00:24:57,840
for example you want to test some

521
00:24:55,039 --> 00:25:01,039
functionalities for example the network

522
00:24:57,840 --> 00:25:01,760
for example for example ssh and

523
00:25:01,039 --> 00:25:04,960
basically

524
00:25:01,760 --> 00:25:06,000
is designed to be run by qme by the qmu

525
00:25:04,960 --> 00:25:08,960
target

526
00:25:06,000 --> 00:25:10,240
but if you configure yokto you can you

527
00:25:08,960 --> 00:25:13,520
can

528
00:25:10,240 --> 00:25:13,919
make it make it run on a hardware board

529
00:25:13,520 --> 00:25:15,520
are

530
00:25:13,919 --> 00:25:17,360
already running for example but there

531
00:25:15,520 --> 00:25:20,799
are several way to to

532
00:25:17,360 --> 00:25:22,479
to test you can test a booting target

533
00:25:20,799 --> 00:25:23,679
you can test an already running target

534
00:25:22,480 --> 00:25:25,760
etc

535
00:25:23,679 --> 00:25:27,279
but we will do with a running target is

536
00:25:25,760 --> 00:25:29,919
much more simpler

537
00:25:27,279 --> 00:25:31,039
so you you add an inner rate on the test

538
00:25:29,919 --> 00:25:33,919
image

539
00:25:31,039 --> 00:25:35,440
and you define the test suite and there

540
00:25:33,919 --> 00:25:38,960
are lots of

541
00:25:35,440 --> 00:25:39,600
examples of test suite for for example

542
00:25:38,960 --> 00:25:42,960
on the

543
00:25:39,600 --> 00:25:45,360
network with ping ssh you can check the

544
00:25:42,960 --> 00:25:47,760
the size of the of the disk the

545
00:25:45,360 --> 00:25:51,120
remaining side size on the disk

546
00:25:47,760 --> 00:25:56,879
you define the the way to test

547
00:25:51,120 --> 00:26:00,719
already finished oh it's quite finished

548
00:25:56,880 --> 00:26:03,760
and then you can you can do the

549
00:26:00,720 --> 00:26:04,400
you can do the the test for example it's

550
00:26:03,760 --> 00:26:06,320
uh

551
00:26:04,400 --> 00:26:07,760
you can do that from the the build

552
00:26:06,320 --> 00:26:12,559
environment

553
00:26:07,760 --> 00:26:12,559
bit back once minus c test image

554
00:26:13,760 --> 00:26:25,840
yeah yes okay you are

555
00:26:17,279 --> 00:26:25,840
at english time

556
00:26:26,559 --> 00:26:33,760
okay so i will be

557
00:26:30,080 --> 00:26:37,279
slower so you can

558
00:26:33,760 --> 00:26:39,919
you can run you can run from the pc

559
00:26:37,279 --> 00:26:40,880
you can run a bit back minus t test

560
00:26:39,919 --> 00:26:43,679
image on the

561
00:26:40,880 --> 00:26:44,640
this on the image you want to test and

562
00:26:43,679 --> 00:26:49,120
it will run the

563
00:26:44,640 --> 00:26:49,120
the test so for example

564
00:26:49,360 --> 00:26:55,600
um no i will first

565
00:26:53,200 --> 00:26:57,840
as i will first try with with the

566
00:26:55,600 --> 00:27:01,199
standard test

567
00:26:57,840 --> 00:27:04,879
soaping and ssh are standardized

568
00:27:01,200 --> 00:27:08,799
core image minimal

569
00:27:04,880 --> 00:27:11,200
okay so of course the dot should be

570
00:27:08,799 --> 00:27:13,520
so so i i modified the local.com so

571
00:27:11,200 --> 00:27:16,640
there there is a smaller

572
00:27:13,520 --> 00:27:20,158
indexing of the of the packages of the

573
00:27:16,640 --> 00:27:23,039
recipe sorry

574
00:27:20,159 --> 00:27:25,600
but the most is interesting of course

575
00:27:23,039 --> 00:27:29,039
you can add the new test

576
00:27:25,600 --> 00:27:32,320
uh the standard tests are in meta

577
00:27:29,039 --> 00:27:35,039
layer leave or qr etc and time

578
00:27:32,320 --> 00:27:36,480
and you can you can add your new test in

579
00:27:35,039 --> 00:27:39,120
your new layer

580
00:27:36,480 --> 00:27:41,200
and you write the test with a with the

581
00:27:39,120 --> 00:27:44,559
api provided by the octo it's a

582
00:27:41,200 --> 00:27:47,679
python and i just wrote a

583
00:27:44,559 --> 00:27:51,279
simple test today to show you

584
00:27:47,679 --> 00:27:54,240
it's a test we check if

585
00:27:51,279 --> 00:27:55,520
if the kernel modules are loaded it's

586
00:27:54,240 --> 00:27:59,279
very simple

587
00:27:55,520 --> 00:28:02,720
but first we will we will test with the

588
00:27:59,279 --> 00:28:05,039
standard features

589
00:28:02,720 --> 00:28:05,039
okay

590
00:28:09,120 --> 00:28:11,360
okay

591
00:28:13,440 --> 00:28:17,200
do this image okay so all the two tests

592
00:28:16,000 --> 00:28:20,720
are okay

593
00:28:17,200 --> 00:28:20,720
then i i add a new

594
00:28:21,360 --> 00:28:29,279
a new test for example

595
00:28:24,399 --> 00:28:29,279
i want to be sure that the module

596
00:28:29,679 --> 00:28:35,279
is loaded so my sample module

597
00:28:33,279 --> 00:28:36,559
i want to test on the board the module

598
00:28:35,279 --> 00:28:40,399
is loaded so

599
00:28:36,559 --> 00:28:43,440
i wrote a very simple test which

600
00:28:40,399 --> 00:28:44,399
use ls mode and and say ls small the

601
00:28:43,440 --> 00:28:47,919
size should be

602
00:28:44,399 --> 00:28:51,840
uh more than one line it's very simple

603
00:28:47,919 --> 00:28:56,840
but well why not

604
00:28:51,840 --> 00:29:01,199
and the test is here meet up for them

605
00:28:56,840 --> 00:29:02,799
libre or qr87 kisses and it's called ls

606
00:29:01,200 --> 00:29:07,919
mode

607
00:29:02,799 --> 00:29:11,760
you know so this is a very simple test

608
00:29:07,919 --> 00:29:15,919
and you run you ran a command from ssh

609
00:29:11,760 --> 00:29:17,039
ls ls spot pipe double uc minus l and i

610
00:29:15,919 --> 00:29:20,960
check the

611
00:29:17,039 --> 00:29:20,960
the result is greater than one

612
00:29:21,679 --> 00:29:27,840
so i have to add the test

613
00:29:31,679 --> 00:29:38,480
and first if i remove if i remove

614
00:29:35,919 --> 00:29:38,480
the module

615
00:29:39,360 --> 00:29:45,039
there will be a failure of course

616
00:29:42,480 --> 00:29:47,360
so sorry for my old pc it's a bit slow

617
00:29:45,039 --> 00:29:47,360
okay

618
00:29:51,279 --> 00:29:55,039
no it's not that slow so there is an

619
00:29:53,200 --> 00:29:56,159
error not because there is an error on

620
00:29:55,039 --> 00:29:58,799
the october but

621
00:29:56,159 --> 00:30:01,039
because there is an error in the in the

622
00:29:58,799 --> 00:30:01,039
test

623
00:30:04,640 --> 00:30:11,679
okay so you can see in the

624
00:30:09,039 --> 00:30:11,679
in the file

625
00:30:12,240 --> 00:30:16,960
of course you can you can do some

626
00:30:14,480 --> 00:30:20,399
additional stuff too

627
00:30:16,960 --> 00:30:20,399
that you will get the message

628
00:30:21,120 --> 00:30:26,559
okay you will get the message kernel

629
00:30:24,240 --> 00:30:29,600
module is not loaded

630
00:30:26,559 --> 00:30:33,360
not loaded okay so i i inserted

631
00:30:29,600 --> 00:30:36,559
the new module

632
00:30:33,360 --> 00:30:39,600
and i run the test again and of course

633
00:30:36,559 --> 00:30:39,600
it will it will work

634
00:30:43,120 --> 00:30:51,840
okay okay

635
00:30:53,919 --> 00:30:57,440
so that's very simple but you can if you

636
00:30:57,120 --> 00:31:01,120
have

637
00:30:57,440 --> 00:31:04,159
some additional components around

638
00:31:01,120 --> 00:31:07,518
you can you can do something interesting

639
00:31:04,159 --> 00:31:11,039
things with with some tools such as

640
00:31:07,519 --> 00:31:11,039
testy match p taste etc

641
00:31:11,279 --> 00:31:16,480
do you have any question and you speak

642
00:31:14,240 --> 00:31:21,679
slowly please in english

643
00:31:16,480 --> 00:31:21,679
or you speak french with a south accent

644
00:31:26,880 --> 00:31:36,399
no i i understand a little bit

645
00:31:32,880 --> 00:31:37,200
is a there isn't any way to flash the

646
00:31:36,399 --> 00:31:40,479
image

647
00:31:37,200 --> 00:31:42,159
after the building process and then test

648
00:31:40,480 --> 00:31:46,799
it

649
00:31:42,159 --> 00:31:49,440
yes of course i think so um

650
00:31:46,799 --> 00:31:52,158
well the answer is with yokto you can do

651
00:31:49,440 --> 00:31:52,159
anything you want

652
00:31:52,399 --> 00:31:56,559
you just have to to write you can write

653
00:31:55,200 --> 00:32:00,240
a class to

654
00:31:56,559 --> 00:32:00,879
to to flash an image and to to test the

655
00:32:00,240 --> 00:32:03,760
image

656
00:32:00,880 --> 00:32:04,159
and you can combine any tools you want

657
00:32:03,760 --> 00:32:05,919
uh

658
00:32:04,159 --> 00:32:08,480
i don't know if there is i think there

659
00:32:05,919 --> 00:32:11,760
is an existing configuration for

660
00:32:08,480 --> 00:32:13,519
test image for that but i'm not sure i

661
00:32:11,760 --> 00:32:17,279
never used it but

662
00:32:13,519 --> 00:32:19,679
i think i think there is okay

663
00:32:17,279 --> 00:32:19,679
thank you

664
00:32:24,720 --> 00:32:31,279
one more question

665
00:32:28,960 --> 00:32:31,279
okay

666
00:32:32,320 --> 00:32:43,840
so thank you

667
00:32:45,279 --> 00:32:47,360
you

