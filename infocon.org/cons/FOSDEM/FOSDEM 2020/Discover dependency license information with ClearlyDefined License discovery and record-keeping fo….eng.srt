1
00:00:06,319 --> 00:00:09,679
hi everyone yes

2
00:00:07,600 --> 00:00:10,959
my name is jeff mendoza i'll introduce

3
00:00:09,679 --> 00:00:13,840
myself a little bit

4
00:00:10,960 --> 00:00:15,360
i work at microsoft on open source

5
00:00:13,840 --> 00:00:17,680
compliance tooling

6
00:00:15,360 --> 00:00:19,038
the kind of things that make sure that

7
00:00:17,680 --> 00:00:20,880
all of our

8
00:00:19,039 --> 00:00:22,800
open source we are legally compliant and

9
00:00:20,880 --> 00:00:24,799
security compliant

10
00:00:22,800 --> 00:00:26,320
also part of my day job is to work on

11
00:00:24,800 --> 00:00:27,519
clearly defined project

12
00:00:26,320 --> 00:00:30,240
and that's what i'm here to talk to you

13
00:00:27,519 --> 00:00:31,839
about today and so i'm going to cover

14
00:00:30,240 --> 00:00:33,440
discovering your dependency license

15
00:00:31,840 --> 00:00:34,640
information and how clearly defined

16
00:00:33,440 --> 00:00:37,199
might be able to help you out with

17
00:00:34,640 --> 00:00:37,200
compliance

18
00:00:38,559 --> 00:00:43,199
so first of all what you know what is

19
00:00:40,640 --> 00:00:45,039
open source what is the license

20
00:00:43,200 --> 00:00:47,120
of course the license is what makes open

21
00:00:45,039 --> 00:00:49,039
source open source

22
00:00:47,120 --> 00:00:50,959
if you can see the code but you can't

23
00:00:49,039 --> 00:00:51,520
modify it you can't play with it you

24
00:00:50,960 --> 00:00:54,800
can't

25
00:00:51,520 --> 00:00:56,000
redistribute it it's not open source and

26
00:00:54,800 --> 00:00:58,800
therefore

27
00:00:56,000 --> 00:01:01,120
if we if we all really appreciate the

28
00:00:58,800 --> 00:01:05,039
freedoms that the licenses give us

29
00:01:01,120 --> 00:01:08,320
uh we should also appreciate and um

30
00:01:05,040 --> 00:01:08,960
and show our appreciation by obliging to

31
00:01:08,320 --> 00:01:12,240
the

32
00:01:08,960 --> 00:01:15,839
requirements that licenses um require

33
00:01:12,240 --> 00:01:16,720
some some examples of requirements that

34
00:01:15,840 --> 00:01:19,920
licenses have

35
00:01:16,720 --> 00:01:22,320
are attribution which means just

36
00:01:19,920 --> 00:01:23,600
say this is i got this open source from

37
00:01:22,320 --> 00:01:25,360
so and so

38
00:01:23,600 --> 00:01:26,960
retaining the copyright statement of the

39
00:01:25,360 --> 00:01:30,400
open source that you're re

40
00:01:26,960 --> 00:01:31,600
reusing potentially giving an offer for

41
00:01:30,400 --> 00:01:32,799
the source if you're distributing the

42
00:01:31,600 --> 00:01:34,880
binaries

43
00:01:32,799 --> 00:01:36,960
and then maybe making if you're making

44
00:01:34,880 --> 00:01:38,640
changes to the to the software

45
00:01:36,960 --> 00:01:40,720
maintaining a change log or marking the

46
00:01:38,640 --> 00:01:44,079
changes that you made

47
00:01:40,720 --> 00:01:44,798
and depending on the obligations of the

48
00:01:44,079 --> 00:01:46,079
licenses

49
00:01:44,799 --> 00:01:48,479
the particular license that your

50
00:01:46,079 --> 00:01:52,320
dependencies have you may make choices

51
00:01:48,479 --> 00:01:52,880
on which which dependencies you decide

52
00:01:52,320 --> 00:01:56,479
to

53
00:01:52,880 --> 00:01:58,079
take on in your project and it may be

54
00:01:56,479 --> 00:02:00,079
choices that affect you it may be

55
00:01:58,079 --> 00:02:02,559
choices that affect users of your code

56
00:02:00,079 --> 00:02:04,158
your library your tools

57
00:02:02,560 --> 00:02:06,479
and then you'll have to make compliance

58
00:02:04,159 --> 00:02:07,280
actions based on those those licenses

59
00:02:06,479 --> 00:02:10,478
and those

60
00:02:07,280 --> 00:02:10,479
dependencies that you choose

61
00:02:12,480 --> 00:02:16,720
so two steps to to you know figuring out

62
00:02:15,599 --> 00:02:18,640
what you're going to do

63
00:02:16,720 --> 00:02:20,080
first is knowing your dependencies which

64
00:02:18,640 --> 00:02:22,720
is uh sometimes

65
00:02:20,080 --> 00:02:23,280
depending on on the language a challenge

66
00:02:22,720 --> 00:02:25,440
and then

67
00:02:23,280 --> 00:02:27,040
knowing the license of your dependencies

68
00:02:25,440 --> 00:02:27,920
and this is where clearly defined will

69
00:02:27,040 --> 00:02:29,760
help you out

70
00:02:27,920 --> 00:02:32,238
but i'll i'll dive into that a little

71
00:02:29,760 --> 00:02:34,799
bit later first i want to

72
00:02:32,239 --> 00:02:36,879
cover you know you may have a question

73
00:02:34,800 --> 00:02:38,879
do licenses affect me

74
00:02:36,879 --> 00:02:40,079
let's say you're a library crate

75
00:02:38,879 --> 00:02:43,518
producer

76
00:02:40,080 --> 00:02:44,800
you just have a a library a tool some

77
00:02:43,519 --> 00:02:47,760
useful

78
00:02:44,800 --> 00:02:49,200
methods you put it up on crates io you

79
00:02:47,760 --> 00:02:50,239
don't do anything other than that well

80
00:02:49,200 --> 00:02:51,760
you're not actually distributing your

81
00:02:50,239 --> 00:02:55,519
dependencies

82
00:02:51,760 --> 00:02:57,519
you're not even using them locally

83
00:02:55,519 --> 00:02:59,360
but the dependencies that you choose

84
00:02:57,519 --> 00:03:01,280
have an effect on the people that

85
00:02:59,360 --> 00:03:02,800
consume your crate so let's say you want

86
00:03:01,280 --> 00:03:04,879
everybody to use

87
00:03:02,800 --> 00:03:06,239
your your crate but you have a

88
00:03:04,879 --> 00:03:08,879
dependency on something that

89
00:03:06,239 --> 00:03:10,080
maybe people don't want to use so that

90
00:03:08,879 --> 00:03:11,359
might be a

91
00:03:10,080 --> 00:03:12,879
reason why you want to know the

92
00:03:11,360 --> 00:03:14,560
dependencies and the licenses of your

93
00:03:12,879 --> 00:03:17,040
dependencies

94
00:03:14,560 --> 00:03:18,720
so if you if you produce tools again you

95
00:03:17,040 --> 00:03:20,560
could just put put your crate up on

96
00:03:18,720 --> 00:03:22,159
crates io

97
00:03:20,560 --> 00:03:23,760
and have people download it but you

98
00:03:22,159 --> 00:03:24,720
might also want to distribute a binary

99
00:03:23,760 --> 00:03:26,480
of your tool

100
00:03:24,720 --> 00:03:28,640
in that case you're distributing also

101
00:03:26,480 --> 00:03:29,679
the bind the all of your dependencies

102
00:03:28,640 --> 00:03:32,958
and then all of the

103
00:03:29,680 --> 00:03:34,400
clauses for things that you are things

104
00:03:32,959 --> 00:03:37,599
that are required when you distribute

105
00:03:34,400 --> 00:03:38,640
the code take effect and you have to

106
00:03:37,599 --> 00:03:42,480
comply with all those

107
00:03:38,640 --> 00:03:45,040
requirements maybe you have a web app

108
00:03:42,480 --> 00:03:46,480
that you write in rust and you want to

109
00:03:45,040 --> 00:03:48,959
have people use

110
00:03:46,480 --> 00:03:50,560
uh you put it up creates io or maybe you

111
00:03:48,959 --> 00:03:53,280
run it publicly well now you have

112
00:03:50,560 --> 00:03:54,080
to comply with any network coffee left

113
00:03:53,280 --> 00:03:57,200
obligations

114
00:03:54,080 --> 00:03:58,720
that those dependencies have um or let's

115
00:03:57,200 --> 00:04:01,040
say you distribute a docker image

116
00:03:58,720 --> 00:04:02,159
of your your web app so that people can

117
00:04:01,040 --> 00:04:03,679
download it and run it

118
00:04:02,159 --> 00:04:05,280
very quick and easy well now you're

119
00:04:03,680 --> 00:04:06,159
distributing all the dependencies that

120
00:04:05,280 --> 00:04:08,560
you have

121
00:04:06,159 --> 00:04:08,560
as well

122
00:04:11,120 --> 00:04:15,519
okay so jumping back to clearly defined

123
00:04:13,599 --> 00:04:18,320
what is clearly defined

124
00:04:15,519 --> 00:04:20,160
it's a project under the osi and it it

125
00:04:18,320 --> 00:04:21,599
aims to be a central pool of knowledge

126
00:04:20,160 --> 00:04:24,880
of licensed information

127
00:04:21,600 --> 00:04:27,520
about open source software

128
00:04:24,880 --> 00:04:28,960
license information usually accounts to

129
00:04:27,520 --> 00:04:32,159
about three things

130
00:04:28,960 --> 00:04:35,120
the um the actual license and

131
00:04:32,160 --> 00:04:37,280
um there's a there's a format that's uh

132
00:04:35,120 --> 00:04:38,000
or a specification called spdx that we

133
00:04:37,280 --> 00:04:41,440
use

134
00:04:38,000 --> 00:04:44,240
to uh be so that when you say mit

135
00:04:41,440 --> 00:04:44,880
you mean this exact version of mit not

136
00:04:44,240 --> 00:04:47,600
this other

137
00:04:44,880 --> 00:04:49,199
variation so that that's the the actual

138
00:04:47,600 --> 00:04:49,840
first is the actual name the license the

139
00:04:49,199 --> 00:04:53,360
second thing

140
00:04:49,840 --> 00:04:55,599
is the um uh attribution

141
00:04:53,360 --> 00:04:57,680
so or the uh you know the the name of

142
00:04:55,600 --> 00:04:59,919
the person who owns the copyright

143
00:04:57,680 --> 00:05:01,199
person or entity and the third thing is

144
00:04:59,919 --> 00:05:04,240
the source location

145
00:05:01,199 --> 00:05:06,160
so if you get um some some package

146
00:05:04,240 --> 00:05:08,000
managers you can download the package

147
00:05:06,160 --> 00:05:09,520
but there's no point there's no pointer

148
00:05:08,000 --> 00:05:12,080
to the actual source location like which

149
00:05:09,520 --> 00:05:14,240
github repository this package came from

150
00:05:12,080 --> 00:05:15,840
so clearly defined is a project to get

151
00:05:14,240 --> 00:05:17,759
all of that information one central

152
00:05:15,840 --> 00:05:20,960
location

153
00:05:17,759 --> 00:05:22,880
and one of the things it does is when

154
00:05:20,960 --> 00:05:26,000
you when it when it downloads a

155
00:05:22,880 --> 00:05:27,840
source package instead of just looking

156
00:05:26,000 --> 00:05:30,479
in in the rust case instead of looking

157
00:05:27,840 --> 00:05:33,919
at the the declared license

158
00:05:30,479 --> 00:05:35,120
in the crates. tomo it actually runs

159
00:05:33,919 --> 00:05:36,719
scanners on

160
00:05:35,120 --> 00:05:38,880
everything inside all the source code

161
00:05:36,720 --> 00:05:41,520
inside of the package

162
00:05:38,880 --> 00:05:43,360
because people don't always declare all

163
00:05:41,520 --> 00:05:44,479
of the licenses that are actually in the

164
00:05:43,360 --> 00:05:47,919
source code

165
00:05:44,479 --> 00:05:48,560
so it it runs scanners on all of these

166
00:05:47,919 --> 00:05:49,758
packages

167
00:05:48,560 --> 00:05:51,199
and then it shows you here's the

168
00:05:49,759 --> 00:05:52,880
declared licenses and here are the

169
00:05:51,199 --> 00:05:54,639
discovered licenses

170
00:05:52,880 --> 00:05:56,159
and if those don't match up then it

171
00:05:54,639 --> 00:05:57,280
actually gives it a lower score saying

172
00:05:56,160 --> 00:05:58,720
that people you know there's not

173
00:05:57,280 --> 00:06:00,960
there's actually licenses discovered

174
00:05:58,720 --> 00:06:02,960
that were not declared um

175
00:06:00,960 --> 00:06:04,159
and then what another central point of

176
00:06:02,960 --> 00:06:06,159
the project is that

177
00:06:04,160 --> 00:06:07,280
running this scanning is actually pretty

178
00:06:06,160 --> 00:06:10,240
expensive

179
00:06:07,280 --> 00:06:11,359
and there's no reason why anybody in the

180
00:06:10,240 --> 00:06:13,360
world has to run

181
00:06:11,360 --> 00:06:16,160
scan code which is one of our scanners

182
00:06:13,360 --> 00:06:18,240
on a particular package more than once

183
00:06:16,160 --> 00:06:20,319
because that package with that hash is

184
00:06:18,240 --> 00:06:22,319
never changing so once that scan

185
00:06:20,319 --> 00:06:24,880
is run it's better to just store the

186
00:06:22,319 --> 00:06:26,160
results in a in a public location

187
00:06:24,880 --> 00:06:29,039
rather than everybody having to try to

188
00:06:26,160 --> 00:06:30,720
run these scanners all the time

189
00:06:29,039 --> 00:06:32,880
and then the next major thing that comes

190
00:06:30,720 --> 00:06:35,600
in is other than just storing the

191
00:06:32,880 --> 00:06:37,039
results of scanners is of course

192
00:06:35,600 --> 00:06:40,080
scanners are not perfect

193
00:06:37,039 --> 00:06:41,599
they're they're programs and you can

194
00:06:40,080 --> 00:06:42,960
make mistakes it can't cover every

195
00:06:41,600 --> 00:06:45,600
single case where

196
00:06:42,960 --> 00:06:48,080
every single license can be discovered

197
00:06:45,600 --> 00:06:50,800
so there's a community-based curations

198
00:06:48,080 --> 00:06:51,599
process in the clearly defined knowledge

199
00:06:50,800 --> 00:06:55,120
pool

200
00:06:51,599 --> 00:06:56,159
where if a scanner says hey this

201
00:06:55,120 --> 00:06:58,400
you know i couldn't determine the

202
00:06:56,160 --> 00:06:59,919
license of this package but somebody

203
00:06:58,400 --> 00:07:01,679
else can read it and say hey it's

204
00:06:59,919 --> 00:07:03,520
in a different wording or for some

205
00:07:01,680 --> 00:07:04,639
reason we you know the scanner didn't

206
00:07:03,520 --> 00:07:08,080
pick it up

207
00:07:04,639 --> 00:07:09,840
a person can or usually a lawyer can say

208
00:07:08,080 --> 00:07:11,280
hey that the the licenses package is

209
00:07:09,840 --> 00:07:14,080
actually mit

210
00:07:11,280 --> 00:07:15,520
um and then it can be peer reviewed by

211
00:07:14,080 --> 00:07:18,240
other people in the community

212
00:07:15,520 --> 00:07:20,080
through the typical github pr process

213
00:07:18,240 --> 00:07:21,919
and everybody can kind of agree

214
00:07:20,080 --> 00:07:23,199
what the the whole community can agree

215
00:07:21,919 --> 00:07:25,120
with the license of a particular

216
00:07:23,199 --> 00:07:28,240
packages

217
00:07:25,120 --> 00:07:30,639
and the end goal of the project is if if

218
00:07:28,240 --> 00:07:32,479
you do have problems with packages where

219
00:07:30,639 --> 00:07:33,759
declared versus discovered is wrong or

220
00:07:32,479 --> 00:07:35,280
curations are needed

221
00:07:33,759 --> 00:07:36,720
um the owners of this package can

222
00:07:35,280 --> 00:07:38,159
actually go and fix their own package

223
00:07:36,720 --> 00:07:39,680
and so that

224
00:07:38,160 --> 00:07:41,759
you know maybe maybe in the future this

225
00:07:39,680 --> 00:07:43,360
project won't be necessary because the

226
00:07:41,759 --> 00:07:44,720
declared license on all packages will

227
00:07:43,360 --> 00:07:47,520
just be very

228
00:07:44,720 --> 00:07:47,520
clearly defined

229
00:07:48,400 --> 00:07:52,479
so great how do i use clearly defined

230
00:07:50,560 --> 00:07:58,479
well it's got a website

231
00:07:52,479 --> 00:08:00,639
i was going to show it to you oops

232
00:07:58,479 --> 00:08:02,000
right here so you can go browse and of

233
00:08:00,639 --> 00:08:03,919
course

234
00:08:02,000 --> 00:08:05,120
clearly defined supports many different

235
00:08:03,919 --> 00:08:06,479
types

236
00:08:05,120 --> 00:08:08,560
so here i'm looking at a few crates and

237
00:08:06,479 --> 00:08:10,639
you can just go see here some examples

238
00:08:08,560 --> 00:08:12,879
of the licenses that

239
00:08:10,639 --> 00:08:14,319
are found for these particular crates

240
00:08:12,879 --> 00:08:14,560
but i know you're thinking hey that you

241
00:08:14,319 --> 00:08:16,160
know

242
00:08:14,560 --> 00:08:17,840
i'm not going to go to a website and

243
00:08:16,160 --> 00:08:20,960
look up all these licenses there must be

244
00:08:17,840 --> 00:08:20,960
a simpler way to use this

245
00:08:23,039 --> 00:08:27,199
so i actually wrote some tooling to hit

246
00:08:26,000 --> 00:08:30,240
the api

247
00:08:27,199 --> 00:08:32,560
uh and based on a crate your your rust

248
00:08:30,240 --> 00:08:35,039
package to show you how easy it is to

249
00:08:32,559 --> 00:08:36,718
detect the the dependencies you have and

250
00:08:35,039 --> 00:08:37,838
then query the licenses for those

251
00:08:36,719 --> 00:08:40,959
dependencies

252
00:08:37,839 --> 00:08:42,479
so i'm going to cover that right now so

253
00:08:40,958 --> 00:08:45,359
the tooling is up on github here

254
00:08:42,479 --> 00:08:45,360
and the crate is here

255
00:08:50,240 --> 00:08:53,760
so quickly what it is is it looks at

256
00:08:52,320 --> 00:08:56,720
your cargo lock

257
00:08:53,760 --> 00:08:57,519
and then it has a few different command

258
00:08:56,720 --> 00:08:59,920
line tools

259
00:08:57,519 --> 00:09:02,000
that takes the the output of your cargo

260
00:08:59,920 --> 00:09:04,640
lock and first tool converts the

261
00:09:02,000 --> 00:09:06,320
that output into a format that clearly

262
00:09:04,640 --> 00:09:08,160
define can understand

263
00:09:06,320 --> 00:09:10,080
and then the second tool two tools one

264
00:09:08,160 --> 00:09:12,160
will um take that

265
00:09:10,080 --> 00:09:14,160
format and then query clearly defined

266
00:09:12,160 --> 00:09:15,279
for just the license information output

267
00:09:14,160 --> 00:09:17,760
in a csv

268
00:09:15,279 --> 00:09:18,640
something you might want to store as uh

269
00:09:17,760 --> 00:09:22,000
a uh

270
00:09:18,640 --> 00:09:23,839
artifact with your build and then the um

271
00:09:22,000 --> 00:09:25,920
the other tool cd to notice will take

272
00:09:23,839 --> 00:09:26,720
the output of that and create a notice

273
00:09:25,920 --> 00:09:29,920
file for you

274
00:09:26,720 --> 00:09:30,959
and a notice file is um it is something

275
00:09:29,920 --> 00:09:32,640
that will help you with when you're

276
00:09:30,959 --> 00:09:35,040
redistributing um

277
00:09:32,640 --> 00:09:36,640
your dependencies so the very most

278
00:09:35,040 --> 00:09:38,480
common requirement of

279
00:09:36,640 --> 00:09:40,399
obligation for licenses is that when you

280
00:09:38,480 --> 00:09:42,640
redistribute it you provide the notice

281
00:09:40,399 --> 00:09:44,640
and this is a completely automates that

282
00:09:42,640 --> 00:09:46,880
process for you

283
00:09:44,640 --> 00:09:51,839
and i'm going to go ahead and show you

284
00:09:46,880 --> 00:09:51,839
an example of how it works

285
00:09:52,640 --> 00:10:05,519
sorry yeah i'll show you in the code

286
00:09:55,600 --> 00:10:08,000
here first

287
00:10:05,519 --> 00:10:08,800
so first first thing it does is like i

288
00:10:08,000 --> 00:10:10,640
was saying it shows

289
00:10:08,800 --> 00:10:12,319
it gives you the output of all my

290
00:10:10,640 --> 00:10:14,480
dependencies in a format that clearly

291
00:10:12,320 --> 00:10:16,320
define understands

292
00:10:14,480 --> 00:10:18,800
and then here's the one that would go

293
00:10:16,320 --> 00:10:20,480
ahead and query clearly find for the

294
00:10:18,800 --> 00:10:22,079
each one of those packages and versions

295
00:10:20,480 --> 00:10:25,120
and gets you the license

296
00:10:22,079 --> 00:10:25,120
so this is something you could run

297
00:10:26,959 --> 00:10:30,239
the other one thing i want to show you

298
00:10:28,160 --> 00:10:35,120
is i have a in this in

299
00:10:30,240 --> 00:10:38,959
in my tool i hooked it up to circle ci

300
00:10:35,120 --> 00:10:41,120
and then whenever i tag a make a git tag

301
00:10:38,959 --> 00:10:42,239
i have a workflow that's going to create

302
00:10:41,120 --> 00:10:46,240
a git release

303
00:10:42,240 --> 00:10:47,680
and attach the binaries of my tool

304
00:10:46,240 --> 00:10:49,279
and of course since i'm attaching the

305
00:10:47,680 --> 00:10:50,319
binaries in my tool to get release i'm

306
00:10:49,279 --> 00:10:52,079
making a distribution

307
00:10:50,320 --> 00:10:53,600
of all of my dependencies so i want to

308
00:10:52,079 --> 00:10:55,920
generate a notice file and put that

309
00:10:53,600 --> 00:10:59,440
inside of my distribution

310
00:10:55,920 --> 00:11:01,519
so part of part of the part of the

311
00:10:59,440 --> 00:11:03,440
build process is the build of the tools

312
00:11:01,519 --> 00:11:06,880
part of it is the notice generation

313
00:11:03,440 --> 00:11:06,880
and those get merged into the publish

314
00:11:08,560 --> 00:11:12,719
i have it here right so here's on the

315
00:11:11,279 --> 00:11:15,279
notice generation

316
00:11:12,720 --> 00:11:17,680
i'm doing cargo install with my tool and

317
00:11:15,279 --> 00:11:19,839
then running the notice generation

318
00:11:17,680 --> 00:11:20,959
and then on the publish i'm just

319
00:11:19,839 --> 00:11:29,839
tarballing it

320
00:11:20,959 --> 00:11:29,839
and attaching it to my github release

321
00:11:32,640 --> 00:11:36,800
so here's the actual tarball that i'm

322
00:11:35,440 --> 00:11:38,160
attaching to my github release it's the

323
00:11:36,800 --> 00:11:41,199
binaries of my tool

324
00:11:38,160 --> 00:11:41,199
and then the notice file

325
00:11:41,680 --> 00:11:45,680
so i look at the notice file i have the

326
00:11:43,760 --> 00:11:49,600
i can i have i'm correctly

327
00:11:45,680 --> 00:11:52,239
um fulfilling all the requirements of my

328
00:11:49,600 --> 00:11:53,519
my dependencies uh dependency license

329
00:11:52,240 --> 00:11:55,360
obligations

330
00:11:53,519 --> 00:11:56,560
so for example cloud api i have my

331
00:11:55,360 --> 00:11:57,839
copyright

332
00:11:56,560 --> 00:11:59,599
and all of this information comes

333
00:11:57,839 --> 00:12:00,720
directly from clearly defined so i know

334
00:11:59,600 --> 00:12:04,320
it's

335
00:12:00,720 --> 00:12:08,079
been peer reviewed and it's been

336
00:12:04,320 --> 00:12:08,079
detected all the licenses have been

337
00:12:08,839 --> 00:12:11,839
detected

338
00:12:12,240 --> 00:12:16,320
now here's the crate okay

339
00:12:17,839 --> 00:12:21,600
okay and um this tooling actually i want

340
00:12:20,240 --> 00:12:24,959
to show you the source real quick

341
00:12:21,600 --> 00:12:24,959
it's it's very simple

342
00:12:32,800 --> 00:12:39,839
for example i'll show you the

343
00:12:40,160 --> 00:12:44,480
uh yeah so it's it's only a few lines of

344
00:12:42,399 --> 00:12:48,079
code again it's it's something that

345
00:12:44,480 --> 00:12:48,560
um you don't really need these tools to

346
00:12:48,079 --> 00:12:50,160
do this

347
00:12:48,560 --> 00:12:51,518
if you didn't want to so if you have if

348
00:12:50,160 --> 00:12:52,000
you're in an organization which already

349
00:12:51,519 --> 00:12:55,120
has

350
00:12:52,000 --> 00:12:57,760
a ci cd system or a build process uh

351
00:12:55,120 --> 00:12:59,440
hitting the api and querying for things

352
00:12:57,760 --> 00:13:00,800
like notice or things like what is the

353
00:12:59,440 --> 00:13:03,519
license is something that is

354
00:13:00,800 --> 00:13:04,079
extremely easy to do the tool is just an

355
00:13:03,519 --> 00:13:06,880
example

356
00:13:04,079 --> 00:13:07,519
on how you can how you can do that and

357
00:13:06,880 --> 00:13:09,200
how

358
00:13:07,519 --> 00:13:12,079
you can integrate it into you know in

359
00:13:09,200 --> 00:13:16,240
this example circle ci

360
00:13:12,079 --> 00:13:16,239
the rest api is is linked here

361
00:13:16,560 --> 00:13:20,239
so we have swagger on the main thing

362
00:13:19,279 --> 00:13:22,160
that you would want to be doing is

363
00:13:20,240 --> 00:13:24,480
querying the definition

364
00:13:22,160 --> 00:13:25,439
uh and the type provider namespace name

365
00:13:24,480 --> 00:13:26,880
revision

366
00:13:25,440 --> 00:13:27,920
uh although all the type provider

367
00:13:26,880 --> 00:13:29,519
namespace would be the same for all

368
00:13:27,920 --> 00:13:31,040
crates and then the name revision would

369
00:13:29,519 --> 00:13:33,120
just be the name revision

370
00:13:31,040 --> 00:13:34,560
for for your particular crate that's

371
00:13:33,120 --> 00:13:36,880
very simple

372
00:13:34,560 --> 00:13:37,599
and then again the the notice file here

373
00:13:36,880 --> 00:13:40,480
will generate

374
00:13:37,600 --> 00:13:41,760
the notice for you automatically for if

375
00:13:40,480 --> 00:13:48,880
you give it the list of your

376
00:13:41,760 --> 00:13:51,040
your dependencies um

377
00:13:48,880 --> 00:13:52,000
so maybe you're thinking this is cool uh

378
00:13:51,040 --> 00:13:53,839
how could i help

379
00:13:52,000 --> 00:13:55,040
uh i think the first if you take

380
00:13:53,839 --> 00:13:57,120
anything away from this talk

381
00:13:55,040 --> 00:13:58,160
uh it's not go use clearly defined it's

382
00:13:57,120 --> 00:13:59,440
that um

383
00:13:58,160 --> 00:14:01,519
you should respect the licenses of your

384
00:13:59,440 --> 00:14:02,000
dependencies and and by respect to them

385
00:14:01,519 --> 00:14:03,360
you should comply

386
00:14:02,000 --> 00:14:05,040
with the obligations that they they

387
00:14:03,360 --> 00:14:06,560
impose uh

388
00:14:05,040 --> 00:14:08,399
and then secondly if you do if you are

389
00:14:06,560 --> 00:14:10,319
interested in clearly defined

390
00:14:08,399 --> 00:14:12,639
uh take a look at the tool take a look

391
00:14:10,320 --> 00:14:14,160
at the the licenses of the crates that

392
00:14:12,639 --> 00:14:16,079
you know or that you use

393
00:14:14,160 --> 00:14:18,079
uh if you see that an error on the

394
00:14:16,079 --> 00:14:21,120
website curate your dependencies

395
00:14:18,079 --> 00:14:23,040
so um as i was mentioning uh

396
00:14:21,120 --> 00:14:24,480
if there are if there's an error anybody

397
00:14:23,040 --> 00:14:27,680
can go submit a curation

398
00:14:24,480 --> 00:14:30,560
for it to be um peer-reviewed

399
00:14:27,680 --> 00:14:31,839
so for example i was looking at this uh

400
00:14:30,560 --> 00:14:34,000
this package and it's

401
00:14:31,839 --> 00:14:35,920
discovered and no assertion so no

402
00:14:34,000 --> 00:14:37,519
assertion means that the tool found

403
00:14:35,920 --> 00:14:40,079
legal text but it didn't actually know

404
00:14:37,519 --> 00:14:42,800
what the license was

405
00:14:40,079 --> 00:14:44,719
and if you go look at the files oh i had

406
00:14:42,800 --> 00:14:46,959
found it before but it's not here

407
00:14:44,720 --> 00:14:48,720
i think it's oh here it is you can go

408
00:14:46,959 --> 00:14:51,599
and click on the edit

409
00:14:48,720 --> 00:14:53,760
and type in uh what you think it is and

410
00:14:51,600 --> 00:14:54,320
click submit and it'll open a github pr

411
00:14:53,760 --> 00:14:59,839
to our

412
00:14:54,320 --> 00:14:59,839
curations repository with your curation

413
00:15:01,600 --> 00:15:05,040
so another thing is uh if if you see

414
00:15:04,240 --> 00:15:08,800
that a

415
00:15:05,040 --> 00:15:10,000
um a package is being not being detected

416
00:15:08,800 --> 00:15:11,439
correctly

417
00:15:10,000 --> 00:15:13,199
we're actually clearly defined is just

418
00:15:11,440 --> 00:15:17,199
running these underlying scanners

419
00:15:13,199 --> 00:15:19,920
um one is scan code one's phosology

420
00:15:17,199 --> 00:15:20,800
licensee so those scanners are not

421
00:15:19,920 --> 00:15:22,079
perfect and they're

422
00:15:20,800 --> 00:15:23,680
they're really great open source

423
00:15:22,079 --> 00:15:24,239
projects that could use contributions to

424
00:15:23,680 --> 00:15:26,560
help

425
00:15:24,240 --> 00:15:28,880
detect licenses um so that would be a

426
00:15:26,560 --> 00:15:31,439
cool thing to do

427
00:15:28,880 --> 00:15:31,920
compute power so we actually like i was

428
00:15:31,440 --> 00:15:35,600
mentioning

429
00:15:31,920 --> 00:15:38,639
the scanning process is expensive so um

430
00:15:35,600 --> 00:15:40,160
there's a whole big queue of of requests

431
00:15:38,639 --> 00:15:42,000
for things to be harvested

432
00:15:40,160 --> 00:15:43,920
and then there are machines that go and

433
00:15:42,000 --> 00:15:46,959
pull things off the queue and

434
00:15:43,920 --> 00:15:47,519
harvest stuff and and submit the results

435
00:15:46,959 --> 00:15:49,680
back

436
00:15:47,519 --> 00:15:50,720
right now we have computer resources

437
00:15:49,680 --> 00:15:54,079
donated by

438
00:15:50,720 --> 00:15:56,079
microsoft google and amazon

439
00:15:54,079 --> 00:15:58,800
and so any compute power donated to the

440
00:15:56,079 --> 00:16:00,479
project would be very much appreciated

441
00:15:58,800 --> 00:16:01,680
and then the last one which i'll go into

442
00:16:00,480 --> 00:16:02,399
a little bit more detail is make your

443
00:16:01,680 --> 00:16:06,880
own crates

444
00:16:02,399 --> 00:16:06,880
clearly defined so

445
00:16:08,000 --> 00:16:11,680
how do i you know if your crate is

446
00:16:09,120 --> 00:16:12,320
clearly defined so first thing to do is

447
00:16:11,680 --> 00:16:14,560
if

448
00:16:12,320 --> 00:16:15,440
if you go to the website and you don't

449
00:16:14,560 --> 00:16:17,439
see your crate

450
00:16:15,440 --> 00:16:19,040
here that means it hasn't been harvested

451
00:16:17,440 --> 00:16:22,079
yet

452
00:16:19,040 --> 00:16:23,599
and there's a a web page there's also an

453
00:16:22,079 --> 00:16:25,920
api to queue harvests

454
00:16:23,600 --> 00:16:27,120
so you just pick the you pick crate and

455
00:16:25,920 --> 00:16:28,319
then you type in the name

456
00:16:27,120 --> 00:16:30,240
and that'll be queued to harvest it

457
00:16:28,320 --> 00:16:31,360
might take a few hours to be harvested

458
00:16:30,240 --> 00:16:37,839
because it's a

459
00:16:31,360 --> 00:16:37,839
it's a backlog of of uh tools being run

460
00:16:38,079 --> 00:16:41,439
and then check check the results of your

461
00:16:39,839 --> 00:16:43,279
harvest are there any no assertions are

462
00:16:41,440 --> 00:16:44,720
there any licenses detected that you

463
00:16:43,279 --> 00:16:46,240
didn't know you had

464
00:16:44,720 --> 00:16:47,839
are there any licenses detected that you

465
00:16:46,240 --> 00:16:49,279
think are wrong

466
00:16:47,839 --> 00:16:51,199
and then submit the curations like i was

467
00:16:49,279 --> 00:16:52,800
showing you before and then the main

468
00:16:51,199 --> 00:16:56,319
thing would be to go and actually

469
00:16:52,800 --> 00:16:58,479
fix your package say um uh

470
00:16:56,320 --> 00:16:59,600
if if there's a problem with the scanner

471
00:16:58,480 --> 00:17:05,599
and it's because your

472
00:16:59,600 --> 00:17:08,799
license text has a typo go fix your typo

473
00:17:05,599 --> 00:17:11,359
yeah and that's all i had i'd open up to

474
00:17:08,799 --> 00:17:11,359
questions now

475
00:17:12,069 --> 00:17:19,839
[Applause]

476
00:17:16,240 --> 00:17:19,839
yes i'm back

477
00:17:26,240 --> 00:17:30,320
do you would you agree with the point

478
00:17:28,799 --> 00:17:33,360
that

479
00:17:30,320 --> 00:17:37,918
this kind of let's say license

480
00:17:33,360 --> 00:17:40,879
checking mechanism should be part of

481
00:17:37,919 --> 00:17:41,679
whatever distribution means are provided

482
00:17:40,880 --> 00:17:46,880
by every

483
00:17:41,679 --> 00:17:48,480
language technology so um

484
00:17:46,880 --> 00:17:50,400
i'm going to repeat the question uh the

485
00:17:48,480 --> 00:17:51,039
question is should the scanning or

486
00:17:50,400 --> 00:17:53,280
should the

487
00:17:51,039 --> 00:17:55,120
the double check of is is the declared

488
00:17:53,280 --> 00:17:56,160
license correct be a part of the package

489
00:17:55,120 --> 00:18:00,639
manager

490
00:17:56,160 --> 00:18:03,919
um i would say that would be

491
00:18:00,640 --> 00:18:07,200
i i'm happy with um

492
00:18:03,919 --> 00:18:09,120
cargo as it is but

493
00:18:07,200 --> 00:18:10,400
that would be great but there are a lot

494
00:18:09,120 --> 00:18:12,719
of other languages

495
00:18:10,400 --> 00:18:15,200
that are in a way worse space than this

496
00:18:12,720 --> 00:18:17,840
right now there are languages that

497
00:18:15,200 --> 00:18:18,799
for example when you have multiple

498
00:18:17,840 --> 00:18:20,959
licenses

499
00:18:18,799 --> 00:18:23,360
it's very important whether or not it's

500
00:18:20,960 --> 00:18:26,960
an and or an ore

501
00:18:23,360 --> 00:18:29,199
but many like many package managers have

502
00:18:26,960 --> 00:18:30,799
uh the license is just a string or it's

503
00:18:29,200 --> 00:18:32,799
just or an array

504
00:18:30,799 --> 00:18:34,240
and there's no way to detect that many

505
00:18:32,799 --> 00:18:36,960
package managers don't have

506
00:18:34,240 --> 00:18:38,640
a field for source location and that's

507
00:18:36,960 --> 00:18:41,039
something that has to be detected

508
00:18:38,640 --> 00:18:41,840
so um there was actually there's

509
00:18:41,039 --> 00:18:43,280
actually talk

510
00:18:41,840 --> 00:18:44,879
yesterday here at the dependency

511
00:18:43,280 --> 00:18:47,039
management was which was package

512
00:18:44,880 --> 00:18:50,160
managers go fix your stuff

513
00:18:47,039 --> 00:18:54,080
um and and it had a lot of that kind of

514
00:18:50,160 --> 00:18:54,080
uh a direction so

515
00:18:54,160 --> 00:18:57,520
i don't know i mean that's a that's a

516
00:18:55,440 --> 00:18:58,799
good question a good a good thought but

517
00:18:57,520 --> 00:19:00,639
i think the fir in the first part we

518
00:18:58,799 --> 00:19:04,240
just need to have the right

519
00:19:00,640 --> 00:19:07,760
metadata as maybe a requirement uh

520
00:19:04,240 --> 00:19:10,480
and have the right um language as far as

521
00:19:07,760 --> 00:19:13,120
ands and ors and things like that around

522
00:19:10,480 --> 00:19:13,120
license type

523
00:19:13,840 --> 00:19:17,120
over here yeah i have a question when

524
00:19:16,000 --> 00:19:19,600
i'm a user of

525
00:19:17,120 --> 00:19:20,479
such an open source component yes uh can

526
00:19:19,600 --> 00:19:24,000
i trigger

527
00:19:20,480 --> 00:19:26,320
harvest yes so and if there

528
00:19:24,000 --> 00:19:27,760
i find something that's not correct what

529
00:19:26,320 --> 00:19:31,120
would i do would i just

530
00:19:27,760 --> 00:19:34,640
uh uh send something to uh clearly find

531
00:19:31,120 --> 00:19:36,479
or would i contact the original author

532
00:19:34,640 --> 00:19:38,880
yeah so the question was uh if i'm a

533
00:19:36,480 --> 00:19:40,400
user it's not just if i'm an owner can i

534
00:19:38,880 --> 00:19:41,840
trigger harvests and yes absolutely you

535
00:19:40,400 --> 00:19:42,960
can put anybody can come over here and

536
00:19:41,840 --> 00:19:45,439
put whatever they want

537
00:19:42,960 --> 00:19:47,039
or use the api to trigger harvests on

538
00:19:45,440 --> 00:19:48,960
whatever package they want

539
00:19:47,039 --> 00:19:50,320
and then the second question is what do

540
00:19:48,960 --> 00:19:53,840
i do when i find

541
00:19:50,320 --> 00:19:57,120
an error and i would say do both um

542
00:19:53,840 --> 00:19:59,520
the the first question was should i

543
00:19:57,120 --> 00:20:00,559
uh should i make a curation like what we

544
00:19:59,520 --> 00:20:02,639
were doing here

545
00:20:00,559 --> 00:20:03,840
which would change the clearly defined

546
00:20:02,640 --> 00:20:05,200
knowledge base on

547
00:20:03,840 --> 00:20:06,959
what's what's the information about this

548
00:20:05,200 --> 00:20:08,640
package and definitely do that

549
00:20:06,960 --> 00:20:10,720
and the second question is should i go

550
00:20:08,640 --> 00:20:11,200
and you know open an issue or try to fix

551
00:20:10,720 --> 00:20:14,080
the

552
00:20:11,200 --> 00:20:15,679
fix the bug in the uh upstream package

553
00:20:14,080 --> 00:20:16,639
and yes absolutely i mean that's the

554
00:20:15,679 --> 00:20:18,559
goal is that

555
00:20:16,640 --> 00:20:20,000
packages don't need don't need the

556
00:20:18,559 --> 00:20:24,320
scanning and don't need clearly defined

557
00:20:20,000 --> 00:20:27,600
in the future a question in the back

558
00:20:24,320 --> 00:20:31,120
when somebody hits the curation

559
00:20:27,600 --> 00:20:31,120
is that human in review

560
00:20:32,400 --> 00:20:36,000
yeah so the question was what how does

561
00:20:33,760 --> 00:20:38,879
curation work uh

562
00:20:36,000 --> 00:20:38,880
i don't have it here

563
00:20:46,559 --> 00:20:50,639
so what happens is when you submit a

564
00:20:48,880 --> 00:20:53,760
curation it opens a pr

565
00:20:50,640 --> 00:20:55,120
into this repo curated data and once the

566
00:20:53,760 --> 00:20:58,000
pr is merged

567
00:20:55,120 --> 00:20:59,840
then clearly defined will go and um

568
00:20:58,000 --> 00:21:02,960
merge that into the the central

569
00:20:59,840 --> 00:21:04,399
database and if you see oh this might be

570
00:21:02,960 --> 00:21:07,440
we have some bots that do

571
00:21:04,400 --> 00:21:09,679
curations too um

572
00:21:07,440 --> 00:21:11,440
yeah but anyways you see there's there's

573
00:21:09,679 --> 00:21:12,640
curations on lots of packages that come

574
00:21:11,440 --> 00:21:15,039
through here

575
00:21:12,640 --> 00:21:16,880
a lot of our lawyers curate packages

576
00:21:15,039 --> 00:21:18,640
because

577
00:21:16,880 --> 00:21:20,400
you know we we find issues and we don't

578
00:21:18,640 --> 00:21:22,880
see that the correct information there

579
00:21:20,400 --> 00:21:23,520
but there's a curation community we have

580
00:21:22,880 --> 00:21:25,440
a

581
00:21:23,520 --> 00:21:27,840
so a little bit more about the the

582
00:21:25,440 --> 00:21:31,760
project um

583
00:21:27,840 --> 00:21:35,280
if you go to if you go to docs

584
00:21:31,760 --> 00:21:35,280
and then get involved

585
00:21:36,080 --> 00:21:39,678
you can see we have a discord and a lot

586
00:21:38,080 --> 00:21:42,720
of discussion happens there

587
00:21:39,679 --> 00:21:45,120
uh between lawyers about hey this this

588
00:21:42,720 --> 00:21:46,159
legal um situation is unclear how should

589
00:21:45,120 --> 00:21:47,918
we curate this

590
00:21:46,159 --> 00:21:50,960
and we see a lot of community discussion

591
00:21:47,919 --> 00:21:50,960
it's really great really cool

592
00:21:52,480 --> 00:21:57,440
okay oh yeah one more question

593
00:21:55,840 --> 00:21:59,360
no i'm sorry it was just it was just the

594
00:21:57,440 --> 00:22:01,679
idea of having a fun conversation with a

595
00:21:59,360 --> 00:22:01,678
lawyer

596
00:22:03,440 --> 00:22:07,600
yeah i i really like a lot of our

597
00:22:05,280 --> 00:22:09,678
compliance lawyers

598
00:22:07,600 --> 00:22:12,399
yeah yeah i just had a question about

599
00:22:09,679 --> 00:22:14,159
the scanner it supports um

600
00:22:12,400 --> 00:22:15,840
a package that has multiple licenses

601
00:22:14,159 --> 00:22:20,159
which i guess would be the case

602
00:22:15,840 --> 00:22:22,559
if you had all of your dependencies

603
00:22:20,159 --> 00:22:23,360
um people use multiple licenses for

604
00:22:22,559 --> 00:22:26,480
different reasons

605
00:22:23,360 --> 00:22:28,399
one is they put uh a

606
00:22:26,480 --> 00:22:29,520
sub component they just check it in if

607
00:22:28,400 --> 00:22:31,039
you have vendored and they would have

608
00:22:29,520 --> 00:22:32,240
this piece is under this

609
00:22:31,039 --> 00:22:34,320
license and this piece is under that

610
00:22:32,240 --> 00:22:37,280
license and the license would be an and

611
00:22:34,320 --> 00:22:38,080
uh other people put multiple licenses uh

612
00:22:37,280 --> 00:22:39,678
just

613
00:22:38,080 --> 00:22:41,760
because they feel it like it it usually

614
00:22:39,679 --> 00:22:43,280
is an ore they say i would like

615
00:22:41,760 --> 00:22:44,640
my you to be able to use my package

616
00:22:43,280 --> 00:22:46,960
under this or that it's up to your

617
00:22:44,640 --> 00:22:46,960
choice

618
00:22:49,760 --> 00:22:54,720
i mean sort of licensed conflicts do you

619
00:22:52,880 --> 00:22:56,159
find cases where one license actually

620
00:22:54,720 --> 00:22:57,840
has something in it that like

621
00:22:56,159 --> 00:22:59,760
contradicts something that's in another

622
00:22:57,840 --> 00:23:03,918
one and if so

623
00:22:59,760 --> 00:23:07,039
how do you manage that situation um so

624
00:23:03,919 --> 00:23:10,000
repeat the question the uh question is

625
00:23:07,039 --> 00:23:11,120
what do we do about license conflicts um

626
00:23:10,000 --> 00:23:13,280
clearly defined

627
00:23:11,120 --> 00:23:14,239
the project doesn't really give you you

628
00:23:13,280 --> 00:23:15,520
know legal advice

629
00:23:14,240 --> 00:23:17,600
it's mostly just trying to tell you what

630
00:23:15,520 --> 00:23:19,918
the licenses of the package is

631
00:23:17,600 --> 00:23:21,280
um and you and then in that case you

632
00:23:19,919 --> 00:23:24,400
know we have to know

633
00:23:21,280 --> 00:23:26,559
well gpl can't be with

634
00:23:24,400 --> 00:23:28,000
these other licenses that have different

635
00:23:26,559 --> 00:23:29,520
requirements because they you know you

636
00:23:28,000 --> 00:23:29,919
can't add requirements to things that

637
00:23:29,520 --> 00:23:33,039
are

638
00:23:29,919 --> 00:23:34,000
linked with gpl for example um yeah that

639
00:23:33,039 --> 00:23:36,640
that's

640
00:23:34,000 --> 00:23:38,240
that's not usually part of clearly find

641
00:23:36,640 --> 00:23:39,280
but if you have again if you have a

642
00:23:38,240 --> 00:23:41,840
system that's

643
00:23:39,280 --> 00:23:43,039
doing the detection and and and needs

644
00:23:41,840 --> 00:23:44,320
the license information

645
00:23:43,039 --> 00:23:45,919
you can get the license information

646
00:23:44,320 --> 00:23:47,520
clearly defined and then you can write

647
00:23:45,919 --> 00:23:51,440
the rules based on the policies of your

648
00:23:47,520 --> 00:23:55,120
organization and your legal guidance

649
00:23:51,440 --> 00:23:57,600
yes i'm doing some

650
00:23:55,120 --> 00:23:57,600
packaging

651
00:23:58,400 --> 00:24:04,880
and yeah as you might assume

652
00:24:01,679 --> 00:24:07,919
most of the work is researching

653
00:24:04,880 --> 00:24:11,120
license information so this

654
00:24:07,919 --> 00:24:12,720
project is clearly a benefit for us is

655
00:24:11,120 --> 00:24:15,760
there any

656
00:24:12,720 --> 00:24:18,960
kind kind of track kind of

657
00:24:15,760 --> 00:24:22,960
reasoning file is curated

658
00:24:18,960 --> 00:24:26,240
through the clearly defined system

659
00:24:22,960 --> 00:24:28,799
um where i can point to to tell somebody

660
00:24:26,240 --> 00:24:29,600
um who is interested in is this really

661
00:24:28,799 --> 00:24:33,840
this license

662
00:24:29,600 --> 00:24:33,840
for this file

663
00:24:37,520 --> 00:24:41,039
the transparency of the curation process

664
00:24:39,840 --> 00:24:43,360
so uh

665
00:24:41,039 --> 00:24:45,120
uh all the curations are pr's and and we

666
00:24:43,360 --> 00:24:46,639
have we do have the full git repository

667
00:24:45,120 --> 00:24:48,719
history of all curations that have

668
00:24:46,640 --> 00:24:52,000
happened on that package

669
00:24:48,720 --> 00:24:54,960
and again if if you go to the site

670
00:24:52,000 --> 00:24:56,320
for a particular package uh down here

671
00:24:54,960 --> 00:24:58,320
you can see the raw data and

672
00:24:56,320 --> 00:25:00,158
of course it's available with api the

673
00:24:58,320 --> 00:25:01,678
definition is the

674
00:25:00,159 --> 00:25:03,600
merge of the harvested data and the

675
00:25:01,679 --> 00:25:05,679
curations you can also

676
00:25:03,600 --> 00:25:07,199
directly query the curations and the

677
00:25:05,679 --> 00:25:09,200
harvested data that are the

678
00:25:07,200 --> 00:25:11,360
is the output of the tools and see what

679
00:25:09,200 --> 00:25:13,120
where where you're getting what from

680
00:25:11,360 --> 00:25:14,639
all right and that's time's up and

681
00:25:13,120 --> 00:25:23,840
thanks thanks all again i really

682
00:25:14,640 --> 00:25:23,840
appreciate coming here

