1
00:00:05,600 --> 00:00:09,440
all right everyone

2
00:00:07,440 --> 00:00:10,559
i'd like to introduce our next speaker

3
00:00:09,440 --> 00:00:13,120
axel

4
00:00:10,559 --> 00:00:14,799
axel is currently doing a phd in quantum

5
00:00:13,120 --> 00:00:17,279
information theory

6
00:00:14,799 --> 00:00:17,919
with a focus on quantum networks at

7
00:00:17,279 --> 00:00:20,560
q-tech

8
00:00:17,920 --> 00:00:21,840
in delft and that basically means that

9
00:00:20,560 --> 00:00:23,919
he's developing

10
00:00:21,840 --> 00:00:25,198
the tomorrow's or the future version of

11
00:00:23,920 --> 00:00:27,199
the internet

12
00:00:25,199 --> 00:00:29,039
which would be a quantum internet and

13
00:00:27,199 --> 00:00:30,560
he's an active developer on

14
00:00:29,039 --> 00:00:32,239
the quantum open source project

15
00:00:30,560 --> 00:00:32,960
simulacron which he's going to talk

16
00:00:32,238 --> 00:00:36,160
about

17
00:00:32,960 --> 00:00:38,480
but also q elk and cqc python

18
00:00:36,160 --> 00:00:40,718
and he gave a talk at last year's foster

19
00:00:38,480 --> 00:00:43,120
and today he's going to talk about

20
00:00:40,719 --> 00:00:45,280
this project simulacron a simulator for

21
00:00:43,120 --> 00:00:46,160
developing quantum internet software so

22
00:00:45,280 --> 00:00:48,170
please welcome

23
00:00:46,160 --> 00:00:52,879
axel

24
00:00:48,170 --> 00:00:54,879
[Applause]

25
00:00:52,879 --> 00:00:56,399
thank you it's uh it's really great to

26
00:00:54,879 --> 00:00:58,480
be back here

27
00:00:56,399 --> 00:00:59,440
as as mentioned i was here last last

28
00:00:58,480 --> 00:01:01,279
year

29
00:00:59,440 --> 00:01:03,199
and uh it's really nice to be back

30
00:01:01,280 --> 00:01:03,520
because last year i got really motivated

31
00:01:03,199 --> 00:01:05,360
on

32
00:01:03,520 --> 00:01:08,080
making simulacrum which are going to

33
00:01:05,360 --> 00:01:09,680
present better and easier to use

34
00:01:08,080 --> 00:01:11,600
so since then there's a lot of things

35
00:01:09,680 --> 00:01:12,320
that happened for example it's much more

36
00:01:11,600 --> 00:01:15,280
easy to

37
00:01:12,320 --> 00:01:17,119
install it's now on a package on

38
00:01:15,280 --> 00:01:18,960
pipeline

39
00:01:17,119 --> 00:01:20,159
and there's a command line interface so

40
00:01:18,960 --> 00:01:23,600
it's very easy to use

41
00:01:20,159 --> 00:01:23,600
which i will show later in this talk

42
00:01:23,680 --> 00:01:26,880
and maybe as mark mentioned one should

43
00:01:26,479 --> 00:01:29,280
not

44
00:01:26,880 --> 00:01:30,960
apologize in a talk but i should maybe

45
00:01:29,280 --> 00:01:32,159
apologize because this track is called

46
00:01:30,960 --> 00:01:34,399
quantum computing

47
00:01:32,159 --> 00:01:37,040
and i won't talk about quantum computing

48
00:01:34,400 --> 00:01:39,759
i'll talk about quantum networks

49
00:01:37,040 --> 00:01:41,680
and this is joint work with my professor

50
00:01:39,759 --> 00:01:46,240
stephanie vader

51
00:01:41,680 --> 00:01:50,240
is there some uh feedback it's okay

52
00:01:46,240 --> 00:01:53,520
maybe i shouldn't talk too loud okay

53
00:01:50,240 --> 00:01:56,320
uh yeah so let's get started so

54
00:01:53,520 --> 00:01:56,640
as mentioned i'm in in cutec in delft as

55
00:01:56,320 --> 00:01:59,839
my

56
00:01:56,640 --> 00:02:01,360
last year in my phd and we're also part

57
00:01:59,840 --> 00:02:02,079
of the quantum internet alliance in

58
00:02:01,360 --> 00:02:06,560
europe

59
00:02:02,079 --> 00:02:08,318
kia so

60
00:02:06,560 --> 00:02:10,479
in delft we're trying to build a quantum

61
00:02:08,318 --> 00:02:11,019
network and maybe just to get a feeling

62
00:02:10,479 --> 00:02:15,440
for

63
00:02:11,020 --> 00:02:19,599
[Music]

64
00:02:15,440 --> 00:02:19,599
it's very uh should i

65
00:02:20,800 --> 00:02:24,480
is it okay or should i i don't know if i

66
00:02:22,800 --> 00:02:26,080
should yeah

67
00:02:24,480 --> 00:02:27,599
uh just to get a feeling for who's in

68
00:02:26,080 --> 00:02:31,200
the audience who ever heard about

69
00:02:27,599 --> 00:02:31,200
the notion of a quantum network before

70
00:02:31,920 --> 00:02:35,518
a few okay that's excellent then i can

71
00:02:34,720 --> 00:02:36,720
maybe

72
00:02:35,519 --> 00:02:37,920
by the end of this talk we will have a

73
00:02:36,720 --> 00:02:38,959
lot more that knows about quantum

74
00:02:37,920 --> 00:02:41,679
networks

75
00:02:38,959 --> 00:02:43,519
uh so in a very simple picture a quantum

76
00:02:41,680 --> 00:02:45,840
network is essentially a set of

77
00:02:43,519 --> 00:02:46,800
small quantum computers connected by

78
00:02:45,840 --> 00:02:49,040
quantum channels

79
00:02:46,800 --> 00:02:50,640
so they can exchange qubits and they can

80
00:02:49,040 --> 00:02:52,480
uh generate entanglement between each

81
00:02:50,640 --> 00:02:54,319
other

82
00:02:52,480 --> 00:02:56,000
and at qtec we're not only thinking

83
00:02:54,319 --> 00:02:57,280
about this sort of theoretically but

84
00:02:56,000 --> 00:02:58,879
we're actually building

85
00:02:57,280 --> 00:03:01,280
such a network at the moment in the

86
00:02:58,879 --> 00:03:04,079
netherlands between four cities

87
00:03:01,280 --> 00:03:05,200
uh so between delft leiden the hague in

88
00:03:04,080 --> 00:03:07,120
amsterdam

89
00:03:05,200 --> 00:03:08,958
and we currently have essentially a link

90
00:03:07,120 --> 00:03:11,440
between delft and the hague where and

91
00:03:08,959 --> 00:03:13,599
we're starting to testing it now

92
00:03:11,440 --> 00:03:14,560
essentially a measurement point in in

93
00:03:13,599 --> 00:03:16,480
dry spike

94
00:03:14,560 --> 00:03:18,159
which is between delta and the hague and

95
00:03:16,480 --> 00:03:20,720
this is a distance of roughly

96
00:03:18,159 --> 00:03:21,599
25 kilometers and then we will extend

97
00:03:20,720 --> 00:03:23,519
this to also

98
00:03:21,599 --> 00:03:25,280
uh have a link to amsterdam which is

99
00:03:23,519 --> 00:03:28,959
roughly 50 kilometers

100
00:03:25,280 --> 00:03:30,959
and so this is coming up um

101
00:03:28,959 --> 00:03:32,159
so you might ask okay why do we want to

102
00:03:30,959 --> 00:03:34,480
build a quantum network

103
00:03:32,159 --> 00:03:35,920
why is this interesting and the reason

104
00:03:34,480 --> 00:03:36,560
of course is that we can do a lot of

105
00:03:35,920 --> 00:03:38,798
cool things

106
00:03:36,560 --> 00:03:40,720
if we have such a network that a lot of

107
00:03:38,799 --> 00:03:42,959
applications for a quantum network

108
00:03:40,720 --> 00:03:44,799
and is there anyone that for example

109
00:03:42,959 --> 00:03:46,319
knows one application that you can run

110
00:03:44,799 --> 00:03:46,879
on a quantum network which you can't do

111
00:03:46,319 --> 00:03:51,040
on a

112
00:03:46,879 --> 00:03:53,359
classical network perfect

113
00:03:51,040 --> 00:03:54,400
so the most famous is of course quantum

114
00:03:53,360 --> 00:03:56,239
key distribution

115
00:03:54,400 --> 00:03:58,400
which is very nice to have being able to

116
00:03:56,239 --> 00:04:00,640
generate key which you can use for

117
00:03:58,400 --> 00:04:02,000
secure communication but this is not the

118
00:04:00,640 --> 00:04:02,559
only one there's a lot of other things

119
00:04:02,000 --> 00:04:04,959
that you can

120
00:04:02,560 --> 00:04:06,560
resemble better uh have better

121
00:04:04,959 --> 00:04:08,000
synchronization of clocks

122
00:04:06,560 --> 00:04:10,319
you can extend the baseline of

123
00:04:08,000 --> 00:04:11,280
telescopes you can do blind quantum

124
00:04:10,319 --> 00:04:13,200
computation

125
00:04:11,280 --> 00:04:14,799
and a lot more things like secret

126
00:04:13,200 --> 00:04:18,238
sharing anonymous transfer

127
00:04:14,799 --> 00:04:20,000
and so on and for

128
00:04:18,238 --> 00:04:23,120
essentially all of these things what we

129
00:04:20,000 --> 00:04:25,199
need is entanglements

130
00:04:23,120 --> 00:04:27,360
and this is basically the fundamental

131
00:04:25,199 --> 00:04:30,160
operation that quantum networks

132
00:04:27,360 --> 00:04:31,680
enables you to do so maybe in in

133
00:04:30,160 --> 00:04:33,840
comparison to a

134
00:04:31,680 --> 00:04:35,759
classical network where essentially the

135
00:04:33,840 --> 00:04:37,840
the fundamental operation is to

136
00:04:35,759 --> 00:04:39,280
send the classical message from one node

137
00:04:37,840 --> 00:04:41,198
to another

138
00:04:39,280 --> 00:04:42,559
you might then think that okay in a

139
00:04:41,199 --> 00:04:44,880
quantum network the fundamental

140
00:04:42,560 --> 00:04:46,880
fundamental operation is to send a qubit

141
00:04:44,880 --> 00:04:48,560
from one alternate to another

142
00:04:46,880 --> 00:04:50,639
but in our view this is not really the

143
00:04:48,560 --> 00:04:51,520
case so here the fundamental operation

144
00:04:50,639 --> 00:04:54,000
is to

145
00:04:51,520 --> 00:04:54,719
generate entanglements and the reason

146
00:04:54,000 --> 00:04:57,120
being that

147
00:04:54,720 --> 00:04:58,479
you can use these entanglements to send

148
00:04:57,120 --> 00:05:01,520
qubits

149
00:04:58,479 --> 00:05:01,520
using teleportation

150
00:05:02,479 --> 00:05:06,080
now we don't want to just build a

151
00:05:05,039 --> 00:05:08,639
quantum network

152
00:05:06,080 --> 00:05:10,400
a small quantum network but we want to

153
00:05:08,639 --> 00:05:12,800
go further so we want to have a

154
00:05:10,400 --> 00:05:14,239
scalable design and be able to have

155
00:05:12,800 --> 00:05:15,600
essentially a quantum internet in the

156
00:05:14,240 --> 00:05:18,240
end

157
00:05:15,600 --> 00:05:20,000
and furthermore we don't want this to be

158
00:05:18,240 --> 00:05:22,400
essentially a large

159
00:05:20,000 --> 00:05:23,440
hard-coded experiment but this should be

160
00:05:22,400 --> 00:05:26,479
a universal

161
00:05:23,440 --> 00:05:27,840
universable programmable network

162
00:05:26,479 --> 00:05:29,520
where you can run any application you

163
00:05:27,840 --> 00:05:32,000
want and it's more

164
00:05:29,520 --> 00:05:35,359
it's essentially a service provided for

165
00:05:32,000 --> 00:05:37,280
anyone that wants to run an application

166
00:05:35,360 --> 00:05:39,199
but for this we need a lot of things to

167
00:05:37,280 --> 00:05:41,280
help you abstract

168
00:05:39,199 --> 00:05:43,680
for example the hardware way so you

169
00:05:41,280 --> 00:05:46,080
don't you shouldn't have to think about

170
00:05:43,680 --> 00:05:47,520
how do we encode qubits how do we

171
00:05:46,080 --> 00:05:49,520
generate entanglements

172
00:05:47,520 --> 00:05:50,960
all these things so one thing that we

173
00:05:49,520 --> 00:05:53,280
need is

174
00:05:50,960 --> 00:05:55,680
for example a quantum network stack

175
00:05:53,280 --> 00:05:57,039
similarly to for example tcp in the

176
00:05:55,680 --> 00:05:59,280
classical network

177
00:05:57,039 --> 00:06:00,719
that abstracts certain functionalities

178
00:05:59,280 --> 00:06:02,638
away for you

179
00:06:00,720 --> 00:06:04,000
and we have a proposal for such a

180
00:06:02,639 --> 00:06:06,319
quantum network stack

181
00:06:04,000 --> 00:06:07,360
and also protocols for a so a link layer

182
00:06:06,319 --> 00:06:09,360
protocol

183
00:06:07,360 --> 00:06:11,039
and a network layer protocol network

184
00:06:09,360 --> 00:06:13,759
layer protocol

185
00:06:11,039 --> 00:06:15,039
that generates entanglements between in

186
00:06:13,759 --> 00:06:17,360
the link layer protocol between

187
00:06:15,039 --> 00:06:19,120
nodes that are directly connected and

188
00:06:17,360 --> 00:06:20,479
the network layer protocol

189
00:06:19,120 --> 00:06:22,160
generates entanglements between nodes

190
00:06:20,479 --> 00:06:25,199
that are not directly connected

191
00:06:22,160 --> 00:06:26,639
in the network now

192
00:06:25,199 --> 00:06:28,319
a network stack is not the only thing

193
00:06:26,639 --> 00:06:29,520
you need that connects

194
00:06:28,319 --> 00:06:31,280
essentially an application and a

195
00:06:29,520 --> 00:06:32,560
hardware because you also want to do for

196
00:06:31,280 --> 00:06:35,280
example gates

197
00:06:32,560 --> 00:06:36,160
local gates on your nodes and for this

198
00:06:35,280 --> 00:06:38,318
we need

199
00:06:36,160 --> 00:06:40,560
essentially a full-fledged operating

200
00:06:38,319 --> 00:06:43,039
system between an application

201
00:06:40,560 --> 00:06:45,280
and hardware that enables you to do

202
00:06:43,039 --> 00:06:47,280
generate entanglements to local gates

203
00:06:45,280 --> 00:06:50,318
do scheduling of applications to memory

204
00:06:47,280 --> 00:06:52,159
management etc etc

205
00:06:50,319 --> 00:06:55,039
and what this test enables you to do is

206
00:06:52,160 --> 00:06:56,960
to you as a programmer that wants to

207
00:06:55,039 --> 00:06:58,240
write some application you don't need to

208
00:06:56,960 --> 00:06:59,520
think about what is actually the

209
00:06:58,240 --> 00:07:02,080
hardware in this network

210
00:06:59,520 --> 00:07:03,840
and how is it physically implemented so

211
00:07:02,080 --> 00:07:06,159
the hardware might be

212
00:07:03,840 --> 00:07:08,318
nitrogen vacancies in diamonds or ion

213
00:07:06,160 --> 00:07:09,599
traps or atomic ensembles

214
00:07:08,319 --> 00:07:12,240
or whatever you don't you don't need to

215
00:07:09,599 --> 00:07:12,240
know about this

216
00:07:12,560 --> 00:07:19,199
and in a more expanded picture

217
00:07:16,080 --> 00:07:21,680
essentially we envisioned that the we

218
00:07:19,199 --> 00:07:23,840
call it the qnote os or the quantum node

219
00:07:21,680 --> 00:07:25,680
operating system essentially has

220
00:07:23,840 --> 00:07:27,919
different you could call it drivers

221
00:07:25,680 --> 00:07:29,759
for different hardware so it has a

222
00:07:27,919 --> 00:07:31,198
hardware abstraction layer for for

223
00:07:29,759 --> 00:07:34,560
example these envy centers

224
00:07:31,199 --> 00:07:36,639
or iron chips which is specific to that

225
00:07:34,560 --> 00:07:39,520
order

226
00:07:36,639 --> 00:07:41,039
so that's very nice but then you might

227
00:07:39,520 --> 00:07:42,159
think okay i want to write one of these

228
00:07:41,039 --> 00:07:44,479
applications

229
00:07:42,160 --> 00:07:46,400
how do i then communicate with this

230
00:07:44,479 --> 00:07:49,280
operating system

231
00:07:46,400 --> 00:07:50,159
and this is where cqc comes in and this

232
00:07:49,280 --> 00:07:52,318
is an

233
00:07:50,160 --> 00:07:54,879
interface that we defined it stands for

234
00:07:52,319 --> 00:07:58,479
the classical quantum combiner

235
00:07:54,879 --> 00:08:00,960
cqc and this specifies essentially what

236
00:07:58,479 --> 00:08:03,840
instructions should an application send

237
00:08:00,960 --> 00:08:06,000
to the qrs to specify what it wants to

238
00:08:03,840 --> 00:08:06,000
do

239
00:08:06,560 --> 00:08:13,039
and our goal is not only to have this in

240
00:08:10,400 --> 00:08:14,159
an abstract world in simulation but the

241
00:08:13,039 --> 00:08:17,520
network we're building

242
00:08:14,160 --> 00:08:18,720
should uh be compatible with this cqc

243
00:08:17,520 --> 00:08:22,080
interface

244
00:08:18,720 --> 00:08:24,240
so you as a user perhaps

245
00:08:22,080 --> 00:08:26,240
could write an application on on on your

246
00:08:24,240 --> 00:08:27,360
own and then communicate with this

247
00:08:26,240 --> 00:08:30,240
network

248
00:08:27,360 --> 00:08:30,240
using cqc

249
00:08:32,559 --> 00:08:37,598
cqc is essentially an instruction set

250
00:08:36,000 --> 00:08:39,440
we defined a defines a set of

251
00:08:37,599 --> 00:08:42,000
instructions

252
00:08:39,440 --> 00:08:43,760
in in some binary formats so it's not

253
00:08:42,000 --> 00:08:47,040
really meant to be used

254
00:08:43,760 --> 00:08:49,120
directly but we written

255
00:08:47,040 --> 00:08:50,800
essentially libraries which enables you

256
00:08:49,120 --> 00:08:54,000
to write an application

257
00:08:50,800 --> 00:08:54,640
that's in a more easy way that

258
00:08:54,000 --> 00:08:58,560
essentially

259
00:08:54,640 --> 00:09:01,760
then creates these cqc instructions

260
00:08:58,560 --> 00:09:04,399
for you so for example we have one

261
00:09:01,760 --> 00:09:05,680
which is maybe the most easy to use one

262
00:09:04,399 --> 00:09:07,360
library in python

263
00:09:05,680 --> 00:09:10,399
where you can write your applications

264
00:09:07,360 --> 00:09:13,200
they send out cqc instructions

265
00:09:10,399 --> 00:09:14,800
but cqc is essentially it's both

266
00:09:13,200 --> 00:09:16,399
hardware independent but it's also

267
00:09:14,800 --> 00:09:20,160
language independent

268
00:09:16,399 --> 00:09:24,080
so we also have oh actually maybe

269
00:09:20,160 --> 00:09:27,360
it's a wrong order here so

270
00:09:24,080 --> 00:09:29,120
um you might wonder okay i want to write

271
00:09:27,360 --> 00:09:31,440
one of these applications today

272
00:09:29,120 --> 00:09:33,279
but we don't have this network yet and

273
00:09:31,440 --> 00:09:36,399
this is exactly where simulacrum's

274
00:09:33,279 --> 00:09:37,839
comes in so it's a replacement

275
00:09:36,399 --> 00:09:41,120
for now until we have the actual

276
00:09:37,839 --> 00:09:46,160
hardware to write these applications

277
00:09:41,120 --> 00:09:47,839
and it can understand this cpc interface

278
00:09:46,160 --> 00:09:50,560
so you can already now today write your

279
00:09:47,839 --> 00:09:54,240
application using this python library

280
00:09:50,560 --> 00:09:57,119
it sends out cqc instructions and

281
00:09:54,240 --> 00:09:59,839
sends these to simulacrum but we also

282
00:09:57,120 --> 00:10:03,279
have libraries for example in c

283
00:09:59,839 --> 00:10:04,160
in rust and what's nice with this is

284
00:10:03,279 --> 00:10:06,160
that we can have

285
00:10:04,160 --> 00:10:07,279
essentially a community so people can

286
00:10:06,160 --> 00:10:10,480
develop their own libraries

287
00:10:07,279 --> 00:10:12,160
and possible other languages so there's

288
00:10:10,480 --> 00:10:13,279
also now actually an implementation in

289
00:10:12,160 --> 00:10:16,480
java

290
00:10:13,279 --> 00:10:19,200
from yohann vos in gluon hq

291
00:10:16,480 --> 00:10:20,640
which is a an open pull request at the

292
00:10:19,200 --> 00:10:23,600
moment for their simulator

293
00:10:20,640 --> 00:10:24,959
uh strange um there was also an

294
00:10:23,600 --> 00:10:26,959
implementation in go

295
00:10:24,959 --> 00:10:28,560
during one of our hackathons we

296
00:10:26,959 --> 00:10:30,560
organized

297
00:10:28,560 --> 00:10:32,399
i'm not sure it was fully finished and i

298
00:10:30,560 --> 00:10:35,839
don't know exact status of this

299
00:10:32,399 --> 00:10:37,360
but i think it's somewhere out there but

300
00:10:35,839 --> 00:10:40,000
if you have another favorite language

301
00:10:37,360 --> 00:10:43,040
and you want to write your your library

302
00:10:40,000 --> 00:10:46,480
that's that's really great

303
00:10:43,040 --> 00:10:49,040
so not only can cpc

304
00:10:46,480 --> 00:10:50,160
talk to simolacrum but it can also talk

305
00:10:49,040 --> 00:10:53,680
to other simulators

306
00:10:50,160 --> 00:10:55,360
which understands cqc so at q-tech we

307
00:10:53,680 --> 00:10:57,279
also have a different

308
00:10:55,360 --> 00:10:58,800
simulator which is called netscript

309
00:10:57,279 --> 00:11:00,959
which is actually a discrete event

310
00:10:58,800 --> 00:11:02,719
simulator for quantum networks

311
00:11:00,959 --> 00:11:04,160
and maybe some of you heard about for

312
00:11:02,720 --> 00:11:06,720
example ns3

313
00:11:04,160 --> 00:11:08,560
for classical networks which also does a

314
00:11:06,720 --> 00:11:10,640
discrete event simulation

315
00:11:08,560 --> 00:11:11,760
and this is the world's first discrete

316
00:11:10,640 --> 00:11:13,680
event simulator for

317
00:11:11,760 --> 00:11:15,040
quantum networks and it's hopefully

318
00:11:13,680 --> 00:11:17,040
going to be released

319
00:11:15,040 --> 00:11:19,279
in the coming months and is currently in

320
00:11:17,040 --> 00:11:21,439
beta

321
00:11:19,279 --> 00:11:22,880
but of course as i mentioned in the

322
00:11:21,440 --> 00:11:25,360
future when we have hardware

323
00:11:22,880 --> 00:11:27,680
you should also be able to communicate

324
00:11:25,360 --> 00:11:29,839
with the hardware using cqc

325
00:11:27,680 --> 00:11:32,399
so you can already today write your

326
00:11:29,839 --> 00:11:35,760
application in one of these languages

327
00:11:32,399 --> 00:11:37,600
and without much change

328
00:11:35,760 --> 00:11:40,839
when we have the hardware you can then

329
00:11:37,600 --> 00:11:44,160
run your application on this hardware

330
00:11:40,839 --> 00:11:46,079
yeah so i'm saying without much change

331
00:11:44,160 --> 00:11:48,640
because we have not maybe found the

332
00:11:46,079 --> 00:11:50,719
perfect uh

333
00:11:48,640 --> 00:11:52,720
version of cqc it's currently in version

334
00:11:50,720 --> 00:11:54,160
two we're working on version three at

335
00:11:52,720 --> 00:11:56,959
the moment

336
00:11:54,160 --> 00:11:58,639
which has some more improvement in for

337
00:11:56,959 --> 00:12:01,680
example memory management

338
00:11:58,639 --> 00:12:02,399
and how you can maybe do uh classical

339
00:12:01,680 --> 00:12:06,000
logic

340
00:12:02,399 --> 00:12:06,000
in your in your program

341
00:12:07,519 --> 00:12:12,880
so maybe more about simulacrum so

342
00:12:11,120 --> 00:12:14,399
what's cool about simulacrum is not only

343
00:12:12,880 --> 00:12:15,680
that it understands cqc

344
00:12:14,399 --> 00:12:18,000
but it's actually a distributed

345
00:12:15,680 --> 00:12:18,880
simulation so i can install it on my

346
00:12:18,000 --> 00:12:20,639
laptop

347
00:12:18,880 --> 00:12:22,320
you can install it on your laptops and

348
00:12:20,639 --> 00:12:24,240
we can together simulate a quantum

349
00:12:22,320 --> 00:12:26,480
network

350
00:12:24,240 --> 00:12:28,480
using classical communication in the

351
00:12:26,480 --> 00:12:30,240
background

352
00:12:28,480 --> 00:12:32,079
so we can set up a network like this on

353
00:12:30,240 --> 00:12:35,200
maybe three computers

354
00:12:32,079 --> 00:12:37,760
we all run our own application

355
00:12:35,200 --> 00:12:40,320
that specify certain gates or generates

356
00:12:37,760 --> 00:12:40,319
entitlements

357
00:12:40,480 --> 00:12:47,279
and then we can simulate this together

358
00:12:43,760 --> 00:12:48,560
so you might then wonder okay

359
00:12:47,279 --> 00:12:50,079
we have a quantum network so there

360
00:12:48,560 --> 00:12:50,880
should be entanglements between our

361
00:12:50,079 --> 00:12:53,760
laptops

362
00:12:50,880 --> 00:12:55,120
but these are classical computers so how

363
00:12:53,760 --> 00:12:56,480
can we have entanglement in social

364
00:12:55,120 --> 00:12:57,920
network

365
00:12:56,480 --> 00:12:59,920
and what we essentially do is we

366
00:12:57,920 --> 00:13:02,240
simulate this with classical

367
00:12:59,920 --> 00:13:04,839
communication between our computers

368
00:13:02,240 --> 00:13:06,000
that essentially simulates the

369
00:13:04,839 --> 00:13:09,279
entanglement

370
00:13:06,000 --> 00:13:11,200
and this works in a in a way such that

371
00:13:09,279 --> 00:13:13,680
any qubits that are entangled will be

372
00:13:11,200 --> 00:13:16,800
simulated on one of our computers

373
00:13:13,680 --> 00:13:16,800
we might not know which one

374
00:13:16,959 --> 00:13:20,638
but if i have a attribute on the

375
00:13:19,040 --> 00:13:22,160
simulator on my laptop

376
00:13:20,639 --> 00:13:24,079
you have compute qubits simulator on

377
00:13:22,160 --> 00:13:25,680
your laptop and they get entangled

378
00:13:24,079 --> 00:13:28,638
one of them will move to either mine or

379
00:13:25,680 --> 00:13:29,920
to yours and stay in a combined state

380
00:13:28,639 --> 00:13:31,760
and this is where the class

381
00:13:29,920 --> 00:13:33,360
communication come in

382
00:13:31,760 --> 00:13:35,920
i won't go too much into the detail of

383
00:13:33,360 --> 00:13:38,480
this but if you're interested

384
00:13:35,920 --> 00:13:40,639
you can look more in the documentation

385
00:13:38,480 --> 00:13:42,480
where we essentially have the notion of

386
00:13:40,639 --> 00:13:45,120
virtual qubits which are essentially

387
00:13:42,480 --> 00:13:47,279
pointers to the actual simulated qubits

388
00:13:45,120 --> 00:13:49,839
which might live on another node

389
00:13:47,279 --> 00:13:49,839
in the network

390
00:13:52,720 --> 00:13:57,680
and we try to develop this in a kind of

391
00:13:54,800 --> 00:13:59,839
modular way so

392
00:13:57,680 --> 00:14:01,359
the way we represent qubits are kind of

393
00:13:59,839 --> 00:14:02,480
detached from this distributed

394
00:14:01,360 --> 00:14:04,480
simulation

395
00:14:02,480 --> 00:14:06,639
so we have different implementations of

396
00:14:04,480 --> 00:14:10,560
how we actually represent these qubits

397
00:14:06,639 --> 00:14:13,680
so the first back-end we used was

398
00:14:10,560 --> 00:14:15,680
using full density matrices actually

399
00:14:13,680 --> 00:14:16,959
using q-tip

400
00:14:15,680 --> 00:14:18,800
and if you're more interested in q-tip

401
00:14:16,959 --> 00:14:19,680
there will be a talk i think the next or

402
00:14:18,800 --> 00:14:23,040
the one after by

403
00:14:19,680 --> 00:14:26,479
by boxy we also have

404
00:14:23,040 --> 00:14:27,120
back-ends essentially using kits or

405
00:14:26,480 --> 00:14:29,600
vectors

406
00:14:27,120 --> 00:14:30,720
which is using project q and we have our

407
00:14:29,600 --> 00:14:33,519
own version of

408
00:14:30,720 --> 00:14:34,160
stabilizer formalism which is of course

409
00:14:33,519 --> 00:14:36,590
you can

410
00:14:34,160 --> 00:14:38,719
simulate efficiently

411
00:14:36,590 --> 00:14:42,160
[Music]

412
00:14:38,720 --> 00:14:45,360
in the number of qubits and we can see

413
00:14:42,160 --> 00:14:46,800
kind of see the the implication of

414
00:14:45,360 --> 00:14:49,040
choosing which formalism you want to

415
00:14:46,800 --> 00:14:51,279
simulate by looking at this graph

416
00:14:49,040 --> 00:14:52,079
so here's the you generated your set

417
00:14:51,279 --> 00:14:53,680
states

418
00:14:52,079 --> 00:14:55,199
which is kind of a large entangled state

419
00:14:53,680 --> 00:14:57,519
then you measure it

420
00:14:55,199 --> 00:14:58,800
and this on the y axis we have how much

421
00:14:57,519 --> 00:15:02,000
time it takes

422
00:14:58,800 --> 00:15:03,519
and um you can clearly see that both

423
00:15:02,000 --> 00:15:04,560
density matrices and kits have an

424
00:15:03,519 --> 00:15:07,440
exponential scaling

425
00:15:04,560 --> 00:15:09,199
the number of qubits while it's maybe

426
00:15:07,440 --> 00:15:11,920
hard to see it looks kind of flat

427
00:15:09,199 --> 00:15:13,519
the stabilizing formula is essentially

428
00:15:11,920 --> 00:15:16,000
cubic in the number of

429
00:15:13,519 --> 00:15:17,120
qubits and i should say this is not a

430
00:15:16,000 --> 00:15:19,279
comparison of

431
00:15:17,120 --> 00:15:22,880
different simulators it's purely about

432
00:15:19,279 --> 00:15:26,720
which formalism you you use

433
00:15:22,880 --> 00:15:27,360
um yes okay so i thought that would give

434
00:15:26,720 --> 00:15:29,759
a demo

435
00:15:27,360 --> 00:15:31,199
uh this is maybe uh let's see if this

436
00:15:29,759 --> 00:15:33,759
was a stupid idea or not

437
00:15:31,199 --> 00:15:34,560
if everything goes wrong then then at

438
00:15:33,759 --> 00:15:38,959
least i tried

439
00:15:34,560 --> 00:15:42,399
but okay so let me see if i can bring up

440
00:15:38,959 --> 00:15:42,399
my terminal

441
00:15:53,360 --> 00:16:01,680
okay um is this visible in the back

442
00:15:58,480 --> 00:16:03,759
let me know uh otherwise so

443
00:16:01,680 --> 00:16:05,439
to get started i want to show you all

444
00:16:03,759 --> 00:16:06,959
everything from scratch so i'll i'll

445
00:16:05,440 --> 00:16:11,279
make a

446
00:16:06,959 --> 00:16:11,279
a fresh virtual environment in python

447
00:16:11,600 --> 00:16:17,279
and just as a

448
00:16:15,759 --> 00:16:19,199
unrelated side notes if you ever

449
00:16:17,279 --> 00:16:20,560
struggle with virtual environments in

450
00:16:19,199 --> 00:16:23,120
python

451
00:16:20,560 --> 00:16:24,800
check out my my tool which i call manvin

452
00:16:23,120 --> 00:16:28,000
which is very nice to create

453
00:16:24,800 --> 00:16:30,079
uh temporary virtual environments

454
00:16:28,000 --> 00:16:31,040
but first we we make a temporary virtual

455
00:16:30,079 --> 00:16:34,079
environment

456
00:16:31,040 --> 00:16:36,880
so now we're completely fresh we don't

457
00:16:34,079 --> 00:16:39,199
have essentially

458
00:16:36,880 --> 00:16:40,320
many packages installed here so this is

459
00:16:39,199 --> 00:16:44,319
how you get started

460
00:16:40,320 --> 00:16:47,680
and let's now pip install simulacrum

461
00:16:44,320 --> 00:16:50,639
so it will pull down some packages

462
00:16:47,680 --> 00:16:51,599
and one of these packages it actually

463
00:16:50,639 --> 00:16:55,120
uses this

464
00:16:51,600 --> 00:16:57,680
cqc which is this interface

465
00:16:55,120 --> 00:16:59,040
that we can communicate with simulacrum

466
00:16:57,680 --> 00:17:02,560
so now we have simulacron

467
00:16:59,040 --> 00:17:05,678
let's clear this and we can then use

468
00:17:02,560 --> 00:17:08,480
our this command line tool

469
00:17:05,679 --> 00:17:10,160
so you can just run simulacrum it has a

470
00:17:08,480 --> 00:17:13,280
few commands

471
00:17:10,160 --> 00:17:14,640
it's quite simple what we can do for

472
00:17:13,280 --> 00:17:17,039
example is to

473
00:17:14,640 --> 00:17:18,959
look at settings so there are a few

474
00:17:17,039 --> 00:17:22,319
different settings for example

475
00:17:18,959 --> 00:17:23,919
how many qubits should each node have

476
00:17:22,319 --> 00:17:26,639
for example which back-end do we want to

477
00:17:23,919 --> 00:17:32,000
use so by by default

478
00:17:26,640 --> 00:17:35,120
the back-end is stabilizing formalism um

479
00:17:32,000 --> 00:17:37,760
but we can see for example um

480
00:17:35,120 --> 00:17:38,639
we can choose uh stabilizer formalism

481
00:17:37,760 --> 00:17:42,559
party q

482
00:17:38,640 --> 00:17:46,799
or or q-tip um

483
00:17:42,559 --> 00:17:50,399
let's see if i'm doing on time

484
00:17:46,799 --> 00:17:53,918
yeah okay so another thing we can

485
00:17:50,400 --> 00:17:57,760
we can see is we can specify

486
00:17:53,919 --> 00:18:00,240
a network configuration file

487
00:17:57,760 --> 00:18:00,799
that describes how does the network we

488
00:18:00,240 --> 00:18:03,360
want to

489
00:18:00,799 --> 00:18:04,720
simulate look like essentially what

490
00:18:03,360 --> 00:18:06,320
what's the

491
00:18:04,720 --> 00:18:07,760
addresses of the nodes what's the

492
00:18:06,320 --> 00:18:10,159
topology

493
00:18:07,760 --> 00:18:11,360
um and i can show you an example of how

494
00:18:10,160 --> 00:18:15,440
this looks like

495
00:18:11,360 --> 00:18:17,600
it's basically just a

496
00:18:15,440 --> 00:18:19,280
a json file so let me go to the

497
00:18:17,600 --> 00:18:22,159
documentation

498
00:18:19,280 --> 00:18:22,160
let me zoom in a bit

499
00:18:24,880 --> 00:18:29,280
so here is how you can configure a

500
00:18:27,679 --> 00:18:32,480
simulated network

501
00:18:29,280 --> 00:18:32,480
uh let me go down to

502
00:18:32,559 --> 00:18:37,200
here so here's an example of basically

503
00:18:34,799 --> 00:18:39,440
you write a json file that specifies

504
00:18:37,200 --> 00:18:40,480
essentially your the ip address and port

505
00:18:39,440 --> 00:18:42,720
numbers of your

506
00:18:40,480 --> 00:18:44,799
simulated nodes since they can be on on

507
00:18:42,720 --> 00:18:48,720
different computers

508
00:18:44,799 --> 00:18:50,879
and you can also then specify a topology

509
00:18:48,720 --> 00:18:52,640
of your network if you don't give it

510
00:18:50,880 --> 00:18:55,520
anything by default it's

511
00:18:52,640 --> 00:18:57,440
fully connected but otherwise you can

512
00:18:55,520 --> 00:18:59,760
specify essentially a

513
00:18:57,440 --> 00:19:00,960
adjacency matrix in this case alice is

514
00:18:59,760 --> 00:19:03,039
connected to bob

515
00:19:00,960 --> 00:19:05,520
bob is connected to alice and charlie

516
00:19:03,039 --> 00:19:05,520
and so on

517
00:19:06,799 --> 00:19:11,840
but that's how you define your

518
00:19:09,039 --> 00:19:14,320
simulation so let's now get started so

519
00:19:11,840 --> 00:19:15,360
by default we have we will have uh five

520
00:19:14,320 --> 00:19:18,960
nodes

521
00:19:15,360 --> 00:19:18,959
uh you can see this by

522
00:19:19,440 --> 00:19:22,720
doing nodes and they get the ones the

523
00:19:21,120 --> 00:19:24,799
nodes in the network so we have

524
00:19:22,720 --> 00:19:26,320
ali bob charlie david and eve fully

525
00:19:24,799 --> 00:19:29,760
connected

526
00:19:26,320 --> 00:19:32,639
and now let's start simulacrum so

527
00:19:29,760 --> 00:19:33,919
it asks you if you want to replace your

528
00:19:32,640 --> 00:19:36,799
configuration file

529
00:19:33,919 --> 00:19:37,600
you can force to do this it's not

530
00:19:36,799 --> 00:19:39,360
relevant

531
00:19:37,600 --> 00:19:41,120
so now i seem like when you started so

532
00:19:39,360 --> 00:19:43,039
it's running in the background

533
00:19:41,120 --> 00:19:44,159
and maybe let me remind you of this

534
00:19:43,039 --> 00:19:47,520
picture

535
00:19:44,160 --> 00:19:50,720
um sorry i should

536
00:19:47,520 --> 00:19:50,720
make this big screen

537
00:19:51,280 --> 00:19:55,200
this picture that we have here so

538
00:19:53,039 --> 00:19:56,080
simulacrum acts as a as the back end

539
00:19:55,200 --> 00:19:57,679
that's the server

540
00:19:56,080 --> 00:19:59,840
so it's running in the background and we

541
00:19:57,679 --> 00:20:02,480
can now now write our application

542
00:19:59,840 --> 00:20:03,760
let's actually send these ctc messages

543
00:20:02,480 --> 00:20:06,480
to the simulation

544
00:20:03,760 --> 00:20:07,200
in this case actually just using a tcp

545
00:20:06,480 --> 00:20:10,159
socket

546
00:20:07,200 --> 00:20:10,799
and sending these messages so what we

547
00:20:10,159 --> 00:20:13,840
can now do

548
00:20:10,799 --> 00:20:15,280
is to just start python in interactive

549
00:20:13,840 --> 00:20:19,199
mode

550
00:20:15,280 --> 00:20:20,500
and we can import from cqc

551
00:20:19,200 --> 00:20:23,520
a cqc

552
00:20:20,500 --> 00:20:27,039
[Music]

553
00:20:23,520 --> 00:20:29,760
connection and a qubit

554
00:20:27,039 --> 00:20:30,559
right so the uni c connection enables us

555
00:20:29,760 --> 00:20:33,280
to connect

556
00:20:30,559 --> 00:20:34,480
to simulacrum and in this case we can

557
00:20:33,280 --> 00:20:37,840
for example be

558
00:20:34,480 --> 00:20:40,320
say we're now the node alice so we can

559
00:20:37,840 --> 00:20:43,600
start one of these

560
00:20:40,320 --> 00:20:44,559
c connection and we're alice and i don't

561
00:20:43,600 --> 00:20:47,360
want to clutter my

562
00:20:44,559 --> 00:20:50,158
screen with a lot of debugging message

563
00:20:47,360 --> 00:20:53,520
this so i set the log level

564
00:20:50,159 --> 00:20:54,799
to essentially only errors so now we

565
00:20:53,520 --> 00:20:57,840
have a connection

566
00:20:54,799 --> 00:20:59,039
and now we want to create a qubit so we

567
00:20:57,840 --> 00:21:01,678
can create a qubit by

568
00:20:59,039 --> 00:21:02,960
essentially giving it the connection and

569
00:21:01,679 --> 00:21:04,480
the reason for this is that

570
00:21:02,960 --> 00:21:06,400
whenever we then do an operation on

571
00:21:04,480 --> 00:21:08,000
these qubits it will

572
00:21:06,400 --> 00:21:10,159
use the connection to send down the

573
00:21:08,000 --> 00:21:12,640
instruction to the hardware

574
00:21:10,159 --> 00:21:14,320
or in this case the simulation to do the

575
00:21:12,640 --> 00:21:17,360
corresponding operation that we

576
00:21:14,320 --> 00:21:19,678
we gave it so now we have the qubits we

577
00:21:17,360 --> 00:21:23,039
can for example do a hadamard

578
00:21:19,679 --> 00:21:24,080
um and as a as i mentioned now a message

579
00:21:23,039 --> 00:21:26,400
is sent down to the

580
00:21:24,080 --> 00:21:28,000
to the back end do a hadamard a hadamard

581
00:21:26,400 --> 00:21:31,840
is done and we get a

582
00:21:28,000 --> 00:21:31,840
reply back okay it's finished

583
00:21:32,559 --> 00:21:40,000
how am i on time how much time good

584
00:21:36,320 --> 00:21:41,120
so i think it's been 20 minutes okay

585
00:21:40,000 --> 00:21:44,159
perfect

586
00:21:41,120 --> 00:21:45,760
so this is one node but the point is

587
00:21:44,159 --> 00:21:48,960
that we now have a network right so

588
00:21:45,760 --> 00:21:52,240
let's let's let's have another node so

589
00:21:48,960 --> 00:21:53,440
i open up a new uh pane here but you

590
00:21:52,240 --> 00:21:56,720
could also think about

591
00:21:53,440 --> 00:21:57,840
that let's think that this new

592
00:21:56,720 --> 00:21:59,840
window is actually on a different

593
00:21:57,840 --> 00:22:02,240
computer it's a completely different

594
00:21:59,840 --> 00:22:02,240
process

595
00:22:02,320 --> 00:22:09,360
and since we made this

596
00:22:05,760 --> 00:22:11,440
the python environment we should also

597
00:22:09,360 --> 00:22:14,639
activate it here so i activated

598
00:22:11,440 --> 00:22:16,000
the last activated environment temporary

599
00:22:14,640 --> 00:22:18,000
environment

600
00:22:16,000 --> 00:22:20,159
and we can now open python and then in

601
00:22:18,000 --> 00:22:25,520
the same

602
00:22:20,159 --> 00:22:25,520
import this cpc connection and the qubit

603
00:22:27,760 --> 00:22:33,440
imports cool so

604
00:22:31,120 --> 00:22:34,719
let's say that in this case now we're

605
00:22:33,440 --> 00:22:38,320
bob

606
00:22:34,720 --> 00:22:38,320
so we make a cc connection

607
00:22:38,400 --> 00:22:43,600
which is bob and i don't want any

608
00:22:41,039 --> 00:22:43,600
logging

609
00:22:45,760 --> 00:22:49,440
okay cool so now we have alice and bob

610
00:22:47,840 --> 00:22:50,720
and let's create entanglement between

611
00:22:49,440 --> 00:22:53,200
alice and bob

612
00:22:50,720 --> 00:22:54,400
so on alice we can say create an epr

613
00:22:53,200 --> 00:22:58,880
pair

614
00:22:54,400 --> 00:23:00,400
with bob and we will then get a qubit

615
00:22:58,880 --> 00:23:03,919
and let's call this qubits

616
00:23:00,400 --> 00:23:05,760
epo on both sides

617
00:23:03,919 --> 00:23:07,520
we will also get a qubits let's call it

618
00:23:05,760 --> 00:23:09,440
also epr these are actually different

619
00:23:07,520 --> 00:23:13,840
qubits

620
00:23:09,440 --> 00:23:17,039
and bob will receive

621
00:23:13,840 --> 00:23:19,360
epr great so now we have

622
00:23:17,039 --> 00:23:20,640
a qubit on alice and the qubit on bob

623
00:23:19,360 --> 00:23:23,918
they are entangled

624
00:23:20,640 --> 00:23:26,000
but they're simulated entangled

625
00:23:23,919 --> 00:23:29,120
we can also get some information about

626
00:23:26,000 --> 00:23:29,120
this entanglement so

627
00:23:29,440 --> 00:23:36,640
entanglement info it's oh

628
00:23:33,200 --> 00:23:39,039
let's print this it has some information

629
00:23:36,640 --> 00:23:40,720
about the entanglement so

630
00:23:39,039 --> 00:23:42,640
in this network stack that we're

631
00:23:40,720 --> 00:23:43,360
developing entanglements gets

632
00:23:42,640 --> 00:23:46,320
essentially an

633
00:23:43,360 --> 00:23:47,279
id that you can use to identify who am i

634
00:23:46,320 --> 00:23:49,760
entangled with

635
00:23:47,279 --> 00:23:51,039
and which entanglement is it such that

636
00:23:49,760 --> 00:23:53,760
the nodes can

637
00:23:51,039 --> 00:23:55,200
agree on which integral pair to use in

638
00:23:53,760 --> 00:23:58,480
the network

639
00:23:55,200 --> 00:23:59,600
and we can for example also see who am i

640
00:23:58,480 --> 00:24:02,159
entangled with

641
00:23:59,600 --> 00:24:05,600
so in this lowercase here we're bob we

642
00:24:02,159 --> 00:24:09,039
have a qubit entangled with alice

643
00:24:05,600 --> 00:24:09,840
and let's now use this entangled pair to

644
00:24:09,039 --> 00:24:12,559
teleport

645
00:24:09,840 --> 00:24:14,639
the qubits and so we want to telepath

646
00:24:12,559 --> 00:24:15,840
teleports this qubit q that we already

647
00:24:14,640 --> 00:24:19,039
have

648
00:24:15,840 --> 00:24:19,840
and maybe for you who know about this

649
00:24:19,039 --> 00:24:23,200
let's

650
00:24:19,840 --> 00:24:25,760
remind you how you do teleportation

651
00:24:23,200 --> 00:24:27,600
so we have some bell pair and some

652
00:24:25,760 --> 00:24:29,279
cubits we want to teleport

653
00:24:27,600 --> 00:24:30,879
we do a c naught and a hadamard and

654
00:24:29,279 --> 00:24:33,039
measure our qubits

655
00:24:30,880 --> 00:24:35,360
and send classical messages to the other

656
00:24:33,039 --> 00:24:38,320
node to apply certain corrections

657
00:24:35,360 --> 00:24:40,320
if you don't know this it's it's fine i

658
00:24:38,320 --> 00:24:43,439
just want to show you how it works

659
00:24:40,320 --> 00:24:45,760
so let's do this let's do a c naught

660
00:24:43,440 --> 00:24:47,200
between the qubit one teleports and the

661
00:24:45,760 --> 00:24:51,200
epr pair

662
00:24:47,200 --> 00:24:54,000
let's do a hadamard on the first qubit

663
00:24:51,200 --> 00:24:56,720
let's measure it and save the

664
00:24:54,000 --> 00:25:00,080
measurement outcome

665
00:24:56,720 --> 00:25:03,200
in this case it was zero

666
00:25:00,080 --> 00:25:03,199
let's measure the other one

667
00:25:04,480 --> 00:25:07,919
it's also zero okay maybe a bit boring

668
00:25:07,200 --> 00:25:10,320
it's more

669
00:25:07,919 --> 00:25:12,080
exciting if you had to do a correction

670
00:25:10,320 --> 00:25:14,320
uh so these are the measurement outcomes

671
00:25:12,080 --> 00:25:16,799
and we now need to send these to bob

672
00:25:14,320 --> 00:25:18,399
because bob needs to do the correction

673
00:25:16,799 --> 00:25:25,039
so we can do this we can say

674
00:25:18,400 --> 00:25:25,039
alice send the classical message to bob

675
00:25:26,720 --> 00:25:32,530
with the two measurement outcomes

676
00:25:29,840 --> 00:25:35,360
and what bob can then do is to

677
00:25:32,530 --> 00:25:38,960
[Music]

678
00:25:35,360 --> 00:25:41,520
receive these classical messages

679
00:25:38,960 --> 00:25:42,159
and okay they were both zero in this

680
00:25:41,520 --> 00:25:45,760
case

681
00:25:42,159 --> 00:25:45,760
but for example if one of them was

682
00:25:46,480 --> 00:25:50,799
one we might have to do and let's say an

683
00:25:49,760 --> 00:25:55,200
x correction

684
00:25:50,799 --> 00:25:58,000
on the qubit of bob

685
00:25:55,200 --> 00:25:59,520
in this case we didn't so uh since the

686
00:25:58,000 --> 00:26:00,960
qubit we teleported was actually in the

687
00:25:59,520 --> 00:26:01,520
plus states if we now measure these

688
00:26:00,960 --> 00:26:03,360
qubits

689
00:26:01,520 --> 00:26:05,360
we should randomly get it to zero over

690
00:26:03,360 --> 00:26:08,959
one

691
00:26:05,360 --> 00:26:11,600
and let's measure this okay it was

692
00:26:08,960 --> 00:26:12,880
randomly one of course we all see now

693
00:26:11,600 --> 00:26:14,158
that it's random

694
00:26:12,880 --> 00:26:15,360
of course you cannot see this by just

695
00:26:14,159 --> 00:26:16,640
doing this one time you have to do it

696
00:26:15,360 --> 00:26:20,240
many times and see

697
00:26:16,640 --> 00:26:24,400
that it's roughly one half zero and one

698
00:26:20,240 --> 00:26:27,760
um but let me maybe go to

699
00:26:24,400 --> 00:26:28,720
an example so how you would actually do

700
00:26:27,760 --> 00:26:31,440
this is not do it

701
00:26:28,720 --> 00:26:33,120
directly in the in the terminal you can

702
00:26:31,440 --> 00:26:36,159
write a script

703
00:26:33,120 --> 00:26:40,320
let's say a python script

704
00:26:36,159 --> 00:26:41,039
in this case alice you open up a sqc

705
00:26:40,320 --> 00:26:43,520
connection

706
00:26:41,039 --> 00:26:44,720
to the back end you maybe generate an

707
00:26:43,520 --> 00:26:46,799
epr pair in qubits

708
00:26:44,720 --> 00:26:48,080
and so on and in this case we actually

709
00:26:46,799 --> 00:26:52,158
open up a cq6

710
00:26:48,080 --> 00:26:54,720
connection in a in a context which is a

711
00:26:52,159 --> 00:26:55,600
python concept and the reason is that

712
00:26:54,720 --> 00:26:57,760
when you then

713
00:26:55,600 --> 00:26:59,678
close this connection or when it goes

714
00:26:57,760 --> 00:27:02,400
out of scope it is closed and qubits

715
00:26:59,679 --> 00:27:02,400
gets cleared up

716
00:27:02,960 --> 00:27:06,320
but we've written these two applications

717
00:27:05,039 --> 00:27:08,480
for alice and bob

718
00:27:06,320 --> 00:27:10,840
and we can now run these with this run

719
00:27:08,480 --> 00:27:12,400
script that essentially just

720
00:27:10,840 --> 00:27:13,600
[Music]

721
00:27:12,400 --> 00:27:16,159
puts these two processes in the

722
00:27:13,600 --> 00:27:19,918
background so let's do this

723
00:27:16,159 --> 00:27:20,880
run okay cool so now we teleported once

724
00:27:19,919 --> 00:27:24,080
more

725
00:27:20,880 --> 00:27:26,960
uh alice measurement outcomes we did the

726
00:27:24,080 --> 00:27:29,199
teleportation was again zero zero and uh

727
00:27:26,960 --> 00:27:33,760
both measurement outcome was zero

728
00:27:29,200 --> 00:27:37,279
if you do this many times zero zero one

729
00:27:33,760 --> 00:27:42,158
zero one okay it's random

730
00:27:37,279 --> 00:27:42,159
cool so that's how you use simulacrum

731
00:27:43,039 --> 00:27:46,960
and let me go back to this

732
00:27:47,520 --> 00:27:50,879
so if you want to know more about

733
00:27:49,200 --> 00:27:53,360
simulacrum you can go to our

734
00:27:50,880 --> 00:27:54,799
to our webpage there's also links to the

735
00:27:53,360 --> 00:27:58,080
actual code

736
00:27:54,799 --> 00:27:59,840
and the documentation and

737
00:27:58,080 --> 00:28:01,279
if you want to write your own library in

738
00:27:59,840 --> 00:28:02,000
some other language that communicate

739
00:28:01,279 --> 00:28:04,799
with cqc

740
00:28:02,000 --> 00:28:06,159
that's great and also if you want to

741
00:28:04,799 --> 00:28:08,320
connect this with your

742
00:28:06,159 --> 00:28:09,679
with your simulator that's maybe even

743
00:28:08,320 --> 00:28:12,720
better

744
00:28:09,679 --> 00:28:14,240
and we're happy for any contribution or

745
00:28:12,720 --> 00:28:16,320
questions or

746
00:28:14,240 --> 00:28:17,520
thoughts and with this i would like to

747
00:28:16,320 --> 00:28:31,840
thank you and

748
00:28:17,520 --> 00:28:31,840
if there is any questions

749
00:28:42,880 --> 00:28:47,120
so the question it's not for the

750
00:28:45,679 --> 00:28:50,320
simulation but for the

751
00:28:47,120 --> 00:28:54,080
real network so you mentioned these two

752
00:28:50,320 --> 00:28:58,000
ways to build a network the io connector

753
00:28:54,080 --> 00:28:58,399
and the other one and which states are

754
00:28:58,000 --> 00:29:00,240
the

755
00:28:58,399 --> 00:29:01,439
network between the european university

756
00:29:00,240 --> 00:29:05,760
and the other one

757
00:29:01,440 --> 00:29:07,279
and which method do you use

758
00:29:05,760 --> 00:29:09,520
yeah so for this network that we're

759
00:29:07,279 --> 00:29:11,279
building in in the netherlands at the

760
00:29:09,520 --> 00:29:13,440
moment it's this will use

761
00:29:11,279 --> 00:29:14,480
these envy centers or nitrogen vacancies

762
00:29:13,440 --> 00:29:16,159
in diamonds

763
00:29:14,480 --> 00:29:17,600
because they are very nice in the sense

764
00:29:16,159 --> 00:29:19,360
that they have

765
00:29:17,600 --> 00:29:20,959
they essentially have an electron which

766
00:29:19,360 --> 00:29:22,399
you can entangle with another electron

767
00:29:20,960 --> 00:29:23,919
in another enemy center

768
00:29:22,399 --> 00:29:25,600
and around the electron there's a bunch

769
00:29:23,919 --> 00:29:28,320
of carbon spins

770
00:29:25,600 --> 00:29:30,158
which you can use to store uh qubits and

771
00:29:28,320 --> 00:29:33,279
they have a very long coherence time

772
00:29:30,159 --> 00:29:35,760
so they are nice because you can both

773
00:29:33,279 --> 00:29:37,279
optically entangle these qubits but you

774
00:29:35,760 --> 00:29:38,399
can also store them for a long time and

775
00:29:37,279 --> 00:29:39,679
do gigs on them

776
00:29:38,399 --> 00:29:41,439
so that's why they're very interesting

777
00:29:39,679 --> 00:29:43,120
for for the scenario

778
00:29:41,440 --> 00:29:45,039
they might not they might be harder to

779
00:29:43,120 --> 00:29:46,959
scale you might not be able to build a

780
00:29:45,039 --> 00:29:48,480
quantum computer right enemy centers

781
00:29:46,960 --> 00:29:50,080
but for many of our applications in a

782
00:29:48,480 --> 00:29:51,600
quantum network we don't need

783
00:29:50,080 --> 00:29:53,760
many qubits and we don't need fault

784
00:29:51,600 --> 00:29:57,279
tolerance we just need a handful of

785
00:29:53,760 --> 00:29:57,279
qubits to do qkd for example

786
00:29:59,200 --> 00:30:05,039
yep yep any other questions

787
00:30:06,399 --> 00:30:13,090
nope okay and let's thank the speaker

788
00:30:09,120 --> 00:30:14,449
[Applause]

789
00:30:13,090 --> 00:30:18,218
[Music]

790
00:30:14,450 --> 00:30:18,219
[Applause]

791
00:30:19,799 --> 00:30:22,799
thanks

