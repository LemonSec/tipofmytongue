1
00:00:05,279 --> 00:00:09,200
and our next

2
00:00:06,319 --> 00:00:10,800
speaker is philip k grann and he will

3
00:00:09,200 --> 00:00:17,920
talk about the comp

4
00:00:10,800 --> 00:00:19,760
just welcome phillip thanks

5
00:00:17,920 --> 00:00:21,439
hi everyone who has heard of second

6
00:00:19,760 --> 00:00:23,760
before

7
00:00:21,439 --> 00:00:25,680
okay about half the room good so let's

8
00:00:23,760 --> 00:00:27,439
see where we can take this so second the

9
00:00:25,680 --> 00:00:28,960
secure computing model

10
00:00:27,439 --> 00:00:30,480
is something that has been around for

11
00:00:28,960 --> 00:00:31,840
quite a while but it's still not as

12
00:00:30,480 --> 00:00:34,960
widely used as you would

13
00:00:31,840 --> 00:00:35,920
wish um and generally security-wise

14
00:00:34,960 --> 00:00:38,800
often this is us

15
00:00:35,920 --> 00:00:39,440
and we say everything is fine until

16
00:00:38,800 --> 00:00:42,160
something

17
00:00:39,440 --> 00:00:43,599
whatever that is happens and then

18
00:00:42,160 --> 00:00:45,279
nothing is fine anymore and everything

19
00:00:43,600 --> 00:00:46,879
is on fire and everything is terrible

20
00:00:45,280 --> 00:00:49,039
and then you always wish

21
00:00:46,879 --> 00:00:50,239
that you had something else to fix your

22
00:00:49,039 --> 00:00:52,559
security model

23
00:00:50,239 --> 00:00:54,239
and second might be one piece and the

24
00:00:52,559 --> 00:00:55,760
big puzzle of security solutions that

25
00:00:54,239 --> 00:00:58,320
you could use to help

26
00:00:55,760 --> 00:00:59,440
fix stuff um obviously there are no

27
00:00:58,320 --> 00:01:01,520
silver bullets

28
00:00:59,440 --> 00:01:02,718
and there is no one tool but you want to

29
00:01:01,520 --> 00:01:05,119
have like more

30
00:01:02,719 --> 00:01:06,799
layers and an in-depth security model

31
00:01:05,119 --> 00:01:09,439
and setcomp is exactly what

32
00:01:06,799 --> 00:01:10,000
comes into play here generally it's just

33
00:01:09,439 --> 00:01:13,199
one

34
00:01:10,000 --> 00:01:15,040
piece of least security so

35
00:01:13,200 --> 00:01:16,720
it's trying to take away things that you

36
00:01:15,040 --> 00:01:18,479
don't actually need that might just

37
00:01:16,720 --> 00:01:20,960
expose you to more risk

38
00:01:18,479 --> 00:01:22,720
and it basically just blocks certain

39
00:01:20,960 --> 00:01:25,600
system calls that you know

40
00:01:22,720 --> 00:01:26,000
that your applications do not need so if

41
00:01:25,600 --> 00:01:27,919
you for

42
00:01:26,000 --> 00:01:30,000
example know that your process never

43
00:01:27,920 --> 00:01:31,840
needs to fork another process or you

44
00:01:30,000 --> 00:01:32,400
never need to call another binary from

45
00:01:31,840 --> 00:01:34,799
your

46
00:01:32,400 --> 00:01:36,560
process why not just take away the

47
00:01:34,799 --> 00:01:38,159
possibility from your application

48
00:01:36,560 --> 00:01:40,000
so even if you have a remote code

49
00:01:38,159 --> 00:01:40,640
execution and somebody can run whatever

50
00:01:40,000 --> 00:01:42,799
they want

51
00:01:40,640 --> 00:01:44,159
in the context of your application you

52
00:01:42,799 --> 00:01:46,399
can still cannot do

53
00:01:44,159 --> 00:01:47,840
some stuff that's just generally not

54
00:01:46,399 --> 00:01:49,680
necessary for your application

55
00:01:47,840 --> 00:01:51,040
and that's really just the idea of

56
00:01:49,680 --> 00:01:53,040
second

57
00:01:51,040 --> 00:01:55,280
and it's basically just instrumenting

58
00:01:53,040 --> 00:01:57,439
the kernel to do that for you and it's

59
00:01:55,280 --> 00:01:58,799
like a sandbox to filter out stuff that

60
00:01:57,439 --> 00:02:00,960
you don't want

61
00:01:58,799 --> 00:02:03,119
but it's application driven it's not

62
00:02:00,960 --> 00:02:04,399
like generally it's not say linux for

63
00:02:03,119 --> 00:02:06,159
example or app armor

64
00:02:04,399 --> 00:02:07,840
it's really application driven because

65
00:02:06,159 --> 00:02:09,840
the assumption is the application

66
00:02:07,840 --> 00:02:10,640
developers know what their application

67
00:02:09,840 --> 00:02:12,080
needs

68
00:02:10,639 --> 00:02:13,679
and then they can register the right

69
00:02:12,080 --> 00:02:16,800
profiles for the applications and then

70
00:02:13,680 --> 00:02:19,760
filter out all the unnecessary stuff

71
00:02:16,800 --> 00:02:20,879
it was introduced like forever ago

72
00:02:19,760 --> 00:02:23,359
basically

73
00:02:20,879 --> 00:02:24,239
it had the so called strict mode the

74
00:02:23,360 --> 00:02:26,560
good thing was

75
00:02:24,239 --> 00:02:28,319
strict mode was very strict but the bad

76
00:02:26,560 --> 00:02:29,200
thing was also that strict mode was very

77
00:02:28,319 --> 00:02:30,879
strict

78
00:02:29,200 --> 00:02:32,799
like with these permissions you can

79
00:02:30,879 --> 00:02:35,840
barely do anything

80
00:02:32,800 --> 00:02:37,200
yes you can read and write a file but

81
00:02:35,840 --> 00:02:39,599
there is no network

82
00:02:37,200 --> 00:02:40,560
access at all you cannot even change the

83
00:02:39,599 --> 00:02:42,238
system time

84
00:02:40,560 --> 00:02:44,640
like nothing can be touched here

85
00:02:42,239 --> 00:02:46,400
basically except these four system calls

86
00:02:44,640 --> 00:02:48,160
and that was a good first step but it

87
00:02:46,400 --> 00:02:50,239
was way too restrictive for the average

88
00:02:48,160 --> 00:02:53,440
application to be actually useful

89
00:02:50,239 --> 00:02:56,000
so it had to kind of develop over time

90
00:02:53,440 --> 00:02:56,800
and couple of years later the foundation

91
00:02:56,000 --> 00:03:00,000
was added for

92
00:02:56,800 --> 00:03:04,239
system crawl call control

93
00:03:00,000 --> 00:03:06,400
and in 2014 segcomp was actually added

94
00:03:04,239 --> 00:03:08,560
to make that configuration easier

95
00:03:06,400 --> 00:03:10,480
and i hope that everybody is on the

96
00:03:08,560 --> 00:03:14,480
kernel version that supports that

97
00:03:10,480 --> 00:03:16,480
um but that's a different story

98
00:03:14,480 --> 00:03:18,079
anyway so you can generally i guess

99
00:03:16,480 --> 00:03:19,920
everybody knows manchester

100
00:03:18,080 --> 00:03:21,120
so you can see what system calls does

101
00:03:19,920 --> 00:03:23,280
your kernel version

102
00:03:21,120 --> 00:03:24,400
support and by the way there are new

103
00:03:23,280 --> 00:03:26,560
ones being added

104
00:03:24,400 --> 00:03:28,560
over time and you can see that in this

105
00:03:26,560 --> 00:03:28,879
call as well which ones have been around

106
00:03:28,560 --> 00:03:32,000
for

107
00:03:28,879 --> 00:03:35,040
how long and then with second you can

108
00:03:32,000 --> 00:03:37,840
basically see how you can filter those

109
00:03:35,040 --> 00:03:39,040
and not allow specific system calls and

110
00:03:37,840 --> 00:03:41,920
the way you write that

111
00:03:39,040 --> 00:03:46,079
is bpf the berkeley packet format where

112
00:03:41,920 --> 00:03:48,798
do you normally use bpf

113
00:03:46,080 --> 00:03:50,159
probably tcp dump when you do that when

114
00:03:48,799 --> 00:03:51,440
you're pretty desperate then you

115
00:03:50,159 --> 00:03:53,359
try to find something on the network

116
00:03:51,440 --> 00:03:54,079
interface that's one of the places where

117
00:03:53,360 --> 00:03:57,519
you might

118
00:03:54,080 --> 00:03:58,640
use ppf um and those are not the most

119
00:03:57,519 --> 00:04:01,920
human friendly

120
00:03:58,640 --> 00:04:02,879
ways to write anything but you maybe get

121
00:04:01,920 --> 00:04:04,798
used to writing

122
00:04:02,879 --> 00:04:06,720
bpf at some point so the minimal setup

123
00:04:04,799 --> 00:04:09,120
would be for example here

124
00:04:06,720 --> 00:04:10,319
we need these two header files and then

125
00:04:09,120 --> 00:04:12,400
here at the end

126
00:04:10,319 --> 00:04:14,159
you basically have a structure where you

127
00:04:12,400 --> 00:04:14,720
register the system calls that you want

128
00:04:14,159 --> 00:04:18,000
to

129
00:04:14,720 --> 00:04:19,279
allow for example or deny and it could

130
00:04:18,000 --> 00:04:20,560
look something like this and this is

131
00:04:19,279 --> 00:04:22,638
pretty small

132
00:04:20,560 --> 00:04:24,240
the most important parts are first you

133
00:04:22,639 --> 00:04:26,800
want to check the architecture

134
00:04:24,240 --> 00:04:30,160
because different architectures

135
00:04:26,800 --> 00:04:32,000
different system call numbers which can

136
00:04:30,160 --> 00:04:33,360
add confusion and you might allow the

137
00:04:32,000 --> 00:04:36,080
wrong ones then

138
00:04:33,360 --> 00:04:37,280
um here we basically check which system

139
00:04:36,080 --> 00:04:39,758
call is coming in

140
00:04:37,280 --> 00:04:41,679
and then you decide do you allow that so

141
00:04:39,759 --> 00:04:42,080
here we're basically having an allow

142
00:04:41,680 --> 00:04:44,320
list

143
00:04:42,080 --> 00:04:46,240
like everything we allow will pass

144
00:04:44,320 --> 00:04:46,639
through and everything not on the allow

145
00:04:46,240 --> 00:04:49,600
list

146
00:04:46,639 --> 00:04:50,240
will then run into the kill process and

147
00:04:49,600 --> 00:04:53,280
just

148
00:04:50,240 --> 00:04:53,280
shoot down your process

149
00:04:53,840 --> 00:04:57,280
every call that you do once you have

150
00:04:56,240 --> 00:04:59,680
system call

151
00:04:57,280 --> 00:05:00,559
sys setcomp enabled will then run

152
00:04:59,680 --> 00:05:02,000
through that

153
00:05:00,560 --> 00:05:03,759
the question that sometimes comes up is

154
00:05:02,000 --> 00:05:05,840
it very kind of

155
00:05:03,759 --> 00:05:07,440
expensive because it's for every system

156
00:05:05,840 --> 00:05:07,919
called not really because it runs in the

157
00:05:07,440 --> 00:05:09,680
kernel

158
00:05:07,919 --> 00:05:11,520
so you don't have to go to user space

159
00:05:09,680 --> 00:05:13,039
for all the calls so it is pretty cheap

160
00:05:11,520 --> 00:05:15,919
to actually run those

161
00:05:13,039 --> 00:05:17,280
um the results that you can have is a

162
00:05:15,919 --> 00:05:20,320
call can be allowed

163
00:05:17,280 --> 00:05:21,198
that's probably the good case a thread

164
00:05:20,320 --> 00:05:23,280
or a process

165
00:05:21,199 --> 00:05:24,960
can be killed you can also return an

166
00:05:23,280 --> 00:05:28,320
error and log

167
00:05:24,960 --> 00:05:30,880
any problems if you run into those um

168
00:05:28,320 --> 00:05:32,320
is anybody using setcom like are any of

169
00:05:30,880 --> 00:05:35,039
the applications that you're using on a

170
00:05:32,320 --> 00:05:38,320
daily basis are they using segcomp

171
00:05:35,039 --> 00:05:39,520
probably yes some of the more widely

172
00:05:38,320 --> 00:05:42,800
used ones are

173
00:05:39,520 --> 00:05:46,719
these here um so you probably touch

174
00:05:42,800 --> 00:05:48,960
staccom somewhere every day

175
00:05:46,720 --> 00:05:50,080
especially docker has used segcomp quite

176
00:05:48,960 --> 00:05:52,239
a bit and

177
00:05:50,080 --> 00:05:53,120
if i'm not if that hasn't been changed

178
00:05:52,240 --> 00:05:56,960
in the meantime

179
00:05:53,120 --> 00:05:59,759
um 44 system calls out of 300 plus

180
00:05:56,960 --> 00:06:01,198
are being filtered and that used to be

181
00:05:59,759 --> 00:06:02,800
quite a lot of manual work for them to

182
00:06:01,199 --> 00:06:03,919
figure out what you can block it with

183
00:06:02,800 --> 00:06:06,880
you cannot block

184
00:06:03,919 --> 00:06:08,799
but they found more or less secure setup

185
00:06:06,880 --> 00:06:12,000
of what can be blocked out

186
00:06:08,800 --> 00:06:13,919
uh by segcomp um so for example some

187
00:06:12,000 --> 00:06:15,280
stuff that they are blocking is

188
00:06:13,919 --> 00:06:17,680
you cannot change the system time

189
00:06:15,280 --> 00:06:19,679
because that's not namespace time is

190
00:06:17,680 --> 00:06:21,440
global on the system so you cannot

191
00:06:19,680 --> 00:06:24,639
change that from within a container

192
00:06:21,440 --> 00:06:27,199
um you cannot clone a namespace

193
00:06:24,639 --> 00:06:28,639
you cannot reboot the host you cannot

194
00:06:27,199 --> 00:06:31,520
unshare or

195
00:06:28,639 --> 00:06:32,960
copy a namespace either so these are

196
00:06:31,520 --> 00:06:35,198
system calls that are

197
00:06:32,960 --> 00:06:37,039
blocked and you can also check that out

198
00:06:35,199 --> 00:06:39,600
so for example what you can do

199
00:06:37,039 --> 00:06:41,840
which is obviously not recommended but

200
00:06:39,600 --> 00:06:43,919
you can

201
00:06:41,840 --> 00:06:44,880
kind of like disable the second filter

202
00:06:43,919 --> 00:06:47,919
on docker

203
00:06:44,880 --> 00:06:49,759
and then you can just clone a namespace

204
00:06:47,919 --> 00:06:50,400
and then see that you're running here is

205
00:06:49,759 --> 00:06:52,479
root

206
00:06:50,400 --> 00:06:54,318
if you use the default settings then

207
00:06:52,479 --> 00:06:56,960
this would not be allowed because

208
00:06:54,319 --> 00:06:57,520
unshare has just been disabled so this

209
00:06:56,960 --> 00:07:00,799
is where

210
00:06:57,520 --> 00:07:02,159
docker uses second for example is any of

211
00:07:00,800 --> 00:07:04,720
your applications using it

212
00:07:02,160 --> 00:07:05,199
you can also filter that out if you look

213
00:07:04,720 --> 00:07:07,759
at

214
00:07:05,199 --> 00:07:08,400
proc whatever status and that number

215
00:07:07,759 --> 00:07:11,120
tells you

216
00:07:08,400 --> 00:07:12,960
zero means no one means the strict

217
00:07:11,120 --> 00:07:14,880
filter which is probably too strict and

218
00:07:12,960 --> 00:07:17,198
nobody's really using that anymore so

219
00:07:14,880 --> 00:07:18,000
you will probably not have any processes

220
00:07:17,199 --> 00:07:21,120
with one

221
00:07:18,000 --> 00:07:21,840
but the ones using um secom will have a

222
00:07:21,120 --> 00:07:23,919
two there

223
00:07:21,840 --> 00:07:25,919
and that's how to identify which

224
00:07:23,919 --> 00:07:27,120
processors have actually registered a

225
00:07:25,919 --> 00:07:29,198
second filter

226
00:07:27,120 --> 00:07:30,639
for you and which ones have not then

227
00:07:29,199 --> 00:07:32,240
probably should

228
00:07:30,639 --> 00:07:34,400
um and then you can just check out the

229
00:07:32,240 --> 00:07:37,280
process from there and see what

230
00:07:34,400 --> 00:07:38,479
what's being filtered and what not um so

231
00:07:37,280 --> 00:07:40,000
why am i talking about that

232
00:07:38,479 --> 00:07:41,520
i work for this little company called

233
00:07:40,000 --> 00:07:42,080
elastic we have some products and we

234
00:07:41,520 --> 00:07:45,280
also use

235
00:07:42,080 --> 00:07:46,639
segcomp heavily if you've never seen any

236
00:07:45,280 --> 00:07:47,840
of our products maybe you've seen this

237
00:07:46,639 --> 00:07:50,479
one the good old

238
00:07:47,840 --> 00:07:51,520
elk or we've added another component

239
00:07:50,479 --> 00:07:53,440
called beets

240
00:07:51,520 --> 00:07:55,758
and then we kind of had to redo that elk

241
00:07:53,440 --> 00:07:58,639
because there is no bean elk and then we

242
00:07:55,759 --> 00:08:00,240
tried this the belk or elk b

243
00:07:58,639 --> 00:08:02,800
and you can see it flies and everything

244
00:08:00,240 --> 00:08:05,680
but anyway so in our stack

245
00:08:02,800 --> 00:08:06,720
we have um two components that use

246
00:08:05,680 --> 00:08:08,319
segcomp heavily

247
00:08:06,720 --> 00:08:10,960
that is first beats which is like a

248
00:08:08,319 --> 00:08:12,800
leica and agent or shipper written in go

249
00:08:10,960 --> 00:08:14,560
since that runs on pretty much all the

250
00:08:12,800 --> 00:08:16,720
systems where you want to collect

251
00:08:14,560 --> 00:08:18,160
information and then elasticsearch since

252
00:08:16,720 --> 00:08:19,840
that stores your data

253
00:08:18,160 --> 00:08:21,360
and probably you want to add some extra

254
00:08:19,840 --> 00:08:23,679
protection there

255
00:08:21,360 --> 00:08:25,360
logstash has an open issue and kibana as

256
00:08:23,680 --> 00:08:27,759
well they don't use segcomp

257
00:08:25,360 --> 00:08:29,520
yet but elasticsearch and beats for

258
00:08:27,759 --> 00:08:31,199
example do that and just to give you an

259
00:08:29,520 --> 00:08:33,838
idea how to do that

260
00:08:31,199 --> 00:08:35,760
elasticsearch is a java process how do

261
00:08:33,839 --> 00:08:36,479
you set second filters from a java

262
00:08:35,760 --> 00:08:38,958
process

263
00:08:36,479 --> 00:08:40,479
dna java native access is the thing what

264
00:08:38,958 --> 00:08:42,159
you do

265
00:08:40,479 --> 00:08:43,599
this would be the relevant part from the

266
00:08:42,159 --> 00:08:45,200
source code

267
00:08:43,599 --> 00:08:47,120
first something that is not strictly

268
00:08:45,200 --> 00:08:48,800
related to second but something that

269
00:08:47,120 --> 00:08:51,920
every process should do is

270
00:08:48,800 --> 00:08:53,439
this one and people mostly accepted that

271
00:08:51,920 --> 00:08:55,839
you should not run processes as root

272
00:08:53,440 --> 00:08:57,279
especially server processes so

273
00:08:55,839 --> 00:08:59,360
we will just throw an exception if you

274
00:08:57,279 --> 00:09:02,640
try to run elasticsearch's route and

275
00:08:59,360 --> 00:09:04,959
exit and secondly we will check

276
00:09:02,640 --> 00:09:05,760
or we will try to register system calls

277
00:09:04,959 --> 00:09:07,599
there

278
00:09:05,760 --> 00:09:10,399
and then depending on your operating

279
00:09:07,600 --> 00:09:12,160
system secomp is really linux specific

280
00:09:10,399 --> 00:09:13,920
but most other operating systems have a

281
00:09:12,160 --> 00:09:14,480
similar concept even though it might be

282
00:09:13,920 --> 00:09:16,880
called

283
00:09:14,480 --> 00:09:18,720
differently and we try to register those

284
00:09:16,880 --> 00:09:19,920
on all the available operating systems

285
00:09:18,720 --> 00:09:22,000
that we support

286
00:09:19,920 --> 00:09:23,920
and otherwise just draw an error and say

287
00:09:22,000 --> 00:09:27,200
we don't support that one

288
00:09:23,920 --> 00:09:29,120
um yeah different ways to do

289
00:09:27,200 --> 00:09:30,640
segcomp but we'll stick to linux and

290
00:09:29,120 --> 00:09:33,600
then it's just second

291
00:09:30,640 --> 00:09:36,080
um and this is basically what we do in

292
00:09:33,600 --> 00:09:39,360
elasticsearch so

293
00:09:36,080 --> 00:09:40,640
the joy of bpf at work the main ones

294
00:09:39,360 --> 00:09:42,560
that you're interested in for example

295
00:09:40,640 --> 00:09:43,839
you cannot fork a process and you cannot

296
00:09:42,560 --> 00:09:46,479
execute another binary

297
00:09:43,839 --> 00:09:47,839
so even if we had a remote code

298
00:09:46,480 --> 00:09:49,040
execution in elasticsearch which

299
00:09:47,839 --> 00:09:51,839
hopefully we don't

300
00:09:49,040 --> 00:09:54,399
you could not fork another process or

301
00:09:51,839 --> 00:09:56,399
execute any binary on the system

302
00:09:54,399 --> 00:09:59,360
because we filter those calls out so

303
00:09:56,399 --> 00:09:59,360
that just wouldn't work

304
00:10:00,320 --> 00:10:03,440
then we have beats which are these

305
00:10:02,240 --> 00:10:06,880
lightweight agents

306
00:10:03,440 --> 00:10:09,120
um and they have basically their own

307
00:10:06,880 --> 00:10:10,800
syntax to filter that out in goa they

308
00:10:09,120 --> 00:10:13,519
wrote their own library because

309
00:10:10,800 --> 00:10:15,760
they didn't want to write vpf itself

310
00:10:13,519 --> 00:10:18,000
they wanted to have yaml instead

311
00:10:15,760 --> 00:10:20,000
so basically they created something like

312
00:10:18,000 --> 00:10:22,720
this here you can see

313
00:10:20,000 --> 00:10:23,040
this allows all the calls by default and

314
00:10:22,720 --> 00:10:25,279
then

315
00:10:23,040 --> 00:10:26,560
filters out specific system calls so

316
00:10:25,279 --> 00:10:29,040
this is basically a

317
00:10:26,560 --> 00:10:30,319
denial is is this what we're using in

318
00:10:29,040 --> 00:10:32,319
beats actually

319
00:10:30,320 --> 00:10:33,920
no because beats since it's shipping

320
00:10:32,320 --> 00:10:35,440
data over the network would need some

321
00:10:33,920 --> 00:10:37,199
network access and this doesn't allow

322
00:10:35,440 --> 00:10:37,760
any network access so this is just a

323
00:10:37,200 --> 00:10:40,240
sample

324
00:10:37,760 --> 00:10:41,120
of what we do actually the real rules

325
00:10:40,240 --> 00:10:44,320
are

326
00:10:41,120 --> 00:10:47,440
many more but we do use

327
00:10:44,320 --> 00:10:50,480
an allow list so we basically have

328
00:10:47,440 --> 00:10:51,279
white listed all the actions or calls

329
00:10:50,480 --> 00:10:53,360
that we need

330
00:10:51,279 --> 00:10:54,959
this will be a very long list and

331
00:10:53,360 --> 00:10:56,880
everything else will be blocked

332
00:10:54,959 --> 00:10:58,719
so every time a new system course comes

333
00:10:56,880 --> 00:10:59,120
out that we need a new one and we want

334
00:10:58,720 --> 00:11:00,800
to

335
00:10:59,120 --> 00:11:02,240
list that one we will need to update

336
00:11:00,800 --> 00:11:04,479
that list manually

337
00:11:02,240 --> 00:11:05,839
but as always allow lists are more

338
00:11:04,480 --> 00:11:09,680
secure than in our lists

339
00:11:05,839 --> 00:11:11,440
so yeah um because new system calls and

340
00:11:09,680 --> 00:11:13,359
you might allow something otherwise that

341
00:11:11,440 --> 00:11:16,399
you don't have intended

342
00:11:13,360 --> 00:11:18,320
okay so we could just try that out very

343
00:11:16,399 --> 00:11:21,920
quickly so for example if you

344
00:11:18,320 --> 00:11:21,920
run good old netcat

345
00:11:24,640 --> 00:11:29,839
and then you could just

346
00:11:34,640 --> 00:11:45,279
open a connection and say hello and

347
00:11:42,079 --> 00:11:48,800
ideally my hello should arrive

348
00:11:45,279 --> 00:11:48,800
where is my helona arriving right now

349
00:11:50,240 --> 00:11:56,399
no this is netcat doesn't use second um

350
00:11:53,360 --> 00:11:57,360
and also um but we'll get to that in a

351
00:11:56,399 --> 00:12:00,880
moment

352
00:11:57,360 --> 00:12:03,360
let's see ah

353
00:12:00,880 --> 00:12:04,800
this is the wrong host my bad because

354
00:12:03,360 --> 00:12:08,880
this is a demo and i'm already

355
00:12:04,800 --> 00:12:12,160
using this domain for a demo because

356
00:12:08,880 --> 00:12:12,560
hello and well if you use the right one

357
00:12:12,160 --> 00:12:14,560
um

358
00:12:12,560 --> 00:12:16,079
this works um you can use it as well

359
00:12:14,560 --> 00:12:16,719
it's just online so you can start

360
00:12:16,079 --> 00:12:19,359
chatting

361
00:12:16,720 --> 00:12:21,120
um now the main questions are which

362
00:12:19,360 --> 00:12:23,360
system calls are involved here

363
00:12:21,120 --> 00:12:25,839
what are we using to figure out the

364
00:12:23,360 --> 00:12:25,839
system calls

365
00:12:26,639 --> 00:12:33,519
yes so we can just run this with s

366
00:12:30,480 --> 00:12:35,760
trace oops

367
00:12:33,519 --> 00:12:37,040
and that will show us a ton of system

368
00:12:35,760 --> 00:12:39,920
calls that

369
00:12:37,040 --> 00:12:41,199
will be needed here the most important

370
00:12:39,920 --> 00:12:43,439
one is at the end

371
00:12:41,200 --> 00:12:43,440
when

372
00:12:46,240 --> 00:12:53,760
okay i think somebody said yay here

373
00:12:51,120 --> 00:12:55,440
and that then killed that with a bad

374
00:12:53,760 --> 00:12:59,040
file script or my process

375
00:12:55,440 --> 00:13:00,160
um but you can see all the calls that we

376
00:12:59,040 --> 00:13:03,519
are doing here

377
00:13:00,160 --> 00:13:04,560
and that is by the way one thing that is

378
00:13:03,519 --> 00:13:08,240
kind of relevant

379
00:13:04,560 --> 00:13:10,160
um so yeah if you run s trace and for

380
00:13:08,240 --> 00:13:12,000
example with dash e bind you can just

381
00:13:10,160 --> 00:13:13,360
filter down on the bind

382
00:13:12,000 --> 00:13:16,079
action because that's the one i want to

383
00:13:13,360 --> 00:13:17,600
monitor here um so you could just see

384
00:13:16,079 --> 00:13:20,399
this is just a system call for the

385
00:13:17,600 --> 00:13:22,240
binding that's how to monitor that

386
00:13:20,399 --> 00:13:24,320
and if you leave that out you see a lot

387
00:13:22,240 --> 00:13:25,760
of system calls and this is by the way a

388
00:13:24,320 --> 00:13:27,440
good way to figure out

389
00:13:25,760 --> 00:13:29,120
which system calls does my binary even

390
00:13:27,440 --> 00:13:30,160
need what do i need to whitelist to

391
00:13:29,120 --> 00:13:33,279
allow

392
00:13:30,160 --> 00:13:35,839
my binary to work as expected um

393
00:13:33,279 --> 00:13:37,600
the other way to figure out which system

394
00:13:35,839 --> 00:13:40,720
calls do you and need to allow for a

395
00:13:37,600 --> 00:13:44,000
binary to write the right second filter

396
00:13:40,720 --> 00:13:44,480
is there is under this address you can

397
00:13:44,000 --> 00:13:46,399
find

398
00:13:44,480 --> 00:13:47,760
a little c utility which you can add

399
00:13:46,399 --> 00:13:49,920
which will then collect

400
00:13:47,760 --> 00:13:51,680
all the system calls that you're doing

401
00:13:49,920 --> 00:13:54,880
otherwise you can always use the

402
00:13:51,680 --> 00:13:57,040
s trace output and just grab

403
00:13:54,880 --> 00:13:58,240
the system call which is always the

404
00:13:57,040 --> 00:13:59,760
first thing in every line

405
00:13:58,240 --> 00:14:01,360
and you could just aggregate those and

406
00:13:59,760 --> 00:14:04,480
then figure out what you need to allow

407
00:14:01,360 --> 00:14:04,480
or what you can deny

408
00:14:04,639 --> 00:14:08,639
and then you can simulate what would

409
00:14:06,480 --> 00:14:09,519
happen if you would deny a certain

410
00:14:08,639 --> 00:14:11,279
system call

411
00:14:09,519 --> 00:14:13,199
and for that there is a little tool

412
00:14:11,279 --> 00:14:16,320
called fire jail

413
00:14:13,199 --> 00:14:19,519
that can basically runs or

414
00:14:16,320 --> 00:14:22,399
deny specific system calls and

415
00:14:19,519 --> 00:14:23,040
you can run it like this and let me

416
00:14:22,399 --> 00:14:25,360
paste it in

417
00:14:23,040 --> 00:14:26,880
i think i've copied that because nobody

418
00:14:25,360 --> 00:14:29,199
wants to see me type that

419
00:14:26,880 --> 00:14:31,519
so we have fire jail without the profile

420
00:14:29,199 --> 00:14:34,639
we dropped the bind permission

421
00:14:31,519 --> 00:14:37,920
and then we just run space

422
00:14:34,639 --> 00:14:40,160
on on my binary and i tried to bind to

423
00:14:37,920 --> 00:14:43,360
port 1025 again

424
00:14:40,160 --> 00:14:46,480
and then it just tells me well

425
00:14:43,360 --> 00:14:47,680
my system was called my my process was

426
00:14:46,480 --> 00:14:50,880
killed because you can see

427
00:14:47,680 --> 00:14:51,920
i try to open a socket i then try to do

428
00:14:50,880 --> 00:14:54,399
the bind

429
00:14:51,920 --> 00:14:56,000
and exactly then does fire jail kill my

430
00:14:54,399 --> 00:15:00,800
process just as expected

431
00:14:56,000 --> 00:15:00,800
so this is not allowed here and

432
00:15:02,079 --> 00:15:06,160
yeah that's the output you will get here

433
00:15:04,079 --> 00:15:07,359
um one thing that is sometimes

434
00:15:06,160 --> 00:15:10,240
interesting is

435
00:15:07,360 --> 00:15:11,440
what happens if somebody takes over your

436
00:15:10,240 --> 00:15:13,760
binary

437
00:15:11,440 --> 00:15:16,720
and then tries to change the filters any

438
00:15:13,760 --> 00:15:19,120
guesses what will happen

439
00:15:16,720 --> 00:15:19,839
will it you can only well i'll give you

440
00:15:19,120 --> 00:15:21,279
three options

441
00:15:19,839 --> 00:15:23,120
and you can decide what what you think

442
00:15:21,279 --> 00:15:24,560
is most likely first you can only set

443
00:15:23,120 --> 00:15:26,639
sencomp once

444
00:15:24,560 --> 00:15:28,079
second you can drop the permissions to

445
00:15:26,639 --> 00:15:31,120
change anything in second

446
00:15:28,079 --> 00:15:31,120
and third euro

447
00:15:31,519 --> 00:15:35,839
the third no it's not your um so what

448
00:15:34,079 --> 00:15:36,319
you need to do is when you set up stack

449
00:15:35,839 --> 00:15:40,000
comp

450
00:15:36,320 --> 00:15:43,279
um the first thing you want to set is

451
00:15:40,000 --> 00:15:45,440
set no new privileges this basically

452
00:15:43,279 --> 00:15:47,199
means you can always tighten down over

453
00:15:45,440 --> 00:15:48,880
the life cycle of an application you can

454
00:15:47,199 --> 00:15:50,240
always tighten down the rules but you

455
00:15:48,880 --> 00:15:51,519
can never loosen them up

456
00:15:50,240 --> 00:15:53,759
so once you've taken away some

457
00:15:51,519 --> 00:15:55,120
permission you cannot add it anymore

458
00:15:53,759 --> 00:15:57,120
so even if somebody takes over your

459
00:15:55,120 --> 00:15:59,519
binary they cannot then

460
00:15:57,120 --> 00:16:01,040
allow a fork or execute or whatever um

461
00:15:59,519 --> 00:16:02,480
because you can only tighten it down so

462
00:16:01,040 --> 00:16:05,920
this is the first thing

463
00:16:02,480 --> 00:16:07,600
that you should set to make this secure

464
00:16:05,920 --> 00:16:09,360
are we doing that and i was kind of

465
00:16:07,600 --> 00:16:12,800
curious how we were setting that up

466
00:16:09,360 --> 00:16:15,360
yes we are um so for example here um

467
00:16:12,800 --> 00:16:16,319
you can see the system call since linux

468
00:16:15,360 --> 00:16:20,160
3.5

469
00:16:16,320 --> 00:16:23,199
for set no new privileges is 38.

470
00:16:20,160 --> 00:16:25,120
then we try to set this one here and

471
00:16:23,199 --> 00:16:28,399
afterwards we actually check

472
00:16:25,120 --> 00:16:30,880
and if setting that permission or

473
00:16:28,399 --> 00:16:31,680
that filter did not succeed we would

474
00:16:30,880 --> 00:16:34,320
actually

475
00:16:31,680 --> 00:16:34,800
um error out on the process so we ensure

476
00:16:34,320 --> 00:16:36,480
that

477
00:16:34,800 --> 00:16:38,560
this has worked and you cannot change

478
00:16:36,480 --> 00:16:41,199
the permissions afterwards

479
00:16:38,560 --> 00:16:42,000
um beats has since it has this yaml

480
00:16:41,199 --> 00:16:44,560
syntax

481
00:16:42,000 --> 00:16:45,279
um just has this no new briefs true and

482
00:16:44,560 --> 00:16:47,839
you're done

483
00:16:45,279 --> 00:16:48,959
which is maybe a bit more readable but

484
00:16:47,839 --> 00:16:50,880
the binary in the

485
00:16:48,959 --> 00:16:52,800
or the library in the background that

486
00:16:50,880 --> 00:16:56,639
does all the yaml parsing does just the

487
00:16:52,800 --> 00:16:59,120
same with vpf to set the right filters

488
00:16:56,639 --> 00:17:00,639
and then you probably want to figure out

489
00:16:59,120 --> 00:17:02,320
that somebody has

490
00:17:00,639 --> 00:17:03,839
kind of like caused some second

491
00:17:02,320 --> 00:17:06,480
violation

492
00:17:03,839 --> 00:17:08,559
so auditd the linux auditing framework

493
00:17:06,480 --> 00:17:10,160
can also collect those

494
00:17:08,559 --> 00:17:11,839
we have another component in our stack

495
00:17:10,160 --> 00:17:14,799
called audit beat which can

496
00:17:11,839 --> 00:17:16,000
collect any violation of those and then

497
00:17:14,799 --> 00:17:19,199
you can just

498
00:17:16,000 --> 00:17:20,720
collect those and see um where it's

499
00:17:19,199 --> 00:17:21,520
going so for example if you then look in

500
00:17:20,720 --> 00:17:23,280
kibana

501
00:17:21,520 --> 00:17:25,439
you could just say like give me all the

502
00:17:23,280 --> 00:17:28,240
violated second policy

503
00:17:25,439 --> 00:17:29,280
actions and then you would see these

504
00:17:28,240 --> 00:17:31,039
were all the

505
00:17:29,280 --> 00:17:32,799
kind of like things where you violated

506
00:17:31,039 --> 00:17:33,760
the policy and then you would also see

507
00:17:32,799 --> 00:17:36,799
like which user

508
00:17:33,760 --> 00:17:38,080
which binary um which system where that

509
00:17:36,799 --> 00:17:40,000
happened and then you can

510
00:17:38,080 --> 00:17:41,600
try to find out like do i need to change

511
00:17:40,000 --> 00:17:44,400
my rules or did somebody

512
00:17:41,600 --> 00:17:45,439
break in and try to run some some

513
00:17:44,400 --> 00:17:46,880
filters

514
00:17:45,440 --> 00:17:48,480
or system calls that they were not

515
00:17:46,880 --> 00:17:50,400
allowed to run um

516
00:17:48,480 --> 00:17:52,559
we also have this new seam component

517
00:17:50,400 --> 00:17:54,160
which is more drag and drop oriented and

518
00:17:52,559 --> 00:17:56,399
then you could drop that in here

519
00:17:54,160 --> 00:17:58,320
and this shows you this was when i was

520
00:17:56,400 --> 00:18:00,320
trying that with netcat and you could

521
00:17:58,320 --> 00:18:04,080
see for example ubuntu user

522
00:18:00,320 --> 00:18:04,799
on the what the host um was trying

523
00:18:04,080 --> 00:18:07,520
to

524
00:18:04,799 --> 00:18:09,520
use netcat and that was actually a

525
00:18:07,520 --> 00:18:11,200
violation and i filtered that out here

526
00:18:09,520 --> 00:18:13,039
and then you could would know like which

527
00:18:11,200 --> 00:18:13,760
binary is affected which user might be

528
00:18:13,039 --> 00:18:17,440
affected

529
00:18:13,760 --> 00:18:21,120
and you could filter those down

530
00:18:17,440 --> 00:18:24,400
so to wrap up it's always kind of

531
00:18:21,120 --> 00:18:26,000
lego security so there is not just one

532
00:18:24,400 --> 00:18:27,440
block that you need to put in but there

533
00:18:26,000 --> 00:18:29,520
are many blocks that you need to combine

534
00:18:27,440 --> 00:18:29,919
to have better security and secomp is

535
00:18:29,520 --> 00:18:32,720
just

536
00:18:29,919 --> 00:18:34,160
one of these little building blocks

537
00:18:32,720 --> 00:18:36,960
sometimes people ask like how does it

538
00:18:34,160 --> 00:18:39,760
compare to se linux or up armor

539
00:18:36,960 --> 00:18:41,440
one is or both of them are all the

540
00:18:39,760 --> 00:18:43,840
approaches are kernel level

541
00:18:41,440 --> 00:18:45,039
filters or interceptors the main

542
00:18:43,840 --> 00:18:47,520
difference is that

543
00:18:45,039 --> 00:18:48,240
segcomp is where the process actively

544
00:18:47,520 --> 00:18:50,720
sets that

545
00:18:48,240 --> 00:18:53,200
and basically the application developer

546
00:18:50,720 --> 00:18:55,840
rolls it out with its application

547
00:18:53,200 --> 00:18:56,960
versus setting it mandatorily before the

548
00:18:55,840 --> 00:18:59,840
application is even

549
00:18:56,960 --> 00:19:02,320
being started which is what selinux and

550
00:18:59,840 --> 00:19:04,720
app armor are doing

551
00:19:02,320 --> 00:19:06,480
so it is widely available hopefully all

552
00:19:04,720 --> 00:19:08,320
your kernel versions support that

553
00:19:06,480 --> 00:19:11,280
you can use segcomp and hopefully have

554
00:19:08,320 --> 00:19:13,520
more secure applications

555
00:19:11,280 --> 00:19:15,039
if you want to write that more easily

556
00:19:13,520 --> 00:19:17,280
from your own application code

557
00:19:15,039 --> 00:19:18,720
there is a library called libsec comp

558
00:19:17,280 --> 00:19:21,200
and they have a lot of samples

559
00:19:18,720 --> 00:19:22,160
of how to write the filters from various

560
00:19:21,200 --> 00:19:24,880
applications

561
00:19:22,160 --> 00:19:26,080
so that might also make your life a bit

562
00:19:24,880 --> 00:19:28,960
easier to apply

563
00:19:26,080 --> 00:19:29,439
sec comp in your applications um and

564
00:19:28,960 --> 00:19:31,360
then all

565
00:19:29,440 --> 00:19:32,960
people always ask me about windows and i

566
00:19:31,360 --> 00:19:36,240
haven't used windows in years

567
00:19:32,960 --> 00:19:39,520
um but i googled um and

568
00:19:36,240 --> 00:19:41,919
this seems to be um the most similar

569
00:19:39,520 --> 00:19:43,679
system called filter that windows has

570
00:19:41,919 --> 00:19:45,200
and it has

571
00:19:43,679 --> 00:19:46,880
i guess everything is as terrible as the

572
00:19:45,200 --> 00:19:48,799
name is on there but

573
00:19:46,880 --> 00:19:50,320
um this is what you get and if windows

574
00:19:48,799 --> 00:19:51,520
is your thing look into it but i have no

575
00:19:50,320 --> 00:19:53,678
idea how it works

576
00:19:51,520 --> 00:19:54,559
and i i don't really intend to look into

577
00:19:53,679 --> 00:19:56,080
it too much

578
00:19:54,559 --> 00:19:57,840
but this is the closest equivalent that

579
00:19:56,080 --> 00:19:59,520
i could find

580
00:19:57,840 --> 00:20:01,280
and that's pretty much it i think we're

581
00:19:59,520 --> 00:20:01,840
right on time for a couple of minute

582
00:20:01,280 --> 00:20:03,120
questions

583
00:20:01,840 --> 00:20:05,120
if you want stickers grab the stickers

584
00:20:03,120 --> 00:20:07,520
afterwards

585
00:20:05,120 --> 00:20:08,879
wait for the microphone so everybody can

586
00:20:07,520 --> 00:20:12,029
hear the questions

587
00:20:08,880 --> 00:20:12,029
[Applause]

588
00:20:13,679 --> 00:20:16,880
by the way before we do the question i

589
00:20:15,280 --> 00:20:18,158
always try to take a picture with you so

590
00:20:16,880 --> 00:20:20,320
i can prove to my colleagues that i've

591
00:20:18,159 --> 00:20:21,679
been working

592
00:20:20,320 --> 00:20:23,120
because we're a fully distributed

593
00:20:21,679 --> 00:20:24,080
company and nobody knows where i am

594
00:20:23,120 --> 00:20:26,879
today

595
00:20:24,080 --> 00:20:26,879
can you all wave

596
00:20:27,600 --> 00:20:31,360
very good thank you question uh yeah so

597
00:20:30,640 --> 00:20:34,240
i was

598
00:20:31,360 --> 00:20:36,639
waiting to uh and uh wondering why you

599
00:20:34,240 --> 00:20:39,360
didn't mention the sleep sec comp

600
00:20:36,640 --> 00:20:41,120
uh and it was just on the last slide so

601
00:20:39,360 --> 00:20:42,320
the question would be why aren't you

602
00:20:41,120 --> 00:20:44,479
using it actually

603
00:20:42,320 --> 00:20:47,360
because as you mentioned uh doing that

604
00:20:44,480 --> 00:20:48,080
hard that work uh manually is quite hard

605
00:20:47,360 --> 00:20:51,039
you have to

606
00:20:48,080 --> 00:20:52,480
have those defines when which kernel

607
00:20:51,039 --> 00:20:54,799
version which architecture

608
00:20:52,480 --> 00:20:56,559
all that stuff and the lipset comp is

609
00:20:54,799 --> 00:20:57,360
actually doing that for you and making

610
00:20:56,559 --> 00:21:01,360
those

611
00:20:57,360 --> 00:21:02,879
ugly uh defines macros not necessary and

612
00:21:01,360 --> 00:21:06,320
all that stuff right

613
00:21:02,880 --> 00:21:06,799
and also gives you a much easier way if

614
00:21:06,320 --> 00:21:09,840
you

615
00:21:06,799 --> 00:21:13,120
not because of things thing you also

616
00:21:09,840 --> 00:21:16,879
i think not mentioned that you not only

617
00:21:13,120 --> 00:21:19,280
can filter which system calls can be

618
00:21:16,880 --> 00:21:21,280
used or not but you can also check the

619
00:21:19,280 --> 00:21:25,039
argument so for example you can

620
00:21:21,280 --> 00:21:28,240
only allow certain um

621
00:21:25,039 --> 00:21:32,559
syscalls if the arguments are right like

622
00:21:28,240 --> 00:21:36,000
you can allow read or write or open on

623
00:21:32,559 --> 00:21:36,559
only on some file descriptors or things

624
00:21:36,000 --> 00:21:38,320
like that

625
00:21:36,559 --> 00:21:40,000
so the main question is why aren't you

626
00:21:38,320 --> 00:21:40,399
using it if it's there and you know

627
00:21:40,000 --> 00:21:43,520
about

628
00:21:40,400 --> 00:21:45,120
it to be honest i don't know because

629
00:21:43,520 --> 00:21:46,639
i've only been with the company for four

630
00:21:45,120 --> 00:21:48,320
and a half or four years

631
00:21:46,640 --> 00:21:50,080
and it has been there before me so i

632
00:21:48,320 --> 00:21:51,439
kind of don't know the history why we

633
00:21:50,080 --> 00:21:55,360
started on our own path

634
00:21:51,440 --> 00:21:56,960
with without lipstep comp um

635
00:21:55,360 --> 00:21:59,840
i will try to find out it's actually a

636
00:21:56,960 --> 00:22:01,360
good point i i don't know why we

637
00:21:59,840 --> 00:22:04,559
maybe we didn't just didn't know about

638
00:22:01,360 --> 00:22:06,719
it i i don't know but it was a long time

639
00:22:04,559 --> 00:22:09,678
ago so

640
00:22:06,720 --> 00:22:11,600
yeah hi um hi uh great talk thank you um

641
00:22:09,679 --> 00:22:14,159
in docker there is a

642
00:22:11,600 --> 00:22:15,360
when you look at syscalls there is a set

643
00:22:14,159 --> 00:22:16,400
comp that is involved and also

644
00:22:15,360 --> 00:22:17,840
capabilities

645
00:22:16,400 --> 00:22:20,480
and i was wondering could you please

646
00:22:17,840 --> 00:22:22,799
describe how they both fit uh with these

647
00:22:20,480 --> 00:22:24,559
with each other like is docker

648
00:22:22,799 --> 00:22:27,120
generating a second policy

649
00:22:24,559 --> 00:22:29,120
relative to which capabilities are

650
00:22:27,120 --> 00:22:30,719
enabled or like i feel like there's

651
00:22:29,120 --> 00:22:33,360
two moving parts that i i don't know how

652
00:22:30,720 --> 00:22:33,360
to put together

653
00:22:33,679 --> 00:22:36,720
uh yeah with the capabilities you have

654
00:22:36,080 --> 00:22:39,120
you mean the

655
00:22:36,720 --> 00:22:40,400
like net admin whatever when you yeah

656
00:22:39,120 --> 00:22:43,280
for example there's a

657
00:22:40,400 --> 00:22:44,960
capsule yeah that controls the ptrace

658
00:22:43,280 --> 00:22:47,039
cisco but you can also block it in sick

659
00:22:44,960 --> 00:22:49,840
comp

660
00:22:47,039 --> 00:22:51,760
yes i i don't know how they they join

661
00:22:49,840 --> 00:22:53,678
together but yeah you can override

662
00:22:51,760 --> 00:22:54,960
basically the second filter with with

663
00:22:53,679 --> 00:22:57,840
that setting

664
00:22:54,960 --> 00:22:58,559
and you always set ah so i know that for

665
00:22:57,840 --> 00:23:00,158
example

666
00:22:58,559 --> 00:23:01,760
if you want to run a container that

667
00:23:00,159 --> 00:23:03,600
monitors the network calls from other

668
00:23:01,760 --> 00:23:04,480
containers you you need to set that net

669
00:23:03,600 --> 00:23:07,199
admin and

670
00:23:04,480 --> 00:23:08,000
that must override the filter because

671
00:23:07,200 --> 00:23:10,880
otherwise you wouldn't get

672
00:23:08,000 --> 00:23:12,400
to those um but how that's implemented

673
00:23:10,880 --> 00:23:13,679
in the background i

674
00:23:12,400 --> 00:23:22,960
i haven't checked the source code of

675
00:23:13,679 --> 00:23:25,039
docker for that okay thank you

676
00:23:22,960 --> 00:23:25,039
you

