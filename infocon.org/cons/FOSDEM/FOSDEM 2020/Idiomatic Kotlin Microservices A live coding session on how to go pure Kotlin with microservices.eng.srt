1
00:00:04,960 --> 00:00:09,360
hi everyone thank you for coming

2
00:00:06,960 --> 00:00:10,960
so i'm happy to welcome christoph that

3
00:00:09,360 --> 00:00:14,480
is going to talk about

4
00:00:10,960 --> 00:00:17,650
automatic cochlear microservices

5
00:00:14,480 --> 00:00:23,039
please give him a warm weapon

6
00:00:17,650 --> 00:00:26,960
[Applause]

7
00:00:23,039 --> 00:00:29,359
can you hear me yes so

8
00:00:26,960 --> 00:00:30,400
nice and dry and warm in here and no

9
00:00:29,359 --> 00:00:31,920
free wi-fi

10
00:00:30,400 --> 00:00:33,760
i guess that's the reason why most of us

11
00:00:31,920 --> 00:00:34,399
are some of you are using your laptop

12
00:00:33,760 --> 00:00:36,160
here

13
00:00:34,399 --> 00:00:37,920
still if you want to pay attention to me

14
00:00:36,160 --> 00:00:41,199
that would be nice otherwise just

15
00:00:37,920 --> 00:00:44,160
do whatever you're doing um how many of

16
00:00:41,200 --> 00:00:46,879
you actually are using kotlin

17
00:00:44,160 --> 00:00:50,559
wow i love that nice who of you are

18
00:00:46,879 --> 00:00:50,559
using kotlin as an android developer

19
00:00:50,879 --> 00:00:56,640
as a backend developer great

20
00:00:54,160 --> 00:00:57,680
something else i mean native anyone

21
00:00:56,640 --> 00:01:01,280
doing that

22
00:00:57,680 --> 00:01:03,359
nah thought so great um

23
00:01:01,280 --> 00:01:05,280
time is very limited and precious

24
00:01:03,359 --> 00:01:09,280
therefore i will start right away

25
00:01:05,280 --> 00:01:11,439
we are going to write an microservice

26
00:01:09,280 --> 00:01:14,159
so just for the sake of oh i'm a little

27
00:01:11,439 --> 00:01:17,279
bit shaky and nervous

28
00:01:14,159 --> 00:01:17,920
so just to give it a try please excuse

29
00:01:17,280 --> 00:01:22,159
if i

30
00:01:17,920 --> 00:01:26,640
missed up anything yes this works

31
00:01:22,159 --> 00:01:27,920
great success um what's the shortcut

32
00:01:26,640 --> 00:01:30,720
again here

33
00:01:27,920 --> 00:01:31,680
um i'm a big fan of tdd so test first

34
00:01:30,720 --> 00:01:34,560
approach therefore

35
00:01:31,680 --> 00:01:35,040
just go here and i'm not going to use

36
00:01:34,560 --> 00:01:37,439
spec

37
00:01:35,040 --> 00:01:38,640
i wanted to use spec but it didn't feel

38
00:01:37,439 --> 00:01:41,279
right it is

39
00:01:38,640 --> 00:01:43,040
like tailored to kotlin but honestly i

40
00:01:41,280 --> 00:01:44,799
want to be honest and therefore i use

41
00:01:43,040 --> 00:01:47,040
test ng because

42
00:01:44,799 --> 00:01:48,720
i just figured out it it suits my needs

43
00:01:47,040 --> 00:01:52,399
better than junit or

44
00:01:48,720 --> 00:01:57,759
spec so therefore we're going to go here

45
00:01:52,399 --> 00:01:57,759
and say we've got a test application

46
00:01:58,240 --> 00:02:04,960
we are firing a request and immediately

47
00:02:02,000 --> 00:02:04,960
start the result

48
00:02:07,680 --> 00:02:11,840
here and so we can immediately

49
00:02:10,150 --> 00:02:14,000
[Music]

50
00:02:11,840 --> 00:02:16,000
take that risk part and restart and say

51
00:02:14,000 --> 00:02:21,040
that we respond to the result

52
00:02:16,000 --> 00:02:24,160
the status code should be equals to

53
00:02:21,040 --> 00:02:28,000
um come on okay

54
00:02:24,160 --> 00:02:31,519
let's zoom out a little bit here

55
00:02:28,000 --> 00:02:35,040
can you read that code is readable

56
00:02:31,519 --> 00:02:36,080
yes thank you foo might not be a nice

57
00:02:35,040 --> 00:02:39,120
name

58
00:02:36,080 --> 00:02:42,879
so when we get the root path then

59
00:02:39,120 --> 00:02:46,080
200 okay then return 200 okay

60
00:02:42,879 --> 00:02:46,079
let's give that a try

61
00:02:46,560 --> 00:02:50,319
can we no we can't that's interesting i

62
00:02:49,360 --> 00:02:53,599
can't collapse that

63
00:02:50,319 --> 00:02:55,839
import statements here anyway it fades

64
00:02:53,599 --> 00:02:57,599
with actual nars so it doesn't fail with

65
00:02:55,840 --> 00:02:59,200
404 which is strange because the

66
00:02:57,599 --> 00:03:01,040
implementation of caters

67
00:02:59,200 --> 00:03:03,599
test engine so we are not spinning up a

68
00:03:01,040 --> 00:03:04,959
real hdb server here it's kind of a fake

69
00:03:03,599 --> 00:03:08,000
thing therefore it's lightning fast

70
00:03:04,959 --> 00:03:10,720
everyone who has used spring boots

71
00:03:08,000 --> 00:03:12,640
yeah we know the pain of having

72
00:03:10,720 --> 00:03:15,200
integration tests and they take like for

73
00:03:12,640 --> 00:03:17,599
hours cater is quite fast because it

74
00:03:15,200 --> 00:03:19,200
doesn't actually spin up a web server

75
00:03:17,599 --> 00:03:21,040
which comes with some drawbacks as well

76
00:03:19,200 --> 00:03:24,319
to be honest

77
00:03:21,040 --> 00:03:27,920
so we are going to actually start an

78
00:03:24,319 --> 00:03:30,958
embedded server here we are using

79
00:03:27,920 --> 00:03:34,559
neti for that purpose

80
00:03:30,959 --> 00:03:36,720
and here uh

81
00:03:34,560 --> 00:03:39,040
just externalize the application

82
00:03:36,720 --> 00:03:42,159
configuration we don't need you

83
00:03:39,040 --> 00:03:44,400
and we need to tell caterer to

84
00:03:42,159 --> 00:03:45,599
not immediately die afterwards so we

85
00:03:44,400 --> 00:03:47,599
tell him run as a demon in the

86
00:03:45,599 --> 00:03:50,798
background

87
00:03:47,599 --> 00:03:51,839
definition of a routing no rest

88
00:03:50,799 --> 00:03:55,680
controllers

89
00:03:51,840 --> 00:03:59,599
and weird things just pure kotlin

90
00:03:55,680 --> 00:04:01,040
so we do have our lambdas here the rule

91
00:03:59,599 --> 00:04:04,399
to

92
00:04:01,040 --> 00:04:04,400
why why why won't you work

93
00:04:04,879 --> 00:04:11,599
rooting root here

94
00:04:08,319 --> 00:04:15,040
yes oh you need the the

95
00:04:11,599 --> 00:04:18,478
second argument here and when

96
00:04:15,040 --> 00:04:22,639
you get the get we just

97
00:04:18,478 --> 00:04:26,080
respond the car with some text here

98
00:04:22,639 --> 00:04:30,350
and say hello foster

99
00:04:26,080 --> 00:04:32,240
so run the test again drummers

100
00:04:30,350 --> 00:04:34,560
[Music]

101
00:04:32,240 --> 00:04:36,240
still now meaning he can't find the end

102
00:04:34,560 --> 00:04:38,479
point

103
00:04:36,240 --> 00:04:39,280
so what we have to do is we actually

104
00:04:38,479 --> 00:04:42,639
need to

105
00:04:39,280 --> 00:04:44,799
wire up our let's do it like this

106
00:04:42,639 --> 00:04:46,639
our test application context and tell

107
00:04:44,800 --> 00:04:49,280
the application context here

108
00:04:46,639 --> 00:04:50,800
to also configure the cater endpoint

109
00:04:49,280 --> 00:04:53,520
here

110
00:04:50,800 --> 00:04:53,520
run it again

111
00:04:55,040 --> 00:04:59,280
great success is everyone still

112
00:04:57,680 --> 00:05:02,400
following me

113
00:04:59,280 --> 00:05:06,638
yeah it's like in school yeah

114
00:05:02,400 --> 00:05:10,400
thank you are you still awake

115
00:05:06,639 --> 00:05:13,520
yes great so that's for cool caterer

116
00:05:10,400 --> 00:05:15,840
it's like a amazingly lightweight

117
00:05:13,520 --> 00:05:17,840
lightweight alternative to spring spring

118
00:05:15,840 --> 00:05:18,638
boot i remember i gave a presentation

119
00:05:17,840 --> 00:05:21,919
about spring

120
00:05:18,639 --> 00:05:23,120
more than 10 years ago and i was

121
00:05:21,919 --> 00:05:25,359
announcing it as the

122
00:05:23,120 --> 00:05:26,960
lightweight alternative to ejb's

123
00:05:25,360 --> 00:05:29,199
enterprise jesus beans they're really

124
00:05:26,960 --> 00:05:31,680
heavyweight xml you know like really

125
00:05:29,199 --> 00:05:32,880
cumbersome and it was spring yeah nice

126
00:05:31,680 --> 00:05:35,919
freaking fast and

127
00:05:32,880 --> 00:05:37,759
like really like i could actually enjoy

128
00:05:35,919 --> 00:05:40,080
writing applications with spring

129
00:05:37,759 --> 00:05:42,479
nowadays spring is the heavyweight

130
00:05:40,080 --> 00:05:43,120
thing slow it can do everything maybe

131
00:05:42,479 --> 00:05:46,320
nothing

132
00:05:43,120 --> 00:05:48,000
can like it's holy it's really heavy so

133
00:05:46,320 --> 00:05:49,280
cater for me is what spring used to be

134
00:05:48,000 --> 00:05:52,880
10 years ago now

135
00:05:49,280 --> 00:05:56,318
it's really nice i love working with it

136
00:05:52,880 --> 00:05:57,280
add some magic how about something like

137
00:05:56,319 --> 00:06:00,000
spring

138
00:05:57,280 --> 00:06:01,440
used to be a spring framework used to be

139
00:06:00,000 --> 00:06:02,319
a dependency injection framework

140
00:06:01,440 --> 00:06:06,000
nowadays it's a

141
00:06:02,319 --> 00:06:08,400
jesus i can do everything silver bullet

142
00:06:06,000 --> 00:06:11,680
sorry for my bashing i'm very much

143
00:06:08,400 --> 00:06:14,080
opinionated so don't take me serious

144
00:06:11,680 --> 00:06:15,039
so the way you register beans no spring

145
00:06:14,080 --> 00:06:17,599
configuration no

146
00:06:15,039 --> 00:06:19,360
annotation tree like nowadays we in java

147
00:06:17,600 --> 00:06:20,240
we program in annotations not in java

148
00:06:19,360 --> 00:06:23,759
anymore

149
00:06:20,240 --> 00:06:25,199
we use the program in xml which is

150
00:06:23,759 --> 00:06:27,120
quite a little bit of an improvement but

151
00:06:25,199 --> 00:06:28,560
in kotlin we actually can use code to

152
00:06:27,120 --> 00:06:30,000
configure our application now that's

153
00:06:28,560 --> 00:06:31,759
awesome

154
00:06:30,000 --> 00:06:33,360
imagine the possibilities what we can do

155
00:06:31,759 --> 00:06:36,319
with code

156
00:06:33,360 --> 00:06:36,960
oh maybe i should first define some bean

157
00:06:36,319 --> 00:06:39,440
let's say

158
00:06:36,960 --> 00:06:40,400
you have a service and we read all

159
00:06:39,440 --> 00:06:43,120
models

160
00:06:40,400 --> 00:06:44,960
oh yeah what's a model we just have a

161
00:06:43,120 --> 00:06:48,479
model let's give it a name it

162
00:06:44,960 --> 00:06:50,479
needs to be a property so some dumb

163
00:06:48,479 --> 00:06:52,719
implementation of that service

164
00:06:50,479 --> 00:06:52,719
rip

165
00:06:54,720 --> 00:07:01,919
so let's return as a dummy bless you

166
00:06:59,440 --> 00:07:03,919
we return a model and give it some name

167
00:07:01,919 --> 00:07:07,440
doesn't matter

168
00:07:03,919 --> 00:07:10,560
so we bind that interface

169
00:07:07,440 --> 00:07:12,960
with that signature

170
00:07:10,560 --> 00:07:14,800
and pass it actually we don't need to

171
00:07:12,960 --> 00:07:15,520
instantiate that guy so make it an

172
00:07:14,800 --> 00:07:19,360
object class

173
00:07:15,520 --> 00:07:22,400
nice this here is these are infix

174
00:07:19,360 --> 00:07:25,759
functions we don't need dots reads

175
00:07:22,400 --> 00:07:29,520
like a novel

176
00:07:25,759 --> 00:07:32,800
um now i want to actually wire

177
00:07:29,520 --> 00:07:34,960
in here my code in guy

178
00:07:32,800 --> 00:07:36,639
so just use default arguments i need

179
00:07:34,960 --> 00:07:39,039
don't need to pass it over there

180
00:07:36,639 --> 00:07:40,639
i'm doing that for a reason you will see

181
00:07:39,039 --> 00:07:44,560
in a minute

182
00:07:40,639 --> 00:07:46,960
um we just get the service

183
00:07:44,560 --> 00:07:47,840
but telling codeine give me some service

184
00:07:46,960 --> 00:07:50,719
there is some

185
00:07:47,840 --> 00:07:52,719
lazy initialization here and when we

186
00:07:50,720 --> 00:07:55,120
respond we don't respond with a text

187
00:07:52,720 --> 00:07:58,879
actually but we respond

188
00:07:55,120 --> 00:08:01,199
with the are the models so run the tests

189
00:07:58,879 --> 00:08:01,199
again

190
00:08:04,000 --> 00:08:08,240
so couldn't transform single list so he

191
00:08:07,680 --> 00:08:10,960
is not

192
00:08:08,240 --> 00:08:12,080
capable of transforming this list of

193
00:08:10,960 --> 00:08:14,080
models into a

194
00:08:12,080 --> 00:08:16,240
json object so let's just tell him how

195
00:08:14,080 --> 00:08:18,400
to do that we are going to install

196
00:08:16,240 --> 00:08:20,560
a feature a feature which is called

197
00:08:18,400 --> 00:08:22,080
content negotiation

198
00:08:20,560 --> 00:08:23,759
we've got several possibilities here

199
00:08:22,080 --> 00:08:26,000
jesus and jackson

200
00:08:23,759 --> 00:08:28,080
and i would like to go pure kotlin and

201
00:08:26,000 --> 00:08:29,440
that's the code in extra realization

202
00:08:28,080 --> 00:08:32,079
library

203
00:08:29,440 --> 00:08:33,838
so that should be enough right so now he

204
00:08:32,080 --> 00:08:36,000
magically registered some

205
00:08:33,839 --> 00:08:37,519
things oh no he still doesn't know how

206
00:08:36,000 --> 00:08:40,799
to do that

207
00:08:37,519 --> 00:08:43,039
can't locate argument less serializer

208
00:08:40,799 --> 00:08:44,880
jetbrains claims that kotlin is

209
00:08:43,039 --> 00:08:46,319
compatible with java yes this is true

210
00:08:44,880 --> 00:08:48,240
from a language perspective

211
00:08:46,320 --> 00:08:49,440
from but from a from a framework

212
00:08:48,240 --> 00:08:51,200
perspective that's

213
00:08:49,440 --> 00:08:54,800
due to the paradigm shift that's not

214
00:08:51,200 --> 00:08:57,200
fully true they came up with solutions

215
00:08:54,800 --> 00:08:58,399
maybe more like hex uh with compiler

216
00:08:57,200 --> 00:09:00,800
plugins you have

217
00:08:58,399 --> 00:09:02,080
zero arc constructor and to open up all

218
00:09:00,800 --> 00:09:03,680
my classes afterwards you know

219
00:09:02,080 --> 00:09:06,240
everything is fine and suddenly compiler

220
00:09:03,680 --> 00:09:07,760
goes there and makes it open like wow

221
00:09:06,240 --> 00:09:10,480
for me that's a little bit like a smell

222
00:09:07,760 --> 00:09:12,480
but anyway so if you work with hibernate

223
00:09:10,480 --> 00:09:14,000
you also we're already in the misery of

224
00:09:12,480 --> 00:09:17,120
having the need of

225
00:09:14,000 --> 00:09:23,200
introducing zero r constructors

226
00:09:17,120 --> 00:09:25,920
through some plugin and bam

227
00:09:23,200 --> 00:09:25,920
so much for

228
00:09:26,480 --> 00:09:30,480
coding now i actually would like to test

229
00:09:28,880 --> 00:09:33,040
that oh me

230
00:09:30,480 --> 00:09:35,360
sorry i just didn't write a test first

231
00:09:33,040 --> 00:09:37,680
happens

232
00:09:35,360 --> 00:09:39,839
ah blame me play me please this is this

233
00:09:37,680 --> 00:09:42,959
is this is really not good

234
00:09:39,839 --> 00:09:45,600
so we could of course go there and and

235
00:09:42,959 --> 00:09:48,160
assert on on string level and then you

236
00:09:45,600 --> 00:09:50,160
know you need to watch out for

237
00:09:48,160 --> 00:09:52,000
white space and stuff so i don't want to

238
00:09:50,160 --> 00:09:55,519
do that so i want to say

239
00:09:52,000 --> 00:09:58,480
it should be how do we do that

240
00:09:55,519 --> 00:10:01,279
as a json let's just do it like this we

241
00:09:58,480 --> 00:10:01,279
haven't seen anything

242
00:10:01,760 --> 00:10:05,200
and this is me cheating a little bit uh

243
00:10:03,760 --> 00:10:08,319
this is an as a k

244
00:10:05,200 --> 00:10:09,440
as a case the k part of s j oh wow so

245
00:10:08,320 --> 00:10:13,360
creative

246
00:10:09,440 --> 00:10:15,920
on a string and it says given that

247
00:10:13,360 --> 00:10:17,120
you know do some magic that expected

248
00:10:15,920 --> 00:10:19,279
should be transformed

249
00:10:17,120 --> 00:10:20,959
and there should be no extra arguments

250
00:10:19,279 --> 00:10:22,560
it just will ignore all the white space

251
00:10:20,959 --> 00:10:24,800
and ordering and stuff

252
00:10:22,560 --> 00:10:27,279
so i just assume that this is already

253
00:10:24,800 --> 00:10:30,640
existing maybe the snk library should

254
00:10:27,279 --> 00:10:32,240
could use some requests to actually

255
00:10:30,640 --> 00:10:34,800
incorporate that extension function

256
00:10:32,240 --> 00:10:37,120
would be nice

257
00:10:34,800 --> 00:10:38,880
so let's run the test again you know

258
00:10:37,120 --> 00:10:42,399
always fail first

259
00:10:38,880 --> 00:10:45,360
bam it face expected values but got one

260
00:10:42,399 --> 00:10:48,959
you can please tell me which one you got

261
00:10:45,360 --> 00:10:52,240
anyway i know there's one object

262
00:10:48,959 --> 00:10:56,640
where whose name is i guess x

263
00:10:52,240 --> 00:10:59,519
is it x yes

264
00:10:56,640 --> 00:11:00,319
great success i don't like that i don't

265
00:10:59,519 --> 00:11:02,480
like that there are

266
00:11:00,320 --> 00:11:04,000
implicit assumptions in the given part

267
00:11:02,480 --> 00:11:04,880
there is something which is actually not

268
00:11:04,000 --> 00:11:08,480
in the

269
00:11:04,880 --> 00:11:11,680
in the then part in the desert part

270
00:11:08,480 --> 00:11:13,360
it doesn't show up in the given part so

271
00:11:11,680 --> 00:11:17,040
we are going to change that

272
00:11:13,360 --> 00:11:22,000
but first i'd like to split those tests

273
00:11:17,040 --> 00:11:23,760
so give them a stopped service when get

274
00:11:22,000 --> 00:11:27,279
root buff then return

275
00:11:23,760 --> 00:11:29,120
proper json whatever remember here i

276
00:11:27,279 --> 00:11:31,680
passed in

277
00:11:29,120 --> 00:11:33,680
instance of codeine but i immediately

278
00:11:31,680 --> 00:11:37,359
used a default argument

279
00:11:33,680 --> 00:11:41,120
because now i can actually override my

280
00:11:37,360 --> 00:11:44,399
in spring speak application context

281
00:11:41,120 --> 00:11:46,399
we therefore extend the original codeine

282
00:11:44,399 --> 00:11:50,079
part we extend the original

283
00:11:46,399 --> 00:11:54,560
binding of a single beam but in my test

284
00:11:50,079 --> 00:11:58,239
i'm going to override it

285
00:11:54,560 --> 00:11:58,239
with a testable service

286
00:11:58,480 --> 00:12:02,320
and we will give it some model so first

287
00:12:01,760 --> 00:12:06,959
of all

288
00:12:02,320 --> 00:12:06,959
i need some model

289
00:12:09,279 --> 00:12:15,200
and the testable service is just a kind

290
00:12:12,160 --> 00:12:15,199
of a stop here

291
00:12:15,440 --> 00:12:21,920
so it requires a list of

292
00:12:19,279 --> 00:12:25,839
models it implements the service

293
00:12:21,920 --> 00:12:25,839
interface as well

294
00:12:27,519 --> 00:12:32,800
singer expression method nice ah that's

295
00:12:30,399 --> 00:12:34,800
so nice and shiny i love kotlin so much

296
00:12:32,800 --> 00:12:38,000
that's so amazing

297
00:12:34,800 --> 00:12:39,199
yeah i'm in love with the language run

298
00:12:38,000 --> 00:12:41,600
it again

299
00:12:39,200 --> 00:12:42,959
what the just happened here yeah uh

300
00:12:41,600 --> 00:12:44,639
we need to pass it the list

301
00:12:42,959 --> 00:12:46,160
actually i don't like it to pass a list

302
00:12:44,639 --> 00:12:48,399
you know that's somehow weird

303
00:12:46,160 --> 00:12:50,079
maybe do some constructor magic here

304
00:12:48,399 --> 00:12:53,440
secondary constructor

305
00:12:50,079 --> 00:12:55,760
which requires

306
00:12:53,440 --> 00:12:58,800
and record the same constructor but just

307
00:12:55,760 --> 00:13:02,720
transform it to a list

308
00:12:58,800 --> 00:13:02,719
why won't you why won't you work

309
00:13:04,639 --> 00:13:07,920
oh yeah thank you so much wow if it

310
00:13:06,800 --> 00:13:08,479
would have something to give away you

311
00:13:07,920 --> 00:13:12,079
would

312
00:13:08,480 --> 00:13:16,639
get it now it can have a sticker ah

313
00:13:12,079 --> 00:13:19,680
too bad why won't it work

314
00:13:16,639 --> 00:13:22,160
uh yeah of course because in my here

315
00:13:19,680 --> 00:13:24,719
what i can do now is what i like way

316
00:13:22,160 --> 00:13:24,719
better is

317
00:13:26,240 --> 00:13:33,040
come on come on out the completion

318
00:13:30,000 --> 00:13:35,279
intellij and kotlin it's not there yet

319
00:13:33,040 --> 00:13:37,199
java is still ahead in my opinion java

320
00:13:35,279 --> 00:13:38,399
support intellij is still superior then

321
00:13:37,200 --> 00:13:41,760
kotlin's

322
00:13:38,399 --> 00:13:42,959
done so i like that in my given part i

323
00:13:41,760 --> 00:13:45,360
actually repeat what is

324
00:13:42,959 --> 00:13:47,199
exerted in the then part and so the

325
00:13:45,360 --> 00:13:48,399
testing is in full control of what's

326
00:13:47,199 --> 00:13:51,599
going on

327
00:13:48,399 --> 00:13:55,600
codeine put into caterer

328
00:13:51,600 --> 00:13:55,600
having lightning fast everything kotlin

329
00:13:56,160 --> 00:14:01,279
brief seven more minutes

330
00:13:59,519 --> 00:14:04,480
the last nice thing i want to show you

331
00:14:01,279 --> 00:14:07,360
is exposed 10 minutes

332
00:14:04,480 --> 00:14:10,639
oh wow even nicer in that case i can

333
00:14:07,360 --> 00:14:10,639
talk a little bit slower

334
00:14:11,279 --> 00:14:16,399
exposed it's jetbrains

335
00:14:14,560 --> 00:14:17,760
hibernate alternative i would say it's

336
00:14:16,399 --> 00:14:18,480
not really hype under third if it's just

337
00:14:17,760 --> 00:14:20,800
a lightweight

338
00:14:18,480 --> 00:14:21,760
sequel whatever it is i'm not good with

339
00:14:20,800 --> 00:14:25,680
words i just do

340
00:14:21,760 --> 00:14:25,680
writing code that's what i love

341
00:14:26,880 --> 00:14:30,240
someone once told me at the beginning of

342
00:14:28,480 --> 00:14:32,000
my studies you know like dependency

343
00:14:30,240 --> 00:14:33,279
injection and inversion of control

344
00:14:32,000 --> 00:14:34,880
that's awesome and like

345
00:14:33,279 --> 00:14:36,800
i don't know what you're talking about

346
00:14:34,880 --> 00:14:38,959
but i really feel stupid now

347
00:14:36,800 --> 00:14:41,120
and like two years later i actually got

348
00:14:38,959 --> 00:14:41,839
to know the words the buzzwords like

349
00:14:41,120 --> 00:14:43,360
dependent

350
00:14:41,839 --> 00:14:45,360
injection like yeah i actually used it

351
00:14:43,360 --> 00:14:46,959
for years already like you

352
00:14:45,360 --> 00:14:49,279
if i would have known that like years

353
00:14:46,959 --> 00:14:51,119
ago like so i'm kind of bad with

354
00:14:49,279 --> 00:14:52,800
words but i actually know them but i

355
00:14:51,120 --> 00:14:54,880
don't know how to call it

356
00:14:52,800 --> 00:14:55,920
most of the time so if you come up and

357
00:14:54,880 --> 00:14:57,839
someone is

358
00:14:55,920 --> 00:15:01,040
you know like playing cards and use all

359
00:14:57,839 --> 00:15:02,639
these passwords just yeah whatever

360
00:15:01,040 --> 00:15:04,319
so we have an implementation of the

361
00:15:02,639 --> 00:15:09,040
model repository we call it

362
00:15:04,320 --> 00:15:12,240
the exposed mod repo repository

363
00:15:09,040 --> 00:15:14,639
it's a model repository uh yeah

364
00:15:12,240 --> 00:15:15,680
quite boring we just do a read all again

365
00:15:14,639 --> 00:15:19,199
and we won't

366
00:15:15,680 --> 00:15:19,839
have a specific database object kind of

367
00:15:19,199 --> 00:15:22,079
type

368
00:15:19,839 --> 00:15:24,839
for the sake of simplicity maybe we're

369
00:15:22,079 --> 00:15:28,000
going to introduce it if there's still a

370
00:15:24,839 --> 00:15:31,199
time so i'm just going to

371
00:15:28,000 --> 00:15:33,360
cheat here cut that here paste it in

372
00:15:31,199 --> 00:15:35,839
here for the time being

373
00:15:33,360 --> 00:15:37,519
and i actually want this service which

374
00:15:35,839 --> 00:15:38,160
now needs to be a class because it will

375
00:15:37,519 --> 00:15:41,279
have a

376
00:15:38,160 --> 00:15:44,719
reference to our let's call it repo

377
00:15:41,279 --> 00:15:48,720
so it just delegates to that repo

378
00:15:44,720 --> 00:15:51,199
missing about here repo redog so here

379
00:15:48,720 --> 00:15:51,920
compiler thank you that's interesting i

380
00:15:51,199 --> 00:15:54,000
just say

381
00:15:51,920 --> 00:15:56,160
instance you know just figure out the

382
00:15:54,000 --> 00:15:57,440
type which is needed here and somehow do

383
00:15:56,160 --> 00:16:00,880
your magic

384
00:15:57,440 --> 00:16:03,120
so i need to satisfy here

385
00:16:00,880 --> 00:16:05,360
i'm again here doing no test first shame

386
00:16:03,120 --> 00:16:08,800
on me

387
00:16:05,360 --> 00:16:11,440
i maybe just run the test now

388
00:16:08,800 --> 00:16:11,920
so we require a bean which he cannot

389
00:16:11,440 --> 00:16:14,480
find

390
00:16:11,920 --> 00:16:16,399
i guess so no binding found for model

391
00:16:14,480 --> 00:16:19,600
repository with

392
00:16:16,399 --> 00:16:22,160
strange singleton instance actually

393
00:16:19,600 --> 00:16:23,519
so actually here he says binding the

394
00:16:22,160 --> 00:16:25,360
dummy service requires a model

395
00:16:23,519 --> 00:16:27,040
repository so let's give him another

396
00:16:25,360 --> 00:16:28,399
repository i have no clue what's going

397
00:16:27,040 --> 00:16:32,880
to happen

398
00:16:28,399 --> 00:16:32,880
um here missing some parenthesis

399
00:16:33,839 --> 00:16:37,600
compiler i like statically typed

400
00:16:35,440 --> 00:16:40,079
languages so much

401
00:16:37,600 --> 00:16:41,920
so this all goes through still i'm a

402
00:16:40,079 --> 00:16:43,519
little bit concerned

403
00:16:41,920 --> 00:16:45,360
because actually there's there's nothing

404
00:16:43,519 --> 00:16:46,160
happening here there's no no real

405
00:16:45,360 --> 00:16:49,199
database

406
00:16:46,160 --> 00:16:52,240
interaction going on so how about

407
00:16:49,199 --> 00:16:55,519
defining the table which is basically

408
00:16:52,240 --> 00:16:58,800
oh surprise a table and it

409
00:16:55,519 --> 00:17:01,920
is a varchar and

410
00:16:58,800 --> 00:17:03,439
the table column should be named name

411
00:17:01,920 --> 00:17:05,678
and the length whatever something like

412
00:17:03,440 --> 00:17:07,919
50.

413
00:17:05,679 --> 00:17:09,760
so in the implementation rather than

414
00:17:07,919 --> 00:17:12,559
have our dummy implementation here

415
00:17:09,760 --> 00:17:13,919
we can actually go and say the model

416
00:17:12,559 --> 00:17:17,280
table

417
00:17:13,919 --> 00:17:21,280
select r we need to transform

418
00:17:17,280 --> 00:17:23,119
this kind of result set into a model

419
00:17:21,280 --> 00:17:27,439
and there is only one property which is

420
00:17:23,119 --> 00:17:27,438
name so we get back from the

421
00:17:27,520 --> 00:17:32,639
model table dot name so this is how you

422
00:17:30,640 --> 00:17:35,440
do a mapping

423
00:17:32,640 --> 00:17:37,440
the selector gives you back a result row

424
00:17:35,440 --> 00:17:38,559
a result set we used to call it back in

425
00:17:37,440 --> 00:17:42,320
the good old days

426
00:17:38,559 --> 00:17:47,840
and just map it with this magic right

427
00:17:42,320 --> 00:17:47,840
let's give the run

428
00:17:48,240 --> 00:17:52,320
please call database connect oh yeah

429
00:17:49,840 --> 00:17:56,000
let's do that that's nice thank you

430
00:17:52,320 --> 00:17:59,439
so let's call it connect to database

431
00:17:56,000 --> 00:18:00,480
database url i'm going to do some magic

432
00:17:59,440 --> 00:18:04,640
here again

433
00:18:00,480 --> 00:18:04,640
and immediately make it a

434
00:18:05,760 --> 00:18:11,440
default argument parameter

435
00:18:09,520 --> 00:18:13,679
i don't want you to close immediately

436
00:18:11,440 --> 00:18:17,280
your connection

437
00:18:13,679 --> 00:18:18,080
so please wait with that and the url and

438
00:18:17,280 --> 00:18:21,200
the driver

439
00:18:18,080 --> 00:18:22,559
i use a h2 database

440
00:18:21,200 --> 00:18:24,799
of course this needs to be invoked

441
00:18:22,559 --> 00:18:28,160
somewhere so maybe when we

442
00:18:24,799 --> 00:18:30,320
start up the web server we also start

443
00:18:28,160 --> 00:18:33,039
up the connection the database that

444
00:18:30,320 --> 00:18:33,039
should work right

445
00:18:34,080 --> 00:18:40,320
bless you please call connect

446
00:18:37,360 --> 00:18:40,320
what's happening here

447
00:18:41,280 --> 00:18:44,320
oh yeah test we need to do that in the

448
00:18:43,200 --> 00:18:45,760
test as well because

449
00:18:44,320 --> 00:18:47,360
this is out of the scope of the test the

450
00:18:45,760 --> 00:18:49,440
test is actually just starting up cater

451
00:18:47,360 --> 00:18:52,320
with this cater configuration

452
00:18:49,440 --> 00:18:53,360
so really dirty i would not recommend

453
00:18:52,320 --> 00:18:58,080
doing that

454
00:18:53,360 --> 00:19:00,479
in retest this is just for the sake of

455
00:18:58,080 --> 00:19:01,760
demoing it here just want to use a

456
00:19:00,480 --> 00:19:04,799
different

457
00:19:01,760 --> 00:19:08,080
in-memory name here

458
00:19:04,799 --> 00:19:10,799
no transaction oh where then maybe he

459
00:19:08,080 --> 00:19:14,320
needs some transactional magic here

460
00:19:10,799 --> 00:19:16,720
so just go there and say transaction

461
00:19:14,320 --> 00:19:17,360
are we done yet come on like step by

462
00:19:16,720 --> 00:19:18,799
step

463
00:19:17,360 --> 00:19:21,199
no we're not there's still one more

464
00:19:18,799 --> 00:19:23,918
thing missing because he states

465
00:19:21,200 --> 00:19:25,840
where is it table not existing table

466
00:19:23,919 --> 00:19:28,960
model not found yeah then let's create a

467
00:19:25,840 --> 00:19:28,959
table model thank you

468
00:19:29,200 --> 00:19:33,440
so we just after we connected

469
00:19:31,679 --> 00:19:35,679
immediately we're going to do

470
00:19:33,440 --> 00:19:37,039
a schema utils this is just something

471
00:19:35,679 --> 00:19:40,720
you have to know and create

472
00:19:37,039 --> 00:19:42,400
model table you do it once um

473
00:19:40,720 --> 00:19:44,240
make a transaction otherwise you will

474
00:19:42,400 --> 00:19:47,440
complain

475
00:19:44,240 --> 00:19:49,440
um in my work project i have implemented

476
00:19:47,440 --> 00:19:49,919
some class path scanning and it feels a

477
00:19:49,440 --> 00:19:51,840
little bit

478
00:19:49,919 --> 00:19:53,520
like spring boot again yes to be honest

479
00:19:51,840 --> 00:19:55,039
i annotate things and

480
00:19:53,520 --> 00:19:57,440
actually use interfaces rather than

481
00:19:55,039 --> 00:20:00,320
annotations so

482
00:19:57,440 --> 00:20:03,679
yeah this is a one time setup now come

483
00:20:00,320 --> 00:20:03,678
on come on do it do it

484
00:20:04,840 --> 00:20:10,799
done

485
00:20:07,360 --> 00:20:11,840
yeah looking good so far connect to the

486
00:20:10,799 --> 00:20:15,200
database

487
00:20:11,840 --> 00:20:17,520
we have our web server we have a caterer

488
00:20:15,200 --> 00:20:19,600
using codain as our dependency injection

489
00:20:17,520 --> 00:20:22,158
framework with json serialization with

490
00:20:19,600 --> 00:20:25,360
the code in exteriorization library

491
00:20:22,159 --> 00:20:27,919
it's a routing quite straightforward

492
00:20:25,360 --> 00:20:29,760
you can marshal our model into proper

493
00:20:27,919 --> 00:20:32,640
json

494
00:20:29,760 --> 00:20:32,640
first services

495
00:20:33,280 --> 00:20:36,320
we don't have tests for the exposed

496
00:20:34,799 --> 00:20:38,400
model repository here

497
00:20:36,320 --> 00:20:39,918
would be nice to have some but i decided

498
00:20:38,400 --> 00:20:42,400
not to do that

499
00:20:39,919 --> 00:20:43,520
something i personally like doing is

500
00:20:42,400 --> 00:20:46,720
instead of

501
00:20:43,520 --> 00:20:48,559
instantiating my my value objects here

502
00:20:46,720 --> 00:20:51,120
manually because i actually don't care

503
00:20:48,559 --> 00:20:53,039
what value is in there so i rather go

504
00:20:51,120 --> 00:20:56,600
here and say any

505
00:20:53,039 --> 00:20:58,799
that's not possible okay so we just say

506
00:20:56,600 --> 00:21:00,320
model.companion.any make it a function

507
00:20:58,799 --> 00:21:05,200
so it's reusable

508
00:21:00,320 --> 00:21:07,600
test instances right

509
00:21:05,200 --> 00:21:08,400
and it actually works i didn't expect it

510
00:21:07,600 --> 00:21:12,320
to work because

511
00:21:08,400 --> 00:21:12,320
usually what's necessary is do this

512
00:21:12,880 --> 00:21:17,200
but for some magical reason i guess

513
00:21:15,280 --> 00:21:20,320
because of the serializable

514
00:21:17,200 --> 00:21:22,640
annotation yes

515
00:21:20,320 --> 00:21:24,320
interesting i didn't know that i usually

516
00:21:22,640 --> 00:21:26,640
use jackson to be honest

517
00:21:24,320 --> 00:21:27,678
shame on me i'm not using a pure kotlin

518
00:21:26,640 --> 00:21:30,880
library

519
00:21:27,679 --> 00:21:32,640
maybe i will so now we can go there and

520
00:21:30,880 --> 00:21:34,559
this is kind of reusable test

521
00:21:32,640 --> 00:21:37,360
infrastructure

522
00:21:34,559 --> 00:21:39,520
already stuff and i can rather go here

523
00:21:37,360 --> 00:21:42,799
and say model.any

524
00:21:39,520 --> 00:21:44,799
that's also the the way i do it with

525
00:21:42,799 --> 00:21:47,360
transforming mapping it from from rest

526
00:21:44,799 --> 00:21:48,720
data transfer objects to domain objects

527
00:21:47,360 --> 00:21:51,039
to database objects

528
00:21:48,720 --> 00:21:52,159
there are extension functions which can

529
00:21:51,039 --> 00:21:53,200
transform

530
00:21:52,159 --> 00:21:56,000
your model into different

531
00:21:53,200 --> 00:21:56,000
representations

532
00:21:57,600 --> 00:22:02,240
yes i guess that's it and this project

533
00:22:01,280 --> 00:22:04,879
is on github

534
00:22:02,240 --> 00:22:07,919
it's of course everything pure kotlin so

535
00:22:04,880 --> 00:22:10,400
the greater configuration is kotlin here

536
00:22:07,919 --> 00:22:12,000
so i can actually declare functions here

537
00:22:10,400 --> 00:22:13,919
that's really nice

538
00:22:12,000 --> 00:22:15,120
and i really like the build source

539
00:22:13,919 --> 00:22:17,120
directory here

540
00:22:15,120 --> 00:22:19,439
because what i do here is i have an

541
00:22:17,120 --> 00:22:20,639
object which almost with all my

542
00:22:19,440 --> 00:22:22,640
versions because you might have

543
00:22:20,640 --> 00:22:25,520
encountered a problem in

544
00:22:22,640 --> 00:22:27,360
gradle with the kotlin dsl that if you

545
00:22:25,520 --> 00:22:30,960
got here a version number you can't

546
00:22:27,360 --> 00:22:34,158
actually declare version number here

547
00:22:30,960 --> 00:22:35,760
and reference it here because of the way

548
00:22:34,159 --> 00:22:37,360
gradle is just designed that's not

549
00:22:35,760 --> 00:22:39,280
possible so you have to re-declare the

550
00:22:37,360 --> 00:22:41,199
code inversion two times but

551
00:22:39,280 --> 00:22:43,600
having this thing actually solves the

552
00:22:41,200 --> 00:22:43,600
problem

553
00:22:45,280 --> 00:22:55,840
yes i'm done thank you for attention i

554
00:22:48,400 --> 00:22:55,840
hope you understood

555
00:22:56,799 --> 00:23:00,559
any questions yeah we have a couple of

556
00:22:58,559 --> 00:23:08,080
minutes for one or two questions

557
00:23:00,559 --> 00:23:11,440
simple questions yes

558
00:23:08,080 --> 00:23:14,639
hi uh may i know your opinion about

559
00:23:11,440 --> 00:23:18,159
a kator versus micron out or

560
00:23:14,640 --> 00:23:18,159
a quarkus frameworks

561
00:23:18,320 --> 00:23:22,559
thank you for asking about my opinion i

562
00:23:20,159 --> 00:23:26,000
like that

563
00:23:22,559 --> 00:23:26,639
my opinion about cater versus micro node

564
00:23:26,000 --> 00:23:28,240
and

565
00:23:26,640 --> 00:23:30,559
the other one i didn't get but i think i

566
00:23:28,240 --> 00:23:30,960
also don't know it which it also applies

567
00:23:30,559 --> 00:23:33,360
to

568
00:23:30,960 --> 00:23:35,280
macronut therefore my opinion is i go

569
00:23:33,360 --> 00:23:38,080
for cater because i know it

570
00:23:35,280 --> 00:23:39,360
it's some jet brains when i when i look

571
00:23:38,080 --> 00:23:41,760
for microservices

572
00:23:39,360 --> 00:23:42,879
web frameworks the first thing we popped

573
00:23:41,760 --> 00:23:44,720
up was

574
00:23:42,880 --> 00:23:46,559
cater and i think it's more popular

575
00:23:44,720 --> 00:23:48,240
therefore that's highly biased

576
00:23:46,559 --> 00:23:50,799
so please don't take my answer too

577
00:23:48,240 --> 00:23:52,000
seriously micronaut i've heard about it

578
00:23:50,799 --> 00:23:54,320
never used it

579
00:23:52,000 --> 00:23:56,640
so i can't answer that still go for

580
00:23:54,320 --> 00:23:56,639
cater

581
00:23:58,159 --> 00:24:03,440
anyone one more people leaving people

582
00:24:01,440 --> 00:24:05,360
coming

583
00:24:03,440 --> 00:24:06,559
otherwise everybody here if you feel

584
00:24:05,360 --> 00:24:09,199
like talk

585
00:24:06,559 --> 00:24:09,918
chat exchange please feel free to

586
00:24:09,200 --> 00:24:19,840
approach me

587
00:24:09,919 --> 00:24:19,840
thank you so much

588
00:24:20,960 --> 00:24:23,039
you

