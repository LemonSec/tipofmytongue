1
00:00:05,200 --> 00:00:08,160
thanks for being there

2
00:00:06,399 --> 00:00:09,920
uh we're almost at the end of the

3
00:00:08,160 --> 00:00:13,040
session so

4
00:00:09,920 --> 00:00:15,838
it's probably has been a long way

5
00:00:13,040 --> 00:00:16,160
so i'm going to talk about what we're

6
00:00:15,839 --> 00:00:19,279
doing

7
00:00:16,160 --> 00:00:22,080
in user space networking with

8
00:00:19,279 --> 00:00:23,198
rdma so it's not really about rdma per c

9
00:00:22,080 --> 00:00:25,198
you will see that

10
00:00:23,199 --> 00:00:26,480
in the course of the talk my name is

11
00:00:25,199 --> 00:00:29,760
bernard i'm working at

12
00:00:26,480 --> 00:00:33,200
cisco and i'm working on vpp

13
00:00:29,760 --> 00:00:34,160
so for those who missed excellent talk

14
00:00:33,200 --> 00:00:37,680
about quick from

15
00:00:34,160 --> 00:00:41,760
from my colleagues a few words about vpp

16
00:00:37,680 --> 00:00:45,200
vpp is user space

17
00:00:41,760 --> 00:00:48,559
software networking platform

18
00:00:45,200 --> 00:00:50,640
and it strives to be uh

19
00:00:48,559 --> 00:00:52,559
very very fast and have a lot of

20
00:00:50,640 --> 00:00:55,199
features like you know

21
00:00:52,559 --> 00:00:56,800
tunneling routing switching all those

22
00:00:55,199 --> 00:01:00,399
kind of stuff and even

23
00:00:56,800 --> 00:01:03,199
layer 4 like tcp udp and now quick

24
00:01:00,399 --> 00:01:05,439
but that's at the very bottom of our

25
00:01:03,199 --> 00:01:06,240
stack we need to receive and transmit

26
00:01:05,438 --> 00:01:08,960
packets

27
00:01:06,240 --> 00:01:10,000
and we need to do that efficiently and

28
00:01:08,960 --> 00:01:13,839
from time to time

29
00:01:10,000 --> 00:01:15,600
we we ask ourselves the question okay

30
00:01:13,840 --> 00:01:19,439
do we need to write our own network

31
00:01:15,600 --> 00:01:19,439
driver for the to do that

32
00:01:19,520 --> 00:01:27,280
and sometimes we we have to uh so

33
00:01:23,439 --> 00:01:29,839
first why do we do use space networking

34
00:01:27,280 --> 00:01:31,520
mostly because of performance but also

35
00:01:29,840 --> 00:01:34,960
because

36
00:01:31,520 --> 00:01:36,798
it allows us to update

37
00:01:34,960 --> 00:01:38,720
more easily network functions in the

38
00:01:36,799 --> 00:01:42,079
field if you have

39
00:01:38,720 --> 00:01:43,840
some of your networking functions uh

40
00:01:42,079 --> 00:01:45,919
that you you need to update you don't

41
00:01:43,840 --> 00:01:46,640
necessarily want your wall hose to be

42
00:01:45,920 --> 00:01:48,399
down

43
00:01:46,640 --> 00:01:49,920
because you need to reboot to start a

44
00:01:48,399 --> 00:01:52,000
new kernel um

45
00:01:49,920 --> 00:01:55,600
so this is the features that your space

46
00:01:52,000 --> 00:01:57,680
networking brings us um

47
00:01:55,600 --> 00:01:59,039
and and then the next question is okay

48
00:01:57,680 --> 00:02:00,079
why do you need to write your own

49
00:01:59,040 --> 00:02:03,360
natural driver

50
00:02:00,079 --> 00:02:04,719
especially as uh as now you know you we

51
00:02:03,360 --> 00:02:08,239
have the gdpk

52
00:02:04,719 --> 00:02:11,359
which which have a lot of drivers uh

53
00:02:08,239 --> 00:02:11,760
already available and we do use dpdk a

54
00:02:11,360 --> 00:02:14,640
lot

55
00:02:11,760 --> 00:02:15,599
in vpp uh we rely on it for a lot of

56
00:02:14,640 --> 00:02:18,640
drivers

57
00:02:15,599 --> 00:02:19,679
but sometimes for specific drivers we

58
00:02:18,640 --> 00:02:22,799
want to go

59
00:02:19,680 --> 00:02:24,640
a little bit further in term of

60
00:02:22,800 --> 00:02:26,000
getting better performance and ease of

61
00:02:24,640 --> 00:02:29,200
use

62
00:02:26,000 --> 00:02:30,800
and in that case we need to go to

63
00:02:29,200 --> 00:02:33,839
develop our own

64
00:02:30,800 --> 00:02:35,280
our own network driver and this is an

65
00:02:33,840 --> 00:02:38,560
example here where we

66
00:02:35,280 --> 00:02:42,160
did a native development it was for

67
00:02:38,560 --> 00:02:46,480
the um intel xl710

68
00:02:42,160 --> 00:02:49,760
so i thought you know 40 gig intel nix

69
00:02:46,480 --> 00:02:53,119
were by developing all native drivers

70
00:02:49,760 --> 00:02:55,840
we gain about 25 percent uh

71
00:02:53,120 --> 00:02:57,760
performance boost on some workloads like

72
00:02:55,840 --> 00:03:00,640
ipv4 forwarding

73
00:02:57,760 --> 00:03:01,200
with two million fruits so that's that's

74
00:03:00,640 --> 00:03:02,879
something

75
00:03:01,200 --> 00:03:05,599
which is important for us and one of the

76
00:03:02,879 --> 00:03:08,720
main reasons of that is because

77
00:03:05,599 --> 00:03:12,000
when you're using an external driver

78
00:03:08,720 --> 00:03:14,239
uh you have like dpdk for example

79
00:03:12,000 --> 00:03:15,040
you might have some translation

80
00:03:14,239 --> 00:03:17,599
happening

81
00:03:15,040 --> 00:03:19,920
between metadata this is actually

82
00:03:17,599 --> 00:03:23,200
something that even the dpdk has

83
00:03:19,920 --> 00:03:24,079
for example with xdp uh that they

84
00:03:23,200 --> 00:03:26,798
presented in

85
00:03:24,080 --> 00:03:27,519
a narrower talk so when you get a packet

86
00:03:26,799 --> 00:03:29,360
from

87
00:03:27,519 --> 00:03:30,799
another driver you usually need to

88
00:03:29,360 --> 00:03:32,720
convert the

89
00:03:30,799 --> 00:03:36,159
you know the the bits describing your

90
00:03:32,720 --> 00:03:39,680
packet such as the length of the packets

91
00:03:36,159 --> 00:03:42,319
is the checksum good this kind of stuff

92
00:03:39,680 --> 00:03:43,760
in dpp we have our own representation in

93
00:03:42,319 --> 00:03:45,839
dpdk

94
00:03:43,760 --> 00:03:47,679
they have their own representation in

95
00:03:45,840 --> 00:03:49,440
xcp you have another one

96
00:03:47,680 --> 00:03:53,360
so you need to translate between that

97
00:03:49,440 --> 00:03:53,359
and that costs some performance

98
00:03:53,680 --> 00:03:57,360
that being said it's not always an easy

99
00:03:56,400 --> 00:04:00,720
decision

100
00:03:57,360 --> 00:04:03,120
because first usually when you do use a

101
00:04:00,720 --> 00:04:04,720
space networking and with your own user

102
00:04:03,120 --> 00:04:06,319
space network drivers

103
00:04:04,720 --> 00:04:08,640
you're losing integration with the

104
00:04:06,319 --> 00:04:10,879
kernel and that's a pity because

105
00:04:08,640 --> 00:04:11,760
uh you're using you know your favorite

106
00:04:10,879 --> 00:04:15,280
tools like

107
00:04:11,760 --> 00:04:17,839
uh h tool and blah blah blah and

108
00:04:15,280 --> 00:04:18,880
it makes things harder to deploy harder

109
00:04:17,839 --> 00:04:21,839
to monitor

110
00:04:18,880 --> 00:04:22,880
etc so that that's uh that's one of the

111
00:04:21,839 --> 00:04:26,080
problem

112
00:04:22,880 --> 00:04:27,440
um another thing is what we really care

113
00:04:26,080 --> 00:04:29,440
in vpp for example

114
00:04:27,440 --> 00:04:30,880
in our case is we want to receive and

115
00:04:29,440 --> 00:04:33,040
transmit backup efficiently

116
00:04:30,880 --> 00:04:34,800
we don't care about initially initially

117
00:04:33,040 --> 00:04:37,520
legalizing the device

118
00:04:34,800 --> 00:04:38,320
configuring it making it work but we

119
00:04:37,520 --> 00:04:40,799
have to

120
00:04:38,320 --> 00:04:43,360
and unfortunately it happens that most

121
00:04:40,800 --> 00:04:46,160
of the time it's the most complex

122
00:04:43,360 --> 00:04:47,600
most complex parts of the work when you

123
00:04:46,160 --> 00:04:50,160
write your drivers

124
00:04:47,600 --> 00:04:52,240
there is a lot of codes which goes and a

125
00:04:50,160 --> 00:04:55,759
lot of

126
00:04:52,240 --> 00:04:57,040
data sheet rating which goes into okay

127
00:04:55,759 --> 00:05:00,240
how should i

128
00:04:57,040 --> 00:05:01,120
initialize it to make it work and

129
00:05:00,240 --> 00:05:04,080
finally

130
00:05:01,120 --> 00:05:04,400
uh something that we should not forget

131
00:05:04,080 --> 00:05:07,199
is

132
00:05:04,400 --> 00:05:08,560
well hardware is hard and i will share

133
00:05:07,199 --> 00:05:11,919
with you some

134
00:05:08,560 --> 00:05:14,160
some story later on about that but

135
00:05:11,919 --> 00:05:16,080
that's that's basically the our problem

136
00:05:14,160 --> 00:05:19,199
statement let's say

137
00:05:16,080 --> 00:05:21,680
so rdma um

138
00:05:19,199 --> 00:05:23,039
rdma stands for remote direct memory

139
00:05:21,680 --> 00:05:25,680
access

140
00:05:23,039 --> 00:05:26,560
it was designed originally for message

141
00:05:25,680 --> 00:05:29,759
passing and

142
00:05:26,560 --> 00:05:32,720
data transfer especially for the hpc

143
00:05:29,759 --> 00:05:34,639
or storage applications so it's a very

144
00:05:32,720 --> 00:05:38,400
efficient way to move data around

145
00:05:34,639 --> 00:05:41,440
or in a network and um

146
00:05:38,400 --> 00:05:42,638
it has evolved uh to support ethernet

147
00:05:41,440 --> 00:05:46,080
transport

148
00:05:42,639 --> 00:05:48,960
so now we have rdma protocols

149
00:05:46,080 --> 00:05:49,599
which runs on ethernet and ip such as

150
00:05:48,960 --> 00:05:53,840
iwap

151
00:05:49,600 --> 00:05:56,479
and roki and key properties of rdma

152
00:05:53,840 --> 00:05:58,719
is so you have some hardware offloads

153
00:05:56,479 --> 00:06:00,719
it's kernel bypass meaning that

154
00:05:58,720 --> 00:06:02,400
you get the data directly from the nic

155
00:06:00,720 --> 00:06:05,440
without having to go through

156
00:06:02,400 --> 00:06:06,479
the kernel and sometimes have data copy

157
00:06:05,440 --> 00:06:09,520
etc

158
00:06:06,479 --> 00:06:11,840
um so it's also zero copy

159
00:06:09,520 --> 00:06:12,880
and it's usually very high performance

160
00:06:11,840 --> 00:06:15,919
so

161
00:06:12,880 --> 00:06:16,719
it's it's looked like a good uh a good

162
00:06:15,919 --> 00:06:18,719
thing to use

163
00:06:16,720 --> 00:06:20,639
for networking especially for user space

164
00:06:18,720 --> 00:06:23,039
networking and on the

165
00:06:20,639 --> 00:06:24,960
right side of the slide i try to picture

166
00:06:23,039 --> 00:06:28,479
a very simplified way

167
00:06:24,960 --> 00:06:31,520
of how the rdma stacks looks like

168
00:06:28,479 --> 00:06:33,758
so on the top you have the rdma nick

169
00:06:31,520 --> 00:06:34,719
the hardware in blue in the middle you

170
00:06:33,759 --> 00:06:36,080
have the kernel

171
00:06:34,720 --> 00:06:38,400
which basically does all the

172
00:06:36,080 --> 00:06:39,919
configurations and control

173
00:06:38,400 --> 00:06:41,679
and at the bottom you have the user

174
00:06:39,919 --> 00:06:43,440
space so you have a library in your

175
00:06:41,680 --> 00:06:47,039
space which is called libabe

176
00:06:43,440 --> 00:06:49,120
verbs and which is used to

177
00:06:47,039 --> 00:06:51,280
talk to the kernel but also to the

178
00:06:49,120 --> 00:06:52,560
hardware to move data around

179
00:06:51,280 --> 00:06:54,719
and at the bottom which has the

180
00:06:52,560 --> 00:06:56,960
application in our case it's vpp but it

181
00:06:54,720 --> 00:07:00,479
it can be anything

182
00:06:56,960 --> 00:07:03,039
and the nice thing is

183
00:07:00,479 --> 00:07:03,758
with rdma the data move directly from

184
00:07:03,039 --> 00:07:06,960
the

185
00:07:03,759 --> 00:07:10,160
hardware to the user space software so

186
00:07:06,960 --> 00:07:14,080
there is no data touching in the can

187
00:07:10,160 --> 00:07:17,280
at all that says we are not

188
00:07:14,080 --> 00:07:18,960
that interesting in rdma itself in vpp

189
00:07:17,280 --> 00:07:21,440
at least for now

190
00:07:18,960 --> 00:07:22,638
we're more interesting and interested in

191
00:07:21,440 --> 00:07:26,080
ethernet packets

192
00:07:22,639 --> 00:07:29,360
and it happens that

193
00:07:26,080 --> 00:07:33,280
rdma have been extended for

194
00:07:29,360 --> 00:07:33,280
ethernet support somehow

195
00:07:33,440 --> 00:07:39,360
and they introduce a new kind of

196
00:07:37,120 --> 00:07:40,960
cues that you can use to send and

197
00:07:39,360 --> 00:07:43,520
receive internet packets

198
00:07:40,960 --> 00:07:45,440
which is called a couper type pro

199
00:07:43,520 --> 00:07:48,400
packets

200
00:07:45,440 --> 00:07:50,639
and the nice thing about it is it relies

201
00:07:48,400 --> 00:07:53,679
on packet steering

202
00:07:50,639 --> 00:07:56,479
to move back to

203
00:07:53,680 --> 00:07:57,520
let's say to steer packets between

204
00:07:56,479 --> 00:08:00,878
different queues

205
00:07:57,520 --> 00:08:04,719
so that allows the kernel

206
00:08:00,879 --> 00:08:08,080
network device to to stay

207
00:08:04,720 --> 00:08:08,479
with its own set of queues for receiving

208
00:08:08,080 --> 00:08:10,560
and

209
00:08:08,479 --> 00:08:12,479
transmitting packets while your

210
00:08:10,560 --> 00:08:13,280
applications get a different set of

211
00:08:12,479 --> 00:08:16,159
queues

212
00:08:13,280 --> 00:08:18,080
and your application can also receive

213
00:08:16,160 --> 00:08:21,199
and transmit packets

214
00:08:18,080 --> 00:08:25,039
and the uh hardware will

215
00:08:21,199 --> 00:08:28,160
actually select which

216
00:08:25,039 --> 00:08:28,800
cues it needs to send packets to based

217
00:08:28,160 --> 00:08:31,360
on

218
00:08:28,800 --> 00:08:33,360
flow you program so that allows you to

219
00:08:31,360 --> 00:08:34,560
have your user space applications having

220
00:08:33,360 --> 00:08:38,000
a direct access

221
00:08:34,559 --> 00:08:41,119
to the network hardware

222
00:08:38,000 --> 00:08:41,839
while retaining you your kernel device

223
00:08:41,120 --> 00:08:44,000
so you

224
00:08:41,839 --> 00:08:45,680
your net device does not disappear

225
00:08:44,000 --> 00:08:46,800
suddenly because you you start your

226
00:08:45,680 --> 00:08:50,399
application

227
00:08:46,800 --> 00:08:52,880
um and as the the packet steering

228
00:08:50,399 --> 00:08:54,160
is based on what you want to program

229
00:08:52,880 --> 00:08:57,040
there

230
00:08:54,160 --> 00:08:57,839
you can implement you know things like

231
00:08:57,040 --> 00:09:00,880
similar to

232
00:08:57,839 --> 00:09:03,040
macvillan or ipvlan so you can say oh my

233
00:09:00,880 --> 00:09:03,760
application is interested in all the

234
00:09:03,040 --> 00:09:06,719
packets

235
00:09:03,760 --> 00:09:08,240
with uh this specific destination mac

236
00:09:06,720 --> 00:09:11,360
for example if you

237
00:09:08,240 --> 00:09:13,360
uh or my application is interested uh i

238
00:09:11,360 --> 00:09:14,480
will buy all the packets with this

239
00:09:13,360 --> 00:09:17,360
specific ip

240
00:09:14,480 --> 00:09:18,240
and you you can go even further up the

241
00:09:17,360 --> 00:09:19,279
stack if you

242
00:09:18,240 --> 00:09:22,000
if you want a difference of the

243
00:09:19,279 --> 00:09:24,800
capabilities of the hardware basically

244
00:09:22,000 --> 00:09:25,680
so nice model and this next model is

245
00:09:24,800 --> 00:09:28,880
actually quite

246
00:09:25,680 --> 00:09:32,160
easy to use at least if you um

247
00:09:28,880 --> 00:09:34,480
if you use a libabee verb so

248
00:09:32,160 --> 00:09:35,600
here is a simplified example but the

249
00:09:34,480 --> 00:09:38,720
full example

250
00:09:35,600 --> 00:09:41,760
uh you can have a look at the simple but

251
00:09:38,720 --> 00:09:42,480
uh fully working example on on github

252
00:09:41,760 --> 00:09:45,279
here

253
00:09:42,480 --> 00:09:45,760
uh the full example is like 200 lines of

254
00:09:45,279 --> 00:09:48,000
code

255
00:09:45,760 --> 00:09:50,240
so it's it's not very complex right and

256
00:09:48,000 --> 00:09:53,279
it's a little depending on your hardware

257
00:09:50,240 --> 00:09:55,440
uh your mileage may vary but

258
00:09:53,279 --> 00:09:57,519
typically for me it tells me to send

259
00:09:55,440 --> 00:09:59,120
like 20 million packets per second with

260
00:09:57,519 --> 00:10:02,480
one cpu

261
00:09:59,120 --> 00:10:05,680
uh so it's it's not bad for for a simple

262
00:10:02,480 --> 00:10:07,920
stupid uh test so

263
00:10:05,680 --> 00:10:09,760
the way it works is you just get a

264
00:10:07,920 --> 00:10:10,560
handle on the device you're interested

265
00:10:09,760 --> 00:10:12,720
in and this

266
00:10:10,560 --> 00:10:15,359
this is all user space right with some

267
00:10:12,720 --> 00:10:18,480
help from from the kernel here

268
00:10:15,360 --> 00:10:20,959
then you initialize your queues so

269
00:10:18,480 --> 00:10:22,000
rdma has a concept of q pairs so you

270
00:10:20,959 --> 00:10:25,040
basically get

271
00:10:22,000 --> 00:10:28,240
cues to push the packets and

272
00:10:25,040 --> 00:10:30,160
use to get the results of what you do

273
00:10:28,240 --> 00:10:32,959
and the same is true for receiving

274
00:10:30,160 --> 00:10:36,399
packets you get cues to

275
00:10:32,959 --> 00:10:39,279
push your descriptors to tell the nic

276
00:10:36,399 --> 00:10:40,480
where it must put the packet you're

277
00:10:39,279 --> 00:10:42,959
entertaining

278
00:10:40,480 --> 00:10:43,839
and completion cues again to get

279
00:10:42,959 --> 00:10:47,839
notified

280
00:10:43,839 --> 00:10:47,839
when new packets are coming

281
00:10:48,079 --> 00:10:53,760
and then you just push your

282
00:10:51,600 --> 00:10:55,519
worksheet elements which which are like

283
00:10:53,760 --> 00:10:59,519
iovs

284
00:10:55,519 --> 00:11:01,200
io vectors and you do that in a loop

285
00:10:59,519 --> 00:11:03,440
and that's so valid so that's pretty

286
00:11:01,200 --> 00:11:05,120
cool you can go a little bit deeper

287
00:11:03,440 --> 00:11:07,440
with direct verb so again it's an

288
00:11:05,120 --> 00:11:07,839
extension in ib verbs which allows you

289
00:11:07,440 --> 00:11:10,800
to

290
00:11:07,839 --> 00:11:11,839
you do the same thing as previously but

291
00:11:10,800 --> 00:11:15,599
you just get

292
00:11:11,839 --> 00:11:17,440
the direct access to the hardware rings

293
00:11:15,600 --> 00:11:20,560
so instead of going through the

294
00:11:17,440 --> 00:11:23,279
mediation of the lib ib verb to

295
00:11:20,560 --> 00:11:24,239
get your packets you go directly to the

296
00:11:23,279 --> 00:11:26,320
dma rings

297
00:11:24,240 --> 00:11:28,320
which is really great because in that

298
00:11:26,320 --> 00:11:30,959
case you don't have

299
00:11:28,320 --> 00:11:31,360
any metadata translation anymore you

300
00:11:30,959 --> 00:11:34,239
just

301
00:11:31,360 --> 00:11:34,640
get the raw packets given to you by the

302
00:11:34,240 --> 00:11:37,360
nic

303
00:11:34,640 --> 00:11:37,360
so that's pretty cool

304
00:11:38,079 --> 00:11:42,000
an example for us what we first

305
00:11:41,200 --> 00:11:45,600
developed

306
00:11:42,000 --> 00:11:48,160
an ib vibration for uh for

307
00:11:45,600 --> 00:11:50,320
the the driver and yeah it gives us

308
00:11:48,160 --> 00:11:52,800
around 20 million packets per second

309
00:11:50,320 --> 00:11:54,320
uh for a layer two cross connects or

310
00:11:52,800 --> 00:11:55,920
layer two cross connected just

311
00:11:54,320 --> 00:11:57,519
you move back at around between two

312
00:11:55,920 --> 00:12:00,079
ports but you

313
00:11:57,519 --> 00:12:01,279
check that the uh you know as a net

314
00:12:00,079 --> 00:12:03,599
headers etc

315
00:12:01,279 --> 00:12:04,639
are well formed so you you're still

316
00:12:03,600 --> 00:12:06,800
touching the

317
00:12:04,639 --> 00:12:08,000
the header of the packets but you don't

318
00:12:06,800 --> 00:12:09,599
do much

319
00:12:08,000 --> 00:12:11,680
uh so it gives us around 20 million

320
00:12:09,600 --> 00:12:12,399
packets per second next step is direct

321
00:12:11,680 --> 00:12:16,638
verbs

322
00:12:12,399 --> 00:12:19,279
so going to for the uh hardware rings

323
00:12:16,639 --> 00:12:19,920
and yeah while doing that i actually

324
00:12:19,279 --> 00:12:22,240
tried to

325
00:12:19,920 --> 00:12:23,680
while i was trying to debug my drivers i

326
00:12:22,240 --> 00:12:25,680
saw that the nick could

327
00:12:23,680 --> 00:12:27,680
give me some hardware traces i tried to

328
00:12:25,680 --> 00:12:30,638
enable that and i almost braked it

329
00:12:27,680 --> 00:12:33,040
so that's why you need to be careful

330
00:12:30,639 --> 00:12:33,040
about

331
00:12:33,120 --> 00:12:36,800
when you're doing out very low level

332
00:12:35,360 --> 00:12:38,800
development with hardware

333
00:12:36,800 --> 00:12:40,719
and yeah the next steps we'll have we

334
00:12:38,800 --> 00:12:42,319
will like to add our

335
00:12:40,720 --> 00:12:44,720
support for things like checksum

336
00:12:42,320 --> 00:12:46,560
offloads and tso

337
00:12:44,720 --> 00:12:48,160
so in conclusion what i would like to

338
00:12:46,560 --> 00:12:50,719
say is uh

339
00:12:48,160 --> 00:12:52,160
as a user space networking developer we

340
00:12:50,720 --> 00:12:54,399
really like this model

341
00:12:52,160 --> 00:12:56,560
we like the fact that we don't need to

342
00:12:54,399 --> 00:12:59,680
write any code to initialize a nic

343
00:12:56,560 --> 00:13:02,000
that's great we like the fact that

344
00:12:59,680 --> 00:13:02,959
we are not stealing the nick from the

345
00:13:02,000 --> 00:13:05,680
kernel that's

346
00:13:02,959 --> 00:13:06,800
that's really cool too and of course we

347
00:13:05,680 --> 00:13:09,839
really like the fact that

348
00:13:06,800 --> 00:13:12,479
it gives us a great performance but

349
00:13:09,839 --> 00:13:13,440
uh these are some limitations first it's

350
00:13:12,480 --> 00:13:16,399
rdma so

351
00:13:13,440 --> 00:13:16,959
it's restricted to iodma capable nics

352
00:13:16,399 --> 00:13:19,440
and

353
00:13:16,959 --> 00:13:21,279
more precisely right now um it's

354
00:13:19,440 --> 00:13:24,160
something that melanox can

355
00:13:21,279 --> 00:13:25,680
came up with uh and thanks to them for

356
00:13:24,160 --> 00:13:28,719
for that great technology

357
00:13:25,680 --> 00:13:31,279
uh it it works really well but well

358
00:13:28,720 --> 00:13:33,279
there's only melanox for now so if other

359
00:13:31,279 --> 00:13:33,760
vendors could also support that we will

360
00:13:33,279 --> 00:13:36,880
be

361
00:13:33,760 --> 00:13:39,760
very happy about it and the

362
00:13:36,880 --> 00:13:40,959
the final thing is it's a little bit

363
00:13:39,760 --> 00:13:43,360
outside of my

364
00:13:40,959 --> 00:13:44,719
domain knowledge but i'm wondering okay

365
00:13:43,360 --> 00:13:47,440
could uh

366
00:13:44,720 --> 00:13:48,560
could we apply these same kind of

367
00:13:47,440 --> 00:13:51,680
features

368
00:13:48,560 --> 00:13:52,079
to other with a mechanism for example

369
00:13:51,680 --> 00:13:55,120
maybe

370
00:13:52,079 --> 00:13:57,279
vfiomdev could allow us to get you know

371
00:13:55,120 --> 00:13:58,800
uh we don't touch sonic for

372
00:13:57,279 --> 00:13:59,920
initialization because we don't care

373
00:13:58,800 --> 00:14:03,760
about that but

374
00:13:59,920 --> 00:14:06,560
we get direct access to to the rings

375
00:14:03,760 --> 00:14:07,519
maybe af xdp also could help us in there

376
00:14:06,560 --> 00:14:10,319
so right now my

377
00:14:07,519 --> 00:14:13,120
my understanding of ifxdp is you still

378
00:14:10,320 --> 00:14:15,519
have some metadata conversions between

379
00:14:13,120 --> 00:14:16,320
what the kernels get and what it gives

380
00:14:15,519 --> 00:14:18,480
you so

381
00:14:16,320 --> 00:14:20,160
that means that you you you get some

382
00:14:18,480 --> 00:14:22,880
decreased performance because of that

383
00:14:20,160 --> 00:14:24,160
but maybe maybe we could use that also

384
00:14:22,880 --> 00:14:25,920
as a foundation to

385
00:14:24,160 --> 00:14:27,839
to have something similar so i don't

386
00:14:25,920 --> 00:14:31,040
know that's that's just you know

387
00:14:27,839 --> 00:14:34,160
food for thought and and that's about it

388
00:14:31,040 --> 00:14:37,040
so and i don't know if there are uh if

389
00:14:34,160 --> 00:14:37,040
there is any question

390
00:14:42,839 --> 00:14:45,839
um

391
00:14:54,959 --> 00:15:01,680
okay so the question is do we use the

392
00:14:58,240 --> 00:15:04,880
uh this to send a packet over the

393
00:15:01,680 --> 00:15:07,920
rdma stack so like i work for rocky

394
00:15:04,880 --> 00:15:08,880
or do we use that to to send raw

395
00:15:07,920 --> 00:15:10,880
ethernet

396
00:15:08,880 --> 00:15:12,160
standard isn't it packet so this is

397
00:15:10,880 --> 00:15:15,439
actually the the second

398
00:15:12,160 --> 00:15:16,160
uh we we don't use at all rdma protocols

399
00:15:15,440 --> 00:15:18,240
per c

400
00:15:16,160 --> 00:15:19,680
we're just using the rdm infrastructure

401
00:15:18,240 --> 00:15:22,399
to send and receive

402
00:15:19,680 --> 00:15:22,800
all ethernet there is no iowa nora key

403
00:15:22,399 --> 00:15:25,120
there

404
00:15:22,800 --> 00:15:26,560
it's just using the infrastructure which

405
00:15:25,120 --> 00:15:28,800
is already there

406
00:15:26,560 --> 00:15:30,880
but instead just sending ethernet

407
00:15:28,800 --> 00:15:33,599
packets

408
00:15:30,880 --> 00:15:34,560
why did you try to write your own

409
00:15:33,600 --> 00:15:38,480
implementation

410
00:15:34,560 --> 00:15:38,479
of a

411
00:15:38,560 --> 00:15:43,839
sorry why did you try to to use a direct

412
00:15:41,839 --> 00:15:45,759
verb by yourself and did not use the

413
00:15:43,839 --> 00:15:49,680
dptk implementation

414
00:15:45,759 --> 00:15:53,440
okay this already exists and already

415
00:15:49,680 --> 00:15:57,279
right right yes uh well the the reason

416
00:15:53,440 --> 00:16:01,680
is mostly because of this so the

417
00:15:57,279 --> 00:16:05,279
performance in dpdk is already have

418
00:16:01,680 --> 00:16:08,319
a maximum maximum

419
00:16:05,279 --> 00:16:11,920
maximum available performance sure if

420
00:16:08,320 --> 00:16:15,680
if you can fit if you can fit in the

421
00:16:11,920 --> 00:16:18,000
dpdk metadata format and etc the thing

422
00:16:15,680 --> 00:16:19,199
the issue we have with vpp is it

423
00:16:18,000 --> 00:16:23,040
predicts dpdk

424
00:16:19,199 --> 00:16:25,839
by like 10 years and so we have our own

425
00:16:23,040 --> 00:16:27,920
uh buffer metadata format and we can't

426
00:16:25,839 --> 00:16:29,839
change that easily i mean it will be

427
00:16:27,920 --> 00:16:32,240
basically a completely right of the

428
00:16:29,839 --> 00:16:35,519
world code base which is not

429
00:16:32,240 --> 00:16:36,560
doable and so it means that no matter

430
00:16:35,519 --> 00:16:39,600
what we do

431
00:16:36,560 --> 00:16:43,680
we need to pay the tax of converting

432
00:16:39,600 --> 00:16:46,720
rta rt mbuff format to our own

433
00:16:43,680 --> 00:16:49,120
uh metadata format and

434
00:16:46,720 --> 00:16:50,800
so you have an example here for the

435
00:16:49,120 --> 00:16:53,199
intel xl710

436
00:16:50,800 --> 00:16:54,880
uh the dpdk driver for the intel uh

437
00:16:53,199 --> 00:16:56,800
excel 710 i'm sure

438
00:16:54,880 --> 00:16:58,240
as the greatest performance can get

439
00:16:56,800 --> 00:17:01,120
right but

440
00:16:58,240 --> 00:17:03,040
when we integrate it into vpp because of

441
00:17:01,120 --> 00:17:06,000
this metadata

442
00:17:03,040 --> 00:17:07,839
translation and blah blah blah we're

443
00:17:06,000 --> 00:17:09,520
losing performance on the table

444
00:17:07,839 --> 00:17:12,079
so that's that's one of the points the

445
00:17:09,520 --> 00:17:15,439
other point is the ease of use which

446
00:17:12,079 --> 00:17:18,559
we found that dpdk can be quite

447
00:17:15,439 --> 00:17:21,600
picky about about uh

448
00:17:18,559 --> 00:17:23,439
what it needs to run uh like you know oh

449
00:17:21,599 --> 00:17:24,879
it really wants huge pages and this kind

450
00:17:23,439 --> 00:17:28,079
of stuff which is

451
00:17:24,880 --> 00:17:30,240
not always easy to get in you know

452
00:17:28,079 --> 00:17:33,678
containerized environment etc

453
00:17:30,240 --> 00:17:37,440
and so that's that's another um

454
00:17:33,679 --> 00:17:37,440
thing we we try to overcome with that

455
00:17:39,120 --> 00:17:42,639
sorry we need to kind of switch the next

456
00:17:42,160 --> 00:17:47,840
speaker

457
00:17:42,640 --> 00:17:47,840
thank you

458
00:17:52,559 --> 00:17:54,639
you

