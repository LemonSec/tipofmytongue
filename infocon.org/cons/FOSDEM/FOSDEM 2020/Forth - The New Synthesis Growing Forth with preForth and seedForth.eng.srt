1
00:00:15,200 --> 00:00:21,279
yeah okay hello welcome

2
00:00:16,720 --> 00:00:21,279
thank you very much for joining and um

3
00:00:22,160 --> 00:00:27,840
i will talk about uh fourth and uh some

4
00:00:25,519 --> 00:00:30,479
experiments that we did with foss so my

5
00:00:27,840 --> 00:00:32,719
first question is who else of you has

6
00:00:30,480 --> 00:00:35,920
heard about force

7
00:00:32,719 --> 00:00:39,280
okay who has written a fourth program

8
00:00:35,920 --> 00:00:42,399
okay i see so i try to be

9
00:00:39,280 --> 00:00:44,239
with the terminology close to normal

10
00:00:42,399 --> 00:00:47,280
computer science terminology

11
00:00:44,239 --> 00:00:49,599
because force has its own kind of

12
00:00:47,280 --> 00:00:51,600
language i try to be as understandable

13
00:00:49,600 --> 00:00:53,840
as possible

14
00:00:51,600 --> 00:00:56,239
i will talk about the new synthesis

15
00:00:53,840 --> 00:00:57,840
that's a project that's ongoing and we

16
00:00:56,239 --> 00:01:00,640
try to

17
00:00:57,840 --> 00:01:01,199
understand the essentials of computation

18
00:01:00,640 --> 00:01:04,400
and

19
00:01:01,199 --> 00:01:07,920
find minimalistic ways to uh

20
00:01:04,400 --> 00:01:11,200
realize things and build the basis

21
00:01:07,920 --> 00:01:14,640
of computation and for this we build

22
00:01:11,200 --> 00:01:17,759
a family of fos-like languages with

23
00:01:14,640 --> 00:01:18,640
restrictions and certain properties i

24
00:01:17,759 --> 00:01:21,759
will go then

25
00:01:18,640 --> 00:01:23,200
and talk about the ice concept i think

26
00:01:21,759 --> 00:01:24,159
most of you wouldn't have heard about

27
00:01:23,200 --> 00:01:27,360
this before

28
00:01:24,159 --> 00:01:27,920
but it's about 20 years ago that charles

29
00:01:27,360 --> 00:01:30,000
moore

30
00:01:27,920 --> 00:01:31,840
the inventor of force proposed the ice

31
00:01:30,000 --> 00:01:33,759
concept so we will look at this and see

32
00:01:31,840 --> 00:01:36,159
that other programming languages

33
00:01:33,759 --> 00:01:38,000
have this as well and today i will focus

34
00:01:36,159 --> 00:01:40,960
on seed force

35
00:01:38,000 --> 00:01:42,880
which is in one of this languages in the

36
00:01:40,960 --> 00:01:46,240
family of things that we do

37
00:01:42,880 --> 00:01:47,360
and the special thing about it it

38
00:01:46,240 --> 00:01:50,158
doesn't accept

39
00:01:47,360 --> 00:01:51,680
text-based source code but it accepts

40
00:01:50,159 --> 00:01:54,479
tokenized source code and we will look

41
00:01:51,680 --> 00:01:56,799
into the details and why is this uh

42
00:01:54,479 --> 00:01:57,759
of advantage in the setup that we're

43
00:01:56,799 --> 00:02:00,719
looking at

44
00:01:57,759 --> 00:02:02,079
um yeah and then we do some summary and

45
00:02:00,719 --> 00:02:05,280
we have probably time for

46
00:02:02,079 --> 00:02:06,960
our question answers um

47
00:02:05,280 --> 00:02:08,318
yeah i already said we want to

48
00:02:06,960 --> 00:02:10,399
understand the

49
00:02:08,318 --> 00:02:12,079
general foundation of computational so

50
00:02:10,399 --> 00:02:15,200
how small can it be

51
00:02:12,080 --> 00:02:17,680
looking at for newman architecture and

52
00:02:15,200 --> 00:02:18,879
find out what is the essential really

53
00:02:17,680 --> 00:02:20,800
and

54
00:02:18,879 --> 00:02:22,879
with a fourth background especially we

55
00:02:20,800 --> 00:02:23,680
want to know about the basic principles

56
00:02:22,879 --> 00:02:26,879
of force

57
00:02:23,680 --> 00:02:29,680
so what can be left out there's a

58
00:02:26,879 --> 00:02:30,480
international standard and of course you

59
00:02:29,680 --> 00:02:33,680
look at this

60
00:02:30,480 --> 00:02:34,560
following the quote from the little

61
00:02:33,680 --> 00:02:36,560
prince

62
00:02:34,560 --> 00:02:38,480
take away what is not necessary and then

63
00:02:36,560 --> 00:02:41,599
you'll find perfection

64
00:02:38,480 --> 00:02:44,720
and so we want to go there

65
00:02:41,599 --> 00:02:47,119
uh make things smaller and

66
00:02:44,720 --> 00:02:48,560
have a sound basis and then let things

67
00:02:47,120 --> 00:02:53,120
grow again

68
00:02:48,560 --> 00:02:56,319
so um yeah we want by this a bit uh

69
00:02:53,120 --> 00:02:59,599
basis of a new modern force and i'm

70
00:02:56,319 --> 00:03:03,679
think about this morning's talks so even

71
00:02:59,599 --> 00:03:07,200
a poem language or xp that we just saw

72
00:03:03,680 --> 00:03:10,400
could be implemented not just on llvm

73
00:03:07,200 --> 00:03:11,359
but on our basis and so that's probably

74
00:03:10,400 --> 00:03:14,720
a nice thing

75
00:03:11,360 --> 00:03:17,360
so within the new

76
00:03:14,720 --> 00:03:18,400
synthesis we follow certain guidelines

77
00:03:17,360 --> 00:03:21,920
so we want to express

78
00:03:18,400 --> 00:03:23,599
most of the things and force and

79
00:03:21,920 --> 00:03:25,359
if you think about it it's a high-level

80
00:03:23,599 --> 00:03:28,399
language and you can express

81
00:03:25,360 --> 00:03:29,920
function applications and you can define

82
00:03:28,400 --> 00:03:32,159
data structures and so on

83
00:03:29,920 --> 00:03:32,958
so we try to express as much as we can

84
00:03:32,159 --> 00:03:36,000
in

85
00:03:32,959 --> 00:03:38,080
in force and we did this uh also with a

86
00:03:36,000 --> 00:03:39,200
cooperative multitasker that is normally

87
00:03:38,080 --> 00:03:41,760
supposed to be

88
00:03:39,200 --> 00:03:42,720
written in some low level uh assembly

89
00:03:41,760 --> 00:03:45,280
language for

90
00:03:42,720 --> 00:03:46,640
for the task transfers so this is uh

91
00:03:45,280 --> 00:03:49,680
also done

92
00:03:46,640 --> 00:03:51,839
uh in fourths uh we strive to get some

93
00:03:49,680 --> 00:03:54,959
bootstrappable things

94
00:03:51,840 --> 00:03:56,159
and uh one of the languages is

95
00:03:54,959 --> 00:03:59,200
bootstrapper

96
00:03:56,159 --> 00:04:02,239
and very nice

97
00:03:59,200 --> 00:04:02,958
all should be completely transparent so

98
00:04:02,239 --> 00:04:06,080
you could

99
00:04:02,959 --> 00:04:07,760
uh talk to us and i say in two hours i

100
00:04:06,080 --> 00:04:09,599
can explain what's going on

101
00:04:07,760 --> 00:04:11,518
if you have some forced background and

102
00:04:09,599 --> 00:04:13,119
computer science background

103
00:04:11,519 --> 00:04:14,560
and then you can look at all the source

104
00:04:13,120 --> 00:04:16,959
code that we have which is

105
00:04:14,560 --> 00:04:19,280
quite a small amount of source code and

106
00:04:16,959 --> 00:04:22,240
you can understand what's going on

107
00:04:19,279 --> 00:04:22,559
um so it's completely transparent for

108
00:04:22,240 --> 00:04:25,360
you

109
00:04:22,560 --> 00:04:26,720
everything is accessible for you and

110
00:04:25,360 --> 00:04:29,759
it's simple to understand

111
00:04:26,720 --> 00:04:33,440
so we're looking for simplicity

112
00:04:29,759 --> 00:04:34,960
and for this we also look at analogy to

113
00:04:33,440 --> 00:04:38,800
biological things

114
00:04:34,960 --> 00:04:40,960
for example like how dna is replicating

115
00:04:38,800 --> 00:04:42,560
and we're thinking about this and seed

116
00:04:40,960 --> 00:04:45,198
force the name

117
00:04:42,560 --> 00:04:47,280
goes into the area of botanics of course

118
00:04:45,199 --> 00:04:50,160
so something is a small seed and then it

119
00:04:47,280 --> 00:04:51,520
grows and we will see how it grows

120
00:04:50,160 --> 00:04:54,160
the technique that we use is

121
00:04:51,520 --> 00:04:57,758
disaggregation so we see this

122
00:04:54,160 --> 00:05:00,479
complex systems we try to dissect it

123
00:04:57,759 --> 00:05:02,479
and find the the principles in isolation

124
00:05:00,479 --> 00:05:05,280
and then we reassemble these

125
00:05:02,479 --> 00:05:07,599
in an appropriate way afterwards so and

126
00:05:05,280 --> 00:05:10,719
on that way we built a family of

127
00:05:07,600 --> 00:05:12,560
minimalistic stack-based languages and i

128
00:05:10,720 --> 00:05:14,320
have a slide that compares the two

129
00:05:12,560 --> 00:05:16,400
that are in the title of this talk

130
00:05:14,320 --> 00:05:18,479
that's pre-force and seed force and

131
00:05:16,400 --> 00:05:20,719
pre-force was the initial attempt

132
00:05:18,479 --> 00:05:24,080
and pre says it's not really a force

133
00:05:20,720 --> 00:05:26,080
because it has so many limitations

134
00:05:24,080 --> 00:05:27,199
and you can see maybe as a key

135
00:05:26,080 --> 00:05:29,120
characteristics

136
00:05:27,199 --> 00:05:31,039
the lines of code that you need to

137
00:05:29,120 --> 00:05:34,320
express this is

138
00:05:31,039 --> 00:05:35,199
500 lines uh with pre-force and roughly

139
00:05:34,320 --> 00:05:36,880
the same for

140
00:05:35,199 --> 00:05:38,560
for the seed force so they are very

141
00:05:36,880 --> 00:05:40,080
small languages and i'm not talking

142
00:05:38,560 --> 00:05:43,280
compiling to

143
00:05:40,080 --> 00:05:46,560
um to llvm or some abstract machine it's

144
00:05:43,280 --> 00:05:48,400
uh this is for the 386 machine code

145
00:05:46,560 --> 00:05:51,120
interface which spits out the assembly

146
00:05:48,400 --> 00:05:54,320
code and then there is an assembler

147
00:05:51,120 --> 00:05:56,160
yeah the other key feature maybe is uh

148
00:05:54,320 --> 00:05:59,680
the number of primitives

149
00:05:56,160 --> 00:06:01,039
so um the preforce has 13 primitives and

150
00:05:59,680 --> 00:06:04,000
this means

151
00:06:01,039 --> 00:06:04,800
many features are missing like memory it

152
00:06:04,000 --> 00:06:07,440
doesn't have

153
00:06:04,800 --> 00:06:08,800
addressable memory it has to do all on

154
00:06:07,440 --> 00:06:10,719
on the two stacks which

155
00:06:08,800 --> 00:06:12,160
one is for parameter passing and the

156
00:06:10,720 --> 00:06:14,080
other one is for

157
00:06:12,160 --> 00:06:15,199
a function called procedure return

158
00:06:14,080 --> 00:06:17,120
addresses

159
00:06:15,199 --> 00:06:19,280
and because of this if you want to do

160
00:06:17,120 --> 00:06:21,840
string handling you have to do this all

161
00:06:19,280 --> 00:06:23,919
on the sex not in memory so there are no

162
00:06:21,840 --> 00:06:25,679
memory representation of strings you put

163
00:06:23,919 --> 00:06:26,960
them character by character on the stake

164
00:06:25,680 --> 00:06:29,759
and you deal with this

165
00:06:26,960 --> 00:06:30,638
which you can assume is not very

166
00:06:29,759 --> 00:06:32,240
comfortable

167
00:06:30,639 --> 00:06:34,960
but it works and you have recursive

168
00:06:32,240 --> 00:06:38,000
functions in all of them

169
00:06:34,960 --> 00:06:38,799
also pre-force doesn't have any control

170
00:06:38,000 --> 00:06:40,720
structures

171
00:06:38,800 --> 00:06:41,919
the only thing is that you have a

172
00:06:40,720 --> 00:06:44,080
procedure call with

173
00:06:41,919 --> 00:06:45,919
possibly tail recursion elimination and

174
00:06:44,080 --> 00:06:48,800
a conditional exit and then you're

175
00:06:45,919 --> 00:06:49,198
up to formulate whatever programs you

176
00:06:48,800 --> 00:06:51,360
want

177
00:06:49,199 --> 00:06:52,560
both are during complete so you can

178
00:06:51,360 --> 00:06:54,400
actually do this

179
00:06:52,560 --> 00:06:55,759
and it turned out pre-force is too

180
00:06:54,400 --> 00:06:58,960
simple actually

181
00:06:55,759 --> 00:07:00,080
to uh be the seed that we can grow

182
00:06:58,960 --> 00:07:02,799
everything out of it

183
00:07:00,080 --> 00:07:03,520
yeah i tried this and then uh within the

184
00:07:02,800 --> 00:07:06,000
discussion

185
00:07:03,520 --> 00:07:07,198
we said okay no it's not worth it but

186
00:07:06,000 --> 00:07:09,199
it's suitable

187
00:07:07,199 --> 00:07:10,800
to build the next four system and that

188
00:07:09,199 --> 00:07:12,240
is seed force and seed forth now has

189
00:07:10,800 --> 00:07:15,199
memory it has memory

190
00:07:12,240 --> 00:07:16,479
operators it has some more primitives

191
00:07:15,199 --> 00:07:20,000
mainly for memory

192
00:07:16,479 --> 00:07:22,318
and uh um yeah for for

193
00:07:20,000 --> 00:07:23,199
uh yeah i think it's mainly memory and

194
00:07:22,319 --> 00:07:26,160
uh

195
00:07:23,199 --> 00:07:26,560
um and some some other things uh and

196
00:07:26,160 --> 00:07:30,160
it's

197
00:07:26,560 --> 00:07:31,919
only a little bit uh more uh in size

198
00:07:30,160 --> 00:07:33,280
it has conditionals so we have branching

199
00:07:31,919 --> 00:07:36,318
instructions as well

200
00:07:33,280 --> 00:07:37,198
right and uh so uh yeah so that's uh

201
00:07:36,319 --> 00:07:39,599
mainly it

202
00:07:37,199 --> 00:07:41,919
and if you look at the uh data types

203
00:07:39,599 --> 00:07:42,880
then prefabs can only handle characters

204
00:07:41,919 --> 00:07:44,960
and integers

205
00:07:42,880 --> 00:07:45,919
and you build up all the structures on

206
00:07:44,960 --> 00:07:48,000
the stack

207
00:07:45,919 --> 00:07:49,758
and of course if you have memory you

208
00:07:48,000 --> 00:07:52,800
want to address the memory you also have

209
00:07:49,759 --> 00:07:54,960
addresses right so

210
00:07:52,800 --> 00:07:55,919
let's come to the ice concept that's

211
00:07:54,960 --> 00:07:58,960
something that

212
00:07:55,919 --> 00:07:59,599
in a talk of charles moore if you listen

213
00:07:58,960 --> 00:08:03,758
to him

214
00:07:59,599 --> 00:08:06,000
very carefully um in 1999 and i

215
00:08:03,759 --> 00:08:07,840
revised the youtube videos that have

216
00:08:06,000 --> 00:08:11,199
been made at that time

217
00:08:07,840 --> 00:08:12,159
and i came up with ah right ice is what

218
00:08:11,199 --> 00:08:14,479
we actually

219
00:08:12,160 --> 00:08:16,000
are doing that makes force and other

220
00:08:14,479 --> 00:08:20,240
languages very

221
00:08:16,000 --> 00:08:23,280
uh exciting and yeah the the property is

222
00:08:20,240 --> 00:08:26,720
we have an interpreter that

223
00:08:23,280 --> 00:08:29,758
can take commands and work on them

224
00:08:26,720 --> 00:08:33,120
we have a compiler that can take

225
00:08:29,759 --> 00:08:35,360
text and create code

226
00:08:33,120 --> 00:08:36,560
and then we can even execute at

227
00:08:35,360 --> 00:08:39,919
arbitrary times

228
00:08:36,559 --> 00:08:41,598
things that we just defined yeah and

229
00:08:39,919 --> 00:08:43,279
process this property but other

230
00:08:41,599 --> 00:08:44,880
languages like lisp

231
00:08:43,279 --> 00:08:46,880
has this property you do a function

232
00:08:44,880 --> 00:08:48,880
definition next time you call it

233
00:08:46,880 --> 00:08:50,080
enforce you define a word next time you

234
00:08:48,880 --> 00:08:52,880
call it

235
00:08:50,080 --> 00:08:53,519
and you can even during compilation you

236
00:08:52,880 --> 00:08:56,640
can

237
00:08:53,519 --> 00:08:56,640
go ahead and

238
00:08:56,880 --> 00:08:59,920
and switch between execution and

239
00:08:58,880 --> 00:09:03,120
interpretation

240
00:08:59,920 --> 00:09:06,560
so that's quite nice small example

241
00:09:03,120 --> 00:09:09,839
i can define a function definition erase

242
00:09:06,560 --> 00:09:10,479
which goes and initialize some memory

243
00:09:09,839 --> 00:09:13,920
with

244
00:09:10,480 --> 00:09:14,800
zero then i can interpret define some

245
00:09:13,920 --> 00:09:17,519
constant

246
00:09:14,800 --> 00:09:18,000
buffer with an appropriate size and then

247
00:09:17,519 --> 00:09:20,080
i can

248
00:09:18,000 --> 00:09:21,600
execute the definition that i just

249
00:09:20,080 --> 00:09:24,399
defined

250
00:09:21,600 --> 00:09:25,360
in there and this will execute at

251
00:09:24,399 --> 00:09:27,839
compile time

252
00:09:25,360 --> 00:09:30,480
yeah when when i process uh the file and

253
00:09:27,839 --> 00:09:32,800
compile it so let's have a look at cfos

254
00:09:30,480 --> 00:09:34,240
the great thing about seed force that it

255
00:09:32,800 --> 00:09:36,240
accepts

256
00:09:34,240 --> 00:09:38,399
tokenized source code and this means it

257
00:09:36,240 --> 00:09:39,200
doesn't have need to have a parser or

258
00:09:38,399 --> 00:09:42,560
whatever

259
00:09:39,200 --> 00:09:45,760
to analyze text so that's just great

260
00:09:42,560 --> 00:09:47,599
it's about 550 lines of code and

261
00:09:45,760 --> 00:09:49,600
you can extend it by doing function

262
00:09:47,600 --> 00:09:50,640
definitions it could be recursive

263
00:09:49,600 --> 00:09:53,839
functions so that's

264
00:09:50,640 --> 00:09:55,680
really easy and because it follows the

265
00:09:53,839 --> 00:09:57,360
ice principle like all the languages

266
00:09:55,680 --> 00:09:59,599
that we do

267
00:09:57,360 --> 00:10:02,079
it has a compiler that compiles

268
00:09:59,600 --> 00:10:04,560
definitions in interpreter that

269
00:10:02,079 --> 00:10:05,519
can execute definitions even during

270
00:10:04,560 --> 00:10:08,479
compilation

271
00:10:05,519 --> 00:10:10,079
so that's uh quite a nice uh quite nice

272
00:10:08,480 --> 00:10:12,800
and it's intended for

273
00:10:10,079 --> 00:10:15,040
building applications and so one of

274
00:10:12,800 --> 00:10:17,920
these applications is actually

275
00:10:15,040 --> 00:10:18,800
a full-featured interactive four system

276
00:10:17,920 --> 00:10:21,120
with a

277
00:10:18,800 --> 00:10:23,439
redeveloped print loop ripple which is

278
00:10:21,120 --> 00:10:27,839
called text interpreter in the fourth

279
00:10:23,440 --> 00:10:30,399
terminology and we have i386 and

280
00:10:27,839 --> 00:10:31,600
amd 64 implementation right now but i

281
00:10:30,399 --> 00:10:34,480
experimented with the c

282
00:10:31,600 --> 00:10:36,160
back end as well uh as some symbolic ad

283
00:10:34,480 --> 00:10:36,640
back-end so you can stuff it into a list

284
00:10:36,160 --> 00:10:38,959
system

285
00:10:36,640 --> 00:10:40,079
and to get some execution so here's the

286
00:10:38,959 --> 00:10:41,680
call slide

287
00:10:40,079 --> 00:10:43,920
uh that shows what it is there's

288
00:10:41,680 --> 00:10:45,439
something that is created with free

289
00:10:43,920 --> 00:10:46,719
force that is called the seaport bed

290
00:10:45,440 --> 00:10:49,440
think of flower bed

291
00:10:46,720 --> 00:10:52,160
yeah so the botanic analogy and that's

292
00:10:49,440 --> 00:10:55,920
the small core 550 lines of code

293
00:10:52,160 --> 00:10:58,240
2k of memory and this is 32 bits so

294
00:10:55,920 --> 00:11:01,120
uh about 500 bytes is just the

295
00:10:58,240 --> 00:11:03,519
installation initialization of the

296
00:11:01,120 --> 00:11:05,920
of the table so the code is really small

297
00:11:03,519 --> 00:11:06,959
it's 31 assembly primitives and then

298
00:11:05,920 --> 00:11:09,760
some

299
00:11:06,959 --> 00:11:10,959
amount of additional things and then uh

300
00:11:09,760 --> 00:11:12,800
you have three levels

301
00:11:10,959 --> 00:11:14,239
the text-based source code at the top

302
00:11:12,800 --> 00:11:16,160
tokenized source code in the middle and

303
00:11:14,240 --> 00:11:17,440
then the seed for bed on the growing

304
00:11:16,160 --> 00:11:20,000
seed for system uh

305
00:11:17,440 --> 00:11:21,519
below also we have of course operating

306
00:11:20,000 --> 00:11:24,480
system hardware support

307
00:11:21,519 --> 00:11:26,720
uh necessary to do some io or whatever

308
00:11:24,480 --> 00:11:29,680
if you have an iot device to

309
00:11:26,720 --> 00:11:31,760
access the hardware and so if you have

310
00:11:29,680 --> 00:11:33,599
source code of your application it first

311
00:11:31,760 --> 00:11:35,760
will be tokenized

312
00:11:33,600 --> 00:11:37,440
and then this token stream will be fed

313
00:11:35,760 --> 00:11:40,000
into the seat for bed and it will be

314
00:11:37,440 --> 00:11:42,160
extended but still it can do ice

315
00:11:40,000 --> 00:11:43,040
it can interpret things it can compile

316
00:11:42,160 --> 00:11:45,040
things

317
00:11:43,040 --> 00:11:46,240
and it can execute things on the fly

318
00:11:45,040 --> 00:11:49,519
during compilation

319
00:11:46,240 --> 00:11:51,040
yeah the virtual machine that is

320
00:11:49,519 --> 00:11:53,040
about this looks like this it has these

321
00:11:51,040 --> 00:11:54,959
two stacks one for parameter passing one

322
00:11:53,040 --> 00:11:57,279
for return stacks

323
00:11:54,959 --> 00:11:58,959
and instead of a parser it just has a

324
00:11:57,279 --> 00:12:02,000
symbol table the names

325
00:11:58,959 --> 00:12:02,880
of functions are tokenized into function

326
00:12:02,000 --> 00:12:06,800
numbers

327
00:12:02,880 --> 00:12:09,360
and so to know in order to know where

328
00:12:06,800 --> 00:12:10,079
a function actually starts you just have

329
00:12:09,360 --> 00:12:11,839
an index

330
00:12:10,079 --> 00:12:13,760
accessed into the token table the token

331
00:12:11,839 --> 00:12:14,880
table just captures the start addresses

332
00:12:13,760 --> 00:12:17,760
of the functions

333
00:12:14,880 --> 00:12:19,439
and if you appear to see okay there's a

334
00:12:17,760 --> 00:12:23,040
function

335
00:12:19,440 --> 00:12:24,800
3b yeah actually coming then you can go

336
00:12:23,040 --> 00:12:26,560
ahead and look up what is its starting

337
00:12:24,800 --> 00:12:27,279
address and you can compile a call to

338
00:12:26,560 --> 00:12:29,760
that

339
00:12:27,279 --> 00:12:31,839
appropriate thing so we have data data

340
00:12:29,760 --> 00:12:34,079
memory and code memory to do this and

341
00:12:31,839 --> 00:12:35,040
several pointers that mark the three

342
00:12:34,079 --> 00:12:37,920
areas uh

343
00:12:35,040 --> 00:12:39,279
of this so that's a quite simple

344
00:12:37,920 --> 00:12:42,319
architecture

345
00:12:39,279 --> 00:12:44,480
and uh here are the c4 bad words i don't

346
00:12:42,320 --> 00:12:46,959
want to go into details or all of them

347
00:12:44,480 --> 00:12:47,839
but the two interesting things for the

348
00:12:46,959 --> 00:12:49,680
ice

349
00:12:47,839 --> 00:12:52,000
concept are the interpreter and the

350
00:12:49,680 --> 00:12:55,040
compiler what does the interpreter do

351
00:12:52,000 --> 00:12:57,519
it accepts a token from the input stream

352
00:12:55,040 --> 00:12:59,360
and then it executes whatever function

353
00:12:57,519 --> 00:13:02,000
is associated with that number

354
00:12:59,360 --> 00:13:03,680
looks up in the table finds the start

355
00:13:02,000 --> 00:13:06,000
address and then jumps to that or

356
00:13:03,680 --> 00:13:07,439
does it there's a subroutine call and

357
00:13:06,000 --> 00:13:09,760
then it does

358
00:13:07,440 --> 00:13:10,560
interpreter again so actually this is an

359
00:13:09,760 --> 00:13:12,880
endless loop and

360
00:13:10,560 --> 00:13:14,638
because we have tail interpreter it's uh

361
00:13:12,880 --> 00:13:16,480
tail recursive so it will not spill up

362
00:13:14,639 --> 00:13:19,519
the return stake or whatever

363
00:13:16,480 --> 00:13:22,720
the compiler will go accept the token

364
00:13:19,519 --> 00:13:23,760
or maybe it's a zero then we exit the

365
00:13:22,720 --> 00:13:26,000
compiler loop

366
00:13:23,760 --> 00:13:27,680
go back to the interpreter loop maybe

367
00:13:26,000 --> 00:13:28,560
it's a lit and then we'll do some stuff

368
00:13:27,680 --> 00:13:30,399
with the literal

369
00:13:28,560 --> 00:13:32,719
but in the end if it's not a lid then it

370
00:13:30,399 --> 00:13:35,440
will just go ahead and compile

371
00:13:32,720 --> 00:13:36,079
a reference to the appropriate function

372
00:13:35,440 --> 00:13:37,920
and then it

373
00:13:36,079 --> 00:13:40,239
it also loops so the compiler is in a

374
00:13:37,920 --> 00:13:42,800
loop until it finds a zero

375
00:13:40,240 --> 00:13:44,880
uh and the token interpreter will just

376
00:13:42,800 --> 00:13:47,680
go ahead and execute things

377
00:13:44,880 --> 00:13:49,199
so uh we have source code there where we

378
00:13:47,680 --> 00:13:51,920
look at the source code

379
00:13:49,199 --> 00:13:53,120
and we see here some this is the hello

380
00:13:51,920 --> 00:13:56,240
world example for

381
00:13:53,120 --> 00:13:58,160
uh for uh seed force so we just emit

382
00:13:56,240 --> 00:13:59,920
things and we find in the tokenized

383
00:13:58,160 --> 00:14:03,120
thing also the string hello

384
00:13:59,920 --> 00:14:04,880
we won't go into detail here very much

385
00:14:03,120 --> 00:14:07,519
we can have a function definition

386
00:14:04,880 --> 00:14:10,000
increment the top element on the stack

387
00:14:07,519 --> 00:14:11,120
that is like this and then we can invoke

388
00:14:10,000 --> 00:14:14,240
this already here

389
00:14:11,120 --> 00:14:16,880
so again we have uh interpolate compile

390
00:14:14,240 --> 00:14:18,160
and execute of things and if you look

391
00:14:16,880 --> 00:14:20,720
carefully

392
00:14:18,160 --> 00:14:23,040
on the previous slide uh the next token

393
00:14:20,720 --> 00:14:26,079
in the sequence would be 3b

394
00:14:23,040 --> 00:14:27,519
and tata here's the 3b that is the

395
00:14:26,079 --> 00:14:30,560
invocation

396
00:14:27,519 --> 00:14:32,560
of your that is the tokenized uh of this

397
00:14:30,560 --> 00:14:33,920
which will reside in the invocation in

398
00:14:32,560 --> 00:14:37,119
the in the compiler

399
00:14:33,920 --> 00:14:40,319
so and that's it uh the output of course

400
00:14:37,120 --> 00:14:41,680
and uh so where is the ice principle now

401
00:14:40,320 --> 00:14:43,680
being applied really

402
00:14:41,680 --> 00:14:45,279
that's when we have control structures

403
00:14:43,680 --> 00:14:47,680
control structures like begin

404
00:14:45,279 --> 00:14:49,120
until need to be compiled into

405
00:14:47,680 --> 00:14:52,239
conditional branches

406
00:14:49,120 --> 00:14:55,760
yeah and uh yeah the uh

407
00:14:52,240 --> 00:14:58,399
in the end so uh begin

408
00:14:55,760 --> 00:14:59,360
uh the tokenizer takes function calls

409
00:14:58,399 --> 00:15:01,680
and makes single

410
00:14:59,360 --> 00:15:02,399
tokens out of it and for there are also

411
00:15:01,680 --> 00:15:06,399
macros

412
00:15:02,399 --> 00:15:09,680
that expand to sequences of uh of tokens

413
00:15:06,399 --> 00:15:13,680
and so begin uh expands to the sequence

414
00:15:09,680 --> 00:15:16,638
by here compiler which means

415
00:15:13,680 --> 00:15:18,239
exit the compiler do something in

416
00:15:16,639 --> 00:15:19,440
interpret mode and then restart the

417
00:15:18,240 --> 00:15:22,320
compiler

418
00:15:19,440 --> 00:15:23,440
and until expands to the sequence

419
00:15:22,320 --> 00:15:26,880
question branch

420
00:15:23,440 --> 00:15:28,079
by comma compiler which means compile

421
00:15:26,880 --> 00:15:33,600
branch

422
00:15:28,079 --> 00:15:36,479
uh then uh leave the compiler and

423
00:15:33,600 --> 00:15:38,000
compile the appropriate address and then

424
00:15:36,480 --> 00:15:40,880
restart the compiler

425
00:15:38,000 --> 00:15:42,160
and so if we look at the tokenization

426
00:15:40,880 --> 00:15:45,839
then we see

427
00:15:42,160 --> 00:15:48,719
uh begin is 0 1824

428
00:15:45,839 --> 00:15:49,360
and until will be compiled or tokenized

429
00:15:48,720 --> 00:15:53,600
to

430
00:15:49,360 --> 00:15:55,360
1500 2024 yeah and if we run this uh

431
00:15:53,600 --> 00:15:58,560
then that's it

432
00:15:55,360 --> 00:16:01,199
right so seed force growth uh you just

433
00:15:58,560 --> 00:16:03,518
feed the seed for bed plant new things

434
00:16:01,199 --> 00:16:07,279
in there and we did lots of experiments

435
00:16:03,519 --> 00:16:08,880
with this and uh so we have dynamic

436
00:16:07,279 --> 00:16:10,240
memory and many many things like

437
00:16:08,880 --> 00:16:13,199
exceptions and uh

438
00:16:10,240 --> 00:16:15,040
incorporated multitasker and closure

439
00:16:13,199 --> 00:16:16,479
like things and so on that you can build

440
00:16:15,040 --> 00:16:18,079
all on top of this

441
00:16:16,480 --> 00:16:20,800
and uh that's a full feature at first

442
00:16:18,079 --> 00:16:22,399
system uh that i already talked about

443
00:16:20,800 --> 00:16:24,800
called seed force interactive you can

444
00:16:22,399 --> 00:16:28,880
all look up this up on the

445
00:16:24,800 --> 00:16:32,000
uh on the pre-force github page

446
00:16:28,880 --> 00:16:34,399
and yeah that's mainly it

447
00:16:32,000 --> 00:16:36,000
so we want to extend this further and if

448
00:16:34,399 --> 00:16:38,639
you're interested

449
00:16:36,000 --> 00:16:40,079
come and get in contact with me so we

450
00:16:38,639 --> 00:16:43,279
can talk about this

451
00:16:40,079 --> 00:16:44,160
so new targets especially iot targets

452
00:16:43,279 --> 00:16:46,959
are on the way

453
00:16:44,160 --> 00:16:48,240
new synthesis the book and uh yeah thank

454
00:16:46,959 --> 00:17:05,839
you very much for listening

455
00:16:48,240 --> 00:17:05,839
and i'm happy to answer your questions

456
00:17:12,240 --> 00:17:18,880
yes yes so pre-force can actually take

457
00:17:16,079 --> 00:17:20,720
code words and colon definitions and it

458
00:17:18,880 --> 00:17:22,799
will uh convert this to

459
00:17:20,720 --> 00:17:24,400
uh appropriate assembly language in the

460
00:17:22,799 --> 00:17:26,079
setup that we currently have and then

461
00:17:24,400 --> 00:17:28,000
you use the platform assembler

462
00:17:26,079 --> 00:17:30,399
to uh to create the executable in the

463
00:17:28,000 --> 00:17:33,120
end yeah so it's it's these

464
00:17:30,400 --> 00:17:34,240
31 primitives written in assembler and

465
00:17:33,120 --> 00:17:37,760
then

466
00:17:34,240 --> 00:17:38,720
about 20 things among these compiler and

467
00:17:37,760 --> 00:17:41,360
interpreter

468
00:17:38,720 --> 00:17:42,400
to actually make this ice capability

469
00:17:41,360 --> 00:17:44,840
available

470
00:17:42,400 --> 00:17:46,240
okay thank you very much any more

471
00:17:44,840 --> 00:17:48,559
questions

472
00:17:46,240 --> 00:17:49,760
yeah so uh if you would support this

473
00:17:48,559 --> 00:17:51,120
system to a new

474
00:17:49,760 --> 00:17:54,640
architecture would you have to only

475
00:17:51,120 --> 00:17:57,918
rewrite uh pre-order

476
00:17:54,640 --> 00:18:00,960
yeah yeah actually you you don't need to

477
00:17:57,919 --> 00:18:04,080
rewrite pre-force because it's it's

478
00:18:00,960 --> 00:18:04,960
used to do the seed force it can run on

479
00:18:04,080 --> 00:18:07,678
the host system

480
00:18:04,960 --> 00:18:09,600
but you need to rewrite the 31

481
00:18:07,679 --> 00:18:12,000
primitives in seed force

482
00:18:09,600 --> 00:18:14,000
and the estimate time because they are

483
00:18:12,000 --> 00:18:16,320
really really simple like moving here

484
00:18:14,000 --> 00:18:17,919
and there there is half a day for a new

485
00:18:16,320 --> 00:18:20,320
platform so you can start reading the

486
00:18:17,919 --> 00:18:23,840
manual in the morning and in the evening

487
00:18:20,320 --> 00:18:26,720
you have a c4 bed system running and all

488
00:18:23,840 --> 00:18:28,399
above is just machine independent you

489
00:18:26,720 --> 00:18:31,520
can just load it on top

490
00:18:28,400 --> 00:18:33,840
and it feels fast enough to work with

491
00:18:31,520 --> 00:18:35,360
would think a small set of primitives

492
00:18:33,840 --> 00:18:36,799
would slow it down dramatically no

493
00:18:35,360 --> 00:18:37,280
that's not the case the experience is

494
00:18:36,799 --> 00:18:40,400
it's

495
00:18:37,280 --> 00:18:44,000
really fine good to use and

496
00:18:40,400 --> 00:18:44,000
of high speed okay

497
00:18:48,000 --> 00:18:53,760
there's a there's a fourth program

498
00:18:51,120 --> 00:18:55,199
right now that does the tokenization and

499
00:18:53,760 --> 00:18:57,200
one of the tasks

500
00:18:55,200 --> 00:18:59,280
you might have seen on the slide is to

501
00:18:57,200 --> 00:19:00,080
rewrite the tokenizer in seed force

502
00:18:59,280 --> 00:19:02,320
itself

503
00:19:00,080 --> 00:19:04,240
uh it's already uh i already have a

504
00:19:02,320 --> 00:19:07,360
version it's seat forth interactive

505
00:19:04,240 --> 00:19:09,120
the the extended one but

506
00:19:07,360 --> 00:19:10,799
we want to have it in seat fourth itself

507
00:19:09,120 --> 00:19:12,399
and then so everything is self-contained

508
00:19:10,799 --> 00:19:14,000
and the bootstrapping is there

509
00:19:12,400 --> 00:19:15,520
everything transparent everything

510
00:19:14,000 --> 00:19:25,840
available to you no hidden

511
00:19:15,520 --> 00:19:25,840
things okay thank you very much

512
00:19:29,440 --> 00:19:37,360
thank you

