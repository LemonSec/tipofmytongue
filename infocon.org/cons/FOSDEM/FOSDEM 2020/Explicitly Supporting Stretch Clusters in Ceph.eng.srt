1
00:00:06,799 --> 00:00:16,160
so yeah let's welcome him uh

2
00:00:08,800 --> 00:00:17,840
and some core distributed algorithms

3
00:00:16,160 --> 00:00:19,840
all right thanks very much so as you

4
00:00:17,840 --> 00:00:21,119
said my name is greg i work at red hat

5
00:00:19,840 --> 00:00:22,640
as a principal software engineer and

6
00:00:21,119 --> 00:00:23,600
i've been on the sep project for over a

7
00:00:22,640 --> 00:00:25,279
decade now

8
00:00:23,600 --> 00:00:27,599
which at my age is a little scary to

9
00:00:25,279 --> 00:00:28,960
think about um

10
00:00:27,599 --> 00:00:30,640
every time i give a talk in europe

11
00:00:28,960 --> 00:00:32,000
someone tells me that the content they

12
00:00:30,640 --> 00:00:32,719
understood was great but i talked too

13
00:00:32,000 --> 00:00:34,079
fast

14
00:00:32,719 --> 00:00:36,640
so if that happens to you just start

15
00:00:34,079 --> 00:00:38,399
waving wildly and i'll slow down

16
00:00:36,640 --> 00:00:40,399
and i'm happy to take questions during

17
00:00:38,399 --> 00:00:41,040
the presentation if you raise your hand

18
00:00:40,399 --> 00:00:43,520
and

19
00:00:41,040 --> 00:00:44,879
i repeat it and answer back or maybe

20
00:00:43,520 --> 00:00:47,600
i'll tell you that you're three slides

21
00:00:44,879 --> 00:00:50,160
ahead of me and just wait a minute

22
00:00:47,600 --> 00:00:51,680
so i assume you all basically know about

23
00:00:50,160 --> 00:00:52,800
sef but it's a distributed object

24
00:00:51,680 --> 00:00:55,199
storage system

25
00:00:52,800 --> 00:00:56,640
we have three demons although only two

26
00:00:55,199 --> 00:00:58,000
of them are three principal demons

27
00:00:56,640 --> 00:01:00,640
although only two of them mattered today

28
00:00:58,000 --> 00:01:01,280
we have in the middle here the object

29
00:01:00,640 --> 00:01:03,680
storage

30
00:01:01,280 --> 00:01:04,799
daemons or osds which are responsible

31
00:01:03,680 --> 00:01:06,799
for storing data

32
00:01:04,799 --> 00:01:08,080
serving read and write i o to clients

33
00:01:06,799 --> 00:01:09,840
and when

34
00:01:08,080 --> 00:01:11,360
something happens to the cluster that

35
00:01:09,840 --> 00:01:12,960
changes the state making sure that all

36
00:01:11,360 --> 00:01:14,720
the data is located on

37
00:01:12,960 --> 00:01:16,240
all the osds it's supposed to be so we

38
00:01:14,720 --> 00:01:17,119
maintain our replication and durability

39
00:01:16,240 --> 00:01:20,080
guarantees

40
00:01:17,119 --> 00:01:21,759
we have the monitors which keep track of

41
00:01:20,080 --> 00:01:24,400
the other participants in the cluster

42
00:01:21,759 --> 00:01:26,560
they maintain a series of cluster maps

43
00:01:24,400 --> 00:01:27,360
in particular for this talk the osd map

44
00:01:26,560 --> 00:01:29,840
which says

45
00:01:27,360 --> 00:01:30,960
what osd's are part of the cluster and

46
00:01:29,840 --> 00:01:32,479
whether those osc

47
00:01:30,960 --> 00:01:34,158
d's are up or down right now and what

48
00:01:32,479 --> 00:01:34,640
their addresses are and things and then

49
00:01:34,159 --> 00:01:36,560
also

50
00:01:34,640 --> 00:01:38,400
we have a metadata server which today

51
00:01:36,560 --> 00:01:39,759
doesn't matter or for this talk doesn't

52
00:01:38,400 --> 00:01:40,000
matter at all but you know you heard

53
00:01:39,759 --> 00:01:42,000
about

54
00:01:40,000 --> 00:01:44,159
earlier with patrick and jeff and may

55
00:01:42,000 --> 00:01:46,000
hear about later

56
00:01:44,159 --> 00:01:47,360
a radio's cluster generally consists of

57
00:01:46,000 --> 00:01:49,040
three or five monitors and a whole bunch

58
00:01:47,360 --> 00:01:51,360
of osds

59
00:01:49,040 --> 00:01:52,399
working together when we serve rights

60
00:01:51,360 --> 00:01:54,000
out of rados

61
00:01:52,399 --> 00:01:55,280
an application connects to the cluster

62
00:01:54,000 --> 00:01:56,640
which means it goes and talks to the

63
00:01:55,280 --> 00:01:58,640
monitors and says hey what does the

64
00:01:56,640 --> 00:02:01,040
cluster look like i want to talk to it

65
00:01:58,640 --> 00:02:02,399
and they get their osd map and other

66
00:02:01,040 --> 00:02:03,280
other maps describing the state of the

67
00:02:02,399 --> 00:02:06,159
system

68
00:02:03,280 --> 00:02:07,520
they say hey i want to do a read or i

69
00:02:06,159 --> 00:02:08,160
want to do a write to this particular

70
00:02:07,520 --> 00:02:09,840
object foo

71
00:02:08,160 --> 00:02:11,840
and they run our magic crush algorithm

72
00:02:09,840 --> 00:02:14,239
which says which osd

73
00:02:11,840 --> 00:02:14,959
is responsible for serving serving and

74
00:02:14,239 --> 00:02:16,720
processing

75
00:02:14,959 --> 00:02:18,560
operations on on the object foo and

76
00:02:16,720 --> 00:02:19,920
that's called the primary osd

77
00:02:18,560 --> 00:02:22,000
it sends that right operation to the

78
00:02:19,920 --> 00:02:23,040
primary the primary runs a bunch of

79
00:02:22,000 --> 00:02:24,480
validation

80
00:02:23,040 --> 00:02:26,319
to make sure the client is allowed to do

81
00:02:24,480 --> 00:02:28,000
that it does some pre-processing it

82
00:02:26,319 --> 00:02:31,119
sends out replication io

83
00:02:28,000 --> 00:02:32,879
to the other peers or replicas that

84
00:02:31,120 --> 00:02:34,560
share that state and then once the

85
00:02:32,879 --> 00:02:35,840
replicas are replied then it returns to

86
00:02:34,560 --> 00:02:37,440
the client

87
00:02:35,840 --> 00:02:38,959
visually speaking you know one round

88
00:02:37,440 --> 00:02:40,239
trip to the monitor and then we can do a

89
00:02:38,959 --> 00:02:41,840
whole bunch of writes off of that one

90
00:02:40,239 --> 00:02:44,959
round trip to the monitor

91
00:02:41,840 --> 00:02:44,959
and it looks like this

92
00:02:46,400 --> 00:02:49,599
so for the purposes of this talk which

93
00:02:47,920 --> 00:02:51,119
is about stretch clusters and stuff

94
00:02:49,599 --> 00:02:52,959
then this is what we mean we're not

95
00:02:51,120 --> 00:02:54,480
talking about big wide area networks

96
00:02:52,959 --> 00:02:55,599
with hundreds of milliseconds of latency

97
00:02:54,480 --> 00:02:57,760
stretched around the world

98
00:02:55,599 --> 00:02:59,440
we're talking seth is designed for a

99
00:02:57,760 --> 00:03:02,079
local area network it expects

100
00:02:59,440 --> 00:03:03,519
fast interconnects but a thing that has

101
00:03:02,080 --> 00:03:05,120
become more popular or

102
00:03:03,519 --> 00:03:06,480
that we see more and more often and that

103
00:03:05,120 --> 00:03:07,519
occasionally shows up and that people

104
00:03:06,480 --> 00:03:09,200
certainly ask for

105
00:03:07,519 --> 00:03:11,200
is that they'll have two or three data

106
00:03:09,200 --> 00:03:12,958
centers you know

107
00:03:11,200 --> 00:03:14,640
pretty close on dark fiber and so maybe

108
00:03:12,959 --> 00:03:16,239
they have five milliseconds of ping and

109
00:03:14,640 --> 00:03:17,839
fast interconnects

110
00:03:16,239 --> 00:03:19,760
or they're run or they are running in

111
00:03:17,840 --> 00:03:21,280
different available availability zones

112
00:03:19,760 --> 00:03:22,319
inside of an amazon cloud or some other

113
00:03:21,280 --> 00:03:24,239
cloud provider

114
00:03:22,319 --> 00:03:25,599
so we still expect low latency and high

115
00:03:24,239 --> 00:03:28,239
paying but

116
00:03:25,599 --> 00:03:30,480
you are a split into two two or three

117
00:03:28,239 --> 00:03:32,000
data centers or similar things

118
00:03:30,480 --> 00:03:33,760
so the particular risk we're worried

119
00:03:32,000 --> 00:03:35,200
about is that

120
00:03:33,760 --> 00:03:36,959
you might have an asymmetric network

121
00:03:35,200 --> 00:03:38,319
split that's a lot less likely to happen

122
00:03:36,959 --> 00:03:39,840
when you're in a single if you were in a

123
00:03:38,319 --> 00:03:42,238
single data center because you probably

124
00:03:39,840 --> 00:03:45,120
only have one link between each site

125
00:03:42,239 --> 00:03:46,720
and it's become pretty likely that

126
00:03:45,120 --> 00:03:48,000
instead of losing like a single rack at

127
00:03:46,720 --> 00:03:48,480
a time you might lose a whole data

128
00:03:48,000 --> 00:03:50,159
center

129
00:03:48,480 --> 00:03:51,599
and that data center might represent

130
00:03:50,159 --> 00:03:54,560
fully half of the cluster

131
00:03:51,599 --> 00:03:55,119
or certainly a third of it and losing

132
00:03:54,560 --> 00:03:57,120
that much

133
00:03:55,120 --> 00:03:58,799
of a set cluster when it's on a local

134
00:03:57,120 --> 00:04:00,239
area network is possible

135
00:03:58,799 --> 00:04:01,760
because you might lose a whole like

136
00:04:00,239 --> 00:04:03,120
power unit that powers the whole thing

137
00:04:01,760 --> 00:04:04,640
or half the thing but

138
00:04:03,120 --> 00:04:07,040
the ways in which it happens will be

139
00:04:04,640 --> 00:04:09,279
different and you hope it's less likely

140
00:04:07,040 --> 00:04:10,720
so people can destroy stretch can deploy

141
00:04:09,280 --> 00:04:12,879
stretch clusters today

142
00:04:10,720 --> 00:04:14,480
with three data centers you know a very

143
00:04:12,879 --> 00:04:15,439
simple one you probably wouldn't really

144
00:04:14,480 --> 00:04:16,719
do it with two of usds

145
00:04:15,439 --> 00:04:18,880
in each data center but looking like

146
00:04:16,720 --> 00:04:20,479
this or they might do it with

147
00:04:18,880 --> 00:04:22,159
what they ask for although we mostly

148
00:04:20,478 --> 00:04:23,840
don't encourage them to do

149
00:04:22,160 --> 00:04:26,000
is with two data centers and then a

150
00:04:23,840 --> 00:04:27,440
third monito third offsite monitor that

151
00:04:26,000 --> 00:04:28,080
might be in the cloud or a vm just

152
00:04:27,440 --> 00:04:30,639
running

153
00:04:28,080 --> 00:04:31,840
somewhere and the reason that you want

154
00:04:30,639 --> 00:04:33,440
three is because you have

155
00:04:31,840 --> 00:04:35,440
two monitors in one data center and that

156
00:04:33,440 --> 00:04:36,080
data center goes down you can't make any

157
00:04:35,440 --> 00:04:37,520
progress

158
00:04:36,080 --> 00:04:39,599
anything that the monitors are in charge

159
00:04:37,520 --> 00:04:40,320
of they are a paxos consensus-based

160
00:04:39,600 --> 00:04:42,240
system

161
00:04:40,320 --> 00:04:43,520
so making a change to any of the cluster

162
00:04:42,240 --> 00:04:44,880
maps requires more than half the

163
00:04:43,520 --> 00:04:46,240
monitors to agree

164
00:04:44,880 --> 00:04:47,680
if you have three you need two of them

165
00:04:46,240 --> 00:04:49,120
to agree if you have five monitors you

166
00:04:47,680 --> 00:04:50,880
need three of them to agree

167
00:04:49,120 --> 00:04:52,160
so if this happens and you lose your

168
00:04:50,880 --> 00:04:53,759
whole data center then you might have a

169
00:04:52,160 --> 00:04:55,040
surviving data center with all of the

170
00:04:53,759 --> 00:04:56,960
data still available in it

171
00:04:55,040 --> 00:04:58,960
but you only have one monitor it can't

172
00:04:56,960 --> 00:05:00,638
say oh hey there's only one data center

173
00:04:58,960 --> 00:05:02,159
alive so just continue with this one

174
00:05:00,639 --> 00:05:05,520
it requires manual administrator

175
00:05:02,160 --> 00:05:08,720
intervention um

176
00:05:05,520 --> 00:05:10,719
so the big problem well when i was

177
00:05:08,720 --> 00:05:12,240
i i was asked to make this possible

178
00:05:10,720 --> 00:05:12,639
because of some red hat product needs

179
00:05:12,240 --> 00:05:15,120
with

180
00:05:12,639 --> 00:05:16,880
um the openshift computer or openshift

181
00:05:15,120 --> 00:05:18,240
compute storage that

182
00:05:16,880 --> 00:05:20,000
or container storage that we were

183
00:05:18,240 --> 00:05:22,880
talking about last session

184
00:05:20,000 --> 00:05:24,400
so monitors have to elect a leader

185
00:05:22,880 --> 00:05:24,880
that's because they're consensus based

186
00:05:24,400 --> 00:05:26,320
and so

187
00:05:24,880 --> 00:05:27,840
when you send a request to a monitor you

188
00:05:26,320 --> 00:05:28,639
can send it to any of the monitors but

189
00:05:27,840 --> 00:05:30,239
they want to pick

190
00:05:28,639 --> 00:05:32,720
one guy who decides what order the

191
00:05:30,240 --> 00:05:34,560
operations happen in and who maintains

192
00:05:32,720 --> 00:05:35,919
membership and so all updates go to the

193
00:05:34,560 --> 00:05:37,039
leader and then he distributes those

194
00:05:35,919 --> 00:05:38,240
changes out to

195
00:05:37,039 --> 00:05:40,639
the other monitors which are called

196
00:05:38,240 --> 00:05:42,720
peons and i'm talking too fast

197
00:05:40,639 --> 00:05:43,840
okay so a request goes to the monitor

198
00:05:42,720 --> 00:05:46,960
cluster

199
00:05:43,840 --> 00:05:48,239
they if it's a peon or one of the not in

200
00:05:46,960 --> 00:05:49,120
charge monitors they forward it to the

201
00:05:48,240 --> 00:05:51,120
leader

202
00:05:49,120 --> 00:05:52,639
that has some interesting consequences

203
00:05:51,120 --> 00:05:54,639
in that

204
00:05:52,639 --> 00:05:56,080
in during an election everyone talks to

205
00:05:54,639 --> 00:05:57,600
everyone else to try and

206
00:05:56,080 --> 00:05:59,440
to try and pick a leader but once an

207
00:05:57,600 --> 00:06:01,039
election happens the leader talks to all

208
00:05:59,440 --> 00:06:04,400
of its peons but the peons

209
00:06:01,039 --> 00:06:04,400
don't need to talk to each other

210
00:06:05,440 --> 00:06:08,319
and i've written out the algorithm here

211
00:06:07,360 --> 00:06:09,759
i'm going to go through this really

212
00:06:08,319 --> 00:06:11,039
quickly just because i've got a bunch of

213
00:06:09,759 --> 00:06:11,759
pictures that will make it much more

214
00:06:11,039 --> 00:06:15,280
obvious

215
00:06:11,759 --> 00:06:16,800
so an election starts for some reason um

216
00:06:15,280 --> 00:06:18,880
generally either a monitor turns on and

217
00:06:16,800 --> 00:06:20,319
he sends out any start and he joins the

218
00:06:18,880 --> 00:06:22,319
cluster by starting an election

219
00:06:20,319 --> 00:06:24,000
or else some kind of timeout happens

220
00:06:22,319 --> 00:06:26,160
because they have leases over the data

221
00:06:24,000 --> 00:06:27,199
that that they can serve reads off of

222
00:06:26,160 --> 00:06:28,240
and so

223
00:06:27,199 --> 00:06:29,520
for some reason the matter goes i want

224
00:06:28,240 --> 00:06:31,280
to start an election and i'm going to

225
00:06:29,520 --> 00:06:33,520
propose to everybody in the system

226
00:06:31,280 --> 00:06:35,359
that i be that i become the leader in

227
00:06:33,520 --> 00:06:36,400
this new election epoch and we have an

228
00:06:35,360 --> 00:06:38,639
election epoch

229
00:06:36,400 --> 00:06:41,120
to make sure that everyone's on the same

230
00:06:38,639 --> 00:06:42,560
page and that it's not old messages

231
00:06:41,120 --> 00:06:44,400
and then everything after starting an

232
00:06:42,560 --> 00:06:46,400
election is driven by receiving

233
00:06:44,400 --> 00:06:47,758
by receiving messages from from the

234
00:06:46,400 --> 00:06:49,840
other peers

235
00:06:47,759 --> 00:06:51,599
when you receive a propose you can do

236
00:06:49,840 --> 00:06:53,280
three things you can say hey

237
00:06:51,599 --> 00:06:55,520
that monitor is not in the quorum and i

238
00:06:53,280 --> 00:06:58,159
want to help him get in the quorum

239
00:06:55,520 --> 00:07:00,000
so i'm gonna start a new election to

240
00:06:58,160 --> 00:07:01,280
help him join

241
00:07:00,000 --> 00:07:03,520
and i'm gonna do that by sending out

242
00:07:01,280 --> 00:07:05,840
proposals or if this

243
00:07:03,520 --> 00:07:07,280
sender has a is a better candidate for

244
00:07:05,840 --> 00:07:08,638
leader than me and the way

245
00:07:07,280 --> 00:07:10,400
classically that we decide someone's a

246
00:07:08,639 --> 00:07:11,039
better candidate is they have a lower id

247
00:07:10,400 --> 00:07:12,880
number

248
00:07:11,039 --> 00:07:14,240
then we'll defer to them or if the

249
00:07:12,880 --> 00:07:15,680
sender has a higher id than us then

250
00:07:14,240 --> 00:07:18,319
we'll say hey i should be the leader and

251
00:07:15,680 --> 00:07:20,319
we'll bump the epoch and propose again

252
00:07:18,319 --> 00:07:22,400
and then to win if we get a deferral

253
00:07:20,319 --> 00:07:24,000
message from all of our peers we win

254
00:07:22,400 --> 00:07:25,280
if we time out the election but more

255
00:07:24,000 --> 00:07:26,800
than half of the peers including

256
00:07:25,280 --> 00:07:28,638
ourselves have deferred we win

257
00:07:26,800 --> 00:07:30,160
if we time out otherwise we start a new

258
00:07:28,639 --> 00:07:32,720
election so visually we have

259
00:07:30,160 --> 00:07:35,520
three monitors here one two three hurray

260
00:07:32,720 --> 00:07:38,319
um they have numbers zero one and two

261
00:07:35,520 --> 00:07:39,280
and monitor number one says hey i wanna

262
00:07:38,319 --> 00:07:40,880
be the leader

263
00:07:39,280 --> 00:07:42,559
it's epoch one so maybe they just all

264
00:07:40,880 --> 00:07:44,479
turned on and

265
00:07:42,560 --> 00:07:46,400
monitor two gets that proposal and he

266
00:07:44,479 --> 00:07:46,800
says oh well you're a better number than

267
00:07:46,400 --> 00:07:50,000
me

268
00:07:46,800 --> 00:07:51,840
so sure you can be the leader but at the

269
00:07:50,000 --> 00:07:53,360
same time that's happening monitor zero

270
00:07:51,840 --> 00:07:55,359
gets that message and says no

271
00:07:53,360 --> 00:07:57,360
i'm a better number than you are so i'm

272
00:07:55,360 --> 00:07:58,960
going to bump to epoch number two and

273
00:07:57,360 --> 00:08:00,879
proposed to everybody

274
00:07:58,960 --> 00:08:02,799
and so even though one got a dif a

275
00:08:00,879 --> 00:08:04,560
deferral he also got the propose

276
00:08:02,800 --> 00:08:06,319
and he says oh you're better than me

277
00:08:04,560 --> 00:08:07,360
zero and two obviously says you're

278
00:08:06,319 --> 00:08:09,039
better than me

279
00:08:07,360 --> 00:08:11,199
and so that until one and two both refer

280
00:08:09,039 --> 00:08:13,599
to zero and zero becomes the leader and

281
00:08:11,199 --> 00:08:15,759
sends out a victory message

282
00:08:13,599 --> 00:08:16,719
so that works great normally but if you

283
00:08:15,759 --> 00:08:19,840
have a net split

284
00:08:16,720 --> 00:08:20,319
very exciting things happen in this case

285
00:08:19,840 --> 00:08:21,520
you know

286
00:08:20,319 --> 00:08:23,520
they were already together and we just

287
00:08:21,520 --> 00:08:25,440
kind of net split from zero to one

288
00:08:23,520 --> 00:08:26,639
and so monitor one eventually times out

289
00:08:25,440 --> 00:08:28,479
because he's not getting any updates

290
00:08:26,639 --> 00:08:29,840
from monitor zero and he says hey

291
00:08:28,479 --> 00:08:32,000
i'm gonna bump the epoch and propose

292
00:08:29,840 --> 00:08:33,679
that i be the leader and monitor two

293
00:08:32,000 --> 00:08:34,958
gets that message and says oh well sure

294
00:08:33,679 --> 00:08:36,239
you're a better number than me you can

295
00:08:34,958 --> 00:08:38,478
be a leader

296
00:08:36,240 --> 00:08:40,080
and after i think five seconds or

297
00:08:38,479 --> 00:08:42,640
something monitor one

298
00:08:40,080 --> 00:08:43,919
we'll get we'll say hey i won because

299
00:08:42,640 --> 00:08:45,360
number two agreed with me

300
00:08:43,919 --> 00:08:47,040
and so i'm forming a quorum but it's

301
00:08:45,360 --> 00:08:49,360
only two of us it's just monitors one

302
00:08:47,040 --> 00:08:50,800
and two

303
00:08:49,360 --> 00:08:53,040
but meanwhile while that was happening

304
00:08:50,800 --> 00:08:54,479
eventually monitor zero goes hey

305
00:08:53,040 --> 00:08:56,240
i haven't heard back from my peons in a

306
00:08:54,480 --> 00:08:57,760
while and i think i should be the leader

307
00:08:56,240 --> 00:08:59,839
so i better run a new election in case

308
00:08:57,760 --> 00:09:01,040
one of them died and so monitor zero

309
00:08:59,839 --> 00:09:02,880
sends out a propose

310
00:09:01,040 --> 00:09:04,160
also with epoch 3 because he only saw

311
00:09:02,880 --> 00:09:07,040
epoch 2 and bumped it

312
00:09:04,160 --> 00:09:08,560
and monitor 2 says oh hey i got a

313
00:09:07,040 --> 00:09:09,360
monitor that's not in quorum sending me

314
00:09:08,560 --> 00:09:11,119
a proposal

315
00:09:09,360 --> 00:09:12,800
i'd better propose an election to make

316
00:09:11,120 --> 00:09:14,959
sure that they get in from everybody

317
00:09:12,800 --> 00:09:16,160
and so monitor two proposes with epoch 4

318
00:09:14,959 --> 00:09:19,518
that he would be the leader even though

319
00:09:16,160 --> 00:09:21,199
he knows he'll lose later

320
00:09:19,519 --> 00:09:22,959
and monitors 1 and 0 both get that

321
00:09:21,200 --> 00:09:24,160
proposal from two and say hey

322
00:09:22,959 --> 00:09:26,079
you can't be a leader i've got a better

323
00:09:24,160 --> 00:09:27,600
number than you so they propose back

324
00:09:26,080 --> 00:09:28,800
and they try and propose to each other

325
00:09:27,600 --> 00:09:30,720
but they can't because the network's

326
00:09:28,800 --> 00:09:32,399
still broken

327
00:09:30,720 --> 00:09:33,839
and you know monitor two will get one of

328
00:09:32,399 --> 00:09:35,120
their proposals first and agree to them

329
00:09:33,839 --> 00:09:36,399
but then i'll get from the other guy and

330
00:09:35,120 --> 00:09:38,720
go oh no

331
00:09:36,399 --> 00:09:40,320
and this cycle just repeats and so you

332
00:09:38,720 --> 00:09:41,920
never ever get a working quorum

333
00:09:40,320 --> 00:09:44,560
because the monitors are trying to elect

334
00:09:41,920 --> 00:09:45,839
a leader and keep one stable

335
00:09:44,560 --> 00:09:47,359
so this was the first problem that we

336
00:09:45,839 --> 00:09:48,800
identified when i was asked to make

337
00:09:47,360 --> 00:09:51,040
stretch clusters work

338
00:09:48,800 --> 00:09:52,640
and we came up with a plan the first

339
00:09:51,040 --> 00:09:55,120
thing part of the plan was make it

340
00:09:52,640 --> 00:09:56,800
possible to change the code at all

341
00:09:55,120 --> 00:09:58,560
the election code in seph is some of the

342
00:09:56,800 --> 00:10:01,359
oldest code in the system it's from

343
00:09:58,560 --> 00:10:01,920
like 2004 written by grad students and

344
00:10:01,360 --> 00:10:03,360
if you've

345
00:10:01,920 --> 00:10:05,279
ever read grad student code it can be

346
00:10:03,360 --> 00:10:07,120
really exciting

347
00:10:05,279 --> 00:10:09,200
you know we were pretty confident in it

348
00:10:07,120 --> 00:10:10,800
because it had been stable for a long

349
00:10:09,200 --> 00:10:12,000
time and we run a lot of tests where we

350
00:10:10,800 --> 00:10:14,640
do things to the system

351
00:10:12,000 --> 00:10:16,000
and it didn't break um but we actually

352
00:10:14,640 --> 00:10:18,000
just saw a new bug like a month and a

353
00:10:16,000 --> 00:10:19,360
half ago that was from this and that the

354
00:10:18,000 --> 00:10:20,880
other people assumed was from some of my

355
00:10:19,360 --> 00:10:21,600
earlier changes in regression and it

356
00:10:20,880 --> 00:10:24,079
wasn't

357
00:10:21,600 --> 00:10:25,200
so there were some issues um and and one

358
00:10:24,079 --> 00:10:26,239
of the things that made it particularly

359
00:10:25,200 --> 00:10:28,880
difficult was that

360
00:10:26,240 --> 00:10:30,320
the code mixed message passing from

361
00:10:28,880 --> 00:10:31,839
monitor a to b

362
00:10:30,320 --> 00:10:33,040
and the election logic about what to do

363
00:10:31,839 --> 00:10:35,440
with those messages in the same

364
00:10:33,040 --> 00:10:35,439
functions

365
00:10:36,320 --> 00:10:39,600
um and that made it hard to test and

366
00:10:38,640 --> 00:10:41,760
hard to update

367
00:10:39,600 --> 00:10:42,640
and in particular i wanted to maintain

368
00:10:41,760 --> 00:10:43,920
multiple

369
00:10:42,640 --> 00:10:45,279
strategies for running elections i

370
00:10:43,920 --> 00:10:46,079
wanted to maintain the classic one we've

371
00:10:45,279 --> 00:10:47,439
been using

372
00:10:46,079 --> 00:10:49,920
and the new one that i'm about to talk

373
00:10:47,440 --> 00:10:50,480
about and so i decided to split that up

374
00:10:49,920 --> 00:10:53,439
into

375
00:10:50,480 --> 00:10:55,040
a new election logic function or sorry a

376
00:10:53,440 --> 00:10:56,480
new election logic class which would

377
00:10:55,040 --> 00:10:59,360
decide what to do

378
00:10:56,480 --> 00:11:00,959
when you say we got to propose and the

379
00:10:59,360 --> 00:11:03,360
message passing elector class that we

380
00:11:00,959 --> 00:11:05,199
already had

381
00:11:03,360 --> 00:11:06,959
and then once i made that split i also

382
00:11:05,200 --> 00:11:07,440
wrote unit tests for the election logic

383
00:11:06,959 --> 00:11:09,518
class

384
00:11:07,440 --> 00:11:11,040
which was very exciting for me um

385
00:11:09,519 --> 00:11:11,519
because you know if you want to test

386
00:11:11,040 --> 00:11:14,000
this

387
00:11:11,519 --> 00:11:15,519
in a lab we need to set like we have a

388
00:11:14,000 --> 00:11:17,600
big lab we can use for testing

389
00:11:15,519 --> 00:11:19,279
but it still needs to run for tens tens

390
00:11:17,600 --> 00:11:21,040
of minutes or several hours and

391
00:11:19,279 --> 00:11:23,040
it's hard to like create specific

392
00:11:21,040 --> 00:11:24,959
scenarios whereas in unit tests i can

393
00:11:23,040 --> 00:11:26,640
just poke it directly at the code and

394
00:11:24,959 --> 00:11:28,560
run it and it all runs in line in one

395
00:11:26,640 --> 00:11:31,199
process and we do time step advancement

396
00:11:28,560 --> 00:11:32,479
and it does what i want

397
00:11:31,200 --> 00:11:34,640
and that made it a lot easier to work

398
00:11:32,480 --> 00:11:36,480
with it made it easier to iterate an

399
00:11:34,640 --> 00:11:38,640
experiment when i designed an algorithm

400
00:11:36,480 --> 00:11:40,160
because it turns out that i designed an

401
00:11:38,640 --> 00:11:40,880
algorithm and like the core idea was

402
00:11:40,160 --> 00:11:42,959
fine

403
00:11:40,880 --> 00:11:44,399
but i needed a bunch of new invariants

404
00:11:42,959 --> 00:11:45,839
that were always true

405
00:11:44,399 --> 00:11:47,920
when you're just going by id numbers but

406
00:11:45,839 --> 00:11:51,279
that you need to make true when you're

407
00:11:47,920 --> 00:11:51,279
using more complicated systems

408
00:11:51,600 --> 00:11:55,200
so here's an example of my unit tests of

409
00:11:53,360 --> 00:11:57,760
the unit tests i ended up building

410
00:11:55,200 --> 00:11:59,600
this one is just a demonstration of that

411
00:11:57,760 --> 00:12:02,079
thing i showed you graphically before

412
00:11:59,600 --> 00:12:04,079
we we the call the function is called

413
00:12:02,079 --> 00:12:06,079
blocked connection continues election

414
00:12:04,079 --> 00:12:07,839
um and then we pass in an election

415
00:12:06,079 --> 00:12:09,680
strategy

416
00:12:07,839 --> 00:12:11,440
so we might pass in the election

417
00:12:09,680 --> 00:12:13,519
strategy classic which is what i named

418
00:12:11,440 --> 00:12:16,079
the old one that i talked about

419
00:12:13,519 --> 00:12:16,880
and then we create an election class and

420
00:12:16,079 --> 00:12:19,279
this one has

421
00:12:16,880 --> 00:12:20,240
five electors or fake monitors in it and

422
00:12:19,279 --> 00:12:23,040
we give it the

423
00:12:20,240 --> 00:12:24,000
strategy which is usually classic and

424
00:12:23,040 --> 00:12:25,599
then we say hey

425
00:12:24,000 --> 00:12:27,360
we're going to block messages between

426
00:12:25,600 --> 00:12:28,639
monitors zero and one and then we're

427
00:12:27,360 --> 00:12:30,399
going to turn all the monitors on and

428
00:12:28,639 --> 00:12:32,240
have them start going

429
00:12:30,399 --> 00:12:33,760
and then we do this run timestamps

430
00:12:32,240 --> 00:12:34,399
function and this calls into the test

431
00:12:33,760 --> 00:12:36,079
harness

432
00:12:34,399 --> 00:12:38,880
and it says hey like i want you to

433
00:12:36,079 --> 00:12:41,439
advance up to 100 time steps

434
00:12:38,880 --> 00:12:42,959
a time step is the amount of time or

435
00:12:41,440 --> 00:12:44,560
when it advances the time step it like

436
00:12:42,959 --> 00:12:46,160
calls to every elector and says hey you

437
00:12:44,560 --> 00:12:48,079
get to advance one time step

438
00:12:46,160 --> 00:12:49,680
and so and they process their incoming

439
00:12:48,079 --> 00:12:50,800
messages and then can cue up outgoing

440
00:12:49,680 --> 00:12:52,880
messages and so

441
00:12:50,800 --> 00:12:54,160
delivering a message is a one-time step

442
00:12:52,880 --> 00:12:57,600
process

443
00:12:54,160 --> 00:12:58,079
um and if the and it'll run up to 100

444
00:12:57,600 --> 00:13:00,000
because

445
00:12:58,079 --> 00:13:01,599
if everything it becomes stable then

446
00:13:00,000 --> 00:13:02,560
it'll stop advancing time steps if

447
00:13:01,600 --> 00:13:04,399
there's

448
00:13:02,560 --> 00:13:05,599
if the electors have no timers waiting

449
00:13:04,399 --> 00:13:08,000
for something to time out and if they

450
00:13:05,600 --> 00:13:09,200
don't have any messages pending

451
00:13:08,000 --> 00:13:11,440
and then here we have a bunch of

452
00:13:09,200 --> 00:13:12,720
assertions so we have this test for is

453
00:13:11,440 --> 00:13:15,040
the election stable

454
00:13:12,720 --> 00:13:16,320
meaning that there are no timers if an

455
00:13:15,040 --> 00:13:17,439
election is stable there are no timers

456
00:13:16,320 --> 00:13:18,880
or messages queued

457
00:13:17,440 --> 00:13:21,040
and since in this one we blocked the

458
00:13:18,880 --> 00:13:22,480
messages we expect that they can't

459
00:13:21,040 --> 00:13:23,360
resolve so it will not be stable

460
00:13:22,480 --> 00:13:25,040
election

461
00:13:23,360 --> 00:13:27,200
and we will expect that the quorum has

462
00:13:25,040 --> 00:13:29,279
changed recently um

463
00:13:27,200 --> 00:13:30,959
so by recently i doubled the number of

464
00:13:29,279 --> 00:13:33,839
of timer steps that's how long

465
00:13:30,959 --> 00:13:35,199
a timer less because it takes two it

466
00:13:33,839 --> 00:13:35,920
takes two time steps for a rapture

467
00:13:35,200 --> 00:13:37,440
message

468
00:13:35,920 --> 00:13:39,199
so things time out after three time

469
00:13:37,440 --> 00:13:41,600
steps and i just doubled that

470
00:13:39,199 --> 00:13:43,920
for how long the quorum can take without

471
00:13:41,600 --> 00:13:47,519
changing

472
00:13:43,920 --> 00:13:49,920
and so we say hey it didn't finish

473
00:13:47,519 --> 00:13:50,560
but then we unblock the messaging

474
00:13:49,920 --> 00:13:52,719
between them

475
00:13:50,560 --> 00:13:54,880
and then we run forward it for more time

476
00:13:52,720 --> 00:13:55,680
and and we expect that once the there's

477
00:13:54,880 --> 00:13:57,920
no net split

478
00:13:55,680 --> 00:13:59,199
everything works and indeed it does we

479
00:13:57,920 --> 00:14:01,519
have a few extra

480
00:13:59,199 --> 00:14:03,040
assertions i check here that we want to

481
00:14:01,519 --> 00:14:04,240
be really sure that all the leaders

482
00:14:03,040 --> 00:14:06,160
or that all the monitors agree who the

483
00:14:04,240 --> 00:14:06,880
leader is i can't imagine how they

484
00:14:06,160 --> 00:14:08,399
wouldn't but

485
00:14:06,880 --> 00:14:09,680
if they somehow managed to segregate

486
00:14:08,399 --> 00:14:10,240
into different groups or one of them

487
00:14:09,680 --> 00:14:14,399
like

488
00:14:10,240 --> 00:14:16,160
lied or then that would be bad

489
00:14:14,399 --> 00:14:18,480
in particular you know you might have a

490
00:14:16,160 --> 00:14:20,719
thing where well one of them might

491
00:14:18,480 --> 00:14:21,519
have have a logic bug and and agree to

492
00:14:20,720 --> 00:14:24,720
two different

493
00:14:21,519 --> 00:14:26,000
monitors in the same election or who who

494
00:14:24,720 --> 00:14:27,279
both take that or something

495
00:14:26,000 --> 00:14:28,639
um and that would be bad and then we

496
00:14:27,279 --> 00:14:29,600
also check that they all agree on what

497
00:14:28,639 --> 00:14:30,800
the epoch is

498
00:14:29,600 --> 00:14:32,160
because if they're all agreeing the

499
00:14:30,800 --> 00:14:33,760
leader but some of them think the epoch

500
00:14:32,160 --> 00:14:36,240
is 10 steps behind the others

501
00:14:33,760 --> 00:14:37,519
something went wrong test harness is

502
00:14:36,240 --> 00:14:39,279
about 500 lines

503
00:14:37,519 --> 00:14:41,199
this is one of the simpler tests in

504
00:14:39,279 --> 00:14:43,839
particular this one you know

505
00:14:41,199 --> 00:14:45,279
this passes on the classic strategy but

506
00:14:43,839 --> 00:14:47,920
once i fix that split

507
00:14:45,279 --> 00:14:49,600
net splits like blocking progress then

508
00:14:47,920 --> 00:14:51,120
this fails so i don't run this on my new

509
00:14:49,600 --> 00:14:52,800
strategy

510
00:14:51,120 --> 00:14:54,560
and my new strategy is called the

511
00:14:52,800 --> 00:14:56,479
connectivity strategy

512
00:14:54,560 --> 00:14:58,079
and i said hey we want the most

513
00:14:56,480 --> 00:15:00,560
connected monitor to win

514
00:14:58,079 --> 00:15:01,920
so we're going to run heartbeats between

515
00:15:00,560 --> 00:15:04,000
all the monitors

516
00:15:01,920 --> 00:15:05,839
and try and maintain a and try and

517
00:15:04,000 --> 00:15:07,440
figure out like how stable they are

518
00:15:05,839 --> 00:15:10,079
and and generate scores for them and

519
00:15:07,440 --> 00:15:12,240
these scores are for every connection

520
00:15:10,079 --> 00:15:13,680
between ever pairwise these scores are

521
00:15:12,240 --> 00:15:16,480
this connection is alive

522
00:15:13,680 --> 00:15:17,359
and a number representing how alive we

523
00:15:16,480 --> 00:15:20,079
it has been

524
00:15:17,360 --> 00:15:21,600
over the past time period um we have a

525
00:15:20,079 --> 00:15:24,000
it's not quite the right formula but we

526
00:15:21,600 --> 00:15:26,959
have a half-life of 12 hours by default

527
00:15:24,000 --> 00:15:28,160
and we will ping every two seconds or i

528
00:15:26,959 --> 00:15:30,239
think every second

529
00:15:28,160 --> 00:15:32,079
um and assuming that ping comes back

530
00:15:30,240 --> 00:15:33,279
within a two second period then we say

531
00:15:32,079 --> 00:15:34,719
the connection is alive

532
00:15:33,279 --> 00:15:36,480
and it has been alive since the last

533
00:15:34,720 --> 00:15:37,120
time we got a ping and so we increased

534
00:15:36,480 --> 00:15:38,639
the score

535
00:15:37,120 --> 00:15:40,720
otherwise we decrease the score and mark

536
00:15:38,639 --> 00:15:42,720
the connection is down

537
00:15:40,720 --> 00:15:44,240
and those scores are and so a monitor

538
00:15:42,720 --> 00:15:46,320
maintains scores for all its peers but

539
00:15:44,240 --> 00:15:48,720
they also widely share those scores

540
00:15:46,320 --> 00:15:50,320
so i as monitor zero know exactly what

541
00:15:48,720 --> 00:15:51,279
the current scores are from me to

542
00:15:50,320 --> 00:15:52,959
everyone else

543
00:15:51,279 --> 00:15:54,480
and i have a slightly out of date view

544
00:15:52,959 --> 00:15:56,638
of what monitor one thinks

545
00:15:54,480 --> 00:15:59,519
the scores are and what monitor one is

546
00:15:56,639 --> 00:15:59,519
seen from everyone else

547
00:15:59,920 --> 00:16:03,040
and then when we get a proposed message

548
00:16:01,680 --> 00:16:05,599
instead of looking at the id number

549
00:16:03,040 --> 00:16:07,519
we look at the total score and the one

550
00:16:05,600 --> 00:16:09,040
with the higher connectivity score wins

551
00:16:07,519 --> 00:16:11,680
and then we still tie break based off of

552
00:16:09,040 --> 00:16:14,399
id number but that's not super likely

553
00:16:11,680 --> 00:16:16,638
once anything has died we can also

554
00:16:14,399 --> 00:16:18,480
specify that monitors are disallowed

555
00:16:16,639 --> 00:16:20,079
so if you have two data centers that are

556
00:16:18,480 --> 00:16:21,279
close to each other and a tiebreaker

557
00:16:20,079 --> 00:16:23,359
monitor far away

558
00:16:21,279 --> 00:16:24,320
you don't really want everything to have

559
00:16:23,360 --> 00:16:26,079
to go

560
00:16:24,320 --> 00:16:27,360
through out to the tiebreaker monitor

561
00:16:26,079 --> 00:16:29,040
who might be hundreds of milliseconds

562
00:16:27,360 --> 00:16:30,720
away so we say he's disallowed

563
00:16:29,040 --> 00:16:32,719
his only job is to pick one data center

564
00:16:30,720 --> 00:16:35,440
to win

565
00:16:32,720 --> 00:16:36,959
and there's a lot of nuance to that but

566
00:16:35,440 --> 00:16:38,560
that's basically the idea there's a pull

567
00:16:36,959 --> 00:16:41,839
request up for this now

568
00:16:38,560 --> 00:16:43,119
um and visually speaking

569
00:16:41,839 --> 00:16:44,880
you know we got our three monitors

570
00:16:43,120 --> 00:16:46,320
they're pinging each other happily

571
00:16:44,880 --> 00:16:47,839
and they're maintaining i've just got

572
00:16:46,320 --> 00:16:49,199
their local scores here but everyone

573
00:16:47,839 --> 00:16:50,240
says everyone's up and they have a score

574
00:16:49,199 --> 00:16:52,959
of one

575
00:16:50,240 --> 00:16:54,399
if we net split then after a while zero

576
00:16:52,959 --> 00:16:55,518
and one both say that the other person

577
00:16:54,399 --> 00:16:57,199
is down

578
00:16:55,519 --> 00:16:58,959
and they've decreased their scores but

579
00:16:57,199 --> 00:17:00,959
monitor two can still talk to everyone

580
00:16:58,959 --> 00:17:02,160
and he says that and and so the monitor

581
00:17:00,959 --> 00:17:02,880
two scores for everyone else are still

582
00:17:02,160 --> 00:17:04,319
high

583
00:17:02,880 --> 00:17:07,280
and everyone scores from honor two are

584
00:17:04,319 --> 00:17:09,599
high so after a timeout period

585
00:17:07,280 --> 00:17:10,720
um monitors zero and one both will

586
00:17:09,599 --> 00:17:12,079
propose to

587
00:17:10,720 --> 00:17:14,160
monitor two because they can't talk to

588
00:17:12,079 --> 00:17:15,839
each other and monitor two gets those

589
00:17:14,160 --> 00:17:17,439
gets those proposals and runs the number

590
00:17:15,839 --> 00:17:18,240
and says hey i got a better score than

591
00:17:17,439 --> 00:17:19,919
you guys do

592
00:17:18,240 --> 00:17:21,280
so i'm going to propose that i'd be the

593
00:17:19,919 --> 00:17:23,360
leader in epoch 4.

594
00:17:21,280 --> 00:17:24,720
and both of those guys say yes i agree

595
00:17:23,359 --> 00:17:27,119
you have a better score than me you can

596
00:17:24,720 --> 00:17:30,319
be the leader

597
00:17:27,119 --> 00:17:30,319
and then monitor 2 wins

598
00:17:30,320 --> 00:17:33,600
but if you then go on to disallow

599
00:17:31,919 --> 00:17:35,280
monitor two and i don't remember if

600
00:17:33,600 --> 00:17:35,760
disallowing will cause an election but

601
00:17:35,280 --> 00:17:37,120
we

602
00:17:35,760 --> 00:17:38,480
but you know we were running before and

603
00:17:37,120 --> 00:17:39,439
then we said oh i don't want monitor two

604
00:17:38,480 --> 00:17:41,760
to be in charge

605
00:17:39,440 --> 00:17:43,120
so we disallow monitor two and a new

606
00:17:41,760 --> 00:17:45,200
election happens and

607
00:17:43,120 --> 00:17:47,280
if one or one or zero proposed to

608
00:17:45,200 --> 00:17:47,840
monitor two then monitor two will say

609
00:17:47,280 --> 00:17:51,918
hey

610
00:17:47,840 --> 00:17:53,360
i am not allowed to be the leader and so

611
00:17:51,919 --> 00:17:55,039
um what it actually does is if you're

612
00:17:53,360 --> 00:17:57,199
disallowed you just have a score of zero

613
00:17:55,039 --> 00:17:59,200
um but he'll say oh well monitors one

614
00:17:57,200 --> 00:18:00,240
and zero both have the same score

615
00:17:59,200 --> 00:18:01,679
but i'm gonna pick one of them and

616
00:18:00,240 --> 00:18:02,480
monitor zero is the one i'm gonna pick

617
00:18:01,679 --> 00:18:04,799
because

618
00:18:02,480 --> 00:18:05,679
he's got the lower id number and there

619
00:18:04,799 --> 00:18:06,799
was a tie

620
00:18:05,679 --> 00:18:09,280
normally there probably wouldn't

621
00:18:06,799 --> 00:18:09,840
actually be a tie just because of timing

622
00:18:09,280 --> 00:18:11,840
and so

623
00:18:09,840 --> 00:18:13,760
one of them would win randomly but

624
00:18:11,840 --> 00:18:14,959
whatever

625
00:18:13,760 --> 00:18:17,440
and then after the timeout period

626
00:18:14,960 --> 00:18:21,440
monitor zero says hey i won

627
00:18:17,440 --> 00:18:22,559
i have a quorum of zero and two

628
00:18:21,440 --> 00:18:24,000
keep in mind though that while that's

629
00:18:22,559 --> 00:18:24,639
happening even though the quorum is zero

630
00:18:24,000 --> 00:18:26,000
and two

631
00:18:24,640 --> 00:18:27,760
one and two are still happily pinging

632
00:18:26,000 --> 00:18:28,559
back and forth and they're and

633
00:18:27,760 --> 00:18:30,559
maintaining

634
00:18:28,559 --> 00:18:32,160
and changing scores and those scores are

635
00:18:30,559 --> 00:18:33,840
being propagated back out to the world

636
00:18:32,160 --> 00:18:35,760
back to the other monitors through the

637
00:18:33,840 --> 00:18:37,840
working connections um

638
00:18:35,760 --> 00:18:39,039
and monitor one is also like i want i'm

639
00:18:37,840 --> 00:18:40,639
running i want to be in a quorum i'm

640
00:18:39,039 --> 00:18:41,919
going to propose to everyone i can see

641
00:18:40,640 --> 00:18:43,840
so we can send out those proposed

642
00:18:41,919 --> 00:18:46,000
messages um

643
00:18:43,840 --> 00:18:47,678
but monitor and one but but in this

644
00:18:46,000 --> 00:18:48,720
strategy when monitor one rece or when

645
00:18:47,679 --> 00:18:50,720
monitor two

646
00:18:48,720 --> 00:18:51,760
receives a proposed message from from an

647
00:18:50,720 --> 00:18:54,480
outer quorum peer

648
00:18:51,760 --> 00:18:56,240
he says oh you are out of quorum and um

649
00:18:54,480 --> 00:18:57,280
he'll like run a test and he'll say oh

650
00:18:56,240 --> 00:18:58,880
well if you're in

651
00:18:57,280 --> 00:19:00,799
if i to run an election right now i

652
00:18:58,880 --> 00:19:02,160
would vote for which guy

653
00:19:00,799 --> 00:19:03,918
and if he would vote for the current

654
00:19:02,160 --> 00:19:05,200
leader or sorry if he would vote for the

655
00:19:03,919 --> 00:19:07,120
same guy he voted for last time then

656
00:19:05,200 --> 00:19:08,559
he'll just ignore the proposal

657
00:19:07,120 --> 00:19:10,639
if it would change it then he might

658
00:19:08,559 --> 00:19:12,960
respond to one or bump up

659
00:19:10,640 --> 00:19:15,200
and say hey i want a new election um but

660
00:19:12,960 --> 00:19:17,120
in this case he just says nope

661
00:19:15,200 --> 00:19:18,559
you're not like you setting a proposed

662
00:19:17,120 --> 00:19:20,239
would not change the outcome of where we

663
00:19:18,559 --> 00:19:23,280
are right now so i'm just dropping you

664
00:19:20,240 --> 00:19:26,559
um that

665
00:19:23,280 --> 00:19:31,120
question so what happens if instead of

666
00:19:26,559 --> 00:19:31,120
the cards there is an overload

667
00:19:32,799 --> 00:19:36,799
so if the link the question is what

668
00:19:35,440 --> 00:19:38,640
happens if you have an overloaded link

669
00:19:36,799 --> 00:19:41,679
with highlight into your packet loss

670
00:19:38,640 --> 00:19:43,039
and but not a full break often an

671
00:19:41,679 --> 00:19:44,960
overloaded link with high latency or

672
00:19:43,039 --> 00:19:46,240
packet loss will look too ceph like a

673
00:19:44,960 --> 00:19:47,520
completely dead link

674
00:19:46,240 --> 00:19:49,520
just because of the amount of traffic we

675
00:19:47,520 --> 00:19:52,160
shove through it so

676
00:19:49,520 --> 00:19:53,600
if if it keeps serving all the all the

677
00:19:52,160 --> 00:19:55,840
messages quickly enough

678
00:19:53,600 --> 00:19:57,120
then it might then it might stay and and

679
00:19:55,840 --> 00:19:59,120
we'll have a problem

680
00:19:57,120 --> 00:20:00,799
but eventually we would expect it to get

681
00:19:59,120 --> 00:20:02,479
expect that link to get backed up

682
00:20:00,799 --> 00:20:04,080
and the pings will stop happening and

683
00:20:02,480 --> 00:20:05,520
the pings will stop happening

684
00:20:04,080 --> 00:20:07,439
or the pings will stop being replied too

685
00:20:05,520 --> 00:20:10,480
quickly enough and so

686
00:20:07,440 --> 00:20:12,400
um things and so the clock will

687
00:20:10,480 --> 00:20:13,679
migrate workloads well the monitors will

688
00:20:12,400 --> 00:20:14,640
migrate away from letting that one be

689
00:20:13,679 --> 00:20:16,320
the leader

690
00:20:14,640 --> 00:20:18,000
and they'll start you'll start getting

691
00:20:16,320 --> 00:20:20,720
failure reports from osds and

692
00:20:18,000 --> 00:20:21,840
monitors and stuff so if you have a

693
00:20:20,720 --> 00:20:23,360
partial failure

694
00:20:21,840 --> 00:20:25,280
stuff will have a partial detection and

695
00:20:23,360 --> 00:20:26,479
it may be slow for a while but

696
00:20:25,280 --> 00:20:28,799
it's a better state than where we are

697
00:20:26,480 --> 00:20:30,400
now um anyway

698
00:20:28,799 --> 00:20:32,400
going back to the unit testing now that

699
00:20:30,400 --> 00:20:34,960
i have this cool connectivity strategy

700
00:20:32,400 --> 00:20:36,480
we want to test it and and so instead of

701
00:20:34,960 --> 00:20:38,880
testing it in the real world

702
00:20:36,480 --> 00:20:40,000
we can just set it up to look the way we

703
00:20:38,880 --> 00:20:42,559
want to

704
00:20:40,000 --> 00:20:44,159
so i have the strategy here where um the

705
00:20:42,559 --> 00:20:46,158
connection tracker

706
00:20:44,159 --> 00:20:47,760
is the thing that keeps is the thing

707
00:20:46,159 --> 00:20:48,880
that keeps track of all the scores that

708
00:20:47,760 --> 00:20:50,960
everyone sees

709
00:20:48,880 --> 00:20:52,080
and then a connection report is i

710
00:20:50,960 --> 00:20:54,080
monitor zero

711
00:20:52,080 --> 00:20:56,960
have these scores for monitors for

712
00:20:54,080 --> 00:20:58,480
myself and one and two

713
00:20:56,960 --> 00:20:59,840
and so that's one in connection trackers

714
00:20:58,480 --> 00:21:01,440
all of them so we're getting so we're

715
00:20:59,840 --> 00:21:04,000
grabbing out a connection report

716
00:21:01,440 --> 00:21:04,799
and directly editing the history as the

717
00:21:04,000 --> 00:21:07,360
score

718
00:21:04,799 --> 00:21:09,039
and i guess i didn't change the liveness

719
00:21:07,360 --> 00:21:11,439
and bumping up the version

720
00:21:09,039 --> 00:21:13,039
so that this propagates and we can do

721
00:21:11,440 --> 00:21:15,200
this to a bunch of them

722
00:21:13,039 --> 00:21:16,960
and then i disable the pinging between

723
00:21:15,200 --> 00:21:18,240
monitors and what that means is that

724
00:21:16,960 --> 00:21:20,240
those well they'll stop sending the ping

725
00:21:18,240 --> 00:21:22,320
messages so they will not change the

726
00:21:20,240 --> 00:21:23,679
scores away from 0.5 so i know exactly

727
00:21:22,320 --> 00:21:26,639
what the scores are

728
00:21:23,679 --> 00:21:28,400
and the only time the um these scores

729
00:21:26,640 --> 00:21:29,919
propagate is when they send a less

730
00:21:28,400 --> 00:21:32,320
is when they send election messages to

731
00:21:29,919 --> 00:21:32,320
each other

732
00:21:33,600 --> 00:21:36,959
all right yep and then i run forward

733
00:21:36,320 --> 00:21:39,840
some

734
00:21:36,960 --> 00:21:41,200
forward in time with the start on and

735
00:21:39,840 --> 00:21:43,360
run the time steps

736
00:21:41,200 --> 00:21:45,280
and then i make sure hey we resolved a

737
00:21:43,360 --> 00:21:45,918
score even though or we resolved on a

738
00:21:45,280 --> 00:21:47,760
leader

739
00:21:45,919 --> 00:21:49,440
and that leader is stable and the quorum

740
00:21:47,760 --> 00:21:51,039
is stable even though they had

741
00:21:49,440 --> 00:21:51,919
disagreeing scores for what each other

742
00:21:51,039 --> 00:21:54,400
were

743
00:21:51,919 --> 00:21:57,280
um and we checked that the leaders agree

744
00:21:54,400 --> 00:21:57,280
and the epochs agree

745
00:21:57,520 --> 00:22:01,679
so that's sort of like that's an example

746
00:21:59,600 --> 00:22:03,280
of what i like to test

747
00:22:01,679 --> 00:22:04,880
so with those changes the monitors are

748
00:22:03,280 --> 00:22:06,879
happy and mult in multi-site

749
00:22:04,880 --> 00:22:08,080
you can have them in a cluster they deal

750
00:22:06,880 --> 00:22:10,559
with net splits

751
00:22:08,080 --> 00:22:12,080
they can deal with you know dropping

752
00:22:10,559 --> 00:22:13,520
half one of the data centers if we need

753
00:22:12,080 --> 00:22:14,960
to for some other reason like

754
00:22:13,520 --> 00:22:17,039
perhaps because of what we're doing with

755
00:22:14,960 --> 00:22:21,039
the osds

756
00:22:17,039 --> 00:22:22,640
so when a cluster changes in the os

757
00:22:21,039 --> 00:22:25,120
when an osd comes up or down or

758
00:22:22,640 --> 00:22:26,799
something about the cluster map changes

759
00:22:25,120 --> 00:22:28,320
the osds look at that change and they

760
00:22:26,799 --> 00:22:29,840
say hey do i have any data i'm

761
00:22:28,320 --> 00:22:31,200
responsible for now

762
00:22:29,840 --> 00:22:33,678
that someone else is supposed to be

763
00:22:31,200 --> 00:22:36,000
responsible for and if that's the case

764
00:22:33,679 --> 00:22:37,840
they they send out a note a notification

765
00:22:36,000 --> 00:22:39,840
saying hey you're supposed to be primary

766
00:22:37,840 --> 00:22:41,199
for this piece of data now and when you

767
00:22:39,840 --> 00:22:42,320
find out your primary

768
00:22:41,200 --> 00:22:44,240
then you need to make sure you have the

769
00:22:42,320 --> 00:22:46,320
newest version of the data

770
00:22:44,240 --> 00:22:47,600
and that means going through the osd

771
00:22:46,320 --> 00:22:49,200
maps and

772
00:22:47,600 --> 00:22:50,639
finding the old peers who might have

773
00:22:49,200 --> 00:22:52,559
data that you don't

774
00:22:50,640 --> 00:22:55,200
and then you query those peers and ask

775
00:22:52,559 --> 00:22:56,559
what version they have and then

776
00:22:55,200 --> 00:22:58,320
if they have newer data you ask for the

777
00:22:56,559 --> 00:23:00,720
update logs and you ask for the updates

778
00:22:58,320 --> 00:23:02,559
um graphically speaking let's say we

779
00:23:00,720 --> 00:23:04,000
have here in this case we have two osds

780
00:23:02,559 --> 00:23:05,760
and the one on the left

781
00:23:04,000 --> 00:23:07,360
just rebooted or something so he's got

782
00:23:05,760 --> 00:23:08,559
version whoops so he's got version five

783
00:23:07,360 --> 00:23:10,320
of the data and

784
00:23:08,559 --> 00:23:12,080
and then and then the one on the right

785
00:23:10,320 --> 00:23:13,840
has version eight um so he asks for the

786
00:23:12,080 --> 00:23:15,600
version and he gets it back

787
00:23:13,840 --> 00:23:17,280
and he still knows that he's got the

788
00:23:15,600 --> 00:23:18,799
that he's got version five with with

789
00:23:17,280 --> 00:23:19,600
content a but he knows there's newer

790
00:23:18,799 --> 00:23:21,918
updates

791
00:23:19,600 --> 00:23:23,360
and then he asks for the updates and

792
00:23:21,919 --> 00:23:25,200
says what are they um

793
00:23:23,360 --> 00:23:26,959
probably what this is is this is a

794
00:23:25,200 --> 00:23:28,720
collection of objects and so he's asking

795
00:23:26,960 --> 00:23:31,919
for which objects changed

796
00:23:28,720 --> 00:23:33,679
and he gets back oh it's these ones

797
00:23:31,919 --> 00:23:35,440
and then he says hey send me the new

798
00:23:33,679 --> 00:23:37,440
data um and

799
00:23:35,440 --> 00:23:38,559
like this is a series of messages

800
00:23:37,440 --> 00:23:40,480
because we don't want anything to be too

801
00:23:38,559 --> 00:23:42,399
large so you might get two at a time

802
00:23:40,480 --> 00:23:44,080
and then nobody has one left and then he

803
00:23:42,400 --> 00:23:46,880
asks for it again and he gets it back

804
00:23:44,080 --> 00:23:47,439
um to get through it's objects make

805
00:23:46,880 --> 00:23:50,880
sense

806
00:23:47,440 --> 00:23:51,840
generally speaking okay so that's a real

807
00:23:50,880 --> 00:23:54,559
simple example

808
00:23:51,840 --> 00:23:55,840
in real life we generally have three

809
00:23:54,559 --> 00:23:57,039
copies of all the data

810
00:23:55,840 --> 00:23:58,959
i'm not putting that on the screen

811
00:23:57,039 --> 00:24:02,158
because it's harder to draw and

812
00:23:58,960 --> 00:24:03,600
harder to show the problems

813
00:24:02,159 --> 00:24:05,760
and so we have three copies of all the

814
00:24:03,600 --> 00:24:08,158
data but we generally have a minimum

815
00:24:05,760 --> 00:24:09,440
size required to go active to serve any

816
00:24:08,159 --> 00:24:12,159
reads or writes on the data

817
00:24:09,440 --> 00:24:13,919
of two and the reason for that is that

818
00:24:12,159 --> 00:24:16,880
we're a very consistent system

819
00:24:13,919 --> 00:24:18,960
we notice if we aren't consistent we

820
00:24:16,880 --> 00:24:21,600
notice if we might be inconsistent

821
00:24:18,960 --> 00:24:22,960
and in particular if we go active with

822
00:24:21,600 --> 00:24:25,120
one osd

823
00:24:22,960 --> 00:24:26,559
holding the data and we accept a right

824
00:24:25,120 --> 00:24:29,678
and then that osc goes away

825
00:24:26,559 --> 00:24:31,120
we've lost data and we can't get it back

826
00:24:29,679 --> 00:24:33,120
and if you are running a system with

827
00:24:31,120 --> 00:24:34,799
three copies and we tell you that one

828
00:24:33,120 --> 00:24:35,520
osd died and now you've lost all your

829
00:24:34,799 --> 00:24:37,520
data and

830
00:24:35,520 --> 00:24:40,879
now you can't access your block device

831
00:24:37,520 --> 00:24:40,879
you're going to be really angry at us

832
00:24:42,080 --> 00:24:46,639
now and the way this works is that the

833
00:24:45,120 --> 00:24:47,360
osd's know the specific version that

834
00:24:46,640 --> 00:24:48,720
everything's at

835
00:24:47,360 --> 00:24:50,000
we don't want anyone else to know the

836
00:24:48,720 --> 00:24:50,480
exact versions they're at because that

837
00:24:50,000 --> 00:24:53,120
would mean

838
00:24:50,480 --> 00:24:54,880
talking to them on every update um but

839
00:24:53,120 --> 00:24:56,959
the ocs are the exact version they're at

840
00:24:54,880 --> 00:24:58,240
and the monitors know that updates were

841
00:24:56,960 --> 00:24:59,919
allowed the reason

842
00:24:58,240 --> 00:25:01,279
like we do work to make sure that's the

843
00:24:59,919 --> 00:25:02,480
case and the reason for that

844
00:25:01,279 --> 00:25:04,400
is that when someone becomes a new

845
00:25:02,480 --> 00:25:06,159
primary they need to know who to go ask

846
00:25:04,400 --> 00:25:09,520
for the data

847
00:25:06,159 --> 00:25:10,640
and so before and so the osds report

848
00:25:09,520 --> 00:25:13,200
into the monitors hey

849
00:25:10,640 --> 00:25:14,080
i am like going to going to go active

850
00:25:13,200 --> 00:25:15,360
and so

851
00:25:14,080 --> 00:25:17,760
mark down that i'm allowed to make

852
00:25:15,360 --> 00:25:19,360
changes

853
00:25:17,760 --> 00:25:20,559
and this is one of the things that we do

854
00:25:19,360 --> 00:25:22,399
just to make sure that we can stay

855
00:25:20,559 --> 00:25:24,080
absolutely consistent and so we know who

856
00:25:22,400 --> 00:25:26,720
to talk to

857
00:25:24,080 --> 00:25:27,199
so if we have a two main data centers

858
00:25:26,720 --> 00:25:30,000
and one

859
00:25:27,200 --> 00:25:31,840
off-site tiebreaker monitor model and

860
00:25:30,000 --> 00:25:33,760
this is a really simplified

861
00:25:31,840 --> 00:25:35,760
version of it obviously but the problem

862
00:25:33,760 --> 00:25:37,279
exists even with more complicated setups

863
00:25:35,760 --> 00:25:38,480
so let's say we have data center one on

864
00:25:37,279 --> 00:25:39,039
the left and data center two on the

865
00:25:38,480 --> 00:25:42,559
right

866
00:25:39,039 --> 00:25:44,158
and osc 1.0 1.1 and 2.0 and 2.1

867
00:25:42,559 --> 00:25:46,639
and they're only appearing straight

868
00:25:44,159 --> 00:25:47,840
across for whatever reason

869
00:25:46,640 --> 00:25:49,120
then they might all you know your

870
00:25:47,840 --> 00:25:50,320
cluster's running and everyone's at

871
00:25:49,120 --> 00:25:53,600
version 8.

872
00:25:50,320 --> 00:25:56,320
but then we lose osd 2.0

873
00:25:53,600 --> 00:25:57,840
and you know life is sad but hey we

874
00:25:56,320 --> 00:25:59,678
still have osd one

875
00:25:57,840 --> 00:26:02,000
and so he can keep on serving the rights

876
00:25:59,679 --> 00:26:04,960
and everyone can keep making progress

877
00:26:02,000 --> 00:26:05,279
but now we've lost data center one and

878
00:26:04,960 --> 00:26:08,559
the

879
00:26:05,279 --> 00:26:09,520
and so that's bad because you know osd

880
00:26:08,559 --> 00:26:10,879
1.0 had

881
00:26:09,520 --> 00:26:13,120
the newest version of some data that no

882
00:26:10,880 --> 00:26:16,640
one else had and in particular

883
00:26:13,120 --> 00:26:18,239
maybe we get osd 2.0 back

884
00:26:16,640 --> 00:26:19,760
but we still can't go active and serve

885
00:26:18,240 --> 00:26:23,039
reads and writes because he knows

886
00:26:19,760 --> 00:26:24,879
oh like osd one went active

887
00:26:23,039 --> 00:26:26,799
he he probably did some i o and is it a

888
00:26:24,880 --> 00:26:28,480
newer version than me

889
00:26:26,799 --> 00:26:30,080
and so even though you had this thing

890
00:26:28,480 --> 00:26:32,080
you built it for for

891
00:26:30,080 --> 00:26:33,918
fail for like data center lost tolerance

892
00:26:32,080 --> 00:26:36,158
it no longer has tolerated

893
00:26:33,919 --> 00:26:38,799
data center loss because of just one bad

894
00:26:36,159 --> 00:26:42,400
osd that wasn't up to date

895
00:26:38,799 --> 00:26:43,840
and that makes everybody sad

896
00:26:42,400 --> 00:26:46,240
and you know there are systems where

897
00:26:43,840 --> 00:26:46,959
this is okay there are storage systems

898
00:26:46,240 --> 00:26:48,480
where if you

899
00:26:46,960 --> 00:26:50,400
do that to the system it just won't even

900
00:26:48,480 --> 00:26:52,400
notice that you went back in time

901
00:26:50,400 --> 00:26:54,720
and maybe your application won't notice

902
00:26:52,400 --> 00:26:56,640
either and maybe you won't notice either

903
00:26:54,720 --> 00:26:58,559
but maybe your application does notice

904
00:26:56,640 --> 00:27:02,000
and things go horribly horribly wrong

905
00:26:58,559 --> 00:27:03,440
so we don't let that happen um and

906
00:27:02,000 --> 00:27:06,159
you know the example i've given you is a

907
00:27:03,440 --> 00:27:07,840
toy example but it's not super unlikely

908
00:27:06,159 --> 00:27:11,120
that you have you know

909
00:27:07,840 --> 00:27:11,600
dozens of osd's and one of them rebooted

910
00:27:11,120 --> 00:27:14,639
because

911
00:27:11,600 --> 00:27:16,320
you know a server you were updating a

912
00:27:14,640 --> 00:27:17,919
server software or you're you were like

913
00:27:16,320 --> 00:27:18,960
upgrading ceph and so one osd was

914
00:27:17,919 --> 00:27:21,360
rebooting

915
00:27:18,960 --> 00:27:22,559
and it was continuing to process data in

916
00:27:21,360 --> 00:27:24,719
the other data center

917
00:27:22,559 --> 00:27:25,600
and then the data center links broke and

918
00:27:24,720 --> 00:27:26,799
so

919
00:27:25,600 --> 00:27:28,320
you know most of the data is still

920
00:27:26,799 --> 00:27:28,879
available but some of it isn't and we

921
00:27:28,320 --> 00:27:30,480
really need

922
00:27:28,880 --> 00:27:31,919
all of it because of the way we

923
00:27:30,480 --> 00:27:33,440
distribute virtual block devices and

924
00:27:31,919 --> 00:27:35,760
things

925
00:27:33,440 --> 00:27:36,960
so this is work in progress what i'm

926
00:27:35,760 --> 00:27:38,559
about to start talking about i'm working

927
00:27:36,960 --> 00:27:39,360
on it now i was hoping to have it the

928
00:27:38,559 --> 00:27:41,918
pull request

929
00:27:39,360 --> 00:27:43,520
option to direct you here but not quite

930
00:27:41,919 --> 00:27:45,039
very very soon

931
00:27:43,520 --> 00:27:48,000
so the design target for our stretch

932
00:27:45,039 --> 00:27:49,600
mode is having two main data centers and

933
00:27:48,000 --> 00:27:51,200
then a third tiebreaker model

934
00:27:49,600 --> 00:27:53,678
or a fifth tiebreaker monitor somewhere

935
00:27:51,200 --> 00:27:55,279
else and we're going to have two copies

936
00:27:53,679 --> 00:27:57,679
of the data in each data center

937
00:27:55,279 --> 00:27:59,360
the reason for that being you know if we

938
00:27:57,679 --> 00:28:00,480
um well that's mostly because of what

939
00:27:59,360 --> 00:28:02,479
red hat supports

940
00:28:00,480 --> 00:28:03,760
and what i felt comfortable letting out

941
00:28:02,480 --> 00:28:06,559
into the world

942
00:28:03,760 --> 00:28:08,080
we do support two copies within size one

943
00:28:06,559 --> 00:28:09,760
if you're running on all flash

944
00:28:08,080 --> 00:28:12,240
and so if you lose a data center out of

945
00:28:09,760 --> 00:28:14,559
this you still have two copies

946
00:28:12,240 --> 00:28:16,159
of all the data and it is on its own

947
00:28:14,559 --> 00:28:17,520
even with the dead data center like the

948
00:28:16,159 --> 00:28:19,120
surviving data center and set of

949
00:28:17,520 --> 00:28:20,480
monitors are a supportable configuration

950
00:28:19,120 --> 00:28:23,600
if you just like

951
00:28:20,480 --> 00:28:25,440
cut it down we

952
00:28:23,600 --> 00:28:26,959
restrict the osd monitor communications

953
00:28:25,440 --> 00:28:28,640
so they stay within the data center by

954
00:28:26,960 --> 00:28:30,720
default the osds are allowed to talk to

955
00:28:28,640 --> 00:28:33,120
any monitor they want to

956
00:28:30,720 --> 00:28:34,320
but besides the fact that you know it

957
00:28:33,120 --> 00:28:35,678
might be higher latency to go out and

958
00:28:34,320 --> 00:28:38,559
talk to someone else

959
00:28:35,679 --> 00:28:40,240
um the we also want to notice when osd's

960
00:28:38,559 --> 00:28:42,000
are not split from their peers

961
00:28:40,240 --> 00:28:43,919
and so osd's ping each other just like

962
00:28:42,000 --> 00:28:45,200
the monitors do now

963
00:28:43,919 --> 00:28:46,240
and they will report and they will

964
00:28:45,200 --> 00:28:48,720
report when they can't talk to their

965
00:28:46,240 --> 00:28:50,799
peers to try and mark them dead

966
00:28:48,720 --> 00:28:51,840
but if an osd can talk to any monitor

967
00:28:50,799 --> 00:28:53,679
that's in the quorum

968
00:28:51,840 --> 00:28:55,678
he gets to stay alive and so we don't

969
00:28:53,679 --> 00:28:56,799
want a net split between the data

970
00:28:55,679 --> 00:28:58,799
centers and for

971
00:28:56,799 --> 00:29:00,559
the losing data center to have all its

972
00:28:58,799 --> 00:29:01,679
osd's talking to the tiebreaker monitor

973
00:29:00,559 --> 00:29:03,200
because they can reach it

974
00:29:01,679 --> 00:29:05,039
and having that tiebreaker monitor keep

975
00:29:03,200 --> 00:29:06,159
them alive that would be bad so we say

976
00:29:05,039 --> 00:29:07,600
you are only allowed to talk

977
00:29:06,159 --> 00:29:09,120
to oses we're only allowed to talk to

978
00:29:07,600 --> 00:29:10,000
monitors in their data center to stay

979
00:29:09,120 --> 00:29:12,080
alive

980
00:29:10,000 --> 00:29:13,039
and then in addition to requiring a

981
00:29:12,080 --> 00:29:15,439
minimum number of

982
00:29:13,039 --> 00:29:16,559
osds to be alive to go active we say you

983
00:29:15,440 --> 00:29:19,440
have to have

984
00:29:16,559 --> 00:29:21,440
osds from more than one data center um

985
00:29:19,440 --> 00:29:23,360
or availability zone or whatever it's a

986
00:29:21,440 --> 00:29:25,279
configurable thing and that means that

987
00:29:23,360 --> 00:29:28,959
if we lose an osd

988
00:29:25,279 --> 00:29:31,520
um then you know it will have to make

989
00:29:28,960 --> 00:29:33,039
another copy on the same day or

990
00:29:31,520 --> 00:29:34,639
by default you'll have two of in each so

991
00:29:33,039 --> 00:29:36,559
you'll lose an osd but

992
00:29:34,640 --> 00:29:38,640
we will make sure that we go active with

993
00:29:36,559 --> 00:29:41,840
at least one osd from both sides

994
00:29:38,640 --> 00:29:41,840
and probably all three of them

995
00:29:42,080 --> 00:29:45,120
and then let's see

996
00:29:45,279 --> 00:29:49,120
right so i already went through this

997
00:29:48,240 --> 00:29:51,360
cool

998
00:29:49,120 --> 00:29:52,479
and so visually everybody's pinging each

999
00:29:51,360 --> 00:29:55,279
other

1000
00:29:52,480 --> 00:29:55,919
we lose the old osd um but everyone

1001
00:29:55,279 --> 00:29:57,279
keeps

1002
00:29:55,919 --> 00:30:00,399
and and the cluster keeps running and in

1003
00:29:57,279 --> 00:30:01,360
this case oh no osd 1.0 isn't allowed to

1004
00:30:00,399 --> 00:30:03,918
do anything

1005
00:30:01,360 --> 00:30:05,120
so like you have a data unavailability

1006
00:30:03,919 --> 00:30:06,799
which is not great

1007
00:30:05,120 --> 00:30:08,719
but you know you can go work and get osd

1008
00:30:06,799 --> 00:30:10,720
2.0 back online

1009
00:30:08,720 --> 00:30:11,760
and meanwhile osd's 1.1 and 2.1 are

1010
00:30:10,720 --> 00:30:13,760
updating their data

1011
00:30:11,760 --> 00:30:15,279
but then when the links break we can

1012
00:30:13,760 --> 00:30:17,600
still we like the mon

1013
00:30:15,279 --> 00:30:19,360
the tiebreaker monitor chooses osd 2 or

1014
00:30:17,600 --> 00:30:20,158
sorry data center 2 side for whatever

1015
00:30:19,360 --> 00:30:21,520
reason

1016
00:30:20,159 --> 00:30:23,200
and they make their own little cluster

1017
00:30:21,520 --> 00:30:25,600
and they change the rules to say

1018
00:30:23,200 --> 00:30:27,679
you are allowed to go active without

1019
00:30:25,600 --> 00:30:30,799
having osds in multiple data centers

1020
00:30:27,679 --> 00:30:33,679
and we are disallowing the monitors in

1021
00:30:30,799 --> 00:30:34,158
data center one for becoming the leader

1022
00:30:33,679 --> 00:30:36,080
and

1023
00:30:34,159 --> 00:30:38,799
then we can keep making updates to osd

1024
00:30:36,080 --> 00:30:40,000
2.1 and when osd 2.0 comes back he can

1025
00:30:38,799 --> 00:30:41,760
keep making updates

1026
00:30:40,000 --> 00:30:51,840
and life is great and i have five

1027
00:30:41,760 --> 00:30:51,840
minutes if you guys have questions

1028
00:30:53,600 --> 00:30:56,799
everybody stunned i guess

1029
00:31:01,919 --> 00:31:05,360
so you mentioned there's a half-life of

1030
00:31:04,080 --> 00:31:06,960
12 hours

1031
00:31:05,360 --> 00:31:09,600
why did why did you settle on that

1032
00:31:06,960 --> 00:31:10,880
number it was completely arbitrary

1033
00:31:09,600 --> 00:31:13,039
i needed to write a number down it's

1034
00:31:10,880 --> 00:31:15,519
configurable but basically

1035
00:31:13,039 --> 00:31:16,799
we want to not immediately forget if a

1036
00:31:15,519 --> 00:31:18,080
connection died but we also want it to

1037
00:31:16,799 --> 00:31:20,399
age out because

1038
00:31:18,080 --> 00:31:21,840
like if a mod if you reboot the server

1039
00:31:20,399 --> 00:31:24,959
monitors on its score will drop

1040
00:31:21,840 --> 00:31:24,959
and we want that to age out

1041
00:31:30,480 --> 00:31:34,080
the question is when this is coming out

1042
00:31:32,320 --> 00:31:34,960
and the answer is it's gonna be in

1043
00:31:34,080 --> 00:31:36,879
before

1044
00:31:34,960 --> 00:31:37,920
before octopus is released at the end of

1045
00:31:36,880 --> 00:31:42,000
the month or in march

1046
00:31:37,920 --> 00:31:45,039
[Laughter]

1047
00:31:42,000 --> 00:31:45,039
or else i'm gonna be in a lot of

1048
00:31:45,120 --> 00:31:50,479
i got trouble right uh you basically

1049
00:31:48,159 --> 00:31:52,399
suggest to have uh if you have two data

1050
00:31:50,480 --> 00:31:55,600
centers you'd like to have a copy of

1051
00:31:52,399 --> 00:31:56,959
four of them the question was if you

1052
00:31:55,600 --> 00:31:58,639
have two data centers do you

1053
00:31:56,960 --> 00:32:00,240
i'm suggesting four copies instead of

1054
00:31:58,640 --> 00:32:03,360
three copies yes that's correct

1055
00:32:00,240 --> 00:32:05,039
um so i like i said during the talk

1056
00:32:03,360 --> 00:32:07,120
i really want that if you lose a data

1057
00:32:05,039 --> 00:32:09,120
center because if you lose a data center

1058
00:32:07,120 --> 00:32:10,799
maybe it's temporary but there's a good

1059
00:32:09,120 --> 00:32:12,959
chance it's a very long term

1060
00:32:10,799 --> 00:32:16,399
and so i want the surviving cluster to

1061
00:32:12,960 --> 00:32:16,399
be supportable on its own

1062
00:32:16,720 --> 00:32:20,000
that's you know some people may be sad

1063
00:32:18,559 --> 00:32:22,639
about that and so in that case you can

1064
00:32:20,000 --> 00:32:24,480
run with three data centers which

1065
00:32:22,640 --> 00:32:25,519
will mostly work although still might

1066
00:32:24,480 --> 00:32:26,640
have trouble with net splitting on the

1067
00:32:25,519 --> 00:32:28,399
osd side

1068
00:32:26,640 --> 00:32:30,640
i'm planning to get to that after after

1069
00:32:28,399 --> 00:32:33,918
the octopus release

1070
00:32:30,640 --> 00:32:35,679
but for the product needs that red hat

1071
00:32:33,919 --> 00:32:43,840
red hat gave me then that was sufficient

1072
00:32:35,679 --> 00:32:43,840
we could go to four copies

1073
00:32:52,720 --> 00:32:56,480
the question was if the reason we have

1074
00:32:54,480 --> 00:32:57,519
ping statistics in the manager novelists

1075
00:32:56,480 --> 00:32:59,039
are because of the teacher and actually

1076
00:32:57,519 --> 00:33:02,159
no it has nothing to do with it

1077
00:32:59,039 --> 00:33:04,640
it's just good good information to have

1078
00:33:02,159 --> 00:33:06,640
network issues instead network issues

1079
00:33:04,640 --> 00:33:08,559
under underneath step in general

1080
00:33:06,640 --> 00:33:10,159
have resulted in a lot of like problems

1081
00:33:08,559 --> 00:33:12,559
that are hard to diagnose

1082
00:33:10,159 --> 00:33:13,760
so we want to expose that more carefully

1083
00:33:12,559 --> 00:33:14,480
and make it more obvious when they're

1084
00:33:13,760 --> 00:33:17,760
probably

1085
00:33:14,480 --> 00:33:17,760
an underlying cause of an issue

1086
00:33:18,799 --> 00:33:23,360
ah so yes the monitors use their own

1087
00:33:21,279 --> 00:33:24,480
statistics i think the ping statistics

1088
00:33:23,360 --> 00:33:26,000
that you get in the manager are actually

1089
00:33:24,480 --> 00:33:28,080
just from the osd heart beating

1090
00:33:26,000 --> 00:33:30,159
although i'm not totally sure about that

1091
00:33:28,080 --> 00:33:32,720
so i guess we can plug these into the

1092
00:33:30,159 --> 00:33:39,840
manager as well but we don't yet

1093
00:33:32,720 --> 00:33:39,840
someone in the back had a question yes

1094
00:33:51,039 --> 00:33:54,559
the question was if five milliseconds is

1095
00:33:52,799 --> 00:33:56,320
a hard limit or something that we ride

1096
00:33:54,559 --> 00:33:58,240
up by testing and the answer is

1097
00:33:56,320 --> 00:34:00,000
i i was just five milliseconds is sort

1098
00:33:58,240 --> 00:34:01,279
of like it it's not

1099
00:34:00,000 --> 00:34:03,519
completely arbitrary but it's not a hard

1100
00:34:01,279 --> 00:34:04,960
limit it's just that like we have run

1101
00:34:03,519 --> 00:34:06,480
ceph in a lot of data centers that had

1102
00:34:04,960 --> 00:34:07,600
latency up to around two and a half or

1103
00:34:06,480 --> 00:34:09,280
three milliseconds

1104
00:34:07,600 --> 00:34:11,359
and five milliseconds when you add up

1105
00:34:09,280 --> 00:34:13,200
the latencies on doing right ios

1106
00:34:11,359 --> 00:34:14,799
it's you know not great but it's sort of

1107
00:34:13,199 --> 00:34:16,799
in the range of what you may see in a

1108
00:34:14,800 --> 00:34:19,919
cef hard drive based cluster anyway

1109
00:34:16,800 --> 00:34:20,399
so it's plausible whereas you know if

1110
00:34:19,918 --> 00:34:22,480
you do

1111
00:34:20,399 --> 00:34:23,598
100 milliseconds then some of your

1112
00:34:22,480 --> 00:34:24,800
primaries are going to be across your

1113
00:34:23,599 --> 00:34:26,399
remote link

1114
00:34:24,800 --> 00:34:27,919
and your reads are going to be slow and

1115
00:34:26,399 --> 00:34:29,279
your rights are like

1116
00:34:27,918 --> 00:34:30,719
two and a half of those hops or

1117
00:34:29,280 --> 00:34:31,919
something and so they're going to be

1118
00:34:30,719 --> 00:34:33,040
really slow and everyone's just

1119
00:34:31,918 --> 00:34:34,560
miserable so it's just

1120
00:34:33,040 --> 00:34:37,199
it needs to be you know kind of data

1121
00:34:34,560 --> 00:34:37,199
center-ish

1122
00:34:41,359 --> 00:34:51,279
all right well i will be oh

1123
00:34:48,159 --> 00:34:53,599
thing so we are running our monitors

1124
00:34:51,280 --> 00:34:56,079
in a rounded environment and just use

1125
00:34:53,599 --> 00:34:56,720
vfd so directional forwarding detection

1126
00:34:56,079 --> 00:34:59,359
resist

1127
00:34:56,719 --> 00:35:00,560
which is within our ospf protocol that

1128
00:34:59,359 --> 00:35:04,078
we use anyway

1129
00:35:00,560 --> 00:35:05,279
so i just was wondering why you invented

1130
00:35:04,079 --> 00:35:07,520
the wheel twice

1131
00:35:05,280 --> 00:35:07,520
ah

1132
00:35:08,320 --> 00:35:11,520
so the question was why i'm talking

1133
00:35:09,839 --> 00:35:14,000
about having our own pings and so i'm

1134
00:35:11,520 --> 00:35:17,200
writing down ping but it's actually a

1135
00:35:14,000 --> 00:35:18,960
normal seth over the wire message

1136
00:35:17,200 --> 00:35:21,040
that goes through the normal ceph

1137
00:35:18,960 --> 00:35:23,040
communication pipeline it's not a like

1138
00:35:21,040 --> 00:35:24,880
it's not a network primitive and that's

1139
00:35:23,040 --> 00:35:25,759
on purpose we want to make sure that the

1140
00:35:24,880 --> 00:35:28,160
entire

1141
00:35:25,760 --> 00:35:28,880
stack is working properly because you

1142
00:35:28,160 --> 00:35:30,319
know if

1143
00:35:28,880 --> 00:35:32,000
it may be that the monitor is still

1144
00:35:30,320 --> 00:35:35,920
alive technically

1145
00:35:32,000 --> 00:35:37,760
but if it's like got gigabytes worth of

1146
00:35:35,920 --> 00:35:39,359
data and swap and it can't handle

1147
00:35:37,760 --> 00:35:44,320
messages then we want to market as as

1148
00:35:39,359 --> 00:35:46,480
not behaving

1149
00:35:44,320 --> 00:35:48,960
ah the question was about messenger v2

1150
00:35:46,480 --> 00:35:50,640
and it is not necessary for this

1151
00:35:48,960 --> 00:35:52,160
although i mean you'll have it and you

1152
00:35:50,640 --> 00:35:53,440
should run messenger v2 if you have it

1153
00:35:52,160 --> 00:35:59,839
but

1154
00:35:53,440 --> 00:35:59,839
this is at a higher layer

1155
00:36:11,119 --> 00:36:14,320
uh the question was about if this will

1156
00:36:12,480 --> 00:36:16,320
be in a specific

1157
00:36:14,320 --> 00:36:17,839
um linux distribution and i have no idea

1158
00:36:16,320 --> 00:36:19,040
this is going into the next upstream

1159
00:36:17,839 --> 00:36:20,320
stuff release and

1160
00:36:19,040 --> 00:36:21,759
distributions will get it when they get

1161
00:36:20,320 --> 00:36:26,079
it this has nothing to do with what the

1162
00:36:21,760 --> 00:36:28,640
clients are so it's all server-side it's

1163
00:36:26,079 --> 00:36:39,119
just part of the packages yeah

1164
00:36:28,640 --> 00:36:39,118
okay okay thank you thanks all

