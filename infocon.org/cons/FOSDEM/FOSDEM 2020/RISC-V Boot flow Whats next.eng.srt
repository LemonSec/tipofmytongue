1
00:00:05,440 --> 00:00:08,639
hi

2
00:00:06,000 --> 00:00:10,080
um i'm atish i work for also work for

3
00:00:08,639 --> 00:00:12,959
western digital

4
00:00:10,080 --> 00:00:14,480
and uh i'm here to talk about the

5
00:00:12,960 --> 00:00:17,199
booting in risk five

6
00:00:14,480 --> 00:00:18,960
what's current state and what's the road

7
00:00:17,199 --> 00:00:21,760
ahead uh

8
00:00:18,960 --> 00:00:22,240
for the booting flow in disc five and

9
00:00:21,760 --> 00:00:25,039
before

10
00:00:22,240 --> 00:00:25,439
we start um just wanted to get a feel

11
00:00:25,039 --> 00:00:27,359
like

12
00:00:25,439 --> 00:00:28,480
how many of you think like having a

13
00:00:27,359 --> 00:00:30,960
standard booting is

14
00:00:28,480 --> 00:00:32,079
necessary for any platform especially

15
00:00:30,960 --> 00:00:35,280
for risk five

16
00:00:32,079 --> 00:00:36,640
where it's growing right so yeah

17
00:00:35,280 --> 00:00:38,559
my question is still continuing so you

18
00:00:36,640 --> 00:00:42,079
can raise your hands

19
00:00:38,559 --> 00:00:45,760
yes both

20
00:00:42,079 --> 00:00:47,680
good because we do not want a diff so

21
00:00:45,760 --> 00:00:49,440
especially in booting land we don't

22
00:00:47,680 --> 00:00:52,399
different or being unique

23
00:00:49,440 --> 00:00:54,160
doesn't bring value it brings chaos

24
00:00:52,399 --> 00:00:55,440
being standard being boring actually

25
00:00:54,160 --> 00:00:58,078
brings value because

26
00:00:55,440 --> 00:00:58,640
if a user knows how to build a how to

27
00:00:58,079 --> 00:01:00,800
boot a

28
00:00:58,640 --> 00:01:02,559
x86 alarm system he should be able to or

29
00:01:00,800 --> 00:01:05,360
which she should be able to

30
00:01:02,559 --> 00:01:05,840
build a desktop system that's the whole

31
00:01:05,360 --> 00:01:07,840
uh

32
00:01:05,840 --> 00:01:09,600
agenda of the talk is we want to make it

33
00:01:07,840 --> 00:01:11,119
more standard and standard so we want to

34
00:01:09,600 --> 00:01:13,759
follow more open source

35
00:01:11,119 --> 00:01:14,799
as open source as possible and follow

36
00:01:13,760 --> 00:01:17,200
the protocols

37
00:01:14,799 --> 00:01:17,840
or methods that already open source

38
00:01:17,200 --> 00:01:21,280
systems

39
00:01:17,840 --> 00:01:23,840
already uses so is a brief agenda

40
00:01:21,280 --> 00:01:24,960
of the talk that i'll be going through

41
00:01:23,840 --> 00:01:28,000
and

42
00:01:24,960 --> 00:01:32,399
starting the talk so here is a brief

43
00:01:28,000 --> 00:01:35,040
uh most commonly used embedded boot flow

44
00:01:32,400 --> 00:01:35,680
a multi-stage boot flow where you can

45
00:01:35,040 --> 00:01:38,320
have

46
00:01:35,680 --> 00:01:38,880
a different open source and all of them

47
00:01:38,320 --> 00:01:41,279
are

48
00:01:38,880 --> 00:01:42,880
actually open source and that's how all

49
00:01:41,280 --> 00:01:46,159
of the embedded uh

50
00:01:42,880 --> 00:01:47,679
world actually works so you can have a

51
00:01:46,159 --> 00:01:48,640
different combination of it and you can

52
00:01:47,680 --> 00:01:50,079
definitely run it

53
00:01:48,640 --> 00:01:52,079
but that's what the recommended wood

54
00:01:50,079 --> 00:01:53,039
flow is where actually you can go ahead

55
00:01:52,079 --> 00:01:55,199
and

56
00:01:53,040 --> 00:01:57,040
run your software so to start with first

57
00:01:55,200 --> 00:01:58,640
would be your zero state bootloader

58
00:01:57,040 --> 00:02:00,960
which basically does

59
00:01:58,640 --> 00:02:02,640
load the next one gets executed from the

60
00:02:00,960 --> 00:02:05,199
rom that's what whenever the power on

61
00:02:02,640 --> 00:02:07,840
reset that's what get get started

62
00:02:05,200 --> 00:02:08,720
next is the first is bootloader which

63
00:02:07,840 --> 00:02:11,680
basically

64
00:02:08,720 --> 00:02:13,840
uh runs also as a loader loads has the

65
00:02:11,680 --> 00:02:15,920
cash should have the capability to load

66
00:02:13,840 --> 00:02:18,080
all the next stages something like the

67
00:02:15,920 --> 00:02:20,799
next runtime service provider next

68
00:02:18,080 --> 00:02:21,120
uh the real bootloader or for the matter

69
00:02:20,800 --> 00:02:25,440
uh

70
00:02:21,120 --> 00:02:27,520
linux as well but um

71
00:02:25,440 --> 00:02:28,720
given the what software open source

72
00:02:27,520 --> 00:02:30,879
project we're using

73
00:02:28,720 --> 00:02:32,239
it may be doing actually doing that or

74
00:02:30,879 --> 00:02:35,599
may not be doing that

75
00:02:32,239 --> 00:02:36,879
so currently uh in risk five land there

76
00:02:35,599 --> 00:02:39,760
is fsbl which is a

77
00:02:36,879 --> 00:02:41,440
type specific one there is you boot spl

78
00:02:39,760 --> 00:02:43,920
which is the

79
00:02:41,440 --> 00:02:45,200
uh secondary program load from you boot

80
00:02:43,920 --> 00:02:47,679
and then there is core boot

81
00:02:45,200 --> 00:02:49,599
which does that job then there is a

82
00:02:47,680 --> 00:02:52,640
runtime service provider which would

83
00:02:49,599 --> 00:02:55,679
which is the only uh

84
00:02:52,640 --> 00:02:57,119
software piece run actually resident

85
00:02:55,680 --> 00:02:59,200
after linux boot so

86
00:02:57,120 --> 00:03:00,239
when actually linux boots all of those

87
00:02:59,200 --> 00:03:01,760
other pieces

88
00:03:00,239 --> 00:03:03,200
basically overwritten because we don't

89
00:03:01,760 --> 00:03:04,000
need them but we need the runtime

90
00:03:03,200 --> 00:03:06,399
service pro

91
00:03:04,000 --> 00:03:07,840
because that's what the os actually need

92
00:03:06,400 --> 00:03:10,400
anything that needs to communicate

93
00:03:07,840 --> 00:03:12,239
down stream with the firmware that's

94
00:03:10,400 --> 00:03:12,640
where the runtime service provider comes

95
00:03:12,239 --> 00:03:15,120
in

96
00:03:12,640 --> 00:03:16,079
and open spi currently uh provides that

97
00:03:15,120 --> 00:03:18,000
for risk 5

98
00:03:16,080 --> 00:03:19,200
then there is uboot which acts as a last

99
00:03:18,000 --> 00:03:22,239
test bootloader

100
00:03:19,200 --> 00:03:24,000
so lasted bootloader which mostly you

101
00:03:22,239 --> 00:03:25,920
actually see like where you configure

102
00:03:24,000 --> 00:03:29,040
your menu or uh

103
00:03:25,920 --> 00:03:30,879
actually boot linux and uh the other

104
00:03:29,040 --> 00:03:32,480
bootloader so these are the already

105
00:03:30,879 --> 00:03:34,959
upstream available that's why it's

106
00:03:32,480 --> 00:03:36,959
there there is also grub which would

107
00:03:34,959 --> 00:03:38,400
eventually be fit in here

108
00:03:36,959 --> 00:03:40,000
which would also be act as a last stage

109
00:03:38,400 --> 00:03:43,200
bootloader and then

110
00:03:40,000 --> 00:03:44,879
uh currently core boot doesn't

111
00:03:43,200 --> 00:03:46,798
can boot technically you would but

112
00:03:44,879 --> 00:03:47,679
directly just loads linux and then loads

113
00:03:46,799 --> 00:03:49,599
up on sbi

114
00:03:47,680 --> 00:03:51,440
so and then it asks openness way to jump

115
00:03:49,599 --> 00:03:54,480
to linux you put spl

116
00:03:51,440 --> 00:03:55,120
also board loads open space you boot and

117
00:03:54,480 --> 00:03:58,238
then

118
00:03:55,120 --> 00:03:59,760
you can switch to jump to you boot from

119
00:03:58,239 --> 00:04:02,080
opensba and then

120
00:03:59,760 --> 00:04:03,040
get to linux from you boot using your

121
00:04:02,080 --> 00:04:06,159
mmc or

122
00:04:03,040 --> 00:04:07,920
network anything so this basically

123
00:04:06,159 --> 00:04:09,599
summarizes what all

124
00:04:07,920 --> 00:04:11,280
soft open source software projects we

125
00:04:09,599 --> 00:04:14,720
use for boot loading

126
00:04:11,280 --> 00:04:17,918
boot and for booting and then where

127
00:04:14,720 --> 00:04:18,560
the status is is this slide we'll talk

128
00:04:17,918 --> 00:04:20,320
about

129
00:04:18,560 --> 00:04:22,320
what's the current upstream status so

130
00:04:20,320 --> 00:04:25,120
you boot and

131
00:04:22,320 --> 00:04:26,320
core boot status uh has been pretty

132
00:04:25,120 --> 00:04:28,800
pretty solid

133
00:04:26,320 --> 00:04:29,599
uh the recently the youboot spl patches

134
00:04:28,800 --> 00:04:32,880
started uh

135
00:04:29,600 --> 00:04:33,759
landing in so we already have handy

136
00:04:32,880 --> 00:04:35,919
stick patches

137
00:04:33,759 --> 00:04:37,280
we already have qme patches high five

138
00:04:35,919 --> 00:04:39,440
unless patches are already

139
00:04:37,280 --> 00:04:41,359
in the mailing list should be much soon

140
00:04:39,440 --> 00:04:42,160
code boot is pretty good as well both of

141
00:04:41,360 --> 00:04:44,880
them uses

142
00:04:42,160 --> 00:04:45,440
open sbi format dynamic there is new kid

143
00:04:44,880 --> 00:04:48,560
in the block

144
00:04:45,440 --> 00:04:51,040
orbot ran has a talk after my talk which

145
00:04:48,560 --> 00:04:52,320
would be talking about orbot then there

146
00:04:51,040 --> 00:04:54,800
is open sbi

147
00:04:52,320 --> 00:04:55,599
this is the release version and the

148
00:04:54,800 --> 00:04:57,440
stats

149
00:04:55,600 --> 00:04:59,440
you can go to the open space project and

150
00:04:57,440 --> 00:05:01,520
figure out where is the release version

151
00:04:59,440 --> 00:05:04,240
and all currently we are at 0.5

152
00:05:01,520 --> 00:05:05,680
and there is little kernel which is a

153
00:05:04,240 --> 00:05:07,440
bootloader for android

154
00:05:05,680 --> 00:05:08,840
and i recently noticed that they also

155
00:05:07,440 --> 00:05:11,759
have support for

156
00:05:08,840 --> 00:05:12,638
x5 does that mean there will be android

157
00:05:11,759 --> 00:05:15,039
on risk 5

158
00:05:12,639 --> 00:05:17,440
i don't know i'm not claiming anything

159
00:05:15,039 --> 00:05:20,080
whoever has done you can ask them

160
00:05:17,440 --> 00:05:21,280
maybe one day we are all here for risk 5

161
00:05:20,080 --> 00:05:24,719
world domination so

162
00:05:21,280 --> 00:05:27,919
why not so so these

163
00:05:24,720 --> 00:05:30,320
uh now i explained

164
00:05:27,919 --> 00:05:31,359
which all software pieces are there what

165
00:05:30,320 --> 00:05:34,080
software projects are

166
00:05:31,360 --> 00:05:34,880
used in the boot loading and uh what's

167
00:05:34,080 --> 00:05:38,080
the state

168
00:05:34,880 --> 00:05:40,159
so we're pretty much in good step except

169
00:05:38,080 --> 00:05:42,560
uv and grub which will eventually

170
00:05:40,160 --> 00:05:43,199
have some slides at the end but the

171
00:05:42,560 --> 00:05:46,479
other part

172
00:05:43,199 --> 00:05:49,120
uh that we are trying to modify is

173
00:05:46,479 --> 00:05:49,599
so in a in a modern era system there are

174
00:05:49,120 --> 00:05:52,160
multi

175
00:05:49,600 --> 00:05:53,039
every system is a multiprocessor mostly

176
00:05:52,160 --> 00:05:56,479
so

177
00:05:53,039 --> 00:05:58,719
the other part of is how does each cpu

178
00:05:56,479 --> 00:06:00,240
actually enters into different multi

179
00:05:58,720 --> 00:06:04,319
stages and then actually

180
00:06:00,240 --> 00:06:07,680
lands in boots linux so

181
00:06:04,319 --> 00:06:09,520
currently is used as a random booting

182
00:06:07,680 --> 00:06:10,960
when i say random booting all of those

183
00:06:09,520 --> 00:06:14,080
is hard cpus

184
00:06:10,960 --> 00:06:17,120
or risk 5 as favorably called hearts

185
00:06:14,080 --> 00:06:19,359
so hardware threads so actually

186
00:06:17,120 --> 00:06:21,600
randomly jumps into linux and i'll

187
00:06:19,360 --> 00:06:24,720
explain how does it work

188
00:06:21,600 --> 00:06:25,520
so for the future slides yellow box

189
00:06:24,720 --> 00:06:27,680
linux kernel

190
00:06:25,520 --> 00:06:29,198
green box bootloader there is no

191
00:06:27,680 --> 00:06:30,880
relation with

192
00:06:29,199 --> 00:06:33,759
why the color is being chosen it's

193
00:06:30,880 --> 00:06:36,000
because my color scents are really bad

194
00:06:33,759 --> 00:06:37,360
so there is bootloader linux kernel

195
00:06:36,000 --> 00:06:40,639
assuming there are let's say

196
00:06:37,360 --> 00:06:41,440
four hearts in the system and when it

197
00:06:40,639 --> 00:06:43,680
tries to

198
00:06:41,440 --> 00:06:44,800
boot linux all of them jump to linux

199
00:06:43,680 --> 00:06:47,520
together

200
00:06:44,800 --> 00:06:48,960
so since all of them jump together there

201
00:06:47,520 --> 00:06:52,639
has to be arbitration so

202
00:06:48,960 --> 00:06:55,120
one gets chosen to be this uh

203
00:06:52,639 --> 00:06:55,919
the booting heart all other what do they

204
00:06:55,120 --> 00:06:58,000
do they just

205
00:06:55,919 --> 00:06:59,680
keep on waiting until this heart

206
00:06:58,000 --> 00:07:00,560
actually does all the kernel

207
00:06:59,680 --> 00:07:03,599
installation

208
00:07:00,560 --> 00:07:04,240
and actually then wakes up uh actually

209
00:07:03,599 --> 00:07:06,319
configure

210
00:07:04,240 --> 00:07:07,759
the power cp variable so that these are

211
00:07:06,319 --> 00:07:09,840
can proceed

212
00:07:07,759 --> 00:07:11,759
so once it does the kernel installation

213
00:07:09,840 --> 00:07:12,479
it actually goes and sets the stack

214
00:07:11,759 --> 00:07:16,080
pointer for

215
00:07:12,479 --> 00:07:19,199
each cpu and then they go and proceed

216
00:07:16,080 --> 00:07:20,080
so simple enough it keeps the boot code

217
00:07:19,199 --> 00:07:23,759
simple

218
00:07:20,080 --> 00:07:27,280
and nothing really issues with it

219
00:07:23,759 --> 00:07:30,400
is it do you see any issues with it yes

220
00:07:27,280 --> 00:07:34,159
what's the bootloader issue to

221
00:07:30,400 --> 00:07:37,758
initialize some devices so which

222
00:07:34,160 --> 00:07:38,240
which cpu in the blogger initializes

223
00:07:37,759 --> 00:07:45,840
like

224
00:07:38,240 --> 00:07:45,840
the power management ics yes

225
00:07:47,440 --> 00:07:50,560
yeah so what happens is each bootloader

226
00:07:49,759 --> 00:07:52,960
has to now

227
00:07:50,560 --> 00:07:54,160
uh initialize uh all the devices and

228
00:07:52,960 --> 00:07:56,719
then they have to do it for

229
00:07:54,160 --> 00:07:57,360
smp so imagine with one bootloader it's

230
00:07:56,720 --> 00:07:59,199
okay

231
00:07:57,360 --> 00:08:01,360
but imagine there are like multiple boot

232
00:07:59,199 --> 00:08:03,120
loaders so what happens then

233
00:08:01,360 --> 00:08:05,120
let's say i have like two stage

234
00:08:03,120 --> 00:08:06,720
bootloader now now every stage

235
00:08:05,120 --> 00:08:08,160
the same thing will happen every stage

236
00:08:06,720 --> 00:08:09,919
there will be multi-core

237
00:08:08,160 --> 00:08:12,160
then one there will be a lottery there

238
00:08:09,919 --> 00:08:13,280
will be a one core will be going forward

239
00:08:12,160 --> 00:08:15,120
and then waiting

240
00:08:13,280 --> 00:08:16,878
all other course would be waiting so

241
00:08:15,120 --> 00:08:19,280
what happens is let's say

242
00:08:16,879 --> 00:08:20,240
it doesn't matter uh so the stage number

243
00:08:19,280 --> 00:08:21,758
it doesn't matter

244
00:08:20,240 --> 00:08:23,120
it's not corresponding to what actual

245
00:08:21,759 --> 00:08:24,319
stage is for now it's just an

246
00:08:23,120 --> 00:08:26,960
illustration purpose

247
00:08:24,319 --> 00:08:28,000
so let's say first all of them enters

248
00:08:26,960 --> 00:08:30,080
into stage one

249
00:08:28,000 --> 00:08:31,120
or stage two doesn't matter then one

250
00:08:30,080 --> 00:08:34,240
gets chosen

251
00:08:31,120 --> 00:08:36,560
all of them waits again that heart

252
00:08:34,240 --> 00:08:38,320
sends an ipi to wakes them up after it

253
00:08:36,559 --> 00:08:40,478
does all the installation as you said

254
00:08:38,320 --> 00:08:41,839
all the driver installation then all of

255
00:08:40,479 --> 00:08:44,640
them actually

256
00:08:41,839 --> 00:08:47,040
wakes up from an interrupt then all of

257
00:08:44,640 --> 00:08:48,959
them again jumps to the second stage

258
00:08:47,040 --> 00:08:50,719
again one gets chosen it can be any

259
00:08:48,959 --> 00:08:51,518
heart so it doesn't have to be the first

260
00:08:50,720 --> 00:08:53,279
heart

261
00:08:51,519 --> 00:08:54,640
that gets so every stage it can be a

262
00:08:53,279 --> 00:08:57,680
random hat

263
00:08:54,640 --> 00:08:58,560
then that again sends an ipa other are

264
00:08:57,680 --> 00:09:01,760
waiting

265
00:08:58,560 --> 00:09:03,518
it comes out of the ipi then it all of

266
00:09:01,760 --> 00:09:04,959
them together again jumps to linux and

267
00:09:03,519 --> 00:09:07,040
then you know the process how it

268
00:09:04,959 --> 00:09:08,000
uh processes the linux so that's the

269
00:09:07,040 --> 00:09:11,439
problem as we

270
00:09:08,000 --> 00:09:14,640
have more stages this gets complicated

271
00:09:11,440 --> 00:09:17,279
the other issue is now all the hearts

272
00:09:14,640 --> 00:09:20,000
are in linux actively running and there

273
00:09:17,279 --> 00:09:20,000
is no way to

274
00:09:20,160 --> 00:09:25,120
tell there is no way for linux to

275
00:09:22,640 --> 00:09:27,360
actually return the heart to the

276
00:09:25,120 --> 00:09:28,240
uh the bootloader the runtime service

277
00:09:27,360 --> 00:09:30,560
provider

278
00:09:28,240 --> 00:09:31,760
that complicates your cpu hot plug and k

279
00:09:30,560 --> 00:09:34,479
exact

280
00:09:31,760 --> 00:09:35,680
so for k exec what happens is uh it

281
00:09:34,480 --> 00:09:38,240
stops all the hearts

282
00:09:35,680 --> 00:09:39,920
and then one heart boots another kernel

283
00:09:38,240 --> 00:09:41,360
when it boots another kernel all other

284
00:09:39,920 --> 00:09:42,000
hearts if you are managing it in the

285
00:09:41,360 --> 00:09:44,080
kernel

286
00:09:42,000 --> 00:09:45,600
then you have to yes at the same time

287
00:09:44,080 --> 00:09:46,080
you are keeping that kernel resident

288
00:09:45,600 --> 00:09:47,920
code

289
00:09:46,080 --> 00:09:50,240
and also you are booting another kernel

290
00:09:47,920 --> 00:09:51,680
so you have to manage that code and you

291
00:09:50,240 --> 00:09:53,680
have to we make sure that the other

292
00:09:51,680 --> 00:09:56,719
kernel doesn't override the memory

293
00:09:53,680 --> 00:09:58,959
similarly hot plug you have to manage

294
00:09:56,720 --> 00:10:01,360
the hearts in the interrupt

295
00:09:58,959 --> 00:10:02,239
sorry manage the interrupts in kernel

296
00:10:01,360 --> 00:10:04,000
while uh

297
00:10:02,240 --> 00:10:05,680
stopping the hearts and then while

298
00:10:04,000 --> 00:10:08,160
bringing up we have to bring it up

299
00:10:05,680 --> 00:10:09,760
in kernel which is not exactly stopping

300
00:10:08,160 --> 00:10:10,640
the heart because supervisor has still

301
00:10:09,760 --> 00:10:13,439
access to the

302
00:10:10,640 --> 00:10:14,160
those hearts so other alternate approach

303
00:10:13,440 --> 00:10:17,120
uh

304
00:10:14,160 --> 00:10:18,399
to how does the heart boot actually is

305
00:10:17,120 --> 00:10:21,360
uh ordered booting

306
00:10:18,399 --> 00:10:22,720
so most of the other i says other

307
00:10:21,360 --> 00:10:24,560
architectures have already

308
00:10:22,720 --> 00:10:26,720
implemented this this is the standard we

309
00:10:24,560 --> 00:10:28,000
are booting where one heart goes through

310
00:10:26,720 --> 00:10:30,000
all the way to linux

311
00:10:28,000 --> 00:10:32,560
and then it brings up all the hearts one

312
00:10:30,000 --> 00:10:35,600
by one which simplifies cpu hot plug

313
00:10:32,560 --> 00:10:38,079
and k exec uh pretty much because

314
00:10:35,600 --> 00:10:39,279
now in cpu hot block k exec or normal

315
00:10:38,079 --> 00:10:42,239
booting

316
00:10:39,279 --> 00:10:42,880
all of them uses similar approach all of

317
00:10:42,240 --> 00:10:45,519
them

318
00:10:42,880 --> 00:10:46,800
use the not similar exactly same code

319
00:10:45,519 --> 00:10:50,480
path

320
00:10:46,800 --> 00:10:52,399
the former keeps the one heart a

321
00:10:50,480 --> 00:10:54,160
let one heart go and keeps all other

322
00:10:52,399 --> 00:10:55,040
heart and then whenever you need to

323
00:10:54,160 --> 00:10:56,480
start a stop

324
00:10:55,040 --> 00:10:58,839
all of them return to the former and

325
00:10:56,480 --> 00:11:01,279
then it you can start and stop

326
00:10:58,839 --> 00:11:03,440
using some calls which i'll be

327
00:11:01,279 --> 00:11:06,079
explaining later

328
00:11:03,440 --> 00:11:07,440
now uh so how does the order booting

329
00:11:06,079 --> 00:11:10,479
looks like

330
00:11:07,440 --> 00:11:11,360
same uh let's say this bootloader and

331
00:11:10,480 --> 00:11:14,959
linux kernel

332
00:11:11,360 --> 00:11:17,600
there is two stages now the

333
00:11:14,959 --> 00:11:19,040
the first stage uh will have a lottery

334
00:11:17,600 --> 00:11:20,800
because

335
00:11:19,040 --> 00:11:22,480
otherwise you have to assign saying that

336
00:11:20,800 --> 00:11:24,880
this is my boot heart which is

337
00:11:22,480 --> 00:11:26,480
may not be available that heart number

338
00:11:24,880 --> 00:11:29,680
may not be available in a system so

339
00:11:26,480 --> 00:11:31,040
one lottery is okay then that heart gets

340
00:11:29,680 --> 00:11:33,120
chosen as the boot heart

341
00:11:31,040 --> 00:11:34,399
is and all of them actually goes and

342
00:11:33,120 --> 00:11:37,120
wait there

343
00:11:34,399 --> 00:11:38,240
that hat actually goes and proceed to

344
00:11:37,120 --> 00:11:40,160
all of the stages

345
00:11:38,240 --> 00:11:41,519
so it goes to the next stage that

346
00:11:40,160 --> 00:11:44,480
continues to the linux

347
00:11:41,519 --> 00:11:45,360
linux actually does all the installation

348
00:11:44,480 --> 00:11:47,680
then

349
00:11:45,360 --> 00:11:49,279
it now it's ready to bring all the

350
00:11:47,680 --> 00:11:51,199
hearts so it makes a call

351
00:11:49,279 --> 00:11:52,720
to the firmware or to the runtime

352
00:11:51,200 --> 00:11:55,600
service provider

353
00:11:52,720 --> 00:11:57,440
then it receives that call that's when

354
00:11:55,600 --> 00:12:00,480
it sends the ipis

355
00:11:57,440 --> 00:12:03,279
to the hearts actually waiting there

356
00:12:00,480 --> 00:12:03,760
and then all of them heart wakes up and

357
00:12:03,279 --> 00:12:06,240
now

358
00:12:03,760 --> 00:12:07,920
all these stage middle stages which are

359
00:12:06,240 --> 00:12:09,360
not anymore resident in the code so we

360
00:12:07,920 --> 00:12:11,519
do not have to

361
00:12:09,360 --> 00:12:12,959
modify anything related to smp in those

362
00:12:11,519 --> 00:12:15,200
stages

363
00:12:12,959 --> 00:12:17,279
and then all the other hearts know where

364
00:12:15,200 --> 00:12:18,160
to jump to linux it directly jumps and

365
00:12:17,279 --> 00:12:21,200
then starts

366
00:12:18,160 --> 00:12:24,800
running linux so

367
00:12:21,200 --> 00:12:26,560
that's the advantage of ordered booting

368
00:12:24,800 --> 00:12:28,880
and that's how the order booting will

369
00:12:26,560 --> 00:12:28,880
work

370
00:12:29,200 --> 00:12:35,440
now uh another advantage is

371
00:12:33,040 --> 00:12:36,719
let's say you want to add one more stage

372
00:12:35,440 --> 00:12:38,079
the other state doesn't have to do

373
00:12:36,720 --> 00:12:40,240
anything the other stage

374
00:12:38,079 --> 00:12:41,439
you that hat only jumps to instead of

375
00:12:40,240 --> 00:12:44,480
jumping to linux

376
00:12:41,440 --> 00:12:45,040
it just jumps to the next stage it does

377
00:12:44,480 --> 00:12:47,360
whatever

378
00:12:45,040 --> 00:12:48,160
that stays need to do and then it jumps

379
00:12:47,360 --> 00:12:53,839
to linux

380
00:12:48,160 --> 00:12:53,839
and then the entire process remains same

381
00:13:03,839 --> 00:13:09,360
so the question was how do the other

382
00:13:05,839 --> 00:13:09,360
stages do the lottery right

383
00:13:10,320 --> 00:13:14,240
oh because they are not now receiving uh

384
00:13:12,480 --> 00:13:15,120
they're not getting all the hearts all

385
00:13:14,240 --> 00:13:16,959
the hearts are not

386
00:13:15,120 --> 00:13:18,839
available there so it's only one heart

387
00:13:16,959 --> 00:13:21,439
going forward so they do not have to do

388
00:13:18,839 --> 00:13:24,720
lottery

389
00:13:21,440 --> 00:13:28,480
okay so how do we do

390
00:13:24,720 --> 00:13:30,240
the bring up bringing up and

391
00:13:28,480 --> 00:13:31,600
close stopping the hearts from the

392
00:13:30,240 --> 00:13:34,560
firmware with the

393
00:13:31,600 --> 00:13:35,440
new set of sbi calls the i'll not go

394
00:13:34,560 --> 00:13:37,518
through the details

395
00:13:35,440 --> 00:13:38,480
it's available in the spec uh it's

396
00:13:37,519 --> 00:13:40,880
already merged

397
00:13:38,480 --> 00:13:41,680
so and the patches are also available in

398
00:13:40,880 --> 00:13:44,000
the open

399
00:13:41,680 --> 00:13:45,519
open sb and linux kernel patches are

400
00:13:44,000 --> 00:13:48,160
already in the mailing list

401
00:13:45,519 --> 00:13:49,040
so you can take a look and uh give

402
00:13:48,160 --> 00:13:53,839
feedback

403
00:13:49,040 --> 00:13:53,839
i just recently posted so with that

404
00:13:54,639 --> 00:13:58,480
uh ordered booting feature the biggest

405
00:13:57,680 --> 00:14:00,638
issue

406
00:13:58,480 --> 00:14:02,079
we had not biggest but the one of the

407
00:14:00,639 --> 00:14:03,440
issue we had is how do we maintain

408
00:14:02,079 --> 00:14:05,199
backward compatibility

409
00:14:03,440 --> 00:14:07,440
because now you have older software

410
00:14:05,199 --> 00:14:09,279
running doing random booting

411
00:14:07,440 --> 00:14:11,120
with all the boot loaders actually

412
00:14:09,279 --> 00:14:12,959
trying to do the lottery thing

413
00:14:11,120 --> 00:14:15,040
and then with the newer software is not

414
00:14:12,959 --> 00:14:18,000
anymore do not want them to do it

415
00:14:15,040 --> 00:14:18,560
so this is the backward compatibility

416
00:14:18,000 --> 00:14:20,480
table

417
00:14:18,560 --> 00:14:22,160
if you are using open sbi or linux

418
00:14:20,480 --> 00:14:23,920
kernel master you are good you will

419
00:14:22,160 --> 00:14:26,160
obviously get the order booting

420
00:14:23,920 --> 00:14:27,920
if you are using any of the older

421
00:14:26,160 --> 00:14:30,240
version of open sbi

422
00:14:27,920 --> 00:14:31,199
then with or without hsn patches it will

423
00:14:30,240 --> 00:14:34,639
detect that

424
00:14:31,199 --> 00:14:37,519
it does not have the hsm

425
00:14:34,639 --> 00:14:38,079
extension so it will just go back to the

426
00:14:37,519 --> 00:14:39,920
default

427
00:14:38,079 --> 00:14:42,000
random booting same thing if you are

428
00:14:39,920 --> 00:14:44,319
using bbl or any other older

429
00:14:42,000 --> 00:14:45,680
very old open spa which is older than

430
00:14:44,320 --> 00:14:47,279
0.5

431
00:14:45,680 --> 00:14:49,439
it will also fall back to the random

432
00:14:47,279 --> 00:14:51,360
booting but if you are using

433
00:14:49,440 --> 00:14:52,959
master branch of open spi which will

434
00:14:51,360 --> 00:14:56,399
have openness

435
00:14:52,959 --> 00:14:57,199
the hsm patches and you are using linux

436
00:14:56,399 --> 00:14:59,839
kernel without

437
00:14:57,199 --> 00:15:00,880
hsn patches then you will only get one

438
00:14:59,839 --> 00:15:03,839
code because

439
00:15:00,880 --> 00:15:05,279
now the linux kernel thinks that of hsm

440
00:15:03,839 --> 00:15:07,839
extension is supported

441
00:15:05,279 --> 00:15:08,880
but it's actually not implemented linux

442
00:15:07,839 --> 00:15:10,399
kernel basically

443
00:15:08,880 --> 00:15:12,320
is not making those calls so you will

444
00:15:10,399 --> 00:15:14,320
not get smp booting so if you want to

445
00:15:12,320 --> 00:15:16,399
use openspa master

446
00:15:14,320 --> 00:15:18,079
you have to use the linux kernel patches

447
00:15:16,399 --> 00:15:18,880
and it's not current master so there

448
00:15:18,079 --> 00:15:21,040
will be

449
00:15:18,880 --> 00:15:22,079
we are waiting for the spec sba spec to

450
00:15:21,040 --> 00:15:24,639
be merged

451
00:15:22,079 --> 00:15:25,760
uh the replacement extension and 0.2

452
00:15:24,639 --> 00:15:29,440
once that's done

453
00:15:25,760 --> 00:15:30,240
release 0.6 so 0.6 will be without hsn

454
00:15:29,440 --> 00:15:32,880
patches

455
00:15:30,240 --> 00:15:33,440
and anything beyond 0.6 will have hsn

456
00:15:32,880 --> 00:15:35,519
patches

457
00:15:33,440 --> 00:15:36,720
so you should go and pick up the master

458
00:15:35,519 --> 00:15:40,160
of both kernel

459
00:15:36,720 --> 00:15:43,920
and open sbi to have

460
00:15:40,160 --> 00:15:47,360
uh order booting and then cpu hot block

461
00:15:43,920 --> 00:15:47,360
exec which will follow

462
00:15:47,519 --> 00:15:51,600
now the last piece as i uh promised in

463
00:15:50,480 --> 00:15:55,040
the beginning

464
00:15:51,600 --> 00:15:59,120
is uh ufe uh so

465
00:15:55,040 --> 00:16:02,639
thanks to alex uh abner uh the edk2

466
00:15:59,120 --> 00:16:03,360
uh if we already it's almost uh getting

467
00:16:02,639 --> 00:16:05,759
merged

468
00:16:03,360 --> 00:16:06,720
uh there's a talk by leaf uh today

469
00:16:05,759 --> 00:16:09,360
afternoon

470
00:16:06,720 --> 00:16:11,040
that we'll discuss more details on this

471
00:16:09,360 --> 00:16:11,920
uh you would grab support has already

472
00:16:11,040 --> 00:16:14,079
been there

473
00:16:11,920 --> 00:16:15,920
like for a long time the only missing

474
00:16:14,079 --> 00:16:18,800
piece was efi stub

475
00:16:15,920 --> 00:16:20,000
which uh i got it working like a couple

476
00:16:18,800 --> 00:16:23,519
of weeks ago so

477
00:16:20,000 --> 00:16:25,759
it basically puts a efi linux header on

478
00:16:23,519 --> 00:16:26,240
a peak of header on top of linux image

479
00:16:25,759 --> 00:16:29,440
header

480
00:16:26,240 --> 00:16:31,839
so it fakes linux image as a efi

481
00:16:29,440 --> 00:16:34,720
executable to the

482
00:16:31,839 --> 00:16:35,360
uh whatever the your loader so edk2 or

483
00:16:34,720 --> 00:16:37,759
u-boot

484
00:16:35,360 --> 00:16:38,480
so that's how it basically treats it as

485
00:16:37,759 --> 00:16:41,519
a

486
00:16:38,480 --> 00:16:43,040
you can boot linux using uh entire uv

487
00:16:41,519 --> 00:16:45,279
protocol

488
00:16:43,040 --> 00:16:46,800
now with all these features the one

489
00:16:45,279 --> 00:16:48,399
thing we also want to be

490
00:16:46,800 --> 00:16:50,000
like as i said standardization is

491
00:16:48,399 --> 00:16:53,279
important so we also want to

492
00:16:50,000 --> 00:16:55,360
get into the ebb r compliance so as per

493
00:16:53,279 --> 00:16:56,320
uh my understanding ebb r is a

494
00:16:55,360 --> 00:16:58,320
specification that

495
00:16:56,320 --> 00:17:00,079
allows interoperability between

496
00:16:58,320 --> 00:17:02,000
different hardware platforms so once

497
00:17:00,079 --> 00:17:04,079
your hardware platform conforms to

498
00:17:02,000 --> 00:17:05,919
ebbr you know that for sure you have

499
00:17:04,079 --> 00:17:06,559
these many features and this is how you

500
00:17:05,919 --> 00:17:08,319
boot

501
00:17:06,559 --> 00:17:10,160
so as for the technical requirements we

502
00:17:08,319 --> 00:17:11,280
are almost there have to implement

503
00:17:10,160 --> 00:17:13,600
we have to implement the runtime

504
00:17:11,280 --> 00:17:15,280
services few of them and then or

505
00:17:13,599 --> 00:17:17,119
just say that we are not supporting

506
00:17:15,280 --> 00:17:17,599
runtime services but that feature has to

507
00:17:17,119 --> 00:17:19,760
be there

508
00:17:17,599 --> 00:17:21,438
other than that startup protocol and the

509
00:17:19,760 --> 00:17:24,319
startup protocol is basically

510
00:17:21,439 --> 00:17:25,039
all the hearts booting the flow i

511
00:17:24,319 --> 00:17:26,559
explained

512
00:17:25,039 --> 00:17:29,039
and then the former storage which

513
00:17:26,559 --> 00:17:31,280
requires you to be on gpt partition

514
00:17:29,039 --> 00:17:32,879
and we already have gpu you are already

515
00:17:31,280 --> 00:17:34,720
using jupiter patterson

516
00:17:32,880 --> 00:17:37,039
the part i'm not sure and i'm hoping

517
00:17:34,720 --> 00:17:38,000
i'll talk to some folks and get it

518
00:17:37,039 --> 00:17:41,200
clarity

519
00:17:38,000 --> 00:17:44,000
is not technically political

520
00:17:41,200 --> 00:17:44,559
maybe logistics uh because it's hosted

521
00:17:44,000 --> 00:17:47,120
in

522
00:17:44,559 --> 00:17:48,879
um software and the copyright has

523
00:17:47,120 --> 00:17:49,600
unlimited contributors so i'm not sure

524
00:17:48,880 --> 00:17:53,120
whether we

525
00:17:49,600 --> 00:17:55,120
can get into that so i have to

526
00:17:53,120 --> 00:17:57,360
open to discussion how do we get that

527
00:17:55,120 --> 00:17:57,360
work

528
00:17:58,240 --> 00:18:03,039
yes i'm done so there's a so for the

529
00:18:01,600 --> 00:18:05,039
future work we need to upstream the

530
00:18:03,039 --> 00:18:07,600
patches we need to upstream the spec

531
00:18:05,039 --> 00:18:09,840
and then once all those are done

532
00:18:07,600 --> 00:18:12,320
hopefully we can make the vbr compliant

533
00:18:09,840 --> 00:18:13,360
and then do a kxac and cade up

534
00:18:12,320 --> 00:18:15,918
implementation

535
00:18:13,360 --> 00:18:16,559
which would be nice to have all those

536
00:18:15,919 --> 00:18:19,440
features

537
00:18:16,559 --> 00:18:20,639
and help you debugging so i guess i'm

538
00:18:19,440 --> 00:18:23,520
done

539
00:18:20,640 --> 00:18:24,880
yes okay i had a demo but i guess i'm

540
00:18:23,520 --> 00:18:26,160
running out of time so if you want to

541
00:18:24,880 --> 00:18:27,919
see the uv boot

542
00:18:26,160 --> 00:18:29,679
i've been running so you can talk to me

543
00:18:27,919 --> 00:18:42,720
after the talk and you can

544
00:18:29,679 --> 00:18:44,799
i can show you thanks

545
00:18:42,720 --> 00:18:44,799
you

