1
00:00:06,799 --> 00:00:10,559
cool

2
00:00:08,000 --> 00:00:12,320
um thank you very much for coming we're

3
00:00:10,559 --> 00:00:14,079
a little bit behind schedule so

4
00:00:12,320 --> 00:00:15,440
i'd like to get started as soon as

5
00:00:14,080 --> 00:00:17,760
possible

6
00:00:15,440 --> 00:00:19,119
our next speaker jeff i have known jeff

7
00:00:17,760 --> 00:00:22,480
for a very long time

8
00:00:19,119 --> 00:00:25,519
and the first day we met we

9
00:00:22,480 --> 00:00:26,640
had a walk in alaska jeff was on

10
00:00:25,519 --> 00:00:30,320
flip-flops

11
00:00:26,640 --> 00:00:33,760
and i'm very happy that he's uh here now

12
00:00:30,320 --> 00:00:36,399
um so uh um please uh go ahead

13
00:00:33,760 --> 00:00:37,360
thank you walter um it's the audio good

14
00:00:36,399 --> 00:00:40,800
it can

15
00:00:37,360 --> 00:00:42,800
i think so so um i'd like to go back

16
00:00:40,800 --> 00:00:44,239
about two years ago not as far back as

17
00:00:42,800 --> 00:00:46,640
i've known walter but

18
00:00:44,239 --> 00:00:47,760
uh at the point at travel audience where

19
00:00:46,640 --> 00:00:50,480
i work now

20
00:00:47,760 --> 00:00:51,519
we were in a process where many of you

21
00:00:50,480 --> 00:00:53,839
have probably been

22
00:00:51,520 --> 00:00:54,960
or will be at some point soon we were

23
00:00:53,840 --> 00:00:58,079
migrating into

24
00:00:54,960 --> 00:00:59,600
kubernates and so we of course

25
00:00:58,079 --> 00:01:01,280
started with the process of putting

26
00:00:59,600 --> 00:01:03,920
everything in docker

27
00:01:01,280 --> 00:01:04,960
containers and then for the kubernetes

28
00:01:03,920 --> 00:01:07,680
infrastructure

29
00:01:04,959 --> 00:01:10,080
we were managing it with uh helm so all

30
00:01:07,680 --> 00:01:13,200
the yaml configuration of an application

31
00:01:10,080 --> 00:01:15,439
was put into a helm chart so at the time

32
00:01:13,200 --> 00:01:18,080
we had maybe about 10 services

33
00:01:15,439 --> 00:01:19,360
that we started with and we created an

34
00:01:18,080 --> 00:01:21,439
umbrella helm chart

35
00:01:19,360 --> 00:01:22,640
to manage all those help the the 10

36
00:01:21,439 --> 00:01:24,158
services we had

37
00:01:22,640 --> 00:01:26,320
so this umbrella chart had the

38
00:01:24,159 --> 00:01:27,040
configuration to deploy each of those 10

39
00:01:26,320 --> 00:01:30,320
things

40
00:01:27,040 --> 00:01:32,799
into our production environment and so

41
00:01:30,320 --> 00:01:34,158
the the benefits here is that we could

42
00:01:32,799 --> 00:01:36,320
take this

43
00:01:34,159 --> 00:01:38,400
umbrella chart deploy it into production

44
00:01:36,320 --> 00:01:41,360
deploy it into a staging environment

45
00:01:38,400 --> 00:01:42,799
or if the developer wanted to work on

46
00:01:41,360 --> 00:01:44,479
something they could deploy the same

47
00:01:42,799 --> 00:01:46,159
thing that we had which is some small

48
00:01:44,479 --> 00:01:49,280
configuration changes

49
00:01:46,159 --> 00:01:51,920
and everything was deployed nicely

50
00:01:49,280 --> 00:01:54,240
however this didn't work so well the the

51
00:01:51,920 --> 00:01:57,040
umbrella chart is broken uh

52
00:01:54,240 --> 00:01:59,199
it doesn't scale as we add more services

53
00:01:57,040 --> 00:02:03,360
to it it becomes a big entity

54
00:01:59,200 --> 00:02:05,920
that helm itself has trouble managing

55
00:02:03,360 --> 00:02:07,439
and the other problems were that the

56
00:02:05,920 --> 00:02:10,160
individual release cycle

57
00:02:07,439 --> 00:02:11,440
of an application being able to just say

58
00:02:10,160 --> 00:02:12,879
hey i want to roll this out

59
00:02:11,440 --> 00:02:15,599
then depending on rolling out this

60
00:02:12,879 --> 00:02:17,519
bigger umbrella chart and so we had some

61
00:02:15,599 --> 00:02:20,160
reasons for taking away the umbrella

62
00:02:17,520 --> 00:02:21,760
chart and then having a nice ci cd

63
00:02:20,160 --> 00:02:23,280
process that took an application

64
00:02:21,760 --> 00:02:24,879
directly into production

65
00:02:23,280 --> 00:02:26,560
and that was fantastic for production

66
00:02:24,879 --> 00:02:29,359
environments but we lost

67
00:02:26,560 --> 00:02:30,640
the reproducibility of our umbrella

68
00:02:29,360 --> 00:02:34,239
chart we couldn't just take

69
00:02:30,640 --> 00:02:36,238
all those 10 now 20 30 services

70
00:02:34,239 --> 00:02:37,599
and create a dev environment with them

71
00:02:36,239 --> 00:02:40,000
because we needed to know which

72
00:02:37,599 --> 00:02:41,359
of those 10 30 am i missing something is

73
00:02:40,000 --> 00:02:43,599
there something new that's come

74
00:02:41,360 --> 00:02:45,120
that's critical for my environment and

75
00:02:43,599 --> 00:02:48,560
how do i set it up in my

76
00:02:45,120 --> 00:02:50,160
dev environment so i began looking out

77
00:02:48,560 --> 00:02:52,000
in the community trying to find

78
00:02:50,160 --> 00:02:53,200
some tooling that provided such a

79
00:02:52,000 --> 00:02:56,000
solution

80
00:02:53,200 --> 00:02:57,599
and i found some blog posts of other

81
00:02:56,000 --> 00:02:59,920
companies who had the same problem

82
00:02:57,599 --> 00:03:00,799
they described exactly what i wanted

83
00:02:59,920 --> 00:03:02,480
they

84
00:03:00,800 --> 00:03:04,480
wrote a tool for it gave the tool a

85
00:03:02,480 --> 00:03:05,760
really fun name and failed to open

86
00:03:04,480 --> 00:03:08,399
source it there was actually

87
00:03:05,760 --> 00:03:10,000
nothing available for me to work with to

88
00:03:08,400 --> 00:03:11,280
be able to do this but everybody else

89
00:03:10,000 --> 00:03:14,000
had this problem

90
00:03:11,280 --> 00:03:15,120
so of course we're sitting there with

91
00:03:14,000 --> 00:03:17,519
these empty shelves

92
00:03:15,120 --> 00:03:18,480
wondering what to do and at travel

93
00:03:17,519 --> 00:03:20,879
audience

94
00:03:18,480 --> 00:03:22,799
thankfully the management agreed hey we

95
00:03:20,879 --> 00:03:26,000
do need something to provide

96
00:03:22,800 --> 00:03:28,000
this functionality to our developers and

97
00:03:26,000 --> 00:03:29,599
they also agreed with the concept of

98
00:03:28,000 --> 00:03:30,000
let's put it back out in the community

99
00:03:29,599 --> 00:03:33,518
let's

100
00:03:30,000 --> 00:03:36,720
share this with everyone else and so

101
00:03:33,519 --> 00:03:37,920
before i get into how to create your dev

102
00:03:36,720 --> 00:03:41,040
environment

103
00:03:37,920 --> 00:03:43,359
the question is where so at travel

104
00:03:41,040 --> 00:03:46,400
audience we run everything in the cloud

105
00:03:43,360 --> 00:03:47,840
we use google cloud and so we have a

106
00:03:46,400 --> 00:03:50,400
dedicated project

107
00:03:47,840 --> 00:03:51,599
in google cloud where developers now

108
00:03:50,400 --> 00:03:53,439
have greater access

109
00:03:51,599 --> 00:03:55,359
they can deploy things and do what they

110
00:03:53,439 --> 00:03:56,319
want that they wouldn't be able to

111
00:03:55,360 --> 00:03:59,120
access and do

112
00:03:56,319 --> 00:04:00,798
in our production environment so for us

113
00:03:59,120 --> 00:04:02,879
we're able to have

114
00:04:00,799 --> 00:04:04,400
one cluster with many namespaces for

115
00:04:02,879 --> 00:04:07,359
each developer

116
00:04:04,400 --> 00:04:08,799
this might not be a solution based on

117
00:04:07,360 --> 00:04:11,439
costs whatever

118
00:04:08,799 --> 00:04:13,200
and so your next best option is to run

119
00:04:11,439 --> 00:04:16,159
these dev environments locally

120
00:04:13,200 --> 00:04:17,918
now two years ago uh running a

121
00:04:16,160 --> 00:04:19,199
kubernetes locally probably meant

122
00:04:17,918 --> 00:04:21,680
kubernetes the hard way

123
00:04:19,199 --> 00:04:23,680
you had to learn what kubernetes is how

124
00:04:21,680 --> 00:04:25,919
to manage all the moving pieces

125
00:04:23,680 --> 00:04:27,120
of kubernetes itself just so you could

126
00:04:25,919 --> 00:04:30,000
run your application

127
00:04:27,120 --> 00:04:31,199
like that was not sustainable minicube

128
00:04:30,000 --> 00:04:32,960
was around then

129
00:04:31,199 --> 00:04:35,600
but it's come a long way to make it more

130
00:04:32,960 --> 00:04:37,440
usable it's much faster it provides

131
00:04:35,600 --> 00:04:38,639
docker image support now i believe it's

132
00:04:37,440 --> 00:04:41,759
been released

133
00:04:38,639 --> 00:04:42,000
and this is usually my tool when i'm

134
00:04:41,759 --> 00:04:44,000
doing

135
00:04:42,000 --> 00:04:45,280
something locally however there's some

136
00:04:44,000 --> 00:04:47,680
other great tools out there

137
00:04:45,280 --> 00:04:48,799
um if you're on mac or windows then

138
00:04:47,680 --> 00:04:51,280
docker for desktop

139
00:04:48,800 --> 00:04:54,000
is an alternative to mini cube for

140
00:04:51,280 --> 00:04:56,559
running kubernetes on your machine

141
00:04:54,000 --> 00:04:57,680
micro k8s is a tool that's really good

142
00:04:56,560 --> 00:05:00,880
if you're running linux

143
00:04:57,680 --> 00:05:02,720
but also supports windows and mac os

144
00:05:00,880 --> 00:05:04,639
and basically these are the equivalent

145
00:05:02,720 --> 00:05:05,199
alternatives of mini cube where you just

146
00:05:04,639 --> 00:05:07,360
have

147
00:05:05,199 --> 00:05:08,560
the full kubernetes infrastructure

148
00:05:07,360 --> 00:05:10,320
running on your machine

149
00:05:08,560 --> 00:05:12,400
and you're able to play around and do

150
00:05:10,320 --> 00:05:13,840
things as you need

151
00:05:12,400 --> 00:05:16,320
there's some interesting tooling out

152
00:05:13,840 --> 00:05:18,560
there for

153
00:05:16,320 --> 00:05:19,919
running kubernetes in docker so

154
00:05:18,560 --> 00:05:20,960
basically you have docker running on

155
00:05:19,919 --> 00:05:23,758
your machine

156
00:05:20,960 --> 00:05:24,400
then you put a container of kubernetes

157
00:05:23,759 --> 00:05:26,160
running

158
00:05:24,400 --> 00:05:28,638
which in theory you could have another

159
00:05:26,160 --> 00:05:31,360
docker image of kubernetes and then

160
00:05:28,639 --> 00:05:32,880
another docker running kubernete and

161
00:05:31,360 --> 00:05:34,560
you're in this inception model you have

162
00:05:32,880 --> 00:05:36,840
to spin the top to find out if you're on

163
00:05:34,560 --> 00:05:39,440
a real machine or not

164
00:05:36,840 --> 00:05:41,919
um but

165
00:05:39,440 --> 00:05:43,360
these ones i i haven't used them on my

166
00:05:41,919 --> 00:05:45,758
local machine for running

167
00:05:43,360 --> 00:05:47,680
kubernetes uh i know they ca that can be

168
00:05:45,759 --> 00:05:49,039
done what's really cool about these is

169
00:05:47,680 --> 00:05:52,080
they run great in ci

170
00:05:49,039 --> 00:05:54,479
so if you have to spin up uh kubernetes

171
00:05:52,080 --> 00:05:56,318
to run a test on some application you're

172
00:05:54,479 --> 00:05:59,599
doing these are a great

173
00:05:56,319 --> 00:06:01,440
solution for pretty much any ci tool out

174
00:05:59,600 --> 00:06:02,720
there will allow you to run docker which

175
00:06:01,440 --> 00:06:06,000
therefore will allow you to have

176
00:06:02,720 --> 00:06:09,440
kubernetes to do your testing

177
00:06:06,000 --> 00:06:10,400
so now we have our place to run our dev

178
00:06:09,440 --> 00:06:12,880
environments

179
00:06:10,400 --> 00:06:13,919
and i want to get into some of the tools

180
00:06:12,880 --> 00:06:16,719
that are available

181
00:06:13,919 --> 00:06:18,479
um i'm of course definitely biased

182
00:06:16,720 --> 00:06:20,800
having been the main developer of

183
00:06:18,479 --> 00:06:22,000
armador there's some other tools i'm

184
00:06:20,800 --> 00:06:23,680
going to get into so

185
00:06:22,000 --> 00:06:25,440
now this part of the talk will be much

186
00:06:23,680 --> 00:06:29,520
more tool-focused

187
00:06:25,440 --> 00:06:32,319
and how these things will work for you

188
00:06:29,520 --> 00:06:33,680
armador itself is based on the concept

189
00:06:32,319 --> 00:06:35,600
of docker compose

190
00:06:33,680 --> 00:06:36,720
but it works for kubernetes and so

191
00:06:35,600 --> 00:06:39,680
docker compose

192
00:06:36,720 --> 00:06:41,759
comes with this example app which is

193
00:06:39,680 --> 00:06:43,120
very over architected for what it does

194
00:06:41,759 --> 00:06:44,800
but it creates something better than

195
00:06:43,120 --> 00:06:47,759
just a hello world so

196
00:06:44,800 --> 00:06:49,440
we have this voting app that as a front

197
00:06:47,759 --> 00:06:52,560
end users can go in

198
00:06:49,440 --> 00:06:53,599
and vote for something that saves to a

199
00:06:52,560 --> 00:06:55,120
redis database

200
00:06:53,599 --> 00:06:56,719
you have a worker process running in the

201
00:06:55,120 --> 00:06:57,840
background that's converts it into

202
00:06:56,720 --> 00:06:59,280
postgres data

203
00:06:57,840 --> 00:07:01,039
and then another front end where you can

204
00:06:59,280 --> 00:07:04,960
see the results of the votes

205
00:07:01,039 --> 00:07:06,400
so very over architected but it provides

206
00:07:04,960 --> 00:07:08,560
what we would have if this

207
00:07:06,400 --> 00:07:13,758
docker-composed configuration

208
00:07:08,560 --> 00:07:13,759
on the right-hand side or left and um

209
00:07:13,919 --> 00:07:17,919
if you extract this out a bit more you

210
00:07:16,080 --> 00:07:18,479
would imagine in your company the voting

211
00:07:17,919 --> 00:07:20,080
app

212
00:07:18,479 --> 00:07:21,520
isn't just you know one developer

213
00:07:20,080 --> 00:07:22,240
working on this but a whole team of

214
00:07:21,520 --> 00:07:24,000
people

215
00:07:22,240 --> 00:07:26,160
and this whole team of people doesn't

216
00:07:24,000 --> 00:07:27,919
need to know that there's a postgres

217
00:07:26,160 --> 00:07:29,360
database that the worker converts you

218
00:07:27,919 --> 00:07:30,400
know what they say in a redis to

219
00:07:29,360 --> 00:07:34,240
postgres and

220
00:07:30,400 --> 00:07:35,039
that the port for the result app is 5858

221
00:07:34,240 --> 00:07:37,199
like

222
00:07:35,039 --> 00:07:39,120
why do i as a voting app developer need

223
00:07:37,199 --> 00:07:41,199
to know all this in order to run my

224
00:07:39,120 --> 00:07:44,639
application to see if it's working

225
00:07:41,199 --> 00:07:47,360
so what armador does is

226
00:07:44,639 --> 00:07:50,000
it's based on helm and so each of these

227
00:07:47,360 --> 00:07:53,520
applications is a helm chart of its own

228
00:07:50,000 --> 00:07:54,560
and the voting app is included with an

229
00:07:53,520 --> 00:07:56,799
armador file

230
00:07:54,560 --> 00:07:58,160
that indicates the dependencies it needs

231
00:07:56,800 --> 00:08:00,080
so as a voting app developer

232
00:07:58,160 --> 00:08:01,280
i need a redis because i know i save my

233
00:08:00,080 --> 00:08:03,120
data to redis

234
00:08:01,280 --> 00:08:04,960
and i need a result app so i can see

235
00:08:03,120 --> 00:08:07,840
what's happening in the end

236
00:08:04,960 --> 00:08:08,719
and when armador starts running it'll

237
00:08:07,840 --> 00:08:10,560
spin up

238
00:08:08,720 --> 00:08:13,120
or it'll find these dependency charts in

239
00:08:10,560 --> 00:08:15,120
your voting app look for

240
00:08:13,120 --> 00:08:17,039
those dependencies find the results app

241
00:08:15,120 --> 00:08:17,919
that you know another team has worked on

242
00:08:17,039 --> 00:08:19,440
and created

243
00:08:17,919 --> 00:08:21,039
and they said hey when you run the

244
00:08:19,440 --> 00:08:22,400
result app you need a postgres and a

245
00:08:21,039 --> 00:08:24,560
worker that converts it

246
00:08:22,400 --> 00:08:26,318
and so everything you get need gets

247
00:08:24,560 --> 00:08:28,879
compiled into

248
00:08:26,319 --> 00:08:29,919
built out into a graph and deployed into

249
00:08:28,879 --> 00:08:33,919
your environment

250
00:08:29,919 --> 00:08:35,919
so armador takes your helm configuration

251
00:08:33,919 --> 00:08:37,519
of your voting app and then fills out

252
00:08:35,919 --> 00:08:37,919
all the rest of the configuration of the

253
00:08:37,519 --> 00:08:40,560
apps

254
00:08:37,919 --> 00:08:42,000
you have and it leaves out all the other

255
00:08:40,559 --> 00:08:44,239
stuff so if you have 30 other

256
00:08:42,000 --> 00:08:45,440
services running in your production

257
00:08:44,240 --> 00:08:47,120
environment that do

258
00:08:45,440 --> 00:08:48,640
additional things of how likely will

259
00:08:47,120 --> 00:08:50,160
somebody vote for this and

260
00:08:48,640 --> 00:08:51,760
all this yeah that's not what you need

261
00:08:50,160 --> 00:08:55,760
to test the voting app itself

262
00:08:51,760 --> 00:08:57,439
you just need this components so

263
00:08:55,760 --> 00:09:00,000
armador isn't the only tool that does

264
00:08:57,440 --> 00:09:03,600
this and it was actually interesting

265
00:09:00,000 --> 00:09:05,839
as i started the development of armadar

266
00:09:03,600 --> 00:09:07,360
i found that one of the tools that

267
00:09:05,839 --> 00:09:09,680
somebody had blogged about and

268
00:09:07,360 --> 00:09:10,560
described exactly what i want came out

269
00:09:09,680 --> 00:09:12,479
as

270
00:09:10,560 --> 00:09:14,239
and was released in open source it's

271
00:09:12,480 --> 00:09:17,040
like ah i already started

272
00:09:14,240 --> 00:09:18,640
what do i do here but the functionality

273
00:09:17,040 --> 00:09:20,160
for essa is

274
00:09:18,640 --> 00:09:22,160
generally the same it builds out the

275
00:09:20,160 --> 00:09:23,839
dependency graph of what you need

276
00:09:22,160 --> 00:09:25,760
so it doesn't include all this extra

277
00:09:23,839 --> 00:09:28,640
stuff and that was one of my key

278
00:09:25,760 --> 00:09:29,839
you know reasons for building something

279
00:09:28,640 --> 00:09:33,600
and then

280
00:09:29,839 --> 00:09:37,519
it functions on git

281
00:09:33,600 --> 00:09:40,480
web hooks so as you create a new pr

282
00:09:37,519 --> 00:09:41,200
aso will trigger a call to the essel

283
00:09:40,480 --> 00:09:42,880
server

284
00:09:41,200 --> 00:09:44,800
which will then spin up an environment

285
00:09:42,880 --> 00:09:46,480
based on what's in that pr

286
00:09:44,800 --> 00:09:48,079
and then as you update the pr the

287
00:09:46,480 --> 00:09:50,320
environment gets updated

288
00:09:48,080 --> 00:09:52,240
and then when you merge the pr and close

289
00:09:50,320 --> 00:09:56,160
it the environment gets cl

290
00:09:52,240 --> 00:09:58,880
deleted so if your use case

291
00:09:56,160 --> 00:10:00,319
follows into this uh presentation mode

292
00:09:58,880 --> 00:10:03,120
of what's happening in a pr then

293
00:10:00,320 --> 00:10:04,320
so is a great solution when armador has

294
00:10:03,120 --> 00:10:06,959
slightly

295
00:10:04,320 --> 00:10:08,240
benefits over is that it's a cli tool

296
00:10:06,959 --> 00:10:09,920
and so you don't need the additional

297
00:10:08,240 --> 00:10:10,800
hardware to run armador you just run it

298
00:10:09,920 --> 00:10:12,959
locally

299
00:10:10,800 --> 00:10:14,560
and it spins up the environment with

300
00:10:12,959 --> 00:10:15,599
what you need and then you're able to

301
00:10:14,560 --> 00:10:17,518
hack it and get in

302
00:10:15,600 --> 00:10:19,279
and do whatever you want and you're

303
00:10:17,519 --> 00:10:21,279
responsible then to make sure it's still

304
00:10:19,279 --> 00:10:24,480
working that it updates as you need

305
00:10:21,279 --> 00:10:25,040
so depending on your use case these two

306
00:10:24,480 --> 00:10:28,160
tools

307
00:10:25,040 --> 00:10:31,360
are potentially the better of the rest

308
00:10:28,160 --> 00:10:34,640
now that's my opinion

309
00:10:31,360 --> 00:10:38,079
and if it wasn't for

310
00:10:34,640 --> 00:10:38,800
this concept of having a huge dependency

311
00:10:38,079 --> 00:10:40,479
chain of

312
00:10:38,800 --> 00:10:42,079
not needing everything we have in

313
00:10:40,480 --> 00:10:44,000
production in my environment

314
00:10:42,079 --> 00:10:45,439
then i would find tilt to be really

315
00:10:44,000 --> 00:10:47,839
fascinating because it

316
00:10:45,440 --> 00:10:49,279
not only provides a great ui both in the

317
00:10:47,839 --> 00:10:52,720
cli

318
00:10:49,279 --> 00:10:54,800
as well as a web interface it

319
00:10:52,720 --> 00:10:56,480
ties into your ide so as you develop the

320
00:10:54,800 --> 00:10:57,439
changes will get updated into your

321
00:10:56,480 --> 00:10:59,680
environment

322
00:10:57,440 --> 00:11:00,880
and you get an aggregate of all the logs

323
00:10:59,680 --> 00:11:01,839
of all the things that are running in

324
00:11:00,880 --> 00:11:03,760
your environment

325
00:11:01,839 --> 00:11:05,040
when something isn't working it shows up

326
00:11:03,760 --> 00:11:08,560
in a nice ui

327
00:11:05,040 --> 00:11:10,640
interface and the other advantage of

328
00:11:08,560 --> 00:11:12,800
tilt is that it doesn't depend on how

329
00:11:10,640 --> 00:11:14,880
the and armador are held

330
00:11:12,800 --> 00:11:17,839
dependent whereas tilt will function

331
00:11:14,880 --> 00:11:19,680
with just pure gamma configurations

332
00:11:17,839 --> 00:11:21,040
but what you do need is to know

333
00:11:19,680 --> 00:11:23,040
everything that's happening

334
00:11:21,040 --> 00:11:25,279
so you do need that full docker compose

335
00:11:23,040 --> 00:11:27,760
that describes the whole environment

336
00:11:25,279 --> 00:11:28,480
so as your dependencies grow bigger and

337
00:11:27,760 --> 00:11:30,319
more

338
00:11:28,480 --> 00:11:32,480
complex it becomes a little harder to

339
00:11:30,320 --> 00:11:34,640
manage exactly what you need in your dev

340
00:11:32,480 --> 00:11:36,800
environment

341
00:11:34,640 --> 00:11:38,319
a popular tool out there that has been

342
00:11:36,800 --> 00:11:40,719
around for much longer

343
00:11:38,320 --> 00:11:42,560
and was there so before anything started

344
00:11:40,720 --> 00:11:45,519
was helm file and

345
00:11:42,560 --> 00:11:46,719
this has the the concept of what the

346
00:11:45,519 --> 00:11:48,720
umbrella chart had

347
00:11:46,720 --> 00:11:50,720
where everything is there and all

348
00:11:48,720 --> 00:11:51,920
managed by helm and deployed as kind of

349
00:11:50,720 --> 00:11:54,399
one instance but

350
00:11:51,920 --> 00:11:56,399
it does deploy it individually so you

351
00:11:54,399 --> 00:11:59,440
you don't have that bulkiness that's

352
00:11:56,399 --> 00:12:00,800
restriction to it um but the the

353
00:11:59,440 --> 00:12:03,680
disadvantage of using

354
00:12:00,800 --> 00:12:04,880
helm file for your dev environment is if

355
00:12:03,680 --> 00:12:06,079
you're doing it across multiple

356
00:12:04,880 --> 00:12:08,320
namespaces

357
00:12:06,079 --> 00:12:09,839
each time you make a new environment you

358
00:12:08,320 --> 00:12:10,959
have to then make new changes to your

359
00:12:09,839 --> 00:12:13,120
configuration

360
00:12:10,959 --> 00:12:14,160
so you can't just say here developer

361
00:12:13,120 --> 00:12:16,160
here's a home file

362
00:12:14,160 --> 00:12:17,839
you can deploy it if somebody else has

363
00:12:16,160 --> 00:12:20,880
already deployed that same thing

364
00:12:17,839 --> 00:12:21,760
so it's a fantastic tool for managing a

365
00:12:20,880 --> 00:12:23,439
production

366
00:12:21,760 --> 00:12:24,959
environment and your configuration and

367
00:12:23,440 --> 00:12:28,160
knowing what's there but

368
00:12:24,959 --> 00:12:31,359
having that dev environment usage might

369
00:12:28,160 --> 00:12:33,360
not be the best use case

370
00:12:31,360 --> 00:12:34,399
a tool that came out of a company in

371
00:12:33,360 --> 00:12:37,440
berlin where

372
00:12:34,399 --> 00:12:41,200
travel audiences also located is from

373
00:12:37,440 --> 00:12:43,360
garden and they uh they actually started

374
00:12:41,200 --> 00:12:46,320
a while ago but didn't come out with

375
00:12:43,360 --> 00:12:48,079
public you know usage until after all

376
00:12:46,320 --> 00:12:51,440
this started a year ago

377
00:12:48,079 --> 00:12:52,000
and what they have is similar where

378
00:12:51,440 --> 00:12:53,760
they'll build

379
00:12:52,000 --> 00:12:55,040
out a dependency graph of everything you

380
00:12:53,760 --> 00:12:56,959
need um

381
00:12:55,040 --> 00:12:58,880
but the configuration seems to need to

382
00:12:56,959 --> 00:12:59,439
be kind of contained in the the one

383
00:12:58,880 --> 00:13:02,240
general

384
00:12:59,440 --> 00:13:03,120
location and so i haven't actually tried

385
00:13:02,240 --> 00:13:05,200
using it but

386
00:13:03,120 --> 00:13:07,440
the the fantastic thing with them is

387
00:13:05,200 --> 00:13:09,600
that the company behind it is willing to

388
00:13:07,440 --> 00:13:11,360
put in the effort and work with you to

389
00:13:09,600 --> 00:13:13,360
get it up and running so if you're low

390
00:13:11,360 --> 00:13:15,279
on resources internally and want to be

391
00:13:13,360 --> 00:13:18,000
able to have dev environments

392
00:13:15,279 --> 00:13:18,560
then contact them and get the support

393
00:13:18,000 --> 00:13:20,320
you need

394
00:13:18,560 --> 00:13:22,479
while they're at least doing it for free

395
00:13:20,320 --> 00:13:22,480
so

396
00:13:22,639 --> 00:13:29,839
if you're dealing with a

397
00:13:25,680 --> 00:13:31,760
much less much less components

398
00:13:29,839 --> 00:13:33,600
your dependency chain isn't so large you

399
00:13:31,760 --> 00:13:34,000
just have one or two applications that

400
00:13:33,600 --> 00:13:36,240
depend

401
00:13:34,000 --> 00:13:37,200
on you know the i need a database with

402
00:13:36,240 --> 00:13:39,360
my front end

403
00:13:37,200 --> 00:13:40,880
like that's kind of the scope of your

404
00:13:39,360 --> 00:13:43,279
existence with your

405
00:13:40,880 --> 00:13:44,639
development environment then the

406
00:13:43,279 --> 00:13:47,680
scaffold is a great tool

407
00:13:44,639 --> 00:13:48,800
it ties directly into ides with vs code

408
00:13:47,680 --> 00:13:52,239
intellij

409
00:13:48,800 --> 00:13:54,479
and it provides a direct environment

410
00:13:52,240 --> 00:13:55,360
for the developer uh handles all the

411
00:13:54,480 --> 00:13:58,000
file syncing

412
00:13:55,360 --> 00:14:00,000
directly and in a faster iteration

413
00:13:58,000 --> 00:14:02,480
process

414
00:14:00,000 --> 00:14:03,680
but where it lacks is the bigger

415
00:14:02,480 --> 00:14:06,720
dependency chain

416
00:14:03,680 --> 00:14:09,839
so again use case dependent

417
00:14:06,720 --> 00:14:12,959
this might be a good solution and

418
00:14:09,839 --> 00:14:15,920
lastly um at least alphabetically

419
00:14:12,959 --> 00:14:17,040
is valero which was originally developed

420
00:14:15,920 --> 00:14:19,120
by heptio

421
00:14:17,040 --> 00:14:21,599
and called arc which then would have

422
00:14:19,120 --> 00:14:24,560
been first alphabetically think but

423
00:14:21,600 --> 00:14:26,160
um its concept is that it creates a

424
00:14:24,560 --> 00:14:28,560
backup of your cluster

425
00:14:26,160 --> 00:14:29,600
and there was actually just a talk a few

426
00:14:28,560 --> 00:14:33,199
minutes ago

427
00:14:29,600 --> 00:14:35,760
about valero and um so

428
00:14:33,199 --> 00:14:37,760
i can't really do what was probably

429
00:14:35,760 --> 00:14:40,480
there's talk about it in the same way

430
00:14:37,760 --> 00:14:42,319
but it what you can do is when you have

431
00:14:40,480 --> 00:14:44,320
this snapshot of your cluster

432
00:14:42,320 --> 00:14:45,760
you can then just deploy that into

433
00:14:44,320 --> 00:14:47,760
another cluster right

434
00:14:45,760 --> 00:14:49,199
and then in another cluster in another

435
00:14:47,760 --> 00:14:50,639
cluster and so then you have your

436
00:14:49,199 --> 00:14:51,920
ephemeral environment that

437
00:14:50,639 --> 00:14:53,760
you can just tear down and create

438
00:14:51,920 --> 00:14:57,360
because you have a backup of it

439
00:14:53,760 --> 00:14:59,439
uh the what i don't

440
00:14:57,360 --> 00:15:01,360
see working i don't know maybe it was

441
00:14:59,440 --> 00:15:02,639
described how you can manage this but in

442
00:15:01,360 --> 00:15:03,600
your production you probably have

443
00:15:02,639 --> 00:15:06,720
hundreds of pods

444
00:15:03,600 --> 00:15:07,440
thousands of replicas big persistent

445
00:15:06,720 --> 00:15:09,680
volumes

446
00:15:07,440 --> 00:15:11,040
you know things that when you take that

447
00:15:09,680 --> 00:15:11,760
snapshot and put it on your local

448
00:15:11,040 --> 00:15:12,880
machine

449
00:15:11,760 --> 00:15:15,040
your local machine's not going to be

450
00:15:12,880 --> 00:15:18,320
able to handle the scope of that so

451
00:15:15,040 --> 00:15:19,040
the the dev environment for valero might

452
00:15:18,320 --> 00:15:22,160
not be

453
00:15:19,040 --> 00:15:26,319
the the place for using it but

454
00:15:22,160 --> 00:15:29,360
it is a good tool that has benefits

455
00:15:26,320 --> 00:15:32,240
so this wouldn't be a good tech talk if

456
00:15:29,360 --> 00:15:35,519
i didn't try a live demo

457
00:15:32,240 --> 00:15:41,839
and i'm gonna

458
00:15:35,519 --> 00:15:41,839
have a go

459
00:15:42,880 --> 00:15:49,439
at doing a demo of armador so

460
00:15:46,240 --> 00:15:49,440
we have the armada repo

461
00:15:49,759 --> 00:15:56,320
and in this armada repo there's a docs

462
00:15:52,839 --> 00:15:58,959
folder with the example

463
00:15:56,320 --> 00:16:00,800
and basically everything in here is as i

464
00:15:58,959 --> 00:16:03,439
described already

465
00:16:00,800 --> 00:16:04,719
how it functions there's also a blog

466
00:16:03,440 --> 00:16:07,040
posts

467
00:16:04,720 --> 00:16:09,040
about what's happening and the reason

468
00:16:07,040 --> 00:16:11,279
for armador

469
00:16:09,040 --> 00:16:13,839
and then at the end there's really just

470
00:16:11,279 --> 00:16:17,120
simple one line to get it up and running

471
00:16:13,839 --> 00:16:18,320
this example app and what's happening

472
00:16:17,120 --> 00:16:23,839
inside

473
00:16:18,320 --> 00:16:23,839
is um actually i already cloned the code

474
00:16:37,279 --> 00:16:42,480
and we have our example apps and so

475
00:16:39,920 --> 00:16:44,719
there's the result in the vote app

476
00:16:42,480 --> 00:16:45,759
because these needed to be included

477
00:16:44,720 --> 00:16:48,320
because these are

478
00:16:45,759 --> 00:16:49,120
our internal company apps whereas the

479
00:16:48,320 --> 00:16:52,240
postgres

480
00:16:49,120 --> 00:16:55,360
and the the redis those are you know

481
00:16:52,240 --> 00:16:58,639
external upstream helm charts

482
00:16:55,360 --> 00:17:01,519
and the worker chart as well uh the

483
00:16:58,639 --> 00:17:03,519
folks that's code fresh i believe

484
00:17:01,519 --> 00:17:04,559
already packaged this example app into

485
00:17:03,519 --> 00:17:07,120
helm charts

486
00:17:04,559 --> 00:17:09,039
and so we just took the examples that

487
00:17:07,119 --> 00:17:10,639
they gave and we can pull down their

488
00:17:09,039 --> 00:17:12,319
worker chart because we're not making

489
00:17:10,640 --> 00:17:19,280
any changes to that

490
00:17:12,319 --> 00:17:22,358
so if i locally go into my

491
00:17:19,280 --> 00:17:22,358
[Music]

492
00:17:23,599 --> 00:17:33,840
i'm going to copy the

493
00:17:26,720 --> 00:17:33,840
voting app from

494
00:17:40,400 --> 00:17:45,039
and so this is in theory my whole

495
00:17:43,280 --> 00:17:45,760
functionality of the voting app would be

496
00:17:45,039 --> 00:17:48,000
in here

497
00:17:45,760 --> 00:17:49,679
including my home configuration

498
00:17:48,000 --> 00:17:51,679
including my yaml file

499
00:17:49,679 --> 00:17:53,520
which lists the dependencies from the

500
00:17:51,679 --> 00:17:57,120
upstream stable repo

501
00:17:53,520 --> 00:18:00,160
and the result app which is a local repo

502
00:17:57,120 --> 00:18:04,479
within you know our company and

503
00:18:00,160 --> 00:18:04,480
has a specific path to the configuration

504
00:18:04,559 --> 00:18:10,080
and i just run armador create

505
00:18:07,760 --> 00:18:10,080
jeff

506
00:18:12,840 --> 00:18:19,840
and i'm assuming i have mini cube

507
00:18:16,400 --> 00:18:21,120
up and running already yeah save some

508
00:18:19,840 --> 00:18:23,120
time there

509
00:18:21,120 --> 00:18:26,159
and here we can see that these five

510
00:18:23,120 --> 00:18:29,840
charts are going to be installed

511
00:18:26,160 --> 00:18:32,559
so this is the components that we need

512
00:18:29,840 --> 00:18:33,600
and there they should all be running

513
00:18:32,559 --> 00:18:36,480
some got all

514
00:18:33,600 --> 00:18:36,480
get pods

515
00:18:37,840 --> 00:18:41,678
the redis and the database are on their

516
00:18:40,080 --> 00:18:46,320
way to beam running

517
00:18:41,679 --> 00:18:50,400
and the way minicube works for

518
00:18:46,320 --> 00:18:50,399
being able to access your

519
00:18:50,640 --> 00:18:57,840
ports is by having a

520
00:18:58,160 --> 00:19:05,120
youtube service oops

521
00:19:01,679 --> 00:19:05,120
i was going to try to show the help here

522
00:19:09,440 --> 00:19:13,679
so it creates urls that are dedicated to

523
00:19:12,400 --> 00:19:15,280
the applications that are running in

524
00:19:13,679 --> 00:19:19,919
your cluster all right so

525
00:19:15,280 --> 00:19:19,918
kubeco get this

526
00:19:20,480 --> 00:19:25,120
so i want to be able to connect to the

527
00:19:22,160 --> 00:19:28,400
voting app and cast my vote

528
00:19:25,120 --> 00:19:30,879
and this cluster ip

529
00:19:28,400 --> 00:19:33,039
is only located within the mini cube but

530
00:19:30,880 --> 00:19:39,840
if we

531
00:19:33,039 --> 00:19:39,840
put forward out that traffic

532
00:19:40,240 --> 00:19:47,039
it loads it up and now i can vote for

533
00:19:43,520 --> 00:19:47,039
dogs because i like dogs

534
00:19:48,880 --> 00:19:59,200
still got a

535
00:19:53,120 --> 00:19:59,199
and play from current slide

536
00:20:03,360 --> 00:20:08,080
so now we have a full set of tools

537
00:20:06,480 --> 00:20:10,880
available in the community

538
00:20:08,080 --> 00:20:11,918
uh i kind of just gave you a tool dump i

539
00:20:10,880 --> 00:20:14,400
can say

540
00:20:11,919 --> 00:20:16,640
what's best for you is of course armadar

541
00:20:14,400 --> 00:20:16,640
um

542
00:20:16,880 --> 00:20:21,280
but again you know find your use case

543
00:20:19,039 --> 00:20:24,080
find out what's available

544
00:20:21,280 --> 00:20:25,600
what's most likely the case is now that

545
00:20:24,080 --> 00:20:26,960
there's all these tools

546
00:20:25,600 --> 00:20:29,600
you probably don't need to go through

547
00:20:26,960 --> 00:20:34,480
the trouble of rewriting your own

548
00:20:29,600 --> 00:20:37,600
you can instead work on what's available

549
00:20:34,480 --> 00:20:40,000
and i have a talk tomorrow

550
00:20:37,600 --> 00:20:41,439
where i'm going to discuss what you can

551
00:20:40,000 --> 00:20:42,880
do now that you have

552
00:20:41,440 --> 00:20:44,240
your ephemeral environment now that you

553
00:20:42,880 --> 00:20:45,840
have this dev environment how do you

554
00:20:44,240 --> 00:20:49,039
debug and how do you actually

555
00:20:45,840 --> 00:20:50,879
use it to the best you can and i just

556
00:20:49,039 --> 00:20:51,679
want to give a shout out to the helm

557
00:20:50,880 --> 00:20:53,280
contributors

558
00:20:51,679 --> 00:20:56,159
the maintainers are going to be giving a

559
00:20:53,280 --> 00:21:03,840
talk at the conflict management camp

560
00:20:56,159 --> 00:21:03,840
thank you

561
00:21:07,440 --> 00:21:09,520
you

