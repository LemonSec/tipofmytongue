1
00:00:11,440 --> 00:00:13,759
okay everybody

2
00:00:12,320 --> 00:00:16,720
we're about to start the next

3
00:00:13,759 --> 00:00:22,400
presentation so if you take your seats

4
00:00:16,720 --> 00:00:22,400
and i hand over to christian and simon

5
00:00:23,119 --> 00:00:28,320
yeah so hi everyone um welcome to our

6
00:00:25,519 --> 00:00:30,880
talk uh introduction to eclipse isaacs

7
00:00:28,320 --> 00:00:31,439
um this christian i'm simon we are from

8
00:00:30,880 --> 00:00:33,600
bosch

9
00:00:31,439 --> 00:00:34,800
and about two years ago we started the

10
00:00:33,600 --> 00:00:37,280
internal development

11
00:00:34,800 --> 00:00:37,919
of eclipse isaacs at the end of last

12
00:00:37,280 --> 00:00:41,680
year

13
00:00:37,920 --> 00:00:44,079
we open sourced it let's have a

14
00:00:41,680 --> 00:00:44,960
brief look at the agenda our talk is

15
00:00:44,079 --> 00:00:47,280
split into

16
00:00:44,960 --> 00:00:48,719
two parts so first off we were talking

17
00:00:47,280 --> 00:00:50,559
about eclipse isa rigs

18
00:00:48,719 --> 00:00:52,559
and then the second part is the demo of

19
00:00:50,559 --> 00:00:54,000
the robot larry and you've got the

20
00:00:52,559 --> 00:00:56,399
ability to

21
00:00:54,000 --> 00:00:57,120
see ross at least see isaac's in the

22
00:00:56,399 --> 00:00:58,800
wild

23
00:00:57,120 --> 00:01:01,038
and it's a spare time project it's not

24
00:00:58,800 --> 00:01:04,878
associated with bosch

25
00:01:01,039 --> 00:01:08,400
eclipse isaarix we i'm going to briefly

26
00:01:04,879 --> 00:01:10,159
talk about the motivation behind it then

27
00:01:08,400 --> 00:01:11,760
show you how a typical middleware

28
00:01:10,159 --> 00:01:14,479
nowadays works like

29
00:01:11,760 --> 00:01:15,600
then discuss how eclipse is doing things

30
00:01:14,479 --> 00:01:17,920
differently

31
00:01:15,600 --> 00:01:20,240
and briefly discuss also some lessons

32
00:01:17,920 --> 00:01:20,240
learned

33
00:01:20,799 --> 00:01:27,600
so first off why does ipc matter well

34
00:01:24,240 --> 00:01:29,199
this is why autonomous driving is very

35
00:01:27,600 --> 00:01:31,039
complex

36
00:01:29,200 --> 00:01:33,439
and with autonomous driving you're

37
00:01:31,040 --> 00:01:36,880
dealing with a data driven system

38
00:01:33,439 --> 00:01:40,158
so different sensors like a lidar

39
00:01:36,880 --> 00:01:42,798
and a video camera are producing data

40
00:01:40,159 --> 00:01:44,000
and collecting uh sending this data to

41
00:01:42,799 --> 00:01:46,320
algorithms

42
00:01:44,000 --> 00:01:48,640
and then further to the actuators for

43
00:01:46,320 --> 00:01:52,158
example the steering wheel

44
00:01:48,640 --> 00:01:52,159
so with the troubles

45
00:01:53,759 --> 00:02:00,159
yeah is it fine for you i guess okay

46
00:01:56,799 --> 00:02:02,479
um well and typically under systems

47
00:02:00,159 --> 00:02:04,560
you have an operating system so each

48
00:02:02,479 --> 00:02:04,960
application runs in the virtual address

49
00:02:04,560 --> 00:02:06,640
space

50
00:02:04,960 --> 00:02:08,478
and you do to overcome this virtual

51
00:02:06,640 --> 00:02:10,318
address space and this is why you need

52
00:02:08,479 --> 00:02:12,080
inter-process communication

53
00:02:10,318 --> 00:02:13,839
and the main two requirements when it

54
00:02:12,080 --> 00:02:16,160
comes to autonomous driving is

55
00:02:13,840 --> 00:02:18,160
that we are transmitting large data sets

56
00:02:16,160 --> 00:02:20,400
so up to 10 gigabytes per second

57
00:02:18,160 --> 00:02:21,680
and additionally we need low latency

58
00:02:20,400 --> 00:02:23,840
because we're dealing with the real-time

59
00:02:21,680 --> 00:02:23,840
system

60
00:02:25,120 --> 00:02:29,920
so how does a typical middleware like

61
00:02:26,800 --> 00:02:32,080
the one used today in ross work

62
00:02:29,920 --> 00:02:33,599
i'll briefly introduce you to an example

63
00:02:32,080 --> 00:02:35,760
so we have here a publisher

64
00:02:33,599 --> 00:02:36,879
a radar app sending data to two

65
00:02:35,760 --> 00:02:40,319
subscribers

66
00:02:36,879 --> 00:02:41,120
um to algorithmic apps and a typical

67
00:02:40,319 --> 00:02:42,640
middleware

68
00:02:41,120 --> 00:02:44,239
after the data was being written the

69
00:02:42,640 --> 00:02:46,238
data package copies

70
00:02:44,239 --> 00:02:48,160
it's to an internal buffers and then

71
00:02:46,239 --> 00:02:51,360
does further copies

72
00:02:48,160 --> 00:02:53,280
like for every subscriber

73
00:02:51,360 --> 00:02:54,959
and if you plot this now you get

74
00:02:53,280 --> 00:02:57,599
something similar like this

75
00:02:54,959 --> 00:02:58,080
so with the messages in decrease message

76
00:02:57,599 --> 00:03:00,799
size

77
00:02:58,080 --> 00:03:03,040
you get also an increased latency now

78
00:03:00,800 --> 00:03:06,080
imagine you're sending a 4k video stream

79
00:03:03,040 --> 00:03:08,959
you really have a problem and this is

80
00:03:06,080 --> 00:03:11,120
where eclipse is comes in

81
00:03:08,959 --> 00:03:12,640
so i'll run the same example now with

82
00:03:11,120 --> 00:03:15,440
eclipse cyzericks

83
00:03:12,640 --> 00:03:16,958
and first off what's different they have

84
00:03:15,440 --> 00:03:20,159
to register all the apps have to

85
00:03:16,959 --> 00:03:21,519
register with our daemon called rowdy

86
00:03:20,159 --> 00:03:23,040
and after they have registered the

87
00:03:21,519 --> 00:03:25,200
communication runs completely

88
00:03:23,040 --> 00:03:28,079
independent from rowdy

89
00:03:25,200 --> 00:03:29,679
so in the second part the apps map a

90
00:03:28,080 --> 00:03:31,200
shared memory segment

91
00:03:29,680 --> 00:03:33,040
this is the red box that you can see

92
00:03:31,200 --> 00:03:35,518
here and inside this

93
00:03:33,040 --> 00:03:36,079
shared memory we have so-called memory

94
00:03:35,519 --> 00:03:39,760
pools

95
00:03:36,080 --> 00:03:42,959
you can think of them as wagons and

96
00:03:39,760 --> 00:03:44,640
at the beginning the publisher requests

97
00:03:42,959 --> 00:03:46,720
ownership of such a wagon

98
00:03:44,640 --> 00:03:48,399
from the middleware then in the second

99
00:03:46,720 --> 00:03:50,879
step the data package

100
00:03:48,400 --> 00:03:51,920
is being written into this wagon and in

101
00:03:50,879 --> 00:03:53,679
the third step

102
00:03:51,920 --> 00:03:55,839
we deliver this pointer to the

103
00:03:53,680 --> 00:03:58,400
subscribers

104
00:03:55,840 --> 00:04:00,080
and this is what we call true zero copy

105
00:03:58,400 --> 00:04:02,879
because data is only written once

106
00:04:00,080 --> 00:04:02,879
and never copied

107
00:04:03,680 --> 00:04:07,920
so now we press the fast forward button

108
00:04:05,439 --> 00:04:09,120
a bit two more data packages were

109
00:04:07,920 --> 00:04:11,679
produced

110
00:04:09,120 --> 00:04:13,040
and the data package in the beef wagon

111
00:04:11,680 --> 00:04:14,959
was already consumed

112
00:04:13,040 --> 00:04:17,199
and here we have a mechanism using

113
00:04:14,959 --> 00:04:21,040
reference counting to automatically

114
00:04:17,199 --> 00:04:21,040
recycle the unused memory chunks

115
00:04:22,400 --> 00:04:25,919
now if you plot this again you get

116
00:04:24,400 --> 00:04:28,799
something similar like this

117
00:04:25,919 --> 00:04:29,840
so now the latency is independent from

118
00:04:28,800 --> 00:04:32,080
the message size

119
00:04:29,840 --> 00:04:32,880
you get virtually limitless data

120
00:04:32,080 --> 00:04:35,758
transmission

121
00:04:32,880 --> 00:04:35,759
at constant time

122
00:04:36,000 --> 00:04:40,400
and now i'm going to further dig a bit

123
00:04:37,520 --> 00:04:42,639
more into the details of iso rigs

124
00:04:40,400 --> 00:04:43,679
it comes under an apache 2 license it's

125
00:04:42,639 --> 00:04:46,320
written in c plus

126
00:04:43,680 --> 00:04:46,800
11 however we're planning to move to c

127
00:04:46,320 --> 00:04:51,520
plus

128
00:04:46,800 --> 00:04:53,520
14 soon it runs both on linux and qnix

129
00:04:51,520 --> 00:04:54,560
in order to establish this communication

130
00:04:53,520 --> 00:04:56,240
over shared memory

131
00:04:54,560 --> 00:05:00,080
we're using state-of-the-art lock-free

132
00:04:56,240 --> 00:05:02,400
algorithms and we would advise anyone

133
00:05:00,080 --> 00:05:04,800
to not directly use this api but use it

134
00:05:02,400 --> 00:05:08,159
with a higher level api

135
00:05:04,800 --> 00:05:08,960
so for example we offer bindings for us

136
00:05:08,160 --> 00:05:12,160
too

137
00:05:08,960 --> 00:05:13,440
and also continental integrated iso rigs

138
00:05:12,160 --> 00:05:16,639
in their ecal middleware

139
00:05:13,440 --> 00:05:17,360
to make it faster it also can be used as

140
00:05:16,639 --> 00:05:19,919
an

141
00:05:17,360 --> 00:05:21,360
implementation for the adaptive autosar

142
00:05:19,919 --> 00:05:23,120
communications api

143
00:05:21,360 --> 00:05:25,840
which is widely used in the automotive

144
00:05:23,120 --> 00:05:25,840
industry

145
00:05:26,560 --> 00:05:29,840
so next i'm going to talk a bit about

146
00:05:28,000 --> 00:05:33,199
the lessons learned

147
00:05:29,840 --> 00:05:35,758
so up front we strive for the highest

148
00:05:33,199 --> 00:05:38,000
automotive safety standard

149
00:05:35,759 --> 00:05:40,479
just to be clear here we are not there

150
00:05:38,000 --> 00:05:42,720
yet yeah things are work in progress

151
00:05:40,479 --> 00:05:44,240
but one of the main goals or the main

152
00:05:42,720 --> 00:05:44,639
lessons learned that we learned over the

153
00:05:44,240 --> 00:05:47,520
years

154
00:05:44,639 --> 00:05:48,800
is determinism is the key this is why

155
00:05:47,520 --> 00:05:50,719
we're not using heap

156
00:05:48,800 --> 00:05:52,800
but static memory pools so if you

157
00:05:50,720 --> 00:05:55,440
configure your memory right up front you

158
00:05:52,800 --> 00:05:57,440
will never run into out of memory arrows

159
00:05:55,440 --> 00:05:58,639
and also we're only using a subset of

160
00:05:57,440 --> 00:06:00,960
the stl

161
00:05:58,639 --> 00:06:01,680
the c plus plus standard template

162
00:06:00,960 --> 00:06:04,719
library

163
00:06:01,680 --> 00:06:07,759
so we don't allow undefined behavior and

164
00:06:04,720 --> 00:06:09,520
you also get no exceptions

165
00:06:07,759 --> 00:06:11,360
another very important lessons learned

166
00:06:09,520 --> 00:06:12,318
is that log-free programming is really

167
00:06:11,360 --> 00:06:14,479
hard

168
00:06:12,319 --> 00:06:15,440
it took us about two years to get our

169
00:06:14,479 --> 00:06:18,560
main

170
00:06:15,440 --> 00:06:20,080
safely overflowing fifo right if we

171
00:06:18,560 --> 00:06:21,919
would ask ourselves

172
00:06:20,080 --> 00:06:23,440
uh what would we do different if we

173
00:06:21,919 --> 00:06:25,840
would start from the scratch

174
00:06:23,440 --> 00:06:27,440
and we would definitely start with the

175
00:06:25,840 --> 00:06:29,520
basic building blocks

176
00:06:27,440 --> 00:06:32,960
because nowadays many components are

177
00:06:29,520 --> 00:06:35,039
still not optimized not feature complete

178
00:06:32,960 --> 00:06:36,080
and also we believe that transparency

179
00:06:35,039 --> 00:06:37,759
builds trust

180
00:06:36,080 --> 00:06:39,840
and this is especially true in the

181
00:06:37,759 --> 00:06:40,560
safety field and this is why we want to

182
00:06:39,840 --> 00:06:41,758
continue

183
00:06:40,560 --> 00:06:45,280
the development together with the

184
00:06:41,759 --> 00:06:45,280
community in the open

185
00:06:46,080 --> 00:06:50,080
so briefly some words about the upcoming

186
00:06:49,120 --> 00:06:53,360
features

187
00:06:50,080 --> 00:06:54,400
um we are planning to integrate into one

188
00:06:53,360 --> 00:06:56,080
communication

189
00:06:54,400 --> 00:06:57,919
this is for example necessary for the

190
00:06:56,080 --> 00:06:59,280
ros2 logger because

191
00:06:57,919 --> 00:07:01,039
many different applications many

192
00:06:59,280 --> 00:07:02,239
different publishers are sending data to

193
00:07:01,039 --> 00:07:04,080
one topic

194
00:07:02,240 --> 00:07:05,599
and then also we're planning request

195
00:07:04,080 --> 00:07:07,599
response communication

196
00:07:05,599 --> 00:07:09,280
and various language bindings the rust

197
00:07:07,599 --> 00:07:11,039
language binding is already available

198
00:07:09,280 --> 00:07:12,719
you can check it out you find the link

199
00:07:11,039 --> 00:07:14,880
at the end

200
00:07:12,720 --> 00:07:17,199
also we're partnering up with eclipse

201
00:07:14,880 --> 00:07:20,240
cyclone dds this is the middleware

202
00:07:17,199 --> 00:07:23,680
like jose showed earlier

203
00:07:20,240 --> 00:07:25,680
currently used inside ros2 and for

204
00:07:23,680 --> 00:07:28,639
full rust 2 compatibility we're also

205
00:07:25,680 --> 00:07:30,400
planning windows and mac os support

206
00:07:28,639 --> 00:07:31,680
so if you have further questions you can

207
00:07:30,400 --> 00:07:33,599
write to our mailing list

208
00:07:31,680 --> 00:07:34,960
or just check out the code and without

209
00:07:33,599 --> 00:07:38,080
further ado

210
00:07:34,960 --> 00:07:39,039
i would give this a question thank you

211
00:07:38,080 --> 00:07:41,359
simon

212
00:07:39,039 --> 00:07:43,360
okay whenever i start a presentation

213
00:07:41,360 --> 00:07:44,240
like this one i try to figure out what

214
00:07:43,360 --> 00:07:45,840
my

215
00:07:44,240 --> 00:07:48,160
main goal is i want to transmit to the

216
00:07:45,840 --> 00:07:51,758
audience and i came up with this here

217
00:07:48,160 --> 00:07:54,720
is it polarizer x and the reason here is

218
00:07:51,759 --> 00:07:56,479
if you look at a typical middleware it

219
00:07:54,720 --> 00:07:58,800
does a lot of copies you have a sender

220
00:07:56,479 --> 00:08:02,080
which has to produce data and wants to

221
00:07:58,800 --> 00:08:03,520
commit transmit this data to a multitude

222
00:08:02,080 --> 00:08:05,758
of receivers and there are a lot of

223
00:08:03,520 --> 00:08:07,680
copies involved now think of a 4k camera

224
00:08:05,759 --> 00:08:09,360
which runs at 60 frames per second

225
00:08:07,680 --> 00:08:11,440
you have a lot of data here and then

226
00:08:09,360 --> 00:08:12,879
performance becomes really a bottleneck

227
00:08:11,440 --> 00:08:14,560
but in isobrix we do it a little bit

228
00:08:12,879 --> 00:08:16,160
differently you can say like you're

229
00:08:14,560 --> 00:08:18,000
sending no data you just point

230
00:08:16,160 --> 00:08:19,599
there's the data take a look at it and

231
00:08:18,000 --> 00:08:21,120
this is much faster

232
00:08:19,599 --> 00:08:22,800
and the second thing is a personal thing

233
00:08:21,120 --> 00:08:23,280
when i started working on this project i

234
00:08:22,800 --> 00:08:24,960
thought

235
00:08:23,280 --> 00:08:27,599
it's pretty cool to have something which

236
00:08:24,960 --> 00:08:29,440
will be running in a car soon

237
00:08:27,599 --> 00:08:31,199
to work on a robot for instance in my

238
00:08:29,440 --> 00:08:33,039
spare time and that was started the

239
00:08:31,199 --> 00:08:36,320
larry project

240
00:08:33,039 --> 00:08:36,319
so who is larry

241
00:08:37,599 --> 00:08:41,839
this is larry larry is our blue friend

242
00:08:41,120 --> 00:08:45,200
here

243
00:08:41,839 --> 00:08:45,839
which is a robot which has a camera up

244
00:08:45,200 --> 00:08:48,000
front

245
00:08:45,839 --> 00:08:48,880
which can be rotated vertically and

246
00:08:48,000 --> 00:08:50,720
horizontally

247
00:08:48,880 --> 00:08:52,880
you have an ultrasonic sensor you have

248
00:08:50,720 --> 00:08:56,320
also a tracking sensor in front of it

249
00:08:52,880 --> 00:08:57,760
but it's broken um where you can win

250
00:08:56,320 --> 00:09:00,399
robo races for instance

251
00:08:57,760 --> 00:09:00,800
uh then we have some leds and the people

252
00:09:00,399 --> 00:09:05,279
on it

253
00:09:00,800 --> 00:09:07,599
and in the future i will plan to uh

254
00:09:05,279 --> 00:09:08,399
to pull a microphone array on it and put

255
00:09:07,600 --> 00:09:10,399
on some speakers

256
00:09:08,399 --> 00:09:11,839
that have speech recognition voice

257
00:09:10,399 --> 00:09:14,240
control and so on

258
00:09:11,839 --> 00:09:15,040
and maybe a 3d stereo camera where you

259
00:09:14,240 --> 00:09:17,519
can put on the

260
00:09:15,040 --> 00:09:18,079
some vr googles and can become larry and

261
00:09:17,519 --> 00:09:20,160
can

262
00:09:18,080 --> 00:09:22,160
a drive through a room and with your vr

263
00:09:20,160 --> 00:09:23,680
googles and i think this is pretty crazy

264
00:09:22,160 --> 00:09:25,600
cool

265
00:09:23,680 --> 00:09:27,839
and everything is also again under the

266
00:09:25,600 --> 00:09:30,399
pitch it's 2 license

267
00:09:27,839 --> 00:09:32,800
and now the question comes can you build

268
00:09:30,399 --> 00:09:34,800
your own larry yes you can

269
00:09:32,800 --> 00:09:36,800
you can buy this whole kit i think it's

270
00:09:34,800 --> 00:09:38,399
130 euros you

271
00:09:36,800 --> 00:09:40,800
the link is here in the gitlab

272
00:09:38,399 --> 00:09:41,120
repository it's not from bosch it's from

273
00:09:40,800 --> 00:09:44,079
a

274
00:09:41,120 --> 00:09:45,360
robo company and where everything comes

275
00:09:44,080 --> 00:09:46,880
together is a larry robotics

276
00:09:45,360 --> 00:09:49,760
repository where you can find some

277
00:09:46,880 --> 00:09:51,839
tutorials how to handle

278
00:09:49,760 --> 00:09:54,880
your raspberry pi with our linux image

279
00:09:51,839 --> 00:09:57,839
we decided for our linux not raspbian

280
00:09:54,880 --> 00:09:58,800
how to have you get your library

281
00:09:57,839 --> 00:10:01,120
services running

282
00:09:58,800 --> 00:10:02,560
the larry services are the applications

283
00:10:01,120 --> 00:10:04,560
which are running on larry

284
00:10:02,560 --> 00:10:05,839
which control the ultrasonic sensor the

285
00:10:04,560 --> 00:10:08,079
camera

286
00:10:05,839 --> 00:10:10,079
the driving and so on then you maybe

287
00:10:08,079 --> 00:10:10,880
want to remote control your larry and

288
00:10:10,079 --> 00:10:13,199
therefore we have an

289
00:10:10,880 --> 00:10:14,320
air user interface it's called larry ui

290
00:10:13,200 --> 00:10:16,560
and

291
00:10:14,320 --> 00:10:17,360
there you can log in onto your laptop to

292
00:10:16,560 --> 00:10:20,399
larry and can

293
00:10:17,360 --> 00:10:22,079
control him can make a blink and so on

294
00:10:20,399 --> 00:10:22,880
and we have some basic applications

295
00:10:22,079 --> 00:10:25,359
which

296
00:10:22,880 --> 00:10:26,320
like an emergency brake and so on and

297
00:10:25,360 --> 00:10:28,399
the other thing is

298
00:10:26,320 --> 00:10:30,000
one of my other projects is a spare time

299
00:10:28,399 --> 00:10:31,360
3d engine you should never build your

300
00:10:30,000 --> 00:10:34,160
own but it makes fun so

301
00:10:31,360 --> 00:10:34,720
i build my own and if you want to help

302
00:10:34,160 --> 00:10:37,920
you can

303
00:10:34,720 --> 00:10:40,399
also get involved here so uh

304
00:10:37,920 --> 00:10:42,319
now let's take a deep look into ice rigs

305
00:10:40,399 --> 00:10:42,959
how it's really working i think the best

306
00:10:42,320 --> 00:10:45,200
thing

307
00:10:42,959 --> 00:10:46,719
to realize how ice is working is by

308
00:10:45,200 --> 00:10:48,079
example it's like with a new language

309
00:10:46,720 --> 00:10:50,480
you have to speak it

310
00:10:48,079 --> 00:10:51,680
and here we have larry he's inside the

311
00:10:50,480 --> 00:10:53,360
labyrinth

312
00:10:51,680 --> 00:10:55,359
and we have to help larry to find out

313
00:10:53,360 --> 00:10:56,880
it's a very easy labyrinth and

314
00:10:55,360 --> 00:10:58,399
these rules apply only for this

315
00:10:56,880 --> 00:11:00,320
labyrinth but just for the sake of

316
00:10:58,399 --> 00:11:02,000
argument we stick to this rules

317
00:11:00,320 --> 00:11:03,839
the first rule is if there is no

318
00:11:02,000 --> 00:11:06,399
obstacle at drive forward

319
00:11:03,839 --> 00:11:08,240
if there's an obstacle ahead turn right

320
00:11:06,399 --> 00:11:09,200
and with this algorithm he can find off

321
00:11:08,240 --> 00:11:11,600
this

322
00:11:09,200 --> 00:11:13,279
very simplistic labyrinth now let's take

323
00:11:11,600 --> 00:11:16,320
a look at the code how it would

324
00:11:13,279 --> 00:11:17,120
look like in c plus plus before we

325
00:11:16,320 --> 00:11:20,240
started with the

326
00:11:17,120 --> 00:11:23,600
um we have uh how

327
00:11:20,240 --> 00:11:25,600
the code is ordered simon mentioned how

328
00:11:23,600 --> 00:11:27,200
we interact with the sensors algorithms

329
00:11:25,600 --> 00:11:28,959
and actuators and in this case

330
00:11:27,200 --> 00:11:30,560
we have an ultrasonic sensor which

331
00:11:28,959 --> 00:11:32,399
detects the obstacles

332
00:11:30,560 --> 00:11:33,680
though we can realize we are in front of

333
00:11:32,399 --> 00:11:35,279
a wall then we need an

334
00:11:33,680 --> 00:11:37,120
algorithm in this case we have an

335
00:11:35,279 --> 00:11:38,000
algorithm these are two rules to get out

336
00:11:37,120 --> 00:11:39,760
of a labyrinth

337
00:11:38,000 --> 00:11:42,079
and then we have our actuator this is

338
00:11:39,760 --> 00:11:43,680
another application which just drives it

339
00:11:42,079 --> 00:11:45,040
receives commands drive forward to and

340
00:11:43,680 --> 00:11:46,239
right and so on

341
00:11:45,040 --> 00:11:48,800
and now let's take a look at the

342
00:11:46,240 --> 00:11:50,320
algorithm and z plus plus

343
00:11:48,800 --> 00:11:52,399
this is a whole algorithm you do not

344
00:11:50,320 --> 00:11:54,399
need any more stuff and with this you

345
00:11:52,399 --> 00:11:56,160
have a very basic

346
00:11:54,399 --> 00:11:58,079
application written where larry can find

347
00:11:56,160 --> 00:12:00,480
out of a labyrinth

348
00:11:58,079 --> 00:12:01,839
um but now let's go step by step through

349
00:12:00,480 --> 00:12:04,240
the code

350
00:12:01,839 --> 00:12:05,200
the first thing is as simon mentioned we

351
00:12:04,240 --> 00:12:07,200
have to uh

352
00:12:05,200 --> 00:12:09,600
register at audi this is the first line

353
00:12:07,200 --> 00:12:10,800
we just say hello rowdy here i am my

354
00:12:09,600 --> 00:12:12,399
name is explorer

355
00:12:10,800 --> 00:12:14,240
the second thing is we are interested in

356
00:12:12,399 --> 00:12:15,680
the data from the ultrasonic sensor

357
00:12:14,240 --> 00:12:18,079
and therefore we have to subscribe to

358
00:12:15,680 --> 00:12:20,719
him and every sensor and every

359
00:12:18,079 --> 00:12:23,199
sender has a unique id in this case it's

360
00:12:20,720 --> 00:12:25,279
larry ultrasonic sensor in turn

361
00:12:23,200 --> 00:12:26,880
when we have done this we have to create

362
00:12:25,279 --> 00:12:29,120
a driver class it's a very simplistic

363
00:12:26,880 --> 00:12:31,680
class provided with library services

364
00:12:29,120 --> 00:12:34,399
which does actually for us like driving

365
00:12:31,680 --> 00:12:36,638
forward to right to left stop and so on

366
00:12:34,399 --> 00:12:38,959
and we have to do fine when we are in

367
00:12:36,639 --> 00:12:39,600
front of a wall the minimum distance in

368
00:12:38,959 --> 00:12:42,638
this case

369
00:12:39,600 --> 00:12:43,200
0.3 meters and now we come to the invent

370
00:12:42,639 --> 00:12:45,040
loop

371
00:12:43,200 --> 00:12:46,880
this event loops runs as long as larry

372
00:12:45,040 --> 00:12:49,199
is stuck into the labyrinth

373
00:12:46,880 --> 00:12:50,880
at first we have to get our sensor data

374
00:12:49,200 --> 00:12:52,240
from the ultrasonic sensor we do it in

375
00:12:50,880 --> 00:12:54,560
line six

376
00:12:52,240 --> 00:12:56,079
and now let's take our x-ray googles and

377
00:12:54,560 --> 00:12:57,119
let's take a look what really happens

378
00:12:56,079 --> 00:12:59,680
inside

379
00:12:57,120 --> 00:13:00,880
um here we're asking hey is there some

380
00:12:59,680 --> 00:13:03,519
kind of package we

381
00:13:00,880 --> 00:13:05,360
are interested in and then rowdy says

382
00:13:03,519 --> 00:13:07,200
yes there is data look over there

383
00:13:05,360 --> 00:13:09,120
we do not do any copy we just take a

384
00:13:07,200 --> 00:13:10,800
look over there and say oh okay

385
00:13:09,120 --> 00:13:14,000
there's some sensor data the minimum

386
00:13:10,800 --> 00:13:15,599
distance for instance is

387
00:13:14,000 --> 00:13:17,360
greater than the sensor distance the

388
00:13:15,600 --> 00:13:18,480
actual distance therefore we have to

389
00:13:17,360 --> 00:13:20,800
turn right

390
00:13:18,480 --> 00:13:22,000
or we do the other thing oh there's no

391
00:13:20,800 --> 00:13:23,839
sensor data because

392
00:13:22,000 --> 00:13:25,360
the ultrasonic sensor does not detect

393
00:13:23,839 --> 00:13:27,519
anything or the

394
00:13:25,360 --> 00:13:29,040
sensor data detects something but it's

395
00:13:27,519 --> 00:13:30,959
further away than we

396
00:13:29,040 --> 00:13:33,199
uh require for turning right and

397
00:13:30,959 --> 00:13:34,638
therefore we turn uh we drive forward

398
00:13:33,200 --> 00:13:37,680
and if we take a look at the driving

399
00:13:34,639 --> 00:13:39,920
forward and take our x-ray googles again

400
00:13:37,680 --> 00:13:41,040
we just asking rowdy hey i want to send

401
00:13:39,920 --> 00:13:42,800
some data package

402
00:13:41,040 --> 00:13:44,880
give me some memory and the routing

403
00:13:42,800 --> 00:13:47,040
comes gives us some memory

404
00:13:44,880 --> 00:13:48,399
then we write our memory inside of it

405
00:13:47,040 --> 00:13:50,719
and then please just say

406
00:13:48,399 --> 00:13:51,680
rowdy this is the stuff i want to

407
00:13:50,720 --> 00:13:56,079
publish

408
00:13:51,680 --> 00:13:56,079
and give it to our audi and then

409
00:13:56,399 --> 00:13:59,680
the application which is interested in

410
00:13:58,320 --> 00:14:01,120
this is a driver application

411
00:13:59,680 --> 00:14:02,880
tells router hey i'm interested in

412
00:14:01,120 --> 00:14:03,360
driving information is there something

413
00:14:02,880 --> 00:14:05,279
new

414
00:14:03,360 --> 00:14:07,040
and then router again tells them yes

415
00:14:05,279 --> 00:14:08,800
there is something new just take a look

416
00:14:07,040 --> 00:14:12,000
over there no copy involved

417
00:14:08,800 --> 00:14:14,560
and then interpret your data and this

418
00:14:12,000 --> 00:14:17,040
means for instance driving forward

419
00:14:14,560 --> 00:14:19,199
so and now let's take a look at the high

420
00:14:17,040 --> 00:14:21,599
level architecture it's very simplistic

421
00:14:19,199 --> 00:14:24,560
we have larry here our blue friend and

422
00:14:21,600 --> 00:14:27,279
he essentially runs on a raspberry pi 4

423
00:14:24,560 --> 00:14:28,880
which does this basic data like collect

424
00:14:27,279 --> 00:14:30,079
some sensor data has to do some

425
00:14:28,880 --> 00:14:32,720
pre-processing for instance

426
00:14:30,079 --> 00:14:34,000
if you have an ultrasonic sensor uh you

427
00:14:32,720 --> 00:14:35,440
just send a ping

428
00:14:34,000 --> 00:14:37,519
out of it then you receive some

429
00:14:35,440 --> 00:14:39,360
microseconds later the the echo from

430
00:14:37,519 --> 00:14:41,199
this and then you have to calculate your

431
00:14:39,360 --> 00:14:42,720
distance from it and this is done also

432
00:14:41,199 --> 00:14:43,120
on the raspberry pi are not transmitted

433
00:14:42,720 --> 00:14:45,199
to

434
00:14:43,120 --> 00:14:46,240
a computer the high performance computer

435
00:14:45,199 --> 00:14:48,560
here

436
00:14:46,240 --> 00:14:50,320
and also some low level control like

437
00:14:48,560 --> 00:14:52,479
when larry is driving

438
00:14:50,320 --> 00:14:53,839
against the wall you have to stop him

439
00:14:52,480 --> 00:14:55,360
and therefore this is also done on the

440
00:14:53,839 --> 00:14:57,199
raspberry pi locally

441
00:14:55,360 --> 00:14:58,399
but the high performance computer should

442
00:14:57,199 --> 00:15:00,479
do like uh

443
00:14:58,399 --> 00:15:02,320
perform a high strategy let's think you

444
00:15:00,480 --> 00:15:03,920
have a swarm of larry's or like a swarm

445
00:15:02,320 --> 00:15:04,959
of turtle bots like the previous

446
00:15:03,920 --> 00:15:06,639
presentation

447
00:15:04,959 --> 00:15:08,239
you maybe have a strategy like for

448
00:15:06,639 --> 00:15:10,800
instance simon is hiding

449
00:15:08,240 --> 00:15:12,399
you want to find simon and then all the

450
00:15:10,800 --> 00:15:14,000
larrys can swarm out and have some

451
00:15:12,399 --> 00:15:15,360
object detection and try to find simon

452
00:15:14,000 --> 00:15:19,360
and if they found him they

453
00:15:15,360 --> 00:15:21,680
scream or blink or whatever so

454
00:15:19,360 --> 00:15:23,600
and here are some ideas which i came up

455
00:15:21,680 --> 00:15:25,599
with we could realize together so

456
00:15:23,600 --> 00:15:27,760
um if you like them or want to get

457
00:15:25,600 --> 00:15:29,440
involved just write me an email

458
00:15:27,760 --> 00:15:31,120
the first thing i spoke of was a

459
00:15:29,440 --> 00:15:34,240
microphone or array with speech

460
00:15:31,120 --> 00:15:36,399
recognition or a voice output also a

461
00:15:34,240 --> 00:15:37,279
broken virtual area environment where he

462
00:15:36,399 --> 00:15:39,839
can train

463
00:15:37,279 --> 00:15:40,880
the data with neural networks or stereo

464
00:15:39,839 --> 00:15:43,279
camera

465
00:15:40,880 --> 00:15:44,480
where you can do 3d reconstruction for

466
00:15:43,279 --> 00:15:46,480
instance larry is

467
00:15:44,480 --> 00:15:47,920
now a drone and flies through a valley

468
00:15:46,480 --> 00:15:49,440
and then you can map the valley and can

469
00:15:47,920 --> 00:15:51,120
put on your vr goals and

470
00:15:49,440 --> 00:15:54,079
take a look at the valley or object

471
00:15:51,120 --> 00:15:56,079
detection is needed to find simon

472
00:15:54,079 --> 00:15:58,560
you have multiple larry's in the swamp

473
00:15:56,079 --> 00:16:01,519
it's also i think in china they use

474
00:15:58,560 --> 00:16:02,560
drones for the aquaculture field and

475
00:16:01,519 --> 00:16:04,720
maybe

476
00:16:02,560 --> 00:16:06,239
this is also an idea we can follow up or

477
00:16:04,720 --> 00:16:08,079
win a robo race because we have a

478
00:16:06,240 --> 00:16:09,360
tracking sensor for a robo array so why

479
00:16:08,079 --> 00:16:12,638
not use it

480
00:16:09,360 --> 00:16:14,800
and now we get the question come up

481
00:16:12,639 --> 00:16:16,800
could come up if you're familiar with

482
00:16:14,800 --> 00:16:18,639
ross will israelites become the next

483
00:16:16,800 --> 00:16:19,758
cross and here the answer is definitely

484
00:16:18,639 --> 00:16:21,199
not

485
00:16:19,759 --> 00:16:24,079
if you have seen in the previous

486
00:16:21,199 --> 00:16:27,120
presentation ross has some awesome tools

487
00:16:24,079 --> 00:16:29,680
and we do not need to reinvent the wheel

488
00:16:27,120 --> 00:16:31,199
but we have to help the ros 2 community

489
00:16:29,680 --> 00:16:32,399
become even faster here we have the

490
00:16:31,199 --> 00:16:34,319
problem

491
00:16:32,399 --> 00:16:36,320
with the copies and the performance

492
00:16:34,320 --> 00:16:38,240
bottleneck and another problem let's say

493
00:16:36,320 --> 00:16:41,120
you are a developer and you develop

494
00:16:38,240 --> 00:16:42,800
developing your cool robot and you want

495
00:16:41,120 --> 00:16:44,240
to drive with him through a warehouse

496
00:16:42,800 --> 00:16:45,439
then you have to fulfill some safety

497
00:16:44,240 --> 00:16:47,199
restriction you have to stop when the

498
00:16:45,440 --> 00:16:49,519
person comes and so on

499
00:16:47,199 --> 00:16:51,199
and then normally in the old days you

500
00:16:49,519 --> 00:16:53,040
have to rewrite everything from scratch

501
00:16:51,199 --> 00:16:53,839
you have proven that it works but now we

502
00:16:53,040 --> 00:16:56,000
have to

503
00:16:53,839 --> 00:16:57,680
redo all this stuff and here the idea is

504
00:16:56,000 --> 00:17:00,399
you do not have to redo all the stuff

505
00:16:57,680 --> 00:17:02,160
we are becoming asld and with this we

506
00:17:00,399 --> 00:17:04,640
can help you to fulfill your security

507
00:17:02,160 --> 00:17:08,480
and safety requirements

508
00:17:04,640 --> 00:17:09,760
so to come with the opening question is

509
00:17:08,480 --> 00:17:11,760
a powered by ice rigs

510
00:17:09,760 --> 00:17:13,280
the first thing is if you have some kind

511
00:17:11,760 --> 00:17:15,520
of rover or some other

512
00:17:13,280 --> 00:17:16,399
ros 2 project or your own other spare

513
00:17:15,520 --> 00:17:19,199
time project we are

514
00:17:16,400 --> 00:17:20,720
connected multiple multitude of sensors

515
00:17:19,199 --> 00:17:21,679
and you have a real problem with the

516
00:17:20,720 --> 00:17:24,480
performance

517
00:17:21,679 --> 00:17:26,240
just consider switching to iso rigs we

518
00:17:24,480 --> 00:17:27,919
are pretty fast and it's our

519
00:17:26,240 --> 00:17:29,360
we strive to be the fastest in the open

520
00:17:27,919 --> 00:17:31,840
source world and we are

521
00:17:29,360 --> 00:17:33,439
at the moment at a pretty good pace to

522
00:17:31,840 --> 00:17:37,199
realize our dream

523
00:17:33,440 --> 00:17:38,880
so are there any questions

524
00:17:37,200 --> 00:17:41,440
or would you like to see a demonstration

525
00:17:38,880 --> 00:17:41,440
of larry

526
00:17:42,080 --> 00:17:46,320
one question question sure

527
00:17:49,840 --> 00:17:53,760
so um if you go back to slide 22 that

528
00:17:52,960 --> 00:17:57,760
looked like

529
00:17:53,760 --> 00:17:59,600
larry had to paul a shared memory

530
00:17:57,760 --> 00:18:02,799
region to get notified about like their

531
00:17:59,600 --> 00:18:02,799
state available is that right

532
00:18:02,960 --> 00:18:05,760
slide 22

533
00:18:07,440 --> 00:18:13,200
uh three there we go yeah

534
00:18:10,720 --> 00:18:13,760
so larry has to inquire the shared

535
00:18:13,200 --> 00:18:15,919
memory

536
00:18:13,760 --> 00:18:18,000
whether there's a packet ready for him

537
00:18:15,919 --> 00:18:21,360
right like the receiver

538
00:18:18,000 --> 00:18:24,160
has to pull basically

539
00:18:21,360 --> 00:18:24,159
yep sorry

540
00:18:25,280 --> 00:18:28,799
it's fine oh it's fine okay okay let's

541
00:18:28,480 --> 00:18:30,559
take

542
00:18:28,799 --> 00:18:32,400
even the details have used semaphores

543
00:18:30,559 --> 00:18:34,399
for instance to just do a push

544
00:18:32,400 --> 00:18:35,919
notification as someone as the

545
00:18:34,400 --> 00:18:37,520
ultrasonic sensor for instance is

546
00:18:35,919 --> 00:18:39,840
writing some new data then you can

547
00:18:37,520 --> 00:18:41,520
either try privacy if you just say is

548
00:18:39,840 --> 00:18:43,120
any data or no data or you can do a

549
00:18:41,520 --> 00:18:44,160
blocking receive and then you wait till

550
00:18:43,120 --> 00:18:46,559
you receive data

551
00:18:44,160 --> 00:18:48,640
how's that implemented with semaphores

552
00:18:46,559 --> 00:18:51,840
okay

553
00:18:48,640 --> 00:18:51,840
are there any further questions

554
00:18:52,320 --> 00:18:56,879
so you can prepare the demo maybe i

555
00:18:54,000 --> 00:18:59,600
don't know i'm gonna walk up

556
00:18:56,880 --> 00:19:00,400
who was that exactly can you pass it

557
00:18:59,600 --> 00:19:03,520
could you pass it

558
00:19:00,400 --> 00:19:03,520
it's the microphone of course

559
00:19:05,440 --> 00:19:08,880
can you explain again what is the

560
00:19:07,360 --> 00:19:12,320
relationship between

561
00:19:08,880 --> 00:19:14,480
a cyclone and isorix this is a dds

562
00:19:12,320 --> 00:19:17,439
implementation

563
00:19:14,480 --> 00:19:18,960
so um basically um no isorix is not in

564
00:19:17,440 --> 00:19:22,720
dds implementation

565
00:19:18,960 --> 00:19:25,679
um but we're planning a partnership and

566
00:19:22,720 --> 00:19:26,240
we just had the very first thoughts

567
00:19:25,679 --> 00:19:29,360
about

568
00:19:26,240 --> 00:19:31,360
how to combine the things and um

569
00:19:29,360 --> 00:19:33,678
we came up with a basic architecture but

570
00:19:31,360 --> 00:19:35,840
yeah that's currently in discussion so

571
00:19:33,679 --> 00:19:39,840
isaac's definitely does not it's not dds

572
00:19:35,840 --> 00:19:39,840
compliant it's not a dds middleware

573
00:19:41,440 --> 00:19:47,600
so do you support zero copy or almost

574
00:19:44,320 --> 00:19:49,360
zero copy communication between

575
00:19:47,600 --> 00:19:53,039
between computers between different

576
00:19:49,360 --> 00:19:56,080
computational units

577
00:19:53,039 --> 00:19:56,080
like with rdma

578
00:19:56,160 --> 00:20:00,559
okay um we support zero copy only

579
00:19:59,600 --> 00:20:02,559
between

580
00:20:00,559 --> 00:20:04,559
one vcu or one computer if you have for

581
00:20:02,559 --> 00:20:05,840
instance a communication between

582
00:20:04,559 --> 00:20:08,559
a multitude of computers which are

583
00:20:05,840 --> 00:20:10,000
connected things for instance via tcp ip

584
00:20:08,559 --> 00:20:11,918
i think there are some concepts to do

585
00:20:10,000 --> 00:20:13,360
some kind of serial copy but at the

586
00:20:11,919 --> 00:20:15,360
moment not

587
00:20:13,360 --> 00:20:17,760
but if there are some concepts i think

588
00:20:15,360 --> 00:20:19,439
it's feasible and then we will try to do

589
00:20:17,760 --> 00:20:21,919
it

590
00:20:19,440 --> 00:20:22,880
okay cool you've got the yeah the

591
00:20:21,919 --> 00:20:25,440
problem is

592
00:20:22,880 --> 00:20:28,000
he's not starting okay so we'll have to

593
00:20:25,440 --> 00:20:31,520
postpone that so

594
00:20:28,000 --> 00:20:33,600
sure um i had a further question so

595
00:20:31,520 --> 00:20:36,480
if you want to see it live um we can you

596
00:20:33,600 --> 00:20:36,480
can talk to us afterwards

597
00:20:46,840 --> 00:20:49,840
okay

598
00:21:00,880 --> 00:21:05,120
um so basically you should have a look

599
00:21:03,039 --> 00:21:08,559
at the sophie implementation this is our

600
00:21:05,120 --> 00:21:10,158
safely oh okay sure um so um the

601
00:21:08,559 --> 00:21:12,000
question was how is this mechanism

602
00:21:10,159 --> 00:21:15,679
exactly working if i understood it right

603
00:21:12,000 --> 00:21:16,400
um to to do this atomic communication so

604
00:21:15,679 --> 00:21:19,679
not

605
00:21:16,400 --> 00:21:19,679
how to seal the data basically

606
00:21:26,080 --> 00:21:29,918
it cannot be changed you can configure

607
00:21:27,919 --> 00:21:31,120
it whether it can but it makes no sense

608
00:21:29,919 --> 00:21:33,679
in our case

609
00:21:31,120 --> 00:21:35,120
and we do this with acls for instance we

610
00:21:33,679 --> 00:21:36,480
have a shared memory separation with a

611
00:21:35,120 --> 00:21:38,080
multitude of segments

612
00:21:36,480 --> 00:21:39,919
and then you have for the sender port i

613
00:21:38,080 --> 00:21:41,520
send a segment where you can only write

614
00:21:39,919 --> 00:21:41,919
data in it and then you have a receiver

615
00:21:41,520 --> 00:21:43,918
put

616
00:21:41,919 --> 00:21:45,120
which can map this memory and only he

617
00:21:43,919 --> 00:21:47,120
can read it

618
00:21:45,120 --> 00:21:48,158
and therefore we have a separation of

619
00:21:47,120 --> 00:21:50,239
concern and

620
00:21:48,159 --> 00:21:52,480
i've met also safety standard in this

621
00:21:50,240 --> 00:21:52,480
case

622
00:21:54,240 --> 00:21:57,679
the ceiling he was talking about is a

623
00:21:56,840 --> 00:22:01,360
feature of

624
00:21:57,679 --> 00:22:03,760
memory fds and linux where you can

625
00:22:01,360 --> 00:22:05,360
write to attack the buffer after you

626
00:22:03,760 --> 00:22:09,200
push it off to the receiver

627
00:22:05,360 --> 00:22:13,039
so the receivers have a guarantee that

628
00:22:09,200 --> 00:22:13,039
the writer won't change the

629
00:22:13,760 --> 00:22:17,520
yeah yeah exactly but the problem is we

630
00:22:15,679 --> 00:22:19,039
have to support qnx and kunix doesn't

631
00:22:17,520 --> 00:22:21,280
support this

632
00:22:19,039 --> 00:22:24,720
okay yeah so we want to be posix

633
00:22:21,280 --> 00:22:24,720
compliant or at least we're trying

634
00:22:30,799 --> 00:22:40,799
thanks um do you support overwriting

635
00:22:35,200 --> 00:22:43,520
data in case a consumer is not present

636
00:22:40,799 --> 00:22:45,039
imagine a producer needing to overwrite

637
00:22:43,520 --> 00:22:46,799
data repeatedly

638
00:22:45,039 --> 00:22:49,200
and then the consumer connecting and

639
00:22:46,799 --> 00:22:52,400
consuming whatever data is about

640
00:22:49,200 --> 00:22:54,320
okay let's uh you ask

641
00:22:52,400 --> 00:22:56,080
your question was uh if you are super

642
00:22:54,320 --> 00:22:57,439
supporting over rating and this means

643
00:22:56,080 --> 00:22:58,158
you are only interested in the newest

644
00:22:57,440 --> 00:23:00,400
data and not

645
00:22:58,159 --> 00:23:02,240
the old one from five years ago and yes

646
00:23:00,400 --> 00:23:02,880
we do this it's our safely overflowing

647
00:23:02,240 --> 00:23:05,039
fifo

648
00:23:02,880 --> 00:23:08,640
which takes a lot of time to implement

649
00:23:05,039 --> 00:23:13,280
this thing and yes we do

650
00:23:08,640 --> 00:23:16,159
so you mentioned that you are aiming at

651
00:23:13,280 --> 00:23:17,120
safety quality which will satisfy aclg

652
00:23:16,159 --> 00:23:21,039
safety level

653
00:23:17,120 --> 00:23:24,000
uh the highest safety level in iso 26262

654
00:23:21,039 --> 00:23:25,919
and my question is are you going to

655
00:23:24,000 --> 00:23:27,039
provide some kind of safety argument

656
00:23:25,919 --> 00:23:28,400
about your code about your

657
00:23:27,039 --> 00:23:31,520
implementation

658
00:23:28,400 --> 00:23:34,240
so that the users of your

659
00:23:31,520 --> 00:23:36,000
library could just plug it in and rely

660
00:23:34,240 --> 00:23:38,159
on

661
00:23:36,000 --> 00:23:39,600
whatever you have written yeah this is

662
00:23:38,159 --> 00:23:42,400
currently under discussion so

663
00:23:39,600 --> 00:23:44,080
um we really don't know really yet how

664
00:23:42,400 --> 00:23:46,400
this things will work out there

665
00:23:44,080 --> 00:23:47,279
but um probably if you are interested

666
00:23:46,400 --> 00:23:49,840
you can talk to

667
00:23:47,279 --> 00:23:51,440
us afterwards yeah sure yeah i think

668
00:23:49,840 --> 00:23:52,959
you're also here a newcomer we are i

669
00:23:51,440 --> 00:23:54,880
think one of the first projects we are

670
00:23:52,960 --> 00:23:56,159
going open source and developing sld

671
00:23:54,880 --> 00:23:59,039
software open source

672
00:23:56,159 --> 00:23:59,520
we have processes but they have to we

673
00:23:59,039 --> 00:24:01,360
have to

674
00:23:59,520 --> 00:24:03,360
gain experience how to handle this for

675
00:24:01,360 --> 00:24:04,639
instance developer have a crazy cool

676
00:24:03,360 --> 00:24:06,559
feature we want to have it

677
00:24:04,640 --> 00:24:08,480
you just make a pull request yeah it's

678
00:24:06,559 --> 00:24:10,480
cool we don't have this in a car

679
00:24:08,480 --> 00:24:12,159
and you have to fulfill all the whole

680
00:24:10,480 --> 00:24:14,320
process to make it sld

681
00:24:12,159 --> 00:24:16,159
and this is contains a lot of reuse like

682
00:24:14,320 --> 00:24:18,799
requirements writing and so on

683
00:24:16,159 --> 00:24:19,360
and we have to figure out to realize

684
00:24:18,799 --> 00:24:22,320
this

685
00:24:19,360 --> 00:24:23,918
um so also if you have suggestions or um

686
00:24:22,320 --> 00:24:25,200
a similar project that was planning

687
00:24:23,919 --> 00:24:27,440
something like this

688
00:24:25,200 --> 00:24:29,840
come talk to us here yeah i'm swirling

689
00:24:27,440 --> 00:24:32,850
around here just talk to me

690
00:24:29,840 --> 00:24:43,209
so thank you very much that's very

691
00:24:32,850 --> 00:24:43,209
[Applause]

692
00:24:44,840 --> 00:24:47,840
interesting

