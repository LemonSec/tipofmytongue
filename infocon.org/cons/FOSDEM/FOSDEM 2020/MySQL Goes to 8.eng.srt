1
00:00:07,520 --> 00:00:11,759
please

2
00:00:08,240 --> 00:00:14,719
welcome mr gair adelsbic

3
00:00:11,759 --> 00:00:15,360
that will talk about my sequel to the

4
00:00:14,719 --> 00:00:19,759
eighth

5
00:00:15,360 --> 00:00:19,759
version thank you

6
00:00:20,880 --> 00:00:28,479
yes yes um can you hear me yeah it works

7
00:00:25,359 --> 00:00:31,359
so um i'm there hey lozvik i'm

8
00:00:28,480 --> 00:00:32,800
living in norway i'm norwegian i've been

9
00:00:31,359 --> 00:00:36,239
working

10
00:00:32,800 --> 00:00:37,680
with mysql for like 12 years last 10

11
00:00:36,239 --> 00:00:41,599
years i've been heading

12
00:00:37,680 --> 00:00:46,160
the mysql development and maintenance

13
00:00:41,600 --> 00:00:49,200
for 10 years now i work for oracle

14
00:00:46,160 --> 00:00:54,239
so that's kind of the facts um so

15
00:00:49,200 --> 00:00:54,239
anyone not heard about mysql whatsoever

16
00:00:54,320 --> 00:00:59,840
okay none good it's a good start

17
00:01:00,559 --> 00:01:04,720
so anyway i just want to recap the kind

18
00:01:03,199 --> 00:01:07,759
of basic

19
00:01:04,720 --> 00:01:10,000
mysql in a nutshell um

20
00:01:07,760 --> 00:01:11,200
mysql is an open source relational

21
00:01:10,000 --> 00:01:14,400
database

22
00:01:11,200 --> 00:01:16,720
it's fully transactional with acid it's

23
00:01:14,400 --> 00:01:18,400
based on or run on top of the innodb

24
00:01:16,720 --> 00:01:22,000
storage engine

25
00:01:18,400 --> 00:01:27,119
which is a textbook implementation of a

26
00:01:22,000 --> 00:01:29,759
relational database storage engine

27
00:01:27,119 --> 00:01:32,479
historical focus of mysql has been

28
00:01:29,759 --> 00:01:34,880
online transaction processing

29
00:01:32,479 --> 00:01:37,039
transaction with low latency high

30
00:01:34,880 --> 00:01:38,240
throughput good scaling that's kind of

31
00:01:37,040 --> 00:01:41,280
the sweet spot

32
00:01:38,240 --> 00:01:43,439
of mysql

33
00:01:41,280 --> 00:01:44,799
and it's also based on a very strong

34
00:01:43,439 --> 00:01:47,039
replication story

35
00:01:44,799 --> 00:01:49,360
used for read scale out and for high

36
00:01:47,040 --> 00:01:52,240
availability

37
00:01:49,360 --> 00:01:54,000
we like to see ourselves as simple solid

38
00:01:52,240 --> 00:01:57,280
and secure

39
00:01:54,000 --> 00:02:01,680
it's easy to use and it's proven

40
00:01:57,280 --> 00:02:05,200
at scale users on mysql

41
00:02:01,680 --> 00:02:07,280
are pretty much everyone but for example

42
00:02:05,200 --> 00:02:09,759
facebook twitter linkedin

43
00:02:07,280 --> 00:02:10,788
we have github here i saw we have

44
00:02:09,758 --> 00:02:12,399
booking.com

45
00:02:10,788 --> 00:02:15,839
[Music]

46
00:02:12,400 --> 00:02:19,680
youtube you name it so that's the

47
00:02:15,840 --> 00:02:19,680
user base and many more of course

48
00:02:19,760 --> 00:02:24,959
so like back in 2008 i worked for sun

49
00:02:23,760 --> 00:02:27,599
microsystems

50
00:02:24,959 --> 00:02:28,319
and i was working on the apache derby

51
00:02:27,599 --> 00:02:31,119
project

52
00:02:28,319 --> 00:02:32,000
another open source database implemented

53
00:02:31,120 --> 00:02:35,120
in java

54
00:02:32,000 --> 00:02:37,760
and specifically on the

55
00:02:35,120 --> 00:02:39,519
sun microsystems distribution called

56
00:02:37,760 --> 00:02:42,560
javadb

57
00:02:39,519 --> 00:02:45,599
and then sun microsystem acquired

58
00:02:42,560 --> 00:02:49,519
mysql the company mysql

59
00:02:45,599 --> 00:02:50,079
in 2008 and i started working on mysql8

60
00:02:49,519 --> 00:02:52,800
later

61
00:02:50,080 --> 00:02:53,599
oracle acquired certain microsystem and

62
00:02:52,800 --> 00:02:57,840
i

63
00:02:53,599 --> 00:02:59,920
that's roughly around 2010.

64
00:02:57,840 --> 00:03:02,319
so oracle has been kind of driving my

65
00:02:59,920 --> 00:03:05,040
scale now for roughly 10 years

66
00:03:02,319 --> 00:03:06,560
there has been major investments in

67
00:03:05,040 --> 00:03:09,760
re-engineering

68
00:03:06,560 --> 00:03:12,959
features quality put up

69
00:03:09,760 --> 00:03:13,679
many major releases five five five six

70
00:03:12,959 --> 00:03:17,120
five seven

71
00:03:13,680 --> 00:03:20,239
and eight oh in this time frame

72
00:03:17,120 --> 00:03:23,040
it's kind of work context

73
00:03:20,239 --> 00:03:25,360
and then i will dive into specifics

74
00:03:23,040 --> 00:03:26,560
about mysql eight which is the topic of

75
00:03:25,360 --> 00:03:30,319
this talk

76
00:03:26,560 --> 00:03:32,640
and just the one tweet we had um one

77
00:03:30,319 --> 00:03:34,640
that represent a lot of users that they

78
00:03:32,640 --> 00:03:39,599
see mysql 8 as

79
00:03:34,640 --> 00:03:39,599
light years away from the 5.x series

80
00:03:39,680 --> 00:03:44,319
and hopefully this talk will explain why

81
00:03:44,480 --> 00:03:47,920
so i have divided this talk into several

82
00:03:46,879 --> 00:03:50,959
sections the first

83
00:03:47,920 --> 00:03:51,599
i called the basics which is sql json

84
00:03:50,959 --> 00:03:53,599
gis

85
00:03:51,599 --> 00:03:54,720
character sets collation functions and

86
00:03:53,599 --> 00:03:58,839
so on what

87
00:03:54,720 --> 00:04:01,439
developers wants and see kind of

88
00:03:58,840 --> 00:04:04,640
perspective

89
00:04:01,439 --> 00:04:05,439
so one of the things that was kind of a

90
00:04:04,640 --> 00:04:08,958
little bit

91
00:04:05,439 --> 00:04:11,120
messy back 10 years ago with mysql was

92
00:04:08,959 --> 00:04:12,720
the optimizer

93
00:04:11,120 --> 00:04:14,560
so it was kind of a little bit of a

94
00:04:12,720 --> 00:04:16,079
spaghetti things happen all over the

95
00:04:14,560 --> 00:04:18,079
place and it was

96
00:04:16,079 --> 00:04:19,519
a little bit hard to both maintain and

97
00:04:18,079 --> 00:04:22,960
and to

98
00:04:19,519 --> 00:04:25,360
add new features to it so over the last

99
00:04:22,960 --> 00:04:27,280
10 years we have spent significant time

100
00:04:25,360 --> 00:04:30,800
in re-engineering

101
00:04:27,280 --> 00:04:32,559
the optimizer and we are at least now at

102
00:04:30,800 --> 00:04:35,759
the point where we feel that these

103
00:04:32,560 --> 00:04:36,960
four main phases of the textbook sql

104
00:04:35,759 --> 00:04:41,120
optimizer

105
00:04:36,960 --> 00:04:43,680
have now been established and is stable

106
00:04:41,120 --> 00:04:44,639
so you have the parsing step where you

107
00:04:43,680 --> 00:04:48,000
actually parse

108
00:04:44,639 --> 00:04:49,520
the sql statement you generate an

109
00:04:48,000 --> 00:04:51,120
abstract syntax tree

110
00:04:49,520 --> 00:04:52,639
you have the prepare phase where you

111
00:04:51,120 --> 00:04:55,040
resolve types

112
00:04:52,639 --> 00:04:57,680
do simple transformations that are not

113
00:04:55,040 --> 00:05:00,080
cost-based

114
00:04:57,680 --> 00:05:00,080
oops

115
00:05:04,720 --> 00:05:10,080
and you generate a logical plan

116
00:05:07,759 --> 00:05:12,160
and then you have the based range

117
00:05:10,080 --> 00:05:14,400
optimize and enjoying optimizer and

118
00:05:12,160 --> 00:05:16,800
which generate the physical plan

119
00:05:14,400 --> 00:05:18,638
and then you have the execution phase

120
00:05:16,800 --> 00:05:22,560
where we just re-engineered

121
00:05:18,639 --> 00:05:24,800
just a few like releases ago

122
00:05:22,560 --> 00:05:27,280
where we actually changed the execution

123
00:05:24,800 --> 00:05:28,960
model in mysql consolidated various way

124
00:05:27,280 --> 00:05:32,239
of executing uh

125
00:05:28,960 --> 00:05:33,359
plans into one the based on the volcano

126
00:05:32,240 --> 00:05:35,520
model

127
00:05:33,360 --> 00:05:37,520
which is also used by many other

128
00:05:35,520 --> 00:05:40,880
database systems

129
00:05:37,520 --> 00:05:42,639
and producing the result set so this has

130
00:05:40,880 --> 00:05:45,520
been a major re-engineering effort for

131
00:05:42,639 --> 00:05:45,520
over 10 years

132
00:05:47,360 --> 00:05:53,840
there is a hank here

133
00:05:55,280 --> 00:06:04,159
sorry about that my computer just

134
00:05:58,319 --> 00:06:04,160
hanged so i don't know how to get out of

135
00:06:04,840 --> 00:06:09,198
this

136
00:06:06,639 --> 00:06:09,199
there we go

137
00:06:10,960 --> 00:06:14,000
so one example uh which in the cost

138
00:06:13,440 --> 00:06:16,639
based

139
00:06:14,000 --> 00:06:18,080
the planning phase we have implemented

140
00:06:16,639 --> 00:06:21,600
histograms

141
00:06:18,080 --> 00:06:23,840
this is needed or beneficial to the

142
00:06:21,600 --> 00:06:27,600
optimizer to know the distribution

143
00:06:23,840 --> 00:06:29,758
on on values in various table columns

144
00:06:27,600 --> 00:06:32,840
so that the optimizer can make better

145
00:06:29,759 --> 00:06:35,759
decisions specifically about join

146
00:06:32,840 --> 00:06:37,440
sequences today

147
00:06:35,759 --> 00:06:39,440
we need you need to explicitly

148
00:06:37,440 --> 00:06:42,639
generalize generate

149
00:06:39,440 --> 00:06:45,680
or write analyze table update histogram

150
00:06:42,639 --> 00:06:46,560
manually it is fairly lightweight

151
00:06:45,680 --> 00:06:49,120
because we have

152
00:06:46,560 --> 00:06:50,639
sampling so you go in and sample you

153
00:06:49,120 --> 00:06:54,639
don't need anymore to

154
00:06:50,639 --> 00:06:57,680
do the complete table scan here

155
00:06:54,639 --> 00:07:00,319
we are also now discussing how to auth

156
00:06:57,680 --> 00:07:01,919
to always generate histograms on all

157
00:07:00,319 --> 00:07:02,560
tables so this information will be

158
00:07:01,919 --> 00:07:05,680
always

159
00:07:02,560 --> 00:07:08,800
available to

160
00:07:05,680 --> 00:07:10,720
to the optimizer

161
00:07:08,800 --> 00:07:13,280
another thing we did this is more about

162
00:07:10,720 --> 00:07:16,800
the iterator executed a new execution

163
00:07:13,280 --> 00:07:17,359
and we implemented this uh iterated

164
00:07:16,800 --> 00:07:20,880
trees

165
00:07:17,360 --> 00:07:23,360
based on the volcano model uh

166
00:07:20,880 --> 00:07:25,120
which is an abstraction of any operation

167
00:07:23,360 --> 00:07:27,520
and the tree of so

168
00:07:25,120 --> 00:07:28,400
you ask the first the top level node get

169
00:07:27,520 --> 00:07:31,919
me a row

170
00:07:28,400 --> 00:07:35,758
and it then will do the calls

171
00:07:31,919 --> 00:07:37,840
down the hierarchy and return a row

172
00:07:35,759 --> 00:07:40,400
for any type of operation so this is

173
00:07:37,840 --> 00:07:44,560
pretty standard way of doing

174
00:07:40,400 --> 00:07:46,960
execution in an sql database

175
00:07:44,560 --> 00:07:47,599
so in this basis we implemented hash

176
00:07:46,960 --> 00:07:50,318
join

177
00:07:47,599 --> 00:07:52,639
which is just another iterator in this

178
00:07:50,319 --> 00:07:52,639
model

179
00:07:52,800 --> 00:07:58,879
and we replacing the historical mysql

180
00:07:56,800 --> 00:08:02,479
block nested loop

181
00:07:58,879 --> 00:08:05,360
method with hash join we do it

182
00:08:02,479 --> 00:08:05,919
in memory if possible and we spill to

183
00:08:05,360 --> 00:08:09,440
disk

184
00:08:05,919 --> 00:08:09,440
if necessary

185
00:08:10,080 --> 00:08:14,240
so it's used for inner equi-joints in

186
00:08:12,800 --> 00:08:17,199
8018

187
00:08:14,240 --> 00:08:19,039
and the next release we will release a

188
00:08:17,199 --> 00:08:20,800
couple of months from now

189
00:08:19,039 --> 00:08:23,440
we use it everywhere where we

190
00:08:20,800 --> 00:08:27,840
historically used block nested loop

191
00:08:23,440 --> 00:08:27,840
and it will replace block nested loop

192
00:08:28,000 --> 00:08:31,280
the main benefit here is performance in

193
00:08:30,879 --> 00:08:34,080
many

194
00:08:31,280 --> 00:08:35,439
cases so each a hash join is much more

195
00:08:34,080 --> 00:08:38,800
performant than

196
00:08:35,440 --> 00:08:40,800
a block nest loop in the worst case they

197
00:08:38,799 --> 00:08:43,199
are equal but in most cases ashjoin is

198
00:08:40,799 --> 00:08:43,199
better

199
00:08:44,959 --> 00:08:49,920
on top of that we implemented explain

200
00:08:47,680 --> 00:08:54,000
analyze

201
00:08:49,920 --> 00:08:55,120
and so this we did just by wrapping the

202
00:08:54,000 --> 00:08:59,120
execution tree

203
00:08:55,120 --> 00:08:59,120
with timing iterators

204
00:08:59,680 --> 00:09:06,079
so explain analyze is essentially

205
00:09:02,800 --> 00:09:06,079
you you

206
00:09:07,279 --> 00:09:11,680
in addition to to showing the the um

207
00:09:10,160 --> 00:09:13,439
query plan you also show

208
00:09:11,680 --> 00:09:15,920
you're also executing the query and you

209
00:09:13,440 --> 00:09:17,760
give timing information and count on how

210
00:09:15,920 --> 00:09:20,640
much time you spend how many

211
00:09:17,760 --> 00:09:21,200
times you iterated in the various on the

212
00:09:20,640 --> 00:09:24,959
various

213
00:09:21,200 --> 00:09:27,519
levels there is an example here

214
00:09:24,959 --> 00:09:27,518
down below

215
00:09:29,519 --> 00:09:34,720
another big thing about 80 is that we

216
00:09:32,800 --> 00:09:37,680
moved away from

217
00:09:34,720 --> 00:09:39,839
or we changed the default but not only

218
00:09:37,680 --> 00:09:43,680
changing the default to utf-8

219
00:09:39,839 --> 00:09:46,320
for byte but we invested a lot of

220
00:09:43,680 --> 00:09:48,479
energy in optimizing for now we have to

221
00:09:46,320 --> 00:09:49,680
start comparing up to four bytes all the

222
00:09:48,480 --> 00:09:52,480
time

223
00:09:49,680 --> 00:09:54,079
and that is generally slower than

224
00:09:52,480 --> 00:09:57,120
comparing one byte

225
00:09:54,080 --> 00:09:57,680
so we spent a lot of time in optimizing

226
00:09:57,120 --> 00:10:00,320
that and

227
00:09:57,680 --> 00:10:03,279
we think that we have got a very nice

228
00:10:00,320 --> 00:10:07,360
and fast implementation of

229
00:10:03,279 --> 00:10:07,360
four byte character comparisons

230
00:10:08,320 --> 00:10:11,600
um yeah this is generally because we

231
00:10:10,880 --> 00:10:14,000
felt that this

232
00:10:11,600 --> 00:10:16,079
is where the market is you need to have

233
00:10:14,000 --> 00:10:18,399
support emojis you need to support

234
00:10:16,079 --> 00:10:20,880
chinese japanese korean

235
00:10:18,399 --> 00:10:24,000
and all these sort of things we also

236
00:10:20,880 --> 00:10:28,800
moved to unicode 9-0

237
00:10:24,000 --> 00:10:31,680
collations and we support things like

238
00:10:28,800 --> 00:10:32,240
accent case and karna sensitivity or not

239
00:10:31,680 --> 00:10:35,680
sense

240
00:10:32,240 --> 00:10:35,680
any combinations really

241
00:10:37,920 --> 00:10:43,920
so when it comes to major new sql

242
00:10:41,040 --> 00:10:46,319
features in mysql 80

243
00:10:43,920 --> 00:10:47,920
one of the top one is common table

244
00:10:46,320 --> 00:10:51,200
expressions

245
00:10:47,920 --> 00:10:52,319
so called with with clause so a common

246
00:10:51,200 --> 00:10:55,839
table expression

247
00:10:52,320 --> 00:10:58,399
is just like a derived table but it's

248
00:10:55,839 --> 00:11:00,320
its declaration is put before the select

249
00:10:58,399 --> 00:11:03,440
statement rather

250
00:11:00,320 --> 00:11:03,440
after the from clause

251
00:11:03,680 --> 00:11:08,560
there are just few sketches simple

252
00:11:06,640 --> 00:11:10,959
examples shown here in red

253
00:11:08,560 --> 00:11:14,079
with a non-recursive example and a

254
00:11:10,959 --> 00:11:16,560
recursive example we support both

255
00:11:14,079 --> 00:11:17,680
and the general advantage with a common

256
00:11:16,560 --> 00:11:20,479
table expression is

257
00:11:17,680 --> 00:11:23,519
increased or better readability you can

258
00:11:20,480 --> 00:11:25,680
write your queries in a simpler form

259
00:11:23,519 --> 00:11:27,440
it doesn't get so convoluted because you

260
00:11:25,680 --> 00:11:30,479
have

261
00:11:27,440 --> 00:11:31,920
sub query in in one place

262
00:11:30,480 --> 00:11:34,160
and you don't have to repeat it and

263
00:11:31,920 --> 00:11:36,640
stuff like that

264
00:11:34,160 --> 00:11:39,519
and it can be referenced multiple time

265
00:11:36,640 --> 00:11:42,079
one cte can reference another cte

266
00:11:39,519 --> 00:11:44,480
and at least in our case we have cases

267
00:11:42,079 --> 00:11:46,880
where improved performance

268
00:11:44,480 --> 00:11:46,880
as well

269
00:11:48,560 --> 00:11:55,119
another major function from sql

270
00:11:51,680 --> 00:11:58,079
feature that we implemented in 80

271
00:11:55,120 --> 00:12:00,079
is window functions or the overclock

272
00:11:58,079 --> 00:12:02,800
overclocks

273
00:12:00,079 --> 00:12:05,199
so window function is essentially

274
00:12:02,800 --> 00:12:06,560
similar to the aggregation function like

275
00:12:05,200 --> 00:12:09,360
group by and so on

276
00:12:06,560 --> 00:12:11,680
but while aggregation functions are kind

277
00:12:09,360 --> 00:12:14,720
of

278
00:12:11,680 --> 00:12:17,040
merging many rows into one row

279
00:12:14,720 --> 00:12:20,240
a window function will keep the existing

280
00:12:17,040 --> 00:12:23,279
row in the result set but typically add

281
00:12:20,240 --> 00:12:25,680
one or more columns to each row

282
00:12:23,279 --> 00:12:28,399
based on the calculation there's a small

283
00:12:25,680 --> 00:12:28,399
example here

284
00:12:28,720 --> 00:12:32,800
if you have a table with name department

285
00:12:31,040 --> 00:12:35,920
id and salary

286
00:12:32,800 --> 00:12:37,760
you can write you can sum up the total

287
00:12:35,920 --> 00:12:39,599
salary or for each department for

288
00:12:37,760 --> 00:12:42,959
example

289
00:12:39,600 --> 00:12:46,720
by using this over partition by

290
00:12:42,959 --> 00:12:49,518
department id and you see that

291
00:12:46,720 --> 00:12:50,399
on the right hand side of the the column

292
00:12:49,519 --> 00:12:52,880
there you get

293
00:12:50,399 --> 00:12:54,240
the department total for each of the

294
00:12:52,880 --> 00:12:57,519
original node

295
00:12:54,240 --> 00:13:00,959
with the sum of the salaries for all the

296
00:12:57,519 --> 00:13:02,480
employees that work for that department

297
00:13:00,959 --> 00:13:05,040
so this is typically more in the

298
00:13:02,480 --> 00:13:07,360
analytics landscape that you will use

299
00:13:05,040 --> 00:13:10,319
this type of functionality you want to

300
00:13:07,360 --> 00:13:12,480
gen generate complex reports

301
00:13:10,320 --> 00:13:13,600
it's a fairly complete implementation

302
00:13:12,480 --> 00:13:15,680
with frames and

303
00:13:13,600 --> 00:13:21,839
and whatnot this is just a very simple

304
00:13:15,680 --> 00:13:21,839
basic example of what you can do here

305
00:13:22,399 --> 00:13:27,200
we also added support for lateral

306
00:13:24,639 --> 00:13:29,360
derived table

307
00:13:27,200 --> 00:13:31,680
some people call it the for each

308
00:13:29,360 --> 00:13:35,680
equivalent

309
00:13:31,680 --> 00:13:38,719
of sql so for each

310
00:13:35,680 --> 00:13:42,000
kind of row in table t1

311
00:13:38,720 --> 00:13:45,199
you do another query

312
00:13:42,000 --> 00:13:48,560
by referencing to the t

313
00:13:45,199 --> 00:13:51,359
t1 column it's it's

314
00:13:48,560 --> 00:13:53,359
essentially easier to write statements

315
00:13:51,360 --> 00:13:55,199
with lateral

316
00:13:53,360 --> 00:13:57,360
so it kind of simplifies things a little

317
00:13:55,199 --> 00:13:57,359
bit

318
00:13:58,320 --> 00:14:03,360
we also added functional indexes

319
00:14:01,440 --> 00:14:05,680
this is kind of plugging a historical

320
00:14:03,360 --> 00:14:08,160
hole in in mysql

321
00:14:05,680 --> 00:14:10,079
um so before that we have generated

322
00:14:08,160 --> 00:14:10,639
columns we had to generate a column and

323
00:14:10,079 --> 00:14:13,359
then

324
00:14:10,639 --> 00:14:15,279
create an index on the generated column

325
00:14:13,360 --> 00:14:18,480
now we directly support

326
00:14:15,279 --> 00:14:20,880
functional indexes so there is a simple

327
00:14:18,480 --> 00:14:24,959
example here

328
00:14:20,880 --> 00:14:28,320
with a column one plus column two

329
00:14:24,959 --> 00:14:28,319
so on just to illustrate

330
00:14:28,399 --> 00:14:34,959
another perhaps even more important

331
00:14:31,760 --> 00:14:38,480
motivation for us was our json story

332
00:14:34,959 --> 00:14:41,599
so this you can then create

333
00:14:38,480 --> 00:14:44,800
functional indexes or index

334
00:14:41,600 --> 00:14:48,079
content of your json document

335
00:14:44,800 --> 00:14:51,199
including arrays so you can index

336
00:14:48,079 --> 00:14:58,079
json arrays by a functional index

337
00:14:51,199 --> 00:15:01,279
and speeding up your json queries

338
00:14:58,079 --> 00:15:03,359
invisible indexes is just you can

339
00:15:01,279 --> 00:15:04,560
toggle the index to be visible or not

340
00:15:03,360 --> 00:15:06,880
visible

341
00:15:04,560 --> 00:15:08,160
so in both cases it's still maintained

342
00:15:06,880 --> 00:15:10,079
in the background

343
00:15:08,160 --> 00:15:12,240
but if you make it invisible the

344
00:15:10,079 --> 00:15:13,519
optimizer will not see it so it will

345
00:15:12,240 --> 00:15:16,720
make its

346
00:15:13,519 --> 00:15:20,399
plans without this index

347
00:15:16,720 --> 00:15:23,360
two use cases one is that if you want to

348
00:15:20,399 --> 00:15:25,040
perhaps you think that this index is not

349
00:15:23,360 --> 00:15:27,680
really needed

350
00:15:25,040 --> 00:15:29,519
you make it invisible while monitoring

351
00:15:27,680 --> 00:15:31,680
the system

352
00:15:29,519 --> 00:15:33,040
and everything if everything works as

353
00:15:31,680 --> 00:15:36,399
before for a

354
00:15:33,040 --> 00:15:40,079
certain period of time then you say okay

355
00:15:36,399 --> 00:15:42,160
i can drop this index

356
00:15:40,079 --> 00:15:44,319
if you see that there are problems then

357
00:15:42,160 --> 00:15:47,519
you can just make it visible again

358
00:15:44,320 --> 00:15:49,360
immediately and this

359
00:15:47,519 --> 00:15:51,360
the advantage over this approach is that

360
00:15:49,360 --> 00:15:52,399
you don't need to perhaps if you drop an

361
00:15:51,360 --> 00:15:54,959
index it can take

362
00:15:52,399 --> 00:15:56,000
hours to recreate it if you have a large

363
00:15:54,959 --> 00:15:59,040
table

364
00:15:56,000 --> 00:16:03,839
right so this is instantly

365
00:15:59,040 --> 00:16:03,839
toggling the index on and off

366
00:16:04,399 --> 00:16:08,000
or a stage rollout where you want to

367
00:16:06,959 --> 00:16:10,239
create your index

368
00:16:08,000 --> 00:16:11,920
but you won't you won't don't overnight

369
00:16:10,240 --> 00:16:13,360
for example and when you come to work

370
00:16:11,920 --> 00:16:16,160
the next day

371
00:16:13,360 --> 00:16:18,320
you want to make put it in production

372
00:16:16,160 --> 00:16:22,959
while monitoring your system

373
00:16:18,320 --> 00:16:25,680
so flexibility in that

374
00:16:22,959 --> 00:16:29,758
we also finally added check constraints

375
00:16:25,680 --> 00:16:29,758
that have been missing for for mysql

376
00:16:30,240 --> 00:16:34,000
which is has been a very commonly

377
00:16:32,800 --> 00:16:37,839
requested feature

378
00:16:34,000 --> 00:16:37,839
for us

379
00:16:39,839 --> 00:16:44,639
we can also use expression as default

380
00:16:42,480 --> 00:16:45,440
values another small hole that has been

381
00:16:44,639 --> 00:16:49,040
in mysql

382
00:16:45,440 --> 00:16:51,920
over the years this is useful for

383
00:16:49,040 --> 00:16:53,519
specifically for types without literal

384
00:16:51,920 --> 00:16:56,560
values that you want to

385
00:16:53,519 --> 00:17:00,880
initialize a json

386
00:16:56,560 --> 00:17:04,480
the json data type for example or

387
00:17:00,880 --> 00:17:07,520
unique a global unique id

388
00:17:04,480 --> 00:17:11,439
or you want to initialize

389
00:17:07,520 --> 00:17:12,720
a point or a geometry these are good use

390
00:17:11,439 --> 00:17:18,720
cases for

391
00:17:12,720 --> 00:17:20,959
expressions as default values

392
00:17:18,720 --> 00:17:22,000
uh we also implemented no weight and

393
00:17:20,959 --> 00:17:24,240
skip locked

394
00:17:22,000 --> 00:17:25,280
this is kind of more a special purpose

395
00:17:24,240 --> 00:17:27,919
thing

396
00:17:25,280 --> 00:17:30,480
but have some nice use cases this is

397
00:17:27,919 --> 00:17:32,400
about locking

398
00:17:30,480 --> 00:17:35,120
so one of the performance problems you

399
00:17:32,400 --> 00:17:37,280
can hit writing sql or using a relation

400
00:17:35,120 --> 00:17:38,879
the database is locking you're waiting

401
00:17:37,280 --> 00:17:40,720
for some

402
00:17:38,880 --> 00:17:42,160
someone else that holds a lock on a

403
00:17:40,720 --> 00:17:44,960
certain row

404
00:17:42,160 --> 00:17:46,880
and that can create bottlenecks if that

405
00:17:44,960 --> 00:17:49,280
there is a

406
00:17:46,880 --> 00:17:50,880
very many transaction or all user

407
00:17:49,280 --> 00:17:53,120
queries want to access

408
00:17:50,880 --> 00:17:56,400
exactly the same role you generate the

409
00:17:53,120 --> 00:17:56,399
bottleneck in the system

410
00:17:56,640 --> 00:17:59,840
so if you for example want to implement

411
00:17:58,960 --> 00:18:02,080
a queueing

412
00:17:59,840 --> 00:18:04,399
where you potentially just need to pick

413
00:18:02,080 --> 00:18:05,039
a job you don't care so much about which

414
00:18:04,400 --> 00:18:08,720
job

415
00:18:05,039 --> 00:18:11,679
you can do um skip lock for example

416
00:18:08,720 --> 00:18:12,160
you you search for the thing and you

417
00:18:11,679 --> 00:18:15,520
just

418
00:18:12,160 --> 00:18:17,520
get the one that you you pass those that

419
00:18:15,520 --> 00:18:20,559
are locked by others and it takes

420
00:18:17,520 --> 00:18:23,360
the first that is not not locked

421
00:18:20,559 --> 00:18:24,480
in this way you avoid contention of

422
00:18:23,360 --> 00:18:27,120
course

423
00:18:24,480 --> 00:18:27,840
can't be used for everything but this is

424
00:18:27,120 --> 00:18:30,719
is

425
00:18:27,840 --> 00:18:31,840
something that people have requested to

426
00:18:30,720 --> 00:18:34,559
to implement certain

427
00:18:31,840 --> 00:18:37,360
special functions in the system we also

428
00:18:34,559 --> 00:18:39,840
have the no weight alternative where

429
00:18:37,360 --> 00:18:41,120
i want this row if i can't get it i will

430
00:18:39,840 --> 00:18:44,320
just go back

431
00:18:41,120 --> 00:18:47,840
i won't wait for it right

432
00:18:44,320 --> 00:18:47,840
i will do something else instead

433
00:18:50,480 --> 00:18:55,600
we also added a few more functions

434
00:18:53,760 --> 00:18:57,520
for example bit operations are now

435
00:18:55,600 --> 00:18:59,918
available on all binary

436
00:18:57,520 --> 00:19:02,559
data types there were restrictions on

437
00:18:59,919 --> 00:19:02,559
that before

438
00:19:04,080 --> 00:19:08,240
we also extended regex support

439
00:19:09,679 --> 00:19:16,320
so on the json side um we

440
00:19:13,280 --> 00:19:18,000
in the gray ones here are those that are

441
00:19:16,320 --> 00:19:21,120
present also in five

442
00:19:18,000 --> 00:19:21,760
seven y scale five seven and the red

443
00:19:21,120 --> 00:19:26,320
ones are

444
00:19:21,760 --> 00:19:30,400
new ones in eight o so we added some

445
00:19:26,320 --> 00:19:32,080
very useful json functions specifically

446
00:19:30,400 --> 00:19:36,559
the json

447
00:19:32,080 --> 00:19:36,559
array aggregate and the object aggregate

448
00:19:36,880 --> 00:19:40,320
so aria aggregate an object argue

449
00:19:39,360 --> 00:19:43,840
aggregates

450
00:19:40,320 --> 00:19:46,720
is can be used to if you have

451
00:19:43,840 --> 00:19:48,959
uh sql queries and you want to create

452
00:19:46,720 --> 00:19:52,960
from the result of an sql query

453
00:19:48,960 --> 00:19:56,320
you want to create the json document

454
00:19:52,960 --> 00:19:57,600
so then you you wrap your sql in inside

455
00:19:56,320 --> 00:19:59,918
the json aggregate

456
00:19:57,600 --> 00:20:02,399
array aggregate and or a combination of

457
00:19:59,919 --> 00:20:03,520
object aggregates and you produce a json

458
00:20:02,400 --> 00:20:07,280
document

459
00:20:03,520 --> 00:20:09,840
this way and

460
00:20:07,280 --> 00:20:12,080
we also support json table which do the

461
00:20:09,840 --> 00:20:13,918
opposite

462
00:20:12,080 --> 00:20:15,439
i will explain that a little bit in the

463
00:20:13,919 --> 00:20:18,880
next

464
00:20:15,440 --> 00:20:22,400
next slide we also support no

465
00:20:18,880 --> 00:20:24,559
overlaps between arrays for example

466
00:20:22,400 --> 00:20:26,720
we have support for adding adjacent

467
00:20:24,559 --> 00:20:28,720
schema validation

468
00:20:26,720 --> 00:20:30,240
and we have a support for json array

469
00:20:28,720 --> 00:20:35,120
indexes so we can

470
00:20:30,240 --> 00:20:37,520
index json array

471
00:20:35,120 --> 00:20:40,158
so the overall json stories start to be

472
00:20:37,520 --> 00:20:40,158
pretty nice

473
00:20:40,720 --> 00:20:44,880
so json table the typical kind of thing

474
00:20:44,240 --> 00:20:48,000
that

475
00:20:44,880 --> 00:20:51,120
you can do is to create a

476
00:20:48,000 --> 00:20:53,039
sql table from a json document for it

477
00:20:51,120 --> 00:20:56,239
from a query

478
00:20:53,039 --> 00:20:58,960
so um so

479
00:20:56,240 --> 00:20:59,280
in this way you move from json into sql

480
00:20:58,960 --> 00:21:01,120
and

481
00:20:59,280 --> 00:21:02,559
with the aggregate function you can move

482
00:21:01,120 --> 00:21:06,080
from json

483
00:21:02,559 --> 00:21:08,080
to from sql to json so you can move a

484
00:21:06,080 --> 00:21:09,600
little bit back and forth between sql

485
00:21:08,080 --> 00:21:12,799
representation

486
00:21:09,600 --> 00:21:13,918
and nosql or json document store

487
00:21:12,799 --> 00:21:17,280
representation

488
00:21:13,919 --> 00:21:19,679
by using these two sets of functions

489
00:21:17,280 --> 00:21:20,559
which is quite nice if you want to

490
00:21:19,679 --> 00:21:22,480
combine

491
00:21:20,559 --> 00:21:24,799
for example a document oriented model

492
00:21:22,480 --> 00:21:27,360
with a relational model

493
00:21:24,799 --> 00:21:28,720
and you can in this way by using these

494
00:21:27,360 --> 00:21:31,840
techniques

495
00:21:28,720 --> 00:21:35,679
join two different use sql to join two

496
00:21:31,840 --> 00:21:35,678
different json documents for example

497
00:21:38,559 --> 00:21:43,039
mysql eight have also added full

498
00:21:40,799 --> 00:21:44,320
geography support that was missing from

499
00:21:43,039 --> 00:21:48,000
sql

500
00:21:44,320 --> 00:21:50,399
until now and this is essentially about

501
00:21:48,000 --> 00:21:51,520
calculating from longitude latitude

502
00:21:50,400 --> 00:21:54,640
coordinates

503
00:21:51,520 --> 00:21:57,918
on the surface of the earth you can

504
00:21:54,640 --> 00:21:58,640
do all sorts of geometry calculations

505
00:21:57,919 --> 00:22:03,280
directly

506
00:21:58,640 --> 00:22:03,280
by calling mysql functions

507
00:22:03,360 --> 00:22:07,918
you can calculate the distances on the

508
00:22:06,000 --> 00:22:11,440
surface of the earth or

509
00:22:07,919 --> 00:22:15,440
or overlap

510
00:22:11,440 --> 00:22:15,440
between areas and so on and so forth

511
00:22:22,240 --> 00:22:28,640
so but mysql eight is not

512
00:22:26,320 --> 00:22:30,639
only a relational data but although it's

513
00:22:28,640 --> 00:22:33,679
kind of mainly a relational database

514
00:22:30,640 --> 00:22:35,360
it is also a document store so you can

515
00:22:33,679 --> 00:22:38,880
decide to use mysql

516
00:22:35,360 --> 00:22:40,639
as a document store and just create

517
00:22:38,880 --> 00:22:43,280
your collection you can get your

518
00:22:40,640 --> 00:22:45,360
collection you can do crud operations

519
00:22:43,280 --> 00:22:48,080
like add fine modify remove

520
00:22:45,360 --> 00:22:50,000
directly from javascript you don't need

521
00:22:48,080 --> 00:22:51,120
to know anything about sql you don't

522
00:22:50,000 --> 00:22:54,000
need to know

523
00:22:51,120 --> 00:22:54,719
anything about schemas or databases in

524
00:22:54,000 --> 00:22:57,520
general

525
00:22:54,720 --> 00:22:58,480
you just create a collection put in a

526
00:22:57,520 --> 00:23:02,720
document

527
00:22:58,480 --> 00:23:05,280
get it out find modify and remove

528
00:23:02,720 --> 00:23:05,280
documents

529
00:23:06,480 --> 00:23:10,480
so um we also changed kind of we added

530
00:23:09,679 --> 00:23:14,400
some

531
00:23:10,480 --> 00:23:18,159
architectural components for example we

532
00:23:14,400 --> 00:23:20,960
from javascript and node.js they

533
00:23:18,159 --> 00:23:22,080
interface to x dev api there's an

534
00:23:20,960 --> 00:23:25,919
abstract interface

535
00:23:22,080 --> 00:23:28,720
that we created and we have an ogis

536
00:23:25,919 --> 00:23:28,720
implementation

537
00:23:29,200 --> 00:23:37,200
and this from this dev api

538
00:23:33,919 --> 00:23:39,120
we also talk over the x protocol which

539
00:23:37,200 --> 00:23:41,039
is an alternative protocol to the

540
00:23:39,120 --> 00:23:43,120
classic historical

541
00:23:41,039 --> 00:23:44,559
mysql protocol so now we now have two

542
00:23:43,120 --> 00:23:48,320
protocols

543
00:23:44,559 --> 00:23:52,080
we kind of expect over some years

544
00:23:48,320 --> 00:23:54,320
ahead to slowly more and more use the

545
00:23:52,080 --> 00:23:55,120
new protocol because it's asynchronous

546
00:23:54,320 --> 00:23:57,520
it has more

547
00:23:55,120 --> 00:23:59,918
nice features but we expect to support

548
00:23:57,520 --> 00:24:02,158
the old protocol for the next 10 years

549
00:23:59,919 --> 00:24:04,000
so this will be a slow thing but you can

550
00:24:02,159 --> 00:24:06,880
use this uh today

551
00:24:04,000 --> 00:24:08,799
and it will be gradually built out but

552
00:24:06,880 --> 00:24:09,120
and then on the server side of things we

553
00:24:08,799 --> 00:24:13,520
have

554
00:24:09,120 --> 00:24:16,239
a plugin x plugin so then the client

555
00:24:13,520 --> 00:24:17,360
talks to the server through this these

556
00:24:16,240 --> 00:24:20,400
layers

557
00:24:17,360 --> 00:24:24,479
and the x plugin actually translates

558
00:24:20,400 --> 00:24:26,480
the incoming crud into sql

559
00:24:24,480 --> 00:24:27,919
so from the server perspective there is

560
00:24:26,480 --> 00:24:30,960
nothing special

561
00:24:27,919 --> 00:24:34,320
here as it is no

562
00:24:30,960 --> 00:24:35,039
and it works quite nice of course we are

563
00:24:34,320 --> 00:24:37,678
then work

564
00:24:35,039 --> 00:24:38,320
we are then using our own json functions

565
00:24:37,679 --> 00:24:41,039
a lot

566
00:24:38,320 --> 00:24:43,039
on the inside so the x program kind of

567
00:24:41,039 --> 00:24:47,840
translate the crowd over to

568
00:24:43,039 --> 00:24:47,840
using json functions and sql functions

569
00:24:51,919 --> 00:24:57,039
but the document store is more than just

570
00:24:54,559 --> 00:24:57,678
technology it's also kind of it has its

571
00:24:57,039 --> 00:25:00,960
own

572
00:24:57,679 --> 00:25:04,799
documentation it has its own

573
00:25:00,960 --> 00:25:07,200
you can integrate it in ides you have uh

574
00:25:04,799 --> 00:25:09,760
yeah explaining the syntax you can use

575
00:25:07,200 --> 00:25:12,559
and so on so forth

576
00:25:09,760 --> 00:25:14,000
but at the very high level level it's

577
00:25:12,559 --> 00:25:18,559
kind of very similar to what

578
00:25:14,000 --> 00:25:18,559
you can do with mongodb today

579
00:25:21,279 --> 00:25:24,400
so then i will move over to some

580
00:25:23,600 --> 00:25:27,039
operational

581
00:25:24,400 --> 00:25:28,640
concerns so the first part is more kind

582
00:25:27,039 --> 00:25:31,120
of seen from the developer

583
00:25:28,640 --> 00:25:33,279
perspective what can i do as a

584
00:25:31,120 --> 00:25:35,279
application developer

585
00:25:33,279 --> 00:25:36,960
what kind of functions what kind of sql

586
00:25:35,279 --> 00:25:38,880
can i use and so on

587
00:25:36,960 --> 00:25:41,600
here we put the focus a little bit more

588
00:25:38,880 --> 00:25:45,279
over to the devops or to the operators

589
00:25:41,600 --> 00:25:47,439
of of the mysql database

590
00:25:45,279 --> 00:25:49,120
and which are typically interested in

591
00:25:47,440 --> 00:25:53,919
topics like securing

592
00:25:49,120 --> 00:25:53,918
monitoring managing and upgrading the

593
00:25:54,840 --> 00:26:00,158
server

594
00:25:56,799 --> 00:26:04,639
so first of all we have a theme that

595
00:26:00,159 --> 00:26:04,640
mysql 8 should be secure by default

596
00:26:05,200 --> 00:26:08,960
so when you download and install mysql

597
00:26:07,919 --> 00:26:11,200
in

598
00:26:08,960 --> 00:26:13,440
three minutes you will get an instance

599
00:26:11,200 --> 00:26:17,440
that are secure by default

600
00:26:13,440 --> 00:26:20,640
for everything so we worked here to

601
00:26:17,440 --> 00:26:22,799
minimize the attack surface

602
00:26:20,640 --> 00:26:26,640
minimize process permission minimize

603
00:26:22,799 --> 00:26:31,039
file permissions minimize privileges

604
00:26:26,640 --> 00:26:31,039
strong authentication strong encryption

605
00:26:31,679 --> 00:26:35,279
so this is called being a theme so you

606
00:26:34,159 --> 00:26:38,480
should feel safe

607
00:26:35,279 --> 00:26:40,880
download mysql start it and you will be

608
00:26:38,480 --> 00:26:40,880
secure

609
00:26:42,080 --> 00:26:46,320
a part of this we added a strong default

610
00:26:44,640 --> 00:26:48,480
authentication so we switched the

611
00:26:46,320 --> 00:26:49,039
default authentication from 5.7 to

612
00:26:48,480 --> 00:26:51,760
something

613
00:26:49,039 --> 00:26:53,279
much stronger we called we also worked a

614
00:26:51,760 --> 00:26:55,360
lot to optimize this

615
00:26:53,279 --> 00:26:56,880
so that so there is this kind of

616
00:26:55,360 --> 00:26:59,678
trade-off between speed

617
00:26:56,880 --> 00:27:01,360
and security so sometimes it requires a

618
00:26:59,679 --> 00:27:04,640
lot of work to think about

619
00:27:01,360 --> 00:27:06,639
a mechanism to to to balance right

620
00:27:04,640 --> 00:27:10,159
we think that we have got a good balance

621
00:27:06,640 --> 00:27:12,559
here on the caching chart2 password

622
00:27:10,159 --> 00:27:12,559
plug-in

623
00:27:13,200 --> 00:27:17,600
in general mysql authentication is

624
00:27:16,240 --> 00:27:19,600
pluggable so

625
00:27:17,600 --> 00:27:21,520
we can plug in other things and you can

626
00:27:19,600 --> 00:27:24,879
also integrate with

627
00:27:21,520 --> 00:27:27,760
other authentication systems by having a

628
00:27:24,880 --> 00:27:27,760
different plugin

629
00:27:28,159 --> 00:27:32,320
we also now support using the unix

630
00:27:31,520 --> 00:27:37,760
socket or

631
00:27:32,320 --> 00:27:37,760
operating system login for the server

632
00:27:38,159 --> 00:27:41,200
we have invested in our password

633
00:27:40,399 --> 00:27:44,559
management

634
00:27:41,200 --> 00:27:46,799
story so some of it exists

635
00:27:44,559 --> 00:27:50,158
kind of in 5.7 as well but it's kind of

636
00:27:46,799 --> 00:27:50,158
the whole package has now been

637
00:27:50,799 --> 00:27:54,639
completed i guess in in 8-0

638
00:27:54,720 --> 00:27:58,880
so we have password rotation policies

639
00:27:57,520 --> 00:28:02,158
and enforcement

640
00:27:58,880 --> 00:28:04,000
password history and reuse protection

641
00:28:02,159 --> 00:28:06,640
password strength evaluation and

642
00:28:04,000 --> 00:28:08,880
enforcement password generation

643
00:28:06,640 --> 00:28:09,760
we also have two password per user that

644
00:28:08,880 --> 00:28:11,840
can be quite

645
00:28:09,760 --> 00:28:14,000
quite useful in some kind of migration

646
00:28:11,840 --> 00:28:16,240
upgrade scenario where you want to

647
00:28:14,000 --> 00:28:18,000
change the password of users and

648
00:28:16,240 --> 00:28:19,520
applications

649
00:28:18,000 --> 00:28:22,080
and we have brute force attack

650
00:28:19,520 --> 00:28:22,080
protection

651
00:28:24,720 --> 00:28:28,840
80 is also quite different than earlier

652
00:28:27,279 --> 00:28:32,080
version on

653
00:28:28,840 --> 00:28:34,240
authorization specifically around roles

654
00:28:32,080 --> 00:28:35,439
so we added standard implementation of

655
00:28:34,240 --> 00:28:38,799
sql roles in

656
00:28:35,440 --> 00:28:42,640
ato we also added information schema

657
00:28:38,799 --> 00:28:45,360
standard sql information schema support

658
00:28:42,640 --> 00:28:49,039
for things like applicable role enabled

659
00:28:45,360 --> 00:28:50,879
role role grants and so on

660
00:28:49,039 --> 00:28:52,240
this is just to have a view on what kind

661
00:28:50,880 --> 00:28:55,360
of

662
00:28:52,240 --> 00:28:58,000
roles and privileges do i have right now

663
00:28:55,360 --> 00:29:00,000
we also did the privilege system much

664
00:28:58,000 --> 00:29:02,159
more fine-grained so you know i can set

665
00:29:00,000 --> 00:29:05,360
more specific privileges

666
00:29:02,159 --> 00:29:07,760
and control the privilege of the dba or

667
00:29:05,360 --> 00:29:10,320
operators much more fine-grained than

668
00:29:07,760 --> 00:29:10,320
you could

669
00:29:10,840 --> 00:29:14,639
earlier

670
00:29:12,240 --> 00:29:15,679
yeah before historically mysql had this

671
00:29:14,640 --> 00:29:19,120
super user

672
00:29:15,679 --> 00:29:21,120
privilege that if you got that you could

673
00:29:19,120 --> 00:29:24,080
do whatever you want and if you

674
00:29:21,120 --> 00:29:26,239
so you had that but then now it's you

675
00:29:24,080 --> 00:29:28,559
can have specific ones for back cap and

676
00:29:26,240 --> 00:29:28,559
so on

677
00:29:30,000 --> 00:29:35,919
another change in 80 is that we moved

678
00:29:32,799 --> 00:29:38,720
away from the historical kind of

679
00:29:35,919 --> 00:29:40,000
wolf ssl and some other things we found

680
00:29:38,720 --> 00:29:43,039
that our users really

681
00:29:40,000 --> 00:29:46,080
wanted to use openssl period

682
00:29:43,039 --> 00:29:47,840
and and we and and we then took the

683
00:29:46,080 --> 00:29:50,240
consequences

684
00:29:47,840 --> 00:29:51,439
we also decided to go with dynamic

685
00:29:50,240 --> 00:29:53,279
linking so

686
00:29:51,440 --> 00:29:54,799
when you download mysql it will use the

687
00:29:53,279 --> 00:29:57,279
open ssl that you actually

688
00:29:54,799 --> 00:29:59,279
your platform supports so it will

689
00:29:57,279 --> 00:30:02,320
depends on your platform

690
00:29:59,279 --> 00:30:05,760
um there are differences in

691
00:30:02,320 --> 00:30:09,760
let's say red hat 678 on which

692
00:30:05,760 --> 00:30:12,399
open ssl version is used there

693
00:30:09,760 --> 00:30:13,520
we also now have then support for fips

694
00:30:12,399 --> 00:30:16,639
compliance

695
00:30:13,520 --> 00:30:18,960
in this sense you can

696
00:30:16,640 --> 00:30:20,880
reconfigure certificates without

697
00:30:18,960 --> 00:30:23,760
restarting the server

698
00:30:20,880 --> 00:30:24,640
so in general our users always tell us

699
00:30:23,760 --> 00:30:26,879
that

700
00:30:24,640 --> 00:30:28,480
we don't want to stop the server for any

701
00:30:26,880 --> 00:30:31,840
type of maintenance so please

702
00:30:28,480 --> 00:30:35,360
make it dynamic all the time and we

703
00:30:31,840 --> 00:30:35,360
are slowly getting the message

704
00:30:35,679 --> 00:30:38,799
and uh this is kind of a theme that we

705
00:30:38,320 --> 00:30:41,039
have

706
00:30:38,799 --> 00:30:43,440
uh internally so this is a general

707
00:30:41,039 --> 00:30:45,520
guideline for anything we do

708
00:30:43,440 --> 00:30:46,640
if we can't do it online don't do it

709
00:30:45,520 --> 00:30:50,000
kind of thing

710
00:30:46,640 --> 00:30:51,919
because in oltp transaction system

711
00:30:50,000 --> 00:30:54,320
there is no such thing as a maintenance

712
00:30:51,919 --> 00:30:58,159
window doesn't exist

713
00:30:54,320 --> 00:30:58,158
it's always up and running period

714
00:31:01,600 --> 00:31:08,639
and we added tls 1.3 support

715
00:31:05,120 --> 00:31:11,439
and and more stronger encryption for

716
00:31:08,640 --> 00:31:11,440
data at rest

717
00:31:16,080 --> 00:31:22,879
so on the monitoring side

718
00:31:19,360 --> 00:31:26,240
um so just in mysql

719
00:31:22,880 --> 00:31:28,159
in general we have uh two type of

720
00:31:26,240 --> 00:31:30,159
kind of metadata information or

721
00:31:28,159 --> 00:31:33,440
monitoring information if you want

722
00:31:30,159 --> 00:31:34,559
there is the persistent metadata which

723
00:31:33,440 --> 00:31:37,679
is stored in

724
00:31:34,559 --> 00:31:39,200
the data dictionary that it also have a

725
00:31:37,679 --> 00:31:41,279
transactional

726
00:31:39,200 --> 00:31:43,360
data dictionary so we moved away from

727
00:31:41,279 --> 00:31:46,080
the old srm files and these things that

728
00:31:43,360 --> 00:31:47,840
happened before

729
00:31:46,080 --> 00:31:50,158
information schema tables are now

730
00:31:47,840 --> 00:31:54,480
essentially views on top of

731
00:31:50,159 --> 00:31:57,279
innodb tables dictionary tables

732
00:31:54,480 --> 00:31:58,880
and they have information of things that

733
00:31:57,279 --> 00:32:02,480
are persistent like

734
00:31:58,880 --> 00:32:04,159
table names column names and any other

735
00:32:02,480 --> 00:32:06,159
things that needs to be persistent

736
00:32:04,159 --> 00:32:07,440
and then we have performance schema

737
00:32:06,159 --> 00:32:11,760
tables

738
00:32:07,440 --> 00:32:14,559
a different storage engine which kind of

739
00:32:11,760 --> 00:32:14,960
it's a normal table is accessed over sql

740
00:32:14,559 --> 00:32:18,080
so

741
00:32:14,960 --> 00:32:18,880
in that sense it does work normally as

742
00:32:18,080 --> 00:32:20,720
the tables

743
00:32:18,880 --> 00:32:23,679
but this information is lost if you

744
00:32:20,720 --> 00:32:23,679
restart the server

745
00:32:24,159 --> 00:32:28,320
so we use this to to catch the current

746
00:32:26,840 --> 00:32:30,799
activity

747
00:32:28,320 --> 00:32:32,080
like statistic performance oriented

748
00:32:30,799 --> 00:32:36,240
measurements that

749
00:32:32,080 --> 00:32:36,240
doesn't really need to be persistent

750
00:32:37,200 --> 00:32:40,880
which also makes it very kind of

751
00:32:38,880 --> 00:32:44,720
efficient to use

752
00:32:40,880 --> 00:32:47,919
here then we have this schema which is

753
00:32:44,720 --> 00:32:49,600
a set of stored routines that are more

754
00:32:47,919 --> 00:32:51,919
task oriented

755
00:32:49,600 --> 00:32:52,639
that uses information from performance

756
00:32:51,919 --> 00:32:55,519
schema

757
00:32:52,640 --> 00:32:55,519
information scheme

758
00:32:55,760 --> 00:33:02,240
general picture so some examples of what

759
00:33:00,159 --> 00:33:05,279
we have added

760
00:33:02,240 --> 00:33:07,360
for performance schema in in 80

761
00:33:05,279 --> 00:33:08,559
this is server only we have more for

762
00:33:07,360 --> 00:33:12,000
replication i didn't

763
00:33:08,559 --> 00:33:14,158
mention this today so one

764
00:33:12,000 --> 00:33:15,600
a few popular things that we implemented

765
00:33:14,159 --> 00:33:18,559
is what is the latest

766
00:33:15,600 --> 00:33:20,158
latency distribution for a given sql

767
00:33:18,559 --> 00:33:23,200
statements

768
00:33:20,159 --> 00:33:25,760
so we have kind of monitoring over time

769
00:33:23,200 --> 00:33:26,799
and and give the distribution of the of

770
00:33:25,760 --> 00:33:30,000
the latency

771
00:33:26,799 --> 00:33:31,760
of the query so typically

772
00:33:30,000 --> 00:33:33,120
if you see that a lot of the queries

773
00:33:31,760 --> 00:33:36,158
start to

774
00:33:33,120 --> 00:33:37,360
use a lot more time you have kind of a

775
00:33:36,159 --> 00:33:39,519
problem going on

776
00:33:37,360 --> 00:33:41,519
or if more of them are in at the high

777
00:33:39,519 --> 00:33:44,799
end it's sometimes okay to say

778
00:33:41,519 --> 00:33:46,080
okay one one query did spend a lot of

779
00:33:44,799 --> 00:33:49,279
time

780
00:33:46,080 --> 00:33:53,199
but it's like this 95

781
00:33:49,279 --> 00:33:55,679
percentile uh thinking because

782
00:33:53,200 --> 00:33:57,679
but if they start to happen a lot you

783
00:33:55,679 --> 00:34:00,159
probably have a problem that you need to

784
00:33:57,679 --> 00:34:02,640
dig into

785
00:34:00,159 --> 00:34:04,799
then you have data lock so you can look

786
00:34:02,640 --> 00:34:06,000
at what user threads are waiting for

787
00:34:04,799 --> 00:34:10,159
which locks and who

788
00:34:06,000 --> 00:34:11,440
holds them so we have a full overview on

789
00:34:10,159 --> 00:34:14,240
on who is

790
00:34:11,440 --> 00:34:15,679
who is locking and who's waiting for

791
00:34:14,239 --> 00:34:17,839
locks

792
00:34:15,679 --> 00:34:19,520
so by the way i didn't mention that but

793
00:34:17,839 --> 00:34:21,599
mysql is a single

794
00:34:19,520 --> 00:34:23,359
process system a multi-threaded single

795
00:34:21,599 --> 00:34:25,520
process system so

796
00:34:23,359 --> 00:34:28,239
mysql database is one process called

797
00:34:25,520 --> 00:34:28,239
mysqld

798
00:34:30,000 --> 00:34:34,719
sql errors so which arrows have been

799
00:34:32,800 --> 00:34:36,480
sent back to clients and statistics

800
00:34:34,719 --> 00:34:38,879
about those errors this is

801
00:34:36,480 --> 00:34:42,000
kind of very useful to monitor for

802
00:34:38,879 --> 00:34:43,759
monitoring purpose by dbas

803
00:34:42,000 --> 00:34:45,918
so when did you send an error how often

804
00:34:43,760 --> 00:34:47,520
did it go also we can look at

805
00:34:45,918 --> 00:34:50,560
configuration variable what is the

806
00:34:47,520 --> 00:34:54,639
current value of the configuration value

807
00:34:50,560 --> 00:34:54,639
who set it when was it set

808
00:34:57,119 --> 00:35:03,040
and on management so a major

809
00:35:00,320 --> 00:35:05,680
theme for us in general and we

810
00:35:03,040 --> 00:35:08,160
implemented a lot here in 80

811
00:35:05,680 --> 00:35:09,759
is to eliminate the need to access the

812
00:35:08,160 --> 00:35:12,000
host machine

813
00:35:09,760 --> 00:35:14,480
this is for environments where you

814
00:35:12,000 --> 00:35:16,160
typically don't have access to the

815
00:35:14,480 --> 00:35:17,760
host machine there can be some cloud

816
00:35:16,160 --> 00:35:20,160
environments it can be

817
00:35:17,760 --> 00:35:22,000
docker environments and so on but our

818
00:35:20,160 --> 00:35:22,799
general goal here is that you should not

819
00:35:22,000 --> 00:35:26,720
really

820
00:35:22,800 --> 00:35:29,520
need to log in to the machine

821
00:35:26,720 --> 00:35:30,560
and you should not need to restart the

822
00:35:29,520 --> 00:35:32,880
server

823
00:35:30,560 --> 00:35:34,960
these are kind of the two things so this

824
00:35:32,880 --> 00:35:36,000
has been a lot of focus for us to to say

825
00:35:34,960 --> 00:35:39,119
that

826
00:35:36,000 --> 00:35:39,920
to fix these things um and i think we

827
00:35:39,119 --> 00:35:42,000
have

828
00:35:39,920 --> 00:35:45,839
largely done it we have a few things

829
00:35:42,000 --> 00:35:45,839
left but we are working on it still

830
00:35:46,240 --> 00:35:50,799
mysql i've always had something called

831
00:35:48,079 --> 00:35:50,800
set persist

832
00:35:51,119 --> 00:35:54,800
sorry set global as you can set the

833
00:35:53,040 --> 00:35:56,560
global variable but it was not

834
00:35:54,800 --> 00:35:57,200
persistent so if you restarted the

835
00:35:56,560 --> 00:36:00,640
server

836
00:35:57,200 --> 00:36:03,919
the value was lost now we can do

837
00:36:00,640 --> 00:36:07,279
set persist a config variable value

838
00:36:03,920 --> 00:36:09,200
and this will be stored and

839
00:36:07,280 --> 00:36:10,960
if you restart the server at some point

840
00:36:09,200 --> 00:36:15,040
it will pick up the same

841
00:36:10,960 --> 00:36:15,040
you can also restart the server remotely

842
00:36:15,119 --> 00:36:18,400
and you can auto upgrade the system now

843
00:36:16,880 --> 00:36:21,119
has logic to

844
00:36:18,400 --> 00:36:22,640
understand that i'm a new server version

845
00:36:21,119 --> 00:36:24,400
reading an old image

846
00:36:22,640 --> 00:36:26,640
and based on the version information on

847
00:36:24,400 --> 00:36:29,200
the in the process itself and on disk he

848
00:36:26,640 --> 00:36:31,920
makes decision about what to do

849
00:36:29,200 --> 00:36:31,919
on the upgrade

850
00:36:33,839 --> 00:36:40,240
so try to be fast here and

851
00:36:37,680 --> 00:36:41,200
my scale is more than kind of the mysql

852
00:36:40,240 --> 00:36:44,240
server itself

853
00:36:41,200 --> 00:36:46,078
we try to think in terms of

854
00:36:44,240 --> 00:36:48,160
one product strategy where we have

855
00:36:46,079 --> 00:36:51,200
components that should fit together

856
00:36:48,160 --> 00:36:53,118
ship together work together and so on an

857
00:36:51,200 --> 00:36:54,000
important development here is that we

858
00:36:53,119 --> 00:36:57,440
have

859
00:36:54,000 --> 00:37:00,560
the shell mysql shell so

860
00:36:57,440 --> 00:37:03,839
our slogan here is ada that is

861
00:37:00,560 --> 00:37:06,000
the devop ada is smart ada is using the

862
00:37:03,839 --> 00:37:06,640
mysql shell that's kind of how we want

863
00:37:06,000 --> 00:37:10,640
to

864
00:37:06,640 --> 00:37:11,520
see the mysql shell so the mysql shell

865
00:37:10,640 --> 00:37:14,400
is modern

866
00:37:11,520 --> 00:37:15,359
it's have colorful prompt themes auto

867
00:37:14,400 --> 00:37:17,440
completion

868
00:37:15,359 --> 00:37:19,119
syntax highlighting context sensitive

869
00:37:17,440 --> 00:37:22,320
help command history page

870
00:37:19,119 --> 00:37:25,520
less more output formats and so on

871
00:37:22,320 --> 00:37:26,960
it's flexible you can run it in s in sql

872
00:37:25,520 --> 00:37:28,960
mode classic mode

873
00:37:26,960 --> 00:37:30,800
you can run it in javascript mode and

874
00:37:28,960 --> 00:37:31,200
you can run it in python mode so if

875
00:37:30,800 --> 00:37:33,599
you're

876
00:37:31,200 --> 00:37:35,279
for example a python developer you can

877
00:37:33,599 --> 00:37:38,880
just write whatever you want to do

878
00:37:35,280 --> 00:37:41,040
in python there it can run interactive

879
00:37:38,880 --> 00:37:43,440
or in batch

880
00:37:41,040 --> 00:37:44,240
can be used as a sql client it can be

881
00:37:43,440 --> 00:37:47,119
used

882
00:37:44,240 --> 00:37:49,200
to write document store applications

883
00:37:47,119 --> 00:37:52,960
with crud

884
00:37:49,200 --> 00:37:53,759
it can do cluster admin and replica set

885
00:37:52,960 --> 00:37:57,040
admin

886
00:37:53,760 --> 00:38:00,480
that we'll speak about soon it's

887
00:37:57,040 --> 00:38:03,040
it's extensible so we both ship function

888
00:38:00,480 --> 00:38:05,040
utility functions developed by us we

889
00:38:03,040 --> 00:38:07,520
have a reporting frame where we can do

890
00:38:05,040 --> 00:38:08,560
show and watch on sql statements for

891
00:38:07,520 --> 00:38:12,160
example over

892
00:38:08,560 --> 00:38:19,839
perform a schema you can write your own

893
00:38:12,160 --> 00:38:19,839
plugins in javascript and or python

894
00:38:20,640 --> 00:38:27,040
moving on to clone so um

895
00:38:23,760 --> 00:38:27,680
clone is essentially to to to if i have

896
00:38:27,040 --> 00:38:30,240
one

897
00:38:27,680 --> 00:38:32,319
master or one server and i want to have

898
00:38:30,240 --> 00:38:35,359
a read scale out replica

899
00:38:32,320 --> 00:38:36,720
a new one that doesn't exist before i

900
00:38:35,359 --> 00:38:38,480
can more or less

901
00:38:36,720 --> 00:38:40,319
i will show you the steps but more or

902
00:38:38,480 --> 00:38:43,520
less i can tell

903
00:38:40,320 --> 00:38:44,160
the new i started a new replica and i

904
00:38:43,520 --> 00:38:46,880
can tell

905
00:38:44,160 --> 00:38:49,040
get your data from this guy and then

906
00:38:46,880 --> 00:38:52,960
they set up a stream communication

907
00:38:49,040 --> 00:38:56,079
and it transfer all the state from the

908
00:38:52,960 --> 00:38:59,119
donor over to the recipient

909
00:38:56,079 --> 00:39:02,079
over the network roughly at the speed of

910
00:38:59,119 --> 00:39:05,599
the network bandwidth in that case

911
00:39:02,079 --> 00:39:07,760
so it's kind of simplify instead of kind

912
00:39:05,599 --> 00:39:09,520
of creating a backup moving it over

913
00:39:07,760 --> 00:39:10,960
rolling in the backup and so on there

914
00:39:09,520 --> 00:39:15,040
are manual steps there

915
00:39:10,960 --> 00:39:17,359
it kind of gets you fast provisioning

916
00:39:15,040 --> 00:39:19,599
and in inno db cluster all this is

917
00:39:17,359 --> 00:39:22,640
automated

918
00:39:19,599 --> 00:39:23,599
so clone directly from sql i need a new

919
00:39:22,640 --> 00:39:26,879
replica

920
00:39:23,599 --> 00:39:29,520
i do install clone

921
00:39:26,880 --> 00:39:30,480
i create a use clone user or a clone

922
00:39:29,520 --> 00:39:33,599
password

923
00:39:30,480 --> 00:39:34,160
and i grant privileges to that i do the

924
00:39:33,599 --> 00:39:36,560
same

925
00:39:34,160 --> 00:39:37,440
on the recipient the only difference is

926
00:39:36,560 --> 00:39:41,440
that i also

927
00:39:37,440 --> 00:39:42,000
currently need a donor list this is an

928
00:39:41,440 --> 00:39:44,960
additional

929
00:39:42,000 --> 00:39:44,960
security step

930
00:39:45,680 --> 00:39:49,118
and then i simply say clone instance

931
00:39:48,240 --> 00:39:53,839
from

932
00:39:49,119 --> 00:39:53,839
address identified by password

933
00:39:54,400 --> 00:40:00,320
i can check status uh by

934
00:39:57,760 --> 00:40:01,280
looking up in performance schema so in

935
00:40:00,320 --> 00:40:03,040
progress what

936
00:40:01,280 --> 00:40:04,560
started it's been running for four

937
00:40:03,040 --> 00:40:06,880
minutes

938
00:40:04,560 --> 00:40:08,880
i can also check on each of the stages

939
00:40:06,880 --> 00:40:09,599
there is a file copy stage of page

940
00:40:08,880 --> 00:40:13,599
copies stay

941
00:40:09,599 --> 00:40:18,160
read redo log copy stage file syncing

942
00:40:13,599 --> 00:40:18,160
restart and a recovery phase

943
00:40:18,960 --> 00:40:22,240
so i will briefly show you in adb

944
00:40:21,359 --> 00:40:25,440
cluster or

945
00:40:22,240 --> 00:40:27,598
explain what it is so

946
00:40:25,440 --> 00:40:29,119
innodb cluster is a high availability

947
00:40:27,599 --> 00:40:32,240
solution

948
00:40:29,119 --> 00:40:34,720
so we have it based on group replication

949
00:40:32,240 --> 00:40:37,520
in bottom so there's a group replication

950
00:40:34,720 --> 00:40:40,078
implementation

951
00:40:37,520 --> 00:40:41,680
uh then there is a router that can run

952
00:40:40,079 --> 00:40:45,040
traffic to the right node

953
00:40:41,680 --> 00:40:47,440
in the group and then you have

954
00:40:45,040 --> 00:40:48,400
the applications of course talking

955
00:40:47,440 --> 00:40:51,440
sending

956
00:40:48,400 --> 00:40:54,560
sql through the router to to the nodes

957
00:40:51,440 --> 00:40:58,160
and you have the mysql shell to

958
00:40:54,560 --> 00:41:01,599
manage and monitor the whole thing

959
00:40:58,160 --> 00:41:04,160
so group replication is

960
00:41:01,599 --> 00:41:05,520
is kind of a built-in solution that

961
00:41:04,160 --> 00:41:08,078
covers small

962
00:41:05,520 --> 00:41:10,560
i would say all things that are needed

963
00:41:08,079 --> 00:41:13,040
in ha setup

964
00:41:10,560 --> 00:41:14,720
it's based on pak source uh

965
00:41:13,040 --> 00:41:17,440
implementation similar

966
00:41:14,720 --> 00:41:19,359
a lot similar to the sqlite talk that

967
00:41:17,440 --> 00:41:23,280
were earlier here today

968
00:41:19,359 --> 00:41:25,440
in the basic setup so you can

969
00:41:23,280 --> 00:41:26,880
do things like initialize the group

970
00:41:25,440 --> 00:41:28,960
detect node failure it

971
00:41:26,880 --> 00:41:30,720
automatically detects node failure it

972
00:41:28,960 --> 00:41:32,599
re-establish a group

973
00:41:30,720 --> 00:41:34,560
it elects a new primary if you are a

974
00:41:32,599 --> 00:41:35,680
multi-primary not a single primary mode

975
00:41:34,560 --> 00:41:38,960
you can also run in

976
00:41:35,680 --> 00:41:41,680
multi-primary mode you recover from

977
00:41:38,960 --> 00:41:43,359
failures you can rejoin to group

978
00:41:41,680 --> 00:41:45,359
you can grow and shrink the group you

979
00:41:43,359 --> 00:41:48,240
can provision new

980
00:41:45,359 --> 00:41:49,119
members in the group you have topology

981
00:41:48,240 --> 00:41:51,919
information

982
00:41:49,119 --> 00:41:54,240
in the group that the router can ask for

983
00:41:51,920 --> 00:41:57,200
what is the current topology

984
00:41:54,240 --> 00:41:57,200
so on and so forth

985
00:41:58,640 --> 00:42:03,598
the replication technology is much of it

986
00:42:02,079 --> 00:42:06,240
centered around this new group

987
00:42:03,599 --> 00:42:09,599
replication the new developments in nato

988
00:42:06,240 --> 00:42:12,799
we also have a player

989
00:42:09,599 --> 00:42:14,400
right set so it's the slaves in master

990
00:42:12,800 --> 00:42:17,440
slave communication are much

991
00:42:14,400 --> 00:42:19,599
can do more parallel work on the

992
00:42:17,440 --> 00:42:21,280
insert or when it gets the replication

993
00:42:19,599 --> 00:42:24,480
stream over to the slave

994
00:42:21,280 --> 00:42:25,280
it can execute a lot more in parallel

995
00:42:24,480 --> 00:42:28,880
that we could

996
00:42:25,280 --> 00:42:31,040
earlier we also base our

997
00:42:28,880 --> 00:42:32,880
we also know based on the global

998
00:42:31,040 --> 00:42:34,960
transaction identifiers

999
00:42:32,880 --> 00:42:37,680
which have the advantage that there is a

1000
00:42:34,960 --> 00:42:40,880
for each transaction it has a global id

1001
00:42:37,680 --> 00:42:42,960
that is it's valid in a bigger topology

1002
00:42:40,880 --> 00:42:45,440
so it's not only valid within a single

1003
00:42:42,960 --> 00:42:47,520
instance it's valid wherever

1004
00:42:45,440 --> 00:42:51,200
because these bin logos events are

1005
00:42:47,520 --> 00:42:51,200
traveling quite far nowadays

1006
00:42:51,920 --> 00:42:56,319
yeah the group replication is just built

1007
00:42:54,240 --> 00:42:59,680
on solid

1008
00:42:56,319 --> 00:43:02,720
research and papers and published boxes

1009
00:42:59,680 --> 00:43:05,279
and so on again

1010
00:43:02,720 --> 00:43:07,680
much of it similar to the previous talk

1011
00:43:05,280 --> 00:43:07,680
we had

1012
00:43:07,920 --> 00:43:11,200
so things that are built in here fault

1013
00:43:10,480 --> 00:43:13,599
detection

1014
00:43:11,200 --> 00:43:15,680
so it's automatic detection of failed

1015
00:43:13,599 --> 00:43:17,520
servers in the cluster

1016
00:43:15,680 --> 00:43:19,118
server fencing so the automatic

1017
00:43:17,520 --> 00:43:21,680
isolation of all

1018
00:43:19,119 --> 00:43:23,119
faulty servers from the application and

1019
00:43:21,680 --> 00:43:26,399
the cluster

1020
00:43:23,119 --> 00:43:28,319
we have we can configure the data

1021
00:43:26,400 --> 00:43:30,400
consistency level that

1022
00:43:28,319 --> 00:43:32,640
also was talked about in a lot of lost

1023
00:43:30,400 --> 00:43:32,640
talk

1024
00:43:32,800 --> 00:43:36,480
so we can have things like reading your

1025
00:43:35,280 --> 00:43:38,839
own rights and

1026
00:43:36,480 --> 00:43:41,200
depends you can configure it in various

1027
00:43:38,839 --> 00:43:44,078
ways

1028
00:43:41,200 --> 00:43:45,359
it implements distributed recovery so if

1029
00:43:44,079 --> 00:43:47,680
one

1030
00:43:45,359 --> 00:43:49,040
node fails it can get information from

1031
00:43:47,680 --> 00:43:53,520
other nodes to get up

1032
00:43:49,040 --> 00:43:57,279
and and be in the cluster again

1033
00:43:53,520 --> 00:44:00,079
there is flow control um

1034
00:43:57,280 --> 00:44:01,839
yeah to just ensure that you don't get

1035
00:44:00,079 --> 00:44:03,599
replication slag and thing it has

1036
00:44:01,839 --> 00:44:05,200
automatic flow control that kind of

1037
00:44:03,599 --> 00:44:06,079
slows down things a little bit for a

1038
00:44:05,200 --> 00:44:09,200
while

1039
00:44:06,079 --> 00:44:11,920
if if things are getting out of hand

1040
00:44:09,200 --> 00:44:12,560
and there are membership services so

1041
00:44:11,920 --> 00:44:15,040
they know

1042
00:44:12,560 --> 00:44:15,759
who is the members of the group and can

1043
00:44:15,040 --> 00:44:19,040
we get

1044
00:44:15,760 --> 00:44:21,280
group membership yeah

1045
00:44:19,040 --> 00:44:22,400
i planned uh i will do this it's five

1046
00:44:21,280 --> 00:44:24,640
minutes it's okay

1047
00:44:22,400 --> 00:44:26,720
i will do this uh mini tutorial in five

1048
00:44:24,640 --> 00:44:28,720
minutes i think it's uh

1049
00:44:26,720 --> 00:44:31,118
should be fairly easy so this is kind of

1050
00:44:28,720 --> 00:44:32,799
an overall inno db cluster setup i want

1051
00:44:31,119 --> 00:44:35,280
to show a configure instance create

1052
00:44:32,800 --> 00:44:38,319
cluster add instance remove instance

1053
00:44:35,280 --> 00:44:40,880
and rejoin instance

1054
00:44:38,319 --> 00:44:42,880
everything here is automated and

1055
00:44:40,880 --> 00:44:44,160
everything is controlled from the mysql

1056
00:44:42,880 --> 00:44:46,079
shell

1057
00:44:44,160 --> 00:44:47,839
we have read write traffic into the

1058
00:44:46,079 --> 00:44:50,960
router

1059
00:44:47,839 --> 00:44:54,480
and the router knows if you are

1060
00:44:50,960 --> 00:44:56,240
in in this here we show single primary

1061
00:44:54,480 --> 00:44:58,480
mode which is our default

1062
00:44:56,240 --> 00:44:59,919
so the red box here is the primary the

1063
00:44:58,480 --> 00:45:03,599
green ones are

1064
00:44:59,920 --> 00:45:05,839
only for reads so all

1065
00:45:03,599 --> 00:45:08,480
updates and inserts on deletes goes to

1066
00:45:05,839 --> 00:45:10,960
the red box

1067
00:45:08,480 --> 00:45:13,200
so what you do you take three machines

1068
00:45:10,960 --> 00:45:14,560
you install mysql on each of these three

1069
00:45:13,200 --> 00:45:17,040
machines

1070
00:45:14,560 --> 00:45:18,000
and you start it and each of the servers

1071
00:45:17,040 --> 00:45:21,680
are governed by

1072
00:45:18,000 --> 00:45:23,760
systemd keep it up and running

1073
00:45:21,680 --> 00:45:26,000
so i say configure instance to each of

1074
00:45:23,760 --> 00:45:29,040
these three boxes

1075
00:45:26,000 --> 00:45:32,720
then i point to one of them and i say

1076
00:45:29,040 --> 00:45:36,079
create cluster foster 2020

1077
00:45:32,720 --> 00:45:38,640
this then forms kind of a group

1078
00:45:36,079 --> 00:45:39,440
but if i say cluster status status it

1079
00:45:38,640 --> 00:45:41,680
says

1080
00:45:39,440 --> 00:45:42,960
your cluster is not fault tolerant i

1081
00:45:41,680 --> 00:45:45,598
need at least three

1082
00:45:42,960 --> 00:45:46,000
to be fully fault tolerant because i

1083
00:45:45,599 --> 00:45:49,520
need to

1084
00:45:46,000 --> 00:45:52,240
handle also network partitions so if

1085
00:45:49,520 --> 00:45:53,599
one box gets isolated from the others by

1086
00:45:52,240 --> 00:45:56,640
due to the network

1087
00:45:53,599 --> 00:45:59,920
the other two can

1088
00:45:56,640 --> 00:46:02,078
form a majority and and this is how it

1089
00:45:59,920 --> 00:46:03,760
works

1090
00:46:02,079 --> 00:46:06,480
i can add an instance and i

1091
00:46:03,760 --> 00:46:07,520
automatically can pick up to clone so i

1092
00:46:06,480 --> 00:46:09,680
just

1093
00:46:07,520 --> 00:46:11,200
i already started one so the next one

1094
00:46:09,680 --> 00:46:12,160
will just take the information from the

1095
00:46:11,200 --> 00:46:16,000
first one

1096
00:46:12,160 --> 00:46:17,279
by doing a clone the same happens with

1097
00:46:16,000 --> 00:46:20,720
the third one

1098
00:46:17,280 --> 00:46:22,720
and now this is this

1099
00:46:20,720 --> 00:46:24,480
screen dom just shows the progress

1100
00:46:22,720 --> 00:46:27,279
report of the cloning activity

1101
00:46:24,480 --> 00:46:29,280
it doesn't need to worry about that now

1102
00:46:27,280 --> 00:46:31,680
i can do a cluster status i see that the

1103
00:46:29,280 --> 00:46:34,400
cluster is online and can tolerate up to

1104
00:46:31,680 --> 00:46:34,399
one failure

1105
00:46:34,560 --> 00:46:40,880
then i boot up the router from the shell

1106
00:46:38,560 --> 00:46:43,119
i start the router i start traffic

1107
00:46:40,880 --> 00:46:46,319
flowing into the system

1108
00:46:43,119 --> 00:46:49,359
then just for demo purposes i say kill

1109
00:46:46,319 --> 00:46:49,359
kill one of the nodes

1110
00:46:50,640 --> 00:46:54,799
so the node leaves the group it's dead

1111
00:46:52,960 --> 00:46:59,920
the other one detects it

1112
00:46:54,800 --> 00:47:02,160
they start electing um yeah so

1113
00:46:59,920 --> 00:47:03,920
what you saw they elected a new primary

1114
00:47:02,160 --> 00:47:06,399
so the second server here is now the

1115
00:47:03,920 --> 00:47:06,400
primary

1116
00:47:06,640 --> 00:47:10,879
and there are various things depending

1117
00:47:09,520 --> 00:47:13,280
on the scenario if

1118
00:47:10,880 --> 00:47:14,160
there are kind of three major scenarios

1119
00:47:13,280 --> 00:47:16,480
in faults

1120
00:47:14,160 --> 00:47:18,000
one is that if i just kill it in unix

1121
00:47:16,480 --> 00:47:19,920
scale like i did here

1122
00:47:18,000 --> 00:47:21,119
it will just recover and go back to the

1123
00:47:19,920 --> 00:47:23,359
group immediately

1124
00:47:21,119 --> 00:47:25,280
so there's no really no additional

1125
00:47:23,359 --> 00:47:27,598
action needed

1126
00:47:25,280 --> 00:47:29,359
but for example if this node has been i

1127
00:47:27,599 --> 00:47:31,440
there was a network failure and this

1128
00:47:29,359 --> 00:47:34,640
node has been isolated and it took

1129
00:47:31,440 --> 00:47:36,400
time to find out and fix the network

1130
00:47:34,640 --> 00:47:40,240
problem and get it back in

1131
00:47:36,400 --> 00:47:41,440
it might be outdated so it cannot the

1132
00:47:40,240 --> 00:47:45,200
the group doesn't have

1133
00:47:41,440 --> 00:47:47,200
enough binary log to be able to catch up

1134
00:47:45,200 --> 00:47:49,520
the node because it's been gone for

1135
00:47:47,200 --> 00:47:52,879
several hours or a day or so

1136
00:47:49,520 --> 00:47:54,559
potentially and in this case we will use

1137
00:47:52,880 --> 00:47:55,839
the clone when it gets in it will just

1138
00:47:54,559 --> 00:47:58,480
pick

1139
00:47:55,839 --> 00:48:00,240
uh one of the you can even decide which

1140
00:47:58,480 --> 00:48:02,319
one it will take it from i think

1141
00:48:00,240 --> 00:48:04,078
but then it will clone itself and then

1142
00:48:02,319 --> 00:48:06,319
come back to the group and catch up on

1143
00:48:04,079 --> 00:48:06,960
the latest transaction by the bin logs

1144
00:48:06,319 --> 00:48:12,240
available

1145
00:48:06,960 --> 00:48:13,760
in the group and last is

1146
00:48:12,240 --> 00:48:15,839
and in this case you have to do an

1147
00:48:13,760 --> 00:48:19,520
explicit rejoin of the

1148
00:48:15,839 --> 00:48:20,000
the third alternative is actually it the

1149
00:48:19,520 --> 00:48:23,520
machine

1150
00:48:20,000 --> 00:48:25,359
is broken it will never go come back in

1151
00:48:23,520 --> 00:48:26,800
you have to replace it give it a new

1152
00:48:25,359 --> 00:48:28,640
idea and then you

1153
00:48:26,800 --> 00:48:30,640
take a remove instance of the whole

1154
00:48:28,640 --> 00:48:32,839
instance you add a new instance and then

1155
00:48:30,640 --> 00:48:35,839
you clone it and come back

1156
00:48:32,839 --> 00:48:35,839
in

1157
00:48:36,000 --> 00:48:40,160
okay so what i did here was a rejoin

1158
00:48:38,720 --> 00:48:41,520
instant so i kind of

1159
00:48:40,160 --> 00:48:43,839
thought that this was the network

1160
00:48:41,520 --> 00:48:45,280
isolation problem

1161
00:48:43,839 --> 00:48:46,880
actually with the kill i didn't have to

1162
00:48:45,280 --> 00:48:50,240
do it because it would come in

1163
00:48:46,880 --> 00:48:52,960
this was more to show cloning can have

1164
00:48:50,240 --> 00:48:52,959
part in this

1165
00:48:53,599 --> 00:49:01,359
so then we are back to fault tolerance

1166
00:48:58,400 --> 00:49:02,319
with these simple commands just mention

1167
00:49:01,359 --> 00:49:05,920
that we have a

1168
00:49:02,319 --> 00:49:05,920
ton of mysql drivers

1169
00:49:06,240 --> 00:49:09,759
i also want to mention that we are open

1170
00:49:08,559 --> 00:49:13,359
source the

1171
00:49:09,760 --> 00:49:15,920
github the open source is on github

1172
00:49:13,359 --> 00:49:16,558
just search for mysql and you will find

1173
00:49:15,920 --> 00:49:18,880
it

1174
00:49:16,559 --> 00:49:22,160
there's wide platform coverage we

1175
00:49:18,880 --> 00:49:24,319
support almost every platform

1176
00:49:22,160 --> 00:49:26,640
we now stick currently stick to c plus

1177
00:49:24,319 --> 00:49:29,200
plus 14 standard

1178
00:49:26,640 --> 00:49:31,118
we use we try to modernize getting more

1179
00:49:29,200 --> 00:49:33,279
and more newer compilers with more and

1180
00:49:31,119 --> 00:49:36,079
more modern constructs

1181
00:49:33,280 --> 00:49:37,119
we are doing a lot of cleaning up uh we

1182
00:49:36,079 --> 00:49:39,200
are working on

1183
00:49:37,119 --> 00:49:40,559
with asan and ubison and all these kind

1184
00:49:39,200 --> 00:49:43,359
of quality tools to get

1185
00:49:40,559 --> 00:49:44,000
the source code totally clean we are

1186
00:49:43,359 --> 00:49:46,480
moved to

1187
00:49:44,000 --> 00:49:47,200
google c plus plus style guide and we

1188
00:49:46,480 --> 00:49:51,119
have uh

1189
00:49:47,200 --> 00:49:51,118
online documentation of the source code

1190
00:49:51,440 --> 00:49:56,480
there are more features in 80 there is a

1191
00:49:54,480 --> 00:49:59,599
blog post

1192
00:49:56,480 --> 00:50:02,559
that i keep up to date uh you can go in

1193
00:49:59,599 --> 00:50:06,880
here and look at there's roughly like

1194
00:50:02,559 --> 00:50:06,880
300 new features in fadel

1195
00:50:08,240 --> 00:50:17,598
that's it you can reach out on slack

1196
00:50:13,680 --> 00:50:20,000
richardson and thank you

1197
00:50:17,599 --> 00:50:20,000
thank you

1198
00:50:21,119 --> 00:50:27,839
and i think that there is the time for

1199
00:50:24,400 --> 00:50:27,839
one or two questions

1200
00:50:29,440 --> 00:50:32,400
no oh

1201
00:50:37,040 --> 00:50:41,599
hi does group replication right now

1202
00:50:40,480 --> 00:50:43,520
support

1203
00:50:41,599 --> 00:50:46,480
only synchronous replication or

1204
00:50:43,520 --> 00:50:46,480
asynchronous as well

1205
00:50:48,319 --> 00:50:55,839
so group replication whether it's

1206
00:50:49,920 --> 00:50:55,839
synchronous or asynchronous it's

1207
00:50:57,280 --> 00:51:02,079
it is synchronous in a way in the sense

1208
00:50:59,839 --> 00:51:04,240
that you guarantee that if when your

1209
00:51:02,079 --> 00:51:05,440
transaction commits you actually the

1210
00:51:04,240 --> 00:51:08,160
whole group will

1211
00:51:05,440 --> 00:51:10,400
know that so it's synchronous in that

1212
00:51:08,160 --> 00:51:10,399
sense

1213
00:51:10,800 --> 00:51:14,079
but there's kind of a kind of an

1214
00:51:12,480 --> 00:51:16,160
eventual consistency

1215
00:51:14,079 --> 00:51:18,480
thing going on with boxers that

1216
00:51:16,160 --> 00:51:21,118
complicates the picture a little bit but

1217
00:51:18,480 --> 00:51:23,119
the short my short answer will be yes is

1218
00:51:21,119 --> 00:51:25,359
synchronous

1219
00:51:23,119 --> 00:51:25,359
okay

1220
00:51:25,880 --> 00:51:29,010
[Music]

1221
00:51:32,559 --> 00:51:39,040
okay how hard it is

1222
00:51:36,000 --> 00:51:43,760
is it to upgrade an existing system

1223
00:51:39,040 --> 00:51:43,759
an existing cluster to it

1224
00:51:43,839 --> 00:51:47,759
so the question is how i upgrade a

1225
00:51:46,079 --> 00:51:51,760
cluster to

1226
00:51:47,760 --> 00:51:55,119
from five seven to eight

1227
00:51:51,760 --> 00:51:57,119
uh someone else can answer that

1228
00:51:55,119 --> 00:51:59,839
i i think that we do have an upgrade

1229
00:51:57,119 --> 00:52:04,000
part on that i'm pretty sure of that

1230
00:51:59,839 --> 00:52:07,279
so you i'm not hundred percent how

1231
00:52:04,000 --> 00:52:07,280
that so i need to

1232
00:52:07,599 --> 00:52:10,800
sorry about i can't 100 give you an

1233
00:52:09,920 --> 00:52:13,119
answer but i'm

1234
00:52:10,800 --> 00:52:16,400
pretty sure that there is uh upgrade

1235
00:52:13,119 --> 00:52:16,400
path from 5.7 to

1236
00:52:16,480 --> 00:52:23,839
yeah okay so fred will talk to you and

1237
00:52:19,680 --> 00:52:26,640
give you the answer okay

1238
00:52:23,839 --> 00:52:26,640
one last question

1239
00:52:27,599 --> 00:52:32,800
well there are improvements in terms of

1240
00:52:30,400 --> 00:52:37,599
storage management meaning uh for

1241
00:52:32,800 --> 00:52:39,920
ssd or ssd architectures or

1242
00:52:37,599 --> 00:52:41,200
yeah when it is the improvements for

1243
00:52:39,920 --> 00:52:44,000
storage management

1244
00:52:41,200 --> 00:52:48,240
uh we pretty much assume at least for

1245
00:52:44,000 --> 00:52:48,240
production system that you run on ssds

1246
00:52:50,160 --> 00:52:54,558
and what kind of improvements are you

1247
00:52:52,720 --> 00:52:57,040
thinking about especially

1248
00:52:54,559 --> 00:52:58,160
like algorithms or the optimizer will

1249
00:52:57,040 --> 00:53:01,599
choose different

1250
00:52:58,160 --> 00:53:02,879
things we have logic in 80 or even in

1251
00:53:01,599 --> 00:53:05,599
five seven i think to

1252
00:53:02,880 --> 00:53:06,400
or is it a2 only i'm not sure uh that

1253
00:53:05,599 --> 00:53:08,800
you will

1254
00:53:06,400 --> 00:53:09,760
have different costs you will detect

1255
00:53:08,800 --> 00:53:13,119
that your

1256
00:53:09,760 --> 00:53:13,599
table is on disk and possible percentage

1257
00:53:13,119 --> 00:53:16,480
on this

1258
00:53:13,599 --> 00:53:18,240
versus how much of it is in memory and

1259
00:53:16,480 --> 00:53:21,280
take that into account

1260
00:53:18,240 --> 00:53:24,240
when you generate the plan so in that

1261
00:53:21,280 --> 00:53:24,240
sense there is some

1262
00:53:26,839 --> 00:53:32,400
optimizations

1263
00:53:29,040 --> 00:53:43,119
time is up uh

1264
00:53:32,400 --> 00:53:45,200
thank you

1265
00:53:43,119 --> 00:53:45,200
you

