1
00:00:05,839 --> 00:00:11,599
yeah welcome

2
00:00:07,440 --> 00:00:15,120
at this afternoon i'm roland

3
00:00:11,599 --> 00:00:16,640
i will talk to you about ptx list as my

4
00:00:15,120 --> 00:00:19,680
previous speaker already

5
00:00:16,640 --> 00:00:20,480
mentioned it i'm a systems integration

6
00:00:19,680 --> 00:00:23,759
hacker at

7
00:00:20,480 --> 00:00:26,800
pingatonix we are a

8
00:00:23,760 --> 00:00:30,000
small company in hildesheim near hanover

9
00:00:26,800 --> 00:00:33,760
if you've heard about it yeah so

10
00:00:30,000 --> 00:00:33,760
what is this oh sorry

11
00:00:39,760 --> 00:00:45,839
yeah so what does pit exist in one slide

12
00:00:43,200 --> 00:00:46,960
it's basically a build system like if

13
00:00:45,840 --> 00:00:50,320
you know yokto

14
00:00:46,960 --> 00:00:51,680
or open embedded or build route or even

15
00:00:50,320 --> 00:00:55,440
open wrt

16
00:00:51,680 --> 00:00:58,559
so you put in

17
00:00:55,440 --> 00:01:01,760
things you want on your platform

18
00:00:58,559 --> 00:01:02,959
on your embedded device and then you

19
00:01:01,760 --> 00:01:04,720
wait some hours

20
00:01:02,960 --> 00:01:06,159
and then you get an image out of it

21
00:01:04,720 --> 00:01:09,280
which you can flash on your

22
00:01:06,159 --> 00:01:12,080
target and

23
00:01:09,280 --> 00:01:12,960
her building blocks are basically going

24
00:01:12,080 --> 00:01:15,119
to make

25
00:01:12,960 --> 00:01:16,798
we do a lot of dependency handling with

26
00:01:15,119 --> 00:01:20,159
it because it's

27
00:01:16,799 --> 00:01:21,680
basically built for this so we can reuse

28
00:01:20,159 --> 00:01:24,720
it

29
00:01:21,680 --> 00:01:27,759
and we do the dependency handling in

30
00:01:24,720 --> 00:01:31,360
k config and

31
00:01:27,759 --> 00:01:34,320
which also gives us a nice nice menu

32
00:01:31,360 --> 00:01:36,960
for the user to select the packages that

33
00:01:34,320 --> 00:01:40,880
you want and select the sub options and

34
00:01:36,960 --> 00:01:41,759
what not there's some glue code in in

35
00:01:40,880 --> 00:01:46,320
bash

36
00:01:41,759 --> 00:01:46,320
and a wk

37
00:01:46,560 --> 00:01:52,399
which handles the

38
00:01:49,840 --> 00:01:52,960
dependencies between k config and make

39
00:01:52,399 --> 00:01:56,079
so it

40
00:01:52,960 --> 00:01:57,600
basically transforms the k config

41
00:01:56,079 --> 00:02:00,000
symbols

42
00:01:57,600 --> 00:02:00,719
the dependencies from k config into the

43
00:02:00,000 --> 00:02:04,159
gnu make

44
00:02:00,719 --> 00:02:06,079
dependencies and does

45
00:02:04,159 --> 00:02:07,840
some other things under the hood so you

46
00:02:06,079 --> 00:02:11,440
don't have to type so much

47
00:02:07,840 --> 00:02:12,000
yeah the first versions of ptx just go

48
00:02:11,440 --> 00:02:16,079
back to

49
00:02:12,000 --> 00:02:18,400
at least 2003 that's the

50
00:02:16,080 --> 00:02:19,440
earliest version i could find there are

51
00:02:18,400 --> 00:02:23,040
probably some

52
00:02:19,440 --> 00:02:26,800
older versions but i couldn't find those

53
00:02:23,040 --> 00:02:31,599
um yeah so it's basically older than

54
00:02:26,800 --> 00:02:34,959
uh i think build roots started in 2010

55
00:02:31,599 --> 00:02:37,119
and jopto is 2001.

56
00:02:34,959 --> 00:02:38,959
oh okay then i'm wrongly informed uh

57
00:02:37,120 --> 00:02:42,319
excuse me about that

58
00:02:38,959 --> 00:02:45,760
but uh well it's an old project and uh

59
00:02:42,319 --> 00:02:46,399
i think uh it isn't known so much so uh

60
00:02:45,760 --> 00:02:48,000
basically

61
00:02:46,400 --> 00:02:50,000
that's what this talk is trying to

62
00:02:48,000 --> 00:02:53,680
change but now we do

63
00:02:50,000 --> 00:02:55,920
mostly monthly releases so every release

64
00:02:53,680 --> 00:02:56,959
every month there's a new release and

65
00:02:55,920 --> 00:02:58,879
which is

66
00:02:56,959 --> 00:03:00,080
basically just version bumps for

67
00:02:58,879 --> 00:03:04,720
packages so

68
00:03:00,080 --> 00:03:05,440
yeah the overall license for ptx tests

69
00:03:04,720 --> 00:03:08,720
and

70
00:03:05,440 --> 00:03:11,440
all the recipes are gpl2 yeah

71
00:03:08,720 --> 00:03:12,319
and now we also have this shiny new

72
00:03:11,440 --> 00:03:16,159
logos

73
00:03:12,319 --> 00:03:16,159
since i think one year ago

74
00:03:16,480 --> 00:03:21,920
because we're basically just a

75
00:03:19,120 --> 00:03:24,959
collection of recipes we have this uh

76
00:03:21,920 --> 00:03:26,640
this cooking penguin and an online

77
00:03:24,959 --> 00:03:29,120
documentation which is generated from

78
00:03:26,640 --> 00:03:32,319
restructure text in swings

79
00:03:29,120 --> 00:03:33,040
and you can read this online yeah some

80
00:03:32,319 --> 00:03:36,399
statistics

81
00:03:33,040 --> 00:03:38,359
um i did this for the for the previous

82
00:03:36,400 --> 00:03:41,360
release uh

83
00:03:38,360 --> 00:03:44,799
2020.01 is already out but

84
00:03:41,360 --> 00:03:48,239
my slides were prepared last month so

85
00:03:44,799 --> 00:03:52,239
we have about 914 target packages

86
00:03:48,239 --> 00:03:56,000
and 184 host packages

87
00:03:52,239 --> 00:03:59,120
and we're also providing some

88
00:03:56,000 --> 00:04:02,400
pre-built two chains for about 18

89
00:03:59,120 --> 00:04:03,280
plus minus platforms uh architectures

90
00:04:02,400 --> 00:04:06,959
like uh

91
00:04:03,280 --> 00:04:10,799
mostly arm like arm4

92
00:04:06,959 --> 00:04:14,239
and v7 are very big

93
00:04:10,799 --> 00:04:16,798
and of course the 64-bit version of arm

94
00:04:14,239 --> 00:04:19,199
and there are also some people using it

95
00:04:16,798 --> 00:04:22,960
on x86 but this is not the

96
00:04:19,199 --> 00:04:26,560
main focus and uh of course uh

97
00:04:22,960 --> 00:04:29,840
risk five and then some older power pc

98
00:04:26,560 --> 00:04:29,840
architectures yeah

99
00:04:30,560 --> 00:04:34,240
i think the basic thing which you got to

100
00:04:33,600 --> 00:04:36,720
see

101
00:04:34,240 --> 00:04:38,350
for on the user interface side is this

102
00:04:36,720 --> 00:04:40,000
menu config

103
00:04:38,350 --> 00:04:43,280
[Music]

104
00:04:40,000 --> 00:04:46,240
we have two big i say

105
00:04:43,280 --> 00:04:48,000
too big but they're not very big menu

106
00:04:46,240 --> 00:04:50,240
configs

107
00:04:48,000 --> 00:04:51,600
on the one hand we have the menu config

108
00:04:50,240 --> 00:04:54,400
for your user space

109
00:04:51,600 --> 00:04:56,560
for your user land which you can select

110
00:04:54,400 --> 00:04:59,758
in which you can select all your

111
00:04:56,560 --> 00:05:00,240
target packages like uh i don't know we

112
00:04:59,759 --> 00:05:01,919
have here

113
00:05:00,240 --> 00:05:04,560
shell and console tools scripting

114
00:05:01,919 --> 00:05:07,680
languages like python for example

115
00:05:04,560 --> 00:05:08,639
uh networking tools i don't know ip

116
00:05:07,680 --> 00:05:11,600
tables uh

117
00:05:08,639 --> 00:05:13,759
nf tables what you need disk file

118
00:05:11,600 --> 00:05:16,479
utilities communication

119
00:05:13,759 --> 00:05:17,360
applications well everything that

120
00:05:16,479 --> 00:05:20,560
doesn't fit in the

121
00:05:17,360 --> 00:05:24,639
into the other editors like

122
00:05:20,560 --> 00:05:28,400
vm and nano

123
00:05:24,639 --> 00:05:31,520
um test suites web applications nginx

124
00:05:28,400 --> 00:05:31,919
you name it and graphics and multimedia

125
00:05:31,520 --> 00:05:35,359
like

126
00:05:31,919 --> 00:05:39,280
qt wayland

127
00:05:35,360 --> 00:05:41,680
yeah and xorg still

128
00:05:39,280 --> 00:05:43,359
and on the other side um everything

129
00:05:41,680 --> 00:05:47,520
that's not

130
00:05:43,360 --> 00:05:50,639
user land uh like kernel and farebox

131
00:05:47,520 --> 00:05:53,520
sorry bootloader which is spare box

132
00:05:50,639 --> 00:05:54,400
for us uh but you can also build of

133
00:05:53,520 --> 00:05:57,758
course u-boot

134
00:05:54,400 --> 00:06:00,880
and um i don't know opti is there

135
00:05:57,759 --> 00:06:01,919
in in it um basically everything that's

136
00:06:00,880 --> 00:06:07,360
um

137
00:06:01,919 --> 00:06:10,400
below the the user land uh is

138
00:06:07,360 --> 00:06:12,800
selectable in this platform config so

139
00:06:10,400 --> 00:06:14,638
we have this bare metal side on the

140
00:06:12,800 --> 00:06:18,840
platform config side and

141
00:06:14,639 --> 00:06:21,840
everything that's above it in the menu

142
00:06:18,840 --> 00:06:21,840
config

143
00:06:22,000 --> 00:06:25,280
and this is also what the typical bsp

144
00:06:23,840 --> 00:06:30,479
looks like on the file

145
00:06:25,280 --> 00:06:32,799
level um you have one folder configs

146
00:06:30,479 --> 00:06:33,520
which you have here the ptx config which

147
00:06:32,800 --> 00:06:36,400
is

148
00:06:33,520 --> 00:06:38,240
what gets selected in the menu config

149
00:06:36,400 --> 00:06:40,880
and

150
00:06:38,240 --> 00:06:43,039
this is basically the k config

151
00:06:40,880 --> 00:06:46,319
configuration for the

152
00:06:43,039 --> 00:06:49,520
from which the menu is generated

153
00:06:46,319 --> 00:06:51,360
and in it you have a platform

154
00:06:49,520 --> 00:06:52,639
so this is everything you select in the

155
00:06:51,360 --> 00:06:56,080
platform config

156
00:06:52,639 --> 00:06:59,280
and um in the platform there are usually

157
00:06:56,080 --> 00:07:01,440
some other packages that are also using

158
00:06:59,280 --> 00:07:03,359
kconfig for their own

159
00:07:01,440 --> 00:07:04,880
configuration like for example here the

160
00:07:03,360 --> 00:07:07,520
kernel you

161
00:07:04,880 --> 00:07:08,560
i guess you have a kernel um without the

162
00:07:07,520 --> 00:07:10,400
kernel

163
00:07:08,560 --> 00:07:12,880
i don't know if everyone's ever anyone's

164
00:07:10,400 --> 00:07:16,159
ever tried it but

165
00:07:12,880 --> 00:07:19,120
maybe it's possible i don't know but um

166
00:07:16,160 --> 00:07:21,840
also the conflict for your bootloader

167
00:07:19,120 --> 00:07:24,639
which in this case is bearbox

168
00:07:21,840 --> 00:07:26,719
and yeah that's basically everything in

169
00:07:24,639 --> 00:07:28,960
configs and you have

170
00:07:26,720 --> 00:07:30,560
some rules some package rules if you

171
00:07:28,960 --> 00:07:32,799
want to

172
00:07:30,560 --> 00:07:34,720
build some custom software which is not

173
00:07:32,800 --> 00:07:38,000
already in pjxist

174
00:07:34,720 --> 00:07:39,440
you can generate package rules in your

175
00:07:38,000 --> 00:07:41,840
bsp

176
00:07:39,440 --> 00:07:45,120
and this is basically a dot in file

177
00:07:41,840 --> 00:07:48,000
which contains the kconfig menu entry

178
00:07:45,120 --> 00:07:52,000
and the make file which handles

179
00:07:48,000 --> 00:07:52,000
everything about building the packages

180
00:07:52,160 --> 00:07:55,919
yeah and then there's this folder in

181
00:07:54,479 --> 00:07:58,479
between here project root

182
00:07:55,919 --> 00:07:59,919
i will come to this later this is

183
00:07:58,479 --> 00:08:02,800
basically everything

184
00:07:59,919 --> 00:08:03,198
which you want to overwrite but i will

185
00:08:02,800 --> 00:08:05,680
say

186
00:08:03,199 --> 00:08:07,440
something about this later yeah the

187
00:08:05,680 --> 00:08:11,840
basic structure

188
00:08:07,440 --> 00:08:14,240
is the basic idea is that your bsp

189
00:08:11,840 --> 00:08:16,080
structure is structured exactly like the

190
00:08:14,240 --> 00:08:19,919
ptx this upstream structure so

191
00:08:16,080 --> 00:08:22,479
we have the same structure in pt exists

192
00:08:19,919 --> 00:08:23,440
when you install it so everything that's

193
00:08:22,479 --> 00:08:26,960
not found here

194
00:08:23,440 --> 00:08:29,759
in your bsp is searched instead

195
00:08:26,960 --> 00:08:30,638
in the upstream htx this installation

196
00:08:29,759 --> 00:08:34,719
folder so

197
00:08:30,639 --> 00:08:40,240
you can extend pdx this however you want

198
00:08:34,719 --> 00:08:40,560
and use the same structure with it yeah

199
00:08:40,240 --> 00:08:43,039
um

200
00:08:40,559 --> 00:08:44,000
every package is built in stages i guess

201
00:08:43,039 --> 00:08:47,360
you have this in

202
00:08:44,000 --> 00:08:49,120
other build systems too um

203
00:08:47,360 --> 00:08:51,360
yeah it has a get stage and extract

204
00:08:49,120 --> 00:08:53,680
stage to prepare a compile and install

205
00:08:51,360 --> 00:08:55,120
and the token install stage and which

206
00:08:53,680 --> 00:08:57,359
basically if

207
00:08:55,120 --> 00:08:58,160
the get stage fetches everything from

208
00:08:57,360 --> 00:09:01,279
from the web

209
00:08:58,160 --> 00:09:03,920
um and

210
00:09:01,279 --> 00:09:05,839
then the extract stage extracts the

211
00:09:03,920 --> 00:09:08,000
tarball which you just fetched and

212
00:09:05,839 --> 00:09:10,160
applies the local patches which you

213
00:09:08,000 --> 00:09:11,600
maybe have in your vsp or in upstream

214
00:09:10,160 --> 00:09:13,199
btx

215
00:09:11,600 --> 00:09:14,959
the prepare stage runs basically

216
00:09:13,200 --> 00:09:18,080
configure or cmag or

217
00:09:14,959 --> 00:09:21,359
mison or whatever build your system your

218
00:09:18,080 --> 00:09:24,720
package uses ptxtest has

219
00:09:21,360 --> 00:09:28,399
already support for many of those

220
00:09:24,720 --> 00:09:30,480
and i think it is fairly easy to

221
00:09:28,399 --> 00:09:31,870
provide support for other build systems

222
00:09:30,480 --> 00:09:34,240
too

223
00:09:31,870 --> 00:09:37,519
[Music]

224
00:09:34,240 --> 00:09:40,240
and we'll see later how this uh

225
00:09:37,519 --> 00:09:42,320
is handled in the in the rule file

226
00:09:40,240 --> 00:09:46,240
itself in the mac file for the package

227
00:09:42,320 --> 00:09:46,240
it's basically just a variable usage

228
00:09:46,399 --> 00:09:50,320
yeah and then the compile stage

229
00:09:48,160 --> 00:09:53,839
basically just compiles the packages

230
00:09:50,320 --> 00:09:55,760
package like it is normally used

231
00:09:53,839 --> 00:09:58,480
the install stage installs it into an

232
00:09:55,760 --> 00:10:01,680
isolated directory so

233
00:09:58,480 --> 00:10:03,839
many packages uh install

234
00:10:01,680 --> 00:10:05,120
many files by default which you don't

235
00:10:03,839 --> 00:10:08,399
use or don't

236
00:10:05,120 --> 00:10:10,890
need on your target system for example

237
00:10:08,399 --> 00:10:13,519
if you build acute then

238
00:10:10,890 --> 00:10:16,240
[Music]

239
00:10:13,519 --> 00:10:17,600
you have a whole lot of libraries which

240
00:10:16,240 --> 00:10:19,920
you maybe don't want to install

241
00:10:17,600 --> 00:10:20,959
so the next step is this toggle install

242
00:10:19,920 --> 00:10:24,319
stage which

243
00:10:20,959 --> 00:10:27,680
cherry picks a set of files

244
00:10:24,320 --> 00:10:32,160
into your root file system or

245
00:10:27,680 --> 00:10:35,279
your ipkg package later

246
00:10:32,160 --> 00:10:37,199
and you can overwrite

247
00:10:35,279 --> 00:10:40,000
any one of those stages in your makefile

248
00:10:37,200 --> 00:10:42,320
rule in your package make file

249
00:10:40,000 --> 00:10:43,920
but you can also reuse a lot of them

250
00:10:42,320 --> 00:10:48,079
which we see

251
00:10:43,920 --> 00:10:49,519
just now oh no

252
00:10:48,079 --> 00:10:51,920
just a quick information how to apply

253
00:10:49,519 --> 00:10:51,920
patches

254
00:10:58,000 --> 00:11:02,640
you put your patch queue into a patches

255
00:11:00,880 --> 00:11:05,680
folder in your vsp or

256
00:11:02,640 --> 00:11:07,040
in the upstream ptx test package

257
00:11:05,680 --> 00:11:10,800
structure if you're using

258
00:11:07,040 --> 00:11:14,240
a pdx test in a development version um

259
00:11:10,800 --> 00:11:14,640
and you name it like the the version and

260
00:11:14,240 --> 00:11:16,079
the

261
00:11:14,640 --> 00:11:18,720
name of your package in this case

262
00:11:16,079 --> 00:11:21,519
puzzybox with the version number

263
00:11:18,720 --> 00:11:23,200
and there is a serious file and the

264
00:11:21,519 --> 00:11:25,670
patch file here

265
00:11:23,200 --> 00:11:27,519
and the usual

266
00:11:25,670 --> 00:11:30,000
[Music]

267
00:11:27,519 --> 00:11:31,360
the usual thing is that you uh put

268
00:11:30,000 --> 00:11:35,120
packages

269
00:11:31,360 --> 00:11:37,360
for the uh which um sorry the usual

270
00:11:35,120 --> 00:11:38,160
thing is to put patches for your

271
00:11:37,360 --> 00:11:41,360
packages which

272
00:11:38,160 --> 00:11:43,120
are from the platform config like

273
00:11:41,360 --> 00:11:44,880
the kernel or the bootloader or anything

274
00:11:43,120 --> 00:11:48,640
else in this area

275
00:11:44,880 --> 00:11:53,040
into this

276
00:11:48,640 --> 00:11:55,439
config slash platform folder

277
00:11:53,040 --> 00:11:56,959
yeah but you can also put it in in there

278
00:11:55,440 --> 00:11:57,839
and have it for all the platforms which

279
00:11:56,959 --> 00:12:00,880
you want

280
00:11:57,839 --> 00:12:01,279
so um you can edit this uh this patch

281
00:12:00,880 --> 00:12:04,079
stack

282
00:12:01,279 --> 00:12:05,120
uh by using quilt or git after

283
00:12:04,079 --> 00:12:06,399
extracting the package

284
00:12:05,120 --> 00:12:09,839
and then changing to the package

285
00:12:06,399 --> 00:12:12,160
directory where it's extracted yeah

286
00:12:09,839 --> 00:12:13,519
uh this is what i wanted to tell uh how

287
00:12:12,160 --> 00:12:17,279
a package looks like

288
00:12:13,519 --> 00:12:20,399
in the inside this is basically the the

289
00:12:17,279 --> 00:12:22,079
menu section for the package you just

290
00:12:20,399 --> 00:12:25,440
give a section

291
00:12:22,079 --> 00:12:28,719
in which of these one you want to

292
00:12:25,440 --> 00:12:32,079
uh want to have it project

293
00:12:28,720 --> 00:12:35,279
specific is the default section which uh

294
00:12:32,079 --> 00:12:38,479
is just uh here

295
00:12:35,279 --> 00:12:41,200
and um

296
00:12:38,480 --> 00:12:43,360
then you select basically the the

297
00:12:41,200 --> 00:12:45,680
dependencies that your package uses like

298
00:12:43,360 --> 00:12:46,720
in this case lib usb so lib usb gets

299
00:12:45,680 --> 00:12:48,479
built before

300
00:12:46,720 --> 00:12:50,560
your package gets built so all the

301
00:12:48,480 --> 00:12:52,880
headers are found and so on

302
00:12:50,560 --> 00:12:53,760
and also in this case because we're

303
00:12:52,880 --> 00:12:55,600
using

304
00:12:53,760 --> 00:12:58,720
cmake in this example you also have to

305
00:12:55,600 --> 00:13:02,000
select the cmake host tool

306
00:12:58,720 --> 00:13:04,320
so ptxtest can build your package

307
00:13:02,000 --> 00:13:05,200
yeah and every package is a tri-state

308
00:13:04,320 --> 00:13:09,120
option

309
00:13:05,200 --> 00:13:11,519
so you can set it to yes no or

310
00:13:09,120 --> 00:13:12,240
module which you can see which we'll see

311
00:13:11,519 --> 00:13:15,920
later what

312
00:13:12,240 --> 00:13:18,079
that does then we have the makefile

313
00:13:15,920 --> 00:13:19,279
as i said it's a lot of assigning

314
00:13:18,079 --> 00:13:21,839
variables like

315
00:13:19,279 --> 00:13:23,439
the version number and the md5 for the

316
00:13:21,839 --> 00:13:26,399
downloaded package version

317
00:13:23,440 --> 00:13:27,440
for this url and the source where it

318
00:13:26,399 --> 00:13:31,200
gets extracted

319
00:13:27,440 --> 00:13:31,200
and the license files

320
00:13:31,360 --> 00:13:34,560
and the license files are really cool

321
00:13:34,079 --> 00:13:37,920
because

322
00:13:34,560 --> 00:13:38,719
uh ptxs can put them all together in one

323
00:13:37,920 --> 00:13:41,199
big pdf

324
00:13:38,720 --> 00:13:42,320
so you have kind of a report about all

325
00:13:41,199 --> 00:13:44,719
the licenses

326
00:13:42,320 --> 00:13:46,880
you're using in your package yeah in

327
00:13:44,720 --> 00:13:51,120
your image

328
00:13:46,880 --> 00:13:53,199
um and if you're using the default

329
00:13:51,120 --> 00:13:55,839
tools like cmake or automatic you often

330
00:13:53,199 --> 00:14:00,479
don't really have to do a lot of these

331
00:13:55,839 --> 00:14:03,600
and can reuse all the internal ptxtest

332
00:14:00,480 --> 00:14:04,560
functionality to build it so the next

333
00:14:03,600 --> 00:14:07,040
steps are really

334
00:14:04,560 --> 00:14:09,199
short and reuse everything except the

335
00:14:07,040 --> 00:14:11,279
prepared the target install stage

336
00:14:09,199 --> 00:14:12,800
and then the prepare stage we are also

337
00:14:11,279 --> 00:14:16,160
only setting this

338
00:14:12,800 --> 00:14:19,839
config tool variable so to cmake and

339
00:14:16,160 --> 00:14:20,959
we are setting these config options for

340
00:14:19,839 --> 00:14:25,839
the cmake

341
00:14:20,959 --> 00:14:27,279
to maybe enable our usb functionality

342
00:14:25,839 --> 00:14:29,360
but this depends of course on the

343
00:14:27,279 --> 00:14:31,760
package you're using

344
00:14:29,360 --> 00:14:32,800
and then in the target install stage we

345
00:14:31,760 --> 00:14:36,880
set up our

346
00:14:32,800 --> 00:14:40,160
variables for the ipkg package which

347
00:14:36,880 --> 00:14:40,160
gets built later and

348
00:14:40,240 --> 00:14:46,639
basically we're then only copying

349
00:14:43,760 --> 00:14:49,120
here should be a file name which i

350
00:14:46,639 --> 00:14:52,399
missed in the example

351
00:14:49,120 --> 00:14:52,399
but yes

352
00:14:52,720 --> 00:14:56,079
this is the cherry picking part

353
00:14:56,399 --> 00:14:59,040
and we have three package types as i

354
00:14:57,760 --> 00:14:59,920
already said we have target packages

355
00:14:59,040 --> 00:15:01,839
which are get

356
00:14:59,920 --> 00:15:04,079
installed on the hosts like simply busy

357
00:15:01,839 --> 00:15:07,360
box core utils whatever

358
00:15:04,079 --> 00:15:09,920
and the host packages are only there for

359
00:15:07,360 --> 00:15:10,720
uh having a compatible build environment

360
00:15:09,920 --> 00:15:14,880
so

361
00:15:10,720 --> 00:15:17,120
we try to support most of the linux

362
00:15:14,880 --> 00:15:19,519
distributions that are out out there i

363
00:15:17,120 --> 00:15:19,519
think that

364
00:15:19,600 --> 00:15:24,560
the earliest is something like scent os

365
00:15:24,639 --> 00:15:30,079
six yes um which

366
00:15:28,079 --> 00:15:31,680
doesn't have an up-to-date core utils so

367
00:15:30,079 --> 00:15:34,479
we have to build the courier tools

368
00:15:31,680 --> 00:15:35,120
ourselves so all the packages which are

369
00:15:34,480 --> 00:15:38,639
using

370
00:15:35,120 --> 00:15:41,680
i don't know tar with dash dash

371
00:15:38,639 --> 00:15:44,480
uh m-time versions or something

372
00:15:41,680 --> 00:15:46,319
can do that yeah and the third part is

373
00:15:44,480 --> 00:15:48,399
image packages

374
00:15:46,320 --> 00:15:50,079
which are also from the platform config

375
00:15:48,399 --> 00:15:52,720
and

376
00:15:50,079 --> 00:15:55,839
you can decide there what kind of images

377
00:15:52,720 --> 00:15:55,839
you want to build

378
00:15:56,000 --> 00:16:03,920
so i will talk about layering a bit so

379
00:16:00,399 --> 00:16:07,040
ptx just started up with platforms

380
00:16:03,920 --> 00:16:08,959
so platforms are the oldest mechanism to

381
00:16:07,040 --> 00:16:09,519
layer things on top of each other but

382
00:16:08,959 --> 00:16:12,880
there are

383
00:16:09,519 --> 00:16:13,759
five different others uh we'll start

384
00:16:12,880 --> 00:16:16,800
with platforms

385
00:16:13,759 --> 00:16:17,519
um in this example i'm maybe using a

386
00:16:16,800 --> 00:16:21,120
platform

387
00:16:17,519 --> 00:16:24,880
for raspberry pi so i have a kernel

388
00:16:21,120 --> 00:16:25,440
with a version 419 i built an hd image

389
00:16:24,880 --> 00:16:29,360
for it

390
00:16:25,440 --> 00:16:32,240
and the raspberry pi needs a

391
00:16:29,360 --> 00:16:33,040
boot partition for the bootloader so i

392
00:16:32,240 --> 00:16:35,920
enable this

393
00:16:33,040 --> 00:16:36,880
and because it already has a boot loader

394
00:16:35,920 --> 00:16:39,839
internally

395
00:16:36,880 --> 00:16:40,959
i don't build a bear box for it and in

396
00:16:39,839 --> 00:16:42,480
the user land i

397
00:16:40,959 --> 00:16:45,359
in this example i build a system the a

398
00:16:42,480 --> 00:16:48,399
busy box and a cups

399
00:16:45,360 --> 00:16:49,440
and if i now want to extend this support

400
00:16:48,399 --> 00:16:52,880
to other platforms

401
00:16:49,440 --> 00:16:56,320
i can just build add another platform

402
00:16:52,880 --> 00:17:02,399
like for example a platform containing

403
00:16:56,320 --> 00:17:04,319
arm v7a and on 64-bit v8

404
00:17:02,399 --> 00:17:06,160
and i can choose different kernel

405
00:17:04,319 --> 00:17:09,039
versions here

406
00:17:06,160 --> 00:17:10,640
and with this also maybe a different

407
00:17:09,039 --> 00:17:13,359
patch stack

408
00:17:10,640 --> 00:17:14,160
if your if your platform support is not

409
00:17:13,359 --> 00:17:16,479
good enough

410
00:17:14,160 --> 00:17:18,240
upstream and i can choose different

411
00:17:16,480 --> 00:17:20,000
images which i need

412
00:17:18,240 --> 00:17:21,359
and maybe a bootloader another

413
00:17:20,000 --> 00:17:25,280
bootloader like in the

414
00:17:21,359 --> 00:17:27,918
other platforms and i talked about

415
00:17:25,280 --> 00:17:28,720
that packages are tri-state options in k

416
00:17:27,919 --> 00:17:32,000
conflict

417
00:17:28,720 --> 00:17:35,919
so you can set these options

418
00:17:32,000 --> 00:17:37,919
to maybe m so modular and

419
00:17:35,919 --> 00:17:39,280
maybe you want to have a debug

420
00:17:37,919 --> 00:17:42,559
collection

421
00:17:39,280 --> 00:17:45,760
software collection that doesn't

422
00:17:42,559 --> 00:17:48,160
get installed by default on a user's

423
00:17:45,760 --> 00:17:50,080
or a customer's target but you still

424
00:17:48,160 --> 00:17:53,120
want to be able to debug

425
00:17:50,080 --> 00:17:56,159
some packages in your system so

426
00:17:53,120 --> 00:18:00,080
you set this these debug packages to m

427
00:17:56,160 --> 00:18:02,160
and then choose them at a later step in

428
00:18:00,080 --> 00:18:04,559
a collection config file

429
00:18:02,160 --> 00:18:05,840
and in the debug collection you enable

430
00:18:04,559 --> 00:18:09,200
them and maybe in the release

431
00:18:05,840 --> 00:18:11,840
collection you don't enable them yeah

432
00:18:09,200 --> 00:18:13,440
these are collections then we have

433
00:18:11,840 --> 00:18:15,070
alternative conflict files as i said

434
00:18:13,440 --> 00:18:17,039
before

435
00:18:15,070 --> 00:18:19,760
[Music]

436
00:18:17,039 --> 00:18:19,760
we had this

437
00:18:20,320 --> 00:18:24,480
this additional folder here project root

438
00:18:22,400 --> 00:18:25,200
and here are two conflict files everstep

439
00:18:24,480 --> 00:18:29,840
and shadow

440
00:18:25,200 --> 00:18:29,840
in utc and

441
00:18:31,280 --> 00:18:34,559
you can use this with packages that are

442
00:18:33,679 --> 00:18:36,640
using this

443
00:18:34,559 --> 00:18:38,399
install alternative macro in their

444
00:18:36,640 --> 00:18:41,919
target install stage

445
00:18:38,400 --> 00:18:44,320
for example in this example uh

446
00:18:41,919 --> 00:18:45,919
for cups cups is installing the edc

447
00:18:44,320 --> 00:18:49,200
print cap file

448
00:18:45,919 --> 00:18:52,640
and you can override this by

449
00:18:49,200 --> 00:18:55,440
any one of these locations so first

450
00:18:52,640 --> 00:18:56,640
locally in your bsp then it gets

451
00:18:55,440 --> 00:19:01,280
searched

452
00:18:56,640 --> 00:19:01,280
further up then in the

453
00:19:01,840 --> 00:19:05,918
project root directory from the pdx test

454
00:19:04,400 --> 00:19:08,799
installer

455
00:19:05,919 --> 00:19:10,080
and then in the cups installer and then

456
00:19:08,799 --> 00:19:12,240
in the cups built here

457
00:19:10,080 --> 00:19:14,720
so you have a lot of options to

458
00:19:12,240 --> 00:19:20,160
overwrite

459
00:19:14,720 --> 00:19:20,160
config files for different

460
00:19:22,840 --> 00:19:25,840
configurations

461
00:19:26,559 --> 00:19:30,399
a new mechanism uh which exists about a

462
00:19:29,200 --> 00:19:33,200
year now is

463
00:19:30,400 --> 00:19:33,679
called k config divs um which is

464
00:19:33,200 --> 00:19:36,720
basically

465
00:19:33,679 --> 00:19:38,880
just uh divs on simple diffs on k config

466
00:19:36,720 --> 00:19:42,320
files um

467
00:19:38,880 --> 00:19:44,080
if you are using a custom kernel image

468
00:19:42,320 --> 00:19:44,879
for example you want to have some debug

469
00:19:44,080 --> 00:19:48,399
symbols

470
00:19:44,880 --> 00:19:51,440
in there you set the conflict file to

471
00:19:48,400 --> 00:19:54,559
something like config debug which is

472
00:19:51,440 --> 00:19:57,919
living in the platform configure as

473
00:19:54,559 --> 00:20:00,639
earlier but um you tell

474
00:19:57,919 --> 00:20:02,159
protects this this ref config variable

475
00:20:00,640 --> 00:20:04,799
and this points to another

476
00:20:02,159 --> 00:20:07,679
kernel config in this case and then

477
00:20:04,799 --> 00:20:10,559
internally ptxis computes

478
00:20:07,679 --> 00:20:11,760
the diff between what you select in this

479
00:20:10,559 --> 00:20:15,678
k conflict file

480
00:20:11,760 --> 00:20:17,440
and this k config file so you

481
00:20:15,679 --> 00:20:21,280
do a many config for your kernel debug

482
00:20:17,440 --> 00:20:24,159
and then enable these three symbols

483
00:20:21,280 --> 00:20:26,799
and uh these two symbols later get uh

484
00:20:24,159 --> 00:20:29,840
written into the

485
00:20:26,799 --> 00:20:33,360
the k convective and

486
00:20:29,840 --> 00:20:36,720
at the first stage the first line is

487
00:20:33,360 --> 00:20:40,080
an md5 sum of the ref config

488
00:20:36,720 --> 00:20:44,080
in so pdx knows when to

489
00:20:40,080 --> 00:20:48,879
uh recalculate this diff

490
00:20:44,080 --> 00:20:51,280
and k config divs are also the

491
00:20:48,880 --> 00:20:51,919
one of the building blocks for base

492
00:20:51,280 --> 00:20:55,280
layers

493
00:20:51,919 --> 00:20:57,600
so as i said before we had this idea to

494
00:20:55,280 --> 00:21:00,000
have the same structure in our bsp like

495
00:20:57,600 --> 00:21:03,280
in in the upstream ptextist

496
00:21:00,000 --> 00:21:06,080
installation folder and extend

497
00:21:03,280 --> 00:21:06,879
locally where we need it but we have a

498
00:21:06,080 --> 00:21:09,120
better idea

499
00:21:06,880 --> 00:21:10,400
and our problems on computer science can

500
00:21:09,120 --> 00:21:11,678
be solved by another level of

501
00:21:10,400 --> 00:21:14,720
indirection so

502
00:21:11,679 --> 00:21:14,720
we use recursion

503
00:21:14,799 --> 00:21:22,000
in this case we have one bsp

504
00:21:19,280 --> 00:21:23,200
which is a whole bsp by itself it has

505
00:21:22,000 --> 00:21:26,880
the same structure

506
00:21:23,200 --> 00:21:28,480
as before and we want to layer our bsp

507
00:21:26,880 --> 00:21:30,480
on top of it so

508
00:21:28,480 --> 00:21:32,159
all we have to do is just create a link

509
00:21:30,480 --> 00:21:36,000
named base

510
00:21:32,159 --> 00:21:39,120
to this upper or lower layer

511
00:21:36,000 --> 00:21:41,280
in this case and uh everything you

512
00:21:39,120 --> 00:21:42,559
now select in the ptx config is

513
00:21:41,280 --> 00:21:46,080
calculated as a div

514
00:21:42,559 --> 00:21:49,360
to this pdx config on the district layer

515
00:21:46,080 --> 00:21:53,360
and you can

516
00:21:49,360 --> 00:21:56,959
enhance your your bsp

517
00:21:53,360 --> 00:21:59,520
in relation to the lower layer by

518
00:21:56,960 --> 00:22:00,400
adding rules for example and this is

519
00:21:59,520 --> 00:22:02,158
great if you

520
00:22:00,400 --> 00:22:04,159
don't want to share all your rules in

521
00:22:02,159 --> 00:22:05,600
one layer for example your customer only

522
00:22:04,159 --> 00:22:08,000
gets an open source layer

523
00:22:05,600 --> 00:22:09,199
that gives you only an open source layer

524
00:22:08,000 --> 00:22:12,159
and wants to layer

525
00:22:09,200 --> 00:22:12,880
their own property software on top of it

526
00:22:12,159 --> 00:22:15,840
and this is

527
00:22:12,880 --> 00:22:15,840
one way you can do it

528
00:22:17,200 --> 00:22:23,520
some more goodies which got added in the

529
00:22:20,400 --> 00:22:23,520
last stage there is now

530
00:22:25,039 --> 00:22:28,400
a command to give information about one

531
00:22:27,840 --> 00:22:30,799
package

532
00:22:28,400 --> 00:22:32,000
uh and one to give information about

533
00:22:30,799 --> 00:22:34,320
ubsp

534
00:22:32,000 --> 00:22:36,159
and as i already mentioned is the

535
00:22:34,320 --> 00:22:38,399
license report

536
00:22:36,159 --> 00:22:39,200
which basically uh collects all the

537
00:22:38,400 --> 00:22:41,760
information

538
00:22:39,200 --> 00:22:45,039
from the kernel from from the package

539
00:22:41,760 --> 00:22:48,240
recipes and dumps into one big pdf

540
00:22:45,039 --> 00:22:49,039
and also extracts all the the copyright

541
00:22:48,240 --> 00:22:52,240
files

542
00:22:49,039 --> 00:22:54,320
yeah if you want to try this out you can

543
00:22:52,240 --> 00:22:56,400
have a look at districts which is a

544
00:22:54,320 --> 00:22:58,639
pre-configured psp for

545
00:22:56,400 --> 00:23:00,320
a variety of death boards like nitrogen

546
00:22:58,640 --> 00:23:02,720
6 or

547
00:23:00,320 --> 00:23:05,520
even the raspberry pi some versions of

548
00:23:02,720 --> 00:23:10,240
it not the 4 version sadly

549
00:23:05,520 --> 00:23:10,240
and you can also use an qmo if you want

550
00:23:10,870 --> 00:23:15,918
[Music]

551
00:23:12,159 --> 00:23:17,679
short things about contribution you can

552
00:23:15,919 --> 00:23:19,200
patch the sand patches patches are

553
00:23:17,679 --> 00:23:22,559
welcome

554
00:23:19,200 --> 00:23:26,400
currently about 85 percent of patches

555
00:23:22,559 --> 00:23:37,840
are in-house but maybe the changes

556
00:23:26,400 --> 00:23:37,840
yeah so are there questions

557
00:23:38,340 --> 00:23:41,439
[Applause]

558
00:23:49,919 --> 00:23:54,240
so the my package example that you

559
00:23:53,600 --> 00:23:58,158
showed us

560
00:23:54,240 --> 00:24:03,679
has um a usb in the in the prepare

561
00:23:58,159 --> 00:24:07,440
yeah section it has a d usb on

562
00:24:03,679 --> 00:24:11,200
what um what would you suggest

563
00:24:07,440 --> 00:24:15,200
if i want to have that configurable

564
00:24:11,200 --> 00:24:17,600
um you can add another kconfig symbol

565
00:24:15,200 --> 00:24:18,400
which is dependent on the onto the top

566
00:24:17,600 --> 00:24:21,840
symbol

567
00:24:18,400 --> 00:24:24,960
um so you basically extend this

568
00:24:21,840 --> 00:24:28,879
this symbol by another sub symbol

569
00:24:24,960 --> 00:24:30,720
call like yeah and you can

570
00:24:28,880 --> 00:24:33,440
switch it on and off and then you can

571
00:24:30,720 --> 00:24:36,559
use a macro here

572
00:24:33,440 --> 00:24:39,840
which just looks if this k config symbol

573
00:24:36,559 --> 00:24:40,639
is switched on or off yeah all right and

574
00:24:39,840 --> 00:24:43,439
is this

575
00:24:40,640 --> 00:24:44,240
is this something that is uh halfway

576
00:24:43,440 --> 00:24:46,240
common

577
00:24:44,240 --> 00:24:47,840
in yeah in the packaging i just used a

578
00:24:46,240 --> 00:24:49,120
simple example here but this is really

579
00:24:47,840 --> 00:24:52,480
common

580
00:24:49,120 --> 00:24:56,799
and also for for controlling what

581
00:24:52,480 --> 00:24:58,720
dependencies my package will pull in

582
00:24:56,799 --> 00:25:00,158
in in the cups example which i showed

583
00:24:58,720 --> 00:25:03,760
here you can build cups with

584
00:25:00,159 --> 00:25:05,360
uh many different uh dependencies like

585
00:25:03,760 --> 00:25:09,760
png support or

586
00:25:05,360 --> 00:25:12,080
whatever not yeah and is that

587
00:25:09,760 --> 00:25:12,960
does that have to be then set per

588
00:25:12,080 --> 00:25:16,320
package

589
00:25:12,960 --> 00:25:18,159
in the ptx config yeah this is also

590
00:25:16,320 --> 00:25:20,399
written to the ptx config because

591
00:25:18,159 --> 00:25:22,480
it is in the menu so it gets written

592
00:25:20,400 --> 00:25:25,440
into the ptx yes but does it has to

593
00:25:22,480 --> 00:25:27,200
does it have to be configured per

594
00:25:25,440 --> 00:25:30,159
package

595
00:25:27,200 --> 00:25:31,279
or is there is there some some uh some

596
00:25:30,159 --> 00:25:34,320
standardization

597
00:25:31,279 --> 00:25:35,120
on these on the naming let's say of

598
00:25:34,320 --> 00:25:38,158
these sub

599
00:25:35,120 --> 00:25:39,678
um sub options so that i can set them

600
00:25:38,159 --> 00:25:42,640
globally for the whole image

601
00:25:39,679 --> 00:25:45,279
in one place yeah this is usually for

602
00:25:42,640 --> 00:25:47,520
the whole image yes

603
00:25:45,279 --> 00:25:47,520
okay

604
00:25:50,480 --> 00:25:57,840
okay then i think the time is

605
00:25:53,760 --> 00:25:57,840
up thank you

