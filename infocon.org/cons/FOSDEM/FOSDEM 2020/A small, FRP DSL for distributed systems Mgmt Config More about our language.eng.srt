1
00:00:05,120 --> 00:00:07,839
the next

2
00:00:05,600 --> 00:00:08,959
next speaker james he also gave talk

3
00:00:07,839 --> 00:00:10,160
last year right

4
00:00:08,960 --> 00:00:17,600
and it was an excellent talk so we

5
00:00:10,160 --> 00:00:19,039
invited him again

6
00:00:17,600 --> 00:00:20,320
uh so if you're leaving me quickly

7
00:00:19,039 --> 00:00:21,600
because i have only 20 minutes i'm going

8
00:00:20,320 --> 00:00:22,160
to talk really fast oh and i have a

9
00:00:21,600 --> 00:00:25,199
microphone

10
00:00:22,160 --> 00:00:26,800
thank you so much um

11
00:00:25,199 --> 00:00:28,400
but everyone leaving is going to miss

12
00:00:26,800 --> 00:00:30,720
out

13
00:00:28,400 --> 00:00:33,839
that's okay i'm just teasing hello

14
00:00:30,720 --> 00:00:33,839
that's just for the video right

15
00:00:35,360 --> 00:00:39,360
so i'll start i'll just show you a quick

16
00:00:37,760 --> 00:00:40,719
video from montreal while we're waiting

17
00:00:39,360 --> 00:00:41,519
just to let people get in and out of the

18
00:00:40,719 --> 00:00:43,120
room

19
00:00:41,520 --> 00:00:44,320
i don't know if i showed this video last

20
00:00:43,120 --> 00:00:44,800
year or if i showed the other video i

21
00:00:44,320 --> 00:00:47,680
have some

22
00:00:44,800 --> 00:00:50,000
silly videos it was a little snowy and

23
00:00:47,680 --> 00:00:51,840
slippery and some cars had a bit of a

24
00:00:50,000 --> 00:00:54,000
fun time on the road because the road

25
00:00:51,840 --> 00:00:55,600
slides down ever so slightly

26
00:00:54,000 --> 00:00:57,600
and who has seen this before has someone

27
00:00:55,600 --> 00:01:00,079
seen this okay only a few people so

28
00:00:57,600 --> 00:01:02,640
that's okay

29
00:01:00,079 --> 00:01:04,400
and uh it's worth the minute like that

30
00:01:02,640 --> 00:01:07,280
i'm gonna take away from my talk

31
00:01:04,400 --> 00:01:13,200
uh maybe i can go over two minutes

32
00:01:07,280 --> 00:01:15,920
nothing nothing

33
00:01:13,200 --> 00:01:15,920
have you seen this

34
00:01:16,240 --> 00:01:19,439
it's like this bus that uh for a 20

35
00:01:18,720 --> 00:01:22,560
minute talk

36
00:01:19,439 --> 00:01:24,960
it's tight but

37
00:01:22,560 --> 00:01:26,400
we have to laugh right yeah so the bus

38
00:01:24,960 --> 00:01:29,360
thought he could do better this car is

39
00:01:26,400 --> 00:01:29,360
like trying to get out of there

40
00:01:29,600 --> 00:01:35,919
in a fast way and here comes the bus

41
00:01:33,600 --> 00:01:35,919
boom

42
00:01:38,640 --> 00:01:43,840
yeah well then the bus goes he's still

43
00:01:40,320 --> 00:01:43,839
going can't stop boom

44
00:01:45,040 --> 00:01:52,240
so obviously the police can help

45
00:01:49,040 --> 00:01:54,320
and be part of the solution here

46
00:01:52,240 --> 00:01:58,240
sorry the video the video is kind of

47
00:01:54,320 --> 00:01:58,240
weird because libra office has like bugs

48
00:02:00,560 --> 00:02:04,719
i love libra office but there's bugs

49
00:02:02,320 --> 00:02:06,719
like bugs suck

50
00:02:04,719 --> 00:02:08,799
and then of course city works comes to

51
00:02:06,719 --> 00:02:10,000
help fix the problem

52
00:02:08,800 --> 00:02:11,840
and then after this i'm going to talk

53
00:02:10,000 --> 00:02:22,480
really fast so i'm sorry for that but

54
00:02:11,840 --> 00:02:25,120
that's all i can do

55
00:02:22,480 --> 00:02:26,640
boom all right so uh who am i i'm a

56
00:02:25,120 --> 00:02:28,160
hacker i work on config management i

57
00:02:26,640 --> 00:02:29,760
apologize if i'm going really fast but

58
00:02:28,160 --> 00:02:30,319
there's a lot of material online so you

59
00:02:29,760 --> 00:02:31,760
can

60
00:02:30,319 --> 00:02:32,879
follow what's happening if you missed it

61
00:02:31,760 --> 00:02:34,160
i write a technical blog called the

62
00:02:32,879 --> 00:02:35,280
technical blog of james who's seen it

63
00:02:34,160 --> 00:02:36,640
just raise your hand

64
00:02:35,280 --> 00:02:38,400
my blog if you haven't seen it just

65
00:02:36,640 --> 00:02:41,200
raise your hand so i seem really popular

66
00:02:38,400 --> 00:02:42,720
thank you uh and uh just some background

67
00:02:41,200 --> 00:02:44,640
this is also libreoffice bug

68
00:02:42,720 --> 00:02:46,720
it's just beaker showing that everything

69
00:02:44,640 --> 00:02:50,000
is kind of bad and there's some noise

70
00:02:46,720 --> 00:02:51,599
um but uh sorry about that

71
00:02:50,000 --> 00:02:52,879
uh so anyways long story short uh

72
00:02:51,599 --> 00:02:54,238
everyone says don't reinvent the wheel

73
00:02:52,879 --> 00:02:54,720
but i don't want this like yucky stone

74
00:02:54,239 --> 00:02:57,760
wheel

75
00:02:54,720 --> 00:02:59,280
i want the like fancy wheel and i work

76
00:02:57,760 --> 00:03:01,120
in automation tools and i really believe

77
00:02:59,280 --> 00:03:02,640
that like using a dsl is the way we want

78
00:03:01,120 --> 00:03:04,239
to describe our problems because

79
00:03:02,640 --> 00:03:06,238
we want to build these complex real-time

80
00:03:04,239 --> 00:03:06,720
systems and if you're doing it in a full

81
00:03:06,239 --> 00:03:07,840
fridge

82
00:03:06,720 --> 00:03:09,599
programming language you're gonna have

83
00:03:07,840 --> 00:03:11,120
bugs you're gonna have off by one errors

84
00:03:09,599 --> 00:03:12,480
and if you have an off by one error that

85
00:03:11,120 --> 00:03:13,040
might be like a data center that you

86
00:03:12,480 --> 00:03:14,720
destroy

87
00:03:13,040 --> 00:03:16,720
this is really bad so i talked a bit

88
00:03:14,720 --> 00:03:18,000
about this last year this was my like do

89
00:03:16,720 --> 00:03:21,120
we want a full-fledged language

90
00:03:18,000 --> 00:03:22,800
for all our problems i guess this is the

91
00:03:21,120 --> 00:03:24,480
right room for this no we don't okay

92
00:03:22,800 --> 00:03:26,319
and every tool that thinks that they can

93
00:03:24,480 --> 00:03:28,480
yeah we'll just use python or

94
00:03:26,319 --> 00:03:30,079
even even safer languages anything

95
00:03:28,480 --> 00:03:30,959
basically probably short of haskell and

96
00:03:30,080 --> 00:03:33,120
even then i wouldn't

97
00:03:30,959 --> 00:03:35,599
necessarily agree that a full language

98
00:03:33,120 --> 00:03:37,040
even a

99
00:03:35,599 --> 00:03:38,879
type safe language like haskell is

100
00:03:37,040 --> 00:03:41,679
really the right thing so

101
00:03:38,879 --> 00:03:43,280
um so i have a dsl and we use the dsl to

102
00:03:41,680 --> 00:03:44,239
describe these real-time systems that we

103
00:03:43,280 --> 00:03:46,000
want to automate

104
00:03:44,239 --> 00:03:47,680
tools you might be familiar with like

105
00:03:46,000 --> 00:03:49,760
puppet and ansible and so on

106
00:03:47,680 --> 00:03:50,799
they look at one state of time so they

107
00:03:49,760 --> 00:03:52,079
say we're gonna set up your

108
00:03:50,799 --> 00:03:53,599
infrastructure like this

109
00:03:52,080 --> 00:03:55,760
but they don't actually model the time

110
00:03:53,599 --> 00:03:58,319
component which is what actually changes

111
00:03:55,760 --> 00:03:59,840
day to day load goes up and down error

112
00:03:58,319 --> 00:04:01,359
failure rates go up and down and the

113
00:03:59,840 --> 00:04:02,480
tool has an engine in a language again i

114
00:04:01,360 --> 00:04:03,840
talked about this last year so you have

115
00:04:02,480 --> 00:04:05,040
to see that talk

116
00:04:03,840 --> 00:04:07,280
and it has some interesting properties

117
00:04:05,040 --> 00:04:09,439
again super fast because this is

118
00:04:07,280 --> 00:04:11,120
uh really short and here's just a simple

119
00:04:09,439 --> 00:04:11,439
example so this is a kind of an frp it's

120
00:04:11,120 --> 00:04:13,920
this

121
00:04:11,439 --> 00:04:14,720
functional reactive language that i've

122
00:04:13,920 --> 00:04:16,639
manually

123
00:04:14,720 --> 00:04:18,720
syntax highlighted so imagine you have

124
00:04:16,639 --> 00:04:19,280
this date time function here which is a

125
00:04:18,720 --> 00:04:21,519
stream

126
00:04:19,279 --> 00:04:23,679
of numbers right so everything is a real

127
00:04:21,519 --> 00:04:24,479
time streams of things instead of single

128
00:04:23,680 --> 00:04:26,400
points in time

129
00:04:24,479 --> 00:04:28,080
so this is happens to be part of our

130
00:04:26,400 --> 00:04:29,919
standard library and i'll just show you

131
00:04:28,080 --> 00:04:32,159
a quick example of this

132
00:04:29,919 --> 00:04:33,680
if i run this on the left you can see at

133
00:04:32,160 --> 00:04:35,199
the end it actually is taking all these

134
00:04:33,680 --> 00:04:37,600
different values integrating them

135
00:04:35,199 --> 00:04:39,840
and putting them into a text file this

136
00:04:37,600 --> 00:04:41,680
file resource which is a declaration of

137
00:04:39,840 --> 00:04:43,599
i want this file to have these contents

138
00:04:41,680 --> 00:04:44,240
but since this value this big string

139
00:04:43,600 --> 00:04:46,240
template

140
00:04:44,240 --> 00:04:47,520
happens to change in this case at least

141
00:04:46,240 --> 00:04:50,560
once every second

142
00:04:47,520 --> 00:04:53,919
if we actually watch

143
00:04:50,560 --> 00:04:54,960
this file you can see that it's actually

144
00:04:53,919 --> 00:04:56,880
changing over time

145
00:04:54,960 --> 00:04:59,359
because mgmt notices when the language

146
00:04:56,880 --> 00:05:00,800
has reevaluated it pushes a new

147
00:04:59,360 --> 00:05:02,639
copy of the file to the engine the

148
00:05:00,800 --> 00:05:04,400
engine switches them very quickly

149
00:05:02,639 --> 00:05:06,000
and you can see it's very fast and in

150
00:05:04,400 --> 00:05:07,039
fact one of the inputs i have is this vu

151
00:05:06,000 --> 00:05:08,880
meter so

152
00:05:07,039 --> 00:05:10,479
if i make noise you can see it's even

153
00:05:08,880 --> 00:05:12,479
reading my microphone right now

154
00:05:10,479 --> 00:05:13,520
to take that as another input right so

155
00:05:12,479 --> 00:05:14,719
it's kind of the joke like you could

156
00:05:13,520 --> 00:05:15,919
have your infrastructure running and if

157
00:05:14,720 --> 00:05:17,280
you hear a lot of screaming

158
00:05:15,919 --> 00:05:19,599
maybe the system ins are fighting so you

159
00:05:17,280 --> 00:05:21,039
set everything read only for an hour

160
00:05:19,600 --> 00:05:22,160
right and so that's the basic premise

161
00:05:21,039 --> 00:05:23,520
but i want to show i think i showed that

162
00:05:22,160 --> 00:05:24,160
last year i'm going to show some fancier

163
00:05:23,520 --> 00:05:25,599
stuff

164
00:05:24,160 --> 00:05:26,880
so you can do history of values i'm not

165
00:05:25,600 --> 00:05:28,479
going to talk about that we can do

166
00:05:26,880 --> 00:05:29,440
hysteresis which is super cool but we're

167
00:05:28,479 --> 00:05:31,520
not going to talk about that

168
00:05:29,440 --> 00:05:33,520
i want to show you some different demos

169
00:05:31,520 --> 00:05:35,520
the first is called reversible resources

170
00:05:33,520 --> 00:05:37,840
so the lovely thing about dsls is you

171
00:05:35,520 --> 00:05:39,919
can add into your like core

172
00:05:37,840 --> 00:05:41,198
resources some cool properties and one

173
00:05:39,919 --> 00:05:42,960
of them is called reversibility so

174
00:05:41,199 --> 00:05:46,000
imagine you take the state of something

175
00:05:42,960 --> 00:05:48,000
and you move from state a to state b

176
00:05:46,000 --> 00:05:49,600
most systems don't model this but what

177
00:05:48,000 --> 00:05:51,120
we should be able to do is model the

178
00:05:49,600 --> 00:05:52,720
reverse operation so

179
00:05:51,120 --> 00:05:54,800
an item potent operation to get us to

180
00:05:52,720 --> 00:05:56,479
state b but a reverse operation in

181
00:05:54,800 --> 00:05:57,360
theory should be possible for many types

182
00:05:56,479 --> 00:05:59,440
of resources

183
00:05:57,360 --> 00:06:00,560
and if that's possible that would be

184
00:05:59,440 --> 00:06:03,440
something called reversible

185
00:06:00,560 --> 00:06:03,840
that would be reversible and in this

186
00:06:03,440 --> 00:06:05,759
case

187
00:06:03,840 --> 00:06:07,679
for a file resource if you create a file

188
00:06:05,759 --> 00:06:10,960
and then you run the reverse operation

189
00:06:07,680 --> 00:06:12,319
it would remove the file right

190
00:06:10,960 --> 00:06:14,318
and the way this works is because in

191
00:06:12,319 --> 00:06:16,960
normal tools when you push some code in

192
00:06:14,319 --> 00:06:18,560
for example file so and so and then in

193
00:06:16,960 --> 00:06:19,359
the next git commit that code is just

194
00:06:18,560 --> 00:06:20,880
absent

195
00:06:19,360 --> 00:06:22,639
that's when the reverse operation will

196
00:06:20,880 --> 00:06:23,840
run okay so the whole point of like

197
00:06:22,639 --> 00:06:24,720
putting some code in and then it

198
00:06:23,840 --> 00:06:26,479
disappearing

199
00:06:24,720 --> 00:06:28,240
you'll normally have that file or that

200
00:06:26,479 --> 00:06:28,960
thing laying around on your machine for

201
00:06:28,240 --> 00:06:30,639
whatever reason

202
00:06:28,960 --> 00:06:32,560
so adding this reverse make sure that

203
00:06:30,639 --> 00:06:34,000
the engine says ah i knew this thing was

204
00:06:32,560 --> 00:06:35,600
here in version one of the code

205
00:06:34,000 --> 00:06:37,280
version two makes it go away for some

206
00:06:35,600 --> 00:06:39,759
reason therefore i'm gonna

207
00:06:37,280 --> 00:06:41,919
perform the undo operation okay and just

208
00:06:39,759 --> 00:06:44,400
to show off this a little bit um

209
00:06:41,919 --> 00:06:45,919
i'm gonna show you instead of actually

210
00:06:44,400 --> 00:06:48,239
changing the code each time

211
00:06:45,919 --> 00:06:49,359
i'm gonna just actually run some code

212
00:06:48,240 --> 00:06:51,120
i'll show you the code i'm actually

213
00:06:49,360 --> 00:06:52,880
running and this is all git so you can

214
00:06:51,120 --> 00:06:55,039
so same thing but i just have this mod

215
00:06:52,880 --> 00:06:56,319
function that's basically looking at the

216
00:06:55,039 --> 00:06:58,400
date time in seconds

217
00:06:56,319 --> 00:07:00,400
so basically every four seconds it will

218
00:06:58,400 --> 00:07:03,280
basically make this value become false

219
00:07:00,400 --> 00:07:03,919
can you see that okay um it's cut off oh

220
00:07:03,280 --> 00:07:05,280
that sucks

221
00:07:03,919 --> 00:07:07,359
it's cut off a little bit it'll make

222
00:07:05,280 --> 00:07:08,960
this value become false and so the file

223
00:07:07,360 --> 00:07:10,160
will effectively be gone and the engine

224
00:07:08,960 --> 00:07:11,039
will apply but you could just change the

225
00:07:10,160 --> 00:07:15,280
code version

226
00:07:11,039 --> 00:07:19,680
and do the same so let me just run this

227
00:07:15,280 --> 00:07:23,840
there we go let's remove date time

228
00:07:19,680 --> 00:07:25,599
and if we run this ls

229
00:07:23,840 --> 00:07:27,758
you can actually see we wait four

230
00:07:25,599 --> 00:07:30,159
seconds

231
00:07:27,759 --> 00:07:31,599
and the file appears and then four

232
00:07:30,160 --> 00:07:33,360
seconds go by

233
00:07:31,599 --> 00:07:34,800
and it disappears and it will just

234
00:07:33,360 --> 00:07:35,680
fluctuate back and forth in this case

235
00:07:34,800 --> 00:07:37,360
because i had this

236
00:07:35,680 --> 00:07:39,520
ping pong thing right does that make

237
00:07:37,360 --> 00:07:40,639
sense am i talking way too fast

238
00:07:39,520 --> 00:07:42,719
you're supposed to say yes but that's

239
00:07:40,639 --> 00:07:44,319
okay who's really shy

240
00:07:42,720 --> 00:07:46,080
anyone shy raise your hand so i can pick

241
00:07:44,319 --> 00:07:47,919
on you all right cool

242
00:07:46,080 --> 00:07:49,440
so that's the idea um i could show you

243
00:07:47,919 --> 00:07:50,799
another example where the file mode so

244
00:07:49,440 --> 00:07:52,000
in this case i won't show this example

245
00:07:50,800 --> 00:07:54,240
for time but basically

246
00:07:52,000 --> 00:07:55,599
if you have an existing file and you set

247
00:07:54,240 --> 00:07:56,960
the mode to something and then you undo

248
00:07:55,599 --> 00:07:58,639
it it will undo the mode

249
00:07:56,960 --> 00:08:00,239
same thing for an existing file with

250
00:07:58,639 --> 00:08:02,240
some contents that says hello

251
00:08:00,240 --> 00:08:03,599
and then you remove the file as your

252
00:08:02,240 --> 00:08:05,440
state the reverse operation will

253
00:08:03,599 --> 00:08:07,280
actually restore those file contents

254
00:08:05,440 --> 00:08:09,759
so mgmt the engine is actually secretly

255
00:08:07,280 --> 00:08:12,080
doing a backup of any necessary data

256
00:08:09,759 --> 00:08:13,520
that it needs to restore now i use files

257
00:08:12,080 --> 00:08:15,199
just because it's a simple example

258
00:08:13,520 --> 00:08:16,318
but in practice the resources we care

259
00:08:15,199 --> 00:08:17,360
about doing this with are things like

260
00:08:16,319 --> 00:08:19,599
virtual machines

261
00:08:17,360 --> 00:08:21,280
containers and other real-time things so

262
00:08:19,599 --> 00:08:24,080
with this sort of thing you can have a

263
00:08:21,280 --> 00:08:25,758
if this if we have decided to schedule

264
00:08:24,080 --> 00:08:28,800
this virtual machine on this

265
00:08:25,759 --> 00:08:30,160
physical hardware create this machine

266
00:08:28,800 --> 00:08:31,680
and when that goes to false for some

267
00:08:30,160 --> 00:08:32,560
reason or the machine crashes or

268
00:08:31,680 --> 00:08:34,000
something happens

269
00:08:32,559 --> 00:08:35,679
the remove operation can happen

270
00:08:34,000 --> 00:08:36,958
automatically that's not very well

271
00:08:35,679 --> 00:08:39,679
explained but hopefully

272
00:08:36,958 --> 00:08:40,799
it's good enough for the time i have so

273
00:08:39,679 --> 00:08:42,799
do you want to see some more demos are

274
00:08:40,799 --> 00:08:44,880
you fed up

275
00:08:42,799 --> 00:08:46,800
do you want to see some more demos all

276
00:08:44,880 --> 00:08:48,399
right i know it's early like it's a

277
00:08:46,800 --> 00:08:50,079
who picked this shitty time slot like

278
00:08:48,399 --> 00:08:51,519
nine in the morning come on just kidding

279
00:08:50,080 --> 00:08:53,600
i'm just kidding

280
00:08:51,519 --> 00:08:55,200
okay i'm just i'm just teasing for me

281
00:08:53,600 --> 00:08:56,320
conferences don't start before 10. so

282
00:08:55,200 --> 00:08:58,160
i'm here on a

283
00:08:56,320 --> 00:08:59,600
special special request so here's

284
00:08:58,160 --> 00:09:01,760
something fun i just want to show you

285
00:08:59,600 --> 00:09:02,959
a cyclical state machine so we've all

286
00:09:01,760 --> 00:09:04,640
heard about state machines

287
00:09:02,959 --> 00:09:06,160
here's just the start of the code so

288
00:09:04,640 --> 00:09:07,199
basically we have a state variable which

289
00:09:06,160 --> 00:09:08,719
we pull in

290
00:09:07,200 --> 00:09:10,240
the full code is in git but just the

291
00:09:08,720 --> 00:09:12,880
important parts and the

292
00:09:10,240 --> 00:09:14,640
the first basically big if statement is

293
00:09:12,880 --> 00:09:15,600
if we're in the default state so it's

294
00:09:14,640 --> 00:09:18,080
undefined kind of

295
00:09:15,600 --> 00:09:18,640
or state one we run a little timer here

296
00:09:18,080 --> 00:09:20,240
which

297
00:09:18,640 --> 00:09:22,319
in this case is just a command that

298
00:09:20,240 --> 00:09:24,240
sleeps for one second

299
00:09:22,320 --> 00:09:26,320
and then we have a kv resource which

300
00:09:24,240 --> 00:09:27,279
actually set the state that we want so

301
00:09:26,320 --> 00:09:29,440
the next state

302
00:09:27,279 --> 00:09:30,640
in this case we'll set it to two and

303
00:09:29,440 --> 00:09:31,920
this is just a little edge

304
00:09:30,640 --> 00:09:34,240
in our language it says this first

305
00:09:31,920 --> 00:09:35,279
resource in the dag so the dependency

306
00:09:34,240 --> 00:09:37,040
graph of what runs

307
00:09:35,279 --> 00:09:38,640
happens for the next one and so that

308
00:09:37,040 --> 00:09:40,959
will basically mean that this runs

309
00:09:38,640 --> 00:09:42,080
and then waits a second and then sets it

310
00:09:40,959 --> 00:09:44,079
to state two

311
00:09:42,080 --> 00:09:45,920
it's an frp so the state variable will

312
00:09:44,080 --> 00:09:47,680
end up changing

313
00:09:45,920 --> 00:09:48,959
and so suddenly it will go from being in

314
00:09:47,680 --> 00:09:50,399
this condition branch

315
00:09:48,959 --> 00:09:52,399
to this conditional branch which sets it

316
00:09:50,399 --> 00:09:53,920
to state three state three goes to state

317
00:09:52,399 --> 00:09:56,080
one and so on so it keeps looping

318
00:09:53,920 --> 00:09:57,439
makes sense and the other resource

319
00:09:56,080 --> 00:09:59,360
that's in here is just i actually write

320
00:09:57,440 --> 00:10:03,519
to a file so you can actually see

321
00:09:59,360 --> 00:10:06,560
what's happening and oops state

322
00:10:03,519 --> 00:10:07,279
i think it's this example it is so i'll

323
00:10:06,560 --> 00:10:10,319
just uh

324
00:10:07,279 --> 00:10:12,000
cat star

325
00:10:10,320 --> 00:10:14,000
that abracadabra is from the old file

326
00:10:12,000 --> 00:10:15,519
let's see it remove hello

327
00:10:14,000 --> 00:10:17,519
so you can see it's just changing this

328
00:10:15,519 --> 00:10:20,560
file one two

329
00:10:17,519 --> 00:10:24,079
three one counting with james two

330
00:10:20,560 --> 00:10:25,760
three everyone one two is this fun

331
00:10:24,079 --> 00:10:28,000
so obviously a bit of a contrived

332
00:10:25,760 --> 00:10:28,480
example but the idea again is not to

333
00:10:28,000 --> 00:10:30,320
model

334
00:10:28,480 --> 00:10:32,560
counting because that's dumb the idea is

335
00:10:30,320 --> 00:10:33,680
to model the real time changes in your

336
00:10:32,560 --> 00:10:36,880
infrastructure

337
00:10:33,680 --> 00:10:37,760
over time in a safe dsl so that it's

338
00:10:36,880 --> 00:10:38,959
super safe

339
00:10:37,760 --> 00:10:41,760
and the reason is because we want to

340
00:10:38,959 --> 00:10:43,680
build autonomous systems as systems as

341
00:10:41,760 --> 00:10:45,600
infrastructure people as just

342
00:10:43,680 --> 00:10:46,719
individuals who run and run their main

343
00:10:45,600 --> 00:10:48,800
individuals who want to run their mail

344
00:10:46,720 --> 00:10:50,000
server at home we want to build

345
00:10:48,800 --> 00:10:51,760
something really robust

346
00:10:50,000 --> 00:10:53,200
and the code should take care of things

347
00:10:51,760 --> 00:10:55,519
if there's an error scenario

348
00:10:53,200 --> 00:10:56,240
a hard drive fails the code will notice

349
00:10:55,519 --> 00:10:58,720
this failure

350
00:10:56,240 --> 00:11:00,320
and react to it and build the right

351
00:10:58,720 --> 00:11:01,760
thing make sense yes

352
00:11:00,320 --> 00:11:03,920
that sound you want to see more demos or

353
00:11:01,760 --> 00:11:07,120
you had enough

354
00:11:03,920 --> 00:11:08,800
does anyone want to see another demo yes

355
00:11:07,120 --> 00:11:10,560
okay i'll show you some some boring

356
00:11:08,800 --> 00:11:11,760
demos i have to make it a little bit

357
00:11:10,560 --> 00:11:14,000
more boring

358
00:11:11,760 --> 00:11:15,680
um so i'm going to show you one more

359
00:11:14,000 --> 00:11:20,480
demo iteration

360
00:11:15,680 --> 00:11:22,640
so let's look at this example

361
00:11:20,480 --> 00:11:23,920
so this is a little bit more so we have

362
00:11:22,640 --> 00:11:25,439
no looping construct

363
00:11:23,920 --> 00:11:27,040
no direct looping constructs in the

364
00:11:25,440 --> 00:11:28,959
language why don't we have for loops in

365
00:11:27,040 --> 00:11:32,240
our language

366
00:11:28,959 --> 00:11:32,719
what uh yeah so basically loops are

367
00:11:32,240 --> 00:11:34,160
unsafe

368
00:11:32,720 --> 00:11:36,160
and can produce a lot of problems like

369
00:11:34,160 --> 00:11:38,800
off by one errors and many other things

370
00:11:36,160 --> 00:11:39,760
in functional languages uh long story

371
00:11:38,800 --> 00:11:41,519
they're not safe

372
00:11:39,760 --> 00:11:43,040
but we still want to do things like

373
00:11:41,519 --> 00:11:44,880
iteration right because iteration is how

374
00:11:43,040 --> 00:11:46,560
we get the cpu to do work

375
00:11:44,880 --> 00:11:48,640
and so there's many ways we can do that

376
00:11:46,560 --> 00:11:50,719
one way is actually

377
00:11:48,640 --> 00:11:52,959
edge multiplication so if you look here

378
00:11:50,720 --> 00:11:54,720
these are the the resources

379
00:11:52,959 --> 00:11:56,079
and resources have a unique identifier

380
00:11:54,720 --> 00:11:58,160
which is either a string

381
00:11:56,079 --> 00:11:59,680
or a list of strings that identify them

382
00:11:58,160 --> 00:12:01,040
so if this one here this means we would

383
00:11:59,680 --> 00:12:02,959
have one resource okay

384
00:12:01,040 --> 00:12:04,959
so i'm going to borrow someone do you

385
00:12:02,959 --> 00:12:07,439
want to count can you put up one finger

386
00:12:04,959 --> 00:12:08,880
we're going to count for one resource

387
00:12:07,440 --> 00:12:12,079
it's what oh goodness

388
00:12:08,880 --> 00:12:14,320
sorry thank you let's just do this

389
00:12:12,079 --> 00:12:15,439
how's that so uh we're just getting five

390
00:12:14,320 --> 00:12:18,480
more minutes real quick and then

391
00:12:15,440 --> 00:12:21,519
yeah no problem um

392
00:12:18,480 --> 00:12:22,880
so this is one resource here at the top

393
00:12:21,519 --> 00:12:25,040
down here we have this names variable

394
00:12:22,880 --> 00:12:27,279
which is a list of strings so that would

395
00:12:25,040 --> 00:12:29,360
be how many resources total now the

396
00:12:27,279 --> 00:12:31,439
first one plus

397
00:12:29,360 --> 00:12:32,639
three total right so two plus so the

398
00:12:31,440 --> 00:12:36,079
first one plus three

399
00:12:32,639 --> 00:12:39,040
down here we have another two um

400
00:12:36,079 --> 00:12:41,359
and then down here we have three more so

401
00:12:39,040 --> 00:12:43,599
total of what

402
00:12:41,360 --> 00:12:44,880
eight okay now here's the cool thing so

403
00:12:43,600 --> 00:12:46,639
now we have the dependencies

404
00:12:44,880 --> 00:12:48,880
so let's count the dependencies which

405
00:12:46,639 --> 00:12:51,360
are these uh edges between the resources

406
00:12:48,880 --> 00:12:52,079
we're building a dag and so the first

407
00:12:51,360 --> 00:12:55,839
one here

408
00:12:52,079 --> 00:12:59,599
is names so we have um

409
00:12:55,839 --> 00:13:01,680
number of names is how many there's two

410
00:12:59,600 --> 00:13:03,680
um and there's how many resources here

411
00:13:01,680 --> 00:13:05,439
that depend on that

412
00:13:03,680 --> 00:13:07,279
there's two so it actually multiplies

413
00:13:05,440 --> 00:13:09,120
out so 2 times 2 is

414
00:13:07,279 --> 00:13:10,880
that's very good so we have 4 and then

415
00:13:09,120 --> 00:13:14,000
down here we have

416
00:13:10,880 --> 00:13:14,720
this this edge that's in line that's not

417
00:13:14,000 --> 00:13:18,560
in line

418
00:13:14,720 --> 00:13:21,600
so we have how many edges here names

419
00:13:18,560 --> 00:13:24,319
name is two and this one is how many

420
00:13:21,600 --> 00:13:26,399
so that's how many two times three plus

421
00:13:24,320 --> 00:13:27,920
the original four

422
00:13:26,399 --> 00:13:29,440
from before so yeah so we have eight

423
00:13:27,920 --> 00:13:32,880
resources and

424
00:13:29,440 --> 00:13:34,639
ten edges i know doing math is fun

425
00:13:32,880 --> 00:13:36,399
and if we look we'll just run here you

426
00:13:34,639 --> 00:13:38,079
can see it builds the right thing so

427
00:13:36,399 --> 00:13:39,440
eight vertices and ten edges

428
00:13:38,079 --> 00:13:41,040
and you can actually see them all and so

429
00:13:39,440 --> 00:13:42,079
on so that's one way we actually end up

430
00:13:41,040 --> 00:13:44,480
using iteration

431
00:13:42,079 --> 00:13:46,719
as a cool concept we actually will also

432
00:13:44,480 --> 00:13:48,240
have map reduce and filter

433
00:13:46,720 --> 00:13:50,160
funny enough it turns out like functions

434
00:13:48,240 --> 00:13:51,360
as values i'm having a bit of trouble

435
00:13:50,160 --> 00:13:52,160
with my implementation and getting it

436
00:13:51,360 --> 00:13:53,680
exactly right

437
00:13:52,160 --> 00:13:55,360
so those functions actually don't exist

438
00:13:53,680 --> 00:13:57,680
yet but they're coming pretty soon

439
00:13:55,360 --> 00:13:58,800
and if you're really good at like lexing

440
00:13:57,680 --> 00:14:00,638
and parsing and

441
00:13:58,800 --> 00:14:02,079
compilers and you can help me finish

442
00:14:00,639 --> 00:14:04,639
this patch that would be awesome because

443
00:14:02,079 --> 00:14:05,839
then we can do map reduce and stuff too

444
00:14:04,639 --> 00:14:07,920
i've got a few more minutes so i'm going

445
00:14:05,839 --> 00:14:09,199
to show you

446
00:14:07,920 --> 00:14:12,560
one more example i'm going to show you

447
00:14:09,199 --> 00:14:12,560
this example so

448
00:14:13,760 --> 00:14:17,120
so here is an example of fortunately no

449
00:14:15,920 --> 00:14:19,279
syntax highlighting

450
00:14:17,120 --> 00:14:20,639
where we build a lambda function x which

451
00:14:19,279 --> 00:14:21,839
is x plus x

452
00:14:20,639 --> 00:14:23,360
and so here's the cool thing about the

453
00:14:21,839 --> 00:14:24,000
language we want our language to be very

454
00:14:23,360 --> 00:14:25,839
safe

455
00:14:24,000 --> 00:14:28,000
so when the code is running just after

456
00:14:25,839 --> 00:14:29,040
compile time everything is static all

457
00:14:28,000 --> 00:14:31,519
the types are static

458
00:14:29,040 --> 00:14:33,040
like there's no weird stuff that goes on

459
00:14:31,519 --> 00:14:33,839
however it's annoying to think about

460
00:14:33,040 --> 00:14:35,839
things that way

461
00:14:33,839 --> 00:14:36,800
because functions like printf and things

462
00:14:35,839 --> 00:14:38,320
where you can have many different

463
00:14:36,800 --> 00:14:39,199
function signatures can be quite

464
00:14:38,320 --> 00:14:41,440
difficult

465
00:14:39,199 --> 00:14:42,800
so as a result before compile time

466
00:14:41,440 --> 00:14:44,720
everything is polymorphic

467
00:14:42,800 --> 00:14:46,959
and it attempts to find out what type

468
00:14:44,720 --> 00:14:47,760
would work and then if it finds a single

469
00:14:46,959 --> 00:14:49,760
solution

470
00:14:47,760 --> 00:14:50,880
it compiles successfully so in that case

471
00:14:49,760 --> 00:14:52,480
you can see this add

472
00:14:50,880 --> 00:14:54,480
this add function right here this ad

473
00:14:52,480 --> 00:14:57,040
lambda can work with an integer

474
00:14:54,480 --> 00:14:58,000
because plus is also polymorphic before

475
00:14:57,040 --> 00:14:59,839
compile time

476
00:14:58,000 --> 00:15:01,360
so two plus two would equal four and

477
00:14:59,839 --> 00:15:03,279
then if it's a string you can do that

478
00:15:01,360 --> 00:15:06,399
here and you can see the value here

479
00:15:03,279 --> 00:15:07,920
is uh hello plus hello does that make

480
00:15:06,399 --> 00:15:09,120
sense that's kind of like the cool hack

481
00:15:07,920 --> 00:15:10,880
where we get the fun

482
00:15:09,120 --> 00:15:13,040
user friendliness of polymorphism but

483
00:15:10,880 --> 00:15:14,720
without the like danger of

484
00:15:13,040 --> 00:15:17,279
string plus and uh what should we do

485
00:15:14,720 --> 00:15:18,959
python basically disasters

486
00:15:17,279 --> 00:15:21,360
so and i'll show you that example just

487
00:15:18,959 --> 00:15:22,479
for fun and you can see basically two

488
00:15:21,360 --> 00:15:25,519
plus two equals four

489
00:15:22,480 --> 00:15:28,320
and then hello plus hello is big hello

490
00:15:25,519 --> 00:15:29,360
makes sense not as fun demo wise but

491
00:15:28,320 --> 00:15:30,560
hopefully gets you thinking about the

492
00:15:29,360 --> 00:15:32,079
language and so on

493
00:15:30,560 --> 00:15:34,399
um i won't have much time so i'll just

494
00:15:32,079 --> 00:15:36,560
finish i've got five minutes left

495
00:15:34,399 --> 00:15:37,519
i'll just go through the end and if we

496
00:15:36,560 --> 00:15:38,399
have time and then i'll show you one

497
00:15:37,519 --> 00:15:39,680
more demo

498
00:15:38,399 --> 00:15:40,800
there's a lot still left to do so i

499
00:15:39,680 --> 00:15:41,758
think i'm starting to use this tool in

500
00:15:40,800 --> 00:15:43,599
production now

501
00:15:41,759 --> 00:15:46,160
and hopefully you can too and if you all

502
00:15:43,600 --> 00:15:49,199
are good at uh functional languages or

503
00:15:46,160 --> 00:15:50,959
reactive languages or um

504
00:15:49,199 --> 00:15:52,000
dsls in general and compilers i would

505
00:15:50,959 --> 00:15:52,880
love your help because i don't know

506
00:15:52,000 --> 00:15:54,720
anything about this stuff

507
00:15:52,880 --> 00:15:56,399
i'm just inventing this as i go along

508
00:15:54,720 --> 00:15:58,320
like if uh

509
00:15:56,399 --> 00:15:59,279
conor elliott like the frp guy saw my

510
00:15:58,320 --> 00:16:00,160
talk he'd be like what are you doing

511
00:15:59,279 --> 00:16:01,439
it's not called that

512
00:16:00,160 --> 00:16:03,439
but i've renamed terms to make it

513
00:16:01,440 --> 00:16:06,079
accessible and friendly to

514
00:16:03,440 --> 00:16:06,880
the mainstream audience that i want to

515
00:16:06,079 --> 00:16:08,319
meet with this

516
00:16:06,880 --> 00:16:10,240
and i think if we want frp and these

517
00:16:08,320 --> 00:16:11,759
kind of dsls to become more widespread

518
00:16:10,240 --> 00:16:13,839
we have to sort of make them accessible

519
00:16:11,759 --> 00:16:15,839
to non-frp specialists

520
00:16:13,839 --> 00:16:16,880
so if you are an frp specialist and you

521
00:16:15,839 --> 00:16:18,320
want to help me

522
00:16:16,880 --> 00:16:20,399
fix the little parts that i got wrong

523
00:16:18,320 --> 00:16:21,920
i'd love to hear from you so

524
00:16:20,399 --> 00:16:23,839
more function the standard library would

525
00:16:21,920 --> 00:16:24,639
love to have more resources in the tool

526
00:16:23,839 --> 00:16:26,560
itself

527
00:16:24,639 --> 00:16:28,240
new features there's actually uh this

528
00:16:26,560 --> 00:16:28,638
function is values implementation it's

529
00:16:28,240 --> 00:16:30,160
not

530
00:16:28,639 --> 00:16:31,920
complete i'm still missing a few edge

531
00:16:30,160 --> 00:16:34,639
cases which are tricky

532
00:16:31,920 --> 00:16:36,399
um and it's programming it so it's hard

533
00:16:34,639 --> 00:16:37,839
how can you help this is all about you

534
00:16:36,399 --> 00:16:39,440
you can use this test it patch it share

535
00:16:37,839 --> 00:16:40,480
it with your friends document it start

536
00:16:39,440 --> 00:16:41,440
on github blog

537
00:16:40,480 --> 00:16:43,519
you're smiling because you're going to

538
00:16:41,440 --> 00:16:45,040
do all these things right

539
00:16:43,519 --> 00:16:46,399
tweet it if you have twitter discuss it

540
00:16:45,040 --> 00:16:47,839
hack on it just hack on this stuff like

541
00:16:46,399 --> 00:16:49,759
it's a free software conscience all the

542
00:16:47,839 --> 00:16:52,160
demos all the codes all online

543
00:16:49,759 --> 00:16:53,440
and git and so i used to work at this

544
00:16:52,160 --> 00:16:54,800
company called red hat and i left about

545
00:16:53,440 --> 00:16:55,519
a year and a half ago to try and do this

546
00:16:54,800 --> 00:16:57,519
full time

547
00:16:55,519 --> 00:16:59,120
which kind of sucks because i'm just

548
00:16:57,519 --> 00:17:00,639
living off my savings so if you want to

549
00:16:59,120 --> 00:17:02,639
help

550
00:17:00,639 --> 00:17:04,640
donate on patreon if you like because

551
00:17:02,639 --> 00:17:07,199
finding a hacker it's very sexy

552
00:17:04,640 --> 00:17:08,319
so um the other thing to try and make

553
00:17:07,199 --> 00:17:10,720
this a full free

554
00:17:08,319 --> 00:17:11,599
full-fledged product in this year i'm

555
00:17:10,720 --> 00:17:13,520
going to be actually

556
00:17:11,599 --> 00:17:15,039
trying to put like corporate logos on

557
00:17:13,520 --> 00:17:18,319
the website which we are making

558
00:17:15,039 --> 00:17:20,879
so selling support services and

559
00:17:18,319 --> 00:17:21,760
sponsored by your cool company that's

560
00:17:20,880 --> 00:17:25,199
not evil

561
00:17:21,760 --> 00:17:29,440
um yeah i'm almost done

562
00:17:25,199 --> 00:17:31,200
so let's just recap um

563
00:17:29,440 --> 00:17:32,799
he's putting his cap back on his pen

564
00:17:31,200 --> 00:17:34,400
it's a bad joke so there's an irc

565
00:17:32,799 --> 00:17:35,200
channel there's a twitter account a

566
00:17:34,400 --> 00:17:36,640
mailing list

567
00:17:35,200 --> 00:17:38,400
there's a technical blog of james which

568
00:17:36,640 --> 00:17:39,360
you all know about i'm going to try and

569
00:17:38,400 --> 00:17:41,840
blog more so

570
00:17:39,360 --> 00:17:43,280
have a look i'm purple idea on twitter

571
00:17:41,840 --> 00:17:43,678
and github and all these things so you

572
00:17:43,280 --> 00:17:45,840
can

573
00:17:43,679 --> 00:17:47,600
ping me and say you like this talk and

574
00:17:45,840 --> 00:17:49,199
i'm actually going to gent later tonight

575
00:17:47,600 --> 00:17:50,080
because there's config management camp

576
00:17:49,200 --> 00:17:51,840
which is a cool

577
00:17:50,080 --> 00:17:53,678
conference about automation stuff that

578
00:17:51,840 --> 00:17:55,520
i'll be giving

579
00:17:53,679 --> 00:17:56,880
a longer more in-depth talk about so if

580
00:17:55,520 --> 00:17:58,799
you want to see more

581
00:17:56,880 --> 00:18:00,320
if you really like this talk please ddos

582
00:17:58,799 --> 00:18:01,918
the organizers by going up and saying

583
00:18:00,320 --> 00:18:03,918
hey i really like james's talk

584
00:18:01,919 --> 00:18:06,000
um and if you go on the website there's

585
00:18:03,919 --> 00:18:08,080
actually a link to the feedback form

586
00:18:06,000 --> 00:18:09,919
under the talk link it's kind of hidden

587
00:18:08,080 --> 00:18:12,799
so please go takes two seconds

588
00:18:09,919 --> 00:18:14,400
tell me you liked it or or not and if

589
00:18:12,799 --> 00:18:15,918
you promise to use a sticker i will give

590
00:18:14,400 --> 00:18:17,520
you a sticker they're crazy expensive

591
00:18:15,919 --> 00:18:18,960
but then you can have a cool laptop like

592
00:18:17,520 --> 00:18:29,840
me um

593
00:18:18,960 --> 00:18:29,840
that's it thank you very much

594
00:18:30,240 --> 00:18:32,320
you

