1
00:00:05,440 --> 00:00:08,080
okay

2
00:00:06,240 --> 00:00:09,519
the next speaker is jacob who's going to

3
00:00:08,080 --> 00:00:13,840
give a short update

4
00:00:09,519 --> 00:00:17,440
on helen so welcome

5
00:00:13,840 --> 00:00:20,640
it's good to see so many familiar faces

6
00:00:17,440 --> 00:00:23,519
in this short update talk i will just go

7
00:00:20,640 --> 00:00:25,680
through uh the last year in helena's

8
00:00:23,519 --> 00:00:30,000
basically from the last fosdem

9
00:00:25,680 --> 00:00:33,120
to this date but first a short uh

10
00:00:30,000 --> 00:00:37,040
recapitulation of what helenos is so

11
00:00:33,120 --> 00:00:39,040
it's a portable yeah it's a portable

12
00:00:37,040 --> 00:00:41,200
microkernel based multi-server operating

13
00:00:39,040 --> 00:00:42,000
system i think it's fair to say that

14
00:00:41,200 --> 00:00:44,719
it's

15
00:00:42,000 --> 00:00:45,920
also a distribution of itself so unlike

16
00:00:44,719 --> 00:00:47,960
some of the

17
00:00:45,920 --> 00:00:50,239
l4 projects that are more like

18
00:00:47,960 --> 00:00:51,760
unassembled lego bricks this is also

19
00:00:50,239 --> 00:00:54,879
made of lego bricks but

20
00:00:51,760 --> 00:00:57,440
assembled already it's uh

21
00:00:54,879 --> 00:00:59,519
designed and implemented from scratch

22
00:00:57,440 --> 00:01:02,399
it's not

23
00:00:59,520 --> 00:01:04,559
deliberately trying to mimic some other

24
00:01:02,399 --> 00:01:08,080
operating system or api even though

25
00:01:04,559 --> 00:01:12,000
we do provide a limited compatibility

26
00:01:08,080 --> 00:01:15,200
posix layer it's written in c

27
00:01:12,000 --> 00:01:15,840
and to a small degree also in c plus

28
00:01:15,200 --> 00:01:20,560
plus

29
00:01:15,840 --> 00:01:20,560
and it's almost 100

30
00:01:20,960 --> 00:01:28,798
our own code and it's composed

31
00:01:24,640 --> 00:01:30,640
of very fine grade grained components

32
00:01:28,799 --> 00:01:32,960
i will talk about that a little bit

33
00:01:30,640 --> 00:01:32,960
later

34
00:01:33,119 --> 00:01:37,360
so this is the main timeline of events

35
00:01:35,439 --> 00:01:40,880
that took place last year

36
00:01:37,360 --> 00:01:44,079
so one of those big events uh happened

37
00:01:40,880 --> 00:01:45,920
in may it was um the first and also the

38
00:01:44,079 --> 00:01:49,600
only release last year

39
00:01:45,920 --> 00:01:52,799
uh 0.9.1

40
00:01:49,600 --> 00:01:55,919
codename armonia i was once asked by

41
00:01:52,799 --> 00:01:56,399
lazar i guess why armonia the reason is

42
00:01:55,920 --> 00:01:58,880
that

43
00:01:56,399 --> 00:01:59,680
in that port sorry in that port in that

44
00:01:58,880 --> 00:02:03,520
release

45
00:01:59,680 --> 00:02:07,600
we merged the arm 64 port

46
00:02:03,520 --> 00:02:09,919
made by uh petra somewhere there

47
00:02:07,600 --> 00:02:11,920
the author is present i guess in this

48
00:02:09,919 --> 00:02:15,040
room where are you

49
00:02:11,920 --> 00:02:16,480
over there and also some other

50
00:02:15,040 --> 00:02:20,319
arm work so that's why it is called

51
00:02:16,480 --> 00:02:23,599
armonia i also participated in the l4

52
00:02:20,319 --> 00:02:27,200
re alpha re retreat for retreat uh

53
00:02:23,599 --> 00:02:27,920
shortly where i worked on making jalenos

54
00:02:27,200 --> 00:02:32,640
work on the

55
00:02:27,920 --> 00:02:36,160
l4e hypervisor on x86

56
00:02:32,640 --> 00:02:39,599
in july there was this suse suseh creek

57
00:02:36,160 --> 00:02:42,319
where some of our developers worked

58
00:02:39,599 --> 00:02:45,599
on implementing the standard c plus plus

59
00:02:42,319 --> 00:02:45,599
library future header

60
00:02:45,760 --> 00:02:48,879
and in august there was the biggest

61
00:02:48,160 --> 00:02:51,120
helenos

62
00:02:48,879 --> 00:02:52,879
event of the year the helenos camp this

63
00:02:51,120 --> 00:02:56,239
time it was only

64
00:02:52,879 --> 00:02:58,879
three people so and no children and no

65
00:02:56,239 --> 00:03:01,360
spouses were involved so we call it uh

66
00:02:58,879 --> 00:03:04,399
quasi camp

67
00:03:01,360 --> 00:03:06,720
but it produced most of the topic for uh

68
00:03:04,400 --> 00:03:09,920
for this talk so it was

69
00:03:06,720 --> 00:03:12,560
important definitely so

70
00:03:09,920 --> 00:03:13,280
what things made it to the helenos

71
00:03:12,560 --> 00:03:16,560
master

72
00:03:13,280 --> 00:03:17,120
and other branches so we already

73
00:03:16,560 --> 00:03:20,400
mentioned

74
00:03:17,120 --> 00:03:20,879
uh c plus plus a future header uh hacked

75
00:03:20,400 --> 00:03:23,280
on

76
00:03:20,879 --> 00:03:24,079
during the suse hack week that's already

77
00:03:23,280 --> 00:03:27,599
merged

78
00:03:24,080 --> 00:03:29,840
then there was a really big feature

79
00:03:27,599 --> 00:03:31,679
uh merged into master which is the

80
00:03:29,840 --> 00:03:32,640
switch of the build system from the old

81
00:03:31,680 --> 00:03:36,000
make

82
00:03:32,640 --> 00:03:38,559
into or to the meson build system

83
00:03:36,000 --> 00:03:39,120
that finally gave us uh the capability

84
00:03:38,560 --> 00:03:42,560
to do

85
00:03:39,120 --> 00:03:45,360
proper out of three builds we are still

86
00:03:42,560 --> 00:03:49,519
recovering from the effects of uh

87
00:03:45,360 --> 00:03:53,439
from this switch especially in our

88
00:03:49,519 --> 00:03:55,599
infrastructure and testing setups

89
00:03:53,439 --> 00:03:56,799
that's also the reason by the way why

90
00:03:55,599 --> 00:04:00,480
there was only one

91
00:03:56,799 --> 00:04:01,200
release last year because this due to a

92
00:04:00,480 --> 00:04:03,280
showstopper

93
00:04:01,200 --> 00:04:05,920
showstopper a blocker it prevented a

94
00:04:03,280 --> 00:04:09,439
second release

95
00:04:05,920 --> 00:04:12,319
besides of that i work on the ipc

96
00:04:09,439 --> 00:04:13,359
version 2 branch i will talk about that

97
00:04:12,319 --> 00:04:16,959
in just a couple of

98
00:04:13,360 --> 00:04:20,400
seconds martin jetski worked on

99
00:04:16,959 --> 00:04:23,759
turning helenos into a any kernel

100
00:04:20,399 --> 00:04:26,479
and aircasa buddha

101
00:04:23,759 --> 00:04:26,960
who was not at the camp but at the same

102
00:04:26,479 --> 00:04:29,120
time

103
00:04:26,960 --> 00:04:30,799
until today has been working on a

104
00:04:29,120 --> 00:04:33,759
replacement for our compositor

105
00:04:30,800 --> 00:04:33,759
the display server

106
00:04:34,560 --> 00:04:40,639
uh so this is um let's let's start

107
00:04:37,840 --> 00:04:41,359
talking about the ipc version 2 stuff

108
00:04:40,639 --> 00:04:43,440
this is a

109
00:04:41,360 --> 00:04:45,040
recapitulation from my talk from two

110
00:04:43,440 --> 00:04:47,759
years ago

111
00:04:45,040 --> 00:04:50,000
on this picture you can see how i how

112
00:04:47,759 --> 00:04:53,199
helena's ipc

113
00:04:50,000 --> 00:04:55,120
works so there are some tasks that are

114
00:04:53,199 --> 00:04:56,000
communicating with each other the orange

115
00:04:55,120 --> 00:04:59,040
one that's

116
00:04:56,000 --> 00:05:00,800
a client it has

117
00:04:59,040 --> 00:05:03,039
it has some capabilities so it has a

118
00:05:00,800 --> 00:05:06,639
capability to a kernel object called

119
00:05:03,039 --> 00:05:07,680
a phone phone is connected to another

120
00:05:06,639 --> 00:05:10,320
task's

121
00:05:07,680 --> 00:05:12,800
answer box and the answer box that's a

122
00:05:10,320 --> 00:05:13,680
multi-cue object which contains cues for

123
00:05:12,800 --> 00:05:15,919
receiving

124
00:05:13,680 --> 00:05:17,440
requests from other tasks and also

125
00:05:15,919 --> 00:05:20,560
replies from

126
00:05:17,440 --> 00:05:22,960
other tasks and

127
00:05:20,560 --> 00:05:24,720
as you can see we have three tasks

128
00:05:22,960 --> 00:05:26,799
communicating which means that the blue

129
00:05:24,720 --> 00:05:30,160
one which is the recipient of the

130
00:05:26,800 --> 00:05:32,639
orange tasks requests can either

131
00:05:30,160 --> 00:05:34,160
directly reply to a request or it can

132
00:05:32,639 --> 00:05:37,680
forward it to a third

133
00:05:34,160 --> 00:05:40,960
task as is the case now

134
00:05:37,680 --> 00:05:41,520
and then when the green tasks on this

135
00:05:40,960 --> 00:05:43,919
picture

136
00:05:41,520 --> 00:05:45,919
answers the request the answer goes to

137
00:05:43,919 --> 00:05:49,198
the answer box of the orange task

138
00:05:45,919 --> 00:05:50,479
from where the orange tasks can fetch

139
00:05:49,199 --> 00:05:53,280
the answer

140
00:05:50,479 --> 00:05:53,599
what i wanted to mention on this picture

141
00:05:53,280 --> 00:05:57,359
is

142
00:05:53,600 --> 00:06:00,000
the fact that in this setup in this

143
00:05:57,360 --> 00:06:04,720
version of leno's ipc

144
00:06:00,000 --> 00:06:07,600
the message which is called the ipc call

145
00:06:04,720 --> 00:06:09,280
is uh always allocated by the kernel is

146
00:06:07,600 --> 00:06:11,919
fixed size

147
00:06:09,280 --> 00:06:14,239
there is a limit on uh on the size of

148
00:06:11,919 --> 00:06:17,280
the buffer that can be attached to it

149
00:06:14,240 --> 00:06:18,960
and is just one

150
00:06:17,280 --> 00:06:20,799
like it can be used only once so the

151
00:06:18,960 --> 00:06:23,359
kernel always allocates it

152
00:06:20,800 --> 00:06:23,919
anew then it's sent to all the other

153
00:06:23,360 --> 00:06:27,120
tasks

154
00:06:23,919 --> 00:06:30,400
answered and then it's deallocated so

155
00:06:27,120 --> 00:06:33,600
you can think it's a little bit wasteful

156
00:06:30,400 --> 00:06:36,479
then i mentioned the phones which which

157
00:06:33,600 --> 00:06:37,039
if you have capabilities that kind of

158
00:06:36,479 --> 00:06:40,560
point

159
00:06:37,039 --> 00:06:41,759
uh to some destination endpoint for

160
00:06:40,560 --> 00:06:44,240
communication can be

161
00:06:41,759 --> 00:06:45,840
understood as a little bit unnecessary

162
00:06:44,240 --> 00:06:48,479
especially if you can have

163
00:06:45,840 --> 00:06:50,000
more of these objects that represent

164
00:06:48,479 --> 00:06:52,479
endpoints which is the answer books in

165
00:06:50,000 --> 00:06:55,120
this case

166
00:06:52,479 --> 00:06:57,199
also one important limitation of the

167
00:06:55,120 --> 00:06:59,120
helenos ipc is the fact that

168
00:06:57,199 --> 00:07:00,960
it was possible to have only one of

169
00:06:59,120 --> 00:07:02,400
these answer boxes per task which is

170
00:07:00,960 --> 00:07:06,799
something that

171
00:07:02,400 --> 00:07:09,679
we were trying to fix or to limit

172
00:07:06,800 --> 00:07:11,280
so two years ago i raised some questions

173
00:07:09,680 --> 00:07:13,680
like where would the answer go if you

174
00:07:11,280 --> 00:07:16,318
had more answer boxes and also

175
00:07:13,680 --> 00:07:16,880
how do you wait for multiple requests

176
00:07:16,319 --> 00:07:19,919
and

177
00:07:16,880 --> 00:07:20,880
also replies to an ipc and this is

178
00:07:19,919 --> 00:07:24,560
something that

179
00:07:20,880 --> 00:07:28,080
i try to solve in ipc version 2.

180
00:07:24,560 --> 00:07:28,960
it's centered around some new kernel

181
00:07:28,080 --> 00:07:32,000
objects

182
00:07:28,960 --> 00:07:33,359
specifically an ipc buffer which is

183
00:07:32,000 --> 00:07:36,080
pre-allocated by

184
00:07:33,360 --> 00:07:37,360
the user so you get a capability to an

185
00:07:36,080 --> 00:07:40,800
arbitrary

186
00:07:37,360 --> 00:07:44,080
large piece of memory

187
00:07:40,800 --> 00:07:47,120
that is reusable so it's not thrown away

188
00:07:44,080 --> 00:07:50,000
after after it's first used in the ipc

189
00:07:47,120 --> 00:07:52,879
and in ipc you basically only pass this

190
00:07:50,000 --> 00:07:56,160
capability to this buffer you do not

191
00:07:52,879 --> 00:07:57,599
kind of allocate anything else or

192
00:07:56,160 --> 00:08:00,160
yeah you just pass the capability

193
00:07:57,599 --> 00:08:02,000
basically then there is the ipc endpoint

194
00:08:00,160 --> 00:08:04,080
which is a replacement for answer box

195
00:08:02,000 --> 00:08:04,879
you can have as many as you like of

196
00:08:04,080 --> 00:08:08,719
these

197
00:08:04,879 --> 00:08:10,080
and the third uh kind of kernel objects

198
00:08:08,720 --> 00:08:12,400
is

199
00:08:10,080 --> 00:08:15,599
like a cap list which is a container for

200
00:08:12,400 --> 00:08:19,520
capabilities it's something like in mach

201
00:08:15,599 --> 00:08:21,280
there is this thing called port sets

202
00:08:19,520 --> 00:08:23,359
it basically allows you to have a

203
00:08:21,280 --> 00:08:24,878
capability to a kernel object into which

204
00:08:23,360 --> 00:08:27,680
you

205
00:08:24,879 --> 00:08:31,520
put stuff and then you can refer to this

206
00:08:27,680 --> 00:08:34,640
set of objects by one capability

207
00:08:31,520 --> 00:08:38,079
so how does how does this uh work

208
00:08:34,640 --> 00:08:41,120
in practice so the client

209
00:08:38,080 --> 00:08:42,320
allocates a buffer the server allocates

210
00:08:41,120 --> 00:08:45,440
an endpoint

211
00:08:42,320 --> 00:08:47,040
and then the client

212
00:08:45,440 --> 00:08:48,720
basically sends the buffer to the

213
00:08:47,040 --> 00:08:50,959
endpoint

214
00:08:48,720 --> 00:08:52,839
the server then vent then waits on the

215
00:08:50,959 --> 00:08:55,518
endpoint and

216
00:08:52,839 --> 00:08:56,640
supplies a capability which is not yet

217
00:08:55,519 --> 00:09:00,959
associated with

218
00:08:56,640 --> 00:09:04,160
any object then when uh the buffer comes

219
00:09:00,959 --> 00:09:05,279
the kernel makes the association uh the

220
00:09:04,160 --> 00:09:07,600
server can do

221
00:09:05,279 --> 00:09:08,959
can put its uh answer into the buffer

222
00:09:07,600 --> 00:09:11,600
and can finish

223
00:09:08,959 --> 00:09:13,199
the buffer by basically replying to it

224
00:09:11,600 --> 00:09:16,480
and then

225
00:09:13,200 --> 00:09:18,240
the client can wait on the capability of

226
00:09:16,480 --> 00:09:19,440
the buffer this also answers the

227
00:09:18,240 --> 00:09:22,560
question of

228
00:09:19,440 --> 00:09:25,360
like to which answer box does

229
00:09:22,560 --> 00:09:25,920
the reply go it doesn't go to any answer

230
00:09:25,360 --> 00:09:28,240
box

231
00:09:25,920 --> 00:09:30,959
you can just wait on the handle of the

232
00:09:28,240 --> 00:09:30,959
buffer itself

233
00:09:31,279 --> 00:09:34,720
i would like to emphasize that in this

234
00:09:33,360 --> 00:09:36,720
bluish area

235
00:09:34,720 --> 00:09:38,640
no allocations take place so everything

236
00:09:36,720 --> 00:09:40,880
is allocated in the yellow area

237
00:09:38,640 --> 00:09:43,360
and when the communication takes place

238
00:09:40,880 --> 00:09:46,399
everything is already allocated

239
00:09:43,360 --> 00:09:48,959
and then after having waited for

240
00:09:46,399 --> 00:09:50,480
for the buffer the client can basically

241
00:09:48,959 --> 00:09:51,279
make another request with the same

242
00:09:50,480 --> 00:09:53,120
buffer

243
00:09:51,279 --> 00:09:55,519
using the same capability and the whole

244
00:09:53,120 --> 00:09:58,480
thing can repeat over and over again

245
00:09:55,519 --> 00:09:59,839
so this is the simple uh this is a

246
00:09:58,480 --> 00:10:02,399
simple scenario

247
00:09:59,839 --> 00:10:04,160
there is also more complicated scenario

248
00:10:02,399 --> 00:10:07,440
which involves the

249
00:10:04,160 --> 00:10:09,600
capability lists so here both the client

250
00:10:07,440 --> 00:10:11,920
and the server allocate a capability

251
00:10:09,600 --> 00:10:14,160
list the kepleased the server

252
00:10:11,920 --> 00:10:14,719
immediately puts both of its endpoints

253
00:10:14,160 --> 00:10:16,839
now it's

254
00:10:14,720 --> 00:10:18,000
using two endpoints into the capability

255
00:10:16,839 --> 00:10:20,720
list

256
00:10:18,000 --> 00:10:22,480
the client now allocates two buffers and

257
00:10:20,720 --> 00:10:25,440
upon sending those buffers it

258
00:10:22,480 --> 00:10:25,440
specifies the

259
00:10:26,000 --> 00:10:29,200
it specifies the cap list here which

260
00:10:28,560 --> 00:10:32,560
results

261
00:10:29,200 --> 00:10:36,160
in the kernel adding the buffer into the

262
00:10:32,560 --> 00:10:39,359
capability list right then um

263
00:10:36,160 --> 00:10:40,959
the server waits on the capability list

264
00:10:39,360 --> 00:10:43,839
so

265
00:10:40,959 --> 00:10:45,439
it doesn't know which endpoint will

266
00:10:43,839 --> 00:10:47,600
receive data first so

267
00:10:45,440 --> 00:10:48,560
it doesn't matter here any endpoint will

268
00:10:47,600 --> 00:10:51,440
be okay

269
00:10:48,560 --> 00:10:52,239
then it finishes the received buffer and

270
00:10:51,440 --> 00:10:54,800
then

271
00:10:52,240 --> 00:10:56,640
the client can also wait on a capability

272
00:10:54,800 --> 00:10:58,800
list it also doesn't know which answer

273
00:10:56,640 --> 00:11:02,240
will come first and then everything is

274
00:10:58,800 --> 00:11:04,640
the allocated and destroyed

275
00:11:02,240 --> 00:11:07,519
so this was in short how the new ipc

276
00:11:04,640 --> 00:11:08,720
stuff is supposed to work

277
00:11:07,519 --> 00:11:11,279
if you are interested talk to me

278
00:11:08,720 --> 00:11:14,320
afterwards or there will be a link to

279
00:11:11,279 --> 00:11:16,800
a github ripple

280
00:11:14,320 --> 00:11:18,640
so i'll something completely different

281
00:11:16,800 --> 00:11:21,199
which is the any kernel

282
00:11:18,640 --> 00:11:22,240
stuff so um are you familiar what any

283
00:11:21,200 --> 00:11:25,839
kernel

284
00:11:22,240 --> 00:11:29,279
is or what any kernels are

285
00:11:25,839 --> 00:11:29,279
yeah i take it as yes

286
00:11:30,240 --> 00:11:33,920
so so for instance a net bsd is a

287
00:11:32,800 --> 00:11:37,599
classic example of

288
00:11:33,920 --> 00:11:39,920
a any kernel it's a way of structuring

289
00:11:37,600 --> 00:11:42,320
operating systems in a way that they can

290
00:11:39,920 --> 00:11:45,040
provide components that can be either

291
00:11:42,320 --> 00:11:45,600
that can either form a monolithic kernel

292
00:11:45,040 --> 00:11:47,360
or

293
00:11:45,600 --> 00:11:48,880
components for microkernels or unique

294
00:11:47,360 --> 00:11:51,200
kernels so

295
00:11:48,880 --> 00:11:52,720
uh we also tried marking tried something

296
00:11:51,200 --> 00:11:54,880
like that with helenos

297
00:11:52,720 --> 00:11:56,079
this time the benefit is that helenos is

298
00:11:54,880 --> 00:11:58,639
already

299
00:11:56,079 --> 00:12:00,239
kind of sliced into very fine grade

300
00:11:58,639 --> 00:12:02,240
components so you don't have to carve

301
00:12:00,240 --> 00:12:04,800
them out of a monolith

302
00:12:02,240 --> 00:12:05,279
which is the case with netbsd and you

303
00:12:04,800 --> 00:12:07,040
just

304
00:12:05,279 --> 00:12:08,800
make some adaptation to the linking

305
00:12:07,040 --> 00:12:10,480
process maybe it's slightly more

306
00:12:08,800 --> 00:12:12,639
complicated than that but you can

307
00:12:10,480 --> 00:12:14,160
imagine it has to do something with

308
00:12:12,639 --> 00:12:18,720
linking

309
00:12:14,160 --> 00:12:22,000
and you can then do things like

310
00:12:18,720 --> 00:12:24,240
transition from this thing which is the

311
00:12:22,000 --> 00:12:26,160
normal microkernel stuff you have both

312
00:12:24,240 --> 00:12:29,600
the client and the server

313
00:12:26,160 --> 00:12:30,160
as independent tasks here you have

314
00:12:29,600 --> 00:12:33,040
kernel

315
00:12:30,160 --> 00:12:35,120
and just by reorganizing stuff and

316
00:12:33,040 --> 00:12:36,399
making use of this component you can

317
00:12:35,120 --> 00:12:39,920
basically put it

318
00:12:36,399 --> 00:12:40,720
in the kernel and voila you have a vfs

319
00:12:39,920 --> 00:12:44,079
server

320
00:12:40,720 --> 00:12:46,800
which runs inside of the kernel

321
00:12:44,079 --> 00:12:48,160
this is also a work in progress so if

322
00:12:46,800 --> 00:12:50,639
you are interested to talk to martin

323
00:12:48,160 --> 00:12:50,639
afterwards

324
00:12:50,720 --> 00:12:57,519
and uh last but not least uh is the

325
00:12:54,079 --> 00:12:58,399
display server uh thingy so right now we

326
00:12:57,519 --> 00:13:00,800
have um

327
00:12:58,399 --> 00:13:03,600
a compositor uh in helenos which

328
00:13:00,800 --> 00:13:07,599
provides a gui with windows

329
00:13:03,600 --> 00:13:10,399
some some nice uh visual features like

330
00:13:07,600 --> 00:13:11,440
transfer transparency and rotation but

331
00:13:10,399 --> 00:13:14,720
there are also

332
00:13:11,440 --> 00:13:16,959
um some aspects of this compositor

333
00:13:14,720 --> 00:13:17,760
that are being now perceived as

334
00:13:16,959 --> 00:13:20,560
drawbacks

335
00:13:17,760 --> 00:13:22,560
or maybe not ideal things so uh

336
00:13:20,560 --> 00:13:24,239
irkasvara is working on

337
00:13:22,560 --> 00:13:26,319
a replacement that should eventually

338
00:13:24,240 --> 00:13:27,440
replace the com the compositor and the

339
00:13:26,320 --> 00:13:29,200
console server

340
00:13:27,440 --> 00:13:31,040
it should also be possible with this new

341
00:13:29,200 --> 00:13:32,720
staff uh to have

342
00:13:31,040 --> 00:13:35,120
something like a gui in a text

343
00:13:32,720 --> 00:13:38,480
environment or in a pseudo-graphic

344
00:13:35,120 --> 00:13:39,120
environment and it should be basically

345
00:13:38,480 --> 00:13:40,320
still

346
00:13:39,120 --> 00:13:44,240
the same thing it shouldn't matter

347
00:13:40,320 --> 00:13:44,240
whether it's graphical or textual

348
00:13:45,360 --> 00:13:48,800
i personally feel that this topic is too

349
00:13:48,240 --> 00:13:51,519
deep

350
00:13:48,800 --> 00:13:52,479
for me to uh talk about in this very

351
00:13:51,519 --> 00:13:54,560
short time

352
00:13:52,480 --> 00:13:56,440
so i if you are interested i would like

353
00:13:54,560 --> 00:13:59,439
to refer you to this ticket

354
00:13:56,440 --> 00:14:04,959
816 or

355
00:13:59,440 --> 00:14:04,959
it is ticket which is the

356
00:14:05,680 --> 00:14:09,120
well this is the ticket and this is his

357
00:14:07,760 --> 00:14:13,040
repository so if you are

358
00:14:09,120 --> 00:14:15,360
interested in that go there and i think

359
00:14:13,040 --> 00:14:16,079
i'm just about to run out of time so

360
00:14:15,360 --> 00:14:18,800
thank you very much

361
00:14:16,079 --> 00:14:18,800
for your attention

362
00:14:23,199 --> 00:14:26,800
we don't have time for questions but

363
00:14:25,120 --> 00:14:30,399
martin

364
00:14:26,800 --> 00:14:45,839
martin they're around so

365
00:14:30,399 --> 00:14:45,839
find them and ask some questions

366
00:14:50,560 --> 00:14:52,638
you

