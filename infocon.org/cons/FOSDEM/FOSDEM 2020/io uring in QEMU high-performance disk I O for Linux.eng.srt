1
00:00:15,360 --> 00:00:20,720
so um

2
00:00:16,800 --> 00:00:23,439
can everybody hear me great um

3
00:00:20,720 --> 00:00:26,160
my name is julius varuva i am software

4
00:00:23,439 --> 00:00:30,800
engineer at red hat

5
00:00:26,160 --> 00:00:34,480
and i'm going to talk about a ring

6
00:00:30,800 --> 00:00:37,440
and how we integrated it in chemo

7
00:00:34,480 --> 00:00:38,239
so uh first we're going to discuss iring

8
00:00:37,440 --> 00:00:40,640
ap

9
00:00:38,239 --> 00:00:41,440
and uh how cool is it and what's new

10
00:00:40,640 --> 00:00:45,440
inside

11
00:00:41,440 --> 00:00:48,320
and then something about

12
00:00:45,440 --> 00:00:48,320
kimu and

13
00:00:48,640 --> 00:00:51,440
what's inside

14
00:00:52,640 --> 00:00:58,719
so this is iopath

15
00:00:56,559 --> 00:01:00,239
in virtual machine we can see that a lot

16
00:00:58,719 --> 00:01:03,680
of stuff is going on

17
00:01:00,239 --> 00:01:06,399
um so io pass from user space

18
00:01:03,680 --> 00:01:08,320
uh to kernel and you need to choose some

19
00:01:06,400 --> 00:01:12,640
uh asynchronous io there

20
00:01:08,320 --> 00:01:16,880
and then um it connected

21
00:01:12,640 --> 00:01:19,920
to chemo using um

22
00:01:16,880 --> 00:01:22,158
with your blog driver and

23
00:01:19,920 --> 00:01:22,159
then

24
00:01:24,240 --> 00:01:27,600
we can finally pass through our io

25
00:01:26,960 --> 00:01:32,399
request

26
00:01:27,600 --> 00:01:35,600
to kernel so what's now existing in kimo

27
00:01:32,400 --> 00:01:38,000
we can use uh linux io

28
00:01:35,600 --> 00:01:39,520
but it's not really good because it's

29
00:01:38,000 --> 00:01:42,960
not true as in

30
00:01:39,520 --> 00:01:46,079
we can use thread pulls we can use nvme

31
00:01:42,960 --> 00:01:49,039
passthrough which works well great but

32
00:01:46,079 --> 00:01:49,039
it's not migratable

33
00:01:49,280 --> 00:01:56,719
and spdk is hard to manage and

34
00:01:52,840 --> 00:02:00,079
um so what we can do

35
00:01:56,719 --> 00:02:00,079
we now we know that

36
00:02:00,880 --> 00:02:05,520
we have this path um from kimo user

37
00:02:03,920 --> 00:02:07,920
space to hardware

38
00:02:05,520 --> 00:02:09,519
and we can now improve it because we we

39
00:02:07,920 --> 00:02:13,040
have a

40
00:02:09,520 --> 00:02:16,400
new iou ring api

41
00:02:13,040 --> 00:02:19,519
instead of existing linux ion

42
00:02:16,400 --> 00:02:24,080
what is the taiyo ring it is a new

43
00:02:19,520 --> 00:02:27,360
truly asynchronous interface which

44
00:02:24,080 --> 00:02:31,760
which was created for blog devices but

45
00:02:27,360 --> 00:02:35,280
now it's it can do everything it can uh

46
00:02:31,760 --> 00:02:38,160
just a good interface to pass

47
00:02:35,280 --> 00:02:39,599
pass messages to the kernel as in an

48
00:02:38,160 --> 00:02:42,640
asynchronous way

49
00:02:39,599 --> 00:02:46,238
so uh you can pass network

50
00:02:42,640 --> 00:02:48,480
also and do other syscalls for example

51
00:02:46,239 --> 00:02:49,360
and you can change six syscalls for

52
00:02:48,480 --> 00:02:51,760
example if you have

53
00:02:49,360 --> 00:02:52,879
asynchronous open and in a synchronous

54
00:02:51,760 --> 00:02:56,000
read

55
00:02:52,879 --> 00:02:59,440
you can make that uh read will

56
00:02:56,000 --> 00:03:02,080
go after open and

57
00:02:59,440 --> 00:03:03,519
this all way will be asynchronous so

58
00:03:02,080 --> 00:03:07,440
that's cool

59
00:03:03,519 --> 00:03:10,720
and it's part of linux 5.0 or that's one

60
00:03:07,440 --> 00:03:11,920
um so it's new so uh if we use it in

61
00:03:10,720 --> 00:03:16,720
chemo we need to

62
00:03:11,920 --> 00:03:16,720
make sure that we're on the newest

63
00:03:16,840 --> 00:03:22,000
kernel

64
00:03:18,959 --> 00:03:24,080
what's inside a urine um

65
00:03:22,000 --> 00:03:25,680
if you remember in linux io we have

66
00:03:24,080 --> 00:03:29,040
events and we have

67
00:03:25,680 --> 00:03:30,640
we submitted um into a single queue

68
00:03:29,040 --> 00:03:33,519
and now we have two separate queue for

69
00:03:30,640 --> 00:03:36,480
submission and completion

70
00:03:33,519 --> 00:03:38,159
and their memory they are shared between

71
00:03:36,480 --> 00:03:41,119
user space and kernel

72
00:03:38,159 --> 00:03:42,879
so you can use it directly you don't

73
00:03:41,120 --> 00:03:46,560
need to enter kernel that

74
00:03:42,879 --> 00:03:50,959
and you can use asynchronous flash which

75
00:03:46,560 --> 00:03:50,959
is not available in linux io

76
00:03:51,280 --> 00:03:55,439
and because of that we needed to

77
00:03:56,319 --> 00:04:02,720
switch back in chemo to

78
00:03:59,840 --> 00:04:04,319
synchronous flash and this work that

79
00:04:02,720 --> 00:04:06,799
doesn't work good

80
00:04:04,319 --> 00:04:07,399
so for my to remind you submission is

81
00:04:06,799 --> 00:04:09,360
when

82
00:04:07,400 --> 00:04:12,560
[Music]

83
00:04:09,360 --> 00:04:15,840
it's from user space to hardware and

84
00:04:12,560 --> 00:04:15,840
completion is backwards

85
00:04:18,399 --> 00:04:22,078
so basically a ring is three system

86
00:04:20,880 --> 00:04:25,280
calls

87
00:04:22,079 --> 00:04:28,160
it's iron setup

88
00:04:25,280 --> 00:04:29,440
when you can manage we can you choose

89
00:04:28,160 --> 00:04:32,880
different regimes

90
00:04:29,440 --> 00:04:36,080
and you can um all from

91
00:04:32,880 --> 00:04:39,840
submission sites or completion sites

92
00:04:36,080 --> 00:04:42,880
you form your submission

93
00:04:39,840 --> 00:04:47,679
queue and form your completion queue

94
00:04:42,880 --> 00:04:47,680
and do enter this call

95
00:04:48,960 --> 00:04:52,799
what cool is that you submit

96
00:04:52,880 --> 00:04:59,120
submit requests simultaneously with

97
00:04:56,240 --> 00:04:59,440
fetching completion cues so you don't

98
00:04:59,120 --> 00:05:03,360
need

99
00:04:59,440 --> 00:05:06,639
two syscalls for that and

100
00:05:03,360 --> 00:05:11,440
a great feature is a file descriptor

101
00:05:06,639 --> 00:05:14,720
register so you don't need to

102
00:05:11,440 --> 00:05:18,960
do i've got and have put on

103
00:05:14,720 --> 00:05:21,280
each submission and completion

104
00:05:18,960 --> 00:05:22,239
so just register a set of files and then

105
00:05:21,280 --> 00:05:25,840
refer to

106
00:05:22,240 --> 00:05:29,199
indexing index and array

107
00:05:25,840 --> 00:05:29,198
and you can register first

108
00:05:31,039 --> 00:05:37,759
this is not a great improvement but

109
00:05:34,400 --> 00:05:42,479
since we in such

110
00:05:37,759 --> 00:05:42,479
heavy workloads such improvements helps

111
00:05:43,280 --> 00:05:49,280
how fast is it well

112
00:05:47,199 --> 00:05:53,840
it is quite good it is better than linux

113
00:05:49,280 --> 00:05:56,880
io but not

114
00:05:53,840 --> 00:05:59,919
entirely great

115
00:05:56,880 --> 00:06:03,199
so uh you can see information with

116
00:05:59,919 --> 00:06:07,840
which i test i use uh feel

117
00:06:03,199 --> 00:06:07,840
and nvme ssm

118
00:06:10,560 --> 00:06:18,319
so if iu ring is so cool um

119
00:06:14,880 --> 00:06:21,039
then let's integrate in key mode and

120
00:06:18,319 --> 00:06:23,440
that's how uh stefan heinrich came up

121
00:06:21,039 --> 00:06:26,800
with our twitchy idea

122
00:06:23,440 --> 00:06:27,440
and our mentor our sri mata implemented

123
00:06:26,800 --> 00:06:29,919
it

124
00:06:27,440 --> 00:06:31,039
and basic function is actually merged

125
00:06:29,919 --> 00:06:35,840
upstream

126
00:06:31,039 --> 00:06:35,840
and it will be in chemo50

127
00:06:37,120 --> 00:06:40,479
with some problem existed yeah

128
00:06:42,319 --> 00:06:45,680
how we integrated it we use the same

129
00:06:45,199 --> 00:06:49,120
that's

130
00:06:45,680 --> 00:06:51,520
linux io actually implemented uh

131
00:06:49,120 --> 00:06:54,319
we have chemo event loop it's based on

132
00:06:51,520 --> 00:06:57,359
io context

133
00:06:54,319 --> 00:07:00,319
um we just add

134
00:06:57,360 --> 00:07:01,440
io context in the pool and use file

135
00:07:00,319 --> 00:07:04,800
descriptor

136
00:07:01,440 --> 00:07:05,599
to pull completion check and so this is

137
00:07:04,800 --> 00:07:08,880
how we can

138
00:07:05,599 --> 00:07:10,000
submit requests segment submits requests

139
00:07:08,880 --> 00:07:16,400
with enter

140
00:07:10,000 --> 00:07:19,599
and check completion on irq

141
00:07:16,400 --> 00:07:23,440
we also have a use libya ring

142
00:07:19,599 --> 00:07:26,159
and i can recommend

143
00:07:23,440 --> 00:07:26,800
much uh to use it because it's really

144
00:07:26,160 --> 00:07:29,520
helpful

145
00:07:26,800 --> 00:07:31,120
uh it's easy to use but now we are tied

146
00:07:29,520 --> 00:07:34,159
to

147
00:07:31,120 --> 00:07:34,160
libyan versions

148
00:07:36,000 --> 00:07:43,039
launching is very simple you just remove

149
00:07:39,360 --> 00:07:45,919
your you you put

150
00:07:43,039 --> 00:07:46,479
instead of your native or thread are you

151
00:07:45,919 --> 00:07:49,359
uring

152
00:07:46,479 --> 00:07:50,000
and this is how it works it works with

153
00:07:49,360 --> 00:07:54,080
uh

154
00:07:50,000 --> 00:07:58,160
i o direct and cache too so we can do it

155
00:07:54,080 --> 00:08:01,599
yes and you can see that

156
00:07:58,160 --> 00:08:06,800
even without extra features

157
00:08:01,599 --> 00:08:06,800
it can do good you can take a look at

158
00:08:10,840 --> 00:08:14,159
base

159
00:08:12,080 --> 00:08:15,840
what we can do next we can uh implement

160
00:08:14,160 --> 00:08:18,879
some registration

161
00:08:15,840 --> 00:08:22,318
so uh when we have

162
00:08:18,879 --> 00:08:22,319
our io in um

163
00:08:22,479 --> 00:08:26,159
in chemo um if if we know that it is

164
00:08:25,360 --> 00:08:28,160
entered from

165
00:08:26,160 --> 00:08:30,240
different uh file descriptor we just

166
00:08:28,160 --> 00:08:34,159
register it

167
00:08:30,240 --> 00:08:34,159
and that's how we can save some time

168
00:08:34,958 --> 00:08:43,838
um yes it is improved a little

169
00:08:40,080 --> 00:08:46,080
it doesn't really help much but

170
00:08:43,839 --> 00:08:48,399
one thing of it it is really helpful

171
00:08:46,080 --> 00:08:51,200
when it comes to submission polling

172
00:08:48,399 --> 00:08:52,160
what is the mission polling you need you

173
00:08:51,200 --> 00:08:54,080
can

174
00:08:52,160 --> 00:08:55,760
run a kernel thread to wait for

175
00:08:54,080 --> 00:08:58,240
submissions

176
00:08:55,760 --> 00:08:59,200
uh you need to wake up it with a special

177
00:08:58,240 --> 00:09:01,120
syscall

178
00:08:59,200 --> 00:09:03,920
but if you have a heavy workload you

179
00:09:01,120 --> 00:09:05,360
don't kernel um

180
00:09:03,920 --> 00:09:06,959
kernel thread just don't sleep you don't

181
00:09:05,360 --> 00:09:11,360
need to wake up with

182
00:09:06,959 --> 00:09:11,359
so it's really helpful and

183
00:09:12,399 --> 00:09:20,000
of course when we uh submit when we

184
00:09:16,080 --> 00:09:23,279
pull submissions from kernel threads we

185
00:09:20,000 --> 00:09:26,399
always uh check of these and

186
00:09:23,279 --> 00:09:30,320
that's how objective registration helps

187
00:09:26,399 --> 00:09:32,720
yes and now we submit requests

188
00:09:30,320 --> 00:09:34,880
without syscall and get completions on

189
00:09:32,720 --> 00:09:38,080
irq

190
00:09:34,880 --> 00:09:40,640
you see that we don't have

191
00:09:38,080 --> 00:09:43,440
any syscalls at all if you have a very

192
00:09:40,640 --> 00:09:43,439
heavy workload

193
00:09:46,560 --> 00:09:50,160
what can we do next uh we can pull

194
00:09:49,279 --> 00:09:53,439
completions

195
00:09:50,160 --> 00:09:56,319
from from uh to site we can you

196
00:09:53,440 --> 00:09:57,120
we can do user space completions um this

197
00:09:56,320 --> 00:10:00,480
is a feature

198
00:09:57,120 --> 00:10:04,720
in chemo itself instead of uh

199
00:10:00,480 --> 00:10:09,920
using ipol uh we can do

200
00:10:04,720 --> 00:10:09,920
we can do manual polling sometimes and

201
00:10:10,079 --> 00:10:14,880
it could be good but it doesn't it just

202
00:10:12,320 --> 00:10:14,880
doesn't work

203
00:10:15,360 --> 00:10:19,839
the feature in

204
00:10:20,160 --> 00:10:25,839
the future in uh iring itself is

205
00:10:22,959 --> 00:10:25,839
completion polling

206
00:10:28,800 --> 00:10:36,479
we just we just paul um

207
00:10:32,640 --> 00:10:40,079
we just submit um cisco i don't enter

208
00:10:36,480 --> 00:10:42,560
and it's busy waiting it is just

209
00:10:40,079 --> 00:10:44,839
falling completions and we're just

210
00:10:42,560 --> 00:10:47,839
waiting for it

211
00:10:44,839 --> 00:10:47,839
and

212
00:10:48,560 --> 00:10:56,000
you can see that it uses extra cpu but

213
00:10:52,399 --> 00:10:58,720
this is the fastest way so we

214
00:10:56,000 --> 00:11:00,800
we have a threads that pull submissions

215
00:10:58,720 --> 00:11:05,600
we have

216
00:11:00,800 --> 00:11:05,599
we are pulling completions and

217
00:11:07,360 --> 00:11:12,640
we don't have any extra

218
00:11:13,120 --> 00:11:15,839
context change

219
00:11:18,399 --> 00:11:29,839
yeah it's not implemented this is uh

220
00:11:23,120 --> 00:11:29,839
this is what we need to do

221
00:11:30,720 --> 00:11:39,600
yes what we need to do is

222
00:11:35,839 --> 00:11:42,320
merge submission polling

223
00:11:39,600 --> 00:11:44,160
and file registration it is implemented

224
00:11:42,320 --> 00:11:45,680
but it needs to be merged

225
00:11:44,160 --> 00:11:47,920
we need to implement file buffer

226
00:11:45,680 --> 00:11:50,640
registration and io poll it is difficult

227
00:11:47,920 --> 00:11:50,640
with iopo

228
00:11:51,920 --> 00:11:56,240
takes some time and we can probably

229
00:11:55,360 --> 00:11:59,760
switch

230
00:11:56,240 --> 00:12:02,399
to our ring as default io if it's simple

231
00:11:59,760 --> 00:12:03,360
but if it's supported by the kernel as

232
00:12:02,399 --> 00:12:06,639
we know it's

233
00:12:03,360 --> 00:12:10,800
needs to be it's it's a

234
00:12:06,639 --> 00:12:14,320
decently recent kernel yes and

235
00:12:10,800 --> 00:12:14,319
the final idea that was

236
00:12:14,560 --> 00:12:19,839
that was suggested uh is switching main

237
00:12:16,959 --> 00:12:22,880
pool to irene

238
00:12:19,839 --> 00:12:26,560
so um you know that we use

239
00:12:22,880 --> 00:12:29,680
um linux io context

240
00:12:26,560 --> 00:12:31,760
in in key main pool we can switch it to

241
00:12:29,680 --> 00:12:36,000
our urine context

242
00:12:31,760 --> 00:12:38,240
but this is this is a lot of work

243
00:12:36,000 --> 00:12:39,680
i'm not sure if if we can gain some

244
00:12:38,240 --> 00:12:44,800
performance of it

245
00:12:39,680 --> 00:12:44,800
but we can try and take a look

246
00:12:46,079 --> 00:12:50,800
yeah uh i guess that's it that's a quick

247
00:12:50,839 --> 00:12:59,440
presentation

248
00:12:53,700 --> 00:13:01,920
[Applause]

249
00:12:59,440 --> 00:13:02,720
any questions yeah so the way i

250
00:13:01,920 --> 00:13:06,240
understand

251
00:13:02,720 --> 00:13:07,200
iou ring it basically is a more linda

252
00:13:06,240 --> 00:13:08,880
specific

253
00:13:07,200 --> 00:13:10,639
way of implementing details right

254
00:13:08,880 --> 00:13:12,399
different protocol different things

255
00:13:10,639 --> 00:13:14,160
you have good like that less less curvy

256
00:13:12,399 --> 00:13:17,760
restrictions but it basically is

257
00:13:14,160 --> 00:13:17,760
right i mean

258
00:13:18,160 --> 00:13:22,560
like i was wondering could we literally

259
00:13:20,320 --> 00:13:24,000
just expose iou into the gas

260
00:13:22,560 --> 00:13:26,959
with a couple of restrictions so that

261
00:13:24,000 --> 00:13:28,959
they can directly issue calls

262
00:13:26,959 --> 00:13:30,479
i'm not sure if it's possible it's

263
00:13:28,959 --> 00:13:33,599
really

264
00:13:30,480 --> 00:13:36,480
um yeah so the question was uh

265
00:13:33,600 --> 00:13:36,480
it's not really a question

266
00:13:38,880 --> 00:13:43,600
we have big hosts and a urine is some

267
00:13:42,720 --> 00:13:46,959
sort of

268
00:13:43,600 --> 00:13:51,120
big host but from the kernel side can we

269
00:13:46,959 --> 00:13:53,199
take this to the chemo directly

270
00:13:51,120 --> 00:13:54,720
to the guest sorry to the guests

271
00:13:53,199 --> 00:13:58,079
directly

272
00:13:54,720 --> 00:14:03,839
so well it's not supported

273
00:13:58,079 --> 00:14:06,160
uh in linux

274
00:14:03,839 --> 00:14:06,160
sorry

275
00:14:08,639 --> 00:14:13,360
well probably we can god well

276
00:14:13,680 --> 00:14:21,599
i don't have you have something to add

277
00:14:18,000 --> 00:14:23,360
um yeah so today today it's not

278
00:14:21,600 --> 00:14:25,839
possible to do that but there is someone

279
00:14:23,360 --> 00:14:25,839
who's working

280
00:14:27,040 --> 00:14:31,040
to see if that helps yeah so the

281
00:14:30,000 --> 00:14:34,639
question was about v

282
00:14:31,040 --> 00:14:37,360
host and um uh it would be possible

283
00:14:34,639 --> 00:14:38,560
to expose the the the rings that julia

284
00:14:37,360 --> 00:14:39,839
described to the guest

285
00:14:38,560 --> 00:14:41,359
and there is someone who's working on it

286
00:14:39,839 --> 00:14:45,839
so we'll see they'll send patches and

287
00:14:41,360 --> 00:14:45,839
we'll see what happens

288
00:14:56,959 --> 00:14:59,839
any more questions

289
00:15:01,279 --> 00:15:13,839
no okay thank you

290
00:15:09,360 --> 00:15:13,839
thank you

291
00:15:14,959 --> 00:15:17,040
you

