1
00:00:06,879 --> 00:00:09,280
okay

2
00:00:07,359 --> 00:00:10,879
so next up we're going to have taiko

3
00:00:09,280 --> 00:00:12,160
anderson and mike mccracken are going to

4
00:00:10,880 --> 00:00:15,120
be talking to us about

5
00:00:12,160 --> 00:00:15,759
creo alexey tryoxy whichever way i how's

6
00:00:15,120 --> 00:00:17,439
that thing which

7
00:00:15,759 --> 00:00:18,800
is actually according to the diagram

8
00:00:17,440 --> 00:00:20,640
earlier in one of the talks today i

9
00:00:18,800 --> 00:00:25,760
think we should rename this

10
00:00:20,640 --> 00:00:27,119
to um something else oci lxc

11
00:00:25,760 --> 00:00:29,039
when we named it we didn't understand

12
00:00:27,119 --> 00:00:32,719
what we were doing and we still don't

13
00:00:29,039 --> 00:00:35,280
so uh anyway i'm tycho this is mike

14
00:00:32,719 --> 00:00:36,960
we work at cisco we do stuff one of the

15
00:00:35,280 --> 00:00:37,520
things i gave a talk here last year

16
00:00:36,960 --> 00:00:41,600
about

17
00:00:37,520 --> 00:00:45,680
using oci images with without

18
00:00:41,600 --> 00:00:47,280
the tar all the traditional stuff but in

19
00:00:45,680 --> 00:00:50,239
putting other things in here so i just

20
00:00:47,280 --> 00:00:51,600
want to go over this a little bit

21
00:00:50,239 --> 00:00:53,360
for starters i'm going to talk a little

22
00:00:51,600 --> 00:00:54,399
bit about what the oci format looks like

23
00:00:53,360 --> 00:00:58,559
so it looks like this

24
00:00:54,399 --> 00:01:02,239
roughly and this oci layout file

25
00:00:58,559 --> 00:01:04,239
you can tell that there's a version

26
00:01:02,239 --> 00:01:06,479
i guess this is all not aligned again we

27
00:01:04,239 --> 00:01:09,760
tried to fix this anyway

28
00:01:06,479 --> 00:01:12,320
cool so imagine the arrows are one up

29
00:01:09,760 --> 00:01:13,439
somehow the slides don't align but so

30
00:01:12,320 --> 00:01:16,720
basically the index

31
00:01:13,439 --> 00:01:16,720
points to a um

32
00:01:16,960 --> 00:01:21,119
like a a blob and that blob is really

33
00:01:18,960 --> 00:01:22,320
just a json blob which itself points to

34
00:01:21,119 --> 00:01:24,000
a configuration

35
00:01:22,320 --> 00:01:26,080
which then that configuration points to

36
00:01:24,000 --> 00:01:29,680
some layers and so the layers are

37
00:01:26,080 --> 00:01:31,439
these uh gzip compressed tar balls with

38
00:01:29,680 --> 00:01:33,280
the file system state on them and white

39
00:01:31,439 --> 00:01:34,240
outs and all that stuff

40
00:01:33,280 --> 00:01:35,920
and so this is sort of what a

41
00:01:34,240 --> 00:01:37,199
traditional oci image looks like if

42
00:01:35,920 --> 00:01:38,880
you're using

43
00:01:37,200 --> 00:01:40,400
oci based runtime today this is what

44
00:01:38,880 --> 00:01:45,119
you're using

45
00:01:40,400 --> 00:01:48,000
and there's some drawbacks

46
00:01:45,119 --> 00:01:50,479
for example each layer is a tar file so

47
00:01:48,000 --> 00:01:51,920
there's no dedup so for example if you

48
00:01:50,479 --> 00:01:53,520
include the same file in two different

49
00:01:51,920 --> 00:01:55,600
layers there's no intelligence there the

50
00:01:53,520 --> 00:01:58,960
file just gets included twice

51
00:01:55,600 --> 00:02:00,240
or if you say modify one byte of a

52
00:01:58,960 --> 00:02:03,039
particular file

53
00:02:00,240 --> 00:02:04,960
in a container image that in the file is

54
00:02:03,040 --> 00:02:07,040
a gigabyte long and you change one byte

55
00:02:04,960 --> 00:02:08,000
the way that the oci format is designed

56
00:02:07,040 --> 00:02:10,800
today you

57
00:02:08,000 --> 00:02:12,319
include that file again verbatim not

58
00:02:10,800 --> 00:02:14,400
just the one byte change which is sort

59
00:02:12,319 --> 00:02:17,679
of annoying

60
00:02:14,400 --> 00:02:19,280
the white outs are are painful

61
00:02:17,680 --> 00:02:20,720
you have it's like a specially named

62
00:02:19,280 --> 00:02:22,000
file but what if you do if you have a

63
00:02:20,720 --> 00:02:25,440
file on your image called

64
00:02:22,000 --> 00:02:28,560
wh large layers are painful

65
00:02:25,440 --> 00:02:29,040
you can't seek in tar balls actually

66
00:02:28,560 --> 00:02:32,319
there's

67
00:02:29,040 --> 00:02:33,359
i uh if you know alexa he wrote a large

68
00:02:32,319 --> 00:02:36,238
blog post about why

69
00:02:33,360 --> 00:02:37,040
tar is a bad format for this um so if

70
00:02:36,239 --> 00:02:38,480
you if you're

71
00:02:37,040 --> 00:02:41,120
trying to think about what you actually

72
00:02:38,480 --> 00:02:43,518
want in a container image format

73
00:02:41,120 --> 00:02:44,480
you want to be able to discover image

74
00:02:43,519 --> 00:02:46,800
provenance so

75
00:02:44,480 --> 00:02:47,920
in particular um people care about

76
00:02:46,800 --> 00:02:49,680
signing images did

77
00:02:47,920 --> 00:02:51,920
when i downloaded this did it come from

78
00:02:49,680 --> 00:02:52,480
the you know nginx container maintainer

79
00:02:51,920 --> 00:02:55,760
image

80
00:02:52,480 --> 00:02:57,599
so that's important um

81
00:02:55,760 --> 00:02:59,359
the guy who's building the image signs

82
00:02:57,599 --> 00:03:01,359
it at build time and it would be great

83
00:02:59,360 --> 00:03:03,599
if that signature you could then verify

84
00:03:01,360 --> 00:03:05,440
at runtime unfortunately what happens

85
00:03:03,599 --> 00:03:07,359
is your container runtime downloads this

86
00:03:05,440 --> 00:03:09,760
tarball

87
00:03:07,360 --> 00:03:10,720
g unzips it extracts it puts the bits on

88
00:03:09,760 --> 00:03:12,399
the file system

89
00:03:10,720 --> 00:03:13,920
and then you throw the tarball away but

90
00:03:12,400 --> 00:03:15,599
the tar ball was the thing the thing

91
00:03:13,920 --> 00:03:17,040
that the maintainer signed so unless you

92
00:03:15,599 --> 00:03:21,280
do some additional work

93
00:03:17,040 --> 00:03:24,319
with ima or something you lose that

94
00:03:21,280 --> 00:03:26,879
you want to be able to update stuff so

95
00:03:24,319 --> 00:03:28,000
in particular a kind of a design

96
00:03:26,879 --> 00:03:29,359
annoyance is that

97
00:03:28,000 --> 00:03:31,120
suppose if you're a container

98
00:03:29,360 --> 00:03:32,000
administrator you're running some giant

99
00:03:31,120 --> 00:03:34,480
kubernetes cluster

100
00:03:32,000 --> 00:03:35,200
with gazillions of containers and

101
00:03:34,480 --> 00:03:37,040
there's like

102
00:03:35,200 --> 00:03:38,480
50 different applications in your you

103
00:03:37,040 --> 00:03:39,920
know you work for a big organization

104
00:03:38,480 --> 00:03:41,679
like cisco and there's 50 different

105
00:03:39,920 --> 00:03:42,720
teams and each maintains one of those

106
00:03:41,680 --> 00:03:45,519
and then all of a sudden there's a

107
00:03:42,720 --> 00:03:47,440
vulnerability in ssl you the operator

108
00:03:45,519 --> 00:03:48,959
know okay i need to go patch ssl

109
00:03:47,440 --> 00:03:51,680
everywhere

110
00:03:48,959 --> 00:03:53,920
but the uh you really have no way to do

111
00:03:51,680 --> 00:03:55,439
that we have to go hand in hand to every

112
00:03:53,920 --> 00:03:57,839
dev team and say hey can you please

113
00:03:55,439 --> 00:04:00,480
rebuild an image with this new ssl

114
00:03:57,840 --> 00:04:01,840
that's annoying it would be great if you

115
00:04:00,480 --> 00:04:03,760
could use less space it would be great

116
00:04:01,840 --> 00:04:04,799
if you could just distribute the ssl

117
00:04:03,760 --> 00:04:08,079
patch

118
00:04:04,799 --> 00:04:11,280
you could dedupe within an image

119
00:04:08,080 --> 00:04:12,959
that would be great so basically for the

120
00:04:11,280 --> 00:04:13,760
image prominent solution what would be

121
00:04:12,959 --> 00:04:15,360
ideal is

122
00:04:13,760 --> 00:04:18,320
since this there's this whole pointer

123
00:04:15,360 --> 00:04:19,680
tree if the guy just signs the index

124
00:04:18,320 --> 00:04:21,599
since all this stuff is content

125
00:04:19,680 --> 00:04:22,000
addressed you don't need to know any

126
00:04:21,600 --> 00:04:24,080
more

127
00:04:22,000 --> 00:04:26,479
than the the signature on the index is

128
00:04:24,080 --> 00:04:28,960
valid and if you're not destroying these

129
00:04:26,479 --> 00:04:30,479
tar balls when you extract the stuff

130
00:04:28,960 --> 00:04:32,320
then you're not destroying the signature

131
00:04:30,479 --> 00:04:36,240
metadata and that's useful

132
00:04:32,320 --> 00:04:38,479
um so for example in these two little

133
00:04:36,240 --> 00:04:39,919
uh things here you could use squash s

134
00:04:38,479 --> 00:04:43,599
instead of tar

135
00:04:39,919 --> 00:04:45,440
as just a straw man um and squash fest

136
00:04:43,600 --> 00:04:48,720
if you're familiar with it is basically

137
00:04:45,440 --> 00:04:49,360
um it's a mountable read-only file

138
00:04:48,720 --> 00:04:53,280
system

139
00:04:49,360 --> 00:04:54,720
uh it's i think the kernel documentation

140
00:04:53,280 --> 00:04:56,638
says this it's intended for

141
00:04:54,720 --> 00:04:58,000
general read-only file system use for

142
00:04:56,639 --> 00:05:00,960
archival use

143
00:04:58,000 --> 00:05:01,360
for example in cases where tar.gz may be

144
00:05:00,960 --> 00:05:03,280
used

145
00:05:01,360 --> 00:05:06,240
so it's basically intended to be a

146
00:05:03,280 --> 00:05:08,479
drop-in replacement for this thing

147
00:05:06,240 --> 00:05:10,320
we're already doing the the nice thing

148
00:05:08,479 --> 00:05:11,758
about this is the metadata is stored

149
00:05:10,320 --> 00:05:13,520
separately so for tar

150
00:05:11,759 --> 00:05:14,800
the metadata is stored in line so if you

151
00:05:13,520 --> 00:05:15,520
want to read a file at the end of the

152
00:05:14,800 --> 00:05:16,720
archive

153
00:05:15,520 --> 00:05:18,880
there's nothing at the beginning that

154
00:05:16,720 --> 00:05:21,360
says there are 15 files in this archive

155
00:05:18,880 --> 00:05:21,919
and the 15th file starts here so you

156
00:05:21,360 --> 00:05:23,440
have to just

157
00:05:21,919 --> 00:05:25,758
keep reading the whole archive which is

158
00:05:23,440 --> 00:05:26,160
annoying so squash vest the metadata is

159
00:05:25,759 --> 00:05:27,840
stored

160
00:05:26,160 --> 00:05:29,360
separately which means this whole thing

161
00:05:27,840 --> 00:05:32,799
is seekable

162
00:05:29,360 --> 00:05:33,759
you can also do parallel compression if

163
00:05:32,800 --> 00:05:35,440
you're familiar with

164
00:05:33,759 --> 00:05:38,479
like downloading large like gigabytes

165
00:05:35,440 --> 00:05:40,400
and gigabytes of container images

166
00:05:38,479 --> 00:05:42,639
the single threadedness of gzip becomes

167
00:05:40,400 --> 00:05:44,719
very painful

168
00:05:42,639 --> 00:05:46,639
so how do we implement something like

169
00:05:44,720 --> 00:05:47,600
this so basically we want to use

170
00:05:46,639 --> 00:05:52,240
squashfest

171
00:05:47,600 --> 00:05:56,000
for uh the the actual layer parts

172
00:05:52,240 --> 00:05:59,280
and when we do a instead of

173
00:05:56,000 --> 00:06:01,199
mounting something or extracting it and

174
00:05:59,280 --> 00:06:03,039
throwing the tarball away we would just

175
00:06:01,199 --> 00:06:05,120
mount it directly out of the oci image

176
00:06:03,039 --> 00:06:06,639
so there's no nothing's lost

177
00:06:05,120 --> 00:06:08,400
with the signature on the index we

178
00:06:06,639 --> 00:06:10,400
haven't destroyed that squash squash

179
00:06:08,400 --> 00:06:12,318
fest image so we can verify

180
00:06:10,400 --> 00:06:13,679
that this the guy the thing the guy

181
00:06:12,319 --> 00:06:14,560
built is the thing that we're running

182
00:06:13,680 --> 00:06:17,759
now

183
00:06:14,560 --> 00:06:21,120
um yeah

184
00:06:17,759 --> 00:06:23,759
uh so uh also then

185
00:06:21,120 --> 00:06:25,360
one of the other goals of this uh was

186
00:06:23,759 --> 00:06:26,319
updating so if you think about there's a

187
00:06:25,360 --> 00:06:29,440
kind of a

188
00:06:26,319 --> 00:06:30,560
spectrum and so on one end of the set

189
00:06:29,440 --> 00:06:33,199
spectrum when you

190
00:06:30,560 --> 00:06:34,160
get an image from your development team

191
00:06:33,199 --> 00:06:36,240
uh

192
00:06:34,160 --> 00:06:37,759
it's a docker image say and that is bit

193
00:06:36,240 --> 00:06:39,039
forbid what the development team ran and

194
00:06:37,759 --> 00:06:41,280
tested which is one of the things that

195
00:06:39,039 --> 00:06:43,680
people really loved about docker because

196
00:06:41,280 --> 00:06:45,119
um now then they know exactly this is

197
00:06:43,680 --> 00:06:48,240
the thing you want to deploy

198
00:06:45,120 --> 00:06:50,560
and on the other end of the spectrum

199
00:06:48,240 --> 00:06:51,840
there's uh traditional application

200
00:06:50,560 --> 00:06:54,960
packaging which is

201
00:06:51,840 --> 00:06:56,479
uh you say i want ssl and you don't

202
00:06:54,960 --> 00:06:59,120
specify a version at all

203
00:06:56,479 --> 00:06:59,840
and maybe that version of ssl there's

204
00:06:59,120 --> 00:07:01,440
some

205
00:06:59,840 --> 00:07:02,799
thing where it doesn't provide a symbol

206
00:07:01,440 --> 00:07:04,400
that this thing needs and that's where

207
00:07:02,800 --> 00:07:05,039
you can get into weird dependency hell

208
00:07:04,400 --> 00:07:06,719
issues

209
00:07:05,039 --> 00:07:08,000
and that's why people like docker is

210
00:07:06,720 --> 00:07:09,599
because they never have to solve that

211
00:07:08,000 --> 00:07:10,560
problem the ops people don't ever have

212
00:07:09,599 --> 00:07:12,719
to solve this

213
00:07:10,560 --> 00:07:14,080
dependency hell for the develop what was

214
00:07:12,720 --> 00:07:15,680
the version on the developers machine

215
00:07:14,080 --> 00:07:19,758
different than mine

216
00:07:15,680 --> 00:07:23,120
but unfortunately that is um

217
00:07:19,759 --> 00:07:24,639
different than you know what uh

218
00:07:23,120 --> 00:07:26,160
what what you what you want out of

219
00:07:24,639 --> 00:07:27,440
docker is

220
00:07:26,160 --> 00:07:29,199
is really sort of something in the

221
00:07:27,440 --> 00:07:31,039
middle here where

222
00:07:29,199 --> 00:07:32,960
i can change out specific versions of

223
00:07:31,039 --> 00:07:35,440
things if i know where they are in this

224
00:07:32,960 --> 00:07:37,440
in the layer stack but it's not all the

225
00:07:35,440 --> 00:07:39,440
way back to dependency hell maybe

226
00:07:37,440 --> 00:07:41,759
you know you say i'm using this version

227
00:07:39,440 --> 00:07:43,599
of python or whatever

228
00:07:41,759 --> 00:07:44,879
and the administrator can go build his

229
00:07:43,599 --> 00:07:46,319
own version of python with

230
00:07:44,879 --> 00:07:48,160
with the single patch applied and then

231
00:07:46,319 --> 00:07:50,639
stick it in and that would work

232
00:07:48,160 --> 00:07:51,840
um so we that's kind of what we want so

233
00:07:50,639 --> 00:07:54,080
for if we're

234
00:07:51,840 --> 00:07:54,878
trying to do a strategy for container

235
00:07:54,080 --> 00:07:58,400
updates

236
00:07:54,879 --> 00:07:59,520
you might have two docker files um

237
00:07:58,400 --> 00:08:01,758
you know they're they're two different

238
00:07:59,520 --> 00:08:03,440
applications so they both require

239
00:08:01,759 --> 00:08:05,360
openssl and python

240
00:08:03,440 --> 00:08:06,800
you clone one of them you clone the

241
00:08:05,360 --> 00:08:08,080
other one then you run their install

242
00:08:06,800 --> 00:08:09,599
scripts and now you've generated a

243
00:08:08,080 --> 00:08:12,400
container

244
00:08:09,599 --> 00:08:13,759
if you if you if you're just straw

245
00:08:12,400 --> 00:08:15,440
manning a different way to do this you

246
00:08:13,759 --> 00:08:17,599
might do it like this so

247
00:08:15,440 --> 00:08:18,479
you have two different uh layers that

248
00:08:17,599 --> 00:08:20,800
you're describing

249
00:08:18,479 --> 00:08:22,719
one is the we start from a centos and we

250
00:08:20,800 --> 00:08:24,400
add ssl the other one is we start from a

251
00:08:22,720 --> 00:08:26,479
centos and we had python

252
00:08:24,400 --> 00:08:28,080
and then on this side for the apple

253
00:08:26,479 --> 00:08:30,960
application install you might say

254
00:08:28,080 --> 00:08:31,919
start from centos grab this ssl grab

255
00:08:30,960 --> 00:08:34,478
this python

256
00:08:31,919 --> 00:08:35,039
and then install my application and so

257
00:08:34,479 --> 00:08:37,519
in

258
00:08:35,039 --> 00:08:40,000
through this way if you propagate this

259
00:08:37,519 --> 00:08:43,599
this stuff in the oci metadata data

260
00:08:40,000 --> 00:08:47,680
then you can uh tell the operator hey

261
00:08:43,599 --> 00:08:49,519
we have we have this uh different way of

262
00:08:47,680 --> 00:08:51,519
annotating things and we know that this

263
00:08:49,519 --> 00:08:55,040
particular layer corresponds to

264
00:08:51,519 --> 00:08:56,720
this thing so in pictures um

265
00:08:55,040 --> 00:08:59,599
if you have a something that looks like

266
00:08:56,720 --> 00:09:03,920
this or a python 3 i'm going to use

267
00:08:59,600 --> 00:09:06,480
blue for ssl and green for python

268
00:09:03,920 --> 00:09:07,519
then the end result is if we do this

269
00:09:06,480 --> 00:09:09,839
apply thing

270
00:09:07,519 --> 00:09:10,880
we stack the ssl on top then we stack

271
00:09:09,839 --> 00:09:14,160
the python on

272
00:09:10,880 --> 00:09:17,279
then we put the diff from the install so

273
00:09:14,160 --> 00:09:20,800
ultimately this is sort of how the the

274
00:09:17,279 --> 00:09:22,720
colors correspond and that's the idea of

275
00:09:20,800 --> 00:09:24,000
then the administrator can go in and say

276
00:09:22,720 --> 00:09:25,760
i know this blue layer is

277
00:09:24,000 --> 00:09:27,279
has a bug i'm going to swap it in for

278
00:09:25,760 --> 00:09:29,439
this other layer with this one patch

279
00:09:27,279 --> 00:09:33,040
applied that i'm really worried about

280
00:09:29,440 --> 00:09:33,040
um so or i guess

281
00:09:34,080 --> 00:09:38,480
or you can do it with python too i guess

282
00:09:35,839 --> 00:09:41,360
is the point here um

283
00:09:38,480 --> 00:09:41,360
thank you uh so

284
00:09:41,680 --> 00:09:46,079
so tycho mentioned some some strategies

285
00:09:43,839 --> 00:09:48,160
for building images that allow you to

286
00:09:46,080 --> 00:09:50,320
more flexibly apply updates

287
00:09:48,160 --> 00:09:53,199
and and be sort of more in the middle of

288
00:09:50,320 --> 00:09:54,800
that continuum of dependency hell versus

289
00:09:53,200 --> 00:09:56,480
everything static and i have to go back

290
00:09:54,800 --> 00:09:58,719
to 50 uh

291
00:09:56,480 --> 00:10:00,240
50 dev teams and ask them to rebuild

292
00:09:58,720 --> 00:10:00,880
their images when i need to fix an

293
00:10:00,240 --> 00:10:02,320
exploit

294
00:10:00,880 --> 00:10:04,079
and you know that could be weeks or

295
00:10:02,320 --> 00:10:05,920
months and in the meantime

296
00:10:04,079 --> 00:10:07,439
i've i'm running a cluster that's

297
00:10:05,920 --> 00:10:09,360
exploitable right

298
00:10:07,440 --> 00:10:10,880
so i titled this let's use a container

299
00:10:09,360 --> 00:10:14,000
runtime i actually mean let's use

300
00:10:10,880 --> 00:10:15,200
kubernetes let's uh let's use a runtime

301
00:10:14,000 --> 00:10:18,480
system that

302
00:10:15,200 --> 00:10:22,240
supports this image building and

303
00:10:18,480 --> 00:10:25,440
and uh and mounting scheme and so

304
00:10:22,240 --> 00:10:27,360
just a in a uh in a nutshell tycho

305
00:10:25,440 --> 00:10:29,519
suggesting a layer format that uses

306
00:10:27,360 --> 00:10:32,880
squash effects as the layers and so

307
00:10:29,519 --> 00:10:35,760
instead of unpacking it you mount it

308
00:10:32,880 --> 00:10:36,480
it's basically you mount the squash fs

309
00:10:35,760 --> 00:10:39,680
in

310
00:10:36,480 --> 00:10:40,640
subsequent overlap overlay fs mount

311
00:10:39,680 --> 00:10:43,680
points

312
00:10:40,640 --> 00:10:45,439
and you uh you don't have this extract

313
00:10:43,680 --> 00:10:46,800
step the extract happens as you read

314
00:10:45,440 --> 00:10:49,440
files from the image

315
00:10:46,800 --> 00:10:50,560
just just like with the with mounting

316
00:10:49,440 --> 00:10:53,760
any squash fs

317
00:10:50,560 --> 00:10:55,359
um so this should fit into a container

318
00:10:53,760 --> 00:10:59,120
runtime really well if i've got

319
00:10:55,360 --> 00:11:01,760
if i've got kubernetes running cryo

320
00:10:59,120 --> 00:11:02,720
and uh and a cryo cryo compatible

321
00:11:01,760 --> 00:11:04,640
runtime

322
00:11:02,720 --> 00:11:06,800
such as the one that we've built cryo

323
00:11:04,640 --> 00:11:09,920
lxc that uses lxc or run c

324
00:11:06,800 --> 00:11:10,560
the sort of more common one we should be

325
00:11:09,920 --> 00:11:12,000
able to just

326
00:11:10,560 --> 00:11:15,599
plug in these images that we've built

327
00:11:12,000 --> 00:11:20,160
with squash fest layers and

328
00:11:15,600 --> 00:11:23,519
ship them and use the regular oci

329
00:11:20,160 --> 00:11:26,160
oci image management tools

330
00:11:23,519 --> 00:11:28,160
and do minimal changes because this is

331
00:11:26,160 --> 00:11:30,880
all compliant to the oci spec

332
00:11:28,160 --> 00:11:32,160
basically the oci spec for container for

333
00:11:30,880 --> 00:11:34,000
container images

334
00:11:32,160 --> 00:11:35,600
lets you just say the blobs are any type

335
00:11:34,000 --> 00:11:37,279
you want and the index

336
00:11:35,600 --> 00:11:39,279
points to the blobs and we don't care

337
00:11:37,279 --> 00:11:42,959
what happens

338
00:11:39,279 --> 00:11:45,519
in general though everything has been

339
00:11:42,959 --> 00:11:46,079
has been written and tested for the the

340
00:11:45,519 --> 00:11:48,480
way that

341
00:11:46,079 --> 00:11:49,760
tycho described first where they're gzip

342
00:11:48,480 --> 00:11:51,440
tarballs

343
00:11:49,760 --> 00:11:52,880
because that's what the original docker

344
00:11:51,440 --> 00:11:54,800
format was and that's what everybody

345
00:11:52,880 --> 00:11:57,360
uses

346
00:11:54,800 --> 00:11:58,880
so yeah so ideally uh the kubelet will

347
00:11:57,360 --> 00:12:00,560
talk to cryo cryo

348
00:11:58,880 --> 00:12:01,920
this is the red text here is where we

349
00:12:00,560 --> 00:12:05,359
have to do something different

350
00:12:01,920 --> 00:12:06,880
it'll uh pull and mount and

351
00:12:05,360 --> 00:12:08,399
so this might be the first time we

352
00:12:06,880 --> 00:12:09,279
mentioned atomfs right here but this is

353
00:12:08,399 --> 00:12:12,399
basically

354
00:12:09,279 --> 00:12:16,000
um if you if you think of a

355
00:12:12,399 --> 00:12:18,320
an overlay a series of overlay fs uh

356
00:12:16,000 --> 00:12:19,600
mounted squash fest file systems if you

357
00:12:18,320 --> 00:12:20,880
think of that as a different kind of

358
00:12:19,600 --> 00:12:22,880
file system you could call it

359
00:12:20,880 --> 00:12:24,000
atomfs and you could and you could label

360
00:12:22,880 --> 00:12:26,720
each of those layers as

361
00:12:24,000 --> 00:12:27,760
a molecule in an atom or an atom in a

362
00:12:26,720 --> 00:12:31,360
molecule

363
00:12:27,760 --> 00:12:32,720
right um but yeah tycho just skipped

364
00:12:31,360 --> 00:12:33,920
straight to the implementation details

365
00:12:32,720 --> 00:12:37,680
of the thing that we have called

366
00:12:33,920 --> 00:12:39,360
atom fs which is fine so

367
00:12:37,680 --> 00:12:40,719
and and then uh the the final point is

368
00:12:39,360 --> 00:12:42,240
creo lxc and or

369
00:12:40,720 --> 00:12:44,560
run c if you're using run c we'll just

370
00:12:42,240 --> 00:12:47,279
run with that because what creo does

371
00:12:44,560 --> 00:12:49,199
the the oci runtime spec interface is

372
00:12:47,279 --> 00:12:51,760
hand me an unpacked root fest

373
00:12:49,200 --> 00:12:53,360
or really hand me a mounted root s but

374
00:12:51,760 --> 00:12:56,240
actually the way i just described that

375
00:12:53,360 --> 00:12:57,360
points to some of the some of the bumps

376
00:12:56,240 --> 00:13:00,480
along the way

377
00:12:57,360 --> 00:13:03,519
um is that the like i mentioned that the

378
00:13:00,480 --> 00:13:05,040
the assumptions are are there are a lot

379
00:13:03,519 --> 00:13:07,680
of assumptions in the tooling

380
00:13:05,040 --> 00:13:08,319
because of the because there's only one

381
00:13:07,680 --> 00:13:09,920
way that

382
00:13:08,320 --> 00:13:12,560
people have really used this and this is

383
00:13:09,920 --> 00:13:13,680
with the compressed tar balls in the

384
00:13:12,560 --> 00:13:16,479
layers

385
00:13:13,680 --> 00:13:19,199
so for example scopeo is a tool for

386
00:13:16,480 --> 00:13:20,560
moving around and unpacking

387
00:13:19,200 --> 00:13:22,480
sorry just just moving around and

388
00:13:20,560 --> 00:13:26,479
inspecting oci images

389
00:13:22,480 --> 00:13:29,040
both local and remote um and it assumes

390
00:13:26,480 --> 00:13:29,040
that uh

391
00:13:30,000 --> 00:13:33,279
let's see basically it's it's assuming

392
00:13:32,720 --> 00:13:34,720
that the

393
00:13:33,279 --> 00:13:36,480
the layers are compressed and layers

394
00:13:34,720 --> 00:13:40,160
should be compressed and if you

395
00:13:36,480 --> 00:13:41,519
if you use it for um if by default you

396
00:13:40,160 --> 00:13:44,560
use it to ship around

397
00:13:41,519 --> 00:13:46,000
oci images with uncompressed layers it

398
00:13:44,560 --> 00:13:47,680
will helpfully compress them for you

399
00:13:46,000 --> 00:13:50,560
which is not what you want if you're

400
00:13:47,680 --> 00:13:51,359
shipping squash fest layers some of the

401
00:13:50,560 --> 00:13:54,000
tooling

402
00:13:51,360 --> 00:13:55,920
sometimes rejects layer types that

403
00:13:54,000 --> 00:13:59,839
aren't common even though the spec says

404
00:13:55,920 --> 00:14:03,199
you should accept unknown layer types

405
00:13:59,839 --> 00:14:05,120
that's being worked on

406
00:14:03,199 --> 00:14:06,319
this is another example umochi is

407
00:14:05,120 --> 00:14:09,839
another

408
00:14:06,320 --> 00:14:11,040
image management tool just assumes that

409
00:14:09,839 --> 00:14:12,079
things need to be compressed so they try

410
00:14:11,040 --> 00:14:13,760
to be helpful

411
00:14:12,079 --> 00:14:15,519
by compressing things by default it's

412
00:14:13,760 --> 00:14:19,120
not what you want

413
00:14:15,519 --> 00:14:19,839
um and so yeah i uh i sort of did a slip

414
00:14:19,120 --> 00:14:23,199
where i said

415
00:14:19,839 --> 00:14:26,160
um the oci runtime spec

416
00:14:23,199 --> 00:14:26,719
expects an unpacked root effects right

417
00:14:26,160 --> 00:14:28,240
so there's

418
00:14:26,720 --> 00:14:30,079
there's sort of a decompress there's an

419
00:14:28,240 --> 00:14:30,720
implicit assumption of a decompress step

420
00:14:30,079 --> 00:14:32,959
there

421
00:14:30,720 --> 00:14:34,560
which we don't actually have with this

422
00:14:32,959 --> 00:14:36,638
this squash fest layer type

423
00:14:34,560 --> 00:14:38,479
you're just mounting it so there's

424
00:14:36,639 --> 00:14:39,440
there's a lot of the architecture of the

425
00:14:38,480 --> 00:14:41,600
creo

426
00:14:39,440 --> 00:14:43,279
project and and the the libraries that

427
00:14:41,600 --> 00:14:44,720
it's factored into containers image and

428
00:14:43,279 --> 00:14:47,120
container storage

429
00:14:44,720 --> 00:14:47,920
um and this is what github.com

430
00:14:47,120 --> 00:14:51,279
containers slash

431
00:14:47,920 --> 00:14:53,040
image et cetera

432
00:14:51,279 --> 00:14:54,720
that assumes sort of like a decompress

433
00:14:53,040 --> 00:14:56,160
and apply diffs step you're going to

434
00:14:54,720 --> 00:14:58,079
decompress this blob and you're going to

435
00:14:56,160 --> 00:14:59,920
apply its disk to here and then and then

436
00:14:58,079 --> 00:15:01,599
at the end you have an extracted thing

437
00:14:59,920 --> 00:15:03,439
we don't need to do any of that work and

438
00:15:01,600 --> 00:15:06,240
there's uh there's a bit of

439
00:15:03,440 --> 00:15:07,760
friction in adding it's so what we're

440
00:15:06,240 --> 00:15:09,680
adding is not just another way of

441
00:15:07,760 --> 00:15:13,040
storing images because of the way that

442
00:15:09,680 --> 00:15:15,040
that it assumes you have to do this

443
00:15:13,040 --> 00:15:16,160
yeah so this is something the container

444
00:15:15,040 --> 00:15:18,719
storage library implements

445
00:15:16,160 --> 00:15:19,920
implements graph drivers and graph graph

446
00:15:18,720 --> 00:15:22,240
drivers

447
00:15:19,920 --> 00:15:23,120
terminology that started out in docker

448
00:15:22,240 --> 00:15:26,000
because the

449
00:15:23,120 --> 00:15:26,560
the layers if you have multiple versions

450
00:15:26,000 --> 00:15:28,560
of a

451
00:15:26,560 --> 00:15:30,079
of a container or if you have uh

452
00:15:28,560 --> 00:15:32,000
multiple containers that were built off

453
00:15:30,079 --> 00:15:33,279
of an ubuntu image base or or a

454
00:15:32,000 --> 00:15:35,839
centos-based image

455
00:15:33,279 --> 00:15:37,839
there's actually a directed graph of of

456
00:15:35,839 --> 00:15:39,120
layers if you know there's one base then

457
00:15:37,839 --> 00:15:41,040
two different things were built on top

458
00:15:39,120 --> 00:15:42,480
of that etc etc

459
00:15:41,040 --> 00:15:44,800
so if you think of the layers in terms

460
00:15:42,480 --> 00:15:46,240
of that graph the graph driver is the

461
00:15:44,800 --> 00:15:49,359
storage

462
00:15:46,240 --> 00:15:49,360
the storage driver that

463
00:15:50,160 --> 00:15:58,800
that models that graph of image layers

464
00:15:54,480 --> 00:16:02,000
and so it's it's definitely

465
00:15:58,800 --> 00:16:04,560
uh focusing on the extract step

466
00:16:02,000 --> 00:16:06,079
and yeah so for running you're

467
00:16:04,560 --> 00:16:07,839
extracting images or for

468
00:16:06,079 --> 00:16:09,359
for building you know when you're

469
00:16:07,839 --> 00:16:10,480
building you have a you have a container

470
00:16:09,360 --> 00:16:13,120
that was running

471
00:16:10,480 --> 00:16:13,680
um and you did some commands and then

472
00:16:13,120 --> 00:16:15,519
you

473
00:16:13,680 --> 00:16:17,120
you know you make a snapshot and then

474
00:16:15,519 --> 00:16:18,959
you do some more commands and you have

475
00:16:17,120 --> 00:16:20,320
a diff that you need to you need to

476
00:16:18,959 --> 00:16:21,439
discover the differences between the two

477
00:16:20,320 --> 00:16:23,839
file systems

478
00:16:21,440 --> 00:16:25,199
and and make your new layers um so

479
00:16:23,839 --> 00:16:27,199
that's the sort of

480
00:16:25,199 --> 00:16:29,120
the what that's referring to is the

481
00:16:27,199 --> 00:16:31,120
render diff

482
00:16:29,120 --> 00:16:33,440
i mentioned this so there are actually a

483
00:16:31,120 --> 00:16:35,279
lot of different graph drivers

484
00:16:33,440 --> 00:16:38,480
uh all for different ways of storing

485
00:16:35,279 --> 00:16:40,480
images you can use

486
00:16:38,480 --> 00:16:42,800
been provisioning type file systems

487
00:16:40,480 --> 00:16:44,240
regular file systems or even just

488
00:16:42,800 --> 00:16:46,479
be really inefficient and do lots of

489
00:16:44,240 --> 00:16:48,000
copying

490
00:16:46,480 --> 00:16:50,399
and all again all of these primitives

491
00:16:48,000 --> 00:16:53,519
are very extract step oriented that

492
00:16:50,399 --> 00:16:54,320
the the interface for adding a new graph

493
00:16:53,519 --> 00:16:57,440
driver into

494
00:16:54,320 --> 00:17:00,560
uh into creo is you know you

495
00:16:57,440 --> 00:17:02,480
you do a create you do a delete uh you

496
00:17:00,560 --> 00:17:03,758
you apply diffs from you know if you get

497
00:17:02,480 --> 00:17:04,000
a new layer you apply the discs from

498
00:17:03,759 --> 00:17:06,079
that

499
00:17:04,000 --> 00:17:07,520
layer to get a new thing and then when

500
00:17:06,079 --> 00:17:09,119
you get the final

501
00:17:07,520 --> 00:17:10,559
image for the container that's when when

502
00:17:09,119 --> 00:17:13,359
you actually do a mount

503
00:17:10,559 --> 00:17:14,639
um everything's in terms of individual

504
00:17:13,359 --> 00:17:18,639
layer ids

505
00:17:14,640 --> 00:17:21,039
and and it's a

506
00:17:18,640 --> 00:17:22,480
you know it's expecting that you will be

507
00:17:21,039 --> 00:17:24,160
unpacking and extracting

508
00:17:22,480 --> 00:17:26,240
like like tyko mentioned that you're

509
00:17:24,160 --> 00:17:27,919
doing a uh sort of a lossy thing where

510
00:17:26,240 --> 00:17:28,960
you extract the tarball that's the thing

511
00:17:27,919 --> 00:17:30,559
that you signed

512
00:17:28,960 --> 00:17:31,760
but what you have at the end of the

513
00:17:30,559 --> 00:17:32,000
process is something that you can't

514
00:17:31,760 --> 00:17:34,879
check

515
00:17:32,000 --> 00:17:34,880
the signature against

516
00:17:35,039 --> 00:17:38,160
um so yeah what we want to be able to do

517
00:17:37,840 --> 00:17:41,280
is

518
00:17:38,160 --> 00:17:41,919
is use our new squash fest tools in our

519
00:17:41,280 --> 00:17:45,039
new

520
00:17:41,919 --> 00:17:46,640
spatial fest style layers in creo and

521
00:17:45,039 --> 00:17:48,080
the question is sort of how do we patch

522
00:17:46,640 --> 00:17:49,600
it and the the approach that we're sort

523
00:17:48,080 --> 00:17:51,280
of that we're taking now

524
00:17:49,600 --> 00:17:52,879
like what you'd like to do is is there

525
00:17:51,280 --> 00:17:54,240
is there a high level uh

526
00:17:52,880 --> 00:17:55,840
function that says okay i've got this

527
00:17:54,240 --> 00:17:57,039
image url and i'm going to create a

528
00:17:55,840 --> 00:17:57,600
container from it and i want to just

529
00:17:57,039 --> 00:17:59,200
sort of

530
00:17:57,600 --> 00:18:00,879
cut off there and do my special

531
00:17:59,200 --> 00:18:03,360
swashifest thing um

532
00:18:00,880 --> 00:18:04,640
but there it's it's not quite that easy

533
00:18:03,360 --> 00:18:05,760
there isn't really one place to patch

534
00:18:04,640 --> 00:18:09,200
there there's a

535
00:18:05,760 --> 00:18:11,200
there's code that's uh that implements

536
00:18:09,200 --> 00:18:12,640
the process of pulling images and saving

537
00:18:11,200 --> 00:18:14,799
to storage

538
00:18:12,640 --> 00:18:16,080
and uh and there are some assumptions

539
00:18:14,799 --> 00:18:18,480
around that extract step

540
00:18:16,080 --> 00:18:19,678
in there um and using the the graph

541
00:18:18,480 --> 00:18:22,160
driver primitives

542
00:18:19,679 --> 00:18:23,919
and then there's a separate code that

543
00:18:22,160 --> 00:18:25,120
handles uh

544
00:18:23,919 --> 00:18:27,679
this is called the runtime storage

545
00:18:25,120 --> 00:18:29,840
server that that handles uh

546
00:18:27,679 --> 00:18:32,000
actually getting to a place where you

547
00:18:29,840 --> 00:18:33,360
have a usable root of s and this is

548
00:18:32,000 --> 00:18:35,280
doing the extract

549
00:18:33,360 --> 00:18:37,360
in and then a mount and these are two

550
00:18:35,280 --> 00:18:38,879
separate things when in fact

551
00:18:37,360 --> 00:18:43,840
we're proposing something that doesn't

552
00:18:38,880 --> 00:18:43,840
need two steps

553
00:18:43,919 --> 00:18:51,120
right right yeah i'm saying

554
00:18:47,440 --> 00:18:54,240
it it grabs the image and

555
00:18:51,120 --> 00:18:55,039
and the library downloads it and then we

556
00:18:54,240 --> 00:18:57,200
also

557
00:18:55,039 --> 00:18:58,480
extract here and then mount it's two

558
00:18:57,200 --> 00:19:02,240
steps um

559
00:18:58,480 --> 00:19:03,440
so we have uh the the answer here is

560
00:19:02,240 --> 00:19:05,120
that we don't actually know the best way

561
00:19:03,440 --> 00:19:07,039
to do this now we have an approach

562
00:19:05,120 --> 00:19:08,239
um we have some ideas this is certainly

563
00:19:07,039 --> 00:19:10,320
something that would be

564
00:19:08,240 --> 00:19:12,480
we'd be interested in talking to uh to

565
00:19:10,320 --> 00:19:12,799
people and that that maintain creo and

566
00:19:12,480 --> 00:19:15,280
uh

567
00:19:12,799 --> 00:19:16,559
the uh we actually know this code works

568
00:19:15,280 --> 00:19:17,840
yeah yeah

569
00:19:16,559 --> 00:19:19,840
for the for the best way to do this

570
00:19:17,840 --> 00:19:20,559
because there you know these assumptions

571
00:19:19,840 --> 00:19:21,840
that we

572
00:19:20,559 --> 00:19:23,360
we talked i don't want to say that we're

573
00:19:21,840 --> 00:19:24,559
that they did it wrong or that you know

574
00:19:23,360 --> 00:19:26,240
they made bad assumptions

575
00:19:24,559 --> 00:19:28,080
these were very valid assumptions until

576
00:19:26,240 --> 00:19:31,280
we came along and wanted to do something

577
00:19:28,080 --> 00:19:33,039
kind of weird with it and so you know

578
00:19:31,280 --> 00:19:36,160
maybe there's a better way than than

579
00:19:33,039 --> 00:19:36,160
where we're hacking it in now

580
00:19:36,559 --> 00:19:42,399
also just to quickly introduce uh it's

581
00:19:39,679 --> 00:19:42,880
it's not entirely related to the uh to

582
00:19:42,400 --> 00:19:45,039
the

583
00:19:42,880 --> 00:19:46,160
image storage format discussions from

584
00:19:45,039 --> 00:19:49,120
before but

585
00:19:46,160 --> 00:19:50,880
uh we wanted to mention that there is a

586
00:19:49,120 --> 00:19:54,159
drop-in replacement for run c

587
00:19:50,880 --> 00:19:56,000
that uses lxc um it's just another box

588
00:19:54,160 --> 00:19:57,760
uh well i guess maybe not everyone was

589
00:19:56,000 --> 00:19:59,120
here for the diagram talk before it was

590
00:19:57,760 --> 00:20:02,640
a couple hours ago but

591
00:19:59,120 --> 00:20:05,120
um if if you're thinking of uh how

592
00:20:02,640 --> 00:20:06,480
so so how containers get run in a

593
00:20:05,120 --> 00:20:10,239
kubernetes cluster

594
00:20:06,480 --> 00:20:12,880
that uses cryo is there's a there's a

595
00:20:10,240 --> 00:20:15,760
format for kubelet to talk to cryo

596
00:20:12,880 --> 00:20:18,240
and that that that's the cri container

597
00:20:15,760 --> 00:20:20,559
runtime interface

598
00:20:18,240 --> 00:20:21,600
and then cryo translates that does some

599
00:20:20,559 --> 00:20:24,960
work and translates that

600
00:20:21,600 --> 00:20:26,799
to the oci runtime interface spec

601
00:20:24,960 --> 00:20:29,120
which uh which it then passes to a

602
00:20:26,799 --> 00:20:30,720
compliant runtime run c is one of them

603
00:20:29,120 --> 00:20:32,799
um and we've written another one that

604
00:20:30,720 --> 00:20:34,480
will instead of using the

605
00:20:32,799 --> 00:20:36,799
the libraries that run c uses it uses

606
00:20:34,480 --> 00:20:38,960
lxc um

607
00:20:36,799 --> 00:20:40,639
and and you may have your own reasons

608
00:20:38,960 --> 00:20:42,960
for for wanting to use lxc

609
00:20:40,640 --> 00:20:43,760
uh one reason it might be that you're

610
00:20:42,960 --> 00:20:46,559
using it

611
00:20:43,760 --> 00:20:47,919
in the cluster for other reasons and you

612
00:20:46,559 --> 00:20:49,280
don't wanna have to maintain multiple

613
00:20:47,919 --> 00:20:53,679
runtimes

614
00:20:49,280 --> 00:20:55,039
um okay and so now it's time for a demo

615
00:20:53,679 --> 00:20:57,919
that tycho will

616
00:20:55,039 --> 00:20:58,960
yeah motivate and uh something like that

617
00:20:57,919 --> 00:21:01,200
anyway so

618
00:20:58,960 --> 00:21:03,280
suppose this is the this is the updating

619
00:21:01,200 --> 00:21:05,200
thing so suppose that i have a

620
00:21:03,280 --> 00:21:07,520
image where there's some vulnerability

621
00:21:05,200 --> 00:21:08,159
that's known uh the one i cooked up is

622
00:21:07,520 --> 00:21:10,080
uh

623
00:21:08,159 --> 00:21:12,480
when you run the python web server it

624
00:21:10,080 --> 00:21:13,439
forks a task that just serves up slash

625
00:21:12,480 --> 00:21:16,720
so you can

626
00:21:13,440 --> 00:21:19,840
look at whatever you want so anyway

627
00:21:16,720 --> 00:21:22,080
we call that python 3 rooted

628
00:21:19,840 --> 00:21:23,760
so suppose you have this image and you'd

629
00:21:22,080 --> 00:21:25,840
really like to fix it

630
00:21:23,760 --> 00:21:27,280
and with some other version and if you

631
00:21:25,840 --> 00:21:29,600
notice the

632
00:21:27,280 --> 00:21:31,039
bottom two layers here stay the same

633
00:21:29,600 --> 00:21:32,639
that there's actually a bug in our

634
00:21:31,039 --> 00:21:34,400
tooling for generating this that

635
00:21:32,640 --> 00:21:35,919
where the second layer is there uh that

636
00:21:34,400 --> 00:21:36,480
we'll see so the bottom two layers stay

637
00:21:35,919 --> 00:21:38,320
the same

638
00:21:36,480 --> 00:21:40,000
but the top one is fixed and so this is

639
00:21:38,320 --> 00:21:42,080
the idea of the admin

640
00:21:40,000 --> 00:21:43,520
knows you know how to patch some

641
00:21:42,080 --> 00:21:45,360
particular thing and this one's in the

642
00:21:43,520 --> 00:21:47,679
python standard library i just

643
00:21:45,360 --> 00:21:49,360
hacked the file but you know you could

644
00:21:47,679 --> 00:21:52,720
you could imagine doing anything

645
00:21:49,360 --> 00:21:55,520
any any bug ssl or whatever so if i go

646
00:21:52,720 --> 00:21:55,520
here i can

647
00:21:55,840 --> 00:21:58,879
i can start so this is going to start um

648
00:21:58,559 --> 00:22:02,158
oh

649
00:21:58,880 --> 00:22:03,360
whoops i have to run all this as a root

650
00:22:02,159 --> 00:22:06,400
because i'm not cool enough to have

651
00:22:03,360 --> 00:22:06,399
unprivileged containers

652
00:22:06,720 --> 00:22:14,000
there it works now yeah

653
00:22:10,880 --> 00:22:15,600
um so i logged some

654
00:22:14,000 --> 00:22:17,280
this these errors here are really not

655
00:22:15,600 --> 00:22:20,959
errors this is just for um

656
00:22:17,280 --> 00:22:22,639
debugging purposes so for the demo um

657
00:22:20,960 --> 00:22:24,240
this is actually in the backwards order

658
00:22:22,640 --> 00:22:26,240
that i displayed in the slides but this

659
00:22:24,240 --> 00:22:29,919
is how creo actually thinks of it

660
00:22:26,240 --> 00:22:32,000
so this is the image the actual like

661
00:22:29,919 --> 00:22:34,080
bass root fs this is that empty layer

662
00:22:32,000 --> 00:22:37,679
and here's the image with the bug in it

663
00:22:34,080 --> 00:22:39,678
and so what i want to do is if i do a

664
00:22:37,679 --> 00:22:41,679
wget

665
00:22:39,679 --> 00:22:42,960
i don't even have unprivileged w yet so

666
00:22:41,679 --> 00:22:46,000
if i do this w you get

667
00:22:42,960 --> 00:22:46,320
you can see look i my rooted image i can

668
00:22:46,000 --> 00:22:48,080
grab

669
00:22:46,320 --> 00:22:50,320
etsy issue or whatever file i want off

670
00:22:48,080 --> 00:22:51,389
the system

671
00:22:50,320 --> 00:22:53,360
so now i

672
00:22:51,390 --> 00:22:56,159
[Music]

673
00:22:53,360 --> 00:22:58,559
so if i look at this replace script you

674
00:22:56,159 --> 00:23:00,960
can see here i'm uh

675
00:22:58,559 --> 00:23:03,678
doing a creative this fix dot json so

676
00:23:00,960 --> 00:23:03,679
what's in there

677
00:23:06,159 --> 00:23:12,080
oops there we go okay so um

678
00:23:09,360 --> 00:23:14,158
the fix this fixed.json basically points

679
00:23:12,080 --> 00:23:16,639
at a fixed image and this fixed image is

680
00:23:14,159 --> 00:23:18,080
uh the one where the administrator has

681
00:23:16,640 --> 00:23:20,000
massaged the layers

682
00:23:18,080 --> 00:23:21,840
um he doesn't need if if the

683
00:23:20,000 --> 00:23:22,720
administrator knows because of the oci

684
00:23:21,840 --> 00:23:23,760
annotations

685
00:23:22,720 --> 00:23:25,760
he doesn't need to go back to the

686
00:23:23,760 --> 00:23:27,360
developer he can just say here i

687
00:23:25,760 --> 00:23:30,559
generated a fixed image

688
00:23:27,360 --> 00:23:32,559
so i have this script here that does a

689
00:23:30,559 --> 00:23:34,799
replace which basically just

690
00:23:32,559 --> 00:23:36,000
takes one swaps out the other one again

691
00:23:34,799 --> 00:23:38,559
these error messages now

692
00:23:36,000 --> 00:23:40,080
you can see this these two are the same

693
00:23:38,559 --> 00:23:41,360
this is the same seven seven this is the

694
00:23:40,080 --> 00:23:43,840
same empty layer here

695
00:23:41,360 --> 00:23:45,439
but now i've generated this fixed one so

696
00:23:43,840 --> 00:23:48,720
if i try and do

697
00:23:45,440 --> 00:23:49,120
my wget again now i get a connection or

698
00:23:48,720 --> 00:23:51,520
fuse

699
00:23:49,120 --> 00:23:53,279
because that little bit wasn't there and

700
00:23:51,520 --> 00:23:55,760
it wasn't exploited so

701
00:23:53,279 --> 00:23:56,960
the idea here is with a little bit of

702
00:23:55,760 --> 00:23:59,440
annotation and

703
00:23:56,960 --> 00:24:00,799
if we all as a community start thinking

704
00:23:59,440 --> 00:24:02,799
a little bit differently about how we

705
00:24:00,799 --> 00:24:05,039
design our images

706
00:24:02,799 --> 00:24:07,600
we can make life a lot easier for

707
00:24:05,039 --> 00:24:07,600
operators

708
00:24:07,760 --> 00:24:19,840
i know with that i think we're done

709
00:24:09,039 --> 00:24:19,840
we'll take questions

710
00:24:25,600 --> 00:24:29,520
towards the start of your uh talk you

711
00:24:27,679 --> 00:24:33,360
had python and uh

712
00:24:29,520 --> 00:24:35,120
ssl kind of like mixed together how

713
00:24:33,360 --> 00:24:36,719
how would you deal with conflicts if you

714
00:24:35,120 --> 00:24:38,639
had two things that

715
00:24:36,720 --> 00:24:40,000
somehow touched the same files or very

716
00:24:38,640 --> 00:24:41,919
good question and and

717
00:24:40,000 --> 00:24:43,440
conflicts are a reality that we've we

718
00:24:41,919 --> 00:24:45,600
sort of encountered conflicts in two

719
00:24:43,440 --> 00:24:46,400
different places one is like with rpm

720
00:24:45,600 --> 00:24:48,240
databases

721
00:24:46,400 --> 00:24:50,080
so that like basically it updates some

722
00:24:48,240 --> 00:24:51,600
binary database that says i've installed

723
00:24:50,080 --> 00:24:54,000
python and then the other one

724
00:24:51,600 --> 00:24:55,360
updates a different binary database that

725
00:24:54,000 --> 00:25:00,000
says i've installed

726
00:24:55,360 --> 00:25:03,600
um ssl yeah so that's a conflict where

727
00:25:00,000 --> 00:25:05,520
you know if if you're this is again a

728
00:25:03,600 --> 00:25:06,879
little bit more of a philosophical leap

729
00:25:05,520 --> 00:25:08,080
here but if you're building everything

730
00:25:06,880 --> 00:25:09,600
from source because you're a big

731
00:25:08,080 --> 00:25:11,760
enterprise and you

732
00:25:09,600 --> 00:25:13,199
you have to ship things there's no real

733
00:25:11,760 --> 00:25:14,158
reason you need to ship things as a

734
00:25:13,200 --> 00:25:15,840
package

735
00:25:14,159 --> 00:25:17,600
right as an rpm package you could just

736
00:25:15,840 --> 00:25:19,439
build the oci layer

737
00:25:17,600 --> 00:25:21,360
and ship that instead and so

738
00:25:19,440 --> 00:25:23,919
philosophically that's what we're doing

739
00:25:21,360 --> 00:25:24,799
the other conflict which we which we've

740
00:25:23,919 --> 00:25:26,960
run into

741
00:25:24,799 --> 00:25:28,000
that that doesn't help with is the ld

742
00:25:26,960 --> 00:25:29,360
cache so

743
00:25:28,000 --> 00:25:31,039
when you install something it

744
00:25:29,360 --> 00:25:31,678
regenerates the ld cache and that always

745
00:25:31,039 --> 00:25:34,640
conflict

746
00:25:31,679 --> 00:25:36,400
conflicts and basically there isn't a

747
00:25:34,640 --> 00:25:39,760
great solution to that so

748
00:25:36,400 --> 00:25:41,120
uh we right now just whitelist that so a

749
00:25:39,760 --> 00:25:42,720
third thing which

750
00:25:41,120 --> 00:25:44,799
i've thought about but we actually only

751
00:25:42,720 --> 00:25:48,000
do this with libraries right now but

752
00:25:44,799 --> 00:25:49,360
like some packages add users or add

753
00:25:48,000 --> 00:25:51,039
other stuff to text files you could

754
00:25:49,360 --> 00:25:51,840
imagine doing some sort of automated

755
00:25:51,039 --> 00:25:53,520
diffing

756
00:25:51,840 --> 00:25:54,879
um we don't do any of that mostly

757
00:25:53,520 --> 00:25:57,279
because

758
00:25:54,880 --> 00:26:01,120
delving into our application code is

759
00:25:57,279 --> 00:26:01,120
scary so i just did the libraries

760
00:26:01,200 --> 00:26:07,360
other questions so

761
00:26:04,480 --> 00:26:09,679
when you patched cryo for example

762
00:26:07,360 --> 00:26:13,039
recently container d started the work

763
00:26:09,679 --> 00:26:15,200
to have a remote snap sorter interface

764
00:26:13,039 --> 00:26:16,640
so different implementations of

765
00:26:15,200 --> 00:26:18,480
distraction could exist

766
00:26:16,640 --> 00:26:20,320
would that be possible for cryo did you

767
00:26:18,480 --> 00:26:21,760
investigate it or

768
00:26:20,320 --> 00:26:24,399
i'm not sure i understand your question

769
00:26:21,760 --> 00:26:24,879
the container recently they started to

770
00:26:24,400 --> 00:26:27,520
add

771
00:26:24,880 --> 00:26:28,400
it's not merged yet a remote snapshot

772
00:26:27,520 --> 00:26:30,158
interface

773
00:26:28,400 --> 00:26:31,760
okay so that different implementations

774
00:26:30,159 --> 00:26:34,400
of how they will prepare

775
00:26:31,760 --> 00:26:36,240
and pack and mount the layers can be

776
00:26:34,400 --> 00:26:37,120
implemented would that be compatible

777
00:26:36,240 --> 00:26:40,320
with

778
00:26:37,120 --> 00:26:43,360
so potentially um the question is how

779
00:26:40,320 --> 00:26:44,879
uh how how

780
00:26:43,360 --> 00:26:47,279
what what does that plug-in interface

781
00:26:44,880 --> 00:26:48,799
look like so initially i thought when i

782
00:26:47,279 --> 00:26:50,320
first set out to do this like cool i'll

783
00:26:48,799 --> 00:26:52,158
just implement another

784
00:26:50,320 --> 00:26:53,918
like plug-in for container storage or

785
00:26:52,159 --> 00:26:56,159
whatever and and then it'll all just

786
00:26:53,919 --> 00:26:57,840
work just fine but the problem really is

787
00:26:56,159 --> 00:26:59,520
that the primitives are phrased in this

788
00:26:57,840 --> 00:27:00,799
way of like everybody sort of assumes

789
00:26:59,520 --> 00:27:03,360
that you're going to have to

790
00:27:00,799 --> 00:27:04,960
process the image in some way and as a

791
00:27:03,360 --> 00:27:05,600
design goal we don't want to have that

792
00:27:04,960 --> 00:27:09,279
step

793
00:27:05,600 --> 00:27:11,279
and so i i hope i mean i hope so but

794
00:27:09,279 --> 00:27:12,480
i think at least given the way it's

795
00:27:11,279 --> 00:27:14,559
worked out

796
00:27:12,480 --> 00:27:16,240
in fact when i we started writing the

797
00:27:14,559 --> 00:27:19,440
the patches for this

798
00:27:16,240 --> 00:27:23,200
talk i thought it was going to be

799
00:27:19,440 --> 00:27:24,960
easier than it was so um

800
00:27:23,200 --> 00:27:26,640
yeah i hope so i haven't seen this

801
00:27:24,960 --> 00:27:27,919
particular pull request but ideally that

802
00:27:26,640 --> 00:27:29,520
would be awesome because i think that

803
00:27:27,919 --> 00:27:30,960
would mean much less work for us to try

804
00:27:29,520 --> 00:27:32,399
and land some of this upstream if you

805
00:27:30,960 --> 00:27:33,600
look we have some pretty brutal hacks

806
00:27:32,399 --> 00:27:36,559
and places

807
00:27:33,600 --> 00:27:36,559
in order to make this work

808
00:27:40,159 --> 00:27:44,480
a pro step that process the image exists

809
00:27:42,960 --> 00:27:46,720
but in our implementation

810
00:27:44,480 --> 00:27:48,000
not the upstream container d1 we just

811
00:27:46,720 --> 00:27:50,240
skip it because it's

812
00:27:48,000 --> 00:27:51,840
like we do a huge mount anyway so we

813
00:27:50,240 --> 00:27:52,480
don't need to process anything we just

814
00:27:51,840 --> 00:27:54,639
need to

815
00:27:52,480 --> 00:27:56,240
mount directly yeah so you're having

816
00:27:54,640 --> 00:27:56,799
you're doing the same thing that we are

817
00:27:56,240 --> 00:27:59,279
so

818
00:27:56,799 --> 00:28:00,639
do you did you do all this the stuff

819
00:27:59,279 --> 00:28:02,240
about diffing and all that do you have

820
00:28:00,640 --> 00:28:03,840
to implement all that stuff okay

821
00:28:02,240 --> 00:28:06,960
so then maybe yeah maybe yes this will

822
00:28:03,840 --> 00:28:06,959
actually help us um

823
00:28:07,279 --> 00:28:17,840
other questions one more over here

824
00:28:11,039 --> 00:28:17,840
oh yeah

825
00:28:18,320 --> 00:28:21,840
when you're doing all this stuff with um

826
00:28:20,399 --> 00:28:24,239
mounting several layers of

827
00:28:21,840 --> 00:28:26,158
squash fs am i right in thinking that um

828
00:28:24,240 --> 00:28:30,559
you can only do that if your

829
00:28:26,159 --> 00:28:33,760
container run time is itself privileged

830
00:28:30,559 --> 00:28:36,158
yes uh because nobody has chosen

831
00:28:33,760 --> 00:28:38,320
to fight the battle to whitelist squash

832
00:28:36,159 --> 00:28:39,360
fest um i believe overlay you can do

833
00:28:38,320 --> 00:28:42,879
unprivileged

834
00:28:39,360 --> 00:28:45,120
um so it's we're half done

835
00:28:42,880 --> 00:28:47,200
the other thing is squash isn't

836
00:28:45,120 --> 00:28:47,520
necessarily the best format for this you

837
00:28:47,200 --> 00:28:49,440
can

838
00:28:47,520 --> 00:28:51,918
i could imagine some other ones that

839
00:28:49,440 --> 00:28:53,520
would be even better in terms of

840
00:28:51,919 --> 00:28:55,200
for example one of the problems that i

841
00:28:53,520 --> 00:28:56,158
mentioned this design does not actually

842
00:28:55,200 --> 00:28:59,200
solve which is the

843
00:28:56,159 --> 00:29:00,799
the duplication problem so we just

844
00:28:59,200 --> 00:29:02,559
are using squashfest here as sort of a

845
00:29:00,799 --> 00:29:05,520
straw man to like

846
00:29:02,559 --> 00:29:07,039
play around with this idea um but if if

847
00:29:05,520 --> 00:29:08,399
somebody came by and said i'm going to

848
00:29:07,039 --> 00:29:10,480
write a kernel driver for this other

849
00:29:08,399 --> 00:29:14,719
format that's even way better

850
00:29:10,480 --> 00:29:16,240
i'd be happy to switch to that so um

851
00:29:14,720 --> 00:29:18,159
yes you're right that it needs to be

852
00:29:16,240 --> 00:29:20,480
privileged

853
00:29:18,159 --> 00:29:27,840
other questions uh what off time oh okay

854
00:29:20,480 --> 00:29:27,840
all right thank you

855
00:29:32,640 --> 00:29:34,720
you

