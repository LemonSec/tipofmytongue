1
00:00:05,040 --> 00:00:09,519
i'm going to talk about

2
00:00:07,359 --> 00:00:11,840
not talk about not talk about micro

3
00:00:09,519 --> 00:00:15,040
channel related stuff but

4
00:00:11,840 --> 00:00:17,279
i'm going to introduce the our project

5
00:00:15,040 --> 00:00:20,400
which was inspired we just started with

6
00:00:17,279 --> 00:00:22,480
the inspiration on the micro car itself

7
00:00:20,400 --> 00:00:23,680
so i'm hajime from japan and then i'm

8
00:00:22,480 --> 00:00:25,760
going to talk about

9
00:00:23,680 --> 00:00:27,680
i'm going to start with why we started

10
00:00:25,760 --> 00:00:30,960
this project

11
00:00:27,680 --> 00:00:33,519
so as you might know or you know

12
00:00:30,960 --> 00:00:34,800
you'll be familiar with this there are

13
00:00:33,520 --> 00:00:37,920
plenty of the projects

14
00:00:34,800 --> 00:00:41,040
that is trying to emulate

15
00:00:37,920 --> 00:00:43,440
or mimic the linux kernel behavior

16
00:00:41,040 --> 00:00:44,719
in the different shape of the software

17
00:00:43,440 --> 00:00:48,320
okay

18
00:00:44,719 --> 00:00:51,360
microsoft invented invented the draw

19
00:00:48,320 --> 00:00:53,039
drawbridge project which which is which

20
00:00:51,360 --> 00:00:53,920
was studied as a library operating

21
00:00:53,039 --> 00:00:57,120
system

22
00:00:53,920 --> 00:00:58,719
but this they are now forming as a

23
00:00:57,120 --> 00:01:00,559
another software which is called windows

24
00:00:58,719 --> 00:01:02,879
subsystem for linux

25
00:01:00,559 --> 00:01:05,039
which try to emulate linux binary

26
00:01:02,879 --> 00:01:07,200
executable

27
00:01:05,040 --> 00:01:09,040
on top of the windows operating system

28
00:01:07,200 --> 00:01:12,560
without any virtualization

29
00:01:09,040 --> 00:01:13,840
hypervisor technologies and google also

30
00:01:12,560 --> 00:01:15,759
trying to

31
00:01:13,840 --> 00:01:17,600
introduce another project which is

32
00:01:15,759 --> 00:01:20,159
called the digivisor

33
00:01:17,600 --> 00:01:22,000
and this is kind of a sandbox for the

34
00:01:20,159 --> 00:01:23,200
container environment which emulates the

35
00:01:22,000 --> 00:01:25,840
linux kernel

36
00:01:23,200 --> 00:01:28,000
feature in the user space in go

37
00:01:25,840 --> 00:01:30,000
languages

38
00:01:28,000 --> 00:01:31,040
and another academic project like

39
00:01:30,000 --> 00:01:34,079
graphene

40
00:01:31,040 --> 00:01:35,759
also offers similar facilities they

41
00:01:34,079 --> 00:01:38,639
provide the linux

42
00:01:35,759 --> 00:01:40,000
emulate linux compulsivity layer in the

43
00:01:38,640 --> 00:01:44,079
various operating system

44
00:01:40,000 --> 00:01:47,520
as the durability project has been doing

45
00:01:44,079 --> 00:01:49,039
so they are they are they they offer the

46
00:01:47,520 --> 00:01:51,119
linux binary compatibility

47
00:01:49,040 --> 00:01:52,320
in various operating system not only for

48
00:01:51,119 --> 00:01:55,840
the linux but

49
00:01:52,320 --> 00:01:56,960
also windows micro uh mac os and the bsd

50
00:01:55,840 --> 00:02:00,079
stuff and vst

51
00:01:56,960 --> 00:02:02,399
family as well as the

52
00:02:00,079 --> 00:02:05,758
different execution environments like

53
00:02:02,399 --> 00:02:08,160
intel xdx extension

54
00:02:05,759 --> 00:02:09,199
and the final project i mentioned here

55
00:02:08,160 --> 00:02:12,959
is noaa

56
00:02:09,199 --> 00:02:14,879
which is another another compulsibility

57
00:02:12,959 --> 00:02:17,840
data project

58
00:02:14,879 --> 00:02:19,679
running the running linux application on

59
00:02:17,840 --> 00:02:22,800
macros

60
00:02:19,680 --> 00:02:24,319
so those are very similar the internals

61
00:02:22,800 --> 00:02:28,800
of the implementation the design

62
00:02:24,319 --> 00:02:32,000
already looks like very similar

63
00:02:28,800 --> 00:02:32,319
but the compulsivity that can that they

64
00:02:32,000 --> 00:02:35,599
can

65
00:02:32,319 --> 00:02:37,760
achieve is always incomplete some of the

66
00:02:35,599 --> 00:02:40,959
system calls are missing always

67
00:02:37,760 --> 00:02:45,920
and as i and

68
00:02:40,959 --> 00:02:48,560
and the resulting and they result in the

69
00:02:45,920 --> 00:02:50,000
different direction in order to provide

70
00:02:48,560 --> 00:02:53,840
linux facilities for example

71
00:02:50,000 --> 00:02:57,120
the microsoft the microsoft of the

72
00:02:53,840 --> 00:02:58,879
windows subsystem for linux is now has a

73
00:02:57,120 --> 00:03:01,760
version number two

74
00:02:58,879 --> 00:03:03,840
which they try to shift the architecture

75
00:03:01,760 --> 00:03:04,959
from this library operating system based

76
00:03:03,840 --> 00:03:08,159
one into

77
00:03:04,959 --> 00:03:10,800
the hyperbase hypervisor-based one which

78
00:03:08,159 --> 00:03:11,760
i think they gave up to emulate this

79
00:03:10,800 --> 00:03:14,239
kind of linux

80
00:03:11,760 --> 00:03:15,920
and linux emulation in this user space

81
00:03:14,239 --> 00:03:19,200
implementation

82
00:03:15,920 --> 00:03:22,238
but our motivation in this project

83
00:03:19,200 --> 00:03:23,920
in our linux kernel library project is

84
00:03:22,239 --> 00:03:25,760
we don't want to delight the linux

85
00:03:23,920 --> 00:03:29,760
scanner twice

86
00:03:25,760 --> 00:03:32,399
or three times or forever

87
00:03:29,760 --> 00:03:34,159
because the linux linux scanner is

88
00:03:32,400 --> 00:03:37,120
written in c

89
00:03:34,159 --> 00:03:38,079
and your program or our program may also

90
00:03:37,120 --> 00:03:40,560
be written in c

91
00:03:38,080 --> 00:03:41,440
program even though you are using

92
00:03:40,560 --> 00:03:43,760
different program

93
00:03:41,440 --> 00:03:44,480
languages you can use the c you can call

94
00:03:43,760 --> 00:03:48,159
the c

95
00:03:44,480 --> 00:03:50,959
function from your language runtime

96
00:03:48,159 --> 00:03:53,120
so our motivation why not we use this

97
00:03:50,959 --> 00:03:55,599
linux kernel source code

98
00:03:53,120 --> 00:03:57,360
in a different shape as a reusable

99
00:03:55,599 --> 00:04:00,000
library

100
00:03:57,360 --> 00:04:00,640
so this modulation is quite similar to

101
00:04:00,000 --> 00:04:03,439
the guy

102
00:04:00,640 --> 00:04:04,159
that the guy from the net psd card which

103
00:04:03,439 --> 00:04:06,319
they

104
00:04:04,159 --> 00:04:08,480
which is which he introduced any kind of

105
00:04:06,319 --> 00:04:11,280
architecture in the monolith

106
00:04:08,480 --> 00:04:11,280
and kernel

107
00:04:12,640 --> 00:04:16,478
so this side shows the brief overview of

108
00:04:15,599 --> 00:04:20,000
the what

109
00:04:16,478 --> 00:04:23,199
the lk or linuxcon library looks like

110
00:04:20,000 --> 00:04:26,479
so our library our uh

111
00:04:23,199 --> 00:04:28,560
our code will be generating a library

112
00:04:26,479 --> 00:04:30,240
which can be shared or which can be

113
00:04:28,560 --> 00:04:33,840
linkable from the program

114
00:04:30,240 --> 00:04:35,759
external programs so the under the

115
00:04:33,840 --> 00:04:39,840
implementation of the healthcare

116
00:04:35,759 --> 00:04:42,880
is taking a similar approaches

117
00:04:39,840 --> 00:04:43,679
as the user model linux does which takes

118
00:04:42,880 --> 00:04:46,240
uh

119
00:04:43,680 --> 00:04:47,120
which creates the new architecture

120
00:04:46,240 --> 00:04:50,320
directory

121
00:04:47,120 --> 00:04:52,320
inside the linux kernel software but

122
00:04:50,320 --> 00:04:54,639
this architecture is totally hardware

123
00:04:52,320 --> 00:04:56,320
independent we are trying to outsource

124
00:04:54,639 --> 00:04:57,680
all the hardware dependent code inside

125
00:04:56,320 --> 00:04:59,840
the active circuit

126
00:04:57,680 --> 00:05:01,680
into the different one which are

127
00:04:59,840 --> 00:05:04,799
described in this

128
00:05:01,680 --> 00:05:07,919
the bottom one bottom part of

129
00:05:04,800 --> 00:05:10,240
this architecture and by

130
00:05:07,919 --> 00:05:12,000
by taking this design the linux kernel's

131
00:05:10,240 --> 00:05:14,960
code can be

132
00:05:12,000 --> 00:05:17,199
executable in the various environments

133
00:05:14,960 --> 00:05:20,159
so far we have experience with running

134
00:05:17,199 --> 00:05:20,960
this linux kernel code on the linux user

135
00:05:20,160 --> 00:05:23,600
space

136
00:05:20,960 --> 00:05:24,719
without any kind of interaction and we

137
00:05:23,600 --> 00:05:27,440
can also dis

138
00:05:24,720 --> 00:05:28,880
library on windows operating system

139
00:05:27,440 --> 00:05:32,000
freebsd

140
00:05:28,880 --> 00:05:34,800
and android user space application and

141
00:05:32,000 --> 00:05:35,199
some of some of them were playing with

142
00:05:34,800 --> 00:05:39,520
the

143
00:05:35,199 --> 00:05:41,120
disc this code in the uefa booth road

144
00:05:39,520 --> 00:05:43,919
and some of them are also playing with

145
00:05:41,120 --> 00:05:47,759
the using this part this portion

146
00:05:43,919 --> 00:05:47,758
is a unicorn as a unicorn

147
00:05:49,680 --> 00:05:56,080
so if you look at this this program

148
00:05:53,360 --> 00:05:57,440
this this program as a user space

149
00:05:56,080 --> 00:06:01,039
network stack because

150
00:05:57,440 --> 00:06:02,639
you can use this library which contains

151
00:06:01,039 --> 00:06:03,440
the tcp implementation inside the

152
00:06:02,639 --> 00:06:06,560
library

153
00:06:03,440 --> 00:06:07,360
and your socket program can call this

154
00:06:06,560 --> 00:06:10,400
library

155
00:06:07,360 --> 00:06:11,600
without interacting with the kernel so

156
00:06:10,400 --> 00:06:14,159
there are plenty of the

157
00:06:11,600 --> 00:06:14,720
user space network projects which i

158
00:06:14,160 --> 00:06:18,840
listed

159
00:06:14,720 --> 00:06:22,000
in part of the all of the project

160
00:06:18,840 --> 00:06:22,960
so most of them are trying to achieve

161
00:06:22,000 --> 00:06:25,520
the higher

162
00:06:22,960 --> 00:06:26,719
high speed performance is the user space

163
00:06:25,520 --> 00:06:30,400
execution because

164
00:06:26,720 --> 00:06:31,199
they can eliminate the context context

165
00:06:30,400 --> 00:06:34,318
switch

166
00:06:31,199 --> 00:06:38,000
and overhead between this user and the

167
00:06:34,319 --> 00:06:38,000
user and the kernel mode interaction

168
00:06:38,080 --> 00:06:42,560
but they they usually suffer from the

169
00:06:41,199 --> 00:06:44,880
application

170
00:06:42,560 --> 00:06:47,680
interfaces because they use their own

171
00:06:44,880 --> 00:06:49,599
interface for the application

172
00:06:47,680 --> 00:06:51,440
some of them provide the products layer

173
00:06:49,599 --> 00:06:52,880
compatibility for this kind of user

174
00:06:51,440 --> 00:06:55,440
space network stuff

175
00:06:52,880 --> 00:06:56,880
but it's not always complete it's not

176
00:06:55,440 --> 00:07:01,120
always complete like

177
00:06:56,880 --> 00:07:04,479
some of them lacks the import support

178
00:07:01,120 --> 00:07:08,080
for the library but our goal

179
00:07:04,479 --> 00:07:08,960
should be identical to the what linux

180
00:07:08,080 --> 00:07:12,400
can do

181
00:07:08,960 --> 00:07:16,799
so both two should be the same

182
00:07:12,400 --> 00:07:19,599
in our in our modulation

183
00:07:16,800 --> 00:07:21,199
so the internal of the architecture is

184
00:07:19,599 --> 00:07:24,000
as i mentioned

185
00:07:21,199 --> 00:07:26,000
we are trying to create the new newly

186
00:07:24,000 --> 00:07:27,199
introduced architecture inside the linux

187
00:07:26,000 --> 00:07:30,240
kernel 3

188
00:07:27,199 --> 00:07:32,240
by eliminating hardware or underlying

189
00:07:30,240 --> 00:07:37,039
laser dependency

190
00:07:32,240 --> 00:07:37,039
inside this architecture and

191
00:07:37,759 --> 00:07:44,080
the outsourced portion of this

192
00:07:41,520 --> 00:07:45,599
architecture like accessing the hardware

193
00:07:44,080 --> 00:07:49,680
resources like a clock

194
00:07:45,599 --> 00:07:51,680
memory or process scheduling

195
00:07:49,680 --> 00:07:53,039
the this kind of detailed information

196
00:07:51,680 --> 00:07:56,240
should be contained in

197
00:07:53,039 --> 00:07:59,280
inside this host environment which can

198
00:07:56,240 --> 00:08:00,639
solve all the underlying layer

199
00:07:59,280 --> 00:08:03,599
dependency inside this

200
00:08:00,639 --> 00:08:05,199
hosting environment so this part should

201
00:08:03,599 --> 00:08:08,560
be very portable

202
00:08:05,199 --> 00:08:08,560
inside the linux kernel source

203
00:08:08,879 --> 00:08:12,240
and another go another goal of this

204
00:08:11,039 --> 00:08:14,960
project is

205
00:08:12,240 --> 00:08:16,960
we don't want to try to modify this

206
00:08:14,960 --> 00:08:20,159
these grey parts

207
00:08:16,960 --> 00:08:23,198
not only the kernel part but also

208
00:08:20,160 --> 00:08:25,120
the application code should be usable as

209
00:08:23,199 --> 00:08:28,639
is

210
00:08:25,120 --> 00:08:29,759
so because we decided to provide the api

211
00:08:28,639 --> 00:08:33,360
to the application but

212
00:08:29,759 --> 00:08:33,839
this law format of api is not compatible

213
00:08:33,360 --> 00:08:41,839
to

214
00:08:33,839 --> 00:08:41,839
a standard library implementation

215
00:08:41,919 --> 00:08:48,959
so the first part of the host background

216
00:08:45,680 --> 00:08:51,199
is located at under the newly introduced

217
00:08:48,959 --> 00:08:54,079
architecture

218
00:08:51,200 --> 00:08:56,560
which try to unify the interface between

219
00:08:54,080 --> 00:08:59,839
across the different environment

220
00:08:56,560 --> 00:09:00,800
so host environment has a different

221
00:08:59,839 --> 00:09:03,680
implementation like

222
00:09:00,800 --> 00:09:04,560
we currently have a project's interface

223
00:09:03,680 --> 00:09:06,959
and the

224
00:09:04,560 --> 00:09:09,279
windows windows operating system

225
00:09:06,959 --> 00:09:11,439
interface as well as the the bridge

226
00:09:09,279 --> 00:09:14,080
implementation of the ramp hyper core

227
00:09:11,440 --> 00:09:14,959
which can be expand the under and the

228
00:09:14,080 --> 00:09:18,320
support

229
00:09:14,959 --> 00:09:18,319
disk of the underlying layer

230
00:09:19,200 --> 00:09:26,160
and in order to communicate this library

231
00:09:23,120 --> 00:09:29,040
in with this external component

232
00:09:26,160 --> 00:09:29,600
we provided the and the virtual device

233
00:09:29,040 --> 00:09:31,599
layer

234
00:09:29,600 --> 00:09:33,519
much device implementation inside of

235
00:09:31,600 --> 00:09:36,880
this host environment

236
00:09:33,519 --> 00:09:37,200
and it exposes as a bato io interface so

237
00:09:36,880 --> 00:09:39,920
that

238
00:09:37,200 --> 00:09:43,120
the linux kernel code can use the driver

239
00:09:39,920 --> 00:09:45,439
driver implementation of the bank io

240
00:09:43,120 --> 00:09:46,480
so we have implemented block devices

241
00:09:45,440 --> 00:09:49,279
implementations

242
00:09:46,480 --> 00:09:50,959
as well as the network interface

243
00:09:49,279 --> 00:09:52,959
implementation

244
00:09:50,959 --> 00:09:54,319
and we also have experimentally

245
00:09:52,959 --> 00:09:57,599
implemented

246
00:09:54,320 --> 00:09:58,640
the battle io bat file system

247
00:09:57,600 --> 00:10:00,880
implementation

248
00:09:58,640 --> 00:10:02,079
which can be exposed as an ip file

249
00:10:00,880 --> 00:10:06,240
system

250
00:10:02,079 --> 00:10:06,239
to the to the driver area

251
00:10:09,279 --> 00:10:12,880
so this can be almost explained in the

252
00:10:11,760 --> 00:10:16,640
previous uh

253
00:10:12,880 --> 00:10:18,079
slide but so second component is a

254
00:10:16,640 --> 00:10:20,040
cpu independent architecture

255
00:10:18,079 --> 00:10:24,319
implementation inside the

256
00:10:20,040 --> 00:10:26,000
linuxcanner3 and the third component is

257
00:10:24,320 --> 00:10:28,880
application interface which is

258
00:10:26,000 --> 00:10:30,560
located on on top of the the kernel

259
00:10:28,880 --> 00:10:33,920
implementation

260
00:10:30,560 --> 00:10:36,079
so with lk air it exports the

261
00:10:33,920 --> 00:10:38,719
our own system called api which is

262
00:10:36,079 --> 00:10:40,719
called lcal system cores

263
00:10:38,720 --> 00:10:41,920
but this system core is not compatible

264
00:10:40,720 --> 00:10:45,360
as i mentioned before

265
00:10:41,920 --> 00:10:48,560
so we provided the various way to

266
00:10:45,360 --> 00:10:51,120
access this interface by from the

267
00:10:48,560 --> 00:10:51,119
application

268
00:10:52,160 --> 00:10:56,480
so so the first api is the algae system

269
00:10:54,959 --> 00:10:58,560
called raw api

270
00:10:56,480 --> 00:11:00,480
so if you have application and if you

271
00:10:58,560 --> 00:11:03,040
want to use lkl

272
00:11:00,480 --> 00:11:04,320
you have to use you have to rewrite the

273
00:11:03,040 --> 00:11:07,760
system called part of the

274
00:11:04,320 --> 00:11:11,120
application by uh replacing the symbols

275
00:11:07,760 --> 00:11:14,800
like from the socket to the lks

276
00:11:11,120 --> 00:11:17,839
prefix one prefixed one

277
00:11:14,800 --> 00:11:20,719
so this api is kind of is slightly

278
00:11:17,839 --> 00:11:24,079
different from the typical standard

279
00:11:20,720 --> 00:11:24,800
projects api because this is the entry

280
00:11:24,079 --> 00:11:27,439
point

281
00:11:24,800 --> 00:11:29,279
of the current linux kernel so the error

282
00:11:27,440 --> 00:11:31,760
number

283
00:11:29,279 --> 00:11:33,279
error number and the return values are

284
00:11:31,760 --> 00:11:35,760
slightly different from the project's

285
00:11:33,279 --> 00:11:35,760
api

286
00:11:36,240 --> 00:11:39,360
so another interface that we provided

287
00:11:38,240 --> 00:11:42,320
right now is the

288
00:11:39,360 --> 00:11:44,720
which called so-called hijack library

289
00:11:42,320 --> 00:11:47,680
which is basically based on the

290
00:11:44,720 --> 00:11:49,360
dynamic translation on the runtime by

291
00:11:47,680 --> 00:11:52,239
led preload

292
00:11:49,360 --> 00:11:53,760
so if you have a socket if you have a

293
00:11:52,240 --> 00:11:56,160
project api

294
00:11:53,760 --> 00:11:57,680
application and you don't want to

295
00:11:56,160 --> 00:11:59,040
redirect the application you don't why

296
00:11:57,680 --> 00:12:01,199
you don't want to rebuild

297
00:11:59,040 --> 00:12:02,319
your application your binary can be

298
00:12:01,200 --> 00:12:05,440
translated with this

299
00:12:02,320 --> 00:12:08,480
additional library but

300
00:12:05,440 --> 00:12:11,600
it has a limitation that some of the

301
00:12:08,480 --> 00:12:15,040
standard library library implementation

302
00:12:11,600 --> 00:12:17,600
makes some of the symbols invisible

303
00:12:15,040 --> 00:12:18,880
from the application side so you cannot

304
00:12:17,600 --> 00:12:21,680
read such a symbol

305
00:12:18,880 --> 00:12:24,560
so in that case your application may not

306
00:12:21,680 --> 00:12:27,359
work well

307
00:12:24,560 --> 00:12:28,560
so another api is our own standalone

308
00:12:27,360 --> 00:12:31,120
implementation

309
00:12:28,560 --> 00:12:32,319
we right now we we use the master

310
00:12:31,120 --> 00:12:36,079
library

311
00:12:32,320 --> 00:12:39,360
as a standard library implementation

312
00:12:36,079 --> 00:12:43,439
and we bought it this muscle liberty

313
00:12:39,360 --> 00:12:46,160
as to be able to use the lka from their

314
00:12:43,440 --> 00:12:49,360
user space codes

315
00:12:46,160 --> 00:12:51,519
so i'm gonna show i'm gonna uh share you

316
00:12:49,360 --> 00:12:52,399
some of the use cases that we use with

317
00:12:51,519 --> 00:12:55,600
this

318
00:12:52,399 --> 00:12:56,639
linux kernel library because this is

319
00:12:55,600 --> 00:12:59,839
library

320
00:12:56,639 --> 00:13:00,959
if nobody use this library this software

321
00:12:59,839 --> 00:13:04,320
is useless

322
00:13:00,959 --> 00:13:07,359
so i'm going to present our

323
00:13:04,320 --> 00:13:10,079
known use cases but if you have

324
00:13:07,360 --> 00:13:12,399
i wish to have you i wish you to have

325
00:13:10,079 --> 00:13:15,279
more expanded use cases if you have

326
00:13:12,399 --> 00:13:15,279
a nice idea

327
00:13:16,240 --> 00:13:24,320
so the first typical use case is to

328
00:13:19,360 --> 00:13:28,480
mount a disk image without privileges

329
00:13:24,320 --> 00:13:28,480
so some of the operating system

330
00:13:28,880 --> 00:13:32,160
has a experimental implementation of the

331
00:13:31,440 --> 00:13:35,680
file system

332
00:13:32,160 --> 00:13:37,279
in user space like if you have a ext4

333
00:13:35,680 --> 00:13:38,239
file system image for the virtual

334
00:13:37,279 --> 00:13:40,639
machine

335
00:13:38,240 --> 00:13:42,639
and if you want to modify these images

336
00:13:40,639 --> 00:13:46,000
on the foreign operating system like a

337
00:13:42,639 --> 00:13:48,240
windows windows operating system you

338
00:13:46,000 --> 00:13:50,720
may have to use such alternative

339
00:13:48,240 --> 00:13:51,360
implementation of the ext4 which may not

340
00:13:50,720 --> 00:13:52,959
complete

341
00:13:51,360 --> 00:13:56,639
implement which may not cover the

342
00:13:52,959 --> 00:13:59,760
complete specification the ext4

343
00:13:56,639 --> 00:14:02,480
or you have to use the battery machine

344
00:13:59,760 --> 00:14:03,920
and boot the linux service and the mount

345
00:14:02,480 --> 00:14:06,880
disk image and

346
00:14:03,920 --> 00:14:08,719
rewrite or modify the contents of the

347
00:14:06,880 --> 00:14:10,800
disk images

348
00:14:08,720 --> 00:14:12,480
but you don't have to do such a

349
00:14:10,800 --> 00:14:15,120
complicated stuff

350
00:14:12,480 --> 00:14:16,560
you can just use this library as a

351
00:14:15,120 --> 00:14:19,440
windows application

352
00:14:16,560 --> 00:14:21,199
and modify it inside the your user space

353
00:14:19,440 --> 00:14:23,600
program

354
00:14:21,199 --> 00:14:25,680
so you can you can modify the data

355
00:14:23,600 --> 00:14:28,720
effects and contents of the

356
00:14:25,680 --> 00:14:31,839
file system images in the different

357
00:14:28,720 --> 00:14:31,839
operating system

358
00:14:32,079 --> 00:14:36,638
so another use cases is trying to

359
00:14:34,240 --> 00:14:39,600
introduce the kernel feature

360
00:14:36,639 --> 00:14:43,279
in the very restricted environment you

361
00:14:39,600 --> 00:14:45,519
which you don't have a freedom to

362
00:14:43,279 --> 00:14:47,439
decompose the kind of spacing

363
00:14:45,519 --> 00:14:48,880
implementation

364
00:14:47,440 --> 00:14:51,519
so this is an example of the

365
00:14:48,880 --> 00:14:54,399
introduction of the masterclass tcp

366
00:14:51,519 --> 00:14:55,600
implementation of the on the android

367
00:14:54,399 --> 00:14:58,480
phone

368
00:14:55,600 --> 00:14:59,279
by the way the mptcp is already upstream

369
00:14:58,480 --> 00:15:01,680
in the

370
00:14:59,279 --> 00:15:02,320
previous previous week and we don't have

371
00:15:01,680 --> 00:15:05,120
to do such

372
00:15:02,320 --> 00:15:06,720
a stuff right now but this is a snapshot

373
00:15:05,120 --> 00:15:08,079
of the two years ago i guess

374
00:15:06,720 --> 00:15:10,720
and at that time we don't have much

375
00:15:08,079 --> 00:15:12,399
specificity support but you can we can

376
00:15:10,720 --> 00:15:14,320
do it because we have a user space

377
00:15:12,399 --> 00:15:17,360
implementation of the linuxcan

378
00:15:14,320 --> 00:15:17,360
on the android phone

379
00:15:18,720 --> 00:15:22,880
so another toy implementation is the

380
00:15:21,920 --> 00:15:26,000
unix pipe

381
00:15:22,880 --> 00:15:26,560
as a network interface card so you if

382
00:15:26,000 --> 00:15:29,440
you have

383
00:15:26,560 --> 00:15:30,319
three different or two different

384
00:15:29,440 --> 00:15:34,240
programs

385
00:15:30,320 --> 00:15:37,279
using lkl and each of the program has a

386
00:15:34,240 --> 00:15:40,639
network stock implementation and

387
00:15:37,279 --> 00:15:42,240
if you write the packets generated by

388
00:15:40,639 --> 00:15:45,600
the scanner

389
00:15:42,240 --> 00:15:48,160
into the console and

390
00:15:45,600 --> 00:15:49,279
then if the next program received this

391
00:15:48,160 --> 00:15:52,240
packet

392
00:15:49,279 --> 00:15:55,040
by a pipe as the received channel of the

393
00:15:52,240 --> 00:15:55,040
net of interest is

394
00:15:55,839 --> 00:15:59,360
you can do something i don't know so if

395
00:15:58,800 --> 00:16:02,800
you can

396
00:15:59,360 --> 00:16:05,040
if you want to make access control by

397
00:16:02,800 --> 00:16:05,040
this

398
00:16:05,199 --> 00:16:10,319
pipe pipe communication you may use

399
00:16:08,240 --> 00:16:11,600
you can use the grip command in order to

400
00:16:10,320 --> 00:16:15,600
filter

401
00:16:11,600 --> 00:16:18,560
the specific payload of the packet

402
00:16:15,600 --> 00:16:20,720
with the grip command argument and if

403
00:16:18,560 --> 00:16:22,880
you want to duplicate

404
00:16:20,720 --> 00:16:25,600
the generated bucket into the some

405
00:16:22,880 --> 00:16:28,639
external program like a tcp dump

406
00:16:25,600 --> 00:16:29,759
you can do you can you do with the key

407
00:16:28,639 --> 00:16:31,920
command

408
00:16:29,759 --> 00:16:34,800
by mirroring the packet into the

409
00:16:31,920 --> 00:16:34,800
different processes

410
00:16:34,880 --> 00:16:40,720
that's almost it and

411
00:16:38,160 --> 00:16:42,399
another example is trying to convert the

412
00:16:40,720 --> 00:16:45,680
linux kernel code into the

413
00:16:42,399 --> 00:16:46,399
javascript program uh since last year i

414
00:16:45,680 --> 00:16:49,359
guess

415
00:16:46,399 --> 00:16:52,480
linux khan can be built with earlier vm

416
00:16:49,360 --> 00:16:56,320
and awm can generate the javascript code

417
00:16:52,480 --> 00:16:58,240
with additional trick you can then linux

418
00:16:56,320 --> 00:17:01,279
scan record without any

419
00:16:58,240 --> 00:17:04,480
emulation like js linux does

420
00:17:01,279 --> 00:17:08,000
but you can directly invoked linuxcan

421
00:17:04,480 --> 00:17:10,480
code in the browser

422
00:17:08,000 --> 00:17:11,520
so this is the initialization task of

423
00:17:10,480 --> 00:17:14,000
the linux scanner

424
00:17:11,520 --> 00:17:15,918
in the c code this code will be

425
00:17:14,000 --> 00:17:19,119
translated

426
00:17:15,919 --> 00:17:21,439
as like this which is

427
00:17:19,119 --> 00:17:22,639
with the this is automatically generally

428
00:17:21,439 --> 00:17:27,760
generated by the

429
00:17:22,640 --> 00:17:32,799
end screams console and you can run

430
00:17:27,760 --> 00:17:35,280
the linux kind of code on the browser

431
00:17:32,799 --> 00:17:35,840
so another use case is the running the

432
00:17:35,280 --> 00:17:38,080
linux

433
00:17:35,840 --> 00:17:39,199
binary code on the different operating

434
00:17:38,080 --> 00:17:41,760
system

435
00:17:39,200 --> 00:17:43,120
so this demo is actually learning on the

436
00:17:41,760 --> 00:17:45,520
mac os

437
00:17:43,120 --> 00:17:46,719
with the energy implementation which

438
00:17:45,520 --> 00:17:48,960
providing this

439
00:17:46,720 --> 00:17:50,160
contents of the slides so we have

440
00:17:48,960 --> 00:17:53,280
implemented

441
00:17:50,160 --> 00:17:55,840
the oci runtime implementation

442
00:17:53,280 --> 00:17:57,760
which coordinates the invocation of the

443
00:17:55,840 --> 00:18:00,240
linux kernel library

444
00:17:57,760 --> 00:18:01,200
and try to communicate or interact with

445
00:18:00,240 --> 00:18:04,240
the

446
00:18:01,200 --> 00:18:07,280
container engine so we only we currently

447
00:18:04,240 --> 00:18:09,760
only tested with the container the

448
00:18:07,280 --> 00:18:10,720
implementation as well as our own

449
00:18:09,760 --> 00:18:13,760
crafted

450
00:18:10,720 --> 00:18:14,640
docker implementation which is running

451
00:18:13,760 --> 00:18:18,080
on the darwin

452
00:18:14,640 --> 00:18:18,080
without any virtualization

453
00:18:20,080 --> 00:18:27,760
so so this is the

454
00:18:24,480 --> 00:18:32,960
this is running docker demo and this

455
00:18:27,760 --> 00:18:32,960
is not connected connected to

456
00:18:34,640 --> 00:18:40,640
oops not connected to

457
00:18:38,559 --> 00:18:42,399
the linux host but running inside of

458
00:18:40,640 --> 00:18:46,720
this macbook

459
00:18:42,400 --> 00:18:46,720
natively and

460
00:18:46,880 --> 00:18:50,160
you can run the docker run command with

461
00:18:49,039 --> 00:18:53,360
our

462
00:18:50,160 --> 00:18:56,720
own crafted images

463
00:18:53,360 --> 00:19:00,159
with endings command

464
00:18:56,720 --> 00:19:03,840
and it is running the linux boots

465
00:19:00,160 --> 00:19:06,960
kernel log with main code of the

466
00:19:03,840 --> 00:19:08,559
engine's implementation we are extending

467
00:19:06,960 --> 00:19:11,840
the additional configuration but

468
00:19:08,559 --> 00:19:11,840
it's not

469
00:19:14,320 --> 00:19:28,639
how do i show

470
00:19:25,679 --> 00:19:29,120
i think it's i so there's also some

471
00:19:28,640 --> 00:19:32,320
folks

472
00:19:29,120 --> 00:19:34,719
who is also using lcl in order to

473
00:19:32,320 --> 00:19:35,760
test file system implementation with

474
00:19:34,720 --> 00:19:39,200
their own

475
00:19:35,760 --> 00:19:40,640
implemented puzzle i have not involved

476
00:19:39,200 --> 00:19:42,160
this project so you can if you are

477
00:19:40,640 --> 00:19:44,799
interested in you can

478
00:19:42,160 --> 00:19:46,720
try to look at the paper which is listed

479
00:19:44,799 --> 00:19:48,799
in the threads

480
00:19:46,720 --> 00:19:50,880
so there is another implementation using

481
00:19:48,799 --> 00:19:53,840
an approximation

482
00:19:50,880 --> 00:19:55,600
but i'm going i'm running out of time so

483
00:19:53,840 --> 00:19:59,120
i skip this one

484
00:19:55,600 --> 00:20:01,199
so we also try to expand the

485
00:19:59,120 --> 00:20:03,918
underlying layer facility in order to

486
00:20:01,200 --> 00:20:07,120
integrate other implementation like a 05

487
00:20:03,919 --> 00:20:09,280
implementation we have also started the

488
00:20:07,120 --> 00:20:10,959
upstreaming this code into the linux

489
00:20:09,280 --> 00:20:13,760
mainline

490
00:20:10,960 --> 00:20:15,280
so we we actually tried to upstream

491
00:20:13,760 --> 00:20:17,120
several times in the past

492
00:20:15,280 --> 00:20:18,480
but now we have suggestions from the

493
00:20:17,120 --> 00:20:21,600
maintainer which

494
00:20:18,480 --> 00:20:22,960
we should work with work together with

495
00:20:21,600 --> 00:20:24,879
the user mode linux

496
00:20:22,960 --> 00:20:26,720
so we are trying to integrate this code

497
00:20:24,880 --> 00:20:29,120
into the user mode

498
00:20:26,720 --> 00:20:31,360
linux implementation as a defined

499
00:20:29,120 --> 00:20:34,399
execution mode

500
00:20:31,360 --> 00:20:37,918
is the library

501
00:20:34,400 --> 00:20:38,640
so that's almost it so if you have a

502
00:20:37,919 --> 00:20:41,679
program

503
00:20:38,640 --> 00:20:43,200
and you if you can link this library as

504
00:20:41,679 --> 00:20:47,120
a

505
00:20:43,200 --> 00:20:49,200
link flag you may i wish you will have

506
00:20:47,120 --> 00:20:50,399
another benefit that you cannot see in

507
00:20:49,200 --> 00:20:52,159
the past

508
00:20:50,400 --> 00:20:54,620
thanks so much thanks so much for your

509
00:20:52,159 --> 00:20:58,230
attention and i'm happy to take a

510
00:20:54,620 --> 00:20:58,229
[Applause]

511
00:21:00,840 --> 00:21:03,840
question

512
00:21:14,880 --> 00:21:17,840
yes

513
00:21:24,880 --> 00:21:28,720
i didn't bring the performance results

514
00:21:26,880 --> 00:21:30,240
today but

515
00:21:28,720 --> 00:21:32,000
the characteristics of the performance

516
00:21:30,240 --> 00:21:32,640
is almost similar to the user space

517
00:21:32,000 --> 00:21:34,960
network

518
00:21:32,640 --> 00:21:36,000
which can which we can eliminate user

519
00:21:34,960 --> 00:21:38,720
space kernel

520
00:21:36,000 --> 00:21:40,240
interaction so we will have a benefit of

521
00:21:38,720 --> 00:21:45,840
the user space execution like

522
00:21:40,240 --> 00:21:45,840
what dpdk can guys can do

523
00:21:51,860 --> 00:21:57,719
[Applause]

524
00:22:00,559 --> 00:22:02,639
you

