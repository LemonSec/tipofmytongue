1
00:00:05,120 --> 00:00:07,200
all right

2
00:00:05,680 --> 00:00:08,959
hi everyone thank you for your interest

3
00:00:07,200 --> 00:00:11,360
in my talk uh

4
00:00:08,960 --> 00:00:12,480
i'm lassa i'm a student at avita

5
00:00:11,360 --> 00:00:14,000
university

6
00:00:12,480 --> 00:00:16,000
and i'm going to tell you something

7
00:00:14,000 --> 00:00:17,600
about a project that i did during the

8
00:00:16,000 --> 00:00:18,800
course of a lab course at that

9
00:00:17,600 --> 00:00:22,480
university

10
00:00:18,800 --> 00:00:25,359
so i am mainly a software developer

11
00:00:22,480 --> 00:00:27,199
and an electronics hobbyist which means

12
00:00:25,359 --> 00:00:27,760
that i've only tinkered with arduino

13
00:00:27,199 --> 00:00:29,599
compatible

14
00:00:27,760 --> 00:00:31,359
microcontrollers and i haven't been

15
00:00:29,599 --> 00:00:33,520
really into hardware design

16
00:00:31,359 --> 00:00:35,200
all that much but a little over a year a

17
00:00:33,520 --> 00:00:37,280
year ago

18
00:00:35,200 --> 00:00:39,200
i wanted to create my own pcb just a

19
00:00:37,280 --> 00:00:41,280
simple microcontroller with some sensors

20
00:00:39,200 --> 00:00:43,840
and i wanted it to be battery operated

21
00:00:41,280 --> 00:00:45,280
so i thought okay creating vcbs is not

22
00:00:43,840 --> 00:00:47,120
that hard right it's just like four

23
00:00:45,280 --> 00:00:48,960
steps you have to choose the components

24
00:00:47,120 --> 00:00:51,360
that you want to put on your pcb

25
00:00:48,960 --> 00:00:52,480
use some eda tool to create schematics

26
00:00:51,360 --> 00:00:57,039
design layout

27
00:00:52,480 --> 00:00:59,038
upload the files to a manufacturer and

28
00:00:57,039 --> 00:01:01,039
wait for the mail to arrive all right so

29
00:00:59,039 --> 00:01:03,359
i started with the first step

30
00:01:01,039 --> 00:01:04,720
and i went to choose my components so as

31
00:01:03,359 --> 00:01:06,880
i said i had no idea

32
00:01:04,720 --> 00:01:08,640
on how to do that so i went to reddit

33
00:01:06,880 --> 00:01:10,960
and i asked what components should i use

34
00:01:08,640 --> 00:01:12,880
to control my battery circuit

35
00:01:10,960 --> 00:01:14,720
and i got a couple of suggestions so i

36
00:01:12,880 --> 00:01:15,360
went uh off to the internet and i

37
00:01:14,720 --> 00:01:16,960
searched for

38
00:01:15,360 --> 00:01:19,280
different data sheets i read through

39
00:01:16,960 --> 00:01:21,360
them i understood half of them

40
00:01:19,280 --> 00:01:22,960
and finally i had decided for a chip

41
00:01:21,360 --> 00:01:25,680
that i wanted to use

42
00:01:22,960 --> 00:01:26,320
and then i i realized that i had no idea

43
00:01:25,680 --> 00:01:27,920
on

44
00:01:26,320 --> 00:01:31,360
how to actually implement it on the

45
00:01:27,920 --> 00:01:33,520
board so i went off to github

46
00:01:31,360 --> 00:01:35,280
and i tried to find other people's

47
00:01:33,520 --> 00:01:35,920
projects that incorporated the same

48
00:01:35,280 --> 00:01:37,600
chips

49
00:01:35,920 --> 00:01:39,119
and as it turns out it was quite

50
00:01:37,600 --> 00:01:39,600
difficult because the chip i was looking

51
00:01:39,119 --> 00:01:41,840
for

52
00:01:39,600 --> 00:01:43,360
wasn't mainly wasn't the main component

53
00:01:41,840 --> 00:01:44,799
on the pcb so it wasn't mentioned

54
00:01:43,360 --> 00:01:46,399
anywhere in the description or in the

55
00:01:44,799 --> 00:01:48,399
readme

56
00:01:46,399 --> 00:01:50,479
and i had to actually search through the

57
00:01:48,399 --> 00:01:52,000
files which isn't that simple on github

58
00:01:50,479 --> 00:01:52,798
and by the time i had found the first

59
00:01:52,000 --> 00:01:54,479
project

60
00:01:52,799 --> 00:01:56,159
it was 1am and i had to go to bed

61
00:01:54,479 --> 00:01:57,840
because i had university the next

62
00:01:56,159 --> 00:01:59,680
day and then i kind of forgot about the

63
00:01:57,840 --> 00:02:02,320
whole project all right

64
00:01:59,680 --> 00:02:04,159
so this semester i had the opportunity

65
00:02:02,320 --> 00:02:05,600
to work on an electronic component

66
00:02:04,159 --> 00:02:07,920
search engine that basically

67
00:02:05,600 --> 00:02:09,280
allows you to enter the name of an

68
00:02:07,920 --> 00:02:10,878
electronic component that you want to

69
00:02:09,280 --> 00:02:13,360
incorporate into your pcb

70
00:02:10,878 --> 00:02:15,679
and then it will it will return

71
00:02:13,360 --> 00:02:17,520
repositories on github that contain that

72
00:02:15,680 --> 00:02:18,560
have projects that include those

73
00:02:17,520 --> 00:02:20,160
components

74
00:02:18,560 --> 00:02:22,480
all right so let's just have a look at

75
00:02:20,160 --> 00:02:23,920
the result this is what it looks like

76
00:02:22,480 --> 00:02:25,840
when you search for a component

77
00:02:23,920 --> 00:02:27,440
on the top you just enter the component

78
00:02:25,840 --> 00:02:30,000
name and as you can see we found about

79
00:02:27,440 --> 00:02:32,959
100 repositories including the component

80
00:02:30,000 --> 00:02:34,879
this is one of them on the top we

81
00:02:32,959 --> 00:02:35,680
mentioned the repository name and the

82
00:02:34,879 --> 00:02:38,000
description

83
00:02:35,680 --> 00:02:39,120
if we can if the project has a license

84
00:02:38,000 --> 00:02:42,080
the license is shown

85
00:02:39,120 --> 00:02:43,760
right there on the top right you have

86
00:02:42,080 --> 00:02:46,640
these stars and forks to give you some

87
00:02:43,760 --> 00:02:50,160
kind of an idea whether the project is

88
00:02:46,640 --> 00:02:53,040
liked and therefore possibly useful

89
00:02:50,160 --> 00:02:55,359
and on the bottom we show the relevant

90
00:02:53,040 --> 00:02:56,239
files which exact component was found in

91
00:02:55,360 --> 00:02:58,080
the file

92
00:02:56,239 --> 00:02:59,360
and we give you a quick link to the data

93
00:02:58,080 --> 00:03:01,360
sheet if we find one

94
00:02:59,360 --> 00:03:03,680
and if you want to you can directly go

95
00:03:01,360 --> 00:03:04,239
to a distributor and buy the part or

96
00:03:03,680 --> 00:03:07,760
even

97
00:03:04,239 --> 00:03:08,319
manufacturer projects pcb all right so

98
00:03:07,760 --> 00:03:10,399
let's

99
00:03:08,319 --> 00:03:12,079
get into the technical details a little

100
00:03:10,400 --> 00:03:15,200
bit we

101
00:03:12,080 --> 00:03:16,879
tried to keep the software modular we

102
00:03:15,200 --> 00:03:18,000
split it into four components we have a

103
00:03:16,879 --> 00:03:22,159
crawler that crawls

104
00:03:18,000 --> 00:03:24,080
github for pcb design files

105
00:03:22,159 --> 00:03:25,840
then we have a parser that actually

106
00:03:24,080 --> 00:03:29,040
parses those files and checks for

107
00:03:25,840 --> 00:03:31,200
the components that are included the

108
00:03:29,040 --> 00:03:32,798
component names are then validated i'll

109
00:03:31,200 --> 00:03:34,560
tell you more on that later

110
00:03:32,799 --> 00:03:36,640
and finally we have a database that can

111
00:03:34,560 --> 00:03:38,560
be searched and returns the repositories

112
00:03:36,640 --> 00:03:41,119
that are relevant to your part search

113
00:03:38,560 --> 00:03:43,120
all right so more details and

114
00:03:41,120 --> 00:03:46,480
difficulties that we met

115
00:03:43,120 --> 00:03:48,400
for the crawler our idea was very simple

116
00:03:46,480 --> 00:03:50,879
just search the whole of github and

117
00:03:48,400 --> 00:03:51,519
return all pcb files that we can find

118
00:03:50,879 --> 00:03:55,120
and

119
00:03:51,519 --> 00:03:56,799
for later indexing however we found out

120
00:03:55,120 --> 00:03:58,560
that it's not quite that simple to

121
00:03:56,799 --> 00:04:00,480
search all of github there are

122
00:03:58,560 --> 00:04:02,239
rate limits on github and there's not

123
00:04:00,480 --> 00:04:03,599
only visible rate limits which is like

124
00:04:02,239 --> 00:04:06,319
30 searches per

125
00:04:03,599 --> 00:04:07,280
minute i think but there's also an

126
00:04:06,319 --> 00:04:09,760
invisible

127
00:04:07,280 --> 00:04:11,599
uh counter that somehow calculates how

128
00:04:09,760 --> 00:04:13,679
computationally intensive your

129
00:04:11,599 --> 00:04:15,439
search queries are and if you exceed

130
00:04:13,680 --> 00:04:17,519
those you'll get an abuse node

131
00:04:15,439 --> 00:04:18,798
and you're shut down for a while all

132
00:04:17,519 --> 00:04:21,120
right so

133
00:04:18,798 --> 00:04:22,638
because code search or searching inside

134
00:04:21,120 --> 00:04:24,639
the files turns out to be very

135
00:04:22,639 --> 00:04:27,919
computationally intensive for github

136
00:04:24,639 --> 00:04:29,840
we had to just search for repositories

137
00:04:27,919 --> 00:04:31,758
and read me that mentioned certain words

138
00:04:29,840 --> 00:04:34,479
in the description like pcb

139
00:04:31,759 --> 00:04:35,840
or keycad or stuff like that and then we

140
00:04:34,479 --> 00:04:38,080
search those repos

141
00:04:35,840 --> 00:04:40,159
whether or not they actually contain uh

142
00:04:38,080 --> 00:04:44,320
relevant files

143
00:04:40,160 --> 00:04:47,199
all right so the parser um

144
00:04:44,320 --> 00:04:48,000
so the parser downloads keycard pcb

145
00:04:47,199 --> 00:04:51,120
files and

146
00:04:48,000 --> 00:04:53,680
extracts the used components from them

147
00:04:51,120 --> 00:04:54,240
that was the idea but we had to find out

148
00:04:53,680 --> 00:04:56,240
that the

149
00:04:54,240 --> 00:04:58,639
component names are actually free text

150
00:04:56,240 --> 00:05:01,759
fields and some people just

151
00:04:58,639 --> 00:05:04,960
wrote down whatever they deemed

152
00:05:01,759 --> 00:05:07,440
yeah useful so that was why

153
00:05:04,960 --> 00:05:08,159
we had to incorporate a validation

154
00:05:07,440 --> 00:05:09,759
process

155
00:05:08,160 --> 00:05:11,199
to find out whether the components that

156
00:05:09,759 --> 00:05:13,280
were entered in the pcb files

157
00:05:11,199 --> 00:05:14,720
are actually existing components or if

158
00:05:13,280 --> 00:05:19,280
it's just something like

159
00:05:14,720 --> 00:05:22,800
uh 12 to 24 volts dc dc converter

160
00:05:19,280 --> 00:05:24,000
all right and for the validation we also

161
00:05:22,800 --> 00:05:27,120
had quite a simple idea

162
00:05:24,000 --> 00:05:28,960
so our idea was to use a component

163
00:05:27,120 --> 00:05:31,440
search for example one offered by a

164
00:05:28,960 --> 00:05:33,440
distributed distributor

165
00:05:31,440 --> 00:05:35,520
and see if it does return any results

166
00:05:33,440 --> 00:05:37,680
and if it does return results

167
00:05:35,520 --> 00:05:39,440
how many so we just said okay if it

168
00:05:37,680 --> 00:05:42,320
returns zero results it's probably

169
00:05:39,440 --> 00:05:44,240
non-existent or or just some gibberish

170
00:05:42,320 --> 00:05:45,840
in the component text

171
00:05:44,240 --> 00:05:48,000
and if it returned more than 10 results

172
00:05:45,840 --> 00:05:50,719
we assumed it would be something very

173
00:05:48,000 --> 00:05:51,680
generic like resistor or something

174
00:05:50,720 --> 00:05:54,639
however

175
00:05:51,680 --> 00:05:55,280
we could not find a component search um

176
00:05:54,639 --> 00:05:57,120
api

177
00:05:55,280 --> 00:05:59,039
that offered rate limits that were high

178
00:05:57,120 --> 00:06:01,520
enough for us to find anything

179
00:05:59,039 --> 00:06:03,840
so we looked at digikey and they offer

180
00:06:01,520 --> 00:06:07,840
about a thousand requests per day

181
00:06:03,840 --> 00:06:10,318
for um for free we also look at octopart

182
00:06:07,840 --> 00:06:12,080
they offer even less they offer 500 for

183
00:06:10,319 --> 00:06:14,080
educational users

184
00:06:12,080 --> 00:06:15,680
after you register with them and after

185
00:06:14,080 --> 00:06:18,080
that it gets really expensive really

186
00:06:15,680 --> 00:06:18,080
quickly

187
00:06:18,880 --> 00:06:23,680
yeah but we found a workaround by

188
00:06:21,120 --> 00:06:26,240
actually using eisler's component search

189
00:06:23,680 --> 00:06:27,039
and a piggybacking onto a cache that

190
00:06:26,240 --> 00:06:29,840
they

191
00:06:27,039 --> 00:06:31,599
built inside their api and we can use

192
00:06:29,840 --> 00:06:32,719
that without triggering any rate limits

193
00:06:31,600 --> 00:06:36,479
at all

194
00:06:32,720 --> 00:06:38,160
all right here is some uh

195
00:06:36,479 --> 00:06:40,000
well future work or if you're already

196
00:06:38,160 --> 00:06:40,880
hyped good first issues if you want to

197
00:06:40,000 --> 00:06:42,479
participate

198
00:06:40,880 --> 00:06:44,400
uh i don't think do i have time for

199
00:06:42,479 --> 00:06:47,199
those or

200
00:06:44,400 --> 00:06:48,239
all right yeah you're eating your

201
00:06:47,199 --> 00:06:51,199
question time

202
00:06:48,240 --> 00:06:51,520
okay great um yeah so we want to move

203
00:06:51,199 --> 00:06:53,919
the

204
00:06:51,520 --> 00:06:55,198
we developed on a private gitlab uh

205
00:06:53,919 --> 00:06:56,639
instance and we want to move that to

206
00:06:55,199 --> 00:06:59,039
gitlab.com

207
00:06:56,639 --> 00:07:00,479
uh get the ci cd which is already

208
00:06:59,039 --> 00:07:00,880
running on the private instance running

209
00:07:00,479 --> 00:07:03,120
again

210
00:07:00,880 --> 00:07:04,560
and also it's a huge monolithic mess

211
00:07:03,120 --> 00:07:05,440
which we want to split up into modular

212
00:07:04,560 --> 00:07:07,840
repos

213
00:07:05,440 --> 00:07:08,479
uh we want to improve the search a

214
00:07:07,840 --> 00:07:10,960
little bit

215
00:07:08,479 --> 00:07:12,800
uh support other formats when keycad

216
00:07:10,960 --> 00:07:15,758
actually i already

217
00:07:12,800 --> 00:07:17,680
met the maintainer of fritzing and so

218
00:07:15,759 --> 00:07:20,160
that might be a good next

219
00:07:17,680 --> 00:07:21,919
project to work on and we also want to

220
00:07:20,160 --> 00:07:24,800
support other platforms when github

221
00:07:21,919 --> 00:07:31,840
all right that's about it thank you for

222
00:07:24,800 --> 00:07:31,840
your attention

223
00:07:32,880 --> 00:07:36,639
uh just speak here uh is the intent to

224
00:07:35,280 --> 00:07:38,799
find uh

225
00:07:36,639 --> 00:07:39,919
other reference designs using the

226
00:07:38,800 --> 00:07:42,240
component

227
00:07:39,919 --> 00:07:43,120
yeah so the idea is just to find example

228
00:07:42,240 --> 00:07:45,520
projects

229
00:07:43,120 --> 00:07:47,360
that uh like that have used the same

230
00:07:45,520 --> 00:07:48,240
components so that you can get an idea

231
00:07:47,360 --> 00:07:50,400
on how to

232
00:07:48,240 --> 00:07:51,680
use the component in your pcb okay and

233
00:07:50,400 --> 00:07:55,198
then the second part is

234
00:07:51,680 --> 00:07:57,199
is there some kind of way to rate

235
00:07:55,199 --> 00:07:58,879
the found designs because every now and

236
00:07:57,199 --> 00:08:00,479
again if i look at these kind of designs

237
00:07:58,879 --> 00:08:03,520
i find something which i can see

238
00:08:00,479 --> 00:08:06,479
is probably not going to work

239
00:08:03,520 --> 00:08:07,039
in real life so any kind of rate system

240
00:08:06,479 --> 00:08:10,800
or

241
00:08:07,039 --> 00:08:11,520
not yet that was one future work issue

242
00:08:10,800 --> 00:08:13,759
here uh

243
00:08:11,520 --> 00:08:14,878
improve the ranking but right now we are

244
00:08:13,759 --> 00:08:17,440
ranking using uh

245
00:08:14,879 --> 00:08:18,960
github stars and forks so that might

246
00:08:17,440 --> 00:08:22,160
already give you an idea whether a

247
00:08:18,960 --> 00:08:22,159
project is useful or not

248
00:08:23,199 --> 00:08:27,360
yeah another improvement could be

249
00:08:25,599 --> 00:08:28,240
actually using reference design from the

250
00:08:27,360 --> 00:08:30,800
manufacturer

251
00:08:28,240 --> 00:08:31,520
because they actually provide it yeah i

252
00:08:30,800 --> 00:08:34,959
don't think they are

253
00:08:31,520 --> 00:08:37,120
available oh sorry

254
00:08:34,958 --> 00:08:38,239
so the there was a suggestion to use

255
00:08:37,120 --> 00:08:40,159
reference designs

256
00:08:38,240 --> 00:08:42,000
provided by the distributed by the

257
00:08:40,159 --> 00:08:44,720
manufacturers of the parts

258
00:08:42,000 --> 00:08:46,000
yeah but um i would have to look into

259
00:08:44,720 --> 00:08:48,240
how to actually find them

260
00:08:46,000 --> 00:08:49,360
i as i said i'm not a hardware

261
00:08:48,240 --> 00:08:51,120
specialist but i

262
00:08:49,360 --> 00:08:53,519
only know from reference designs inside

263
00:08:51,120 --> 00:08:54,080
the pdfs so those are usually only

264
00:08:53,519 --> 00:08:57,920
graphics

265
00:08:54,080 --> 00:08:59,920
right or about how

266
00:08:57,920 --> 00:09:00,959
complicated the part is for a

267
00:08:59,920 --> 00:09:03,760
microcontroller

268
00:09:00,959 --> 00:09:05,279
which needs for example an antenna you

269
00:09:03,760 --> 00:09:07,200
might have a reference design

270
00:09:05,279 --> 00:09:09,839
okay so that's something maybe worth

271
00:09:07,200 --> 00:09:12,000
looking into

272
00:09:09,839 --> 00:09:15,519
yeah have you maybe thought about

273
00:09:12,000 --> 00:09:15,519
offering some sort of snippet

274
00:09:20,240 --> 00:09:23,360
okay the question was whether or not one

275
00:09:22,640 --> 00:09:25,279
could add

276
00:09:23,360 --> 00:09:26,560
some certain snippet of code or

277
00:09:25,279 --> 00:09:27,040
something to the ripple to make it

278
00:09:26,560 --> 00:09:30,959
easily

279
00:09:27,040 --> 00:09:33,279
findable um no i haven't

280
00:09:30,959 --> 00:09:36,160
thought about it for now it would just

281
00:09:33,279 --> 00:09:37,600
be enough to include pcb or something

282
00:09:36,160 --> 00:09:40,959
some words like that in your repo

283
00:09:37,600 --> 00:09:43,279
description and then we'll find it

284
00:09:40,959 --> 00:09:44,719
but yeah maybe some more specific

285
00:09:43,279 --> 00:09:51,839
keywords

286
00:09:44,720 --> 00:09:51,839
could be provided for that

287
00:10:01,519 --> 00:10:04,640
all right i think the question time is

288
00:10:02,880 --> 00:10:08,240
over there's my

289
00:10:04,640 --> 00:10:11,920
oh yeah sorry you want to yeah no go

290
00:10:08,240 --> 00:10:11,920
go ahead more i saw that um

291
00:10:12,800 --> 00:10:16,959
so you said you were using the cache

292
00:10:15,839 --> 00:10:19,680
data

293
00:10:16,959 --> 00:10:21,040
to actually extract these uh how how did

294
00:10:19,680 --> 00:10:21,439
how do you actually make that work

295
00:10:21,040 --> 00:10:23,839
because

296
00:10:21,440 --> 00:10:27,040
both digi-key and octopart explicitly

297
00:10:23,839 --> 00:10:29,360
for bit caching data

298
00:10:27,040 --> 00:10:31,519
well we're not using the digi-key cards

299
00:10:29,360 --> 00:10:34,720
right so eisler has a component search

300
00:10:31,519 --> 00:10:34,720
that they use for their customers

301
00:10:39,760 --> 00:10:44,839
so i didn't actually know that because

302
00:10:41,600 --> 00:10:59,040
we don't really interface directly with

303
00:10:44,839 --> 00:10:59,040
digikey okay thank you so much

