1
00:00:06,640 --> 00:00:09,760
so

2
00:00:07,120 --> 00:00:11,679
uh good morning um great that some of

3
00:00:09,760 --> 00:00:13,679
you made it on the first slot

4
00:00:11,679 --> 00:00:15,440
um my name is tim and i'm going to

5
00:00:13,679 --> 00:00:16,960
present you the project closely to

6
00:00:15,440 --> 00:00:18,160
encrypt

7
00:00:16,960 --> 00:00:19,200
thank you for giving me the opportunity

8
00:00:18,160 --> 00:00:20,800
to speak here in front of you

9
00:00:19,200 --> 00:00:23,600
[Music]

10
00:00:20,800 --> 00:00:24,160
so what is closely to encrypt it's a

11
00:00:23,600 --> 00:00:27,279
project

12
00:00:24,160 --> 00:00:28,960
um by jonas moderator and me we are both

13
00:00:27,279 --> 00:00:31,359
freelancing system engineers living in

14
00:00:28,960 --> 00:00:32,800
germany and we're planning to bring full

15
00:00:31,359 --> 00:00:35,360
disk encryption

16
00:00:32,800 --> 00:00:38,160
into the suspend mode for debian and

17
00:00:35,360 --> 00:00:41,840
hopefully its derivatives

18
00:00:38,160 --> 00:00:44,398
so why is it useful

19
00:00:41,840 --> 00:00:45,760
to you full disc encryption only

20
00:00:44,399 --> 00:00:49,200
protects the data while

21
00:00:45,760 --> 00:00:52,239
it is at rest which means uh when your

22
00:00:49,200 --> 00:00:53,920
system is powered off which for most

23
00:00:52,239 --> 00:00:56,078
people is

24
00:00:53,920 --> 00:00:57,440
like very little time anymore because

25
00:00:56,079 --> 00:01:01,840
they just like close

26
00:00:57,440 --> 00:01:04,640
their laptop and take it somewhere um

27
00:01:01,840 --> 00:01:06,799
so we're trying to improve this time

28
00:01:04,640 --> 00:01:09,360
span where your system is protected

29
00:01:06,799 --> 00:01:10,080
to all the times when it's in suspend

30
00:01:09,360 --> 00:01:13,439
mode or

31
00:01:10,080 --> 00:01:16,720
sleep mode just the same

32
00:01:13,439 --> 00:01:18,720
and hopefully this will save your data

33
00:01:16,720 --> 00:01:20,640
at night or while you're on the move or

34
00:01:18,720 --> 00:01:24,880
while your

35
00:01:20,640 --> 00:01:24,880
laptop is on a train or something

36
00:01:25,040 --> 00:01:29,759
so first of all why why is this even

37
00:01:27,280 --> 00:01:29,759
difficult

38
00:01:30,079 --> 00:01:34,000
well we're locking up you're like we're

39
00:01:32,880 --> 00:01:36,560
locking away your

40
00:01:34,000 --> 00:01:38,560
running operating system um if this

41
00:01:36,560 --> 00:01:43,119
doesn't sound difficult to you

42
00:01:38,560 --> 00:01:43,119
like you it was difficult uh to me

43
00:01:43,360 --> 00:01:47,040
so there is all kinds of race conditions

44
00:01:46,320 --> 00:01:50,079
then

45
00:01:47,040 --> 00:01:51,119
that can happen since uh we've locked

46
00:01:50,079 --> 00:01:54,240
away

47
00:01:51,119 --> 00:01:55,680
all of your file systems the kernel

48
00:01:54,240 --> 00:01:56,240
might want to access it because some

49
00:01:55,680 --> 00:01:59,200
process

50
00:01:56,240 --> 00:02:01,119
is requesting something that would be uh

51
00:01:59,200 --> 00:02:03,040
like that would have file on your

52
00:02:01,119 --> 00:02:04,640
system so we have to make sure that we

53
00:02:03,040 --> 00:02:07,280
really know what happens

54
00:02:04,640 --> 00:02:08,639
before we enter the suspend mode and

55
00:02:07,280 --> 00:02:12,160
after we resume

56
00:02:08,639 --> 00:02:15,040
and only processes access

57
00:02:12,160 --> 00:02:17,760
some data once we have unlocked the

58
00:02:15,040 --> 00:02:17,760
system again

59
00:02:18,800 --> 00:02:23,120
well and then there's the thing that

60
00:02:21,920 --> 00:02:25,119
usually

61
00:02:23,120 --> 00:02:26,640
memory management is transparent which

62
00:02:25,120 --> 00:02:29,760
is great you don't have to care

63
00:02:26,640 --> 00:02:32,559
if you're developing an application but

64
00:02:29,760 --> 00:02:33,599
since the swap space is located on your

65
00:02:32,560 --> 00:02:37,280
hard drive

66
00:02:33,599 --> 00:02:39,679
which we will like encrypt and lock

67
00:02:37,280 --> 00:02:40,400
and the memory is actually unencrypted

68
00:02:39,680 --> 00:02:43,519
we have to

69
00:02:40,400 --> 00:02:46,319
uh be sure what part of the memory

70
00:02:43,519 --> 00:02:47,200
is located where so since this is the

71
00:02:46,319 --> 00:02:50,399
dev room

72
00:02:47,200 --> 00:02:53,760
i'm gonna uh dive in right into the

73
00:02:50,400 --> 00:02:57,760
details of how we implemented this

74
00:02:53,760 --> 00:03:00,879
so um systemd is standard

75
00:02:57,760 --> 00:03:04,720
in deviant nowadays so we

76
00:03:00,879 --> 00:03:08,159
start with a drop-in unit for system d

77
00:03:04,720 --> 00:03:09,680
and we override the command that happens

78
00:03:08,159 --> 00:03:13,200
on suspend mode

79
00:03:09,680 --> 00:03:15,200
usually it calls a binary call sleep.c

80
00:03:13,200 --> 00:03:16,799
and we overwrite it with a wrapper for

81
00:03:15,200 --> 00:03:18,799
our purpose

82
00:03:16,800 --> 00:03:21,280
which we called crypt setup suspended

83
00:03:18,800 --> 00:03:21,280
wrapper

84
00:03:22,159 --> 00:03:27,840
this wrapper then uses the inner drum fs

85
00:03:24,959 --> 00:03:31,040
that you have already used during boot

86
00:03:27,840 --> 00:03:33,519
um i mean

87
00:03:31,040 --> 00:03:35,359
that's i'm i'm guessing you have a full

88
00:03:33,519 --> 00:03:37,760
disc encryption here right so otherwise

89
00:03:35,360 --> 00:03:38,799
all this doesn't make sense so we're

90
00:03:37,760 --> 00:03:42,159
reusing this

91
00:03:38,799 --> 00:03:45,280
and loading it into a rfs in your memory

92
00:03:42,159 --> 00:03:46,480
um then we're using the unified c groups

93
00:03:45,280 --> 00:03:49,760
hierarchy

94
00:03:46,480 --> 00:03:50,879
to transparently freeze all of your

95
00:03:49,760 --> 00:03:55,280
processes

96
00:03:50,879 --> 00:03:57,760
so every c group has something that is

97
00:03:55,280 --> 00:03:58,720
like a freezer attribute and we just

98
00:03:57,760 --> 00:04:02,159
call it to

99
00:03:58,720 --> 00:04:02,959
freeze something um just in detail that

100
00:04:02,159 --> 00:04:05,519
you shouldn't do

101
00:04:02,959 --> 00:04:06,640
because it's like interfering into all

102
00:04:05,519 --> 00:04:08,879
kinds of processes

103
00:04:06,640 --> 00:04:10,159
but it seems to work uh quite well at

104
00:04:08,879 --> 00:04:14,959
the moment

105
00:04:10,159 --> 00:04:18,639
then we change root into the ram fs

106
00:04:14,959 --> 00:04:21,199
and we call our own binary encrypted up

107
00:04:18,639 --> 00:04:21,199
suspend

108
00:04:21,279 --> 00:04:27,679
so what this does is it first

109
00:04:25,120 --> 00:04:29,520
locks a lot of memory because we need a

110
00:04:27,680 --> 00:04:33,759
lot of memory

111
00:04:29,520 --> 00:04:36,960
afterwards because standard

112
00:04:33,759 --> 00:04:37,280
key derivation hash function is argon to

113
00:04:36,960 --> 00:04:39,520
i

114
00:04:37,280 --> 00:04:40,638
which is memory hard which means it

115
00:04:39,520 --> 00:04:43,120
needs a lot of memory

116
00:04:40,639 --> 00:04:45,040
so we have to make sure the memory is

117
00:04:43,120 --> 00:04:48,720
actually available

118
00:04:45,040 --> 00:04:51,919
then we're telling the kernel to not

119
00:04:48,720 --> 00:04:52,320
sync before suspend there's a attribute

120
00:04:51,919 --> 00:04:55,599
called

121
00:04:52,320 --> 00:04:58,560
unsuspend then we manually sync

122
00:04:55,600 --> 00:05:00,240
the system meaning writing everything

123
00:04:58,560 --> 00:05:02,880
from memory to hard disk that is

124
00:05:00,240 --> 00:05:03,840
should be written there uh then we do

125
00:05:02,880 --> 00:05:06,719
the lux suspend

126
00:05:03,840 --> 00:05:07,679
of all deluxe devices and then we

127
00:05:06,720 --> 00:05:10,639
suspend this

128
00:05:07,680 --> 00:05:12,160
we tell the kernel to suspend which it

129
00:05:10,639 --> 00:05:15,840
then does in the way that it

130
00:05:12,160 --> 00:05:19,919
usually does so what is this

131
00:05:15,840 --> 00:05:19,919
attributes this power sync and suspend

132
00:05:20,479 --> 00:05:23,680
yeah it's our first accepted kernel

133
00:05:22,479 --> 00:05:26,479
contribution uh

134
00:05:23,680 --> 00:05:28,160
we're very happy it was a long way it's

135
00:05:26,479 --> 00:05:30,159
a tiny patch

136
00:05:28,160 --> 00:05:33,520
but it's coming in actually the next

137
00:05:30,160 --> 00:05:36,560
release and 5.6

138
00:05:33,520 --> 00:05:38,960
it was a very interesting exercise

139
00:05:36,560 --> 00:05:40,160
in interacting with the open source

140
00:05:38,960 --> 00:05:43,280
community

141
00:05:40,160 --> 00:05:45,680
and yeah i can tell you later

142
00:05:43,280 --> 00:05:47,039
if you're interested um basically it is

143
00:05:45,680 --> 00:05:49,280
a runtime flag

144
00:05:47,039 --> 00:05:51,039
that tells the kernel if it should sync

145
00:05:49,280 --> 00:05:53,119
before suspend or shouldn't

146
00:05:51,039 --> 00:05:55,199
there has been a built-in flag before

147
00:05:53,120 --> 00:05:58,160
which we obviously couldn't use

148
00:05:55,199 --> 00:05:59,600
because we're uh aiming for upstream

149
00:05:58,160 --> 00:06:01,600
adoption

150
00:05:59,600 --> 00:06:06,319
and not everyone wants to use our

151
00:06:01,600 --> 00:06:08,639
program probably

152
00:06:06,319 --> 00:06:09,520
so going back into the details um the

153
00:06:08,639 --> 00:06:13,360
kernel has

154
00:06:09,520 --> 00:06:16,880
suspended um and now we wake it up

155
00:06:13,360 --> 00:06:20,400
afterwards it resumes it gives

156
00:06:16,880 --> 00:06:23,600
back the like power to the process

157
00:06:20,400 --> 00:06:26,318
that was running before suspend uh

158
00:06:23,600 --> 00:06:28,319
in this binary we unlock all the devices

159
00:06:26,319 --> 00:06:31,600
that we have locked before

160
00:06:28,319 --> 00:06:32,960
um we go back out to the wrapper and

161
00:06:31,600 --> 00:06:36,160
basically we just

162
00:06:32,960 --> 00:06:36,960
reverse everything that we did before we

163
00:06:36,160 --> 00:06:40,319
even

164
00:06:36,960 --> 00:06:43,440
um like unlock your uh like gdm

165
00:06:40,319 --> 00:06:43,440
session or something

166
00:06:44,960 --> 00:06:48,159
okay so since i have very little time i

167
00:06:46,880 --> 00:06:51,520
had to pre-record

168
00:06:48,160 --> 00:06:54,080
uh the demo so i hope that you

169
00:06:51,520 --> 00:06:55,198
believe me that it does what i will tell

170
00:06:54,080 --> 00:06:56,639
you but otherwise

171
00:06:55,199 --> 00:06:58,000
i have running this like it's running on

172
00:06:56,639 --> 00:07:00,080
my system right now so you can also

173
00:06:58,000 --> 00:07:02,560
check later

174
00:07:00,080 --> 00:07:03,599
so here i am minding my business i'm

175
00:07:02,560 --> 00:07:06,639
suspending the system

176
00:07:03,599 --> 00:07:08,800
there uh yep

177
00:07:06,639 --> 00:07:10,479
it's as i spent now i'm sending a cpi

178
00:07:08,800 --> 00:07:12,560
command to wake it up again

179
00:07:10,479 --> 00:07:13,599
and you i hope you can see it asks for

180
00:07:12,560 --> 00:07:17,440
the password

181
00:07:13,599 --> 00:07:19,919
of your um cryptic device

182
00:07:17,440 --> 00:07:22,560
it could be multiple devices you could

183
00:07:19,919 --> 00:07:25,359
use all the

184
00:07:22,560 --> 00:07:27,039
the functions that have been there in

185
00:07:25,360 --> 00:07:27,520
the crypto package before so can you can

186
00:07:27,039 --> 00:07:32,000
you use

187
00:07:27,520 --> 00:07:34,560
key files like special security keys

188
00:07:32,000 --> 00:07:34,560
or whatever

189
00:07:35,360 --> 00:07:42,240
all right what's next um so

190
00:07:40,080 --> 00:07:44,560
we need to do more testing right the

191
00:07:42,240 --> 00:07:48,240
suspend mode is something that is um

192
00:07:44,560 --> 00:07:49,919
very uh particular so

193
00:07:48,240 --> 00:07:52,240
we have to test it on all kinds of

194
00:07:49,919 --> 00:07:55,198
different systems and we hope that

195
00:07:52,240 --> 00:07:56,000
maybe some of you will help us with that

196
00:07:55,199 --> 00:07:58,160
because we're

197
00:07:56,000 --> 00:07:59,120
very soon going to merge the code with

198
00:07:58,160 --> 00:08:02,800
the upstream

199
00:07:59,120 --> 00:08:03,440
crypt setup package um so that in debian

200
00:08:02,800 --> 00:08:06,560
testing

201
00:08:03,440 --> 00:08:10,879
you can then just up install crypt it up

202
00:08:06,560 --> 00:08:14,319
minus suspend and it will transparently

203
00:08:10,879 --> 00:08:16,720
encrypt your file system when going to

204
00:08:14,319 --> 00:08:19,680
suspend mode

205
00:08:16,720 --> 00:08:20,479
we're waiting basically for the new

206
00:08:19,680 --> 00:08:23,759
kernel

207
00:08:20,479 --> 00:08:27,520
to come upstream as well

208
00:08:23,759 --> 00:08:29,360
or to be released so that it makes sense

209
00:08:27,520 --> 00:08:31,198
to that you can actually do some some

210
00:08:29,360 --> 00:08:35,039
testing without compiling your

211
00:08:31,199 --> 00:08:37,919
own kernel um then there's uh this

212
00:08:35,039 --> 00:08:39,598
very tricky situation if you are low on

213
00:08:37,919 --> 00:08:42,958
memory as i said

214
00:08:39,599 --> 00:08:45,600
argon to i it needs about

215
00:08:42,958 --> 00:08:46,640
it needs about like one usually one gig

216
00:08:45,600 --> 00:08:48,880
of ram

217
00:08:46,640 --> 00:08:50,399
um when unlocking device which you might

218
00:08:48,880 --> 00:08:52,160
not have

219
00:08:50,399 --> 00:08:55,200
so if you're like very knowledgeable

220
00:08:52,160 --> 00:08:58,319
about kernel memory

221
00:08:55,200 --> 00:08:58,320
management please talk to me

222
00:08:58,720 --> 00:09:02,880
obviously there are more secrets in your

223
00:09:00,720 --> 00:09:05,920
memory than just deluxe keys

224
00:09:02,880 --> 00:09:08,320
so we were planning to include some

225
00:09:05,920 --> 00:09:10,160
some scripts to get away some of those

226
00:09:08,320 --> 00:09:14,080
secrets as well

227
00:09:10,160 --> 00:09:16,800
yep and then i want a certain time sorry

228
00:09:14,080 --> 00:09:18,720
i want of course to uh thank the uh

229
00:09:16,800 --> 00:09:21,040
original kryptodop authors

230
00:09:18,720 --> 00:09:22,880
i want to thank the crypto maintainers

231
00:09:21,040 --> 00:09:25,040
who had the idea for this project

232
00:09:22,880 --> 00:09:27,200
gillam and jonas whom i've been working

233
00:09:25,040 --> 00:09:28,880
with which was really great

234
00:09:27,200 --> 00:09:30,560
and there have been people trying to

235
00:09:28,880 --> 00:09:33,839
tackle this problem before

236
00:09:30,560 --> 00:09:35,439
um i think our approach is the most

237
00:09:33,839 --> 00:09:37,839
advanced one but

238
00:09:35,440 --> 00:09:39,519
they have done great work as well and

239
00:09:37,839 --> 00:09:41,279
last but not least i want to thank a

240
00:09:39,519 --> 00:09:43,760
prototype fund who has been

241
00:09:41,279 --> 00:09:44,800
funding this project in the last five

242
00:09:43,760 --> 00:09:46,240
months

243
00:09:44,800 --> 00:09:48,079
they have a new roundup and you can

244
00:09:46,240 --> 00:09:51,200
apply if you live in germany

245
00:09:48,080 --> 00:09:53,120
they find open source work uh

246
00:09:51,200 --> 00:09:55,120
and yeah if you're interested you can

247
00:09:53,120 --> 00:09:58,399
visit our

248
00:09:55,120 --> 00:10:05,839
gitlab repo open some issues or send

249
00:09:58,399 --> 00:10:05,839
the email personally thank you very much

250
00:10:07,200 --> 00:10:09,279
you

