1
00:00:10,350 --> 00:00:13,840
[Laughter]

2
00:00:13,360 --> 00:00:17,038
all right

3
00:00:13,840 --> 00:00:19,119
so uh welcome um as as i mentioned um

4
00:00:17,039 --> 00:00:22,080
our previously scheduled talk

5
00:00:19,119 --> 00:00:23,840
um on on ghetto was our speaker was

6
00:00:22,080 --> 00:00:27,519
unable to attend to

7
00:00:23,840 --> 00:00:30,640
unforeseen um uh

8
00:00:27,519 --> 00:00:32,000
uh illness and so my name is seth

9
00:00:30,640 --> 00:00:34,160
hillbrand i'm

10
00:00:32,000 --> 00:00:35,520
i'm officially um one of the lead

11
00:00:34,160 --> 00:00:37,680
developers for the

12
00:00:35,520 --> 00:00:38,800
keycad team oh thank you for reminding

13
00:00:37,680 --> 00:00:41,360
me um and

14
00:00:38,800 --> 00:00:42,959
uh but today i'm going to talk about

15
00:00:41,360 --> 00:00:44,079
something that's only tangentially

16
00:00:42,960 --> 00:00:46,559
related to kicad

17
00:00:44,079 --> 00:00:47,760
because wayne already had all of the

18
00:00:46,559 --> 00:00:49,760
details that

19
00:00:47,760 --> 00:00:52,320
that you need from the very beginnings

20
00:00:49,760 --> 00:00:55,360
of of key cad so i'm going to talk about

21
00:00:52,320 --> 00:00:59,359
um about a pet project of mine

22
00:00:55,360 --> 00:01:00,160
on how we um one of the issues that we

23
00:00:59,359 --> 00:01:02,800
run into

24
00:01:00,160 --> 00:01:03,760
in key cad and keycad has if you're not

25
00:01:02,800 --> 00:01:07,119
aware

26
00:01:03,760 --> 00:01:07,600
one of the largest single largest 3d

27
00:01:07,119 --> 00:01:12,159
model

28
00:01:07,600 --> 00:01:15,919
libraries for electronic components

29
00:01:12,159 --> 00:01:19,119
in existence there are thousands

30
00:01:15,920 --> 00:01:22,080
and thousands and thousands of 3d models

31
00:01:19,119 --> 00:01:22,799
that are open open source freely

32
00:01:22,080 --> 00:01:25,439
available

33
00:01:22,799 --> 00:01:26,000
we use cad query as adam if adam's still

34
00:01:25,439 --> 00:01:28,880
here to

35
00:01:26,000 --> 00:01:29,840
yes we use cad query predominantly to

36
00:01:28,880 --> 00:01:32,798
generate um

37
00:01:29,840 --> 00:01:34,400
and we use cad query through freecad and

38
00:01:32,799 --> 00:01:36,400
freecad was also

39
00:01:34,400 --> 00:01:38,640
talking earlier today and we output

40
00:01:36,400 --> 00:01:41,680
using open cascade our talk just

41
00:01:38,640 --> 00:01:45,360
finished to uh do step files

42
00:01:41,680 --> 00:01:46,320
now with so many files we have kind of a

43
00:01:45,360 --> 00:01:49,280
unique

44
00:01:46,320 --> 00:01:51,279
uh process where we're not actually

45
00:01:49,280 --> 00:01:54,880
generating a single

46
00:01:51,280 --> 00:01:55,360
model that we then output to step files

47
00:01:54,880 --> 00:01:57,439
in this

48
00:01:55,360 --> 00:01:58,719
in this in this case our dedicated

49
00:01:57,439 --> 00:02:01,758
librarians who uh

50
00:01:58,719 --> 00:02:04,000
honestly are uh vastly under

51
00:02:01,759 --> 00:02:04,880
uh underappreciated in in the whole

52
00:02:04,000 --> 00:02:08,479
kicad

53
00:02:04,880 --> 00:02:11,680
ecosystem they work tirelessly

54
00:02:08,479 --> 00:02:15,360
to expand and curate and uh

55
00:02:11,680 --> 00:02:17,440
create these models for people to

56
00:02:15,360 --> 00:02:18,640
integrate in their electronic designs

57
00:02:17,440 --> 00:02:22,400
now

58
00:02:18,640 --> 00:02:26,160
the difficulty becomes

59
00:02:22,400 --> 00:02:30,400
we have to store all of these models

60
00:02:26,160 --> 00:02:34,000
and when you go out to a package manager

61
00:02:30,400 --> 00:02:36,480
the package manager also has to generate

62
00:02:34,000 --> 00:02:38,560
the packages for these files and what

63
00:02:36,480 --> 00:02:39,200
that what that looks like on a package

64
00:02:38,560 --> 00:02:41,599
manager

65
00:02:39,200 --> 00:02:43,359
say like fedoras is you will first

66
00:02:41,599 --> 00:02:46,640
download the repository

67
00:02:43,360 --> 00:02:50,319
and then you will install the repository

68
00:02:46,640 --> 00:02:53,440
inside the the ch root and take that

69
00:02:50,319 --> 00:02:55,359
and then archive the output of that into

70
00:02:53,440 --> 00:02:56,720
your your final into your final package

71
00:02:55,360 --> 00:02:57,440
that means you have three separate

72
00:02:56,720 --> 00:02:59,599
copies

73
00:02:57,440 --> 00:03:01,200
of whatever the output is in the case of

74
00:02:59,599 --> 00:03:03,040
key cad we're pushing about six

75
00:03:01,200 --> 00:03:07,119
gigabytes worth of

76
00:03:03,040 --> 00:03:10,159
3d models that get downloaded

77
00:03:07,120 --> 00:03:12,800
installed and then finally packaged

78
00:03:10,159 --> 00:03:14,799
meaning that the build environment for

79
00:03:12,800 --> 00:03:17,599
package managers gets larger and larger

80
00:03:14,800 --> 00:03:19,200
and for our end users the downloads get

81
00:03:17,599 --> 00:03:21,679
larger and larger and larger

82
00:03:19,200 --> 00:03:23,359
this is an awesome problem to have it's

83
00:03:21,680 --> 00:03:25,360
a great problem to have

84
00:03:23,360 --> 00:03:27,360
and yeah it's still a problem and so

85
00:03:25,360 --> 00:03:29,440
maybe maybe there are some ways

86
00:03:27,360 --> 00:03:32,799
that we can that we can address that in

87
00:03:29,440 --> 00:03:36,239
the future so step files

88
00:03:32,799 --> 00:03:39,599
universally universally accepted in any

89
00:03:36,239 --> 00:03:42,720
uh 3d uh 3d editing

90
00:03:39,599 --> 00:03:46,079
and modeling program worth its salt uh

91
00:03:42,720 --> 00:03:47,680
they are it is an open specification

92
00:03:46,080 --> 00:03:49,680
in the sense that you can go and look

93
00:03:47,680 --> 00:03:50,959
what the specification is and if you can

94
00:03:49,680 --> 00:03:53,439
read it without

95
00:03:50,959 --> 00:03:54,799
actually uh having someone walk you

96
00:03:53,439 --> 00:03:57,359
through it the first time

97
00:03:54,799 --> 00:03:59,040
then i really want to meet you because

98
00:03:57,360 --> 00:04:00,560
you're a very smart person and you can

99
00:03:59,040 --> 00:04:03,599
teach me a lot

100
00:04:00,560 --> 00:04:04,159
however it is an open specification and

101
00:04:03,599 --> 00:04:06,319
so

102
00:04:04,159 --> 00:04:08,640
uh we can we can look at it and we can

103
00:04:06,319 --> 00:04:11,760
understand exactly how we utilize it

104
00:04:08,640 --> 00:04:14,640
in order to uh potentially optimize

105
00:04:11,760 --> 00:04:16,719
what we see from the output so in this

106
00:04:14,640 --> 00:04:18,320
case step files are inherently redundant

107
00:04:16,720 --> 00:04:21,840
they're text based

108
00:04:18,320 --> 00:04:23,840
and we have output information for

109
00:04:21,839 --> 00:04:24,960
for example here i'm i'm going to try to

110
00:04:23,840 --> 00:04:27,679
use my uh

111
00:04:24,960 --> 00:04:28,479
my my cursor here oh there it is so we

112
00:04:27,680 --> 00:04:31,680
have output

113
00:04:28,479 --> 00:04:34,479
in this case we have a 16 pin

114
00:04:31,680 --> 00:04:35,840
dip uh package here from the uh from the

115
00:04:34,479 --> 00:04:37,680
keycad model library

116
00:04:35,840 --> 00:04:39,679
and we have 16 pins those are all

117
00:04:37,680 --> 00:04:41,199
exactly the same pins

118
00:04:39,680 --> 00:04:44,240
all you're doing is you're taking pin

119
00:04:41,199 --> 00:04:47,680
pin pin pin turn around pin pin pin pin

120
00:04:44,240 --> 00:04:48,800
you are making the exact same part and

121
00:04:47,680 --> 00:04:51,280
if you were to

122
00:04:48,800 --> 00:04:52,800
uh if you were to utilize all of the

123
00:04:51,280 --> 00:04:54,880
tools that step gives you

124
00:04:52,800 --> 00:04:56,240
you could just make that one part and

125
00:04:54,880 --> 00:04:58,719
say copy it on this

126
00:04:56,240 --> 00:05:00,400
in this offset and change the offset but

127
00:04:58,720 --> 00:05:02,080
you can also generate it in another

128
00:05:00,400 --> 00:05:05,440
fashion

129
00:05:02,080 --> 00:05:08,800
and all of the step file

130
00:05:05,440 --> 00:05:11,600
output uh engines will

131
00:05:08,800 --> 00:05:13,280
typically generate it in another fashion

132
00:05:11,600 --> 00:05:16,400
and that fashion is

133
00:05:13,280 --> 00:05:17,679
i have pin one and i'm going to start by

134
00:05:16,400 --> 00:05:21,120
creating the origin

135
00:05:17,680 --> 00:05:23,680
and then i'm going to create a a vector

136
00:05:21,120 --> 00:05:25,520
from that uh from that origin and now i

137
00:05:23,680 --> 00:05:27,360
now i can extrude along that vector

138
00:05:25,520 --> 00:05:28,639
oh and i need to extrude again in the

139
00:05:27,360 --> 00:05:30,479
same direction while i start with

140
00:05:28,639 --> 00:05:32,000
another origin and then i create another

141
00:05:30,479 --> 00:05:35,680
vector and then i extrude along

142
00:05:32,000 --> 00:05:38,160
so you have this this repeated

143
00:05:35,680 --> 00:05:41,280
function throughout the file it's a very

144
00:05:38,160 --> 00:05:41,280
safe way of generating

145
00:05:41,919 --> 00:05:46,880
but what happens is when you generate

146
00:05:44,560 --> 00:05:51,199
with the safe way of generating

147
00:05:46,880 --> 00:05:54,000
uh we're 5.8 gigabytes worth of data

148
00:05:51,199 --> 00:05:54,639
uh diptrace which also has an open i'm

149
00:05:54,000 --> 00:05:56,560
not sure if

150
00:05:54,639 --> 00:05:58,560
people are aware this another eda

151
00:05:56,560 --> 00:06:00,960
software package they provide an

152
00:05:58,560 --> 00:06:02,240
open library as well in that they

153
00:06:00,960 --> 00:06:03,758
provide the step files

154
00:06:02,240 --> 00:06:05,360
um that you can go out and download

155
00:06:03,759 --> 00:06:07,600
they're at about 4.7

156
00:06:05,360 --> 00:06:08,560
gigabytes total for all of their of all

157
00:06:07,600 --> 00:06:11,840
of their models

158
00:06:08,560 --> 00:06:15,520
and manufacturer models if you go on

159
00:06:11,840 --> 00:06:18,159
say say samtech uh for some high density

160
00:06:15,520 --> 00:06:20,159
uh throughput 300 pin connectors that

161
00:06:18,160 --> 00:06:22,319
300 pin connector is going to is going

162
00:06:20,160 --> 00:06:23,199
to cost you 40 megabytes worth of step

163
00:06:22,319 --> 00:06:25,919
file

164
00:06:23,199 --> 00:06:26,720
because it's generating an origin and a

165
00:06:25,919 --> 00:06:29,198
vector

166
00:06:26,720 --> 00:06:29,840
for every separate in every separate

167
00:06:29,199 --> 00:06:31,759
element

168
00:06:29,840 --> 00:06:32,880
that it is extruding in the in that

169
00:06:31,759 --> 00:06:36,800
model

170
00:06:32,880 --> 00:06:38,960
but you get your information

171
00:06:36,800 --> 00:06:40,080
the end result is good for the user

172
00:06:38,960 --> 00:06:42,400
because you get

173
00:06:40,080 --> 00:06:43,758
guaranteed information as long as you're

174
00:06:42,400 --> 00:06:47,280
willing to give up

175
00:06:43,759 --> 00:06:50,080
that that disk space that bandwidth and

176
00:06:47,280 --> 00:06:50,479
critically that load time because once

177
00:06:50,080 --> 00:06:53,758
you

178
00:06:50,479 --> 00:06:56,639
have to load up those uh that 50

179
00:06:53,759 --> 00:06:59,840
gigabytes worth of data for that model

180
00:06:56,639 --> 00:07:02,560
every time you do that your you need to

181
00:06:59,840 --> 00:07:04,239
pull all of those data in and that that

182
00:07:02,560 --> 00:07:06,080
slows down your overall process which

183
00:07:04,240 --> 00:07:07,599
slows down your iteration and so we can

184
00:07:06,080 --> 00:07:09,359
optimize this a little bit

185
00:07:07,599 --> 00:07:11,199
so there's content redundancy i'm gonna

186
00:07:09,360 --> 00:07:12,800
this is actually a step file

187
00:07:11,199 --> 00:07:14,240
you're looking inside you see the text

188
00:07:12,800 --> 00:07:17,919
here um and

189
00:07:14,240 --> 00:07:20,560
that first element this is um this is

190
00:07:17,919 --> 00:07:23,039
uh this step file happens to come from

191
00:07:20,560 --> 00:07:25,199
the open cascade 66 processor so it's a

192
00:07:23,039 --> 00:07:27,280
little little outdated but it's still

193
00:07:25,199 --> 00:07:30,000
still generally valid the first one

194
00:07:27,280 --> 00:07:32,960
is a key it's it's a string key in the

195
00:07:30,000 --> 00:07:36,479
step format it just needs to be unique

196
00:07:32,960 --> 00:07:38,479
and uh what we what the output from open

197
00:07:36,479 --> 00:07:40,159
cascade gives is it gives you a unique

198
00:07:38,479 --> 00:07:41,120
number which is you know perfectly valid

199
00:07:40,160 --> 00:07:43,360
way of doing that

200
00:07:41,120 --> 00:07:45,199
and then everything else will reference

201
00:07:43,360 --> 00:07:49,199
those unique numbers so you can see

202
00:07:45,199 --> 00:07:49,680
on here say uh say you know element 11

203
00:07:49,199 --> 00:07:51,759
here

204
00:07:49,680 --> 00:07:53,120
is setting up an axis placement in three

205
00:07:51,759 --> 00:07:55,599
dimensions that references

206
00:07:53,120 --> 00:07:56,560
elements 12 13 and 14. so you go down

207
00:07:55,599 --> 00:08:00,639
and look at 12 13

208
00:07:56,560 --> 00:08:04,319
14. well 12 is a 0 0 0 cartesian point

209
00:08:00,639 --> 00:08:07,280
13 is a direction in the

210
00:08:04,319 --> 00:08:07,680
z hat direction right one in the z hat

211
00:08:07,280 --> 00:08:11,119
and

212
00:08:07,680 --> 00:08:12,560
14 is a direction in the x direction so

213
00:08:11,120 --> 00:08:13,759
what we're what we're doing here is

214
00:08:12,560 --> 00:08:16,479
we're setting up a coordinate

215
00:08:13,759 --> 00:08:16,960
in the z x plane or we're setting up a

216
00:08:16,479 --> 00:08:18,719
plane

217
00:08:16,960 --> 00:08:19,840
the zx plane now we're going to do

218
00:08:18,720 --> 00:08:21,440
something else we're going to say all

219
00:08:19,840 --> 00:08:23,359
right we want another plane

220
00:08:21,440 --> 00:08:25,120
what do we start with we start with the

221
00:08:23,360 --> 00:08:27,039
origin

222
00:08:25,120 --> 00:08:29,039
well we're not we don't go back to the

223
00:08:27,039 --> 00:08:31,360
original origin we make a new origin

224
00:08:29,039 --> 00:08:32,799
and so there's a new origin here that is

225
00:08:31,360 --> 00:08:35,440
also a reference

226
00:08:32,799 --> 00:08:37,598
but steps uh step files are inherently

227
00:08:35,440 --> 00:08:39,440
references so what we can do

228
00:08:37,599 --> 00:08:41,039
if we intelligently walk through this

229
00:08:39,440 --> 00:08:43,839
file is that we can take a

230
00:08:41,039 --> 00:08:44,480
we can look at that and say well this

231
00:08:43,839 --> 00:08:46,959
reference

232
00:08:44,480 --> 00:08:48,880
is the same as this reference all of the

233
00:08:46,959 --> 00:08:50,800
origins are exactly the same

234
00:08:48,880 --> 00:08:52,720
we don't need to output them we just

235
00:08:50,800 --> 00:08:54,000
remember what number was the first one

236
00:08:52,720 --> 00:08:56,399
and we tell everyone to look back at

237
00:08:54,000 --> 00:08:59,240
that original reference so all of these

238
00:08:56,399 --> 00:09:00,800
all of these can be uh can be uh

239
00:08:59,240 --> 00:09:03,360
incrementally

240
00:09:00,800 --> 00:09:05,680
optimized to bring it down to a much

241
00:09:03,360 --> 00:09:06,320
faster load speed in a substantially

242
00:09:05,680 --> 00:09:07,920
smaller

243
00:09:06,320 --> 00:09:10,160
direction then how do you do that well

244
00:09:07,920 --> 00:09:12,959
you step through and

245
00:09:10,160 --> 00:09:14,480
you can either parse out the individual

246
00:09:12,959 --> 00:09:17,518
elements in which case you have to

247
00:09:14,480 --> 00:09:20,880
recognize there are uh in the uh

248
00:09:17,519 --> 00:09:23,839
in the step uh format

249
00:09:20,880 --> 00:09:23,839
you can have

250
00:09:24,160 --> 00:09:28,560
trying to remember the exact number i

251
00:09:25,680 --> 00:09:29,439
believe it's about 400 different uh 400

252
00:09:28,560 --> 00:09:31,920
different commands so

253
00:09:29,440 --> 00:09:33,600
so you would have to you could parse

254
00:09:31,920 --> 00:09:34,000
those 400 different commands and figure

255
00:09:33,600 --> 00:09:35,760
out

256
00:09:34,000 --> 00:09:37,440
you know how you do that reference or

257
00:09:35,760 --> 00:09:40,720
you do it something a little bit

258
00:09:37,440 --> 00:09:42,480
um a safer and perhaps more naive

259
00:09:40,720 --> 00:09:45,440
which is what i chose to do here you do

260
00:09:42,480 --> 00:09:45,440
a string comparison

261
00:09:46,399 --> 00:09:50,640
it's also perfectly valid because if you

262
00:09:50,240 --> 00:09:53,680
have

263
00:09:50,640 --> 00:09:54,160
two two lines that represent the exact

264
00:09:53,680 --> 00:09:57,760
same

265
00:09:54,160 --> 00:10:01,199
string they're the exact same thing

266
00:09:57,760 --> 00:10:02,560
so what we what we do is we

267
00:10:01,200 --> 00:10:04,240
take all of those and we put them

268
00:10:02,560 --> 00:10:06,160
together these exact same lines from the

269
00:10:04,240 --> 00:10:08,320
exact same file now we have our

270
00:10:06,160 --> 00:10:09,920
cartesian point here number 12

271
00:10:08,320 --> 00:10:11,680
and instead of when we're setting up the

272
00:10:09,920 --> 00:10:14,719
two planes both planes

273
00:10:11,680 --> 00:10:15,439
in number 11 references the origin at

274
00:10:14,720 --> 00:10:18,800
number 12

275
00:10:15,440 --> 00:10:20,880
and the second plane number 15

276
00:10:18,800 --> 00:10:22,479
references the origin 12 rather than

277
00:10:20,880 --> 00:10:25,040
setting up a new origin every

278
00:10:22,480 --> 00:10:26,800
ever every single time so this works out

279
00:10:25,040 --> 00:10:29,120
pretty well for us

280
00:10:26,800 --> 00:10:30,000
because what what can we do with say an

281
00:10:29,120 --> 00:10:32,959
individual model

282
00:10:30,000 --> 00:10:34,240
in the in this case a qfn 68 what we're

283
00:10:32,959 --> 00:10:37,680
what we're looking at here is

284
00:10:34,240 --> 00:10:41,120
you know a 68 non-non-leaded quad

285
00:10:37,680 --> 00:10:44,399
uh flat pack here that what we

286
00:10:41,120 --> 00:10:46,079
get here originally i have two of i have

287
00:10:44,399 --> 00:10:48,560
two here that i pulled from diptrace and

288
00:10:46,079 --> 00:10:53,199
one from or one from the keycad library

289
00:10:48,560 --> 00:10:56,399
um the keycads was originally about 1.7

290
00:10:53,200 --> 00:10:59,440
megabytes for this for this one

291
00:10:56,399 --> 00:11:02,560
file that represents a 64-pin model

292
00:10:59,440 --> 00:11:04,480
and after you take that down and go

293
00:11:02,560 --> 00:11:06,239
get rid of all the repetition and just

294
00:11:04,480 --> 00:11:07,279
put in references well we're down to

295
00:11:06,240 --> 00:11:10,480
about 600

296
00:11:07,279 --> 00:11:12,880
and 660 kilobytes so we we

297
00:11:10,480 --> 00:11:14,959
lose a little over 50 percent of that

298
00:11:12,880 --> 00:11:17,120
file size just from repetition

299
00:11:14,959 --> 00:11:18,239
same thing with with diptrace we go from

300
00:11:17,120 --> 00:11:21,680
about uh

301
00:11:18,240 --> 00:11:24,800
a one megabyte file to a 530 kilobyte

302
00:11:21,680 --> 00:11:27,120
file we get we save this

303
00:11:24,800 --> 00:11:28,000
without losing any information and

304
00:11:27,120 --> 00:11:30,480
that's the critical

305
00:11:28,000 --> 00:11:31,680
part we're not talking about compress

306
00:11:30,480 --> 00:11:34,399
compressing this

307
00:11:31,680 --> 00:11:35,439
and actually losing any information

308
00:11:34,399 --> 00:11:38,560
about

309
00:11:35,440 --> 00:11:39,360
the uh about the content of the step

310
00:11:38,560 --> 00:11:41,279
file

311
00:11:39,360 --> 00:11:43,440
what we're doing is we're saying we

312
00:11:41,279 --> 00:11:44,560
don't need the same information in

313
00:11:43,440 --> 00:11:47,120
multiple places

314
00:11:44,560 --> 00:11:48,560
in uh in the step file and step supports

315
00:11:47,120 --> 00:11:49,760
this natively so we're not creating a

316
00:11:48,560 --> 00:11:52,239
different file format

317
00:11:49,760 --> 00:11:53,360
we're just creating a step file format

318
00:11:52,240 --> 00:11:56,320
that is actually

319
00:11:53,360 --> 00:11:57,920
uh slight uh slightly more optimal

320
00:11:56,320 --> 00:12:01,839
critically

321
00:11:57,920 --> 00:12:01,839
we leave a few cases

322
00:12:02,079 --> 00:12:06,000
leave a few cases of duplication in

323
00:12:03,839 --> 00:12:08,639
there where you might be able to

324
00:12:06,000 --> 00:12:10,160
reduce it further if you wanted to you

325
00:12:08,639 --> 00:12:13,680
might notice here

326
00:12:10,160 --> 00:12:18,880
that element 14 is

327
00:12:13,680 --> 00:12:22,319
the same element as element 16.

328
00:12:18,880 --> 00:12:25,439
element 14 is a direction in the one

329
00:12:22,320 --> 00:12:28,480
zero negative zero direction

330
00:12:25,440 --> 00:12:29,360
and element sixteen is in the one zero

331
00:12:28,480 --> 00:12:32,880
positive

332
00:12:29,360 --> 00:12:34,880
zero direction um this makes sense to

333
00:12:32,880 --> 00:12:35,839
computer scientists and not so much to

334
00:12:34,880 --> 00:12:38,800
physicists

335
00:12:35,839 --> 00:12:40,480
uh so you uh so in this case we actually

336
00:12:38,800 --> 00:12:42,719
have the exact same direction

337
00:12:40,480 --> 00:12:44,240
but we don't want to bring it down any

338
00:12:42,720 --> 00:12:47,839
further

339
00:12:44,240 --> 00:12:49,920
because this representation

340
00:12:47,839 --> 00:12:51,279
for a computer scientist is actually

341
00:12:49,920 --> 00:12:53,599
something different we won't

342
00:12:51,279 --> 00:12:55,839
we don't want to we don't want to make

343
00:12:53,600 --> 00:12:58,560
an unnecessary optimization

344
00:12:55,839 --> 00:12:59,200
that we might end up uh that we might

345
00:12:58,560 --> 00:13:02,319
end up

346
00:12:59,200 --> 00:13:04,720
regretting so we play it safe on this

347
00:13:02,320 --> 00:13:06,320
uh on this front we get our compression

348
00:13:04,720 --> 00:13:08,880
um without the uh with

349
00:13:06,320 --> 00:13:10,959
with without the uh additional issues

350
00:13:08,880 --> 00:13:12,880
now

351
00:13:10,959 --> 00:13:14,399
immediately when you talk about this and

352
00:13:12,880 --> 00:13:16,000
talk about reducing step files

353
00:13:14,399 --> 00:13:18,000
the first thing that people say is but

354
00:13:16,000 --> 00:13:18,639
well what about step z this tempest is

355
00:13:18,000 --> 00:13:21,839
great

356
00:13:18,639 --> 00:13:23,200
in case you don't know step z is uh is a

357
00:13:21,839 --> 00:13:25,839
light wrapper of zlib

358
00:13:23,200 --> 00:13:28,000
that goes over a step file and zlib does

359
00:13:25,839 --> 00:13:29,839
a huffman tree compression so you take

360
00:13:28,000 --> 00:13:32,320
take the huffman tree and you represent

361
00:13:29,839 --> 00:13:35,279
all of the data and you get

362
00:13:32,320 --> 00:13:37,360
you get generalized textual compression

363
00:13:35,279 --> 00:13:39,519
that when you repeat text commands over

364
00:13:37,360 --> 00:13:42,959
and over and over again

365
00:13:39,519 --> 00:13:45,440
zlib will kind of create a code tree

366
00:13:42,959 --> 00:13:47,839
that represents those more effectively

367
00:13:45,440 --> 00:13:49,519
in a binary format so you get a binary

368
00:13:47,839 --> 00:13:51,680
output so automatically you

369
00:13:49,519 --> 00:13:52,720
get about you know 50 uh savings from

370
00:13:51,680 --> 00:13:55,680
the binary output

371
00:13:52,720 --> 00:13:56,959
and then you also get to uh provide a

372
00:13:55,680 --> 00:13:59,760
reference window

373
00:13:56,959 --> 00:14:00,719
for the huffman encoding to uh to take

374
00:13:59,760 --> 00:14:03,279
commands

375
00:14:00,720 --> 00:14:04,320
you know the later commands that get um

376
00:14:03,279 --> 00:14:06,320
that get referenced

377
00:14:04,320 --> 00:14:09,600
back to an earlier window if they repeat

378
00:14:06,320 --> 00:14:14,000
a lot so you get a lot more compression

379
00:14:09,600 --> 00:14:17,440
but that's an orthogonal compression

380
00:14:14,000 --> 00:14:21,040
to what we're doing because we take um

381
00:14:17,440 --> 00:14:22,880
a first level pass understanding

382
00:14:21,040 --> 00:14:25,360
what the references mean in the step

383
00:14:22,880 --> 00:14:26,160
files and then intelligently replacing

384
00:14:25,360 --> 00:14:29,040
those

385
00:14:26,160 --> 00:14:30,959
uh those repeated commands with step

386
00:14:29,040 --> 00:14:33,599
references themselves

387
00:14:30,959 --> 00:14:35,439
so you get to combine these two

388
00:14:33,600 --> 00:14:38,720
approaches together

389
00:14:35,440 --> 00:14:41,199
and suddenly you get the benefit from

390
00:14:38,720 --> 00:14:42,000
the step z format as well as the this

391
00:14:41,199 --> 00:14:45,040
additional

392
00:14:42,000 --> 00:14:48,320
benefit from our from our

393
00:14:45,040 --> 00:14:50,240
um repl from our replacement technology

394
00:14:48,320 --> 00:14:52,560
we combine these together and

395
00:14:50,240 --> 00:14:54,240
independently step z is pretty is

396
00:14:52,560 --> 00:14:56,239
is pretty good so here you can you can

397
00:14:54,240 --> 00:14:57,680
see again dip trace on the top and key

398
00:14:56,240 --> 00:15:00,000
cad models on the bottom

399
00:14:57,680 --> 00:15:01,120
just going to step z you go from one

400
00:15:00,000 --> 00:15:05,040
megabyte in the

401
00:15:01,120 --> 00:15:08,240
in the dip trace model to 176

402
00:15:05,040 --> 00:15:11,279
kilobytes in step z but

403
00:15:08,240 --> 00:15:14,399
if you start already from the

404
00:15:11,279 --> 00:15:17,360
500 kilobyte um step reduce

405
00:15:14,399 --> 00:15:17,680
function and take that step reduced file

406
00:15:17,360 --> 00:15:19,839
you

407
00:15:17,680 --> 00:15:21,519
also get that additional compression on

408
00:15:19,839 --> 00:15:23,040
top of that so you get down

409
00:15:21,519 --> 00:15:25,760
you get down even further you want to

410
00:15:23,040 --> 00:15:27,839
take both of these methods together

411
00:15:25,760 --> 00:15:29,360
and this gives you uh this gives you the

412
00:15:27,839 --> 00:15:30,639
most bang for your buck what does that

413
00:15:29,360 --> 00:15:32,480
get you

414
00:15:30,639 --> 00:15:33,680
well that gets you the ability to

415
00:15:32,480 --> 00:15:37,279
support

416
00:15:33,680 --> 00:15:40,800
a much larger library

417
00:15:37,279 --> 00:15:43,199
for a given uh for a given

418
00:15:40,800 --> 00:15:43,839
bandwidth use for a given hard drive

419
00:15:43,199 --> 00:15:46,880
storage

420
00:15:43,839 --> 00:15:50,639
and it uh it prevents having to

421
00:15:46,880 --> 00:15:54,160
you know having to deal with um

422
00:15:50,639 --> 00:15:57,519
with resizing each of your

423
00:15:54,160 --> 00:16:01,199
build partitions in order to support

424
00:15:57,519 --> 00:16:03,680
a rapidly growing uh rapidly growing 3d

425
00:16:01,199 --> 00:16:05,439
3d model library there are also some

426
00:16:03,680 --> 00:16:07,920
additional savings in in

427
00:16:05,440 --> 00:16:09,120
server in server storage as well as load

428
00:16:07,920 --> 00:16:11,519
time that you get to

429
00:16:09,120 --> 00:16:12,880
that you get to benefit from uh larger

430
00:16:11,519 --> 00:16:14,160
benefits even from the

431
00:16:12,880 --> 00:16:17,199
from the key cab models the keycap

432
00:16:14,160 --> 00:16:18,560
models are in case you didn't know this

433
00:16:17,199 --> 00:16:20,399
we're a little bit more accurate than

434
00:16:18,560 --> 00:16:20,719
the diptrace model so we have a little

435
00:16:20,399 --> 00:16:22,639
more

436
00:16:20,720 --> 00:16:24,399
a little more information in there so we

437
00:16:22,639 --> 00:16:26,800
we actually we actually get a larger

438
00:16:24,399 --> 00:16:27,600
larger benefit um from this but uh

439
00:16:26,800 --> 00:16:30,319
companies

440
00:16:27,600 --> 00:16:31,040
uh like samtech similarly the out the

441
00:16:30,320 --> 00:16:34,160
output of that

442
00:16:31,040 --> 00:16:35,120
is uh is similarly um small so how do

443
00:16:34,160 --> 00:16:37,120
you know

444
00:16:35,120 --> 00:16:38,959
after you've done this that you get the

445
00:16:37,120 --> 00:16:39,519
exact same thing out that you were

446
00:16:38,959 --> 00:16:42,638
putting in

447
00:16:39,519 --> 00:16:43,120
and critically the 3d models any mcad

448
00:16:42,639 --> 00:16:44,720
person

449
00:16:43,120 --> 00:16:47,600
will will tell you if you're if you're

450
00:16:44,720 --> 00:16:48,399
modifying a 3d model you need to make

451
00:16:47,600 --> 00:16:51,040
sure

452
00:16:48,399 --> 00:16:51,440
that nothing has physically changed in

453
00:16:51,040 --> 00:16:54,560
that

454
00:16:51,440 --> 00:16:57,199
output of the 3d model because if you

455
00:16:54,560 --> 00:17:00,399
change an output in the 3d model you

456
00:16:57,199 --> 00:17:03,758
might as well just break the whole thing

457
00:17:00,399 --> 00:17:05,199
so it doesn't matter if we save anything

458
00:17:03,759 --> 00:17:05,839
if we don't if we don't get an accurate

459
00:17:05,199 --> 00:17:08,559
output

460
00:17:05,839 --> 00:17:10,159
and the naive way of course is to go

461
00:17:08,559 --> 00:17:13,119
through and just kind of look at and say

462
00:17:10,160 --> 00:17:13,919
you know there's a regular one on the

463
00:17:13,119 --> 00:17:15,359
left

464
00:17:13,919 --> 00:17:17,039
and there's a compressed one on the

465
00:17:15,359 --> 00:17:19,760
right

466
00:17:17,039 --> 00:17:21,119
and they look about the same they look

467
00:17:19,760 --> 00:17:23,199
like they are probably

468
00:17:21,119 --> 00:17:25,039
but but are you but we're not we're not

469
00:17:23,199 --> 00:17:27,280
picking up all of the details we don't

470
00:17:25,039 --> 00:17:29,039
we're we're not critically going to be

471
00:17:27,280 --> 00:17:32,000
able to evaluate

472
00:17:29,039 --> 00:17:32,400
hundreds of thousands potentially you

473
00:17:32,000 --> 00:17:34,080
know

474
00:17:32,400 --> 00:17:35,919
when we when it gets hundreds we're only

475
00:17:34,080 --> 00:17:37,280
at uh we're only at a few thousand right

476
00:17:35,919 --> 00:17:38,480
now but you know what eventually we're

477
00:17:37,280 --> 00:17:40,799
not going to be able to evaluate every

478
00:17:38,480 --> 00:17:42,960
single model that is generated

479
00:17:40,799 --> 00:17:44,240
in the library to ensure that we have an

480
00:17:42,960 --> 00:17:46,240
accurate transformation

481
00:17:44,240 --> 00:17:47,280
by eye we just don't have the manpower

482
00:17:46,240 --> 00:17:50,720
so what do you need to do

483
00:17:47,280 --> 00:17:52,160
you need to evaluate this um in the code

484
00:17:50,720 --> 00:17:54,480
so what do we do with the with the

485
00:17:52,160 --> 00:17:55,840
reduction code is we go back to open

486
00:17:54,480 --> 00:17:58,559
cascade

487
00:17:55,840 --> 00:18:00,320
and you just heard about all of the

488
00:17:58,559 --> 00:18:01,760
boolean operators that open cascade

489
00:18:00,320 --> 00:18:04,000
supports on solid models this is

490
00:18:01,760 --> 00:18:06,720
fantastic this is exactly what we need

491
00:18:04,000 --> 00:18:08,000
because we take the original one and

492
00:18:06,720 --> 00:18:10,960
then we load up

493
00:18:08,000 --> 00:18:11,520
our reduced one and if we get the same

494
00:18:10,960 --> 00:18:13,200
thing

495
00:18:11,520 --> 00:18:14,480
in open cascade loading one file and

496
00:18:13,200 --> 00:18:16,880
loading the other file then if we

497
00:18:14,480 --> 00:18:19,039
subtract one from the other we get zero

498
00:18:16,880 --> 00:18:20,000
and so that's what that that's exactly

499
00:18:19,039 --> 00:18:23,120
what we do we

500
00:18:20,000 --> 00:18:25,120
we use a uh use a b rep algo api

501
00:18:23,120 --> 00:18:26,239
to uh to cut the two models between each

502
00:18:25,120 --> 00:18:29,600
other and

503
00:18:26,240 --> 00:18:32,960
you and if we are successful then

504
00:18:29,600 --> 00:18:36,000
we don't uh see a difference and in fact

505
00:18:32,960 --> 00:18:38,559
we do get a null result for the for uh

506
00:18:36,000 --> 00:18:40,400
for our entire library on the difference

507
00:18:38,559 --> 00:18:43,440
between loading open cascade

508
00:18:40,400 --> 00:18:47,120
for the zero uh for the zeroth order

509
00:18:43,440 --> 00:18:49,760
uh models that are directly output from

510
00:18:47,120 --> 00:18:51,280
uh cad query as well as our sma as well

511
00:18:49,760 --> 00:18:54,240
as our smaller models so

512
00:18:51,280 --> 00:18:54,879
what does that overall get us where

513
00:18:54,240 --> 00:18:56,320
where where

514
00:18:54,880 --> 00:18:58,720
where do we stand on a larger library

515
00:18:56,320 --> 00:19:02,320
well the kicad step library uh goes

516
00:18:58,720 --> 00:19:06,000
from 5.8 to 100

517
00:19:02,320 --> 00:19:09,280
1.5 so this means that we can support

518
00:19:06,000 --> 00:19:10,000
you know four times as many models four

519
00:19:09,280 --> 00:19:11,918
times as many

520
00:19:10,000 --> 00:19:13,840
models within the same within the same

521
00:19:11,919 --> 00:19:15,039
build volume and within within the same

522
00:19:13,840 --> 00:19:18,639
download so

523
00:19:15,039 --> 00:19:21,440
but more importantly for uh for

524
00:19:18,640 --> 00:19:23,039
for the work that i do when i'm sharing

525
00:19:21,440 --> 00:19:26,160
models i'm usually sharing it

526
00:19:23,039 --> 00:19:28,480
over over email with colleagues at

527
00:19:26,160 --> 00:19:30,320
remote workspaces because not everyone

528
00:19:28,480 --> 00:19:33,440
is is on board with git yet

529
00:19:30,320 --> 00:19:37,280
so sending over an email as soon as you

530
00:19:33,440 --> 00:19:38,880
hit that uh that 20 megabyte or so limit

531
00:19:37,280 --> 00:19:40,720
uh most of your mail servers are going

532
00:19:38,880 --> 00:19:43,679
to kick it back at least mine will

533
00:19:40,720 --> 00:19:45,520
um and so i i always need to get these

534
00:19:43,679 --> 00:19:47,440
large board models down to

535
00:19:45,520 --> 00:19:49,520
something that is something that is

536
00:19:47,440 --> 00:19:51,679
addressable for a mail server

537
00:19:49,520 --> 00:19:53,039
um and so largest board that i've had to

538
00:19:51,679 --> 00:19:56,080
output so far is about six

539
00:19:53,039 --> 00:19:59,440
is about 60 megabytes and now we can

540
00:19:56,080 --> 00:20:00,639
now i actually as with this i can

541
00:19:59,440 --> 00:20:02,720
actually get that through the mail

542
00:20:00,640 --> 00:20:03,679
server so this is what this is what i

543
00:20:02,720 --> 00:20:06,240
get

544
00:20:03,679 --> 00:20:07,200
and where where this go where this goes

545
00:20:06,240 --> 00:20:09,280
so this is a

546
00:20:07,200 --> 00:20:10,559
single use library you can check it out

547
00:20:09,280 --> 00:20:11,918
for yourself if you want to take a look

548
00:20:10,559 --> 00:20:13,760
give it a test drive

549
00:20:11,919 --> 00:20:15,919
let me know if you find any any issues

550
00:20:13,760 --> 00:20:17,919
with it so get lab

551
00:20:15,919 --> 00:20:19,440
address here for the for the actual

552
00:20:17,919 --> 00:20:21,760
library it's just command line

553
00:20:19,440 --> 00:20:23,360
utility call it on your file give it a

554
00:20:21,760 --> 00:20:26,480
different output and you can see

555
00:20:23,360 --> 00:20:35,678
the two so thank you for your time i

556
00:20:26,480 --> 00:20:37,760
hope i'll take any questions

557
00:20:35,679 --> 00:20:37,760
you

