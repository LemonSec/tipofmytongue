1
00:00:05,440 --> 00:00:09,840
so

2
00:00:06,000 --> 00:00:14,160
we are going to talk about uh this thing

3
00:00:09,840 --> 00:00:15,679
uh and us is me and nikolaj andreshov

4
00:00:14,160 --> 00:00:16,720
and michael is sitting here he'll join

5
00:00:15,679 --> 00:00:18,240
me later

6
00:00:16,720 --> 00:00:20,320
neither of us does actually look like

7
00:00:18,240 --> 00:00:23,680
that anymore

8
00:00:20,320 --> 00:00:26,160
so we are coming from red hat cti

9
00:00:23,680 --> 00:00:28,320
team or cki project and uh very

10
00:00:26,160 --> 00:00:31,679
distributed team which are doing

11
00:00:28,320 --> 00:00:33,200
kernel ci at redhead so why do we need

12
00:00:31,679 --> 00:00:36,879
kernel ci

13
00:00:33,200 --> 00:00:39,360
well as most of you probably know we do

14
00:00:36,880 --> 00:00:41,920
releases of distributions and each

15
00:00:39,360 --> 00:00:43,920
release has different kernel version

16
00:00:41,920 --> 00:00:44,960
there's a lot of kernel versions and

17
00:00:43,920 --> 00:00:48,399
moreover

18
00:00:44,960 --> 00:00:48,879
we are one of the major contributors to

19
00:00:48,399 --> 00:00:50,640
the

20
00:00:48,879 --> 00:00:52,239
kernel and certainly the biggest one

21
00:00:50,640 --> 00:00:55,120
among distributions

22
00:00:52,239 --> 00:00:56,959
so this this shows the comparison of

23
00:00:55,120 --> 00:00:59,680
unique email addresses

24
00:00:56,960 --> 00:01:01,840
from suse redhead and canonical

25
00:00:59,680 --> 00:01:04,879
contributed to the colonel

26
00:01:01,840 --> 00:01:07,680
and this is comets each of those is per

27
00:01:04,879 --> 00:01:11,119
year and the red hat is the blue one

28
00:01:07,680 --> 00:01:15,600
uh so we somehow gotta

29
00:01:11,119 --> 00:01:18,159
to make it consistent and reliable

30
00:01:15,600 --> 00:01:19,199
and if you look at this this is a big

31
00:01:18,159 --> 00:01:20,880
queue of how

32
00:01:19,200 --> 00:01:22,400
code goes through the pipeline towards

33
00:01:20,880 --> 00:01:26,080
red hat

34
00:01:22,400 --> 00:01:26,479
and until not so long ago our tests were

35
00:01:26,080 --> 00:01:28,720
only

36
00:01:26,479 --> 00:01:30,320
there at the end so the developers would

37
00:01:28,720 --> 00:01:32,479
throw the commits over to

38
00:01:30,320 --> 00:01:34,479
throw the bills over to the qa and they

39
00:01:32,479 --> 00:01:36,000
would test it and then come back and

40
00:01:34,479 --> 00:01:37,840
they would retest it that takes a long

41
00:01:36,000 --> 00:01:38,960
time and if you consider how long it

42
00:01:37,840 --> 00:01:42,960
takes for

43
00:01:38,960 --> 00:01:44,798
the whole pipeline to execute one patch

44
00:01:42,960 --> 00:01:46,079
to digest the patch through that and get

45
00:01:44,799 --> 00:01:48,399
a release it's a

46
00:01:46,079 --> 00:01:50,960
it's a long way so what we want to do is

47
00:01:48,399 --> 00:01:54,799
we want to do this

48
00:01:50,960 --> 00:01:55,199
and we want to do it fast and provide as

49
00:01:54,799 --> 00:02:00,560
much

50
00:01:55,200 --> 00:02:04,159
as as fast possible feedback so that uh

51
00:02:00,560 --> 00:02:06,560
ideally the bugs are caught before

52
00:02:04,159 --> 00:02:08,160
even maintainers see them at the same at

53
00:02:06,560 --> 00:02:09,440
the moment that the developers submit

54
00:02:08,160 --> 00:02:12,599
those

55
00:02:09,440 --> 00:02:16,239
and that is hard because there is just

56
00:02:12,599 --> 00:02:16,238
socratic email

57
00:02:16,319 --> 00:02:20,879
i mean look at this so we somehow are

58
00:02:19,680 --> 00:02:23,040
supposed like i'm not

59
00:02:20,879 --> 00:02:24,879
not having anything against uh against

60
00:02:23,040 --> 00:02:25,760
this message just shows the complexity

61
00:02:24,879 --> 00:02:28,239
of these things

62
00:02:25,760 --> 00:02:29,040
so somehow we are somehow we are

63
00:02:28,239 --> 00:02:31,200
supposed to

64
00:02:29,040 --> 00:02:33,239
to put our web hooks in here like this

65
00:02:31,200 --> 00:02:37,040
is a patch number 62 out of

66
00:02:33,239 --> 00:02:39,360
114 and there's this amount of

67
00:02:37,040 --> 00:02:40,879
discussion going on so somehow we're

68
00:02:39,360 --> 00:02:44,000
supposed to test those

69
00:02:40,879 --> 00:02:45,440
and provide feedback to developers so

70
00:02:44,000 --> 00:02:48,000
this has been a

71
00:02:45,440 --> 00:02:49,440
an ongoing discussion recently in the

72
00:02:48,000 --> 00:02:52,000
kernel circles and

73
00:02:49,440 --> 00:02:53,040
for example uh the last linux plumbers

74
00:02:52,000 --> 00:02:54,640
there was a

75
00:02:53,040 --> 00:02:57,679
one of those presentations that are

76
00:02:54,640 --> 00:03:00,559
happening recently by mitre yukov

77
00:02:57,680 --> 00:03:01,200
who did a very good take on those issues

78
00:03:00,560 --> 00:03:02,560
and

79
00:03:01,200 --> 00:03:04,640
i recommend you watch it if you're

80
00:03:02,560 --> 00:03:07,440
interested in in the kernel development

81
00:03:04,640 --> 00:03:11,920
process he makes good points

82
00:03:07,440 --> 00:03:13,120
uh so what we've built

83
00:03:11,920 --> 00:03:15,839
is something like this this is

84
00:03:13,120 --> 00:03:15,840
simplified

85
00:03:16,720 --> 00:03:19,920
and actually lost a slightly more

86
00:03:18,239 --> 00:03:22,319
complex slide on the plane

87
00:03:19,920 --> 00:03:25,518
here because of how slice.com works but

88
00:03:22,319 --> 00:03:28,879
never mind this is this is very simple

89
00:03:25,519 --> 00:03:31,519
and we'll go around

90
00:03:28,879 --> 00:03:32,000
so normally the if you wanted to check

91
00:03:31,519 --> 00:03:33,599
just the

92
00:03:32,000 --> 00:03:35,680
just the changes in the git repo being

93
00:03:33,599 --> 00:03:38,560
committed there that's kind of easy

94
00:03:35,680 --> 00:03:38,799
so we have a bunch of ripples we track

95
00:03:38,560 --> 00:03:41,200
and

96
00:03:38,799 --> 00:03:42,959
uh and uh we check like if there are new

97
00:03:41,200 --> 00:03:46,720
commits and we test those

98
00:03:42,959 --> 00:03:50,480
that's fairly trivial uh

99
00:03:46,720 --> 00:03:52,000
we actually have insider that we have a

100
00:03:50,480 --> 00:03:54,319
bunch of git repos for different

101
00:03:52,000 --> 00:03:57,599
releases like rel705

102
00:03:54,319 --> 00:03:58,720
relate and we also track uh upstream

103
00:03:57,599 --> 00:04:00,399
repos

104
00:03:58,720 --> 00:04:03,519
mainly stable at this moment but we

105
00:04:00,400 --> 00:04:06,879
track also a few others

106
00:04:03,519 --> 00:04:08,400
uh and we test those commits of course

107
00:04:06,879 --> 00:04:10,879
and that's relatively easy we just

108
00:04:08,400 --> 00:04:12,799
just pull the pull the repo and we run

109
00:04:10,879 --> 00:04:16,079
our tests off which about which i'll

110
00:04:12,799 --> 00:04:18,079
tell you a little later then there's the

111
00:04:16,079 --> 00:04:19,759
interesting part which you started with

112
00:04:18,079 --> 00:04:22,800
turns out it's not that hard

113
00:04:19,759 --> 00:04:26,160
so well it's hard it's hard

114
00:04:22,800 --> 00:04:28,160
don't don't get me wrong but

115
00:04:26,160 --> 00:04:29,440
you can do it easier so there's a

116
00:04:28,160 --> 00:04:31,919
typical mail list

117
00:04:29,440 --> 00:04:33,040
like linux usb mail list there's a

118
00:04:31,919 --> 00:04:36,240
message

119
00:04:33,040 --> 00:04:37,600
from a series it looks like this uh

120
00:04:36,240 --> 00:04:39,759
turns out there is a project called

121
00:04:37,600 --> 00:04:42,720
patchwork probably many of you know

122
00:04:39,759 --> 00:04:43,360
which is used by maintainers well most

123
00:04:42,720 --> 00:04:45,280
of all

124
00:04:43,360 --> 00:04:47,440
they use it to track the patches as

125
00:04:45,280 --> 00:04:49,919
they've been processed reviewed and

126
00:04:47,440 --> 00:04:53,280
tested and they checked like which

127
00:04:49,919 --> 00:04:53,280
patches were merged and which not

128
00:04:53,440 --> 00:04:58,000
so it looks like this if you go to

129
00:04:55,880 --> 00:05:00,080
patchwork.kernel.org there is a bunch of

130
00:04:58,000 --> 00:05:01,840
projects and those projects can be

131
00:05:00,080 --> 00:05:04,960
mapped to a particular mail list

132
00:05:01,840 --> 00:05:06,320
or even a particular tag being used like

133
00:05:04,960 --> 00:05:07,520
tagging the subject being used in the

134
00:05:06,320 --> 00:05:09,039
mail list

135
00:05:07,520 --> 00:05:11,440
oh at least the thread is done this way

136
00:05:09,039 --> 00:05:13,680
i'm not sure if that's upstream actually

137
00:05:11,440 --> 00:05:15,199
so if you go to the same linux usb mail

138
00:05:13,680 --> 00:05:16,960
list here you can see there's

139
00:05:15,199 --> 00:05:19,280
again those patches but this time

140
00:05:16,960 --> 00:05:21,198
they're organized into series

141
00:05:19,280 --> 00:05:23,039
and if you click on one of those links

142
00:05:21,199 --> 00:05:24,720
you get to the particular

143
00:05:23,039 --> 00:05:26,719
particular patch series there are two

144
00:05:24,720 --> 00:05:29,680
patches in them we can go to pacific

145
00:05:26,720 --> 00:05:30,880
pacific patch and see like what's been

146
00:05:29,680 --> 00:05:33,199
going on what's the

147
00:05:30,880 --> 00:05:35,280
what's the patch and we can download the

148
00:05:33,199 --> 00:05:38,639
mbox there on the right

149
00:05:35,280 --> 00:05:40,479
or the whole series and the main thing

150
00:05:38,639 --> 00:05:42,240
that concerns us about this is that

151
00:05:40,479 --> 00:05:45,120
patchwork has

152
00:05:42,240 --> 00:05:47,360
rest api so we can go through those

153
00:05:45,120 --> 00:05:49,280
projects we can extract the

154
00:05:47,360 --> 00:05:51,520
the batch series the patches and

155
00:05:49,280 --> 00:05:53,359
everything and we can track

156
00:05:51,520 --> 00:05:54,880
when they are appearing this is of

157
00:05:53,360 --> 00:05:56,400
course like

158
00:05:54,880 --> 00:05:58,400
sounds very simple but the devil is in

159
00:05:56,400 --> 00:06:00,000
the details where you have to

160
00:05:58,400 --> 00:06:02,318
kind of expect that not all messages

161
00:06:00,000 --> 00:06:04,160
come through at the same time

162
00:06:02,319 --> 00:06:06,240
when you go check and the series might

163
00:06:04,160 --> 00:06:08,080
not be complete there are bugs

164
00:06:06,240 --> 00:06:10,000
people send in all kinds of messages in

165
00:06:08,080 --> 00:06:12,159
there sometimes they are not picked up

166
00:06:10,000 --> 00:06:13,680
and things like that page series can

167
00:06:12,160 --> 00:06:15,919
have cover letter can

168
00:06:13,680 --> 00:06:17,280
don't have cover letter and things like

169
00:06:15,919 --> 00:06:20,318
that

170
00:06:17,280 --> 00:06:22,080
but you can make it work

171
00:06:20,319 --> 00:06:24,960
so the typical patchwork trigger would

172
00:06:22,080 --> 00:06:25,758
be tied to a particular patchwork

173
00:06:24,960 --> 00:06:27,520
instance

174
00:06:25,759 --> 00:06:29,600
and particular project there and

175
00:06:27,520 --> 00:06:31,919
associated with the chris point and git

176
00:06:29,600 --> 00:06:31,919
repo

177
00:06:33,360 --> 00:06:39,840
further on we also have triggers from

178
00:06:37,440 --> 00:06:41,280
our package bills in co in koji and the

179
00:06:39,840 --> 00:06:43,919
developers builds and copper

180
00:06:41,280 --> 00:06:44,960
for fedora and then certainly for rel

181
00:06:43,919 --> 00:06:46,840
although it's called a little

182
00:06:44,960 --> 00:06:50,638
differently

183
00:06:46,840 --> 00:06:52,638
uh pardon let's go back

184
00:06:50,639 --> 00:06:53,919
so fedora build system looks like this

185
00:06:52,639 --> 00:06:56,080
there are a bunch of packages

186
00:06:53,919 --> 00:06:57,840
uh they're being built prepared for

187
00:06:56,080 --> 00:07:00,318
releases and

188
00:06:57,840 --> 00:07:02,000
reviewed so we can look for kernel

189
00:07:00,319 --> 00:07:04,639
there's our kernel

190
00:07:02,000 --> 00:07:06,160
let's take this one and here is a here's

191
00:07:04,639 --> 00:07:07,759
information on the build of the kernel

192
00:07:06,160 --> 00:07:08,639
like specific revision and everything

193
00:07:07,759 --> 00:07:10,080
and all the

194
00:07:08,639 --> 00:07:12,800
packages that were built for all the

195
00:07:10,080 --> 00:07:12,800
architectures

196
00:07:12,880 --> 00:07:16,319
and copper looks like this oh

197
00:07:14,880 --> 00:07:19,440
wonderfully

198
00:07:16,319 --> 00:07:21,599
finally connected so

199
00:07:19,440 --> 00:07:23,199
copper is is more for developers you can

200
00:07:21,599 --> 00:07:25,440
have your

201
00:07:23,199 --> 00:07:26,560
package built and put into our rpm repo

202
00:07:25,440 --> 00:07:29,199
and picked up

203
00:07:26,560 --> 00:07:30,319
by your users or by other developers and

204
00:07:29,199 --> 00:07:32,000
we track doses

205
00:07:30,319 --> 00:07:33,919
track those as well so you can look for

206
00:07:32,000 --> 00:07:35,039
the slash kernel there and find one of

207
00:07:33,919 --> 00:07:37,039
those

208
00:07:35,039 --> 00:07:39,039
and go in there and into bills and see

209
00:07:37,039 --> 00:07:40,240
there's there's been a

210
00:07:39,039 --> 00:07:42,240
there's been a build and here's the

211
00:07:40,240 --> 00:07:44,319
packages but we don't talk through the

212
00:07:42,240 --> 00:07:46,400
web ui of course

213
00:07:44,319 --> 00:07:49,039
there's just the packages we talked

214
00:07:46,400 --> 00:07:51,280
through the we listened to the fedora

215
00:07:49,039 --> 00:07:52,479
message bus and which is used both by

216
00:07:51,280 --> 00:07:54,400
koji and copper and

217
00:07:52,479 --> 00:07:56,960
internally at threadhead there is a

218
00:07:54,400 --> 00:07:59,280
message bus as well

219
00:07:56,960 --> 00:08:00,878
we just uh listen to the message there

220
00:07:59,280 --> 00:08:02,559
is the log from our trigger and uh it

221
00:08:00,879 --> 00:08:04,319
checks like okay there's build completed

222
00:08:02,560 --> 00:08:05,919
there's a message coming through the bus

223
00:08:04,319 --> 00:08:07,440
we don't not interested in this one

224
00:08:05,919 --> 00:08:09,840
neither in this one

225
00:08:07,440 --> 00:08:13,840
but here there's the kernel we pick it

226
00:08:09,840 --> 00:08:13,840
up and we trigger our pipeline

227
00:08:14,879 --> 00:08:20,639
so we also have have to test our own ci

228
00:08:18,400 --> 00:08:22,239
so we have a special kind of

229
00:08:20,639 --> 00:08:24,160
two special kinds of triggers for github

230
00:08:22,240 --> 00:08:27,039
in gitlab

231
00:08:24,160 --> 00:08:28,479
for testing contributions to our ci

232
00:08:27,039 --> 00:08:30,000
repos of which we have many

233
00:08:28,479 --> 00:08:31,840
and as you can see we have some on

234
00:08:30,000 --> 00:08:32,240
github and someone get lab because of

235
00:08:31,840 --> 00:08:36,240
well

236
00:08:32,240 --> 00:08:38,959
historically uh so it looks

237
00:08:36,240 --> 00:08:41,360
simply like this you submit a pr or mr

238
00:08:38,958 --> 00:08:43,760
and the bot comes and says like hey

239
00:08:41,360 --> 00:08:45,120
i'm a boat send me a message and i'll

240
00:08:43,760 --> 00:08:47,040
test this for you

241
00:08:45,120 --> 00:08:49,200
so the developer says like a test place

242
00:08:47,040 --> 00:08:50,959
board and bot says testing

243
00:08:49,200 --> 00:08:53,040
and you go then it's triggers the

244
00:08:50,959 --> 00:08:54,880
pipelines

245
00:08:53,040 --> 00:08:56,240
through for the various uh for the

246
00:08:54,880 --> 00:08:59,360
various repos that we have

247
00:08:56,240 --> 00:08:59,920
a developer can go have lunch or two and

248
00:08:59,360 --> 00:09:02,240
then

249
00:08:59,920 --> 00:09:04,959
finishes and the boat says like passed

250
00:09:02,240 --> 00:09:06,880
or failed well

251
00:09:04,959 --> 00:09:08,719
as it happens here's an example of my

252
00:09:06,880 --> 00:09:09,120
pull request so the bot comes in and

253
00:09:08,720 --> 00:09:12,080
tells

254
00:09:09,120 --> 00:09:13,440
tells us like yeah here i am there this

255
00:09:12,080 --> 00:09:14,880
is what you can do and it's a little

256
00:09:13,440 --> 00:09:16,320
different from gitlab and for various

257
00:09:14,880 --> 00:09:18,160
reapers and can select or add this

258
00:09:16,320 --> 00:09:20,640
keyword or that keyword and we'll test

259
00:09:18,160 --> 00:09:23,519
this and that and things like that and

260
00:09:20,640 --> 00:09:25,680
yeah i am asking the boat to test so the

261
00:09:23,519 --> 00:09:28,160
boat says yeah i'm going

262
00:09:25,680 --> 00:09:29,839
then uh let's post the results of failed

263
00:09:28,160 --> 00:09:33,360
of course

264
00:09:29,839 --> 00:09:35,680
uh so that's how we do testing for our

265
00:09:33,360 --> 00:09:38,000
ci because

266
00:09:35,680 --> 00:09:39,760
yeah many repos and because our ci is in

267
00:09:38,000 --> 00:09:43,200
a separate pipeline and they have

268
00:09:39,760 --> 00:09:44,319
like we internally have two gitlab repos

269
00:09:43,200 --> 00:09:47,360
actually handling this but

270
00:09:44,320 --> 00:09:50,880
about this not reports gitlab

271
00:09:47,360 --> 00:09:54,160
instances now that's a complication

272
00:09:50,880 --> 00:09:54,640
uh a fun one yeah so further on that's

273
00:09:54,160 --> 00:09:56,240
and

274
00:09:54,640 --> 00:09:57,920
these are two major parts of our

275
00:09:56,240 --> 00:09:59,600
pipeline of course

276
00:09:57,920 --> 00:10:01,360
the test database and the tool which

277
00:09:59,600 --> 00:10:04,079
lets us speak which tests to run and

278
00:10:01,360 --> 00:10:06,880
organizes everything into trees

279
00:10:04,079 --> 00:10:08,079
uh and other dependencies like where we

280
00:10:06,880 --> 00:10:09,519
can

281
00:10:08,079 --> 00:10:11,199
what we can run with this build with

282
00:10:09,519 --> 00:10:12,880
that build on this architecture and that

283
00:10:11,200 --> 00:10:14,959
architecture and the

284
00:10:12,880 --> 00:10:16,160
et cetera developers want to test this

285
00:10:14,959 --> 00:10:19,359
or that

286
00:10:16,160 --> 00:10:21,680
so basically the

287
00:10:19,360 --> 00:10:22,880
data flow is very simple we have kpdb

288
00:10:21,680 --> 00:10:24,640
which is a ripple with the test

289
00:10:22,880 --> 00:10:25,680
information which is currently private

290
00:10:24,640 --> 00:10:27,600
because there is like

291
00:10:25,680 --> 00:10:28,880
all kinds of stuff for real internal

292
00:10:27,600 --> 00:10:31,200
ones and

293
00:10:28,880 --> 00:10:32,240
we are still intending to open it up but

294
00:10:31,200 --> 00:10:34,560
it's difficult to

295
00:10:32,240 --> 00:10:36,320
separate the upstream tests from

296
00:10:34,560 --> 00:10:38,479
downstream tests in a

297
00:10:36,320 --> 00:10:40,720
complicated data structure and somehow

298
00:10:38,480 --> 00:10:43,360
merge it together

299
00:10:40,720 --> 00:10:45,519
so we have the database which is

300
00:10:43,360 --> 00:10:47,360
basically yaml and we have a tool

301
00:10:45,519 --> 00:10:49,120
which takes it and a bunch of parameters

302
00:10:47,360 --> 00:10:51,120
and then speeds out the xml for

303
00:10:49,120 --> 00:10:52,800
bigger system which actually runs our

304
00:10:51,120 --> 00:10:57,279
tests and this

305
00:10:52,800 --> 00:10:59,680
system is installed internally but it's

306
00:10:57,279 --> 00:11:02,000
open source but you will have a very

307
00:10:59,680 --> 00:11:04,319
hard time actually trying to install it

308
00:11:02,000 --> 00:11:06,800
which we are working on right now very

309
00:11:04,320 --> 00:11:08,800
hard and hopefully we'll be able to

310
00:11:06,800 --> 00:11:10,319
let you guys enjoy it but it's all open

311
00:11:08,800 --> 00:11:12,880
source it's out there

312
00:11:10,320 --> 00:11:16,560
including documentation it's just nobody

313
00:11:12,880 --> 00:11:19,839
succeeded installing by themselves yes

314
00:11:16,560 --> 00:11:21,839
so the databases uh can contain

315
00:11:19,839 --> 00:11:23,760
like information about architectures

316
00:11:21,839 --> 00:11:26,880
again uh

317
00:11:23,760 --> 00:11:30,959
of which there are five right now

318
00:11:26,880 --> 00:11:33,760
uh kind of host types and these describe

319
00:11:30,959 --> 00:11:35,599
what do we want the host to have like do

320
00:11:33,760 --> 00:11:38,240
we want to have

321
00:11:35,600 --> 00:11:39,920
this much ram or this mining cpus or

322
00:11:38,240 --> 00:11:43,440
this much storage or

323
00:11:39,920 --> 00:11:46,000
even a particular pci card or

324
00:11:43,440 --> 00:11:47,519
or a network card and we organize them

325
00:11:46,000 --> 00:11:51,120
into host types because

326
00:11:47,519 --> 00:11:53,040
that's easier uh they have trees

327
00:11:51,120 --> 00:11:55,279
obviously particular repos or types of

328
00:11:53,040 --> 00:11:56,880
rippers we want to test and those affect

329
00:11:55,279 --> 00:11:58,720
which test will run where like for

330
00:11:56,880 --> 00:12:01,279
example one test can run on rail seven

331
00:11:58,720 --> 00:12:04,959
but not on rail five

332
00:12:01,279 --> 00:12:05,519
uh and someone upstream and some tests

333
00:12:04,959 --> 00:12:09,359
are

334
00:12:05,519 --> 00:12:12,240
still internal uh not many though

335
00:12:09,360 --> 00:12:15,040
most of them are actually out there uh

336
00:12:12,240 --> 00:12:17,279
components which describe

337
00:12:15,040 --> 00:12:18,800
what what things the build contains like

338
00:12:17,279 --> 00:12:21,040
upstream only contains uh

339
00:12:18,800 --> 00:12:23,199
kernel image but internal internal

340
00:12:21,040 --> 00:12:26,560
builds they are built using rpms and

341
00:12:23,200 --> 00:12:30,399
there could be debugging for headers

342
00:12:26,560 --> 00:12:32,638
uh the internal kernel headers and

343
00:12:30,399 --> 00:12:35,120
things like that or tools that we that

344
00:12:32,639 --> 00:12:36,320
some tests need like

345
00:12:35,120 --> 00:12:38,399
like for example some tests need

346
00:12:36,320 --> 00:12:41,440
debugging for things like that

347
00:12:38,399 --> 00:12:44,079
or some tests don't run on debug bill

348
00:12:41,440 --> 00:12:45,600
so and then we organize tests into sets

349
00:12:44,079 --> 00:12:47,599
of course like for network tests for

350
00:12:45,600 --> 00:12:50,079
file system memory etc etc

351
00:12:47,600 --> 00:12:51,360
virtual machines and of course the

352
00:12:50,079 --> 00:12:52,399
description of the test suites

353
00:12:51,360 --> 00:12:54,720
themselves

354
00:12:52,399 --> 00:12:56,320
of which there are quite a big number

355
00:12:54,720 --> 00:12:59,360
soon to be a hundred

356
00:12:56,320 --> 00:13:01,040
and these uh these are range from

357
00:12:59,360 --> 00:13:02,480
simple tests like just a shell script

358
00:13:01,040 --> 00:13:04,079
which just restarts the kernel test

359
00:13:02,480 --> 00:13:08,320
something understand

360
00:13:04,079 --> 00:13:10,079
uh two very big ones like lcp usex and

361
00:13:08,320 --> 00:13:11,920
the top ones are listed there i guess

362
00:13:10,079 --> 00:13:14,479
but those are not all which can contain

363
00:13:11,920 --> 00:13:17,519
like thousands of tests

364
00:13:14,480 --> 00:13:19,040
uh so an example of tests with data like

365
00:13:17,519 --> 00:13:20,880
a description

366
00:13:19,040 --> 00:13:22,480
where it is uh in the report it's

367
00:13:20,880 --> 00:13:25,040
actually quite outdated

368
00:13:22,480 --> 00:13:25,839
anyway this the essence is there where

369
00:13:25,040 --> 00:13:29,360
where it is

370
00:13:25,839 --> 00:13:33,200
located and for example this one is

371
00:13:29,360 --> 00:13:36,240
in our test repository on github where

372
00:13:33,200 --> 00:13:39,680
most of our tests are uh

373
00:13:36,240 --> 00:13:41,120
which host type it runs on uh additional

374
00:13:39,680 --> 00:13:43,920
information of

375
00:13:41,120 --> 00:13:45,680
like i want like this this very specific

376
00:13:43,920 --> 00:13:46,160
host for this like and it could be down

377
00:13:45,680 --> 00:13:48,319
to

378
00:13:46,160 --> 00:13:50,079
a specific host name on our in our

379
00:13:48,320 --> 00:13:51,600
bigger system like i want to run it like

380
00:13:50,079 --> 00:13:53,199
exactly here

381
00:13:51,600 --> 00:13:55,680
on this machine because there's only

382
00:13:53,199 --> 00:13:58,000
this hardware there

383
00:13:55,680 --> 00:13:59,519
uh which this description could look

384
00:13:58,000 --> 00:14:01,839
like this actually this says

385
00:13:59,519 --> 00:14:03,600
don't run on these arm systems because

386
00:14:01,839 --> 00:14:07,040
they don't work

387
00:14:03,600 --> 00:14:10,959
so information on maintainers and

388
00:14:07,040 --> 00:14:14,240
what's not well this is a discussion for

389
00:14:10,959 --> 00:14:14,719
upstream let's look at that for now so

390
00:14:14,240 --> 00:14:18,320
these are

391
00:14:14,720 --> 00:14:20,399
test maintainers who look after after

392
00:14:18,320 --> 00:14:21,839
the test and check that it's working and

393
00:14:20,399 --> 00:14:24,800
it's failing and they actually

394
00:14:21,839 --> 00:14:25,199
receive copies of failure reports and

395
00:14:24,800 --> 00:14:27,199
they

396
00:14:25,199 --> 00:14:28,560
they're supposed to take a look at as

397
00:14:27,199 --> 00:14:30,319
soon as something happens and tell the

398
00:14:28,560 --> 00:14:31,599
developers okay sorry that's my bad it's

399
00:14:30,320 --> 00:14:35,839
a failure

400
00:14:31,600 --> 00:14:38,000
or say like this is your problem and

401
00:14:35,839 --> 00:14:39,600
they are responsible for those tests

402
00:14:38,000 --> 00:14:43,440
which is uh

403
00:14:39,600 --> 00:14:45,839
going to upstream important because

404
00:14:43,440 --> 00:14:46,720
uh upstream developers they don't see

405
00:14:45,839 --> 00:14:48,320
that much into

406
00:14:46,720 --> 00:14:50,480
our machines and things like that so

407
00:14:48,320 --> 00:14:52,399
they have a hard time figuring out what

408
00:14:50,480 --> 00:14:53,760
actually happened which we are working

409
00:14:52,399 --> 00:14:56,160
on

410
00:14:53,760 --> 00:14:57,920
uh so there's a can there's the

411
00:14:56,160 --> 00:14:58,719
conditions for the test to run on like

412
00:14:57,920 --> 00:15:00,639
the

413
00:14:58,720 --> 00:15:02,800
sets which it belongs to and this is

414
00:15:00,639 --> 00:15:05,760
also outdated my gosh

415
00:15:02,800 --> 00:15:08,079
uh there's a this is also an interesting

416
00:15:05,760 --> 00:15:11,600
part that

417
00:15:08,079 --> 00:15:13,680
we specify which uh

418
00:15:11,600 --> 00:15:15,519
source files the particular test covers

419
00:15:13,680 --> 00:15:17,199
more or less so that we can avoid

420
00:15:15,519 --> 00:15:19,760
running it when

421
00:15:17,199 --> 00:15:21,599
there is a patch that doesn't touch

422
00:15:19,760 --> 00:15:23,760
those files and that's why we can kind

423
00:15:21,600 --> 00:15:25,839
of contain the

424
00:15:23,760 --> 00:15:27,920
contain the runtime at least a little

425
00:15:25,839 --> 00:15:30,000
bit make it shorter when we don't need

426
00:15:27,920 --> 00:15:30,000
it

427
00:15:31,920 --> 00:15:38,959
and this this allows us to kind of

428
00:15:35,279 --> 00:15:41,360
describe when to run them for which code

429
00:15:38,959 --> 00:15:42,959
architectures the test will drawn on and

430
00:15:41,360 --> 00:15:44,320
which trees it belongs to but

431
00:15:42,959 --> 00:15:46,560
there are no components here because

432
00:15:44,320 --> 00:15:48,000
this is old uh

433
00:15:46,560 --> 00:15:49,920
and there is there could be like

434
00:15:48,000 --> 00:15:50,560
multiple cases of this rip i wanted to

435
00:15:49,920 --> 00:15:52,399
run it

436
00:15:50,560 --> 00:15:54,000
with this file system or the dot file

437
00:15:52,399 --> 00:15:57,360
system for example file system

438
00:15:54,000 --> 00:16:00,079
test or additional parameters

439
00:15:57,360 --> 00:16:00,639
uh and uh in the invoking the keypad

440
00:16:00,079 --> 00:16:03,040
tool

441
00:16:00,639 --> 00:16:04,720
normally people don't invoke it by hand

442
00:16:03,040 --> 00:16:06,560
but it runs in the pipeline so you can

443
00:16:04,720 --> 00:16:09,839
say like okay generate me the xml for

444
00:16:06,560 --> 00:16:13,518
this run for this for this kernel turbo

445
00:16:09,839 --> 00:16:17,440
uh for the upstream tree ar-64

446
00:16:13,519 --> 00:16:18,880
with this patch and highlight the output

447
00:16:17,440 --> 00:16:20,880
and it would look something like this

448
00:16:18,880 --> 00:16:22,639
and it goes on and on and on i'm

449
00:16:20,880 --> 00:16:24,639
not going to bore you with those details

450
00:16:22,639 --> 00:16:26,320
these are this is the input to beaker

451
00:16:24,639 --> 00:16:28,800
and sane

452
00:16:26,320 --> 00:16:31,279
how to run it and where to run even in

453
00:16:28,800 --> 00:16:34,319
which order

454
00:16:31,279 --> 00:16:36,560
uh so going to beaker it's a big system

455
00:16:34,320 --> 00:16:38,000
which maintains inventory for the

456
00:16:36,560 --> 00:16:39,359
hardware including down to the

457
00:16:38,000 --> 00:16:43,040
components

458
00:16:39,360 --> 00:16:44,880
lets you match that hardware has

459
00:16:43,040 --> 00:16:46,800
access control like particular groups

460
00:16:44,880 --> 00:16:49,360
that have access to this hardware

461
00:16:46,800 --> 00:16:50,560
those to this hardware and for example

462
00:16:49,360 --> 00:16:52,160
some

463
00:16:50,560 --> 00:16:53,680
nda hardware could be there and

464
00:16:52,160 --> 00:16:57,439
protected

465
00:16:53,680 --> 00:16:58,560
uh it also pro does the provisioning and

466
00:16:57,440 --> 00:17:01,519
uh

467
00:16:58,560 --> 00:17:03,680
boots up the machines installs the

468
00:17:01,519 --> 00:17:05,520
operating system

469
00:17:03,680 --> 00:17:06,799
from scratch using an account normally

470
00:17:05,520 --> 00:17:08,400
because we don't

471
00:17:06,799 --> 00:17:10,720
support running from images because

472
00:17:08,400 --> 00:17:12,400
that's that's hard to do and uh we are

473
00:17:10,720 --> 00:17:14,799
distribution so we have to test the

474
00:17:12,400 --> 00:17:18,000
whole distribution from install

475
00:17:14,799 --> 00:17:20,160
uh so

476
00:17:18,000 --> 00:17:22,959
it installs everything it talks to the

477
00:17:20,160 --> 00:17:25,199
test harness extracts test results and

478
00:17:22,959 --> 00:17:26,000
things like that and um looks after the

479
00:17:25,199 --> 00:17:28,480
machine so that

480
00:17:26,000 --> 00:17:30,000
if it does lock up it then it releases

481
00:17:28,480 --> 00:17:33,039
the machine and

482
00:17:30,000 --> 00:17:36,720
erases everything so it could be

483
00:17:33,039 --> 00:17:38,480
like the system inventory we can find of

484
00:17:36,720 --> 00:17:40,559
those machines like these are not very

485
00:17:38,480 --> 00:17:43,840
useful right now this is titanium

486
00:17:40,559 --> 00:17:45,440
we still have those uh you can go into

487
00:17:43,840 --> 00:17:47,360
machine and take a look at the details

488
00:17:45,440 --> 00:17:47,919
like this is this is just one tab about

489
00:17:47,360 --> 00:17:50,799
the

490
00:17:47,919 --> 00:17:52,240
host information there's the cpu in for

491
00:17:50,799 --> 00:17:55,918
storage

492
00:17:52,240 --> 00:17:58,720
uh peripherals things like that

493
00:17:55,919 --> 00:18:01,039
and this is an example of some of our

494
00:17:58,720 --> 00:18:03,760
jobs running for

495
00:18:01,039 --> 00:18:04,720
a stable repository of the linux kernel

496
00:18:03,760 --> 00:18:06,320
uh

497
00:18:04,720 --> 00:18:07,760
this one job is just for one

498
00:18:06,320 --> 00:18:10,559
architecture

499
00:18:07,760 --> 00:18:11,679
and it has four hosts and uh here's an

500
00:18:10,559 --> 00:18:14,240
example of one host

501
00:18:11,679 --> 00:18:16,160
executing those tests this is a bigger

502
00:18:14,240 --> 00:18:19,840
ui

503
00:18:16,160 --> 00:18:19,840
this is a bunch of tests there

504
00:18:20,400 --> 00:18:24,799
further on uh now we're approaching the

505
00:18:22,960 --> 00:18:27,200
user visible stuff so

506
00:18:24,799 --> 00:18:29,039
we have a reporter which watches over

507
00:18:27,200 --> 00:18:31,039
the pipelines and

508
00:18:29,039 --> 00:18:32,480
checks which stage they're on which job

509
00:18:31,039 --> 00:18:35,039
they're approaching

510
00:18:32,480 --> 00:18:35,919
and sends the email reports to

511
00:18:35,039 --> 00:18:39,039
developers so

512
00:18:35,919 --> 00:18:41,840
whoever is interested

513
00:18:39,039 --> 00:18:43,360
and sometimes it can send an early email

514
00:18:41,840 --> 00:18:44,879
saying like okay you ever started this

515
00:18:43,360 --> 00:18:48,240
test and like

516
00:18:44,880 --> 00:18:51,679
watch out or where you did the test and

517
00:18:48,240 --> 00:18:53,600
or something failed in the pipeline

518
00:18:51,679 --> 00:18:55,840
so there's an example of a successful

519
00:18:53,600 --> 00:18:59,039
report that was sent to

520
00:18:55,840 --> 00:19:01,600
stable mail list here's the

521
00:18:59,039 --> 00:19:03,919
it starts with the same like we took

522
00:19:01,600 --> 00:19:06,799
this repo we took this commit and

523
00:19:03,919 --> 00:19:07,120
there's the summary everything went fine

524
00:19:06,799 --> 00:19:09,679
and

525
00:19:07,120 --> 00:19:11,760
uh we were actually and use those

526
00:19:09,679 --> 00:19:14,160
commands

527
00:19:11,760 --> 00:19:15,720
and then we ran them on these hosts like

528
00:19:14,160 --> 00:19:20,240
these architectures they are

529
00:19:15,720 --> 00:19:25,200
arc64 first host second host ppc64

530
00:19:20,240 --> 00:19:29,039
two hosts x86 x86 got more hosts

531
00:19:25,200 --> 00:19:32,320
for hosts and we also have a notion of

532
00:19:29,039 --> 00:19:34,799
wave wave tests uh

533
00:19:32,320 --> 00:19:37,520
a test which you mark in that kpdb and

534
00:19:34,799 --> 00:19:40,559
saying this test is weight which means

535
00:19:37,520 --> 00:19:42,879
run this test as normal maybe at the end

536
00:19:40,559 --> 00:19:44,480
of the run but ignore the result

537
00:19:42,880 --> 00:19:46,240
and don't take it into account when

538
00:19:44,480 --> 00:19:47,760
giving a verdict

539
00:19:46,240 --> 00:19:49,280
whether it failed or not we say we

540
00:19:47,760 --> 00:19:52,400
ignore it

541
00:19:49,280 --> 00:19:53,840
and we use this to test it

542
00:19:52,400 --> 00:19:56,960
to test the tests which were just

543
00:19:53,840 --> 00:19:58,720
introduced into the system or were being

544
00:19:56,960 --> 00:20:00,880
fixed so that we can track like how are

545
00:19:58,720 --> 00:20:01,280
they performing like are they doing okay

546
00:20:00,880 --> 00:20:03,039
and

547
00:20:01,280 --> 00:20:04,720
and their test maintainer can look after

548
00:20:03,039 --> 00:20:06,720
it until it stabilizes then we remove

549
00:20:04,720 --> 00:20:08,960
the wave status

550
00:20:06,720 --> 00:20:10,559
and this is done manually because tests

551
00:20:08,960 --> 00:20:12,720
are different you have to look after

552
00:20:10,559 --> 00:20:16,080
them

553
00:20:12,720 --> 00:20:17,679
uh and that's that's an example of

554
00:20:16,080 --> 00:20:19,678
report that we send up

555
00:20:17,679 --> 00:20:21,520
upstream our internal reports are a

556
00:20:19,679 --> 00:20:22,159
little more elaborate you get to see

557
00:20:21,520 --> 00:20:24,720
actually

558
00:20:22,159 --> 00:20:26,400
links to the bigger results and explore

559
00:20:24,720 --> 00:20:30,080
the logs and everything

560
00:20:26,400 --> 00:20:32,960
but those tests actually have

561
00:20:30,080 --> 00:20:33,760
yeah yeah artifacts there's a blue link

562
00:20:32,960 --> 00:20:37,200
there

563
00:20:33,760 --> 00:20:38,080
these contain the binaries config files

564
00:20:37,200 --> 00:20:41,600
and logs

565
00:20:38,080 --> 00:20:43,030
things like that so

566
00:20:41,600 --> 00:20:45,360
and then finally

567
00:20:43,030 --> 00:20:48,720
[Music]

568
00:20:45,360 --> 00:20:51,199
then finally we have the data warehouse

569
00:20:48,720 --> 00:20:51,840
it's a it's a system which uses positive

570
00:20:51,200 --> 00:20:54,400
sql

571
00:20:51,840 --> 00:20:54,399
and collects

572
00:20:56,799 --> 00:21:00,960
all the information about all around so

573
00:20:58,720 --> 00:21:02,799
also similar to reporter and

574
00:21:00,960 --> 00:21:04,240
this kind of application of the effort

575
00:21:02,799 --> 00:21:05,520
at this moment but we are working on

576
00:21:04,240 --> 00:21:07,280
that

577
00:21:05,520 --> 00:21:08,879
uh so it puts you so where all the jobs

578
00:21:07,280 --> 00:21:10,720
and collective information like how it

579
00:21:08,880 --> 00:21:15,120
went and what's the status and

580
00:21:10,720 --> 00:21:16,559
uh which tests run and there is a web ui

581
00:21:15,120 --> 00:21:18,158
which looks something like this and

582
00:21:16,559 --> 00:21:21,360
provides statistics how much

583
00:21:18,159 --> 00:21:24,000
how much we failed how much we succeeded

584
00:21:21,360 --> 00:21:26,158
as pipelines and various statuses this

585
00:21:24,000 --> 00:21:27,039
has been pulled like from gitlab using

586
00:21:26,159 --> 00:21:30,720
the

587
00:21:27,039 --> 00:21:33,120
gitlab api and there's a particular

588
00:21:30,720 --> 00:21:34,820
pipeline

589
00:21:33,120 --> 00:21:36,879
and listing all the tests and

590
00:21:34,820 --> 00:21:40,240
[Music]

591
00:21:36,880 --> 00:21:43,600
and all the hosts and you can go and see

592
00:21:40,240 --> 00:21:46,400
the results in the in beaker how it went

593
00:21:43,600 --> 00:21:48,320
and we maintained the test statistics

594
00:21:46,400 --> 00:21:50,240
how tests were failing or passing

595
00:21:48,320 --> 00:21:52,000
for example for for exactly for the

596
00:21:50,240 --> 00:21:53,679
purposes of deciding like

597
00:21:52,000 --> 00:21:55,200
when to waive the test if it's been

598
00:21:53,679 --> 00:21:56,960
doing bad and then send it back to the

599
00:21:55,200 --> 00:22:00,000
maintainer and say like okay

600
00:21:56,960 --> 00:22:02,880
deal with it or we can uh actually take

601
00:22:00,000 --> 00:22:04,960
it out of wave state if it's doing okay

602
00:22:02,880 --> 00:22:06,400
and same for hosts like if some hosts

603
00:22:04,960 --> 00:22:06,960
are misbehaving and bigger and that's a

604
00:22:06,400 --> 00:22:08,880
problem

605
00:22:06,960 --> 00:22:11,120
because there are just so damn many

606
00:22:08,880 --> 00:22:14,000
hosts that they break and

607
00:22:11,120 --> 00:22:15,760
you have to watch out and they host

608
00:22:14,000 --> 00:22:17,520
maintainer like whoever maintains that

609
00:22:15,760 --> 00:22:18,640
host there they don't have time to look

610
00:22:17,520 --> 00:22:20,639
after it so we

611
00:22:18,640 --> 00:22:22,720
look at those and we say okay this this

612
00:22:20,640 --> 00:22:24,720
host should be excluded

613
00:22:22,720 --> 00:22:26,799
from the runs and the ad like don't run

614
00:22:24,720 --> 00:22:30,320
on that host

615
00:22:26,799 --> 00:22:33,440
um so finally

616
00:22:30,320 --> 00:22:34,399
the title of this talk no not yet this

617
00:22:33,440 --> 00:22:38,559
actually concerns

618
00:22:34,400 --> 00:22:40,640
guillaume stock uh so

619
00:22:38,559 --> 00:22:43,918
there is this thing you probably seen it

620
00:22:40,640 --> 00:22:48,240
at the last slide it's the kernelci.org

621
00:22:43,919 --> 00:22:50,720
and they run lots of tests and

622
00:22:48,240 --> 00:22:52,480
they were recently approved as the

623
00:22:50,720 --> 00:22:54,000
accepted as a links foundation project

624
00:22:52,480 --> 00:22:57,039
to advance the state of kernel

625
00:22:54,000 --> 00:22:59,679
ci and they joined that effort and right

626
00:22:57,039 --> 00:23:02,080
now we're working on a

627
00:22:59,679 --> 00:23:02,880
database and the system used to

628
00:23:02,080 --> 00:23:04,960
aggregate

629
00:23:02,880 --> 00:23:07,280
tested information from various ci

630
00:23:04,960 --> 00:23:09,760
systems

631
00:23:07,280 --> 00:23:12,240
so that at the ultimate goal so that

632
00:23:09,760 --> 00:23:15,919
there is a single place to go and check

633
00:23:12,240 --> 00:23:19,039
kernel ci results from from all the from

634
00:23:15,919 --> 00:23:21,120
whoever runs those tests

635
00:23:19,039 --> 00:23:23,200
and so that the developers get on a

636
00:23:21,120 --> 00:23:23,678
single email with those results and not

637
00:23:23,200 --> 00:23:26,960
just

638
00:23:23,679 --> 00:23:29,280
five emails from everyone right now

639
00:23:26,960 --> 00:23:30,080
this is mostly the kernel ci folks and

640
00:23:29,280 --> 00:23:33,360
uh

641
00:23:30,080 --> 00:23:35,678
and us but others are joining hopefully

642
00:23:33,360 --> 00:23:37,918
soon we start aggregating more data but

643
00:23:35,679 --> 00:23:39,679
we already have a tool

644
00:23:37,919 --> 00:23:41,279
uh well you can take a look like how

645
00:23:39,679 --> 00:23:42,559
this looks i don't know if the um showed

646
00:23:41,279 --> 00:23:44,559
this but

647
00:23:42,559 --> 00:23:45,600
this is an example of how test reports

648
00:23:44,559 --> 00:23:49,039
like top level

649
00:23:45,600 --> 00:23:53,039
could look there so we took a google

650
00:23:49,039 --> 00:23:54,400
google bigquery system for storing those

651
00:23:53,039 --> 00:23:57,440
results so they are more readily

652
00:23:54,400 --> 00:23:57,440
publicly available

653
00:23:58,400 --> 00:24:02,559
so that people can go and explore the

654
00:24:00,000 --> 00:24:02,559
data and

655
00:24:02,640 --> 00:24:06,559
and see how how kernel is doing and do

656
00:24:06,159 --> 00:24:09,200
all

657
00:24:06,559 --> 00:24:11,120
research if they need to so this is uh

658
00:24:09,200 --> 00:24:14,480
this is our repo with the um

659
00:24:11,120 --> 00:24:15,918
with the code for that and

660
00:24:14,480 --> 00:24:17,679
it looks something like this when it's

661
00:24:15,919 --> 00:24:19,520
pushing and it's the data

662
00:24:17,679 --> 00:24:20,720
and we are working on a dashboard to

663
00:24:19,520 --> 00:24:22,240
show this off and

664
00:24:20,720 --> 00:24:24,400
the provider develops this is very

665
00:24:22,240 --> 00:24:26,880
rudimentary at the moment

666
00:24:24,400 --> 00:24:28,240
so finally the interesting part i took a

667
00:24:26,880 --> 00:24:31,600
little while

668
00:24:28,240 --> 00:24:34,640
so we store our

669
00:24:31,600 --> 00:24:36,158
our c pipeline inside the yum inside

670
00:24:34,640 --> 00:24:38,640
yaml

671
00:24:36,159 --> 00:24:39,520
but we store it in separate repos

672
00:24:38,640 --> 00:24:43,279
because

673
00:24:39,520 --> 00:24:46,799
of the way we trigger those so

674
00:24:43,279 --> 00:24:50,000
to trigger gitlab actually doing commits

675
00:24:46,799 --> 00:24:51,760
to the repo and

676
00:24:50,000 --> 00:24:53,679
i'll show that in a moment so basically

677
00:24:51,760 --> 00:24:56,960
these are two repos

678
00:24:53,679 --> 00:24:58,840
uh and one the drip on the left

679
00:24:56,960 --> 00:25:00,240
is only including pieces from the other

680
00:24:58,840 --> 00:25:03,279
ipo

681
00:25:00,240 --> 00:25:05,520
and this lets us to

682
00:25:03,279 --> 00:25:06,559
let the triggers do commits with the

683
00:25:05,520 --> 00:25:09,440
information about

684
00:25:06,559 --> 00:25:11,120
what we want to test inside that repo

685
00:25:09,440 --> 00:25:13,200
and we need two ripples so that

686
00:25:11,120 --> 00:25:16,399
these commits don't interfere with the

687
00:25:13,200 --> 00:25:16,400
development commits we have

688
00:25:16,559 --> 00:25:19,600
so because there's like every time you

689
00:25:18,320 --> 00:25:20,158
want to test something there is a new

690
00:25:19,600 --> 00:25:21,678
commit

691
00:25:20,159 --> 00:25:23,200
and that's an empty commit and it

692
00:25:21,679 --> 00:25:24,960
doesn't have any data in it

693
00:25:23,200 --> 00:25:28,080
so we use it just to identify the

694
00:25:24,960 --> 00:25:30,960
particular pipeline and get lab view

695
00:25:28,080 --> 00:25:33,279
so for example the baseline trigger like

696
00:25:30,960 --> 00:25:35,279
the git repo trigger comes in and does

697
00:25:33,279 --> 00:25:37,039
and sees that there are two changes in

698
00:25:35,279 --> 00:25:38,080
the like in one group and another and

699
00:25:37,039 --> 00:25:41,520
thus commits to

700
00:25:38,080 --> 00:25:43,760
separate branches in that repo uh

701
00:25:41,520 --> 00:25:45,520
this trigger actually is retired now but

702
00:25:43,760 --> 00:25:47,120
it was quite kind of interesting so it

703
00:25:45,520 --> 00:25:48,799
also doesn't checks and finds something

704
00:25:47,120 --> 00:25:51,360
and does the commit

705
00:25:48,799 --> 00:25:53,520
there's the trigger that finds patches

706
00:25:51,360 --> 00:25:56,158
and does commit in that the same

707
00:25:53,520 --> 00:25:56,799
same branch and finally the github board

708
00:25:56,159 --> 00:25:58,960
comes and

709
00:25:56,799 --> 00:26:00,320
finds like okay there is a there's a new

710
00:25:58,960 --> 00:26:01,440
merch request and i put it

711
00:26:00,320 --> 00:26:03,600
in all the branches that we're

712
00:26:01,440 --> 00:26:05,279
interested in testing

713
00:26:03,600 --> 00:26:07,279
uh and it might look like this for

714
00:26:05,279 --> 00:26:08,080
example the stable branch has those

715
00:26:07,279 --> 00:26:11,200
commits

716
00:26:08,080 --> 00:26:15,678
all with the all the pipelines running

717
00:26:11,200 --> 00:26:15,679
and this branch has its own commits here

718
00:26:15,760 --> 00:26:19,200
and can the commits can look like this

719
00:26:18,000 --> 00:26:20,799
so there is data

720
00:26:19,200 --> 00:26:22,640
there but it's not for gitlab's

721
00:26:20,799 --> 00:26:23,440
consumption only for us as a debugging

722
00:26:22,640 --> 00:26:24,960
like this says

723
00:26:23,440 --> 00:26:26,159
all the variables that we put in there

724
00:26:24,960 --> 00:26:27,520
all the descriptions like what we are

725
00:26:26,159 --> 00:26:29,919
triggering on

726
00:26:27,520 --> 00:26:31,679
things like that this one is huge and

727
00:26:29,919 --> 00:26:34,960
this one is big as well it's

728
00:26:31,679 --> 00:26:40,240
abbreviated so

729
00:26:34,960 --> 00:26:40,240
we use we use a lot of gitlab extends

730
00:26:41,200 --> 00:26:47,919
property which lets us separate the

731
00:26:44,559 --> 00:26:48,559
general pipeline into like the pipeline

732
00:26:47,919 --> 00:26:52,480
into the

733
00:26:48,559 --> 00:26:55,760
menu of jobs and stages

734
00:26:52,480 --> 00:26:57,440
and into uh

735
00:26:55,760 --> 00:26:59,039
three specific information like or

736
00:26:57,440 --> 00:27:00,880
pipeline specific information this is

737
00:26:59,039 --> 00:27:03,600
our shortest pipeline

738
00:27:00,880 --> 00:27:05,440
and that says okay pick those four

739
00:27:03,600 --> 00:27:07,120
stages from the from the pipeline and we

740
00:27:05,440 --> 00:27:10,720
have

741
00:27:07,120 --> 00:27:13,760
10 maybe or or more

742
00:27:10,720 --> 00:27:16,640
and this says okay uh

743
00:27:13,760 --> 00:27:18,320
sorry pic pick this uh prepare step

744
00:27:16,640 --> 00:27:19,679
where we download all the stuff

745
00:27:18,320 --> 00:27:21,600
for the for the execution all the

746
00:27:19,679 --> 00:27:23,919
dependencies and this says like this is

747
00:27:21,600 --> 00:27:27,439
the prepare and this is stage prepare

748
00:27:23,919 --> 00:27:30,720
and this one we say okay again

749
00:27:27,440 --> 00:27:33,919
uh pick this uh

750
00:27:30,720 --> 00:27:37,520
create repo x8664 and extend extended

751
00:27:33,919 --> 00:27:39,760
and this is a one of those same

752
00:27:37,520 --> 00:27:41,918
okay take this repo take this template

753
00:27:39,760 --> 00:27:44,158
of the job and

754
00:27:41,919 --> 00:27:45,520
a bunch of variables and conditions and

755
00:27:44,159 --> 00:27:47,039
create a

756
00:27:45,520 --> 00:27:48,720
create a particular job for this

757
00:27:47,039 --> 00:27:51,760
specific pipeline

758
00:27:48,720 --> 00:27:52,880
here and this time we are using the

759
00:27:51,760 --> 00:27:56,480
merge keys

760
00:27:52,880 --> 00:27:58,080
to merge those so we use an extend here

761
00:27:56,480 --> 00:28:00,720
extends here because this is a separate

762
00:27:58,080 --> 00:28:02,559
yaml file so we cannot use merge keys

763
00:28:00,720 --> 00:28:04,799
and we use merge keys here it's the same

764
00:28:02,559 --> 00:28:08,480
uh big one big ass

765
00:28:04,799 --> 00:28:12,000
yaml file there and this is would be uh

766
00:28:08,480 --> 00:28:15,120
create repo creating a rpm repository

767
00:28:12,000 --> 00:28:15,120
with build results for

768
00:28:15,200 --> 00:28:19,919
for testing which are then installed in

769
00:28:17,840 --> 00:28:21,918
beaker

770
00:28:19,919 --> 00:28:23,360
the next stage is uh composed a little

771
00:28:21,919 --> 00:28:24,000
differently so we have a huge script

772
00:28:23,360 --> 00:28:27,520
which is split

773
00:28:24,000 --> 00:28:30,080
into a few yaml objects

774
00:28:27,520 --> 00:28:32,720
and finally the last stage looks similar

775
00:28:30,080 --> 00:28:32,720
to that and

776
00:28:33,200 --> 00:28:37,279
so on so we have pipelines which are

777
00:28:35,279 --> 00:28:41,120
much longer than that

778
00:28:37,279 --> 00:28:44,559
and more involved so

779
00:28:41,120 --> 00:28:47,760
why we took gitlab

780
00:28:44,559 --> 00:28:51,760
well we started out with jenkins so

781
00:28:47,760 --> 00:28:54,320
we had a python script controlling

782
00:28:51,760 --> 00:28:55,440
jenkins which had a job written in

783
00:28:54,320 --> 00:28:58,000
groovy

784
00:28:55,440 --> 00:28:59,440
which controlled another python script

785
00:28:58,000 --> 00:29:01,279
which

786
00:28:59,440 --> 00:29:03,360
checked out the kernel and built it and

787
00:29:01,279 --> 00:29:06,480
then fed it off to beaker

788
00:29:03,360 --> 00:29:09,279
so that was not very reliable

789
00:29:06,480 --> 00:29:09,279
hard to debug

790
00:29:10,080 --> 00:29:16,399
hard to understand hard to maintain as a

791
00:29:13,360 --> 00:29:18,879
as a contrast with gitlab we had

792
00:29:16,399 --> 00:29:20,000
a relatively straightforward system you

793
00:29:18,880 --> 00:29:21,679
could keep everything

794
00:29:20,000 --> 00:29:23,279
in the git repo and keep changing it

795
00:29:21,679 --> 00:29:26,640
faster

796
00:29:23,279 --> 00:29:29,600
and well still it's it's more reliable

797
00:29:26,640 --> 00:29:32,880
than jenkins for us

798
00:29:29,600 --> 00:29:35,039
and i hope michael

799
00:29:32,880 --> 00:29:37,600
is able to say something we have 10

800
00:29:35,039 --> 00:29:37,600
minutes left

801
00:29:38,840 --> 00:29:41,840
okay

802
00:29:42,799 --> 00:29:46,480
so now you will hear me complaining

803
00:29:44,960 --> 00:29:49,840
about gitlab but

804
00:29:46,480 --> 00:29:52,960
um so um

805
00:29:49,840 --> 00:29:54,480
yeah i figure so

806
00:29:52,960 --> 00:29:56,559
um i don't know how many people use

807
00:29:54,480 --> 00:29:58,320
gitlab here

808
00:29:56,559 --> 00:29:59,760
yeah and how many people have used

809
00:29:58,320 --> 00:30:02,639
github

810
00:29:59,760 --> 00:30:04,080
yeah okay so it's very very familiar

811
00:30:02,640 --> 00:30:06,240
system so it's it's

812
00:30:04,080 --> 00:30:08,000
nicely documented it has a huge api

813
00:30:06,240 --> 00:30:10,000
surface people are familiar with

814
00:30:08,000 --> 00:30:11,760
it so if i say gitlab people actually

815
00:30:10,000 --> 00:30:13,520
know what i'm talking about if i

816
00:30:11,760 --> 00:30:15,039
mention some other ci technology then

817
00:30:13,520 --> 00:30:15,679
people look at me like this if i mention

818
00:30:15,039 --> 00:30:18,879
jenkins

819
00:30:15,679 --> 00:30:20,559
people just go away

820
00:30:18,880 --> 00:30:22,480
and say like no you don't want to be on

821
00:30:20,559 --> 00:30:23,840
your team hopefully there's nobody from

822
00:30:22,480 --> 00:30:26,880
jenkins here

823
00:30:23,840 --> 00:30:28,639
sorry um

824
00:30:26,880 --> 00:30:30,080
but then we are actually testing kernels

825
00:30:28,640 --> 00:30:32,000
so that's that's uh

826
00:30:30,080 --> 00:30:34,080
quite similar to other software to test

827
00:30:32,000 --> 00:30:36,080
in some aspects but follow

828
00:30:34,080 --> 00:30:38,960
aspects especially like testing that

829
00:30:36,080 --> 00:30:40,639
there are some interesting issues that

830
00:30:38,960 --> 00:30:42,000
you will see there so one is that

831
00:30:40,640 --> 00:30:44,480
actually um

832
00:30:42,000 --> 00:30:46,960
github gitlab most of these general ci

833
00:30:44,480 --> 00:30:48,880
systems don't have any concept of a

834
00:30:46,960 --> 00:30:50,399
failed pipeline because of

835
00:30:48,880 --> 00:30:51,200
infrastructure issues so if you look

836
00:30:50,399 --> 00:30:53,600
into what

837
00:30:51,200 --> 00:30:54,320
distributions do for gating most of

838
00:30:53,600 --> 00:30:57,600
those

839
00:30:54,320 --> 00:30:59,039
actually have a test fair thing maintain

840
00:30:57,600 --> 00:30:59,519
or fix it and then they have something

841
00:30:59,039 --> 00:31:02,640
like

842
00:30:59,519 --> 00:31:04,399
oh our infrastructure failed or our test

843
00:31:02,640 --> 00:31:05,840
system and then it's actually for

844
00:31:04,399 --> 00:31:08,158
somebody else to fix

845
00:31:05,840 --> 00:31:09,918
now most of you might know that kernel

846
00:31:08,159 --> 00:31:11,760
maintainers don't react too well if you

847
00:31:09,919 --> 00:31:12,480
email them without any good reasons or

848
00:31:11,760 --> 00:31:14,080
if you

849
00:31:12,480 --> 00:31:16,159
email the linux kernel list with

850
00:31:14,080 --> 00:31:16,720
infrastructure issues they get pissed

851
00:31:16,159 --> 00:31:19,120
quite

852
00:31:16,720 --> 00:31:19,840
easily so we really want to avoid that

853
00:31:19,120 --> 00:31:21,360
and

854
00:31:19,840 --> 00:31:22,879
that is not very easy so you actually

855
00:31:21,360 --> 00:31:23,918
need to put stuff around gitlab to make

856
00:31:22,880 --> 00:31:25,440
that happen

857
00:31:23,919 --> 00:31:27,440
on the slide on the left you see what

858
00:31:25,440 --> 00:31:30,000
the test system actually uh

859
00:31:27,440 --> 00:31:32,000
gives you which is speaker in our case

860
00:31:30,000 --> 00:31:33,919
and then there's this

861
00:31:32,000 --> 00:31:35,840
this one missing so a panic code in

862
00:31:33,919 --> 00:31:36,960
because actually the hardware messed up

863
00:31:35,840 --> 00:31:38,639
the kernel didn't

864
00:31:36,960 --> 00:31:40,240
boot but for whatever reason or

865
00:31:38,640 --> 00:31:42,240
distribution didn't boot

866
00:31:40,240 --> 00:31:44,399
um or there was some power surge or

867
00:31:42,240 --> 00:31:46,960
whatever or actually we messed up uh

868
00:31:44,399 --> 00:31:48,799
or our general infrastructure or had the

869
00:31:46,960 --> 00:31:50,799
networking issues stuff like that

870
00:31:48,799 --> 00:31:52,399
um and that's that's not in the system

871
00:31:50,799 --> 00:31:53,679
might never get in there because it's

872
00:31:52,399 --> 00:31:54,639
not something that you would normally

873
00:31:53,679 --> 00:31:57,919
have

874
00:31:54,640 --> 00:32:00,240
for your average yeah sorry

875
00:31:57,919 --> 00:32:02,159
so the one one consequence of that is

876
00:32:00,240 --> 00:32:03,919
that

877
00:32:02,159 --> 00:32:05,440
yeah okay sorry ah this is the line

878
00:32:03,919 --> 00:32:09,440
sorry so

879
00:32:05,440 --> 00:32:12,240
uh the thing is

880
00:32:09,440 --> 00:32:12,640
gitlab has infrastructure issues good

881
00:32:12,240 --> 00:32:14,480
lab

882
00:32:12,640 --> 00:32:15,760
good lab ci has infrastructure issues

883
00:32:14,480 --> 00:32:17,200
and you can select okay

884
00:32:15,760 --> 00:32:19,600
you can just start on this failure on

885
00:32:17,200 --> 00:32:21,519
this video on this failure

886
00:32:19,600 --> 00:32:23,519
but it actually doesn't matter to me

887
00:32:21,519 --> 00:32:24,080
which failure the elaborate starts on

888
00:32:23,519 --> 00:32:25,919
because

889
00:32:24,080 --> 00:32:27,439
it's get left sting it can fail on

890
00:32:25,919 --> 00:32:29,440
various things

891
00:32:27,440 --> 00:32:31,360
but it doesn't allow me to tell like

892
00:32:29,440 --> 00:32:32,559
okay restart on this issue or on this

893
00:32:31,360 --> 00:32:35,519
issue i can only say

894
00:32:32,559 --> 00:32:36,879
test passed or failed and that probably

895
00:32:35,519 --> 00:32:39,519
comes from

896
00:32:36,880 --> 00:32:40,399
from where gitlab is intended to use to

897
00:32:39,519 --> 00:32:42,880
be used in

898
00:32:40,399 --> 00:32:44,399
it's like a test ran and nothing can

899
00:32:42,880 --> 00:32:46,399
happen it's just running tests on

900
00:32:44,399 --> 00:32:48,239
simple software but for us if you

901
00:32:46,399 --> 00:32:48,719
remember that that job like just one

902
00:32:48,240 --> 00:32:51,919
interest

903
00:32:48,720 --> 00:32:53,519
just one architecture four hosts for one

904
00:32:51,919 --> 00:32:56,080
architecture and there are like

905
00:32:53,519 --> 00:32:58,000
two three four architectures more than

906
00:32:56,080 --> 00:33:01,039
that

907
00:32:58,000 --> 00:33:02,720
and what gitlab does is they just just

908
00:33:01,039 --> 00:33:05,600
kill us

909
00:33:02,720 --> 00:33:06,159
yeah and that that stays there and

910
00:33:05,600 --> 00:33:07,678
that's a

911
00:33:06,159 --> 00:33:09,600
separate slide i'm confusing the issues

912
00:33:07,679 --> 00:33:11,120
but basically we cannot tell gitlab okay

913
00:33:09,600 --> 00:33:13,039
we had infrastructure issue can you

914
00:33:11,120 --> 00:33:16,080
start

915
00:33:13,039 --> 00:33:16,080
that's a big deal for us

916
00:33:16,559 --> 00:33:20,080
so i mean there are more interesting

917
00:33:18,480 --> 00:33:21,919
things um

918
00:33:20,080 --> 00:33:23,840
we actually that's that's uh from the

919
00:33:21,919 --> 00:33:25,840
beginning of january we are producing 30

920
00:33:23,840 --> 00:33:28,080
gigabytes of artifacts a day

921
00:33:25,840 --> 00:33:28,959
like kernel builds rpm builds all kinds

922
00:33:28,080 --> 00:33:31,120
of stuff

923
00:33:28,960 --> 00:33:32,559
um and if you use a shared gitlab

924
00:33:31,120 --> 00:33:34,479
infrastruc

925
00:33:32,559 --> 00:33:35,760
shared gitlab instance like gitlab.com

926
00:33:34,480 --> 00:33:38,559
or whatever have you

927
00:33:35,760 --> 00:33:39,120
in red hat we have a couple of those

928
00:33:38,559 --> 00:33:42,639
people

929
00:33:39,120 --> 00:33:44,479
might not have the storage available

930
00:33:42,640 --> 00:33:46,399
so you would want to store it outside

931
00:33:44,480 --> 00:33:47,919
like in s3 if you build in the cloud you

932
00:33:46,399 --> 00:33:49,279
want to keep it there

933
00:33:47,919 --> 00:33:51,200
you don't want to incur the transfer

934
00:33:49,279 --> 00:33:52,559
costs moving it in and out

935
00:33:51,200 --> 00:33:54,640
which is not possible at the moment in

936
00:33:52,559 --> 00:33:56,320
gitlab so you can configure per instance

937
00:33:54,640 --> 00:33:59,200
but not per project

938
00:33:56,320 --> 00:34:00,240
and it's it all goes on like these

939
00:33:59,200 --> 00:34:01,279
things so

940
00:34:00,240 --> 00:34:03,120
there are certain things where it

941
00:34:01,279 --> 00:34:03,519
doesn't really matter about kernel

942
00:34:03,120 --> 00:34:05,360
testing

943
00:34:03,519 --> 00:34:07,440
you try to work around it so it's

944
00:34:05,360 --> 00:34:09,279
possible but it gets more ugly

945
00:34:07,440 --> 00:34:10,560
so you can take a look at the code it's

946
00:34:09,280 --> 00:34:13,440
on gitlab uh

947
00:34:10,560 --> 00:34:14,159
don't don't blame us for however we did

948
00:34:13,440 --> 00:34:16,800
it

949
00:34:14,159 --> 00:34:18,560
um it's really hard to upgrade because

950
00:34:16,800 --> 00:34:21,359
if you have like a

951
00:34:18,560 --> 00:34:23,199
pipelines running for for a day um if

952
00:34:21,359 --> 00:34:25,359
you do an upgrade to get like one of the

953
00:34:23,199 --> 00:34:26,319
stop to accept jobs uh so then you don't

954
00:34:25,359 --> 00:34:28,879
get any builds uh

955
00:34:26,320 --> 00:34:29,599
any tests uh four day um you can work

956
00:34:28,879 --> 00:34:31,279
around that

957
00:34:29,599 --> 00:34:32,879
upgrade different runners at different

958
00:34:31,280 --> 00:34:35,839
times stuff like that

959
00:34:32,879 --> 00:34:35,839
um

960
00:34:37,839 --> 00:34:41,918
that's an interesting one most test

961
00:34:39,760 --> 00:34:42,530
systems don't expect the test to reboot

962
00:34:41,918 --> 00:34:45,649
so

963
00:34:42,530 --> 00:34:45,649
[Music]

964
00:34:45,839 --> 00:34:49,359
i don't know why but kernel tests

965
00:34:47,760 --> 00:34:50,000
actually reboot a couple of times it's

966
00:34:49,359 --> 00:34:51,119
like

967
00:34:50,000 --> 00:34:52,960
it's something that that kernel

968
00:34:51,119 --> 00:34:54,399
developers think is useful and so if you

969
00:34:52,960 --> 00:34:56,159
need to boot into your kernel but then

970
00:34:54,399 --> 00:34:57,118
you might also restart a couple of times

971
00:34:56,159 --> 00:34:59,680
in there

972
00:34:57,119 --> 00:35:01,200
so you can't really have your test

973
00:34:59,680 --> 00:35:04,319
harness

974
00:35:01,200 --> 00:35:06,078
like the gitlab part we have itself

975
00:35:04,320 --> 00:35:08,960
restarted so you need to have another

976
00:35:06,079 --> 00:35:12,480
indirection just start another vm

977
00:35:08,960 --> 00:35:13,359
or have the gitlab part outside of your

978
00:35:12,480 --> 00:35:14,800
testing system

979
00:35:13,359 --> 00:35:16,720
in this case speaker but otherwise you

980
00:35:14,800 --> 00:35:17,839
could just put it inside of your hot

981
00:35:16,720 --> 00:35:20,959
wallet

982
00:35:17,839 --> 00:35:20,960
which you can't do at the moment

983
00:35:21,359 --> 00:35:26,640
yeah maybe we stop here and

984
00:35:24,560 --> 00:35:29,279
take some questions otherwise i just

985
00:35:26,640 --> 00:35:34,799
complain about other

986
00:35:29,280 --> 00:35:34,800
let's take bugs for questions

987
00:35:35,040 --> 00:35:38,160
i don't know what kind of questions

988
00:35:39,280 --> 00:35:45,119
how much introducing all the ci speed up

989
00:35:42,400 --> 00:35:49,200
the process

990
00:35:45,119 --> 00:35:49,200
what how much time did you gain

991
00:35:49,440 --> 00:35:53,359
before you had it and now when you have

992
00:35:51,520 --> 00:35:56,160
it um

993
00:35:53,359 --> 00:35:56,480
now that the question is so the question

994
00:35:56,160 --> 00:35:58,399
is

995
00:35:56,480 --> 00:36:00,400
how much how much time do you actually

996
00:35:58,400 --> 00:36:02,880
actually gain from having ci

997
00:36:00,400 --> 00:36:04,320
and i think depending on who you ask

998
00:36:02,880 --> 00:36:06,160
there might be a different answer so

999
00:36:04,320 --> 00:36:07,839
developers might most likely say like it

1000
00:36:06,160 --> 00:36:09,200
doesn't help us at all in the beginning

1001
00:36:07,839 --> 00:36:10,240
especially now

1002
00:36:09,200 --> 00:36:12,640
where you might actually get

1003
00:36:10,240 --> 00:36:14,479
infrastructure issues giving you false

1004
00:36:12,640 --> 00:36:16,640
positives

1005
00:36:14,480 --> 00:36:17,760
but i think we find a couple of issues a

1006
00:36:16,640 --> 00:36:21,200
week

1007
00:36:17,760 --> 00:36:23,520
we're actually actually four maybe

1008
00:36:21,200 --> 00:36:24,960
four a week where kernel developers were

1009
00:36:23,520 --> 00:36:26,880
really sure that they got it right but

1010
00:36:24,960 --> 00:36:28,800
they didn't um

1011
00:36:26,880 --> 00:36:31,440
and that's that that could be patches

1012
00:36:28,800 --> 00:36:33,760
posted posted to the mail list

1013
00:36:31,440 --> 00:36:35,040
or could be something uh something

1014
00:36:33,760 --> 00:36:39,520
merged into stable

1015
00:36:35,040 --> 00:36:41,200
for example the stable linux

1016
00:36:39,520 --> 00:36:43,440
the the ultimate goal is actually to

1017
00:36:41,200 --> 00:36:47,118
free resources inside of rel

1018
00:36:43,440 --> 00:36:49,440
because uh upstream uh patches uh

1019
00:36:47,119 --> 00:36:51,200
pork so we want to provide feedback

1020
00:36:49,440 --> 00:36:53,280
outside of it it never actually goes

1021
00:36:51,200 --> 00:36:55,680
through the whole pipeline

1022
00:36:53,280 --> 00:36:57,280
now we only find out about it when it's

1023
00:36:55,680 --> 00:37:00,319
when it's already merged and

1024
00:36:57,280 --> 00:37:01,200
built into an rpm um the ultimate goal

1025
00:37:00,320 --> 00:37:03,359
is to to have

1026
00:37:01,200 --> 00:37:05,118
work done upstream which you most likely

1027
00:37:03,359 --> 00:37:08,480
said

1028
00:37:05,119 --> 00:37:09,359
okay um you were running jenkins before

1029
00:37:08,480 --> 00:37:11,839
you

1030
00:37:09,359 --> 00:37:11,839
migrated

1031
00:37:12,400 --> 00:37:16,079
migration and what friendly did you

1032
00:37:14,240 --> 00:37:22,479
apply like did you keep both instances

1033
00:37:16,079 --> 00:37:25,040
running at the same time we just

1034
00:37:22,480 --> 00:37:26,880
wrote everything and then switched yeah

1035
00:37:25,040 --> 00:37:30,000
the question was the question was

1036
00:37:26,880 --> 00:37:31,760
how painful the the migration was like

1037
00:37:30,000 --> 00:37:33,200
we took some of the tools that jenkins

1038
00:37:31,760 --> 00:37:35,359
was using

1039
00:37:33,200 --> 00:37:37,040
and we used them in the new pipeline but

1040
00:37:35,359 --> 00:37:40,400
we wrote the everything that

1041
00:37:37,040 --> 00:37:42,560
was in jenkins there because

1042
00:37:40,400 --> 00:37:44,160
you can't really you can't really run

1043
00:37:42,560 --> 00:37:46,320
that in gitlab

1044
00:37:44,160 --> 00:37:47,759
so we had to rewrite big part and we had

1045
00:37:46,320 --> 00:37:48,560
to write the triggers and things like

1046
00:37:47,760 --> 00:37:50,960
that we had

1047
00:37:48,560 --> 00:37:53,040
we replaced the separate tool which was

1048
00:37:50,960 --> 00:37:56,560
controlled in jenkins with those little

1049
00:37:53,040 --> 00:37:56,560
triggers that i showed you

1050
00:37:57,440 --> 00:38:00,320
any more questions

1051
00:38:02,839 --> 00:38:05,839
yes

1052
00:38:08,079 --> 00:38:12,079
the question was the question was uh is

1053
00:38:10,640 --> 00:38:12,960
gitlab working on those issues so there

1054
00:38:12,079 --> 00:38:16,160
is an issue

1055
00:38:12,960 --> 00:38:19,520
that particularly pisses me off is that

1056
00:38:16,160 --> 00:38:22,560
gitlab simply kills the runners

1057
00:38:19,520 --> 00:38:25,680
yeah yeah this one they simply kill the

1058
00:38:22,560 --> 00:38:25,680
runners with sick kill

1059
00:38:25,760 --> 00:38:29,040
so for us it's a it's a runner that's

1060
00:38:27,520 --> 00:38:32,240
controlling that bigger

1061
00:38:29,040 --> 00:38:34,400
bigger resources like this i don't know

1062
00:38:32,240 --> 00:38:37,200
10 hosts that are running those tests

1063
00:38:34,400 --> 00:38:39,359
for for hours

1064
00:38:37,200 --> 00:38:40,799
and we just forget about them because of

1065
00:38:39,359 --> 00:38:42,960
that like

1066
00:38:40,800 --> 00:38:45,440
gitlab just forgets like ah whatever and

1067
00:38:42,960 --> 00:38:48,560
that host is occupied for these hours

1068
00:38:45,440 --> 00:38:49,280
so we cannot clean up and this bug was

1069
00:38:48,560 --> 00:38:52,400
open

1070
00:38:49,280 --> 00:38:54,000
for years i think and they're promising

1071
00:38:52,400 --> 00:38:55,520
they will fix it soon so i hope they

1072
00:38:54,000 --> 00:38:57,760
will

1073
00:38:55,520 --> 00:39:08,480
there's somebody hoping okay our time is

1074
00:38:57,760 --> 00:39:08,480
up so catch us in there in the corridor

