1
00:00:05,040 --> 00:00:10,879
and the room is very full that's

2
00:00:07,359 --> 00:00:14,160
we're very glad to be here

3
00:00:10,880 --> 00:00:14,160
my name is emily

4
00:00:14,240 --> 00:00:17,520
yes and my colleague is frederick we

5
00:00:16,320 --> 00:00:19,119
only have one mic so we're going to

6
00:00:17,520 --> 00:00:22,880
switch in the middle sort of

7
00:00:19,119 --> 00:00:24,960
uh but let's get started uh

8
00:00:22,880 --> 00:00:26,080
i have an agenda here and at the

9
00:00:24,960 --> 00:00:29,119
beginning we see

10
00:00:26,080 --> 00:00:30,000
i planned to walk through the definition

11
00:00:29,119 --> 00:00:31,519
of a pipeline but

12
00:00:30,000 --> 00:00:33,200
considering the audience i think that's

13
00:00:31,519 --> 00:00:38,160
unnecessary

14
00:00:33,200 --> 00:00:38,160
so i'm going to skip that and

15
00:00:38,320 --> 00:00:44,559
me i'm coming from ericsson which is

16
00:00:42,399 --> 00:00:46,559
not open source of course it's a company

17
00:00:44,559 --> 00:00:49,360
but we do contribute to open source

18
00:00:46,559 --> 00:00:50,959
and that's why we're here today and i'd

19
00:00:49,360 --> 00:00:52,719
like to start off with describing what

20
00:00:50,960 --> 00:00:55,680
kind of challenges we've seen

21
00:00:52,719 --> 00:00:58,320
uh considering the communication uh

22
00:00:55,680 --> 00:01:01,039
between different cicd tools

23
00:00:58,320 --> 00:01:02,320
and then i'm going to present the way we

24
00:01:01,039 --> 00:01:04,320
solved it

25
00:01:02,320 --> 00:01:05,760
yes and i'm going to speak a little bit

26
00:01:04,319 --> 00:01:08,479
louder

27
00:01:05,760 --> 00:01:09,200
and also how we open sourced our

28
00:01:08,479 --> 00:01:13,200
solution

29
00:01:09,200 --> 00:01:16,720
and how frederick and his company axis

30
00:01:13,200 --> 00:01:16,720
started using the same solution

31
00:01:16,880 --> 00:01:22,960
so let's skip this part as promised

32
00:01:20,080 --> 00:01:24,640
and instead go straight to the

33
00:01:22,960 --> 00:01:26,320
communication challenges that we've seen

34
00:01:24,640 --> 00:01:28,479
at ericsson

35
00:01:26,320 --> 00:01:30,798
so first of all why does cyrix don't

36
00:01:28,479 --> 00:01:32,880
care about cicd

37
00:01:30,799 --> 00:01:33,840
well any company that produces software

38
00:01:32,880 --> 00:01:37,119
should care about

39
00:01:33,840 --> 00:01:38,960
ci cd obviously and

40
00:01:37,119 --> 00:01:40,799
we have a very complex environment we

41
00:01:38,960 --> 00:01:42,559
have a lot of different products going

42
00:01:40,799 --> 00:01:45,360
out to our customers

43
00:01:42,560 --> 00:01:46,960
and different configuration applied on

44
00:01:45,360 --> 00:01:49,360
top of them considering

45
00:01:46,960 --> 00:01:50,640
if it's going to be to customer a or if

46
00:01:49,360 --> 00:01:53,520
customer b wants them

47
00:01:50,640 --> 00:01:55,040
so and we have many different pipelines

48
00:01:53,520 --> 00:01:59,439
and different pipeline tools

49
00:01:55,040 --> 00:02:01,439
used to produce our software

50
00:01:59,439 --> 00:02:03,439
very often they're integrated into each

51
00:02:01,439 --> 00:02:05,439
other they're called connected pipelines

52
00:02:03,439 --> 00:02:08,399
and that's what we like to call them

53
00:02:05,439 --> 00:02:09,840
and i'll go through that what i mean by

54
00:02:08,399 --> 00:02:12,480
that later

55
00:02:09,840 --> 00:02:14,239
um we are a very large organization we

56
00:02:12,480 --> 00:02:15,519
have like hundreds of teams developing

57
00:02:14,239 --> 00:02:18,160
our products

58
00:02:15,520 --> 00:02:19,680
each one of them use different toolings

59
00:02:18,160 --> 00:02:23,040
and

60
00:02:19,680 --> 00:02:24,160
and the demands on traceability is very

61
00:02:23,040 --> 00:02:25,679
high

62
00:02:24,160 --> 00:02:28,239
we need to keep track of our software we

63
00:02:25,680 --> 00:02:28,800
need to go see which stages does it go

64
00:02:28,239 --> 00:02:32,879
through

65
00:02:28,800 --> 00:02:35,200
in in in the pipeline no matter if it's

66
00:02:32,879 --> 00:02:37,440
stops at delivery or if it goes all the

67
00:02:35,200 --> 00:02:40,238
way into deployment to customer networks

68
00:02:37,440 --> 00:02:42,800
we need to follow and see where does our

69
00:02:40,239 --> 00:02:44,800
software go

70
00:02:42,800 --> 00:02:46,959
we know we also need to be able to

71
00:02:44,800 --> 00:02:48,640
monitor it independent of whichever

72
00:02:46,959 --> 00:02:50,879
technology we use

73
00:02:48,640 --> 00:02:51,760
in the background we need to be able to

74
00:02:50,879 --> 00:02:55,200
keep track of the

75
00:02:51,760 --> 00:02:58,480
important kpis and

76
00:02:55,200 --> 00:03:02,319
i guess also visualize it in a good way

77
00:02:58,480 --> 00:03:02,319
and one visualization tool would be nice

78
00:03:03,040 --> 00:03:07,120
so i spoke about connected pipelines and

79
00:03:05,519 --> 00:03:09,440
what i mean by that is we usually

80
00:03:07,120 --> 00:03:11,680
integrate our products

81
00:03:09,440 --> 00:03:13,680
into each other sort of so they're

82
00:03:11,680 --> 00:03:15,360
hierarchies of products

83
00:03:13,680 --> 00:03:17,120
so you've got product a and b to the

84
00:03:15,360 --> 00:03:19,280
left here and they're produced in their

85
00:03:17,120 --> 00:03:21,440
own separate pipelines

86
00:03:19,280 --> 00:03:23,360
before they're together integrated into

87
00:03:21,440 --> 00:03:26,560
the next level or the next connected

88
00:03:23,360 --> 00:03:29,200
background producing the product a b

89
00:03:26,560 --> 00:03:30,799
and this is a very common phenomenon at

90
00:03:29,200 --> 00:03:34,079
ericsson where

91
00:03:30,799 --> 00:03:36,080
we have multiple integration spots and

92
00:03:34,080 --> 00:03:38,720
it's tough to keep track of all of these

93
00:03:36,080 --> 00:03:41,120
dependencies to integrate upstream

94
00:03:38,720 --> 00:03:43,120
and see where does this software come

95
00:03:41,120 --> 00:03:46,080
from and how it has been tested before

96
00:03:43,120 --> 00:03:48,319
we integrate it

97
00:03:46,080 --> 00:03:50,879
and again traceability is important here

98
00:03:48,319 --> 00:03:50,879
all the way

99
00:03:51,840 --> 00:03:55,439
so i try to summarize into a few

100
00:03:53,760 --> 00:03:57,439
questions of

101
00:03:55,439 --> 00:03:59,280
what are the exact challenges we see

102
00:03:57,439 --> 00:04:01,840
what are what is the problems that we

103
00:03:59,280 --> 00:04:04,239
need to solve

104
00:04:01,840 --> 00:04:05,760
one thing is when we use different

105
00:04:04,239 --> 00:04:08,400
pipeline environments

106
00:04:05,760 --> 00:04:09,679
how do we communicate about when our

107
00:04:08,400 --> 00:04:12,159
product has been

108
00:04:09,680 --> 00:04:13,040
delivered or released let's say our

109
00:04:12,159 --> 00:04:15,040
product a

110
00:04:13,040 --> 00:04:17,358
is done here how does somebody

111
00:04:15,040 --> 00:04:20,478
downstream become aware of this

112
00:04:17,358 --> 00:04:23,840
how can we announce this to the world

113
00:04:20,478 --> 00:04:25,680
and how can we if we have another

114
00:04:23,840 --> 00:04:27,758
perspective how can we

115
00:04:25,680 --> 00:04:29,440
become aware when others release their

116
00:04:27,759 --> 00:04:31,199
software automatically

117
00:04:29,440 --> 00:04:32,479
the independent of whichever technology

118
00:04:31,199 --> 00:04:35,759
stack would use it

119
00:04:32,479 --> 00:04:36,320
would be nice to become aware of oh hey

120
00:04:35,759 --> 00:04:38,560
this

121
00:04:36,320 --> 00:04:40,159
version xyz is now available so we

122
00:04:38,560 --> 00:04:42,960
automatically integrate it into our

123
00:04:40,160 --> 00:04:44,720
pipeline and go for it

124
00:04:42,960 --> 00:04:46,159
and how can we visualize these

125
00:04:44,720 --> 00:04:48,400
connections

126
00:04:46,160 --> 00:04:49,440
how can we see what kind of tests has

127
00:04:48,400 --> 00:04:51,280
been done

128
00:04:49,440 --> 00:04:54,160
upstream but also downstream on our

129
00:04:51,280 --> 00:04:54,159
software later on

130
00:04:54,840 --> 00:05:01,280
and how can we see how many has

131
00:04:58,080 --> 00:05:02,080
downloaded our products it'd be nice to

132
00:05:01,280 --> 00:05:04,000
know

133
00:05:02,080 --> 00:05:05,840
were their tests successfully into their

134
00:05:04,000 --> 00:05:09,120
environment or not

135
00:05:05,840 --> 00:05:12,960
and why so

136
00:05:09,120 --> 00:05:16,000
um the solution for this was that we

137
00:05:12,960 --> 00:05:17,758
we focused mostly on the communication

138
00:05:16,000 --> 00:05:19,039
how can we communicate across different

139
00:05:17,759 --> 00:05:22,080
tools

140
00:05:19,039 --> 00:05:23,280
so we came up with a solution that's

141
00:05:22,080 --> 00:05:25,599
like a

142
00:05:23,280 --> 00:05:26,799
common language if you will across these

143
00:05:25,600 --> 00:05:28,560
different pipelines

144
00:05:26,800 --> 00:05:30,320
across different tools across different

145
00:05:28,560 --> 00:05:33,280
visualization tools that could based off

146
00:05:30,320 --> 00:05:33,280
the same information

147
00:05:33,440 --> 00:05:41,280
and we called it eiffel now ifill is and

148
00:05:38,080 --> 00:05:43,359
created in 2012 so we've been using it

149
00:05:41,280 --> 00:05:45,198
for a lot of years internally

150
00:05:43,360 --> 00:05:47,919
a couple of years back we open sourced

151
00:05:45,199 --> 00:05:51,039
it and it's now available on github

152
00:05:47,919 --> 00:05:53,919
but what it is it's a message protocol

153
00:05:51,039 --> 00:05:54,800
is event-based it's defining a set of

154
00:05:53,919 --> 00:05:56,719
events

155
00:05:54,800 --> 00:05:58,960
that you can use to communicate about

156
00:05:56,720 --> 00:06:01,840
different concepts used in your pipeline

157
00:05:58,960 --> 00:06:02,960
be it artifacts be it tests source code

158
00:06:01,840 --> 00:06:05,119
changes

159
00:06:02,960 --> 00:06:06,960
you can communicate about this

160
00:06:05,120 --> 00:06:08,400
independent of whichever technology you

161
00:06:06,960 --> 00:06:09,758
use

162
00:06:08,400 --> 00:06:11,599
doesn't matter if it's a java

163
00:06:09,759 --> 00:06:13,520
application it's uploaded somewhere to a

164
00:06:11,600 --> 00:06:15,840
maven repository or if it's a docker

165
00:06:13,520 --> 00:06:17,758
image you uploaded it to docker hub

166
00:06:15,840 --> 00:06:19,039
and you can still communicate about it

167
00:06:17,759 --> 00:06:23,039
in the same thing

168
00:06:19,039 --> 00:06:25,120
in the same way and

169
00:06:23,039 --> 00:06:26,400
what's uh what i think is great about

170
00:06:25,120 --> 00:06:28,080
afl at least

171
00:06:26,400 --> 00:06:29,840
it's you can share your pick whichever

172
00:06:28,080 --> 00:06:31,280
events suit your needs

173
00:06:29,840 --> 00:06:33,280
you don't have to take all of the

174
00:06:31,280 --> 00:06:35,520
protocol it's a lot of events

175
00:06:33,280 --> 00:06:37,520
you can share pick the ones that you

176
00:06:35,520 --> 00:06:39,120
specifically need in your use case

177
00:06:37,520 --> 00:06:41,120
so let's say you're only interested in

178
00:06:39,120 --> 00:06:41,840
the test case related events then you

179
00:06:41,120 --> 00:06:45,199
only

180
00:06:41,840 --> 00:06:48,318
care about those and

181
00:06:45,199 --> 00:06:50,080
the events are also linked together

182
00:06:48,319 --> 00:06:51,759
and that's very important for us at

183
00:06:50,080 --> 00:06:52,719
least to maintain the traceability

184
00:06:51,759 --> 00:06:54,720
between them

185
00:06:52,720 --> 00:06:56,319
so you can trace back from the latest

186
00:06:54,720 --> 00:06:56,960
event you can go backwards in time and

187
00:06:56,319 --> 00:06:59,599
see

188
00:06:56,960 --> 00:07:03,039
the whole pipeline chain can represent

189
00:06:59,599 --> 00:07:05,599
the pipeline

190
00:07:03,039 --> 00:07:06,240
and with afl you can answer some of the

191
00:07:05,599 --> 00:07:09,680
questions i

192
00:07:06,240 --> 00:07:12,639
post previously for example

193
00:07:09,680 --> 00:07:13,759
when we have a new artifact available

194
00:07:12,639 --> 00:07:16,720
you can send out

195
00:07:13,759 --> 00:07:17,919
an event saying that i've now created

196
00:07:16,720 --> 00:07:19,599
this artifact

197
00:07:17,919 --> 00:07:21,599
you see to the left of the in the

198
00:07:19,599 --> 00:07:24,080
picture it's called a full artifact

199
00:07:21,599 --> 00:07:27,199
created event

200
00:07:24,080 --> 00:07:28,318
what comes after that is could be a

201
00:07:27,199 --> 00:07:30,479
published event

202
00:07:28,319 --> 00:07:31,840
whenever you upload it somewhere you can

203
00:07:30,479 --> 00:07:34,000
send additional events

204
00:07:31,840 --> 00:07:35,840
linking back to the previously created

205
00:07:34,000 --> 00:07:38,560
artifact

206
00:07:35,840 --> 00:07:40,400
and the linking here is important the

207
00:07:38,560 --> 00:07:43,120
protocol itself defines

208
00:07:40,400 --> 00:07:44,318
how you can link your events if they

209
00:07:43,120 --> 00:07:48,319
must have or if they

210
00:07:44,319 --> 00:07:50,319
if it's optional links and

211
00:07:48,319 --> 00:07:52,720
these are all in json format against you

212
00:07:50,319 --> 00:07:52,720
wondering

213
00:07:53,840 --> 00:07:57,599
next question could be how can we

214
00:07:55,759 --> 00:07:59,599
visualize our pipeline

215
00:07:57,599 --> 00:08:00,878
it's a pipeline consists of many

216
00:07:59,599 --> 00:08:02,639
different steps right

217
00:08:00,879 --> 00:08:04,960
independent of how it looks you want to

218
00:08:02,639 --> 00:08:05,440
maybe tell the world about what has

219
00:08:04,960 --> 00:08:08,560
happened

220
00:08:05,440 --> 00:08:11,840
how do we visualize this

221
00:08:08,560 --> 00:08:14,319
this is a very simple ci pipeline

222
00:08:11,840 --> 00:08:16,318
it's a git lab syntax so you build your

223
00:08:14,319 --> 00:08:17,840
product then they test it

224
00:08:16,319 --> 00:08:20,960
it tests it some more and then you

225
00:08:17,840 --> 00:08:24,719
upload you build binary somewhere

226
00:08:20,960 --> 00:08:24,719
and very standard case

227
00:08:24,960 --> 00:08:28,159
and the some of the afl events that

228
00:08:26,720 --> 00:08:30,960
could be used for this

229
00:08:28,160 --> 00:08:32,320
are for example these you can have an

230
00:08:30,960 --> 00:08:34,240
artifact create event

231
00:08:32,320 --> 00:08:36,320
to signify the first build this is where

232
00:08:34,240 --> 00:08:39,440
you actually build your

233
00:08:36,320 --> 00:08:40,000
binary or whatever it might be and then

234
00:08:39,440 --> 00:08:41,760
you start some

235
00:08:40,000 --> 00:08:43,440
tests and then you might want to send

236
00:08:41,760 --> 00:08:45,120
test case events

237
00:08:43,440 --> 00:08:47,360
so you've got the triggered started and

238
00:08:45,120 --> 00:08:49,360
finished events for this

239
00:08:47,360 --> 00:08:50,399
and these can be sent of course these

240
00:08:49,360 --> 00:08:52,640
jobs are in parallel

241
00:08:50,399 --> 00:08:55,120
in this pipeline so you can send them in

242
00:08:52,640 --> 00:08:57,040
two sets

243
00:08:55,120 --> 00:08:58,160
and then comes the artifact published

244
00:08:57,040 --> 00:09:01,199
event

245
00:08:58,160 --> 00:09:03,839
as the last one to signify that hey now

246
00:09:01,200 --> 00:09:07,360
my artifact is available somewhere for

247
00:09:03,839 --> 00:09:08,640
downloading and i'm going to show you

248
00:09:07,360 --> 00:09:10,720
the exact same

249
00:09:08,640 --> 00:09:12,959
set of events only connected in an event

250
00:09:10,720 --> 00:09:15,519
graph to make it clearer

251
00:09:12,959 --> 00:09:17,279
so start to the left we got artifact

252
00:09:15,519 --> 00:09:20,959
creator event this is the first one

253
00:09:17,279 --> 00:09:23,519
in chronological order

254
00:09:20,959 --> 00:09:25,680
then comes the test case events which

255
00:09:23,519 --> 00:09:26,399
links back to the artifact because this

256
00:09:25,680 --> 00:09:29,519
is the what

257
00:09:26,399 --> 00:09:30,399
uh what we're testing and the link name

258
00:09:29,519 --> 00:09:34,480
in this case

259
00:09:30,399 --> 00:09:37,600
is called item under test makes

260
00:09:34,480 --> 00:09:40,480
makes perfect sense to me at least and

261
00:09:37,600 --> 00:09:43,839
then comes the test case started event

262
00:09:40,480 --> 00:09:45,440
linking back to the triggering

263
00:09:43,839 --> 00:09:46,880
and then we've got the finished event

264
00:09:45,440 --> 00:09:49,920
test case finished event

265
00:09:46,880 --> 00:09:52,640
this one contains the result of the test

266
00:09:49,920 --> 00:09:53,519
if it was successful or not now of

267
00:09:52,640 --> 00:09:56,000
course if you have

268
00:09:53,519 --> 00:09:58,240
several test cases you might want to

269
00:09:56,000 --> 00:09:59,920
group them under some sort of

270
00:09:58,240 --> 00:10:02,000
label that's saying yes i've tested it

271
00:09:59,920 --> 00:10:02,959
to this extent and i want to label my

272
00:10:02,000 --> 00:10:05,680
artifact now

273
00:10:02,959 --> 00:10:06,800
this is ready for the next level of

274
00:10:05,680 --> 00:10:10,079
delivery

275
00:10:06,800 --> 00:10:12,160
somewhere then you can call

276
00:10:10,079 --> 00:10:13,519
you can send a confidence level modified

277
00:10:12,160 --> 00:10:17,120
event

278
00:10:13,519 --> 00:10:18,880
this is a very free formatted in a way

279
00:10:17,120 --> 00:10:20,160
that you can name the conference level

280
00:10:18,880 --> 00:10:21,839
whatever you want to

281
00:10:20,160 --> 00:10:23,279
as long as you standardize it shouldn't

282
00:10:21,839 --> 00:10:26,399
be a problem

283
00:10:23,279 --> 00:10:29,120
and then you point back to the artifact

284
00:10:26,399 --> 00:10:32,240
that you've created

285
00:10:29,120 --> 00:10:34,640
so this is very useful for us as

286
00:10:32,240 --> 00:10:35,760
listeners or consumers of this product

287
00:10:34,640 --> 00:10:37,760
we know

288
00:10:35,760 --> 00:10:38,800
once it has been tested enough we know

289
00:10:37,760 --> 00:10:41,600
when it's reached the

290
00:10:38,800 --> 00:10:44,399
confidence level we want it to have

291
00:10:41,600 --> 00:10:46,240
before we actually start using it

292
00:10:44,399 --> 00:10:47,680
and once the last event comes in it's

293
00:10:46,240 --> 00:10:50,640
the artifact published event

294
00:10:47,680 --> 00:10:52,239
we know where we can find it where is

295
00:10:50,640 --> 00:10:54,880
the artifact located where can i

296
00:10:52,240 --> 00:10:54,880
download it

297
00:10:57,760 --> 00:11:01,200
and i have one last wrap up here as i

298
00:11:00,640 --> 00:11:06,160
said we

299
00:11:01,200 --> 00:11:09,920
are we have open sourced this and

300
00:11:06,160 --> 00:11:12,800
it's available on github and

301
00:11:09,920 --> 00:11:13,599
we really hope that the community keeps

302
00:11:12,800 --> 00:11:16,079
growing

303
00:11:13,600 --> 00:11:17,040
and getting more contributions because

304
00:11:16,079 --> 00:11:18,560
we see

305
00:11:17,040 --> 00:11:20,160
that a lot of different companies and

306
00:11:18,560 --> 00:11:24,079
organizations have the same

307
00:11:20,160 --> 00:11:26,399
problems that we faced

308
00:11:24,079 --> 00:11:28,800
and one thing i liked about afell is

309
00:11:26,399 --> 00:11:31,760
that it provides one common language

310
00:11:28,800 --> 00:11:32,160
across different technology stacks

311
00:11:31,760 --> 00:11:34,800
across

312
00:11:32,160 --> 00:11:35,600
different tools you might use so you can

313
00:11:34,800 --> 00:11:37,680
base

314
00:11:35,600 --> 00:11:40,240
visualization tools on the events in

315
00:11:37,680 --> 00:11:42,479
this data for example

316
00:11:40,240 --> 00:11:43,920
and what's also important is the links

317
00:11:42,480 --> 00:11:45,839
between the events it enables

318
00:11:43,920 --> 00:11:47,760
traceability so you can follow

319
00:11:45,839 --> 00:11:49,920
a complete set of pipeline you know what

320
00:11:47,760 --> 00:11:51,519
has happened to your software

321
00:11:49,920 --> 00:11:54,479
and you know where it might go even

322
00:11:51,519 --> 00:11:54,480
further downstream

323
00:11:54,959 --> 00:12:00,160
and i'd like to invite frederick to

324
00:11:58,480 --> 00:12:02,079
this side of the room so we can switch

325
00:12:00,160 --> 00:12:02,880
mike because he's going to tell you

326
00:12:02,079 --> 00:12:06,959
about how

327
00:12:02,880 --> 00:12:06,959
axis started contributing and using

328
00:12:08,839 --> 00:12:11,839
eiffel

329
00:12:13,760 --> 00:12:17,680
see if we can set this up here

330
00:12:21,760 --> 00:12:26,160
okay so um so i'm from uh from a company

331
00:12:24,800 --> 00:12:29,359
called

332
00:12:26,160 --> 00:12:31,199
axis communications and and we do uh

333
00:12:29,360 --> 00:12:32,560
surveillance cameras which is a kind of

334
00:12:31,200 --> 00:12:34,480
a scary thing but

335
00:12:32,560 --> 00:12:35,680
there are a lot of there's no software

336
00:12:34,480 --> 00:12:38,959
running in these cameras

337
00:12:35,680 --> 00:12:41,279
and uh somebody said

338
00:12:38,959 --> 00:12:42,800
roughly around 20 lines of code in the

339
00:12:41,279 --> 00:12:43,920
camera so there is a lot of software

340
00:12:42,800 --> 00:12:46,719
going into it this small

341
00:12:43,920 --> 00:12:48,639
thing it's a kind of a it's basically a

342
00:12:46,720 --> 00:12:50,880
linux box but but still

343
00:12:48,639 --> 00:12:52,560
and we have nowhere the scale that

344
00:12:50,880 --> 00:12:55,279
ericsson has we have about

345
00:12:52,560 --> 00:12:56,479
a thousand developers in total and the

346
00:12:55,279 --> 00:12:59,200
the team that that does

347
00:12:56,480 --> 00:12:59,600
the teams that do the the cameras are

348
00:12:59,200 --> 00:13:03,839
about

349
00:12:59,600 --> 00:13:04,560
400 developers uh and about 150 testers

350
00:13:03,839 --> 00:13:06,480
and we do

351
00:13:04,560 --> 00:13:08,959
we like to think we do continuous

352
00:13:06,480 --> 00:13:12,160
integration at least because we

353
00:13:08,959 --> 00:13:14,319
commit to master a lot of times every

354
00:13:12,160 --> 00:13:17,120
day

355
00:13:14,320 --> 00:13:18,079
and i'm going to try to tell you our a

356
00:13:17,120 --> 00:13:20,240
full story

357
00:13:18,079 --> 00:13:21,359
so emily gave you a good background on

358
00:13:20,240 --> 00:13:24,079
what i feel is and

359
00:13:21,360 --> 00:13:25,519
i'll try to to go through some kind of a

360
00:13:24,079 --> 00:13:27,680
timeline how we

361
00:13:25,519 --> 00:13:29,519
how we found out about afl and how we

362
00:13:27,680 --> 00:13:31,839
adopted it and how we now

363
00:13:29,519 --> 00:13:32,720
very much would like to drive our all of

364
00:13:31,839 --> 00:13:34,240
our pipelines

365
00:13:32,720 --> 00:13:36,079
using it that's at least that's the

366
00:13:34,240 --> 00:13:38,800
ambition for

367
00:13:36,079 --> 00:13:38,800
for the future

368
00:13:39,760 --> 00:13:42,959
and first i would like to give you some

369
00:13:41,680 --> 00:13:45,599
context on on

370
00:13:42,959 --> 00:13:47,439
what exactly it is that we do so so

371
00:13:45,600 --> 00:13:50,639
access is a it's quite an old

372
00:13:47,440 --> 00:13:51,839
company and we we've done

373
00:13:50,639 --> 00:13:54,399
in the history we've done network

374
00:13:51,839 --> 00:13:56,000
connected stuff and and which is it's

375
00:13:54,399 --> 00:13:57,680
basically just

376
00:13:56,000 --> 00:13:59,760
making uh some kind of hardware putting

377
00:13:57,680 --> 00:14:01,359
in a box and selling it that's the

378
00:13:59,760 --> 00:14:03,120
standard access way that we've been

379
00:14:01,360 --> 00:14:05,199
doing it for for a lot of

380
00:14:03,120 --> 00:14:06,959
years and and it's basically what other

381
00:14:05,199 --> 00:14:08,240
companies do also they they sell

382
00:14:06,959 --> 00:14:11,439
cardboard boxes with

383
00:14:08,240 --> 00:14:14,079
tech stuff in it uh but but

384
00:14:11,440 --> 00:14:15,920
more and more we've been seeing a demand

385
00:14:14,079 --> 00:14:17,519
from our from our business and from our

386
00:14:15,920 --> 00:14:20,000
from our customers that they want

387
00:14:17,519 --> 00:14:21,519
complete systems they want cloud

388
00:14:20,000 --> 00:14:23,839
integration they want

389
00:14:21,519 --> 00:14:25,440
they want a lot of stuff which which in

390
00:14:23,839 --> 00:14:26,959
turn gives a lot more software

391
00:14:25,440 --> 00:14:28,800
that has to be tested has to work

392
00:14:26,959 --> 00:14:30,479
together so

393
00:14:28,800 --> 00:14:32,560
that's where in there that comes the

394
00:14:30,480 --> 00:14:34,639
challenge of of knowing how which which

395
00:14:32,560 --> 00:14:38,239
versions work together which software

396
00:14:34,639 --> 00:14:40,639
stacks works best together and so on so

397
00:14:38,240 --> 00:14:43,519
that's that's kind of our the similar

398
00:14:40,639 --> 00:14:46,399
challenge that ericsson has

399
00:14:43,519 --> 00:14:48,079
but back to our story uh the first

400
00:14:46,399 --> 00:14:48,959
recorded presence of the afl protocol at

401
00:14:48,079 --> 00:14:52,319
axis

402
00:14:48,959 --> 00:14:53,760
uh as as i've heard

403
00:14:52,320 --> 00:14:55,680
there were a couple of engineers

404
00:14:53,760 --> 00:14:57,519
attending some kind of a conference or a

405
00:14:55,680 --> 00:14:59,040
meeting where somebody from erickson was

406
00:14:57,519 --> 00:14:59,760
presenting some kind of visualization

407
00:14:59,040 --> 00:15:02,480
tool

408
00:14:59,760 --> 00:15:03,600
how you could visualize your software i

409
00:15:02,480 --> 00:15:05,120
don't think it was called

410
00:15:03,600 --> 00:15:06,800
i didn't i don't even think it was

411
00:15:05,120 --> 00:15:07,519
referred to as a pipeline but but still

412
00:15:06,800 --> 00:15:10,399
some kind of

413
00:15:07,519 --> 00:15:12,000
software flow and and they found that

414
00:15:10,399 --> 00:15:12,320
this was something called a fold which

415
00:15:12,000 --> 00:15:14,079
was

416
00:15:12,320 --> 00:15:15,440
underneath here and they were they got

417
00:15:14,079 --> 00:15:17,040
intrigued so they

418
00:15:15,440 --> 00:15:19,920
they started doing some tinkering on

419
00:15:17,040 --> 00:15:22,160
their own and trying to trying to

420
00:15:19,920 --> 00:15:23,839
make something with a full in the axis

421
00:15:22,160 --> 00:15:26,959
context

422
00:15:23,839 --> 00:15:28,399
and and which was which was fine but it

423
00:15:26,959 --> 00:15:30,800
really didn't lead anywhere

424
00:15:28,399 --> 00:15:31,839
and then it resurfaced in some kind of a

425
00:15:30,800 --> 00:15:34,479
in a research

426
00:15:31,839 --> 00:15:34,959
academia industry project that axis had

427
00:15:34,480 --> 00:15:37,279
where

428
00:15:34,959 --> 00:15:40,160
some of the researchers had found out

429
00:15:37,279 --> 00:15:41,920
about eiffel from erickson also and

430
00:15:40,160 --> 00:15:44,000
and it resurfaced then they did some

431
00:15:41,920 --> 00:15:45,360
more tinkering and some more engineers

432
00:15:44,000 --> 00:15:47,600
got interested but it was still

433
00:15:45,360 --> 00:15:48,399
kind of under the radar stuff just

434
00:15:47,600 --> 00:15:50,240
engineers

435
00:15:48,399 --> 00:15:51,519
like technology enthusiasts that did

436
00:15:50,240 --> 00:15:55,120
stuff but nothing that really

437
00:15:51,519 --> 00:15:58,480
drove the business or was it was a thing

438
00:15:55,120 --> 00:16:01,120
and in like the next next

439
00:15:58,480 --> 00:16:01,680
big thing in my opinion was was when

440
00:16:01,120 --> 00:16:03,120
axis

441
00:16:01,680 --> 00:16:05,439
actually released something that had to

442
00:16:03,120 --> 00:16:07,600
do with afl so these engineers had been

443
00:16:05,440 --> 00:16:09,360
tinkering more and they wanted to

444
00:16:07,600 --> 00:16:11,040
to make something of it they wanted to

445
00:16:09,360 --> 00:16:12,399
able to produce something that was of

446
00:16:11,040 --> 00:16:15,360
value so so they

447
00:16:12,399 --> 00:16:18,079
they we used jenkins as almost everybody

448
00:16:15,360 --> 00:16:20,639
else so they they made a jenkins plug-in

449
00:16:18,079 --> 00:16:21,279
which was very basic it basically

450
00:16:20,639 --> 00:16:24,480
produced

451
00:16:21,279 --> 00:16:26,079
uh artifact created event when we we did

452
00:16:24,480 --> 00:16:28,800
a build that was all we did

453
00:16:26,079 --> 00:16:30,319
so it was kind of worthless on its own

454
00:16:28,800 --> 00:16:31,758
but still it's kind of a

455
00:16:30,320 --> 00:16:33,519
footprint that now we're actually

456
00:16:31,759 --> 00:16:35,519
producing eiffel events we have a

457
00:16:33,519 --> 00:16:37,279
message bus where there are events

458
00:16:35,519 --> 00:16:40,160
coming out

459
00:16:37,279 --> 00:16:40,800
but uh anyone there there was really

460
00:16:40,160 --> 00:16:42,719
nobody

461
00:16:40,800 --> 00:16:44,079
listening which was which is kind of a

462
00:16:42,720 --> 00:16:48,079
problem because

463
00:16:44,079 --> 00:16:49,839
it's it's uh when doing uh

464
00:16:48,079 --> 00:16:51,758
these type of things you the the whole

465
00:16:49,839 --> 00:16:53,360
point is to somebody listening and

466
00:16:51,759 --> 00:16:53,759
acting on the events and there is like a

467
00:16:53,360 --> 00:16:56,880
chain

468
00:16:53,759 --> 00:16:57,759
created and a flow so so our biggest

469
00:16:56,880 --> 00:16:59,519
problem here was

470
00:16:57,759 --> 00:17:00,800
was nobody was listening in and if

471
00:16:59,519 --> 00:17:02,560
nobody's listening in a

472
00:17:00,800 --> 00:17:04,159
pub sub culture it's kind of hard to

473
00:17:02,560 --> 00:17:06,720
know if you're making sense if

474
00:17:04,160 --> 00:17:08,079
you if you in the beginning at least

475
00:17:06,720 --> 00:17:09,439
because because you have to know that

476
00:17:08,079 --> 00:17:10,480
that

477
00:17:09,439 --> 00:17:12,480
in the beginning you have to have some

478
00:17:10,480 --> 00:17:16,240
kind of acknowledgement that your event

479
00:17:12,480 --> 00:17:19,520
it was useful there's a value to it so

480
00:17:16,240 --> 00:17:24,160
we had to to create some kind of value

481
00:17:19,520 --> 00:17:24,160
in our minimal a full implementation

482
00:17:25,119 --> 00:17:28,879
and this is basically where i where i

483
00:17:27,359 --> 00:17:31,439
came in in the in the eiffel

484
00:17:28,880 --> 00:17:33,120
ting i i was a part of a team that does

485
00:17:31,440 --> 00:17:36,000
test automation

486
00:17:33,120 --> 00:17:38,399
and we were struggling with our ci part

487
00:17:36,000 --> 00:17:41,280
of the testing part of our ci pipeline

488
00:17:38,400 --> 00:17:43,039
it was kind of old and we didn't really

489
00:17:41,280 --> 00:17:44,559
want to do what we wanted to do with our

490
00:17:43,039 --> 00:17:48,000
testing

491
00:17:44,559 --> 00:17:50,799
so we we started looking

492
00:17:48,000 --> 00:17:53,039
to uh rebuilding it basically or

493
00:17:50,799 --> 00:17:54,320
changing it and so on and i had a

494
00:17:53,039 --> 00:17:56,240
coffee discussion with a colleague of

495
00:17:54,320 --> 00:17:58,159
mine he he was one of those

496
00:17:56,240 --> 00:17:59,520
uh eiffel tinkering engineers he said

497
00:17:58,160 --> 00:18:01,520
you should look at eiffel if you're

498
00:17:59,520 --> 00:18:03,120
going to do things from scratch

499
00:18:01,520 --> 00:18:04,559
you might as well look at eiffel because

500
00:18:03,120 --> 00:18:05,840
it's pretty cool you can do cool stuff

501
00:18:04,559 --> 00:18:08,639
with it

502
00:18:05,840 --> 00:18:09,918
and we looked into eiffel and we a

503
00:18:08,640 --> 00:18:11,520
colleague me and a colleague and we

504
00:18:09,919 --> 00:18:13,039
really liked it we

505
00:18:11,520 --> 00:18:15,520
we saw that this was this is something

506
00:18:13,039 --> 00:18:17,600
that could that could probably

507
00:18:15,520 --> 00:18:19,360
not solve our immediate problems but

508
00:18:17,600 --> 00:18:22,080
there was a bigger issue of of the

509
00:18:19,360 --> 00:18:22,719
system of systems talk and and knowing

510
00:18:22,080 --> 00:18:24,320
uh

511
00:18:22,720 --> 00:18:26,559
information about the software that goes

512
00:18:24,320 --> 00:18:30,639
in from from everywhere so

513
00:18:26,559 --> 00:18:33,200
so we decided to make our new

514
00:18:30,640 --> 00:18:34,160
testing part of the ci cd pipeline uh

515
00:18:33,200 --> 00:18:37,679
talk a full

516
00:18:34,160 --> 00:18:38,720
and understand afl and in this we

517
00:18:37,679 --> 00:18:41,200
started listening

518
00:18:38,720 --> 00:18:42,080
to the jenkins events the lonely guy

519
00:18:41,200 --> 00:18:44,320
over here

520
00:18:42,080 --> 00:18:45,360
that was playing a full music and nobody

521
00:18:44,320 --> 00:18:47,360
was listening

522
00:18:45,360 --> 00:18:48,719
so we actually started listening to that

523
00:18:47,360 --> 00:18:53,120
and we started triggering

524
00:18:48,720 --> 00:18:53,120
our tests based on those those events

525
00:18:53,360 --> 00:18:58,320
which which gave us a

526
00:18:56,480 --> 00:19:00,080
much more better understanding of what

527
00:18:58,320 --> 00:19:01,039
it is like to have an event-driven

528
00:19:00,080 --> 00:19:04,000
pipeline and what

529
00:19:01,039 --> 00:19:05,840
what it was like to adhere to a protocol

530
00:19:04,000 --> 00:19:08,799
like eiffel

531
00:19:05,840 --> 00:19:10,000
and and we actually wound up being a

532
00:19:08,799 --> 00:19:14,240
great listener today for

533
00:19:10,000 --> 00:19:16,480
protocol and during

534
00:19:14,240 --> 00:19:19,039
during the development of our our

535
00:19:16,480 --> 00:19:23,039
testing pipeline

536
00:19:19,039 --> 00:19:25,840
we had to learn a full basically so we

537
00:19:23,039 --> 00:19:27,120
we wrote a bunch of uh python libraries

538
00:19:25,840 --> 00:19:28,799
uh

539
00:19:27,120 --> 00:19:30,320
and two of them which were kind of

540
00:19:28,799 --> 00:19:32,960
important at least we thought

541
00:19:30,320 --> 00:19:34,879
we we we said we had to we have to

542
00:19:32,960 --> 00:19:36,000
contribute back to since it was an open

543
00:19:34,880 --> 00:19:38,320
source

544
00:19:36,000 --> 00:19:40,400
if it was an open source uh community an

545
00:19:38,320 --> 00:19:42,799
open source protocol we said we can

546
00:19:40,400 --> 00:19:44,160
contribute here we can learn people how

547
00:19:42,799 --> 00:19:47,840
to

548
00:19:44,160 --> 00:19:50,240
teach people how to how to use afl

549
00:19:47,840 --> 00:19:51,678
uh and these two libraries the a full

550
00:19:50,240 --> 00:19:53,840
python lib which is a

551
00:19:51,679 --> 00:19:55,039
kind of a small library that lets you

552
00:19:53,840 --> 00:19:56,879
publish

553
00:19:55,039 --> 00:19:58,240
a4 messages and listen to a film that's

554
00:19:56,880 --> 00:20:01,360
just uh

555
00:19:58,240 --> 00:20:02,799
on the message bus it's it's

556
00:20:01,360 --> 00:20:04,320
very useful if you want to get started

557
00:20:02,799 --> 00:20:05,840
with iphone and then there's something

558
00:20:04,320 --> 00:20:09,120
called

559
00:20:05,840 --> 00:20:10,240
eiffel graphql api which is basically an

560
00:20:09,120 --> 00:20:13,360
api

561
00:20:10,240 --> 00:20:15,919
on top of the the

562
00:20:13,360 --> 00:20:17,600
the event repository which is basically

563
00:20:15,919 --> 00:20:18,880
a storage for events because if you want

564
00:20:17,600 --> 00:20:20,240
to look at events

565
00:20:18,880 --> 00:20:21,919
back in history you have to store them

566
00:20:20,240 --> 00:20:23,760
somewhere you can't just keep them on

567
00:20:21,919 --> 00:20:26,159
the bus

568
00:20:23,760 --> 00:20:27,200
so that's basically our graphql which is

569
00:20:26,159 --> 00:20:28,799
kind of useful

570
00:20:27,200 --> 00:20:30,880
if you want to start tinkering with with

571
00:20:28,799 --> 00:20:34,799
the storing events and looking back in

572
00:20:30,880 --> 00:20:37,280
history and so on um

573
00:20:34,799 --> 00:20:38,480
and this this open sourcing of this got

574
00:20:37,280 --> 00:20:40,799
uh

575
00:20:38,480 --> 00:20:42,320
access more engaged in the community and

576
00:20:40,799 --> 00:20:45,120
we actually there's a

577
00:20:42,320 --> 00:20:46,158
there's a conference called uh called

578
00:20:45,120 --> 00:20:48,479
eiffel summit

579
00:20:46,159 --> 00:20:50,240
uh it's a very small conference but we

580
00:20:48,480 --> 00:20:53,679
actually access actually hosted it

581
00:20:50,240 --> 00:20:57,120
um uh this fall uh

582
00:20:53,679 --> 00:20:58,960
and uh in in moving forward we're going

583
00:20:57,120 --> 00:21:01,039
to try to to keep the backlogs

584
00:20:58,960 --> 00:21:02,880
working with an open backlog concept as

585
00:21:01,039 --> 00:21:05,039
as we learned about afl how we are

586
00:21:02,880 --> 00:21:06,240
our journey will try to contribute

587
00:21:05,039 --> 00:21:08,559
directly to the

588
00:21:06,240 --> 00:21:10,559
to the community rather than just doing

589
00:21:08,559 --> 00:21:14,559
stuff inside and then just dumping it

590
00:21:10,559 --> 00:21:14,559
outside which is kind of a bad thing

591
00:21:15,520 --> 00:21:19,440
and then moving forward um as afield is

592
00:21:18,400 --> 00:21:21,200
now a thing

593
00:21:19,440 --> 00:21:23,679
at axis we actually have a small team

594
00:21:21,200 --> 00:21:24,000
that work with afl and we're we're going

595
00:21:23,679 --> 00:21:27,039
to

596
00:21:24,000 --> 00:21:30,640
really going to try to to drive all the

597
00:21:27,039 --> 00:21:31,520
all of our pipelines we see them being

598
00:21:30,640 --> 00:21:35,200
event driven

599
00:21:31,520 --> 00:21:38,320
in some way moving forward

600
00:21:35,200 --> 00:21:41,679
and also also we're going to try to

601
00:21:38,320 --> 00:21:43,840
to contribute more to the afl community

602
00:21:41,679 --> 00:21:45,600
trying to to like emily said we want to

603
00:21:43,840 --> 00:21:47,520
spread it want to

604
00:21:45,600 --> 00:21:50,240
make more people try it out and then see

605
00:21:47,520 --> 00:21:52,720
if it can become a thing

606
00:21:50,240 --> 00:21:53,840
so we'll try to to contribute more of

607
00:21:52,720 --> 00:21:58,640
our experiences

608
00:21:53,840 --> 00:22:01,120
uh moving forward in 2020

609
00:21:58,640 --> 00:22:01,679
and that's that's that's my act is a

610
00:22:01,120 --> 00:22:04,799
full

611
00:22:01,679 --> 00:22:04,799
journey basically

612
00:22:05,440 --> 00:22:09,760
and we'd like to thank you for listening

613
00:22:07,840 --> 00:22:10,799
to us and here's some some contact

614
00:22:09,760 --> 00:22:13,760
information

615
00:22:10,799 --> 00:22:15,760
uh the eiffel community on github and we

616
00:22:13,760 --> 00:22:17,360
have a google group and a slack channel

617
00:22:15,760 --> 00:22:20,158
and a youtube channel also with some

618
00:22:17,360 --> 00:22:23,199
some videos if you want to learn more or

619
00:22:20,159 --> 00:22:27,600
get a more basic tutorial

620
00:22:23,200 --> 00:22:30,720
of what april is

621
00:22:27,600 --> 00:22:30,719
and now i guess it's squishy

622
00:22:32,040 --> 00:22:37,540
[Applause]

623
00:22:38,880 --> 00:22:45,600
is there integration for gitlab

624
00:22:42,320 --> 00:22:48,879
and if not how can i do it like

625
00:22:45,600 --> 00:22:52,000
in the jobs or stages manually to

626
00:22:48,880 --> 00:22:52,000
send events to

627
00:22:53,760 --> 00:22:56,960
so the question was is there some kind

628
00:22:55,440 --> 00:23:00,240
of a git lab

629
00:22:56,960 --> 00:23:02,880
integration for for rifle

630
00:23:00,240 --> 00:23:04,480
uh not that i know i'm currently on on

631
00:23:02,880 --> 00:23:07,600
github i don't know if no

632
00:23:04,480 --> 00:23:11,039
not yet so and i'm i'm not

633
00:23:07,600 --> 00:23:14,799
quite sure how gitlab works so uh

634
00:23:11,039 --> 00:23:16,000
so uh i i it should be possible there's

635
00:23:14,799 --> 00:23:19,840
no i don't see any

636
00:23:16,000 --> 00:23:20,880
like big technical blocking it it's just

637
00:23:19,840 --> 00:23:23,918
that somebody has to

638
00:23:20,880 --> 00:23:26,080
to contribute it and do it but it's say

639
00:23:23,919 --> 00:23:27,200
let's say i want to use that and i want

640
00:23:26,080 --> 00:23:29,600
to use it

641
00:23:27,200 --> 00:23:31,520
because we don't use checkpoints yeah

642
00:23:29,600 --> 00:23:34,080
how would is there any

643
00:23:31,520 --> 00:23:35,520
like is there and we could have any kind

644
00:23:34,080 --> 00:23:38,799
of power to do it

645
00:23:35,520 --> 00:23:41,840
within my like manually like

646
00:23:38,799 --> 00:23:41,840
triggering events

647
00:23:42,159 --> 00:23:45,279
there are some if you look at the the

648
00:23:43,840 --> 00:23:48,559
python library

649
00:23:45,279 --> 00:23:50,559
there is some there's some basic basic

650
00:23:48,559 --> 00:23:52,480
tutorial how to set that up how to send

651
00:23:50,559 --> 00:23:54,480
events and and

652
00:23:52,480 --> 00:23:55,760
receive events and then there's also

653
00:23:54,480 --> 00:23:58,400
also something called i think it's

654
00:23:55,760 --> 00:24:00,000
called a full easy to use or

655
00:23:58,400 --> 00:24:01,600
which is basically a set of docker

656
00:24:00,000 --> 00:24:04,480
containers that you could just

657
00:24:01,600 --> 00:24:05,199
spin up and you get a full like a small

658
00:24:04,480 --> 00:24:07,919
pipeline

659
00:24:05,200 --> 00:24:09,360
which produces events but i don't it's

660
00:24:07,919 --> 00:24:11,440
it's that's something that erickson

661
00:24:09,360 --> 00:24:14,158
contributed i don't know if all of it is

662
00:24:11,440 --> 00:24:16,240
open sourced yet might be but it's

663
00:24:14,159 --> 00:24:18,080
basically something you can try out

664
00:24:16,240 --> 00:24:33,840
to get some messages going and then try

665
00:24:18,080 --> 00:24:33,840
to get a feel for how how it works

666
00:24:39,279 --> 00:24:46,240
if you would like to for example reduce

667
00:24:41,520 --> 00:24:49,440
lead times

668
00:24:46,240 --> 00:24:51,039
yes absolutely uh so the question was uh

669
00:24:49,440 --> 00:24:53,039
since we've been sending events for

670
00:24:51,039 --> 00:24:55,360
several years now within ericsson

671
00:24:53,039 --> 00:24:56,320
uh we have of course a lot of data

672
00:24:55,360 --> 00:24:58,399
accumulated

673
00:24:56,320 --> 00:25:00,639
so we the question was if we can look at

674
00:24:58,400 --> 00:25:02,480
lead times and see where the bottlenecks

675
00:25:00,640 --> 00:25:04,799
and the pipelines and yes of course we

676
00:25:02,480 --> 00:25:06,000
do have that possibility and that's one

677
00:25:04,799 --> 00:25:07,600
of the

678
00:25:06,000 --> 00:25:09,279
great benefits that we've seen

679
00:25:07,600 --> 00:25:11,199
internally at least

680
00:25:09,279 --> 00:25:13,520
and that's why i think i don't know how

681
00:25:11,200 --> 00:25:16,720
many millions of events we have

682
00:25:13,520 --> 00:25:19,600
stored but there's a lot of them

683
00:25:16,720 --> 00:25:20,159
so it's indeed possible if you have like

684
00:25:19,600 --> 00:25:21,840
a

685
00:25:20,159 --> 00:25:23,279
implementation of a storage somewhere

686
00:25:21,840 --> 00:25:24,240
and then you can look it up and you can

687
00:25:23,279 --> 00:25:25,840
see

688
00:25:24,240 --> 00:25:27,600
because all the events are time stamped

689
00:25:25,840 --> 00:25:28,320
so you can also see lead times between

690
00:25:27,600 --> 00:25:29,678
the events

691
00:25:28,320 --> 00:25:33,600
between different activities in your

692
00:25:29,679 --> 00:25:35,919
pipeline which is very useful

693
00:25:33,600 --> 00:25:37,199
and yes frederick mentioned i'd just

694
00:25:35,919 --> 00:25:40,880
like to add because

695
00:25:37,200 --> 00:25:42,880
aside from the protocol we have some

696
00:25:40,880 --> 00:25:44,159
example implementations of services

697
00:25:42,880 --> 00:25:47,679
surrounding the protocol

698
00:25:44,159 --> 00:25:49,279
helping to send the events helping to

699
00:25:47,679 --> 00:25:50,799
visualize them i think we also have open

700
00:25:49,279 --> 00:25:54,080
source and they're more

701
00:25:50,799 --> 00:25:56,240
coming the more planned for that

702
00:25:54,080 --> 00:25:58,158
it's just a matter of prioritization and

703
00:25:56,240 --> 00:26:11,840
so on

704
00:25:58,159 --> 00:26:11,840
any more questions yes in the back

705
00:26:16,320 --> 00:26:21,678
so the question was have we tried to

706
00:26:19,520 --> 00:26:23,760
use eiffel outside of development to

707
00:26:21,679 --> 00:26:27,120
trigger some manual activities

708
00:26:23,760 --> 00:26:30,320
if i understood it correctly and

709
00:26:27,120 --> 00:26:33,918
not i'm not aware that we

710
00:26:30,320 --> 00:26:36,240
listen and act upon these events

711
00:26:33,919 --> 00:26:37,120
and then doing some sort of manual step

712
00:26:36,240 --> 00:26:40,640
of course it

713
00:26:37,120 --> 00:26:43,918
it's at all possible but the

714
00:26:40,640 --> 00:26:46,000
listeners usually are performing some

715
00:26:43,919 --> 00:26:49,600
sort of automatic task afterwards

716
00:26:46,000 --> 00:26:52,960
and as far as i know we mostly focus on

717
00:26:49,600 --> 00:26:56,719
up until continuous delivery sort of

718
00:26:52,960 --> 00:26:58,080
deployment stages don't really trigger

719
00:26:56,720 --> 00:27:02,400
on eiffel events

720
00:26:58,080 --> 00:27:05,279
later on yet at least

721
00:27:02,400 --> 00:27:06,559
i can add something to that so so there

722
00:27:05,279 --> 00:27:09,520
are there are

723
00:27:06,559 --> 00:27:10,720
like more generic a full events like

724
00:27:09,520 --> 00:27:12,559
announcement events

725
00:27:10,720 --> 00:27:14,000
that say say something that something

726
00:27:12,559 --> 00:27:16,720
has happened and you could

727
00:27:14,000 --> 00:27:17,679
definitely use that for for for

728
00:27:16,720 --> 00:27:19,039
signaling

729
00:27:17,679 --> 00:27:21,039
other people in the organization and we

730
00:27:19,039 --> 00:27:23,360
actually use that to

731
00:27:21,039 --> 00:27:25,279
a sort of a debugging thing that we so

732
00:27:23,360 --> 00:27:27,840
we know that we've gone a certain

733
00:27:25,279 --> 00:27:29,600
path through our testing ci system we do

734
00:27:27,840 --> 00:27:31,840
announcements here and there to see okay

735
00:27:29,600 --> 00:27:33,840
we've gone this far because it's

736
00:27:31,840 --> 00:27:35,520
it's a microservices architecture it's

737
00:27:33,840 --> 00:27:37,279
kind of hard to keep track of everything

738
00:27:35,520 --> 00:27:38,639
so so it's it's a handy thing but there

739
00:27:37,279 --> 00:27:40,320
are announcements events that are very

740
00:27:38,640 --> 00:27:43,120
generic so you can use them for

741
00:27:40,320 --> 00:27:43,120
for almost anything

742
00:27:45,440 --> 00:28:02,880
any more questions

743
00:27:49,840 --> 00:28:02,879
okay thank you

