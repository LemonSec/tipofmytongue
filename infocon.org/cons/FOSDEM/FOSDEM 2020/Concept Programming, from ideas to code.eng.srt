1
00:00:06,080 --> 00:00:08,559
okay

2
00:00:06,720 --> 00:00:11,200
so we'll start with the with the next

3
00:00:08,559 --> 00:00:13,040
talk by christoph the donation

4
00:00:11,200 --> 00:00:15,040
uh concept programming will be talking

5
00:00:13,040 --> 00:00:16,799
about constant programming

6
00:00:15,040 --> 00:00:19,038
hello so my name is christopher de dinos

7
00:00:16,800 --> 00:00:20,480
and it's indeed hard to say so thank you

8
00:00:19,039 --> 00:00:24,640
for

9
00:00:20,480 --> 00:00:27,199
um and my objective today is to uh

10
00:00:24,640 --> 00:00:28,880
make you better programmers like make

11
00:00:27,199 --> 00:00:31,439
making you think about something that

12
00:00:28,880 --> 00:00:33,839
programmers usually don't think about

13
00:00:31,439 --> 00:00:35,680
and uh help you figure out mistakes that

14
00:00:33,840 --> 00:00:37,520
you may be making in your code because

15
00:00:35,680 --> 00:00:40,559
everybody has been making them

16
00:00:37,520 --> 00:00:41,280
for 20 or 30 years so who is it who is a

17
00:00:40,559 --> 00:00:44,239
developer

18
00:00:41,280 --> 00:00:46,879
in the audience okay so i'm talking to

19
00:00:44,239 --> 00:00:50,000
the right crowd

20
00:00:46,879 --> 00:00:52,239
so what is concept programming basically

21
00:00:50,000 --> 00:00:53,120
it's focusing on the translation from

22
00:00:52,239 --> 00:00:55,360
wetware

23
00:00:53,120 --> 00:00:58,718
which is in your head into software

24
00:00:55,360 --> 00:01:01,680
which is into a machine so it looks

25
00:00:58,719 --> 00:01:01,680
extremely simple

26
00:01:02,079 --> 00:01:06,159
like this right basically it's a

27
00:01:04,159 --> 00:01:08,479
one-to-one mapping

28
00:01:06,159 --> 00:01:10,840
turns out it's not that simple because

29
00:01:08,479 --> 00:01:14,240
for instance i have this in my head

30
00:01:10,840 --> 00:01:17,759
right and when i go into code

31
00:01:14,240 --> 00:01:20,560
it looks more like this who has

32
00:01:17,759 --> 00:01:20,560
this experience

33
00:01:20,799 --> 00:01:26,720
okay so again right crowd so

34
00:01:24,560 --> 00:01:28,560
what you remember the wysiwyg where your

35
00:01:26,720 --> 00:01:31,280
old timers might remember

36
00:01:28,560 --> 00:01:32,479
what you think is what you see is what

37
00:01:31,280 --> 00:01:36,400
you get

38
00:01:32,479 --> 00:01:40,158
in software what you think is not

39
00:01:36,400 --> 00:01:43,040
what you get

40
00:01:40,159 --> 00:01:44,720
so let's try uh to identify a few

41
00:01:43,040 --> 00:01:46,960
problems in the code

42
00:01:44,720 --> 00:01:48,798
and going from intuition on stuff that

43
00:01:46,960 --> 00:01:51,600
doesn't quite work as we want

44
00:01:48,799 --> 00:01:52,320
to method i like this this picture i was

45
00:01:51,600 --> 00:01:55,600
biking

46
00:01:52,320 --> 00:01:57,679
uh near to my home and i got

47
00:01:55,600 --> 00:01:59,839
this nice car that polluted me with a

48
00:01:57,680 --> 00:02:01,920
diesel exhaust while i was biking

49
00:01:59,840 --> 00:02:03,680
and then they got stuck and i saw them

50
00:02:01,920 --> 00:02:04,560
trying to get out of the rock they were

51
00:02:03,680 --> 00:02:06,960
on

52
00:02:04,560 --> 00:02:08,000
and they had no method to it so they

53
00:02:06,960 --> 00:02:10,959
basically

54
00:02:08,000 --> 00:02:12,319
uh stayed stuck there until i could fire

55
00:02:10,959 --> 00:02:14,080
fire man

56
00:02:12,319 --> 00:02:15,679
okay so let's start with something that

57
00:02:14,080 --> 00:02:17,200
i call pseudometrics

58
00:02:15,680 --> 00:02:19,680
and i'm sorry if i turn my back to you i

59
00:02:17,200 --> 00:02:21,040
can't get a mirroring to work here so i

60
00:02:19,680 --> 00:02:24,640
have to look at the screen to

61
00:02:21,040 --> 00:02:26,720
check that it's okay so pseudometrics

62
00:02:24,640 --> 00:02:28,799
are pseudo because we can't really

63
00:02:26,720 --> 00:02:30,400
measure what is in our brain yet

64
00:02:28,800 --> 00:02:32,800
however you'll see that they are quite

65
00:02:30,400 --> 00:02:35,599
intuitive and easy to use

66
00:02:32,800 --> 00:02:36,319
syntactic noise for example is code that

67
00:02:35,599 --> 00:02:39,359
does not

68
00:02:36,319 --> 00:02:42,958
look as expected an example

69
00:02:39,360 --> 00:02:44,800
is in lisp you write plus two three

70
00:02:42,959 --> 00:02:46,319
whereas in mathematical notations you

71
00:02:44,800 --> 00:02:48,959
write two plus three

72
00:02:46,319 --> 00:02:50,000
so that is an example of syntactic noise

73
00:02:48,959 --> 00:02:53,599
semantic noise

74
00:02:50,000 --> 00:02:55,760
is code that does not behave as expected

75
00:02:53,599 --> 00:02:57,839
the next example of that is small talk

76
00:02:55,760 --> 00:02:59,280
where if you write 2 plus 3 times 5 you

77
00:02:57,840 --> 00:03:02,319
get 25

78
00:02:59,280 --> 00:03:04,319
and not 17 because small talk everything

79
00:03:02,319 --> 00:03:06,640
is an object and

80
00:03:04,319 --> 00:03:08,720
uh basically it passes objects left to

81
00:03:06,640 --> 00:03:10,399
right therefore priorities are not

82
00:03:08,720 --> 00:03:13,760
respected precedence is not respected

83
00:03:10,400 --> 00:03:16,400
and you get 25 instead of 17.

84
00:03:13,760 --> 00:03:18,079
when i mentioned that to allen k face to

85
00:03:16,400 --> 00:03:19,840
face his answer is yes because

86
00:03:18,080 --> 00:03:22,959
mathematics are wrong

87
00:03:19,840 --> 00:03:26,720
i think this is the wrong answer

88
00:03:22,959 --> 00:03:28,879
bandwidth is an analysis of

89
00:03:26,720 --> 00:03:30,080
how much of the problem the your code

90
00:03:28,879 --> 00:03:31,518
does cover

91
00:03:30,080 --> 00:03:33,840
for instance in okay ml you have to

92
00:03:31,519 --> 00:03:36,319
write 2.0 plus dot

93
00:03:33,840 --> 00:03:36,879
3.0 and this plus dot means that the

94
00:03:36,319 --> 00:03:38,720
plus

95
00:03:36,879 --> 00:03:40,959
in a camel does not cover floating point

96
00:03:38,720 --> 00:03:43,359
numbers so it has a low bandwidth

97
00:03:40,959 --> 00:03:45,680
compared to the plus in c

98
00:03:43,360 --> 00:03:47,760
and finally the signal to noise ratio is

99
00:03:45,680 --> 00:03:49,519
what fraction of your code is useful

100
00:03:47,760 --> 00:03:51,518
and here you know we can take for

101
00:03:49,519 --> 00:03:52,159
instance a complex operator in c plus

102
00:03:51,519 --> 00:03:54,560
plus

103
00:03:52,159 --> 00:03:55,840
where all the stuff in red is really not

104
00:03:54,560 --> 00:03:56,879
that useful it doesn't give you

105
00:03:55,840 --> 00:03:59,040
information

106
00:03:56,879 --> 00:04:00,560
i included that the return type of the

107
00:03:59,040 --> 00:04:01,599
function which you can deduce from the

108
00:04:00,560 --> 00:04:05,040
expression in the

109
00:04:01,599 --> 00:04:07,280
function now what is interesting and the

110
00:04:05,040 --> 00:04:10,079
analogy to music or signal processing

111
00:04:07,280 --> 00:04:10,799
is that much like in music what is noise

112
00:04:10,080 --> 00:04:13,120
one person

113
00:04:10,799 --> 00:04:14,640
might actually sound like music to

114
00:04:13,120 --> 00:04:16,320
someone else

115
00:04:14,640 --> 00:04:18,639
so that's important to remember all this

116
00:04:16,320 --> 00:04:21,759
because it's in our head it's subjective

117
00:04:18,639 --> 00:04:24,320
however it is useful so

118
00:04:21,759 --> 00:04:25,520
let's i mentioned mistakes that

119
00:04:24,320 --> 00:04:27,199
everybody does

120
00:04:25,520 --> 00:04:28,639
let me start with a simple example which

121
00:04:27,199 --> 00:04:30,720
i call concept cast

122
00:04:28,639 --> 00:04:32,160
concept cast is when you replace a

123
00:04:30,720 --> 00:04:34,479
concept in your head

124
00:04:32,160 --> 00:04:35,360
with another one that is related for

125
00:04:34,479 --> 00:04:36,960
example and

126
00:04:35,360 --> 00:04:38,240
the problem with that is that very often

127
00:04:36,960 --> 00:04:39,198
it's unconscious you don't know you're

128
00:04:38,240 --> 00:04:42,080
doing that

129
00:04:39,199 --> 00:04:43,280
and it seems to work so what's wrong

130
00:04:42,080 --> 00:04:45,280
with it

131
00:04:43,280 --> 00:04:46,960
but it generates many problems because

132
00:04:45,280 --> 00:04:49,440
you lose a lot of semantics

133
00:04:46,960 --> 00:04:50,799
and a lot of signal and you introduce

134
00:04:49,440 --> 00:04:52,800
another employees

135
00:04:50,800 --> 00:04:54,639
so here are a few examples of concept

136
00:04:52,800 --> 00:04:56,639
cast an example is

137
00:04:54,639 --> 00:04:57,840
all the languages that don't have varied

138
00:04:56,639 --> 00:04:59,919
functions

139
00:04:57,840 --> 00:05:02,320
you need to replace a variety function

140
00:04:59,919 --> 00:05:05,440
with a list

141
00:05:02,320 --> 00:05:06,800
when you have text well if your language

142
00:05:05,440 --> 00:05:07,199
does not really support the notion of

143
00:05:06,800 --> 00:05:08,800
text

144
00:05:07,199 --> 00:05:10,880
you can replace that with a pointer to a

145
00:05:08,800 --> 00:05:12,479
chart anybody who has programmed in c

146
00:05:10,880 --> 00:05:14,240
knows how many mistakes we can make out

147
00:05:12,479 --> 00:05:16,560
of that

148
00:05:14,240 --> 00:05:18,400
right line same thing you can replace

149
00:05:16,560 --> 00:05:20,000
the idea of writing a line

150
00:05:18,400 --> 00:05:21,679
with the idea of writing a character

151
00:05:20,000 --> 00:05:25,759
that skips a line

152
00:05:21,680 --> 00:05:27,919
which is fancy on all terminals in 1972

153
00:05:25,759 --> 00:05:29,520
but today causes many problems like for

154
00:05:27,919 --> 00:05:30,080
instance there is practically no way

155
00:05:29,520 --> 00:05:33,520
today in c

156
00:05:30,080 --> 00:05:35,840
plus plus to write a line

157
00:05:33,520 --> 00:05:37,680
in a correct portable way that doesn't

158
00:05:35,840 --> 00:05:39,440
break because you put a lock around it

159
00:05:37,680 --> 00:05:42,960
so if you have multi threads

160
00:05:39,440 --> 00:05:44,719
multiple threads you get mixed outputs

161
00:05:42,960 --> 00:05:47,039
uh you can also rip and that's basically

162
00:05:44,720 --> 00:05:49,280
the the next one it's a replacing right

163
00:05:47,039 --> 00:05:50,240
with an operator that does one operation

164
00:05:49,280 --> 00:05:52,239
at a time

165
00:05:50,240 --> 00:05:54,160
because at the time this was introduced

166
00:05:52,240 --> 00:05:54,880
c plus plus did not have proper violent

167
00:05:54,160 --> 00:05:57,280
type safe

168
00:05:54,880 --> 00:05:58,880
functions so they had to replace one one

169
00:05:57,280 --> 00:06:00,880
concept with another

170
00:05:58,880 --> 00:06:02,479
replacing an array of something with a

171
00:06:00,880 --> 00:06:05,600
pointer of to something

172
00:06:02,479 --> 00:06:07,120
also found in c causes so many mistakes

173
00:06:05,600 --> 00:06:12,160
you know any cve

174
00:06:07,120 --> 00:06:15,600
you can take any 90s any 100 tv 99

175
00:06:12,160 --> 00:06:18,720
one of these issues replacing a of

176
00:06:15,600 --> 00:06:20,000
n indexing in an array with star of a

177
00:06:18,720 --> 00:06:23,600
plus n which is the definition

178
00:06:20,000 --> 00:06:26,000
in c how many of you didn't know that

179
00:06:23,600 --> 00:06:28,479
so there's a good fraction now the fact

180
00:06:26,000 --> 00:06:31,680
is that you can write in correct c

181
00:06:28,479 --> 00:06:33,520
minus one bracket a and it indexes the

182
00:06:31,680 --> 00:06:36,720
one element before your array

183
00:06:33,520 --> 00:06:38,240
and it's perfectly legal and the last

184
00:06:36,720 --> 00:06:40,319
one which is more complicated is

185
00:06:38,240 --> 00:06:42,240
replacing the idea of resource with a c

186
00:06:40,319 --> 00:06:43,680
plus plus idea of resource acquisition

187
00:06:42,240 --> 00:06:45,919
is initialization

188
00:06:43,680 --> 00:06:46,880
this one is much more subtle and if you

189
00:06:45,919 --> 00:06:50,080
want to know more

190
00:06:46,880 --> 00:06:51,440
please ask me after the talk now let me

191
00:06:50,080 --> 00:06:53,520
go to a very very

192
00:06:51,440 --> 00:06:54,479
new concept none of you has ever used

193
00:06:53,520 --> 00:06:56,479
that concept

194
00:06:54,479 --> 00:06:58,000
the concept of maximum which is written

195
00:06:56,479 --> 00:07:01,440
from the wikipedia page

196
00:06:58,000 --> 00:07:04,720
as mean of a any number of

197
00:07:01,440 --> 00:07:06,000
things is the first one if it's

198
00:07:04,720 --> 00:07:08,160
smaller than all the others then the

199
00:07:06,000 --> 00:07:10,319
mean of the all the others and otherwise

200
00:07:08,160 --> 00:07:12,400
is the mean of all the others looks

201
00:07:10,319 --> 00:07:16,160
simple right let's try this as t

202
00:07:12,400 --> 00:07:17,520
so i can write this as int min and

203
00:07:16,160 --> 00:07:19,840
what is the problem with this low

204
00:07:17,520 --> 00:07:22,479
bandwidth only deals with integers

205
00:07:19,840 --> 00:07:23,840
can't deal with more than one two values

206
00:07:22,479 --> 00:07:25,758
so it does only one comparison so

207
00:07:23,840 --> 00:07:27,520
basically we are quite far away

208
00:07:25,759 --> 00:07:29,360
i can increase the bandwidth a little

209
00:07:27,520 --> 00:07:31,120
bit in cpp

210
00:07:29,360 --> 00:07:32,960
using the c pro processor which is the

211
00:07:31,120 --> 00:07:35,840
standard definition of minion c

212
00:07:32,960 --> 00:07:37,440
that most of us have used and that is

213
00:07:35,840 --> 00:07:38,880
much better because now it works with

214
00:07:37,440 --> 00:07:40,560
floating point

215
00:07:38,880 --> 00:07:42,560
that's the good news the bad news is it

216
00:07:40,560 --> 00:07:44,319
also works with char star remember the

217
00:07:42,560 --> 00:07:45,759
text to child star conversion

218
00:07:44,319 --> 00:07:47,280
okay so now for our tester it gives a

219
00:07:45,759 --> 00:07:48,479
completely nonsensical result because it

220
00:07:47,280 --> 00:07:50,719
compares not the text

221
00:07:48,479 --> 00:07:51,599
but the pointers which makes has

222
00:07:50,720 --> 00:07:55,039
absolutely no use

223
00:07:51,599 --> 00:07:57,840
whatsoever okay let me try that in c

224
00:07:55,039 --> 00:07:59,599
plus plus so now i write the template

225
00:07:57,840 --> 00:08:00,878
larger bandwidth now because now i can

226
00:07:59,599 --> 00:08:02,800
have any type

227
00:08:00,879 --> 00:08:04,800
and my less than is more controlled so

228
00:08:02,800 --> 00:08:07,199
it still fades on pointers

229
00:08:04,800 --> 00:08:08,400
but it doesn't fail on an ecd string

230
00:08:07,199 --> 00:08:11,840
because operators

231
00:08:08,400 --> 00:08:14,878
less than exists on a studio swing

232
00:08:11,840 --> 00:08:17,119
okay i've been writing

233
00:08:14,879 --> 00:08:18,639
languages inspired by this since the

234
00:08:17,120 --> 00:08:22,160
late 1990s

235
00:08:18,639 --> 00:08:24,160
and in 2001 one of my compilers could

236
00:08:22,160 --> 00:08:26,240
actually compile that stuff

237
00:08:24,160 --> 00:08:27,280
and what this says is that a type is

238
00:08:26,240 --> 00:08:28,800
ordered if

239
00:08:27,280 --> 00:08:31,359
it has a less than that returns a

240
00:08:28,800 --> 00:08:34,000
boolean and the mean of one ordered

241
00:08:31,360 --> 00:08:34,560
entity is that value the mean of one

242
00:08:34,000 --> 00:08:36,000
order and

243
00:08:34,559 --> 00:08:37,919
other stuff if you do the mean of the

244
00:08:36,000 --> 00:08:39,200
rest this looks much more like what you

245
00:08:37,919 --> 00:08:41,919
have on the left right

246
00:08:39,200 --> 00:08:42,719
but there is still a bit of of extra

247
00:08:41,919 --> 00:08:44,399
noise

248
00:08:42,719 --> 00:08:45,839
but i'm still very happy with this one

249
00:08:44,399 --> 00:08:48,080
because

250
00:08:45,839 --> 00:08:49,600
frankly i so i've been on the simple at

251
00:08:48,080 --> 00:08:51,360
that time i was doing that stuff i was

252
00:08:49,600 --> 00:08:52,480
on the simplest plus committee and i've

253
00:08:51,360 --> 00:08:54,880
been talking to super

254
00:08:52,480 --> 00:08:56,880
plus committee members and only 20 years

255
00:08:54,880 --> 00:08:58,080
later we see some concepts of p and c

256
00:08:56,880 --> 00:08:59,600
plus plus except they are not my

257
00:08:58,080 --> 00:09:00,640
concepts but well at least there's

258
00:08:59,600 --> 00:09:03,200
something

259
00:09:00,640 --> 00:09:03,920
now in c plus 11 now you can have varied

260
00:09:03,200 --> 00:09:06,240
templates

261
00:09:03,920 --> 00:09:08,560
and this is again just only 10 years

262
00:09:06,240 --> 00:09:10,399
after excel was doing it

263
00:09:08,560 --> 00:09:11,839
but i'm glad it's there so now we can

264
00:09:10,399 --> 00:09:13,839
use that

265
00:09:11,839 --> 00:09:15,600
okay in java we have nothing so

266
00:09:13,839 --> 00:09:17,200
basically when java looks up to c plus

267
00:09:15,600 --> 00:09:20,000
plus it does all the mistakes

268
00:09:17,200 --> 00:09:22,000
now it has a list and you have a list of

269
00:09:20,000 --> 00:09:24,080
untyped objects and you basically have

270
00:09:22,000 --> 00:09:26,080
all the drawbacks that you had before

271
00:09:24,080 --> 00:09:27,120
and for fun in max lisp

272
00:09:26,080 --> 00:09:29,839
you can actually get something

273
00:09:27,120 --> 00:09:30,800
relatively decent so that's what it

274
00:09:29,839 --> 00:09:32,959
looks like

275
00:09:30,800 --> 00:09:33,920
in my current language and just in case

276
00:09:32,959 --> 00:09:35,920
you're curious

277
00:09:33,920 --> 00:09:37,519
this is not completely vaporware the

278
00:09:35,920 --> 00:09:39,519
definition that you see there

279
00:09:37,519 --> 00:09:41,040
is the definition that is used in the

280
00:09:39,519 --> 00:09:42,000
presentation that i'm giving you because

281
00:09:41,040 --> 00:09:45,439
that presentation is

282
00:09:42,000 --> 00:09:48,399
written in this language dot 3d with

283
00:09:45,440 --> 00:09:49,279
hence all the fancy animations so

284
00:09:48,399 --> 00:09:51,040
representing

285
00:09:49,279 --> 00:09:52,720
concepts in the code can the code be as

286
00:09:51,040 --> 00:09:55,920
rich as our brains

287
00:09:52,720 --> 00:09:58,080
let's try uh first of all let's try

288
00:09:55,920 --> 00:09:59,680
concept inspired naming to make the code

289
00:09:58,080 --> 00:10:02,480
understandable

290
00:09:59,680 --> 00:10:03,599
programmers for instance write file and

291
00:10:02,480 --> 00:10:05,440
they think file

292
00:10:03,600 --> 00:10:07,440
and it has the same properties if you

293
00:10:05,440 --> 00:10:09,200
call it cat it doesn't work

294
00:10:07,440 --> 00:10:12,079
so we all do concept programming without

295
00:10:09,200 --> 00:10:13,760
knowing it thank you

296
00:10:12,079 --> 00:10:15,599
and that means you can do concept-based

297
00:10:13,760 --> 00:10:16,959
composition to make the code scalable

298
00:10:15,600 --> 00:10:19,600
for instance in code

299
00:10:16,959 --> 00:10:22,800
like in real life life a file can be

300
00:10:19,600 --> 00:10:22,800
used to build a database

301
00:10:23,200 --> 00:10:27,600
then you can have concept inspired

302
00:10:24,720 --> 00:10:29,200
behaviors to make the code reusable

303
00:10:27,600 --> 00:10:31,440
for instance you don't need to know the

304
00:10:29,200 --> 00:10:33,200
os magic behind file

305
00:10:31,440 --> 00:10:34,720
all you need to know is that it behaves

306
00:10:33,200 --> 00:10:36,480
like a file you can store stuff in it

307
00:10:34,720 --> 00:10:38,720
and it stays

308
00:10:36,480 --> 00:10:40,079
and finally concept-based specific

309
00:10:38,720 --> 00:10:41,279
specifications

310
00:10:40,079 --> 00:10:43,439
make the code manageable you can

311
00:10:41,279 --> 00:10:44,399
exchange stuff for instance the behavior

312
00:10:43,440 --> 00:10:46,880
file is

313
00:10:44,399 --> 00:10:48,880
to a large extent reliable portable

314
00:10:46,880 --> 00:10:50,320
documented etc so you all do concept

315
00:10:48,880 --> 00:10:50,640
programming without knowing it but we

316
00:10:50,320 --> 00:10:54,800
can

317
00:10:50,640 --> 00:10:56,319
do slightly more than that so let's

318
00:10:54,800 --> 00:10:58,160
think about the process of creating

319
00:10:56,320 --> 00:10:59,279
abstractions in our code of composing

320
00:10:58,160 --> 00:11:01,279
stuff

321
00:10:59,279 --> 00:11:03,040
it started like this with fortran basic

322
00:11:01,279 --> 00:11:05,040
et cetera so where the abstraction you

323
00:11:03,040 --> 00:11:06,800
had where compiler provided

324
00:11:05,040 --> 00:11:08,399
symbols expression stuff like that and

325
00:11:06,800 --> 00:11:10,319
then the next step was

326
00:11:08,399 --> 00:11:11,839
to have structured programming so you

327
00:11:10,320 --> 00:11:14,560
can could have proper loops you could

328
00:11:11,839 --> 00:11:16,560
have function names like plot etc

329
00:11:14,560 --> 00:11:17,599
then the next step was objects all this

330
00:11:16,560 --> 00:11:20,880
was you know

331
00:11:17,600 --> 00:11:22,720
when i was young a long time ago then

332
00:11:20,880 --> 00:11:24,000
java distributed programming and you

333
00:11:22,720 --> 00:11:27,600
have more stuff and p

334
00:11:24,000 --> 00:11:28,079
python came well i take python xml et

335
00:11:27,600 --> 00:11:29,680
cetera

336
00:11:28,079 --> 00:11:31,439
it's basically you start composing stuff

337
00:11:29,680 --> 00:11:33,199
more than writing your own

338
00:11:31,440 --> 00:11:35,279
um and it's basically you're you're

339
00:11:33,200 --> 00:11:37,279
looking at software components that was

340
00:11:35,279 --> 00:11:39,200
a dream when i was a kid

341
00:11:37,279 --> 00:11:40,839
so what does excel bring you to that

342
00:11:39,200 --> 00:11:44,079
well basically

343
00:11:40,839 --> 00:11:45,760
um you start there

344
00:11:44,079 --> 00:11:47,439
and that's the mars lawyer right it's an

345
00:11:45,760 --> 00:11:48,560
exponential low so if you don't change

346
00:11:47,440 --> 00:11:50,800
the twos what happens is you

347
00:11:48,560 --> 00:11:52,160
you fall under the law as time goes by

348
00:11:50,800 --> 00:11:54,479
you don't change the twos you just

349
00:11:52,160 --> 00:11:56,000
automatically follow that so you need to

350
00:11:54,480 --> 00:11:58,079
change paradigm every

351
00:11:56,000 --> 00:12:00,320
and year to make progress so you're

352
00:11:58,079 --> 00:12:03,040
always there in practice

353
00:12:00,320 --> 00:12:03,440
so the idea beside me behind my language

354
00:12:03,040 --> 00:12:04,560
uh

355
00:12:03,440 --> 00:12:06,160
and by the way i'm giving a talk

356
00:12:04,560 --> 00:12:07,279
tomorrow on the language specifically if

357
00:12:06,160 --> 00:12:09,760
you're interested

358
00:12:07,279 --> 00:12:10,320
um is is to have something that is on

359
00:12:09,760 --> 00:12:12,160
demand

360
00:12:10,320 --> 00:12:14,320
you evolve your set of concepts all the

361
00:12:12,160 --> 00:12:17,040
time excel stands for extensive

362
00:12:14,320 --> 00:12:17,920
language you add concepts as you go and

363
00:12:17,040 --> 00:12:19,839
the idea is that

364
00:12:17,920 --> 00:12:21,519
instead of being on the right you can

365
00:12:19,839 --> 00:12:25,279
basically bounce whenever you need

366
00:12:21,519 --> 00:12:26,480
and you can take advantage of this stuff

367
00:12:25,279 --> 00:12:28,560
it's important because the set of

368
00:12:26,480 --> 00:12:30,079
concepts is infinite

369
00:12:28,560 --> 00:12:31,760
for instance even if we consider only

370
00:12:30,079 --> 00:12:33,199
those that are relevant to a program

371
00:12:31,760 --> 00:12:34,880
like for instance here we can exclude

372
00:12:33,200 --> 00:12:36,880
the cigarette lighter if it's a car

373
00:12:34,880 --> 00:12:39,040
simulator

374
00:12:36,880 --> 00:12:39,920
we still need a number of minority

375
00:12:39,040 --> 00:12:43,040
paradigms

376
00:12:39,920 --> 00:12:45,360
like uh i'm going to show a few but

377
00:12:43,040 --> 00:12:47,760
basically that means you invent your own

378
00:12:45,360 --> 00:12:48,959
incompatible language every time

379
00:12:47,760 --> 00:12:51,120
so for instance you have logic

380
00:12:48,959 --> 00:12:52,959
programming that was a language problem

381
00:12:51,120 --> 00:12:54,480
or you have designed by contract that

382
00:12:52,959 --> 00:12:56,079
made it to a few other languages but

383
00:12:54,480 --> 00:12:58,240
basically for

384
00:12:56,079 --> 00:13:00,000
today the best implementation of that

385
00:12:58,240 --> 00:13:01,920
remains a iphone

386
00:13:00,000 --> 00:13:03,519
and in the end you create your own

387
00:13:01,920 --> 00:13:06,560
language like i just did

388
00:13:03,519 --> 00:13:08,240
basically so keep going like this

389
00:13:06,560 --> 00:13:10,239
i'm going to very very quickly go

390
00:13:08,240 --> 00:13:10,560
through a few applications to show you

391
00:13:10,240 --> 00:13:12,880
that

392
00:13:10,560 --> 00:13:14,079
in real life it does actually matter for

393
00:13:12,880 --> 00:13:15,839
instance

394
00:13:14,079 --> 00:13:17,199
i wrote a game i just gave a talk you

395
00:13:15,839 --> 00:13:18,880
can look it up later when you're back

396
00:13:17,200 --> 00:13:20,959
from first then but i gave a talk in the

397
00:13:18,880 --> 00:13:22,880
ritual gaming that's what i was doing

398
00:13:20,959 --> 00:13:25,199
when i was 18 or something

399
00:13:22,880 --> 00:13:26,560
that was the first 3d platform game how

400
00:13:25,200 --> 00:13:30,079
did concept programming

401
00:13:26,560 --> 00:13:32,239
play into that well

402
00:13:30,079 --> 00:13:34,479
that's the description of 3d objects in

403
00:13:32,240 --> 00:13:37,040
it to you it's probably unreadable but

404
00:13:34,480 --> 00:13:38,320
if you know like i did because i created

405
00:13:37,040 --> 00:13:41,599
it that

406
00:13:38,320 --> 00:13:44,959
z sorry z m five means

407
00:13:41,600 --> 00:13:46,480
along the z axis minus five x p five

408
00:13:44,959 --> 00:13:48,399
along the x axis plus

409
00:13:46,480 --> 00:13:50,399
five units etc this is actually a

410
00:13:48,399 --> 00:13:51,839
description i can replay in my head

411
00:13:50,399 --> 00:13:54,160
and i can understand what object i'm

412
00:13:51,839 --> 00:13:56,639
talking about so it's 3d modeling with

413
00:13:54,160 --> 00:13:58,560
only assembly language if you wish

414
00:13:56,639 --> 00:14:00,959
okay that's a bit far-fetched another

415
00:13:58,560 --> 00:14:02,399
example a car simulation

416
00:14:00,959 --> 00:14:04,000
that basically what the matrix focus

417
00:14:02,399 --> 00:14:05,839
electronics you put an electronic device

418
00:14:04,000 --> 00:14:08,639
in it it doesn't know it's not in a car

419
00:14:05,839 --> 00:14:10,880
so now you can run at 500 at 50 miles an

420
00:14:08,639 --> 00:14:14,880
hour in the sahara desert and run into

421
00:14:10,880 --> 00:14:17,120
a snow pile and see what happens

422
00:14:14,880 --> 00:14:18,959
okay where does concept programming play

423
00:14:17,120 --> 00:14:21,279
a role here in the development itself

424
00:14:18,959 --> 00:14:23,518
converting for instance between c and c

425
00:14:21,279 --> 00:14:27,040
plus c and visual basic

426
00:14:23,519 --> 00:14:29,519
is the description of the system itself

427
00:14:27,040 --> 00:14:30,639
the scenario language so you basically

428
00:14:29,519 --> 00:14:32,800
what changes here

429
00:14:30,639 --> 00:14:34,480
you start with the notations and then

430
00:14:32,800 --> 00:14:35,760
you create the tools to

431
00:14:34,480 --> 00:14:38,560
play with the notations that you

432
00:14:35,760 --> 00:14:41,120
understand that are part of your domain

433
00:14:38,560 --> 00:14:41,760
concept same thing with some games i

434
00:14:41,120 --> 00:14:44,079
wrote

435
00:14:41,760 --> 00:14:45,600
when i was young so in that case it's

436
00:14:44,079 --> 00:14:46,959
the matrix multiplication because there

437
00:14:45,600 --> 00:14:47,600
was a number of these games they

438
00:14:46,959 --> 00:14:50,239
actually

439
00:14:47,600 --> 00:14:50,720
went to the united states infrared uh

440
00:14:50,240 --> 00:14:53,760
you know

441
00:14:50,720 --> 00:14:55,360
connecting machines to infrared so

442
00:14:53,760 --> 00:14:57,519
what did actually these were just

443
00:14:55,360 --> 00:14:59,440
basically demos for that tool

444
00:14:57,519 --> 00:15:00,800
and that was a tool that allowed you to

445
00:14:59,440 --> 00:15:02,079
provide these machines at high level it

446
00:15:00,800 --> 00:15:03,439
was a cross compiler

447
00:15:02,079 --> 00:15:05,120
for the machine and you can see the same

448
00:15:03,440 --> 00:15:06,320
idea of trying to have

449
00:15:05,120 --> 00:15:08,720
the high level concepts that are

450
00:15:06,320 --> 00:15:12,320
relevant to what you're doing

451
00:15:08,720 --> 00:15:15,519
i'm going to skip the that one

452
00:15:12,320 --> 00:15:16,959
and just going to show you what tele3d

453
00:15:15,519 --> 00:15:19,120
looks like

454
00:15:16,959 --> 00:15:20,479
so you have dynamic text you have 3d

455
00:15:19,120 --> 00:15:23,519
transforms

456
00:15:20,480 --> 00:15:24,800
basically my question when i started

457
00:15:23,519 --> 00:15:27,839
trying to push the limits about my

458
00:15:24,800 --> 00:15:29,439
language was how do i go beyond

459
00:15:27,839 --> 00:15:31,440
standard programming and i thought oh

460
00:15:29,440 --> 00:15:33,759
documents that that's a good test

461
00:15:31,440 --> 00:15:35,360
and you see the result so i hope that

462
00:15:33,759 --> 00:15:36,880
this will give you ideas and sorry i'm

463
00:15:35,360 --> 00:15:39,910
out of time

464
00:15:36,880 --> 00:15:46,840
but i try to speak fast thank you

465
00:15:39,910 --> 00:15:46,839
[Applause]

