1
00:00:04,960 --> 00:00:10,559
or just

2
00:00:06,640 --> 00:00:14,960
maybe just the beginning you can

3
00:00:10,559 --> 00:00:17,198
i can begin directly start directly okay

4
00:00:14,960 --> 00:00:19,439
okay then i think it's the time great

5
00:00:17,199 --> 00:00:22,480
we'll uh start with our next speaker

6
00:00:19,439 --> 00:00:26,160
i xiao jin we'll be

7
00:00:22,480 --> 00:00:27,840
talking about i open wi-fi and um

8
00:00:26,160 --> 00:00:29,199
i'll hand it over thank you very much

9
00:00:27,840 --> 00:00:32,399
thank you

10
00:00:29,199 --> 00:00:35,680
thank you everybody i know you are

11
00:00:32,399 --> 00:00:36,320
tired or sleepy it's a long afternoon or

12
00:00:35,680 --> 00:00:39,920
long

13
00:00:36,320 --> 00:00:42,960
weekend so my presentation will be in a

14
00:00:39,920 --> 00:00:45,840
different way you don't need to ask

15
00:00:42,960 --> 00:00:45,840
questions

16
00:00:46,320 --> 00:00:53,840
i will ask questions for you

17
00:00:49,760 --> 00:00:57,599
to myself in this way i try to

18
00:00:53,840 --> 00:01:00,800
attract you from beginning to the end

19
00:00:57,600 --> 00:01:05,360
first question very basic what is

20
00:01:00,800 --> 00:01:08,000
open wi-fi it's not the wi-fi that

21
00:01:05,360 --> 00:01:09,200
gives you open access all over the world

22
00:01:08,000 --> 00:01:12,720
i know there is

23
00:01:09,200 --> 00:01:16,000
such a project also called open wi-fi

24
00:01:12,720 --> 00:01:19,600
unfortunately unfortunately this is

25
00:01:16,000 --> 00:01:24,000
not the answer is that

26
00:01:19,600 --> 00:01:28,479
open wi-fi in our project it represents

27
00:01:24,000 --> 00:01:32,079
the open source ieee 802.11 or wi-fi

28
00:01:28,479 --> 00:01:35,439
cheap design before this project

29
00:01:32,079 --> 00:01:37,679
i think many people only have

30
00:01:35,439 --> 00:01:38,960
one choice use some commercial wi-fi

31
00:01:37,680 --> 00:01:42,399
chip

32
00:01:38,960 --> 00:01:43,520
but after this project you have one more

33
00:01:42,399 --> 00:01:46,720
choice

34
00:01:43,520 --> 00:01:49,199
open source wi-fi chip

35
00:01:46,720 --> 00:01:50,640
but in this phase it's not a real wi-fi

36
00:01:49,200 --> 00:01:53,680
chip yet

37
00:01:50,640 --> 00:01:56,880
it's running in the ipga you might

38
00:01:53,680 --> 00:02:00,159
as you must know that fpga is uh

39
00:01:56,880 --> 00:02:03,280
or ipg verification is a very important

40
00:02:00,159 --> 00:02:06,000
step before you tape up tape out

41
00:02:03,280 --> 00:02:07,680
a real wi-fi chip right you use ipg to

42
00:02:06,000 --> 00:02:11,120
verify

43
00:02:07,680 --> 00:02:14,480
your ic design is correct so

44
00:02:11,120 --> 00:02:16,560
current face is ipg design

45
00:02:14,480 --> 00:02:18,959
you can just google open wi-fi you will

46
00:02:16,560 --> 00:02:21,680
find our github repository

47
00:02:18,959 --> 00:02:22,000
currently i think it's in a top three or

48
00:02:21,680 --> 00:02:25,120
top

49
00:02:22,000 --> 00:02:28,319
four item in the google search engine

50
00:02:25,120 --> 00:02:29,120
uh well maybe it depends on your browser

51
00:02:28,319 --> 00:02:32,799
or

52
00:02:29,120 --> 00:02:35,280
how or your most frequent most frequent

53
00:02:32,800 --> 00:02:36,160
searching words in your browser but in

54
00:02:35,280 --> 00:02:39,519
my

55
00:02:36,160 --> 00:02:39,519
browser is the third one

56
00:02:40,239 --> 00:02:45,120
okay why we say it's a cheap design or

57
00:02:43,599 --> 00:02:47,839
wi-fi cheap

58
00:02:45,120 --> 00:02:52,239
because it's not like it's it works not

59
00:02:47,840 --> 00:02:55,120
like the usrp or gnu radio stuff

60
00:02:52,239 --> 00:02:57,360
it's really work like a commercial wi-fi

61
00:02:55,120 --> 00:02:57,360
chip

62
00:02:57,680 --> 00:03:01,360
you may know or you may not the

63
00:03:00,080 --> 00:03:04,560
commercial wi-fi chip

64
00:03:01,360 --> 00:03:07,519
actually offers you two things the first

65
00:03:04,560 --> 00:03:10,640
one the silicon right the chip itself

66
00:03:07,519 --> 00:03:12,560
the second thing is the driver most of

67
00:03:10,640 --> 00:03:13,839
most of time i guess we use the linux

68
00:03:12,560 --> 00:03:15,840
driver

69
00:03:13,840 --> 00:03:17,840
then that's it right you insert the

70
00:03:15,840 --> 00:03:20,080
dongle

71
00:03:17,840 --> 00:03:21,200
the driver is autoloaded or you install

72
00:03:20,080 --> 00:03:24,000
it

73
00:03:21,200 --> 00:03:25,599
that's how commercial wi-fi chip works

74
00:03:24,000 --> 00:03:29,040
our design also works

75
00:03:25,599 --> 00:03:33,040
exactly in the same way we offer you

76
00:03:29,040 --> 00:03:36,159
the chip design which is ipga currently

77
00:03:33,040 --> 00:03:39,840
we also offer you the open source

78
00:03:36,159 --> 00:03:43,440
wi-fi driver which works

79
00:03:39,840 --> 00:03:46,480
below the linux native mac 802.11

80
00:03:43,440 --> 00:03:49,040
wifi phone framework this framework is

81
00:03:46,480 --> 00:03:53,840
used for almost all the commercial

82
00:03:49,040 --> 00:03:53,840
soft mac architecture wi-fi chip

83
00:03:55,120 --> 00:03:59,760
we also offer you a very tiny tool

84
00:03:57,680 --> 00:04:03,439
user-space tool to communicate

85
00:03:59,760 --> 00:04:05,760
with our driver and ipga

86
00:04:03,439 --> 00:04:07,040
so that's the basic architecture as you

87
00:04:05,760 --> 00:04:10,159
can see same as

88
00:04:07,040 --> 00:04:10,959
commercial chip actually if you go to

89
00:04:10,159 --> 00:04:12,840
our demo

90
00:04:10,959 --> 00:04:15,200
you can use your cell phone to connect

91
00:04:12,840 --> 00:04:18,639
our

92
00:04:15,200 --> 00:04:21,039
the chip the linux run over the chip and

93
00:04:18,639 --> 00:04:23,199
there's host apd there's a

94
00:04:21,040 --> 00:04:28,000
web server you can access it just like

95
00:04:23,199 --> 00:04:31,360
you access commercial wi-fi router

96
00:04:28,000 --> 00:04:35,040
nice okay next question

97
00:04:31,360 --> 00:04:38,240
i guess in your mind is that

98
00:04:35,040 --> 00:04:40,720
it's the open wi-fi chip better than

99
00:04:38,240 --> 00:04:41,520
commercial wi-fi chip right that's the

100
00:04:40,720 --> 00:04:45,120
quite

101
00:04:41,520 --> 00:04:49,520
direct question why should i use your

102
00:04:45,120 --> 00:04:49,520
chip is your chip better

103
00:04:52,960 --> 00:05:00,960
the answer is no and

104
00:04:56,639 --> 00:05:00,960
i remind you this is not a joke

105
00:05:01,840 --> 00:05:04,960
disappointed right

106
00:05:08,560 --> 00:05:12,160
well as you may know the those

107
00:05:10,639 --> 00:05:14,560
commercial wi-fi chip

108
00:05:12,160 --> 00:05:15,600
uh they support quite new standard right

109
00:05:14,560 --> 00:05:19,199
ac

110
00:05:15,600 --> 00:05:19,680
ax and they support many uh antennas

111
00:05:19,199 --> 00:05:22,720
right

112
00:05:19,680 --> 00:05:25,680
advanced mimo processing emu memo

113
00:05:22,720 --> 00:05:26,080
or high order mimo and they also support

114
00:05:25,680 --> 00:05:28,960
uh

115
00:05:26,080 --> 00:05:30,400
very high bandwidth that means very high

116
00:05:28,960 --> 00:05:33,919
throughput right

117
00:05:30,400 --> 00:05:35,198
20 micros 40 micros until 160 macros

118
00:05:33,919 --> 00:05:38,000
right

119
00:05:35,199 --> 00:05:39,199
those chip are quite advanced

120
00:05:38,000 --> 00:05:42,479
unfortunately

121
00:05:39,199 --> 00:05:45,520
our chip in this phase is not as

122
00:05:42,479 --> 00:05:49,039
advanced as theirs currently our chip

123
00:05:45,520 --> 00:05:53,758
works only in 11

124
00:05:49,039 --> 00:05:56,719
11 a 11 g and 11n mode

125
00:05:53,759 --> 00:05:57,840
in all the all the frequency below 6

126
00:05:56,720 --> 00:06:00,560
gigahertz

127
00:05:57,840 --> 00:06:01,440
that means you can set it in into a 2.4

128
00:06:00,560 --> 00:06:04,400
gigahertz

129
00:06:01,440 --> 00:06:04,400
or 5 gigahertz

130
00:06:04,479 --> 00:06:11,199
11 agn and currently it only supports

131
00:06:08,560 --> 00:06:12,800
20 micros which means the highest

132
00:06:11,199 --> 00:06:17,280
throughput is around

133
00:06:12,800 --> 00:06:19,039
50 or 60 mega dps right the theoretical

134
00:06:17,280 --> 00:06:21,840
peak data rate of the physical physical

135
00:06:19,039 --> 00:06:21,840
layer

136
00:06:22,319 --> 00:06:28,720
so it's a technology maybe

137
00:06:25,759 --> 00:06:29,520
many years ago the industry has achieved

138
00:06:28,720 --> 00:06:32,840
right

139
00:06:29,520 --> 00:06:35,840
we rebuilt the wi-fi chip chip again by

140
00:06:32,840 --> 00:06:35,840
ourselves

141
00:06:37,280 --> 00:06:42,239
well i would say maybe so far we

142
00:06:40,720 --> 00:06:45,440
identify

143
00:06:42,240 --> 00:06:47,840
at least one point maybe it's

144
00:06:45,440 --> 00:06:50,400
attractive or a little bit better than a

145
00:06:47,840 --> 00:06:53,119
commercial wi-fi chip

146
00:06:50,400 --> 00:06:53,758
the point is that our design currently

147
00:06:53,120 --> 00:06:57,680
is based

148
00:06:53,759 --> 00:07:02,639
on the system on chip the xilinx zinc

149
00:06:57,680 --> 00:07:06,400
ipga with the arm processor embedded

150
00:07:02,639 --> 00:07:08,400
in that case our full wi-fi stack

151
00:07:06,400 --> 00:07:09,599
i mean including the from the linux

152
00:07:08,400 --> 00:07:12,880
application

153
00:07:09,599 --> 00:07:15,759
to the baseband are in the same chip

154
00:07:12,880 --> 00:07:16,639
as you can see the red circle those

155
00:07:15,759 --> 00:07:19,280
linux

156
00:07:16,639 --> 00:07:20,319
operating system user space kernel

157
00:07:19,280 --> 00:07:23,758
driver

158
00:07:20,319 --> 00:07:27,280
and ipg not the front end all these

159
00:07:23,759 --> 00:07:27,280
things in the same chip

160
00:07:27,440 --> 00:07:36,240
so we have one well not so big advantage

161
00:07:32,160 --> 00:07:38,160
is that if you ping our

162
00:07:36,240 --> 00:07:41,120
note right because it's linux you can

163
00:07:38,160 --> 00:07:44,240
ping it it has an ip address

164
00:07:41,120 --> 00:07:48,240
your ico speed your or the ping

165
00:07:44,240 --> 00:07:50,879
round trip latency is uh

166
00:07:48,240 --> 00:07:52,479
lower than the commercial chip i think

167
00:07:50,879 --> 00:07:52,879
when you do the ping over commercial

168
00:07:52,479 --> 00:07:55,280
chip

169
00:07:52,879 --> 00:07:56,800
your round chip pin latency is always i

170
00:07:55,280 --> 00:08:00,080
guess around

171
00:07:56,800 --> 00:08:03,599
one millisecond uh in our design

172
00:08:00,080 --> 00:08:07,680
you can have around 0.6 or 0.7

173
00:08:03,599 --> 00:08:09,360
milliseconds because it is the soc

174
00:08:07,680 --> 00:08:11,759
system on chip right

175
00:08:09,360 --> 00:08:12,720
so that's why we also need to offer you

176
00:08:11,759 --> 00:08:15,120
the

177
00:08:12,720 --> 00:08:16,639
wi-fi driver you cannot use use any

178
00:08:15,120 --> 00:08:18,960
other commercial

179
00:08:16,639 --> 00:08:20,319
wi-fi driver because the commercial

180
00:08:18,960 --> 00:08:23,680
wi-fi driver always

181
00:08:20,319 --> 00:08:27,599
works over the usb bus

182
00:08:23,680 --> 00:08:30,160
or pcie bus right but in this chip

183
00:08:27,599 --> 00:08:32,240
there's no i mean the interface between

184
00:08:30,160 --> 00:08:35,039
our wifi chip which is ipga

185
00:08:32,240 --> 00:08:35,680
and sdr driver here the interface is not

186
00:08:35,039 --> 00:08:39,120
usb

187
00:08:35,679 --> 00:08:42,399
or pcie it is the stylingx

188
00:08:39,120 --> 00:08:46,800
chip bus which is the axis dream

189
00:08:42,399 --> 00:08:50,160
or axi memory mapped dma controller

190
00:08:46,800 --> 00:08:53,599
so that's why we have to develop the

191
00:08:50,160 --> 00:08:54,160
linux driver for this quite special on

192
00:08:53,600 --> 00:08:57,440
cheap

193
00:08:54,160 --> 00:08:58,079
low latency high throughput link for our

194
00:08:57,440 --> 00:09:00,480
wi-fi

195
00:08:58,080 --> 00:09:00,480
design

196
00:09:02,640 --> 00:09:07,680
okay if open wi-fi is worth why should i

197
00:09:05,519 --> 00:09:11,279
use open wi-fi

198
00:09:07,680 --> 00:09:15,040
well this is the key part i try to

199
00:09:11,279 --> 00:09:15,040
answer the question to convince you

200
00:09:15,920 --> 00:09:18,160
okay

201
00:09:20,000 --> 00:09:24,480
but this time i remind you this is a

202
00:09:22,160 --> 00:09:24,480
joke

203
00:09:26,800 --> 00:09:31,359
so why you should use the open wi-fi

204
00:09:29,040 --> 00:09:34,480
design

205
00:09:31,360 --> 00:09:35,040
well very direct usage of this design is

206
00:09:34,480 --> 00:09:38,480
for

207
00:09:35,040 --> 00:09:41,760
education right it's quite obvious

208
00:09:38,480 --> 00:09:43,760
if you are a researcher or a professor

209
00:09:41,760 --> 00:09:47,600
in the university you try to teach your

210
00:09:43,760 --> 00:09:50,720
students how exactly a wi-fi chip run

211
00:09:47,600 --> 00:09:51,920
if you buy a commercial wi-fi chip that

212
00:09:50,720 --> 00:09:54,959
has the black box

213
00:09:51,920 --> 00:09:57,920
silicon you don't know what is inside

214
00:09:54,959 --> 00:09:58,959
how can you teach students know how

215
00:09:57,920 --> 00:10:02,959
knowledge of

216
00:09:58,959 --> 00:10:04,399
wi-fi chip run so with this design you

217
00:10:02,959 --> 00:10:07,680
have the full stack

218
00:10:04,399 --> 00:10:09,279
right open full stack from the user

219
00:10:07,680 --> 00:10:12,079
program in linux

220
00:10:09,279 --> 00:10:13,040
to the antenna i mean in the ipga we

221
00:10:12,079 --> 00:10:15,680
also

222
00:10:13,040 --> 00:10:17,120
there's also logic to control the front

223
00:10:15,680 --> 00:10:20,719
end and antenna

224
00:10:17,120 --> 00:10:24,399
as the antenna selection tx gain rx

225
00:10:20,720 --> 00:10:28,079
agc stuff everything works just like

226
00:10:24,399 --> 00:10:31,440
those modules in a commercial chip

227
00:10:28,079 --> 00:10:34,399
okay for the secondary usage right

228
00:10:31,440 --> 00:10:35,360
there could be many you may have ideas

229
00:10:34,399 --> 00:10:38,079
to improve

230
00:10:35,360 --> 00:10:39,279
wi-fi chip or customize the wi-fi chip

231
00:10:38,079 --> 00:10:41,760
for your

232
00:10:39,279 --> 00:10:43,439
special application if you run a

233
00:10:41,760 --> 00:10:46,640
business maybe you have some

234
00:10:43,440 --> 00:10:49,040
special customer in aviation industry

235
00:10:46,640 --> 00:10:50,160
or railway industry right they have very

236
00:10:49,040 --> 00:10:53,839
special requirements

237
00:10:50,160 --> 00:10:56,000
to your wi-fi communication system and

238
00:10:53,839 --> 00:10:56,880
you may try the commercial wi-fi chip at

239
00:10:56,000 --> 00:10:59,680
first

240
00:10:56,880 --> 00:11:01,680
maybe it's perfect for your application

241
00:10:59,680 --> 00:11:04,000
then you'll forget to open wi-fi

242
00:11:01,680 --> 00:11:05,599
if commercial chip is not good enough

243
00:11:04,000 --> 00:11:06,800
you try to tailor or customize the

244
00:11:05,600 --> 00:11:10,160
commercial chip right

245
00:11:06,800 --> 00:11:13,359
you go to the big commercial company

246
00:11:10,160 --> 00:11:15,760
the first question you get will be how

247
00:11:13,360 --> 00:11:16,560
many pcs you will buy from our company

248
00:11:15,760 --> 00:11:19,760
per year

249
00:11:16,560 --> 00:11:23,040
right if you say a thousand chips

250
00:11:19,760 --> 00:11:25,040
then i think you don't have any chance

251
00:11:23,040 --> 00:11:28,959
you should try out design tailored

252
00:11:25,040 --> 00:11:32,240
customized for your special application

253
00:11:28,959 --> 00:11:32,800
and if you are using some full mac wi-fi

254
00:11:32,240 --> 00:11:35,600
chip

255
00:11:32,800 --> 00:11:37,599
not the soft mac which means that the

256
00:11:35,600 --> 00:11:38,560
wi-fi chip is very complicated all the

257
00:11:37,600 --> 00:11:40,800
mac layer

258
00:11:38,560 --> 00:11:42,719
link adaptation everything advanced

259
00:11:40,800 --> 00:11:44,959
control is in the chip

260
00:11:42,720 --> 00:11:45,920
in that case you don't have full control

261
00:11:44,959 --> 00:11:48,719
of the chip

262
00:11:45,920 --> 00:11:50,319
from the driver maybe you have you if

263
00:11:48,720 --> 00:11:51,360
you want some special functional

264
00:11:50,320 --> 00:11:53,360
knowledge you need to

265
00:11:51,360 --> 00:11:54,880
reverse engineer a little bit the cheap

266
00:11:53,360 --> 00:11:57,360
firmware in the chip right

267
00:11:54,880 --> 00:11:59,120
that's the most of the wi-fi security

268
00:11:57,360 --> 00:11:59,839
researcher or wi-fi researcher currently

269
00:11:59,120 --> 00:12:01,200
do

270
00:11:59,839 --> 00:12:03,519
do the reverse engineering of the

271
00:12:01,200 --> 00:12:05,440
firmware of the wi-fi chip

272
00:12:03,519 --> 00:12:07,200
but with this design you have the

273
00:12:05,440 --> 00:12:10,639
transparent design

274
00:12:07,200 --> 00:12:12,480
the fully controlled and

275
00:12:10,639 --> 00:12:14,560
okay you want to modify wifi chip it's

276
00:12:12,480 --> 00:12:17,760
not possible you want to see

277
00:12:14,560 --> 00:12:20,000
uh how your new uh

278
00:12:17,760 --> 00:12:20,800
component work with wi-fi how your new

279
00:12:20,000 --> 00:12:22,880
component

280
00:12:20,800 --> 00:12:24,000
will improve performance of wi-fi

281
00:12:22,880 --> 00:12:27,600
network such as

282
00:12:24,000 --> 00:12:29,519
you make a new pa right high uh

283
00:12:27,600 --> 00:12:30,959
high power amplifier for long range you

284
00:12:29,519 --> 00:12:33,519
make new lna

285
00:12:30,959 --> 00:12:35,279
you make new antenna or beam antenna

286
00:12:33,519 --> 00:12:37,360
make new algorithm

287
00:12:35,279 --> 00:12:38,800
you can test your component your idea or

288
00:12:37,360 --> 00:12:43,600
your algorithm

289
00:12:38,800 --> 00:12:46,240
on the face over the open wi-fi design

290
00:12:43,600 --> 00:12:47,360
actually before the project was

291
00:12:46,240 --> 00:12:50,480
announced

292
00:12:47,360 --> 00:12:51,600
last christmas we already had some seed

293
00:12:50,480 --> 00:12:54,160
user in the

294
00:12:51,600 --> 00:12:55,440
orca project which is a horizon 2020

295
00:12:54,160 --> 00:12:57,600
european project

296
00:12:55,440 --> 00:12:59,680
and they are using the open wi-fi board

297
00:12:57,600 --> 00:13:02,720
in our test bed

298
00:12:59,680 --> 00:13:06,079
they are doing some amazing thing

299
00:13:02,720 --> 00:13:08,480
that i cannot tell here you will

300
00:13:06,079 --> 00:13:11,760
know at the end of the project because

301
00:13:08,480 --> 00:13:11,760
we have nda i think

302
00:13:12,959 --> 00:13:16,560
so any other related work

303
00:13:17,519 --> 00:13:24,000
i have to answer this question right

304
00:13:21,040 --> 00:13:24,959
because otherwise i cannot say my

305
00:13:24,000 --> 00:13:28,000
project

306
00:13:24,959 --> 00:13:29,359
very proudly that we are the like first

307
00:13:28,000 --> 00:13:32,720
blah blah blah

308
00:13:29,360 --> 00:13:36,160
yes there are we are specific uh

309
00:13:32,720 --> 00:13:38,800
precisely speaking we are not the

310
00:13:36,160 --> 00:13:39,600
first one strictly speaking many

311
00:13:38,800 --> 00:13:42,719
researchers

312
00:13:39,600 --> 00:13:46,000
in the community has tried

313
00:13:42,720 --> 00:13:46,000
the wi-fi implementation

314
00:13:46,240 --> 00:13:50,639
such as the okay the first row is our

315
00:13:48,639 --> 00:13:53,279
implementation the second row is from

316
00:13:50,639 --> 00:13:54,160
varp which is originated from red

317
00:13:53,279 --> 00:13:57,439
university

318
00:13:54,160 --> 00:14:00,480
a long time ago i think some of you

319
00:13:57,440 --> 00:14:03,440
use that ipg design but

320
00:14:00,480 --> 00:14:05,839
it's a pure ipj there's no linux no

321
00:14:03,440 --> 00:14:08,240
native linus framework right

322
00:14:05,839 --> 00:14:10,240
and national instruments labview they

323
00:14:08,240 --> 00:14:12,639
have the whole ipga

324
00:14:10,240 --> 00:14:14,560
wifi application wi-fi design based on

325
00:14:12,639 --> 00:14:18,320
usrp right with the

326
00:14:14,560 --> 00:14:20,399
x300 series where big ipg inside

327
00:14:18,320 --> 00:14:22,639
if you have budget yes you can use

328
00:14:20,399 --> 00:14:25,519
national instruments

329
00:14:22,639 --> 00:14:26,800
and also this work actually this work is

330
00:14:25,519 --> 00:14:28,839
also quite good

331
00:14:26,800 --> 00:14:30,800
they also design ipg wi-fi

332
00:14:28,839 --> 00:14:32,240
implementation and they also support

333
00:14:30,800 --> 00:14:35,279
mimo

334
00:14:32,240 --> 00:14:38,480
but they use the pc as the running

335
00:14:35,279 --> 00:14:41,760
linux they set up the usb

336
00:14:38,480 --> 00:14:43,440
between the rpg board and pc

337
00:14:41,760 --> 00:14:45,680
compared to them i think our unique

338
00:14:43,440 --> 00:14:49,040
point is the soc our linux and

339
00:14:45,680 --> 00:14:51,199
wi-fi is on the same chip and

340
00:14:49,040 --> 00:14:52,399
microsoft okay long time ago microsoft

341
00:14:51,199 --> 00:14:54,160
has achieved

342
00:14:52,399 --> 00:14:56,079
software real-time processing of the

343
00:14:54,160 --> 00:14:57,680
wi-fi protocol

344
00:14:56,079 --> 00:14:59,599
you should check that paper that's a

345
00:14:57,680 --> 00:15:02,719
quite amazing result

346
00:14:59,600 --> 00:15:04,560
a long time ago but one little thing i

347
00:15:02,720 --> 00:15:06,480
should remind you that

348
00:15:04,560 --> 00:15:08,319
their implementation actually cannot

349
00:15:06,480 --> 00:15:09,760
achieve fully

350
00:15:08,320 --> 00:15:12,000
real-time operation of the

351
00:15:09,760 --> 00:15:12,319
acknowledgement because wi-fi need you

352
00:15:12,000 --> 00:15:14,959
make

353
00:15:12,320 --> 00:15:15,600
acknowledgment in 10 microseconds right

354
00:15:14,959 --> 00:15:17,839
that means

355
00:15:15,600 --> 00:15:19,519
when you receive packet you need to do

356
00:15:17,839 --> 00:15:21,360
lots of processing and generate

357
00:15:19,519 --> 00:15:24,560
acknowledgement in 10 microseconds

358
00:15:21,360 --> 00:15:25,760
in the microsoft implementation they can

359
00:15:24,560 --> 00:15:28,638
only generate the

360
00:15:25,760 --> 00:15:29,439
acknowledgement for long received

361
00:15:28,639 --> 00:15:32,320
package

362
00:15:29,440 --> 00:15:34,560
not for short received packets because

363
00:15:32,320 --> 00:15:37,440
if the packet incoming is too short

364
00:15:34,560 --> 00:15:39,040
they don't have enough processing time

365
00:15:37,440 --> 00:15:41,680
to generate acknowledgement

366
00:15:39,040 --> 00:15:42,160
but for long uh package long incoming

367
00:15:41,680 --> 00:15:44,239
package

368
00:15:42,160 --> 00:15:46,000
the microsoft solution yes they can

369
00:15:44,240 --> 00:15:49,199
generate the 10 microsecond

370
00:15:46,000 --> 00:15:51,199
reply in in time

371
00:15:49,199 --> 00:15:52,240
okay this one from glue radio i guess

372
00:15:51,199 --> 00:15:53,839
the author

373
00:15:52,240 --> 00:15:55,360
i met the author i know the author a

374
00:15:53,839 --> 00:15:59,440
long time ago many people

375
00:15:55,360 --> 00:16:02,880
already use this gr 802.11 this is

376
00:15:59,440 --> 00:16:06,000
quite good project for uh for you do

377
00:16:02,880 --> 00:16:09,360
experiment over when you only

378
00:16:06,000 --> 00:16:11,440
need transmit or need monitor right

379
00:16:09,360 --> 00:16:13,040
if you don't need the real-time

380
00:16:11,440 --> 00:16:15,600
interaction with commercial chip

381
00:16:13,040 --> 00:16:16,800
this is quite good starting project for

382
00:16:15,600 --> 00:16:20,079
the wi-fi research

383
00:16:16,800 --> 00:16:22,240
based on gun radio i won't go deep

384
00:16:20,079 --> 00:16:24,880
you can check the slides later find out

385
00:16:22,240 --> 00:16:24,880
all the links

386
00:16:25,600 --> 00:16:29,839
only try to emphasize our unique point

387
00:16:28,480 --> 00:16:32,160
is that

388
00:16:29,839 --> 00:16:33,759
our design is based on system on chip

389
00:16:32,160 --> 00:16:34,959
you have very low latency between your

390
00:16:33,759 --> 00:16:38,639
wi-fi card and

391
00:16:34,959 --> 00:16:41,518
computer which is also in the same chip

392
00:16:38,639 --> 00:16:44,000
so is open wi-fi hardware expensive

393
00:16:41,519 --> 00:16:46,880
that's very important question

394
00:16:44,000 --> 00:16:50,240
we care this a lot because it matters

395
00:16:46,880 --> 00:16:52,720
for the community

396
00:16:50,240 --> 00:16:53,279
actually uh if you don't have hardware

397
00:16:52,720 --> 00:16:55,600
right

398
00:16:53,279 --> 00:16:57,439
you don't have budget you can try the

399
00:16:55,600 --> 00:16:59,440
open wi-fi in our testbed

400
00:16:57,440 --> 00:17:01,040
actually the same testbed as the

401
00:16:59,440 --> 00:17:04,319
previous speaker

402
00:17:01,040 --> 00:17:06,240
the the ilab t in imac facility we have

403
00:17:04,319 --> 00:17:08,000
installed open wifi board several bots

404
00:17:06,240 --> 00:17:11,439
there you can try it remotely

405
00:17:08,000 --> 00:17:14,720
if you have budget right you can use

406
00:17:11,439 --> 00:17:15,439
this quite small uh software design

407
00:17:14,720 --> 00:17:18,640
radio board

408
00:17:15,439 --> 00:17:21,919
system module i think built by an

409
00:17:18,640 --> 00:17:23,679
analog device zinc ipga and

410
00:17:21,919 --> 00:17:25,280
analog device front end on the same

411
00:17:23,679 --> 00:17:28,720
module

412
00:17:25,280 --> 00:17:31,200
we have ported design on it

413
00:17:28,720 --> 00:17:33,440
we will port the design to more and more

414
00:17:31,200 --> 00:17:35,360
boards and recently there are quite

415
00:17:33,440 --> 00:17:39,200
cheap board i would say built by

416
00:17:35,360 --> 00:17:42,479
chinese companies called nh7020

417
00:17:39,200 --> 00:17:44,640
which is with that has the same rpg as

418
00:17:42,480 --> 00:17:46,320
as the zed board we are working on the

419
00:17:44,640 --> 00:17:49,280
zed board

420
00:17:46,320 --> 00:17:49,760
currently the progress is significant

421
00:17:49,280 --> 00:17:52,080
but

422
00:17:49,760 --> 00:17:53,919
still some issue we need to solve i

423
00:17:52,080 --> 00:17:56,960
believe that work

424
00:17:53,919 --> 00:17:57,520
is possible and currently maybe that

425
00:17:56,960 --> 00:18:00,320
board

426
00:17:57,520 --> 00:18:00,879
or 7 or 20 is the minimum ipga we can

427
00:18:00,320 --> 00:18:03,760
use

428
00:18:00,880 --> 00:18:03,760
for this project

429
00:18:06,480 --> 00:18:11,760
okay last try to push you

430
00:18:10,160 --> 00:18:14,080
if you are not sure should i use it or

431
00:18:11,760 --> 00:18:14,960
not actually you are not obliged to use

432
00:18:14,080 --> 00:18:17,360
it

433
00:18:14,960 --> 00:18:18,160
just try to do some advertisement

434
00:18:17,360 --> 00:18:21,439
although it's

435
00:18:18,160 --> 00:18:22,559
forbidden here yeah i know so uh well

436
00:18:21,440 --> 00:18:25,039
just like the

437
00:18:22,559 --> 00:18:27,200
first version of linux right at the

438
00:18:25,039 --> 00:18:30,720
beginning i don't think linux

439
00:18:27,200 --> 00:18:34,400
target is to uh beat ibm unix

440
00:18:30,720 --> 00:18:37,520
a bit hp unix right at the beginning

441
00:18:34,400 --> 00:18:40,559
it's just a mimic work of the

442
00:18:37,520 --> 00:18:42,160
minix which is used to teach students

443
00:18:40,559 --> 00:18:43,200
the operating system right in the

444
00:18:42,160 --> 00:18:46,880
university

445
00:18:43,200 --> 00:18:50,720
let's just first mimic work of the

446
00:18:46,880 --> 00:18:51,840
from linux because she is not satisfied

447
00:18:50,720 --> 00:18:54,320
with the

448
00:18:51,840 --> 00:18:55,520
minix license condition if i remember

449
00:18:54,320 --> 00:18:59,120
correctly

450
00:18:55,520 --> 00:19:02,320
so he make the linux

451
00:18:59,120 --> 00:19:06,159
first version by his own

452
00:19:02,320 --> 00:19:09,280
in his storm and then release it

453
00:19:06,160 --> 00:19:13,440
so what happens next right in the

454
00:19:09,280 --> 00:19:13,440
past many years you have seen

455
00:19:13,520 --> 00:19:20,320
so we hope more and more people can just

456
00:19:16,799 --> 00:19:23,360
try the open wi-fi project

457
00:19:20,320 --> 00:19:26,879
not just compare our design

458
00:19:23,360 --> 00:19:26,879
to the commercial wi-fi chip

459
00:19:27,679 --> 00:19:31,200
that will help us a lot

460
00:19:33,840 --> 00:19:37,280
yeah talk is cheap show me the code you

461
00:19:36,480 --> 00:19:40,220
can find

462
00:19:37,280 --> 00:19:41,600
our code on the github

463
00:19:40,220 --> 00:19:44,000
[Applause]

464
00:19:41,600 --> 00:19:44,000
thank you

465
00:19:48,559 --> 00:19:54,720
maybe well

466
00:19:51,600 --> 00:19:57,918
if this is a normal uh presentation i

467
00:19:54,720 --> 00:19:57,919
will ask you a question

468
00:19:58,160 --> 00:20:01,840
uh actually we have observed this

469
00:19:59,840 --> 00:20:04,639
phenomenon long time ago

470
00:20:01,840 --> 00:20:06,240
the community in the cpu domain right

471
00:20:04,640 --> 00:20:09,039
computer science domain

472
00:20:06,240 --> 00:20:10,240
uh the open source uh activity there is

473
00:20:09,039 --> 00:20:13,840
quite a lot

474
00:20:10,240 --> 00:20:16,400
they are quite active risk five arm

475
00:20:13,840 --> 00:20:16,879
intel cpu right linux many open source

476
00:20:16,400 --> 00:20:18,640
project

477
00:20:16,880 --> 00:20:21,120
even open source firmware right open

478
00:20:18,640 --> 00:20:24,000
source files

479
00:20:21,120 --> 00:20:25,600
on the other side in the connection

480
00:20:24,000 --> 00:20:27,919
domain

481
00:20:25,600 --> 00:20:29,280
wi-fi connection cellular cheap wi-fi

482
00:20:27,919 --> 00:20:32,960
chip bluetooth chip

483
00:20:29,280 --> 00:20:36,399
all the connection chip for the

484
00:20:32,960 --> 00:20:38,559
radio link this domain is quite close

485
00:20:36,400 --> 00:20:41,280
almost all the connection silicon are

486
00:20:38,559 --> 00:20:41,280
black box

487
00:20:41,600 --> 00:20:45,760
i don't know why so i asked this

488
00:20:43,280 --> 00:20:48,480
question meanwhile i try to do something

489
00:20:45,760 --> 00:20:51,120
in this domain to do this open source

490
00:20:48,480 --> 00:20:51,120
wi-fi chip

491
00:20:54,400 --> 00:20:59,440
so talk is cheap show me the code

492
00:20:57,840 --> 00:21:01,439
i have to show you something not the

493
00:20:59,440 --> 00:21:02,640
real code but i try to explain a little

494
00:21:01,440 --> 00:21:06,320
bit about the whole

495
00:21:02,640 --> 00:21:09,039
project building blocks right uh

496
00:21:06,320 --> 00:21:09,840
at the bottom this is the r frontend in

497
00:21:09,039 --> 00:21:13,039
the black

498
00:21:09,840 --> 00:21:17,600
this is the ad9361

499
00:21:13,039 --> 00:21:20,080
there are two two rx 2tx adc dac right

500
00:21:17,600 --> 00:21:20,799
and fortunately they have the agc module

501
00:21:20,080 --> 00:21:23,520
inside

502
00:21:20,799 --> 00:21:23,918
front end so our base bands only need to

503
00:21:23,520 --> 00:21:26,960
read

504
00:21:23,919 --> 00:21:27,520
the real-time agc gain to assist to

505
00:21:26,960 --> 00:21:30,640
assist

506
00:21:27,520 --> 00:21:32,639
our fpga to calculate real rssi

507
00:21:30,640 --> 00:21:34,720
that's the frontend which is not built

508
00:21:32,640 --> 00:21:37,360
by us okay

509
00:21:34,720 --> 00:21:39,280
on top of the front end the blue one is

510
00:21:37,360 --> 00:21:41,760
the fpga building blocks

511
00:21:39,280 --> 00:21:44,158
at the beginning we thought okay wifi

512
00:21:41,760 --> 00:21:46,559
implementation maybe we implement the

513
00:21:44,159 --> 00:21:48,559
ofdm transmitter or ibm receiver

514
00:21:46,559 --> 00:21:50,559
hook it with linux then that's it to be

515
00:21:48,559 --> 00:21:53,678
done we celebrate

516
00:21:50,559 --> 00:21:55,760
finally visualize no

517
00:21:53,679 --> 00:21:56,799
it's way more more complicated than your

518
00:21:55,760 --> 00:21:58,960
imagination

519
00:21:56,799 --> 00:22:00,799
way more more things than just the

520
00:21:58,960 --> 00:22:02,720
physical layer signal processing

521
00:22:00,799 --> 00:22:04,879
you see the physical layers over here

522
00:22:02,720 --> 00:22:08,080
open ofdm rx

523
00:22:04,880 --> 00:22:10,159
open ofdmtx these two physically

524
00:22:08,080 --> 00:22:12,080
block they take active sample or take

525
00:22:10,159 --> 00:22:14,720
package right then generate package or

526
00:22:12,080 --> 00:22:18,559
generate actual sample

527
00:22:14,720 --> 00:22:19,760
then huge things out of the physical

528
00:22:18,559 --> 00:22:23,600
layer

529
00:22:19,760 --> 00:22:26,320
this branch is for the receiver path

530
00:22:23,600 --> 00:22:28,559
we have a ddc antenna selection fit iq

531
00:22:26,320 --> 00:22:32,799
to the physical layer then

532
00:22:28,559 --> 00:22:34,720
take the packet to the linux meanwhile

533
00:22:32,799 --> 00:22:36,000
not all the packet will go to linux if

534
00:22:34,720 --> 00:22:39,200
you check the linux

535
00:22:36,000 --> 00:22:40,880
mac 802.11 framework they tell you what

536
00:22:39,200 --> 00:22:44,080
should you do in the wi-fi chip

537
00:22:40,880 --> 00:22:46,080
they you should do a packet filter linux

538
00:22:44,080 --> 00:22:47,120
otherwise the workload of linux is too

539
00:22:46,080 --> 00:22:49,678
much

540
00:22:47,120 --> 00:22:51,120
here we also need to do the handle all

541
00:22:49,679 --> 00:22:54,640
the dma stuff

542
00:22:51,120 --> 00:22:55,678
rxdma from ipga to linux we set up ring

543
00:22:54,640 --> 00:22:57,520
buffer dma

544
00:22:55,679 --> 00:22:59,600
actually keep keep running in the

545
00:22:57,520 --> 00:23:00,639
background in the driver we check the

546
00:22:59,600 --> 00:23:02,799
dma status

547
00:23:00,640 --> 00:23:05,120
that's why we know what the state was

548
00:23:02,799 --> 00:23:07,840
the latest package

549
00:23:05,120 --> 00:23:08,320
in the central is all the csma low mac

550
00:23:07,840 --> 00:23:11,760
layer

551
00:23:08,320 --> 00:23:13,520
in ipga you need lots of functionality

552
00:23:11,760 --> 00:23:16,000
you can check the standards they define

553
00:23:13,520 --> 00:23:16,639
everything very clearly you need cca

554
00:23:16,000 --> 00:23:19,039
right

555
00:23:16,640 --> 00:23:21,600
detect channel is busy or not two

556
00:23:19,039 --> 00:23:22,158
methods based on rssi arthur has to be

557
00:23:21,600 --> 00:23:24,080
precise

558
00:23:22,159 --> 00:23:26,400
right otherwise you have wrong answer

559
00:23:24,080 --> 00:23:27,678
based on preamble which is from the ofdm

560
00:23:26,400 --> 00:23:30,080
receiver status

561
00:23:27,679 --> 00:23:31,120
okay you output channel status to the

562
00:23:30,080 --> 00:23:33,280
csma ca

563
00:23:31,120 --> 00:23:34,959
engine in this engine you do the random

564
00:23:33,280 --> 00:23:35,520
back off right according to a contention

565
00:23:34,960 --> 00:23:37,840
window

566
00:23:35,520 --> 00:23:39,280
etc all the parameters in the standard

567
00:23:37,840 --> 00:23:40,959
you also need to do the

568
00:23:39,280 --> 00:23:42,559
virtual carrier sensing vertical current

569
00:23:40,960 --> 00:23:44,000
sensing means that

570
00:23:42,559 --> 00:23:45,840
you monitor all the packets in the

571
00:23:44,000 --> 00:23:46,640
channel on going in those packets

572
00:23:45,840 --> 00:23:49,279
there's a

573
00:23:46,640 --> 00:23:50,000
field called duration the duration tells

574
00:23:49,279 --> 00:23:51,919
you

575
00:23:50,000 --> 00:23:53,760
that transaction transaction or that

576
00:23:51,919 --> 00:23:55,440
introduction will occupy

577
00:23:53,760 --> 00:23:57,039
the channel for how long for how many

578
00:23:55,440 --> 00:23:57,919
microseconds that's for the virtual

579
00:23:57,039 --> 00:24:00,640
carrier sensing

580
00:23:57,919 --> 00:24:01,120
you to get that information you have to

581
00:24:00,640 --> 00:24:03,279
pass

582
00:24:01,120 --> 00:24:05,360
the all the package incoming pass the

583
00:24:03,279 --> 00:24:08,480
duration field not only actually

584
00:24:05,360 --> 00:24:11,520
you also need to pack mac address

585
00:24:08,480 --> 00:24:14,000
everything fit to the csma

586
00:24:11,520 --> 00:24:15,120
and packet theater also need this pass

587
00:24:14,000 --> 00:24:18,400
result

588
00:24:15,120 --> 00:24:21,279
and you generate the ac cts reply

589
00:24:18,400 --> 00:24:22,240
in real time do re-transmission in ipga

590
00:24:21,279 --> 00:24:24,799
because

591
00:24:22,240 --> 00:24:26,240
linux give your packet meanwhile linux

592
00:24:24,799 --> 00:24:27,440
will tell you for this package you

593
00:24:26,240 --> 00:24:30,559
should try this as

594
00:24:27,440 --> 00:24:31,520
mcs for how many times try that mcs for

595
00:24:30,559 --> 00:24:33,840
how many times

596
00:24:31,520 --> 00:24:34,879
ipg you need to do that linux wait for

597
00:24:33,840 --> 00:24:37,600
your result

598
00:24:34,880 --> 00:24:39,039
work hard so wait for the ack right when

599
00:24:37,600 --> 00:24:41,279
you send the packet

600
00:24:39,039 --> 00:24:42,720
your ipg need to wait for the ack

601
00:24:41,279 --> 00:24:45,039
otherwise you cannot tell

602
00:24:42,720 --> 00:24:46,480
tell linux that this transmission is

603
00:24:45,039 --> 00:24:49,840
successful or not

604
00:24:46,480 --> 00:24:54,159
this is a tx path which do the

605
00:24:49,840 --> 00:24:58,240
reverse processing as the rx

606
00:24:54,159 --> 00:25:00,559
okay above ipga those are driver modules

607
00:24:58,240 --> 00:25:02,640
ad driver communicate with the front end

608
00:25:00,559 --> 00:25:03,520
directly to do the channel tuning right

609
00:25:02,640 --> 00:25:07,520
dxr

610
00:25:03,520 --> 00:25:11,679
stuff and the tx interface driver

611
00:25:07,520 --> 00:25:14,879
configured this part the dma driver

612
00:25:11,679 --> 00:25:17,600
right the settings dma driver we use

613
00:25:14,880 --> 00:25:18,159
we modify settings dma driver tailored

614
00:25:17,600 --> 00:25:23,039
for the

615
00:25:18,159 --> 00:25:24,799
for the case and txrx driver dma driver

616
00:25:23,039 --> 00:25:26,480
basically those drivers configure the

617
00:25:24,799 --> 00:25:29,120
ipga registers

618
00:25:26,480 --> 00:25:32,080
functional to control the behavior of

619
00:25:29,120 --> 00:25:34,158
your ipg design

620
00:25:32,080 --> 00:25:36,960
above the driver okay that's the

621
00:25:34,159 --> 00:25:40,159
fortunate thing linux defined everything

622
00:25:36,960 --> 00:25:43,520
mac 802.11 framework linux defined

623
00:25:40,159 --> 00:25:44,000
whole bunch of apis they need you don't

624
00:25:43,520 --> 00:25:46,240
need to

625
00:25:44,000 --> 00:25:47,919
implement them all but you need to

626
00:25:46,240 --> 00:25:51,360
implement necessary

627
00:25:47,919 --> 00:25:54,159
subset right to support ad hoc mode

628
00:25:51,360 --> 00:25:54,959
ap mode station mode or monitor mode

629
00:25:54,159 --> 00:25:57,200
different mode

630
00:25:54,960 --> 00:26:00,320
need different combination of those

631
00:25:57,200 --> 00:26:03,360
linux apis

632
00:26:00,320 --> 00:26:06,730
okay basically that's the whole design

633
00:26:03,360 --> 00:26:15,319
of the open wi-fi questions

634
00:26:06,730 --> 00:26:15,319
[Applause]

635
00:26:17,120 --> 00:26:20,399
yeah right so once you do the virtual

636
00:26:19,120 --> 00:26:22,639
camera sensing

637
00:26:20,400 --> 00:26:24,400
what about in the time the linux asks

638
00:26:22,640 --> 00:26:26,559
you to send one thing so where is the

639
00:26:24,400 --> 00:26:28,480
logic to handle it

640
00:26:26,559 --> 00:26:29,918
okay the question is uh when we do

641
00:26:28,480 --> 00:26:31,919
virtual carrier sensing

642
00:26:29,919 --> 00:26:33,200
if the packet comes from linux what

643
00:26:31,919 --> 00:26:36,880
should we do right

644
00:26:33,200 --> 00:26:39,440
which logic okay okay for the tx pass

645
00:26:36,880 --> 00:26:40,720
actually there there are two kills

646
00:26:39,440 --> 00:26:44,080
actually linux ask

647
00:26:40,720 --> 00:26:46,159
uh the cheap uh with better has at least

648
00:26:44,080 --> 00:26:47,678
four kills but currently we implement

649
00:26:46,159 --> 00:26:50,159
two it still

650
00:26:47,679 --> 00:26:50,720
just work so all the packet comes from

651
00:26:50,159 --> 00:26:53,440
linux

652
00:26:50,720 --> 00:26:54,720
they cannot go offset immediately right

653
00:26:53,440 --> 00:26:57,840
first into the queue

654
00:26:54,720 --> 00:26:58,640
a csma engine will decide when is the

655
00:26:57,840 --> 00:27:01,039
right timing

656
00:26:58,640 --> 00:27:02,720
for next packet to go outside different

657
00:27:01,039 --> 00:27:04,640
queue could have different priority or

658
00:27:02,720 --> 00:27:07,679
different purpose such as for beacon

659
00:27:04,640 --> 00:27:10,880
for data something but there is a lot of

660
00:27:07,679 --> 00:27:10,880
black flexibility

661
00:27:17,360 --> 00:27:23,120
right if the sensing module believe

662
00:27:20,720 --> 00:27:24,720
there's a chance for us to transmit

663
00:27:23,120 --> 00:27:26,479
right then we can select

664
00:27:24,720 --> 00:27:30,320
one kill one packet from one kill to

665
00:27:26,480 --> 00:27:35,840
transmit is anyone else leaving

666
00:27:30,320 --> 00:27:35,840
okay could you go ahead and leave

667
00:27:46,559 --> 00:27:52,480
csi information right uh currently you

668
00:27:50,240 --> 00:27:54,880
can capture the csi in ipga

669
00:27:52,480 --> 00:27:56,720
but i think we will do that because one

670
00:27:54,880 --> 00:27:58,320
benefit of software defined radio is

671
00:27:56,720 --> 00:28:00,080
that we can have deep access to the

672
00:27:58,320 --> 00:28:04,879
physical layer

673
00:28:00,080 --> 00:28:17,840
please please are you

674
00:28:04,880 --> 00:28:17,840
okay thank you okay

675
00:28:23,279 --> 00:28:26,880
yes yes their front end actually is

676
00:28:25,120 --> 00:28:28,399
quite complicated i believe there are

677
00:28:26,880 --> 00:28:29,360
firmware there are lots of digital

678
00:28:28,399 --> 00:28:31,678
processing

679
00:28:29,360 --> 00:28:32,959
uh yeah but this is a point have you

680
00:28:31,679 --> 00:28:36,159
looked at the rf sock

681
00:28:32,960 --> 00:28:38,960
chip instead of the mp socket

682
00:28:36,159 --> 00:28:41,679
arf sock oh i know that's the latest

683
00:28:38,960 --> 00:28:45,840
generation with high speed idc dse right

684
00:28:41,679 --> 00:28:45,840
uh maybe we will try it later

685
00:28:50,960 --> 00:28:56,280
you still have questions

686
00:28:52,500 --> 00:28:56,280
[Laughter]

687
00:28:57,120 --> 00:29:00,399
like your next priorities on this next

688
00:28:59,120 --> 00:29:05,279
priority

689
00:29:00,399 --> 00:29:08,719
uh next priority i think uh

690
00:29:05,279 --> 00:29:10,080
uh we we still need to test the design

691
00:29:08,720 --> 00:29:13,120
with many uh

692
00:29:10,080 --> 00:29:15,520
uh commercial device compatibility issue

693
00:29:13,120 --> 00:29:18,879
for instance currently it works with a

694
00:29:15,520 --> 00:29:21,760
laptop uh iphone but we we do

695
00:29:18,880 --> 00:29:23,600
identify we'll need the microphone okay

696
00:29:21,760 --> 00:29:26,720
we do know that for instance the

697
00:29:23,600 --> 00:29:28,000
oneplus android phone always has issue

698
00:29:26,720 --> 00:29:29,760
with our design so

699
00:29:28,000 --> 00:29:31,279
maybe it's related to the different chip

700
00:29:29,760 --> 00:29:32,799
has different signal quality we still

701
00:29:31,279 --> 00:29:35,440
need to debug

702
00:29:32,799 --> 00:29:36,960
we try to make this more stable and

703
00:29:35,440 --> 00:29:40,880
compatible to as much

704
00:29:36,960 --> 00:29:55,840
as many as possible thank you

705
00:29:40,880 --> 00:29:55,840
thank you very much

706
00:30:01,760 --> 00:30:09,840
somehow there's this funny algorithm

707
00:30:03,520 --> 00:30:09,840
from the organizer of this

708
00:30:09,919 --> 00:30:12,000
you

