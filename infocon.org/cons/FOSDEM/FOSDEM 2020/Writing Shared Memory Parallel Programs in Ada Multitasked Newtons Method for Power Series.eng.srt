1
00:00:05,359 --> 00:00:11,599
our next speaker

2
00:00:08,000 --> 00:00:12,400
is i don't know if you how to pronounce

3
00:00:11,599 --> 00:00:16,640
it in the

4
00:00:12,400 --> 00:00:21,039
english way it's from the okay

5
00:00:16,640 --> 00:00:21,039
university of chicago illinois

6
00:00:21,520 --> 00:00:24,640
thank you very much uh i would like to

7
00:00:23,519 --> 00:00:29,038
thank the organizers

8
00:00:24,640 --> 00:00:32,558
uh for uh having me here again

9
00:00:29,039 --> 00:00:34,480
uh so this is a talk on a mathematical

10
00:00:32,558 --> 00:00:39,839
application

11
00:00:34,480 --> 00:00:39,839
of ada of in particular multitasking

12
00:00:41,200 --> 00:00:45,120
so i'm the only one in this session with

13
00:00:42,960 --> 00:00:45,520
the subtitle and i'm glad that this

14
00:00:45,120 --> 00:00:48,320
isn't

15
00:00:45,520 --> 00:00:48,800
that this that didn't scare you off so

16
00:00:48,320 --> 00:00:52,879
glad

17
00:00:48,800 --> 00:00:56,480
you came so

18
00:00:52,879 --> 00:00:57,120
here's my outline so the main point of

19
00:00:56,480 --> 00:01:02,319
my talk

20
00:00:57,120 --> 00:01:06,479
is that ada works extremely well

21
00:01:02,320 --> 00:01:09,200
to define shared memory parallel

22
00:01:06,479 --> 00:01:09,200
programs

23
00:01:09,360 --> 00:01:12,799
and the whole point is that you really

24
00:01:12,320 --> 00:01:16,080
get

25
00:01:12,799 --> 00:01:18,000
to do what you want to do um

26
00:01:16,080 --> 00:01:19,439
so there is some mathematics on there i

27
00:01:18,000 --> 00:01:22,320
will try to

28
00:01:19,439 --> 00:01:24,000
use the mathematics mainly to indicate

29
00:01:22,320 --> 00:01:27,839
how you can tune

30
00:01:24,000 --> 00:01:27,840
uh your application

31
00:01:28,479 --> 00:01:31,520
so computers are getting faster and

32
00:01:30,479 --> 00:01:33,439
faster

33
00:01:31,520 --> 00:01:34,640
uh but that's actually creating a

34
00:01:33,439 --> 00:01:38,479
problem for us

35
00:01:34,640 --> 00:01:42,720
uh not not that we have no

36
00:01:38,479 --> 00:01:44,799
things that don't go fast enough but

37
00:01:42,720 --> 00:01:48,798
making computers work efficiently is

38
00:01:44,799 --> 00:01:48,799
actually quite the challenge these days

39
00:01:48,960 --> 00:01:54,720
so here is the motivation

40
00:01:52,720 --> 00:01:56,320
so this is the picture the picture is

41
00:01:54,720 --> 00:01:58,399
kind of misleading

42
00:01:56,320 --> 00:01:59,600
uh what we actually are always looking

43
00:01:58,399 --> 00:02:02,560
at are

44
00:01:59,600 --> 00:02:03,919
polynomial equations so we have two

45
00:02:02,560 --> 00:02:06,960
polynomials

46
00:02:03,920 --> 00:02:09,119
in three unknowns they define a space

47
00:02:06,960 --> 00:02:11,280
curve so the space curve

48
00:02:09,119 --> 00:02:12,560
is this figure eight so it's kind of

49
00:02:11,280 --> 00:02:16,319
bended

50
00:02:12,560 --> 00:02:19,120
and you are positioned at the top

51
00:02:16,319 --> 00:02:20,640
uh the point zero zero two so the point

52
00:02:19,120 --> 00:02:23,840
zero zero two

53
00:02:20,640 --> 00:02:26,879
satisfies these two equations

54
00:02:23,840 --> 00:02:29,680
you know one point on a curve and

55
00:02:26,879 --> 00:02:31,040
you want to continue you want to see

56
00:02:29,680 --> 00:02:33,280
what lies ahead

57
00:02:31,040 --> 00:02:34,640
so you're going to compute power series

58
00:02:33,280 --> 00:02:37,599
expansions

59
00:02:34,640 --> 00:02:38,799
the red one is the trivial one so you

60
00:02:37,599 --> 00:02:41,679
think if you

61
00:02:38,800 --> 00:02:44,160
only do one term in your exponentiation

62
00:02:41,680 --> 00:02:46,560
you think it's kind of a parabola

63
00:02:44,160 --> 00:02:48,959
but uh the if you take more and more

64
00:02:46,560 --> 00:02:51,200
terms in that power series expansion

65
00:02:48,959 --> 00:02:53,760
already actually the next one is here

66
00:02:51,200 --> 00:02:55,200
already very interesting uh you see the

67
00:02:53,760 --> 00:02:57,599
crossing point

68
00:02:55,200 --> 00:02:58,879
uh so this is where interesting things

69
00:02:57,599 --> 00:03:00,959
start to happen

70
00:02:58,879 --> 00:03:02,399
and that crossing points as you take

71
00:03:00,959 --> 00:03:06,640
more and more terms

72
00:03:02,400 --> 00:03:09,760
in your power series actually starts to

73
00:03:06,640 --> 00:03:12,079
approximate the real crossing point

74
00:03:09,760 --> 00:03:13,440
now this is a misleading picture we only

75
00:03:12,080 --> 00:03:15,280
see the equations

76
00:03:13,440 --> 00:03:17,440
and actually the crossing points is

77
00:03:15,280 --> 00:03:19,760
where typically

78
00:03:17,440 --> 00:03:20,640
your power series will no longer

79
00:03:19,760 --> 00:03:23,920
converge

80
00:03:20,640 --> 00:03:25,679
uh somehow but here actually they allow

81
00:03:23,920 --> 00:03:29,119
you to say something about

82
00:03:25,680 --> 00:03:32,239
the behavior of that curve

83
00:03:29,120 --> 00:03:35,840
now the point of the talk is to compute

84
00:03:32,239 --> 00:03:38,480
this efficiently and

85
00:03:35,840 --> 00:03:40,000
we run newton's methods all the time so

86
00:03:38,480 --> 00:03:42,000
the newton's method is probably the

87
00:03:40,000 --> 00:03:43,680
newton's method that you have seen in

88
00:03:42,000 --> 00:03:46,239
high school

89
00:03:43,680 --> 00:03:47,920
also with power series curve

90
00:03:46,239 --> 00:03:50,319
symbolically as you have

91
00:03:47,920 --> 00:03:52,640
to do this by hand you can actually

92
00:03:50,319 --> 00:03:54,159
compute term by term

93
00:03:52,640 --> 00:03:56,159
what you need to do is you need to

94
00:03:54,159 --> 00:03:59,760
evaluate polynomials

95
00:03:56,159 --> 00:04:02,959
over and over again and you also need to

96
00:03:59,760 --> 00:04:05,040
know all the partial derivatives um

97
00:04:02,959 --> 00:04:06,400
so these are the and there's then

98
00:04:05,040 --> 00:04:08,400
solving a linear system

99
00:04:06,400 --> 00:04:10,159
so these are the three things that you

100
00:04:08,400 --> 00:04:11,519
have to do you have to evaluate

101
00:04:10,159 --> 00:04:14,319
differentiate

102
00:04:11,519 --> 00:04:15,920
and solving a linear system and it

103
00:04:14,319 --> 00:04:18,159
converges quadratically

104
00:04:15,920 --> 00:04:19,599
so actually newton's method is a very

105
00:04:18,160 --> 00:04:21,440
promising method

106
00:04:19,600 --> 00:04:23,040
uh but there are a lot of computational

107
00:04:21,440 --> 00:04:26,160
difficulties um

108
00:04:23,040 --> 00:04:29,040
so if you do this by hand

109
00:04:26,160 --> 00:04:29,360
you quickly gonna give up uh once you

110
00:04:29,040 --> 00:04:32,720
get

111
00:04:29,360 --> 00:04:34,000
past uh even already for one variable it

112
00:04:32,720 --> 00:04:37,120
might be hard

113
00:04:34,000 --> 00:04:38,080
but uh our curves uh they live in any

114
00:04:37,120 --> 00:04:40,880
dimension

115
00:04:38,080 --> 00:04:42,080
uh so the degree of the curves so i

116
00:04:40,880 --> 00:04:45,280
should have pointed this out

117
00:04:42,080 --> 00:04:46,000
previously so this is a quartic a curve

118
00:04:45,280 --> 00:04:48,320
of degree

119
00:04:46,000 --> 00:04:49,040
four so you have two equations of degree

120
00:04:48,320 --> 00:04:50,719
two

121
00:04:49,040 --> 00:04:52,639
if you have three equations in four

122
00:04:50,720 --> 00:04:54,320
variables if there are quadratics the

123
00:04:52,639 --> 00:04:56,639
degree is going to be eight

124
00:04:54,320 --> 00:04:59,280
if you have four variables five

125
00:04:56,639 --> 00:05:01,759
equations the degree is going to be 16.

126
00:04:59,280 --> 00:05:02,400
so you can see that if it starts to get

127
00:05:01,759 --> 00:05:05,600
very

128
00:05:02,400 --> 00:05:08,080
quickly every time you increase one of

129
00:05:05,600 --> 00:05:09,759
the dimension your complexity of your

130
00:05:08,080 --> 00:05:13,359
problem actually doubles

131
00:05:09,759 --> 00:05:15,840
so with 10 variables 11 equal

132
00:05:13,360 --> 00:05:18,240
11 variables 10 equations you may have a

133
00:05:15,840 --> 00:05:20,560
curve of degree 1000.

134
00:05:18,240 --> 00:05:21,600
now even if you would fix a i'm not

135
00:05:20,560 --> 00:05:24,400
going to go past

136
00:05:21,600 --> 00:05:25,120
10 then actually you have your power

137
00:05:24,400 --> 00:05:27,599
series

138
00:05:25,120 --> 00:05:29,520
uh and actually they go on forever so

139
00:05:27,600 --> 00:05:31,759
there's no limit there

140
00:05:29,520 --> 00:05:32,719
we have some power series that converge

141
00:05:31,759 --> 00:05:36,160
rapidly

142
00:05:32,720 --> 00:05:38,000
um we're lucky but some power series

143
00:05:36,160 --> 00:05:40,400
converge very very slowly

144
00:05:38,000 --> 00:05:42,400
so we may not know how far we need to go

145
00:05:40,400 --> 00:05:44,479
and that was actually the motivation

146
00:05:42,400 --> 00:05:46,239
for this study as well we want to have

147
00:05:44,479 --> 00:05:48,240
something that's running fast

148
00:05:46,240 --> 00:05:50,240
and allows you to compute a large large

149
00:05:48,240 --> 00:05:52,560
decrease

150
00:05:50,240 --> 00:05:53,520
and so even if you would say i only

151
00:05:52,560 --> 00:05:55,039
compute eight

152
00:05:53,520 --> 00:05:57,039
terms well then there is the

153
00:05:55,039 --> 00:05:57,520
multi-precision arithmetic that you may

154
00:05:57,039 --> 00:06:00,800
need

155
00:05:57,520 --> 00:06:03,198
uh so high degrees things start to curve

156
00:06:00,800 --> 00:06:05,280
the round-off starts to creep in uh

157
00:06:03,199 --> 00:06:07,360
double precision is unlikely to be

158
00:06:05,280 --> 00:06:09,599
sufficient

159
00:06:07,360 --> 00:06:13,759
so these are the three motivations that

160
00:06:09,600 --> 00:06:15,919
we have for using parallel computations

161
00:06:13,759 --> 00:06:17,600
and the code was developed on three

162
00:06:15,919 --> 00:06:19,680
different platforms

163
00:06:17,600 --> 00:06:20,639
so the laptop that i have here with me

164
00:06:19,680 --> 00:06:23,680
is the middle

165
00:06:20,639 --> 00:06:26,759
uh ones kind of the middle uh

166
00:06:23,680 --> 00:06:28,400
between these uh other two

167
00:06:26,759 --> 00:06:31,680
configurations

168
00:06:28,400 --> 00:06:32,318
um so first of all the obvious point is

169
00:06:31,680 --> 00:06:34,720
that

170
00:06:32,319 --> 00:06:35,520
you can't have single core processors

171
00:06:34,720 --> 00:06:39,120
anymore

172
00:06:35,520 --> 00:06:42,560
uh all your processors are multi-core

173
00:06:39,120 --> 00:06:43,759
um and the other point i would like to

174
00:06:42,560 --> 00:06:45,680
make is that

175
00:06:43,759 --> 00:06:48,720
while it looks very interesting and

176
00:06:45,680 --> 00:06:50,880
appealing to have a workstation like

177
00:06:48,720 --> 00:06:54,639
that sitting on your desk

178
00:06:50,880 --> 00:06:57,680
but having it fully so this is also

179
00:06:54,639 --> 00:06:58,960
the workstation that is uh serving our

180
00:06:57,680 --> 00:07:00,560
web server so

181
00:06:58,960 --> 00:07:03,120
perhaps i should have said that right in

182
00:07:00,560 --> 00:07:05,840
the beginning we also actually launched

183
00:07:03,120 --> 00:07:07,039
a web server uh so this machine is

184
00:07:05,840 --> 00:07:10,719
actually

185
00:07:07,039 --> 00:07:12,080
hosting uh the the web interface to our

186
00:07:10,720 --> 00:07:15,680
software

187
00:07:12,080 --> 00:07:18,560
so it has uh 44 cores

188
00:07:15,680 --> 00:07:21,039
and i get the best results with 88

189
00:07:18,560 --> 00:07:21,039
threads

190
00:07:21,440 --> 00:07:26,880
so but i will restrict to the middle

191
00:07:24,080 --> 00:07:30,318
configuration

192
00:07:26,880 --> 00:07:32,000
and here is the ada code um

193
00:07:30,319 --> 00:07:33,440
the ada code that i have been using

194
00:07:32,000 --> 00:07:36,639
already now

195
00:07:33,440 --> 00:07:38,240
for a very long time

196
00:07:36,639 --> 00:07:39,680
and that i also actually have other

197
00:07:38,240 --> 00:07:42,880
people have used

198
00:07:39,680 --> 00:07:44,080
so i saw a recent paper uh that was

199
00:07:42,880 --> 00:07:47,120
published in

200
00:07:44,080 --> 00:07:50,560
composite structures of of

201
00:07:47,120 --> 00:07:52,960
lamination design so if you want to know

202
00:07:50,560 --> 00:07:55,840
where polynomial systems occur

203
00:07:52,960 --> 00:07:57,758
in practical applications if you have to

204
00:07:55,840 --> 00:08:01,198
design a robot arm

205
00:07:57,759 --> 00:08:03,759
for example a robot arm can take up

206
00:08:01,199 --> 00:08:05,599
possible configurations so you can

207
00:08:03,759 --> 00:08:08,080
already see this

208
00:08:05,599 --> 00:08:09,360
with the elbow that i have you you want

209
00:08:08,080 --> 00:08:11,599
to reach a certain

210
00:08:09,360 --> 00:08:13,520
position and then you want to compute

211
00:08:11,599 --> 00:08:15,599
all possible angles of your

212
00:08:13,520 --> 00:08:17,120
arm so that you can reach these

213
00:08:15,599 --> 00:08:19,759
positions

214
00:08:17,120 --> 00:08:22,080
now uh you don't want to twist uh your

215
00:08:19,759 --> 00:08:22,800
elbow so all the polynomial equations

216
00:08:22,080 --> 00:08:26,000
they express

217
00:08:22,800 --> 00:08:29,120
that uh the lengths of your

218
00:08:26,000 --> 00:08:29,520
mechanism they have to stay fixed so so

219
00:08:29,120 --> 00:08:31,360
so

220
00:08:29,520 --> 00:08:33,199
the methods that i'm using often very

221
00:08:31,360 --> 00:08:36,719
well known into

222
00:08:33,200 --> 00:08:39,599
mechanical design and

223
00:08:36,719 --> 00:08:40,800
my users they simply download typically

224
00:08:39,599 --> 00:08:44,399
the

225
00:08:40,799 --> 00:08:46,240
binary version and if you have minus t

226
00:08:44,399 --> 00:08:48,080
it uses the multi-trading and it

227
00:08:46,240 --> 00:08:51,279
actually runs this

228
00:08:48,080 --> 00:08:54,800
very simple procedure it launches

229
00:08:51,279 --> 00:08:58,000
threats and every task has a unique

230
00:08:54,800 --> 00:08:59,599
id identification number and that's that

231
00:08:58,000 --> 00:09:01,680
generic procedure so

232
00:08:59,600 --> 00:09:02,959
this is a generic procedure the body of

233
00:09:01,680 --> 00:09:04,880
generic procedure

234
00:09:02,959 --> 00:09:06,640
and the argument uh the generic

235
00:09:04,880 --> 00:09:10,000
parameter is the procedure

236
00:09:06,640 --> 00:09:12,399
drop so job is what i always provide

237
00:09:10,000 --> 00:09:14,880
and i can tell each task specifically

238
00:09:12,399 --> 00:09:15,519
what to do based on its identification

239
00:09:14,880 --> 00:09:20,080
number

240
00:09:15,519 --> 00:09:20,080
so tasks actually work on job queues

241
00:09:20,839 --> 00:09:25,360
and okay so

242
00:09:22,959 --> 00:09:26,079
if you want to write multitasking code

243
00:09:25,360 --> 00:09:28,160
there are

244
00:09:26,080 --> 00:09:29,440
two main issues that you have to

245
00:09:28,160 --> 00:09:32,560
consider

246
00:09:29,440 --> 00:09:34,720
uh the first one is memory uh so every

247
00:09:32,560 --> 00:09:36,880
task has its own stack but they all

248
00:09:34,720 --> 00:09:40,080
share the same heap

249
00:09:36,880 --> 00:09:43,760
so if you start allocating and

250
00:09:40,080 --> 00:09:46,959
deallocating you better do that outside

251
00:09:43,760 --> 00:09:50,560
the task routines

252
00:09:46,959 --> 00:09:53,839
so everything that you do

253
00:09:50,560 --> 00:09:57,199
on these power series you

254
00:09:53,839 --> 00:10:00,720
have to allocate the auxiliary vectors

255
00:09:57,200 --> 00:10:02,160
outside and pass those pointers to the

256
00:10:00,720 --> 00:10:04,880
auxiliary

257
00:10:02,160 --> 00:10:06,319
data structures in the arguments of the

258
00:10:04,880 --> 00:10:09,439
jobs

259
00:10:06,320 --> 00:10:11,680
um so the second thing that you have to

260
00:10:09,440 --> 00:10:13,680
worry about is the granularity of your

261
00:10:11,680 --> 00:10:15,359
computations that so there should be

262
00:10:13,680 --> 00:10:17,439
actually enough parallelism

263
00:10:15,360 --> 00:10:18,720
uh so typically you have a limited

264
00:10:17,440 --> 00:10:20,800
number of tasks

265
00:10:18,720 --> 00:10:24,079
but the tasks actually need sufficiently

266
00:10:20,800 --> 00:10:24,079
many jobs to do

267
00:10:24,560 --> 00:10:29,119
sometimes you need to synchronize the

268
00:10:26,880 --> 00:10:31,600
easiest way to synchronize is just so

269
00:10:29,120 --> 00:10:32,560
synchronization means that there is a

270
00:10:31,600 --> 00:10:35,279
piece

271
00:10:32,560 --> 00:10:37,279
and all the tasks have to wait up to a

272
00:10:35,279 --> 00:10:39,360
certain point to continue

273
00:10:37,279 --> 00:10:40,640
the easiest way is actually to stop the

274
00:10:39,360 --> 00:10:43,920
tasks and then

275
00:10:40,640 --> 00:10:46,480
to relaunch them so that's the way we do

276
00:10:43,920 --> 00:10:49,680
the synchronization right now

277
00:10:46,480 --> 00:10:51,600
so these are the two main issues um

278
00:10:49,680 --> 00:10:54,239
i actually have three implementations

279
00:10:51,600 --> 00:10:57,279
already of my power series library

280
00:10:54,240 --> 00:10:59,760
so don't give up so you have

281
00:10:57,279 --> 00:11:01,200
first of all the functional correctness

282
00:10:59,760 --> 00:11:03,360
but then you have to think of it

283
00:11:01,200 --> 00:11:05,360
in a whole different way when you think

284
00:11:03,360 --> 00:11:08,399
of the shared memory

285
00:11:05,360 --> 00:11:09,200
parallel computation and then of course

286
00:11:08,399 --> 00:11:12,240
there are always

287
00:11:09,200 --> 00:11:14,640
other issues i will point out some other

288
00:11:12,240 --> 00:11:14,640
issues

289
00:11:14,959 --> 00:11:21,199
okay so now uh what do we do we

290
00:11:18,000 --> 00:11:23,680
evaluate and differentiate um

291
00:11:21,200 --> 00:11:24,880
this is something that i also didn't did

292
00:11:23,680 --> 00:11:28,000
only learn

293
00:11:24,880 --> 00:11:31,600
when i was doing the parallelism so

294
00:11:28,000 --> 00:11:34,720
you may have seen rules to differentiate

295
00:11:31,600 --> 00:11:37,600
all compute all partial derivatives

296
00:11:34,720 --> 00:11:38,320
the cool thing is that if you have a

297
00:11:37,600 --> 00:11:40,560
product

298
00:11:38,320 --> 00:11:42,000
of n variables if you do this

299
00:11:40,560 --> 00:11:44,959
symbolically it will be

300
00:11:42,000 --> 00:11:47,040
an n square operation but you can

301
00:11:44,959 --> 00:11:49,839
actually do this in the linear time

302
00:11:47,040 --> 00:11:51,760
linear in the number of variables uh you

303
00:11:49,839 --> 00:11:53,360
can see if you take this simple product

304
00:11:51,760 --> 00:11:56,639
of variables here

305
00:11:53,360 --> 00:11:59,600
uh if you you have the stars

306
00:11:56,639 --> 00:12:01,440
so you can compute so the the left here

307
00:11:59,600 --> 00:12:03,200
are actually the names of the variables

308
00:12:01,440 --> 00:12:05,440
so the kind of funny names

309
00:12:03,200 --> 00:12:06,720
but at the right you see all the star

310
00:12:05,440 --> 00:12:08,639
operations

311
00:12:06,720 --> 00:12:11,360
the point is also the star is not the

312
00:12:08,639 --> 00:12:12,720
star of numbers so we multiply power

313
00:12:11,360 --> 00:12:15,839
series with each other

314
00:12:12,720 --> 00:12:18,160
and the coefficients again are typically

315
00:12:15,839 --> 00:12:19,200
uh multi-precision numbers double double

316
00:12:18,160 --> 00:12:21,360
quad doubles

317
00:12:19,200 --> 00:12:23,279
so there's a lot of arithmetic overhead

318
00:12:21,360 --> 00:12:27,200
here so you may want to save

319
00:12:23,279 --> 00:12:30,320
on the number of multiplications

320
00:12:27,200 --> 00:12:32,880
the bottom line here is that

321
00:12:30,320 --> 00:12:33,360
this is kind of the saving step in what

322
00:12:32,880 --> 00:12:37,120
makes

323
00:12:33,360 --> 00:12:38,800
everything very run very well in our

324
00:12:37,120 --> 00:12:40,560
parallel computations there is a

325
00:12:38,800 --> 00:12:43,599
straightforward parallelism

326
00:12:40,560 --> 00:12:45,279
so a polynomial so the name says it

327
00:12:43,600 --> 00:12:46,560
itself there are many many many many

328
00:12:45,279 --> 00:12:48,880
monomials

329
00:12:46,560 --> 00:12:50,160
and you can compute all the monomials

330
00:12:48,880 --> 00:12:52,480
independently

331
00:12:50,160 --> 00:12:54,399
so you have a very straightforward

332
00:12:52,480 --> 00:12:57,440
parallelism here

333
00:12:54,399 --> 00:12:58,079
um so that's the the first mathematical

334
00:12:57,440 --> 00:13:01,279
idea

335
00:12:58,079 --> 00:13:04,079
uh the second one is that uh you can

336
00:13:01,279 --> 00:13:06,160
work with a matrix of power series and

337
00:13:04,079 --> 00:13:07,680
invert that that's all very fun

338
00:13:06,160 --> 00:13:09,279
but actually what you should do we

339
00:13:07,680 --> 00:13:11,760
should look at the power series where

340
00:13:09,279 --> 00:13:14,639
the coefficients are matrices

341
00:13:11,760 --> 00:13:15,680
and i worked here the simplest example

342
00:13:14,639 --> 00:13:18,720
we are going to solve

343
00:13:15,680 --> 00:13:20,479
linear system so the matrices are our

344
00:13:18,720 --> 00:13:22,240
partial differentials

345
00:13:20,480 --> 00:13:24,160
uh that we have computed so there are

346
00:13:22,240 --> 00:13:27,360
power series again

347
00:13:24,160 --> 00:13:30,800
now if we linearize it we arise that uh

348
00:13:27,360 --> 00:13:33,200
we arrive at a block triangular system

349
00:13:30,800 --> 00:13:35,279
so even if you for example you can

350
00:13:33,200 --> 00:13:37,040
invert uh power series

351
00:13:35,279 --> 00:13:39,040
polynomials there are they have no

352
00:13:37,040 --> 00:13:40,319
inverse power series they do that's kind

353
00:13:39,040 --> 00:13:43,279
of the cool thing

354
00:13:40,320 --> 00:13:44,000
and this slide also actually uh shows

355
00:13:43,279 --> 00:13:46,880
this

356
00:13:44,000 --> 00:13:48,880
so you have to convert if you solve the

357
00:13:46,880 --> 00:13:50,880
inverse so you actually you're after the

358
00:13:48,880 --> 00:13:53,600
updates in your newton's methods

359
00:13:50,880 --> 00:13:54,320
so you have to invert the matrix a

360
00:13:53,600 --> 00:13:56,800
naught

361
00:13:54,320 --> 00:13:58,959
and once you invert the matrix a naught

362
00:13:56,800 --> 00:14:01,439
you adjust the right hand sides

363
00:13:58,959 --> 00:14:02,239
and here's where the pipelining comes in

364
00:14:01,440 --> 00:14:04,959
so

365
00:14:02,240 --> 00:14:05,680
you do the first update the delta x

366
00:14:04,959 --> 00:14:08,800
naught

367
00:14:05,680 --> 00:14:10,479
and then you update the right hand sides

368
00:14:08,800 --> 00:14:13,519
the b1 and the b2

369
00:14:10,480 --> 00:14:15,360
and they can happen independently

370
00:14:13,519 --> 00:14:17,680
and this is where your parallelism comes

371
00:14:15,360 --> 00:14:18,240
in so here you can have two tasks

372
00:14:17,680 --> 00:14:22,239
working

373
00:14:18,240 --> 00:14:24,639
independently in the second step

374
00:14:22,240 --> 00:14:26,000
so here you have a maximal speed up of

375
00:14:24,639 --> 00:14:28,639
two

376
00:14:26,000 --> 00:14:30,160
no matter how large your matrices are if

377
00:14:28,639 --> 00:14:34,160
you do this with this

378
00:14:30,160 --> 00:14:35,760
uh uh very coarse uh granularity

379
00:14:34,160 --> 00:14:38,079
now of course if the matrix you start to

380
00:14:35,760 --> 00:14:40,720
get larger you better use a

381
00:14:38,079 --> 00:14:42,079
multi-task qr so we have also played

382
00:14:40,720 --> 00:14:45,440
with that

383
00:14:42,079 --> 00:14:49,199
um so this is kind of the bottleneck

384
00:14:45,440 --> 00:14:51,040
at this point so at this point this is

385
00:14:49,199 --> 00:14:54,319
still a work in progress

386
00:14:51,040 --> 00:14:57,199
uh so these are timings that i did

387
00:14:54,320 --> 00:14:58,320
yesterday in my hotel room on this

388
00:14:57,199 --> 00:15:01,519
laptop

389
00:14:58,320 --> 00:15:02,160
uh trying to see what happened how far i

390
00:15:01,519 --> 00:15:04,639
can go

391
00:15:02,160 --> 00:15:06,160
with the degrees of the truncated power

392
00:15:04,639 --> 00:15:10,320
series

393
00:15:06,160 --> 00:15:12,880
um so this was done in double arithmetic

394
00:15:10,320 --> 00:15:14,399
it was done on a 10-dimensional

395
00:15:12,880 --> 00:15:17,120
benchmark system

396
00:15:14,399 --> 00:15:18,240
um if you're really curious you can

397
00:15:17,120 --> 00:15:20,399
figure out

398
00:15:18,240 --> 00:15:23,199
why my website's what the polynomials

399
00:15:20,399 --> 00:15:23,199
really look like

400
00:15:23,360 --> 00:15:30,240
so with degree 16

401
00:15:27,040 --> 00:15:31,279
i doubled the number of tasks in each

402
00:15:30,240 --> 00:15:35,600
step

403
00:15:31,279 --> 00:15:38,320
so at best i can go get close to four

404
00:15:35,600 --> 00:15:41,120
so the polynomial system is actually

405
00:15:38,320 --> 00:15:42,240
very very mild as far as non-linearities

406
00:15:41,120 --> 00:15:45,360
go

407
00:15:42,240 --> 00:15:48,000
you can read it these columns

408
00:15:45,360 --> 00:15:49,519
from top to bottom but i also like to

409
00:15:48,000 --> 00:15:53,440
read them diagonally

410
00:15:49,519 --> 00:15:54,800
if you go from degree 32 to 64 you kind

411
00:15:53,440 --> 00:15:57,440
of double

412
00:15:54,800 --> 00:15:58,240
the size now this is not a linear

413
00:15:57,440 --> 00:16:00,639
operation

414
00:15:58,240 --> 00:16:01,600
these multiplications of power series so

415
00:16:00,639 --> 00:16:04,480
you almost get a

416
00:16:01,600 --> 00:16:04,480
10-fold

417
00:16:05,120 --> 00:16:08,639
overhead if you want to do that now if

418
00:16:08,079 --> 00:16:12,079
you then

419
00:16:08,639 --> 00:16:13,680
use your 16 uh tasks

420
00:16:12,079 --> 00:16:16,079
this is where you have kind of the speed

421
00:16:13,680 --> 00:16:17,599
spot where with 16 tasks you still get a

422
00:16:16,079 --> 00:16:19,920
little bit more of speed up

423
00:16:17,600 --> 00:16:21,600
now the the time actually then doubles

424
00:16:19,920 --> 00:16:26,319
so from the 2.3

425
00:16:21,600 --> 00:16:26,320
you go to the 5.2 seconds um

426
00:16:27,600 --> 00:16:33,759
uh yeah and at that point so

427
00:16:30,720 --> 00:16:38,000
this is ongoing work for this laptop

428
00:16:33,759 --> 00:16:41,040
the fan starts to get blowing at 64

429
00:16:38,000 --> 00:16:44,880
degrees and i don't want to exhaust that

430
00:16:41,040 --> 00:16:46,560
pure laptop but on on a bigger server

431
00:16:44,880 --> 00:16:48,480
it's actually much more challenging

432
00:16:46,560 --> 00:16:50,638
because then also the precision

433
00:16:48,480 --> 00:16:52,000
the double precision starts to

434
00:16:50,639 --> 00:16:53,920
deteriorate a little

435
00:16:52,000 --> 00:16:55,519
already so we're still working on

436
00:16:53,920 --> 00:16:59,360
getting the precision

437
00:16:55,519 --> 00:17:02,800
uh fixed but as far as the

438
00:16:59,360 --> 00:17:04,880
uh parallelism goes it's fairly simple

439
00:17:02,800 --> 00:17:06,639
to implement

440
00:17:04,880 --> 00:17:08,640
and you can focus on the mathematical

441
00:17:06,640 --> 00:17:10,640
difficulties

442
00:17:08,640 --> 00:17:12,959
and also whenever you have an

443
00:17:10,640 --> 00:17:14,000
application you can focus on really what

444
00:17:12,959 --> 00:17:15,360
matters

445
00:17:14,000 --> 00:17:19,839
and we have five minutes left for

446
00:17:15,359 --> 00:17:19,839
questions thank you very much

447
00:17:24,319 --> 00:17:31,520
you have said that you have tested

448
00:17:27,599 --> 00:17:33,600
times 22 and for at least one of the

449
00:17:31,520 --> 00:17:38,160
things inside you that the max speed

450
00:17:33,600 --> 00:17:41,520
is 88 tasks so which is

451
00:17:38,160 --> 00:17:41,520
twice the number of calls

452
00:17:43,520 --> 00:17:47,840
yes so the question

453
00:17:48,320 --> 00:17:52,559
yes so so uh so the question is how do

454
00:17:51,440 --> 00:17:55,919
we actually get

455
00:17:52,559 --> 00:18:00,080
uh the best uh speed up at 88

456
00:17:55,919 --> 00:18:04,320
uh so the uh processors

457
00:18:00,080 --> 00:18:04,320
indeed support hyper threading

458
00:18:05,440 --> 00:18:10,160
but then i don't get a 88 i think i get

459
00:18:08,480 --> 00:18:13,440
the best i get is close to

460
00:18:10,160 --> 00:18:14,160
60 somehow and this is really for the

461
00:18:13,440 --> 00:18:17,200
polynomial

462
00:18:14,160 --> 00:18:18,080
evaluation where every monomial can be

463
00:18:17,200 --> 00:18:24,320
evaluated

464
00:18:18,080 --> 00:18:29,360
independently second question is

465
00:18:24,320 --> 00:18:31,600
the use of the vector instructions

466
00:18:29,360 --> 00:18:34,080
ah that's a very good question how much

467
00:18:31,600 --> 00:18:37,678
is used of the vector instructions

468
00:18:34,080 --> 00:18:41,678
um that i don't know um

469
00:18:37,679 --> 00:18:45,600
well i know when i do my linear algebra

470
00:18:41,679 --> 00:18:49,520
column wise like the fortran does

471
00:18:45,600 --> 00:18:52,159
then i get better performance

472
00:18:49,520 --> 00:18:54,160
but the performance actually then

473
00:18:52,160 --> 00:18:57,200
deteriorates when i use

474
00:18:54,160 --> 00:19:01,120
complex numbers so if i do

475
00:18:57,200 --> 00:19:04,400
floating wise column column then

476
00:19:01,120 --> 00:19:06,559
the compiler and still

477
00:19:04,400 --> 00:19:08,080
can actually do the vectorization

478
00:19:06,559 --> 00:19:10,480
correctly

479
00:19:08,080 --> 00:19:12,879
but i still have to figure out how

480
00:19:10,480 --> 00:19:14,799
actually the compiler will figure it out

481
00:19:12,880 --> 00:19:16,480
for complex numbers

482
00:19:14,799 --> 00:19:18,480
and then there are also complex double

483
00:19:16,480 --> 00:19:22,840
doubles complex

484
00:19:18,480 --> 00:19:25,840
doubles so that's then another challenge

485
00:19:22,840 --> 00:19:25,840
yes

486
00:19:30,080 --> 00:19:41,678
okay thank you thank you

487
00:19:38,160 --> 00:19:45,440
we have a few minutes before you leave

488
00:19:41,679 --> 00:19:48,720
i'll remind you that all this bedroom

489
00:19:45,440 --> 00:19:51,039
has been organized by the aquarium

490
00:19:48,720 --> 00:19:52,799
who unfortunately is not here for those

491
00:19:51,039 --> 00:19:56,080
who were not here at the beginning

492
00:19:52,799 --> 00:19:57,200
he broke his leg so i took over his

493
00:19:56,080 --> 00:20:01,039
duties

494
00:19:57,200 --> 00:20:04,720
but he did a terrific job in organizing

495
00:20:01,039 --> 00:20:06,640
things and getting the speakers together

496
00:20:04,720 --> 00:20:09,120
and getting the room again

497
00:20:06,640 --> 00:20:10,320
and i got the message that he's watching

498
00:20:09,120 --> 00:20:13,918
us on

499
00:20:10,320 --> 00:20:21,840
live stream so please

500
00:20:13,919 --> 00:20:21,840
singapore for there

501
00:20:30,080 --> 00:20:32,158
you

