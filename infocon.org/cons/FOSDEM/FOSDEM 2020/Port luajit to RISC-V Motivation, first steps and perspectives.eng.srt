1
00:00:08,160 --> 00:00:12,080
good afternoon everybody

2
00:00:09,360 --> 00:00:13,280
and sorry for this house and the wrong

3
00:00:12,080 --> 00:00:16,720
format of the slides

4
00:00:13,280 --> 00:00:19,039
i think it happens sometimes and uh

5
00:00:16,720 --> 00:00:21,119
soon enough you'll see that it's not the

6
00:00:19,039 --> 00:00:23,279
only fault here

7
00:00:21,119 --> 00:00:23,279
so

8
00:00:25,519 --> 00:00:30,640
what is lua what is legit and why it

9
00:00:28,880 --> 00:00:32,479
might be interesting or it is

10
00:00:30,640 --> 00:00:35,920
interesting to put

11
00:00:32,479 --> 00:00:36,959
one to the other one first a few words

12
00:00:35,920 --> 00:00:39,360
about myself

13
00:00:36,960 --> 00:00:40,239
and as you've already see i'm not really

14
00:00:39,360 --> 00:00:44,160
a software

15
00:00:40,239 --> 00:00:47,120
developer so i know not so much about

16
00:00:44,160 --> 00:00:47,839
the software and spent last quarter

17
00:00:47,120 --> 00:00:50,239
century

18
00:00:47,840 --> 00:00:52,239
developing hardware where the software

19
00:00:50,239 --> 00:00:54,718
is usually runs on

20
00:00:52,239 --> 00:00:56,480
and here it was a different systems

21
00:00:54,719 --> 00:00:59,120
embedded systems and system

22
00:00:56,480 --> 00:00:59,519
now it's system on modulus and most of

23
00:00:59,120 --> 00:01:03,120
them

24
00:00:59,520 --> 00:01:05,600
are fpga or stock fpga based systems on

25
00:01:03,120 --> 00:01:05,600
modulus

26
00:01:06,479 --> 00:01:13,360
and yes i can write some code on vhdl

27
00:01:10,080 --> 00:01:15,360
but it's again not a software it's

28
00:01:13,360 --> 00:01:16,479
more a description of the low-level

29
00:01:15,360 --> 00:01:18,640
hardware

30
00:01:16,479 --> 00:01:20,479
and the usual problems i have with the

31
00:01:18,640 --> 00:01:22,240
software is not how to develop the

32
00:01:20,479 --> 00:01:24,320
software itself but how to make this

33
00:01:22,240 --> 00:01:26,560
software run on the hardware

34
00:01:24,320 --> 00:01:27,839
and not just on the new hardware but on

35
00:01:26,560 --> 00:01:30,479
the hardware which is

36
00:01:27,840 --> 00:01:32,799
not known to be working yet and recent

37
00:01:30,479 --> 00:01:35,280
development new architectures and soft

38
00:01:32,799 --> 00:01:37,920
core cpus running on the fpga

39
00:01:35,280 --> 00:01:39,280
are not making my life any easier

40
00:01:37,920 --> 00:01:42,320
because now i'm not only

41
00:01:39,280 --> 00:01:45,920
uh i'm not only not sure

42
00:01:42,320 --> 00:01:46,639
that uh some parts of the hardware not

43
00:01:45,920 --> 00:01:49,759
working but

44
00:01:46,640 --> 00:01:52,880
i can be sure that the cpu is also maybe

45
00:01:49,759 --> 00:01:56,719
not quite working right

46
00:01:52,880 --> 00:02:00,560
uh so this uh

47
00:01:56,719 --> 00:02:01,039
talk is about the um initiative project

48
00:02:00,560 --> 00:02:04,479
to

49
00:02:01,040 --> 00:02:06,000
put the lua and specifically lower jit

50
00:02:04,479 --> 00:02:07,200
implementation to the risk five

51
00:02:06,000 --> 00:02:09,280
architecture

52
00:02:07,200 --> 00:02:11,200
but for me as i said it's not

53
00:02:09,280 --> 00:02:14,400
interesting by itself but you

54
00:02:11,200 --> 00:02:18,799
apply it to solve the problems

55
00:02:14,400 --> 00:02:20,840
with the early hardware bringing up and

56
00:02:18,800 --> 00:02:23,840
with diagnostic and debugging this

57
00:02:20,840 --> 00:02:26,560
hardware

58
00:02:23,840 --> 00:02:27,920
unfortunately this projected the

59
00:02:26,560 --> 00:02:31,200
unfortunately for me

60
00:02:27,920 --> 00:02:32,799
it's a very early stage and it's not so

61
00:02:31,200 --> 00:02:34,399
many people involved in it

62
00:02:32,800 --> 00:02:36,160
so please don't be disappoint

63
00:02:34,400 --> 00:02:38,080
disappointed by the end of this talk

64
00:02:36,160 --> 00:02:38,799
that nothing is available and nothing is

65
00:02:38,080 --> 00:02:42,400
working

66
00:02:38,800 --> 00:02:43,680
it's more and lightening talk why it

67
00:02:42,400 --> 00:02:46,080
might be interesting

68
00:02:43,680 --> 00:02:46,959
what approaches do we take what benefits

69
00:02:46,080 --> 00:02:50,640
we will

70
00:02:46,959 --> 00:02:52,800
get if and ever it's done

71
00:02:50,640 --> 00:02:53,839
uh probably in this development room

72
00:02:52,800 --> 00:02:56,959
nobody is

73
00:02:53,840 --> 00:02:57,519
interested to listen once again why risk

74
00:02:56,959 --> 00:03:00,720
five

75
00:02:57,519 --> 00:03:02,480
is good why we should use it or anything

76
00:03:00,720 --> 00:03:06,159
should be ported to it

77
00:03:02,480 --> 00:03:07,280
uh for the application of the hardware

78
00:03:06,159 --> 00:03:10,560
development it's

79
00:03:07,280 --> 00:03:12,879
uh and especially for the soft cpus risk

80
00:03:10,560 --> 00:03:16,560
5 is good because it's free and because

81
00:03:12,879 --> 00:03:18,399
it has modular and extensible approaches

82
00:03:16,560 --> 00:03:20,959
so it's possible to

83
00:03:18,400 --> 00:03:22,239
take the core cpu run some basic

84
00:03:20,959 --> 00:03:25,120
software

85
00:03:22,239 --> 00:03:27,040
if the cpu is or soft core cpu is good

86
00:03:25,120 --> 00:03:27,760
enough and is running and the software

87
00:03:27,040 --> 00:03:30,720
in the state

88
00:03:27,760 --> 00:03:32,480
to bring up this non-working hardware

89
00:03:30,720 --> 00:03:34,799
and non-working cpu

90
00:03:32,480 --> 00:03:35,599
and then you can build upon this solid

91
00:03:34,799 --> 00:03:38,319
foundation

92
00:03:35,599 --> 00:03:39,679
and to add some extensions both to your

93
00:03:38,319 --> 00:03:43,280
hardware infrastructure

94
00:03:39,680 --> 00:03:45,280
and to the cpu itself because i isa

95
00:03:43,280 --> 00:03:47,200
instruction set architecture reserved

96
00:03:45,280 --> 00:03:50,080
some space for the custom instructions

97
00:03:47,200 --> 00:03:52,879
and for the custom extensions of the cpu

98
00:03:50,080 --> 00:03:52,879
architecture

99
00:03:53,280 --> 00:04:00,319
and why it's also important

100
00:03:57,840 --> 00:04:01,120
there are already several hardware

101
00:04:00,319 --> 00:04:03,040
products from

102
00:04:01,120 --> 00:04:04,720
the company i'm working for at the

103
00:04:03,040 --> 00:04:08,000
moment which

104
00:04:04,720 --> 00:04:11,359
do utilize the soft core risk cpu

105
00:04:08,000 --> 00:04:14,879
processors running on the fpga somes

106
00:04:11,360 --> 00:04:15,840
and later this year the uh socket pga

107
00:04:14,879 --> 00:04:19,039
with risk five

108
00:04:15,840 --> 00:04:21,600
cores and system on module

109
00:04:19,040 --> 00:04:23,040
hardware based on this chip are going to

110
00:04:21,600 --> 00:04:25,440
be available so

111
00:04:23,040 --> 00:04:26,320
we need some tools we need some software

112
00:04:25,440 --> 00:04:28,960
to debug it

113
00:04:26,320 --> 00:04:31,599
to demonstrate its operation to test it

114
00:04:28,960 --> 00:04:35,758
in production

115
00:04:31,600 --> 00:04:38,960
oh okay while lower

116
00:04:35,759 --> 00:04:41,600
20 or 30 years ago to bring their

117
00:04:38,960 --> 00:04:42,479
hardware for initial prototype hardware

118
00:04:41,600 --> 00:04:44,720
i've been uh

119
00:04:42,479 --> 00:04:46,159
to exercise the hardware and test it

120
00:04:44,720 --> 00:04:49,040
i've been pretty much happy to

121
00:04:46,160 --> 00:04:51,520
use in a fourth language it's small

122
00:04:49,040 --> 00:04:54,800
compact easy portable to the

123
00:04:51,520 --> 00:04:57,039
new platforms and it provides you an

124
00:04:54,800 --> 00:04:59,280
interactive tool to probe all the

125
00:04:57,040 --> 00:05:02,240
registers to fiddle with your hardware

126
00:04:59,280 --> 00:05:02,479
to see what actually is going wrong with

127
00:05:02,240 --> 00:05:05,520
it

128
00:05:02,479 --> 00:05:07,599
or going right with it

129
00:05:05,520 --> 00:05:10,000
nowadays i think not so many people are

130
00:05:07,600 --> 00:05:12,880
writing any fourth force

131
00:05:10,000 --> 00:05:14,880
even less are using it in production

132
00:05:12,880 --> 00:05:18,000
environment

133
00:05:14,880 --> 00:05:18,880
but uh there seems to be a better also

134
00:05:18,000 --> 00:05:22,639
kind of niche

135
00:05:18,880 --> 00:05:25,919
uh alternative to that that it's um

136
00:05:22,639 --> 00:05:28,639
language it's very small and compact

137
00:05:25,919 --> 00:05:30,240
and it provides you an interactive

138
00:05:28,639 --> 00:05:32,080
environment where you can define new

139
00:05:30,240 --> 00:05:35,199
functions you can touch

140
00:05:32,080 --> 00:05:37,840
all the pieces of your hardware since

141
00:05:35,199 --> 00:05:40,160
it's very compact

142
00:05:37,840 --> 00:05:42,560
plain c code it's very easy to port to

143
00:05:40,160 --> 00:05:46,720
the new architecture

144
00:05:42,560 --> 00:05:50,320
it provides an interface to

145
00:05:46,720 --> 00:05:52,479
c language so if you can access

146
00:05:50,320 --> 00:05:54,639
some parts of your hardware in c just

147
00:05:52,479 --> 00:05:56,800
map some registers and touch them

148
00:05:54,639 --> 00:05:58,720
then it's equally well and easy to be

149
00:05:56,800 --> 00:06:00,080
done from lower from your interactive

150
00:05:58,720 --> 00:06:03,759
shell

151
00:06:00,080 --> 00:06:05,440
and here compare according to

152
00:06:03,759 --> 00:06:06,800
the interpreter language bench

153
00:06:05,440 --> 00:06:10,240
benchmarks lower

154
00:06:06,800 --> 00:06:13,440
i think one of the two on the top

155
00:06:10,240 --> 00:06:16,000
if not the fastest one but uh

156
00:06:13,440 --> 00:06:16,800
usually for those applications it's not

157
00:06:16,000 --> 00:06:19,840
really

158
00:06:16,800 --> 00:06:21,280
critical in any way you're typing on the

159
00:06:19,840 --> 00:06:23,198
keyboard much slower

160
00:06:21,280 --> 00:06:25,359
and this approach with using lower to

161
00:06:23,199 --> 00:06:27,680
bring up hardware and to debug it

162
00:06:25,360 --> 00:06:30,080
has been first tried by muscle firm

163
00:06:27,680 --> 00:06:32,960
something like already eight years ago

164
00:06:30,080 --> 00:06:34,880
to bring up uh the and test the

165
00:06:32,960 --> 00:06:37,919
high-speed serial transceivers

166
00:06:34,880 --> 00:06:41,680
but then it was an ios cpu uh

167
00:06:37,919 --> 00:06:44,000
proprietary intel back then altera

168
00:06:41,680 --> 00:06:46,160
and definitely it's much it would be

169
00:06:44,000 --> 00:06:47,440
much more interesting and sensible now

170
00:06:46,160 --> 00:06:50,479
to do it on the

171
00:06:47,440 --> 00:06:52,319
risc-5 platform just not to be connected

172
00:06:50,479 --> 00:06:52,960
to this particular hardware in

173
00:06:52,319 --> 00:06:55,840
particular

174
00:06:52,960 --> 00:06:55,840
fpga vendor

175
00:06:56,080 --> 00:07:03,680
why luajit lujit is an

176
00:07:00,080 --> 00:07:06,080
implementation of the language with the

177
00:07:03,680 --> 00:07:07,759
just-in-time compiler very efficient

178
00:07:06,080 --> 00:07:12,080
compact fast

179
00:07:07,759 --> 00:07:15,520
even faster than the lower itself but

180
00:07:12,080 --> 00:07:18,479
for me the most attractive if the

181
00:07:15,520 --> 00:07:19,440
not the only most most attractive for

182
00:07:18,479 --> 00:07:22,880
single reason

183
00:07:19,440 --> 00:07:25,039
to try it was that low egypt

184
00:07:22,880 --> 00:07:27,199
it by itself includes a dynamic

185
00:07:25,039 --> 00:07:30,560
assembler

186
00:07:27,199 --> 00:07:31,120
and that allows allows to experiment not

187
00:07:30,560 --> 00:07:32,960
only with

188
00:07:31,120 --> 00:07:34,400
something connected externally to the

189
00:07:32,960 --> 00:07:37,280
cpu block but

190
00:07:34,400 --> 00:07:38,000
uh allows you interactively experiment

191
00:07:37,280 --> 00:07:40,638
with what

192
00:07:38,000 --> 00:07:41,919
is inside the cpu to add some new

193
00:07:40,639 --> 00:07:45,039
instructions and so on

194
00:07:41,919 --> 00:07:46,878
of course it's and for any

195
00:07:45,039 --> 00:07:49,120
real software developer it would be

196
00:07:46,879 --> 00:07:51,039
probably much easier to add support for

197
00:07:49,120 --> 00:07:54,960
new assembly instruction

198
00:07:51,039 --> 00:07:58,000
in their uh binocules llvmgc

199
00:07:54,960 --> 00:08:01,039
here but also things are

200
00:07:58,000 --> 00:08:03,680
way too heavy and even if it would

201
00:08:01,039 --> 00:08:05,440
be possible or if some software

202
00:08:03,680 --> 00:08:05,919
developer would be sitting next to me

203
00:08:05,440 --> 00:08:07,599
and

204
00:08:05,919 --> 00:08:09,520
doing that it still would not be

205
00:08:07,599 --> 00:08:11,520
possible to experiment with those things

206
00:08:09,520 --> 00:08:14,159
interactively on the target

207
00:08:11,520 --> 00:08:14,878
with the logit and its built-in dynamic

208
00:08:14,160 --> 00:08:16,800
assembler

209
00:08:14,879 --> 00:08:19,199
it's possible to write piece of code

210
00:08:16,800 --> 00:08:21,120
with new assembly instructions

211
00:08:19,199 --> 00:08:22,240
you've just introduced in your soft core

212
00:08:21,120 --> 00:08:25,759
cpu and

213
00:08:22,240 --> 00:08:29,039
try them out to experiment with them

214
00:08:25,759 --> 00:08:32,080
also in another second uh

215
00:08:29,039 --> 00:08:35,439
order of importance reasons uh

216
00:08:32,080 --> 00:08:38,159
are that their lower jeep compiler

217
00:08:35,440 --> 00:08:38,880
logit is used in several interesting

218
00:08:38,159 --> 00:08:41,599
projects

219
00:08:38,880 --> 00:08:42,159
in software defined radio much smaller

220
00:08:41,599 --> 00:08:44,240
scale

221
00:08:42,159 --> 00:08:45,760
but also interesting compared to the gnu

222
00:08:44,240 --> 00:08:47,760
radio but uh

223
00:08:45,760 --> 00:08:50,240
still an interesting one and provides

224
00:08:47,760 --> 00:08:51,360
somewhat more consistent and cleaner

225
00:08:50,240 --> 00:08:53,920
environment

226
00:08:51,360 --> 00:08:55,120
let's say lure is 10 times smaller than

227
00:08:53,920 --> 00:08:58,319
python

228
00:08:55,120 --> 00:08:59,600
so lower radio is 10 times smaller than

229
00:08:58,320 --> 00:09:02,640
gnu radio

230
00:08:59,600 --> 00:09:04,560
maybe 100 times smaller but then it's

231
00:09:02,640 --> 00:09:06,160
faster it's cleaner and it gets you

232
00:09:04,560 --> 00:09:07,680
better chances to understand what's

233
00:09:06,160 --> 00:09:10,719
going on really there

234
00:09:07,680 --> 00:09:11,040
toronto database have never ever tried

235
00:09:10,720 --> 00:09:13,360
it

236
00:09:11,040 --> 00:09:15,040
really but what i read about it it's an

237
00:09:13,360 --> 00:09:18,320
fast in memory

238
00:09:15,040 --> 00:09:19,040
uh database and a lower application

239
00:09:18,320 --> 00:09:22,720
server

240
00:09:19,040 --> 00:09:25,839
so for some high grade loaded sites

241
00:09:22,720 --> 00:09:27,680
and enterprise level of applications and

242
00:09:25,839 --> 00:09:30,080
also a nice compact lower power

243
00:09:27,680 --> 00:09:32,160
distribution which includes

244
00:09:30,080 --> 00:09:33,600
the dynamic assembly not only for the

245
00:09:32,160 --> 00:09:34,880
sea preparation but for lower

246
00:09:33,600 --> 00:09:37,200
preparation

247
00:09:34,880 --> 00:09:38,320
so it's just a compact cross platform

248
00:09:37,200 --> 00:09:41,360
lower distribution

249
00:09:38,320 --> 00:09:45,519
also based on utilizing lower jit and

250
00:09:41,360 --> 00:09:48,480
if assume we have an uh lower jet ported

251
00:09:45,519 --> 00:09:50,720
to the risc-5 all those and many other

252
00:09:48,480 --> 00:09:54,000
platforms and applications making use of

253
00:09:50,720 --> 00:09:55,120
legit will be available or easily

254
00:09:54,000 --> 00:09:57,519
available

255
00:09:55,120 --> 00:09:58,480
there are of course some downsides

256
00:09:57,519 --> 00:10:01,600
apparently this

257
00:09:58,480 --> 00:10:03,839
project is not under active development

258
00:10:01,600 --> 00:10:06,160
it's uh prime it it used to be and

259
00:10:03,839 --> 00:10:09,160
mostly and single person development

260
00:10:06,160 --> 00:10:11,680
mike powell and uh it looks like since

261
00:10:09,160 --> 00:10:12,399
2017 he is not actively contributing to

262
00:10:11,680 --> 00:10:14,719
this project

263
00:10:12,399 --> 00:10:15,519
but still taking some pictures and there

264
00:10:14,720 --> 00:10:18,560
were

265
00:10:15,519 --> 00:10:22,320
recent development of the

266
00:10:18,560 --> 00:10:25,599
arm 64 and mips 64 bit ports of low agit

267
00:10:22,320 --> 00:10:28,079
um some of them were presented here

268
00:10:25,600 --> 00:10:29,839
on the first dam few years ago if i'm

269
00:10:28,079 --> 00:10:33,279
not mistaken

270
00:10:29,839 --> 00:10:34,560
but still the future may be uncertain as

271
00:10:33,279 --> 00:10:37,519
with any open source

272
00:10:34,560 --> 00:10:37,518
and free projects

273
00:10:37,680 --> 00:10:42,239
for the specific applications of the

274
00:10:40,240 --> 00:10:43,120
logit it's not uncommon for the

275
00:10:42,240 --> 00:10:45,760
companies

276
00:10:43,120 --> 00:10:46,720
to make forks and just to support the

277
00:10:45,760 --> 00:10:49,360
efforts

278
00:10:46,720 --> 00:10:50,320
in order to contribute to the mainstream

279
00:10:49,360 --> 00:10:53,600
and uh

280
00:10:50,320 --> 00:10:56,399
it was good and bad according to the

281
00:10:53,600 --> 00:10:56,880
mit license the low and low jet code is

282
00:10:56,399 --> 00:11:00,320
under

283
00:10:56,880 --> 00:11:03,120
so and it's somewhat lacking behind

284
00:11:00,320 --> 00:11:04,800
the uh mainstream lower development

285
00:11:03,120 --> 00:11:05,680
which is now it's the version five point

286
00:11:04,800 --> 00:11:08,959
three

287
00:11:05,680 --> 00:11:10,880
uh low agita is stick to 5.1

288
00:11:08,959 --> 00:11:14,239
but it's not the only lower based

289
00:11:10,880 --> 00:11:17,760
project stick to this version so

290
00:11:14,240 --> 00:11:20,959
maybe maybe not what is lower jit

291
00:11:17,760 --> 00:11:22,480
uh itself consists of as i said the most

292
00:11:20,959 --> 00:11:27,119
attractive part for myself

293
00:11:22,480 --> 00:11:29,680
is the dynamic assembler it's an

294
00:11:27,120 --> 00:11:30,160
actually it's a preprocessor written in

295
00:11:29,680 --> 00:11:33,599
lua

296
00:11:30,160 --> 00:11:36,800
itself which takes a mixture of

297
00:11:33,600 --> 00:11:39,839
c and assemble code and generate plain c

298
00:11:36,800 --> 00:11:43,279
code which when compiled and executed

299
00:11:39,839 --> 00:11:45,920
generates a binary so it's a kind of

300
00:11:43,279 --> 00:11:46,560
two or three step cross compiling

301
00:11:45,920 --> 00:11:50,719
environment

302
00:11:46,560 --> 00:11:52,560
and it allows an easy dynamic

303
00:11:50,720 --> 00:11:54,320
relocation of those steps either to

304
00:11:52,560 --> 00:11:55,199
cross compile environment or to the

305
00:11:54,320 --> 00:11:58,560
target

306
00:11:55,200 --> 00:12:00,320
and the lower power distribution logic

307
00:11:58,560 --> 00:12:00,959
distribution low power i've mentioned

308
00:12:00,320 --> 00:12:03,519
earlier

309
00:12:00,959 --> 00:12:04,079
provides the same preprocession not only

310
00:12:03,519 --> 00:12:06,639
for the

311
00:12:04,079 --> 00:12:07,279
c code but for the lower court itself so

312
00:12:06,639 --> 00:12:09,760
you

313
00:12:07,279 --> 00:12:11,920
write the mixture of law and assembly

314
00:12:09,760 --> 00:12:14,240
your target assembly code

315
00:12:11,920 --> 00:12:15,040
pre-process it with dynamic assembler

316
00:12:14,240 --> 00:12:18,720
you get the

317
00:12:15,040 --> 00:12:20,959
uh c olu

318
00:12:18,720 --> 00:12:22,880
executable for see your compile it and

319
00:12:20,959 --> 00:12:25,279
run it follow you just run it on the

320
00:12:22,880 --> 00:12:26,240
interpreter is on target on your cross

321
00:12:25,279 --> 00:12:28,079
development host

322
00:12:26,240 --> 00:12:30,399
and you get the binary for your target

323
00:12:28,079 --> 00:12:31,199
architecture and with lure it's possible

324
00:12:30,399 --> 00:12:35,360
to run

325
00:12:31,200 --> 00:12:35,360
all this flow on the target itself

326
00:12:35,519 --> 00:12:40,240
then the virtual virtual machine which

327
00:12:38,320 --> 00:12:43,279
is a compatible

328
00:12:40,240 --> 00:12:44,000
binary compatible by application binary

329
00:12:43,279 --> 00:12:46,160
interface

330
00:12:44,000 --> 00:12:48,079
and byte code compatible with the

331
00:12:46,160 --> 00:12:50,719
standard lua virtual machine

332
00:12:48,079 --> 00:12:51,120
but it's highly optimized and written on

333
00:12:50,720 --> 00:12:53,519
the

334
00:12:51,120 --> 00:12:56,079
hand optimized assembler and compiled

335
00:12:53,519 --> 00:13:00,720
with a dynamic assembler

336
00:12:56,079 --> 00:13:03,040
and then there is a tracing jit compiler

337
00:13:00,720 --> 00:13:04,160
of course dynamic memory management and

338
00:13:03,040 --> 00:13:06,880
collection

339
00:13:04,160 --> 00:13:08,319
garbage collector and uh there are

340
00:13:06,880 --> 00:13:10,560
various extension

341
00:13:08,320 --> 00:13:11,760
models which are a foreign function

342
00:13:10,560 --> 00:13:14,239
interface the

343
00:13:11,760 --> 00:13:14,800
api for the calling the c functions is

344
00:13:14,240 --> 00:13:17,680
the same

345
00:13:14,800 --> 00:13:20,880
for the standard lower and lower j uh

346
00:13:17,680 --> 00:13:24,880
binary bit operations

347
00:13:20,880 --> 00:13:27,519
which are now a part of lieu of 5.3

348
00:13:24,880 --> 00:13:29,439
but initially they were introduced by

349
00:13:27,519 --> 00:13:31,680
the lower jet itself

350
00:13:29,440 --> 00:13:33,600
and of course there is a floating point

351
00:13:31,680 --> 00:13:34,000
support flow itself supports only a

352
00:13:33,600 --> 00:13:37,200
single

353
00:13:34,000 --> 00:13:38,079
type of the number and it's a floating

354
00:13:37,200 --> 00:13:42,160
point

355
00:13:38,079 --> 00:13:44,000
but uh for most uh embedded mcu applica

356
00:13:42,160 --> 00:13:45,760
mcu class applications so embedded

357
00:13:44,000 --> 00:13:48,160
controller applications

358
00:13:45,760 --> 00:13:49,680
uh you can skip all the floating point

359
00:13:48,160 --> 00:13:52,880
all together and make your life

360
00:13:49,680 --> 00:13:52,880
much much easier

361
00:13:52,959 --> 00:13:59,680
current status is a very short

362
00:13:56,560 --> 00:14:02,800
and disappointing one

363
00:13:59,680 --> 00:14:05,839
yes lure itself can be compiled and run

364
00:14:02,800 --> 00:14:08,959
on the both on the

365
00:14:05,839 --> 00:14:12,240
spike simulator and on the

366
00:14:08,959 --> 00:14:14,239
target hardware i have run it on several

367
00:14:12,240 --> 00:14:15,120
i think two or three different soft core

368
00:14:14,240 --> 00:14:18,320
cpus

369
00:14:15,120 --> 00:14:20,320
on two different fpgas family so there

370
00:14:18,320 --> 00:14:23,040
is a solid

371
00:14:20,320 --> 00:14:24,240
base for tests and reference platform to

372
00:14:23,040 --> 00:14:27,199
compare with

373
00:14:24,240 --> 00:14:28,560
both in terms of the accuracy of

374
00:14:27,199 --> 00:14:29,599
implementation correctness of the

375
00:14:28,560 --> 00:14:34,239
implementation

376
00:14:29,600 --> 00:14:36,800
and in performance git repository fork

377
00:14:34,240 --> 00:14:38,639
changes make file changes to support the

378
00:14:36,800 --> 00:14:41,920
new architecture and build environment

379
00:14:38,639 --> 00:14:45,040
so just the basic initial steps

380
00:14:41,920 --> 00:14:45,839
then the git repository contains the all

381
00:14:45,040 --> 00:14:48,800
the

382
00:14:45,839 --> 00:14:49,440
instructions from the base 32-bit

383
00:14:48,800 --> 00:14:54,000
integer

384
00:14:49,440 --> 00:14:57,920
set not much more than that it's just 48

385
00:14:54,000 --> 00:14:58,959
instructions if i'm not mistaken uh

386
00:14:57,920 --> 00:15:01,839
excel

387
00:14:58,959 --> 00:15:03,279
all the assembly macro assembler stuffs

388
00:15:01,839 --> 00:15:08,399
such as the registers

389
00:15:03,279 --> 00:15:12,000
renaming and hanging immediate

390
00:15:08,399 --> 00:15:14,720
arguments and labels relocation handling

391
00:15:12,000 --> 00:15:16,480
is work in progress so pretty much

392
00:15:14,720 --> 00:15:20,000
nothing is working

393
00:15:16,480 --> 00:15:20,959
and everything else so i would say 95

394
00:15:20,000 --> 00:15:24,000
percent of work

395
00:15:20,959 --> 00:15:24,638
is still in the long long running to-do

396
00:15:24,000 --> 00:15:27,519
list

397
00:15:24,639 --> 00:15:28,959
so if anybody is willing to join it and

398
00:15:27,519 --> 00:15:32,320
contribute to it

399
00:15:28,959 --> 00:15:35,199
then you are more than welcome either to

400
00:15:32,320 --> 00:15:38,240
fork it yourself or to send pages

401
00:15:35,199 --> 00:15:39,279
uh as i said the to-do list is much

402
00:15:38,240 --> 00:15:42,399
longer than

403
00:15:39,279 --> 00:15:42,959
current status list so what remains to

404
00:15:42,399 --> 00:15:46,959
be done

405
00:15:42,959 --> 00:15:50,079
is pretty much everything

406
00:15:46,959 --> 00:15:50,719
no need to repeat that but much more

407
00:15:50,079 --> 00:15:53,680
interesting

408
00:15:50,720 --> 00:15:55,040
where we go from here when it's ready

409
00:15:53,680 --> 00:15:58,239
and when we have

410
00:15:55,040 --> 00:16:00,160
this basic core system is broken

411
00:15:58,240 --> 00:16:01,920
uh and those stuffs are really

412
00:16:00,160 --> 00:16:04,000
interesting unfortunately we have to go

413
00:16:01,920 --> 00:16:05,279
through the reporting and the laborious

414
00:16:04,000 --> 00:16:08,639
efforts before we

415
00:16:05,279 --> 00:16:11,439
there uh risk five foundation

416
00:16:08,639 --> 00:16:11,920
reserves the j extension specification

417
00:16:11,440 --> 00:16:15,600
for

418
00:16:11,920 --> 00:16:18,160
the uh g exactly for the jit campaign

419
00:16:15,600 --> 00:16:21,040
languages

420
00:16:18,160 --> 00:16:22,399
the question is that what languages are

421
00:16:21,040 --> 00:16:26,880
currently heavily

422
00:16:22,399 --> 00:16:29,600
are heavily using the jit compilation

423
00:16:26,880 --> 00:16:32,480
the most heavyweight player i would say

424
00:16:29,600 --> 00:16:36,560
are java and javascript

425
00:16:32,480 --> 00:16:39,920
not sure maybe c sharp and obviously

426
00:16:36,560 --> 00:16:41,758
because behind those languages

427
00:16:39,920 --> 00:16:43,680
those environments there are huge

428
00:16:41,759 --> 00:16:45,759
corporations with a lot of

429
00:16:43,680 --> 00:16:48,079
software hardware developers and some

430
00:16:45,759 --> 00:16:51,120
budget behind

431
00:16:48,079 --> 00:16:54,479
definitely they will try to

432
00:16:51,120 --> 00:16:55,920
shape this risk 5 j extension

433
00:16:54,480 --> 00:16:58,240
through the foundation through their

434
00:16:55,920 --> 00:16:58,719
contribution i'm pretty much sure that

435
00:16:58,240 --> 00:17:00,959
they're

436
00:16:58,720 --> 00:17:02,079
not aware of any efforts but pretty much

437
00:17:00,959 --> 00:17:05,119
sure that there are

438
00:17:02,079 --> 00:17:07,198
efforts to support

439
00:17:05,119 --> 00:17:08,559
jit compilation on risk five for all

440
00:17:07,199 --> 00:17:12,400
those things

441
00:17:08,559 --> 00:17:14,959
but uh so the question is uh who

442
00:17:12,400 --> 00:17:16,400
and in what direction will shape this j

443
00:17:14,959 --> 00:17:19,839
extension of risk five

444
00:17:16,400 --> 00:17:20,319
architecture when foundation starts to

445
00:17:19,839 --> 00:17:24,079
work

446
00:17:20,319 --> 00:17:27,438
on it and having a really small

447
00:17:24,079 --> 00:17:30,000
light weights lower jet implementation

448
00:17:27,439 --> 00:17:31,919
might be an interesting test bench and

449
00:17:30,000 --> 00:17:33,280
it would be great to have it before the

450
00:17:31,919 --> 00:17:36,960
extension itself

451
00:17:33,280 --> 00:17:39,760
is specified so we can see

452
00:17:36,960 --> 00:17:40,880
if and how it compares to it then of

453
00:17:39,760 --> 00:17:42,960
course because

454
00:17:40,880 --> 00:17:44,400
we can change not only the hardware but

455
00:17:42,960 --> 00:17:46,640
the cpu itself

456
00:17:44,400 --> 00:17:47,520
and do it dynamically or almost

457
00:17:46,640 --> 00:17:49,200
dynamically

458
00:17:47,520 --> 00:17:51,520
it would be interesting to experiment

459
00:17:49,200 --> 00:17:53,440
with the different hardware assisted

460
00:17:51,520 --> 00:17:55,600
techniques for the jit compilation to

461
00:17:53,440 --> 00:17:57,039
the detect hot traces because the lower

462
00:17:55,600 --> 00:18:01,199
jet compiler

463
00:17:57,039 --> 00:18:03,919
is analyzing the execution threat of the

464
00:18:01,200 --> 00:18:04,559
virtual machine at run time and compile

465
00:18:03,919 --> 00:18:07,039
the hot

466
00:18:04,559 --> 00:18:08,160
passes in this machine and jit compile

467
00:18:07,039 --> 00:18:11,520
hot passes

468
00:18:08,160 --> 00:18:13,200
and some execution counter performance

469
00:18:11,520 --> 00:18:16,320
counters in the cpu

470
00:18:13,200 --> 00:18:18,720
may be helpful to provide these hardware

471
00:18:16,320 --> 00:18:22,000
systems for the hot trace detection

472
00:18:18,720 --> 00:18:22,000
same goes for the

473
00:18:23,120 --> 00:18:26,799
memory management and the garbage

474
00:18:24,960 --> 00:18:27,520
collection with the hardware systems for

475
00:18:26,799 --> 00:18:30,080
it

476
00:18:27,520 --> 00:18:31,360
then the thing which is really

477
00:18:30,080 --> 00:18:34,000
interesting is the

478
00:18:31,360 --> 00:18:36,000
some custom and target application

479
00:18:34,000 --> 00:18:38,160
specific acceleration development

480
00:18:36,000 --> 00:18:40,000
and in this case uh once again the

481
00:18:38,160 --> 00:18:43,840
dynamic assembler would provide

482
00:18:40,000 --> 00:18:46,400
a very uh comprehensive and useful

483
00:18:43,840 --> 00:18:47,120
test and evaluation test and prototype

484
00:18:46,400 --> 00:18:50,799
platform

485
00:18:47,120 --> 00:18:52,559
because you can just specify the new uh

486
00:18:50,799 --> 00:18:54,400
assembly instruction on the

487
00:18:52,559 --> 00:18:56,240
interactively on the lower level and

488
00:18:54,400 --> 00:18:59,120
have it immediately compiled

489
00:18:56,240 --> 00:19:00,480
and have the binary code compiled in it

490
00:18:59,120 --> 00:19:02,879
and directly on the

491
00:19:00,480 --> 00:19:04,720
target so if not in production

492
00:19:02,880 --> 00:19:06,240
environment and when there is everything

493
00:19:04,720 --> 00:19:08,320
is committed to the silicon

494
00:19:06,240 --> 00:19:10,000
but for the soft core cpus and the

495
00:19:08,320 --> 00:19:12,320
interactive development and debugging

496
00:19:10,000 --> 00:19:13,520
of those functionality that would be

497
00:19:12,320 --> 00:19:16,080
really interesting

498
00:19:13,520 --> 00:19:17,280
and since i've already mentioned that 30

499
00:19:16,080 --> 00:19:19,520
years ago fourth

500
00:19:17,280 --> 00:19:20,320
was language of choice for such

501
00:19:19,520 --> 00:19:22,000
experiments

502
00:19:20,320 --> 00:19:23,520
there is nothing that would prevent to

503
00:19:22,000 --> 00:19:26,799
write another force

504
00:19:23,520 --> 00:19:28,400
on the assembler on the dynamic

505
00:19:26,799 --> 00:19:30,400
assembler of lower jade

506
00:19:28,400 --> 00:19:32,880
and then once we have an interactive

507
00:19:30,400 --> 00:19:33,360
fourth shell it takes just in two or

508
00:19:32,880 --> 00:19:35,600
three

509
00:19:33,360 --> 00:19:37,678
screens to write a new assembler on this

510
00:19:35,600 --> 00:19:39,760
fourth

511
00:19:37,679 --> 00:19:41,440
and it looks like i'm going in the loops

512
00:19:39,760 --> 00:19:45,039
now

513
00:19:41,440 --> 00:19:47,679
so uh thank you

514
00:19:45,039 --> 00:19:49,280
for your attention and if you have

515
00:19:47,679 --> 00:19:51,600
anything to contribute

516
00:19:49,280 --> 00:19:54,799
any questions please feel free to

517
00:19:51,600 --> 00:19:56,409
contact to download to scan

518
00:19:54,799 --> 00:20:04,639
thank you

519
00:19:56,410 --> 00:20:08,320
[Applause]

520
00:20:04,640 --> 00:20:08,320
yes any questions

521
00:20:09,360 --> 00:20:14,639
uh so i'm assuming what was the higher

522
00:20:12,880 --> 00:20:18,320
max i'm working on the raptor jet

523
00:20:14,640 --> 00:20:20,000
the another luggage at four and i'm

524
00:20:18,320 --> 00:20:21,439
wondering if you're aware of

525
00:20:20,000 --> 00:20:23,360
what the other forks are doing at the

526
00:20:21,440 --> 00:20:25,039
moment for example

527
00:20:23,360 --> 00:20:26,719
um in wreckages something that we're

528
00:20:25,039 --> 00:20:28,240
working on right now and as

529
00:20:26,720 --> 00:20:30,159
i also going to talk about tomorrow is

530
00:20:28,240 --> 00:20:32,320
we are porting the

531
00:20:30,159 --> 00:20:33,280
byte code interpreter of lua that's

532
00:20:32,320 --> 00:20:36,158
written in assembly

533
00:20:33,280 --> 00:20:37,600
to see we're almost done with that oh so

534
00:20:36,159 --> 00:20:40,960
that would kind of like save you

535
00:20:37,600 --> 00:20:43,600
supporting the uh yes but for the

536
00:20:40,960 --> 00:20:44,320
uh so the question was if i am aware of

537
00:20:43,600 --> 00:20:48,158
what the

538
00:20:44,320 --> 00:20:50,960
other blue jade forks are doing are

539
00:20:48,159 --> 00:20:53,520
not really much aware of that so i've

540
00:20:50,960 --> 00:20:53,520
seen that

541
00:20:53,840 --> 00:20:57,280
rtrk company if i'm not mistaken the

542
00:20:56,559 --> 00:21:01,440
name

543
00:20:57,280 --> 00:21:04,720
they are supporting uh ports of low g to

544
00:21:01,440 --> 00:21:09,679
mips 64-bit and arm v-8

545
00:21:04,720 --> 00:21:11,840
64-bit architectures toronto

546
00:21:09,679 --> 00:21:12,880
they are mostly targeted on optimizing

547
00:21:11,840 --> 00:21:16,000
the performance

548
00:21:12,880 --> 00:21:17,280
for their database application so they i

549
00:21:16,000 --> 00:21:19,120
think they are providing some

550
00:21:17,280 --> 00:21:21,840
functionality which improves the

551
00:21:19,120 --> 00:21:22,158
in-memory database handling and they've

552
00:21:21,840 --> 00:21:23,840
do

553
00:21:22,159 --> 00:21:26,000
they've done it directly in the load

554
00:21:23,840 --> 00:21:30,080
sheet of

555
00:21:26,000 --> 00:21:32,480
then there was some other one but i

556
00:21:30,080 --> 00:21:33,678
you can talk to me either tomorrow or

557
00:21:32,480 --> 00:21:36,400
yeah later today

558
00:21:33,679 --> 00:21:37,679
i can find the link there and on some

559
00:21:36,400 --> 00:21:41,120
publications

560
00:21:37,679 --> 00:21:44,480
lua vella if ah

561
00:21:41,120 --> 00:21:47,678
okay i'm not uh going to elaborate about

562
00:21:44,480 --> 00:21:50,640
this oh

563
00:21:47,679 --> 00:21:52,159
thank you just starting with that and uh

564
00:21:50,640 --> 00:21:54,559
porting the

565
00:21:52,159 --> 00:21:55,840
virtual machine from the lower jit

566
00:21:54,559 --> 00:21:58,399
virtual machine

567
00:21:55,840 --> 00:22:00,720
to from assembler to see yes of course

568
00:21:58,400 --> 00:22:02,960
that would save a lot of pertinent

569
00:22:00,720 --> 00:22:04,000
efforts that would be much easier to put

570
00:22:02,960 --> 00:22:06,320
it but then

571
00:22:04,000 --> 00:22:07,679
probably for the price of optimization

572
00:22:06,320 --> 00:22:10,158
and performance

573
00:22:07,679 --> 00:22:12,320
maybe maybe not uh specifically for the

574
00:22:10,159 --> 00:22:16,400
floating point as far as i know the

575
00:22:12,320 --> 00:22:16,399
logit is making use of uh

576
00:22:17,440 --> 00:22:22,400
non-tagging not sure how we and david

577
00:22:20,960 --> 00:22:24,960
support it in the airport

578
00:22:22,400 --> 00:22:26,799
so think here i think yeah i'm not only

579
00:22:24,960 --> 00:22:29,840
started late but i finished late

580
00:22:26,799 --> 00:22:31,760
two sorry about that and i think it's in

581
00:22:29,840 --> 00:22:36,399
a break now

582
00:22:31,760 --> 00:22:36,400
oh so something all of us are really

583
00:22:37,080 --> 00:22:41,840
[Music]

584
00:22:38,840 --> 00:22:41,840
needed

585
00:22:48,320 --> 00:22:50,399
you

