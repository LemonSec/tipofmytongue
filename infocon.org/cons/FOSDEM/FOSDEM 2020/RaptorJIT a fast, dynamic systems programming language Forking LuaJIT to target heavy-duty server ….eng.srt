1
00:00:06,399 --> 00:00:08,799
all right

2
00:00:08,880 --> 00:00:17,680
so rapidget a fast dynamic systems

3
00:00:11,920 --> 00:00:20,800
programming language

4
00:00:17,680 --> 00:00:23,759
so first off hi i'm max

5
00:00:20,800 --> 00:00:25,039
i'm an open source systems hacker i'm

6
00:00:23,760 --> 00:00:30,480
currently dabbling in high performance

7
00:00:25,039 --> 00:00:32,719
networking applications

8
00:00:30,480 --> 00:00:34,399
and i suppose i should start with a

9
00:00:32,719 --> 00:00:36,880
quick rundown of bluer just in case you

10
00:00:34,399 --> 00:00:36,880
don't know it

11
00:00:37,760 --> 00:00:41,920
lua is a simple minimalistic high level

12
00:00:39,600 --> 00:00:45,120
language

13
00:00:41,920 --> 00:00:48,399
it has like a schema semantics

14
00:00:45,120 --> 00:00:51,199
and the pascal esque syntax

15
00:00:48,399 --> 00:00:52,559
it has first class functions multiple

16
00:00:51,199 --> 00:00:54,480
return values

17
00:00:52,559 --> 00:00:58,160
prototype based object orientation and

18
00:00:54,480 --> 00:01:00,640
it's surprisingly flexible

19
00:00:58,160 --> 00:01:01,358
and its central data structure is the

20
00:01:00,640 --> 00:01:05,199
table

21
00:01:01,359 --> 00:01:08,640
which is a hybrid between a hash map and

22
00:01:05,199 --> 00:01:09,920
a sparse array and the canonical

23
00:01:08,640 --> 00:01:12,240
implementation of lua

24
00:01:09,920 --> 00:01:13,520
is called puklua which is a simple

25
00:01:12,240 --> 00:01:15,360
embeddable interpreter

26
00:01:13,520 --> 00:01:19,119
intended to be embedded in cnc plus plus

27
00:01:15,360 --> 00:01:19,119
applications among others

28
00:01:23,119 --> 00:01:27,200
so here's an extended hello world to get

29
00:01:25,119 --> 00:01:28,479
you kind of familiar with the language

30
00:01:27,200 --> 00:01:29,680
i'm not going to explain anything about

31
00:01:28,479 --> 00:01:30,320
it i'm just going to let you stare at it

32
00:01:29,680 --> 00:01:41,840
a little bit

33
00:01:30,320 --> 00:01:41,839
and hope that's somewhat obvious

34
00:01:47,040 --> 00:01:51,040
so luagit is an alternative

35
00:01:48,960 --> 00:01:54,158
implementation of lua

36
00:01:51,040 --> 00:01:54,799
it implements a dialect of lua 5.1 and a

37
00:01:54,159 --> 00:01:58,159
half

38
00:01:54,799 --> 00:01:59,520
ish plus some extra goodies

39
00:01:58,159 --> 00:02:01,280
that's what i'm saying is a dialect not

40
00:01:59,520 --> 00:02:04,079
just an older version

41
00:02:01,280 --> 00:02:06,000
um as its name suggests it comes with

42
00:02:04,079 --> 00:02:08,000
the just in time compiler

43
00:02:06,000 --> 00:02:09,440
and that compiler is really really

44
00:02:08,000 --> 00:02:11,038
impressive

45
00:02:09,440 --> 00:02:13,280
and achieves performance competitive

46
00:02:11,038 --> 00:02:15,599
with c

47
00:02:13,280 --> 00:02:17,120
uh it's also a really good language for

48
00:02:15,599 --> 00:02:18,480
expressing programs that are close to

49
00:02:17,120 --> 00:02:21,680
the metal

50
00:02:18,480 --> 00:02:22,399
thanks to its built-in language support

51
00:02:21,680 --> 00:02:26,879
for

52
00:02:22,400 --> 00:02:26,879
accessing and operating on c data

53
00:02:27,680 --> 00:02:33,519
and that i think personally that lurajit

54
00:02:29,920 --> 00:02:36,319
is a good systems language

55
00:02:33,519 --> 00:02:37,680
systems language here i mean that it's a

56
00:02:36,319 --> 00:02:39,040
good language to replace c

57
00:02:37,680 --> 00:02:40,560
like an application that you would have

58
00:02:39,040 --> 00:02:41,679
pri previously written in c you could

59
00:02:40,560 --> 00:02:45,360
also write in lewis j

60
00:02:41,680 --> 00:02:45,360
and you will get very far with that

61
00:02:46,160 --> 00:02:50,000
so here's an example of some lurid code

62
00:02:48,319 --> 00:02:51,920
showing off its ability to poke at low

63
00:02:50,000 --> 00:02:53,599
level data

64
00:02:51,920 --> 00:02:55,679
so you can see here that the language

65
00:02:53,599 --> 00:02:57,679
has

66
00:02:55,680 --> 00:02:59,840
built in primitives for expressing the c

67
00:02:57,680 --> 00:03:03,599
data such as these structs

68
00:02:59,840 --> 00:03:04,800
and you can access that data

69
00:03:03,599 --> 00:03:07,518
and the fields as if there were native

70
00:03:04,800 --> 00:03:07,519
lua objects

71
00:03:07,920 --> 00:03:12,958
to illustrate that for instance if p

72
00:03:10,000 --> 00:03:16,480
here was instead a lure table

73
00:03:12,959 --> 00:03:16,720
with containing a string or containing a

74
00:03:16,480 --> 00:03:19,200
c

75
00:03:16,720 --> 00:03:20,400
array and a lower number the code you

76
00:03:19,200 --> 00:03:21,760
wouldn't change at all you could still

77
00:03:20,400 --> 00:03:22,879
access it the same way and you could

78
00:03:21,760 --> 00:03:27,120
still copy

79
00:03:22,879 --> 00:03:27,120
to the c array contained in the lure

80
00:03:30,840 --> 00:03:37,120
table

81
00:03:33,440 --> 00:03:38,720
so raptor jit is a fork of luagit

82
00:03:37,120 --> 00:03:40,560
and its goal is to be a really good

83
00:03:38,720 --> 00:03:43,440
systems programming language

84
00:03:40,560 --> 00:03:44,560
um with webrtc we want to do a couple of

85
00:03:43,440 --> 00:03:45,680
things

86
00:03:44,560 --> 00:03:46,879
first we want to simplify the

87
00:03:45,680 --> 00:03:48,799
implementation and improve

88
00:03:46,879 --> 00:03:52,399
maintainability

89
00:03:48,799 --> 00:03:53,840
um we also want to improve the compiler

90
00:03:52,400 --> 00:03:55,519
for heavy duty server applications

91
00:03:53,840 --> 00:03:57,519
specifically so we have a very narrow

92
00:03:55,519 --> 00:03:59,439
use case we want to write systems

93
00:03:57,519 --> 00:04:00,879
applications like with systems hackers

94
00:03:59,439 --> 00:04:01,680
and we want to create a systems language

95
00:04:00,879 --> 00:04:06,480
and

96
00:04:01,680 --> 00:04:09,519
we have a more narrow set of um

97
00:04:06,480 --> 00:04:11,840
yeah i guess optimization targets and we

98
00:04:09,519 --> 00:04:14,239
think that we can improve the compiler

99
00:04:11,840 --> 00:04:16,798
even more um by targeting this narrow

100
00:04:14,239 --> 00:04:16,798
use case

101
00:04:17,358 --> 00:04:20,638
especially we want to eliminate

102
00:04:18,798 --> 00:04:21,839
performance pitfalls meaning small

103
00:04:20,639 --> 00:04:26,639
changes that have

104
00:04:21,839 --> 00:04:29,758
big big impact performance and

105
00:04:26,639 --> 00:04:31,520
as well as uh unexpected jit behavior

106
00:04:29,759 --> 00:04:34,000
so we want to make it more easily to

107
00:04:31,520 --> 00:04:37,120
understand it compiler and to use it

108
00:04:34,000 --> 00:04:40,880
and under the bottom line we want to

109
00:04:37,120 --> 00:04:42,479
provide more reliable performance so

110
00:04:40,880 --> 00:04:43,840
right now lower performances legit

111
00:04:42,479 --> 00:04:45,599
performance is great we just want to

112
00:04:43,840 --> 00:04:48,719
make it more reliable

113
00:04:45,600 --> 00:04:51,360
and maybe even better in some some cases

114
00:04:48,720 --> 00:04:52,800
um right raptorship also adds new

115
00:04:51,360 --> 00:04:56,000
features

116
00:04:52,800 --> 00:04:57,600
among those is a low overhead profiler

117
00:04:56,000 --> 00:04:59,520
and the matching introspection tools for

118
00:04:57,600 --> 00:05:00,960
that data

119
00:04:59,520 --> 00:05:03,039
and hopefully there are many more

120
00:05:00,960 --> 00:05:05,758
features to come and that's where you

121
00:05:03,039 --> 00:05:05,759
come in i guess

122
00:05:08,840 --> 00:05:11,840
so

123
00:05:14,960 --> 00:05:19,359
in order to simplify and maintain the

124
00:05:16,400 --> 00:05:20,880
code we are doing oops sorry

125
00:05:19,360 --> 00:05:23,280
in order to simplify and maintain the

126
00:05:20,880 --> 00:05:25,600
code we are doing a big spring clean

127
00:05:23,280 --> 00:05:27,039
so here's this pull request titled big

128
00:05:25,600 --> 00:05:28,320
bang remove all the features that i can

129
00:05:27,039 --> 00:05:30,960
live without

130
00:05:28,320 --> 00:05:33,120
uh and yeah it says merged that's the

131
00:05:30,960 --> 00:05:34,960
purple icon on the left there

132
00:05:33,120 --> 00:05:37,360
um it removes support for all

133
00:05:34,960 --> 00:05:38,638
architectures except x8664 because at

134
00:05:37,360 --> 00:05:40,880
the moment that's the only thing we care

135
00:05:38,639 --> 00:05:42,160
about and

136
00:05:40,880 --> 00:05:44,080
it's enough work maintaining one

137
00:05:42,160 --> 00:05:44,800
architecture uh it removed windows

138
00:05:44,080 --> 00:05:47,840
support and

139
00:05:44,800 --> 00:05:50,160
removed luggage's 32-bit heap mode

140
00:05:47,840 --> 00:05:51,758
and this allowed us to get rid of a lot

141
00:05:50,160 --> 00:05:52,000
of if devs we're trying to get rid of

142
00:05:51,759 --> 00:05:53,199
all

143
00:05:52,000 --> 00:05:55,520
if deaths because we don't like if

144
00:05:53,199 --> 00:05:57,600
deaths and that resulted in a total code

145
00:05:55,520 --> 00:06:00,400
reduction of roughly 50 percent which i

146
00:05:57,600 --> 00:06:00,400
think is a big win

147
00:06:04,800 --> 00:06:09,440
the luwajit interpreter used to be

148
00:06:07,919 --> 00:06:11,120
handwritten assembly

149
00:06:09,440 --> 00:06:12,719
duplicated for each specific

150
00:06:11,120 --> 00:06:15,600
architecture

151
00:06:12,720 --> 00:06:16,800
and we have almost completed rewriting

152
00:06:15,600 --> 00:06:19,360
that virtual machine

153
00:06:16,800 --> 00:06:20,639
interpreter in c and hope that that will

154
00:06:19,360 --> 00:06:23,520
make it easier to port

155
00:06:20,639 --> 00:06:24,720
and change the language implementation

156
00:06:23,520 --> 00:06:26,318
that is

157
00:06:24,720 --> 00:06:28,639
and the rationale behind this change is

158
00:06:26,319 --> 00:06:30,080
that we spend most of our runtime in

159
00:06:28,639 --> 00:06:33,600
compiled code meaning in

160
00:06:30,080 --> 00:06:35,758
into traces and compile traces

161
00:06:33,600 --> 00:06:36,800
so for our use cases high performance

162
00:06:35,759 --> 00:06:39,360
networking

163
00:06:36,800 --> 00:06:40,880
um spending any significant time in

164
00:06:39,360 --> 00:06:43,600
interpreted code

165
00:06:40,880 --> 00:06:44,960
uh is out of the question anyway because

166
00:06:43,600 --> 00:06:48,000
that would be way too slow

167
00:06:44,960 --> 00:06:49,758
so for us an interpreter that's fast

168
00:06:48,000 --> 00:06:51,039
doesn't really do anything we really

169
00:06:49,759 --> 00:06:52,800
don't need interpreter that's like

170
00:06:51,039 --> 00:06:55,599
heavily optimized so

171
00:06:52,800 --> 00:06:59,280
our idea is that look we're gonna make

172
00:06:55,599 --> 00:07:00,560
it easier to to maintain and we're gonna

173
00:06:59,280 --> 00:07:02,880
skip the optimizations that we don't

174
00:07:00,560 --> 00:07:03,840
benefit from and instead we want to make

175
00:07:02,880 --> 00:07:06,000
it more easier

176
00:07:03,840 --> 00:07:17,840
for your code to stay compiled and not

177
00:07:06,000 --> 00:07:17,840
fall back into the interpreter

178
00:07:18,880 --> 00:07:22,240
so we're also looking to remove complex

179
00:07:20,560 --> 00:07:23,599
optimizations that don't carry their own

180
00:07:22,240 --> 00:07:26,160
weight anymore

181
00:07:23,599 --> 00:07:28,479
so here we removed a special case fast

182
00:07:26,160 --> 00:07:30,000
pass for string and turning

183
00:07:28,479 --> 00:07:32,000
and on the next slide here i'm

184
00:07:30,000 --> 00:07:35,680
paraphrasing from the pull request

185
00:07:32,000 --> 00:07:39,440
which somewhat reads uh this fast pass

186
00:07:35,680 --> 00:07:40,880
in air quotes was bad because

187
00:07:39,440 --> 00:07:43,520
it was a tricky custom mem compare

188
00:07:40,880 --> 00:07:45,440
routine that needs to be maintained

189
00:07:43,520 --> 00:07:46,639
it turned out to be slower than the

190
00:07:45,440 --> 00:07:51,280
stock mem compare

191
00:07:46,639 --> 00:07:53,199
on modern x86 which was the slow path

192
00:07:51,280 --> 00:07:54,878
and it led to confusing performance

193
00:07:53,199 --> 00:07:57,440
behavior where

194
00:07:54,879 --> 00:07:59,520
unrelated memory allocation could buyers

195
00:07:57,440 --> 00:08:02,719
often use buffer to the fast pass

196
00:07:59,520 --> 00:08:05,359
again the fastpass and impact overall

197
00:08:02,720 --> 00:08:05,360
performance

198
00:08:08,080 --> 00:08:11,680
so in the description luke concludes

199
00:08:09,680 --> 00:08:12,319
that the fastpass code was written 10

200
00:08:11,680 --> 00:08:15,199
years ago

201
00:08:12,319 --> 00:08:15,840
and lost a lot has happened since then

202
00:08:15,199 --> 00:08:18,400
and he

203
00:08:15,840 --> 00:08:20,000
goes on into how the cpu architecture

204
00:08:18,400 --> 00:08:21,039
the operating system that is linux in

205
00:08:20,000 --> 00:08:23,599
our case

206
00:08:21,039 --> 00:08:24,159
and even compilers like gcc had really

207
00:08:23,599 --> 00:08:27,599
evolved

208
00:08:24,160 --> 00:08:29,520
in that time and goes on to say that

209
00:08:27,599 --> 00:08:32,000
i think the optimization had simply bit

210
00:08:29,520 --> 00:08:35,039
rotted so

211
00:08:32,000 --> 00:08:36,958
what i want to stress here is five okay

212
00:08:35,039 --> 00:08:38,240
what i want to stress here is that this

213
00:08:36,958 --> 00:08:39,838
is not to bash this

214
00:08:38,240 --> 00:08:40,799
individual optimization or anything it's

215
00:08:39,839 --> 00:08:42,880
just to say that if you have

216
00:08:40,799 --> 00:08:45,920
optimizations that are kind of smart

217
00:08:42,880 --> 00:08:48,160
and try to outperform certain components

218
00:08:45,920 --> 00:08:49,360
in your in your system you have to

219
00:08:48,160 --> 00:08:52,480
account for the

220
00:08:49,360 --> 00:08:55,360
cost of maintaining them and

221
00:08:52,480 --> 00:08:57,040
the work of continuously verifying that

222
00:08:55,360 --> 00:08:58,480
they still actually work and

223
00:08:57,040 --> 00:09:02,480
still actually make your program faster

224
00:08:58,480 --> 00:09:02,480
or just that weight

225
00:09:03,680 --> 00:09:06,959
okay so i'm running a little bit out of

226
00:09:05,279 --> 00:09:08,640
time here

227
00:09:06,959 --> 00:09:11,920
um right so raptor wants to improve

228
00:09:08,640 --> 00:09:13,519
the jit compiler um

229
00:09:11,920 --> 00:09:15,199
to to understand the setting here i

230
00:09:13,519 --> 00:09:16,880
guess i should explain that lewitt acts

231
00:09:15,200 --> 00:09:19,440
as a drop-in replacement for

232
00:09:16,880 --> 00:09:20,320
poke lure so it has a really fast jit

233
00:09:19,440 --> 00:09:22,160
compiler

234
00:09:20,320 --> 00:09:24,080
and it also has a freely fast

235
00:09:22,160 --> 00:09:26,240
interpreter so if the jit compiler for

236
00:09:24,080 --> 00:09:27,920
some reason fails to compile a code path

237
00:09:26,240 --> 00:09:30,160
it will drop into an interpreter that is

238
00:09:27,920 --> 00:09:32,319
still uh many times slower

239
00:09:30,160 --> 00:09:33,439
uh sorry many times faster than the

240
00:09:32,320 --> 00:09:35,760
default lua

241
00:09:33,440 --> 00:09:36,560
implementation canonical implementation

242
00:09:35,760 --> 00:09:38,480
so in any case

243
00:09:36,560 --> 00:09:40,000
if you have a lua program that you use

244
00:09:38,480 --> 00:09:42,320
with poke lure

245
00:09:40,000 --> 00:09:43,680
you're going to have big performance

246
00:09:42,320 --> 00:09:46,800
improvements if you run it with lower

247
00:09:43,680 --> 00:09:46,800
jit and so you're going to be happy

248
00:09:46,880 --> 00:09:50,800
and we think that we can do better for a

249
00:09:48,320 --> 00:09:53,680
narrowed set of use cases with raplejit

250
00:09:50,800 --> 00:09:55,839
so to summarize here that luagit is for

251
00:09:53,680 --> 00:09:58,800
existing poke lure code bases

252
00:09:55,839 --> 00:10:02,240
and raptorgit is for new applications

253
00:09:58,800 --> 00:10:02,240
written with a just-in-time compiler in

254
00:10:02,839 --> 00:10:05,839
mind

255
00:10:07,040 --> 00:10:10,719
so in case you don't know how tracing

256
00:10:09,360 --> 00:10:12,160
does the time compiler works

257
00:10:10,720 --> 00:10:14,160
i will give you a super reduced

258
00:10:12,160 --> 00:10:16,560
explanation a tracing jit

259
00:10:14,160 --> 00:10:18,000
interprets code uh when it hits a branch

260
00:10:16,560 --> 00:10:19,920
it checks if it's hot or not if it's not

261
00:10:18,000 --> 00:10:20,560
hot it increments a hot count for that

262
00:10:19,920 --> 00:10:22,640
branch

263
00:10:20,560 --> 00:10:24,079
and continuous interpretation however

264
00:10:22,640 --> 00:10:26,079
when the branch is hot it starts

265
00:10:24,079 --> 00:10:28,319
recording a trace

266
00:10:26,079 --> 00:10:29,839
and then again continuous interpretation

267
00:10:28,320 --> 00:10:31,200
after recording a trace and the next

268
00:10:29,839 --> 00:10:34,160
time we would hit a branch which is not

269
00:10:31,200 --> 00:10:36,000
shown here because it's very simplified

270
00:10:34,160 --> 00:10:37,760
eventually instead of hitting hot

271
00:10:36,000 --> 00:10:46,880
branches you would start hitting

272
00:10:37,760 --> 00:10:49,920
executing traces of hot code

273
00:10:46,880 --> 00:10:51,040
so with webgit instead of treating the

274
00:10:49,920 --> 00:10:53,920
compiler like a

275
00:10:51,040 --> 00:10:55,279
special source that you throw into your

276
00:10:53,920 --> 00:10:56,880
lure programs to make them magically

277
00:10:55,279 --> 00:10:58,640
faster we want to foster a culture of

278
00:10:56,880 --> 00:11:00,320
understanding a jit compiler

279
00:10:58,640 --> 00:11:01,839
and with that understanding we want to

280
00:11:00,320 --> 00:11:02,880
formulate design goals and implement

281
00:11:01,839 --> 00:11:04,560
them

282
00:11:02,880 --> 00:11:06,320
and this should in turn again make the

283
00:11:04,560 --> 00:11:09,199
jit compiler easier to understand

284
00:11:06,320 --> 00:11:09,680
and most importantly easier to leverage

285
00:11:09,200 --> 00:11:11,440
and

286
00:11:09,680 --> 00:11:13,120
the issue referred below here talks

287
00:11:11,440 --> 00:11:14,800
about avoiding high impact medium

288
00:11:13,120 --> 00:11:17,120
generality optimizations

289
00:11:14,800 --> 00:11:18,319
i touched on this before so a high

290
00:11:17,120 --> 00:11:20,399
impact medium general energy

291
00:11:18,320 --> 00:11:23,600
optimization is

292
00:11:20,399 --> 00:11:26,079
we call we call problems uh

293
00:11:23,600 --> 00:11:27,760
this term if they have the following

294
00:11:26,079 --> 00:11:29,439
behavior so if you make a small change

295
00:11:27,760 --> 00:11:30,800
to your program and you get a big change

296
00:11:29,440 --> 00:11:32,160
to performance that's what we call a

297
00:11:30,800 --> 00:11:34,160
high impact medium generality

298
00:11:32,160 --> 00:11:36,959
optimization because it's not general

299
00:11:34,160 --> 00:11:39,040
um enough for you to make freely make

300
00:11:36,959 --> 00:11:42,479
changes to your program that are like

301
00:11:39,040 --> 00:11:43,839
relevant in in in scale in scope um

302
00:11:42,480 --> 00:11:45,680
but it's high impact because you get a

303
00:11:43,839 --> 00:11:47,360
big hit if you if you fall off that

304
00:11:45,680 --> 00:11:50,000
optimized path

305
00:11:47,360 --> 00:11:50,880
uh and that is how we want to that is

306
00:11:50,000 --> 00:11:53,120
why we want to

307
00:11:50,880 --> 00:11:54,399
avoid unreliable compiler behavior where

308
00:11:53,120 --> 00:11:56,240
small changes

309
00:11:54,399 --> 00:11:58,800
to your program cause big changes for

310
00:11:56,240 --> 00:11:58,800
performance

311
00:12:01,279 --> 00:12:05,040
so aggressively blacklist codepaths at

312
00:12:03,360 --> 00:12:07,040
face to compile

313
00:12:05,040 --> 00:12:08,240
that favors the small short-running

314
00:12:07,040 --> 00:12:09,839
programs

315
00:12:08,240 --> 00:12:12,000
our programs the programs that we target

316
00:12:09,839 --> 00:12:14,160
are all long-running so um

317
00:12:12,000 --> 00:12:15,760
just as a policy change we spend way

318
00:12:14,160 --> 00:12:17,040
more time trying to find good traces and

319
00:12:15,760 --> 00:12:18,480
we're good with that

320
00:12:17,040 --> 00:12:19,839
um we just want to make sure that we

321
00:12:18,480 --> 00:12:21,120
find the best traces for the program

322
00:12:19,839 --> 00:12:24,720
because we know that it's gonna

323
00:12:21,120 --> 00:12:26,560
run for a long time um yeah as a first

324
00:12:24,720 --> 00:12:28,480
step in that direction we updated the

325
00:12:26,560 --> 00:12:30,319
just-in-time compilers heuristics

326
00:12:28,480 --> 00:12:32,000
for trace selection to match our target

327
00:12:30,320 --> 00:12:36,839
workloads

328
00:12:32,000 --> 00:12:39,839
and um yeah not going to go much into

329
00:12:36,839 --> 00:12:39,839
that

330
00:12:41,519 --> 00:12:44,800
on another note luagit doesn't actually

331
00:12:44,399 --> 00:12:46,399
con

332
00:12:44,800 --> 00:12:48,800
consider the time domain when selecting

333
00:12:46,399 --> 00:12:50,160
tracers so a branch could become hot

334
00:12:48,800 --> 00:12:52,000
because it was executed for the

335
00:12:50,160 --> 00:12:55,680
hundredths time

336
00:12:52,000 --> 00:12:57,519
after an hour of runtime so the hotness

337
00:12:55,680 --> 00:12:59,120
is not actually frequency but rather

338
00:12:57,519 --> 00:13:00,399
this abstract idea of

339
00:12:59,120 --> 00:13:02,240
some counter that at some point

340
00:13:00,399 --> 00:13:03,760
overflows and i think that's really

341
00:13:02,240 --> 00:13:05,279
unintuitive behavior

342
00:13:03,760 --> 00:13:06,639
i think that maybe repligit should

343
00:13:05,279 --> 00:13:08,240
consider the time domain and only

344
00:13:06,639 --> 00:13:10,560
compile code which is actually

345
00:13:08,240 --> 00:13:11,760
executed frequently we did some

346
00:13:10,560 --> 00:13:13,920
experience with that

347
00:13:11,760 --> 00:13:15,120
the results so far were positive but

348
00:13:13,920 --> 00:13:16,479
that's just to show you the kind of

349
00:13:15,120 --> 00:13:21,279
hacking that we're doing

350
00:13:16,480 --> 00:13:23,040
on that fork

351
00:13:21,279 --> 00:13:24,639
right um we also added new features we

352
00:13:23,040 --> 00:13:26,000
added a low overhead profiler the

353
00:13:24,639 --> 00:13:27,519
intention is to have that profiler

354
00:13:26,000 --> 00:13:28,480
always turned on it will always collect

355
00:13:27,519 --> 00:13:30,000
profiling data

356
00:13:28,480 --> 00:13:31,680
even in your performer even in your

357
00:13:30,000 --> 00:13:33,360
production applications which you can

358
00:13:31,680 --> 00:13:35,040
then grab while it's running

359
00:13:33,360 --> 00:13:37,200
and display in this front end that we

360
00:13:35,040 --> 00:13:38,639
wrote to find which traces take the most

361
00:13:37,200 --> 00:13:41,519
time and what's the problem

362
00:13:38,639 --> 00:13:43,279
and see how they got created this is to

363
00:13:41,519 --> 00:13:45,440
show that the tool that we wrote is

364
00:13:43,279 --> 00:13:47,199
a very visual tool so this is a

365
00:13:45,440 --> 00:13:49,680
dependency graph of the

366
00:13:47,199 --> 00:13:50,880
immediate representation instructions

367
00:13:49,680 --> 00:13:52,000
where you can see ah this is the loop

368
00:13:50,880 --> 00:13:55,680
body and this is the head

369
00:13:52,000 --> 00:13:55,680
that's executed before entering the loop

370
00:13:58,000 --> 00:14:01,360
um yeah there's lots of experimentation

371
00:14:00,399 --> 00:14:03,440
going on

372
00:14:01,360 --> 00:14:04,560
we've experimented with a trace barrier

373
00:14:03,440 --> 00:14:07,040
primitive

374
00:14:04,560 --> 00:14:08,719
uh that kind of like stops traces from

375
00:14:07,040 --> 00:14:10,800
going over that line of code and

376
00:14:08,720 --> 00:14:12,800
forces a new trace to be created if at

377
00:14:10,800 --> 00:14:15,439
all we like that one

378
00:14:12,800 --> 00:14:16,240
we experiment with unlikely primitive

379
00:14:15,440 --> 00:14:17,519
which

380
00:14:16,240 --> 00:14:19,680
are too long to explain now we didn't

381
00:14:17,519 --> 00:14:20,560
like it and one thing i guess i want to

382
00:14:19,680 --> 00:14:22,959
touch on is that

383
00:14:20,560 --> 00:14:24,239
this jitsi primitive what this would

384
00:14:22,959 --> 00:14:27,439
basically allow you to do

385
00:14:24,240 --> 00:14:28,320
is declare or constify a table at

386
00:14:27,440 --> 00:14:29,920
runtime

387
00:14:28,320 --> 00:14:31,839
and that would kind of give the compiler

388
00:14:29,920 --> 00:14:34,399
superpower where it could

389
00:14:31,839 --> 00:14:36,000
treat um tables created after

390
00:14:34,399 --> 00:14:37,440
configuration changes as constant and

391
00:14:36,000 --> 00:14:41,360
optimized based on those

392
00:14:37,440 --> 00:14:42,560
contents um

393
00:14:41,360 --> 00:14:45,760
just a few minutes left so if you want

394
00:14:42,560 --> 00:14:48,399
to take some questions all right

395
00:14:45,760 --> 00:14:50,399
yeah yeah i guess this one's important i

396
00:14:48,399 --> 00:14:53,519
just have to mention it like in a minute

397
00:14:50,399 --> 00:14:54,480
um this is something i love villa has

398
00:14:53,519 --> 00:14:55,920
apparently already

399
00:14:54,480 --> 00:14:57,440
implemented and something we're really

400
00:14:55,920 --> 00:14:58,719
interested in because it removes another

401
00:14:57,440 --> 00:14:59,760
high impact medium generality

402
00:14:58,720 --> 00:15:02,880
optimization

403
00:14:59,760 --> 00:15:04,160
i guess check out the slides if you want

404
00:15:02,880 --> 00:15:06,480
to

405
00:15:04,160 --> 00:15:07,600
know more about that um right there's

406
00:15:06,480 --> 00:15:09,360
there's general

407
00:15:07,600 --> 00:15:11,440
jujit compilers there's new literature

408
00:15:09,360 --> 00:15:14,720
new new science happening

409
00:15:11,440 --> 00:15:15,760
that really fixes some basic things we

410
00:15:14,720 --> 00:15:18,000
could implement those things and we're

411
00:15:15,760 --> 00:15:19,600
open to experimenting with that

412
00:15:18,000 --> 00:15:21,440
and yeah one of my personal goals would

413
00:15:19,600 --> 00:15:22,240
be to have save foreign function memory

414
00:15:21,440 --> 00:15:24,000
access

415
00:15:22,240 --> 00:15:26,079
where because all the information for

416
00:15:24,000 --> 00:15:27,040
foreign types meaning c data low level

417
00:15:26,079 --> 00:15:28,239
data

418
00:15:27,040 --> 00:15:29,839
we have all the type information for

419
00:15:28,240 --> 00:15:31,120
that available at runtime so there's

420
00:15:29,839 --> 00:15:32,959
like nothing that really

421
00:15:31,120 --> 00:15:34,480
stands in between us making that type

422
00:15:32,959 --> 00:15:35,439
safe and

423
00:15:34,480 --> 00:15:36,560
the compiler is really good at

424
00:15:35,440 --> 00:15:39,120
optimizing these checks so that's

425
00:15:36,560 --> 00:15:42,079
something that i would like to do

426
00:15:39,120 --> 00:15:42,959
right so thank you for your attention uh

427
00:15:42,079 --> 00:15:47,758
please get involved

428
00:15:42,959 --> 00:15:55,839
we are on github and yeah

429
00:15:47,759 --> 00:15:55,839
i would

430
00:15:57,279 --> 00:16:01,920
sorry yeah i would be pleased if you if

431
00:16:00,639 --> 00:16:02,320
i got some of you interested in this

432
00:16:01,920 --> 00:16:04,959
project

433
00:16:02,320 --> 00:16:06,320
also if you like into jit hacking um i

434
00:16:04,959 --> 00:16:09,839
think this is a cool place to start and

435
00:16:06,320 --> 00:16:09,839
yeah if you have any questions please

436
00:16:10,880 --> 00:16:14,000
yes yes

437
00:16:17,040 --> 00:16:23,439
no i don't think so i mean maybe some

438
00:16:18,480 --> 00:16:25,279
bug fixes but i'm not aware

439
00:16:23,440 --> 00:16:27,600
yeah yeah i mean we have we have a very

440
00:16:25,279 --> 00:16:30,880
very specific goal and we're

441
00:16:27,600 --> 00:16:32,639
willing to separate and split like we

442
00:16:30,880 --> 00:16:34,160
want to cooperate with other forks and

443
00:16:32,639 --> 00:16:35,920
change exchange ideas

444
00:16:34,160 --> 00:16:38,480
but we're really open to just like going

445
00:16:35,920 --> 00:16:38,479
wild on it

446
00:16:40,800 --> 00:16:53,040
anybody else yes

447
00:16:50,079 --> 00:16:54,560
yeah um i think so so when i started

448
00:16:53,040 --> 00:16:56,160
working with the raptorship project i

449
00:16:54,560 --> 00:16:58,319
actually wasn't aware of louisville

450
00:16:56,160 --> 00:16:59,600
but i just recently reread some of the

451
00:16:58,320 --> 00:17:01,040
presentations on slide

452
00:16:59,600 --> 00:17:03,199
and to me it seems that they're they're

453
00:17:01,040 --> 00:17:04,480
very similar in spirit and they

454
00:17:03,199 --> 00:17:06,240
have some very specific features that

455
00:17:04,480 --> 00:17:06,799
they both want the same thing and i

456
00:17:06,240 --> 00:17:08,000
think

457
00:17:06,799 --> 00:17:09,280
i hope that in the future there will be

458
00:17:08,000 --> 00:17:10,400
like a strong collaboration between

459
00:17:09,280 --> 00:17:11,678
these two projects because

460
00:17:10,400 --> 00:17:13,679
some things that we want already

461
00:17:11,679 --> 00:17:14,720
implemented in louisville and maybe the

462
00:17:13,679 --> 00:17:16,480
other way around even i think that

463
00:17:14,720 --> 00:17:18,240
louisville once for example have also

464
00:17:16,480 --> 00:17:20,959
try out the c interpreter

465
00:17:18,240 --> 00:17:20,959
stuff like that yeah

466
00:17:23,359 --> 00:17:26,000
anyone else

467
00:17:29,120 --> 00:17:33,840
all right thank you very much

468
00:17:41,720 --> 00:17:44,720
yes

