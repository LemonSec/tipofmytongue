1
00:00:06,000 --> 00:00:08,400
great

2
00:00:06,960 --> 00:00:10,559
all right thank you very much uh

3
00:00:08,400 --> 00:00:12,160
everyone um the next talk is uh by

4
00:00:10,559 --> 00:00:14,479
michael he also spoke in this room

5
00:00:12,160 --> 00:00:16,560
last year um and he'll talk a little bit

6
00:00:14,480 --> 00:00:20,000
about code workload management

7
00:00:16,560 --> 00:00:21,919
um thank you very much thank you

8
00:00:20,000 --> 00:00:23,198
welcome and uh let's let's hit the road

9
00:00:21,920 --> 00:00:24,240
and get going come on in find your

10
00:00:23,199 --> 00:00:25,680
favorite seat

11
00:00:24,240 --> 00:00:27,038
so my name is michael hopefully you can

12
00:00:25,680 --> 00:00:30,960
all hear me okay in the back let me know

13
00:00:27,039 --> 00:00:33,040
if not been at red hat for

14
00:00:30,960 --> 00:00:34,880
almost eight years now this is my i

15
00:00:33,040 --> 00:00:36,239
think at least third maybe fourth time

16
00:00:34,880 --> 00:00:39,120
at fosdem

17
00:00:36,239 --> 00:00:41,120
i've been working on container tooling

18
00:00:39,120 --> 00:00:43,440
and technology at red hat for

19
00:00:41,120 --> 00:00:45,519
the last uh at least five years

20
00:00:43,440 --> 00:00:46,879
basically since docker became a thing

21
00:00:45,520 --> 00:00:48,559
and everybody decided wait a minute we

22
00:00:46,879 --> 00:00:50,160
need to get in on this docker thing and

23
00:00:48,559 --> 00:00:50,800
start shipping docker containers and so

24
00:00:50,160 --> 00:00:52,160
on

25
00:00:50,800 --> 00:00:53,730
in the last two years i've been very

26
00:00:52,160 --> 00:00:55,120
focused on

27
00:00:53,730 --> 00:00:56,800
[Music]

28
00:00:55,120 --> 00:00:59,519
cluster orchestration workload

29
00:00:56,800 --> 00:01:01,199
orchestration workload management

30
00:00:59,520 --> 00:01:03,120
deployment tooling all that kind of

31
00:01:01,199 --> 00:01:04,158
stuff on top of kubernetes

32
00:01:03,120 --> 00:01:07,360
and that's we're going to talk about

33
00:01:04,159 --> 00:01:09,840
some today in particular

34
00:01:07,360 --> 00:01:11,600
what the intersection is of the control

35
00:01:09,840 --> 00:01:12,159
plane for kubernetes what we use to

36
00:01:11,600 --> 00:01:14,479
control

37
00:01:12,159 --> 00:01:15,920
infrastructure and kubernetes itself uh

38
00:01:14,479 --> 00:01:16,479
and the workloads that run on top of

39
00:01:15,920 --> 00:01:18,960
that

40
00:01:16,479 --> 00:01:20,320
and the tooling that manages the glue

41
00:01:18,960 --> 00:01:22,158
between all of that

42
00:01:20,320 --> 00:01:24,000
so uh we need to understand a couple

43
00:01:22,159 --> 00:01:25,920
things about the kubernetes api

44
00:01:24,000 --> 00:01:28,159
to really dive into that so let's let's

45
00:01:25,920 --> 00:01:29,600
dive into some details now kubernetes

46
00:01:28,159 --> 00:01:31,520
itself of course

47
00:01:29,600 --> 00:01:33,600
we're familiar with that runs

48
00:01:31,520 --> 00:01:35,039
containerized workloads across

49
00:01:33,600 --> 00:01:37,119
some collection of machines some

50
00:01:35,040 --> 00:01:39,439
collection of nodes right

51
00:01:37,119 --> 00:01:40,960
and the api that enables us to do that

52
00:01:39,439 --> 00:01:43,839
includes a number of primitives

53
00:01:40,960 --> 00:01:44,880
like pods pods are the way we run a

54
00:01:43,840 --> 00:01:47,680
container

55
00:01:44,880 --> 00:01:49,119
at a very simple level services that

56
00:01:47,680 --> 00:01:50,720
give you a network presence and this

57
00:01:49,119 --> 00:01:54,799
sort of thing

58
00:01:50,720 --> 00:01:56,320
and if we look at that api we see

59
00:01:54,799 --> 00:01:57,920
uh some interesting things about it has

60
00:01:56,320 --> 00:02:00,960
anybody ever used this uh

61
00:01:57,920 --> 00:02:01,600
cubesee tail proxy command before few

62
00:02:00,960 --> 00:02:04,000
hands

63
00:02:01,600 --> 00:02:05,839
very handy if you want to explore the

64
00:02:04,000 --> 00:02:08,318
api and see what's actually there

65
00:02:05,840 --> 00:02:09,840
so you can run proxy and it'll just

66
00:02:08,318 --> 00:02:12,079
start up a local proxy for you

67
00:02:09,840 --> 00:02:13,520
unauthenticated that you can connect to

68
00:02:12,080 --> 00:02:15,760
and just start hitting kubernetes

69
00:02:13,520 --> 00:02:17,599
endpoints so here

70
00:02:15,760 --> 00:02:19,040
i did exactly that and i just curled the

71
00:02:17,599 --> 00:02:21,679
root uh

72
00:02:19,040 --> 00:02:22,239
of that api and we're getting a listing

73
00:02:21,680 --> 00:02:25,599
of

74
00:02:22,239 --> 00:02:28,720
api groups so this kubernetes api

75
00:02:25,599 --> 00:02:29,440
it's it's a web api uh some people call

76
00:02:28,720 --> 00:02:32,160
this rest

77
00:02:29,440 --> 00:02:33,440
um it's not really rest if you know rest

78
00:02:32,160 --> 00:02:35,120
but you know it's rest ish

79
00:02:33,440 --> 00:02:36,720
it's what a lot of people call rest but

80
00:02:35,120 --> 00:02:39,040
really it's a web api

81
00:02:36,720 --> 00:02:40,080
hierarchical in the way you would expect

82
00:02:39,040 --> 00:02:43,040
and uh

83
00:02:40,080 --> 00:02:44,800
it has these api groups so many of the

84
00:02:43,040 --> 00:02:50,160
apis you're familiar with

85
00:02:44,800 --> 00:02:52,480
are under this core uh api slash v1

86
00:02:50,160 --> 00:02:53,200
url space that's where a lot of them are

87
00:02:52,480 --> 00:02:55,040
but

88
00:02:53,200 --> 00:02:56,640
you can see the beginnings of this list

89
00:02:55,040 --> 00:02:58,400
we're only into the a's

90
00:02:56,640 --> 00:03:00,879
in this list in terms of what apis are

91
00:02:58,400 --> 00:03:02,000
available you can add these groups and

92
00:03:00,879 --> 00:03:04,640
we can in fact

93
00:03:02,000 --> 00:03:06,480
add our own and that's one of the like

94
00:03:04,640 --> 00:03:09,760
really special and unique things

95
00:03:06,480 --> 00:03:12,560
about kubernetes its api service will

96
00:03:09,760 --> 00:03:15,120
allow you to automatically uh to add

97
00:03:12,560 --> 00:03:16,720
your own api endpoints your own kind

98
00:03:15,120 --> 00:03:18,720
your own data structures

99
00:03:16,720 --> 00:03:20,720
it will serve them for you it will track

100
00:03:18,720 --> 00:03:21,680
them it will even validate them for you

101
00:03:20,720 --> 00:03:23,440
and all that stuff

102
00:03:21,680 --> 00:03:25,280
uh and that's really pretty amazing and

103
00:03:23,440 --> 00:03:28,079
that that's central

104
00:03:25,280 --> 00:03:29,760
to what we're gonna do with kubernetes

105
00:03:28,080 --> 00:03:32,000
today

106
00:03:29,760 --> 00:03:33,599
and uh and then this api is declarative

107
00:03:32,000 --> 00:03:35,680
we'll dig into that in a moment but

108
00:03:33,599 --> 00:03:38,879
declarative is a very important part

109
00:03:35,680 --> 00:03:40,640
of managing things in kubernetes

110
00:03:38,879 --> 00:03:42,319
uh so just as an example you can see

111
00:03:40,640 --> 00:03:44,399
down here i just made up i completely

112
00:03:42,319 --> 00:03:46,000
made up i have no idea fosdem uses

113
00:03:44,400 --> 00:03:47,799
kubernetes or ever will

114
00:03:46,000 --> 00:03:49,519
but we could have for example an

115
00:03:47,799 --> 00:03:51,599
apps.fazdom.org

116
00:03:49,519 --> 00:03:52,799
api namespace that we could then put

117
00:03:51,599 --> 00:03:56,000
apis underneath

118
00:03:52,799 --> 00:03:57,920
in a kubernetes cluster

119
00:03:56,000 --> 00:04:00,319
all right let's dig into an actual

120
00:03:57,920 --> 00:04:00,958
resource and and what how resources are

121
00:04:00,319 --> 00:04:02,399
structured

122
00:04:00,959 --> 00:04:04,239
so if we were going to look at one

123
00:04:02,400 --> 00:04:06,239
individual resource like a pod

124
00:04:04,239 --> 00:04:08,080
or like a service or or something along

125
00:04:06,239 --> 00:04:09,920
those lines we would see these kind of

126
00:04:08,080 --> 00:04:12,159
things so let's start at the top

127
00:04:09,920 --> 00:04:13,359
and we start with an api version what

128
00:04:12,159 --> 00:04:15,959
api is this

129
00:04:13,360 --> 00:04:17,359
endpoint a part of so this could be

130
00:04:15,959 --> 00:04:19,358
apps.org

131
00:04:17,358 --> 00:04:21,358
for example this could be i work with a

132
00:04:19,358 --> 00:04:23,680
lot of openshift.io

133
00:04:21,358 --> 00:04:26,400
endpoints for obvious reasons so you

134
00:04:23,680 --> 00:04:28,960
have a namespace and a version

135
00:04:26,400 --> 00:04:30,159
so versions are things like v1 alpha 1

136
00:04:28,960 --> 00:04:32,719
is where most of us start

137
00:04:30,160 --> 00:04:34,400
it could just be v1 v2 these are

138
00:04:32,720 --> 00:04:37,759
semantics they have very specific

139
00:04:34,400 --> 00:04:40,799
meaning within the kubernetes context

140
00:04:37,759 --> 00:04:43,360
and then the kind the kind is like a

141
00:04:40,800 --> 00:04:44,400
table name in a traditional database

142
00:04:43,360 --> 00:04:47,520
kind uh

143
00:04:44,400 --> 00:04:50,880
is like pod kind is service

144
00:04:47,520 --> 00:04:53,440
we could make up a kind like wordpress

145
00:04:50,880 --> 00:04:55,199
and have a kind that describes what a

146
00:04:53,440 --> 00:04:58,400
wordpress deployment will look like

147
00:04:55,199 --> 00:04:59,840
that could be our custom kind now into

148
00:04:58,400 --> 00:05:02,080
this metadata section

149
00:04:59,840 --> 00:05:03,440
name and namespace are the way that we

150
00:05:02,080 --> 00:05:06,560
uniquely identify

151
00:05:03,440 --> 00:05:09,680
one individual record of

152
00:05:06,560 --> 00:05:12,720
the type that is defined by

153
00:05:09,680 --> 00:05:14,320
group version and kind with me so

154
00:05:12,720 --> 00:05:16,320
name that's a unique id within a

155
00:05:14,320 --> 00:05:17,840
namespace and of course the kubernetes

156
00:05:16,320 --> 00:05:21,280
namespace itself

157
00:05:17,840 --> 00:05:23,440
divides resources up within the cluster

158
00:05:21,280 --> 00:05:26,479
largely for reasons of role-based access

159
00:05:23,440 --> 00:05:28,080
control and quota control

160
00:05:26,479 --> 00:05:29,599
and then this is the really interesting

161
00:05:28,080 --> 00:05:32,080
part spec

162
00:05:29,600 --> 00:05:33,680
spec is where you declare what you want

163
00:05:32,080 --> 00:05:35,919
you specify

164
00:05:33,680 --> 00:05:36,960
what state you want to exist in the

165
00:05:35,919 --> 00:05:40,000
world

166
00:05:36,960 --> 00:05:43,359
so you as a user of the api

167
00:05:40,000 --> 00:05:45,440
the spec part is for you the status

168
00:05:43,360 --> 00:05:46,639
is not for you to write it the status is

169
00:05:45,440 --> 00:05:49,039
for you to read

170
00:05:46,639 --> 00:05:50,560
the status where a controller of some

171
00:05:49,039 --> 00:05:51,840
kind running in the cluster

172
00:05:50,560 --> 00:05:54,880
will get into what a controller is in a

173
00:05:51,840 --> 00:05:56,960
minute status is where a controller can

174
00:05:54,880 --> 00:05:58,400
write some information for you to find

175
00:05:56,960 --> 00:05:58,960
about what is its understanding of the

176
00:05:58,400 --> 00:06:01,679
world

177
00:05:58,960 --> 00:06:02,318
what has it actually done so in the spec

178
00:06:01,680 --> 00:06:06,000
you may have

179
00:06:02,319 --> 00:06:09,039
asked for a certain number of things to

180
00:06:06,000 --> 00:06:11,840
exist i want uh 10 pods i want

181
00:06:09,039 --> 00:06:12,479
uh 15 of something else the status is

182
00:06:11,840 --> 00:06:14,318
somewhere

183
00:06:12,479 --> 00:06:15,599
that it might tell you how many

184
00:06:14,319 --> 00:06:18,800
currently exist

185
00:06:15,600 --> 00:06:21,680
and is it trying or not to make more

186
00:06:18,800 --> 00:06:23,120
or remove some is it encountering

187
00:06:21,680 --> 00:06:26,319
problems while it's doing that

188
00:06:23,120 --> 00:06:27,919
the status is your way to get feedback

189
00:06:26,319 --> 00:06:29,360
from a controller about what it's been

190
00:06:27,919 --> 00:06:30,639
doing but remember this is all

191
00:06:29,360 --> 00:06:33,600
asynchronous

192
00:06:30,639 --> 00:06:34,479
so when you create a resource you define

193
00:06:33,600 --> 00:06:36,639
the spec

194
00:06:34,479 --> 00:06:38,159
then you basically wait around and watch

195
00:06:36,639 --> 00:06:39,919
that resource for changes

196
00:06:38,160 --> 00:06:41,840
and eventually you'll see some changes

197
00:06:39,919 --> 00:06:45,198
to that status that will inform you

198
00:06:41,840 --> 00:06:48,000
about what's actually happening

199
00:06:45,199 --> 00:06:49,199
so here's examples a pod so let's just

200
00:06:48,000 --> 00:06:52,639
look at the one on the left

201
00:06:49,199 --> 00:06:54,319
a pod so we've got the api version

202
00:06:52,639 --> 00:06:57,840
uh the group is implicit it's part of

203
00:06:54,319 --> 00:07:00,400
core kubernetes and the version is v1

204
00:06:57,840 --> 00:07:01,198
and the kind is pod so we got that down

205
00:07:00,400 --> 00:07:03,039
the name

206
00:07:01,199 --> 00:07:05,199
uh it's got a name now there's no

207
00:07:03,039 --> 00:07:06,560
namespace here but there's no namespace

208
00:07:05,199 --> 00:07:08,479
listed here because if we were going to

209
00:07:06,560 --> 00:07:12,080
create this resource

210
00:07:08,479 --> 00:07:14,639
whatever namespace we are creating it

211
00:07:12,080 --> 00:07:15,280
inside of will be implicit in the create

212
00:07:14,639 --> 00:07:17,120
action

213
00:07:15,280 --> 00:07:18,318
i have a namespace as part of that

214
00:07:17,120 --> 00:07:20,080
create action

215
00:07:18,319 --> 00:07:21,759
uh so that namespace will really just be

216
00:07:20,080 --> 00:07:23,919
implicit at that time

217
00:07:21,759 --> 00:07:25,039
uh in the spec we've specified the

218
00:07:23,919 --> 00:07:26,318
typical kind of things you would

219
00:07:25,039 --> 00:07:28,560
anticipate

220
00:07:26,319 --> 00:07:30,160
a pod to have what container image

221
00:07:28,560 --> 00:07:32,479
should be running

222
00:07:30,160 --> 00:07:34,160
what ports if any need to be exposed and

223
00:07:32,479 --> 00:07:34,880
you can imagine other kinds of things we

224
00:07:34,160 --> 00:07:37,199
could

225
00:07:34,880 --> 00:07:38,880
specify here storage do we need to

226
00:07:37,199 --> 00:07:40,560
attach some persistent storage

227
00:07:38,880 --> 00:07:42,400
do we need to mount some secrets in here

228
00:07:40,560 --> 00:07:44,960
all that kind of stuff

229
00:07:42,400 --> 00:07:46,719
also notice there's no status here why

230
00:07:44,960 --> 00:07:49,359
is there no status

231
00:07:46,720 --> 00:07:50,160
because this is a resource in the form

232
00:07:49,360 --> 00:07:51,919
where we would

233
00:07:50,160 --> 00:07:54,160
we're about to create it we're about to

234
00:07:51,919 --> 00:07:56,560
hand this to the to the api

235
00:07:54,160 --> 00:07:58,800
so no controller has touched this yet

236
00:07:56,560 --> 00:08:01,120
after we created this pod resource

237
00:07:58,800 --> 00:08:03,039
then a controller would start acting on

238
00:08:01,120 --> 00:08:05,520
it and start putting a status on it

239
00:08:03,039 --> 00:08:06,400
and then we'd find out what's going on

240
00:08:05,520 --> 00:08:08,639
okay

241
00:08:06,400 --> 00:08:11,520
now this is the real exciting part

242
00:08:08,639 --> 00:08:14,639
custom resource definitions enable us

243
00:08:11,520 --> 00:08:16,799
to tell the kubernetes api service

244
00:08:14,639 --> 00:08:18,000
add an end point add a new endpoint

245
00:08:16,800 --> 00:08:19,520
among all the endpoints that you're

246
00:08:18,000 --> 00:08:21,919
serving right now

247
00:08:19,520 --> 00:08:23,758
and we can tell it what is the structure

248
00:08:21,919 --> 00:08:25,680
of the of that resource

249
00:08:23,759 --> 00:08:26,960
what is the specific data structure that

250
00:08:25,680 --> 00:08:30,400
would go into the spec

251
00:08:26,960 --> 00:08:32,079
of that resource and

252
00:08:30,400 --> 00:08:34,478
we can then use those just like any

253
00:08:32,080 --> 00:08:36,080
other native kubernetes resources

254
00:08:34,479 --> 00:08:38,560
we don't have to write any code to do

255
00:08:36,080 --> 00:08:40,000
this we don't have to run any new api

256
00:08:38,559 --> 00:08:42,799
services to do this

257
00:08:40,000 --> 00:08:43,839
all we have to do is of course in yaml

258
00:08:42,799 --> 00:08:45,519
because kubernetes

259
00:08:43,839 --> 00:08:47,120
fill out a yaml resource there is an

260
00:08:45,519 --> 00:08:49,120
actual core resource called

261
00:08:47,120 --> 00:08:50,240
custom resource definition we just

262
00:08:49,120 --> 00:08:52,800
create one of those

263
00:08:50,240 --> 00:08:54,480
and poof the api service starts serving

264
00:08:52,800 --> 00:08:57,279
this new endpoint and a new data

265
00:08:54,480 --> 00:08:58,880
data type it will even do validation of

266
00:08:57,279 --> 00:09:01,680
that data type

267
00:08:58,880 --> 00:09:03,200
uh using open api v3 so you can you can

268
00:09:01,680 --> 00:09:06,079
tell it things like

269
00:09:03,200 --> 00:09:07,360
this field is a string this field is a

270
00:09:06,080 --> 00:09:10,959
positive integer

271
00:09:07,360 --> 00:09:13,680
this field has a minimum value of zero

272
00:09:10,959 --> 00:09:14,479
um you know whatever other kind of con

273
00:09:13,680 --> 00:09:16,560
validation

274
00:09:14,480 --> 00:09:17,680
mean is meaningful to you and meaningful

275
00:09:16,560 --> 00:09:21,279
to your data structure

276
00:09:17,680 --> 00:09:24,160
it's really powerful of course

277
00:09:21,279 --> 00:09:25,279
once we've done that all we have is a

278
00:09:24,160 --> 00:09:26,880
data store

279
00:09:25,279 --> 00:09:28,640
all we have is well i can create a

280
00:09:26,880 --> 00:09:31,200
resource called wordpress

281
00:09:28,640 --> 00:09:31,680
i can read them i can update them uh and

282
00:09:31,200 --> 00:09:33,120
and this

283
00:09:31,680 --> 00:09:34,959
api source will keep track of them but

284
00:09:33,120 --> 00:09:36,560
nothing is happening in the background

285
00:09:34,959 --> 00:09:38,800
we haven't any action yet nothing's

286
00:09:36,560 --> 00:09:41,760
taking action because we don't have

287
00:09:38,800 --> 00:09:41,760
a controller yet

288
00:09:41,920 --> 00:09:45,199
so this is an example uh what if we

289
00:09:43,600 --> 00:09:46,720
wanted to deploy memcached

290
00:09:45,200 --> 00:09:48,720
we could make a memcache d custom

291
00:09:46,720 --> 00:09:50,000
resource definition and then somebody

292
00:09:48,720 --> 00:09:52,959
could come along and create

293
00:09:50,000 --> 00:09:54,880
one of those resources and specify a

294
00:09:52,959 --> 00:09:58,160
size of three for example

295
00:09:54,880 --> 00:10:00,000
uh later on we'll see the operator sdk

296
00:09:58,160 --> 00:10:02,000
mentioned if you wanted to go through

297
00:10:00,000 --> 00:10:04,160
the the getting started guide for the

298
00:10:02,000 --> 00:10:06,480
operator sdk for making an operator

299
00:10:04,160 --> 00:10:07,360
you're going to start by making a

300
00:10:06,480 --> 00:10:10,959
memcache d

301
00:10:07,360 --> 00:10:14,240
operator nice simple example okay

302
00:10:10,959 --> 00:10:16,000
but what is an operator so an operator

303
00:10:14,240 --> 00:10:18,640
is three things

304
00:10:16,000 --> 00:10:20,000
one is a custom resource we make a

305
00:10:18,640 --> 00:10:22,319
custom resource

306
00:10:20,000 --> 00:10:24,079
uh something like wordpress so if we

307
00:10:22,320 --> 00:10:26,240
were gonna make a wordpress operator

308
00:10:24,079 --> 00:10:27,760
our goal is to make an operator that

309
00:10:26,240 --> 00:10:30,640
understands how to deploy

310
00:10:27,760 --> 00:10:32,160
manage wordpress in a kubernetes cluster

311
00:10:30,640 --> 00:10:33,839
and we would start with a custom

312
00:10:32,160 --> 00:10:36,800
resource called wordpress

313
00:10:33,839 --> 00:10:38,720
that describes what would a wordpress

314
00:10:36,800 --> 00:10:41,199
deployment look like what's uh

315
00:10:38,720 --> 00:10:44,079
what's the title of the blog what's the

316
00:10:41,200 --> 00:10:45,440
contact info for the person that runs it

317
00:10:44,079 --> 00:10:47,439
color scheme you know those kind of

318
00:10:45,440 --> 00:10:48,480
things i'm not much into blogging so i

319
00:10:47,440 --> 00:10:52,720
don't do that

320
00:10:48,480 --> 00:10:54,720
but you could next we need a controller

321
00:10:52,720 --> 00:10:55,920
because with just a custom resource no

322
00:10:54,720 --> 00:10:57,519
action is happening so we need a

323
00:10:55,920 --> 00:11:00,079
controller to be running

324
00:10:57,519 --> 00:11:01,200
in the cluster what is a controller a

325
00:11:00,079 --> 00:11:04,319
controller

326
00:11:01,200 --> 00:11:07,360
is typically a pod running

327
00:11:04,320 --> 00:11:09,760
a container running in that cluster side

328
00:11:07,360 --> 00:11:13,040
by side with all the other workloads

329
00:11:09,760 --> 00:11:14,720
and it watches the kubernetes api

330
00:11:13,040 --> 00:11:17,439
for the resource types that it cares

331
00:11:14,720 --> 00:11:19,680
about and whenever it sees one

332
00:11:17,440 --> 00:11:21,839
and sees an event happening related to

333
00:11:19,680 --> 00:11:24,959
one of those resources it cares about

334
00:11:21,839 --> 00:11:27,519
it runs what we call reconciliation and

335
00:11:24,959 --> 00:11:29,439
reconciliation is where

336
00:11:27,519 --> 00:11:30,959
that controller will look at the spec it

337
00:11:29,440 --> 00:11:32,000
looks at your spec that you just

338
00:11:30,959 --> 00:11:34,160
specified

339
00:11:32,000 --> 00:11:35,600
what do you want what have you declared

340
00:11:34,160 --> 00:11:37,839
then it looks at the real state of the

341
00:11:35,600 --> 00:11:39,360
world what actually exists right now

342
00:11:37,839 --> 00:11:41,120
and then it makes changes to the state

343
00:11:39,360 --> 00:11:44,800
of the world to bring that

344
00:11:41,120 --> 00:11:46,640
closer to what you've asked for

345
00:11:44,800 --> 00:11:47,839
that's what a controller does it's a key

346
00:11:46,640 --> 00:11:49,600
part of this pattern

347
00:11:47,839 --> 00:11:51,360
but there are lots of controllers what

348
00:11:49,600 --> 00:11:53,680
makes it what makes an operator an

349
00:11:51,360 --> 00:11:54,720
operator what makes a controller an

350
00:11:53,680 --> 00:11:57,760
operator

351
00:11:54,720 --> 00:11:59,839
that is the operational knowledge

352
00:11:57,760 --> 00:12:02,000
all the things that an sre team might do

353
00:11:59,839 --> 00:12:05,120
for example in the course of managing

354
00:12:02,000 --> 00:12:06,880
some service all that stuff about

355
00:12:05,120 --> 00:12:08,560
how do you deploy what steps you take to

356
00:12:06,880 --> 00:12:10,720
deploy it how do you

357
00:12:08,560 --> 00:12:13,040
monitor it how do you repair it when it

358
00:12:10,720 --> 00:12:16,079
breaks every ops team

359
00:12:13,040 --> 00:12:17,760
understands a certain number of common

360
00:12:16,079 --> 00:12:18,959
failure modes for their application

361
00:12:17,760 --> 00:12:21,279
right

362
00:12:18,959 --> 00:12:23,040
something shows up in the logs or some

363
00:12:21,279 --> 00:12:24,800
alarm gets set off you say ah

364
00:12:23,040 --> 00:12:26,639
i bet i know what's wrong here and we

365
00:12:24,800 --> 00:12:29,439
just got to go do the thing and it'll be

366
00:12:26,639 --> 00:12:31,120
back on the road in a minute you can

367
00:12:29,440 --> 00:12:32,560
automate that process you can code those

368
00:12:31,120 --> 00:12:34,720
kind of repairs

369
00:12:32,560 --> 00:12:36,638
custom kind of scaling if you're going

370
00:12:34,720 --> 00:12:38,720
to scale based on custom metrics

371
00:12:36,639 --> 00:12:41,519
based on queue depth for some particular

372
00:12:38,720 --> 00:12:43,600
service you can customize scaling

373
00:12:41,519 --> 00:12:44,800
all kinds of things around managing the

374
00:12:43,600 --> 00:12:47,440
full life cycle

375
00:12:44,800 --> 00:12:49,120
of your workload you encode into a

376
00:12:47,440 --> 00:12:50,480
controller

377
00:12:49,120 --> 00:12:53,839
and that's what makes an operator these

378
00:12:50,480 --> 00:12:53,839
three things make an operator

379
00:12:54,000 --> 00:12:58,320
and what can an operator do so deploying

380
00:12:56,480 --> 00:12:59,760
and managing an application is the prime

381
00:12:58,320 --> 00:13:02,079
use case that's what we talk about like

382
00:12:59,760 --> 00:13:04,000
a wordpress for example

383
00:13:02,079 --> 00:13:05,279
but that's not all sometimes people

384
00:13:04,000 --> 00:13:08,399
write operators to

385
00:13:05,279 --> 00:13:11,600
either report on or even enforce

386
00:13:08,399 --> 00:13:14,880
policy so you could ensure uh

387
00:13:11,600 --> 00:13:17,760
pick some resource type that uh

388
00:13:14,880 --> 00:13:18,720
you want all pods to have some

389
00:13:17,760 --> 00:13:21,839
particular

390
00:13:18,720 --> 00:13:24,240
annotation on them or all all name

391
00:13:21,839 --> 00:13:25,600
spaces need to have a certain quota in

392
00:13:24,240 --> 00:13:27,920
them

393
00:13:25,600 --> 00:13:29,600
you can imagine other kinds of things

394
00:13:27,920 --> 00:13:30,639
you could write an operator that watches

395
00:13:29,600 --> 00:13:33,360
those resources

396
00:13:30,639 --> 00:13:34,800
and if it finds one that does not have

397
00:13:33,360 --> 00:13:37,360
whatever state you want to have

398
00:13:34,800 --> 00:13:38,160
either uh it could tattle and and tell

399
00:13:37,360 --> 00:13:40,079
you about it

400
00:13:38,160 --> 00:13:41,439
or maybe even enforce it maybe just put

401
00:13:40,079 --> 00:13:42,959
it back the way it's supposed to be

402
00:13:41,440 --> 00:13:44,880
and if somebody tries to change it it'll

403
00:13:42,959 --> 00:13:45,439
get that event immediately slap that

404
00:13:44,880 --> 00:13:46,839
away

405
00:13:45,440 --> 00:13:49,760
and put it back the way it's supposed to

406
00:13:46,839 --> 00:13:51,279
be then managing external resources this

407
00:13:49,760 --> 00:13:53,920
is a really interesting area

408
00:13:51,279 --> 00:13:55,600
a little bit newer of an area but you

409
00:13:53,920 --> 00:13:58,399
can manage things like

410
00:13:55,600 --> 00:13:58,959
a network switch imagine reconfiguring a

411
00:13:58,399 --> 00:14:01,440
switch

412
00:13:58,959 --> 00:14:02,079
that's in use by a cluster from the

413
00:14:01,440 --> 00:14:05,440
cluster zone

414
00:14:02,079 --> 00:14:06,319
api so we're natively in this kubernetes

415
00:14:05,440 --> 00:14:08,399
native way

416
00:14:06,320 --> 00:14:09,920
interacting with and managing physical

417
00:14:08,399 --> 00:14:11,680
infrastructure around us

418
00:14:09,920 --> 00:14:13,519
from the kubernetes control plane by

419
00:14:11,680 --> 00:14:14,079
using this controller and operator

420
00:14:13,519 --> 00:14:16,079
pattern

421
00:14:14,079 --> 00:14:17,920
and you can imagine some other examples

422
00:14:16,079 --> 00:14:20,160
so here's the pattern illustrated

423
00:14:17,920 --> 00:14:21,519
we have this controller that's watching

424
00:14:20,160 --> 00:14:24,319
events

425
00:14:21,519 --> 00:14:25,920
it's going to tell the api service which

426
00:14:24,320 --> 00:14:28,079
resources it wants to watch

427
00:14:25,920 --> 00:14:29,839
and which name spaces it wants to watch

428
00:14:28,079 --> 00:14:32,079
and it'll get an event anytime one is

429
00:14:29,839 --> 00:14:34,639
created updated deleted

430
00:14:32,079 --> 00:14:35,760
it gets an event and that's it's it's

431
00:14:34,639 --> 00:14:37,760
time to run

432
00:14:35,760 --> 00:14:39,279
this reconcile function now if you

433
00:14:37,760 --> 00:14:40,480
wanted to go implement your own

434
00:14:39,279 --> 00:14:42,880
controller

435
00:14:40,480 --> 00:14:44,560
uh normally there's frameworks that will

436
00:14:42,880 --> 00:14:45,600
will help you with this they'll scaffold

437
00:14:44,560 --> 00:14:48,000
out even a basic

438
00:14:45,600 --> 00:14:48,800
skeleton of a controller for you and

439
00:14:48,000 --> 00:14:50,880
your job

440
00:14:48,800 --> 00:14:52,560
is to go to the reconcile function and

441
00:14:50,880 --> 00:14:54,959
start implementing that

442
00:14:52,560 --> 00:14:56,000
so the reconcile function starts usually

443
00:14:54,959 --> 00:14:58,079
with something like

444
00:14:56,000 --> 00:14:59,199
let's just retrieve our wordpress

445
00:14:58,079 --> 00:15:01,279
resource

446
00:14:59,199 --> 00:15:03,120
and okay let's now start looking at it

447
00:15:01,279 --> 00:15:04,079
so this person has asked for a wordpress

448
00:15:03,120 --> 00:15:06,720
with a title

449
00:15:04,079 --> 00:15:09,120
of this does that exist is there a

450
00:15:06,720 --> 00:15:11,199
wordpress deployed that has that title

451
00:15:09,120 --> 00:15:12,639
uh if not let's go to poi one or maybe

452
00:15:11,199 --> 00:15:14,639
it is deployed but it's got the wrong

453
00:15:12,639 --> 00:15:17,040
title so let's change the title

454
00:15:14,639 --> 00:15:18,079
uh maybe the version that's deployed is

455
00:15:17,040 --> 00:15:20,560
not the one that's supposed to be

456
00:15:18,079 --> 00:15:22,319
deployed so let's initiate an upgrade

457
00:15:20,560 --> 00:15:25,199
and you can just imagine you you

458
00:15:22,320 --> 00:15:28,240
validate the entire state of the world

459
00:15:25,199 --> 00:15:31,839
and then you make changes

460
00:15:28,240 --> 00:15:32,800
that bring you closer to the spec and in

461
00:15:31,839 --> 00:15:35,120
a traditional

462
00:15:32,800 --> 00:15:36,160
operator what pops out as the product of

463
00:15:35,120 --> 00:15:38,160
this is

464
00:15:36,160 --> 00:15:39,439
an application all the pieces of an

465
00:15:38,160 --> 00:15:42,319
application

466
00:15:39,440 --> 00:15:44,000
pods services secrets config maps

467
00:15:42,320 --> 00:15:45,759
persistent volume claims

468
00:15:44,000 --> 00:15:48,160
other services it depends on all that

469
00:15:45,759 --> 00:15:50,160
stuff you would orchestrate

470
00:15:48,160 --> 00:15:53,199
the creation of and the life cycle of

471
00:15:50,160 --> 00:15:53,199
from your operator

472
00:15:53,759 --> 00:15:57,600
so this puts you in a good position uh

473
00:15:55,920 --> 00:15:58,719
this is thinking of an example with

474
00:15:57,600 --> 00:16:01,440
prometheus

475
00:15:58,720 --> 00:16:03,680
uh there's a prometheus operator you not

476
00:16:01,440 --> 00:16:05,600
be surprised to know

477
00:16:03,680 --> 00:16:07,439
so by having a prometheus operator we're

478
00:16:05,600 --> 00:16:08,800
being proactive about the management

479
00:16:07,440 --> 00:16:10,480
when something changes inside the

480
00:16:08,800 --> 00:16:12,319
cluster that's relevant to this running

481
00:16:10,480 --> 00:16:14,639
prometheus whether it's good bad

482
00:16:12,320 --> 00:16:16,240
uh immediately this operator gets an

483
00:16:14,639 --> 00:16:17,519
event and goes and checks out what's

484
00:16:16,240 --> 00:16:19,920
going on and make sure that everything

485
00:16:17,519 --> 00:16:23,839
is still the way it's supposed to be

486
00:16:19,920 --> 00:16:25,279
as opposed to being reactive we're not

487
00:16:23,839 --> 00:16:27,120
paging somebody and then waiting for

488
00:16:25,279 --> 00:16:27,920
this to get fixed we're not submitting a

489
00:16:27,120 --> 00:16:30,639
ticket

490
00:16:27,920 --> 00:16:31,439
when traffic increases asking for more

491
00:16:30,639 --> 00:16:32,959
infrastructure

492
00:16:31,440 --> 00:16:36,320
and then getting approvals we're just

493
00:16:32,959 --> 00:16:39,279
taking immediate action and doing it

494
00:16:36,320 --> 00:16:40,800
so how do we make an operator so we have

495
00:16:39,279 --> 00:16:42,240
this operator framework

496
00:16:40,800 --> 00:16:44,000
that has a bunch of pieces but the

497
00:16:42,240 --> 00:16:45,440
operator sdk in particular is your

498
00:16:44,000 --> 00:16:48,480
starting point

499
00:16:45,440 --> 00:16:49,839
operator ck lets you make operators in

500
00:16:48,480 --> 00:16:51,920
different ways you don't even

501
00:16:49,839 --> 00:16:53,519
actually have to know go goes what we

502
00:16:51,920 --> 00:16:54,959
typically think of for operators and

503
00:16:53,519 --> 00:16:56,880
what many operators written in but

504
00:16:54,959 --> 00:16:58,959
that's not the only way

505
00:16:56,880 --> 00:17:00,240
and it will scaffold out for you the

506
00:16:58,959 --> 00:17:01,839
skeleton

507
00:17:00,240 --> 00:17:03,600
project and from there you mostly

508
00:17:01,839 --> 00:17:06,400
implement reconcile logic

509
00:17:03,600 --> 00:17:07,679
and uh and it's pretty easy the operator

510
00:17:06,400 --> 00:17:10,079
life cycle manager

511
00:17:07,679 --> 00:17:12,319
is like a packager packager for a

512
00:17:10,079 --> 00:17:14,000
package management system even

513
00:17:12,319 --> 00:17:15,438
for operators you can think of it like

514
00:17:14,000 --> 00:17:18,559
yum or dnf

515
00:17:15,439 --> 00:17:19,919
or apt or pick your favorite package

516
00:17:18,559 --> 00:17:21,839
manager

517
00:17:19,919 --> 00:17:23,360
and then metering is a more advanced

518
00:17:21,839 --> 00:17:25,359
feature that you might find useful as

519
00:17:23,359 --> 00:17:27,520
well

520
00:17:25,359 --> 00:17:29,120
there's three primary ways you can make

521
00:17:27,520 --> 00:17:31,360
an operator

522
00:17:29,120 --> 00:17:33,360
helm is a very good way if you already

523
00:17:31,360 --> 00:17:35,199
have home charts which many people do

524
00:17:33,360 --> 00:17:37,678
and you want to start participating in

525
00:17:35,200 --> 00:17:40,480
this operator pattern where you're being

526
00:17:37,679 --> 00:17:41,360
proactive and immediately responding to

527
00:17:40,480 --> 00:17:44,320
events

528
00:17:41,360 --> 00:17:46,320
related to uh to whatever resources

529
00:17:44,320 --> 00:17:48,879
you're managing then

530
00:17:46,320 --> 00:17:50,639
you can take one or more helm charts and

531
00:17:48,880 --> 00:17:53,520
actually in one command you can convert

532
00:17:50,640 --> 00:17:54,960
a helm chart into a basic operator

533
00:17:53,520 --> 00:17:57,679
there's limits to how much you can do

534
00:17:54,960 --> 00:18:00,240
with a helm based operator because helm

535
00:17:57,679 --> 00:18:01,200
by its nature is is mostly about

536
00:18:00,240 --> 00:18:04,400
templates

537
00:18:01,200 --> 00:18:08,080
uh it's harder to code into a helm chart

538
00:18:04,400 --> 00:18:10,720
this kind of active management but

539
00:18:08,080 --> 00:18:11,918
ansible is something else you many of

540
00:18:10,720 --> 00:18:13,360
you are familiar with

541
00:18:11,919 --> 00:18:14,960
ansel is very powerful you can do just

542
00:18:13,360 --> 00:18:16,159
about anything with an ansible

543
00:18:14,960 --> 00:18:18,480
and you can make an operator with

544
00:18:16,160 --> 00:18:19,200
ansible uh i pretty sure i give a talk

545
00:18:18,480 --> 00:18:22,720
about that here

546
00:18:19,200 --> 00:18:24,480
last year uh you can make an operator

547
00:18:22,720 --> 00:18:26,240
where that reconcile logic is written in

548
00:18:24,480 --> 00:18:27,760
ansible it's a great fit for that

549
00:18:26,240 --> 00:18:29,760
so that's something you might consider

550
00:18:27,760 --> 00:18:31,280
and then go of course a very popular way

551
00:18:29,760 --> 00:18:32,400
to write controllers and write all kinds

552
00:18:31,280 --> 00:18:35,760
of tooling run

553
00:18:32,400 --> 00:18:35,760
around kubernetes

554
00:18:36,720 --> 00:18:40,640
so we've been talking about operating

555
00:18:38,160 --> 00:18:42,960
controllers we dug into the api service

556
00:18:40,640 --> 00:18:44,080
and uh what's it really boiled down to

557
00:18:42,960 --> 00:18:46,480
what does this mean

558
00:18:44,080 --> 00:18:48,080
what have we done so we have an operator

559
00:18:46,480 --> 00:18:48,960
one way to look at it one advantage we

560
00:18:48,080 --> 00:18:52,000
have here

561
00:18:48,960 --> 00:18:54,400
we've created a higher level api so

562
00:18:52,000 --> 00:18:56,640
somebody who wants to deploy wordpress

563
00:18:54,400 --> 00:18:58,320
rather than needing to go to the

564
00:18:56,640 --> 00:19:02,000
kubernetes primitives of

565
00:18:58,320 --> 00:19:03,760
making their own pods or deployments

566
00:19:02,000 --> 00:19:05,520
and having secrets and persistent volume

567
00:19:03,760 --> 00:19:06,320
claims and services and doing load

568
00:19:05,520 --> 00:19:08,080
balancing

569
00:19:06,320 --> 00:19:10,399
and all this other kind of stuff

570
00:19:08,080 --> 00:19:12,000
deploying databases deploying logging

571
00:19:10,400 --> 00:19:12,720
infrastructure whatever else might be

572
00:19:12,000 --> 00:19:14,880
involved

573
00:19:12,720 --> 00:19:16,400
not to mention having an upgrade

574
00:19:14,880 --> 00:19:17,679
strategy having some kind of tooling

575
00:19:16,400 --> 00:19:19,679
that's going to manage that upgrade

576
00:19:17,679 --> 00:19:22,160
strategy for them

577
00:19:19,679 --> 00:19:23,600
we've abstracted all of that and you

578
00:19:22,160 --> 00:19:25,280
know software just love abstractions

579
00:19:23,600 --> 00:19:27,439
we've abstracted all of that behind

580
00:19:25,280 --> 00:19:28,960
just a wordpress api where someone can

581
00:19:27,440 --> 00:19:29,840
just describe i want a wordpress that

582
00:19:28,960 --> 00:19:31,039
looks like this

583
00:19:29,840 --> 00:19:33,120
and maybe this is the version of

584
00:19:31,039 --> 00:19:34,400
wordpress i want to be running

585
00:19:33,120 --> 00:19:39,120
and then all the rest of that is taken

586
00:19:34,400 --> 00:19:41,360
care of for them um

587
00:19:39,120 --> 00:19:43,439
our workloads are starting to look more

588
00:19:41,360 --> 00:19:45,520
like managed services this is a really

589
00:19:43,440 --> 00:19:48,000
key part of this pattern

590
00:19:45,520 --> 00:19:49,840
so uh you're familiar with i'm sure

591
00:19:48,000 --> 00:19:51,679
working in various public clouds if you

592
00:19:49,840 --> 00:19:52,399
want a database if you want a queuing

593
00:19:51,679 --> 00:19:54,400
service

594
00:19:52,400 --> 00:19:55,440
on any number of other services you can

595
00:19:54,400 --> 00:19:57,919
just get

596
00:19:55,440 --> 00:19:59,919
a fully managed service and just use a

597
00:19:57,919 --> 00:20:01,919
database service provided by whoever

598
00:19:59,919 --> 00:20:04,799
your cloud provider is

599
00:20:01,919 --> 00:20:05,440
here we can approach that same kind of

600
00:20:04,799 --> 00:20:07,760
experience

601
00:20:05,440 --> 00:20:08,960
but running in your own cluster by

602
00:20:07,760 --> 00:20:12,158
having this

603
00:20:08,960 --> 00:20:14,559
operator this automated piece of

604
00:20:12,159 --> 00:20:15,600
of management running side by side in

605
00:20:14,559 --> 00:20:17,600
that cluster

606
00:20:15,600 --> 00:20:19,199
right next to your actual workload

607
00:20:17,600 --> 00:20:21,840
managing it babysitting it

608
00:20:19,200 --> 00:20:23,600
and scaling it up and down as necessary

609
00:20:21,840 --> 00:20:26,959
fixing it based on common things

610
00:20:23,600 --> 00:20:30,158
upgrading it as necessary we can start

611
00:20:26,960 --> 00:20:30,159
to approach that same experience

612
00:20:30,720 --> 00:20:34,159
infrastructure and workloads side by

613
00:20:32,559 --> 00:20:37,760
side so infrastructure is not

614
00:20:34,159 --> 00:20:39,440
just uh the load balancing it's not just

615
00:20:37,760 --> 00:20:40,799
the the primitives that we normally

616
00:20:39,440 --> 00:20:41,919
think of with running workloads on

617
00:20:40,799 --> 00:20:45,200
kubernetes

618
00:20:41,919 --> 00:20:46,400
it's storage it's the

619
00:20:45,200 --> 00:20:48,240
like the real core networking

620
00:20:46,400 --> 00:20:49,360
infrastructure in some cases it's the

621
00:20:48,240 --> 00:20:51,120
cluster itself

622
00:20:49,360 --> 00:20:52,399
the virtual machines that the cluster

623
00:20:51,120 --> 00:20:54,799
itself is running on

624
00:20:52,400 --> 00:20:56,080
managing all that side by side with one

625
00:20:54,799 --> 00:20:58,000
api

626
00:20:56,080 --> 00:21:00,240
and that means we get to use our back

627
00:20:58,000 --> 00:21:03,280
one rbac system for the whole thing

628
00:21:00,240 --> 00:21:05,120
so we can put quotas around uh

629
00:21:03,280 --> 00:21:07,280
and other controls around who's allowed

630
00:21:05,120 --> 00:21:09,439
to deploy wordpress in this cluster

631
00:21:07,280 --> 00:21:13,440
how many of them can they deploy or how

632
00:21:09,440 --> 00:21:13,440
large can their wordpress deployment get

633
00:21:13,600 --> 00:21:17,918
api discovery so kubernetes is really

634
00:21:16,320 --> 00:21:20,399
powerful for api discoveries

635
00:21:17,919 --> 00:21:21,360
much like an application um platform in

636
00:21:20,400 --> 00:21:24,320
that way

637
00:21:21,360 --> 00:21:25,840
and using the same api discovery and

638
00:21:24,320 --> 00:21:27,760
service discovery mechanisms

639
00:21:25,840 --> 00:21:29,199
across that spectrum of infrastructure

640
00:21:27,760 --> 00:21:32,320
and workloads can really be very

641
00:21:29,200 --> 00:21:33,600
powerful as we combine them

642
00:21:32,320 --> 00:21:35,360
and when we start thinking of all this

643
00:21:33,600 --> 00:21:37,520
together this is what starts to be what

644
00:21:35,360 --> 00:21:38,719
we think of as kubernetes native

645
00:21:37,520 --> 00:21:40,960
so we could take something like

646
00:21:38,720 --> 00:21:43,360
wordpress that vastly predates

647
00:21:40,960 --> 00:21:45,840
kubernetes but if we expose it in this

648
00:21:43,360 --> 00:21:47,439
way and we manage it this way

649
00:21:45,840 --> 00:21:49,520
it's not only running natively on

650
00:21:47,440 --> 00:21:51,919
kubernetes it's being managed natively

651
00:21:49,520 --> 00:21:54,400
through kubernetes through that same api

652
00:21:51,919 --> 00:21:55,039
one set of tooling so you can use cube

653
00:21:54,400 --> 00:21:56,880
ctl

654
00:21:55,039 --> 00:21:58,480
any any tool that can be acquired for

655
00:21:56,880 --> 00:22:00,080
kubernetes can manage

656
00:21:58,480 --> 00:22:02,320
uh that wordpress now that's what we

657
00:22:00,080 --> 00:22:04,000
often think of as kubernetes native

658
00:22:02,320 --> 00:22:05,760
who does this sort of stuff software

659
00:22:04,000 --> 00:22:06,320
vendors of course if you're a database

660
00:22:05,760 --> 00:22:08,000
vendor

661
00:22:06,320 --> 00:22:10,559
you gotta have an operator these days

662
00:22:08,000 --> 00:22:13,280
and you probably do

663
00:22:10,559 --> 00:22:14,639
you can imagine why uh databases are

664
00:22:13,280 --> 00:22:15,760
sticky things and there's a lot to

665
00:22:14,640 --> 00:22:17,600
managing them especially in a

666
00:22:15,760 --> 00:22:20,080
containerized environment

667
00:22:17,600 --> 00:22:21,520
cloud providers have made operators to

668
00:22:20,080 --> 00:22:24,240
expose their services

669
00:22:21,520 --> 00:22:25,440
natively inside kubernetes and then ops

670
00:22:24,240 --> 00:22:27,840
teams this is really

671
00:22:25,440 --> 00:22:31,280
probably the the heart of this for you

672
00:22:27,840 --> 00:22:33,678
is ops teams for your own customized uh

673
00:22:31,280 --> 00:22:34,320
software your own in-house proprietary

674
00:22:33,679 --> 00:22:35,919
software

675
00:22:34,320 --> 00:22:37,840
whatever it is you're responsible for

676
00:22:35,919 --> 00:22:39,760
running on your infrastructure

677
00:22:37,840 --> 00:22:40,959
many many options are building their own

678
00:22:39,760 --> 00:22:43,679
operators to

679
00:22:40,960 --> 00:22:44,159
automate that in this kubernetes kind of

680
00:22:43,679 --> 00:22:46,880
way

681
00:22:44,159 --> 00:22:48,000
super powerful if you want to see some

682
00:22:46,880 --> 00:22:51,200
examples of these

683
00:22:48,000 --> 00:22:52,080
you can go to operatorhub.io there's

684
00:22:51,200 --> 00:22:54,240
i don't know something probably

685
00:22:52,080 --> 00:22:55,678
approaching 100 now i think it's about

686
00:22:54,240 --> 00:22:57,520
80 the last time i looked

687
00:22:55,679 --> 00:22:58,880
at at least a couple months ago

688
00:22:57,520 --> 00:23:00,320
different operators from all kinds of

689
00:22:58,880 --> 00:23:01,520
vendors all kinds of providers and

690
00:23:00,320 --> 00:23:02,480
projects

691
00:23:01,520 --> 00:23:05,280
that'll show you a real good

692
00:23:02,480 --> 00:23:08,720
cross-section of real world use cases

693
00:23:05,280 --> 00:23:10,080
for these kinds of operators uh

694
00:23:08,720 --> 00:23:13,120
and then just a couple of interesting

695
00:23:10,080 --> 00:23:16,720
use cases here real quick cluster api

696
00:23:13,120 --> 00:23:18,320
fascinating project where

697
00:23:16,720 --> 00:23:20,840
people are making controllers so for

698
00:23:18,320 --> 00:23:23,520
example there's an amazon

699
00:23:20,840 --> 00:23:24,639
controller that if you want to scale up

700
00:23:23,520 --> 00:23:28,320
your cluster

701
00:23:24,640 --> 00:23:30,960
you can go change a size from like

702
00:23:28,320 --> 00:23:32,960
10 to 15 and that controller will go

703
00:23:30,960 --> 00:23:34,159
talk to the amazon api and get you five

704
00:23:32,960 --> 00:23:35,520
more virtual machines

705
00:23:34,159 --> 00:23:37,280
ensure that they've got kubernetes

706
00:23:35,520 --> 00:23:39,280
running on them add them to the cluster

707
00:23:37,280 --> 00:23:40,480
do all that work for you and you've now

708
00:23:39,280 --> 00:23:41,840
just scaled out your actual

709
00:23:40,480 --> 00:23:43,440
infrastructure

710
00:23:41,840 --> 00:23:45,199
there's the metal cube project that we

711
00:23:43,440 --> 00:23:47,840
unfortunately didn't hear from earlier

712
00:23:45,200 --> 00:23:48,880
uh that is all about doing that with

713
00:23:47,840 --> 00:23:52,158
bare metal

714
00:23:48,880 --> 00:23:55,039
so it's taking cold dark hardware and

715
00:23:52,159 --> 00:23:57,919
actually on demand provisioning images

716
00:23:55,039 --> 00:24:01,279
onto it and adding that to kubernetes

717
00:23:57,919 --> 00:24:03,200
rook seph running storage natively in uh

718
00:24:01,279 --> 00:24:04,640
in the kubernetes cluster not just any

719
00:24:03,200 --> 00:24:08,080
but even on bare metal

720
00:24:04,640 --> 00:24:09,520
managing data resiliency and redundancy

721
00:24:08,080 --> 00:24:11,600
on bare metal machines inside a

722
00:24:09,520 --> 00:24:12,480
kubernetes cluster interesting problem

723
00:24:11,600 --> 00:24:14,879
space

724
00:24:12,480 --> 00:24:17,120
some hard challenges but they're using

725
00:24:14,880 --> 00:24:19,679
extensively controllers and operators to

726
00:24:17,120 --> 00:24:22,479
to manage that and make that viable make

727
00:24:19,679 --> 00:24:25,600
that something that's reasonable to do

728
00:24:22,480 --> 00:24:28,320
cubevert really fascinating you can run

729
00:24:25,600 --> 00:24:29,840
virtual machines inside a pod in your

730
00:24:28,320 --> 00:24:31,439
kubernetes cluster so you can now

731
00:24:29,840 --> 00:24:32,000
schedule virtual machines the same way

732
00:24:31,440 --> 00:24:33,919
you're scheduling

733
00:24:32,000 --> 00:24:35,120
pods and as controllers that make that

734
00:24:33,919 --> 00:24:37,600
possible

735
00:24:35,120 --> 00:24:38,799
so that's that's all the time we have

736
00:24:37,600 --> 00:24:40,158
i'm going to step outside

737
00:24:38,799 --> 00:24:41,918
and answer any questions that you guys

738
00:24:40,159 --> 00:24:42,320
have and i'll be there as long as you

739
00:24:41,919 --> 00:24:44,159
like

740
00:24:42,320 --> 00:24:45,840
and if you can't do that right now feel

741
00:24:44,159 --> 00:24:46,640
free to contact me here email is

742
00:24:45,840 --> 00:24:48,240
probably the best

743
00:24:46,640 --> 00:24:50,240
i'll be around this weekend and happy to

744
00:24:48,240 --> 00:24:53,190
chat with you guys about operators

745
00:24:50,240 --> 00:24:56,690
thank you very much thanks michael

746
00:24:53,190 --> 00:24:56,690
[Music]

747
00:24:58,799 --> 00:25:08,240
you're a very good speaker thank you

