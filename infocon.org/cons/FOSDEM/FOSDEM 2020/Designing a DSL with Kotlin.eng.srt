1
00:00:06,080 --> 00:00:09,200
thank you for

2
00:00:07,200 --> 00:00:10,960
to be here for this talk i know it's the

3
00:00:09,200 --> 00:00:12,559
last slot so i really appreciate it i

4
00:00:10,960 --> 00:00:14,240
thought the room would be like nearly

5
00:00:12,559 --> 00:00:16,880
empty so it's great

6
00:00:14,240 --> 00:00:18,240
um i'm nicola frankel for a long time

7
00:00:16,880 --> 00:00:21,038
i've been a java

8
00:00:18,240 --> 00:00:23,119
developer working as consultants then i

9
00:00:21,039 --> 00:00:25,359
did some architecting stuff

10
00:00:23,119 --> 00:00:26,240
and i mean and at some point i decided

11
00:00:25,359 --> 00:00:29,359
that

12
00:00:26,240 --> 00:00:30,959
uh customers were too bothersome

13
00:00:29,359 --> 00:00:32,480
and it would be much better to go to

14
00:00:30,960 --> 00:00:35,440
conferences drink beer

15
00:00:32,479 --> 00:00:36,959
and talk to to two people which is what

16
00:00:35,440 --> 00:00:40,079
i'm doing right now

17
00:00:36,960 --> 00:00:42,160
um i'm now working as a developer

18
00:00:40,079 --> 00:00:43,280
advocate for hazel cost and i've been

19
00:00:42,160 --> 00:00:46,078
long

20
00:00:43,280 --> 00:00:48,800
time cocaine fan who knows about hazel

21
00:00:46,079 --> 00:00:50,960
calls by the way

22
00:00:48,800 --> 00:00:52,718
yeah that we assume that so if you are

23
00:00:50,960 --> 00:00:54,160
interested if you are in the java

24
00:00:52,719 --> 00:00:56,239
ecosystem basically

25
00:00:54,160 --> 00:00:57,919
hazel cost is like a distributed data

26
00:00:56,239 --> 00:00:58,718
structures to make it very simple and

27
00:00:57,920 --> 00:01:00,640
then we have

28
00:00:58,719 --> 00:01:02,160
another product called jet which builds

29
00:01:00,640 --> 00:01:05,519
up on it and

30
00:01:02,160 --> 00:01:05,840
which does stream processing using hazel

31
00:01:05,519 --> 00:01:08,240
cast

32
00:01:05,840 --> 00:01:10,159
mdg so in memory which it needs to be

33
00:01:08,240 --> 00:01:13,919
very very fast

34
00:01:10,159 --> 00:01:15,119
okay now probably uh you might have

35
00:01:13,920 --> 00:01:17,840
heard already about

36
00:01:15,119 --> 00:01:18,799
domain specific languages like a couple

37
00:01:17,840 --> 00:01:21,280
of years ago

38
00:01:18,799 --> 00:01:22,000
they were very very hot i even think

39
00:01:21,280 --> 00:01:23,759
there is a

40
00:01:22,000 --> 00:01:25,040
like an aurelia book or a manning book

41
00:01:23,759 --> 00:01:28,960
about them

42
00:01:25,040 --> 00:01:32,479
and basically a domain specific language

43
00:01:28,960 --> 00:01:35,679
narrows the scope and the features of

44
00:01:32,479 --> 00:01:39,360
a general prosperous language in order

45
00:01:35,680 --> 00:01:42,880
to guide you to make a development on

46
00:01:39,360 --> 00:01:46,240
this narrow scope much easier

47
00:01:42,880 --> 00:01:48,880
and for example we can think as xml

48
00:01:46,240 --> 00:01:50,399
as a general purpose language even

49
00:01:48,880 --> 00:01:51,360
though yeah i know it's not really a

50
00:01:50,399 --> 00:01:54,720
language

51
00:01:51,360 --> 00:01:55,680
and then you can create those narrow

52
00:01:54,720 --> 00:02:00,158
scopes

53
00:01:55,680 --> 00:02:03,600
languages such as svg on top of xml

54
00:02:00,159 --> 00:02:06,960
or if you are using java

55
00:02:03,600 --> 00:02:09,280
you can have those dsls which are used

56
00:02:06,960 --> 00:02:12,480
for assertions i don't know why but

57
00:02:09,280 --> 00:02:13,840
assertions seems to be very popular for

58
00:02:12,480 --> 00:02:15,519
dsls so

59
00:02:13,840 --> 00:02:17,440
a couple of years ago there was ham

60
00:02:15,520 --> 00:02:21,200
crests first asserts

61
00:02:17,440 --> 00:02:25,359
now i think the most popular is asserted

62
00:02:21,200 --> 00:02:25,920
and in kotlin at some point there was

63
00:02:25,360 --> 00:02:29,360
this

64
00:02:25,920 --> 00:02:32,160
uh way to create androids uis

65
00:02:29,360 --> 00:02:33,920
and they add a dsl called uncle so you

66
00:02:32,160 --> 00:02:37,519
didn't need to write your ui

67
00:02:33,920 --> 00:02:39,119
in xml you just like really coded it so

68
00:02:37,519 --> 00:02:39,760
you didn't need to inflate it it was

69
00:02:39,120 --> 00:02:41,200
pretty good

70
00:02:39,760 --> 00:02:43,120
i think that they stopped the

71
00:02:41,200 --> 00:02:44,879
developments i don't know why because

72
00:02:43,120 --> 00:02:47,120
i'm not an android developer

73
00:02:44,879 --> 00:02:50,640
um and then i created something called

74
00:02:47,120 --> 00:02:53,760
calling that i will show you in the end

75
00:02:50,640 --> 00:02:55,359
and in java you are pretty limited to

76
00:02:53,760 --> 00:02:57,920
create such dsl

77
00:02:55,360 --> 00:02:58,640
and in general what you are doing to

78
00:02:57,920 --> 00:03:01,359
create the

79
00:02:58,640 --> 00:03:02,958
dsl is just like you sequence your

80
00:03:01,360 --> 00:03:07,120
method in order

81
00:03:02,959 --> 00:03:09,120
okay um the most popular method is

82
00:03:07,120 --> 00:03:11,840
actually method chaining so basically

83
00:03:09,120 --> 00:03:13,440
what you you are returning the current

84
00:03:11,840 --> 00:03:14,400
object at the end of each method and

85
00:03:13,440 --> 00:03:17,040
then you can

86
00:03:14,400 --> 00:03:18,959
like change the method together you can

87
00:03:17,040 --> 00:03:19,519
also have nested method calls and lambda

88
00:03:18,959 --> 00:03:21,840
but

89
00:03:19,519 --> 00:03:23,120
in the end the best you can achieve is

90
00:03:21,840 --> 00:03:26,560
something like that

91
00:03:23,120 --> 00:03:30,640
so this is osergy codes and yes

92
00:03:26,560 --> 00:03:33,440
it reads like correct english um

93
00:03:30,640 --> 00:03:34,238
and you cannot do much better so that

94
00:03:33,440 --> 00:03:37,519
that's

95
00:03:34,239 --> 00:03:38,799
that's what at most you can do um i have

96
00:03:37,519 --> 00:03:43,120
an example

97
00:03:38,799 --> 00:03:47,840
in another projects um

98
00:03:43,120 --> 00:03:47,840
here oops

99
00:03:49,920 --> 00:03:56,480
this one so here is

100
00:03:53,200 --> 00:03:59,439
like a dsl which uses the flow and api

101
00:03:56,480 --> 00:04:01,040
and you need for more thing but then you

102
00:03:59,439 --> 00:04:02,879
when you are formatting it writes pretty

103
00:04:01,040 --> 00:04:04,400
well it looks like the yaml if you are

104
00:04:02,879 --> 00:04:07,518
if you know about kubernetes

105
00:04:04,400 --> 00:04:10,480
it looks pretty much like yaml um but

106
00:04:07,519 --> 00:04:15,840
you you can you cannot do much better

107
00:04:10,480 --> 00:04:15,840
with java

108
00:04:18,320 --> 00:04:23,759
so i want to create a dsl and i want it

109
00:04:21,759 --> 00:04:26,880
to look like declarative

110
00:04:23,759 --> 00:04:30,800
and still to be code

111
00:04:26,880 --> 00:04:30,800
and let's use kotlin to do that

112
00:04:31,440 --> 00:04:34,400
so let's start

113
00:04:39,680 --> 00:04:43,840
so i will start with this very simple

114
00:04:42,880 --> 00:04:47,280
sample

115
00:04:43,840 --> 00:04:50,479
which is voting codes

116
00:04:47,280 --> 00:04:52,239
and vardin is a web framework who knows

117
00:04:50,479 --> 00:04:54,080
about fading by the way

118
00:04:52,240 --> 00:04:56,320
a couple of people so i assume half the

119
00:04:54,080 --> 00:04:59,520
room is our android developers

120
00:04:56,320 --> 00:05:01,840
right in general

121
00:04:59,520 --> 00:05:03,520
like the java server side people know

122
00:05:01,840 --> 00:05:06,400
about vardin because it's the way

123
00:05:03,520 --> 00:05:09,198
that you can create like web apps

124
00:05:06,400 --> 00:05:10,719
without coding a single line of html

125
00:05:09,199 --> 00:05:12,560
so if you already are front-end

126
00:05:10,720 --> 00:05:13,440
developer or an android developer you

127
00:05:12,560 --> 00:05:17,520
don't care

128
00:05:13,440 --> 00:05:19,039
that much now

129
00:05:17,520 --> 00:05:20,960
even if you don't know vardin you

130
00:05:19,039 --> 00:05:23,840
understand i think pretty well

131
00:05:20,960 --> 00:05:25,520
what this does so you set the theme you

132
00:05:23,840 --> 00:05:27,919
create a vertical layout

133
00:05:25,520 --> 00:05:29,039
you set the content of the ui to the

134
00:05:27,919 --> 00:05:30,639
vertical layout

135
00:05:29,039 --> 00:05:32,560
then you add the margin then you add

136
00:05:30,639 --> 00:05:35,280
components and yeah

137
00:05:32,560 --> 00:05:36,840
then you've got your stuff this is

138
00:05:35,280 --> 00:05:40,719
pretty cool to write

139
00:05:36,840 --> 00:05:42,638
however i i think there is this big

140
00:05:40,720 --> 00:05:47,360
issue that basically

141
00:05:42,639 --> 00:05:51,039
you can just change the

142
00:05:47,360 --> 00:05:53,120
the order and

143
00:05:51,039 --> 00:05:54,639
nothing will happen i mean you will

144
00:05:53,120 --> 00:05:56,080
still have the same the only thing that

145
00:05:54,639 --> 00:05:58,160
is really relevant

146
00:05:56,080 --> 00:05:59,359
are those two components you can even

147
00:05:58,160 --> 00:06:03,039
set the margin at

148
00:05:59,360 --> 00:06:05,120
the end or set the content at the end

149
00:06:03,039 --> 00:06:06,240
and so if you have like team of

150
00:06:05,120 --> 00:06:09,600
developers

151
00:06:06,240 --> 00:06:12,400
um they will write each in their own way

152
00:06:09,600 --> 00:06:14,319
and unless you've got very very strict

153
00:06:12,400 --> 00:06:16,560
guidelines that for example you should

154
00:06:14,319 --> 00:06:17,199
always set the content at the end or set

155
00:06:16,560 --> 00:06:20,560
the margin

156
00:06:17,199 --> 00:06:23,759
at the end or whatever um then

157
00:06:20,560 --> 00:06:26,400
it might be hard for um to to get into

158
00:06:23,759 --> 00:06:28,960
some new code

159
00:06:26,400 --> 00:06:31,198
so how can kotlin can help us so first

160
00:06:28,960 --> 00:06:34,400
what we will do is we will create

161
00:06:31,199 --> 00:06:37,520
a new ui called lean

162
00:06:34,400 --> 00:06:41,198
ui and

163
00:06:37,520 --> 00:06:43,359
we will create this kotlin ui

164
00:06:41,199 --> 00:06:46,080
so i want to create the same but using a

165
00:06:43,360 --> 00:06:47,039
dsl but first i will be very very step

166
00:06:46,080 --> 00:06:49,120
by step

167
00:06:47,039 --> 00:06:50,800
so the first thing that we can do is

168
00:06:49,120 --> 00:06:54,160
here we have this set

169
00:06:50,800 --> 00:06:55,120
theme and let's use some property access

170
00:06:54,160 --> 00:06:58,319
syntax so

171
00:06:55,120 --> 00:07:00,319
that's one very nice way to do that

172
00:06:58,319 --> 00:07:03,039
so if you have a setter then you can

173
00:07:00,319 --> 00:07:06,400
just use this property access syntax

174
00:07:03,039 --> 00:07:09,440
it gets the things a bit better

175
00:07:06,400 --> 00:07:11,758
now if we would be in java here

176
00:07:09,440 --> 00:07:14,000
in order to start we would do something

177
00:07:11,759 --> 00:07:17,039
like that so we would create

178
00:07:14,000 --> 00:07:19,199
like this like static methods

179
00:07:17,039 --> 00:07:21,759
and we we are in java so it's supposed

180
00:07:19,199 --> 00:07:25,440
to be object oriented but basically

181
00:07:21,759 --> 00:07:27,680
we also have always have these ui's

182
00:07:25,440 --> 00:07:28,800
classes that are not object oriented at

183
00:07:27,680 --> 00:07:31,919
all and

184
00:07:28,800 --> 00:07:35,280
then they create the layouts so

185
00:07:31,919 --> 00:07:38,400
if i copy paste or cut paste this

186
00:07:35,280 --> 00:07:38,400
into your kotlin

187
00:07:38,880 --> 00:07:42,639
thanks to intellij i already have this

188
00:07:41,759 --> 00:07:45,840
working for me

189
00:07:42,639 --> 00:07:49,440
so i can copy java code copy

190
00:07:45,840 --> 00:07:51,440
and and paste it into some kotlin

191
00:07:49,440 --> 00:07:53,039
and then i've got already kotlin i can

192
00:07:51,440 --> 00:07:55,759
remove this object

193
00:07:53,039 --> 00:07:57,199
because with kotlin i can have like top

194
00:07:55,759 --> 00:08:00,240
level function

195
00:07:57,199 --> 00:08:03,520
and it gets much much better already

196
00:08:00,240 --> 00:08:06,960
so basically now i can say hey vertical

197
00:08:03,520 --> 00:08:07,758
layout this and i get my vertical

198
00:08:06,960 --> 00:08:10,159
layouts

199
00:08:07,759 --> 00:08:11,440
and then i can affect this to a vertical

200
00:08:10,160 --> 00:08:15,360
layout

201
00:08:11,440 --> 00:08:19,120
and i can like add some

202
00:08:15,360 --> 00:08:26,319
layouts dots add components or

203
00:08:19,120 --> 00:08:29,360
label blah blah blah label

204
00:08:26,319 --> 00:08:31,759
okay but still i will have the the the

205
00:08:29,360 --> 00:08:33,360
same problem as before but again as i

206
00:08:31,759 --> 00:08:37,360
mentioned we will do it

207
00:08:33,360 --> 00:08:41,839
like it's text fields we will do it

208
00:08:37,360 --> 00:08:41,839
bit by bit text fields

209
00:08:42,958 --> 00:08:47,680
i will call it hello world

210
00:08:47,760 --> 00:08:51,519
so i have the same problem as before i

211
00:08:49,760 --> 00:08:55,839
have this other

212
00:08:51,519 --> 00:08:55,839
problem okay

213
00:08:56,399 --> 00:09:03,839
now what would be great is

214
00:08:59,519 --> 00:09:06,839
actually i have this vertical layout

215
00:09:03,839 --> 00:09:09,040
i can use those extension function in

216
00:09:06,839 --> 00:09:12,240
kotlin so instead of

217
00:09:09,040 --> 00:09:15,760
having like this function that

218
00:09:12,240 --> 00:09:20,080
uses this parameter i can say instead

219
00:09:15,760 --> 00:09:25,120
that vertical layout is called on ui

220
00:09:20,080 --> 00:09:25,120
and then of course i can remove that

221
00:09:25,279 --> 00:09:27,920
and here

222
00:09:28,959 --> 00:09:34,079
i can have that so it's a bit better

223
00:09:31,600 --> 00:09:36,880
already

224
00:09:34,080 --> 00:09:37,680
now on vertical layouts basically in

225
00:09:36,880 --> 00:09:41,760
every layout

226
00:09:37,680 --> 00:09:45,680
i can have like margin and paddings

227
00:09:41,760 --> 00:09:49,120
so if i was in java i would create

228
00:09:45,680 --> 00:09:49,120
like an additional method

229
00:09:49,519 --> 00:09:53,760
and here more gene

230
00:09:54,560 --> 00:10:03,040
boolean and here

231
00:09:58,480 --> 00:10:03,870
more gin and here i would create

232
00:10:03,040 --> 00:10:06,929
the padding one

233
00:10:03,870 --> 00:10:06,929
[Music]

234
00:10:07,360 --> 00:10:10,320
padding

235
00:10:11,760 --> 00:10:14,399
boolean

236
00:10:14,800 --> 00:10:19,680
and here say vertical layout

237
00:10:20,399 --> 00:10:28,959
set it's called spacing sorry

238
00:10:24,440 --> 00:10:32,959
spacing is spacing

239
00:10:28,959 --> 00:10:36,719
and i can use this

240
00:10:32,959 --> 00:10:40,560
here okay

241
00:10:36,720 --> 00:10:43,440
and now comes the problem i can have

242
00:10:40,560 --> 00:10:45,680
now i want to to set the default value

243
00:10:43,440 --> 00:10:48,320
so here i would say

244
00:10:45,680 --> 00:10:49,519
it returns something so return vertical

245
00:10:48,320 --> 00:10:51,920
layout

246
00:10:49,519 --> 00:10:52,800
and i will say more gene let's say the

247
00:10:51,920 --> 00:10:57,519
default will be

248
00:10:52,800 --> 00:11:00,719
true and here i would say that

249
00:10:57,519 --> 00:11:04,320
it returned a vertical layout

250
00:11:00,720 --> 00:11:08,240
and the default will be true true

251
00:11:04,320 --> 00:11:15,040
something like that now issue with that

252
00:11:08,240 --> 00:11:19,360
is i need to choose

253
00:11:15,040 --> 00:11:20,319
but the default uh for spacing or margin

254
00:11:19,360 --> 00:11:23,120
i can have

255
00:11:20,320 --> 00:11:24,000
i cannot have both because actually

256
00:11:23,120 --> 00:11:26,880
those

257
00:11:24,000 --> 00:11:28,560
are boolean parameters so they send us

258
00:11:26,880 --> 00:11:31,120
they say share the same

259
00:11:28,560 --> 00:11:32,560
signature there are conflicts and it

260
00:11:31,120 --> 00:11:35,440
doesn't work anymore

261
00:11:32,560 --> 00:11:36,000
so as the previous speaker uh told we

262
00:11:35,440 --> 00:11:38,240
can

263
00:11:36,000 --> 00:11:39,680
wrap them inside an inline class then it

264
00:11:38,240 --> 00:11:45,200
creates a new type

265
00:11:39,680 --> 00:11:48,560
uh but it's a lot for not much

266
00:11:45,200 --> 00:11:53,040
so what can we do well the first thing

267
00:11:48,560 --> 00:11:53,040
is we can provide

268
00:11:54,839 --> 00:11:57,839
defaults

269
00:12:03,360 --> 00:12:06,800
and now we can remove everything and we

270
00:12:05,279 --> 00:12:10,880
have a single signature

271
00:12:06,800 --> 00:12:15,920
here vertical layouts

272
00:12:10,880 --> 00:12:15,920
we can say this it will work

273
00:12:16,720 --> 00:12:20,639
it will be a bit smaller everybody still

274
00:12:19,040 --> 00:12:24,639
sees even at the back

275
00:12:20,639 --> 00:12:27,440
fine i'll create layout 2

276
00:12:24,639 --> 00:12:29,600
and here i can pass nothing so

277
00:12:27,440 --> 00:12:31,440
everything will be true

278
00:12:29,600 --> 00:12:33,200
now i still have an issue because if my

279
00:12:31,440 --> 00:12:36,240
spacing

280
00:12:33,200 --> 00:12:39,839
is true and my margin is false sorry

281
00:12:36,240 --> 00:12:39,839
it's the opposite that i wanted to do

282
00:12:40,399 --> 00:12:44,320
i still need to pass it as true even

283
00:12:42,800 --> 00:12:47,839
though it's the default

284
00:12:44,320 --> 00:12:50,839
which i don't like because it's too much

285
00:12:47,839 --> 00:12:53,760
so no worries because we've named

286
00:12:50,839 --> 00:12:57,040
parameters

287
00:12:53,760 --> 00:12:57,040
i can have exactly that

288
00:12:58,160 --> 00:13:02,079
so right now the only thing that we

289
00:13:01,440 --> 00:13:06,399
still have

290
00:13:02,079 --> 00:13:09,279
as an issue is this like components

291
00:13:06,399 --> 00:13:10,160
uh ordering stuff actually it's a real

292
00:13:09,279 --> 00:13:13,360
issue

293
00:13:10,160 --> 00:13:15,360
um we didn't solve the the initial

294
00:13:13,360 --> 00:13:16,800
problem so we created everything that

295
00:13:15,360 --> 00:13:20,240
worked but we still had this

296
00:13:16,800 --> 00:13:23,839
this problem now comes something

297
00:13:20,240 --> 00:13:26,160
very very great we can

298
00:13:23,839 --> 00:13:26,160
add

299
00:13:27,120 --> 00:13:34,000
a lambda here we can add

300
00:13:30,160 --> 00:13:36,399
a lambda that will be called a receiver

301
00:13:34,000 --> 00:13:36,399
lambda

302
00:13:37,279 --> 00:13:40,320
it takes nothing it returns nothing it's

303
00:13:39,680 --> 00:13:43,279
called

304
00:13:40,320 --> 00:13:43,279
let's say init

305
00:13:44,320 --> 00:13:52,320
and with this lambda we can

306
00:13:47,519 --> 00:13:52,320
apply it sorry

307
00:13:53,839 --> 00:13:57,600
we can apply it so basically apply means

308
00:13:57,199 --> 00:14:01,279
that

309
00:13:57,600 --> 00:14:04,480
we will execute this lambda

310
00:14:01,279 --> 00:14:04,480
on this object

311
00:14:04,560 --> 00:14:06,959
and now

312
00:14:07,760 --> 00:14:11,120
we can get a bit better

313
00:14:12,079 --> 00:14:17,839
by doing this

314
00:14:18,000 --> 00:14:26,320
still not perfect but it's a bit better

315
00:14:22,320 --> 00:14:27,279
and we can also hear we can actually

316
00:14:26,320 --> 00:14:30,160
like

317
00:14:27,279 --> 00:14:32,560
scope what we don't want to see saying a

318
00:14:30,160 --> 00:14:35,519
apply

319
00:14:32,560 --> 00:14:38,160
and we can apply here the stuff that we

320
00:14:35,519 --> 00:14:38,160
did before

321
00:14:40,240 --> 00:14:48,399
and now it's this

322
00:14:44,880 --> 00:14:48,399
i will put this everywhere

323
00:14:48,720 --> 00:14:52,000
and i can chain it

324
00:14:53,040 --> 00:14:59,680
and i don't even need this

325
00:14:57,040 --> 00:15:00,319
variable so as as a user you don't care

326
00:14:59,680 --> 00:15:03,279
that much

327
00:15:00,320 --> 00:15:06,000
but as the code maintainer you it's

328
00:15:03,279 --> 00:15:06,000
interesting

329
00:15:06,160 --> 00:15:12,959
and given that actually

330
00:15:10,560 --> 00:15:14,079
it's pretty easy to understand then we

331
00:15:12,959 --> 00:15:16,560
can use

332
00:15:14,079 --> 00:15:17,120
like a simple body like an expression

333
00:15:16,560 --> 00:15:19,839
body

334
00:15:17,120 --> 00:15:21,519
and it doesn't tell me how i can do it

335
00:15:19,839 --> 00:15:24,560
so i will do it

336
00:15:21,519 --> 00:15:27,839
automatically and remove the return type

337
00:15:24,560 --> 00:15:30,079
because now even if you understand

338
00:15:27,839 --> 00:15:31,600
here you return a vertical layout the

339
00:15:30,079 --> 00:15:34,319
compiler understands it and you don't

340
00:15:31,600 --> 00:15:34,320
need it anymore

341
00:15:35,680 --> 00:15:41,839
there are two applies and now as a

342
00:15:38,959 --> 00:15:42,239
like library designer you need to to

343
00:15:41,839 --> 00:15:45,040
think

344
00:15:42,240 --> 00:15:46,000
what's more important um what do you

345
00:15:45,040 --> 00:15:50,399
want to override

346
00:15:46,000 --> 00:15:55,519
for example do you want first to apply

347
00:15:50,399 --> 00:15:57,519
the custom stuff

348
00:15:55,519 --> 00:15:58,880
and then whatever happens you will set

349
00:15:57,519 --> 00:16:01,440
the margin to the one that

350
00:15:58,880 --> 00:16:02,079
that was given or and the spacing to the

351
00:16:01,440 --> 00:16:04,720
one that

352
00:16:02,079 --> 00:16:05,680
that was given or do you want to let the

353
00:16:04,720 --> 00:16:07,680
user

354
00:16:05,680 --> 00:16:08,959
like full power and then it can

355
00:16:07,680 --> 00:16:10,719
overwrite saying hey

356
00:16:08,959 --> 00:16:12,239
you can set the content to something

357
00:16:10,720 --> 00:16:14,000
else so as a

358
00:16:12,240 --> 00:16:16,959
as a library designer that's something

359
00:16:14,000 --> 00:16:16,959
you need to to do

360
00:16:17,040 --> 00:16:21,279
now here i don't need this variable

361
00:16:19,040 --> 00:16:22,079
anymore and i can create my vertical

362
00:16:21,279 --> 00:16:26,000
layout

363
00:16:22,079 --> 00:16:29,680
like this and the problem with that

364
00:16:26,000 --> 00:16:33,440
is you always need to pass a lambda you

365
00:16:29,680 --> 00:16:36,880
cannot just say vertical layouts

366
00:16:33,440 --> 00:16:38,959
like this but that's fine just as we

367
00:16:36,880 --> 00:16:41,519
default parameters that are boolean we

368
00:16:38,959 --> 00:16:45,839
can pass the default parameter that is

369
00:16:41,519 --> 00:16:45,839
like the empty lambda and then it works

370
00:16:48,839 --> 00:16:52,720
again

371
00:16:50,480 --> 00:16:53,600
i don't know if you what's your level in

372
00:16:52,720 --> 00:16:56,959
kotlin but

373
00:16:53,600 --> 00:17:01,839
this is made possible by the fact that

374
00:16:56,959 --> 00:17:01,839
normally this would be what

375
00:17:03,040 --> 00:17:10,240
should be expected but if a lambda

376
00:17:06,959 --> 00:17:11,360
is the last parameter in your method

377
00:17:10,240 --> 00:17:14,559
parameters

378
00:17:11,359 --> 00:17:18,000
then you can extract it outside

379
00:17:14,559 --> 00:17:21,599
it's just syntactic sugar but actually

380
00:17:18,000 --> 00:17:21,599
it gets pretty good

381
00:17:25,439 --> 00:17:31,360
the fact that you can remove it and and

382
00:17:28,559 --> 00:17:32,399
i i i don't know if so the question is

383
00:17:31,360 --> 00:17:35,520
whether uh

384
00:17:32,400 --> 00:17:37,200
this syntactic sugar has a name and the

385
00:17:35,520 --> 00:17:40,080
answer is i don't know so perhaps

386
00:17:37,200 --> 00:17:46,559
somebody in the audience knows the name

387
00:17:40,080 --> 00:17:48,480
i call it like lambda syntactic sugar

388
00:17:46,559 --> 00:17:50,480
i know that this has a name it's called

389
00:17:48,480 --> 00:17:52,880
lambda with parameter

390
00:17:50,480 --> 00:18:00,559
that's that i know but this one um

391
00:17:52,880 --> 00:18:03,120
that's a good question i will check

392
00:18:00,559 --> 00:18:03,120
sorry again

393
00:18:03,600 --> 00:18:07,840
yeah it's just syntactic sugar it's just

394
00:18:05,679 --> 00:18:09,679
like hey if lambda is the last parameter

395
00:18:07,840 --> 00:18:11,918
you just extract it and everything is

396
00:18:09,679 --> 00:18:11,919
fine

397
00:18:12,840 --> 00:18:17,439
okay and

398
00:18:15,200 --> 00:18:18,480
i mean now you know everything because

399
00:18:17,440 --> 00:18:21,520
the next step

400
00:18:18,480 --> 00:18:24,559
is to actually do the same

401
00:18:21,520 --> 00:18:29,840
with like the level

402
00:18:24,559 --> 00:18:31,678
so i can create a level

403
00:18:29,840 --> 00:18:32,879
and it's exactly the same stuff that i

404
00:18:31,679 --> 00:18:36,080
used so here

405
00:18:32,880 --> 00:18:38,400
i'm using the label and i have

406
00:18:36,080 --> 00:18:39,760
like a lambda with parameter that has by

407
00:18:38,400 --> 00:18:43,280
default nothing

408
00:18:39,760 --> 00:18:45,760
then it creates a new label with this

409
00:18:43,280 --> 00:18:47,120
and now i can replace this like add

410
00:18:45,760 --> 00:18:51,280
component label with

411
00:18:47,120 --> 00:18:51,280
label hello

412
00:18:54,720 --> 00:18:58,880
and guess what i can do the same thing

413
00:18:57,440 --> 00:19:01,360
with text field oops

414
00:18:58,880 --> 00:19:01,360
not here

415
00:19:03,360 --> 00:19:08,879
no text field field nope so i will copy

416
00:19:06,799 --> 00:19:11,200
paste it

417
00:19:08,880 --> 00:19:12,160
because i don't remember the shortcut

418
00:19:11,200 --> 00:19:15,200
and

419
00:19:12,160 --> 00:19:19,200
so i will say text fields

420
00:19:15,200 --> 00:19:22,960
now should be caption and here is this

421
00:19:19,200 --> 00:19:26,720
at text fields

422
00:19:22,960 --> 00:19:26,720
and it's a text fields

423
00:19:26,880 --> 00:19:31,280
yeah once you understood the trick it's

424
00:19:28,880 --> 00:19:35,679
it's a lot of copy paste i agree

425
00:19:31,280 --> 00:19:39,840
um here and guess what

426
00:19:35,679 --> 00:19:42,640
now you can replace it with text fields

427
00:19:39,840 --> 00:19:42,639
with worlds

428
00:19:43,200 --> 00:19:47,440
and now you can do some stuff here and

429
00:19:45,760 --> 00:19:50,879
here you can do some stuff

430
00:19:47,440 --> 00:19:53,039
also here and the good thing is

431
00:19:50,880 --> 00:19:53,919
now they become nested and now you

432
00:19:53,039 --> 00:19:56,160
understand

433
00:19:53,919 --> 00:19:58,640
what happens and actually if you are not

434
00:19:56,160 --> 00:20:00,640
interested in something

435
00:19:58,640 --> 00:20:02,559
given your ide you can hide it so

436
00:20:00,640 --> 00:20:03,200
basically it's a master detail stuff you

437
00:20:02,559 --> 00:20:05,918
can

438
00:20:03,200 --> 00:20:06,720
enter at any point and and see

439
00:20:05,919 --> 00:20:09,919
everything

440
00:20:06,720 --> 00:20:12,240
and then go into the detail um

441
00:20:09,919 --> 00:20:13,120
but it doesn't stop there like imagine

442
00:20:12,240 --> 00:20:15,520
that

443
00:20:13,120 --> 00:20:17,678
um you have a lot of people who will

444
00:20:15,520 --> 00:20:21,679
create html

445
00:20:17,679 --> 00:20:24,880
labels so here as i

446
00:20:21,679 --> 00:20:28,000
as i did before um my sample ui here

447
00:20:24,880 --> 00:20:29,679
was saying hey hello in strong and i

448
00:20:28,000 --> 00:20:34,000
need to set it

449
00:20:29,679 --> 00:20:37,120
as like um it was

450
00:20:34,000 --> 00:20:42,480
content type so i need to set this

451
00:20:37,120 --> 00:20:42,479
dot contents mode sorry html

452
00:20:42,559 --> 00:20:45,840
no you don't want it

453
00:20:46,559 --> 00:20:52,559
what does it tell me

454
00:20:49,840 --> 00:20:54,720
okay so perhaps it was not the right one

455
00:20:52,559 --> 00:20:55,120
contains more html now it's the right

456
00:20:54,720 --> 00:20:58,320
one

457
00:20:55,120 --> 00:20:59,039
now i can remove this no it doesn't want

458
00:20:58,320 --> 00:21:02,639
to import

459
00:20:59,039 --> 00:21:04,879
please do it no okay don't do it

460
00:21:02,640 --> 00:21:07,200
so imagine that every time i i need to

461
00:21:04,880 --> 00:21:09,440
create that that wouldn't be that great

462
00:21:07,200 --> 00:21:12,000
so what i can do is i can create a

463
00:21:09,440 --> 00:21:15,039
dedicated one

464
00:21:12,000 --> 00:21:15,039
that will use

465
00:21:15,360 --> 00:21:20,158
the label function that i created above

466
00:21:18,159 --> 00:21:22,159
and that does it automatically so

467
00:21:20,159 --> 00:21:23,679
if you have a lot of people that use

468
00:21:22,159 --> 00:21:26,320
this then just

469
00:21:23,679 --> 00:21:28,840
like make them their life easier and

470
00:21:26,320 --> 00:21:31,840
just create an html

471
00:21:28,840 --> 00:21:31,840
function

472
00:21:32,159 --> 00:21:40,400
and once you you understand that life

473
00:21:35,280 --> 00:21:45,840
is easy um because you you can do it

474
00:21:40,400 --> 00:21:45,840
for the whole framework

475
00:21:47,360 --> 00:21:59,840
and if i run that

476
00:22:00,720 --> 00:22:06,000
and here

477
00:22:04,000 --> 00:22:07,360
you can see that i've created a sampler

478
00:22:06,000 --> 00:22:10,400
with every possible

479
00:22:07,360 --> 00:22:15,199
option of every possible widget and

480
00:22:10,400 --> 00:22:18,559
that's pretty stupid everybody can do it

481
00:22:15,200 --> 00:22:19,440
it's just a lot of time but basically

482
00:22:18,559 --> 00:22:22,559
it's just like

483
00:22:19,440 --> 00:22:22,559
copy paste every time

484
00:22:22,720 --> 00:22:27,919
everything is here and for example for

485
00:22:26,640 --> 00:22:29,760
hazel costs

486
00:22:27,919 --> 00:22:31,120
um i i didn't know what to do in the

487
00:22:29,760 --> 00:22:34,240
plane so

488
00:22:31,120 --> 00:22:37,760
um actually our

489
00:22:34,240 --> 00:22:41,600
our configuration is in yaml or or xml

490
00:22:37,760 --> 00:22:44,240
or json well let's create

491
00:22:41,600 --> 00:22:45,520
a dsl because it's easier it's less

492
00:22:44,240 --> 00:22:47,919
error prone

493
00:22:45,520 --> 00:22:49,840
so here i didn't do everything but you

494
00:22:47,919 --> 00:22:52,240
can see that if you know hazel cost

495
00:22:49,840 --> 00:22:52,959
it looks really nice and it's compile

496
00:22:52,240 --> 00:22:55,360
time

497
00:22:52,960 --> 00:22:58,960
so basically you can check everything

498
00:22:55,360 --> 00:22:58,959
and it works pretty well

499
00:23:02,640 --> 00:23:06,559
and if you are using spring you might

500
00:23:05,840 --> 00:23:08,639
know that

501
00:23:06,559 --> 00:23:10,960
they are also using this stuff when they

502
00:23:08,640 --> 00:23:14,400
create their

503
00:23:10,960 --> 00:23:17,440
spring b and dsl and actually

504
00:23:14,400 --> 00:23:19,679
um this is what it looks like

505
00:23:17,440 --> 00:23:22,159
and again even if you don't know spring

506
00:23:19,679 --> 00:23:24,720
you can understand what this does

507
00:23:22,159 --> 00:23:25,280
and here for example that's what i like

508
00:23:24,720 --> 00:23:27,520
a lot

509
00:23:25,280 --> 00:23:28,720
that you create a bean of type person

510
00:23:27,520 --> 00:23:32,158
repository

511
00:23:28,720 --> 00:23:35,280
without passing the class again

512
00:23:32,159 --> 00:23:38,400
thanks to uh the like

513
00:23:35,280 --> 00:23:41,120
inline stuff which makes it

514
00:23:38,400 --> 00:23:42,880
possible to re-fi the classes though

515
00:23:41,120 --> 00:23:45,600
it's not verification it's just like

516
00:23:42,880 --> 00:23:47,360
since it's like copy pasting but still

517
00:23:45,600 --> 00:23:49,279
it knows about the type and then it

518
00:23:47,360 --> 00:23:52,559
knows that it must create a bin of type

519
00:23:49,279 --> 00:23:52,559
of person repository

520
00:23:54,159 --> 00:24:00,000
now the question is a we had groovy

521
00:23:57,760 --> 00:24:01,440
before we could create nice dsls why

522
00:24:00,000 --> 00:24:03,360
don't you use groovy

523
00:24:01,440 --> 00:24:05,440
well if you are a groovy user i guess

524
00:24:03,360 --> 00:24:06,240
that it's perfectly fine to use groovy

525
00:24:05,440 --> 00:24:10,000
however

526
00:24:06,240 --> 00:24:12,320
i like my types i like them

527
00:24:10,000 --> 00:24:14,000
i know a lot of groovy people they

528
00:24:12,320 --> 00:24:17,039
prefer to say oh but you can do

529
00:24:14,000 --> 00:24:18,159
everything and when you need types you

530
00:24:17,039 --> 00:24:20,080
just put them

531
00:24:18,159 --> 00:24:21,360
well i would reverse that stuff and say

532
00:24:20,080 --> 00:24:24,158
hey you know what

533
00:24:21,360 --> 00:24:24,959
i prefer to type everything and if i

534
00:24:24,159 --> 00:24:27,760
really

535
00:24:24,960 --> 00:24:28,159
i cannot do that then i can also cast to

536
00:24:27,760 --> 00:24:30,799
any

537
00:24:28,159 --> 00:24:32,320
if i cannot then perhaps there are

538
00:24:30,799 --> 00:24:33,918
scalar developers here

539
00:24:32,320 --> 00:24:36,080
because color is very powerful you can

540
00:24:33,919 --> 00:24:40,480
do everything yes you can do

541
00:24:36,080 --> 00:24:43,039
a dsl with basic you can write basic

542
00:24:40,480 --> 00:24:45,279
using scala well that the problem is

543
00:24:43,039 --> 00:24:45,679
like scala is very very powerful and

544
00:24:45,279 --> 00:24:48,799
then

545
00:24:45,679 --> 00:24:50,799
in like if you gather like 15 scala

546
00:24:48,799 --> 00:24:53,440
developers in a room then

547
00:24:50,799 --> 00:24:54,080
you will get 20 solutions for the same

548
00:24:53,440 --> 00:24:57,679
problem

549
00:24:54,080 --> 00:25:01,840
so not my stuff either

550
00:24:57,679 --> 00:25:01,840
takeaways um so

551
00:25:02,240 --> 00:25:06,320
the first thing how to create a dsl is

552
00:25:04,240 --> 00:25:07,360
basically you must start from java and

553
00:25:06,320 --> 00:25:09,760
java

554
00:25:07,360 --> 00:25:11,840
whatever the api you don't care because

555
00:25:09,760 --> 00:25:15,279
your kotlin code is 100

556
00:25:11,840 --> 00:25:17,199
interoperable with java in both ways so

557
00:25:15,279 --> 00:25:18,799
you can call kotlin from java and java

558
00:25:17,200 --> 00:25:19,360
from kotlin of course if you create a

559
00:25:18,799 --> 00:25:22,000
dsl

560
00:25:19,360 --> 00:25:24,080
course in in java it won't look so great

561
00:25:22,000 --> 00:25:27,840
but you can build upon your existing

562
00:25:24,080 --> 00:25:29,918
java api even if it's your not your api

563
00:25:27,840 --> 00:25:31,199
then you can use the property syntax so

564
00:25:29,919 --> 00:25:33,440
basically if you have

565
00:25:31,200 --> 00:25:34,400
like setters just use the equal sign

566
00:25:33,440 --> 00:25:37,919
it's always

567
00:25:34,400 --> 00:25:40,480
it looks a bit cleaner the third is

568
00:25:37,919 --> 00:25:42,480
extension function a lot of people say

569
00:25:40,480 --> 00:25:45,120
hey what's the best stuff in kotlin oh

570
00:25:42,480 --> 00:25:48,240
it's nullability handling

571
00:25:45,120 --> 00:25:50,320
in my opinion it's extension functions

572
00:25:48,240 --> 00:25:52,400
you can achieve a lot with extension

573
00:25:50,320 --> 00:25:54,879
functions

574
00:25:52,400 --> 00:25:56,720
my code becomes much more

575
00:25:54,880 --> 00:26:00,559
object-oriented when i use

576
00:25:56,720 --> 00:26:02,799
extension functions and when i'm having

577
00:26:00,559 --> 00:26:04,320
when i have to to code back in java it's

578
00:26:02,799 --> 00:26:06,960
really really hard for me because i

579
00:26:04,320 --> 00:26:09,200
missed that feature

580
00:26:06,960 --> 00:26:10,159
named parameters and default values they

581
00:26:09,200 --> 00:26:12,960
go hand in

582
00:26:10,159 --> 00:26:13,760
hand i you should really really uh like

583
00:26:12,960 --> 00:26:16,080
consider them

584
00:26:13,760 --> 00:26:17,760
so instead of overriding everything

585
00:26:16,080 --> 00:26:20,000
sorry of overloading

586
00:26:17,760 --> 00:26:21,679
uh you should consider using them it

587
00:26:20,000 --> 00:26:24,320
makes your your task

588
00:26:21,679 --> 00:26:25,679
much easier so instead of like changing

589
00:26:24,320 --> 00:26:29,200
your your your methods

590
00:26:25,679 --> 00:26:30,960
just use them lambdas with receiver they

591
00:26:29,200 --> 00:26:33,520
are unexpected thing

592
00:26:30,960 --> 00:26:34,640
uh like for dsl they are they are a

593
00:26:33,520 --> 00:26:38,240
must-have

594
00:26:34,640 --> 00:26:40,000
like everything is based on them some

595
00:26:38,240 --> 00:26:43,039
stuff that i didn't talk about

596
00:26:40,000 --> 00:26:46,480
uh operator overloading so in kotlin

597
00:26:43,039 --> 00:26:47,279
um you can overload operators but it's

598
00:26:46,480 --> 00:26:50,080
not like

599
00:26:47,279 --> 00:26:52,320
you can overload everything like in c or

600
00:26:50,080 --> 00:26:55,360
scala so you cannot have like

601
00:26:52,320 --> 00:26:58,320
hash bang bang function uh you must

602
00:26:55,360 --> 00:27:01,039
have you can only have a dedicated set

603
00:26:58,320 --> 00:27:04,158
so in some cases depending on your dsl

604
00:27:01,039 --> 00:27:05,279
you might want to add persons together

605
00:27:04,159 --> 00:27:07,919
for example

606
00:27:05,279 --> 00:27:08,880
then it's good to remember that you can

607
00:27:07,919 --> 00:27:12,159
overload

608
00:27:08,880 --> 00:27:13,120
the plus operator refi generics i

609
00:27:12,159 --> 00:27:16,720
mentioned it

610
00:27:13,120 --> 00:27:18,879
when i showed you the spring beans dsl

611
00:27:16,720 --> 00:27:20,080
it's really great i mean the fact that

612
00:27:18,880 --> 00:27:21,679
you can like

613
00:27:20,080 --> 00:27:23,678
make believe that you have verified

614
00:27:21,679 --> 00:27:24,720
generics even though the bytecode has no

615
00:27:23,679 --> 00:27:28,159
wi-fi generics

616
00:27:24,720 --> 00:27:30,080
is really great and something that i

617
00:27:28,159 --> 00:27:33,600
also didn't use in my

618
00:27:30,080 --> 00:27:36,240
demo is the infix so if your function

619
00:27:33,600 --> 00:27:36,959
only has one parameter you can annotate

620
00:27:36,240 --> 00:27:39,200
it within

621
00:27:36,960 --> 00:27:41,039
fix and you can call him without

622
00:27:39,200 --> 00:27:43,919
parenthesis

623
00:27:41,039 --> 00:27:46,158
so depending also on your domain uh

624
00:27:43,919 --> 00:27:46,880
depending if you are using a math dsl or

625
00:27:46,159 --> 00:27:49,520
whatever

626
00:27:46,880 --> 00:27:51,840
then you can create a nice dsl and

627
00:27:49,520 --> 00:27:56,080
remove the parenthesis and it looks

628
00:27:51,840 --> 00:27:57,840
better and so thanks a lot for your

629
00:27:56,080 --> 00:28:00,240
attention you can read my blog follow me

630
00:27:57,840 --> 00:28:03,439
on twitter and more importantly you can

631
00:28:00,240 --> 00:28:03,760
have the look at what i just showed you

632
00:28:03,440 --> 00:28:06,960
you

633
00:28:03,760 --> 00:28:08,240
so you can like get clone it and and

634
00:28:06,960 --> 00:28:11,039
play with it

635
00:28:08,240 --> 00:28:11,919
and also i have this card inside so if

636
00:28:11,039 --> 00:28:14,480
you really want

637
00:28:11,919 --> 00:28:16,240
to to see how it looks like when

638
00:28:14,480 --> 00:28:18,080
everything is finished

639
00:28:16,240 --> 00:28:20,000
even if it's in the old version of

640
00:28:18,080 --> 00:28:20,480
vaadin then i encourage you to have a

641
00:28:20,000 --> 00:28:22,640
look

642
00:28:20,480 --> 00:28:23,600
and you will see it's only what i showed

643
00:28:22,640 --> 00:28:25,440
you here

644
00:28:23,600 --> 00:28:27,039
so basically if you want to create a

645
00:28:25,440 --> 00:28:29,760
full-fledged dsl

646
00:28:27,039 --> 00:28:32,720
with the 10 bullet points that i showed

647
00:28:29,760 --> 00:28:36,080
you previously you can already do it

648
00:28:32,720 --> 00:28:39,279
by yourself i

649
00:28:36,080 --> 00:28:40,799
really must warn you that it's very easy

650
00:28:39,279 --> 00:28:43,520
to write them

651
00:28:40,799 --> 00:28:44,000
again it's a lot of copy pasting and

652
00:28:43,520 --> 00:28:47,440
it's it

653
00:28:44,000 --> 00:28:50,159
looks super nice uh beware because

654
00:28:47,440 --> 00:28:52,559
once you start creating a dsl then it's

655
00:28:50,159 --> 00:28:55,679
code so you must maintain it

656
00:28:52,559 --> 00:28:58,480
so if you're if you if you create

657
00:28:55,679 --> 00:29:00,399
a nice dsl for i don't know on top of

658
00:28:58,480 --> 00:29:01,200
hazel cost that means that you need to

659
00:29:00,399 --> 00:29:03,199
maintain it

660
00:29:01,200 --> 00:29:04,320
or to give it back to us so we maintain

661
00:29:03,200 --> 00:29:06,640
it but anybody

662
00:29:04,320 --> 00:29:08,158
i mean at some point somebody is going

663
00:29:06,640 --> 00:29:10,159
to have to maintain it

664
00:29:08,159 --> 00:29:11,760
so it looks nice but it's like every

665
00:29:10,159 --> 00:29:14,399
time you write a line of codes

666
00:29:11,760 --> 00:29:14,799
you must think about yeah what's next

667
00:29:14,399 --> 00:29:18,320
and

668
00:29:14,799 --> 00:29:18,320
next is maintenance

669
00:29:19,520 --> 00:29:23,360
so i guess we have some minutes left 10

670
00:29:21,760 --> 00:29:26,399
minutes

671
00:29:23,360 --> 00:29:27,669
is there are there any questions

672
00:29:26,399 --> 00:29:30,829
yes

673
00:29:27,670 --> 00:29:30,829
[Music]

674
00:29:38,799 --> 00:29:45,039
what about performance in the ide

675
00:29:41,919 --> 00:29:46,960
especially intelligent intellij

676
00:29:45,039 --> 00:29:49,760
because i think when i was using a

677
00:29:46,960 --> 00:29:53,200
libraries with some extension methods

678
00:29:49,760 --> 00:29:56,000
it i had to wait a lot for

679
00:29:53,200 --> 00:29:57,760
auto completion to repair like maybe one

680
00:29:56,000 --> 00:30:00,480
second or something i i

681
00:29:57,760 --> 00:30:02,240
i is it okay i didn't have such

682
00:30:00,480 --> 00:30:04,799
experience and to be honest i didn't

683
00:30:02,240 --> 00:30:07,840
benchmark it so i i don't know but as

684
00:30:04,799 --> 00:30:09,760
as you could see like on my demo it's

685
00:30:07,840 --> 00:30:12,000
it's quite easy

686
00:30:09,760 --> 00:30:12,960
of course when you create extension

687
00:30:12,000 --> 00:30:15,520
methods

688
00:30:12,960 --> 00:30:17,840
and lambdas and whatever in all cases

689
00:30:15,520 --> 00:30:21,120
you will have those long function

690
00:30:17,840 --> 00:30:23,199
classes names and of course that's not

691
00:30:21,120 --> 00:30:24,559
super great i think that in the latest

692
00:30:23,200 --> 00:30:26,480
versions of kotlin you have

693
00:30:24,559 --> 00:30:28,080
incremental compilation so i would

694
00:30:26,480 --> 00:30:29,919
suggest you to use that

695
00:30:28,080 --> 00:30:31,199
to speed up if you especially if you

696
00:30:29,919 --> 00:30:34,080
have a big project

697
00:30:31,200 --> 00:30:37,840
but everybody uses microservices anyway

698
00:30:34,080 --> 00:30:37,840
so that's fine

699
00:30:38,320 --> 00:30:54,240
other questions

700
00:30:51,520 --> 00:30:55,440
do you use kotlin in hazelcast in

701
00:30:54,240 --> 00:30:57,679
production code

702
00:30:55,440 --> 00:30:57,679
nope

703
00:31:00,799 --> 00:31:04,080
because i don't want to maintain that

704
00:31:02,480 --> 00:31:06,399
stuff because i know that

705
00:31:04,080 --> 00:31:08,240
if i write it i will have to maintain it

706
00:31:06,399 --> 00:31:10,320
and here i have the main

707
00:31:08,240 --> 00:31:14,000
like director of engineering and he will

708
00:31:10,320 --> 00:31:14,000
chase my ass

709
00:31:16,960 --> 00:31:20,799
you see i i don't want to put my finger

710
00:31:19,679 --> 00:31:23,200
in that so i can

711
00:31:20,799 --> 00:31:24,720
i can give it to engineering and then

712
00:31:23,200 --> 00:31:28,399
they maintain it

713
00:31:24,720 --> 00:31:30,399
but again it's really

714
00:31:28,399 --> 00:31:32,639
every line of code that you don't write

715
00:31:30,399 --> 00:31:35,678
you don't need to maintain

716
00:31:32,640 --> 00:31:36,399
so you really need to think um about the

717
00:31:35,679 --> 00:31:38,559
trade-offs

718
00:31:36,399 --> 00:31:40,320
and in our industry that's funny because

719
00:31:38,559 --> 00:31:41,039
we are supposed to be like logical

720
00:31:40,320 --> 00:31:44,158
people

721
00:31:41,039 --> 00:31:46,559
but it's either white or black most of

722
00:31:44,159 --> 00:31:48,799
my talks is it depends

723
00:31:46,559 --> 00:31:50,559
it depends on your context so if you

724
00:31:48,799 --> 00:31:54,158
think that

725
00:31:50,559 --> 00:31:56,559
you make you will ease

726
00:31:54,159 --> 00:31:57,760
uh the way that your users are using

727
00:31:56,559 --> 00:32:00,799
your product

728
00:31:57,760 --> 00:32:04,240
then of course you should provide a dsl

729
00:32:00,799 --> 00:32:05,918
now i know that not many of our users

730
00:32:04,240 --> 00:32:08,000
are using kotlin

731
00:32:05,919 --> 00:32:09,679
so i will address only a small fraction

732
00:32:08,000 --> 00:32:12,559
of our community

733
00:32:09,679 --> 00:32:13,840
and i will need to maintain it the

734
00:32:12,559 --> 00:32:17,360
trade-off is not in

735
00:32:13,840 --> 00:32:18,559
in in my favor here now if now everybody

736
00:32:17,360 --> 00:32:20,799
here decides that

737
00:32:18,559 --> 00:32:22,559
tomorrow they will convince 10 other

738
00:32:20,799 --> 00:32:28,960
people to use hazel cost

739
00:32:22,559 --> 00:32:31,279
with kathleen then let's start talking

740
00:32:28,960 --> 00:32:34,080
uh i i must say that i've seen a lot of

741
00:32:31,279 --> 00:32:36,559
uh kotlin dsl libraries been uh

742
00:32:34,080 --> 00:32:37,918
like stopped uh like maintaining has

743
00:32:36,559 --> 00:32:38,720
stopped because they didn't want to

744
00:32:37,919 --> 00:32:41,120
maintain it

745
00:32:38,720 --> 00:32:43,039
that's not my question in high

746
00:32:41,120 --> 00:32:45,199
performance environments

747
00:32:43,039 --> 00:32:47,200
do you think uh this should still be

748
00:32:45,200 --> 00:32:49,760
done especially uh

749
00:32:47,200 --> 00:32:51,519
do you think there is a like an overhead

750
00:32:49,760 --> 00:32:55,120
in calling init functions

751
00:32:51,519 --> 00:32:58,559
could they be inlined yes you can

752
00:32:55,120 --> 00:33:01,918
i mean also inline is not magical

753
00:32:58,559 --> 00:33:04,080
yes you don't you you don't need to call

754
00:33:01,919 --> 00:33:05,120
afterwards but then you you've got a lot

755
00:33:04,080 --> 00:33:08,960
of copy paste

756
00:33:05,120 --> 00:33:10,080
of these like codes so if it's a lot of

757
00:33:08,960 --> 00:33:13,120
codes then

758
00:33:10,080 --> 00:33:13,678
no it's not a good idea i i think that

759
00:33:13,120 --> 00:33:16,158
when you

760
00:33:13,679 --> 00:33:18,000
when you have soft such questions you

761
00:33:16,159 --> 00:33:21,279
should basically do the benchmark

762
00:33:18,000 --> 00:33:24,240
in your own context with option a

763
00:33:21,279 --> 00:33:26,960
and option b and checks which metrics

764
00:33:24,240 --> 00:33:26,960
matter to you

765
00:33:29,360 --> 00:33:32,158
other questions

766
00:33:36,080 --> 00:33:40,280
okay let's call it a day thank you very

767
00:33:37,919 --> 00:33:45,120
much i have

768
00:33:40,280 --> 00:33:47,600
[Applause]

769
00:33:45,120 --> 00:33:48,399
i have some cool hazel car stickers and

770
00:33:47,600 --> 00:33:51,360
there are still

771
00:33:48,399 --> 00:33:59,439
some cool uh stickers they'll have a lot

772
00:33:51,360 --> 00:33:59,439
of cuddling stickers

