1
00:00:05,279 --> 00:00:10,400
so

2
00:00:06,720 --> 00:00:14,559
um hello everybody

3
00:00:10,400 --> 00:00:18,880
thanks to join so early

4
00:00:14,559 --> 00:00:18,880
to listen to me that's yeah surprise

5
00:00:25,840 --> 00:00:31,359
first of all who am i my name is luca

6
00:00:28,160 --> 00:00:34,000
pizzamillo i'm an italian guy

7
00:00:31,359 --> 00:00:36,079
working at trivago i'm a freebie is the

8
00:00:34,000 --> 00:00:38,160
enthusiast

9
00:00:36,079 --> 00:00:39,440
i use previously at least for 10 years

10
00:00:38,160 --> 00:00:42,398
now

11
00:00:39,440 --> 00:00:44,399
and i received my port commit bit in

12
00:00:42,399 --> 00:00:48,320
august 2017.

13
00:00:44,399 --> 00:00:51,840
uh what i'm doing usually is trying to

14
00:00:48,320 --> 00:00:54,000
look for new uh use cases for freebsd

15
00:00:51,840 --> 00:00:55,120
i really believe privacy is a very solid

16
00:00:54,000 --> 00:00:58,239
platform and can

17
00:00:55,120 --> 00:01:03,120
run basically everything

18
00:00:58,239 --> 00:01:06,479
specifically in trivago i build packages

19
00:01:03,120 --> 00:01:06,479
customized stuff and so on

20
00:01:07,600 --> 00:01:13,919
a note it's early sunday

21
00:01:11,200 --> 00:01:14,720
i had the ability to provide gadgets yet

22
00:01:13,920 --> 00:01:16,799
socks

23
00:01:14,720 --> 00:01:18,080
so every time you have a question you

24
00:01:16,799 --> 00:01:22,320
receive a socks

25
00:01:18,080 --> 00:01:27,840
so the first time first 10 questions uh

26
00:01:22,320 --> 00:01:30,639
so don't be afraid please speak out

27
00:01:27,840 --> 00:01:31,759
make this presentation more interactive

28
00:01:30,640 --> 00:01:36,000
help me

29
00:01:31,759 --> 00:01:38,640
it's really it's only for me also

30
00:01:36,000 --> 00:01:39,439
so this is for today uh we'll talk a bit

31
00:01:38,640 --> 00:01:41,920
about

32
00:01:39,439 --> 00:01:43,199
jsonport what part is uh something i

33
00:01:41,920 --> 00:01:46,720
presented two years ago

34
00:01:43,200 --> 00:01:48,799
here what is a

35
00:01:46,720 --> 00:01:51,600
service mesh or what i believe the

36
00:01:48,799 --> 00:01:51,600
service mesh is

37
00:01:51,759 --> 00:01:55,040
what is a pot image feature work and

38
00:01:53,920 --> 00:01:57,680
then

39
00:01:55,040 --> 00:01:57,680
your question

40
00:01:58,079 --> 00:02:01,279
the port framework is something i

41
00:01:59,520 --> 00:02:03,200
started uh

42
00:02:01,280 --> 00:02:05,840
more than two years ago actually the

43
00:02:03,200 --> 00:02:08,640
ambitious goal was to

44
00:02:05,840 --> 00:02:09,920
basically was yeah there was there is no

45
00:02:08,639 --> 00:02:13,279
docker we know

46
00:02:09,919 --> 00:02:17,359
on previously at least not natively and

47
00:02:13,280 --> 00:02:19,680
but actually is a really nice pattern

48
00:02:17,360 --> 00:02:21,360
or at least something that is quite easy

49
00:02:19,680 --> 00:02:23,040
to use

50
00:02:21,360 --> 00:02:24,640
but obviously there was actually no

51
00:02:23,040 --> 00:02:27,200
container model

52
00:02:24,640 --> 00:02:28,640
in general so say why don't you try to

53
00:02:27,200 --> 00:02:29,599
do something similar using all the

54
00:02:28,640 --> 00:02:33,440
technologies that

55
00:02:29,599 --> 00:02:36,720
are already available like zfs uh jlpf

56
00:02:33,440 --> 00:02:39,280
finnette ctl cpu set and so on

57
00:02:36,720 --> 00:02:40,480
so i came up with this framework as a

58
00:02:39,280 --> 00:02:42,239
set of

59
00:02:40,480 --> 00:02:44,480
basically a tool that allows you to

60
00:02:42,239 --> 00:02:47,680
manage jails

61
00:02:44,480 --> 00:02:50,799
data sets i would say

62
00:02:47,680 --> 00:02:52,959
pretty easily now at that time was quite

63
00:02:50,800 --> 00:02:54,879
rough

64
00:02:52,959 --> 00:02:56,879
but yeah that was the logo that time so

65
00:02:54,879 --> 00:02:58,959
part comes from

66
00:02:56,879 --> 00:03:00,079
apart that is not the other meaning of

67
00:02:58,959 --> 00:03:04,239
part

68
00:03:00,080 --> 00:03:06,319
someone else suggested

69
00:03:04,239 --> 00:03:07,280
and that was basically the state at the

70
00:03:06,319 --> 00:03:09,920
time

71
00:03:07,280 --> 00:03:09,920
um

72
00:03:11,200 --> 00:03:15,440
and how that fit in here who doesn't

73
00:03:14,800 --> 00:03:18,720
know what

74
00:03:15,440 --> 00:03:21,760
service mesh is or use

75
00:03:18,720 --> 00:03:23,519
wow so you have to i have to explain the

76
00:03:21,760 --> 00:03:25,920
best of my capabilities what a service

77
00:03:23,519 --> 00:03:25,920
mesh is

78
00:03:27,680 --> 00:03:32,879
a server mess in general is an

79
00:03:29,440 --> 00:03:36,239
abstraction um

80
00:03:32,879 --> 00:03:40,000
where a developer you

81
00:03:36,239 --> 00:03:42,080
can submit basically a job or

82
00:03:40,000 --> 00:03:43,040
that would see what what the job is to

83
00:03:42,080 --> 00:03:46,319
this

84
00:03:43,040 --> 00:03:49,679
very big black box cloudy thing

85
00:03:46,319 --> 00:03:52,399
and then the user can just use

86
00:03:49,680 --> 00:03:54,640
the service that is exposed by by this

87
00:03:52,400 --> 00:03:54,640
job

88
00:03:55,040 --> 00:03:59,120
i will go a little bit in detail this is

89
00:03:57,519 --> 00:04:00,000
not like i mean it's similar to

90
00:03:59,120 --> 00:04:05,200
kubernetes but it's

91
00:04:00,000 --> 00:04:08,799
not kubernetes so basically

92
00:04:05,200 --> 00:04:11,839
the developer has a job description

93
00:04:08,799 --> 00:04:11,840
where it specifies

94
00:04:11,920 --> 00:04:15,839
which container to use

95
00:04:16,399 --> 00:04:22,159
and which parts should be exposed

96
00:04:19,759 --> 00:04:22,880
which type of services is that and so on

97
00:04:22,160 --> 00:04:25,199
here we have

98
00:04:22,880 --> 00:04:26,080
a central point in this case the

99
00:04:25,199 --> 00:04:27,840
orchestrator

100
00:04:26,080 --> 00:04:30,000
it received this job description and

101
00:04:27,840 --> 00:04:32,719
they say okay you want these containers

102
00:04:30,000 --> 00:04:35,600
up and running it looks for the in the

103
00:04:32,720 --> 00:04:38,800
worker cluster so we'll basically

104
00:04:35,600 --> 00:04:39,600
transfer the allocate or orchestrate

105
00:04:38,800 --> 00:04:42,479
basically the

106
00:04:39,600 --> 00:04:44,240
execution of these containers to the

107
00:04:42,479 --> 00:04:46,960
workers the workers will download

108
00:04:44,240 --> 00:04:49,440
the container images there will be spawn

109
00:04:46,960 --> 00:04:51,120
basically those new containers

110
00:04:49,440 --> 00:04:53,840
the servers will be up and running and

111
00:04:51,120 --> 00:04:56,720
that is one side of the story

112
00:04:53,840 --> 00:04:59,919
then it is a natural service you have a

113
00:04:56,720 --> 00:04:59,919
service discovery

114
00:05:00,720 --> 00:05:05,600
something a server basically we use

115
00:05:02,960 --> 00:05:05,599
console here

116
00:05:05,680 --> 00:05:09,759
and what the orchestrator does will

117
00:05:07,520 --> 00:05:14,240
register your service here

118
00:05:09,759 --> 00:05:17,039
and say okay now i decided that your

119
00:05:14,240 --> 00:05:18,080
server is running on this machine

120
00:05:17,039 --> 00:05:20,159
exposing

121
00:05:18,080 --> 00:05:22,639
the port i mean it's running on parts

122
00:05:20,160 --> 00:05:24,880
one two three four five whatever

123
00:05:22,639 --> 00:05:25,680
so these information are registered now

124
00:05:24,880 --> 00:05:28,960
here so

125
00:05:25,680 --> 00:05:30,560
um this so the discovery uh the service

126
00:05:28,960 --> 00:05:32,400
discovery will know okay there is this

127
00:05:30,560 --> 00:05:34,400
service with this name that is running

128
00:05:32,400 --> 00:05:36,719
there

129
00:05:34,400 --> 00:05:37,758
and what is also doing is continuously

130
00:05:36,720 --> 00:05:39,440
checking

131
00:05:37,759 --> 00:05:40,800
if the service is up and running so the

132
00:05:39,440 --> 00:05:43,840
health status of this

133
00:05:40,800 --> 00:05:45,440
of this service and this is the

134
00:05:43,840 --> 00:05:47,039
so-called control plane

135
00:05:45,440 --> 00:05:48,320
so now theoretically if you want to

136
00:05:47,039 --> 00:05:50,080
reach the service i mean the

137
00:05:48,320 --> 00:05:51,440
orchestrators decide where the server is

138
00:05:50,080 --> 00:05:52,159
running so you don't know exactly where

139
00:05:51,440 --> 00:05:54,719
it is

140
00:05:52,160 --> 00:05:55,919
so you have to basically interrogate the

141
00:05:54,720 --> 00:05:59,919
the server discovery

142
00:05:55,919 --> 00:06:03,039
uh and this is called i guess the

143
00:05:59,919 --> 00:06:04,719
control path so basically you can so you

144
00:06:03,039 --> 00:06:07,599
can know basically where your services

145
00:06:04,720 --> 00:06:09,759
are running

146
00:06:07,600 --> 00:06:12,960
and you have another element it's called

147
00:06:09,759 --> 00:06:15,440
is a proxy or a layer 7

148
00:06:12,960 --> 00:06:15,440
balancer

149
00:06:16,080 --> 00:06:20,719
this load balancer or this proxy

150
00:06:19,120 --> 00:06:22,880
you can configure it basically to say

151
00:06:20,720 --> 00:06:27,440
okay or when there is a user they want

152
00:06:22,880 --> 00:06:29,039
something uh look for

153
00:06:27,440 --> 00:06:31,039
where this service is running so

154
00:06:29,039 --> 00:06:34,240
basically the the list of the backend

155
00:06:31,039 --> 00:06:36,000
is continually updated uh to know where

156
00:06:34,240 --> 00:06:37,919
all the services are running so oh you

157
00:06:36,000 --> 00:06:39,680
want this service boom i will route

158
00:06:37,919 --> 00:06:41,840
basically all the traffic to the proper

159
00:06:39,680 --> 00:06:43,520
node but they get information here

160
00:06:41,840 --> 00:06:44,719
and every time there is a new service

161
00:06:43,520 --> 00:06:46,240
that is

162
00:06:44,720 --> 00:06:48,560
[Music]

163
00:06:46,240 --> 00:06:50,560
if the same service is replaced so the

164
00:06:48,560 --> 00:06:52,160
old container got destroyed and your new

165
00:06:50,560 --> 00:06:54,000
container is running for instance here

166
00:06:52,160 --> 00:06:56,000
the information is updated in the

167
00:06:54,000 --> 00:06:58,560
service discovery and so

168
00:06:56,000 --> 00:07:00,240
the the proxy can get updated

169
00:06:58,560 --> 00:07:00,880
information and will route the traffic

170
00:07:00,240 --> 00:07:03,919
in a different

171
00:07:00,880 --> 00:07:05,919
direction i hope

172
00:07:03,919 --> 00:07:08,080
i explained myself i'm not really a

173
00:07:05,919 --> 00:07:12,318
super master of this

174
00:07:08,080 --> 00:07:12,318
all elements any question

175
00:07:12,960 --> 00:07:17,840
cool he gets

176
00:07:26,160 --> 00:07:29,520
so to repeat the question uh this

177
00:07:28,880 --> 00:07:32,719
doesn't seem

178
00:07:29,520 --> 00:07:36,000
uh freebies did things to me yet that

179
00:07:32,720 --> 00:07:40,160
of course that is what's the problem

180
00:07:36,000 --> 00:07:42,720
actually those are programs that runs

181
00:07:40,160 --> 00:07:43,599
everywhere they are mainly i guess all

182
00:07:42,720 --> 00:07:47,599
of those are

183
00:07:43,599 --> 00:07:49,919
go programs um

184
00:07:47,599 --> 00:07:50,878
yeah that's actually the point uh how

185
00:07:49,919 --> 00:07:53,520
can we have something

186
00:07:50,879 --> 00:07:57,120
like this on previously and that is the

187
00:07:53,520 --> 00:07:57,120
solution that i'm presenting now

188
00:07:57,280 --> 00:08:04,000
as you see the the real issue is this

189
00:08:00,080 --> 00:08:07,120
container images there is normally

190
00:08:04,000 --> 00:08:08,810
no such solution that has used these

191
00:08:07,120 --> 00:08:10,400
names

192
00:08:08,810 --> 00:08:12,720
[Music]

193
00:08:10,400 --> 00:08:13,840
and exactly that was what is really

194
00:08:12,720 --> 00:08:17,120
needed

195
00:08:13,840 --> 00:08:18,560
uh the features that was really missing

196
00:08:17,120 --> 00:08:20,400
was the ability to deal with

197
00:08:18,560 --> 00:08:22,080
images so creating and downloading

198
00:08:20,400 --> 00:08:25,280
images so you need to create

199
00:08:22,080 --> 00:08:27,359
and export an image you need uh

200
00:08:25,280 --> 00:08:28,400
image registry i mean imitating docker

201
00:08:27,360 --> 00:08:28,960
okay you have to create a docker

202
00:08:28,400 --> 00:08:31,599
container

203
00:08:28,960 --> 00:08:33,039
you need docker hub and then the ability

204
00:08:31,599 --> 00:08:35,919
to download and

205
00:08:33,039 --> 00:08:36,958
then import an image that was the set of

206
00:08:35,919 --> 00:08:40,000
features that

207
00:08:36,958 --> 00:08:43,039
we worked on

208
00:08:40,000 --> 00:08:43,599
but more importantly what is really

209
00:08:43,039 --> 00:08:47,199
different

210
00:08:43,599 --> 00:08:48,959
is the is the paradigm how

211
00:08:47,200 --> 00:08:50,720
you work with those kind of i mean the

212
00:08:48,959 --> 00:08:53,040
workflow is really different

213
00:08:50,720 --> 00:08:54,640
we are used to create js on directly on

214
00:08:53,040 --> 00:08:57,680
the machine and then you'll configure

215
00:08:54,640 --> 00:08:57,680
them and you let them running

216
00:08:57,920 --> 00:09:02,000
and the developer will just you know

217
00:09:00,640 --> 00:09:03,920
just give you

218
00:09:02,000 --> 00:09:05,120
the php code or the java code whatever

219
00:09:03,920 --> 00:09:08,240
is running there

220
00:09:05,120 --> 00:09:11,760
but you are directly managing

221
00:09:08,240 --> 00:09:13,680
js on your final machine uh

222
00:09:11,760 --> 00:09:15,439
so the program here is different someone

223
00:09:13,680 --> 00:09:18,640
is working on the

224
00:09:15,440 --> 00:09:22,320
image creation so in the ejl image

225
00:09:18,640 --> 00:09:27,199
and someone else is deploying it so

226
00:09:22,320 --> 00:09:29,760
the pattern is very very different and

227
00:09:27,200 --> 00:09:30,720
also how uh the set of tool that you

228
00:09:29,760 --> 00:09:35,200
need is different

229
00:09:30,720 --> 00:09:39,920
and it was is an almost unexplored area

230
00:09:35,200 --> 00:09:39,920
i'd say and sorry

231
00:09:40,800 --> 00:09:45,839
i will discuss before the deployment of

232
00:09:43,760 --> 00:09:47,600
the j on the available nodes so

233
00:09:45,839 --> 00:09:49,200
to make that visible and then we'll

234
00:09:47,600 --> 00:09:52,000
discuss about the

235
00:09:49,200 --> 00:09:53,540
how to create an image and all those

236
00:09:52,000 --> 00:09:56,160
things

237
00:09:53,540 --> 00:09:58,640
[Music]

238
00:09:56,160 --> 00:09:59,680
there is already a lot of complexity all

239
00:09:58,640 --> 00:10:02,399
around

240
00:09:59,680 --> 00:10:05,839
i mean a lot of new names new components

241
00:10:02,399 --> 00:10:05,839
things are going there and there

242
00:10:06,320 --> 00:10:10,320
so the first implementation of pot as

243
00:10:09,279 --> 00:10:12,480
basically

244
00:10:10,320 --> 00:10:14,079
a jail was composed by multiple data set

245
00:10:12,480 --> 00:10:16,240
there was the base that was mounted in

246
00:10:14,079 --> 00:10:18,640
read-only and shared with other data

247
00:10:16,240 --> 00:10:19,920
jades and so on uh for this kind of

248
00:10:18,640 --> 00:10:21,360
scenario when you have those moving

249
00:10:19,920 --> 00:10:24,560
parts was too complicated

250
00:10:21,360 --> 00:10:25,200
so i decided okay just go to um one

251
00:10:24,560 --> 00:10:26,800
single

252
00:10:25,200 --> 00:10:28,560
big data fast data set where i put

253
00:10:26,800 --> 00:10:32,079
everything there so it's easier than to

254
00:10:28,560 --> 00:10:35,439
create images uh

255
00:10:32,079 --> 00:10:37,519
how an exporter pass basically

256
00:10:35,440 --> 00:10:38,640
you create a pot basically a jail you

257
00:10:37,519 --> 00:10:41,279
customize it you put

258
00:10:38,640 --> 00:10:42,399
the software that you want you take the

259
00:10:41,279 --> 00:10:44,480
snapshot

260
00:10:42,399 --> 00:10:45,440
and then we just if you send and

261
00:10:44,480 --> 00:10:47,279
compress tool

262
00:10:45,440 --> 00:10:48,800
boom you create an image so basically

263
00:10:47,279 --> 00:10:51,040
what you want inside your

264
00:10:48,800 --> 00:10:52,079
your jail and then you have a file a

265
00:10:51,040 --> 00:10:55,199
file is easy to

266
00:10:52,079 --> 00:11:01,279
move uh to import a part well

267
00:10:55,200 --> 00:11:03,519
uh is the other way around your

268
00:11:01,279 --> 00:11:05,850
uh the question is only the face is used

269
00:11:03,519 --> 00:11:07,440
yes the first is mandatory

270
00:11:05,850 --> 00:11:15,839
[Music]

271
00:11:07,440 --> 00:11:15,839
i don't support other thing if you

272
00:11:16,240 --> 00:11:23,200
uh if you want to use a different

273
00:11:19,440 --> 00:11:24,959
uh please support a patch

274
00:11:23,200 --> 00:11:27,279
that means winter patch and we're happy

275
00:11:24,959 --> 00:11:29,599
to to extend support but

276
00:11:27,279 --> 00:11:31,519
i mean that the whole pod framework is

277
00:11:29,600 --> 00:11:33,920
heavily based on zfs because

278
00:11:31,519 --> 00:11:35,120
uh i have all the nice feature uh

279
00:11:33,920 --> 00:11:37,360
snapshots uh

280
00:11:35,120 --> 00:11:39,120
wrote back and you know everything's

281
00:11:37,360 --> 00:11:41,279
there

282
00:11:39,120 --> 00:11:42,959
i said to import uh a part when you

283
00:11:41,279 --> 00:11:46,240
download the file then you can just

284
00:11:42,959 --> 00:11:46,239
uh end up

285
00:11:46,480 --> 00:11:49,519
uncompressed zfs receive boom you have

286
00:11:48,720 --> 00:11:51,279
the same

287
00:11:49,519 --> 00:11:54,230
basically content somewhere else and

288
00:11:51,279 --> 00:11:55,600
then you can clone the snapshots

289
00:11:54,230 --> 00:11:58,079
[Music]

290
00:11:55,600 --> 00:11:59,680
i use the clone here because if you have

291
00:11:58,079 --> 00:12:02,719
one image

292
00:11:59,680 --> 00:12:03,359
then it's if you this this image is

293
00:12:02,720 --> 00:12:05,279
reduced

294
00:12:03,360 --> 00:12:06,399
imagine an nginx server and you have the

295
00:12:05,279 --> 00:12:07,600
same engineering with different

296
00:12:06,399 --> 00:12:09,120
configuration

297
00:12:07,600 --> 00:12:10,959
it's easier than to clone it and just

298
00:12:09,120 --> 00:12:13,200
change the configuration file then to

299
00:12:10,959 --> 00:12:14,160
antar again and use the first receive so

300
00:12:13,200 --> 00:12:19,040
that's basically

301
00:12:14,160 --> 00:12:25,839
is a slight uh short optimization

302
00:12:19,040 --> 00:12:25,839
question so far other questions

303
00:12:32,160 --> 00:12:36,639
no because it means completely the point

304
00:12:36,839 --> 00:12:42,639
uh

305
00:12:39,279 --> 00:12:45,680
i mean jails is very very

306
00:12:42,639 --> 00:12:47,360
uh light the hive is not that

307
00:12:45,680 --> 00:12:49,439
that light i mean behind makes sense

308
00:12:47,360 --> 00:12:51,839
when you have different operating system

309
00:12:49,440 --> 00:12:53,519
uh that you want to run on previously

310
00:12:51,839 --> 00:12:55,040
host if you have the same operating

311
00:12:53,519 --> 00:12:57,680
system

312
00:12:55,040 --> 00:12:58,719
use jail i mean i want to pro um and

313
00:12:57,680 --> 00:13:00,560
focus on

314
00:12:58,720 --> 00:13:02,399
uh native support it has to be native

315
00:13:00,560 --> 00:13:03,680
it's really faster if you have beehive

316
00:13:02,399 --> 00:13:07,279
you don't have the same

317
00:13:03,680 --> 00:13:10,079
performance because full virtualization

318
00:13:07,279 --> 00:13:11,600
with jail you have a light visualization

319
00:13:10,079 --> 00:13:14,079
so it's just the operating system

320
00:13:11,600 --> 00:13:14,079
right so

321
00:13:18,000 --> 00:13:26,079
i'm waiting for your patch

322
00:13:21,680 --> 00:13:30,079
on that topic um

323
00:13:26,079 --> 00:13:30,079
so why we choose nomad

324
00:13:30,800 --> 00:13:38,639
to try to implement this service mesh uh

325
00:13:34,800 --> 00:13:40,319
dinosaur normally the console are

326
00:13:38,639 --> 00:13:41,839
say fabulously friendly in the sense

327
00:13:40,320 --> 00:13:43,040
that they are already in the package

328
00:13:41,839 --> 00:13:45,680
system so you can just

329
00:13:43,040 --> 00:13:46,880
install nomad and console and run them

330
00:13:45,680 --> 00:13:50,399
up and running

331
00:13:46,880 --> 00:13:54,240
um so console is the service discovery

332
00:13:50,399 --> 00:13:54,240
and nomad is the orchestrator basically

333
00:13:54,320 --> 00:13:58,560
moreover nomad has an internal structure

334
00:13:57,279 --> 00:14:01,519
that allows to add

335
00:13:58,560 --> 00:14:02,399
additional driver and driver is

336
00:14:01,519 --> 00:14:04,880
something

337
00:14:02,399 --> 00:14:06,720
that is basically supporting a different

338
00:14:04,880 --> 00:14:08,959
type of containers so there is a driver

339
00:14:06,720 --> 00:14:11,600
for docker container a driver for

340
00:14:08,959 --> 00:14:12,638
they call it uh this java thing means

341
00:14:11,600 --> 00:14:14,880
that basically

342
00:14:12,639 --> 00:14:16,320
you have a jar turbo and then is

343
00:14:14,880 --> 00:14:19,680
executing the jvm

344
00:14:16,320 --> 00:14:23,600
right away so different types

345
00:14:19,680 --> 00:14:26,880
of containers and what happened here

346
00:14:23,600 --> 00:14:31,199
is why can we not write an additional

347
00:14:26,880 --> 00:14:34,240
driver to let nomad interact with pot

348
00:14:31,199 --> 00:14:37,519
so stephen that i see here

349
00:14:34,240 --> 00:14:39,120
present scholar of mine just developed

350
00:14:37,519 --> 00:14:42,079
the driver i mean try to

351
00:14:39,120 --> 00:14:43,120
create this bridge between nomad and the

352
00:14:42,079 --> 00:14:46,079
pod framework to

353
00:14:43,120 --> 00:14:46,079
interact with js

354
00:14:46,320 --> 00:14:51,360
so the driver is already available you

355
00:14:48,399 --> 00:14:58,399
can install it on your own so it's

356
00:14:51,360 --> 00:15:01,839
i was a mature product but stable enough

357
00:14:58,399 --> 00:15:05,360
and this is the job description

358
00:15:01,839 --> 00:15:08,399
uh i will go through that a little bit

359
00:15:05,360 --> 00:15:12,079
uh this isn't a very

360
00:15:08,399 --> 00:15:14,880
easy example even if it's very long

361
00:15:12,079 --> 00:15:15,599
you have on top the name of the job the

362
00:15:14,880 --> 00:15:18,480
job

363
00:15:15,600 --> 00:15:19,360
is it's a service then you have the

364
00:15:18,480 --> 00:15:22,800
concept of group

365
00:15:19,360 --> 00:15:24,560
because a service can be composed by

366
00:15:22,800 --> 00:15:25,439
different containers so you want to join

367
00:15:24,560 --> 00:15:27,839
them to provide

368
00:15:25,440 --> 00:15:30,399
a service in this case the group is

369
00:15:27,839 --> 00:15:32,639
called example group auto fantasy

370
00:15:30,399 --> 00:15:34,639
and is composed by only one task that is

371
00:15:32,639 --> 00:15:36,880
only engine expo

372
00:15:34,639 --> 00:15:38,639
and here you specify the driver saying

373
00:15:36,880 --> 00:15:41,519
the driver is part

374
00:15:38,639 --> 00:15:42,240
then nomad will look for a worker that

375
00:15:41,519 --> 00:15:45,040
support

376
00:15:42,240 --> 00:15:46,320
part and will able to execute a jail in

377
00:15:45,040 --> 00:15:48,399
that way

378
00:15:46,320 --> 00:15:49,440
i will just jump here this is the the

379
00:15:48,399 --> 00:15:51,199
part that was

380
00:15:49,440 --> 00:15:53,199
strictly part of the driver so basically

381
00:15:51,199 --> 00:15:57,120
you say in the configuration

382
00:15:53,199 --> 00:15:58,959
where to download your image

383
00:15:57,120 --> 00:16:01,199
you say the name of the image the

384
00:15:58,959 --> 00:16:04,319
version

385
00:16:01,199 --> 00:16:06,240
the command is basically is optional but

386
00:16:04,320 --> 00:16:08,560
it's the

387
00:16:06,240 --> 00:16:10,480
the entry point of your jail what is the

388
00:16:08,560 --> 00:16:14,160
first command that's to be executed when

389
00:16:10,480 --> 00:16:16,079
the jail is spawned um

390
00:16:14,160 --> 00:16:17,839
then we have here that's the service

391
00:16:16,079 --> 00:16:19,519
part so that is

392
00:16:17,839 --> 00:16:21,279
all the information that you give to

393
00:16:19,519 --> 00:16:23,759
tonoma to spawn the jail

394
00:16:21,279 --> 00:16:24,720
and this part the service is what to

395
00:16:23,759 --> 00:16:26,570
register

396
00:16:24,720 --> 00:16:28,399
to console

397
00:16:26,570 --> 00:16:30,079
[Music]

398
00:16:28,399 --> 00:16:31,440
the name of the server will be web

399
00:16:30,079 --> 00:16:34,719
example for instance

400
00:16:31,440 --> 00:16:35,600
and then you see this port http for http

401
00:16:34,720 --> 00:16:38,240
here

402
00:16:35,600 --> 00:16:39,600
is mean that the part 80 in the

403
00:16:38,240 --> 00:16:42,880
container

404
00:16:39,600 --> 00:16:46,079
will be mapped with a different part

405
00:16:42,880 --> 00:16:47,839
outside there is an automatical pf

406
00:16:46,079 --> 00:16:49,199
redirection rule that is injected to the

407
00:16:47,839 --> 00:16:50,560
node

408
00:16:49,199 --> 00:16:52,319
and this new information will be

409
00:16:50,560 --> 00:16:53,439
registered in the service so we will see

410
00:16:52,320 --> 00:16:56,959
in console that will

411
00:16:53,440 --> 00:16:59,199
a different port locally the the j

412
00:16:56,959 --> 00:17:00,719
we have an nginx running on port 80 but

413
00:16:59,199 --> 00:17:03,040
then you have a pf rule that make the

414
00:17:00,720 --> 00:17:04,559
redirection

415
00:17:03,040 --> 00:17:06,079
and any console you will discover

416
00:17:04,559 --> 00:17:10,799
basically where uh

417
00:17:06,079 --> 00:17:13,918
this thing is running question so far

418
00:17:10,799 --> 00:17:18,480
yeah so this is

419
00:17:13,919 --> 00:17:18,480
like the pod registry

420
00:17:26,319 --> 00:17:30,559
yeah the pot registry uh there is a

421
00:17:29,200 --> 00:17:31,200
slide later i mean the question was

422
00:17:30,559 --> 00:17:34,559
about

423
00:17:31,200 --> 00:17:36,980
what is this spot registry is a web

424
00:17:34,559 --> 00:17:38,879
server with files

425
00:17:36,980 --> 00:17:41,730
[Music]

426
00:17:38,880 --> 00:17:43,120
there is one slide exactly on that topic

427
00:17:41,730 --> 00:17:47,039
[Music]

428
00:17:43,120 --> 00:17:49,760
it's complicated

429
00:17:47,039 --> 00:17:51,280
it's all the second part of the uh

430
00:17:49,760 --> 00:17:55,360
what's about that

431
00:17:51,280 --> 00:17:56,000
um it seems easy but it's not easy i

432
00:17:55,360 --> 00:17:58,479
mean

433
00:17:56,000 --> 00:17:59,280
if you think why i'm not using io cage

434
00:17:58,480 --> 00:18:02,799
or

435
00:17:59,280 --> 00:18:06,799
other jail frameworks that are out there

436
00:18:02,799 --> 00:18:08,160
first of all because i can do my own

437
00:18:06,799 --> 00:18:10,639
it's open so you can do whatever you

438
00:18:08,160 --> 00:18:13,200
want now this series it was

439
00:18:10,640 --> 00:18:13,679
it doesn't work there are features i

440
00:18:13,200 --> 00:18:16,160
mean

441
00:18:13,679 --> 00:18:17,440
a container has something different from

442
00:18:16,160 --> 00:18:20,559
a different

443
00:18:17,440 --> 00:18:23,600
normal jail for instance

444
00:18:20,559 --> 00:18:26,960
this comment in

445
00:18:23,600 --> 00:18:30,080
with nginx nginx is not

446
00:18:26,960 --> 00:18:33,200
fork working in background what it means

447
00:18:30,080 --> 00:18:34,639
means that if you use that type of

448
00:18:33,200 --> 00:18:36,240
command with jail

449
00:18:34,640 --> 00:18:39,039
with the jail command line the jail

450
00:18:36,240 --> 00:18:41,919
command line won't return because

451
00:18:39,039 --> 00:18:42,559
the first command is basically executed

452
00:18:41,919 --> 00:18:46,160
by the j

453
00:18:42,559 --> 00:18:49,600
command and it's just keeping your um

454
00:18:46,160 --> 00:18:52,000
still your your shell it's not returning

455
00:18:49,600 --> 00:18:54,399
in jail has this standard assumption

456
00:18:52,000 --> 00:18:56,000
that the command the the exact start of

457
00:18:54,400 --> 00:18:59,600
the command that you gave basically at a

458
00:18:56,000 --> 00:18:59,600
certain point with fork and will return

459
00:18:59,919 --> 00:19:03,760
in this case it's not the case i mean

460
00:19:01,280 --> 00:19:05,918
usually containers are working with

461
00:19:03,760 --> 00:19:07,120
blocking commands so basically they keep

462
00:19:05,919 --> 00:19:08,559
them

463
00:19:07,120 --> 00:19:10,799
engineering spawning and they're serving

464
00:19:08,559 --> 00:19:14,960
directly with traffic period it's not

465
00:19:10,799 --> 00:19:17,760
forking and that it creates a series of

466
00:19:14,960 --> 00:19:18,559
issues um in this case for instance the

467
00:19:17,760 --> 00:19:20,879
potstar

468
00:19:18,559 --> 00:19:22,799
post start hooks are not executed at all

469
00:19:20,880 --> 00:19:24,080
because what the jail common is doing

470
00:19:22,799 --> 00:19:26,000
is just working like create the

471
00:19:24,080 --> 00:19:27,840
container spawn the comments whether

472
00:19:26,000 --> 00:19:30,400
it's over and then executing everything

473
00:19:27,840 --> 00:19:32,000
that is after the post start

474
00:19:30,400 --> 00:19:33,919
the post start is never reached because

475
00:19:32,000 --> 00:19:36,480
the comment is keeping basically is not

476
00:19:33,919 --> 00:19:39,520
returning

477
00:19:36,480 --> 00:19:41,600
and a nice thing that is nice yeah it

478
00:19:39,520 --> 00:19:44,879
took me some time to discover is

479
00:19:41,600 --> 00:19:46,559
um usually those containers are

480
00:19:44,880 --> 00:19:48,799
ephemeral means that if the

481
00:19:46,559 --> 00:19:50,879
process inside the container disappear

482
00:19:48,799 --> 00:19:53,918
the container disappeared itself

483
00:19:50,880 --> 00:19:55,919
uh js are by default persistent so if

484
00:19:53,919 --> 00:19:58,799
there is no processes there the j will

485
00:19:55,919 --> 00:20:00,559
stay and io ch for instance only support

486
00:19:58,799 --> 00:20:02,879
persistent

487
00:20:00,559 --> 00:20:02,879
js

488
00:20:04,080 --> 00:20:07,199
the no persistent parameter is also

489
00:20:06,240 --> 00:20:12,799
applied

490
00:20:07,200 --> 00:20:14,880
by jail start as a poster hook

491
00:20:12,799 --> 00:20:17,360
and it didn't work basically i have to

492
00:20:14,880 --> 00:20:17,760
find some weird way to be able to have

493
00:20:17,360 --> 00:20:20,479
this

494
00:20:17,760 --> 00:20:23,520
no persistent flag applied even when a

495
00:20:20,480 --> 00:20:23,520
comma that doesn't return

496
00:20:23,600 --> 00:20:28,080
last but not least this is not clean up

497
00:20:26,720 --> 00:20:30,720
themselves

498
00:20:28,080 --> 00:20:32,799
you know that there is the post stop

499
00:20:30,720 --> 00:20:35,440
hooks or the pre-stop hooks and so on

500
00:20:32,799 --> 00:20:36,720
if you have a not persistent jail you

501
00:20:35,440 --> 00:20:39,200
mount your

502
00:20:36,720 --> 00:20:40,559
devices you create your rpf rules then

503
00:20:39,200 --> 00:20:42,799
the jail disappear

504
00:20:40,559 --> 00:20:44,639
come on you have to clean up but you

505
00:20:42,799 --> 00:20:47,120
don't have any notification

506
00:20:44,640 --> 00:20:49,840
that the jail disappear or you don't

507
00:20:47,120 --> 00:20:52,080
have any way to register a callback

508
00:20:49,840 --> 00:20:54,080
what you do usually when you call j

509
00:20:52,080 --> 00:20:56,240
minus r that is the j stop

510
00:20:54,080 --> 00:20:57,280
uh is the command that is executing

511
00:20:56,240 --> 00:20:59,760
those hooks so

512
00:20:57,280 --> 00:21:00,320
say okay that comes i have to stop this

513
00:20:59,760 --> 00:21:02,879
j

514
00:21:00,320 --> 00:21:04,480
so i run the hooks i stop the jail and

515
00:21:02,880 --> 00:21:07,360
then i run the other hooks

516
00:21:04,480 --> 00:21:09,280
uh but if he's not persistent the j will

517
00:21:07,360 --> 00:21:10,959
just vanish

518
00:21:09,280 --> 00:21:13,039
and there is no centralized demon

519
00:21:10,960 --> 00:21:14,720
basically that is controlling that what

520
00:21:13,039 --> 00:21:16,879
happened with the js they are just

521
00:21:14,720 --> 00:21:18,720
when is an internal physicist um

522
00:21:16,880 --> 00:21:20,880
operating system structure that just

523
00:21:18,720 --> 00:21:22,640
is like when a process is going away you

524
00:21:20,880 --> 00:21:26,000
don't get any notification

525
00:21:22,640 --> 00:21:28,799
per se we solve this basically

526
00:21:26,000 --> 00:21:30,400
inside nomad if nobody has to control

527
00:21:28,799 --> 00:21:31,600
that the containers are up and running

528
00:21:30,400 --> 00:21:34,000
if it's not running

529
00:21:31,600 --> 00:21:35,199
it's just calling a pot stop and they

530
00:21:34,000 --> 00:21:38,240
clean up basically

531
00:21:35,200 --> 00:21:40,080
uh almost everything

532
00:21:38,240 --> 00:21:41,360
in that way but we don't have

533
00:21:40,080 --> 00:21:45,840
generically a way

534
00:21:41,360 --> 00:21:48,559
to to clean up not persistent j

535
00:21:45,840 --> 00:21:48,559
question so far

536
00:21:49,760 --> 00:21:59,840
it's clear i'm too fast

537
00:22:04,880 --> 00:22:08,240
can you repeat the question can you run

538
00:22:10,840 --> 00:22:13,639
something

539
00:22:13,360 --> 00:22:16,479
um

540
00:22:13,640 --> 00:22:18,720
[Music]

541
00:22:16,480 --> 00:22:20,640
you have to avo the question was if you

542
00:22:18,720 --> 00:22:23,520
can run something that doesn't demonize

543
00:22:20,640 --> 00:22:26,320
you have to change your command line to

544
00:22:23,520 --> 00:22:29,280
avoid that is demonizing

545
00:22:26,320 --> 00:22:29,280
for example you're running

546
00:22:29,440 --> 00:22:36,559
oh no so yeah yes you can run

547
00:22:34,080 --> 00:22:39,760
so the best practice in this world is to

548
00:22:36,559 --> 00:22:41,440
have one process per container

549
00:22:39,760 --> 00:22:43,840
so for instance we have a radius

550
00:22:41,440 --> 00:22:44,640
instance and the exporter that is just

551
00:22:43,840 --> 00:22:46,799
basically

552
00:22:44,640 --> 00:22:48,559
another program is running in a

553
00:22:46,799 --> 00:22:50,400
different container

554
00:22:48,559 --> 00:22:52,158
because if one container dies you just

555
00:22:50,400 --> 00:22:53,840
replace this and you don't replace the

556
00:22:52,159 --> 00:22:56,640
whole service basically there

557
00:22:53,840 --> 00:22:58,959
is a common best practice in this way

558
00:22:56,640 --> 00:23:01,039
technically you can

559
00:22:58,960 --> 00:23:02,159
is suggested not to do it but yeah you

560
00:23:01,039 --> 00:23:03,600
can put more

561
00:23:02,159 --> 00:23:05,200
you can create your own creator and

562
00:23:03,600 --> 00:23:06,240
spawn different stuff the point is that

563
00:23:05,200 --> 00:23:09,840
the last one

564
00:23:06,240 --> 00:23:09,840
shouldn't return

565
00:23:13,200 --> 00:23:21,280
network currently we support

566
00:23:17,039 --> 00:23:24,158
two network configuration

567
00:23:21,280 --> 00:23:26,158
one is the so-called host meaning in

568
00:23:24,159 --> 00:23:27,360
jail jargon is inherit so basically you

569
00:23:26,159 --> 00:23:29,600
are you're using the

570
00:23:27,360 --> 00:23:31,120
the the machine network stack or the

571
00:23:29,600 --> 00:23:33,520
other one is the public bridge

572
00:23:31,120 --> 00:23:34,959
meaning that you have an internal bridge

573
00:23:33,520 --> 00:23:38,240
every jail has a v-net

574
00:23:34,960 --> 00:23:40,480
it's on stack it received one ip

575
00:23:38,240 --> 00:23:43,840
and is exported outside uh there is an

576
00:23:40,480 --> 00:23:45,520
app that is showing everything and

577
00:23:43,840 --> 00:23:48,240
you have redirection rule for every

578
00:23:45,520 --> 00:23:49,918
service that you want to expose

579
00:23:48,240 --> 00:23:53,919
and those are supported both in part and

580
00:23:49,919 --> 00:23:56,240
enormous input we have also other two

581
00:23:53,919 --> 00:23:57,679
network type configuration one is the

582
00:23:56,240 --> 00:23:59,279
private bridge that basically works

583
00:23:57,679 --> 00:24:00,480
exactly like the public bridge so

584
00:23:59,279 --> 00:24:01,919
basically you have one bridge and you

585
00:24:00,480 --> 00:24:04,880
attach your

586
00:24:01,919 --> 00:24:06,320
js there but the public bridge is one

587
00:24:04,880 --> 00:24:08,000
for all of them

588
00:24:06,320 --> 00:24:10,080
with private base you can have a bridge

589
00:24:08,000 --> 00:24:11,600
only for a subset of js so i have three

590
00:24:10,080 --> 00:24:14,399
js i want them isolated

591
00:24:11,600 --> 00:24:15,199
so they you can have delegated bridges

592
00:24:14,400 --> 00:24:19,039
just for

593
00:24:15,200 --> 00:24:21,200
those type of yeah for your work

594
00:24:19,039 --> 00:24:22,559
we want to add this to nomad as well so

595
00:24:21,200 --> 00:24:25,520
it makes sense for us for a group

596
00:24:22,559 --> 00:24:27,600
you have three different uh js you want

597
00:24:25,520 --> 00:24:31,120
them you want you don't want them to be

598
00:24:27,600 --> 00:24:34,639
on the same unique bridge

599
00:24:31,120 --> 00:24:35,439
for many reasons uh currently we have a

600
00:24:34,640 --> 00:24:38,400
small issue

601
00:24:35,440 --> 00:24:39,039
because the driver was at the task level

602
00:24:38,400 --> 00:24:41,520
but

603
00:24:39,039 --> 00:24:42,720
the bridge works at the group level so

604
00:24:41,520 --> 00:24:46,400
it's one

605
00:24:42,720 --> 00:24:49,520
it's one abstraction level above and

606
00:24:46,400 --> 00:24:50,880
apparently on uh nomad 010 there is this

607
00:24:49,520 --> 00:24:51,520
ability to have something at that level

608
00:24:50,880 --> 00:24:53,840
so we have

609
00:24:51,520 --> 00:24:55,279
to figure it out i mean currently is

610
00:24:53,840 --> 00:24:58,559
already working with the public bridge

611
00:24:55,279 --> 00:25:00,400
but if you put i don't know 200 jails

612
00:24:58,559 --> 00:25:02,639
then this bridge will be overloaded and

613
00:25:00,400 --> 00:25:06,559
probably the performance degradation so

614
00:25:02,640 --> 00:25:08,960
this is an area where we want to improve

615
00:25:06,559 --> 00:25:10,240
the last type is alias this is the

616
00:25:08,960 --> 00:25:11,679
typical jail

617
00:25:10,240 --> 00:25:13,279
way on doing things so basically you

618
00:25:11,679 --> 00:25:15,039
assign a static ip

619
00:25:13,279 --> 00:25:17,440
to your jail and that will be an alias

620
00:25:15,039 --> 00:25:21,200
on your network card

621
00:25:17,440 --> 00:25:22,000
in this dynamic cloud environment it

622
00:25:21,200 --> 00:25:26,000
doesn't really

623
00:25:22,000 --> 00:25:28,000
fit well because you have

624
00:25:26,000 --> 00:25:29,360
i mean you can theoretically have this j

625
00:25:28,000 --> 00:25:31,279
that is moving from one note to the

626
00:25:29,360 --> 00:25:34,719
other and this ap will follow

627
00:25:31,279 --> 00:25:37,360
uh but it means that you can only have

628
00:25:34,720 --> 00:25:38,799
one instance of that

629
00:25:37,360 --> 00:25:40,479
of that container you cannot have

630
00:25:38,799 --> 00:25:43,760
multiple uh

631
00:25:40,480 --> 00:25:45,520
i mean this cloudy thing is

632
00:25:43,760 --> 00:25:47,200
designed to provide you horizontal

633
00:25:45,520 --> 00:25:48,960
scalability so if you need more

634
00:25:47,200 --> 00:25:50,720
uh horsepower then you have instead of

635
00:25:48,960 --> 00:25:51,440
three web servers fiber server 10 web

636
00:25:50,720 --> 00:25:52,799
servers

637
00:25:51,440 --> 00:25:54,240
and in this case we are limiting to one

638
00:25:52,799 --> 00:25:56,080
because there is only one ip that you

639
00:25:54,240 --> 00:25:59,120
can assign

640
00:25:56,080 --> 00:26:03,360
so and also when you do

641
00:25:59,120 --> 00:26:04,799
um when you want to spawn

642
00:26:03,360 --> 00:26:06,559
i don't know you want to respawn the

643
00:26:04,799 --> 00:26:07,279
same the same you know there is a new

644
00:26:06,559 --> 00:26:09,200
version of

645
00:26:07,279 --> 00:26:10,799
of the web server so you have to

646
00:26:09,200 --> 00:26:12,960
redeploy your job

647
00:26:10,799 --> 00:26:14,879
well you have to remove the former job

648
00:26:12,960 --> 00:26:15,200
you deploy someone else and then you

649
00:26:14,880 --> 00:26:17,840
have

650
00:26:15,200 --> 00:26:18,559
a small downtime between those two those

651
00:26:17,840 --> 00:26:20,240
two times so

652
00:26:18,559 --> 00:26:22,840
i don't know if it's really something we

653
00:26:20,240 --> 00:26:25,840
want to pursue

654
00:26:22,840 --> 00:26:25,840
um

655
00:26:26,640 --> 00:26:29,679
i'm still undecided

656
00:26:31,120 --> 00:26:35,199
can you use it can you play with it can

657
00:26:33,440 --> 00:26:38,640
you try it

658
00:26:35,200 --> 00:26:40,320
yes there is a lot of

659
00:26:38,640 --> 00:26:42,720
different tools that probably nobody

660
00:26:40,320 --> 00:26:44,960
knows or you don't know

661
00:26:42,720 --> 00:26:45,840
the configuration it can be a little bit

662
00:26:44,960 --> 00:26:49,440
tricky

663
00:26:45,840 --> 00:26:52,320
so um mikhail

664
00:26:49,440 --> 00:26:52,960
kremling yes suggested why why you don't

665
00:26:52,320 --> 00:26:55,439
do

666
00:26:52,960 --> 00:26:57,279
a mini part that is basically mini cube

667
00:26:55,440 --> 00:27:00,640
so kind of an instance that is run

668
00:26:57,279 --> 00:27:04,559
on one note so you can play with it uh

669
00:27:00,640 --> 00:27:06,400
so there is uh there it is

670
00:27:04,559 --> 00:27:07,918
uh mini minipod is basically a service

671
00:27:06,400 --> 00:27:10,159
mesh uh

672
00:27:07,919 --> 00:27:11,200
what do i describe before all these

673
00:27:10,159 --> 00:27:13,200
console normal

674
00:27:11,200 --> 00:27:14,720
traffic components everything this is

675
00:27:13,200 --> 00:27:17,919
running on a single node

676
00:27:14,720 --> 00:27:18,559
so you can install mini pod as a as a

677
00:27:17,919 --> 00:27:22,080
package

678
00:27:18,559 --> 00:27:23,678
uh there is a one script that will

679
00:27:22,080 --> 00:27:25,760
change some configuration file on your

680
00:27:23,679 --> 00:27:26,559
machine and then you can start it and

681
00:27:25,760 --> 00:27:28,480
you have

682
00:27:26,559 --> 00:27:31,200
the same environment on a on your

683
00:27:28,480 --> 00:27:34,080
machine so you can

684
00:27:31,200 --> 00:27:35,840
it's not for production not at all

685
00:27:34,080 --> 00:27:37,279
because you don't have high availability

686
00:27:35,840 --> 00:27:39,439
and for tolerance of course it's running

687
00:27:37,279 --> 00:27:41,200
only on your machine

688
00:27:39,440 --> 00:27:42,960
but anyone can try so if you want to

689
00:27:41,200 --> 00:27:45,440
give us what this is the way

690
00:27:42,960 --> 00:27:45,440
there is

691
00:27:46,000 --> 00:27:54,799
a readme page with destruction how to

692
00:27:49,360 --> 00:27:54,799
install it it's not for production

693
00:27:54,880 --> 00:27:59,279
if it's not clear it really it's not for

694
00:27:56,799 --> 00:27:59,279
production

695
00:27:59,440 --> 00:28:03,840
questions so far

696
00:28:03,919 --> 00:28:07,919
don't be shy i still have five socks

697
00:28:10,080 --> 00:28:12,799
wanna see a demo

698
00:28:13,520 --> 00:28:17,840
you sure

699
00:28:21,200 --> 00:28:27,200
so this is how mini pot looks like i

700
00:28:25,039 --> 00:28:30,480
have mini pot running basically on my

701
00:28:27,200 --> 00:28:33,799
on my laptop and what you have you have

702
00:28:30,480 --> 00:28:36,799
a console running on port 80

703
00:28:33,799 --> 00:28:39,679
8500 you have nomad

704
00:28:36,799 --> 00:28:40,559
one here and you have traffic this is

705
00:28:39,679 --> 00:28:44,080
the front end

706
00:28:40,559 --> 00:28:44,080
actually we won't use it but

707
00:28:44,640 --> 00:28:48,480
it's here so

708
00:28:48,799 --> 00:28:54,799
how it works where it is example

709
00:28:52,320 --> 00:28:54,799
what's that

710
00:28:55,600 --> 00:28:59,840
yeah yeah now i'm

711
00:29:04,080 --> 00:29:09,520
so this is a job description file

712
00:29:07,570 --> 00:29:12,720
[Music]

713
00:29:09,520 --> 00:29:14,559
on many parts you specify a

714
00:29:12,720 --> 00:29:15,919
data center just to know where can we

715
00:29:14,559 --> 00:29:19,850
spawn but the

716
00:29:15,919 --> 00:29:21,440
internal abstraction of abstraction

717
00:29:19,850 --> 00:29:23,840
[Music]

718
00:29:21,440 --> 00:29:25,440
it's that's a very the very hello world

719
00:29:23,840 --> 00:29:28,480
example so basically

720
00:29:25,440 --> 00:29:32,080
just define a service called alofosdem

721
00:29:28,480 --> 00:29:32,960
uh the configuration is nginx i mean the

722
00:29:32,080 --> 00:29:36,000
standard nginx

723
00:29:32,960 --> 00:29:38,880
will be we will see the the standard

724
00:29:36,000 --> 00:29:39,679
page of nginx where to download the

725
00:29:38,880 --> 00:29:41,440
image

726
00:29:39,679 --> 00:29:43,520
which one which version blah blah blah

727
00:29:41,440 --> 00:29:46,240
and the port 80 will be

728
00:29:43,520 --> 00:29:47,120
mapped of top side and that's it that is

729
00:29:46,240 --> 00:29:49,679
the minimum

730
00:29:47,120 --> 00:29:51,039
thing that we need so how it works is do

731
00:29:49,679 --> 00:29:54,640
we just say nomad

732
00:29:51,039 --> 00:29:56,960
run custom awesome.job

733
00:29:54,640 --> 00:29:56,960
come on

734
00:29:57,030 --> 00:30:00,240
[Music]

735
00:29:58,240 --> 00:30:01,679
the command line tool is now speaking

736
00:30:00,240 --> 00:30:05,520
basically with the

737
00:30:01,679 --> 00:30:05,520
with the server say hey this is the job

738
00:30:06,840 --> 00:30:09,840
description

739
00:30:18,159 --> 00:30:24,240
oh the resources

740
00:30:22,480 --> 00:30:25,760
so the question was about the resource

741
00:30:24,240 --> 00:30:28,159
limitation um

742
00:30:25,760 --> 00:30:29,520
yeah i missed that point so basically

743
00:30:28,159 --> 00:30:32,960
i'm using cpu set

744
00:30:29,520 --> 00:30:34,639
so that it's complicated uh

745
00:30:32,960 --> 00:30:36,960
theoretically the resources that you

746
00:30:34,640 --> 00:30:37,600
specify are used by the orchestrator to

747
00:30:36,960 --> 00:30:40,320
understand

748
00:30:37,600 --> 00:30:40,719
if your cluster has the capability to

749
00:30:40,320 --> 00:30:42,620
run

750
00:30:40,720 --> 00:30:43,919
this kind of a job

751
00:30:42,620 --> 00:30:48,840
[Music]

752
00:30:43,919 --> 00:30:51,440
so the cpu is kind of a bogus

753
00:30:48,840 --> 00:30:53,600
megahertz uh so if your machine has

754
00:30:51,440 --> 00:30:56,159
is running on two gigahertz and you say

755
00:30:53,600 --> 00:30:57,840
that your job needs 100 megahertz

756
00:30:56,159 --> 00:30:59,519
is basically okay your machine is two

757
00:30:57,840 --> 00:31:01,199
megahertz and then it's using

758
00:30:59,519 --> 00:31:03,519
like to say five percent something like

759
00:31:01,200 --> 00:31:04,960
that but it's it's bogus somehow and

760
00:31:03,519 --> 00:31:08,640
it's used mainly for

761
00:31:04,960 --> 00:31:11,360
uh for scheduling and orchestrating

762
00:31:08,640 --> 00:31:12,480
memory is i'm using rctl to enforce

763
00:31:11,360 --> 00:31:14,639
memory

764
00:31:12,480 --> 00:31:17,440
but it doesn't work like in c groups

765
00:31:14,640 --> 00:31:19,840
rctl is

766
00:31:17,440 --> 00:31:21,200
try to to limit the amount of memory

767
00:31:19,840 --> 00:31:23,600
used by your jail

768
00:31:21,200 --> 00:31:24,240
but if your jail needs more memory it

769
00:31:23,600 --> 00:31:28,080
won't kill

770
00:31:24,240 --> 00:31:30,880
your your processes

771
00:31:28,080 --> 00:31:32,559
and that is not ideal in general because

772
00:31:30,880 --> 00:31:34,559
then you can have people exploiting that

773
00:31:32,559 --> 00:31:37,039
fat so you can use basically more memory

774
00:31:34,559 --> 00:31:39,918
invading the others uh it had this

775
00:31:37,039 --> 00:31:41,519
neighbor effects so called

776
00:31:39,919 --> 00:31:43,519
one thing that you have to work on is a

777
00:31:41,519 --> 00:31:45,039
om killer so basically trying to monitor

778
00:31:43,519 --> 00:31:46,159
the memory consumption as it's really

779
00:31:45,039 --> 00:31:48,240
not able to

780
00:31:46,159 --> 00:31:49,840
stick to that value you have to kill it

781
00:31:48,240 --> 00:31:51,919
but those are resources there are

782
00:31:49,840 --> 00:31:53,600
with rctl and cpu set basically they are

783
00:31:51,919 --> 00:31:57,840
enforced

784
00:31:53,600 --> 00:32:00,959
um that's it now yeah we have the

785
00:31:57,840 --> 00:32:02,320
submitted the job triggered created blah

786
00:32:00,960 --> 00:32:05,440
blah blah what that means

787
00:32:02,320 --> 00:32:08,639
we just look now at the the ui

788
00:32:05,440 --> 00:32:08,640
here so

789
00:32:09,440 --> 00:32:14,480
we have our first in job one

790
00:32:12,640 --> 00:32:17,600
up and running

791
00:32:14,480 --> 00:32:20,960
[Music]

792
00:32:17,600 --> 00:32:29,840
and you see there was only one instance

793
00:32:20,960 --> 00:32:29,840
it's running where

794
00:32:31,440 --> 00:32:36,720
is running here that is basically where

795
00:32:34,480 --> 00:32:43,440
is reachable

796
00:32:36,720 --> 00:32:45,760
just click on it

797
00:32:43,440 --> 00:32:47,919
and then there is the welcome to nginx

798
00:32:45,760 --> 00:32:50,399
we have the same information here

799
00:32:47,919 --> 00:32:52,000
basically the the service is registered

800
00:32:50,399 --> 00:32:53,760
we will have also some tag

801
00:32:52,000 --> 00:32:55,600
because then you can basically subscribe

802
00:32:53,760 --> 00:32:57,760
to specific service that has this tag

803
00:32:55,600 --> 00:33:01,120
and so on

804
00:32:57,760 --> 00:33:04,320
and what you have here you have also

805
00:33:01,120 --> 00:33:04,320
basically now

806
00:33:04,640 --> 00:33:10,559
console is keeping this information

807
00:33:07,919 --> 00:33:11,679
up to date so you know he knows where

808
00:33:10,559 --> 00:33:13,120
it's running you see there is not

809
00:33:11,679 --> 00:33:16,080
opportunity but this

810
00:33:13,120 --> 00:33:17,760
weird number and then it's performing

811
00:33:16,080 --> 00:33:20,399
continuously

812
00:33:17,760 --> 00:33:22,000
checks so if that disappears that will

813
00:33:20,399 --> 00:33:24,639
be marked as

814
00:33:22,000 --> 00:33:26,240
red and basically you can ask to counsel

815
00:33:24,640 --> 00:33:28,399
okay give me all the services

816
00:33:26,240 --> 00:33:29,279
and give me the service they are in

817
00:33:28,399 --> 00:33:32,399
health and

818
00:33:29,279 --> 00:33:34,080
healthy and not not running so this is

819
00:33:32,399 --> 00:33:38,399
trying to keep this information

820
00:33:34,080 --> 00:33:41,678
always up to date and then you have also

821
00:33:38,399 --> 00:33:44,719
here basically this is traffic

822
00:33:41,679 --> 00:33:47,120
this is the this proxy it receives the

823
00:33:44,720 --> 00:33:51,120
information from console

824
00:33:47,120 --> 00:33:51,120
and it had that here

825
00:33:51,600 --> 00:33:56,480
a new front end called uh

826
00:33:54,960 --> 00:33:58,399
hell of austin because that was the name

827
00:33:56,480 --> 00:33:59,039
of the service and if you basically

828
00:33:58,399 --> 00:34:01,760
occur

829
00:33:59,039 --> 00:34:03,760
with this host header you will be

830
00:34:01,760 --> 00:34:06,480
redirected to the

831
00:34:03,760 --> 00:34:07,039
back end hello foster that this year and

832
00:34:06,480 --> 00:34:08,719
those are

833
00:34:07,039 --> 00:34:10,320
totally dynamic so basically continually

834
00:34:08,719 --> 00:34:12,560
asking console oh there is a new

835
00:34:10,320 --> 00:34:13,760
service he's adding a new front end and

836
00:34:12,560 --> 00:34:14,399
he's adding then a new backend to

837
00:34:13,760 --> 00:34:17,040
service

838
00:34:14,399 --> 00:34:17,040
to serve this

839
00:34:18,239 --> 00:34:25,678
this service i see that i have

840
00:34:21,839 --> 00:34:34,560
i have to i have another demo but

841
00:34:25,679 --> 00:34:37,918
yeah i don't have time to show it

842
00:34:34,560 --> 00:34:37,918
it seems nice seems working

843
00:34:38,960 --> 00:34:42,800
but what is the problem creating the

844
00:34:40,879 --> 00:34:44,560
image is actually an issue i mean what

845
00:34:42,800 --> 00:34:46,839
is the image how can i create it how can

846
00:34:44,560 --> 00:34:50,239
i provision my js

847
00:34:46,839 --> 00:34:53,279
uh we need to provide automation

848
00:34:50,239 --> 00:34:54,158
reproducibility that's a heavy topic for

849
00:34:53,280 --> 00:34:57,599
me

850
00:34:54,159 --> 00:35:02,320
has to be fast the images should be not

851
00:34:57,599 --> 00:35:04,240
gigabytes but reasonably small

852
00:35:02,320 --> 00:35:08,000
the solution should be portable and

853
00:35:04,240 --> 00:35:10,399
usable portability especially because

854
00:35:08,000 --> 00:35:11,599
the current solution is basically flavor

855
00:35:10,400 --> 00:35:13,359
so

856
00:35:11,599 --> 00:35:14,720
when you run a pot create to create a

857
00:35:13,359 --> 00:35:18,560
pot

858
00:35:14,720 --> 00:35:21,598
you can specify flavors that are

859
00:35:18,560 --> 00:35:23,440
basically provision scripts

860
00:35:21,599 --> 00:35:25,040
so you can say okay if you want engine x

861
00:35:23,440 --> 00:35:26,000
boom i have a script that just installed

862
00:35:25,040 --> 00:35:29,520
nginx

863
00:35:26,000 --> 00:35:29,520
i make nginx an example but

864
00:35:29,760 --> 00:35:33,520
and then you can have basically multiple

865
00:35:31,920 --> 00:35:36,240
flavors that do just element

866
00:35:33,520 --> 00:35:38,160
a small set of operations for instance

867
00:35:36,240 --> 00:35:40,319
those

868
00:35:38,160 --> 00:35:41,839
uh there are two flavors out of the box

869
00:35:40,320 --> 00:35:44,960
fpg update and slim

870
00:35:41,839 --> 00:35:46,078
everyday update is running previously

871
00:35:44,960 --> 00:35:49,280
update

872
00:35:46,079 --> 00:35:50,880
before anything so it's because when uh

873
00:35:49,280 --> 00:35:53,599
how it works when you say okay this is

874
00:35:50,880 --> 00:35:58,240
the base 12.1 it's downloaded the biz

875
00:35:53,599 --> 00:36:00,960
dot txz but that doesn't have any uh

876
00:35:58,240 --> 00:36:02,879
patches so you always have to run a

877
00:36:00,960 --> 00:36:07,359
previously update there

878
00:36:02,880 --> 00:36:09,599
and this limb is a work in progress

879
00:36:07,359 --> 00:36:10,480
it tries to reduce the image of the size

880
00:36:09,599 --> 00:36:14,000
of the image

881
00:36:10,480 --> 00:36:14,480
deleting c lang deleting a lot of files

882
00:36:14,000 --> 00:36:15,839
that

883
00:36:14,480 --> 00:36:17,520
if you're running web server you don't

884
00:36:15,839 --> 00:36:19,359
need you don't need gdb

885
00:36:17,520 --> 00:36:20,640
you don't need a lot of things so i'm

886
00:36:19,359 --> 00:36:23,200
just removing

887
00:36:20,640 --> 00:36:27,839
hundreds of megabytes of stuff that in

888
00:36:23,200 --> 00:36:27,839
that scenario you don't really need

889
00:36:29,599 --> 00:36:36,320
two problems first of all

890
00:36:33,200 --> 00:36:38,960
it's not user friendly scripts go and

891
00:36:36,320 --> 00:36:42,320
it's not really user friendly it works

892
00:36:38,960 --> 00:36:42,320
obviously only on freebsd

893
00:36:42,800 --> 00:36:49,040
what is a script that use js

894
00:36:46,079 --> 00:36:49,680
it works only in freebsd web developers

895
00:36:49,040 --> 00:36:52,720
use

896
00:36:49,680 --> 00:36:54,720
they don't use previously period type

897
00:36:52,720 --> 00:36:56,240
i have a favorite they i'm the only one

898
00:36:54,720 --> 00:36:58,078
in chicago we have a thousand people i'm

899
00:36:56,240 --> 00:37:00,879
the only one with previously left off

900
00:36:58,079 --> 00:37:02,640
uh nobody's you i mean nobody few people

901
00:37:00,880 --> 00:37:06,240
use previously on the laptop so

902
00:37:02,640 --> 00:37:07,680
it's it's an issue and the other thing

903
00:37:06,240 --> 00:37:08,000
that is not really nice if you let's say

904
00:37:07,680 --> 00:37:09,680
oh

905
00:37:08,000 --> 00:37:10,960
new version of engine x you have to

906
00:37:09,680 --> 00:37:13,118
recreate everything from from the

907
00:37:10,960 --> 00:37:14,880
scratch so yeah

908
00:37:13,119 --> 00:37:16,240
you keep your flavors there basically

909
00:37:14,880 --> 00:37:16,640
those butterscotch but then you have to

910
00:37:16,240 --> 00:37:19,279
create

911
00:37:16,640 --> 00:37:20,640
everything from from the beginning this

912
00:37:19,280 --> 00:37:24,800
is still an issue

913
00:37:20,640 --> 00:37:24,799
the second one is not that bad

914
00:37:24,880 --> 00:37:31,119
can be better um

915
00:37:27,920 --> 00:37:34,079
what machine estimate again

916
00:37:31,119 --> 00:37:34,640
why you don't imitate docker with docker

917
00:37:34,079 --> 00:37:36,320
machine

918
00:37:34,640 --> 00:37:38,240
so basically if you want to run a docker

919
00:37:36,320 --> 00:37:41,200
container on a mac

920
00:37:38,240 --> 00:37:41,759
uh i mean docker i mean inside docker

921
00:37:41,200 --> 00:37:44,799
there is

922
00:37:41,760 --> 00:37:47,119
linux binaries but they run on the mac

923
00:37:44,800 --> 00:37:49,920
and how it works basically

924
00:37:47,119 --> 00:37:51,599
what you have is and you have to install

925
00:37:49,920 --> 00:37:56,079
docker machine that is installing

926
00:37:51,599 --> 00:37:58,560
a linux kernel in a virtualbox or

927
00:37:56,079 --> 00:38:00,240
in the vm sequentially and it's a

928
00:37:58,560 --> 00:38:03,680
security linux code there

929
00:38:00,240 --> 00:38:06,319
so why can we not do the same

930
00:38:03,680 --> 00:38:07,040
and put machine is this project to

931
00:38:06,320 --> 00:38:08,880
create

932
00:38:07,040 --> 00:38:11,680
basically it works on mac os x and on

933
00:38:08,880 --> 00:38:13,280
linux you will use vagrant to spawn a

934
00:38:11,680 --> 00:38:18,560
previously

935
00:38:13,280 --> 00:38:20,160
vm where you can execute and run your js

936
00:38:18,560 --> 00:38:21,599
it extends all the command available on

937
00:38:20,160 --> 00:38:22,799
path so basically you have two three

938
00:38:21,599 --> 00:38:24,960
commands

939
00:38:22,800 --> 00:38:25,839
more and every command that is not

940
00:38:24,960 --> 00:38:27,440
special

941
00:38:25,839 --> 00:38:28,960
kind of you have park machine possibly i

942
00:38:27,440 --> 00:38:32,000
mean two or three commas

943
00:38:28,960 --> 00:38:35,119
the other are just forwarded to the

944
00:38:32,000 --> 00:38:36,400
freebies dvm and you can have your js

945
00:38:35,119 --> 00:38:39,839
running on

946
00:38:36,400 --> 00:38:41,040
linux more or less so that's it's a

947
00:38:39,839 --> 00:38:42,720
it's an important thing because it's

948
00:38:41,040 --> 00:38:44,400
breaking the barrier so everyone can

949
00:38:42,720 --> 00:38:47,279
theoretically now play with js

950
00:38:44,400 --> 00:38:50,000
you don't need a freebsd installation to

951
00:38:47,280 --> 00:38:50,000
play with js

952
00:38:50,560 --> 00:38:54,400
the second work in progress is post file

953
00:38:53,040 --> 00:38:56,400
this is

954
00:38:54,400 --> 00:38:57,760
we're just looking how it goes so we're

955
00:38:56,400 --> 00:39:00,000
trying to imitate

956
00:38:57,760 --> 00:39:01,760
docker file instead of having that

957
00:39:00,000 --> 00:39:03,200
complicated script that you put there

958
00:39:01,760 --> 00:39:05,200
and there

959
00:39:03,200 --> 00:39:06,720
you can just have this typical run from

960
00:39:05,200 --> 00:39:10,000
whatever

961
00:39:06,720 --> 00:39:12,078
it's experimental uh it's not adding

962
00:39:10,000 --> 00:39:13,040
really or changing the way it's just

963
00:39:12,079 --> 00:39:16,320
translating

964
00:39:13,040 --> 00:39:18,079
this pod file in in a flavor

965
00:39:16,320 --> 00:39:19,599
i mean the flavor is what actually you

966
00:39:18,079 --> 00:39:20,800
are want to run is the same

967
00:39:19,599 --> 00:39:23,119
it's not user friendly so that's

968
00:39:20,800 --> 00:39:25,710
basically a wrapper

969
00:39:23,119 --> 00:39:26,880
where people is more used to to use

970
00:39:25,710 --> 00:39:30,160
[Music]

971
00:39:26,880 --> 00:39:33,280
to create bot images

972
00:39:30,160 --> 00:39:38,399
i would encourage you to to try

973
00:39:33,280 --> 00:39:38,400
if you have some issues he will fix them

974
00:39:40,839 --> 00:39:44,799
uh but it's a working pro so we are

975
00:39:43,680 --> 00:39:46,319
still evaluating

976
00:39:44,800 --> 00:39:48,160
we don't want to create a complete new

977
00:39:46,320 --> 00:39:49,200
format because i don't think it makes a

978
00:39:48,160 --> 00:39:52,000
lot of sense

979
00:39:49,200 --> 00:39:53,759
uh but i mean also docker file is not

980
00:39:52,000 --> 00:39:55,680
the best format ever so

981
00:39:53,760 --> 00:39:58,240
we are kind of puzzled what we can do

982
00:39:55,680 --> 00:39:59,730
what we shouldn't do

983
00:39:58,240 --> 00:40:01,359
registering uh

984
00:39:59,730 --> 00:40:04,400
[Music]

985
00:40:01,359 --> 00:40:04,880
easy it's easy to be server with those

986
00:40:04,400 --> 00:40:06,240
files

987
00:40:04,880 --> 00:40:07,760
you put there so when you do a pot

988
00:40:06,240 --> 00:40:08,799
export you create your image and then

989
00:40:07,760 --> 00:40:11,839
you have those files

990
00:40:08,800 --> 00:40:13,680
you copy them over period

991
00:40:11,839 --> 00:40:14,960
you have to maintain your own registry

992
00:40:13,680 --> 00:40:17,279
basically

993
00:40:14,960 --> 00:40:18,640
i don't want to maintain any registry at

994
00:40:17,280 --> 00:40:20,160
all

995
00:40:18,640 --> 00:40:22,319
i don't like the idea to download

996
00:40:20,160 --> 00:40:23,920
binaries i don't want to maintain

997
00:40:22,319 --> 00:40:25,359
to have the burden uh in terms of

998
00:40:23,920 --> 00:40:28,160
security but

999
00:40:25,359 --> 00:40:28,880
having binaries floating there and there

1000
00:40:28,160 --> 00:40:32,160
uh

1001
00:40:28,880 --> 00:40:34,800
but i'll be more than happy to have

1002
00:40:32,160 --> 00:40:36,560
uh a flavors catalog so you need engine

1003
00:40:34,800 --> 00:40:37,760
x okay this is the way to create engine

1004
00:40:36,560 --> 00:40:38,720
so you have those scripts already

1005
00:40:37,760 --> 00:40:41,280
prepared

1006
00:40:38,720 --> 00:40:42,879
uh there's a radio approach similar to

1007
00:40:41,280 --> 00:40:44,560
what bastille bsd is doing

1008
00:40:42,880 --> 00:40:46,880
they have all this template where you

1009
00:40:44,560 --> 00:40:49,759
can just say okay i want to jail with

1010
00:40:46,880 --> 00:40:51,040
memcache boom done you don't need really

1011
00:40:49,760 --> 00:40:53,680
to understand how

1012
00:40:51,040 --> 00:40:54,079
it's already there so there you have a

1013
00:40:53,680 --> 00:40:58,000
really

1014
00:40:54,079 --> 00:40:59,920
a great approach and maybe i can reuse

1015
00:40:58,000 --> 00:41:01,760
those template i don't know how to speak

1016
00:40:59,920 --> 00:41:07,839
with the

1017
00:41:01,760 --> 00:41:07,839
but still bsd developer

1018
00:41:08,319 --> 00:41:14,480
this kind of registry that i showed in

1019
00:41:11,599 --> 00:41:15,760
the examples is a visual machine running

1020
00:41:14,480 --> 00:41:19,359
somewhere is a

1021
00:41:15,760 --> 00:41:20,800
web server with those two files period

1022
00:41:19,359 --> 00:41:22,640
it's good for example so you don't have

1023
00:41:20,800 --> 00:41:25,040
to create your own and so on

1024
00:41:22,640 --> 00:41:26,640
but it's not for production use not at

1025
00:41:25,040 --> 00:41:28,640
all basically it's just

1026
00:41:26,640 --> 00:41:30,960
something so people can try you can try

1027
00:41:28,640 --> 00:41:34,480
it you don't need to create a new image

1028
00:41:30,960 --> 00:41:37,200
and so on but it's not docker hub

1029
00:41:34,480 --> 00:41:38,400
you cannot upload things it's it's a web

1030
00:41:37,200 --> 00:41:41,279
server

1031
00:41:38,400 --> 00:41:41,280
it's not for production

1032
00:41:45,040 --> 00:41:51,680
wow two minutes three minutes uh we

1033
00:41:48,319 --> 00:41:52,720
want to do a lot of things many already

1034
00:41:51,680 --> 00:41:55,919
spoken

1035
00:41:52,720 --> 00:41:56,959
but i'm running out of time we want to

1036
00:41:55,920 --> 00:41:58,560
focus now on

1037
00:41:56,960 --> 00:42:00,480
more on image creation because that is

1038
00:41:58,560 --> 00:42:02,640
where people can then

1039
00:42:00,480 --> 00:42:04,160
use it or at least try to use it because

1040
00:42:02,640 --> 00:42:05,520
if you have wow you have your service

1041
00:42:04,160 --> 00:42:09,200
mesh but you have nothing to run

1042
00:42:05,520 --> 00:42:09,839
doesn't make any sense so it is more or

1043
00:42:09,200 --> 00:42:11,520
less

1044
00:42:09,839 --> 00:42:13,040
especially with probably have many ideas

1045
00:42:11,520 --> 00:42:17,280
but no time to

1046
00:42:13,040 --> 00:42:20,079
to do it um

1047
00:42:17,280 --> 00:42:22,000
the dualsex support will come i get no

1048
00:42:20,079 --> 00:42:23,520
it's not here olivier spoken with him

1049
00:42:22,000 --> 00:42:25,760
[Music]

1050
00:42:23,520 --> 00:42:26,880
good idea to have ipv6 support currently

1051
00:42:25,760 --> 00:42:30,240
everything is uh

1052
00:42:26,880 --> 00:42:32,160
on my pb4 uh but we will have ipv6

1053
00:42:30,240 --> 00:42:35,598
support to provide dual stack so

1054
00:42:32,160 --> 00:42:39,118
your container can cam will speak

1055
00:42:35,599 --> 00:42:41,359
ipv6 uh really thank you

1056
00:42:39,119 --> 00:42:42,160
to here thank you for listening uh i

1057
00:42:41,359 --> 00:42:45,839
welcome

1058
00:42:42,160 --> 00:42:47,118
also my contributors i put nickname

1059
00:42:45,839 --> 00:42:50,000
because i'm not sure that

1060
00:42:47,119 --> 00:42:52,800
they want to be i can write their name

1061
00:42:50,000 --> 00:42:52,800
but really thanks

1062
00:42:53,280 --> 00:42:59,839
question wow many

1063
00:43:04,880 --> 00:43:13,839
almost over but i guess i have time for

1064
00:43:08,079 --> 00:43:13,839
many how many questions can i

1065
00:43:18,319 --> 00:43:22,319
do you have any ideas about persistent

1066
00:43:20,960 --> 00:43:25,680
storage

1067
00:43:22,319 --> 00:43:27,200
uh it's relatively easy it's not managed

1068
00:43:25,680 --> 00:43:28,160
here basically you can go on the machine

1069
00:43:27,200 --> 00:43:30,720
you can mount

1070
00:43:28,160 --> 00:43:33,200
data sets or directories inside the

1071
00:43:30,720 --> 00:43:35,759
inside the container so

1072
00:43:33,200 --> 00:43:37,680
it's up to you what to use but if you

1073
00:43:35,760 --> 00:43:38,400
have on a specific node you can pin

1074
00:43:37,680 --> 00:43:40,319
basically

1075
00:43:38,400 --> 00:43:41,839
a container running on a specific node

1076
00:43:40,319 --> 00:43:42,640
where you have a data center persistent

1077
00:43:41,839 --> 00:43:44,799
storage there

1078
00:43:42,640 --> 00:43:45,680
and then you can mount it uh inside the

1079
00:43:44,800 --> 00:43:48,319
inside the gel

1080
00:43:45,680 --> 00:43:50,399
is official i didn't show but it's there

1081
00:43:48,319 --> 00:43:53,440
and you can define that

1082
00:43:50,400 --> 00:43:56,319
container yeah you specify

1083
00:43:53,440 --> 00:43:58,240
mount in you can mount in a as i said a

1084
00:43:56,319 --> 00:43:59,599
folder or zfs data set

1085
00:43:58,240 --> 00:44:01,759
you read only if you have to be read

1086
00:43:59,599 --> 00:44:09,839
only only and then you can pin the

1087
00:44:01,760 --> 00:44:09,839
the job directly to a specific machine

1088
00:44:10,640 --> 00:44:15,118
uh i don't see why not

1089
00:44:15,599 --> 00:44:19,280
i use pf i don't know how your cage is

1090
00:44:18,160 --> 00:44:22,399
using pf

1091
00:44:19,280 --> 00:44:25,440
i only think what it's doing is is using

1092
00:44:22,400 --> 00:44:25,920
uh two anchors that i add and that's it

1093
00:44:25,440 --> 00:44:29,760
so i

1094
00:44:25,920 --> 00:44:32,560
don't really pollute too much uh

1095
00:44:29,760 --> 00:44:34,400
and then i have my specific data under

1096
00:44:32,560 --> 00:44:36,400
you specify where to put your

1097
00:44:34,400 --> 00:44:37,520
route where to create all the data sets

1098
00:44:36,400 --> 00:44:39,839
and if it's different then

1099
00:44:37,520 --> 00:44:41,440
it should be compatible i never tried it

1100
00:44:39,839 --> 00:44:44,880
but

1101
00:44:41,440 --> 00:44:51,839
keep me posted last question

1102
00:44:44,880 --> 00:44:51,839
so how would you compare that to the uh

1103
00:44:53,599 --> 00:45:02,880
what is

