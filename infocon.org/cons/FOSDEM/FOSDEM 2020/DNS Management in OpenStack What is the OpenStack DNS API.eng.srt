1
00:00:11,519 --> 00:00:15,120
hi

2
00:00:12,000 --> 00:00:16,240
uh graeme hayes i work for microsoft

3
00:00:15,120 --> 00:00:20,080
azure currently

4
00:00:16,239 --> 00:00:22,720
i was the ptl of the openstack designate

5
00:00:20,080 --> 00:00:23,278
which is the dns service project uh for

6
00:00:22,720 --> 00:00:25,599
about

7
00:00:23,279 --> 00:00:27,840
four or five years and i currently sit

8
00:00:25,599 --> 00:00:30,080
on the openstack tactical committee

9
00:00:27,840 --> 00:00:31,279
uh contact details are there uh there'll

10
00:00:30,080 --> 00:00:34,000
be links to the slides

11
00:00:31,279 --> 00:00:34,880
further on um if you have any questions

12
00:00:34,000 --> 00:00:37,280
later on throughout the

13
00:00:34,880 --> 00:00:38,239
thread throughout the event just use any

14
00:00:37,280 --> 00:00:40,800
of these

15
00:00:38,239 --> 00:00:42,399
and i can help evangelize and designate

16
00:00:40,800 --> 00:00:44,320
even more

17
00:00:42,399 --> 00:00:45,840
so for those of you who aren't familiar

18
00:00:44,320 --> 00:00:49,360
with openstack

19
00:00:45,840 --> 00:00:51,840
uh openstack is a open source

20
00:00:49,360 --> 00:00:54,239
infrastructure as a service solution so

21
00:00:51,840 --> 00:00:56,719
it's it's made up of

22
00:00:54,239 --> 00:00:57,599
a huge amount of smaller discrete

23
00:00:56,719 --> 00:01:01,359
components that

24
00:00:57,600 --> 00:01:01,359
combine into one full solution

25
00:01:01,840 --> 00:01:05,680
and it has designated just one part of

26
00:01:04,959 --> 00:01:08,798
that

27
00:01:05,680 --> 00:01:10,880
so you can see we're over here in the

28
00:01:08,799 --> 00:01:14,159
networking section

29
00:01:10,880 --> 00:01:17,439
and because of

30
00:01:14,159 --> 00:01:19,040
the everything being discrete apis

31
00:01:17,439 --> 00:01:22,158
all the all the different components

32
00:01:19,040 --> 00:01:24,479
talk to each other over these apis

33
00:01:22,159 --> 00:01:26,479
so the core design and the core tenants

34
00:01:24,479 --> 00:01:27,759
of what openstack is that everything

35
00:01:26,479 --> 00:01:28,560
should be multi-tenant from the very

36
00:01:27,759 --> 00:01:31,439
beginning

37
00:01:28,560 --> 00:01:32,400
it should support having discrete

38
00:01:31,439 --> 00:01:34,720
segmented

39
00:01:32,400 --> 00:01:37,200
uh user space so people can only see

40
00:01:34,720 --> 00:01:40,798
what the things they're supposed to see

41
00:01:37,200 --> 00:01:41,680
we have a common and authentication

42
00:01:40,799 --> 00:01:43,360
layer

43
00:01:41,680 --> 00:01:44,799
which is also another project within the

44
00:01:43,360 --> 00:01:48,320
within openstack

45
00:01:44,799 --> 00:01:50,159
that and it has a standard

46
00:01:48,320 --> 00:01:52,000
uh interaction so all the all of the

47
00:01:50,159 --> 00:01:54,799
different openstack apis have the same

48
00:01:52,000 --> 00:01:57,840
authorization middleware uh

49
00:01:54,799 --> 00:02:02,159
openstack is a api layer it isn't

50
00:01:57,840 --> 00:02:04,079
it generally doesn't implement a full uh

51
00:02:02,159 --> 00:02:05,520
data plane so for example with the

52
00:02:04,079 --> 00:02:09,280
compute project

53
00:02:05,520 --> 00:02:12,799
you can choose zen or kvm

54
00:02:09,280 --> 00:02:14,480
or even docker or hyper-v

55
00:02:12,800 --> 00:02:15,760
and the same goes for things like

56
00:02:14,480 --> 00:02:17,280
networking where you can choose the

57
00:02:15,760 --> 00:02:18,640
different network providers so you can

58
00:02:17,280 --> 00:02:21,920
use cisco or

59
00:02:18,640 --> 00:02:23,119
whatever it's also everything should be

60
00:02:21,920 --> 00:02:26,238
highly available

61
00:02:23,120 --> 00:02:26,879
from the beginning uh everything should

62
00:02:26,239 --> 00:02:28,640
be

63
00:02:26,879 --> 00:02:30,000
have the ability to work active active

64
00:02:28,640 --> 00:02:34,839
and scale out

65
00:02:30,000 --> 00:02:37,280
uh to allow for increased usage and

66
00:02:34,840 --> 00:02:40,720
uh

67
00:02:37,280 --> 00:02:43,920
so for designate this means we have a

68
00:02:40,720 --> 00:02:45,840
pretty plugable architecture

69
00:02:43,920 --> 00:02:48,160
dns is something that's generally quite

70
00:02:45,840 --> 00:02:50,000
custom in a lot of people's deployments

71
00:02:48,160 --> 00:02:51,680
so we allow users to extend what the

72
00:02:50,000 --> 00:02:53,840
core functionality is

73
00:02:51,680 --> 00:02:54,959
with fairly simple python extension

74
00:02:53,840 --> 00:02:57,440
points

75
00:02:54,959 --> 00:02:58,800
so you can add additional api endpoints

76
00:02:57,440 --> 00:03:00,000
for example when we had this deployed in

77
00:02:58,800 --> 00:03:01,360
hp cloud

78
00:03:00,000 --> 00:03:03,440
we had to add in a load of billing

79
00:03:01,360 --> 00:03:04,159
endpoints so the internal billing tools

80
00:03:03,440 --> 00:03:07,280
can collect

81
00:03:04,159 --> 00:03:08,239
usage and uh the the number of records

82
00:03:07,280 --> 00:03:10,720
and zones created per

83
00:03:08,239 --> 00:03:10,720
per user

84
00:03:11,280 --> 00:03:14,879
we support a lot of different dns

85
00:03:13,519 --> 00:03:17,599
servers

86
00:03:14,879 --> 00:03:19,599
and we allow you to to modify what

87
00:03:17,599 --> 00:03:21,040
notifications are emitted so

88
00:03:19,599 --> 00:03:22,640
within openstack there's a standard

89
00:03:21,040 --> 00:03:24,239
scheme for emitting

90
00:03:22,640 --> 00:03:25,679
notifications on when things are created

91
00:03:24,239 --> 00:03:28,799
updated deleted

92
00:03:25,680 --> 00:03:30,400
or when things exist but we allow you to

93
00:03:28,799 --> 00:03:32,319
write your own python packages to emit

94
00:03:30,400 --> 00:03:34,720
what notifications you need

95
00:03:32,319 --> 00:03:36,480
we support anything that has a sql

96
00:03:34,720 --> 00:03:38,400
alchemy back end

97
00:03:36,480 --> 00:03:40,238
pretty much there's some problems with

98
00:03:38,400 --> 00:03:42,560
postgres right now but

99
00:03:40,239 --> 00:03:44,000
in general if your database is supported

100
00:03:42,560 --> 00:03:45,440
by sql document we can use that as a

101
00:03:44,000 --> 00:03:48,239
database store

102
00:03:45,440 --> 00:03:49,519
we allow you to plug into different

103
00:03:48,239 --> 00:03:52,080
quarter management so

104
00:03:49,519 --> 00:03:53,599
there's a reference one built into the

105
00:03:52,080 --> 00:03:56,560
into designate but

106
00:03:53,599 --> 00:03:58,159
you can use the there's about two or

107
00:03:56,560 --> 00:03:59,120
three others available within openstack

108
00:03:58,159 --> 00:04:02,000
at the moment

109
00:03:59,120 --> 00:04:04,239
and then for policy again there's a

110
00:04:02,000 --> 00:04:05,840
reference policy implementation but

111
00:04:04,239 --> 00:04:07,680
you can extend that to be whatever you

112
00:04:05,840 --> 00:04:09,120
want so there's i know there was some

113
00:04:07,680 --> 00:04:10,799
people experimenting with things like

114
00:04:09,120 --> 00:04:14,000
open policy agent

115
00:04:10,799 --> 00:04:18,079
and some of the other remote uh policy

116
00:04:14,000 --> 00:04:19,120
controls so the two main servers we

117
00:04:18,079 --> 00:04:22,160
really support

118
00:04:19,120 --> 00:04:24,560
are parodinous and bind

119
00:04:22,160 --> 00:04:26,240
every single commit gets tested against

120
00:04:24,560 --> 00:04:29,440
those two

121
00:04:26,240 --> 00:04:32,479
um we do support info blocks uh

122
00:04:29,440 --> 00:04:32,960
that's tested semi-regularly and we also

123
00:04:32,479 --> 00:04:36,880
support

124
00:04:32,960 --> 00:04:38,239
designate as a designate server so

125
00:04:36,880 --> 00:04:40,320
for example let's use where some people

126
00:04:38,240 --> 00:04:41,759
have an internal installer designate but

127
00:04:40,320 --> 00:04:43,440
they're also using a cloud provider that

128
00:04:41,759 --> 00:04:47,120
runs

129
00:04:43,440 --> 00:04:51,040
we support some of the dns services

130
00:04:47,120 --> 00:04:53,040
mainly akamai and dynect

131
00:04:51,040 --> 00:04:54,560
and there is experimental support for

132
00:04:53,040 --> 00:04:56,000
some things like the microsoft dns

133
00:04:54,560 --> 00:04:59,199
server and nsd

134
00:04:56,000 --> 00:05:03,360
and not there's a full list

135
00:04:59,199 --> 00:05:03,360
at this slide here at that address

136
00:05:06,240 --> 00:05:12,639
at its core designate covers

137
00:05:10,720 --> 00:05:14,080
how everything it does is scalable

138
00:05:12,639 --> 00:05:15,840
outwards uh

139
00:05:14,080 --> 00:05:18,400
there's no active passive it's all

140
00:05:15,840 --> 00:05:18,400
active active

141
00:05:21,039 --> 00:05:25,599
it all it all centers around using uh

142
00:05:24,400 --> 00:05:27,520
pretty pretty much all of these

143
00:05:25,600 --> 00:05:30,880
interactions are done over a

144
00:05:27,520 --> 00:05:34,479
messaging queue generally rabbit mq

145
00:05:30,880 --> 00:05:37,840
and as you can see you can scale up

146
00:05:34,479 --> 00:05:38,800
this was designed to run at rackspace

147
00:05:37,840 --> 00:05:41,919
scale which was

148
00:05:38,800 --> 00:05:45,039
a couple of million zones and i run

149
00:05:41,919 --> 00:05:45,520
my personal one on a iron box and scale

150
00:05:45,039 --> 00:05:48,960
way

151
00:05:45,520 --> 00:05:51,440
and it runs fine um

152
00:05:48,960 --> 00:05:52,719
basically what happens this is a it's an

153
00:05:51,440 --> 00:05:55,680
eventually consistent

154
00:05:52,720 --> 00:05:57,199
api so the api will always represent the

155
00:05:55,680 --> 00:06:00,240
desired state but

156
00:05:57,199 --> 00:06:04,319
we use the dns protocol itself to send

157
00:06:00,240 --> 00:06:04,319
uh zone transfers to update the dns

158
00:06:04,840 --> 00:06:09,039
servers generally

159
00:06:06,639 --> 00:06:10,800
when you create or update a record it's

160
00:06:09,039 --> 00:06:12,400
done by the api

161
00:06:10,800 --> 00:06:14,720
we have our business logic is done in

162
00:06:12,400 --> 00:06:17,840
the designate central section

163
00:06:14,720 --> 00:06:19,680
and then it will push out uh

164
00:06:17,840 --> 00:06:21,198
the notification to the to a set of

165
00:06:19,680 --> 00:06:23,199
workers that

166
00:06:21,199 --> 00:06:25,120
this zone has been updated you need to

167
00:06:23,199 --> 00:06:28,000
notify the dns the fire just far side of

168
00:06:25,120 --> 00:06:30,400
the dns servers that something's changed

169
00:06:28,000 --> 00:06:31,680
and then we wrote a very small dns

170
00:06:30,400 --> 00:06:33,440
server in python

171
00:06:31,680 --> 00:06:35,360
that can read directly read our database

172
00:06:33,440 --> 00:06:37,600
directly and that's used for sending

173
00:06:35,360 --> 00:06:40,319
zone transfers

174
00:06:37,600 --> 00:06:40,800
um we also have a producer which is used

175
00:06:40,319 --> 00:06:43,440
for

176
00:06:40,800 --> 00:06:44,000
recurring tasks so for making sure that

177
00:06:43,440 --> 00:06:45,600
uh

178
00:06:44,000 --> 00:06:47,280
notifies haven't been lost or the zones

179
00:06:45,600 --> 00:06:50,560
are out of date so we send the

180
00:06:47,280 --> 00:06:51,440
periodic uh tasks to go check everything

181
00:06:50,560 --> 00:06:53,280
all the serials are

182
00:06:51,440 --> 00:06:55,919
what we expect and the zone contents are

183
00:06:53,280 --> 00:06:57,840
what we expect

184
00:06:55,919 --> 00:06:59,599
and because and because we support so

185
00:06:57,840 --> 00:07:01,359
many different dns servers the back ends

186
00:06:59,599 --> 00:07:02,159
are just pluggable pieces of python that

187
00:07:01,360 --> 00:07:04,479
plug into

188
00:07:02,160 --> 00:07:05,919
the worker so it knows when it gets a

189
00:07:04,479 --> 00:07:09,520
zone create event

190
00:07:05,919 --> 00:07:12,479
for parityness it just sends a

191
00:07:09,520 --> 00:07:13,359
http request to the powerdns api whereas

192
00:07:12,479 --> 00:07:16,960
with bind it'll

193
00:07:13,360 --> 00:07:20,960
it'll use a rndc call or for

194
00:07:16,960 --> 00:07:20,960
akamai it's a different type of api call

195
00:07:21,919 --> 00:07:26,639
we also support multiple pools of dns

196
00:07:24,880 --> 00:07:28,880
servers so

197
00:07:26,639 --> 00:07:30,319
you may have an internal r d set of

198
00:07:28,880 --> 00:07:33,520
servers that are running

199
00:07:30,319 --> 00:07:35,759
just in your data center and then

200
00:07:33,520 --> 00:07:36,719
more important central company servers

201
00:07:35,759 --> 00:07:38,560
that are run

202
00:07:36,720 --> 00:07:42,880
across your network and then your

203
00:07:38,560 --> 00:07:42,880
external dns say in akamai or dynect

204
00:07:43,039 --> 00:07:46,639
because of this because the plugable

205
00:07:44,879 --> 00:07:48,400
system

206
00:07:46,639 --> 00:07:49,759
we reuse the same infrastructure so when

207
00:07:48,400 --> 00:07:53,359
you're creating the zone

208
00:07:49,759 --> 00:07:56,000
you can just create uh scheduling hints

209
00:07:53,360 --> 00:07:58,240
when you're sending the request to to

210
00:07:56,000 --> 00:08:00,000
help it choose the right zone for your

211
00:07:58,240 --> 00:08:02,639
the right set of servers for your your

212
00:08:00,000 --> 00:08:02,639
dns zone

213
00:08:03,680 --> 00:08:06,960
and it all reuses the same

214
00:08:04,879 --> 00:08:08,720
infrastructure so you don't have to run

215
00:08:06,960 --> 00:08:10,239
separate copies of the mini dns server

216
00:08:08,720 --> 00:08:13,759
or the producer or workers

217
00:08:10,240 --> 00:08:16,800
per pool it's just one homogenous

218
00:08:13,759 --> 00:08:20,639
use um

219
00:08:16,800 --> 00:08:22,000
the api is a the main interaction point

220
00:08:20,639 --> 00:08:24,240
for both

221
00:08:22,000 --> 00:08:26,400
end users and other dns components other

222
00:08:24,240 --> 00:08:29,520
openstack components

223
00:08:26,400 --> 00:08:30,159
so we have quite a tight integration

224
00:08:29,520 --> 00:08:33,279
with

225
00:08:30,160 --> 00:08:36,800
the open site networking service

226
00:08:33,279 --> 00:08:38,159
which allows people to set reverse dns

227
00:08:36,799 --> 00:08:41,679
entries for

228
00:08:38,159 --> 00:08:44,880
public ip addresses supported by uh the

229
00:08:41,679 --> 00:08:48,399
open site networking and for you for

230
00:08:44,880 --> 00:08:51,760
users to create uh

231
00:08:48,399 --> 00:08:54,959
dns names automatically so you can tag

232
00:08:51,760 --> 00:08:56,480
a new openstack neutron network with a

233
00:08:54,959 --> 00:08:59,680
dns domain

234
00:08:56,480 --> 00:09:01,120
and then when you create any any any new

235
00:08:59,680 --> 00:09:02,319
port on that network and you provide a

236
00:09:01,120 --> 00:09:05,360
dns name

237
00:09:02,320 --> 00:09:06,000
it'll auto generate the a or quad a

238
00:09:05,360 --> 00:09:08,480
records

239
00:09:06,000 --> 00:09:10,880
and the pointer records for that ip

240
00:09:08,480 --> 00:09:10,880
address

241
00:09:14,560 --> 00:09:19,359
so we're pretty well integrated into the

242
00:09:16,800 --> 00:09:22,800
overall openstack ecosystem

243
00:09:19,360 --> 00:09:25,200
and we have a dashboard plugin we can be

244
00:09:22,800 --> 00:09:28,160
you can use the openstack cli

245
00:09:25,200 --> 00:09:29,279
uh the standard openstack cli to do all

246
00:09:28,160 --> 00:09:31,760
the interactions with

247
00:09:29,279 --> 00:09:33,760
uh designate we don't have separate

248
00:09:31,760 --> 00:09:37,760
clients

249
00:09:33,760 --> 00:09:39,200
if you use heat which a lot of the

250
00:09:37,760 --> 00:09:40,560
a lot of the telecommunications

251
00:09:39,200 --> 00:09:42,000
companies have sort of standardized on

252
00:09:40,560 --> 00:09:44,880
for deploying

253
00:09:42,000 --> 00:09:45,519
uh apps we have resources available in

254
00:09:44,880 --> 00:09:48,839
heat to

255
00:09:45,519 --> 00:09:51,040
to create and manage dns zones and

256
00:09:48,839 --> 00:09:52,560
records

257
00:09:51,040 --> 00:09:54,079
and as i said the networking service has

258
00:09:52,560 --> 00:09:57,680
the integration to

259
00:09:54,080 --> 00:10:00,480
set up ford reverse dns for

260
00:09:57,680 --> 00:10:01,439
ports as they're created we also have a

261
00:10:00,480 --> 00:10:03,440
separate

262
00:10:01,440 --> 00:10:04,560
plug-in point which is called designate

263
00:10:03,440 --> 00:10:08,399
sync

264
00:10:04,560 --> 00:10:10,239
um so this is for sometimes

265
00:10:08,399 --> 00:10:12,240
systems don't necessarily have the logic

266
00:10:10,240 --> 00:10:13,519
to call out to the to designate whenever

267
00:10:12,240 --> 00:10:16,560
something happens

268
00:10:13,519 --> 00:10:19,760
so this can listen to us a queue

269
00:10:16,560 --> 00:10:22,719
uh on an ap amq pq

270
00:10:19,760 --> 00:10:23,760
and as messengers come in act on them so

271
00:10:22,720 --> 00:10:25,360
we again we have a reference

272
00:10:23,760 --> 00:10:27,920
implementation that will

273
00:10:25,360 --> 00:10:29,519
just create dns names for neutron ports

274
00:10:27,920 --> 00:10:30,640
but it's a really powerful extension

275
00:10:29,519 --> 00:10:33,839
point

276
00:10:30,640 --> 00:10:37,040
so for example there's a

277
00:10:33,839 --> 00:10:37,920
isp in the u.s that every time they

278
00:10:37,040 --> 00:10:40,800
created a new

279
00:10:37,920 --> 00:10:41,680
tenant which is a project like a spanish

280
00:10:40,800 --> 00:10:44,800
control section

281
00:10:41,680 --> 00:10:46,959
in does in openstack it would pre-create

282
00:10:44,800 --> 00:10:49,680
dns zones and pre-fill

283
00:10:46,959 --> 00:10:50,640
the required information into us uh

284
00:10:49,680 --> 00:10:53,680
there's others

285
00:10:50,640 --> 00:10:57,040
who update

286
00:10:53,680 --> 00:10:58,479
uh their records via for load balancing

287
00:10:57,040 --> 00:11:00,719
or for ha

288
00:10:58,480 --> 00:11:02,240
they just spit a message onto the queue

289
00:11:00,720 --> 00:11:04,959
and dns sync will pick it up

290
00:11:02,240 --> 00:11:04,959
and act on it

291
00:11:05,920 --> 00:11:13,279
so just as an example i

292
00:11:10,480 --> 00:11:14,240
if you want to use openstack i'll use

293
00:11:13,279 --> 00:11:18,000
designate to host

294
00:11:14,240 --> 00:11:21,360
create a zone there's a lot of

295
00:11:18,000 --> 00:11:23,200
uh installers so so if a if a

296
00:11:21,360 --> 00:11:24,399
provider for like an isp or your

297
00:11:23,200 --> 00:11:26,000
internal cloud

298
00:11:24,399 --> 00:11:29,360
is shipping an installer bundle as a

299
00:11:26,000 --> 00:11:32,399
heat template they can pre-provision

300
00:11:29,360 --> 00:11:35,519
all the required dns entries

301
00:11:32,399 --> 00:11:37,120
and then because

302
00:11:35,519 --> 00:11:39,839
this can read values from other

303
00:11:37,120 --> 00:11:40,959
resources if you had a openstack server

304
00:11:39,839 --> 00:11:42,959
resource

305
00:11:40,959 --> 00:11:44,399
you can start creating the records as

306
00:11:42,959 --> 00:11:47,518
needed

307
00:11:44,399 --> 00:11:47,519
from the output to that

308
00:11:48,160 --> 00:11:53,760
externally i'm we're pretty well

309
00:11:50,720 --> 00:11:53,760
integrated announceable

310
00:11:54,240 --> 00:12:02,079
again it's the same as as as heath

311
00:11:58,399 --> 00:12:05,200
we have a pretty good terraform support

312
00:12:02,079 --> 00:12:08,319
um and then within

313
00:12:05,200 --> 00:12:09,600
kubernetes the external dns project i

314
00:12:08,320 --> 00:12:12,560
will

315
00:12:09,600 --> 00:12:13,200
uh designate natively as well there is a

316
00:12:12,560 --> 00:12:17,040
certbot

317
00:12:13,200 --> 00:12:19,760
implementation uh plug-in it works

318
00:12:17,040 --> 00:12:20,480
i works reasonably well i wrote it and

319
00:12:19,760 --> 00:12:24,079
use it so

320
00:12:20,480 --> 00:12:26,639
if there's any problems yet um

321
00:12:24,079 --> 00:12:28,719
again i needed to use uh let's encrypt

322
00:12:26,639 --> 00:12:30,399
so it was the easiest thing to do

323
00:12:28,720 --> 00:12:32,720
we have pretty good sdk support so

324
00:12:30,399 --> 00:12:35,839
there's

325
00:12:32,720 --> 00:12:38,560
uh python java and

326
00:12:35,839 --> 00:12:39,519
uh go sdk support so if you decide you

327
00:12:38,560 --> 00:12:42,800
need to

328
00:12:39,519 --> 00:12:44,320
re-implement your own logic it's all

329
00:12:42,800 --> 00:12:47,359
there

330
00:12:44,320 --> 00:12:49,279
and it's a pretty easy system to program

331
00:12:47,360 --> 00:12:51,680
against it's a very simple api of some

332
00:12:49,279 --> 00:12:54,000
examples later on you can see

333
00:12:51,680 --> 00:12:54,000
um

334
00:12:56,240 --> 00:13:00,160
and if if we don't have a sdk for your

335
00:12:58,320 --> 00:13:02,000
language uh

336
00:13:00,160 --> 00:13:03,920
shaved i'd be more than willing to help

337
00:13:02,000 --> 00:13:05,360
people

338
00:13:03,920 --> 00:13:08,079
so again this is just an example of an

339
00:13:05,360 --> 00:13:10,880
ansible integration

340
00:13:08,079 --> 00:13:13,279
it's a it's a top level supported part

341
00:13:10,880 --> 00:13:15,920
of the ansible cloud extensions

342
00:13:13,279 --> 00:13:17,279
and the same for terraform it's a little

343
00:13:15,920 --> 00:13:18,880
small but

344
00:13:17,279 --> 00:13:20,800
again the openstack provider for

345
00:13:18,880 --> 00:13:24,079
terraform has

346
00:13:20,800 --> 00:13:24,079
the dns resources you need

347
00:13:25,360 --> 00:13:29,279
so the standard cli is pretty simple

348
00:13:27,760 --> 00:13:32,399
it's

349
00:13:29,279 --> 00:13:35,680
i support it it's

350
00:13:32,399 --> 00:13:38,480
verb based so

351
00:13:35,680 --> 00:13:39,839
in this case openstack zone list just

352
00:13:38,480 --> 00:13:41,600
lists all your lists all the zones you

353
00:13:39,839 --> 00:13:44,399
have

354
00:13:41,600 --> 00:13:46,160
and this is choosing vectors because i

355
00:13:44,399 --> 00:13:49,680
this is one of the places i had

356
00:13:46,160 --> 00:13:52,160
domains i'm creating

357
00:13:49,680 --> 00:13:52,160
i don't know

358
00:13:55,440 --> 00:14:00,399
um it's just openstack zone create

359
00:13:58,079 --> 00:14:03,839
followed by the required information

360
00:14:00,399 --> 00:14:06,079
um if you were using multiple pools uh

361
00:14:03,839 --> 00:14:07,360
you could provide the scheduling hints

362
00:14:06,079 --> 00:14:09,359
here as well

363
00:14:07,360 --> 00:14:10,560
and if you wanted to create a secondary

364
00:14:09,360 --> 00:14:13,440
zone

365
00:14:10,560 --> 00:14:13,760
where we would pull information off a uh

366
00:14:13,440 --> 00:14:16,560
of

367
00:14:13,760 --> 00:14:18,880
your own dns server it'll be added here

368
00:14:16,560 --> 00:14:18,880
as well

369
00:14:21,120 --> 00:14:24,720
so this is probably more useful if you

370
00:14:23,279 --> 00:14:30,959
look at the slides later but

371
00:14:24,720 --> 00:14:33,199
the api is fairly self-explanatory um

372
00:14:30,959 --> 00:14:35,199
whatever your endpoint is slash zones

373
00:14:33,199 --> 00:14:39,279
lists all your zones for example

374
00:14:35,199 --> 00:14:41,920
um and we tried to be

375
00:14:39,279 --> 00:14:43,360
as rusty as possible so there is links

376
00:14:41,920 --> 00:14:46,800
to pretty much everything

377
00:14:43,360 --> 00:14:50,160
in each of the objects uh which makes it

378
00:14:46,800 --> 00:14:50,160
easier if you're programming against us

379
00:14:50,959 --> 00:14:55,439
um and then everything is nested so you

380
00:14:53,680 --> 00:14:57,120
have your zone

381
00:14:55,440 --> 00:14:58,959
its id followed by record sets would

382
00:14:57,120 --> 00:15:00,720
list all its record sets or

383
00:14:58,959 --> 00:15:02,880
record set slash the record set id will

384
00:15:00,720 --> 00:15:05,839
show the precise record

385
00:15:02,880 --> 00:15:05,839
that you're interested in

386
00:15:07,040 --> 00:15:11,279
it's just the example of the ui we have

387
00:15:09,040 --> 00:15:15,439
it's fairly simple

388
00:15:11,279 --> 00:15:18,240
um shows you a list allows you to

389
00:15:15,440 --> 00:15:19,279
see what the status is so as we as i

390
00:15:18,240 --> 00:15:23,040
said before it's a

391
00:15:19,279 --> 00:15:25,600
uh asynchronous api so if you if it

392
00:15:23,040 --> 00:15:27,040
knows it hasn't put the the customer

393
00:15:25,600 --> 00:15:29,519
facing dns servers

394
00:15:27,040 --> 00:15:31,360
haven't been updated correctly it'll

395
00:15:29,519 --> 00:15:33,360
show up

396
00:15:31,360 --> 00:15:36,639
here and the status is for example

397
00:15:33,360 --> 00:15:36,639
pending or if there's a problem was

398
00:15:38,839 --> 00:15:41,839
there

399
00:15:43,120 --> 00:15:47,759
so we allow you to set the pointer

400
00:15:46,959 --> 00:15:50,079
records

401
00:15:47,759 --> 00:15:51,920
uh in the ui as well you don't have to

402
00:15:50,079 --> 00:15:53,599
use the cli or rely on the order

403
00:15:51,920 --> 00:15:56,079
generated

404
00:15:53,600 --> 00:15:56,079
records

405
00:16:00,079 --> 00:16:03,680
and then as you're creating the floating

406
00:16:02,959 --> 00:16:08,479
ips

407
00:16:03,680 --> 00:16:11,920
you can also set reverse dns

408
00:16:08,480 --> 00:16:15,920
so in short why should you use

409
00:16:11,920 --> 00:16:18,719
a designate it's a real it's a real

410
00:16:15,920 --> 00:16:19,040
advantage if you're running a cloud with

411
00:16:18,720 --> 00:16:21,920
the

412
00:16:19,040 --> 00:16:23,439
support for allowing all of your users

413
00:16:21,920 --> 00:16:24,719
to manage their reverse dns without

414
00:16:23,440 --> 00:16:28,480
having to

415
00:16:24,720 --> 00:16:32,880
give them access to the full zone it's a

416
00:16:28,480 --> 00:16:36,399
it makes it much easier if

417
00:16:32,880 --> 00:16:38,720
having a multi-tenant dns api uh

418
00:16:36,399 --> 00:16:39,759
it's because it's it's relatively small

419
00:16:38,720 --> 00:16:41,839
and lightweight

420
00:16:39,759 --> 00:16:43,199
and you and the authorization service

421
00:16:41,839 --> 00:16:44,240
keystone is also quite small and

422
00:16:43,199 --> 00:16:47,680
lightweight

423
00:16:44,240 --> 00:16:48,320
if you just need dns in a multi-tenant

424
00:16:47,680 --> 00:16:51,279
way

425
00:16:48,320 --> 00:16:52,399
it's very easy to run and it allows you

426
00:16:51,279 --> 00:16:55,199
to

427
00:16:52,399 --> 00:16:56,959
see allows you to a service uh provide a

428
00:16:55,199 --> 00:17:00,079
service to all your users

429
00:16:56,959 --> 00:17:02,319
um as i said i run it i run

430
00:17:00,079 --> 00:17:04,480
just the keystone which is the

431
00:17:02,320 --> 00:17:07,839
authorization service and designate

432
00:17:04,480 --> 00:17:09,120
on a small arm box and

433
00:17:07,839 --> 00:17:11,039
i haven't had issues it's been running

434
00:17:09,119 --> 00:17:13,280
for a couple of years at this point

435
00:17:11,039 --> 00:17:14,480
i'm because we support so many dns

436
00:17:13,280 --> 00:17:18,079
servers

437
00:17:14,480 --> 00:17:20,079
and we allow you to

438
00:17:18,079 --> 00:17:21,359
start to manage those servers directly

439
00:17:20,079 --> 00:17:24,480
it means you can reuse

440
00:17:21,359 --> 00:17:26,319
existing dns infrastructure and

441
00:17:24,480 --> 00:17:28,319
i know a lot of people have pre-existing

442
00:17:26,319 --> 00:17:29,678
sets of servers around the companies

443
00:17:28,319 --> 00:17:31,600
and the thought of trying to recreate

444
00:17:29,679 --> 00:17:33,120
everything from scratch can be quite

445
00:17:31,600 --> 00:17:35,199
daunting

446
00:17:33,120 --> 00:17:37,199
so in the past it has allowed people to

447
00:17:35,200 --> 00:17:41,039
take their existing infrastructure

448
00:17:37,200 --> 00:17:41,039
and allow designate to manage some of it

449
00:17:44,080 --> 00:17:52,559
so this is the set of list of links

450
00:17:47,760 --> 00:17:55,039
uh the slides are there as well i

451
00:17:52,559 --> 00:17:56,720
designate the docs that have everything

452
00:17:55,039 --> 00:18:00,480
from the install guides

453
00:17:56,720 --> 00:18:05,440
if or ubuntu uh

454
00:18:00,480 --> 00:18:07,520
centos and su and souza linux

455
00:18:05,440 --> 00:18:08,799
the code is all here for the main

456
00:18:07,520 --> 00:18:12,000
service

457
00:18:08,799 --> 00:18:16,080
um we are in freenode uh

458
00:18:12,000 --> 00:18:19,200
openstack dns i'm mugsy in that channel

459
00:18:16,080 --> 00:18:21,918
i'm generally around european times

460
00:18:19,200 --> 00:18:23,120
and are more than willing to help anyone

461
00:18:21,919 --> 00:18:25,200
who has issues

462
00:18:23,120 --> 00:18:26,959
we we use the standard openstack mailing

463
00:18:25,200 --> 00:18:29,919
lists

464
00:18:26,960 --> 00:18:32,640
and yeah the slides so with that is

465
00:18:29,919 --> 00:18:32,640
there any questions

466
00:18:40,840 --> 00:18:43,840
nope

467
00:18:44,000 --> 00:18:48,080
uh so the question is does it work with

468
00:18:45,600 --> 00:18:50,240
carla ansible uh yes it does uh there's

469
00:18:48,080 --> 00:18:50,240
a

470
00:18:50,480 --> 00:18:54,640
it's not quite point of click uh there

471
00:18:53,360 --> 00:18:56,000
is a couple of extra steps you have to

472
00:18:54,640 --> 00:18:58,559
do but i've i've actually helped

473
00:18:56,000 --> 00:18:59,120
a few people install using call ansible

474
00:18:58,559 --> 00:19:00,480
and

475
00:18:59,120 --> 00:19:02,799
once once we get it up and running it

476
00:19:00,480 --> 00:19:02,799
was great

477
00:19:05,200 --> 00:19:11,840
any other questions go ahead

478
00:19:23,520 --> 00:19:27,679
cloud providers a lot of them use

479
00:19:24,720 --> 00:19:29,840
designate um

480
00:19:27,679 --> 00:19:32,240
azure doesn't we obviously we had our

481
00:19:29,840 --> 00:19:35,520
own infrastructure long before i joined

482
00:19:32,240 --> 00:19:37,360
uh azure i'm

483
00:19:35,520 --> 00:19:39,200
within all of the cloud providers have

484
00:19:37,360 --> 00:19:41,120
their own dns service that's kind of

485
00:19:39,200 --> 00:19:44,480
homegrown over the years

486
00:19:41,120 --> 00:19:46,000
um most of the the opposite distribution

487
00:19:44,480 --> 00:19:48,400
support designate

488
00:19:46,000 --> 00:19:50,080
um and a lot of the public cloud

489
00:19:48,400 --> 00:19:53,840
providers have it

490
00:19:50,080 --> 00:19:58,320
so the likes of for our city network

491
00:19:53,840 --> 00:19:58,320
will all have uh designate support

492
00:20:00,080 --> 00:20:03,760
we have 10 minutes left in this slot any

493
00:20:02,000 --> 00:20:07,840
other questions anything openstack

494
00:20:03,760 --> 00:20:07,840
graham is willing

495
00:20:19,039 --> 00:20:23,520
uh we can automatically create uh a

496
00:20:21,840 --> 00:20:25,439
records based off of an instance or a

497
00:20:23,520 --> 00:20:28,480
report being created in nova neutron

498
00:20:25,440 --> 00:20:30,559
does it create ptr records uh by default

499
00:20:28,480 --> 00:20:32,880
if you specify the dns name

500
00:20:30,559 --> 00:20:34,080
and dns domain yes it'll create the ptr

501
00:20:32,880 --> 00:20:37,919
record

502
00:20:34,080 --> 00:20:41,918
automatically um you can provision

503
00:20:37,919 --> 00:20:42,799
the floating ip and provide a ptr record

504
00:20:41,919 --> 00:20:44,880
later as well though

505
00:20:42,799 --> 00:20:49,840
if you want it doesn't have to be

506
00:20:44,880 --> 00:20:49,840
automatically provisioned

507
00:20:52,640 --> 00:20:56,000
uh the question is do we support dns sec

508
00:20:55,039 --> 00:20:58,720
uh right now

509
00:20:56,000 --> 00:20:59,520
no um it's been a bug bear of mine for a

510
00:20:58,720 --> 00:21:02,400
long time i

511
00:20:59,520 --> 00:21:03,679
i'm allergic to writing crypto code uh

512
00:21:02,400 --> 00:21:06,960
so

513
00:21:03,679 --> 00:21:08,640
there's been a debate about how to do it

514
00:21:06,960 --> 00:21:10,320
if people have ideas about how we can do

515
00:21:08,640 --> 00:21:12,799
it without

516
00:21:10,320 --> 00:21:14,960
re-implementing everything and managing

517
00:21:12,799 --> 00:21:18,480
and keeping keys in our own database

518
00:21:14,960 --> 00:21:20,240
i'd be delighted to talk but it's

519
00:21:18,480 --> 00:21:21,760
it's not super high and it's a lot of

520
00:21:20,240 --> 00:21:23,760
work for

521
00:21:21,760 --> 00:21:25,200
not necessarily a huge amount of payoff

522
00:21:23,760 --> 00:21:28,720
we have some power dns and bind

523
00:21:25,200 --> 00:21:28,720
developers in the room if you need any

524
00:21:29,200 --> 00:21:32,400
so have you found that supporting

525
00:21:30,480 --> 00:21:33,600
multiple name servers makes makes the

526
00:21:32,400 --> 00:21:37,760
coding harder

527
00:21:33,600 --> 00:21:39,918
uh yeah yeah yeah so a lot of the

528
00:21:37,760 --> 00:21:41,280
for bind and uh it's not that hard

529
00:21:39,919 --> 00:21:43,039
because

530
00:21:41,280 --> 00:21:45,200
they're both a fairly established apis

531
00:21:43,039 --> 00:21:47,760
for creating and managing

532
00:21:45,200 --> 00:21:49,120
zones it got a little harder with some

533
00:21:47,760 --> 00:21:50,559
of the things like not that required

534
00:21:49,120 --> 00:21:51,678
local commands to be run on the dns

535
00:21:50,559 --> 00:21:56,158
server

536
00:21:51,679 --> 00:21:59,760
um and parody notes before the api

537
00:21:56,159 --> 00:22:00,480
had uh in all honesty it was awful code

538
00:21:59,760 --> 00:22:03,919
we wrote to

539
00:22:00,480 --> 00:22:06,159
manage the uh creation deletion of zones

540
00:22:03,919 --> 00:22:10,480
but since the the api came in

541
00:22:06,159 --> 00:22:10,480
it's it's a rest call it's good to hear

542
00:22:10,840 --> 00:22:13,840
yeah

543
00:22:22,080 --> 00:22:26,799
yep so for one of the pools of my

544
00:22:26,080 --> 00:22:28,639
personal

545
00:22:26,799 --> 00:22:30,320
uh question can you run it all in one

546
00:22:28,640 --> 00:22:32,159
box yes so

547
00:22:30,320 --> 00:22:33,520
for one of the pools on my personal

548
00:22:32,159 --> 00:22:35,360
setup there's

549
00:22:33,520 --> 00:22:36,559
the entire openstack and the dns server

550
00:22:35,360 --> 00:22:38,719
on one box

551
00:22:36,559 --> 00:22:41,600
and it also has other pools that are

552
00:22:38,720 --> 00:22:43,360
remotely managed

553
00:22:41,600 --> 00:22:45,840
so yeah you can run everything on one

554
00:22:43,360 --> 00:22:47,678
and there's no issue

555
00:22:45,840 --> 00:22:50,158
is it useful to run all of openstack on

556
00:22:47,679 --> 00:22:50,159
one box

557
00:22:50,480 --> 00:22:53,600
i don't run all of openstack i run

558
00:22:52,159 --> 00:22:54,400
keystone and designate for my personal

559
00:22:53,600 --> 00:22:56,320
install

560
00:22:54,400 --> 00:22:58,640
i in general know it's not useful for an

561
00:22:56,320 --> 00:23:00,000
open second one box

562
00:22:58,640 --> 00:23:02,240
for testing yeah for testing and

563
00:23:00,000 --> 00:23:03,520
development is great

564
00:23:02,240 --> 00:23:05,200
you're not going to get a lot of value

565
00:23:03,520 --> 00:23:07,760
if you install all of openstack in one

566
00:23:05,200 --> 00:23:23,840
box and expect it to manage and host vms

567
00:23:07,760 --> 00:23:27,280
in a relatively stable manner

568
00:23:23,840 --> 00:23:30,720
pearl sdks payroll sdks

569
00:23:27,280 --> 00:23:33,760
are you going to do perl sdks uh

570
00:23:30,720 --> 00:23:34,640
if somebody who can write pearl is

571
00:23:33,760 --> 00:23:36,559
interested

572
00:23:34,640 --> 00:23:38,159
i honestly can't write pro so are you

573
00:23:36,559 --> 00:23:41,129
right pearl

574
00:23:38,159 --> 00:23:42,799
okay you have a volunteer great

575
00:23:41,130 --> 00:23:46,080
[Laughter]

576
00:23:42,799 --> 00:23:46,080
any other questions for graham

577
00:23:47,039 --> 00:23:51,840
thank you graeme thank you

578
00:23:53,120 --> 00:23:57,120
oh yeah we'll need that you can take a

579
00:23:59,480 --> 00:24:02,480
bottle

