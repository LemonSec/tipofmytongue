1
00:00:07,040 --> 00:00:11,040
okay

2
00:00:07,839 --> 00:00:14,080
hi is the sound okay okay

3
00:00:11,040 --> 00:00:16,239
cool so um

4
00:00:14,080 --> 00:00:17,600
i want to give a status update on the

5
00:00:16,239 --> 00:00:21,198
row

6
00:00:17,600 --> 00:00:24,880
um we kind of missed last year so

7
00:00:21,199 --> 00:00:27,359
we are really sorry about that but

8
00:00:24,880 --> 00:00:28,720
uh luckily it worked out this year even

9
00:00:27,359 --> 00:00:32,000
though we missed the

10
00:00:28,720 --> 00:00:35,600
you know cfp and everything so um

11
00:00:32,000 --> 00:00:37,440
yeah but yeah let's just well let me

12
00:00:35,600 --> 00:00:42,239
just start

13
00:00:37,440 --> 00:00:45,680
um that's still our goal

14
00:00:42,239 --> 00:00:46,160
like um i mean we are sure we can't

15
00:00:45,680 --> 00:00:50,879
really

16
00:00:46,160 --> 00:00:54,399
promise performance expectation users

17
00:00:50,879 --> 00:00:57,039
might have from a normal open source

18
00:00:54,399 --> 00:00:59,920
opengl driver but at least we we are

19
00:00:57,039 --> 00:01:02,000
really trying hard to make it reliable

20
00:00:59,920 --> 00:01:04,400
and we know that we have a lot of places

21
00:01:02,000 --> 00:01:07,280
where we still have a lot of issues

22
00:01:04,400 --> 00:01:07,760
especially about reliability but at

23
00:01:07,280 --> 00:01:11,680
least

24
00:01:07,760 --> 00:01:12,400
that's where we want to be in the future

25
00:01:11,680 --> 00:01:16,240
and

26
00:01:12,400 --> 00:01:19,920
um hopefully we get there

27
00:01:16,240 --> 00:01:22,399
at some point um

28
00:01:19,920 --> 00:01:23,920
so but what actually happened since you

29
00:01:22,400 --> 00:01:29,280
know the last time we

30
00:01:23,920 --> 00:01:29,280
gave this update and i guess the

31
00:01:30,000 --> 00:01:33,759
most important feature for newer systems

32
00:01:33,040 --> 00:01:36,640
is that we

33
00:01:33,759 --> 00:01:39,040
finally support mode setting on turing

34
00:01:36,640 --> 00:01:42,240
gpus

35
00:01:39,040 --> 00:01:44,000
so if you have a recent gpu there's a

36
00:01:42,240 --> 00:01:45,520
high transit

37
00:01:44,000 --> 00:01:48,159
you can use your displays with the

38
00:01:45,520 --> 00:01:50,240
nouveau driver um

39
00:01:48,159 --> 00:01:51,520
i think it's still missing for really

40
00:01:50,240 --> 00:01:54,880
new gpus like some

41
00:01:51,520 --> 00:01:58,079
newer chipsets came coming

42
00:01:54,880 --> 00:01:59,039
which were pub or released some months

43
00:01:58,079 --> 00:02:01,600
ago or something

44
00:01:59,040 --> 00:02:02,079
that might still be missing but at least

45
00:02:01,600 --> 00:02:03,759
you know

46
00:02:02,079 --> 00:02:06,719
for most of the journey gps it should be

47
00:02:03,759 --> 00:02:11,120
fine now um there was also some

48
00:02:06,719 --> 00:02:14,400
atomic mod setting support which is um

49
00:02:11,120 --> 00:02:16,400
essentially for user space

50
00:02:14,400 --> 00:02:17,520
if you know if you want to change the

51
00:02:16,400 --> 00:02:19,280
resolution

52
00:02:17,520 --> 00:02:20,879
but something happens like the cable is

53
00:02:19,280 --> 00:02:22,319
not reliable or something that the

54
00:02:20,879 --> 00:02:25,599
kernel can automatically

55
00:02:22,319 --> 00:02:28,720
detect certain problems with that

56
00:02:25,599 --> 00:02:30,160
and that you don't get to a state where

57
00:02:28,720 --> 00:02:32,879
you have a black screen

58
00:02:30,160 --> 00:02:35,280
so that's quite important i think there

59
00:02:32,879 --> 00:02:37,760
are a lot of

60
00:02:35,280 --> 00:02:38,319
x compositors which are buggy so we

61
00:02:37,760 --> 00:02:41,280
don't

62
00:02:38,319 --> 00:02:43,040
kind of disable it on the kernel side

63
00:02:41,280 --> 00:02:46,239
but

64
00:02:43,040 --> 00:02:48,079
hopefully we get there as well and lute

65
00:02:46,239 --> 00:02:49,200
was working on a lot of reverse prime

66
00:02:48,080 --> 00:02:53,280
improvements

67
00:02:49,200 --> 00:02:54,560
um it was like when i'm looking at this

68
00:02:53,280 --> 00:02:56,560
like two years ago or something there

69
00:02:54,560 --> 00:02:56,959
were a lot of issues with reverse prime

70
00:02:56,560 --> 00:03:01,040
like

71
00:02:56,959 --> 00:03:04,720
the hmi audio was not working or

72
00:03:01,040 --> 00:03:07,440
uh the gpu wasn't powered on anymore

73
00:03:04,720 --> 00:03:08,319
so there were a lot of random failures

74
00:03:07,440 --> 00:03:11,359
and

75
00:03:08,319 --> 00:03:14,079
loot did a good job to work

76
00:03:11,360 --> 00:03:14,640
on all of those and get it to a state

77
00:03:14,080 --> 00:03:17,280
where i

78
00:03:14,640 --> 00:03:18,079
think we can say it's good enough now

79
00:03:17,280 --> 00:03:21,760
and

80
00:03:18,080 --> 00:03:22,720
there shouldn't be many issues left

81
00:03:21,760 --> 00:03:27,440
anyway if you know

82
00:03:22,720 --> 00:03:27,440
of some just yes

83
00:03:27,840 --> 00:03:31,200
oh reverse prime is if you have a laptop

84
00:03:30,640 --> 00:03:33,760
and

85
00:03:31,200 --> 00:03:35,440
usually your this or your desktop is

86
00:03:33,760 --> 00:03:38,640
rendered on the intel gpu

87
00:03:35,440 --> 00:03:41,200
but some of the laptops have external

88
00:03:38,640 --> 00:03:42,958
display ports like hdmi or displayport

89
00:03:41,200 --> 00:03:46,238
via to the nvidia gpu

90
00:03:42,959 --> 00:03:49,280
ah so like reverse prime is kind of the

91
00:03:46,239 --> 00:03:51,599
x uh term for it

92
00:03:49,280 --> 00:03:53,120
so you kind of have to display it on the

93
00:03:51,599 --> 00:03:54,879
nvidia gpu and

94
00:03:53,120 --> 00:03:56,239
like copy the buffers and all that kind

95
00:03:54,879 --> 00:03:58,319
of stuff or maybe

96
00:03:56,239 --> 00:04:01,760
i don't know how it's in detail but yeah

97
00:03:58,319 --> 00:04:04,238
that's kind of the thing

98
00:04:01,760 --> 00:04:05,518
yeah optimus is the uh marketing term

99
00:04:04,239 --> 00:04:07,439
for it

100
00:04:05,519 --> 00:04:08,720
uh tied to nvidia i don't know how it's

101
00:04:07,439 --> 00:04:12,159
called on

102
00:04:08,720 --> 00:04:14,400
radeon gpus but yeah that's kind of the

103
00:04:12,159 --> 00:04:14,400
thing

104
00:04:17,199 --> 00:04:20,720
i was also working on having a near back

105
00:04:19,680 --> 00:04:24,400
end

106
00:04:20,720 --> 00:04:26,160
for nouveau so right now we can to the

107
00:04:24,400 --> 00:04:28,320
compared to the old one where we use

108
00:04:26,160 --> 00:04:31,120
tgsi for the

109
00:04:28,320 --> 00:04:31,680
shader compilation today we can also use

110
00:04:31,120 --> 00:04:35,280
near

111
00:04:31,680 --> 00:04:38,720
it's still turned off by default

112
00:04:35,280 --> 00:04:41,919
and we or at least i hope

113
00:04:38,720 --> 00:04:43,680
we can turn it on by default if it's

114
00:04:41,919 --> 00:04:45,120
reliable enough i know that there are

115
00:04:43,680 --> 00:04:48,240
some regressions

116
00:04:45,120 --> 00:04:51,440
but like supporting the is required

117
00:04:48,240 --> 00:04:52,960
like not technically but how

118
00:04:51,440 --> 00:04:54,719
we do stuff in miso right now it's kind

119
00:04:52,960 --> 00:04:58,320
of required for opencl

120
00:04:54,720 --> 00:04:59,840
for vulcan and for opengl 4.6

121
00:04:58,320 --> 00:05:01,520
and that's i think also one of the

122
00:04:59,840 --> 00:05:03,919
reasons why dnsi

123
00:05:01,520 --> 00:05:05,680
moved to nearby default because it gives

124
00:05:03,919 --> 00:05:09,680
them this previous support

125
00:05:05,680 --> 00:05:12,400
which is required for opengl 4.6

126
00:05:09,680 --> 00:05:13,600
it would be cool if people would start

127
00:05:12,400 --> 00:05:15,198
testing it

128
00:05:13,600 --> 00:05:16,800
like running it with games or their

129
00:05:15,199 --> 00:05:18,880
normal desktop or something

130
00:05:16,800 --> 00:05:19,840
and we have an environmental variable

131
00:05:18,880 --> 00:05:24,080
for that you can

132
00:05:19,840 --> 00:05:27,440
set and then nearest used

133
00:05:24,080 --> 00:05:30,159
um for my testing

134
00:05:27,440 --> 00:05:31,680
i've done is i usually saw higher

135
00:05:30,160 --> 00:05:35,680
performance than with the

136
00:05:31,680 --> 00:05:37,680
tgsi path but i didn't spend

137
00:05:35,680 --> 00:05:38,960
time on any kind of performance

138
00:05:37,680 --> 00:05:42,160
optimizations

139
00:05:38,960 --> 00:05:45,039
so if you test it and you see oh that's

140
00:05:42,160 --> 00:05:46,639
that one application is much slower than

141
00:05:45,039 --> 00:05:48,800
with the tgs ipark

142
00:05:46,639 --> 00:05:50,320
then i would be really interested in

143
00:05:48,800 --> 00:05:54,639
interested in

144
00:05:50,320 --> 00:05:58,400
knowing about this um

145
00:05:54,639 --> 00:06:00,720
right and also updates on opencl

146
00:05:58,400 --> 00:06:02,400
uh i was working on that quite a lot

147
00:06:00,720 --> 00:06:05,520
last year

148
00:06:02,400 --> 00:06:09,919
um the initial support was merged

149
00:06:05,520 --> 00:06:12,479
quite recently um and it's

150
00:06:09,919 --> 00:06:13,840
right now i think kind of supported on

151
00:06:12,479 --> 00:06:17,039
fermi and newer

152
00:06:13,840 --> 00:06:18,880
um i only really tested it on pascal so

153
00:06:17,039 --> 00:06:20,719
there might be a lot of issues on other

154
00:06:18,880 --> 00:06:23,039
chipsets as well

155
00:06:20,720 --> 00:06:25,440
i think pierre is working on enabling it

156
00:06:23,039 --> 00:06:26,960
on tesla as well which is the generation

157
00:06:25,440 --> 00:06:30,319
before fermi

158
00:06:26,960 --> 00:06:33,198
and if somebody really really wants to

159
00:06:30,319 --> 00:06:34,319
play around with that we also have an

160
00:06:33,199 --> 00:06:37,280
environmental

161
00:06:34,319 --> 00:06:37,600
variable to enable it as well i'm sure

162
00:06:37,280 --> 00:06:40,318
that

163
00:06:37,600 --> 00:06:41,440
none of the applications work right now

164
00:06:40,319 --> 00:06:43,600
um

165
00:06:41,440 --> 00:06:45,120
because like the shader the kernel

166
00:06:43,600 --> 00:06:48,400
compilation isn't really

167
00:06:45,120 --> 00:06:51,039
finished at this point but if

168
00:06:48,400 --> 00:06:51,520
anybody's interested in it and thinks

169
00:06:51,039 --> 00:06:54,000
yeah

170
00:06:51,520 --> 00:06:54,719
maybe i want to do some opencl driver

171
00:06:54,000 --> 00:06:57,520
stuff

172
00:06:54,720 --> 00:06:58,080
and there's this nice opencl conformance

173
00:06:57,520 --> 00:07:01,440
test

174
00:06:58,080 --> 00:07:06,560
suite which is testing

175
00:07:01,440 --> 00:07:06,560
most of the opencl features and

176
00:07:08,319 --> 00:07:11,840
yeah it's uh i would say it's much

177
00:07:10,960 --> 00:07:14,318
easier to fix

178
00:07:11,840 --> 00:07:16,400
those issues than for example jump into

179
00:07:14,319 --> 00:07:18,880
an opengl driver and figuring out what's

180
00:07:16,400 --> 00:07:18,880
wrong there

181
00:07:19,919 --> 00:07:24,960
because the runtime is much more way

182
00:07:22,800 --> 00:07:27,680
more simpler and it's

183
00:07:24,960 --> 00:07:31,840
more easy to follow what's actually

184
00:07:27,680 --> 00:07:31,840
going on there

185
00:07:32,720 --> 00:07:36,560
i kind of called staffing because you

186
00:07:34,960 --> 00:07:39,440
know as an open source project we don't

187
00:07:36,560 --> 00:07:42,560
really do staffing but

188
00:07:39,440 --> 00:07:44,639
i mean we have a few paid developers

189
00:07:42,560 --> 00:07:46,080
besides myself there's also been skaggs

190
00:07:44,639 --> 00:07:49,360
working

191
00:07:46,080 --> 00:07:52,719
for ratchet on the new driver full time

192
00:07:49,360 --> 00:07:54,639
and we also have uh for example

193
00:07:52,720 --> 00:07:57,599
loot which also part of the same team

194
00:07:54,639 --> 00:08:00,720
that's inside red hat working a lot of

195
00:07:57,599 --> 00:08:03,440
fixing mostly display related nouveau

196
00:08:00,720 --> 00:08:03,440
issues as well

197
00:08:05,759 --> 00:08:11,680
i'm also how do i phrase it

198
00:08:09,840 --> 00:08:13,758
in the same team but i can't really

199
00:08:11,680 --> 00:08:16,080
spend that much time on the actual

200
00:08:13,759 --> 00:08:20,080
issues i would like to work on

201
00:08:16,080 --> 00:08:22,479
but uh i mean it's still like

202
00:08:20,080 --> 00:08:23,120
paid developers and we also have an

203
00:08:22,479 --> 00:08:25,680
intern

204
00:08:23,120 --> 00:08:27,680
at red hat which is right now working on

205
00:08:25,680 --> 00:08:32,799
the new shader cache

206
00:08:27,680 --> 00:08:35,279
which kind of helps with

207
00:08:32,799 --> 00:08:38,079
especially loading times of games and so

208
00:08:35,279 --> 00:08:41,279
on and i think we did some testing we

209
00:08:38,080 --> 00:08:44,720
saw improve like speed ups of three to

210
00:08:41,279 --> 00:08:47,360
four times faster um

211
00:08:44,720 --> 00:08:48,959
over like shadow compilation because we

212
00:08:47,360 --> 00:08:51,600
can skip a lot of that

213
00:08:48,959 --> 00:08:53,518
in this area i don't know how that how

214
00:08:51,600 --> 00:08:56,880
much relevant it's for games or

215
00:08:53,519 --> 00:08:58,640
something but i hope um that at least

216
00:08:56,880 --> 00:09:00,720
some games needing like four or five

217
00:08:58,640 --> 00:09:02,959
minutes won't take as long

218
00:09:00,720 --> 00:09:02,959
yes

219
00:09:05,600 --> 00:09:14,320
i will come to that later

220
00:09:09,680 --> 00:09:16,399
um oh yeah it was asked if there's

221
00:09:14,320 --> 00:09:19,600
anybody in nvidia working on the world

222
00:09:16,399 --> 00:09:21,200
um yeah i will never nvidia will be a

223
00:09:19,600 --> 00:09:24,640
topic for later

224
00:09:21,200 --> 00:09:26,720
um yeah so we have also community

225
00:09:24,640 --> 00:09:30,160
members working on a nobel driver

226
00:09:26,720 --> 00:09:30,720
uh i think the most present one is ilya

227
00:09:30,160 --> 00:09:33,839
which is

228
00:09:30,720 --> 00:09:36,399
doing a lot of well

229
00:09:33,839 --> 00:09:38,640
maybe not a lot but he's doing quite

230
00:09:36,399 --> 00:09:38,640
some

231
00:09:38,720 --> 00:09:43,279
opengl stuff he's implementing some new

232
00:09:41,120 --> 00:09:45,600
extensions

233
00:09:43,279 --> 00:09:47,439
fixing random issues he's also working

234
00:09:45,600 --> 00:09:49,680
on some display related stuff

235
00:09:47,440 --> 00:09:50,640
but yeah i mean big thanks to him

236
00:09:49,680 --> 00:09:54,239
because he's been

237
00:09:50,640 --> 00:09:57,920
uh like still

238
00:09:54,240 --> 00:10:05,839
working on innovate drivers uh driver

239
00:09:57,920 --> 00:10:05,839
um what's kind of

240
00:10:08,880 --> 00:10:12,399
quite a few of developers two or three

241
00:10:11,279 --> 00:10:15,839
years ago

242
00:10:12,399 --> 00:10:18,160
most of them essentially moved on

243
00:10:15,839 --> 00:10:20,480
either by being hired by other companies

244
00:10:18,160 --> 00:10:23,120
and working in other drivers now

245
00:10:20,480 --> 00:10:25,360
or maybe just lost interest or something

246
00:10:23,120 --> 00:10:28,480
right which

247
00:10:25,360 --> 00:10:31,440
which makes it really hard for us

248
00:10:28,480 --> 00:10:32,000
right now because we have a lot of

249
00:10:31,440 --> 00:10:34,000
issues to

250
00:10:32,000 --> 00:10:35,839
work on or for example also want to

251
00:10:34,000 --> 00:10:38,720
implement a vulcan driver

252
00:10:35,839 --> 00:10:40,320
but really really don't have time for

253
00:10:38,720 --> 00:10:44,240
anything

254
00:10:40,320 --> 00:10:44,240
big anymore essentially

255
00:10:44,320 --> 00:10:48,480
and um i mean there are random

256
00:10:47,120 --> 00:10:51,120
contributions from

257
00:10:48,480 --> 00:10:52,320
random developers doing some stuff but

258
00:10:51,120 --> 00:10:53,680
it's

259
00:10:52,320 --> 00:10:55,839
never something where i would say oh

260
00:10:53,680 --> 00:10:57,040
yeah this really stands out or there is

261
00:10:55,839 --> 00:10:59,920
this new guy

262
00:10:57,040 --> 00:11:00,959
putting a lot of work a lot of time into

263
00:10:59,920 --> 00:11:03,199
it so

264
00:11:00,959 --> 00:11:03,199
um

265
00:11:04,800 --> 00:11:10,560
yeah it would be nice if i could kind of

266
00:11:08,240 --> 00:11:12,480
get more people interested into the

267
00:11:10,560 --> 00:11:13,599
project i know that it's difficult to

268
00:11:12,480 --> 00:11:15,760
work with

269
00:11:13,600 --> 00:11:20,000
and i know that a lot of people are kind

270
00:11:15,760 --> 00:11:20,000
of feared about doing hardware stuff

271
00:11:21,200 --> 00:11:24,000
but i

272
00:11:24,240 --> 00:11:31,519
i think if one is interested enough

273
00:11:27,920 --> 00:11:33,760
they are able to work on that kind of

274
00:11:31,519 --> 00:11:36,079
like for myself before i actually

275
00:11:33,760 --> 00:11:38,160
started to work on nuvo i was a java

276
00:11:36,079 --> 00:11:39,439
back-end developer so i really did

277
00:11:38,160 --> 00:11:40,959
something completely different

278
00:11:39,440 --> 00:11:42,880
i had no experience in hardware

279
00:11:40,959 --> 00:11:45,359
programming at all

280
00:11:42,880 --> 00:11:46,880
and i kind of just jumped into the

281
00:11:45,360 --> 00:11:48,320
project because i was thinking yeah i

282
00:11:46,880 --> 00:11:50,320
have this nvidia gpu

283
00:11:48,320 --> 00:11:52,079
and i really want to have an open source

284
00:11:50,320 --> 00:11:56,000
driver for that and there are issues

285
00:11:52,079 --> 00:11:56,000
so i just started to work on that

286
00:12:19,839 --> 00:12:23,440
yeah i mean yes martin is right there a

287
00:12:23,040 --> 00:12:26,719
lot of

288
00:12:23,440 --> 00:12:28,800
low hanging fruits uh i have a

289
00:12:26,720 --> 00:12:30,880
slide later on where i kind of list some

290
00:12:28,800 --> 00:12:34,719
tasks people could work on

291
00:12:30,880 --> 00:12:35,680
but um yeah i i want to talk about this

292
00:12:34,720 --> 00:12:38,880
later

293
00:12:35,680 --> 00:12:42,800
um what's also interesting is

294
00:12:38,880 --> 00:12:46,560
um like the working together with

295
00:12:42,800 --> 00:12:49,760
nvidia um negative stuff

296
00:12:46,560 --> 00:12:51,199
first and i think that's the most

297
00:12:49,760 --> 00:12:52,720
annoying part

298
00:12:51,200 --> 00:12:54,720
most of the annoying thing for us right

299
00:12:52,720 --> 00:12:56,880
now is that getting

300
00:12:54,720 --> 00:12:58,560
firmware because they it has to be

301
00:12:56,880 --> 00:13:00,240
signed otherwise the hardware doesn't

302
00:12:58,560 --> 00:13:03,680
execute it

303
00:13:00,240 --> 00:13:06,639
and we needed to kind of access some

304
00:13:03,680 --> 00:13:08,560
states on the gpu we are not allowed

305
00:13:06,639 --> 00:13:12,079
with unsigned firmware

306
00:13:08,560 --> 00:13:15,439
and it's required for example for opengl

307
00:13:12,079 --> 00:13:17,680
and what's kind of

308
00:13:15,440 --> 00:13:19,360
what we would like to have is that if

309
00:13:17,680 --> 00:13:22,638
new hardware is released

310
00:13:19,360 --> 00:13:26,720
that we get on the same day the hardware

311
00:13:22,639 --> 00:13:30,320
the firmware for using those gpus

312
00:13:26,720 --> 00:13:33,440
i don't really have numbers on how

313
00:13:30,320 --> 00:13:34,560
long it takes in average but i think we

314
00:13:33,440 --> 00:13:37,040
had a situation where it

315
00:13:34,560 --> 00:13:39,040
took around one and a half year for some

316
00:13:37,040 --> 00:13:41,439
generation but

317
00:13:39,040 --> 00:13:43,439
might be less might be more i i really

318
00:13:41,440 --> 00:13:47,600
didn't look it up so i don't want to

319
00:13:43,440 --> 00:13:50,240
make a concrete statement there

320
00:13:47,600 --> 00:13:52,560
what's also annoying is and it's true

321
00:13:50,240 --> 00:13:55,839
for power management as well

322
00:13:52,560 --> 00:13:59,040
is we also need special firmware um

323
00:13:55,839 --> 00:14:02,079
the more the most annoying

324
00:13:59,040 --> 00:14:03,199
thing is on the second generation on

325
00:14:02,079 --> 00:14:07,359
maxwell we

326
00:14:03,199 --> 00:14:10,479
could we clock the gpu and we know

327
00:14:07,360 --> 00:14:13,600
enough to do it but

328
00:14:10,480 --> 00:14:14,720
what needs sine firmware is controlling

329
00:14:13,600 --> 00:14:18,000
the fans

330
00:14:14,720 --> 00:14:20,399
so you can have much high speed but

331
00:14:18,000 --> 00:14:22,959
the gpu would overheat because we can't

332
00:14:20,399 --> 00:14:26,480
spin uh make the fans faster

333
00:14:22,959 --> 00:14:28,959
and that's annoying because i mean it's

334
00:14:26,480 --> 00:14:30,000
we are so close but we still can't do it

335
00:14:28,959 --> 00:14:32,399
and it's even worse

336
00:14:30,000 --> 00:14:33,680
on newer generations where even bits of

337
00:14:32,399 --> 00:14:37,199
the clocking itself

338
00:14:33,680 --> 00:14:39,599
like changing the voltage is essentially

339
00:14:37,199 --> 00:14:39,599
locked

340
00:14:40,000 --> 00:14:46,880
unless you have signed firmware and

341
00:14:43,199 --> 00:14:48,319
um there were thoughts about doing the

342
00:14:46,880 --> 00:14:49,839
same we do also for the video

343
00:14:48,320 --> 00:14:52,320
acceleration where you essentially

344
00:14:49,839 --> 00:14:55,600
extract it from the nvidia driver

345
00:14:52,320 --> 00:14:56,720
but it's kind of really annoying because

346
00:14:55,600 --> 00:14:58,880
that would mean

347
00:14:56,720 --> 00:15:00,959
yeah distributions or user have to

348
00:14:58,880 --> 00:15:03,040
manually execute the script every time

349
00:15:00,959 --> 00:15:05,119
they install their distribution

350
00:15:03,040 --> 00:15:07,199
then it has to be extracted and then we

351
00:15:05,120 --> 00:15:08,880
have to reverse engineer the interfaces

352
00:15:07,199 --> 00:15:10,399
and those changed essentially every

353
00:15:08,880 --> 00:15:14,079
driver version

354
00:15:10,399 --> 00:15:14,880
so it would be super annoying and a lot

355
00:15:14,079 --> 00:15:17,920
of

356
00:15:14,880 --> 00:15:21,040
work we also don't have time for

357
00:15:17,920 --> 00:15:23,680
so yeah

358
00:15:21,040 --> 00:15:25,599
but yeah also good things uh in regards

359
00:15:23,680 --> 00:15:28,000
to nvidia is that

360
00:15:25,600 --> 00:15:30,959
overall at least myself i get the

361
00:15:28,000 --> 00:15:33,360
feeling that it's improving over time

362
00:15:30,959 --> 00:15:34,479
it might be not that obvious to others

363
00:15:33,360 --> 00:15:37,680
because we also

364
00:15:34,480 --> 00:15:37,680
like um

365
00:15:38,839 --> 00:15:41,759
it's i have to be a little bit careful

366
00:15:41,440 --> 00:15:43,519
what

367
00:15:41,759 --> 00:15:45,920
i'm talking about because we have some

368
00:15:43,519 --> 00:15:48,000
partnership with nvidia from wether

369
00:15:45,920 --> 00:15:50,319
perspective so i

370
00:15:48,000 --> 00:15:51,199
um so i know a little bit more but i

371
00:15:50,320 --> 00:15:54,399
can't really tell

372
00:15:51,199 --> 00:15:58,399
about much right um but at least

373
00:15:54,399 --> 00:16:01,199
what we're working on with nvidia is

374
00:15:58,399 --> 00:16:04,160
getting a documentation out and they

375
00:16:01,199 --> 00:16:07,040
actually have a git repository on github

376
00:16:04,160 --> 00:16:08,560
and you can essentially see the commit

377
00:16:07,040 --> 00:16:11,199
history and there is

378
00:16:08,560 --> 00:16:12,319
some useful stuff going in there

379
00:16:11,199 --> 00:16:14,959
especially

380
00:16:12,320 --> 00:16:17,440
documentation for the displays uh

381
00:16:14,959 --> 00:16:19,758
interfaces so what

382
00:16:17,440 --> 00:16:20,839
you know how do we program the gpu to

383
00:16:19,759 --> 00:16:24,320
drive the display

384
00:16:20,839 --> 00:16:27,680
and what we do what

385
00:16:24,320 --> 00:16:29,600
how to program the mmu as well like for

386
00:16:27,680 --> 00:16:31,120
doing memory related stuff so that's

387
00:16:29,600 --> 00:16:34,639
super helpful

388
00:16:31,120 --> 00:16:36,560
and i hope that there will be more

389
00:16:34,639 --> 00:16:38,720
useful documentation also for different

390
00:16:36,560 --> 00:16:42,959
areas but we just have to

391
00:16:38,720 --> 00:16:46,880
wait and see what's happening there um

392
00:16:42,959 --> 00:16:50,479
terry is employed by

393
00:16:46,880 --> 00:16:53,600
nvidia and he also works on

394
00:16:50,480 --> 00:16:56,160
techra code mostly i mean he's doing

395
00:16:53,600 --> 00:16:56,880
uh upstreaming of a lot of tech vibrates

396
00:16:56,160 --> 00:16:59,439
for the

397
00:16:56,880 --> 00:17:00,639
core kernel like just using the tacbow

398
00:16:59,440 --> 00:17:03,440
devices and it's

399
00:17:00,639 --> 00:17:04,000
not really not that much related but

400
00:17:03,440 --> 00:17:07,120
there's also

401
00:17:04,000 --> 00:17:10,799
some noble contributions to

402
00:17:07,119 --> 00:17:14,000
fixing random issues or having this

403
00:17:10,799 --> 00:17:17,599
techra gallium driver as well so

404
00:17:14,000 --> 00:17:19,679
that's also cool and it's

405
00:17:17,599 --> 00:17:21,760
really good to see that there's at least

406
00:17:19,679 --> 00:17:22,799
some people at nba really dedicated to

407
00:17:21,760 --> 00:17:25,199
this

408
00:17:22,799 --> 00:17:26,959
um also there is on the mailing list if

409
00:17:25,199 --> 00:17:30,400
you scroll through it or

410
00:17:26,959 --> 00:17:32,480
search for people with an nvidia email

411
00:17:30,400 --> 00:17:33,840
address there are some patches from

412
00:17:32,480 --> 00:17:36,720
nvidia people

413
00:17:33,840 --> 00:17:39,918
so which is also quite cool and i hope

414
00:17:36,720 --> 00:17:39,919
there will be more in the future

415
00:17:40,960 --> 00:17:44,320
um some stuff we are currently working

416
00:17:43,919 --> 00:17:49,280
on

417
00:17:44,320 --> 00:17:53,120
is um the biggest thing most likely

418
00:17:49,280 --> 00:17:55,918
getting opengl 4.4 and 4.5

419
00:17:53,120 --> 00:17:57,039
ready there's this kind of requirement

420
00:17:55,919 --> 00:18:00,480
to pass the

421
00:17:57,039 --> 00:18:03,440
official chronos conformance test rate

422
00:18:00,480 --> 00:18:04,799
i think on some gpus we are at the stage

423
00:18:03,440 --> 00:18:08,240
where we pass

424
00:18:04,799 --> 00:18:10,480
every test but

425
00:18:08,240 --> 00:18:12,320
there are random failures if you won the

426
00:18:10,480 --> 00:18:14,480
full thing because the full thing does

427
00:18:12,320 --> 00:18:16,480
like i don't know 30 iterations of the

428
00:18:14,480 --> 00:18:19,039
test with different parameters

429
00:18:16,480 --> 00:18:21,600
and last time i did this was like the

430
00:18:19,039 --> 00:18:23,440
first failure was after 10 hours

431
00:18:21,600 --> 00:18:25,120
of running it and it's like super

432
00:18:23,440 --> 00:18:28,400
painful to debug and it's

433
00:18:25,120 --> 00:18:30,959
probably some random issue of

434
00:18:28,400 --> 00:18:31,440
you know in its not initialized memory

435
00:18:30,960 --> 00:18:33,440
or

436
00:18:31,440 --> 00:18:35,039
something random we have no idea and

437
00:18:33,440 --> 00:18:36,960
then also

438
00:18:35,039 --> 00:18:38,400
i'm not really in the mood of having to

439
00:18:36,960 --> 00:18:42,160
wait for 10 hours to

440
00:18:38,400 --> 00:18:44,480
hit a bug to just to debug it so

441
00:18:42,160 --> 00:18:46,000
that's a little bit annoying but we are

442
00:18:44,480 --> 00:18:48,160
getting there and

443
00:18:46,000 --> 00:18:50,640
media was also fixing a lot of issues

444
00:18:48,160 --> 00:18:54,559
and myself as well so

445
00:18:50,640 --> 00:18:57,760
hopefully soon as we get official opengl

446
00:18:54,559 --> 00:19:00,320
4.5 support

447
00:18:57,760 --> 00:19:02,000
we also would like to improve the

448
00:19:00,320 --> 00:19:05,439
performance there are

449
00:19:02,000 --> 00:19:08,480
sometimes random shader optimizations

450
00:19:05,440 --> 00:19:10,480
landing in the tree

451
00:19:08,480 --> 00:19:13,280
for example also the near work could

452
00:19:10,480 --> 00:19:17,039
lead to improved performance

453
00:19:13,280 --> 00:19:19,039
um but sadly we really can't you know do

454
00:19:17,039 --> 00:19:20,640
really really big reworks to improve the

455
00:19:19,039 --> 00:19:23,679
programs in a

456
00:19:20,640 --> 00:19:24,000
way like the intel guys or radeon guys

457
00:19:23,679 --> 00:19:25,840
are doing

458
00:19:24,000 --> 00:19:27,760
where they essentially use different

459
00:19:25,840 --> 00:19:32,000
interfaces of visa or

460
00:19:27,760 --> 00:19:32,000
we work certain other areas

461
00:19:32,720 --> 00:19:35,919
building a ci system

462
00:19:36,559 --> 00:19:40,160
we would also have something wired up to

463
00:19:39,200 --> 00:19:43,520
the

464
00:19:40,160 --> 00:19:46,400
free joystock gitlab ci system

465
00:19:43,520 --> 00:19:49,918
i don't know if any like if all also you

466
00:19:46,400 --> 00:19:52,480
heard about this but right now we have a

467
00:19:49,919 --> 00:19:53,360
ci pipeline on the git repository

468
00:19:52,480 --> 00:19:56,880
whenever

469
00:19:53,360 --> 00:20:00,000
somebody opens an mr or somebody pushes

470
00:19:56,880 --> 00:20:02,720
to the master branch that we have this

471
00:20:00,000 --> 00:20:03,520
software and hardware pipeline testing

472
00:20:02,720 --> 00:20:06,480
if

473
00:20:03,520 --> 00:20:08,639
comments require something so we do test

474
00:20:06,480 --> 00:20:11,120
the software vendors but there are also

475
00:20:08,640 --> 00:20:12,559
instances really testing it on hardware

476
00:20:11,120 --> 00:20:14,479
and i would kind of

477
00:20:12,559 --> 00:20:16,799
want to have the same phone number as

478
00:20:14,480 --> 00:20:16,799
well

479
00:20:17,360 --> 00:20:21,120
i kind of have to see like how much time

480
00:20:19,120 --> 00:20:21,678
it consumes because maintaining such a

481
00:20:21,120 --> 00:20:25,600
system

482
00:20:21,679 --> 00:20:29,440
can be very time consuming but

483
00:20:25,600 --> 00:20:31,760
let's see how that goes um right opencl

484
00:20:29,440 --> 00:20:35,840
support

485
00:20:31,760 --> 00:20:35,840
it's also what we are still working on

486
00:20:36,720 --> 00:20:43,520
and i hope

487
00:20:40,240 --> 00:20:46,480
i will be done with it

488
00:20:43,520 --> 00:20:47,918
soonish there are a few shade uh kernel

489
00:20:46,480 --> 00:20:50,400
compilation stuff we still have to

490
00:20:47,919 --> 00:20:53,520
figure out

491
00:20:50,400 --> 00:20:56,880
but yeah

492
00:20:53,520 --> 00:20:59,200
and what we also right now working on is

493
00:20:56,880 --> 00:20:59,200
getting

494
00:21:00,480 --> 00:21:03,600
getting opengl support for vulture and

495
00:21:02,559 --> 00:21:06,320
touring

496
00:21:03,600 --> 00:21:08,959
um walter isn't really relevant to any

497
00:21:06,320 --> 00:21:11,600
users because i don't think anybody has

498
00:21:08,960 --> 00:21:13,840
this super expensive volatile gpu but

499
00:21:11,600 --> 00:21:16,480
it's kind of similar to queueing so

500
00:21:13,840 --> 00:21:18,720
it's essentially the same work and once

501
00:21:16,480 --> 00:21:18,720
we

502
00:21:19,360 --> 00:21:25,039
get the firmware of auto acceleration

503
00:21:22,000 --> 00:21:25,039
for those as well

504
00:21:26,559 --> 00:21:33,840
we want to have this

505
00:21:30,880 --> 00:21:34,799
be done inside meter as well so people

506
00:21:33,840 --> 00:21:37,360
can

507
00:21:34,799 --> 00:21:40,158
users can finally use opengl on turing

508
00:21:37,360 --> 00:21:40,158
gpus as well

509
00:21:43,600 --> 00:21:46,719
important things we really want to fix

510
00:21:45,919 --> 00:21:50,400
is

511
00:21:46,720 --> 00:21:52,480
i think the most prominent issue is the

512
00:21:50,400 --> 00:21:55,200
one-time power management issue

513
00:21:52,480 --> 00:21:56,400
um there are a lot of laptops where you

514
00:21:55,200 --> 00:21:59,520
have an

515
00:21:56,400 --> 00:22:03,280
nvidia gpu and when we turn it off

516
00:21:59,520 --> 00:22:07,600
then it fails to turn on and usually it

517
00:22:03,280 --> 00:22:10,639
leads to the system crashing

518
00:22:07,600 --> 00:22:12,799
or people not being able to put the

519
00:22:10,640 --> 00:22:14,320
linux installer and then they have to

520
00:22:12,799 --> 00:22:15,918
disable the runtime power management

521
00:22:14,320 --> 00:22:17,918
stuff

522
00:22:15,919 --> 00:22:20,320
what's kind of annoying about this issue

523
00:22:17,919 --> 00:22:21,600
is that i have no idea what's wrong

524
00:22:20,320 --> 00:22:26,158
there

525
00:22:21,600 --> 00:22:30,399
and nobody else was able to help as well

526
00:22:26,159 --> 00:22:32,640
so we were talking i was talking up

527
00:22:30,400 --> 00:22:35,280
with upstream developers about this

528
00:22:32,640 --> 00:22:38,840
issue and there was no

529
00:22:35,280 --> 00:22:41,760
real conclusion on that either

530
00:22:38,840 --> 00:22:43,678
um we also have no idea if it's a driver

531
00:22:41,760 --> 00:22:48,080
bug inside novo or maybe it's a

532
00:22:43,679 --> 00:22:50,960
hardware bark or maybe it's um

533
00:22:48,080 --> 00:22:52,799
it's a kernel bug what's kind of

534
00:22:50,960 --> 00:22:55,200
interesting that it only happens with a

535
00:22:52,799 --> 00:22:58,320
certain intel bridge controller

536
00:22:55,200 --> 00:23:00,880
and not with any else so maybe it's a

537
00:22:58,320 --> 00:23:02,960
hardware block but

538
00:23:00,880 --> 00:23:04,559
the biggest problem is just that the

539
00:23:02,960 --> 00:23:07,360
firmware code involved with

540
00:23:04,559 --> 00:23:08,000
turning off the gpu is accessing

541
00:23:07,360 --> 00:23:10,479
undocumented

542
00:23:08,000 --> 00:23:11,679
registers so we don't even know if what

543
00:23:10,480 --> 00:23:14,960
we are doing is

544
00:23:11,679 --> 00:23:17,760
even correct or maybe we have to do some

545
00:23:14,960 --> 00:23:19,919
things before doing so but there's also

546
00:23:17,760 --> 00:23:22,480
no public documentation on that so

547
00:23:19,919 --> 00:23:23,440
that's super annoying to fix is it

548
00:23:22,480 --> 00:23:27,039
coming up from

549
00:23:23,440 --> 00:23:29,360
nvidia some serious help

550
00:23:27,039 --> 00:23:30,799
uh excuse me is some serious help in

551
00:23:29,360 --> 00:23:33,520
that direction

552
00:23:30,799 --> 00:23:34,879
um so the question is if there's any

553
00:23:33,520 --> 00:23:38,240
help from nvidia from that

554
00:23:34,880 --> 00:23:38,240
direction um

555
00:23:40,000 --> 00:23:44,480
kind of kind of i can't confuse this

556
00:23:42,799 --> 00:23:47,200
with no real

557
00:23:44,480 --> 00:23:48,880
information no there's not anything

558
00:23:47,200 --> 00:23:52,159
useful coming out what i

559
00:23:48,880 --> 00:23:54,559
kind of hoped what would happen because

560
00:23:52,159 --> 00:23:57,520
the official nvidia driver supports this

561
00:23:54,559 --> 00:23:58,080
on the latest driver for turing gpus as

562
00:23:57,520 --> 00:24:00,480
well

563
00:23:58,080 --> 00:24:02,000
so they they have no support for turning

564
00:24:00,480 --> 00:24:05,600
often on the gpu

565
00:24:02,000 --> 00:24:06,799
but if we do it on turing with novo it

566
00:24:05,600 --> 00:24:09,439
works

567
00:24:06,799 --> 00:24:11,440
yeah so i can't really say maybe like i

568
00:24:09,440 --> 00:24:13,279
would like to reverse engineer it with

569
00:24:11,440 --> 00:24:15,600
older gpus but if the driver doesn't

570
00:24:13,279 --> 00:24:18,320
support it i can't do it as well

571
00:24:15,600 --> 00:24:20,320
and i mean we i try to request

572
00:24:18,320 --> 00:24:22,559
information from nvidia on this but

573
00:24:20,320 --> 00:24:22,559
they

574
00:24:24,000 --> 00:24:27,919
ah i i really don't know i mean i i

575
00:24:26,799 --> 00:24:33,840
didn't get anything

576
00:24:27,919 --> 00:24:33,840
useful let's put it this way

577
00:24:40,000 --> 00:24:46,480
so uh just comment on the question

578
00:24:43,360 --> 00:24:49,199
it does doesn't this is similar because

579
00:24:46,480 --> 00:24:49,200
this issue happens

580
00:24:49,840 --> 00:24:53,199
so the question kind of was that a

581
00:24:52,400 --> 00:24:55,279
similar thing

582
00:24:53,200 --> 00:24:56,480
happens with device password as well and

583
00:24:55,279 --> 00:24:59,600
if

584
00:24:56,480 --> 00:25:03,039
um like it's

585
00:24:59,600 --> 00:25:05,120
kind of related or not um

586
00:25:03,039 --> 00:25:06,799
now it's a different thing and it's

587
00:25:05,120 --> 00:25:08,639
totally unrelated

588
00:25:06,799 --> 00:25:09,840
um the runtime power management is

589
00:25:08,640 --> 00:25:11,760
usually something which is only

590
00:25:09,840 --> 00:25:15,360
implemented in laptop firmware

591
00:25:11,760 --> 00:25:18,720
so it's really a firmware level feature

592
00:25:15,360 --> 00:25:21,439
of cutting the power on the pcie device

593
00:25:18,720 --> 00:25:22,640
i i'm aware of a few issues with device

594
00:25:21,440 --> 00:25:26,720
passthrough

595
00:25:22,640 --> 00:25:26,720
yeah but no it's a different thing

596
00:25:27,440 --> 00:25:31,760
what might also be relevant in the

597
00:25:29,200 --> 00:25:34,480
future is that right now devices are not

598
00:25:31,760 --> 00:25:36,640
hot unpluggable um this is mostly

599
00:25:34,480 --> 00:25:38,480
relevant for egbu cases where

600
00:25:36,640 --> 00:25:39,840
users have their case and they are

601
00:25:38,480 --> 00:25:41,440
unplugging the device and then the

602
00:25:39,840 --> 00:25:44,879
kernel just crashes

603
00:25:41,440 --> 00:25:46,240
right now so i noticed that on a few

604
00:25:44,880 --> 00:25:49,039
generations

605
00:25:46,240 --> 00:25:50,240
it doesn't crash but user space is still

606
00:25:49,039 --> 00:25:53,919
screwed up

607
00:25:50,240 --> 00:25:56,000
um the most annoying like it's

608
00:25:53,919 --> 00:25:57,600
it's one of the bigger rework we would

609
00:25:56,000 --> 00:25:58,480
like to do because it essentially

610
00:25:57,600 --> 00:26:01,120
touches

611
00:25:58,480 --> 00:26:02,320
all of the driver because at any point

612
00:26:01,120 --> 00:26:04,639
the device can just

613
00:26:02,320 --> 00:26:06,320
vanish and you kind of have to deal with

614
00:26:04,640 --> 00:26:08,960
it in the kernel driver

615
00:26:06,320 --> 00:26:10,399
and the you know kernel drivers for gpus

616
00:26:08,960 --> 00:26:13,440
are quite huge

617
00:26:10,400 --> 00:26:15,840
and if you have this assumption that

618
00:26:13,440 --> 00:26:18,000
like if you if you lose the assumption

619
00:26:15,840 --> 00:26:21,120
of yes my device is always

620
00:26:18,000 --> 00:26:23,600
there a lot of

621
00:26:21,120 --> 00:26:24,639
things you can't really rely on anymore

622
00:26:23,600 --> 00:26:27,039
because right now

623
00:26:24,640 --> 00:26:28,000
if there is uh if you want to access

624
00:26:27,039 --> 00:26:30,799
device memory

625
00:26:28,000 --> 00:26:32,960
we just do it right there's no check for

626
00:26:30,799 --> 00:26:36,240
is the device still there or not

627
00:26:32,960 --> 00:26:36,240
um so yeah that

628
00:26:37,520 --> 00:26:43,120
it's a little bit bigger rework but uh

629
00:26:40,799 --> 00:26:45,520
if somebody's interested in fixing this

630
00:26:43,120 --> 00:26:47,840
that the biggest advantage is that

631
00:26:45,520 --> 00:26:48,080
there's no hardware knowledge required

632
00:26:47,840 --> 00:26:50,799
at

633
00:26:48,080 --> 00:26:52,480
all and essentially just you know

634
00:26:50,799 --> 00:26:53,120
unplugging it and you see this kernel

635
00:26:52,480 --> 00:26:54,640
crash

636
00:26:53,120 --> 00:26:56,719
and then you try to figure out how to

637
00:26:54,640 --> 00:26:58,400
fix it

638
00:26:56,720 --> 00:27:00,320
it's kind of straightforward but it's a

639
00:26:58,400 --> 00:27:03,360
lot of work so

640
00:27:00,320 --> 00:27:05,600
um so what we also

641
00:27:03,360 --> 00:27:07,199
really would like to fix in user space

642
00:27:05,600 --> 00:27:10,240
or work on is

643
00:27:07,200 --> 00:27:13,279
multi-threading that's mostly in a

644
00:27:10,240 --> 00:27:14,880
shoe issue which comes up with chromium

645
00:27:13,279 --> 00:27:16,880
for example because they're doing

646
00:27:14,880 --> 00:27:20,960
multiple context

647
00:27:16,880 --> 00:27:20,960
uh opengl contacts in the

648
00:27:26,150 --> 00:27:29,219
[Music]

649
00:27:32,840 --> 00:27:35,840
um

650
00:27:37,200 --> 00:27:40,480
that's one of the reasons i mean there

651
00:27:39,600 --> 00:27:43,439
are also other

652
00:27:40,480 --> 00:27:44,640
reliability issues because like when

653
00:27:43,440 --> 00:27:48,000
rendering can fail

654
00:27:44,640 --> 00:27:50,480
or there can be

655
00:27:48,000 --> 00:27:52,240
random corruptions but i think what

656
00:27:50,480 --> 00:27:55,760
really drove the decision

657
00:27:52,240 --> 00:27:58,159
from google was that the multi-fitting

658
00:27:55,760 --> 00:28:00,000
thing really causes the gpu to just you

659
00:27:58,159 --> 00:28:03,120
know

660
00:28:00,000 --> 00:28:05,039
or the application to just crash and

661
00:28:03,120 --> 00:28:07,600
what's also happening is there are a lot

662
00:28:05,039 --> 00:28:09,760
of chromium-based applications

663
00:28:07,600 --> 00:28:11,199
which also have to maintain their own

664
00:28:09,760 --> 00:28:13,200
blacklist i think

665
00:28:11,200 --> 00:28:15,600
so there are other applications having

666
00:28:13,200 --> 00:28:17,360
the same issue

667
00:28:15,600 --> 00:28:18,959
and essentially just crashing there are

668
00:28:17,360 --> 00:28:22,719
also a few games i think

669
00:28:18,960 --> 00:28:26,000
doing multi-threaded rendering or openvl

670
00:28:22,720 --> 00:28:27,120
and kind of the core issue is that we

671
00:28:26,000 --> 00:28:29,600
just corrupt the

672
00:28:27,120 --> 00:28:30,479
application state or the mesa stage as

673
00:28:29,600 --> 00:28:33,279
well so

674
00:28:30,480 --> 00:28:35,760
we send invalid commands to the gpu and

675
00:28:33,279 --> 00:28:38,799
the gpu might also just crash

676
00:28:35,760 --> 00:28:39,600
uh yeah sometimes the visa just crashes

677
00:28:38,799 --> 00:28:41,440
so

678
00:28:39,600 --> 00:28:42,639
it's really annoying but yeah we would

679
00:28:41,440 --> 00:28:45,120
like to work on uh

680
00:28:42,640 --> 00:28:47,360
fix that we also would like to have a

681
00:28:45,120 --> 00:28:51,760
welcome driver

682
00:28:47,360 --> 00:28:54,320
i think right now the main reason

683
00:28:51,760 --> 00:28:56,640
why we can't do that is because we would

684
00:28:54,320 --> 00:28:59,120
like to have a new kernel interface

685
00:28:56,640 --> 00:29:00,000
for lenovo drive in order to properly

686
00:28:59,120 --> 00:29:03,279
implement

687
00:29:00,000 --> 00:29:03,840
vulkan as well which also would require

688
00:29:03,279 --> 00:29:05,760
us to

689
00:29:03,840 --> 00:29:06,959
rework the misa driver at some point as

690
00:29:05,760 --> 00:29:11,840
well but

691
00:29:06,960 --> 00:29:14,399
it would lead to a more reliable driver

692
00:29:11,840 --> 00:29:16,639
context recovery is also kind of

693
00:29:14,399 --> 00:29:20,000
something a lot of drivers are

694
00:29:16,640 --> 00:29:21,760
implementing as well is that even

695
00:29:20,000 --> 00:29:23,279
the like sometimes it can happen that

696
00:29:21,760 --> 00:29:26,158
the gpu context

697
00:29:23,279 --> 00:29:29,039
or the gpu just crashes and we would

698
00:29:26,159 --> 00:29:31,919
like to recover from that

699
00:29:29,039 --> 00:29:32,320
in the past what i saw in some uses as

700
00:29:31,919 --> 00:29:35,120
well

701
00:29:32,320 --> 00:29:36,960
is that it could happen that the gpu

702
00:29:35,120 --> 00:29:40,000
context crashes

703
00:29:36,960 --> 00:29:43,039
user space never knows about this and x

704
00:29:40,000 --> 00:29:44,000
just freezes so the user is not able to

705
00:29:43,039 --> 00:29:47,039
do anything

706
00:29:44,000 --> 00:29:49,840
they can't even switch to the tty

707
00:29:47,039 --> 00:29:50,399
in order to restart x or something so

708
00:29:49,840 --> 00:29:52,879
they just

709
00:29:50,399 --> 00:29:54,239
have their machine nothing happens

710
00:29:52,880 --> 00:29:55,600
anymore and they have to essentially

711
00:29:54,240 --> 00:29:58,399
force reboot

712
00:29:55,600 --> 00:29:59,840
um there are some improvements with that

713
00:29:58,399 --> 00:30:03,840
with the 5.6

714
00:29:59,840 --> 00:30:07,279
kernel and hopefully most applications

715
00:30:03,840 --> 00:30:09,840
will now just crash if that happens

716
00:30:07,279 --> 00:30:12,080
but if anybody of you have this case

717
00:30:09,840 --> 00:30:13,760
with the updated kernel that

718
00:30:12,080 --> 00:30:15,600
or you still have a freeze and your

719
00:30:13,760 --> 00:30:18,640
system just

720
00:30:15,600 --> 00:30:21,360
doesn't do anything anymore then just

721
00:30:18,640 --> 00:30:22,399
contact us and we will see like what's

722
00:30:21,360 --> 00:30:23,840
the reason for this

723
00:30:22,399 --> 00:30:25,439
but hopefully that doesn't happen

724
00:30:23,840 --> 00:30:28,799
anymore

725
00:30:25,440 --> 00:30:31,520
um question

726
00:30:28,799 --> 00:30:31,918
do you have any kind of guesstimate of

727
00:30:31,520 --> 00:30:34,799
how

728
00:30:31,919 --> 00:30:37,279
many years away like a reliable falcon

729
00:30:34,799 --> 00:30:37,279
driver

730
00:30:39,120 --> 00:30:44,399
so the question was how many years are

731
00:30:40,799 --> 00:30:46,879
we away from a reliable working driver

732
00:30:44,399 --> 00:30:48,719
i don't know i mean working driver is

733
00:30:46,880 --> 00:30:51,600
usually less work than an opengl

734
00:30:48,720 --> 00:30:53,360
driver but there are also a lot of

735
00:30:51,600 --> 00:30:57,760
additions to vulcan

736
00:30:53,360 --> 00:30:57,760
happening so um

737
00:30:58,799 --> 00:31:02,840
i really don't know i mean hopefully

738
00:31:00,320 --> 00:31:05,760
it's not that far away

739
00:31:02,840 --> 00:31:09,039
um forces together with

740
00:31:05,760 --> 00:31:12,240
intel and amd

741
00:31:09,039 --> 00:31:16,158
that also want a driver so

742
00:31:12,240 --> 00:31:19,600
uh yes but we are

743
00:31:16,159 --> 00:31:22,320
already having shared

744
00:31:19,600 --> 00:31:22,879
stuff with intel and amd on the visa

745
00:31:22,320 --> 00:31:25,200
driver

746
00:31:22,880 --> 00:31:26,000
so there are a lot there are some common

747
00:31:25,200 --> 00:31:29,440
things

748
00:31:26,000 --> 00:31:30,080
especially the spurvy compiler stuff

749
00:31:29,440 --> 00:31:32,399
because

750
00:31:30,080 --> 00:31:34,399
vulcan requires prairie and we have this

751
00:31:32,399 --> 00:31:36,479
pervy to near

752
00:31:34,399 --> 00:31:37,760
um thing inside mesa which is shared by

753
00:31:36,480 --> 00:31:40,559
all the working drivers

754
00:31:37,760 --> 00:31:42,640
so at least in this area we have can

755
00:31:40,559 --> 00:31:44,879
just make use of what's already there

756
00:31:42,640 --> 00:31:45,919
and there's also like dispatching stuff

757
00:31:44,880 --> 00:31:48,399
like if you call a

758
00:31:45,919 --> 00:31:50,640
vulcan function then it like the runtime

759
00:31:48,399 --> 00:31:52,559
has to check oh it does it actually

760
00:31:50,640 --> 00:31:54,640
is implemented by the driver or not so

761
00:31:52,559 --> 00:31:57,360
they are also shared code in this

762
00:31:54,640 --> 00:31:58,240
area um i think there are other bits as

763
00:31:57,360 --> 00:32:00,959
well

764
00:31:58,240 --> 00:32:01,679
but yeah i mean there is stuff like this

765
00:32:00,960 --> 00:32:04,640
and i think

766
00:32:01,679 --> 00:32:06,480
the main goal is to get to a point where

767
00:32:04,640 --> 00:32:14,320
drivers really only have to

768
00:32:06,480 --> 00:32:17,440
implement their hardware specific bits

769
00:32:14,320 --> 00:32:20,480
um what we also would like to work on

770
00:32:17,440 --> 00:32:22,960
is mainly debugging features

771
00:32:20,480 --> 00:32:23,760
right now if we encounter a bug it's

772
00:32:22,960 --> 00:32:26,000
usually

773
00:32:23,760 --> 00:32:28,158
um always a lot of work to figure out

774
00:32:26,000 --> 00:32:30,880
what's actually happening there

775
00:32:28,159 --> 00:32:33,120
for example we can't debug a shader

776
00:32:30,880 --> 00:32:35,360
which is super annoying so we can't see

777
00:32:33,120 --> 00:32:36,559
oh what's the value of this register or

778
00:32:35,360 --> 00:32:40,840
why did this

779
00:32:36,559 --> 00:32:43,760
shader loop forever or something um

780
00:32:40,840 --> 00:32:45,918
it's really painful to debug right now

781
00:32:43,760 --> 00:32:49,039
the such issues because it usually

782
00:32:45,919 --> 00:32:50,480
means oh yeah i have to adjust the gls

783
00:32:49,039 --> 00:32:52,559
code to figure out oh

784
00:32:50,480 --> 00:32:54,080
why does something happen that usually

785
00:32:52,559 --> 00:32:57,039
takes more time than

786
00:32:54,080 --> 00:32:58,720
for example let's say just turn on a

787
00:32:57,039 --> 00:33:00,559
debugger and see what the shader is

788
00:32:58,720 --> 00:33:01,120
doing so we can't do that we would like

789
00:33:00,559 --> 00:33:03,120
to do

790
00:33:01,120 --> 00:33:04,799
that um there was some reverse

791
00:33:03,120 --> 00:33:05,600
engineering in this direction done

792
00:33:04,799 --> 00:33:08,960
already

793
00:33:05,600 --> 00:33:13,918
like a lot of years ago but um

794
00:33:08,960 --> 00:33:13,919
yeah it's not implemented yet um

795
00:33:14,000 --> 00:33:20,640
so and if anybody is interested

796
00:33:17,120 --> 00:33:20,639
to help us out on that

797
00:33:21,200 --> 00:33:27,039
and has essentially nvidia gpus and has

798
00:33:24,320 --> 00:33:29,678
these issues or something it's always a

799
00:33:27,039 --> 00:33:32,799
good idea to try to look into that

800
00:33:29,679 --> 00:33:35,120
themselves um

801
00:33:32,799 --> 00:33:38,399
i mean that's how i started to work on

802
00:33:35,120 --> 00:33:40,399
nuvo i just had random or i had

803
00:33:38,399 --> 00:33:42,080
issues related to reclocking and i was

804
00:33:40,399 --> 00:33:45,439
looking into it and figure

805
00:33:42,080 --> 00:33:46,639
out like what's wrong and if

806
00:33:45,440 --> 00:33:48,720
there are some issues which really

807
00:33:46,640 --> 00:33:50,320
annoys you and you would like to get it

808
00:33:48,720 --> 00:33:53,039
fixed

809
00:33:50,320 --> 00:33:54,799
you could also you could try to look

810
00:33:53,039 --> 00:33:58,158
into this as well

811
00:33:54,799 --> 00:34:01,360
we can always help with stuff so if

812
00:33:58,159 --> 00:34:04,799
yeah like yeah if you're interested just

813
00:34:01,360 --> 00:34:06,559
try to do this please um

814
00:34:04,799 --> 00:34:09,359
being interested in motivated also is

815
00:34:06,559 --> 00:34:12,239
kind of a huge thing of course

816
00:34:09,359 --> 00:34:13,759
if you are not motivated then nothing

817
00:34:12,239 --> 00:34:17,199
will come out of it

818
00:34:13,760 --> 00:34:18,800
um and especially for students if they

819
00:34:17,199 --> 00:34:20,638
also want to get some money while doing

820
00:34:18,800 --> 00:34:22,879
that

821
00:34:20,639 --> 00:34:24,079
we would be happy to do also gsog or

822
00:34:22,879 --> 00:34:27,279
ework

823
00:34:24,079 --> 00:34:31,200
programs which is essentially

824
00:34:27,280 --> 00:34:32,240
kind of you get money to work on open

825
00:34:31,199 --> 00:34:34,560
source project

826
00:34:32,239 --> 00:34:36,239
as an intern like kind of internal life

827
00:34:34,560 --> 00:34:37,599
i mean you can't really say it

828
00:34:36,239 --> 00:34:39,598
it's not an internship but it's

829
00:34:37,599 --> 00:34:42,800
essentially um

830
00:34:39,599 --> 00:34:44,879
you ha there's some evaluation going on

831
00:34:42,800 --> 00:34:45,919
and we say okay this person is skilled

832
00:34:44,879 --> 00:34:48,319
enough to

833
00:34:45,918 --> 00:34:49,040
work on that and then they get paid for

834
00:34:48,320 --> 00:34:51,119
i think

835
00:34:49,040 --> 00:34:52,320
g-shock is three months i don't know the

836
00:34:51,119 --> 00:34:55,599
details of e-work

837
00:34:52,320 --> 00:34:59,040
but yeah so there's money and you're

838
00:34:55,599 --> 00:34:59,040
working on open source projects

839
00:35:01,440 --> 00:35:04,480
what's also kind of good entry-level

840
00:35:03,280 --> 00:35:07,599
task is

841
00:35:04,480 --> 00:35:10,320
compiler optimizations uh

842
00:35:07,599 --> 00:35:12,880
most of you or some of you might think

843
00:35:10,320 --> 00:35:15,599
oh but that sounds super complicated

844
00:35:12,880 --> 00:35:16,800
but a lot of optimizations are just

845
00:35:15,599 --> 00:35:20,000
simple math

846
00:35:16,800 --> 00:35:22,240
so you have you know

847
00:35:20,000 --> 00:35:23,599
special patterns and shaders which you

848
00:35:22,240 --> 00:35:27,839
can reduce to

849
00:35:23,599 --> 00:35:29,920
a simpler

850
00:35:27,839 --> 00:35:31,279
set of instructions but just by applying

851
00:35:29,920 --> 00:35:33,920
some math

852
00:35:31,280 --> 00:35:35,760
to it essentially and they're also like

853
00:35:33,920 --> 00:35:36,160
more complicated compile optimizations

854
00:35:35,760 --> 00:35:38,480
but

855
00:35:36,160 --> 00:35:39,839
that's kind of the more trivial ones

856
00:35:38,480 --> 00:35:40,320
where you just see or maybe there's a

857
00:35:39,839 --> 00:35:41,920
shift

858
00:35:40,320 --> 00:35:44,640
in the left direction and in the right

859
00:35:41,920 --> 00:35:48,000
direction maybe i can also just apply an

860
00:35:44,640 --> 00:35:48,000
end if it's by the same

861
00:35:48,240 --> 00:35:51,520
amount of bits so

862
00:35:52,480 --> 00:36:01,280
what's also kind of fun project

863
00:35:55,599 --> 00:36:04,640
would be to use some gpu gpios there are

864
00:36:01,280 --> 00:36:07,839
several of them on nvidia gpus

865
00:36:04,640 --> 00:36:11,440
some of them just control the

866
00:36:07,839 --> 00:36:14,078
leds on gpus for example

867
00:36:11,440 --> 00:36:16,079
some of them gets triggered when you

868
00:36:14,079 --> 00:36:19,119
don't have the external power

869
00:36:16,079 --> 00:36:19,440
connected to the gpu and there are a lot

870
00:36:19,119 --> 00:36:22,800
of

871
00:36:19,440 --> 00:36:26,000
random stuff like this um

872
00:36:22,800 --> 00:36:28,000
maybe if some is more keen to work on

873
00:36:26,000 --> 00:36:30,560
hardware level stuff

874
00:36:28,000 --> 00:36:32,560
that's also something cool to work on

875
00:36:30,560 --> 00:36:36,160
and

876
00:36:32,560 --> 00:36:38,320
we also have some fan controlling issues

877
00:36:36,160 --> 00:36:39,598
where we actually got documentation for

878
00:36:38,320 --> 00:36:42,880
as well and still

879
00:36:39,599 --> 00:36:44,480
like a thing on our to-do list but if

880
00:36:42,880 --> 00:36:46,480
somebody else has a

881
00:36:44,480 --> 00:36:49,760
gpu where the fan controlling is really

882
00:36:46,480 --> 00:36:49,760
odd like

883
00:36:49,920 --> 00:36:54,079
if you have more load the fans could get

884
00:36:52,839 --> 00:36:57,359
slower

885
00:36:54,079 --> 00:36:59,280
i have a gpu like that myself as well

886
00:36:57,359 --> 00:37:00,799
um which is something that shouldn't

887
00:36:59,280 --> 00:37:04,560
happen but if you

888
00:37:00,800 --> 00:37:06,000
find such issues with your gpu as well

889
00:37:04,560 --> 00:37:07,520
maybe

890
00:37:06,000 --> 00:37:09,040
if you want to look into it that would

891
00:37:07,520 --> 00:37:12,240
also be a cool

892
00:37:09,040 --> 00:37:12,240
thing to look into

893
00:37:14,160 --> 00:37:23,040
yeah i think i'm done

894
00:37:18,160 --> 00:37:26,160
and there are a few links you can

895
00:37:23,040 --> 00:37:29,200
always look into as well

896
00:37:26,160 --> 00:37:32,879
mostly we are on the irc channel

897
00:37:29,200 --> 00:37:35,279
around and talking with

898
00:37:32,880 --> 00:37:36,560
users if they have complaints or bugs or

899
00:37:35,280 --> 00:37:38,560
something

900
00:37:36,560 --> 00:37:40,078
and we also have the trello board where

901
00:37:38,560 --> 00:37:43,279
a lot of tasks

902
00:37:40,079 --> 00:37:46,320
are listed

903
00:37:43,280 --> 00:37:50,880
maybe i can open it oh

904
00:37:46,320 --> 00:37:53,680
you can yeah um

905
00:37:50,880 --> 00:37:54,079
but i think that's essentially it yeah

906
00:37:53,680 --> 00:37:57,680
so

907
00:37:54,079 --> 00:38:02,839
i don't have anything anymore uh

908
00:37:57,680 --> 00:38:05,839
any questions or comments or maybe even

909
00:38:02,839 --> 00:38:05,839
suggestions

910
00:38:09,200 --> 00:38:21,439
i thought it's on the wiki

911
00:38:18,480 --> 00:38:21,839
yeah i'm sure it's there but if it's not

912
00:38:21,440 --> 00:38:25,040
then

913
00:38:21,839 --> 00:38:25,759
yeah do you need to support the quattro

914
00:38:25,040 --> 00:38:28,880
branded

915
00:38:25,760 --> 00:38:33,839
gpus specifically compared to g

916
00:38:28,880 --> 00:38:33,839
or is it just a matter of generations

917
00:38:35,839 --> 00:38:39,839
the question was if we have to do

918
00:38:37,200 --> 00:38:42,720
anything special for quattro gpus

919
00:38:39,839 --> 00:38:44,320
no we don't it's essentially the same

920
00:38:42,720 --> 00:38:45,919
gpu

921
00:38:44,320 --> 00:38:48,480
i think there are some quattro cuts

922
00:38:45,920 --> 00:38:49,440
which have certain hardware features

923
00:38:48,480 --> 00:38:53,119
enabled

924
00:38:49,440 --> 00:38:56,400
like double floating point precision

925
00:38:53,119 --> 00:38:58,960
performance um usually on

926
00:38:56,400 --> 00:39:00,640
geforce cards you have really slow

927
00:38:58,960 --> 00:39:02,079
double precision performance

928
00:39:00,640 --> 00:39:03,920
but it doesn't matter because games are

929
00:39:02,079 --> 00:39:06,400
not using it um but

930
00:39:03,920 --> 00:39:08,800
besides that i'm not really aware of

931
00:39:06,400 --> 00:39:10,640
anything

932
00:39:08,800 --> 00:39:12,320
i mean there was what i was actually

933
00:39:10,640 --> 00:39:15,200
working on is that

934
00:39:12,320 --> 00:39:17,119
in the past if you use the nvidia driver

935
00:39:15,200 --> 00:39:18,560
only on quattro cards you got the power

936
00:39:17,119 --> 00:39:21,200
consumption

937
00:39:18,560 --> 00:39:22,000
and i've implemented it for geforce

938
00:39:21,200 --> 00:39:24,480
cards as well

939
00:39:22,000 --> 00:39:25,280
for indoor because it was just really a

940
00:39:24,480 --> 00:39:28,480
software

941
00:39:25,280 --> 00:39:32,000
check to turn it on or off in the

942
00:39:28,480 --> 00:39:34,160
nvidia stack but yeah generally it's the

943
00:39:32,000 --> 00:39:34,160
same

944
00:39:40,839 --> 00:39:43,839
yes

945
00:39:49,359 --> 00:39:53,359
so the question was what opencl version

946
00:39:51,599 --> 00:39:58,240
we are targeting

947
00:39:53,359 --> 00:40:01,279
right now the opencl runtime in misa is

948
00:39:58,240 --> 00:40:04,799
implemented on a 1.1 level

949
00:40:01,280 --> 00:40:06,319
and at least that's what we are trying

950
00:40:04,800 --> 00:40:09,680
to match

951
00:40:06,319 --> 00:40:11,839
but i was also working on some opencl

952
00:40:09,680 --> 00:40:14,799
2.0 features

953
00:40:11,839 --> 00:40:15,520
or pierre was also working on consuming

954
00:40:14,800 --> 00:40:19,440
spearov

955
00:40:15,520 --> 00:40:22,880
which is an opencl 2.1 feature

956
00:40:19,440 --> 00:40:25,839
so yeah i mean there are interested

957
00:40:22,880 --> 00:40:27,280
features in opencl one which are cool to

958
00:40:25,839 --> 00:40:29,040
implement

959
00:40:27,280 --> 00:40:30,319
but yeah i mean right now we are trying

960
00:40:29,040 --> 00:40:32,480
to get it

961
00:40:30,319 --> 00:40:33,839
to work first and then look into

962
00:40:32,480 --> 00:40:38,079
implementing more features

963
00:40:33,839 --> 00:40:40,799
yeah yes

964
00:40:38,079 --> 00:40:42,880
how about uh legacy products four

965
00:40:40,800 --> 00:40:46,000
generations of

966
00:40:42,880 --> 00:40:47,599
bigger hardware i have a north carolina

967
00:40:46,000 --> 00:40:53,839
low profile

968
00:40:47,599 --> 00:40:53,839
for example the fan is really noisy

969
00:41:03,119 --> 00:41:06,800
so the question was if there's still

970
00:41:05,040 --> 00:41:10,319
development for old cards

971
00:41:06,800 --> 00:41:13,119
um yes if

972
00:41:10,319 --> 00:41:14,160
somebody has time to look into it yeah

973
00:41:13,119 --> 00:41:16,160
so

974
00:41:14,160 --> 00:41:17,520
i mean the kind of the bad and the good

975
00:41:16,160 --> 00:41:20,640
thing is

976
00:41:17,520 --> 00:41:21,119
we are not a company so we can just take

977
00:41:20,640 --> 00:41:22,720
care

978
00:41:21,119 --> 00:41:24,720
of it just on all the hardware because

979
00:41:22,720 --> 00:41:26,560
we don't have to pressure on

980
00:41:24,720 --> 00:41:28,240
only supporting the newest thing because

981
00:41:26,560 --> 00:41:29,839
we want to sell hardware

982
00:41:28,240 --> 00:41:31,520
but on the other hand we also don't have

983
00:41:29,839 --> 00:41:33,279
enough people to look into all the

984
00:41:31,520 --> 00:41:36,400
issues

985
00:41:33,280 --> 00:41:39,040
if there is a bug on like 10 years old

986
00:41:36,400 --> 00:41:42,240
gpu and somebody fixes it then we also

987
00:41:39,040 --> 00:41:42,240
would like to merge it yes

988
00:41:42,800 --> 00:41:47,359
yes so i saw that you have some paid

989
00:41:45,680 --> 00:41:51,040
call developers

990
00:41:47,359 --> 00:41:52,240
who pays for his work and why what is

991
00:41:51,040 --> 00:41:56,640
the interest

992
00:41:52,240 --> 00:41:59,200
so is paying for all of them

993
00:41:56,640 --> 00:42:01,520
and the reason for doing so is just

994
00:41:59,200 --> 00:42:05,759
because of well

995
00:42:01,520 --> 00:42:09,599
well red hat enterprise linux

996
00:42:05,760 --> 00:42:11,359
and i mean it supports a desktop

997
00:42:09,599 --> 00:42:12,960
and because you want to make use of the

998
00:42:11,359 --> 00:42:16,319
gpu as well you need

999
00:42:12,960 --> 00:42:16,960
the novo driver because ratchet doesn't

1000
00:42:16,319 --> 00:42:20,160
want to ship

1001
00:42:16,960 --> 00:42:23,040
any proprietary blobs so naval

1002
00:42:20,160 --> 00:42:23,040
is the only thing

1003
00:42:24,880 --> 00:42:28,720
when you receive the same server from

1004
00:42:27,119 --> 00:42:30,720
nvidia for recording and

1005
00:42:28,720 --> 00:42:34,000
control this doesn't require any

1006
00:42:30,720 --> 00:42:37,279
additional work in the wow itself

1007
00:42:34,000 --> 00:42:38,480
um the question was if uh using the

1008
00:42:37,280 --> 00:42:41,839
firmware provided from

1009
00:42:38,480 --> 00:42:44,800
nvidia causes additional work

1010
00:42:41,839 --> 00:42:47,040
yes the firmware is executed on

1011
00:42:44,800 --> 00:42:49,200
co-processors on the gpu

1012
00:42:47,040 --> 00:42:51,040
and you also need a communication

1013
00:42:49,200 --> 00:42:54,399
channel to this

1014
00:42:51,040 --> 00:42:58,000
chips as well to the cpus as well so

1015
00:42:54,400 --> 00:43:00,880
um that's one thing we have to work on

1016
00:42:58,000 --> 00:43:02,079
also the signature stuff like because

1017
00:43:00,880 --> 00:43:05,280
they are signed

1018
00:43:02,079 --> 00:43:08,800
requires a booting

1019
00:43:05,280 --> 00:43:10,000
process which gets more complicated by

1020
00:43:08,800 --> 00:43:12,800
the generation

1021
00:43:10,000 --> 00:43:13,280
so you have like a core security chip

1022
00:43:12,800 --> 00:43:15,599
which

1023
00:43:13,280 --> 00:43:17,920
has to get booted and then it boots the

1024
00:43:15,599 --> 00:43:18,880
other processors with other firmware and

1025
00:43:17,920 --> 00:43:21,440
the signature

1026
00:43:18,880 --> 00:43:22,160
stuff is different again and you have to

1027
00:43:21,440 --> 00:43:25,520
allocate

1028
00:43:22,160 --> 00:43:27,759
secure memory so you the driver can't

1029
00:43:25,520 --> 00:43:30,160
tamper with it while the boot process is

1030
00:43:27,760 --> 00:43:31,599
ongoing and stuff like that yeah so

1031
00:43:30,160 --> 00:43:36,160
that's

1032
00:43:31,599 --> 00:43:38,800
kind of the thing which the the

1033
00:43:36,160 --> 00:43:40,000
positive like the advantage of doing the

1034
00:43:38,800 --> 00:43:41,359
getting the firmware is we don't

1035
00:43:40,000 --> 00:43:43,680
have to implement the firmware or

1036
00:43:41,359 --> 00:43:48,400
ourselves that's what we've done on

1037
00:43:43,680 --> 00:43:51,759
older generations where we have the

1038
00:43:48,400 --> 00:43:54,240
firmware for power management

1039
00:43:51,760 --> 00:43:56,079
especially useful for on tesla and

1040
00:43:54,240 --> 00:43:59,839
kepler because we do the

1041
00:43:56,079 --> 00:44:02,079
memory clocking on the pmu

1042
00:43:59,839 --> 00:44:03,440
which is one of the co-processors but we

1043
00:44:02,079 --> 00:44:06,000
also have

1044
00:44:03,440 --> 00:44:07,280
firmware for context switching so if you

1045
00:44:06,000 --> 00:44:09,440
have multiple

1046
00:44:07,280 --> 00:44:10,800
hardware contacts on a gpu they have to

1047
00:44:09,440 --> 00:44:13,119
get switched at some point

1048
00:44:10,800 --> 00:44:16,560
and on nvidia gpu that's also done on

1049
00:44:13,119 --> 00:44:16,560
those co-processors

1050
00:44:19,280 --> 00:44:25,839
yes now that red hat belongs to ibm

1051
00:44:23,040 --> 00:44:27,119
is it possible for them to put more

1052
00:44:25,839 --> 00:44:29,680
weight behind

1053
00:44:27,119 --> 00:44:29,680
all of this

1054
00:44:30,880 --> 00:44:38,880
i mean yeah the question is if

1055
00:44:34,880 --> 00:44:42,400
now that red hat to get spot by ivm if

1056
00:44:38,880 --> 00:44:44,800
they are able to put more money into it

1057
00:44:42,400 --> 00:44:46,800
i mean they certainly could because it's

1058
00:44:44,800 --> 00:44:48,000
a bigger company with more money than

1059
00:44:46,800 --> 00:44:50,960
the red hat

1060
00:44:48,000 --> 00:44:53,680
but even if i would know about plans i

1061
00:44:50,960 --> 00:44:57,359
wouldn't be allowed to talk about it

1062
00:44:53,680 --> 00:44:58,720
right so um yeah i mean the most obvious

1063
00:44:57,359 --> 00:45:04,720
thing is yes they could because they

1064
00:44:58,720 --> 00:45:07,200
have more money

1065
00:45:04,720 --> 00:45:07,200
i don't know

1066
00:45:09,359 --> 00:45:11,520
yes

1067
00:45:13,520 --> 00:45:18,079
there is probably memory corruption

1068
00:45:14,960 --> 00:45:20,800
going on is it possible other sanitizer

1069
00:45:18,079 --> 00:45:20,800
or something like that

1070
00:45:21,920 --> 00:45:26,480
no um the question was that

1071
00:45:24,960 --> 00:45:29,200
because i was talking about debugging if

1072
00:45:26,480 --> 00:45:31,520
there is memory corruptions why we can't

1073
00:45:29,200 --> 00:45:34,480
use like address sanitizer

1074
00:45:31,520 --> 00:45:36,400
i was talking about gpu debugging yeah

1075
00:45:34,480 --> 00:45:38,319
like

1076
00:45:36,400 --> 00:45:39,120
all the sanitizers don't work with gpu

1077
00:45:38,319 --> 00:45:42,250
memory

1078
00:45:39,120 --> 00:45:42,250
[Music]

1079
00:45:42,319 --> 00:45:46,640
yeah so yes i mean for example the

1080
00:45:45,119 --> 00:45:49,920
multi-threading issues we can

1081
00:45:46,640 --> 00:45:53,759
fix with the address sanitizer um

1082
00:45:49,920 --> 00:45:56,640
the problem is just that the cost is

1083
00:45:53,760 --> 00:45:57,760
much more complicated than just throwing

1084
00:45:56,640 --> 00:45:59,839
in some locks

1085
00:45:57,760 --> 00:46:01,520
because if you throw in too many locks

1086
00:45:59,839 --> 00:46:03,119
then the performance goes down

1087
00:46:01,520 --> 00:46:04,880
so there's no benefit of doing

1088
00:46:03,119 --> 00:46:06,960
multi-threading

1089
00:46:04,880 --> 00:46:09,040
sure we could but also kind of the

1090
00:46:06,960 --> 00:46:12,880
architecture of how we're doing things

1091
00:46:09,040 --> 00:46:12,880
make it really annoying to do so

1092
00:46:16,240 --> 00:46:20,479
is it at least possible to make a log of

1093
00:46:18,880 --> 00:46:23,760
what's

1094
00:46:20,480 --> 00:46:24,800
driven put into the gpu and then when it

1095
00:46:23,760 --> 00:46:27,040
dies

1096
00:46:24,800 --> 00:46:28,880
have at least a backtrack of what

1097
00:46:27,040 --> 00:46:31,920
happened before

1098
00:46:28,880 --> 00:46:33,839
um so not you cannot read state anymore

1099
00:46:31,920 --> 00:46:35,920
when it's crashed but

1100
00:46:33,839 --> 00:46:38,560
you can at least see what was the last

1101
00:46:35,920 --> 00:46:38,560
thing happened

1102
00:46:38,960 --> 00:46:43,920
so the question was slow down course but

1103
00:46:42,079 --> 00:46:46,000
so the question was if there if we could

1104
00:46:43,920 --> 00:46:48,400
phone a lock so we know what's

1105
00:46:46,000 --> 00:46:49,119
happened last on the gpu before it

1106
00:46:48,400 --> 00:46:53,440
crashed

1107
00:46:49,119 --> 00:46:57,200
um yes we have that with 5.6

1108
00:46:53,440 --> 00:47:00,319
ben added a feature where

1109
00:46:57,200 --> 00:47:02,560
i don't even know no it's a kind of uh

1110
00:47:00,319 --> 00:47:03,599
feature where if you send commands to

1111
00:47:02,560 --> 00:47:06,960
the gpu

1112
00:47:03,599 --> 00:47:10,079
you can do it in a synchronous way and

1113
00:47:06,960 --> 00:47:13,359
if the gpu crashes we know

1114
00:47:10,079 --> 00:47:16,880
what command submission was done last

1115
00:47:13,359 --> 00:47:18,640
it helps a bit

1116
00:47:16,880 --> 00:47:21,040
but the command submission can also be

1117
00:47:18,640 --> 00:47:23,040
like 100 or thousand comments

1118
00:47:21,040 --> 00:47:25,599
but yeah i mean we could also do the

1119
00:47:23,040 --> 00:47:27,359
command submission smaller than and then

1120
00:47:25,599 --> 00:47:30,559
figuring out what's happened so yeah we

1121
00:47:27,359 --> 00:47:30,558
have something like this now

1122
00:47:36,880 --> 00:47:39,839
okay

1123
00:47:42,960 --> 00:47:53,839
okay then i think i'm done

1124
00:47:56,880 --> 00:47:58,960
you

