1
00:00:10,240 --> 00:00:13,440
okay let's move on to the next talk of

2
00:00:12,320 --> 00:00:17,420
the day

3
00:00:13,440 --> 00:00:18,630
let me introduce you to stefan

4
00:00:17,420 --> 00:00:21,750
[Applause]

5
00:00:18,630 --> 00:00:21,750
[Music]

6
00:00:24,160 --> 00:00:28,320
uh afternoon everyone thanks for taking

7
00:00:26,560 --> 00:00:30,000
your lunch time to come and listen to me

8
00:00:28,320 --> 00:00:31,760
talk today

9
00:00:30,000 --> 00:00:34,160
when i submitted this talk after i

10
00:00:31,760 --> 00:00:37,200
submitted this talk i realized that the

11
00:00:34,160 --> 00:00:38,800
title of the talk was pretty generic and

12
00:00:37,200 --> 00:00:39,760
in theory i could come in here and talk

13
00:00:38,800 --> 00:00:42,718
about pretty much

14
00:00:39,760 --> 00:00:44,800
anything i wanted to so i sat down last

15
00:00:42,719 --> 00:00:45,680
night and i decided right i'm going to

16
00:00:44,800 --> 00:00:47,279
start

17
00:00:45,680 --> 00:00:48,960
telling the story of this little boy

18
00:00:47,280 --> 00:00:51,600
called nigel

19
00:00:48,960 --> 00:00:52,559
who had a dream i'm not actually going

20
00:00:51,600 --> 00:00:54,719
to talk about nigel i'm not going to

21
00:00:52,559 --> 00:00:57,120
talk about brexit

22
00:00:54,719 --> 00:00:58,480
thank god it's off the off the table for

23
00:00:57,120 --> 00:01:00,079
today

24
00:00:58,480 --> 00:01:01,599
instead what i'm going to talk about is

25
00:01:00,079 --> 00:01:02,800
versioning and how do you manage

26
00:01:01,600 --> 00:01:05,920
versioning in

27
00:01:02,800 --> 00:01:08,479
a python project and in some cases in

28
00:01:05,920 --> 00:01:10,240
kind of projects in general this is

29
00:01:08,479 --> 00:01:10,798
going to be mostly focused at people

30
00:01:10,240 --> 00:01:12,479
that are

31
00:01:10,799 --> 00:01:13,840
packaging their own projects so

32
00:01:12,479 --> 00:01:15,679
libraries that you're submitting up to

33
00:01:13,840 --> 00:01:17,040
pie pie or whatever

34
00:01:15,680 --> 00:01:19,600
but some of the things i'm talking about

35
00:01:17,040 --> 00:01:21,280
here today will be useful for

36
00:01:19,600 --> 00:01:22,720
basically anyone working on software

37
00:01:21,280 --> 00:01:26,400
whether it's a web application or a

38
00:01:22,720 --> 00:01:26,400
library or something else entirely

39
00:01:26,560 --> 00:01:29,680
for each of these i've broken it down to

40
00:01:28,479 --> 00:01:30,640
three different sections

41
00:01:29,680 --> 00:01:32,240
and each of those i'm going to break

42
00:01:30,640 --> 00:01:34,159
down into two sections i'll get into

43
00:01:32,240 --> 00:01:35,759
that in a second

44
00:01:34,159 --> 00:01:37,360
before i do that i should probably

45
00:01:35,759 --> 00:01:40,479
introduce myself

46
00:01:37,360 --> 00:01:42,159
i'm stephen i work at red hat i've been

47
00:01:40,479 --> 00:01:43,600
working there for about three years

48
00:01:42,159 --> 00:01:45,920
still don't have one of those cool red

49
00:01:43,600 --> 00:01:48,399
hats i'll get one eventually

50
00:01:45,920 --> 00:01:50,079
i work on openstack and have done since

51
00:01:48,399 --> 00:01:51,520
before i joined red hat

52
00:01:50,079 --> 00:01:53,759
for anyone that doesn't know what

53
00:01:51,520 --> 00:01:55,280
openstack is it was the cool kid on the

54
00:01:53,759 --> 00:01:57,520
block until kubernetes came along and

55
00:01:55,280 --> 00:01:59,840
stole our lunch money

56
00:01:57,520 --> 00:02:02,000
um as a result the one big difference

57
00:01:59,840 --> 00:02:03,920
though between openstack and kubernetes

58
00:02:02,000 --> 00:02:05,759
is that openstack is almost entirely

59
00:02:03,920 --> 00:02:07,360
python

60
00:02:05,759 --> 00:02:08,720
the contributions to openstack has made

61
00:02:07,360 --> 00:02:10,479
to the pipeline ecosystem i'd say are

62
00:02:08,720 --> 00:02:13,200
pretty significant

63
00:02:10,479 --> 00:02:14,800
as a result of my work on openstack and

64
00:02:13,200 --> 00:02:16,480
the spare time stuff

65
00:02:14,800 --> 00:02:18,080
i've ended up contributing to and

66
00:02:16,480 --> 00:02:19,359
maintaining an awful lot of python

67
00:02:18,080 --> 00:02:20,800
projects

68
00:02:19,360 --> 00:02:23,920
and i've used a lot of the tools that

69
00:02:20,800 --> 00:02:26,800
i'm going to talk about here today

70
00:02:23,920 --> 00:02:29,839
in those projects either by choice or

71
00:02:26,800 --> 00:02:29,840
it's been forced upon me

72
00:02:30,640 --> 00:02:34,480
so before we dive into the actual tools

73
00:02:33,360 --> 00:02:36,080
themselves a quick

74
00:02:34,480 --> 00:02:37,920
kind of recap on versioning and what do

75
00:02:36,080 --> 00:02:42,000
i mean about versioning and

76
00:02:37,920 --> 00:02:43,280
managing change and stuff so

77
00:02:42,000 --> 00:02:45,040
you probably should care about

78
00:02:43,280 --> 00:02:46,879
versioning if your software

79
00:02:45,040 --> 00:02:48,720
has users if it's something more than a

80
00:02:46,879 --> 00:02:51,040
script sitting on a server somewhere or

81
00:02:48,720 --> 00:02:52,319
on your local pc

82
00:02:51,040 --> 00:02:54,160
and if it's something that you're

83
00:02:52,319 --> 00:02:55,440
expecting to change or evolve over time

84
00:02:54,160 --> 00:02:58,160
so you're planning to add or move

85
00:02:55,440 --> 00:02:58,160
functionality

86
00:02:58,720 --> 00:03:02,720
and from the python perspective

87
00:03:01,440 --> 00:03:04,400
versioning

88
00:03:02,720 --> 00:03:06,400
number wise we're usually referring to

89
00:03:04,400 --> 00:03:07,920
this pep from a while ago which

90
00:03:06,400 --> 00:03:10,159
specifies

91
00:03:07,920 --> 00:03:11,040
version identifier strings like this

92
00:03:10,159 --> 00:03:14,239
most of the time

93
00:03:11,040 --> 00:03:15,040
you're not going to use all of this most

94
00:03:14,239 --> 00:03:17,680
people talk

95
00:03:15,040 --> 00:03:18,560
in more generic terms in terms of things

96
00:03:17,680 --> 00:03:20,560
like

97
00:03:18,560 --> 00:03:22,159
semantic versioning and calendar

98
00:03:20,560 --> 00:03:24,400
versioning like ubuntu and that kind of

99
00:03:22,159 --> 00:03:26,959
thing

100
00:03:24,400 --> 00:03:28,799
basic idea behind versioning of course

101
00:03:26,959 --> 00:03:30,159
is that your users should know when

102
00:03:28,799 --> 00:03:32,400
you've introduced changes

103
00:03:30,159 --> 00:03:34,000
into your code when you've gone and

104
00:03:32,400 --> 00:03:35,599
removed some functionality that they may

105
00:03:34,000 --> 00:03:37,599
have relied on previously

106
00:03:35,599 --> 00:03:38,959
or you've added some cool new whiz-bang

107
00:03:37,599 --> 00:03:41,200
feature that you want the world to know

108
00:03:38,959 --> 00:03:41,200
about

109
00:03:43,280 --> 00:03:46,799
so i promised three different kind of

110
00:03:44,959 --> 00:03:50,239
focus areas the first of these

111
00:03:46,799 --> 00:03:52,640
is packaging so again this is mostly

112
00:03:50,239 --> 00:03:54,239
useful for people that are packaging up

113
00:03:52,640 --> 00:03:54,958
their own libraries and publishing them

114
00:03:54,239 --> 00:03:57,519
on

115
00:03:54,959 --> 00:03:57,519
pipeline

116
00:03:58,080 --> 00:04:01,840
i'd imagine that most people that have

117
00:04:00,159 --> 00:04:02,798
written packages have ended up using

118
00:04:01,840 --> 00:04:05,120
setup tools

119
00:04:02,799 --> 00:04:06,720
to do that uh obviously a replacement

120
00:04:05,120 --> 00:04:09,439
for the the legacy

121
00:04:06,720 --> 00:04:11,200
tools project there are cool new kids on

122
00:04:09,439 --> 00:04:13,280
the block here with regards to

123
00:04:11,200 --> 00:04:14,958
things like poetry and flits that kind

124
00:04:13,280 --> 00:04:16,399
of thing i'm not going to talk about

125
00:04:14,959 --> 00:04:18,720
those today

126
00:04:16,399 --> 00:04:20,078
instead i'm going to talk about two kind

127
00:04:18,720 --> 00:04:22,800
of plug-in projects

128
00:04:20,079 --> 00:04:24,560
that exist for setup tools that you can

129
00:04:22,800 --> 00:04:27,600
use to kind of help

130
00:04:24,560 --> 00:04:28,880
make your life easier the reason that

131
00:04:27,600 --> 00:04:30,160
you'd want something like this

132
00:04:28,880 --> 00:04:32,400
is the way that setup tools normally

133
00:04:30,160 --> 00:04:34,720
manages its version is

134
00:04:32,400 --> 00:04:37,120
you put in a static string into your

135
00:04:34,720 --> 00:04:38,240
setup.pi document or your setup.config

136
00:04:37,120 --> 00:04:41,199
document

137
00:04:38,240 --> 00:04:43,040
and every time you update that based on

138
00:04:41,199 --> 00:04:45,280
the new version of your software

139
00:04:43,040 --> 00:04:46,800
um there's an infrastructure management

140
00:04:45,280 --> 00:04:47,840
track here there's an automation track

141
00:04:46,800 --> 00:04:50,000
here

142
00:04:47,840 --> 00:04:51,280
and there's a couple of tracks in yanson

143
00:04:50,000 --> 00:04:53,120
uh with

144
00:04:51,280 --> 00:04:54,799
the idea being that developers don't

145
00:04:53,120 --> 00:04:56,960
like doing stuff manually when you can

146
00:04:54,800 --> 00:04:58,960
automate the process

147
00:04:56,960 --> 00:05:01,120
and as far as this static string stuff

148
00:04:58,960 --> 00:05:02,880
goes it's usually duplication because

149
00:05:01,120 --> 00:05:04,800
you're usually managing your version

150
00:05:02,880 --> 00:05:06,719
information somewhere else typically in

151
00:05:04,800 --> 00:05:10,080
the form of

152
00:05:06,720 --> 00:05:12,000
git metadata git tags git branches that

153
00:05:10,080 --> 00:05:13,359
kind of thing

154
00:05:12,000 --> 00:05:15,520
so the first of these two tools i'm

155
00:05:13,360 --> 00:05:19,520
talking about setup tools scm

156
00:05:15,520 --> 00:05:22,080
and pbr are plugins for setup tools

157
00:05:19,520 --> 00:05:22,880
that allow you to pull out that get

158
00:05:22,080 --> 00:05:25,680
metadata

159
00:05:22,880 --> 00:05:27,440
from your repo and automatically inject

160
00:05:25,680 --> 00:05:30,720
it into your package

161
00:05:27,440 --> 00:05:32,960
but they work slightly differently

162
00:05:30,720 --> 00:05:35,199
one thing to note the first of these is

163
00:05:32,960 --> 00:05:36,159
a kind of broader python ecosystem

164
00:05:35,199 --> 00:05:38,000
project

165
00:05:36,160 --> 00:05:39,280
the other one is an openstack project

166
00:05:38,000 --> 00:05:40,800
that's used

167
00:05:39,280 --> 00:05:42,479
across pretty much every single

168
00:05:40,800 --> 00:05:43,919
openstack project and

169
00:05:42,479 --> 00:05:46,800
anyone else that wants to use it i use

170
00:05:43,919 --> 00:05:49,520
it in my own project square a lot

171
00:05:46,800 --> 00:05:51,280
setup tools scm is by far the simpler of

172
00:05:49,520 --> 00:05:53,840
the two

173
00:05:51,280 --> 00:05:54,638
you say that you you put it in as your

174
00:05:53,840 --> 00:05:57,679
requirements

175
00:05:54,639 --> 00:05:59,840
for the setup stage of your package

176
00:05:57,680 --> 00:06:01,199
and you set this boolean config option

177
00:05:59,840 --> 00:06:01,919
saying whether you want setup tools to

178
00:06:01,199 --> 00:06:04,960
do your

179
00:06:01,919 --> 00:06:06,080
versioning for you and you as soon as

180
00:06:04,960 --> 00:06:07,520
you've done that it will go

181
00:06:06,080 --> 00:06:09,599
and it will figure out what version of

182
00:06:07,520 --> 00:06:12,240
your package is inject that into your

183
00:06:09,600 --> 00:06:14,400
theme and then when you go to build your

184
00:06:12,240 --> 00:06:16,160
tarball or your wheel or whatever

185
00:06:14,400 --> 00:06:19,520
all that stuff will happen magically for

186
00:06:16,160 --> 00:06:22,560
you which is all lovely

187
00:06:19,520 --> 00:06:24,719
pbr does almost the exact same thing

188
00:06:22,560 --> 00:06:25,680
um but it also does a whole load of

189
00:06:24,720 --> 00:06:26,960
other cool stuff

190
00:06:25,680 --> 00:06:28,960
that i'm not going to go into because

191
00:06:26,960 --> 00:06:30,479
that's a talk in its own right but it'll

192
00:06:28,960 --> 00:06:32,159
do stuff like it'll generate change log

193
00:06:30,479 --> 00:06:32,960
files for you it'll generate an author's

194
00:06:32,160 --> 00:06:36,720
file

195
00:06:32,960 --> 00:06:38,560
it'll manage release notes it'll

196
00:06:36,720 --> 00:06:40,479
do basically everything under the sun

197
00:06:38,560 --> 00:06:43,600
for you whether you want it all

198
00:06:40,479 --> 00:06:45,440
or not is a different matter but very

199
00:06:43,600 --> 00:06:48,080
very powerful tool

200
00:06:45,440 --> 00:06:50,080
and the main advantages like i said of

201
00:06:48,080 --> 00:06:51,680
using these tools is that you can just

202
00:06:50,080 --> 00:06:53,199
completely forget about versioning from

203
00:06:51,680 --> 00:06:55,440
the perspective of actually

204
00:06:53,199 --> 00:06:56,720
having to hard code some strings

205
00:06:55,440 --> 00:06:59,919
somewhere

206
00:06:56,720 --> 00:07:02,319
you just tag your package you build your

207
00:06:59,919 --> 00:07:03,198
tower balls and you push them up to pipe

208
00:07:02,319 --> 00:07:07,520
i and you are

209
00:07:03,199 --> 00:07:07,520
done all very nice and handy

210
00:07:09,360 --> 00:07:12,639
the second of the three focus areas i

211
00:07:11,840 --> 00:07:15,520
want to look at

212
00:07:12,639 --> 00:07:16,160
is how do you actually declare

213
00:07:15,520 --> 00:07:19,359
individual

214
00:07:16,160 --> 00:07:21,759
changes in your package or

215
00:07:19,360 --> 00:07:22,720
your library to whoever is consuming

216
00:07:21,759 --> 00:07:24,400
that library

217
00:07:22,720 --> 00:07:26,560
whether it's someone in your team at

218
00:07:24,400 --> 00:07:28,840
work or someone some random on the

219
00:07:26,560 --> 00:07:30,319
internet that just happens to consume

220
00:07:28,840 --> 00:07:33,280
that

221
00:07:30,319 --> 00:07:34,080
and the normal way of doing this would

222
00:07:33,280 --> 00:07:36,239
be

223
00:07:34,080 --> 00:07:38,159
either you don't document it or you

224
00:07:36,240 --> 00:07:39,840
document it in some giant

225
00:07:38,160 --> 00:07:41,199
change log file that people have to go

226
00:07:39,840 --> 00:07:42,638
down and skim through to

227
00:07:41,199 --> 00:07:44,960
figure out what the hell has changed and

228
00:07:42,639 --> 00:07:46,479
why does version 2 of this library no

229
00:07:44,960 --> 00:07:50,400
longer contain

230
00:07:46,479 --> 00:07:52,080
these apis or has changed the behavior

231
00:07:50,400 --> 00:07:55,198
of them

232
00:07:52,080 --> 00:07:57,758
and developers like

233
00:07:55,199 --> 00:07:59,120
the idea of coding a aversion string

234
00:07:57,759 --> 00:08:01,280
into your package

235
00:07:59,120 --> 00:08:02,720
they tend to hate writing ducks and if

236
00:08:01,280 --> 00:08:05,198
you can get them to write docs at all

237
00:08:02,720 --> 00:08:07,840
you're doing pretty well

238
00:08:05,199 --> 00:08:08,560
so what you'd hopefully be trying to do

239
00:08:07,840 --> 00:08:11,440
is get

240
00:08:08,560 --> 00:08:11,840
the documentation to live inside in the

241
00:08:11,440 --> 00:08:15,680
code

242
00:08:11,840 --> 00:08:17,679
itself and this is what projects like

243
00:08:15,680 --> 00:08:18,960
django in the previous talk and other

244
00:08:17,680 --> 00:08:21,280
tools like sphinx

245
00:08:18,960 --> 00:08:23,120
do themselves they have their own custom

246
00:08:21,280 --> 00:08:26,080
tooling built around

247
00:08:23,120 --> 00:08:26,720
the warnings framework where you import

248
00:08:26,080 --> 00:08:30,400
something

249
00:08:26,720 --> 00:08:31,680
and it's deprecated in django 2 2 and

250
00:08:30,400 --> 00:08:34,799
then removed in django 3

251
00:08:31,680 --> 00:08:38,000
3 or 3 0 you'll see a warning pop up

252
00:08:34,799 --> 00:08:40,240
when you run try to use that api saying

253
00:08:38,000 --> 00:08:43,360
this still works but it's going very

254
00:08:40,240 --> 00:08:44,959
soon to switch over to something new

255
00:08:43,360 --> 00:08:46,640
and you can go and reinvent the wheel

256
00:08:44,959 --> 00:08:49,680
you can go do all this yourself

257
00:08:46,640 --> 00:08:52,399
but why would you do that when there are

258
00:08:49,680 --> 00:08:54,640
tools out there that'll do it for you

259
00:08:52,399 --> 00:08:56,240
so once again with two tools first of

260
00:08:54,640 --> 00:08:58,240
these is one that's from the board a

261
00:08:56,240 --> 00:08:59,279
python ecosystem and another one has

262
00:08:58,240 --> 00:09:02,240
been developed

263
00:08:59,279 --> 00:09:03,760
uh within openstack to uh to serve a

264
00:09:02,240 --> 00:09:06,160
similar purpose

265
00:09:03,760 --> 00:09:06,800
as with the last one i have a clear

266
00:09:06,160 --> 00:09:10,000
preference

267
00:09:06,800 --> 00:09:11,839
um which i'll try to not highlight too

268
00:09:10,000 --> 00:09:15,760
much

269
00:09:11,839 --> 00:09:18,480
deprecation is the simpler of the two

270
00:09:15,760 --> 00:09:19,200
it gives you decorators that you can

271
00:09:18,480 --> 00:09:21,440
decorate

272
00:09:19,200 --> 00:09:23,040
random functions with and you can say

273
00:09:21,440 --> 00:09:25,519
that the thing has been deprecated what

274
00:09:23,040 --> 00:09:27,360
version it was deprecated in

275
00:09:25,519 --> 00:09:29,040
when you plan to remove it if you plan

276
00:09:27,360 --> 00:09:31,440
to remove it and

277
00:09:29,040 --> 00:09:32,560
some details for the um the user to

278
00:09:31,440 --> 00:09:34,320
actually figure out

279
00:09:32,560 --> 00:09:36,959
why these things have changed and maybe

280
00:09:34,320 --> 00:09:39,440
what they should do instead

281
00:09:36,959 --> 00:09:40,719
you go and you run this code and you'll

282
00:09:39,440 --> 00:09:42,080
see

283
00:09:40,720 --> 00:09:43,839
warnings like this popping up with your

284
00:09:42,080 --> 00:09:45,120
code exact same kind of thing you'll see

285
00:09:43,839 --> 00:09:48,160
if you've ever worked on

286
00:09:45,120 --> 00:09:51,600
django or if you've ever used sphinx

287
00:09:48,160 --> 00:09:54,640
from an extension perspective

288
00:09:51,600 --> 00:09:57,200
very simple very easy to use debt

289
00:09:54,640 --> 00:09:57,199
collector

290
00:09:57,360 --> 00:10:03,440
initially looks very very similar

291
00:10:01,040 --> 00:10:04,640
again a version of removal versions some

292
00:10:03,440 --> 00:10:06,560
messages

293
00:10:04,640 --> 00:10:08,560
to help inform the user as to what's

294
00:10:06,560 --> 00:10:10,500
actually changed

295
00:10:08,560 --> 00:10:11,920
and the behavior looks almost the same

296
00:10:10,500 --> 00:10:14,880
[Music]

297
00:10:11,920 --> 00:10:16,640
but it also lets you do things like move

298
00:10:14,880 --> 00:10:18,399
modules between different places move

299
00:10:16,640 --> 00:10:19,360
classes that kind of thing so you decide

300
00:10:18,399 --> 00:10:21,680
that you want

301
00:10:19,360 --> 00:10:22,959
to move your compatibility module under

302
00:10:21,680 --> 00:10:27,040
the utils

303
00:10:22,959 --> 00:10:29,199
module you can do that you can put in a

304
00:10:27,040 --> 00:10:30,640
an alias essentially in the old place

305
00:10:29,200 --> 00:10:32,079
move all the code across and then

306
00:10:30,640 --> 00:10:34,720
eventually remove that alias once

307
00:10:32,079 --> 00:10:38,560
everyone has had time to switch over

308
00:10:34,720 --> 00:10:40,800
uh again super super powerful tool

309
00:10:38,560 --> 00:10:43,839
and a very useful way of avoiding

310
00:10:40,800 --> 00:10:44,800
reinventing the wheel

311
00:10:43,839 --> 00:10:47,839
it looks almost the same when you're

312
00:10:44,800 --> 00:10:47,839
actually going running

313
00:10:49,920 --> 00:10:56,240
the third of these then is

314
00:10:53,120 --> 00:10:58,320
possibly the one that's most useful to

315
00:10:56,240 --> 00:10:59,600
almost everyone here because this

316
00:10:58,320 --> 00:11:02,000
doesn't necessarily

317
00:10:59,600 --> 00:11:03,680
require you to be working on a library

318
00:11:02,000 --> 00:11:05,279
this is also useful if you happen to be

319
00:11:03,680 --> 00:11:07,839
working on a web application

320
00:11:05,279 --> 00:11:09,600
or some qe application of client

321
00:11:07,839 --> 00:11:12,079
whatever

322
00:11:09,600 --> 00:11:14,720
you want to be able to expose not just

323
00:11:12,079 --> 00:11:17,439
api changes but any kind of change

324
00:11:14,720 --> 00:11:18,560
back up to your user and say i've gone

325
00:11:17,440 --> 00:11:21,360
and removed

326
00:11:18,560 --> 00:11:22,719
this thing or i've added this thing and

327
00:11:21,360 --> 00:11:24,880
the way that people

328
00:11:22,720 --> 00:11:27,440
like as a reference earlier normally do

329
00:11:24,880 --> 00:11:29,519
this stuff is they write this giant ass

330
00:11:27,440 --> 00:11:30,880
change like file or news file or change

331
00:11:29,519 --> 00:11:31,680
this file or whatever you want to call

332
00:11:30,880 --> 00:11:34,000
it

333
00:11:31,680 --> 00:11:35,199
and they pump in all the information

334
00:11:34,000 --> 00:11:37,360
that they want either

335
00:11:35,200 --> 00:11:39,040
iteratively as they go along through the

336
00:11:37,360 --> 00:11:41,120
cycle or some

337
00:11:39,040 --> 00:11:42,319
poor fellow has to sit at the end of the

338
00:11:41,120 --> 00:11:44,480
cycle and try and figure out what the

339
00:11:42,320 --> 00:11:46,480
hell has just happened

340
00:11:44,480 --> 00:11:48,720
which is not fun the other thing you can

341
00:11:46,480 --> 00:11:51,920
do is try and pull this information

342
00:11:48,720 --> 00:11:54,880
from for example your git logs just do a

343
00:11:51,920 --> 00:11:55,279
diff between two different versions but

344
00:11:54,880 --> 00:11:56,639
that

345
00:11:55,279 --> 00:11:58,720
means you have to be very very

346
00:11:56,639 --> 00:12:00,480
regimented in terms of what your git

347
00:11:58,720 --> 00:12:04,000
commit messages look like

348
00:12:00,480 --> 00:12:05,120
um if any i because i work on openstack

349
00:12:04,000 --> 00:12:07,760
i tend to use garrett

350
00:12:05,120 --> 00:12:10,240
on a daily basis so i change like commit

351
00:12:07,760 --> 00:12:11,839
messages tend to make sense and then i

352
00:12:10,240 --> 00:12:13,040
switch over to github and i see pull

353
00:12:11,839 --> 00:12:14,880
requests and it's like

354
00:12:13,040 --> 00:12:16,399
fix up this typo fix up another type of

355
00:12:14,880 --> 00:12:20,720
fix up another typo

356
00:12:16,399 --> 00:12:23,120
they don't make very nice change locks

357
00:12:20,720 --> 00:12:26,320
and one other big issue with having this

358
00:12:23,120 --> 00:12:28,800
giant as changes file if it's done

359
00:12:26,320 --> 00:12:30,639
through the course of a cycle then if

360
00:12:28,800 --> 00:12:31,599
you have multiple people contributing to

361
00:12:30,639 --> 00:12:34,160
a project

362
00:12:31,600 --> 00:12:34,800
you end up having merge conflict hell

363
00:12:34,160 --> 00:12:36,480
where

364
00:12:34,800 --> 00:12:38,479
you have three or four features going in

365
00:12:36,480 --> 00:12:39,760
the space for two weeks the first guy

366
00:12:38,480 --> 00:12:42,720
that happens to get their

367
00:12:39,760 --> 00:12:43,279
feature in gets their change log updates

368
00:12:42,720 --> 00:12:44,720
in

369
00:12:43,279 --> 00:12:47,120
everyone else has to re-spin their

370
00:12:44,720 --> 00:12:50,000
patches and keep respinning them just to

371
00:12:47,120 --> 00:12:51,360
update trivial changes this is an

372
00:12:50,000 --> 00:12:53,040
example from sphinx

373
00:12:51,360 --> 00:12:54,399
in this case i just gave up writing

374
00:12:53,040 --> 00:12:57,920
change logs i figured that the

375
00:12:54,399 --> 00:12:57,920
maintainers would go and do it for me so

376
00:12:58,560 --> 00:13:03,199
thankfully if you're not sphinx there

377
00:13:01,600 --> 00:13:03,920
are two different projects that you can

378
00:13:03,200 --> 00:13:06,959
use

379
00:13:03,920 --> 00:13:08,719
to do this for you once again one from

380
00:13:06,959 --> 00:13:10,000
outside of openstack and the other one

381
00:13:08,720 --> 00:13:12,000
from inside openstack

382
00:13:10,000 --> 00:13:13,200
the one from inside openstack is super

383
00:13:12,000 --> 00:13:16,720
super powerful

384
00:13:13,200 --> 00:13:18,000
maybe too powerful but town choir the

385
00:13:16,720 --> 00:13:19,519
first of these

386
00:13:18,000 --> 00:13:23,200
[Music]

387
00:13:19,519 --> 00:13:26,240
ultra easy to use you write these

388
00:13:23,200 --> 00:13:29,279
five news fragments you dump it into

389
00:13:26,240 --> 00:13:31,600
some predetermined location and the

390
00:13:29,279 --> 00:13:34,240
fragments have a specific

391
00:13:31,600 --> 00:13:35,200
format they have a ticket id whether

392
00:13:34,240 --> 00:13:37,760
that's a github

393
00:13:35,200 --> 00:13:38,800
issue tracker number pull request number

394
00:13:37,760 --> 00:13:42,639
whatever

395
00:13:38,800 --> 00:13:43,439
they have a type of release note so if

396
00:13:42,639 --> 00:13:45,279
it's a feature

397
00:13:43,440 --> 00:13:47,279
if it's an upgrade impact that kind of

398
00:13:45,279 --> 00:13:49,680
thing and then they have

399
00:13:47,279 --> 00:13:51,040
the suffix and this is all restructured

400
00:13:49,680 --> 00:13:52,959
text-based

401
00:13:51,040 --> 00:13:54,639
might support markdown i've never tried

402
00:13:52,959 --> 00:13:57,599
it um

403
00:13:54,639 --> 00:13:58,959
go figure that out but you write your

404
00:13:57,600 --> 00:14:01,839
change log

405
00:13:58,959 --> 00:14:03,279
into one of these files and at the end

406
00:14:01,839 --> 00:14:07,839
of your cycle when you get

407
00:14:03,279 --> 00:14:10,320
decided you're releasing my package 0.9

408
00:14:07,839 --> 00:14:11,360
you'll go and run the town fire command

409
00:14:10,320 --> 00:14:13,360
and

410
00:14:11,360 --> 00:14:15,279
i've passed this with the draft flags so

411
00:14:13,360 --> 00:14:18,320
i can actually see what i want on the

412
00:14:15,279 --> 00:14:20,240
command line but what that will do is

413
00:14:18,320 --> 00:14:21,600
it will read all of those fragments and

414
00:14:20,240 --> 00:14:23,680
it will go put the

415
00:14:21,600 --> 00:14:25,279
order them accordingly squash them into

416
00:14:23,680 --> 00:14:27,439
one giant news file

417
00:14:25,279 --> 00:14:28,839
and dump that out into again a

418
00:14:27,440 --> 00:14:32,320
pre-configured

419
00:14:28,839 --> 00:14:35,360
destination you can then

420
00:14:32,320 --> 00:14:38,800
version control this add a release

421
00:14:35,360 --> 00:14:39,199
0.9 commit and include that as part of

422
00:14:38,800 --> 00:14:43,199
your

423
00:14:39,199 --> 00:14:45,680
tarball that you push up to to pipe it

424
00:14:43,199 --> 00:14:46,880
very simple again very nice and easy to

425
00:14:45,680 --> 00:14:48,880
use

426
00:14:46,880 --> 00:14:50,480
and this is what projects like toxics

427
00:14:48,880 --> 00:14:52,880
use

428
00:14:50,480 --> 00:14:55,120
possibly pi test and a few others as

429
00:14:52,880 --> 00:14:55,120
well

430
00:14:55,199 --> 00:15:01,599
vino is a whole other level of

431
00:14:58,320 --> 00:15:03,600
complexity so

432
00:15:01,600 --> 00:15:04,880
from the high level it looks pretty

433
00:15:03,600 --> 00:15:06,480
similar you

434
00:15:04,880 --> 00:15:08,720
only instead of having to manually

435
00:15:06,480 --> 00:15:09,920
create a command it provides these sub

436
00:15:08,720 --> 00:15:13,120
commands that will create

437
00:15:09,920 --> 00:15:16,079
the the abstract for other the

438
00:15:13,120 --> 00:15:18,480
fragment for you again into a

439
00:15:16,079 --> 00:15:21,359
predetermined place

440
00:15:18,480 --> 00:15:21,760
and that's a yaml file with restructured

441
00:15:21,360 --> 00:15:23,360
text

442
00:15:21,760 --> 00:15:25,519
snippets inside so you can have a

443
00:15:23,360 --> 00:15:26,320
release note for a particularly large

444
00:15:25,519 --> 00:15:28,480
feature

445
00:15:26,320 --> 00:15:31,279
that has for example it adds a new

446
00:15:28,480 --> 00:15:33,839
feature it deprecates an old feature

447
00:15:31,279 --> 00:15:35,199
and it also has some upgrade impacts

448
00:15:33,839 --> 00:15:38,560
that people deploy in this

449
00:15:35,199 --> 00:15:38,560
library need to be aware of

450
00:15:39,120 --> 00:15:42,240
but you don't actually need to go and

451
00:15:40,720 --> 00:15:44,160
combine this thing at the end of the

452
00:15:42,240 --> 00:15:46,160
cycle because reno was smart

453
00:15:44,160 --> 00:15:47,279
and reno's aware that you're using a git

454
00:15:46,160 --> 00:15:50,319
repo

455
00:15:47,279 --> 00:15:51,680
and it's aware that uh i knows that at

456
00:15:50,320 --> 00:15:52,800
the end of your cycle you should be

457
00:15:51,680 --> 00:15:55,359
tagging your commitment

458
00:15:52,800 --> 00:15:56,000
or you should be tagging your chosen

459
00:15:55,360 --> 00:15:59,279
release

460
00:15:56,000 --> 00:16:02,240
thing to say this is release 0.9

461
00:15:59,279 --> 00:16:04,160
and if you go and run if you go and run

462
00:16:02,240 --> 00:16:06,639
reno

463
00:16:04,160 --> 00:16:08,160
you can specify a particular version and

464
00:16:06,639 --> 00:16:09,519
it will skim down all the way through

465
00:16:08,160 --> 00:16:11,360
your git tree

466
00:16:09,519 --> 00:16:14,720
and it will figure out which of these

467
00:16:11,360 --> 00:16:17,759
release note fragments you would have

468
00:16:14,720 --> 00:16:21,440
map to a given release so uh

469
00:16:17,759 --> 00:16:22,959
i added five release notes for zero nine

470
00:16:21,440 --> 00:16:24,880
to 1.0

471
00:16:22,959 --> 00:16:26,399
it will take just those five and it'll

472
00:16:24,880 --> 00:16:27,839
put them out into a nice restructured

473
00:16:26,399 --> 00:16:29,360
text file that you can include in your

474
00:16:27,839 --> 00:16:30,880
documentation

475
00:16:29,360 --> 00:16:32,480
and it provides stuff like sphinx

476
00:16:30,880 --> 00:16:33,519
extensions so you don't need to actually

477
00:16:32,480 --> 00:16:35,519
worry about

478
00:16:33,519 --> 00:16:37,199
having to go and generate that file

479
00:16:35,519 --> 00:16:38,959
manually you just put in the directive

480
00:16:37,199 --> 00:16:42,479
somewhere

481
00:16:38,959 --> 00:16:43,359
and uh yeah it's just nice and it just

482
00:16:42,480 --> 00:16:45,759
works

483
00:16:43,360 --> 00:16:47,600
the only time reno breaks down is if you

484
00:16:45,759 --> 00:16:49,920
do what sphinx does

485
00:16:47,600 --> 00:16:51,839
and they have stable branches that they

486
00:16:49,920 --> 00:16:52,880
decide to merge back in on a periodic

487
00:16:51,839 --> 00:16:56,000
basis

488
00:16:52,880 --> 00:16:57,600
um then reno gets confused with like

489
00:16:56,000 --> 00:16:58,240
circular dependencies and that kind of

490
00:16:57,600 --> 00:16:59,920
thing

491
00:16:58,240 --> 00:17:01,839
but generally the way that i'm used to

492
00:16:59,920 --> 00:17:03,360
projects working you decide that this is

493
00:17:01,839 --> 00:17:04,000
going to be my saber release and you

494
00:17:03,360 --> 00:17:07,039
branch off

495
00:17:04,000 --> 00:17:08,799
and you just back cherry pick bug fixes

496
00:17:07,039 --> 00:17:10,480
as you're going along and those bug

497
00:17:08,799 --> 00:17:10,879
fixes just happen to include release

498
00:17:10,480 --> 00:17:12,959
notes

499
00:17:10,880 --> 00:17:14,640
so your stable branches get all the new

500
00:17:12,959 --> 00:17:18,240
release notes for those bug fixes that

501
00:17:14,640 --> 00:17:20,400
you're backboarding

502
00:17:18,240 --> 00:17:22,959
like i said this is what we use across

503
00:17:20,400 --> 00:17:24,959
the entire openstack ecosystem now

504
00:17:22,959 --> 00:17:26,799
so this is an example of release notes

505
00:17:24,959 --> 00:17:30,799
from probably nova

506
00:17:26,799 --> 00:17:32,799
maybe something else and as you can see

507
00:17:30,799 --> 00:17:35,039
we didn't write this single page this is

508
00:17:32,799 --> 00:17:36,799
all a whole load of release note chunks

509
00:17:35,039 --> 00:17:39,120
that people have contributed as they've

510
00:17:36,799 --> 00:17:40,960
gone and worked on these features

511
00:17:39,120 --> 00:17:42,719
and at the end of the cycle the thing

512
00:17:40,960 --> 00:17:44,400
has just been automatically generated

513
00:17:42,720 --> 00:17:45,280
and will continue to be automatically

514
00:17:44,400 --> 00:17:48,559
generated

515
00:17:45,280 --> 00:17:48,559
every time we build our docks

516
00:17:49,440 --> 00:17:52,960
and that's town cryo and reno and with

517
00:17:51,440 --> 00:17:54,880
that i'm going to return to us

518
00:17:52,960 --> 00:17:58,240
regularly schedule broadcast and get

519
00:17:54,880 --> 00:17:58,240
back to talking about brexit

520
00:17:58,799 --> 00:18:04,960
so yeah quick wrap up uh version 101

521
00:18:02,160 --> 00:18:06,160
three kind of focus areas uh how you can

522
00:18:04,960 --> 00:18:08,799
use your packaging

523
00:18:06,160 --> 00:18:10,799
to automatically automatically version

524
00:18:08,799 --> 00:18:12,960
your software through your packaging

525
00:18:10,799 --> 00:18:14,000
how you can indicate to consumers of a

526
00:18:12,960 --> 00:18:16,480
library that you

527
00:18:14,000 --> 00:18:17,840
have made changes to your the api of

528
00:18:16,480 --> 00:18:19,919
that library

529
00:18:17,840 --> 00:18:21,439
and then finally how you can go and

530
00:18:19,919 --> 00:18:25,679
document these changes to

531
00:18:21,440 --> 00:18:27,039
both api consumers and everyone else

532
00:18:25,679 --> 00:18:29,840
and with that thank you very much for

533
00:18:27,039 --> 00:18:29,840
coming

534
00:18:31,730 --> 00:18:34,900
[Music]

535
00:18:36,080 --> 00:18:40,320
and i'm happy to take any questions here

536
00:18:37,679 --> 00:18:40,320
or afterwards

537
00:18:40,480 --> 00:18:44,869
here we are

538
00:18:41,300 --> 00:18:44,869
[Music]

539
00:18:50,080 --> 00:18:55,520
yeah we have time for a few questions if

540
00:18:52,640 --> 00:19:00,000
you're interested just raise your hands

541
00:18:55,520 --> 00:19:02,240
and please exceed the room quietly

542
00:19:00,000 --> 00:19:02,240
okay

543
00:19:09,280 --> 00:19:12,799
i said quiet please

544
00:19:13,520 --> 00:19:17,440
thanks for the talk um do you do you

545
00:19:16,000 --> 00:19:20,640
think there's something missing

546
00:19:17,440 --> 00:19:22,640
something you haven't do you think

547
00:19:20,640 --> 00:19:25,280
do you think there's something missing

548
00:19:22,640 --> 00:19:27,760
something you some tool you

549
00:19:25,280 --> 00:19:30,399
some process that is still broken and

550
00:19:27,760 --> 00:19:33,760
some tool that you feel like you haven't

551
00:19:30,400 --> 00:19:36,720
written yet so if i

552
00:19:33,760 --> 00:19:38,640
i think the question was i think the

553
00:19:36,720 --> 00:19:40,559
question was uh

554
00:19:38,640 --> 00:19:42,320
is there still something missing even

555
00:19:40,559 --> 00:19:44,639
with these

556
00:19:42,320 --> 00:19:44,639
um

557
00:19:45,760 --> 00:19:48,879
probably the the biggest thing i notice

558
00:19:48,320 --> 00:19:52,240
missing

559
00:19:48,880 --> 00:19:53,679
is uh probably testing and a lack of

560
00:19:52,240 --> 00:19:55,520
understanding around things like

561
00:19:53,679 --> 00:19:59,280
semantic versioning

562
00:19:55,520 --> 00:20:01,679
so uh it is quite common

563
00:19:59,280 --> 00:20:02,960
the way that we do release of version

564
00:20:01,679 --> 00:20:06,559
package management

565
00:20:02,960 --> 00:20:09,679
in uh in openstack is we use constraints

566
00:20:06,559 --> 00:20:11,360
we say this is the upper bound on every

567
00:20:09,679 --> 00:20:12,080
package that in openstack that you can

568
00:20:11,360 --> 00:20:15,600
use

569
00:20:12,080 --> 00:20:19,199
so talks cannot not talks but

570
00:20:15,600 --> 00:20:21,199
deprecations cannot exceed version 2.0

571
00:20:19,200 --> 00:20:23,280
and at some point we will decide to bump

572
00:20:21,200 --> 00:20:26,720
2.0 up to 2.1

573
00:20:23,280 --> 00:20:29,760
and quite often for random packages uh

574
00:20:26,720 --> 00:20:31,600
2.1 removes a feature

575
00:20:29,760 --> 00:20:34,879
and it shouldn't because 3.0 should be

576
00:20:31,600 --> 00:20:36,879
the feature removal version

577
00:20:34,880 --> 00:20:38,559
so i guess yeah a lack of testing and a

578
00:20:36,880 --> 00:20:39,919
lack of understanding but that's

579
00:20:38,559 --> 00:20:41,360
software issues that i don't think

580
00:20:39,919 --> 00:20:43,600
libraries can really help you all that

581
00:20:41,360 --> 00:20:45,039
much with

582
00:20:43,600 --> 00:20:46,719
if you know how to do semantic

583
00:20:45,039 --> 00:20:48,559
versioning properly and you

584
00:20:46,720 --> 00:20:51,200
remember to make sure that you bump your

585
00:20:48,559 --> 00:20:54,879
version when you remove something and

586
00:20:51,200 --> 00:20:57,280
whatever then i think this gets you

587
00:20:54,880 --> 00:21:03,840
90 95 of the way there to what you

588
00:20:57,280 --> 00:21:03,840
actually want

589
00:21:04,720 --> 00:21:08,400
all right i'll just repeat what you say

590
00:21:10,720 --> 00:21:14,960
actually does this still manage uh

591
00:21:12,559 --> 00:21:17,120
version numbers but i do some advertise

592
00:21:14,960 --> 00:21:18,320
been just with package building because

593
00:21:17,120 --> 00:21:20,080
for instance our projects we have

594
00:21:18,320 --> 00:21:21,760
conventional like like four or five

595
00:21:20,080 --> 00:21:25,360
different places of projects

596
00:21:21,760 --> 00:21:25,360
and use tools such as filters

597
00:21:26,640 --> 00:21:31,520
so that the question was for tools like

598
00:21:28,840 --> 00:21:35,120
pbr

599
00:21:31,520 --> 00:21:36,000
do you have the ability to get the

600
00:21:35,120 --> 00:21:38,239
version

601
00:21:36,000 --> 00:21:45,840
elsewhere in the project instead of it

602
00:21:38,240 --> 00:21:48,240
being statically

603
00:21:45,840 --> 00:21:49,439
yeah so from within the python code

604
00:21:48,240 --> 00:21:52,640
itself

605
00:21:49,440 --> 00:21:55,919
pbr provides a couple of uh

606
00:21:52,640 --> 00:21:57,200
essentially wrappers over uh package

607
00:21:55,919 --> 00:22:00,320
utils or something

608
00:21:57,200 --> 00:22:02,559
one of the setup tools subprojects

609
00:22:00,320 --> 00:22:04,080
that will give you the package version

610
00:22:02,559 --> 00:22:05,039
all the information about your installed

611
00:22:04,080 --> 00:22:07,280
package

612
00:22:05,039 --> 00:22:08,480
the only problem with that is that it

613
00:22:07,280 --> 00:22:10,559
relies on the package

614
00:22:08,480 --> 00:22:12,799
actually being installed so it won't

615
00:22:10,559 --> 00:22:14,480
work for example if somebody just dumps

616
00:22:12,799 --> 00:22:16,080
the tarball out somewhere instead of pip

617
00:22:14,480 --> 00:22:18,640
installing it

618
00:22:16,080 --> 00:22:19,918
um if you do that i'm not actually sure

619
00:22:18,640 --> 00:22:21,039
i haven't done that with a python

620
00:22:19,919 --> 00:22:26,880
package for a long time

621
00:22:21,039 --> 00:22:29,520
so is that

622
00:22:26,880 --> 00:22:29,520
anything else

623
00:22:30,060 --> 00:22:33,760
[Music]

624
00:22:31,440 --> 00:22:41,840
if not thank you very much enjoy the

625
00:22:33,760 --> 00:22:41,840
rest of your life

626
00:22:44,400 --> 00:22:46,480
you

