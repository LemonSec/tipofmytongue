1
00:00:07,919 --> 00:00:13,440
okay let's start then

2
00:00:09,920 --> 00:00:15,920
hi everyone i am dario and thanks for

3
00:00:13,440 --> 00:00:16,880
coming to see this talk about

4
00:00:15,920 --> 00:00:19,039
performance

5
00:00:16,880 --> 00:00:20,080
testing and benchmarking for

6
00:00:19,039 --> 00:00:23,359
virtualization

7
00:00:20,080 --> 00:00:27,680
so let's start what i have here

8
00:00:23,359 --> 00:00:30,880
is a really non comprehensive list of

9
00:00:27,680 --> 00:00:33,920
tools of testing benchmarking ci

10
00:00:30,880 --> 00:00:36,000
tools that

11
00:00:33,920 --> 00:00:37,120
exist already that are out there and can

12
00:00:36,000 --> 00:00:40,640
be used

13
00:00:37,120 --> 00:00:41,360
and the part of the aim of having this

14
00:00:40,640 --> 00:00:44,879
list up

15
00:00:41,360 --> 00:00:48,079
was to give the idea that

16
00:00:44,879 --> 00:00:49,680
there are quite a few of them already as

17
00:00:48,079 --> 00:00:52,079
we probably all know

18
00:00:49,680 --> 00:00:53,440
so i mean i hope you don't think that

19
00:00:52,079 --> 00:00:57,520
with this talk

20
00:00:53,440 --> 00:00:59,680
i am going to talk about and propose to

21
00:00:57,520 --> 00:01:03,760
use yet another one

22
00:00:59,680 --> 00:01:06,080
will i of course i am and

23
00:01:03,760 --> 00:01:07,280
well that's actually not entirely true

24
00:01:06,080 --> 00:01:10,080
and we will see about that

25
00:01:07,280 --> 00:01:11,360
a little bit later but um let's uh

26
00:01:10,080 --> 00:01:13,760
introduce the subject

27
00:01:11,360 --> 00:01:14,960
of performance benchmarking with

28
00:01:13,760 --> 00:01:17,920
thinking about

29
00:01:14,960 --> 00:01:19,199
how you would uh assess the performance

30
00:01:17,920 --> 00:01:21,840
impact of let's say

31
00:01:19,200 --> 00:01:22,479
a change in the code for example let's

32
00:01:21,840 --> 00:01:24,479
say that

33
00:01:22,479 --> 00:01:25,679
the change is in the linux scanner but

34
00:01:24,479 --> 00:01:28,640
well

35
00:01:25,680 --> 00:01:29,119
theory could be anywhere and what you do

36
00:01:28,640 --> 00:01:31,280
for

37
00:01:29,119 --> 00:01:32,479
uh figuring out whether this change

38
00:01:31,280 --> 00:01:34,799
brings performance

39
00:01:32,479 --> 00:01:36,400
uh any difference in performances so

40
00:01:34,799 --> 00:01:40,560
better awards

41
00:01:36,400 --> 00:01:42,799
performance you run a benchmark

42
00:01:40,560 --> 00:01:44,880
without the the change applied then you

43
00:01:42,799 --> 00:01:46,799
run the same benchmark actually

44
00:01:44,880 --> 00:01:49,360
most of the time more than one within

45
00:01:46,799 --> 00:01:52,000
one benchmark

46
00:01:49,360 --> 00:01:52,960
you rerun them with the change applied

47
00:01:52,000 --> 00:01:56,560
and then you

48
00:01:52,960 --> 00:01:59,839
check the difference the reason

49
00:01:56,560 --> 00:02:02,479
now this is what you do for

50
00:01:59,840 --> 00:02:03,280
let's say bare metal benchmark what

51
00:02:02,479 --> 00:02:06,320
about

52
00:02:03,280 --> 00:02:08,800
if no sorry what about if we

53
00:02:06,320 --> 00:02:11,759
put a virtualization into the picture

54
00:02:08,800 --> 00:02:11,759
into the question then

55
00:02:11,840 --> 00:02:17,280
turns out that things becomes a little

56
00:02:15,040 --> 00:02:21,120
bit more complicated because there are

57
00:02:17,280 --> 00:02:23,120
quite a few more cases that you have to

58
00:02:21,120 --> 00:02:24,720
think about and actually go checking

59
00:02:23,120 --> 00:02:25,760
this is just an example for saw the

60
00:02:24,720 --> 00:02:28,080
example where

61
00:02:25,760 --> 00:02:30,000
you have to consider all the cases when

62
00:02:28,080 --> 00:02:33,519
the change that you are interested

63
00:02:30,000 --> 00:02:35,440
uh is either nowhere so neither in the

64
00:02:33,519 --> 00:02:37,200
host kernel nor in the vitro machine

65
00:02:35,440 --> 00:02:39,280
kernels

66
00:02:37,200 --> 00:02:41,280
or it's only in one of them in one of

67
00:02:39,280 --> 00:02:42,959
these places either on the host only on

68
00:02:41,280 --> 00:02:45,519
the host or only on the guest

69
00:02:42,959 --> 00:02:46,560
or it's in books and you have to run the

70
00:02:45,519 --> 00:02:48,720
same benchmarks

71
00:02:46,560 --> 00:02:50,560
in all these cases and figure it out of

72
00:02:48,720 --> 00:02:52,160
course this depends on your

73
00:02:50,560 --> 00:02:54,560
use case on the water that you are

74
00:02:52,160 --> 00:02:58,239
interested but in general

75
00:02:54,560 --> 00:03:01,280
uh it could be like this also uh

76
00:02:58,239 --> 00:03:04,560
well yes and of course uh what the

77
00:03:01,280 --> 00:03:06,640
one of the other differences is that

78
00:03:04,560 --> 00:03:07,680
in this case the benchmarks yes they

79
00:03:06,640 --> 00:03:10,319
still run but they run

80
00:03:07,680 --> 00:03:11,120
inside the virtual machines quite

81
00:03:10,319 --> 00:03:14,159
obvious but

82
00:03:11,120 --> 00:03:15,840
let me just point it out uh let's now

83
00:03:14,159 --> 00:03:19,359
focus on

84
00:03:15,840 --> 00:03:20,959
for example these two situations where

85
00:03:19,360 --> 00:03:21,920
we want to see the difference whether no

86
00:03:20,959 --> 00:03:25,120
change

87
00:03:21,920 --> 00:03:28,159
uh whatsoever or change applied both

88
00:03:25,120 --> 00:03:30,640
austin guests i mean is it really

89
00:03:28,159 --> 00:03:32,159
always the case that this is okay this

90
00:03:30,640 --> 00:03:36,238
is enough so we want

91
00:03:32,159 --> 00:03:39,519
to check the performance

92
00:03:36,239 --> 00:03:42,560
when running only one virtual machine

93
00:03:39,519 --> 00:03:45,040
maybe but maybe not maybe we want

94
00:03:42,560 --> 00:03:46,319
uh we also hear about use cases where on

95
00:03:45,040 --> 00:03:47,280
the os there are multiple virtual

96
00:03:46,319 --> 00:03:50,640
machines running

97
00:03:47,280 --> 00:03:51,440
and so now what uh is happening is that

98
00:03:50,640 --> 00:03:54,640
you have to

99
00:03:51,440 --> 00:03:56,799
rerun your benchmark not only in all

100
00:03:54,640 --> 00:03:59,839
these different use cases not but

101
00:03:56,799 --> 00:04:01,120
not but also and not only in one in just

102
00:03:59,840 --> 00:04:03,360
one virtual machine but

103
00:04:01,120 --> 00:04:04,560
in multiple virtual machine and most of

104
00:04:03,360 --> 00:04:06,879
the time uh

105
00:04:04,560 --> 00:04:07,599
at the same time so basically what you

106
00:04:06,879 --> 00:04:10,560
would need

107
00:04:07,599 --> 00:04:11,359
is something some tool that would help

108
00:04:10,560 --> 00:04:13,519
you

109
00:04:11,360 --> 00:04:16,000
as for example the developers of such a

110
00:04:13,519 --> 00:04:18,959
change of the change that you are

111
00:04:16,000 --> 00:04:19,839
talking about uh tool that would help

112
00:04:18,959 --> 00:04:21,680
you to

113
00:04:19,839 --> 00:04:23,599
run benchmark inside virtual machines

114
00:04:21,680 --> 00:04:25,840
that's the first thing

115
00:04:23,600 --> 00:04:26,960
but you probably want to be able to run

116
00:04:25,840 --> 00:04:29,039
benchmarks inside

117
00:04:26,960 --> 00:04:30,719
multiple virtual machines and you may

118
00:04:29,040 --> 00:04:32,160
want to be able to run the benchmarks

119
00:04:30,720 --> 00:04:33,600
inside multiple virtual machines at the

120
00:04:32,160 --> 00:04:33,919
same time and if they run at the same

121
00:04:33,600 --> 00:04:36,720
time

122
00:04:33,919 --> 00:04:38,080
you are interested in in the results of

123
00:04:36,720 --> 00:04:40,080
all these benchmark runs in all these

124
00:04:38,080 --> 00:04:41,199
virtual machines then you also had to

125
00:04:40,080 --> 00:04:44,800
think about

126
00:04:41,199 --> 00:04:46,720
a way of making sure that the benchmarks

127
00:04:44,800 --> 00:04:47,919
are running in a kind of synchronized

128
00:04:46,720 --> 00:04:50,080
way because you want

129
00:04:47,919 --> 00:04:51,120
i don't know all the cpu benchmarks to

130
00:04:50,080 --> 00:04:52,800
uh start

131
00:04:51,120 --> 00:04:54,560
at the same time and if the benchmark if

132
00:04:52,800 --> 00:04:56,479
each one of these benchmarks does for

133
00:04:54,560 --> 00:04:58,160
example multiple iterations and also the

134
00:04:56,479 --> 00:04:59,359
single iteration inside the benchmarks

135
00:04:58,160 --> 00:05:00,800
is to be

136
00:04:59,360 --> 00:05:02,560
synchronized otherwise the results that

137
00:05:00,800 --> 00:05:05,280
you will get are

138
00:05:02,560 --> 00:05:06,400
well not usually not the one no not so

139
00:05:05,280 --> 00:05:11,599
um

140
00:05:06,400 --> 00:05:14,239
interesting and may not want the the

141
00:05:11,600 --> 00:05:14,800
maybe not the one you want so let's

142
00:05:14,240 --> 00:05:17,520
speak

143
00:05:14,800 --> 00:05:18,560
uh briefly about these two uh called mm

144
00:05:17,520 --> 00:05:22,960
test uh

145
00:05:18,560 --> 00:05:22,960
it's not really a new tool because it's

146
00:05:23,680 --> 00:05:27,280
basically a test suite of much a

147
00:05:25,680 --> 00:05:30,400
benchmarking suit which

148
00:05:27,280 --> 00:05:33,599
uh is out there since quite a while

149
00:05:30,400 --> 00:05:34,560
it was born as a tool for uh testing and

150
00:05:33,600 --> 00:05:36,160
benchmarking

151
00:05:34,560 --> 00:05:39,120
uh memory management code in the linux

152
00:05:36,160 --> 00:05:40,639
kernel the original and still the

153
00:05:39,120 --> 00:05:42,800
original author and still the

154
00:05:40,639 --> 00:05:43,680
maintainer and main developer is my

155
00:05:42,800 --> 00:05:47,280
colleague susan

156
00:05:43,680 --> 00:05:49,840
gorman and but yeah it has evolved a lot

157
00:05:47,280 --> 00:05:53,039
since these days uh it's not only

158
00:05:49,840 --> 00:05:56,239
mm only it leaves there that

159
00:05:53,039 --> 00:05:59,680
github address you can go try it

160
00:05:56,240 --> 00:06:01,840
and yeah and talk to us

161
00:05:59,680 --> 00:06:03,680
if there is something that you don't

162
00:06:01,840 --> 00:06:05,840
that doesn't work for you or

163
00:06:03,680 --> 00:06:08,080
of questions you can open github issues

164
00:06:05,840 --> 00:06:09,679
but we are not yet monitoring those

165
00:06:08,080 --> 00:06:11,120
very actively so the best thing is to

166
00:06:09,680 --> 00:06:14,160
email uh

167
00:06:11,120 --> 00:06:14,160
either mel or me

168
00:06:15,039 --> 00:06:23,280
and yeah what is it it's a collection of

169
00:06:18,960 --> 00:06:27,198
uh bashing pearl and

170
00:06:23,280 --> 00:06:32,159
what it does is it fetches

171
00:06:27,199 --> 00:06:35,840
it configures it builds and then it runs

172
00:06:32,160 --> 00:06:35,840
one or more benchmarks

173
00:06:36,319 --> 00:06:42,400
it also collects and

174
00:06:39,520 --> 00:06:45,440
stores on the file system the results

175
00:06:42,400 --> 00:06:48,479
and they lets you compare the results

176
00:06:45,440 --> 00:06:51,360
of different runs and we have

177
00:06:48,479 --> 00:06:52,560
and there are statistics that you can uh

178
00:06:51,360 --> 00:06:56,720
look at

179
00:06:52,560 --> 00:06:59,120
and you also can and it also can plot

180
00:06:56,720 --> 00:07:00,000
and it supports what we call monitors so

181
00:06:59,120 --> 00:07:01,440
basically

182
00:07:00,000 --> 00:07:03,759
this is a very nice feature according to

183
00:07:01,440 --> 00:07:05,280
me at least uh while you you can

184
00:07:03,759 --> 00:07:07,039
configure the things in such a way that

185
00:07:05,280 --> 00:07:09,679
while the benchmark are running

186
00:07:07,039 --> 00:07:10,240
then the tool will sample for you stuff

187
00:07:09,680 --> 00:07:12,160
like

188
00:07:10,240 --> 00:07:13,440
top vm start mp start and then you will

189
00:07:12,160 --> 00:07:16,080
have these uh

190
00:07:13,440 --> 00:07:17,360
numbers as well and also it's also

191
00:07:16,080 --> 00:07:19,599
integrated at least up to a certain

192
00:07:17,360 --> 00:07:22,880
extent with perfect trace

193
00:07:19,599 --> 00:07:24,159
so both monitoring tracing if you if you

194
00:07:22,880 --> 00:07:27,599
want

195
00:07:24,160 --> 00:07:29,039
um there are quite a few uh benchmarks

196
00:07:27,599 --> 00:07:30,800
that are already available already

197
00:07:29,039 --> 00:07:34,400
pre-configured there

198
00:07:30,800 --> 00:07:37,440
if you just clone the sources and

199
00:07:34,400 --> 00:07:41,280
and want to try

200
00:07:37,440 --> 00:07:44,800
one of these each one of them

201
00:07:41,280 --> 00:07:46,239
is there with multiple

202
00:07:44,800 --> 00:07:49,039
let's say multiple and different

203
00:07:46,240 --> 00:07:51,440
configurations there is a directory

204
00:07:49,039 --> 00:07:52,960
in a code where all the configuration

205
00:07:51,440 --> 00:07:54,960
files are stored and there are multiple

206
00:07:52,960 --> 00:07:58,000
confidential files for

207
00:07:54,960 --> 00:08:00,318
most of these benchmarks some of

208
00:07:58,000 --> 00:08:01,960
some of them and there are also scripts

209
00:08:00,319 --> 00:08:03,199
that say that

210
00:08:01,960 --> 00:08:06,318
[Music]

211
00:08:03,199 --> 00:08:08,639
we generate more variations uh so

212
00:08:06,319 --> 00:08:11,280
even more configuration files so even

213
00:08:08,639 --> 00:08:13,360
more diverse

214
00:08:11,280 --> 00:08:14,638
configurations again for this for the

215
00:08:13,360 --> 00:08:16,560
various benchmarks this is

216
00:08:14,639 --> 00:08:18,639
uh an example of a configuration file

217
00:08:16,560 --> 00:08:22,000
it's just a collection of

218
00:08:18,639 --> 00:08:25,520
bush exported variables of course

219
00:08:22,000 --> 00:08:29,039
uh there are some uh this one hey

220
00:08:25,520 --> 00:08:31,039
this one here which are more or less

221
00:08:29,039 --> 00:08:32,559
common to all the benchmarks

222
00:08:31,039 --> 00:08:34,240
this is the monitors that i was they

223
00:08:32,559 --> 00:08:35,439
were saying before you can choose which

224
00:08:34,240 --> 00:08:37,599
one you want

225
00:08:35,440 --> 00:08:39,279
um to be active while running the

226
00:08:37,599 --> 00:08:41,200
benchmark and there are some other which

227
00:08:39,279 --> 00:08:44,880
are specific for the benchmark now for

228
00:08:41,200 --> 00:08:46,880
uh fully understanding them you have to

229
00:08:44,880 --> 00:08:48,320
know uh just a little bit what the

230
00:08:46,880 --> 00:08:50,399
benchmark does and

231
00:08:48,320 --> 00:08:51,920
uh how it works but once you do that

232
00:08:50,399 --> 00:08:54,480
it's pretty

233
00:08:51,920 --> 00:08:56,479
easy to for example change the number of

234
00:08:54,480 --> 00:08:58,399
iterations that you want a stream to

235
00:08:56,480 --> 00:09:00,720
run for each for each round for each

236
00:08:58,399 --> 00:09:03,040
benchmark or the placing policy with uh

237
00:09:00,720 --> 00:09:04,880
for for openmp or the bid flux or

238
00:09:03,040 --> 00:09:08,240
whatever

239
00:09:04,880 --> 00:09:10,080
so yeah it's that's how you use it

240
00:09:08,240 --> 00:09:12,080
uh so you use the script which is called

241
00:09:10,080 --> 00:09:13,920
random tests

242
00:09:12,080 --> 00:09:15,839
not a stage you specify the config file

243
00:09:13,920 --> 00:09:16,399
you specify a name for that particular

244
00:09:15,839 --> 00:09:19,360
run

245
00:09:16,399 --> 00:09:20,800
then you do another run after you have i

246
00:09:19,360 --> 00:09:23,040
don't know applied or changed

247
00:09:20,800 --> 00:09:24,079
change the configuration whatever it is

248
00:09:23,040 --> 00:09:25,680
that you want to

249
00:09:24,080 --> 00:09:27,279
measure the difference between in

250
00:09:25,680 --> 00:09:29,519
between and

251
00:09:27,279 --> 00:09:31,360
then you can compare the results you can

252
00:09:29,519 --> 00:09:33,200
use these compare kernel

253
00:09:31,360 --> 00:09:35,519
wrapper scripts such as its own

254
00:09:33,200 --> 00:09:38,240
parameters or you can use directly

255
00:09:35,519 --> 00:09:39,920
these other facilities uh which one test

256
00:09:38,240 --> 00:09:43,040
provides

257
00:09:39,920 --> 00:09:45,040
and uh which i'm showing you

258
00:09:43,040 --> 00:09:46,480
uh in a little bit more details so this

259
00:09:45,040 --> 00:09:49,439
one for example is for

260
00:09:46,480 --> 00:09:50,080
seeing the actual results and the

261
00:09:49,440 --> 00:09:51,920
comparison

262
00:09:50,080 --> 00:09:53,440
because here you see so in this case

263
00:09:51,920 --> 00:09:56,240
i've run a net pair f

264
00:09:53,440 --> 00:09:57,440
uh with different pattern sizes and

265
00:09:56,240 --> 00:10:00,240
these are the absolute

266
00:09:57,440 --> 00:10:02,160
results the absolute numbers uh from the

267
00:10:00,240 --> 00:10:04,000
first round these are the absolute

268
00:10:02,160 --> 00:10:06,000
numbers for the second run and these are

269
00:10:04,000 --> 00:10:07,519
and these in parentheses are the percent

270
00:10:06,000 --> 00:10:11,200
differences

271
00:10:07,519 --> 00:10:11,200
for each for each packet size

272
00:10:11,390 --> 00:10:16,480
[Music]

273
00:10:12,800 --> 00:10:19,359
you can have a overall

274
00:10:16,480 --> 00:10:20,160
comparison of these two runs because as

275
00:10:19,360 --> 00:10:23,040
we saw

276
00:10:20,160 --> 00:10:24,800
uh in this case the the benchmark was

277
00:10:23,040 --> 00:10:27,839
run with different parking sizes

278
00:10:24,800 --> 00:10:30,160
uh is there a way to aggregate all these

279
00:10:27,839 --> 00:10:31,120
uh results in one another overall view

280
00:10:30,160 --> 00:10:34,240
of how the

281
00:10:31,120 --> 00:10:36,940
benchmark went well there is

282
00:10:34,240 --> 00:10:38,240
it's it's this one

283
00:10:36,940 --> 00:10:39,760
[Music]

284
00:10:38,240 --> 00:10:41,360
yeah we basically we do the geometric

285
00:10:39,760 --> 00:10:44,319
mean of all the ratios and we use the

286
00:10:41,360 --> 00:10:44,320
geometric mean because

287
00:10:44,480 --> 00:10:48,399
people who understand statistically

288
00:10:45,920 --> 00:10:51,839
better than me uh thinks that uh

289
00:10:48,399 --> 00:10:53,120
it's the it's a good uh type of mean to

290
00:10:51,839 --> 00:10:56,160
use so i

291
00:10:53,120 --> 00:10:56,880
agree with them and yeah and these are

292
00:10:56,160 --> 00:11:00,000
the monitors

293
00:10:56,880 --> 00:11:02,720
so basically uh again you can have

294
00:11:00,000 --> 00:11:03,680
printed the the you can ask mm test to

295
00:11:02,720 --> 00:11:06,880
print

296
00:11:03,680 --> 00:11:09,839
the comparison between the

297
00:11:06,880 --> 00:11:11,760
values that he has it has sampled for

298
00:11:09,839 --> 00:11:13,600
these monitors during the

299
00:11:11,760 --> 00:11:15,839
the two rounds and this is another

300
00:11:13,600 --> 00:11:18,880
example of monitors this one

301
00:11:15,839 --> 00:11:20,480
was just monitoring the duration which

302
00:11:18,880 --> 00:11:21,680
is very trivial and this other one was

303
00:11:20,480 --> 00:11:24,720
actually using a

304
00:11:21,680 --> 00:11:28,239
pair for collecting these metrics so

305
00:11:24,720 --> 00:11:31,920
migrations counter switches

306
00:11:28,240 --> 00:11:31,920
and yeah as i said you can plot

307
00:11:34,240 --> 00:11:40,880
okay so a couple of

308
00:11:37,440 --> 00:11:41,360
beware of which are the first one is

309
00:11:40,880 --> 00:11:46,079
that

310
00:11:41,360 --> 00:11:48,800
it pretty much i mean it requires root

311
00:11:46,079 --> 00:11:49,680
there are you can even run without root

312
00:11:48,800 --> 00:11:52,079
privileges but

313
00:11:49,680 --> 00:11:53,279
uh well it depends on the benchmarks and

314
00:11:52,079 --> 00:11:55,359
the defense of what you want to do for

315
00:11:53,279 --> 00:11:58,720
example you can

316
00:11:55,360 --> 00:12:00,880
ask cmm test to uh change the

317
00:11:58,720 --> 00:12:02,079
uh cpu frequency performance while

318
00:12:00,880 --> 00:12:05,360
running the benchmark

319
00:12:02,079 --> 00:12:08,079
and if you want to do that that

320
00:12:05,360 --> 00:12:09,680
needs to be done with root privileges or

321
00:12:08,079 --> 00:12:11,599
change other parameter i don't know is

322
00:12:09,680 --> 00:12:13,040
enabled or disabled transparent speech

323
00:12:11,600 --> 00:12:15,519
all these things that

324
00:12:13,040 --> 00:12:18,639
may be of interest to you which do

325
00:12:15,519 --> 00:12:18,639
require root privileges

326
00:12:19,360 --> 00:12:25,600
it's it tries very hard to undo

327
00:12:22,880 --> 00:12:28,000
all it has done so to leave your system

328
00:12:25,600 --> 00:12:30,959
in the previous state as before but

329
00:12:28,000 --> 00:12:33,360
really this is told to be used on test

330
00:12:30,959 --> 00:12:36,319
machines which

331
00:12:33,360 --> 00:12:37,279
ideally you would be able to after

332
00:12:36,320 --> 00:12:39,120
having run

333
00:12:37,279 --> 00:12:41,439
the benchmarks like reinstalled already

334
00:12:39,120 --> 00:12:45,279
flow easily rather than on your

335
00:12:41,440 --> 00:12:49,279
super precious workstation

336
00:12:45,279 --> 00:12:49,279
which then can be messed up a little bit

337
00:12:49,600 --> 00:12:53,600
as i does with rhino2 and it also

338
00:12:52,800 --> 00:12:55,359
fetches the stuff

339
00:12:53,600 --> 00:12:57,360
from the internet and then runs them as

340
00:12:55,360 --> 00:12:58,160
root which is may not the most secure

341
00:12:57,360 --> 00:13:01,279
thing that you

342
00:12:58,160 --> 00:13:03,439
want to be especially again in not

343
00:13:01,279 --> 00:13:03,839
something which is a cattle machine that

344
00:13:03,440 --> 00:13:06,000
you

345
00:13:03,839 --> 00:13:07,760
we redeploy as soon as possible

346
00:13:06,000 --> 00:13:09,279
internally the way we use it internally

347
00:13:07,760 --> 00:13:10,000
is that we don't fetch from the internet

348
00:13:09,279 --> 00:13:13,600
we well

349
00:13:10,000 --> 00:13:15,600
we fetch the benchmark then uh

350
00:13:13,600 --> 00:13:17,920
there is what we got and then put them

351
00:13:15,600 --> 00:13:19,519
in a mirror and it's pretty easy to

352
00:13:17,920 --> 00:13:21,180
configure mm test in such a way that it

353
00:13:19,519 --> 00:13:22,639
will fetch for a mirror so you can

354
00:13:21,180 --> 00:13:24,800
[Music]

355
00:13:22,639 --> 00:13:26,240
set up your mirrors and mirror and use

356
00:13:24,800 --> 00:13:27,839
it like this it's a little bit less

357
00:13:26,240 --> 00:13:29,680
scary let's say

358
00:13:27,839 --> 00:13:30,959
so i said i had virtualization in the

359
00:13:29,680 --> 00:13:32,479
thought i spoke about benchmarking

360
00:13:30,959 --> 00:13:35,760
utilization in the first design

361
00:13:32,480 --> 00:13:36,959
um mm test be used as that tool which

362
00:13:35,760 --> 00:13:38,319
allow you to run

363
00:13:36,959 --> 00:13:40,000
benchmarks inside virtual machine

364
00:13:38,320 --> 00:13:41,360
multiple virtual machines synchronized

365
00:13:40,000 --> 00:13:44,959
blah blah blah

366
00:13:41,360 --> 00:13:49,360
it can because i am working on

367
00:13:44,959 --> 00:13:51,839
extending into certain instances so that

368
00:13:49,360 --> 00:13:53,040
this is becoming possible and what you

369
00:13:51,839 --> 00:13:54,959
do is to use these

370
00:13:53,040 --> 00:13:56,800
different scripts so instead of running

371
00:13:54,959 --> 00:13:59,439
and test you use run kvm

372
00:13:56,800 --> 00:14:01,199
util doesn't even have to to be kvm

373
00:13:59,440 --> 00:14:03,839
because it uses

374
00:14:01,199 --> 00:14:06,240
liver so it can be even anything else

375
00:14:03,839 --> 00:14:08,720
but yeah that's how it could for now

376
00:14:06,240 --> 00:14:10,240
and it's pretty much the same as before

377
00:14:08,720 --> 00:14:11,760
with the difference is that well these

378
00:14:10,240 --> 00:14:15,519
two parameters just

379
00:14:11,760 --> 00:14:18,160
ignore them for now but

380
00:14:15,519 --> 00:14:19,519
you specify uh in addition to the config

381
00:14:18,160 --> 00:14:23,199
file and the name of the run

382
00:14:19,519 --> 00:14:24,320
the uh name of a vm so again for now

383
00:14:23,199 --> 00:14:26,800
this is a

384
00:14:24,320 --> 00:14:30,480
pretty much a work in progress so i will

385
00:14:26,800 --> 00:14:33,519
have a few words about it later but um

386
00:14:30,480 --> 00:14:34,320
there are i would say for now a few

387
00:14:33,519 --> 00:14:36,160
times during the

388
00:14:34,320 --> 00:14:37,360
during this presentation because it's in

389
00:14:36,160 --> 00:14:39,360
active development

390
00:14:37,360 --> 00:14:40,639
so for now the virtual machine has to

391
00:14:39,360 --> 00:14:43,120
exist already

392
00:14:40,639 --> 00:14:44,639
and has to be known to uh liberta ready

393
00:14:43,120 --> 00:14:46,639
so basically what uh

394
00:14:44,639 --> 00:14:47,920
test does is we start the name of

395
00:14:46,639 --> 00:14:50,160
digital machine you have provided if it

396
00:14:47,920 --> 00:14:53,439
doesn't exist

397
00:14:50,160 --> 00:14:56,079
bad things happen and

398
00:14:53,440 --> 00:14:57,360
and also they have to be set up in such

399
00:14:56,079 --> 00:15:00,719
a way that they also can

400
00:14:57,360 --> 00:15:02,720
ssh into can reach the virtual machine

401
00:15:00,720 --> 00:15:05,279
over network and can ssh inside the

402
00:15:02,720 --> 00:15:06,560
virtual machines passwordless

403
00:15:05,279 --> 00:15:08,320
so what it does is start the virtual

404
00:15:06,560 --> 00:15:09,680
machines it copies mm-test inside the

405
00:15:08,320 --> 00:15:11,040
virtual machine

406
00:15:09,680 --> 00:15:13,120
around the benchmark inside the virtual

407
00:15:11,040 --> 00:15:13,760
machine then store some logs both about

408
00:15:13,120 --> 00:15:17,680
the host

409
00:15:13,760 --> 00:15:19,199
and the the guests from inside the guest

410
00:15:17,680 --> 00:15:21,519
and then it fetches back the result from

411
00:15:19,199 --> 00:15:25,439
inside the guest back on the host

412
00:15:21,519 --> 00:15:27,920
and that you run the comparison tools

413
00:15:25,440 --> 00:15:28,880
uh and besides adding the virtual

414
00:15:27,920 --> 00:15:30,719
machine name

415
00:15:28,880 --> 00:15:33,160
as a parameter all you need is to add

416
00:15:30,720 --> 00:15:34,639
you add is to add this

417
00:15:33,160 --> 00:15:36,240
[Music]

418
00:15:34,639 --> 00:15:39,839
additional variable in the config file

419
00:15:36,240 --> 00:15:42,959
which is basically the ip address of the

420
00:15:39,839 --> 00:15:44,800
and yeah i said also that i wanted a

421
00:15:42,959 --> 00:15:46,079
tool which can run benchmarks inside

422
00:15:44,800 --> 00:15:48,880
multiple vm

423
00:15:46,079 --> 00:15:50,239
and uh yes it can also do that so

424
00:15:48,880 --> 00:15:52,079
instead of just specifying one you

425
00:15:50,240 --> 00:15:55,279
specify two three four

426
00:15:52,079 --> 00:15:55,839
however you need and it does exactly the

427
00:15:55,279 --> 00:15:57,839
same thing

428
00:15:55,839 --> 00:15:59,120
with multiple starts multiple vm copy

429
00:15:57,839 --> 00:16:01,600
the copy and test

430
00:15:59,120 --> 00:16:02,639
inside all of them run the benchmarks

431
00:16:01,600 --> 00:16:05,360
inside all of them

432
00:16:02,639 --> 00:16:05,360
blah blah blah

433
00:16:06,160 --> 00:16:09,519
synchronization the synchronization that

434
00:16:07,759 --> 00:16:12,880
i also mentioned

435
00:16:09,519 --> 00:16:15,199
so basically this is implemented and

436
00:16:12,880 --> 00:16:17,199
as i said uh before uh austin guest

437
00:16:15,199 --> 00:16:20,719
needs to be able to talk over network

438
00:16:17,199 --> 00:16:23,279
and the sovereign network that uh

439
00:16:20,720 --> 00:16:24,079
synchronization protocol has been uh

440
00:16:23,279 --> 00:16:27,360
implemented

441
00:16:24,079 --> 00:16:29,439
between basically rank the rank avm

442
00:16:27,360 --> 00:16:32,480
script running on the host and the run

443
00:16:29,440 --> 00:16:35,519
mm test script running inside the guests

444
00:16:32,480 --> 00:16:36,399
and this this incarnation protocol i

445
00:16:35,519 --> 00:16:40,160
said right now

446
00:16:36,399 --> 00:16:43,519
um happens over the network

447
00:16:40,160 --> 00:16:44,560
in future it can happen uh using other

448
00:16:43,519 --> 00:16:47,600
means uh like

449
00:16:44,560 --> 00:16:50,880
virtually yourself with your serial

450
00:16:47,600 --> 00:16:53,600
but let's see uh

451
00:16:50,880 --> 00:16:55,680
what's more convenient and it's based on

452
00:16:53,600 --> 00:16:59,680
exchanging exchanging messages

453
00:16:55,680 --> 00:17:02,479
through uh ncnc tool it could be

454
00:16:59,680 --> 00:17:04,720
grpc it could be reward to be glpc

455
00:17:02,480 --> 00:17:07,439
anything more

456
00:17:04,720 --> 00:17:08,559
i don't know solid this is what it is

457
00:17:07,439 --> 00:17:10,559
right now

458
00:17:08,559 --> 00:17:12,399
and it's a token based protocol so

459
00:17:10,559 --> 00:17:15,520
basically uh

460
00:17:12,400 --> 00:17:19,600
the benchmark inside the

461
00:17:15,520 --> 00:17:22,639
vms knows that

462
00:17:19,599 --> 00:17:25,839
they can only go so much farther

463
00:17:22,640 --> 00:17:27,679
let's say uh until

464
00:17:25,839 --> 00:17:28,960
uh until the point where they want to

465
00:17:27,679 --> 00:17:32,720
start an iteration of the

466
00:17:28,960 --> 00:17:35,840
of of one of the benchmarks and when

467
00:17:32,720 --> 00:17:36,799
they get to that point they send a token

468
00:17:35,840 --> 00:17:39,199
to the host

469
00:17:36,799 --> 00:17:40,559
the rank avm running in the host

470
00:17:39,200 --> 00:17:42,400
collects all the token uh

471
00:17:40,559 --> 00:17:44,480
knows how many virtual machines there

472
00:17:42,400 --> 00:17:48,400
are and as soon as

473
00:17:44,480 --> 00:17:51,200
all the virtual machines have sent

474
00:17:48,400 --> 00:17:52,320
the proper token it realizes that they

475
00:17:51,200 --> 00:17:55,280
are all at the same

476
00:17:52,320 --> 00:17:56,080
uh stage or the same place and they can

477
00:17:55,280 --> 00:17:59,200
continue

478
00:17:56,080 --> 00:18:01,600
and so it's it's uh it sends

479
00:17:59,200 --> 00:18:03,600
a token itself to all the virtual

480
00:18:01,600 --> 00:18:05,199
machines to let them continue and that's

481
00:18:03,600 --> 00:18:07,840
so it's a barrier

482
00:18:05,200 --> 00:18:07,840
protocol

483
00:18:08,320 --> 00:18:15,840
working like that right

484
00:18:12,840 --> 00:18:17,439
and basically what you see

485
00:18:15,840 --> 00:18:19,439
here in this screenshot of course i

486
00:18:17,440 --> 00:18:21,840
could have shown like the logs

487
00:18:19,440 --> 00:18:22,640
with the timestamps uh the values phases

488
00:18:21,840 --> 00:18:24,799
uh

489
00:18:22,640 --> 00:18:26,240
aligning and happening at the same time

490
00:18:24,799 --> 00:18:27,280
inside virtual machines but it would

491
00:18:26,240 --> 00:18:30,400
mean

492
00:18:27,280 --> 00:18:33,678
i guess hard to read so this is a

493
00:18:30,400 --> 00:18:35,120
simplified view but i mean

494
00:18:33,679 --> 00:18:36,960
you can you can try and check the

495
00:18:35,120 --> 00:18:37,280
timestamp and see that it actually works

496
00:18:36,960 --> 00:18:41,120
but

497
00:18:37,280 --> 00:18:43,200
you also can see from here i hope that

498
00:18:41,120 --> 00:18:44,320
at least have an idea that yes in these

499
00:18:43,200 --> 00:18:46,960
two virtual machines

500
00:18:44,320 --> 00:18:48,559
the benchmarks are actually running

501
00:18:46,960 --> 00:18:50,400
synchronized because this is the cpu

502
00:18:48,559 --> 00:18:52,639
load the cpu load

503
00:18:50,400 --> 00:18:53,840
caused by the benchmarks running there

504
00:18:52,640 --> 00:18:56,000
and you see that

505
00:18:53,840 --> 00:18:57,520
it matches pretty much this is probably

506
00:18:56,000 --> 00:18:59,919
the time where

507
00:18:57,520 --> 00:19:01,360
an iteration and iteration ended and

508
00:18:59,919 --> 00:19:03,520
here another one

509
00:19:01,360 --> 00:19:05,280
started this is a very simple example

510
00:19:03,520 --> 00:19:08,480
with only two virtual machines i have

511
00:19:05,280 --> 00:19:12,160
an example with 30 but it probably uh as

512
00:19:08,480 --> 00:19:14,240
hard to read as the the the time stamps

513
00:19:12,160 --> 00:19:18,480
if i would have shown it

514
00:19:14,240 --> 00:19:21,679
and um yeah so

515
00:19:18,480 --> 00:19:25,440
this is a tool uh which right now

516
00:19:21,679 --> 00:19:28,080
is used um for

517
00:19:25,440 --> 00:19:28,880
developing let's say so basically it's

518
00:19:28,080 --> 00:19:32,639
uh

519
00:19:28,880 --> 00:19:34,960
you as a kernel but it can be

520
00:19:32,640 --> 00:19:36,160
uh you can be you can be doing

521
00:19:34,960 --> 00:19:39,200
development

522
00:19:36,160 --> 00:19:43,039
in somewhere else you are

523
00:19:39,200 --> 00:19:44,320
interested in benchmarking the effect of

524
00:19:43,039 --> 00:19:44,720
the changes that you are making to the

525
00:19:44,320 --> 00:19:48,080
code

526
00:19:44,720 --> 00:19:48,559
and so you use it and uh yeah and you

527
00:19:48,080 --> 00:19:52,399
get the

528
00:19:48,559 --> 00:19:55,840
the results uh can it also be used

529
00:19:52,400 --> 00:19:58,799
inside a ci loop for example

530
00:19:55,840 --> 00:20:01,918
to automatically monitor and perhaps

531
00:19:58,799 --> 00:20:04,720
automatically report regressions

532
00:20:01,919 --> 00:20:05,360
of new hair nets new packages and stuff

533
00:20:04,720 --> 00:20:06,880
like that

534
00:20:05,360 --> 00:20:10,799
as a matter of fact yes as a matter of

535
00:20:06,880 --> 00:20:13,919
fact it's what's happening

536
00:20:10,799 --> 00:20:16,799
within suse because the performance team

537
00:20:13,919 --> 00:20:17,600
is doing exactly that they are using

538
00:20:16,799 --> 00:20:19,840
another

539
00:20:17,600 --> 00:20:21,840
tool on top of mm test which is the one

540
00:20:19,840 --> 00:20:22,240
implementing the actual ci loop and it's

541
00:20:21,840 --> 00:20:24,559
called

542
00:20:22,240 --> 00:20:25,840
marvin i'm not going into details now

543
00:20:24,559 --> 00:20:28,158
there is this

544
00:20:25,840 --> 00:20:29,280
talk this is a link to uh to the

545
00:20:28,159 --> 00:20:32,840
recordings of a talk

546
00:20:29,280 --> 00:20:34,240
which you can watch and have more

547
00:20:32,840 --> 00:20:36,959
details uh

548
00:20:34,240 --> 00:20:37,520
what we plan to do is pretty much the

549
00:20:36,960 --> 00:20:38,799
same thing

550
00:20:37,520 --> 00:20:40,720
with some variations in the

551
00:20:38,799 --> 00:20:42,240
virtualization team which is where i am

552
00:20:40,720 --> 00:20:44,159
working because we already have an

553
00:20:42,240 --> 00:20:44,720
instance of jenkins which is building

554
00:20:44,159 --> 00:20:46,640
our

555
00:20:44,720 --> 00:20:48,720
packages for all our distros then it's

556
00:20:46,640 --> 00:20:50,880
installing them in

557
00:20:48,720 --> 00:20:53,039
different machines each one running a

558
00:20:50,880 --> 00:20:54,880
different distro and

559
00:20:53,039 --> 00:20:56,559
and then running already some functional

560
00:20:54,880 --> 00:20:59,760
tests so what we would like to do

561
00:20:56,559 --> 00:21:02,240
was to is to plug mm test to this

562
00:20:59,760 --> 00:21:08,080
infrastructure and have

563
00:21:02,240 --> 00:21:08,080
also performance benchmarking

564
00:21:08,799 --> 00:21:13,360
on top of these and

565
00:21:12,080 --> 00:21:15,600
and be able to check for performance

566
00:21:13,360 --> 00:21:19,760
regressions and stuff

567
00:21:15,600 --> 00:21:22,080
so there is as i said already it's an

568
00:21:19,760 --> 00:21:23,440
ongoing development effort there is a

569
00:21:22,080 --> 00:21:26,720
lot which i am

570
00:21:23,440 --> 00:21:27,120
doing or plan to do on specifically on

571
00:21:26,720 --> 00:21:29,600
the

572
00:21:27,120 --> 00:21:31,600
let's call it let's call them

573
00:21:29,600 --> 00:21:32,240
virtualization extensions to a main test

574
00:21:31,600 --> 00:21:35,039
but there are

575
00:21:32,240 --> 00:21:36,400
there are also areas of improvement of

576
00:21:35,039 --> 00:21:40,320
mm test itself

577
00:21:36,400 --> 00:21:43,600
this is something which uh it's um

578
00:21:40,320 --> 00:21:46,879
is public on github since a while but

579
00:21:43,600 --> 00:21:49,678
so until now it has only and and

580
00:21:46,880 --> 00:21:51,120
up to certain scientists still is uh

581
00:21:49,679 --> 00:21:53,120
it's only been

582
00:21:51,120 --> 00:21:54,799
considered and regarded as an internal

583
00:21:53,120 --> 00:21:58,239
tool while

584
00:21:54,799 --> 00:22:01,600
my idea would be to

585
00:21:58,240 --> 00:22:05,039
start making

586
00:22:01,600 --> 00:22:05,039
it a little bit more

587
00:22:05,120 --> 00:22:08,559
usable and available for people even

588
00:22:07,200 --> 00:22:11,760
outside of susan

589
00:22:08,559 --> 00:22:12,000
or and our teams which is why i'm giving

590
00:22:11,760 --> 00:22:15,360
this

591
00:22:12,000 --> 00:22:17,360
talk after all and uh yeah so

592
00:22:15,360 --> 00:22:18,320
these are a list of things uh that i've

593
00:22:17,360 --> 00:22:19,918
learned specifically for the

594
00:22:18,320 --> 00:22:22,000
virtualization extension also running

595
00:22:19,919 --> 00:22:26,080
stuff not only in vms but also in

596
00:22:22,000 --> 00:22:28,960
containers maybe other containers

597
00:22:26,080 --> 00:22:30,799
thing i want to be more i want the vm

598
00:22:28,960 --> 00:22:32,799
starting and stopping process to be more

599
00:22:30,799 --> 00:22:35,280
parallel right now is a little bit too

600
00:22:32,799 --> 00:22:37,840
much uh of a sequential thing which is

601
00:22:35,280 --> 00:22:39,520
not fancy if you if you have to run the

602
00:22:37,840 --> 00:22:40,720
benchmark inside 30 or 60 virtual

603
00:22:39,520 --> 00:22:43,679
machines

604
00:22:40,720 --> 00:22:45,039
i want better i want to have some vm

605
00:22:43,679 --> 00:22:47,360
management

606
00:22:45,039 --> 00:22:48,320
i mean stuff yeah then there is

607
00:22:47,360 --> 00:22:50,479
documentation

608
00:22:48,320 --> 00:22:50,480
you

609
00:22:51,440 --> 00:22:56,080
yeah that's pretty much the augmentation

610
00:22:53,440 --> 00:22:59,600
that you find about it but

611
00:22:56,080 --> 00:22:59,600
we it will get better

612
00:22:59,840 --> 00:23:07,760
and um for now

613
00:23:03,200 --> 00:23:10,240
if you really go there and try it and uh

614
00:23:07,760 --> 00:23:11,200
miss the documentation which you will

615
00:23:10,240 --> 00:23:14,159
and you

616
00:23:11,200 --> 00:23:14,720
maybe also find issues i do encourage

617
00:23:14,159 --> 00:23:16,880
you to

618
00:23:14,720 --> 00:23:18,080
as i said before either interact with us

619
00:23:16,880 --> 00:23:21,280
on github or email

620
00:23:18,080 --> 00:23:23,840
either mel or me and we will see what

621
00:23:21,280 --> 00:23:25,520
we can do to improve the things yeah

622
00:23:23,840 --> 00:23:27,439
which is

623
00:23:25,520 --> 00:23:28,720
pretty much what i just said give it a

624
00:23:27,440 --> 00:23:30,720
try tell us

625
00:23:28,720 --> 00:23:32,559
what you think whether it work whether

626
00:23:30,720 --> 00:23:34,240
you think it could work for you

627
00:23:32,559 --> 00:23:36,158
uh whether you think you would need

628
00:23:34,240 --> 00:23:38,080
something different and we will be happy

629
00:23:36,159 --> 00:23:39,919
to

630
00:23:38,080 --> 00:23:42,240
see if we can do about what we can do

631
00:23:39,919 --> 00:23:44,159
about that and yeah here you can find a

632
00:23:42,240 --> 00:23:47,760
little bit more information about myself

633
00:23:44,159 --> 00:23:52,480
and with that

634
00:23:47,760 --> 00:23:52,480
i am happy to take any questions

635
00:23:54,400 --> 00:23:56,720
thanks

636
00:24:03,279 --> 00:24:07,360
i saw two hands

637
00:24:09,679 --> 00:24:12,240
we have one here

638
00:24:14,480 --> 00:24:19,360
so it depends yeah yeah right um

639
00:24:18,240 --> 00:24:21,520
i have to repeat the question and the

640
00:24:19,360 --> 00:24:24,320
question was um

641
00:24:21,520 --> 00:24:25,039
why the synchronization is necessary so

642
00:24:24,320 --> 00:24:28,799
it depends

643
00:24:25,039 --> 00:24:31,440
on the uh what you want to do and what

644
00:24:28,799 --> 00:24:35,279
is your use case and your needs

645
00:24:31,440 --> 00:24:37,679
of course if you are interested

646
00:24:35,279 --> 00:24:38,880
so here i'm thinking about a scenario

647
00:24:37,679 --> 00:24:43,600
where you want

648
00:24:38,880 --> 00:24:43,600
for example okay let me just go here

649
00:24:44,159 --> 00:24:48,080
in this case this is the actual real

650
00:24:46,159 --> 00:24:50,960
case uh where i use this tool

651
00:24:48,080 --> 00:24:51,600
in this case i was running stream inside

652
00:24:50,960 --> 00:24:55,120
four

653
00:24:51,600 --> 00:24:57,120
virtual machines okay and i

654
00:24:55,120 --> 00:24:59,520
what i wanted they were pinned to

655
00:24:57,120 --> 00:25:02,320
different uh

656
00:24:59,520 --> 00:25:03,200
physical cpus so what i in theory what i

657
00:25:02,320 --> 00:25:06,240
would expect

658
00:25:03,200 --> 00:25:09,279
would be that on each little machine

659
00:25:06,240 --> 00:25:11,919
i wanted to see the same or similar

660
00:25:09,279 --> 00:25:13,440
stream performance because the goal was

661
00:25:11,919 --> 00:25:15,360
to

662
00:25:13,440 --> 00:25:17,039
check whether the isolation between them

663
00:25:15,360 --> 00:25:19,678
was working by pinning them by

664
00:25:17,039 --> 00:25:20,559
partitioning the resources okay for

665
00:25:19,679 --> 00:25:22,000
doing that

666
00:25:20,559 --> 00:25:24,320
i need to run the benchmark inside all

667
00:25:22,000 --> 00:25:25,760
the virtual machines and i care about

668
00:25:24,320 --> 00:25:28,080
all the results inside all the virtual

669
00:25:25,760 --> 00:25:31,360
machines and i cannot afford

670
00:25:28,080 --> 00:25:31,360
to have results

671
00:25:31,600 --> 00:25:38,080
from iran where it happened and

672
00:25:34,640 --> 00:25:40,880
that stream for example it runs it did

673
00:25:38,080 --> 00:25:43,520
five runs okay what if i don't do any

674
00:25:40,880 --> 00:25:44,799
synchronization what guarantees me that

675
00:25:43,520 --> 00:25:46,879
i don't know inside the first virtual

676
00:25:44,799 --> 00:25:49,279
machine the first run start

677
00:25:46,880 --> 00:25:51,200
uh then it finished then the second run

678
00:25:49,279 --> 00:25:53,120
of stream start and in the

679
00:25:51,200 --> 00:25:54,320
meanwhile in the other virtual machine

680
00:25:53,120 --> 00:25:55,918
that they are running different

681
00:25:54,320 --> 00:25:57,840
uh in different stages of the same

682
00:25:55,919 --> 00:25:58,480
benchmark okay so i need the gate thing

683
00:25:57,840 --> 00:26:00,480
i need

684
00:25:58,480 --> 00:26:02,559
if this is not what you want if you just

685
00:26:00,480 --> 00:26:05,919
want to i don't know i have some noise

686
00:26:02,559 --> 00:26:07,200
around and run a benchmark inside the

687
00:26:05,919 --> 00:26:08,640
virtual machine and you care about the

688
00:26:07,200 --> 00:26:09,200
performance only that virtual machine

689
00:26:08,640 --> 00:26:10,400
you don't need

690
00:26:09,200 --> 00:26:13,840
you don't need this and you don't have

691
00:26:10,400 --> 00:26:13,840
to use this i mean you can you just

692
00:26:14,159 --> 00:26:17,840
use it without this synchronization but

693
00:26:17,039 --> 00:26:21,039
there are

694
00:26:17,840 --> 00:26:23,678
use cases where it's important

695
00:26:21,039 --> 00:26:25,360
at least according to me and and i

696
00:26:23,679 --> 00:26:27,919
perhaps i haven't looked

697
00:26:25,360 --> 00:26:28,719
hard enough but i haven't really found

698
00:26:27,919 --> 00:26:30,720
this

699
00:26:28,720 --> 00:26:32,080
particular feature of gating and

700
00:26:30,720 --> 00:26:36,000
synchronization in

701
00:26:32,080 --> 00:26:39,840
many other tools uh which are available

702
00:26:36,000 --> 00:26:39,840
out there

703
00:26:47,279 --> 00:26:50,559
can you try to create like

704
00:26:59,440 --> 00:27:03,520
which looks exactly the same right so

705
00:27:02,080 --> 00:27:06,639
you could have used this there so you

706
00:27:03,520 --> 00:27:06,639
don't need to copy this

707
00:27:09,919 --> 00:27:13,440
yeah so the question is why we are using

708
00:27:12,000 --> 00:27:16,000
full-fledged vms uh

709
00:27:13,440 --> 00:27:18,240
instead of using other solutions like uh

710
00:27:16,000 --> 00:27:20,559
creating vms uh

711
00:27:18,240 --> 00:27:21,840
dynamically out of the hospital system

712
00:27:20,559 --> 00:27:24,240
and

713
00:27:21,840 --> 00:27:25,439
stuff like that we are just not there

714
00:27:24,240 --> 00:27:28,559
yet this was

715
00:27:25,440 --> 00:27:32,159
it was easy enough to uh

716
00:27:28,559 --> 00:27:34,639
like have focus on the part which

717
00:27:32,159 --> 00:27:35,760
implement these uh synchronization thing

718
00:27:34,640 --> 00:27:37,520
and uh

719
00:27:35,760 --> 00:27:39,200
for having the benchmarks utterly

720
00:27:37,520 --> 00:27:41,760
running in vms just

721
00:27:39,200 --> 00:27:42,240
will start something and then implement

722
00:27:41,760 --> 00:27:45,520
these

723
00:27:42,240 --> 00:27:48,000
as i said i ideally would want uh

724
00:27:45,520 --> 00:27:49,679
to be able to to continue developing on

725
00:27:48,000 --> 00:27:51,840
this and to be able to use it for run

726
00:27:49,679 --> 00:27:54,000
benchmarks even not necessarily vm even

727
00:27:51,840 --> 00:27:55,678
in containers and i want to add some

728
00:27:54,000 --> 00:27:57,840
vm management capabilities which

729
00:27:55,679 --> 00:28:01,440
includes being able to

730
00:27:57,840 --> 00:28:04,879
maybe define vms with xml with xml file

731
00:28:01,440 --> 00:28:05,919
auto provision then and absolutely i

732
00:28:04,880 --> 00:28:08,000
mean even something like

733
00:28:05,919 --> 00:28:09,679
like that would be more than useful it

734
00:28:08,000 --> 00:28:14,559
was just the easiest

735
00:28:09,679 --> 00:28:14,559
way forward to wait from where to start

736
00:28:14,840 --> 00:28:17,840
basically

737
00:28:21,860 --> 00:28:26,459
[Music]

738
00:28:30,480 --> 00:28:37,600
so the this is actually currently in use

739
00:28:34,480 --> 00:28:40,880
um in as i said

740
00:28:37,600 --> 00:28:45,120
in inside to the uh performance team

741
00:28:40,880 --> 00:28:48,240
and what they use it for is for

742
00:28:45,120 --> 00:28:51,678
testing and identifying regressions

743
00:28:48,240 --> 00:28:52,559
um that may be happening in our product

744
00:28:51,679 --> 00:28:55,039
so

745
00:28:52,559 --> 00:28:56,559
basically we test different we we the

746
00:28:55,039 --> 00:28:58,240
the commercial version of our product is

747
00:28:56,559 --> 00:28:59,120
the linux enterprise server and so we

748
00:28:58,240 --> 00:29:02,000
test

749
00:28:59,120 --> 00:29:03,039
a different version of of the operating

750
00:29:02,000 --> 00:29:05,520
system and see whether

751
00:29:03,039 --> 00:29:07,039
between versions version and and version

752
00:29:05,520 --> 00:29:08,480
and version and plus one we are

753
00:29:07,039 --> 00:29:11,120
introducing regressions

754
00:29:08,480 --> 00:29:12,640
and we also day actually because it's

755
00:29:11,120 --> 00:29:14,239
not three i'm doing development on this

756
00:29:12,640 --> 00:29:16,640
but it's not strictly my team

757
00:29:14,240 --> 00:29:17,600
they also uh track whether there are

758
00:29:16,640 --> 00:29:21,200
regressions

759
00:29:17,600 --> 00:29:23,279
uh between main line and

760
00:29:21,200 --> 00:29:24,320
our cabinet which has all the patches

761
00:29:23,279 --> 00:29:27,200
which we include

762
00:29:24,320 --> 00:29:28,799
and it's also used for doing uh uh

763
00:29:27,200 --> 00:29:30,559
current development and uh

764
00:29:28,799 --> 00:29:31,918
figuring out whether as i said changes

765
00:29:30,559 --> 00:29:34,960
but uh the

766
00:29:31,919 --> 00:29:39,200
um the kind of guests which

767
00:29:34,960 --> 00:29:43,440
are uh automatically tested right now

768
00:29:39,200 --> 00:29:46,240
are these ones so our produce basically

769
00:29:43,440 --> 00:29:49,200
but nothing prevents useful i mean it's

770
00:29:46,240 --> 00:29:50,960
it's it's again a matter of

771
00:29:49,200 --> 00:29:54,080
[Music]

772
00:29:50,960 --> 00:29:56,320
adding some virtual machine

773
00:29:54,080 --> 00:29:57,760
management provisioning whatever at

774
00:29:56,320 --> 00:30:00,080
which point you will

775
00:29:57,760 --> 00:30:02,960
if you are able to to install windows

776
00:30:00,080 --> 00:30:05,760
and start a windows vm then

777
00:30:02,960 --> 00:30:05,760
you can use it

778
00:30:20,559 --> 00:30:26,720
that's the ah

779
00:30:23,840 --> 00:30:27,360
sorry the question was whether we how do

780
00:30:26,720 --> 00:30:30,960
we

781
00:30:27,360 --> 00:30:32,639
boot uh how do we uh boot a

782
00:30:30,960 --> 00:30:36,399
specific header that we want to test so

783
00:30:32,640 --> 00:30:39,520
whether we use direct kernel booths or

784
00:30:36,399 --> 00:30:41,039
something else so this is what this uh k

785
00:30:39,520 --> 00:30:44,240
parameter does

786
00:30:41,039 --> 00:30:47,679
my again that's where i started

787
00:30:44,240 --> 00:30:49,200
and my use cases was not much about

788
00:30:47,679 --> 00:30:51,600
testing different cameras but

789
00:30:49,200 --> 00:30:53,039
about testing so running a benchmark

790
00:30:51,600 --> 00:30:54,879
inside multiple virtual machine with

791
00:30:53,039 --> 00:30:58,000
different configurations okay

792
00:30:54,880 --> 00:30:58,799
so i for this use case i don't care

793
00:30:58,000 --> 00:31:02,159
about

794
00:30:58,799 --> 00:31:03,760
i'm fine uh the virtual machine booting

795
00:31:02,159 --> 00:31:05,279
with the headline which is installed

796
00:31:03,760 --> 00:31:06,799
when i provisioned this when i installed

797
00:31:05,279 --> 00:31:10,240
the operating system on it

798
00:31:06,799 --> 00:31:12,399
and so if you if you use this

799
00:31:10,240 --> 00:31:14,159
option k which is keep kernel it

800
00:31:12,399 --> 00:31:14,959
basically just boots the virtual machine

801
00:31:14,159 --> 00:31:17,919
which

802
00:31:14,960 --> 00:31:19,600
uh whatever kernel is inside the this

803
00:31:17,919 --> 00:31:21,820
image of the virtual machine

804
00:31:19,600 --> 00:31:24,080
but you can

805
00:31:21,820 --> 00:31:26,639
[Music]

806
00:31:24,080 --> 00:31:27,519
if you don't use that uh option and use

807
00:31:26,640 --> 00:31:29,440
other options for

808
00:31:27,519 --> 00:31:31,279
providing the they can then it uses

809
00:31:29,440 --> 00:31:33,200
direct kernel boot for

810
00:31:31,279 --> 00:31:34,960
booting your cabinet because you have

811
00:31:33,200 --> 00:31:37,200
your changes there and you want to test

812
00:31:34,960 --> 00:31:37,200
them

813
00:31:37,420 --> 00:31:47,840
[Music]

814
00:31:38,720 --> 00:31:47,840
zero minutes thanks

815
00:31:52,240 --> 00:31:54,320
you

