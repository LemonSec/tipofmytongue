1
00:00:05,759 --> 00:00:09,360
um

2
00:00:06,399 --> 00:00:10,879
all right my name is brian richardson um

3
00:00:09,360 --> 00:00:12,399
it's weird i actually get paid to talk

4
00:00:10,880 --> 00:00:14,719
about firmware

5
00:00:12,400 --> 00:00:15,679
it's an odd job so the fact that you're

6
00:00:14,719 --> 00:00:17,279
actually here and interested in

7
00:00:15,679 --> 00:00:18,560
listening to it justifies my existence

8
00:00:17,279 --> 00:00:19,680
in the corporation so thank you very

9
00:00:18,560 --> 00:00:21,279
much

10
00:00:19,680 --> 00:00:22,800
they paid for the plane ticket so you

11
00:00:21,279 --> 00:00:25,279
know we have to do that

12
00:00:22,800 --> 00:00:26,720
um i put this material together with

13
00:00:25,279 --> 00:00:27,680
help from people from tiananmen corps

14
00:00:26,720 --> 00:00:30,400
project at intel

15
00:00:27,680 --> 00:00:32,558
vincent simmer and mike kinney also i

16
00:00:30,400 --> 00:00:32,879
had invited richard hughes who maintains

17
00:00:32,558 --> 00:00:35,199
the

18
00:00:32,880 --> 00:00:36,960
lvfs to come and talk he wasn't able to

19
00:00:35,200 --> 00:00:38,879
this time so i've incorporated some of

20
00:00:36,960 --> 00:00:39,920
his slides into the materials

21
00:00:38,879 --> 00:00:41,760
so even though some of those will have

22
00:00:39,920 --> 00:00:42,640
an intel logo in the corner we didn't

23
00:00:41,760 --> 00:00:46,480
make them and i'll

24
00:00:42,640 --> 00:00:48,960
i'll point out where those are okay so

25
00:00:46,480 --> 00:00:50,160
a quick check of the room uh who likes

26
00:00:48,960 --> 00:00:53,120
firmware

27
00:00:50,160 --> 00:00:54,559
or is interested in firmware anyway if i

28
00:00:53,120 --> 00:00:56,559
say who likes firmware some of the hands

29
00:00:54,559 --> 00:00:58,399
will go down

30
00:00:56,559 --> 00:01:00,480
who has had a great experience updating

31
00:00:58,399 --> 00:01:03,760
firmware on a device

32
00:01:00,480 --> 00:01:06,158
yeah yeah great experience yeah okay

33
00:01:03,760 --> 00:01:07,679
i have recently actually that the hand

34
00:01:06,159 --> 00:01:08,479
has done this over the years and i used

35
00:01:07,680 --> 00:01:10,000
to like

36
00:01:08,479 --> 00:01:12,400
be paid to write firmware like an

37
00:01:10,000 --> 00:01:14,880
assembly code for money

38
00:01:12,400 --> 00:01:15,759
so updating is hard it's harder than it

39
00:01:14,880 --> 00:01:19,199
should be

40
00:01:15,759 --> 00:01:21,040
and we're going to try to fix that

41
00:01:19,200 --> 00:01:22,720
and it's actually now implemented in a

42
00:01:21,040 --> 00:01:25,200
way where it can be done in the open

43
00:01:22,720 --> 00:01:26,798
so i can talk about the entire process

44
00:01:25,200 --> 00:01:29,119
and how if you're doing development

45
00:01:26,799 --> 00:01:29,920
especially on linux how you can start

46
00:01:29,119 --> 00:01:32,320
working on

47
00:01:29,920 --> 00:01:34,240
making sure that that code works as we

48
00:01:32,320 --> 00:01:37,360
move forward

49
00:01:34,240 --> 00:01:39,039
so first let us define the problem space

50
00:01:37,360 --> 00:01:40,400
tech presentations do you have

51
00:01:39,040 --> 00:01:42,079
infomercials here

52
00:01:40,400 --> 00:01:43,520
they probably if you do are you familiar

53
00:01:42,079 --> 00:01:45,039
with the infomercial right

54
00:01:43,520 --> 00:01:46,880
who's who's jet lagged and stayed up in

55
00:01:45,040 --> 00:01:47,680
their hotel room and watched a terrible

56
00:01:46,880 --> 00:01:50,479
ad

57
00:01:47,680 --> 00:01:51,759
about like some tape that covers over

58
00:01:50,479 --> 00:01:53,439
leaks or

59
00:01:51,759 --> 00:01:55,200
a knife that cuts through every that's

60
00:01:53,439 --> 00:01:56,719
called an infomercial we invented that

61
00:01:55,200 --> 00:01:59,360
i'm very sorry

62
00:01:56,719 --> 00:02:01,039
it wasn't my idea they didn't call me

63
00:01:59,360 --> 00:02:04,320
but the infomercial always has

64
00:02:01,040 --> 00:02:06,320
three things you have something stupid

65
00:02:04,320 --> 00:02:07,839
a proposal to fix the stupid thing and

66
00:02:06,320 --> 00:02:09,359
how to get the thing that we just

67
00:02:07,840 --> 00:02:12,720
proposed to fix the stupid

68
00:02:09,360 --> 00:02:15,680
so first here's the stupid um

69
00:02:12,720 --> 00:02:17,840
in technical terms there is a low attach

70
00:02:15,680 --> 00:02:20,160
rate for firmware updates in the field

71
00:02:17,840 --> 00:02:23,280
by end users

72
00:02:20,160 --> 00:02:25,359
in my southern vernacular um

73
00:02:23,280 --> 00:02:26,959
from america y'all ain't updating your

74
00:02:25,360 --> 00:02:30,000
firmware

75
00:02:26,959 --> 00:02:31,840
now if you read cves you all should be

76
00:02:30,000 --> 00:02:33,440
updating your firmware you saw the last

77
00:02:31,840 --> 00:02:34,800
couple of talks yeah we probably ought

78
00:02:33,440 --> 00:02:37,200
to do that every once in a while

79
00:02:34,800 --> 00:02:38,879
we made it hard for end users to do it

80
00:02:37,200 --> 00:02:40,399
in in the old days the 90s when i

81
00:02:38,879 --> 00:02:41,359
started doing firmware you got a floppy

82
00:02:40,400 --> 00:02:43,040
disk

83
00:02:41,360 --> 00:02:44,959
that's a 3d printed version of the save

84
00:02:43,040 --> 00:02:46,959
icon you put it in the system

85
00:02:44,959 --> 00:02:48,800
because we didn't have usb and you ran a

86
00:02:46,959 --> 00:02:49,360
program you would download it off of an

87
00:02:48,800 --> 00:02:51,280
ftp

88
00:02:49,360 --> 00:02:53,200
site because we didn't have proper we

89
00:02:51,280 --> 00:02:56,239
just got an over gopher at this point

90
00:02:53,200 --> 00:02:57,679
and this beard is gray naturally and

91
00:02:56,239 --> 00:02:59,519
then you would run that program and you

92
00:02:57,680 --> 00:03:01,760
hope you had the right firmware

93
00:02:59,519 --> 00:03:03,200
for the right uh board and then you hope

94
00:03:01,760 --> 00:03:04,799
that there wasn't a magic jumper you had

95
00:03:03,200 --> 00:03:06,799
to set to make all that work

96
00:03:04,800 --> 00:03:08,239
so you have to open the system to update

97
00:03:06,800 --> 00:03:09,360
the firmware and sometimes you would get

98
00:03:08,239 --> 00:03:11,360
what we like to call

99
00:03:09,360 --> 00:03:14,560
a brick which is something shaped like

100
00:03:11,360 --> 00:03:16,560
your computer but now doesn't boot

101
00:03:14,560 --> 00:03:18,000
the process was designed for nerds like

102
00:03:16,560 --> 00:03:20,159
me who got engineering degrees and

103
00:03:18,000 --> 00:03:21,040
learned why we use xor on a register

104
00:03:20,159 --> 00:03:23,040
instead of move

105
00:03:21,040 --> 00:03:25,679
a zero into the register answer takes

106
00:03:23,040 --> 00:03:27,200
one less opcode

107
00:03:25,680 --> 00:03:28,799
users need to update that thing

108
00:03:27,200 --> 00:03:31,040
otherwise every time you go home to

109
00:03:28,799 --> 00:03:32,480
visit your family for the holidays

110
00:03:31,040 --> 00:03:33,679
you're doing the updates you don't get

111
00:03:32,480 --> 00:03:35,119
to actually hang out with your family

112
00:03:33,680 --> 00:03:37,120
that you get that answer stupid

113
00:03:35,120 --> 00:03:40,080
questions and update their laptops

114
00:03:37,120 --> 00:03:41,920
so it's creates an environment where we

115
00:03:40,080 --> 00:03:42,959
do a lot of work in the industry to fix

116
00:03:41,920 --> 00:03:44,879
all these problems

117
00:03:42,959 --> 00:03:46,000
and do cool security talks about them

118
00:03:44,879 --> 00:03:48,560
and get paid to go to conferences

119
00:03:46,000 --> 00:03:50,400
in las vegas and then nobody actually

120
00:03:48,560 --> 00:03:53,280
uses the work

121
00:03:50,400 --> 00:03:55,680
which is just entropy that's that's bad

122
00:03:53,280 --> 00:03:58,959
all right in linux it's worse

123
00:03:55,680 --> 00:04:02,159
one because oems ship windows

124
00:03:58,959 --> 00:04:02,720
they might not be testing linux so if

125
00:04:02,159 --> 00:04:05,280
you get

126
00:04:02,720 --> 00:04:06,879
a nice shiny ultrabook style thing and

127
00:04:05,280 --> 00:04:08,319
you put your favorite distro on it we're

128
00:04:06,879 --> 00:04:10,000
not going to say which one because if i

129
00:04:08,319 --> 00:04:12,640
name one it'll be wrong

130
00:04:10,000 --> 00:04:14,400
and i'll get thrown out of foster so

131
00:04:12,640 --> 00:04:17,120
they're not testing that thing

132
00:04:14,400 --> 00:04:18,560
now on windows typically it has been a

133
00:04:17,120 --> 00:04:21,120
windows pe

134
00:04:18,560 --> 00:04:21,918
or some other type of windows runtime

135
00:04:21,120 --> 00:04:23,680
service

136
00:04:21,918 --> 00:04:25,359
to update the firmware which means in

137
00:04:23,680 --> 00:04:27,440
linux they didn't implement it

138
00:04:25,360 --> 00:04:29,199
now let's think about the technical

139
00:04:27,440 --> 00:04:30,719
complexities of doing this in linux

140
00:04:29,199 --> 00:04:34,720
runtime

141
00:04:30,720 --> 00:04:37,680
so on x86 intel firmware is mapped to

142
00:04:34,720 --> 00:04:39,040
a four gigabyte space or it's within the

143
00:04:37,680 --> 00:04:40,560
four gigabytes space it takes up you

144
00:04:39,040 --> 00:04:42,320
know the size of the spi part

145
00:04:40,560 --> 00:04:43,759
and it's mapped below a four gig

146
00:04:42,320 --> 00:04:44,479
register even if you have more than four

147
00:04:43,759 --> 00:04:48,880
gig of memory

148
00:04:44,479 --> 00:04:51,520
why old people reasons address mapping

149
00:04:48,880 --> 00:04:52,639
um so okay you have to if you're

150
00:04:51,520 --> 00:04:56,639
updating the firmware what you're really

151
00:04:52,639 --> 00:04:58,160
doing is writing to a fixed address

152
00:04:56,639 --> 00:04:59,680
now anybody who's in protective mode

153
00:04:58,160 --> 00:05:02,000
programming in the linux kernel knows

154
00:04:59,680 --> 00:05:03,840
you don't write to a fixed address

155
00:05:02,000 --> 00:05:05,919
things that do write to a fixed address

156
00:05:03,840 --> 00:05:07,679
on windows unless they have special

157
00:05:05,919 --> 00:05:09,198
permissions set off virus protection

158
00:05:07,680 --> 00:05:11,199
and in linux are normally done in kernel

159
00:05:09,199 --> 00:05:13,919
drivers now does

160
00:05:11,199 --> 00:05:15,039
do all the oems disclose how they update

161
00:05:13,919 --> 00:05:16,639
their firmware

162
00:05:15,039 --> 00:05:19,280
they do not which means would be a

163
00:05:16,639 --> 00:05:20,880
closed-sourced linux kernel driver

164
00:05:19,280 --> 00:05:23,599
which means it would have to be compiled

165
00:05:20,880 --> 00:05:24,960
against specific kernels

166
00:05:23,600 --> 00:05:26,639
which means it would always be the wrong

167
00:05:24,960 --> 00:05:27,840
kernel because you all are rebuilding

168
00:05:26,639 --> 00:05:29,680
your kernels all the time

169
00:05:27,840 --> 00:05:31,119
and kernels evolve and the drivers would

170
00:05:29,680 --> 00:05:33,039
not follow up

171
00:05:31,120 --> 00:05:34,160
so it creates a different environment

172
00:05:33,039 --> 00:05:36,159
where the

173
00:05:34,160 --> 00:05:37,919
updates that are done are not applied to

174
00:05:36,160 --> 00:05:39,199
a subset of users that would love to

175
00:05:37,919 --> 00:05:40,719
update their firmware and are probably

176
00:05:39,199 --> 00:05:44,000
more technically capable

177
00:05:40,720 --> 00:05:45,600
but can't so

178
00:05:44,000 --> 00:05:47,039
there is now a solution space which

179
00:05:45,600 --> 00:05:49,280
solves a couple of problems one it

180
00:05:47,039 --> 00:05:51,759
standardizes the delivery format

181
00:05:49,280 --> 00:05:53,039
so you can do things in a standard way

182
00:05:51,759 --> 00:05:54,080
it's written down in the spec everybody

183
00:05:53,039 --> 00:05:55,440
can read it

184
00:05:54,080 --> 00:05:58,400
and it's os independent it's called a

185
00:05:55,440 --> 00:06:00,560
capsule i'll explain that coming up

186
00:05:58,400 --> 00:06:01,919
an infrastructure for update delivery

187
00:06:00,560 --> 00:06:03,440
you must have consistent

188
00:06:01,919 --> 00:06:05,039
protocols you must have a consistent way

189
00:06:03,440 --> 00:06:06,080
of doing it no matter the operating

190
00:06:05,039 --> 00:06:08,159
system

191
00:06:06,080 --> 00:06:10,639
so if somebody in bsd land decides to

192
00:06:08,160 --> 00:06:12,880
implement it same process

193
00:06:10,639 --> 00:06:14,720
and it's os based staging that means the

194
00:06:12,880 --> 00:06:16,800
os delivers the firmware

195
00:06:14,720 --> 00:06:18,880
to the system but does not necessarily

196
00:06:16,800 --> 00:06:21,199
do the update

197
00:06:18,880 --> 00:06:22,800
and then you have this modular firmware

198
00:06:21,199 --> 00:06:24,639
thing the firmware should be smart

199
00:06:22,800 --> 00:06:26,560
enough to update itself

200
00:06:24,639 --> 00:06:28,400
if you don't trust version one of the

201
00:06:26,560 --> 00:06:29,199
firmware coming out of the factory you

202
00:06:28,400 --> 00:06:30,880
have a different

203
00:06:29,199 --> 00:06:33,039
security problem that i cannot solve for

204
00:06:30,880 --> 00:06:34,880
you it usually involves hiring a very

205
00:06:33,039 --> 00:06:36,560
large man with a stick

206
00:06:34,880 --> 00:06:37,680
and he makes sure that people don't put

207
00:06:36,560 --> 00:06:38,639
you know if you put the wrong firmware

208
00:06:37,680 --> 00:06:41,039
in hit him with a stick

209
00:06:38,639 --> 00:06:42,479
i'm not advocating violence but that's

210
00:06:41,039 --> 00:06:44,479
usually how those things work

211
00:06:42,479 --> 00:06:46,080
um so that that's a chain of trust

212
00:06:44,479 --> 00:06:47,359
problem different topic probably already

213
00:06:46,080 --> 00:06:48,000
presented here but let's assume you

214
00:06:47,360 --> 00:06:49,360
trust version

215
00:06:48,000 --> 00:06:50,800
one of firmware that's probably the

216
00:06:49,360 --> 00:06:52,400
thing that should do the version two

217
00:06:50,800 --> 00:06:53,360
update version two should update version

218
00:06:52,400 --> 00:06:56,159
three and so forth

219
00:06:53,360 --> 00:06:57,840
again if you don't trust that guy stick

220
00:06:56,160 --> 00:07:00,000
all right

221
00:06:57,840 --> 00:07:01,280
so let's talk about capsules so uefi

222
00:07:00,000 --> 00:07:02,000
actually recognized that this was a

223
00:07:01,280 --> 00:07:04,559
problem when we wrote

224
00:07:02,000 --> 00:07:05,680
the spec now i'm some of that spec is my

225
00:07:04,560 --> 00:07:08,319
fault i apologize

226
00:07:05,680 --> 00:07:09,840
the initial chapter in the ue520 about

227
00:07:08,319 --> 00:07:13,199
usb 2 with high speed

228
00:07:09,840 --> 00:07:15,840
i copy edited sorry

229
00:07:13,199 --> 00:07:16,720
so the idea in the spec is that uefi

230
00:07:15,840 --> 00:07:19,440
capsules define

231
00:07:16,720 --> 00:07:20,720
a way to encapsulate firmware this is a

232
00:07:19,440 --> 00:07:21,599
standard way you can take a firmware

233
00:07:20,720 --> 00:07:24,880
payload

234
00:07:21,599 --> 00:07:26,960
and deliver it to a system now

235
00:07:24,880 --> 00:07:28,800
how that's processed is system dependent

236
00:07:26,960 --> 00:07:30,080
but the capsule should be the same

237
00:07:28,800 --> 00:07:31,360
so it shouldn't matter if it's an

238
00:07:30,080 --> 00:07:32,400
expansion card shouldn't matter if it's

239
00:07:31,360 --> 00:07:34,319
inbuilt firmware

240
00:07:32,400 --> 00:07:35,520
if it's the graphics driver use the same

241
00:07:34,319 --> 00:07:37,520
system

242
00:07:35,520 --> 00:07:39,840
so some developer somewhere generates a

243
00:07:37,520 --> 00:07:42,960
capsule and they sign it

244
00:07:39,840 --> 00:07:45,840
they sign it we don't deal with unsigned

245
00:07:42,960 --> 00:07:47,039
capsules anymore and they don't sign it

246
00:07:45,840 --> 00:07:48,400
with the test key

247
00:07:47,039 --> 00:07:50,560
and they definitely don't put that test

248
00:07:48,400 --> 00:07:52,719
key in their shipping firmware

249
00:07:50,560 --> 00:07:54,479
i have to say it because somebody did it

250
00:07:52,720 --> 00:07:57,280
i'm sorry it's like on the airplane door

251
00:07:54,479 --> 00:07:58,719
when it says do not open during flight

252
00:07:57,280 --> 00:07:59,919
that sticker probably wasn't there on

253
00:07:58,720 --> 00:08:01,759
the first airplane but it's definitely

254
00:07:59,919 --> 00:08:03,680
there in the second

255
00:08:01,759 --> 00:08:04,800
we're not going to the toledo let me get

256
00:08:03,680 --> 00:08:06,560
out here no that's

257
00:08:04,800 --> 00:08:08,080
we're not doing that you go to a

258
00:08:06,560 --> 00:08:08,879
distribution system of some type now

259
00:08:08,080 --> 00:08:12,560
it's nice to have

260
00:08:08,879 --> 00:08:14,560
a repository windows has windows update

261
00:08:12,560 --> 00:08:16,080
we're not talking about that here fosdem

262
00:08:14,560 --> 00:08:19,039
we're going to talk about linux

263
00:08:16,080 --> 00:08:20,318
vendor firmware system lvfs this does

264
00:08:19,039 --> 00:08:21,360
the same thing because it's all

265
00:08:20,319 --> 00:08:23,919
standards based

266
00:08:21,360 --> 00:08:25,840
lvfs works off exactly the same system

267
00:08:23,919 --> 00:08:27,120
as microsoft does for capsule delivery

268
00:08:25,840 --> 00:08:30,400
if you have

269
00:08:27,120 --> 00:08:31,120
a windows surface device it uses capsule

270
00:08:30,400 --> 00:08:33,598
and it has

271
00:08:31,120 --> 00:08:35,519
for since the first surface if you have

272
00:08:33,599 --> 00:08:37,440
a lenovo laptop

273
00:08:35,519 --> 00:08:39,440
you probably have started seeing more

274
00:08:37,440 --> 00:08:42,560
updates available for those in linux

275
00:08:39,440 --> 00:08:43,680
those are all using lvfs lvfs then

276
00:08:42,559 --> 00:08:45,518
allows the system

277
00:08:43,679 --> 00:08:47,040
to distribute the same capsule to the

278
00:08:45,519 --> 00:08:50,640
same model of platform

279
00:08:47,040 --> 00:08:52,560
and allows it to locally update

280
00:08:50,640 --> 00:08:54,000
so capsules are in a spec you're not

281
00:08:52,560 --> 00:08:56,399
going to read it i took part of that

282
00:08:54,000 --> 00:08:57,519
and put it here and the spec by the way

283
00:08:56,399 --> 00:08:59,040
it's not a novel you have to read the

284
00:08:57,519 --> 00:08:59,760
whole thing pick out the parts that work

285
00:08:59,040 --> 00:09:02,000
for you

286
00:08:59,760 --> 00:09:03,519
and apply to your work um i have read

287
00:09:02,000 --> 00:09:05,200
the whole thing once and i didn't do it

288
00:09:03,519 --> 00:09:06,560
again

289
00:09:05,200 --> 00:09:09,040
so the capsule has a standard header

290
00:09:06,560 --> 00:09:11,040
that says i'm a capsule

291
00:09:09,040 --> 00:09:13,199
and it has other information fmp which

292
00:09:11,040 --> 00:09:15,120
is firmware management protocol which is

293
00:09:13,200 --> 00:09:17,200
the protocol that actually processes the

294
00:09:15,120 --> 00:09:20,480
stuff on the firmware side

295
00:09:17,200 --> 00:09:22,800
authentication info because we

296
00:09:20,480 --> 00:09:23,680
signed our capsules okay uh the payload

297
00:09:22,800 --> 00:09:25,519
header which

298
00:09:23,680 --> 00:09:26,719
describes what you're dealing with and

299
00:09:25,519 --> 00:09:29,120
how the local machine

300
00:09:26,720 --> 00:09:30,720
should process it and the actual payload

301
00:09:29,120 --> 00:09:31,600
now what lvfs cares about in the

302
00:09:30,720 --> 00:09:33,279
delivery

303
00:09:31,600 --> 00:09:35,680
is actually the capsule header the

304
00:09:33,279 --> 00:09:37,920
capsule header tells the system firmware

305
00:09:35,680 --> 00:09:39,519
hey this is this kind of firmware can

306
00:09:37,920 --> 00:09:41,120
you process it can you process the

307
00:09:39,519 --> 00:09:42,480
update forget about the payload

308
00:09:41,120 --> 00:09:45,279
look at the basic header can you deal

309
00:09:42,480 --> 00:09:46,480
with it and the system firmware has fmp

310
00:09:45,279 --> 00:09:48,800
drivers

311
00:09:46,480 --> 00:09:50,720
uh it has a set of grids everything in

312
00:09:48,800 --> 00:09:52,959
ua5 runs on grids

313
00:09:50,720 --> 00:09:55,040
so the driver's got a grid that matches

314
00:09:52,959 --> 00:09:57,680
and says yeah i can use that

315
00:09:55,040 --> 00:09:59,040
i get a big table called esrt an efi

316
00:09:57,680 --> 00:10:00,880
system resource table

317
00:09:59,040 --> 00:10:02,839
tells me all the firmware in the system

318
00:10:00,880 --> 00:10:04,160
what are its grids what versions is it

319
00:10:02,839 --> 00:10:05,760
running

320
00:10:04,160 --> 00:10:08,000
and then through that process it can

321
00:10:05,760 --> 00:10:09,519
verify the keys they should be signed by

322
00:10:08,000 --> 00:10:10,640
the same people who made the first

323
00:10:09,519 --> 00:10:13,760
version of the firmware

324
00:10:10,640 --> 00:10:17,199
again that whole why we use certificates

325
00:10:13,760 --> 00:10:18,959
so that driver is signed same public

326
00:10:17,200 --> 00:10:20,560
keys as the original version

327
00:10:18,959 --> 00:10:22,880
and it updates in the flash and you

328
00:10:20,560 --> 00:10:24,719
update the esrt so that somewhere in

329
00:10:22,880 --> 00:10:26,959
operating system land you can observe

330
00:10:24,720 --> 00:10:29,279
the results of the firmware update

331
00:10:26,959 --> 00:10:31,119
because way early on the only way you

332
00:10:29,279 --> 00:10:33,200
could tell if the firmware updated

333
00:10:31,120 --> 00:10:34,720
was to go into the bios setup or look

334
00:10:33,200 --> 00:10:36,560
for the screen that just blinked past

335
00:10:34,720 --> 00:10:39,440
you as the monitor warmed up

336
00:10:36,560 --> 00:10:41,359
and figure out oh that was version 102.

337
00:10:39,440 --> 00:10:43,200
crap i didn't write down what

338
00:10:41,360 --> 00:10:44,720
version i just updated over i hope it

339
00:10:43,200 --> 00:10:46,240
was 101.

340
00:10:44,720 --> 00:10:47,600
nobody knew and then the operating

341
00:10:46,240 --> 00:10:51,120
system couldn't get that information

342
00:10:47,600 --> 00:10:53,120
until we started publishing it in esrt

343
00:10:51,120 --> 00:10:54,240
now i am presenting on ue5 firmware

344
00:10:53,120 --> 00:10:56,720
which means i am

345
00:10:54,240 --> 00:10:57,680
obligated to show at least one slide

346
00:10:56,720 --> 00:10:59,920
based on

347
00:10:57,680 --> 00:11:01,680
the progression through the boot i don't

348
00:10:59,920 --> 00:11:03,680
the if you want to see hey is he going

349
00:11:01,680 --> 00:11:05,040
to use the big green h yes i am

350
00:11:03,680 --> 00:11:06,640
those always show up in ufi

351
00:11:05,040 --> 00:11:08,640
presentations you can just play uefi

352
00:11:06,640 --> 00:11:11,839
bingo that's the free square

353
00:11:08,640 --> 00:11:14,160
so read this left to right

354
00:11:11,839 --> 00:11:14,959
you have the phases of the uefi boot

355
00:11:14,160 --> 00:11:17,120
process

356
00:11:14,959 --> 00:11:19,680
and then top down how we go through each

357
00:11:17,120 --> 00:11:22,560
cycle so you first do a normal boot

358
00:11:19,680 --> 00:11:24,880
the os has an agent running or you go

359
00:11:22,560 --> 00:11:26,000
out and you're on say ubuntu sorry i

360
00:11:24,880 --> 00:11:26,560
know it's the wrong distro for most

361
00:11:26,000 --> 00:11:28,000
people

362
00:11:26,560 --> 00:11:30,079
and you click on the software update

363
00:11:28,000 --> 00:11:31,120
thing and it says ah one of your updates

364
00:11:30,079 --> 00:11:33,359
is system firmware

365
00:11:31,120 --> 00:11:34,399
i can go get it for you if you want sure

366
00:11:33,360 --> 00:11:36,399
that sounds cool

367
00:11:34,399 --> 00:11:37,920
it gets it stages the capsule staging

368
00:11:36,399 --> 00:11:39,279
the capsule just means i put it in a

369
00:11:37,920 --> 00:11:40,959
magic space in memory

370
00:11:39,279 --> 00:11:42,640
and i sent a note to the kernel that

371
00:11:40,959 --> 00:11:44,239
says i put a thing in a magic space in

372
00:11:42,640 --> 00:11:45,680
memory when you reboot

373
00:11:44,240 --> 00:11:47,600
please tell the firmware there's some

374
00:11:45,680 --> 00:11:49,760
magic thing in memory so that it doesn't

375
00:11:47,600 --> 00:11:52,079
do dram initialization and wipe out the

376
00:11:49,760 --> 00:11:54,240
thing i just put in memory

377
00:11:52,079 --> 00:11:56,000
so it does the reset firmware reboots

378
00:11:54,240 --> 00:11:58,240
and goes ooh there's a thing in memory

379
00:11:56,000 --> 00:11:59,839
i should probably do something with that

380
00:11:58,240 --> 00:12:01,760
now there's a couple different ways to

381
00:11:59,839 --> 00:12:02,399
load the capsule in most systems it

382
00:12:01,760 --> 00:12:04,880
happens

383
00:12:02,399 --> 00:12:06,240
at the bootloader like a grub or windows

384
00:12:04,880 --> 00:12:07,680
update kind of situation

385
00:12:06,240 --> 00:12:09,600
in other cases the firmware just

386
00:12:07,680 --> 00:12:12,638
directly deals with it on boot

387
00:12:09,600 --> 00:12:13,839
but either way there is a update capsule

388
00:12:12,639 --> 00:12:15,360
routine

389
00:12:13,839 --> 00:12:17,279
which then causes what we call a

390
00:12:15,360 --> 00:12:19,200
coalesce you could have multiple

391
00:12:17,279 --> 00:12:21,760
capsules staged in memory

392
00:12:19,200 --> 00:12:23,760
from different lvfs agents it could be

393
00:12:21,760 --> 00:12:25,200
the embedded controller the me firmware

394
00:12:23,760 --> 00:12:28,079
lots of things can get updated on the

395
00:12:25,200 --> 00:12:31,120
system a modern system is really just

396
00:12:28,079 --> 00:12:33,439
20 coprocessors in a trench coat it's

397
00:12:31,120 --> 00:12:35,760
it's not a piece of firmware it's pieces

398
00:12:33,440 --> 00:12:37,360
of firmware that interact together

399
00:12:35,760 --> 00:12:39,439
so you coalesce the capsules and go

400
00:12:37,360 --> 00:12:41,920
through the loop of processing them

401
00:12:39,440 --> 00:12:42,880
until you run out o capsules and because

402
00:12:41,920 --> 00:12:45,279
the firmware is up

403
00:12:42,880 --> 00:12:46,240
doing that process it can say yeah i

404
00:12:45,279 --> 00:12:48,399
know that capsule

405
00:12:46,240 --> 00:12:49,440
it's native firmware it's the uefi i'm

406
00:12:48,399 --> 00:12:51,120
going to update that

407
00:12:49,440 --> 00:12:52,639
what's my next capsule that's an

408
00:12:51,120 --> 00:12:54,240
embedded controller there's an fmp

409
00:12:52,639 --> 00:12:55,440
driver for that from the manufacturer i

410
00:12:54,240 --> 00:12:58,399
don't know how to do it

411
00:12:55,440 --> 00:13:00,079
but they do i'll pass it to fmp or in

412
00:12:58,399 --> 00:13:00,720
the rare case something slips through it

413
00:13:00,079 --> 00:13:02,160
goes

414
00:13:00,720 --> 00:13:03,519
i'm not supposed to up i don't know why

415
00:13:02,160 --> 00:13:04,959
i have this i'm going to throw it out it

416
00:13:03,519 --> 00:13:06,959
doesn't match anything on the platform

417
00:13:04,959 --> 00:13:10,719
or it doesn't validate because

418
00:13:06,959 --> 00:13:10,719
somehow maybe the signature got broken

419
00:13:11,440 --> 00:13:15,279
and then you update the asrt and you

420
00:13:13,519 --> 00:13:17,120
have updated firmware

421
00:13:15,279 --> 00:13:18,720
so that you don't look at a blank screen

422
00:13:17,120 --> 00:13:20,639
in the open source implementation we

423
00:13:18,720 --> 00:13:21,519
actually implement uh two different ways

424
00:13:20,639 --> 00:13:24,399
of doing the update

425
00:13:21,519 --> 00:13:25,360
uh process one is graphical and one is

426
00:13:24,399 --> 00:13:26,720
console

427
00:13:25,360 --> 00:13:29,120
because some of us still use serial

428
00:13:26,720 --> 00:13:29,120
ports

429
00:13:29,760 --> 00:13:34,480
yeah i know it's 2020 really we're still

430
00:13:33,040 --> 00:13:35,760
using serial ports okay modular

431
00:13:34,480 --> 00:13:38,720
philosophy

432
00:13:35,760 --> 00:13:40,560
so uefi edk2 which is the underlying

433
00:13:38,720 --> 00:13:44,079
open source project that most people use

434
00:13:40,560 --> 00:13:46,079
for uefi um that is

435
00:13:44,079 --> 00:13:47,760
modular so we have this modular idea

436
00:13:46,079 --> 00:13:48,800
that if we componentize everything in

437
00:13:47,760 --> 00:13:50,160
manufacturing

438
00:13:48,800 --> 00:13:52,079
then we make it easy to update using

439
00:13:50,160 --> 00:13:53,839
capsules when we ship the system

440
00:13:52,079 --> 00:13:55,279
not that we get very granular with it

441
00:13:53,839 --> 00:13:56,959
but we can at least group into a couple

442
00:13:55,279 --> 00:13:58,480
of clusters

443
00:13:56,959 --> 00:14:01,199
there is an open source implementation

444
00:13:58,480 --> 00:14:02,639
of this intel has gotten

445
00:14:01,199 --> 00:14:04,560
in my opinion way better about putting

446
00:14:02,639 --> 00:14:05,519
out more code for actually running on

447
00:14:04,560 --> 00:14:06,800
platforms

448
00:14:05,519 --> 00:14:08,240
so we've come up with an idea called

449
00:14:06,800 --> 00:14:10,240
minimum platform implementation

450
00:14:08,240 --> 00:14:12,320
sometimes it'll show up as mpa

451
00:14:10,240 --> 00:14:13,279
most people call it min platform just

452
00:14:12,320 --> 00:14:14,720
means that

453
00:14:13,279 --> 00:14:17,439
we put out a reference design say

454
00:14:14,720 --> 00:14:18,959
whiskey lake which is a 8th generation

455
00:14:17,440 --> 00:14:21,199
core product i know that because i

456
00:14:18,959 --> 00:14:22,638
looked it up on arc

457
00:14:21,199 --> 00:14:25,120
we've got open and closed source modules

458
00:14:22,639 --> 00:14:26,880
for that there's an fsp there's

459
00:14:25,120 --> 00:14:28,160
some redistributable me kind of stuff

460
00:14:26,880 --> 00:14:31,439
that goes along with it

461
00:14:28,160 --> 00:14:34,480
we also have a whiskey lake rvp

462
00:14:31,440 --> 00:14:36,320
reference validation platform model in

463
00:14:34,480 --> 00:14:38,240
tiana core so you can build the minimum

464
00:14:36,320 --> 00:14:41,440
amount of uefi you really need to

465
00:14:38,240 --> 00:14:43,360
boot a uefi thing now

466
00:14:41,440 --> 00:14:45,600
that means that you could morph that and

467
00:14:43,360 --> 00:14:47,600
say put it on the aeon up extreme

468
00:14:45,600 --> 00:14:48,720
available for 299 dollars it's not an ad

469
00:14:47,600 --> 00:14:50,240
it's just letting you know it's a cheap

470
00:14:48,720 --> 00:14:51,279
board that you can actually work with in

471
00:14:50,240 --> 00:14:54,000
tiana core

472
00:14:51,279 --> 00:14:55,040
so now this gives you a way of playing

473
00:14:54,000 --> 00:14:57,120
with this code and

474
00:14:55,040 --> 00:14:59,279
doing some development that say if you

475
00:14:57,120 --> 00:15:02,639
were going to make your own device

476
00:14:59,279 --> 00:15:04,399
you'd need to write an fmp dxe component

477
00:15:02,639 --> 00:15:06,880
not the whole driver the stuff in blue

478
00:15:04,399 --> 00:15:08,480
on this slide is standard in open source

479
00:15:06,880 --> 00:15:09,439
it should not change generation to

480
00:15:08,480 --> 00:15:11,680
generation

481
00:15:09,440 --> 00:15:13,199
you know very much for supporting you

482
00:15:11,680 --> 00:15:13,760
know aside from bug fixes for supporting

483
00:15:13,199 --> 00:15:16,479
the

484
00:15:13,760 --> 00:15:17,439
fnp update process but if you are the

485
00:15:16,480 --> 00:15:19,120
device vendor

486
00:15:17,440 --> 00:15:20,720
you want to write a library that

487
00:15:19,120 --> 00:15:22,880
implements fs ff

488
00:15:20,720 --> 00:15:24,160
fmp we have too many acronyms for that

489
00:15:22,880 --> 00:15:26,399
device

490
00:15:24,160 --> 00:15:28,240
if you want to be a platform vendor and

491
00:15:26,399 --> 00:15:30,160
determine how that is processed

492
00:15:28,240 --> 00:15:34,240
you write a capsule update policy

493
00:15:30,160 --> 00:15:36,959
library that's the policy for the system

494
00:15:34,240 --> 00:15:37,680
okay so that gets the basics of edk2 out

495
00:15:36,959 --> 00:15:38,959
of the way

496
00:15:37,680 --> 00:15:40,079
if you have questions hang on till the

497
00:15:38,959 --> 00:15:42,319
end i want to make sure i get through

498
00:15:40,079 --> 00:15:44,319
this stuff before we hit that level

499
00:15:42,320 --> 00:15:45,519
all right now you want to distribute it

500
00:15:44,320 --> 00:15:48,320
and this is the part where

501
00:15:45,519 --> 00:15:50,079
i pinged richard and said i understand

502
00:15:48,320 --> 00:15:51,279
roughly how lvfs works but what would

503
00:15:50,079 --> 00:15:53,359
you want the audience to know what are

504
00:15:51,279 --> 00:15:55,759
the top things you talk about

505
00:15:53,360 --> 00:15:57,759
because richard uses the basically the

506
00:15:55,759 --> 00:16:00,240
reason why you can do this in linux

507
00:15:57,759 --> 00:16:01,839
even if i did all the stuff in firmware

508
00:16:00,240 --> 00:16:03,440
if you don't build a distribution system

509
00:16:01,839 --> 00:16:04,959
that's consistent everybody uses it the

510
00:16:03,440 --> 00:16:07,759
whole thing falls apart

511
00:16:04,959 --> 00:16:09,518
so richards built lvfs basically because

512
00:16:07,759 --> 00:16:11,920
he encountered the same problem

513
00:16:09,519 --> 00:16:13,360
on a lot of other kind of embedded and

514
00:16:11,920 --> 00:16:15,920
maker style devices

515
00:16:13,360 --> 00:16:16,800
they had weird proprietary firmware and

516
00:16:15,920 --> 00:16:18,079
they had

517
00:16:16,800 --> 00:16:20,160
kind of weird protocols that weren't

518
00:16:18,079 --> 00:16:21,519
documented he didn't care about

519
00:16:20,160 --> 00:16:23,120
disassembling the firmware he cared

520
00:16:21,519 --> 00:16:24,240
about updating it on the system he was

521
00:16:23,120 --> 00:16:26,480
using

522
00:16:24,240 --> 00:16:28,160
so sometimes in lvfs you implement a

523
00:16:26,480 --> 00:16:29,120
protocol that's completely closed and

524
00:16:28,160 --> 00:16:30,959
you blackboxed

525
00:16:29,120 --> 00:16:32,480
sometimes they give you the protocol

526
00:16:30,959 --> 00:16:33,119
just enough information to write source

527
00:16:32,480 --> 00:16:34,880
code

528
00:16:33,120 --> 00:16:36,959
and then they endorse you're using that

529
00:16:34,880 --> 00:16:38,720
information like headers for instance

530
00:16:36,959 --> 00:16:41,518
and in some cases the whole thing's open

531
00:16:38,720 --> 00:16:44,160
and you can do it soup to nuts

532
00:16:41,519 --> 00:16:45,600
so lvfs has two main components one is

533
00:16:44,160 --> 00:16:47,920
fw upd

534
00:16:45,600 --> 00:16:50,079
which is the update mechanism the thing

535
00:16:47,920 --> 00:16:53,519
that runs on the system

536
00:16:50,079 --> 00:16:55,359
uh that's 100 free and open and that

537
00:16:53,519 --> 00:16:56,560
is used by the users typically with a

538
00:16:55,360 --> 00:16:59,519
gui so if you've run

539
00:16:56,560 --> 00:17:01,040
the ubuntu update system and you see the

540
00:16:59,519 --> 00:17:03,440
firmware shows up

541
00:17:01,040 --> 00:17:05,199
that's running under as lvfs and it's

542
00:17:03,440 --> 00:17:06,799
it's seamless enough now to where a lot

543
00:17:05,199 --> 00:17:07,839
of people just do system updates

544
00:17:06,799 --> 00:17:11,039
and don't realize they're taking a

545
00:17:07,839 --> 00:17:13,520
firmware update until the reset

546
00:17:11,039 --> 00:17:15,039
lvfs website is the data source that's

547
00:17:13,520 --> 00:17:16,480
again free and open it's used by the

548
00:17:15,039 --> 00:17:18,799
vendors so the vendors interact with

549
00:17:16,480 --> 00:17:20,959
this to upload the information

550
00:17:18,799 --> 00:17:22,079
and get their stuff in there richard's

551
00:17:20,959 --> 00:17:23,919
built a trust model with the

552
00:17:22,079 --> 00:17:28,000
manufacturers to make sure that he's

553
00:17:23,919 --> 00:17:28,000
only getting the verified binaries

554
00:17:28,480 --> 00:17:34,240
his phrase is lvfs it's just a website

555
00:17:31,520 --> 00:17:35,120
a terrible slogan for a bumper sticker

556
00:17:34,240 --> 00:17:37,120
it does mean

557
00:17:35,120 --> 00:17:38,719
that there is some vendor secrecy for

558
00:17:37,120 --> 00:17:40,559
permissions just to ensure the right

559
00:17:38,720 --> 00:17:42,559
things go up there

560
00:17:40,559 --> 00:17:43,678
and it can be mirrored mirror the whole

561
00:17:42,559 --> 00:17:45,039
thing and take off if you want to build

562
00:17:43,679 --> 00:17:47,440
a mirror of it great

563
00:17:45,039 --> 00:17:48,879
it's just a website uh but it's a

564
00:17:47,440 --> 00:17:51,360
website that is supported by

565
00:17:48,880 --> 00:17:52,559
so many vendors now this list is a

566
00:17:51,360 --> 00:17:54,240
little hard to read

567
00:17:52,559 --> 00:17:55,918
i would have not designed it this way i

568
00:17:54,240 --> 00:17:56,799
always hate saying this is an eye chart

569
00:17:55,919 --> 00:17:59,120
i'm sorry

570
00:17:56,799 --> 00:18:00,000
but this is an eye chart i'm sorry um

571
00:17:59,120 --> 00:18:03,199
the

572
00:18:00,000 --> 00:18:06,799
left to right is time so it's months

573
00:18:03,200 --> 00:18:08,960
and then uh bottom the top is i believe

574
00:18:06,799 --> 00:18:10,320
number of i can't remember if it's a

575
00:18:08,960 --> 00:18:11,600
number of website hits or number of

576
00:18:10,320 --> 00:18:13,200
instances of firmware

577
00:18:11,600 --> 00:18:14,879
but you can see the number of vendors

578
00:18:13,200 --> 00:18:16,880
going up as they sign the adoption

579
00:18:14,880 --> 00:18:18,240
agreements

580
00:18:16,880 --> 00:18:20,480
and the nice thing is because it's the

581
00:18:18,240 --> 00:18:21,039
same capsule that everybody else uses if

582
00:18:20,480 --> 00:18:22,960
they are

583
00:18:21,039 --> 00:18:24,320
building and signing that for windows

584
00:18:22,960 --> 00:18:26,240
they just take the same thing they gave

585
00:18:24,320 --> 00:18:28,559
to microsoft windows update

586
00:18:26,240 --> 00:18:30,559
and put it in lvfs so they're not

587
00:18:28,559 --> 00:18:31,918
building a different thing for linux or

588
00:18:30,559 --> 00:18:33,360
a different thing for bsd

589
00:18:31,919 --> 00:18:35,039
they're building a thing and

590
00:18:33,360 --> 00:18:36,639
distributing it differently based on the

591
00:18:35,039 --> 00:18:38,799
os target

592
00:18:36,640 --> 00:18:39,840
now there is some back-end uh processing

593
00:18:38,799 --> 00:18:42,639
that goes in

594
00:18:39,840 --> 00:18:44,080
um there's another layer of security um

595
00:18:42,640 --> 00:18:46,480
that richard does

596
00:18:44,080 --> 00:18:48,240
um through standard ssl and there are

597
00:18:46,480 --> 00:18:50,000
some verifications run

598
00:18:48,240 --> 00:18:51,120
um he checks things on the back end to

599
00:18:50,000 --> 00:18:53,039
make sure that things are formatted

600
00:18:51,120 --> 00:18:54,559
properly like did you follow the spec

601
00:18:53,039 --> 00:18:56,400
for the capsule header because if the

602
00:18:54,559 --> 00:18:57,678
capsule header is trashed

603
00:18:56,400 --> 00:18:59,919
it's not going to do anything good when

604
00:18:57,679 --> 00:19:02,080
it gets to the other side

605
00:18:59,919 --> 00:19:03,679
and firmware analysis this is pretty

606
00:19:02,080 --> 00:19:05,840
cool he's actually

607
00:19:03,679 --> 00:19:07,039
checking to see if oh i don't know the

608
00:19:05,840 --> 00:19:09,039
dell firmware doesn't have any

609
00:19:07,039 --> 00:19:10,559
attestation checksums now we can't stop

610
00:19:09,039 --> 00:19:12,160
del from putting it up there but he can

611
00:19:10,559 --> 00:19:12,960
make little green and red check mark so

612
00:19:12,160 --> 00:19:14,960
you

613
00:19:12,960 --> 00:19:16,080
when you pull it down understand what

614
00:19:14,960 --> 00:19:18,160
you're getting

615
00:19:16,080 --> 00:19:20,000
and then by having these verifications

616
00:19:18,160 --> 00:19:21,280
by running things like chipset for

617
00:19:20,000 --> 00:19:22,720
instance in the background

618
00:19:21,280 --> 00:19:24,320
you can do checks on say whitelist

619
00:19:22,720 --> 00:19:26,480
blacklist i know

620
00:19:24,320 --> 00:19:27,678
there's a grid out there for a driver

621
00:19:26,480 --> 00:19:30,400
that's been blacklisted

622
00:19:27,679 --> 00:19:32,880
it's got a known issue i can flag it if

623
00:19:30,400 --> 00:19:35,760
it shows up in my system

624
00:19:32,880 --> 00:19:37,039
lvfs should be its own 20 to 25 minute

625
00:19:35,760 --> 00:19:39,600
presentation here i'm not going to try

626
00:19:37,039 --> 00:19:41,520
to cover the whole thing

627
00:19:39,600 --> 00:19:42,959
but he does have a very good long-term

628
00:19:41,520 --> 00:19:44,960
roadmap set up

629
00:19:42,960 --> 00:19:46,080
and it's something that you need to i

630
00:19:44,960 --> 00:19:47,520
think if you're interested in firmware

631
00:19:46,080 --> 00:19:49,120
updates as a problem look at this

632
00:19:47,520 --> 00:19:50,000
because it covers way more than just

633
00:19:49,120 --> 00:19:51,360
uefi

634
00:19:50,000 --> 00:19:53,600
it gets down into lots of different

635
00:19:51,360 --> 00:19:54,719
components and different ecosystems

636
00:19:53,600 --> 00:19:58,080
so it's definitely something worth

637
00:19:54,720 --> 00:19:59,440
looking at all right

638
00:19:58,080 --> 00:20:00,960
so i told you about the thing that we're

639
00:19:59,440 --> 00:20:01,520
doing that i don't want to do anymore i

640
00:20:00,960 --> 00:20:03,360
gave you a

641
00:20:01,520 --> 00:20:05,039
potential solution for stopping doing

642
00:20:03,360 --> 00:20:07,439
the thing that i don't like

643
00:20:05,039 --> 00:20:08,640
and now i'm giving you homework not like

644
00:20:07,440 --> 00:20:10,480
real homework it's

645
00:20:08,640 --> 00:20:12,320
you won't be graded attendance isn't

646
00:20:10,480 --> 00:20:15,520
mandatory um

647
00:20:12,320 --> 00:20:17,360
but in summary basically edk2 supports

648
00:20:15,520 --> 00:20:17,918
an industry standard for capsule update

649
00:20:17,360 --> 00:20:19,918
we have a

650
00:20:17,919 --> 00:20:21,600
full implementation of it it can be used

651
00:20:19,919 --> 00:20:22,799
on hobby boards as testing so the

652
00:20:21,600 --> 00:20:24,719
minimum board max

653
00:20:22,799 --> 00:20:26,639
that's based on bait trail the aeon up

654
00:20:24,720 --> 00:20:27,760
squared and up extreme boards that we've

655
00:20:26,640 --> 00:20:29,280
supported

656
00:20:27,760 --> 00:20:30,480
i don't know how much arm stuff is using

657
00:20:29,280 --> 00:20:31,600
capsule but i'm pretty sure there's a

658
00:20:30,480 --> 00:20:32,880
few of them out there that at least

659
00:20:31,600 --> 00:20:35,120
could get it wedged in

660
00:20:32,880 --> 00:20:37,039
the arm guys are doing this notion with

661
00:20:35,120 --> 00:20:39,280
their heads good

662
00:20:37,039 --> 00:20:41,600
but this simplifies authentication

663
00:20:39,280 --> 00:20:43,120
system update pre-check did i plug in

664
00:20:41,600 --> 00:20:44,480
the power adapter on the laptop before i

665
00:20:43,120 --> 00:20:45,439
started the update process that could

666
00:20:44,480 --> 00:20:46,720
break it

667
00:20:45,440 --> 00:20:48,480
you can check for that kind of things

668
00:20:46,720 --> 00:20:50,720
and have the firmware uh

669
00:20:48,480 --> 00:20:51,919
decide it doesn't want to do the capsule

670
00:20:50,720 --> 00:20:54,240
update at that point and through

671
00:20:51,919 --> 00:20:55,440
something like esrt again documented in

672
00:20:54,240 --> 00:20:57,280
acpi

673
00:20:55,440 --> 00:21:00,080
notify the system if the firmware update

674
00:20:57,280 --> 00:21:00,080
was good or bad

675
00:21:00,640 --> 00:21:05,600
all right so if you're building a system

676
00:21:04,000 --> 00:21:07,360
or you know somebody who is you should

677
00:21:05,600 --> 00:21:09,520
probably sign your capsules and

678
00:21:07,360 --> 00:21:10,719
make sure they get distributed in the us

679
00:21:09,520 --> 00:21:12,158
we have a thing called nist

680
00:21:10,720 --> 00:21:13,760
national institute of standards and

681
00:21:12,159 --> 00:21:14,880
technology they put out guidance for

682
00:21:13,760 --> 00:21:17,679
this sort of thing

683
00:21:14,880 --> 00:21:19,760
and the guidance is please have

684
00:21:17,679 --> 00:21:21,360
updateable system firmware in the field

685
00:21:19,760 --> 00:21:22,720
please have root of trust involved in

686
00:21:21,360 --> 00:21:24,080
the update so that you know the thing

687
00:21:22,720 --> 00:21:25,200
that's supposed to be doing the update

688
00:21:24,080 --> 00:21:28,000
is doing the update

689
00:21:25,200 --> 00:21:28,640
with the thing it's supposed to have um

690
00:21:28,000 --> 00:21:31,280
i know

691
00:21:28,640 --> 00:21:33,520
eu and and england have the similar kind

692
00:21:31,280 --> 00:21:36,720
of regulations or references to it and

693
00:21:33,520 --> 00:21:38,320
if you want to sell to the government

694
00:21:36,720 --> 00:21:40,159
this is in their purchasing agreement so

695
00:21:38,320 --> 00:21:42,080
if it doesn't meet nist and you want the

696
00:21:40,159 --> 00:21:43,760
sweet sweet tax dollars back in the form

697
00:21:42,080 --> 00:21:47,120
of buying your product

698
00:21:43,760 --> 00:21:49,200
then you're not going to get it

699
00:21:47,120 --> 00:21:50,479
if you do updates i'm sorry when you do

700
00:21:49,200 --> 00:21:52,559
updates

701
00:21:50,480 --> 00:21:55,120
update your firmware um put it in lvfs

702
00:21:52,559 --> 00:21:57,520
and microsoft windows update

703
00:21:55,120 --> 00:21:58,959
i'm not here to plug microsoft but if

704
00:21:57,520 --> 00:22:00,240
you have a device and it ships both

705
00:21:58,960 --> 00:22:01,760
configurations make sure both

706
00:22:00,240 --> 00:22:02,720
configurations can get the update you

707
00:22:01,760 --> 00:22:04,559
worked hard on

708
00:22:02,720 --> 00:22:06,400
resolving those cves make sure somebody

709
00:22:04,559 --> 00:22:08,639
actually benefits from it

710
00:22:06,400 --> 00:22:09,760
uh if you have a device vendor put it in

711
00:22:08,640 --> 00:22:11,200
the requirement to them

712
00:22:09,760 --> 00:22:12,720
you're going to sell me a thing it must

713
00:22:11,200 --> 00:22:14,480
have capsules for its firmware update so

714
00:22:12,720 --> 00:22:16,480
i can incorporate it in the manifest for

715
00:22:14,480 --> 00:22:18,720
my system

716
00:22:16,480 --> 00:22:20,320
and please have a recovery solution if

717
00:22:18,720 --> 00:22:21,440
you encourage more people to update

718
00:22:20,320 --> 00:22:24,320
their firmware

719
00:22:21,440 --> 00:22:25,679
this the rate of failure won't go up but

720
00:22:24,320 --> 00:22:26,639
you'll have more instances of that rate

721
00:22:25,679 --> 00:22:29,120
of failure

722
00:22:26,640 --> 00:22:31,039
like point three percent isn't a lot but

723
00:22:29,120 --> 00:22:33,360
it is when more people do the thing

724
00:22:31,039 --> 00:22:34,240
so it works 100 of the time except when

725
00:22:33,360 --> 00:22:37,360
it doesn't

726
00:22:34,240 --> 00:22:39,200
um nist 800-183 or 193

727
00:22:37,360 --> 00:22:41,439
is the requirement for that and there is

728
00:22:39,200 --> 00:22:43,360
a recovery solution in the tiana core

729
00:22:41,440 --> 00:22:44,480
solution for capsule if you're a

730
00:22:43,360 --> 00:22:46,879
developer hi

731
00:22:44,480 --> 00:22:48,559
that's most of you um you're working

732
00:22:46,880 --> 00:22:48,960
with an open source community make sure

733
00:22:48,559 --> 00:22:51,120
that

734
00:22:48,960 --> 00:22:52,640
you're trying the stuff out if you make

735
00:22:51,120 --> 00:22:53,760
a linux driver and it's got a firmware

736
00:22:52,640 --> 00:22:55,280
impact

737
00:22:53,760 --> 00:22:57,840
go get a board that supports it and see

738
00:22:55,280 --> 00:22:57,840
if it works

739
00:22:58,480 --> 00:23:01,840
these are all links the slides are

740
00:22:59,919 --> 00:23:03,120
already up because i paid attention to

741
00:23:01,840 --> 00:23:04,480
the guys in the blue shirt said poster

742
00:23:03,120 --> 00:23:06,879
slides before you get here so thanks for

743
00:23:04,480 --> 00:23:08,400
reminding me i almost didn't do that

744
00:23:06,880 --> 00:23:10,240
there's also information on the dk2

745
00:23:08,400 --> 00:23:12,400
threat model some of the risks in

746
00:23:10,240 --> 00:23:14,080
capsule are based on that threat model

747
00:23:12,400 --> 00:23:15,679
and there is some information on windows

748
00:23:14,080 --> 00:23:17,439
update only because

749
00:23:15,679 --> 00:23:18,960
they they do actually document some of

750
00:23:17,440 --> 00:23:20,000
the process of formatting the capsule

751
00:23:18,960 --> 00:23:22,400
fairly well

752
00:23:20,000 --> 00:23:24,240
and edk2 we tried to make it easy by

753
00:23:22,400 --> 00:23:25,280
using a bunch of python scripts to do

754
00:23:24,240 --> 00:23:26,559
some of the things we thought were

755
00:23:25,280 --> 00:23:27,918
harder

756
00:23:26,559 --> 00:23:29,760
all right i said myself a couple minutes

757
00:23:27,919 --> 00:23:31,039
for questions before we get to that

758
00:23:29,760 --> 00:23:32,320
thanks everybody for sticking around i

759
00:23:31,039 --> 00:23:33,760
know it's late and we should already be

760
00:23:32,320 --> 00:23:34,960
having a beer right now but we'll solve

761
00:23:33,760 --> 00:23:38,080
that in a few minutes

762
00:23:34,960 --> 00:23:39,280
i mean after the next talk okay uh i'll

763
00:23:38,080 --> 00:23:41,279
take this one up here first

764
00:23:39,280 --> 00:23:43,440
uh can we leverage well do you think

765
00:23:41,279 --> 00:23:44,720
that vendors are approachable so that we

766
00:23:43,440 --> 00:23:46,960
can use capsule

767
00:23:44,720 --> 00:23:48,240
to also supply custom firmware images

768
00:23:46,960 --> 00:23:51,520
not just the vendors so

769
00:23:48,240 --> 00:23:53,679
they may audit and sign them

770
00:23:51,520 --> 00:23:54,720
okay so the question is because we have

771
00:23:53,679 --> 00:23:56,960
this this

772
00:23:54,720 --> 00:23:58,559
mechanism that you know is open friendly

773
00:23:56,960 --> 00:24:00,240
could we get a vendor to

774
00:23:58,559 --> 00:24:01,918
do another version of firmware like a

775
00:24:00,240 --> 00:24:03,919
custom version so

776
00:24:01,919 --> 00:24:04,960
essentially you want the oh i'm owning

777
00:24:03,919 --> 00:24:08,240
my system now

778
00:24:04,960 --> 00:24:10,320
so i want to put my own firmware down

779
00:24:08,240 --> 00:24:11,840
potentially but it's not initially

780
00:24:10,320 --> 00:24:13,600
designed for that because of the signing

781
00:24:11,840 --> 00:24:15,279
mechanism

782
00:24:13,600 --> 00:24:16,719
you would have to have the vendor sign

783
00:24:15,279 --> 00:24:18,559
that firmware

784
00:24:16,720 --> 00:24:20,640
or the vendor give you the private key

785
00:24:18,559 --> 00:24:22,559
that probably won't happen on purpose

786
00:24:20,640 --> 00:24:24,080
um if you get the private key by

787
00:24:22,559 --> 00:24:25,200
accident don't go signing other people's

788
00:24:24,080 --> 00:24:28,480
firmware that's rude

789
00:24:25,200 --> 00:24:30,000
um but it's tough to implement i think

790
00:24:28,480 --> 00:24:32,080
you would have to have a vendor who's

791
00:24:30,000 --> 00:24:34,000
friendlier to that sort of situation

792
00:24:32,080 --> 00:24:36,080
but that vendor might also assume that

793
00:24:34,000 --> 00:24:38,000
they're going to do a physical presence

794
00:24:36,080 --> 00:24:39,760
i.e i open the box and put the thing on

795
00:24:38,000 --> 00:24:41,200
it and then you're going to cell phone

796
00:24:39,760 --> 00:24:43,760
the firmware by establishing your own

797
00:24:41,200 --> 00:24:46,480
key and signing your own stuff

798
00:24:43,760 --> 00:24:49,440
so i think that's uh quasi supply chain

799
00:24:46,480 --> 00:24:50,880
issue and quasi-friendly vendor issue

800
00:24:49,440 --> 00:24:52,559
uh there was a question i'm going to

801
00:24:50,880 --> 00:24:54,720
skip you only because we can talk when

802
00:24:52,559 --> 00:24:57,918
we have a beer later yeah

803
00:24:54,720 --> 00:25:00,880
uh when you are updating

804
00:24:57,919 --> 00:25:00,880
on what i'm updating

805
00:25:07,279 --> 00:25:10,960
so the question is when you have

806
00:25:08,960 --> 00:25:12,159
multiple capsules what is the order

807
00:25:10,960 --> 00:25:15,360
uh the answer is the order is not

808
00:25:12,159 --> 00:25:16,880
deterministic it's as far as i know

809
00:25:15,360 --> 00:25:19,120
on the current implementation of tiana

810
00:25:16,880 --> 00:25:21,039
core and leif correct me if i'm wrong in

811
00:25:19,120 --> 00:25:23,199
this it's just when they show up

812
00:25:21,039 --> 00:25:24,320
so they get they get put in memory and

813
00:25:23,200 --> 00:25:26,240
the firmware

814
00:25:24,320 --> 00:25:28,158
has a process to coalesce which just

815
00:25:26,240 --> 00:25:29,360
basically means count all the capsules

816
00:25:28,159 --> 00:25:30,000
that are sitting in the magic space in

817
00:25:29,360 --> 00:25:31,039
memory

818
00:25:30,000 --> 00:25:32,640
so i don't think you can have a

819
00:25:31,039 --> 00:25:34,158
deterministic order unless you

820
00:25:32,640 --> 00:25:34,880
explicitly went in and changed that

821
00:25:34,159 --> 00:25:37,039
policy

822
00:25:34,880 --> 00:25:38,640
but you can't guarantee that everybody

823
00:25:37,039 --> 00:25:41,120
has that policy

824
00:25:38,640 --> 00:25:41,679
and there's a sign there we can talk in

825
00:25:41,120 --> 00:25:42,959
a minute

826
00:25:41,679 --> 00:25:45,279
but again appreciate everybody for

827
00:25:42,960 --> 00:25:46,480
sticking around and find me afterwards

828
00:25:45,279 --> 00:25:46,799
i'll be around here tomorrow a little

829
00:25:46,480 --> 00:25:48,960
bit

830
00:25:46,799 --> 00:25:57,840
or my contact info is on the slide find

831
00:25:48,960 --> 00:25:57,840
me online thank you

832
00:25:58,400 --> 00:26:00,480
you

