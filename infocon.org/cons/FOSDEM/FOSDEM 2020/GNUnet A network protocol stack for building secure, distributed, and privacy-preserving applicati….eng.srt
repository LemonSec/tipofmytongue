1
00:00:13,360 --> 00:00:17,198
okay

2
00:00:14,160 --> 00:00:20,240
hi my name is martin i'm one of the

3
00:00:17,199 --> 00:00:21,680
co-maintainers of gnunet and

4
00:00:20,240 --> 00:00:23,919
today i will talk a bit about the

5
00:00:21,680 --> 00:00:25,519
project i think if you have been here

6
00:00:23,920 --> 00:00:27,599
in the morning as well i think it ties

7
00:00:25,519 --> 00:00:29,598
in quite nicely with

8
00:00:27,599 --> 00:00:31,039
other projects that we have heard about

9
00:00:29,599 --> 00:00:32,399
today um when it comes to

10
00:00:31,039 --> 00:00:35,600
decentralization

11
00:00:32,399 --> 00:00:36,800
of the internet so i think i'm preaching

12
00:00:35,600 --> 00:00:39,840
to the choir so

13
00:00:36,800 --> 00:00:42,839
the internet is under attack but i

14
00:00:39,840 --> 00:00:44,000
i want to give you a kind of a different

15
00:00:42,840 --> 00:00:46,879
perspective

16
00:00:44,000 --> 00:00:48,800
from what we have heard today in this

17
00:00:46,879 --> 00:00:50,239
aspect

18
00:00:48,800 --> 00:00:52,879
if we look at the internet how it works

19
00:00:50,239 --> 00:00:54,559
today it's not just centralized services

20
00:00:52,879 --> 00:00:56,800
and applications that we need to

21
00:00:54,559 --> 00:00:59,199
decentralize the internet is a

22
00:00:56,800 --> 00:00:59,839
technology stack that that goes deep up

23
00:00:59,199 --> 00:01:01,519
to the

24
00:00:59,840 --> 00:01:03,760
from from applications down to the

25
00:01:01,520 --> 00:01:06,320
physical layer

26
00:01:03,760 --> 00:01:08,479
so we have the ethernet we have ip bgp

27
00:01:06,320 --> 00:01:10,720
so this is the osi

28
00:01:08,479 --> 00:01:12,960
iso stack so you have a physical layer

29
00:01:10,720 --> 00:01:15,119
then you have a data linked layer which

30
00:01:12,960 --> 00:01:16,798
if you have a cable it's the ethernet

31
00:01:15,119 --> 00:01:19,119
then you have a network layer which is

32
00:01:16,799 --> 00:01:20,880
ip and bgp which is usually used for

33
00:01:19,119 --> 00:01:21,920
routing then you have a transport layer

34
00:01:20,880 --> 00:01:23,199
where there are transport layer

35
00:01:21,920 --> 00:01:25,040
protocols

36
00:01:23,200 --> 00:01:28,000
then you usually also have a naming

37
00:01:25,040 --> 00:01:29,680
system which now is the dns

38
00:01:28,000 --> 00:01:32,560
for most internet applications and on

39
00:01:29,680 --> 00:01:36,560
top of that now you have

40
00:01:32,560 --> 00:01:39,600
at the moment very very centralized

41
00:01:36,560 --> 00:01:42,720
and large applications and services

42
00:01:39,600 --> 00:01:45,520
now as we heard before today and

43
00:01:42,720 --> 00:01:47,119
as you probably also heard in the news

44
00:01:45,520 --> 00:01:49,119
those centralized services

45
00:01:47,119 --> 00:01:50,320
are very easy to subvert so programs

46
00:01:49,119 --> 00:01:52,880
like prism and

47
00:01:50,320 --> 00:01:54,079
any other lawful interception methods

48
00:01:52,880 --> 00:01:56,399
can basically

49
00:01:54,079 --> 00:01:57,759
directly collect data from you by simply

50
00:01:56,399 --> 00:02:01,200
going to those services

51
00:01:57,759 --> 00:02:02,640
and taking it and in order to avoid that

52
00:02:01,200 --> 00:02:03,520
of course it makes sense to think about

53
00:02:02,640 --> 00:02:06,880
how can those

54
00:02:03,520 --> 00:02:08,160
applications be decentralized but that's

55
00:02:06,880 --> 00:02:10,478
only half of the story

56
00:02:08,160 --> 00:02:11,520
because you're forgetting about the rest

57
00:02:10,479 --> 00:02:13,440
of the stack

58
00:02:11,520 --> 00:02:15,280
so a lot of times when you hear about

59
00:02:13,440 --> 00:02:16,640
the blockchains or blockchain based

60
00:02:15,280 --> 00:02:18,239
applications

61
00:02:16,640 --> 00:02:20,480
it's completely forgotten that if you

62
00:02:18,239 --> 00:02:22,720
attack the network

63
00:02:20,480 --> 00:02:24,079
on a deeper level then your blockchain

64
00:02:22,720 --> 00:02:26,400
is not really worth much or at least the

65
00:02:24,080 --> 00:02:29,440
security guarantees it gives you

66
00:02:26,400 --> 00:02:30,959
simply because uh the isps and the

67
00:02:29,440 --> 00:02:33,680
routing infrastructure

68
00:02:30,959 --> 00:02:35,360
you have no control over that and it

69
00:02:33,680 --> 00:02:38,239
also does not provide inherently any

70
00:02:35,360 --> 00:02:40,239
security on its metadata for example

71
00:02:38,239 --> 00:02:41,519
and as we have heard before also in the

72
00:02:40,239 --> 00:02:43,280
news

73
00:02:41,519 --> 00:02:45,280
people are killed based on metadata

74
00:02:43,280 --> 00:02:47,760
right

75
00:02:45,280 --> 00:02:49,519
and this is hardly ever addressed in in

76
00:02:47,760 --> 00:02:50,879
in projects that try to decentralize

77
00:02:49,519 --> 00:02:53,519
applications be that

78
00:02:50,879 --> 00:02:55,679
identity services or be that i don't

79
00:02:53,519 --> 00:02:57,360
know social network services

80
00:02:55,680 --> 00:02:58,640
but you always need to keep that in mind

81
00:02:57,360 --> 00:03:00,720
because everything is built on top of

82
00:02:58,640 --> 00:03:01,920
the internet infrastructure

83
00:03:00,720 --> 00:03:03,280
and then of course you have the naming

84
00:03:01,920 --> 00:03:05,359
system which is a completely different

85
00:03:03,280 --> 00:03:06,879
story and dns is something that is not

86
00:03:05,360 --> 00:03:08,080
only does not provide you any kind of

87
00:03:06,879 --> 00:03:10,480
security

88
00:03:08,080 --> 00:03:12,319
um but it's also arguably managed and

89
00:03:10,480 --> 00:03:13,119
governed by by corrupt organizations

90
00:03:12,319 --> 00:03:16,079
which we have seen

91
00:03:13,120 --> 00:03:17,599
with the dot org case just recently so

92
00:03:16,080 --> 00:03:18,480
there's absolutely no aspect in this

93
00:03:17,599 --> 00:03:19,760
whole stack

94
00:03:18,480 --> 00:03:21,280
that actually provides us with any

95
00:03:19,760 --> 00:03:22,239
security guarantees and we cannot

96
00:03:21,280 --> 00:03:24,080
actually use it

97
00:03:22,239 --> 00:03:25,920
to build decentralized applications on

98
00:03:24,080 --> 00:03:27,040
top it just doesn't make any sense you

99
00:03:25,920 --> 00:03:30,798
don't have a proper

100
00:03:27,040 --> 00:03:32,159
foundation to do that and that is where

101
00:03:30,799 --> 00:03:34,000
the vision of the grunette project

102
00:03:32,159 --> 00:03:36,959
actually starts so

103
00:03:34,000 --> 00:03:37,760
lunate wants to basically build a full

104
00:03:36,959 --> 00:03:39,440
stack

105
00:03:37,760 --> 00:03:41,920
that provides you with the individual

106
00:03:39,440 --> 00:03:44,720
layers of the iso osi stack

107
00:03:41,920 --> 00:03:46,640
so that decentralised applications can

108
00:03:44,720 --> 00:03:48,959
be built in a meaningful way

109
00:03:46,640 --> 00:03:51,839
and we need metadata protection we need

110
00:03:48,959 --> 00:03:53,360
encryption and we need decentralization

111
00:03:51,840 --> 00:03:55,840
and we need a stack that supports those

112
00:03:53,360 --> 00:03:58,239
three features and specifically metadata

113
00:03:55,840 --> 00:04:00,319
protection

114
00:03:58,239 --> 00:04:02,319
so if we were to like have a clean slate

115
00:04:00,319 --> 00:04:04,079
and just think about okay so

116
00:04:02,319 --> 00:04:07,200
what would we like to have in this stack

117
00:04:04,080 --> 00:04:09,120
or how should it look like

118
00:04:07,200 --> 00:04:10,399
um then i'm going to for now exclude the

119
00:04:09,120 --> 00:04:11,120
physical layer because that's a bit

120
00:04:10,400 --> 00:04:13,120
tricky

121
00:04:11,120 --> 00:04:15,760
um but let's think about ethernet so the

122
00:04:13,120 --> 00:04:17,440
ethernet is usually used

123
00:04:15,760 --> 00:04:19,599
to have a protocol that connects two

124
00:04:17,440 --> 00:04:21,199
nodes like directly so

125
00:04:19,600 --> 00:04:23,360
if you want to decentralize a system you

126
00:04:21,199 --> 00:04:24,960
can think about your direct neighbors if

127
00:04:23,360 --> 00:04:26,560
you're in a decentralized network

128
00:04:24,960 --> 00:04:29,280
you are going to communicate with your

129
00:04:26,560 --> 00:04:30,800
direct neighbors

130
00:04:29,280 --> 00:04:33,198
what kind of protocol would you want for

131
00:04:30,800 --> 00:04:35,040
that and

132
00:04:33,199 --> 00:04:36,400
you would probably want some kind of

133
00:04:35,040 --> 00:04:38,400
trust on first use

134
00:04:36,400 --> 00:04:40,000
of the record protocol that basically

135
00:04:38,400 --> 00:04:42,719
does a key exchange

136
00:04:40,000 --> 00:04:43,919
with a public key trust on first use

137
00:04:42,720 --> 00:04:46,080
maybe has some

138
00:04:43,919 --> 00:04:47,599
re-keying protocol is well built in but

139
00:04:46,080 --> 00:04:48,159
something like that so at least that a

140
00:04:47,600 --> 00:04:52,479
passive

141
00:04:48,160 --> 00:04:54,160
observer of the network um cannot see

142
00:04:52,479 --> 00:04:56,479
what is happening or what is part of the

143
00:04:54,160 --> 00:04:58,560
communication and more importantly

144
00:04:56,479 --> 00:04:59,919
that encryption layer protects the

145
00:04:58,560 --> 00:05:02,400
metadata

146
00:04:59,919 --> 00:05:04,320
of the next layer so if you now need a

147
00:05:02,400 --> 00:05:06,080
routing protocol or a transport protocol

148
00:05:04,320 --> 00:05:08,639
that metadata is implicitly protected

149
00:05:06,080 --> 00:05:10,479
against the passive attacker

150
00:05:08,639 --> 00:05:11,759
the next thing what you need in a

151
00:05:10,479 --> 00:05:13,758
decentralized network is

152
00:05:11,759 --> 00:05:16,240
routing because usually this is what i

153
00:05:13,759 --> 00:05:17,360
ip and bgp does for you

154
00:05:16,240 --> 00:05:18,880
but you cannot rely on this

155
00:05:17,360 --> 00:05:21,120
infrastructure anymore because that is

156
00:05:18,880 --> 00:05:23,680
managed by isps

157
00:05:21,120 --> 00:05:25,759
um dhts implicitly have built-in routing

158
00:05:23,680 --> 00:05:27,120
mechanisms now usually you think of dhts

159
00:05:25,759 --> 00:05:28,800
key value stores

160
00:05:27,120 --> 00:05:30,479
but they do provide routing so you can

161
00:05:28,800 --> 00:05:31,919
use it to discover routes across the

162
00:05:30,479 --> 00:05:33,840
network

163
00:05:31,919 --> 00:05:36,000
and this has worked since bittorrent and

164
00:05:33,840 --> 00:05:39,599
this works now with ipfs so

165
00:05:36,000 --> 00:05:42,479
it's a good method now once you

166
00:05:39,600 --> 00:05:43,120
are able to you have your hop by hop

167
00:05:42,479 --> 00:05:45,120
encryption

168
00:05:43,120 --> 00:05:46,800
and you have a way to discover paths

169
00:05:45,120 --> 00:05:49,360
across your php network

170
00:05:46,800 --> 00:05:50,880
if you now want to address a remote peer

171
00:05:49,360 --> 00:05:52,000
or communicate with it you still need

172
00:05:50,880 --> 00:05:54,400
end-to-end encryption

173
00:05:52,000 --> 00:05:55,360
and state-of-the-art at that point would

174
00:05:54,400 --> 00:05:58,080
be some kind of

175
00:05:55,360 --> 00:05:59,520
ratchet encryption protocol you might

176
00:05:58,080 --> 00:06:02,080
even want something like onion routing

177
00:05:59,520 --> 00:06:02,080
at that point

178
00:06:03,199 --> 00:06:06,479
naming well you want something that is

179
00:06:05,840 --> 00:06:09,359
less

180
00:06:06,479 --> 00:06:10,400
susceptible to more carpal and more more

181
00:06:09,360 --> 00:06:14,319
cowbell

182
00:06:10,400 --> 00:06:16,880
and um well less like i can

183
00:06:14,319 --> 00:06:18,240
and once you have such a stack now you

184
00:06:16,880 --> 00:06:19,919
can start building

185
00:06:18,240 --> 00:06:21,039
proper decent closed applications of

186
00:06:19,919 --> 00:06:23,440
course you can build them before and

187
00:06:21,039 --> 00:06:25,199
then after that address the stack but

188
00:06:23,440 --> 00:06:27,039
it makes sense to keep in mind that

189
00:06:25,199 --> 00:06:30,080
without the stack your

190
00:06:27,039 --> 00:06:34,080
decentralized application is not

191
00:06:30,080 --> 00:06:36,080
really giving you any value

192
00:06:34,080 --> 00:06:38,400
so how does this relate to bluenet well

193
00:06:36,080 --> 00:06:40,479
in nunet for the

194
00:06:38,400 --> 00:06:41,679
over the record layer so the protocol we

195
00:06:40,479 --> 00:06:44,080
speak um

196
00:06:41,680 --> 00:06:45,440
with other direct neighbors is just

197
00:06:44,080 --> 00:06:47,440
called core

198
00:06:45,440 --> 00:06:49,039
it's to me it's quite a boring protocol

199
00:06:47,440 --> 00:06:51,919
because the only thing it does is just

200
00:06:49,039 --> 00:06:53,599
you know connect to a connect some kind

201
00:06:51,919 --> 00:06:54,560
of a machine that you have a connection

202
00:06:53,599 --> 00:06:59,520
to

203
00:06:54,560 --> 00:06:59,520
do a key exchange and then talk

204
00:07:00,720 --> 00:07:03,840
the distributed hash table in unit is

205
00:07:02,400 --> 00:07:05,440
called r5n

206
00:07:03,840 --> 00:07:06,880
and there is a publication i put it at

207
00:07:05,440 --> 00:07:09,120
the end of the slide so you can download

208
00:07:06,880 --> 00:07:12,159
them and and look at it

209
00:07:09,120 --> 00:07:14,400
it's a special dht that is combining

210
00:07:12,160 --> 00:07:16,160
combining randomized routing with

211
00:07:14,400 --> 00:07:17,198
cadence style routing and is

212
00:07:16,160 --> 00:07:18,880
particularly use

213
00:07:17,199 --> 00:07:20,240
particularly good in restricted route

214
00:07:18,880 --> 00:07:22,159
environments so if

215
00:07:20,240 --> 00:07:24,639
you have a you only have very few

216
00:07:22,160 --> 00:07:24,639
connections

217
00:07:25,919 --> 00:07:31,120
in nunet the protocol that is used to

218
00:07:28,880 --> 00:07:33,360
actually communicate with a peer that is

219
00:07:31,120 --> 00:07:34,319
multiple hops away from you is called

220
00:07:33,360 --> 00:07:36,880
cadet now

221
00:07:34,319 --> 00:07:38,319
cadet does is it uses the dht to

222
00:07:36,880 --> 00:07:42,000
discover a path

223
00:07:38,319 --> 00:07:43,039
to a remote peer this is done by simply

224
00:07:42,000 --> 00:07:45,120
retrieving

225
00:07:43,039 --> 00:07:46,159
by simply doing a get a get request

226
00:07:45,120 --> 00:07:48,400
against a peer id

227
00:07:46,160 --> 00:07:49,840
and the other peer does a put request

228
00:07:48,400 --> 00:07:51,599
against its own pid

229
00:07:49,840 --> 00:07:55,520
and that way you can basically find the

230
00:07:51,599 --> 00:07:55,520
path from one page to the other peer

231
00:07:56,000 --> 00:08:00,319
kind of at the moment in unit does

232
00:07:58,080 --> 00:08:02,479
implement a ratchet for encryption

233
00:08:00,319 --> 00:08:04,319
but i think it does not at the moment

234
00:08:02,479 --> 00:08:07,039
implement some kind of onion routing

235
00:08:04,319 --> 00:08:07,039
across the path

236
00:08:07,440 --> 00:08:11,599
probably the most stable component at

237
00:08:10,000 --> 00:08:12,720
the moment in gnunet is the new name

238
00:08:11,599 --> 00:08:14,800
system

239
00:08:12,720 --> 00:08:16,479
we currently have a project with an

240
00:08:14,800 --> 00:08:19,120
elnett as well to

241
00:08:16,479 --> 00:08:21,039
write basically an independent standard

242
00:08:19,120 --> 00:08:22,479
on how to imp on how the wire format of

243
00:08:21,039 --> 00:08:26,240
the new name system

244
00:08:22,479 --> 00:08:27,919
uh actually looks like um

245
00:08:26,240 --> 00:08:30,800
the new name system essentially if you

246
00:08:27,919 --> 00:08:33,360
know how dns works in dns

247
00:08:30,800 --> 00:08:35,680
you have usually a recursive dns server

248
00:08:33,360 --> 00:08:37,919
that iteratively queries

249
00:08:35,679 --> 00:08:38,880
other dns servers until it has found an

250
00:08:37,919 --> 00:08:40,718
actual result

251
00:08:38,880 --> 00:08:42,080
the new name system does not use any

252
00:08:40,719 --> 00:08:43,839
servers instead

253
00:08:42,080 --> 00:08:45,839
all of the record information in the dns

254
00:08:43,839 --> 00:08:48,880
system is stored

255
00:08:45,839 --> 00:08:52,000
in the distributed hash table

256
00:08:48,880 --> 00:08:53,600
in addition to that um we use a little

257
00:08:52,000 --> 00:08:56,240
bit of a fancy elliptic

258
00:08:53,600 --> 00:08:56,959
cryptography as part of the keys and

259
00:08:56,240 --> 00:08:59,120
values

260
00:08:56,959 --> 00:09:00,560
what is stored in the dht in order to

261
00:08:59,120 --> 00:09:03,600
realize what is called a

262
00:09:00,560 --> 00:09:06,640
private information retrieval scheme

263
00:09:03,600 --> 00:09:08,080
and that means that if you are a passive

264
00:09:06,640 --> 00:09:11,279
attacker on the network or if you're

265
00:09:08,080 --> 00:09:14,560
just observing queries and responses

266
00:09:11,279 --> 00:09:16,880
in gns then you cannot tell

267
00:09:14,560 --> 00:09:18,640
what is queried and you also cannot

268
00:09:16,880 --> 00:09:21,519
really read the answers

269
00:09:18,640 --> 00:09:22,000
unless you know what is queried so

270
00:09:21,519 --> 00:09:23,600
passively

271
00:09:22,000 --> 00:09:24,720
just collecting all of the queries and

272
00:09:23,600 --> 00:09:27,120
responses doesn't really get you

273
00:09:24,720 --> 00:09:27,120
anywhere

274
00:09:27,839 --> 00:09:31,200
and there are also some planned and

275
00:09:29,920 --> 00:09:33,920
existing applications

276
00:09:31,200 --> 00:09:34,399
on top of luna wait i have slides on gns

277
00:09:33,920 --> 00:09:36,800
but

278
00:09:34,399 --> 00:09:37,680
they are only in there because so you

279
00:09:36,800 --> 00:09:40,800
can look at them

280
00:09:37,680 --> 00:09:43,680
how it works next slide

281
00:09:40,800 --> 00:09:45,359
so there are already some planned and

282
00:09:43,680 --> 00:09:48,239
existing applications on top of

283
00:09:45,360 --> 00:09:49,680
gnunet one of them is the secusha

284
00:09:48,240 --> 00:09:51,600
project which is not

285
00:09:49,680 --> 00:09:53,760
directly part i think of nunet at the

286
00:09:51,600 --> 00:09:55,839
moment and is still in development

287
00:09:53,760 --> 00:09:57,680
then there's also uh tikishare by the

288
00:09:55,839 --> 00:10:00,160
way is a

289
00:09:57,680 --> 00:10:01,199
social network i think so it's it's kind

290
00:10:00,160 --> 00:10:03,680
of a replacement for something like

291
00:10:01,200 --> 00:10:03,680
facebook

292
00:10:04,640 --> 00:10:10,480
is a privacy friendly

293
00:10:07,839 --> 00:10:11,760
payment system and something a project

294
00:10:10,480 --> 00:10:14,399
that i'm also involved in

295
00:10:11,760 --> 00:10:15,920
involved with is reclaim id reclaim

296
00:10:14,399 --> 00:10:17,279
ideas we have heard it i think three

297
00:10:15,920 --> 00:10:18,800
times now today

298
00:10:17,279 --> 00:10:20,640
what you would call a self-sovereign

299
00:10:18,800 --> 00:10:23,839
identity system

300
00:10:20,640 --> 00:10:25,839
um what it does a bit differently

301
00:10:23,839 --> 00:10:27,440
i guess is that the only thing really

302
00:10:25,839 --> 00:10:29,839
mit tries to achieve

303
00:10:27,440 --> 00:10:30,640
is to decentralize the openid connect

304
00:10:29,839 --> 00:10:34,079
service

305
00:10:30,640 --> 00:10:36,399
so i think i i think i heard today that

306
00:10:34,079 --> 00:10:37,680
when you whenever you do authentication

307
00:10:36,399 --> 00:10:41,120
um

308
00:10:37,680 --> 00:10:42,560
that you can basically simply uh

309
00:10:41,120 --> 00:10:44,640
use open id connect and then the

310
00:10:42,560 --> 00:10:46,800
authentication will happen

311
00:10:44,640 --> 00:10:47,680
for you and that is not actually true

312
00:10:46,800 --> 00:10:49,439
because often

313
00:10:47,680 --> 00:10:51,359
operating connect they have actually

314
00:10:49,440 --> 00:10:53,600
nothing to do with authentication

315
00:10:51,360 --> 00:10:55,279
it's actually says that in the spec the

316
00:10:53,600 --> 00:10:55,920
only thing open id connect helps you to

317
00:10:55,279 --> 00:10:59,760
do

318
00:10:55,920 --> 00:11:02,959
is to authorize another party to access

319
00:10:59,760 --> 00:11:04,720
your data somewhere that's the only

320
00:11:02,959 --> 00:11:05,760
thing the protocol actually does

321
00:11:04,720 --> 00:11:07,680
it doesn't have anything to do with

322
00:11:05,760 --> 00:11:09,839
authentication and that is what

323
00:11:07,680 --> 00:11:11,359
requirement does so users can basically

324
00:11:09,839 --> 00:11:13,040
use a standardized way

325
00:11:11,360 --> 00:11:15,040
to share personal information with other

326
00:11:13,040 --> 00:11:16,880
websites

327
00:11:15,040 --> 00:11:19,519
but it it does not include any kind of

328
00:11:16,880 --> 00:11:19,519
authentication

329
00:11:19,680 --> 00:11:25,279
okay so recall media basically is just a

330
00:11:21,760 --> 00:11:29,839
combination of open id connect

331
00:11:25,279 --> 00:11:31,760
with gns

332
00:11:29,839 --> 00:11:33,040
now one thing i left out until now and

333
00:11:31,760 --> 00:11:34,959
that is

334
00:11:33,040 --> 00:11:36,399
probably the most important thing if you

335
00:11:34,959 --> 00:11:38,000
want to use the stack

336
00:11:36,399 --> 00:11:41,120
obviously at some point you need to

337
00:11:38,000 --> 00:11:44,800
bring it to the real world right

338
00:11:41,120 --> 00:11:46,880
your software needs to run on something

339
00:11:44,800 --> 00:11:48,640
and the most straightforward way um if

340
00:11:46,880 --> 00:11:50,160
you build any p2p system is to just say

341
00:11:48,640 --> 00:11:52,480
i'm going to open a tcp socket to the

342
00:11:50,160 --> 00:11:54,719
other peers and then you're done

343
00:11:52,480 --> 00:11:56,240
which makes sense as long as this works

344
00:11:54,720 --> 00:11:57,279
as long as your peer-to-peer protocol

345
00:11:56,240 --> 00:11:59,519
port is not blocked

346
00:11:57,279 --> 00:12:00,639
as long as the network is not blocked in

347
00:11:59,519 --> 00:12:03,440
any way you know

348
00:12:00,639 --> 00:12:05,120
for example by a deep package inspection

349
00:12:03,440 --> 00:12:06,320
then this is fine

350
00:12:05,120 --> 00:12:08,320
but what if your network is more

351
00:12:06,320 --> 00:12:10,720
restricted

352
00:12:08,320 --> 00:12:12,320
at that point you could think well i'm

353
00:12:10,720 --> 00:12:14,480
just going to run my protocol

354
00:12:12,320 --> 00:12:15,839
over a application layer protocol i

355
00:12:14,480 --> 00:12:17,279
could just say well then i'm going to

356
00:12:15,839 --> 00:12:20,720
run over https

357
00:12:17,279 --> 00:12:24,880
because who's going to block https

358
00:12:20,720 --> 00:12:27,920
um so that's another option um

359
00:12:24,880 --> 00:12:30,000
until somebody maybe tries to

360
00:12:27,920 --> 00:12:33,920
i don't know probe your https servers

361
00:12:30,000 --> 00:12:33,920
that are not really https servers

362
00:12:34,000 --> 00:12:37,440
so the third option might be to go lower

363
00:12:36,160 --> 00:12:39,600
in the stack and you say

364
00:12:37,440 --> 00:12:41,920
well if i can use ethernet maybe i can

365
00:12:39,600 --> 00:12:44,160
use ethernet but if i can't use ethernet

366
00:12:41,920 --> 00:12:46,479
then maybe i need to use like bare wi-fi

367
00:12:44,160 --> 00:12:49,040
or bluetooth meshes or i don't know

368
00:12:46,480 --> 00:12:50,800
satellites so that i have some kind of

369
00:12:49,040 --> 00:12:52,639
physical mechanism

370
00:12:50,800 --> 00:12:54,160
that i can run my protocols on that are

371
00:12:52,639 --> 00:12:56,880
not under the control of some kind of

372
00:12:54,160 --> 00:12:59,920
infrastructure provider

373
00:12:56,880 --> 00:13:02,959
the answering how to solve this is

374
00:12:59,920 --> 00:13:06,319
yes we're just going to use all of them

375
00:13:02,959 --> 00:13:09,839
so basically we have a a separate layer

376
00:13:06,320 --> 00:13:13,519
that exposes a transport api

377
00:13:09,839 --> 00:13:16,240
um to our stack but

378
00:13:13,519 --> 00:13:16,880
the actual connectivity that a node has

379
00:13:16,240 --> 00:13:18,160
is

380
00:13:16,880 --> 00:13:20,000
you can think of it like a plug-in

381
00:13:18,160 --> 00:13:22,959
infrastructure so you can basically

382
00:13:20,000 --> 00:13:24,639
enable or disable plugins such as a tcp

383
00:13:22,959 --> 00:13:27,359
plugin an http plugin

384
00:13:24,639 --> 00:13:28,639
a wi-fi bluetooth plug-in quick plug-in

385
00:13:27,360 --> 00:13:30,079
you can think of it

386
00:13:28,639 --> 00:13:32,240
and it doesn't really matter what

387
00:13:30,079 --> 00:13:34,800
plugins you have enabled

388
00:13:32,240 --> 00:13:36,079
you will still be using the same stack

389
00:13:34,800 --> 00:13:39,120
so somebody who lives

390
00:13:36,079 --> 00:13:40,239
who has a very restricted network might

391
00:13:39,120 --> 00:13:43,600
need to

392
00:13:40,240 --> 00:13:44,959
use a bluetooth mesh network um somebody

393
00:13:43,600 --> 00:13:46,320
who

394
00:13:44,959 --> 00:13:48,079
just wants to use the network something

395
00:13:46,320 --> 00:13:50,800
productive and is in a very liberal

396
00:13:48,079 --> 00:13:53,680
network might be able to use the tcp uh

397
00:13:50,800 --> 00:13:55,120
node just as well and it will work

398
00:13:53,680 --> 00:13:56,959
but the important thing is that this is

399
00:13:55,120 --> 00:13:58,000
abstracted from the actual application

400
00:13:56,959 --> 00:14:02,079
so

401
00:13:58,000 --> 00:14:05,600
it will just work

402
00:14:02,079 --> 00:14:07,680
now this is the core ignorant stack if

403
00:14:05,600 --> 00:14:10,079
you look at it from the os

404
00:14:07,680 --> 00:14:12,560
iso oc layer perspective this is

405
00:14:10,079 --> 00:14:13,839
something that you can just use

406
00:14:12,560 --> 00:14:15,760
and one thing i would like to note at

407
00:14:13,839 --> 00:14:17,120
that point is that whenever somebody

408
00:14:15,760 --> 00:14:18,720
looks at gnunet

409
00:14:17,120 --> 00:14:20,639
and look at the documentation then

410
00:14:18,720 --> 00:14:21,360
obviously everything in that stack is

411
00:14:20,639 --> 00:14:23,199
documented

412
00:14:21,360 --> 00:14:24,560
so the documentation is huge it looks

413
00:14:23,199 --> 00:14:26,399
very complex

414
00:14:24,560 --> 00:14:27,920
but if you think about it if you want to

415
00:14:26,399 --> 00:14:30,320
open a socket somewhere

416
00:14:27,920 --> 00:14:31,839
you're not looking up how ethernet works

417
00:14:30,320 --> 00:14:32,800
nobody does that you're not looking up

418
00:14:31,839 --> 00:14:34,800
how your wi-fi

419
00:14:32,800 --> 00:14:36,240
actually does the connection and the

420
00:14:34,800 --> 00:14:38,719
signaling works

421
00:14:36,240 --> 00:14:40,720
so in lunad if you need a name system

422
00:14:38,720 --> 00:14:43,440
you just have to look at gns and if you

423
00:14:40,720 --> 00:14:45,360
only need a transport layer protocol you

424
00:14:43,440 --> 00:14:47,040
can only look at cadet

425
00:14:45,360 --> 00:14:49,680
and then you're done and the apis for

426
00:14:47,040 --> 00:14:52,240
the individual layers are actually quite

427
00:14:49,680 --> 00:14:52,239
quite lean

428
00:14:52,800 --> 00:14:55,839
now we can also look at this graph a bit

429
00:14:54,560 --> 00:14:57,518
differently

430
00:14:55,839 --> 00:14:59,360
if you actually would start a new net

431
00:14:57,519 --> 00:15:01,120
node

432
00:14:59,360 --> 00:15:02,480
you would basically get a number of

433
00:15:01,120 --> 00:15:05,120
processes that are started

434
00:15:02,480 --> 00:15:06,880
and each process is essentially a layer

435
00:15:05,120 --> 00:15:08,399
in our core stack so you would get a

436
00:15:06,880 --> 00:15:09,839
process for the transport layer you

437
00:15:08,399 --> 00:15:11,839
would get a process for the

438
00:15:09,839 --> 00:15:14,480
name system for the resolver you would

439
00:15:11,839 --> 00:15:17,040
get a process for your transports

440
00:15:14,480 --> 00:15:18,639
etc and i guess today you would call

441
00:15:17,040 --> 00:15:19,839
this a micro service architecture and

442
00:15:18,639 --> 00:15:22,000
put them in containers but

443
00:15:19,839 --> 00:15:23,519
the gnunet protocol the newness project

444
00:15:22,000 --> 00:15:26,079
is over 10 years old so

445
00:15:23,519 --> 00:15:27,839
back then those names didn't exist but

446
00:15:26,079 --> 00:15:29,439
this is how it looks like

447
00:15:27,839 --> 00:15:31,040
the nice thing that you can do and that

448
00:15:29,440 --> 00:15:32,720
is currently also happening

449
00:15:31,040 --> 00:15:36,000
because i told you that we're currently

450
00:15:32,720 --> 00:15:38,000
standardizing the gns name system

451
00:15:36,000 --> 00:15:39,600
and what somebody else is doing part of

452
00:15:38,000 --> 00:15:42,959
the project is

453
00:15:39,600 --> 00:15:44,079
he says oh well just one thing unit is

454
00:15:42,959 --> 00:15:45,518
written in c

455
00:15:44,079 --> 00:15:47,040
and usually we get something like ah

456
00:15:45,519 --> 00:15:47,680
it's written in c i don't want to write

457
00:15:47,040 --> 00:15:49,120
c

458
00:15:47,680 --> 00:15:51,120
but you don't really have to because

459
00:15:49,120 --> 00:15:52,720
what you can do is you can just write

460
00:15:51,120 --> 00:15:54,240
a service in another language so

461
00:15:52,720 --> 00:15:56,639
currently somebody writes a go

462
00:15:54,240 --> 00:15:57,920
implementation of gns

463
00:15:56,639 --> 00:16:00,560
and you don't have to implement the

464
00:15:57,920 --> 00:16:02,079
whole stack down to make this work

465
00:16:00,560 --> 00:16:04,399
because

466
00:16:02,079 --> 00:16:05,839
each layer in gns in the user space

467
00:16:04,399 --> 00:16:07,199
communicates with the lower and upper

468
00:16:05,839 --> 00:16:08,720
layers using sockets

469
00:16:07,199 --> 00:16:10,479
it could be a unix domain socket or a

470
00:16:08,720 --> 00:16:14,399
tcp socket doesn't really matter

471
00:16:10,480 --> 00:16:17,440
and you can like drop in replace

472
00:16:14,399 --> 00:16:19,279
any service that you want and this is

473
00:16:17,440 --> 00:16:20,720
also true for example for the go service

474
00:16:19,279 --> 00:16:22,480
so you can just

475
00:16:20,720 --> 00:16:24,800
listen to the proper sockets and use the

476
00:16:22,480 --> 00:16:27,680
proper sockets and then would just work

477
00:16:24,800 --> 00:16:30,719
so extension is not really tied to the

478
00:16:27,680 --> 00:16:32,560
to the technology used in the framework

479
00:16:30,720 --> 00:16:34,839
um actually we're currently rewriting

480
00:16:32,560 --> 00:16:37,680
the the transport stack because it has

481
00:16:34,839 --> 00:16:39,680
some

482
00:16:37,680 --> 00:16:42,399
architectural deficits currently for

483
00:16:39,680 --> 00:16:45,040
example the

484
00:16:42,399 --> 00:16:48,079
the plugins that we use tcp http if one

485
00:16:45,040 --> 00:16:50,240
of those plugins currently crashes

486
00:16:48,079 --> 00:16:52,000
it takes the transport service with it

487
00:16:50,240 --> 00:16:53,759
because it's a dynamic library and we

488
00:16:52,000 --> 00:16:55,839
want to change that so that every

489
00:16:53,759 --> 00:16:57,440
um actually transport plug-in is its own

490
00:16:55,839 --> 00:16:59,279
process so if it crashes

491
00:16:57,440 --> 00:17:04,480
we don't really care and we can still

492
00:16:59,279 --> 00:17:06,559
provide the transport layer

493
00:17:04,480 --> 00:17:08,000
um and at this point i should probably

494
00:17:06,559 --> 00:17:08,559
say that i have not been quite honest

495
00:17:08,000 --> 00:17:11,359
with you

496
00:17:08,559 --> 00:17:11,839
so this is a very simplistic view over

497
00:17:11,359 --> 00:17:14,399
how

498
00:17:11,839 --> 00:17:16,399
nunet works the truth is there are a lot

499
00:17:14,400 --> 00:17:18,240
of applications and services currently

500
00:17:16,400 --> 00:17:19,600
implemented in gnunet and if you go to

501
00:17:18,240 --> 00:17:23,919
our website and look at

502
00:17:19,599 --> 00:17:23,918
architecture you will get this picture

503
00:17:24,720 --> 00:17:31,520
which is the gnunet spaghetti monster

504
00:17:28,400 --> 00:17:35,120
but it's actually if you now know that

505
00:17:31,520 --> 00:17:36,879
the core the core framework of nunet

506
00:17:35,120 --> 00:17:37,600
consists of the services that i've just

507
00:17:36,880 --> 00:17:39,280
shown you

508
00:17:37,600 --> 00:17:41,360
you can you can easily find them again

509
00:17:39,280 --> 00:17:42,399
here so in the middle you have a core if

510
00:17:41,360 --> 00:17:44,799
you can read it

511
00:17:42,400 --> 00:17:45,520
and above you have cadet and there's a

512
00:17:44,799 --> 00:17:48,799
dht

513
00:17:45,520 --> 00:17:51,760
somewhere um but it's just

514
00:17:48,799 --> 00:17:53,600
already a huge application ecosystem um

515
00:17:51,760 --> 00:17:55,120
one thing that that you can see here is

516
00:17:53,600 --> 00:17:55,760
on the left side you can see that

517
00:17:55,120 --> 00:17:58,080
there's an

518
00:17:55,760 --> 00:18:00,080
fs application which is essentially file

519
00:17:58,080 --> 00:18:03,199
sharing think ipfs

520
00:18:00,080 --> 00:18:04,879
there's a voting application on the top

521
00:18:03,200 --> 00:18:06,960
right you can see conversation which is

522
00:18:04,880 --> 00:18:10,799
a voiceover ip service

523
00:18:06,960 --> 00:18:12,160
and top if you can see the security so

524
00:18:10,799 --> 00:18:13,840
personally i think we should probably

525
00:18:12,160 --> 00:18:15,200
remove this picture and replace it with

526
00:18:13,840 --> 00:18:16,879
something more simplistic

527
00:18:15,200 --> 00:18:18,320
on the other hand this is more truth to

528
00:18:16,880 --> 00:18:19,360
what is actually currently implemented

529
00:18:18,320 --> 00:18:23,678
so

530
00:18:19,360 --> 00:18:23,678
um we probably need to think about this

531
00:18:24,240 --> 00:18:28,240
okay so westminster what's the current

532
00:18:26,400 --> 00:18:29,919
state and where are we going

533
00:18:28,240 --> 00:18:31,679
i would say that nunet currently is not

534
00:18:29,919 --> 00:18:33,600
something that you can just use and

535
00:18:31,679 --> 00:18:36,480
build a productive application with it

536
00:18:33,600 --> 00:18:38,240
because just in december we had to

537
00:18:36,480 --> 00:18:40,320
basically break compatibility

538
00:18:38,240 --> 00:18:42,480
and re-implement some of the

539
00:18:40,320 --> 00:18:44,320
cryptography and obviously that

540
00:18:42,480 --> 00:18:46,400
basically broke the whole network and

541
00:18:44,320 --> 00:18:48,799
now it has to rebuild itself and

542
00:18:46,400 --> 00:18:50,799
we are planning to do that at least once

543
00:18:48,799 --> 00:18:53,600
again this year because there's just

544
00:18:50,799 --> 00:18:54,559
still a lot of things to do and a lot of

545
00:18:53,600 --> 00:18:56,639
things to get right

546
00:18:54,559 --> 00:18:58,160
especially in the lower levels so

547
00:18:56,640 --> 00:19:00,000
especially in transport layer

548
00:18:58,160 --> 00:19:02,480
especially in the core layers to get

549
00:19:00,000 --> 00:19:02,480
this right

550
00:19:02,720 --> 00:19:06,480
on the other hand the the upper layers

551
00:19:05,280 --> 00:19:08,559
they look a lot better

552
00:19:06,480 --> 00:19:11,039
um so we're currently standardizing the

553
00:19:08,559 --> 00:19:12,480
gns protocol at which point we probably

554
00:19:11,039 --> 00:19:14,799
don't want to change anything

555
00:19:12,480 --> 00:19:16,240
regarding that anymore that's why

556
00:19:14,799 --> 00:19:18,000
there's also currently an alternative

557
00:19:16,240 --> 00:19:21,039
implementation

558
00:19:18,000 --> 00:19:22,080
right and beyond that we have obviously

559
00:19:21,039 --> 00:19:23,679
larger goals

560
00:19:22,080 --> 00:19:25,039
one of the largest one is probably offer

561
00:19:23,679 --> 00:19:26,480
maybe something like a dot org

562
00:19:25,039 --> 00:19:28,879
replacement authority

563
00:19:26,480 --> 00:19:30,000
um using the new name system obviously

564
00:19:28,880 --> 00:19:30,960
there needs to be some kind of an

565
00:19:30,000 --> 00:19:34,000
organization that

566
00:19:30,960 --> 00:19:37,120
actually manages this which is probably

567
00:19:34,000 --> 00:19:40,000
then not going to be us

568
00:19:37,120 --> 00:19:41,760
and also we will be continuing to

569
00:19:40,000 --> 00:19:42,640
implement um additional transports i

570
00:19:41,760 --> 00:19:44,480
think the

571
00:19:42,640 --> 00:19:45,760
the ability to to use different

572
00:19:44,480 --> 00:19:46,799
transports and to implement them is

573
00:19:45,760 --> 00:19:48,000
actually quite interesting so if

574
00:19:46,799 --> 00:19:48,960
somebody's interested in writing a

575
00:19:48,000 --> 00:19:52,240
transport then

576
00:19:48,960 --> 00:19:53,600
um feel free to contact us we're also

577
00:19:52,240 --> 00:19:56,000
going to participate in this year's

578
00:19:53,600 --> 00:19:58,320
google sum of code i don't know yet what

579
00:19:56,000 --> 00:20:00,240
kind of projects we're going to offer

580
00:19:58,320 --> 00:20:01,600
but there's probably going to be from

581
00:20:00,240 --> 00:20:04,480
very simple projects to

582
00:20:01,600 --> 00:20:05,760
like very difficult tasks um a few

583
00:20:04,480 --> 00:20:06,960
options so if you're interested that you

584
00:20:05,760 --> 00:20:10,000
can just

585
00:20:06,960 --> 00:20:10,720
contact us yeah um that was my final

586
00:20:10,000 --> 00:20:21,840
slide

587
00:20:10,720 --> 00:20:21,840
thank you and if you have any questions

588
00:20:21,919 --> 00:20:25,760
thanks so i i love the project

589
00:20:24,159 --> 00:20:26,799
especially the talent i really like the

590
00:20:25,760 --> 00:20:29,840
payment system

591
00:20:26,799 --> 00:20:34,080
i have a question about the name system

592
00:20:29,840 --> 00:20:36,959
gns does each name owned by one

593
00:20:34,080 --> 00:20:38,960
entity if yes how do you make sure and

594
00:20:36,960 --> 00:20:39,440
who did decide who owns the name and if

595
00:20:38,960 --> 00:20:41,120
not

596
00:20:39,440 --> 00:20:42,559
when i come to resolve the name how do i

597
00:20:41,120 --> 00:20:45,600
know which of the

598
00:20:42,559 --> 00:20:47,280
values to take so the the idea that it's

599
00:20:45,600 --> 00:20:48,399
initially supposed to work is i don't

600
00:20:47,280 --> 00:20:51,520
know if you heard about

601
00:20:48,400 --> 00:20:54,320
hyper local root in dns so we're going

602
00:20:51,520 --> 00:20:55,918
to basically ship a root zone for you

603
00:20:54,320 --> 00:20:58,799
that is basically a list of top level

604
00:20:55,919 --> 00:21:00,720
domains that map against the public key

605
00:20:58,799 --> 00:21:02,158
and if the user wants to change that he

606
00:21:00,720 --> 00:21:03,919
can do that

607
00:21:02,159 --> 00:21:05,600
because it's just a configuration file

608
00:21:03,919 --> 00:21:08,000
but that's basically the concept so you

609
00:21:05,600 --> 00:21:10,240
have a local root zone file

610
00:21:08,000 --> 00:21:11,679
that you can modify and that basically

611
00:21:10,240 --> 00:21:17,840
assures that most of the time you will

612
00:21:11,679 --> 00:21:17,840
have the same names

613
00:21:22,880 --> 00:21:27,440
good every technology stack has certain

614
00:21:25,679 --> 00:21:29,919
affordances

615
00:21:27,440 --> 00:21:31,280
is um the problems with the left-hand

616
00:21:29,919 --> 00:21:34,320
stack are really obvious now

617
00:21:31,280 --> 00:21:35,600
is anyone thinking ahead to what the

618
00:21:34,320 --> 00:21:37,200
unintended consequences of the

619
00:21:35,600 --> 00:21:38,080
right-hand side might be are you doing

620
00:21:37,200 --> 00:21:40,080
things like

621
00:21:38,080 --> 00:21:41,520
consequent scanning have you got people

622
00:21:40,080 --> 00:21:42,840
who are maybe not technologists working

623
00:21:41,520 --> 00:21:44,158
with you to think about the political

624
00:21:42,840 --> 00:21:45,678
implications

625
00:21:44,159 --> 00:21:47,520
the political implications of the

626
00:21:45,679 --> 00:21:49,760
writing stack

627
00:21:47,520 --> 00:21:51,039
um you mean within our project if we're

628
00:21:49,760 --> 00:21:52,400
thinking about that i think there are

629
00:21:51,039 --> 00:21:53,039
people that think about this i'm more

630
00:21:52,400 --> 00:21:55,120
the techie

631
00:21:53,039 --> 00:21:57,120
i don't really care about it i just want

632
00:21:55,120 --> 00:22:00,000
it to work

633
00:21:57,120 --> 00:22:01,280
but but uh yeah if you like if you um

634
00:22:00,000 --> 00:22:02,799
right on the mailing list i'm sure there

635
00:22:01,280 --> 00:22:03,840
will be a few people that have comments

636
00:22:02,799 --> 00:22:06,559
on that but

637
00:22:03,840 --> 00:22:07,600
i'm not the right person probably sorry

638
00:22:06,559 --> 00:22:08,480
can you tell us a bit on the

639
00:22:07,600 --> 00:22:10,639
performances of

640
00:22:08,480 --> 00:22:12,799
no net the performance of nunet there

641
00:22:10,640 --> 00:22:14,480
are actual numbers on that we have

642
00:22:12,799 --> 00:22:16,639
last year done a study for example on

643
00:22:14,480 --> 00:22:19,600
the performance of the dht

644
00:22:16,640 --> 00:22:21,120
and the and the with with it the gns so

645
00:22:19,600 --> 00:22:21,600
you can look that up it's on our web

646
00:22:21,120 --> 00:22:23,600
page

647
00:22:21,600 --> 00:22:25,120
and it's obviously it's not as good as

648
00:22:23,600 --> 00:22:27,678
the current internet right but um

649
00:22:25,120 --> 00:22:31,280
but it but it's enough to do your

650
00:22:27,679 --> 00:22:31,280
regular work and then to do things with

651
00:22:38,840 --> 00:22:46,320
it

652
00:22:40,960 --> 00:22:49,440
hi hello um is there any plan to like

653
00:22:46,320 --> 00:22:51,840
have it run on top of a web circuit

654
00:22:49,440 --> 00:22:53,600
and implementing everything inside the

655
00:22:51,840 --> 00:22:54,080
browser for example there is there is a

656
00:22:53,600 --> 00:22:56,559
project

657
00:22:54,080 --> 00:22:58,158
that is um that is working not working

658
00:22:56,559 --> 00:23:00,559
on gnunet dot io

659
00:22:58,159 --> 00:23:02,400
you can look it up um somebody compiled

660
00:23:00,559 --> 00:23:03,678
gnunet which is c into web assembly

661
00:23:02,400 --> 00:23:07,280
using amscriptan

662
00:23:03,679 --> 00:23:08,159
and wrote a transport plugin for

663
00:23:07,280 --> 00:23:10,000
websocket

664
00:23:08,159 --> 00:23:12,480
so that it just runs in the browser so

665
00:23:10,000 --> 00:23:12,480
that works

666
00:23:13,120 --> 00:23:18,639
are there any further questions if you

667
00:23:14,799 --> 00:23:18,639
want to leave please leave silently

668
00:23:20,159 --> 00:23:25,200
i guess that's it

669
00:23:23,520 --> 00:23:27,918
then thank you very much for giving this

670
00:23:25,200 --> 00:23:27,919
talk martin

671
00:23:30,670 --> 00:23:36,159
[Applause]

672
00:23:33,200 --> 00:23:37,919
as this room is known to get full every

673
00:23:36,159 --> 00:23:40,240
year we ask you

674
00:23:37,919 --> 00:23:42,240
that during the break you try to move as

675
00:23:40,240 --> 00:23:42,559
much inside as possible so people who

676
00:23:42,240 --> 00:23:51,279
come

677
00:23:42,559 --> 00:23:51,279
late can find a seat

