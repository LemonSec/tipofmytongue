1
00:00:05,520 --> 00:00:08,559
hello i'm

2
00:00:06,240 --> 00:00:10,320
drew uh fastini this is my first fosdem

3
00:00:08,559 --> 00:00:12,000
i've been watching uh videos for many

4
00:00:10,320 --> 00:00:12,559
years uh so this is my first time

5
00:00:12,000 --> 00:00:14,879
actually

6
00:00:12,559 --> 00:00:15,678
getting here so i'm excited to be here

7
00:00:14,880 --> 00:00:17,199
um

8
00:00:15,679 --> 00:00:19,439
actually i'm from chicago but i moved to

9
00:00:17,199 --> 00:00:22,160
berlin uh this past year um

10
00:00:19,439 --> 00:00:24,000
so i'm in the area now um i'm part of

11
00:00:22,160 --> 00:00:24,480
the beaglewater dark foundation we make

12
00:00:24,000 --> 00:00:27,119
small

13
00:00:24,480 --> 00:00:29,279
single board computers most popularly

14
00:00:27,119 --> 00:00:30,800
known as the beaglebone

15
00:00:29,279 --> 00:00:32,399
also part of the open source hardware

16
00:00:30,800 --> 00:00:34,480
association um

17
00:00:32,399 --> 00:00:36,719
this is a group that we have a open

18
00:00:34,480 --> 00:00:39,760
source hardware certification program

19
00:00:36,719 --> 00:00:40,399
um and i mentioned berlin if you are in

20
00:00:39,760 --> 00:00:42,000
the area

21
00:00:40,399 --> 00:00:43,520
in a couple weeks we have the berlin

22
00:00:42,000 --> 00:00:45,360
embedded linux meetup

23
00:00:43,520 --> 00:00:47,520
so if you're around we'd love to have

24
00:00:45,360 --> 00:00:50,320
you stop by that

25
00:00:47,520 --> 00:00:50,640
and then on march 13th in new york city

26
00:00:50,320 --> 00:00:52,399
um

27
00:00:50,640 --> 00:00:53,840
the open source hardware association we

28
00:00:52,399 --> 00:00:55,280
organized an annual

29
00:00:53,840 --> 00:00:57,280
uh conference called the open harbor

30
00:00:55,280 --> 00:00:58,239
summit so if you're able to this will be

31
00:00:57,280 --> 00:01:01,359
on march 13th

32
00:00:58,239 --> 00:01:03,358
um in new york city

33
00:01:01,359 --> 00:01:05,199
um and since i mentioned open source

34
00:01:03,359 --> 00:01:07,280
hardware just want to give a brief

35
00:01:05,199 --> 00:01:08,720
introduction of what that is so it's

36
00:01:07,280 --> 00:01:10,320
hardware whose design

37
00:01:08,720 --> 00:01:12,240
is made publicly available so that

38
00:01:10,320 --> 00:01:15,679
anyone can study modify

39
00:01:12,240 --> 00:01:17,759
distribute make and sell the hardware

40
00:01:15,680 --> 00:01:20,159
help sell the design or hardware based

41
00:01:17,759 --> 00:01:21,920
on the design

42
00:01:20,159 --> 00:01:24,159
um so for electronics which is mostly

43
00:01:21,920 --> 00:01:26,000
what i do um that would be the schemat

44
00:01:24,159 --> 00:01:27,600
you'd be sharing the schematics the

45
00:01:26,000 --> 00:01:29,280
board layout

46
00:01:27,600 --> 00:01:31,119
in the editable source file so if you're

47
00:01:29,280 --> 00:01:31,600
using a program like keycad you'd share

48
00:01:31,119 --> 00:01:34,079
your

49
00:01:31,600 --> 00:01:36,559
board file in your schematic file and

50
00:01:34,079 --> 00:01:38,399
then also the bill materials

51
00:01:36,560 --> 00:01:40,240
and one of the best practices if you

52
00:01:38,400 --> 00:01:41,840
want to do this is to make sure that the

53
00:01:40,240 --> 00:01:43,600
bill materials

54
00:01:41,840 --> 00:01:45,200
you have the components are available in

55
00:01:43,600 --> 00:01:46,798
a small quantity

56
00:01:45,200 --> 00:01:48,479
so like with beaglebone we make sure

57
00:01:46,799 --> 00:01:51,280
that all the components are available in

58
00:01:48,479 --> 00:01:54,079
quantity of one from distributors

59
00:01:51,280 --> 00:01:55,920
and the reason for oh i also gave a talk

60
00:01:54,079 --> 00:01:57,759
at ccc recently that i go more into

61
00:01:55,920 --> 00:01:59,840
depth about like open source hardware

62
00:01:57,759 --> 00:02:00,799
um from the different licensing and also

63
00:01:59,840 --> 00:02:02,159
some of the different

64
00:02:00,799 --> 00:02:03,520
open source hardware boards that run

65
00:02:02,159 --> 00:02:04,799
linux so if you're interested in that

66
00:02:03,520 --> 00:02:08,079
you can check out my

67
00:02:04,799 --> 00:02:09,360
363c talk um but

68
00:02:08,080 --> 00:02:10,959
going back to the open source hardware

69
00:02:09,360 --> 00:02:12,160
why would you do this i would say the

70
00:02:10,959 --> 00:02:13,599
main reason to do it is you want to

71
00:02:12,160 --> 00:02:15,280
enable other people to collaborate on

72
00:02:13,599 --> 00:02:18,000
your hardware project

73
00:02:15,280 --> 00:02:19,680
so by sharing your schematics and your

74
00:02:18,000 --> 00:02:20,160
board layouts and editable format you

75
00:02:19,680 --> 00:02:22,080
can

76
00:02:20,160 --> 00:02:23,280
get people to contribute back changes to

77
00:02:22,080 --> 00:02:25,200
your project and

78
00:02:23,280 --> 00:02:26,400
if you make the components available if

79
00:02:25,200 --> 00:02:27,679
you choose components that are available

80
00:02:26,400 --> 00:02:30,640
through distribution people can actually

81
00:02:27,680 --> 00:02:30,640
build your project

82
00:02:31,040 --> 00:02:34,480
so um i'm very excited right now about

83
00:02:33,200 --> 00:02:37,760
risk 5

84
00:02:34,480 --> 00:02:39,200
which is a um open instruction set um so

85
00:02:37,760 --> 00:02:41,518
what's an instruction set so probably

86
00:02:39,200 --> 00:02:43,760
many of you have heard of x86 or arm

87
00:02:41,519 --> 00:02:44,560
these are um instruction sets which is

88
00:02:43,760 --> 00:02:46,959
essentially

89
00:02:44,560 --> 00:02:48,480
the standard for uh what tasks a

90
00:02:46,959 --> 00:02:50,000
processor can do at a low level the

91
00:02:48,480 --> 00:02:53,280
instructions that the processor can

92
00:02:50,000 --> 00:02:54,319
execute um though with both x86 from

93
00:02:53,280 --> 00:02:56,319
intel and amd

94
00:02:54,319 --> 00:02:58,238
and um the arm instruction sets they're

95
00:02:56,319 --> 00:03:00,000
all proprietary

96
00:02:58,239 --> 00:03:01,440
so if we want to make like an open

97
00:03:00,000 --> 00:03:03,120
source chip we need to have an open

98
00:03:01,440 --> 00:03:05,200
source instruction set so

99
00:03:03,120 --> 00:03:07,280
risk five um i think it's about ten

100
00:03:05,200 --> 00:03:09,040
years ago now it was started by a group

101
00:03:07,280 --> 00:03:10,560
at berkeley that was doing uh computer

102
00:03:09,040 --> 00:03:12,319
architecture research so

103
00:03:10,560 --> 00:03:14,319
risk five is a free and open instruction

104
00:03:12,319 --> 00:03:16,159
set um i believe it's licensed under

105
00:03:14,319 --> 00:03:18,319
creative commons the standard is so

106
00:03:16,159 --> 00:03:20,560
anyone can take that instruction set and

107
00:03:18,319 --> 00:03:22,480
implement it

108
00:03:20,560 --> 00:03:24,799
um there's a couple great talks if you

109
00:03:22,480 --> 00:03:26,879
want to get more in depth on risk five

110
00:03:24,799 --> 00:03:28,400
one is from david patterson who's one of

111
00:03:26,879 --> 00:03:31,280
the people that originally um started

112
00:03:28,400 --> 00:03:34,239
risk back in the early 80s

113
00:03:31,280 --> 00:03:35,760
and then also chris asanovich who's the

114
00:03:34,239 --> 00:03:39,040
professor at berkeley that was

115
00:03:35,760 --> 00:03:39,040
leading the risk five team

116
00:03:39,440 --> 00:03:44,079
um and he does this talk at um probably

117
00:03:42,319 --> 00:03:45,280
like every six months at these risk five

118
00:03:44,080 --> 00:03:46,560
conferences so

119
00:03:45,280 --> 00:03:47,840
it's always kind of changing because

120
00:03:46,560 --> 00:03:48,720
it's uh there's a lot of development

121
00:03:47,840 --> 00:03:50,480
going on so

122
00:03:48,720 --> 00:03:51,760
if you ever want to check out like deep

123
00:03:50,480 --> 00:03:52,480
dive into what the current state of

124
00:03:51,760 --> 00:03:54,079
affairs is

125
00:03:52,480 --> 00:03:56,959
with risk five is they do the state of

126
00:03:54,080 --> 00:03:59,040
the union probably like every six months

127
00:03:56,959 --> 00:04:00,560
um so one of the things about roots five

128
00:03:59,040 --> 00:04:01,120
was the idea was to make it a modular

129
00:04:00,560 --> 00:04:04,480
isa

130
00:04:01,120 --> 00:04:06,000
that you could um be extensible so

131
00:04:04,480 --> 00:04:08,238
to make it last for something that's

132
00:04:06,000 --> 00:04:10,000
going to be valid a decade from now

133
00:04:08,239 --> 00:04:11,599
two decades from now they want it to be

134
00:04:10,000 --> 00:04:13,120
something where they're planning for the

135
00:04:11,599 --> 00:04:16,238
future so there's 32-bit

136
00:04:13,120 --> 00:04:19,280
64-bit and there's also 128-bit um

137
00:04:16,238 --> 00:04:21,358
version of the ris 5 instruction set so

138
00:04:19,279 --> 00:04:22,960
the idea being that you know once we

139
00:04:21,358 --> 00:04:24,560
have petabytes of memory we'll

140
00:04:22,960 --> 00:04:26,080
we'll still be able to address all that

141
00:04:24,560 --> 00:04:27,919
memory um

142
00:04:26,080 --> 00:04:29,758
yeah so going back to the project

143
00:04:27,919 --> 00:04:32,880
beginning i guess in 2011

144
00:04:29,759 --> 00:04:33,919
um all the way up to now we we have um a

145
00:04:32,880 --> 00:04:34,800
bunch of different companies that are

146
00:04:33,919 --> 00:04:37,919
involved now

147
00:04:34,800 --> 00:04:37,919
um and

148
00:04:38,160 --> 00:04:41,520
the ecosystem is probably the most

149
00:04:39,680 --> 00:04:42,000
important thing the software ecosystem

150
00:04:41,520 --> 00:04:44,159
so

151
00:04:42,000 --> 00:04:45,199
it's fine to have an instruction set but

152
00:04:44,160 --> 00:04:46,800
it's not worth

153
00:04:45,199 --> 00:04:48,880
it's not that valuable if you don't have

154
00:04:46,800 --> 00:04:50,639
support in compilers and tools and

155
00:04:48,880 --> 00:04:53,919
operating systems

156
00:04:50,639 --> 00:04:57,759
so their support in gcc llvm

157
00:04:53,919 --> 00:04:59,599
linux kernel pre-rtos now zephyr so

158
00:04:57,759 --> 00:05:02,320
pretty much everything that you need

159
00:04:59,600 --> 00:05:02,960
to have a system that you can develop

160
00:05:02,320 --> 00:05:06,639
and

161
00:05:02,960 --> 00:05:10,560
build and put into production

162
00:05:06,639 --> 00:05:12,080
so this kind of gives you a bit of a um

163
00:05:10,560 --> 00:05:14,800
bit of an insight into the instruction

164
00:05:12,080 --> 00:05:17,359
set so it actually is a very small

165
00:05:14,800 --> 00:05:19,680
base so the base of the isa is just the

166
00:05:17,360 --> 00:05:22,080
32-bit integer so that's all the bases

167
00:05:19,680 --> 00:05:24,720
for risk five so

168
00:05:22,080 --> 00:05:26,000
you can write software for this base isa

169
00:05:24,720 --> 00:05:28,320
32-bit integer

170
00:05:26,000 --> 00:05:30,560
uh and you'll be able to run that on a

171
00:05:28,320 --> 00:05:33,759
in the future we have some like

172
00:05:30,560 --> 00:05:35,600
10 core 128-bit risk 5 processor it'll

173
00:05:33,759 --> 00:05:36,720
still be able to run this base isa which

174
00:05:35,600 --> 00:05:38,639
is frozen

175
00:05:36,720 --> 00:05:41,840
um but then there's lots of extensions

176
00:05:38,639 --> 00:05:44,080
so this is the risk 5 32-bit integer

177
00:05:41,840 --> 00:05:45,679
um and then there's a bunch of

178
00:05:44,080 --> 00:05:48,080
extensions as well

179
00:05:45,680 --> 00:05:49,039
so david pearson gave this talk and in

180
00:05:48,080 --> 00:05:50,880
his pocket there

181
00:05:49,039 --> 00:05:52,159
is what is called the green card so i

182
00:05:50,880 --> 00:05:52,960
guess back in the day when people were

183
00:05:52,160 --> 00:05:55,840
um

184
00:05:52,960 --> 00:05:56,318
programming um machines with like you

185
00:05:55,840 --> 00:05:57,758
know

186
00:05:56,319 --> 00:05:59,680
terminals and teletypes and stuff like

187
00:05:57,759 --> 00:06:01,520
that they would have these um cards that

188
00:05:59,680 --> 00:06:04,639
showed all the instructions for the um

189
00:06:01,520 --> 00:06:06,159
for the cpu so this is the risk five

190
00:06:04,639 --> 00:06:08,080
equivalent of the green card

191
00:06:06,160 --> 00:06:10,319
so you can see here this is just the

192
00:06:08,080 --> 00:06:11,840
instructions for the base isa which is

193
00:06:10,319 --> 00:06:13,680
the 32-bit integer

194
00:06:11,840 --> 00:06:14,880
um and it's maybe like 20 30

195
00:06:13,680 --> 00:06:17,199
instructions um

196
00:06:14,880 --> 00:06:18,479
and then this is for all the current

197
00:06:17,199 --> 00:06:21,759
extensions so we have

198
00:06:18,479 --> 00:06:22,240
32-bit 64-bit 128-bit and then there's

199
00:06:21,759 --> 00:06:25,039
like a

200
00:06:22,240 --> 00:06:25,440
multiply and divide different versions

201
00:06:25,039 --> 00:06:27,520
of

202
00:06:25,440 --> 00:06:29,039
floating-point um compressed

203
00:06:27,520 --> 00:06:30,318
instructions so

204
00:06:29,039 --> 00:06:32,479
even putting all that together it's

205
00:06:30,319 --> 00:06:33,440
still not still not that much it's not

206
00:06:32,479 --> 00:06:35,840
overwhelming and it's

207
00:06:33,440 --> 00:06:37,360
architected so that you can um just

208
00:06:35,840 --> 00:06:40,719
choose the extensions that you need

209
00:06:37,360 --> 00:06:40,720
for your use case

210
00:06:40,960 --> 00:06:44,000
so um it was started at berkeley at a

211
00:06:43,120 --> 00:06:45,600
team at berkeley

212
00:06:44,000 --> 00:06:47,120
they now transitioned it where it's

213
00:06:45,600 --> 00:06:48,720
being organized by

214
00:06:47,120 --> 00:06:50,319
something called the risk fi foundation

215
00:06:48,720 --> 00:06:53,440
so the standard

216
00:06:50,319 --> 00:06:55,440
lives at risk5.org

217
00:06:53,440 --> 00:06:56,880
they also have been growing a lot so i

218
00:06:55,440 --> 00:06:59,360
think they have over 400 members now

219
00:06:56,880 --> 00:07:01,120
which is companies and universities

220
00:06:59,360 --> 00:07:03,199
you can also become an individual member

221
00:07:01,120 --> 00:07:05,120
as well of the foundation

222
00:07:03,199 --> 00:07:07,199
and one of the reasons to join for

223
00:07:05,120 --> 00:07:09,759
companies and universities is they can

224
00:07:07,199 --> 00:07:12,160
join these working groups where they're

225
00:07:09,759 --> 00:07:13,360
setting these new extensions like one of

226
00:07:12,160 --> 00:07:13,919
the things i think is in the works right

227
00:07:13,360 --> 00:07:17,520
now is

228
00:07:13,919 --> 00:07:17,840
vector extensions so in hypervisors and

229
00:07:17,520 --> 00:07:19,198
so

230
00:07:17,840 --> 00:07:21,440
these sorts of things are adding to the

231
00:07:19,199 --> 00:07:22,560
base isa you can join the foundation and

232
00:07:21,440 --> 00:07:26,319
get involved with

233
00:07:22,560 --> 00:07:29,360
shaping those and companies like nvidia

234
00:07:26,319 --> 00:07:30,960
is using the risc-5 as kind of like a

235
00:07:29,360 --> 00:07:31,360
management controller they replace their

236
00:07:30,960 --> 00:07:34,239
own

237
00:07:31,360 --> 00:07:35,599
proprietary isa in their graphics card

238
00:07:34,240 --> 00:07:37,680
not the gpu but

239
00:07:35,599 --> 00:07:38,719
something that helps manage um the the

240
00:07:37,680 --> 00:07:40,560
device

241
00:07:38,720 --> 00:07:42,080
and then western digital is probably one

242
00:07:40,560 --> 00:07:42,479
of the most heavily involved companies

243
00:07:42,080 --> 00:07:44,960
and

244
00:07:42,479 --> 00:07:47,758
they're replacing all the controllers in

245
00:07:44,960 --> 00:07:50,000
their drives um to be based on risk five

246
00:07:47,759 --> 00:07:51,360
um so in in the future nvidia and

247
00:07:50,000 --> 00:07:52,000
western digital and other companies will

248
00:07:51,360 --> 00:07:54,160
be shipping

249
00:07:52,000 --> 00:07:55,039
millions of devices every year um with

250
00:07:54,160 --> 00:07:57,199
risk five

251
00:07:55,039 --> 00:07:59,039
processors in it um one of the things

252
00:07:57,199 --> 00:07:59,599
companies companies can get when they do

253
00:07:59,039 --> 00:08:01,520
this is

254
00:07:59,599 --> 00:08:04,000
they don't have to pay licensing fees

255
00:08:01,520 --> 00:08:05,120
for proprietary isas and proprietary

256
00:08:04,000 --> 00:08:06,879
implementations

257
00:08:05,120 --> 00:08:08,240
but more than that they get the freedom

258
00:08:06,879 --> 00:08:10,800
to um

259
00:08:08,240 --> 00:08:12,000
implement it as they want like i think

260
00:08:10,800 --> 00:08:14,319
with arm you have to have an

261
00:08:12,000 --> 00:08:15,919
architecture license if you want to

262
00:08:14,319 --> 00:08:17,840
do substantial changes to the micro

263
00:08:15,919 --> 00:08:18,878
architecture which i think only a few

264
00:08:17,840 --> 00:08:21,440
companies have like

265
00:08:18,879 --> 00:08:22,960
qualcomm and apple everyone else like

266
00:08:21,440 --> 00:08:26,000
with beaglebone we use ti

267
00:08:22,960 --> 00:08:28,719
um parts and i think ti just licenses

268
00:08:26,000 --> 00:08:30,639
a specific core uh from arm so if you

269
00:08:28,720 --> 00:08:32,159
want to

270
00:08:30,639 --> 00:08:34,240
make more changes to like the micro

271
00:08:32,159 --> 00:08:35,838
architecture you oftentimes can't do

272
00:08:34,240 --> 00:08:37,440
that whereas with risk five you're free

273
00:08:35,839 --> 00:08:39,120
to do that there's also a lot of open

274
00:08:37,440 --> 00:08:41,039
source implementation so

275
00:08:39,120 --> 00:08:43,360
boom and rocket from berkeley and uh

276
00:08:41,039 --> 00:08:45,120
pulp is out of eth zurich

277
00:08:43,360 --> 00:08:46,560
and swerve which i think is the western

278
00:08:45,120 --> 00:08:48,160
digital one so there's a lot of open

279
00:08:46,560 --> 00:08:49,599
source implementations also yesterday

280
00:08:48,160 --> 00:08:52,640
there was a talk from uh

281
00:08:49,600 --> 00:08:54,480
open piton um out of princeton um they

282
00:08:52,640 --> 00:08:58,080
also have this uh

283
00:08:54,480 --> 00:09:00,480
kind of one-to-many uh core design

284
00:08:58,080 --> 00:09:01,440
capable of running linux um called open

285
00:09:00,480 --> 00:09:02,959
pitons so

286
00:09:01,440 --> 00:09:06,000
there's a lot of existing projects out

287
00:09:02,959 --> 00:09:07,599
there that people can leverage

288
00:09:06,000 --> 00:09:08,880
and there's this event i guess it used

289
00:09:07,600 --> 00:09:10,000
to be called the risk five workshop i

290
00:09:08,880 --> 00:09:10,800
think now it's called the risk five

291
00:09:10,000 --> 00:09:12,240
summit but

292
00:09:10,800 --> 00:09:13,920
these things happen like every six

293
00:09:12,240 --> 00:09:15,040
months so if you're wondering what's the

294
00:09:13,920 --> 00:09:16,560
latest and greatest that's happening

295
00:09:15,040 --> 00:09:18,640
with risk five is you can

296
00:09:16,560 --> 00:09:20,160
you can go to ris5.org and they just put

297
00:09:18,640 --> 00:09:22,399
up the proceedings and the videos from

298
00:09:20,160 --> 00:09:24,719
the one that they had in december

299
00:09:22,399 --> 00:09:26,080
uh in california so if you go to the

300
00:09:24,720 --> 00:09:28,160
risk five youtube channel

301
00:09:26,080 --> 00:09:29,839
um there's tons and tons of talks on

302
00:09:28,160 --> 00:09:31,439
there i think one of the one of the main

303
00:09:29,839 --> 00:09:32,480
ways i've been able to kind of find out

304
00:09:31,440 --> 00:09:34,839
what's happening in this

305
00:09:32,480 --> 00:09:37,519
community is watching a lot of these

306
00:09:34,839 --> 00:09:39,040
videos

307
00:09:37,519 --> 00:09:41,600
so one of the other things i find

308
00:09:39,040 --> 00:09:44,480
interesting is um

309
00:09:41,600 --> 00:09:45,360
kind of the global sense of risk five um

310
00:09:44,480 --> 00:09:47,040
and

311
00:09:45,360 --> 00:09:48,720
one point is that the risk fight

312
00:09:47,040 --> 00:09:50,880
foundation was based in the us they're

313
00:09:48,720 --> 00:09:53,760
now moving to switzerland

314
00:09:50,880 --> 00:09:55,200
and part of that is to be free of

315
00:09:53,760 --> 00:09:58,399
political implications

316
00:09:55,200 --> 00:10:00,240
um nations like india and i think also

317
00:09:58,399 --> 00:10:01,839
pakistan have declared that risk five is

318
00:10:00,240 --> 00:10:03,279
going to be their national architecture

319
00:10:01,839 --> 00:10:06,000
and i think that

320
00:10:03,279 --> 00:10:06,560
a lot of countries want to have more

321
00:10:06,000 --> 00:10:08,560
control

322
00:10:06,560 --> 00:10:10,000
over technology want to have more

323
00:10:08,560 --> 00:10:12,399
sovereign control over process

324
00:10:10,000 --> 00:10:14,959
architecture processor architecture so

325
00:10:12,399 --> 00:10:16,000
um you know in this past year we saw the

326
00:10:14,959 --> 00:10:18,719
us

327
00:10:16,000 --> 00:10:20,160
prevent the us current presidential

328
00:10:18,720 --> 00:10:22,320
administration prevent

329
00:10:20,160 --> 00:10:23,519
u.s companies from doing business with

330
00:10:22,320 --> 00:10:24,800
huawei and and

331
00:10:23,519 --> 00:10:26,959
back at the beginning of last year it

332
00:10:24,800 --> 00:10:28,640
was also uncertain if arm would be able

333
00:10:26,959 --> 00:10:30,160
to do business with huawei

334
00:10:28,640 --> 00:10:32,319
they ended up deciding it was okay

335
00:10:30,160 --> 00:10:35,439
because arm's a uk-based technology

336
00:10:32,320 --> 00:10:36,560
but you know i'm sure a lot of chinese

337
00:10:35,440 --> 00:10:38,160
companies don't want to be

338
00:10:36,560 --> 00:10:41,040
don't want to be in the position of not

339
00:10:38,160 --> 00:10:43,839
being able to license

340
00:10:41,040 --> 00:10:44,719
the cores that they need from arms so i

341
00:10:43,839 --> 00:10:48,160
think there's a

342
00:10:44,720 --> 00:10:50,480
lot of motivation for companies in

343
00:10:48,160 --> 00:10:51,600
china and other nations to have more

344
00:10:50,480 --> 00:10:54,480
control over the

345
00:10:51,600 --> 00:10:54,880
processor technology and i think like

346
00:10:54,480 --> 00:10:57,600
the

347
00:10:54,880 --> 00:10:58,720
the biggest uptake in risk five

348
00:10:57,600 --> 00:11:02,000
foundation

349
00:10:58,720 --> 00:11:04,240
membership has come from china recently

350
00:11:02,000 --> 00:11:06,320
uh i tried to kind of give an overview

351
00:11:04,240 --> 00:11:07,680
the overview of this in a recent issue

352
00:11:06,320 --> 00:11:10,560
of hackspace magazine

353
00:11:07,680 --> 00:11:11,599
um just it's a short column but um if

354
00:11:10,560 --> 00:11:13,839
you're just trying to get a sense of

355
00:11:11,600 --> 00:11:15,519
what's going on risk five it's a

356
00:11:13,839 --> 00:11:18,640
hopefully a good way to

357
00:11:15,519 --> 00:11:21,680
in like a few minutes get up to speed

358
00:11:18,640 --> 00:11:22,399
so the first time i saw a risk 5 chip

359
00:11:21,680 --> 00:11:24,880
was

360
00:11:22,399 --> 00:11:25,600
the open v which was a microcontroller

361
00:11:24,880 --> 00:11:29,040
from a

362
00:11:25,600 --> 00:11:30,800
group in colombia colombian university

363
00:11:29,040 --> 00:11:32,640
they call themselves onship i think the

364
00:11:30,800 --> 00:11:36,240
university's uis

365
00:11:32,640 --> 00:11:39,279
but this was a 32-bit microcontroller

366
00:11:36,240 --> 00:11:43,120
and it was a completely open source

367
00:11:39,279 --> 00:11:43,760
implementation um they also did analog

368
00:11:43,120 --> 00:11:45,440
which

369
00:11:43,760 --> 00:11:47,120
was kind of unique about their project

370
00:11:45,440 --> 00:11:49,760
is they're interested in the analog

371
00:11:47,120 --> 00:11:49,760
peripherals

372
00:11:50,800 --> 00:11:54,319
one of the other organizations that i've

373
00:11:52,320 --> 00:11:55,040
been watching for a few years now is low

374
00:11:54,320 --> 00:11:57,360
risk

375
00:11:55,040 --> 00:11:59,279
so low risk is a not-for-profit

376
00:11:57,360 --> 00:12:01,440
organization out of the uk

377
00:11:59,279 --> 00:12:02,720
um and i like that their mission

378
00:12:01,440 --> 00:12:04,399
statement when they started was they

379
00:12:02,720 --> 00:12:06,480
wanted to create a

380
00:12:04,399 --> 00:12:07,839
system on chip completely open source

381
00:12:06,480 --> 00:12:09,120
that you could use to build a single

382
00:12:07,839 --> 00:12:10,480
board computer

383
00:12:09,120 --> 00:12:12,000
some of the people that started low risk

384
00:12:10,480 --> 00:12:13,519
had been involved in raspberry pi so i

385
00:12:12,000 --> 00:12:14,079
was really excited like ooh we'd get

386
00:12:13,519 --> 00:12:16,000
like a

387
00:12:14,079 --> 00:12:17,519
fully open source uh single birth

388
00:12:16,000 --> 00:12:18,800
computer

389
00:12:17,519 --> 00:12:20,800
most recently they've been working with

390
00:12:18,800 --> 00:12:22,319
google on the security project called

391
00:12:20,800 --> 00:12:25,599
open titan

392
00:12:22,320 --> 00:12:28,160
but you can um

393
00:12:25,600 --> 00:12:29,760
you can try out um their soc and run

394
00:12:28,160 --> 00:12:32,880
linux on it so

395
00:12:29,760 --> 00:12:35,600
there's a version 0.7 of the low risk

396
00:12:32,880 --> 00:12:37,279
release right now and you can get a fpga

397
00:12:35,600 --> 00:12:38,959
development board for

398
00:12:37,279 --> 00:12:40,480
less than three hundred dollars and you

399
00:12:38,959 --> 00:12:43,040
can actually run like a

400
00:12:40,480 --> 00:12:43,760
little graphical uh linux environment on

401
00:12:43,040 --> 00:12:45,360
it so

402
00:12:43,760 --> 00:12:47,600
if you follow this tutorial i just found

403
00:12:45,360 --> 00:12:49,440
out about this like on like two days ago

404
00:12:47,600 --> 00:12:53,040
from someone here at fosdem so

405
00:12:49,440 --> 00:12:54,639
i'm eager to go try this out myself um

406
00:12:53,040 --> 00:12:56,399
so that's kind of like their long-term

407
00:12:54,639 --> 00:12:58,160
vision i think is to have a you know an

408
00:12:56,399 --> 00:12:59,040
soc that's produced in volume that you

409
00:12:58,160 --> 00:13:02,319
could use to run

410
00:12:59,040 --> 00:13:03,920
um linux on um alex bradbury is one of

411
00:13:02,320 --> 00:13:06,000
the people involved in low risk and he

412
00:13:03,920 --> 00:13:09,040
gave an interesting talk about

413
00:13:06,000 --> 00:13:09,519
the ecosystem for operating systems in

414
00:13:09,040 --> 00:13:12,399
the

415
00:13:09,519 --> 00:13:14,800
tool support around it last year in the

416
00:13:12,399 --> 00:13:14,800
summer

417
00:13:15,440 --> 00:13:19,519
so one of the i'm so i'm part of the

418
00:13:17,040 --> 00:13:21,279
open source hardware association

419
00:13:19,519 --> 00:13:23,279
and kind of i would say the equivalent

420
00:13:21,279 --> 00:13:25,279
to that to some degree is the

421
00:13:23,279 --> 00:13:26,639
free and open source silicon initiative

422
00:13:25,279 --> 00:13:28,240
for chip design so

423
00:13:26,639 --> 00:13:29,600
they're a great organization they

424
00:13:28,240 --> 00:13:30,639
organize several events throughout the

425
00:13:29,600 --> 00:13:32,880
year so they have

426
00:13:30,639 --> 00:13:34,079
or conf which happens every year here in

427
00:13:32,880 --> 00:13:36,720
europe

428
00:13:34,079 --> 00:13:38,399
which is stands for open risk conference

429
00:13:36,720 --> 00:13:39,519
but there's a lot of risk five content

430
00:13:38,399 --> 00:13:41,040
there now as well

431
00:13:39,519 --> 00:13:42,800
um they started doing an event in the

432
00:13:41,040 --> 00:13:43,439
u.s called latch up so last year was in

433
00:13:42,800 --> 00:13:45,920
portland

434
00:13:43,440 --> 00:13:46,800
and this april um it's going to be at

435
00:13:45,920 --> 00:13:49,040
mit

436
00:13:46,800 --> 00:13:50,800
and the us in last past year they also

437
00:13:49,040 --> 00:13:51,680
did a week a week of open source

438
00:13:50,800 --> 00:13:55,199
hardware uh

439
00:13:51,680 --> 00:13:57,279
at eth zurich um so

440
00:13:55,199 --> 00:13:58,719
they're a great place to find out like

441
00:13:57,279 --> 00:14:00,399
what's going on with uh

442
00:13:58,720 --> 00:14:03,040
beyond just risk five as well but with

443
00:14:00,399 --> 00:14:04,720
um open source chip design

444
00:14:03,040 --> 00:14:06,800
and they now run a website called libre

445
00:14:04,720 --> 00:14:07,279
cores um which you might have firmly

446
00:14:06,800 --> 00:14:08,959
heard of

447
00:14:07,279 --> 00:14:10,320
as open core so this is kind of the

448
00:14:08,959 --> 00:14:12,800
successor to that

449
00:14:10,320 --> 00:14:13,760
the idea is to aggregate together um

450
00:14:12,800 --> 00:14:15,760
processor design

451
00:14:13,760 --> 00:14:16,880
so you know if you need to get a

452
00:14:15,760 --> 00:14:19,439
controller for

453
00:14:16,880 --> 00:14:20,639
spi or you need to find like a usb

454
00:14:19,440 --> 00:14:22,000
controller you could potentially go on

455
00:14:20,639 --> 00:14:22,959
libre course so they're trying to set up

456
00:14:22,000 --> 00:14:24,399
a way for you to

457
00:14:22,959 --> 00:14:26,000
have a place to go to if you want to

458
00:14:24,399 --> 00:14:28,240
share your um

459
00:14:26,000 --> 00:14:29,120
chip design ip and if you're looking for

460
00:14:28,240 --> 00:14:30,399
something

461
00:14:29,120 --> 00:14:32,880
you could potentially go on there and

462
00:14:30,399 --> 00:14:32,880
find it

463
00:14:33,040 --> 00:14:36,800
so some of the people that were at

464
00:14:34,880 --> 00:14:39,360
berkeley that um created the

465
00:14:36,800 --> 00:14:40,800
risk 5 isa originally went on to start a

466
00:14:39,360 --> 00:14:43,440
company called sci-5

467
00:14:40,800 --> 00:14:44,800
which some of you might have heard of i

468
00:14:43,440 --> 00:14:45,920
think it was maybe two or three years

469
00:14:44,800 --> 00:14:47,359
ago now they launched this

470
00:14:45,920 --> 00:14:50,880
microcontroller called the

471
00:14:47,360 --> 00:14:55,199
fe310 so this is kind of an arduino form

472
00:14:50,880 --> 00:14:55,199
factor board that has the fe310 in it

473
00:14:55,519 --> 00:15:00,320
so this is nice um it's interesting but

474
00:14:58,720 --> 00:15:01,040
i really want to have a system i can run

475
00:15:00,320 --> 00:15:03,279
linux on

476
00:15:01,040 --> 00:15:05,199
so i was really excited here at fosdem

477
00:15:03,279 --> 00:15:06,240
two years ago i think it was um that

478
00:15:05,199 --> 00:15:08,800
palmer um

479
00:15:06,240 --> 00:15:09,320
unveiled the sci-fi unleashed which is

480
00:15:08,800 --> 00:15:13,760
their

481
00:15:09,320 --> 00:15:16,959
64-bit um a quad-core 64-bit

482
00:15:13,760 --> 00:15:19,279
um linux soc so there's a board called

483
00:15:16,959 --> 00:15:20,079
the hi-five unleashed which is a pretty

484
00:15:19,279 --> 00:15:22,639
exciting board

485
00:15:20,079 --> 00:15:24,239
um it's open hardware um it is

486
00:15:22,639 --> 00:15:25,199
unfortunately a thousand dollars because

487
00:15:24,240 --> 00:15:27,600
they only made

488
00:15:25,199 --> 00:15:29,519
a thousand of them i believe the idea

489
00:15:27,600 --> 00:15:32,399
with this was to be something for like

490
00:15:29,519 --> 00:15:33,759
early access for developers um so this

491
00:15:32,399 --> 00:15:35,680
is one option that a lot of people are

492
00:15:33,759 --> 00:15:36,560
using um that have access to it for

493
00:15:35,680 --> 00:15:38,638
doing like

494
00:15:36,560 --> 00:15:40,560
bring up of distros and tools and things

495
00:15:38,639 --> 00:15:42,399
like that so

496
00:15:40,560 --> 00:15:44,638
it's probably the highest performance

497
00:15:42,399 --> 00:15:47,680
risk 5 board you can get right now

498
00:15:44,639 --> 00:15:50,560
but it is expensive and only available

499
00:15:47,680 --> 00:15:55,199
in limited quantities

500
00:15:50,560 --> 00:15:58,079
so um fedora actually has a risk five um

501
00:15:55,199 --> 00:15:58,719
a port as uh right now um and they've

502
00:15:58,079 --> 00:16:01,758
been using

503
00:15:58,720 --> 00:16:05,040
the uh unleash board um to

504
00:16:01,759 --> 00:16:06,720
bring it up and also uh qamu so there

505
00:16:05,040 --> 00:16:07,920
was this talk back in december at the

506
00:16:06,720 --> 00:16:09,759
risk 5 summit

507
00:16:07,920 --> 00:16:11,120
from one of the people involved in here

508
00:16:09,759 --> 00:16:14,639
is them running

509
00:16:11,120 --> 00:16:16,480
a gnome on the siphon of unleashed board

510
00:16:14,639 --> 00:16:17,680
which requires a lot of hardware which

511
00:16:16,480 --> 00:16:19,680
is probably not something

512
00:16:17,680 --> 00:16:21,439
you would probably want to set up if you

513
00:16:19,680 --> 00:16:23,359
weren't one of these companies that's

514
00:16:21,440 --> 00:16:24,720
bringing up um you know something like

515
00:16:23,360 --> 00:16:28,000
fedora but

516
00:16:24,720 --> 00:16:31,360
um here's a you know an image of what it

517
00:16:28,000 --> 00:16:33,279
might look like in a few years if you um

518
00:16:31,360 --> 00:16:36,880
have a risk five system and you're

519
00:16:33,279 --> 00:16:39,920
running a linux desktom on it um

520
00:16:36,880 --> 00:16:42,160
so the sci-fi solution with the

521
00:16:39,920 --> 00:16:44,639
unleash board in this fpga board that

522
00:16:42,160 --> 00:16:46,079
does the graphics is quite expensive so

523
00:16:44,639 --> 00:16:48,000
the thing that's much more accessible to

524
00:16:46,079 --> 00:16:50,479
everyone is qemu so

525
00:16:48,000 --> 00:16:52,399
you can with just your computer that you

526
00:16:50,480 --> 00:16:55,440
have right now your x86 computer

527
00:16:52,399 --> 00:16:57,199
um you can download qmu

528
00:16:55,440 --> 00:16:59,199
and the fedora image you can run it on

529
00:16:57,199 --> 00:17:00,240
your computer um which is the way a lot

530
00:16:59,199 --> 00:17:02,319
of the work is being

531
00:17:00,240 --> 00:17:04,000
done right now for people that are um

532
00:17:02,320 --> 00:17:06,000
bringing up

533
00:17:04,000 --> 00:17:07,839
risk five tool chains and distros and

534
00:17:06,000 --> 00:17:09,679
things like that

535
00:17:07,839 --> 00:17:11,119
so here's an example of booting the

536
00:17:09,679 --> 00:17:12,720
fedora risk five so

537
00:17:11,119 --> 00:17:14,799
if you have the sci-fi board then this

538
00:17:12,720 --> 00:17:16,959
is the flow but not that many people do

539
00:17:14,799 --> 00:17:21,119
so most people are just working with um

540
00:17:16,959 --> 00:17:22,480
qemu so if you

541
00:17:21,119 --> 00:17:24,719
want to get started right now you don't

542
00:17:22,480 --> 00:17:27,760
have any hardware qemu with

543
00:17:24,720 --> 00:17:30,799
fedora is one way to do it there is also

544
00:17:27,760 --> 00:17:34,080
debian so debian also has a port

545
00:17:30,799 --> 00:17:36,480
for risk five uh 64-bit as well so

546
00:17:34,080 --> 00:17:37,918
you can either grab debian or fedora and

547
00:17:36,480 --> 00:17:38,960
go ahead and start running it on your

548
00:17:37,919 --> 00:17:41,600
system with um

549
00:17:38,960 --> 00:17:41,600
qemu

550
00:17:42,160 --> 00:17:47,679
now there is a microcontroller

551
00:17:45,600 --> 00:17:48,959
or smaller processor from a company

552
00:17:47,679 --> 00:17:51,919
called kendrite so

553
00:17:48,960 --> 00:17:52,160
this is a really cheap um processor it's

554
00:17:51,919 --> 00:17:55,280
a

555
00:17:52,160 --> 00:17:57,440
dual core 64bit it's 400 megahertz

556
00:17:55,280 --> 00:18:00,399
with eight megabytes of sram which is

557
00:17:57,440 --> 00:18:01,840
pretty decent for like a microcontroller

558
00:18:00,400 --> 00:18:04,000
and you can get like dev boards from a

559
00:18:01,840 --> 00:18:04,879
bunch of places seed studio has one for

560
00:18:04,000 --> 00:18:07,520
13

561
00:18:04,880 --> 00:18:09,120
so like a really inexpensive risk 5

562
00:18:07,520 --> 00:18:12,240
development board

563
00:18:09,120 --> 00:18:13,439
now can you run linux on it so there's a

564
00:18:12,240 --> 00:18:15,840
person at western digital

565
00:18:13,440 --> 00:18:17,280
um damien who's been hacking away at it

566
00:18:15,840 --> 00:18:19,039
and there's a couple of linux kernel

567
00:18:17,280 --> 00:18:22,160
hackers that have been working on it

568
00:18:19,039 --> 00:18:23,919
um with somewhat limited success so

569
00:18:22,160 --> 00:18:26,720
damien gave a talk back at

570
00:18:23,919 --> 00:18:28,000
linux plumbers in september um about

571
00:18:26,720 --> 00:18:29,679
trying to run it so

572
00:18:28,000 --> 00:18:32,160
one of the issues with this kendrick

573
00:18:29,679 --> 00:18:33,840
chip is that um

574
00:18:32,160 --> 00:18:36,000
it technically has an mmu but it's not

575
00:18:33,840 --> 00:18:38,559
the right type of mmu so

576
00:18:36,000 --> 00:18:40,320
you have to run it with with mmus and

577
00:18:38,559 --> 00:18:41,280
memory management units so normally on

578
00:18:40,320 --> 00:18:42,960
your computer

579
00:18:41,280 --> 00:18:46,399
in most things that are running linux

580
00:18:42,960 --> 00:18:49,440
you have a memory management unit and

581
00:18:46,400 --> 00:18:52,480
if you don't have that you have to

582
00:18:49,440 --> 00:18:54,559
kind of take a path that's atypical

583
00:18:52,480 --> 00:18:56,400
so you need to have no mu support in

584
00:18:54,559 --> 00:18:56,960
your libraries and linux and stuff like

585
00:18:56,400 --> 00:19:00,640
that

586
00:18:56,960 --> 00:19:02,640
linux now has that capability um in it

587
00:19:00,640 --> 00:19:03,760
to run as m mode so with risk five

588
00:19:02,640 --> 00:19:05,520
there's machine mode

589
00:19:03,760 --> 00:19:08,559
in supervisor mode so machine mode is

590
00:19:05,520 --> 00:19:11,840
just like we're just running with a

591
00:19:08,559 --> 00:19:13,918
unified memory um view not with uh like

592
00:19:11,840 --> 00:19:14,879
virtual memory and user space and kernel

593
00:19:13,919 --> 00:19:18,080
space so

594
00:19:14,880 --> 00:19:20,000
um right now

595
00:19:18,080 --> 00:19:22,080
um they're still kind of hacking away on

596
00:19:20,000 --> 00:19:23,679
it but if they're able to get it working

597
00:19:22,080 --> 00:19:26,240
or if you're interested yourself you can

598
00:19:23,679 --> 00:19:29,440
you can check out um

599
00:19:26,240 --> 00:19:32,640
uh here's some links

600
00:19:29,440 --> 00:19:35,919
so here's a screenshot of them booting

601
00:19:32,640 --> 00:19:37,840
linux on that cyped board that's 13

602
00:19:35,919 --> 00:19:40,080
but it only kind of gets to this point

603
00:19:37,840 --> 00:19:43,199
um basically logging into busybox

604
00:19:40,080 --> 00:19:44,639
um and one of the reasons is is without

605
00:19:43,200 --> 00:19:46,880
item mmu you need um

606
00:19:44,640 --> 00:19:48,960
i think it's ft pick support uh which is

607
00:19:46,880 --> 00:19:50,240
an an arm way of dealing with the fact

608
00:19:48,960 --> 00:19:53,600
that you don't have um

609
00:19:50,240 --> 00:19:55,280
virtual memory um so

610
00:19:53,600 --> 00:19:57,600
basically it's work in progress if

611
00:19:55,280 --> 00:19:59,918
they're able to progress it farther

612
00:19:57,600 --> 00:20:00,639
then we can probably start running risk

613
00:19:59,919 --> 00:20:03,039
five on

614
00:20:00,640 --> 00:20:03,840
really inexpensive sub twenty dollar

615
00:20:03,039 --> 00:20:05,200
boards

616
00:20:03,840 --> 00:20:07,678
um and playing around with it it only

617
00:20:05,200 --> 00:20:10,240
has a megabyte of memory though so

618
00:20:07,679 --> 00:20:12,240
how useful will it be i'm not sure but

619
00:20:10,240 --> 00:20:15,679
for now qmu is probably the

620
00:20:12,240 --> 00:20:19,120
the way to go um however coming up

621
00:20:15,679 --> 00:20:21,360
in uh this year uh is three

622
00:20:19,120 --> 00:20:22,719
processors that i'm i'm kind of excited

623
00:20:21,360 --> 00:20:23,280
about from having watched some of these

624
00:20:22,720 --> 00:20:25,919
uh

625
00:20:23,280 --> 00:20:26,480
talks at the risk five summit so andy's

626
00:20:25,919 --> 00:20:28,480
has a

627
00:20:26,480 --> 00:20:30,400
processor that's coming out um that's

628
00:20:28,480 --> 00:20:34,880
supposed to be linux capable

629
00:20:30,400 --> 00:20:37,360
they're saying q1 of 2020 um microchip

630
00:20:34,880 --> 00:20:39,039
firmly micro semi they have kind of what

631
00:20:37,360 --> 00:20:40,879
would be the equivalent to the xilinx

632
00:20:39,039 --> 00:20:44,080
zinc so this is going to be a

633
00:20:40,880 --> 00:20:46,559
fpga with a hard risk 5 core

634
00:20:44,080 --> 00:20:48,000
and that's called the polar fire soc and

635
00:20:46,559 --> 00:20:50,879
i think they're talking about

636
00:20:48,000 --> 00:20:52,320
second half of 2020 um and then the one

637
00:20:50,880 --> 00:20:54,480
i'm most excited about

638
00:20:52,320 --> 00:20:56,799
uh which i saw one of my friends tweet

639
00:20:54,480 --> 00:20:59,120
about um at the risk five summit was

640
00:20:56,799 --> 00:21:01,039
nxp is working with this organization

641
00:20:59,120 --> 00:21:05,120
called the open hardware group

642
00:21:01,039 --> 00:21:07,840
to produce a risk 5 imx style

643
00:21:05,120 --> 00:21:10,399
soc so if you've heard of like the

644
00:21:07,840 --> 00:21:12,639
freescale imx6 or imx8 they're pretty

645
00:21:10,400 --> 00:21:13,679
popular for embedded linux systems

646
00:21:12,640 --> 00:21:16,480
you see them in a lot of different

647
00:21:13,679 --> 00:21:18,559
boards so i think the idea here is

648
00:21:16,480 --> 00:21:20,400
something that has the peripherals that

649
00:21:18,559 --> 00:21:24,720
you normally have an imx system

650
00:21:20,400 --> 00:21:26,480
with a risk 5 core instead of a arm core

651
00:21:24,720 --> 00:21:28,159
so this is supposed to be second half of

652
00:21:26,480 --> 00:21:29,440
2020

653
00:21:28,159 --> 00:21:31,919
i think they announced it would be like

654
00:21:29,440 --> 00:21:34,080
clocked at 1.5 gigahertz so

655
00:21:31,919 --> 00:21:35,360
pretty hot pretty high performance

656
00:21:34,080 --> 00:21:38,158
supposed to have a

657
00:21:35,360 --> 00:21:38,799
gpu so if it's one of those levante gpus

658
00:21:38,159 --> 00:21:40,960
that we have

659
00:21:38,799 --> 00:21:42,240
the aetna viv open source drivers for

660
00:21:40,960 --> 00:21:43,280
then i think this would be really

661
00:21:42,240 --> 00:21:44,960
exciting

662
00:21:43,280 --> 00:21:47,520
there's no information on pricing yet

663
00:21:44,960 --> 00:21:49,200
but like this might be something that we

664
00:21:47,520 --> 00:21:51,679
could actually build like an affordable

665
00:21:49,200 --> 00:21:54,000
single bird computer with that would run

666
00:21:51,679 --> 00:21:54,000
linux

667
00:21:56,240 --> 00:21:59,039
yeah so by the way in these slides

668
00:21:57,919 --> 00:22:00,720
there's links to all these different

669
00:21:59,039 --> 00:22:02,960
articles if you want to check them out

670
00:22:00,720 --> 00:22:03,840
um so one of the things i would love to

671
00:22:02,960 --> 00:22:06,240
do is

672
00:22:03,840 --> 00:22:07,039
um get a group of people together that

673
00:22:06,240 --> 00:22:10,240
want to help

674
00:22:07,039 --> 00:22:12,480
make a cheap linux capable

675
00:22:10,240 --> 00:22:14,240
open source hardware board i think we

676
00:22:12,480 --> 00:22:16,880
kind of have to wait for a chip like

677
00:22:14,240 --> 00:22:18,400
this to come out

678
00:22:16,880 --> 00:22:20,960
so if you're interested in get in touch

679
00:22:18,400 --> 00:22:22,720
with me however we don't necessarily

680
00:22:20,960 --> 00:22:26,000
have to wait for these socs because

681
00:22:22,720 --> 00:22:27,120
there are also fpgas which is what i

682
00:22:26,000 --> 00:22:29,679
have here so

683
00:22:27,120 --> 00:22:31,199
this is a fpga um it's actually a badge

684
00:22:29,679 --> 00:22:33,120
with an fpga on it and it can actually

685
00:22:31,200 --> 00:22:35,840
run linux on risk five

686
00:22:33,120 --> 00:22:37,039
um however this is not gonna be the same

687
00:22:35,840 --> 00:22:38,639
performance as this

688
00:22:37,039 --> 00:22:40,960
so with the fpgas we're talking about

689
00:22:38,640 --> 00:22:42,559
maybe 50 megahertz 100 megahertz maybe

690
00:22:40,960 --> 00:22:44,080
200 megahertz

691
00:22:42,559 --> 00:22:45,840
so not the same performance that we have

692
00:22:44,080 --> 00:22:47,039
in a soc so

693
00:22:45,840 --> 00:22:49,360
one of the reasons i'm very excited

694
00:22:47,039 --> 00:22:50,000
about fpgas now like i learned them in

695
00:22:49,360 --> 00:22:52,399
school

696
00:22:50,000 --> 00:22:54,720
a long time ago and it was all

697
00:22:52,400 --> 00:22:57,360
proprietary ides and windows and i had

698
00:22:54,720 --> 00:22:59,520
to run a vm and i didn't like it

699
00:22:57,360 --> 00:23:00,959
we now have open source tools for

700
00:22:59,520 --> 00:23:02,240
working with fpgas which is really

701
00:23:00,960 --> 00:23:05,360
exciting so

702
00:23:02,240 --> 00:23:08,240
um back at hackaday super conference

703
00:23:05,360 --> 00:23:10,320
which this badge is from uh

704
00:23:08,240 --> 00:23:11,600
prison from sci-fi megan wax gave an

705
00:23:10,320 --> 00:23:14,000
interesting talk about

706
00:23:11,600 --> 00:23:15,520
overview of risk five and fpgas so this

707
00:23:14,000 --> 00:23:16,240
is another thing i recommend checking

708
00:23:15,520 --> 00:23:18,879
out

709
00:23:16,240 --> 00:23:20,960
um if you aren't familiar with an fpga

710
00:23:18,880 --> 00:23:22,559
is it's a field programmable gateway so

711
00:23:20,960 --> 00:23:23,120
it's basically a chip that has a bunch

712
00:23:22,559 --> 00:23:25,200
of

713
00:23:23,120 --> 00:23:27,600
gates in it um like for example this one

714
00:23:25,200 --> 00:23:28,880
has 45 000 gates

715
00:23:27,600 --> 00:23:31,039
and we can take those gates and

716
00:23:28,880 --> 00:23:32,320
reconfigure them to implement whatever

717
00:23:31,039 --> 00:23:34,799
digital logic we want

718
00:23:32,320 --> 00:23:35,439
including a processor core so like this

719
00:23:34,799 --> 00:23:38,320
one

720
00:23:35,440 --> 00:23:38,880
has a um soft risk five processor that's

721
00:23:38,320 --> 00:23:40,799
the

722
00:23:38,880 --> 00:23:42,080
the fabric that c of gates has been

723
00:23:40,799 --> 00:23:46,000
configured to be a

724
00:23:42,080 --> 00:23:47,918
processor uh and then

725
00:23:46,000 --> 00:23:50,000
the thing for me that has made this more

726
00:23:47,919 --> 00:23:52,799
exciting is the fact that we now have

727
00:23:50,000 --> 00:23:55,039
free and open source software tools to

728
00:23:52,799 --> 00:23:57,120
do the synthesis and the place in route

729
00:23:55,039 --> 00:23:59,200
and load it onto the fpga so this

730
00:23:57,120 --> 00:24:01,840
started a few years ago

731
00:23:59,200 --> 00:24:03,279
with a group of people most notably

732
00:24:01,840 --> 00:24:04,720
claire wolf that

733
00:24:03,279 --> 00:24:06,960
started building these tools for a

734
00:24:04,720 --> 00:24:10,000
lattice fpga called the ice 40.

735
00:24:06,960 --> 00:24:11,520
it's kind of a modest fpga um but

736
00:24:10,000 --> 00:24:13,200
it was the first one that had like a

737
00:24:11,520 --> 00:24:14,240
free and open source tool chain for it

738
00:24:13,200 --> 00:24:16,240
and now

739
00:24:14,240 --> 00:24:18,960
that referred to as generally as project

740
00:24:16,240 --> 00:24:21,919
ice storm

741
00:24:18,960 --> 00:24:23,679
and then this is actually an ecp 5 fpga

742
00:24:21,919 --> 00:24:27,039
so it's much more capable

743
00:24:23,679 --> 00:24:30,559
it can do things like hdmi um higher

744
00:24:27,039 --> 00:24:31,120
throughput things like usb 3 i believe

745
00:24:30,559 --> 00:24:34,080
as well

746
00:24:31,120 --> 00:24:34,959
um so this was enabled by the work from

747
00:24:34,080 --> 00:24:37,039
david shaw

748
00:24:34,960 --> 00:24:38,960
um so one of the things they have to do

749
00:24:37,039 --> 00:24:42,720
with both the ice 40

750
00:24:38,960 --> 00:24:44,799
and the ecp 5 is document the bit stream

751
00:24:42,720 --> 00:24:47,679
so that work was done in project trellis

752
00:24:44,799 --> 00:24:51,360
so we can now use the ecp 5 with these

753
00:24:47,679 --> 00:24:54,640
free software tools and hopefully

754
00:24:51,360 --> 00:24:55,760
soon some xilinx parts as well so xilinx

755
00:24:54,640 --> 00:24:58,960
is like

756
00:24:55,760 --> 00:25:01,360
kind of the market leader in fpgas

757
00:24:58,960 --> 00:25:02,400
and if we want to have higher performing

758
00:25:01,360 --> 00:25:03,760
parts

759
00:25:02,400 --> 00:25:05,279
the sorts of things we probably need if

760
00:25:03,760 --> 00:25:07,360
we want to have like a more usable

761
00:25:05,279 --> 00:25:09,200
lending system in a soft core

762
00:25:07,360 --> 00:25:11,520
then the xylex parts are going to be

763
00:25:09,200 --> 00:25:14,240
probably the best way to do that

764
00:25:11,520 --> 00:25:15,440
so i'm told in the next couple months

765
00:25:14,240 --> 00:25:18,080
you might be able to

766
00:25:15,440 --> 00:25:20,159
use one of these xilinx boards with uh

767
00:25:18,080 --> 00:25:23,840
the free and open source tools

768
00:25:20,159 --> 00:25:26,960
um if you can find him tim

769
00:25:23,840 --> 00:25:28,000
ansel is here at fosdem he's he's

770
00:25:26,960 --> 00:25:29,679
pushing hard to try

771
00:25:28,000 --> 00:25:31,279
and get um these tools working with

772
00:25:29,679 --> 00:25:33,279
xilinx so um

773
00:25:31,279 --> 00:25:35,520
he always has the latest information he

774
00:25:33,279 --> 00:25:36,240
gave a talk at uh hackaday supercon back

775
00:25:35,520 --> 00:25:38,400
in november

776
00:25:36,240 --> 00:25:40,840
uh where it's kind of the status of

777
00:25:38,400 --> 00:25:44,000
where this is all at

778
00:25:40,840 --> 00:25:45,199
so this board i'm quite excited about is

779
00:25:44,000 --> 00:25:47,760
called the orange crab

780
00:25:45,200 --> 00:25:48,559
um it's from a person in australia greg

781
00:25:47,760 --> 00:25:50,240
deville

782
00:25:48,559 --> 00:25:52,320
it's a completely open source hardware

783
00:25:50,240 --> 00:25:56,320
design um and he's managed to put

784
00:25:52,320 --> 00:26:00,000
um the ecp5 fpg on there along with 120

785
00:25:56,320 --> 00:26:02,000
128 megabytes of ddr memory um so it's a

786
00:26:00,000 --> 00:26:03,840
nice little small board

787
00:26:02,000 --> 00:26:05,279
that's uh actually can run linux quite

788
00:26:03,840 --> 00:26:07,840
nicely we were

789
00:26:05,279 --> 00:26:09,279
at the kiosk communication congress and

790
00:26:07,840 --> 00:26:10,158
someone was like hey you should run

791
00:26:09,279 --> 00:26:12,000
linux on it

792
00:26:10,159 --> 00:26:13,520
and then like a few hours later greg and

793
00:26:12,000 --> 00:26:15,039
tim hacking together they got they

794
00:26:13,520 --> 00:26:16,799
brought up linux on it so

795
00:26:15,039 --> 00:26:19,039
and i think linux boots in like 17

796
00:26:16,799 --> 00:26:22,240
seconds on it so it's actually

797
00:26:19,039 --> 00:26:22,879
um not too bad i'm i'm hoping that greg

798
00:26:22,240 --> 00:26:25,200
will

799
00:26:22,880 --> 00:26:26,400
do a crowdfunding campaign at some point

800
00:26:25,200 --> 00:26:27,919
this year for it because

801
00:26:26,400 --> 00:26:30,320
i think this would be a nice board for

802
00:26:27,919 --> 00:26:32,720
people to get started with

803
00:26:30,320 --> 00:26:35,760
there's also a board from a hackerspace

804
00:26:32,720 --> 00:26:38,240
in croatia called the radiona

805
00:26:35,760 --> 00:26:38,960
this one has sdram though so it's not

806
00:26:38,240 --> 00:26:41,679
quite as

807
00:26:38,960 --> 00:26:42,960
capable as the orange crab but this one

808
00:26:41,679 --> 00:26:45,120
will be coming out

809
00:26:42,960 --> 00:26:46,480
soon from crowd supply i think in the

810
00:26:45,120 --> 00:26:49,039
next month or two

811
00:26:46,480 --> 00:26:51,600
you'd be able to go and back this

812
00:26:49,039 --> 00:26:53,360
campaign on crowd supply

813
00:26:51,600 --> 00:26:55,199
and then david shaw who did the work on

814
00:26:53,360 --> 00:26:57,279
project trellis which enabled us to use

815
00:26:55,200 --> 00:26:59,840
these tool chains with the ecp five

816
00:26:57,279 --> 00:27:01,279
he created this like ultimate board um i

817
00:26:59,840 --> 00:27:02,799
think mostly for his own development

818
00:27:01,279 --> 00:27:06,080
needs but this has like a

819
00:27:02,799 --> 00:27:07,440
gigabyte of ddr memory ethernet pci all

820
00:27:06,080 --> 00:27:09,279
these all these things on there

821
00:27:07,440 --> 00:27:11,120
this is not available it's something you

822
00:27:09,279 --> 00:27:11,840
can buy you can build one if you want i

823
00:27:11,120 --> 00:27:14,239
think it's

824
00:27:11,840 --> 00:27:15,439
probably a couple thousand dollars if

825
00:27:14,240 --> 00:27:18,000
you want to build one but

826
00:27:15,440 --> 00:27:19,279
if you're looking for like a high-end um

827
00:27:18,000 --> 00:27:21,440
board for doing uh

828
00:27:19,279 --> 00:27:23,520
using the ecp five free software tool

829
00:27:21,440 --> 00:27:25,840
chain then this is probably the the

830
00:27:23,520 --> 00:27:26,639
highest end one

831
00:27:25,840 --> 00:27:28,799
one of the things i thought was

832
00:27:26,640 --> 00:27:30,000
interesting was uh someone posted on

833
00:27:28,799 --> 00:27:32,559
twitter um

834
00:27:30,000 --> 00:27:35,120
that uh what does it look like when we

835
00:27:32,559 --> 00:27:35,840
configure our fpga to be a linux capable

836
00:27:35,120 --> 00:27:37,600
core so

837
00:27:35,840 --> 00:27:39,520
we can see here like this is like the

838
00:27:37,600 --> 00:27:40,480
mac review of the place and route

839
00:27:39,520 --> 00:27:42,158
utility um

840
00:27:40,480 --> 00:27:43,919
called next pnr so this is what it looks

841
00:27:42,159 --> 00:27:44,799
like when we've configured all the gates

842
00:27:43,919 --> 00:27:47,679
to implement a

843
00:27:44,799 --> 00:27:50,000
risk 5 processor that's capable of

844
00:27:47,679 --> 00:27:52,880
running linux

845
00:27:50,000 --> 00:27:54,240
so this is the badge from the hackaday

846
00:27:52,880 --> 00:27:56,559
super conference

847
00:27:54,240 --> 00:27:58,240
it kind of isn't a game boy style form

848
00:27:56,559 --> 00:27:59,760
factor

849
00:27:58,240 --> 00:28:01,520
i think the primary intended thing was

850
00:27:59,760 --> 00:28:03,279
for people to program

851
00:28:01,520 --> 00:28:05,600
games and little graphics on it and walk

852
00:28:03,279 --> 00:28:07,279
around with like your name in flames or

853
00:28:05,600 --> 00:28:08,959
like tetris and things like that

854
00:28:07,279 --> 00:28:11,039
so there was a graphics engine and see

855
00:28:08,960 --> 00:28:12,799
that you could um write games on there's

856
00:28:11,039 --> 00:28:15,520
tutorials about how to do this but

857
00:28:12,799 --> 00:28:17,120
there was some of us at super con that

858
00:28:15,520 --> 00:28:18,399
wanted to run linux on it so we were

859
00:28:17,120 --> 00:28:19,279
like oh that's cool it can do all these

860
00:28:18,399 --> 00:28:22,559
graphics but

861
00:28:19,279 --> 00:28:24,320
let's see if it can boot linux um so

862
00:28:22,559 --> 00:28:26,879
one of the issues with this was it only

863
00:28:24,320 --> 00:28:27,200
had a hundred it only had 16 megabytes

864
00:28:26,880 --> 00:28:30,720
of

865
00:28:27,200 --> 00:28:32,399
uh sram it's not just it's external sram

866
00:28:30,720 --> 00:28:35,360
over spi so it's quad

867
00:28:32,399 --> 00:28:37,678
quad spy sram which it's not really that

868
00:28:35,360 --> 00:28:39,678
great for um trying to run linux so

869
00:28:37,679 --> 00:28:41,120
we banged our hands against it for for

870
00:28:39,679 --> 00:28:44,399
like the first day

871
00:28:41,120 --> 00:28:46,479
and didn't have any success um

872
00:28:44,399 --> 00:28:47,918
and then uh turned out that someone had

873
00:28:46,480 --> 00:28:50,080
showed up to super con

874
00:28:47,919 --> 00:28:51,039
having already designed a dram add-in

875
00:28:50,080 --> 00:28:53,120
board so

876
00:28:51,039 --> 00:28:54,960
we were like oh we i think we really

877
00:28:53,120 --> 00:28:57,120
need dram if we want to boot linux

878
00:28:54,960 --> 00:28:59,840
and jacob was there and he's like oh i

879
00:28:57,120 --> 00:29:02,399
designed this before i came

880
00:28:59,840 --> 00:29:03,120
okay that's what we need so uh he had a

881
00:29:02,399 --> 00:29:05,678
board here with

882
00:29:03,120 --> 00:29:06,399
32 megabytes of sdram and that proved to

883
00:29:05,679 --> 00:29:08,320
be um

884
00:29:06,399 --> 00:29:09,760
enough for us to be able to get linux

885
00:29:08,320 --> 00:29:11,120
running on it

886
00:29:09,760 --> 00:29:12,480
so that one of the other things of this

887
00:29:11,120 --> 00:29:14,559
badge was the idea was you'd have

888
00:29:12,480 --> 00:29:16,799
cartridges so this is uh

889
00:29:14,559 --> 00:29:17,760
one of the cartridges um there's other

890
00:29:16,799 --> 00:29:19,279
ones like for

891
00:29:17,760 --> 00:29:21,440
pmod connectors and different

892
00:29:19,279 --> 00:29:23,120
peripherals so ideas you know

893
00:29:21,440 --> 00:29:24,960
you could give someone a cartridge and

894
00:29:23,120 --> 00:29:27,678
they plug it into their badge so

895
00:29:24,960 --> 00:29:30,640
this one you plug it in and you get 32

896
00:29:27,679 --> 00:29:33,840
megabytes of dram

897
00:29:30,640 --> 00:29:36,159
uh so but how did we actually get a

898
00:29:33,840 --> 00:29:37,439
system on chip into the fpga that was

899
00:29:36,159 --> 00:29:39,919
capable of running linux

900
00:29:37,440 --> 00:29:41,360
uh and the way we in in like a day

901
00:29:39,919 --> 00:29:44,080
pretty much so

902
00:29:41,360 --> 00:29:46,639
the way we did that was with lidex which

903
00:29:44,080 --> 00:29:49,678
is a pretty interesting project um that

904
00:29:46,640 --> 00:29:51,919
is leverages me gen which is a python

905
00:29:49,679 --> 00:29:54,320
based language for doing chip design so

906
00:29:51,919 --> 00:29:55,919
if you've heard of verilog or vhdl these

907
00:29:54,320 --> 00:29:58,000
are hardware description languages that

908
00:29:55,919 --> 00:30:00,000
people use to design

909
00:29:58,000 --> 00:30:01,679
hardware that goes into chips or into

910
00:30:00,000 --> 00:30:04,880
fpgas

911
00:30:01,679 --> 00:30:07,600
so instead of using verilog or

912
00:30:04,880 --> 00:30:09,200
vhdl you actually program in python so

913
00:30:07,600 --> 00:30:12,559
it's python code that actually is

914
00:30:09,200 --> 00:30:15,279
describing the hardware describing the

915
00:30:12,559 --> 00:30:16,080
logic inside of the chip and then that

916
00:30:15,279 --> 00:30:17,520
can be synthe

917
00:30:16,080 --> 00:30:19,600
that produces something that goes into

918
00:30:17,520 --> 00:30:20,799
the synth into the sense of synthesis

919
00:30:19,600 --> 00:30:22,959
tool

920
00:30:20,799 --> 00:30:25,279
so it allows us to basically do chip

921
00:30:22,960 --> 00:30:26,799
design in python

922
00:30:25,279 --> 00:30:29,200
which proved to be i think pretty

923
00:30:26,799 --> 00:30:31,600
powerful because we were able to

924
00:30:29,200 --> 00:30:35,120
um pretty quickly iterate on this and

925
00:30:31,600 --> 00:30:35,120
bang away and get it working

926
00:30:35,520 --> 00:30:39,039
lidex is kind of a combination of a few

927
00:30:37,360 --> 00:30:41,678
things so there's mijan which is the

928
00:30:39,039 --> 00:30:43,360
domain specific language based on python

929
00:30:41,679 --> 00:30:45,279
and i'll show you a little a few

930
00:30:43,360 --> 00:30:46,879
snippets of me jen in a bit so you get a

931
00:30:45,279 --> 00:30:49,360
flavor for what it looks like

932
00:30:46,880 --> 00:30:50,960
um and the other part of lidex is these

933
00:30:49,360 --> 00:30:52,639
um ip blocks

934
00:30:50,960 --> 00:30:54,480
so there's like a dram controller

935
00:30:52,640 --> 00:30:55,600
ethernet controller pci express

936
00:30:54,480 --> 00:30:56,960
controller sata

937
00:30:55,600 --> 00:30:58,879
there's a few other ones there so these

938
00:30:56,960 --> 00:31:01,120
are ip that you can go and grab

939
00:30:58,880 --> 00:31:02,159
and tie together to build a system on

940
00:31:01,120 --> 00:31:05,918
chip

941
00:31:02,159 --> 00:31:07,600
for your fpga uh and then the thing

942
00:31:05,919 --> 00:31:09,360
specifically that we use is this project

943
00:31:07,600 --> 00:31:11,760
called lidax on linux

944
00:31:09,360 --> 00:31:12,559
so this takes a risc-v cpu called the

945
00:31:11,760 --> 00:31:16,080
vex risk

946
00:31:12,559 --> 00:31:18,879
um which is a 32-bit um risk 5

947
00:31:16,080 --> 00:31:20,000
cpu that's kind of designed to fit well

948
00:31:18,880 --> 00:31:21,600
into an fpga

949
00:31:20,000 --> 00:31:24,000
so they take that and they take some of

950
00:31:21,600 --> 00:31:24,799
this um these ip like the like dram

951
00:31:24,000 --> 00:31:26,320
controller

952
00:31:24,799 --> 00:31:28,080
internet controller and it puts it all

953
00:31:26,320 --> 00:31:31,039
together into an soc that you can load

954
00:31:28,080 --> 00:31:34,399
into your fpga

955
00:31:31,039 --> 00:31:36,960
so this is um linux booting on the um

956
00:31:34,399 --> 00:31:38,399
vex risk uh risk five processor inside

957
00:31:36,960 --> 00:31:41,600
of that uh

958
00:31:38,399 --> 00:31:42,000
linux on uh vex linux on lidex festuris

959
00:31:41,600 --> 00:31:45,678
uh

960
00:31:42,000 --> 00:31:49,600
um yeah it's hard to say linux on lidex

961
00:31:45,679 --> 00:31:51,120
risk v uh soc um

962
00:31:49,600 --> 00:31:53,120
which we still don't have the display

963
00:31:51,120 --> 00:31:54,639
working so yeah it's like

964
00:31:53,120 --> 00:31:57,199
to me this was very exciting i guess

965
00:31:54,640 --> 00:31:58,720
some people like graphics on the display

966
00:31:57,200 --> 00:32:00,640
video games and stuff is more exciting

967
00:31:58,720 --> 00:32:04,320
but we were very excited when we got uh

968
00:32:00,640 --> 00:32:08,000
to see linux boot um over the the uart

969
00:32:04,320 --> 00:32:09,279
um so after we got back from super con

970
00:32:08,000 --> 00:32:10,960
you know we were hacking away trying to

971
00:32:09,279 --> 00:32:13,039
get work on one person's laptop and then

972
00:32:10,960 --> 00:32:14,880
i got home and i built the board

973
00:32:13,039 --> 00:32:16,799
and then i was like okay i want to get

974
00:32:14,880 --> 00:32:18,080
set up and it took a bit to like figure

975
00:32:16,799 --> 00:32:19,200
out okay what is all the different stuff

976
00:32:18,080 --> 00:32:20,000
that we changed when we were at the

977
00:32:19,200 --> 00:32:21,760
conference

978
00:32:20,000 --> 00:32:24,000
uh finally did that so there is now

979
00:32:21,760 --> 00:32:25,440
upstream support in linux on lidex for

980
00:32:24,000 --> 00:32:28,559
this hackaday badge

981
00:32:25,440 --> 00:32:29,840
um which you know only people that are

982
00:32:28,559 --> 00:32:30,639
at the conference has the badge but if

983
00:32:29,840 --> 00:32:33,120
you want to

984
00:32:30,640 --> 00:32:35,039
have a sense of what it is like to add a

985
00:32:33,120 --> 00:32:36,799
new board to linux on litex

986
00:32:35,039 --> 00:32:38,158
you can uh take a look at these pull

987
00:32:36,799 --> 00:32:40,080
requests um

988
00:32:38,159 --> 00:32:41,279
also just to give you a flavor for what

989
00:32:40,080 --> 00:32:43,760
the um

990
00:32:41,279 --> 00:32:45,200
uh lidex in in using uh me gen which is

991
00:32:43,760 --> 00:32:47,360
python looks like so

992
00:32:45,200 --> 00:32:48,559
this is uh basically the file that

993
00:32:47,360 --> 00:32:50,959
defines the board so

994
00:32:48,559 --> 00:32:52,480
the hackaday badge has badge and then

995
00:32:50,960 --> 00:32:54,080
this is basically defining the different

996
00:32:52,480 --> 00:32:55,279
pins that we have on the badge and how

997
00:32:54,080 --> 00:32:58,240
they map to

998
00:32:55,279 --> 00:32:59,679
uh signals inside of the fpga so you

999
00:32:58,240 --> 00:33:01,760
know whereas you might otherwise do this

1000
00:32:59,679 --> 00:33:03,120
stuff in verilog or vhdl here we're

1001
00:33:01,760 --> 00:33:05,360
doing it in python

1002
00:33:03,120 --> 00:33:06,959
and we have the nice object-orientedness

1003
00:33:05,360 --> 00:33:08,879
of python where we can

1004
00:33:06,960 --> 00:33:10,880
import things in inherent classes and

1005
00:33:08,880 --> 00:33:13,760
things like that

1006
00:33:10,880 --> 00:33:15,039
um and then this is also just kind of

1007
00:33:13,760 --> 00:33:16,720
gives you gives you a

1008
00:33:15,039 --> 00:33:18,960
another sense of what's going on here so

1009
00:33:16,720 --> 00:33:19,919
we can you know we import things like

1010
00:33:18,960 --> 00:33:23,360
the

1011
00:33:19,919 --> 00:33:25,840
light x clocks and the light x

1012
00:33:23,360 --> 00:33:27,519
ram um and then we can basically kind of

1013
00:33:25,840 --> 00:33:28,639
just tell it the parameters that we have

1014
00:33:27,519 --> 00:33:32,159
for our thing

1015
00:33:28,640 --> 00:33:35,200
uh hopefully i have a screenshot in

1016
00:33:32,159 --> 00:33:37,360
it for for it as well uh

1017
00:33:35,200 --> 00:33:38,960
yeah so like we had to add our dram

1018
00:33:37,360 --> 00:33:40,479
module because it wasn't already in

1019
00:33:38,960 --> 00:33:43,039
there so we're using a

1020
00:33:40,480 --> 00:33:44,080
32 megabyte sdram module wasn't already

1021
00:33:43,039 --> 00:33:46,480
in lidex so

1022
00:33:44,080 --> 00:33:47,760
we just extended what was already there

1023
00:33:46,480 --> 00:33:49,760
and added a new class

1024
00:33:47,760 --> 00:33:51,120
where we say okay here's our timing so

1025
00:33:49,760 --> 00:33:52,799
you know from the data sheet

1026
00:33:51,120 --> 00:33:55,360
had to figure out the banks and the rows

1027
00:33:52,799 --> 00:33:57,039
and then basically the timing and then

1028
00:33:55,360 --> 00:33:59,600
it kind of uses all the existing

1029
00:33:57,039 --> 00:34:01,200
infrastructure inside of like dram so

1030
00:33:59,600 --> 00:34:02,639
kind of made it a minimal amount of

1031
00:34:01,200 --> 00:34:06,000
effort to have to bring up

1032
00:34:02,640 --> 00:34:07,919
a new dram chip uh

1033
00:34:06,000 --> 00:34:09,359
and then this is how we like add the

1034
00:34:07,919 --> 00:34:12,480
board into the build system

1035
00:34:09,359 --> 00:34:13,679
so um thing here is like it's pretty

1036
00:34:12,480 --> 00:34:15,199
basic if you look at some of the other

1037
00:34:13,679 --> 00:34:16,000
ones they have like many many many

1038
00:34:15,199 --> 00:34:18,399
different things that

1039
00:34:16,000 --> 00:34:20,000
is in the base soc so our soc right now

1040
00:34:18,399 --> 00:34:22,239
only does serial right now i'm trying

1041
00:34:20,000 --> 00:34:23,520
to get it to add in flash as well but so

1042
00:34:22,239 --> 00:34:26,799
it's a pretty basic uh

1043
00:34:23,520 --> 00:34:28,480
lidex on linux um soc um so we just have

1044
00:34:26,800 --> 00:34:30,159
serial there and then here is how we

1045
00:34:28,480 --> 00:34:32,639
actually load the um

1046
00:34:30,159 --> 00:34:34,320
the gateway which is produced out of our

1047
00:34:32,639 --> 00:34:36,720
um when we do the synthesis

1048
00:34:34,320 --> 00:34:38,639
so we just use dfu util which allows us

1049
00:34:36,719 --> 00:34:39,918
to load the gateway over usb into the

1050
00:34:38,639 --> 00:34:43,200
badge

1051
00:34:39,918 --> 00:34:44,960
so if you take a look at the linux on

1052
00:34:43,199 --> 00:34:46,799
lidax you can see what some of the other

1053
00:34:44,960 --> 00:34:48,079
boards look like some of them have a lot

1054
00:34:46,800 --> 00:34:51,520
more capabilities than

1055
00:34:48,079 --> 00:34:52,879
than this one and then

1056
00:34:51,520 --> 00:34:54,719
it was running really slow it would take

1057
00:34:52,879 --> 00:34:57,440
like 300 seconds to boot

1058
00:34:54,719 --> 00:34:59,598
which is annoying um so i hope this was

1059
00:34:57,440 --> 00:35:00,160
like a great like github moment or open

1060
00:34:59,599 --> 00:35:02,000
source

1061
00:35:00,160 --> 00:35:03,680
development moment uh where i was like

1062
00:35:02,000 --> 00:35:04,079
oh it's going really slow and i opened

1063
00:35:03,680 --> 00:35:06,879
up a

1064
00:35:04,079 --> 00:35:08,079
issue on the github repo and then like

1065
00:35:06,880 --> 00:35:10,480
that same day um

1066
00:35:08,079 --> 00:35:11,920
enjoy digital uh florent who's the

1067
00:35:10,480 --> 00:35:14,079
person behind lidex

1068
00:35:11,920 --> 00:35:15,440
goes by enjoy digital and he posted an

1069
00:35:14,079 --> 00:35:17,520
improvement and it

1070
00:35:15,440 --> 00:35:18,880
was going 10 times faster so i thought

1071
00:35:17,520 --> 00:35:20,400
that was a pretty good uh

1072
00:35:18,880 --> 00:35:22,480
pretty good open up git hip issue and

1073
00:35:20,400 --> 00:35:24,079
also it boots in 27 seconds instead of

1074
00:35:22,480 --> 00:35:25,599
300 seconds

1075
00:35:24,079 --> 00:35:27,440
also when i was doing this i discovered

1076
00:35:25,599 --> 00:35:29,280
this cool thing called ascii cinema

1077
00:35:27,440 --> 00:35:30,560
which maybe some of you have used before

1078
00:35:29,280 --> 00:35:31,440
but it allows you to record your

1079
00:35:30,560 --> 00:35:33,200
terminal

1080
00:35:31,440 --> 00:35:34,640
which was really useful so like i wanted

1081
00:35:33,200 --> 00:35:35,759
to show it was happening when the badge

1082
00:35:34,640 --> 00:35:37,279
was booting up so i would

1083
00:35:35,760 --> 00:35:38,880
run ascii terminal and record it and

1084
00:35:37,280 --> 00:35:39,359
then i could post the link in the github

1085
00:35:38,880 --> 00:35:41,920
issue

1086
00:35:39,359 --> 00:35:42,960
and you could see what was happening and

1087
00:35:41,920 --> 00:35:44,480
also

1088
00:35:42,960 --> 00:35:46,320
you know sometimes this doesn't boot

1089
00:35:44,480 --> 00:35:47,599
when i want to show people stuff

1090
00:35:46,320 --> 00:35:49,520
because the batteries are dead so i can

1091
00:35:47,599 --> 00:35:50,079
always just link people to the ascii

1092
00:35:49,520 --> 00:35:52,480
sending

1093
00:35:50,079 --> 00:35:52,480
video

1094
00:35:54,720 --> 00:35:59,839
and what specifically what he did was

1095
00:35:57,839 --> 00:36:01,520
interesting so and kind of shows you the

1096
00:35:59,839 --> 00:36:03,200
power of i think the

1097
00:36:01,520 --> 00:36:05,599
the me gen and the object-oriented

1098
00:36:03,200 --> 00:36:08,160
nature of of using python is

1099
00:36:05,599 --> 00:36:09,440
um one of the one of the optimizations

1100
00:36:08,160 --> 00:36:12,078
was it was having to go

1101
00:36:09,440 --> 00:36:13,680
to memory too often um because it's just

1102
00:36:12,079 --> 00:36:15,359
an 8-bit wide memory so

1103
00:36:13,680 --> 00:36:16,720
we were having all these expensive

1104
00:36:15,359 --> 00:36:17,680
memory accesses and it was slowing

1105
00:36:16,720 --> 00:36:20,399
things down so

1106
00:36:17,680 --> 00:36:22,399
he just made the l2 cache 128 bit and

1107
00:36:20,400 --> 00:36:24,079
that speeded it up tremendously

1108
00:36:22,400 --> 00:36:25,920
um and that might not be like a good

1109
00:36:24,079 --> 00:36:27,280
optimization for everyone so it's

1110
00:36:25,920 --> 00:36:27,760
something that you can play around with

1111
00:36:27,280 --> 00:36:29,760
and

1112
00:36:27,760 --> 00:36:30,880
and optimize it for your use case and i

1113
00:36:29,760 --> 00:36:31,680
played around with this number a few

1114
00:36:30,880 --> 00:36:33,760
times

1115
00:36:31,680 --> 00:36:35,598
putting up the 256 it shaved off like a

1116
00:36:33,760 --> 00:36:36,960
couple more seconds so

1117
00:36:35,599 --> 00:36:38,880
to me it was quite powerful i can just

1118
00:36:36,960 --> 00:36:40,560
go in there and change these values and

1119
00:36:38,880 --> 00:36:44,880
go and load it up and see how long it

1120
00:36:40,560 --> 00:36:44,880
takes and see if that improved it or not

1121
00:36:45,119 --> 00:36:50,000
so that's pretty much it um i can

1122
00:36:48,160 --> 00:36:51,440
hopefully show you what it looks like in

1123
00:36:50,000 --> 00:36:53,359
the terminal so

1124
00:36:51,440 --> 00:36:55,280
this is uh we're hooked over review art

1125
00:36:53,359 --> 00:36:57,359
here and um

1126
00:36:55,280 --> 00:36:59,119
what lightx does right now is it just

1127
00:36:57,359 --> 00:37:01,040
runs busybox

1128
00:36:59,119 --> 00:37:02,480
which if anyone's interested i think

1129
00:37:01,040 --> 00:37:02,880
would be interesting to do something

1130
00:37:02,480 --> 00:37:05,839
more

1131
00:37:02,880 --> 00:37:07,119
like maybe a debian bootstrap or

1132
00:37:05,839 --> 00:37:09,200
something like that so

1133
00:37:07,119 --> 00:37:11,040
um it's an area of active development

1134
00:37:09,200 --> 00:37:13,598
the other thing too is there's drivers

1135
00:37:11,040 --> 00:37:15,200
for the linux kernel like uart and

1136
00:37:13,599 --> 00:37:17,040
um the other peripherals that we have in

1137
00:37:15,200 --> 00:37:18,560
there um so if you're interested in

1138
00:37:17,040 --> 00:37:20,240
in those sorts of things if you check

1139
00:37:18,560 --> 00:37:22,560
out lidex on linux there's a lot of

1140
00:37:20,240 --> 00:37:25,359
opportunities for people to get involved

1141
00:37:22,560 --> 00:37:26,320
so let's log in to our system here so we

1142
00:37:25,359 --> 00:37:29,598
have uh

1143
00:37:26,320 --> 00:37:30,320
linux running on a risk 5 processor and

1144
00:37:29,599 --> 00:37:32,880
fpga

1145
00:37:30,320 --> 00:37:35,119
using all open source tools which is

1146
00:37:32,880 --> 00:37:37,599
pretty fun i think so

1147
00:37:35,119 --> 00:37:38,320
if anyone has any questions i'd be happy

1148
00:37:37,599 --> 00:37:42,079
to take them

1149
00:37:38,320 --> 00:37:44,480
yeah so i'll do this first and

1150
00:37:42,079 --> 00:37:46,079
then that one yeah it's absolutely

1151
00:37:44,480 --> 00:37:47,119
fantastic thank you i mean i too have

1152
00:37:46,079 --> 00:37:48,800
been waiting

1153
00:37:47,119 --> 00:37:51,200
since i was at uni to be able to play

1154
00:37:48,800 --> 00:37:54,240
with this stuff i started out with

1155
00:37:51,200 --> 00:37:56,160
the black ice mx um phonologies yeah

1156
00:37:54,240 --> 00:37:58,720
yeah um and i've got zephyr going on top

1157
00:37:56,160 --> 00:38:00,720
of saxon so

1158
00:37:58,720 --> 00:38:01,759
i need to have a slide for that yeah so

1159
00:38:00,720 --> 00:38:03,439
cool uh

1160
00:38:01,760 --> 00:38:05,040
yeah so you know and again totally open

1161
00:38:03,440 --> 00:38:06,560
down to the gates so

1162
00:38:05,040 --> 00:38:08,800
i want to be able to put together

1163
00:38:06,560 --> 00:38:09,759
securable iot solutions that are just

1164
00:38:08,800 --> 00:38:12,240
completely open

1165
00:38:09,760 --> 00:38:13,200
in this way yeah so the next step is is

1166
00:38:12,240 --> 00:38:14,319
to try to follow

1167
00:38:13,200 --> 00:38:16,879
you know what you're doing here putting

1168
00:38:14,320 --> 00:38:19,040
linux onto these boards yeah um

1169
00:38:16,880 --> 00:38:21,040
which is very exciting and i i've you

1170
00:38:19,040 --> 00:38:23,680
know taken down some of the

1171
00:38:21,040 --> 00:38:24,960
examples of boards to get going with and

1172
00:38:23,680 --> 00:38:27,919
in commercial terms

1173
00:38:24,960 --> 00:38:29,680
if we're trying to manufacture boards um

1174
00:38:27,920 --> 00:38:31,599
obviously we can go out and get asics

1175
00:38:29,680 --> 00:38:32,960
it's really exciting to see that nxp are

1176
00:38:31,599 --> 00:38:35,359
coming out with the risk five yeah

1177
00:38:32,960 --> 00:38:36,720
we do a lot of work with that um talking

1178
00:38:35,359 --> 00:38:37,759
to my colleague who does the hardware

1179
00:38:36,720 --> 00:38:39,200
side of things

1180
00:38:37,760 --> 00:38:40,800
he's a bit sniffy about all this you

1181
00:38:39,200 --> 00:38:42,319
know because he says well fpgas they're

1182
00:38:40,800 --> 00:38:44,400
expensive you know how do we make this

1183
00:38:42,320 --> 00:38:46,079
stuff cheap how do we make it viable

1184
00:38:44,400 --> 00:38:48,480
i really want to see completely custom

1185
00:38:46,079 --> 00:38:50,160
calls with standard soft cores in them

1186
00:38:48,480 --> 00:38:52,079
and then some custom magic to do

1187
00:38:50,160 --> 00:38:53,680
acceleration and sort of build our own

1188
00:38:52,079 --> 00:38:55,760
open cores in that way

1189
00:38:53,680 --> 00:38:56,960
i've heard that there's libra silicon

1190
00:38:55,760 --> 00:38:59,359
which is a project yeah

1191
00:38:56,960 --> 00:39:00,560
kind of small scale basic manufacturing

1192
00:38:59,359 --> 00:39:02,480
yeah and i'm wondering if you know

1193
00:39:00,560 --> 00:39:03,759
anything about the economics of how this

1194
00:39:02,480 --> 00:39:06,400
is going to be possible

1195
00:39:03,760 --> 00:39:08,160
to drive down costs like open silicon

1196
00:39:06,400 --> 00:39:12,240
cores that we can put together

1197
00:39:08,160 --> 00:39:14,799
yeah so the question was about um

1198
00:39:12,240 --> 00:39:16,078
open silicon and the idea of pushing

1199
00:39:14,800 --> 00:39:17,680
this down and getting things

1200
00:39:16,079 --> 00:39:20,079
manufactured for cheaper

1201
00:39:17,680 --> 00:39:21,279
um so i learned some more int about that

1202
00:39:20,079 --> 00:39:24,640
yesterday i think um

1203
00:39:21,280 --> 00:39:25,520
there was a uh a talk or actually i ran

1204
00:39:24,640 --> 00:39:27,040
into the person that

1205
00:39:25,520 --> 00:39:28,960
does a thing called chips for makers

1206
00:39:27,040 --> 00:39:31,920
where he's trying to produce his own

1207
00:39:28,960 --> 00:39:33,920
soc um and he's trying to push down the

1208
00:39:31,920 --> 00:39:36,320
cost by like grouping things together

1209
00:39:33,920 --> 00:39:37,920
so there's the chips from makers i also

1210
00:39:36,320 --> 00:39:39,280
saw some of the libre silicon stuff so

1211
00:39:37,920 --> 00:39:40,160
there's a group actually called libre

1212
00:39:39,280 --> 00:39:43,280
silicon

1213
00:39:40,160 --> 00:39:45,839
um and they're trying to have

1214
00:39:43,280 --> 00:39:47,280
like an open source fab technique so

1215
00:39:45,839 --> 00:39:48,799
they i think they're working in a fab in

1216
00:39:47,280 --> 00:39:50,960
hong kong trying to like

1217
00:39:48,800 --> 00:39:52,720
bring down the cross so uh there's the

1218
00:39:50,960 --> 00:39:53,760
libra silicon people and they're also

1219
00:39:52,720 --> 00:39:54,640
trying to create like these cell

1220
00:39:53,760 --> 00:39:56,880
libraries

1221
00:39:54,640 --> 00:39:58,240
i think the downside to that is it's a

1222
00:39:56,880 --> 00:40:02,240
pretty old

1223
00:39:58,240 --> 00:40:02,240
technology process so

1224
00:40:03,599 --> 00:40:07,119
the one thing i have heard of that may

1225
00:40:05,520 --> 00:40:08,400
maybe will help at least in terms of not

1226
00:40:07,119 --> 00:40:10,480
having to pay for software tools is

1227
00:40:08,400 --> 00:40:12,800
yesterday in the open piton talk

1228
00:40:10,480 --> 00:40:13,520
um in the cad tools room they were

1229
00:40:12,800 --> 00:40:16,079
talking about

1230
00:40:13,520 --> 00:40:17,440
having a chip eda tools that are open

1231
00:40:16,079 --> 00:40:18,720
source now so there's a project called

1232
00:40:17,440 --> 00:40:22,720
open roads

1233
00:40:18,720 --> 00:40:24,879
um out of i think uc san diego

1234
00:40:22,720 --> 00:40:27,359
and they're creating like an open source

1235
00:40:24,880 --> 00:40:28,960
tool flow for doing chip design

1236
00:40:27,359 --> 00:40:30,480
um so at least maybe that'll eliminate

1237
00:40:28,960 --> 00:40:32,720
some of the cost of having to pay for

1238
00:40:30,480 --> 00:40:35,839
these expensive proprietary tools

1239
00:40:32,720 --> 00:40:38,560
um though i think

1240
00:40:35,839 --> 00:40:39,359
most of that is still going through tsmc

1241
00:40:38,560 --> 00:40:41,200
so

1242
00:40:39,359 --> 00:40:43,200
the library silicon people always i know

1243
00:40:41,200 --> 00:40:46,720
they're trying to like do their own

1244
00:40:43,200 --> 00:40:50,240
fab technology um but it is like older

1245
00:40:46,720 --> 00:40:51,520
processes um so yeah

1246
00:40:50,240 --> 00:40:53,118
and the other thing too just i should

1247
00:40:51,520 --> 00:40:54,720
mention is sax so i was talking a lot

1248
00:40:53,119 --> 00:40:58,319
about light x on linux there's another

1249
00:40:54,720 --> 00:40:58,319
project called saxon sock

1250
00:40:58,520 --> 00:41:01,839
s-a-x-o-n-s-o-c

1251
00:40:59,920 --> 00:41:03,119
um so that's another option for running

1252
00:41:01,839 --> 00:41:05,200
uh risk five

1253
00:41:03,119 --> 00:41:07,280
linux on risk five and fpgas as well

1254
00:41:05,200 --> 00:41:09,839
yeah so what can you tell us about the

1255
00:41:07,280 --> 00:41:13,040
open source hardware summit badge

1256
00:41:09,839 --> 00:41:14,560
uh i have the pcb somewhere so this is

1257
00:41:13,040 --> 00:41:17,680
sadly not linux

1258
00:41:14,560 --> 00:41:18,960
we're using a nordic microcontroller but

1259
00:41:17,680 --> 00:41:21,839
it's going to be a wristwatch

1260
00:41:18,960 --> 00:41:22,880
style form factor badge so we were

1261
00:41:21,839 --> 00:41:25,440
inspired by the

1262
00:41:22,880 --> 00:41:27,599
badge from camp this year at kiosk

1263
00:41:25,440 --> 00:41:30,160
communications camp called the cardio

1264
00:41:27,599 --> 00:41:33,599
um so the idea is a wristwatch form

1265
00:41:30,160 --> 00:41:37,040
factor badge running circuit python

1266
00:41:33,599 --> 00:41:49,839
yes not risk five but um uh hopefully

1267
00:41:37,040 --> 00:41:49,839
people have fun with that uh

1268
00:41:57,680 --> 00:42:02,480
yes yes so if people are interested in

1269
00:42:00,880 --> 00:42:04,079
risk 5 microcontrollers there's a

1270
00:42:02,480 --> 00:42:05,359
company called giga devices that has a

1271
00:42:04,079 --> 00:42:07,440
really inexpensive

1272
00:42:05,359 --> 00:42:08,880
um risk 5 microcontroller so i think

1273
00:42:07,440 --> 00:42:10,720
it's like kilobytes of memory so you're

1274
00:42:08,880 --> 00:42:12,240
not going to run like linux on it but

1275
00:42:10,720 --> 00:42:13,759
you could run a real-time operating

1276
00:42:12,240 --> 00:42:14,479
system on it and they're they're quite

1277
00:42:13,760 --> 00:42:16,880
cheap

1278
00:42:14,480 --> 00:42:19,599
and they think uh did they also have the

1279
00:42:16,880 --> 00:42:21,200
as they match the stm peripherals or

1280
00:42:19,599 --> 00:42:23,040
okay so they also have the sdm 32

1281
00:42:21,200 --> 00:42:25,200
peripherals so basically the things

1282
00:42:23,040 --> 00:42:26,160
you're used to on sdm 32 but with a risk

1283
00:42:25,200 --> 00:42:30,799
5 core as well

1284
00:42:26,160 --> 00:42:32,720
from giga devices

1285
00:42:30,800 --> 00:42:35,359
just want to point out and right now for

1286
00:42:32,720 --> 00:42:35,919
my job i play around with the ecp 5 a

1287
00:42:35,359 --> 00:42:38,240
bit

1288
00:42:35,920 --> 00:42:40,160
so like the evil board you get one for

1289
00:42:38,240 --> 00:42:43,520
80 euros like the easy

1290
00:42:40,160 --> 00:42:45,839
ecp 5 eva board and also

1291
00:42:43,520 --> 00:42:47,520
like an interesting alternative for dram

1292
00:42:45,839 --> 00:42:51,119
it would be like hyper ram

1293
00:42:47,520 --> 00:42:54,480
it's just a dram with a

1294
00:42:51,119 --> 00:42:58,560
interfaces with 13 io pins

1295
00:42:54,480 --> 00:42:59,200
so you have it's kind of like option spi

1296
00:42:58,560 --> 00:43:02,240
or something

1297
00:42:59,200 --> 00:43:04,160
so the the hyper ram would be at least

1298
00:43:02,240 --> 00:43:07,520
better than the uh quads 5

1299
00:43:04,160 --> 00:43:08,000
uh sram dram or your ddr memory that

1300
00:43:07,520 --> 00:43:12,000
takes

1301
00:43:08,000 --> 00:43:12,720
up like 60 70 ios yeah it's quite easy

1302
00:43:12,000 --> 00:43:16,480
to implement

1303
00:43:12,720 --> 00:43:19,759
and it goes like up to 330

1304
00:43:16,480 --> 00:43:21,920
megabits uh bandwidth okay

1305
00:43:19,760 --> 00:43:23,680
for protocol for reading and writing

1306
00:43:21,920 --> 00:43:24,800
because it's not in the same lines they

1307
00:43:23,680 --> 00:43:27,839
do i o

1308
00:43:24,800 --> 00:43:31,359
so how how would hyper ram compare to uh

1309
00:43:27,839 --> 00:43:31,359
ddr memory

1310
00:43:32,079 --> 00:43:36,319
okay cool yeah and what was the board

1311
00:43:35,119 --> 00:43:41,839
that was eighty dollars

1312
00:43:36,319 --> 00:43:41,839
that board okay from lattice

1313
00:43:52,480 --> 00:43:56,400
modules that you can buy from some

1314
00:43:54,079 --> 00:44:00,079
manufacturers so that might be

1315
00:43:56,400 --> 00:44:03,440
the option to put something together for

1316
00:44:00,079 --> 00:44:05,760
yeah yeah so maybe with this lattice

1317
00:44:03,440 --> 00:44:07,440
uh board from lattice with the hyper ram

1318
00:44:05,760 --> 00:44:08,880
we could maybe get linux on lidex

1319
00:44:07,440 --> 00:44:13,760
working with it or something like that

1320
00:44:08,880 --> 00:44:17,200
if you don't get one of those yeah

1321
00:44:13,760 --> 00:44:23,839
yes yeah cool

1322
00:44:17,200 --> 00:44:23,839
all right cool all right thank you

1323
00:44:31,760 --> 00:44:33,839
you

