1
00:00:13,480 --> 00:00:21,359
[Music]

2
00:00:56,840 --> 00:00:58,640
okay

3
00:00:58,640 --> 00:01:02,399
okay so i'll be introducing a

4
00:01:02,399 --> 00:01:04,640
quick project a small project i made in

5
00:01:04,640 --> 00:01:05,600
the

6
00:01:05,600 --> 00:01:08,960
past few months i am zombie julio

7
00:01:08,960 --> 00:01:12,479
i am a technical project manager

8
00:01:12,479 --> 00:01:15,280
i worked for several years and as a an

9
00:01:15,280 --> 00:01:16,479
apple devices

10
00:01:16,479 --> 00:01:19,600
hardware and software consultant

11
00:01:19,600 --> 00:01:22,000
i worked also as a network system

12
00:01:22,000 --> 00:01:24,560
engineer for a couple years

13
00:01:24,560 --> 00:01:26,880
and now i'm uh exploring ios internals

14
00:01:26,880 --> 00:01:27,920
and in terms of

15
00:01:27,920 --> 00:01:30,400
both our high level and low level point

16
00:01:30,400 --> 00:01:31,920
of views

17
00:01:31,920 --> 00:01:34,960
the total copy uh holding today

18
00:01:34,960 --> 00:01:36,880
is going to cover an unconventional use

19
00:01:36,880 --> 00:01:39,439
for bluetooth so we're going to see

20
00:01:39,439 --> 00:01:42,479
where boot room exploit is and how it is

21
00:01:42,479 --> 00:01:45,270
implemented and what we can achieve

22
00:01:45,270 --> 00:01:47,439
[Music]

23
00:01:47,439 --> 00:01:50,240
with the use of such a of such an

24
00:01:50,240 --> 00:01:52,240
exploit

25
00:01:52,240 --> 00:01:55,040
so let's cover the ios security model

26
00:01:55,040 --> 00:01:55,920
for a bit

27
00:01:55,920 --> 00:01:58,240
uh we can see here the application

28
00:01:58,240 --> 00:01:59,600
processor

29
00:01:59,600 --> 00:02:02,719
boot chain so this is the path that the

30
00:02:02,719 --> 00:02:04,799
cpu runs

31
00:02:04,799 --> 00:02:08,000
while turning on the device on the first

32
00:02:08,000 --> 00:02:09,440
stage we got secure rom

33
00:02:09,440 --> 00:02:11,200
which is the first piece of code

34
00:02:11,200 --> 00:02:14,080
executed by the ios device

35
00:02:14,080 --> 00:02:16,720
it's stored in a read-only memory which

36
00:02:16,720 --> 00:02:18,400
is a

37
00:02:18,400 --> 00:02:21,520
inside the cpu of the device then in

38
00:02:21,520 --> 00:02:22,080
case we

39
00:02:22,080 --> 00:02:24,879
have to restore it jumps to a remote

40
00:02:24,879 --> 00:02:25,520
send

41
00:02:25,520 --> 00:02:28,080
bootloader which then loads the kernel

42
00:02:28,080 --> 00:02:30,160
and restore daemon

43
00:02:30,160 --> 00:02:32,000
in the case we are normally turning on

44
00:02:32,000 --> 00:02:33,920
the device we jump to the first stage

45
00:02:33,920 --> 00:02:35,040
bootloader which is called

46
00:02:35,040 --> 00:02:37,920
iboot or in case of all the devices llb

47
00:02:37,920 --> 00:02:39,599
which is low level bootloader

48
00:02:39,599 --> 00:02:42,480
and iboots itself again which then

49
00:02:42,480 --> 00:02:43,280
hopefully

50
00:02:43,280 --> 00:02:46,959
loads ios current and which loads itself

51
00:02:46,959 --> 00:02:50,239
a launch demon so

52
00:02:50,239 --> 00:02:53,440
here apple introduces a um

53
00:02:53,440 --> 00:02:56,080
a chain what we call a chain of trust uh

54
00:02:56,080 --> 00:02:56,720
which is called

55
00:02:56,720 --> 00:02:59,840
curebro as we can see each component

56
00:02:59,840 --> 00:03:03,040
is programmed to check the

57
00:03:03,040 --> 00:03:05,040
the image which is sent to it or which

58
00:03:05,040 --> 00:03:06,640
is load after it

59
00:03:06,640 --> 00:03:09,120
and the sig check is performed at each

60
00:03:09,120 --> 00:03:09,840
stage

61
00:03:09,840 --> 00:03:14,080
so due to the fact that the secret rom

62
00:03:14,080 --> 00:03:17,280
resides in a regular read-only memory

63
00:03:17,280 --> 00:03:19,840
inside of cpu that cannot be changed and

64
00:03:19,840 --> 00:03:20,640
cannot be

65
00:03:20,640 --> 00:03:23,040
messed up with the in any way

66
00:03:23,040 --> 00:03:25,680
theoretically

67
00:03:25,680 --> 00:03:28,959
here's the format of the emg for

68
00:03:28,959 --> 00:03:33,599
standard which is a openssl asm.1

69
00:03:33,599 --> 00:03:36,239
it consists of a of a payload which is

70
00:03:36,239 --> 00:03:38,720
structured

71
00:03:38,720 --> 00:03:40,560
in the way that is shown on the left and

72
00:03:40,560 --> 00:03:42,159
a manifest describing the

73
00:03:42,159 --> 00:03:46,799
the payload which is on the right

74
00:03:46,799 --> 00:03:50,239
we covered a bit for uh for some

75
00:03:50,239 --> 00:03:53,920
principles that rule the ios activation

76
00:03:53,920 --> 00:03:57,920
and the device uh working in general

77
00:03:57,920 --> 00:04:00,239
so we got system config system config is

78
00:04:00,239 --> 00:04:01,360
a struct

79
00:04:01,360 --> 00:04:05,200
a set of key key value pair that holds

80
00:04:05,200 --> 00:04:06,879
the information describing the heart of

81
00:04:06,879 --> 00:04:09,200
specific unit so

82
00:04:09,200 --> 00:04:12,799
for example serial number or motherboard

83
00:04:12,799 --> 00:04:14,560
number or wireless mac address and

84
00:04:14,560 --> 00:04:16,320
bluetooth bank address

85
00:04:16,320 --> 00:04:20,000
are stored in this struct

86
00:04:20,000 --> 00:04:22,479
as we can see is pretty complex and long

87
00:04:22,479 --> 00:04:25,199
but we're gonna cover just uh

88
00:04:25,199 --> 00:04:28,080
some keys of this database uh that are

89
00:04:28,080 --> 00:04:30,880
relevant for our scope

90
00:04:30,880 --> 00:04:34,960
is activation is the process that

91
00:04:34,960 --> 00:04:37,680
leads the device to be from what we call

92
00:04:37,680 --> 00:04:39,280
the activation screen

93
00:04:39,280 --> 00:04:40,880
to get to the springboard which is the

94
00:04:40,880 --> 00:04:42,720
home screen of the device

95
00:04:42,720 --> 00:04:44,960
it's managed on the host side by

96
00:04:44,960 --> 00:04:46,720
lockdown daemon

97
00:04:46,720 --> 00:04:49,600
which is locked only which sends an

98
00:04:49,600 --> 00:04:50,960
activation token request

99
00:04:50,960 --> 00:04:53,199
to the server mentioned above which is

100
00:04:53,199 --> 00:04:55,440
albert server

101
00:04:55,440 --> 00:04:58,000
the server validates the request and

102
00:04:58,000 --> 00:04:59,759
eventually sends a signed wildcard

103
00:04:59,759 --> 00:05:01,199
ticket for the

104
00:05:01,199 --> 00:05:04,240
lockdown d to activate the device in the

105
00:05:04,240 --> 00:05:05,440
validation

106
00:05:05,440 --> 00:05:08,639
system configuration entries are checked

107
00:05:08,639 --> 00:05:12,400
at this point so

108
00:05:12,400 --> 00:05:15,520
from a technical point of view some

109
00:05:15,520 --> 00:05:18,080
components are linked to each other so

110
00:05:18,080 --> 00:05:19,360
in case

111
00:05:19,360 --> 00:05:21,440
one of them fails and needs any kind of

112
00:05:21,440 --> 00:05:22,560
service

113
00:05:22,560 --> 00:05:26,560
we have to figure out figure out how to

114
00:05:26,639 --> 00:05:30,080
to make this device work again with the

115
00:05:30,080 --> 00:05:33,280
new hardware or new features

116
00:05:33,280 --> 00:05:36,080
here's an iphone 6 motherboard and we're

117
00:05:36,080 --> 00:05:37,680
now covering the classic servicing

118
00:05:37,680 --> 00:05:40,639
procedure for the

119
00:05:40,720 --> 00:05:42,800
for the wi-fi integrated circuit as

120
00:05:42,800 --> 00:05:45,120
taken as as an example

121
00:05:45,120 --> 00:05:48,560
so the process is uh

122
00:05:48,560 --> 00:05:51,199
made of five steps in the in the classic

123
00:05:51,199 --> 00:05:52,080
wave

124
00:05:52,080 --> 00:05:55,919
so we talk about removing the defective

125
00:05:55,919 --> 00:05:57,840
wi-fi integrated circuit the one we have

126
00:05:57,840 --> 00:05:59,199
to remove because it's not working

127
00:05:59,199 --> 00:06:01,120
anymore

128
00:06:01,120 --> 00:06:04,800
since the wireless mic address of the

129
00:06:04,800 --> 00:06:07,840
of the ic is contained in nand we now

130
00:06:07,840 --> 00:06:10,560
have to remove the nand itself and edit

131
00:06:10,560 --> 00:06:11,919
the sysconfig data

132
00:06:11,919 --> 00:06:15,759
inside of nand with an end ic programmer

133
00:06:15,759 --> 00:06:17,039
tool

134
00:06:17,039 --> 00:06:19,440
then we have to install back the nand

135
00:06:19,440 --> 00:06:20,400
ice key

136
00:06:20,400 --> 00:06:23,280
on the motherboard and install the new

137
00:06:23,280 --> 00:06:24,080
wi-fi

138
00:06:24,080 --> 00:06:27,840
ic once the ones that configuration

139
00:06:27,840 --> 00:06:31,520
holds the new value

140
00:06:31,759 --> 00:06:32,960
here on the left we can see the

141
00:06:32,960 --> 00:06:35,120
motherboard and uh

142
00:06:35,120 --> 00:06:39,360
on the right we can see the ic

143
00:06:39,680 --> 00:06:42,319
here's the nand ic programmer it's

144
00:06:42,319 --> 00:06:43,410
nothing but

145
00:06:43,410 --> 00:06:44,560
[Music]

146
00:06:44,560 --> 00:06:49,039
a motherboard inside of a fancy

147
00:06:49,039 --> 00:06:52,319
a fancy fixture that holds a

148
00:06:52,319 --> 00:06:54,560
net interface which is a socket for

149
00:06:54,560 --> 00:06:55,759
putting the target

150
00:06:55,759 --> 00:07:00,000
interface and then it has some debug

151
00:07:00,000 --> 00:07:03,199
and 10 volt meter and it has of course a

152
00:07:03,199 --> 00:07:05,039
lightning interface for usb and uart

153
00:07:05,039 --> 00:07:07,680
communication

154
00:07:08,080 --> 00:07:10,400
following the classic servicing

155
00:07:10,400 --> 00:07:13,199
procedure i realized a video

156
00:07:13,199 --> 00:07:16,319
on how to perform a storage upgrade of

157
00:07:16,319 --> 00:07:18,400
an idevice i leave the link in the

158
00:07:18,400 --> 00:07:20,000
description if

159
00:07:20,000 --> 00:07:22,000
anyone is just interested you can go

160
00:07:22,000 --> 00:07:24,240
check it out it's pretty long

161
00:07:24,240 --> 00:07:27,360
almost 20 minutes so

162
00:07:27,360 --> 00:07:30,720
given the fact that we have a uh

163
00:07:30,720 --> 00:07:34,000
a secure chain of trust

164
00:07:34,000 --> 00:07:36,080
we could potentially not attack secure

165
00:07:36,080 --> 00:07:37,520
but

166
00:07:37,520 --> 00:07:41,360
anyway unless we can find a bootroom bag

167
00:07:41,360 --> 00:07:44,639
which allow us to use

168
00:07:44,639 --> 00:07:47,840
our our code to run on the application

169
00:07:47,840 --> 00:07:49,360
processor

170
00:07:49,360 --> 00:07:50,879
so this is the different approach we got

171
00:07:50,879 --> 00:07:53,840
to cover on the left we can see secure

172
00:07:53,840 --> 00:07:56,160
and on the right we can see the signed

173
00:07:56,160 --> 00:07:58,720
boot chain

174
00:07:58,720 --> 00:08:01,680
which would normally take place if the

175
00:08:01,680 --> 00:08:03,039
device boots normally

176
00:08:03,039 --> 00:08:05,520
we place the device into dfu mode so we

177
00:08:05,520 --> 00:08:06,639
start device

178
00:08:06,639 --> 00:08:08,160
at the first stage which is running

179
00:08:08,160 --> 00:08:10,319
circuit rom and

180
00:08:10,319 --> 00:08:14,720
he's waiting for an image to be sent

181
00:08:14,720 --> 00:08:17,039
whether to the restored device in case

182
00:08:17,039 --> 00:08:17,919
of

183
00:08:17,919 --> 00:08:20,319
uh in case of any damage to the file

184
00:08:20,319 --> 00:08:21,680
system

185
00:08:21,680 --> 00:08:25,120
or you know in any other case in which

186
00:08:25,120 --> 00:08:28,400
the device is not able to build itself

187
00:08:28,400 --> 00:08:31,759
in the normal way we attacked the cqrom

188
00:08:31,759 --> 00:08:32,320
with the

189
00:08:32,320 --> 00:08:35,839
checkmate which is a

190
00:08:35,839 --> 00:08:39,760
nothing but a used use of the prebug

191
00:08:39,760 --> 00:08:43,519
in the cc rom involving the usb stack

192
00:08:43,519 --> 00:08:45,680
i'm not going to go deep with that

193
00:08:45,680 --> 00:08:47,839
there's a pretty cool

194
00:08:47,839 --> 00:08:50,560
talk about look at the disco which is

195
00:08:50,560 --> 00:08:52,160
called one the one weird trick that's

196
00:08:52,160 --> 00:08:54,320
here on hates it's on youtube so just

197
00:08:54,320 --> 00:08:57,040
take a look at it if you're interested

198
00:08:57,040 --> 00:09:00,399
and having the cqram uh attacked with

199
00:09:00,399 --> 00:09:00,880
checkmate

200
00:09:00,880 --> 00:09:03,279
leads us to control the application

201
00:09:03,279 --> 00:09:04,240
processor

202
00:09:04,240 --> 00:09:06,480
and we can patch the signature checks

203
00:09:06,480 --> 00:09:09,920
and eventually boot any image we want

204
00:09:09,920 --> 00:09:13,120
so we can edit uh enabled

205
00:09:13,120 --> 00:09:16,800
for um for the device

206
00:09:16,800 --> 00:09:19,360
we we're gonna skip the signa the

207
00:09:19,360 --> 00:09:20,640
signature checks

208
00:09:20,640 --> 00:09:23,600
on the on the first stage book loader

209
00:09:23,600 --> 00:09:25,519
which can be ibss or

210
00:09:25,519 --> 00:09:29,360
ibse for your devices or iboot for

211
00:09:29,360 --> 00:09:33,360
new devices at this point we can patch

212
00:09:33,360 --> 00:09:33,680
it

213
00:09:33,680 --> 00:09:37,519
to not check the following

214
00:09:37,519 --> 00:09:39,839
the following stage which is going to go

215
00:09:39,839 --> 00:09:40,959
to load

216
00:09:40,959 --> 00:09:44,800
our image that is called tags

217
00:09:44,800 --> 00:09:48,399
diags is the is the system

218
00:09:48,399 --> 00:09:51,519
that is built inside the nand

219
00:09:51,519 --> 00:09:52,399
programmers

220
00:09:52,399 --> 00:09:55,680
so what we did here is to

221
00:09:55,680 --> 00:09:58,320
port the image running on the nand

222
00:09:58,320 --> 00:09:59,680
programmer

223
00:09:59,680 --> 00:10:02,959
to the target iphone or ipod or ipad

224
00:10:02,959 --> 00:10:04,240
itself

225
00:10:04,240 --> 00:10:07,120
and this has the capability to edit

226
00:10:07,120 --> 00:10:07,680
system

227
00:10:07,680 --> 00:10:10,719
system configuration

228
00:10:10,880 --> 00:10:14,399
here is what the uh here's what the

229
00:10:14,399 --> 00:10:16,640
interface looks like so for example

230
00:10:16,640 --> 00:10:18,240
we're gonna cover that

231
00:10:18,240 --> 00:10:21,279
in live demo in a bit

232
00:10:21,279 --> 00:10:25,279
and here we can see that

233
00:10:25,279 --> 00:10:29,839
this interface which is the user shell

234
00:10:29,839 --> 00:10:32,079
can actually interact with system

235
00:10:32,079 --> 00:10:33,680
configuration and changing key and

236
00:10:33,680 --> 00:10:34,640
values

237
00:10:34,640 --> 00:10:38,320
such as serial numbers shown below

238
00:10:38,320 --> 00:10:41,920
and what's the point of all of this

239
00:10:41,920 --> 00:10:43,839
we save time on nand removal

240
00:10:43,839 --> 00:10:45,360
installation

241
00:10:45,360 --> 00:10:48,560
and avoid the risk of damaging command

242
00:10:48,560 --> 00:10:49,279
itself by

243
00:10:49,279 --> 00:10:52,160
hardware working on it we save money on

244
00:10:52,160 --> 00:10:54,240
hardware ic programmers

245
00:10:54,240 --> 00:10:57,040
those devices are really expensive it

246
00:10:57,040 --> 00:10:58,800
can take up to

247
00:10:58,800 --> 00:11:00,959
five hundred dollars to buy one and

248
00:11:00,959 --> 00:11:01,839
depends on how

249
00:11:01,839 --> 00:11:04,720
how new is it what the features are but

250
00:11:04,720 --> 00:11:06,240
actually we can take

251
00:11:06,240 --> 00:11:08,480
the same advantages by using the same

252
00:11:08,480 --> 00:11:10,320
image on the target itself

253
00:11:10,320 --> 00:11:12,160
rather than running it on an external

254
00:11:12,160 --> 00:11:13,760
hardware

255
00:11:13,760 --> 00:11:17,360
and then we can cover a bit

256
00:11:17,360 --> 00:11:19,120
the theme that we can have has

257
00:11:19,120 --> 00:11:20,640
possibilities uh

258
00:11:20,640 --> 00:11:23,760
diex offers a set of tools that can be

259
00:11:23,760 --> 00:11:25,839
used for diagnostics for example

260
00:11:25,839 --> 00:11:29,040
i2c testing and

261
00:11:29,040 --> 00:11:31,120
other physical components testing as

262
00:11:31,120 --> 00:11:33,200
well

263
00:11:33,200 --> 00:11:35,680
so we are conscious that not all the

264
00:11:35,680 --> 00:11:36,959
technician

265
00:11:36,959 --> 00:11:40,720
can achieve this can achieve this scope

266
00:11:40,720 --> 00:11:41,600
so

267
00:11:41,600 --> 00:11:44,480
all we wanted to do was uh implement a

268
00:11:44,480 --> 00:11:46,079
an easy-to-use interface that

269
00:11:46,079 --> 00:11:48,240
automates all the progress of the

270
00:11:48,240 --> 00:11:50,000
process and

271
00:11:50,000 --> 00:11:53,519
delivers an one-click solution for the

272
00:11:53,519 --> 00:11:56,079
repair technicians that wanted to use

273
00:11:56,079 --> 00:11:56,560
this

274
00:11:56,560 --> 00:11:59,120
or couldn't act for couldn't ask for the

275
00:11:59,120 --> 00:12:01,680
num programmer

276
00:12:01,680 --> 00:12:04,480
here's a little demo of how it works so

277
00:12:04,480 --> 00:12:05,040
uh

278
00:12:05,040 --> 00:12:08,399
the the the program waits for a device

279
00:12:08,399 --> 00:12:11,040
to be connected in dfu mode

280
00:12:11,040 --> 00:12:13,920
uh the device is recognized on the usb

281
00:12:13,920 --> 00:12:15,120
interface of the

282
00:12:15,120 --> 00:12:18,399
of the mac and then

283
00:12:18,560 --> 00:12:21,040
once it's recognized it sends it sends

284
00:12:21,040 --> 00:12:22,000
the exploit

285
00:12:22,000 --> 00:12:24,000
it sends the first stage which is ibss

286
00:12:24,000 --> 00:12:26,079
or iboot

287
00:12:26,079 --> 00:12:28,959
it waits for the the first stage to load

288
00:12:28,959 --> 00:12:31,760
it sends the second stage

289
00:12:31,760 --> 00:12:35,440
when uh the first stage is ready and

290
00:12:35,440 --> 00:12:36,639
then sends diax

291
00:12:36,639 --> 00:12:41,760
and jumps to it so what we have later

292
00:12:41,760 --> 00:12:45,200
what we have later is an interface that

293
00:12:45,200 --> 00:12:53,839
is capable

294
00:12:57,680 --> 00:12:59,760
of interacting with the struct of system

295
00:12:59,760 --> 00:13:00,800
configuration

296
00:13:00,800 --> 00:13:05,040
we have a lot of

297
00:13:05,680 --> 00:13:08,880
options that let us

298
00:13:08,880 --> 00:13:11,700
edit or remove or add

299
00:13:11,700 --> 00:13:14,639
[Music]

300
00:13:14,639 --> 00:13:18,240
values to this to this truck we can

301
00:13:18,240 --> 00:13:20,880
the key payer the key value pair is

302
00:13:20,880 --> 00:13:23,600
stored as a hexadecimal view

303
00:13:23,600 --> 00:13:25,839
so

304
00:13:29,440 --> 00:13:35,760
here's listing all of them

305
00:13:35,760 --> 00:13:38,399
for what it worth the activation of the

306
00:13:38,399 --> 00:13:40,160
ios device

307
00:13:40,160 --> 00:13:42,240
serial number wireless mic address

308
00:13:42,240 --> 00:13:44,079
bluetooth mechanizers

309
00:13:44,079 --> 00:13:47,519
are bind together as well as

310
00:13:47,519 --> 00:13:51,519
some other key values so we have to

311
00:13:51,519 --> 00:13:55,279
restore them back in any situation that

312
00:13:55,279 --> 00:13:57,680
requires the device to go through the

313
00:13:57,680 --> 00:13:58,560
application

314
00:13:58,560 --> 00:14:01,360
to the ios activation process again so

315
00:14:01,360 --> 00:14:02,160
whether the

316
00:14:02,160 --> 00:14:05,040
device is freshly restored or whether

317
00:14:05,040 --> 00:14:06,480
the device

318
00:14:06,480 --> 00:14:09,600
is unable to boot and needs a

319
00:14:09,600 --> 00:14:16,240
an update or or upgrade the restore

320
00:14:16,240 --> 00:14:20,079
diax offers um a pretty long

321
00:14:20,079 --> 00:14:23,519
uh suite of

322
00:14:23,519 --> 00:14:27,120
tools that let us interact with the

323
00:14:27,120 --> 00:14:29,279
with the device from both high level and

324
00:14:29,279 --> 00:14:30,639
low low level point of view as i

325
00:14:30,639 --> 00:14:32,880
mentioned before we got e2c

326
00:14:32,880 --> 00:14:36,560
where we can probe uh the devices uh

327
00:14:36,560 --> 00:14:39,920
listening on the e2c channel

328
00:14:39,920 --> 00:14:42,160
and many other stuff that can really

329
00:14:42,160 --> 00:14:44,000
help isolating

330
00:14:44,000 --> 00:14:46,480
and troubleshooting any hardware problem

331
00:14:46,480 --> 00:14:49,360
on the device itself

332
00:14:49,360 --> 00:14:54,720
of course a lot of people build fancy ui

333
00:14:54,880 --> 00:14:58,639
interfaces for this to be

334
00:14:58,639 --> 00:15:01,600
even easier to use for a technician and

335
00:15:01,600 --> 00:15:02,240
those are

336
00:15:02,240 --> 00:15:06,399
available online actually

337
00:15:06,880 --> 00:15:10,839
for most of the non-programmers

338
00:15:10,839 --> 00:15:14,240
the the fact that we reach

339
00:15:14,240 --> 00:15:17,600
the that we run the same image uh

340
00:15:17,600 --> 00:15:20,639
running on an end programmer give us the

341
00:15:20,639 --> 00:15:22,240
possibility to use uh

342
00:15:22,240 --> 00:15:24,639
the name programmers self-free tool to

343
00:15:24,639 --> 00:15:27,680
interact with it and

344
00:15:27,680 --> 00:15:30,240
that becomes it that makes my my

345
00:15:30,240 --> 00:15:32,000
software my application

346
00:15:32,000 --> 00:15:35,040
uh a plug-and-play application which can

347
00:15:35,040 --> 00:15:35,759
be used

348
00:15:35,759 --> 00:15:39,199
from anyone with uh pretty much

349
00:15:39,199 --> 00:15:42,240
any device which is vulnerable to

350
00:15:42,240 --> 00:15:47,199
checkmate and that's it

351
00:15:51,600 --> 00:15:54,800
i never uh leave the links

352
00:15:54,800 --> 00:15:57,839
on my webpage and my twitter profile

353
00:15:57,839 --> 00:15:58,959
where i post my

354
00:15:58,959 --> 00:16:02,480
devices in my collection and all my

355
00:16:02,480 --> 00:16:04,800
results of my research so if you're

356
00:16:04,800 --> 00:16:06,240
interested check it out

357
00:16:06,240 --> 00:16:09,839
yeah thanks for your time

358
00:16:30,710 --> 00:16:33,769
[Music]

359
00:16:51,440 --> 00:16:53,680
okay

360
00:16:55,279 --> 00:16:58,480
so let's take the chance to

361
00:16:58,720 --> 00:17:05,839
do it manually let me prepare the scene

362
00:17:08,480 --> 00:17:11,839
we're gonna cover um

363
00:17:13,839 --> 00:17:17,280
we're gonna cover the the manual path

364
00:17:17,280 --> 00:17:18,250
for loading

365
00:17:18,250 --> 00:17:21,309
[Music]

366
00:17:21,520 --> 00:17:33,039
tags manually on a target device live

367
00:17:33,039 --> 00:17:47,840
i'm sharing money first screen now

368
00:17:58,840 --> 00:18:00,480
so

369
00:18:00,480 --> 00:18:04,640
can you see my first screen yeah

370
00:18:06,160 --> 00:18:15,840
not anymore registration

371
00:18:26,840 --> 00:18:29,840
a

372
00:18:38,480 --> 00:18:41,440
okay so in this moment we're gonna cover

373
00:18:41,440 --> 00:18:42,400
the

374
00:18:42,400 --> 00:18:46,320
manual procedure to both

375
00:18:47,280 --> 00:18:51,600
the diax image to a target device

376
00:18:51,760 --> 00:18:56,320
i'm connecting a d2 22 which is uh

377
00:18:56,320 --> 00:18:58,879
iphone 10

378
00:19:02,480 --> 00:19:06,240
i'm gonna put it into gpu mode

379
00:19:07,520 --> 00:19:11,360
let me check okay we're gonna keep this

380
00:19:11,360 --> 00:19:14,000
alive here

381
00:19:18,240 --> 00:19:21,760
now we got the device uh in the dfu mode

382
00:19:21,760 --> 00:19:25,840
are you seeing the screen right

383
00:19:36,840 --> 00:19:38,720
okay

384
00:19:38,720 --> 00:19:41,760
we are going to run

385
00:19:42,160 --> 00:19:44,960
the exploit

386
00:19:47,120 --> 00:19:50,639
and patch the signature checks

387
00:19:51,440 --> 00:19:54,480
okay the device is now patched heap

388
00:19:54,480 --> 00:19:58,320
is repaired you can boot unsigned

389
00:20:04,840 --> 00:20:07,840
firmware

390
00:20:12,320 --> 00:20:15,760
we can enable the uart log

391
00:20:15,760 --> 00:20:18,400
so we can see what's happening behind

392
00:20:18,400 --> 00:20:21,840
the scenes

393
00:20:22,799 --> 00:20:25,600
now that where the device is spawned

394
00:20:25,600 --> 00:20:26,720
with checkmate

395
00:20:26,720 --> 00:20:29,520
we can send

396
00:20:32,080 --> 00:20:37,039
ibooks for d22

397
00:20:41,440 --> 00:20:48,640
okay see it's jumping into iboot

398
00:20:48,640 --> 00:20:50,960
here we have the interactive shell of

399
00:20:50,960 --> 00:20:52,080
iboot

400
00:20:52,080 --> 00:20:53,520
the device is now technically in

401
00:20:53,520 --> 00:20:55,440
recovery mode so it's waiting for

402
00:20:55,440 --> 00:21:03,840
another image to be sent

403
00:21:05,200 --> 00:21:10,080
and then we send the diagonate to it

404
00:21:10,880 --> 00:21:14,240
and tell them to jump to it

405
00:21:14,240 --> 00:21:19,280
and uh we wait for the bootstrap

406
00:21:19,280 --> 00:21:22,720
okay here we are

407
00:21:28,960 --> 00:21:31,600
there we go this is manual procedure

408
00:21:31,600 --> 00:21:33,440
that is automated

409
00:21:33,440 --> 00:21:36,640
onto this um

410
00:21:38,240 --> 00:21:41,360
onto this application

411
00:21:42,480 --> 00:21:46,480
i'll show it running live

412
00:21:47,760 --> 00:21:50,080
and

413
00:21:57,600 --> 00:22:03,439
going um to dfu mode launch the binary

414
00:22:07,600 --> 00:22:13,840
here it detected the device

415
00:22:14,799 --> 00:22:18,240
and the sending exploit waiting first

416
00:22:18,240 --> 00:22:19,440
stage

417
00:22:19,440 --> 00:22:21,840
first stage being sent and the device is

418
00:22:21,840 --> 00:22:23,520
willing to

419
00:22:23,520 --> 00:22:27,840
load it

420
00:22:28,960 --> 00:22:30,799
now for some reason he doesn't like the

421
00:22:30,799 --> 00:22:33,760
ui to be opened

422
00:22:38,840 --> 00:22:42,400
okay got some fight on my hours

423
00:22:42,400 --> 00:22:47,440
well that's pretty much it and um

424
00:22:53,039 --> 00:22:56,240
yeah i'll leave the

425
00:22:56,240 --> 00:22:59,440
the the slides of the presentation

426
00:22:59,440 --> 00:23:01,679
for anyone who wants to read further and

427
00:23:01,679 --> 00:23:02,960
watch the video

428
00:23:02,960 --> 00:23:09,840
i i made

429
00:23:20,840 --> 00:23:23,840
uh

430
00:23:24,400 --> 00:23:26,480
you

