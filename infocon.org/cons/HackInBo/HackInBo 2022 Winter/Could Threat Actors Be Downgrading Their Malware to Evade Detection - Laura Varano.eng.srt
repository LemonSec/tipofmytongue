1
00:00:10,320 --> 00:00:13,320
Ok then it's my turn to announce the

2
00:00:13,320 --> 00:00:15,420
last Talk in the morning before

3
00:00:15,420 --> 00:00:18,119
the lunch break I saw everyone

4
00:00:18,119 --> 00:00:21,840
concentrated, don't leave, take your

5
00:00:21,840 --> 00:00:26,779
seats I go on stage Laura Varano

6
00:00:28,980 --> 00:00:31,560
Laura talks

7
00:00:31,560 --> 00:00:34,200
about malware downgrade techniques

8
00:00:34,200 --> 00:00:36,739
to evade detection

9
00:00:36,739 --> 00:00:41,280
and then she will talk to us  of the IOT botnets And

10
00:00:41,280 --> 00:00:44,239
I will immediately spoil the good news

11
00:00:44,239 --> 00:00:45,860


12
00:00:45,860 --> 00:00:48,360
that despite the

13
00:00:48,360 --> 00:00:50,579
ever-evolving landscape of IOT botnets,

14
00:00:50,579 --> 00:00:53,100
in reality, the quality and functionality

15
00:00:53,100 --> 00:00:56,000
of malware does not always

16
00:00:56,000 --> 00:00:59,579
improve or increase in

17
00:00:59,579 --> 00:01:02,490
quality Ok thanks thanks

18
00:01:02,490 --> 00:01:09,900
[Applause]

19
00:01:09,900 --> 00:01:12,740
Ok  Hello everyone

20
00:01:12,740 --> 00:01:16,560
if you can't see I'm terrified and

21
00:01:16,560 --> 00:01:19,580
I have this problem with

22
00:01:19,720 --> 00:01:22,939
[Music].

23
00:01:23,939 --> 00:01:26,759


24
00:01:26,759 --> 00:01:28,979


25
00:01:28,979 --> 00:01:32,580


26
00:01:32,580 --> 00:01:35,040


27
00:01:35,040 --> 00:01:36,619


28
00:01:36,619 --> 00:01:39,799
group of samples

29
00:01:39,799 --> 00:01:43,220
belonging to an IOT family

30
00:01:43,220 --> 00:01:47,298
of malware for help that

31
00:01:49,500 --> 00:01:53,280
lost sorry

32
00:01:57,360 --> 00:01:59,520
I swear I did the research Eh

33
00:01:59,520 --> 00:02:01,520
but

34
00:02:01,520 --> 00:02:04,680
nothing this group  by sample It's

35
00:02:04,680 --> 00:02:07,259
quite nice because it

36
00:02:07,259 --> 00:02:09,598
has similarities with the

37
00:02:09,598 --> 00:02:13,140
original family but at the same time

38
00:02:13,140 --> 00:02:14,760
within the group there are

39
00:02:14,760 --> 00:02:16,500
differences that are quite

40
00:02:16,500 --> 00:02:18,720
interesting and on which we will then launch a

41
00:02:18,720 --> 00:02:22,200
lot of conjecture towards the end my

42
00:02:22,200 --> 00:02:25,200
name is Laura not there  it's the middle name but

43
00:02:25,200 --> 00:02:26,940
it's very stressed

44
00:02:26,940 --> 00:02:31,020
and Varano and I work as a cyber-

45
00:02:31,020 --> 00:02:32,580
tretana non-Zombie network list which is

46
00:02:32,580 --> 00:02:36,680
a company that works on the security of

47
00:02:36,680 --> 00:02:38,720
industrial networks

48
00:02:38,720 --> 00:02:41,220
the team in which I work deals with

49
00:02:41,220 --> 00:02:44,459
creating detections on devices or aids

50
00:02:44,459 --> 00:02:47,959
and we also do the research

51
00:02:47,959 --> 00:02:52,640
mainly connected to IOT devices

52
00:02:53,060 --> 00:02:56,040
Ok today's agenda let's take a look at

53
00:02:56,040 --> 00:02:58,379
Mirai and gas kit which are two of the

54
00:02:58,379 --> 00:02:59,959
most famous botnets

55
00:02:59,959 --> 00:03:04,700
but I'll tell you and then we'll launch into the

56
00:03:04,700 --> 00:03:07,260
analysis of these of this group of

57
00:03:07,260 --> 00:03:09,120
samples which I said to be a

58
00:03:09,120 --> 00:03:10,940
subfamily of cupcakes

59
00:03:10,940 --> 00:03:14,700
we'll look at  the Mission #s and the firstage

60
00:03:14,700 --> 00:03:16,920
So how did they get access to

61
00:03:16,920 --> 00:03:18,140
leonipot and

62
00:03:18,140 --> 00:03:20,760
the first command that was run

63
00:03:20,760 --> 00:03:23,420
to then get the second payl  oad

64
00:03:23,420 --> 00:03:25,500
let's also take a look at what is

65
00:03:25,500 --> 00:03:27,300


66
00:03:27,300 --> 00:03:30,260
the panorama

67
00:03:32,780 --> 00:03:36,840
of hunting Total viruses of

68
00:03:36,840 --> 00:03:42,120
similar samples and then let's do two dives 1

69
00:03:42,120 --> 00:03:44,400
on the functionality of the sample and one

70
00:03:44,400 --> 00:03:47,959
on anti-analysis and

71
00:03:47,959 --> 00:03:50,580
vision defender techniques and then let's see a lot of

72
00:03:50,580 --> 00:03:51,980
conjectures

73
00:03:51,980 --> 00:03:54,299
maybe you too would have

74
00:03:54,299 --> 00:03:55,850
conjectures

75
00:03:55,850 --> 00:03:58,080
[Music]

76
00:03:58,080 --> 00:03:59,780
ok

77
00:03:59,780 --> 00:04:04,940
Ok then amirai and garfit are

78
00:04:04,940 --> 00:04:09,480
two of the best known botnets for IOT

79
00:04:09,480 --> 00:04:12,599
and their main goal is money

80
00:04:12,599 --> 00:04:16,260
Service distributed by nylor Service the

81
00:04:16,260 --> 00:04:18,720
target as at device level are

82
00:04:18,720 --> 00:04:22,759
routers IP cameras DVR

83
00:04:22,759 --> 00:04:26,220
any device  help better if

84
00:04:26,220 --> 00:04:28,820
old so easier to carry them out

85
00:04:28,820 --> 00:04:32,580
and however they also perform Linux servers

86
00:04:32,580 --> 00:04:34,759
therefore

87
00:04:34,759 --> 00:04:37,220
x86 for

88
00:04:37,220 --> 00:04:39,500
analysis their main techniques are

89
00:04:39,500 --> 00:04:42,780
the default use of default credentials

90
00:04:42,780 --> 00:04:45,419
to access IOT devices

91
00:04:45,419 --> 00:04:47,120
or exploits

92
00:04:47,120 --> 00:04:50,220
when we talk about exploits we are actually

93
00:04:50,220 --> 00:04:51,419
talking about  of exploits also rather

94
00:04:51,419 --> 00:04:55,460
Old So also dating back to 2010

95
00:04:55,460 --> 00:04:58,320
but it's placated maybe the patch doesn't even exist

96
00:04:58,320 --> 00:04:59,639


97
00:04:59,639 --> 00:05:02,160
In our case the group of  sample that

98
00:05:02,160 --> 00:05:03,720
we are going to analyze uses only default credentials for the

99
00:05:03,720 --> 00:05:05,100
propagation of the infection

100
00:05:05,100 --> 00:05:07,199


101
00:05:07,199 --> 00:05:09,360
the source codes of both

102
00:05:09,360 --> 00:05:13,620
families have been public on github for a

103
00:05:13,620 --> 00:05:16,139
while so

104
00:05:16,139 --> 00:05:18,600
If you want to take a look at them to

105
00:05:18,600 --> 00:05:22,220
use them for educational purposes they

106
00:05:22,740 --> 00:05:25,160
are there

107
00:05:27,479 --> 00:05:30,960
click ok

108
00:05:31,520 --> 00:05:34,139
Ok we Exactly  we will focus on

109
00:05:34,139 --> 00:05:36,300
this subfamily of gaf Kit

110
00:05:36,300 --> 00:05:37,680
we will see that it has fundamental differences

111
00:05:37,680 --> 00:05:40,680
with gas kit and a lot

112
00:05:40,680 --> 00:05:44,280
of similarities that are not mentioned but

113
00:05:44,280 --> 00:05:48,900
we understand each other similarities Oh well with the

114
00:05:48,900 --> 00:05:51,840
Mirai because oh well trivially the

115
00:05:51,840 --> 00:05:54,300
source code is public so why not

116
00:05:54,300 --> 00:05:57,780
take the best  of both no

117
00:05:57,780 --> 00:06:00,440
or worse than both in this case

118
00:06:00,440 --> 00:06:03,600
let's look So what are they up to with

119
00:06:03,600 --> 00:06:06,539
this this subgroup our One

120
00:06:06,539 --> 00:06:08,699
iPods have logged a lot of

121
00:06:08,699 --> 00:06:11,539
accesses with default credentials on the

122
00:06:11,539 --> 00:06:13,940
right You see

123
00:06:13,940 --> 00:06:16,500
a graph with a list

124
00:06:16,500 --> 00:06:19,380
of default credentials which in short are also some

125
00:06:19,380 --> 00:06:20,759
are  also quite trivial and others

126
00:06:20,759 --> 00:06:21,740
are

127
00:06:21,740 --> 00:06:25,520
by default specific to a device  o

128
00:06:25,520 --> 00:06:28,500
this quantity relates to a

129
00:06:28,500 --> 00:06:30,180
week for a niece so they are

130
00:06:30,180 --> 00:06:32,900
quite active

131
00:06:34,340 --> 00:06:36,780
these accesses are not only specific

132
00:06:36,780 --> 00:06:40,259
to let's say used by this

133
00:06:40,259 --> 00:06:42,060
group we are analyzing but in

134
00:06:42,060 --> 00:06:43,620
general all botnets use them

135
00:06:43,620 --> 00:06:45,840
because they are part of a much

136
00:06:45,840 --> 00:06:47,460
longer list which is  present in the

137
00:06:47,460 --> 00:06:51,060
source code of Rai

138
00:06:55,259 --> 00:06:57,259
Ok once I

139
00:06:57,259 --> 00:06:59,699
gained access I

140
00:06:59,699 --> 00:07:01,880
logged in

141
00:07:01,880 --> 00:07:04,560
on the Honey Pot we observed

142
00:07:04,560 --> 00:07:08,819
that a Bash script was dropped which has the

143
00:07:08,819 --> 00:07:11,400
face you see at the bottom of the slide

144
00:07:11,400 --> 00:07:15,840
that is one of what it does with curl

145
00:07:15,840 --> 00:07:20,039
or voguette download  a file and save it

146
00:07:20,039 --> 00:07:22,860
in what we see to be buta Point

147
00:07:22,860 --> 00:07:25,520
Zero curl

148
00:07:28,099 --> 00:07:31,259
change the permissions of the executable

149
00:07:31,259 --> 00:07:32,759
In short of the file it saved And then

150
00:07:32,759 --> 00:07:35,940
try to execute this let's say these

151
00:07:35,940 --> 00:07:38,400
three steps are repeated between 10

152
00:07:38,400 --> 00:07:41,460
15 times with samples that have been

153
00:07:41,460 --> 00:07:42,660
compiled for different  architectures

154
00:07:42,660 --> 00:07:44,180
so what this

155
00:07:44,180 --> 00:07:46,940
Bash script actually does is a bad

156
00:07:46,940 --> 00:07:48,780
architecture perhaps no communication takes place

157
00:07:48,780 --> 00:07:50,900
first action to

158
00:07:50,900 --> 00:07:53,940
establish the architecture of the

159
00:07:53,940 --> 00:07:57,680
infected device

160
00:07:59,419 --> 00:08:02,160
to understand the scope

161
00:08:02,160 --> 00:08:05,400
of this attack we

162
00:08:05,400 --> 00:08:07,199
did some virus hunting among we

163
00:08:07,199 --> 00:08:09,539
created a Yara rule that you see here

164
00:08:09,539 --> 00:08:11,960
on the right

165
00:08:11,960 --> 00:08:17,160
for those unfamiliar with the Yara su  it is a

166
00:08:17,160 --> 00:08:20,060
language that allows you to find

167
00:08:20,060 --> 00:08:22,199
strings sequences of huts inside

168
00:08:22,199 --> 00:08:25,440


169
00:08:27,180 --> 00:08:29,819
files I like to denigrate it by saying that it is a

170
00:08:29,819 --> 00:08:32,360
grep on steroids basically

171
00:08:32,360 --> 00:08:34,440
with its own programming language

172
00:08:34,440 --> 00:08:37,200
in this case we have

173
00:08:37,200 --> 00:08:39,000
put a list of in the first part

174
00:08:39,000 --> 00:08:41,159
under the strings field  we put the

175
00:08:41,159 --> 00:08:42,120
list of strings we want to look for

176
00:08:42,120 --> 00:08:44,219
in the sample and under condition we have the

177
00:08:44,219 --> 00:08:45,740
conditions to find

178
00:08:45,740 --> 00:08:49,080
samples that are similar and without having

179
00:08:49,080 --> 00:08:51,680
too many false positives

180
00:08:51,680 --> 00:08:53,279
[Music]

181
00:08:53,279 --> 00:08:56,399
this Yara We shot it on virus

182
00:08:56,399 --> 00:09:00,060
Total and on our onehiputs and  going

183
00:09:00,060 --> 00:09:01,560
back up to a year we found

184
00:09:01,560 --> 00:09:07,040
400 more than 400 IPs actually

185
00:09:07,040 --> 00:09:09,600
uniquely associated with what

186
00:09:09,600 --> 00:09:11,279
appears to be u  na campaign or in any case to

187
00:09:11,279 --> 00:09:16,680
a command in control C2 each C2 or in

188
00:09:16,680 --> 00:09:19,260
any case beige or in any case file

189
00:09:19,260 --> 00:09:22,500
name is unique and some They are also

190
00:09:22,500 --> 00:09:24,899
funny because we know that those who

191
00:09:24,899 --> 00:09:26,700
write malware have a strange irony

192
00:09:26,700 --> 00:09:28,820
sometimes

193
00:09:28,820 --> 00:09:31,980
the interesting thing is that as I said they

194
00:09:31,980 --> 00:09:35,100
are very  active But

195
00:09:35,100 --> 00:09:36,959
virus detections are quite low Probably

196
00:09:36,959 --> 00:09:39,720
because there are so many

197
00:09:39,720 --> 00:09:41,660
new ones every time they fail

198
00:09:41,660 --> 00:09:45,260
you can't keep up

199
00:09:45,260 --> 00:09:48,779
with them the approximately life time of these types is

200
00:09:48,779 --> 00:09:51,120
a week so really very

201
00:09:51,120 --> 00:09:53,600
very short

202
00:09:54,120 --> 00:09:57,000
as I told you it was  made a brut

203
00:09:57,000 --> 00:09:58,980
perhaps of the architecture the

204
00:09:58,980 --> 00:10:01,760
completed architectures are these

205
00:10:01,760 --> 00:10:04,560
it clearly depends both on the sale or

206
00:10:04,560 --> 00:10:06,959
on the device help which one is chosen

207
00:10:06,959 --> 00:10:09,600
I have highlighted x86 because

208
00:10:09,600 --> 00:10:11,820
thank God I was able to do the analysis of

209
00:10:11,820 --> 00:10:14,339
on that in a Sun some strange architecture

210
00:10:14,339 --> 00:10:16,700


211
00:10:16,820 --> 00:10:19,279
Ok let's

212
00:10:19,279 --> 00:10:21,300
launch into the analysis of the period

213
00:10:21,300 --> 00:10:23,519
what we will see Now are all the

214
00:10:23,519 --> 00:10:26,060
features

215
00:10:26,180 --> 00:10:29,399
of one of the more chubby samples so

216
00:10:29,399 --> 00:10:33,420
that  the bigger ones with more

217
00:10:33,420 --> 00:10:35,660
complete Let's say what you see

218
00:10:35,660 --> 00:10:40,140
in the image is a cascade of If that

219
00:10:40,140 --> 00:10:42,180
is parsing the commands coming from the

220
00:10:42,180 --> 00:10:45,140
command in control the first

221
00:10:45,140 --> 00:10:48,600
five In short, up to http more than

222
00:10:48,600 --> 00:10:53,820
half are dos commands

223
00:10:53,959 --> 00:10:56,339
so there are a few  and they use

224
00:10:56,339 --> 00:10:59,100
different protocols Among other things then

225
00:10:59,100 --> 00:11:02,700
we have Ping which actually tests if the

226
00:11:02,700 --> 00:11:06,060
bot is up or down if you app

227
00:11:06,060 --> 00:11:08,399
the bot responds with pong and otherwise it

228
00:11:08,399 --> 00:11:12,120
doesn't respond obviously then we have the

229
00:11:12,120 --> 00:11:15,620
Bot Kill functionality that

230
00:11:15,620 --> 00:11:18,060
whoever has it  the malicious process on the Bot

231
00:11:18,060 --> 00:11:21,860
then Stoppa tow the bot

232
00:11:21,860 --> 00:11:24,420
I obviously left the stop from cell access on the

233
00:11:24,420 --> 00:11:26,899
infected device

234
00:11:26,899 --> 00:11:29,519
We will talk about it later in detail

235
00:11:29,519 --> 00:11:32,180
however in fact

236
00:11:33,600 --> 00:11:37,100
the sample decides which processes to

237
00:11:37,100 --> 00:11:39,360
kill that are running on the

238
00:11:39,360 --> 00:11:40,680
infected device So what it

239
00:11:40,680 --> 00:11:43,760
doesn't like is the Killa and the  The last

240
00:11:43,760 --> 00:11:45,899
feature is scanner So

241
00:11:45,899 --> 00:11:48,060
how it spreads the infection to other

242
00:11:48,060 --> 00:11:50,359
devices

243
00:11:51,360 --> 00:11:54,380
let's look

244
00:11:55,200 --> 00:11:56,070
at

245
00:11:56,070 --> 00:11:58,019
[Music

246
00:11:58,019 --> 00:12:00,360
] Dos features there are

247
00:12:00,360 --> 00:12:02,600
several there are 12  commands

248
00:12:02,600 --> 00:12:06,440
of which 7

249
00:12:06,440 --> 00:12:09,060
Dos techniques different protocols are used

250
00:12:09,060 --> 00:12:13,100
udp ai Siem PTP and http

251
00:12:13,100 --> 00:12:15,920
we will look at the TC in detail

252
00:12:15,920 --> 00:12:19,320


253
00:12:19,320 --> 00:12:22,220
just to

254
00:12:22,320 --> 00:12:25,210
see what it actually looks like

255
00:12:25,210 --> 00:12:27,000
[Music]

256
00:12:27,000 --> 00:12:29,880
I give you a very short recap of

257
00:12:29,880 --> 00:12:32,279
what a tcp and shake

258
00:12:32,279 --> 00:12:35,060
of  done to establish

259
00:12:35,060 --> 00:12:38,339
a tcp connection a three-step end shake takes place

260
00:12:38,339 --> 00:12:41,399
the client sends a sin packet to the

261
00:12:41,399 --> 00:12:44,639
server the server replies with sinac and the

262
00:12:44,639 --> 00:12:47,220
client replies with Hack and at

263
00:12:47,220 --> 00:12:48,540
that point the connection is established

264
00:12:48,540 --> 00:12:51,899
to exploit the sinfload Attack

265
00:12:51,899 --> 00:12:54,660
what happens  It is that the client or the client

266
00:12:54,660 --> 00:12:56,820
if it is a matter of nails or Service distributes

267
00:12:56,820 --> 00:12:58,279


268
00:12:58,279 --> 00:13:03,420
sends many sin requests to

269
00:13:03,420 --> 00:13:06,779
the server When the server receives the

270
00:13:06,779 --> 00:13:08,899
request to the memory Goose to

271
00:13:08,899 --> 00:13:10,860
save the information it has received

272
00:13:10,860 --> 00:13:15,779
in the sin segment and replies with sinac

273
00:13:15,779 --> 00:13:18,560
when then  the

274
00:13:18,560 --> 00:13:21,240
in theory to establish the connection

275
00:13:21,240 --> 00:13:22,860
correctly the client should

276
00:13:22,860 --> 00:13:25,200
respond with Hack In practice to

277
00:13:25,200 --> 00:13:27,240
make the sinfload effective the Attack does not

278
00:13:27,240 --> 00:13:29,600
respond and  let the server be

279
00:13:29,600 --> 00:13:32,399
Hanging then waiting for a response

280
00:13:32,399 --> 00:13:35,120
and then at some point the memory

281
00:13:35,120 --> 00:13:38,180
will fill up and the process

282
00:13:38,180 --> 00:13:41,899
will grow making the service

283
00:13:46,260 --> 00:13:48,480
As found in the code this thing

284
00:13:48,480 --> 00:13:50,160
is actually very simple it catches the eye

285
00:13:50,160 --> 00:13:52,560
because it is an infinite loop  a whiterue

286
00:13:52,560 --> 00:13:55,079
that contains a Send to internally

287
00:13:55,079 --> 00:13:55,860
so nothing particularly

288
00:13:55,860 --> 00:13:57,899
complex is found quite easily

289
00:13:57,899 --> 00:14:03,200
As soon as you open Ida or ghidra

290
00:14:03,240 --> 00:14:05,310
if you are for open source

291
00:14:05,310 --> 00:14:08,040
[Music]

292
00:14:08,040 --> 00:14:11,880
Let's talk about possible remeditions if

293
00:14:11,880 --> 00:14:15,320
Take a look at rfc 49

294
00:14:15,320 --> 00:14:19,380
87 there is a  excellent description of

295
00:14:19,380 --> 00:14:21,660
what the attack is and of all the

296
00:14:21,660 --> 00:14:24,560
possible remissions I list three of them

297
00:14:24,560 --> 00:14:26,700
so they were the ones I like

298
00:14:26,700 --> 00:14:28,200
best

299
00:14:28,200 --> 00:14:31,339
The first is to reduce the waiting time

300
00:14:31,339 --> 00:14:34,740
of the synergyard that is in fact when

301
00:14:34,740 --> 00:14:37,380
the memory is allocated reduce this

302
00:14:37,380 --> 00:14:40,199
time of  allocation in a way that

303
00:14:40,199 --> 00:14:41,899
expects the response less

304
00:14:41,899 --> 00:14:43,519
obviously

305
00:14:43,519 --> 00:14:46,320
this is not a remediation because it is

306
00:14:46,320 --> 00:14:48,680
enough to increase the number of requests and

307
00:14:48,680 --> 00:14:51,899
we cannot give zero timers  So if

308
00:14:51,899 --> 00:14:53,760


309
00:14:53,760 --> 00:14:57,660


310
00:14:57,660 --> 00:14:59,760
it reaches a limit, the second technique is to create a sin cache, i.e. for each combination of requests that comes from

311
00:14:59,760 --> 00:15:02,300
a specific IP and a specific port

312
00:15:02,300 --> 00:15:07,079
, a cache is created and

313
00:15:07,079 --> 00:15:09,620
obviously, as Cash,

314
00:15:09,620 --> 00:15:11,880
in short, the requests come, the

315
00:15:11,880 --> 00:15:12,899
information is entered in this

316
00:15:12,899 --> 00:15:14,880
cache when full it starts emptying

317
00:15:14,880 --> 00:15:16,399
from the oldest one

318
00:15:16,399 --> 00:15:19,459
too here again

319
00:15:19,459 --> 00:15:22,339
Just since the condition is on the

320
00:15:22,339 --> 00:15:26,279
port ip combination just use multiple ip's

321
00:15:26,279 --> 00:15:28,980
whether it's with a bigger botnet or it

322
00:15:28,980 --> 00:15:31,040
's for more spoofing

323
00:15:31,040 --> 00:15:33,540
to actually not have any kind of

324
00:15:33,540 --> 00:15:35,459
material Edition with this with this

325
00:15:35,459 --> 00:15:38,160
solution the most interesting one is the

326
00:15:38,160 --> 00:15:42,300
sin cookies i.e. in fact

327
00:15:42,300 --> 00:15:46,920
the clients send the server the sin instead of

328
00:15:46,920 --> 00:15:48,779
allocating the information in memory

329
00:15:48,779 --> 00:15:50,100
but the believe of the memory to

330
00:15:50,100 --> 00:15:52,339
insert the information

331
00:15:52,339 --> 00:15:56,040
the server takes this information

332
00:15:56,040 --> 00:15:57,420
inserts it in a cookie  and sends them

333
00:15:57,420 --> 00:16:01,380
back through the sinac and when the

334
00:16:01,380 --> 00:16:03,060
client replies again with Hack

335
00:16:03,060 --> 00:16:05,160
containing the cookie Then the  server

336
00:16:05,160 --> 00:16:06,779
receives the cookie and puts it in memory

337
00:16:06,779 --> 00:16:10,040
only at that point so in fact

338
00:16:11,040 --> 00:16:14,000
solve the problem

339
00:16:15,000 --> 00:16:17,579
another of the fundamental features

340
00:16:17,579 --> 00:16:19,820
and the scanner That is, he tries to propagate

341
00:16:19,820 --> 00:16:21,380
the infection

342
00:16:21,380 --> 00:16:23,760
using this very long list of

343
00:16:23,760 --> 00:16:26,600
credentials arcodate

344
00:16:26,600 --> 00:16:29,220
the image you have that you see  here it's

345
00:16:29,220 --> 00:16:30,560
from

346
00:16:30,560 --> 00:16:33,660
the malware code But it's one to one with the

347
00:16:33,660 --> 00:16:35,100
source code of Mirai So they took

348
00:16:35,100 --> 00:16:38,300
this information directly from there

349
00:16:38,300 --> 00:16:40,980
even though they belong to the

350
00:16:40,980 --> 00:16:42,959
gaffit family because Because the

351
00:16:42,959 --> 00:16:45,480
hardcoded credentials in gafghit are the four

352
00:16:45,480 --> 00:16:48,540
below so obviously they wanted

353
00:16:48,540 --> 00:16:51,560
something a little bit more  effective

354
00:16:52,860 --> 00:16:54,079


355
00:16:54,079 --> 00:16:56,519
Ok my favorite part

356
00:16:56,519 --> 00:17:00,899
made me smile insert

357
00:17:00,899 --> 00:17:04,140
this section in the slides because

358
00:17:04,140 --> 00:17:06,419


359
00:17:06,419 --> 00:17:08,459
we are used to seeing

360
00:17:08,459 --> 00:17:10,799
very interesting techniques and here

361
00:17:10,799 --> 00:17:13,500


362
00:17:13,500 --> 00:17:15,380
are some nice techniques but

363
00:17:15,380 --> 00:17:17,959
then we will see them in detail maybe

364
00:17:17,959 --> 00:17:21,559
they could have done  better

365
00:17:21,559 --> 00:17:25,880
we will talk about how the sample of pro  [ __ ]

366
00:17:25,880 --> 00:17:28,980
that runs on the system as it tries to

367
00:17:28,980 --> 00:17:31,200
obfuscate its name or change

368
00:17:31,200 --> 00:17:33,900
its name the active use of the fork

369
00:17:33,900 --> 00:17:35,179
functions

370
00:17:35,179 --> 00:17:39,020


371
00:17:39,020 --> 00:17:42,260
to annoy those who do dibaging and

372
00:17:42,260 --> 00:17:44,520
the last one which is a little bit more

373
00:17:44,520 --> 00:17:47,240
complex and

374
00:17:47,240 --> 00:17:50,520
the use of upix  just to make

375
00:17:50,520 --> 00:17:53,900
the analyzes a little more complicated

376
00:17:55,020 --> 00:17:57,120
ok

377
00:17:57,120 --> 00:18:00,419
as we do sorry how does it monitor the

378
00:18:00,419 --> 00:18:03,120
processes on the system with an

379
00:18:03,120 --> 00:18:05,160
infinite loop therefore for the whole for

380
00:18:05,160 --> 00:18:07,680
the entire life time of this sample

381
00:18:07,680 --> 00:18:09,900
[Music]

382
00:18:09,900 --> 00:18:13,260
this function is launched i.e. the

383
00:18:13,260 --> 00:18:14,640
malware goes  to read in the folder

384
00:18:14,640 --> 00:18:16,520
slash

385
00:18:16,520 --> 00:18:20,160
proc/d//e Where precisely iter on PID to

386
00:18:20,160 --> 00:18:22,880
access all

387
00:18:26,000 --> 00:18:29,520
once in this folder launches the

388
00:18:29,520 --> 00:18:32,460
redlink function which returns the Puff

389
00:18:32,460 --> 00:18:36,240
of the executable on the disk

390
00:18:36,240 --> 00:18:38,160
when it has this string containing the

391
00:18:38,160 --> 00:18:38,900
pass

392
00:18:38,900 --> 00:18:41,460
Check that  inside there are no

393
00:18:41,460 --> 00:18:44,340
substrings that are Bin slash

394
00:18:44,340 --> 00:18:46,440
lib slash oil focacceche in this case

395
00:18:46,440 --> 00:18:49,760
the name of the specific sample

396
00:18:49,760 --> 00:18:52,620
everything else that does not contain these

397
00:18:52,620 --> 00:18:57,020
three below  strings is killed

398
00:18:57,539 --> 00:19:00,720
and you will tell me But seriously

399
00:19:00,720 --> 00:19:05,820
Yes but I agree with you That

400
00:19:05,820 --> 00:19:07,880
is, this technique is not a bit coarse

401
00:19:07,880 --> 00:19:11,340
Yes while I was launching the sample I tried

402
00:19:11,340 --> 00:19:12,799
in

403
00:19:12,799 --> 00:19:15,539
different Sandboxes and almost all of them were

404
00:19:15,539 --> 00:19:17,160
created for me Why Why can't you kill

405
00:19:17,160 --> 00:19:18,360
everything that  it is out of these things

406
00:19:18,360 --> 00:19:23,120
therefore the devices I you are typically

407
00:19:23,120 --> 00:19:26,460
homemade That is, if the

408
00:19:26,460 --> 00:19:27,539
developer thinks of doing something he does it therefore

409
00:19:27,539 --> 00:19:30,000
he will never respect everyone the fact

410
00:19:30,000 --> 00:19:32,220
that all the important executables

411
00:19:32,220 --> 00:19:35,340
are in these folders and therefore

412
00:19:35,340 --> 00:19:37,140
what happened is that in  some cases who

413
00:19:37,140 --> 00:19:39,059
washes processes that were important to

414
00:19:39,059 --> 00:19:41,539
keep the

415
00:19:41,539 --> 00:19:44,940
machine active the IOT device and therefore it

416
00:19:44,940 --> 00:19:47,360
had to be considered

417
00:19:47,360 --> 00:19:50,100
an observation These botnets do not have

418
00:19:50,100 --> 00:19:52,340


419
00:19:52,340 --> 00:19:55,320
persistence techniques on Reboot So if you are

420
00:19:55,320 --> 00:19:57,059
so rude as to grow your

421
00:19:57,059 --> 00:19:59,520
IOT device someone will notice and will

422
00:19:59,520 --> 00:20:01,620
throw back  the device and

423
00:20:01,620 --> 00:20:04,679
you are no longer on that device so I don't know

424
00:20:04,679 --> 00:20:08,059
I would have it no

425
00:20:09,720 --> 00:20:11,960
but

426
00:20:13,400 --> 00:20:15,539
no also because there are the forces

427
00:20:15,539 --> 00:20:17,480
of order  and So

428
00:20:17,480 --> 00:20:20,880
let's be clear But let's say someone with a good

429
00:20:20,880 --> 00:20:22,320
background in software engineering

430
00:20:22,320 --> 00:20:23,880
probably would have done it a tad

431
00:20:23,880 --> 00:20:25,340
better I'll give

432
00:20:25,340 --> 00:20:28,740
you a comparison on Windows

433
00:20:28,740 --> 00:20:30,900
which usually have things a little

434
00:20:30,900 --> 00:20:33,480
bit more advanced there are

435
00:20:33,480 --> 00:20:35,760
techniques for which the malware goes  to see

436
00:20:35,760 --> 00:20:39,380
which dlls are loaded in memory and

437
00:20:39,380 --> 00:20:42,720
some of the DLs are

438
00:20:42,720 --> 00:20:44,880
uniquely used by processes such as

439
00:20:44,880 --> 00:20:48,179
antivirus or analysis Tull and therefore

440
00:20:48,179 --> 00:20:49,760
based on the presence of these

441
00:20:49,760 --> 00:20:53,280
of this dll, the malware decides

442
00:20:53,280 --> 00:20:55,500
whether to execute or not or to kill the

443
00:20:55,500 --> 00:20:57,260
process concerned, so

444
00:20:57,260 --> 00:20:59,580
let's say  the idea behind it is the same

445
00:20:59,580 --> 00:21:02,580
the implementation

446
00:21:05,760 --> 00:21:07,280
enough could have been done better

447
00:21:07,280 --> 00:21:10,559
another technique it uses is to

448
00:21:10,559 --> 00:21:13,140
evade the defenses is to change

449
00:21:13,140 --> 00:21:15,059
its name as a process that runs in the

450
00:21:15,059 --> 00:21:17,120
system it

451
00:21:17,120 --> 00:21:20,640
simply uses prctil with the pr7name Flag and passes it

452
00:21:20,640 --> 00:21:22,919
as second  argument the string bim

453
00:21:22,919 --> 00:21:24,660
beige what happens that after

454
00:21:24,660 --> 00:21:27,320
executing this Call

455
00:21:27,320 --> 00:21:30,539
When are you processes them on the system no  n

456
00:21:30,539 --> 00:21:32,700
you will no longer see the name iofokashi of the sample

457
00:21:32,700 --> 00:21:36,780
but you will see a child comes out

458
00:21:36,780 --> 00:21:37,980
here too

459
00:21:37,980 --> 00:21:40,260
[Music] it

460
00:21:40,260 --> 00:21:44,039
seems nice because

461
00:21:44,039 --> 00:21:45,840
in short, launching the states The running processes can

462
00:21:45,840 --> 00:21:47,760
not be seen at a glance but then in

463
00:21:47,760 --> 00:21:50,100
reality if you go to see what is the

464
00:21:50,100 --> 00:21:52,140
process that calls this game badge It

465
00:21:52,140 --> 00:21:53,460
can be seen that it is called yoyokashi so in

466
00:21:53,460 --> 00:21:56,159
fact it is only a small delay on the

467
00:21:56,159 --> 00:21:58,880
analysis

468
00:21:59,520 --> 00:22:02,400
another delay on the analysis is the

469
00:22:02,400 --> 00:22:05,039
Active use of the forks

470
00:22:05,039 --> 00:22:07,460
you see on the list

471
00:22:07,460 --> 00:22:10,919
on the right one I think there are 15 calls

472
00:22:10,919 --> 00:22:13,440
to fork one  for each feature of the

473
00:22:13,440 --> 00:22:15,660
sample and something more

474
00:22:15,660 --> 00:22:18,360
[Music]

475
00:22:18,360 --> 00:22:20,880
I believe that the intention behind

476
00:22:20,880 --> 00:22:22,940
this thing was to disturb

477
00:22:22,940 --> 00:22:26,039
the analysts who debug the

478
00:22:26,039 --> 00:22:28,380
system even if in reality as

479
00:22:28,380 --> 00:22:30,480
it was the time It was enough to skip the

480
00:22:30,480 --> 00:22:32,760
Call to fork and it was executed  all

481
00:22:32,760 --> 00:22:35,179
in the same

482
00:22:37,820 --> 00:22:41,240
processor so

483
00:22:41,659 --> 00:22:43,919
Nice idea again maybe

484
00:22:43,919 --> 00:22:46,020
the implementation should have been thought out a

485
00:22:46,020 --> 00:22:48,139
little more

486
00:22:48,480 --> 00:22:50,820
ok And this one finally let's talk about

487
00:22:50,820 --> 00:22:53,840
something a little bit

488
00:22:53,840 --> 00:22:56,120
nicer the corruption  one by

489
00:22:56,120 --> 00:22:59,460
upix first what is a packer a

490
00:22:59,460 --> 00:23:02,780
packer is legitimate software

491
00:23:02,780 --> 00:23:06,120
that was created to compress

492
00:23:06,120 --> 00:23:07,220
executables So

493
00:23:07,220 --> 00:23:09,260
carrying around

494
00:23:09,260 --> 00:23:12,440
big executables Ra a bit awkward

495
00:23:12,440 --> 00:23:16,039
this It just gave an executable

496
00:23:16,039 --> 00:23:18,960
boxed inside a

497
00:23:18,960 --> 00:23:21,559
smaller executable this  was the basic idea

498
00:23:21,559 --> 00:23:24,740
What is the advantage at the level

499
00:23:24,740 --> 00:23:26,940
of malware developers that in fact if

500
00:23:26,940 --> 00:23:28,679
you have a compression

501
00:23:28,679 --> 00:23:31,400
all the strings disappear

502
00:23:32,840 --> 00:23:35,580
or the various sequences are compressed and

503
00:23:35,580 --> 00:23:36,900
therefore your detections no

504
00:23:36,900 --> 00:23:39,480
longer work that is if you use those strings

505
00:23:39,480 --> 00:23:43,039
to create  detection no

506
00:23:47,760 --> 00:23:52,440
Ok What is a PX u Pix is ​​a packer and

507
00:23:52,440 --> 00:23:55,700
Open Source the code on github

508
00:23:55,700 --> 00:23:58,140
is used very very often by

509
00:23:58,140 --> 00:24:00,740
those who write malware and

510
00:24:00,740 --> 00:24:02,460
[Music]

511
00:24:02,460 --> 00:24:04,919
those who analyze malware are very happy

512
00:24:04,919 --> 00:24:09,780
because if they are good at malware and

513
00:24:09,780 --> 00:24:12,059
not  they mess up all the splits with

514
00:24:12,059 --> 00:24:14,159
a PX less than and then the name of the smooth sample

515
00:24:14,159 --> 00:24:16,580


516
00:24:16,580 --> 00:24:19,440
unfortunately In short, they too have evolved

517
00:24:19,440 --> 00:24:21,000
So they decided to

518
00:24:21,000 --> 00:24:23,960
find some  the techniques to corrupt

519
00:24:23,960 --> 00:24:28,380
the original structure of the deupix to

520
00:24:28,380 --> 00:24:30,659
make sure that with UPS we

521
00:24:30,659 --> 00:24:32,580
get absolutely nothing What

522
00:24:32,580 --> 00:24:34,860
they do change some fields inside

523
00:24:34,860 --> 00:24:37,740
the struct and the info and pinfo

524
00:24:37,740 --> 00:24:41,100
we see indept

525
00:24:42,000 --> 00:24:44,880
Then the info structure has five

526
00:24:44,880 --> 00:24:47,179
fields it is found in the  initial part of the

527
00:24:47,179 --> 00:24:50,400
elf packed with a PX we are

528
00:24:50,400 --> 00:24:52,380
interested in The second field which is the

529
00:24:52,380 --> 00:24:56,240
Magic and in fact is the magic number of the

530
00:24:56,240 --> 00:24:58,340
lupix which

531
00:24:58,340 --> 00:25:01,380
is trivially UPS exclamation point

532
00:25:01,380 --> 00:25:04,940
So if you open it you

533
00:25:04,940 --> 00:25:08,179
should find the string UPS to

534
00:25:08,179 --> 00:25:11,700
corrupt the packer they go to

535
00:25:11,700 --> 00:25:13,500
replace these four characters with

536
00:25:13,500 --> 00:25:15,960
something Random that is not a Pix

537
00:25:15,960 --> 00:25:17,220
exclamation point and therefore we

538
00:25:17,220 --> 00:25:18,600
can't actually pack it what do they

539
00:25:18,600 --> 00:25:20,640
choose since they are very funny people

540
00:25:20,640 --> 00:25:21,679


541
00:25:21,679 --> 00:25:24,360
in one of the samples they decided to

542
00:25:24,360 --> 00:25:27,299
use n6 exclamation point because

543
00:25:27,299 --> 00:25:30,179
I don't know maybe for attribution

544
00:25:30,179 --> 00:25:33,200
not  we fell for it

545
00:25:33,539 --> 00:25:36,500
the other

546
00:25:42,620 --> 00:25:47,240
technique worked Oh well the other technique

547
00:25:47,240 --> 00:25:48,980
too much

548
00:25:48,980 --> 00:25:52,159
the other technique of corruption is going to

549
00:25:52,159 --> 00:25:54,600
ca  change another structure

550
00:25:54,600 --> 00:25:57,539
called Pink we are interested in the second

551
00:25:57,539 --> 00:25:59,820
and third fields of this structure which are

552
00:25:59,820 --> 00:26:02,700
in fact the same number Five

553
00:26:02,700 --> 00:26:04,620
Block Size must contain must

554
00:26:04,620 --> 00:26:07,500
contain the same number for lupix to be valid

555
00:26:07,500 --> 00:26:09,000
and it must be the

556
00:26:09,000 --> 00:26:10,460
right

557
00:26:10,460 --> 00:26:13,340
one  what happens is that sometimes they set

558
00:26:13,340 --> 00:26:16,080
them to zero sometimes they

559
00:26:16,080 --> 00:26:18,600
put them one different from the other but in

560
00:26:18,600 --> 00:26:20,400
any case they change them and They make it

561
00:26:20,400 --> 00:26:23,820
impossible to launch opx less less than

562
00:26:23,820 --> 00:26:24,980
successfully

563
00:26:24,980 --> 00:26:27,799
How do you fix this thing

564
00:26:27,799 --> 00:26:30,059
you have to go to the end of the file where

565
00:26:30,059 --> 00:26:32,100
this structure is replicated and can't

566
00:26:32,100 --> 00:26:33,480
be changed otherwise the execution

567
00:26:33,480 --> 00:26:34,460
doesn't work

568
00:26:34,460 --> 00:26:36,779
copy the value inside these

569
00:26:36,779 --> 00:26:38,460
two fields

570
00:26:38,460 --> 00:26:42,200
against the esse and then you can do a pix-d

571
00:26:42,200 --> 00:26:45,059
a sure i didn't tell you how to fix

572
00:26:45,059 --> 00:26:47,400
this instead of  put n6

573
00:26:47,400 --> 00:26:49,200
Open your editor And write a PX

574
00:26:49,200 --> 00:26:51,539
exclamation mark and it's fixed after it's an

575
00:26:51,539 --> 00:26:52,980
easy pat

576
00:26:52,980 --> 00:26:54,980
another technique they used

577
00:26:54,980 --> 00:26:56,940
This is also quite interesting

578
00:26:56,940 --> 00:26:59,600
at the time of the analysis they were

579
00:26:59,600 --> 00:27:02,039
using upix in version 4 when

580
00:27:02,039 --> 00:27:03,440


581
00:27:03,440 --> 00:27:05,640
we publicly say the official one

582
00:27:05,640 --> 00:27:10,140
was 396 so launching a PX less

583
00:27:10,140 --> 00:27:13,080
than after fixing all the corruptions

584
00:27:13,080 --> 00:27:16,520
with 396 didn't unpack a

585
00:27:16,520 --> 00:27:19,740
damn strings that identify pixels in

586
00:27:19,740 --> 00:27:21,900
version 4 at all  inside of the VX had not

587
00:27:21,900 --> 00:27:24,840
been deleted and therefore it took

588
00:27:24,840 --> 00:27:27,240
us a tad to realize that it was

589
00:27:27,240 --> 00:27:30,260
another version However

590
00:27:30,260 --> 00:27:33,080
this technique is also nice,

591
00:27:33,080 --> 00:27:35,460
a small note because we are talking

592
00:27:35,460 --> 00:27:38,400
about fixing lupix That is, in the end we can

593
00:27:38,400 --> 00:27:40,200
launch the sample this is done

594
00:27:40,200 --> 00:27:41,640
once  we download the clear code

595
00:27:41,640 --> 00:27:44,720
and analyze it like this yes

596
00:27:44,720 --> 00:27:47,480
But given the extent

597
00:27:47,480 --> 00:27:51,299
of this of this attack the idea is

598
00:27:51,299 --> 00:27:54,840
to be able to run the detections on a large scale

599
00:27:54,840 --> 00:27:55,820
therefore

600
00:27:55,820 --> 00:27:59,580
automating the Dump of the

601
00:27:59,580 --> 00:28:01,580
clear code is not very

602
00:28:01,580 --> 00:28:04,860
obvious and therefore the only

603
00:28:04,860 --> 00:28:07,440
solution  was to create a tool that fixes

604
00:28:07,440 --> 00:28:10,400
these these corruptions

605
00:28:12,179 --> 00:28:14,039
ok

606
00:28:14,039 --> 00:28:16,039
let's do a recap

607
00:28:16,039 --> 00:28:18,360
the things are in here they are the ones

608
00:28:18,360 --> 00:28:20,340
that belong  on to the sample Cicciotto

609
00:28:20,340 --> 00:28:22,260
so it's the one with all the

610
00:28:22,260 --> 00:28:23,240
features

611
00:28:23,240 --> 00:28:28,140
we have capobilities as

612
00:28:28,140 --> 00:28:30,799
features we have

613
00:28:31,620 --> 00:28:34,260
seven didos o techniques that use

614
00:28:34,260 --> 00:28:36,480
four protocols a command to find out

615
00:28:36,480 --> 00:28:39,480
if the bot is up a command to kill

616
00:28:39,480 --> 00:28:41,400
the bot

617
00:28:41,400 --> 00:28:43,200
a Shell In short a command to

618
00:28:43,200 --> 00:28:46,820
get Shell on the  IOT device

619
00:28:46,820 --> 00:28:51,260
the technique that makes me unhappy to

620
00:28:51,260 --> 00:28:53,700
terminate the processes that the Bot does not like

621
00:28:53,700 --> 00:28:57,840
and propagate the infection as

622
00:28:57,840 --> 00:29:00,539
anti analysis techniques we always have

623
00:29:00,539 --> 00:29:03,320
the process of

624
00:29:04,620 --> 00:29:06,539
always the Kill of the processes that

625
00:29:06,539 --> 00:29:08,880
the Bot does not like in some cases it is given

626
00:29:08,880 --> 00:29:10,799
as an In command  other cases and arched

627
00:29:10,799 --> 00:29:15,200
in the execution flow

628
00:29:16,159 --> 00:29:18,179
deleting or changing the

629
00:29:18,179 --> 00:29:20,820
process name the use of forcatives and

630
00:29:20,820 --> 00:29:23,760
packing with PX we have to observe that

631
00:29:23,760 --> 00:29:24,840
some of these techniques are

632
00:29:24,840 --> 00:29:26,580
quite noisy So if you want to

633
00:29:26,580 --> 00:29:29,100
have a Stealth bad mood maybe I don't know

634
00:29:29,100 --> 00:29:30,200
if it would be convenient for you  use them

635
00:29:30,200 --> 00:29:31,919
[Music]

636
00:29:31,919 --> 00:29:35,340
like I imagine that when you

637
00:29:35,340 --> 00:29:38,220
start being on processes that run

638
00:29:38,220 --> 00:29:39,840
on the machine so i  nfinite the

639
00:29:39,840 --> 00:29:40,880
CPU goes

640
00:29:40,880 --> 00:29:45,000
up so I don't know maybe

641
00:29:45,000 --> 00:29:48,659
Oh well we found several samples that

642
00:29:48,659 --> 00:29:51,380
we have called lightweight because they

643
00:29:51,380 --> 00:29:54,179
contain only some a subset

644
00:29:54,179 --> 00:29:57,980
of functions and not always the same

645
00:29:57,980 --> 00:30:00,720
as you can see I have crossed out several and the

646
00:30:00,720 --> 00:30:01,940
ones that are

647
00:30:01,940 --> 00:30:05,340
left over are very few they are the basis therefore the  fact that

648
00:30:05,340 --> 00:30:06,899
we want to have at least one

649
00:30:06,899 --> 00:30:09,899
Dos technique the ping to find out if the Bot is there or not

650
00:30:09,899 --> 00:30:12,600
and then eliminate the bot on

651
00:30:12,600 --> 00:30:16,740
the other side we still have

652
00:30:16,740 --> 00:30:18,480
antideprection systems including the use of the

653
00:30:18,480 --> 00:30:21,059
Four which however has been reduced  a lot and

654
00:30:21,059 --> 00:30:22,620
so there's only one or two when

655
00:30:22,620 --> 00:30:24,360
there are

656
00:30:24,360 --> 00:30:27,380
Why what why are there all these

657
00:30:27,380 --> 00:30:29,220
malwares that do pretty much the same

658
00:30:29,220 --> 00:30:30,980
thing but

659
00:30:30,980 --> 00:30:34,200
the code is

660
00:30:34,200 --> 00:30:37,200
different our guesses are Then the

661
00:30:37,200 --> 00:30:39,000
first one is

662
00:30:39,000 --> 00:30:42,480
evading detections or evading

663
00:30:42,480 --> 00:30:44,120
detection

664
00:30:44,120 --> 00:30:47,039
What does it mean if I remove the code from the

665
00:30:47,039 --> 00:30:49,020
malware the detections based on the large code,

666
00:30:49,020 --> 00:30:50,700
in short, on the large sample no

667
00:30:50,700 --> 00:30:53,460
longer work and therefore in fact I

668
00:30:53,460 --> 00:30:55,700
can no longer detect them

669
00:30:55,700 --> 00:30:58,799
the second time  conjecture we make is the

670
00:30:58,799 --> 00:31:00,360
fact that we may perhaps be

671
00:31:00,360 --> 00:31:02,220
dealing with an Intesa Service botne That is, the

672
00:31:02,220 --> 00:31:04,919
more you pay the more functionality of do So

673
00:31:04,919 --> 00:31:08,039
the little ones are those In short,

674
00:31:08,039 --> 00:31:10,039
those who didn't have too many

675
00:31:10,039 --> 00:31:12,740
who were running around

676
00:31:12,740 --> 00:31:17,340
certainly there are other conjectures

677
00:31:17,340 --> 00:31:19,740
tell me If they come to mind, they are in

678
00:31:19,740 --> 00:31:21,840
around the corridors Let me know I

679
00:31:21,840 --> 00:31:22,919
would like to discuss these things

680
00:31:22,919 --> 00:31:25,620
even if you have other points of view and

681
00:31:25,620 --> 00:31:28,200
for the rest thanks I'm done

682
00:31:28,200 --> 00:31:43,749
[Applause]

