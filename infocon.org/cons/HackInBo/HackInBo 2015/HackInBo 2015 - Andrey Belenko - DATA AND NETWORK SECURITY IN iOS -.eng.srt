1
00:00:08,270 --> 00:00:12,899
thank you very<font color="#E5E5E5"> much if</font>

2
00:00:11,100 --> 00:00:15,450
it's a<font color="#E5E5E5"> great pleasure to be here thank</font>

3
00:00:12,900 --> 00:00:19,890
you for Mario and<font color="#CCCCCC"> Liana for inviting me</font>

4
00:00:15,450 --> 00:00:21,509
to<font color="#E5E5E5"> present here my name is Andre I'm</font>

5
00:00:19,890 --> 00:00:23,760
<font color="#E5E5E5">originally from Moscow right now I live</font>

6
00:00:21,510 --> 00:00:26,910
in Prague and today I would like to<font color="#E5E5E5"> talk</font>

7
00:00:23,760 --> 00:00:31,790
about well data and network security in

8
00:00:26,910 --> 00:00:35,129
iOS before we start<font color="#E5E5E5"> I would like just to</font>

9
00:00:31,790 --> 00:00:36,989
explain a little bit so this is mostly

10
00:00:35,129 --> 00:00:39,540
defensive talk so I will not tell<font color="#E5E5E5"> you</font>

11
00:00:36,989 --> 00:00:41,790
<font color="#E5E5E5">how to break things I will tell you how</font>

12
00:00:39,540 --> 00:00:48,659
iOS protects data and how you as a

13
00:00:41,790 --> 00:00:50,460
developer can<font color="#CCCCCC"> utilize that you know iOS</font>

14
00:00:48,659 --> 00:00:52,050
capabilities to protect the data so i

15
00:00:50,460 --> 00:00:56,040
would first would like to ask you how

16
00:00:52,050 --> 00:00:58,919
<font color="#E5E5E5">many of you have any experience as iOS</font>

17
00:00:56,040 --> 00:01:05,190
developers or do I know manage iOS

18
00:00:58,920 --> 00:01:07,470
development teams<font color="#CCCCCC"> okay lists few of them</font>

19
00:01:05,190 --> 00:01:09,270
<font color="#CCCCCC">I hope that</font><font color="#E5E5E5"> this will</font><font color="#CCCCCC"> be useful for you</font>

20
00:01:07,470 --> 00:01:12,000
you<font color="#E5E5E5"> can still utilize this information</font>

21
00:01:09,270 --> 00:01:13,770
that<font color="#CCCCCC"> I present</font><font color="#E5E5E5"> in a you know security</font>

22
00:01:12,000 --> 00:01:15,630
<font color="#E5E5E5">evaluations penetration desktop</font>

23
00:01:13,770 --> 00:01:20,210
applications but this is mostly

24
00:01:15,630 --> 00:01:25,169
defensive talk not not offensive<font color="#E5E5E5"> okay</font>

25
00:01:20,210 --> 00:01:28,619
great<font color="#E5E5E5"> so today we would talk about data</font>

26
00:01:25,170 --> 00:01:31,920
at rest how applications can and should

27
00:01:28,619 --> 00:01:34,920
store data and data in transit how

28
00:01:31,920 --> 00:01:37,289
applications send and receive data so

29
00:01:34,920 --> 00:01:41,939
those<font color="#E5E5E5"> are</font><font color="#CCCCCC"> kind of two big separate</font>

30
00:01:37,289 --> 00:01:45,869
pieces that we will cover today first of

31
00:01:41,939 --> 00:01:49,469
all you know mobile application if it's

32
00:01:45,869 --> 00:01:53,189
of any complexity if it's not trivial

33
00:01:49,469 --> 00:01:56,399
application this application must store

34
00:01:53,189 --> 00:01:59,130
data user data on the device somehow of

35
00:01:56,399 --> 00:02:00,780
course in the ideal world and the best

36
00:01:59,130 --> 00:02:02,699
in the<font color="#E5E5E5"> most secure solution is to not</font>

37
00:02:00,780 --> 00:02:04,710
store any data at all but unfortunately

38
00:02:02,700 --> 00:02:07,560
<font color="#CCCCCC">this is not practical for many</font>

39
00:02:04,710 --> 00:02:09,389
applications so let's<font color="#CCCCCC"> assume that</font>

40
00:02:07,560 --> 00:02:12,260
applications need to store data and they

41
00:02:09,389 --> 00:02:15,359
<font color="#E5E5E5">kind of need to do this securely right</font>

42
00:02:12,260 --> 00:02:20,340
there is<font color="#CCCCCC"> a good news</font><font color="#E5E5E5"> right good news is</font>

43
00:02:15,360 --> 00:02:23,490
<font color="#CCCCCC">that iOS since iOS four which is five</font>

44
00:02:20,340 --> 00:02:24,100
years<font color="#E5E5E5"> ago 2010 iOS provides a lot of</font>

45
00:02:23,490 --> 00:02:26,980
<font color="#CCCCCC">different</font>

46
00:02:24,100 --> 00:02:29,410
features that help<font color="#E5E5E5"> use the developers as</font>

47
00:02:26,980 --> 00:02:32,500
a application authors to protect user

48
00:02:29,410 --> 00:02:35,260
data properly so you can see a number<font color="#CCCCCC"> of</font>

49
00:02:32,500 --> 00:02:38,830
features<font color="#CCCCCC"> I highlighted here and</font><font color="#E5E5E5"> this</font><font color="#CCCCCC"> is</font>

50
00:02:35,260 --> 00:02:40,899
you<font color="#CCCCCC"> know important each and every iOS</font>

51
00:02:38,830 --> 00:02:42,730
device has its own encryption

52
00:02:40,900 --> 00:02:44,920
coprocessor with the hard way<font color="#CCCCCC"> i</font>

53
00:02:42,730 --> 00:02:47,079
<font color="#E5E5E5">encrypted with a specific device</font>

54
00:02:44,920 --> 00:02:49,839
specific encryption key which is

55
00:02:47,080 --> 00:02:54,820
hardwired into this into this<font color="#E5E5E5"> core</font>

56
00:02:49,840 --> 00:02:57,520
<font color="#E5E5E5">processor iOS devices they offer you and</font>

57
00:02:54,820 --> 00:02:59,140
provide file encryption they also

58
00:02:57,520 --> 00:03:02,770
provide key chain<font color="#CCCCCC"> that you can</font><font color="#E5E5E5"> utilize</font>

59
00:02:59,140 --> 00:03:06,790
to store application secret like private

60
00:03:02,770 --> 00:03:10,750
<font color="#E5E5E5">keys like passwords like access tokens</font>

61
00:03:06,790 --> 00:03:13,060
in this kind of things very important

62
00:03:10,750 --> 00:03:15,540
<font color="#CCCCCC">aspect of iOS data protection is</font>

63
00:03:13,060 --> 00:03:18,580
<font color="#E5E5E5">so-called protection classes we will</font>

64
00:03:15,540 --> 00:03:22,500
look at this in much more detail in next

65
00:03:18,580 --> 00:03:26,650
few slides next very important aspect<font color="#CCCCCC"> of</font>

66
00:03:22,500 --> 00:03:28,330
iOS data protection is is<font color="#CCCCCC"> the you know</font>

67
00:03:26,650 --> 00:03:30,670
the fact that the device can be

68
00:03:28,330 --> 00:03:33,220
<font color="#CCCCCC">protected with a passcode which user</font>

69
00:03:30,670 --> 00:03:35,589
needs to to enter to unlock the device

70
00:03:33,220 --> 00:03:38,710
and encryption on the device encryption

71
00:03:35,590 --> 00:03:41,530
of<font color="#E5E5E5"> files encryption of key chain it is</font>

72
00:03:38,710 --> 00:03:44,170
actually tied to this pass code this is

73
00:03:41,530 --> 00:03:46,450
<font color="#E5E5E5">very important so this basically means</font>

74
00:03:44,170 --> 00:03:48,179
that<font color="#E5E5E5"> you cannot just bypass the passcode</font>

75
00:03:46,450 --> 00:03:50,739
and decrypt everything on the device

76
00:03:48,180 --> 00:03:52,420
because this is cryptographically

77
00:03:50,740 --> 00:03:54,550
impossible it's you still need to

78
00:03:52,420 --> 00:03:59,799
<font color="#E5E5E5">somehow figure out the key to decrypt</font>

79
00:03:54,550 --> 00:04:03,790
stuff next<font color="#E5E5E5"> important aspect is Walker</font>

80
00:03:59,800 --> 00:04:06,910
<font color="#E5E5E5">local backups we will touch on this in</font>

81
00:04:03,790 --> 00:04:09,400
next<font color="#E5E5E5"> few slides as well the important</font>

82
00:04:06,910 --> 00:04:10,900
<font color="#E5E5E5">part is that backups which you</font><font color="#CCCCCC"> save</font><font color="#E5E5E5"> to</font>

83
00:04:09,400 --> 00:04:14,590
your local<font color="#E5E5E5"> machine they can be encrypted</font>

84
00:04:10,900 --> 00:04:17,739
and all of these that i talked to talk

85
00:04:14,590 --> 00:04:21,010
about this is this applies<font color="#CCCCCC"> to all</font>

86
00:04:17,738 --> 00:04:24,070
devices since iphone 3gs which is 2009

87
00:04:21,010 --> 00:04:26,440
and all iOS versions since iOS four

88
00:04:24,070 --> 00:04:28,480
which is 1010 so this<font color="#CCCCCC"> is not new stuff</font>

89
00:04:26,440 --> 00:04:30,310
this is mostly you know this has been

90
00:04:28,480 --> 00:04:32,200
around for a long long time

91
00:04:30,310 --> 00:04:34,180
let's<font color="#E5E5E5"> talk about</font><font color="#CCCCCC"> protection</font><font color="#E5E5E5"> classes</font>

92
00:04:32,200 --> 00:04:36,940
because this is<font color="#CCCCCC"> very important to</font>

93
00:04:34,180 --> 00:04:40,420
understand if you plan to utilize iOS

94
00:04:36,940 --> 00:04:42,340
data protection so on the slide you can

95
00:04:40,420 --> 00:04:46,300
see for protection classes that are

96
00:04:42,340 --> 00:04:48,659
<font color="#E5E5E5">defined for files the first one is an S</font>

97
00:04:46,300 --> 00:04:52,750
file protection on which is basically

98
00:04:48,660 --> 00:04:55,360
unencrypted file so you can you can

99
00:04:52,750 --> 00:04:57,730
think of<font color="#E5E5E5"> it</font><font color="#CCCCCC"> as a file that can be read</font>

100
00:04:55,360 --> 00:05:01,780
by anyone in the<font color="#E5E5E5"> system which is not</font>

101
00:04:57,730 --> 00:05:03,760
tied to any kind<font color="#E5E5E5"> of encryption the the</font>

102
00:05:01,780 --> 00:05:06,969
benefit of this class<font color="#CCCCCC"> is that this this</font>

103
00:05:03,760 --> 00:05:08,530
<font color="#CCCCCC">particular class can be files of this</font>

104
00:05:06,970 --> 00:05:10,690
class they can be read at any time so

105
00:05:08,530 --> 00:05:13,539
even if they're<font color="#CCCCCC"> please the device is</font>

106
00:05:10,690 --> 00:05:16,690
locked<font color="#CCCCCC"> so if nobody is</font><font color="#E5E5E5"> using the device</font>

107
00:05:13,540 --> 00:05:18,940
if it's<font color="#CCCCCC"> still on</font><font color="#E5E5E5"> the table and the user</font>

108
00:05:16,690 --> 00:05:21,700
is away and the application<font color="#CCCCCC"> needs</font><font color="#E5E5E5"> to</font>

109
00:05:18,940 --> 00:05:25,210
access to access the file application

110
00:05:21,700 --> 00:05:31,060
can do this sometimes this is necessary

111
00:05:25,210 --> 00:05:33,039
<font color="#E5E5E5">for applications so the next the</font><font color="#CCCCCC"> next</font>

112
00:05:31,060 --> 00:05:35,350
class is<font color="#CCCCCC"> NS file protection complete and</font>

113
00:05:33,040 --> 00:05:37,480
this is the exact opposite so this file

114
00:05:35,350 --> 00:05:42,390
is encrypted it<font color="#CCCCCC"> has</font><font color="#E5E5E5"> encrypted to both</font>

115
00:05:37,480 --> 00:05:44,680
hardware key and the passcode key and

116
00:05:42,390 --> 00:05:46,990
the good<font color="#CCCCCC"> thing is that you</font><font color="#E5E5E5"> know it's</font>

117
00:05:44,680 --> 00:05:49,120
encrypted and you need it is only

118
00:05:46,990 --> 00:05:50,200
<font color="#E5E5E5">available when user is interacting with</font>

119
00:05:49,120 --> 00:05:53,380
the device so when the device is

120
00:05:50,200 --> 00:05:54,940
unlocked and the<font color="#E5E5E5"> bad news</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> that if</font>

121
00:05:53,380 --> 00:05:56,800
your application needs to<font color="#E5E5E5"> access file</font>

122
00:05:54,940 --> 00:05:58,510
when the application then the device is

123
00:05:56,800 --> 00:06:01,240
not being used by user for example I

124
00:05:58,510 --> 00:06:04,180
<font color="#E5E5E5">don't know the applicator the phone is</font>

125
00:06:01,240 --> 00:06:07,510
in your pocket and your application

126
00:06:04,180 --> 00:06:09,490
receives push notification and needs<font color="#E5E5E5"> to</font>

127
00:06:07,510 --> 00:06:10,719
access some local storage then this is

128
00:06:09,490 --> 00:06:12,670
not possible because the file is

129
00:06:10,720 --> 00:06:15,100
encrypted to the pass code which is<font color="#E5E5E5"> not</font>

130
00:06:12,670 --> 00:06:17,710
known at this time this will result in

131
00:06:15,100 --> 00:06:21,130
an error and was most likely application

132
00:06:17,710 --> 00:06:23,739
will crash if it's<font color="#E5E5E5"> not done properly so</font>

133
00:06:21,130 --> 00:06:27,820
it<font color="#CCCCCC"> is important to understand this this</font>

134
00:06:23,740 --> 00:06:31,300
particular feature once the device is

135
00:06:27,820 --> 00:06:33,460
locked all the encryption keys that

136
00:06:31,300 --> 00:06:35,470
pertain to the to<font color="#CCCCCC"> the files and kitchen</font>

137
00:06:33,460 --> 00:06:37,419
items there they get removed from the

138
00:06:35,470 --> 00:06:39,250
memory again<font color="#E5E5E5"> this is this is all</font>

139
00:06:37,420 --> 00:06:40,420
documented this has been around for a

140
00:06:39,250 --> 00:06:43,240
long time<font color="#CCCCCC"> but</font><font color="#E5E5E5"> it's important to</font>

141
00:06:40,420 --> 00:06:45,099
<font color="#E5E5E5">understand that not all the world I</font>

142
00:06:43,240 --> 00:06:47,680
work with iOS developers and not all of

143
00:06:45,099 --> 00:06:52,419
them kind of<font color="#E5E5E5"> understand this stuff so I</font>

144
00:06:47,680 --> 00:06:55,990
take time to explain this<font color="#CCCCCC"> okay next one</font>

145
00:06:52,419 --> 00:06:58,719
and this one is probably<font color="#E5E5E5"> the most</font><font color="#CCCCCC"> widely</font>

146
00:06:55,990 --> 00:07:01,090
used today the next<font color="#CCCCCC"> class is an Sol</font>

147
00:06:58,720 --> 00:07:06,160
protection complete and until first user

148
00:07:01,090 --> 00:07:08,289
authentication<font color="#E5E5E5"> it's a bottom left it is</font>

149
00:07:06,160 --> 00:07:10,300
similar<font color="#E5E5E5"> to an S file protection complete</font>

150
00:07:08,289 --> 00:07:13,750
with the<font color="#E5E5E5"> only</font><font color="#CCCCCC"> exception that keys are</font>

151
00:07:10,300 --> 00:07:17,110
not<font color="#E5E5E5"> yet they do not get removed from the</font>

152
00:07:13,750 --> 00:07:19,000
<font color="#E5E5E5">memory when the device is locked so you</font>

153
00:07:17,110 --> 00:07:22,240
can<font color="#E5E5E5"> think of it like this so when the</font>

154
00:07:19,000 --> 00:07:23,979
device is switched off the<font color="#CCCCCC"> files with</font>

155
00:07:22,240 --> 00:07:26,590
this protection class are encrypted to

156
00:07:23,979 --> 00:07:29,400
the key which is dependent<font color="#E5E5E5"> on the user</font>

157
00:07:26,590 --> 00:07:32,159
pass code and on the device specific key

158
00:07:29,400 --> 00:07:34,799
when the device<font color="#E5E5E5"> has started up and user</font>

159
00:07:32,159 --> 00:07:38,979
enters the passcode for the first time

160
00:07:34,800 --> 00:07:41,770
after the devices switched on this key

161
00:07:38,979 --> 00:07:45,039
is computed and it never it is never

162
00:07:41,770 --> 00:07:46,990
erased from<font color="#CCCCCC"> the memory</font><font color="#E5E5E5"> so basically if</font>

163
00:07:45,039 --> 00:07:49,300
your device gets stolen or compromised

164
00:07:46,990 --> 00:07:52,259
when it's off then you benefit from the

165
00:07:49,300 --> 00:07:54,940
strong encryption but at the same time

166
00:07:52,259 --> 00:07:57,280
once the user has provided the passcode

167
00:07:54,940 --> 00:08:00,460
at least once the data remains

168
00:07:57,280 --> 00:08:03,849
accessible<font color="#E5E5E5"> again this is</font><font color="#CCCCCC"> a compromise</font>

169
00:08:00,460 --> 00:08:06,849
between an SPL protection complete and

170
00:08:03,849 --> 00:08:09,190
NS file protection on because it allows

171
00:08:06,849 --> 00:08:10,840
applications to access files from the

172
00:08:09,190 --> 00:08:12,490
from<font color="#CCCCCC"> the</font><font color="#E5E5E5"> background when nobody's</font>

173
00:08:10,840 --> 00:08:15,729
interactive interacting with the device

174
00:08:12,490 --> 00:08:17,590
as<font color="#E5E5E5"> I mentioned this one is</font><font color="#CCCCCC"> probably the</font>

175
00:08:15,729 --> 00:08:20,219
most<font color="#CCCCCC"> widely used today so many</font>

176
00:08:17,590 --> 00:08:22,239
application many apples into like

177
00:08:20,219 --> 00:08:24,880
applications which are built into<font color="#E5E5E5"> iOS</font>

178
00:08:22,240 --> 00:08:28,690
like for example contacts and phone and

179
00:08:24,880 --> 00:08:34,510
SMS messages they use this class to

180
00:08:28,690 --> 00:08:36,190
protect their databases and many

181
00:08:34,510 --> 00:08:39,370
application most applications should use

182
00:08:36,190 --> 00:08:42,550
this class for their data the last class

183
00:08:39,370 --> 00:08:44,589
<font color="#E5E5E5">is a was that it in iOS 5 is the matter</font>

184
00:08:42,549 --> 00:08:46,359
<font color="#E5E5E5">of fact it is an SQL protection complete</font>

185
00:08:44,589 --> 00:08:49,390
unless open it is<font color="#E5E5E5"> slightly different</font>

186
00:08:46,360 --> 00:08:51,430
from all from all others because it

187
00:08:49,390 --> 00:08:53,020
employs not only symmetrical

188
00:08:51,430 --> 00:08:53,839
cryptography but also it employs a

189
00:08:53,020 --> 00:08:56,780
symmetrical

190
00:08:53,840 --> 00:09:01,100
<font color="#E5E5E5">geography it permits the usage pattern</font>

191
00:08:56,780 --> 00:09:03,260
when file of sorry when applications<font color="#E5E5E5"> can</font>

192
00:09:01,100 --> 00:09:05,660
create files even<font color="#E5E5E5"> when the device is</font>

193
00:09:03,260 --> 00:09:08,680
locked but they only can read those

194
00:09:05,660 --> 00:09:11,510
files when the device is unlocked

195
00:09:08,680 --> 00:09:13,609
typical example is your camera

196
00:09:11,510 --> 00:09:15,110
application so you want to be<font color="#CCCCCC"> able</font><font color="#E5E5E5"> to</font>

197
00:09:13,610 --> 00:09:17,690
take pictures without unlocking the

198
00:09:15,110 --> 00:09:20,450
phone and at the<font color="#E5E5E5"> same time you don't</font>

199
00:09:17,690 --> 00:09:24,530
want existing photos to be<font color="#E5E5E5"> available</font>

200
00:09:20,450 --> 00:09:27,980
<font color="#E5E5E5">where the phone is locked right so you</font>

201
00:09:24,530 --> 00:09:30,230
<font color="#E5E5E5">can use this class to do this basically</font>

202
00:09:27,980 --> 00:09:32,480
you can<font color="#E5E5E5"> create new files without</font>

203
00:09:30,230 --> 00:09:34,730
unlocking the device but you cannot true

204
00:09:32,480 --> 00:09:36,560
once the file is closed was once the

205
00:09:34,730 --> 00:09:38,270
file handle is closed you cannot

206
00:09:36,560 --> 00:09:40,729
actually read the contents<font color="#E5E5E5"> of this file</font>

207
00:09:38,270 --> 00:09:47,630
<font color="#E5E5E5">value until unless</font><font color="#CCCCCC"> your</font><font color="#E5E5E5"> unlock the</font>

208
00:09:40,730 --> 00:09:50,660
device and how is this simply implement

209
00:09:47,630 --> 00:09:52,340
it on the<font color="#E5E5E5"> system like here's how how</font>

210
00:09:50,660 --> 00:09:54,040
encryption<font color="#E5E5E5"> works at the file level and</font>

211
00:09:52,340 --> 00:09:57,500
it's important<font color="#E5E5E5"> to understand</font><font color="#CCCCCC"> that unlike</font>

212
00:09:54,040 --> 00:10:00,079
unlike for example<font color="#E5E5E5"> on android iOS does</font>

213
00:09:57,500 --> 00:10:02,750
not have this full disk encryption so on

214
00:10:00,080 --> 00:10:04,010
<font color="#E5E5E5">Android you have this partition and the</font>

215
00:10:02,750 --> 00:10:06,980
whole partition is encrypted with<font color="#E5E5E5"> a</font>

216
00:10:04,010 --> 00:10:09,200
single master key using<font color="#CCCCCC"> DM crypt or</font>

217
00:10:06,980 --> 00:10:12,320
whatever on iOS there is no<font color="#E5E5E5"> such thing</font>

218
00:10:09,200 --> 00:10:14,150
<font color="#CCCCCC">as as disk encryption effectively</font><font color="#E5E5E5"> what</font>

219
00:10:12,320 --> 00:10:16,010
you have is a<font color="#E5E5E5"> file encryption which is</font>

220
00:10:14,150 --> 00:10:17,480
much more closer to things like

221
00:10:16,010 --> 00:10:21,830
encrypted file system and windows

222
00:10:17,480 --> 00:10:24,950
actually so whenever<font color="#E5E5E5"> system wants to</font>

223
00:10:21,830 --> 00:10:28,250
encrypt the file it does roughly<font color="#CCCCCC"> the</font>

224
00:10:24,950 --> 00:10:32,780
same<font color="#CCCCCC"> thing so this is the this</font><font color="#E5E5E5"> thing so</font>

225
00:10:28,250 --> 00:10:34,820
first it generates random file key then

226
00:10:32,780 --> 00:10:37,459
it encrypts this file key with the

227
00:10:34,820 --> 00:10:40,250
<font color="#E5E5E5">content key and there is one content key</font>

228
00:10:37,460 --> 00:10:42,200
for each protection class so there is

229
00:10:40,250 --> 00:10:45,140
<font color="#CCCCCC">one content key for an S protection on</font>

230
00:10:42,200 --> 00:10:49,720
one content key for an S file protection

231
00:10:45,140 --> 00:10:53,380
complete and so on and<font color="#CCCCCC"> these</font><font color="#E5E5E5"> information</font>

232
00:10:49,720 --> 00:10:56,000
include encrypted file key and the class

233
00:10:53,380 --> 00:10:58,220
those are saved in so-called extended

234
00:10:56,000 --> 00:11:00,710
attributes extended attribute as a

235
00:10:58,220 --> 00:11:03,380
feature of HFS plus file system is

236
00:11:00,710 --> 00:11:05,790
basically file metadata so it gets

237
00:11:03,380 --> 00:11:08,520
stored to the 16th attribute

238
00:11:05,790 --> 00:11:10,199
and the file payload it gets encrypted

239
00:11:08,520 --> 00:11:15,870
with the random file key which was

240
00:11:10,200 --> 00:11:17,970
generated<font color="#CCCCCC"> earlier so this way system can</font>

241
00:11:15,870 --> 00:11:20,250
use<font color="#E5E5E5"> different content keys for different</font>

242
00:11:17,970 --> 00:11:23,760
files and application can specify which

243
00:11:20,250 --> 00:11:32,460
file encrypt with<font color="#E5E5E5"> which you know content</font>

244
00:11:23,760 --> 00:11:36,530
<font color="#E5E5E5">key for which protection class okay and</font>

245
00:11:32,460 --> 00:11:39,330
this<font color="#E5E5E5"> is how how system enforces that</font>

246
00:11:36,530 --> 00:11:44,130
without passcode you cannot actually

247
00:11:39,330 --> 00:11:46,080
decrypt the file so there<font color="#E5E5E5"> is a concept</font>

248
00:11:44,130 --> 00:11:47,820
of system key back system key back is

249
00:11:46,080 --> 00:11:51,810
essentially<font color="#CCCCCC"> just a collection of</font>

250
00:11:47,820 --> 00:11:53,610
encryption keys of content keys which is

251
00:11:51,810 --> 00:11:56,369
stored on the file system and they<font color="#CCCCCC"> are</font>

252
00:11:53,610 --> 00:11:59,880
<font color="#E5E5E5">stored in encrypted form so whenever you</font>

253
00:11:56,370 --> 00:12:04,440
want to when our system wants to decrypt

254
00:11:59,880 --> 00:12:07,380
the file it<font color="#E5E5E5"> follows this this process so</font>

255
00:12:04,440 --> 00:12:10,500
first the passcode key is computed and

256
00:12:07,380 --> 00:12:13,439
then like passcode<font color="#CCCCCC"> Keys computed from</font>

257
00:12:10,500 --> 00:12:18,750
the the passcode which specified by user

258
00:12:13,440 --> 00:12:20,970
and also there is so called key 835

259
00:12:18,750 --> 00:12:23,430
which is a device specifically so every

260
00:12:20,970 --> 00:12:25,800
device out there has different device

261
00:12:23,430 --> 00:12:29,489
key and those two<font color="#CCCCCC"> keys are used to</font>

262
00:12:25,800 --> 00:12:30,930
decrypt content keys okay so this is why

263
00:12:29,490 --> 00:12:32,340
without passcode you cannot actually

264
00:12:30,930 --> 00:12:35,120
decrypt the file because without

265
00:12:32,340 --> 00:12:37,590
passcode you will not be<font color="#E5E5E5"> able to compute</font>

266
00:12:35,120 --> 00:12:39,240
contents key which is<font color="#E5E5E5"> which corresponds</font>

267
00:12:37,590 --> 00:12:40,620
to<font color="#CCCCCC"> a particular production class and</font>

268
00:12:39,240 --> 00:12:43,530
without contents key you will<font color="#CCCCCC"> not be</font>

269
00:12:40,620 --> 00:12:45,840
able<font color="#E5E5E5"> to decrypt the file so it's not</font>

270
00:12:43,530 --> 00:12:48,329
just some artificial you know limitation

271
00:12:45,840 --> 00:12:57,780
it's<font color="#E5E5E5"> actually very a very sound</font>

272
00:12:48,330 --> 00:13:00,660
mathematical proof<font color="#E5E5E5"> okay next up</font><font color="#CCCCCC"> keychain</font>

273
00:12:57,780 --> 00:13:05,160
as I<font color="#CCCCCC"> mentioned keychain is a system-wide</font>

274
00:13:00,660 --> 00:13:08,130
storage which is<font color="#CCCCCC"> designed to store</font>

275
00:13:05,160 --> 00:13:10,050
secrets so files are designed to<font color="#E5E5E5"> store</font>

276
00:13:08,130 --> 00:13:12,240
your general data and keychain is a

277
00:13:10,050 --> 00:13:14,280
specialized database which is<font color="#CCCCCC"> designed</font>

278
00:13:12,240 --> 00:13:16,260
to store more sensitive pieces of data

279
00:13:14,280 --> 00:13:16,980
like passwords access tokens private

280
00:13:16,260 --> 00:13:20,910
keys

281
00:13:16,980 --> 00:13:22,620
and so on<font color="#CCCCCC"> key</font><font color="#E5E5E5"> Chang has been around for</font>

282
00:13:20,910 --> 00:13:25,469
a lot of since since the beginning of

283
00:13:22,620 --> 00:13:29,540
the iphones it's also present in or a

284
00:13:25,470 --> 00:13:33,000
stand on desktop<font color="#E5E5E5"> Mac books and stuff and</font>

285
00:13:29,540 --> 00:13:34,800
on iOS production classes<font color="#E5E5E5"> were keychain</font>

286
00:13:33,000 --> 00:13:38,190
they follow the similar pattern to file

287
00:13:34,800 --> 00:13:41,670
so we<font color="#E5E5E5"> have security attribute accessible</font>

288
00:13:38,190 --> 00:13:43,139
always which means that<font color="#E5E5E5"> you know the</font>

289
00:13:41,670 --> 00:13:44,760
item<font color="#E5E5E5"> is only encrypted with the device</font>

290
00:13:43,139 --> 00:13:47,519
specific key it<font color="#E5E5E5"> is not tie to the</font>

291
00:13:44,760 --> 00:13:50,699
passcode in any way and so it can be

292
00:13:47,519 --> 00:13:53,000
decrypted at any time it is still stored

293
00:13:50,699 --> 00:13:56,250
in an encrypted<font color="#E5E5E5"> form in the database but</font>

294
00:13:53,000 --> 00:13:58,829
basically it can be decrypted at any

295
00:13:56,250 --> 00:14:02,220
time<font color="#E5E5E5"> because keep chinking only depends</font>

296
00:13:58,829 --> 00:14:04,739
on the hardware security attribute

297
00:14:02,220 --> 00:14:07,709
accessible when unlocked is the same as

298
00:14:04,740 --> 00:14:10,320
<font color="#E5E5E5">you know well protection complete for</font>

299
00:14:07,709 --> 00:14:12,859
files this but items with this

300
00:14:10,320 --> 00:14:15,600
production class can only be decrypted

301
00:14:12,860 --> 00:14:19,680
when the device is unlocked when<font color="#E5E5E5"> the</font>

302
00:14:15,600 --> 00:14:22,069
pass code is entered<font color="#CCCCCC"> and accessible</font>

303
00:14:19,680 --> 00:14:25,979
after first unlock again<font color="#E5E5E5"> very similar to</font>

304
00:14:22,069 --> 00:14:27,479
<font color="#E5E5E5">what we had</font><font color="#CCCCCC"> for files once the device is</font>

305
00:14:25,980 --> 00:14:32,819
unlocked for the first time after boot

306
00:14:27,480 --> 00:14:34,920
this item<font color="#CCCCCC"> remains available encryption</font>

307
00:14:32,819 --> 00:14:37,319
again is<font color="#CCCCCC"> very similar to files so if you</font>

308
00:14:34,920 --> 00:14:40,050
look at<font color="#E5E5E5"> the the key chain keychain is</font><font color="#CCCCCC"> a</font>

309
00:14:37,319 --> 00:14:42,479
SQLite database and each record and this

310
00:14:40,050 --> 00:14:44,849
is collide database is encrypted like

311
00:14:42,480 --> 00:14:48,690
shown on<font color="#CCCCCC"> the slide</font><font color="#E5E5E5"> so we have payload</font>

312
00:14:44,850 --> 00:14:52,740
which is basically your password we have

313
00:14:48,690 --> 00:14:56,040
here and<font color="#CCCCCC"> the heater contains again</font>

314
00:14:52,740 --> 00:14:57,839
similarly to file encryption we have

315
00:14:56,040 --> 00:15:00,180
item key which is randomly generated

316
00:14:57,839 --> 00:15:01,529
item key is encrypted with<font color="#E5E5E5"> the with</font><font color="#CCCCCC"> the</font>

317
00:15:00,180 --> 00:15:06,329
content<font color="#E5E5E5"> key which depends on the</font>

318
00:15:01,529 --> 00:15:08,220
protection clause so encrypted item key

319
00:15:06,329 --> 00:15:10,439
along<font color="#E5E5E5"> with the</font><font color="#CCCCCC"> protection class</font>

320
00:15:08,220 --> 00:15:12,720
<font color="#E5E5E5">information is stored in the heater in</font>

321
00:15:10,440 --> 00:15:15,389
the SQLite database this is metadata and

322
00:15:12,720 --> 00:15:18,630
then your password<font color="#E5E5E5"> or your private key</font>

323
00:15:15,389 --> 00:15:21,360
or access token is encrypted with<font color="#CCCCCC"> the</font>

324
00:15:18,630 --> 00:15:26,459
item key and distort again in the same

325
00:15:21,360 --> 00:15:28,590
SQLite database so again it's relatively

326
00:15:26,459 --> 00:15:30,780
simple relatively straightforward and

327
00:15:28,590 --> 00:15:34,140
shows you that you know without the

328
00:15:30,780 --> 00:15:38,310
<font color="#E5E5E5">proper content key you cannot you cannot</font>

329
00:15:34,140 --> 00:15:40,830
decrypt the item<font color="#CCCCCC"> okay and this is how k</font>

330
00:15:38,310 --> 00:15:42,869
key derivation works so it is again very

331
00:15:40,830 --> 00:15:45,980
similar to<font color="#E5E5E5"> what we had for</font><font color="#CCCCCC"> four files</font>

332
00:15:42,870 --> 00:15:52,710
the the major difference is that here

333
00:15:45,980 --> 00:15:56,070
you can see that protection class<font color="#E5E5E5"> always</font>

334
00:15:52,710 --> 00:15:57,660
secur secur<font color="#CCCCCC"> security</font><font color="#E5E5E5"> attribute</font>

335
00:15:56,070 --> 00:16:00,060
accessible always which is the the

336
00:15:57,660 --> 00:16:02,430
<font color="#CCCCCC">bottom one it is not encrypted with the</font>

337
00:16:00,060 --> 00:16:04,229
with the<font color="#E5E5E5"> pass code key and this is why</font>

338
00:16:02,430 --> 00:16:06,089
it is available<font color="#E5E5E5"> at all times everything</font>

339
00:16:04,230 --> 00:16:09,570
else is encrypted with the with the

340
00:16:06,090 --> 00:16:11,520
passcode end with the device key and as

341
00:16:09,570 --> 00:16:16,680
such without passcode you cannot you

342
00:16:11,520 --> 00:16:19,880
cannot really decrypt this stuff but

343
00:16:16,680 --> 00:16:22,589
then for keychain we have additional

344
00:16:19,880 --> 00:16:25,650
protection classes they are the<font color="#E5E5E5"> same</font>

345
00:16:22,590 --> 00:16:27,870
with the like but we add the suffix<font color="#E5E5E5"> this</font>

346
00:16:25,650 --> 00:16:29,699
<font color="#E5E5E5">device only this is important in the</font>

347
00:16:27,870 --> 00:16:32,490
context of today's talk because this if

348
00:16:29,700 --> 00:16:34,590
you<font color="#E5E5E5"> use like for example security</font>

349
00:16:32,490 --> 00:16:37,710
attribute accessible always this<font color="#E5E5E5"> device</font>

350
00:16:34,590 --> 00:16:40,590
only this<font color="#E5E5E5"> way you can</font><font color="#CCCCCC"> ensure that this</font>

351
00:16:37,710 --> 00:16:43,140
particular<font color="#E5E5E5"> kitchen item will not will</font>

352
00:16:40,590 --> 00:16:44,940
not migrate to a different device there

353
00:16:43,140 --> 00:16:47,069
is a documented procedure how you can

354
00:16:44,940 --> 00:16:48,960
migrate keychain items to a different

355
00:16:47,070 --> 00:16:50,640
device you create an encrypted back up

356
00:16:48,960 --> 00:16:53,010
and you restore this back<font color="#CCCCCC"> up to a</font>

357
00:16:50,640 --> 00:16:54,960
different device sometimes for some

358
00:16:53,010 --> 00:16:57,140
applications you don't want this<font color="#CCCCCC"> to</font>

359
00:16:54,960 --> 00:16:59,280
happen you want for<font color="#CCCCCC"> example I</font><font color="#E5E5E5"> don't know</font>

360
00:16:57,140 --> 00:17:00,600
one time<font color="#E5E5E5"> password applications like</font>

361
00:16:59,280 --> 00:17:03,180
Google Authenticator or something like

362
00:17:00,600 --> 00:17:06,030
that<font color="#E5E5E5"> you don't want to be for user to be</font>

363
00:17:03,180 --> 00:17:08,909
able to clone those devices so one thing

364
00:17:06,030 --> 00:17:12,300
you<font color="#E5E5E5"> can do is use those protection</font>

365
00:17:08,910 --> 00:17:15,450
glasses and as I will<font color="#CCCCCC"> show later in this</font>

366
00:17:12,300 --> 00:17:17,310
case the new device to which you restore

367
00:17:15,450 --> 00:17:19,170
this back up with these kitchen items it

368
00:17:17,310 --> 00:17:23,669
will<font color="#E5E5E5"> not be able to decrypt those those</font>

369
00:17:19,170 --> 00:17:26,040
items again there is a very simple<font color="#E5E5E5"> and</font>

370
00:17:23,670 --> 00:17:28,380
sound cryptogram cryptography behind

371
00:17:26,040 --> 00:17:30,899
this and the spatial one additional

372
00:17:28,380 --> 00:17:34,650
special protection class that was added

373
00:17:30,900 --> 00:17:36,720
in iOS 8 is on the bottom<font color="#E5E5E5"> right it is</font>

374
00:17:34,650 --> 00:17:41,050
secured security<font color="#E5E5E5"> attribute accessible</font>

375
00:17:36,720 --> 00:17:45,170
when passcode set this device only and

376
00:17:41,050 --> 00:17:50,120
basically any item with this protection

377
00:17:45,170 --> 00:17:52,490
class will exist only if device has a

378
00:17:50,120 --> 00:17:56,179
passcode set so for some applications

379
00:17:52,490 --> 00:18:01,220
it's important to ensure<font color="#E5E5E5"> that user can</font>

380
00:17:56,180 --> 00:18:03,440
use<font color="#E5E5E5"> the the application only if device</font>

381
00:18:01,220 --> 00:18:06,560
is configured to have a passcode this is

382
00:18:03,440 --> 00:18:08,930
usually<font color="#E5E5E5"> enforced using various MDM</font>

383
00:18:06,560 --> 00:18:10,879
solutions but also it is useful<font color="#CCCCCC"> to have</font>

384
00:18:08,930 --> 00:18:13,760
the ability<font color="#CCCCCC"> to enforce this outside of</font>

385
00:18:10,880 --> 00:18:15,170
the context of mdms and this is this

386
00:18:13,760 --> 00:18:16,879
protection<font color="#E5E5E5"> class allows you to do this</font>

387
00:18:15,170 --> 00:18:21,380
so you can<font color="#CCCCCC"> actually create keychain</font>

388
00:18:16,880 --> 00:18:23,600
items that will exist only if<font color="#E5E5E5"> device is</font>

389
00:18:21,380 --> 00:18:26,540
password protected<font color="#E5E5E5"> and when user for</font>

390
00:18:23,600 --> 00:18:29,060
example rosettes results the the

391
00:18:26,540 --> 00:18:31,280
passcode or disables the passcode this

392
00:18:29,060 --> 00:18:35,450
item<font color="#CCCCCC"> will be</font><font color="#E5E5E5"> deleted and it will not be</font>

393
00:18:31,280 --> 00:18:37,310
accessible again so here's here's how

394
00:18:35,450 --> 00:18:39,970
those classes work this<font color="#E5E5E5"> is again very</font>

395
00:18:37,310 --> 00:18:44,540
similar<font color="#CCCCCC"> to</font><font color="#E5E5E5"> what we what we saw before</font>

396
00:18:39,970 --> 00:18:47,750
this device only it<font color="#E5E5E5"> doesn't matter for</font>

397
00:18:44,540 --> 00:18:49,970
you know for local keychain but it

398
00:18:47,750 --> 00:18:52,100
matters for<font color="#CCCCCC"> the keychain back up this is</font>

399
00:18:49,970 --> 00:18:54,770
the<font color="#CCCCCC"> difference between between this</font>

400
00:18:52,100 --> 00:18:57,169
device only and without these devices

401
00:18:54,770 --> 00:19:00,710
only items when you<font color="#E5E5E5"> create encrypted</font>

402
00:18:57,170 --> 00:19:03,890
backup so when you backup your device

403
00:19:00,710 --> 00:19:07,610
through itunes and your backup is

404
00:19:03,890 --> 00:19:10,220
encrypted this is what happens<font color="#E5E5E5"> all</font><font color="#CCCCCC"> the</font>

405
00:19:07,610 --> 00:19:14,540
keys from<font color="#CCCCCC"> the system</font><font color="#E5E5E5"> key back they got</font>

406
00:19:10,220 --> 00:19:18,380
you know re-encrypted to the backup<font color="#E5E5E5"> key</font>

407
00:19:14,540 --> 00:19:21,800
back and teaching items that have this

408
00:19:18,380 --> 00:19:25,490
<font color="#E5E5E5">device only suffix they are encrypted</font>

409
00:19:21,800 --> 00:19:27,740
using two keys the first key is the

410
00:19:25,490 --> 00:19:30,380
backup key which is<font color="#E5E5E5"> computed from your</font>

411
00:19:27,740 --> 00:19:35,470
backup password and the second key is

412
00:19:30,380 --> 00:19:38,570
the device specific key and this is why

413
00:19:35,470 --> 00:19:41,900
if you restore this back up<font color="#E5E5E5"> to another</font>

414
00:19:38,570 --> 00:19:43,760
device it will not be useful<font color="#E5E5E5"> it will be</font>

415
00:19:41,900 --> 00:19:46,490
<font color="#CCCCCC">actually useless and it will not decrypt</font>

416
00:19:43,760 --> 00:19:49,160
properly because another device does<font color="#CCCCCC"> not</font>

417
00:19:46,490 --> 00:19:50,210
know the device specific key of<font color="#CCCCCC"> the</font>

418
00:19:49,160 --> 00:19:54,050
original device so

419
00:19:50,210 --> 00:19:57,250
as as simple as that so if your

420
00:19:54,050 --> 00:20:00,050
application needs to<font color="#E5E5E5"> ensure that</font>

421
00:19:57,250 --> 00:20:02,000
<font color="#CCCCCC">keychain</font><font color="#E5E5E5"> items created on this device</font>

422
00:20:00,050 --> 00:20:05,570
will not migrate to another device

423
00:20:02,000 --> 00:20:07,610
please use this production classes but

424
00:20:05,570 --> 00:20:09,740
<font color="#E5E5E5">this is this is everything</font><font color="#CCCCCC"> you know you</font>

425
00:20:07,610 --> 00:20:13,639
probably if you do iOS work you probably

426
00:20:09,740 --> 00:20:16,040
<font color="#E5E5E5">know know this already</font><font color="#CCCCCC"> let's</font><font color="#E5E5E5"> talk about</font>

427
00:20:13,640 --> 00:20:19,490
relatively new stuff so two years<font color="#E5E5E5"> ago</font>

428
00:20:16,040 --> 00:20:21,379
<font color="#E5E5E5">and new iteration of data protection was</font>

429
00:20:19,490 --> 00:20:25,040
effectively presented which is you know

430
00:20:21,380 --> 00:20:28,550
iOS 7<font color="#CCCCCC"> and iphone 5s which is first</font>

431
00:20:25,040 --> 00:20:30,770
64-bit device very nice so what we have

432
00:20:28,550 --> 00:20:33,139
new we have secure and clave which is a

433
00:20:30,770 --> 00:20:35,600
very cool hardware which is built into

434
00:20:33,140 --> 00:20:38,320
into device and can be<font color="#CCCCCC"> used by</font>

435
00:20:35,600 --> 00:20:41,889
application<font color="#E5E5E5"> developers we have touch ID</font>

436
00:20:38,320 --> 00:20:46,490
we have keychain access control lists

437
00:20:41,890 --> 00:20:51,140
this is all relatively new and very

438
00:20:46,490 --> 00:20:52,850
useful let's see secure Enclave secure

439
00:20:51,140 --> 00:20:55,580
Enclave you can<font color="#E5E5E5"> think of it</font><font color="#CCCCCC"> as a</font>

440
00:20:52,850 --> 00:20:59,120
embedded core processor which is baked

441
00:20:55,580 --> 00:21:02,149
into the iOS device if he has its own

442
00:20:59,120 --> 00:21:06,500
operating system it has more than<font color="#E5E5E5"> that</font>

443
00:21:02,150 --> 00:21:10,910
it has its own secure boot chain and its

444
00:21:06,500 --> 00:21:13,550
own firmware it is available<font color="#E5E5E5"> for all</font>

445
00:21:10,910 --> 00:21:16,520
devices starting with a a<font color="#E5E5E5"> 7 processor</font>

446
00:21:13,550 --> 00:21:19,820
which is iphone<font color="#E5E5E5"> 5s</font><font color="#CCCCCC"> iPhone 6 6 plus 6s</font>

447
00:21:16,520 --> 00:21:22,580
and 6s plus and the iPads some of<font color="#E5E5E5"> them</font>

448
00:21:19,820 --> 00:21:24,830
like newer iPads and it's<font color="#CCCCCC"> responsible</font>

449
00:21:22,580 --> 00:21:28,639
for touch ID for passcode verification

450
00:21:24,830 --> 00:21:34,159
for decryption content keys and for

451
00:21:28,640 --> 00:21:36,560
keychain ACLs what is keychain ACL well

452
00:21:34,160 --> 00:21:38,390
keychain they say ACL is a relatively

453
00:21:36,560 --> 00:21:42,770
new<font color="#E5E5E5"> feature which is it was introduced</font><font color="#CCCCCC"> I</font>

454
00:21:38,390 --> 00:21:47,240
think in iOS 8 but it was considerably

455
00:21:42,770 --> 00:21:49,730
improved in iOS 9 so this is relatively

456
00:21:47,240 --> 00:21:51,650
new this is a feature which<font color="#CCCCCC"> allows your</font>

457
00:21:49,730 --> 00:21:55,910
application to specify access conditions

458
00:21:51,650 --> 00:21:58,400
for kitchen items so as of today<font color="#E5E5E5"> there</font>

459
00:21:55,910 --> 00:22:01,790
are four access conditions that<font color="#CCCCCC"> you can</font>

460
00:21:58,400 --> 00:22:03,800
specify so they are listed<font color="#E5E5E5"> in the first</font>

461
00:22:01,790 --> 00:22:07,250
part of this slide so this is<font color="#CCCCCC"> X</font>

462
00:22:03,800 --> 00:22:10,490
control user presence access control

463
00:22:07,250 --> 00:22:12,500
touch ID any access control touch<font color="#CCCCCC"> ad</font>

464
00:22:10,490 --> 00:22:19,010
current set and access control device

465
00:22:12,500 --> 00:22:22,400
<font color="#E5E5E5">passcode basically what those control</font>

466
00:22:19,010 --> 00:22:25,400
conditions say is that before<font color="#E5E5E5"> returning</font>

467
00:22:22,400 --> 00:22:29,300
keychain item to your application secure

468
00:22:25,400 --> 00:22:31,670
and clave must check that for<font color="#CCCCCC"> example</font>

469
00:22:29,300 --> 00:22:35,180
for control user presence secure Enclave

470
00:22:31,670 --> 00:22:37,790
must check that the user is<font color="#CCCCCC"> actually the</font>

471
00:22:35,180 --> 00:22:39,980
original user is the authorized user is

472
00:22:37,790 --> 00:22:42,560
<font color="#E5E5E5">interacting with the device secure</font>

473
00:22:39,980 --> 00:22:46,300
Enclave does this by requesting user to

474
00:22:42,560 --> 00:22:50,090
provide<font color="#E5E5E5"> to authenticate with with it</font>

475
00:22:46,300 --> 00:22:52,399
with a fingerprint scan right and if

476
00:22:50,090 --> 00:22:54,350
user fails to to do<font color="#E5E5E5"> this then secure</font>

477
00:22:52,400 --> 00:22:56,450
Enclave simply will not return the the

478
00:22:54,350 --> 00:22:58,879
kitchen<font color="#E5E5E5"> item so you can think is</font><font color="#CCCCCC"> this</font>

479
00:22:56,450 --> 00:23:01,310
think of this as a two-factor

480
00:22:58,880 --> 00:23:03,410
authentication for your keychain access

481
00:23:01,310 --> 00:23:04,909
so first factor is your application

482
00:23:03,410 --> 00:23:07,340
running on the device and the second

483
00:23:04,910 --> 00:23:10,760
<font color="#CCCCCC">factor is that actually the user who is</font>

484
00:23:07,340 --> 00:23:12,709
authorized to use this device that this

485
00:23:10,760 --> 00:23:14,240
user<font color="#E5E5E5"> is indeed who is using the device</font>

486
00:23:12,710 --> 00:23:16,000
so it's<font color="#E5E5E5"> not somebody you know somebody</font>

487
00:23:14,240 --> 00:23:18,530
took your<font color="#E5E5E5"> phone and started your</font>

488
00:23:16,000 --> 00:23:21,760
application and application then access

489
00:23:18,530 --> 00:23:24,500
<font color="#E5E5E5">the secrets now you specifically request</font>

490
00:23:21,760 --> 00:23:28,360
secure Enclave to verify that it is

491
00:23:24,500 --> 00:23:35,810
<font color="#CCCCCC">still the authorized user who does this</font>

492
00:23:28,360 --> 00:23:38,479
I'm sorry so this is user presence user

493
00:23:35,810 --> 00:23:41,179
presence is available on all devices it

494
00:23:38,480 --> 00:23:44,840
will default to touch ID but will fall

495
00:23:41,180 --> 00:23:46,310
<font color="#E5E5E5">back to device passcode this is not for</font>

496
00:23:44,840 --> 00:23:48,740
<font color="#E5E5E5">some application this is not sufficient</font>

497
00:23:46,310 --> 00:23:51,800
some applications need to you know have

498
00:23:48,740 --> 00:23:54,200
more granular control over the<font color="#CCCCCC"> ACLS so</font>

499
00:23:51,800 --> 00:23:56,720
Apple added new policies new ACL

500
00:23:54,200 --> 00:24:00,320
policies which is access control touch

501
00:23:56,720 --> 00:24:04,160
ID any which will prompt user for touch

502
00:24:00,320 --> 00:24:06,500
ID authentication touch ID current set

503
00:24:04,160 --> 00:24:09,020
is very<font color="#E5E5E5"> similar with the difference that</font>

504
00:24:06,500 --> 00:24:10,970
if somebody enrolls your finger somebody

505
00:24:09,020 --> 00:24:13,550
ads in your finger tell device then

506
00:24:10,970 --> 00:24:18,100
existing kitchen items will<font color="#CCCCCC"> be discarded</font>

507
00:24:13,550 --> 00:24:20,510
so this is protection from the scenario

508
00:24:18,100 --> 00:24:22,879
somebody configures the device the

509
00:24:20,510 --> 00:24:25,820
application with some secrets and then

510
00:24:22,880 --> 00:24:30,560
somebody<font color="#E5E5E5"> else adds his finger to this</font>

511
00:24:25,820 --> 00:24:33,020
device<font color="#E5E5E5"> and items with touch ID current</font>

512
00:24:30,560 --> 00:24:36,530
set will<font color="#CCCCCC"> be destroyed in this</font><font color="#E5E5E5"> case and</font>

513
00:24:33,020 --> 00:24:38,600
it will be necessary to recreate them<font color="#CCCCCC"> ok</font>

514
00:24:36,530 --> 00:24:40,460
and access control device passcode is

515
00:24:38,600 --> 00:24:41,990
you can guess is just you know requires

516
00:24:40,460 --> 00:24:46,700
secure Enclave to prompt for the

517
00:24:41,990 --> 00:24:48,950
passcode and it will release secret only

518
00:24:46,700 --> 00:24:52,790
<font color="#CCCCCC">if the</font><font color="#E5E5E5"> user knows the correct pass code</font>

519
00:24:48,950 --> 00:24:54,740
for this device another one which is

520
00:24:52,790 --> 00:24:58,909
<font color="#E5E5E5">slightly different domain but also</font>

521
00:24:54,740 --> 00:25:04,190
implemented as<font color="#CCCCCC"> a CL is a access control</font>

522
00:24:58,910 --> 00:25:06,020
application password it is it<font color="#E5E5E5"> basically</font>

523
00:25:04,190 --> 00:25:07,460
adds another authentication factor

524
00:25:06,020 --> 00:25:10,129
application can specify additional

525
00:25:07,460 --> 00:25:13,100
secret which is<font color="#E5E5E5"> required to decrypt the</font>

526
00:25:10,130 --> 00:25:17,600
kitchen item so this is<font color="#E5E5E5"> shown on this on</font>

527
00:25:13,100 --> 00:25:22,879
this diagram so basically everything

528
00:25:17,600 --> 00:25:24,310
works as before but application

529
00:25:22,880 --> 00:25:28,460
additionally needs to specify

530
00:25:24,310 --> 00:25:31,370
application password like it is no

531
00:25:28,460 --> 00:25:33,710
secret that is mixed to the<font color="#E5E5E5"> generation</font>

532
00:25:31,370 --> 00:25:37,310
of<font color="#E5E5E5"> the item key and without the site</font>

533
00:25:33,710 --> 00:25:39,620
without this application secret a person

534
00:25:37,310 --> 00:25:43,760
who<font color="#E5E5E5"> for example compromises the keychain</font>

535
00:25:39,620 --> 00:25:45,560
and everything else without<font color="#E5E5E5"> blood</font>

536
00:25:43,760 --> 00:25:47,720
compromising the application in its

537
00:25:45,560 --> 00:25:49,580
secret this<font color="#E5E5E5"> person will not be able to</font>

538
00:25:47,720 --> 00:25:52,820
decrypt this kitchen item this<font color="#E5E5E5"> is</font>

539
00:25:49,580 --> 00:25:58,399
designed<font color="#E5E5E5"> for a forum for scenarios for</font>

540
00:25:52,820 --> 00:26:00,980
example when server can control access

541
00:25:58,400 --> 00:26:02,540
to the kitchen<font color="#CCCCCC"> item so this application</font>

542
00:26:00,980 --> 00:26:04,970
secret for example this application

543
00:26:02,540 --> 00:26:09,170
password it can be sent to the

544
00:26:04,970 --> 00:26:11,690
application from the server right and if

545
00:26:09,170 --> 00:26:14,420
you want<font color="#E5E5E5"> to revoke particular user from</font>

546
00:26:11,690 --> 00:26:16,220
you know you know if you want<font color="#E5E5E5"> to stop</font>

547
00:26:14,420 --> 00:26:17,810
particular user from being<font color="#CCCCCC"> able to</font>

548
00:26:16,220 --> 00:26:20,600
<font color="#E5E5E5">access the secret which is stored on</font>

549
00:26:17,810 --> 00:26:23,389
their devices you just reconfigure your

550
00:26:20,600 --> 00:26:25,280
server side application to not return

551
00:26:23,390 --> 00:26:27,350
this application secret to this

552
00:26:25,280 --> 00:26:29,700
particular user so this has additional

553
00:26:27,350 --> 00:26:32,169
control additional layer of<font color="#E5E5E5"> control</font>

554
00:26:29,700 --> 00:26:35,050
for the locally stored data and<font color="#E5E5E5"> this is</font>

555
00:26:32,170 --> 00:26:37,690
important this is provides no defense in

556
00:26:35,050 --> 00:26:41,110
depth so of<font color="#CCCCCC"> course we assume this</font>

557
00:26:37,690 --> 00:26:43,360
keychain is secure but<font color="#E5E5E5"> what if what if</font>

558
00:26:41,110 --> 00:26:46,750
<font color="#CCCCCC">it's somehow compromised apple provides</font>

559
00:26:43,360 --> 00:26:48,699
an additional mechanism by which your

560
00:26:46,750 --> 00:26:50,970
application can add your application

561
00:26:48,700 --> 00:26:52,990
secret which application is responsible

562
00:26:50,970 --> 00:26:56,470
application is responsible for managing

563
00:26:52,990 --> 00:26:59,130
this application password obviously so

564
00:26:56,470 --> 00:27:02,530
and this<font color="#CCCCCC"> additional factor it kind of</font>

565
00:26:59,130 --> 00:27:04,780
provides additional layer of protection

566
00:27:02,530 --> 00:27:07,590
<font color="#E5E5E5">for the data that your application</font>

567
00:27:04,780 --> 00:27:10,870
stores<font color="#E5E5E5"> again this is</font><font color="#CCCCCC"> new this is iOS 9</font>

568
00:27:07,590 --> 00:27:12,879
this<font color="#E5E5E5"> is not</font><font color="#CCCCCC"> very well documented you</font>

569
00:27:10,870 --> 00:27:14,409
have to read you<font color="#E5E5E5"> know hero files this is</font>

570
00:27:12,880 --> 00:27:17,679
not documented in the documentation but

571
00:27:14,410 --> 00:27:19,540
this is you know<font color="#E5E5E5"> public</font><font color="#CCCCCC"> API s so if</font>

572
00:27:17,679 --> 00:27:23,260
you're developing<font color="#E5E5E5"> anything you know cool</font>

573
00:27:19,540 --> 00:27:25,300
you and you care about the<font color="#CCCCCC"> security and</font>

574
00:27:23,260 --> 00:27:29,230
privacy of your users data you should

575
00:27:25,300 --> 00:27:31,030
definitely look into this so bottom<font color="#CCCCCC"> line</font>

576
00:27:29,230 --> 00:27:34,210
of this first part of the talk is that

577
00:27:31,030 --> 00:27:39,580
iOS data protection provides reasonably

578
00:27:34,210 --> 00:27:41,920
good data address protection as long as

579
00:27:39,580 --> 00:27:45,909
we<font color="#CCCCCC"> talk</font><font color="#E5E5E5"> about protection of data on the</font>

580
00:27:41,920 --> 00:27:48,820
device but actually<font color="#E5E5E5"> the very bad thing</font>

581
00:27:45,910 --> 00:27:54,490
about about you<font color="#CCCCCC"> know data at rest is</font>

582
00:27:48,820 --> 00:27:56,678
that if application store<font color="#E5E5E5"> something on</font>

583
00:27:54,490 --> 00:27:59,140
the device then it is<font color="#E5E5E5"> almost certainly</font>

584
00:27:56,679 --> 00:28:01,450
that this data will cross the device

585
00:27:59,140 --> 00:28:03,460
boundary and we'll go to cloud will go

586
00:28:01,450 --> 00:28:06,760
to you know local backups<font color="#E5E5E5"> will go</font>

587
00:28:03,460 --> 00:28:09,520
<font color="#E5E5E5">somewhere else and this is something you</font>

588
00:28:06,760 --> 00:28:12,240
also should be aware of right<font color="#E5E5E5"> because I</font>

589
00:28:09,520 --> 00:28:14,590
mean we live in the<font color="#E5E5E5"> world where</font>

590
00:28:12,240 --> 00:28:16,540
everything is in the cloud everything is

591
00:28:14,590 --> 00:28:19,389
backed up to your local machine to the

592
00:28:16,540 --> 00:28:21,129
<font color="#E5E5E5">Dropbox to iCloud or whatever and if</font>

593
00:28:19,390 --> 00:28:22,929
your application stores something

594
00:28:21,130 --> 00:28:25,330
locally on the device you<font color="#CCCCCC"> should assume</font>

595
00:28:22,929 --> 00:28:28,030
that this something goes to to somewhere

596
00:28:25,330 --> 00:28:31,090
else<font color="#E5E5E5"> as part of you know backup and</font>

597
00:28:28,030 --> 00:28:38,020
stuff for example this is<font color="#E5E5E5"> how I cloud</font>

598
00:28:31,090 --> 00:28:41,470
backup works the your device iPhone iPad

599
00:28:38,020 --> 00:28:43,510
whatever it first establishes encryption

600
00:28:41,470 --> 00:28:47,020
keys with<font color="#CCCCCC"> Apple server</font>

601
00:28:43,510 --> 00:28:49,090
then it<font color="#E5E5E5"> gripped data and sends it to to</font>

602
00:28:47,020 --> 00:28:52,620
the storage services interestingly

603
00:28:49,090 --> 00:28:55,449
enough for<font color="#CCCCCC"> iCloud backups</font><font color="#E5E5E5"> Apple uses</font>

604
00:28:52,620 --> 00:28:58,030
<font color="#E5E5E5">third-party storage like Amazon</font><font color="#CCCCCC"> Windows</font>

605
00:28:55,450 --> 00:29:00,480
<font color="#CCCCCC">Azure and china telecom based on</font>

606
00:28:58,030 --> 00:29:03,520
geographical locations of course and

607
00:29:00,480 --> 00:29:07,620
actual data is stored on those storage

608
00:29:03,520 --> 00:29:11,320
providers but Apple Apple holds the key

609
00:29:07,620 --> 00:29:13,570
for these data so what<font color="#E5E5E5"> can you tell from</font>

610
00:29:11,320 --> 00:29:15,399
this picture well i can<font color="#CCCCCC"> tell that user</font>

611
00:29:13,570 --> 00:29:17,620
is not in control of the data anymore

612
00:29:15,400 --> 00:29:20,500
because user does not<font color="#E5E5E5"> hold any</font>

613
00:29:17,620 --> 00:29:22,750
encryption keys for the data it<font color="#CCCCCC"> is Apple</font>

614
00:29:20,500 --> 00:29:26,190
who holds the key in this scenario and

615
00:29:22,750 --> 00:29:29,650
his<font color="#E5E5E5"> Apple has full control of this data</font>

616
00:29:26,190 --> 00:29:31,750
user does not have any any control we

617
00:29:29,650 --> 00:29:33,670
<font color="#CCCCCC">can only trust Apple that you know they</font>

618
00:29:31,750 --> 00:29:36,160
will delete<font color="#CCCCCC"> it when we delete the echo</font>

619
00:29:33,670 --> 00:29:41,560
iCloud backup and stuff but we have no

620
00:29:36,160 --> 00:29:43,840
<font color="#E5E5E5">way to enforce this what online</font><font color="#CCCCCC"> once</font>

621
00:29:41,560 --> 00:29:45,909
data has left the device user has no

622
00:29:43,840 --> 00:29:48,459
control over it<font color="#E5E5E5"> so it's important to</font>

623
00:29:45,910 --> 00:29:51,880
<font color="#E5E5E5">make sure that we limit the exposure of</font>

624
00:29:48,460 --> 00:29:56,110
the<font color="#E5E5E5"> data so again iOS provides number of</font>

625
00:29:51,880 --> 00:29:58,300
a number<font color="#CCCCCC"> of</font><font color="#E5E5E5"> features through which you</font>

626
00:29:56,110 --> 00:30:02,649
can limit<font color="#CCCCCC"> the exposure of the</font><font color="#E5E5E5"> data for</font>

627
00:29:58,300 --> 00:30:05,860
example for backups for backups it

628
00:30:02,650 --> 00:30:08,560
depends where you store the data because

629
00:30:05,860 --> 00:30:10,750
some locations are backed up by default

630
00:30:08,560 --> 00:30:13,960
some are not so for example the document

631
00:30:10,750 --> 00:30:17,680
subfolder is backed up and the library

632
00:30:13,960 --> 00:30:19,930
<font color="#E5E5E5">caches is not so think carefully about</font>

633
00:30:17,680 --> 00:30:23,200
where you store your applications data

634
00:30:19,930 --> 00:30:25,630
locally also there is a option to

635
00:30:23,200 --> 00:30:28,900
exclude particular file or directory

636
00:30:25,630 --> 00:30:30,910
from backup you just use this key and

637
00:30:28,900 --> 00:30:33,280
set<font color="#CCCCCC"> it for a particular file and it will</font>

638
00:30:30,910 --> 00:30:36,010
not be included in the back up so again

639
00:30:33,280 --> 00:30:37,780
it is important to use this<font color="#CCCCCC"> to</font>

640
00:30:36,010 --> 00:30:39,790
understand that you have the ability<font color="#CCCCCC"> to</font>

641
00:30:37,780 --> 00:30:42,070
use this it's also important<font color="#E5E5E5"> to</font>

642
00:30:39,790 --> 00:30:43,810
understand the implications for keychain

643
00:30:42,070 --> 00:30:47,350
items the the stuff that I have<font color="#E5E5E5"> been</font>

644
00:30:43,810 --> 00:30:50,320
trying<font color="#E5E5E5"> to explain before so without</font>

645
00:30:47,350 --> 00:30:52,959
these devices on the suffix it is

646
00:30:50,320 --> 00:30:55,270
possible<font color="#CCCCCC"> for</font><font color="#E5E5E5"> you keychain items stored</font>

647
00:30:52,960 --> 00:30:58,450
by your application to<font color="#E5E5E5"> be extracted</font>

648
00:30:55,270 --> 00:31:00,520
through the encrypted backup so person

649
00:30:58,450 --> 00:31:02,260
can do this this<font color="#CCCCCC"> is documented</font><font color="#E5E5E5"> behavior</font>

650
00:31:00,520 --> 00:31:06,040
and there are tools out there that allow

651
00:31:02,260 --> 00:31:09,280
you to extract passwords a keychain item

652
00:31:06,040 --> 00:31:13,899
story from encrypted backups unless you

653
00:31:09,280 --> 00:31:16,770
specify<font color="#E5E5E5"> this this suffix so again this</font>

654
00:31:13,900 --> 00:31:20,010
is something<font color="#E5E5E5"> you should understand</font>

655
00:31:16,770 --> 00:31:22,360
another another way in which the

656
00:31:20,010 --> 00:31:25,030
application data can be read is<font color="#E5E5E5"> so</font>

657
00:31:22,360 --> 00:31:29,919
<font color="#E5E5E5">called file sharing so we have some good</font>

658
00:31:25,030 --> 00:31:32,620
news here because before iOS 8.3 file

659
00:31:29,920 --> 00:31:34,750
sharing was essentially enabled for all

660
00:31:32,620 --> 00:31:37,600
applications from the<font color="#E5E5E5"> device with</font>

661
00:31:34,750 --> 00:31:40,270
release of iOS 8.3 a couple of months

662
00:31:37,600 --> 00:31:43,030
<font color="#CCCCCC">ago well actually about a half a year</font>

663
00:31:40,270 --> 00:31:45,129
ago Apple<font color="#E5E5E5"> made very silent I don't think</font>

664
00:31:43,030 --> 00:31:49,149
they have advertised this but they made

665
00:31:45,130 --> 00:31:53,290
very silent and very brutal fix they

666
00:31:49,150 --> 00:31:55,600
disabled<font color="#CCCCCC"> file sharing by default for all</font>

667
00:31:53,290 --> 00:31:58,330
application unless the application

668
00:31:55,600 --> 00:32:00,129
specifically request this feature so

669
00:31:58,330 --> 00:32:03,370
unless<font color="#CCCCCC"> you have a business</font><font color="#E5E5E5"> need to do</font>

670
00:32:00,130 --> 00:32:08,050
this don't do this because<font color="#CCCCCC"> file sharing</font>

671
00:32:03,370 --> 00:32:10,270
essentially provides access to send box

672
00:32:08,050 --> 00:32:13,330
of the application<font color="#E5E5E5"> even to the files</font>

673
00:32:10,270 --> 00:32:17,110
which are not backed up by default so

674
00:32:13,330 --> 00:32:18,909
basically to all all the data of your

675
00:32:17,110 --> 00:32:21,490
<font color="#E5E5E5">application including temporary files</font>

676
00:32:18,910 --> 00:32:25,450
including library caches and cookies and

677
00:32:21,490 --> 00:32:32,520
stuff so handle with care this<font color="#CCCCCC"> is toxic</font>

678
00:32:25,450 --> 00:32:35,500
stuff and the last way to combat this

679
00:32:32,520 --> 00:32:37,930
situation where you don't have<font color="#CCCCCC"> control</font>

680
00:32:35,500 --> 00:32:39,550
over data once it leaves the device is

681
00:32:37,930 --> 00:32:41,920
of course<font color="#E5E5E5"> to use application level</font>

682
00:32:39,550 --> 00:32:44,080
encryption this is very similar in

683
00:32:41,920 --> 00:32:46,780
concept to the application password that

684
00:32:44,080 --> 00:32:50,409
we have we now<font color="#E5E5E5"> have for the for the</font>

685
00:32:46,780 --> 00:32:53,260
keychain but these ideas applied to

686
00:32:50,410 --> 00:32:55,300
files unfortunately this is not built

687
00:32:53,260 --> 00:32:59,080
into iOS it's something<font color="#CCCCCC"> that you</font><font color="#E5E5E5"> need to</font>

688
00:32:55,300 --> 00:33:01,870
implement on your own the basic<font color="#E5E5E5"> idea is</font>

689
00:32:59,080 --> 00:33:04,419
that well your application includes data

690
00:33:01,870 --> 00:33:06,939
before writing<font color="#CCCCCC"> to files even</font><font color="#E5E5E5"> though you</font>

691
00:33:04,420 --> 00:33:08,050
know that files are encrypted by<font color="#E5E5E5"> iOS</font>

692
00:33:06,940 --> 00:33:14,350
still apply additional layer of

693
00:33:08,050 --> 00:33:15,879
protection on top of that so the

694
00:33:14,350 --> 00:33:17,199
downside is that application is

695
00:33:15,880 --> 00:33:18,970
responsible for encryption key

696
00:33:17,200 --> 00:33:20,460
management and you know all<font color="#E5E5E5"> this stuff</font>

697
00:33:18,970 --> 00:33:22,870
<font color="#E5E5E5">and it's difficult to get</font><font color="#CCCCCC"> this right</font>

698
00:33:20,460 --> 00:33:24,310
it's difficult<font color="#E5E5E5"> to</font><font color="#CCCCCC"> get crypto right it's</font>

699
00:33:22,870 --> 00:33:26,830
difficult<font color="#CCCCCC"> to get key management right</font>

700
00:33:24,310 --> 00:33:28,629
it's you know it's it's hard the good

701
00:33:26,830 --> 00:33:31,090
news is<font color="#CCCCCC"> that there</font><font color="#E5E5E5"> are a number of open</font>

702
00:33:28,630 --> 00:33:33,130
source and paid projects that kind<font color="#E5E5E5"> of</font>

703
00:33:31,090 --> 00:33:36,220
implement this for you so<font color="#CCCCCC"> for example</font>

704
00:33:33,130 --> 00:33:40,450
SQL<font color="#CCCCCC"> cipher is a very good</font><font color="#E5E5E5"> thing it's</font>

705
00:33:36,220 --> 00:33:42,610
basically SQL Lite with encryption

706
00:33:40,450 --> 00:33:44,860
capabilities it's open source you can

707
00:33:42,610 --> 00:33:49,330
<font color="#E5E5E5">use it you basically if you use SQLite</font>

708
00:33:44,860 --> 00:33:52,899
then you don't<font color="#E5E5E5"> need to remodel your</font>

709
00:33:49,330 --> 00:33:55,810
storage model<font color="#E5E5E5"> your you know everything</font>

710
00:33:52,900 --> 00:33:59,080
works is this you<font color="#E5E5E5"> just add additional</font>

711
00:33:55,810 --> 00:34:00,820
function call to set the key so and the

712
00:33:59,080 --> 00:34:02,169
pattern that I propose to use is that

713
00:34:00,820 --> 00:34:04,149
<font color="#E5E5E5">your application generates random</font>

714
00:34:02,170 --> 00:34:07,840
password it stores it in the keychain

715
00:34:04,150 --> 00:34:10,540
and then you know you use this random

716
00:34:07,840 --> 00:34:13,989
passwords to provide additional

717
00:34:10,540 --> 00:34:16,029
encryption for her files there is a

718
00:34:13,989 --> 00:34:19,089
encrypted core data project that bills

719
00:34:16,030 --> 00:34:22,120
and on top of SQL cipher for and tries

720
00:34:19,090 --> 00:34:24,880
<font color="#CCCCCC">to provide the core data stack we had a</font>

721
00:34:22,120 --> 00:34:26,639
limited success with it so it works

722
00:34:24,880 --> 00:34:29,320
there are some downsides but you know

723
00:34:26,639 --> 00:34:31,540
consider it and<font color="#CCCCCC"> there's</font><font color="#E5E5E5"> of course</font><font color="#CCCCCC"> a</font>

724
00:34:29,320 --> 00:34:34,690
scroll s collide<font color="#E5E5E5"> encryption extensions</font>

725
00:34:31,540 --> 00:34:36,730
which is the similar<font color="#CCCCCC"> in concept to SQL</font>

726
00:34:34,690 --> 00:34:39,210
cipher but from the authors of<font color="#E5E5E5"> ASCO</font>

727
00:34:36,730 --> 00:34:45,040
light itself and unfortunately it costs

728
00:34:39,210 --> 00:34:47,440
it's not free<font color="#CCCCCC"> alright even though those</font>

729
00:34:45,040 --> 00:34:50,409
open source project I would like<font color="#CCCCCC"> to</font>

730
00:34:47,440 --> 00:34:52,420
stress that<font color="#CCCCCC"> you know application still</font>

731
00:34:50,409 --> 00:34:54,730
is responsible for key management and

732
00:34:52,420 --> 00:34:57,790
there is still room for error so please

733
00:34:54,730 --> 00:35:00,150
handle with care this is really i mean

734
00:34:57,790 --> 00:35:03,160
if if you decide to go down this path

735
00:35:00,150 --> 00:35:04,810
you probably<font color="#E5E5E5"> should get it right so</font>

736
00:35:03,160 --> 00:35:07,060
please spend you know some time

737
00:35:04,810 --> 00:35:09,940
reviewing and designing this key

738
00:35:07,060 --> 00:35:12,420
management stuff because it will<font color="#E5E5E5"> be very</font>

739
00:35:09,940 --> 00:35:14,200
embarrassing if you spend a lot of time

740
00:35:12,420 --> 00:35:15,670
implementing application layer

741
00:35:14,200 --> 00:35:17,450
encryption and then you do make some

742
00:35:15,670 --> 00:35:22,820
kind of<font color="#CCCCCC"> you know</font><font color="#E5E5E5"> stupid mistake</font>

743
00:35:17,450 --> 00:35:26,000
it's<font color="#CCCCCC"> bummer not nice that's all for data</font>

744
00:35:22,820 --> 00:35:28,130
storage let's move to data to like

745
00:35:26,000 --> 00:35:31,369
transmission because<font color="#CCCCCC"> most applications</font>

746
00:35:28,130 --> 00:35:33,380
today that they not<font color="#CCCCCC"> only need to store</font>

747
00:35:31,369 --> 00:35:35,960
data they also need to<font color="#E5E5E5"> communicate with</font>

748
00:35:33,380 --> 00:35:38,510
some kind of back-end services with your

749
00:35:35,960 --> 00:35:40,490
back-end services with somebody else's

750
00:35:38,510 --> 00:35:41,960
back-end services but you know it's a

751
00:35:40,490 --> 00:35:43,669
cloud world so everything is

752
00:35:41,960 --> 00:35:47,780
interconnected everything wants to talk

753
00:35:43,670 --> 00:35:49,640
to everything everything else if you

754
00:35:47,780 --> 00:35:52,490
have been in<font color="#CCCCCC"> the industry along you know</font>

755
00:35:49,640 --> 00:35:54,740
any non-trivial time you probably<font color="#E5E5E5"> heard</font>

756
00:35:52,490 --> 00:35:58,910
the words transport layer security which

757
00:35:54,740 --> 00:36:02,118
is TLS which is a the you know what

758
00:35:58,910 --> 00:36:04,129
<font color="#E5E5E5">became of SSL before so SSL is not that</font>

759
00:36:02,119 --> 00:36:08,450
does not exist anymore<font color="#CCCCCC"> so it's basically</font>

760
00:36:04,130 --> 00:36:09,950
dead<font color="#E5E5E5"> it's duplicated so now the same</font>

761
00:36:08,450 --> 00:36:15,500
stuff is called transport layer security

762
00:36:09,950 --> 00:36:18,049
TLS and TLS is for tcp and<font color="#CCCCCC"> dtls for UDP</font>

763
00:36:15,500 --> 00:36:20,750
those are two industry standards for

764
00:36:18,050 --> 00:36:23,089
securing data in transit so this sounds

765
00:36:20,750 --> 00:36:25,160
<font color="#E5E5E5">like a good news like you know great it</font>

766
00:36:23,089 --> 00:36:28,160
works we have a standard so let's<font color="#E5E5E5"> just</font>

767
00:36:25,160 --> 00:36:31,339
use it well not so fast there<font color="#E5E5E5"> are two</font>

768
00:36:28,160 --> 00:36:37,520
problems which are fundamental actually

769
00:36:31,339 --> 00:36:40,250
do this<font color="#CCCCCC"> okay to this radical first one</font>

770
00:36:37,520 --> 00:36:44,720
TLS and the TLS they both depend on

771
00:36:40,250 --> 00:36:46,940
certificates in problem number two both

772
00:36:44,720 --> 00:36:52,660
of those like fairly difficult to get

773
00:36:46,940 --> 00:36:52,660
right certificates is a major problem

774
00:36:53,170 --> 00:36:57,530
the way certificate system akka system

775
00:36:55,730 --> 00:37:00,230
work is<font color="#CCCCCC"> that you have number of</font>

776
00:36:57,530 --> 00:37:03,530
certificates trusted certificates in in

777
00:37:00,230 --> 00:37:05,390
I in operating system and certificate

778
00:37:03,530 --> 00:37:08,420
for a given server for a given website

779
00:37:05,390 --> 00:37:10,819
or whatever it is deemed trusted if it's

780
00:37:08,420 --> 00:37:13,490
just anchor you know is one of those

781
00:37:10,819 --> 00:37:17,660
trusted certificates the problem is for

782
00:37:13,490 --> 00:37:20,540
example iOS 9 contains 187 trusted

783
00:37:17,660 --> 00:37:23,029
certificates and you have no<font color="#E5E5E5"> control</font>

784
00:37:20,540 --> 00:37:26,450
<font color="#CCCCCC">over which</font><font color="#E5E5E5"> you would like to trust in</font>

785
00:37:23,030 --> 00:37:28,430
which you would would not like to trust

786
00:37:26,450 --> 00:37:29,779
and there are all sorts of certificates

787
00:37:28,430 --> 00:37:31,660
there so there<font color="#E5E5E5"> are certificates from</font>

788
00:37:29,780 --> 00:37:35,030
governance like Department of Defense

789
00:37:31,660 --> 00:37:38,480
<font color="#E5E5E5">Netherlands Belgium telecom providers</font>

790
00:37:35,030 --> 00:37:42,920
like Deutsche<font color="#E5E5E5"> Telekom and hardware</font>

791
00:37:38,480 --> 00:37:44,780
manufacturers like Cisco you know it may

792
00:37:42,920 --> 00:37:46,430
be all i know it depends<font color="#E5E5E5"> on your</font>

793
00:37:44,780 --> 00:37:49,640
application sometimes it's okay to trust

794
00:37:46,430 --> 00:37:52,310
all these guys sometimes it's not right

795
00:37:49,640 --> 00:37:57,319
but<font color="#CCCCCC"> unfortunately there is no effective</font>

796
00:37:52,310 --> 00:37:59,119
way to control this trust for example

797
00:37:57,320 --> 00:38:04,190
this<font color="#CCCCCC"> is one of the certificates which is</font>

798
00:37:59,119 --> 00:38:07,640
trusted by iOS 9 and it uses md5 for

799
00:38:04,190 --> 00:38:09,290
your signature md5 has been dead for I

800
00:38:07,640 --> 00:38:14,180
<font color="#CCCCCC">don't know</font><font color="#E5E5E5"> 10 years something</font><font color="#CCCCCC"> like that</font>

801
00:38:09,290 --> 00:38:16,339
<font color="#CCCCCC">I know that that hash algorithm on the</font>

802
00:38:14,180 --> 00:38:18,560
root certificate does not you know does

803
00:38:16,339 --> 00:38:22,450
not mean that it<font color="#E5E5E5"> is broken but you know</font>

804
00:38:18,560 --> 00:38:26,000
it is 2015 and this wonderful

805
00:38:22,450 --> 00:38:28,040
certification Authority things it<font color="#E5E5E5"> is ok</font>

806
00:38:26,000 --> 00:38:31,130
to have certificate which<font color="#CCCCCC"> is you know</font>

807
00:38:28,040 --> 00:38:33,560
<font color="#CCCCCC">sign</font><font color="#E5E5E5"> with RSA md5 I think this is</font>

808
00:38:31,130 --> 00:38:37,310
<font color="#E5E5E5">something that you know a little bit</font>

809
00:38:33,560 --> 00:38:40,150
questionable this is another example of

810
00:38:37,310 --> 00:38:42,319
certificate from iOS 9<font color="#E5E5E5"> trust or</font>

811
00:38:40,150 --> 00:38:46,490
fortunately<font color="#E5E5E5"> enough this is one of these</font>

812
00:38:42,319 --> 00:38:48,140
<font color="#E5E5E5">always ask certificates so if system</font>

813
00:38:46,490 --> 00:38:52,009
<font color="#E5E5E5">will encounter this certificate it will</font>

814
00:38:48,140 --> 00:38:54,710
ask user if if the<font color="#E5E5E5"> system should trust</font>

815
00:38:52,010 --> 00:38:56,780
it but we all<font color="#E5E5E5"> know how how user react to</font>

816
00:38:54,710 --> 00:38:58,730
these questions right so they want<font color="#E5E5E5"> to</font>

817
00:38:56,780 --> 00:39:02,329
accept access something<font color="#E5E5E5"> so they will of</font>

818
00:38:58,730 --> 00:39:06,710
course in most<font color="#E5E5E5"> cases except the warning</font>

819
00:39:02,329 --> 00:39:09,099
and it uses eres a 1024 bits which is

820
00:39:06,710 --> 00:39:12,440
you know for a<font color="#E5E5E5"> long time is considered</font>

821
00:39:09,099 --> 00:39:13,940
insufficient common technique to

822
00:39:12,440 --> 00:39:15,680
overcome these trust issues is

823
00:39:13,940 --> 00:39:17,569
certificate pinning and I'm running<font color="#CCCCCC"> out</font>

824
00:39:15,680 --> 00:39:19,970
of time so i will go really really quick

825
00:39:17,569 --> 00:39:21,980
so certificate pinning basically allows

826
00:39:19,970 --> 00:39:24,859
you to restrict trust anchors you can

827
00:39:21,980 --> 00:39:28,069
specify you know that you your

828
00:39:24,859 --> 00:39:29,810
application wants to accept the trust

829
00:39:28,069 --> 00:39:32,119
only<font color="#E5E5E5"> from this certification</font><font color="#CCCCCC"> authority</font>

830
00:39:29,810 --> 00:39:35,420
or only from this particular certificate

831
00:39:32,119 --> 00:39:36,369
and it will fail for you know if your

832
00:39:35,420 --> 00:39:40,720
server presents

833
00:39:36,369 --> 00:39:44,109
else of course there are problems<font color="#E5E5E5"> with</font>

834
00:39:40,720 --> 00:39:46,240
this so it<font color="#E5E5E5"> is harder</font><font color="#CCCCCC"> to manage</font><font color="#E5E5E5"> because</font>

835
00:39:44,109 --> 00:39:48,940
you need<font color="#E5E5E5"> to keep certificate pins up to</font>

836
00:39:46,240 --> 00:39:50,618
date and if you rotate<font color="#CCCCCC"> your server</font>

837
00:39:48,940 --> 00:39:52,630
certificate but forget<font color="#CCCCCC"> to update your</font>

838
00:39:50,619 --> 00:39:55,150
<font color="#CCCCCC">PIN and the application then you create</font>

839
00:39:52,630 --> 00:39:56,499
it cell phone clip self-inflicted<font color="#E5E5E5"> denial</font>

840
00:39:55,150 --> 00:39:57,999
of service because your application can

841
00:39:56,499 --> 00:40:00,009
no longer access your own service

842
00:39:57,999 --> 00:40:02,529
because<font color="#CCCCCC"> you forget to bathe pins which</font>

843
00:40:00,009 --> 00:40:05,559
is kind<font color="#E5E5E5"> of bad you probably</font><font color="#CCCCCC"> don't want</font>

844
00:40:02,529 --> 00:40:07,299
<font color="#E5E5E5">it as an example</font><font color="#CCCCCC"> Apple use the</font>

845
00:40:05,559 --> 00:40:10,599
<font color="#E5E5E5">certificate pinning for app store and</font>

846
00:40:07,299 --> 00:40:12,549
itunes store but doesn't use it for

847
00:40:10,599 --> 00:40:17,380
<font color="#E5E5E5">example iCloud backups and other cloud</font>

848
00:40:12,549 --> 00:40:19,150
services<font color="#CCCCCC"> okay again this is error prone</font>

849
00:40:17,380 --> 00:40:21,460
not<font color="#E5E5E5"> only because of the denial of</font>

850
00:40:19,150 --> 00:40:24,160
service but because and I have seen this

851
00:40:21,460 --> 00:40:25,509
personally more<font color="#E5E5E5"> than once when you</font>

852
00:40:24,160 --> 00:40:29,190
implement certificate pinning you

853
00:40:25,509 --> 00:40:32,319
override certain certain parts of the

854
00:40:29,190 --> 00:40:36,279
<font color="#E5E5E5">certificate trust and this very easy to</font>

855
00:40:32,319 --> 00:40:37,749
mess things up and<font color="#E5E5E5"> to enable trust where</font>

856
00:40:36,279 --> 00:40:42,249
it shouldn't be<font color="#E5E5E5"> so basically what I've</font>

857
00:40:37,749 --> 00:40:43,480
seen in the<font color="#E5E5E5"> past is that people were</font>

858
00:40:42,249 --> 00:40:45,999
trying<font color="#E5E5E5"> to implement certificate pinning</font>

859
00:40:43,480 --> 00:40:48,069
but instead the implemented in such a

860
00:40:45,999 --> 00:40:49,899
way that application will trust

861
00:40:48,069 --> 00:40:52,269
everything including invalid

862
00:40:49,900 --> 00:40:54,220
certificates and this is like if you

863
00:40:52,269 --> 00:40:58,649
look at<font color="#E5E5E5"> the code it kind of looks</font><font color="#CCCCCC"> at it</font>

864
00:40:54,220 --> 00:41:01,689
kind of makes sense but there<font color="#E5E5E5"> are some</font>

865
00:40:58,650 --> 00:41:04,900
little details that you need to<font color="#CCCCCC"> get</font>

866
00:41:01,690 --> 00:41:07,109
right for<font color="#CCCCCC"> this to actually work also</font>

867
00:41:04,900 --> 00:41:10,720
there was a public afnetworking bug

868
00:41:07,109 --> 00:41:14,890
again about six months ago where the

869
00:41:10,720 --> 00:41:17,950
code was basically<font color="#E5E5E5"> I mean there was a</font>

870
00:41:14,890 --> 00:41:20,230
logical condition logical problem in the

871
00:41:17,950 --> 00:41:23,950
code<font color="#CCCCCC"> that implemented certificate</font>

872
00:41:20,230 --> 00:41:25,660
pinning<font color="#E5E5E5"> and that resulted in in a</font>

873
00:41:23,950 --> 00:41:28,960
certificate validate validation bypass

874
00:41:25,660 --> 00:41:31,690
effectively the last link here trust get

875
00:41:28,960 --> 00:41:34,200
is an relatively new open source project

876
00:41:31,690 --> 00:41:37,599
that you can use in<font color="#E5E5E5"> your application to</font>

877
00:41:34,200 --> 00:41:39,879
enforce to enable certificate pinning it

878
00:41:37,599 --> 00:41:42,849
is very nice so check it out if you want

879
00:41:39,880 --> 00:41:46,119
<font color="#E5E5E5">if you consider implementing this is it</font>

880
00:41:42,849 --> 00:41:48,880
will save you a lot of time that you

881
00:41:46,119 --> 00:41:49,900
that<font color="#E5E5E5"> you</font><font color="#CCCCCC"> would</font><font color="#E5E5E5"> otherwise spend figure</font>

882
00:41:48,880 --> 00:41:52,000
<font color="#E5E5E5">trying to figure out in</font>

883
00:41:49,900 --> 00:41:53,620
all on your own certificate just<font color="#E5E5E5"> is not</font>

884
00:41:52,000 --> 00:41:56,920
the only<font color="#CCCCCC"> problem unfortunately we have</font>

885
00:41:53,620 --> 00:41:59,319
also cases of weak cryptography all over

886
00:41:56,920 --> 00:42:02,080
the place it starts starts with

887
00:41:59,320 --> 00:42:04,390
certificate signatures<font color="#CCCCCC"> so everything</font>

888
00:42:02,080 --> 00:42:07,630
with the<font color="#E5E5E5"> error say signatures lower than</font>

889
00:42:04,390 --> 00:42:10,450
<font color="#CCCCCC">two kilobases</font><font color="#E5E5E5"> considered is insecure if</font>

890
00:42:07,630 --> 00:42:12,370
certificate is signed using the md5 hash

891
00:42:10,450 --> 00:42:14,669
function it's also<font color="#E5E5E5"> considered insecure</font>

892
00:42:12,370 --> 00:42:17,770
and relatively recent we had new

893
00:42:14,670 --> 00:42:20,620
cryptographic results for shawan which

894
00:42:17,770 --> 00:42:23,230
hints<font color="#E5E5E5"> that within the</font><font color="#CCCCCC"> next few months we</font>

895
00:42:20,620 --> 00:42:26,109
probably will consider those also

896
00:42:23,230 --> 00:42:29,560
<font color="#E5E5E5">insecure all versions of SSL our</font>

897
00:42:26,110 --> 00:42:32,410
insecurities<font color="#E5E5E5"> ls1 is also insecure and</font>

898
00:42:29,560 --> 00:42:35,560
then we have you know<font color="#CCCCCC"> all lots of lots</font>

899
00:42:32,410 --> 00:42:38,520
of confirm weirdness in this I pursuits

900
00:42:35,560 --> 00:42:41,220
I pursuit is a basically actual

901
00:42:38,520 --> 00:42:43,690
encryption that<font color="#E5E5E5"> is used to encrypt the</font>

902
00:42:41,220 --> 00:42:45,939
data between the application of<font color="#E5E5E5"> the</font>

903
00:42:43,690 --> 00:42:48,640
server and there's a lot of stuff that

904
00:42:45,940 --> 00:42:51,790
<font color="#E5E5E5">can go wrong there as well so there is a</font>

905
00:42:48,640 --> 00:42:53,440
wiki exchange for example recent logjam

906
00:42:51,790 --> 00:42:56,170
attack on different<font color="#E5E5E5"> Hellman week</font>

907
00:42:53,440 --> 00:42:58,270
integrity so saturated<font color="#E5E5E5"> with md5 are</font>

908
00:42:56,170 --> 00:43:00,880
considered insecure with confidentiality

909
00:42:58,270 --> 00:43:05,490
so I<font color="#CCCCCC"> fursuits with our c4 are considered</font>

910
00:43:00,880 --> 00:43:09,820
insecure expert expert is a special

911
00:43:05,490 --> 00:43:13,060
<font color="#E5E5E5">cypher suit special cyber issues that</font>

912
00:43:09,820 --> 00:43:14,980
were invented like 20 years<font color="#E5E5E5"> ago when NSA</font>

913
00:43:13,060 --> 00:43:18,100
was restricting export of the strong

914
00:43:14,980 --> 00:43:20,680
cryptography from<font color="#E5E5E5"> united states to other</font>

915
00:43:18,100 --> 00:43:23,259
countries and it turned out relatively

916
00:43:20,680 --> 00:43:24,640
recent recently that a lot of<font color="#E5E5E5"> clients</font>

917
00:43:23,260 --> 00:43:26,830
still<font color="#E5E5E5"> support this and they can be</font>

918
00:43:24,640 --> 00:43:29,680
forced to use this week cryptography and

919
00:43:26,830 --> 00:43:31,960
thus this will allow to basically break

920
00:43:29,680 --> 00:43:35,049
the TLS in practice which is<font color="#E5E5E5"> kind of</font>

921
00:43:31,960 --> 00:43:39,130
scary the good news<font color="#CCCCCC"> is that since iOS 9</font>

922
00:43:35,050 --> 00:43:41,260
+ OS 10 11 we have a new feature which

923
00:43:39,130 --> 00:43:45,250
is<font color="#E5E5E5"> called a TS f trans / security which</font>

924
00:43:41,260 --> 00:43:47,380
enforces strong TLS for you it enforces

925
00:43:45,250 --> 00:43:49,480
those rules that are listed<font color="#CCCCCC"> on the slide</font>

926
00:43:47,380 --> 00:43:53,470
I'm again running<font color="#E5E5E5"> out of time so I will</font>

927
00:43:49,480 --> 00:43:54,730
not go into<font color="#E5E5E5"> much details the important</font>

928
00:43:53,470 --> 00:43:57,600
<font color="#E5E5E5">thing</font><font color="#CCCCCC"> is that your application will</font>

929
00:43:54,730 --> 00:44:01,090
simply refuse to connect to a server if

930
00:43:57,600 --> 00:44:03,049
this week cryptography is used so

931
00:44:01,090 --> 00:44:07,100
application Transpo security is

932
00:44:03,050 --> 00:44:08,900
will I OS 9 10 11 you can<font color="#E5E5E5"> specify of</font>

933
00:44:07,100 --> 00:44:10,430
course exceptions so for example you<font color="#E5E5E5"> for</font>

934
00:44:08,900 --> 00:44:12,020
some reason need<font color="#E5E5E5"> to talk to a</font><font color="#CCCCCC"> back end</font>

935
00:44:10,430 --> 00:44:13,730
<font color="#E5E5E5">which you don't control and you wish you</font>

936
00:44:12,020 --> 00:44:15,200
cannot upgrade you<font color="#CCCCCC"> can specify this and</font>

937
00:44:13,730 --> 00:44:17,900
as an exception and everything you will

938
00:44:15,200 --> 00:44:20,919
still work so it's not it<font color="#CCCCCC"> ATS does not</font>

939
00:44:17,900 --> 00:44:24,650
necessarily break all the things ATS

940
00:44:20,920 --> 00:44:26,120
makes TLS misconfigurations easy to

941
00:44:24,650 --> 00:44:28,310
notice this<font color="#CCCCCC"> is very important because</font>

942
00:44:26,120 --> 00:44:29,960
testing TLS text testing TLS

943
00:44:28,310 --> 00:44:33,200
configuration is actually a very hard

944
00:44:29,960 --> 00:44:35,240
problem in practice with<font color="#CCCCCC"> a TS your</font>

945
00:44:33,200 --> 00:44:37,939
application will simply stop working so

946
00:44:35,240 --> 00:44:40,160
you know right away that something is

947
00:44:37,940 --> 00:44:42,940
wrong so you can investigate you can

948
00:44:40,160 --> 00:44:48,140
figure out what's<font color="#E5E5E5"> wrong you can fix it</font>

949
00:44:42,940 --> 00:44:50,960
ATS is great for security and absolutely

950
00:44:48,140 --> 00:44:54,259
use it if<font color="#E5E5E5"> you care about security and</font>

951
00:44:50,960 --> 00:44:57,380
privacy of your users data again this is

952
00:44:54,260 --> 00:45:00,470
new feature in iOS 9 and I encourage all

953
00:44:57,380 --> 00:45:03,710
<font color="#E5E5E5">Liars developers to use it I certainly</font>

954
00:45:00,470 --> 00:45:09,290
<font color="#E5E5E5">encourage all iOS developers I work with</font>

955
00:45:03,710 --> 00:45:11,450
to use it unfortunately data protection

956
00:45:09,290 --> 00:45:13,850
doesn't end here so once you send the

957
00:45:11,450 --> 00:45:16,100
data to the server you have a whole new

958
00:45:13,850 --> 00:45:18,500
range of problems because<font color="#E5E5E5"> you need</font><font color="#CCCCCC"> to</font>

959
00:45:16,100 --> 00:45:21,620
process the data on the<font color="#CCCCCC"> server store it</font>

960
00:45:18,500 --> 00:45:23,270
on the server somehow but this is a

961
00:45:21,620 --> 00:45:27,290
completely completely different story

962
00:45:23,270 --> 00:45:31,370
and this<font color="#E5E5E5"> is not what I'm going to cover</font>

963
00:45:27,290 --> 00:45:34,210
today with this this<font color="#E5E5E5"> is it thank you</font>

964
00:45:31,370 --> 00:45:34,210
<font color="#CCCCCC">very much for</font><font color="#E5E5E5"> your time</font>

965
00:45:47,179 --> 00:45:52,949
thank you ungrateful been without and

966
00:45:50,219 --> 00:45:56,849
sharing your precious experience with us

967
00:45:52,949 --> 00:45:59,729
let's see what if there is some question

968
00:45:56,849 --> 00:46:14,519
from our audience check Waka demand

969
00:45:59,729 --> 00:46:16,468
<font color="#CCCCCC">repubblica D'Andre</font><font color="#E5E5E5"> g ok um just one one</font>

970
00:46:14,519 --> 00:46:21,479
question regarding the TLS security of

971
00:46:16,469 --> 00:46:23,789
iOS 9 given that ninety 90 percentage of

972
00:46:21,479 --> 00:46:26,939
the mobile<font color="#CCCCCC"> application need to connect</font>

973
00:46:23,789 --> 00:46:28,890
to a server that is owned by the same

974
00:46:26,939 --> 00:46:34,739
company that run and do the mobile

975
00:46:28,890 --> 00:46:40,140
application does it even make sense to

976
00:46:34,739 --> 00:46:42,630
use the iOS TLS stuck with all the

977
00:46:40,140 --> 00:46:45,808
trusted certification authorities and

978
00:46:42,630 --> 00:46:49,559
blah blah rather than setting something

979
00:46:45,809 --> 00:46:51,749
more statically configured like just

980
00:46:49,559 --> 00:46:53,549
building into the application this<font color="#CCCCCC"> is</font>

981
00:46:51,749 --> 00:46:55,890
the public key of the<font color="#E5E5E5"> server you are</font>

982
00:46:53,549 --> 00:46:58,949
allowed to connect to and that's it just

983
00:46:55,890 --> 00:47:02,249
doesn't care this is this a certificate

984
00:46:58,949 --> 00:47:04,499
pinning right so it is<font color="#E5E5E5"> it is of course</font>

985
00:47:02,249 --> 00:47:08,009
<font color="#E5E5E5">make sense to do this if your</font>

986
00:47:04,499 --> 00:47:11,640
application connects only to<font color="#E5E5E5"> your</font>

987
00:47:08,009 --> 00:47:14,880
services or if you know if you can

988
00:47:11,640 --> 00:47:18,089
manage this<font color="#E5E5E5"> connections the problems is</font>

989
00:47:14,880 --> 00:47:19,529
that you need to remember<font color="#E5E5E5"> about the fact</font>

990
00:47:18,089 --> 00:47:21,179
that you have been the certificates

991
00:47:19,529 --> 00:47:26,459
because in all certificates they live

992
00:47:21,179 --> 00:47:28,979
for 23 years usually and then when the

993
00:47:26,459 --> 00:47:30,749
certificate expires it is quite<font color="#CCCCCC"> possible</font>

994
00:47:28,979 --> 00:47:33,509
you know that the person who implemented

995
00:47:30,749 --> 00:47:36,118
pinning you know his left the company

996
00:47:33,509 --> 00:47:38,369
he's doing something else then you you

997
00:47:36,119 --> 00:47:40,739
know your<font color="#CCCCCC"> divorce they rotate the</font>

998
00:47:38,369 --> 00:47:43,109
certificate and next day<font color="#E5E5E5"> you receive you</font>

999
00:47:40,739 --> 00:47:46,589
know million of bug reports that your

1000
00:47:43,109 --> 00:47:48,779
application<font color="#CCCCCC"> start working so again you</font>

1001
00:47:46,589 --> 00:47:50,130
need<font color="#CCCCCC"> to handle</font><font color="#E5E5E5"> this with care I</font>

1002
00:47:48,779 --> 00:47:53,219
<font color="#E5E5E5">personally think that certificate</font>

1003
00:47:50,130 --> 00:47:54,870
pinning should be done for the scenarios

1004
00:47:53,219 --> 00:47:57,120
like you mentioned so

1005
00:47:54,870 --> 00:48:00,390
<font color="#E5E5E5">I'm doing this and I have done</font><font color="#CCCCCC"> this in</font>

1006
00:47:57,120 --> 00:48:03,870
my previous role of course there are

1007
00:48:00,390 --> 00:48:06,660
ways to work around those you know those

1008
00:48:03,870 --> 00:48:08,100
self and clicked<font color="#CCCCCC"> self-inflicted denial</font>

1009
00:48:06,660 --> 00:48:11,009
of service problems but it's<font color="#E5E5E5"> something</font>

1010
00:48:08,100 --> 00:48:12,660
that you<font color="#E5E5E5"> need</font><font color="#CCCCCC"> to approach with care you</font>

1011
00:48:11,010 --> 00:48:16,110
need to document you need to be aware<font color="#CCCCCC"> of</font>

1012
00:48:12,660 --> 00:48:17,250
it yeah and I'm not sure<font color="#CCCCCC"> that</font>

1013
00:48:16,110 --> 00:48:19,230
ninety-nine point nine percent

1014
00:48:17,250 --> 00:48:21,720
application can connect only to the

1015
00:48:19,230 --> 00:48:23,670
service to the own services because

1016
00:48:21,720 --> 00:48:25,830
everybody's now uses you know various CD

1017
00:48:23,670 --> 00:48:29,760
ants and all this kind of stuff and<font color="#E5E5E5"> if</font>

1018
00:48:25,830 --> 00:48:32,819
you try<font color="#CCCCCC"> to render you know try</font><font color="#E5E5E5"> to load</font>

1019
00:48:29,760 --> 00:48:34,920
anything from from web it's it's very

1020
00:48:32,820 --> 00:48:37,500
likely that you will have to access you

1021
00:48:34,920 --> 00:48:38,840
know things like CDN or like that so

1022
00:48:37,500 --> 00:48:41,940
it's<font color="#E5E5E5"> not</font><font color="#CCCCCC"> that simple as that but</font>

1023
00:48:38,840 --> 00:48:45,260
definitely something that you should you

1024
00:48:41,940 --> 00:48:48,260
should try<font color="#E5E5E5"> to implement in the apps</font>

1025
00:48:45,260 --> 00:48:48,260
thank

1026
00:48:51,700 --> 00:48:57,480
video catch on Alfred Amanda<font color="#CCCCCC"> la</font><font color="#E5E5E5"> puta que</font>

1027
00:48:59,970 --> 00:49:05,980
hi I'm not an iOS user so my question

1028
00:49:03,790 --> 00:49:08,470
maybe it's easy to be answered<font color="#CCCCCC"> the</font>

1029
00:49:05,980 --> 00:49:11,650
question is from<font color="#E5E5E5"> the user point of view</font>

1030
00:49:08,470 --> 00:49:13,720
is there a way in<font color="#E5E5E5"> which I can check</font>

1031
00:49:11,650 --> 00:49:16,240
which kind of implementation has been

1032
00:49:13,720 --> 00:49:19,750
made on the application I'm<font color="#E5E5E5"> going to</font>

1033
00:49:16,240 --> 00:49:22,419
download<font color="#CCCCCC"> and use implementation of what</font>

1034
00:49:19,750 --> 00:49:25,210
I mean the security implementation so

1035
00:49:22,420 --> 00:49:28,390
you showed us all the<font color="#CCCCCC"> things a developer</font>

1036
00:49:25,210 --> 00:49:31,060
<font color="#CCCCCC">can make but I say from a user point of</font>

1037
00:49:28,390 --> 00:49:32,770
view am i able to understand which kind

1038
00:49:31,060 --> 00:49:36,099
<font color="#E5E5E5">of features have been used by the</font>

1039
00:49:32,770 --> 00:49:39,700
developer usually not unfortunately you

1040
00:49:36,099 --> 00:49:41,380
have<font color="#CCCCCC"> to trust to ask your vendor the</font>

1041
00:49:39,700 --> 00:49:43,240
application of authors the application

1042
00:49:41,380 --> 00:49:46,060
vendors about this and hope that<font color="#E5E5E5"> they</font>

1043
00:49:43,240 --> 00:49:48,009
you know tell<font color="#CCCCCC"> you the truth this is why</font>

1044
00:49:46,060 --> 00:49:50,650
this you know security<font color="#E5E5E5"> industry exists</font>

1045
00:49:48,010 --> 00:49:53,619
because we do we take applications we

1046
00:49:50,650 --> 00:49:55,240
reverse-engineer them and see if if what

1047
00:49:53,619 --> 00:49:58,390
they do you know<font color="#E5E5E5"> matches what the</font>

1048
00:49:55,240 --> 00:50:01,810
vendors promise usually it doesn't but

1049
00:49:58,390 --> 00:50:03,670
you know then you you make nice-nice

1050
00:50:01,810 --> 00:50:06,160
talk somewhere<font color="#CCCCCC"> else and somebody you</font>

1051
00:50:03,670 --> 00:50:07,750
know the render becomes oh my god so we

1052
00:50:06,160 --> 00:50:09,848
<font color="#E5E5E5">don't want</font><font color="#CCCCCC"> these bad publicity so we</font>

1053
00:50:07,750 --> 00:50:12,210
will fix stuff we will thinks things you

1054
00:50:09,849 --> 00:50:16,089
know scoot it gets kind of better now

1055
00:50:12,210 --> 00:50:18,940
<font color="#CCCCCC">there is no effective way to to know</font>

1056
00:50:16,089 --> 00:50:23,200
which of those features<font color="#E5E5E5"> are used by</font>

1057
00:50:18,940 --> 00:50:25,780
application unfortunately so it's<font color="#E5E5E5"> always</font>

1058
00:50:23,200 --> 00:50:29,710
a question<font color="#E5E5E5"> of trust whether you trust</font>

1059
00:50:25,780 --> 00:50:32,680
what your winder does or you don't you

1060
00:50:29,710 --> 00:50:33,849
can verify<font color="#E5E5E5"> this by employing you know by</font>

1061
00:50:32,680 --> 00:50:35,440
doing reverse engineering of<font color="#CCCCCC"> the</font>

1062
00:50:33,849 --> 00:50:40,290
application actually but that's that's

1063
00:50:35,440 --> 00:50:40,290
the only way you know<font color="#E5E5E5"> okay thank</font>

1064
00:50:49,380 --> 00:50:56,380
<font color="#E5E5E5">bene no no habla mo tiempo porque si no</font>

1065
00:50:53,520 --> 00:50:58,540
chichi troviamo puede retardo el mero

1066
00:50:56,380 --> 00:51:00,340
quanti di voi do bros kappa Reggiano

1067
00:50:58,540 --> 00:51:03,100
l-train oh no abrimos program motto le

1068
00:51:00,340 --> 00:51:07,210
di sotto la<font color="#E5E5E5"> cena del edén toma estamos</font>

1069
00:51:03,100 --> 00:51:09,310
<font color="#CCCCCC">Ferrando de cual k minuto de su no per</font>

1070
00:51:07,210 --> 00:51:12,520
quello facciamo cuesta de monde de modo

1071
00:51:09,310 --> 00:51:31,529
que<font color="#CCCCCC"> ok</font><font color="#E5E5E5"> Robin a low around put your</font>

1072
00:51:12,520 --> 00:51:34,980
microphone<font color="#E5E5E5"> on</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> savage erat know from a</font>

1073
00:51:31,530 --> 00:51:37,780
isolation perspective when it comes to

1074
00:51:34,980 --> 00:51:40,450
applications that let's assume<font color="#CCCCCC"> i ever</font>

1075
00:51:37,780 --> 00:51:42,430
compromised an application and<font color="#E5E5E5"> I get</font>

1076
00:51:40,450 --> 00:51:44,919
<font color="#E5E5E5">good execution on a system from that</font>

1077
00:51:42,430 --> 00:51:47,290
compromised application what's the

1078
00:51:44,920 --> 00:51:49,150
impact on the whole systems in terms of

1079
00:51:47,290 --> 00:51:50,950
what data can this application access

1080
00:51:49,150 --> 00:51:52,690
can eat access other data from other

1081
00:51:50,950 --> 00:51:57,850
applications from other contests<font color="#CCCCCC"> at in</font>

1082
00:51:52,690 --> 00:51:59,590
domains so it depends on whether your

1083
00:51:57,850 --> 00:52:02,080
device is jailbroken or not obviously

1084
00:51:59,590 --> 00:52:05,020
right Yes devices your broken then it's

1085
00:52:02,080 --> 00:52:07,090
game over so<font color="#CCCCCC"> ok basically the moment you</font>

1086
00:52:05,020 --> 00:52:09,100
jailbreak your iOS device you can say

1087
00:52:07,090 --> 00:52:11,920
goodbye to all the security so I mean if

1088
00:52:09,100 --> 00:52:13,690
<font color="#CCCCCC">you if you jailbreak your non-research</font>

1089
00:52:11,920 --> 00:52:16,230
device then you know you're doing<font color="#E5E5E5"> it</font>

1090
00:52:13,690 --> 00:52:19,840
<font color="#E5E5E5">wrong so and I never do this actually</font>

1091
00:52:16,230 --> 00:52:21,130
only properly on the proper on the

1092
00:52:19,840 --> 00:52:23,950
device with<font color="#CCCCCC"> the proper security checks</font>

1093
00:52:21,130 --> 00:52:26,560
if you get code execution in the context

1094
00:52:23,950 --> 00:52:28,689
of the user application<font color="#E5E5E5"> you normally</font>

1095
00:52:26,560 --> 00:52:29,680
will not get access to any data except

1096
00:52:28,690 --> 00:52:32,500
for the data of this particular

1097
00:52:29,680 --> 00:52:35,319
application<font color="#E5E5E5"> ok nice so you'll get access</font>

1098
00:52:32,500 --> 00:52:37,180
to to the sandbox to the<font color="#CCCCCC"> filesystem</font>

1099
00:52:35,320 --> 00:52:40,780
<font color="#E5E5E5">sandbox of this application you get</font>

1100
00:52:37,180 --> 00:52:41,890
<font color="#E5E5E5">access to the to all kitchen items that</font>

1101
00:52:40,780 --> 00:52:44,020
are accessible to this particular

1102
00:52:41,890 --> 00:52:47,339
application because this is also

1103
00:52:44,020 --> 00:52:49,480
<font color="#E5E5E5">enforced by code signing mechanism and</font>

1104
00:52:47,340 --> 00:52:51,970
jailbreak basically disables code

1105
00:52:49,480 --> 00:52:54,220
signing this is why you can kind of in

1106
00:52:51,970 --> 00:52:55,569
<font color="#E5E5E5">the case of jailbroken device if you get</font>

1107
00:52:54,220 --> 00:52:55,859
remote code execution in the context of

1108
00:52:55,570 --> 00:52:58,380
<font color="#E5E5E5">that</font>

1109
00:52:55,859 --> 00:53:00,989
occasion you pretty much can access all

1110
00:52:58,380 --> 00:53:03,450
system resources all file system and all

1111
00:53:00,989 --> 00:53:07,400
<font color="#E5E5E5">kitchen items so this is this is why</font><font color="#CCCCCC"> you</font>

1112
00:53:03,450 --> 00:53:07,399
shouldn't do this thank you

1113
00:53:12,880 --> 00:53:14,940
you

