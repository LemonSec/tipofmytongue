1
00:00:23,119 --> 00:00:26,119
um

2
00:00:27,240 --> 00:00:30,560
[Music]

3
00:01:00,860 --> 00:01:03,930
[Music]

4
00:01:06,330 --> 00:01:08,240
[Music]

5
00:01:08,240 --> 00:01:10,159
hi everyone

6
00:01:10,159 --> 00:01:13,200
my name is thanks for joining this talk

7
00:01:13,200 --> 00:01:16,960
i apologize for not being able to uh

8
00:01:16,960 --> 00:01:21,200
be here live unfortunately i had a work

9
00:01:21,200 --> 00:01:23,360
uh i had to take so i'm on in the

10
00:01:23,360 --> 00:01:25,280
airplane right now

11
00:01:25,280 --> 00:01:27,680
um lending in bologna

12
00:01:27,680 --> 00:01:28,880
in just

13
00:01:28,880 --> 00:01:31,119
one hour

14
00:01:31,119 --> 00:01:34,159
all right let's start

15
00:01:38,400 --> 00:01:41,040
so what we're gonna talk about

16
00:01:41,040 --> 00:01:42,079
um

17
00:01:42,079 --> 00:01:44,000
automated serverless security testing so

18
00:01:44,000 --> 00:01:46,159
i don't know if anyone

19
00:01:46,159 --> 00:01:48,880
uh if you all know uh serverless the

20
00:01:48,880 --> 00:01:50,560
technology so we'll cover a little bit

21
00:01:50,560 --> 00:01:52,159
about that as well

22
00:01:52,159 --> 00:01:54,560
and then um

23
00:01:54,560 --> 00:01:57,200
we'll dive into how you should be doing

24
00:01:57,200 --> 00:01:59,600
security testing

25
00:01:59,600 --> 00:02:01,040
um just

26
00:02:01,040 --> 00:02:04,479
a little bit about me um

27
00:02:04,479 --> 00:02:07,479
so i started working in serverless in

28
00:02:07,479 --> 00:02:10,560
2017 very early for the technology just

29
00:02:10,560 --> 00:02:13,040
started a year before

30
00:02:13,040 --> 00:02:15,360
i started as head of security research

31
00:02:15,360 --> 00:02:18,640
at protego labs um an israeli startup

32
00:02:18,640 --> 00:02:21,599
that the runtime protection for service

33
00:02:21,599 --> 00:02:23,040
applications

34
00:02:23,040 --> 00:02:25,040
um the company got acquired by

35
00:02:25,040 --> 00:02:26,400
checkpoint

36
00:02:26,400 --> 00:02:30,480
and in 2019 um after six months i

37
00:02:30,480 --> 00:02:33,200
decided to take this to the next level

38
00:02:33,200 --> 00:02:34,239
and

39
00:02:34,239 --> 00:02:37,360
co-founded a cloud essence another

40
00:02:37,360 --> 00:02:38,959
israeli startup

41
00:02:38,959 --> 00:02:41,760
doing uh security automated security

42
00:02:41,760 --> 00:02:43,840
testing for serverless

43
00:02:43,840 --> 00:02:45,840
we got acquired

44
00:02:45,840 --> 00:02:46,959
last year

45
00:02:46,959 --> 00:02:50,400
by contrast security now i'm leading uh

46
00:02:50,400 --> 00:02:52,640
the country security research team

47
00:02:52,640 --> 00:02:56,000
uh team is based in israel but i live in

48
00:02:56,000 --> 00:02:58,640
florence not far away

49
00:02:58,640 --> 00:03:00,959
so i'm not here also to answer questions

50
00:03:00,959 --> 00:03:03,519
but if you want or you if you have any

51
00:03:03,519 --> 00:03:06,720
feel free to reach me out at any um

52
00:03:06,720 --> 00:03:09,040
channel

53
00:03:09,040 --> 00:03:12,159
um let's start so cloud native uh

54
00:03:12,159 --> 00:03:14,000
serverless is part of cloud native let's

55
00:03:14,000 --> 00:03:16,480
talk about that so uh

56
00:03:16,480 --> 00:03:20,239
actually um according to idc by 2021

57
00:03:20,239 --> 00:03:21,519
which is

58
00:03:21,519 --> 00:03:22,319
now

59
00:03:22,319 --> 00:03:23,920
um

60
00:03:23,920 --> 00:03:24,959
70

61
00:03:24,959 --> 00:03:27,280
of newly developed uh enterprise

62
00:03:27,280 --> 00:03:29,360
application will be developed as cloud

63
00:03:29,360 --> 00:03:31,200
native applications it doesn't

64
00:03:31,200 --> 00:03:33,519
necessarily mean just serverless but

65
00:03:33,519 --> 00:03:36,000
based on hyper agile architecture we'll

66
00:03:36,000 --> 00:03:37,760
discuss that a little bit

67
00:03:37,760 --> 00:03:40,080
uh using containers microservices

68
00:03:40,080 --> 00:03:42,879
services and functions uh serverless

69
00:03:42,879 --> 00:03:44,879
functions

70
00:03:44,879 --> 00:03:46,959
forester already

71
00:03:46,959 --> 00:03:49,120
uh see um

72
00:03:49,120 --> 00:03:52,319
a huge increase next year and this is

73
00:03:52,319 --> 00:03:55,120
just uh trying to or going to grow and

74
00:03:55,120 --> 00:03:56,720
grow with time

75
00:03:56,720 --> 00:03:58,879
the transformation to cloud native i'm

76
00:03:58,879 --> 00:04:01,040
sure you all experienced that

77
00:04:01,040 --> 00:04:03,599
already began uh we're somewhere in the

78
00:04:03,599 --> 00:04:05,680
middle where we have the

79
00:04:05,680 --> 00:04:09,200
most advanced companies like uh or

80
00:04:09,200 --> 00:04:11,360
pioneer companies like irobot and

81
00:04:11,360 --> 00:04:13,360
skyscanner which

82
00:04:13,360 --> 00:04:17,358
almost all tend to use mostly serverless

83
00:04:17,358 --> 00:04:20,639
and cloud native um and then we have

84
00:04:20,639 --> 00:04:22,240
uh along

85
00:04:22,240 --> 00:04:24,560
a little bit down the road we have big

86
00:04:24,560 --> 00:04:27,360
enterprises like coca-cola xerox att

87
00:04:27,360 --> 00:04:29,360
mastercards and more which already

88
00:04:29,360 --> 00:04:32,080
started this uh transformation but they

89
00:04:32,080 --> 00:04:33,759
are still in the

90
00:04:33,759 --> 00:04:35,040
hybrid

91
00:04:35,040 --> 00:04:38,000
part cloud native part traditional

92
00:04:38,000 --> 00:04:40,000
monolith application

93
00:04:40,000 --> 00:04:41,759
but it's going there

94
00:04:41,759 --> 00:04:44,639
all right so what is serverless or cloud

95
00:04:44,639 --> 00:04:47,120
native development it's not just a

96
00:04:47,120 --> 00:04:49,280
development pattern pattern it's a

97
00:04:49,280 --> 00:04:52,160
different architecture it's a different

98
00:04:52,160 --> 00:04:54,320
architecture instead of a monolith with

99
00:04:54,320 --> 00:04:56,400
one flow there are

100
00:04:56,400 --> 00:04:59,360
multiple dozens thousands and i've seen

101
00:04:59,360 --> 00:05:01,360
application with ten thousands of

102
00:05:01,360 --> 00:05:03,840
different resources each is a standalone

103
00:05:03,840 --> 00:05:06,560
resource that is connected or configured

104
00:05:06,560 --> 00:05:07,919
in some way to

105
00:05:07,919 --> 00:05:12,000
continue the flow the cycles are not uh

106
00:05:12,000 --> 00:05:14,320
not uh waterfall anymore there are

107
00:05:14,320 --> 00:05:15,360
devops

108
00:05:15,360 --> 00:05:18,240
devsecops if you heard super agile hyper

109
00:05:18,240 --> 00:05:19,440
agile

110
00:05:19,440 --> 00:05:20,560
flows

111
00:05:20,560 --> 00:05:23,600
so the development process is really

112
00:05:23,600 --> 00:05:24,479
fast

113
00:05:24,479 --> 00:05:28,000
uh the processes are different usually

114
00:05:28,000 --> 00:05:31,120
it's less manual so we don't have now a

115
00:05:31,120 --> 00:05:33,600
new version a new server version that we

116
00:05:33,600 --> 00:05:36,400
have to now have maintenance time or hey

117
00:05:36,400 --> 00:05:38,479
now we release a new version so we

118
00:05:38,479 --> 00:05:40,639
replaced the server completely no

119
00:05:40,639 --> 00:05:43,600
everything is automated uh something new

120
00:05:43,600 --> 00:05:46,240
new needs to come up the developer push

121
00:05:46,240 --> 00:05:48,639
a function to production and configure

122
00:05:48,639 --> 00:05:51,360
it to run as a blue green so it starts

123
00:05:51,360 --> 00:05:54,160
with the old version whether together

124
00:05:54,160 --> 00:05:56,960
with the new version and based on the

125
00:05:56,960 --> 00:05:58,800
results

126
00:05:58,800 --> 00:06:00,800
that takes place so everything is

127
00:06:00,800 --> 00:06:02,639
automated

128
00:06:02,639 --> 00:06:04,400
and also the decision making is

129
00:06:04,400 --> 00:06:06,400
different it's not more top-down that

130
00:06:06,400 --> 00:06:09,919
did the director the manager

131
00:06:09,919 --> 00:06:12,160
takes the decision and

132
00:06:12,160 --> 00:06:14,639
put it down or give it down to the

133
00:06:14,639 --> 00:06:17,840
developer developers have more

134
00:06:17,840 --> 00:06:20,960
responsibility they have more

135
00:06:20,960 --> 00:06:23,120
power but of course as well

136
00:06:23,120 --> 00:06:25,440
responsibility security is part of it

137
00:06:25,440 --> 00:06:27,120
and we'll talk about that

138
00:06:27,120 --> 00:06:28,880
security is now

139
00:06:28,880 --> 00:06:31,039
in many cases part of the developer's

140
00:06:31,039 --> 00:06:33,360
job not only to write secure code but to

141
00:06:33,360 --> 00:06:37,520
understand security impacts in the cloud

142
00:06:37,520 --> 00:06:39,600
and we'll discuss that

143
00:06:39,600 --> 00:06:41,680
serverless architecture as i mentioned

144
00:06:41,680 --> 00:06:44,319
it's kind of a puzzle because there are

145
00:06:44,319 --> 00:06:46,400
many many different services this is

146
00:06:46,400 --> 00:06:47,440
just

147
00:06:47,440 --> 00:06:50,400
an example of a single app

148
00:06:50,400 --> 00:06:53,840
each thing each uh component or each

149
00:06:53,840 --> 00:06:55,840
resource or icon that you see here is a

150
00:06:55,840 --> 00:06:58,240
different resource so the orange one are

151
00:06:58,240 --> 00:07:00,880
usual lambdas you can see here these are

152
00:07:00,880 --> 00:07:04,319
databases and some other buckets

153
00:07:04,319 --> 00:07:06,639
and some other services

154
00:07:06,639 --> 00:07:10,479
in this case aws based mostly

155
00:07:10,479 --> 00:07:13,280
but each of it of those resources is

156
00:07:13,280 --> 00:07:14,400
stateless

157
00:07:14,400 --> 00:07:16,240
that means that you have to control

158
00:07:16,240 --> 00:07:19,039
authentication access control input

159
00:07:19,039 --> 00:07:21,759
everything within each of those

160
00:07:21,759 --> 00:07:23,759
resources sometimes it's easy sometimes

161
00:07:23,759 --> 00:07:26,000
it you can say okay this comes from a

162
00:07:26,000 --> 00:07:28,160
tested zone so i'm not going to do that

163
00:07:28,160 --> 00:07:30,400
it's a risk you take but fine

164
00:07:30,400 --> 00:07:32,720
uh but you have to make sure

165
00:07:32,720 --> 00:07:35,199
that this entire flow

166
00:07:35,199 --> 00:07:38,000
is secured and you not don't just do it

167
00:07:38,000 --> 00:07:39,759
at the perimeter

168
00:07:39,759 --> 00:07:41,759
you don't put a session and then yeah

169
00:07:41,759 --> 00:07:44,879
everything is sessions uh i can

170
00:07:44,879 --> 00:07:46,720
take care of the user not always

171
00:07:46,720 --> 00:07:48,560
functions are stateless

172
00:07:48,560 --> 00:07:50,400
don't really understand so either you

173
00:07:50,400 --> 00:07:52,720
maintain a state out of bound maybe in a

174
00:07:52,720 --> 00:07:55,599
database or you have to take some

175
00:07:55,599 --> 00:07:57,520
security measures and we'll discuss some

176
00:07:57,520 --> 00:07:58,560
of those

177
00:07:58,560 --> 00:08:00,560
during this talk

178
00:08:00,560 --> 00:08:02,960
so what is gen serverless in general

179
00:08:02,960 --> 00:08:04,240
there are a few

180
00:08:04,240 --> 00:08:06,479
cloud providers

181
00:08:06,479 --> 00:08:08,720
aws is the biggest one of course i think

182
00:08:08,720 --> 00:08:09,599
it's

183
00:08:09,599 --> 00:08:12,319
roughly 60 of the market then you have

184
00:08:12,319 --> 00:08:14,560
azure ibm

185
00:08:14,560 --> 00:08:17,360
google cloud

186
00:08:17,360 --> 00:08:20,160
and some others

187
00:08:20,160 --> 00:08:22,879
some of them like aws and azure

188
00:08:22,879 --> 00:08:25,840
and some gcp offers a lot of services

189
00:08:25,840 --> 00:08:28,319
some just small services like function

190
00:08:28,319 --> 00:08:30,000
as a service you can find even in

191
00:08:30,000 --> 00:08:31,440
cloudfront i think

192
00:08:31,440 --> 00:08:32,320
um

193
00:08:32,320 --> 00:08:36,000
alibaba has cloud and the other service

194
00:08:36,000 --> 00:08:37,519
companies as well

195
00:08:37,519 --> 00:08:40,880
but serverless just means a way of

196
00:08:40,880 --> 00:08:43,760
executing code

197
00:08:43,760 --> 00:08:44,880
which is

198
00:08:44,880 --> 00:08:47,040
you don't have to maintain a server the

199
00:08:47,040 --> 00:08:50,640
cloud will take care of everything of

200
00:08:50,640 --> 00:08:52,640
everything apart from the code that you

201
00:08:52,640 --> 00:08:56,000
run so when the code needs to run

202
00:08:56,000 --> 00:08:58,320
a container spins up

203
00:08:58,320 --> 00:09:01,120
by by the cloud provider and runs your

204
00:09:01,120 --> 00:09:03,120
code but you don't have access to that

205
00:09:03,120 --> 00:09:05,279
it's not it's not acting as a container

206
00:09:05,279 --> 00:09:06,640
it just acts

207
00:09:06,640 --> 00:09:09,600
as a wrapper to the code and then the

208
00:09:09,600 --> 00:09:11,920
architecture is more event-based so it's

209
00:09:11,920 --> 00:09:14,160
an event-based architecture

210
00:09:14,160 --> 00:09:15,200
it's not

211
00:09:15,200 --> 00:09:17,760
synchronous so it's not request response

212
00:09:17,760 --> 00:09:18,880
typical

213
00:09:18,880 --> 00:09:20,959
you also have that of course as part

214
00:09:20,959 --> 00:09:23,519
part of the system maybe the apis

215
00:09:23,519 --> 00:09:25,360
but it's more event based so something

216
00:09:25,360 --> 00:09:27,920
happened and based on the configuration

217
00:09:27,920 --> 00:09:30,080
that we've done in the cloud this

218
00:09:30,080 --> 00:09:32,640
specific code will run it will write to

219
00:09:32,640 --> 00:09:35,279
a database and then because the entry

220
00:09:35,279 --> 00:09:36,720
based

221
00:09:36,720 --> 00:09:39,120
entry was changed then another code

222
00:09:39,120 --> 00:09:41,200
would run process the data

223
00:09:41,200 --> 00:09:43,760
and upload it to an f3 bucket then

224
00:09:43,760 --> 00:09:45,839
because there was an upload to the s3

225
00:09:45,839 --> 00:09:47,680
bucket there is a service that pulls

226
00:09:47,680 --> 00:09:50,080
this data process it sends an email or

227
00:09:50,080 --> 00:09:52,160
whatever something like this

228
00:09:52,160 --> 00:09:53,760
most of the environments are read only

229
00:09:53,760 --> 00:09:56,399
depends on the provider in aws for

230
00:09:56,399 --> 00:09:58,320
example all the system is read only

231
00:09:58,320 --> 00:10:00,640
except from slash tab so you if you want

232
00:10:00,640 --> 00:10:03,519
to write data inside your runtime just

233
00:10:03,519 --> 00:10:05,040
to slash temp

234
00:10:05,040 --> 00:10:06,320
when the code

235
00:10:06,320 --> 00:10:08,160
terminates so it

236
00:10:08,160 --> 00:10:09,680
reaches the end

237
00:10:09,680 --> 00:10:11,440
then this

238
00:10:11,440 --> 00:10:13,680
environment terminates it's closed you

239
00:10:13,680 --> 00:10:16,560
don't it doesn't run anymore

240
00:10:16,560 --> 00:10:18,640
it's not wired to the internet in terms

241
00:10:18,640 --> 00:10:20,640
of you cannot ssh to it it's not that

242
00:10:20,640 --> 00:10:23,279
you don't cannot do uh http calls you

243
00:10:23,279 --> 00:10:26,720
can from inside out you cannot do

244
00:10:26,720 --> 00:10:27,680
uh

245
00:10:27,680 --> 00:10:29,360
outside in

246
00:10:29,360 --> 00:10:30,839
um so

247
00:10:30,839 --> 00:10:34,480
inbound data is temporary uh basically

248
00:10:34,480 --> 00:10:36,800
when the execution terminates the data

249
00:10:36,800 --> 00:10:39,040
is erased data

250
00:10:39,040 --> 00:10:41,360
slash temp data i mean the data that you

251
00:10:41,360 --> 00:10:44,320
wrote i put the stars next to it because

252
00:10:44,320 --> 00:10:47,200
you do not control that basically

253
00:10:47,200 --> 00:10:49,040
if another

254
00:10:49,040 --> 00:10:51,920
event is coming in um they might use the

255
00:10:51,920 --> 00:10:53,600
same environment so you might have the

256
00:10:53,600 --> 00:10:56,000
same the data from the previous one of

257
00:10:56,000 --> 00:10:57,760
the previous executions but this is not

258
00:10:57,760 --> 00:11:00,880
something yet you can rely on

259
00:11:00,880 --> 00:11:02,800
the code resides in the environment so

260
00:11:02,800 --> 00:11:04,800
when the code needs to run aws basically

261
00:11:04,800 --> 00:11:06,959
takes the code put it inside a container

262
00:11:06,959 --> 00:11:07,920
inside a

263
00:11:07,920 --> 00:11:09,360
um

264
00:11:09,360 --> 00:11:11,680
a container and runs it so the code is

265
00:11:11,680 --> 00:11:13,920
inside if you have access to the runtime

266
00:11:13,920 --> 00:11:16,000
then you have access to the code as well

267
00:11:16,000 --> 00:11:18,640
also the keys are also

268
00:11:18,640 --> 00:11:20,959
inside the environment variables which

269
00:11:20,959 --> 00:11:22,320
are also

270
00:11:22,320 --> 00:11:24,240
accessible in the runtime and we'll talk

271
00:11:24,240 --> 00:11:26,240
about that

272
00:11:26,240 --> 00:11:30,000
what about security well not a lot um

273
00:11:30,000 --> 00:11:33,839
you can see servos computing is growing

274
00:11:33,839 --> 00:11:36,240
and but security several security

275
00:11:36,240 --> 00:11:38,640
searches or on google for example is not

276
00:11:38,640 --> 00:11:40,320
really high

277
00:11:40,320 --> 00:11:42,399
i can see mostly zero

278
00:11:42,399 --> 00:11:45,040
ones and maybe some picks with two

279
00:11:45,040 --> 00:11:47,839
uh and i'm pretty sure that well it's

280
00:11:47,839 --> 00:11:50,800
just one it's when i have to give a talk

281
00:11:50,800 --> 00:11:52,720
about it or something else something

282
00:11:52,720 --> 00:11:53,920
like that

283
00:11:53,920 --> 00:11:55,040
um

284
00:11:55,040 --> 00:11:57,200
okay so we have this environment and we

285
00:11:57,200 --> 00:11:59,839
want to test it for application security

286
00:11:59,839 --> 00:12:02,560
um or we want to understand first

287
00:12:02,560 --> 00:12:03,440
uh

288
00:12:03,440 --> 00:12:05,440
how the application security that we've

289
00:12:05,440 --> 00:12:06,880
known before

290
00:12:06,880 --> 00:12:09,680
applies to servers is it the same or not

291
00:12:09,680 --> 00:12:11,760
so

292
00:12:11,760 --> 00:12:14,480
let's understand some of the risks that

293
00:12:14,480 --> 00:12:17,680
we have in serverless and then try to

294
00:12:17,680 --> 00:12:19,279
see how we can

295
00:12:19,279 --> 00:12:21,040
assess those

296
00:12:21,040 --> 00:12:23,120
this is a function

297
00:12:23,120 --> 00:12:25,920
lambda function was i don't know uh

298
00:12:25,920 --> 00:12:29,760
if i expand this maybe 25 lines of code

299
00:12:29,760 --> 00:12:32,000
basically what it done what it's doing

300
00:12:32,000 --> 00:12:34,480
is it receives an event

301
00:12:34,480 --> 00:12:38,800
uh when um through an api i assume yeah

302
00:12:38,800 --> 00:12:41,519
through an api uh and then

303
00:12:41,519 --> 00:12:44,560
uh put this data some data into

304
00:12:44,560 --> 00:12:45,680
uh

305
00:12:45,680 --> 00:12:49,360
a database dynamodb is a dyno is a nosql

306
00:12:49,360 --> 00:12:52,480
database by aws put item is the action

307
00:12:52,480 --> 00:12:55,279
that writes date one entry into

308
00:12:55,279 --> 00:12:57,600
the table the database the table is

309
00:12:57,600 --> 00:12:59,600
inside the environment variable and then

310
00:12:59,600 --> 00:13:01,120
just a response

311
00:13:01,120 --> 00:13:03,120
what is the problem that i'm trying to

312
00:13:03,120 --> 00:13:05,040
solve here that

313
00:13:05,040 --> 00:13:07,200
in order for it just to work the

314
00:13:07,200 --> 00:13:08,399
developer

315
00:13:08,399 --> 00:13:10,399
needs to uh

316
00:13:10,399 --> 00:13:13,040
create the right access or give the

317
00:13:13,040 --> 00:13:14,720
right im

318
00:13:14,720 --> 00:13:16,560
policy so the permission for this

319
00:13:16,560 --> 00:13:18,480
specific function in order for it to

320
00:13:18,480 --> 00:13:20,079
work

321
00:13:20,079 --> 00:13:23,040
the permission is a specific action and

322
00:13:23,040 --> 00:13:25,120
resource and service that you have the

323
00:13:25,120 --> 00:13:27,360
developer needs to choose between

324
00:13:27,360 --> 00:13:29,200
more i think almost ten thousand

325
00:13:29,200 --> 00:13:30,399
different actions so of course the

326
00:13:30,399 --> 00:13:32,800
service is dynamic b so it's never as it

327
00:13:32,800 --> 00:13:34,320
down but he needs to understand what

328
00:13:34,320 --> 00:13:36,160
he's doing usually

329
00:13:36,160 --> 00:13:38,000
the developer will go to stack overflow

330
00:13:38,000 --> 00:13:39,440
or the documentation at least at the

331
00:13:39,440 --> 00:13:41,839
beginning until they understand and just

332
00:13:41,839 --> 00:13:44,240
put something that works uh what we see

333
00:13:44,240 --> 00:13:46,160
in organization is that they don't want

334
00:13:46,160 --> 00:13:47,839
the developer to

335
00:13:47,839 --> 00:13:49,760
spend so much time on it so what they do

336
00:13:49,760 --> 00:13:51,519
is they create

337
00:13:51,519 --> 00:13:52,720
pre

338
00:13:52,720 --> 00:13:54,880
defined roles that the developer will

339
00:13:54,880 --> 00:13:59,199
use unfortunately these roles are

340
00:13:59,199 --> 00:14:02,480
can be used or needs to give the

341
00:14:02,480 --> 00:14:04,079
permission to the entire set of

342
00:14:04,079 --> 00:14:05,760
functions in the application so they are

343
00:14:05,760 --> 00:14:07,519
very permissive anyway what's the

344
00:14:07,519 --> 00:14:09,279
problem here the problem is that

345
00:14:09,279 --> 00:14:11,600
developer or the team that creates the

346
00:14:11,600 --> 00:14:13,279
role will create something like this

347
00:14:13,279 --> 00:14:16,560
dynamodb with a star a wild card which

348
00:14:16,560 --> 00:14:19,600
means that this function now has action

349
00:14:19,600 --> 00:14:21,600
action or access to do

350
00:14:21,600 --> 00:14:24,240
uh any action inside the dynamodb

351
00:14:24,240 --> 00:14:26,000
service that could be

352
00:14:26,000 --> 00:14:28,880
create databases delete databases modify

353
00:14:28,880 --> 00:14:32,560
data whatever change the permissions

354
00:14:32,560 --> 00:14:34,959
whatever

355
00:14:35,199 --> 00:14:37,120
whatever action is possible within the

356
00:14:37,120 --> 00:14:39,360
service even if the data the database or

357
00:14:39,360 --> 00:14:40,560
the table

358
00:14:40,560 --> 00:14:42,800
does not belong to the application but

359
00:14:42,800 --> 00:14:45,199
it sits on the same account

360
00:14:45,199 --> 00:14:48,160
uh then this function could if you

361
00:14:48,160 --> 00:14:50,560
change the code or if you do something

362
00:14:50,560 --> 00:14:52,639
else like in runtime

363
00:14:52,639 --> 00:14:55,360
could do uh any other activity while it

364
00:14:55,360 --> 00:14:58,639
only does actually put item and as you

365
00:14:58,639 --> 00:15:00,480
can see the resources also with the

366
00:15:00,480 --> 00:15:03,040
wildcard means whatever table

367
00:15:03,040 --> 00:15:05,519
there is in the system in the in the

368
00:15:05,519 --> 00:15:06,720
cloud

369
00:15:06,720 --> 00:15:09,279
right so that maps to this and this

370
00:15:09,279 --> 00:15:11,839
which is bad because why do you need a

371
00:15:11,839 --> 00:15:13,600
wild card with

372
00:15:13,600 --> 00:15:16,399
maybe dozen or two three dozens of

373
00:15:16,399 --> 00:15:18,880
available actions when you only need one

374
00:15:18,880 --> 00:15:22,000
action what you have to be to do is to

375
00:15:22,000 --> 00:15:24,800
find the right permission or the right

376
00:15:24,800 --> 00:15:27,519
access in this case it's called action

377
00:15:27,519 --> 00:15:29,920
uh in this case it's put item

378
00:15:29,920 --> 00:15:31,279
and set it

379
00:15:31,279 --> 00:15:35,040
just as this specific uh action

380
00:15:35,040 --> 00:15:37,519
and give it the specific resource

381
00:15:37,519 --> 00:15:39,199
this specific resource is the name of

382
00:15:39,199 --> 00:15:42,160
the table in this case now the function

383
00:15:42,160 --> 00:15:44,079
even if you change the code or hack the

384
00:15:44,079 --> 00:15:46,320
function or in runtime you want do

385
00:15:46,320 --> 00:15:48,880
whatever you want you cannot do anything

386
00:15:48,880 --> 00:15:51,759
other than put one entry inside this

387
00:15:51,759 --> 00:15:53,920
specific table because otherwise the

388
00:15:53,920 --> 00:15:55,440
cloud will

389
00:15:55,440 --> 00:15:57,279
will stop you the infrastructure and

390
00:15:57,279 --> 00:15:58,639
this is one of the

391
00:15:58,639 --> 00:16:01,519
biggest challenges in aws

392
00:16:01,519 --> 00:16:02,800
mostly

393
00:16:02,800 --> 00:16:03,600
yeah

394
00:16:03,600 --> 00:16:06,560
here it looks yeah it's not so difficult

395
00:16:06,560 --> 00:16:09,040
first of all it's very an easy example

396
00:16:09,040 --> 00:16:11,279
but the bigger problem

397
00:16:11,279 --> 00:16:14,000
is that it's a one function uh i have a

398
00:16:14,000 --> 00:16:15,680
customer that claims to have three

399
00:16:15,680 --> 00:16:17,120
million functions

400
00:16:17,120 --> 00:16:20,399
of course you cannot do this manually

401
00:16:20,399 --> 00:16:22,480
all right the other part of the problem

402
00:16:22,480 --> 00:16:24,720
is the loss of perimeter

403
00:16:24,720 --> 00:16:26,959
that means that if in the traditional

404
00:16:26,959 --> 00:16:29,360
modernist web application we had one

405
00:16:29,360 --> 00:16:31,839
entry point to the function

406
00:16:31,839 --> 00:16:33,120
an api

407
00:16:33,120 --> 00:16:34,880
where you put that go through the load

408
00:16:34,880 --> 00:16:36,959
balancer or an api gateway or something

409
00:16:36,959 --> 00:16:38,720
like this where you could put all your

410
00:16:38,720 --> 00:16:40,639
security controls

411
00:16:40,639 --> 00:16:42,639
that's not the case anymore

412
00:16:42,639 --> 00:16:45,120
now in a serverless cloud native and

413
00:16:45,120 --> 00:16:47,440
specifically service environment is an

414
00:16:47,440 --> 00:16:50,399
event-based architecture that means that

415
00:16:50,399 --> 00:16:53,839
the entry point to your code could be

416
00:16:53,839 --> 00:16:57,360
multiple type of things it could be

417
00:16:57,360 --> 00:17:00,320
data analytics it could be a file

418
00:17:00,320 --> 00:17:03,360
management so you can upload a file to a

419
00:17:03,360 --> 00:17:06,160
bucket and it will run a code you can

420
00:17:06,160 --> 00:17:07,760
change um

421
00:17:07,760 --> 00:17:09,919
data inside the database

422
00:17:09,919 --> 00:17:11,760
it will access the code you can send an

423
00:17:11,760 --> 00:17:14,400
email to someone it will write a code it

424
00:17:14,400 --> 00:17:16,480
will execute the code so

425
00:17:16,480 --> 00:17:18,720
you don't have just the entry point to

426
00:17:18,720 --> 00:17:22,799
start to to block uh attacks maybe

427
00:17:22,799 --> 00:17:23,760
um

428
00:17:23,760 --> 00:17:25,919
and we'll see an example

429
00:17:25,919 --> 00:17:27,599
all right so what are the serverless

430
00:17:27,599 --> 00:17:30,000
risks that we know of uh first of all

431
00:17:30,000 --> 00:17:31,919
it's called event injection it's like

432
00:17:31,919 --> 00:17:34,400
the regular traditional ejection attacks

433
00:17:34,400 --> 00:17:37,600
sql injection command injection

434
00:17:37,600 --> 00:17:39,760
code injection etc

435
00:17:39,760 --> 00:17:42,080
xxc output inside

436
00:17:42,080 --> 00:17:44,960
but now instead of just an input

437
00:17:44,960 --> 00:17:47,600
coming into the function or to the code

438
00:17:47,600 --> 00:17:49,600
it's based on an event

439
00:17:49,600 --> 00:17:51,840
input injection so you have to create an

440
00:17:51,840 --> 00:17:54,400
event somehow

441
00:17:54,400 --> 00:17:56,799
some sometimes it will be just but it

442
00:17:56,799 --> 00:17:58,960
will be created by the application but

443
00:17:58,960 --> 00:18:00,640
your injection should be inside this

444
00:18:00,640 --> 00:18:02,080
event

445
00:18:02,080 --> 00:18:04,720
uh broken authentication we talked about

446
00:18:04,720 --> 00:18:07,120
the fact that they are stateless so you

447
00:18:07,120 --> 00:18:08,160
have to

448
00:18:08,160 --> 00:18:10,160
find the right where the right

449
00:18:10,160 --> 00:18:11,600
authentication

450
00:18:11,600 --> 00:18:13,840
uh and maintain that sensitive data

451
00:18:13,840 --> 00:18:17,360
exposure of course in the cloud inside

452
00:18:17,360 --> 00:18:18,880
the runtime of the function you have the

453
00:18:18,880 --> 00:18:20,720
code and the keys these

454
00:18:20,720 --> 00:18:22,640
data is sensitive

455
00:18:22,640 --> 00:18:24,720
overprivileged function we talked about

456
00:18:24,720 --> 00:18:27,679
that vulnerable dependencies sca yeah

457
00:18:27,679 --> 00:18:30,720
everyone knows that it's not new logging

458
00:18:30,720 --> 00:18:33,440
and monitoring taking back from the os

459
00:18:33,440 --> 00:18:35,760
top 10 maybe

460
00:18:35,760 --> 00:18:37,600
this is just another way you cannot put

461
00:18:37,600 --> 00:18:39,919
um network monitoring or

462
00:18:39,919 --> 00:18:41,760
put an access log suit it's not it

463
00:18:41,760 --> 00:18:44,240
doesn't work the same the logs

464
00:18:44,240 --> 00:18:46,400
are inside

465
00:18:46,400 --> 00:18:48,400
the cloud and you have to be able to

466
00:18:48,400 --> 00:18:50,799
extract them monitor them report them

467
00:18:50,799 --> 00:18:52,799
metrics them it's just a different way

468
00:18:52,799 --> 00:18:54,000
of doing it

469
00:18:54,000 --> 00:18:56,000
open resources so misconfigured

470
00:18:56,000 --> 00:18:58,720
functions misconfigured buckets things

471
00:18:58,720 --> 00:19:01,760
like this denial service what control um

472
00:19:01,760 --> 00:19:04,960
it gets denied wallet so either you get

473
00:19:04,960 --> 00:19:08,000
dosed or you pay for the execution

474
00:19:08,000 --> 00:19:10,480
and insecure share space which is

475
00:19:10,480 --> 00:19:13,840
the data slash uh the data folder that

476
00:19:13,840 --> 00:19:17,120
is could be shared between executions

477
00:19:17,120 --> 00:19:18,640
uh and of course insecure secret

478
00:19:18,640 --> 00:19:19,840
management

479
00:19:19,840 --> 00:19:21,760
which could be let's see a demo

480
00:19:21,760 --> 00:19:22,799
um

481
00:19:22,799 --> 00:19:24,960
so in this demo there is one bucket file

482
00:19:24,960 --> 00:19:27,120
and one lambda function that trigger is

483
00:19:27,120 --> 00:19:30,400
triggered so executes whenever a file is

484
00:19:30,400 --> 00:19:32,640
changed or uploaded to the bucket the

485
00:19:32,640 --> 00:19:34,559
attacker is going to upload a file

486
00:19:34,559 --> 00:19:36,720
directly to the bucket through an api

487
00:19:36,720 --> 00:19:38,880
yeah but just to the bucket note

488
00:19:38,880 --> 00:19:40,880
uh to the code

489
00:19:40,880 --> 00:19:42,960
the bucket will execute the function the

490
00:19:42,960 --> 00:19:45,360
function is vulnerable

491
00:19:45,360 --> 00:19:47,520
so the file here will cause the function

492
00:19:47,520 --> 00:19:49,679
to send a malicious

493
00:19:49,679 --> 00:19:51,520
uh to

494
00:19:51,520 --> 00:19:54,880
send the hit's own set of access keys to

495
00:19:54,880 --> 00:19:57,360
the developer uh to the attacker and

496
00:19:57,360 --> 00:19:59,120
then the attacker from his own

497
00:19:59,120 --> 00:20:01,919
workstation now can interact with any

498
00:20:01,919 --> 00:20:03,919
service in the cloud

499
00:20:03,919 --> 00:20:06,000
based on those permissions so this is

500
00:20:06,000 --> 00:20:08,240
why the permissions are

501
00:20:08,240 --> 00:20:11,280
are important if they are too permissive

502
00:20:11,280 --> 00:20:13,120
now the attacker can

503
00:20:13,120 --> 00:20:15,520
steal data from database for example

504
00:20:15,520 --> 00:20:17,120
even if the function doesn't actually

505
00:20:17,120 --> 00:20:20,400
interact with the database um and this

506
00:20:20,400 --> 00:20:21,520
is uh

507
00:20:21,520 --> 00:20:23,760
this is something that has happened like

508
00:20:23,760 --> 00:20:26,320
the capital one hack so let's see let's

509
00:20:26,320 --> 00:20:28,879
see a demo

510
00:20:29,120 --> 00:20:31,039
i have here a vulnerable application

511
00:20:31,039 --> 00:20:33,360
we'll talk about that later

512
00:20:33,360 --> 00:20:36,400
i open here an http tunnel just to be

513
00:20:36,400 --> 00:20:38,799
able to run something on my computer

514
00:20:38,799 --> 00:20:40,640
in this vulnerable application there is

515
00:20:40,640 --> 00:20:44,640
a feedback form that you can fill

516
00:20:46,320 --> 00:20:49,520
and you can also attach files right so

517
00:20:49,520 --> 00:20:51,200
now i'm going to look at the network

518
00:20:51,200 --> 00:20:53,520
here

519
00:20:55,440 --> 00:20:57,919
and when i upload a file attach a file

520
00:20:57,919 --> 00:21:01,760
sorry i see that the file

521
00:21:01,760 --> 00:21:04,159
remains and i also get

522
00:21:04,159 --> 00:21:05,679
a url

523
00:21:05,679 --> 00:21:08,080
that points me to an s3 bucket it's a

524
00:21:08,080 --> 00:21:10,799
signed url so i can upload files to

525
00:21:10,799 --> 00:21:12,960
directly to the f3 bucket

526
00:21:12,960 --> 00:21:14,080
now

527
00:21:14,080 --> 00:21:16,400
i uploaded it now i'm going to change

528
00:21:16,400 --> 00:21:17,520
the function

529
00:21:17,520 --> 00:21:19,600
uh the file name to something the

530
00:21:19,600 --> 00:21:20,799
vulnerable

531
00:21:20,799 --> 00:21:23,200
that will exploit the vulnerable

532
00:21:23,200 --> 00:21:26,559
function i'm going to do a curl here

533
00:21:26,559 --> 00:21:29,039
into my own tunnel here

534
00:21:29,039 --> 00:21:30,559
with the environment and there's a

535
00:21:30,559 --> 00:21:32,080
command to run to capture the

536
00:21:32,080 --> 00:21:33,600
environment variables and i'm going to

537
00:21:33,600 --> 00:21:37,039
wrap it with base64.

538
00:21:40,159 --> 00:21:44,280
and let's see what happens

539
00:21:48,400 --> 00:21:50,400
if you can you can understand that the

540
00:21:50,400 --> 00:21:52,159
function is vulnerable to command

541
00:21:52,159 --> 00:21:54,240
injection here because i can put a

542
00:21:54,240 --> 00:21:57,760
semicolon and run another command

543
00:21:57,760 --> 00:21:59,280
and as you can see here i got a few

544
00:21:59,280 --> 00:22:01,760
requests i'm going to look at the second

545
00:22:01,760 --> 00:22:04,400
one and i'm going to see the base64 data

546
00:22:04,400 --> 00:22:07,679
so now all i have to do is

547
00:22:07,679 --> 00:22:10,400
decode it right it's just text so let's

548
00:22:10,400 --> 00:22:13,799
decode that

549
00:22:14,720 --> 00:22:16,880
and i got all the environment variables

550
00:22:16,880 --> 00:22:18,799
these environment variables contain the

551
00:22:18,799 --> 00:22:20,480
keys

552
00:22:20,480 --> 00:22:21,919
to the lambdas

553
00:22:21,919 --> 00:22:23,840
oh the keys that

554
00:22:23,840 --> 00:22:24,799
um

555
00:22:24,799 --> 00:22:27,520
used by the lambda to access with the

556
00:22:27,520 --> 00:22:30,720
cloud so if i'm using those keys

557
00:22:30,720 --> 00:22:33,360
i am now impersonating to the function

558
00:22:33,360 --> 00:22:34,799
even though i'm running from my own

559
00:22:34,799 --> 00:22:36,000
computer

560
00:22:36,000 --> 00:22:38,559
i'm from the application or from the

561
00:22:38,559 --> 00:22:41,360
cloud's perspective i am the function

562
00:22:41,360 --> 00:22:43,280
until these credentials

563
00:22:43,280 --> 00:22:46,720
uh are expired which is a few hours

564
00:22:46,720 --> 00:22:48,720
i'm going to write

565
00:22:48,720 --> 00:22:51,360
this aws cli command you can see that i

566
00:22:51,360 --> 00:22:54,240
did f3ls which gives me all the buckets

567
00:22:54,240 --> 00:22:56,559
inside the account even though they are

568
00:22:56,559 --> 00:22:58,799
not related to the some of them not

569
00:22:58,799 --> 00:23:01,360
related to the application

570
00:23:01,360 --> 00:23:03,039
and i can go further

571
00:23:03,039 --> 00:23:07,440
and inspect uh what files are inside i

572
00:23:07,440 --> 00:23:09,440
can see a folder

573
00:23:09,440 --> 00:23:11,760
and

574
00:23:14,960 --> 00:23:17,840
if i get into the folder

575
00:23:17,840 --> 00:23:19,280
and moving on

576
00:23:19,280 --> 00:23:21,280
i'm going to see that there are so it's

577
00:23:21,280 --> 00:23:23,679
a dates folder and inside that i can see

578
00:23:23,679 --> 00:23:26,320
there are there are two files here so

579
00:23:26,320 --> 00:23:29,280
now i'm going to do the api to the cli

580
00:23:29,280 --> 00:23:32,640
command to get the specific file

581
00:23:32,640 --> 00:23:35,120
so the bucket is the same bucket here

582
00:23:35,120 --> 00:23:38,000
and the file is this file

583
00:23:38,000 --> 00:23:39,919
i'm going to download it to my own

584
00:23:39,919 --> 00:23:42,400
computer

585
00:23:45,520 --> 00:23:49,279
now i'm going to read the file

586
00:23:49,360 --> 00:23:51,679
yeah it's a receipt and now i can also

587
00:23:51,679 --> 00:23:54,480
modify the file so i'll just

588
00:23:54,480 --> 00:23:56,480
modify all the file

589
00:23:56,480 --> 00:24:00,240
modify the file and then upload it back

590
00:24:00,240 --> 00:24:01,039
to

591
00:24:01,039 --> 00:24:03,600
the bucket

592
00:24:03,600 --> 00:24:06,000
uh and we'll see in a second that this

593
00:24:06,000 --> 00:24:08,799
file exists of course what i could do

594
00:24:08,799 --> 00:24:12,000
also is not just upload the bucket maybe

595
00:24:12,000 --> 00:24:12,880
i could

596
00:24:12,880 --> 00:24:14,240
try to

597
00:24:14,240 --> 00:24:17,440
understand what other permissions i have

598
00:24:17,440 --> 00:24:18,400
in the

599
00:24:18,400 --> 00:24:19,279
uh

600
00:24:19,279 --> 00:24:20,559
in the system

601
00:24:20,559 --> 00:24:22,799
so the function has in the cloud so

602
00:24:22,799 --> 00:24:25,279
maybe i can delete the bucket or even

603
00:24:25,279 --> 00:24:27,360
interact with other services

604
00:24:27,360 --> 00:24:29,520
as well

605
00:24:29,520 --> 00:24:32,960
the problem with this security is mostly

606
00:24:32,960 --> 00:24:35,039
about scale not only but mostly about

607
00:24:35,039 --> 00:24:37,919
scale because even though services are

608
00:24:37,919 --> 00:24:39,440
functions are small

609
00:24:39,440 --> 00:24:41,360
uh it's hard to scale that when you have

610
00:24:41,360 --> 00:24:43,919
dozens hundreds thousands or maybe

611
00:24:43,919 --> 00:24:45,919
millions i don't know so lots of

612
00:24:45,919 --> 00:24:48,240
services that you have to understand how

613
00:24:48,240 --> 00:24:50,480
to secure them um

614
00:24:50,480 --> 00:24:53,120
we hear about three buckets they're open

615
00:24:53,120 --> 00:24:55,600
as qs as soon as they're open

616
00:24:55,600 --> 00:24:56,400
there are

617
00:24:56,400 --> 00:24:59,679
frequent developments right so it's not

618
00:24:59,679 --> 00:25:03,200
short it's short cycles so you have new

619
00:25:03,200 --> 00:25:05,760
um new deployments

620
00:25:05,760 --> 00:25:08,720
on a daily basis if not more production

621
00:25:08,720 --> 00:25:10,320
pushed

622
00:25:10,320 --> 00:25:13,679
data sorry code push to production

623
00:25:13,679 --> 00:25:15,360
on a daily basis

624
00:25:15,360 --> 00:25:17,600
what services talks

625
00:25:17,600 --> 00:25:20,320
what resources talks to what services

626
00:25:20,320 --> 00:25:22,159
appsec team or security team doesn't

627
00:25:22,159 --> 00:25:25,840
know that it's really hard to understand

628
00:25:25,840 --> 00:25:28,559
many developers view appsec or security

629
00:25:28,559 --> 00:25:30,480
team it's hard to understand what is

630
00:25:30,480 --> 00:25:32,159
important when you have

631
00:25:32,159 --> 00:25:34,960
dozens thousands of resources

632
00:25:34,960 --> 00:25:36,880
and you have to understand also if the

633
00:25:36,880 --> 00:25:38,880
security is the same as i mentioned it's

634
00:25:38,880 --> 00:25:41,039
not exactly the same you have the same

635
00:25:41,039 --> 00:25:43,760
attacks but the entry point could could

636
00:25:43,760 --> 00:25:45,760
be fair the impact could if could it be

637
00:25:45,760 --> 00:25:48,159
different the attack surface

638
00:25:48,159 --> 00:25:49,200
so

639
00:25:49,200 --> 00:25:51,200
it's a little bit different

640
00:25:51,200 --> 00:25:53,120
and if you have a problem in the cloud

641
00:25:53,120 --> 00:25:54,559
who takes care of that is that

642
00:25:54,559 --> 00:25:56,559
developers is that the devops is that

643
00:25:56,559 --> 00:25:59,360
the security team who owns that

644
00:25:59,360 --> 00:26:01,840
this is not something that is equal in

645
00:26:01,840 --> 00:26:03,760
every organization and you have and you

646
00:26:03,760 --> 00:26:05,919
see struggles with it

647
00:26:05,919 --> 00:26:07,840
all right so we have this

648
00:26:07,840 --> 00:26:10,320
system that we need to secure so we want

649
00:26:10,320 --> 00:26:12,720
to go left right shift left have a

650
00:26:12,720 --> 00:26:14,960
security before we go to production and

651
00:26:14,960 --> 00:26:17,760
we want to run our security tools as

652
00:26:17,760 --> 00:26:18,559
they

653
00:26:18,559 --> 00:26:22,159
are does these tools work on serverless

654
00:26:22,159 --> 00:26:25,120
not so much because um

655
00:26:25,120 --> 00:26:27,520
serverless has not just

656
00:26:27,520 --> 00:26:30,000
and as i said not just a perimeter front

657
00:26:30,000 --> 00:26:32,000
edge that you can test so you cannot run

658
00:26:32,000 --> 00:26:35,600
take zap or any dust system give it an

659
00:26:35,600 --> 00:26:37,279
endpoint and

660
00:26:37,279 --> 00:26:39,600
point it to an api and say hey start

661
00:26:39,600 --> 00:26:41,760
fuzzing it it doesn't work like this it

662
00:26:41,760 --> 00:26:44,080
will always get a response immediately

663
00:26:44,080 --> 00:26:46,559
but then something that starts a chain

664
00:26:46,559 --> 00:26:48,400
in the cloud

665
00:26:48,400 --> 00:26:51,120
and something else will happen also most

666
00:26:51,120 --> 00:26:53,520
of the functions if you look at a big

667
00:26:53,520 --> 00:26:57,200
system does not have urls or endpoint

668
00:26:57,200 --> 00:26:59,039
these are event based it's not something

669
00:26:59,039 --> 00:27:01,600
that you can target through an api or or

670
00:27:01,600 --> 00:27:03,679
an endpoint

671
00:27:03,679 --> 00:27:05,760
if you run fast it's a little bit

672
00:27:05,760 --> 00:27:06,799
different

673
00:27:06,799 --> 00:27:09,679
most tools are hard to scale especially

674
00:27:09,679 --> 00:27:12,159
on this type of environment and they are

675
00:27:12,159 --> 00:27:13,200
very

676
00:27:13,200 --> 00:27:17,600
disrupted to the development ccd

677
00:27:17,600 --> 00:27:21,360
let's see how that works uh in uh take

678
00:27:21,360 --> 00:27:23,760
the traditional tools and apply them on

679
00:27:23,760 --> 00:27:25,440
a modern pipeline

680
00:27:25,440 --> 00:27:26,159
so

681
00:27:26,159 --> 00:27:29,120
mario the developer and luigi the apsec

682
00:27:29,120 --> 00:27:33,200
team wanna run security uh

683
00:27:33,200 --> 00:27:35,760
maybe sassed on the

684
00:27:35,760 --> 00:27:36,640
uh

685
00:27:36,640 --> 00:27:39,039
on the code repository but that

686
00:27:39,039 --> 00:27:40,960
requires a lot of tweaking from the

687
00:27:40,960 --> 00:27:42,799
security teams otherwise you get a lot

688
00:27:42,799 --> 00:27:45,120
of false positive and then they want to

689
00:27:45,120 --> 00:27:49,600
run uh i asked maybe uh but then yeah is

690
00:27:49,600 --> 00:27:50,640
needs

691
00:27:50,640 --> 00:27:53,279
code coverage testing coverage uh and

692
00:27:53,279 --> 00:27:55,360
the f6 team needs to run that and to

693
00:27:55,360 --> 00:27:57,520
make take care of that so they want to

694
00:27:57,520 --> 00:28:00,399
run dust but that's hey it's not you

695
00:28:00,399 --> 00:28:03,039
cannot really test everything with dust

696
00:28:03,039 --> 00:28:05,679
and dust as you know needs configuration

697
00:28:05,679 --> 00:28:07,840
and you have to run cycles so mostly

698
00:28:07,840 --> 00:28:10,000
dust is not a cicd tool no i'm not

699
00:28:10,000 --> 00:28:12,240
saying it's not possible but it takes a

700
00:28:12,240 --> 00:28:14,559
lot of work from the developer to give

701
00:28:14,559 --> 00:28:16,799
priorities to talk to the absent team or

702
00:28:16,799 --> 00:28:18,320
the security team to hey we have a new

703
00:28:18,320 --> 00:28:21,120
version now test this api that api so

704
00:28:21,120 --> 00:28:22,320
it's different

705
00:28:22,320 --> 00:28:24,399
so how do you test

706
00:28:24,399 --> 00:28:26,799
serverless applications all right so

707
00:28:26,799 --> 00:28:30,399
this is uh taken from aws my robot

708
00:28:30,399 --> 00:28:31,679
architecture

709
00:28:31,679 --> 00:28:34,320
where you have one api and a few

710
00:28:34,320 --> 00:28:36,640
services and resources behind

711
00:28:36,640 --> 00:28:39,679
let's see what i can do with this

712
00:28:39,679 --> 00:28:41,600
all right i can run

713
00:28:41,600 --> 00:28:43,760
sneak or

714
00:28:43,760 --> 00:28:46,960
white source or black dock any kind of

715
00:28:46,960 --> 00:28:49,600
sca basically or an image scanning but

716
00:28:49,600 --> 00:28:51,120
that will cover

717
00:28:51,120 --> 00:28:53,679
basically ten percent of my what about

718
00:28:53,679 --> 00:28:57,360
my my actual custom code uh those are

719
00:28:57,360 --> 00:28:59,279
it's not that it's not good it's

720
00:28:59,279 --> 00:29:01,039
something that you should do but your

721
00:29:01,039 --> 00:29:03,039
own code and your own configuration are

722
00:29:03,039 --> 00:29:07,600
still at risk uh sca and image scanning

723
00:29:07,600 --> 00:29:09,679
is so um

724
00:29:09,679 --> 00:29:13,279
common that even the cloud providers

725
00:29:13,279 --> 00:29:15,760
and many open source provider

726
00:29:15,760 --> 00:29:19,120
so this is a good start but it doesn't

727
00:29:19,120 --> 00:29:21,840
control your code your services and your

728
00:29:21,840 --> 00:29:23,760
configurations in the cloud

729
00:29:23,760 --> 00:29:24,880
so

730
00:29:24,880 --> 00:29:27,039
what about infrastructure as code i've

731
00:29:27,039 --> 00:29:30,080
seen some of those coming up

732
00:29:30,080 --> 00:29:33,279
there are some good ones uh palo alto

733
00:29:33,279 --> 00:29:35,520
uh recently acquired

734
00:29:35,520 --> 00:29:38,159
um bridge crew and there are some other

735
00:29:38,159 --> 00:29:40,480
good tools so

736
00:29:40,480 --> 00:29:42,799
yeah that's a good thing to do it will

737
00:29:42,799 --> 00:29:44,480
find some

738
00:29:44,480 --> 00:29:46,159
misconfigurations or security

739
00:29:46,159 --> 00:29:48,240
misconfigurations in the cloud

740
00:29:48,240 --> 00:29:51,679
but zero code coverage uh it has limited

741
00:29:51,679 --> 00:29:53,600
visibility doesn't see anything other

742
00:29:53,600 --> 00:29:55,760
than the temp the yaml file or something

743
00:29:55,760 --> 00:29:58,640
like this zero logic zero prioritization

744
00:29:58,640 --> 00:29:59,679
just

745
00:29:59,679 --> 00:30:03,520
text based uh configurations so

746
00:30:03,520 --> 00:30:05,520
yeah it's a nice one it's shift left

747
00:30:05,520 --> 00:30:06,399
really

748
00:30:06,399 --> 00:30:08,399
doesn't take a lot of effort but you

749
00:30:08,399 --> 00:30:10,640
don't get all the security

750
00:30:10,640 --> 00:30:12,799
uh that you cover that you need

751
00:30:12,799 --> 00:30:14,799
so about about oh yeah i asked ist is

752
00:30:14,799 --> 00:30:18,080
one of the mode um modern apsec tools

753
00:30:18,080 --> 00:30:20,000
it's very accurate

754
00:30:20,000 --> 00:30:22,320
very dependable

755
00:30:22,320 --> 00:30:25,440
but reliable but the problem is

756
00:30:25,440 --> 00:30:26,399
uh

757
00:30:26,399 --> 00:30:28,880
that there are no servers so it's hard

758
00:30:28,880 --> 00:30:31,279
to instrument the server when

759
00:30:31,279 --> 00:30:32,880
you don't have

760
00:30:32,880 --> 00:30:34,720
servers

761
00:30:34,720 --> 00:30:37,039
all right so let's run sas right static

762
00:30:37,039 --> 00:30:38,399
analysis

763
00:30:38,399 --> 00:30:41,520
well sas can see each resource

764
00:30:41,520 --> 00:30:44,240
differently or separate

765
00:30:44,240 --> 00:30:47,120
but it doesn't work like this there are

766
00:30:47,120 --> 00:30:48,880
uh no

767
00:30:48,880 --> 00:30:50,559
in many cases no

768
00:30:50,559 --> 00:30:52,000
source

769
00:30:52,000 --> 00:30:55,520
or sync that is based on http the code

770
00:30:55,520 --> 00:30:57,600
or the flow doesn't start in one place

771
00:30:57,600 --> 00:30:59,840
and ends in oh and start at the

772
00:30:59,840 --> 00:31:01,679
beginning of the function adds at the

773
00:31:01,679 --> 00:31:03,440
beginning of the function no then there

774
00:31:03,440 --> 00:31:05,760
is an sqs in the middle and then this

775
00:31:05,760 --> 00:31:08,480
code runs so this is one flow

776
00:31:08,480 --> 00:31:10,000
basically

777
00:31:10,000 --> 00:31:13,519
sas can give you a lot of noise running

778
00:31:13,519 --> 00:31:16,159
don't take my word for it just try

779
00:31:16,159 --> 00:31:18,880
then dust right so dust can fuzz

780
00:31:18,880 --> 00:31:21,200
uh this api

781
00:31:21,200 --> 00:31:25,200
so maybe maybe this code not not sure

782
00:31:25,200 --> 00:31:27,120
depends on if it's synchronous or

783
00:31:27,120 --> 00:31:29,440
asynchronous mostly

784
00:31:29,440 --> 00:31:32,799
just arrow inside so it's asynchronous

785
00:31:32,799 --> 00:31:36,240
so um dust will not be able to find

786
00:31:36,240 --> 00:31:38,080
anything here not to mention these these

787
00:31:38,080 --> 00:31:40,559
this this and that

788
00:31:40,559 --> 00:31:41,600
all right

789
00:31:41,600 --> 00:31:43,840
so it doesn't really work not saying you

790
00:31:43,840 --> 00:31:45,919
cannot get anything out of it but it's a

791
00:31:45,919 --> 00:31:47,200
lot of work

792
00:31:47,200 --> 00:31:50,720
for uh an effort for a little value you

793
00:31:50,720 --> 00:31:53,519
need something different in serverless

794
00:31:53,519 --> 00:31:54,240
so

795
00:31:54,240 --> 00:31:55,039
what

796
00:31:55,039 --> 00:31:56,880
i would suggest is something different i

797
00:31:56,880 --> 00:31:58,720
think that in the cloud serverless

798
00:31:58,720 --> 00:32:00,480
application needs to be tested in a

799
00:32:00,480 --> 00:32:03,039
different way and what we suggest

800
00:32:03,039 --> 00:32:05,039
is that a different completely different

801
00:32:05,039 --> 00:32:07,360
approach to what you suggest so you

802
00:32:07,360 --> 00:32:09,600
you forget what you know from app stick

803
00:32:09,600 --> 00:32:10,480
teams

804
00:32:10,480 --> 00:32:13,120
or absent tools sorry and try to

805
00:32:13,120 --> 00:32:14,799
understand a different concept which is

806
00:32:14,799 --> 00:32:16,000
continuous

807
00:32:16,000 --> 00:32:17,120
autonomous

808
00:32:17,120 --> 00:32:18,559
and automated

809
00:32:18,559 --> 00:32:20,480
so everything happens in the background

810
00:32:20,480 --> 00:32:22,480
what happens is that you connect with

811
00:32:22,480 --> 00:32:24,080
three clicks

812
00:32:24,080 --> 00:32:27,279
that is possible with the cloud

813
00:32:27,279 --> 00:32:29,279
then this service or what we do is

814
00:32:29,279 --> 00:32:31,600
automatically discover everything

815
00:32:31,600 --> 00:32:33,679
analyze all the code all the weaknesses

816
00:32:33,679 --> 00:32:35,519
the attack services the flows between

817
00:32:35,519 --> 00:32:36,799
the services

818
00:32:36,799 --> 00:32:39,519
based on that we create a specific

819
00:32:39,519 --> 00:32:41,679
simulation that relates to each and

820
00:32:41,679 --> 00:32:43,200
every one of those

821
00:32:43,200 --> 00:32:45,600
and because we're inside the cloud we

822
00:32:45,600 --> 00:32:47,519
can actually validate what we're doing

823
00:32:47,519 --> 00:32:50,880
so if we say let's try to upload

824
00:32:50,880 --> 00:32:53,679
a file even if it's not allowed i can

825
00:32:53,679 --> 00:32:55,360
then see if the file was uploaded

826
00:32:55,360 --> 00:32:57,120
because it come inside

827
00:32:57,120 --> 00:32:59,360
and then the nice thing is that apart

828
00:32:59,360 --> 00:33:01,200
from reporting it

829
00:33:01,200 --> 00:33:03,840
still we can still monitor it so

830
00:33:03,840 --> 00:33:06,000
continually monitoring it so if a

831
00:33:06,000 --> 00:33:07,679
developer now pushes

832
00:33:07,679 --> 00:33:11,200
a new code deploys new code new api

833
00:33:11,200 --> 00:33:13,919
we get that and we automatically scan

834
00:33:13,919 --> 00:33:15,840
that so you don't have to take to the

835
00:33:15,840 --> 00:33:18,000
app to the security team hey i built a

836
00:33:18,000 --> 00:33:20,399
new api

837
00:33:20,399 --> 00:33:22,799
it runs this code can you test this here

838
00:33:22,799 --> 00:33:25,120
is the end point or

839
00:33:25,120 --> 00:33:26,880
there is a new function

840
00:33:26,880 --> 00:33:29,039
can you test that no everything happens

841
00:33:29,039 --> 00:33:31,760
automatically in the background

842
00:33:31,760 --> 00:33:33,679
so let's see an example the developer

843
00:33:33,679 --> 00:33:37,279
pushes new api that runs a function

844
00:33:37,279 --> 00:33:39,519
then what happened is that we'll notice

845
00:33:39,519 --> 00:33:41,360
that there is a new api this api is

846
00:33:41,360 --> 00:33:43,120
connected to the function the function

847
00:33:43,120 --> 00:33:45,279
then uploads the file to the storage

848
00:33:45,279 --> 00:33:46,880
then runs the function then sends an

849
00:33:46,880 --> 00:33:48,559
email to the user

850
00:33:48,559 --> 00:33:51,440
what we'll do is that we'll scan each

851
00:33:51,440 --> 00:33:55,519
and every one of those endpoints or flow

852
00:33:55,519 --> 00:33:58,559
and then we'll try to see where is

853
00:33:58,559 --> 00:34:01,279
maybe we found there is a problem

854
00:34:01,279 --> 00:34:03,679
and after we are able to identify there

855
00:34:03,679 --> 00:34:04,799
is a problem

856
00:34:04,799 --> 00:34:07,840
we can then extract the keys

857
00:34:07,840 --> 00:34:09,918
again we're inside the cloud and then

858
00:34:09,918 --> 00:34:12,480
tell you what is your impact

859
00:34:12,480 --> 00:34:15,839
so not just there is a bug but also if

860
00:34:15,839 --> 00:34:17,679
there is a bug here and someone access

861
00:34:17,679 --> 00:34:20,719
it they can access this table

862
00:34:20,719 --> 00:34:23,359
this is just one scenario a few

863
00:34:23,359 --> 00:34:25,918
two years ago in black hats europe i

864
00:34:25,918 --> 00:34:29,359
showed how with my voice i can

865
00:34:29,359 --> 00:34:31,119
steal data from the database just

866
00:34:31,119 --> 00:34:33,119
talking to alexa

867
00:34:33,119 --> 00:34:34,960
this is available on youtube you can

868
00:34:34,960 --> 00:34:37,440
look for it behind the lamb the

869
00:34:37,440 --> 00:34:39,520
the alexa there was a function a

870
00:34:39,520 --> 00:34:42,239
vulnerable function so this is just one

871
00:34:42,239 --> 00:34:44,719
example

872
00:34:44,800 --> 00:34:47,199
so for example if you have this policy

873
00:34:47,199 --> 00:34:49,119
which gives a lot of permissions on our

874
00:34:49,119 --> 00:34:50,480
three and dynamo

875
00:34:50,480 --> 00:34:52,879
with an automated tool you can just get

876
00:34:52,879 --> 00:34:54,560
the right one line

877
00:34:54,560 --> 00:34:57,200
of the just the action that you need

878
00:34:57,200 --> 00:35:00,240
and there whether there is an injection

879
00:35:00,240 --> 00:35:02,800
attack or a vulnerable code you can get

880
00:35:02,800 --> 00:35:05,119
the actual vulnerability and the impact

881
00:35:05,119 --> 00:35:06,079
for it

882
00:35:06,079 --> 00:35:07,680
all right so

883
00:35:07,680 --> 00:35:09,119
let's wrap up

884
00:35:09,119 --> 00:35:10,880
security needs to be different in

885
00:35:10,880 --> 00:35:13,040
serverless security testing

886
00:35:13,040 --> 00:35:15,839
and it can be much better in terms of

887
00:35:15,839 --> 00:35:18,000
how you operate things and if you want

888
00:35:18,000 --> 00:35:19,920
to know more and learn more about

889
00:35:19,920 --> 00:35:21,680
serverless security

890
00:35:21,680 --> 00:35:23,280
uh there is an os

891
00:35:23,280 --> 00:35:26,160
uh serverless top 10 project which i

892
00:35:26,160 --> 00:35:30,000
lead together with

893
00:35:30,000 --> 00:35:32,640
with other team members um i'm working

894
00:35:32,640 --> 00:35:34,800
on this there is also an open call so if

895
00:35:34,800 --> 00:35:37,920
you have data like vulnerabilities

896
00:35:37,920 --> 00:35:40,240
attacks things like this in serverless

897
00:35:40,240 --> 00:35:42,880
please help us we are trying to build a

898
00:35:42,880 --> 00:35:46,240
new version for this report but it's

899
00:35:46,240 --> 00:35:48,400
open source so you can go and get it

900
00:35:48,400 --> 00:35:49,839
also

901
00:35:49,839 --> 00:35:51,599
there is a

902
00:35:51,599 --> 00:35:53,839
open source project called dvsa damn

903
00:35:53,839 --> 00:35:56,320
vulnerable service application

904
00:35:56,320 --> 00:35:59,040
which i created with some contributors

905
00:35:59,040 --> 00:36:00,000
of course

906
00:36:00,000 --> 00:36:02,160
uh you can use it you can deploy it with

907
00:36:02,160 --> 00:36:04,720
three clicks as i said it's easy

908
00:36:04,720 --> 00:36:07,520
so you just click click and it deploys

909
00:36:07,520 --> 00:36:09,119
it into your cloud

910
00:36:09,119 --> 00:36:11,680
please please please do not deploy this

911
00:36:11,680 --> 00:36:13,599
on any account with sensitive

912
00:36:13,599 --> 00:36:14,800
information

913
00:36:14,800 --> 00:36:17,359
or production or anything is important

914
00:36:17,359 --> 00:36:19,760
because it's vulnerable that means that

915
00:36:19,760 --> 00:36:22,160
someone can steal these keys for example

916
00:36:22,160 --> 00:36:25,200
and access other services or other data

917
00:36:25,200 --> 00:36:27,839
in the cloud

918
00:36:28,480 --> 00:36:31,520
uh that's it for today thank you again

919
00:36:31,520 --> 00:36:34,800
i'm sorry that i cannot answer questions

920
00:36:34,800 --> 00:36:35,920
um

921
00:36:35,920 --> 00:36:38,400
probably landed by now but i'm on a

922
00:36:38,400 --> 00:36:41,920
security checks or passport checks uh so

923
00:36:41,920 --> 00:36:44,640
shoot me an email catch me on

924
00:36:44,640 --> 00:36:45,599
twitter

925
00:36:45,599 --> 00:36:48,079
github whenever wherever you want

926
00:36:48,079 --> 00:36:50,320
uh thanks again

927
00:36:50,320 --> 00:36:52,160
and

928
00:36:52,160 --> 00:36:55,399
see you around

929
00:37:00,960 --> 00:37:01,839
the

930
00:37:01,839 --> 00:37:04,839
remote

