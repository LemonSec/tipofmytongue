1
00:00:39,160 --> 00:00:42,279
[Music]

2
00:00:42,640 --> 00:00:45,640
foreign

3
00:00:50,879 --> 00:00:53,760
um i'm gonna switch in english so since

4
00:00:53,760 --> 00:00:54,719
the talk

5
00:00:54,719 --> 00:00:56,399
will be in english so

6
00:00:56,399 --> 00:01:00,160
everyone hi everybody uh welcome to um

7
00:01:00,160 --> 00:01:03,280
to this new talk regarding uh fico and

8
00:01:03,280 --> 00:01:04,959
fico sidekick

9
00:01:04,959 --> 00:01:07,920
uh today we're gonna talk about how uh

10
00:01:07,920 --> 00:01:10,240
we can use fico and fico cyclic to

11
00:01:10,240 --> 00:01:14,000
create a powerful response engine for

12
00:01:14,000 --> 00:01:16,799
for kubernetes

13
00:01:16,799 --> 00:01:19,200
uh i'll start introducing myself

14
00:01:19,200 --> 00:01:21,600
i'm stefano as david said and i'm a

15
00:01:21,600 --> 00:01:25,439
computer researcher in sysdig

16
00:01:25,439 --> 00:01:26,400
usually

17
00:01:26,400 --> 00:01:30,400
i ask um to the crowd if they know uh

18
00:01:30,400 --> 00:01:32,479
the uh the monument here in the picture

19
00:01:32,479 --> 00:01:34,640
but i guess anyone knows

20
00:01:34,640 --> 00:01:36,400
um the

21
00:01:36,400 --> 00:01:38,079
where is the monument here so i'm from

22
00:01:38,079 --> 00:01:40,560
midanno and

23
00:01:40,560 --> 00:01:43,280
i'm also part of the fico community and

24
00:01:43,280 --> 00:01:47,280
i'm also a farco contributor

25
00:01:48,159 --> 00:01:50,560
to start our journey today

26
00:01:50,560 --> 00:01:52,960
let's just start breaking down

27
00:01:52,960 --> 00:01:55,439
our title into two pieces and let's

28
00:01:55,439 --> 00:01:58,000
focus on the two main components we are

29
00:01:58,000 --> 00:01:59,280
going to

30
00:01:59,280 --> 00:02:00,719
cover today

31
00:02:00,719 --> 00:02:03,040
so the first one is obviously filecom

32
00:02:03,040 --> 00:02:05,200
and fico is our

33
00:02:05,200 --> 00:02:07,600
runtime security detection engine

34
00:02:07,600 --> 00:02:10,000
which detect and create alert

35
00:02:10,000 --> 00:02:12,319
and in case of anomalies and and if

36
00:02:12,319 --> 00:02:14,800
something bad is going on inside

37
00:02:14,800 --> 00:02:16,720
our containers

38
00:02:16,720 --> 00:02:19,280
so here is where the detection happens

39
00:02:19,280 --> 00:02:21,200
and and the security alerts are

40
00:02:21,200 --> 00:02:22,560
generated

41
00:02:22,560 --> 00:02:25,280
but we'll be diving to fico uh later on

42
00:02:25,280 --> 00:02:26,640
in this talk

43
00:02:26,640 --> 00:02:29,440
uh the second component is fico cyclic

44
00:02:29,440 --> 00:02:31,680
and we can see

45
00:02:31,680 --> 00:02:33,280
we can see it as our

46
00:02:33,280 --> 00:02:36,000
notification engine capable of

47
00:02:36,000 --> 00:02:37,840
forwarding events

48
00:02:37,840 --> 00:02:40,080
to external ecosystems and trigger the

49
00:02:40,080 --> 00:02:41,440
action we want

50
00:02:41,440 --> 00:02:43,360
like for for example destroy the

51
00:02:43,360 --> 00:02:45,200
container

52
00:02:45,200 --> 00:02:47,680
the goal for this talk is showing

53
00:02:47,680 --> 00:02:49,599
how these two components work together

54
00:02:49,599 --> 00:02:52,400
and now we can use an external function

55
00:02:52,400 --> 00:02:54,319
to create a strong kubernetes response

56
00:02:54,319 --> 00:02:55,200
engine

57
00:02:55,200 --> 00:02:57,360
um capable of

58
00:02:57,360 --> 00:02:59,040
executing

59
00:02:59,040 --> 00:03:01,519
automatic action to quickly respond and

60
00:03:01,519 --> 00:03:02,480
secure

61
00:03:02,480 --> 00:03:04,400
our environment as soon as possible in

62
00:03:04,400 --> 00:03:06,879
case something bad uh happens in our

63
00:03:06,879 --> 00:03:08,239
environment

64
00:03:08,239 --> 00:03:10,239
and we know in cyber attacks the

65
00:03:10,239 --> 00:03:11,519
response time

66
00:03:11,519 --> 00:03:14,080
the response timing might be fundamental

67
00:03:14,080 --> 00:03:15,360
and um

68
00:03:15,360 --> 00:03:17,120
and can save us from

69
00:03:17,120 --> 00:03:19,840
the total compromise or uh or a massive

70
00:03:19,840 --> 00:03:22,239
vertex filtration

71
00:03:22,239 --> 00:03:25,280
uh before to start uh with the with the

72
00:03:25,280 --> 00:03:27,599
two components mentioned before uh let's

73
00:03:27,599 --> 00:03:30,080
do a step back uh to see briefly uh

74
00:03:30,080 --> 00:03:32,400
briefly how kubernetes works

75
00:03:32,400 --> 00:03:34,879
uh in the kubernetes environment uh we

76
00:03:34,879 --> 00:03:37,120
have a master node where the cube api

77
00:03:37,120 --> 00:03:38,239
server

78
00:03:38,239 --> 00:03:39,680
is placed

79
00:03:39,680 --> 00:03:42,000
we know uh the user want

80
00:03:42,000 --> 00:03:45,040
when the user wants to

81
00:03:45,040 --> 00:03:47,120
once execute commands on the cluster

82
00:03:47,120 --> 00:03:50,080
using the command line cube ctl the user

83
00:03:50,080 --> 00:03:52,319
is actually interacting with the cube

84
00:03:52,319 --> 00:03:53,840
api server

85
00:03:53,840 --> 00:03:55,840
and the cluster might have more than one

86
00:03:55,840 --> 00:03:57,439
worker node then

87
00:03:57,439 --> 00:03:59,680
in here is where the containers are

88
00:03:59,680 --> 00:04:02,640
actually created and deployed

89
00:04:02,640 --> 00:04:05,200
in each worker node

90
00:04:05,200 --> 00:04:07,599
the cubelet is is deployed to talk with

91
00:04:07,599 --> 00:04:10,000
the master and receive and get the

92
00:04:10,000 --> 00:04:11,599
different actions

93
00:04:11,599 --> 00:04:14,480
from the kubec server so i won't go too

94
00:04:14,480 --> 00:04:16,238
much in details

95
00:04:16,238 --> 00:04:18,320
on the kubernetes components available

96
00:04:18,320 --> 00:04:20,639
by defaulting masters and worker nodes

97
00:04:20,639 --> 00:04:24,240
but this is a super level uh on how

98
00:04:24,240 --> 00:04:28,240
equivalent this cluster works

99
00:04:28,240 --> 00:04:31,040
um we started already talking about why

100
00:04:31,040 --> 00:04:33,280
we need the kubernetes response engine

101
00:04:33,280 --> 00:04:35,040
and um

102
00:04:35,040 --> 00:04:36,639
and as we said

103
00:04:36,639 --> 00:04:38,800
the very first reason is to have a

104
00:04:38,800 --> 00:04:40,800
faster incident uh

105
00:04:40,800 --> 00:04:42,880
faster than the uh incident detection

106
00:04:42,880 --> 00:04:45,759
and the faster reaction times uh since

107
00:04:45,759 --> 00:04:47,360
timing as we said this is truly

108
00:04:47,360 --> 00:04:49,280
fundamental for us

109
00:04:49,280 --> 00:04:52,560
um we need also to keep in mind that

110
00:04:52,560 --> 00:04:55,360
kubernetes clusters span a large number

111
00:04:55,360 --> 00:04:58,080
of nodes and and containers deployment

112
00:04:58,080 --> 00:05:00,400
so it might be pretty challenging

113
00:05:00,400 --> 00:05:02,560
managing or investigating or even

114
00:05:02,560 --> 00:05:04,560
correlating events in such big

115
00:05:04,560 --> 00:05:06,160
environments

116
00:05:06,160 --> 00:05:07,120
so

117
00:05:07,120 --> 00:05:09,840
this might means hours or days

118
00:05:09,840 --> 00:05:12,000
lost in operational stuff delaying even

119
00:05:12,000 --> 00:05:13,199
more

120
00:05:13,199 --> 00:05:15,440
our incident response actions and the

121
00:05:15,440 --> 00:05:19,199
final results would be a completely

122
00:05:19,199 --> 00:05:21,919
inefficient reaction time

123
00:05:21,919 --> 00:05:25,440
in case of the security events uh so

124
00:05:25,440 --> 00:05:27,680
uh having an automatic response means

125
00:05:27,680 --> 00:05:30,000
also having a more scalable solution and

126
00:05:30,000 --> 00:05:31,199
it could makes

127
00:05:31,199 --> 00:05:33,440
life way easier uh when you need to

128
00:05:33,440 --> 00:05:34,880
implement uh

129
00:05:34,880 --> 00:05:38,000
automatic actions or or even

130
00:05:38,000 --> 00:05:40,639
a playbook of actions so by now i should

131
00:05:40,639 --> 00:05:42,960
have already uh almost convinced you

132
00:05:42,960 --> 00:05:44,880
that it sounds like it sounds like

133
00:05:44,880 --> 00:05:48,080
pretty uh useful uh solution for

134
00:05:48,080 --> 00:05:50,000
security purposes but let's leave the

135
00:05:50,000 --> 00:05:51,039
discussion

136
00:05:51,039 --> 00:05:54,639
uh for the end of this talk

137
00:05:55,440 --> 00:05:57,280
we can we can now start with the first

138
00:05:57,280 --> 00:05:59,360
component and as

139
00:05:59,360 --> 00:06:01,199
as often happens we need to start from

140
00:06:01,199 --> 00:06:04,880
the past and talk about um some history

141
00:06:04,880 --> 00:06:08,800
about five co and it's progressive today

142
00:06:08,800 --> 00:06:11,600
um so fico is around time security

143
00:06:11,600 --> 00:06:13,919
project uh originally created by sysdig

144
00:06:13,919 --> 00:06:16,000
back in uh 2016.

145
00:06:16,000 --> 00:06:19,039
in in 20 in 2018 fico has been donated

146
00:06:19,039 --> 00:06:22,160
to the cncf and it became the first

147
00:06:22,160 --> 00:06:23,520
cmcf

148
00:06:23,520 --> 00:06:25,520
runtime security project

149
00:06:25,520 --> 00:06:27,840
um

150
00:06:28,240 --> 00:06:31,039
the next natural step will be

151
00:06:31,039 --> 00:06:33,280
to make it a graduate project right now

152
00:06:33,280 --> 00:06:35,440
is is a is in

153
00:06:35,440 --> 00:06:36,400
the

154
00:06:36,400 --> 00:06:39,120
incubation level uh and the next step

155
00:06:39,120 --> 00:06:40,400
will be the graduate project like

156
00:06:40,400 --> 00:06:42,639
kubernetes but we will see what is going

157
00:06:42,639 --> 00:06:44,800
to happen in uh

158
00:06:44,800 --> 00:06:46,319
in the future

159
00:06:46,319 --> 00:06:49,680
uh in in this year so also a huge

160
00:06:49,680 --> 00:06:51,520
community raised behind

161
00:06:51,520 --> 00:06:54,880
um beyond fico and and and the community

162
00:06:54,880 --> 00:06:57,360
is also running uh currently running the

163
00:06:57,360 --> 00:06:59,440
project and and make the project always

164
00:06:59,440 --> 00:07:02,000
better uh with always new fico rules to

165
00:07:02,000 --> 00:07:04,639
uh to enhance the detection as well

166
00:07:04,639 --> 00:07:07,919
uh recently has been also uh presented

167
00:07:07,919 --> 00:07:10,240
the the new plug-in approach for fico

168
00:07:10,240 --> 00:07:13,199
which could let fico works with the uh

169
00:07:13,199 --> 00:07:14,800
cloud logs and

170
00:07:14,800 --> 00:07:18,000
the opportunity to develop um also uh

171
00:07:18,000 --> 00:07:19,680
plugins to work with different log

172
00:07:19,680 --> 00:07:24,800
sources for um web servers or also

173
00:07:24,800 --> 00:07:27,919
different applications

174
00:07:28,080 --> 00:07:30,880
um so we said fico is our runtime

175
00:07:30,880 --> 00:07:33,440
security project but um

176
00:07:33,440 --> 00:07:35,440
right now uh

177
00:07:35,440 --> 00:07:37,919
the question you might have uh is why

178
00:07:37,919 --> 00:07:40,240
focusing on runtime security to create a

179
00:07:40,240 --> 00:07:41,599
response engine

180
00:07:41,599 --> 00:07:43,440
and the answer this question for and

181
00:07:43,440 --> 00:07:45,280
answering this question let me use the

182
00:07:45,280 --> 00:07:48,400
physical uh security alarm metaphor

183
00:07:48,400 --> 00:07:49,120
so

184
00:07:49,120 --> 00:07:51,120
uh we usually talk insecurity about

185
00:07:51,120 --> 00:07:52,960
prevention intrusion and this is where

186
00:07:52,960 --> 00:07:54,879
we usually focus where

187
00:07:54,879 --> 00:07:56,720
our main attention

188
00:07:56,720 --> 00:07:59,120
we know that fences uh door locks

189
00:07:59,120 --> 00:08:01,120
perimeter sensor around the house are

190
00:08:01,120 --> 00:08:03,680
really uh super important to know uh

191
00:08:03,680 --> 00:08:06,080
what what to be aware and what is going

192
00:08:06,080 --> 00:08:09,199
on outside outside um and

193
00:08:09,199 --> 00:08:10,560
and if someone

194
00:08:10,560 --> 00:08:13,520
is actually trying uh to break in

195
00:08:13,520 --> 00:08:15,199
um

196
00:08:15,199 --> 00:08:17,360
we are all familiar with the security

197
00:08:17,360 --> 00:08:20,000
mechanism used for uh prevention

198
00:08:20,000 --> 00:08:23,120
intrusion like uh password mfa mechanism

199
00:08:23,120 --> 00:08:26,479
firewall and if we go specifically

200
00:08:26,479 --> 00:08:29,360
uh in in container world we talk about

201
00:08:29,360 --> 00:08:31,120
image scanning

202
00:08:31,120 --> 00:08:33,599
or vulnerability scanning for container

203
00:08:33,599 --> 00:08:36,719
registry or pipeline and so on

204
00:08:36,719 --> 00:08:39,519
and basically what we are what we are

205
00:08:39,519 --> 00:08:42,399
doing is creating a big wall around our

206
00:08:42,399 --> 00:08:44,959
container or our environment but the

207
00:08:44,959 --> 00:08:47,040
real question here is

208
00:08:47,040 --> 00:08:48,880
uh is it enough

209
00:08:48,880 --> 00:08:50,080
and

210
00:08:50,080 --> 00:08:52,560
the answer is obviously no and we can

211
00:08:52,560 --> 00:08:54,880
and we can already see uh the problems

212
00:08:54,880 --> 00:08:57,120
with this approach so let's assume that

213
00:08:57,120 --> 00:09:00,080
the robber is uh is able to break into

214
00:09:00,080 --> 00:09:02,640
our house and steal

215
00:09:02,640 --> 00:09:03,600
all our

216
00:09:03,600 --> 00:09:05,360
money for instance

217
00:09:05,360 --> 00:09:07,600
uh we actually don't know

218
00:09:07,600 --> 00:09:09,839
what is currently going on inside our

219
00:09:09,839 --> 00:09:12,640
house or inside our container or and if

220
00:09:12,640 --> 00:09:14,720
someone is trying to take our stuff out

221
00:09:14,720 --> 00:09:16,560
of the safe

222
00:09:16,560 --> 00:09:18,320
this because

223
00:09:18,320 --> 00:09:20,480
with this approach we have no visibility

224
00:09:20,480 --> 00:09:23,680
on on the inside and our focus so far

225
00:09:23,680 --> 00:09:25,680
was just to keep the bad guys outside

226
00:09:25,680 --> 00:09:28,320
avoiding with um with basically all our

227
00:09:28,320 --> 00:09:30,320
strengths breaking

228
00:09:30,320 --> 00:09:31,120
and

229
00:09:31,120 --> 00:09:32,560
another key point

230
00:09:32,560 --> 00:09:35,680
is that in security not all is actually

231
00:09:35,680 --> 00:09:38,240
well known and already seen so we know

232
00:09:38,240 --> 00:09:40,800
how to secure our environment from

233
00:09:40,800 --> 00:09:43,839
and if we think about it um zero days

234
00:09:43,839 --> 00:09:46,000
are the main example here that the wall

235
00:09:46,000 --> 00:09:48,480
approach is actually um lacking of

236
00:09:48,480 --> 00:09:51,440
something

237
00:09:51,440 --> 00:09:53,360
so let's move a bit our focus on the

238
00:09:53,360 --> 00:09:56,000
inside and what we can actually do to

239
00:09:56,000 --> 00:09:58,399
have a better visibility of what is

240
00:09:58,399 --> 00:10:00,720
going on inside our house or inside our

241
00:10:00,720 --> 00:10:01,839
containers

242
00:10:01,839 --> 00:10:04,560
so we could actually uh install some

243
00:10:04,560 --> 00:10:07,440
motion sensor or an interior cameras

244
00:10:07,440 --> 00:10:10,320
into our house to see what is going on

245
00:10:10,320 --> 00:10:12,640
uh in case someone and in case someone

246
00:10:12,640 --> 00:10:16,399
was able um to break in his moves

247
00:10:16,399 --> 00:10:17,839
and what is actually stealing or

248
00:10:17,839 --> 00:10:19,200
breaking

249
00:10:19,200 --> 00:10:22,480
and in the in security terms uh in this

250
00:10:22,480 --> 00:10:24,560
way we could be able to see all the

251
00:10:24,560 --> 00:10:27,360
attack paths and get alerted um is

252
00:10:27,360 --> 00:10:29,120
something is something malicious is

253
00:10:29,120 --> 00:10:30,160
going on

254
00:10:30,160 --> 00:10:31,440
um

255
00:10:31,440 --> 00:10:34,000
in addition we could we could also be

256
00:10:34,000 --> 00:10:36,480
aware of what is has been stolen and we

257
00:10:36,480 --> 00:10:38,079
know that in uh

258
00:10:38,079 --> 00:10:39,440
security

259
00:10:39,440 --> 00:10:42,000
isn't that easy uh to find out compared

260
00:10:42,000 --> 00:10:43,519
to the physical security where it's

261
00:10:43,519 --> 00:10:46,160
pretty i mean it's pretty obvious uh to

262
00:10:46,160 --> 00:10:48,880
find out unfortunately

263
00:10:48,880 --> 00:10:51,920
uh in addition it's also useful for

264
00:10:51,920 --> 00:10:54,959
forwarding purposes to know what

265
00:10:54,959 --> 00:10:57,200
basically we did what or

266
00:10:57,200 --> 00:10:59,279
what exactly happened and when did it

267
00:10:59,279 --> 00:11:01,680
happen and so on so to implement the

268
00:11:01,680 --> 00:11:04,240
detection intrusion in container world

269
00:11:04,240 --> 00:11:06,079
we can use fico and this detection

270
00:11:06,079 --> 00:11:08,640
engine to find runtime anomalies and

271
00:11:08,640 --> 00:11:09,680
create

272
00:11:09,680 --> 00:11:11,360
security alerts

273
00:11:11,360 --> 00:11:14,959
over malicious behaviors

274
00:11:14,959 --> 00:11:17,360
and i think we can all agree this is the

275
00:11:17,360 --> 00:11:19,920
approach we must take so don't get me

276
00:11:19,920 --> 00:11:21,519
wrong i'm not saying

277
00:11:21,519 --> 00:11:23,920
that focusing on prevention intrusion is

278
00:11:23,920 --> 00:11:25,760
just a waste of time

279
00:11:25,760 --> 00:11:27,760
and money but

280
00:11:27,760 --> 00:11:30,560
as we know security works in layers and

281
00:11:30,560 --> 00:11:32,560
what i'm suggesting here is combining

282
00:11:32,560 --> 00:11:35,680
fico with prevention tools or techniques

283
00:11:35,680 --> 00:11:37,440
to create what we call the

284
00:11:37,440 --> 00:11:41,040
the defensive uh in-depth approach

285
00:11:41,040 --> 00:11:43,519
the problem uh could be how we can

286
00:11:43,519 --> 00:11:46,320
actually do that but luckily for us fico

287
00:11:46,320 --> 00:11:49,279
knows how to do it for us so that's fine

288
00:11:49,279 --> 00:11:53,120
um so fico allows us um to monitor the

289
00:11:53,120 --> 00:11:56,000
inside uh and monitor what is actually

290
00:11:56,000 --> 00:11:59,279
going on in in our containers in our

291
00:11:59,279 --> 00:12:00,639
linux machine

292
00:12:00,639 --> 00:12:03,279
uh in kubernetes clusters and and put

293
00:12:03,279 --> 00:12:06,160
together and it put together mainly uh

294
00:12:06,160 --> 00:12:09,600
two uh resources so syscalls and and

295
00:12:09,600 --> 00:12:12,959
kubernetes logs

296
00:12:13,200 --> 00:12:15,600
uh the first question you might have now

297
00:12:15,600 --> 00:12:18,880
uh it might be uh wait a minute why we

298
00:12:18,880 --> 00:12:21,040
use uh cisco's

299
00:12:21,040 --> 00:12:23,600
and the answer is pretty simple um if we

300
00:12:23,600 --> 00:12:26,480
think about how cisco works

301
00:12:26,480 --> 00:12:28,399
anything you do you know in all the

302
00:12:28,399 --> 00:12:31,440
layers uh generates a lot of syscalls

303
00:12:31,440 --> 00:12:33,200
from run a binary

304
00:12:33,200 --> 00:12:35,279
to open a connection or read or write a

305
00:12:35,279 --> 00:12:36,320
file

306
00:12:36,320 --> 00:12:39,120
so system course are our program enter

307
00:12:39,120 --> 00:12:41,839
to the kernel uh to perform actions and

308
00:12:41,839 --> 00:12:44,480
as you can imagine um all this

309
00:12:44,480 --> 00:12:47,200
information uh can be used for uh for

310
00:12:47,200 --> 00:12:49,200
different purposes

311
00:12:49,200 --> 00:12:51,760
uh the fico purpose is to use these

312
00:12:51,760 --> 00:12:54,959
events for security and create

313
00:12:54,959 --> 00:12:56,720
runtime detection

314
00:12:56,720 --> 00:12:59,040
um this is possible thanks to the fico

315
00:12:59,040 --> 00:13:01,360
rules available in the fico engine and

316
00:13:01,360 --> 00:13:03,360
i'm going to show you

317
00:13:03,360 --> 00:13:05,120
an example later on

318
00:13:05,120 --> 00:13:07,279
in this talk

319
00:13:07,279 --> 00:13:09,839
so as we said before fico isn't just all

320
00:13:09,839 --> 00:13:12,959
about uh c scores but fico can receive

321
00:13:12,959 --> 00:13:16,000
and use um kubernetes autoblogs and the

322
00:13:16,000 --> 00:13:19,760
truth is that c scores are as important

323
00:13:19,760 --> 00:13:22,480
as kubernetes so uh as kubernetes or the

324
00:13:22,480 --> 00:13:25,200
clocks since uh we can answer different

325
00:13:25,200 --> 00:13:27,440
questions like what happened in a class

326
00:13:27,440 --> 00:13:29,440
in a kubernetes cluster

327
00:13:29,440 --> 00:13:30,480
who

328
00:13:30,480 --> 00:13:32,880
initiated an attack or when it started

329
00:13:32,880 --> 00:13:36,240
and so on so um using these events is

330
00:13:36,240 --> 00:13:39,760
possible uh to create fico rules over um

331
00:13:39,760 --> 00:13:42,639
kubernetes audit logs uh to generate

332
00:13:42,639 --> 00:13:44,399
also security alerts

333
00:13:44,399 --> 00:13:46,720
and i think you can start understanding

334
00:13:46,720 --> 00:13:49,279
um one of the

335
00:13:49,279 --> 00:13:50,880
real strengths of

336
00:13:50,880 --> 00:13:52,399
of file code so

337
00:13:52,399 --> 00:13:55,279
fico is able to put together ciscos and

338
00:13:55,279 --> 00:13:58,000
kubernetes audit logs and create a

339
00:13:58,000 --> 00:14:02,399
strong detection on both sides

340
00:14:02,399 --> 00:14:04,959
um so we talked already um pretty a lot

341
00:14:04,959 --> 00:14:07,279
about fico but let's try to deep dive

342
00:14:07,279 --> 00:14:09,680
into how it works

343
00:14:09,680 --> 00:14:13,199
uh as we said before uh it also starts

344
00:14:13,199 --> 00:14:15,839
with the from cisco's in canada model

345
00:14:15,839 --> 00:14:18,560
and since all the programs run

346
00:14:18,560 --> 00:14:20,639
in the host or in containers generate

347
00:14:20,639 --> 00:14:25,040
cisco um we can use ficos to

348
00:14:25,040 --> 00:14:26,720
bring

349
00:14:26,720 --> 00:14:27,440
the

350
00:14:27,440 --> 00:14:29,440
cisco from the from from the candle

351
00:14:29,440 --> 00:14:32,480
space to the user space so since since

352
00:14:32,480 --> 00:14:34,720
since the kernel mode the the kernel

353
00:14:34,720 --> 00:14:38,079
module uh needs i privileges ficos also

354
00:14:38,079 --> 00:14:42,000
support an ebpf probe which runs

355
00:14:42,000 --> 00:14:43,680
in a restricted in a restricted

356
00:14:43,680 --> 00:14:46,160
environment without requiring high

357
00:14:46,160 --> 00:14:48,000
privileges to run

358
00:14:48,000 --> 00:14:50,639
and thanks to the rim buffer uh we can

359
00:14:50,639 --> 00:14:54,079
move as as i said uh the cisco from the

360
00:14:54,079 --> 00:14:56,240
kernel space to the user space where we

361
00:14:56,240 --> 00:14:57,760
can find also

362
00:14:57,760 --> 00:15:00,880
two main libraries so libs libs cup

363
00:15:00,880 --> 00:15:03,279
libsyns and of course our

364
00:15:03,279 --> 00:15:06,800
fico engines which is the art of falco

365
00:15:06,800 --> 00:15:09,600
the libraries do all the activities like

366
00:15:09,600 --> 00:15:11,279
collecting the cisco generate the

367
00:15:11,279 --> 00:15:14,240
capture and in particular the live

368
00:15:14,240 --> 00:15:16,480
scenes library

369
00:15:16,480 --> 00:15:19,440
perform the event parsing and the reach

370
00:15:19,440 --> 00:15:21,600
the events with additional information

371
00:15:21,600 --> 00:15:23,279
coming from

372
00:15:23,279 --> 00:15:26,320
container runtime and kubernetes data

373
00:15:26,320 --> 00:15:27,920
and of course all this context

374
00:15:27,920 --> 00:15:30,399
information could be also used in in the

375
00:15:30,399 --> 00:15:33,279
fico rules to create detection over uh

376
00:15:33,279 --> 00:15:34,079
this

377
00:15:34,079 --> 00:15:35,759
information

378
00:15:35,759 --> 00:15:37,839
and as we said before

379
00:15:37,839 --> 00:15:39,600
besides cisco's

380
00:15:39,600 --> 00:15:42,560
fico support kubernetes audit logs and

381
00:15:42,560 --> 00:15:44,480
in the in the user space we can also

382
00:15:44,480 --> 00:15:47,360
find uh as we said the fico and the fico

383
00:15:47,360 --> 00:15:49,360
engine where the real detection happens

384
00:15:49,360 --> 00:15:50,399
and where

385
00:15:50,399 --> 00:15:52,560
the farc rules are in place and not

386
00:15:52,560 --> 00:15:55,519
generating uh security uh security

387
00:15:55,519 --> 00:15:57,920
events

388
00:15:58,000 --> 00:15:59,040
um

389
00:15:59,040 --> 00:16:01,199
as we have already understood the file

390
00:16:01,199 --> 00:16:03,839
and as i've already said the fico engine

391
00:16:03,839 --> 00:16:06,720
and the fico rules are

392
00:16:06,720 --> 00:16:09,360
the art of icon and here we have an

393
00:16:09,360 --> 00:16:12,560
example of uh fico rules to detect a

394
00:16:12,560 --> 00:16:14,800
terminal shell spawned uh in a in a

395
00:16:14,800 --> 00:16:15,920
container

396
00:16:15,920 --> 00:16:18,000
and you can see here the uh the

397
00:16:18,000 --> 00:16:19,839
structure with condition

398
00:16:19,839 --> 00:16:23,040
um output prior the priority and also

399
00:16:23,040 --> 00:16:25,680
tags which can be used uh to customize

400
00:16:25,680 --> 00:16:28,800
the rules that we we want to activate in

401
00:16:28,800 --> 00:16:30,959
in filecom

402
00:16:30,959 --> 00:16:33,440
we can also define lists and macros

403
00:16:33,440 --> 00:16:36,399
which can be used in root condition to

404
00:16:36,399 --> 00:16:37,360
make them

405
00:16:37,360 --> 00:16:39,839
easier and more readable

406
00:16:39,839 --> 00:16:42,000
and fico rules support

407
00:16:42,000 --> 00:16:44,320
logical operators

408
00:16:44,320 --> 00:16:46,000
and also

409
00:16:46,000 --> 00:16:48,639
there are also other different operators

410
00:16:48,639 --> 00:16:51,440
like the operator in if we need to work

411
00:16:51,440 --> 00:16:54,399
with lists and operator and operators

412
00:16:54,399 --> 00:16:57,440
like start with and end with um if we

413
00:16:57,440 --> 00:16:59,600
need to uh to match strings and work

414
00:16:59,600 --> 00:17:01,440
with strings

415
00:17:01,440 --> 00:17:03,440
file the fico rule set is collected in

416
00:17:03,440 --> 00:17:07,839
uh yum files and you can easily add your

417
00:17:07,839 --> 00:17:10,079
your custom rules just by editing those

418
00:17:10,079 --> 00:17:11,119
files

419
00:17:11,119 --> 00:17:13,520
and it's pretty uh a straightforward

420
00:17:13,520 --> 00:17:16,240
process so i suggest all of you

421
00:17:16,240 --> 00:17:18,559
to start playing with fico and start

422
00:17:18,559 --> 00:17:21,599
creating new rules for yourself and also

423
00:17:21,599 --> 00:17:22,400
share

424
00:17:22,400 --> 00:17:23,679
share them

425
00:17:23,679 --> 00:17:27,520
with the with the fico community as well

426
00:17:28,400 --> 00:17:30,080
here are some of the

427
00:17:30,080 --> 00:17:33,120
rules already available in five comma uh

428
00:17:33,120 --> 00:17:34,720
on the mitre

429
00:17:34,720 --> 00:17:37,679
attack framework for containers

430
00:17:37,679 --> 00:17:41,440
and as well and and as we can see uh the

431
00:17:41,440 --> 00:17:44,240
the fico rule set uh available already

432
00:17:44,240 --> 00:17:45,840
available covers

433
00:17:45,840 --> 00:17:49,039
a lot of a lot of

434
00:17:49,039 --> 00:17:51,200
tdps but in

435
00:17:51,200 --> 00:17:53,600
of course there are also other use cases

436
00:17:53,600 --> 00:17:55,200
related to

437
00:17:55,200 --> 00:17:57,520
kubernetes of the clogs and also use

438
00:17:57,520 --> 00:17:59,120
cases related to

439
00:17:59,120 --> 00:18:02,080
new cvs or crypto miners attack and so

440
00:18:02,080 --> 00:18:02,880
on

441
00:18:02,880 --> 00:18:05,440
so there is a constant work done by the

442
00:18:05,440 --> 00:18:07,200
falco community

443
00:18:07,200 --> 00:18:10,080
to check update or implement new rules

444
00:18:10,080 --> 00:18:12,559
uh basically every day so

445
00:18:12,559 --> 00:18:16,559
we need also um to keep in mind or that

446
00:18:16,559 --> 00:18:18,480
the the rules already available are

447
00:18:18,480 --> 00:18:21,280
pretty general since they have to

448
00:18:21,280 --> 00:18:24,160
uh they have to fit all the all the user

449
00:18:24,160 --> 00:18:26,799
all the users and all the customers and

450
00:18:26,799 --> 00:18:29,200
of course i suggest to start uh playing

451
00:18:29,200 --> 00:18:31,600
with fico and customizing your own wood

452
00:18:31,600 --> 00:18:33,840
based on your on your needs and your

453
00:18:33,840 --> 00:18:36,559
environment to avoid uh false positive

454
00:18:36,559 --> 00:18:39,039
and reduce the noise you may have uh

455
00:18:39,039 --> 00:18:41,600
introducing and enabling some specific

456
00:18:41,600 --> 00:18:43,280
rules um

457
00:18:43,280 --> 00:18:45,520
available out of the box

458
00:18:45,520 --> 00:18:46,400
so

459
00:18:46,400 --> 00:18:49,200
uh we know uh that to have a better

460
00:18:49,200 --> 00:18:51,520
detection we need to tune

461
00:18:51,520 --> 00:18:53,840
our own detection tailor for our own

462
00:18:53,840 --> 00:18:56,080
environment and for and basically for

463
00:18:56,080 --> 00:18:58,320
the use case that we are we are really

464
00:18:58,320 --> 00:19:00,240
interested to monitor otherwise we will

465
00:19:00,240 --> 00:19:03,120
have a lot of false positive and and we

466
00:19:03,120 --> 00:19:06,559
will miss what is really important

467
00:19:06,559 --> 00:19:08,799
uh let's move now our focus to the

468
00:19:08,799 --> 00:19:12,160
second component um we talked before and

469
00:19:12,160 --> 00:19:13,039
it is

470
00:19:13,039 --> 00:19:14,880
fico side kick

471
00:19:14,880 --> 00:19:16,960
we talked about fico so far and we

472
00:19:16,960 --> 00:19:19,440
understood that fico basically is a is

473
00:19:19,440 --> 00:19:21,280
an engine which

474
00:19:21,280 --> 00:19:24,320
generates security alerts based on uh on

475
00:19:24,320 --> 00:19:25,600
fico rules

476
00:19:25,600 --> 00:19:27,760
but what we can do with with those

477
00:19:27,760 --> 00:19:30,320
alerts and of course we can decide to

478
00:19:30,320 --> 00:19:31,360
keep them

479
00:19:31,360 --> 00:19:33,919
locally and just have a look at those

480
00:19:33,919 --> 00:19:36,799
those events but what about having uh

481
00:19:36,799 --> 00:19:39,200
for example an sui where you can filter

482
00:19:39,200 --> 00:19:41,600
those events uh or group them by

483
00:19:41,600 --> 00:19:43,840
severity or even start investigating

484
00:19:43,840 --> 00:19:45,760
from there

485
00:19:45,760 --> 00:19:47,919
and even more important why can we

486
00:19:47,919 --> 00:19:49,760
forward this even

487
00:19:49,760 --> 00:19:51,840
to somewhere else and perform proactive

488
00:19:51,840 --> 00:19:54,320
action uh with these alerts

489
00:19:54,320 --> 00:19:56,720
and fico sidekick indeed provide a nice

490
00:19:56,720 --> 00:20:00,000
ui for fico and i'm going to show you uh

491
00:20:00,000 --> 00:20:03,200
the the ui during the demo and and fico

492
00:20:03,200 --> 00:20:06,400
sidekick also allowed us to

493
00:20:06,400 --> 00:20:09,679
forward the fico alerts to a lot of

494
00:20:09,679 --> 00:20:12,880
different ecosystems

495
00:20:12,960 --> 00:20:15,120
um we can see here

496
00:20:15,120 --> 00:20:17,120
fico can be integrated with a bunch of

497
00:20:17,120 --> 00:20:19,200
different systems and a bunch of

498
00:20:19,200 --> 00:20:21,840
different uh for for for different

499
00:20:21,840 --> 00:20:24,640
purposes and you may want to receive the

500
00:20:24,640 --> 00:20:27,200
alert directly on slack for instance or

501
00:20:27,200 --> 00:20:28,720
for the events

502
00:20:28,720 --> 00:20:30,960
in the log management uh like splunk

503
00:20:30,960 --> 00:20:33,360
where you might have already uh your the

504
00:20:33,360 --> 00:20:34,880
text from dashboard that you are

505
00:20:34,880 --> 00:20:38,080
checking every day for uh for security

506
00:20:38,080 --> 00:20:40,320
uh misbehaviors

507
00:20:40,320 --> 00:20:43,360
and in alternative you you can you can

508
00:20:43,360 --> 00:20:44,480
do

509
00:20:44,480 --> 00:20:46,559
you can use those events for metrics or

510
00:20:46,559 --> 00:20:50,320
alerting with future duty or even more

511
00:20:50,320 --> 00:20:51,840
so

512
00:20:51,840 --> 00:20:52,799
but

513
00:20:52,799 --> 00:20:55,280
as you can imagine today we are going to

514
00:20:55,280 --> 00:20:58,480
focus our attention uh

515
00:20:58,480 --> 00:21:00,799
to the function as a service which are

516
00:21:00,799 --> 00:21:02,799
our major component

517
00:21:02,799 --> 00:21:06,559
to create our response engine

518
00:21:07,520 --> 00:21:08,640
and

519
00:21:08,640 --> 00:21:11,679
functional service due to their nato to

520
00:21:11,679 --> 00:21:12,799
receive

521
00:21:12,799 --> 00:21:15,440
events and perform a series of automated

522
00:21:15,440 --> 00:21:17,280
action are exactly what we were looking

523
00:21:17,280 --> 00:21:18,400
for

524
00:21:18,400 --> 00:21:21,200
um we have our event source which is

525
00:21:21,200 --> 00:21:23,440
fico and fico satic

526
00:21:23,440 --> 00:21:26,720
generating and forwarding events um and

527
00:21:26,720 --> 00:21:28,720
these events can trigger a function as a

528
00:21:28,720 --> 00:21:32,320
service or a workflow and perform

529
00:21:32,320 --> 00:21:35,440
actions in appropriately in this case in

530
00:21:35,440 --> 00:21:39,840
kubernetes and the action for kubernetes

531
00:21:39,840 --> 00:21:42,159
might be various and it depends of

532
00:21:42,159 --> 00:21:44,880
course on the root regard and the other

533
00:21:44,880 --> 00:21:47,200
severity and of course on the response

534
00:21:47,200 --> 00:21:49,039
that we want to achieve

535
00:21:49,039 --> 00:21:51,360
for instance if we see uh the rule that

536
00:21:51,360 --> 00:21:53,120
you have seen before related to the

537
00:21:53,120 --> 00:21:57,280
terminal shell opening the container uh

538
00:21:57,280 --> 00:21:59,520
let's say in production you may want to

539
00:21:59,520 --> 00:22:01,440
stop the container right away

540
00:22:01,440 --> 00:22:03,360
uh instead if you see

541
00:22:03,360 --> 00:22:06,080
uh for example rules like

542
00:22:06,080 --> 00:22:07,200
right below

543
00:22:07,200 --> 00:22:09,200
etc or right below

544
00:22:09,200 --> 00:22:10,640
dev

545
00:22:10,640 --> 00:22:12,640
you may want to respond in a different

546
00:22:12,640 --> 00:22:15,360
way since um the behavior is not

547
00:22:15,360 --> 00:22:18,000
malicious per se and you may want to

548
00:22:18,000 --> 00:22:20,480
proceed with the um with the event

549
00:22:20,480 --> 00:22:23,120
validation before to decide uh which

550
00:22:23,120 --> 00:22:27,840
action you want to you want to perform

551
00:22:27,860 --> 00:22:29,120
[Music]

552
00:22:29,120 --> 00:22:30,640
so

553
00:22:30,640 --> 00:22:33,840
but if we stop here for uh for a minute

554
00:22:33,840 --> 00:22:35,679
and we and we summarize what we have

555
00:22:35,679 --> 00:22:36,880
said so far

556
00:22:36,880 --> 00:22:38,320
uh we have our

557
00:22:38,320 --> 00:22:40,400
runtime security detection engine which

558
00:22:40,400 --> 00:22:41,760
is fico

559
00:22:41,760 --> 00:22:45,520
um we have also a spico sidekick which

560
00:22:45,520 --> 00:22:46,559
permits

561
00:22:46,559 --> 00:22:47,919
us to

562
00:22:47,919 --> 00:22:51,440
integrate the fico detection and send

563
00:22:51,440 --> 00:22:53,520
the alert to external ecosystem as we

564
00:22:53,520 --> 00:22:54,799
have said before

565
00:22:54,799 --> 00:22:58,159
and we also know now that there are um

566
00:22:58,159 --> 00:22:59,919
a function as a service

567
00:22:59,919 --> 00:23:02,080
available that receive events as an

568
00:23:02,080 --> 00:23:04,400
input and perform actions uh on

569
00:23:04,400 --> 00:23:05,840
kubernetes

570
00:23:05,840 --> 00:23:09,200
and so and then the action might be

571
00:23:09,200 --> 00:23:11,919
create delete or update the ports or

572
00:23:11,919 --> 00:23:15,120
even more but if we put all the pieces

573
00:23:15,120 --> 00:23:17,520
together we we got exactly

574
00:23:17,520 --> 00:23:19,440
what we wanted

575
00:23:19,440 --> 00:23:20,240
and

576
00:23:20,240 --> 00:23:23,039
uh here is what we wanted to achieve so

577
00:23:23,039 --> 00:23:26,080
using a function as a service like

578
00:23:26,080 --> 00:23:28,960
cubeless or openfast or argo it's

579
00:23:28,960 --> 00:23:31,919
possible to create a kubernetes response

580
00:23:31,919 --> 00:23:33,919
engine capable of

581
00:23:33,919 --> 00:23:36,640
performing a proactive action in case of

582
00:23:36,640 --> 00:23:39,360
anomalies or or malicious behavior in

583
00:23:39,360 --> 00:23:41,679
our environment and that was the goal

584
00:23:41,679 --> 00:23:43,440
that we have right

585
00:23:43,440 --> 00:23:44,559
so

586
00:23:44,559 --> 00:23:48,559
um it's now demo time um on what we

587
00:23:48,559 --> 00:23:51,120
discussed before and for this for this

588
00:23:51,120 --> 00:23:53,360
demo we are going to use fico fico

589
00:23:53,360 --> 00:23:55,120
sidekick and argo

590
00:23:55,120 --> 00:23:56,320
as our

591
00:23:56,320 --> 00:23:59,440
magic function and here here

592
00:23:59,440 --> 00:24:00,799
are the

593
00:24:00,799 --> 00:24:02,240
the components

594
00:24:02,240 --> 00:24:05,760
deployed for the demo and how they

595
00:24:05,760 --> 00:24:07,679
interact each other's

596
00:24:07,679 --> 00:24:09,360
i also added the links

597
00:24:09,360 --> 00:24:10,960
for the various components in case you

598
00:24:10,960 --> 00:24:12,080
want to

599
00:24:12,080 --> 00:24:15,520
start playing with them and as i said

600
00:24:15,520 --> 00:24:18,320
we are going to use argo to create our

601
00:24:18,320 --> 00:24:19,679
workflow but

602
00:24:19,679 --> 00:24:22,640
uh let's just spend a couple of works on

603
00:24:22,640 --> 00:24:24,960
on argo and and its component that we

604
00:24:24,960 --> 00:24:26,960
are going to use today

605
00:24:26,960 --> 00:24:28,400
so argo is

606
00:24:28,400 --> 00:24:30,960
another cncf project and we are going to

607
00:24:30,960 --> 00:24:33,840
use uh mainly two largo components so

608
00:24:33,840 --> 00:24:36,880
argo events and argo workflow

609
00:24:36,880 --> 00:24:40,320
uh argo event is a even driven uh

610
00:24:40,320 --> 00:24:43,039
workflow automated automation framework

611
00:24:43,039 --> 00:24:45,919
uh for kubernetes and it it basically

612
00:24:45,919 --> 00:24:48,640
allows us to automate action and trigger

613
00:24:48,640 --> 00:24:50,640
um kubernetes objects

614
00:24:50,640 --> 00:24:53,679
and in in our case our go events uh we

615
00:24:53,679 --> 00:24:54,960
will receive

616
00:24:54,960 --> 00:24:55,560
um

617
00:24:55,560 --> 00:24:56,880
[Music]

618
00:24:56,880 --> 00:24:59,039
the events from fico site we can push

619
00:24:59,039 --> 00:25:00,720
them into the even bus

620
00:25:00,720 --> 00:25:03,600
and in particular we are going to use

621
00:25:03,600 --> 00:25:04,559
two

622
00:25:04,559 --> 00:25:06,720
argo events objects during the demo so

623
00:25:06,720 --> 00:25:09,600
even sources and sensor and we will see

624
00:25:09,600 --> 00:25:13,600
in a minute how of the works

625
00:25:13,679 --> 00:25:16,240
argo workflow instead is the workflow

626
00:25:16,240 --> 00:25:19,279
engine uh used to uh orchestrate jobs in

627
00:25:19,279 --> 00:25:22,000
kubernetes and yearly and here is where

628
00:25:22,000 --> 00:25:25,039
our defined uh and and where we define

629
00:25:25,039 --> 00:25:27,520
and work and where we model

630
00:25:27,520 --> 00:25:30,240
the workflows and in in each step of the

631
00:25:30,240 --> 00:25:32,480
workflow is actually a separate

632
00:25:32,480 --> 00:25:34,559
container

633
00:25:34,559 --> 00:25:37,039
in this case we're going to use argo

634
00:25:37,039 --> 00:25:38,480
workflow

635
00:25:38,480 --> 00:25:41,360
to listen to the even bus and trigger

636
00:25:41,360 --> 00:25:43,440
the actions and then trigger the the

637
00:25:43,440 --> 00:25:46,000
workflow in case the criteria we uh we

638
00:25:46,000 --> 00:25:48,880
defined are matched

639
00:25:48,880 --> 00:25:51,520
so let's start with the demo and the

640
00:25:51,520 --> 00:25:53,360
goal let's just set the goal for this

641
00:25:53,360 --> 00:25:56,000
demo and the goal is to deploy a

642
00:25:56,000 --> 00:25:58,000
kubernetes response engine

643
00:25:58,000 --> 00:26:01,520
um which will react in case of a crypto

644
00:26:01,520 --> 00:26:03,919
miners attack uh or keto miner

645
00:26:03,919 --> 00:26:05,919
activities are detected in our

646
00:26:05,919 --> 00:26:08,240
environment so we are

647
00:26:08,240 --> 00:26:10,480
simulating the scenario where an adapter

648
00:26:10,480 --> 00:26:13,200
is able to act uh the application that

649
00:26:13,200 --> 00:26:16,000
we have in our container and and is also

650
00:26:16,000 --> 00:26:17,679
able to download the miner into the

651
00:26:17,679 --> 00:26:20,080
container and run it

652
00:26:20,080 --> 00:26:21,279
uh

653
00:26:21,279 --> 00:26:25,039
for this demo we are going to use

654
00:26:25,039 --> 00:26:26,320
detection

655
00:26:26,320 --> 00:26:27,200
over

656
00:26:27,200 --> 00:26:29,600
network connection to malicious ips and

657
00:26:29,600 --> 00:26:30,960
port

658
00:26:30,960 --> 00:26:34,400
and we found this uh these ips and ports

659
00:26:34,400 --> 00:26:37,039
related to cryptominers during our our

660
00:26:37,039 --> 00:26:40,559
resources our resources but of course uh

661
00:26:40,559 --> 00:26:43,360
this is just a way you can use uh fico

662
00:26:43,360 --> 00:26:45,279
to detect hypominers

663
00:26:45,279 --> 00:26:47,919
other ways actually are already covered

664
00:26:47,919 --> 00:26:50,400
uh by default file crews and if you are

665
00:26:50,400 --> 00:26:53,919
interested to this specific use case um

666
00:26:53,919 --> 00:26:55,760
i i suggest all of you to have a look at

667
00:26:55,760 --> 00:26:58,159
those rules that are already available

668
00:26:58,159 --> 00:27:00,880
for fico

669
00:27:00,880 --> 00:27:03,200
in this specific case uh the action that

670
00:27:03,200 --> 00:27:04,799
we want to trigger

671
00:27:04,799 --> 00:27:07,039
in the scenario is to

672
00:27:07,039 --> 00:27:09,679
destroy the pod in case connection

673
00:27:09,679 --> 00:27:11,919
related to crypto miners are detected

674
00:27:11,919 --> 00:27:14,720
since uh it's something it's a behavior

675
00:27:14,720 --> 00:27:16,640
that we want to

676
00:27:16,640 --> 00:27:19,039
to stop as soon as possible from from

677
00:27:19,039 --> 00:27:20,640
our environment

678
00:27:20,640 --> 00:27:23,039
and in the same way we could perform

679
00:27:23,039 --> 00:27:25,679
also other actions for uh for instance

680
00:27:25,679 --> 00:27:29,279
apply uh network uh policy uh into

681
00:27:29,279 --> 00:27:32,080
kubernetes to block ingress or egress

682
00:27:32,080 --> 00:27:35,760
for network connection and and so on

683
00:27:35,760 --> 00:27:36,640
so

684
00:27:36,640 --> 00:27:38,880
uh let's start now with the with the

685
00:27:38,880 --> 00:27:39,919
demo

686
00:27:39,919 --> 00:27:44,080
and we can we can start um

687
00:27:44,080 --> 00:27:46,720
just checking what we have in our uh in

688
00:27:46,720 --> 00:27:49,279
our environment and in this case uh we

689
00:27:49,279 --> 00:27:50,480
have argo

690
00:27:50,480 --> 00:27:53,600
argo events and fico um

691
00:27:53,600 --> 00:27:56,799
namespaces so let's deep dive into

692
00:27:56,799 --> 00:27:59,200
the argo events and let's see uh the

693
00:27:59,200 --> 00:28:00,080
argo

694
00:28:00,080 --> 00:28:02,320
the event source uh object that we have

695
00:28:02,320 --> 00:28:03,360
deployed

696
00:28:03,360 --> 00:28:07,279
um the first uh the first object is uh

697
00:28:07,279 --> 00:28:11,200
an event source object and in here um we

698
00:28:11,200 --> 00:28:14,240
we we defined the web book so

699
00:28:14,240 --> 00:28:16,159
there is a web book defined that is

700
00:28:16,159 --> 00:28:17,760
listening on port

701
00:28:17,760 --> 00:28:20,799
12000 in this case with endpoint um

702
00:28:20,799 --> 00:28:22,799
slash fico

703
00:28:22,799 --> 00:28:24,640
and this is one of the of the main

704
00:28:24,640 --> 00:28:26,559
components that we're going to use for

705
00:28:26,559 --> 00:28:30,480
argo let's see also the service that is

706
00:28:30,480 --> 00:28:33,840
as we said the service uh related to the

707
00:28:33,840 --> 00:28:36,720
to the events uh to the event or written

708
00:28:36,720 --> 00:28:38,399
to the object that you have seen

709
00:28:38,399 --> 00:28:41,520
uh uh listed on port twelve thousand

710
00:28:41,520 --> 00:28:43,440
uh let's also have a look at the sensors

711
00:28:43,440 --> 00:28:45,520
already in place so we have a minor uh

712
00:28:45,520 --> 00:28:49,279
ioc uh sensor uh deployed and in this

713
00:28:49,279 --> 00:28:52,240
case uh we are gonna match

714
00:28:52,240 --> 00:28:55,520
uh the the fico rule uh triggered

715
00:28:55,520 --> 00:28:59,520
in this case the name uh is uh detect uh

716
00:28:59,520 --> 00:29:01,360
outbound connection to

717
00:29:01,360 --> 00:29:04,399
twilio c minors found so in this case if

718
00:29:04,399 --> 00:29:07,520
this rule uh is gonna be trigger uh the

719
00:29:07,520 --> 00:29:09,039
sensor is going to

720
00:29:09,039 --> 00:29:11,840
uh to push the the event into the bus

721
00:29:11,840 --> 00:29:15,279
and and trigger um the workflow

722
00:29:15,279 --> 00:29:18,000
uh so as we as we have said before uh we

723
00:29:18,000 --> 00:29:21,279
need also an argo uh workflow in place

724
00:29:21,279 --> 00:29:23,279
um to say what

725
00:29:23,279 --> 00:29:25,600
what action to trigger

726
00:29:25,600 --> 00:29:27,840
so let's have a look at the

727
00:29:27,840 --> 00:29:30,720
argo uh work um work

728
00:29:30,720 --> 00:29:34,799
workflow uh available in the in in our

729
00:29:34,799 --> 00:29:37,200
in in our environment so in this case

730
00:29:37,200 --> 00:29:39,120
there is the delete pod template so

731
00:29:39,120 --> 00:29:40,880
let's have a look

732
00:29:40,880 --> 00:29:43,039
what it does

733
00:29:43,039 --> 00:29:44,480
and

734
00:29:44,480 --> 00:29:46,320
in this case

735
00:29:46,320 --> 00:29:47,919
we are using

736
00:29:47,919 --> 00:29:50,720
this image this is the image provided by

737
00:29:50,720 --> 00:29:53,440
the fico community and in this case

738
00:29:53,440 --> 00:29:56,960
we've just uh customized the um the

739
00:29:56,960 --> 00:29:58,000
action

740
00:29:58,000 --> 00:30:00,399
uh we can see here the image

741
00:30:00,399 --> 00:30:02,240
the image created and

742
00:30:02,240 --> 00:30:04,480
uh on the on on the bottom we can see

743
00:30:04,480 --> 00:30:06,880
the the delete pod function and in this

744
00:30:06,880 --> 00:30:09,120
case we are getting the pod name the

745
00:30:09,120 --> 00:30:11,039
namespace

746
00:30:11,039 --> 00:30:12,080
and

747
00:30:12,080 --> 00:30:13,679
at the end this is the action that we

748
00:30:13,679 --> 00:30:15,360
want to trigger so in this case as we

749
00:30:15,360 --> 00:30:16,240
said

750
00:30:16,240 --> 00:30:19,039
we want to uh terminating and deleting

751
00:30:19,039 --> 00:30:21,440
the pod as soon as we see

752
00:30:21,440 --> 00:30:25,360
some um crypto miners activities in our

753
00:30:25,360 --> 00:30:28,240
environment so this is the fico rules uh

754
00:30:28,240 --> 00:30:30,480
this is there are two lists

755
00:30:30,480 --> 00:30:33,120
one related to crypto miners ip and one

756
00:30:33,120 --> 00:30:35,679
related to the ports that we found we

757
00:30:35,679 --> 00:30:37,279
used by um

758
00:30:37,279 --> 00:30:40,320
by cryptominers and in this case we are

759
00:30:40,320 --> 00:30:44,000
getting just the connect uh cisco and

760
00:30:44,000 --> 00:30:46,559
and we are matching the

761
00:30:46,559 --> 00:30:49,520
uh the ips and we are checking the ips

762
00:30:49,520 --> 00:30:51,760
and the ports in the in the connection

763
00:30:51,760 --> 00:30:53,919
and of course the uh the priority is set

764
00:30:53,919 --> 00:30:57,120
to these are two critical since um

765
00:30:57,120 --> 00:30:57,919
we

766
00:30:57,919 --> 00:31:00,559
as i said we we need to stop uh the

767
00:31:00,559 --> 00:31:02,000
behavior right away

768
00:31:02,000 --> 00:31:04,640
so uh as we as we said at the beginning

769
00:31:04,640 --> 00:31:07,679
let's uh let's suppose that uh the

770
00:31:07,679 --> 00:31:12,880
alpine um container um contains uh our

771
00:31:12,880 --> 00:31:15,360
uh our application that has been uh

772
00:31:15,360 --> 00:31:19,039
compromised so let's um let's uh open a

773
00:31:19,039 --> 00:31:21,120
shallow in the container

774
00:31:21,120 --> 00:31:23,919
and see and see uh here we can see the

775
00:31:23,919 --> 00:31:25,279
the the

776
00:31:25,279 --> 00:31:27,360
the crypto mile the crypto miners that

777
00:31:27,360 --> 00:31:29,760
have been deployed by the attackers and

778
00:31:29,760 --> 00:31:32,399
we can run it and see what

779
00:31:32,399 --> 00:31:33,200
what

780
00:31:33,200 --> 00:31:35,200
what is going to happens when

781
00:31:35,200 --> 00:31:36,640
when

782
00:31:36,640 --> 00:31:38,720
when it has been

783
00:31:38,720 --> 00:31:41,200
executed so let's check now uh the

784
00:31:41,200 --> 00:31:43,039
status on the container and we can see

785
00:31:43,039 --> 00:31:46,000
that the status is terminated so the

786
00:31:46,000 --> 00:31:48,880
workflow has been uh correctly uh

787
00:31:48,880 --> 00:31:50,000
triggered

788
00:31:50,000 --> 00:31:52,240
and we can see now uh the all the

789
00:31:52,240 --> 00:31:55,120
details from um from argo

790
00:31:55,120 --> 00:31:57,840
um from argo workflow

791
00:31:57,840 --> 00:31:59,919
and so this is the argo ui where you can

792
00:31:59,919 --> 00:32:02,799
check if there is if actually the uh the

793
00:32:02,799 --> 00:32:04,960
argo workflow has been triggered

794
00:32:04,960 --> 00:32:07,200
correctly or or not in this case let's

795
00:32:07,200 --> 00:32:08,000
just

796
00:32:08,000 --> 00:32:09,919
uh find the workflow that has been

797
00:32:09,919 --> 00:32:12,080
triggered so we can find

798
00:32:12,080 --> 00:32:15,600
uh here that has been triggered 43

799
00:32:15,600 --> 00:32:17,360
seconds ago

800
00:32:17,360 --> 00:32:20,159
in this case uh we can also see

801
00:32:20,159 --> 00:32:22,559
uh all the information related to the to

802
00:32:22,559 --> 00:32:26,080
the image that that we used uh the log

803
00:32:26,080 --> 00:32:29,200
triggered and if you go back to the

804
00:32:29,200 --> 00:32:32,080
to the main logs we can also see uh

805
00:32:32,080 --> 00:32:34,320
the event so in this case we can see the

806
00:32:34,320 --> 00:32:36,960
event that is coming from fico sidekick

807
00:32:36,960 --> 00:32:39,840
and also uh the pod name so alpine and

808
00:32:39,840 --> 00:32:40,559
then

809
00:32:40,559 --> 00:32:42,399
the namespace or default

810
00:32:42,399 --> 00:32:44,480
and the rule the fico rule triggered in

811
00:32:44,480 --> 00:32:46,799
this case the uh

812
00:32:46,799 --> 00:32:48,799
the rule that you have seen before so

813
00:32:48,799 --> 00:32:51,120
detect outbound connection to you c

814
00:32:51,120 --> 00:32:54,159
minors and also uh the action that have

815
00:32:54,159 --> 00:32:56,399
been triggered so in this case um

816
00:32:56,399 --> 00:32:59,440
deleting the pod alpine for

817
00:32:59,440 --> 00:33:00,320
um

818
00:33:00,320 --> 00:33:03,760
in the in the in the namespace default

819
00:33:03,760 --> 00:33:07,760
and here is uh the fico site click ui

820
00:33:07,760 --> 00:33:09,760
um in here

821
00:33:09,760 --> 00:33:12,240
there are already uh some graphics uh

822
00:33:12,240 --> 00:33:14,720
available uh out of the box when you

823
00:33:14,720 --> 00:33:16,960
install and you deploy the fico cycle

824
00:33:16,960 --> 00:33:19,760
container um

825
00:33:19,760 --> 00:33:22,080
from the ui you can also filter

826
00:33:22,080 --> 00:33:25,440
by the container id um or they can or

827
00:33:25,440 --> 00:33:28,480
the pod name and or also

828
00:33:28,480 --> 00:33:31,120
using the um the severity so in case we

829
00:33:31,120 --> 00:33:32,559
want to

830
00:33:32,559 --> 00:33:35,039
filter just the events

831
00:33:35,039 --> 00:33:37,360
uh with the with the severity critical

832
00:33:37,360 --> 00:33:39,919
order or whatever here in the events we

833
00:33:39,919 --> 00:33:42,799
have all the um events triggered in our

834
00:33:42,799 --> 00:33:45,279
in our environment and but of course you

835
00:33:45,279 --> 00:33:46,559
can also

836
00:33:46,559 --> 00:33:47,600
filter

837
00:33:47,600 --> 00:33:48,720
by

838
00:33:48,720 --> 00:33:51,679
by container id or container name

839
00:33:51,679 --> 00:33:53,679
in this case with the those are the

840
00:33:53,679 --> 00:33:55,360
others that have been generated and

841
00:33:55,360 --> 00:33:57,440
therefore the first one is the one that

842
00:33:57,440 --> 00:33:58,480
we have

843
00:33:58,480 --> 00:34:00,799
that we have triggered during uh during

844
00:34:00,799 --> 00:34:02,240
the demo

845
00:34:02,240 --> 00:34:04,320
so as i said there are already a

846
00:34:04,320 --> 00:34:08,239
dashboard um ready uh ready to use and

847
00:34:08,239 --> 00:34:11,679
you can also filter by time range or see

848
00:34:11,679 --> 00:34:15,040
if if a specific rule um has been

849
00:34:15,040 --> 00:34:18,000
triggered in in our environment in which

850
00:34:18,000 --> 00:34:20,719
container it has been triggered and and

851
00:34:20,719 --> 00:34:22,560
so on with the with the criticality and

852
00:34:22,560 --> 00:34:24,560
also filter by priorities and

853
00:34:24,560 --> 00:34:27,599
criticalities so this is uh the main

854
00:34:27,599 --> 00:34:29,839
power of phycocytic so

855
00:34:29,839 --> 00:34:34,799
phycocyte did provide a nice ui uh for

856
00:34:35,599 --> 00:34:38,159
the detection engine but as we have seen

857
00:34:38,159 --> 00:34:41,918
we can also use fico psychic to um

858
00:34:41,918 --> 00:34:46,159
to send our our alerts um

859
00:34:46,159 --> 00:34:48,960
from to other ecosystem and trigger uh

860
00:34:48,960 --> 00:34:51,839
actions or or just for the events for

861
00:34:51,839 --> 00:34:55,280
for further investigation

862
00:34:55,280 --> 00:34:57,599
uh so um

863
00:34:57,599 --> 00:35:00,320
all we have seen today regarding

864
00:35:00,320 --> 00:35:03,760
um fico and fico sidekick um is also

865
00:35:03,760 --> 00:35:06,400
thanks to the uh to the fico community

866
00:35:06,400 --> 00:35:09,440
which is working hard uh to make uh the

867
00:35:09,440 --> 00:35:12,000
fight to make fico the fico the old fico

868
00:35:12,000 --> 00:35:14,400
project uh better and always more

869
00:35:14,400 --> 00:35:16,880
powerful powerful with

870
00:35:16,880 --> 00:35:20,000
always new farco rules in case of new uh

871
00:35:20,000 --> 00:35:23,680
cvs around or in case of new attacks are

872
00:35:23,680 --> 00:35:25,280
discovered

873
00:35:25,280 --> 00:35:26,240
and

874
00:35:26,240 --> 00:35:28,480
getting started with fico is super easy

875
00:35:28,480 --> 00:35:30,960
and i suggest all of you uh to give it a

876
00:35:30,960 --> 00:35:32,960
go and join the fico community and start

877
00:35:32,960 --> 00:35:36,160
contributing uh to fico creating uh new

878
00:35:36,160 --> 00:35:39,680
rules um you can also uh reach the uh

879
00:35:39,680 --> 00:35:42,480
the maintainers on fico slack and ask

880
00:35:42,480 --> 00:35:44,880
and ask for help if you need or even

881
00:35:44,880 --> 00:35:47,680
propose uh new changes to the to the

882
00:35:47,680 --> 00:35:51,760
project and and suggest uh new stuff in

883
00:35:51,760 --> 00:35:54,640
the in the community channel as well

884
00:35:54,640 --> 00:35:56,240
uh so

885
00:35:56,240 --> 00:35:59,200
that's it from me uh

886
00:35:59,200 --> 00:36:02,400
let's start the q a session if you have

887
00:36:02,400 --> 00:36:06,240
any any questions for for me

888
00:36:10,320 --> 00:36:13,320
hey

889
00:36:46,290 --> 00:36:49,619
[Music]

890
00:36:52,400 --> 00:36:55,400
foreign

891
00:38:01,270 --> 00:38:04,329
[Music]

892
00:39:26,720 --> 00:39:29,720
issues

893
00:39:54,240 --> 00:39:57,240
um

894
00:40:27,920 --> 00:40:31,479
[Music]

895
00:40:45,119 --> 00:40:48,119
no

