1
00:00:00,030 --> 00:00:06,720
thank you hello everyone thanks for

2
00:00:03,990 --> 00:00:09,570
coming today let's start

3
00:00:06,720 --> 00:00:13,620
if you worse about myself as a start

4
00:00:09,570 --> 00:00:16,740
I've been researching x86 platform

5
00:00:13,620 --> 00:00:19,410
security for quite a long time this work

6
00:00:16,740 --> 00:00:24,080
covers subject like into management

7
00:00:19,410 --> 00:00:24,080
engine in Telugu and ufi by security

8
00:00:24,560 --> 00:00:30,840
today we're going to talk about issues

9
00:00:27,840 --> 00:00:34,200
in low level architecture components

10
00:00:30,840 --> 00:00:37,739
like authenticated code models I will be

11
00:00:34,200 --> 00:00:40,680
calling them a CMS and the microcode

12
00:00:37,739 --> 00:00:45,089
we'll see how these issues can be

13
00:00:40,680 --> 00:00:47,219
discovered and exploited and then we'll

14
00:00:45,090 --> 00:00:51,539
talk about possible medications for such

15
00:00:47,219 --> 00:00:55,050
an attack surface let's go on let's

16
00:00:51,539 --> 00:01:00,949
start with with the CPU roots of trusts

17
00:00:55,050 --> 00:01:05,369
overview every modern Intel CPU has

18
00:01:00,949 --> 00:01:10,408
processor cores with the bootstrap

19
00:01:05,369 --> 00:01:14,158
processor which starts powering on which

20
00:01:10,409 --> 00:01:17,820
starts when powering on and this core

21
00:01:14,159 --> 00:01:20,790
begins executing the start is destroyed

22
00:01:17,820 --> 00:01:22,798
instructions in the formula the other

23
00:01:20,790 --> 00:01:26,700
course called application processors

24
00:01:22,799 --> 00:01:30,360
they started by the bootstrap processor

25
00:01:26,700 --> 00:01:33,290
when ready and needed an optional

26
00:01:30,360 --> 00:01:35,700
graphics core this is another component

27
00:01:33,290 --> 00:01:40,500
the other one is integrated memory

28
00:01:35,700 --> 00:01:44,280
controller level 3 cache this is very

29
00:01:40,500 --> 00:01:48,840
important for us today it is shared

30
00:01:44,280 --> 00:01:54,149
between the cores and some other input

31
00:01:48,840 --> 00:01:58,020
output logic there is a read only memory

32
00:01:54,149 --> 00:02:03,990
containing the CPU micro code inside the

33
00:01:58,020 --> 00:02:06,030
inside each each CPU core the microcode

34
00:02:03,990 --> 00:02:07,259
is programmed while manufacturing the

35
00:02:06,030 --> 00:02:11,520
device

36
00:02:07,260 --> 00:02:14,990
this this is our first root of trust for

37
00:02:11,520 --> 00:02:19,560
now control unit after each powering on

38
00:02:14,990 --> 00:02:21,630
lose the microcode into into a faster

39
00:02:19,560 --> 00:02:25,950
and rewritable type of memory called

40
00:02:21,630 --> 00:02:28,920
control store and so what is what is the

41
00:02:25,950 --> 00:02:32,220
microcode a public sources tell us that

42
00:02:28,920 --> 00:02:34,140
this is a program written in hardware

43
00:02:32,220 --> 00:02:37,170
level instructions to implement a higher

44
00:02:34,140 --> 00:02:40,260
level instructions so you can see a

45
00:02:37,170 --> 00:02:44,070
novice instruction implementation here

46
00:02:40,260 --> 00:02:47,250
on the screen for example the the thing

47
00:02:44,070 --> 00:02:49,970
is and it is well know for years that

48
00:02:47,250 --> 00:02:51,540
the microcode can have box

49
00:02:49,970 --> 00:02:56,220
vulnerabilities

50
00:02:51,540 --> 00:02:58,950
this can be security security issues or

51
00:02:56,220 --> 00:03:01,470
performance issues so it should be

52
00:02:58,950 --> 00:03:04,079
updatable remember the original micro

53
00:03:01,470 --> 00:03:07,940
code is stored into the CPU inside the

54
00:03:04,080 --> 00:03:11,550
CPU in an non updatable memory

55
00:03:07,940 --> 00:03:14,130
hence the updated version of of micro

56
00:03:11,550 --> 00:03:18,590
code should be replaced in a control

57
00:03:14,130 --> 00:03:22,320
store every time cpu is powered on and

58
00:03:18,590 --> 00:03:25,440
you can notice notice such updates are

59
00:03:22,320 --> 00:03:27,720
included often in system server you can

60
00:03:25,440 --> 00:03:31,459
you can see on the screen here is the

61
00:03:27,720 --> 00:03:34,410
table pointing to the micro code updates

62
00:03:31,459 --> 00:03:37,860
we will check we'll talk about this

63
00:03:34,410 --> 00:03:43,650
table a bit later please note that these

64
00:03:37,860 --> 00:03:46,230
updates are CPU model specific so about

65
00:03:43,650 --> 00:03:50,190
the table the this is the firmware

66
00:03:46,230 --> 00:03:54,090
interface table obviously it is a part

67
00:03:50,190 --> 00:03:57,060
of system from first stored in the until

68
00:03:54,090 --> 00:04:00,060
we have a flash memory you can see a

69
00:03:57,060 --> 00:04:01,680
common image structure here there is a

70
00:04:00,060 --> 00:04:04,820
pointer at the end to bias region

71
00:04:01,680 --> 00:04:08,180
pointing to firmware interface table

72
00:04:04,820 --> 00:04:11,299
this is how the modern Intel CPU finds

73
00:04:08,180 --> 00:04:16,079
finds it and Lutz the micro code updates

74
00:04:11,300 --> 00:04:21,180
in an ultimate eyes way before executing

75
00:04:16,079 --> 00:04:24,690
the bias what else do you know about it

76
00:04:21,180 --> 00:04:28,320
well it had started to be a required

77
00:04:24,690 --> 00:04:31,009
element for Intel architectures since

78
00:04:28,320 --> 00:04:34,349
introduction of info boudoir technology

79
00:04:31,009 --> 00:04:37,680
because it contains entries to point to

80
00:04:34,350 --> 00:04:43,889
boot guard components see please see our

81
00:04:37,680 --> 00:04:47,400
other entries of it other picture this

82
00:04:43,889 --> 00:04:51,660
allow the CPU to verify the integrity of

83
00:04:47,400 --> 00:04:53,789
the bias code before executing also like

84
00:04:51,660 --> 00:04:57,060
it's all before filmer interface table

85
00:04:53,789 --> 00:05:00,300
is used to update the cpu microcode

86
00:04:57,060 --> 00:05:05,190
before running any firmware and before

87
00:05:00,300 --> 00:05:07,979
starting given the intel boot guard so

88
00:05:05,190 --> 00:05:11,810
let's see what a micro code update

89
00:05:07,979 --> 00:05:15,389
binary looks like it start with the main

90
00:05:11,810 --> 00:05:21,060
heater containing such fields like

91
00:05:15,389 --> 00:05:27,510
version data not not data the date the

92
00:05:21,060 --> 00:05:32,310
date built date cpu model code here it's

93
00:05:27,510 --> 00:05:39,419
called a processor signature checksum of

94
00:05:32,310 --> 00:05:41,729
the header and etc bless you this header

95
00:05:39,419 --> 00:05:44,669
is followed by an extended header let's

96
00:05:41,729 --> 00:05:47,820
look at it also this is an extended

97
00:05:44,669 --> 00:05:50,698
header structure seems like a common in

98
00:05:47,820 --> 00:05:54,659
tools and binary structure it is also

99
00:05:50,699 --> 00:05:58,710
used for a CMS we'll talk about it later

100
00:05:54,659 --> 00:05:59,840
and it is used also for Intel CSE me

101
00:05:58,710 --> 00:06:03,388
forever

102
00:05:59,840 --> 00:06:06,690
it also has fuels like version sizes

103
00:06:03,389 --> 00:06:09,360
processor signature security version

104
00:06:06,690 --> 00:06:13,080
number two deprecated loading the

105
00:06:09,360 --> 00:06:16,470
downgraded versions of microcode once

106
00:06:13,080 --> 00:06:19,530
given versions loaded of course also

107
00:06:16,470 --> 00:06:22,909
this header has an has an heiress a

108
00:06:19,530 --> 00:06:27,960
public key and signature allowing to

109
00:06:22,909 --> 00:06:29,940
authenticate the this update so CPU will

110
00:06:27,960 --> 00:06:31,469
verify the integrity of the microcode

111
00:06:29,940 --> 00:06:34,490
before losing it

112
00:06:31,469 --> 00:06:41,110
that's that doesn't allow us to

113
00:06:34,490 --> 00:06:41,110
to change to change to modify the update

114
00:06:41,139 --> 00:06:49,400
now after the headers the the hash of

115
00:06:47,150 --> 00:06:52,250
the public key is hard-coded into the

116
00:06:49,400 --> 00:06:55,520
CPU and based on my observations it can

117
00:06:52,250 --> 00:06:59,000
stay the same for a few CPU generations

118
00:06:55,520 --> 00:06:59,930
and even for production and

119
00:06:59,000 --> 00:07:03,710
pre-production

120
00:06:59,930 --> 00:07:07,669
I mean debug versions of platforms the

121
00:07:03,710 --> 00:07:09,830
microcode update body is unfortunately

122
00:07:07,669 --> 00:07:15,080
encrypted that this is also why you

123
00:07:09,830 --> 00:07:17,479
cannot change the microcode and that's

124
00:07:15,080 --> 00:07:20,560
why almost no one actually knows what

125
00:07:17,479 --> 00:07:24,409
what else the microcode is capable of

126
00:07:20,560 --> 00:07:26,630
besides some startup behavior like micro

127
00:07:24,410 --> 00:07:31,789
code updates loading or into a good

128
00:07:26,630 --> 00:07:34,969
guard implementation however here's some

129
00:07:31,789 --> 00:07:38,840
collection of facts about the microcode

130
00:07:34,970 --> 00:07:41,449
actions like like was told before it

131
00:07:38,840 --> 00:07:44,690
implements CPU instructions it

132
00:07:41,449 --> 00:07:47,660
configures the execution logic online

133
00:07:44,690 --> 00:07:50,539
that's how bugs like site channels are

134
00:07:47,660 --> 00:07:53,479
fixed it implements some startup

135
00:07:50,539 --> 00:07:57,500
behavior like server interface table

136
00:07:53,479 --> 00:08:00,830
parsing this is how I can load microcode

137
00:07:57,500 --> 00:08:03,590
dates from permanent phase table and it

138
00:08:00,830 --> 00:08:08,500
loads and executes into our fancy cated

139
00:08:03,590 --> 00:08:11,659
code modules from they can be executed

140
00:08:08,500 --> 00:08:15,560
they can be point set by the permanent

141
00:08:11,659 --> 00:08:21,650
interface table or or some other ways it

142
00:08:15,560 --> 00:08:23,270
depends on the ACM type so if you worry

143
00:08:21,650 --> 00:08:28,250
about these ACMs

144
00:08:23,270 --> 00:08:34,130
they they are signed and sometimes

145
00:08:28,250 --> 00:08:40,099
encrypted they have a similar structure

146
00:08:34,130 --> 00:08:43,458
like like you saw before I mean the

147
00:08:40,099 --> 00:08:46,070
heater they are loaded into a shared

148
00:08:43,458 --> 00:08:49,729
level 3 cache it

149
00:08:46,070 --> 00:08:53,690
I guess it is because the DRAM is not

150
00:08:49,730 --> 00:08:56,030
trusted and sometimes when ACM is

151
00:08:53,690 --> 00:09:01,370
executing the degrom is not available at

152
00:08:56,030 --> 00:09:05,770
all some some public sources mention

153
00:09:01,370 --> 00:09:09,610
these this cache memory for running ACM

154
00:09:05,770 --> 00:09:12,650
they mention it as AC ROM i

155
00:09:09,610 --> 00:09:17,900
authenticated code from this models

156
00:09:12,650 --> 00:09:19,910
executed only from there and only by the

157
00:09:17,900 --> 00:09:23,720
bootstrap processor other course should

158
00:09:19,910 --> 00:09:27,740
be sleeping at this moment they they

159
00:09:23,720 --> 00:09:32,320
obviously serve as a root of trust and

160
00:09:27,740 --> 00:09:34,760
as an implementation support for such

161
00:09:32,320 --> 00:09:37,640
technologies like Intel boot guard until

162
00:09:34,760 --> 00:09:41,000
trusted execution technology and until

163
00:09:37,640 --> 00:09:44,300
bias guard this is also known as

164
00:09:41,000 --> 00:09:49,490
platform platform flesh Armour in

165
00:09:44,300 --> 00:09:51,949
technology so now we can see all CPU

166
00:09:49,490 --> 00:09:54,110
roots of trust in a single UFO bias

167
00:09:51,950 --> 00:09:59,030
image you can see from our interface

168
00:09:54,110 --> 00:10:05,540
table microcode updates file the and all

169
00:09:59,030 --> 00:10:07,730
of the ACMs i mentioned before so now

170
00:10:05,540 --> 00:10:10,219
let's talk about the ACM for the

171
00:10:07,730 --> 00:10:15,050
earliest plot from good state for boot

172
00:10:10,220 --> 00:10:18,620
of face it's a good guard ACM and let's

173
00:10:15,050 --> 00:10:20,599
talk about it it's issues as you can see

174
00:10:18,620 --> 00:10:24,620
on the picture the blue area is

175
00:10:20,600 --> 00:10:28,490
protected by intel boot guard the ACM

176
00:10:24,620 --> 00:10:33,250
verifies in its integrity so in case you

177
00:10:28,490 --> 00:10:37,880
somehow managed to modify the system for

178
00:10:33,250 --> 00:10:39,680
making changes to this blue area will we

179
00:10:37,880 --> 00:10:43,990
will end up in the system

180
00:10:39,680 --> 00:10:46,760
refusing to boot it will be bricked

181
00:10:43,990 --> 00:10:49,700
however the forever interface table

182
00:10:46,760 --> 00:10:52,580
microcode updates and these this ACM

183
00:10:49,700 --> 00:10:57,170
itself are placed in an unprotected area

184
00:10:52,580 --> 00:10:59,640
in most of the systems so we can replace

185
00:10:57,170 --> 00:11:02,640
them with in older versions

186
00:10:59,640 --> 00:11:06,959
and the question is what can be achieved

187
00:11:02,640 --> 00:11:10,230
that way to find this out let's look at

188
00:11:06,959 --> 00:11:12,660
the ACM heater format we have already

189
00:11:10,230 --> 00:11:15,990
saw something similar today in the

190
00:11:12,660 --> 00:11:18,390
microcode hideth structure the chipset

191
00:11:15,990 --> 00:11:22,890
ID field which I don't know why but it

192
00:11:18,390 --> 00:11:26,130
is always zero the build date the

193
00:11:22,890 --> 00:11:30,529
security version number and an error

194
00:11:26,130 --> 00:11:35,450
size signature for obviously it is for

195
00:11:30,529 --> 00:11:39,570
authentication of ACM what do you know

196
00:11:35,450 --> 00:11:45,060
at the moment in toluca ACM is a 32

197
00:11:39,570 --> 00:11:48,149
kilobytes binary the hash of erisa RSA

198
00:11:45,060 --> 00:11:53,430
public key is is used to verify the

199
00:11:48,149 --> 00:11:58,410
signature and it's used is used to

200
00:11:53,430 --> 00:12:01,410
verify the public the public key and it

201
00:11:58,410 --> 00:12:03,949
is locked into a micro code this this

202
00:12:01,410 --> 00:12:10,399
should protect from running alter

203
00:12:03,949 --> 00:12:12,959
versions of a CMS on a newer CPUs

204
00:12:10,399 --> 00:12:15,510
security version number also should

205
00:12:12,959 --> 00:12:20,369
protect from downgrade against the ACM

206
00:12:15,510 --> 00:12:23,010
this is how it should work and this is

207
00:12:20,370 --> 00:12:25,699
the reality the key for the signature

208
00:12:23,010 --> 00:12:33,360
verification hasn't changed for years

209
00:12:25,699 --> 00:12:36,640
today in 2010 20 2003

210
00:12:33,360 --> 00:12:40,330
they use the same key for signing the

211
00:12:36,640 --> 00:12:43,390
ACM as I as did as did since

212
00:12:40,330 --> 00:12:47,530
introduction of skylake architecture you

213
00:12:43,390 --> 00:12:53,160
can say you can say they have the

214
00:12:47,530 --> 00:12:57,400
security vision number for protecting -

215
00:12:53,160 --> 00:13:00,939
to block the downgrading the ACM however

216
00:12:57,400 --> 00:13:03,939
I will say here is the reality this

217
00:13:00,940 --> 00:13:07,300
number this value it changes very

218
00:13:03,940 --> 00:13:11,290
infrequently a few ACM versions in a row

219
00:13:07,300 --> 00:13:13,839
can can have security fixes applied but

220
00:13:11,290 --> 00:13:17,500
without increasing the security version

221
00:13:13,840 --> 00:13:22,090
number binary diffing helps perfectly to

222
00:13:17,500 --> 00:13:24,010
reveal the patches and and here's one I

223
00:13:22,090 --> 00:13:26,170
found in two versions signed with the

224
00:13:24,010 --> 00:13:32,290
same key and having the same security

225
00:13:26,170 --> 00:13:34,780
version number here is a 2016 version of

226
00:13:32,290 --> 00:13:38,880
in tobu guard ACM you probably know this

227
00:13:34,780 --> 00:13:41,680
is iam should verify two key manifests

228
00:13:38,880 --> 00:13:44,560
describing the integrity of UEFA bias

229
00:13:41,680 --> 00:13:47,770
image and describing the body structure

230
00:13:44,560 --> 00:13:52,150
of your five eyes image and here is the

231
00:13:47,770 --> 00:13:53,500
code parsing the first key manifest and

232
00:13:52,150 --> 00:13:56,380
and at the end

233
00:13:53,500 --> 00:14:00,750
another sad signature checking routine

234
00:13:56,380 --> 00:14:04,080
is invoke is invoked let's look into it

235
00:14:00,750 --> 00:14:08,020
there was an issue in this routine and

236
00:14:04,080 --> 00:14:11,530
errors say public key model on the next

237
00:14:08,020 --> 00:14:15,100
key manifest is verified but the public

238
00:14:11,530 --> 00:14:18,040
area exponent is not this this obviously

239
00:14:15,100 --> 00:14:22,390
a lot of performing cryptanalysis

240
00:14:18,040 --> 00:14:25,839
attacks on eros I signature by replacing

241
00:14:22,390 --> 00:14:33,850
this public exponent with a small value

242
00:14:25,840 --> 00:14:39,430
and in 2017 that was fixed they added a

243
00:14:33,850 --> 00:14:44,220
flag while invoking this routine and in

244
00:14:39,430 --> 00:14:46,650
case this flag is set to true both

245
00:14:44,220 --> 00:14:49,980
offers a public key model

246
00:14:46,650 --> 00:14:52,740
and the exponent will be verified

247
00:14:49,980 --> 00:14:56,160
so after fixing these issues they

248
00:14:52,740 --> 00:14:58,560
haven't changed the nor the SVM a

249
00:14:56,160 --> 00:14:59,610
security version number nor neither this

250
00:14:58,560 --> 00:15:03,270
siding key

251
00:14:59,610 --> 00:15:08,040
this opens way to replace the the ACM

252
00:15:03,270 --> 00:15:09,840
with the vulnerable 2016 version and to

253
00:15:08,040 --> 00:15:14,540
attack until good guards verification

254
00:15:09,840 --> 00:15:17,450
procedure the next interesting case is

255
00:15:14,540 --> 00:15:21,120
downgrading Intel txt ACM

256
00:15:17,450 --> 00:15:25,050
however since since this is not a

257
00:15:21,120 --> 00:15:26,760
start-up ACM like the boot card ACM it

258
00:15:25,050 --> 00:15:30,660
is not pointed by the firmware interface

259
00:15:26,760 --> 00:15:33,330
table this attack should be done in the

260
00:15:30,660 --> 00:15:37,380
runtime and to do that firstly let's see

261
00:15:33,330 --> 00:15:39,450
how the CPU could be tricked to generate

262
00:15:37,380 --> 00:15:42,390
the microcode because this is an

263
00:15:39,450 --> 00:15:43,890
important step we will see it later what

264
00:15:42,390 --> 00:15:46,110
do you know about the microcode abates

265
00:15:43,890 --> 00:15:49,199
they are to improve stability

266
00:15:46,110 --> 00:15:51,690
performance and apply security issues it

267
00:15:49,200 --> 00:15:55,380
is very important note updates should be

268
00:15:51,690 --> 00:15:57,960
loaded onto each should be look at each

269
00:15:55,380 --> 00:16:02,030
time a CPU is power on I mean after

270
00:15:57,960 --> 00:16:06,090
sleep hibernation or full shutdown mode

271
00:16:02,030 --> 00:16:09,449
I've been watching ffs are not always

272
00:16:06,090 --> 00:16:12,840
update updates are loaded by the CPU

273
00:16:09,450 --> 00:16:15,510
from from the firmaface stable this is

274
00:16:12,840 --> 00:16:18,780
because the if the update requires

275
00:16:15,510 --> 00:16:21,000
something special like initialized do

276
00:16:18,780 --> 00:16:23,670
ROM memory or which is not available

277
00:16:21,000 --> 00:16:26,580
while firmer to face stable is parsed it

278
00:16:23,670 --> 00:16:29,550
has to be looted by the bias manually I

279
00:16:26,580 --> 00:16:31,620
mean in a legacy way as early as

280
00:16:29,550 --> 00:16:34,890
possible from the moment conditions are

281
00:16:31,620 --> 00:16:38,480
satisfied also probably the firm

282
00:16:34,890 --> 00:16:42,470
interface table is not always parsed

283
00:16:38,480 --> 00:16:45,519
while while leaving asleep or

284
00:16:42,470 --> 00:16:47,529
hibernation mode

285
00:16:45,519 --> 00:16:50,860
it might be performance optimizations

286
00:16:47,529 --> 00:16:55,689
this is why you can always find a micro

287
00:16:50,860 --> 00:16:58,439
code update loader in modern bias and

288
00:16:55,689 --> 00:17:01,480
here's another very important notice

289
00:16:58,439 --> 00:17:07,379
updates should be loaded onto each or

290
00:17:01,480 --> 00:17:10,149
separately this is the legacy update

291
00:17:07,380 --> 00:17:10,899
microcode update loader its look like

292
00:17:10,148 --> 00:17:13,928
this

293
00:17:10,898 --> 00:17:18,369
it uses an MSR bias update trigger to

294
00:17:13,929 --> 00:17:22,209
update an input microcode binary points

295
00:17:18,369 --> 00:17:24,698
it by the CPU Eric's register to check

296
00:17:22,209 --> 00:17:31,270
the CPU update version the bias

297
00:17:24,699 --> 00:17:34,840
sighing ID MSR is used and besides the

298
00:17:31,270 --> 00:17:38,639
buff set what what bias does Saluda

299
00:17:34,840 --> 00:17:42,459
microcode made firstly the CPU p IE

300
00:17:38,640 --> 00:17:44,320
model or finds the appropriate the

301
00:17:42,460 --> 00:17:46,240
appropriate update one of the most

302
00:17:44,320 --> 00:17:49,600
actual and supported by the installed

303
00:17:46,240 --> 00:17:53,200
CPU because the microcode is a model

304
00:17:49,600 --> 00:17:56,080
specific secondly it copies the update

305
00:17:53,200 --> 00:17:59,340
from the mapped spec flash memory into a

306
00:17:56,080 --> 00:18:03,189
physical memory the physical address of

307
00:17:59,340 --> 00:18:05,260
of the update is stored into a handle

308
00:18:03,190 --> 00:18:08,130
block this is just a unified by a

309
00:18:05,260 --> 00:18:11,950
specific data structure nevermind

310
00:18:08,130 --> 00:18:16,299
and a bit later the platform in it

311
00:18:11,950 --> 00:18:18,460
module will find this hop retrieve the

312
00:18:16,299 --> 00:18:21,789
microcode update buffer address and

313
00:18:18,460 --> 00:18:25,120
start a micro code update loader to

314
00:18:21,789 --> 00:18:26,830
apply this update please note that all

315
00:18:25,120 --> 00:18:29,289
these all of these actions are performed

316
00:18:26,830 --> 00:18:35,320
during the normal in the normal boot

317
00:18:29,289 --> 00:18:37,720
path what else can be done later the the

318
00:18:35,320 --> 00:18:40,450
system management small code also finds

319
00:18:37,720 --> 00:18:42,520
this hop and retrieves the microcode

320
00:18:40,450 --> 00:18:46,929
updates saved address and copies

321
00:18:42,520 --> 00:18:49,629
deployed update in turn into system

322
00:18:46,929 --> 00:18:52,090
management rom to protect it from being

323
00:18:49,630 --> 00:18:53,700
replaced or damaged by an operating

324
00:18:52,090 --> 00:18:57,418
system

325
00:18:53,700 --> 00:18:59,849
and finally the SM ROM address of the

326
00:18:57,419 --> 00:19:07,109
applied micro code update is stored into

327
00:18:59,849 --> 00:19:09,509
a efi variable called int you code an

328
00:19:07,109 --> 00:19:12,059
interesting notice here is that this

329
00:19:09,509 --> 00:19:13,739
variable is accessible both from the

330
00:19:12,059 --> 00:19:16,529
boot time environment and the runtime

331
00:19:13,739 --> 00:19:20,070
environment meaning it can be fully

332
00:19:16,529 --> 00:19:23,759
accessed from an operating system as you

333
00:19:20,070 --> 00:19:28,168
can see these these actions are

334
00:19:23,759 --> 00:19:30,929
performed to optimize performance for

335
00:19:28,169 --> 00:19:33,929
waking form from sleep mode in other

336
00:19:30,929 --> 00:19:36,479
words after the system was put into

337
00:19:33,929 --> 00:19:39,329
sleep mode and then and when waking up

338
00:19:36,479 --> 00:19:42,690
the CPU PID model instead of searching

339
00:19:39,329 --> 00:19:44,969
for that Micra code update again in the

340
00:19:42,690 --> 00:19:48,690
frame knowledge base table it gets the

341
00:19:44,969 --> 00:19:54,059
point from this efi variable into a code

342
00:19:48,690 --> 00:19:56,429
and then it saves it into a hop and then

343
00:19:54,059 --> 00:19:58,379
there deep operation repeats the

344
00:19:56,429 --> 00:20:00,269
platform in it model finds this hop

345
00:19:58,379 --> 00:20:05,789
retrieves the microcode update address

346
00:20:00,269 --> 00:20:07,320
and updates the microcode with it and

347
00:20:05,789 --> 00:20:11,479
here is no obvious way to perform

348
00:20:07,320 --> 00:20:14,039
internal rate attack we can load an old

349
00:20:11,479 --> 00:20:17,789
microcode update image into a physical

350
00:20:14,039 --> 00:20:22,229
memory we can make the entry code here

351
00:20:17,789 --> 00:20:25,469
five variable to point it and then we

352
00:20:22,229 --> 00:20:27,209
should perform a sleep wake up cycle the

353
00:20:25,469 --> 00:20:30,239
system will be booted up with an

354
00:20:27,209 --> 00:20:32,279
attacker provided microcode if it is

355
00:20:30,239 --> 00:20:37,829
valid and past the integrity check of

356
00:20:32,279 --> 00:20:40,679
course here's a w everything screenshots

357
00:20:37,829 --> 00:20:42,570
at the year 2019 version of the

358
00:20:40,679 --> 00:20:45,559
microcode update loaded and after

359
00:20:42,570 --> 00:20:51,168
performing the above set actions the

360
00:20:45,559 --> 00:20:51,168
2018 version is actual for the cpu now

361
00:20:52,210 --> 00:20:57,510
there are a few few consequences of this

362
00:20:56,890 --> 00:21:00,640
attack

363
00:20:57,510 --> 00:21:03,120
the first and and the obvious one is

364
00:21:00,640 --> 00:21:07,440
removing fixes for side-channel attacks

365
00:21:03,120 --> 00:21:10,719
now this could open ways for researching

366
00:21:07,440 --> 00:21:13,150
but but if we talk about security

367
00:21:10,720 --> 00:21:15,250
incidents most of them are extremely

368
00:21:13,150 --> 00:21:18,430
hard to perform in it well and I have

369
00:21:15,250 --> 00:21:20,830
never been spotted however there's not

370
00:21:18,430 --> 00:21:24,640
much of available detection tools for

371
00:21:20,830 --> 00:21:26,679
side-channel attacks if if you still

372
00:21:24,640 --> 00:21:29,880
want to know more about it please refer

373
00:21:26,680 --> 00:21:33,310
to the duties detailed analysis I linked

374
00:21:29,880 --> 00:21:35,410
also I've noticed that until introduces

375
00:21:33,310 --> 00:21:37,480
a new memory type against basically

376
00:21:35,410 --> 00:21:39,760
speculative side channel attacks this is

377
00:21:37,480 --> 00:21:43,780
very interesting paper recommended to

378
00:21:39,760 --> 00:21:46,410
really another interesting case is to

379
00:21:43,780 --> 00:21:48,940
unlock plot from debugging capabilities

380
00:21:46,410 --> 00:21:52,750
my experience showed that some

381
00:21:48,940 --> 00:21:57,040
downgraded versions of micro code has no

382
00:21:52,750 --> 00:22:00,670
I entire debug mitigations and such as

383
00:21:57,040 --> 00:22:02,820
the mentions for mobility so this

384
00:22:00,670 --> 00:22:08,110
technique could be useful for those who

385
00:22:02,820 --> 00:22:11,919
who who wish to use the dynamic analysis

386
00:22:08,110 --> 00:22:13,990
in platform security research and the

387
00:22:11,920 --> 00:22:16,900
good part is that a CML physically

388
00:22:13,990 --> 00:22:19,750
authentication is performed by a micro

389
00:22:16,900 --> 00:22:22,360
code like I told before probably the

390
00:22:19,750 --> 00:22:26,560
microcode is directly binded with a

391
00:22:22,360 --> 00:22:29,469
specific ACMs versions I mean the

392
00:22:26,560 --> 00:22:33,159
runtime it seems like txt or the BIOS

393
00:22:29,470 --> 00:22:35,590
karta seems the microcode update must no

394
00:22:33,160 --> 00:22:39,340
might not the hash to verify the public

395
00:22:35,590 --> 00:22:43,000
key of the ACM or the security fish

396
00:22:39,340 --> 00:22:47,110
number of ACM anyway the older versions

397
00:22:43,000 --> 00:22:50,740
of microcode supports in other words

398
00:22:47,110 --> 00:22:54,699
does not duplicate loading of an old

399
00:22:50,740 --> 00:22:57,059
versions of a CMS which is also the

400
00:22:54,700 --> 00:23:00,259
updatable front of a component and

401
00:22:57,059 --> 00:23:03,360
and can have security issues and

402
00:23:00,259 --> 00:23:17,730
downgrading the microcode allows to loot

403
00:23:03,360 --> 00:23:19,379
the downgraded versions of ATMs with we

404
00:23:17,730 --> 00:23:22,710
with an exploitable one day

405
00:23:19,379 --> 00:23:25,279
vulnerabilities the obviously this

406
00:23:22,710 --> 00:23:30,419
obviously compromises the technology and

407
00:23:25,279 --> 00:23:32,190
dependent on the ACM and well again

408
00:23:30,419 --> 00:23:33,509
we'll start with the intro boot

409
00:23:32,190 --> 00:23:38,070
Kardashian

410
00:23:33,509 --> 00:23:40,980
it is not encrypted as as you as you can

411
00:23:38,070 --> 00:23:45,240
see the binary diffing is applicable to

412
00:23:40,980 --> 00:23:49,070
find one day's in it in these images it

413
00:23:45,240 --> 00:23:53,610
executed only on startup before the bias

414
00:23:49,070 --> 00:23:58,019
when CPU is part on and unreleased from

415
00:23:53,610 --> 00:24:00,748
the reset state SEM does not verify bias

416
00:23:58,019 --> 00:24:02,700
when waking from sleep mode this is

417
00:24:00,749 --> 00:24:08,249
because of performance optimizations

418
00:24:02,700 --> 00:24:12,659
except each 12th boot so that that's why

419
00:24:08,249 --> 00:24:17,220
the in in this case the ACM the boot

420
00:24:12,659 --> 00:24:22,619
guard ACM is not we won't be focused

421
00:24:17,220 --> 00:24:25,830
focusing on it now intro bias guard a cm

422
00:24:22,619 --> 00:24:29,519
at the this ACM is encrypted it is

423
00:24:25,830 --> 00:24:31,110
extremely hard to find a fixed issue in

424
00:24:29,519 --> 00:24:33,720
in it

425
00:24:31,110 --> 00:24:38,340
this requires a lot of time for testing

426
00:24:33,720 --> 00:24:40,799
is behavior and since since this is a

427
00:24:38,340 --> 00:24:47,399
huge subject we won't be talking about

428
00:24:40,799 --> 00:24:51,840
it today and now about the Intel trusted

429
00:24:47,399 --> 00:24:54,360
execution technology ACM the the Essene

430
00:24:51,840 --> 00:24:57,629
it ACM is the target here it is not

431
00:24:54,360 --> 00:25:02,240
cryptid it the patched vulnerabilities

432
00:24:57,629 --> 00:25:05,039
also can be found via binary diffing at

433
00:25:02,240 --> 00:25:07,769
this ACM is triggered via get SEC

434
00:25:05,039 --> 00:25:11,669
instruction from bias or operating

435
00:25:07,769 --> 00:25:14,929
system to measure food chain components

436
00:25:11,669 --> 00:25:19,740
interests of the cesium is specified in

437
00:25:14,929 --> 00:25:24,809
EBX register and this address seems and

438
00:25:19,740 --> 00:25:27,410
doesn't change from booty boot so so

439
00:25:24,809 --> 00:25:31,010
downgrade is also possible by replacing

440
00:25:27,410 --> 00:25:35,789
just by replacing the ACMA memory and

441
00:25:31,010 --> 00:25:41,460
regarding the the vulnerabilities they

442
00:25:35,789 --> 00:25:45,330
are there were a few buffer overflows

443
00:25:41,460 --> 00:25:55,590
that were fixed by until sometime in the

444
00:25:45,330 --> 00:25:58,168
past and they are all almost the same so

445
00:25:55,590 --> 00:26:01,740
they the full attack scheme will be

446
00:25:58,169 --> 00:26:05,250
looking like this will replace microcode

447
00:26:01,740 --> 00:26:08,460
in memory replace the txt ACM and then

448
00:26:05,250 --> 00:26:10,289
make the in my energy code variable to

449
00:26:08,460 --> 00:26:14,130
point to the old version of my code

450
00:26:10,289 --> 00:26:18,000
update then sleep the system and reboot

451
00:26:14,130 --> 00:26:20,280
and and wake up however there is a

452
00:26:18,000 --> 00:26:22,440
problem the cheeks the ACM is also an

453
00:26:20,280 --> 00:26:27,030
security version number and to bypass

454
00:26:22,440 --> 00:26:31,580
bypass this check we have to rewrite the

455
00:26:27,030 --> 00:26:37,379
ACM all waking up up from the sleep mode

456
00:26:31,580 --> 00:26:40,230
and here the s3 boost boost group will

457
00:26:37,380 --> 00:26:43,380
help us to do that the boost whip is it

458
00:26:40,230 --> 00:26:45,900
is a table of operation codes which

459
00:26:43,380 --> 00:26:49,080
should be performed while waiting from

460
00:26:45,900 --> 00:26:52,140
sleep mode to restore the platform

461
00:26:49,080 --> 00:26:55,139
configuration in a fast way this should

462
00:26:52,140 --> 00:26:57,659
be done instead of running not the

463
00:26:55,140 --> 00:27:03,080
normal boot path again performance

464
00:26:57,659 --> 00:27:05,929
optimizations and and there is a perfect

465
00:27:03,080 --> 00:27:09,289
system management mode called

466
00:27:05,929 --> 00:27:14,820
vulnerability allowing to to modify the

467
00:27:09,289 --> 00:27:18,870
s3 boo script actually the vulnerable

468
00:27:14,820 --> 00:27:20,620
mode model a SM MVC is at SATA

469
00:27:18,870 --> 00:27:23,498
controller model

470
00:27:20,620 --> 00:27:27,340
it has a perfect interface for making

471
00:27:23,499 --> 00:27:29,860
changes to to the booth script from the

472
00:27:27,340 --> 00:27:34,379
operating system it parses an input data

473
00:27:29,860 --> 00:27:38,498
from a color and and then in the loop

474
00:27:34,379 --> 00:27:41,168
let's take a look into it then it will

475
00:27:38,499 --> 00:27:44,470
take some data from this input data and

476
00:27:41,169 --> 00:27:48,220
and place it in into a boot script as

477
00:27:44,470 --> 00:27:50,320
you can see here we can add a PCIe

478
00:27:48,220 --> 00:27:56,190
configuration right instructions and a

479
00:27:50,320 --> 00:28:01,570
memory write instructions this allows

480
00:27:56,190 --> 00:28:05,830
this allows to build a part of s3 boot

481
00:28:01,570 --> 00:28:09,279
script that will that will change in

482
00:28:05,830 --> 00:28:13,168
other words rewrite the memory from a

483
00:28:09,279 --> 00:28:17,200
free boot path waking up boot path and

484
00:28:13,169 --> 00:28:19,059
this allowed to replace a txt AC I mean

485
00:28:17,200 --> 00:28:21,779
memory just in time before the check

486
00:28:19,059 --> 00:28:29,080
before the security version number check

487
00:28:21,779 --> 00:28:37,210
and this is the way to attack the TX j

488
00:28:29,080 --> 00:28:42,549
ZM so let's talk about mitigations of

489
00:28:37,210 --> 00:28:47,169
this session attacks I a few times I saw

490
00:28:42,549 --> 00:28:51,879
I heard that the Intel SGX software card

491
00:28:47,169 --> 00:28:55,450
extensions can can can protect from

492
00:28:51,879 --> 00:28:57,610
these attacks well I can say that that

493
00:28:55,450 --> 00:28:59,799
the first part of the presentation I was

494
00:28:57,610 --> 00:29:03,490
talking about the Buddhism downgrading

495
00:28:59,799 --> 00:29:09,460
and from this type of attack yes it the

496
00:29:03,490 --> 00:29:12,279
SAS can can protect but the the sjx

497
00:29:09,460 --> 00:29:14,259
doesn't check the microcode security

498
00:29:12,279 --> 00:29:17,169
version number when link the sleep mode

499
00:29:14,259 --> 00:29:26,549
that's why it won't protect from

500
00:29:17,169 --> 00:29:26,549
attacking the the txt ACM so that's why

501
00:29:27,980 --> 00:29:35,430
for the first type of tech we I can

502
00:29:33,150 --> 00:29:37,290
suggest that that Intel should better

503
00:29:35,430 --> 00:29:41,580
use of his security version number of

504
00:29:37,290 --> 00:29:41,970
errors also another vulnerable weak

505
00:29:41,580 --> 00:29:44,310
point

506
00:29:41,970 --> 00:29:48,930
it was the modification of in microcode

507
00:29:44,310 --> 00:29:51,629
to give efi wearable it now in you have

508
00:29:48,930 --> 00:29:55,680
a bias images it marked as read only and

509
00:29:51,630 --> 00:29:57,780
it is closed from runtime access but

510
00:29:55,680 --> 00:29:59,730
this is still could be bypassed for if

511
00:29:57,780 --> 00:30:03,540
an attacker manages to run and a bit or

512
00:29:59,730 --> 00:30:05,820
a bit record in SML and trigger a spare

513
00:30:03,540 --> 00:30:12,960
flash operation write operations on the

514
00:30:05,820 --> 00:30:15,030
on the end of your arm also another

515
00:30:12,960 --> 00:30:17,190
mitigation is to make an operating

516
00:30:15,030 --> 00:30:20,129
system to update the microcode little

517
00:30:17,190 --> 00:30:21,810
latest version manually after booting

518
00:30:20,130 --> 00:30:24,600
but this process could be already

519
00:30:21,810 --> 00:30:30,240
compromised at the moment of validating

520
00:30:24,600 --> 00:30:34,199
the update version so the best thing is

521
00:30:30,240 --> 00:30:36,330
for vendors for system manufacturers is

522
00:30:34,200 --> 00:30:39,510
to supply only the updates which could

523
00:30:36,330 --> 00:30:41,340
be the microcode updates which could be

524
00:30:39,510 --> 00:30:45,710
loaded from the thermal interface table

525
00:30:41,340 --> 00:30:51,899
and always supply the most up-to-date

526
00:30:45,710 --> 00:30:58,080
binaries so so during this talk we saw

527
00:30:51,900 --> 00:31:01,110
some a few supply chain problems we saw

528
00:30:58,080 --> 00:31:03,540
that that a small problem in a basic

529
00:31:01,110 --> 00:31:06,000
component will compromise all above the

530
00:31:03,540 --> 00:31:08,220
stack technologies it's it's serve as

531
00:31:06,000 --> 00:31:14,570
the root of trust like the boot guard

532
00:31:08,220 --> 00:31:18,090
and or 60 and since this is this is an

533
00:31:14,570 --> 00:31:22,470
extremely an undocumented technologist

534
00:31:18,090 --> 00:31:24,389
the full impact is yet to discover so I

535
00:31:22,470 --> 00:31:27,180
would like to thank you for coming today

536
00:31:24,390 --> 00:31:30,510
for listening if you have any questions

537
00:31:27,180 --> 00:31:33,560
you can ask now or catch me later at the

538
00:31:30,510 --> 00:31:33,560
conference thank you

