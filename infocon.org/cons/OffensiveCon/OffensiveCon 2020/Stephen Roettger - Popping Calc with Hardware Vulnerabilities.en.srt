1
00:00:00,730 --> 00:00:03,419
[Applause]

2
00:00:01,460 --> 00:00:06,180
all right thank you

3
00:00:03,419 --> 00:00:08,570
well I will talk today about exactly

4
00:00:06,180 --> 00:00:11,219
this popping with Harvin abilities

5
00:00:08,570 --> 00:00:14,490
I'm super excited to finally share this

6
00:00:11,219 --> 00:00:16,680
research so I started working on this a

7
00:00:14,490 --> 00:00:18,869
few months ago and back then my my

8
00:00:16,680 --> 00:00:20,400
thought was pretty much regarding how

9
00:00:18,869 --> 00:00:22,470
vulnerabilities was like well this is

10
00:00:20,400 --> 00:00:24,269
hard right like I know there are lots of

11
00:00:22,470 --> 00:00:26,910
people working this there's these really

12
00:00:24,269 --> 00:00:29,429
cool bugs being found but usually like

13
00:00:26,910 --> 00:00:36,600
if a bark is found in public it's dead

14
00:00:29,429 --> 00:00:39,660
right so also for me for me this was so

15
00:00:36,600 --> 00:00:41,489
far out of my comfort zone I like

16
00:00:39,660 --> 00:00:43,589
software security I don't like hardware

17
00:00:41,489 --> 00:00:47,459
security so I couldn't contribute

18
00:00:43,590 --> 00:00:48,809
anything to this area in any way except

19
00:00:47,460 --> 00:00:50,100
then something changed in mind and that

20
00:00:48,809 --> 00:00:51,599
something is what I want to tell you

21
00:00:50,100 --> 00:00:53,420
about today and I hope I change your

22
00:00:51,600 --> 00:00:56,399
mind as well if you still on the edge

23
00:00:53,420 --> 00:00:59,340
which is I was able to apply it to a

24
00:00:56,399 --> 00:01:01,590
target that I care about and at the end

25
00:00:59,340 --> 00:01:05,580
of this presentation we will hopefully

26
00:01:01,590 --> 00:01:08,400
pop a calculator using only publicly

27
00:01:05,580 --> 00:01:11,479
known vulnerabilities and will still

28
00:01:08,400 --> 00:01:14,490
work right now it's not fixed anywhere

29
00:01:11,479 --> 00:01:16,289
so let me introduce the auto target if

30
00:01:14,490 --> 00:01:21,020
you googled my name you might have

31
00:01:16,290 --> 00:01:21,020
figured it out this is talk about Chrome

32
00:01:21,350 --> 00:01:27,929
let me move the mouse okay so in the

33
00:01:25,860 --> 00:01:29,549
past I was doing research on the chrome

34
00:01:27,930 --> 00:01:31,619
renderer so if you're not familiar with

35
00:01:29,549 --> 00:01:34,290
our browsers work chrome looked pretty

36
00:01:31,619 --> 00:01:36,659
much like this where well you have the

37
00:01:34,290 --> 00:01:38,369
the renderer processes which touch all

38
00:01:36,659 --> 00:01:40,500
the untrusted data like the JavaScript

39
00:01:38,369 --> 00:01:42,720
and HTML rendering so you have a huge

40
00:01:40,500 --> 00:01:45,270
attack surface but so that you can't

41
00:01:42,720 --> 00:01:48,060
just pop shells on everyone's machines

42
00:01:45,270 --> 00:01:50,970
there's a sandbox around it right but in

43
00:01:48,060 --> 00:01:53,340
the past you didn't really need to

44
00:01:50,970 --> 00:01:54,890
escape the sandbox because as you see in

45
00:01:53,340 --> 00:01:56,820
this picture

46
00:01:54,890 --> 00:01:58,439
multiple renderers are in the same

47
00:01:56,820 --> 00:02:00,719
sandbox which means as soon as you

48
00:01:58,439 --> 00:02:02,758
explode one of them on like evil website

49
00:02:00,719 --> 00:02:04,439
or calm you can read the cookies from

50
00:02:02,759 --> 00:02:06,570
accounts of google calm and to lots of

51
00:02:04,439 --> 00:02:08,128
stuff and since nowadays everything

52
00:02:06,570 --> 00:02:11,450
interesting is on the web anyway who

53
00:02:08,128 --> 00:02:13,829
needs to get to the west' level right

54
00:02:11,450 --> 00:02:15,420
except then at some point

55
00:02:13,830 --> 00:02:16,530
Chrome started making changes and they

56
00:02:15,420 --> 00:02:19,829
introduced something called site

57
00:02:16,530 --> 00:02:21,780
isolation and now every renderer is in

58
00:02:19,830 --> 00:02:23,490
their own sandbox and even if you have

59
00:02:21,780 --> 00:02:25,800
if you even if you can compromise one of

60
00:02:23,490 --> 00:02:28,830
the renders the site isolation should

61
00:02:25,800 --> 00:02:31,260
still enforce the security guarantees of

62
00:02:28,830 --> 00:02:32,730
the web platform to some degree it's not

63
00:02:31,260 --> 00:02:34,829
exactly the same original policy but a

64
00:02:32,730 --> 00:02:38,160
little bit a little bit less than this

65
00:02:34,830 --> 00:02:40,860
the same site it's same site but in the

66
00:02:38,160 --> 00:02:43,560
end it like the renderer Explorer it

67
00:02:40,860 --> 00:02:45,180
became much less valuable for me and I I

68
00:02:43,560 --> 00:02:46,350
started looking into what was on my

69
00:02:45,180 --> 00:02:51,780
bucket list for a long time which is

70
00:02:46,350 --> 00:02:54,180
trying to find a sandbox escape and so

71
00:02:51,780 --> 00:02:58,350
if you if you remember the title of the

72
00:02:54,180 --> 00:02:59,880
talk it's been a while I know but we

73
00:02:58,350 --> 00:03:01,440
will use a hot way back for this and

74
00:02:59,880 --> 00:03:03,269
maybe if you know a little bit about

75
00:03:01,440 --> 00:03:04,920
what Harper box are out there while I

76
00:03:03,270 --> 00:03:07,020
explain some details about chrome maybe

77
00:03:04,920 --> 00:03:09,410
you can figure it at the same time where

78
00:03:07,020 --> 00:03:11,940
this is going and what we're going to do

79
00:03:09,410 --> 00:03:14,329
so the first thing you do at this point

80
00:03:11,940 --> 00:03:17,550
is okay what is the text surface right

81
00:03:14,330 --> 00:03:19,709
as you see in this picture you have a

82
00:03:17,550 --> 00:03:21,780
bunch of arrows the first one is well

83
00:03:19,709 --> 00:03:24,209
you can detect the kernel it will be as

84
00:03:21,780 --> 00:03:26,670
specific and then but this is pretty

85
00:03:24,209 --> 00:03:28,860
locked down by the sandbox on on Linux

86
00:03:26,670 --> 00:03:31,200
you have second which only allows you to

87
00:03:28,860 --> 00:03:34,920
do a few sis calls on Windows you have

88
00:03:31,200 --> 00:03:38,160
the win32 k lock down so you can't do

89
00:03:34,920 --> 00:03:40,410
any call 7 32 K so it's kind of limited

90
00:03:38,160 --> 00:03:41,970
on what you can do also I want to do

91
00:03:40,410 --> 00:03:45,000
chrome research not Windows kernel

92
00:03:41,970 --> 00:03:47,280
research so that's not for me the other

93
00:03:45,000 --> 00:03:48,570
thing is the network process where net

94
00:03:47,280 --> 00:03:51,480
volumes are for example found some cool

95
00:03:48,570 --> 00:03:53,130
box and which can be very nice because

96
00:03:51,480 --> 00:03:54,630
it can be potentially a one-shot bark

97
00:03:53,130 --> 00:03:55,890
that just gives you code execution right

98
00:03:54,630 --> 00:03:59,730
away in the network process without

99
00:03:55,890 --> 00:04:02,130
going through render exploit the thing

100
00:03:59,730 --> 00:04:05,369
I'm more interested in was the attack

101
00:04:02,130 --> 00:04:08,190
surface with IPC mechanisms and this is

102
00:04:05,370 --> 00:04:10,110
what we're looking into today so as you

103
00:04:08,190 --> 00:04:11,730
can see it like the Renwick will need

104
00:04:10,110 --> 00:04:13,980
some way to talk to the browser it will

105
00:04:11,730 --> 00:04:15,540
need to do it need maybe talk to other

106
00:04:13,980 --> 00:04:17,579
renders to the network processes to the

107
00:04:15,540 --> 00:04:19,469
GPU since the render itself is in strict

108
00:04:17,579 --> 00:04:22,349
sandbox it can't do much by itself right

109
00:04:19,470 --> 00:04:25,320
so there must be lots of functionality

110
00:04:22,350 --> 00:04:26,400
implemented outside of this of this and

111
00:04:25,320 --> 00:04:31,020
of the same

112
00:04:26,400 --> 00:04:33,539
and first some background so the IPC

113
00:04:31,020 --> 00:04:35,609
mechanism in chrome is called mojo and

114
00:04:33,540 --> 00:04:38,400
actually - but the one is going away and

115
00:04:35,610 --> 00:04:40,230
will be dead MGM soon so motor is the

116
00:04:38,400 --> 00:04:43,109
one we will talk about today and most of

117
00:04:40,230 --> 00:04:44,880
this stuff is already using this let's

118
00:04:43,110 --> 00:04:47,430
say I'm in a renderer I want to do this

119
00:04:44,880 --> 00:04:50,430
call from JavaScript fetch depth laptop

120
00:04:47,430 --> 00:04:53,310
that Google Chrome I am NOT allowed to

121
00:04:50,430 --> 00:04:55,260
talk to the network so I can't open a

122
00:04:53,310 --> 00:04:58,290
socket right so I will talk to the

123
00:04:55,260 --> 00:05:01,170
network process and using some into some

124
00:04:58,290 --> 00:05:02,700
mojo IPC call and then the way this

125
00:05:01,170 --> 00:05:05,030
implemented is first there's some

126
00:05:02,700 --> 00:05:07,890
interface definition language for mojo

127
00:05:05,030 --> 00:05:09,599
which is very simple like you define an

128
00:05:07,890 --> 00:05:12,060
interface and then you have methods and

129
00:05:09,600 --> 00:05:13,650
then the method has options just like in

130
00:05:12,060 --> 00:05:18,440
every other programming language and

131
00:05:13,650 --> 00:05:20,760
then if you look at the chrome code base

132
00:05:18,440 --> 00:05:21,990
there will be a client implementation

133
00:05:20,760 --> 00:05:23,789
and the server implementation of this

134
00:05:21,990 --> 00:05:25,860
interface on the client side well it's

135
00:05:23,790 --> 00:05:28,440
just a stop that you get somehow on the

136
00:05:25,860 --> 00:05:31,710
server side you subclass this mojo mural

137
00:05:28,440 --> 00:05:33,570
or the factory and then you just have to

138
00:05:31,710 --> 00:05:36,180
override this great load and start

139
00:05:33,570 --> 00:05:38,040
method implement it somehow magically

140
00:05:36,180 --> 00:05:40,200
connect the two with each other through

141
00:05:38,040 --> 00:05:41,550
some message pipe and then you can use

142
00:05:40,200 --> 00:05:43,590
on the client side you can use the stop

143
00:05:41,550 --> 00:05:50,790
and make calls directly to the other

144
00:05:43,590 --> 00:05:52,530
process so there are lots of there are

145
00:05:50,790 --> 00:05:54,600
lots of interfaces that are reachable

146
00:05:52,530 --> 00:05:56,940
from inside the sandbox they actually

147
00:05:54,600 --> 00:05:59,940
like I think over a hundred different

148
00:05:56,940 --> 00:06:01,469
mojo IPC endpoints that the renderer can

149
00:05:59,940 --> 00:06:03,840
talk to so there's lots of attack

150
00:06:01,470 --> 00:06:04,530
surface here but in particular they're

151
00:06:03,840 --> 00:06:07,080
also

152
00:06:04,530 --> 00:06:08,549
IPC and the IPC is also used by the

153
00:06:07,080 --> 00:06:10,859
browser process itself and by the

154
00:06:08,550 --> 00:06:12,690
network process so there are lots of

155
00:06:10,860 --> 00:06:15,090
interfaces as well that the renderer is

156
00:06:12,690 --> 00:06:18,030
not allowed to talk to example in this

157
00:06:15,090 --> 00:06:19,500
picture you will see the GPU host like

158
00:06:18,030 --> 00:06:21,780
the renderer will not be allowed to talk

159
00:06:19,500 --> 00:06:23,430
to the GPU host the renderer will not to

160
00:06:21,780 --> 00:06:29,489
not be allowed to talk to the network

161
00:06:23,430 --> 00:06:31,800
service and also interfaces can change

162
00:06:29,490 --> 00:06:35,040
behavior based on who is talking to them

163
00:06:31,800 --> 00:06:36,330
so so we have here the yellow derp which

164
00:06:35,040 --> 00:06:38,400
we know the renderer is allowed to use

165
00:06:36,330 --> 00:06:39,139
but the browser is also using the UL

166
00:06:38,400 --> 00:06:40,758
loader but if

167
00:06:39,139 --> 00:06:47,689
browsers using the Yolo they will not

168
00:06:40,759 --> 00:06:49,099
have the same origin policy so you might

169
00:06:47,689 --> 00:06:52,789
wonder okay there are multiple

170
00:06:49,099 --> 00:06:54,770
interfaces how does the how does the

171
00:06:52,789 --> 00:06:56,449
module actually keep track on what you

172
00:06:54,770 --> 00:06:59,060
allowed to talk to and then this is

173
00:06:56,449 --> 00:07:01,490
documented in the mojo security dog so

174
00:06:59,060 --> 00:07:03,289
you just if you read this paragraph well

175
00:07:01,490 --> 00:07:06,319
the end pretty much summarizes it

176
00:07:03,289 --> 00:07:08,628
there's some kind of secrets that are

177
00:07:06,319 --> 00:07:10,430
used for addressing and if you leak this

178
00:07:08,629 --> 00:07:12,229
week so these secrets are called port

179
00:07:10,430 --> 00:07:15,469
names the addresses of an IPC end point

180
00:07:12,229 --> 00:07:17,090
if you leaked the secret that means you

181
00:07:15,469 --> 00:07:20,240
leaked the capability to talk to this

182
00:07:17,090 --> 00:07:22,250
end point and you might at this point

183
00:07:20,240 --> 00:07:23,840
when I read this I was like this sounds

184
00:07:22,250 --> 00:07:26,389
pretty interesting this would mean if

185
00:07:23,840 --> 00:07:29,270
you have a info leak in the browser

186
00:07:26,389 --> 00:07:30,680
process you can use that like you don't

187
00:07:29,270 --> 00:07:32,688
need a proper memory corruption book you

188
00:07:30,680 --> 00:07:35,860
can just use it to to leak these secrets

189
00:07:32,689 --> 00:07:40,550
and talk to arbitrary IPC interfaces and

190
00:07:35,860 --> 00:07:42,620
yes so as everyone would do in my

191
00:07:40,550 --> 00:07:44,779
situation I decided let's take an old

192
00:07:42,620 --> 00:07:46,639
bark and let's write an exploit for this

193
00:07:44,779 --> 00:07:50,120
right so there's from that Williamson

194
00:07:46,639 --> 00:07:52,789
there was this nice nice bark in the

195
00:07:50,120 --> 00:07:55,009
browser process was which was rated as

196
00:07:52,789 --> 00:07:58,029
medium back then and I thought like this

197
00:07:55,009 --> 00:08:00,710
would be a cool example to try it out so

198
00:07:58,029 --> 00:08:03,020
it's in the blopps if you're not aware

199
00:08:00,710 --> 00:08:06,378
what blobs are it's like this Web API

200
00:08:03,020 --> 00:08:08,479
that allows you to store data it's it

201
00:08:06,379 --> 00:08:10,599
stands for binary large objects and if

202
00:08:08,479 --> 00:08:12,949
you look at this code this is the patch

203
00:08:10,599 --> 00:08:14,449
you will quickly see this it's just an

204
00:08:12,949 --> 00:08:17,659
integer flow right like this is a very

205
00:08:14,449 --> 00:08:20,419
simple bug and let's exploit this

206
00:08:17,659 --> 00:08:22,129
quickly because it's super super easy so

207
00:08:20,419 --> 00:08:25,210
blobs come in three types they either

208
00:08:22,129 --> 00:08:28,069
are backed by data by a file or the

209
00:08:25,210 --> 00:08:31,250
third one can be a reference to another

210
00:08:28,069 --> 00:08:34,459
block and this is exactly where the

211
00:08:31,250 --> 00:08:36,229
integer overflow happens so all you need

212
00:08:34,458 --> 00:08:38,448
to do for now to exploit this is you

213
00:08:36,229 --> 00:08:39,500
create one blow up with some data so you

214
00:08:38,448 --> 00:08:41,718
and the renderer you tell the browser

215
00:08:39,500 --> 00:08:44,959
hey create a blow up here's here a bunch

216
00:08:41,719 --> 00:08:46,940
of a s then again you tell the renderer

217
00:08:44,959 --> 00:08:48,560
you tell the browser process hey can you

218
00:08:46,940 --> 00:08:49,850
create another block by the one by the

219
00:08:48,560 --> 00:08:52,699
way this one reference is the first

220
00:08:49,850 --> 00:08:55,130
block also the offset is minus 1000

221
00:08:52,700 --> 00:08:57,410
and then you read from it in the browser

222
00:08:55,130 --> 00:09:00,500
we'll just give you like 100 megabyte of

223
00:08:57,410 --> 00:09:02,959
heap memory or whatever you asked for as

224
00:09:00,500 --> 00:09:05,900
long as it doesn't crash of course so

225
00:09:02,960 --> 00:09:07,400
now this heap memory will have these

226
00:09:05,900 --> 00:09:08,959
secrets we're interested in right the

227
00:09:07,400 --> 00:09:13,160
secret note what names used for

228
00:09:08,960 --> 00:09:14,510
addressing in the mojo IPC so the idea

229
00:09:13,160 --> 00:09:17,150
for the exploit is now well let's just

230
00:09:14,510 --> 00:09:19,660
grab them and send messages to IPC

231
00:09:17,150 --> 00:09:21,949
endpoints we're not allowed to talk to

232
00:09:19,660 --> 00:09:23,089
for this we first need to figure out

233
00:09:21,950 --> 00:09:25,190
what do they actually look like in

234
00:09:23,090 --> 00:09:27,020
memory how do we notice if something is

235
00:09:25,190 --> 00:09:28,880
a port name or not and this is actually

236
00:09:27,020 --> 00:09:31,880
very simple to do because a port looks

237
00:09:28,880 --> 00:09:34,310
like this like you have a node name and

238
00:09:31,880 --> 00:09:37,520
the port name both of those are 128-bit

239
00:09:34,310 --> 00:09:41,209
random values you will know the node

240
00:09:37,520 --> 00:09:42,860
name usually because the node names are

241
00:09:41,210 --> 00:09:44,750
like they're not so many nodes like the

242
00:09:42,860 --> 00:09:46,220
renderer the browser and the network

243
00:09:44,750 --> 00:09:47,750
process for example are interesting and

244
00:09:46,220 --> 00:09:49,790
you will already have connections to

245
00:09:47,750 --> 00:09:52,250
them so you already know the name so you

246
00:09:49,790 --> 00:09:54,230
can search through the heap through a

247
00:09:52,250 --> 00:09:56,180
heap dump from the browser find

248
00:09:54,230 --> 00:09:58,730
something find the node name if there's

249
00:09:56,180 --> 00:10:00,469
128 bit of random looking data behind it

250
00:09:58,730 --> 00:10:02,360
that's probably a port name and you can

251
00:10:00,470 --> 00:10:06,260
use it and send messages to some

252
00:10:02,360 --> 00:10:08,390
interface but at this point what

253
00:10:06,260 --> 00:10:10,490
interface can we actually talk to talk

254
00:10:08,390 --> 00:10:13,270
to right like because there's no hey

255
00:10:10,490 --> 00:10:15,400
spawner shell run this command interface

256
00:10:13,270 --> 00:10:18,560
because that would be stupid

257
00:10:15,400 --> 00:10:20,319
so I went through my to my favorite

258
00:10:18,560 --> 00:10:23,780
hacking tool which is called code search

259
00:10:20,320 --> 00:10:26,030
and you see the query there I'm

260
00:10:23,780 --> 00:10:28,819
searching for all the mojo interface

261
00:10:26,030 --> 00:10:30,620
definition language files and look where

262
00:10:28,820 --> 00:10:32,960
what if one of them is using file paths

263
00:10:30,620 --> 00:10:36,110
with the idea well if it uses a file

264
00:10:32,960 --> 00:10:38,570
path the if you if you pass a file path

265
00:10:36,110 --> 00:10:40,340
on an IPC interface it's probably a

266
00:10:38,570 --> 00:10:41,870
trusted connection and the other side

267
00:10:40,340 --> 00:10:43,490
will probably do something with it like

268
00:10:41,870 --> 00:10:46,010
either read from it or write to it and

269
00:10:43,490 --> 00:10:48,770
both of that is probably bad if you can

270
00:10:46,010 --> 00:10:51,260
control what is what the path is right

271
00:10:48,770 --> 00:10:54,560
and then one of the first thing you find

272
00:10:51,260 --> 00:10:59,030
is well the UL loader again the UL

273
00:10:54,560 --> 00:11:00,920
loader and this is this is nicole path

274
00:10:59,030 --> 00:11:02,420
that is that you can't trigger from a

275
00:11:00,920 --> 00:11:05,300
renderer so this is like an ax privilege

276
00:11:02,420 --> 00:11:08,240
code path from the yellower

277
00:11:05,300 --> 00:11:09,500
and in particular this one so this can

278
00:11:08,240 --> 00:11:10,820
only be triggered if you're coming from

279
00:11:09,500 --> 00:11:12,800
a connection from the browser process

280
00:11:10,820 --> 00:11:15,580
which we would be able to spoof right

281
00:11:12,800 --> 00:11:18,680
and in this case this pretty much says

282
00:11:15,580 --> 00:11:20,510
this path is used for file uploads so if

283
00:11:18,680 --> 00:11:23,689
I come from the renderer and I say hey

284
00:11:20,510 --> 00:11:26,839
upload it is positively d2 evil.com the

285
00:11:23,690 --> 00:11:28,040
network process will say no but if you

286
00:11:26,839 --> 00:11:30,290
come from the browser and say like

287
00:11:28,040 --> 00:11:32,750
upload et Cie passwd to evil.com the

288
00:11:30,290 --> 00:11:37,130
network process will be like sure sounds

289
00:11:32,750 --> 00:11:39,560
good so and that's the whole exploit in

290
00:11:37,130 --> 00:11:42,529
summary like well first get codecs used

291
00:11:39,560 --> 00:11:46,310
in the renderer so just use a zero-day

292
00:11:42,529 --> 00:11:48,589
of your choice then you trigger back

293
00:11:46,310 --> 00:11:51,260
that gives you heap heap data from the

294
00:11:48,589 --> 00:11:52,970
from the browser process you find the

295
00:11:51,260 --> 00:11:55,130
privilege your load effect report name

296
00:11:52,970 --> 00:11:57,740
and then you inject messages telling it

297
00:11:55,130 --> 00:11:58,910
a upload this file and you're done you

298
00:11:57,740 --> 00:12:01,670
can read up dreary files from the

299
00:11:58,910 --> 00:12:06,890
machine and this works on on pretty much

300
00:12:01,670 --> 00:12:10,010
all OSS so maybe you figured out already

301
00:12:06,890 --> 00:12:12,529
where this is going because we're going

302
00:12:10,010 --> 00:12:14,420
to talk about hardware box right and if

303
00:12:12,529 --> 00:12:17,060
I think of Harper box like there bunch

304
00:12:14,420 --> 00:12:20,599
of like besides row hammer most of them

305
00:12:17,060 --> 00:12:22,040
just give you info leaks so but this is

306
00:12:20,600 --> 00:12:24,050
exactly what we need to trigger this

307
00:12:22,040 --> 00:12:25,490
right like we if we have an info leak

308
00:12:24,050 --> 00:12:27,829
that gives us memory from cross

309
00:12:25,490 --> 00:12:30,350
processes we could potentially use this

310
00:12:27,829 --> 00:12:32,660
to just read a port name from the

311
00:12:30,350 --> 00:12:36,620
browser process without ever having an

312
00:12:32,660 --> 00:12:39,380
actual bug in the software right so at

313
00:12:36,620 --> 00:12:41,480
that point I came back to my original

314
00:12:39,380 --> 00:12:43,130
point of well Harper bugs are hard but

315
00:12:41,480 --> 00:12:45,440
maybe I should start reading the papers

316
00:12:43,130 --> 00:12:48,199
so I looked them up and well they're

317
00:12:45,440 --> 00:12:52,990
spectin meltdown which I think everyone

318
00:12:48,199 --> 00:13:00,099
heard about and then there's Ram bleats

319
00:12:52,990 --> 00:13:03,059
Thunderbolt MDS attacks Samba load I

320
00:13:00,100 --> 00:13:07,159
should have memorized this

321
00:13:03,059 --> 00:13:07,159
I think that's the blue first logo

322
00:13:07,579 --> 00:13:14,758
cashout which is pretty recent and well

323
00:13:11,699 --> 00:13:16,559
plenty more and a quick note if you

324
00:13:14,759 --> 00:13:17,759
found a hardware bug and it's not on

325
00:13:16,559 --> 00:13:18,988
this list it's because you don't have a

326
00:13:17,759 --> 00:13:21,719
logo and you should really have a logo

327
00:13:18,989 --> 00:13:25,769
for your box everyone knows it's not a

328
00:13:21,719 --> 00:13:27,779
real vulnerability without a logo so the

329
00:13:25,769 --> 00:13:30,869
one buck they like one of the list MDS

330
00:13:27,779 --> 00:13:32,189
attacks and in particular riddle caught

331
00:13:30,869 --> 00:13:34,079
my eye because when I started reading

332
00:13:32,189 --> 00:13:36,059
all these papers this one just said well

333
00:13:34,079 --> 00:13:39,299
leak information across address space

334
00:13:36,059 --> 00:13:41,009
this is in the abstract so I actually

335
00:13:39,299 --> 00:13:43,649
did all the read all the papers not just

336
00:13:41,009 --> 00:13:46,619
abstracts but this one was like super

337
00:13:43,649 --> 00:13:50,369
promising ok cool this is exactly what

338
00:13:46,619 --> 00:13:52,739
we want but it has been public since May

339
00:13:50,369 --> 00:13:56,159
2019 already right and this is like late

340
00:13:52,739 --> 00:13:57,209
2019 so like ok well this is probably be

341
00:13:56,159 --> 00:14:02,009
fixed already

342
00:13:57,209 --> 00:14:04,468
so I Google like exploit riddle how-to I

343
00:14:02,009 --> 00:14:07,709
find a park I tried out it doesn't work

344
00:14:04,469 --> 00:14:10,229
on my machine and like ok it has been

345
00:14:07,709 --> 00:14:12,388
fixed I read the documentation about it

346
00:14:10,229 --> 00:14:14,429
everyone says it's been mitigated but

347
00:14:12,389 --> 00:14:16,499
except a few you should also disable

348
00:14:14,429 --> 00:14:18,269
hyper threading to really mitigate it I

349
00:14:16,499 --> 00:14:20,399
did I was not really sure what that

350
00:14:18,269 --> 00:14:22,499
meant so I was like ok but I really want

351
00:14:20,399 --> 00:14:25,709
to try it out so I downgraded my micro

352
00:14:22,499 --> 00:14:27,509
code on my machine because it was fixed

353
00:14:25,709 --> 00:14:28,919
with a micro code update I run the

354
00:14:27,509 --> 00:14:31,139
proof-of-concept that I found again and

355
00:14:28,919 --> 00:14:33,839
it still didn't leak so I started like

356
00:14:31,139 --> 00:14:36,029
reimplemented off myself changed stuff

357
00:14:33,839 --> 00:14:37,739
around changing like what kind of victim

358
00:14:36,029 --> 00:14:39,769
process you used to actually memory from

359
00:14:37,739 --> 00:14:43,169
and some point it started leaking right

360
00:14:39,769 --> 00:14:46,289
it's like ok this is cool let's reboot

361
00:14:43,169 --> 00:14:48,478
the machine reapply the microcode update

362
00:14:46,289 --> 00:14:51,959
run it again and it's still leaking

363
00:14:48,479 --> 00:14:53,099
and there's weird some probably

364
00:14:51,959 --> 00:14:55,529
something with my microwave update

365
00:14:53,099 --> 00:14:57,659
failed right so I run the same thing on

366
00:14:55,529 --> 00:15:00,299
my other computer on my laptop and it

367
00:14:57,659 --> 00:15:02,339
still works and like ok this cool maybe

368
00:15:00,299 --> 00:15:07,519
this note about hyper-threading needs to

369
00:15:02,339 --> 00:15:07,519
be able to actually quite important

370
00:15:07,880 --> 00:15:15,439
so yes so let's write an exploit for

371
00:15:11,970 --> 00:15:15,440
this too

372
00:15:15,620 --> 00:15:19,740
let's try to write an exploit for this

373
00:15:17,970 --> 00:15:21,750
right and like try to use this to leak

374
00:15:19,740 --> 00:15:24,300
these pot names but first since this is

375
00:15:21,750 --> 00:15:26,280
the main point of this of this talk let

376
00:15:24,300 --> 00:15:29,160
me quickly explain to you how I think

377
00:15:26,280 --> 00:15:32,069
the exploit works I'm not one person

378
00:15:29,160 --> 00:15:35,850
sure if someone knows better please

379
00:15:32,070 --> 00:15:37,590
don't tell anyone so this is how I

380
00:15:35,850 --> 00:15:39,330
implement how I learned about CPUs in

381
00:15:37,590 --> 00:15:41,970
university right there's some front-end

382
00:15:39,330 --> 00:15:45,420
then there's some execution unit and

383
00:15:41,970 --> 00:15:47,340
then caches and somehow you like if you

384
00:15:45,420 --> 00:15:49,469
want to execute instruction it gets

385
00:15:47,340 --> 00:15:51,090
decoded then it goes to the execution

386
00:15:49,470 --> 00:15:52,800
unit it like depending on what

387
00:15:51,090 --> 00:15:55,110
instruction it is it will load memory

388
00:15:52,800 --> 00:15:58,199
and then it will go to the cache and

389
00:15:55,110 --> 00:16:01,440
like read the memory for you except with

390
00:15:58,200 --> 00:16:05,520
respect everyone learned this is not

391
00:16:01,440 --> 00:16:07,170
what CPUs do they speculate so they have

392
00:16:05,520 --> 00:16:11,160
some kind of queue where instruction

393
00:16:07,170 --> 00:16:13,020
gets gets queued up and then if you need

394
00:16:11,160 --> 00:16:14,640
to wait for a memory load that is pretty

395
00:16:13,020 --> 00:16:17,189
slow so you just continue executing

396
00:16:14,640 --> 00:16:20,520
stuff and if there's a branch you just

397
00:16:17,190 --> 00:16:23,130
guess which way it will go yeah you make

398
00:16:20,520 --> 00:16:24,930
an educated guess and at some point so

399
00:16:23,130 --> 00:16:26,910
the trick is you don't make the changes

400
00:16:24,930 --> 00:16:29,040
visible just after well when you noticed

401
00:16:26,910 --> 00:16:31,829
okay all my guesses were right then you

402
00:16:29,040 --> 00:16:34,319
make the changes visible and the CPU

403
00:16:31,830 --> 00:16:37,290
like you you retire the instructions

404
00:16:34,320 --> 00:16:40,980
it's called so the you update the

405
00:16:37,290 --> 00:16:42,209
architectural state of the CPU so then I

406
00:16:40,980 --> 00:16:45,270
learned well there are also these

407
00:16:42,210 --> 00:16:47,910
buffers in between the l1 cache and the

408
00:16:45,270 --> 00:16:51,600
l2 cache and after the low port and also

409
00:16:47,910 --> 00:16:54,000
after the store port but that should be

410
00:16:51,600 --> 00:16:55,260
a good enough model for us now so let's

411
00:16:54,000 --> 00:16:57,630
say I have a process a privileged

412
00:16:55,260 --> 00:16:59,610
process that tries to read a secret it

413
00:16:57,630 --> 00:17:02,670
will first go through the fetch and

414
00:16:59,610 --> 00:17:04,079
decode in the front end it will see okay

415
00:17:02,670 --> 00:17:06,540
there's a memory load so it goes to the

416
00:17:04,079 --> 00:17:08,250
load part of the execution unit it will

417
00:17:06,540 --> 00:17:09,990
not see the value we're looking for in

418
00:17:08,250 --> 00:17:11,910
the any of the buffers of the caches so

419
00:17:09,990 --> 00:17:15,060
it will just load it one by one

420
00:17:11,910 --> 00:17:17,480
everywhere and return it to the to the

421
00:17:15,060 --> 00:17:19,829
architectural State to the program right

422
00:17:17,480 --> 00:17:20,940
so now assume there's the context switch

423
00:17:19,829 --> 00:17:23,879
happening

424
00:17:20,940 --> 00:17:27,330
and now an attacker process is running

425
00:17:23,880 --> 00:17:29,310
and the TECA process does the same thing

426
00:17:27,329 --> 00:17:30,990
it fetches any code some instruction it

427
00:17:29,310 --> 00:17:32,940
tries to load some memory and then

428
00:17:30,990 --> 00:17:35,370
something goes wrong meaning this an

429
00:17:32,940 --> 00:17:37,410
exception or something for example if

430
00:17:35,370 --> 00:17:39,060
you read from it from an owl page right

431
00:17:37,410 --> 00:17:40,920
it will trigger SEC fault there's an

432
00:17:39,060 --> 00:17:43,679
exception everything breaks and this

433
00:17:40,920 --> 00:17:46,260
abuse like well I need to do something

434
00:17:43,680 --> 00:17:48,510
right so I need to but I'm not the one

435
00:17:46,260 --> 00:17:50,910
handling the exception so I will just

436
00:17:48,510 --> 00:17:53,670
return some data that I have lying

437
00:17:50,910 --> 00:17:55,080
around here and just give you this thing

438
00:17:53,670 --> 00:17:56,970
because we're in speculation right it

439
00:17:55,080 --> 00:17:59,550
like we will at some point figure out

440
00:17:56,970 --> 00:18:02,580
this was wrong and just never make the

441
00:17:59,550 --> 00:18:05,100
change visible except that we also

442
00:18:02,580 --> 00:18:07,379
learned the specter well and before that

443
00:18:05,100 --> 00:18:08,490
actually the papers before that but we

444
00:18:07,380 --> 00:18:12,840
also learned you can leak from

445
00:18:08,490 --> 00:18:14,240
speculation so because speculation has

446
00:18:12,840 --> 00:18:17,370
side effects that you can observe

447
00:18:14,240 --> 00:18:19,110
usually for example if you access memory

448
00:18:17,370 --> 00:18:21,419
the memory gets loaded to the cache

449
00:18:19,110 --> 00:18:24,090
right even if that happens during

450
00:18:21,420 --> 00:18:26,190
speculation so afterwards if some memory

451
00:18:24,090 --> 00:18:28,500
got cached afterwards you can just try

452
00:18:26,190 --> 00:18:30,120
to access memory and if the axis was

453
00:18:28,500 --> 00:18:32,040
fast you know it got cash during

454
00:18:30,120 --> 00:18:34,469
speculation if the X is slow you know it

455
00:18:32,040 --> 00:18:36,330
didn't get cash during speculation so

456
00:18:34,470 --> 00:18:38,340
the usual attack is flush and reload

457
00:18:36,330 --> 00:18:42,210
it's called where you just make an array

458
00:18:38,340 --> 00:18:44,909
with 256 pages and then you use a secret

459
00:18:42,210 --> 00:18:47,040
buy it use it as an index to access this

460
00:18:44,910 --> 00:18:48,990
this array at home address it some

461
00:18:47,040 --> 00:18:50,610
offset and that's it

462
00:18:48,990 --> 00:18:53,010
and then after speculation you just go

463
00:18:50,610 --> 00:18:54,840
through the whole array if you see one

464
00:18:53,010 --> 00:18:56,460
of them is pretty fast to access you

465
00:18:54,840 --> 00:18:59,520
know okay this is the secret index that

466
00:18:56,460 --> 00:19:01,440
you just leaked from speculation but

467
00:18:59,520 --> 00:19:03,180
that it fixed so now with the micro

468
00:19:01,440 --> 00:19:04,760
corrupted I believe like just on the

469
00:19:03,180 --> 00:19:07,380
context switch all these buffers are

470
00:19:04,760 --> 00:19:09,360
flushed so you can't really from them

471
00:19:07,380 --> 00:19:11,550
anymore except that this is still not

472
00:19:09,360 --> 00:19:13,290
hot CPUs look like nowadays with

473
00:19:11,550 --> 00:19:14,970
hyper-threading it looks more like this

474
00:19:13,290 --> 00:19:17,040
where you have through two front ends

475
00:19:14,970 --> 00:19:18,420
so even flushing these buffers in

476
00:19:17,040 --> 00:19:19,860
between a context which doesn't help

477
00:19:18,420 --> 00:19:22,850
because you can just run your exploit at

478
00:19:19,860 --> 00:19:27,149
the same time as your victim process

479
00:19:22,850 --> 00:19:28,590
okay so far so good the exploit is super

480
00:19:27,150 --> 00:19:30,270
simple so this is a proof of concept

481
00:19:28,590 --> 00:19:33,360
from Pietro burello

482
00:19:30,270 --> 00:19:34,668
which is public for awhile like just a

483
00:19:33,360 --> 00:19:37,320
month or so after the

484
00:19:34,669 --> 00:19:39,870
after the paper got released and she

485
00:19:37,320 --> 00:19:43,580
liked so the if you're not familiar with

486
00:19:39,870 --> 00:19:46,739
Intel T is X this X begin instruction

487
00:19:43,580 --> 00:19:48,570
spread will pretty much just catch any

488
00:19:46,740 --> 00:19:50,070
sec faults happening and restore the

489
00:19:48,570 --> 00:19:52,559
state to the X begin and then go into

490
00:19:50,070 --> 00:19:54,779
the else block and all this is doing

491
00:19:52,559 --> 00:19:56,970
here is its accessing mapping which is a

492
00:19:54,779 --> 00:19:58,950
null which is now so it will seg fault

493
00:19:56,970 --> 00:20:00,690
but during speculation it will use the

494
00:19:58,950 --> 00:20:03,630
the secret value leak from there as an

495
00:20:00,690 --> 00:20:05,370
index to the mem array and recover will

496
00:20:03,630 --> 00:20:09,659
do the flushing reload and that's all

497
00:20:05,370 --> 00:20:11,330
there is to it so it's super simple so

498
00:20:09,659 --> 00:20:20,460
at this point I will start my demo

499
00:20:11,330 --> 00:20:25,049
because it takes a little bit I want to

500
00:20:20,460 --> 00:20:29,309
say I'm really worried about this demo I

501
00:20:25,049 --> 00:20:31,350
I ran it 15 times in preparation it felt

502
00:20:29,309 --> 00:20:36,889
exactly once which was when I tried to

503
00:20:31,350 --> 00:20:39,418
lifetime it last time so fingers crossed

504
00:20:36,890 --> 00:20:43,380
anyway so what this is this doing so

505
00:20:39,419 --> 00:20:46,559
this is just pet renderer I didn't use a

506
00:20:43,380 --> 00:20:49,440
zero day because that was would be

507
00:20:46,559 --> 00:20:52,049
irresponsible it's just a pet renderer I

508
00:20:49,440 --> 00:20:55,110
didn't change the browser code so this

509
00:20:52,049 --> 00:20:58,440
is trying to to do in sandbox escape

510
00:20:55,110 --> 00:21:02,428
based on this buck so a few things that

511
00:20:58,440 --> 00:21:04,230
we need from here to make this reliable

512
00:21:02,429 --> 00:21:05,940
enough and fast enough to work in a

513
00:21:04,230 --> 00:21:09,179
real-world scenario and work in a live

514
00:21:05,940 --> 00:21:10,559
demo on stage first thing is we want to

515
00:21:09,179 --> 00:21:15,450
optimize the exploit and make it as fast

516
00:21:10,559 --> 00:21:17,520
as possible right so well the I wish I

517
00:21:15,450 --> 00:21:22,049
had really cool tricks here but in the

518
00:21:17,520 --> 00:21:23,789
end all of this boils down to you saw

519
00:21:22,049 --> 00:21:25,529
this in the instruction that leaks the

520
00:21:23,789 --> 00:21:27,059
secret value is the one that triggers

521
00:21:25,529 --> 00:21:29,669
the seg fault right

522
00:21:27,059 --> 00:21:31,678
and then afterwards you go through this

523
00:21:29,669 --> 00:21:34,320
huge array and check if if you leaked

524
00:21:31,679 --> 00:21:36,659
something but you very rarely leak

525
00:21:34,320 --> 00:21:38,908
something so it's much better to just

526
00:21:36,659 --> 00:21:40,860
try to improve the time you spend on

527
00:21:38,909 --> 00:21:42,510
actually leaking and reduce the time you

528
00:21:40,860 --> 00:21:45,000
spend on looking if you leak something

529
00:21:42,510 --> 00:21:48,090
so in the end what I did was like well

530
00:21:45,000 --> 00:21:50,520
just add a follow up around the leak

531
00:21:48,090 --> 00:21:54,120
suddenly the exploit becomes much faster

532
00:21:50,520 --> 00:21:56,250
or this is the instructions I initially

533
00:21:54,120 --> 00:21:57,889
used for timing the axis like if you

534
00:21:56,250 --> 00:22:01,350
want to check if something that cashed

535
00:21:57,890 --> 00:22:02,760
well you you Google how to do this then

536
00:22:01,350 --> 00:22:04,199
you find some Intel paper that explains

537
00:22:02,760 --> 00:22:06,590
you well just put these instructions

538
00:22:04,200 --> 00:22:09,630
thick there's a cpu ID that's blocks

539
00:22:06,590 --> 00:22:10,949
speculation the memory fans then read

540
00:22:09,630 --> 00:22:12,960
the timestamp counter and then you do

541
00:22:10,950 --> 00:22:14,040
the same in Reverse and whatever and

542
00:22:12,960 --> 00:22:15,770
then you can time what's happening

543
00:22:14,040 --> 00:22:18,330
between these two instructions right

544
00:22:15,770 --> 00:22:20,970
except that we don't actually need this

545
00:22:18,330 --> 00:22:23,790
good timing and CPU ID and M fans is

546
00:22:20,970 --> 00:22:25,920
really slow so let's just get rid of

547
00:22:23,790 --> 00:22:29,040
this it also work as long as you leave

548
00:22:25,920 --> 00:22:30,480
one M sense to to block the CPU to just

549
00:22:29,040 --> 00:22:34,139
speculating over the next one and

550
00:22:30,480 --> 00:22:36,360
breaking your exploit and then another

551
00:22:34,140 --> 00:22:38,160
thing that I had a hard time figuring

552
00:22:36,360 --> 00:22:39,629
out but it's documented everywhere so if

553
00:22:38,160 --> 00:22:42,900
you know what you're doing you probably

554
00:22:39,630 --> 00:22:45,240
have much easier time is the CPU is

555
00:22:42,900 --> 00:22:46,980
doing stuff like prefetching so I

556
00:22:45,240 --> 00:22:48,660
noticed like the small I make the proper

557
00:22:46,980 --> 00:22:50,930
rate the faster it will be which I

558
00:22:48,660 --> 00:22:56,310
believe is probably because I used less

559
00:22:50,930 --> 00:22:57,660
TLB indexes less TLB entries but also if

560
00:22:56,310 --> 00:22:59,790
I make it too small suddenly nothing

561
00:22:57,660 --> 00:23:02,040
works anymore and it just leaks any

562
00:22:59,790 --> 00:23:03,570
random value and just leaks pretty much

563
00:23:02,040 --> 00:23:06,000
every value it tells me every value that

564
00:23:03,570 --> 00:23:07,350
leaked which seems wrong and there's

565
00:23:06,000 --> 00:23:09,780
something because the CPU tries to

566
00:23:07,350 --> 00:23:11,250
prefetch this if you notice a pattern in

567
00:23:09,780 --> 00:23:15,480
your memory access it says prefetching

568
00:23:11,250 --> 00:23:16,830
things and then once you actually try to

569
00:23:15,480 --> 00:23:18,090
access the next one it will be super

570
00:23:16,830 --> 00:23:19,649
fast because it has already been

571
00:23:18,090 --> 00:23:23,040
prefixed prefetched

572
00:23:19,650 --> 00:23:24,990
so one simple trick we came up with to

573
00:23:23,040 --> 00:23:26,909
just get rid of all this complexity is

574
00:23:24,990 --> 00:23:29,520
just let's just leak one bit at a time

575
00:23:26,910 --> 00:23:31,410
right why do a hold by just lets you

576
00:23:29,520 --> 00:23:33,810
sleep one bit you don't have to worry

577
00:23:31,410 --> 00:23:35,370
about anything and in in practice it was

578
00:23:33,810 --> 00:23:37,010
surprisingly just as fast as leaking by

579
00:23:35,370 --> 00:23:40,169
its but I'm not entirely sure why

580
00:23:37,010 --> 00:23:43,320
probably because you also don't need to

581
00:23:40,170 --> 00:23:46,440
look at 256 indexes but now you only

582
00:23:43,320 --> 00:23:47,850
need to look at two two indexes in your

583
00:23:46,440 --> 00:23:55,020
prope right to figure out if you have a

584
00:23:47,850 --> 00:23:56,699
bit leak or not then so now we leak from

585
00:23:55,020 --> 00:24:00,360
one process this allows us to leak

586
00:23:56,700 --> 00:24:01,500
memory but we don't control what we leak

587
00:24:00,360 --> 00:24:02,639
we leak randoms

588
00:24:01,500 --> 00:24:06,060
stuff that the other process is

589
00:24:02,640 --> 00:24:07,620
accessing so in order to improve our

590
00:24:06,060 --> 00:24:09,629
chances that this is the secret that we

591
00:24:07,620 --> 00:24:13,949
care about we want to make the browser

592
00:24:09,630 --> 00:24:15,870
process actually use the secret so first

593
00:24:13,950 --> 00:24:17,580
of all we're looking at the UL Oda

594
00:24:15,870 --> 00:24:19,949
factory again right there was target

595
00:24:17,580 --> 00:24:23,639
from before so you can probably trigger

596
00:24:19,950 --> 00:24:25,560
an access from the browser to the

597
00:24:23,640 --> 00:24:27,030
privilege a lot of factories somehow but

598
00:24:25,560 --> 00:24:30,179
then we'll probably make a network

599
00:24:27,030 --> 00:24:31,680
request this will be slow so but you

600
00:24:30,180 --> 00:24:33,870
will notice like if you look at the

601
00:24:31,680 --> 00:24:35,280
network context if you can leak in a

602
00:24:33,870 --> 00:24:36,570
connection to the network context the

603
00:24:35,280 --> 00:24:38,250
network context allows you to create a

604
00:24:36,570 --> 00:24:40,800
new you a lot of your a lot of factories

605
00:24:38,250 --> 00:24:42,420
which is exactly what we like we can

606
00:24:40,800 --> 00:24:43,580
just create our own privilege see a lot

607
00:24:42,420 --> 00:24:45,990
of factory if you can lick that one

608
00:24:43,580 --> 00:24:47,429
similarly with the network service we

609
00:24:45,990 --> 00:24:49,560
can leak we can create a new network

610
00:24:47,430 --> 00:24:52,440
context if we leak a connection to the

611
00:24:49,560 --> 00:24:53,879
service manager you get the idea except

612
00:24:52,440 --> 00:24:55,680
that the last one doesn't work anymore

613
00:24:53,880 --> 00:24:57,420
in the middle of me writing the exploit

614
00:24:55,680 --> 00:24:59,760
to lead to target the service manager

615
00:24:57,420 --> 00:25:02,370
they changed that so now I'm going for

616
00:24:59,760 --> 00:25:09,720
the network service again instead in my

617
00:25:02,370 --> 00:25:11,639
final exploit so now the way I like now

618
00:25:09,720 --> 00:25:13,440
how do you trigger connection the

619
00:25:11,640 --> 00:25:15,600
connection from the browser to the

620
00:25:13,440 --> 00:25:18,480
network service well you look through

621
00:25:15,600 --> 00:25:19,949
the network service interface and then

622
00:25:18,480 --> 00:25:23,100
you see this method on peer to peer

623
00:25:19,950 --> 00:25:24,750
connection can't change which sounds

624
00:25:23,100 --> 00:25:26,820
like something we could control right

625
00:25:24,750 --> 00:25:28,470
like peer to peer connection sounds like

626
00:25:26,820 --> 00:25:30,120
something happening in the renderer so

627
00:25:28,470 --> 00:25:32,130
if we tell the browser hey this

628
00:25:30,120 --> 00:25:34,560
connection can't change maybe it will

629
00:25:32,130 --> 00:25:36,960
forward it to the network service and

630
00:25:34,560 --> 00:25:38,399
this is exactly what's happening so we

631
00:25:36,960 --> 00:25:41,220
have this so we created web RTC

632
00:25:38,400 --> 00:25:43,140
connection and then we have this we have

633
00:25:41,220 --> 00:25:44,910
this call update of peer connection

634
00:25:43,140 --> 00:25:46,950
where we can say well this one just

635
00:25:44,910 --> 00:25:48,920
connected or this one just disconnected

636
00:25:46,950 --> 00:25:51,030
and every time you send such a message

637
00:25:48,920 --> 00:25:52,620
the browser process will talk to the

638
00:25:51,030 --> 00:25:55,320
network process saying hey the

639
00:25:52,620 --> 00:26:00,550
connection can't change between zero and

640
00:25:55,320 --> 00:26:06,428
one this didn't work

641
00:26:00,550 --> 00:26:10,090
let me just reach it oh well it's still

642
00:26:06,429 --> 00:26:12,220
running anyway I mean every of these the

643
00:26:10,090 --> 00:26:13,928
browser will use some secrets and barri

644
00:26:12,220 --> 00:26:16,720
one from one of the other end dress

645
00:26:13,929 --> 00:26:20,650
rerun the MVS attack like we wanted the

646
00:26:16,720 --> 00:26:23,160
riddle exploit it and some point we

647
00:26:20,650 --> 00:26:25,360
should be able to leak it from the other

648
00:26:23,160 --> 00:26:28,870
from the other process and then use it

649
00:26:25,360 --> 00:26:31,629
to inject messages then one more thing

650
00:26:28,870 --> 00:26:34,000
is missing so I told you we just leaking

651
00:26:31,630 --> 00:26:36,070
a single bit right so how do you know

652
00:26:34,000 --> 00:26:39,460
which bit it is how do you stitch this

653
00:26:36,070 --> 00:26:40,659
together and this you can find in the in

654
00:26:39,460 --> 00:26:42,250
the riddle pipe already

655
00:26:40,660 --> 00:26:44,260
it's it's already described in there

656
00:26:42,250 --> 00:26:45,880
which is pretty much you do a prefix

657
00:26:44,260 --> 00:26:49,179
matching or you can also do a suffix

658
00:26:45,880 --> 00:26:51,429
matching so you just gdb attach to the

659
00:26:49,179 --> 00:26:53,710
browser figure out what is in front of

660
00:26:51,429 --> 00:26:55,809
the secret for example in this case in

661
00:26:53,710 --> 00:27:00,309
front of the secret in red we have this

662
00:26:55,809 --> 00:27:02,500
constant and then you access it so

663
00:27:00,309 --> 00:27:05,710
that's just a single byte or in our case

664
00:27:02,500 --> 00:27:07,480
a single bit is a secret and the other

665
00:27:05,710 --> 00:27:10,780
one is known and then you just filter on

666
00:27:07,480 --> 00:27:12,670
well if the prefix was this then leak

667
00:27:10,780 --> 00:27:17,230
the next by it only click the next bit

668
00:27:12,670 --> 00:27:19,090
and that's pretty much it so except for

669
00:27:17,230 --> 00:27:22,330
we're talking the whole time about

670
00:27:19,090 --> 00:27:26,678
reading files but if you paid attention

671
00:27:22,330 --> 00:27:30,550
the title says popping calc otherwise

672
00:27:26,679 --> 00:27:33,340
yeah it would not be fun so back to the

673
00:27:30,550 --> 00:27:36,220
drawing board favorite hacking tool code

674
00:27:33,340 --> 00:27:37,870
search same careers before let's find

675
00:27:36,220 --> 00:27:41,080
all the other interfaces with file paths

676
00:27:37,870 --> 00:27:44,110
are used and the network context what

677
00:27:41,080 --> 00:27:46,750
the coincidence if you create a network

678
00:27:44,110 --> 00:27:48,309
context you can you can tell the network

679
00:27:46,750 --> 00:27:52,210
process where you want to store cookies

680
00:27:48,309 --> 00:27:55,928
and the cookies this will be a secret

681
00:27:52,210 --> 00:27:58,900
light three database so you don't

682
00:27:55,929 --> 00:28:02,309
control the file itself you can just

683
00:27:58,900 --> 00:28:04,570
what this gives you is you can write a

684
00:28:02,309 --> 00:28:07,840
secret light three database to any

685
00:28:04,570 --> 00:28:09,939
location on the machine and you kind of

686
00:28:07,840 --> 00:28:12,280
control the content as in you can insert

687
00:28:09,940 --> 00:28:16,710
cookies and

688
00:28:12,280 --> 00:28:23,139
I really hope this worked yes okay so

689
00:28:16,710 --> 00:28:25,990
first try so at first this seemed like

690
00:28:23,140 --> 00:28:27,780
well this is kind of useless primitive I

691
00:28:25,990 --> 00:28:30,400
don't really know what to do with this

692
00:28:27,780 --> 00:28:32,800
but then there's this startup folder

693
00:28:30,400 --> 00:28:34,690
right and here in the in the startup

694
00:28:32,800 --> 00:28:36,610
folder of the machine you of the user

695
00:28:34,690 --> 00:28:39,400
you see there's this outer exit path

696
00:28:36,610 --> 00:28:43,300
which usually shouldn't be in there and

697
00:28:39,400 --> 00:28:45,850
what happens I don't know if you're

698
00:28:43,300 --> 00:28:52,210
familiar with the bat interpreter on

699
00:28:45,850 --> 00:28:56,590
Windows but to my surprise it's pretty

700
00:28:52,210 --> 00:28:59,260
lenient on what it accepts as in the

701
00:28:56,590 --> 00:29:00,429
format so let's try to see what happens

702
00:28:59,260 --> 00:29:09,900
if you give it a sequel I'd three

703
00:29:00,430 --> 00:29:09,900
database with cookies okay like oh okay

704
00:29:12,870 --> 00:29:19,609
[Applause]

705
00:29:20,650 --> 00:29:25,790
okay so what happened there well it's

706
00:29:23,540 --> 00:29:28,490
just this you insert this cookie new

707
00:29:25,790 --> 00:29:31,520
lion Kalki XE new line and if you looked

708
00:29:28,490 --> 00:29:32,690
at the output I remember says secret

709
00:29:31,520 --> 00:29:35,150
like three I don't know what that means

710
00:29:32,690 --> 00:29:37,520
let me ignore this command Oh

711
00:29:35,150 --> 00:29:38,780
Kalki xee let's execute this this sounds

712
00:29:37,520 --> 00:29:46,010
great I don't care about all the now

713
00:29:38,780 --> 00:29:47,928
bytes in between yes so in summary I was

714
00:29:46,010 --> 00:29:49,370
surprised that this works all of this is

715
00:29:47,929 --> 00:29:53,840
public already I didn't tell you any

716
00:29:49,370 --> 00:29:54,919
secrets here and still you can do kind

717
00:29:53,840 --> 00:29:58,159
of cool things with this and they're

718
00:29:54,920 --> 00:30:00,050
really under well I didn't expect that

719
00:29:58,160 --> 00:30:02,300
Harper box would be this cool in

720
00:30:00,050 --> 00:30:06,290
practice I hope I could convince you and

721
00:30:02,300 --> 00:30:08,178
I have I came into this with zero

722
00:30:06,290 --> 00:30:09,530
experience on hardware I still don't

723
00:30:08,179 --> 00:30:11,660
know anything if I hear people talk

724
00:30:09,530 --> 00:30:13,309
about it I always wonder what they mean

725
00:30:11,660 --> 00:30:20,470
and still I was able to write an

726
00:30:13,309 --> 00:30:23,860
explicit hyper-threading and I think a

727
00:30:20,470 --> 00:30:26,590
system just think of other places where

728
00:30:23,860 --> 00:30:28,699
memory like if you don't have any any

729
00:30:26,590 --> 00:30:31,189
memory protections between processes

730
00:30:28,700 --> 00:30:32,600
that is pretty bad and there are

731
00:30:31,190 --> 00:30:35,430
probably much more cool things you can

732
00:30:32,600 --> 00:30:38,429
do with this thank you

733
00:30:35,430 --> 00:30:38,430
[Applause]

