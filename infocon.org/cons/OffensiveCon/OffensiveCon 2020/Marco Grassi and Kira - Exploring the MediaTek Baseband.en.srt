1
00:00:03,529 --> 00:00:09,300
thank you everyone for staying late for

2
00:00:06,150 --> 00:00:14,549
our tour and today we will talk to you

3
00:00:09,300 --> 00:00:17,340
about the mediatek basement so about us

4
00:00:14,549 --> 00:00:21,330
we are from Tencent in security lab and

5
00:00:17,340 --> 00:00:25,439
before we were known as kin team and I'm

6
00:00:21,330 --> 00:00:27,750
Marko this is my twitter handle and now

7
00:00:25,439 --> 00:00:31,380
I work on hypervisor and basement and

8
00:00:27,750 --> 00:00:34,370
before I was doing iOS and Android and I

9
00:00:31,380 --> 00:00:39,960
competed in some point one in the past

10
00:00:34,370 --> 00:00:45,269
hello Kyra a security researcher at ten

11
00:00:39,960 --> 00:00:46,110
cent King and I I was doing the happy

12
00:00:45,270 --> 00:00:49,710
parcel

13
00:00:46,110 --> 00:00:54,750
before last year and now switch to the

14
00:00:49,710 --> 00:01:01,829
place pan and I also play city of my

15
00:00:54,750 --> 00:01:04,170
spare time so we are from Shanghai and

16
00:01:01,829 --> 00:01:06,390
this is our blog and Twitter if you want

17
00:01:04,170 --> 00:01:10,820
to check it out and we are white at a

18
00:01:06,390 --> 00:01:14,790
security researcher inside the tensed so

19
00:01:10,820 --> 00:01:17,130
this is what we will talk about today I

20
00:01:14,790 --> 00:01:19,409
will do the first part of the talk which

21
00:01:17,130 --> 00:01:21,750
is the less interesting one and then

22
00:01:19,409 --> 00:01:24,330
Kyra will do the more interesting one

23
00:01:21,750 --> 00:01:27,090
which is the second part about the

24
00:01:24,330 --> 00:01:29,729
mediatek basement we will talk a little

25
00:01:27,090 --> 00:01:33,530
bit about the previous work on this

26
00:01:29,729 --> 00:01:36,750
modem then a little bit about the

27
00:01:33,530 --> 00:01:39,299
networks from second generation to five

28
00:01:36,750 --> 00:01:42,390
generation and in particular

29
00:01:39,299 --> 00:01:45,990
fifth generation since it's a popular

30
00:01:42,390 --> 00:01:49,020
topic today and then we will give an

31
00:01:45,990 --> 00:01:53,820
overview of the base land in a generic

32
00:01:49,020 --> 00:01:58,469
way and then we will cover the MDK base

33
00:01:53,820 --> 00:02:03,079
bender in detail so there is some public

34
00:01:58,469 --> 00:02:03,079
work about the mediatek modem

35
00:02:04,010 --> 00:02:11,930
humane public research are this talk by

36
00:02:08,509 --> 00:02:14,450
charge Nita and Anna which is called

37
00:02:11,930 --> 00:02:16,460
understanding and the barking attacking

38
00:02:14,450 --> 00:02:18,980
the mediatek communication processor

39
00:02:16,460 --> 00:02:22,060
which gives ooh gives you a good

40
00:02:18,980 --> 00:02:25,790
overview of the modem and its internal

41
00:02:22,060 --> 00:02:29,510
structure comm securities also made a

42
00:02:25,790 --> 00:02:31,220
blog post but this one covers the attack

43
00:02:29,510 --> 00:02:34,989
surface from the modem to the

44
00:02:31,220 --> 00:02:38,840
application processor and in particular

45
00:02:34,990 --> 00:02:42,980
how to escape the modem to run code on

46
00:02:38,840 --> 00:02:45,590
the application processor with a bad so

47
00:02:42,980 --> 00:02:48,079
there is no much public material on

48
00:02:45,590 --> 00:02:50,930
MediaTek actually unlike for example

49
00:02:48,080 --> 00:02:57,650
more popular platform like a samsung

50
00:02:50,930 --> 00:03:01,040
Shannon going outside the mediatek there

51
00:02:57,650 --> 00:03:03,590
is other research on the modems here at

52
00:03:01,040 --> 00:03:06,950
least three of them the first one is

53
00:03:03,590 --> 00:03:10,040
from our self from Kim lab which covers

54
00:03:06,950 --> 00:03:13,399
the Huawei model it's a talk that we

55
00:03:10,040 --> 00:03:15,739
give at blackhat and we exploited the

56
00:03:13,400 --> 00:03:21,100
Huawei baseband with a memory corruption

57
00:03:15,739 --> 00:03:24,560
bug for the Samsung platform I recommend

58
00:03:21,100 --> 00:03:28,660
the talk by Ahmad which covers

59
00:03:24,560 --> 00:03:33,530
everything about the Samsung modem plus

60
00:03:28,660 --> 00:03:35,870
memory corruption bugs and for the Intel

61
00:03:33,530 --> 00:03:39,040
baseband con Security's made a very good

62
00:03:35,870 --> 00:03:42,920
blog post if you want to check it out

63
00:03:39,040 --> 00:03:45,920
so why we started this research last

64
00:03:42,920 --> 00:03:49,579
year we got a contract with a vendor to

65
00:03:45,920 --> 00:03:51,679
improve the security of their model so

66
00:03:49,580 --> 00:03:55,519
we did this kind of research for them

67
00:03:51,680 --> 00:03:57,760
but previously in our daily job we were

68
00:03:55,519 --> 00:04:00,560
already familiar with the mediatek modem

69
00:03:57,760 --> 00:04:04,790
because we check pretty much every

70
00:04:00,560 --> 00:04:08,000
basement at the end of this contract we

71
00:04:04,790 --> 00:04:09,120
disclose the to this vendor a bunch of

72
00:04:08,000 --> 00:04:13,560
bugs and the

73
00:04:09,120 --> 00:04:15,870
fix them and this talk we will in this

74
00:04:13,560 --> 00:04:19,139
talk we will cover our work on this

75
00:04:15,870 --> 00:04:21,690
platform and especially how you you can

76
00:04:19,139 --> 00:04:25,080
start your own research on this modem

77
00:04:21,690 --> 00:04:30,260
and recently with which to do some fifth

78
00:04:25,080 --> 00:04:33,750
generation project with other vendor so

79
00:04:30,260 --> 00:04:36,659
why it's interesting to check the media

80
00:04:33,750 --> 00:04:38,340
tech platform the media tech platform

81
00:04:36,660 --> 00:04:41,550
maybe doesn't run on the high hand

82
00:04:38,340 --> 00:04:45,270
device but it still have a significant

83
00:04:41,550 --> 00:04:49,229
market share especially on medium and

84
00:04:45,270 --> 00:04:52,198
low price device I found article online

85
00:04:49,229 --> 00:04:56,699
say estimating that the market share is

86
00:04:52,199 --> 00:04:59,160
around 11% and recently it became

87
00:04:56,699 --> 00:05:03,900
popular was in Europe with some Samsung

88
00:04:59,160 --> 00:05:09,949
Galaxy models which they run the media

89
00:05:03,900 --> 00:05:12,479
tech system on chip and the modem so

90
00:05:09,949 --> 00:05:15,150
let's check the network really quick to

91
00:05:12,479 --> 00:05:16,889
get everyone up to speed I know in the

92
00:05:15,150 --> 00:05:20,760
audience there is maybe people that took

93
00:05:16,889 --> 00:05:23,430
the baseband training so but still we

94
00:05:20,760 --> 00:05:27,450
have to cover a little bit a bit before

95
00:05:23,430 --> 00:05:29,849
checking the media tech basement so what

96
00:05:27,450 --> 00:05:33,000
is a basement or a modem is basically a

97
00:05:29,849 --> 00:05:36,030
set of hardware components which runs a

98
00:05:33,000 --> 00:05:40,710
firmware and they implement set of

99
00:05:36,030 --> 00:05:44,429
specification conforming to a cellular

100
00:05:40,710 --> 00:05:46,198
network specification so they have to do

101
00:05:44,430 --> 00:05:49,110
it in order to speak with the network

102
00:05:46,199 --> 00:05:52,710
and the coded messages we have several

103
00:05:49,110 --> 00:05:56,010
generation of cellular network they are

104
00:05:52,710 --> 00:06:03,659
commonly referred such as second

105
00:05:56,010 --> 00:06:07,800
generation or fifth generation so one

106
00:06:03,660 --> 00:06:10,470
very important topic of mobile network

107
00:06:07,800 --> 00:06:13,289
is authentication because all the

108
00:06:10,470 --> 00:06:18,360
generation such as second generation and

109
00:06:13,289 --> 00:06:20,490
the 2.5 generation the the mobile phone

110
00:06:18,360 --> 00:06:22,900
or the device will not authenticate the

111
00:06:20,490 --> 00:06:26,490
base station so it's possible to empower

112
00:06:22,900 --> 00:06:30,250
sunita malicious Network in this

113
00:06:26,490 --> 00:06:32,889
circumstances and exploit or send

114
00:06:30,250 --> 00:06:35,770
malicious data to the phone starting

115
00:06:32,889 --> 00:06:40,720
from the third generation which in this

116
00:06:35,770 --> 00:06:43,240
light is from UMTS there is some form of

117
00:06:40,720 --> 00:06:45,789
authentication for the phone to verify

118
00:06:43,240 --> 00:06:50,310
that they are speaking with a legitimate

119
00:06:45,789 --> 00:06:52,469
base station but not all layers are

120
00:06:50,310 --> 00:06:58,410
authenticated so there is still room for

121
00:06:52,470 --> 00:07:01,720
attack surface like a most popular

122
00:06:58,410 --> 00:07:07,470
Network stack such as I don't know

123
00:07:01,720 --> 00:07:12,160
common Internet Protocol the mobile

124
00:07:07,470 --> 00:07:15,060
network protocol are also layered so you

125
00:07:12,160 --> 00:07:18,240
can see on the right side of the model

126
00:07:15,060 --> 00:07:24,639
with seven layer and on the right side

127
00:07:18,240 --> 00:07:26,139
there is a picture for the GSM and you

128
00:07:24,639 --> 00:07:29,070
can see they also have a physical layer

129
00:07:26,139 --> 00:07:32,440
data link layer and the network layer

130
00:07:29,070 --> 00:07:35,500
they don't perfectly match but you can

131
00:07:32,440 --> 00:07:39,370
still have a idea so basically the

132
00:07:35,500 --> 00:07:42,490
higher you go into the layer the higher

133
00:07:39,370 --> 00:07:46,449
the complexity and this is similar for

134
00:07:42,490 --> 00:07:50,220
example on a traditional protocol if you

135
00:07:46,449 --> 00:07:52,840
think about I don't know TCP and full

136
00:07:50,220 --> 00:07:57,610
HTTP web application or something like

137
00:07:52,840 --> 00:08:00,729
that so complexity and most interesting

138
00:07:57,610 --> 00:08:07,330
back often they are found in the upper

139
00:08:00,729 --> 00:08:12,340
layer like layer 3 about 5g let me spend

140
00:08:07,330 --> 00:08:18,430
a little bit of more slides and why now

141
00:08:12,340 --> 00:08:22,690
the result is hype about 5 g and y 5g

142
00:08:18,430 --> 00:08:26,320
exists basically so until 4th generation

143
00:08:22,690 --> 00:08:28,300
basically the goal of the carrier was to

144
00:08:26,320 --> 00:08:32,049
get everyone connected and give you high

145
00:08:28,300 --> 00:08:34,789
bandwidth and enjoy rich content and

146
00:08:32,049 --> 00:08:37,579
fast download but now

147
00:08:34,789 --> 00:08:41,719
I mean everyone has a smartphone and a

148
00:08:37,580 --> 00:08:47,540
laptop so there is not much room for for

149
00:08:41,720 --> 00:08:49,910
growing so 5g the focus is shift and the

150
00:08:47,540 --> 00:08:54,050
focus now is a capacity and the chip

151
00:08:49,910 --> 00:08:56,510
radius so basically now the plan is to

152
00:08:54,050 --> 00:09:03,859
connect everything the car the device

153
00:08:56,510 --> 00:09:06,050
the sensor and the IOT market so for

154
00:09:03,860 --> 00:09:09,680
fifth generation there are several big

155
00:09:06,050 --> 00:09:12,829
player some are ahead some are a little

156
00:09:09,680 --> 00:09:15,650
bit behind of course there is Huawei

157
00:09:12,830 --> 00:09:19,910
which is pushing 5g very hard and

158
00:09:15,650 --> 00:09:26,870
Qualcomm and then other player that are

159
00:09:19,910 --> 00:09:29,150
kind of catching up and 5g we also have

160
00:09:26,870 --> 00:09:31,790
a role in critical infrastructure

161
00:09:29,150 --> 00:09:35,870
because the expected capacity of this

162
00:09:31,790 --> 00:09:41,209
kind of network will be 1 million object

163
00:09:35,870 --> 00:09:43,670
for a square kilometer and so with this

164
00:09:41,210 --> 00:09:47,780
kind of number you cannot expect the

165
00:09:43,670 --> 00:09:50,270
consumer to be end user in 5g you will

166
00:09:47,780 --> 00:09:54,740
have object consuming the network so you

167
00:09:50,270 --> 00:10:01,250
will have robot cars surveillance

168
00:09:54,740 --> 00:10:04,480
equipment city management and this will

169
00:10:01,250 --> 00:10:08,740
impose also some reliability

170
00:10:04,480 --> 00:10:11,030
requirements of course and because in 4G

171
00:10:08,740 --> 00:10:14,780
reliability of course is important but

172
00:10:11,030 --> 00:10:16,339
it's not critical so you will have you

173
00:10:14,780 --> 00:10:23,270
will basically switch from something

174
00:10:16,340 --> 00:10:25,880
consumer level to something else and not

175
00:10:23,270 --> 00:10:27,590
only smartphone will be connected of

176
00:10:25,880 --> 00:10:32,750
course in this talk we will mostly talk

177
00:10:27,590 --> 00:10:35,690
about smartphone but in the next few

178
00:10:32,750 --> 00:10:39,140
years I think the basement research will

179
00:10:35,690 --> 00:10:42,400
expand to more even more interesting

180
00:10:39,140 --> 00:10:47,090
targets actually because more and more

181
00:10:42,400 --> 00:10:49,120
device will have a modem so

182
00:10:47,090 --> 00:10:52,100
right here in the picture you can see

183
00:10:49,120 --> 00:10:58,940
there is some PCI Express modem that you

184
00:10:52,100 --> 00:11:02,600
maybe find in a car so this kind of

185
00:10:58,940 --> 00:11:08,180
deployment require different approach

186
00:11:02,600 --> 00:11:10,040
so 5g will have to satisfy different

187
00:11:08,180 --> 00:11:12,199
type of goal you will have different

188
00:11:10,040 --> 00:11:15,860
deployment based on the different type

189
00:11:12,200 --> 00:11:18,500
of property or network will have you can

190
00:11:15,860 --> 00:11:21,320
have a enhancer to broadband which will

191
00:11:18,500 --> 00:11:24,590
bring a faster data consumption so

192
00:11:21,320 --> 00:11:29,150
basically improved 4G but then you have

193
00:11:24,590 --> 00:11:30,760
also another mode mode which is URL C

194
00:11:29,150 --> 00:11:33,470
which is for a mission critical

195
00:11:30,760 --> 00:11:37,850
application that don't care much about

196
00:11:33,470 --> 00:11:41,330
bandwidth but they cannot afford delay

197
00:11:37,850 --> 00:11:45,620
or a reliability think about some

198
00:11:41,330 --> 00:11:48,480
network of industrial robot and another

199
00:11:45,620 --> 00:11:49,720
example is mass machine-to-machine

200
00:11:48,480 --> 00:11:54,800
[Music]

201
00:11:49,720 --> 00:11:58,490
deployment so currently we are working

202
00:11:54,800 --> 00:12:01,939
on several 5g devices while we of course

203
00:11:58,490 --> 00:12:06,620
which has which is pushing five g's or

204
00:12:01,940 --> 00:12:10,520
their firmware have 5g network stack the

205
00:12:06,620 --> 00:12:15,080
phones and some Wi-Fi router then there

206
00:12:10,520 --> 00:12:18,500
is the Samsung Note 10 which came out

207
00:12:15,080 --> 00:12:21,680
recently and of the 5g stack by Samsung

208
00:12:18,500 --> 00:12:24,190
on the Exynos platform and some Qualcomm

209
00:12:21,680 --> 00:12:24,189
devices

210
00:12:24,650 --> 00:12:29,000
the problem with 5g research is that

211
00:12:26,780 --> 00:12:32,260
there is no completely ready solution

212
00:12:29,000 --> 00:12:35,150
and there is these projects from eurocom

213
00:12:32,260 --> 00:12:38,020
which they are trying to build a open

214
00:12:35,150 --> 00:12:42,590
source stack that can run with a u.s.

215
00:12:38,020 --> 00:12:45,560
USRP and they are still developing and

216
00:12:42,590 --> 00:12:48,650
we are actively tracking and we hope we

217
00:12:45,560 --> 00:12:51,650
can contribute in the future

218
00:12:48,650 --> 00:12:54,260
so before leaving the stage to Kira I

219
00:12:51,650 --> 00:12:57,970
want to give some tricks to set up the

220
00:12:54,260 --> 00:13:00,830
basement the sorry the base station and

221
00:12:57,970 --> 00:13:04,850
I think the best solution is probably to

222
00:13:00,830 --> 00:13:06,830
use a doctor if you can and because if

223
00:13:04,850 --> 00:13:10,820
you use a virtual machine you will have

224
00:13:06,830 --> 00:13:15,400
to use a virtualized USB controller and

225
00:13:10,820 --> 00:13:17,270
this will introduce delays and

226
00:13:15,400 --> 00:13:19,490
software-defined radio are very

227
00:13:17,270 --> 00:13:21,980
sensitive to to delays as you can

228
00:13:19,490 --> 00:13:25,780
imagine so instead with the docker you

229
00:13:21,980 --> 00:13:29,480
can just forward the USB bus inside and

230
00:13:25,780 --> 00:13:33,860
your staff can directly talk with the

231
00:13:29,480 --> 00:13:36,110
SDR and also it's useful to keep

232
00:13:33,860 --> 00:13:39,050
separated the environment for the base

233
00:13:36,110 --> 00:13:42,890
station because often this kind of

234
00:13:39,050 --> 00:13:45,979
software require a lot of strange

235
00:13:42,890 --> 00:13:49,699
dependencies and some of them are even

236
00:13:45,980 --> 00:13:53,660
requiring kernel modifications so it's

237
00:13:49,700 --> 00:13:56,090
better to run a standalone machine so I

238
00:13:53,660 --> 00:13:59,079
wanted to summarize in a slide to attack

239
00:13:56,090 --> 00:14:02,300
the basement you need the two

240
00:13:59,080 --> 00:14:05,870
ingredients the first one is a mobile

241
00:14:02,300 --> 00:14:09,260
stack software it can be open BSC open

242
00:14:05,870 --> 00:14:12,380
BTS or SL LT you will modify this

243
00:14:09,260 --> 00:14:15,220
software to send your exploit

244
00:14:12,380 --> 00:14:20,660
over-the-air then you need some hardware

245
00:14:15,220 --> 00:14:24,050
which can be SDR for example the USRP

246
00:14:20,660 --> 00:14:26,329
blade RF or a lime SDR or some custom

247
00:14:24,050 --> 00:14:28,819
hardware like we demonstrated in our

248
00:14:26,330 --> 00:14:33,260
Blackett talk with the Huawei baseband

249
00:14:28,820 --> 00:14:37,100
we use it CMU 200 which is a mobile

250
00:14:33,260 --> 00:14:39,530
radio testing device this two component

251
00:14:37,100 --> 00:14:42,880
will modulate the signal over the air

252
00:14:39,530 --> 00:14:48,730
and hopefully you can trigger your

253
00:14:42,880 --> 00:14:48,730
exploit your bug sorry into the basement

254
00:14:49,120 --> 00:14:57,620
this picture is a summary of mobile

255
00:14:53,870 --> 00:14:59,720
smartphone because now I'm all the

256
00:14:57,620 --> 00:15:04,600
mobile phone is not any

257
00:14:59,720 --> 00:15:08,449
or a single CPU and some run and memory

258
00:15:04,600 --> 00:15:10,279
execution executing software now these

259
00:15:08,449 --> 00:15:14,839
kind of devices are more and more

260
00:15:10,279 --> 00:15:17,000
complex you have at least three CPU on

261
00:15:14,839 --> 00:15:19,610
it the first one is of course the

262
00:15:17,000 --> 00:15:22,129
application processor which runs Android

263
00:15:19,610 --> 00:15:24,769
or iOS then you have the baseband

264
00:15:22,129 --> 00:15:27,319
processor which is the model which we

265
00:15:24,769 --> 00:15:29,899
will cover in this talk and then you

266
00:15:27,319 --> 00:15:33,110
maybe have a Wi-Fi system on chip and

267
00:15:29,899 --> 00:15:38,120
the basement they handled the mobile

268
00:15:33,110 --> 00:15:41,889
network so 2 G 4G etc and this kind of

269
00:15:38,120 --> 00:15:44,839
component can be a tacit remotely so

270
00:15:41,889 --> 00:15:47,180
what I want to stress is that even you

271
00:15:44,839 --> 00:15:49,550
get code execution inside the basement

272
00:15:47,180 --> 00:15:51,560
you cannot influence directly the

273
00:15:49,550 --> 00:15:54,589
application processor so you still need

274
00:15:51,560 --> 00:15:57,768
another bug in order to escape the

275
00:15:54,589 --> 00:16:01,399
baseband let's say and execute code on

276
00:15:57,769 --> 00:16:04,550
the application processor still from the

277
00:16:01,399 --> 00:16:08,420
basement you have limited capabilities

278
00:16:04,550 --> 00:16:13,029
but still interesting since you are in a

279
00:16:08,420 --> 00:16:17,389
position that you can you can collect

280
00:16:13,029 --> 00:16:21,470
call call data message data and internet

281
00:16:17,389 --> 00:16:24,050
craft traffic and this 2 component the

282
00:16:21,470 --> 00:16:28,040
application processor and the modem the

283
00:16:24,050 --> 00:16:30,740
communicate we are several means for

284
00:16:28,040 --> 00:16:37,370
example shared memory or PCI Express or

285
00:16:30,740 --> 00:16:41,660
even USB and the most interesting part

286
00:16:37,370 --> 00:16:44,809
is that the baseband the currently they

287
00:16:41,660 --> 00:16:47,509
lack of the most modern or even basic

288
00:16:44,809 --> 00:16:50,870
mitigation so they are attractive from

289
00:16:47,509 --> 00:16:56,899
exploitation point of view usually

290
00:16:50,870 --> 00:16:58,879
exploiting a bug is straightforward so I

291
00:16:56,899 --> 00:17:03,069
will leave the stage to Kira which will

292
00:16:58,879 --> 00:17:03,069
present the work on the MediaTek

293
00:17:04,300 --> 00:17:15,250
hello everyone I'm Kira and I will talk

294
00:17:09,109 --> 00:17:19,089
about the media attack baseband first

295
00:17:15,250 --> 00:17:24,079
there are some necessary components of a

296
00:17:19,089 --> 00:17:30,139
basement I list all of them here the

297
00:17:24,079 --> 00:17:33,080
main part of baseband is rtos which if

298
00:17:30,140 --> 00:17:37,250
we mentioned the word basement we are

299
00:17:33,080 --> 00:17:40,870
mostly talking about this thing and the

300
00:17:37,250 --> 00:17:45,559
basement may place on the RTOS like

301
00:17:40,870 --> 00:17:51,610
thread x VxWorks or some other similar

302
00:17:45,559 --> 00:17:57,050
or s and in TOS there are some handlers

303
00:17:51,610 --> 00:18:01,399
or modules to deal with the basement

304
00:17:57,050 --> 00:18:06,710
one of those jobs is loading the modem

305
00:18:01,400 --> 00:18:10,520
image when the phone put up the TOS will

306
00:18:06,710 --> 00:18:17,720
decrypt the image if needed and loaded

307
00:18:10,520 --> 00:18:21,470
in and loaded in the memory and set up

308
00:18:17,720 --> 00:18:25,640
other things the kernel will also join

309
00:18:21,470 --> 00:18:29,690
this procedure as far as I know the

310
00:18:25,640 --> 00:18:35,290
start is kernel involved in working the

311
00:18:29,690 --> 00:18:39,410
TOS command in kernel it will also

312
00:18:35,290 --> 00:18:44,210
register some devices to do the

313
00:18:39,410 --> 00:18:49,550
communication jobs so is the user mode

314
00:18:44,210 --> 00:18:52,220
binary most of the above things are

315
00:18:49,550 --> 00:18:58,250
attacked both which depends on your

316
00:18:52,220 --> 00:19:01,190
target and the most common target is of

317
00:18:58,250 --> 00:19:06,940
course the first one which you can

318
00:19:01,190 --> 00:19:08,840
attack over-the-air is really cool and

319
00:19:06,940 --> 00:19:11,540
in general

320
00:19:08,840 --> 00:19:15,620
basement which search is relatively

321
00:19:11,540 --> 00:19:19,820
small area in which not

322
00:19:15,620 --> 00:19:24,229
many people doing studying so I come up

323
00:19:19,820 --> 00:19:30,740
with this page to speed up someone who

324
00:19:24,230 --> 00:19:35,540
wants to start the first thing is to

325
00:19:30,740 --> 00:19:38,090
read the previous work by others which

326
00:19:35,540 --> 00:19:43,030
is like you are standing on the

327
00:19:38,090 --> 00:19:45,889
shoulders of giants and the second is to

328
00:19:43,030 --> 00:19:50,780
download what you can download from the

329
00:19:45,890 --> 00:19:54,110
network there are innumerable sources

330
00:19:50,780 --> 00:19:57,440
sources online you can even find the

331
00:19:54,110 --> 00:20:03,530
source code of a basement like a hobby

332
00:19:57,440 --> 00:20:10,160
basement which is likud years ago next

333
00:20:03,530 --> 00:20:17,000
is to extract the firmware from the

334
00:20:10,160 --> 00:20:21,380
target phone this can be difficult step

335
00:20:17,000 --> 00:20:24,320
or just an easy wing after you got the

336
00:20:21,380 --> 00:20:28,160
firmware you can start your reverse

337
00:20:24,320 --> 00:20:31,970
engineering and bug hunting in this

338
00:20:28,160 --> 00:20:35,050
process you may need the and you may

339
00:20:31,970 --> 00:20:40,010
need to learn the 3gpp technical

340
00:20:35,050 --> 00:20:43,940
specification and this step can be very

341
00:20:40,010 --> 00:20:46,370
boring but be patient knowing the target

342
00:20:43,940 --> 00:20:53,450
more the chance you'll find a bug is

343
00:20:46,370 --> 00:20:57,770
higher and like away empty he also has

344
00:20:53,450 --> 00:21:02,360
some liquid things on github there are

345
00:20:57,770 --> 00:21:06,860
paths of source code and some object

346
00:21:02,360 --> 00:21:12,439
fires and libraries there are old armed

347
00:21:06,860 --> 00:21:17,090
versions with years ago this this will

348
00:21:12,440 --> 00:21:23,150
be very useful for bug hunting because

349
00:21:17,090 --> 00:21:25,610
the the binary is with symbols but for

350
00:21:23,150 --> 00:21:27,490
sure you still need the formula of added

351
00:21:25,610 --> 00:21:31,039
target

352
00:21:27,490 --> 00:21:33,950
also this is helpful because the

353
00:21:31,039 --> 00:21:39,530
libraries can be linked together with

354
00:21:33,950 --> 00:21:44,150
your own code in binary instrumentation

355
00:21:39,530 --> 00:21:48,129
environment such as qmu for this part I

356
00:21:44,150 --> 00:21:48,130
will talk about in in detail later

357
00:21:49,059 --> 00:21:57,980
next let's do to a quick view of the

358
00:21:53,110 --> 00:22:02,149
architecture of MDK basement there are

359
00:21:57,980 --> 00:22:04,000
lots of functional tasks took over by

360
00:22:02,150 --> 00:22:06,950
the RTOS

361
00:22:04,000 --> 00:22:11,150
including the CM task which is

362
00:22:06,950 --> 00:22:15,440
connection management the mm which is

363
00:22:11,150 --> 00:22:21,770
mobility management R which is resource

364
00:22:15,440 --> 00:22:28,010
radio resource management at the picture

365
00:22:21,770 --> 00:22:33,679
shows there are many many tasks and the

366
00:22:28,010 --> 00:22:39,110
AP and the CP also use 80 commands to

367
00:22:33,679 --> 00:22:41,299
communicate they share data with with

368
00:22:39,110 --> 00:22:47,539
each other with within the power of

369
00:22:41,299 --> 00:22:52,039
shared memories and the most special

370
00:22:47,539 --> 00:22:56,299
part is the CC CI which is short of

371
00:22:52,039 --> 00:23:02,090
cross call communication interface it is

372
00:22:56,299 --> 00:23:06,950
implemented in the kernel it basically

373
00:23:02,090 --> 00:23:11,360
it did the job to connect the AP and CP

374
00:23:06,950 --> 00:23:15,289
so it's not a similar concept conception

375
00:23:11,360 --> 00:23:19,479
as their former to it initialized the

376
00:23:15,289 --> 00:23:24,070
UART lines which are mostly used to

377
00:23:19,480 --> 00:23:29,110
transmit 80 commands and some audio data

378
00:23:24,070 --> 00:23:33,490
it also sets up the shared memory and

379
00:23:29,110 --> 00:23:33,490
divides it into several regions

380
00:23:36,140 --> 00:23:45,290
okay let's talk about how to get the

381
00:23:39,799 --> 00:23:47,690
firmware so I assume you already have

382
00:23:45,290 --> 00:23:52,340
the root permission on the target

383
00:23:47,690 --> 00:23:56,840
Android phone the firmware is available

384
00:23:52,340 --> 00:24:00,649
at the directory dev block by name in

385
00:23:56,840 --> 00:24:06,919
this place you can get most of the

386
00:24:00,650 --> 00:24:07,610
things you need and i falled for the

387
00:24:06,920 --> 00:24:10,100
kernel

388
00:24:07,610 --> 00:24:13,790
the name is boot and I recommend this

389
00:24:10,100 --> 00:24:18,918
great tool to you which is developed by

390
00:24:13,790 --> 00:24:24,260
our colleagues it can help you load the

391
00:24:18,919 --> 00:24:29,480
VM Linux image in add a pro then for

392
00:24:24,260 --> 00:24:32,900
modem the name is MD one image at least

393
00:24:29,480 --> 00:24:40,340
on our phone the from where I was has no

394
00:24:32,900 --> 00:24:45,710
encryption at all after you get the

395
00:24:40,340 --> 00:24:48,830
modem image used still cannot just start

396
00:24:45,710 --> 00:24:53,419
your reverse work because the image is

397
00:24:48,830 --> 00:24:58,309
has some type of format it consists of

398
00:24:53,419 --> 00:25:03,290
many small spots image you need to

399
00:24:58,309 --> 00:25:06,320
extract them from the big image and we

400
00:25:03,290 --> 00:25:10,850
found the definition of the format in

401
00:25:06,320 --> 00:25:13,428
the online source and I made an era when

402
00:25:10,850 --> 00:25:19,070
their own editor template to visualize

403
00:25:13,429 --> 00:25:26,330
them each of a image inside has a header

404
00:25:19,070 --> 00:25:32,149
and and the name field is also in it the

405
00:25:26,330 --> 00:25:37,760
most important two images are the MD one

406
00:25:32,150 --> 00:25:42,169
Rome and MD one debugging for MD Rome is

407
00:25:37,760 --> 00:25:47,030
the code and MD one debugging for is the

408
00:25:42,169 --> 00:25:48,750
debug symbols and there's a little story

409
00:25:47,030 --> 00:25:54,510
about

410
00:25:48,750 --> 00:25:58,290
to the Rome because all the online leak

411
00:25:54,510 --> 00:26:01,710
of the firmware are the arm version so

412
00:25:58,290 --> 00:26:04,920
we take it for granted that the image is

413
00:26:01,710 --> 00:26:10,020
armed but the other disassembled result

414
00:26:04,920 --> 00:26:14,370
shows nonsense so we saw T's encrypt at

415
00:26:10,020 --> 00:26:18,450
first but one day we accidentally loaded

416
00:26:14,370 --> 00:26:21,959
it with the Mississippi o type it shows

417
00:26:18,450 --> 00:26:24,540
some reasonable results but still not

418
00:26:21,960 --> 00:26:28,770
all proper

419
00:26:24,540 --> 00:26:37,770
at last we figured out is the MIPS 16

420
00:26:28,770 --> 00:26:41,879
eetu and what what is MIPS 62 in short

421
00:26:37,770 --> 00:26:49,610
is the MIPS 16 II with additional

422
00:26:41,880 --> 00:26:54,780
improvements there are some example code

423
00:26:49,610 --> 00:27:00,479
of code and unfortunately add a prophet

424
00:26:54,780 --> 00:27:04,410
to disassemble the new instructions for

425
00:27:00,480 --> 00:27:13,940
example a list of two of them here the

426
00:27:04,410 --> 00:27:13,940
MS MFC 0 and m TC 0 called instructions

427
00:27:14,630 --> 00:27:26,850
so we wrote some tools to help us

428
00:27:19,020 --> 00:27:31,080
reverse then finally we can start our

429
00:27:26,850 --> 00:27:33,419
reverse the first thing to do is loading

430
00:27:31,080 --> 00:27:36,960
the symbols from the back fire I

431
00:27:33,420 --> 00:27:40,500
mentioned earlier the fire exists not

432
00:27:36,960 --> 00:27:44,940
only in the image but also on the SD

433
00:27:40,500 --> 00:27:51,660
card you can you can see the name in the

434
00:27:44,940 --> 00:27:56,880
images md1 debugging for we actually we

435
00:27:51,660 --> 00:28:00,210
casted the format at first but

436
00:27:56,880 --> 00:28:03,540
act about the forum format is not very

437
00:28:00,210 --> 00:28:08,490
complex also there is previous work on

438
00:28:03,540 --> 00:28:12,030
it so we wrote an adaptation script to

439
00:28:08,490 --> 00:28:16,710
recover symbols from that fire after

440
00:28:12,030 --> 00:28:21,090
that when I wondered the liquid sauce of

441
00:28:16,710 --> 00:28:24,950
MDK I saw a Perl script in there

442
00:28:21,090 --> 00:28:28,919
debugging suit and the format is

443
00:28:24,950 --> 00:28:30,990
explained in detail in that script so

444
00:28:28,920 --> 00:28:36,510
you could save some guessing time with

445
00:28:30,990 --> 00:28:42,660
this then we need to fix the segments in

446
00:28:36,510 --> 00:28:45,360
a top row and here is our result the

447
00:28:42,660 --> 00:28:48,570
address might not be very accurate

448
00:28:45,360 --> 00:28:52,409
because we can't tell what is exactly

449
00:28:48,570 --> 00:28:57,389
the the end or start address by reverse

450
00:28:52,410 --> 00:29:02,490
engineering there is a good tool to help

451
00:28:57,390 --> 00:29:06,270
find the base address of firmware and is

452
00:29:02,490 --> 00:29:10,560
written in rust and it works perfectly

453
00:29:06,270 --> 00:29:16,260
at least for our firmware so I recommend

454
00:29:10,560 --> 00:29:21,149
it to you after all the previous work we

455
00:29:16,260 --> 00:29:24,060
can start editing the code now the

456
00:29:21,150 --> 00:29:29,430
entrances of incoming message handlers

457
00:29:24,060 --> 00:29:32,940
are good candidates because and the

458
00:29:29,430 --> 00:29:39,120
Tasker main I mentioned before will call

459
00:29:32,940 --> 00:29:41,480
in to them now I will take the one of

460
00:29:39,120 --> 00:29:47,459
the tasks as an example to demonstrate

461
00:29:41,480 --> 00:29:52,110
the real code and this is the mm task a

462
00:29:47,460 --> 00:29:56,130
main function is very typical of our TOS

463
00:29:52,110 --> 00:30:00,479
system and other modems also have some

464
00:29:56,130 --> 00:30:05,490
similar tasks the code is running inside

465
00:30:00,480 --> 00:30:09,059
an endless wire loop it will wait for a

466
00:30:05,490 --> 00:30:13,379
new message to come and DQ the message

467
00:30:09,059 --> 00:30:19,009
then constructed the ilm structure which

468
00:30:13,379 --> 00:30:24,289
is the interlayer message structure and

469
00:30:19,009 --> 00:30:30,480
the pew buffer PPR in it is where the

470
00:30:24,289 --> 00:30:36,658
real data stores then the last steps is

471
00:30:30,480 --> 00:30:40,740
to handle them with mm main ok let's dig

472
00:30:36,659 --> 00:30:45,059
more into the task after we entered the

473
00:30:40,740 --> 00:30:48,749
Mme we can see numerous med message

474
00:30:45,059 --> 00:30:52,950
handlers switch cases depending on the

475
00:30:48,749 --> 00:30:55,950
message ID the state machine in the

476
00:30:52,950 --> 00:31:00,929
basement is very complex so if you want

477
00:30:55,950 --> 00:31:04,230
to if you want a specific a specific

478
00:31:00,929 --> 00:31:09,200
message handler sometimes you may look

479
00:31:04,230 --> 00:31:12,809
into very deep inside however we can

480
00:31:09,200 --> 00:31:15,960
look for a message name in the

481
00:31:12,809 --> 00:31:19,619
specifications like 3gpp twenty four

482
00:31:15,960 --> 00:31:25,879
point two zero eight then such the

483
00:31:19,619 --> 00:31:30,178
method name in EDA Pro the picture show

484
00:31:25,879 --> 00:31:33,600
the picture here shows how the MM period

485
00:31:30,179 --> 00:31:41,159
TMSI realloc command handler is called

486
00:31:33,600 --> 00:31:45,449
from the MM main and with our eyes we

487
00:31:41,159 --> 00:31:48,749
found some bugs in the basement but we

488
00:31:45,450 --> 00:31:51,990
all know that for this type things is

489
00:31:48,749 --> 00:31:57,360
very difficult to run it perfectly on

490
00:31:51,990 --> 00:32:01,619
our own computers so emulating the whole

491
00:31:57,360 --> 00:32:04,080
system is too hard for us but it's not

492
00:32:01,619 --> 00:32:07,970
that difficult to emulate part of the

493
00:32:04,080 --> 00:32:13,759
code and I think the target function

494
00:32:07,970 --> 00:32:18,360
requires two of the following why is is

495
00:32:13,759 --> 00:32:22,300
complex enough to follow it can't be too

496
00:32:18,360 --> 00:32:28,020
small or with with our eyes is enough

497
00:32:22,300 --> 00:32:34,320
to audit and second is know of very few

498
00:32:28,020 --> 00:32:40,020
IPC cost because emulating IPC cause is

499
00:32:34,320 --> 00:32:43,840
troublesome it may need lots of work to

500
00:32:40,020 --> 00:32:46,860
then the decode and unpack function

501
00:32:43,840 --> 00:32:46,860
catch our attention

502
00:32:47,640 --> 00:32:59,110
for example the MCD unpack which I will

503
00:32:52,450 --> 00:33:06,000
talk about later and and the as1 asn.1

504
00:32:59,110 --> 00:33:10,929
decoder they don't have any IPC

505
00:33:06,000 --> 00:33:15,790
communication so the method is very easy

506
00:33:10,930 --> 00:33:20,250
first write C rapid to call the target

507
00:33:15,790 --> 00:33:24,460
functions the rapid does the

508
00:33:20,250 --> 00:33:28,200
preparations like before the function

509
00:33:24,460 --> 00:33:32,830
calls such as read the input from the

510
00:33:28,200 --> 00:33:38,500
STD in and initialize some other

511
00:33:32,830 --> 00:33:42,730
structures second maybe this is the most

512
00:33:38,500 --> 00:33:47,470
time time-consuming step you should

513
00:33:42,730 --> 00:33:51,430
write the make file to link what what we

514
00:33:47,470 --> 00:33:56,620
need as I said before there are liquid

515
00:33:51,430 --> 00:34:02,950
source code and libraries online so our

516
00:33:56,620 --> 00:34:09,040
our work is mainly based on that at last

517
00:34:02,950 --> 00:34:11,370
using the AFL qmu mode to do the

518
00:34:09,040 --> 00:34:11,370
following

519
00:34:14,170 --> 00:34:23,450
hmm after your father while you may get

520
00:34:18,260 --> 00:34:27,680
some crashes when you need when you want

521
00:34:23,449 --> 00:34:31,850
to test your PLC or something else you

522
00:34:27,679 --> 00:34:34,989
will need to see the log fires there is

523
00:34:31,850 --> 00:34:40,520
a crash alert in the D message by the

524
00:34:34,989 --> 00:34:44,179
CCC AI interface but this is just a very

525
00:34:40,520 --> 00:34:46,940
brief summary of the crash so for more

526
00:34:44,179 --> 00:34:53,020
details you need to check the log files

527
00:34:46,940 --> 00:34:59,030
on the SD card the fires are shown here

528
00:34:53,020 --> 00:35:03,230
when a crash happens but sadly the mtk

529
00:34:59,030 --> 00:35:06,460
makes a very special format for the log

530
00:35:03,230 --> 00:35:10,460
fires we are not able to read the log

531
00:35:06,460 --> 00:35:16,360
directly because is some binary format

532
00:35:10,460 --> 00:35:21,170
and they are logged by the thr trees and

533
00:35:16,360 --> 00:35:26,150
many other similar functions they will

534
00:35:21,170 --> 00:35:31,820
record the modem ID what function is

535
00:35:26,150 --> 00:35:34,970
called and and much other information we

536
00:35:31,820 --> 00:35:38,450
did little research on the format so if

537
00:35:34,970 --> 00:35:43,330
you want to know more just go to reverse

538
00:35:38,450 --> 00:35:47,779
the thr functions another thing is that

539
00:35:43,330 --> 00:35:51,740
you can capture the log even the modem

540
00:35:47,780 --> 00:35:55,940
is not is running normally the method is

541
00:35:51,740 --> 00:36:02,410
easy just a tire of this 800 number and

542
00:35:55,940 --> 00:36:02,410
click the log kit then start to record

543
00:36:03,100 --> 00:36:13,850
ok now let's talk more about the MCD

544
00:36:08,450 --> 00:36:18,049
unpack this function is very important

545
00:36:13,850 --> 00:36:20,000
because it is the first unpack function

546
00:36:18,050 --> 00:36:21,010
before any further process of the

547
00:36:20,000 --> 00:36:24,260
message

548
00:36:21,010 --> 00:36:30,470
nearly every message is handled by it

549
00:36:24,260 --> 00:36:35,450
first the message format uses the very

550
00:36:30,470 --> 00:36:39,740
encoding BER which is short of basic

551
00:36:35,450 --> 00:36:43,939
encoding rules it is the set of rules

552
00:36:39,740 --> 00:36:46,720
for encoding asn.1 defined it data into

553
00:36:43,940 --> 00:36:51,740
a particular representation for

554
00:36:46,720 --> 00:36:56,259
transmitting to another system and the

555
00:36:51,740 --> 00:37:01,339
most of fields inside the message ITR V

556
00:36:56,260 --> 00:37:06,350
which is type length and value sometimes

557
00:37:01,340 --> 00:37:14,510
may have end of contents the function

558
00:37:06,350 --> 00:37:15,470
process the data is bit string and we we

559
00:37:14,510 --> 00:37:19,400
fast

560
00:37:15,470 --> 00:37:23,629
dysfunction and got some crashes then

561
00:37:19,400 --> 00:37:27,920
reported to the vendor after that we

562
00:37:23,630 --> 00:37:34,160
studied this function the first argument

563
00:37:27,920 --> 00:37:37,700
of the function is the message ID which

564
00:37:34,160 --> 00:37:42,350
will decide the sequence of a code to be

565
00:37:37,700 --> 00:37:45,200
used in the MCD unpack Rock the function

566
00:37:42,350 --> 00:37:50,810
works like a CPU which means it fetches

567
00:37:45,200 --> 00:37:53,750
the opcode first then thus doesn't work

568
00:37:50,810 --> 00:37:56,840
according to the of code there are many

569
00:37:53,750 --> 00:38:01,070
types of of codes like choice

570
00:37:56,840 --> 00:38:04,990
call case and so on one special of code

571
00:38:01,070 --> 00:38:08,750
I need to emphasize is the max bytes

572
00:38:04,990 --> 00:38:12,919
this is the length check in the decode

573
00:38:08,750 --> 00:38:17,210
stage so most of the memory corruption

574
00:38:12,920 --> 00:38:20,360
parks are killing in advance by it when

575
00:38:17,210 --> 00:38:24,740
when we sought we found a bug to do the

576
00:38:20,360 --> 00:38:25,220
test but the modem won't crash by any

577
00:38:24,740 --> 00:38:28,490
means

578
00:38:25,220 --> 00:38:32,410
at last we figure out it was this

579
00:38:28,490 --> 00:38:32,410
function to prevent the park

580
00:38:34,040 --> 00:38:43,050
so after all the series let's see some

581
00:38:38,130 --> 00:38:47,790
real vulnerabilities this pocket in the

582
00:38:43,050 --> 00:38:51,120
EMM attaches apt message when the code

583
00:38:47,790 --> 00:38:57,630
is decoding the emergency in number list

584
00:38:51,120 --> 00:39:01,020
the structure is shown in the picture

585
00:38:57,630 --> 00:39:05,760
it doesn't check the index of the

586
00:39:01,020 --> 00:39:10,009
current emergency number so this could

587
00:39:05,760 --> 00:39:15,060
lead to a hip hip buffer overflow

588
00:39:10,010 --> 00:39:18,150
another problem is that there is no no

589
00:39:15,060 --> 00:39:22,020
check on whether the source message is

590
00:39:18,150 --> 00:39:26,130
big enough for example we send a 20

591
00:39:22,020 --> 00:39:29,670
bytes message but we fake the lens is

592
00:39:26,130 --> 00:39:38,450
200 then we can read out of bump on the

593
00:39:29,670 --> 00:39:42,570
hip another bug is in the activity

594
00:39:38,450 --> 00:39:45,350
activates PDP can't access after message

595
00:39:42,570 --> 00:39:49,350
the vulnerable field is protocol

596
00:39:45,350 --> 00:39:54,210
configuration options if you have ever

597
00:39:49,350 --> 00:39:57,120
watched the Ahmad talk on the Samsung

598
00:39:54,210 --> 00:40:02,820
channel basement you will find our part

599
00:39:57,120 --> 00:40:06,330
is very similar to his when when the

600
00:40:02,820 --> 00:40:10,740
code unpacked the config option it will

601
00:40:06,330 --> 00:40:14,870
first decode the it will first decode

602
00:40:10,740 --> 00:40:20,970
all configs lengths and store it in

603
00:40:14,870 --> 00:40:24,779
england array on the stack so we can

604
00:40:20,970 --> 00:40:27,470
send many zero-length bytes to fill the

605
00:40:24,780 --> 00:40:31,500
array then we are able to modify the

606
00:40:27,470 --> 00:40:33,709
return address since no stack cookies at

607
00:40:31,500 --> 00:40:33,710
all

608
00:40:35,329 --> 00:40:43,229
we are not required to exploit the

609
00:40:39,269 --> 00:40:50,758
basement in our business project so we

610
00:40:43,229 --> 00:40:56,160
just wrote a PSA about the back our

611
00:40:50,759 --> 00:41:01,289
environment is shown here we our OS is

612
00:40:56,160 --> 00:41:05,629
Ubuntu 18 there of 4 with run the open

613
00:41:01,289 --> 00:41:12,119
BTS in the talker and the devices USRP

614
00:41:05,630 --> 00:41:16,380
b210 at this part we don't need much

615
00:41:12,119 --> 00:41:19,589
work to set up the state machine so the

616
00:41:16,380 --> 00:41:22,799
plc is very easy just to find the

617
00:41:19,589 --> 00:41:26,940
corresponding class of the message in

618
00:41:22,799 --> 00:41:34,079
our case is the l3 SM message activates

619
00:41:26,940 --> 00:41:38,089
PDP contacts except usually each message

620
00:41:34,079 --> 00:41:42,329
has an corresponding class in the code

621
00:41:38,089 --> 00:41:47,099
then modified the rat right body method

622
00:41:42,329 --> 00:41:50,940
in the class in our case I just simply

623
00:41:47,099 --> 00:41:55,109
modified the size field and data to

624
00:41:50,940 --> 00:42:01,619
write and then open BTS world to all the

625
00:41:55,109 --> 00:42:06,719
rest of things okay now let Paco give us

626
00:42:01,619 --> 00:42:10,109
some summers so as Kira I show you in

627
00:42:06,719 --> 00:42:15,469
that particular bug the modem still lack

628
00:42:10,109 --> 00:42:18,239
of any modern base land mitigation and

629
00:42:15,469 --> 00:42:20,160
I'll show you that in particular case

630
00:42:18,239 --> 00:42:23,519
there are there are no even stack

631
00:42:20,160 --> 00:42:26,848
cookies in function performing copies on

632
00:42:23,519 --> 00:42:29,008
the stack so you can imagine that the

633
00:42:26,849 --> 00:42:34,109
other more advanced that the mitigation

634
00:42:29,009 --> 00:42:37,349
are not there of course and to conclude

635
00:42:34,109 --> 00:42:40,999
we would like to thank this particular

636
00:42:37,349 --> 00:42:44,279
vendor which we cooperate with and

637
00:42:40,999 --> 00:42:47,519
mediatek because they were very fast

638
00:42:44,279 --> 00:42:49,890
responding and very friend friendly also

639
00:42:47,519 --> 00:42:52,129
and they were open to discussion and

640
00:42:49,890 --> 00:42:57,509
feedback and we had a positive

641
00:42:52,130 --> 00:42:59,759
experience in this contract so this

642
00:42:57,509 --> 00:43:02,660
concludes our talk and if you have any

643
00:42:59,759 --> 00:43:02,660
question please

644
00:43:04,000 --> 00:43:13,510
[Applause]

645
00:43:17,950 --> 00:43:25,819
thank you first talk I have a question

646
00:43:22,069 --> 00:43:32,630
could you tell any details about how you

647
00:43:25,819 --> 00:43:33,700
load an RTOS to gueermo and run FL fuzz

648
00:43:32,630 --> 00:43:37,460
on it

649
00:43:33,700 --> 00:43:42,140
okay so actually we didn't run the

650
00:43:37,460 --> 00:43:45,289
entire RTOS as Kira mentioned there is a

651
00:43:42,140 --> 00:43:50,150
leak at the source object trial online

652
00:43:45,289 --> 00:43:54,769
so we just recognize those into a linux

653
00:43:50,150 --> 00:43:58,849
arm e.l.f and then we run that one too

654
00:43:54,769 --> 00:44:02,209
fast but you could run the entire

655
00:43:58,849 --> 00:44:05,089
basement if you emulate some stuff or

656
00:44:02,210 --> 00:44:08,920
maybe if you remove some non important

657
00:44:05,089 --> 00:44:11,390
tasks from it but we didn't choose this

658
00:44:08,920 --> 00:44:16,519
this route for the amount of work

659
00:44:11,390 --> 00:44:20,259
required we didn't have much time to do

660
00:44:16,519 --> 00:44:20,258
it thank you

661
00:44:29,470 --> 00:44:32,740
so for the film where you were

662
00:44:31,240 --> 00:44:34,660
exploiting do we have something like a

663
00:44:32,740 --> 00:44:36,819
billet date so that you can make kind of

664
00:44:34,660 --> 00:44:39,310
a history of mitigations or stuff

665
00:44:36,820 --> 00:44:41,320
because for example for Broadcom you can

666
00:44:39,310 --> 00:44:45,520
see like in destiny there is the first

667
00:44:41,320 --> 00:44:47,920
mitigations in the in the heap for

668
00:44:45,520 --> 00:44:51,460
Bluetooth and Wi-Fi is there something

669
00:44:47,920 --> 00:44:54,280
coming up like this for mediatek so I'm

670
00:44:51,460 --> 00:44:59,410
sure you can extract the version from

671
00:44:54,280 --> 00:45:01,750
the fumer I should check but we didn't

672
00:44:59,410 --> 00:45:04,569
check the further updates we should

673
00:45:01,750 --> 00:45:09,040
follow up with with the vendor because I

674
00:45:04,570 --> 00:45:11,530
mean our contract was with a vendor or

675
00:45:09,040 --> 00:45:15,630
not mediator himself so they are limited

676
00:45:11,530 --> 00:45:15,630
influence on the development

677
00:45:25,690 --> 00:45:33,260
hi I'm curious about the weather checked

678
00:45:29,810 --> 00:45:35,540
if you were able to pass the baseball or

679
00:45:33,260 --> 00:45:37,670
if they have some integrity checking

680
00:45:35,540 --> 00:45:40,670
because I I know that a few years ago

681
00:45:37,670 --> 00:45:42,730
they didn't check the integrity so can

682
00:45:40,670 --> 00:45:45,110
actually like inject patches to make

683
00:45:42,730 --> 00:45:48,170
invitation bit easier but it was a

684
00:45:45,110 --> 00:45:51,320
specific phone I don't know we didn't

685
00:45:48,170 --> 00:45:55,150
try on mediatek because we didn't need

686
00:45:51,320 --> 00:45:58,100
it for our particular assessment but I

687
00:45:55,150 --> 00:46:01,270
believe probably they do at least at a

688
00:45:58,100 --> 00:46:08,890
lot time probably they do some okay

689
00:46:01,270 --> 00:46:08,890
thanks I'll check all questions

690
00:46:14,619 --> 00:46:19,280
okay doesn't seem so so thank you thank

691
00:46:18,880 --> 00:46:26,110
you

692
00:46:19,280 --> 00:46:26,110
[Applause]

