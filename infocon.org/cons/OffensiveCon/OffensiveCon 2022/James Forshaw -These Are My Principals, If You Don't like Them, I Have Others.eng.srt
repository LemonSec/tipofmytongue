1
00:00:04,000 --> 00:00:04,960
hey

2
00:00:04,960 --> 00:00:08,240
good morgan offensive con

3
00:00:08,880 --> 00:00:11,440
that's it's been a long time hasn't it

4
00:00:11,440 --> 00:00:13,040
since uh

5
00:00:13,040 --> 00:00:14,480
probably many of us have actually been

6
00:00:14,480 --> 00:00:16,000
able to attend an actual conference in

7
00:00:16,000 --> 00:00:18,560
person it seems pretty crazy so yeah i'm

8
00:00:18,560 --> 00:00:20,800
james i work at google in the project

9
00:00:20,800 --> 00:00:22,320
zero team

10
00:00:22,320 --> 00:00:23,519
and

11
00:00:23,519 --> 00:00:25,920
the title of my talk is a is a pun on a

12
00:00:25,920 --> 00:00:28,320
quote which apocryphally comes from

13
00:00:28,320 --> 00:00:30,320
groucho marx and apparently it wasn't

14
00:00:30,320 --> 00:00:31,439
really him

15
00:00:31,439 --> 00:00:32,320
but

16
00:00:32,320 --> 00:00:34,160
i'm actually going to be talking about

17
00:00:34,160 --> 00:00:36,880
the relaying of kerberos authentication

18
00:00:36,880 --> 00:00:39,040
probably sounds a very dry topic

19
00:00:39,040 --> 00:00:40,399
but

20
00:00:40,399 --> 00:00:43,040
i've i do have a blog post about this

21
00:00:43,040 --> 00:00:44,399
research as well which goes into

22
00:00:44,399 --> 00:00:46,399
actually quite a lot of depth about some

23
00:00:46,399 --> 00:00:47,760
of the

24
00:00:47,760 --> 00:00:49,360
some network protocols that i'm going to

25
00:00:49,360 --> 00:00:51,280
be talking about but i thought what

26
00:00:51,280 --> 00:00:52,960
would actually be quite useful for

27
00:00:52,960 --> 00:00:54,879
people to fully understand the impact of

28
00:00:54,879 --> 00:00:58,559
my research is to run demo exploitation

29
00:00:58,559 --> 00:01:01,280
scenarios and maybe

30
00:01:01,280 --> 00:01:03,199
you can take some of that away and

31
00:01:03,199 --> 00:01:04,239
actually

32
00:01:04,239 --> 00:01:06,320
use that in your own sort of

33
00:01:06,320 --> 00:01:08,320
clients engagements or red teaming and

34
00:01:08,320 --> 00:01:10,880
things like that

35
00:01:11,760 --> 00:01:12,960
so

36
00:01:12,960 --> 00:01:14,560
i don't want to embarrass anybody but

37
00:01:14,560 --> 00:01:16,240
asking like who doesn't know what ntlm

38
00:01:16,240 --> 00:01:17,600
authentication is

39
00:01:17,600 --> 00:01:19,280
or ntlm authentication relay

40
00:01:19,280 --> 00:01:20,720
specifically

41
00:01:20,720 --> 00:01:23,759
ntlm itself is a network authentication

42
00:01:23,759 --> 00:01:25,360
protocol introduced

43
00:01:25,360 --> 00:01:27,600
in the original versions of windows nt

44
00:01:27,600 --> 00:01:29,759
kind of clues in the name

45
00:01:29,759 --> 00:01:31,280
and the idea being an authentication

46
00:01:31,280 --> 00:01:33,600
protocol allows two computers in a

47
00:01:33,600 --> 00:01:36,320
network to authenticate to each other

48
00:01:36,320 --> 00:01:38,000
but in general one of its useful

49
00:01:38,000 --> 00:01:40,720
properties is that if an on-path

50
00:01:40,720 --> 00:01:43,119
attacker can sniff the traffic

51
00:01:43,119 --> 00:01:44,799
they can't necessarily derive your

52
00:01:44,799 --> 00:01:47,360
password or some important secret it's

53
00:01:47,360 --> 00:01:49,840
kind of sort of obfuscating the

54
00:01:49,840 --> 00:01:52,079
authentication

55
00:01:52,079 --> 00:01:54,240
unfortunately ntlm was designed in such

56
00:01:54,240 --> 00:01:55,680
a way that it had

57
00:01:55,680 --> 00:01:58,320
many many security issues or design

58
00:01:58,320 --> 00:02:00,479
flaws basically

59
00:02:00,479 --> 00:02:02,719
and one of the most egregious is the

60
00:02:02,719 --> 00:02:05,119
ability to be relayed so ntlm originally

61
00:02:05,119 --> 00:02:06,960
never specified

62
00:02:06,960 --> 00:02:10,639
the target of its authentication so

63
00:02:10,639 --> 00:02:11,760
it didn't matter whether you were

64
00:02:11,760 --> 00:02:13,599
authenticating to one server or a

65
00:02:13,599 --> 00:02:15,920
different server effectively the

66
00:02:15,920 --> 00:02:17,760
authentication protocol worked pretty

67
00:02:17,760 --> 00:02:19,680
much exactly the same

68
00:02:19,680 --> 00:02:20,879
and this could result in something

69
00:02:20,879 --> 00:02:22,879
called a relay attack where

70
00:02:22,879 --> 00:02:24,640
an attacker could sit

71
00:02:24,640 --> 00:02:26,080
the attacker could induce a network

72
00:02:26,080 --> 00:02:29,599
client to connect um to them to their

73
00:02:29,599 --> 00:02:30,800
own server

74
00:02:30,800 --> 00:02:32,160
and then say hey

75
00:02:32,160 --> 00:02:34,480
client could you just authenticate to me

76
00:02:34,480 --> 00:02:36,640
with your your user credentials which of

77
00:02:36,640 --> 00:02:38,239
course isn't your password but it is

78
00:02:38,239 --> 00:02:39,360
some sort of

79
00:02:39,360 --> 00:02:42,879
specialist protocol to do this

80
00:02:42,879 --> 00:02:45,360
and because there's then no sort of

81
00:02:45,360 --> 00:02:47,760
targeting for that authentication the

82
00:02:47,760 --> 00:02:49,280
attacker can then just forward that

83
00:02:49,280 --> 00:02:51,360
authentication traffic to a service they

84
00:02:51,360 --> 00:02:53,280
want to try and compromise

85
00:02:53,280 --> 00:02:55,920
and so you could forward it to say

86
00:02:55,920 --> 00:02:57,920
a really important service on the

87
00:02:57,920 --> 00:02:58,959
network

88
00:02:58,959 --> 00:03:00,000
and

89
00:03:00,000 --> 00:03:02,159
you could then impersonate

90
00:03:02,159 --> 00:03:05,519
that authenticating user on that service

91
00:03:05,519 --> 00:03:07,440
and from that you can compromise the

92
00:03:07,440 --> 00:03:11,040
whole whole network potentially

93
00:03:11,360 --> 00:03:13,200
and there's tooling to do this like you

94
00:03:13,200 --> 00:03:14,480
don't actually have to write your own

95
00:03:14,480 --> 00:03:16,879
ntlm relay stuff if you get the impact

96
00:03:16,879 --> 00:03:19,040
python library for example does an

97
00:03:19,040 --> 00:03:21,599
example ntl ntlm relay x

98
00:03:21,599 --> 00:03:23,120
and it pretty much works out the box it

99
00:03:23,120 --> 00:03:24,400
allows you to relay between different

100
00:03:24,400 --> 00:03:26,480
network protocols say between http and

101
00:03:26,480 --> 00:03:28,319
smb and vice versa

102
00:03:28,319 --> 00:03:32,480
and it just sort of works and it's great

103
00:03:32,480 --> 00:03:33,599
now

104
00:03:33,599 --> 00:03:35,440
last year there was actually some very

105
00:03:35,440 --> 00:03:36,879
interesting research which came out of

106
00:03:36,879 --> 00:03:39,040
spectre ops uh specifically by will

107
00:03:39,040 --> 00:03:41,200
schroeder and lee christensen

108
00:03:41,200 --> 00:03:42,560
talking about active directory

109
00:03:42,560 --> 00:03:44,159
certificate services

110
00:03:44,159 --> 00:03:45,440
and actually directory certificate

111
00:03:45,440 --> 00:03:47,599
services is a service you can deploy on

112
00:03:47,599 --> 00:03:49,280
your windows domain

113
00:03:49,280 --> 00:03:50,799
which allows you to

114
00:03:50,799 --> 00:03:52,400
effectively act as a

115
00:03:52,400 --> 00:03:54,239
certificate authority

116
00:03:54,239 --> 00:03:56,400
and you can actually have a web server

117
00:03:56,400 --> 00:03:58,840
which will issue certificates for user

118
00:03:58,840 --> 00:04:01,280
authentication so if a user goes to this

119
00:04:01,280 --> 00:04:03,840
website they can say please generate me

120
00:04:03,840 --> 00:04:06,799
a certificate an x 509 certificate

121
00:04:06,799 --> 00:04:09,439
and you can then use that certificate in

122
00:04:09,439 --> 00:04:11,360
place of your normal user authentication

123
00:04:11,360 --> 00:04:12,959
credentials so without knowing the

124
00:04:12,959 --> 00:04:14,560
user's password

125
00:04:14,560 --> 00:04:16,720
you could actually compromise it

126
00:04:16,720 --> 00:04:18,560
and it turns out that this web server by

127
00:04:18,560 --> 00:04:19,680
default

128
00:04:19,680 --> 00:04:21,918
was vulnerable to nclm relay so of

129
00:04:21,918 --> 00:04:23,520
course if you could relay

130
00:04:23,520 --> 00:04:25,680
an important user say domain controller

131
00:04:25,680 --> 00:04:27,120
to the active directory certificate

132
00:04:27,120 --> 00:04:28,479
service web server

133
00:04:28,479 --> 00:04:30,720
you could get a certificate to pretend

134
00:04:30,720 --> 00:04:32,320
to be that that

135
00:04:32,320 --> 00:04:33,759
domain controller anywhere on the

136
00:04:33,759 --> 00:04:36,000
network and that's usually considered a

137
00:04:36,000 --> 00:04:38,560
bad thing

138
00:04:38,960 --> 00:04:40,960
now

139
00:04:40,960 --> 00:04:42,880
sort of there's it's surprising the

140
00:04:42,880 --> 00:04:44,720
number of correlations with with mark's

141
00:04:44,720 --> 00:04:46,639
keynote about the sort of types of

142
00:04:46,639 --> 00:04:48,160
issues that you find in these sort of

143
00:04:48,160 --> 00:04:49,520
scenarios

144
00:04:49,520 --> 00:04:50,880
one of them is that

145
00:04:50,880 --> 00:04:53,759
legacy technologies legacy complexity is

146
00:04:53,759 --> 00:04:56,639
generally a potential security risk and

147
00:04:56,639 --> 00:04:58,080
microsoft are renowned for their

148
00:04:58,080 --> 00:05:00,080
backwards compatibility so they really

149
00:05:00,080 --> 00:05:01,840
really don't want to break

150
00:05:01,840 --> 00:05:04,400
existing users of bears technologies so

151
00:05:04,400 --> 00:05:06,320
they've bolted on stuff to ntlm over the

152
00:05:06,320 --> 00:05:07,440
years

153
00:05:07,440 --> 00:05:09,199
things like this extended protection for

154
00:05:09,199 --> 00:05:10,400
authentication

155
00:05:10,400 --> 00:05:12,479
but it's not on by default you have to

156
00:05:12,479 --> 00:05:14,400
actively turn it on

157
00:05:14,400 --> 00:05:16,479
now as far as i can tell i've not found

158
00:05:16,479 --> 00:05:18,160
a way of bypassing extended protection

159
00:05:18,160 --> 00:05:20,000
for authentication

160
00:05:20,000 --> 00:05:22,639
certainly not in this research

161
00:05:22,639 --> 00:05:24,160
but one of the other mitigations that

162
00:05:24,160 --> 00:05:26,560
microsoft suggested was just to disable

163
00:05:26,560 --> 00:05:27,680
ntlm

164
00:05:27,680 --> 00:05:30,160
like ntlm is a deprecated technology

165
00:05:30,160 --> 00:05:32,160
it's been around for 20 plus years

166
00:05:32,160 --> 00:05:34,479
maybe it's about time we finally finally

167
00:05:34,479 --> 00:05:36,720
retire it and you just turn it off

168
00:05:36,720 --> 00:05:39,520
in your domain now of course most actual

169
00:05:39,520 --> 00:05:41,280
windows domains probably can't do that

170
00:05:41,280 --> 00:05:42,000
for

171
00:05:42,000 --> 00:05:44,080
again backwards compatibility and legacy

172
00:05:44,080 --> 00:05:45,039
reasons

173
00:05:45,039 --> 00:05:47,360
but it is still an option

174
00:05:47,360 --> 00:05:49,199
but what particularly got my interest is

175
00:05:49,199 --> 00:05:51,759
if you sort of dig through the links

176
00:05:51,759 --> 00:05:53,759
it does specifically state that you

177
00:05:53,759 --> 00:05:55,919
should turn off ntlm because

178
00:05:55,919 --> 00:05:57,680
you should really be using more secure

179
00:05:57,680 --> 00:05:59,680
authentication protocols like kerberos

180
00:05:59,680 --> 00:06:01,199
version 5.

181
00:06:01,199 --> 00:06:02,800
and this makes perfect sense kerberos

182
00:06:02,800 --> 00:06:06,080
version 5 was introduced in windows in

183
00:06:06,080 --> 00:06:08,960
windows 2000 which again is over 20

184
00:06:08,960 --> 00:06:10,639
years ago

185
00:06:10,639 --> 00:06:13,919
and it is supposedly more secure so

186
00:06:13,919 --> 00:06:16,080
why wouldn't you want to disable ntlm

187
00:06:16,080 --> 00:06:17,840
and rely on the more secure

188
00:06:17,840 --> 00:06:19,440
authentication protocol for your windows

189
00:06:19,440 --> 00:06:20,880
domain

190
00:06:20,880 --> 00:06:22,880
but that got me thinking

191
00:06:22,880 --> 00:06:24,880
well if ntlm

192
00:06:24,880 --> 00:06:26,880
is relayable what is actually stopping

193
00:06:26,880 --> 00:06:28,880
you relaying kerberos

194
00:06:28,880 --> 00:06:30,479
is that actually some fundamental

195
00:06:30,479 --> 00:06:33,199
principle which makes it

196
00:06:33,199 --> 00:06:34,880
completely unreal

197
00:06:34,880 --> 00:06:36,560
relayable

198
00:06:36,560 --> 00:06:38,160
and this is basically form the

199
00:06:38,160 --> 00:06:41,520
foundation of my research

200
00:06:42,720 --> 00:06:44,240
so i

201
00:06:44,240 --> 00:06:46,639
do not have the time to go into the

202
00:06:46,639 --> 00:06:49,280
minutiae of kerberos and the very many

203
00:06:49,280 --> 00:06:52,160
ways in which it can be used and abused

204
00:06:52,160 --> 00:06:54,560
so i'm going to focus specifically on

205
00:06:54,560 --> 00:06:57,280
this sort of relay scenario

206
00:06:57,280 --> 00:06:59,440
and the kind of the way in which relay

207
00:06:59,440 --> 00:07:01,840
is protected against in kerberos is

208
00:07:01,840 --> 00:07:03,039
using something called a service

209
00:07:03,039 --> 00:07:04,479
principal name

210
00:07:04,479 --> 00:07:06,400
now service principal name usually when

211
00:07:06,400 --> 00:07:08,240
you see it as a user is just kind of a

212
00:07:08,240 --> 00:07:10,240
text string

213
00:07:10,240 --> 00:07:12,639
but it consists of three components

214
00:07:12,639 --> 00:07:15,360
the first component is the service class

215
00:07:15,360 --> 00:07:17,120
this indicates

216
00:07:17,120 --> 00:07:19,599
to the authentication process what type

217
00:07:19,599 --> 00:07:22,000
of network protocol you're trying to

218
00:07:22,000 --> 00:07:23,440
communicate on

219
00:07:23,440 --> 00:07:25,680
so host for example is just like i'm

220
00:07:25,680 --> 00:07:28,160
generally trying to talk to

221
00:07:28,160 --> 00:07:30,960
a computer in the windows domain

222
00:07:30,960 --> 00:07:33,599
there could be http which is for

223
00:07:33,599 --> 00:07:36,400
for web servers you could have cifs

224
00:07:36,400 --> 00:07:37,840
which is for smb which is the common

225
00:07:37,840 --> 00:07:39,840
internet file system

226
00:07:39,840 --> 00:07:41,280
so this allows you to sort of

227
00:07:41,280 --> 00:07:42,880
potentially limit

228
00:07:42,880 --> 00:07:44,800
um like when you're trying to do

229
00:07:44,800 --> 00:07:46,240
authentication this could be potentially

230
00:07:46,240 --> 00:07:49,520
checked to say oh well i'm an s b server

231
00:07:49,520 --> 00:07:52,400
but they've said i want to use http so

232
00:07:52,400 --> 00:07:54,080
in theory this should block against sort

233
00:07:54,080 --> 00:07:56,400
of cross protocol attacks

234
00:07:56,400 --> 00:07:58,000
now the second component to the service

235
00:07:58,000 --> 00:08:00,639
principal name is is usually referred to

236
00:08:00,639 --> 00:08:02,160
as the instance name

237
00:08:02,160 --> 00:08:03,520
and at least

238
00:08:03,520 --> 00:08:05,840
in microsoft environments this is

239
00:08:05,840 --> 00:08:07,120
configured to be

240
00:08:07,120 --> 00:08:09,520
the name of the computer account

241
00:08:09,520 --> 00:08:10,960
or the domain name of the computer

242
00:08:10,960 --> 00:08:13,840
account which is associated with spf so

243
00:08:13,840 --> 00:08:15,120
at the bottom you've got sort of a bit

244
00:08:15,120 --> 00:08:17,520
of powershell you can query like the

245
00:08:17,520 --> 00:08:19,280
active directory

246
00:08:19,280 --> 00:08:22,000
ldap server and say for a particular

247
00:08:22,000 --> 00:08:24,319
computer user account give me all its

248
00:08:24,319 --> 00:08:27,039
registered service principal names

249
00:08:27,039 --> 00:08:29,440
the final component is the service name

250
00:08:29,440 --> 00:08:31,759
and this is just allows the option to

251
00:08:31,759 --> 00:08:33,200
differentiate

252
00:08:33,200 --> 00:08:34,640
between different

253
00:08:34,640 --> 00:08:36,559
applications on the same server with the

254
00:08:36,559 --> 00:08:37,360
same

255
00:08:37,360 --> 00:08:38,799
service class

256
00:08:38,799 --> 00:08:40,559
now in general you don't see this used

257
00:08:40,559 --> 00:08:42,399
very often it's very very rare that you

258
00:08:42,399 --> 00:08:44,320
see it used and as you can see in the in

259
00:08:44,320 --> 00:08:45,920
the list of service principal names

260
00:08:45,920 --> 00:08:47,279
there is actually none of them which

261
00:08:47,279 --> 00:08:51,040
register a specific app type

262
00:08:51,040 --> 00:08:53,279
so what does that service principal name

263
00:08:53,279 --> 00:08:57,600
actually doing to prevent the relay

264
00:08:57,600 --> 00:08:59,920
well let's assume that we are in our

265
00:08:59,920 --> 00:09:03,600
sort of classic relay scenario we have

266
00:09:03,600 --> 00:09:06,000
an evil host an attacker sitting on our

267
00:09:06,000 --> 00:09:08,880
network and is inducing a network client

268
00:09:08,880 --> 00:09:10,959
on a workstation to connect to it and

269
00:09:10,959 --> 00:09:13,120
saying hey can you authenticate me

270
00:09:13,120 --> 00:09:15,440
please so i can i can

271
00:09:15,440 --> 00:09:17,680
just do some fun funky thing that you

272
00:09:17,680 --> 00:09:19,120
want me to do instead of actually

273
00:09:19,120 --> 00:09:20,800
stealing your authentication credentials

274
00:09:20,800 --> 00:09:24,320
and compromising your network

275
00:09:24,320 --> 00:09:26,160
that but the workstation is going to go

276
00:09:26,160 --> 00:09:28,720
okay i will ask my local security

277
00:09:28,720 --> 00:09:31,200
authority the lsa process hey i need to

278
00:09:31,200 --> 00:09:33,200
authenticate to this server

279
00:09:33,200 --> 00:09:35,519
and this is the spn the service

280
00:09:35,519 --> 00:09:38,480
principal name i believe he should be on

281
00:09:38,480 --> 00:09:40,399
and in this case we're going to evil

282
00:09:40,399 --> 00:09:43,040
host so as i've shown with the previous

283
00:09:43,040 --> 00:09:45,279
slide well presumably evil host as the

284
00:09:45,279 --> 00:09:47,279
instance name

285
00:09:47,279 --> 00:09:49,120
that spn is sent to the kerberos server

286
00:09:49,120 --> 00:09:52,080
on the domain controller and it will

287
00:09:52,080 --> 00:09:53,760
what it will do is it will take the

288
00:09:53,760 --> 00:09:54,880
user's

289
00:09:54,880 --> 00:09:56,880
authentication details

290
00:09:56,880 --> 00:09:58,080
package it up in something called a

291
00:09:58,080 --> 00:10:00,399
kerberos ticket or service ticket and

292
00:10:00,399 --> 00:10:02,880
encrypt that service ticket using a key

293
00:10:02,880 --> 00:10:05,440
which is only known between the computer

294
00:10:05,440 --> 00:10:07,120
account which in this case would be evil

295
00:10:07,120 --> 00:10:08,240
host

296
00:10:08,240 --> 00:10:10,880
and the domain controller

297
00:10:10,880 --> 00:10:12,959
now when that kerberos ticket is sent to

298
00:10:12,959 --> 00:10:15,440
evil host it can decrypt it because it

299
00:10:15,440 --> 00:10:17,279
knows the key

300
00:10:17,279 --> 00:10:18,959
however crucially from a relay

301
00:10:18,959 --> 00:10:21,279
perspective if you were to relay that

302
00:10:21,279 --> 00:10:23,440
kerberos ticket onwards to a completely

303
00:10:23,440 --> 00:10:25,920
unrelated server

304
00:10:25,920 --> 00:10:27,920
the keys should not match of course like

305
00:10:27,920 --> 00:10:30,320
if i know server's encryption key you've

306
00:10:30,320 --> 00:10:31,519
already compromised server you don't

307
00:10:31,519 --> 00:10:33,040
really probably have to do very much

308
00:10:33,040 --> 00:10:34,000
else

309
00:10:34,000 --> 00:10:36,720
but in general by by having these

310
00:10:36,720 --> 00:10:39,519
differential differentiating keys

311
00:10:39,519 --> 00:10:41,920
you can't just forward the ticket on

312
00:10:41,920 --> 00:10:43,440
so

313
00:10:43,440 --> 00:10:46,320
basically the fundamental challenge here

314
00:10:46,320 --> 00:10:47,200
is

315
00:10:47,200 --> 00:10:48,880
in order to sort of exploit this

316
00:10:48,880 --> 00:10:50,480
scenario

317
00:10:50,480 --> 00:10:52,640
you're going to want to somehow

318
00:10:52,640 --> 00:10:55,839
have an spn which doesn't match with the

319
00:10:55,839 --> 00:10:56,720
actual

320
00:10:56,720 --> 00:10:58,800
network address that it gets connected

321
00:10:58,800 --> 00:11:01,800
to

322
00:11:02,720 --> 00:11:04,800
so i i did at least search for sort of

323
00:11:04,800 --> 00:11:07,279
pre-existing work in this in this area

324
00:11:07,279 --> 00:11:09,279
there is a tool called curb relay x that

325
00:11:09,279 --> 00:11:10,959
sounds awfully familiar like it sounds

326
00:11:10,959 --> 00:11:13,360
like ntlm relax presumably it's doing

327
00:11:13,360 --> 00:11:14,720
the same thing

328
00:11:14,720 --> 00:11:16,720
unfortunately this is only abusing

329
00:11:16,720 --> 00:11:19,040
another feature of kerberos called

330
00:11:19,040 --> 00:11:21,200
unconstrained delegation

331
00:11:21,200 --> 00:11:22,480
and so

332
00:11:22,480 --> 00:11:24,800
it only works in very specific scenarios

333
00:11:24,800 --> 00:11:26,640
and it doesn't work crucially in the

334
00:11:26,640 --> 00:11:29,120
general purpose i've got an untrusted

335
00:11:29,120 --> 00:11:31,360
box sitting on my network which is

336
00:11:31,360 --> 00:11:33,120
basically relaying authentication

337
00:11:33,120 --> 00:11:35,360
traffic to some other

338
00:11:35,360 --> 00:11:39,519
privileged server on the network

339
00:11:39,600 --> 00:11:42,640
so i needed to do some research and of

340
00:11:42,640 --> 00:11:43,760
course

341
00:11:43,760 --> 00:11:45,200
there's a lot of potential network

342
00:11:45,200 --> 00:11:47,200
protocols which are

343
00:11:47,200 --> 00:11:49,040
which could use kerberos authentication

344
00:11:49,040 --> 00:11:52,160
in a windows environment

345
00:11:52,240 --> 00:11:53,440
so

346
00:11:53,440 --> 00:11:54,399
i

347
00:11:54,399 --> 00:11:56,320
did that research basically that's all

348
00:11:56,320 --> 00:11:58,000
you can do

349
00:11:58,000 --> 00:11:59,600
so specifically

350
00:11:59,600 --> 00:12:01,839
in order to fully understand

351
00:12:01,839 --> 00:12:04,480
how kerberos is used in a windows sort

352
00:12:04,480 --> 00:12:06,399
of network protocol you kind of have to

353
00:12:06,399 --> 00:12:09,120
also understand what the api set is

354
00:12:09,120 --> 00:12:10,639
and the api set

355
00:12:10,639 --> 00:12:12,079
in general is you use something called

356
00:12:12,079 --> 00:12:14,160
the security support provider interface

357
00:12:14,160 --> 00:12:15,839
or sspi

358
00:12:15,839 --> 00:12:18,160
this is a set of apis provided by

359
00:12:18,160 --> 00:12:19,279
windows

360
00:12:19,279 --> 00:12:21,200
which will talk to the local security

361
00:12:21,200 --> 00:12:23,040
authority and perform

362
00:12:23,040 --> 00:12:24,639
authentication

363
00:12:24,639 --> 00:12:26,160
and it's designed in such a way as to be

364
00:12:26,160 --> 00:12:28,480
effectively like opaque you don't

365
00:12:28,480 --> 00:12:30,560
necessarily have to know

366
00:12:30,560 --> 00:12:32,639
what authentication scheme you're using

367
00:12:32,639 --> 00:12:34,959
you just follow a set of basic rules

368
00:12:34,959 --> 00:12:36,399
and you can perform any type of

369
00:12:36,399 --> 00:12:38,480
authentication

370
00:12:38,480 --> 00:12:40,480
but the basic principle is

371
00:12:40,480 --> 00:12:42,160
you on the client you set up some sort

372
00:12:42,160 --> 00:12:44,399
of authentication session and then you

373
00:12:44,399 --> 00:12:46,480
run just like an iterative loop

374
00:12:46,480 --> 00:12:49,120
and you sort of say get me the next

375
00:12:49,120 --> 00:12:51,040
authentication token which is just like

376
00:12:51,040 --> 00:12:53,040
a binary blob at least from the client's

377
00:12:53,040 --> 00:12:54,639
perspective although of course it has

378
00:12:54,639 --> 00:12:56,720
some sort of structure

379
00:12:56,720 --> 00:12:59,519
and the client can then pass that opaque

380
00:12:59,519 --> 00:13:01,519
blob across to the server which has a

381
00:13:01,519 --> 00:13:03,920
corresponding iterative loop which is

382
00:13:03,920 --> 00:13:05,760
sort of accepting these authentication

383
00:13:05,760 --> 00:13:08,000
tokens and that process may generate

384
00:13:08,000 --> 00:13:10,000
a token which it then sends back to the

385
00:13:10,000 --> 00:13:12,399
client and so on and so forth and

386
00:13:12,399 --> 00:13:14,880
eventually the iteration either fails

387
00:13:14,880 --> 00:13:17,519
your authentication fails completely

388
00:13:17,519 --> 00:13:19,760
or you've succeeded and both sides are

389
00:13:19,760 --> 00:13:21,519
sort of like going yep we're all

390
00:13:21,519 --> 00:13:23,680
authenticated we're all good let's let's

391
00:13:23,680 --> 00:13:26,160
carry on

392
00:13:27,279 --> 00:13:28,160
so

393
00:13:28,160 --> 00:13:30,160
some of my work was of course doing

394
00:13:30,160 --> 00:13:31,920
reverse engineering but of course this

395
00:13:31,920 --> 00:13:33,519
also applies if you're doing the the

396
00:13:33,519 --> 00:13:34,959
source code review just a bit of source

397
00:13:34,959 --> 00:13:36,480
code review and you want to know what

398
00:13:36,480 --> 00:13:38,480
these apis actually are so that you can

399
00:13:38,480 --> 00:13:40,079
just search for them in the code base

400
00:13:40,079 --> 00:13:42,560
and go right okay these this is where

401
00:13:42,560 --> 00:13:45,360
windows authentication is happening

402
00:13:45,360 --> 00:13:47,600
so the first function is the acquire

403
00:13:47,600 --> 00:13:49,440
credentials handle function this is

404
00:13:49,440 --> 00:13:51,199
basically setting up that authentication

405
00:13:51,199 --> 00:13:53,120
session for you

406
00:13:53,120 --> 00:13:54,000
the

407
00:13:54,000 --> 00:13:55,760
thing of most importance here is the

408
00:13:55,760 --> 00:13:57,440
package name and this is like a text

409
00:13:57,440 --> 00:13:59,360
string which indicates the type of

410
00:13:59,360 --> 00:14:01,440
authentication you want to use

411
00:14:01,440 --> 00:14:02,720
so of course you've got

412
00:14:02,720 --> 00:14:04,639
ntlm which is just

413
00:14:04,639 --> 00:14:07,120
pure ntlm nothing else

414
00:14:07,120 --> 00:14:08,639
you have kerberos which is just pure

415
00:14:08,639 --> 00:14:10,480
kerberos and nothing else and then you

416
00:14:10,480 --> 00:14:12,959
have negotiate and negotiate is a

417
00:14:12,959 --> 00:14:15,519
mechanism to basically choose the the

418
00:14:15,519 --> 00:14:17,360
best available authentication scheme

419
00:14:17,360 --> 00:14:19,199
between two between the clients and the

420
00:14:19,199 --> 00:14:20,800
server

421
00:14:20,800 --> 00:14:22,720
and in fact this is the one you're most

422
00:14:22,720 --> 00:14:24,959
likely to see used on a windows network

423
00:14:24,959 --> 00:14:27,120
because it means that if ntlm is the

424
00:14:27,120 --> 00:14:28,959
only thing available ntlm will be used

425
00:14:28,959 --> 00:14:31,199
but of course if kerbros is available

426
00:14:31,199 --> 00:14:32,560
that potentially will be used in

427
00:14:32,560 --> 00:14:37,199
preference to the more insecure entlap

428
00:14:37,279 --> 00:14:38,800
now on the client side you then call

429
00:14:38,800 --> 00:14:40,399
this initialize security context

430
00:14:40,399 --> 00:14:42,079
function and pass it this sort of handle

431
00:14:42,079 --> 00:14:45,120
to the credentials

432
00:14:45,120 --> 00:14:48,000
the the key parameter here from for our

433
00:14:48,000 --> 00:14:50,160
discussion is the target name which for

434
00:14:50,160 --> 00:14:52,000
kerberos authentication is of course set

435
00:14:52,000 --> 00:14:54,480
to the spn that we want to use which

436
00:14:54,480 --> 00:14:56,880
identifies effectively identifies the

437
00:14:56,880 --> 00:14:57,680
key

438
00:14:57,680 --> 00:14:59,760
which will encrypt the uh the ticket for

439
00:14:59,760 --> 00:15:01,120
us

440
00:15:01,120 --> 00:15:02,800
if you don't specify a target name at

441
00:15:02,800 --> 00:15:03,600
all

442
00:15:03,600 --> 00:15:05,519
then of course kerberos will just fail

443
00:15:05,519 --> 00:15:07,760
or negotiate will only ever try and use

444
00:15:07,760 --> 00:15:09,920
ntlm assuming it's not actually disabled

445
00:15:09,920 --> 00:15:12,000
in your network

446
00:15:12,000 --> 00:15:13,839
the next parameter you you're going to

447
00:15:13,839 --> 00:15:16,240
be interested in is the context request

448
00:15:16,240 --> 00:15:18,320
parameter these are a set of flags which

449
00:15:18,320 --> 00:15:20,320
indicate the types of features you want

450
00:15:20,320 --> 00:15:22,320
in your authentication protocol now one

451
00:15:22,320 --> 00:15:24,480
of the ways of mitigating ntlm relay

452
00:15:24,480 --> 00:15:25,519
attacks

453
00:15:25,519 --> 00:15:27,920
is to use

454
00:15:27,920 --> 00:15:29,759
signing and encryption

455
00:15:29,759 --> 00:15:31,839
and the way this works is when you do

456
00:15:31,839 --> 00:15:33,759
the authentication a session key is

457
00:15:33,759 --> 00:15:35,040
negotiated as part of that

458
00:15:35,040 --> 00:15:36,959
authentication process

459
00:15:36,959 --> 00:15:40,079
and that is in some ways protected by

460
00:15:40,079 --> 00:15:42,560
the shared key of shared secret between

461
00:15:42,560 --> 00:15:43,600
machines

462
00:15:43,600 --> 00:15:45,279
and so an

463
00:15:45,279 --> 00:15:46,800
on path attacker

464
00:15:46,800 --> 00:15:50,720
can't know that information so if

465
00:15:50,720 --> 00:15:52,639
integrity is signing or encryption or

466
00:15:52,639 --> 00:15:55,519
enforced then of course the relaying

467
00:15:55,519 --> 00:15:57,279
attacker can't actually relay that

468
00:15:57,279 --> 00:15:58,959
traffic without the server just

469
00:15:58,959 --> 00:16:03,199
rejecting that that actual protocol

470
00:16:03,199 --> 00:16:04,720
you've then got input and output buffers

471
00:16:04,720 --> 00:16:06,079
this is for sending in and out the

472
00:16:06,079 --> 00:16:08,320
authentication tokens uh there's also

473
00:16:08,320 --> 00:16:10,320
some interesting quirks if you look at

474
00:16:10,320 --> 00:16:12,480
the project zero issue tracker you'll

475
00:16:12,480 --> 00:16:13,839
you'll find some interesting stuff in

476
00:16:13,839 --> 00:16:16,160
there as well now one thing to

477
00:16:16,160 --> 00:16:19,680
note about these flags is that

478
00:16:19,680 --> 00:16:21,519
when you use negotiate

479
00:16:21,519 --> 00:16:23,519
negotiate has a requirement for

480
00:16:23,519 --> 00:16:25,040
integrity checking

481
00:16:25,040 --> 00:16:26,639
and so what it does is it will actually

482
00:16:26,639 --> 00:16:28,880
set the integrity flag automatically for

483
00:16:28,880 --> 00:16:29,920
you

484
00:16:29,920 --> 00:16:32,160
so no matter what the client is setting

485
00:16:32,160 --> 00:16:34,560
for these flags integrity will always be

486
00:16:34,560 --> 00:16:36,320
enforced and negotiate but we'll we'll

487
00:16:36,320 --> 00:16:38,000
see an example where that isn't always

488
00:16:38,000 --> 00:16:40,480
the case

489
00:16:41,120 --> 00:16:43,440
now on the server side like you may

490
00:16:43,440 --> 00:16:44,480
think you just need to look at the

491
00:16:44,480 --> 00:16:45,839
client but it's also worth looking at

492
00:16:45,839 --> 00:16:47,600
the server as to what exactly it's doing

493
00:16:47,600 --> 00:16:49,279
with that information because this

494
00:16:49,279 --> 00:16:51,920
feeds into what services can i relay

495
00:16:51,920 --> 00:16:53,440
authentication traffic to as well

496
00:16:53,440 --> 00:16:55,519
because not all

497
00:16:55,519 --> 00:16:57,839
they may do some additional protections

498
00:16:57,839 --> 00:16:59,839
based on the authentication

499
00:16:59,839 --> 00:17:01,199
and probably the main thing you're

500
00:17:01,199 --> 00:17:03,360
interested in here is that there's an

501
00:17:03,360 --> 00:17:05,520
output parameter containing the flags

502
00:17:05,520 --> 00:17:07,359
negotiated as part of the authentication

503
00:17:07,359 --> 00:17:09,839
process and so this will reflect like

504
00:17:09,839 --> 00:17:11,679
the client asks for integrity checking

505
00:17:11,679 --> 00:17:13,839
the client asks for encryption

506
00:17:13,839 --> 00:17:16,559
and certain services like ldap can use

507
00:17:16,559 --> 00:17:18,880
this as a way of opportunistically

508
00:17:18,880 --> 00:17:21,119
enabling anti-relay protections they can

509
00:17:21,119 --> 00:17:23,919
go well the client supports signing so

510
00:17:23,919 --> 00:17:25,760
i'm going to turn on ldap signing so

511
00:17:25,760 --> 00:17:26,880
that

512
00:17:26,880 --> 00:17:29,120
if someone is relaying this traffic then

513
00:17:29,120 --> 00:17:31,440
you can't obviously attack it

514
00:17:31,440 --> 00:17:34,240
that's the theory

515
00:17:34,240 --> 00:17:35,050
okay so

516
00:17:35,050 --> 00:17:36,400
[Music]

517
00:17:36,400 --> 00:17:37,760
obviously once ident once you've

518
00:17:37,760 --> 00:17:39,280
identified that then of course you can

519
00:17:39,280 --> 00:17:41,919
go into the protocol research itself

520
00:17:41,919 --> 00:17:44,799
and i'll start with rpc protocols and as

521
00:17:44,799 --> 00:17:46,799
i said before there is a blog post with

522
00:17:46,799 --> 00:17:49,200
more different protocols in it and some

523
00:17:49,200 --> 00:17:51,120
of them better than others

524
00:17:51,120 --> 00:17:52,960
but i decided to choose the ones which

525
00:17:52,960 --> 00:17:54,880
were probably the most useful and also

526
00:17:54,880 --> 00:17:59,200
the most interesting to demonstrate

527
00:17:59,440 --> 00:18:02,000
so microsoft or windows comes with its

528
00:18:02,000 --> 00:18:04,240
own rpc library as i'm sure most people

529
00:18:04,240 --> 00:18:05,280
are aware

530
00:18:05,280 --> 00:18:06,160
um

531
00:18:06,160 --> 00:18:08,240
and you can do obviously windows

532
00:18:08,240 --> 00:18:09,760
authentication it makes perfect sense

533
00:18:09,760 --> 00:18:11,760
that you can do windows authentication

534
00:18:11,760 --> 00:18:16,000
on rpc channels and in the client

535
00:18:16,000 --> 00:18:17,600
if it's doing authentication then you

536
00:18:17,600 --> 00:18:19,360
will see a call like this

537
00:18:19,360 --> 00:18:22,320
rpc binding set off info

538
00:18:22,320 --> 00:18:24,960
and it has three parameters which are

539
00:18:24,960 --> 00:18:26,880
particularly interesting the first one

540
00:18:26,880 --> 00:18:28,960
is server principal name

541
00:18:28,960 --> 00:18:30,559
this is the service principal name for

542
00:18:30,559 --> 00:18:31,679
some reason it calls the server

543
00:18:31,679 --> 00:18:33,440
principal name for rpc i have no idea

544
00:18:33,440 --> 00:18:35,360
why

545
00:18:35,360 --> 00:18:37,360
and this is just your spn

546
00:18:37,360 --> 00:18:38,559
if you want to use kerberos

547
00:18:38,559 --> 00:18:40,720
authentication now if you don't specify

548
00:18:40,720 --> 00:18:43,200
one and crucially you are enabling

549
00:18:43,200 --> 00:18:45,440
negotiate authentication then it will

550
00:18:45,440 --> 00:18:47,039
generate one automatically using this

551
00:18:47,039 --> 00:18:49,440
pattern of restricted ker post and then

552
00:18:49,440 --> 00:18:50,799
the host name

553
00:18:50,799 --> 00:18:52,960
but the client could set one to an

554
00:18:52,960 --> 00:18:56,000
arbitrary value

555
00:18:56,000 --> 00:18:58,160
the next parameter of interest is the

556
00:18:58,160 --> 00:19:00,320
authentication level and this is usually

557
00:19:00,320 --> 00:19:03,200
what identifies what sort of anti-relay

558
00:19:03,200 --> 00:19:05,440
protections you're going to end up with

559
00:19:05,440 --> 00:19:08,320
if the client is using the connect

560
00:19:08,320 --> 00:19:09,200
level

561
00:19:09,200 --> 00:19:11,440
then no integrity checking no encryption

562
00:19:11,440 --> 00:19:13,200
is enabled and usually you can relate to

563
00:19:13,200 --> 00:19:15,440
this to that server without any any

564
00:19:15,440 --> 00:19:16,880
problems

565
00:19:16,880 --> 00:19:19,039
however if integrity or packet privacy

566
00:19:19,039 --> 00:19:20,559
are turned on then encryption and

567
00:19:20,559 --> 00:19:22,240
signing will be there on and of course

568
00:19:22,240 --> 00:19:24,559
it will add the corresponding flags to

569
00:19:24,559 --> 00:19:27,520
the authentication process about if our

570
00:19:27,520 --> 00:19:30,320
pc client connects to you it may limit

571
00:19:30,320 --> 00:19:33,679
where you can relay that traffic to

572
00:19:33,679 --> 00:19:35,280
and then the final parameter is just you

573
00:19:35,280 --> 00:19:37,520
can select like your specific uh

574
00:19:37,520 --> 00:19:39,840
authentication protocol

575
00:19:39,840 --> 00:19:42,400
like win nt is actually just ntlm

576
00:19:42,400 --> 00:19:44,080
and you go and got negotiate and then

577
00:19:44,080 --> 00:19:46,240
raw kurt ross

578
00:19:46,240 --> 00:19:48,160
so on the server side there's a function

579
00:19:48,160 --> 00:19:50,160
which looks awfully similar but if you

580
00:19:50,160 --> 00:19:52,080
kind of remember back with the accept

581
00:19:52,080 --> 00:19:54,080
security context function you'll notice

582
00:19:54,080 --> 00:19:55,600
that there was never a parameter to

583
00:19:55,600 --> 00:19:58,320
specify the spn you were expecting in

584
00:19:58,320 --> 00:20:00,559
your authentication process so why would

585
00:20:00,559 --> 00:20:02,400
you want to specify a service principal

586
00:20:02,400 --> 00:20:03,440
name

587
00:20:03,440 --> 00:20:04,960
on your server

588
00:20:04,960 --> 00:20:07,520
well one option is once the

589
00:20:07,520 --> 00:20:09,840
authentication is completed the server

590
00:20:09,840 --> 00:20:11,520
can actually query for the spn the

591
00:20:11,520 --> 00:20:13,520
client used and just say hey

592
00:20:13,520 --> 00:20:16,080
does this match my expectations and if

593
00:20:16,080 --> 00:20:17,679
it doesn't if it subverts its

594
00:20:17,679 --> 00:20:19,440
expectations it could of course just

595
00:20:19,440 --> 00:20:20,640
tell you to

596
00:20:20,640 --> 00:20:23,679
go away basically

597
00:20:24,880 --> 00:20:26,640
and the other one is of course i need to

598
00:20:26,640 --> 00:20:28,320
specify my authentication service who

599
00:20:28,320 --> 00:20:30,480
what do i actually accept

600
00:20:30,480 --> 00:20:33,360
it just turns out though that spn isn't

601
00:20:33,360 --> 00:20:34,880
actually used

602
00:20:34,880 --> 00:20:36,640
for verifying whether the client set

603
00:20:36,640 --> 00:20:38,640
their ispn or not

604
00:20:38,640 --> 00:20:40,080
instead

605
00:20:40,080 --> 00:20:42,799
it's used for this function so this

606
00:20:42,799 --> 00:20:46,400
function is a rpc management function

607
00:20:46,400 --> 00:20:49,120
and when your rpc server starts up it

608
00:20:49,120 --> 00:20:52,159
creates like a hidden rpc interface and

609
00:20:52,159 --> 00:20:53,840
one of the calls on that rpc interface

610
00:20:53,840 --> 00:20:56,960
is hey tell me what the server thinks

611
00:20:56,960 --> 00:20:59,520
it's spn should be

612
00:20:59,520 --> 00:21:01,360
you might notice an obvious problem here

613
00:21:01,360 --> 00:21:03,679
like if the client says hey server

614
00:21:03,679 --> 00:21:06,080
what's your spn what a malicious server

615
00:21:06,080 --> 00:21:07,120
could go

616
00:21:07,120 --> 00:21:08,320
well it's

617
00:21:08,320 --> 00:21:10,240
this domain controller can you just

618
00:21:10,240 --> 00:21:12,159
generate my kerberos authentication for

619
00:21:12,159 --> 00:21:14,080
me for my domain controller thank you

620
00:21:14,080 --> 00:21:16,640
and just just just pass it back to me

621
00:21:16,640 --> 00:21:18,240
and of course at this point we've now

622
00:21:18,240 --> 00:21:20,320
got a potential decoupling between the

623
00:21:20,320 --> 00:21:22,320
host name that we connected to for your

624
00:21:22,320 --> 00:21:23,919
rpc channel

625
00:21:23,919 --> 00:21:25,520
and the spn

626
00:21:25,520 --> 00:21:27,039
that we're using for that kerberos

627
00:21:27,039 --> 00:21:28,720
authentication

628
00:21:28,720 --> 00:21:30,960
and at that point relay is potentially

629
00:21:30,960 --> 00:21:32,880
possible

630
00:21:32,880 --> 00:21:34,320
unfortunately

631
00:21:34,320 --> 00:21:36,240
i couldn't actually find many clients

632
00:21:36,240 --> 00:21:37,679
which use this function this isn't

633
00:21:37,679 --> 00:21:39,200
something which is done automatically

634
00:21:39,200 --> 00:21:41,679
for you you have to explicitly call it

635
00:21:41,679 --> 00:21:43,520
and so i never found a particularly good

636
00:21:43,520 --> 00:21:45,760
rpc client to use it

637
00:21:45,760 --> 00:21:46,799
however

638
00:21:46,799 --> 00:21:49,120
like raw rpc clients aren't like the

639
00:21:49,120 --> 00:21:51,520
only thing which uses rpc on windows

640
00:21:51,520 --> 00:21:54,000
now anybody who knows who i am

641
00:21:54,000 --> 00:21:55,600
probably knows i have a bit of a thing

642
00:21:55,600 --> 00:21:57,120
for com

643
00:21:57,120 --> 00:21:58,000
i

644
00:21:58,000 --> 00:22:01,360
i'm i'm a bit weird like that

645
00:22:01,360 --> 00:22:03,280
but when you try and when you're trying

646
00:22:03,280 --> 00:22:05,760
to send objects between processes com

647
00:22:05,760 --> 00:22:08,159
processes or com servers

648
00:22:08,159 --> 00:22:09,120
uh

649
00:22:09,120 --> 00:22:11,120
all the information necessary to connect

650
00:22:11,120 --> 00:22:13,840
to that server to that original object

651
00:22:13,840 --> 00:22:15,600
is wrapped up in a special observe

652
00:22:15,600 --> 00:22:16,799
structure

653
00:22:16,799 --> 00:22:18,720
and it contains things like the object

654
00:22:18,720 --> 00:22:20,480
exporter id which is kind of like a

655
00:22:20,480 --> 00:22:22,480
unique identifier for

656
00:22:22,480 --> 00:22:25,919
who which server exposed that object to

657
00:22:25,919 --> 00:22:26,960
me

658
00:22:26,960 --> 00:22:29,120
but it also contains rpc binding

659
00:22:29,120 --> 00:22:30,480
information

660
00:22:30,480 --> 00:22:32,400
and this is actually two parts the first

661
00:22:32,400 --> 00:22:34,720
part is the string binding and this is

662
00:22:34,720 --> 00:22:37,440
used to generate the actual connection

663
00:22:37,440 --> 00:22:41,280
to the rpc server so it basically says

664
00:22:41,280 --> 00:22:44,880
connect over say the tcp rpc protocol to

665
00:22:44,880 --> 00:22:46,720
this host name please this is where the

666
00:22:46,720 --> 00:22:49,440
object lives

667
00:22:49,520 --> 00:22:50,320
but

668
00:22:50,320 --> 00:22:52,080
interestingly

669
00:22:52,080 --> 00:22:54,159
that's like a perfect demonstration of a

670
00:22:54,159 --> 00:22:55,679
decoupling between where you're

671
00:22:55,679 --> 00:22:57,200
connecting to and where the security

672
00:22:57,200 --> 00:22:58,720
lives because the second part is the

673
00:22:58,720 --> 00:23:00,400
security binding and the security

674
00:23:00,400 --> 00:23:01,840
binding contains

675
00:23:01,840 --> 00:23:03,919
what authentication protocol do i want

676
00:23:03,919 --> 00:23:05,919
so i could go i want kerberos please

677
00:23:05,919 --> 00:23:07,600
just raw curb roth

678
00:23:07,600 --> 00:23:08,559
and

679
00:23:08,559 --> 00:23:11,039
this is my spn this is my service

680
00:23:11,039 --> 00:23:12,559
principal name that i'm listening this

681
00:23:12,559 --> 00:23:14,799
is i'm going to do so of course a

682
00:23:14,799 --> 00:23:17,200
malicious com server can say that's

683
00:23:17,200 --> 00:23:19,679
anything it likes

684
00:23:19,679 --> 00:23:21,039
so the basic attack is something like

685
00:23:21,039 --> 00:23:23,840
this now in general this is easiest to

686
00:23:23,840 --> 00:23:26,400
do on a local a local system rather than

687
00:23:26,400 --> 00:23:28,880
between servers because of the way of uh

688
00:23:28,880 --> 00:23:30,799
com security generally works only sort

689
00:23:30,799 --> 00:23:32,320
of relies on administrators and things

690
00:23:32,320 --> 00:23:34,240
like that which is pretty pretty awkward

691
00:23:34,240 --> 00:23:36,320
to deal with

692
00:23:36,320 --> 00:23:38,559
but the attack basically resolves around

693
00:23:38,559 --> 00:23:40,799
you have your malicious process sets up

694
00:23:40,799 --> 00:23:44,080
a com server and registers its rpc

695
00:23:44,080 --> 00:23:46,400
binding information in an obj ref with

696
00:23:46,400 --> 00:23:49,120
the local oxide resolver inside the rpc

697
00:23:49,120 --> 00:23:51,840
subsystem

698
00:23:52,480 --> 00:23:55,279
the attacker can then marshal a com

699
00:23:55,279 --> 00:23:57,919
object using that object information to

700
00:23:57,919 --> 00:23:58,720
the

701
00:23:58,720 --> 00:23:59,840
privilege through some sort of

702
00:23:59,840 --> 00:24:01,760
privileged service in the local machine

703
00:24:01,760 --> 00:24:03,840
that would then unmarshal it which

704
00:24:03,840 --> 00:24:06,400
causes that the calm runtime to try and

705
00:24:06,400 --> 00:24:09,200
look up the binding information for by

706
00:24:09,200 --> 00:24:12,720
object from rpcss

707
00:24:12,720 --> 00:24:14,400
it will then try and connect back to our

708
00:24:14,400 --> 00:24:16,720
attacker and of course we've just stuck

709
00:24:16,720 --> 00:24:18,960
whatever spm we like and whatever like

710
00:24:18,960 --> 00:24:21,200
authentication protocol we like and just

711
00:24:21,200 --> 00:24:24,000
we can now forward that traffic on

712
00:24:24,000 --> 00:24:26,320
to some arbitrary service somewhere

713
00:24:26,320 --> 00:24:27,840
either potentially locally on the same

714
00:24:27,840 --> 00:24:29,520
machine or remotely to a different

715
00:24:29,520 --> 00:24:31,679
machine

716
00:24:31,679 --> 00:24:33,360
so you can do this fairly easily without

717
00:24:33,360 --> 00:24:35,120
actually having to write any custom rpc

718
00:24:35,120 --> 00:24:36,799
protocol parts as anything else called

719
00:24:36,799 --> 00:24:38,640
co-initialized security said an

720
00:24:38,640 --> 00:24:40,720
arbitrary spn and nothing ever bothers

721
00:24:40,720 --> 00:24:42,240
to check

722
00:24:42,240 --> 00:24:45,039
um so what can you do with that one

723
00:24:45,039 --> 00:24:47,760
attack which allah

724
00:24:47,760 --> 00:24:50,640
discussed in his uh pretty amazing blog

725
00:24:50,640 --> 00:24:52,480
post called wagging the dog

726
00:24:52,480 --> 00:24:54,240
is abusing resource-based constrained

727
00:24:54,240 --> 00:24:56,880
delegation in a domain environment

728
00:24:56,880 --> 00:24:58,799
and this basically allows you to do

729
00:24:58,799 --> 00:25:01,440
local privilege escalation on a domain

730
00:25:01,440 --> 00:25:04,320
join system as long as crucially ldap

731
00:25:04,320 --> 00:25:07,039
signing has not been enabled

732
00:25:07,039 --> 00:25:09,200
so

733
00:25:09,600 --> 00:25:12,159
as i'm sure everyone is particularly

734
00:25:12,159 --> 00:25:14,240
interested in seeing we'll go for a demo

735
00:25:14,240 --> 00:25:15,279
so

736
00:25:15,279 --> 00:25:18,000
i have an environment set up

737
00:25:18,000 --> 00:25:20,159
which is

738
00:25:20,159 --> 00:25:21,919
um

739
00:25:21,919 --> 00:25:25,200
if i can oops

740
00:25:26,240 --> 00:25:28,480
not sure how to increase can people see

741
00:25:28,480 --> 00:25:31,360
that is it okay

742
00:25:31,440 --> 00:25:32,400
yeah

743
00:25:32,400 --> 00:25:33,200
right

744
00:25:33,200 --> 00:25:35,200
i i can't work out how to

745
00:25:35,200 --> 00:25:36,640
increase this font without a scroll

746
00:25:36,640 --> 00:25:38,880
wheel

747
00:25:39,760 --> 00:25:40,559
so

748
00:25:40,559 --> 00:25:42,559
i've got a simple domain environment set

749
00:25:42,559 --> 00:25:43,679
up

750
00:25:43,679 --> 00:25:45,919
and

751
00:25:45,919 --> 00:25:48,480
i've got some scripts so in this demo

752
00:25:48,480 --> 00:25:50,080
i've got like a very simple script

753
00:25:50,080 --> 00:25:52,399
called

754
00:25:55,600 --> 00:25:58,240
so exploit computer account

755
00:25:58,240 --> 00:25:59,360
and this

756
00:25:59,360 --> 00:26:01,679
runs like creates a new computer account

757
00:26:01,679 --> 00:26:04,640
runs my tooling to do the decom relay

758
00:26:04,640 --> 00:26:06,720
and then uses the rubyist tool

759
00:26:06,720 --> 00:26:08,080
possibly some of you have used that to

760
00:26:08,080 --> 00:26:10,559
perform like a service for user attack

761
00:26:10,559 --> 00:26:12,559
which will get me the

762
00:26:12,559 --> 00:26:14,320
a kerberos ticket for the domain

763
00:26:14,320 --> 00:26:18,080
administrator on my on my my system

764
00:26:18,080 --> 00:26:19,200
so

765
00:26:19,200 --> 00:26:21,120
obviously hopefully the the demo guards

766
00:26:21,120 --> 00:26:22,400
will

767
00:26:22,400 --> 00:26:26,080
like me today okay so

768
00:26:26,080 --> 00:26:27,600
um

769
00:26:27,600 --> 00:26:30,000
it looks awesome right like obviously

770
00:26:30,000 --> 00:26:32,000
everyone knows that once another console

771
00:26:32,000 --> 00:26:33,840
window pops up that you you've completed

772
00:26:33,840 --> 00:26:35,840
the exploit unfortunately if i look at

773
00:26:35,840 --> 00:26:37,919
that i'm still i'm still domain alice

774
00:26:37,919 --> 00:26:39,840
user so

775
00:26:39,840 --> 00:26:42,080
it's not that interesting however

776
00:26:42,080 --> 00:26:45,520
if i look at my kerberos ticket cash

777
00:26:45,520 --> 00:26:47,679
i have now a kerberos ticket for the

778
00:26:47,679 --> 00:26:49,840
domain administrator for my local

779
00:26:49,840 --> 00:26:51,600
machine

780
00:26:51,600 --> 00:26:54,000
and now i can i can basically connect to

781
00:26:54,000 --> 00:26:56,000
the local sem use kerberos

782
00:26:56,000 --> 00:26:57,840
authentication as a domain administrator

783
00:26:57,840 --> 00:26:59,279
in the local machine

784
00:26:59,279 --> 00:27:00,880
and hopefully

785
00:27:00,880 --> 00:27:03,840
i now get a second one pop-up which is a

786
00:27:03,840 --> 00:27:07,840
bit more privileged so

787
00:27:14,640 --> 00:27:16,400
okay so

788
00:27:16,400 --> 00:27:18,399
another protocol of particular interest

789
00:27:18,399 --> 00:27:21,440
is http as i said before with the active

790
00:27:21,440 --> 00:27:23,520
directory certificate services which

791
00:27:23,520 --> 00:27:27,120
using http is a pretty sort of simple

792
00:27:27,120 --> 00:27:29,600
authentication protocol that it uses for

793
00:27:29,600 --> 00:27:32,080
windows authentication

794
00:27:32,080 --> 00:27:33,840
you make your request from your http

795
00:27:33,840 --> 00:27:34,880
client

796
00:27:34,880 --> 00:27:36,159
and

797
00:27:36,159 --> 00:27:38,399
if the server wants you to do windows

798
00:27:38,399 --> 00:27:40,240
authentication it returns you status

799
00:27:40,240 --> 00:27:41,760
code 401

800
00:27:41,760 --> 00:27:45,120
unauthorized and says in a www

801
00:27:45,120 --> 00:27:48,000
authenticate header hey use negotiate

802
00:27:48,000 --> 00:27:49,440
and this could be like basic

803
00:27:49,440 --> 00:27:51,520
authentication or digest authentication

804
00:27:51,520 --> 00:27:52,559
but

805
00:27:52,559 --> 00:27:54,240
in this case we want negotiate

806
00:27:54,240 --> 00:27:56,640
authentication please

807
00:27:56,640 --> 00:27:58,880
and so the client can then kick off its

808
00:27:58,880 --> 00:28:00,840
windows authentication loop using the

809
00:28:00,840 --> 00:28:04,000
sspi and it generates an authentication

810
00:28:04,000 --> 00:28:07,039
token converts that into base64 slaps it

811
00:28:07,039 --> 00:28:09,039
in an authorization header sends it back

812
00:28:09,039 --> 00:28:10,880
to the server and of course this can go

813
00:28:10,880 --> 00:28:13,200
on for multiple hops like depending on

814
00:28:13,200 --> 00:28:14,640
how many like

815
00:28:14,640 --> 00:28:16,399
trips around that iteration loop you

816
00:28:16,399 --> 00:28:17,440
need to go

817
00:28:17,440 --> 00:28:19,200
but eventually hopefully the idea is

818
00:28:19,200 --> 00:28:23,360
that you authenticate to the survey

819
00:28:24,080 --> 00:28:25,039
and

820
00:28:25,039 --> 00:28:26,799
again as mark was saying like reading

821
00:28:26,799 --> 00:28:28,880
protocol documentation isn't necessarily

822
00:28:28,880 --> 00:28:31,760
a good idea because if you read the rfc

823
00:28:31,760 --> 00:28:33,279
and no one should ever believe that

824
00:28:33,279 --> 00:28:36,799
anyone implements anything to the rfc

825
00:28:36,799 --> 00:28:38,960
uh it specifically states that if you're

826
00:28:38,960 --> 00:28:41,039
using kerberos you should probably use a

827
00:28:41,039 --> 00:28:44,880
principal name in the form http hostname

828
00:28:44,880 --> 00:28:48,720
okay great so that would probably seem

829
00:28:48,720 --> 00:28:50,960
to eliminate the possibility of of any

830
00:28:50,960 --> 00:28:52,720
useful attacks

831
00:28:52,720 --> 00:28:54,960
because again as i pointed out you need

832
00:28:54,960 --> 00:28:56,240
to decouple

833
00:28:56,240 --> 00:28:58,640
the server you connect to from the spn

834
00:28:58,640 --> 00:29:00,880
that is used

835
00:29:00,880 --> 00:29:02,159
but of course what does the

836
00:29:02,159 --> 00:29:04,399
implementations actually do it's not

837
00:29:04,399 --> 00:29:05,840
what the rsc says it's what the

838
00:29:05,840 --> 00:29:07,600
implementations do

839
00:29:07,600 --> 00:29:09,760
and the first one i looked at when inet

840
00:29:09,760 --> 00:29:11,840
is like the pretty much the progenator

841
00:29:11,840 --> 00:29:13,520
of of the negotiate authentication

842
00:29:13,520 --> 00:29:16,240
scheme for http because windiness is the

843
00:29:16,240 --> 00:29:18,799
is the core networking code for internet

844
00:29:18,799 --> 00:29:20,720
explorer

845
00:29:20,720 --> 00:29:22,799
and strangely enough a few other things

846
00:29:22,799 --> 00:29:26,320
as well as we'll hopefully see later

847
00:29:26,320 --> 00:29:27,760
and what it does is it calls this

848
00:29:27,760 --> 00:29:29,919
generate a fully qualified domain name

849
00:29:29,919 --> 00:29:32,960
and spn function

850
00:29:33,039 --> 00:29:35,520
it first looks up the fully qualified

851
00:29:35,520 --> 00:29:37,919
domain name of your url so this is like

852
00:29:37,919 --> 00:29:40,080
if you pass it like an undotted name it

853
00:29:40,080 --> 00:29:42,559
will try and put the domain suffix at

854
00:29:42,559 --> 00:29:44,000
the end of it

855
00:29:44,000 --> 00:29:45,600
and then if there's a special flag this

856
00:29:45,600 --> 00:29:48,880
global uc name for spn it will just use

857
00:29:48,880 --> 00:29:52,240
that as your as part of your spn however

858
00:29:52,240 --> 00:29:53,840
in general this is not turned on this is

859
00:29:53,840 --> 00:29:56,000
an optional feature that you can turn on

860
00:29:56,000 --> 00:29:58,399
so instead it calls get canonical name

861
00:29:58,399 --> 00:30:00,159
and then it returns that but the

862
00:30:00,159 --> 00:30:02,159
ultimate end result of this is one of

863
00:30:02,159 --> 00:30:04,960
those two springs ends up being stuffed

864
00:30:04,960 --> 00:30:08,080
into the spf with a http service class

865
00:30:08,080 --> 00:30:09,120
okay

866
00:30:09,120 --> 00:30:11,200
that doesn't sound particularly um

867
00:30:11,200 --> 00:30:13,279
strange

868
00:30:13,279 --> 00:30:15,200
so where is that those values coming

869
00:30:15,200 --> 00:30:17,520
from they're coming from dns

870
00:30:17,520 --> 00:30:19,679
like when you make that connection to

871
00:30:19,679 --> 00:30:22,480
the to the web server it's going to look

872
00:30:22,480 --> 00:30:25,120
up the host name using dns

873
00:30:25,120 --> 00:30:27,360
and as part of that it specifies two

874
00:30:27,360 --> 00:30:29,279
flags it says return me the fully

875
00:30:29,279 --> 00:30:30,880
qualified domain name and return me the

876
00:30:30,880 --> 00:30:32,720
canonical name please

877
00:30:32,720 --> 00:30:35,360
and as part of the address record

878
00:30:35,360 --> 00:30:36,720
should be these two strings which you

879
00:30:36,720 --> 00:30:38,799
can then store for later use and it'll

880
00:30:38,799 --> 00:30:40,320
also store the address to connect to so

881
00:30:40,320 --> 00:30:42,480
of course is making a connection to the

882
00:30:42,480 --> 00:30:44,960
server and storing away the information

883
00:30:44,960 --> 00:30:47,760
about that dns lookup so again doesn't

884
00:30:47,760 --> 00:30:49,279
sound particularly that useful because

885
00:30:49,279 --> 00:30:52,240
of course just doing a dns lookup right

886
00:30:52,240 --> 00:30:53,919
but where's that canonical name coming

887
00:30:53,919 --> 00:30:54,880
from

888
00:30:54,880 --> 00:30:57,440
but a canonical name comes from the dns

889
00:30:57,440 --> 00:30:59,360
address record itself

890
00:30:59,360 --> 00:31:00,159
so

891
00:31:00,159 --> 00:31:02,799
it's not like with a name like cname

892
00:31:02,799 --> 00:31:04,399
you'd think it'd be like the cname

893
00:31:04,399 --> 00:31:05,840
record if you know anything about sort

894
00:31:05,840 --> 00:31:08,240
of how what dns records are

895
00:31:08,240 --> 00:31:10,080
but it's not it's actually coming from

896
00:31:10,080 --> 00:31:12,320
the address record itself specifically

897
00:31:12,320 --> 00:31:14,159
the address record says

898
00:31:14,159 --> 00:31:17,360
i'm on 10010 which is the address of the

899
00:31:17,360 --> 00:31:19,679
domain controller um but my name is

900
00:31:19,679 --> 00:31:22,640
primarydc.domain.local

901
00:31:22,640 --> 00:31:24,559
okay so that's the alchemical name

902
00:31:24,559 --> 00:31:27,600
that's the address we get

903
00:31:27,760 --> 00:31:29,840
now you may think okay can i just spoof

904
00:31:29,840 --> 00:31:32,080
that like i can do a recursive look up

905
00:31:32,080 --> 00:31:34,320
to my random web like my random dns

906
00:31:34,320 --> 00:31:36,159
server somewhere on the internet

907
00:31:36,159 --> 00:31:37,200
and

908
00:31:37,200 --> 00:31:38,960
i can return some arbitrary address

909
00:31:38,960 --> 00:31:40,960
record which spoofs that name

910
00:31:40,960 --> 00:31:42,480
unfortunately doesn't tend to work

911
00:31:42,480 --> 00:31:44,240
because at least on the microsoft dns

912
00:31:44,240 --> 00:31:46,640
server it does do some checking now if

913
00:31:46,640 --> 00:31:49,039
it's doing a recursive query that the

914
00:31:49,039 --> 00:31:50,799
address record looks like it's valid

915
00:31:50,799 --> 00:31:52,559
like looks like it's not being spoofed

916
00:31:52,559 --> 00:31:54,159
because of course if you can spoof dns

917
00:31:54,159 --> 00:31:58,399
you can do all manner of fun stuff

918
00:31:58,720 --> 00:32:01,039
but it turns out that there is a way of

919
00:32:01,039 --> 00:32:02,799
doing this on on a typical windows

920
00:32:02,799 --> 00:32:04,320
installation like a default windows

921
00:32:04,320 --> 00:32:06,799
installation it enables um this linked

922
00:32:06,799 --> 00:32:08,799
local multicast name resolution protocol

923
00:32:08,799 --> 00:32:10,480
which i'm sure if you've done any ntlm

924
00:32:10,480 --> 00:32:12,080
relaying you may already have heard

925
00:32:12,080 --> 00:32:13,039
about

926
00:32:13,039 --> 00:32:14,640
but unlike that where you're generally

927
00:32:14,640 --> 00:32:16,000
trying to

928
00:32:16,000 --> 00:32:17,840
like get someone to connect to you and

929
00:32:17,840 --> 00:32:19,679
pretend you're actually an existing

930
00:32:19,679 --> 00:32:22,000
server the idea here is you just say

931
00:32:22,000 --> 00:32:23,919
actually i'm i'm evil host connect to

932
00:32:23,919 --> 00:32:25,519
evil host please

933
00:32:25,519 --> 00:32:28,559
and because uh ll llmnr

934
00:32:28,559 --> 00:32:31,039
like bypasses the dns server and goes

935
00:32:31,039 --> 00:32:32,559
straight to the dns resolver in the

936
00:32:32,559 --> 00:32:33,519
client

937
00:32:33,519 --> 00:32:35,919
we can actually decouple the address

938
00:32:35,919 --> 00:32:38,240
from the canonical name we can set it an

939
00:32:38,240 --> 00:32:39,519
address which is not my domain

940
00:32:39,519 --> 00:32:41,120
controller and it's actually my

941
00:32:41,120 --> 00:32:42,799
attacker's machine

942
00:32:42,799 --> 00:32:44,559
but send it actually but i'm also

943
00:32:44,559 --> 00:32:47,200
primary dc.the main.local

944
00:32:47,200 --> 00:32:49,519
and you've got that decoupling

945
00:32:49,519 --> 00:32:51,519
so a simple example of that spoofing is

946
00:32:51,519 --> 00:32:53,760
of course you set up your your machine

947
00:32:53,760 --> 00:32:56,000
running a simple ll and an r there's

948
00:32:56,000 --> 00:32:56,960
like

949
00:32:56,960 --> 00:32:58,960
tools like python responder for example

950
00:32:58,960 --> 00:33:00,799
uh already do a lot of this for you but

951
00:33:00,799 --> 00:33:03,840
don't do this specific attack

952
00:33:03,840 --> 00:33:05,440
um the win

953
00:33:05,440 --> 00:33:07,440
client will of course try and resolve

954
00:33:07,440 --> 00:33:08,840
evil host

955
00:33:08,840 --> 00:33:12,000
and it will connect to our web server on

956
00:33:12,000 --> 00:33:14,799
evil host we return a 401 response

957
00:33:14,799 --> 00:33:16,399
um but at this point it's already pulled

958
00:33:16,399 --> 00:33:17,840
out the canonical name which you've set

959
00:33:17,840 --> 00:33:20,640
to file server and so it builds an spn

960
00:33:20,640 --> 00:33:24,159
using http file server not http slash

961
00:33:24,159 --> 00:33:26,000
evil host

962
00:33:26,000 --> 00:33:28,720
and of course that point we've got

963
00:33:28,720 --> 00:33:30,480
effective authentication between the

964
00:33:30,480 --> 00:33:33,039
computer and file server so we can just

965
00:33:33,039 --> 00:33:34,399
relay it

966
00:33:34,399 --> 00:33:35,679
and

967
00:33:35,679 --> 00:33:38,399
we perform our attack that way

968
00:33:38,399 --> 00:33:40,480
okay so that's wininet so you'd think

969
00:33:40,480 --> 00:33:43,120
okay it's quite old code clearly

970
00:33:43,120 --> 00:33:44,720
something like chromium is going to done

971
00:33:44,720 --> 00:33:47,440
a better job right

972
00:33:47,440 --> 00:33:48,880
so you look at the implementation of

973
00:33:48,880 --> 00:33:50,320
chromium and interestingly you look at

974
00:33:50,320 --> 00:33:52,640
the comments in the chromium source code

975
00:33:52,640 --> 00:33:54,399
and it says we're doing this because

976
00:33:54,399 --> 00:33:56,399
we're kind to trying to emulate internet

977
00:33:56,399 --> 00:33:58,000
explorer's behavior

978
00:33:58,000 --> 00:34:00,240
it turns out they don't implement uh

979
00:34:00,240 --> 00:34:01,679
intel explorer's behavior or at least

980
00:34:01,679 --> 00:34:03,840
they do but ironically because of course

981
00:34:03,840 --> 00:34:06,320
internet explorer is closed source the

982
00:34:06,320 --> 00:34:07,840
chromium developers don't necessarily

983
00:34:07,840 --> 00:34:09,760
know how internet explorer did it so

984
00:34:09,760 --> 00:34:12,000
they just did it had he thought they did

985
00:34:12,000 --> 00:34:13,599
it

986
00:34:13,599 --> 00:34:16,079
and what it does is it does a second dns

987
00:34:16,079 --> 00:34:17,040
lookup

988
00:34:17,040 --> 00:34:18,960
and you can probably even see where this

989
00:34:18,960 --> 00:34:21,199
is going at this point right

990
00:34:21,199 --> 00:34:22,800
now there is a way of disabling this an

991
00:34:22,800 --> 00:34:24,320
option to disable this behavior but of

992
00:34:24,320 --> 00:34:25,918
course that's never turned on by default

993
00:34:25,918 --> 00:34:26,879
right

994
00:34:26,879 --> 00:34:28,320
um

995
00:34:28,320 --> 00:34:30,879
and so it does the dns request and it

996
00:34:30,879 --> 00:34:32,399
gets back the result and it pulls out

997
00:34:32,399 --> 00:34:35,119
the chemical name and it builds the spn

998
00:34:35,119 --> 00:34:38,320
based on that canonical name from dns

999
00:34:38,320 --> 00:34:42,000
you think okay that's great and all well

1000
00:34:42,000 --> 00:34:43,839
you can of course

1001
00:34:43,839 --> 00:34:45,918
change the response from the dns server

1002
00:34:45,918 --> 00:34:47,679
because of course the dns it has to do

1003
00:34:47,679 --> 00:34:50,079
one dns request to talk to your web

1004
00:34:50,079 --> 00:34:51,359
server

1005
00:34:51,359 --> 00:34:53,679
and then do another dns request

1006
00:34:53,679 --> 00:34:56,879
to actually generate the canon open name

1007
00:34:56,879 --> 00:34:59,599
now of course in general your dns record

1008
00:34:59,599 --> 00:35:01,359
will have a long ttl which means it will

1009
00:35:01,359 --> 00:35:04,000
be in the dns cache so it won't actually

1010
00:35:04,000 --> 00:35:06,160
do a second dns request but there's

1011
00:35:06,160 --> 00:35:08,240
nothing stopping as returning a ttl of

1012
00:35:08,240 --> 00:35:10,320
like one or zero

1013
00:35:10,320 --> 00:35:12,320
and immediately purge that entry from

1014
00:35:12,320 --> 00:35:14,240
the cache and then when the second dns

1015
00:35:14,240 --> 00:35:16,079
request goes on it actually does

1016
00:35:16,079 --> 00:35:18,000
something useful now of course there is

1017
00:35:18,000 --> 00:35:20,560
a slight complication here in order to

1018
00:35:20,560 --> 00:35:22,079
get chromium to automatically

1019
00:35:22,079 --> 00:35:24,400
authenticate you need to provide it with

1020
00:35:24,400 --> 00:35:27,520
an intranet zone uh url

1021
00:35:27,520 --> 00:35:30,400
and in general what that means is you

1022
00:35:30,400 --> 00:35:32,079
need to provide it a name with no dots

1023
00:35:32,079 --> 00:35:34,079
in it so of course if you connect to

1024
00:35:34,079 --> 00:35:35,440
evil ns

1025
00:35:35,440 --> 00:35:37,599
or evil host it will try and do

1026
00:35:37,599 --> 00:35:39,680
automatic authentication on the local

1027
00:35:39,680 --> 00:35:41,760
local network however if you gave it

1028
00:35:41,760 --> 00:35:43,599
evil host.domain.local

1029
00:35:43,599 --> 00:35:45,200
then it's not going to do automatic

1030
00:35:45,200 --> 00:35:48,320
authentication so we need some way of

1031
00:35:48,320 --> 00:35:51,200
adding a record to the local dns server

1032
00:35:51,200 --> 00:35:54,480
which allows us to to abuse this

1033
00:35:54,480 --> 00:35:56,720
and it just so happens that

1034
00:35:56,720 --> 00:35:59,119
at least by default any user any

1035
00:35:59,119 --> 00:36:01,520
authenticated user on a domain can write

1036
00:36:01,520 --> 00:36:03,119
their own dns records to the windows

1037
00:36:03,119 --> 00:36:05,119
domain server via ldap

1038
00:36:05,119 --> 00:36:06,800
unfortunately

1039
00:36:06,800 --> 00:36:09,040
the complication lies here in that the

1040
00:36:09,040 --> 00:36:11,599
ldap approach takes sort of 60 to 90

1041
00:36:11,599 --> 00:36:13,839
seconds before it refreshes

1042
00:36:13,839 --> 00:36:16,000
so it's not something we can we can't

1043
00:36:16,000 --> 00:36:18,079
race a window of like a second between

1044
00:36:18,079 --> 00:36:20,160
the initial request for connection

1045
00:36:20,160 --> 00:36:21,599
and the

1046
00:36:21,599 --> 00:36:24,240
actual lookup process however instead

1047
00:36:24,240 --> 00:36:25,520
what we can do

1048
00:36:25,520 --> 00:36:27,680
is instead of writing an address record

1049
00:36:27,680 --> 00:36:29,119
we write a

1050
00:36:29,119 --> 00:36:30,880
delegation record or a name server

1051
00:36:30,880 --> 00:36:32,160
record

1052
00:36:32,160 --> 00:36:33,920
and what this does is it allows us to

1053
00:36:33,920 --> 00:36:36,720
route a name lookup to an arbitrary dns

1054
00:36:36,720 --> 00:36:38,800
server we can control

1055
00:36:38,800 --> 00:36:40,880
and yes there was already our problem

1056
00:36:40,880 --> 00:36:43,839
that we can't return arbitrary data but

1057
00:36:43,839 --> 00:36:45,760
fortunately there's a way around that

1058
00:36:45,760 --> 00:36:48,480
so when chromium now connects to evil ns

1059
00:36:48,480 --> 00:36:50,240
domain.local

1060
00:36:50,240 --> 00:36:52,640
it of course we return it back an

1061
00:36:52,640 --> 00:36:54,400
address record for

1062
00:36:54,400 --> 00:36:56,480
our malicious server

1063
00:36:56,480 --> 00:36:58,560
pretty easy

1064
00:36:58,560 --> 00:37:00,960
return a 401 response chromium goes

1065
00:37:00,960 --> 00:37:02,240
right okay and i need to do

1066
00:37:02,240 --> 00:37:03,599
authentication so i'm going to do a

1067
00:37:03,599 --> 00:37:05,760
second dns lookup

1068
00:37:05,760 --> 00:37:09,680
by this point our dns record has expired

1069
00:37:09,680 --> 00:37:12,000
and it looks up again and now instead of

1070
00:37:12,000 --> 00:37:14,240
our dns server returning an address

1071
00:37:14,240 --> 00:37:17,359
record it returns a cname record for the

1072
00:37:17,359 --> 00:37:18,880
target

1073
00:37:18,880 --> 00:37:20,960
spn we want so we return it say file

1074
00:37:20,960 --> 00:37:23,760
server or primary dc

1075
00:37:23,760 --> 00:37:24,800
and

1076
00:37:24,800 --> 00:37:26,640
what the microsoft dns server will then

1077
00:37:26,640 --> 00:37:28,240
do is it will actually look up the

1078
00:37:28,240 --> 00:37:30,240
actual address record for that server

1079
00:37:30,240 --> 00:37:33,040
and return it and chromium will get back

1080
00:37:33,040 --> 00:37:35,839
an address record which contains the

1081
00:37:35,839 --> 00:37:39,119
real ip address of file server but by

1082
00:37:39,119 --> 00:37:40,640
this point it's too late it's already

1083
00:37:40,640 --> 00:37:42,880
connected to our malicious server but

1084
00:37:42,880 --> 00:37:45,119
instead it will use only the canonical

1085
00:37:45,119 --> 00:37:46,880
name from that record

1086
00:37:46,880 --> 00:37:47,839
to

1087
00:37:47,839 --> 00:37:49,359
make the spm for the kerberos

1088
00:37:49,359 --> 00:37:51,760
authentication

1089
00:37:51,760 --> 00:37:53,440
and then of course we're back to the

1090
00:37:53,440 --> 00:37:56,640
whole relaying trick right

1091
00:37:56,640 --> 00:37:58,640
so a few more interesting things with

1092
00:37:58,640 --> 00:38:01,040
http um

1093
00:38:01,040 --> 00:38:02,720
i wanted to be able to disable the

1094
00:38:02,720 --> 00:38:05,760
integrity flag like pretty much every

1095
00:38:05,760 --> 00:38:08,640
implementation always use negotiate

1096
00:38:08,640 --> 00:38:10,079
however i noticed that a few

1097
00:38:10,079 --> 00:38:11,119
implementations i looked at

1098
00:38:11,119 --> 00:38:13,280
specifically.net the net framework and

1099
00:38:13,280 --> 00:38:16,000
dot net core if you return kerberos as

1100
00:38:16,000 --> 00:38:18,720
your your type even the rfc says you

1101
00:38:18,720 --> 00:38:20,880
only use negotiate or at best you use

1102
00:38:20,880 --> 00:38:22,160
ntlm

1103
00:38:22,160 --> 00:38:23,920
for that framework if you return

1104
00:38:23,920 --> 00:38:26,480
kerberos it will just use plain kerberos

1105
00:38:26,480 --> 00:38:28,079
and that means you never get the

1106
00:38:28,079 --> 00:38:31,040
integrity checking turned on

1107
00:38:31,040 --> 00:38:33,280
for dot net core there's an even funkier

1108
00:38:33,280 --> 00:38:36,160
implementation trick

1109
00:38:36,160 --> 00:38:37,599
even though it's not explicitly

1110
00:38:37,599 --> 00:38:40,040
specified there is actually a

1111
00:38:40,040 --> 00:38:42,960
undocumented um thing that if when you

1112
00:38:42,960 --> 00:38:44,800
connect when you call initialize

1113
00:38:44,800 --> 00:38:47,040
security context you can pass it an

1114
00:38:47,040 --> 00:38:49,760
initial token so even though kerberos

1115
00:38:49,760 --> 00:38:51,040
doesn't usually work like that or

1116
00:38:51,040 --> 00:38:53,200
negotiate doesn't tend to work like that

1117
00:38:53,200 --> 00:38:55,520
you can pass this an initial token and

1118
00:38:55,520 --> 00:38:58,000
if that initial token looks like a

1119
00:38:58,000 --> 00:38:59,440
kerberos token

1120
00:38:59,440 --> 00:39:01,680
and like literally it checks for three

1121
00:39:01,680 --> 00:39:03,040
different bytes

1122
00:39:03,040 --> 00:39:04,640
if it looks like a kerberos token it

1123
00:39:04,640 --> 00:39:06,000
goes oh

1124
00:39:06,000 --> 00:39:07,839
this this

1125
00:39:07,839 --> 00:39:10,079
target is actually speaking kerberos to

1126
00:39:10,079 --> 00:39:12,800
me so instead what i'm gonna do

1127
00:39:12,800 --> 00:39:14,960
is just disable negotiate entirely and

1128
00:39:14,960 --> 00:39:17,280
go straight to kerberos and again that

1129
00:39:17,280 --> 00:39:19,839
would disable integrity checking now

1130
00:39:19,839 --> 00:39:22,000
only.net core as far as i was aware

1131
00:39:22,000 --> 00:39:24,640
actually uses that value and puts it

1132
00:39:24,640 --> 00:39:25,920
straight into initialized security

1133
00:39:25,920 --> 00:39:28,240
context but it's still a kind of a funky

1134
00:39:28,240 --> 00:39:29,760
thing and you can do the same with ntlm

1135
00:39:29,760 --> 00:39:30,800
as well

1136
00:39:30,800 --> 00:39:32,960
which is kind of fun

1137
00:39:32,960 --> 00:39:34,960
so the results of of http because i

1138
00:39:34,960 --> 00:39:37,359
tried to do a broad spectrum here

1139
00:39:37,359 --> 00:39:39,520
things like firefox had the same sort of

1140
00:39:39,520 --> 00:39:41,680
issues as chromium the key difference

1141
00:39:41,680 --> 00:39:44,560
with firefox is firefox never enables

1142
00:39:44,560 --> 00:39:46,000
windows authentication by default

1143
00:39:46,000 --> 00:39:48,880
anymore like even with an undotted name

1144
00:39:48,880 --> 00:39:50,880
a default installation of firefox will

1145
00:39:50,880 --> 00:39:54,480
not do uh windows authentication to

1146
00:39:54,480 --> 00:39:56,960
an arbitrary server which is good

1147
00:39:56,960 --> 00:39:58,480
but the ones i've highlighted.net

1148
00:39:58,480 --> 00:40:00,240
framework and dotnet five are probably

1149
00:40:00,240 --> 00:40:02,560
the most abusable

1150
00:40:02,560 --> 00:40:06,160
http clients out of the lot i looked at

1151
00:40:06,160 --> 00:40:07,359
um

1152
00:40:07,359 --> 00:40:09,040
and there's also the delegation column

1153
00:40:09,040 --> 00:40:11,119
and this is like do we turn on the flag

1154
00:40:11,119 --> 00:40:12,880
which enables kerberos delegation that

1155
00:40:12,880 --> 00:40:14,640
will become important for for something

1156
00:40:14,640 --> 00:40:15,599
at the end

1157
00:40:15,599 --> 00:40:17,760
interestingly.net six the code for dot

1158
00:40:17,760 --> 00:40:19,280
six is not that different from dot net

1159
00:40:19,280 --> 00:40:21,760
five but it will can't you cannot

1160
00:40:21,760 --> 00:40:25,599
disable integrity and that's because um

1161
00:40:25,599 --> 00:40:28,560
the x6 code base added the integrity

1162
00:40:28,560 --> 00:40:32,400
flag to the sspi call because it was not

1163
00:40:32,400 --> 00:40:34,160
because they thought hey we need to work

1164
00:40:34,160 --> 00:40:36,800
around anti like ntlm relay or anything

1165
00:40:36,800 --> 00:40:39,680
like that it was actually because uh mac

1166
00:40:39,680 --> 00:40:41,280
the macos implementation of anti-land

1167
00:40:41,280 --> 00:40:42,640
was so broken

1168
00:40:42,640 --> 00:40:44,319
that they needed to set this flag

1169
00:40:44,319 --> 00:40:46,560
otherwise it blew up

1170
00:40:46,560 --> 00:40:48,480
so it's all matt it's all apple's fault

1171
00:40:48,480 --> 00:40:49,680
for uh

1172
00:40:49,680 --> 00:40:53,839
breaking.net six but anyway

1173
00:40:54,079 --> 00:40:57,839
so we can demo that um

1174
00:40:57,839 --> 00:41:00,720
so in this particular case

1175
00:41:00,720 --> 00:41:03,839
i've got oops

1176
00:41:03,839 --> 00:41:07,040
i've got my

1177
00:41:07,040 --> 00:41:09,599
my attacker box sitting there with my

1178
00:41:09,599 --> 00:41:13,280
own custom llmr

1179
00:41:13,760 --> 00:41:15,040
server on it

1180
00:41:15,040 --> 00:41:18,160
and that's running on 10080

1181
00:41:18,160 --> 00:41:20,880
which have become important so

1182
00:41:20,880 --> 00:41:23,200
and i've got a uh just a simple web

1183
00:41:23,200 --> 00:41:25,119
server on my domain controller which is

1184
00:41:25,119 --> 00:41:27,119
just allows me to just basically print

1185
00:41:27,119 --> 00:41:29,440
the authentication details

1186
00:41:29,440 --> 00:41:31,839
um that the user is

1187
00:41:31,839 --> 00:41:35,680
um has provided um

1188
00:41:35,680 --> 00:41:38,000
and the thing to bear in mind here is of

1189
00:41:38,000 --> 00:41:40,640
course it it tells you what

1190
00:41:40,640 --> 00:41:41,760
um

1191
00:41:41,760 --> 00:41:43,680
who connected to me so in this case on

1192
00:41:43,680 --> 00:41:46,640
my on my i am on my client machine so

1193
00:41:46,640 --> 00:41:49,520
it's of course 100 102 has is the one

1194
00:41:49,520 --> 00:41:52,240
which connected

1195
00:41:52,319 --> 00:41:53,680
now

1196
00:41:53,680 --> 00:41:55,359
in order to demonstrate wininet it's

1197
00:41:55,359 --> 00:41:56,880
kind of difficult on windows 11 because

1198
00:41:56,880 --> 00:41:58,800
they've removed the front end for

1199
00:41:58,800 --> 00:42:00,480
internet explorer but actually the

1200
00:42:00,480 --> 00:42:02,480
actual back end for internet explorer is

1201
00:42:02,480 --> 00:42:04,560
still there and so what i've done here

1202
00:42:04,560 --> 00:42:07,839
is i've turned on um

1203
00:42:08,560 --> 00:42:09,599
see it

1204
00:42:09,599 --> 00:42:11,040
if you see in the background something's

1205
00:42:11,040 --> 00:42:12,319
already tried to authenticate to my

1206
00:42:12,319 --> 00:42:14,079
server like before i even typed evil

1207
00:42:14,079 --> 00:42:15,520
host it's already actually tried to make

1208
00:42:15,520 --> 00:42:18,160
an authentication scheme to it so i use

1209
00:42:18,160 --> 00:42:20,319
internet explorer mode in edge to

1210
00:42:20,319 --> 00:42:24,480
actually host internet explorer inside

1211
00:42:24,640 --> 00:42:26,240
inside edge itself

1212
00:42:26,240 --> 00:42:27,440
but crucially here we've fully

1213
00:42:27,440 --> 00:42:29,599
authenticated using kerberos

1214
00:42:29,599 --> 00:42:32,640
and we're actually coming from 10080

1215
00:42:32,640 --> 00:42:34,400
so of course we've managed to relay our

1216
00:42:34,400 --> 00:42:37,920
traffic through my my linux box to the

1217
00:42:37,920 --> 00:42:41,280
actual target server

1218
00:42:42,319 --> 00:42:46,079
we can also um

1219
00:42:46,079 --> 00:42:48,720
just run a simple http request just to

1220
00:42:48,720 --> 00:42:50,720
demonstrate the sort of dotnet framework

1221
00:42:50,720 --> 00:42:52,319
stuff um

1222
00:42:52,319 --> 00:42:55,760
i'll just clear that so you can see it

1223
00:42:55,760 --> 00:42:57,599
so http request

1224
00:42:57,599 --> 00:43:00,079
we got an evil host and then we give it

1225
00:43:00,079 --> 00:43:01,040
just a

1226
00:43:01,040 --> 00:43:02,319
parameter of

1227
00:43:02,319 --> 00:43:03,280
please

1228
00:43:03,280 --> 00:43:05,280
use the kerberos authentication protocol

1229
00:43:05,280 --> 00:43:06,800
please

1230
00:43:06,800 --> 00:43:09,599
and hopefully it goes back and

1231
00:43:09,599 --> 00:43:10,960
if you look on

1232
00:43:10,960 --> 00:43:13,760
edge or explorer you see the integrity

1233
00:43:13,760 --> 00:43:15,119
flag is set

1234
00:43:15,119 --> 00:43:16,319
um

1235
00:43:16,319 --> 00:43:17,599
but if we look at

1236
00:43:17,599 --> 00:43:19,040
dotnet framework

1237
00:43:19,040 --> 00:43:20,079
um

1238
00:43:20,079 --> 00:43:21,200
in here

1239
00:43:21,200 --> 00:43:23,280
the integrity flag is not set and so

1240
00:43:23,280 --> 00:43:24,960
again this can now be much more

1241
00:43:24,960 --> 00:43:27,839
relayable

1242
00:43:33,280 --> 00:43:34,480
so

1243
00:43:34,480 --> 00:43:36,079
i obviously looked at various different

1244
00:43:36,079 --> 00:43:38,560
protocols and one of them would be hey i

1245
00:43:38,560 --> 00:43:41,440
really want to be able to relay from smb

1246
00:43:41,440 --> 00:43:44,400
because smb is like just basically get

1247
00:43:44,400 --> 00:43:46,000
if you can find something which will

1248
00:43:46,000 --> 00:43:49,920
open um a file rbg file path then you

1249
00:43:49,920 --> 00:43:52,480
can point it at a arbitrary s b server

1250
00:43:52,480 --> 00:43:53,839
and potentially steal it and this is

1251
00:43:53,839 --> 00:43:55,839
used for things like the active

1252
00:43:55,839 --> 00:43:57,200
directory certificate service trick it

1253
00:43:57,200 --> 00:44:00,400
was um a technique called pettipottam

1254
00:44:00,400 --> 00:44:03,119
which used the ability to

1255
00:44:03,119 --> 00:44:05,599
generate smb traffic or potentially web

1256
00:44:05,599 --> 00:44:07,839
dev traffic and relay the authentication

1257
00:44:07,839 --> 00:44:09,280
scheme from that

1258
00:44:09,280 --> 00:44:10,640
unfortunately

1259
00:44:10,640 --> 00:44:13,599
after much much research into the s b

1260
00:44:13,599 --> 00:44:14,560
client

1261
00:44:14,560 --> 00:44:16,160
on windows

1262
00:44:16,160 --> 00:44:18,240
i just could not get something to work

1263
00:44:18,240 --> 00:44:20,240
there seems to be some weird behaviors

1264
00:44:20,240 --> 00:44:21,359
especially around things like

1265
00:44:21,359 --> 00:44:24,079
distributed file system or dfs

1266
00:44:24,079 --> 00:44:26,000
but whatever i tried

1267
00:44:26,000 --> 00:44:28,960
i just could not get it to work

1268
00:44:28,960 --> 00:44:31,440
however i did notice something weird

1269
00:44:31,440 --> 00:44:33,839
when i was actually

1270
00:44:33,839 --> 00:44:36,720
debugging this this process

1271
00:44:36,720 --> 00:44:39,119
now if you look at the the kernel client

1272
00:44:39,119 --> 00:44:40,720
you'll see a function

1273
00:44:40,720 --> 00:44:42,880
literally called build spn

1274
00:44:42,880 --> 00:44:46,000
and inside there it calls this sec make

1275
00:44:46,000 --> 00:44:48,640
spn ex2 function this is like the

1276
00:44:48,640 --> 00:44:50,960
perfect microsoft named function right

1277
00:44:50,960 --> 00:44:53,680
it's not just an ex function it's ex2

1278
00:44:53,680 --> 00:44:57,118
because it's even more improved

1279
00:44:57,680 --> 00:44:58,640
but

1280
00:44:58,640 --> 00:45:01,520
you think well this is just basically a

1281
00:45:01,520 --> 00:45:04,160
mechanism to concatenate string together

1282
00:45:04,160 --> 00:45:05,280
so

1283
00:45:05,280 --> 00:45:07,920
big deal right setting the cfs service

1284
00:45:07,920 --> 00:45:11,119
name which is just cifs for smb and it's

1285
00:45:11,119 --> 00:45:12,880
selling the host name

1286
00:45:12,880 --> 00:45:14,880
big deal who cares

1287
00:45:14,880 --> 00:45:17,599
well if you actually look at what

1288
00:45:17,599 --> 00:45:19,599
is returned by this api

1289
00:45:19,599 --> 00:45:21,599
it looks like that

1290
00:45:21,599 --> 00:45:23,839
now that looks weird

1291
00:45:23,839 --> 00:45:25,760
it's the best way of putting it it has

1292
00:45:25,760 --> 00:45:27,680
at the front of that string

1293
00:45:27,680 --> 00:45:30,960
what looks to be a normal spn

1294
00:45:30,960 --> 00:45:34,000
then it has all this crap after it

1295
00:45:34,000 --> 00:45:35,040
and

1296
00:45:35,040 --> 00:45:36,560
that seemed odd

1297
00:45:36,560 --> 00:45:38,560
and i thought well okay maybe it's just

1298
00:45:38,560 --> 00:45:40,400
some special kernel thing right like

1299
00:45:40,400 --> 00:45:42,480
kernel's weird it does some weird

1300
00:45:42,480 --> 00:45:44,720
sometimes

1301
00:45:44,720 --> 00:45:46,720
but i actually plugged in that string

1302
00:45:46,720 --> 00:45:50,160
into like the user mode sspi interface

1303
00:45:50,160 --> 00:45:52,720
and it authenticated generated kerberos

1304
00:45:52,720 --> 00:45:56,400
authentication for cifs file server

1305
00:45:56,400 --> 00:45:57,520
huh

1306
00:45:57,520 --> 00:46:00,480
that's weird right

1307
00:46:00,640 --> 00:46:02,960
i actually tracked it down eventually to

1308
00:46:02,960 --> 00:46:05,680
code inside the local security authority

1309
00:46:05,680 --> 00:46:07,599
process itself

1310
00:46:07,599 --> 00:46:09,440
specifically so this would work this

1311
00:46:09,440 --> 00:46:11,520
isn't specific to kerberos this works

1312
00:46:11,520 --> 00:46:15,040
across basically any um

1313
00:46:15,040 --> 00:46:17,359
any authentication protocol that it uses

1314
00:46:17,359 --> 00:46:19,280
it looks at the target name and then

1315
00:46:19,280 --> 00:46:21,200
passes that target name to this cred

1316
00:46:21,200 --> 00:46:24,319
unmarshall target info function

1317
00:46:24,319 --> 00:46:26,960
and what this does is it looks for that

1318
00:46:26,960 --> 00:46:29,839
that garbage at the end of the string is

1319
00:46:29,839 --> 00:46:31,520
this martial target info and it's

1320
00:46:31,520 --> 00:46:34,720
basically it seems to me like someone in

1321
00:46:34,720 --> 00:46:36,560
the development team decided to try and

1322
00:46:36,560 --> 00:46:38,240
violate some layers and they really

1323
00:46:38,240 --> 00:46:39,760
didn't want to have to plumb in the the

1324
00:46:39,760 --> 00:46:42,400
code to get some piece of information

1325
00:46:42,400 --> 00:46:44,560
from the app the smb client to somewhere

1326
00:46:44,560 --> 00:46:46,720
else in the system so instead what they

1327
00:46:46,720 --> 00:46:47,520
did

1328
00:46:47,520 --> 00:46:50,480
was they hacked lsa to basically create

1329
00:46:50,480 --> 00:46:51,920
like a back door

1330
00:46:51,920 --> 00:46:54,720
of a fashion it's not really a backdoor

1331
00:46:54,720 --> 00:46:57,359
but if if that data at the end of the

1332
00:46:57,359 --> 00:47:00,160
string is a valid target info buffer

1333
00:47:00,160 --> 00:47:02,640
then it's going to subtract all of that

1334
00:47:02,640 --> 00:47:04,319
from the target info

1335
00:47:04,319 --> 00:47:06,640
from the from the target name

1336
00:47:06,640 --> 00:47:08,839
and so you end up once it gets to

1337
00:47:08,839 --> 00:47:12,319
kerberos that garbage string has turned

1338
00:47:12,319 --> 00:47:15,839
into the spn you were expecting

1339
00:47:15,839 --> 00:47:17,839
and you may think

1340
00:47:17,839 --> 00:47:19,760
so what well

1341
00:47:19,760 --> 00:47:21,920
so what is of course

1342
00:47:21,920 --> 00:47:24,480
that string is a clearly file server

1343
00:47:24,480 --> 00:47:26,720
with garbage at the end of it from a dns

1344
00:47:26,720 --> 00:47:28,720
perspective is not the same as file

1345
00:47:28,720 --> 00:47:31,200
server with no garbage at the end of it

1346
00:47:31,200 --> 00:47:32,400
and while i might not be able to

1347
00:47:32,400 --> 00:47:34,400
compromise the dns record for file

1348
00:47:34,400 --> 00:47:37,359
server i can almost certainly in add a

1349
00:47:37,359 --> 00:47:39,599
dns record for file server with garbage

1350
00:47:39,599 --> 00:47:41,599
at the end of it

1351
00:47:41,599 --> 00:47:45,520
so we can do a very quick demo of that

1352
00:47:46,240 --> 00:47:48,399
so

1353
00:47:48,559 --> 00:47:50,400
on my linux box again

1354
00:47:50,400 --> 00:47:53,520
go away thank you

1355
00:47:53,520 --> 00:47:55,280
on my linux box i've just got a socat

1356
00:47:55,280 --> 00:47:56,400
listener

1357
00:47:56,400 --> 00:47:57,359
it's

1358
00:47:57,359 --> 00:48:00,240
uh listing on 3389 which is the rdp port

1359
00:48:00,240 --> 00:48:01,680
and then it's just forwarding onto

1360
00:48:01,680 --> 00:48:05,760
server 2022 domain.local on its rpc port

1361
00:48:05,760 --> 00:48:08,240
so if i create

1362
00:48:08,240 --> 00:48:10,040
remote desktop if i try and connect to

1363
00:48:10,040 --> 00:48:12,240
linux.main.local which is my my linux

1364
00:48:12,240 --> 00:48:13,359
box

1365
00:48:13,359 --> 00:48:15,920
um we can see traffic going through it

1366
00:48:15,920 --> 00:48:16,880
um

1367
00:48:16,880 --> 00:48:20,640
and just to be double check we

1368
00:48:20,640 --> 00:48:23,119
try and log in as an administrator

1369
00:48:23,119 --> 00:48:25,040
and it says authentication error occurs

1370
00:48:25,040 --> 00:48:27,359
and the reason this is failing is

1371
00:48:27,359 --> 00:48:29,520
for the most part because i've disabled

1372
00:48:29,520 --> 00:48:32,800
ntlm on my network so it will kind of

1373
00:48:32,800 --> 00:48:34,880
work with ntlm but because i've disabled

1374
00:48:34,880 --> 00:48:37,359
ntlm it just goes no but we can see it

1375
00:48:37,359 --> 00:48:39,440
has actually traversed our our server

1376
00:48:39,440 --> 00:48:41,520
right

1377
00:48:41,520 --> 00:48:43,119
however if i

1378
00:48:43,119 --> 00:48:46,000
choose my nicely registered

1379
00:48:46,000 --> 00:48:47,359
server name

1380
00:48:47,359 --> 00:48:48,480
like

1381
00:48:48,480 --> 00:48:50,079
if people don't believe me

1382
00:48:50,079 --> 00:48:52,960
i can do resolve

1383
00:48:53,760 --> 00:48:55,680
resolve dns

1384
00:48:55,680 --> 00:48:59,200
and then give it that

1385
00:48:59,520 --> 00:49:02,559
we have our name with garbage

1386
00:49:02,559 --> 00:49:04,880
oops

1387
00:49:05,839 --> 00:49:07,599
hey we're back

1388
00:49:07,599 --> 00:49:09,440
um

1389
00:49:09,440 --> 00:49:10,800
i don't know whether that's a sign that

1390
00:49:10,800 --> 00:49:12,079
i should get off the stage or something

1391
00:49:12,079 --> 00:49:15,280
i don't know flashing the lights at me

1392
00:49:15,280 --> 00:49:17,520
parties i ever go home anyway

1393
00:49:17,520 --> 00:49:18,800
you can just probably see at the end

1394
00:49:18,800 --> 00:49:21,119
that the ip address is actually 10080

1395
00:49:21,119 --> 00:49:23,520
which is actually my linux box

1396
00:49:23,520 --> 00:49:26,720
and so if we choose that instead

1397
00:49:26,720 --> 00:49:28,960
and try and connect and of course

1398
00:49:28,960 --> 00:49:32,160
give it the correct credentials

1399
00:49:32,160 --> 00:49:33,760
hopefully

1400
00:49:33,760 --> 00:49:36,240
it takes a little bit of time

1401
00:49:36,240 --> 00:49:37,599
we should see

1402
00:49:37,599 --> 00:49:40,400
traffic going through

1403
00:49:40,400 --> 00:49:42,640
and we've authenticated to our server

1404
00:49:42,640 --> 00:49:45,359
and we basically spoof the spn through

1405
00:49:45,359 --> 00:49:48,880
through doing that operation

1406
00:49:49,520 --> 00:49:51,359
okay

1407
00:49:51,359 --> 00:49:53,119
now of course what you can do with that

1408
00:49:53,119 --> 00:49:56,640
is this opens debate but anyway

1409
00:49:56,960 --> 00:49:59,760
so the final thing i want to talk about

1410
00:49:59,760 --> 00:50:02,640
is the kerberos ticket laundry

1411
00:50:02,640 --> 00:50:04,879
now

1412
00:50:05,680 --> 00:50:07,280
i've i've already mentioned that one of

1413
00:50:07,280 --> 00:50:10,559
the problems of a lot of this is if the

1414
00:50:10,559 --> 00:50:12,160
client for example enables integrity

1415
00:50:12,160 --> 00:50:14,079
checking or

1416
00:50:14,079 --> 00:50:16,160
encryption then certain services like

1417
00:50:16,160 --> 00:50:18,000
ldap will just

1418
00:50:18,000 --> 00:50:20,319
will force that on you and of course if

1419
00:50:20,319 --> 00:50:21,839
it forces it on you

1420
00:50:21,839 --> 00:50:23,920
then you can't relay your authentication

1421
00:50:23,920 --> 00:50:26,240
traffic to those servers

1422
00:50:26,240 --> 00:50:28,880
and that's kind of a problem

1423
00:50:28,880 --> 00:50:30,720
the same things like smb and all that

1424
00:50:30,720 --> 00:50:32,800
sort of stuff they have very similar

1425
00:50:32,800 --> 00:50:36,400
similar features so i thought well

1426
00:50:36,400 --> 00:50:38,400
is there at least a scenario

1427
00:50:38,400 --> 00:50:40,319
where

1428
00:50:40,319 --> 00:50:43,280
i can get potentially bad

1429
00:50:43,280 --> 00:50:46,079
kerberos reliable traffic and make it

1430
00:50:46,079 --> 00:50:50,079
good again launder it somehow between

1431
00:50:50,079 --> 00:50:53,599
my client my attacker box and the actual

1432
00:50:53,599 --> 00:50:55,920
target destination server

1433
00:50:55,920 --> 00:50:58,880
in certain limited scenarios yes

1434
00:50:58,880 --> 00:51:00,800
so

1435
00:51:00,800 --> 00:51:02,319
we have a client

1436
00:51:02,319 --> 00:51:05,280
and it's trying like we convinced it to

1437
00:51:05,280 --> 00:51:07,520
to it's trying to connect to the laundry

1438
00:51:07,520 --> 00:51:09,520
server somewhere

1439
00:51:09,520 --> 00:51:11,359
now

1440
00:51:11,359 --> 00:51:14,000
crucially the laundry server

1441
00:51:14,000 --> 00:51:17,119
has unconstrained delegation enabled

1442
00:51:17,119 --> 00:51:20,000
and what this means is that as long as

1443
00:51:20,000 --> 00:51:21,520
the authentication on the client

1444
00:51:21,520 --> 00:51:23,760
specifies the delegation parameter it

1445
00:51:23,760 --> 00:51:27,280
will allow laundry to pretend to be

1446
00:51:27,280 --> 00:51:30,800
the client user itself

1447
00:51:30,800 --> 00:51:31,599
but

1448
00:51:31,599 --> 00:51:34,000
so we relay the traffic from the client

1449
00:51:34,000 --> 00:51:37,119
to laundry via evil host now hopefully

1450
00:51:37,119 --> 00:51:39,839
what we need to find on laundry is some

1451
00:51:39,839 --> 00:51:43,839
sort of service which doesn't care about

1452
00:51:43,839 --> 00:51:44,800
the

1453
00:51:44,800 --> 00:51:46,720
signing or encryption

1454
00:51:46,720 --> 00:51:48,720
value of the authentication scheme

1455
00:51:48,720 --> 00:51:51,119
but crucially will give us some sort of

1456
00:51:51,119 --> 00:51:53,680
primitive to connect to say a file

1457
00:51:53,680 --> 00:51:56,480
server over smb which would require it

1458
00:51:56,480 --> 00:51:59,040
and because once it gets to laundry it

1459
00:51:59,040 --> 00:52:00,800
can generate its own signing keys and

1460
00:52:00,800 --> 00:52:02,319
all that sort of stuff

1461
00:52:02,319 --> 00:52:04,960
we can use that as a way of laundering

1462
00:52:04,960 --> 00:52:07,520
those kerberos tickets to our delegated

1463
00:52:07,520 --> 00:52:09,520
authentication on file server

1464
00:52:09,520 --> 00:52:11,839
now you may think this is so

1465
00:52:11,839 --> 00:52:13,520
hypothetical this is

1466
00:52:13,520 --> 00:52:15,760
utter rubbish right you never find a

1467
00:52:15,760 --> 00:52:18,800
service which implements this so i did

1468
00:52:18,800 --> 00:52:22,319
find a service which implements this

1469
00:52:22,319 --> 00:52:23,599
if you know what

1470
00:52:23,599 --> 00:52:25,760
petty pottam is it's exactly the same

1471
00:52:25,760 --> 00:52:29,520
service the essrpc service and crucially

1472
00:52:29,520 --> 00:52:31,599
in a standard domain environment all

1473
00:52:31,599 --> 00:52:33,359
domain controllers

1474
00:52:33,359 --> 00:52:35,440
have unconstrained delegation enabled on

1475
00:52:35,440 --> 00:52:39,040
them so not only is efs rpc enabled not

1476
00:52:39,040 --> 00:52:42,319
only does efs rpc not require signing or

1477
00:52:42,319 --> 00:52:45,200
encryption for your rpc protocol

1478
00:52:45,200 --> 00:52:46,960
it also allows you to connect to

1479
00:52:46,960 --> 00:52:49,440
arbitrary s b servers and write files to

1480
00:52:49,440 --> 00:52:51,119
them

1481
00:52:51,119 --> 00:52:52,480
that's kind of a useful primitive

1482
00:52:52,480 --> 00:52:54,800
unfortunately they fixed that but yeah

1483
00:52:54,800 --> 00:52:57,119
you can't have everything um i shouldn't

1484
00:52:57,119 --> 00:52:58,400
if if you don't want them to fix

1485
00:52:58,400 --> 00:53:00,000
something you don't tell them about it

1486
00:53:00,000 --> 00:53:02,480
in the first place

1487
00:53:02,480 --> 00:53:04,000
so we just have a very quick demo of

1488
00:53:04,000 --> 00:53:05,359
that

1489
00:53:05,359 --> 00:53:07,040
and they'll also demos hopefully

1490
00:53:07,040 --> 00:53:08,880
demonstrate something

1491
00:53:08,880 --> 00:53:11,440
also separately interesting

1492
00:53:11,440 --> 00:53:12,800
so i have a

1493
00:53:12,800 --> 00:53:14,960
network share somewhere

1494
00:53:14,960 --> 00:53:18,160
on server 2022

1495
00:53:18,160 --> 00:53:20,240
and of course if i relay to this it's

1496
00:53:20,240 --> 00:53:22,000
got signing and encryption turned on i

1497
00:53:22,000 --> 00:53:23,359
would not actually be able to relay

1498
00:53:23,359 --> 00:53:24,960
kerberos authentication to this because

1499
00:53:24,960 --> 00:53:26,079
i wouldn't know the signing in

1500
00:53:26,079 --> 00:53:27,680
encryption

1501
00:53:27,680 --> 00:53:30,240
however someone an admirer has sent me a

1502
00:53:30,240 --> 00:53:31,520
document

1503
00:53:31,520 --> 00:53:32,720
um

1504
00:53:32,720 --> 00:53:34,079
unfortunately you can't read that very

1505
00:53:34,079 --> 00:53:36,079
well but they've sent me a document say

1506
00:53:36,079 --> 00:53:37,920
hey just open open this word document

1507
00:53:37,920 --> 00:53:40,880
can you because i really love you

1508
00:53:40,880 --> 00:53:42,720
um

1509
00:53:42,720 --> 00:53:45,119
so we opened that document oh it's a

1510
00:53:45,119 --> 00:53:47,280
nice valentine's day card it's a bit

1511
00:53:47,280 --> 00:53:49,520
it's designed for printing of course so

1512
00:53:49,520 --> 00:53:51,920
uh it obviously doesn't not a major

1513
00:53:51,920 --> 00:53:53,440
problem

1514
00:53:53,440 --> 00:53:54,839
um but

1515
00:53:54,839 --> 00:53:58,000
hopefully we now have a file on our

1516
00:53:58,000 --> 00:54:00,640
server that's kind of weird

1517
00:54:00,640 --> 00:54:04,000
and the file has come from 10080 which

1518
00:54:04,000 --> 00:54:06,880
is my malicious and in the middle box

1519
00:54:06,880 --> 00:54:08,960
and what that's doing is

1520
00:54:08,960 --> 00:54:12,720
you can specify a http url for a

1521
00:54:12,720 --> 00:54:14,720
word document template file

1522
00:54:14,720 --> 00:54:16,319
and you can get it to do automatic

1523
00:54:16,319 --> 00:54:18,160
windows authentication to an arbitrary

1524
00:54:18,160 --> 00:54:20,240
server on the local system just by

1525
00:54:20,240 --> 00:54:22,559
opening and as as you can see there was

1526
00:54:22,559 --> 00:54:24,640
no indication that that was happening on

1527
00:54:24,640 --> 00:54:26,640
behind the scenes other than if you

1528
00:54:26,640 --> 00:54:28,640
don't run the uh the web server it tends

1529
00:54:28,640 --> 00:54:30,400
to hang a bit they they tend to notice

1530
00:54:30,400 --> 00:54:31,680
at that point

1531
00:54:31,680 --> 00:54:34,720
that's kind of interesting

1532
00:54:35,599 --> 00:54:38,799
so to conclude uh there's plenty of

1533
00:54:38,799 --> 00:54:40,400
scope here if people want to go looking

1534
00:54:40,400 --> 00:54:42,400
at what other protocols do and i'm not

1535
00:54:42,400 --> 00:54:43,920
saying that what i've found is

1536
00:54:43,920 --> 00:54:45,520
necessarily the only way of exploiting

1537
00:54:45,520 --> 00:54:47,680
that like when i net maybe there's a way

1538
00:54:47,680 --> 00:54:49,920
of abusing that sort of dns like

1539
00:54:49,920 --> 00:54:51,599
multi-dns trick or something like that

1540
00:54:51,599 --> 00:54:52,799
maybe there's a way for the code there's

1541
00:54:52,799 --> 00:54:55,440
a lot of complex code in there um

1542
00:54:55,440 --> 00:54:58,079
rdp i only really looked at it for that

1543
00:54:58,079 --> 00:55:00,480
that cheap demo that i just had winrm

1544
00:55:00,480 --> 00:55:02,160
negotiate stream

1545
00:55:02,160 --> 00:55:03,920
i also not really looked at

1546
00:55:03,920 --> 00:55:06,480
non-microsoft code how they use it

1547
00:55:06,480 --> 00:55:09,520
i kind of looked a bit at java and i

1548
00:55:09,520 --> 00:55:11,760
gave up after like

1549
00:55:11,760 --> 00:55:13,200
reading various things about how to

1550
00:55:13,200 --> 00:55:15,280
enable kerberos in java and like you

1551
00:55:15,280 --> 00:55:17,440
need it basically never worked so i just

1552
00:55:17,440 --> 00:55:19,280
gave up

1553
00:55:19,280 --> 00:55:22,319
as everyone should do with java but

1554
00:55:22,319 --> 00:55:23,680
um

1555
00:55:23,680 --> 00:55:25,280
i've also not looked at interactions

1556
00:55:25,280 --> 00:55:28,400
like how how applicable is this to linux

1557
00:55:28,400 --> 00:55:32,000
machines with gss api usage of kerberos

1558
00:55:32,000 --> 00:55:33,040
for example

1559
00:55:33,040 --> 00:55:34,799
i don't know

1560
00:55:34,799 --> 00:55:36,319
so there are things some administrators

1561
00:55:36,319 --> 00:55:38,079
can do of course they can

1562
00:55:38,079 --> 00:55:40,079
like disable things like link local name

1563
00:55:40,079 --> 00:55:41,760
resolution because that's just

1564
00:55:41,760 --> 00:55:43,680
that's has all manner of bad regardless

1565
00:55:43,680 --> 00:55:45,200
of whether you could abuse kerberos on

1566
00:55:45,200 --> 00:55:46,000
it

1567
00:55:46,000 --> 00:55:47,760
locking down your dns server to prevent

1568
00:55:47,760 --> 00:55:50,160
users modifying adding new arbitrary

1569
00:55:50,160 --> 00:55:52,640
records to it

1570
00:55:52,640 --> 00:55:54,400
disabling windows authentication

1571
00:55:54,400 --> 00:55:56,160
endpoints or if you're going to have

1572
00:55:56,160 --> 00:55:58,559
them turn on https with the extended

1573
00:55:58,559 --> 00:56:00,559
protection for authentication

1574
00:56:00,559 --> 00:56:01,920
and also you can do things like

1575
00:56:01,920 --> 00:56:03,760
disabling the cname dns lookup in

1576
00:56:03,760 --> 00:56:06,480
chromium browsers but fundamentally much

1577
00:56:06,480 --> 00:56:08,480
as i'd like to say that oh the world's

1578
00:56:08,480 --> 00:56:10,079
falling down kerberos is just as broken

1579
00:56:10,079 --> 00:56:12,799
as ntlm fortunately it's all shades of

1580
00:56:12,799 --> 00:56:16,160
grey like it's not quite as bad as nt-11

1581
00:56:16,160 --> 00:56:18,559
so disabling ncln is still still a

1582
00:56:18,559 --> 00:56:22,319
useful thing in a windows environment

1583
00:56:22,319 --> 00:56:24,559
so thanks to the various people who've

1584
00:56:24,559 --> 00:56:26,720
uh inspired me on some of this research

1585
00:56:26,720 --> 00:56:28,240
as i've been going through and doing

1586
00:56:28,240 --> 00:56:30,160
tools and thanks to defensive con and

1587
00:56:30,160 --> 00:56:32,079
the attendees here for for having me and

1588
00:56:32,079 --> 00:56:33,680
it's been

1589
00:56:33,680 --> 00:56:35,760
good too good to give my my

1590
00:56:35,760 --> 00:56:37,680
demonstrations to to all of you so thank

1591
00:56:37,680 --> 00:56:39,240
you very much

1592
00:56:39,240 --> 00:56:43,899
[Applause]

1593
00:56:48,160 --> 00:56:50,240
you

