1
00:00:01,280 --> 00:00:02,639
um all right everyone welcome to

2
00:00:02,639 --> 00:00:05,200
offensive con uh welcome to my keynote

3
00:00:05,200 --> 00:00:07,600
which i've decided to call rules to hack

4
00:00:07,600 --> 00:00:08,400
by

5
00:00:08,400 --> 00:00:11,360
and my name is mark dowd i'm on twitter

6
00:00:11,360 --> 00:00:14,160
um so any comments or um

7
00:00:14,160 --> 00:00:17,920
follow up you can you can um dm me there

8
00:00:17,920 --> 00:00:19,279
um so

9
00:00:19,279 --> 00:00:21,279
a little bit about this keynote

10
00:00:21,279 --> 00:00:23,600
and why i've decided to do it um so i've

11
00:00:23,600 --> 00:00:25,199
done vulnerability research for pretty

12
00:00:25,199 --> 00:00:27,279
much my whole career i started as a

13
00:00:27,279 --> 00:00:29,519
hobby and then went into it

14
00:00:29,519 --> 00:00:31,039
professionally doing releasing

15
00:00:31,039 --> 00:00:32,719
advisories and doing presentations and

16
00:00:32,719 --> 00:00:34,320
so on

17
00:00:34,320 --> 00:00:35,360
and then

18
00:00:35,360 --> 00:00:36,800
wrote a book called out of software

19
00:00:36,800 --> 00:00:38,800
security assessment on the subject

20
00:00:38,800 --> 00:00:41,280
before finally founding my own offensive

21
00:00:41,280 --> 00:00:44,000
research company azimuth which i've been

22
00:00:44,000 --> 00:00:45,920
doing for the last 12 years

23
00:00:45,920 --> 00:00:48,399
um and throughout my career the thing

24
00:00:48,399 --> 00:00:50,719
that people most often have asked me is

25
00:00:50,719 --> 00:00:52,239
how do you actually find bugs in like

26
00:00:52,239 --> 00:00:53,920
major software

27
00:00:53,920 --> 00:00:55,120
you know like we know what an integer

28
00:00:55,120 --> 00:00:56,640
overflow is we know what to use after

29
00:00:56,640 --> 00:00:59,359
freeze etc how do you actually apply

30
00:00:59,359 --> 00:01:00,800
that to

31
00:01:00,800 --> 00:01:03,359
doing real vulnerability research

32
00:01:03,359 --> 00:01:04,799
and

33
00:01:04,799 --> 00:01:06,479
it's an interesting question because

34
00:01:06,479 --> 00:01:08,640
this process doesn't actually get

35
00:01:08,640 --> 00:01:11,280
discussed very often usually you see

36
00:01:11,280 --> 00:01:12,720
presentations where they talk about a

37
00:01:12,720 --> 00:01:14,240
really cool vulnerability a really cool

38
00:01:14,240 --> 00:01:16,400
exploit or perhaps a tool related to

39
00:01:16,400 --> 00:01:17,680
those

40
00:01:17,680 --> 00:01:19,439
and it doesn't really talk about the

41
00:01:19,439 --> 00:01:21,360
process of what it's like to be a

42
00:01:21,360 --> 00:01:22,880
vulnerability researcher and what's

43
00:01:22,880 --> 00:01:24,640
actually involved in it you can learn

44
00:01:24,640 --> 00:01:26,960
the mechanics of a magic trick but it

45
00:01:26,960 --> 00:01:28,720
gives you very limited insight into how

46
00:01:28,720 --> 00:01:30,640
to be a magician

47
00:01:30,640 --> 00:01:31,680
um

48
00:01:31,680 --> 00:01:33,680
and so when i wrote out of software

49
00:01:33,680 --> 00:01:36,079
security assessment um i was trying to

50
00:01:36,079 --> 00:01:38,720
share some of this knowledge um and at

51
00:01:38,720 --> 00:01:42,000
the time i i was doing i was

52
00:01:42,000 --> 00:01:43,759
focused more on the technical aspects of

53
00:01:43,759 --> 00:01:45,280
it because there wasn't really a

54
00:01:45,280 --> 00:01:47,920
compendium of information um

55
00:01:47,920 --> 00:01:49,439
like tying together

56
00:01:49,439 --> 00:01:50,799
you know different bug classes and

57
00:01:50,799 --> 00:01:53,119
things like that so that's mostly what

58
00:01:53,119 --> 00:01:54,560
that book was

59
00:01:54,560 --> 00:01:56,159
and even though it did talk about

60
00:01:56,159 --> 00:01:57,759
methodology and things like that it was

61
00:01:57,759 --> 00:01:59,280
kind of limited

62
00:01:59,280 --> 00:02:00,159
um

63
00:02:00,159 --> 00:02:02,000
so today really

64
00:02:02,000 --> 00:02:04,079
what i want to talk about is some of the

65
00:02:04,079 --> 00:02:06,159
rules that i've

66
00:02:06,159 --> 00:02:08,720
sort of developed over over my career of

67
00:02:08,720 --> 00:02:10,720
how i do vulnerability research and

68
00:02:10,720 --> 00:02:12,800
obviously every researcher does it a

69
00:02:12,800 --> 00:02:14,000
little bit differently they have

70
00:02:14,000 --> 00:02:15,520
different procedures and techniques and

71
00:02:15,520 --> 00:02:17,440
stuff um so

72
00:02:17,440 --> 00:02:20,319
you know your style and mileage may vary

73
00:02:20,319 --> 00:02:22,239
but i know that speaking with other

74
00:02:22,239 --> 00:02:24,640
people in in the industry and within

75
00:02:24,640 --> 00:02:26,800
azimuth that um there's common elements

76
00:02:26,800 --> 00:02:29,120
that uh most successful vulnerability

77
00:02:29,120 --> 00:02:31,599
researchers sort of know but it kind of

78
00:02:31,599 --> 00:02:33,120
gets left unsaid

79
00:02:33,120 --> 00:02:34,400
and um

80
00:02:34,400 --> 00:02:36,319
so that's what i'm hoping to talk about

81
00:02:36,319 --> 00:02:37,360
today

82
00:02:37,360 --> 00:02:39,599
um it's a pretty high level presentation

83
00:02:39,599 --> 00:02:41,040
as it's a keynote so i'm not really

84
00:02:41,040 --> 00:02:43,280
going to go into too much technical

85
00:02:43,280 --> 00:02:46,480
details um and so i'm kind of hoping

86
00:02:46,480 --> 00:02:47,840
that there's something in this for

87
00:02:47,840 --> 00:02:49,200
everyone here

88
00:02:49,200 --> 00:02:50,720
first of all for non-practitioners

89
00:02:50,720 --> 00:02:52,800
they'll get an idea of you know what

90
00:02:52,800 --> 00:02:54,319
what it's like being a vulnerability

91
00:02:54,319 --> 00:02:55,599
researcher and what kind of things you

92
00:02:55,599 --> 00:02:57,280
deal with

93
00:02:57,280 --> 00:02:59,040
for juniors in the field hopefully

94
00:02:59,040 --> 00:03:01,120
there'll be some actionable advice that

95
00:03:01,120 --> 00:03:03,200
they can take away from here

96
00:03:03,200 --> 00:03:05,440
and then for senior you know senior

97
00:03:05,440 --> 00:03:07,680
researchers i think it'll be interesting

98
00:03:07,680 --> 00:03:08,959
to sort of

99
00:03:08,959 --> 00:03:11,200
compare and contrast uh some of the

100
00:03:11,200 --> 00:03:12,239
techniques

101
00:03:12,239 --> 00:03:14,959
uh here maybe you get some ideas or

102
00:03:14,959 --> 00:03:16,560
better yet um

103
00:03:16,560 --> 00:03:18,080
you know maybe you have some ideas that

104
00:03:18,080 --> 00:03:19,360
i haven't thought of and can come and

105
00:03:19,360 --> 00:03:20,560
tell me later

106
00:03:20,560 --> 00:03:22,319
um because i mean why should you guys

107
00:03:22,319 --> 00:03:23,760
get all the benefit

108
00:03:23,760 --> 00:03:27,519
um and so uh you know basically um i'm

109
00:03:27,519 --> 00:03:29,440
hoping this will encourage you know

110
00:03:29,440 --> 00:03:31,760
sharing of those other experiences from

111
00:03:31,760 --> 00:03:33,760
other researchers and you know start to

112
00:03:33,760 --> 00:03:35,200
demystify

113
00:03:35,200 --> 00:03:37,760
uh you know this this practice because a

114
00:03:37,760 --> 00:03:40,000
lot of people seem to think uh

115
00:03:40,000 --> 00:03:42,000
uh that you can either you either are a

116
00:03:42,000 --> 00:03:43,440
vulnerability researcher or you're not

117
00:03:43,440 --> 00:03:45,040
capable of it and i don't really think

118
00:03:45,040 --> 00:03:47,120
that that's true

119
00:03:47,120 --> 00:03:48,080
um

120
00:03:48,080 --> 00:03:50,159
before before i go on to talk about the

121
00:03:50,159 --> 00:03:51,760
actual auditing stuff i want to talk a

122
00:03:51,760 --> 00:03:53,760
little bit about like the temperament of

123
00:03:53,760 --> 00:03:55,680
vulnerability research and the mindset

124
00:03:55,680 --> 00:03:57,280
because i think this is one of the key

125
00:03:57,280 --> 00:03:59,360
differentiators between what makes

126
00:03:59,360 --> 00:04:00,400
someone

127
00:04:00,400 --> 00:04:01,920
good at vulnerability research and what

128
00:04:01,920 --> 00:04:04,239
makes them like burned out

129
00:04:04,239 --> 00:04:05,120
and

130
00:04:05,120 --> 00:04:07,040
horribly depressed

131
00:04:07,040 --> 00:04:08,879
so there's a couple of things i want to

132
00:04:08,879 --> 00:04:10,959
go over here

133
00:04:10,959 --> 00:04:12,080
first of all

134
00:04:12,080 --> 00:04:13,920
if we think about temperament

135
00:04:13,920 --> 00:04:15,599
it's no surprise that vulnerability

136
00:04:15,599 --> 00:04:18,160
researchers have a curious nature and

137
00:04:18,160 --> 00:04:21,358
are very detail-oriented but i think

138
00:04:21,358 --> 00:04:23,199
one of the more important things to take

139
00:04:23,199 --> 00:04:25,360
into account is um when you're doing

140
00:04:25,360 --> 00:04:26,960
vulnerability research you're constantly

141
00:04:26,960 --> 00:04:28,800
digging into code

142
00:04:28,800 --> 00:04:29,919
that is

143
00:04:29,919 --> 00:04:31,759
evidence to you that you don't really

144
00:04:31,759 --> 00:04:34,320
understand a lot of the technology

145
00:04:34,320 --> 00:04:35,759
that you think you do or you don't

146
00:04:35,759 --> 00:04:37,040
understand it quite as well as you think

147
00:04:37,040 --> 00:04:39,040
you do

148
00:04:39,040 --> 00:04:40,639
there are a few jobs

149
00:04:40,639 --> 00:04:42,160
as i put up there where it is more

150
00:04:42,160 --> 00:04:43,759
apparent that your understanding of

151
00:04:43,759 --> 00:04:46,800
technology is quite wrong um and so

152
00:04:46,800 --> 00:04:48,240
being able to take on that new

153
00:04:48,240 --> 00:04:51,040
information uh in a in a positive

154
00:04:51,040 --> 00:04:53,759
mindset um is i think what makes people

155
00:04:53,759 --> 00:04:56,080
successful and even more so um

156
00:04:56,080 --> 00:04:58,240
vulnerability research is constant is

157
00:04:58,240 --> 00:05:00,240
dealing with constant failure i know

158
00:05:00,240 --> 00:05:02,080
this sounds super bleak but um it's

159
00:05:02,080 --> 00:05:04,960
actually a pretty fun job

160
00:05:05,039 --> 00:05:06,320
and

161
00:05:06,320 --> 00:05:08,160
how you if you can deal with failure

162
00:05:08,160 --> 00:05:10,400
constructively i think

163
00:05:10,400 --> 00:05:12,880
that is basically one of the most uh key

164
00:05:12,880 --> 00:05:14,800
skills in in being a vulnerability

165
00:05:14,800 --> 00:05:16,000
researcher

166
00:05:16,000 --> 00:05:17,680
people that don't do this naturally i

167
00:05:17,680 --> 00:05:20,320
think that um by becoming aware of this

168
00:05:20,320 --> 00:05:22,000
and sort of developing strategies for

169
00:05:22,000 --> 00:05:23,440
themselves

170
00:05:23,440 --> 00:05:25,600
can help improve their vulnerability

171
00:05:25,600 --> 00:05:26,880
research

172
00:05:26,880 --> 00:05:28,400
in addition to just having their

173
00:05:28,400 --> 00:05:30,960
technical knowledge

174
00:05:30,960 --> 00:05:34,160
so talking about failure first of all

175
00:05:34,160 --> 00:05:36,240
dealing with failure is very uh is a

176
00:05:36,240 --> 00:05:37,039
very

177
00:05:37,039 --> 00:05:38,639
uh constant part of vulnerability

178
00:05:38,639 --> 00:05:39,840
research

179
00:05:39,840 --> 00:05:41,600
i once attended a black hat conference

180
00:05:41,600 --> 00:05:43,120
where um

181
00:05:43,120 --> 00:05:44,639
you know someone came up to me at the

182
00:05:44,639 --> 00:05:46,400
time i was releasing a lot of

183
00:05:46,400 --> 00:05:48,800
vulnerabilities and doing presentations

184
00:05:48,800 --> 00:05:50,560
and they said they

185
00:05:50,560 --> 00:05:53,039
said something along the lines um to me

186
00:05:53,039 --> 00:05:54,479
like sort of trying to give a compliment

187
00:05:54,479 --> 00:05:56,319
of you can put any code base in front of

188
00:05:56,319 --> 00:05:58,639
this guy he'll find a vulnerability in

189
00:05:58,639 --> 00:05:59,759
20 minutes

190
00:05:59,759 --> 00:06:02,960
and i was struck at how wrong that was

191
00:06:02,960 --> 00:06:05,840
because i fail all the time

192
00:06:05,840 --> 00:06:07,680
in fact most of the time

193
00:06:07,680 --> 00:06:09,039
when i'm doing vulnerability research

194
00:06:09,039 --> 00:06:10,639
i'm failing at it

195
00:06:10,639 --> 00:06:12,240
but of course this guy just sees the

196
00:06:12,240 --> 00:06:14,240
advisories and presentations and is

197
00:06:14,240 --> 00:06:16,160
thinks everything i'm doing is turning

198
00:06:16,160 --> 00:06:18,400
to gold or whatever

199
00:06:18,400 --> 00:06:19,919
i don't know how other people deal with

200
00:06:19,919 --> 00:06:21,919
this failure but um i know some of the

201
00:06:21,919 --> 00:06:24,800
strategies that i've used uh the first

202
00:06:24,800 --> 00:06:26,880
main one that i that i really would say

203
00:06:26,880 --> 00:06:28,639
is that i always have two projects going

204
00:06:28,639 --> 00:06:31,360
on when i do vulnerability research

205
00:06:31,360 --> 00:06:33,039
they can be either

206
00:06:33,039 --> 00:06:34,400
you know different components of the

207
00:06:34,400 --> 00:06:36,639
same code that i'm looking at or

208
00:06:36,639 --> 00:06:38,000
you know the second one is completely

209
00:06:38,000 --> 00:06:39,600
unrelated to the first

210
00:06:39,600 --> 00:06:43,039
and um i try and learn to recognize when

211
00:06:43,039 --> 00:06:45,520
i've hit a wall and become unproductive

212
00:06:45,520 --> 00:06:47,600
so at a certain point of you know a

213
00:06:47,600 --> 00:06:50,479
vulnerability research project uh all my

214
00:06:50,479 --> 00:06:52,400
ideas will be exhausted i have nothing

215
00:06:52,400 --> 00:06:55,039
new um that i can think of or perhaps

216
00:06:55,039 --> 00:06:57,039
i'm having a difficulty understanding

217
00:06:57,039 --> 00:06:59,120
like a key component

218
00:06:59,120 --> 00:07:00,560
and basically when you get into this

219
00:07:00,560 --> 00:07:02,479
mode you slip into being quite

220
00:07:02,479 --> 00:07:03,919
unproductive

221
00:07:03,919 --> 00:07:06,240
and it can be quite depressing and your

222
00:07:06,240 --> 00:07:08,400
concentration starts lagging and so on

223
00:07:08,400 --> 00:07:10,560
so recognizing when this happens and

224
00:07:10,560 --> 00:07:12,960
then switching to a secondary project

225
00:07:12,960 --> 00:07:14,800
kind of perks you up because you're able

226
00:07:14,800 --> 00:07:16,400
to put that thing away

227
00:07:16,400 --> 00:07:18,720
um you know the frustration dissipates

228
00:07:18,720 --> 00:07:20,479
because you can make progress on a

229
00:07:20,479 --> 00:07:22,240
different project

230
00:07:22,240 --> 00:07:24,560
and not only that i think that

231
00:07:24,560 --> 00:07:26,800
by putting something away for like a day

232
00:07:26,800 --> 00:07:28,400
or a week or whatever

233
00:07:28,400 --> 00:07:30,319
it percolates in the back of your mind

234
00:07:30,319 --> 00:07:32,319
and some of the best uh ideas you have

235
00:07:32,319 --> 00:07:33,840
with vulnerability research come from

236
00:07:33,840 --> 00:07:35,840
when you're not actively doing something

237
00:07:35,840 --> 00:07:38,000
but um when you've got all the facts and

238
00:07:38,000 --> 00:07:39,360
it's just sort of happening in the back

239
00:07:39,360 --> 00:07:41,520
of your mind

240
00:07:41,520 --> 00:07:43,599
even better is if your second project is

241
00:07:43,599 --> 00:07:45,759
a development project

242
00:07:45,759 --> 00:07:48,639
because unlike vulnerability research

243
00:07:48,639 --> 00:07:49,919
you can

244
00:07:49,919 --> 00:07:51,440
you can do sort of an achievable and

245
00:07:51,440 --> 00:07:53,599
measurable task you know you can go and

246
00:07:53,599 --> 00:07:54,960
do that feature that you've been meaning

247
00:07:54,960 --> 00:07:56,160
to do

248
00:07:56,160 --> 00:07:58,720
and you know it's something that is

249
00:07:58,720 --> 00:08:00,560
concrete and you can measure it and sort

250
00:08:00,560 --> 00:08:01,919
of you know

251
00:08:01,919 --> 00:08:03,440
get a sense of achievement and get your

252
00:08:03,440 --> 00:08:05,199
motivation back before switching back to

253
00:08:05,199 --> 00:08:07,039
the other thing

254
00:08:07,039 --> 00:08:08,080
um

255
00:08:08,080 --> 00:08:10,319
now even doing this strategy of course

256
00:08:10,319 --> 00:08:11,919
perseverance is really important and

257
00:08:11,919 --> 00:08:14,000
going back to to things and trying to

258
00:08:14,000 --> 00:08:15,360
overcome

259
00:08:15,360 --> 00:08:17,120
uh trying to look at code until you find

260
00:08:17,120 --> 00:08:19,840
vulnerabilities but um at some point

261
00:08:19,840 --> 00:08:21,599
you switch away from a project and go

262
00:08:21,599 --> 00:08:23,199
back to it two two or three times and

263
00:08:23,199 --> 00:08:24,879
you keep hitting the same wall you're

264
00:08:24,879 --> 00:08:26,879
not getting any new ideas it's not it's

265
00:08:26,879 --> 00:08:29,039
not really working for you

266
00:08:29,039 --> 00:08:31,120
and this can be a massive drag on

267
00:08:31,120 --> 00:08:33,519
motivation and confidence

268
00:08:33,519 --> 00:08:35,120
and it's really hard to put away because

269
00:08:35,120 --> 00:08:37,440
there's a sunk cost fallacy where you're

270
00:08:37,440 --> 00:08:38,958
like i've spent all of this time

271
00:08:38,958 --> 00:08:41,039
learning about this code base i know

272
00:08:41,039 --> 00:08:43,200
everything about it and i can't put it

273
00:08:43,200 --> 00:08:45,120
away till i find you know i find

274
00:08:45,120 --> 00:08:47,519
something cool

275
00:08:47,519 --> 00:08:50,560
but what you have to realize is that

276
00:08:50,560 --> 00:08:52,240
even if you put it away the project is

277
00:08:52,240 --> 00:08:53,760
not a waste of time

278
00:08:53,760 --> 00:08:56,320
the intent is to return to it in future

279
00:08:56,320 --> 00:08:58,320
what you've done is pay the startup cost

280
00:08:58,320 --> 00:09:00,399
of understanding that entire code base

281
00:09:00,399 --> 00:09:02,240
and when you come back to it in like six

282
00:09:02,240 --> 00:09:04,720
months or a year's time um there'll be

283
00:09:04,720 --> 00:09:06,320
some fresh features and stuff like that

284
00:09:06,320 --> 00:09:07,839
perhaps there'll be advancements in

285
00:09:07,839 --> 00:09:09,680
offensive security that you hadn't

286
00:09:09,680 --> 00:09:10,959
thought of at the time when you looked

287
00:09:10,959 --> 00:09:11,839
at it

288
00:09:11,839 --> 00:09:13,040
your own skills have become more

289
00:09:13,040 --> 00:09:14,800
sophisticated

290
00:09:14,800 --> 00:09:16,959
and you can basically hit the ground

291
00:09:16,959 --> 00:09:18,959
running because you already understand

292
00:09:18,959 --> 00:09:22,959
fairly intimately that code base

293
00:09:22,959 --> 00:09:25,279
in terms of motivation i don't really

294
00:09:25,279 --> 00:09:27,600
know how to tell people

295
00:09:27,600 --> 00:09:29,839
how to how to remain engaged in looking

296
00:09:29,839 --> 00:09:31,200
at code

297
00:09:31,200 --> 00:09:32,640
essentially

298
00:09:32,640 --> 00:09:34,640
as i said in the first slide most

299
00:09:34,640 --> 00:09:37,680
vulnerability researchers are curious

300
00:09:37,680 --> 00:09:39,600
i would say that um

301
00:09:39,600 --> 00:09:40,320
in

302
00:09:40,320 --> 00:09:42,080
in addition to looking for just

303
00:09:42,080 --> 00:09:44,000
vulnerabilities i don't really look for

304
00:09:44,000 --> 00:09:45,519
vulnerabilities quite a lot of the time

305
00:09:45,519 --> 00:09:46,880
i'm just trying to understand how

306
00:09:46,880 --> 00:09:50,000
technology works and the curiosity about

307
00:09:50,000 --> 00:09:52,320
how that technology works can make code

308
00:09:52,320 --> 00:09:54,560
an awful lot more interesting uh to look

309
00:09:54,560 --> 00:09:56,640
at um especially when you're finding out

310
00:09:56,640 --> 00:09:57,600
um

311
00:09:57,600 --> 00:09:59,120
uh you know how a completely new

312
00:09:59,120 --> 00:10:00,640
technology works or perhaps it's

313
00:10:00,640 --> 00:10:01,920
something you thought you understood but

314
00:10:01,920 --> 00:10:03,920
you're finding out new details about it

315
00:10:03,920 --> 00:10:05,760
that you only really get by really

316
00:10:05,760 --> 00:10:06,880
studying

317
00:10:06,880 --> 00:10:08,320
a code base that you weren't familiar

318
00:10:08,320 --> 00:10:10,480
with before

319
00:10:10,480 --> 00:10:12,079
so the more the more you're interested

320
00:10:12,079 --> 00:10:13,360
in the technology i think the less

321
00:10:13,360 --> 00:10:15,519
monotonous code review is

322
00:10:15,519 --> 00:10:17,839
and also i kind of like looking at the

323
00:10:17,839 --> 00:10:19,920
algorithms people use to to solve the

324
00:10:19,920 --> 00:10:21,600
same kind of problems

325
00:10:21,600 --> 00:10:23,360
and sometimes they do a cool programming

326
00:10:23,360 --> 00:10:25,440
trick and i just think i'm going to

327
00:10:25,440 --> 00:10:27,279
steal that for the next thing i i write

328
00:10:27,279 --> 00:10:28,399
so

329
00:10:28,399 --> 00:10:31,120
that's kind of cool as well

330
00:10:31,120 --> 00:10:32,640
um

331
00:10:32,640 --> 00:10:34,480
i can't really talk about motivation

332
00:10:34,480 --> 00:10:36,399
motivational problems in vulnerability

333
00:10:36,399 --> 00:10:37,839
research without talking about bug

334
00:10:37,839 --> 00:10:40,560
patching because it can be pretty brutal

335
00:10:40,560 --> 00:10:42,240
bugs being patched is a really

336
00:10:42,240 --> 00:10:44,640
frustrating experience

337
00:10:44,640 --> 00:10:47,600
but if a security uh if a security patch

338
00:10:47,600 --> 00:10:48,959
comes out for something that you already

339
00:10:48,959 --> 00:10:51,279
found it's also kind of evidence that

340
00:10:51,279 --> 00:10:53,120
you're on the right track um you

341
00:10:53,120 --> 00:10:54,959
understand what uh vulnerabilities look

342
00:10:54,959 --> 00:10:56,880
like in the context of this code base

343
00:10:56,880 --> 00:10:59,200
and it's just been validated for you so

344
00:10:59,200 --> 00:11:01,279
that can be um some motivation to keep

345
00:11:01,279 --> 00:11:02,399
going

346
00:11:02,399 --> 00:11:04,640
um but it can be frustrating i had an

347
00:11:04,640 --> 00:11:07,120
experience uh early on in azimuth where

348
00:11:07,120 --> 00:11:08,959
i'd found these two vulnerabilities in

349
00:11:08,959 --> 00:11:11,600
in chrome so i was pretty happy and um

350
00:11:11,600 --> 00:11:13,200
they basically got patched two days

351
00:11:13,200 --> 00:11:16,480
later which in which caused me to go on

352
00:11:16,480 --> 00:11:18,720
what we call it azimuth a rage audit

353
00:11:18,720 --> 00:11:21,200
where you basically try and avenge your

354
00:11:21,200 --> 00:11:23,760
dead bugs by looking at the code um

355
00:11:23,760 --> 00:11:26,000
obstinately and i was able to find

356
00:11:26,000 --> 00:11:28,640
another vulnerability and

357
00:11:28,640 --> 00:11:30,640
write an exploit for it so i'm pretty

358
00:11:30,640 --> 00:11:32,480
happy with that but then a week later

359
00:11:32,480 --> 00:11:33,920
they patched that

360
00:11:33,920 --> 00:11:36,240
and so that's like super frustrating and

361
00:11:36,240 --> 00:11:37,600
can happen

362
00:11:37,600 --> 00:11:39,200
i guess you can take up boxing or

363
00:11:39,200 --> 00:11:40,800
something

364
00:11:40,800 --> 00:11:42,800
i was able to turn this into a positive

365
00:11:42,800 --> 00:11:44,640
because i looked at the um

366
00:11:44,640 --> 00:11:46,240
the advisories coming out from google

367
00:11:46,240 --> 00:11:47,680
and noticed that the same guy had

368
00:11:47,680 --> 00:11:49,200
submitted all of those

369
00:11:49,200 --> 00:11:51,440
bugs to google and so i i just hired

370
00:11:51,440 --> 00:11:53,360
that guy um

371
00:11:53,360 --> 00:11:54,079
and

372
00:11:54,079 --> 00:11:57,040
that took care of that problem so

373
00:11:57,040 --> 00:11:59,040
a tip is start a vulnerability research

374
00:11:59,040 --> 00:12:01,360
company and then just hire everyone um

375
00:12:01,360 --> 00:12:03,040
if you can

376
00:12:03,040 --> 00:12:05,040
um patches are also a double-edged sword

377
00:12:05,040 --> 00:12:06,320
really because

378
00:12:06,320 --> 00:12:08,639
as well as um things being patched in

379
00:12:08,639 --> 00:12:09,839
your face they're actually really good

380
00:12:09,839 --> 00:12:11,040
documentation for when you're

381
00:12:11,040 --> 00:12:12,560
familiarizing yourself with the code

382
00:12:12,560 --> 00:12:14,320
base they're really good because they

383
00:12:14,320 --> 00:12:16,320
tell you like um

384
00:12:16,320 --> 00:12:18,399
you can go when you go through patches

385
00:12:18,399 --> 00:12:20,000
they can give you inspiration for ideas

386
00:12:20,000 --> 00:12:22,240
that you didn't yet have or variants or

387
00:12:22,240 --> 00:12:24,800
patterns that you hadn't yet thought of

388
00:12:24,800 --> 00:12:26,639
and they can help you understand what

389
00:12:26,639 --> 00:12:28,320
bugs look like in the context of this

390
00:12:28,320 --> 00:12:30,560
particular code base because they will

391
00:12:30,560 --> 00:12:32,959
show you you know where a bug is but

392
00:12:32,959 --> 00:12:34,880
they won't release but it might not be

393
00:12:34,880 --> 00:12:36,880
immediately obvious what it is or why

394
00:12:36,880 --> 00:12:38,959
it's a security problem and so going and

395
00:12:38,959 --> 00:12:40,639
working that out can be really helpful

396
00:12:40,639 --> 00:12:43,519
for your understanding

397
00:12:43,519 --> 00:12:44,399
um

398
00:12:44,399 --> 00:12:45,680
confidence is another thing

399
00:12:45,680 --> 00:12:46,880
vulnerability research is pretty

400
00:12:46,880 --> 00:12:49,680
daunting field to enter um you see cool

401
00:12:49,680 --> 00:12:51,839
stuff coming out all the time and it

402
00:12:51,839 --> 00:12:54,320
seems like totally impossible

403
00:12:54,320 --> 00:12:56,880
and even for experienced researchers if

404
00:12:56,880 --> 00:12:58,800
you're experienced in one

405
00:12:58,800 --> 00:13:00,639
area of technology and you jump into a

406
00:13:00,639 --> 00:13:02,160
totally new one like you go from kernel

407
00:13:02,160 --> 00:13:03,440
hacking into browser hacking or

408
00:13:03,440 --> 00:13:05,440
something like that

409
00:13:05,440 --> 00:13:07,040
you know it can be it can be very

410
00:13:07,040 --> 00:13:08,959
daunting um

411
00:13:08,959 --> 00:13:11,360
but i'm i'm going to tell you that some

412
00:13:11,360 --> 00:13:13,040
security researchers i won't speak for

413
00:13:13,040 --> 00:13:14,560
all of you but some security researchers

414
00:13:14,560 --> 00:13:15,680
you respect

415
00:13:15,680 --> 00:13:17,760
um have had the same self-doubt coming

416
00:13:17,760 --> 00:13:18,560
in

417
00:13:18,560 --> 00:13:20,399
that that juniors have

418
00:13:20,399 --> 00:13:23,040
um and uh recurrences from time to time

419
00:13:23,040 --> 00:13:25,040
as they're switching technology

420
00:13:25,040 --> 00:13:27,200
uh when i was entering vulnerability

421
00:13:27,200 --> 00:13:30,160
research i was like very unconfident um

422
00:13:30,160 --> 00:13:32,320
even before i got the code base i was

423
00:13:32,320 --> 00:13:33,120
like

424
00:13:33,120 --> 00:13:35,680
um it seems a bit arrogant uh for

425
00:13:35,680 --> 00:13:37,279
someone like me who had little

426
00:13:37,279 --> 00:13:39,680
experience or knowledge to be able to

427
00:13:39,680 --> 00:13:41,680
download this code base written by some

428
00:13:41,680 --> 00:13:43,440
internet god and deployed on millions of

429
00:13:43,440 --> 00:13:44,480
machines

430
00:13:44,480 --> 00:13:47,680
and you know expect to find fault there

431
00:13:47,680 --> 00:13:49,680
but i kind of did it anyway because i'm

432
00:13:49,680 --> 00:13:51,279
like no one knows i'm looking at it i'll

433
00:13:51,279 --> 00:13:53,440
just be arrogant in secret

434
00:13:53,440 --> 00:13:55,360
and i would be overwhelmed by the

435
00:13:55,360 --> 00:13:56,880
complexity of it

436
00:13:56,880 --> 00:13:58,639
and think like what the hell is this

437
00:13:58,639 --> 00:14:00,720
code doing do i do i even know see it

438
00:14:00,720 --> 00:14:02,639
makes you question yourself or assembly

439
00:14:02,639 --> 00:14:05,360
or whatever but as you look at it um you

440
00:14:05,360 --> 00:14:06,160
know

441
00:14:06,160 --> 00:14:07,680
i would just start and try and

442
00:14:07,680 --> 00:14:09,760
understand the smallest bits that didn't

443
00:14:09,760 --> 00:14:11,279
require that required the least amount

444
00:14:11,279 --> 00:14:13,279
of context and once i understood this

445
00:14:13,279 --> 00:14:15,519
little bit i would then you know move on

446
00:14:15,519 --> 00:14:17,040
to like another

447
00:14:17,040 --> 00:14:18,800
component that was perhaps a consumer of

448
00:14:18,800 --> 00:14:20,800
that and so on and basically you broaden

449
00:14:20,800 --> 00:14:22,639
your context and then after a while you

450
00:14:22,639 --> 00:14:24,560
start to realize like oh actually i kind

451
00:14:24,560 --> 00:14:26,480
of understand this whole component and

452
00:14:26,480 --> 00:14:28,800
that's where bugs kind of come from that

453
00:14:28,800 --> 00:14:30,639
understanding you then you start seeing

454
00:14:30,639 --> 00:14:32,320
like oh wait a minute they can't clean

455
00:14:32,320 --> 00:14:34,320
up this over here because uh they've

456
00:14:34,320 --> 00:14:36,560
already done it over here kind of thing

457
00:14:36,560 --> 00:14:37,519
um

458
00:14:37,519 --> 00:14:38,639
and so

459
00:14:38,639 --> 00:14:40,880
um just starting out small and then

460
00:14:40,880 --> 00:14:43,040
moving bigger can be really helpful uh

461
00:14:43,040 --> 00:14:44,880
for confidence

462
00:14:44,880 --> 00:14:46,399
um

463
00:14:46,399 --> 00:14:49,120
for an another thing as as a junior you

464
00:14:49,120 --> 00:14:50,880
can look at um vulnerability research

465
00:14:50,880 --> 00:14:52,560
and sort of be like

466
00:14:52,560 --> 00:14:53,519
something comes out and you're like

467
00:14:53,519 --> 00:14:55,199
that's impossible i i can't see how

468
00:14:55,199 --> 00:14:57,440
anyone could do do this vulnerability

469
00:14:57,440 --> 00:15:00,079
research or this cool exploit

470
00:15:00,079 --> 00:15:01,519
but one of the things i've told other

471
00:15:01,519 --> 00:15:03,920
juniors in the past is um

472
00:15:03,920 --> 00:15:05,519
the a lot of the product that you're

473
00:15:05,519 --> 00:15:07,519
seeing is the culmination of hundreds of

474
00:15:07,519 --> 00:15:09,040
thousands of hours of practice that that

475
00:15:09,040 --> 00:15:10,880
person has put in to get their

476
00:15:10,880 --> 00:15:13,519
sophistication of um understanding of

477
00:15:13,519 --> 00:15:14,800
technology and understanding the

478
00:15:14,800 --> 00:15:17,760
principles of exploitation and so forth

479
00:15:17,760 --> 00:15:19,680
um up to a level where they were able to

480
00:15:19,680 --> 00:15:21,920
do that work and so of course when

481
00:15:21,920 --> 00:15:24,000
you're at the beginning you you can't do

482
00:15:24,000 --> 00:15:27,199
that work however um one thing that's

483
00:15:27,199 --> 00:15:30,240
useful is uh even vulnerability research

484
00:15:30,240 --> 00:15:32,639
is you know really premier ones if you

485
00:15:32,639 --> 00:15:33,839
look back at some of the stuff that

486
00:15:33,839 --> 00:15:35,440
they've released in the past like a year

487
00:15:35,440 --> 00:15:37,680
ago three years ago or five years ago or

488
00:15:37,680 --> 00:15:39,040
something

489
00:15:39,040 --> 00:15:40,399
you'll see

490
00:15:40,399 --> 00:15:42,240
basically that they've gone through a

491
00:15:42,240 --> 00:15:43,759
path of increasing sophistication

492
00:15:43,759 --> 00:15:45,759
themselves and so you might not

493
00:15:45,759 --> 00:15:47,199
understand how they did the thing they

494
00:15:47,199 --> 00:15:48,399
did today

495
00:15:48,399 --> 00:15:49,680
but you can look at something they did

496
00:15:49,680 --> 00:15:51,920
like five years ago and see okay i can

497
00:15:51,920 --> 00:15:54,399
see a path to get to that and from there

498
00:15:54,399 --> 00:15:56,399
you can see that there's a road map for

499
00:15:56,399 --> 00:15:58,000
you if you're prepared to put in the

500
00:15:58,000 --> 00:16:00,160
same amount of work as they have

501
00:16:00,160 --> 00:16:01,680
to be able to get to the level that

502
00:16:01,680 --> 00:16:03,519
they're at

503
00:16:03,519 --> 00:16:05,199
so it's really about having a growth

504
00:16:05,199 --> 00:16:07,360
mindset i guess about

505
00:16:07,360 --> 00:16:09,040
rather than looking at something and

506
00:16:09,040 --> 00:16:10,880
saying i can't do that saying like i

507
00:16:10,880 --> 00:16:13,680
can't do that yet

508
00:16:14,320 --> 00:16:16,320
um the last thing i sort of wanted to

509
00:16:16,320 --> 00:16:18,480
talk about here was uh

510
00:16:18,480 --> 00:16:20,320
sort of bias and assumptions i think

511
00:16:20,320 --> 00:16:22,800
that um you know when you're looking

512
00:16:22,800 --> 00:16:23,680
through

513
00:16:23,680 --> 00:16:25,839
code a lot of vulnerabilities you find

514
00:16:25,839 --> 00:16:28,079
are the result of assumptions that a

515
00:16:28,079 --> 00:16:30,000
programmer makes and that's pretty

516
00:16:30,000 --> 00:16:31,759
straightforward but i think actually the

517
00:16:31,759 --> 00:16:33,600
security research community has a number

518
00:16:33,600 --> 00:16:35,600
of biases and assumptions

519
00:16:35,600 --> 00:16:37,360
that you can fall prey to from time to

520
00:16:37,360 --> 00:16:39,199
time and they they have an opportunity

521
00:16:39,199 --> 00:16:41,680
cost of you missing out on finding some

522
00:16:41,680 --> 00:16:44,000
potentially cool vulnerabilities

523
00:16:44,000 --> 00:16:47,600
the first one that um that i encountered

524
00:16:47,600 --> 00:16:50,240
early in my career was the everyone has

525
00:16:50,240 --> 00:16:52,160
looked at this already

526
00:16:52,160 --> 00:16:53,759
at the time there was this big open

527
00:16:53,759 --> 00:16:55,680
source and closed source debate and

528
00:16:55,680 --> 00:16:58,079
which one's more secure going on and the

529
00:16:58,079 --> 00:16:59,600
mentor of the open source people was

530
00:16:59,600 --> 00:17:02,320
many eyes make all bugs shallow

531
00:17:02,320 --> 00:17:04,959
therefore open source code is if it has

532
00:17:04,959 --> 00:17:06,240
bugs in it it's not going to have bugs

533
00:17:06,240 --> 00:17:07,439
for very long

534
00:17:07,439 --> 00:17:09,439
um that that sort of turned out to be

535
00:17:09,439 --> 00:17:10,240
wrong

536
00:17:10,240 --> 00:17:11,119
um

537
00:17:11,119 --> 00:17:13,119
but like uh

538
00:17:13,119 --> 00:17:15,359
um what i realized for some of the most

539
00:17:15,359 --> 00:17:17,439
major applications in particular the

540
00:17:17,439 --> 00:17:20,079
most major applications

541
00:17:20,079 --> 00:17:21,520
i started to realize that not many

542
00:17:21,520 --> 00:17:22,880
people were looking at them at all

543
00:17:22,880 --> 00:17:24,319
because everyone thought that everyone

544
00:17:24,319 --> 00:17:26,559
else was looking at them and

545
00:17:26,559 --> 00:17:28,799
while there was uh i i'm sure plenty of

546
00:17:28,799 --> 00:17:30,720
people were doing cursory examinations

547
00:17:30,720 --> 00:17:32,160
of like oh i'll just check if there's

548
00:17:32,160 --> 00:17:34,160
integer overflows in this actually

549
00:17:34,160 --> 00:17:36,320
putting in the time to fully understand

550
00:17:36,320 --> 00:17:38,240
the complexity of the code

551
00:17:38,240 --> 00:17:40,960
and find some of the more subtle bugs

552
00:17:40,960 --> 00:17:41,919
were

553
00:17:41,919 --> 00:17:43,760
was something that i think

554
00:17:43,760 --> 00:17:46,480
happened rarely if ever and so

555
00:17:46,480 --> 00:17:49,120
once i discovered this this was my whole

556
00:17:49,120 --> 00:17:50,640
early career i would just look at all

557
00:17:50,640 --> 00:17:53,039
these major applications and everyone

558
00:17:53,039 --> 00:17:55,039
was constantly surprised that i was able

559
00:17:55,039 --> 00:17:56,880
to find these bugs

560
00:17:56,880 --> 00:17:58,400
in code that no one else

561
00:17:58,400 --> 00:18:00,559
was looking at as far as i could tell

562
00:18:00,559 --> 00:18:02,480
um

563
00:18:02,480 --> 00:18:04,799
and another another

564
00:18:04,799 --> 00:18:07,679
bias that i think some people fall from

565
00:18:07,679 --> 00:18:09,760
four fours from time to time and i've

566
00:18:09,760 --> 00:18:11,919
fallen for this one a lot

567
00:18:11,919 --> 00:18:14,320
is even if i found something it will be

568
00:18:14,320 --> 00:18:16,720
unexploitable so there was this period

569
00:18:16,720 --> 00:18:18,160
of time where the entire research

570
00:18:18,160 --> 00:18:20,400
community basically went from finding

571
00:18:20,400 --> 00:18:22,480
server-side bugs to client-side bugs and

572
00:18:22,480 --> 00:18:24,480
it was around the introduction of aslr

573
00:18:24,480 --> 00:18:26,840
and depth and some of those related

574
00:18:26,840 --> 00:18:29,200
mitigations that wasn't the only reason

575
00:18:29,200 --> 00:18:30,320
like

576
00:18:30,320 --> 00:18:32,160
people were starting to

577
00:18:32,160 --> 00:18:34,240
starting to realize how rich

578
00:18:34,240 --> 00:18:36,080
the client side attack surface was and

579
00:18:36,080 --> 00:18:38,320
things like that compared to the

580
00:18:38,320 --> 00:18:40,559
server-side surface which was

581
00:18:40,559 --> 00:18:44,080
in general a lot a lot smaller um but

582
00:18:44,080 --> 00:18:45,120
uh

583
00:18:45,120 --> 00:18:46,080
also

584
00:18:46,080 --> 00:18:48,160
there was a kind of perception of like

585
00:18:48,160 --> 00:18:50,080
even if we found something it's not

586
00:18:50,080 --> 00:18:52,480
going to be uh you know it's going to be

587
00:18:52,480 --> 00:18:54,080
really difficult to make a reliable

588
00:18:54,080 --> 00:18:55,200
exploit it's probably not going to be

589
00:18:55,200 --> 00:18:57,039
possible

590
00:18:57,039 --> 00:18:59,200
and there really has been a focus for a

591
00:18:59,200 --> 00:19:00,400
long time

592
00:19:00,400 --> 00:19:01,440
on um

593
00:19:01,440 --> 00:19:03,440
on client-side stuff in the in the

594
00:19:03,440 --> 00:19:05,200
research community until several years

595
00:19:05,200 --> 00:19:06,160
ago

596
00:19:06,160 --> 00:19:08,160
i think it was around uh i would say

597
00:19:08,160 --> 00:19:10,080
it's around when eternal blue came out

598
00:19:10,080 --> 00:19:11,840
um i mean when you think about it how

599
00:19:11,840 --> 00:19:15,120
many times in the history of aslr has it

600
00:19:15,120 --> 00:19:17,520
has there been the case where it's like

601
00:19:17,520 --> 00:19:19,520
everything is randomized in memory and

602
00:19:19,520 --> 00:19:21,360
you can't tell where everything is

603
00:19:21,360 --> 00:19:22,720
except for this one object which is

604
00:19:22,720 --> 00:19:24,320
always in the same place and is really

605
00:19:24,320 --> 00:19:26,080
useful for exploitation

606
00:19:26,080 --> 00:19:27,679
um and so

607
00:19:27,679 --> 00:19:29,840
eternal blue used a mechanism like that

608
00:19:29,840 --> 00:19:31,840
and then people started going on to look

609
00:19:31,840 --> 00:19:34,720
at other um server side or i should say

610
00:19:34,720 --> 00:19:37,200
interactionless vulnerabilities um you

611
00:19:37,200 --> 00:19:38,400
know

612
00:19:38,400 --> 00:19:40,160
imessage for ios

613
00:19:40,160 --> 00:19:42,080
some of the other messenger applications

614
00:19:42,080 --> 00:19:45,280
and uh recently you know windows dns and

615
00:19:45,280 --> 00:19:48,080
um windows http and things like that and

616
00:19:48,080 --> 00:19:49,760
it turned out that like

617
00:19:49,760 --> 00:19:52,559
in a lot of these cases

618
00:19:52,559 --> 00:19:54,000
some of the cases the mitigations would

619
00:19:54,000 --> 00:19:55,760
be useful but a lot of the time they

620
00:19:55,760 --> 00:19:57,840
could they could be worked around

621
00:19:57,840 --> 00:20:00,799
in a reliable way

622
00:20:00,799 --> 00:20:03,200
and so

623
00:20:04,000 --> 00:20:05,280
the next one is

624
00:20:05,280 --> 00:20:06,880
this attack surface has been mined to

625
00:20:06,880 --> 00:20:08,720
death there's nothing else there

626
00:20:08,720 --> 00:20:10,240
um

627
00:20:10,240 --> 00:20:12,080
so when i started looking at browser

628
00:20:12,080 --> 00:20:13,520
vulnerabilities

629
00:20:13,520 --> 00:20:16,080
i found this bug in like a ray.join or

630
00:20:16,080 --> 00:20:18,000
something like that and

631
00:20:18,000 --> 00:20:20,400
my mind is constantly blown how every

632
00:20:20,400 --> 00:20:21,760
year like two or three new

633
00:20:21,760 --> 00:20:23,520
vulnerabilities come out in these same

634
00:20:23,520 --> 00:20:24,720
two functions

635
00:20:24,720 --> 00:20:25,600
um

636
00:20:25,600 --> 00:20:27,200
and uh

637
00:20:27,200 --> 00:20:28,880
like every major browser has had it and

638
00:20:28,880 --> 00:20:30,720
basically um

639
00:20:30,720 --> 00:20:32,960
uh the reason they keep coming out

640
00:20:32,960 --> 00:20:34,799
really is because

641
00:20:34,799 --> 00:20:36,880
you know you have a vulnerability pretty

642
00:20:36,880 --> 00:20:38,400
straightforward it gets found it gets

643
00:20:38,400 --> 00:20:41,039
fixed and then a more subtle variation

644
00:20:41,039 --> 00:20:43,679
of that get uh gets introduced or exists

645
00:20:43,679 --> 00:20:45,600
and then that gets found and fixed then

646
00:20:45,600 --> 00:20:47,280
a more subtle version again perhaps

647
00:20:47,280 --> 00:20:49,840
involving you know the the jet engine

648
00:20:49,840 --> 00:20:51,760
gets found and fixed and also all the

649
00:20:51,760 --> 00:20:53,360
time they keep rewriting these functions

650
00:20:53,360 --> 00:20:54,960
and then reintroducing the bugs that

651
00:20:54,960 --> 00:20:57,679
they fixed like two years ago

652
00:20:57,679 --> 00:20:58,720
so

653
00:20:58,720 --> 00:21:00,000
even though you've seen a lot of

654
00:21:00,000 --> 00:21:01,760
vulnerabilities in a particular thing

655
00:21:01,760 --> 00:21:03,120
and it's tempting to think that there's

656
00:21:03,120 --> 00:21:05,360
nothing else there these code bases move

657
00:21:05,360 --> 00:21:07,200
very fast and

658
00:21:07,200 --> 00:21:09,760
it can be worth having a look

659
00:21:09,760 --> 00:21:11,919
um the last thing i i

660
00:21:11,919 --> 00:21:16,320
want to want to mention here is um

661
00:21:16,320 --> 00:21:18,080
a lot of the times you can have this

662
00:21:18,080 --> 00:21:20,080
subconscious kind of bias about how

663
00:21:20,080 --> 00:21:22,880
protocol or how a well-formed file um

664
00:21:22,880 --> 00:21:24,320
for a particular thing you're looking at

665
00:21:24,320 --> 00:21:25,200
works

666
00:21:25,200 --> 00:21:27,679
um and it's amazing how much it can

667
00:21:27,679 --> 00:21:28,840
influence

668
00:21:28,840 --> 00:21:32,159
uh the limiting of your imagination

669
00:21:32,159 --> 00:21:34,159
sometimes and

670
00:21:34,159 --> 00:21:36,000
you know developers do this all the time

671
00:21:36,000 --> 00:21:37,919
because uh

672
00:21:37,919 --> 00:21:39,280
you know that's where you you sort of

673
00:21:39,280 --> 00:21:41,520
find bugs they um they write something

674
00:21:41,520 --> 00:21:42,960
that implements a protocol or whatever

675
00:21:42,960 --> 00:21:44,720
but it allows you to do more really than

676
00:21:44,720 --> 00:21:46,400
what the protocol

677
00:21:46,400 --> 00:21:48,559
protocol specification says

678
00:21:48,559 --> 00:21:50,480
but one thing i found useful

679
00:21:50,480 --> 00:21:53,760
uh in the past is i purposely don't read

680
00:21:53,760 --> 00:21:56,240
any documentation about the technology

681
00:21:56,240 --> 00:21:58,720
i'm looking at until i'm halfway through

682
00:21:58,720 --> 00:22:00,480
and i've found that the times when i've

683
00:22:00,480 --> 00:22:01,360
done that

684
00:22:01,360 --> 00:22:03,280
there's a lot of times where

685
00:22:03,280 --> 00:22:05,120
the experiments i've done from reading

686
00:22:05,120 --> 00:22:06,559
the code

687
00:22:06,559 --> 00:22:08,080
when i go and read the protocol

688
00:22:08,080 --> 00:22:10,159
documentation suggests that that's not a

689
00:22:10,159 --> 00:22:12,320
thing at all that can can ever happen

690
00:22:12,320 --> 00:22:14,880
and it's kind of surprising

691
00:22:14,880 --> 00:22:16,880
that a program can do it and it hadn't

692
00:22:16,880 --> 00:22:19,039
occurred to me because i was too stupid

693
00:22:19,039 --> 00:22:21,520
to know how to use the protocol properly

694
00:22:21,520 --> 00:22:23,039
and so

695
00:22:23,039 --> 00:22:25,360
i now specifically do that to avoid the

696
00:22:25,360 --> 00:22:26,960
bias and then go and read it halfway

697
00:22:26,960 --> 00:22:29,440
through to resolve the ambiguities

698
00:22:29,440 --> 00:22:31,280
um that i did that i didn't quite

699
00:22:31,280 --> 00:22:34,320
understand when i was reading the code

700
00:22:34,320 --> 00:22:35,120
um

701
00:22:35,120 --> 00:22:36,400
so that's really all i want to talk

702
00:22:36,400 --> 00:22:37,919
about for the um

703
00:22:37,919 --> 00:22:39,679
you know the mental aspect there was a

704
00:22:39,679 --> 00:22:42,559
lot more stuff that i had to i wanted to

705
00:22:42,559 --> 00:22:43,919
pack into this

706
00:22:43,919 --> 00:22:46,000
uh this presentation but um it was going

707
00:22:46,000 --> 00:22:47,840
to go for like four hours so

708
00:22:47,840 --> 00:22:50,799
uh this is very uh brief and um

709
00:22:50,799 --> 00:22:52,240
depending on how it goes i'll i'll

710
00:22:52,240 --> 00:22:53,520
follow up with a lot more of the

711
00:22:53,520 --> 00:22:56,240
material that i cut out but um

712
00:22:56,240 --> 00:22:57,919
i'm going to move on to the the major

713
00:22:57,919 --> 00:22:59,840
auditing processes now

714
00:22:59,840 --> 00:23:01,840
uh again a couple of a couple of major

715
00:23:01,840 --> 00:23:03,440
points but um

716
00:23:03,440 --> 00:23:05,200
uh not nearly enough time to fit

717
00:23:05,200 --> 00:23:07,360
everything in

718
00:23:07,360 --> 00:23:09,600
uh okay so this is something i talked

719
00:23:09,600 --> 00:23:10,960
about a little bit in the previous

720
00:23:10,960 --> 00:23:13,120
sections um attempting to understand the

721
00:23:13,120 --> 00:23:14,880
code uh

722
00:23:14,880 --> 00:23:16,799
this seems like a silly thing to say

723
00:23:16,799 --> 00:23:19,360
really because um this is

724
00:23:19,360 --> 00:23:21,280
obviously the object of vulnerability

725
00:23:21,280 --> 00:23:22,880
research

726
00:23:22,880 --> 00:23:23,679
but

727
00:23:23,679 --> 00:23:25,760
over my career i've noticed that a lot

728
00:23:25,760 --> 00:23:27,440
of people

729
00:23:27,440 --> 00:23:29,200
try to short circuit actually put quite

730
00:23:29,200 --> 00:23:31,120
a lot of effort into short circuit

731
00:23:31,120 --> 00:23:33,760
short-circuiting this process and

732
00:23:33,760 --> 00:23:36,320
rely on tools such as fuzzers static

733
00:23:36,320 --> 00:23:38,880
analysis tools and you know perhaps

734
00:23:38,880 --> 00:23:40,559
taxonomies on

735
00:23:40,559 --> 00:23:42,080
you know bug classes and things like

736
00:23:42,080 --> 00:23:43,679
that

737
00:23:43,679 --> 00:23:46,640
these these things are very useful and

738
00:23:46,640 --> 00:23:48,480
and can greatly assist vulnerability

739
00:23:48,480 --> 00:23:51,039
research but they are not the entirety

740
00:23:51,039 --> 00:23:52,559
of the process

741
00:23:52,559 --> 00:23:53,600
um

742
00:23:53,600 --> 00:23:55,679
tools can um fail to find

743
00:23:55,679 --> 00:23:57,600
vulnerabilities

744
00:23:57,600 --> 00:23:59,760
where you will succeed and and some of

745
00:23:59,760 --> 00:24:00,640
them

746
00:24:00,640 --> 00:24:02,159
and even though tools have got quite

747
00:24:02,159 --> 00:24:04,559
sophisticated and can find a lot of the

748
00:24:04,559 --> 00:24:06,960
um the low-hanging fruit and perhaps the

749
00:24:06,960 --> 00:24:08,080
um

750
00:24:08,080 --> 00:24:10,240
the medium-hanging fruit they sometimes

751
00:24:10,240 --> 00:24:11,200
miss

752
00:24:11,200 --> 00:24:14,720
even even those a you know tavis ormindy

753
00:24:14,720 --> 00:24:16,960
from project zero

754
00:24:16,960 --> 00:24:18,960
uh released a vulnerability late last

755
00:24:18,960 --> 00:24:21,679
year in the um ssl library nss

756
00:24:21,679 --> 00:24:23,520
maintained by mozilla and it was just a

757
00:24:23,520 --> 00:24:25,360
straightforward heap overflow

758
00:24:25,360 --> 00:24:27,120
and he has an interesting blog about it

759
00:24:27,120 --> 00:24:29,279
where he talks about they they fuzz it

760
00:24:29,279 --> 00:24:31,600
all the time they had static analysis

761
00:24:31,600 --> 00:24:33,840
tools running on it and he sort of talks

762
00:24:33,840 --> 00:24:36,080
about the fault in um

763
00:24:36,080 --> 00:24:38,480
the fault in their testing process um

764
00:24:38,480 --> 00:24:39,919
that you can go and read about on his

765
00:24:39,919 --> 00:24:41,679
blog and where he thought the testing

766
00:24:41,679 --> 00:24:43,840
fell short and why he found it where

767
00:24:43,840 --> 00:24:47,440
they failed um but that goes to but that

768
00:24:47,440 --> 00:24:49,840
sort of goes to the point of tools only

769
00:24:49,840 --> 00:24:51,600
um

770
00:24:51,600 --> 00:24:53,200
tools while effective

771
00:24:53,200 --> 00:24:55,440
cannot do the entire job

772
00:24:55,440 --> 00:24:57,440
and perhaps more importantly

773
00:24:57,440 --> 00:25:00,320
a lot of today's vulnerabilities uh

774
00:25:00,320 --> 00:25:02,320
require quite complex and require sort

775
00:25:02,320 --> 00:25:04,320
of an in-depth understanding

776
00:25:04,320 --> 00:25:05,039
of

777
00:25:05,039 --> 00:25:07,039
of the code base you're looking at um

778
00:25:07,039 --> 00:25:09,440
usually vulnerabilities um

779
00:25:09,440 --> 00:25:11,840
i find these days come about because you

780
00:25:11,840 --> 00:25:14,000
notice a small

781
00:25:14,000 --> 00:25:17,120
idiosyncrasy or a quirky api that um

782
00:25:17,120 --> 00:25:19,520
has a has an easy to misuse interface

783
00:25:19,520 --> 00:25:21,520
perhaps and you know sort of chaining

784
00:25:21,520 --> 00:25:24,240
ideas together until you work into

785
00:25:24,240 --> 00:25:25,440
something that has a security

786
00:25:25,440 --> 00:25:26,799
consequence

787
00:25:26,799 --> 00:25:29,520
your advantage as a security researcher

788
00:25:29,520 --> 00:25:31,360
is you have the ability to understand

789
00:25:31,360 --> 00:25:34,559
this context and be able to

790
00:25:34,559 --> 00:25:36,240
consider things in a creative manner

791
00:25:36,240 --> 00:25:39,520
that perhaps a tool can't

792
00:25:39,840 --> 00:25:41,440
for example

793
00:25:41,440 --> 00:25:43,120
natalie silvanovic

794
00:25:43,120 --> 00:25:44,559
last year released a signal

795
00:25:44,559 --> 00:25:46,400
vulnerability

796
00:25:46,400 --> 00:25:49,120
and obviously because of signals

797
00:25:49,120 --> 00:25:51,919
the consequences of signal being used by

798
00:25:51,919 --> 00:25:53,679
security people and all over the world

799
00:25:53,679 --> 00:25:54,799
and so on

800
00:25:54,799 --> 00:25:56,960
probably a lot of people have spent time

801
00:25:56,960 --> 00:25:58,640
looking at that code

802
00:25:58,640 --> 00:26:01,440
and running tools on it and so forth

803
00:26:01,440 --> 00:26:02,640
she found

804
00:26:02,640 --> 00:26:04,159
she found a bug that required

805
00:26:04,159 --> 00:26:05,679
understanding the context of the state

806
00:26:05,679 --> 00:26:07,360
machine she spent some time learning

807
00:26:07,360 --> 00:26:09,039
about

808
00:26:09,039 --> 00:26:12,480
webrtc and sd sdp specifically

809
00:26:12,480 --> 00:26:13,200
but

810
00:26:13,200 --> 00:26:14,880
by understanding um

811
00:26:14,880 --> 00:26:16,400
that if you've got this state machine

812
00:26:16,400 --> 00:26:18,240
and you can reach this state

813
00:26:18,240 --> 00:26:20,240
which involves turning a microphone or

814
00:26:20,240 --> 00:26:21,760
camera on without ever going through

815
00:26:21,760 --> 00:26:24,480
this state of initiating a call then

816
00:26:24,480 --> 00:26:26,559
that constitutes a security problem in

817
00:26:26,559 --> 00:26:28,640
this particular context

818
00:26:28,640 --> 00:26:32,080
and it turned out the state machine is

819
00:26:32,080 --> 00:26:33,760
more complicated than you might imagine

820
00:26:33,760 --> 00:26:35,919
and so she was able to

821
00:26:35,919 --> 00:26:37,919
find a situation where you could indeed

822
00:26:37,919 --> 00:26:40,159
do that

823
00:26:40,159 --> 00:26:41,120
secondly

824
00:26:41,120 --> 00:26:43,520
every mitigation bypass that you see is

825
00:26:43,520 --> 00:26:45,039
also kind of a context specific

826
00:26:45,039 --> 00:26:46,960
vulnerability finding a bypass in a

827
00:26:46,960 --> 00:26:49,120
mitigation is just vulnerability like

828
00:26:49,120 --> 00:26:51,200
vulnerability hunting except instead of

829
00:26:51,200 --> 00:26:53,200
looking for perhaps a traditional memory

830
00:26:53,200 --> 00:26:55,360
corruption bug or whatever most of the

831
00:26:55,360 --> 00:26:56,720
time

832
00:26:56,720 --> 00:26:59,520
you're looking for a way to undermine a

833
00:26:59,520 --> 00:27:02,320
specific integrity validation algorithm

834
00:27:02,320 --> 00:27:04,000
so you know if you're looking at pac for

835
00:27:04,000 --> 00:27:06,080
example you might be

836
00:27:06,080 --> 00:27:08,000
looking for ways to forge pointers or

837
00:27:08,000 --> 00:27:09,360
for a way to

838
00:27:09,360 --> 00:27:10,960
modify a pointer in a way that pac

839
00:27:10,960 --> 00:27:13,279
doesn't detect it or something like that

840
00:27:13,279 --> 00:27:15,200
finding vulnerabilities of that nature

841
00:27:15,200 --> 00:27:16,799
requires you to understand the context

842
00:27:16,799 --> 00:27:19,200
of what pac's trying to achieve and then

843
00:27:19,200 --> 00:27:21,600
basically you know what constitutes a

844
00:27:21,600 --> 00:27:25,360
problem in it and getting around that

845
00:27:25,919 --> 00:27:27,760
um

846
00:27:27,760 --> 00:27:29,840
so going back to the inconsistencies

847
00:27:29,840 --> 00:27:32,320
thing e and b are also uh

848
00:27:32,320 --> 00:27:34,000
i didn't mean all these examples to be

849
00:27:34,000 --> 00:27:36,480
from google i should have uh

850
00:27:36,480 --> 00:27:38,159
yeah i should have uh

851
00:27:38,159 --> 00:27:40,080
checked this more carefully but um

852
00:27:40,080 --> 00:27:40,960
uh

853
00:27:40,960 --> 00:27:42,880
uh and did a

854
00:27:42,880 --> 00:27:44,799
good use after free that you can go and

855
00:27:44,799 --> 00:27:46,799
read up about as well uh recently in the

856
00:27:46,799 --> 00:27:48,399
ios kernel

857
00:27:48,399 --> 00:27:52,000
and this also kind of displays how

858
00:27:52,000 --> 00:27:53,679
having a really good working knowledge

859
00:27:53,679 --> 00:27:55,520
of what you're looking at and

860
00:27:55,520 --> 00:27:57,360
building one little step on top of the

861
00:27:57,360 --> 00:27:58,559
other can

862
00:27:58,559 --> 00:28:01,200
result in an interesting vulnerability

863
00:28:01,200 --> 00:28:02,640
without going into too much of the

864
00:28:02,640 --> 00:28:04,559
details basically he

865
00:28:04,559 --> 00:28:06,960
uh identified an api that he thought was

866
00:28:06,960 --> 00:28:09,679
quite quirky

867
00:28:09,919 --> 00:28:12,720
in simple terms it was a function

868
00:28:12,720 --> 00:28:14,799
designed to take a port object and add a

869
00:28:14,799 --> 00:28:16,880
reference count to it

870
00:28:16,880 --> 00:28:19,120
and he noticed that in one particular

871
00:28:19,120 --> 00:28:20,960
case it won't actually

872
00:28:20,960 --> 00:28:22,640
it won't actually be able to reference

873
00:28:22,640 --> 00:28:26,240
count it and it will leave it as it was

874
00:28:26,240 --> 00:28:30,080
the second thing he then found out is um

875
00:28:30,080 --> 00:28:32,640
that function signals uh when it's

876
00:28:32,640 --> 00:28:34,080
unable to add a reference count but

877
00:28:34,080 --> 00:28:35,600
there's one case where the function gets

878
00:28:35,600 --> 00:28:36,480
called

879
00:28:36,480 --> 00:28:38,320
where they never actually check that and

880
00:28:38,320 --> 00:28:39,840
the reason they never actually check it

881
00:28:39,840 --> 00:28:42,159
in that particular case is because it's

882
00:28:42,159 --> 00:28:45,200
basically impossible for it to to um for

883
00:28:45,200 --> 00:28:46,720
the port to be in the particular state

884
00:28:46,720 --> 00:28:48,960
where it won't reference count um where

885
00:28:48,960 --> 00:28:51,919
he uh when it gets called there um but

886
00:28:51,919 --> 00:28:53,679
then he was able to apply his knowledge

887
00:28:53,679 --> 00:28:56,159
and go well is it really impossible um

888
00:28:56,159 --> 00:28:58,640
uh it's it's nearly impossible and

889
00:28:58,640 --> 00:29:00,240
basically um

890
00:29:00,240 --> 00:29:03,279
by having knowledge of um how some of uh

891
00:29:03,279 --> 00:29:04,880
you know mark messaging and the port

892
00:29:04,880 --> 00:29:07,279
port subsystem worked in ios he was able

893
00:29:07,279 --> 00:29:08,720
to construct a race condition

894
00:29:08,720 --> 00:29:11,520
essentially where um he could cause

895
00:29:11,520 --> 00:29:13,200
support to be in the supposedly

896
00:29:13,200 --> 00:29:15,919
impossible state and trigger the um

897
00:29:15,919 --> 00:29:18,000
trigger the uh vulnerability

898
00:29:18,000 --> 00:29:20,480
that results in a use after free so it's

899
00:29:20,480 --> 00:29:22,640
kind of um so a lot of vulnerabilities

900
00:29:22,640 --> 00:29:23,919
are like that where it's not just a

901
00:29:23,919 --> 00:29:25,120
straight-up integer overflow or

902
00:29:25,120 --> 00:29:27,279
something it involves having several

903
00:29:27,279 --> 00:29:29,279
pieces of context to understand what

904
00:29:29,279 --> 00:29:30,320
you're looking at and what a

905
00:29:30,320 --> 00:29:32,720
vulnerability might look like

906
00:29:32,720 --> 00:29:34,080
the other thing about reading code of

907
00:29:34,080 --> 00:29:36,480
course is exploitation is really useful

908
00:29:36,480 --> 00:29:39,039
for exploitation most generic techniques

909
00:29:39,039 --> 00:29:42,080
don't really work anymore in a lot of in

910
00:29:42,080 --> 00:29:44,000
a lot of situations

911
00:29:44,000 --> 00:29:46,880
and by looking by

912
00:29:46,880 --> 00:29:48,320
really understanding the code that

913
00:29:48,320 --> 00:29:50,159
you're looking at you

914
00:29:50,159 --> 00:29:52,159
understand the mechanics of the weird

915
00:29:52,159 --> 00:29:54,240
machines that are specific to this

916
00:29:54,240 --> 00:29:56,399
particular program

917
00:29:56,399 --> 00:29:58,880
so i once found a vulnerability in flash

918
00:29:58,880 --> 00:30:01,760
that i uh that i published and

919
00:30:01,760 --> 00:30:04,320
the vulnerability itself was was not a

920
00:30:04,320 --> 00:30:05,679
very good one

921
00:30:05,679 --> 00:30:07,760
it allowed you to write an integer that

922
00:30:07,760 --> 00:30:10,559
you controlled to a location

923
00:30:10,559 --> 00:30:12,240
sorry it allowed you to write an integer

924
00:30:12,240 --> 00:30:14,480
to a location that you controlled but

925
00:30:14,480 --> 00:30:15,919
that location had to be four byte

926
00:30:15,919 --> 00:30:17,600
aligned so

927
00:30:17,600 --> 00:30:19,600
you couldn't do misaligned writes and

928
00:30:19,600 --> 00:30:21,279
also you couldn't control what the

929
00:30:21,279 --> 00:30:23,120
integer was it was

930
00:30:23,120 --> 00:30:23,919
not

931
00:30:23,919 --> 00:30:26,159
it was actually a really low number that

932
00:30:26,159 --> 00:30:28,640
you couldn't really control um so people

933
00:30:28,640 --> 00:30:30,799
familiar with exploitation will

934
00:30:30,799 --> 00:30:32,240
understand that this is not a very good

935
00:30:32,240 --> 00:30:34,000
primitive um

936
00:30:34,000 --> 00:30:35,360
but i published this paper where i'm

937
00:30:35,360 --> 00:30:38,640
said where i basically said you can um

938
00:30:38,640 --> 00:30:40,880
if if you write any low number integer

939
00:30:40,880 --> 00:30:42,799
to this table over here that the

940
00:30:42,799 --> 00:30:44,559
actionscript virtual machine uses you

941
00:30:44,559 --> 00:30:45,919
can basically

942
00:30:45,919 --> 00:30:48,240
um confuse how it interprets uh

943
00:30:48,240 --> 00:30:50,399
actionscript instructions and then give

944
00:30:50,399 --> 00:30:52,720
it a actionscript function that

945
00:30:52,720 --> 00:30:55,279
basically uh it'll get confused and then

946
00:30:55,279 --> 00:30:57,039
allow you to execute arbitrary code

947
00:30:57,039 --> 00:30:58,240
reliably

948
00:30:58,240 --> 00:30:59,360
um

949
00:30:59,360 --> 00:31:02,000
so people that read that paper thought

950
00:31:02,000 --> 00:31:04,240
that this was an amazing leap of logic

951
00:31:04,240 --> 00:31:05,919
to find this bug completely unrelated to

952
00:31:05,919 --> 00:31:07,519
actionscript and then

953
00:31:07,519 --> 00:31:09,840
uh you know applying it over here but

954
00:31:09,840 --> 00:31:11,440
really it was the other way around i'd

955
00:31:11,440 --> 00:31:14,480
reversed a a large part of the

956
00:31:14,480 --> 00:31:16,399
actionscript virtual machine as part of

957
00:31:16,399 --> 00:31:18,799
the vulnerability research phase

958
00:31:18,799 --> 00:31:20,880
and so i was familiar with it and when i

959
00:31:20,880 --> 00:31:22,960
found this bug over here i was like oh

960
00:31:22,960 --> 00:31:24,799
that thing i've already researched is is

961
00:31:24,799 --> 00:31:26,960
useful for this

962
00:31:26,960 --> 00:31:28,240
and so

963
00:31:28,240 --> 00:31:30,480
i think that's a very common strategy

964
00:31:30,480 --> 00:31:32,960
especially like i said since a lot of

965
00:31:32,960 --> 00:31:35,039
generic exploitation techniques don't

966
00:31:35,039 --> 00:31:36,559
work being really familiar with the

967
00:31:36,559 --> 00:31:37,919
program you're looking at is going to be

968
00:31:37,919 --> 00:31:40,640
necessary anyway for um for doing

969
00:31:40,640 --> 00:31:42,640
exploitation

970
00:31:42,640 --> 00:31:44,720
so i guess my maxim is sort of the more

971
00:31:44,720 --> 00:31:47,600
you understand about how a program works

972
00:31:47,600 --> 00:31:49,360
the better equipped you are to find bugs

973
00:31:49,360 --> 00:31:52,399
and to exploit them

974
00:31:52,559 --> 00:31:53,679
um

975
00:31:53,679 --> 00:31:55,440
by the way the best way to understand

976
00:31:55,440 --> 00:31:57,600
how something works is to explain it to

977
00:31:57,600 --> 00:31:58,799
someone else

978
00:31:58,799 --> 00:32:00,880
whether you're doing a presentation a

979
00:32:00,880 --> 00:32:02,240
blog post

980
00:32:02,240 --> 00:32:04,640
um a book what or training session or

981
00:32:04,640 --> 00:32:07,039
whatever

982
00:32:07,279 --> 00:32:09,039
it is amazing how many times i've

983
00:32:09,039 --> 00:32:10,640
written papers for things that i

984
00:32:10,640 --> 00:32:12,559
basically thought i knew back to front

985
00:32:12,559 --> 00:32:15,039
and how many blind spots i realized i

986
00:32:15,039 --> 00:32:17,600
had writing the paper going oh my god

987
00:32:17,600 --> 00:32:19,360
this thing that i totally thought i

988
00:32:19,360 --> 00:32:21,440
understand because when you're actually

989
00:32:21,440 --> 00:32:23,440
writing it

990
00:32:23,440 --> 00:32:24,720
you're basically

991
00:32:24,720 --> 00:32:26,320
when you understand it for yourself you

992
00:32:26,320 --> 00:32:28,559
sort of take mental shortcuts

993
00:32:28,559 --> 00:32:29,840
that you don't really notice that you're

994
00:32:29,840 --> 00:32:31,440
taking and when you're forced to write

995
00:32:31,440 --> 00:32:33,360
it down or explain it to someone else

996
00:32:33,360 --> 00:32:35,919
they'll ask you question questions where

997
00:32:35,919 --> 00:32:38,320
you realize you have no idea

998
00:32:38,320 --> 00:32:40,080
and that there's totally a blind spot in

999
00:32:40,080 --> 00:32:41,600
there

1000
00:32:41,600 --> 00:32:44,880
i actually found a um explaining

1001
00:32:44,880 --> 00:32:46,240
i actually found a remote send mail

1002
00:32:46,240 --> 00:32:49,519
vulnerability this way uh some years ago

1003
00:32:49,519 --> 00:32:51,039
when i was writing out of software

1004
00:32:51,039 --> 00:32:53,039
security assessment

1005
00:32:53,039 --> 00:32:54,720
i was writing the chapter on signal

1006
00:32:54,720 --> 00:32:56,960
handling which is pretty straightforward

1007
00:32:56,960 --> 00:32:58,799
it's got an api which has some nuances

1008
00:32:58,799 --> 00:33:01,279
that were different in linux to bsd

1009
00:33:01,279 --> 00:33:04,080
but basically i i knew it all um pretty

1010
00:33:04,080 --> 00:33:04,880
well

1011
00:33:04,880 --> 00:33:06,640
but the process of writing that chapter

1012
00:33:06,640 --> 00:33:08,559
i started to think about

1013
00:33:08,559 --> 00:33:10,559
you know interesting bugs that could

1014
00:33:10,559 --> 00:33:11,760
occur from signal handling

1015
00:33:11,760 --> 00:33:13,039
vulnerabilities

1016
00:33:13,039 --> 00:33:15,360
and the more i thought about it um i i'd

1017
00:33:15,360 --> 00:33:18,000
recently read like um i was pretty

1018
00:33:18,000 --> 00:33:20,080
familiar at the time with um both open

1019
00:33:20,080 --> 00:33:22,640
ssh and send mail so and i knew they

1020
00:33:22,640 --> 00:33:24,399
both used um

1021
00:33:24,399 --> 00:33:26,720
you know signal handling and so i wanted

1022
00:33:26,720 --> 00:33:29,120
to see if any of my ideas applied to

1023
00:33:29,120 --> 00:33:31,200
those code bases and so i looked at open

1024
00:33:31,200 --> 00:33:32,640
ssh first

1025
00:33:32,640 --> 00:33:35,760
and i did find a bug in that um it was

1026
00:33:35,760 --> 00:33:37,600
less interesting though like you could

1027
00:33:37,600 --> 00:33:39,039
trigger a crash but it was basically

1028
00:33:39,039 --> 00:33:41,519
unexploitable and furthermore it was in

1029
00:33:41,519 --> 00:33:43,760
um kerberos which was off by default at

1030
00:33:43,760 --> 00:33:45,679
the time and not really used

1031
00:33:45,679 --> 00:33:46,480
um

1032
00:33:46,480 --> 00:33:48,880
although it was pretty cool being able

1033
00:33:48,880 --> 00:33:50,480
to tell my friend like hey i found this

1034
00:33:50,480 --> 00:33:52,720
new bug in openssh and he goes okay

1035
00:33:52,720 --> 00:33:54,960
which function then i go main

1036
00:33:54,960 --> 00:33:56,159
um

1037
00:33:56,159 --> 00:33:58,399
so uh that was kind of cool but then i

1038
00:33:58,399 --> 00:34:00,480
switched over to looking at sendmail

1039
00:34:00,480 --> 00:34:01,919
which i'd looked at many times before

1040
00:34:01,919 --> 00:34:03,840
but i guess never really paid super

1041
00:34:03,840 --> 00:34:07,840
close attention to the signal handling

1042
00:34:19,280 --> 00:34:20,719
something that i thought i knew very

1043
00:34:20,719 --> 00:34:22,959
well

1044
00:34:24,000 --> 00:34:25,679
there's a lot to talk about in what

1045
00:34:25,679 --> 00:34:26,879
you're really looking for when you're

1046
00:34:26,879 --> 00:34:28,320
doing vulnerability research i actually

1047
00:34:28,320 --> 00:34:31,760
had this whole bit about how to practice

1048
00:34:31,760 --> 00:34:33,839
becoming good at code reading because

1049
00:34:33,839 --> 00:34:35,918
it's quite a distinct still skill from

1050
00:34:35,918 --> 00:34:37,520
writing code

1051
00:34:37,520 --> 00:34:40,000
and i think there's a lot involved in

1052
00:34:40,000 --> 00:34:42,560
reading diverse code bases even senior

1053
00:34:42,560 --> 00:34:45,040
developers i think are not

1054
00:34:45,040 --> 00:34:46,800
i mean quite a lot of them are not as

1055
00:34:46,800 --> 00:34:49,359
good at reading other people's code

1056
00:34:49,359 --> 00:34:52,079
as you might expect

1057
00:34:52,079 --> 00:34:53,599
but i had to kind of cut it all out and

1058
00:34:53,599 --> 00:34:55,599
i will follow up with it but essentially

1059
00:34:55,599 --> 00:34:58,320
what i'm looking for really is available

1060
00:34:58,320 --> 00:35:00,720
attack surface and complexity

1061
00:35:00,720 --> 00:35:02,800
either of these are the bug hunters best

1062
00:35:02,800 --> 00:35:04,000
friend

1063
00:35:04,000 --> 00:35:05,920
um

1064
00:35:05,920 --> 00:35:06,800
uh

1065
00:35:06,800 --> 00:35:08,320
one thing i i kind of wanted to mention

1066
00:35:08,320 --> 00:35:09,599
about attack surface obviously the

1067
00:35:09,599 --> 00:35:11,760
bigger attack surface are better

1068
00:35:11,760 --> 00:35:13,359
but um

1069
00:35:13,359 --> 00:35:14,800
you know

1070
00:35:14,800 --> 00:35:16,960
one thing that i i like to keep in mind

1071
00:35:16,960 --> 00:35:18,240
after i've looked at the most obvious

1072
00:35:18,240 --> 00:35:21,440
attack surface is that even uh is that

1073
00:35:21,440 --> 00:35:22,880
quite a lot of the attack surface can be

1074
00:35:22,880 --> 00:35:26,079
a little bit indirect um so returning to

1075
00:35:26,079 --> 00:35:26,960
the

1076
00:35:26,960 --> 00:35:29,680
uh the browser example we have before um

1077
00:35:29,680 --> 00:35:30,880
you know looking at something like

1078
00:35:30,880 --> 00:35:33,280
array.concat might be a direct attack

1079
00:35:33,280 --> 00:35:35,680
part of the attack surface but then

1080
00:35:35,680 --> 00:35:38,400
looking at jit generation um like a lot

1081
00:35:38,400 --> 00:35:39,599
of the um

1082
00:35:39,599 --> 00:35:41,280
a lot of the modern bugs is kind of an

1083
00:35:41,280 --> 00:35:43,359
indirect attack surface it's like a

1084
00:35:43,359 --> 00:35:45,119
second order attack surface you might

1085
00:35:45,119 --> 00:35:46,640
say

1086
00:35:46,640 --> 00:35:48,640
even one interesting thing is even

1087
00:35:48,640 --> 00:35:50,400
mitigations are an attack surface

1088
00:35:50,400 --> 00:35:51,920
obviously mitigations are put there to

1089
00:35:51,920 --> 00:35:53,839
prevent exploitation

1090
00:35:53,839 --> 00:35:56,400
but they're introducing complexity

1091
00:35:56,400 --> 00:35:59,200
and hence uh attack surface and there's

1092
00:35:59,200 --> 00:36:01,599
been a couple of pretty good ones um

1093
00:36:01,599 --> 00:36:02,800
there was

1094
00:36:02,800 --> 00:36:05,359
there was a um mitigation that um adobe

1095
00:36:05,359 --> 00:36:08,079
put into flash a few years ago because

1096
00:36:08,079 --> 00:36:09,520
there was a lot of flash vulnerabilities

1097
00:36:09,520 --> 00:36:11,040
coming out at the time

1098
00:36:11,040 --> 00:36:12,160
and

1099
00:36:12,160 --> 00:36:14,079
they changed their heap implementation

1100
00:36:14,079 --> 00:36:17,040
to basically do delayed freeze and

1101
00:36:17,040 --> 00:36:19,440
the idea was to make heat grooming more

1102
00:36:19,440 --> 00:36:20,880
difficult so

1103
00:36:20,880 --> 00:36:23,280
exploiting flash would be more difficult

1104
00:36:23,280 --> 00:36:24,960
but in doing so they actually introduced

1105
00:36:24,960 --> 00:36:26,720
a vulnerability in their heat management

1106
00:36:26,720 --> 00:36:29,280
algorithm that led to direct memory

1107
00:36:29,280 --> 00:36:30,400
corruption

1108
00:36:30,400 --> 00:36:32,880
so like basically their mitigation was

1109
00:36:32,880 --> 00:36:34,320
worse than the thing that they were

1110
00:36:34,320 --> 00:36:37,280
trying to mitigate against

1111
00:36:38,880 --> 00:36:41,920
also um your initial perception of the

1112
00:36:41,920 --> 00:36:43,920
attack surface can sometimes be naive

1113
00:36:43,920 --> 00:36:45,760
before you start looking at a piece of

1114
00:36:45,760 --> 00:36:49,040
software um the best the best thing that

1115
00:36:49,040 --> 00:36:51,040
i like is when you find a hidden or non

1116
00:36:51,040 --> 00:36:52,839
obvious attack surface

1117
00:36:52,839 --> 00:36:56,480
um usually this is in the form of like a

1118
00:36:56,480 --> 00:36:59,359
vendor a vendor value-added feature that

1119
00:36:59,359 --> 00:37:01,200
they've added for themselves to use to

1120
00:37:01,200 --> 00:37:03,440
make their devices interact nicer or

1121
00:37:03,440 --> 00:37:05,040
something like that

1122
00:37:05,040 --> 00:37:06,960
microsoft used to be the kings of this

1123
00:37:06,960 --> 00:37:08,880
and you'd come across an attack surface

1124
00:37:08,880 --> 00:37:09,760
that

1125
00:37:09,760 --> 00:37:11,119
they've never mentioned and no one's

1126
00:37:11,119 --> 00:37:13,760
ever mentioned before and

1127
00:37:13,760 --> 00:37:15,119
you know i remember thinking some of

1128
00:37:15,119 --> 00:37:17,520
those times like this attack surface is

1129
00:37:17,520 --> 00:37:19,839
the vulnerability like a bug is just a

1130
00:37:19,839 --> 00:37:22,480
detail there's definitely some in here

1131
00:37:22,480 --> 00:37:24,400
um and you'll sort of see evidence of

1132
00:37:24,400 --> 00:37:26,480
this sometimes when someone discovers a

1133
00:37:26,480 --> 00:37:28,000
new attack surface and then there's like

1134
00:37:28,000 --> 00:37:29,760
a hundred bugs that come out in

1135
00:37:29,760 --> 00:37:30,880
succession

1136
00:37:30,880 --> 00:37:33,520
uh over the next two months by uh when

1137
00:37:33,520 --> 00:37:34,960
they release the first bug and everyone

1138
00:37:34,960 --> 00:37:38,240
else like looks at it

1139
00:37:39,760 --> 00:37:42,160
complexity is also really good

1140
00:37:42,160 --> 00:37:45,200
and it is plentiful firstly

1141
00:37:45,200 --> 00:37:47,200
the things that programs are actually

1142
00:37:47,200 --> 00:37:48,560
trying to achieve

1143
00:37:48,560 --> 00:37:51,200
is really complex um at every layer from

1144
00:37:51,200 --> 00:37:53,839
the from the cpu down to the app up to

1145
00:37:53,839 --> 00:37:56,960
the application layer um but in addition

1146
00:37:56,960 --> 00:38:00,079
to that um you know a lot of complexity

1147
00:38:00,079 --> 00:38:02,480
uh is a little bit unnecessary but um

1148
00:38:02,480 --> 00:38:05,200
adds to the um the attack surface for

1149
00:38:05,200 --> 00:38:07,200
the for the bug hunter

1150
00:38:07,200 --> 00:38:09,680
um firstly obviously feature driven

1151
00:38:09,680 --> 00:38:12,160
adding new features all the time is uh

1152
00:38:12,160 --> 00:38:16,000
often um very quickly put together uh to

1153
00:38:16,000 --> 00:38:17,680
you know sort of

1154
00:38:17,680 --> 00:38:20,000
to define themselves as a superior

1155
00:38:20,000 --> 00:38:23,280
product to their competitors um i when i

1156
00:38:23,280 --> 00:38:24,880
used to do browsers for a couple of

1157
00:38:24,880 --> 00:38:26,480
years um

1158
00:38:26,480 --> 00:38:28,400
whenever i i started thinking that i

1159
00:38:28,400 --> 00:38:29,359
wasn't going to find any more

1160
00:38:29,359 --> 00:38:31,920
vulnerabilities i was very excited

1161
00:38:31,920 --> 00:38:34,800
that w3c had decided to just put in a

1162
00:38:34,800 --> 00:38:37,359
whole bunch of random new features

1163
00:38:37,359 --> 00:38:38,240
and

1164
00:38:38,240 --> 00:38:39,760
so they always kept the attack surface

1165
00:38:39,760 --> 00:38:42,320
kind of fresh

1166
00:38:43,119 --> 00:38:45,119
legacy support obviously

1167
00:38:45,119 --> 00:38:48,000
is another really great one

1168
00:38:48,000 --> 00:38:49,920
usually in the style of downgrade

1169
00:38:49,920 --> 00:38:51,119
attacks and things like that but

1170
00:38:51,119 --> 00:38:53,680
backwards compatibility is always

1171
00:38:53,680 --> 00:38:57,119
adds a lot of unnecessary complexity

1172
00:38:57,119 --> 00:38:58,800
and then

1173
00:38:58,800 --> 00:39:02,640
lastly avoidable complexity um so

1174
00:39:02,640 --> 00:39:04,960
uh thomas julian uh however

1175
00:39:04,960 --> 00:39:07,280
uh a couple of years ago did this really

1176
00:39:07,280 --> 00:39:08,880
good keynote that i urge you to go and

1177
00:39:08,880 --> 00:39:10,160
read called the anomaly of cheap

1178
00:39:10,160 --> 00:39:11,440
complexity

1179
00:39:11,440 --> 00:39:14,720
and he was talking largely about

1180
00:39:14,720 --> 00:39:16,880
like hardware devices really

1181
00:39:16,880 --> 00:39:19,440
but everything he says applies

1182
00:39:19,440 --> 00:39:21,520
equally to software and the thrust of

1183
00:39:21,520 --> 00:39:24,000
his talk was sort of that

1184
00:39:24,000 --> 00:39:25,680
when people are engineering solutions

1185
00:39:25,680 --> 00:39:27,040
for something

1186
00:39:27,040 --> 00:39:28,800
it is cheaper and more efficient for

1187
00:39:28,800 --> 00:39:29,760
them to

1188
00:39:29,760 --> 00:39:31,920
make something more complex than more

1189
00:39:31,920 --> 00:39:34,880
simple um because

1190
00:39:34,880 --> 00:39:36,560
instead of reinventing the wheel and

1191
00:39:36,560 --> 00:39:37,920
like writing all the code from the

1192
00:39:37,920 --> 00:39:40,079
ground up and doing the minimum set of

1193
00:39:40,079 --> 00:39:42,800
services that they want they it's much

1194
00:39:42,800 --> 00:39:44,960
cheaper to just get

1195
00:39:44,960 --> 00:39:47,119
libraries and you know operating systems

1196
00:39:47,119 --> 00:39:49,599
or whatever that already exist and sort

1197
00:39:49,599 --> 00:39:51,520
of um string them together so that you

1198
00:39:51,520 --> 00:39:52,800
don't have to do all of the work

1199
00:39:52,800 --> 00:39:53,839
yourself

1200
00:39:53,839 --> 00:39:56,000
um the trade-off of that though is that

1201
00:39:56,000 --> 00:39:57,359
a lot of these

1202
00:39:57,359 --> 00:39:59,440
libraries and so forth are way more

1203
00:39:59,440 --> 00:40:01,119
complicated than what you actually need

1204
00:40:01,119 --> 00:40:03,119
it for because their general purpose and

1205
00:40:03,119 --> 00:40:04,240
so

1206
00:40:04,240 --> 00:40:06,079
you end up pulling in the thing that you

1207
00:40:06,079 --> 00:40:08,640
want to use but also a whole bunch of

1208
00:40:08,640 --> 00:40:10,400
other stuff that

1209
00:40:10,400 --> 00:40:12,800
you may not have intended

1210
00:40:12,800 --> 00:40:14,720
for your program to utilize

1211
00:40:14,720 --> 00:40:15,839
and

1212
00:40:15,839 --> 00:40:17,599
sometimes it's

1213
00:40:17,599 --> 00:40:20,319
it's it's difficult to disable those

1214
00:40:20,319 --> 00:40:22,560
features or impossible and sometimes you

1215
00:40:22,560 --> 00:40:25,119
don't even know about them um so we all

1216
00:40:25,119 --> 00:40:27,599
saw this like log4j vulnerability that

1217
00:40:27,599 --> 00:40:29,280
came out which is kind of a good example

1218
00:40:29,280 --> 00:40:30,160
of this

1219
00:40:30,160 --> 00:40:32,720
um essentially everyone using the same

1220
00:40:32,720 --> 00:40:35,599
library which was a little

1221
00:40:35,599 --> 00:40:37,359
a little bit of an overpowered component

1222
00:40:37,359 --> 00:40:39,760
for what it was supposed to achieve

1223
00:40:39,760 --> 00:40:40,720
you know

1224
00:40:40,720 --> 00:40:42,720
basically it just logs error messages

1225
00:40:42,720 --> 00:40:43,839
right

1226
00:40:43,839 --> 00:40:45,760
but it had this bonus formatting

1227
00:40:45,760 --> 00:40:48,000
functionality that among other things

1228
00:40:48,000 --> 00:40:49,760
kind of allowed you to download and run

1229
00:40:49,760 --> 00:40:51,520
arbitrary code

1230
00:40:51,520 --> 00:40:53,680
now this is a

1231
00:40:53,680 --> 00:40:55,920
it was part of um to to do custom

1232
00:40:55,920 --> 00:40:58,240
formatting of error messages but this is

1233
00:40:58,240 --> 00:41:00,240
um you know a feature that probably

1234
00:41:00,240 --> 00:41:01,839
quite a lot of the consumers of this

1235
00:41:01,839 --> 00:41:02,800
library

1236
00:41:02,800 --> 00:41:05,680
didn't really need um especially pulling

1237
00:41:05,680 --> 00:41:07,760
down uh you know remote

1238
00:41:07,760 --> 00:41:09,040
uh

1239
00:41:09,040 --> 00:41:11,680
uh pulling down code remotely um and

1240
00:41:11,680 --> 00:41:13,119
probably quite a lot of the consumers

1241
00:41:13,119 --> 00:41:15,040
weren't even aware of its existence they

1242
00:41:15,040 --> 00:41:16,160
just pulled it in because they're like

1243
00:41:16,160 --> 00:41:17,760
oh there's someone's already written a

1244
00:41:17,760 --> 00:41:20,400
logging subsystem why should i do that

1245
00:41:20,400 --> 00:41:23,359
and so these kind of bugs are really

1246
00:41:23,359 --> 00:41:25,839
interesting

1247
00:41:26,880 --> 00:41:29,359
borrowing ideas is

1248
00:41:29,359 --> 00:41:30,960
is another fun one

1249
00:41:30,960 --> 00:41:32,880
i sort of talked about before how diffs

1250
00:41:32,880 --> 00:41:34,640
are really useful for

1251
00:41:34,640 --> 00:41:36,880
seeing what vulnerabilities look like in

1252
00:41:36,880 --> 00:41:40,800
the context of a particular code base

1253
00:41:41,119 --> 00:41:43,040
but also just the bug trackers in

1254
00:41:43,040 --> 00:41:44,480
general

1255
00:41:44,480 --> 00:41:46,800
they're really interesting to see what

1256
00:41:46,800 --> 00:41:49,040
kind of bugs have been present in the

1257
00:41:49,040 --> 00:41:50,560
code base before

1258
00:41:50,560 --> 00:41:52,160
some of them security bugs but some of

1259
00:41:52,160 --> 00:41:53,520
them just

1260
00:41:53,520 --> 00:41:56,319
crazy bugs that they've run into

1261
00:41:56,319 --> 00:41:58,160
during the lifespan of this program in

1262
00:41:58,160 --> 00:41:59,839
their operation

1263
00:41:59,839 --> 00:42:00,640
and

1264
00:42:00,640 --> 00:42:02,000
you know some of those some of those

1265
00:42:02,000 --> 00:42:04,079
things they don't recognize

1266
00:42:04,079 --> 00:42:06,480
uh had security consequences or perhaps

1267
00:42:06,480 --> 00:42:08,000
didn't have security consequences at the

1268
00:42:08,000 --> 00:42:09,839
time but now you're like oh that idea

1269
00:42:09,839 --> 00:42:11,680
actually if i can replicate that now

1270
00:42:11,680 --> 00:42:13,520
that might be problematic

1271
00:42:13,520 --> 00:42:16,480
um so it's good for inspiring new ideas

1272
00:42:16,480 --> 00:42:18,079
variants um

1273
00:42:18,079 --> 00:42:21,280
in other code bases and uh you you can

1274
00:42:21,280 --> 00:42:22,800
also um

1275
00:42:22,800 --> 00:42:24,000
uh

1276
00:42:24,000 --> 00:42:26,319
you know when you when you have um

1277
00:42:26,319 --> 00:42:28,160
these these new patterns you can sort of

1278
00:42:28,160 --> 00:42:30,960
think about um you know perhaps how to

1279
00:42:30,960 --> 00:42:33,839
automate them as well

1280
00:42:33,839 --> 00:42:35,920
more than one person has also told me

1281
00:42:35,920 --> 00:42:37,760
and this is totally mean but i guess

1282
00:42:37,760 --> 00:42:40,400
it's viable is they track commits by

1283
00:42:40,400 --> 00:42:42,880
specific developers that they think make

1284
00:42:42,880 --> 00:42:45,359
security uh vulnerability

1285
00:42:45,359 --> 00:42:46,319
uh

1286
00:42:46,319 --> 00:42:48,160
security consequential mistakes often

1287
00:42:48,160 --> 00:42:49,839
and they track all their commits and go

1288
00:42:49,839 --> 00:42:52,480
and look at all their code um which is

1289
00:42:52,480 --> 00:42:55,920
kind of rude but uh i guess it works

1290
00:42:55,920 --> 00:42:58,880
um comments in the code also uh comments

1291
00:42:58,880 --> 00:43:00,800
in the in in the code base itself is

1292
00:43:00,800 --> 00:43:02,560
also pretty useful because again they

1293
00:43:02,560 --> 00:43:04,160
document things that you might never

1294
00:43:04,160 --> 00:43:05,520
have thought of

1295
00:43:05,520 --> 00:43:08,640
i've found bugs in um in one or two

1296
00:43:08,640 --> 00:43:10,400
applications before because i've looked

1297
00:43:10,400 --> 00:43:12,720
at comments and they've sort of said uh

1298
00:43:12,720 --> 00:43:14,480
they've sort of talked about a complex

1299
00:43:14,480 --> 00:43:16,880
bit and and why they did it and then i'm

1300
00:43:16,880 --> 00:43:19,200
like oh well i wonder how the other guys

1301
00:43:19,200 --> 00:43:22,000
got around this and that they hadn't

1302
00:43:22,000 --> 00:43:23,440
essentially

1303
00:43:23,440 --> 00:43:25,440
um

1304
00:43:25,440 --> 00:43:28,160
so document your findings um

1305
00:43:28,160 --> 00:43:29,760
developers and i think vulnerability

1306
00:43:29,760 --> 00:43:31,040
researchers are pretty poor at

1307
00:43:31,040 --> 00:43:33,440
documenting in general um

1308
00:43:33,440 --> 00:43:35,520
but uh

1309
00:43:35,520 --> 00:43:38,240
when i talked about um you know the

1310
00:43:38,240 --> 00:43:40,240
the stuff related to failure one of the

1311
00:43:40,240 --> 00:43:42,319
things i said was uh

1312
00:43:42,319 --> 00:43:43,280
you know you're going to want to come

1313
00:43:43,280 --> 00:43:45,599
back to these code bases later and

1314
00:43:45,599 --> 00:43:46,720
uh

1315
00:43:46,720 --> 00:43:48,160
for the for that for you to do that

1316
00:43:48,160 --> 00:43:49,520
effectively you kind of have to take

1317
00:43:49,520 --> 00:43:51,040
notes about the

1318
00:43:51,040 --> 00:43:52,160
bug candidates you had the

1319
00:43:52,160 --> 00:43:54,800
idiosyncrasies you had data structures

1320
00:43:54,800 --> 00:43:56,560
and algorithms

1321
00:43:56,560 --> 00:43:58,400
and it's really important to document

1322
00:43:58,400 --> 00:44:01,119
failed ideas it's important as important

1323
00:44:01,119 --> 00:44:02,560
as documenting

1324
00:44:02,560 --> 00:44:04,240
all the other stuff

1325
00:44:04,240 --> 00:44:06,319
i've wasted quite a lot of time in my

1326
00:44:06,319 --> 00:44:07,359
life

1327
00:44:07,359 --> 00:44:09,760
by going back to a code base and seeing

1328
00:44:09,760 --> 00:44:10,720
something

1329
00:44:10,720 --> 00:44:11,760
and i'm like that looks like a

1330
00:44:11,760 --> 00:44:14,480
vulnerability and not far into it i

1331
00:44:14,480 --> 00:44:16,640
realized that i've looked at this exact

1332
00:44:16,640 --> 00:44:19,280
thing before and decided it wasn't a bug

1333
00:44:19,280 --> 00:44:21,359
but i never wrote down why so

1334
00:44:21,359 --> 00:44:23,359
usually what i think is i was on crack

1335
00:44:23,359 --> 00:44:25,520
last time this is totally bug

1336
00:44:25,520 --> 00:44:28,720
and i do the exact same process of

1337
00:44:28,720 --> 00:44:30,560
spending hours chasing it down before

1338
00:44:30,560 --> 00:44:32,079
realizing getting to the end point

1339
00:44:32,079 --> 00:44:34,000
realizing why it wasn't a bug and then

1340
00:44:34,000 --> 00:44:35,599
remembering like oh yeah i discovered

1341
00:44:35,599 --> 00:44:37,760
this last time so

1342
00:44:37,760 --> 00:44:39,680
writing down the ideas that failed and

1343
00:44:39,680 --> 00:44:41,920
why they failed is really useful so when

1344
00:44:41,920 --> 00:44:43,359
you go back you can just check whether

1345
00:44:43,359 --> 00:44:45,040
that particular condition has changed or

1346
00:44:45,040 --> 00:44:46,160
not

1347
00:44:46,160 --> 00:44:47,920
um

1348
00:44:47,920 --> 00:44:50,240
and you know so this is all with the

1349
00:44:50,240 --> 00:44:52,079
idea of having a long term view like i

1350
00:44:52,079 --> 00:44:54,480
have code i have notes on code bases

1351
00:44:54,480 --> 00:44:56,720
that span a decade of that code base and

1352
00:44:56,720 --> 00:44:58,319
so if you're spending any significant

1353
00:44:58,319 --> 00:44:59,520
amount of time

1354
00:44:59,520 --> 00:45:01,520
uh you know looking at a particular code

1355
00:45:01,520 --> 00:45:02,319
base

1356
00:45:02,319 --> 00:45:05,839
these notes will become invaluable

1357
00:45:05,920 --> 00:45:08,319
i sort of talked about this before in

1358
00:45:08,319 --> 00:45:09,760
fact i told you

1359
00:45:09,760 --> 00:45:11,680
i told you guys this already on twitter

1360
00:45:11,680 --> 00:45:14,160
um but i'm not the first person to say

1361
00:45:14,160 --> 00:45:15,440
this um

1362
00:45:15,440 --> 00:45:17,440
if you spent the amount of time putting

1363
00:45:17,440 --> 00:45:18,880
in

1364
00:45:18,880 --> 00:45:20,560
putting in the work to understand how

1365
00:45:20,560 --> 00:45:22,000
particular technology works in a

1366
00:45:22,000 --> 00:45:23,760
codebase works

1367
00:45:23,760 --> 00:45:25,760
one of the best ways to maximize that is

1368
00:45:25,760 --> 00:45:27,119
to look at everyone else who is

1369
00:45:27,119 --> 00:45:29,040
implementing the same thing and seeing

1370
00:45:29,040 --> 00:45:30,640
if they make the same mistakes because

1371
00:45:30,640 --> 00:45:32,560
very frequently they do

1372
00:45:32,560 --> 00:45:33,760
even if they don't make the same

1373
00:45:33,760 --> 00:45:36,079
mistakes

1374
00:45:36,079 --> 00:45:37,920
someone here might carefully avoid a

1375
00:45:37,920 --> 00:45:39,359
mistake but

1376
00:45:39,359 --> 00:45:41,040
because they're going to so much work to

1377
00:45:41,040 --> 00:45:43,520
avoid it it gives you the idea that

1378
00:45:43,520 --> 00:45:45,119
that's a particularly difficult thing to

1379
00:45:45,119 --> 00:45:47,520
avoid and you go and look at the how the

1380
00:45:47,520 --> 00:45:49,680
you know the competition did it so

1381
00:45:49,680 --> 00:45:51,359
whenever i'm looking at something some

1382
00:45:51,359 --> 00:45:52,800
complex component and i sort of

1383
00:45:52,800 --> 00:45:54,480
understand it

1384
00:45:54,480 --> 00:45:55,839
i find it really interesting to look at

1385
00:45:55,839 --> 00:45:57,760
different implementations from my

1386
00:45:57,760 --> 00:45:59,839
original target to see if they've made

1387
00:45:59,839 --> 00:46:00,720
different

1388
00:46:00,720 --> 00:46:02,880
mistakes and incidentally when i'm

1389
00:46:02,880 --> 00:46:04,800
having

1390
00:46:04,800 --> 00:46:06,240
difficulty understanding what a

1391
00:46:06,240 --> 00:46:08,480
particular component is doing sometimes

1392
00:46:08,480 --> 00:46:11,839
i go and look at a different code base

1393
00:46:11,839 --> 00:46:13,280
where perhaps

1394
00:46:13,280 --> 00:46:15,280
their code is laid out in a way that you

1395
00:46:15,280 --> 00:46:18,000
know i can understand more readily

1396
00:46:18,000 --> 00:46:21,280
so it's useful for that as well

1397
00:46:22,400 --> 00:46:24,400
the example i gave before about natalie

1398
00:46:24,400 --> 00:46:26,480
signalbug was actually on a blog post

1399
00:46:26,480 --> 00:46:28,400
that she did that you can go and read

1400
00:46:28,400 --> 00:46:29,440
about

1401
00:46:29,440 --> 00:46:32,160
which is a really good example of this

1402
00:46:32,160 --> 00:46:35,599
she invested the the time she um

1403
00:46:35,599 --> 00:46:36,880
you know her startup cost was

1404
00:46:36,880 --> 00:46:38,720
understanding all of this web rtc and

1405
00:46:38,720 --> 00:46:40,000
the state machines and everything like

1406
00:46:40,000 --> 00:46:42,160
that she'd all invested all this time

1407
00:46:42,160 --> 00:46:44,880
learning about that and so naturally had

1408
00:46:44,880 --> 00:46:47,040
gone and looked at all of the other like

1409
00:46:47,040 --> 00:46:48,480
okay there's a bug in signal how do all

1410
00:46:48,480 --> 00:46:50,880
these other things do it and in that

1411
00:46:50,880 --> 00:46:53,200
blog post she points out vulnerabilities

1412
00:46:53,200 --> 00:46:54,640
in uh

1413
00:46:54,640 --> 00:46:56,560
quite a few other you know messenger

1414
00:46:56,560 --> 00:46:58,800
programs many of them quite similar in

1415
00:46:58,800 --> 00:46:59,920
nature

1416
00:46:59,920 --> 00:47:01,440
um because

1417
00:47:01,440 --> 00:47:02,960
she'd already paid the startup cost and

1418
00:47:02,960 --> 00:47:06,000
so to maximize her her return um you

1419
00:47:06,000 --> 00:47:07,440
know go and look at everyone else that

1420
00:47:07,440 --> 00:47:08,960
did it and see if they make the same

1421
00:47:08,960 --> 00:47:11,839
mistakes

1422
00:47:13,520 --> 00:47:16,880
revisiting code bases is an is a another

1423
00:47:16,880 --> 00:47:18,079
thing that i've sort of talked about

1424
00:47:18,079 --> 00:47:19,200
before

1425
00:47:19,200 --> 00:47:21,520
code bases are not static

1426
00:47:21,520 --> 00:47:23,280
code gets rewritten features are added

1427
00:47:23,280 --> 00:47:24,800
and changed and also the environment is

1428
00:47:24,800 --> 00:47:27,040
not static the state of mitigations and

1429
00:47:27,040 --> 00:47:29,839
stuff like that changes um

1430
00:47:29,839 --> 00:47:32,640
i've had uh for exam and i'm not just

1431
00:47:32,640 --> 00:47:34,160
talking about re-looking at the code

1432
00:47:34,160 --> 00:47:36,319
bases to find new vulnerabilities but

1433
00:47:36,319 --> 00:47:39,119
even to look at failed bugs so

1434
00:47:39,119 --> 00:47:40,079
um

1435
00:47:40,079 --> 00:47:40,880
uh

1436
00:47:40,880 --> 00:47:42,400
when i was talking about documentation

1437
00:47:42,400 --> 00:47:44,160
and um you know recording you know

1438
00:47:44,160 --> 00:47:45,760
failed vulnerabilities

1439
00:47:45,760 --> 00:47:48,640
uh i i had an example um not too long

1440
00:47:48,640 --> 00:47:50,800
ago where i found a vulnerability that

1441
00:47:50,800 --> 00:47:53,040
was like an overflow in a in a data

1442
00:47:53,040 --> 00:47:54,079
structure

1443
00:47:54,079 --> 00:47:56,000
and um the

1444
00:47:56,000 --> 00:47:57,520
the fields that i could override were

1445
00:47:57,520 --> 00:47:59,440
not useful at all they they basically

1446
00:47:59,440 --> 00:48:01,040
weren't used ever again

1447
00:48:01,040 --> 00:48:03,040
i also couldn't overflow far enough to

1448
00:48:03,040 --> 00:48:05,520
overflow into adjacent memory

1449
00:48:05,520 --> 00:48:07,040
to do something useful there so

1450
00:48:07,040 --> 00:48:09,680
essentially the bug was pretty useless

1451
00:48:09,680 --> 00:48:11,440
but i went back to that same code base a

1452
00:48:11,440 --> 00:48:12,800
year later

1453
00:48:12,800 --> 00:48:13,920
and

1454
00:48:13,920 --> 00:48:15,440
they'd added some new features that were

1455
00:48:15,440 --> 00:48:16,960
completely unrelated to the stuff that

1456
00:48:16,960 --> 00:48:18,400
i'd found bug in

1457
00:48:18,400 --> 00:48:19,920
but the consequence of them adding those

1458
00:48:19,920 --> 00:48:21,920
new features were they'd added a couple

1459
00:48:21,920 --> 00:48:24,160
of more members to that data structure

1460
00:48:24,160 --> 00:48:26,640
that i could overflow into and so this

1461
00:48:26,640 --> 00:48:28,559
bug that was useless before suddenly

1462
00:48:28,559 --> 00:48:31,200
became useful because um i was able to

1463
00:48:31,200 --> 00:48:33,280
use these new fields to do to do

1464
00:48:33,280 --> 00:48:36,160
something um to do to do something that

1465
00:48:36,160 --> 00:48:38,240
had security consequences

1466
00:48:38,240 --> 00:48:41,200
i also had uh one other vulnerability um

1467
00:48:41,200 --> 00:48:43,680
several years before that where um

1468
00:48:43,680 --> 00:48:45,760
uh i was really excited when i found it

1469
00:48:45,760 --> 00:48:47,920
and when i went to trigger it

1470
00:48:47,920 --> 00:48:50,319
there was a null dereference that

1471
00:48:50,319 --> 00:48:53,040
triggered on the same code path to to

1472
00:48:53,040 --> 00:48:55,040
where the interesting vulnerability was

1473
00:48:55,040 --> 00:48:57,200
and there was no way around it and so

1474
00:48:57,200 --> 00:48:59,119
that was you know obviously frustrating

1475
00:48:59,119 --> 00:49:00,400
but

1476
00:49:00,400 --> 00:49:01,920
again i went back and looked at that

1477
00:49:01,920 --> 00:49:03,440
code base later and they'd fixed the

1478
00:49:03,440 --> 00:49:05,440
melody reference but not the uh the

1479
00:49:05,440 --> 00:49:08,319
other vulnerability um and so

1480
00:49:08,319 --> 00:49:09,920
having an idea of what bugs you have

1481
00:49:09,920 --> 00:49:11,119
that failed

1482
00:49:11,119 --> 00:49:12,240
and then checking whether those

1483
00:49:12,240 --> 00:49:13,920
conditions are still true

1484
00:49:13,920 --> 00:49:17,119
in um in newer versions of the code base

1485
00:49:17,119 --> 00:49:18,880
can be really useful

1486
00:49:18,880 --> 00:49:20,640
environment the same usually adding

1487
00:49:20,640 --> 00:49:22,559
mitigations and heat pardoning and stuff

1488
00:49:22,559 --> 00:49:24,079
has the effect of making bugs

1489
00:49:24,079 --> 00:49:26,000
unexploitable but

1490
00:49:26,000 --> 00:49:28,160
that's not always the case

1491
00:49:28,160 --> 00:49:28,960
again

1492
00:49:28,960 --> 00:49:31,200
i uh there was one vulnerability i found

1493
00:49:31,200 --> 00:49:32,960
where i could exploit it but not very

1494
00:49:32,960 --> 00:49:36,240
nicely um because uh it was very hard to

1495
00:49:36,240 --> 00:49:38,079
do a particular heap groom and

1496
00:49:38,079 --> 00:49:39,440
essentially when you got it wrong you

1497
00:49:39,440 --> 00:49:41,280
corrupted some metadata on that on the

1498
00:49:41,280 --> 00:49:44,240
heap and it would crash immediately

1499
00:49:44,240 --> 00:49:45,839
and then later on they rewrote their

1500
00:49:45,839 --> 00:49:48,160
heap implementation to remove

1501
00:49:48,160 --> 00:49:49,119
uh

1502
00:49:49,119 --> 00:49:50,800
encoded metadata from the heap and have

1503
00:49:50,800 --> 00:49:53,119
it out of band and it made the exploit

1504
00:49:53,119 --> 00:49:56,000
dramatically more reliable because

1505
00:49:56,000 --> 00:49:57,520
you know if i got the heap groom wrong i

1506
00:49:57,520 --> 00:49:58,720
could just try again and there was no

1507
00:49:58,720 --> 00:50:00,079
consequences

1508
00:50:00,079 --> 00:50:02,800
um and so even though things generally

1509
00:50:02,800 --> 00:50:05,040
get more secure and harder to exploit

1510
00:50:05,040 --> 00:50:08,240
that's not always the case

1511
00:50:09,599 --> 00:50:11,119
this is one of the most key points that

1512
00:50:11,119 --> 00:50:12,400
i want to make

1513
00:50:12,400 --> 00:50:14,000
apart from really understanding the code

1514
00:50:14,000 --> 00:50:15,839
you're looking at is to analyze your

1515
00:50:15,839 --> 00:50:17,920
failures

1516
00:50:17,920 --> 00:50:19,839
vulnerability research

1517
00:50:19,839 --> 00:50:21,280
you're constantly dealing with

1518
00:50:21,280 --> 00:50:23,359
incomplete information

1519
00:50:23,359 --> 00:50:25,280
which is what makes it so hard to stay

1520
00:50:25,280 --> 00:50:27,359
motivated you can look at a code base

1521
00:50:27,359 --> 00:50:28,800
and go did i do everything right and

1522
00:50:28,800 --> 00:50:30,559
there was nothing here to find

1523
00:50:30,559 --> 00:50:31,599
or

1524
00:50:31,599 --> 00:50:32,720
is there things that i'm just

1525
00:50:32,720 --> 00:50:35,599
continually missing and very

1526
00:50:35,599 --> 00:50:36,960
it's not very often where you get a

1527
00:50:36,960 --> 00:50:38,160
chance to

1528
00:50:38,160 --> 00:50:39,280
to have that

1529
00:50:39,280 --> 00:50:41,040
question answered for you

1530
00:50:41,040 --> 00:50:43,119
so of course it's very frustrating when

1531
00:50:43,119 --> 00:50:44,640
you spend a bunch of time looking at a

1532
00:50:44,640 --> 00:50:46,960
code base don't find anything eventually

1533
00:50:46,960 --> 00:50:48,559
abandon it and move on

1534
00:50:48,559 --> 00:50:50,160
and then like three months later someone

1535
00:50:50,160 --> 00:50:52,480
finds this amazing exploit in exactly

1536
00:50:52,480 --> 00:50:54,960
the thing you're looking at

1537
00:50:54,960 --> 00:50:56,000
and

1538
00:50:56,000 --> 00:50:57,119
but

1539
00:50:57,119 --> 00:50:59,359
you can actually use this as a learning

1540
00:50:59,359 --> 00:51:01,359
opportunity and it's a it's a fairly

1541
00:51:01,359 --> 00:51:03,040
unusual one

1542
00:51:03,040 --> 00:51:05,680
you can go back and look and see

1543
00:51:05,680 --> 00:51:07,119
it's very much worth your time to go

1544
00:51:07,119 --> 00:51:08,960
back and look and see what is the bug

1545
00:51:08,960 --> 00:51:11,680
they found and you know why did i miss

1546
00:51:11,680 --> 00:51:12,480
it

1547
00:51:12,480 --> 00:51:13,760
a lot of the times when this has

1548
00:51:13,760 --> 00:51:16,400
happened to me it's just been like

1549
00:51:16,400 --> 00:51:19,040
oh you know they added this new feature

1550
00:51:19,040 --> 00:51:20,559
that wasn't there when i looked at it or

1551
00:51:20,559 --> 00:51:22,079
i never looked at that code because it

1552
00:51:22,079 --> 00:51:23,839
was non-default and no one used it and

1553
00:51:23,839 --> 00:51:25,280
now it is default

1554
00:51:25,280 --> 00:51:27,200
which um you know sort of speaks to my

1555
00:51:27,200 --> 00:51:28,960
previous point of about revisiting code

1556
00:51:28,960 --> 00:51:32,240
bases um but sometimes you um they find

1557
00:51:32,240 --> 00:51:33,680
vulnerabilities that you never would

1558
00:51:33,680 --> 00:51:36,720
have found because it just wasn't um

1559
00:51:36,720 --> 00:51:39,119
you know it wasn't in your uh

1560
00:51:39,119 --> 00:51:40,079
uh

1561
00:51:40,079 --> 00:51:42,000
i guess in your mind to look for some of

1562
00:51:42,000 --> 00:51:43,760
those things or they found a

1563
00:51:43,760 --> 00:51:45,920
vulnerability that um you found a few of

1564
00:51:45,920 --> 00:51:47,680
the idiosyncrasies but you never quite

1565
00:51:47,680 --> 00:51:49,040
put them together in the way that that

1566
00:51:49,040 --> 00:51:50,400
person did

1567
00:51:50,400 --> 00:51:51,359
to

1568
00:51:51,359 --> 00:51:52,640
discover that it had security

1569
00:51:52,640 --> 00:51:54,000
consequences

1570
00:51:54,000 --> 00:51:55,839
so

1571
00:51:55,839 --> 00:51:57,839
basically you can go back and see why

1572
00:51:57,839 --> 00:51:59,599
you missed it if it's something that you

1573
00:51:59,599 --> 00:52:01,520
totally

1574
00:52:01,520 --> 00:52:04,720
weren't aware of at all um then you

1575
00:52:04,720 --> 00:52:06,240
then you sort of realize that you have a

1576
00:52:06,240 --> 00:52:08,400
blind spot in your in your vulnerability

1577
00:52:08,400 --> 00:52:09,920
research and you can go and learn about

1578
00:52:09,920 --> 00:52:11,280
the concepts

1579
00:52:11,280 --> 00:52:13,440
um that that person used to find that

1580
00:52:13,440 --> 00:52:15,599
vulnerability and you know sort of add

1581
00:52:15,599 --> 00:52:16,559
to your

1582
00:52:16,559 --> 00:52:19,839
um your mental arsenal of

1583
00:52:19,839 --> 00:52:20,960
things uh when you're doing

1584
00:52:20,960 --> 00:52:22,960
vulnerability research

1585
00:52:22,960 --> 00:52:24,640
and then if if you found a few of the

1586
00:52:24,640 --> 00:52:26,160
idiosyncrasies but didn't put them

1587
00:52:26,160 --> 00:52:28,960
together again this can suggest to you

1588
00:52:28,960 --> 00:52:30,559
that um you're on the right track you're

1589
00:52:30,559 --> 00:52:32,240
finding the right kind of kind of

1590
00:52:32,240 --> 00:52:34,800
elements that make up uh vulnerabilities

1591
00:52:34,800 --> 00:52:37,359
but perhaps you need to

1592
00:52:37,359 --> 00:52:39,599
work harder on like brainstorming

1593
00:52:39,599 --> 00:52:41,040
putting those things together before you

1594
00:52:41,040 --> 00:52:44,920
abandon and move on

1595
00:52:46,240 --> 00:52:47,599
the last thing i sort of want to talk

1596
00:52:47,599 --> 00:52:49,359
about is tooling i sort of mentioned

1597
00:52:49,359 --> 00:52:50,720
this before

1598
00:52:50,720 --> 00:52:52,559
um so

1599
00:52:52,559 --> 00:52:54,559
uh

1600
00:52:54,559 --> 00:52:56,640
tooling and mainly i'm talking about

1601
00:52:56,640 --> 00:52:58,800
fuzzing and static analysis stuff here

1602
00:52:58,800 --> 00:53:01,520
um these can save a lot of time and

1603
00:53:01,520 --> 00:53:02,880
energy and

1604
00:53:02,880 --> 00:53:05,040
it is worth your time to go and see

1605
00:53:05,040 --> 00:53:08,160
what's out there usually uh for for some

1606
00:53:08,160 --> 00:53:10,400
of these tools to be effective

1607
00:53:10,400 --> 00:53:11,680
they won't be

1608
00:53:11,680 --> 00:53:13,200
off the shelf

1609
00:53:13,200 --> 00:53:14,960
perhaps as effective for some of the

1610
00:53:14,960 --> 00:53:16,880
larger targets you'll have to take it

1611
00:53:16,880 --> 00:53:18,559
and add your own

1612
00:53:18,559 --> 00:53:19,839
understanding that you've gained from

1613
00:53:19,839 --> 00:53:22,160
the context of this to find specific

1614
00:53:22,160 --> 00:53:23,440
patterns that

1615
00:53:23,440 --> 00:53:25,520
perhaps you're aware of to to get more

1616
00:53:25,520 --> 00:53:27,520
results but i'm definitely tooling and

1617
00:53:27,520 --> 00:53:29,119
interactive testing

1618
00:53:29,119 --> 00:53:30,960
can save you a lot of time and energy

1619
00:53:30,960 --> 00:53:32,640
and and

1620
00:53:32,640 --> 00:53:34,079
you know it's been a big mistake

1621
00:53:34,079 --> 00:53:35,599
throughout my career that i never really

1622
00:53:35,599 --> 00:53:38,400
do this because i'm super lazy um but

1623
00:53:38,400 --> 00:53:40,800
also actually um

1624
00:53:40,800 --> 00:53:43,280
you know like i said uh before a lot of

1625
00:53:43,280 --> 00:53:44,880
the times when i'm looking at code i'm

1626
00:53:44,880 --> 00:53:47,119
actually curious about the technology

1627
00:53:47,119 --> 00:53:50,720
um rather than just finding bugs so um

1628
00:53:50,720 --> 00:53:53,119
you know in that respect uh getting

1629
00:53:53,119 --> 00:53:54,720
existing tools and running them is not

1630
00:53:54,720 --> 00:53:56,880
useful although admittedly building the

1631
00:53:56,880 --> 00:53:58,880
tools is

1632
00:53:58,880 --> 00:54:00,720
but anyway if you're someone who doesn't

1633
00:54:00,720 --> 00:54:02,880
like doing fuzzing

1634
00:54:02,880 --> 00:54:04,800
that's fine but you should probably team

1635
00:54:04,800 --> 00:54:06,559
up with someone who does

1636
00:54:06,559 --> 00:54:08,000
because

1637
00:54:08,000 --> 00:54:10,000
they're going to be able to save you a

1638
00:54:10,000 --> 00:54:11,599
heap of time like

1639
00:54:11,599 --> 00:54:14,160
fuzzing now is a very big

1640
00:54:14,160 --> 00:54:17,839
uh and complicated field uh back when

1641
00:54:17,839 --> 00:54:20,000
back when it was in its infancy it was

1642
00:54:20,000 --> 00:54:22,079
you know dumb fuzzing essentially but

1643
00:54:22,079 --> 00:54:23,440
now it's a very complex field and

1644
00:54:23,440 --> 00:54:24,960
actually requires you to know quite a

1645
00:54:24,960 --> 00:54:26,559
lot to to be

1646
00:54:26,559 --> 00:54:28,319
uh current so if you're not someone

1647
00:54:28,319 --> 00:54:29,599
who's interested in doing that you

1648
00:54:29,599 --> 00:54:31,760
should team up with someone who is

1649
00:54:31,760 --> 00:54:32,880
um

1650
00:54:32,880 --> 00:54:34,400
i i um

1651
00:54:34,400 --> 00:54:36,160
early in my career i was very skeptical

1652
00:54:36,160 --> 00:54:38,480
of both static analysis and fuzzing

1653
00:54:38,480 --> 00:54:40,240
static analysis i basically thought was

1654
00:54:40,240 --> 00:54:42,480
too academic um to be particularly

1655
00:54:42,480 --> 00:54:44,319
useful and fuzzing

1656
00:54:44,319 --> 00:54:46,079
again i said it was in its infancy but

1657
00:54:46,079 --> 00:54:48,160
it's also very obvious that

1658
00:54:48,160 --> 00:54:49,359
given time

1659
00:54:49,359 --> 00:54:51,359
the sophistication would improve and

1660
00:54:51,359 --> 00:54:53,040
more importantly

1661
00:54:53,040 --> 00:54:55,119
when people were able to deploy deploy

1662
00:54:55,119 --> 00:54:58,000
it at real scale and at google scale

1663
00:54:58,000 --> 00:54:59,520
it was it's very obvious that it's going

1664
00:54:59,520 --> 00:55:02,079
to find a whole heap of stuff

1665
00:55:02,079 --> 00:55:03,680
so

1666
00:55:03,680 --> 00:55:05,599
richard johnson who gave a presentation

1667
00:55:05,599 --> 00:55:07,119
oh us who gave a training at offensive

1668
00:55:07,119 --> 00:55:07,920
con

1669
00:55:07,920 --> 00:55:10,559
about fuzzing uh said this uh just a few

1670
00:55:10,559 --> 00:55:12,640
months ago world-class bug hunters

1671
00:55:12,640 --> 00:55:14,960
always begrudgingly accept the power of

1672
00:55:14,960 --> 00:55:17,760
fuzzing it's inevitable um that sounds

1673
00:55:17,760 --> 00:55:21,119
very borg like but he is actually right

1674
00:55:21,119 --> 00:55:22,799
it's um it's a really

1675
00:55:22,799 --> 00:55:25,359
uh use useful addition to your

1676
00:55:25,359 --> 00:55:29,279
you know vulnerability research

1677
00:55:30,240 --> 00:55:31,920
one thing i would say about tooling

1678
00:55:31,920 --> 00:55:34,160
though is especially for young people

1679
00:55:34,160 --> 00:55:35,839
that are getting into vulnerability

1680
00:55:35,839 --> 00:55:38,240
research for the for the first time is

1681
00:55:38,240 --> 00:55:40,400
that it can be a huge rabbit hole that

1682
00:55:40,400 --> 00:55:42,640
diverts you from any ever really gaining

1683
00:55:42,640 --> 00:55:44,559
the skills you need to really understand

1684
00:55:44,559 --> 00:55:46,960
code and like be able to read other

1685
00:55:46,960 --> 00:55:49,520
people's code and understand context

1686
00:55:49,520 --> 00:55:51,200
because

1687
00:55:51,200 --> 00:55:53,280
basically tooling is writing code rather

1688
00:55:53,280 --> 00:55:54,559
than reading which most people are more

1689
00:55:54,559 --> 00:55:57,119
comfortable with it's

1690
00:55:57,119 --> 00:55:59,200
dealing with less ambiguity

1691
00:55:59,200 --> 00:56:00,480
you get to

1692
00:56:00,480 --> 00:56:02,480
solve engineering challenges you will

1693
00:56:02,480 --> 00:56:04,319
learn an awful lot especially if you're

1694
00:56:04,319 --> 00:56:06,160
making um very specific fuzzers and

1695
00:56:06,160 --> 00:56:08,319
stuff because as part of building that

1696
00:56:08,319 --> 00:56:10,240
you will be doing the reading to

1697
00:56:10,240 --> 00:56:11,680
understand the context of what you're

1698
00:56:11,680 --> 00:56:12,960
trying to achieve

1699
00:56:12,960 --> 00:56:15,599
um but yeah essentially if you're

1700
00:56:15,599 --> 00:56:17,119
someone who does

1701
00:56:17,119 --> 00:56:20,480
if you're um someone who does tooling um

1702
00:56:20,480 --> 00:56:22,640
and becomes more interested in that side

1703
00:56:22,640 --> 00:56:24,960
of things i i guess i would suggest the

1704
00:56:24,960 --> 00:56:26,400
inverse of what i said on the previous

1705
00:56:26,400 --> 00:56:28,839
slide which is um you should probably

1706
00:56:28,839 --> 00:56:30,880
consider you should probably consider

1707
00:56:30,880 --> 00:56:32,079
teaming up with someone who's very

1708
00:56:32,079 --> 00:56:34,799
focused on uh vulnerability research and

1709
00:56:34,799 --> 00:56:37,119
getting results because

1710
00:56:37,119 --> 00:56:39,040
i've seen a lot of times in my career

1711
00:56:39,040 --> 00:56:39,920
you know

1712
00:56:39,920 --> 00:56:41,119
people start doing vulnerability

1713
00:56:41,119 --> 00:56:42,240
research and they're like i'm going to

1714
00:56:42,240 --> 00:56:44,559
just automate this thing and then they

1715
00:56:44,559 --> 00:56:46,400
spend forever doing that and they forget

1716
00:56:46,400 --> 00:56:47,760
why they were even doing it and they

1717
00:56:47,760 --> 00:56:49,599
make this huge complex program that

1718
00:56:49,599 --> 00:56:51,359
might not even be particularly useful in

1719
00:56:51,359 --> 00:56:53,359
real life because

1720
00:56:53,359 --> 00:56:54,799
you know the things that they think are

1721
00:56:54,799 --> 00:56:56,400
elegant and are going to work in their

1722
00:56:56,400 --> 00:56:59,280
mind don't actually have practice so um

1723
00:56:59,280 --> 00:57:00,960
by teaming up with someone who's doing

1724
00:57:00,960 --> 00:57:03,040
very focused on just finding bugs you're

1725
00:57:03,040 --> 00:57:04,799
getting continuous feedback of i know

1726
00:57:04,799 --> 00:57:06,079
you think this is cool but this doesn't

1727
00:57:06,079 --> 00:57:07,920
work at all this less elegant idea

1728
00:57:07,920 --> 00:57:09,440
actually works fantastic you should do

1729
00:57:09,440 --> 00:57:11,599
this

1730
00:57:11,599 --> 00:57:13,359
so uh

1731
00:57:13,359 --> 00:57:15,920
yeah i just kind of had that um that

1732
00:57:15,920 --> 00:57:17,680
quote that i sort of talked about before

1733
00:57:17,680 --> 00:57:19,839
halvar often quotes me

1734
00:57:19,839 --> 00:57:20,720
um

1735
00:57:20,720 --> 00:57:22,640
uh saying this so i'm quoting him

1736
00:57:22,640 --> 00:57:23,680
quoting me

1737
00:57:23,680 --> 00:57:24,640
uh

1738
00:57:24,640 --> 00:57:26,480
it's amazing how much work people do to

1739
00:57:26,480 --> 00:57:28,079
not understand something and i was sort

1740
00:57:28,079 --> 00:57:30,079
of talking to that to that thing where

1741
00:57:30,079 --> 00:57:32,960
uh especially early in my career um

1742
00:57:32,960 --> 00:57:35,200
people would put so much work at like

1743
00:57:35,200 --> 00:57:37,920
years and like months and perhaps years

1744
00:57:37,920 --> 00:57:39,680
into building these epic tools and i'm

1745
00:57:39,680 --> 00:57:40,799
like you could have just read the code

1746
00:57:40,799 --> 00:57:42,960
and found all these bugs so there's kind

1747
00:57:42,960 --> 00:57:46,000
of a um a trade-off there

1748
00:57:46,000 --> 00:57:47,760
so

1749
00:57:47,760 --> 00:57:50,000
that's basically all the rules i could

1750
00:57:50,000 --> 00:57:51,280
fit in

1751
00:57:51,280 --> 00:57:53,359
i guess my takeaway is that

1752
00:57:53,359 --> 00:57:54,960
vulnerability is

1753
00:57:54,960 --> 00:57:56,640
vulnerability research is difficult but

1754
00:57:56,640 --> 00:57:59,040
it's a learnable skill that's my cap by

1755
00:57:59,040 --> 00:58:00,480
the way um

1756
00:58:00,480 --> 00:58:03,520
and um i think that uh obviously i've

1757
00:58:03,520 --> 00:58:05,520
only had time to do a very

1758
00:58:05,520 --> 00:58:07,440
brief overview of some of the this is

1759
00:58:07,440 --> 00:58:10,079
like by no means comprehensive but um

1760
00:58:10,079 --> 00:58:12,480
um i'm thinking of like expanding more

1761
00:58:12,480 --> 00:58:13,839
on the things that i had to cut out

1762
00:58:13,839 --> 00:58:16,000
because i think um it is a teachable

1763
00:58:16,000 --> 00:58:16,880
skill

1764
00:58:16,880 --> 00:58:19,599
uh and teaching that skill involves more

1765
00:58:19,599 --> 00:58:22,559
than just um pointing out what code

1766
00:58:22,559 --> 00:58:24,000
you know this code has bugs in it this

1767
00:58:24,000 --> 00:58:26,319
code has bugs in it but um you know

1768
00:58:26,319 --> 00:58:27,839
understanding the temperament that you

1769
00:58:27,839 --> 00:58:29,680
need understanding how to manage your

1770
00:58:29,680 --> 00:58:31,599
projects and

1771
00:58:31,599 --> 00:58:33,200
understanding

1772
00:58:33,200 --> 00:58:35,280
you know complex structure from reading

1773
00:58:35,280 --> 00:58:36,640
code

1774
00:58:36,640 --> 00:58:38,079
and so

1775
00:58:38,079 --> 00:58:39,280
i think

1776
00:58:39,280 --> 00:58:41,200
especially dealing with frustration and

1777
00:58:41,200 --> 00:58:43,760
stuff is a key differentiator to success

1778
00:58:43,760 --> 00:58:44,559
and

1779
00:58:44,559 --> 00:58:45,839
people that

1780
00:58:45,839 --> 00:58:48,079
you know manage to master that will be

1781
00:58:48,079 --> 00:58:49,839
much more

1782
00:58:49,839 --> 00:58:51,599
successful in vulnerability research and

1783
00:58:51,599 --> 00:58:55,200
less likely to to burn out early

1784
00:58:55,200 --> 00:58:56,640
and lastly i guess i wanted to say

1785
00:58:56,640 --> 00:58:57,920
reading is a

1786
00:58:57,920 --> 00:59:00,559
skill distinct from writing code

1787
00:59:00,559 --> 00:59:02,640
and it takes a lot of practice

1788
00:59:02,640 --> 00:59:04,240
and most people that write code think

1789
00:59:04,240 --> 00:59:05,440
that they're automatically good at

1790
00:59:05,440 --> 00:59:07,359
reading other people's code and that's

1791
00:59:07,359 --> 00:59:09,760
not really the case so you actually have

1792
00:59:09,760 --> 00:59:11,680
to commit effort to becoming good at

1793
00:59:11,680 --> 00:59:14,720
reading code and um learning about what

1794
00:59:14,720 --> 00:59:15,920
to look for

1795
00:59:15,920 --> 00:59:17,359
that have potential security

1796
00:59:17,359 --> 00:59:18,880
consequences

1797
00:59:18,880 --> 00:59:21,280
um i guess finally anyone who knows

1798
00:59:21,280 --> 00:59:23,040
rooney sandvik it's her birthday today

1799
00:59:23,040 --> 00:59:25,440
so um say happy birthday to her on

1800
00:59:25,440 --> 00:59:27,760
twitter if you're friends with her

1801
00:59:27,760 --> 00:59:31,559
and that's all

1802
00:59:33,360 --> 00:59:37,599
[Applause]

1803
00:59:37,599 --> 00:59:39,680
you

