1
00:00:01,199 --> 00:00:04,480
hello and welcome to our talk about how

2
00:00:04,480 --> 00:00:06,960
we achieved the microcode execution

3
00:00:06,960 --> 00:00:10,559
inside modern intel cpus

4
00:00:10,559 --> 00:00:13,200
there is some confusion with this storm

5
00:00:13,200 --> 00:00:16,800
mobile cpu because you have a laptop you

6
00:00:16,800 --> 00:00:19,119
have desktop and

7
00:00:19,119 --> 00:00:20,000
uh

8
00:00:20,000 --> 00:00:22,480
really you also have

9
00:00:22,480 --> 00:00:24,720
system on chip intel's

10
00:00:24,720 --> 00:00:26,640
cpu platforms

11
00:00:26,640 --> 00:00:29,359
and in this case we are meaning apollo

12
00:00:29,359 --> 00:00:31,359
lake and gemini lake platforms

13
00:00:31,359 --> 00:00:36,079
system-on-chip uh platforms impulse yeah

14
00:00:36,079 --> 00:00:38,640
and

15
00:00:38,640 --> 00:00:40,239
our research team includes three

16
00:00:40,239 --> 00:00:42,399
researchers

17
00:00:42,399 --> 00:00:44,399
mark hermolov dimitris karaf and maxine

18
00:00:44,399 --> 00:00:46,000
garcia this is me

19
00:00:46,000 --> 00:00:48,160
dmitry and mark are working for positive

20
00:00:48,160 --> 00:00:50,640
technologies company unfortunately

21
00:00:50,640 --> 00:00:52,719
mark couldn't be here

22
00:00:52,719 --> 00:00:54,640
uh

23
00:00:54,640 --> 00:00:56,480
and i am not affiliated security

24
00:00:56,480 --> 00:00:59,359
research right now

25
00:00:59,359 --> 00:01:01,199
as you may be know we have been

26
00:01:01,199 --> 00:01:02,640
researching

27
00:01:02,640 --> 00:01:06,159
intel's platform for almost five years

28
00:01:06,159 --> 00:01:07,760
during this time

29
00:01:07,760 --> 00:01:10,400
we found vulnerability in intel

30
00:01:10,400 --> 00:01:14,479
management engine we found undocumented

31
00:01:14,479 --> 00:01:15,280
uh

32
00:01:15,280 --> 00:01:18,240
hub mode for disabling intel and e

33
00:01:18,240 --> 00:01:20,640
uh also we're researching some internal

34
00:01:20,640 --> 00:01:23,360
intel technologies like intel visa into

35
00:01:23,360 --> 00:01:26,640
uh debug capability interface and many

36
00:01:26,640 --> 00:01:29,119
other security features

37
00:01:29,119 --> 00:01:31,920
but how exactly the intel microcode

38
00:01:31,920 --> 00:01:34,240
works has been the almost interesting

39
00:01:34,240 --> 00:01:38,479
things for all of us all this time

40
00:01:38,479 --> 00:01:39,520
and

41
00:01:39,520 --> 00:01:42,000
the last year we finally got it we found

42
00:01:42,000 --> 00:01:43,280
the way to

43
00:01:43,280 --> 00:01:47,040
execute arbitrary code inside the cpu

44
00:01:47,040 --> 00:01:48,159
and

45
00:01:48,159 --> 00:01:49,759
it allows

46
00:01:49,759 --> 00:01:54,920
us to change uh instruction behavioral

47
00:01:56,159 --> 00:01:58,159
today we will briefly discuss what is

48
00:01:58,159 --> 00:01:59,439
microsoft

49
00:01:59,439 --> 00:02:01,280
sorry microcode is

50
00:02:01,280 --> 00:02:03,119
how it's used

51
00:02:03,119 --> 00:02:05,280
in modern cpus

52
00:02:05,280 --> 00:02:06,840
we will tell

53
00:02:06,840 --> 00:02:10,959
also to you how our research went and

54
00:02:10,959 --> 00:02:13,280
what approach we used

55
00:02:13,280 --> 00:02:16,080
how we created the disassembler for an

56
00:02:16,080 --> 00:02:20,080
unknown architectural instruction set

57
00:02:20,080 --> 00:02:22,000
with this disassembler we found

58
00:02:22,000 --> 00:02:24,800
undocumented commands and we are able to

59
00:02:24,800 --> 00:02:28,319
decrypt microcode updates

60
00:02:29,599 --> 00:02:31,200
let's start

61
00:02:31,200 --> 00:02:35,519
okay so on this picture illustrated the

62
00:02:35,519 --> 00:02:38,080
availability of documentation for

63
00:02:38,080 --> 00:02:39,840
intel's technologies

64
00:02:39,840 --> 00:02:42,560
the deeper

65
00:02:43,440 --> 00:02:46,079
the deeper

66
00:02:46,800 --> 00:02:49,599
we go as the more difficult it's to get

67
00:02:49,599 --> 00:02:52,720
documentation for external researchers

68
00:02:52,720 --> 00:02:55,680
for example you just can download

69
00:02:55,680 --> 00:02:57,519
documentation

70
00:02:57,519 --> 00:03:00,000
you can download the instruction set

71
00:03:00,000 --> 00:03:03,519
manual from intel's website

72
00:03:03,519 --> 00:03:05,200
you have

73
00:03:05,200 --> 00:03:07,760
vtd has official documentation with

74
00:03:07,760 --> 00:03:11,360
interface detailed interface description

75
00:03:11,360 --> 00:03:13,360
but unfortunately

76
00:03:13,360 --> 00:03:16,000
information about the intel management

77
00:03:16,000 --> 00:03:19,860
engine or the boot guard technology

78
00:03:19,860 --> 00:03:21,040
[Music]

79
00:03:21,040 --> 00:03:24,959
are available only after signing

80
00:03:24,959 --> 00:03:27,440
non-disclosure agreement

81
00:03:27,440 --> 00:03:28,560
and

82
00:03:28,560 --> 00:03:30,959
it means that

83
00:03:30,959 --> 00:03:34,239
and microcode and internal architecture

84
00:03:34,239 --> 00:03:37,760
are trade secrets or even top secrets

85
00:03:37,760 --> 00:03:42,400
and uh uh it is available only within

86
00:03:42,400 --> 00:03:44,840
the company it means that only

87
00:03:44,840 --> 00:03:48,959
internal engineers can understand how

88
00:03:48,959 --> 00:03:52,720
modern intel cpu works

89
00:03:53,920 --> 00:03:57,120
so as i said we have

90
00:03:57,120 --> 00:03:58,959
been researching impulse platform for

91
00:03:58,959 --> 00:04:00,400
several years

92
00:04:00,400 --> 00:04:01,760
on this flight you can see how

93
00:04:01,760 --> 00:04:04,480
previously related works if you want

94
00:04:04,480 --> 00:04:07,840
know more details about internal

95
00:04:07,840 --> 00:04:08,959
buses

96
00:04:08,959 --> 00:04:11,360
internal architecture

97
00:04:11,360 --> 00:04:13,599
of the modern cpu

98
00:04:13,599 --> 00:04:15,920
you can see you can find information

99
00:04:15,920 --> 00:04:18,880
about it in our talk uh

100
00:04:18,880 --> 00:04:23,120
related with intel visa about gtac

101
00:04:23,120 --> 00:04:26,240
and debugging management engine you can

102
00:04:26,240 --> 00:04:27,280
see

103
00:04:27,280 --> 00:04:29,600
you can find information about it inside

104
00:04:29,600 --> 00:04:31,360
intel uh

105
00:04:31,360 --> 00:04:36,160
our talk on um ccc about

106
00:04:36,160 --> 00:04:39,199
how we achieved jtag for info management

107
00:04:39,199 --> 00:04:41,040
engine

108
00:04:41,040 --> 00:04:42,880
and

109
00:04:42,880 --> 00:04:46,160
so a few words now few words about uh

110
00:04:46,160 --> 00:04:48,720
maker code maker code is a layer for

111
00:04:48,720 --> 00:04:51,280
hardware level instruction that

112
00:04:51,280 --> 00:04:53,280
implements high-level machine code

113
00:04:53,280 --> 00:04:55,440
instruction

114
00:04:55,440 --> 00:04:58,639
uh in general microcode is located

115
00:04:58,639 --> 00:05:02,160
inside the cpu and it manages command

116
00:05:02,160 --> 00:05:05,039
execution for high level

117
00:05:05,039 --> 00:05:07,680
code instruction

118
00:05:07,680 --> 00:05:12,560
it also initialize internal processor

119
00:05:12,560 --> 00:05:13,600
and

120
00:05:13,600 --> 00:05:16,960
devices and buses it looks like a bring

121
00:05:16,960 --> 00:05:21,360
up code inside uh ucph

122
00:05:21,360 --> 00:05:23,360
as you think microcode partially

123
00:05:23,360 --> 00:05:25,520
implements some

124
00:05:25,520 --> 00:05:27,039
technologies like

125
00:05:27,039 --> 00:05:29,199
virtualization technology

126
00:05:29,199 --> 00:05:31,199
virtualization support

127
00:05:31,199 --> 00:05:32,880
uh hg

128
00:05:32,880 --> 00:05:37,840
edgex mbx txt and etc

129
00:05:37,840 --> 00:05:42,479
microcode is strongly associated with uh

130
00:05:42,479 --> 00:05:43,600
the

131
00:05:43,600 --> 00:05:45,919
internal cpu architecture

132
00:05:45,919 --> 00:05:48,800
for example the number of pipelines

133
00:05:48,800 --> 00:05:50,800
cores and decoders

134
00:05:50,800 --> 00:05:53,800
uh

135
00:05:58,080 --> 00:06:02,080
that mean this means that microcode

136
00:06:02,080 --> 00:06:04,880
differs between generation of processor

137
00:06:04,880 --> 00:06:07,600
and if the microcode has been

138
00:06:07,600 --> 00:06:10,319
researched for one generation you need

139
00:06:10,319 --> 00:06:12,400
to do this work again for another

140
00:06:12,400 --> 00:06:14,960
generation

141
00:06:14,960 --> 00:06:16,160
for example

142
00:06:16,160 --> 00:06:17,680
if you

143
00:06:17,680 --> 00:06:19,280
understand how

144
00:06:19,280 --> 00:06:20,960
how it's work

145
00:06:20,960 --> 00:06:24,160
on skylake you need to do it again

146
00:06:24,160 --> 00:06:28,400
for isolate or tiger lake platform

147
00:06:28,400 --> 00:06:29,759
okay so

148
00:06:29,759 --> 00:06:31,759
for example on this slide you can see

149
00:06:31,759 --> 00:06:34,880
internal architecture of intel skylake

150
00:06:34,880 --> 00:06:36,319
cpu

151
00:06:36,319 --> 00:06:40,400
you can see that structure is not simple

152
00:06:40,400 --> 00:06:44,639
cpu has internal devices buses and

153
00:06:44,639 --> 00:06:47,120
internal

154
00:06:47,280 --> 00:06:51,120
communication with hashes uh caches and

155
00:06:51,120 --> 00:06:52,400
uh

156
00:06:52,400 --> 00:06:53,280
we

157
00:06:53,280 --> 00:06:57,440
are interested in this part

158
00:06:58,000 --> 00:06:58,960
uh

159
00:06:58,960 --> 00:07:01,280
here are some different commands which

160
00:07:01,280 --> 00:07:04,800
as we know are transformed

161
00:07:04,800 --> 00:07:06,400
into

162
00:07:06,400 --> 00:07:09,759
micro operation and these micra programs

163
00:07:09,759 --> 00:07:12,000
are directly executed

164
00:07:12,000 --> 00:07:14,400
they are special blocks or device that

165
00:07:14,400 --> 00:07:17,759
executed microcode operations

166
00:07:17,759 --> 00:07:19,599
and

167
00:07:19,599 --> 00:07:21,840
we have the one question how does it

168
00:07:21,840 --> 00:07:24,239
works

169
00:07:25,759 --> 00:07:27,759
and we know

170
00:07:27,759 --> 00:07:31,360
that we have from inside a cpu

171
00:07:31,360 --> 00:07:34,800
and it contains a fixed program

172
00:07:34,800 --> 00:07:38,240
and it implements a complex instruction

173
00:07:38,240 --> 00:07:40,080
like cpu id

174
00:07:40,080 --> 00:07:42,080
as you know this instruction returns

175
00:07:42,080 --> 00:07:44,400
information about your processor

176
00:07:44,400 --> 00:07:47,680
feature available features

177
00:07:47,680 --> 00:07:48,720
and

178
00:07:48,720 --> 00:07:51,199
this instruction shouldn't execute on

179
00:07:51,199 --> 00:07:54,199
lulu

180
00:07:54,639 --> 00:07:58,560
also sometimes you need to update this

181
00:07:58,560 --> 00:08:01,280
rom code

182
00:08:03,199 --> 00:08:05,840
and for this purposes

183
00:08:05,840 --> 00:08:08,160
processor has a

184
00:08:08,160 --> 00:08:10,080
small ram area

185
00:08:10,080 --> 00:08:14,719
and microcode updates are stored here

186
00:08:15,039 --> 00:08:17,759
but you have one challenge

187
00:08:17,759 --> 00:08:20,240
how to apply new

188
00:08:20,240 --> 00:08:24,479
changes to read-only memory i i mean

189
00:08:24,479 --> 00:08:25,520
that

190
00:08:25,520 --> 00:08:27,199
how implement

191
00:08:27,199 --> 00:08:30,720
updates for rom area

192
00:08:30,720 --> 00:08:32,799
to solve this task

193
00:08:32,799 --> 00:08:35,360
in the processor there is a special

194
00:08:35,360 --> 00:08:38,559
micro code sequencer

195
00:08:38,559 --> 00:08:43,439
it has margin mass pass register

196
00:08:44,080 --> 00:08:46,480
and

197
00:08:46,720 --> 00:08:50,560
this register contains two addresses

198
00:08:50,560 --> 00:08:53,760
the first addresses

199
00:08:53,839 --> 00:08:56,800
it's addresses in which you want to

200
00:08:56,800 --> 00:09:00,560
intercept execution of microprocedure

201
00:09:00,560 --> 00:09:04,080
and the second others uh it's others of

202
00:09:04,080 --> 00:09:07,680
the patch inside the rum area

203
00:09:07,680 --> 00:09:10,080
the microcode decoder is comparing on

204
00:09:10,080 --> 00:09:11,740
each steps

205
00:09:11,740 --> 00:09:13,040
[Music]

206
00:09:13,040 --> 00:09:15,360
current addresses with

207
00:09:15,360 --> 00:09:18,720
much patch phrases registers value

208
00:09:18,720 --> 00:09:21,120
and if the value

209
00:09:21,120 --> 00:09:22,880
are equal

210
00:09:22,880 --> 00:09:25,040
the microcode

211
00:09:25,040 --> 00:09:27,519
transmits the execution

212
00:09:27,519 --> 00:09:28,480
sequence

213
00:09:28,480 --> 00:09:31,440
execution sequence to the corresponding

214
00:09:31,440 --> 00:09:34,320
instruction in the rom

215
00:09:34,320 --> 00:09:36,800
it means that uh

216
00:09:36,800 --> 00:09:37,920
you

217
00:09:37,920 --> 00:09:41,350
it it looks like a hooking function

218
00:09:41,350 --> 00:09:43,440
[Music]

219
00:09:43,440 --> 00:09:45,680
when you just splice the first

220
00:09:45,680 --> 00:09:48,560
instruction set

221
00:09:48,839 --> 00:09:52,480
and this approach allows you to flexibly

222
00:09:52,480 --> 00:09:55,120
uh to flexibly change the behavior of

223
00:09:55,120 --> 00:09:57,560
the macro operations we didn't know

224
00:09:57,560 --> 00:10:00,240
vulnerabilities such as smile down

225
00:10:00,240 --> 00:10:02,959
meltdown and spectre are fixed in this

226
00:10:02,959 --> 00:10:06,000
way intel just released new version of

227
00:10:06,000 --> 00:10:08,880
the microcode

228
00:10:08,880 --> 00:10:10,320
the content

229
00:10:10,320 --> 00:10:12,560
of the rom

230
00:10:12,560 --> 00:10:14,880
and zinc reparation format are what

231
00:10:14,880 --> 00:10:17,680
interested us in the first place because

232
00:10:17,680 --> 00:10:20,320
it's the

233
00:10:20,320 --> 00:10:22,160
if you know it you

234
00:10:22,160 --> 00:10:24,000
you can examinate

235
00:10:24,000 --> 00:10:26,959
the whole platform

236
00:10:27,360 --> 00:10:29,680
okay so how

237
00:10:29,680 --> 00:10:30,880
can we

238
00:10:30,880 --> 00:10:32,800
get to them

239
00:10:32,800 --> 00:10:33,680
and

240
00:10:33,680 --> 00:10:35,600
we so to approach

241
00:10:35,600 --> 00:10:38,000
the first approach is hardware

242
00:10:38,000 --> 00:10:39,440
and in

243
00:10:39,440 --> 00:10:42,000
2017 a research team from iraq

244
00:10:42,000 --> 00:10:45,120
university published an amazing paper

245
00:10:45,120 --> 00:10:46,880
about

246
00:10:46,880 --> 00:10:51,680
reversing x86 microcode for imd cpus

247
00:10:51,680 --> 00:10:53,360
in this work

248
00:10:53,360 --> 00:10:57,120
they encapsulated ind processor and

249
00:10:57,120 --> 00:10:59,040
restored the wrong code

250
00:10:59,040 --> 00:11:03,440
by examinating examining the chip

251
00:11:03,440 --> 00:11:05,760
with a microscope

252
00:11:05,760 --> 00:11:07,519
they developed

253
00:11:07,519 --> 00:11:09,200
special versus

254
00:11:09,200 --> 00:11:11,360
small operation system

255
00:11:11,360 --> 00:11:12,839
and

256
00:11:12,839 --> 00:11:15,360
they did fuzzing

257
00:11:15,360 --> 00:11:18,320
um of micro uh

258
00:11:18,320 --> 00:11:21,600
maker code operation for understanding

259
00:11:21,600 --> 00:11:23,839
how it's related with high level

260
00:11:23,839 --> 00:11:25,680
instruction

261
00:11:25,680 --> 00:11:28,000
also in result i i

262
00:11:28,000 --> 00:11:29,600
[Music]

263
00:11:29,600 --> 00:11:33,519
highly recommended reading this paper

264
00:11:33,519 --> 00:11:35,760
and

265
00:11:36,079 --> 00:11:37,839
this research team

266
00:11:37,839 --> 00:11:41,600
could do it because the old cpus

267
00:11:41,600 --> 00:11:45,120
nd cpus didn't have integrity or crypto

268
00:11:45,120 --> 00:11:46,959
protection

269
00:11:46,959 --> 00:11:48,800
this allowed you to create your own

270
00:11:48,800 --> 00:11:50,320
microcode updates

271
00:11:50,320 --> 00:11:54,639
but that wasn't our case because

272
00:11:54,639 --> 00:11:57,440
intel microcode has an error say

273
00:11:57,440 --> 00:12:00,639
signatory and it was encrypted by an

274
00:12:00,639 --> 00:12:02,639
unknown algorithm

275
00:12:02,639 --> 00:12:04,240
uh

276
00:12:04,240 --> 00:12:07,920
but we found another way

277
00:12:07,920 --> 00:12:09,040
we have

278
00:12:09,040 --> 00:12:12,079
we we had found to another way

279
00:12:12,079 --> 00:12:12,959
but

280
00:12:12,959 --> 00:12:13,839
how

281
00:12:13,839 --> 00:12:15,360
can engineers

282
00:12:15,360 --> 00:12:16,959
uh

283
00:12:16,959 --> 00:12:18,880
can intel engineers

284
00:12:18,880 --> 00:12:20,959
uh debug microcode

285
00:12:20,959 --> 00:12:25,120
the answer was obvious through jtag

286
00:12:25,120 --> 00:12:28,560
and in 2015 intel released a new debug

287
00:12:28,560 --> 00:12:30,480
sub system for low level debugging

288
00:12:30,480 --> 00:12:31,839
called dci

289
00:12:31,839 --> 00:12:35,600
before it you need the special platform

290
00:12:35,600 --> 00:12:39,200
with special socket and special devices

291
00:12:39,200 --> 00:12:42,959
for debugging uh your platform

292
00:12:42,959 --> 00:12:45,360
but after that

293
00:12:45,360 --> 00:12:48,720
you can get market platform and

294
00:12:48,720 --> 00:12:49,839
activate

295
00:12:49,839 --> 00:12:52,480
dci debugging and

296
00:12:52,480 --> 00:12:56,000
you can debug your own operation system

297
00:12:56,000 --> 00:12:57,279
ufi

298
00:12:57,279 --> 00:12:58,639
firmware

299
00:12:58,639 --> 00:13:01,040
and another application

300
00:13:01,040 --> 00:13:03,360
this allows you to debug the platform

301
00:13:03,360 --> 00:13:06,079
with a usb interface

302
00:13:06,079 --> 00:13:08,639
we had a lot of experience with

303
00:13:08,639 --> 00:13:11,519
this adapter and

304
00:13:11,519 --> 00:13:13,519
when we researched

305
00:13:13,519 --> 00:13:15,120
when we researched intel management

306
00:13:15,120 --> 00:13:17,040
engine

307
00:13:17,040 --> 00:13:19,200
this helped us to get access to cpu

308
00:13:19,200 --> 00:13:21,839
debugging as well

309
00:13:22,880 --> 00:13:24,079
earlier on

310
00:13:24,079 --> 00:13:26,800
we found a vulnerability in intel

311
00:13:26,800 --> 00:13:29,680
management engine and we are able to

312
00:13:29,680 --> 00:13:32,240
activate gtech for another intel chip

313
00:13:32,240 --> 00:13:34,959
pch inside the space

314
00:13:34,959 --> 00:13:38,240
inside this chip you have the small x86

315
00:13:38,240 --> 00:13:40,560
core

316
00:13:40,560 --> 00:13:42,880
and the intel management engine on the

317
00:13:42,880 --> 00:13:44,720
modern cpu

318
00:13:44,720 --> 00:13:46,320
[Music]

319
00:13:46,320 --> 00:13:49,040
unfortunately

320
00:13:49,040 --> 00:13:51,519
doesn't have microcode

321
00:13:51,519 --> 00:13:54,320
as we understand but maybe everything

322
00:13:54,320 --> 00:13:58,160
has changed on isolate plot platform

323
00:13:58,160 --> 00:14:01,199
but we didn't find an exploit

324
00:14:01,199 --> 00:14:04,639
for it main idea was okay so we can

325
00:14:04,639 --> 00:14:06,240
hacked

326
00:14:06,240 --> 00:14:09,839
x86 core inside pch and maybe

327
00:14:09,839 --> 00:14:12,480
we can recover make a code from this

328
00:14:12,480 --> 00:14:13,680
core but

329
00:14:13,680 --> 00:14:17,479
uh it doesn't work

330
00:14:19,279 --> 00:14:21,519
from public version of intel's debugging

331
00:14:21,519 --> 00:14:24,639
software called intel system studio we

332
00:14:24,639 --> 00:14:27,519
use that all chips have a special device

333
00:14:27,519 --> 00:14:29,120
defects

334
00:14:29,120 --> 00:14:31,279
and also

335
00:14:31,279 --> 00:14:33,519
this device uh

336
00:14:33,519 --> 00:14:35,920
you can unlock your platform through the

337
00:14:35,920 --> 00:14:38,399
special password unique password for

338
00:14:38,399 --> 00:14:40,959
each platform

339
00:14:40,959 --> 00:14:43,680
and this device

340
00:14:43,680 --> 00:14:44,480
can

341
00:14:44,480 --> 00:14:46,240
defects device controls the debugging

342
00:14:46,240 --> 00:14:47,920
capability and

343
00:14:47,920 --> 00:14:50,079
allows you to unlock microcode access

344
00:14:50,079 --> 00:14:53,359
through this registers

345
00:14:54,639 --> 00:14:57,839
but as you can see

346
00:14:57,839 --> 00:15:01,120
the password is 72 bits

347
00:15:01,120 --> 00:15:03,600
which is quite a lot to brute force

348
00:15:03,600 --> 00:15:05,120
because

349
00:15:05,120 --> 00:15:06,000
you

350
00:15:06,000 --> 00:15:07,440
need uh

351
00:15:07,440 --> 00:15:09,760
for unlocking your platform you need to

352
00:15:09,760 --> 00:15:13,279
push your password to register to

353
00:15:13,279 --> 00:15:14,800
initialize

354
00:15:14,800 --> 00:15:16,480
uh some

355
00:15:16,480 --> 00:15:17,839
subsystem

356
00:15:17,839 --> 00:15:20,800
and to activate unlock if you if

357
00:15:20,800 --> 00:15:23,600
password is not correct is wrong

358
00:15:23,600 --> 00:15:25,519
in this case you need to reboot your

359
00:15:25,519 --> 00:15:28,639
platform and try again

360
00:15:28,639 --> 00:15:32,800
you spent about few seconds on this

361
00:15:32,800 --> 00:15:34,920
cycle and

362
00:15:34,920 --> 00:15:37,199
72 bits it's

363
00:15:37,199 --> 00:15:38,800
it's enough

364
00:15:38,800 --> 00:15:40,639
for protection

365
00:15:40,639 --> 00:15:43,920
again brute force attack

366
00:15:44,160 --> 00:15:46,240
but

367
00:15:46,240 --> 00:15:48,480
on the slide you can see

368
00:15:48,480 --> 00:15:51,360
diagram of modern intel platforms

369
00:15:51,360 --> 00:15:55,839
desktop and server pch and cpu chips has

370
00:15:55,839 --> 00:15:58,800
independently fixed devices we knew it

371
00:15:58,800 --> 00:15:59,600
from

372
00:15:59,600 --> 00:16:00,880
the

373
00:16:00,880 --> 00:16:02,800
configuration from

374
00:16:02,800 --> 00:16:06,800
intel system studio configuration

375
00:16:06,800 --> 00:16:08,480
but

376
00:16:08,480 --> 00:16:12,079
this means you need new two passwords

377
00:16:12,079 --> 00:16:14,160
for

378
00:16:14,160 --> 00:16:16,720
uh for the platform to debug it password

379
00:16:16,720 --> 00:16:20,800
for pch and password for cpu

380
00:16:20,800 --> 00:16:22,560
to activate the

381
00:16:22,560 --> 00:16:23,680
uh

382
00:16:23,680 --> 00:16:24,959
internal

383
00:16:24,959 --> 00:16:28,079
level intel's level debugging

384
00:16:28,079 --> 00:16:30,560
capabilities

385
00:16:30,560 --> 00:16:32,480
but

386
00:16:32,480 --> 00:16:35,440
in system-on-chip platforms like atom

387
00:16:35,440 --> 00:16:37,839
silver on pentium

388
00:16:37,839 --> 00:16:40,560
you have only one dfix device we found

389
00:16:40,560 --> 00:16:44,000
only one d6 device in

390
00:16:44,000 --> 00:16:47,519
intel system studio configuration

391
00:16:47,519 --> 00:16:48,639
and

392
00:16:48,639 --> 00:16:50,880
the main question is

393
00:16:50,880 --> 00:16:53,839
if circ has only one password does it

394
00:16:53,839 --> 00:16:56,959
means that unlocking the management

395
00:16:56,959 --> 00:16:58,399
engine

396
00:16:58,399 --> 00:17:02,959
leads to unlocking the cpu i mean that

397
00:17:03,680 --> 00:17:04,959
that

398
00:17:04,959 --> 00:17:08,880
signal from this difficult

399
00:17:10,079 --> 00:17:12,319
this defects device

400
00:17:12,319 --> 00:17:16,240
uh unlocking not only pch

401
00:17:16,240 --> 00:17:21,679
and an e core but also on core and uh

402
00:17:21,679 --> 00:17:25,360
main core of the cpu

403
00:17:25,439 --> 00:17:26,559
and

404
00:17:26,559 --> 00:17:29,440
uh it's it's it was funny because we

405
00:17:29,440 --> 00:17:33,360
published proof of concept for uh in e

406
00:17:33,360 --> 00:17:34,400
about

407
00:17:34,400 --> 00:17:35,440
two

408
00:17:35,440 --> 00:17:38,640
two or three years ago

409
00:17:38,640 --> 00:17:41,440
but only after two years we

410
00:17:41,440 --> 00:17:43,919
can check it

411
00:17:43,919 --> 00:17:47,840
and we can answer it on this question

412
00:17:47,840 --> 00:17:48,640
and

413
00:17:48,640 --> 00:17:49,760
the answer

414
00:17:49,760 --> 00:17:51,679
is yes

415
00:17:51,679 --> 00:17:52,480
you

416
00:17:52,480 --> 00:17:54,559
if you unlocked

417
00:17:54,559 --> 00:17:58,799
pch for system on chip platforms it's

418
00:17:58,799 --> 00:18:00,480
also unlocking

419
00:18:00,480 --> 00:18:02,240
uh cpu too

420
00:18:02,240 --> 00:18:05,039
but it was only half of the story

421
00:18:05,039 --> 00:18:07,360
dmitry will tell you how we developed

422
00:18:07,360 --> 00:18:10,640
our disassemblers thank you and now it's

423
00:18:10,640 --> 00:18:12,480
my part uh

424
00:18:12,480 --> 00:18:16,160
i will tell you about how we reverse

425
00:18:16,160 --> 00:18:19,760
microcode and get results that we

426
00:18:19,760 --> 00:18:23,360
publishing to you right now

427
00:18:24,080 --> 00:18:26,000
using some techniques that maxim

428
00:18:26,000 --> 00:18:29,200
describes earlier we

429
00:18:29,200 --> 00:18:32,240
achieve capability to read internal

430
00:18:32,240 --> 00:18:36,880
system bus so we have some

431
00:18:36,880 --> 00:18:39,360
really very little information about

432
00:18:39,360 --> 00:18:41,440
what it's what it is and what

433
00:18:41,440 --> 00:18:42,480
information

434
00:18:42,480 --> 00:18:44,240
it should contain

435
00:18:44,240 --> 00:18:47,120
but uh in uh some description for old

436
00:18:47,120 --> 00:18:50,880
platform we find that there are some

437
00:18:50,880 --> 00:18:52,480
some method to

438
00:18:52,480 --> 00:18:54,799
get data and we start brute forcing

439
00:18:54,799 --> 00:18:56,880
addresses and find

440
00:18:56,880 --> 00:18:58,400
five arrays

441
00:18:58,400 --> 00:19:01,360
and we discovered that first two they

442
00:19:01,360 --> 00:19:04,240
labeled array zero and array one

443
00:19:04,240 --> 00:19:06,880
are read only arrays

444
00:19:06,880 --> 00:19:09,440
so we could read them but couldn't write

445
00:19:09,440 --> 00:19:12,640
back to them and three other arrays

446
00:19:12,640 --> 00:19:14,160
are read

447
00:19:14,160 --> 00:19:16,799
and write enabled so we could modify

448
00:19:16,799 --> 00:19:18,720
information in them

449
00:19:18,720 --> 00:19:22,080
and we have ideas that they somehow

450
00:19:22,080 --> 00:19:24,640
related to microcode

451
00:19:24,640 --> 00:19:26,640
and you could see that

452
00:19:26,640 --> 00:19:28,799
information in first two arrays

453
00:19:28,799 --> 00:19:30,880
have some features

454
00:19:30,880 --> 00:19:33,360
for example you could see that there is

455
00:19:33,360 --> 00:19:36,080
three words with some

456
00:19:36,080 --> 00:19:38,880
value and the last fourth word always

457
00:19:38,880 --> 00:19:41,360
zero and in the secondary

458
00:19:41,360 --> 00:19:42,559
all three

459
00:19:42,559 --> 00:19:45,280
all four values in each line are the

460
00:19:45,280 --> 00:19:46,559
same

461
00:19:46,559 --> 00:19:48,480
so it's not

462
00:19:48,480 --> 00:19:51,760
mistake probably it's the way how

463
00:19:51,760 --> 00:19:54,400
controller represents information to us

464
00:19:54,400 --> 00:19:56,960
when we read them

465
00:19:56,960 --> 00:19:57,840
and

466
00:19:57,840 --> 00:20:00,559
after looking on data and

467
00:20:00,559 --> 00:20:02,720
performance analyzing we

468
00:20:02,720 --> 00:20:04,480
discovered the way

469
00:20:04,480 --> 00:20:08,159
how we should represent that arrays

470
00:20:08,159 --> 00:20:11,440
actually first array with three words

471
00:20:11,440 --> 00:20:14,159
with values and fourth one with zero is

472
00:20:14,159 --> 00:20:17,280
up codes wrong so it contains uh

473
00:20:17,280 --> 00:20:19,760
operation codes for instruction for

474
00:20:19,760 --> 00:20:23,280
micro micro code micro operations and

475
00:20:23,280 --> 00:20:25,200
the second array with

476
00:20:25,200 --> 00:20:28,080
identical values in for

477
00:20:28,080 --> 00:20:29,440
positions

478
00:20:29,440 --> 00:20:33,280
uh it's sequence world it's a kind of

479
00:20:33,280 --> 00:20:35,919
instruction how to

480
00:20:35,919 --> 00:20:37,520
use

481
00:20:37,520 --> 00:20:40,320
three operations simultaneously and how

482
00:20:40,320 --> 00:20:44,559
to perform next steps where to jump or

483
00:20:44,559 --> 00:20:46,880
some other conditions

484
00:20:46,880 --> 00:20:50,080
it looks like uh microcodes have three

485
00:20:50,080 --> 00:20:52,240
separate execution units uh which

486
00:20:52,240 --> 00:20:55,039
operates on operator on operation one

487
00:20:55,039 --> 00:20:57,520
two and three in the same time and

488
00:20:57,520 --> 00:21:00,320
sequence work uh tells how to thread the

489
00:21:00,320 --> 00:21:04,559
results of a set of such executions

490
00:21:04,559 --> 00:21:06,320
and the three

491
00:21:06,320 --> 00:21:09,200
uh read write arrays are

492
00:21:09,200 --> 00:21:12,080
sequence word ram which use it for page

493
00:21:12,080 --> 00:21:15,120
data and we discovered then

494
00:21:15,120 --> 00:21:18,000
when we write some data to sequence word

495
00:21:18,000 --> 00:21:18,960
ram

496
00:21:18,960 --> 00:21:21,600
and read back up codes rom we have

497
00:21:21,600 --> 00:21:24,880
updates in some late addresses of that

498
00:21:24,880 --> 00:21:28,960
array and the same with upcode sram so

499
00:21:28,960 --> 00:21:32,320
we could modify data in read write

500
00:21:32,320 --> 00:21:35,600
areas in last three arrays and see how

501
00:21:35,600 --> 00:21:38,799
they reflect uh updates in first two

502
00:21:38,799 --> 00:21:40,400
read-only arrays

503
00:21:40,400 --> 00:21:43,200
and match page array uh maxim already

504
00:21:43,200 --> 00:21:45,760
said how it works it contains pairs of

505
00:21:45,760 --> 00:21:49,360
addresses address at which execution

506
00:21:49,360 --> 00:21:51,280
should

507
00:21:51,280 --> 00:21:53,039
starts when

508
00:21:53,039 --> 00:21:54,720
mesh page

509
00:21:54,720 --> 00:21:57,600
works so if you have some instructions

510
00:21:57,600 --> 00:21:59,760
that start for example at address one

511
00:21:59,760 --> 00:22:02,640
zero zero zero and first word in match

512
00:22:02,640 --> 00:22:05,520
page record is one zero zero zero then

513
00:22:05,520 --> 00:22:08,640
you need just jump to address that uh

514
00:22:08,640 --> 00:22:10,880
stored in second part of match bash

515
00:22:10,880 --> 00:22:12,480
array so

516
00:22:12,480 --> 00:22:14,480
you just

517
00:22:14,480 --> 00:22:16,640
change the code flow of execution

518
00:22:16,640 --> 00:22:18,559
instruction in any place using much

519
00:22:18,559 --> 00:22:20,320
patch array

520
00:22:20,320 --> 00:22:21,919
and

521
00:22:21,919 --> 00:22:25,840
after a lot of tests using again using

522
00:22:25,840 --> 00:22:28,960
jpeg we have a great advantage

523
00:22:28,960 --> 00:22:31,440
against people who make hardware errors

524
00:22:31,440 --> 00:22:34,880
engineering of amd microcode we have

525
00:22:34,880 --> 00:22:38,159
debugging capability at very low level

526
00:22:38,159 --> 00:22:41,360
we are able to execute any instruction

527
00:22:41,360 --> 00:22:42,480
on

528
00:22:42,480 --> 00:22:45,440
central processor and see how it

529
00:22:45,440 --> 00:22:49,200
reflects execution inside microcode

530
00:22:49,200 --> 00:22:50,240
so

531
00:22:50,240 --> 00:22:52,840
after a lot of research we

532
00:22:52,840 --> 00:22:57,600
generalize micro operation format

533
00:22:57,600 --> 00:23:00,080
you could see that there is source and

534
00:23:00,080 --> 00:23:03,840
destination indexes index of registers

535
00:23:03,840 --> 00:23:06,320
there could be some immediate values

536
00:23:06,320 --> 00:23:08,799
that stored inside the instruction up

537
00:23:08,799 --> 00:23:10,480
codes value

538
00:23:10,480 --> 00:23:13,760
parity and some other bits that

539
00:23:13,760 --> 00:23:16,320
controls how instruction

540
00:23:16,320 --> 00:23:18,159
executes on some

541
00:23:18,159 --> 00:23:21,200
microcode core

542
00:23:21,200 --> 00:23:26,320
and sequence word format uh tells how to

543
00:23:26,320 --> 00:23:27,840
link together

544
00:23:27,840 --> 00:23:30,799
data modified by each instruction and on

545
00:23:30,799 --> 00:23:32,880
which condition make jump to which

546
00:23:32,880 --> 00:23:33,919
address

547
00:23:33,919 --> 00:23:37,280
here is address inside the microcode so

548
00:23:37,280 --> 00:23:40,640
using this field you could just jump to

549
00:23:40,640 --> 00:23:42,880
any place after executing this

550
00:23:42,880 --> 00:23:46,400
instruction it's like

551
00:23:47,760 --> 00:23:50,559
execution using predicates so you have

552
00:23:50,559 --> 00:23:53,360
address of jump and jump on it if some

553
00:23:53,360 --> 00:23:55,120
predicates is

554
00:23:55,120 --> 00:23:56,880
true or false

555
00:23:56,880 --> 00:24:00,559
using conditions that specified in other

556
00:24:00,559 --> 00:24:02,400
fields

557
00:24:02,400 --> 00:24:03,520
and

558
00:24:03,520 --> 00:24:06,320
actually to rebuild this information

559
00:24:06,320 --> 00:24:08,320
this structure

560
00:24:08,320 --> 00:24:10,159
it was

561
00:24:10,159 --> 00:24:13,120
very very very complex uh task performed

562
00:24:13,120 --> 00:24:15,039
by mark and max i

563
00:24:15,039 --> 00:24:17,919
usually not i mostly not participated in

564
00:24:17,919 --> 00:24:18,880
this

565
00:24:18,880 --> 00:24:20,559
part of research

566
00:24:20,559 --> 00:24:21,840
and

567
00:24:21,840 --> 00:24:22,960
to

568
00:24:22,960 --> 00:24:25,440
check that we really could modify

569
00:24:25,440 --> 00:24:26,880
microcode

570
00:24:26,880 --> 00:24:28,640
we decided to

571
00:24:28,640 --> 00:24:32,640
modify cpu id instruction it's a good

572
00:24:32,640 --> 00:24:36,559
idea to use this instruction because we

573
00:24:36,559 --> 00:24:40,640
knew for sure that some leaves of cpu id

574
00:24:40,640 --> 00:24:42,799
are implemented in microcode because

575
00:24:42,799 --> 00:24:44,960
they could be updated

576
00:24:44,960 --> 00:24:48,480
using microcode update so when we

577
00:24:48,480 --> 00:24:50,159
discovered that

578
00:24:50,159 --> 00:24:54,159
intel released patches for

579
00:24:54,480 --> 00:24:58,480
vulnerabilities like spectrum meltdown

580
00:24:58,480 --> 00:25:01,200
they reflects in cpid

581
00:25:01,200 --> 00:25:02,480
behavior

582
00:25:02,480 --> 00:25:03,520
so

583
00:25:03,520 --> 00:25:05,200
we start trying

584
00:25:05,200 --> 00:25:08,720
different approaches and find the place

585
00:25:08,720 --> 00:25:11,840
find the match address where

586
00:25:11,840 --> 00:25:15,520
some leaf of cpu id

587
00:25:15,520 --> 00:25:19,279
instruction is called and we start

588
00:25:19,279 --> 00:25:20,720
trying to

589
00:25:20,720 --> 00:25:22,640
put instructions

590
00:25:22,640 --> 00:25:24,080
we have

591
00:25:24,080 --> 00:25:26,960
very little idea what each instruction

592
00:25:26,960 --> 00:25:30,799
does but we start trying them to perform

593
00:25:30,799 --> 00:25:32,880
something meaningful

594
00:25:32,880 --> 00:25:33,679
and

595
00:25:33,679 --> 00:25:36,799
finally we achieved ability to

596
00:25:36,799 --> 00:25:39,360
display name of processor

597
00:25:39,360 --> 00:25:42,559
name of processor generation

598
00:25:42,559 --> 00:25:46,400
with the values that we provide so

599
00:25:46,400 --> 00:25:48,960
we modified

600
00:25:48,960 --> 00:25:52,559
three arrays which available for writing

601
00:25:52,559 --> 00:25:53,520
and

602
00:25:53,520 --> 00:25:56,880
this reflects in modification of cpuid

603
00:25:56,880 --> 00:25:58,400
instruction

604
00:25:58,400 --> 00:26:00,240
that available from

605
00:26:00,240 --> 00:26:01,760
central processor

606
00:26:01,760 --> 00:26:04,159
and that demonstration was

607
00:26:04,159 --> 00:26:06,640
proof that we understand

608
00:26:06,640 --> 00:26:11,000
our findings properly

609
00:26:11,039 --> 00:26:15,520
after that we obtained a lot of uh bytes

610
00:26:15,520 --> 00:26:16,320
uh

611
00:26:16,320 --> 00:26:18,400
and some idea

612
00:26:18,400 --> 00:26:21,200
how we should interpret them but

613
00:26:21,200 --> 00:26:25,120
actually it's very hard to analyze so

614
00:26:25,120 --> 00:26:26,799
again we started

615
00:26:26,799 --> 00:26:28,159
developing

616
00:26:28,159 --> 00:26:29,039
some

617
00:26:29,039 --> 00:26:32,640
tool that allows us to analyze the code

618
00:26:32,640 --> 00:26:34,240
the microcode

619
00:26:34,240 --> 00:26:37,840
and at that level we start

620
00:26:37,840 --> 00:26:38,880
developing

621
00:26:38,880 --> 00:26:41,039
disassembler for microcode and you could

622
00:26:41,039 --> 00:26:45,120
find it in our github

623
00:26:46,559 --> 00:26:47,919
and now

624
00:26:47,919 --> 00:26:50,960
i will tell you about microcode update

625
00:26:50,960 --> 00:26:53,360
actually uh

626
00:26:53,360 --> 00:26:55,679
it's not too much known about microcode

627
00:26:55,679 --> 00:26:56,960
update

628
00:26:56,960 --> 00:26:59,200
we knew that it could be

629
00:26:59,200 --> 00:27:01,679
loaded at different different stages of

630
00:27:01,679 --> 00:27:04,159
execution during

631
00:27:04,159 --> 00:27:05,520
uefi

632
00:27:05,520 --> 00:27:09,279
startup routine during uh

633
00:27:09,279 --> 00:27:11,520
running a insight running operating

634
00:27:11,520 --> 00:27:14,480
system and so on uh we knew that

635
00:27:14,480 --> 00:27:18,080
microcode data are encrypted but no

636
00:27:18,080 --> 00:27:19,679
public information

637
00:27:19,679 --> 00:27:21,440
is available

638
00:27:21,440 --> 00:27:23,840
which algorithm is used

639
00:27:23,840 --> 00:27:26,720
when i have discussion with some people

640
00:27:26,720 --> 00:27:29,760
who are interested in that era near five

641
00:27:29,760 --> 00:27:32,640
years ago they have suggestions that

642
00:27:32,640 --> 00:27:34,559
microcode updates

643
00:27:34,559 --> 00:27:36,080
encrypted by

644
00:27:36,080 --> 00:27:38,640
ie's advanced encryption standard

645
00:27:38,640 --> 00:27:41,360
algorithm but there was no

646
00:27:41,360 --> 00:27:44,080
console process to prove that

647
00:27:44,080 --> 00:27:46,799
and it was well known that

648
00:27:46,799 --> 00:27:48,159
update is

649
00:27:48,159 --> 00:27:50,760
protected with rsa

650
00:27:50,760 --> 00:27:53,120
2048-bit signature

651
00:27:53,120 --> 00:27:55,760
and actually

652
00:27:55,760 --> 00:27:58,000
microcode updates

653
00:27:58,000 --> 00:28:00,720
they included in bios updates so there

654
00:28:00,720 --> 00:28:02,799
is ways to extract them

655
00:28:02,799 --> 00:28:04,480
some people already

656
00:28:04,480 --> 00:28:07,279
collect that information and they have

657
00:28:07,279 --> 00:28:09,600
some archives with

658
00:28:09,600 --> 00:28:11,520
different version of microcode for

659
00:28:11,520 --> 00:28:13,360
different types of processor

660
00:28:13,360 --> 00:28:14,640
architectures

661
00:28:14,640 --> 00:28:15,520
and

662
00:28:15,520 --> 00:28:19,120
i look inside that files and analyze the

663
00:28:19,120 --> 00:28:21,360
headers and discover

664
00:28:21,360 --> 00:28:24,799
information about internals of headers

665
00:28:24,799 --> 00:28:26,720
of microcode update

666
00:28:26,720 --> 00:28:29,200
and for sure after that i discovered

667
00:28:29,200 --> 00:28:31,360
that that information is documented by

668
00:28:31,360 --> 00:28:33,919
intel but unfortunately there are not

669
00:28:33,919 --> 00:28:35,600
too much information inside that

670
00:28:35,600 --> 00:28:37,039
documentation

671
00:28:37,039 --> 00:28:39,279
so you could find information

672
00:28:39,279 --> 00:28:42,480
how to find for which cpu types this

673
00:28:42,480 --> 00:28:44,720
microcode is applicable

674
00:28:44,720 --> 00:28:45,919
and

675
00:28:45,919 --> 00:28:48,320
almost nothing else

676
00:28:48,320 --> 00:28:50,399
i discovered where in files there is

677
00:28:50,399 --> 00:28:53,200
signature but again i could verify the

678
00:28:53,200 --> 00:28:55,440
signature but i have no private key i

679
00:28:55,440 --> 00:28:58,559
can't sign it by myself and i can't

680
00:28:58,559 --> 00:29:00,720
decrypt the data so

681
00:29:00,720 --> 00:29:04,720
this information is not not very helpful

682
00:29:04,720 --> 00:29:06,799
and finally

683
00:29:06,799 --> 00:29:08,000
when mark

684
00:29:08,000 --> 00:29:09,919
mostly mark developed

685
00:29:09,919 --> 00:29:12,720
perfect disassembler he

686
00:29:12,720 --> 00:29:14,720
i believe he understands almost every

687
00:29:14,720 --> 00:29:18,000
instruction in atom microcode

688
00:29:18,000 --> 00:29:18,960
so

689
00:29:18,960 --> 00:29:22,480
she creates a great tool that allows me

690
00:29:22,480 --> 00:29:25,440
to read the text not analyze the bytes

691
00:29:25,440 --> 00:29:28,159
byte analyze the instruction instruction

692
00:29:28,159 --> 00:29:30,000
uh not like

693
00:29:30,000 --> 00:29:32,399
intel x86 instruction

694
00:29:32,399 --> 00:29:36,480
uh they have very long names in mark

695
00:29:36,480 --> 00:29:37,919
interpretation

696
00:29:37,919 --> 00:29:40,399
and on this slide you could see uh on

697
00:29:40,399 --> 00:29:41,919
the left part

698
00:29:41,919 --> 00:29:45,279
you could see uh the compiled code that

699
00:29:45,279 --> 00:29:47,520
i find inside

700
00:29:47,520 --> 00:29:49,279
the compiled

701
00:29:49,279 --> 00:29:50,720
disassembly

702
00:29:50,720 --> 00:29:53,360
disassembler microcode

703
00:29:53,360 --> 00:29:55,440
and there is a lot of

704
00:29:55,440 --> 00:29:57,840
some actions but if you

705
00:29:57,840 --> 00:29:59,679
will

706
00:29:59,679 --> 00:30:02,880
try to interpret every step uh

707
00:30:02,880 --> 00:30:03,679
with

708
00:30:03,679 --> 00:30:07,200
some care you will recover a very simple

709
00:30:07,200 --> 00:30:10,000
algorithm it could be seen on the on the

710
00:30:10,000 --> 00:30:12,000
right part of the slide

711
00:30:12,000 --> 00:30:13,200
and uh

712
00:30:13,200 --> 00:30:14,640
actually if you're interested in

713
00:30:14,640 --> 00:30:16,480
cryptography

714
00:30:16,480 --> 00:30:17,440
you

715
00:30:17,440 --> 00:30:18,640
for most

716
00:30:18,640 --> 00:30:22,480
i'm sure that you knew the name rc4

717
00:30:22,480 --> 00:30:25,039
this algorithm was very popular more

718
00:30:25,039 --> 00:30:27,120
than 20 years ago

719
00:30:27,120 --> 00:30:30,240
it's a stream cipher with very simple

720
00:30:30,240 --> 00:30:34,240
code it used no constants is a

721
00:30:34,240 --> 00:30:36,480
very short implementation

722
00:30:36,480 --> 00:30:37,440
and

723
00:30:37,440 --> 00:30:39,120
you could see

724
00:30:39,120 --> 00:30:43,120
code for decrypting data with rc4 and

725
00:30:43,120 --> 00:30:46,000
there is another part of rc4 for setting

726
00:30:46,000 --> 00:30:47,120
the key

727
00:30:47,120 --> 00:30:48,080
and

728
00:30:48,080 --> 00:30:49,919
that's all that you need to decrypt the

729
00:30:49,919 --> 00:30:53,039
data actually ex

730
00:30:53,039 --> 00:30:55,360
beside

731
00:30:55,360 --> 00:30:57,919
set function and decrypt function you

732
00:30:57,919 --> 00:30:59,120
need the key

733
00:30:59,120 --> 00:31:00,720
and

734
00:31:00,720 --> 00:31:04,720
i find the key by analyzing another part

735
00:31:04,720 --> 00:31:05,440
of

736
00:31:05,440 --> 00:31:07,679
the microcode it's not representing on

737
00:31:07,679 --> 00:31:10,640
the slide actually i start with ideas

738
00:31:10,640 --> 00:31:12,720
that

739
00:31:12,720 --> 00:31:15,440
some encryption usually involves hashing

740
00:31:15,440 --> 00:31:16,640
so to

741
00:31:16,640 --> 00:31:20,320
decrypt data i need to provide the key

742
00:31:20,320 --> 00:31:22,960
and key is not constant should should be

743
00:31:22,960 --> 00:31:25,760
not a constant but some value

744
00:31:25,760 --> 00:31:28,159
evaluated using the hash function so

745
00:31:28,159 --> 00:31:30,320
i'll start looking for

746
00:31:30,320 --> 00:31:32,799
hashing constants find the constants

747
00:31:32,799 --> 00:31:36,080
related with sha 2056

748
00:31:36,080 --> 00:31:38,799
and that was start point and current for

749
00:31:38,799 --> 00:31:41,600
now analyzing the code i find this place

750
00:31:41,600 --> 00:31:44,480
i recovered the algorithm for getting

751
00:31:44,480 --> 00:31:46,559
the key and

752
00:31:46,559 --> 00:31:49,440
finally we decrypt the microcode update

753
00:31:49,440 --> 00:31:51,679
you could see on this slide that many

754
00:31:51,679 --> 00:31:55,360
bytes are zero so it's not random value

755
00:31:55,360 --> 00:31:58,159
with huge entropies this

756
00:31:58,159 --> 00:32:01,919
data entropy is very very little so we

757
00:32:01,919 --> 00:32:03,840
decrypt data properly

758
00:32:03,840 --> 00:32:05,360
and

759
00:32:05,360 --> 00:32:07,519
actually these bytes

760
00:32:07,519 --> 00:32:10,480
are bytes that written to

761
00:32:10,480 --> 00:32:12,240
three

762
00:32:12,240 --> 00:32:15,600
arrays available for writing so it's

763
00:32:15,600 --> 00:32:18,640
data for microscope update

764
00:32:18,640 --> 00:32:22,240
and a little bit later uh we discovered

765
00:32:22,240 --> 00:32:24,799
that not only

766
00:32:24,799 --> 00:32:26,840
old version

767
00:32:26,840 --> 00:32:30,240
of atom uh

768
00:32:30,240 --> 00:32:32,880
that we used for starting our research

769
00:32:32,880 --> 00:32:34,640
have some vulnerability but we

770
00:32:34,640 --> 00:32:36,880
discovered a new vulnerability for

771
00:32:36,880 --> 00:32:40,320
gemini lake cpu architecture and using

772
00:32:40,320 --> 00:32:42,159
that vulnerability we were able to

773
00:32:42,159 --> 00:32:45,600
obtain uh red unlock on that platform

774
00:32:45,600 --> 00:32:48,960
and again uh it's stock system on chip

775
00:32:48,960 --> 00:32:52,880
so we were able to unlock not only the

776
00:32:52,880 --> 00:32:55,200
management engine but also the central

777
00:32:55,200 --> 00:32:56,480
processor

778
00:32:56,480 --> 00:32:59,600
uh by the way intel calls this is not

779
00:32:59,600 --> 00:33:03,360
red unlock but intel unlock but we we

780
00:33:03,360 --> 00:33:06,000
use red unlock for many years

781
00:33:06,000 --> 00:33:06,880
and

782
00:33:06,880 --> 00:33:09,360
we still use this name for for

783
00:33:09,360 --> 00:33:11,840
simplicity

784
00:33:12,200 --> 00:33:16,399
a little bit later we discovered that

785
00:33:16,399 --> 00:33:19,840
there are at least two instructions that

786
00:33:19,840 --> 00:33:23,360
not documented in any public intel guide

787
00:33:23,360 --> 00:33:24,559
and

788
00:33:24,559 --> 00:33:26,799
you could enable them

789
00:33:26,799 --> 00:33:29,120
if you have

790
00:33:29,120 --> 00:33:32,559
a red unlock on the platform

791
00:33:32,559 --> 00:33:34,240
you

792
00:33:34,240 --> 00:33:35,200
just

793
00:33:35,200 --> 00:33:38,559
enable them using right to some model

794
00:33:38,559 --> 00:33:41,039
specific register after performing the

795
00:33:41,039 --> 00:33:42,720
unlock of the platform

796
00:33:42,720 --> 00:33:44,640
and using that

797
00:33:44,640 --> 00:33:47,279
instruction you have ability to read and

798
00:33:47,279 --> 00:33:51,200
write data from that arrays that i

799
00:33:51,200 --> 00:33:53,840
noted at the start of my part

800
00:33:53,840 --> 00:33:54,880
so

801
00:33:54,880 --> 00:33:56,559
using it you could

802
00:33:56,559 --> 00:33:59,120
read the microcode and

803
00:33:59,120 --> 00:34:01,760
for sure you could modify the microcode

804
00:34:01,760 --> 00:34:04,000
so there is a way to

805
00:34:04,000 --> 00:34:07,279
modify behavior of the computer system

806
00:34:07,279 --> 00:34:09,119
from the running system

807
00:34:09,119 --> 00:34:10,960
and it

808
00:34:10,960 --> 00:34:13,520
it modification would not be noticeable

809
00:34:13,520 --> 00:34:16,560
from uh from the operating system levels

810
00:34:16,560 --> 00:34:18,639
so you will be not able to find that

811
00:34:18,639 --> 00:34:20,800
something wrong with your microcode if

812
00:34:20,800 --> 00:34:22,159
you don't know how to use these

813
00:34:22,159 --> 00:34:24,000
registers

814
00:34:24,000 --> 00:34:25,918
so it's actually very interesting

815
00:34:25,918 --> 00:34:27,440
capability

816
00:34:27,440 --> 00:34:31,599
uh by the way uh it seems that

817
00:34:31,599 --> 00:34:32,719
one of

818
00:34:32,719 --> 00:34:36,879
common device that use uh

819
00:34:37,679 --> 00:34:40,639
either intel gemini lake or apollo lake

820
00:34:40,639 --> 00:34:44,560
processor is tesla cars so if you own

821
00:34:44,560 --> 00:34:46,839
one you could try to perform some

822
00:34:46,839 --> 00:34:49,280
resources and probably it would be

823
00:34:49,280 --> 00:34:51,280
interesting for you

824
00:34:51,280 --> 00:34:52,239
also

825
00:34:52,239 --> 00:34:53,280
when we

826
00:34:53,280 --> 00:34:55,839
look inside the microcode update after

827
00:34:55,839 --> 00:34:57,200
decryption

828
00:34:57,200 --> 00:34:59,839
for goldmount we discovered very

829
00:34:59,839 --> 00:35:01,839
interesting things there is a health

830
00:35:01,839 --> 00:35:04,800
file inside the microcode update

831
00:35:04,800 --> 00:35:08,560
uh actually we don't know what it is for

832
00:35:08,560 --> 00:35:11,599
uh for sure it's not uh executed on the

833
00:35:11,599 --> 00:35:14,000
microcode engine it's executed on the

834
00:35:14,000 --> 00:35:15,599
central processor

835
00:35:15,599 --> 00:35:18,079
but it's inside microcode updates so

836
00:35:18,079 --> 00:35:21,200
it's very interesting way of design

837
00:35:21,200 --> 00:35:24,000
some pages or some

838
00:35:24,000 --> 00:35:26,720
some internal features

839
00:35:26,720 --> 00:35:29,440
for central processor using

840
00:35:29,440 --> 00:35:33,200
l5 inside the micro code

841
00:35:33,200 --> 00:35:34,640
and

842
00:35:34,640 --> 00:35:36,800
you could find almost

843
00:35:36,800 --> 00:35:38,800
everything that we noted in this

844
00:35:38,800 --> 00:35:42,000
presentation in our github there are

845
00:35:42,000 --> 00:35:43,200
several

846
00:35:43,200 --> 00:35:44,640
repositories

847
00:35:44,640 --> 00:35:46,320
with

848
00:35:46,320 --> 00:35:49,200
with my micro codes that we dumped from

849
00:35:49,200 --> 00:35:51,040
gold mount

850
00:35:51,040 --> 00:35:51,920
some

851
00:35:51,920 --> 00:35:55,280
disassembler and so on

852
00:35:55,280 --> 00:35:57,440
it's a very good point to start if

853
00:35:57,440 --> 00:35:59,280
you're interested in research for

854
00:35:59,280 --> 00:36:01,920
microcode

855
00:36:02,960 --> 00:36:06,000
in may 2001

856
00:36:06,000 --> 00:36:08,079
to 2021

857
00:36:08,079 --> 00:36:10,000
intel

858
00:36:10,000 --> 00:36:11,440
announced that

859
00:36:11,440 --> 00:36:15,040
bug bounty program for microcode so if

860
00:36:15,040 --> 00:36:17,359
you find the bug in intel pentium

861
00:36:17,359 --> 00:36:20,240
celeron or intel atom processor

862
00:36:20,240 --> 00:36:23,839
you could get some money and uh

863
00:36:23,839 --> 00:36:26,480
10 years after intel announced the

864
00:36:26,480 --> 00:36:29,200
program we published our disassembler so

865
00:36:29,200 --> 00:36:31,280
probably our disassembler will help you

866
00:36:31,280 --> 00:36:34,320
to make this research

867
00:36:34,320 --> 00:36:36,400
this program will

868
00:36:36,400 --> 00:36:40,000
active till may this year so you have

869
00:36:40,000 --> 00:36:43,680
some time if you're not started yet

870
00:36:43,680 --> 00:36:47,040
uh also after our publications

871
00:36:47,040 --> 00:36:50,240
intel without any reference to our work

872
00:36:50,240 --> 00:36:51,359
uh

873
00:36:51,359 --> 00:36:54,480
published some description of how

874
00:36:54,480 --> 00:36:56,160
microcode work

875
00:36:56,160 --> 00:36:59,280
uh relating to sgt

876
00:36:59,280 --> 00:37:02,480
to internal technologies that

877
00:37:02,480 --> 00:37:05,119
allows you to perform operations

878
00:37:05,119 --> 00:37:08,640
securely even on

879
00:37:08,640 --> 00:37:10,960
for example cloud environment

880
00:37:10,960 --> 00:37:14,240
and they called xq code

881
00:37:14,240 --> 00:37:16,940
and you could find this information on

882
00:37:16,940 --> 00:37:18,160
[Music]

883
00:37:18,160 --> 00:37:21,760
intel site but actually it's not

884
00:37:21,760 --> 00:37:25,040
not very deep so it's just explanation

885
00:37:25,040 --> 00:37:29,440
how it works without any any details

886
00:37:29,440 --> 00:37:32,880
and finally uh

887
00:37:32,880 --> 00:37:34,480
first step that we

888
00:37:34,480 --> 00:37:38,640
performed is achieving a very very big

889
00:37:38,640 --> 00:37:41,359
level of dividing capabilities with that

890
00:37:41,359 --> 00:37:43,440
we called uh

891
00:37:43,440 --> 00:37:46,960
red unlock that allows us to

892
00:37:46,960 --> 00:37:50,079
to to do almost any debugging

893
00:37:50,079 --> 00:37:51,040
sync

894
00:37:51,040 --> 00:37:52,480
with the

895
00:37:52,480 --> 00:37:54,320
cpu and

896
00:37:54,320 --> 00:37:57,599
management engine and and the

897
00:37:57,599 --> 00:38:00,160
microcode too

898
00:38:00,160 --> 00:38:02,160
also we

899
00:38:02,160 --> 00:38:04,960
recovered almost uh every microcode up

900
00:38:04,960 --> 00:38:07,280
code for apollo lake for

901
00:38:07,280 --> 00:38:10,079
jimmy lake uh we not developed the

902
00:38:10,079 --> 00:38:12,720
microcode december because this uh

903
00:38:12,720 --> 00:38:16,400
requires almost uh the same amount of

904
00:38:16,400 --> 00:38:19,599
efforts so every processor architecture

905
00:38:19,599 --> 00:38:22,000
have they own microcode they own

906
00:38:22,000 --> 00:38:24,800
instruction and probably even their own

907
00:38:24,800 --> 00:38:27,119
way of interpret in

908
00:38:27,119 --> 00:38:30,960
interpret fields inside operation or

909
00:38:30,960 --> 00:38:34,079
sequence awards

910
00:38:34,800 --> 00:38:35,839
also

911
00:38:35,839 --> 00:38:38,720
we demonstrate that we could modify

912
00:38:38,720 --> 00:38:40,640
microcode on the fly

913
00:38:40,640 --> 00:38:43,119
without writing to spi flash or

914
00:38:43,119 --> 00:38:44,800
something like that

915
00:38:44,800 --> 00:38:46,880
and we find undocumented instructions

916
00:38:46,880 --> 00:38:48,720
that allows you to

917
00:38:48,720 --> 00:38:52,560
do it using uh from uh operating system

918
00:38:52,560 --> 00:38:55,680
from from running computer

919
00:38:55,680 --> 00:38:56,720
so

920
00:38:56,720 --> 00:38:58,240
probably

921
00:38:58,240 --> 00:39:01,200
i believe that it's all that we have to

922
00:39:01,200 --> 00:39:03,119
say to you today

923
00:39:03,119 --> 00:39:06,079
and uh i want to say thank you for mark

924
00:39:06,079 --> 00:39:09,119
hermolov again uh unfortunately he is

925
00:39:09,119 --> 00:39:12,000
not able he wasn't able to

926
00:39:12,000 --> 00:39:13,599
talk today but

927
00:39:13,599 --> 00:39:15,760
his

928
00:39:15,760 --> 00:39:18,880
his impact on our research was really

929
00:39:18,880 --> 00:39:21,440
really significant and dramatical

930
00:39:21,440 --> 00:39:24,920
and thank you

931
00:39:29,040 --> 00:39:31,119
you

