1
00:00:00,000 --> 00:00:02,130
[Applause]

2
00:00:03,830 --> 00:00:07,048
<font color="#E5E5E5">okay</font>

3
00:00:05,069 --> 00:00:09,000
yeah thanks everyone for coming<font color="#E5E5E5"> to my</font>

4
00:00:07,049 --> 00:00:11,400
talk<font color="#CCCCCC"> I hope</font><font color="#E5E5E5"> you all had a great</font>

5
00:00:09,000 --> 00:00:14,610
<font color="#E5E5E5">conference so</font><font color="#CCCCCC"> far I</font><font color="#E5E5E5"> definitely</font><font color="#CCCCCC"> have</font><font color="#E5E5E5"> and</font>

6
00:00:11,400 --> 00:00:17,130
here's another talk on fuzzing<font color="#E5E5E5"> this time</font>

7
00:00:14,610 --> 00:00:18,720
about<font color="#E5E5E5"> JavaScript engines so let's get</font>

8
00:00:17,130 --> 00:00:21,080
right<font color="#CCCCCC"> to it</font>

9
00:00:18,720 --> 00:00:24,948
start with some motivation on this slide

10
00:00:21,080 --> 00:00:27,650
you can<font color="#CCCCCC"> see two</font><font color="#E5E5E5"> proof of concepts for</font>

11
00:00:24,949 --> 00:00:30,300
<font color="#CCCCCC">fairly common JavaScript engine bugs</font>

12
00:00:27,650 --> 00:00:32,820
it's not really important what<font color="#E5E5E5"> the bug</font>

13
00:00:30,300 --> 00:00:35,399
here is in particular<font color="#CCCCCC"> so you have to see</font>

14
00:00:32,820 --> 00:00:38,340
the numbers<font color="#CCCCCC"> we can look it up but</font><font color="#E5E5E5"> this</font>

15
00:00:35,399 --> 00:00:40,290
<font color="#E5E5E5">is just to give you an idea what</font><font color="#CCCCCC"> the</font>

16
00:00:38,340 --> 00:00:44,250
kind<font color="#E5E5E5"> of code is</font><font color="#CCCCCC"> that we are</font><font color="#E5E5E5"> trying to</font>

17
00:00:40,290 --> 00:00:46,200
<font color="#E5E5E5">find through fuzzing</font><font color="#CCCCCC"> and so let's think</font>

18
00:00:44,250 --> 00:00:48,780
<font color="#E5E5E5">about</font><font color="#CCCCCC"> how we could write a</font><font color="#E5E5E5"> fuzzer that</font>

19
00:00:46,200 --> 00:00:51,870
generates<font color="#E5E5E5"> like code something like this</font>

20
00:00:48,780 --> 00:00:54,449
<font color="#CCCCCC">I guess the first yeah the</font><font color="#E5E5E5"> question is</font>

21
00:00:51,870 --> 00:00:56,669
how do we fast JavaScript<font color="#CCCCCC"> engine so I</font>

22
00:00:54,449 --> 00:00:59,879
guess the<font color="#E5E5E5"> first the simplest approach to</font>

23
00:00:56,670 --> 00:01:02,449
fuzzing<font color="#E5E5E5"> as well you do dumb fuzzing you</font>

24
00:00:59,879 --> 00:01:06,060
just throw<font color="#CCCCCC"> random by itself your target</font>

25
00:01:02,449 --> 00:01:09,600
yeah now as you can maybe imagine for a

26
00:01:06,060 --> 00:01:12,330
<font color="#CCCCCC">javascript interpreter this is not going</font>

27
00:01:09,600 --> 00:01:14,280
<font color="#E5E5E5">to be that effective</font><font color="#CCCCCC"> but I think it's</font>

28
00:01:12,330 --> 00:01:16,350
<font color="#E5E5E5">still important to to understand exactly</font>

29
00:01:14,280 --> 00:01:19,049
what's the problem here so what's going

30
00:01:16,350 --> 00:01:21,059
to happen<font color="#CCCCCC"> is that</font><font color="#E5E5E5"> the parser the thing</font>

31
00:01:19,049 --> 00:01:24,479
that consumes<font color="#CCCCCC"> JavaScript and converts it</font>

32
00:01:21,060 --> 00:01:26,610
<font color="#CCCCCC">to like an internal bytecode saying</font><font color="#E5E5E5"> it</font>

33
00:01:24,479 --> 00:01:29,130
rejects this<font color="#E5E5E5"> because it's not valid</font>

34
00:01:26,610 --> 00:01:32,850
JavaScript syntax<font color="#E5E5E5"> and so nothing ever</font>

35
00:01:29,130 --> 00:01:34,860
<font color="#E5E5E5">gets executed it stops in the parser and</font>

36
00:01:32,850 --> 00:01:37,890
the parser<font color="#E5E5E5"> is may be interesting for</font>

37
00:01:34,860 --> 00:01:39,869
fuzzing but it's only about two or three

38
00:01:37,890 --> 00:01:42,750
<font color="#E5E5E5">percent maybe of the engine source code</font>

39
00:01:39,869 --> 00:01:47,610
and probably the least<font color="#CCCCCC"> interesting</font><font color="#E5E5E5"> once</font>

40
00:01:42,750 --> 00:01:49,890
so we have to do<font color="#E5E5E5"> something better</font><font color="#CCCCCC"> this</font>

41
00:01:47,610 --> 00:01:52,409
brings us to<font color="#CCCCCC"> our first</font><font color="#E5E5E5"> requirement which</font>

42
00:01:49,890 --> 00:01:54,600
is<font color="#E5E5E5"> all the the samples we generate they</font>

43
00:01:52,409 --> 00:01:59,420
have to at<font color="#CCCCCC"> least have valid JavaScript</font>

44
00:01:54,600 --> 00:02:02,189
syntax so requirement<font color="#CCCCCC"> one out of a few</font>

45
00:01:59,420 --> 00:02:05,250
now so it's in tactical correctness now

46
00:02:02,189 --> 00:02:06,809
how can<font color="#CCCCCC"> we achieve this</font><font color="#E5E5E5"> one possible way</font>

47
00:02:05,250 --> 00:02:07,320
<font color="#E5E5E5">to do this is with</font><font color="#CCCCCC"> a grammar based</font>

48
00:02:06,810 --> 00:02:09,920
<font color="#E5E5E5">fuzzer</font>

49
00:02:07,320 --> 00:02:13,980
<font color="#CCCCCC">that's</font><font color="#E5E5E5"> also a very common approach</font>

50
00:02:09,919 --> 00:02:16,559
<font color="#CCCCCC">example here is tomato</font><font color="#E5E5E5"> and many others</font>

51
00:02:13,980 --> 00:02:18,929
the idea is you take the JavaScript

52
00:02:16,560 --> 00:02:21,060
syntax you formulate it as as a

53
00:02:18,930 --> 00:02:22,290
context-free grammar and then what your

54
00:02:21,060 --> 00:02:24,870
father does is<font color="#E5E5E5"> it takes random</font>

55
00:02:22,290 --> 00:02:27,600
production rules<font color="#E5E5E5"> so it decides to</font>

56
00:02:24,870 --> 00:02:29,160
produce<font color="#E5E5E5"> a expression</font><font color="#CCCCCC"> statement maybe and</font>

57
00:02:27,600 --> 00:02:31,799
then for the expression<font color="#CCCCCC"> it decides to</font>

58
00:02:29,160 --> 00:02:34,310
take<font color="#E5E5E5"> a to use an addition expression and</font>

59
00:02:31,800 --> 00:02:37,590
then and so on

60
00:02:34,310 --> 00:02:40,440
and yeah so then you<font color="#E5E5E5"> could come up with</font>

61
00:02:37,590 --> 00:02:42,690
<font color="#CCCCCC">something like this maybe so this this</font>

62
00:02:40,440 --> 00:02:45,859
<font color="#CCCCCC">is what a generative grammar based</font>

63
00:02:42,690 --> 00:02:49,170
father couldn't can produce for<font color="#E5E5E5"> you</font>

64
00:02:45,860 --> 00:02:51,750
another<font color="#E5E5E5"> problem here is in this</font>

65
00:02:49,170 --> 00:02:54,149
<font color="#E5E5E5">particular sample here that it's calling</font>

66
00:02:51,750 --> 00:02:56,160
a method<font color="#E5E5E5"> on something that's that's a</font>

67
00:02:54,150 --> 00:02:59,070
number<font color="#E5E5E5"> which doesn't work it's going to</font>

68
00:02:56,160 --> 00:03:01,079
<font color="#E5E5E5">throw</font><font color="#CCCCCC"> a runtime</font><font color="#E5E5E5"> exception and the</font>

69
00:02:59,070 --> 00:03:04,200
problem with<font color="#CCCCCC"> that is that once the first</font>

70
00:03:01,080 --> 00:03:05,940
<font color="#E5E5E5">runtime exception occurred occurs then</font>

71
00:03:04,200 --> 00:03:09,329
the<font color="#CCCCCC"> code</font><font color="#E5E5E5"> following that is never going</font>

72
00:03:05,940 --> 00:03:14,459
<font color="#CCCCCC">to be executed so it's not yeah it's not</font>

73
00:03:09,330 --> 00:03:17,040
<font color="#E5E5E5">very helpful</font><font color="#CCCCCC"> and so the the common</font>

74
00:03:14,459 --> 00:03:20,120
solution for<font color="#E5E5E5"> this is you put</font><font color="#CCCCCC"> everything</font>

75
00:03:17,040 --> 00:03:23,070
in frycade<font color="#E5E5E5"> if you look at some of the</font>

76
00:03:20,120 --> 00:03:24,780
the common JavaScript<font color="#CCCCCC"> or browser</font>

77
00:03:23,070 --> 00:03:26,820
<font color="#CCCCCC">father's you will see pretty</font><font color="#E5E5E5"> much</font>

78
00:03:24,780 --> 00:03:29,610
everything as in<font color="#CCCCCC"> triquet</font><font color="#E5E5E5"> and then it's</font>

79
00:03:26,820 --> 00:03:31,049
<font color="#E5E5E5">okay every every statement executes if</font>

80
00:03:29,610 --> 00:03:32,430
it throws an exception<font color="#E5E5E5"> it's fine it's</font>

81
00:03:31,049 --> 00:03:36,150
getting caught<font color="#E5E5E5"> and then the next code</font>

82
00:03:32,430 --> 00:03:37,830
still gets executed the problem here is

83
00:03:36,150 --> 00:03:40,140
<font color="#E5E5E5">if you</font><font color="#CCCCCC"> think back about these samples</font>

84
00:03:37,830 --> 00:03:41,070
that we try to find at<font color="#CCCCCC"> least</font><font color="#E5E5E5"> one of them</font>

85
00:03:40,140 --> 00:03:43,109
<font color="#E5E5E5">was a jib bug</font>

86
00:03:41,070 --> 00:03:46,590
so the<font color="#E5E5E5"> bark in</font><font color="#CCCCCC"> a JIT compiler as we</font>

87
00:03:43,110 --> 00:03:49,530
heard yesterday from<font color="#E5E5E5"> Bruno</font><font color="#CCCCCC"> and so for a</font>

88
00:03:46,590 --> 00:03:52,140
JIT compiler these two here are<font color="#CCCCCC"> really</font>

89
00:03:49,530 --> 00:03:54,540
<font color="#CCCCCC">really different right</font>

90
00:03:52,140 --> 00:03:57,480
so<font color="#E5E5E5"> there's completely different control</font>

91
00:03:54,540 --> 00:03:58,709
flow between<font color="#E5E5E5"> the sample on the left side</font>

92
00:03:57,480 --> 00:04:01,709
and<font color="#E5E5E5"> one on the right</font><font color="#CCCCCC"> with all the</font>

93
00:03:58,709 --> 00:04:04,739
<font color="#CCCCCC">trycatch so for a JIT</font><font color="#E5E5E5"> this doesn't</font>

94
00:04:01,709 --> 00:04:08,100
<font color="#E5E5E5">really work and so this brings us</font><font color="#CCCCCC"> to our</font>

95
00:04:04,739 --> 00:04:10,230
second requirement<font color="#E5E5E5"> which is that we need</font>

96
00:04:08,100 --> 00:04:12,570
a fairly<font color="#E5E5E5"> high degree</font><font color="#CCCCCC"> of semantic</font>

97
00:04:10,230 --> 00:04:16,070
correctness as well right so<font color="#E5E5E5"> not only</font>

98
00:04:12,570 --> 00:04:21,298
syntactic correctness also<font color="#E5E5E5"> semantics</font>

99
00:04:16,070 --> 00:04:22,950
<font color="#CCCCCC">this is harder</font><font color="#E5E5E5"> quite a bit</font><font color="#CCCCCC"> and there are</font>

100
00:04:21,298 --> 00:04:26,820
a<font color="#E5E5E5"> few options</font><font color="#CCCCCC"> that you can achieve this</font>

101
00:04:22,950 --> 00:04:28,310
one option<font color="#CCCCCC"> is you can try to do fairly</font>

102
00:04:26,820 --> 00:04:33,419
<font color="#E5E5E5">precise type track</font>

103
00:04:28,310 --> 00:04:35,610
remember this example<font color="#E5E5E5"> from from</font><font color="#CCCCCC"> from the</font>

104
00:04:33,419 --> 00:04:37,889
<font color="#CCCCCC">generative father</font><font color="#E5E5E5"> you could try to trace</font>

105
00:04:35,610 --> 00:04:39,840
that this variable<font color="#CCCCCC"> head type integer</font><font color="#E5E5E5"> and</font>

106
00:04:37,889 --> 00:04:43,199
then you wouldn't try to to call a

107
00:04:39,840 --> 00:04:45,659
method<font color="#E5E5E5"> on it</font><font color="#CCCCCC"> other</font><font color="#E5E5E5"> ideas that</font><font color="#CCCCCC"> I want to</font>

108
00:04:43,199 --> 00:04:47,430
play with is to<font color="#E5E5E5"> to maybe generate</font>

109
00:04:45,659 --> 00:04:49,050
<font color="#E5E5E5">JavaScript called step by step so you</font>

110
00:04:47,430 --> 00:04:51,060
<font color="#CCCCCC">generated a few</font><font color="#E5E5E5"> lines and</font><font color="#CCCCCC"> then you</font><font color="#E5E5E5"> run</font>

111
00:04:49,050 --> 00:04:52,469
<font color="#E5E5E5">that and if that doesn't throw an</font>

112
00:04:51,060 --> 00:04:55,050
exception you continue and if it's

113
00:04:52,469 --> 00:04:57,030
Rosanne exception you go back and so<font color="#E5E5E5"> on</font>

114
00:04:55,050 --> 00:04:59,460
but the approach<font color="#CCCCCC"> that I decided</font><font color="#E5E5E5"> to use</font>

115
00:04:57,030 --> 00:05:00,900
here<font color="#CCCCCC"> is mutation based and again this</font>

116
00:04:59,460 --> 00:05:02,219
<font color="#E5E5E5">picture is a bit messed up I don't</font>

117
00:05:00,900 --> 00:05:05,429
really know why<font color="#E5E5E5"> but I guess you can</font>

118
00:05:02,219 --> 00:05:09,330
still follow<font color="#E5E5E5"> so with the mutation based</font>

119
00:05:05,430 --> 00:05:12,029
approach<font color="#E5E5E5"> the idea is</font><font color="#CCCCCC"> that in your corpus</font>

120
00:05:09,330 --> 00:05:15,060
<font color="#E5E5E5">which you take your samples from you</font>

121
00:05:12,029 --> 00:05:16,979
always have semantically<font color="#E5E5E5"> valid samples</font>

122
00:05:15,060 --> 00:05:18,810
in<font color="#E5E5E5"> your corpus</font><font color="#CCCCCC"> and so then</font><font color="#E5E5E5"> for the</font>

123
00:05:16,979 --> 00:05:21,960
mutation<font color="#CCCCCC"> you pick a sample</font><font color="#E5E5E5"> it's it's</font>

124
00:05:18,810 --> 00:05:23,969
valid<font color="#E5E5E5"> you to do some small mutations to</font>

125
00:05:21,960 --> 00:05:26,659
it<font color="#E5E5E5"> and these small mutations they have a</font>

126
00:05:23,969 --> 00:05:30,689
small chance<font color="#E5E5E5"> of making it invalid right</font>

127
00:05:26,659 --> 00:05:33,659
<font color="#E5E5E5">and so with that</font><font color="#CCCCCC"> you get a fairly high</font>

128
00:05:30,689 --> 00:05:35,520
<font color="#E5E5E5">degree of semantic correctness</font><font color="#CCCCCC"> and then</font>

129
00:05:33,659 --> 00:05:37,620
depending if you do any<font color="#CCCCCC"> kind of guided</font>

130
00:05:35,520 --> 00:05:39,740
<font color="#E5E5E5">fuzzing</font><font color="#CCCCCC"> also you you put samples back</font>

131
00:05:37,620 --> 00:05:42,330
into the corpus if they are interesting

132
00:05:39,740 --> 00:05:43,740
but you only do this if the sample

133
00:05:42,330 --> 00:05:45,210
doesn't<font color="#E5E5E5"> throw an</font><font color="#CCCCCC"> exception</font><font color="#E5E5E5"> this is</font>

134
00:05:43,740 --> 00:05:47,849
<font color="#E5E5E5">really important so everything in your</font>

135
00:05:45,210 --> 00:05:53,669
corpus<font color="#CCCCCC"> must not throw runtime exceptions</font>

136
00:05:47,849 --> 00:05:54,990
<font color="#E5E5E5">and then this works</font><font color="#CCCCCC"> so then then the</font>

137
00:05:53,669 --> 00:05:56,849
final question<font color="#CCCCCC"> you know the</font><font color="#E5E5E5"> final</font>

138
00:05:54,990 --> 00:06:00,659
<font color="#CCCCCC">requirement is here</font>

139
00:05:56,849 --> 00:06:02,460
we need<font color="#E5E5E5"> mutations for JavaScript code so</font>

140
00:06:00,659 --> 00:06:05,699
<font color="#E5E5E5">mutation is present</font><font color="#CCCCCC"> need</font><font color="#E5E5E5"> some kind of</font>

141
00:06:02,460 --> 00:06:07,859
way of mutating inputs<font color="#CCCCCC"> bit</font><font color="#E5E5E5"> flipping</font>

142
00:06:05,699 --> 00:06:09,839
probably not super effective then we run

143
00:06:07,860 --> 00:06:13,199
<font color="#CCCCCC">into the syntactic correctness</font><font color="#E5E5E5"> problem</font>

144
00:06:09,839 --> 00:06:15,419
<font color="#E5E5E5">so let's try to figure out sensible</font>

145
00:06:13,199 --> 00:06:18,719
mutations to to<font color="#E5E5E5"> JavaScript code or</font>

146
00:06:15,419 --> 00:06:21,060
source code in general<font color="#CCCCCC"> now this is also</font>

147
00:06:18,719 --> 00:06:23,879
not a<font color="#CCCCCC"> lot of new research</font><font color="#E5E5E5"> topic people</font>

148
00:06:21,060 --> 00:06:27,240
<font color="#CCCCCC">are already mutating source code in my</font>

149
00:06:23,879 --> 00:06:31,229
<font color="#CCCCCC">opinion there's three different levels</font>

150
00:06:27,240 --> 00:06:33,270
on<font color="#CCCCCC"> which you can mutate code so that's</font>

151
00:06:31,229 --> 00:06:35,188
<font color="#E5E5E5">what you see</font><font color="#CCCCCC"> on the right side here the</font>

152
00:06:33,270 --> 00:06:38,818
the top level is like the source code

153
00:06:35,189 --> 00:06:40,949
itself that<font color="#E5E5E5"> text string</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> can flip</font>

154
00:06:38,819 --> 00:06:41,960
bits and bytes on<font color="#CCCCCC"> there probably not</font>

155
00:06:40,949 --> 00:06:45,139
<font color="#CCCCCC">very effective again</font>

156
00:06:41,960 --> 00:06:46,880
syntactic<font color="#CCCCCC"> correctness is a problem the</font>

157
00:06:45,139 --> 00:06:49,759
<font color="#E5E5E5">next level and this</font><font color="#CCCCCC"> is what people</font><font color="#E5E5E5"> are</font>

158
00:06:46,880 --> 00:06:52,159
<font color="#CCCCCC">already implementing and fussing with is</font>

159
00:06:49,759 --> 00:06:54,410
the syntax<font color="#E5E5E5"> tree the abstract syntax tree</font>

160
00:06:52,160 --> 00:06:57,169
<font color="#E5E5E5">so it's a tree</font><font color="#CCCCCC"> representation of</font>

161
00:06:54,410 --> 00:06:58,880
<font color="#E5E5E5">JavaScript source code you can change</font>

162
00:06:57,169 --> 00:07:01,310
like literal it's<font color="#E5E5E5"> also in it or you can</font>

163
00:06:58,880 --> 00:07:03,560
perform tree mutations like take this

164
00:07:01,310 --> 00:07:06,650
this<font color="#E5E5E5"> one here</font><font color="#CCCCCC"> put</font><font color="#E5E5E5"> it somewhere else or</font>

165
00:07:03,560 --> 00:07:10,310
copy copy<font color="#CCCCCC"> sub trees from another sample</font>

166
00:07:06,650 --> 00:07:13,489
<font color="#E5E5E5">etcetera</font><font color="#CCCCCC"> but the observation here is</font>

167
00:07:10,310 --> 00:07:15,560
<font color="#E5E5E5">that for the engine itself the the</font>

168
00:07:13,490 --> 00:07:17,389
<font color="#E5E5E5">syntactic representation is really</font>

169
00:07:15,560 --> 00:07:19,880
irrelevant<font color="#CCCCCC"> it doesn't care what</font><font color="#E5E5E5"> it cares</font>

170
00:07:17,389 --> 00:07:23,750
<font color="#CCCCCC">about is stuff like control and data</font>

171
00:07:19,880 --> 00:07:25,969
flow<font color="#CCCCCC"> and so what the engine internally</font>

172
00:07:23,750 --> 00:07:28,340
does is<font color="#CCCCCC"> is it</font><font color="#E5E5E5"> first takes this syntax</font>

173
00:07:25,970 --> 00:07:30,650
<font color="#E5E5E5">tree</font><font color="#CCCCCC"> and it converts it to byte code</font><font color="#E5E5E5"> and</font>

174
00:07:28,340 --> 00:07:34,039
despite<font color="#CCCCCC"> code is then what captures</font>

175
00:07:30,650 --> 00:07:35,229
control and data flow<font color="#E5E5E5"> and so for the</font>

176
00:07:34,039 --> 00:07:37,849
same<font color="#E5E5E5"> Biko there's many different</font>

177
00:07:35,229 --> 00:07:40,340
representations<font color="#E5E5E5"> in the syntax tree but</font>

178
00:07:37,849 --> 00:07:42,469
the<font color="#CCCCCC"> byte code is important thing</font><font color="#E5E5E5"> so what</font>

179
00:07:40,340 --> 00:07:45,138
I try to do<font color="#E5E5E5"> I wanted to do something</font>

180
00:07:42,470 --> 00:07:47,720
<font color="#CCCCCC">different what I try to do is to mutate</font>

181
00:07:45,139 --> 00:07:50,330
more on a<font color="#E5E5E5"> byte code level on a lower</font>

182
00:07:47,720 --> 00:07:53,150
level<font color="#CCCCCC"> and so things we can do there's</font>

183
00:07:50,330 --> 00:07:55,789
you can like mess with instructions

184
00:07:53,150 --> 00:07:57,710
change registers<font color="#CCCCCC"> or you can copy</font>

185
00:07:55,789 --> 00:07:59,780
instructions from one sample<font color="#E5E5E5"> put it in</font>

186
00:07:57,710 --> 00:08:05,539
into the other and so on it will see

187
00:07:59,780 --> 00:08:08,659
some mutations later<font color="#E5E5E5"> so if we want to do</font>

188
00:08:05,539 --> 00:08:10,280
<font color="#CCCCCC">pass or mutate</font><font color="#E5E5E5"> byte code we can either</font>

189
00:08:08,659 --> 00:08:12,919
pick an<font color="#E5E5E5"> existing byte code or we can</font>

190
00:08:10,280 --> 00:08:14,869
make our own<font color="#CCCCCC"> I made my own I called it</font>

191
00:08:12,919 --> 00:08:18,680
fast<font color="#CCCCCC"> il</font><font color="#E5E5E5"> just because it sounds cool I</font>

192
00:08:14,870 --> 00:08:20,150
guess<font color="#CCCCCC"> and it it's yeah I guess it's</font>

193
00:08:18,680 --> 00:08:21,560
optimized<font color="#CCCCCC"> for fasting right</font><font color="#E5E5E5"> so it's an</font>

194
00:08:20,150 --> 00:08:23,929
intermediate<font color="#CCCCCC"> language it looks kind of</font>

195
00:08:21,560 --> 00:08:26,780
<font color="#E5E5E5">like the byte code you see but it it's</font>

196
00:08:23,930 --> 00:08:31,550
easy to mutate that and here's an

197
00:08:26,780 --> 00:08:33,949
<font color="#E5E5E5">example how it looks like it's I guess</font>

198
00:08:31,550 --> 00:08:37,190
it's fairly<font color="#E5E5E5"> self-explanatory the it has</font>

199
00:08:33,950 --> 00:08:40,190
these registers or variables<font color="#CCCCCC"> v-0 v1 and</font>

200
00:08:37,190 --> 00:08:42,140
so on<font color="#CCCCCC"> and then there's operations</font><font color="#E5E5E5"> each</font>

201
00:08:40,190 --> 00:08:45,050
<font color="#E5E5E5">instruction has this operation load in</font>

202
00:08:42,140 --> 00:08:46,640
or begin for<font color="#CCCCCC"> our binary operation and</font>

203
00:08:45,050 --> 00:08:49,520
they can potentially<font color="#E5E5E5"> have these</font>

204
00:08:46,640 --> 00:08:51,640
parameters<font color="#CCCCCC"> which is the blue things so</font>

205
00:08:49,520 --> 00:08:54,600
load in here<font color="#E5E5E5"> the first one has the</font>

206
00:08:51,640 --> 00:08:59,130
<font color="#CCCCCC">parameter</font><font color="#E5E5E5"> 0 so it's loading</font>

207
00:08:54,600 --> 00:09:02,459
the<font color="#E5E5E5"> value 0 into v-0 I guess</font><font color="#CCCCCC"> okay so</font>

208
00:08:59,130 --> 00:09:05,009
that's how it<font color="#E5E5E5"> looks like</font><font color="#CCCCCC"> the important</font>

209
00:09:02,459 --> 00:09:06,660
next step here<font color="#E5E5E5"> is of course</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> is</font>

210
00:09:05,009 --> 00:09:08,790
technically<font color="#CCCCCC"> a</font><font color="#E5E5E5"> JavaScript</font><font color="#CCCCCC"> engine</font><font color="#E5E5E5"> doesn't</font>

211
00:09:06,660 --> 00:09:12,360
understand this so we first have<font color="#CCCCCC"> to</font>

212
00:09:08,790 --> 00:09:13,079
translate<font color="#E5E5E5"> that into JavaScript so let's</font>

213
00:09:12,360 --> 00:09:16,680
talk about<font color="#E5E5E5"> that</font>

214
00:09:13,079 --> 00:09:18,569
it's called lifting<font color="#CCCCCC"> again this is the</font>

215
00:09:16,680 --> 00:09:19,949
same<font color="#E5E5E5"> sample on the left side let's see</font>

216
00:09:18,569 --> 00:09:23,610
how we can make it<font color="#E5E5E5"> turn it into</font>

217
00:09:19,949 --> 00:09:26,550
JavaScript<font color="#E5E5E5"> there's multiple ways</font><font color="#CCCCCC"> you can</font>

218
00:09:23,610 --> 00:09:29,550
do this<font color="#CCCCCC"> there's a trivial</font><font color="#E5E5E5"> way in which</font>

219
00:09:26,550 --> 00:09:31,949
you pretty much convert<font color="#E5E5E5"> one instruction</font>

220
00:09:29,550 --> 00:09:34,859
into one statement so these loadings

221
00:09:31,949 --> 00:09:39,389
they become assignments of constants<font color="#E5E5E5"> the</font>

222
00:09:34,860 --> 00:09:43,800
begin<font color="#E5E5E5"> for starts starts a for loop</font><font color="#CCCCCC"> etc</font>

223
00:09:39,389 --> 00:09:45,630
<font color="#CCCCCC">so this</font><font color="#E5E5E5"> is very easy</font><font color="#CCCCCC"> to do if</font><font color="#E5E5E5"> you want</font>

224
00:09:43,800 --> 00:09:48,209
<font color="#CCCCCC">nicer</font><font color="#E5E5E5"> looking code you can actually also</font>

225
00:09:45,630 --> 00:09:51,180
do it so there's another way<font color="#E5E5E5"> to lift</font>

226
00:09:48,209 --> 00:09:53,130
this<font color="#CCCCCC"> at the</font><font color="#E5E5E5"> bottom right here this one</font>

227
00:09:51,180 --> 00:09:55,620
uses expression<font color="#CCCCCC"> inlining so</font><font color="#E5E5E5"> you can see</font>

228
00:09:53,130 --> 00:09:58,920
it has<font color="#CCCCCC"> inline all</font><font color="#E5E5E5"> these constants</font><font color="#CCCCCC"> zero</font>

229
00:09:55,620 --> 00:10:02,000
and<font color="#CCCCCC"> ten and so on and and like chained</font>

230
00:09:58,920 --> 00:10:04,740
together the method calls<font color="#E5E5E5"> et cetera</font><font color="#CCCCCC"> but</font>

231
00:10:02,000 --> 00:10:07,589
<font color="#CCCCCC">the important idea here is that</font><font color="#E5E5E5"> both</font><font color="#CCCCCC"> of</font>

232
00:10:04,740 --> 00:10:09,930
these<font color="#E5E5E5"> syntactic representations they do</font>

233
00:10:07,589 --> 00:10:12,300
the exact same<font color="#E5E5E5"> thing right</font><font color="#CCCCCC"> so for an</font>

234
00:10:09,930 --> 00:10:14,399
engine it doesn't really matter the<font color="#CCCCCC"> the</font>

235
00:10:12,300 --> 00:10:16,740
top the<font color="#CCCCCC"> bottom right</font><font color="#E5E5E5"> one might be nicer</font>

236
00:10:14,399 --> 00:10:19,740
for<font color="#CCCCCC"> you to look at but for an engine it</font>

237
00:10:16,740 --> 00:10:24,149
shouldn't really make<font color="#E5E5E5"> a difference okay</font>

238
00:10:19,740 --> 00:10:26,490
<font color="#CCCCCC">so that's lifting</font><font color="#E5E5E5"> but let's talk about</font>

239
00:10:24,149 --> 00:10:31,470
mutating<font color="#E5E5E5"> which is the real important</font>

240
00:10:26,490 --> 00:10:34,290
<font color="#E5E5E5">part</font><font color="#CCCCCC"> so here's an a simple simpler</font>

241
00:10:31,470 --> 00:10:37,470
facile program and I'm<font color="#E5E5E5"> going to show a</font>

242
00:10:34,290 --> 00:10:39,779
few<font color="#E5E5E5"> kind of fundamental mutations for</font>

243
00:10:37,470 --> 00:10:42,779
that so the first<font color="#CCCCCC"> one is called</font><font color="#E5E5E5"> input</font>

244
00:10:39,779 --> 00:10:46,019
mutator<font color="#E5E5E5"> it's a dataflow mutation it's</font>

245
00:10:42,779 --> 00:10:47,760
really simple<font color="#E5E5E5"> it takes an input value of</font>

246
00:10:46,019 --> 00:10:50,850
some instruction and replace<font color="#E5E5E5"> a set with</font>

247
00:10:47,760 --> 00:10:53,610
a different one<font color="#CCCCCC"> so in this case the call</font>

248
00:10:50,850 --> 00:10:56,699
function operation the the second<font color="#CCCCCC"> input</font>

249
00:10:53,610 --> 00:10:59,220
to that<font color="#E5E5E5"> was previously v1 and now it's</font>

250
00:10:56,699 --> 00:11:04,380
me<font color="#E5E5E5"> zero and now we have</font><font color="#CCCCCC"> changed the data</font>

251
00:10:59,220 --> 00:11:07,439
flow of the program<font color="#E5E5E5"> another mutation his</font>

252
00:11:04,380 --> 00:11:08,330
operation rotator<font color="#CCCCCC"> which changes</font><font color="#E5E5E5"> these</font>

253
00:11:07,439 --> 00:11:12,079
<font color="#E5E5E5">blue</font>

254
00:11:08,330 --> 00:11:15,260
parameters<font color="#E5E5E5"> so before that it would</font><font color="#CCCCCC"> loads</font>

255
00:11:12,080 --> 00:11:17,330
<font color="#CCCCCC">a global print function and</font><font color="#E5E5E5"> after that</font>

256
00:11:15,260 --> 00:11:22,189
<font color="#E5E5E5">we made it low to encode</font><font color="#CCCCCC"> your i/o</font>

257
00:11:17,330 --> 00:11:24,320
function and left the<font color="#E5E5E5"> rest in place</font><font color="#CCCCCC"> then</font>

258
00:11:22,190 --> 00:11:26,750
there's the insertion mutator which is

259
00:11:24,320 --> 00:11:30,530
how new code gets inserted into<font color="#E5E5E5"> the</font>

260
00:11:26,750 --> 00:11:32,510
<font color="#E5E5E5">programs</font><font color="#CCCCCC"> it generates new code following</font>

261
00:11:30,530 --> 00:11:36,050
<font color="#E5E5E5">a bunch of like hundreds or so of</font>

262
00:11:32,510 --> 00:11:39,439
predefined code generator functions and

263
00:11:36,050 --> 00:11:40,819
this one it maybe generates a property

264
00:11:39,440 --> 00:11:43,070
load so there's a load property

265
00:11:40,820 --> 00:11:45,440
operation and it just randomly generates

266
00:11:43,070 --> 00:11:48,010
that<font color="#E5E5E5"> and this one has currently the</font>

267
00:11:45,440 --> 00:11:50,150
<font color="#E5E5E5">highest probability of producing</font>

268
00:11:48,010 --> 00:11:51,950
<font color="#E5E5E5">semantically invalid code right it might</font>

269
00:11:50,150 --> 00:11:55,970
produce a<font color="#E5E5E5"> proper method</font><font color="#CCCCCC"> call on</font>

270
00:11:51,950 --> 00:11:58,610
something that's again an integer<font color="#E5E5E5"> so but</font>

271
00:11:55,970 --> 00:12:01,490
it still has like a<font color="#E5E5E5"> 60</font><font color="#CCCCCC"> or so percent</font>

272
00:11:58,610 --> 00:12:04,310
success chance of success

273
00:12:01,490 --> 00:12:07,310
quite quite<font color="#CCCCCC"> okay because it's only doing</font>

274
00:12:04,310 --> 00:12:09,770
<font color="#E5E5E5">small changes every time and then the</font>

275
00:12:07,310 --> 00:12:13,400
final one<font color="#E5E5E5"> is</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> splice mutator I called</font>

276
00:12:09,770 --> 00:12:16,460
it<font color="#CCCCCC"> that way what it does it it inserts</font>

277
00:12:13,400 --> 00:12:19,630
existing code<font color="#E5E5E5"> and</font><font color="#CCCCCC"> it only inserts</font><font color="#E5E5E5"> part</font>

278
00:12:16,460 --> 00:12:22,070
<font color="#E5E5E5">of existing code so in this case it's</font>

279
00:12:19,630 --> 00:12:24,200
copying<font color="#E5E5E5"> code from the same sample but of</font>

280
00:12:22,070 --> 00:12:26,030
course<font color="#E5E5E5"> normally it takes code from a</font>

281
00:12:24,200 --> 00:12:28,580
completely<font color="#E5E5E5"> unrelated sample and puts it</font>

282
00:12:26,030 --> 00:12:30,530
in<font color="#E5E5E5"> the current one and here it copied</font>

283
00:12:28,580 --> 00:12:34,460
one instruction only<font color="#E5E5E5"> the first but</font><font color="#CCCCCC"> it</font>

284
00:12:30,530 --> 00:12:36,699
could also copy<font color="#E5E5E5"> ten or so depending on</font>

285
00:12:34,460 --> 00:12:39,890
yeah I guess randomness

286
00:12:36,700 --> 00:12:41,510
<font color="#E5E5E5">okay so here's for</font><font color="#CCCCCC"> quiet fundamental</font>

287
00:12:39,890 --> 00:12:45,770
mutations and there's a few more<font color="#E5E5E5"> that I</font>

288
00:12:41,510 --> 00:12:47,810
have there's one other<font color="#E5E5E5"> problem which is</font>

289
00:12:45,770 --> 00:12:50,000
<font color="#CCCCCC">minimization or</font><font color="#E5E5E5"> one other thing that I'm</font>

290
00:12:47,810 --> 00:12:52,849
doing<font color="#E5E5E5"> which is minimization the problem</font>

291
00:12:50,000 --> 00:12:55,640
here that<font color="#E5E5E5"> this is solving is that with</font>

292
00:12:52,850 --> 00:12:58,070
these<font color="#CCCCCC"> mutaters programs can only grow</font>

293
00:12:55,640 --> 00:12:59,930
right if you insert code of you like

294
00:12:58,070 --> 00:13:01,790
take<font color="#CCCCCC"> home from</font><font color="#E5E5E5"> another program</font><font color="#CCCCCC"> and put</font>

295
00:12:59,930 --> 00:13:04,370
it into the current<font color="#CCCCCC"> one</font><font color="#E5E5E5"> it can only grow</font>

296
00:13:01,790 --> 00:13:07,160
and so eventually<font color="#E5E5E5"> the programs would get</font>

297
00:13:04,370 --> 00:13:10,420
way way way too<font color="#E5E5E5"> big</font><font color="#CCCCCC"> like thousands of</font>

298
00:13:07,160 --> 00:13:12,949
<font color="#E5E5E5">lines and then the performance secrets</font>

299
00:13:10,420 --> 00:13:15,680
<font color="#CCCCCC">but</font><font color="#E5E5E5"> the easy solution is to minimize</font>

300
00:13:12,950 --> 00:13:17,990
<font color="#E5E5E5">those programs after when they are put</font>

301
00:13:15,680 --> 00:13:20,390
into the corpus<font color="#E5E5E5"> and minimization is</font>

302
00:13:17,990 --> 00:13:21,560
actually simple at least<font color="#CCCCCC"> the basic</font>

303
00:13:20,390 --> 00:13:24,800
<font color="#E5E5E5">algorithm</font>

304
00:13:21,560 --> 00:13:26,359
what you do is you you go over the

305
00:13:24,800 --> 00:13:28,339
<font color="#CCCCCC">program you take out like every</font>

306
00:13:26,360 --> 00:13:30,980
<font color="#E5E5E5">instruction after</font><font color="#CCCCCC"> taking out an</font>

307
00:13:28,340 --> 00:13:33,230
instruction you read random program<font color="#E5E5E5"> and</font>

308
00:13:30,980 --> 00:13:36,050
then you check if the behavior changed

309
00:13:33,230 --> 00:13:37,630
so if you do coverage guided<font color="#CCCCCC"> fighting</font>

310
00:13:36,050 --> 00:13:40,459
for example and you trigger<font color="#E5E5E5"> the new edge</font>

311
00:13:37,630 --> 00:13:44,420
<font color="#E5E5E5">then you keep removing all the</font>

312
00:13:40,460 --> 00:13:46,190
instructions<font color="#CCCCCC"> while still that so that</font>

313
00:13:44,420 --> 00:13:48,500
the same edge is still<font color="#E5E5E5"> being triggered</font>

314
00:13:46,190 --> 00:13:49,940
<font color="#E5E5E5">and for a crash</font><font color="#CCCCCC"> we do the</font><font color="#E5E5E5"> same thing so</font>

315
00:13:48,500 --> 00:13:52,090
while the program<font color="#CCCCCC"> said crashes you</font>

316
00:13:49,940 --> 00:13:54,170
remove all these<font color="#E5E5E5"> instructions so</font>

317
00:13:52,090 --> 00:13:56,870
conceptually<font color="#E5E5E5"> it's really simple</font><font color="#CCCCCC"> but it's</font>

318
00:13:54,170 --> 00:13:59,479
quite<font color="#E5E5E5"> expensive in terms of executions</font>

319
00:13:56,870 --> 00:14:01,760
<font color="#E5E5E5">right so if your</font><font color="#CCCCCC"> program has</font><font color="#E5E5E5"> 200</font>

320
00:13:59,480 --> 00:14:09,530
instructions and minimizing it costs

321
00:14:01,760 --> 00:14:11,540
<font color="#CCCCCC">about 200</font><font color="#E5E5E5"> X</font><font color="#CCCCCC"> X okay now this</font><font color="#E5E5E5"> talk is also</font>

322
00:14:09,530 --> 00:14:13,850
about guided fuzzing<font color="#CCCCCC"> the nice</font><font color="#E5E5E5"> thing is</font>

323
00:14:11,540 --> 00:14:17,449
<font color="#CCCCCC">at</font><font color="#E5E5E5"> this point we have the</font><font color="#CCCCCC"> mutation</font><font color="#E5E5E5"> based</font>

324
00:14:13,850 --> 00:14:19,610
<font color="#CCCCCC">buzzer so all that's left</font><font color="#E5E5E5"> to do to make</font>

325
00:14:17,450 --> 00:14:22,100
<font color="#CCCCCC">it guided</font><font color="#E5E5E5"> is to plug in some</font><font color="#CCCCCC"> kind of</font>

326
00:14:19,610 --> 00:14:23,900
<font color="#CCCCCC">feedback system that can say well this</font>

327
00:14:22,100 --> 00:14:26,060
sample is this good<font color="#E5E5E5"> that's interesting</font>

328
00:14:23,900 --> 00:14:28,640
<font color="#E5E5E5">let's keep it or this one is maybe not</font>

329
00:14:26,060 --> 00:14:31,910
<font color="#E5E5E5">interesting let's make a new one</font><font color="#CCCCCC"> what I</font>

330
00:14:28,640 --> 00:14:36,350
currently<font color="#E5E5E5"> have is edge coverage more or</font>

331
00:14:31,910 --> 00:14:38,270
less<font color="#E5E5E5"> exactly what a of others</font><font color="#CCCCCC"> important</font>

332
00:14:36,350 --> 00:14:40,100
<font color="#E5E5E5">to</font><font color="#CCCCCC"> notice</font><font color="#E5E5E5"> for the JIT compiler only</font>

333
00:14:38,270 --> 00:14:42,949
measures coverage in the compiler<font color="#E5E5E5"> and</font>

334
00:14:40,100 --> 00:14:45,350
not the generated<font color="#CCCCCC"> code which is still</font>

335
00:14:42,950 --> 00:14:47,240
<font color="#E5E5E5">pretty useful so we</font><font color="#CCCCCC"> can still</font><font color="#E5E5E5"> like fine</font>

336
00:14:45,350 --> 00:14:49,310
code that figures interesting behavior

337
00:14:47,240 --> 00:14:50,990
in the compiler itself so it does<font color="#CCCCCC"> work</font>

338
00:14:49,310 --> 00:14:53,449
for<font color="#E5E5E5"> kids but I</font><font color="#CCCCCC"> guess</font><font color="#E5E5E5"> this is an</font>

339
00:14:50,990 --> 00:14:55,580
interesting<font color="#CCCCCC"> research question can</font><font color="#E5E5E5"> we get</font>

340
00:14:53,450 --> 00:14:58,930
like coverage on the<font color="#E5E5E5"> Jade code itself or</font>

341
00:14:55,580 --> 00:15:02,030
so<font color="#CCCCCC"> and I guess there's also other</font>

342
00:14:58,930 --> 00:15:05,239
potentially interesting metrics<font color="#E5E5E5"> matrices</font>

343
00:15:02,030 --> 00:15:11,199
<font color="#CCCCCC">that could be used again</font><font color="#E5E5E5"> maybe</font><font color="#CCCCCC"> an</font>

344
00:15:05,240 --> 00:15:13,610
interesting<font color="#CCCCCC"> topic</font><font color="#E5E5E5"> so then look the core</font>

345
00:15:11,200 --> 00:15:16,490
basic fuzzer algorithm looks like this

346
00:15:13,610 --> 00:15:20,150
<font color="#E5E5E5">in each iteration it takes a</font><font color="#CCCCCC"> sample from</font>

347
00:15:16,490 --> 00:15:22,250
<font color="#E5E5E5">the corpus</font><font color="#CCCCCC"> executes it checks if</font><font color="#E5E5E5"> it got</font>

348
00:15:20,150 --> 00:15:25,730
a crash if yes then if minimizes<font color="#CCCCCC"> a</font><font color="#E5E5E5"> crash</font>

349
00:15:22,250 --> 00:15:27,850
and then goes continues<font color="#E5E5E5"> if it did not</font>

350
00:15:25,730 --> 00:15:29,840
crash<font color="#CCCCCC"> then it checks if it's exceeded</font>

351
00:15:27,850 --> 00:15:32,510
<font color="#E5E5E5">succeeding meaning it doesn't throw an</font>

352
00:15:29,840 --> 00:15:34,580
exception<font color="#E5E5E5"> if</font><font color="#CCCCCC"> it did throw an exception</font>

353
00:15:32,510 --> 00:15:37,010
then go back

354
00:15:34,580 --> 00:15:38,750
to the next<font color="#CCCCCC"> one but if it didn't throw</font>

355
00:15:37,010 --> 00:15:42,380
an exception then check if it triggered

356
00:15:38,750 --> 00:15:44,209
<font color="#E5E5E5">new behavior new patches</font><font color="#CCCCCC"> for example and</font>

357
00:15:42,380 --> 00:15:46,820
if it did forget<font color="#CCCCCC"> new behavior then again</font>

358
00:15:44,209 --> 00:15:51,319
minimize<font color="#E5E5E5"> put it back into the corpus</font><font color="#CCCCCC"> and</font>

359
00:15:46,820 --> 00:15:53,750
then go back<font color="#CCCCCC"> okay</font>

360
00:15:51,320 --> 00:15:55,190
here's what it what architecture<font color="#E5E5E5"> looks</font>

361
00:15:53,750 --> 00:15:58,760
like we've seen<font color="#E5E5E5"> most of the components</font>

362
00:15:55,190 --> 00:16:01,040
<font color="#E5E5E5">now so the main father here or</font><font color="#CCCCCC"> one</font>

363
00:15:58,760 --> 00:16:04,839
father<font color="#E5E5E5"> instance is made up of one corpus</font>

364
00:16:01,040 --> 00:16:07,339
and<font color="#CCCCCC"> the mutator</font><font color="#E5E5E5"> the lifter thing the</font>

365
00:16:04,839 --> 00:16:11,660
evaluation<font color="#E5E5E5"> the coverage guidance and</font>

366
00:16:07,339 --> 00:16:13,459
minimization<font color="#E5E5E5"> yeah right now there's one</font>

367
00:16:11,660 --> 00:16:15,550
<font color="#E5E5E5">instance per target</font><font color="#CCCCCC"> process which</font>

368
00:16:13,459 --> 00:16:18,469
simplifies quite<font color="#CCCCCC"> a few things</font><font color="#E5E5E5"> and then</font>

369
00:16:15,550 --> 00:16:21,140
<font color="#E5E5E5">the whole</font><font color="#CCCCCC"> thing can</font><font color="#E5E5E5"> see</font><font color="#CCCCCC"> many</font><font color="#E5E5E5"> instances</font>

370
00:16:18,470 --> 00:16:25,490
can synchronize over<font color="#E5E5E5"> IPC or the network</font>

371
00:16:21,140 --> 00:16:27,350
<font color="#E5E5E5">will see this on the next slide</font><font color="#CCCCCC"> and then</font>

372
00:16:25,490 --> 00:16:30,200
so there's what I also have<font color="#CCCCCC"> is a bunch</font>

373
00:16:27,350 --> 00:16:32,329
<font color="#E5E5E5">of optional optional modules so the</font>

374
00:16:30,200 --> 00:16:34,040
thing<font color="#E5E5E5"> is kind of modular for example the</font>

375
00:16:32,329 --> 00:16:36,739
synchronization which we'll see<font color="#E5E5E5"> next is</font>

376
00:16:34,040 --> 00:16:40,099
one module it's not necessarily<font color="#CCCCCC"> required</font>

377
00:16:36,740 --> 00:16:42,170
but it's optional<font color="#CCCCCC"> okay so and then the</font>

378
00:16:40,100 --> 00:16:45,440
main primitive for<font color="#E5E5E5"> synchronization is</font>

379
00:16:42,170 --> 00:16:48,229
importing one instance can<font color="#E5E5E5"> pretty much</font>

380
00:16:45,440 --> 00:16:50,750
send a program to another instance which

381
00:16:48,230 --> 00:16:53,680
would be imported there<font color="#CCCCCC"> and then yeah</font>

382
00:16:50,750 --> 00:16:56,480
let's see<font color="#E5E5E5"> how that works</font><font color="#CCCCCC"> so</font>

383
00:16:53,680 --> 00:17:00,620
<font color="#CCCCCC">synchronization works in kind</font><font color="#E5E5E5"> of a</font>

384
00:16:56,480 --> 00:17:01,880
master worker<font color="#E5E5E5"> scheme and between a</font>

385
00:17:00,620 --> 00:17:04,069
<font color="#E5E5E5">master in the worker there has to be</font>

386
00:17:01,880 --> 00:17:08,240
some kind<font color="#CCCCCC"> of communication link</font><font color="#E5E5E5"> maybe</font>

387
00:17:04,069 --> 00:17:10,639
IPC or TCP<font color="#E5E5E5"> sockets whatever then it</font>

388
00:17:08,240 --> 00:17:12,650
works roughly like this this worker here

389
00:17:10,640 --> 00:17:15,199
finds an interesting program says hey I

390
00:17:12,650 --> 00:17:16,220
found this this<font color="#E5E5E5"> program it's</font><font color="#CCCCCC"> maybe</font>

391
00:17:15,199 --> 00:17:18,679
interesting for<font color="#E5E5E5"> you</font>

392
00:17:16,220 --> 00:17:22,640
so what the master does is it executes

393
00:17:18,679 --> 00:17:25,400
it on its<font color="#E5E5E5"> own instance and again checks</font>

394
00:17:22,640 --> 00:17:26,990
if it did<font color="#E5E5E5"> trigger new edges now in this</font>

395
00:17:25,400 --> 00:17:29,000
case it<font color="#E5E5E5"> might have triggered new edges</font>

396
00:17:26,990 --> 00:17:31,400
and<font color="#E5E5E5"> so then yeah it is indeed</font>

397
00:17:29,000 --> 00:17:33,830
<font color="#CCCCCC">interesting also</font><font color="#E5E5E5"> for</font><font color="#CCCCCC"> the master and so</font>

398
00:17:31,400 --> 00:17:36,350
that master<font color="#E5E5E5"> is</font><font color="#CCCCCC"> gonna</font><font color="#E5E5E5"> send it to</font><font color="#CCCCCC"> all its</font>

399
00:17:33,830 --> 00:17:40,280
<font color="#CCCCCC">workers and so the</font><font color="#E5E5E5"> the new</font><font color="#CCCCCC"> simple</font>

400
00:17:36,350 --> 00:17:42,050
spreads through<font color="#CCCCCC"> the global corpus and</font>

401
00:17:40,280 --> 00:17:44,629
<font color="#CCCCCC">the workers</font><font color="#E5E5E5"> do the same thing they we</font>

402
00:17:42,050 --> 00:17:47,250
execute<font color="#CCCCCC"> that sample</font><font color="#E5E5E5"> and check</font><font color="#CCCCCC"> if it's</font>

403
00:17:44,630 --> 00:17:50,490
also<font color="#E5E5E5"> interesting for them</font>

404
00:17:47,250 --> 00:17:52,950
yeah now this<font color="#CCCCCC"> is kind of kind of</font>

405
00:17:50,490 --> 00:17:55,679
expensive<font color="#E5E5E5"> right one sample is executed</font>

406
00:17:52,950 --> 00:17:58,679
multiple<font color="#E5E5E5"> times</font><font color="#CCCCCC"> there's ways to</font><font color="#E5E5E5"> make it</font>

407
00:17:55,679 --> 00:18:00,419
<font color="#E5E5E5">faster I guess we could like just export</font>

408
00:17:58,679 --> 00:18:03,720
<font color="#E5E5E5">the bits or the edges that it's</font>

409
00:18:00,419 --> 00:18:05,039
triggering<font color="#E5E5E5"> also</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> sample of this this</font>

410
00:18:03,720 --> 00:18:06,529
algorithm here<font color="#E5E5E5"> is very simple to</font>

411
00:18:05,039 --> 00:18:11,309
implement<font color="#E5E5E5"> that's why I have it right now</font>

412
00:18:06,529 --> 00:18:13,110
it has the nice side benefit that<font color="#CCCCCC"> non</font>

413
00:18:11,309 --> 00:18:15,480
<font color="#CCCCCC">deterministic</font><font color="#E5E5E5"> samples get kind of</font>

414
00:18:13,110 --> 00:18:17,428
filtered<font color="#E5E5E5"> so if the worker triggered a</font>

415
00:18:15,480 --> 00:18:18,960
sample that's<font color="#E5E5E5"> not deterministic and like</font>

416
00:18:17,429 --> 00:18:21,899
<font color="#E5E5E5">only triggers this edge one out of</font>

417
00:18:18,960 --> 00:18:24,480
hundred<font color="#E5E5E5"> times then the</font><font color="#CCCCCC"> sampler probably</font>

418
00:18:21,899 --> 00:18:25,830
doesn't spread further<font color="#E5E5E5"> so it's a nice</font>

419
00:18:24,480 --> 00:18:29,039
side effect<font color="#E5E5E5"> and so I didn't really</font>

420
00:18:25,830 --> 00:18:30,539
bother<font color="#E5E5E5"> making it better yet</font><font color="#CCCCCC"> the same</font>

421
00:18:29,039 --> 00:18:32,640
happens for crashes but<font color="#E5E5E5"> of course</font>

422
00:18:30,539 --> 00:18:34,679
crashes are only sent upstream<font color="#E5E5E5"> right the</font>

423
00:18:32,640 --> 00:18:38,789
the crash isn't sent back to the worker

424
00:18:34,679 --> 00:18:42,330
or anything<font color="#E5E5E5"> because</font><font color="#CCCCCC"> it's</font><font color="#E5E5E5"> not</font><font color="#CCCCCC"> needed okay</font>

425
00:18:38,789 --> 00:18:43,919
so then talking<font color="#E5E5E5"> about scaling this is</font>

426
00:18:42,330 --> 00:18:47,039
roughly<font color="#E5E5E5"> the architecture that I have</font>

427
00:18:43,919 --> 00:18:48,870
<font color="#E5E5E5">running right now the potential problem</font>

428
00:18:47,039 --> 00:18:51,390
is if there's way too many workers<font color="#E5E5E5"> for</font>

429
00:18:48,870 --> 00:18:53,459
one master then since the master<font color="#E5E5E5"> has to</font>

430
00:18:51,390 --> 00:18:55,799
execute<font color="#E5E5E5"> all the interesting samples it</font>

431
00:18:53,460 --> 00:18:57,419
might just<font color="#E5E5E5"> get completely overloaded so</font>

432
00:18:55,799 --> 00:18:59,429
I have these<font color="#E5E5E5"> intermediate masters and</font>

433
00:18:57,419 --> 00:19:02,789
then a central one which collects all

434
00:18:59,429 --> 00:19:06,210
the<font color="#CCCCCC"> crashes synchronization works over</font>

435
00:19:02,789 --> 00:19:07,830
very<font color="#E5E5E5"> simple</font><font color="#CCCCCC"> TCP</font><font color="#E5E5E5"> protocol and the whole</font>

436
00:19:06,210 --> 00:19:09,990
thing<font color="#E5E5E5"> is really really</font><font color="#CCCCCC"> easy to set up</font>

437
00:19:07,830 --> 00:19:12,059
<font color="#E5E5E5">with</font><font color="#CCCCCC"> for example Google</font><font color="#E5E5E5"> Cloud engine and</font>

438
00:19:09,990 --> 00:19:15,570
docker<font color="#CCCCCC"> you just make a docker container</font>

439
00:19:12,059 --> 00:19:18,480
for one instance say<font color="#E5E5E5"> like write some</font>

440
00:19:15,570 --> 00:19:21,629
scripts and to start 100 instances<font color="#E5E5E5"> or</font>

441
00:19:18,480 --> 00:19:23,429
whatever synchronize them<font color="#CCCCCC"> maybe</font><font color="#E5E5E5"> human</font>

442
00:19:21,630 --> 00:19:25,770
<font color="#CCCCCC">eaters might be</font><font color="#E5E5E5"> a nice nice thing to try</font>

443
00:19:23,429 --> 00:19:30,480
I heard it's cool<font color="#CCCCCC"> I haven't tried it</font><font color="#E5E5E5"> but</font>

444
00:19:25,770 --> 00:19:32,760
let's<font color="#E5E5E5"> see yeah so that's pretty</font><font color="#CCCCCC"> much it</font>

445
00:19:30,480 --> 00:19:34,799
<font color="#E5E5E5">now I've wrote this thing for my master</font>

446
00:19:32,760 --> 00:19:37,080
<font color="#CCCCCC">Caesars last year where I had been</font>

447
00:19:34,799 --> 00:19:40,320
running<font color="#E5E5E5"> it on one server more or less it</font>

448
00:19:37,080 --> 00:19:41,580
did find some stuff<font color="#E5E5E5"> back then</font><font color="#CCCCCC"> but yeah</font>

449
00:19:40,320 --> 00:19:43,730
so currently supported<font color="#E5E5E5"> this</font>

450
00:19:41,580 --> 00:19:46,649
javascriptcore<font color="#CCCCCC"> SpiderMonkey</font><font color="#E5E5E5"> in v8</font>

451
00:19:43,730 --> 00:19:51,090
<font color="#CCCCCC">corresponding</font><font color="#E5E5E5"> to WebKit Firefox and</font>

452
00:19:46,649 --> 00:19:51,989
Chrome<font color="#CCCCCC"> so if you do fuzzing I guess any</font>

453
00:19:51,090 --> 00:19:54,209
kind of trace

454
00:19:51,990 --> 00:19:57,630
engine fuzzing there's tons of

455
00:19:54,210 --> 00:19:59,520
assertions and crashes you'll get so I

456
00:19:57,630 --> 00:20:01,980
haven't<font color="#E5E5E5"> kept</font><font color="#CCCCCC"> track of them</font>

457
00:19:59,520 --> 00:20:03,750
but you will see a lot of assertion

458
00:20:01,980 --> 00:20:06,420
failures in debug<font color="#CCCCCC"> its some of them are</font>

459
00:20:03,750 --> 00:20:08,940
interesting<font color="#E5E5E5"> but many are not</font><font color="#CCCCCC"> you'll see</font>

460
00:20:06,420 --> 00:20:12,750
like<font color="#CCCCCC"> nine</font><font color="#E5E5E5"> point ID revs you you actually</font>

461
00:20:08,940 --> 00:20:14,790
<font color="#CCCCCC">sometimes or not not</font><font color="#E5E5E5"> to us yeah I guess</font>

462
00:20:12,750 --> 00:20:17,130
kind of<font color="#E5E5E5"> regularly you'll find samples</font>

463
00:20:14,790 --> 00:20:18,809
that trigger observable<font color="#E5E5E5"> misbehavior</font>

464
00:20:17,130 --> 00:20:20,160
<font color="#E5E5E5">where the engine output something</font>

465
00:20:18,809 --> 00:20:22,620
<font color="#E5E5E5">different but it's not actually a</font>

466
00:20:20,160 --> 00:20:24,900
security<font color="#E5E5E5"> problem</font><font color="#CCCCCC"> and so lots and lots of</font>

467
00:20:22,620 --> 00:20:26,909
these<font color="#E5E5E5"> analysis is also kind of tedious</font>

468
00:20:24,900 --> 00:20:29,640
some of these assertions you have to

469
00:20:26,910 --> 00:20:32,070
first figure<font color="#E5E5E5"> out what's going on to say</font>

470
00:20:29,640 --> 00:20:35,220
if that's a<font color="#E5E5E5"> security problem</font><font color="#CCCCCC"> it did find</font>

471
00:20:32,070 --> 00:20:37,169
last year to<font color="#E5E5E5"> see VG's in WebKit and one</font>

472
00:20:35,220 --> 00:20:40,260
pretty cool<font color="#CCCCCC"> spider monkey register</font>

473
00:20:37,170 --> 00:20:42,690
allocation<font color="#CCCCCC"> bug now it's running on more</font>

474
00:20:40,260 --> 00:20:47,070
than one server so let's see<font color="#CCCCCC"> they</font><font color="#E5E5E5"> did</font>

475
00:20:42,690 --> 00:20:49,410
already find some<font color="#E5E5E5"> crashes I reported but</font>

476
00:20:47,070 --> 00:20:51,480
yeah<font color="#CCCCCC"> so what is my roadmap for</font><font color="#E5E5E5"> this</font>

477
00:20:49,410 --> 00:20:54,240
<font color="#E5E5E5">right now I want to do some more</font>

478
00:20:51,480 --> 00:20:56,760
<font color="#CCCCCC">cleaning up now since I'm at Google I</font>

479
00:20:54,240 --> 00:20:59,100
have<font color="#CCCCCC"> to put it</font><font color="#E5E5E5"> into revenue before open</font>

480
00:20:56,760 --> 00:21:01,470
sourcing it<font color="#E5E5E5"> probably I should also wait</font>

481
00:20:59,100 --> 00:21:04,230
for the current set of bugs<font color="#CCCCCC"> to get fixed</font>

482
00:21:01,470 --> 00:21:06,480
<font color="#E5E5E5">which I reported in the last weeks but</font>

483
00:21:04,230 --> 00:21:08,820
then I want to<font color="#E5E5E5"> open</font><font color="#CCCCCC"> source</font><font color="#E5E5E5"> it I'm aiming</font>

484
00:21:06,480 --> 00:21:13,290
for<font color="#E5E5E5"> like in a month or so</font><font color="#CCCCCC"> but this</font>

485
00:21:08,820 --> 00:21:15,360
roughly let's see<font color="#CCCCCC"> and then afterwards</font><font color="#E5E5E5"> I</font>

486
00:21:13,290 --> 00:21:18,240
have a lot<font color="#CCCCCC"> of things on my mind that</font><font color="#E5E5E5"> I</font>

487
00:21:15,360 --> 00:21:20,399
want to try so for example<font color="#E5E5E5"> right now the</font>

488
00:21:18,240 --> 00:21:22,710
<font color="#E5E5E5">sink and even import existing JavaScript</font>

489
00:21:20,400 --> 00:21:24,540
code it just<font color="#E5E5E5"> starts from like one</font>

490
00:21:22,710 --> 00:21:27,120
<font color="#CCCCCC">hard-coded</font><font color="#E5E5E5"> sample and keeps mutating</font>

491
00:21:24,540 --> 00:21:28,950
there so probably<font color="#E5E5E5"> starting from an</font>

492
00:21:27,120 --> 00:21:30,178
existing corpus it's a good idea<font color="#CCCCCC"> let's</font>

493
00:21:28,950 --> 00:21:32,940
see

494
00:21:30,179 --> 00:21:34,470
and then the<font color="#CCCCCC"> the FA's il Singh doesn't</font>

495
00:21:32,940 --> 00:21:38,040
<font color="#E5E5E5">cover all the language features yet</font>

496
00:21:34,470 --> 00:21:39,900
another thing<font color="#E5E5E5"> I would as I</font><font color="#CCCCCC"> mention</font>

497
00:21:38,040 --> 00:21:41,730
<font color="#E5E5E5">briefly I would</font><font color="#CCCCCC"> like to try this this</font>

498
00:21:39,900 --> 00:21:43,380
kind of hybrid approach where<font color="#E5E5E5"> I generate</font>

499
00:21:41,730 --> 00:21:46,200
a<font color="#CCCCCC"> sample in multiple</font><font color="#E5E5E5"> steps and see what</font>

500
00:21:43,380 --> 00:21:50,070
happens I definitely<font color="#CCCCCC"> need better time</font>

501
00:21:46,200 --> 00:21:55,880
tracking<font color="#CCCCCC"> my custom instrumentations</font>

502
00:21:50,070 --> 00:21:58,678
probably<font color="#E5E5E5"> right yeah so that's already it</font>

503
00:21:55,880 --> 00:22:00,270
so what have we<font color="#CCCCCC"> seen guided fuzzing</font>

504
00:21:58,679 --> 00:22:02,910
approach by mutating a custom

505
00:22:00,270 --> 00:22:04,740
intermediate language right<font color="#E5E5E5"> now this</font>

506
00:22:02,910 --> 00:22:07,500
<font color="#CCCCCC">thing is fairly</font><font color="#E5E5E5"> I would say fairly</font>

507
00:22:04,740 --> 00:22:09,120
generic code mutation engine so probably

508
00:22:07,500 --> 00:22:11,340
it would also<font color="#E5E5E5"> work for other languages</font>

509
00:22:09,120 --> 00:22:12,449
<font color="#E5E5E5">at least as long as</font><font color="#CCCCCC"> they're dynamically</font>

510
00:22:11,340 --> 00:22:15,059
<font color="#CCCCCC">types</font>

511
00:22:12,450 --> 00:22:17,460
then it<font color="#E5E5E5"> probably works</font><font color="#CCCCCC"> watch this</font><font color="#E5E5E5"> space</font>

512
00:22:15,059 --> 00:22:18,779
<font color="#E5E5E5">for</font><font color="#CCCCCC"> the open source</font><font color="#E5E5E5"> release again I</font>

513
00:22:17,460 --> 00:22:21,029
can't really say when it's gonna happen

514
00:22:18,779 --> 00:22:22,919
<font color="#E5E5E5">but</font><font color="#CCCCCC"> hopefully very soon</font><font color="#E5E5E5"> and I'm</font>

515
00:22:21,029 --> 00:22:24,389
definitely<font color="#CCCCCC"> looking for collaborators</font><font color="#E5E5E5"> if</font>

516
00:22:22,919 --> 00:22:27,059
anyone is interested in running<font color="#CCCCCC"> this</font>

517
00:22:24,389 --> 00:22:29,519
<font color="#CCCCCC">playing this very very</font><font color="#E5E5E5"> welcome</font>

518
00:22:27,059 --> 00:22:31,019
<font color="#E5E5E5">ping me write me an email or ping me on</font>

519
00:22:29,519 --> 00:22:33,659
<font color="#CCCCCC">Twitter if you</font><font color="#E5E5E5"> have any questions if</font>

520
00:22:31,019 --> 00:22:35,609
<font color="#CCCCCC">anything's</font><font color="#E5E5E5"> not working and with that</font>

521
00:22:33,659 --> 00:22:57,600
<font color="#E5E5E5">thanks for attention</font><font color="#CCCCCC"> and I'm</font><font color="#E5E5E5"> open for</font>

522
00:22:35,609 --> 00:23:01,559
questions any<font color="#E5E5E5"> questions anyone okay so</font>

523
00:22:57,600 --> 00:23:03,509
this is pretty cool<font color="#E5E5E5"> when doing</font>

524
00:23:01,559 --> 00:23:06,869
<font color="#E5E5E5">minimization have you considered doing</font>

525
00:23:03,509 --> 00:23:09,239
<font color="#CCCCCC">any</font><font color="#E5E5E5"> sort</font><font color="#CCCCCC"> of analysis</font><font color="#E5E5E5"> on the il before</font>

526
00:23:06,869 --> 00:23:11,309
<font color="#E5E5E5">trying to minimize</font><font color="#CCCCCC"> it and do</font><font color="#E5E5E5"> something</font>

527
00:23:09,239 --> 00:23:14,159
like<font color="#E5E5E5"> you Steph chains so that</font><font color="#CCCCCC"> you can</font>

528
00:23:11,309 --> 00:23:18,200
kind of figure<font color="#E5E5E5"> out easier what's not</font>

529
00:23:14,159 --> 00:23:21,869
being actually<font color="#E5E5E5"> affecting the program so</font>

530
00:23:18,200 --> 00:23:24,389
not really know<font color="#CCCCCC"> what I what I do is I</font>

531
00:23:21,869 --> 00:23:26,789
have on in the<font color="#CCCCCC"> fancier language</font><font color="#E5E5E5"> there's</font>

532
00:23:24,389 --> 00:23:29,219
this restraint that<font color="#E5E5E5"> like every variable</font>

533
00:23:26,789 --> 00:23:30,899
<font color="#E5E5E5">has to be defined</font><font color="#CCCCCC"> before it's used so</font>

534
00:23:29,220 --> 00:23:32,340
this minimization for some of the

535
00:23:30,899 --> 00:23:33,988
instruction<font color="#CCCCCC"> that I remove I can directly</font>

536
00:23:32,340 --> 00:23:36,359
say it's important<font color="#E5E5E5"> because the</font><font color="#CCCCCC"> output</font><font color="#E5E5E5"> is</font>

537
00:23:33,989 --> 00:23:38,580
new used somewhere so that<font color="#E5E5E5"> does reduce</font>

538
00:23:36,359 --> 00:23:39,960
<font color="#E5E5E5">the number of executions by a lot but</font>

539
00:23:38,580 --> 00:23:41,609
otherwise it's really<font color="#E5E5E5"> dumb it's really</font>

540
00:23:39,960 --> 00:23:43,649
just<font color="#E5E5E5"> like removing everything from the</font>

541
00:23:41,609 --> 00:23:52,859
<font color="#E5E5E5">bottom up and see what if something</font>

542
00:23:43,649 --> 00:23:53,998
changes thank you for the talk<font color="#CCCCCC"> I think</font>

543
00:23:52,859 --> 00:23:56,279
<font color="#CCCCCC">it's very</font><font color="#E5E5E5"> interesting idea</font>

544
00:23:53,999 --> 00:23:59,159
<font color="#E5E5E5">implementation</font><font color="#CCCCCC"> but can you please go to</font>

545
00:23:56,279 --> 00:24:03,389
the slide where<font color="#CCCCCC"> you showed yes this one</font>

546
00:23:59,159 --> 00:24:04,799
this one yes<font color="#E5E5E5"> for last year so can you</font>

547
00:24:03,389 --> 00:24:08,609
please<font color="#E5E5E5"> clarify I mean you found like</font>

548
00:24:04,799 --> 00:24:12,359
more than<font color="#E5E5E5"> 50 in one engine and</font><font color="#CCCCCC"> 100 sets</font>

549
00:24:08,609 --> 00:24:14,639
150 bucks and<font color="#E5E5E5"> free CV but what was scale</font>

550
00:24:12,359 --> 00:24:17,009
<font color="#CCCCCC">of fuzzing</font><font color="#E5E5E5"> like how</font><font color="#CCCCCC"> many like it you</font>

551
00:24:14,639 --> 00:24:19,949
<font color="#E5E5E5">fast</font><font color="#CCCCCC"> for</font><font color="#E5E5E5"> one year or what very much</font>

552
00:24:17,009 --> 00:24:22,859
throughout one year unlike like<font color="#CCCCCC"> eight</font>

553
00:24:19,950 --> 00:24:25,750
cores or<font color="#E5E5E5"> something like</font><font color="#CCCCCC"> that okay yeah</font>

554
00:24:22,859 --> 00:24:27,460
<font color="#E5E5E5">it's pretty hard to tell like</font><font color="#CCCCCC"> I was</font>

555
00:24:25,750 --> 00:24:29,440
<font color="#CCCCCC">fuzzing it during development right so I</font>

556
00:24:27,460 --> 00:24:31,930
<font color="#E5E5E5">would like develop something then start</font>

557
00:24:29,440 --> 00:24:33,760
<font color="#CCCCCC">the</font><font color="#E5E5E5"> Father</font><font color="#CCCCCC"> then</font><font color="#E5E5E5"> see</font><font color="#CCCCCC"> okay</font><font color="#E5E5E5"> it doesn't</font>

558
00:24:31,930 --> 00:24:37,200
reach as much coverage<font color="#E5E5E5"> as before so it's</font>

559
00:24:33,760 --> 00:24:49,530
<font color="#CCCCCC">up probably</font><font color="#E5E5E5"> I should maybe go back</font>

560
00:24:37,200 --> 00:24:51,970
exactly<font color="#CCCCCC"> and it's a</font><font color="#E5E5E5"> matrix okay have you</font>

561
00:24:49,530 --> 00:24:55,840
considered or what do<font color="#CCCCCC"> you</font><font color="#E5E5E5"> think about</font>

562
00:24:51,970 --> 00:24:59,350
fuzzing<font color="#CCCCCC"> the actual bytecode of a</font>

563
00:24:55,840 --> 00:25:02,230
specific engine<font color="#CCCCCC"> jet engine so the main</font>

564
00:24:59,350 --> 00:25:05,350
problem<font color="#CCCCCC"> with that is that the buyer code</font>

565
00:25:02,230 --> 00:25:07,240
is assumed to<font color="#E5E5E5"> be trusted</font><font color="#CCCCCC"> so if the buyer</font>

566
00:25:05,350 --> 00:25:09,790
code if<font color="#CCCCCC"> you</font><font color="#E5E5E5"> like flip any</font><font color="#CCCCCC"> bits or so if</font>

567
00:25:07,240 --> 00:25:12,070
you increment<font color="#CCCCCC"> indices</font><font color="#E5E5E5"> it's gonna crash</font>

568
00:25:09,790 --> 00:25:14,020
all over the place because the engine

569
00:25:12,070 --> 00:25:15,750
assumes the biker is<font color="#E5E5E5"> president doesn't</font>

570
00:25:14,020 --> 00:25:18,910
do any of a kind<font color="#CCCCCC"> of verification on it</font>

571
00:25:15,750 --> 00:25:21,700
so it<font color="#E5E5E5"> wouldn't</font><font color="#CCCCCC"> really I don't think it</font>

572
00:25:18,910 --> 00:25:23,290
would work<font color="#E5E5E5"> like naively just taking</font>

573
00:25:21,700 --> 00:25:34,330
<font color="#CCCCCC">bytecode and</font><font color="#E5E5E5"> feed it to</font><font color="#CCCCCC"> the later stage</font>

574
00:25:23,290 --> 00:25:37,200
of<font color="#CCCCCC"> the engine thank you hello</font><font color="#E5E5E5"> thank you</font>

575
00:25:34,330 --> 00:25:39,159
<font color="#CCCCCC">for your</font><font color="#E5E5E5"> talk</font><font color="#CCCCCC"> so one of the things that</font>

576
00:25:37,200 --> 00:25:41,620
I've<font color="#E5E5E5"> been interested</font><font color="#CCCCCC"> in is figuring out</font>

577
00:25:39,160 --> 00:25:43,000
<font color="#E5E5E5">how</font><font color="#CCCCCC"> to apply coverage to browsers</font><font color="#E5E5E5"> you</font>

578
00:25:41,620 --> 00:25:44,860
mentioned that you're<font color="#E5E5E5"> doing coverage</font>

579
00:25:43,000 --> 00:25:47,530
over the<font color="#E5E5E5"> jet engine itself so you're</font>

580
00:25:44,860 --> 00:25:50,439
using something like a sine<font color="#E5E5E5"> curve or</font>

581
00:25:47,530 --> 00:25:52,690
some compiler instrumentation one of the

582
00:25:50,440 --> 00:25:54,670
things that we did<font color="#E5E5E5"> for my class was to</font>

583
00:25:52,690 --> 00:25:57,010
convert<font color="#CCCCCC"> D'Amato into a self-hosted</font>

584
00:25:54,670 --> 00:25:59,710
service and then do coverage over<font color="#E5E5E5"> the</font>

585
00:25:57,010 --> 00:26:01,900
actual types and the grammar tree<font color="#E5E5E5"> so</font>

586
00:25:59,710 --> 00:26:04,030
just as we can talk about this<font color="#E5E5E5"> later but</font>

587
00:26:01,900 --> 00:26:06,580
<font color="#CCCCCC">just as a suggestion for anybody</font><font color="#E5E5E5"> working</font>

588
00:26:04,030 --> 00:26:07,590
<font color="#CCCCCC">in this space you know we have two types</font>

589
00:26:06,580 --> 00:26:10,419
of coverage<font color="#E5E5E5"> that we're trying to</font>

590
00:26:07,590 --> 00:26:12,669
<font color="#CCCCCC">choo-choo one is execution and one is</font>

591
00:26:10,420 --> 00:26:14,890
data space coverage and so it may<font color="#E5E5E5"> be</font>

592
00:26:12,670 --> 00:26:16,480
<font color="#CCCCCC">possible</font><font color="#E5E5E5"> for you to import the BNF</font>

593
00:26:14,890 --> 00:26:18,730
grammar<font color="#E5E5E5"> that's available through D'Amato</font>

594
00:26:16,480 --> 00:26:20,830
which expresses these type relationships

595
00:26:18,730 --> 00:26:23,530
in the data that<font color="#E5E5E5"> we</font><font color="#CCCCCC"> need to</font><font color="#E5E5E5"> generate and</font>

596
00:26:20,830 --> 00:26:25,030
<font color="#CCCCCC">use that in a</font><font color="#E5E5E5"> way that correlates I</font>

597
00:26:23,530 --> 00:26:28,270
guess with your ability to do coverage

598
00:26:25,030 --> 00:26:30,460
tracking<font color="#CCCCCC"> and</font><font color="#E5E5E5"> the jet engine but really I</font>

599
00:26:28,270 --> 00:26:32,500
<font color="#E5E5E5">think the efficient search of the object</font>

600
00:26:30,460 --> 00:26:34,270
relationships and the properties is an

601
00:26:32,500 --> 00:26:36,280
<font color="#E5E5E5">interesting space you mentioned you were</font>

602
00:26:34,270 --> 00:26:38,679
<font color="#CCCCCC">using like</font><font color="#E5E5E5"> a static list of a hundred</font>

603
00:26:36,280 --> 00:26:39,399
<font color="#E5E5E5">different functions or so to do your</font>

604
00:26:38,679 --> 00:26:42,280
injections

605
00:26:39,400 --> 00:26:45,640
so maybe there is a way to enumerate

606
00:26:42,280 --> 00:26:47,559
<font color="#E5E5E5">type tree effectively of the properties</font>

607
00:26:45,640 --> 00:26:49,390
<font color="#E5E5E5">and functions that</font><font color="#CCCCCC"> should be operating</font>

608
00:26:47,559 --> 00:26:51,330
on each other<font color="#E5E5E5"> and efficiently search</font>

609
00:26:49,390 --> 00:26:53,470
that<font color="#E5E5E5"> in combination</font><font color="#CCCCCC"> with</font><font color="#E5E5E5"> the feedback</font>

610
00:26:51,330 --> 00:26:57,429
yeah<font color="#CCCCCC"> thanks I</font><font color="#E5E5E5"> think we</font><font color="#CCCCCC"> should definitely</font>

611
00:26:53,470 --> 00:26:58,630
<font color="#CCCCCC">check yeah I have coverage that's right</font>

612
00:26:57,430 --> 00:27:01,120
now it's the easiest thing<font color="#CCCCCC"> to implement</font>

613
00:26:58,630 --> 00:27:04,990
<font color="#E5E5E5">it is just F sanitized coverage equals</font>

614
00:27:01,120 --> 00:27:08,409
something PC<font color="#E5E5E5"> trace right now I also have</font>

615
00:27:04,990 --> 00:27:09,970
<font color="#CCCCCC">it as more or less a workaround</font><font color="#E5E5E5"> for for</font>

616
00:27:08,410 --> 00:27:12,070
this this<font color="#E5E5E5"> year that the problem that</font><font color="#CCCCCC"> I</font>

617
00:27:09,970 --> 00:27:14,290
<font color="#E5E5E5">don't actually can import any existing</font>

618
00:27:12,070 --> 00:27:17,169
code<font color="#E5E5E5"> because then through coverage it</font>

619
00:27:14,290 --> 00:27:19,960
will find like at<font color="#E5E5E5"> least some interesting</font>

620
00:27:17,170 --> 00:27:21,280
samples<font color="#E5E5E5"> so it's more it is to some</font>

621
00:27:19,960 --> 00:27:23,260
degree also<font color="#E5E5E5"> work around for</font><font color="#CCCCCC"> this</font>

622
00:27:21,280 --> 00:27:26,980
restriction at this point but I'm sure

623
00:27:23,260 --> 00:27:29,230
there are other matrices and ways<font color="#CCCCCC"> to</font>

624
00:27:26,980 --> 00:27:36,130
measure<font color="#E5E5E5"> I get feedback</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> probably we</font>

625
00:27:29,230 --> 00:27:37,960
produce more interesting results<font color="#E5E5E5"> all</font>

626
00:27:36,130 --> 00:27:38,620
<font color="#E5E5E5">right so a big round of applause for Sam</font>

627
00:27:37,960 --> 00:27:41,850
<font color="#E5E5E5">Oh</font>

628
00:27:38,620 --> 00:27:41,850
[Applause]

