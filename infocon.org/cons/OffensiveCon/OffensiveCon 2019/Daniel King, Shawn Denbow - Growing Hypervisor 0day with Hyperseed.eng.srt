1
00:00:00,000 --> 00:00:06,140
right so our<font color="#CCCCCC"> next</font><font color="#E5E5E5"> talk is by Daniel and</font>

2
00:00:04,200 --> 00:00:08,940
<font color="#CCCCCC">Sean and they will be talking</font><font color="#E5E5E5"> about</font>

3
00:00:06,140 --> 00:00:17,430
hyper-v fuzzing so please<font color="#E5E5E5"> big applause</font>

4
00:00:08,940 --> 00:00:19,560
<font color="#CCCCCC">for them hello everyone today we are</font>

5
00:00:17,430 --> 00:00:22,680
<font color="#E5E5E5">going to talk growing hypervisor</font>

6
00:00:19,560 --> 00:00:24,720
<font color="#CCCCCC">zero-day with</font><font color="#E5E5E5"> hyper seed that is how we</font>

7
00:00:22,680 --> 00:00:29,150
<font color="#E5E5E5">use hyper seed to fast</font>

8
00:00:24,720 --> 00:00:33,030
<font color="#E5E5E5">hyper we have a cause SATA twisted</font><font color="#CCCCCC"> huh</font>

9
00:00:29,150 --> 00:00:36,780
so I am Daniel<font color="#CCCCCC"> I am now a senior</font>

10
00:00:33,030 --> 00:00:39,210
security<font color="#E5E5E5"> researcher at</font><font color="#CCCCCC"> m/s</font><font color="#E5E5E5"> RC</font><font color="#CCCCCC"> I was</font>

11
00:00:36,780 --> 00:00:41,790
<font color="#E5E5E5">member of keen security lab I have</font>

12
00:00:39,210 --> 00:00:44,399
played<font color="#CCCCCC"> pantone before</font><font color="#E5E5E5"> I have been</font>

13
00:00:41,790 --> 00:00:45,000
speakers to<font color="#E5E5E5"> Rex Kong code blue and zero</font>

14
00:00:44,399 --> 00:00:48,030
<font color="#E5E5E5">Knights</font>

15
00:00:45,000 --> 00:00:48,539
this is my partner song good afternoon

16
00:00:48,030 --> 00:00:51,270
everyone

17
00:00:48,539 --> 00:00:54,030
so my name<font color="#CCCCCC"> is Shawn</font><font color="#E5E5E5"> I got</font><font color="#CCCCCC"> my start</font><font color="#E5E5E5"> and</font>

18
00:00:51,270 --> 00:00:57,030
security playing war games and<font color="#E5E5E5"> CTFs</font>

19
00:00:54,030 --> 00:00:59,609
mostly played with my<font color="#CCCCCC"> school's CTF team</font>

20
00:00:57,030 --> 00:01:01,289
RPI<font color="#CCCCCC"> SEC had an opportunity</font><font color="#E5E5E5"> to do some</font>

21
00:00:59,609 --> 00:01:05,880
consulting<font color="#E5E5E5"> work</font><font color="#CCCCCC"> with Marta Sano as an</font>

22
00:01:01,289 --> 00:01:07,710
intern<font color="#CCCCCC"> I had a ROTC scholarship so when</font>

23
00:01:05,880 --> 00:01:09,960
I<font color="#E5E5E5"> graduated I did four years active</font><font color="#CCCCCC"> duty</font>

24
00:01:07,710 --> 00:01:12,570
in<font color="#E5E5E5"> the</font><font color="#CCCCCC"> Air Force</font><font color="#E5E5E5"> separated in the fall</font>

25
00:01:09,960 --> 00:01:14,158
of 2017<font color="#CCCCCC"> and then I joined</font><font color="#E5E5E5"> the platform</font>

26
00:01:12,570 --> 00:01:18,899
<font color="#CCCCCC">security and vulnerability research team</font>

27
00:01:14,159 --> 00:01:20,549
<font color="#E5E5E5">here at Microsoft so a quick</font><font color="#CCCCCC"> overview of</font>

28
00:01:18,900 --> 00:01:22,590
what we're<font color="#CCCCCC"> gonna</font><font color="#E5E5E5"> go</font><font color="#CCCCCC"> over today so this</font>

29
00:01:20,549 --> 00:01:24,090
talk is<font color="#CCCCCC"> really structured</font><font color="#E5E5E5"> in two parts</font>

30
00:01:22,590 --> 00:01:25,890
<font color="#CCCCCC">so the first</font><font color="#E5E5E5"> half we're gonna go over</font>

31
00:01:24,090 --> 00:01:28,350
<font color="#E5E5E5">the fundamentals we're going to kind of</font>

32
00:01:25,890 --> 00:01:30,030
give<font color="#CCCCCC"> you lay out</font><font color="#E5E5E5"> the groundwork for</font>

33
00:01:28,350 --> 00:01:32,189
what's necessary to understand this

34
00:01:30,030 --> 00:01:33,930
space<font color="#E5E5E5"> the second half will actually</font>

35
00:01:32,189 --> 00:01:36,479
discuss the fuzzer implementation or

36
00:01:33,930 --> 00:01:41,250
mutation strategy and<font color="#E5E5E5"> we'll talk about</font>

37
00:01:36,479 --> 00:01:42,899
the findings so the first question why

38
00:01:41,250 --> 00:01:45,149
did we decide<font color="#CCCCCC"> to</font><font color="#E5E5E5"> look into hyper calls</font>

39
00:01:42,899 --> 00:01:47,130
<font color="#E5E5E5">so this really</font><font color="#CCCCCC"> boils down to the fact</font>

40
00:01:45,149 --> 00:01:49,649
that both Daniel<font color="#E5E5E5"> and</font><font color="#CCCCCC"> I we were new to</font>

41
00:01:47,130 --> 00:01:51,509
the hyper-v space so as we<font color="#E5E5E5"> are ramping</font>

42
00:01:49,649 --> 00:01:53,399
up starting to kind of understand the

43
00:01:51,509 --> 00:01:55,229
architecture<font color="#CCCCCC"> one of the things that kind</font>

44
00:01:53,399 --> 00:01:57,719
<font color="#CCCCCC">of stuck out</font><font color="#E5E5E5"> was this interface</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> was</font>

45
00:01:55,229 --> 00:02:00,689
exposed<font color="#E5E5E5"> to these partitions</font><font color="#CCCCCC"> and this</font>

46
00:01:57,719 --> 00:02:02,429
<font color="#CCCCCC">interface is accessible from ring 0</font><font color="#E5E5E5"> so</font>

47
00:02:00,689 --> 00:02:04,829
from a hackers perspective this<font color="#CCCCCC"> is a</font>

48
00:02:02,430 --> 00:02:07,649
clear security<font color="#E5E5E5"> boundary and an obvious</font>

49
00:02:04,829 --> 00:02:09,810
attack surface additionally the hyper

50
00:02:07,649 --> 00:02:11,640
calls<font color="#E5E5E5"> touch multiple</font><font color="#CCCCCC"> facilities of the</font>

51
00:02:09,810 --> 00:02:13,980
<font color="#E5E5E5">hypervisor so</font><font color="#CCCCCC"> it was a great starting</font>

52
00:02:11,640 --> 00:02:16,559
point in and to learn the internal

53
00:02:13,980 --> 00:02:18,060
and the<font color="#E5E5E5"> hyper-v development team they</font>

54
00:02:16,560 --> 00:02:20,640
produce a document known<font color="#E5E5E5"> as the</font>

55
00:02:18,060 --> 00:02:24,330
<font color="#CCCCCC">top-level</font><font color="#E5E5E5"> functional specification the</font>

56
00:02:20,640 --> 00:02:27,239
TL FS for<font color="#CCCCCC"> show and in short</font><font color="#E5E5E5"> and this</font>

57
00:02:24,330 --> 00:02:28,230
document<font color="#CCCCCC"> it goes</font><font color="#E5E5E5"> into great details and</font>

58
00:02:27,240 --> 00:02:30,510
a<font color="#CCCCCC"> number</font><font color="#E5E5E5"> of the</font><font color="#CCCCCC"> components of the</font>

59
00:02:28,230 --> 00:02:32,790
hypervisor<font color="#CCCCCC"> it describes the hyper call</font>

60
00:02:30,510 --> 00:02:34,769
interface<font color="#CCCCCC"> some of their parameters and</font>

61
00:02:32,790 --> 00:02:37,530
so it's really<font color="#E5E5E5"> a great starting point</font>

62
00:02:34,770 --> 00:02:39,570
<font color="#CCCCCC">and it's worth pointing</font><font color="#E5E5E5"> out that</font><font color="#CCCCCC"> Daniel</font>

63
00:02:37,530 --> 00:02:41,820
<font color="#CCCCCC">and I we started this</font><font color="#E5E5E5"> work separately</font>

64
00:02:39,570 --> 00:02:43,590
whenever I joined the team<font color="#CCCCCC"> I began</font><font color="#E5E5E5"> doing</font>

65
00:02:41,820 --> 00:02:45,959
code review and it was through a<font color="#E5E5E5"> meet-up</font>

66
00:02:43,590 --> 00:02:48,480
<font color="#CCCCCC">I do a</font><font color="#E5E5E5"> biweekly drinking session with</font>

67
00:02:45,959 --> 00:02:51,480
<font color="#CCCCCC">the MS RC Redmond crew and shout out to</font>

68
00:02:48,480 --> 00:02:53,459
<font color="#CCCCCC">overclock he pointed out that</font><font color="#E5E5E5"> Daniel</font><font color="#CCCCCC"> he</font>

69
00:02:51,480 --> 00:02:55,890
started this fuzzing project in order<font color="#E5E5E5"> to</font>

70
00:02:53,459 --> 00:02:57,330
he was looking for<font color="#E5E5E5"> guest accessible</font>

71
00:02:55,890 --> 00:02:57,779
hyper calls and trying to<font color="#E5E5E5"> find bugs</font>

72
00:02:57,330 --> 00:02:59,400
there

73
00:02:57,780 --> 00:03:02,310
so that's when<font color="#CCCCCC"> I</font><font color="#E5E5E5"> synched up with him and</font>

74
00:02:59,400 --> 00:03:03,930
<font color="#E5E5E5">we kind of progressed the fuzzing work</font>

75
00:03:02,310 --> 00:03:08,220
and started looking<font color="#E5E5E5"> at different</font>

76
00:03:03,930 --> 00:03:10,769
scenarios<font color="#CCCCCC"> so why are we here presenting</font>

77
00:03:08,220 --> 00:03:13,739
<font color="#E5E5E5">this work to you today</font><font color="#CCCCCC"> so in short we</font>

78
00:03:10,769 --> 00:03:15,810
<font color="#CCCCCC">are motivated to secure hyper-v the work</font>

79
00:03:13,739 --> 00:03:18,209
<font color="#E5E5E5">necessary to do this is non-trivial and</font>

80
00:03:15,810 --> 00:03:20,100
it requires a<font color="#E5E5E5"> lot of resources but</font><font color="#CCCCCC"> we</font>

81
00:03:18,209 --> 00:03:22,680
know<font color="#E5E5E5"> everyone here has the skills and</font>

82
00:03:20,100 --> 00:03:25,950
<font color="#E5E5E5">that's why nsrc offers a bug bounty</font>

83
00:03:22,680 --> 00:03:28,910
<font color="#CCCCCC">paying up to 250 K so they want to</font>

84
00:03:25,950 --> 00:03:30,810
reward<font color="#E5E5E5"> you for providing good research</font>

85
00:03:28,910 --> 00:03:32,910
<font color="#E5E5E5">additionally we want to generate some</font>

86
00:03:30,810 --> 00:03:34,230
energy provide some insight so a lot<font color="#CCCCCC"> of</font>

87
00:03:32,910 --> 00:03:36,239
<font color="#E5E5E5">work has</font><font color="#CCCCCC"> been going on there's been a</font>

88
00:03:34,230 --> 00:03:38,369
lot of<font color="#E5E5E5"> past presentations so we're gonna</font>

89
00:03:36,239 --> 00:03:40,260
try<font color="#CCCCCC"> to keep</font><font color="#E5E5E5"> that going and I believe</font>

90
00:03:38,370 --> 00:03:42,480
it's important for us<font color="#E5E5E5"> to document what</font>

91
00:03:40,260 --> 00:03:44,310
we did<font color="#E5E5E5"> internally there for you as the</font>

92
00:03:42,480 --> 00:03:46,290
external researchers know how to

93
00:03:44,310 --> 00:03:51,090
differentiate<font color="#E5E5E5"> find any gaps in our work</font>

94
00:03:46,290 --> 00:03:53,190
and go and earn<font color="#E5E5E5"> this bounty so as I</font>

95
00:03:51,090 --> 00:03:55,230
mentioned the overview<font color="#E5E5E5"> this</font><font color="#CCCCCC"> sections not</font>

96
00:03:53,190 --> 00:03:58,380
really going<font color="#E5E5E5"> to be a deep dive really we</font>

97
00:03:55,230 --> 00:03:59,790
<font color="#CCCCCC">just want to kind</font><font color="#E5E5E5"> of get the base</font>

98
00:03:58,380 --> 00:04:01,440
<font color="#CCCCCC">understanding for those</font><font color="#E5E5E5"> that aren't</font>

99
00:03:59,790 --> 00:04:03,720
<font color="#E5E5E5">familiar with this space</font>

100
00:04:01,440 --> 00:04:05,280
a lot<font color="#E5E5E5"> of the past presentations have</font>

101
00:04:03,720 --> 00:04:06,750
discussed the architecture<font color="#CCCCCC"> in depth and</font>

102
00:04:05,280 --> 00:04:08,760
we<font color="#CCCCCC"> provide links to those at</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> end of</font>

103
00:04:06,750 --> 00:04:10,620
this<font color="#E5E5E5"> slide deck so</font><font color="#CCCCCC"> the main</font><font color="#E5E5E5"> purpose here</font>

104
00:04:08,760 --> 00:04:13,230
<font color="#E5E5E5">we just</font><font color="#CCCCCC"> want to ensure that our</font>

105
00:04:10,620 --> 00:04:18,239
<font color="#E5E5E5">terminology is understood and</font><font color="#CCCCCC"> that the</font>

106
00:04:13,230 --> 00:04:19,529
base architectures<font color="#CCCCCC"> understood so when</font>

107
00:04:18,238 --> 00:04:21,089
you look at the architecture<font color="#E5E5E5"> from a</font><font color="#CCCCCC"> high</font>

108
00:04:19,529 --> 00:04:23,700
<font color="#CCCCCC">level you'll notice that hyper-v</font>

109
00:04:21,089 --> 00:04:26,250
hypervisor<font color="#E5E5E5"> is a type 1 or a native</font>

110
00:04:23,700 --> 00:04:27,719
hypervisor<font color="#E5E5E5"> that essentially means it</font>

111
00:04:26,250 --> 00:04:29,999
runs<font color="#CCCCCC"> directly on the</font><font color="#E5E5E5"> bare</font>

112
00:04:27,719 --> 00:04:32,370
the hypervisor<font color="#E5E5E5"> is essentially a small</font>

113
00:04:29,999 --> 00:04:34,979
microkernel so it provides a number of

114
00:04:32,370 --> 00:04:36,779
services<font color="#CCCCCC"> to partitions</font><font color="#E5E5E5"> this includes</font>

115
00:04:34,979 --> 00:04:39,900
scheduling a virtual processors memory

116
00:04:36,779 --> 00:04:41,520
<font color="#E5E5E5">management interrupt delivery the</font>

117
00:04:39,900 --> 00:04:43,679
hypervisor also handles these hyper

118
00:04:41,520 --> 00:04:45,539
calls which<font color="#E5E5E5"> is the main interface that's</font>

119
00:04:43,680 --> 00:04:48,150
exposed to guests in order to

120
00:04:45,539 --> 00:04:49,949
communicate with<font color="#E5E5E5"> the hypervisor</font><font color="#CCCCCC"> so what</font>

121
00:04:48,150 --> 00:04:51,900
are partitions partitions are the main

122
00:04:49,949 --> 00:04:53,849
isolation unit and they are composed<font color="#E5E5E5"> of</font>

123
00:04:51,900 --> 00:04:56,758
some physical<font color="#E5E5E5"> memory and one or more</font>

124
00:04:53,849 --> 00:04:58,919
<font color="#CCCCCC">virtual processors</font><font color="#E5E5E5"> the hypervisor is</font>

125
00:04:56,759 --> 00:05:01,319
ultimately<font color="#E5E5E5"> responsible for managing the</font>

126
00:04:58,919 --> 00:05:02,938
<font color="#E5E5E5">nested page tables and this is what</font>

127
00:05:01,319 --> 00:05:04,469
<font color="#E5E5E5">allows the hypervisor to enforce</font>

128
00:05:02,939 --> 00:05:07,259
physical memory isolation between

129
00:05:04,469 --> 00:05:08,580
partitions<font color="#CCCCCC"> so that way one partition</font>

130
00:05:07,259 --> 00:05:12,060
cannot access memory of another

131
00:05:08,580 --> 00:05:13,650
<font color="#E5E5E5">partition so in this architecture</font><font color="#CCCCCC"> we</font>

132
00:05:12,060 --> 00:05:15,689
<font color="#CCCCCC">have what's known as the</font><font color="#E5E5E5"> root partition</font>

133
00:05:13,650 --> 00:05:18,508
<font color="#E5E5E5">which is also referred</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> as the parent</font>

134
00:05:15,689 --> 00:05:20,099
partition<font color="#E5E5E5"> the root is the host operating</font>

135
00:05:18,509 --> 00:05:24,089
system<font color="#E5E5E5"> so this is</font><font color="#CCCCCC"> going to</font><font color="#E5E5E5"> be</font><font color="#CCCCCC"> running</font>

136
00:05:20,099 --> 00:05:26,279
<font color="#E5E5E5">Windows and this is and the root is</font><font color="#CCCCCC"> the</font>

137
00:05:24,089 --> 00:05:28,229
<font color="#CCCCCC">only</font><font color="#E5E5E5"> one</font><font color="#CCCCCC"> that has direct access to</font>

138
00:05:26,279 --> 00:05:29,909
physical<font color="#CCCCCC"> memory and devices so it's</font>

139
00:05:28,229 --> 00:05:34,409
therefore<font color="#E5E5E5"> ultimately responsible for</font>

140
00:05:29,909 --> 00:05:35,879
<font color="#E5E5E5">mana managing these virtual machines</font><font color="#CCCCCC"> so</font>

141
00:05:34,409 --> 00:05:37,379
if we look in the root partition<font color="#E5E5E5"> we have</font>

142
00:05:35,879 --> 00:05:39,599
what's the called<font color="#E5E5E5"> the virtualization</font>

143
00:05:37,379 --> 00:05:41,639
stack and there's a<font color="#E5E5E5"> number of components</font>

144
00:05:39,599 --> 00:05:42,479
<font color="#CCCCCC">so for each child partition you had</font>

145
00:05:41,639 --> 00:05:46,710
<font color="#E5E5E5">you're going to have a corresponding</font>

146
00:05:42,479 --> 00:05:48,628
<font color="#E5E5E5">worker process the VM WP and the purpose</font>

147
00:05:46,710 --> 00:05:50,399
of<font color="#E5E5E5"> the worker process is to orchestrate</font>

148
00:05:48,629 --> 00:05:52,259
the life of the<font color="#E5E5E5"> VMS and to communicate</font>

149
00:05:50,399 --> 00:05:54,240
<font color="#CCCCCC">with the vid the vid</font><font color="#E5E5E5"> is the</font>

150
00:05:52,259 --> 00:05:56,819
virtualization infrastructure driver<font color="#CCCCCC"> and</font>

151
00:05:54,240 --> 00:05:58,860
this<font color="#E5E5E5"> one essentially provides services</font>

152
00:05:56,819 --> 00:06:00,569
such<font color="#CCCCCC"> as</font><font color="#E5E5E5"> the partition management virtual</font>

153
00:05:58,860 --> 00:06:04,370
processor management and memory

154
00:06:00,569 --> 00:06:04,370
<font color="#CCCCCC">management services for the partitions</font>

155
00:06:05,629 --> 00:06:12,210
<font color="#CCCCCC">so we have two types</font><font color="#E5E5E5"> of child partitions</font>

156
00:06:10,979 --> 00:06:14,310
you have an enlightened partition and

157
00:06:12,210 --> 00:06:15,599
unenlightened<font color="#CCCCCC"> enlightened partition</font>

158
00:06:14,310 --> 00:06:17,969
essentially means<font color="#E5E5E5"> that it's aware it's</font>

159
00:06:15,599 --> 00:06:20,520
running within hyper-v<font color="#E5E5E5"> contains some</font>

160
00:06:17,969 --> 00:06:22,789
integration components<font color="#E5E5E5"> these components</font>

161
00:06:20,520 --> 00:06:25,020
<font color="#CCCCCC">are going</font><font color="#E5E5E5"> to be referred to as vs CS or</font>

162
00:06:22,789 --> 00:06:27,029
virtualization service consumers and

163
00:06:25,020 --> 00:06:30,089
they communicate<font color="#E5E5E5"> with something called</font>

164
00:06:27,029 --> 00:06:31,740
<font color="#CCCCCC">vm bus</font><font color="#E5E5E5"> vm bus is the virtual machine bus</font>

165
00:06:30,089 --> 00:06:34,439
and it's one<font color="#E5E5E5"> of the main</font><font color="#CCCCCC"> mechanisms for</font>

166
00:06:31,740 --> 00:06:36,839
<font color="#CCCCCC">inter partition communication</font><font color="#E5E5E5"> and in</font>

167
00:06:34,439 --> 00:06:39,180
short<font color="#E5E5E5"> it is a virtual bus device that</font>

168
00:06:36,839 --> 00:06:40,600
sets up some channels<font color="#CCCCCC"> between the guest</font>

169
00:06:39,180 --> 00:06:42,070
and<font color="#CCCCCC"> the host and these</font>

170
00:06:40,600 --> 00:06:43,780
<font color="#CCCCCC">two</font><font color="#E5E5E5"> animals provide a capability</font><font color="#CCCCCC"> for</font>

171
00:06:42,070 --> 00:06:46,680
sharing<font color="#CCCCCC"> data</font><font color="#E5E5E5"> and setting up synthetic</font>

172
00:06:43,780 --> 00:06:49,599
devices<font color="#E5E5E5"> an unenlightened partition</font>

173
00:06:46,680 --> 00:06:51,700
basically has no awareness<font color="#CCCCCC"> that it is</font>

174
00:06:49,600 --> 00:06:55,960
running on hyper-v and any<font color="#E5E5E5"> hardware</font>

175
00:06:51,700 --> 00:06:57,909
<font color="#E5E5E5">access</font><font color="#CCCCCC"> will need to be emulated so</font>

176
00:06:55,960 --> 00:06:59,710
normally with when the<font color="#E5E5E5"> hypervisor is</font>

177
00:06:57,910 --> 00:07:01,390
running the virtualization extensions

178
00:06:59,710 --> 00:07:04,270
are not<font color="#E5E5E5"> exposed but with nested</font>

179
00:07:01,390 --> 00:07:07,090
<font color="#E5E5E5">virtualization they are and</font><font color="#CCCCCC"> that way we</font>

180
00:07:04,270 --> 00:07:09,010
can create basically a VM within a VM<font color="#E5E5E5"> so</font>

181
00:07:07,090 --> 00:07:10,570
the main thing<font color="#CCCCCC"> to understand here is</font>

182
00:07:09,010 --> 00:07:12,070
with nested<font color="#CCCCCC"> Verte</font><font color="#E5E5E5"> not only does it add a</font>

183
00:07:10,570 --> 00:07:14,440
new attack surface they<font color="#CCCCCC"> can think</font><font color="#E5E5E5"> of</font>

184
00:07:12,070 --> 00:07:16,380
having a malicious hypervisor<font color="#CCCCCC"> but for us</font>

185
00:07:14,440 --> 00:07:18,820
it greatly<font color="#CCCCCC"> helps with fuzzer development</font>

186
00:07:16,380 --> 00:07:20,590
so that<font color="#CCCCCC"> way I can quickly spin</font><font color="#E5E5E5"> out</font>

187
00:07:18,820 --> 00:07:23,170
multiple instances<font color="#CCCCCC"> of a hypervisor on a</font>

188
00:07:20,590 --> 00:07:25,030
single machine<font color="#CCCCCC"> a</font><font color="#E5E5E5"> snapshot</font><font color="#CCCCCC"> it reset it</font>

189
00:07:23,170 --> 00:07:27,010
<font color="#E5E5E5">and</font><font color="#CCCCCC"> then really just tweak our fuzzer</font>

190
00:07:25,030 --> 00:07:28,270
the main thing to<font color="#CCCCCC"> take away from this</font>

191
00:07:27,010 --> 00:07:30,700
<font color="#E5E5E5">slide</font><font color="#CCCCCC"> is just understanding this</font>

192
00:07:28,270 --> 00:07:32,740
terminology<font color="#E5E5E5"> so at level 0 that's going</font>

193
00:07:30,700 --> 00:07:34,599
to be your bare-metal hypervisor<font color="#CCCCCC"> that's</font>

194
00:07:32,740 --> 00:07:36,250
going to manage<font color="#E5E5E5"> your level 1 which is</font>

195
00:07:34,600 --> 00:07:38,320
<font color="#E5E5E5">going to be your host</font><font color="#CCCCCC"> operating system</font>

196
00:07:36,250 --> 00:07:41,170
which contains<font color="#E5E5E5"> the virtualization stack</font>

197
00:07:38,320 --> 00:07:43,360
to manage<font color="#CCCCCC"> the level 1 partitions</font><font color="#E5E5E5"> and</font>

198
00:07:41,170 --> 00:07:45,400
these level 1 partitions will now have

199
00:07:43,360 --> 00:07:46,900
the virtualization extensions exposed so

200
00:07:45,400 --> 00:07:51,310
they can have their own hypervisor to

201
00:07:46,900 --> 00:07:52,840
create the level<font color="#E5E5E5"> 2 and next</font><font color="#CCCCCC"> I want to</font>

202
00:07:51,310 --> 00:07:55,240
<font color="#CCCCCC">introduce a</font><font color="#E5E5E5"> more recent technology</font>

203
00:07:52,840 --> 00:07:56,440
virtualization based security<font color="#E5E5E5"> so this</font>

204
00:07:55,240 --> 00:07:58,690
was something that was introduced in

205
00:07:56,440 --> 00:08:01,060
Windows 10 really<font color="#CCCCCC"> to</font><font color="#E5E5E5"> help combat</font>

206
00:07:58,690 --> 00:08:02,860
kernel-mode malware and it takes

207
00:08:01,060 --> 00:08:05,320
advantage of<font color="#CCCCCC"> virtualization technology</font>

208
00:08:02,860 --> 00:08:07,150
really to<font color="#CCCCCC"> create a new</font><font color="#E5E5E5"> security boundary</font>

209
00:08:05,320 --> 00:08:10,900
<font color="#E5E5E5">and this is what we will refer to as</font>

210
00:08:07,150 --> 00:08:12,729
<font color="#E5E5E5">virtual secure mode or</font><font color="#CCCCCC"> VSM</font><font color="#E5E5E5"> and the way</font>

211
00:08:10,900 --> 00:08:14,739
this stuff really works is the

212
00:08:12,730 --> 00:08:17,230
hypervisor introduces this<font color="#E5E5E5"> notion of</font>

213
00:08:14,740 --> 00:08:19,600
virtual trust levels and the main<font color="#E5E5E5"> idea</font>

214
00:08:17,230 --> 00:08:21,550
here<font color="#E5E5E5"> is that a higher number trust level</font>

215
00:08:19,600 --> 00:08:23,350
is more privileged and it can restrict

216
00:08:21,550 --> 00:08:26,380
<font color="#E5E5E5">the hardware and memory access of a</font>

217
00:08:23,350 --> 00:08:28,150
lower trust level and<font color="#CCCCCC"> VTL is they are</font>

218
00:08:26,380 --> 00:08:31,090
represented as an<font color="#CCCCCC"> attribute associated</font>

219
00:08:28,150 --> 00:08:32,949
<font color="#CCCCCC">with each virtual processor</font><font color="#E5E5E5"> so with</font><font color="#CCCCCC"> VSM</font>

220
00:08:31,090 --> 00:08:34,419
running each<font color="#CCCCCC"> virtual processor is going</font>

221
00:08:32,950 --> 00:08:36,400
<font color="#CCCCCC">to be running</font><font color="#E5E5E5"> at a particular trust</font>

222
00:08:34,419 --> 00:08:39,400
level<font color="#E5E5E5"> and this is</font><font color="#CCCCCC"> usually referred to</font><font color="#E5E5E5"> as</font>

223
00:08:36,400 --> 00:08:40,929
<font color="#CCCCCC">your active ETL and when running the VP</font>

224
00:08:39,400 --> 00:08:43,659
can only access memory that is

225
00:08:40,929 --> 00:08:45,609
<font color="#E5E5E5">configured</font><font color="#CCCCCC"> for</font><font color="#E5E5E5"> that trust level and this</font>

226
00:08:43,659 --> 00:08:47,860
the<font color="#E5E5E5"> memory restrictions are accomplished</font>

227
00:08:45,610 --> 00:08:49,930
by<font color="#E5E5E5"> using a</font><font color="#CCCCCC"> slat or a second level</font>

228
00:08:47,860 --> 00:08:51,310
<font color="#CCCCCC">address</font><font color="#E5E5E5"> translation these are your</font>

229
00:08:49,930 --> 00:08:53,829
nested page<font color="#CCCCCC"> tables so you</font><font color="#E5E5E5"> can</font>

230
00:08:51,310 --> 00:08:54,550
essentially program them<font color="#E5E5E5"> to portion off</font>

231
00:08:53,830 --> 00:08:57,100
not

232
00:08:54,550 --> 00:08:59,500
pieces of memory and<font color="#E5E5E5"> to set attributes</font>

233
00:08:57,100 --> 00:09:03,220
on them so you<font color="#E5E5E5"> can set a physical memory</font>

234
00:08:59,500 --> 00:09:05,650
range to read only<font color="#E5E5E5"> and you also have the</font>

235
00:09:03,220 --> 00:09:08,740
<font color="#CCCCCC">i/o memory management unit and this</font><font color="#E5E5E5"> is</font>

236
00:09:05,650 --> 00:09:09,910
used<font color="#E5E5E5"> to provide DMA remapping so this</font>

237
00:09:08,740 --> 00:09:12,040
just<font color="#CCCCCC"> ensures that if you have a</font>

238
00:09:09,910 --> 00:09:13,630
<font color="#E5E5E5">malicious device it can't access memory</font>

239
00:09:12,040 --> 00:09:16,390
of a higher<font color="#E5E5E5"> trust level or another</font>

240
00:09:13,630 --> 00:09:19,240
<font color="#E5E5E5">partition</font><font color="#CCCCCC"> that it's not</font><font color="#E5E5E5"> assigned to so</font>

241
00:09:16,390 --> 00:09:21,160
<font color="#E5E5E5">with in</font><font color="#CCCCCC"> VSN we have to trust</font><font color="#E5E5E5"> levels</font><font color="#CCCCCC"> VTL</font>

242
00:09:19,240 --> 00:09:23,140
zero which is your<font color="#E5E5E5"> normal mode this is</font>

243
00:09:21,160 --> 00:09:25,329
going to contain<font color="#E5E5E5"> the NT kernel and then</font>

244
00:09:23,140 --> 00:09:27,310
<font color="#CCCCCC">VT</font><font color="#E5E5E5"> l1 which is your secure mode and this</font>

245
00:09:25,330 --> 00:09:30,190
<font color="#E5E5E5">contains the secure kernel</font>

246
00:09:27,310 --> 00:09:31,869
so the secure kernel it just provides a

247
00:09:30,190 --> 00:09:34,600
minimal functionality<font color="#E5E5E5"> for these things</font>

248
00:09:31,870 --> 00:09:36,640
called isolated processes and really

249
00:09:34,600 --> 00:09:38,500
<font color="#E5E5E5">it's not a standalone kernel it actually</font>

250
00:09:36,640 --> 00:09:41,290
relies on the host kernel for things

251
00:09:38,500 --> 00:09:42,880
like paging and scheduling but from a

252
00:09:41,290 --> 00:09:44,410
<font color="#CCCCCC">security perspective</font><font color="#E5E5E5"> and why we're</font>

253
00:09:42,880 --> 00:09:46,540
<font color="#CCCCCC">talking</font><font color="#E5E5E5"> about this</font><font color="#CCCCCC"> we're actually</font>

254
00:09:44,410 --> 00:09:48,819
interested<font color="#E5E5E5"> in that</font><font color="#CCCCCC"> security boundary</font><font color="#E5E5E5"> and</font>

255
00:09:46,540 --> 00:09:51,430
the secure kernel<font color="#CCCCCC"> actually provides some</font>

256
00:09:48,820 --> 00:09:53,380
services<font color="#E5E5E5"> so it turns out that this work</font>

257
00:09:51,430 --> 00:09:55,150
we did with hyper call fuzzing also

258
00:09:53,380 --> 00:09:59,560
applies to<font color="#CCCCCC"> this as well so we'll discuss</font>

259
00:09:55,150 --> 00:10:01,630
how<font color="#CCCCCC"> to fuzz those so next</font><font color="#E5E5E5"> we're</font><font color="#CCCCCC"> gonna</font>

260
00:09:59,560 --> 00:10:03,219
<font color="#E5E5E5">dive into the hyper calls really we're</font>

261
00:10:01,630 --> 00:10:05,530
looking<font color="#CCCCCC"> into the basics we</font><font color="#E5E5E5"> don't learn</font>

262
00:10:03,220 --> 00:10:07,450
<font color="#CCCCCC">how to establish the interface as well</font>

263
00:10:05,530 --> 00:10:12,130
as discuss some restrictions that<font color="#E5E5E5"> hyper</font>

264
00:10:07,450 --> 00:10:13,960
call handlers<font color="#E5E5E5"> will have so hyper</font><font color="#CCCCCC"> called</font>

265
00:10:12,130 --> 00:10:15,550
basics as I mentioned this is<font color="#CCCCCC"> the main</font>

266
00:10:13,960 --> 00:10:17,470
<font color="#E5E5E5">interface to communicate with the</font>

267
00:10:15,550 --> 00:10:19,180
hypervisor<font color="#CCCCCC"> there's</font><font color="#E5E5E5"> currently three</font>

268
00:10:17,470 --> 00:10:22,210
calling<font color="#E5E5E5"> conventions supported you have</font>

269
00:10:19,180 --> 00:10:23,829
your slow or regular and this is just

270
00:10:22,210 --> 00:10:25,840
the<font color="#E5E5E5"> input and output buffers are going</font>

271
00:10:23,830 --> 00:10:29,020
to be passed in via to physical guest

272
00:10:25,840 --> 00:10:30,820
pages and the input and output they're

273
00:10:29,020 --> 00:10:33,189
going to be constrained to<font color="#CCCCCC"> a page size</font>

274
00:10:30,820 --> 00:10:37,330
and they must<font color="#E5E5E5"> be</font><font color="#CCCCCC"> aligned to</font><font color="#E5E5E5"> a natural</font>

275
00:10:33,190 --> 00:10:39,400
boundary the fast hyper call<font color="#E5E5E5"> can that</font>

276
00:10:37,330 --> 00:10:40,750
calling to mention basically takes its

277
00:10:39,400 --> 00:10:43,120
input parameters through<font color="#CCCCCC"> general-purpose</font>

278
00:10:40,750 --> 00:10:44,830
<font color="#CCCCCC">registers and for this calling</font>

279
00:10:43,120 --> 00:10:46,750
convention it only works for hyper calls

280
00:10:44,830 --> 00:10:49,510
that have two<font color="#CCCCCC"> or fewer input parameters</font>

281
00:10:46,750 --> 00:10:51,670
<font color="#E5E5E5">and no output parameters so this is much</font>

282
00:10:49,510 --> 00:10:54,550
<font color="#E5E5E5">faster as there's no memory allocations</font>

283
00:10:51,670 --> 00:10:57,670
or mapping involved<font color="#E5E5E5"> for processors that</font>

284
00:10:54,550 --> 00:10:59,979
support<font color="#CCCCCC"> xmm you can use an additional</font>

285
00:10:57,670 --> 00:11:03,040
<font color="#CCCCCC">third calling convention so now we can</font>

286
00:10:59,980 --> 00:11:05,170
use<font color="#E5E5E5"> six of the volatile registers to</font>

287
00:11:03,040 --> 00:11:07,420
provide an<font color="#E5E5E5"> additional hundred and twelve</font>

288
00:11:05,170 --> 00:11:08,360
bytes<font color="#E5E5E5"> of input and additionally with</font>

289
00:11:07,420 --> 00:11:11,269
this calling convention

290
00:11:08,360 --> 00:11:12,620
you can also accept output there are two

291
00:11:11,269 --> 00:11:15,290
classes of<font color="#E5E5E5"> piper calls you have your</font>

292
00:11:12,620 --> 00:11:17,839
simple and repeat simple just performs a

293
00:11:15,290 --> 00:11:19,310
single operation<font color="#E5E5E5"> and the hypervisor it</font>

294
00:11:17,839 --> 00:11:21,769
tries to<font color="#CCCCCC"> enforce that hyper call is</font>

295
00:11:19,310 --> 00:11:24,500
complete within<font color="#E5E5E5"> 50 microseconds</font><font color="#CCCCCC"> so for</font>

296
00:11:21,769 --> 00:11:26,930
<font color="#E5E5E5">more complex tasks</font><font color="#CCCCCC"> such as depositing</font>

297
00:11:24,500 --> 00:11:29,360
memory into a partition they have this

298
00:11:26,930 --> 00:11:31,760
notion of a repeat which act like<font color="#CCCCCC"> a</font>

299
00:11:29,360 --> 00:11:34,040
series of<font color="#E5E5E5"> simple hyper calls so now we</font>

300
00:11:31,760 --> 00:11:35,930
can essentially<font color="#CCCCCC"> create a continuation</font><font color="#E5E5E5"> so</font>

301
00:11:34,040 --> 00:11:38,209
if it<font color="#E5E5E5"> doesn't finish processing</font><font color="#CCCCCC"> it's up</font>

302
00:11:35,930 --> 00:11:42,949
<font color="#E5E5E5">to the caller to tell it where to</font><font color="#CCCCCC"> go</font><font color="#E5E5E5"> and</font>

303
00:11:38,209 --> 00:11:45,109
complete<font color="#CCCCCC"> the</font><font color="#E5E5E5"> work</font><font color="#CCCCCC"> additionally both</font>

304
00:11:42,950 --> 00:11:46,850
classes<font color="#E5E5E5"> most of the time they're gonna</font>

305
00:11:45,110 --> 00:11:49,490
<font color="#E5E5E5">have fixed size input but they also have</font>

306
00:11:46,850 --> 00:11:51,170
a few<font color="#E5E5E5"> hyper calls do support dynamic and</font>

307
00:11:49,490 --> 00:11:53,450
so this is what we call variable sized

308
00:11:51,170 --> 00:11:55,729
hyper calls<font color="#E5E5E5"> and you just need to specify</font>

309
00:11:53,450 --> 00:11:58,100
what<font color="#CCCCCC"> that variable sizes and it's gonna</font>

310
00:11:55,730 --> 00:12:00,649
be<font color="#CCCCCC"> size</font><font color="#E5E5E5"> to a multiple of eight within</font>

311
00:11:58,100 --> 00:12:03,019
the input value<font color="#E5E5E5"> and the last thing to</font>

312
00:12:00,649 --> 00:12:05,360
<font color="#E5E5E5">talk about is extended hyper calls so</font>

313
00:12:03,019 --> 00:12:07,760
this<font color="#E5E5E5"> uses</font><font color="#CCCCCC"> the same calling convention as</font>

314
00:12:05,360 --> 00:12:10,100
normal hyper calls<font color="#CCCCCC"> and it's identical</font>

315
00:12:07,760 --> 00:12:12,230
<font color="#E5E5E5">from a guest VM perspective but</font>

316
00:12:10,100 --> 00:12:13,579
internally the<font color="#E5E5E5"> hypervisor is actually</font>

317
00:12:12,230 --> 00:12:15,500
going to pass this on to<font color="#E5E5E5"> the parent</font>

318
00:12:13,579 --> 00:12:18,769
partition<font color="#CCCCCC"> and these are implemented</font>

319
00:12:15,500 --> 00:12:20,120
<font color="#CCCCCC">within</font><font color="#E5E5E5"> the vid</font><font color="#CCCCCC"> very few</font><font color="#E5E5E5"> of them exist</font>

320
00:12:18,769 --> 00:12:21,800
last time I looked<font color="#CCCCCC"> they're</font><font color="#E5E5E5"> six and</font>

321
00:12:20,120 --> 00:12:26,480
<font color="#CCCCCC">they're</font><font color="#E5E5E5"> very easy to code review so we</font>

322
00:12:21,800 --> 00:12:27,800
didn't<font color="#CCCCCC"> bother fuzzing these so</font><font color="#E5E5E5"> in order</font>

323
00:12:26,480 --> 00:12:29,449
<font color="#E5E5E5">to</font><font color="#CCCCCC"> issue</font><font color="#E5E5E5"> a hyper call you need to kind</font>

324
00:12:27,800 --> 00:12:32,569
<font color="#CCCCCC">of understand what the</font><font color="#E5E5E5"> legal</font><font color="#CCCCCC"> environment</font>

325
00:12:29,449 --> 00:12:34,040
is<font color="#E5E5E5"> and for hyper-v they actually</font>

326
00:12:32,570 --> 00:12:36,620
restrict you to<font color="#CCCCCC"> the most privileged</font>

327
00:12:34,040 --> 00:12:38,750
<font color="#E5E5E5">guest processor mode so in the case</font><font color="#CCCCCC"> of</font>

328
00:12:36,620 --> 00:12:41,269
<font color="#CCCCCC">x64 this will be protected mode with a</font>

329
00:12:38,750 --> 00:12:43,519
current privilege level of<font color="#E5E5E5"> zero and if</font>

330
00:12:41,269 --> 00:12:45,140
you try<font color="#E5E5E5"> to issue a hyper call from an</font>

331
00:12:43,519 --> 00:12:49,430
illegal processor mode this is<font color="#E5E5E5"> going to</font>

332
00:12:45,140 --> 00:12:50,779
<font color="#CCCCCC">generate an undefined exception hyper-v</font>

333
00:12:49,430 --> 00:12:52,819
supports a couple different

334
00:12:50,779 --> 00:12:55,459
architectures<font color="#E5E5E5"> so they provide this</font>

335
00:12:52,820 --> 00:12:57,890
mechanism<font color="#CCCCCC"> a synthetic MSR to create a</font>

336
00:12:55,459 --> 00:12:59,390
hyper call page so essentially this will

337
00:12:57,890 --> 00:13:01,459
abstract away<font color="#E5E5E5"> the difference and</font>

338
00:12:59,390 --> 00:13:03,980
<font color="#E5E5E5">whenever you set this it's a partition</font>

339
00:13:01,459 --> 00:13:05,449
wide MSR<font color="#E5E5E5"> whenever you set it the</font>

340
00:13:03,980 --> 00:13:08,300
hypervisor is going to intercept<font color="#E5E5E5"> it and</font>

341
00:13:05,449 --> 00:13:11,449
<font color="#E5E5E5">actually copy in the code needed and so</font>

342
00:13:08,300 --> 00:13:13,310
we'll<font color="#E5E5E5"> look at how to</font><font color="#CCCCCC"> establish this so</font>

343
00:13:11,449 --> 00:13:15,410
here's an<font color="#CCCCCC"> example for</font><font color="#E5E5E5"> establishing that</font>

344
00:13:13,310 --> 00:13:16,969
hyper call page and this code snippet is

345
00:13:15,410 --> 00:13:19,939
taken from the<font color="#CCCCCC"> Linux integration</font>

346
00:13:16,970 --> 00:13:21,649
services for hyper-v<font color="#E5E5E5"> and it's really one</font>

347
00:13:19,940 --> 00:13:22,270
of the best<font color="#E5E5E5"> open source resources right</font>

348
00:13:21,649 --> 00:13:24,550
<font color="#E5E5E5">now for</font>

349
00:13:22,270 --> 00:13:26,230
how to<font color="#CCCCCC"> interface with hyper-v</font><font color="#E5E5E5"> so not</font>

350
00:13:24,550 --> 00:13:27,969
<font color="#CCCCCC">only</font><font color="#E5E5E5"> for talking with hyper calls but it</font>

351
00:13:26,230 --> 00:13:29,950
also will<font color="#CCCCCC"> contains some of</font><font color="#E5E5E5"> those vs</font><font color="#CCCCCC"> es</font>

352
00:13:27,970 --> 00:13:32,710
<font color="#E5E5E5">for communicating</font><font color="#CCCCCC"> with the synthetic</font>

353
00:13:29,950 --> 00:13:34,810
devices<font color="#CCCCCC"> um so I'm gonna</font><font color="#E5E5E5"> give it a shout</font>

354
00:13:32,710 --> 00:13:37,260
<font color="#E5E5E5">out to Alex</font><font color="#CCCCCC"> Ionesco he recently</font><font color="#E5E5E5"> started</font>

355
00:13:34,810 --> 00:13:40,209
blogging about creating a hyper-v bridge

356
00:13:37,260 --> 00:13:41,620
<font color="#E5E5E5">so he's actually providing code snippets</font>

357
00:13:40,210 --> 00:13:43,870
<font color="#E5E5E5">of how to do this on</font><font color="#CCCCCC"> Windows</font><font color="#E5E5E5"> and he</font>

358
00:13:41,620 --> 00:13:45,400
takes a<font color="#CCCCCC"> unique approach where instead of</font>

359
00:13:43,870 --> 00:13:47,830
having a deal with<font color="#E5E5E5"> setting up this</font>

360
00:13:45,400 --> 00:13:50,560
interface<font color="#CCCCCC"> he</font><font color="#E5E5E5"> uses an exported routine</font>

361
00:13:47,830 --> 00:13:53,530
<font color="#E5E5E5">from the NT so</font><font color="#CCCCCC"> I highly suggest everyone</font>

362
00:13:50,560 --> 00:13:54,880
<font color="#E5E5E5">go look into that</font><font color="#CCCCCC"> but for those</font><font color="#E5E5E5"> that are</font>

363
00:13:53,530 --> 00:13:57,010
interested<font color="#CCCCCC"> in creating their own driver</font>

364
00:13:54,880 --> 00:13:58,450
you need<font color="#E5E5E5"> to follow some</font><font color="#CCCCCC"> steps so after</font>

365
00:13:57,010 --> 00:14:00,010
you've ensured<font color="#E5E5E5"> that you're running</font><font color="#CCCCCC"> on a</font>

366
00:13:58,450 --> 00:14:03,640
hypervisor and<font color="#E5E5E5"> you check that these</font>

367
00:14:00,010 --> 00:14:05,860
synthetic<font color="#CCCCCC"> MSRs are implemented to set up</font>

368
00:14:03,640 --> 00:14:07,780
this hyper call page<font color="#E5E5E5"> the guest first</font>

369
00:14:05,860 --> 00:14:10,090
needs to<font color="#E5E5E5"> register</font><font color="#CCCCCC"> its ID with the</font>

370
00:14:07,780 --> 00:14:12,490
<font color="#E5E5E5">hypervisor and the guest ID is just a</font>

371
00:14:10,090 --> 00:14:16,300
<font color="#E5E5E5">64-bit entity and this is documented in</font>

372
00:14:12,490 --> 00:14:17,710
the hyper-v<font color="#E5E5E5"> specification after you do</font>

373
00:14:16,300 --> 00:14:19,510
that<font color="#E5E5E5"> you just need</font><font color="#CCCCCC"> to allocate a page of</font>

374
00:14:17,710 --> 00:14:22,300
memory<font color="#E5E5E5"> and then set up that synthetic</font>

375
00:14:19,510 --> 00:14:24,610
MSR and all that it requires is you

376
00:14:22,300 --> 00:14:26,290
writing your page frame number to it as

377
00:14:24,610 --> 00:14:29,140
well as setting<font color="#CCCCCC"> the enable bit</font><font color="#E5E5E5"> so the</font>

378
00:14:26,290 --> 00:14:31,689
enable bit just says if someone<font color="#E5E5E5"> later on</font>

379
00:14:29,140 --> 00:14:32,770
tries to recreate this hyper call

380
00:14:31,690 --> 00:14:35,850
interface they can see it's already

381
00:14:32,770 --> 00:14:38,260
<font color="#E5E5E5">enabled</font><font color="#CCCCCC"> and just use the existing</font><font color="#E5E5E5"> page</font>

382
00:14:35,850 --> 00:14:40,960
so this is the layout<font color="#CCCCCC"> of</font><font color="#E5E5E5"> the hyper call</font>

383
00:14:38,260 --> 00:14:42,790
page<font color="#E5E5E5"> so by calling</font><font color="#CCCCCC"> to the hypervisor not</font>

384
00:14:40,960 --> 00:14:45,160
only can you<font color="#E5E5E5"> issue hyper calls but you</font>

385
00:14:42,790 --> 00:14:48,480
<font color="#E5E5E5">can also issue secure calls and normal</font>

386
00:14:45,160 --> 00:14:51,100
calls between<font color="#E5E5E5"> different</font><font color="#CCCCCC"> V TLS and v sm</font>

387
00:14:48,480 --> 00:14:53,740
so as you can<font color="#E5E5E5"> see here this is the Intel</font>

388
00:14:51,100 --> 00:14:55,990
Architecture<font color="#E5E5E5"> 64-bit and I think the</font>

389
00:14:53,740 --> 00:14:58,510
interesting<font color="#E5E5E5"> takeaway is that</font><font color="#CCCCCC"> a VTOL call</font>

390
00:14:55,990 --> 00:15:00,190
is really<font color="#E5E5E5"> just a hyper call and it</font>

391
00:14:58,510 --> 00:15:03,930
abstracts<font color="#E5E5E5"> are different so currently the</font>

392
00:15:00,190 --> 00:15:07,470
call code now is a hex 11 and hex 12 for

393
00:15:03,930 --> 00:15:10,569
calling and<font color="#E5E5E5"> returning</font>

394
00:15:07,470 --> 00:15:12,730
so the normal<font color="#E5E5E5"> kernel is going to request</font>

395
00:15:10,570 --> 00:15:14,560
specific<font color="#E5E5E5"> services from the secure kernel</font>

396
00:15:12,730 --> 00:15:16,720
by issuing<font color="#E5E5E5"> that secure call and</font>

397
00:15:14,560 --> 00:15:19,359
<font color="#CCCCCC">vice-versa</font><font color="#E5E5E5"> and the flow for switching v</font>

398
00:15:16,720 --> 00:15:21,460
<font color="#E5E5E5">TLS is as such and if you recall each</font>

399
00:15:19,360 --> 00:15:23,830
<font color="#E5E5E5">virtual processor has an</font><font color="#CCCCCC"> Associated</font>

400
00:15:21,460 --> 00:15:25,960
trust level attribute so by invoking

401
00:15:23,830 --> 00:15:26,890
this hyper call the hypervisor<font color="#E5E5E5"> is</font>

402
00:15:25,960 --> 00:15:30,070
essentially going<font color="#E5E5E5"> to change this</font>

403
00:15:26,890 --> 00:15:31,900
attribute and for those interested these

404
00:15:30,070 --> 00:15:33,040
are the routines I would dig into if you

405
00:15:31,900 --> 00:15:35,529
wanted to understand<font color="#E5E5E5"> a little bit</font><font color="#CCCCCC"> more</font>

406
00:15:33,040 --> 00:15:37,899
about issuing<font color="#E5E5E5"> these so this enter I um</font>

407
00:15:35,529 --> 00:15:40,120
secure mode function<font color="#E5E5E5"> is basically</font><font color="#CCCCCC"> the</font>

408
00:15:37,899 --> 00:15:42,519
main<font color="#E5E5E5"> routine for executing a</font>

409
00:15:40,120 --> 00:15:45,069
communication loop<font color="#E5E5E5"> and what this does is</font>

410
00:15:42,519 --> 00:15:46,319
it sets up a secure<font color="#E5E5E5"> call buffer which is</font>

411
00:15:45,069 --> 00:15:51,878
<font color="#E5E5E5">essentially the bi-directional</font>

412
00:15:46,319 --> 00:15:53,439
<font color="#E5E5E5">communication buffer used so this is</font>

413
00:15:51,879 --> 00:15:55,480
what<font color="#E5E5E5"> that secure call buffer looks like</font>

414
00:15:53,439 --> 00:15:57,040
and<font color="#E5E5E5"> from our perspective of fuzzing</font>

415
00:15:55,480 --> 00:15:59,470
we're only<font color="#CCCCCC"> interested</font><font color="#E5E5E5"> in fuzzing the</font>

416
00:15:57,040 --> 00:16:01,529
<font color="#E5E5E5">secure services so this is always going</font>

417
00:15:59,470 --> 00:16:04,509
to be<font color="#E5E5E5"> a constant</font><font color="#CCCCCC"> value so that first</font><font color="#E5E5E5"> a</font>

418
00:16:01,529 --> 00:16:05,889
right now it's an enum value of<font color="#CCCCCC"> two so</font>

419
00:16:04,509 --> 00:16:06,279
<font color="#E5E5E5">that's always going to change stay the</font>

420
00:16:05,889 --> 00:16:08,230
same

421
00:16:06,279 --> 00:16:10,300
really what we're going to be mutating

422
00:16:08,230 --> 00:16:12,220
<font color="#E5E5E5">is the service code and the parameters</font>

423
00:16:10,300 --> 00:16:14,740
<font color="#E5E5E5">so for each service code they have</font><font color="#CCCCCC"> a</font>

424
00:16:12,220 --> 00:16:20,139
specific<font color="#E5E5E5"> format and we apply our format</font>

425
00:16:14,740 --> 00:16:22,029
aware closer to them so in order<font color="#E5E5E5"> to kind</font>

426
00:16:20,139 --> 00:16:24,610
of make sure<font color="#CCCCCC"> your fuzzer is efficient</font>

427
00:16:22,029 --> 00:16:26,470
and operating effectively<font color="#E5E5E5"> it's important</font>

428
00:16:24,610 --> 00:16:29,470
to understand what<font color="#CCCCCC"> restrictions a hyper</font>

429
00:16:26,470 --> 00:16:31,059
call<font color="#CCCCCC"> Handler can enforce so these checks</font>

430
00:16:29,470 --> 00:16:32,620
you'll<font color="#CCCCCC"> normally find them</font><font color="#E5E5E5"> implement it</font>

431
00:16:31,059 --> 00:16:35,290
at the beginning<font color="#CCCCCC"> of</font><font color="#E5E5E5"> a hyper call Handler</font>

432
00:16:32,620 --> 00:16:37,509
<font color="#E5E5E5">and I'm going to show some code snippets</font>

433
00:16:35,290 --> 00:16:38,769
<font color="#CCCCCC">of what these look like</font><font color="#E5E5E5"> so I understand</font>

434
00:16:37,509 --> 00:16:41,410
you guys don't have source so it's<font color="#E5E5E5"> not</font>

435
00:16:38,769 --> 00:16:44,199
gonna<font color="#E5E5E5"> be</font><font color="#CCCCCC"> that helpful</font><font color="#E5E5E5"> but</font><font color="#CCCCCC"> sorum</font><font color="#E5E5E5"> are from</font>

436
00:16:41,410 --> 00:16:46,930
<font color="#E5E5E5">nsrc</font><font color="#CCCCCC"> israel</font><font color="#E5E5E5"> he recently published a</font><font color="#CCCCCC"> blog</font>

437
00:16:44,199 --> 00:16:48,790
post detailing<font color="#E5E5E5"> how to get started in</font>

438
00:16:46,930 --> 00:16:49,899
hyper-v research<font color="#E5E5E5"> and one of the</font>

439
00:16:48,790 --> 00:16:51,910
interesting<font color="#CCCCCC"> things he did is he</font>

440
00:16:49,899 --> 00:16:54,189
<font color="#E5E5E5">approached it as an external researcher</font>

441
00:16:51,910 --> 00:16:56,019
so he shows you how to identify<font color="#E5E5E5"> the VM</font>

442
00:16:54,189 --> 00:16:57,790
exit<font color="#E5E5E5"> so you can see where the dispatch</font>

443
00:16:56,019 --> 00:17:00,069
loop is identify where the hyper call

444
00:16:57,790 --> 00:17:01,449
handlers<font color="#E5E5E5"> are so paired with that</font><font color="#CCCCCC"> and</font>

445
00:17:00,069 --> 00:17:03,370
paired<font color="#CCCCCC"> with</font><font color="#E5E5E5"> these code snippets</font>

446
00:17:01,449 --> 00:17:04,418
<font color="#E5E5E5">hopefully that will help speed up and</font>

447
00:17:03,370 --> 00:17:09,419
<font color="#CCCCCC">you can recognize what these</font><font color="#E5E5E5"> patterns</font>

448
00:17:04,419 --> 00:17:11,530
<font color="#CCCCCC">are so the first one to be</font><font color="#E5E5E5"> aware of is</font>

449
00:17:09,419 --> 00:17:13,659
partitions can<font color="#E5E5E5"> have particular</font>

450
00:17:11,530 --> 00:17:14,799
privileges<font color="#E5E5E5"> so in</font><font color="#CCCCCC"> order</font><font color="#E5E5E5"> to understand</font>

451
00:17:13,659 --> 00:17:17,079
these<font color="#E5E5E5"> we need to understand</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> little bit</font>

452
00:17:14,799 --> 00:17:19,389
<font color="#CCCCCC">about partition properties so a</font>

453
00:17:17,079 --> 00:17:21,789
partition is identified by<font color="#CCCCCC"> a unique</font><font color="#E5E5E5"> ID</font>

454
00:17:19,390 --> 00:17:23,319
so<font color="#E5E5E5"> across a single instance it's always</font>

455
00:17:21,789 --> 00:17:26,319
<font color="#E5E5E5">going to be unique if you reboot it</font>

456
00:17:23,319 --> 00:17:29,260
could reuse a different one<font color="#E5E5E5"> and a lot of</font>

457
00:17:26,319 --> 00:17:30,879
hyper calls<font color="#E5E5E5"> expect you to pass in some</font>

458
00:17:29,260 --> 00:17:32,770
type of partition<font color="#E5E5E5"> ID which will</font>

459
00:17:30,880 --> 00:17:34,720
basically say I want to<font color="#CCCCCC"> perform an</font>

460
00:17:32,770 --> 00:17:37,418
<font color="#CCCCCC">operation against this target partition</font>

461
00:17:34,720 --> 00:17:39,760
so one thing that<font color="#CCCCCC"> we utilized a lot is</font>

462
00:17:37,419 --> 00:17:42,539
just<font color="#CCCCCC"> by passing in the self definition</font>

463
00:17:39,760 --> 00:17:44,710
<font color="#E5E5E5">so it says we want to operate on herself</font>

464
00:17:42,539 --> 00:17:46,658
<font color="#E5E5E5">each partition is going to have a set of</font>

465
00:17:44,710 --> 00:17:48,490
<font color="#E5E5E5">properties and you</font><font color="#CCCCCC"> can query</font><font color="#E5E5E5"> them you</font>

466
00:17:46,659 --> 00:17:49,270
can modify them but the ones we<font color="#CCCCCC"> really</font>

467
00:17:48,490 --> 00:17:51,790
care about<font color="#E5E5E5"> are these</font>

468
00:17:49,270 --> 00:17:55,210
village flags and they're represented by

469
00:17:51,790 --> 00:17:56,649
a bit field<font color="#E5E5E5"> so these are all possible</font>

470
00:17:55,210 --> 00:17:59,680
privileges that<font color="#CCCCCC"> a partition can have</font>

471
00:17:56,650 --> 00:18:01,450
they're<font color="#E5E5E5"> documented in the TL FS so I'm</font>

472
00:17:59,680 --> 00:18:02,920
not going<font color="#E5E5E5"> to go through</font><font color="#CCCCCC"> each one but I</font>

473
00:18:01,450 --> 00:18:04,810
<font color="#E5E5E5">think the key</font><font color="#CCCCCC"> point</font><font color="#E5E5E5"> to understand here</font>

474
00:18:02,920 --> 00:18:07,030
<font color="#CCCCCC">is what are the default privileges you</font>

475
00:18:04,810 --> 00:18:11,320
<font color="#E5E5E5">have on a child partition and what's the</font>

476
00:18:07,030 --> 00:18:12,520
default for a<font color="#CCCCCC"> root so whenever you</font><font color="#E5E5E5"> first</font>

477
00:18:11,320 --> 00:18:13,810
create a partition it's going to be

478
00:18:12,520 --> 00:18:15,310
uninitialized you're gonna have to

479
00:18:13,810 --> 00:18:16,720
initialize<font color="#E5E5E5"> it when you initialize it</font>

480
00:18:15,310 --> 00:18:19,629
these are the default permissions you're

481
00:18:16,720 --> 00:18:21,700
gonna have so these flags<font color="#CCCCCC"> overall you</font>

482
00:18:19,630 --> 00:18:23,560
can<font color="#E5E5E5"> see it's very limited they actually</font>

483
00:18:21,700 --> 00:18:25,750
don't<font color="#E5E5E5"> have much so from a guest a host</font>

484
00:18:23,560 --> 00:18:28,240
perspective<font color="#E5E5E5"> you're actually limited on</font>

485
00:18:25,750 --> 00:18:30,370
what hyper calls you can use to call<font color="#E5E5E5"> out</font>

486
00:18:28,240 --> 00:18:32,680
one here though you have<font color="#E5E5E5"> your access</font>

487
00:18:30,370 --> 00:18:34,120
hyper call<font color="#CCCCCC"> MSRs so that allows you to</font>

488
00:18:32,680 --> 00:18:36,670
<font color="#E5E5E5">add</font><font color="#CCCCCC"> guests to set up the hyper call page</font>

489
00:18:34,120 --> 00:18:38,409
<font color="#E5E5E5">but what's interesting if you use the</font>

490
00:18:36,670 --> 00:18:41,050
hyper-v manager you actually get three

491
00:18:38,410 --> 00:18:42,670
<font color="#E5E5E5">additional</font><font color="#CCCCCC"> privileges</font><font color="#E5E5E5"> so using the</font>

492
00:18:41,050 --> 00:18:44,830
hyper-v manager the vid is actually

493
00:18:42,670 --> 00:18:47,380
going to give you the post messages

494
00:18:44,830 --> 00:18:49,600
signal events and connect port and these

495
00:18:47,380 --> 00:18:51,490
are used in<font color="#E5E5E5"> order to enable</font><font color="#CCCCCC"> VM bus so</font>

496
00:18:49,600 --> 00:18:56,199
that<font color="#E5E5E5"> enter partition communication and</font>

497
00:18:51,490 --> 00:18:58,120
for enlightenment<font color="#CCCCCC"> Stu function so the</font>

498
00:18:56,200 --> 00:19:00,670
route as expected the<font color="#CCCCCC"> most privileged</font><font color="#E5E5E5"> it</font>

499
00:18:58,120 --> 00:19:03,760
has pretty much<font color="#E5E5E5"> every privilege except</font>

500
00:19:00,670 --> 00:19:05,800
for the<font color="#CCCCCC"> extended</font><font color="#E5E5E5"> hyper calls so if you</font>

501
00:19:03,760 --> 00:19:07,210
<font color="#CCCCCC">recall</font><font color="#E5E5E5"> the extended hyper calls are</font>

502
00:19:05,800 --> 00:19:10,320
forwarded off to the route so by

503
00:19:07,210 --> 00:19:13,600
definition doesn't make sense

504
00:19:10,320 --> 00:19:15,820
so to do a partition privilege check

505
00:19:13,600 --> 00:19:17,969
this is an example<font color="#CCCCCC"> taken from</font><font color="#E5E5E5"> the set</font>

506
00:19:15,820 --> 00:19:20,830
logical<font color="#E5E5E5"> process or property hyper call</font>

507
00:19:17,970 --> 00:19:22,780
so pretty simple<font color="#E5E5E5"> basically you set that</font>

508
00:19:20,830 --> 00:19:24,159
bit call into a routine it's going to

509
00:19:22,780 --> 00:19:29,080
check<font color="#E5E5E5"> if your partition has that</font>

510
00:19:24,160 --> 00:19:30,490
<font color="#CCCCCC">privilege or not so</font><font color="#E5E5E5"> as I mentioned</font>

511
00:19:29,080 --> 00:19:32,260
<font color="#E5E5E5">whenever you create a partition it's</font>

512
00:19:30,490 --> 00:19:34,120
actually in the uninitialized<font color="#CCCCCC"> state and</font>

513
00:19:32,260 --> 00:19:36,100
when it's in<font color="#E5E5E5"> the uninitialized</font><font color="#CCCCCC"> state</font>

514
00:19:34,120 --> 00:19:39,489
there's only about<font color="#CCCCCC"> 4 hyper calls that</font>

515
00:19:36,100 --> 00:19:42,070
<font color="#E5E5E5">can act</font><font color="#CCCCCC"> upon it</font><font color="#E5E5E5"> so being aware</font><font color="#CCCCCC"> of what</font>

516
00:19:39,490 --> 00:19:43,630
state your partition<font color="#E5E5E5"> is and it not only</font>

517
00:19:42,070 --> 00:19:46,389
<font color="#CCCCCC">your target partition but what your</font>

518
00:19:43,630 --> 00:19:48,160
caller is is important<font color="#E5E5E5"> and so this is</font>

519
00:19:46,390 --> 00:19:50,740
<font color="#E5E5E5">actually managed by the object</font><font color="#CCCCCC"> manager</font>

520
00:19:48,160 --> 00:19:53,650
within<font color="#E5E5E5"> the hypervisor</font><font color="#CCCCCC"> so this is a</font>

521
00:19:50,740 --> 00:19:55,300
reference of how<font color="#CCCCCC"> it</font><font color="#E5E5E5"> actually goes about</font>

522
00:19:53,650 --> 00:19:57,010
looking into<font color="#E5E5E5"> it</font><font color="#CCCCCC"> so if you walk through</font>

523
00:19:55,300 --> 00:19:58,720
<font color="#CCCCCC">the parameters the first</font><font color="#E5E5E5"> one the</font>

524
00:19:57,010 --> 00:20:00,790
partition ID<font color="#CCCCCC"> as you</font><font color="#E5E5E5"> can see this is</font>

525
00:19:58,720 --> 00:20:01,639
coming<font color="#CCCCCC"> from</font><font color="#E5E5E5"> an input header so this is a</font>

526
00:20:00,790 --> 00:20:04,489
parameter<font color="#E5E5E5"> this</font>

527
00:20:01,639 --> 00:20:06,019
an<font color="#E5E5E5"> argument provided this supplies the</font>

528
00:20:04,489 --> 00:20:08,119
<font color="#CCCCCC">identifiers for</font><font color="#E5E5E5"> the partition to be</font>

529
00:20:06,019 --> 00:20:10,099
located<font color="#E5E5E5"> and then the second</font><font color="#CCCCCC"> parameter</font>

530
00:20:08,119 --> 00:20:11,478
this<font color="#CCCCCC"> is your condition so this applies</font>

531
00:20:10,099 --> 00:20:13,639
<font color="#E5E5E5">to conditions for the reference to be</font>

532
00:20:11,479 --> 00:20:15,709
taken out<font color="#CCCCCC"> so as we can</font><font color="#E5E5E5"> see here this is</font>

533
00:20:13,639 --> 00:20:19,248
requiring<font color="#E5E5E5"> that your target partition is</font>

534
00:20:15,709 --> 00:20:20,989
going to be in the<font color="#CCCCCC"> active</font><font color="#E5E5E5"> State</font><font color="#CCCCCC"> the</font>

535
00:20:19,249 --> 00:20:24,679
<font color="#E5E5E5">possible</font><font color="#CCCCCC"> States you can have our active</font>

536
00:20:20,989 --> 00:20:26,479
alive deposit able or<font color="#E5E5E5"> exists and the</font>

537
00:20:24,679 --> 00:20:28,999
third one is the required<font color="#CCCCCC"> write so</font><font color="#E5E5E5"> this</font>

538
00:20:26,479 --> 00:20:30,229
<font color="#E5E5E5">is the calling partition so for here</font>

539
00:20:28,999 --> 00:20:32,239
you're gonna<font color="#E5E5E5"> see whether you need to be</font>

540
00:20:30,229 --> 00:20:34,339
the parent<font color="#CCCCCC"> non so if it's set to none</font>

541
00:20:32,239 --> 00:20:36,079
all<font color="#E5E5E5"> privileges are going to be</font><font color="#CCCCCC"> but</font><font color="#E5E5E5"> are</font>

542
00:20:34,339 --> 00:20:41,299
all privileged<font color="#CCCCCC"> checks are bypassed</font><font color="#E5E5E5"> and</font>

543
00:20:36,079 --> 00:20:43,158
it can also be<font color="#CCCCCC"> self or</font><font color="#E5E5E5"> root and finally</font>

544
00:20:41,299 --> 00:20:45,349
a lot<font color="#E5E5E5"> of these hyper calls they're</font>

545
00:20:43,159 --> 00:20:46,959
restricted to the<font color="#CCCCCC"> root only</font><font color="#E5E5E5"> so we're</font>

546
00:20:45,349 --> 00:20:50,570
going<font color="#E5E5E5"> to do an explicit check for that</font>

547
00:20:46,959 --> 00:20:52,309
but<font color="#E5E5E5"> not only</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> but you can</font><font color="#CCCCCC"> also have</font>

548
00:20:50,570 --> 00:20:55,099
hyper calls that can<font color="#E5E5E5"> only be issued</font><font color="#CCCCCC"> from</font>

549
00:20:52,309 --> 00:20:56,719
the highest<font color="#E5E5E5"> trust level so this</font><font color="#CCCCCC"> example</font>

550
00:20:55,099 --> 00:20:59,119
<font color="#E5E5E5">here is taken from the hyper call to</font>

551
00:20:56,719 --> 00:21:01,639
commit a patch<font color="#E5E5E5"> so this is used to apply</font>

552
00:20:59,119 --> 00:21:03,889
a hot patch<font color="#CCCCCC"> so in order to do it you</font>

553
00:21:01,639 --> 00:21:09,019
<font color="#CCCCCC">need to</font><font color="#E5E5E5"> be the root</font><font color="#CCCCCC"> partition and at the</font>

554
00:21:03,889 --> 00:21:10,879
<font color="#E5E5E5">highest</font><font color="#CCCCCC"> VTL and finally know that</font><font color="#E5E5E5"> the</font>

555
00:21:09,019 --> 00:21:12,589
last one<font color="#E5E5E5"> the virtual processor must be</font>

556
00:21:10,879 --> 00:21:14,769
in a<font color="#E5E5E5"> particular</font><font color="#CCCCCC"> state</font><font color="#E5E5E5"> so this</font><font color="#CCCCCC"> really</font>

557
00:21:12,589 --> 00:21:17,029
only<font color="#E5E5E5"> applies to a handful of hyper calls</font>

558
00:21:14,769 --> 00:21:19,190
<font color="#E5E5E5">there's a set that allows you to</font>

559
00:21:17,029 --> 00:21:21,589
<font color="#CCCCCC">essentially save your partition state</font>

560
00:21:19,190 --> 00:21:23,450
and restore it<font color="#E5E5E5"> these hyper calls are</font>

561
00:21:21,589 --> 00:21:25,820
pretty complex<font color="#E5E5E5"> but</font><font color="#CCCCCC"> whenever you want to</font>

562
00:21:23,450 --> 00:21:27,709
save<font color="#E5E5E5"> state or restore state of a virtual</font>

563
00:21:25,820 --> 00:21:32,269
processor<font color="#E5E5E5"> you need to</font><font color="#CCCCCC"> ensure that</font><font color="#E5E5E5"> it's</font>

564
00:21:27,709 --> 00:21:34,249
explicitly suspended<font color="#CCCCCC"> alright so moving</font>

565
00:21:32,269 --> 00:21:35,779
<font color="#E5E5E5">on</font><font color="#CCCCCC"> now we're gonna</font><font color="#E5E5E5"> discuss a little bit</font>

566
00:21:34,249 --> 00:21:37,669
<font color="#E5E5E5">about our fuzzer so before we actually</font>

567
00:21:35,779 --> 00:21:38,809
talk<font color="#CCCCCC"> about the implementation i'm going</font>

568
00:21:37,669 --> 00:21:43,339
to talk a little bit<font color="#CCCCCC"> about some of the</font>

569
00:21:38,809 --> 00:21:46,940
scenarios<font color="#CCCCCC"> that are we deployed it to so</font>

570
00:21:43,339 --> 00:21:48,649
this<font color="#E5E5E5"> first instance this is what</font><font color="#CCCCCC"> daniel</font>

571
00:21:46,940 --> 00:21:50,899
<font color="#E5E5E5">worked on initially so he was interested</font>

572
00:21:48,649 --> 00:21:52,789
in<font color="#E5E5E5"> finding those</font><font color="#CCCCCC"> guest a</font><font color="#E5E5E5"> host escapes so</font>

573
00:21:50,899 --> 00:21:54,439
it's a pretty simple<font color="#E5E5E5"> one you have hyper</font>

574
00:21:52,789 --> 00:21:55,999
seed which is<font color="#E5E5E5"> our fuzzer so this is</font>

575
00:21:54,440 --> 00:21:58,129
what's going<font color="#E5E5E5"> to mutate our input</font>

576
00:21:55,999 --> 00:22:00,019
parameters and this passes it on<font color="#CCCCCC"> to our</font>

577
00:21:58,129 --> 00:22:04,218
hyper call proxy which is just the

578
00:22:00,019 --> 00:22:05,719
driver to issue whatever<font color="#E5E5E5"> we give it so</font>

579
00:22:04,219 --> 00:22:07,279
as<font color="#E5E5E5"> I</font><font color="#CCCCCC"> mentioned there's really</font><font color="#E5E5E5"> a very</font>

580
00:22:05,719 --> 00:22:09,109
<font color="#CCCCCC">limited set of hyper calls I can</font>

581
00:22:07,279 --> 00:22:11,779
<font color="#CCCCCC">actually</font><font color="#E5E5E5"> be invoked directly from within</font>

582
00:22:09,109 --> 00:22:14,029
<font color="#E5E5E5">a guest but what you want to be aware of</font>

583
00:22:11,779 --> 00:22:14,770
<font color="#E5E5E5">is what are the</font><font color="#CCCCCC"> side-effects of doing</font>

584
00:22:14,029 --> 00:22:16,330
this

585
00:22:14,770 --> 00:22:18,490
so it turns out<font color="#CCCCCC"> you have</font><font color="#E5E5E5"> to kind of</font>

586
00:22:16,330 --> 00:22:19,928
monitor<font color="#CCCCCC"> everything</font><font color="#E5E5E5"> so not only can you</font>

587
00:22:18,490 --> 00:22:21,580
<font color="#E5E5E5">get a crash in the hypervisor you can</font>

588
00:22:19,929 --> 00:22:23,650
get a crash in the<font color="#E5E5E5"> host but you can also</font>

589
00:22:21,580 --> 00:22:26,129
crash your own child partition<font color="#E5E5E5"> so you</font>

590
00:22:23,650 --> 00:22:31,660
need to be a little<font color="#CCCCCC"> bit careful</font><font color="#E5E5E5"> here as</font>

591
00:22:26,130 --> 00:22:33,640
<font color="#E5E5E5">yeah so whenever I jumped on board I was</font>

592
00:22:31,660 --> 00:22:35,710
interested in<font color="#E5E5E5"> looking for</font><font color="#CCCCCC"> VSM bypasses</font>

593
00:22:33,640 --> 00:22:38,110
so I started fuzzing from the root

594
00:22:35,710 --> 00:22:39,550
partition<font color="#E5E5E5"> and this was actually a little</font>

595
00:22:38,110 --> 00:22:41,620
<font color="#E5E5E5">bit more difficult because there's a lot</font>

596
00:22:39,550 --> 00:22:43,120
<font color="#E5E5E5">of hyper calls that kind of will kill</font>

597
00:22:41,620 --> 00:22:45,219
your session before<font color="#E5E5E5"> you actually find</font>

598
00:22:43,120 --> 00:22:48,550
anything interesting<font color="#CCCCCC"> such as invoking a</font>

599
00:22:45,220 --> 00:22:50,290
debugger or asserting<font color="#E5E5E5"> so you can assert</font>

600
00:22:48,550 --> 00:22:52,120
a virtual interrupt<font color="#E5E5E5"> and so if you</font>

601
00:22:50,290 --> 00:22:53,620
reference<font color="#CCCCCC"> your self partition ID you'll</font>

602
00:22:52,120 --> 00:22:59,379
end up<font color="#CCCCCC"> just killing your</font><font color="#E5E5E5"> host where</font><font color="#CCCCCC"> your</font>

603
00:22:53,620 --> 00:23:01,330
fuzzing from all<font color="#E5E5E5"> right and so fuzzing</font>

604
00:22:59,380 --> 00:23:04,330
from nested so as I mentioned we<font color="#CCCCCC"> use</font>

605
00:23:01,330 --> 00:23:05,980
<font color="#E5E5E5">this a lot for our development stage the</font>

606
00:23:04,330 --> 00:23:07,899
way<font color="#CCCCCC"> Nesta virtualization</font><font color="#E5E5E5"> works is when</font>

607
00:23:05,980 --> 00:23:10,929
you<font color="#E5E5E5"> issue a hyper call from</font><font color="#CCCCCC"> that l2 root</font>

608
00:23:07,900 --> 00:23:13,000
it's actually<font color="#E5E5E5"> going to get sent</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> the</font>

609
00:23:10,929 --> 00:23:15,190
l0 hypervisor first<font color="#E5E5E5"> it determines</font>

610
00:23:13,000 --> 00:23:16,780
whether it's going<font color="#E5E5E5"> to handle it which</font>

611
00:23:15,190 --> 00:23:18,309
pretty<font color="#CCCCCC"> much it's only limited to</font>

612
00:23:16,780 --> 00:23:20,110
<font color="#E5E5E5">handling the flushing hyper calls</font>

613
00:23:18,309 --> 00:23:22,000
<font color="#E5E5E5">otherwise it's going to afford it back</font>

614
00:23:20,110 --> 00:23:23,500
up to that one hypervisor so pretty much

615
00:23:22,000 --> 00:23:26,470
every hyper call can get<font color="#E5E5E5"> handled from a</font>

616
00:23:23,500 --> 00:23:28,059
nested scenario but now we have<font color="#E5E5E5"> more</font>

617
00:23:26,470 --> 00:23:30,520
things to monitor for not only<font color="#E5E5E5"> can you</font>

618
00:23:28,059 --> 00:23:33,660
crash the nested hypervisor<font color="#E5E5E5"> but you can</font>

619
00:23:30,520 --> 00:23:37,870
crash the<font color="#CCCCCC"> host hypervisor and</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> route</font>

620
00:23:33,660 --> 00:23:39,340
and for the last scenario<font color="#E5E5E5"> this is where</font>

621
00:23:37,870 --> 00:23:41,860
we<font color="#CCCCCC"> are looking specifically at the</font>

622
00:23:39,340 --> 00:23:44,649
<font color="#CCCCCC">secure service calls</font><font color="#E5E5E5"> so one thing</font><font color="#CCCCCC"> to</font>

623
00:23:41,860 --> 00:23:46,270
point out<font color="#CCCCCC"> here is that VT l1 it's not a</font>

624
00:23:44,650 --> 00:23:48,490
separate VM it actually lives within

625
00:23:46,270 --> 00:23:49,960
your partition<font color="#E5E5E5"> because</font><font color="#CCCCCC"> remember it's</font>

626
00:23:48,490 --> 00:23:54,610
just<font color="#E5E5E5"> an attribute associated with your</font>

627
00:23:49,960 --> 00:23:56,559
virtual<font color="#E5E5E5"> processor and so here we</font><font color="#CCCCCC"> are</font>

628
00:23:54,610 --> 00:23:58,330
specifically<font color="#E5E5E5"> looking for crashes within</font>

629
00:23:56,559 --> 00:24:01,780
the secure kernel and there's also

630
00:23:58,330 --> 00:24:03,159
crashes of the<font color="#E5E5E5"> empty kernel as well so</font>

631
00:24:01,780 --> 00:24:05,139
with that I'm going<font color="#E5E5E5"> to pass it over to</font>

632
00:24:03,160 --> 00:24:07,090
<font color="#E5E5E5">Daniel and</font><font color="#CCCCCC"> he's going to discuss</font><font color="#E5E5E5"> more of</font>

633
00:24:05,140 --> 00:24:10,270
the<font color="#CCCCCC"> implementation and talk about</font><font color="#E5E5E5"> her</font>

634
00:24:07,090 --> 00:24:13,030
findings<font color="#E5E5E5"> yeah thanks Sean and now let me</font>

635
00:24:10,270 --> 00:24:15,550
<font color="#CCCCCC">introduce</font><font color="#E5E5E5"> more details why choose format</font>

636
00:24:13,030 --> 00:24:18,280
aware fuzzing for<font color="#E5E5E5"> HIPAA cause I have</font>

637
00:24:15,550 --> 00:24:20,559
given a talk about<font color="#E5E5E5"> fuzzing CRF as the</font>

638
00:24:18,280 --> 00:24:23,129
common log file system with<font color="#CCCCCC"> four</font><font color="#E5E5E5"> meta</font>

639
00:24:20,559 --> 00:24:26,980
<font color="#E5E5E5">we're</font><font color="#CCCCCC"> phasing</font><font color="#E5E5E5"> techniques on</font><font color="#CCCCCC"> CodeBlue</font>

640
00:24:23,130 --> 00:24:28,659
2016 after<font color="#CCCCCC"> that</font><font color="#E5E5E5"> I also used this</font>

641
00:24:26,980 --> 00:24:32,590
technique to<font color="#CCCCCC"> generate</font><font color="#E5E5E5"> copper</font>

642
00:24:28,659 --> 00:24:34,950
<font color="#CCCCCC">for kfl so it's natural for me to extend</font>

643
00:24:32,590 --> 00:24:37,899
<font color="#CCCCCC">format aware fuzzing to have course</font>

644
00:24:34,950 --> 00:24:41,349
format aware<font color="#CCCCCC"> phasing is effective</font><font color="#E5E5E5"> to</font>

645
00:24:37,899 --> 00:24:44,258
bypass<font color="#CCCCCC"> Phil's constraints and it is easy</font>

646
00:24:41,349 --> 00:24:46,779
to scale<font color="#E5E5E5"> at first you can mutate buffers</font>

647
00:24:44,259 --> 00:24:50,379
in<font color="#E5E5E5"> cost Korean fashion treat the whole</font>

648
00:24:46,779 --> 00:24:53,200
buffer as cue words<font color="#E5E5E5"> array a muted each</font>

649
00:24:50,379 --> 00:24:55,809
cue word with<font color="#CCCCCC"> no difference</font><font color="#E5E5E5"> then after</font>

650
00:24:53,200 --> 00:24:58,539
you get some knowledge of<font color="#E5E5E5"> the format you</font>

651
00:24:55,809 --> 00:25:01,149
can<font color="#E5E5E5"> move on to</font><font color="#CCCCCC"> fun green mutations for</font>

652
00:24:58,539 --> 00:25:03,789
example you treat the first<font color="#E5E5E5"> cue word as</font>

653
00:25:01,149 --> 00:25:06,340
partition ID and since partition ID has

654
00:25:03,789 --> 00:25:08,710
a quite smaller sample space than our

655
00:25:06,340 --> 00:25:10,720
<font color="#E5E5E5">generic word</font><font color="#CCCCCC"> learner</font><font color="#E5E5E5"> generic</font><font color="#CCCCCC"> keyword</font>

656
00:25:08,710 --> 00:25:14,409
then the<font color="#CCCCCC"> phasing efficiency is</font>

657
00:25:10,720 --> 00:25:16,869
remarkable<font color="#CCCCCC"> to state</font><font color="#E5E5E5"> in similar way at</font>

658
00:25:14,409 --> 00:25:19,059
first you can only provide<font color="#CCCCCC"> fun green</font>

659
00:25:16,869 --> 00:25:21,099
mutations for the hub<font color="#E5E5E5"> cause you help</font>

660
00:25:19,059 --> 00:25:23,379
with the knowledge of leave the other

661
00:25:21,099 --> 00:25:26,499
<font color="#CCCCCC">half calls with default</font><font color="#E5E5E5"> cause green</font>

662
00:25:23,379 --> 00:25:28,359
mutations in this way you can<font color="#E5E5E5"> first let</font>

663
00:25:26,499 --> 00:25:31,899
the father be running and then optimize

664
00:25:28,359 --> 00:25:34,359
<font color="#E5E5E5">the mutations</font><font color="#CCCCCC"> step past that</font><font color="#E5E5E5"> format</font>

665
00:25:31,899 --> 00:25:37,059
<font color="#E5E5E5">aware fasting may overlook some special</font>

666
00:25:34,359 --> 00:25:39,279
<font color="#CCCCCC">circumstances by assumptions some</font>

667
00:25:37,059 --> 00:25:42,330
anomalous<font color="#CCCCCC"> input may be amazing</font><font color="#E5E5E5"> when</font>

668
00:25:39,279 --> 00:25:45,129
fighting<font color="#CCCCCC"> into a</font><font color="#E5E5E5"> specific format after</font>

669
00:25:42,330 --> 00:25:48,099
<font color="#E5E5E5">another shortcoming is the dependence or</font>

670
00:25:45,129 --> 00:25:50,080
knowledge of input format for wonder

671
00:25:48,099 --> 00:25:52,928
employees like me it's not<font color="#CCCCCC"> a big</font><font color="#E5E5E5"> problem</font>

672
00:25:50,080 --> 00:25:54,759
<font color="#E5E5E5">but for external security researchers it</font>

673
00:25:52,929 --> 00:25:57,269
means more efforts on reverse

674
00:25:54,759 --> 00:26:01,479
engineering<font color="#E5E5E5"> but come</font><font color="#CCCCCC"> on you are hacker</font>

675
00:25:57,269 --> 00:26:03,249
<font color="#E5E5E5">do the reverse engineering so</font>

676
00:26:01,479 --> 00:26:05,379
the good news<font color="#E5E5E5"> is that Microsoft has</font>

677
00:26:03,249 --> 00:26:07,690
already published<font color="#CCCCCC"> very detailed</font>

678
00:26:05,379 --> 00:26:09,939
documentation<font color="#CCCCCC"> on have caused it is</font>

679
00:26:07,690 --> 00:26:12,989
called the hypervisor<font color="#E5E5E5"> top level function</font>

680
00:26:09,940 --> 00:26:16,119
of specification<font color="#E5E5E5"> or simply as TR FS as</font>

681
00:26:12,989 --> 00:26:18,909
well as some<font color="#E5E5E5"> debugging symbols blog</font>

682
00:26:16,119 --> 00:26:19,988
posts and presentations<font color="#E5E5E5"> on her core and</font>

683
00:26:18,909 --> 00:26:22,389
happily

684
00:26:19,989 --> 00:26:24,970
it's also worth to mention that there

685
00:26:22,389 --> 00:26:27,340
are<font color="#CCCCCC"> some</font><font color="#E5E5E5"> general sharings from external</font>

686
00:26:24,970 --> 00:26:31,649
<font color="#CCCCCC">security researchers like alex young</font>

687
00:26:27,340 --> 00:26:31,649
school with his<font color="#CCCCCC"> hdk and have a bridge</font>

688
00:26:31,710 --> 00:26:36,489
beside<font color="#E5E5E5"> the</font><font color="#CCCCCC"> results is mentionable you</font>

689
00:26:34,659 --> 00:26:39,460
can keep accumulating knowledge during

690
00:26:36,489 --> 00:26:41,919
<font color="#CCCCCC">the fasting process</font><font color="#E5E5E5"> so fuzzing itself is</font>

691
00:26:39,460 --> 00:26:42,580
a process<font color="#CCCCCC"> of learning</font><font color="#E5E5E5"> the format aware</font>

692
00:26:41,919 --> 00:26:45,730
<font color="#CCCCCC">fasting is</font>

693
00:26:42,580 --> 00:26:47,918
more like<font color="#E5E5E5"> a just</font><font color="#CCCCCC"> style development in</font>

694
00:26:45,730 --> 00:26:50,049
each iteration<font color="#E5E5E5"> you can gain some</font>

695
00:26:47,919 --> 00:26:54,960
insights and then you can add further

696
00:26:50,049 --> 00:26:58,539
adjustments exceptions like crashes are

697
00:26:54,960 --> 00:27:00,640
expected as a<font color="#CCCCCC"> phasing</font><font color="#E5E5E5"> outputs root cause</font>

698
00:26:58,539 --> 00:27:02,590
analysis on those exceptions can help

699
00:27:00,640 --> 00:27:04,980
you<font color="#E5E5E5"> gain more knowledge of the phasing</font>

700
00:27:02,590 --> 00:27:07,330
target with enough knowledge<font color="#E5E5E5"> of the</font>

701
00:27:04,980 --> 00:27:10,179
relationship between the input<font color="#CCCCCC"> buffer</font>

702
00:27:07,330 --> 00:27:12,549
and a specific<font color="#CCCCCC"> type of</font><font color="#E5E5E5"> exception</font><font color="#CCCCCC"> you can</font>

703
00:27:10,179 --> 00:27:14,740
introduce<font color="#CCCCCC"> bypassing logic to</font><font color="#E5E5E5"> make</font><font color="#CCCCCC"> your</font>

704
00:27:12,549 --> 00:27:17,379
father be immune from an already<font color="#E5E5E5"> known</font>

705
00:27:14,740 --> 00:27:22,289
exception which may have<font color="#E5E5E5"> bypassed some</font>

706
00:27:17,380 --> 00:27:22,289
traps and riches to<font color="#CCCCCC"> the deeper codes</font>

707
00:27:23,220 --> 00:27:28,360
mutations<font color="#E5E5E5"> it's important to fuzzing</font>

708
00:27:25,779 --> 00:27:31,480
efficiency<font color="#E5E5E5"> how to mutate there may be</font>

709
00:27:28,360 --> 00:27:33,370
<font color="#E5E5E5">different answers to</font><font color="#CCCCCC"> different</font><font color="#E5E5E5"> people no</font>

710
00:27:31,480 --> 00:27:36,070
matter<font color="#E5E5E5"> how complicated the input</font><font color="#CCCCCC"> buffer</font>

711
00:27:33,370 --> 00:27:38,918
<font color="#CCCCCC">is it can</font><font color="#E5E5E5"> be splitted into primitive</font>

712
00:27:36,070 --> 00:27:41,320
<font color="#E5E5E5">data tabs mid hitting</font><font color="#CCCCCC"> loss primitive</font>

713
00:27:38,919 --> 00:27:43,929
data together<font color="#E5E5E5"> is a way to mutate the</font>

714
00:27:41,320 --> 00:27:46,779
<font color="#E5E5E5">hole into the buffer so here we</font>

715
00:27:43,929 --> 00:27:51,429
implement<font color="#E5E5E5"> file</font><font color="#CCCCCC"> mutaters from</font><font color="#E5E5E5"> primitive</font>

716
00:27:46,779 --> 00:27:55,210
data types<font color="#CCCCCC"> the first mutator is a random</font>

717
00:27:51,429 --> 00:27:58,149
mutator<font color="#E5E5E5"> or random generator it will</font>

718
00:27:55,210 --> 00:28:01,570
generate a random integer<font color="#E5E5E5"> utilizing</font><font color="#CCCCCC"> c++</font>

719
00:27:58,149 --> 00:28:04,149
is random labral here we take keyword<font color="#E5E5E5"> as</font>

720
00:28:01,570 --> 00:28:06,490
an example<font color="#E5E5E5"> of primitive data</font><font color="#CCCCCC"> type a</font>

721
00:28:04,149 --> 00:28:10,059
random keyword will be generated<font color="#CCCCCC"> here</font>

722
00:28:06,490 --> 00:28:14,320
<font color="#E5E5E5">and for demonstration purpose</font><font color="#CCCCCC"> a manual h</font>

723
00:28:10,059 --> 00:28:16,750
was a<font color="#E5E5E5"> keyword as the random output the</font>

724
00:28:14,320 --> 00:28:22,389
diagram on the<font color="#CCCCCC"> red side is used to</font>

725
00:28:16,750 --> 00:28:24,580
illustrate the<font color="#CCCCCC"> layout of this keyword so</font>

726
00:28:22,389 --> 00:28:26,979
each keyword is comprised of<font color="#CCCCCC"> eight bytes</font>

727
00:28:24,580 --> 00:28:30,549
<font color="#E5E5E5">and each pad is divided into eight</font>

728
00:28:26,980 --> 00:28:33,340
stress so each strap stands for weight

729
00:28:30,549 --> 00:28:38,200
solid strap stands for<font color="#E5E5E5"> bit one</font><font color="#CCCCCC"> while</font>

730
00:28:33,340 --> 00:28:40,120
<font color="#E5E5E5">hollow strap stands for bit 0 the second</font>

731
00:28:38,200 --> 00:28:43,269
mutator is paid sliding<font color="#E5E5E5"> mutator</font>

732
00:28:40,120 --> 00:28:45,729
<font color="#E5E5E5">it will circularly shift</font><font color="#CCCCCC"> invades in the</font>

733
00:28:43,269 --> 00:28:50,049
left direction<font color="#CCCCCC"> urn is a random integer</font>

734
00:28:45,730 --> 00:28:53,559
in range from<font color="#E5E5E5"> 0 to 64 here we choose n</font><font color="#CCCCCC"> -</font>

735
00:28:50,049 --> 00:28:55,830
45 so the current sliding<font color="#E5E5E5"> meditator will</font>

736
00:28:53,559 --> 00:28:59,418
take the output<font color="#CCCCCC"> from last stat</font>

737
00:28:55,830 --> 00:29:03,840
and circularly shifted left by<font color="#E5E5E5"> 45</font><font color="#CCCCCC"> bates</font>

738
00:28:59,419 --> 00:29:06,510
<font color="#E5E5E5">and the third mutator is swept half</font>

739
00:29:03,840 --> 00:29:10,439
mutator<font color="#E5E5E5"> it will split the q''-word</font>

740
00:29:06,510 --> 00:29:12,779
into 2d words and<font color="#CCCCCC"> swap them you may</font>

741
00:29:10,440 --> 00:29:15,390
already noticed that swap half is a

742
00:29:12,779 --> 00:29:17,370
special case of a slight imitator<font color="#E5E5E5"> will</font>

743
00:29:15,390 --> 00:29:19,350
make it her standalone<font color="#E5E5E5"> mutator since it</font>

744
00:29:17,370 --> 00:29:23,610
preserves the alignment<font color="#E5E5E5"> in the next</font>

745
00:29:19,350 --> 00:29:26,428
lower level<font color="#E5E5E5"> and the first mutator is a</font>

746
00:29:23,610 --> 00:29:29,760
bit flaky<font color="#CCCCCC"> meditator it will flip</font><font color="#E5E5E5"> a</font><font color="#CCCCCC"> bit</font>

747
00:29:26,429 --> 00:29:32,700
<font color="#E5E5E5">at random position from 1 to 0 or from</font><font color="#CCCCCC"> 0</font>

748
00:29:29,760 --> 00:29:36,299
to 1<font color="#CCCCCC"> here which was another</font><font color="#E5E5E5"> random</font>

749
00:29:32,700 --> 00:29:42,389
position<font color="#CCCCCC"> 247 spinnerbait and it is</font>

750
00:29:36,299 --> 00:29:44,309
<font color="#E5E5E5">flipped from 1 to 0 the last and the</font>

751
00:29:42,389 --> 00:29:47,580
most interesting<font color="#CCCCCC"> mutator</font><font color="#E5E5E5"> is the</font><font color="#CCCCCC"> mass</font>

752
00:29:44,309 --> 00:29:49,440
<font color="#CCCCCC">communicator this mutator is inspired</font><font color="#E5E5E5"> by</font>

753
00:29:47,580 --> 00:29:53,129
the<font color="#E5E5E5"> observation that actual memory</font>

754
00:29:49,440 --> 00:29:55,980
content looks sparse<font color="#E5E5E5"> take a cue word as</font>

755
00:29:53,130 --> 00:29:59,820
example it may be a composition<font color="#E5E5E5"> of 8</font>

756
00:29:55,980 --> 00:30:02,970
bytes or 4 words or 2d words or even

757
00:29:59,820 --> 00:30:05,820
<font color="#CCCCCC">some bitwise flags</font><font color="#E5E5E5"> it can be interpreted</font>

758
00:30:02,970 --> 00:30:08,220
<font color="#E5E5E5">in different ways and some of the bytes</font>

759
00:30:05,820 --> 00:30:11,399
are expected to be 0<font color="#CCCCCC"> in specific</font>

760
00:30:08,220 --> 00:30:13,679
interpretations<font color="#E5E5E5"> masks mutator provides a</font>

761
00:30:11,399 --> 00:30:17,570
way<font color="#CCCCCC"> to a Rails</font><font color="#E5E5E5"> random bytes from the</font>

762
00:30:13,679 --> 00:30:20,130
output a random but<font color="#CCCCCC"> M is likely to is</font>

763
00:30:17,570 --> 00:30:24,480
<font color="#CCCCCC">generated</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> determine which parts to be</font>

764
00:30:20,130 --> 00:30:27,480
<font color="#E5E5E5">erased here M is choose to be 0 acts a 3</font>

765
00:30:24,480 --> 00:30:30,149
since each<font color="#CCCCCC"> part is comprised of 8 bits</font>

766
00:30:27,480 --> 00:30:34,590
<font color="#E5E5E5">and each pure word is comprised of 8</font>

767
00:30:30,149 --> 00:30:37,289
bytes expand each bit in<font color="#E5E5E5"> M into orbit as</font>

768
00:30:34,590 --> 00:30:39,959
a<font color="#E5E5E5"> 0 or 0 double</font><font color="#CCCCCC"> there are acts double F</font>

769
00:30:37,289 --> 00:30:43,350
then the bottom is promoted<font color="#CCCCCC"> into a</font>

770
00:30:39,960 --> 00:30:45,720
keyword<font color="#CCCCCC"> to bitwise and operation with</font>

771
00:30:43,350 --> 00:30:49,918
this<font color="#E5E5E5"> promoted keyword can help</font><font color="#CCCCCC"> arrays</font>

772
00:30:45,720 --> 00:30:52,470
random bytes<font color="#E5E5E5"> to</font><font color="#CCCCCC"> 0</font><font color="#E5E5E5"> all right</font><font color="#CCCCCC"> now we</font><font color="#E5E5E5"> have</font>

773
00:30:49,919 --> 00:30:55,740
now printing<font color="#CCCCCC"> mutaters and they can be</font>

774
00:30:52,470 --> 00:31:00,360
<font color="#CCCCCC">layered one above another to form</font><font color="#E5E5E5"> a more</font>

775
00:30:55,740 --> 00:31:03,779
advanced method in logic so here<font color="#E5E5E5"> I</font>

776
00:31:00,360 --> 00:31:05,580
implemented<font color="#E5E5E5"> a mutator dispatcher it only</font>

777
00:31:03,779 --> 00:31:08,610
<font color="#E5E5E5">is the prim commutators together</font>

778
00:31:05,580 --> 00:31:09,449
<font color="#E5E5E5">according</font><font color="#CCCCCC"> to a random byte</font><font color="#E5E5E5"> which renders</font>

779
00:31:08,610 --> 00:31:11,820
<font color="#CCCCCC">our more calm</font>

780
00:31:09,450 --> 00:31:13,950
like<font color="#E5E5E5"> it</font><font color="#CCCCCC"> mutating logic post the</font>

781
00:31:11,820 --> 00:31:16,169
primitive<font color="#CCCCCC"> male</font><font color="#E5E5E5"> hitters and the</font>

782
00:31:13,950 --> 00:31:20,070
dispatcher are implemented<font color="#CCCCCC"> with C++</font>

783
00:31:16,170 --> 00:31:22,290
<font color="#E5E5E5">template this implementation provides a</font>

784
00:31:20,070 --> 00:31:24,120
uniform mutating interface and this

785
00:31:22,290 --> 00:31:26,490
unified interface can<font color="#CCCCCC"> be directly</font>

786
00:31:24,120 --> 00:31:29,699
applied<font color="#CCCCCC"> to different</font><font color="#E5E5E5"> primitive data</font>

787
00:31:26,490 --> 00:31:32,280
without explicitly specifying the data

788
00:31:29,700 --> 00:31:37,410
tabs which makes writing<font color="#E5E5E5"> a specific</font>

789
00:31:32,280 --> 00:31:39,840
mutation<font color="#E5E5E5"> much easier then let's see the</font>

790
00:31:37,410 --> 00:31:42,180
<font color="#CCCCCC">Hassid components we</font><font color="#E5E5E5"> already know that</font>

791
00:31:39,840 --> 00:31:44,250
the hyper core proxy does<font color="#E5E5E5"> this is a</font>

792
00:31:42,180 --> 00:31:46,980
kernel driver that helps you have a core

793
00:31:44,250 --> 00:31:49,500
and<font color="#E5E5E5"> we</font><font color="#CCCCCC"> already have primitive primitive</font>

794
00:31:46,980 --> 00:31:52,050
<font color="#CCCCCC">mutaters</font><font color="#E5E5E5"> and a uniform mutator</font>

795
00:31:49,500 --> 00:31:54,810
dispatcher interface then we can start

796
00:31:52,050 --> 00:31:57,419
to write hub commutations here<font color="#CCCCCC"> i used</font>

797
00:31:54,810 --> 00:32:00,570
the<font color="#E5E5E5"> red</font><font color="#CCCCCC"> &</font><font color="#E5E5E5"> Conquer way to organize the</font>

798
00:31:57,420 --> 00:32:02,850
mutations into<font color="#E5E5E5"> a stack genetic mutations</font>

799
00:32:00,570 --> 00:32:05,669
can help mutate general parameters like

800
00:32:02,850 --> 00:32:08,639
hyper core calling conventions<font color="#E5E5E5"> and have</font>

801
00:32:05,670 --> 00:32:10,890
core classes<font color="#CCCCCC"> a default</font><font color="#E5E5E5"> hub commutation</font>

802
00:32:08,640 --> 00:32:13,590
<font color="#E5E5E5">is provided for</font><font color="#CCCCCC"> coarse-grained</font><font color="#E5E5E5"> mutating</font>

803
00:32:10,890 --> 00:32:16,590
which means supinating the input buffer

804
00:32:13,590 --> 00:32:19,379
<font color="#E5E5E5">into an array of key words the mutate</font>

805
00:32:16,590 --> 00:32:21,590
each keyword in same<font color="#CCCCCC"> way</font><font color="#E5E5E5"> see based</font>

806
00:32:19,380 --> 00:32:24,840
mutation is a default have a commutation

807
00:32:21,590 --> 00:32:28,139
<font color="#CCCCCC">why we need</font><font color="#E5E5E5"> specific mutations for</font>

808
00:32:24,840 --> 00:32:30,419
different hyper<font color="#CCCCCC"> calls with default</font>

809
00:32:28,140 --> 00:32:33,390
mutation which<font color="#CCCCCC"> is every</font><font color="#E5E5E5"> keyword in the</font>

810
00:32:30,420 --> 00:32:35,970
same way but for<font color="#E5E5E5"> specific topic or the</font>

811
00:32:33,390 --> 00:32:38,370
input is supposed to be<font color="#E5E5E5"> fading in</font>

812
00:32:35,970 --> 00:32:40,800
different data structures different

813
00:32:38,370 --> 00:32:43,189
fields have different<font color="#E5E5E5"> meanings like</font>

814
00:32:40,800 --> 00:32:46,409
partition ID<font color="#E5E5E5"> like with our levels</font>

815
00:32:43,190 --> 00:32:48,030
<font color="#CCCCCC">assigning</font><font color="#E5E5E5"> type to a piece of buffer can</font>

816
00:32:46,410 --> 00:32:51,420
be remarkably narrow the sample<font color="#CCCCCC"> space</font>

817
00:32:48,030 --> 00:32:53,700
which makes<font color="#CCCCCC"> those input survives basic</font>

818
00:32:51,420 --> 00:32:56,580
checks and<font color="#E5E5E5"> riches to deeper code logic</font>

819
00:32:53,700 --> 00:33:01,080
<font color="#E5E5E5">in this way the format aware fuzzing is</font>

820
00:32:56,580 --> 00:33:03,060
more effective<font color="#E5E5E5"> than the</font><font color="#CCCCCC"> machines how to</font>

821
00:33:01,080 --> 00:33:05,790
write a specific<font color="#CCCCCC"> hypermutation</font>

822
00:33:03,060 --> 00:33:07,950
is<font color="#E5E5E5"> the same eyes splitting the whole</font>

823
00:33:05,790 --> 00:33:09,389
buffer into a combination<font color="#CCCCCC"> of</font><font color="#E5E5E5"> different</font>

824
00:33:07,950 --> 00:33:12,270
primitive<font color="#CCCCCC"> datatypes</font>

825
00:33:09,390 --> 00:33:15,330
then adopt the primitive<font color="#CCCCCC"> mutaters upon</font>

826
00:33:12,270 --> 00:33:17,850
them after we have enough<font color="#E5E5E5"> knowledge over</font>

827
00:33:15,330 --> 00:33:22,439
specific<font color="#CCCCCC"> hopkins</font><font color="#E5E5E5"> input we can do the</font>

828
00:33:17,850 --> 00:33:23,040
splitting precisely so here<font color="#E5E5E5"> I also want</font>

829
00:33:22,440 --> 00:33:27,150
to highlight

830
00:33:23,040 --> 00:33:29,970
- interesting huh<font color="#CCCCCC"> Bakura mutations the</font>

831
00:33:27,150 --> 00:33:32,820
<font color="#CCCCCC">whittier commutation is used to</font><font color="#E5E5E5"> fast say</font>

832
00:33:29,970 --> 00:33:36,300
what<font color="#E5E5E5"> your secure mode secure calls into</font>

833
00:33:32,820 --> 00:33:38,760
<font color="#CCCCCC">the</font><font color="#E5E5E5"> secure</font><font color="#CCCCCC"> kernel that is to say phasing</font>

834
00:33:36,300 --> 00:33:41,520
<font color="#E5E5E5">from the Whittier zero and want to break</font>

835
00:33:38,760 --> 00:33:44,460
down<font color="#CCCCCC"> the Whittier one and the other is</font><font color="#E5E5E5"> C</font>

836
00:33:41,520 --> 00:33:47,160
<font color="#CCCCCC">post message mutation</font><font color="#E5E5E5"> it has used for</font>

837
00:33:44,460 --> 00:33:50,190
fast the cynic messages for

838
00:33:47,160 --> 00:33:52,680
<font color="#CCCCCC">interpretation communications</font><font color="#E5E5E5"> lost to</font>

839
00:33:50,190 --> 00:33:55,320
hyper<font color="#CCCCCC"> cores have worried complex</font><font color="#E5E5E5"> input</font>

840
00:33:52,680 --> 00:33:57,360
formats and the<font color="#E5E5E5"> wonders wake out amazing</font>

841
00:33:55,320 --> 00:34:02,310
<font color="#E5E5E5">findings from them</font><font color="#CCCCCC"> I will talk about</font>

842
00:33:57,360 --> 00:34:06,000
<font color="#E5E5E5">funny ins later so let's see an example</font>

843
00:34:02,310 --> 00:34:08,310
of<font color="#E5E5E5"> a specific hub commutation the flash</font>

844
00:34:06,000 --> 00:34:11,310
would you address space hyper core it

845
00:34:08,310 --> 00:34:14,460
invalidates<font color="#E5E5E5"> or what you TLB entries that</font>

846
00:34:11,310 --> 00:34:16,650
belong<font color="#CCCCCC"> to a specific address space</font><font color="#E5E5E5"> there</font>

847
00:34:14,460 --> 00:34:20,360
are<font color="#CCCCCC"> three parameters</font><font color="#E5E5E5"> in the input buffer</font>

848
00:34:16,650 --> 00:34:24,150
<font color="#E5E5E5">address space flags and process a mask</font>

849
00:34:20,360 --> 00:34:26,160
<font color="#E5E5E5">the flags is a cure word but it</font><font color="#CCCCCC"> is</font>

850
00:34:24,150 --> 00:34:29,850
<font color="#CCCCCC">actually a bitwise composition of</font>

851
00:34:26,159 --> 00:34:32,428
<font color="#E5E5E5">several binary options only</font><font color="#CCCCCC"> this really</font>

852
00:34:29,850 --> 00:34:35,668
lower baits<font color="#E5E5E5"> are</font><font color="#CCCCCC"> violate</font><font color="#E5E5E5"> other baits are</font>

853
00:34:32,429 --> 00:34:37,950
reserved to<font color="#E5E5E5"> zero the fuzzy efficiency</font>

854
00:34:35,668 --> 00:34:40,350
for this specific hub core will be

855
00:34:37,949 --> 00:34:43,379
remarkably boosted by enforcing<font color="#E5E5E5"> this</font>

856
00:34:40,350 --> 00:34:45,830
<font color="#CCCCCC">format rule and several macros here are</font>

857
00:34:43,380 --> 00:34:49,350
defined<font color="#E5E5E5"> to</font><font color="#CCCCCC"> make the mutating codes need</font>

858
00:34:45,830 --> 00:34:51,810
the macro<font color="#CCCCCC"> PM is a wrapper for mutator</font>

859
00:34:49,350 --> 00:34:54,259
dispatcher interface<font color="#E5E5E5"> it can be directly</font>

860
00:34:51,810 --> 00:34:56,820
<font color="#E5E5E5">applied</font><font color="#CCCCCC"> onto a</font><font color="#E5E5E5"> primitive data field</font>

861
00:34:54,260 --> 00:35:02,730
regardless of its actual data type and

862
00:34:56,820 --> 00:35:04,680
thanks to<font color="#E5E5E5"> c++ template so after</font>

863
00:35:02,730 --> 00:35:09,150
introducing<font color="#E5E5E5"> so much you may wonder what</font>

864
00:35:04,680 --> 00:35:12,089
we<font color="#E5E5E5"> get from hyper seed about one year</font>

865
00:35:09,150 --> 00:35:15,150
<font color="#E5E5E5">ago</font><font color="#CCCCCC"> I just started my</font><font color="#E5E5E5"> row at a</font><font color="#CCCCCC"> mess</font><font color="#E5E5E5"> RC</font>

866
00:35:12,090 --> 00:35:18,330
and I was expected to<font color="#E5E5E5"> contribute to hop</font>

867
00:35:15,150 --> 00:35:20,610
away security so I initiated the<font color="#E5E5E5"> hyper</font>

868
00:35:18,330 --> 00:35:23,370
seed project<font color="#E5E5E5"> at end of February last</font>

869
00:35:20,610 --> 00:35:26,400
year<font color="#E5E5E5"> it</font><font color="#CCCCCC"> took me two months</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> find their</font>

870
00:35:23,370 --> 00:35:28,740
first vulnerability then I open sourced

871
00:35:26,400 --> 00:35:31,350
my project<font color="#CCCCCC"> internally within Microsoft</font>

872
00:35:28,740 --> 00:35:35,009
and<font color="#CCCCCC"> Sean started</font><font color="#E5E5E5"> contributing to hyper</font>

873
00:35:31,350 --> 00:35:36,839
seed<font color="#E5E5E5"> since the end of July he has added</font>

874
00:35:35,010 --> 00:35:40,200
<font color="#CCCCCC">a lot of</font><font color="#E5E5E5"> specific immunity</font>

875
00:35:36,839 --> 00:35:42,390
expanded fuzzing scenarios he has also

876
00:35:40,200 --> 00:35:45,660
found several vulnerabilities<font color="#E5E5E5"> between</font>

877
00:35:42,390 --> 00:35:47,848
<font color="#CCCCCC">July and September at the</font><font color="#E5E5E5"> same time he</font>

878
00:35:45,660 --> 00:35:51,328
<font color="#CCCCCC">also helped</font><font color="#E5E5E5"> integrating hyper seed into</font>

879
00:35:47,849 --> 00:35:53,940
our internal code repository and then

880
00:35:51,329 --> 00:35:57,150
after an inspiring conversation with

881
00:35:53,940 --> 00:35:59,820
<font color="#CCCCCC">Armour October I</font><font color="#E5E5E5"> started fuzzy insecure</font>

882
00:35:57,150 --> 00:36:02,099
kernel<font color="#E5E5E5"> it took me another two months to</font>

883
00:35:59,820 --> 00:36:05,160
<font color="#E5E5E5">fund several interesting with el0</font><font color="#CCCCCC"> - with</font>

884
00:36:02,099 --> 00:36:07,800
<font color="#CCCCCC">heroine vulnerabilities</font><font color="#E5E5E5"> more fundings</font>

885
00:36:05,160 --> 00:36:10,200
are expected in near future<font color="#E5E5E5"> but we would</font>

886
00:36:07,800 --> 00:36:12,390
like<font color="#CCCCCC"> to</font><font color="#E5E5E5"> share with you this earlier now</font>

887
00:36:10,200 --> 00:36:15,750
<font color="#CCCCCC">hop a seed and for matter where fuzzing</font>

888
00:36:12,390 --> 00:36:19,230
<font color="#E5E5E5">is one of the</font><font color="#CCCCCC"> useful ways to fund hop</font>

889
00:36:15,750 --> 00:36:23,070
<font color="#CCCCCC">away vulnerabilities well</font><font color="#E5E5E5"> this is the</font>

890
00:36:19,230 --> 00:36:26,730
funding so far so this<font color="#E5E5E5"> diagram shows the</font>

891
00:36:23,070 --> 00:36:29,790
<font color="#E5E5E5">tabs and impacts of those fundings the</font>

892
00:36:26,730 --> 00:36:32,280
red vector<font color="#E5E5E5"> indicates it is an elevation</font>

893
00:36:29,790 --> 00:36:35,150
<font color="#E5E5E5">of privileged privileged vulnerability</font>

894
00:36:32,280 --> 00:36:37,890
or remote code execution<font color="#E5E5E5"> one ability</font>

895
00:36:35,150 --> 00:36:40,440
well the blue vector indicates it is

896
00:36:37,890 --> 00:36:42,810
<font color="#CCCCCC">certain our service vulnerability</font><font color="#E5E5E5"> the</font>

897
00:36:40,440 --> 00:36:45,359
starting point is where<font color="#CCCCCC"> pepper seed is</font>

898
00:36:42,810 --> 00:36:48,630
deployed and the ending<font color="#CCCCCC"> point is where</font>

899
00:36:45,359 --> 00:36:51,328
<font color="#E5E5E5">the vulnerability can be used to attack</font>

900
00:36:48,630 --> 00:36:53,579
and the<font color="#E5E5E5"> lands of each vector has nothing</font>

901
00:36:51,329 --> 00:36:56,119
to do with<font color="#E5E5E5"> impact only</font><font color="#CCCCCC"> the starting</font>

902
00:36:53,579 --> 00:36:59,730
point<font color="#E5E5E5"> and in point and</font><font color="#CCCCCC"> current matters</font>

903
00:36:56,119 --> 00:37:02,880
<font color="#E5E5E5">so you may want</font><font color="#CCCCCC"> to know how much allows</font>

904
00:36:59,730 --> 00:37:05,010
fundings worse<font color="#E5E5E5"> if they are reported from</font>

905
00:37:02,880 --> 00:37:09,569
external<font color="#E5E5E5"> secure security researchers</font>

906
00:37:05,010 --> 00:37:12,480
like<font color="#E5E5E5"> you guys to my</font><font color="#CCCCCC"> nsrc</font><font color="#E5E5E5"> yeah let's see</font>

907
00:37:09,569 --> 00:37:15,000
<font color="#E5E5E5">it so there are</font><font color="#CCCCCC"> two</font><font color="#E5E5E5"> of the</font><font color="#CCCCCC"> fundings are</font>

908
00:37:12,480 --> 00:37:16,950
qualified for<font color="#E5E5E5"> half</font><font color="#CCCCCC"> of a bounty and you</font>

909
00:37:15,000 --> 00:37:21,569
can find more details about<font color="#E5E5E5"> half</font><font color="#CCCCCC"> of a</font>

910
00:37:16,950 --> 00:37:24,089
bounty through this link the<font color="#CCCCCC"> ICG</font>

911
00:37:21,569 --> 00:37:27,390
vulnerability<font color="#E5E5E5"> from gas to host is</font>

912
00:37:24,089 --> 00:37:29,490
qualified for tier 1 SEK degree it<font color="#CCCCCC"> can</font>

913
00:37:27,390 --> 00:37:32,339
be worth as much as<font color="#E5E5E5"> two</font><font color="#CCCCCC"> hundred thousand</font>

914
00:37:29,490 --> 00:37:34,439
US<font color="#CCCCCC"> dollars even</font><font color="#E5E5E5"> without exploitation and</font>

915
00:37:32,339 --> 00:37:36,720
it was one<font color="#CCCCCC"> orbitty</font>

916
00:37:34,440 --> 00:37:39,750
from<font color="#CCCCCC"> guest</font><font color="#E5E5E5"> who hypervisor is qualified</font>

917
00:37:36,720 --> 00:37:44,209
for<font color="#E5E5E5"> Tier one</font><font color="#CCCCCC"> das category it</font><font color="#E5E5E5"> is worth</font>

918
00:37:39,750 --> 00:37:46,710
another fifteen thousand US dollars and

919
00:37:44,210 --> 00:37:49,079
there<font color="#E5E5E5"> were seven of the fundings are</font>

920
00:37:46,710 --> 00:37:50,190
qualified for windows insider preview

921
00:37:49,079 --> 00:37:53,099
<font color="#E5E5E5">Ponte</font>

922
00:37:50,190 --> 00:37:55,980
the<font color="#CCCCCC"> to EOP 1er abilities</font><font color="#E5E5E5"> from hosts who</font>

923
00:37:53,099 --> 00:37:58,710
have<font color="#E5E5E5"> wizard can be used to bypass we SM</font>

924
00:37:55,980 --> 00:38:00,809
<font color="#E5E5E5">secure features and the</font><font color="#CCCCCC"> fav</font>

925
00:37:58,710 --> 00:38:05,220
<font color="#E5E5E5">yo p1 abilities from Whittier zero to</font>

926
00:38:00,809 --> 00:38:06,780
Whittier<font color="#E5E5E5"> one also be used to bypass the</font>

927
00:38:05,220 --> 00:38:09,230
way as and secure<font color="#E5E5E5"> features</font>

928
00:38:06,780 --> 00:38:11,849
so each overload<font color="#CCCCCC"> each of those</font><font color="#E5E5E5"> seven</font>

929
00:38:09,230 --> 00:38:15,030
vulnerabilities<font color="#CCCCCC"> can be worth as much as</font>

930
00:38:11,849 --> 00:38:18,960
<font color="#E5E5E5">twenty thousand US dollars if they are</font>

931
00:38:15,030 --> 00:38:20,970
reported with<font color="#E5E5E5"> high quality report so you</font>

932
00:38:18,960 --> 00:38:23,609
may want to know what makes<font color="#E5E5E5"> a high</font>

933
00:38:20,970 --> 00:38:26,730
quality report<font color="#E5E5E5"> then you should check our</font>

934
00:38:23,609 --> 00:38:32,880
blog post<font color="#E5E5E5"> on report quality definitions</font>

935
00:38:26,730 --> 00:38:36,690
in the appendix then let's see the guest

936
00:38:32,880 --> 00:38:39,809
<font color="#E5E5E5">host</font><font color="#CCCCCC"> as</font><font color="#E5E5E5"> a evener ability it</font><font color="#CCCCCC"> has been</font>

937
00:38:36,690 --> 00:38:43,650
<font color="#E5E5E5">given</font><font color="#CCCCCC"> cv number twenty eighteen at</font>

938
00:38:39,809 --> 00:38:46,140
<font color="#CCCCCC">eighty four thirteen i this</font>

939
00:38:43,650 --> 00:38:49,470
vulnerability<font color="#E5E5E5"> was found in last</font><font color="#CCCCCC"> main and</font>

940
00:38:46,140 --> 00:38:52,319
was<font color="#E5E5E5"> fixed in september it is</font><font color="#CCCCCC"> a used</font>

941
00:38:49,470 --> 00:38:57,509
after<font color="#E5E5E5"> a vulnerability and it is less</font>

942
00:38:52,319 --> 00:39:01,440
<font color="#CCCCCC">likely to be</font><font color="#E5E5E5"> exploited and that's why i</font>

943
00:38:57,510 --> 00:39:04,170
didn't gather highest<font color="#CCCCCC"> bounty</font><font color="#E5E5E5"> and this</font>

944
00:39:01,440 --> 00:39:08,069
this vulnerability<font color="#E5E5E5"> is found by fuzzing</font>

945
00:39:04,170 --> 00:39:11,730
<font color="#E5E5E5">each way post message</font><font color="#CCCCCC"> Epicor this hub</font>

946
00:39:08,069 --> 00:39:14,000
core is well documented in<font color="#CCCCCC"> TFS so be</font>

947
00:39:11,730 --> 00:39:16,440
sure<font color="#CCCCCC"> to check it it is used for</font>

948
00:39:14,000 --> 00:39:19,440
interpretation communication through

949
00:39:16,440 --> 00:39:21,329
synthetic interrupt controller<font color="#E5E5E5"> the post</font>

950
00:39:19,440 --> 00:39:23,670
<font color="#CCCCCC">hid message will be</font><font color="#E5E5E5"> first copied</font><font color="#CCCCCC"> who</font>

951
00:39:21,329 --> 00:39:27,059
have<font color="#CCCCCC"> wowzers internal cues and then</font>

952
00:39:23,670 --> 00:39:29,670
copied into the<font color="#E5E5E5"> target partition this is</font>

953
00:39:27,059 --> 00:39:32,190
one of<font color="#CCCCCC"> the very</font><font color="#E5E5E5"> basic in her partition</font>

954
00:39:29,670 --> 00:39:37,529
communications and even<font color="#E5E5E5"> when bus is</font>

955
00:39:32,190 --> 00:39:39,619
built<font color="#CCCCCC"> upon it this</font><font color="#E5E5E5"> vulnerability can be</font>

956
00:39:37,529 --> 00:39:43,589
reproduced<font color="#E5E5E5"> with the following steps</font>

957
00:39:39,619 --> 00:39:46,380
first<font color="#E5E5E5"> run the</font><font color="#CCCCCC"> hepa</font><font color="#E5E5E5"> seed inside a guest</font>

958
00:39:43,589 --> 00:39:49,319
VM<font color="#E5E5E5"> and keep</font><font color="#CCCCCC"> facing each way post message</font>

959
00:39:46,380 --> 00:39:52,079
with open channel and<font color="#CCCCCC"> closed channel as</font>

960
00:39:49,319 --> 00:39:54,630
a channel message<font color="#E5E5E5"> type the manually</font>

961
00:39:52,079 --> 00:39:58,740
reset the guest way<font color="#E5E5E5"> I'm from host</font><font color="#CCCCCC"> hop</font>

962
00:39:54,630 --> 00:40:01,770
<font color="#CCCCCC">away manager can make the</font><font color="#E5E5E5"> host crash so</font>

963
00:39:58,740 --> 00:40:03,089
at<font color="#E5E5E5"> first set a seems host is tossing</font>

964
00:40:01,770 --> 00:40:05,640
itself

965
00:40:03,090 --> 00:40:08,430
but after carefully diagnosis<font color="#E5E5E5"> it is a</font>

966
00:40:05,640 --> 00:40:14,520
use after free and it can be triggered

967
00:40:08,430 --> 00:40:16,009
<font color="#E5E5E5">totally within the</font><font color="#CCCCCC"> guest this</font><font color="#E5E5E5"> is part of</font>

968
00:40:14,520 --> 00:40:18,780
the crash dump

969
00:40:16,010 --> 00:40:22,260
apparently the memory location being

970
00:40:18,780 --> 00:40:24,270
referenced<font color="#CCCCCC"> has already been frayed</font><font color="#E5E5E5"> so</font>

971
00:40:22,260 --> 00:40:27,180
the referenced memory is inside of the

972
00:40:24,270 --> 00:40:31,290
monitor page<font color="#E5E5E5"> it is the pending</font><font color="#CCCCCC"> bates</font>

973
00:40:27,180 --> 00:40:32,669
inside<font color="#E5E5E5"> of the trigger group the monitor</font>

974
00:40:31,290 --> 00:40:35,340
page is part of the monitored

975
00:40:32,670 --> 00:40:37,610
notification facility it<font color="#E5E5E5"> is used to</font>

976
00:40:35,340 --> 00:40:39,840
establish<font color="#E5E5E5"> a hypo as a monitored</font>

977
00:40:37,610 --> 00:40:42,920
<font color="#E5E5E5">unidirectional notification</font><font color="#CCCCCC"> channel</font>

978
00:40:39,840 --> 00:40:45,330
between two communicating partitions<font color="#E5E5E5"> the</font>

979
00:40:42,920 --> 00:40:48,150
<font color="#CCCCCC">monitor notification parameters are</font>

980
00:40:45,330 --> 00:40:49,830
stored in monitor pages you can find

981
00:40:48,150 --> 00:40:53,820
<font color="#E5E5E5">more details about monitored</font>

982
00:40:49,830 --> 00:40:56,210
notification on<font color="#E5E5E5"> TR FS so here we only</font>

983
00:40:53,820 --> 00:40:59,820
need to know<font color="#E5E5E5"> that this vulnerability</font>

984
00:40:56,210 --> 00:41:01,920
<font color="#E5E5E5">causes the monitor many monitor page to</font>

985
00:40:59,820 --> 00:41:06,690
be referenced after it has<font color="#E5E5E5"> already been</font>

986
00:41:01,920 --> 00:41:09,120
<font color="#CCCCCC">frayed the monitor page will be</font>

987
00:41:06,690 --> 00:41:11,520
<font color="#E5E5E5">allocated when initializing away and</font>

988
00:41:09,120 --> 00:41:13,940
bass connection it will be frayed<font color="#E5E5E5"> when</font>

989
00:41:11,520 --> 00:41:17,280
reciting or<font color="#E5E5E5"> destroying</font><font color="#CCCCCC"> or partition or</font>

990
00:41:13,940 --> 00:41:18,870
failing<font color="#E5E5E5"> when</font><font color="#CCCCCC"> bass connection a reference</font>

991
00:41:17,280 --> 00:41:22,500
<font color="#E5E5E5">to the monitor page will be</font><font color="#CCCCCC"> cached</font>

992
00:41:18,870 --> 00:41:24,240
<font color="#E5E5E5">internally to support</font><font color="#CCCCCC"> interrupts which</font>

993
00:41:22,500 --> 00:41:27,150
eventually will be carried out<font color="#E5E5E5"> by</font>

994
00:41:24,240 --> 00:41:30,720
calling<font color="#E5E5E5"> each way signal event using</font><font color="#CCCCCC"> the</font>

995
00:41:27,150 --> 00:41:33,840
<font color="#E5E5E5">parameters</font><font color="#CCCCCC"> study</font><font color="#E5E5E5"> monitor page if the</font>

996
00:41:30,720 --> 00:41:36,500
channel is not opened properly<font color="#E5E5E5"> it still</font>

997
00:41:33,840 --> 00:41:39,090
<font color="#E5E5E5">holds the reference without clearing</font><font color="#CCCCCC"> it</font>

998
00:41:36,500 --> 00:41:41,790
then further<font color="#E5E5E5"> access to the cache the</font>

999
00:41:39,090 --> 00:41:46,500
<font color="#E5E5E5">reference after being afraid</font><font color="#CCCCCC"> leads to yo</font>

1000
00:41:41,790 --> 00:41:48,509
<font color="#E5E5E5">AF and the fix is pretty simple</font><font color="#CCCCCC"> it</font>

1001
00:41:46,500 --> 00:41:50,790
<font color="#E5E5E5">checks the open result and clears the</font>

1002
00:41:48,510 --> 00:41:55,620
reference<font color="#E5E5E5"> if the channel is not properly</font>

1003
00:41:50,790 --> 00:41:58,279
opened so as you see hyper seed is still

1004
00:41:55,620 --> 00:42:01,410
under development<font color="#E5E5E5"> and far from complete</font>

1005
00:41:58,280 --> 00:42:03,740
the<font color="#E5E5E5"> format aware</font><font color="#CCCCCC"> fasting nature makes</font><font color="#E5E5E5"> it</font>

1006
00:42:01,410 --> 00:42:07,290
not easy to be reused with<font color="#CCCCCC"> later rework</font>

1007
00:42:03,740 --> 00:42:09,060
<font color="#E5E5E5">but we still want</font><font color="#CCCCCC"> to share with share</font>

1008
00:42:07,290 --> 00:42:12,960
with you this<font color="#CCCCCC"> idea and a protease of</font>

1009
00:42:09,060 --> 00:42:16,270
fuzzing<font color="#CCCCCC"> havoc or it may give you some</font>

1010
00:42:12,960 --> 00:42:18,430
<font color="#CCCCCC">hint and inspirations</font>

1011
00:42:16,270 --> 00:42:21,160
and in the future<font color="#E5E5E5"> we will keep improving</font>

1012
00:42:18,430 --> 00:42:24,310
<font color="#CCCCCC">the hopper seed and</font><font color="#E5E5E5"> format</font><font color="#CCCCCC"> aware fuzzing</font>

1013
00:42:21,160 --> 00:42:27,910
we will investigate ways to combine<font color="#E5E5E5"> the</font>

1014
00:42:24,310 --> 00:42:30,700
power of Intel processor tracing AFL and

1015
00:42:27,910 --> 00:42:33,640
hyper seed into<font color="#CCCCCC"> a coverage guided</font>

1016
00:42:30,700 --> 00:42:36,720
<font color="#E5E5E5">fuzzing framework we will publish more</font>

1017
00:42:33,640 --> 00:42:40,359
details on other fundings<font color="#E5E5E5"> after</font><font color="#CCCCCC"> they</font>

1018
00:42:36,720 --> 00:42:42,879
<font color="#E5E5E5">they being patched and we are planning</font>

1019
00:42:40,360 --> 00:42:45,550
<font color="#E5E5E5">to open source a modified version of</font>

1020
00:42:42,880 --> 00:42:48,180
hyper seed you know<font color="#E5E5E5"> after removing</font>

1021
00:42:45,550 --> 00:42:52,270
dependencies and sensitive<font color="#CCCCCC"> information</font>

1022
00:42:48,180 --> 00:42:54,430
so in near<font color="#E5E5E5"> future I</font><font color="#CCCCCC"> guess and</font><font color="#E5E5E5"> we will</font>

1023
00:42:52,270 --> 00:43:03,390
try to extend<font color="#CCCCCC"> formatter were passing two</font>

1024
00:42:54,430 --> 00:43:06,819
more targets<font color="#E5E5E5"> and thanks to our teams and</font>

1025
00:43:03,390 --> 00:43:08,230
as well as<font color="#CCCCCC"> operating</font><font color="#E5E5E5"> so please don't</font>

1026
00:43:06,820 --> 00:43:11,140
forget<font color="#E5E5E5"> to check the appendix for</font>

1027
00:43:08,230 --> 00:43:13,720
<font color="#CCCCCC">valuable research on happily unhappy</font>

1028
00:43:11,140 --> 00:43:16,810
core as well as some use for<font color="#CCCCCC"> public</font>

1029
00:43:13,720 --> 00:43:19,089
resources so those are valuable

1030
00:43:16,810 --> 00:43:23,140
references you<font color="#E5E5E5"> can check if you want</font><font color="#CCCCCC"> to</font>

1031
00:43:19,090 --> 00:43:25,450
do<font color="#E5E5E5"> happy with security research</font><font color="#CCCCCC"> unless</font>

1032
00:43:23,140 --> 00:43:27,790
other use for<font color="#CCCCCC"> public resources you can</font>

1033
00:43:25,450 --> 00:43:31,540
use<font color="#E5E5E5"> so the first and the most</font>

1034
00:43:27,790 --> 00:43:33,670
recommended<font color="#CCCCCC"> resource is the TFS that</font>

1035
00:43:31,540 --> 00:43:36,580
includes very detailed<font color="#CCCCCC"> information about</font>

1036
00:43:33,670 --> 00:43:39,970
hyper core you<font color="#E5E5E5"> can also see a lot of</font>

1037
00:43:36,580 --> 00:43:41,770
<font color="#CCCCCC">happily internals lack intercepts in her</font>

1038
00:43:39,970 --> 00:43:44,200
partition communications and what you

1039
00:43:41,770 --> 00:43:46,480
secure mode<font color="#CCCCCC"> is central if you want to</font>

1040
00:43:44,200 --> 00:43:50,290
learn<font color="#E5E5E5"> half</font><font color="#CCCCCC"> way into your nose it is the</font>

1041
00:43:46,480 --> 00:43:52,690
best materials for<font color="#CCCCCC"> you second is</font><font color="#E5E5E5"> it</font>

1042
00:43:50,290 --> 00:43:56,470
<font color="#CCCCCC">debugging symbols for selected set of</font>

1043
00:43:52,690 --> 00:43:59,260
<font color="#E5E5E5">halfway executables it can be used to do</font>

1044
00:43:56,470 --> 00:44:01,450
the<font color="#E5E5E5"> reverse engineering</font><font color="#CCCCCC"> and you can find</font>

1045
00:43:59,260 --> 00:44:04,500
<font color="#E5E5E5">lots of function names rather than the</font>

1046
00:44:01,450 --> 00:44:07,450
exported ones<font color="#E5E5E5"> and the third one is a</font>

1047
00:44:04,500 --> 00:44:10,750
<font color="#CCCCCC">linux integration service it is</font>

1048
00:44:07,450 --> 00:44:12,520
<font color="#E5E5E5">available on github</font><font color="#CCCCCC"> it contains some</font>

1049
00:44:10,750 --> 00:44:14,620
structure definitions and even some

1050
00:44:12,520 --> 00:44:19,150
functions to<font color="#E5E5E5"> help</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> directly issue</font>

1051
00:44:14,620 --> 00:44:19,960
<font color="#CCCCCC">havoc or the false hdk is reversed by</font>

1052
00:44:19,150 --> 00:44:22,540
Alex

1053
00:44:19,960 --> 00:44:25,360
it contains -<font color="#E5E5E5"> structured definitions</font>

1054
00:44:22,540 --> 00:44:26,470
which should be useful for writing

1055
00:44:25,360 --> 00:44:29,980
<font color="#E5E5E5">accommodations</font>

1056
00:44:26,470 --> 00:44:32,830
and the last one is the report

1057
00:44:29,980 --> 00:44:35,920
quality definitions<font color="#E5E5E5"> so if we want to get</font>

1058
00:44:32,830 --> 00:44:41,770
more<font color="#E5E5E5"> money for weight Ponte then study</font>

1059
00:44:35,920 --> 00:44:44,190
it that's all for our<font color="#E5E5E5"> talk today thanks</font>

1060
00:44:41,770 --> 00:44:44,190
<font color="#E5E5E5">for your time</font>

1061
00:44:50,810 --> 00:44:56,430
any questions<font color="#E5E5E5"> yeah go shoot</font><font color="#CCCCCC"> and for the</font>

1062
00:44:55,109 --> 00:44:58,920
rest of<font color="#E5E5E5"> us who don't have</font><font color="#CCCCCC"> questions</font>

1063
00:44:56,430 --> 00:45:01,919
please stay seated<font color="#E5E5E5"> until the</font><font color="#CCCCCC"> time's up</font>

1064
00:44:58,920 --> 00:45:06,020
<font color="#E5E5E5">so we can answer the</font><font color="#CCCCCC"> question without a</font>

1065
00:45:01,920 --> 00:45:06,020
big commotion

1066
00:45:16,340 --> 00:45:25,370
which collection<font color="#E5E5E5"> of hyper calls would</font>

1067
00:45:19,100 --> 00:45:28,580
you recommend<font color="#E5E5E5"> in us fuzzing I've already</font>

1068
00:45:25,370 --> 00:45:31,250
highlighted<font color="#CCCCCC"> two so the first</font><font color="#E5E5E5"> way is for</font>

1069
00:45:28,580 --> 00:45:33,310
fuzzing<font color="#E5E5E5"> we have zero to</font><font color="#CCCCCC"> a Tier</font><font color="#E5E5E5"> one</font><font color="#CCCCCC"> the</font>

1070
00:45:31,250 --> 00:45:34,670
<font color="#CCCCCC">sacred</font><font color="#E5E5E5"> horse and the other is</font>

1071
00:45:33,310 --> 00:45:37,759
<font color="#CCCCCC">postmessage</font>

1072
00:45:34,670 --> 00:45:41,720
so yeah<font color="#E5E5E5"> and another</font><font color="#CCCCCC"> thing</font><font color="#E5E5E5"> I</font><font color="#CCCCCC"> want to</font>

1073
00:45:37,760 --> 00:45:44,000
mention is that<font color="#CCCCCC"> there decide</font><font color="#E5E5E5"> you can</font>

1074
00:45:41,720 --> 00:45:46,189
call from<font color="#CCCCCC"> guest partition or from root</font>

1075
00:45:44,000 --> 00:45:48,920
partition is different<font color="#E5E5E5"> there is very</font>

1076
00:45:46,190 --> 00:45:51,680
limited<font color="#E5E5E5"> set of hub</font><font color="#CCCCCC"> calls are accessible</font>

1077
00:45:48,920 --> 00:45:52,760
<font color="#CCCCCC">directly from the guest but there's a</font>

1078
00:45:51,680 --> 00:45:58,310
lot from the host

1079
00:45:52,760 --> 00:46:00,590
almost almost<font color="#E5E5E5"> all hello thanks we talked</font>

1080
00:45:58,310 --> 00:46:02,810
was really cool<font color="#E5E5E5"> you mentioned that</font>

1081
00:46:00,590 --> 00:46:04,700
future<font color="#E5E5E5"> work will include coverage</font>

1082
00:46:02,810 --> 00:46:08,900
<font color="#CCCCCC">chariot fussing</font><font color="#E5E5E5"> yes they're already</font>

1083
00:46:04,700 --> 00:46:10,790
progress on this yeah<font color="#CCCCCC"> so you know now</font>

1084
00:46:08,900 --> 00:46:15,160
the problem is there<font color="#CCCCCC"> is no public</font>

1085
00:46:10,790 --> 00:46:18,590
<font color="#E5E5E5">solutions for supporting I mean</font>

1086
00:46:15,160 --> 00:46:21,109
supporting halfway with the inter<font color="#CCCCCC"> PT and</font>

1087
00:46:18,590 --> 00:46:24,320
now there are<font color="#E5E5E5"> some internal efforts</font>

1088
00:46:21,110 --> 00:46:26,330
<font color="#E5E5E5">working on that so yeah where to be on</font>

1089
00:46:24,320 --> 00:46:28,850
<font color="#CCCCCC">it</font><font color="#E5E5E5"> additionally I've played around with</font>

1090
00:46:26,330 --> 00:46:30,410
doing<font color="#E5E5E5"> beep binary rewriting and so I've</font>

1091
00:46:28,850 --> 00:46:36,020
<font color="#E5E5E5">had</font><font color="#CCCCCC"> some success that way</font><font color="#E5E5E5"> it's just</font><font color="#CCCCCC"> a</font>

1092
00:46:30,410 --> 00:46:37,640
matter<font color="#E5E5E5"> of fine-tuning it why do you</font><font color="#CCCCCC"> have</font>

1093
00:46:36,020 --> 00:46:40,120
a source code access why don't you

1094
00:46:37,640 --> 00:46:43,220
<font color="#E5E5E5">compile with coverage guided the</font>

1095
00:46:40,120 --> 00:46:46,540
instrumentation<font color="#E5E5E5"> well that requires</font><font color="#CCCCCC"> our</font>

1096
00:46:43,220 --> 00:46:46,540
compiler to support that first

1097
00:46:52,660 --> 00:46:56,440
anybody else I'm not<font color="#E5E5E5"> seeing</font>

1098
00:47:09,040 --> 00:47:12,119
[Applause]

1099
00:47:13,239 --> 00:47:20,140
<font color="#E5E5E5">okay apparently we're done then let's</font>

1100
00:47:17,059 --> 00:47:20,140
get another<font color="#CCCCCC"> round of applause</font>

1101
00:47:25,540 --> 00:47:28,540
and

