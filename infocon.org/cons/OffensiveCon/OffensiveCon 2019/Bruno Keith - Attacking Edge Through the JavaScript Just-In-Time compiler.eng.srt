1
00:00:04,440 --> 00:00:12,360
thank you test<font color="#CCCCCC"> it</font><font color="#E5E5E5"> can</font><font color="#CCCCCC"> you hear me</font>

2
00:00:08,580 --> 00:00:14,190
<font color="#CCCCCC">alright alright</font><font color="#E5E5E5"> so welcome everyone to</font>

3
00:00:12,360 --> 00:00:17,550
the so I called<font color="#E5E5E5"> attacking edge for the</font>

4
00:00:14,190 --> 00:00:19,410
JavaScript<font color="#E5E5E5"> compiler so just some</font><font color="#CCCCCC"> quick</font>

5
00:00:17,550 --> 00:00:21,539
words about<font color="#E5E5E5"> me I'm 24 I started</font>

6
00:00:19,410 --> 00:00:23,250
<font color="#CCCCCC">insecurity by playing CTF with the</font><font color="#E5E5E5"> skip</font>

7
00:00:21,539 --> 00:00:26,820
on<font color="#E5E5E5"> the team now about three years ago</font>

8
00:00:23,250 --> 00:00:29,609
<font color="#E5E5E5">and I quit</font><font color="#CCCCCC"> my job to do VR</font><font color="#E5E5E5"> full time in</font>

9
00:00:26,820 --> 00:00:31,289
last year and<font color="#E5E5E5"> I've mainly been doing</font>

10
00:00:29,609 --> 00:00:33,840
<font color="#CCCCCC">JavaScript engine specifically JIT</font>

11
00:00:31,289 --> 00:00:35,969
compilers<font color="#E5E5E5"> and this is my Twitter</font><font color="#CCCCCC"> and</font>

12
00:00:33,840 --> 00:00:39,930
<font color="#CCCCCC">already savaging exploit code slides</font>

13
00:00:35,969 --> 00:00:42,629
<font color="#E5E5E5">right after this talk</font><font color="#CCCCCC"> I now announce</font><font color="#E5E5E5"> it</font>

14
00:00:39,930 --> 00:00:44,760
<font color="#E5E5E5">on Twitter so the agenda for today are</font>

15
00:00:42,629 --> 00:00:46,230
quickly<font color="#E5E5E5"> in like one slide to introduce</font>

16
00:00:44,760 --> 00:00:47,849
what is<font color="#E5E5E5"> chakra</font><font color="#CCCCCC"> ko</font>

17
00:00:46,230 --> 00:00:49,769
then we'll do a primer about JavaScript

18
00:00:47,850 --> 00:00:53,190
engine so if you have no experience<font color="#CCCCCC"> with</font>

19
00:00:49,770 --> 00:00:55,410
<font color="#CCCCCC">that kind of program I think it will be</font>

20
00:00:53,190 --> 00:00:57,149
<font color="#E5E5E5">good then we'll</font><font color="#CCCCCC"> do some chakra controls</font>

21
00:00:55,410 --> 00:00:58,680
and<font color="#E5E5E5"> then we'll dive</font><font color="#CCCCCC"> into</font><font color="#E5E5E5"> the meat of the</font>

22
00:00:57,149 --> 00:01:02,039
subject<font color="#E5E5E5"> which is just-in-time</font>

23
00:00:58,680 --> 00:01:04,650
compilation of JavaScript<font color="#CCCCCC"> why it's a</font>

24
00:01:02,039 --> 00:01:06,299
complicated<font color="#CCCCCC"> thing to</font><font color="#E5E5E5"> do and then we'll</font>

25
00:01:04,650 --> 00:01:09,299
talk about chakras<font color="#E5E5E5"> JIT</font><font color="#CCCCCC"> compiler</font>

26
00:01:06,299 --> 00:01:12,630
specifically and<font color="#E5E5E5"> then we'll analyze and</font>

27
00:01:09,299 --> 00:01:17,130
work through an exploit I wrote for Jade

28
00:01:12,630 --> 00:01:19,229
bug<font color="#E5E5E5"> that led to remote code execution so</font>

29
00:01:17,130 --> 00:01:21,869
<font color="#E5E5E5">quickly what chakra</font><font color="#CCCCCC"> core</font><font color="#E5E5E5"> so the default</font>

30
00:01:19,229 --> 00:01:23,759
browser on Windows 10<font color="#E5E5E5"> today is Microsoft</font>

31
00:01:21,869 --> 00:01:27,360
edge<font color="#E5E5E5"> the JavaScript engine inside it is</font>

32
00:01:23,759 --> 00:01:28,979
called chakra chakra<font color="#CCCCCC"> Co is basically the</font>

33
00:01:27,360 --> 00:01:31,259
open<font color="#E5E5E5"> source version of chakra so it's</font>

34
00:01:28,979 --> 00:01:32,759
like<font color="#CCCCCC"> 95 percent</font><font color="#E5E5E5"> of chakra you have a few</font>

35
00:01:31,259 --> 00:01:34,409
<font color="#CCCCCC">things</font><font color="#E5E5E5"> that are not</font><font color="#CCCCCC"> open source</font><font color="#E5E5E5"> like the</font>

36
00:01:32,759 --> 00:01:36,540
chrome API is the<font color="#CCCCCC"> edge bindings and</font>

37
00:01:34,409 --> 00:01:39,990
everything chakra<font color="#CCCCCC"> Co is available on</font>

38
00:01:36,540 --> 00:01:42,570
github and rate written<font color="#CCCCCC"> mainly in C++</font>

39
00:01:39,990 --> 00:01:44,610
<font color="#CCCCCC">and yeah that's about all we need to</font>

40
00:01:42,570 --> 00:01:46,710
<font color="#CCCCCC">know so a</font><font color="#E5E5E5"> quick primer but</font><font color="#CCCCCC"> javascript</font>

41
00:01:44,610 --> 00:01:48,840
engine so what's the<font color="#CCCCCC"> JavaScript engine</font>

42
00:01:46,710 --> 00:01:51,270
<font color="#E5E5E5">so JavaScript engine is basically</font>

43
00:01:48,840 --> 00:01:52,649
something that implements dialect<font color="#CCCCCC"> that</font>

44
00:01:51,270 --> 00:01:55,170
<font color="#CCCCCC">conforms to</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> Eggman script standard</font>

45
00:01:52,649 --> 00:01:58,530
<font color="#CCCCCC">these days if you take the major</font>

46
00:01:55,170 --> 00:02:01,200
<font color="#E5E5E5">JavaScript engines</font><font color="#CCCCCC"> do they will</font><font color="#E5E5E5"> be made</font>

47
00:01:58,530 --> 00:02:02,939
up of these five<font color="#E5E5E5"> components roughly so</font>

48
00:02:01,200 --> 00:02:06,329
you have the<font color="#E5E5E5"> puzzle</font><font color="#CCCCCC"> it's the entry point</font>

49
00:02:02,939 --> 00:02:08,280
<font color="#E5E5E5">basically that's you give it the</font><font color="#CCCCCC"> path to</font>

50
00:02:06,329 --> 00:02:10,500
your<font color="#E5E5E5"> to</font><font color="#CCCCCC"> your file or</font><font color="#E5E5E5"> the other source</font>

51
00:02:08,280 --> 00:02:13,420
code<font color="#CCCCCC"> it passes it produces</font><font color="#E5E5E5"> an abstract</font>

52
00:02:10,500 --> 00:02:15,190
syntax tree and<font color="#E5E5E5"> Krysten bytecode</font>

53
00:02:13,420 --> 00:02:16,600
that bytecode is then fed<font color="#CCCCCC"> into the</font>

54
00:02:15,190 --> 00:02:20,859
interpreter<font color="#E5E5E5"> which is basically a virtual</font>

55
00:02:16,600 --> 00:02:22,870
<font color="#CCCCCC">machine just like runs that bytecode to</font>

56
00:02:20,860 --> 00:02:24,460
do<font color="#E5E5E5"> that it relies on what we call the</font>

57
00:02:22,870 --> 00:02:26,440
<font color="#CCCCCC">run time which basically provides all</font>

58
00:02:24,460 --> 00:02:29,980
<font color="#CCCCCC">the basic data structures standard</font>

59
00:02:26,440 --> 00:02:31,240
libraries built-in functions of course

60
00:02:29,980 --> 00:02:32,290
you have a<font color="#E5E5E5"> garbage collector because you</font>

61
00:02:31,240 --> 00:02:34,510
don't have<font color="#E5E5E5"> to deal</font><font color="#CCCCCC"> with memory</font>

62
00:02:32,290 --> 00:02:37,500
<font color="#CCCCCC">management in JavaScript</font><font color="#E5E5E5"> and you have</font>

63
00:02:34,510 --> 00:02:40,390
one or many JavaScript compilers<font color="#CCCCCC"> and</font>

64
00:02:37,500 --> 00:02:41,650
<font color="#E5E5E5">more on that later</font><font color="#CCCCCC"> this is the subject</font>

65
00:02:40,390 --> 00:02:44,140
<font color="#E5E5E5">of this talk but basically what they do</font>

66
00:02:41,650 --> 00:02:46,090
is detect the<font color="#E5E5E5"> bytecode</font><font color="#CCCCCC"> and magically</font>

67
00:02:44,140 --> 00:02:49,540
produce<font color="#E5E5E5"> optimized machine code and we'll</font>

68
00:02:46,090 --> 00:02:51,130
try<font color="#E5E5E5"> to demystify that so now quickly</font>

69
00:02:49,540 --> 00:02:53,010
about<font color="#E5E5E5"> some of chakra core internals that</font>

70
00:02:51,130 --> 00:02:55,180
<font color="#E5E5E5">we'll need a throughout the talk</font>

71
00:02:53,010 --> 00:02:57,399
<font color="#CCCCCC">everything inside</font><font color="#E5E5E5"> the JavaScript</font><font color="#CCCCCC"> engine</font>

72
00:02:55,180 --> 00:03:00,190
is what you can refer<font color="#CCCCCC"> to as a JS value</font>

73
00:02:57,400 --> 00:03:01,870
so inside chakra<font color="#E5E5E5"> everything everything</font>

74
00:03:00,190 --> 00:03:05,410
<font color="#E5E5E5">has the</font><font color="#CCCCCC"> same type which is</font><font color="#E5E5E5"> Val</font><font color="#CCCCCC"> it's just</font>

75
00:03:01,870 --> 00:03:07,959
<font color="#E5E5E5">an elias for for a void pointer</font><font color="#CCCCCC"> chakra</font>

76
00:03:05,410 --> 00:03:10,420
<font color="#E5E5E5">curves use</font><font color="#CCCCCC"> none boxing so it's a it's a</font>

77
00:03:07,959 --> 00:03:13,600
clever trick<font color="#E5E5E5"> to to encode</font><font color="#CCCCCC"> some kind of</font>

78
00:03:10,420 --> 00:03:15,670
time<font color="#CCCCCC"> deformation alongside the value for</font>

79
00:03:13,600 --> 00:03:18,459
your<font color="#E5E5E5"> for J for your JS value so if you</font>

80
00:03:15,670 --> 00:03:19,540
<font color="#E5E5E5">take the</font><font color="#CCCCCC"> the integer that's X for one</font>

81
00:03:18,459 --> 00:03:21,370
for one for one for one

82
00:03:19,540 --> 00:03:23,799
it<font color="#E5E5E5"> will be represented internally with</font>

83
00:03:21,370 --> 00:03:26,019
like the<font color="#E5E5E5"> 40s it's set so as you can</font><font color="#CCCCCC"> see</font>

84
00:03:23,800 --> 00:03:28,780
on the right and same thing if<font color="#E5E5E5"> we take</font>

85
00:03:26,019 --> 00:03:30,519
the double that's represented in hex<font color="#E5E5E5"> as</font>

86
00:03:28,780 --> 00:03:33,730
for one for one<font color="#CCCCCC"> for one you can see</font><font color="#E5E5E5"> that</font>

87
00:03:30,519 --> 00:03:35,800
the upper bits are set to<font color="#E5E5E5"> ffff C which</font>

88
00:03:33,730 --> 00:03:37,600
is basically a tag that<font color="#E5E5E5"> tells us this is</font>

89
00:03:35,800 --> 00:03:39,580
a double you should treat<font color="#CCCCCC"> that value as</font>

90
00:03:37,600 --> 00:03:41,140
a double<font color="#CCCCCC"> know what that means for us</font><font color="#E5E5E5"> is</font>

91
00:03:39,580 --> 00:03:42,940
if the upper bits are cleared we're

92
00:03:41,140 --> 00:03:44,559
basically dealing with what should be a

93
00:03:42,940 --> 00:03:48,310
void pointer<font color="#E5E5E5"> which will point to a</font><font color="#CCCCCC"> boxed</font>

94
00:03:44,560 --> 00:03:52,090
<font color="#E5E5E5">object for more</font><font color="#CCCCCC"> your more complicated</font>

95
00:03:48,310 --> 00:03:55,000
stuff<font color="#E5E5E5"> so those things are commonly</font>

96
00:03:52,090 --> 00:03:56,640
called<font color="#CCCCCC"> JS object</font><font color="#E5E5E5"> so</font><font color="#CCCCCC"> JavaScript objects</font>

97
00:03:55,000 --> 00:03:59,920
<font color="#CCCCCC">is</font><font color="#E5E5E5"> basically a</font><font color="#CCCCCC"> dictionaries it's</font><font color="#E5E5E5"> just a</font>

98
00:03:56,640 --> 00:04:02,049
simple<font color="#E5E5E5"> collection of key value pairs the</font>

99
00:03:59,920 --> 00:04:04,480
<font color="#E5E5E5">interesting</font><font color="#CCCCCC"> thing is that in all</font><font color="#E5E5E5"> engines</font>

100
00:04:02,050 --> 00:04:06,580
<font color="#E5E5E5">basically the object doesn't maintain</font>

101
00:04:04,480 --> 00:04:08,530
<font color="#E5E5E5">its own map of property names to</font>

102
00:04:06,580 --> 00:04:10,299
property<font color="#CCCCCC"> values they all do the same</font>

103
00:04:08,530 --> 00:04:12,940
<font color="#E5E5E5">thing which is the</font><font color="#CCCCCC"> object basically only</font>

104
00:04:10,299 --> 00:04:14,410
<font color="#CCCCCC">ask the values</font><font color="#E5E5E5"> and it points to some</font>

105
00:04:12,940 --> 00:04:16,089
kind<font color="#E5E5E5"> of structure in chakra is called</font>

106
00:04:14,410 --> 00:04:19,320
<font color="#CCCCCC">the type which basically describes that</font>

107
00:04:16,089 --> 00:04:21,458
<font color="#E5E5E5">objects layout it allows for two things</font>

108
00:04:19,320 --> 00:04:24,039
<font color="#CCCCCC">two really</font><font color="#E5E5E5"> nice things the first one is</font>

109
00:04:21,459 --> 00:04:27,250
you save memory<font color="#E5E5E5"> by sharing the type</font>

110
00:04:24,039 --> 00:04:28,900
across objects and you<font color="#CCCCCC"> also allow</font>

111
00:04:27,250 --> 00:04:32,500
<font color="#CCCCCC">zatia n-- called</font><font color="#E5E5E5"> inline caching that</font>

112
00:04:28,900 --> 00:04:36,340
I'll<font color="#E5E5E5"> explain later on and in chakra we</font>

113
00:04:32,500 --> 00:04:37,720
have two main layout<font color="#CCCCCC"> the first most</font>

114
00:04:36,340 --> 00:04:40,000
standard one<font color="#CCCCCC"> is you create an empty</font>

115
00:04:37,720 --> 00:04:42,130
<font color="#E5E5E5">object you set property X property</font><font color="#CCCCCC"> Y if</font>

116
00:04:40,000 --> 00:04:44,830
you look in memory<font color="#CCCCCC"> you will basically</font>

117
00:04:42,130 --> 00:04:46,090
have<font color="#E5E5E5"> the virtual table pointer then the</font>

118
00:04:44,830 --> 00:04:48,729
type that I talked about and<font color="#E5E5E5"> basically</font>

119
00:04:46,090 --> 00:04:50,500
<font color="#E5E5E5">this</font><font color="#CCCCCC"> ox lots field which is basically a</font>

120
00:04:48,730 --> 00:04:52,150
pointer<font color="#CCCCCC"> that will point in memory where</font>

121
00:04:50,500 --> 00:04:53,500
your<font color="#E5E5E5"> property values will</font><font color="#CCCCCC"> be so here you</font>

122
00:04:52,150 --> 00:04:55,770
can<font color="#CCCCCC"> select</font><font color="#E5E5E5"> points two for one</font><font color="#CCCCCC"> for one</font>

123
00:04:53,500 --> 00:04:58,210
<font color="#CCCCCC">for one</font><font color="#E5E5E5"> and for two for two for two</font>

124
00:04:55,770 --> 00:05:01,030
you also have another<font color="#CCCCCC"> layout which is a</font>

125
00:04:58,210 --> 00:05:03,280
<font color="#E5E5E5">first color object so internally is</font>

126
00:05:01,030 --> 00:05:05,530
called object<font color="#E5E5E5"> header in line where</font>

127
00:05:03,280 --> 00:05:07,479
<font color="#E5E5E5">basically instead of using that extra</font>

128
00:05:05,530 --> 00:05:09,130
indirection they will store the property

129
00:05:07,480 --> 00:05:11,680
values<font color="#E5E5E5"> directly in</font><font color="#CCCCCC"> lighting inside the</font>

130
00:05:09,130 --> 00:05:14,409
object which is also<font color="#E5E5E5"> a trick that</font><font color="#CCCCCC"> you</font>

131
00:05:11,680 --> 00:05:16,750
find in other engines so basically

132
00:05:14,410 --> 00:05:18,280
property<font color="#CCCCCC"> access what it looks</font><font color="#E5E5E5"> like as I</font>

133
00:05:16,750 --> 00:05:20,980
said<font color="#CCCCCC"> the type is basically this magic</font>

134
00:05:18,280 --> 00:05:23,320
thing that is able to to tell you where

135
00:05:20,980 --> 00:05:25,150
your<font color="#E5E5E5"> property is so in chakra basically</font>

136
00:05:23,320 --> 00:05:27,460
a property name is represented as

137
00:05:25,150 --> 00:05:29,830
property ID<font color="#E5E5E5"> the type is basically</font><font color="#CCCCCC"> able</font>

138
00:05:27,460 --> 00:05:32,080
for<font color="#E5E5E5"> an object to map a property ID to an</font>

139
00:05:29,830 --> 00:05:33,729
<font color="#E5E5E5">index into the arc</font><font color="#CCCCCC"> slots array so</font>

140
00:05:32,080 --> 00:05:36,340
basically when<font color="#CCCCCC"> you fetch property</font><font color="#E5E5E5"> a dot</font>

141
00:05:33,729 --> 00:05:37,840
X as can be<font color="#E5E5E5"> seen on the</font><font color="#CCCCCC"> Left you</font>

142
00:05:36,340 --> 00:05:40,359
basically end<font color="#E5E5E5"> up with this call chain</font>

143
00:05:37,840 --> 00:05:42,219
and basically the typed is magically

144
00:05:40,360 --> 00:05:44,020
able to tell you<font color="#E5E5E5"> all this is at ox lots</font>

145
00:05:42,220 --> 00:05:48,820
at index<font color="#CCCCCC"> zero and it will</font><font color="#E5E5E5"> return</font><font color="#CCCCCC"> that</font>

146
00:05:44,020 --> 00:05:50,650
value<font color="#CCCCCC"> a few words about JavaScript</font>

147
00:05:48,820 --> 00:05:52,360
arrays<font color="#CCCCCC"> so interesting to know like in</font>

148
00:05:50,650 --> 00:05:54,250
the standard<font color="#E5E5E5"> Java tutorials only define</font>

149
00:05:52,360 --> 00:05:56,260
as an exotic object which have<font color="#E5E5E5"> a special</font>

150
00:05:54,250 --> 00:05:59,320
<font color="#CCCCCC">property called</font><font color="#E5E5E5"> length</font>

151
00:05:56,260 --> 00:06:01,840
all the engines basically have some

152
00:05:59,320 --> 00:06:04,210
different storage mechanism to<font color="#E5E5E5"> allow for</font>

153
00:06:01,840 --> 00:06:06,760
optimizations<font color="#E5E5E5"> chakra use is a segment</font>

154
00:06:04,210 --> 00:06:08,770
<font color="#CCCCCC">based implementation that</font><font color="#E5E5E5"> will see an</font>

155
00:06:06,760 --> 00:06:10,270
example<font color="#CCCCCC"> of on the</font><font color="#E5E5E5"> next slide and you</font>

156
00:06:08,770 --> 00:06:12,760
<font color="#CCCCCC">basically</font><font color="#E5E5E5"> have those three main</font><font color="#CCCCCC"> classes</font>

157
00:06:10,270 --> 00:06:14,950
to allow for storage optimization<font color="#CCCCCC"> the</font>

158
00:06:12,760 --> 00:06:16,780
first one javascript native<font color="#CCCCCC"> inter</font><font color="#E5E5E5"> a</font>

159
00:06:14,950 --> 00:06:18,669
basically<font color="#E5E5E5"> like everything will be stored</font>

160
00:06:16,780 --> 00:06:20,500
on<font color="#CCCCCC"> four byte</font><font color="#E5E5E5"> and the values will not</font><font color="#CCCCCC"> be</font>

161
00:06:18,669 --> 00:06:22,570
tagged<font color="#E5E5E5"> then you have native float array</font>

162
00:06:20,500 --> 00:06:26,470
and<font color="#E5E5E5"> javascript</font><font color="#CCCCCC"> array</font><font color="#E5E5E5"> where you can have</font>

163
00:06:22,570 --> 00:06:28,090
<font color="#E5E5E5">anything basically so - I like the</font>

164
00:06:26,470 --> 00:06:31,900
<font color="#E5E5E5">segment implementation like I have a</font>

165
00:06:28,090 --> 00:06:33,549
simple<font color="#E5E5E5"> square array</font><font color="#CCCCCC"> 1 2 3 in memory</font>

166
00:06:31,900 --> 00:06:36,190
basically<font color="#E5E5E5"> the object</font><font color="#CCCCCC"> will point to this</font>

167
00:06:33,550 --> 00:06:38,900
<font color="#E5E5E5">segment which has left basically says</font>

168
00:06:36,190 --> 00:06:41,630
with what<font color="#CCCCCC"> is the index on</font>

169
00:06:38,900 --> 00:06:43,909
on the left so it's zero here three

170
00:06:41,630 --> 00:06:45,980
elements<font color="#E5E5E5"> and the thing is allocated at</font>

171
00:06:43,910 --> 00:06:47,900
four to six<font color="#E5E5E5"> elements so that's what size</font>

172
00:06:45,980 --> 00:06:50,540
is and we can see that<font color="#CCCCCC"> next is zero</font>

173
00:06:47,900 --> 00:06:51,979
<font color="#E5E5E5">because we don't have a next segment now</font>

174
00:06:50,540 --> 00:06:53,510
if I<font color="#CCCCCC"> set the property to a</font><font color="#E5E5E5"> super high</font>

175
00:06:51,979 --> 00:06:55,400
index well<font color="#E5E5E5"> not super high but Rach</font>

176
00:06:53,510 --> 00:06:57,530
hundred<font color="#E5E5E5"> you probably don't want your</font>

177
00:06:55,400 --> 00:06:58,849
engine to allocate memory for like you

178
00:06:57,530 --> 00:07:01,159
<font color="#E5E5E5">know when you want</font><font color="#CCCCCC"> to stop</font><font color="#E5E5E5"> only four</font>

179
00:06:58,850 --> 00:07:02,990
elements you don't want to allocate<font color="#E5E5E5"> 100</font>

180
00:07:01,160 --> 00:07:04,580
times the size of<font color="#E5E5E5"> the elements that</font>

181
00:07:02,990 --> 00:07:05,750
you're trying to store<font color="#E5E5E5"> so track why use</font>

182
00:07:04,580 --> 00:07:07,609
<font color="#E5E5E5">this segment where basically it will</font>

183
00:07:05,750 --> 00:07:09,740
create a new segment where<font color="#E5E5E5"> the left</font>

184
00:07:07,610 --> 00:07:14,630
index will be 100<font color="#E5E5E5"> and then basically you</font>

185
00:07:09,740 --> 00:07:15,889
<font color="#E5E5E5">can chain segments like that so yeah</font>

186
00:07:14,630 --> 00:07:18,440
that's<font color="#E5E5E5"> it about the internals</font>

187
00:07:15,889 --> 00:07:21,110
<font color="#E5E5E5">it's rebreathe but that's all we we will</font>

188
00:07:18,440 --> 00:07:22,820
need<font color="#E5E5E5"> for other top going forward</font>

189
00:07:21,110 --> 00:07:25,250
so now we'll dive into<font color="#CCCCCC"> javascript JIT</font>

190
00:07:22,820 --> 00:07:27,229
compilation<font color="#CCCCCC"> and problematic associated</font>

191
00:07:25,250 --> 00:07:29,419
<font color="#E5E5E5">with it so the goal of JIT compilation</font>

192
00:07:27,229 --> 00:07:32,060
<font color="#E5E5E5">is to generate highly optimized machine</font>

193
00:07:29,419 --> 00:07:33,650
code of course the upside<font color="#E5E5E5"> to that is</font>

194
00:07:32,060 --> 00:07:35,389
that<font color="#CCCCCC"> you get much better running</font><font color="#E5E5E5"> speed</font>

195
00:07:33,650 --> 00:07:36,888
but you<font color="#CCCCCC"> have the problem of higher</font>

196
00:07:35,389 --> 00:07:38,660
<font color="#E5E5E5">startup time because compilation takes</font>

197
00:07:36,889 --> 00:07:40,039
time<font color="#E5E5E5"> and JavaScript also doesn't have</font>

198
00:07:38,660 --> 00:07:40,699
type<font color="#E5E5E5"> information so you have to deal</font>

199
00:07:40,039 --> 00:07:42,830
with<font color="#CCCCCC"> that</font><font color="#E5E5E5"> somehow</font>

200
00:07:40,699 --> 00:07:45,169
<font color="#E5E5E5">so in practice what you get is</font><font color="#CCCCCC"> you</font>

201
00:07:42,830 --> 00:07:47,240
<font color="#E5E5E5">basically your execution</font><font color="#CCCCCC"> starts in the</font>

202
00:07:45,169 --> 00:07:48,859
interpreter<font color="#E5E5E5"> and if something gets called</font>

203
00:07:47,240 --> 00:07:50,600
repeatedly so a function<font color="#CCCCCC"> it will be</font>

204
00:07:48,860 --> 00:07:52,340
basically scheduled to be shipped

205
00:07:50,600 --> 00:07:57,349
optimized<font color="#E5E5E5"> and compiled down to machine</font>

206
00:07:52,340 --> 00:07:59,599
code so we'll see with examples<font color="#CCCCCC"> I'll try</font>

207
00:07:57,349 --> 00:08:02,120
to explain<font color="#CCCCCC"> a</font><font color="#E5E5E5"> bit how</font><font color="#CCCCCC"> did compilation is</font>

208
00:07:59,599 --> 00:08:04,280
done so here we have a simple function

209
00:08:02,120 --> 00:08:06,650
<font color="#CCCCCC">that basically</font><font color="#E5E5E5"> gets two parameters and</font>

210
00:08:04,280 --> 00:08:10,159
does the addition<font color="#CCCCCC"> on the two and returns</font>

211
00:08:06,650 --> 00:08:12,080
<font color="#E5E5E5">that and I think</font><font color="#CCCCCC"> by now most of you have</font>

212
00:08:10,160 --> 00:08:14,450
<font color="#CCCCCC">seen some memes about</font><font color="#E5E5E5"> JavaScript</font>

213
00:08:12,080 --> 00:08:16,219
<font color="#E5E5E5">addition being a quite nasty if you look</font>

214
00:08:14,450 --> 00:08:18,800
at the standard this<font color="#E5E5E5"> is basically what</font>

215
00:08:16,220 --> 00:08:20,120
<font color="#CCCCCC">the standards say addition should be on</font>

216
00:08:18,800 --> 00:08:22,970
the right<font color="#E5E5E5"> so you see you have a lot of</font>

217
00:08:20,120 --> 00:08:25,310
stuff<font color="#CCCCCC"> and basically</font><font color="#E5E5E5"> the realization is</font>

218
00:08:22,970 --> 00:08:27,590
<font color="#E5E5E5">if we have this function addition and we</font>

219
00:08:25,310 --> 00:08:29,479
only call it with integer values<font color="#E5E5E5"> we</font>

220
00:08:27,590 --> 00:08:31,070
probably want something<font color="#E5E5E5"> that looks close</font>

221
00:08:29,479 --> 00:08:33,260
to what I have on the right which is

222
00:08:31,070 --> 00:08:35,299
assuming<font color="#E5E5E5"> the two</font><font color="#CCCCCC"> parameters are</font><font color="#E5E5E5"> in</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> DI</font>

223
00:08:33,260 --> 00:08:37,039
on our side we<font color="#CCCCCC"> just like add the two in</font>

224
00:08:35,299 --> 00:08:39,799
the return register and then we<font color="#E5E5E5"> written</font>

225
00:08:37,039 --> 00:08:41,088
<font color="#E5E5E5">so to assembly instruction but we don't</font>

226
00:08:39,799 --> 00:08:42,949
have type information<font color="#E5E5E5"> we don't have</font>

227
00:08:41,089 --> 00:08:46,160
anything that<font color="#E5E5E5"> tells us this is</font><font color="#CCCCCC"> going to</font>

228
00:08:42,950 --> 00:08:49,490
be integer values so the solution to

229
00:08:46,160 --> 00:08:50,930
<font color="#CCCCCC">that is called profiling and basically</font>

230
00:08:49,490 --> 00:08:52,730
whenever<font color="#E5E5E5"> you</font><font color="#CCCCCC"> run into the</font><font color="#E5E5E5"> interpreter</font>

231
00:08:50,930 --> 00:08:54,319
you will basically gather

232
00:08:52,730 --> 00:08:56,810
profile<font color="#CCCCCC"> information about the type of</font>

233
00:08:54,320 --> 00:08:58,700
parameters<font color="#CCCCCC"> and such</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> that will allow</font>

234
00:08:56,810 --> 00:09:01,250
you basically to do some optimization

235
00:08:58,700 --> 00:09:02,900
<font color="#E5E5E5">and the idea is we generate optimized</font>

236
00:09:01,250 --> 00:09:05,450
code based on what we profile so far

237
00:09:02,900 --> 00:09:07,510
when we<font color="#E5E5E5"> did compare the function so here</font>

238
00:09:05,450 --> 00:09:10,100
I have<font color="#E5E5E5"> I call my function in a loop</font>

239
00:09:07,510 --> 00:09:11,900
<font color="#E5E5E5">thousand</font><font color="#CCCCCC"> times I</font><font color="#E5E5E5"> only pass its integer</font>

240
00:09:10,100 --> 00:09:13,850
parameters<font color="#E5E5E5"> this variable I which is the</font>

241
00:09:11,900 --> 00:09:16,010
<font color="#E5E5E5">induction variable and an integer</font>

242
00:09:13,850 --> 00:09:18,230
constant<font color="#E5E5E5"> so basically the interpreter</font>

243
00:09:16,010 --> 00:09:20,360
will gather profiling information<font color="#CCCCCC"> which</font>

244
00:09:18,230 --> 00:09:21,950
is<font color="#CCCCCC"> all this is</font><font color="#E5E5E5"> integer parameter all the</font>

245
00:09:20,360 --> 00:09:23,810
time<font color="#CCCCCC"> I haven't</font><font color="#E5E5E5"> seen anything else</font><font color="#CCCCCC"> and</font>

246
00:09:21,950 --> 00:09:26,570
the idea is<font color="#CCCCCC"> that the JIT compiler</font><font color="#E5E5E5"> would</font>

247
00:09:23,810 --> 00:09:28,369
generate code that will first check<font color="#E5E5E5"> that</font>

248
00:09:26,570 --> 00:09:31,220
<font color="#E5E5E5">the things are in fact integer values</font>

249
00:09:28,370 --> 00:09:32,960
and if so then we can<font color="#E5E5E5"> generate super</font>

250
00:09:31,220 --> 00:09:36,730
optimized code based<font color="#E5E5E5"> on the fact that</font>

251
00:09:32,960 --> 00:09:39,650
this assumption<font color="#E5E5E5"> will basically be true</font>

252
00:09:36,730 --> 00:09:41,840
so here I have<font color="#E5E5E5"> another</font><font color="#CCCCCC"> example</font><font color="#E5E5E5"> to</font>

253
00:09:39,650 --> 00:09:44,030
<font color="#E5E5E5">introduce something I've talked about</font>

254
00:09:41,840 --> 00:09:45,560
<font color="#E5E5E5">were you previously so here I just have</font>

255
00:09:44,030 --> 00:09:47,569
a<font color="#CCCCCC"> simple function</font><font color="#E5E5E5"> called get X which</font>

256
00:09:45,560 --> 00:09:50,869
fetches<font color="#E5E5E5"> property X on the object that</font>

257
00:09:47,570 --> 00:09:53,120
you give it to and same<font color="#E5E5E5"> thing I</font>

258
00:09:50,870 --> 00:09:54,710
repeatedly call it in a loop with the

259
00:09:53,120 --> 00:09:56,390
same<font color="#E5E5E5"> scalar object so it will actually</font>

260
00:09:54,710 --> 00:09:57,800
be a different object internally but the

261
00:09:56,390 --> 00:10:00,260
layout<font color="#E5E5E5"> will be the same only one</font>

262
00:09:57,800 --> 00:10:02,990
property<font color="#E5E5E5"> X that will</font><font color="#CCCCCC"> be at</font><font color="#E5E5E5"> the same</font>

263
00:10:00,260 --> 00:10:04,850
offset<font color="#CCCCCC"> inside the object and the same</font>

264
00:10:02,990 --> 00:10:06,170
<font color="#CCCCCC">realization here is</font><font color="#E5E5E5"> that we don't want</font>

265
00:10:04,850 --> 00:10:08,030
<font color="#E5E5E5">to</font><font color="#CCCCCC"> actually compile</font><font color="#E5E5E5"> down the whole</font>

266
00:10:06,170 --> 00:10:09,740
object<font color="#CCCCCC"> lookup</font><font color="#E5E5E5"> you know looking through</font>

267
00:10:08,030 --> 00:10:11,209
the type where where<font color="#E5E5E5"> that property is</font>

268
00:10:09,740 --> 00:10:13,430
<font color="#E5E5E5">because then we don't</font><font color="#CCCCCC"> actually gain</font>

269
00:10:11,210 --> 00:10:15,370
anything from from the interpreter

270
00:10:13,430 --> 00:10:18,170
that's what the interpreter already does

271
00:10:15,370 --> 00:10:19,790
so the solution here<font color="#CCCCCC"> is once again</font><font color="#E5E5E5"> will</font>

272
00:10:18,170 --> 00:10:22,280
correct profile<font color="#CCCCCC"> information on the type</font>

273
00:10:19,790 --> 00:10:24,949
of the object<font color="#E5E5E5"> and we will assume that it</font>

274
00:10:22,280 --> 00:10:26,959
will stay stay like that<font color="#CCCCCC"> going</font><font color="#E5E5E5"> forward</font>

275
00:10:24,950 --> 00:10:28,400
<font color="#E5E5E5">and then we'll be able to</font><font color="#CCCCCC"> use direct</font>

276
00:10:26,960 --> 00:10:30,560
<font color="#E5E5E5">memory index and</font><font color="#CCCCCC"> this is what is called</font>

277
00:10:28,400 --> 00:10:32,329
inline caching and<font color="#E5E5E5"> if the assumption</font>

278
00:10:30,560 --> 00:10:36,109
does not hold will basically fall back

279
00:10:32,330 --> 00:10:38,180
<font color="#E5E5E5">into the interpreter so that takes</font><font color="#CCCCCC"> me to</font>

280
00:10:36,110 --> 00:10:40,070
introducing two key<font color="#E5E5E5"> concept</font><font color="#CCCCCC"> that are</font>

281
00:10:38,180 --> 00:10:42,319
used<font color="#E5E5E5"> in jatin jit compilation</font><font color="#CCCCCC"> the first</font>

282
00:10:40,070 --> 00:10:44,240
one is<font color="#CCCCCC"> so-called</font><font color="#E5E5E5"> slow path so basically</font>

283
00:10:42,320 --> 00:10:45,950
as I said the JIT will basically have to

284
00:10:44,240 --> 00:10:48,440
make<font color="#E5E5E5"> assumptions and check that these</font>

285
00:10:45,950 --> 00:10:50,210
assumptions<font color="#E5E5E5"> actually true and if</font>

286
00:10:48,440 --> 00:10:51,950
<font color="#E5E5E5">something is not true then the JIT</font>

287
00:10:50,210 --> 00:10:53,540
compare the JIT code might have to fall

288
00:10:51,950 --> 00:10:55,220
<font color="#E5E5E5">back into the interpreter</font><font color="#CCCCCC"> via something</font>

289
00:10:53,540 --> 00:10:56,689
<font color="#E5E5E5">that's called a slow path so the bad</font>

290
00:10:55,220 --> 00:10:58,880
<font color="#E5E5E5">news is that you get</font><font color="#CCCCCC"> a performance hit</font>

291
00:10:56,690 --> 00:11:00,890
for that but you<font color="#E5E5E5"> also have the good news</font>

292
00:10:58,880 --> 00:11:03,260
which is<font color="#E5E5E5"> the JIT code actually accounted</font>

293
00:11:00,890 --> 00:11:04,819
<font color="#CCCCCC">for that so sure for that operation</font><font color="#E5E5E5"> you</font>

294
00:11:03,260 --> 00:11:05,379
will run<font color="#E5E5E5"> slower because</font><font color="#CCCCCC"> you have to go</font>

295
00:11:04,820 --> 00:11:07,149
back<font color="#E5E5E5"> into</font>

296
00:11:05,379 --> 00:11:08,739
interpreter but you will<font color="#E5E5E5"> come back into</font>

297
00:11:07,149 --> 00:11:10,439
<font color="#E5E5E5">the</font><font color="#CCCCCC"> JIT function going forward so it</font>

298
00:11:08,739 --> 00:11:13,749
it's not too bad

299
00:11:10,439 --> 00:11:15,848
the other key concept is<font color="#CCCCCC"> is called</font>

300
00:11:13,749 --> 00:11:17,589
bailout and here basically<font color="#E5E5E5"> is</font><font color="#CCCCCC"> that</font>

301
00:11:15,849 --> 00:11:19,299
sometimes if you<font color="#E5E5E5"> have an assumption</font>

302
00:11:17,589 --> 00:11:20,829
that's<font color="#E5E5E5"> not true</font><font color="#CCCCCC"> the jet code is</font>

303
00:11:19,299 --> 00:11:22,779
completely<font color="#CCCCCC"> unusable so that would be</font>

304
00:11:20,829 --> 00:11:24,939
true<font color="#CCCCCC"> for example</font><font color="#E5E5E5"> if you prefer something</font>

305
00:11:22,779 --> 00:11:26,499
<font color="#E5E5E5">that takes an integer value</font><font color="#CCCCCC"> and all of a</font>

306
00:11:24,939 --> 00:11:28,929
<font color="#CCCCCC">sudden you give it to you</font><font color="#E5E5E5"> give it a</font>

307
00:11:26,499 --> 00:11:31,119
pointer<font color="#E5E5E5"> some you know IQ you will do</font>

308
00:11:28,929 --> 00:11:33,189
some tag checks<font color="#CCCCCC"> bits stuff that will</font>

309
00:11:31,119 --> 00:11:35,439
basically clobber the pointer so you

310
00:11:33,189 --> 00:11:38,409
will most likely<font color="#E5E5E5"> crash at</font><font color="#CCCCCC"> some</font><font color="#E5E5E5"> point so</font>

311
00:11:35,439 --> 00:11:40,269
in that case you just<font color="#CCCCCC"> have to you know</font>

312
00:11:38,409 --> 00:11:41,829
<font color="#E5E5E5">you just have to give up and say like I</font>

313
00:11:40,269 --> 00:11:43,659
can't deal<font color="#CCCCCC"> with</font><font color="#E5E5E5"> that and basically you</font>

314
00:11:41,829 --> 00:11:46,388
<font color="#E5E5E5">have to to run the rest of the function</font>

315
00:11:43,659 --> 00:11:47,649
<font color="#E5E5E5">inside the interpreter the big downside</font>

316
00:11:46,389 --> 00:11:49,839
<font color="#CCCCCC">here</font><font color="#E5E5E5"> is that you have a big performance</font>

317
00:11:47,649 --> 00:11:51,309
<font color="#E5E5E5">hit because bailing out is a non-trivial</font>

318
00:11:49,839 --> 00:11:53,829
process there are<font color="#E5E5E5"> a lot</font><font color="#CCCCCC"> of things to do</font>

319
00:11:51,309 --> 00:11:56,259
<font color="#E5E5E5">and to</font><font color="#CCCCCC"> do properly</font><font color="#E5E5E5"> and I guess the</font>

320
00:11:53,829 --> 00:11:57,488
upside<font color="#E5E5E5"> is that</font><font color="#CCCCCC"> you maybe never realized</font>

321
00:11:56,259 --> 00:11:59,409
that<font color="#E5E5E5"> this was actually going on inside</font>

322
00:11:57,489 --> 00:12:04,509
your engine<font color="#E5E5E5"> so it's pretty good</font>

323
00:11:59,409 --> 00:12:06,789
<font color="#E5E5E5">testament to the development</font><font color="#CCCCCC"> team so to</font>

324
00:12:04,509 --> 00:12:08,259
summarize<font color="#E5E5E5"> JIT compilation as I said</font><font color="#CCCCCC"> of</font>

325
00:12:06,789 --> 00:12:10,089
<font color="#E5E5E5">JavaScript will rely on profile</font>

326
00:12:08,259 --> 00:12:12,129
information<font color="#E5E5E5"> this</font><font color="#CCCCCC"> is basically what gives</font>

327
00:12:10,089 --> 00:12:14,169
you some kind<font color="#CCCCCC"> of type information</font><font color="#E5E5E5"> that</font>

328
00:12:12,129 --> 00:12:17,109
you collect during the<font color="#CCCCCC"> execution in</font><font color="#E5E5E5"> the</font>

329
00:12:14,169 --> 00:12:18,519
interpreter<font color="#CCCCCC"> highly optimized code will</font>

330
00:12:17,109 --> 00:12:22,479
be<font color="#CCCCCC"> generated based</font><font color="#E5E5E5"> on those assumptions</font>

331
00:12:18,519 --> 00:12:24,579
<font color="#E5E5E5">on that on that</font><font color="#CCCCCC"> information</font><font color="#E5E5E5"> and the key</font>

332
00:12:22,479 --> 00:12:25,959
takeaway is that your jet code has<font color="#CCCCCC"> to be</font>

333
00:12:24,579 --> 00:12:27,669
responsible<font color="#CCCCCC"> for checking that</font><font color="#E5E5E5"> these</font>

334
00:12:25,959 --> 00:12:29,919
these assumptions are actually true and

335
00:12:27,669 --> 00:12:32,228
be able<font color="#CCCCCC"> to</font><font color="#E5E5E5"> deal accordingly when they're</font>

336
00:12:29,919 --> 00:12:35,799
not and basically you<font color="#E5E5E5"> have problems when</font>

337
00:12:32,229 --> 00:12:37,659
you can trick the engine into<font color="#CCCCCC"> new like</font>

338
00:12:35,799 --> 00:12:39,549
very<font color="#CCCCCC"> there's some kind of assumption or</font>

339
00:12:37,659 --> 00:12:43,419
you know<font color="#E5E5E5"> bypass some checks and stuff</font>

340
00:12:39,549 --> 00:12:47,100
right<font color="#E5E5E5"> so now I'll talk specifically</font>

341
00:12:43,419 --> 00:12:47,100
about<font color="#E5E5E5"> chakras JIT compiler</font>

342
00:12:49,660 --> 00:12:55,370
so basically the<font color="#CCCCCC"> truck ratchet pipeline</font>

343
00:12:53,050 --> 00:12:56,449
<font color="#CCCCCC">you have an</font><font color="#E5E5E5"> interpreter as I said every</font>

344
00:12:55,370 --> 00:12:57,829
<font color="#E5E5E5">time you call</font><font color="#CCCCCC"> a function it will</font><font color="#E5E5E5"> keep</font>

345
00:12:56,449 --> 00:12:59,630
<font color="#E5E5E5">track</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> harm how many times that</font>

346
00:12:57,829 --> 00:13:01,550
<font color="#E5E5E5">function</font><font color="#CCCCCC"> has been called this is a</font>

347
00:12:59,630 --> 00:13:03,230
simple counter<font color="#CCCCCC"> passed a</font><font color="#E5E5E5"> certain</font>

348
00:13:01,550 --> 00:13:05,089
threshold<font color="#CCCCCC"> basically that the interpreter</font>

349
00:13:03,230 --> 00:13:07,519
<font color="#CCCCCC">will say oh this is being this is being</font>

350
00:13:05,089 --> 00:13:08,959
<font color="#E5E5E5">called a lot let's cheat compare it so</font>

351
00:13:07,519 --> 00:13:10,699
it will basically<font color="#CCCCCC"> change the entry point</font>

352
00:13:08,959 --> 00:13:13,369
<font color="#CCCCCC">to something</font><font color="#E5E5E5"> that will a started</font>

353
00:13:10,699 --> 00:13:15,290
compilation<font color="#CCCCCC"> what happens in edge is</font><font color="#E5E5E5"> that</font>

354
00:13:13,370 --> 00:13:17,810
actually you have<font color="#E5E5E5"> added the JIT compiler</font>

355
00:13:15,290 --> 00:13:19,699
runs out of<font color="#E5E5E5"> process this is very nice so</font>

356
00:13:17,810 --> 00:13:23,029
that the renderer process can benefit

357
00:13:19,699 --> 00:13:25,189
from<font color="#E5E5E5"> arbitrary code guard if you want to</font>

358
00:13:23,029 --> 00:13:27,860
know more<font color="#E5E5E5"> about</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> check sauce</font><font color="#CCCCCC"> talk at</font>

359
00:13:25,190 --> 00:13:29,720
<font color="#E5E5E5">c3 he talks about it briefly and when</font>

360
00:13:27,860 --> 00:13:31,310
<font color="#CCCCCC">cogeneration</font><font color="#E5E5E5"> is done basically you</font>

361
00:13:29,720 --> 00:13:32,810
change the<font color="#E5E5E5"> entry</font><font color="#CCCCCC"> point</font><font color="#E5E5E5"> to the native</font>

362
00:13:31,310 --> 00:13:33,888
code<font color="#E5E5E5"> address so next the</font><font color="#CCCCCC"> next time you</font>

363
00:13:32,810 --> 00:13:38,170
will<font color="#E5E5E5"> actually call the function you will</font>

364
00:13:33,889 --> 00:13:41,089
just jump to<font color="#CCCCCC"> the JIT G generated code</font>

365
00:13:38,170 --> 00:13:43,099
<font color="#CCCCCC">chakra is a two-tier JIT compiler the</font>

366
00:13:41,089 --> 00:13:45,529
first one is called simple JIT<font color="#E5E5E5"> second</font>

367
00:13:43,100 --> 00:13:47,149
one<font color="#E5E5E5"> is called Foldit will solely focus</font>

368
00:13:45,529 --> 00:13:48,709
unfolded because this is the one that

369
00:13:47,149 --> 00:13:49,910
does<font color="#E5E5E5"> the most</font><font color="#CCCCCC"> optimizations</font><font color="#E5E5E5"> so it's the</font>

370
00:13:48,709 --> 00:13:52,430
most<font color="#E5E5E5"> interesting one as a security</font>

371
00:13:49,910 --> 00:13:54,889
<font color="#CCCCCC">researcher</font><font color="#E5E5E5"> it basically operates on the</font>

372
00:13:52,430 --> 00:13:57,319
CFG<font color="#E5E5E5"> and</font><font color="#CCCCCC"> a custom intermediate</font>

373
00:13:54,889 --> 00:14:00,170
representation<font color="#E5E5E5"> that's being generated</font>

374
00:13:57,319 --> 00:14:03,290
<font color="#CCCCCC">from the</font><font color="#E5E5E5"> bytecode so it's not uncommon</font>

375
00:14:00,170 --> 00:14:05,089
<font color="#CCCCCC">that the JIT compiler will actually</font>

376
00:14:03,290 --> 00:14:06,290
<font color="#E5E5E5">transpile the by the</font><font color="#CCCCCC"> bytecode to</font>

377
00:14:05,089 --> 00:14:07,880
<font color="#E5E5E5">something that's more suited for JIT</font>

378
00:14:06,290 --> 00:14:10,639
compilation<font color="#E5E5E5"> that's because the</font><font color="#CCCCCC"> bytecode</font>

379
00:14:07,880 --> 00:14:12,230
is of course optimized for the for the

380
00:14:10,639 --> 00:14:14,269
interpreter which might<font color="#CCCCCC"> not be</font><font color="#E5E5E5"> the best</font>

381
00:14:12,230 --> 00:14:16,699
<font color="#E5E5E5">thing for</font><font color="#CCCCCC"> the JIT compiler</font><font color="#E5E5E5"> so the main</font>

382
00:14:14,269 --> 00:14:18,260
steps of<font color="#CCCCCC"> compilation in chakra you baste</font>

383
00:14:16,699 --> 00:14:20,060
first off you build the intermediate

384
00:14:18,260 --> 00:14:22,310
representation from the<font color="#E5E5E5"> bytecode</font><font color="#CCCCCC"> you</font>

385
00:14:20,060 --> 00:14:24,050
have an<font color="#E5E5E5"> inline phase</font><font color="#CCCCCC"> the reason it's</font>

386
00:14:22,310 --> 00:14:25,880
done so early is<font color="#CCCCCC"> that in</font><font color="#E5E5E5"> lining stuff</font>

387
00:14:24,050 --> 00:14:27,260
allows for the<font color="#E5E5E5"> optimization so if you</font>

388
00:14:25,880 --> 00:14:29,260
look at<font color="#CCCCCC"> other</font><font color="#E5E5E5"> jet engines you will see</font>

389
00:14:27,260 --> 00:14:31,610
that<font color="#CCCCCC"> inlining happens</font><font color="#E5E5E5"> pretty early on</font>

390
00:14:29,260 --> 00:14:34,670
<font color="#E5E5E5">then you have this flow graph build</font>

391
00:14:31,610 --> 00:14:36,439
phase<font color="#E5E5E5"> basically</font><font color="#CCCCCC"> build</font><font color="#E5E5E5"> the CFG and then</font>

392
00:14:34,670 --> 00:14:39,050
you have this global optimizer phase

393
00:14:36,439 --> 00:14:39,949
<font color="#CCCCCC">shorteners global phase which is</font>

394
00:14:39,050 --> 00:14:40,519
basically where most of the magic

395
00:14:39,949 --> 00:14:44,300
<font color="#E5E5E5">happens</font>

396
00:14:40,519 --> 00:14:46,490
<font color="#E5E5E5">and we'll talk about that in details</font>

397
00:14:44,300 --> 00:14:49,729
<font color="#E5E5E5">going forward</font><font color="#CCCCCC"> and and then</font><font color="#E5E5E5"> that that's</font>

398
00:14:46,490 --> 00:14:52,220
it for what is architecture<font color="#E5E5E5"> independent</font>

399
00:14:49,730 --> 00:14:53,540
<font color="#E5E5E5">going forward everything</font><font color="#CCCCCC"> is kind</font><font color="#E5E5E5"> of</font><font color="#CCCCCC"> mesh</font>

400
00:14:52,220 --> 00:14:55,910
<font color="#CCCCCC">independent so like the reward failure</font>

401
00:14:53,540 --> 00:14:57,800
basically basically lowers<font color="#E5E5E5"> the</font><font color="#CCCCCC"> IR</font><font color="#E5E5E5"> to</font>

402
00:14:55,910 --> 00:15:00,050
machine dependent<font color="#CCCCCC"> operation and then you</font>

403
00:14:57,800 --> 00:15:01,819
go lower and<font color="#CCCCCC"> lower</font><font color="#E5E5E5"> up to the point where</font>

404
00:15:00,050 --> 00:15:02,800
you<font color="#CCCCCC"> actually write instructions to</font>

405
00:15:01,819 --> 00:15:05,449
memory

406
00:15:02,800 --> 00:15:07,280
so<font color="#E5E5E5"> I said the globe</font><font color="#CCCCCC"> up phase is what</font>

407
00:15:05,450 --> 00:15:09,890
<font color="#E5E5E5">interests us the most especially to</font>

408
00:15:07,280 --> 00:15:14,120
<font color="#E5E5E5">forge it one which we'll talk</font><font color="#CCCCCC"> about</font><font color="#E5E5E5"> in</font>

409
00:15:09,890 --> 00:15:15,800
details now so so I I have<font color="#CCCCCC"> two example</font>

410
00:15:14,120 --> 00:15:17,090
to show<font color="#E5E5E5"> you how it looks like</font><font color="#CCCCCC"> I realized</font>

411
00:15:15,800 --> 00:15:18,500
this morning<font color="#E5E5E5"> that if you are in the back</font>

412
00:15:17,090 --> 00:15:20,810
it might be a bit hard<font color="#E5E5E5"> to read</font>

413
00:15:18,500 --> 00:15:22,670
especially<font color="#CCCCCC"> at the</font><font color="#E5E5E5"> bottom so you'll have</font>

414
00:15:20,810 --> 00:15:25,640
to<font color="#E5E5E5"> take my word and hope that</font><font color="#CCCCCC"> I don't</font>

415
00:15:22,670 --> 00:15:28,219
<font color="#E5E5E5">say anything stupid so here I'm taking</font>

416
00:15:25,640 --> 00:15:29,540
<font color="#CCCCCC">the same</font><font color="#E5E5E5"> example that</font><font color="#CCCCCC"> I had previously</font>

417
00:15:28,220 --> 00:15:32,030
which is like a<font color="#E5E5E5"> function that does a</font>

418
00:15:29,540 --> 00:15:33,920
simple<font color="#E5E5E5"> addition of two parameters x and</font>

419
00:15:32,030 --> 00:15:35,209
y and<font color="#E5E5E5"> I keep calling</font><font color="#CCCCCC"> it with integer</font>

420
00:15:33,920 --> 00:15:37,910
values so at some<font color="#E5E5E5"> point</font><font color="#CCCCCC"> will be did</font>

421
00:15:35,210 --> 00:15:39,830
<font color="#CCCCCC">compile</font><font color="#E5E5E5"> and now will basically look at</font>

422
00:15:37,910 --> 00:15:41,240
<font color="#CCCCCC">the the assembly code that's generated</font>

423
00:15:39,830 --> 00:15:42,500
so here I have<font color="#E5E5E5"> the assembly code</font>

424
00:15:41,240 --> 00:15:44,750
<font color="#E5E5E5">something that you can do from the</font>

425
00:15:42,500 --> 00:15:46,910
chakra<font color="#E5E5E5"> from a build chakra binary it's</font>

426
00:15:44,750 --> 00:15:48,770
some kind<font color="#E5E5E5"> of</font><font color="#CCCCCC"> high-level</font><font color="#E5E5E5"> assembly so you</font>

427
00:15:46,910 --> 00:15:51,530
won't see a lot<font color="#CCCCCC"> of like registers and</font>

428
00:15:48,770 --> 00:15:53,930
stuff you will see like this<font color="#E5E5E5"> symbol s s</font>

429
00:15:51,530 --> 00:15:55,640
and some integer<font color="#E5E5E5"> so that gives you</font><font color="#CCCCCC"> some</font>

430
00:15:53,930 --> 00:15:57,500
kind<font color="#CCCCCC"> of like high-level</font><font color="#E5E5E5"> assembly that</font>

431
00:15:55,640 --> 00:15:59,689
you can look at<font color="#E5E5E5"> to</font><font color="#CCCCCC"> see what's going on</font>

432
00:15:57,500 --> 00:16:01,130
so here highlighted<font color="#E5E5E5"> in red I have like</font>

433
00:15:59,690 --> 00:16:02,270
the intermediate representation of the

434
00:16:01,130 --> 00:16:04,580
instruction<font color="#CCCCCC"> that</font><font color="#E5E5E5"> we are currently</font>

435
00:16:02,270 --> 00:16:07,340
<font color="#E5E5E5">looking at</font><font color="#CCCCCC"> we can</font><font color="#E5E5E5"> see that it does</font>

436
00:16:04,580 --> 00:16:09,650
<font color="#CCCCCC">basically something s0 equals</font><font color="#E5E5E5"> add a of</font>

437
00:16:07,340 --> 00:16:11,330
s2 and s3 and it looks<font color="#E5E5E5"> pretty much like</font>

438
00:16:09,650 --> 00:16:13,490
<font color="#CCCCCC">what we would expect right in your</font>

439
00:16:11,330 --> 00:16:15,620
simple<font color="#E5E5E5"> addition s0</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> the symbol for the</font>

440
00:16:13,490 --> 00:16:19,310
return value s 2 and s 3 I like the

441
00:16:15,620 --> 00:16:21,200
parameters<font color="#E5E5E5"> so nothing too crazy here the</font>

442
00:16:19,310 --> 00:16:23,420
<font color="#CCCCCC">interesting thing to see though is that</font>

443
00:16:21,200 --> 00:16:25,760
in<font color="#E5E5E5"> between brackets</font><font color="#CCCCCC"> we have</font><font color="#E5E5E5"> something</font>

444
00:16:23,420 --> 00:16:28,010
that reads<font color="#E5E5E5"> likely can be tagged value</font>

445
00:16:25,760 --> 00:16:31,010
<font color="#CCCCCC">int and this is basically our profiling</font>

446
00:16:28,010 --> 00:16:32,780
<font color="#CCCCCC">information like the JIT compiler beta I</font>

447
00:16:31,010 --> 00:16:34,970
<font color="#CCCCCC">notice</font><font color="#E5E5E5"> the thing saying at this point</font>

448
00:16:32,780 --> 00:16:36,620
<font color="#E5E5E5">this thing can likely be a tag value of</font>

449
00:16:34,970 --> 00:16:40,310
type integer<font color="#E5E5E5"> because this is what the</font>

450
00:16:36,620 --> 00:16:43,040
profiler<font color="#CCCCCC"> tells me so the first thing it</font>

451
00:16:40,310 --> 00:16:44,630
does<font color="#E5E5E5"> is this the short sequence of</font>

452
00:16:43,040 --> 00:16:47,420
assembly instruction<font color="#E5E5E5"> basically checks</font>

453
00:16:44,630 --> 00:16:48,950
<font color="#E5E5E5">that both x and y</font><font color="#CCCCCC"> are integers the way</font>

454
00:16:47,420 --> 00:16:51,500
it does that is<font color="#E5E5E5"> that if you recall from</font>

455
00:16:48,950 --> 00:16:53,360
the<font color="#CCCCCC"> first slide integers will be</font>

456
00:16:51,500 --> 00:16:55,850
represented<font color="#CCCCCC"> with the</font><font color="#E5E5E5"> 40s which</font><font color="#CCCCCC"> set so</font>

457
00:16:53,360 --> 00:16:58,850
it's just like<font color="#E5E5E5"> shift</font><font color="#CCCCCC"> rights shifts right</font>

458
00:16:55,850 --> 00:17:00,440
the two<font color="#E5E5E5"> values</font><font color="#CCCCCC"> hold</font><font color="#E5E5E5"> them together and</font>

459
00:16:58,850 --> 00:17:03,530
basically<font color="#E5E5E5"> compares them</font><font color="#CCCCCC"> to this constant</font>

460
00:17:00,440 --> 00:17:05,240
<font color="#CCCCCC">x 1 0 0 0 1 so it's a cute optimization</font>

461
00:17:03,530 --> 00:17:09,980
to check that both<font color="#E5E5E5"> I integer at the same</font>

462
00:17:05,240 --> 00:17:11,510
time and if that<font color="#E5E5E5"> thing</font><font color="#CCCCCC"> doesn't</font><font color="#E5E5E5"> succeed</font>

463
00:17:09,980 --> 00:17:13,339
<font color="#CCCCCC">so I don't</font><font color="#E5E5E5"> have to jump I write it</font>

464
00:17:11,510 --> 00:17:15,950
that's a bit unfortunate<font color="#E5E5E5"> but you can see</font>

465
00:17:13,339 --> 00:17:17,869
that jumps to<font color="#E5E5E5"> this label</font><font color="#CCCCCC"> l4</font>

466
00:17:15,950 --> 00:17:20,150
which is<font color="#E5E5E5"> referenced felt known as well</font>

467
00:17:17,869 --> 00:17:22,159
<font color="#CCCCCC">and here in this label l4 we</font><font color="#E5E5E5"> basically</font>

468
00:17:20,150 --> 00:17:23,960
that there's a bunch of instruction but

469
00:17:22,160 --> 00:17:26,780
<font color="#CCCCCC">the interesting one is at the bottom it</font>

470
00:17:23,960 --> 00:17:28,520
does like move up at<font color="#E5E5E5"> full and called</font>

471
00:17:26,780 --> 00:17:30,280
<font color="#E5E5E5">that register and</font><font color="#CCCCCC"> that's basically the</font>

472
00:17:28,520 --> 00:17:33,470
slow path I<font color="#CCCCCC"> talked I</font><font color="#E5E5E5"> told you about</font>

473
00:17:30,280 --> 00:17:35,180
<font color="#E5E5E5">previously we are basically we are not</font>

474
00:17:33,470 --> 00:17:37,040
<font color="#CCCCCC">dealing with</font><font color="#E5E5E5"> tagged integers so the</font>

475
00:17:35,180 --> 00:17:38,630
digit<font color="#E5E5E5"> optimized code that we generated</font>

476
00:17:37,040 --> 00:17:40,250
will actually be wrong<font color="#CCCCCC"> and we cannot use</font>

477
00:17:38,630 --> 00:17:42,140
<font color="#CCCCCC">it</font><font color="#E5E5E5"> so we have to go back into the</font>

478
00:17:40,250 --> 00:17:45,920
interpreter<font color="#E5E5E5"> which will do like the whole</font>

479
00:17:42,140 --> 00:17:47,270
<font color="#E5E5E5">addition logic and here we have the code</font>

480
00:17:45,920 --> 00:17:48,650
<font color="#E5E5E5">if the</font><font color="#CCCCCC"> assumption actually</font><font color="#E5E5E5"> was true</font>

481
00:17:47,270 --> 00:17:51,470
which is that<font color="#CCCCCC"> the two things actually</font>

482
00:17:48,650 --> 00:17:54,260
integer and we<font color="#E5E5E5"> consider</font><font color="#CCCCCC"> ice a</font><font color="#E5E5E5"> simple</font><font color="#CCCCCC"> add</font>

483
00:17:51,470 --> 00:17:56,180
instruction in assembly and check for

484
00:17:54,260 --> 00:17:58,940
<font color="#E5E5E5">overflow</font><font color="#CCCCCC"> because everything is you</font><font color="#E5E5E5"> know</font>

485
00:17:56,180 --> 00:18:01,610
within the<font color="#E5E5E5"> 32-bit boundary and then we</font>

486
00:17:58,940 --> 00:18:04,340
just<font color="#CCCCCC"> set the tag bit again and that's</font><font color="#E5E5E5"> it</font>

487
00:18:01,610 --> 00:18:06,050
we've<font color="#CCCCCC"> done our</font><font color="#E5E5E5"> addition so you take away</font>

488
00:18:04,340 --> 00:18:07,879
here<font color="#E5E5E5"> is</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> basically if the assumption</font>

489
00:18:06,050 --> 00:18:09,470
actually<font color="#E5E5E5"> was true that we</font><font color="#CCCCCC"> are</font><font color="#E5E5E5"> going to</font>

490
00:18:07,880 --> 00:18:10,760
deal<font color="#CCCCCC"> with integer parameter</font><font color="#E5E5E5"> we don't</font>

491
00:18:09,470 --> 00:18:12,920
actually<font color="#E5E5E5"> run that</font><font color="#CCCCCC"> menu</font><font color="#E5E5E5"> assembly</font>

492
00:18:10,760 --> 00:18:14,900
instruction like<font color="#E5E5E5"> seven or eight give or</font>

493
00:18:12,920 --> 00:18:16,490
<font color="#E5E5E5">take</font><font color="#CCCCCC"> maybe ten so that's that's</font><font color="#E5E5E5"> pretty</font>

494
00:18:14,900 --> 00:18:20,630
fast<font color="#E5E5E5"> and that's how you get basically</font>

495
00:18:16,490 --> 00:18:22,910
fast code inside<font color="#E5E5E5"> the</font><font color="#CCCCCC"> browser so I have</font>

496
00:18:20,630 --> 00:18:24,590
<font color="#E5E5E5">another example here same thing it does</font>

497
00:18:22,910 --> 00:18:26,690
the addition<font color="#E5E5E5"> but this time it will</font>

498
00:18:24,590 --> 00:18:28,399
actually add<font color="#E5E5E5"> to object properties</font>

499
00:18:26,690 --> 00:18:30,320
<font color="#CCCCCC">together so we've seen the addition now</font>

500
00:18:28,400 --> 00:18:31,850
now I want<font color="#CCCCCC"> to I like to know property</font>

501
00:18:30,320 --> 00:18:34,550
<font color="#CCCCCC">access how it looks like in chakra when</font>

502
00:18:31,850 --> 00:18:36,860
<font color="#E5E5E5">it's optimized so once again</font><font color="#CCCCCC"> add</font><font color="#E5E5E5"> this</font>

503
00:18:34,550 --> 00:18:38,210
<font color="#E5E5E5">function and I only call it with one</font>

504
00:18:36,860 --> 00:18:43,399
type of object which is this color

505
00:18:38,210 --> 00:18:45,890
object with<font color="#E5E5E5"> X&Y properties so the</font>

506
00:18:43,400 --> 00:18:47,840
profiler will only see that one type and

507
00:18:45,890 --> 00:18:50,780
<font color="#E5E5E5">the JIT compiler will optimize the</font>

508
00:18:47,840 --> 00:18:52,850
function for<font color="#CCCCCC"> that</font><font color="#E5E5E5"> particular type so now</font>

509
00:18:50,780 --> 00:18:54,379
let's see how<font color="#E5E5E5"> it looks</font><font color="#CCCCCC"> like so basically</font>

510
00:18:52,850 --> 00:18:55,639
<font color="#E5E5E5">same thing the first thing we do is we</font>

511
00:18:54,380 --> 00:18:58,100
<font color="#E5E5E5">check if we're actually dealing</font><font color="#CCCCCC"> with a</font>

512
00:18:55,640 --> 00:19:00,110
tag value or not<font color="#CCCCCC"> so if any of the upper</font>

513
00:18:58,100 --> 00:19:02,510
48 bits are set we are<font color="#E5E5E5"> doing with tag</font>

514
00:19:00,110 --> 00:19:05,300
<font color="#E5E5E5">value and since our code is optimized</font>

515
00:19:02,510 --> 00:19:06,920
for pointer<font color="#E5E5E5"> we</font><font color="#CCCCCC"> absolutely you know we</font>

516
00:19:05,300 --> 00:19:09,110
have to<font color="#E5E5E5"> bail</font><font color="#CCCCCC"> out so this</font><font color="#E5E5E5"> is the thing</font>

517
00:19:06,920 --> 00:19:12,020
<font color="#CCCCCC">you see basically</font><font color="#E5E5E5"> shifts the value right</font>

518
00:19:09,110 --> 00:19:13,909
by 48 if the thing<font color="#CCCCCC"> is zero we can</font><font color="#E5E5E5"> go</font>

519
00:19:12,020 --> 00:19:15,620
forward<font color="#E5E5E5"> but if it's not then</font><font color="#CCCCCC"> we call</font>

520
00:19:13,910 --> 00:19:17,210
save all registers in beta<font color="#E5E5E5"> because the</font>

521
00:19:15,620 --> 00:19:18,500
code will expect<font color="#CCCCCC"> a pointer and you give</font>

522
00:19:17,210 --> 00:19:20,960
it<font color="#E5E5E5"> something that's not a valid</font><font color="#CCCCCC"> address</font>

523
00:19:18,500 --> 00:19:23,150
so I mean you're<font color="#E5E5E5"> going to crash and</font><font color="#CCCCCC"> we</font>

524
00:19:20,960 --> 00:19:25,680
want to avoid<font color="#E5E5E5"> that of course</font>

525
00:19:23,150 --> 00:19:27,360
now the interesting thing<font color="#E5E5E5"> to look at is</font>

526
00:19:25,680 --> 00:19:29,130
<font color="#CCCCCC">that initially the thing is marked as</font>

527
00:19:27,360 --> 00:19:30,510
<font color="#CCCCCC">lucky</font><font color="#E5E5E5"> can be tagged value object which</font>

528
00:19:29,130 --> 00:19:32,160
is why I talked<font color="#CCCCCC"> about</font><font color="#E5E5E5"> previously the</font>

529
00:19:30,510 --> 00:19:34,800
<font color="#E5E5E5">profiling information at this stage</font>

530
00:19:32,160 --> 00:19:36,480
<font color="#CCCCCC">digit as some hint about what the</font>

531
00:19:34,800 --> 00:19:38,129
variable could<font color="#E5E5E5"> be which is like it's</font>

532
00:19:36,480 --> 00:19:39,930
<font color="#E5E5E5">more like</font><font color="#CCCCCC"> you know it can be an object</font>

533
00:19:38,130 --> 00:19:41,730
<font color="#E5E5E5">but we don't have any guarantee because</font>

534
00:19:39,930 --> 00:19:44,070
<font color="#E5E5E5">we didn't do any check on it</font><font color="#CCCCCC"> but now</font>

535
00:19:41,730 --> 00:19:46,140
<font color="#CCCCCC">that we that we reach that</font><font color="#E5E5E5"> instruction</font>

536
00:19:44,070 --> 00:19:47,550
we know that like the thing we<font color="#CCCCCC"> just did</font>

537
00:19:46,140 --> 00:19:50,160
was basically checking<font color="#E5E5E5"> that the thing is</font>

538
00:19:47,550 --> 00:19:51,990
an object or not<font color="#E5E5E5"> or no checking if it's</font>

539
00:19:50,160 --> 00:19:53,550
a tag value to see if it's a pointer<font color="#E5E5E5"> or</font>

540
00:19:51,990 --> 00:19:55,440
not<font color="#E5E5E5"> and here we can see</font><font color="#CCCCCC"> that the symbol</font>

541
00:19:53,550 --> 00:19:57,600
information has basically been updated

542
00:19:55,440 --> 00:19:59,490
<font color="#E5E5E5">so the thing</font><font color="#CCCCCC"> is not</font><font color="#E5E5E5"> fact as likely can</font>

543
00:19:57,600 --> 00:20:00,899
be time value<font color="#CCCCCC"> anymore it's</font><font color="#E5E5E5"> not as being</font>

544
00:19:59,490 --> 00:20:04,530
likely object because we know we<font color="#E5E5E5"> are</font>

545
00:20:00,900 --> 00:20:05,970
dealing<font color="#CCCCCC"> with pointer going forward so</font>

546
00:20:04,530 --> 00:20:07,950
now the next<font color="#CCCCCC"> thing we do is basically a</font>

547
00:20:05,970 --> 00:20:11,100
<font color="#E5E5E5">check to see if</font><font color="#CCCCCC"> we</font><font color="#E5E5E5"> are</font><font color="#CCCCCC"> dealing with</font><font color="#E5E5E5"> the</font>

548
00:20:07,950 --> 00:20:14,970
type<font color="#E5E5E5"> we profile during</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> Prophet the</font>

549
00:20:11,100 --> 00:20:17,520
profiling<font color="#E5E5E5"> phase and once again we have a</font>

550
00:20:14,970 --> 00:20:19,440
slow path<font color="#CCCCCC"> if the thing</font><font color="#E5E5E5"> if we</font><font color="#CCCCCC"> are not</font>

551
00:20:17,520 --> 00:20:21,389
<font color="#E5E5E5">dealing with the type we</font><font color="#CCCCCC"> profile maybe</font>

552
00:20:19,440 --> 00:20:23,490
that type for some reason is a different

553
00:20:21,390 --> 00:20:24,960
type but has the<font color="#E5E5E5"> same exact layout so in</font>

554
00:20:23,490 --> 00:20:26,700
which<font color="#CCCCCC"> case the JIT code will be varied</font>

555
00:20:24,960 --> 00:20:28,620
<font color="#CCCCCC">so this is what you see here it will</font>

556
00:20:26,700 --> 00:20:30,690
<font color="#E5E5E5">call</font><font color="#CCCCCC"> something</font><font color="#E5E5E5"> called check if type is</font>

557
00:20:28,620 --> 00:20:32,189
<font color="#E5E5E5">equivalent if that thing returns true</font>

558
00:20:30,690 --> 00:20:34,650
<font color="#CCCCCC">we'll actually go forward</font><font color="#E5E5E5"> in JIT code</font>

559
00:20:32,190 --> 00:20:36,450
<font color="#E5E5E5">but if not we'll actually bail out</font>

560
00:20:34,650 --> 00:20:40,050
because then our code is just<font color="#E5E5E5"> garbage</font>

561
00:20:36,450 --> 00:20:42,030
<font color="#E5E5E5">and</font><font color="#CCCCCC"> we'll do bad things and now we</font><font color="#E5E5E5"> get</font>

562
00:20:40,050 --> 00:20:43,290
to<font color="#CCCCCC"> the actual property access and here</font>

563
00:20:42,030 --> 00:20:45,180
<font color="#E5E5E5">this is what I talked about inline</font>

564
00:20:43,290 --> 00:20:47,310
caching<font color="#E5E5E5"> you can see that so this is</font>

565
00:20:45,180 --> 00:20:49,650
<font color="#E5E5E5">basically</font><font color="#CCCCCC"> or</font><font color="#E5E5E5"> dot X that you're looking</font>

566
00:20:47,310 --> 00:20:51,840
at and you<font color="#CCCCCC"> can see that just does a</font>

567
00:20:49,650 --> 00:20:53,490
straight memory access at offset<font color="#E5E5E5"> 16 of</font>

568
00:20:51,840 --> 00:20:56,189
the pointer<font color="#E5E5E5"> because this is where</font>

569
00:20:53,490 --> 00:20:57,750
<font color="#E5E5E5">property X will be and now we have the</font>

570
00:20:56,190 --> 00:20:59,580
<font color="#E5E5E5">access of property</font><font color="#CCCCCC"> in wire</font>

571
00:20:57,750 --> 00:21:01,530
and here we can see<font color="#E5E5E5"> that same</font><font color="#CCCCCC"> thing it</font>

572
00:20:59,580 --> 00:21:03,000
does an access<font color="#E5E5E5"> that offset 24 because</font>

573
00:21:01,530 --> 00:21:05,790
this is where property<font color="#CCCCCC"> Y will</font><font color="#E5E5E5"> be</font>

574
00:21:03,000 --> 00:21:07,560
interesting interesting<font color="#CCCCCC"> thing to note is</font>

575
00:21:05,790 --> 00:21:09,120
that we don't redo the checks<font color="#E5E5E5"> that we</font>

576
00:21:07,560 --> 00:21:11,129
just did because<font color="#CCCCCC"> we know that in between</font>

577
00:21:09,120 --> 00:21:13,800
<font color="#E5E5E5">property</font><font color="#CCCCCC"> access of X the property access</font>

578
00:21:11,130 --> 00:21:15,000
of Y then the the<font color="#CCCCCC"> object hasn't changed</font>

579
00:21:13,800 --> 00:21:18,870
so<font color="#CCCCCC"> we don't</font><font color="#E5E5E5"> have to redo the checks</font>

580
00:21:15,000 --> 00:21:20,670
again<font color="#E5E5E5"> so I hope it shed some light on</font>

581
00:21:18,870 --> 00:21:22,260
<font color="#E5E5E5">some</font><font color="#CCCCCC"> like optimization</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> I've done</font><font color="#E5E5E5"> in</font>

582
00:21:20,670 --> 00:21:24,740
<font color="#E5E5E5">the thing now I'll try to explain a bit</font>

583
00:21:22,260 --> 00:21:26,850
<font color="#CCCCCC">how chakra is able to do</font><font color="#E5E5E5"> all that magic</font>

584
00:21:24,740 --> 00:21:27,690
<font color="#E5E5E5">so as I said the magic happens in the</font>

585
00:21:26,850 --> 00:21:30,360
<font color="#E5E5E5">global</font><font color="#CCCCCC"> two miser</font>

586
00:21:27,690 --> 00:21:32,220
<font color="#E5E5E5">it's a free pass process on a control</font>

587
00:21:30,360 --> 00:21:34,800
<font color="#E5E5E5">flow graph</font><font color="#CCCCCC"> so</font><font color="#E5E5E5"> you have one backward pass</font>

588
00:21:32,220 --> 00:21:35,649
<font color="#E5E5E5">one forward pass and another backward</font>

589
00:21:34,800 --> 00:21:38,289
pass

590
00:21:35,649 --> 00:21:39,939
the<font color="#E5E5E5"> the two backward</font><font color="#CCCCCC"> pass even though</font>

591
00:21:38,289 --> 00:21:41,379
<font color="#E5E5E5">different actually implemented in the</font>

592
00:21:39,940 --> 00:21:43,779
same<font color="#E5E5E5"> code base which is a bit</font><font color="#CCCCCC"> confusing</font>

593
00:21:41,379 --> 00:21:45,699
<font color="#CCCCCC">it's about</font><font color="#E5E5E5"> nine thousand lines of</font><font color="#CCCCCC"> code</font>

594
00:21:43,779 --> 00:21:47,470
and the forward<font color="#E5E5E5"> pass is the most</font>

595
00:21:45,700 --> 00:21:48,999
interesting<font color="#CCCCCC"> one that</font><font color="#E5E5E5"> performs most of</font>

596
00:21:47,470 --> 00:21:51,789
the optimization<font color="#E5E5E5"> it's about like thirty</font>

597
00:21:48,999 --> 00:21:53,139
thousand lines of<font color="#E5E5E5"> code</font><font color="#CCCCCC"> I put the</font><font color="#E5E5E5"> file</font>

598
00:21:51,789 --> 00:21:55,299
names in<font color="#E5E5E5"> there if you're interested</font><font color="#CCCCCC"> to</font>

599
00:21:53,139 --> 00:21:57,729
check<font color="#CCCCCC"> out on your own</font><font color="#E5E5E5"> and the whole</font>

600
00:21:55,299 --> 00:21:58,960
<font color="#E5E5E5">thing starts in robot optimize so if you</font>

601
00:21:57,730 --> 00:22:00,700
want to<font color="#E5E5E5"> look for the entry point this is</font>

602
00:21:58,960 --> 00:22:09,039
a function you want<font color="#E5E5E5"> to look at in the</font>

603
00:22:00,700 --> 00:22:10,570
code<font color="#E5E5E5"> so the backward pass is the first</font>

604
00:22:09,039 --> 00:22:12,009
thing<font color="#CCCCCC"> that runs in the global optimizer</font>

605
00:22:10,570 --> 00:22:14,110
<font color="#E5E5E5">it's not the most interesting</font><font color="#CCCCCC"> for</font><font color="#E5E5E5"> a</font>

606
00:22:12,009 --> 00:22:15,789
security researcher<font color="#E5E5E5"> the algorithm is</font>

607
00:22:14,110 --> 00:22:17,949
pretty simple<font color="#E5E5E5"> you go over each block</font>

608
00:22:15,789 --> 00:22:20,200
backward for each block<font color="#CCCCCC"> you go into</font>

609
00:22:17,950 --> 00:22:21,879
instruction backward<font color="#E5E5E5"> information is</font>

610
00:22:20,200 --> 00:22:23,230
gathered for each block and<font color="#E5E5E5"> basically</font>

611
00:22:21,879 --> 00:22:24,998
every time<font color="#CCCCCC"> you start processing a new</font>

612
00:22:23,230 --> 00:22:27,340
block<font color="#CCCCCC"> of the CFG</font><font color="#E5E5E5"> you have to merge</font>

613
00:22:24,999 --> 00:22:29,259
information of the predeceasing block

614
00:22:27,340 --> 00:22:31,570
that the<font color="#E5E5E5"> the ones you you treated</font>

615
00:22:29,259 --> 00:22:33,279
already<font color="#E5E5E5"> and it can perform some simple</font>

616
00:22:31,570 --> 00:22:35,230
optimization like instruction rewriting

617
00:22:33,279 --> 00:22:37,179
some kind of constant<font color="#E5E5E5"> folding and stuff</font>

618
00:22:35,230 --> 00:22:41,379
<font color="#CCCCCC">add by something interesting in terms of</font>

619
00:22:37,179 --> 00:22:44,259
security<font color="#E5E5E5"> bugs and yeah that's about it</font>

620
00:22:41,379 --> 00:22:45,759
<font color="#E5E5E5">it's not super interesting for us now</font>

621
00:22:44,259 --> 00:22:48,100
<font color="#E5E5E5">the forward pass which is</font><font color="#CCCCCC"> what we</font><font color="#E5E5E5"> really</font>

622
00:22:45,759 --> 00:22:49,869
<font color="#E5E5E5">care about the algorithm is the</font><font color="#CCCCCC"> Reavers</font>

623
00:22:48,100 --> 00:22:51,820
<font color="#CCCCCC">you go</font><font color="#E5E5E5"> over each block of the CFG</font>

624
00:22:49,869 --> 00:22:54,039
forward for each<font color="#CCCCCC"> blocks</font><font color="#E5E5E5"> you go into</font>

625
00:22:51,820 --> 00:22:55,960
instruction forward and<font color="#E5E5E5"> basically for</font>

626
00:22:54,039 --> 00:22:58,570
each<font color="#E5E5E5"> instruction the JIT compiler will</font>

627
00:22:55,960 --> 00:22:59,470
call about<font color="#CCCCCC"> forty to fifty functions that</font>

628
00:22:58,570 --> 00:23:00,759
we all need deal with certain

629
00:22:59,470 --> 00:23:02,169
instructions so if you look<font color="#E5E5E5"> at the code</font>

630
00:23:00,759 --> 00:23:04,570
<font color="#E5E5E5">you will see that they are switch</font>

631
00:23:02,169 --> 00:23:05,860
statements<font color="#E5E5E5"> everywhere and</font><font color="#CCCCCC"> same thing</font>

632
00:23:04,570 --> 00:23:07,749
<font color="#E5E5E5">information is gathered for each block</font>

633
00:23:05,860 --> 00:23:08,830
and<font color="#E5E5E5"> whenever you start processing a new</font>

634
00:23:07,749 --> 00:23:10,360
block the first<font color="#E5E5E5"> thing you do is you</font>

635
00:23:08,830 --> 00:23:12,549
merge the information that you<font color="#E5E5E5"> have of</font>

636
00:23:10,360 --> 00:23:16,748
the predecessor block of the new block

637
00:23:12,549 --> 00:23:18,399
<font color="#E5E5E5">shot</font><font color="#CCCCCC"> you're processing and that will</font>

638
00:23:16,749 --> 00:23:20,139
<font color="#E5E5E5">actually perform most</font><font color="#CCCCCC"> of the magic</font><font color="#E5E5E5"> that</font>

639
00:23:18,399 --> 00:23:24,580
<font color="#E5E5E5">will lead</font><font color="#CCCCCC"> to the optimized code we just</font>

640
00:23:20,139 --> 00:23:27,428
looked<font color="#E5E5E5"> at so so here once again we'll</font>

641
00:23:24,580 --> 00:23:28,809
run through<font color="#E5E5E5"> an example</font><font color="#CCCCCC"> to see to kind of</font>

642
00:23:27,429 --> 00:23:30,159
give you<font color="#CCCCCC"> a</font><font color="#E5E5E5"> sense of how things are done</font>

643
00:23:28,809 --> 00:23:31,749
<font color="#E5E5E5">inside the JIT compiler</font>

644
00:23:30,159 --> 00:23:33,669
<font color="#E5E5E5">I have the same function</font><font color="#CCCCCC"> addition that</font>

645
00:23:31,749 --> 00:23:35,230
adds<font color="#E5E5E5"> to object</font><font color="#CCCCCC"> properties together and</font>

646
00:23:33,669 --> 00:23:37,090
on the right I have<font color="#E5E5E5"> the intermediate</font>

647
00:23:35,230 --> 00:23:39,070
<font color="#E5E5E5">representation after the backward</font><font color="#CCCCCC"> pass</font>

648
00:23:37,090 --> 00:23:41,259
so right before<font color="#CCCCCC"> we run the forward pass</font>

649
00:23:39,070 --> 00:23:43,389
this is what we have we can<font color="#E5E5E5"> see that is</font>

650
00:23:41,259 --> 00:23:44,860
<font color="#CCCCCC">pretty much what we have</font><font color="#E5E5E5"> what we we can</font>

651
00:23:43,389 --> 00:23:46,928
<font color="#CCCCCC">create pretty easily</font><font color="#E5E5E5"> to what's in</font>

652
00:23:44,860 --> 00:23:48,879
JavaScript we just do to load fields<font color="#CCCCCC"> so</font>

653
00:23:46,929 --> 00:23:52,180
it's just like<font color="#E5E5E5"> property access we load</font>

654
00:23:48,880 --> 00:23:56,440
why<font color="#CCCCCC"> ODOT X&Y and</font><font color="#E5E5E5"> we had two together in</font>

655
00:23:52,180 --> 00:23:58,150
s0 which is the return<font color="#E5E5E5"> register now if</font>

656
00:23:56,440 --> 00:23:59,830
you dump the intermediate rotation right

657
00:23:58,150 --> 00:24:01,360
after the forward pass<font color="#E5E5E5"> you have this</font>

658
00:23:59,830 --> 00:24:03,129
<font color="#E5E5E5">thing that's totally unreadable</font><font color="#CCCCCC"> it's</font>

659
00:24:01,360 --> 00:24:05,729
actually redacted<font color="#E5E5E5"> believe it or not it's</font>

660
00:24:03,130 --> 00:24:08,950
<font color="#CCCCCC">even more cryptic than</font><font color="#E5E5E5"> that in reality</font>

661
00:24:05,730 --> 00:24:10,900
<font color="#E5E5E5">and basically the only</font><font color="#CCCCCC"> thing</font><font color="#E5E5E5"> I'm I want</font>

662
00:24:08,950 --> 00:24:12,190
you to take<font color="#E5E5E5"> away here</font><font color="#CCCCCC"> is that somehow</font>

663
00:24:10,900 --> 00:24:13,750
the whole thing has been<font color="#E5E5E5"> changed</font>

664
00:24:12,190 --> 00:24:15,280
<font color="#CCCCCC">everything has</font><font color="#E5E5E5"> been enriched we have</font>

665
00:24:13,750 --> 00:24:17,140
more annotation we have a new

666
00:24:15,280 --> 00:24:18,520
instruction and stuff<font color="#E5E5E5"> that and the</font>

667
00:24:17,140 --> 00:24:19,510
question<font color="#CCCCCC"> now is how did</font><font color="#E5E5E5"> we get there</font>

668
00:24:18,520 --> 00:24:23,920
from the<font color="#E5E5E5"> previous intermediate</font>

669
00:24:19,510 --> 00:24:25,990
representation so as I said<font color="#E5E5E5"> you know</font>

670
00:24:23,920 --> 00:24:27,760
like<font color="#CCCCCC"> you know for in</font><font color="#E5E5E5"> the forward pass</font>

671
00:24:25,990 --> 00:24:30,850
you'll go<font color="#E5E5E5"> over each instruction forward</font>

672
00:24:27,760 --> 00:24:32,530
so sorry<font color="#E5E5E5"> each instruction will basically</font>

673
00:24:30,850 --> 00:24:34,870
go through<font color="#E5E5E5"> this optimized instruction</font>

674
00:24:32,530 --> 00:24:37,330
function and as I<font color="#CCCCCC"> said this thing will</font>

675
00:24:34,870 --> 00:24:39,159
call<font color="#E5E5E5"> about</font><font color="#CCCCCC"> 40</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> 50</font><font color="#E5E5E5"> functions</font><font color="#CCCCCC"> passing</font>

676
00:24:37,330 --> 00:24:40,300
the instruction and<font color="#CCCCCC"> you know some</font><font color="#E5E5E5"> of</font>

677
00:24:39,160 --> 00:24:41,500
these<font color="#CCCCCC"> functions will not actually do</font>

678
00:24:40,300 --> 00:24:43,180
anything<font color="#CCCCCC"> and some of them will do</font>

679
00:24:41,500 --> 00:24:44,590
<font color="#E5E5E5">something so at some point</font><font color="#CCCCCC"> optimized</font>

680
00:24:43,180 --> 00:24:46,960
instruction will call this thing called

681
00:24:44,590 --> 00:24:49,540
up to<font color="#E5E5E5"> tack checks on that instruction</font>

682
00:24:46,960 --> 00:24:51,460
and if you look at the code you can<font color="#CCCCCC"> see</font>

683
00:24:49,540 --> 00:24:53,710
<font color="#CCCCCC">that you</font><font color="#E5E5E5"> have a switch</font><font color="#CCCCCC"> statement with</font><font color="#E5E5E5"> a</font>

684
00:24:51,460 --> 00:24:55,720
case for when the opcode is<font color="#E5E5E5"> a load field</font>

685
00:24:53,710 --> 00:24:57,880
which is what we have here<font color="#CCCCCC"> so</font><font color="#E5E5E5"> this</font>

686
00:24:55,720 --> 00:25:00,340
<font color="#E5E5E5">function actually is</font><font color="#CCCCCC"> supposed to do some</font>

687
00:24:57,880 --> 00:25:03,010
some some<font color="#E5E5E5"> things when we have this</font>

688
00:25:00,340 --> 00:25:05,919
instruction<font color="#E5E5E5"> and now if you look</font><font color="#CCCCCC"> at the</font>

689
00:25:03,010 --> 00:25:07,090
code you<font color="#CCCCCC"> can</font><font color="#E5E5E5"> see that it will do some</font>

690
00:25:05,920 --> 00:25:08,740
stuff on<font color="#E5E5E5"> right so the first</font><font color="#CCCCCC"> thing it</font>

691
00:25:07,090 --> 00:25:10,419
just retrieves the<font color="#CCCCCC"> value in</font><font color="#E5E5E5"> form a the</font>

692
00:25:08,740 --> 00:25:13,480
value information<font color="#E5E5E5"> that you have for that</font>

693
00:25:10,420 --> 00:25:15,130
<font color="#E5E5E5">block for that particular thing and then</font>

694
00:25:13,480 --> 00:25:17,170
we have an if statement which<font color="#CCCCCC"> is if</font>

695
00:25:15,130 --> 00:25:18,880
value tab can<font color="#CCCCCC"> be tagged value and the</font>

696
00:25:17,170 --> 00:25:20,560
first like at<font color="#E5E5E5"> this point this will</font>

697
00:25:18,880 --> 00:25:22,750
actually<font color="#E5E5E5"> return true so we'll take the</font>

698
00:25:20,560 --> 00:25:23,860
if statement<font color="#E5E5E5"> and now it will do two</font>

699
00:25:22,750 --> 00:25:25,240
<font color="#E5E5E5">things so the first</font><font color="#CCCCCC"> thing it does it</font>

700
00:25:23,860 --> 00:25:28,179
actually<font color="#E5E5E5"> creates a new instruction which</font>

701
00:25:25,240 --> 00:25:30,520
is<font color="#CCCCCC"> balaam not object and it</font><font color="#E5E5E5"> will insert</font>

702
00:25:28,180 --> 00:25:32,290
<font color="#E5E5E5">that instruction before and then we can</font>

703
00:25:30,520 --> 00:25:34,570
see<font color="#E5E5E5"> that</font><font color="#CCCCCC"> actually updates</font><font color="#E5E5E5"> to value type</font>

704
00:25:32,290 --> 00:25:36,670
because since we inserted<font color="#E5E5E5"> a bailout</font>

705
00:25:34,570 --> 00:25:38,679
instruction we now know that<font color="#E5E5E5"> going</font>

706
00:25:36,670 --> 00:25:39,910
forward<font color="#CCCCCC"> the thing cannot</font><font color="#E5E5E5"> be attacked by</font>

707
00:25:38,680 --> 00:25:42,250
<font color="#CCCCCC">do any more so we update to tap</font>

708
00:25:39,910 --> 00:25:44,290
information so the JIT compiler<font color="#E5E5E5"> now</font>

709
00:25:42,250 --> 00:25:45,550
<font color="#E5E5E5">knows or this thing is not you know I</font>

710
00:25:44,290 --> 00:25:46,930
don't<font color="#E5E5E5"> have to deal with the fact that it</font>

711
00:25:45,550 --> 00:25:50,320
can be<font color="#CCCCCC"> at I value because I know it's</font>

712
00:25:46,930 --> 00:25:51,520
<font color="#E5E5E5">not so now you know we keep running and</font>

713
00:25:50,320 --> 00:25:52,929
then<font color="#CCCCCC"> we start</font><font color="#E5E5E5"> processing</font><font color="#CCCCCC"> the next</font>

714
00:25:51,520 --> 00:25:54,550
instruction and we'll take the same code

715
00:25:52,930 --> 00:25:56,230
path<font color="#E5E5E5"> but the thing is this time you know</font>

716
00:25:54,550 --> 00:25:58,840
we updated the value in from the value

717
00:25:56,230 --> 00:26:01,180
type<font color="#E5E5E5"> so now the if statement we actually</font>

718
00:25:58,840 --> 00:26:02,439
return false<font color="#E5E5E5"> and you will run</font><font color="#CCCCCC"> maybe</font>

719
00:26:01,180 --> 00:26:04,120
different code

720
00:26:02,440 --> 00:26:05,770
that sort of stuff<font color="#CCCCCC"> so it's a</font><font color="#E5E5E5"> really</font>

721
00:26:04,120 --> 00:26:07,419
minimal example but it's kind of to give

722
00:26:05,770 --> 00:26:09,690
<font color="#CCCCCC">you an idea</font><font color="#E5E5E5"> of how things are done</font>

723
00:26:07,420 --> 00:26:11,770
basically<font color="#E5E5E5"> you call a bunch of function</font>

724
00:26:09,690 --> 00:26:14,260
<font color="#E5E5E5">based on what you have you will either</font>

725
00:26:11,770 --> 00:26:15,790
refine your type information<font color="#CCCCCC"> or you will</font>

726
00:26:14,260 --> 00:26:18,430
actually<font color="#E5E5E5"> you would actually have to</font>

727
00:26:15,790 --> 00:26:19,960
loosen it and that's what does it

728
00:26:18,430 --> 00:26:22,660
compare<font color="#CCCCCC"> those based on</font><font color="#E5E5E5"> that it will be</font>

729
00:26:19,960 --> 00:26:24,010
able<font color="#E5E5E5"> to do multi musician or it will</font>

730
00:26:22,660 --> 00:26:27,850
<font color="#CCCCCC">actually have</font><font color="#E5E5E5"> to insert additional</font>

731
00:26:24,010 --> 00:26:29,590
checks so there's of course<font color="#CCCCCC"> lots more</font>

732
00:26:27,850 --> 00:26:31,570
<font color="#E5E5E5">happening</font><font color="#CCCCCC"> on that this</font><font color="#E5E5E5"> is just to give</font>

733
00:26:29,590 --> 00:26:33,070
you a rough idea<font color="#CCCCCC"> if you look at the code</font>

734
00:26:31,570 --> 00:26:35,710
I hope this actually kind<font color="#CCCCCC"> of gives</font><font color="#E5E5E5"> you</font>

735
00:26:33,070 --> 00:26:37,929
some<font color="#CCCCCC"> idea what's going on</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> want to</font>

736
00:26:35,710 --> 00:26:40,200
<font color="#E5E5E5">look for so now I'm going to</font><font color="#CCCCCC"> introduce</font>

737
00:26:37,930 --> 00:26:43,360
two key concepts<font color="#CCCCCC"> that are</font><font color="#E5E5E5"> used in chakra</font>

738
00:26:40,200 --> 00:26:45,730
so<font color="#E5E5E5"> symbol liveness which is so basically</font>

739
00:26:43,360 --> 00:26:49,000
a symbol in chakra is something that's

740
00:26:45,730 --> 00:26:53,550
that<font color="#E5E5E5"> basically represents</font><font color="#CCCCCC"> viable</font><font color="#E5E5E5"> or some</font>

741
00:26:49,000 --> 00:26:56,050
kind of internal fields<font color="#CCCCCC"> and</font><font color="#E5E5E5"> basically</font>

742
00:26:53,550 --> 00:26:59,320
they have this concept<font color="#E5E5E5"> of liveness which</font>

743
00:26:56,050 --> 00:27:01,330
is if<font color="#E5E5E5"> we take the my function which</font>

744
00:26:59,320 --> 00:27:04,570
basically<font color="#CCCCCC"> adds two properties</font><font color="#E5E5E5"> together</font><font color="#CCCCCC"> o</font>

745
00:27:01,330 --> 00:27:05,949
dot X and O dot<font color="#E5E5E5"> Y then if I call the</font>

746
00:27:04,570 --> 00:27:07,600
function<font color="#CCCCCC"> with that</font><font color="#E5E5E5"> particular object in</font>

747
00:27:05,950 --> 00:27:09,250
the loop<font color="#CCCCCC"> other text is basically</font><font color="#E5E5E5"> at</font>

748
00:27:07,600 --> 00:27:11,439
offset zero in the<font color="#E5E5E5"> oxide pointer and</font>

749
00:27:09,250 --> 00:27:14,080
<font color="#E5E5E5">order twice that of set one in the oxide</font>

750
00:27:11,440 --> 00:27:15,430
pointer<font color="#CCCCCC"> and you know this</font><font color="#E5E5E5"> day you</font><font color="#CCCCCC"> accept</font>

751
00:27:14,080 --> 00:27:17,260
you expect your compiler to generate

752
00:27:15,430 --> 00:27:19,720
something<font color="#E5E5E5"> that will actually load your</font>

753
00:27:17,260 --> 00:27:21,490
thoughts pointer only once<font color="#E5E5E5"> and access</font>

754
00:27:19,720 --> 00:27:22,930
the two<font color="#E5E5E5"> properties directly</font><font color="#CCCCCC"> instead of</font>

755
00:27:21,490 --> 00:27:24,880
you know<font color="#E5E5E5"> loading the Oxus pointer</font>

756
00:27:22,930 --> 00:27:26,140
<font color="#CCCCCC">accessing</font><font color="#E5E5E5"> the first property reloading</font>

757
00:27:24,880 --> 00:27:29,380
<font color="#CCCCCC">your close pointer and accessing the</font>

758
00:27:26,140 --> 00:27:31,150
<font color="#E5E5E5">second property so in order to do that</font>

759
00:27:29,380 --> 00:27:33,010
<font color="#E5E5E5">chakra is this mechanism which</font><font color="#CCCCCC"> is</font>

760
00:27:31,150 --> 00:27:35,230
basically<font color="#E5E5E5"> symbol liveness which is when</font>

761
00:27:33,010 --> 00:27:37,600
<font color="#E5E5E5">it will optimize the property</font><font color="#CCCCCC"> access of</font>

762
00:27:35,230 --> 00:27:39,610
<font color="#CCCCCC">dot</font><font color="#E5E5E5"> X it will actually see that</font><font color="#CCCCCC"> the</font>

763
00:27:37,600 --> 00:27:41,740
thing will trigger<font color="#CCCCCC"> a knock slots load</font>

764
00:27:39,610 --> 00:27:43,629
and will actually<font color="#E5E5E5"> set the symbol</font>

765
00:27:41,740 --> 00:27:46,060
associated<font color="#E5E5E5"> with it as life going forward</font>

766
00:27:43,630 --> 00:27:48,790
<font color="#E5E5E5">what that allows the JIT compiler to do</font>

767
00:27:46,060 --> 00:27:50,800
is that when it treats the next

768
00:27:48,790 --> 00:27:52,870
instruction it will look if<font color="#CCCCCC"> oh</font><font color="#E5E5E5"> is that</font>

769
00:27:50,800 --> 00:27:54,460
<font color="#E5E5E5">simple life</font><font color="#CCCCCC"> actually or not and since</font>

770
00:27:52,870 --> 00:27:56,439
<font color="#CCCCCC">it's live it knows ok I don't</font><font color="#E5E5E5"> have</font><font color="#CCCCCC"> to</font>

771
00:27:54,460 --> 00:27:59,260
reload the thing is<font color="#E5E5E5"> life I can use it</font>

772
00:27:56,440 --> 00:28:00,730
it's valid at this point but<font color="#CCCCCC"> now you</font>

773
00:27:59,260 --> 00:28:04,150
have the counterpart to<font color="#CCCCCC"> that which is</font>

774
00:28:00,730 --> 00:28:06,400
what if we<font color="#E5E5E5"> slightly change the function</font>

775
00:28:04,150 --> 00:28:08,320
so<font color="#CCCCCC"> that in</font><font color="#E5E5E5"> between the access of</font>

776
00:28:06,400 --> 00:28:11,380
<font color="#E5E5E5">property</font><font color="#CCCCCC"> X we have some operations and</font>

777
00:28:08,320 --> 00:28:12,700
then we we access property<font color="#E5E5E5"> Y and what if</font>

778
00:28:11,380 --> 00:28:14,890
those operations actually<font color="#E5E5E5"> triggered the</font>

779
00:28:12,700 --> 00:28:16,150
Oxus pointer to be reallocated<font color="#E5E5E5"> so that</font>

780
00:28:14,890 --> 00:28:18,250
will happen<font color="#E5E5E5"> if you had like</font>

781
00:28:16,150 --> 00:28:19,630
a whole<font color="#E5E5E5"> bunch of property</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> have to</font>

782
00:28:18,250 --> 00:28:21,490
<font color="#E5E5E5">reallocate you know enough space and</font>

783
00:28:19,630 --> 00:28:23,440
copy the properties<font color="#CCCCCC"> you don't want to</font>

784
00:28:21,490 --> 00:28:25,060
use the<font color="#E5E5E5"> previous value of the excess</font>

785
00:28:23,440 --> 00:28:26,590
value<font color="#E5E5E5"> because now it would point to</font>

786
00:28:25,060 --> 00:28:27,940
freed memory<font color="#E5E5E5"> or maybe you want to look</font>

787
00:28:26,590 --> 00:28:30,610
for<font color="#CCCCCC"> that particular situation if you're</font>

788
00:28:27,940 --> 00:28:32,590
looking for<font color="#E5E5E5"> bugs so the mechanism that</font>

789
00:28:30,610 --> 00:28:34,810
allows to<font color="#E5E5E5"> decompile</font><font color="#CCCCCC"> deal with that is</font>

790
00:28:32,590 --> 00:28:37,449
something called<font color="#CCCCCC"> the kill mechanism</font>

791
00:28:34,810 --> 00:28:39,129
this is chakra lingo if you look for the

792
00:28:37,450 --> 00:28:40,770
<font color="#E5E5E5">string kill in the code base</font><font color="#CCCCCC"> you will</font>

793
00:28:39,130 --> 00:28:42,610
find some occurrences<font color="#CCCCCC"> to it and</font>

794
00:28:40,770 --> 00:28:43,900
<font color="#E5E5E5">basically in that case where some</font>

795
00:28:42,610 --> 00:28:45,820
operations might actually cause a

796
00:28:43,900 --> 00:28:48,010
reallocation<font color="#E5E5E5"> of the Oxus pointer then</font>

797
00:28:45,820 --> 00:28:50,169
the JIT compiler has<font color="#E5E5E5"> to kill the symbol</font>

798
00:28:48,010 --> 00:28:55,420
associated with the<font color="#E5E5E5"> thing that might be</font>

799
00:28:50,170 --> 00:28:56,380
changed<font color="#CCCCCC"> and if you look it's basically</font>

800
00:28:55,420 --> 00:28:58,030
the same mechanism that's used

801
00:28:56,380 --> 00:29:00,250
<font color="#CCCCCC">throughout the JIT compiler</font><font color="#E5E5E5"> for kinds of</font>

802
00:28:58,030 --> 00:29:01,990
type information<font color="#CCCCCC"> and if</font><font color="#E5E5E5"> you look at some</font>

803
00:29:00,250 --> 00:29:04,180
<font color="#E5E5E5">of the bug reports from like</font><font color="#CCCCCC"> loci out or</font>

804
00:29:01,990 --> 00:29:06,730
sorry my bad especially with arrays

805
00:29:04,180 --> 00:29:09,280
that's basically where like the<font color="#E5E5E5"> G</font>

806
00:29:06,730 --> 00:29:11,230
compiler<font color="#CCCCCC"> actually basically failed to</font>

807
00:29:09,280 --> 00:29:13,060
kill<font color="#E5E5E5"> certain type information under</font>

808
00:29:11,230 --> 00:29:18,160
certain situation that's basically what

809
00:29:13,060 --> 00:29:20,440
led to to those<font color="#CCCCCC"> security bugs so the</font>

810
00:29:18,160 --> 00:29:24,270
<font color="#E5E5E5">forward pass</font><font color="#CCCCCC"> you know it was</font><font color="#E5E5E5"> probably</font>

811
00:29:20,440 --> 00:29:28,030
ought to<font color="#E5E5E5"> take still</font><font color="#CCCCCC"> seem simple enough</font>

812
00:29:24,270 --> 00:29:29,980
<font color="#E5E5E5">well the truth is all the</font><font color="#CCCCCC"> functions I</font>

813
00:29:28,030 --> 00:29:31,270
<font color="#CCCCCC">gave you were really</font><font color="#E5E5E5"> simple innocence in</font>

814
00:29:29,980 --> 00:29:33,490
terms of<font color="#E5E5E5"> like the</font><font color="#CCCCCC"> CFG</font><font color="#E5E5E5"> because you only</font>

815
00:29:31,270 --> 00:29:36,400
have<font color="#CCCCCC"> like one block and you basically</font>

816
00:29:33,490 --> 00:29:39,040
<font color="#E5E5E5">have you know</font><font color="#CCCCCC"> only one path through the</font>

817
00:29:36,400 --> 00:29:40,600
CFG<font color="#E5E5E5"> but if you start adding like you</font>

818
00:29:39,040 --> 00:29:43,240
know some JavaScript constructs such as

819
00:29:40,600 --> 00:29:45,520
<font color="#E5E5E5">loops conditional statements</font><font color="#CCCCCC"> try catch</font>

820
00:29:43,240 --> 00:29:47,770
and<font color="#E5E5E5"> all that sort of</font><font color="#CCCCCC"> stuff then you you</font>

821
00:29:45,520 --> 00:29:49,780
complexify the CFG a lot and you<font color="#CCCCCC"> have to</font>

822
00:29:47,770 --> 00:29:51,220
do it<font color="#E5E5E5"> you have</font><font color="#CCCCCC"> to deal with</font><font color="#E5E5E5"> that you</font>

823
00:29:49,780 --> 00:29:54,160
<font color="#E5E5E5">also have a lot of different things to</font>

824
00:29:51,220 --> 00:29:56,620
keep<font color="#E5E5E5"> track</font><font color="#CCCCCC"> of so viable Alaia seing what</font>

825
00:29:54,160 --> 00:29:58,090
to restore in case of bailouts<font color="#CCCCCC"> the JIT</font>

826
00:29:56,620 --> 00:29:59,949
compiler also<font color="#E5E5E5"> has to</font><font color="#CCCCCC"> model the behavior</font>

827
00:29:58,090 --> 00:30:01,810
<font color="#CCCCCC">of slow paths</font><font color="#E5E5E5"> so you know you don't</font><font color="#CCCCCC"> want</font>

828
00:29:59,950 --> 00:30:03,250
your<font color="#E5E5E5"> JIT compiler to say I might call</font>

829
00:30:01,810 --> 00:30:04,929
<font color="#CCCCCC">into</font><font color="#E5E5E5"> the slow path but this won't</font><font color="#CCCCCC"> change</font>

830
00:30:03,250 --> 00:30:06,640
anything and then the slow path changes

831
00:30:04,930 --> 00:30:08,100
<font color="#CCCCCC">something internally so</font><font color="#E5E5E5"> that could be</font>

832
00:30:06,640 --> 00:30:10,540
one place<font color="#E5E5E5"> to look for bugs as well</font>

833
00:30:08,100 --> 00:30:14,530
you have range and Isis for<font color="#CCCCCC"> bounce check</font>

834
00:30:10,540 --> 00:30:16,120
removal<font color="#CCCCCC"> always some bugs there and much</font>

835
00:30:14,530 --> 00:30:21,399
more<font color="#E5E5E5"> much more things to keep track</font><font color="#CCCCCC"> of</font>

836
00:30:16,120 --> 00:30:24,580
so<font color="#CCCCCC"> a quick slide about loops as I said</font>

837
00:30:21,400 --> 00:30:26,890
<font color="#E5E5E5">loops are kind of you have to deal with</font>

838
00:30:24,580 --> 00:30:29,590
<font color="#CCCCCC">them as I</font><font color="#E5E5E5"> said the algorithm basically</font>

839
00:30:26,890 --> 00:30:31,510
you know<font color="#E5E5E5"> you go over each block once</font>

840
00:30:29,590 --> 00:30:33,370
and you<font color="#E5E5E5"> treat it but if you have</font><font color="#CCCCCC"> looks</font>

841
00:30:31,510 --> 00:30:36,250
you<font color="#CCCCCC"> have to be a bit smarter</font><font color="#E5E5E5"> than that</font>

842
00:30:33,370 --> 00:30:38,560
<font color="#E5E5E5">so because if you if you</font><font color="#CCCCCC"> think of a loop</font>

843
00:30:36,250 --> 00:30:40,090
in terms<font color="#E5E5E5"> of what how it represents</font><font color="#CCCCCC"> in a</font>

844
00:30:38,560 --> 00:30:42,399
control flow<font color="#E5E5E5"> graph you will basically</font>

845
00:30:40,090 --> 00:30:44,949
<font color="#CCCCCC">have the first time you run into a loop</font>

846
00:30:42,400 --> 00:30:46,390
you come from<font color="#E5E5E5"> one code path where you</font>

847
00:30:44,950 --> 00:30:48,520
<font color="#CCCCCC">have certain information</font><font color="#E5E5E5"> that is true</font>

848
00:30:46,390 --> 00:30:50,860
and then all<font color="#E5E5E5"> subsequent iterations will</font>

849
00:30:48,520 --> 00:30:52,330
have that information<font color="#E5E5E5"> as well at this as</font>

850
00:30:50,860 --> 00:30:54,399
the information<font color="#CCCCCC"> that's true</font><font color="#E5E5E5"> from the</font>

851
00:30:52,330 --> 00:30:55,929
<font color="#CCCCCC">loop package because</font><font color="#E5E5E5"> you will have run</font>

852
00:30:54,400 --> 00:30:58,930
the<font color="#CCCCCC"> loop body once and the loop body</font>

853
00:30:55,930 --> 00:31:00,940
might<font color="#E5E5E5"> well change some information that</font>

854
00:30:58,930 --> 00:31:03,040
<font color="#CCCCCC">you</font><font color="#E5E5E5"> that you thought was true going</font>

855
00:31:00,940 --> 00:31:05,460
coming into the loop<font color="#E5E5E5"> so you basically</font>

856
00:31:03,040 --> 00:31:07,659
<font color="#E5E5E5">have to run through</font><font color="#CCCCCC"> each block twice</font>

857
00:31:05,460 --> 00:31:11,260
<font color="#CCCCCC">internally in saccharides referred to as</font>

858
00:31:07,660 --> 00:31:15,130
<font color="#E5E5E5">the loop free pass and things have gone</font>

859
00:31:11,260 --> 00:31:16,530
wrong due to that<font color="#E5E5E5"> so yeah I have a</font>

860
00:31:15,130 --> 00:31:19,030
simple<font color="#E5E5E5"> example</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> I'll add the problem</font>

861
00:31:16,530 --> 00:31:20,830
<font color="#E5E5E5">here we have a function doesn't do</font>

862
00:31:19,030 --> 00:31:23,620
anything meaningful<font color="#CCCCCC"> it</font><font color="#E5E5E5"> actually won't</font>

863
00:31:20,830 --> 00:31:25,960
<font color="#E5E5E5">crash but it will return undefined every</font>

864
00:31:23,620 --> 00:31:28,989
time<font color="#E5E5E5"> the interesting thing to</font><font color="#CCCCCC"> look at</font>

865
00:31:25,960 --> 00:31:31,600
here<font color="#CCCCCC"> is that I</font><font color="#E5E5E5"> have the subject that</font><font color="#CCCCCC"> I</font>

866
00:31:28,990 --> 00:31:33,310
<font color="#E5E5E5">declare as a</font><font color="#CCCCCC"> scarer object so the JIT</font>

867
00:31:31,600 --> 00:31:35,590
compiler will actually know<font color="#E5E5E5"> its type and</font>

868
00:31:33,310 --> 00:31:38,020
basically when we access a<font color="#CCCCCC"> door</font><font color="#E5E5E5"> text and</font>

869
00:31:35,590 --> 00:31:39,580
we put<font color="#CCCCCC"> that into</font><font color="#E5E5E5"> the right variable the</font>

870
00:31:38,020 --> 00:31:41,320
JIT compiler might be tempted to<font color="#E5E5E5"> say oh</font>

871
00:31:39,580 --> 00:31:42,399
<font color="#E5E5E5">I know the type</font><font color="#CCCCCC"> I can just choose in</font>

872
00:31:41,320 --> 00:31:44,679
like<font color="#CCCCCC"> caching you know like directly</font>

873
00:31:42,400 --> 00:31:47,710
access to<font color="#E5E5E5"> memory the</font><font color="#CCCCCC"> memory where the</font>

874
00:31:44,680 --> 00:31:50,050
<font color="#E5E5E5">property X will be but here we we have</font>

875
00:31:47,710 --> 00:31:52,210
to see<font color="#E5E5E5"> that this</font><font color="#CCCCCC"> they there</font><font color="#E5E5E5"> is this</font>

876
00:31:50,050 --> 00:31:54,070
<font color="#E5E5E5">instruction that was a plus plus and</font><font color="#CCCCCC"> a</font>

877
00:31:52,210 --> 00:31:57,130
plus plus in Java<font color="#CCCCCC"> skills will actually</font>

878
00:31:54,070 --> 00:31:58,689
type<font color="#CCCCCC"> specialized a going forward a will</font>

879
00:31:57,130 --> 00:32:00,940
now be a<font color="#E5E5E5"> number so it's not an object</font>

880
00:31:58,690 --> 00:32:03,430
anymore<font color="#CCCCCC"> and if</font><font color="#E5E5E5"> your JIT code actually</font>

881
00:32:00,940 --> 00:32:04,840
<font color="#E5E5E5">doesn't account for that then on the</font>

882
00:32:03,430 --> 00:32:06,790
<font color="#CCCCCC">loopback edge you will treat the fingers</font>

883
00:32:04,840 --> 00:32:10,000
<font color="#CCCCCC">a</font><font color="#E5E5E5"> very pointer and you're going</font><font color="#CCCCCC"> to have</font>

884
00:32:06,790 --> 00:32:12,460
bad<font color="#E5E5E5"> surprises</font><font color="#CCCCCC"> so that's</font><font color="#E5E5E5"> basically where</font>

885
00:32:10,000 --> 00:32:14,440
the the algorithm of<font color="#CCCCCC"> the loop</font><font color="#E5E5E5"> pre pass</font>

886
00:32:12,460 --> 00:32:16,390
comes into play you<font color="#CCCCCC"> will do a first</font><font color="#E5E5E5"> pass</font>

887
00:32:14,440 --> 00:32:18,550
on<font color="#E5E5E5"> the thing to basically get</font><font color="#CCCCCC"> all the</font>

888
00:32:16,390 --> 00:32:20,890
type information<font color="#E5E5E5"> and what</font><font color="#CCCCCC"> basically</font>

889
00:32:18,550 --> 00:32:22,810
going<font color="#E5E5E5"> to happen to you know be able to</font>

890
00:32:20,890 --> 00:32:24,940
optimize<font color="#E5E5E5"> the</font><font color="#CCCCCC"> thing</font><font color="#E5E5E5"> accordingly knowing</font>

891
00:32:22,810 --> 00:32:29,530
<font color="#CCCCCC">that the loop body might change some</font>

892
00:32:24,940 --> 00:32:31,210
<font color="#E5E5E5">stuff about so once again that previous</font>

893
00:32:29,530 --> 00:32:33,450
example super nice to<font color="#CCCCCC"> do if you</font><font color="#E5E5E5"> don't</font>

894
00:32:31,210 --> 00:32:36,370
have complex construct inside the thing

895
00:32:33,450 --> 00:32:39,880
<font color="#E5E5E5">things can of course be a way trickier</font>

896
00:32:36,370 --> 00:32:42,760
<font color="#E5E5E5">and three days ago Microsoft</font><font color="#CCCCCC"> is issued</font>

897
00:32:39,880 --> 00:32:44,470
the patch for for those two<font color="#CCCCCC"> series</font>

898
00:32:42,760 --> 00:32:46,330
that<font color="#CCCCCC"> I</font><font color="#E5E5E5"> reported and uh basically bugs</font>

899
00:32:44,470 --> 00:32:48,490
related to that so<font color="#CCCCCC"> you can look for</font>

900
00:32:46,330 --> 00:32:50,290
those<font color="#E5E5E5"> TVs in the chakra cognitive and</font>

901
00:32:48,490 --> 00:32:52,900
you will see the<font color="#CCCCCC"> patch</font><font color="#E5E5E5"> for those bugs</font><font color="#CCCCCC"> I</font>

902
00:32:50,290 --> 00:32:54,100
don't have time<font color="#E5E5E5"> to talk more about it if</font>

903
00:32:52,900 --> 00:32:57,150
you want<font color="#CCCCCC"> to</font><font color="#E5E5E5"> check it out go</font><font color="#CCCCCC"> for it</font>

904
00:32:54,100 --> 00:32:59,350
or you can ask<font color="#E5E5E5"> me</font><font color="#CCCCCC"> questions</font><font color="#E5E5E5"> after</font>

905
00:32:57,150 --> 00:33:01,419
another desktop<font color="#E5E5E5"> of us which is</font><font color="#CCCCCC"> the last</font>

906
00:32:59,350 --> 00:33:03,820
<font color="#E5E5E5">thing that runs in the JIT compiler is</font>

907
00:33:01,419 --> 00:33:05,530
the same algorithm as the backward<font color="#CCCCCC"> pass</font>

908
00:33:03,820 --> 00:33:07,840
<font color="#CCCCCC">so you</font><font color="#E5E5E5"> go over</font><font color="#CCCCCC"> each</font><font color="#E5E5E5"> bug backward</font><font color="#CCCCCC"> over</font>

909
00:33:05,530 --> 00:33:09,850
<font color="#CCCCCC">inch instruction backward and mostly it</font>

910
00:33:07,840 --> 00:33:11,110
removes redundant code<font color="#E5E5E5"> so you know I</font>

911
00:33:09,850 --> 00:33:13,870
<font color="#E5E5E5">actually</font><font color="#CCCCCC"> don't type checks and</font><font color="#E5E5E5"> that sort</font>

912
00:33:11,110 --> 00:33:15,459
of stuff<font color="#E5E5E5"> it's not like at least</font><font color="#CCCCCC"> in my</font>

913
00:33:13,870 --> 00:33:17,168
friends I don't<font color="#CCCCCC"> find super interesting</font>

914
00:33:15,460 --> 00:33:19,179
in and out of itself<font color="#E5E5E5"> because all the bad</font>

915
00:33:17,169 --> 00:33:21,520
<font color="#CCCCCC">decisions that</font><font color="#E5E5E5"> are</font><font color="#CCCCCC"> taken in</font><font color="#E5E5E5"> the in the</font>

916
00:33:19,179 --> 00:33:23,410
desktop us are<font color="#E5E5E5"> basically consequences of</font>

917
00:33:21,520 --> 00:33:25,330
bad<font color="#CCCCCC"> decisions</font><font color="#E5E5E5"> that you took in a forward</font>

918
00:33:23,410 --> 00:33:27,580
pass<font color="#E5E5E5"> so if you want to look</font><font color="#CCCCCC"> for bugs</font>

919
00:33:25,330 --> 00:33:32,350
while<font color="#E5E5E5"> chakra still has a bug</font><font color="#CCCCCC"> bounty</font>

920
00:33:27,580 --> 00:33:36,340
program<font color="#E5E5E5"> go look at the forward rest okay</font>

921
00:33:32,350 --> 00:33:39,189
<font color="#E5E5E5">so now I'll</font><font color="#CCCCCC"> actually I'll run</font><font color="#E5E5E5"> through a</font>

922
00:33:36,340 --> 00:33:42,909
JIT bug that was enough to<font color="#CCCCCC"> get</font><font color="#E5E5E5"> a</font><font color="#CCCCCC"> C in</font>

923
00:33:39,190 --> 00:33:45,640
<font color="#CCCCCC">edge and yeah we'll</font><font color="#E5E5E5"> try to break it down</font>

924
00:33:42,910 --> 00:33:47,380
<font color="#E5E5E5">together so it's the</font><font color="#CCCCCC"> CVID</font>

925
00:33:45,640 --> 00:33:49,540
it's a very I reported back<font color="#CCCCCC"> in</font><font color="#E5E5E5"> June last</font>

926
00:33:47,380 --> 00:33:51,640
<font color="#E5E5E5">year I found it with fuzzing I won't</font>

927
00:33:49,540 --> 00:33:53,678
talk about<font color="#E5E5E5"> the mythology</font><font color="#CCCCCC"> here at all I'm</font>

928
00:33:51,640 --> 00:33:55,990
going<font color="#E5E5E5"> to talk about</font><font color="#CCCCCC"> that with Nicolas at</font>

929
00:33:53,679 --> 00:33:58,330
infiltrate so if you're interested<font color="#CCCCCC"> in</font>

930
00:33:55,990 --> 00:34:00,700
that check check out the<font color="#E5E5E5"> conference</font><font color="#CCCCCC"> or</font>

931
00:33:58,330 --> 00:34:02,409
<font color="#E5E5E5">the talk once it's released it was fixed</font>

932
00:34:00,700 --> 00:34:05,200
in<font color="#E5E5E5"> August last year and basically relies</font>

933
00:34:02,410 --> 00:34:08,080
on<font color="#E5E5E5"> miss modeling by the JIT of internal</font>

934
00:34:05,200 --> 00:34:11,409
changes and<font color="#CCCCCC"> will try will shed some</font>

935
00:34:08,080 --> 00:34:13,719
light on that so here<font color="#E5E5E5"> basically on the</font>

936
00:34:11,409 --> 00:34:15,220
Left I<font color="#CCCCCC"> have some JavaScript code and if</font>

937
00:34:13,719 --> 00:34:18,368
you were to run<font color="#E5E5E5"> if you have to run that</font>

938
00:34:15,219 --> 00:34:19,359
on a vulnerable version of of chakra you

939
00:34:18,369 --> 00:34:21,609
basically can observe the following

940
00:34:19,359 --> 00:34:25,600
crash<font color="#E5E5E5"> why it's basically trying to move</font>

941
00:34:21,609 --> 00:34:27,460
<font color="#E5E5E5">whatever it's in is now</font><font color="#CCCCCC"> BP into into a</font>

942
00:34:25,600 --> 00:34:29,500
memory location<font color="#E5E5E5"> and if we look at the</font>

943
00:34:27,460 --> 00:34:31,119
values of the register R<font color="#E5E5E5"> BP is actually</font>

944
00:34:29,500 --> 00:34:33,460
the tagged integer<font color="#E5E5E5"> one which we have on</font>

945
00:34:31,119 --> 00:34:36,070
the left with you<font color="#E5E5E5"> know dot e equals one</font>

946
00:34:33,460 --> 00:34:37,720
so that seems<font color="#E5E5E5"> to be</font><font color="#CCCCCC"> that and if we look</font>

947
00:34:36,070 --> 00:34:39,580
at<font color="#E5E5E5"> the value of re</font><font color="#CCCCCC"> X which</font><font color="#E5E5E5"> is used as</font>

948
00:34:37,719 --> 00:34:41,199
the<font color="#CCCCCC"> base to</font><font color="#E5E5E5"> rest the base address of our</font>

949
00:34:39,580 --> 00:34:44,139
<font color="#E5E5E5">buffer we can see</font><font color="#CCCCCC"> they set to the tag</font>

950
00:34:41,199 --> 00:34:45,730
value<font color="#CCCCCC"> for one for one</font><font color="#E5E5E5"> one for one and we</font>

951
00:34:44,139 --> 00:34:48,310
can<font color="#E5E5E5"> actually see that on the Left we set</font>

952
00:34:45,730 --> 00:34:51,240
some property<font color="#CCCCCC"> to X 4 1 4</font><font color="#E5E5E5"> & 4 & 4</font><font color="#CCCCCC"> so it</font>

953
00:34:48,310 --> 00:34:51,239
looks pretty<font color="#E5E5E5"> suspicious</font>

954
00:34:53,639 --> 00:34:57,490
so basically<font color="#E5E5E5"> what that tells us if</font>

955
00:34:56,170 --> 00:35:00,610
you're a bit<font color="#CCCCCC"> familiar with chakra which</font>

956
00:34:57,490 --> 00:35:01,990
I hope<font color="#E5E5E5"> you are</font><font color="#CCCCCC"> now</font><font color="#E5E5E5"> is that somehow the</font>

957
00:35:00,610 --> 00:35:03,940
<font color="#CCCCCC">oxide pointer of object has been</font>

958
00:35:01,990 --> 00:35:06,669
<font color="#E5E5E5">corrupted with that value</font><font color="#CCCCCC"> x4 one foreign</font>

959
00:35:03,940 --> 00:35:08,710
foreign foreign<font color="#CCCCCC"> so when we now try to</font>

960
00:35:06,670 --> 00:35:10,450
<font color="#E5E5E5">write to property</font><font color="#CCCCCC"> or</font><font color="#E5E5E5"> dot</font><font color="#CCCCCC"> e we</font><font color="#E5E5E5"> have to go</font>

961
00:35:08,710 --> 00:35:11,890
through the<font color="#E5E5E5"> oxide pointer and that fig</font>

962
00:35:10,450 --> 00:35:13,480
is the<font color="#E5E5E5"> tagged integer it's not a varied</font>

963
00:35:11,890 --> 00:35:17,500
address<font color="#CCCCCC"> so we are</font><font color="#E5E5E5"> going to crush and</font>

964
00:35:13,480 --> 00:35:21,070
this is exactly<font color="#CCCCCC"> what we see here so</font>

965
00:35:17,500 --> 00:35:23,650
quick refresher<font color="#CCCCCC"> may</font><font color="#E5E5E5"> be when you saw that</font>

966
00:35:21,070 --> 00:35:26,170
<font color="#E5E5E5">you you thought oh maybe things can go</font>

967
00:35:23,650 --> 00:35:27,700
wrong<font color="#E5E5E5"> with that sort of stuff</font><font color="#CCCCCC"> when you</font>

968
00:35:26,170 --> 00:35:29,590
declare<font color="#CCCCCC"> a scale</font><font color="#E5E5E5"> object</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> have to keep</font>

969
00:35:27,700 --> 00:35:30,730
<font color="#E5E5E5">in mind</font><font color="#CCCCCC"> that you</font><font color="#E5E5E5"> don't use the oxide</font>

970
00:35:29,590 --> 00:35:32,290
pointer you actually inline the

971
00:35:30,730 --> 00:35:34,900
<font color="#E5E5E5">properties directly inside the</font><font color="#CCCCCC"> object</font>

972
00:35:32,290 --> 00:35:38,710
where you<font color="#CCCCCC"> would have the exhaust pointer</font>

973
00:35:34,900 --> 00:35:40,510
<font color="#E5E5E5">in under normal conditions so this is</font>

974
00:35:38,710 --> 00:35:43,060
this<font color="#E5E5E5"> is important for to understand the</font>

975
00:35:40,510 --> 00:35:44,770
body<font color="#E5E5E5"> so now let's try to break</font><font color="#CCCCCC"> down what</font>

976
00:35:43,060 --> 00:35:47,170
happens in our<font color="#E5E5E5"> triggers so I have this</font>

977
00:35:44,770 --> 00:35:48,940
function<font color="#CCCCCC"> called</font><font color="#E5E5E5"> opt and I call it</font>

978
00:35:47,170 --> 00:35:50,860
repeatedly<font color="#E5E5E5"> inside a loop with the same</font>

979
00:35:48,940 --> 00:35:52,750
<font color="#E5E5E5">scale object every time so as we've seen</font>

980
00:35:50,860 --> 00:35:54,400
this is basically to<font color="#CCCCCC"> JIT</font><font color="#E5E5E5"> optimize the</font>

981
00:35:52,750 --> 00:35:57,760
function for that<font color="#E5E5E5"> particular object</font>

982
00:35:54,400 --> 00:35:59,560
<font color="#E5E5E5">layout so</font><font color="#CCCCCC"> you know JIT compiler will</font>

983
00:35:57,760 --> 00:36:02,340
optimize<font color="#E5E5E5"> a function with only one type</font>

984
00:35:59,560 --> 00:36:05,650
<font color="#E5E5E5">account for that type and so forth</font>

985
00:36:02,340 --> 00:36:07,900
now<font color="#E5E5E5"> I access properties</font><font color="#CCCCCC"> Oh</font><font color="#E5E5E5"> that'd be an</font>

986
00:36:05,650 --> 00:36:09,580
audit a in the<font color="#E5E5E5"> nine function and the</font><font color="#CCCCCC"> app</font>

987
00:36:07,900 --> 00:36:11,740
<font color="#E5E5E5">function this is not super important</font>

988
00:36:09,580 --> 00:36:14,020
<font color="#E5E5E5">just need that to have the symbol live</font>

989
00:36:11,740 --> 00:36:17,319
<font color="#E5E5E5">so you can have the optimization to take</font>

990
00:36:14,020 --> 00:36:20,170
place then in the inline function I had

991
00:36:17,320 --> 00:36:22,630
a new property called<font color="#CCCCCC"> E and</font><font color="#E5E5E5"> now</font>

992
00:36:20,170 --> 00:36:24,100
basically in a loop<font color="#CCCCCC"> I repeatedly called</font>

993
00:36:22,630 --> 00:36:27,280
the inline function and I said property

994
00:36:24,100 --> 00:36:29,710
<font color="#CCCCCC">a all the</font><font color="#E5E5E5"> time so it's not anything</font>

995
00:36:27,280 --> 00:36:31,030
<font color="#E5E5E5">meaningful</font><font color="#CCCCCC"> I doubt</font><font color="#E5E5E5"> that you wrote that</font>

996
00:36:29,710 --> 00:36:33,040
you're going to write<font color="#CCCCCC"> JavaScript code</font>

997
00:36:31,030 --> 00:36:35,680
like<font color="#CCCCCC"> that</font><font color="#E5E5E5"> because I wouldn't see the</font>

998
00:36:33,040 --> 00:36:37,090
point but it's not<font color="#E5E5E5"> ludicrous</font><font color="#CCCCCC"> either</font><font color="#E5E5E5"> like</font>

999
00:36:35,680 --> 00:36:39,250
he doesn't rely on<font color="#CCCCCC"> any kind</font><font color="#E5E5E5"> of weird</font>

1000
00:36:37,090 --> 00:36:41,620
features like<font color="#CCCCCC"> getters proxies or</font>

1001
00:36:39,250 --> 00:36:44,350
anything<font color="#E5E5E5"> so we</font><font color="#CCCCCC"> would</font><font color="#E5E5E5"> expect the thing to</font>

1002
00:36:41,620 --> 00:36:46,270
run fine<font color="#E5E5E5"> and basically the key to</font>

1003
00:36:44,350 --> 00:36:49,720
understanding this bug in is how

1004
00:36:46,270 --> 00:36:50,950
<font color="#E5E5E5">basically things will differ when I call</font>

1005
00:36:49,720 --> 00:36:52,509
the thing with like a<font color="#CCCCCC"> scholar object</font>

1006
00:36:50,950 --> 00:36:55,299
that has<font color="#CCCCCC"> free properties and scholar</font>

1007
00:36:52,510 --> 00:36:57,760
object<font color="#CCCCCC"> it has four properties</font><font color="#E5E5E5"> so let's</font>

1008
00:36:55,300 --> 00:36:59,830
look at<font color="#E5E5E5"> that now so now I have a scanner</font>

1009
00:36:57,760 --> 00:37:02,890
object called a that<font color="#E5E5E5"> I declare with</font>

1010
00:36:59,830 --> 00:37:04,810
<font color="#E5E5E5">three in line properties' ABC and if I</font>

1011
00:37:02,890 --> 00:37:06,730
look in memory in win<font color="#CCCCCC"> we</font>

1012
00:37:04,810 --> 00:37:09,730
<font color="#E5E5E5">Viji</font><font color="#CCCCCC"> this is basically what we</font><font color="#E5E5E5"> have and</font>

1013
00:37:06,730 --> 00:37:11,230
we<font color="#CCCCCC"> can see our property ABC where we</font>

1014
00:37:09,730 --> 00:37:15,130
expect them to<font color="#E5E5E5"> be so directly in line</font>

1015
00:37:11,230 --> 00:37:17,530
<font color="#E5E5E5">inside</font><font color="#CCCCCC"> the object</font><font color="#E5E5E5"> so now I had the</font>

1016
00:37:15,130 --> 00:37:19,930
fourth property<font color="#CCCCCC"> a dot D and I look in</font>

1017
00:37:17,530 --> 00:37:21,040
memory again how it looks like<font color="#E5E5E5"> and we</font>

1018
00:37:19,930 --> 00:37:22,299
<font color="#CCCCCC">can see</font><font color="#E5E5E5"> that basically the second</font>

1019
00:37:21,040 --> 00:37:23,710
pointer<font color="#E5E5E5"> has changed this</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> the type</font>

1020
00:37:22,300 --> 00:37:26,440
<font color="#CCCCCC">pointer so it has been updated because</font>

1021
00:37:23,710 --> 00:37:29,530
<font color="#E5E5E5">the thing is now a</font><font color="#CCCCCC"> different type and we</font>

1022
00:37:26,440 --> 00:37:30,100
find our property<font color="#CCCCCC"> D which is</font><font color="#E5E5E5"> X four four</font>

1023
00:37:29,530 --> 00:37:33,310
four<font color="#CCCCCC"> four</font>

1024
00:37:30,100 --> 00:37:36,069
you know where previously there<font color="#E5E5E5"> was zero</font>

1025
00:37:33,310 --> 00:37:37,390
<font color="#CCCCCC">so nothing too crazy</font><font color="#E5E5E5"> like the key</font>

1026
00:37:36,070 --> 00:37:39,040
takeaway here is that<font color="#E5E5E5"> basically we added</font>

1027
00:37:37,390 --> 00:37:41,049
a<font color="#E5E5E5"> new property but the object</font><font color="#CCCCCC"> layout</font>

1028
00:37:39,040 --> 00:37:43,450
actually<font color="#E5E5E5"> didn't change</font><font color="#CCCCCC"> we're still</font><font color="#E5E5E5"> using</font>

1029
00:37:41,050 --> 00:37:46,810
this hub this subject header in line

1030
00:37:43,450 --> 00:37:48,399
<font color="#E5E5E5">layout now what happens with four</font>

1031
00:37:46,810 --> 00:37:50,770
properties<font color="#E5E5E5"> so here I have four</font>

1032
00:37:48,400 --> 00:37:53,200
properties ABCD and I look in in memory

1033
00:37:50,770 --> 00:37:54,550
how it looks<font color="#E5E5E5"> like and we have the same</font>

1034
00:37:53,200 --> 00:37:56,140
thing<font color="#E5E5E5"> you we can</font><font color="#CCCCCC"> find our four</font>

1035
00:37:54,550 --> 00:37:58,540
<font color="#E5E5E5">properties directly in line inside the</font>

1036
00:37:56,140 --> 00:38:01,690
<font color="#CCCCCC">object and</font><font color="#E5E5E5"> I add a fifth</font><font color="#CCCCCC"> property</font><font color="#E5E5E5"> a dot</font>

1037
00:37:58,540 --> 00:38:03,490
e<font color="#CCCCCC"> 2x four five four five and now if we</font>

1038
00:38:01,690 --> 00:38:04,630
<font color="#CCCCCC">look into memory we can</font><font color="#E5E5E5"> see that a lot</font>

1039
00:38:03,490 --> 00:38:05,799
of<font color="#E5E5E5"> things I've actually changed so</font><font color="#CCCCCC"> we</font>

1040
00:38:04,630 --> 00:38:07,900
have the type<font color="#CCCCCC"> pointer that has been</font>

1041
00:38:05,800 --> 00:38:09,820
<font color="#E5E5E5">updated as before and</font><font color="#CCCCCC"> we can</font><font color="#E5E5E5"> see that</font>

1042
00:38:07,900 --> 00:38:11,530
<font color="#CCCCCC">where</font><font color="#E5E5E5"> for one</font><font color="#CCCCCC"> for one</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> for</font><font color="#E5E5E5"> two</font><font color="#CCCCCC"> for</font>

1043
00:38:09,820 --> 00:38:13,900
<font color="#E5E5E5">two well we now</font><font color="#CCCCCC"> have like what looks</font>

1044
00:38:11,530 --> 00:38:16,030
like a very<font color="#E5E5E5"> pointer and</font><font color="#CCCCCC"> a null pointer</font>

1045
00:38:13,900 --> 00:38:17,740
<font color="#E5E5E5">then we have</font><font color="#CCCCCC"> our properties for one for</font>

1046
00:38:16,030 --> 00:38:21,790
<font color="#CCCCCC">one for two for two that some have been</font>

1047
00:38:17,740 --> 00:38:24,069
moved by like<font color="#CCCCCC"> sixteen</font><font color="#E5E5E5"> bytes and if we</font>

1048
00:38:21,790 --> 00:38:26,320
dereference the pointer that we have at

1049
00:38:24,070 --> 00:38:28,150
the first<font color="#CCCCCC"> keyword we basically find</font><font color="#E5E5E5"> the</font>

1050
00:38:26,320 --> 00:38:30,820
rest of our properties<font color="#E5E5E5"> you know X 4 3 4</font>

1051
00:38:28,150 --> 00:38:33,130
<font color="#CCCCCC">3 4 4 4 4 4 5 4 5</font><font color="#E5E5E5"> and what we are</font>

1052
00:38:30,820 --> 00:38:35,230
<font color="#E5E5E5">looking at here is that famous</font><font color="#CCCCCC"> oxfords</font>

1053
00:38:33,130 --> 00:38:37,270
pointer so the key takeaway here is that

1054
00:38:35,230 --> 00:38:39,430
<font color="#E5E5E5">going from our object with</font><font color="#CCCCCC"> 4 properties</font>

1055
00:38:37,270 --> 00:38:41,740
<font color="#E5E5E5">and adding a fifth property</font><font color="#CCCCCC"> we</font><font color="#E5E5E5"> actually</font>

1056
00:38:39,430 --> 00:38:43,480
completely<font color="#CCCCCC"> modify the object</font><font color="#E5E5E5"> internally</font>

1057
00:38:41,740 --> 00:38:46,080
like<font color="#E5E5E5"> it switches from that</font><font color="#CCCCCC"> object header</font>

1058
00:38:43,480 --> 00:38:48,550
in line layout<font color="#CCCCCC"> to</font><font color="#E5E5E5"> the regular layout and</font>

1059
00:38:46,080 --> 00:38:49,930
this<font color="#E5E5E5"> is basically the key to</font>

1060
00:38:48,550 --> 00:38:53,530
understanding why<font color="#CCCCCC"> this thing is actually</font>

1061
00:38:49,930 --> 00:38:55,210
buggy so now like the question is when

1062
00:38:53,530 --> 00:38:56,950
we set<font color="#E5E5E5"> that property</font><font color="#CCCCCC"> or dot</font><font color="#E5E5E5"> e</font><font color="#CCCCCC"> which</font>

1063
00:38:55,210 --> 00:38:59,350
effectively adds a new property<font color="#CCCCCC"> to a</font>

1064
00:38:56,950 --> 00:39:01,839
scalar object<font color="#E5E5E5"> what happens if the JIT</font>

1065
00:38:59,350 --> 00:39:03,310
compiler somehow fails to account that

1066
00:39:01,840 --> 00:39:05,500
<font color="#E5E5E5">this might change the layout and</font>

1067
00:39:03,310 --> 00:39:07,390
therefore or<font color="#E5E5E5"> miss the type check saying</font>

1068
00:39:05,500 --> 00:39:09,280
oh this won't<font color="#CCCCCC"> change the layout I don't</font>

1069
00:39:07,390 --> 00:39:13,390
<font color="#CCCCCC">read</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> check if the thing is</font><font color="#E5E5E5"> of certain</font>

1070
00:39:09,280 --> 00:39:15,670
type it will still be<font color="#CCCCCC"> a 9</font><font color="#E5E5E5"> well this</font><font color="#CCCCCC"> ODOT</font>

1071
00:39:13,390 --> 00:39:17,859
a equals<font color="#CCCCCC"> 4 1 4</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> 1 will basically end</font>

1072
00:39:15,670 --> 00:39:18,280
up writing where<font color="#E5E5E5"> ordered a previously</font>

1073
00:39:17,860 --> 00:39:20,680
was

1074
00:39:18,280 --> 00:39:22,660
<font color="#E5E5E5">is directly inside</font><font color="#CCCCCC"> the object but</font><font color="#E5E5E5"> now we</font>

1075
00:39:20,680 --> 00:39:27,160
are using an ox last point us we

1076
00:39:22,660 --> 00:39:28,899
basically<font color="#E5E5E5"> right</font><font color="#CCCCCC"> overwrite a pointer so</font>

1077
00:39:27,160 --> 00:39:31,930
so yeah that's that's<font color="#CCCCCC"> basically the</font>

1078
00:39:28,900 --> 00:39:35,500
trigger I hope it was easy<font color="#E5E5E5"> kind</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> easy</font>

1079
00:39:31,930 --> 00:39:35,859
<font color="#CCCCCC">to follow</font><font color="#E5E5E5"> so now let's let's take</font><font color="#CCCCCC"> a step</font>

1080
00:39:35,500 --> 00:39:38,470
<font color="#E5E5E5">back</font>

1081
00:39:35,860 --> 00:39:39,880
so the primitive we have is we are able

1082
00:39:38,470 --> 00:39:42,490
<font color="#E5E5E5">to override</font><font color="#CCCCCC"> the opposite point</font><font color="#E5E5E5"> of an</font>

1083
00:39:39,880 --> 00:39:43,990
object with a value<font color="#E5E5E5"> from JavaScript so</font>

1084
00:39:42,490 --> 00:39:46,839
there<font color="#E5E5E5"> are limitations associated with</font>

1085
00:39:43,990 --> 00:39:48,549
that because as I've introduced<font color="#E5E5E5"> you</font>

1086
00:39:46,840 --> 00:39:50,110
<font color="#CCCCCC">can't generate a right point</font><font color="#E5E5E5"> of value</font>

1087
00:39:48,550 --> 00:39:51,910
<font color="#E5E5E5">from JavaScript</font><font color="#CCCCCC"> you know any integer</font>

1088
00:39:50,110 --> 00:39:54,810
that<font color="#CCCCCC"> you</font><font color="#E5E5E5"> write will be tagged with the</font>

1089
00:39:51,910 --> 00:39:57,220
48<font color="#E5E5E5"> bit set so that's not a valid address</font>

1090
00:39:54,810 --> 00:39:59,200
<font color="#E5E5E5">so that goes for either setting the</font>

1091
00:39:57,220 --> 00:40:02,200
pointer or actually writing a value in

1092
00:39:59,200 --> 00:40:03,970
memory so we need to<font color="#E5E5E5"> further corrupt</font>

1093
00:40:02,200 --> 00:40:06,189
<font color="#E5E5E5">other objects and if you've ever done</font>

1094
00:40:03,970 --> 00:40:08,230
browser expectations<font color="#E5E5E5"> you know</font><font color="#CCCCCC"> that array</font>

1095
00:40:06,190 --> 00:40:10,480
buffers are<font color="#E5E5E5"> probably the greatest gift</font>

1096
00:40:08,230 --> 00:40:13,600
<font color="#E5E5E5">that was given to us so</font><font color="#CCCCCC"> we'll just</font><font color="#E5E5E5"> use</font>

1097
00:40:10,480 --> 00:40:16,210
<font color="#CCCCCC">that we are now walk through</font><font color="#E5E5E5"> the exploit</font>

1098
00:40:13,600 --> 00:40:17,890
<font color="#E5E5E5">the code will</font><font color="#CCCCCC"> actually be</font><font color="#E5E5E5"> raised</font><font color="#CCCCCC"> so try</font>

1099
00:40:16,210 --> 00:40:19,240
to follow<font color="#CCCCCC"> along but everything</font><font color="#E5E5E5"> will be</font>

1100
00:40:17,890 --> 00:40:20,770
<font color="#CCCCCC">erased right</font><font color="#E5E5E5"> after the talk</font><font color="#CCCCCC"> if you want</font>

1101
00:40:19,240 --> 00:40:22,509
<font color="#CCCCCC">to</font><font color="#E5E5E5"> check it out so the first</font><font color="#CCCCCC"> thing I do</font>

1102
00:40:20,770 --> 00:40:25,630
right<font color="#CCCCCC"> before I call my</font><font color="#E5E5E5"> trigger is I</font>

1103
00:40:22,510 --> 00:40:27,550
declare this global object<font color="#CCCCCC"> of</font><font color="#E5E5E5"> set</font><font color="#CCCCCC"> nine</font>

1104
00:40:25,630 --> 00:40:32,590
<font color="#E5E5E5">properties to it and I declare a global</font>

1105
00:40:27,550 --> 00:40:35,530
array buffer so nothing crazy<font color="#CCCCCC"> and now</font>

1106
00:40:32,590 --> 00:40:36,850
basically<font color="#E5E5E5"> I use my my buggy function</font><font color="#CCCCCC"> and</font>

1107
00:40:35,530 --> 00:40:39,310
here we can see two<font color="#CCCCCC"> things I have</font>

1108
00:40:36,850 --> 00:40:41,259
<font color="#E5E5E5">changed instead of setting a 2 X</font><font color="#CCCCCC"> 4</font><font color="#E5E5E5"> 1 4 1</font>

1109
00:40:39,310 --> 00:40:43,299
<font color="#E5E5E5">4 1 I set it to of the global object</font>

1110
00:40:41,260 --> 00:40:44,650
<font color="#E5E5E5">what that does is</font><font color="#CCCCCC"> that creates the</font>

1111
00:40:43,300 --> 00:40:47,800
memory layout that<font color="#E5E5E5"> you</font><font color="#CCCCCC"> have on the right</font>

1112
00:40:44,650 --> 00:40:49,470
<font color="#E5E5E5">where you</font><font color="#CCCCCC"> have the</font><font color="#E5E5E5"> local object</font><font color="#CCCCCC"> Oh which</font>

1113
00:40:47,800 --> 00:40:53,470
<font color="#E5E5E5">oxfords pointer</font><font color="#CCCCCC"> actually now points</font>

1114
00:40:49,470 --> 00:40:55,600
<font color="#E5E5E5">inside our global object and now when I</font>

1115
00:40:53,470 --> 00:40:59,919
execute<font color="#CCCCCC"> Oh</font><font color="#E5E5E5"> dot e equals target I</font>

1116
00:40:55,600 --> 00:41:03,880
basically make my global object<font color="#CCCCCC"> up point</font>

1117
00:40:59,920 --> 00:41:05,260
<font color="#E5E5E5">inside the array buffer itself so all</font><font color="#CCCCCC"> of</font>

1118
00:41:03,880 --> 00:41:07,030
<font color="#CCCCCC">that basically to achieve that memory</font>

1119
00:41:05,260 --> 00:41:09,640
<font color="#E5E5E5">layout which we have a global</font><font color="#CCCCCC"> object</font>

1120
00:41:07,030 --> 00:41:12,220
whose<font color="#CCCCCC"> oxwas</font><font color="#E5E5E5"> pointer points inside a</font>

1121
00:41:09,640 --> 00:41:13,359
<font color="#E5E5E5">target or</font><font color="#CCCCCC"> e buffer</font><font color="#E5E5E5"> and an array buffer</font>

1122
00:41:12,220 --> 00:41:15,250
<font color="#E5E5E5">is really nice because there's this</font>

1123
00:41:13,360 --> 00:41:18,190
buffer field which is basically you know

1124
00:41:15,250 --> 00:41:22,420
<font color="#E5E5E5">the pointer to where memory for that</font>

1125
00:41:18,190 --> 00:41:23,950
<font color="#E5E5E5">very buffer is basically but we still</font>

1126
00:41:22,420 --> 00:41:25,840
have the<font color="#E5E5E5"> same issue which is we really</font>

1127
00:41:23,950 --> 00:41:27,129
<font color="#E5E5E5">want to</font><font color="#CCCCCC"> corrode the buffer property but</font>

1128
00:41:25,840 --> 00:41:28,660
we can't actually set it to anything

1129
00:41:27,130 --> 00:41:30,160
arbitrary at the moment because we<font color="#E5E5E5"> can</font>

1130
00:41:28,660 --> 00:41:31,109
only overwrite it with<font color="#CCCCCC"> something</font><font color="#E5E5E5"> from</font>

1131
00:41:30,160 --> 00:41:32,848
JavaScript

1132
00:41:31,109 --> 00:41:36,390
so we cannot sell<font color="#CCCCCC"> it to fully control</font>

1133
00:41:32,849 --> 00:41:38,609
<font color="#E5E5E5">address so what we do now is we</font>

1134
00:41:36,390 --> 00:41:40,618
basically<font color="#E5E5E5"> just use another</font><font color="#CCCCCC"> rebirth</font>

1135
00:41:38,609 --> 00:41:42,900
<font color="#CCCCCC">object so I declare another</font><font color="#E5E5E5"> a rebirth</font>

1136
00:41:40,619 --> 00:41:45,989
object called<font color="#CCCCCC"> hax</font><font color="#E5E5E5"> and basically by doing</font>

1137
00:41:42,900 --> 00:41:49,079
<font color="#E5E5E5">ab dot h what happens is I'm actually</font>

1138
00:41:45,989 --> 00:41:52,019
writing the buffer property of target to

1139
00:41:49,079 --> 00:41:53,759
point inside acts directly<font color="#CCCCCC"> what that</font>

1140
00:41:52,019 --> 00:41:54,779
gives us now is that array buffers are

1141
00:41:53,759 --> 00:41:56,729
really nice because<font color="#E5E5E5"> you can declare</font>

1142
00:41:54,779 --> 00:41:58,619
<font color="#E5E5E5">typed arrays on them and type</font><font color="#CCCCCC"> Tory's</font>

1143
00:41:56,729 --> 00:42:01,558
give you a way to actually<font color="#E5E5E5"> read and</font>

1144
00:41:58,619 --> 00:42:02,789
write memory<font color="#CCCCCC"> values that are not</font><font color="#E5E5E5"> going</font>

1145
00:42:01,559 --> 00:42:06,180
to be tagged<font color="#CCCCCC"> or anything they are</font><font color="#E5E5E5"> just</font>

1146
00:42:02,789 --> 00:42:06,989
going to<font color="#E5E5E5"> be stored directly with their</font>

1147
00:42:06,180 --> 00:42:08,940
<font color="#CCCCCC">representation</font>

1148
00:42:06,989 --> 00:42:11,219
so now by creating the type<font color="#CCCCCC"> Tory</font><font color="#E5E5E5"> on</font>

1149
00:42:08,940 --> 00:42:14,160
target<font color="#E5E5E5"> I'm actually able</font><font color="#CCCCCC"> to modify what</font>

1150
00:42:11,219 --> 00:42:15,630
<font color="#E5E5E5">whatever is in acts with</font><font color="#CCCCCC"> the values I</font>

1151
00:42:14,160 --> 00:42:19,140
want<font color="#E5E5E5"> so basically and now I have full</font>

1152
00:42:15,630 --> 00:42:22,170
control<font color="#E5E5E5"> over the hax data so basically</font>

1153
00:42:19,140 --> 00:42:25,618
with that<font color="#E5E5E5"> we can defeat a SLR the cool</font>

1154
00:42:22,170 --> 00:42:27,479
thing about chakra is that sorry<font color="#CCCCCC"> objects</font>

1155
00:42:25,619 --> 00:42:30,089
<font color="#E5E5E5">have a V table</font><font color="#CCCCCC"> pointer</font><font color="#E5E5E5"> so just by</font>

1156
00:42:27,479 --> 00:42:32,669
creating<font color="#E5E5E5"> a type</font><font color="#CCCCCC"> Tory on on my global</font>

1157
00:42:30,089 --> 00:42:34,229
<font color="#E5E5E5">array buffer and reading out of set 0 I</font>

1158
00:42:32,670 --> 00:42:36,809
<font color="#CCCCCC">read the V table pointer so</font><font color="#E5E5E5"> that gives</font>

1159
00:42:34,229 --> 00:42:39,629
<font color="#CCCCCC">me</font><font color="#E5E5E5"> the ability to</font><font color="#CCCCCC"> lick the chakra</font><font color="#E5E5E5"> based</font>

1160
00:42:36,809 --> 00:42:42,269
address and by<font color="#E5E5E5"> reading a view out of</font><font color="#CCCCCC"> set</font>

1161
00:42:39,630 --> 00:42:44,369
<font color="#CCCCCC">7r in the buffer pointer that</font><font color="#E5E5E5"> gives me a</font>

1162
00:42:42,269 --> 00:42:48,089
<font color="#CCCCCC">location in memory where I can put</font>

1163
00:42:44,369 --> 00:42:51,059
arbitrary<font color="#CCCCCC"> amount of data basically</font><font color="#E5E5E5"> and</font>

1164
00:42:48,089 --> 00:42:53,279
now with<font color="#CCCCCC"> that I can construct</font><font color="#E5E5E5"> a read and</font>

1165
00:42:51,059 --> 00:42:55,519
write primitive<font color="#E5E5E5"> totally repeatable</font>

1166
00:42:53,279 --> 00:42:58,319
totally arbitrary<font color="#CCCCCC"> which</font><font color="#E5E5E5"> is very nice</font>

1167
00:42:55,519 --> 00:42:59,399
<font color="#CCCCCC">this</font><font color="#E5E5E5"> is the code</font><font color="#CCCCCC"> for it so basically</font><font color="#E5E5E5"> the</font>

1168
00:42:58,319 --> 00:43:03,390
<font color="#CCCCCC">first thing it does in both read and</font>

1169
00:42:59,400 --> 00:43:05,130
<font color="#CCCCCC">write</font><font color="#E5E5E5"> I I write to offset 7 which</font>

1170
00:43:03,390 --> 00:43:07,229
basically corrupts the buffer of<font color="#E5E5E5"> hacks</font>

1171
00:43:05,130 --> 00:43:08,969
<font color="#E5E5E5">and now I can just create a typed array</font>

1172
00:43:07,229 --> 00:43:10,890
on hacks<font color="#E5E5E5"> and that will</font><font color="#CCCCCC"> actually read and</font>

1173
00:43:08,969 --> 00:43:13,680
write from an arbitrary<font color="#CCCCCC"> memory location</font>

1174
00:43:10,890 --> 00:43:15,900
so that<font color="#CCCCCC"> basically gives me full</font>

1175
00:43:13,680 --> 00:43:18,899
read/write<font color="#E5E5E5"> and that's enough to</font><font color="#CCCCCC"> get a C</font>

1176
00:43:15,900 --> 00:43:23,039
at<font color="#E5E5E5"> least</font><font color="#CCCCCC"> on</font><font color="#E5E5E5"> chakra so I have a nice demo</font>

1177
00:43:18,900 --> 00:43:25,979
<font color="#E5E5E5">that story</font><font color="#CCCCCC"> non exciting</font><font color="#E5E5E5"> because</font><font color="#CCCCCC"> you will</font>

1178
00:43:23,039 --> 00:43:28,969
just<font color="#E5E5E5"> see a calculator appear but I I</font>

1179
00:43:25,979 --> 00:43:31,799
<font color="#E5E5E5">spent like seven hours making it work</font>

1180
00:43:28,969 --> 00:43:37,330
<font color="#E5E5E5">which is way</font><font color="#CCCCCC"> more I'm you know I'm proud</font>

1181
00:43:31,799 --> 00:43:39,250
to admit<font color="#E5E5E5"> so yes right</font>

1182
00:43:37,330 --> 00:43:52,060
so I just have to<font color="#CCCCCC"> check our bill to run</font>

1183
00:43:39,250 --> 00:43:54,400
my exploit and that's it thank you<font color="#CCCCCC"> sorry</font>

1184
00:43:52,060 --> 00:43:55,810
so quick notes about exposition this is

1185
00:43:54,400 --> 00:43:57,730
stuff that<font color="#CCCCCC"> you that you are</font><font color="#E5E5E5"> going to see</font>

1186
00:43:55,810 --> 00:43:59,740
in the thing<font color="#E5E5E5"> you might</font><font color="#CCCCCC"> have noticed I</font>

1187
00:43:57,730 --> 00:44:02,740
didn't run<font color="#CCCCCC"> the finger net because</font>

1188
00:43:59,740 --> 00:44:05,979
exploitation in edge is quite<font color="#E5E5E5"> painful so</font>

1189
00:44:02,740 --> 00:44:08,560
well<font color="#E5E5E5"> playing Microsoft I guess</font><font color="#CCCCCC"> because</font>

1190
00:44:05,980 --> 00:44:10,450
<font color="#CCCCCC">you</font><font color="#E5E5E5"> have to do for up suffer at the</font><font color="#CCCCCC"> core</font>

1191
00:44:08,560 --> 00:44:12,460
finger is<font color="#CCCCCC"> without primitives which which</font>

1192
00:44:10,450 --> 00:44:14,649
are absolutely<font color="#E5E5E5"> absolute read and</font>

1193
00:44:12,460 --> 00:44:16,600
absolute right<font color="#CCCCCC"> even though we have to do</font>

1194
00:44:14,650 --> 00:44:17,800
<font color="#E5E5E5">for rope which is painful it's mainly a</font>

1195
00:44:16,600 --> 00:44:19,420
<font color="#CCCCCC">matter of flicking a stack address</font>

1196
00:44:17,800 --> 00:44:23,530
<font color="#E5E5E5">because there's no written frog out</font><font color="#CCCCCC"> of</font>

1197
00:44:19,420 --> 00:44:25,390
<font color="#E5E5E5">what not so</font><font color="#CCCCCC"> in</font><font color="#E5E5E5"> licking a stack</font>

1198
00:44:23,530 --> 00:44:27,670
addressing in a web browser<font color="#E5E5E5"> is usually</font>

1199
00:44:25,390 --> 00:44:31,900
pretty easy<font color="#E5E5E5"> in chakra you have this</font>

1200
00:44:27,670 --> 00:44:33,880
global<font color="#CCCCCC"> Fred context structure which will</font>

1201
00:44:31,900 --> 00:44:35,590
<font color="#E5E5E5">be like to know how to add</font><font color="#CCCCCC"> known offset</font>

1202
00:44:33,880 --> 00:44:36,910
inside<font color="#E5E5E5"> the chakra yellow you can</font>

1203
00:44:35,590 --> 00:44:38,320
actually read in memory there and you

1204
00:44:36,910 --> 00:44:40,480
will have<font color="#E5E5E5"> to stack limit so that gives</font>

1205
00:44:38,320 --> 00:44:41,980
you you know a stack lower bound<font color="#E5E5E5"> and you</font>

1206
00:44:40,480 --> 00:44:43,840
can just compute a stack address on<font color="#CCCCCC"> that</font>

1207
00:44:41,980 --> 00:44:49,290
this<font color="#E5E5E5"> is what I use in my exploit if you</font>

1208
00:44:43,840 --> 00:44:52,150
want to check it<font color="#E5E5E5"> out</font><font color="#CCCCCC"> so in conclusion</font>

1209
00:44:49,290 --> 00:44:53,680
<font color="#E5E5E5">JIT compilation is a really complex</font>

1210
00:44:52,150 --> 00:44:55,720
software<font color="#CCCCCC"> engineering problem</font><font color="#E5E5E5"> especially</font>

1211
00:44:53,680 --> 00:44:57,520
when you<font color="#E5E5E5"> don't have type</font><font color="#CCCCCC"> information I</font>

1212
00:44:55,720 --> 00:44:59,200
know it can seem hard<font color="#E5E5E5"> to get into that's</font>

1213
00:44:57,520 --> 00:45:01,480
definitely how I felt when I started<font color="#CCCCCC"> and</font>

1214
00:44:59,200 --> 00:45:05,470
my hope<font color="#E5E5E5"> is that this presentation can</font>

1215
00:45:01,480 --> 00:45:07,690
get some<font color="#E5E5E5"> people to get into it and even</font>

1216
00:45:05,470 --> 00:45:09,850
though chakras they might be numbered as

1217
00:45:07,690 --> 00:45:12,250
you know even<font color="#CCCCCC"> though the</font><font color="#E5E5E5"> implementation</font>

1218
00:45:09,850 --> 00:45:14,350
<font color="#E5E5E5">details will differ will differ from one</font>

1219
00:45:12,250 --> 00:45:16,570
<font color="#E5E5E5">engine</font><font color="#CCCCCC"> to another the concepts</font><font color="#E5E5E5"> I talked</font>

1220
00:45:14,350 --> 00:45:18,279
<font color="#CCCCCC">about you will find them</font><font color="#E5E5E5"> in every engine</font>

1221
00:45:16,570 --> 00:45:19,900
so I hope you'll still get some value

1222
00:45:18,280 --> 00:45:23,400
out<font color="#CCCCCC"> of the stock</font><font color="#E5E5E5"> if you don't intend to</font>

1223
00:45:19,900 --> 00:45:26,050
catch<font color="#E5E5E5"> chakra but</font><font color="#CCCCCC"> other</font><font color="#E5E5E5"> jet engines and</font>

1224
00:45:23,400 --> 00:45:28,650
yeah that's it<font color="#CCCCCC"> for me so thank you very</font>

1225
00:45:26,050 --> 00:45:28,650
<font color="#E5E5E5">much and</font>

1226
00:45:31,020 --> 00:45:44,130
I guess we have<font color="#E5E5E5"> time for question yes</font>

1227
00:45:39,560 --> 00:45:46,549
<font color="#E5E5E5">questions preferably at the opposite end</font>

1228
00:45:44,130 --> 00:45:46,550
of the<font color="#E5E5E5"> room</font>

1229
00:45:57,670 --> 00:46:04,869
<font color="#E5E5E5">thank you great talk it's if it's a real</font>

1230
00:46:02,410 --> 00:46:09,759
pleasure to<font color="#E5E5E5"> see people</font><font color="#CCCCCC"> abused</font><font color="#E5E5E5"> JIT</font>

1231
00:46:04,869 --> 00:46:13,420
compilers like this<font color="#E5E5E5"> look at the code</font><font color="#CCCCCC"> did</font>

1232
00:46:09,760 --> 00:46:17,970
<font color="#CCCCCC">he get</font><font color="#E5E5E5"> any sense of whether the authors</font>

1233
00:46:13,420 --> 00:46:20,829
were<font color="#E5E5E5"> using any kind of formal</font><font color="#CCCCCC"> methods or</font>

1234
00:46:17,970 --> 00:46:26,709
some other ways<font color="#CCCCCC"> to</font><font color="#E5E5E5"> convince themselves</font>

1235
00:46:20,829 --> 00:46:31,869
<font color="#E5E5E5">of the correctness of this code</font><font color="#CCCCCC"> no it's</font>

1236
00:46:26,710 --> 00:46:34,960
<font color="#E5E5E5">just straight-up hacked yeah yeah like</font>

1237
00:46:31,869 --> 00:46:36,849
JIT compiler is hard<font color="#E5E5E5"> I like</font><font color="#CCCCCC"> I don't</font><font color="#E5E5E5"> get</font>

1238
00:46:34,960 --> 00:46:38,349
<font color="#E5E5E5">the sense</font><font color="#CCCCCC"> that there's much for more</font>

1239
00:46:36,849 --> 00:46:41,650
<font color="#CCCCCC">verification of</font><font color="#E5E5E5"> stuff like that going</font><font color="#CCCCCC"> on</font>

1240
00:46:38,349 --> 00:46:43,210
<font color="#CCCCCC">I think at the other day</font><font color="#E5E5E5"> like these</font>

1241
00:46:41,650 --> 00:46:44,859
people<font color="#E5E5E5"> working on JIT compiler our</font>

1242
00:46:43,210 --> 00:46:48,549
compiler engineers not security

1243
00:46:44,859 --> 00:46:50,529
engineers so sorry I<font color="#E5E5E5"> don't know how much</font>

1244
00:46:48,549 --> 00:46:52,150
<font color="#E5E5E5">is done inside</font><font color="#CCCCCC"> Microsoft in terms of you</font>

1245
00:46:50,530 --> 00:46:54,309
know chakra but as far as<font color="#E5E5E5"> like</font>

1246
00:46:52,150 --> 00:46:56,470
<font color="#E5E5E5">development team is concerned</font><font color="#CCCCCC"> I don't</font>

1247
00:46:54,309 --> 00:46:58,270
<font color="#CCCCCC">think so but I could</font><font color="#E5E5E5"> be</font><font color="#CCCCCC"> wrong but that's</font>

1248
00:46:56,470 --> 00:47:01,980
not my<font color="#CCCCCC"> impression that they were</font><font color="#E5E5E5"> doing</font>

1249
00:46:58,270 --> 00:47:01,980
in character stuff thank you

1250
00:47:07,020 --> 00:47:17,320
anybody else so what's gonna<font color="#E5E5E5"> be your</font>

1251
00:47:13,000 --> 00:47:20,550
next<font color="#CCCCCC"> target once chakra is dead it's</font>

1252
00:47:17,320 --> 00:47:20,550
still a touchy subject

1253
00:47:21,220 --> 00:47:26,049
no I honestly don't know<font color="#CCCCCC"> I'm still</font>

1254
00:47:24,340 --> 00:47:29,859
<font color="#E5E5E5">really interested in compiles</font><font color="#CCCCCC"> I</font>

1255
00:47:26,050 --> 00:47:31,240
don't<font color="#E5E5E5"> think of you know I don't think</font>

1256
00:47:29,859 --> 00:47:33,609
<font color="#CCCCCC">I've explored everything</font><font color="#E5E5E5"> there is to</font>

1257
00:47:31,240 --> 00:47:35,618
explore in that field<font color="#CCCCCC"> so probably</font>

1258
00:47:33,609 --> 00:47:43,450
<font color="#E5E5E5">another engine</font><font color="#CCCCCC"> I'm not set on</font><font color="#E5E5E5"> which one</font>

1259
00:47:35,619 --> 00:47:45,430
yet now have you looked a bit at

1260
00:47:43,450 --> 00:47:48,250
<font color="#E5E5E5">typescript and stuff like that and how</font>

1261
00:47:45,430 --> 00:47:50,049
<font color="#CCCCCC">it impacts the code that the cheat</font>

1262
00:47:48,250 --> 00:47:52,890
generates is it better or and stuff<font color="#E5E5E5"> like</font>

1263
00:47:50,050 --> 00:47:52,890
that<font color="#E5E5E5"> not at all</font>

1264
00:48:01,710 --> 00:48:08,740
<font color="#E5E5E5">okay if there's no further questions</font>

1265
00:48:04,630 --> 00:48:11,170
let's wrap it<font color="#E5E5E5"> up and then we see each</font>

1266
00:48:08,740 --> 00:48:16,709
other<font color="#E5E5E5"> again</font><font color="#CCCCCC"> at coverage guided fuzzing</font>

1267
00:48:11,170 --> 00:48:16,710
<font color="#E5E5E5">you for us be with this caller at 6:30</font>

