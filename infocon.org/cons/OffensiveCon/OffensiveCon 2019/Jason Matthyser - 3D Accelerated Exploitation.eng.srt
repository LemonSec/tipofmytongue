1
00:00:02,689 --> 00:00:06,990
<font color="#E5E5E5">all right</font>

2
00:00:04,740 --> 00:00:09,269
good morning offensive<font color="#CCCCCC"> con</font><font color="#E5E5E5"> my name is</font>

3
00:00:06,990 --> 00:00:11,580
Jason I'm a security<font color="#E5E5E5"> consultant at MWR</font>

4
00:00:09,269 --> 00:00:13,920
<font color="#E5E5E5">and what I want to be showing you guys</font>

5
00:00:11,580 --> 00:00:15,960
today<font color="#CCCCCC"> is how we</font><font color="#E5E5E5"> can files 3d</font>

6
00:00:13,920 --> 00:00:18,840
acceleration and eventually opponent

7
00:00:15,960 --> 00:00:21,060
<font color="#E5E5E5">with some self-imposed restrictions to</font>

8
00:00:18,840 --> 00:00:22,769
make it a bit more<font color="#E5E5E5"> interesting the idea</font>

9
00:00:21,060 --> 00:00:26,400
<font color="#CCCCCC">with this talk is to cover</font><font color="#E5E5E5"> a lot of</font>

10
00:00:22,769 --> 00:00:30,269
bread<font color="#E5E5E5"> so I'm asking you to</font><font color="#CCCCCC"> really</font><font color="#E5E5E5"> stick</font>

11
00:00:26,400 --> 00:00:31,470
by me with us so first<font color="#E5E5E5"> off what is 3d</font>

12
00:00:30,269 --> 00:00:32,189
acceleration as it pertains to

13
00:00:31,470 --> 00:00:35,219
VirtualBox

14
00:00:32,189 --> 00:00:37,079
so<font color="#E5E5E5"> VirtualBox makes use of technology</font>

15
00:00:35,219 --> 00:00:39,090
called chromium which is essentially

16
00:00:37,079 --> 00:00:42,270
<font color="#CCCCCC">just an abstraction layer over</font><font color="#E5E5E5"> OpenGL</font>

17
00:00:39,090 --> 00:00:44,190
and this accepts chromium messages which

18
00:00:42,270 --> 00:00:46,050
<font color="#E5E5E5">they which define graphical operations</font>

19
00:00:44,190 --> 00:00:48,599
<font color="#E5E5E5">and it's within the parsing of those</font>

20
00:00:46,050 --> 00:00:50,550
messages<font color="#CCCCCC"> that the actual</font><font color="#E5E5E5"> bug set now</font>

21
00:00:48,600 --> 00:00:51,090
chromium can be can be used as a

22
00:00:50,550 --> 00:00:53,010
<font color="#E5E5E5">standalone</font>

23
00:00:51,090 --> 00:00:54,510
<font color="#E5E5E5">TCP server or as in the</font><font color="#CCCCCC"> case of</font>

24
00:00:53,010 --> 00:00:58,980
VirtualBox and<font color="#E5E5E5"> embedded software</font>

25
00:00:54,510 --> 00:00:59,879
<font color="#CCCCCC">components now</font><font color="#E5E5E5"> guest additions can</font>

26
00:00:58,980 --> 00:01:01,379
<font color="#E5E5E5">essentially be thought of as a</font>

27
00:00:59,879 --> 00:01:03,960
<font color="#CCCCCC">collection of services</font><font color="#E5E5E5"> where 3d</font>

28
00:01:01,379 --> 00:01:04,860
acceleration is just one<font color="#CCCCCC"> of them</font><font color="#E5E5E5"> and the</font>

29
00:01:03,960 --> 00:01:07,320
way that you<font color="#E5E5E5"> interact with these</font>

30
00:01:04,860 --> 00:01:10,110
<font color="#CCCCCC">services is by speaking</font><font color="#E5E5E5"> the HT</font><font color="#CCCCCC"> cm</font>

31
00:01:07,320 --> 00:01:12,600
protocol and this protocol can<font color="#CCCCCC"> be spoken</font>

32
00:01:10,110 --> 00:01:16,280
<font color="#E5E5E5">to the</font><font color="#CCCCCC"> hosts from the guest via device</font>

33
00:01:12,600 --> 00:01:19,220
files within<font color="#E5E5E5"> the guest and this is all</font>

34
00:01:16,280 --> 00:01:21,840
<font color="#E5E5E5">accessible to unprivileged guest users</font>

35
00:01:19,220 --> 00:01:24,509
now one of the main interface is exposed

36
00:01:21,840 --> 00:01:26,820
<font color="#E5E5E5">by these services is a function called</font>

37
00:01:24,509 --> 00:01:28,860
<font color="#CCCCCC">SV</font><font color="#E5E5E5"> sequel so you'll find them in all</font><font color="#CCCCCC"> of</font>

38
00:01:26,820 --> 00:01:32,250
these various<font color="#CCCCCC"> guest additions services</font>

39
00:01:28,860 --> 00:01:34,740
and they essentially<font color="#E5E5E5"> receive the HT same</font>

40
00:01:32,250 --> 00:01:36,150
messages<font color="#E5E5E5"> take out some parameters</font><font color="#CCCCCC"> and do</font>

41
00:01:34,740 --> 00:01:39,860
something with that<font color="#CCCCCC"> so a chromium</font>

42
00:01:36,150 --> 00:01:39,860
message will be<font color="#E5E5E5"> one of these parameters</font>

43
00:01:40,909 --> 00:01:45,799
so quick look at how we can fuzz

44
00:01:43,439 --> 00:01:47,639
VirtualBox<font color="#E5E5E5"> or 3d acceleration</font>

45
00:01:45,799 --> 00:01:49,259
essentially there's not a whole<font color="#CCCCCC"> lot that</font>

46
00:01:47,640 --> 00:01:53,939
<font color="#E5E5E5">we need</font><font color="#CCCCCC"> to actually</font><font color="#E5E5E5"> interact with</font>

47
00:01:49,259 --> 00:01:56,100
chromium<font color="#E5E5E5"> if we want to</font><font color="#CCCCCC"> basically we just</font>

48
00:01:53,939 --> 00:01:58,110
<font color="#CCCCCC">need to</font><font color="#E5E5E5"> initialize the chromium server</font>

49
00:01:56,100 --> 00:02:01,649
which there's a convenient export for

50
00:01:58,110 --> 00:02:03,390
from the<font color="#E5E5E5"> shed</font><font color="#CCCCCC"> see our OpenGL module we</font>

51
00:02:01,649 --> 00:02:05,189
need<font color="#CCCCCC"> to be able</font><font color="#E5E5E5"> to connect disconnect</font>

52
00:02:03,390 --> 00:02:07,380
and<font color="#E5E5E5"> send chromium messages to basically</font>

53
00:02:05,189 --> 00:02:08,669
<font color="#CCCCCC">simulate everything that a guest</font>

54
00:02:07,380 --> 00:02:12,049
<font color="#E5E5E5">operating system would do when</font>

55
00:02:08,669 --> 00:02:13,829
interacting<font color="#E5E5E5"> with 3d acceleration now</font>

56
00:02:12,050 --> 00:02:16,560
looking at what I Chrome

57
00:02:13,830 --> 00:02:19,440
message<font color="#E5E5E5"> looks like how to craft these on</font>

58
00:02:16,560 --> 00:02:21,360
the<font color="#E5E5E5"> Left you'll</font><font color="#CCCCCC"> see to chromium messages</font>

59
00:02:19,440 --> 00:02:23,970
<font color="#E5E5E5">and one of the biggest things here in</font>

60
00:02:21,360 --> 00:02:27,120
this<font color="#E5E5E5"> message is the CR message ah</font><font color="#CCCCCC"> Kurds</font>

61
00:02:23,970 --> 00:02:29,760
<font color="#E5E5E5">message type so this</font><font color="#CCCCCC"> prompt chromium to</font>

62
00:02:27,120 --> 00:02:31,860
execute an<font color="#E5E5E5"> opcode handler so you specify</font>

63
00:02:29,760 --> 00:02:33,840
<font color="#CCCCCC">op</font><font color="#E5E5E5"> codes in this message</font><font color="#CCCCCC"> and there's</font><font color="#E5E5E5"> a</font>

64
00:02:31,860 --> 00:02:37,050
<font color="#E5E5E5">one-to-one relationship</font><font color="#CCCCCC"> between</font><font color="#E5E5E5"> opcodes</font>

65
00:02:33,840 --> 00:02:39,090
and opcode handlers so CR unpack or CR

66
00:02:37,050 --> 00:02:40,860
unpack extend<font color="#E5E5E5"> will receive these op</font>

67
00:02:39,090 --> 00:02:43,500
codes and call the appropriate<font color="#E5E5E5"> occurred</font>

68
00:02:40,860 --> 00:02:45,270
handler<font color="#E5E5E5"> which will read some input from</font>

69
00:02:43,500 --> 00:02:47,880
<font color="#E5E5E5">our chromium message and pass that</font><font color="#CCCCCC"> on to</font>

70
00:02:45,270 --> 00:02:49,580
<font color="#E5E5E5">the relevant dispatch method now all of</font>

71
00:02:47,880 --> 00:02:52,950
the bugs associated with chromium<font color="#CCCCCC"> are</font>

72
00:02:49,580 --> 00:02:58,160
usually<font color="#CCCCCC"> within these awkward handlers</font><font color="#E5E5E5"> or</font>

73
00:02:52,950 --> 00:03:00,000
within<font color="#E5E5E5"> these dispatch methods now</font>

74
00:02:58,160 --> 00:03:02,340
<font color="#E5E5E5">basically we're generating a bunch of</font>

75
00:03:00,000 --> 00:03:04,020
<font color="#E5E5E5">input because we want to first</font><font color="#CCCCCC"> read</font><font color="#E5E5E5"> the</font>

76
00:03:02,340 --> 00:03:06,300
<font color="#E5E5E5">acceleration so the main things</font><font color="#CCCCCC"> to take</font>

77
00:03:04,020 --> 00:03:09,180
away<font color="#CCCCCC"> from</font><font color="#E5E5E5"> figuring out what to do with</font>

78
00:03:06,300 --> 00:03:10,709
<font color="#CCCCCC">that input basically adjusting as some</font>

79
00:03:09,180 --> 00:03:12,270
of the input<font color="#E5E5E5"> making sure that our</font>

80
00:03:10,709 --> 00:03:15,090
message<font color="#CCCCCC"> type is set to see our message</font>

81
00:03:12,270 --> 00:03:16,740
<font color="#CCCCCC">up codes basically it can</font><font color="#E5E5E5"> get quite</font>

82
00:03:15,090 --> 00:03:18,330
complex when specifying<font color="#E5E5E5"> multiple up</font>

83
00:03:16,740 --> 00:03:19,980
codes so maybe you're interested<font color="#E5E5E5"> in</font>

84
00:03:18,330 --> 00:03:23,820
<font color="#E5E5E5">doing something more one dimensional so</font>

85
00:03:19,980 --> 00:03:25,768
fixing the number of<font color="#CCCCCC"> occurs to one when</font>

86
00:03:23,820 --> 00:03:27,959
looking<font color="#E5E5E5"> at your awkward so three and</font>

87
00:03:25,769 --> 00:03:30,330
<font color="#CCCCCC">four we want to make sure that there was</font>

88
00:03:27,959 --> 00:03:31,920
in range<font color="#E5E5E5"> specifying a dead opcode</font>

89
00:03:30,330 --> 00:03:34,620
<font color="#E5E5E5">doesn't mean anything to</font><font color="#CCCCCC"> us</font><font color="#E5E5E5"> we won't be</font>

90
00:03:31,920 --> 00:03:35,790
hitting any code paths and if you want

91
00:03:34,620 --> 00:03:38,519
to get<font color="#E5E5E5"> really smart with this you can</font>

92
00:03:35,790 --> 00:03:39,900
look<font color="#E5E5E5"> at the input parameters or input</font>

93
00:03:38,519 --> 00:03:42,239
values<font color="#E5E5E5"> that you're giving for that</font>

94
00:03:39,900 --> 00:03:45,390
<font color="#CCCCCC">opcode maybe look at the data types</font>

95
00:03:42,239 --> 00:03:47,310
<font color="#E5E5E5">there's a relatively easy to follow</font>

96
00:03:45,390 --> 00:03:51,329
convention within<font color="#E5E5E5"> opcode handlers for</font>

97
00:03:47,310 --> 00:03:54,480
what<font color="#E5E5E5"> various the various values</font><font color="#CCCCCC"> or</font>

98
00:03:51,330 --> 00:03:56,220
variables are used for and<font color="#E5E5E5"> eventually</font>

99
00:03:54,480 --> 00:03:57,720
what we're going to<font color="#E5E5E5"> do is we're taking</font>

100
00:03:56,220 --> 00:03:59,280
that chromium message and sticking<font color="#E5E5E5"> it</font>

101
00:03:57,720 --> 00:04:03,840
into client<font color="#CCCCCC"> rights and</font><font color="#E5E5E5"> maybe the bugs</font>

102
00:03:59,280 --> 00:04:05,100
fall out so<font color="#CCCCCC"> ideas regarding a developing</font>

103
00:04:03,840 --> 00:04:06,390
a puzzle<font color="#E5E5E5"> like</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> take into</font>

104
00:04:05,100 --> 00:04:09,450
consideration<font color="#CCCCCC"> that there's little</font><font color="#E5E5E5"> more</font>

105
00:04:06,390 --> 00:04:11,850
than 550<font color="#E5E5E5"> op codes which i think is a</font>

106
00:04:09,450 --> 00:04:13,350
relatively big attack surface looking at

107
00:04:11,850 --> 00:04:14,940
it<font color="#E5E5E5"> from an</font><font color="#CCCCCC"> unpublished guest perspective</font>

108
00:04:13,350 --> 00:04:16,529
and essentially what all of these

109
00:04:14,940 --> 00:04:19,290
<font color="#E5E5E5">messages do is they manipulate the state</font>

110
00:04:16,529 --> 00:04:20,608
of chromium<font color="#CCCCCC"> all right</font><font color="#E5E5E5"> up to this point</font>

111
00:04:19,290 --> 00:04:23,010
<font color="#CCCCCC">most</font><font color="#E5E5E5"> of the bugs that have been</font>

112
00:04:20,608 --> 00:04:25,320
identified<font color="#E5E5E5"> have been one-dimensional so</font>

113
00:04:23,010 --> 00:04:25,710
single<font color="#CCCCCC"> op code results in an awkward</font>

114
00:04:25,320 --> 00:04:27,240
hand

115
00:04:25,710 --> 00:04:29,669
dispatch method being<font color="#E5E5E5"> called bug gets</font>

116
00:04:27,240 --> 00:04:31,500
triggered but<font color="#CCCCCC"> I do think</font><font color="#E5E5E5"> that some of</font>

117
00:04:29,669 --> 00:04:33,900
<font color="#CCCCCC">these</font><font color="#E5E5E5"> are dying while these are dying</font>

118
00:04:31,500 --> 00:04:35,280
out fairly<font color="#CCCCCC"> quickly and we're</font><font color="#E5E5E5"> definitely</font>

119
00:04:33,900 --> 00:04:36,719
going<font color="#CCCCCC"> to</font><font color="#E5E5E5"> have to start</font><font color="#CCCCCC"> thinking about</font>

120
00:04:35,280 --> 00:04:39,179
<font color="#E5E5E5">some</font><font color="#CCCCCC"> of the more intricate things about</font>

121
00:04:36,720 --> 00:04:42,030
the state<font color="#E5E5E5"> of the chromium server for</font>

122
00:04:39,180 --> 00:04:44,520
example<font color="#CCCCCC"> bug</font><font color="#E5E5E5"> that still needs to be</font>

123
00:04:42,030 --> 00:04:46,258
mitigated<font color="#CCCCCC"> basically was</font><font color="#E5E5E5"> this convoluted</font>

124
00:04:44,520 --> 00:04:48,060
<font color="#E5E5E5">process of forcing chromium into the</font>

125
00:04:46,259 --> 00:04:49,949
state<font color="#E5E5E5"> to trust the</font><font color="#CCCCCC"> Pointer supplies by a</font>

126
00:04:48,060 --> 00:04:54,080
guest operating<font color="#E5E5E5"> system so that happens</font>

127
00:04:49,949 --> 00:04:55,800
<font color="#CCCCCC">too</font><font color="#E5E5E5"> now I'm a fairly novice</font>

128
00:04:54,080 --> 00:04:58,889
vulnerability<font color="#E5E5E5"> researcher in terms of</font>

129
00:04:55,800 --> 00:05:00,780
fuzzing so for me I<font color="#CCCCCC"> just kind of used</font>

130
00:04:58,889 --> 00:05:03,330
standard<font color="#E5E5E5"> AFL to see where that</font><font color="#CCCCCC"> takes me</font>

131
00:05:00,780 --> 00:05:04,799
<font color="#E5E5E5">and what I can say is that</font>

132
00:05:03,330 --> 00:05:06,870
initialization of<font color="#E5E5E5"> the chromium server</font>

133
00:05:04,800 --> 00:05:08,820
takes<font color="#E5E5E5"> a whole</font><font color="#CCCCCC"> lot of</font><font color="#E5E5E5"> time 65</font>

134
00:05:06,870 --> 00:05:11,190
milliseconds which I mean if you're

135
00:05:08,820 --> 00:05:15,380
working<font color="#E5E5E5"> with in-memory fuzzing this this</font>

136
00:05:11,190 --> 00:05:18,210
<font color="#E5E5E5">problem can be overcome but despite</font><font color="#CCCCCC"> that</font>

137
00:05:15,380 --> 00:05:20,940
if<font color="#CCCCCC"> you're really</font><font color="#E5E5E5"> interested in building</font>

138
00:05:18,210 --> 00:05:24,060
<font color="#E5E5E5">an AFL</font><font color="#CCCCCC"> phaser for 3d acceleration it's</font>

139
00:05:20,940 --> 00:05:27,270
as simple as pointing<font color="#E5E5E5"> configure</font><font color="#CCCCCC"> two AFL</font>

140
00:05:24,060 --> 00:05:29,550
GCC<font color="#E5E5E5"> and AFL C++ so something</font><font color="#CCCCCC"> I</font><font color="#E5E5E5"> will say</font>

141
00:05:27,270 --> 00:05:33,389
<font color="#CCCCCC">is that definitely do this comment out</font>

142
00:05:29,550 --> 00:05:35,789
<font color="#CCCCCC">RTO</font><font color="#E5E5E5"> log create in that source file</font><font color="#CCCCCC"> so</font>

143
00:05:33,389 --> 00:05:37,830
chromium<font color="#E5E5E5"> on upon initialization creates</font>

144
00:05:35,789 --> 00:05:39,780
a log file<font color="#CCCCCC"> rights to it so if</font><font color="#E5E5E5"> you're</font>

145
00:05:37,830 --> 00:05:42,090
fuzzing 3d acceleration you're going to

146
00:05:39,780 --> 00:05:44,729
fill up your disk space<font color="#CCCCCC"> or you can be</font>

147
00:05:42,090 --> 00:05:46,619
this idiot and create a bunch of cron

148
00:05:44,729 --> 00:05:50,820
jobs that run every<font color="#E5E5E5"> 20 seconds to clear</font>

149
00:05:46,620 --> 00:05:53,759
a folder it took me a while to<font color="#E5E5E5"> find out</font>

150
00:05:50,820 --> 00:05:55,919
that this<font color="#CCCCCC"> was the problem</font><font color="#E5E5E5"> all right</font>

151
00:05:53,759 --> 00:05:58,349
so debugging VirtualBox<font color="#E5E5E5"> is very tedious</font>

152
00:05:55,919 --> 00:06:00,990
<font color="#CCCCCC">there's this weird</font><font color="#E5E5E5"> thing where if you if</font>

153
00:05:58,349 --> 00:06:03,090
you're focused on a virtual<font color="#CCCCCC"> machine and</font>

154
00:06:00,990 --> 00:06:05,159
you hit a breakpoint<font color="#CCCCCC"> the keyboard and</font>

155
00:06:03,090 --> 00:06:08,039
the clipboard just break and that really

156
00:06:05,159 --> 00:06:10,680
sucks testing production<font color="#E5E5E5"> also sucks</font>

157
00:06:08,039 --> 00:06:13,620
because<font color="#E5E5E5"> of debugger checks so VirtualBox</font>

158
00:06:10,680 --> 00:06:15,570
just says no and I wanted<font color="#CCCCCC"> to come and</font>

159
00:06:13,620 --> 00:06:18,810
get around this<font color="#E5E5E5"> to really</font><font color="#CCCCCC"> facilitate</font>

160
00:06:15,570 --> 00:06:21,210
making<font color="#E5E5E5"> my my exploit efforts a lot</font>

161
00:06:18,810 --> 00:06:24,389
<font color="#E5E5E5">easier and the idea</font><font color="#CCCCCC"> that I came</font><font color="#E5E5E5"> up with</font>

162
00:06:21,210 --> 00:06:27,270
is basically<font color="#E5E5E5"> creating this little</font>

163
00:06:24,389 --> 00:06:29,550
standard interface<font color="#E5E5E5"> that consists of</font>

164
00:06:27,270 --> 00:06:32,310
connecting disconnecting and making<font color="#CCCCCC"> HDC</font>

165
00:06:29,550 --> 00:06:34,919
<font color="#CCCCCC">M calls</font><font color="#E5E5E5"> now how</font><font color="#CCCCCC"> that how that interface</font>

166
00:06:32,310 --> 00:06:37,650
<font color="#E5E5E5">is implemented on the</font><font color="#CCCCCC"> host that library</font>

167
00:06:34,919 --> 00:06:38,979
well that library will load the relevant

168
00:06:37,650 --> 00:06:41,109
dll's

169
00:06:38,979 --> 00:06:43,930
read the export<font color="#CCCCCC"> results or get the</font>

170
00:06:41,110 --> 00:06:45,490
export myth exported methods and use<font color="#CCCCCC"> SV</font>

171
00:06:43,930 --> 00:06:48,610
<font color="#E5E5E5">sequel to simulate connecting</font>

172
00:06:45,490 --> 00:06:50,680
disconnecting<font color="#E5E5E5"> and making HTC</font><font color="#CCCCCC"> M calls now</font>

173
00:06:48,610 --> 00:06:52,389
SVC call<font color="#E5E5E5"> isn't exported but if you</font>

174
00:06:50,680 --> 00:06:54,249
initialize chromium at a higher level

175
00:06:52,389 --> 00:06:56,139
<font color="#CCCCCC">you can kind of smuggle out that pointer</font>

176
00:06:54,249 --> 00:06:57,969
<font color="#E5E5E5">which is great you can do this for debug</font>

177
00:06:56,139 --> 00:07:00,279
and prod and on the guest operating

178
00:06:57,969 --> 00:07:03,550
<font color="#CCCCCC">system</font><font color="#E5E5E5"> this interface is essentially</font>

179
00:07:00,279 --> 00:07:06,939
implemented as a set of<font color="#E5E5E5"> driver calls</font>

180
00:07:03,550 --> 00:07:10,319
<font color="#E5E5E5">right and what I ended up with after</font>

181
00:07:06,939 --> 00:07:13,509
<font color="#CCCCCC">making this is basically this</font><font color="#E5E5E5"> workflow</font><font color="#CCCCCC"> I</font>

182
00:07:10,319 --> 00:07:14,740
exploit<font color="#E5E5E5"> the debug libraries</font><font color="#CCCCCC"> I mean I can</font>

183
00:07:13,509 --> 00:07:17,500
debug the symbols that's great

184
00:07:14,740 --> 00:07:20,349
then I update my exploit to target the

185
00:07:17,500 --> 00:07:21,550
prod libraries<font color="#CCCCCC"> just update offsets I can</font>

186
00:07:20,349 --> 00:07:23,860
still debug this because I'm<font color="#E5E5E5"> not running</font>

187
00:07:21,550 --> 00:07:26,740
<font color="#E5E5E5">in VirtualBox</font><font color="#CCCCCC"> and then I turn my VM on</font>

188
00:07:23,860 --> 00:07:29,409
<font color="#E5E5E5">for the first time we just sped up the</font>

189
00:07:26,740 --> 00:07:32,110
process<font color="#E5E5E5"> quite a lot now</font><font color="#CCCCCC"> a lot of the</font>

190
00:07:29,409 --> 00:07:34,089
code related to<font color="#E5E5E5"> the until this library</font>

191
00:07:32,110 --> 00:07:35,439
<font color="#CCCCCC">that I wrote and also some example</font>

192
00:07:34,089 --> 00:07:38,409
fuzzing harnesses<font color="#E5E5E5"> I'm planning</font><font color="#CCCCCC"> to</font>

193
00:07:35,439 --> 00:07:43,990
release all of<font color="#E5E5E5"> these on github so soon</font>

194
00:07:38,409 --> 00:07:46,990
TM<font color="#CCCCCC"> alright so burning</font><font color="#E5E5E5"> VirtualBox and</font>

195
00:07:43,990 --> 00:07:48,339
looking at these two bugs<font color="#E5E5E5"> now throughout</font>

196
00:07:46,990 --> 00:07:50,589
the next<font color="#CCCCCC"> few</font><font color="#E5E5E5"> sections it's going to be a</font>

197
00:07:48,339 --> 00:07:52,270
couple<font color="#CCCCCC"> of interesting exploit primitives</font>

198
00:07:50,589 --> 00:07:54,879
that<font color="#E5E5E5"> we can use</font><font color="#CCCCCC"> to facilitate</font><font color="#E5E5E5"> our</font>

199
00:07:52,270 --> 00:07:56,710
<font color="#E5E5E5">exploitation for example we've</font><font color="#CCCCCC"> got this</font>

200
00:07:54,879 --> 00:07:59,319
<font color="#E5E5E5">amazing feature in chromium where we can</font>

201
00:07:56,710 --> 00:08:01,989
buffer chromium messages<font color="#E5E5E5"> and we can make</font>

202
00:07:59,319 --> 00:08:03,550
those buffers<font color="#E5E5E5"> arbitrary sizes meaning</font>

203
00:08:01,990 --> 00:08:05,439
<font color="#CCCCCC">that we can perform</font><font color="#E5E5E5"> arbitrary size</font>

204
00:08:03,550 --> 00:08:08,500
allocations<font color="#E5E5E5"> we can write to those</font>

205
00:08:05,439 --> 00:08:10,389
allocations<font color="#E5E5E5"> to</font><font color="#CCCCCC"> a byte of granularity and</font>

206
00:08:08,500 --> 00:08:12,099
<font color="#E5E5E5">when we execute those buffers as</font>

207
00:08:10,389 --> 00:08:13,770
chromium messages they get freed<font color="#CCCCCC"> all</font>

208
00:08:12,099 --> 00:08:16,539
right so we<font color="#CCCCCC"> can free and allocate and</font>

209
00:08:13,770 --> 00:08:18,758
all of these buffered chromium messages

210
00:08:16,539 --> 00:08:21,699
are backed by<font color="#E5E5E5"> an object which I'll refer</font>

211
00:08:18,759 --> 00:08:23,680
<font color="#CCCCCC">to</font><font color="#E5E5E5"> as a service buffer and service</font>

212
00:08:21,699 --> 00:08:26,710
buffer objects hold a pointer to the

213
00:08:23,680 --> 00:08:29,020
chromium message through<font color="#E5E5E5"> P dot</font><font color="#CCCCCC"> o</font><font color="#E5E5E5"> now</font>

214
00:08:26,710 --> 00:08:30,638
<font color="#CCCCCC">more</font><font color="#E5E5E5"> in if this is research that</font><font color="#CCCCCC"> you're</font>

215
00:08:29,020 --> 00:08:33,370
looking into you're bound to come across

216
00:08:30,639 --> 00:08:35,649
<font color="#E5E5E5">methods like SVC get buffer and SVC call</font>

217
00:08:33,370 --> 00:08:40,719
to better understand<font color="#E5E5E5"> how these buffers</font>

218
00:08:35,649 --> 00:08:44,198
are used so let's first look at<font color="#CCCCCC"> our info</font>

219
00:08:40,719 --> 00:08:46,060
leak so<font color="#E5E5E5"> 20 19 25 25</font>

220
00:08:44,198 --> 00:08:48,459
I reported this but<font color="#E5E5E5"> Nicholas</font>

221
00:08:46,060 --> 00:08:50,469
unfortunately beat me to it<font color="#E5E5E5"> this</font><font color="#CCCCCC"> is an</font>

222
00:08:48,459 --> 00:08:52,239
<font color="#E5E5E5">out of bounds read</font><font color="#CCCCCC"> in CR</font><font color="#E5E5E5"> unpack extent</font>

223
00:08:50,470 --> 00:08:54,730
get a<font color="#CCCCCC"> drop location and</font>

224
00:08:52,240 --> 00:08:56,290
you can see on the right is<font color="#E5E5E5"> top right as</font>

225
00:08:54,730 --> 00:08:58,869
<font color="#E5E5E5">I chromium message and we have this</font>

226
00:08:56,290 --> 00:09:01,449
<font color="#E5E5E5">value that</font><font color="#CCCCCC"> we're providing called packet</font>

227
00:08:58,869 --> 00:09:03,639
<font color="#CCCCCC">length all</font><font color="#E5E5E5"> right packet length in it the</font>

228
00:09:01,449 --> 00:09:06,399
<font color="#E5E5E5">awkward handler is used in set return</font>

229
00:09:03,639 --> 00:09:08,619
pointer and set right back pointer in

230
00:09:06,399 --> 00:09:10,480
those macros<font color="#E5E5E5"> now what does matter is</font>

231
00:09:08,619 --> 00:09:15,790
translate to use a call to CRM copy

232
00:09:10,480 --> 00:09:17,800
<font color="#E5E5E5">which is just a mem copy wrapper and the</font>

233
00:09:15,790 --> 00:09:19,839
offset is added to<font color="#E5E5E5"> see</font><font color="#CCCCCC"> our unpacked</font><font color="#E5E5E5"> Auto</font>

234
00:09:17,800 --> 00:09:24,099
which is a pointer<font color="#CCCCCC"> to our chromium</font>

235
00:09:19,839 --> 00:09:25,449
message and at this specific<font color="#CCCCCC"> instance si</font>

236
00:09:24,100 --> 00:09:28,209
are in fact<font color="#CCCCCC"> Auto is actually pointing to</font>

237
00:09:25,449 --> 00:09:31,300
packet<font color="#CCCCCC"> length now the destination</font><font color="#E5E5E5"> for</font>

238
00:09:28,209 --> 00:09:33,128
this<font color="#E5E5E5"> copy is</font><font color="#CCCCCC"> our two global variables in</font>

239
00:09:31,300 --> 00:09:34,990
this case return pointer and right back

240
00:09:33,129 --> 00:09:36,759
pointer and after the<font color="#E5E5E5"> message is</font>

241
00:09:34,990 --> 00:09:38,709
executed<font color="#E5E5E5"> return point and right back</font>

242
00:09:36,759 --> 00:09:41,350
pointer will be<font color="#E5E5E5"> returned to the guest</font>

243
00:09:38,709 --> 00:09:44,469
basically<font color="#E5E5E5"> meaning if</font><font color="#CCCCCC"> we can make packet</font>

244
00:09:41,350 --> 00:09:46,990
lengths very very large we can<font color="#E5E5E5"> read</font><font color="#CCCCCC"> into</font>

245
00:09:44,470 --> 00:09:50,379
<font color="#CCCCCC">adjoining</font><font color="#E5E5E5"> memory and in total because</font>

246
00:09:46,990 --> 00:09:52,720
<font color="#E5E5E5">all both of</font><font color="#CCCCCC"> these two variables or</font>

247
00:09:50,379 --> 00:09:58,329
objects are 16<font color="#CCCCCC"> to</font><font color="#E5E5E5"> 8 bytes in size each</font>

248
00:09:52,720 --> 00:10:00,579
we get to leak 16 bytes<font color="#E5E5E5"> now the target</font>

249
00:09:58,329 --> 00:10:02,649
<font color="#E5E5E5">for</font><font color="#CCCCCC"> our info leaker is</font><font color="#E5E5E5"> AC our client</font>

250
00:10:00,579 --> 00:10:04,809
<font color="#CCCCCC">object which represents an active</font>

251
00:10:02,649 --> 00:10:06,549
connection<font color="#E5E5E5"> to chromium</font><font color="#CCCCCC"> and one of its</font>

252
00:10:04,809 --> 00:10:08,709
members<font color="#E5E5E5"> called current context info is</font>

253
00:10:06,549 --> 00:10:12,369
initialized<font color="#E5E5E5"> to point to see our server</font>

254
00:10:08,709 --> 00:10:13,959
dot main context info<font color="#E5E5E5"> which is which</font><font color="#CCCCCC"> is</font>

255
00:10:12,369 --> 00:10:17,649
a global<font color="#E5E5E5"> variable Co serve as a global</font>

256
00:10:13,959 --> 00:10:19,268
<font color="#CCCCCC">variable so if we can leak that object</font>

257
00:10:17,649 --> 00:10:21,670
or leak<font color="#E5E5E5"> that member in</font><font color="#CCCCCC"> that object we've</font>

258
00:10:19,269 --> 00:10:24,490
got a pointer in the shade<font color="#E5E5E5"> CR OpenGL</font>

259
00:10:21,670 --> 00:10:30,519
module so subtract some offset and we've

260
00:10:24,490 --> 00:10:31,869
defeated<font color="#E5E5E5"> a SLR so calculating our value</font>

261
00:10:30,519 --> 00:10:33,549
for<font color="#E5E5E5"> packet length is fairly</font>

262
00:10:31,869 --> 00:10:35,949
straightforward we're targeting<font color="#CCCCCC"> see our</font>

263
00:10:33,549 --> 00:10:37,959
<font color="#CCCCCC">current</font><font color="#E5E5E5"> objects we can abuse our ability</font>

264
00:10:35,949 --> 00:10:39,939
<font color="#CCCCCC">to either make arbitrary size</font>

265
00:10:37,959 --> 00:10:42,790
allocations to target that low

266
00:10:39,939 --> 00:10:44,498
fragmentation<font color="#E5E5E5"> heat pocket</font><font color="#CCCCCC"> and the idea</font>

267
00:10:42,790 --> 00:10:47,199
is<font color="#E5E5E5"> to make numerous connections</font><font color="#CCCCCC"> so</font>

268
00:10:44,499 --> 00:10:49,389
you're kind of limited<font color="#CCCCCC"> to 64 but that's</font>

269
00:10:47,199 --> 00:10:51,429
not a problem<font color="#CCCCCC"> and then we're just going</font>

270
00:10:49,389 --> 00:10:52,959
to<font color="#E5E5E5"> keep on sending our malicious message</font>

271
00:10:51,429 --> 00:10:55,749
<font color="#CCCCCC">if it</font><font color="#E5E5E5"> doesn't work the</font><font color="#CCCCCC"> first time</font><font color="#E5E5E5"> just</font>

272
00:10:52,959 --> 00:10:58,508
mash X and the way we're going to

273
00:10:55,749 --> 00:11:00,399
calculate<font color="#E5E5E5"> this is fairly straightforward</font>

274
00:10:58,509 --> 00:11:03,569
<font color="#CCCCCC">start of our chromium message to start</font>

275
00:11:00,399 --> 00:11:06,040
<font color="#CCCCCC">off see our client</font><font color="#E5E5E5"> that's m18 hex</font>

276
00:11:03,569 --> 00:11:10,689
<font color="#CCCCCC">into our chromium message</font>

277
00:11:06,040 --> 00:11:13,269
the<font color="#CCCCCC"> tacit length is</font><font color="#E5E5E5"> 10x and into the</font><font color="#CCCCCC"> CR</font>

278
00:11:10,690 --> 00:11:18,430
client object that's<font color="#CCCCCC"> 20x do the maths</font><font color="#E5E5E5"> we</font>

279
00:11:13,269 --> 00:11:20,860
see packet length is<font color="#E5E5E5"> a</font><font color="#CCCCCC"> 3-1 hex so how do</font>

280
00:11:18,430 --> 00:11:26,829
<font color="#E5E5E5">we execute code or what what will be our</font>

281
00:11:20,860 --> 00:11:28,990
code execution primitive so<font color="#CCCCCC"> 20 1925 48</font>

282
00:11:26,829 --> 00:11:30,849
this was and well this<font color="#E5E5E5"> was an integer</font>

283
00:11:28,990 --> 00:11:32,440
overflow<font color="#CCCCCC"> and that one you can actually</font>

284
00:11:30,850 --> 00:11:34,569
<font color="#E5E5E5">see the patch</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> was introduced</font>

285
00:11:32,440 --> 00:11:37,750
earlier<font color="#E5E5E5"> so that entire check that didn't</font>

286
00:11:34,569 --> 00:11:40,180
exist<font color="#CCCCCC"> which was which is very convenient</font>

287
00:11:37,750 --> 00:11:42,970
at the<font color="#E5E5E5"> time and</font><font color="#CCCCCC"> two we</font><font color="#E5E5E5"> can see that</font>

288
00:11:40,180 --> 00:11:46,569
messagelen' gets<font color="#CCCCCC"> calculated by taking a</font>

289
00:11:42,970 --> 00:11:49,630
size of<font color="#E5E5E5"> RP which is 38 hex and then</font>

290
00:11:46,569 --> 00:11:51,910
adding multiplication between<font color="#CCCCCC"> Whitesboro</font>

291
00:11:49,630 --> 00:11:55,120
and height both attacker controlled from

292
00:11:51,910 --> 00:11:57,399
the<font color="#E5E5E5"> VM and</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> three message</font><font color="#CCCCCC"> Len is used</font>

293
00:11:55,120 --> 00:11:59,500
to allocate<font color="#E5E5E5"> memory so basically if we</font>

294
00:11:57,399 --> 00:12:01,420
<font color="#E5E5E5">can craft bytes per row and height in</font>

295
00:11:59,500 --> 00:12:02,920
such a way that<font color="#E5E5E5"> the</font><font color="#CCCCCC"> allocation is</font>

296
00:12:01,420 --> 00:12:04,810
smaller<font color="#E5E5E5"> than the object size we can</font>

297
00:12:02,920 --> 00:12:07,089
write<font color="#CCCCCC"> into adjoining memory</font><font color="#E5E5E5"> when the</font>

298
00:12:04,810 --> 00:12:08,949
object gets<font color="#E5E5E5"> initialized and something</font>

299
00:12:07,089 --> 00:12:11,649
<font color="#E5E5E5">that you'll see</font><font color="#CCCCCC"> soon is that the object</font>

300
00:12:08,949 --> 00:12:15,449
gets entirely initialized by values

301
00:12:11,649 --> 00:12:17,649
obtained from the guest operating<font color="#E5E5E5"> system</font>

302
00:12:15,449 --> 00:12:20,109
so<font color="#E5E5E5"> quickly looking at our restrictions</font>

303
00:12:17,649 --> 00:12:22,829
<font color="#CCCCCC">Whitesboro is not supposed to</font><font color="#E5E5E5"> be it's</font>

304
00:12:20,110 --> 00:12:26,490
<font color="#E5E5E5">supposed to be smaller than</font><font color="#CCCCCC"> 1/8 of</font>

305
00:12:22,829 --> 00:12:32,380
<font color="#E5E5E5">unsigned int max greater than 0 height</font>

306
00:12:26,490 --> 00:12:34,000
<font color="#E5E5E5">smaller than 8 of an unsigned int so</font>

307
00:12:32,380 --> 00:12:36,189
let's choose messagelen' to be 20 hex

308
00:12:34,000 --> 00:12:38,459
meaning<font color="#E5E5E5"> that will be writing 1/8</font><font color="#CCCCCC"> x in</font>

309
00:12:36,190 --> 00:12:41,620
<font color="#CCCCCC">two adjoining</font><font color="#E5E5E5"> memory</font><font color="#CCCCCC"> if this works</font><font color="#E5E5E5"> and</font>

310
00:12:38,459 --> 00:12:44,888
<font color="#CCCCCC">just choose an</font><font color="#E5E5E5"> arbitrary value well for</font>

311
00:12:41,620 --> 00:12:47,860
height as<font color="#E5E5E5"> 8 and we can see that the math</font>

312
00:12:44,889 --> 00:12:53,889
says it<font color="#CCCCCC"> we've kind of meeting or the</font>

313
00:12:47,860 --> 00:12:57,310
criteria<font color="#CCCCCC"> that</font><font color="#E5E5E5"> the patch forces us so our</font>

314
00:12:53,889 --> 00:12:59,980
<font color="#E5E5E5">target object for this is that</font><font color="#CCCCCC"> same</font><font color="#E5E5E5"> is</font>

315
00:12:57,310 --> 00:13:01,899
<font color="#E5E5E5">the service buffer object</font><font color="#CCCCCC"> surprise</font>

316
00:12:59,980 --> 00:13:05,230
<font color="#CCCCCC">surprise we've already did the math for</font>

317
00:13:01,899 --> 00:13:06,279
targeting<font color="#E5E5E5"> 20 hex allocations and and the</font>

318
00:13:05,230 --> 00:13:07,959
reason<font color="#E5E5E5"> we're interested</font><font color="#CCCCCC"> in this object</font>

319
00:13:06,279 --> 00:13:09,670
is because it can<font color="#E5E5E5"> give us out</font><font color="#CCCCCC"> of bounds</font>

320
00:13:07,959 --> 00:13:11,768
<font color="#E5E5E5">and arbitrary right primitives if</font>

321
00:13:09,670 --> 00:13:14,019
targeted correctly now the interesting

322
00:13:11,769 --> 00:13:16,949
members of this object is<font color="#E5E5E5"> an ID</font><font color="#CCCCCC"> that is</font>

323
00:13:14,019 --> 00:13:19,930
<font color="#CCCCCC">a</font><font color="#E5E5E5"> reference</font><font color="#CCCCCC"> that we hold to that object</font>

324
00:13:16,949 --> 00:13:22,240
<font color="#E5E5E5">the size basically</font><font color="#CCCCCC"> when you</font><font color="#E5E5E5"> update</font>

325
00:13:19,930 --> 00:13:23,380
this buffer<font color="#E5E5E5"> the sizes Mei is used to</font>

326
00:13:22,240 --> 00:13:25,480
make<font color="#CCCCCC"> sure</font><font color="#E5E5E5"> that you're not</font><font color="#CCCCCC"> riding</font><font color="#E5E5E5"> out of</font>

327
00:13:23,380 --> 00:13:28,510
<font color="#E5E5E5">bounds so if we can somehow increase</font>

328
00:13:25,480 --> 00:13:30,760
that to<font color="#CCCCCC"> some massive size we can write</font>

329
00:13:28,510 --> 00:13:32,830
<font color="#CCCCCC">in to</font><font color="#E5E5E5"> adjoining memory and obviously if</font>

330
00:13:30,760 --> 00:13:35,710
you can somehow control<font color="#E5E5E5"> P dot</font><font color="#CCCCCC"> L then we</font>

331
00:13:32,830 --> 00:13:40,630
<font color="#CCCCCC">can update into arbitrary memory</font>

332
00:13:35,710 --> 00:13:42,190
locations so just to give you<font color="#E5E5E5"> an idea of</font>

333
00:13:40,630 --> 00:13:44,170
<font color="#E5E5E5">what we're</font><font color="#CCCCCC"> working with on the Left we</font>

334
00:13:42,190 --> 00:13:47,020
have like a<font color="#E5E5E5"> hypothetical empty piece of</font>

335
00:13:44,170 --> 00:13:49,479
memory followed<font color="#CCCCCC"> by a service buffer and</font>

336
00:13:47,020 --> 00:13:51,100
on the right is<font color="#E5E5E5"> not really that</font>

337
00:13:49,480 --> 00:13:52,930
<font color="#E5E5E5">important</font><font color="#CCCCCC"> just</font><font color="#E5E5E5"> to give you an idea</font><font color="#CCCCCC"> of</font>

338
00:13:51,100 --> 00:13:56,430
<font color="#E5E5E5">everything that gets initialized with</font>

339
00:13:52,930 --> 00:13:58,420
<font color="#E5E5E5">our</font><font color="#CCCCCC"> P now everything inside that</font>

340
00:13:56,430 --> 00:14:00,399
<font color="#E5E5E5">initialization is controlled by</font><font color="#CCCCCC"> us</font>

341
00:13:58,420 --> 00:14:02,969
except<font color="#E5E5E5"> for the message type or the</font>

342
00:14:00,399 --> 00:14:04,720
header type<font color="#E5E5E5"> and after initial</font>

343
00:14:02,970 --> 00:14:08,700
initialization<font color="#E5E5E5"> it looks something like</font>

344
00:14:04,720 --> 00:14:11,350
this all<font color="#E5E5E5"> right what we've done is we've</font>

345
00:14:08,700 --> 00:14:12,880
<font color="#E5E5E5">overflowed this the integer we've</font>

346
00:14:11,350 --> 00:14:15,790
allocated less memory than<font color="#E5E5E5"> it's</font>

347
00:14:12,880 --> 00:14:16,450
necessary<font color="#CCCCCC"> for the object and skip pixels</font>

348
00:14:15,790 --> 00:14:19,480
<font color="#CCCCCC">Roland's</font>

349
00:14:16,450 --> 00:14:21,430
format<font color="#E5E5E5"> and type all corrupt the heap</font>

350
00:14:19,480 --> 00:14:23,980
header of our service<font color="#E5E5E5"> buffer that we're</font>

351
00:14:21,430 --> 00:14:28,109
targeting and pixels which<font color="#CCCCCC"> is an 8 byte</font>

352
00:14:23,980 --> 00:14:31,810
value will corrupt<font color="#E5E5E5"> you ID and UI size</font>

353
00:14:28,110 --> 00:14:34,060
okay and this is great because<font color="#CCCCCC"> we</font>

354
00:14:31,810 --> 00:14:35,890
corrupted<font color="#CCCCCC"> UID with dead beef</font><font color="#E5E5E5"> so that's</font>

355
00:14:34,060 --> 00:14:37,479
something<font color="#E5E5E5"> that we know we</font><font color="#CCCCCC"> can use that</font>

356
00:14:35,890 --> 00:14:40,290
as a reference to reference that buffer

357
00:14:37,480 --> 00:14:42,670
and we've created<font color="#E5E5E5"> to make UI science be</font>

358
00:14:40,290 --> 00:14:44,199
largest that<font color="#CCCCCC"> it can be and that</font>

359
00:14:42,670 --> 00:14:47,890
basically means<font color="#CCCCCC"> that the service</font><font color="#E5E5E5"> bar for</font>

360
00:14:44,200 --> 00:14:49,630
a service buffer within our new<font color="#E5E5E5"> buffer</font>

361
00:14:47,890 --> 00:14:51,640
chromium message range<font color="#E5E5E5"> we can write into</font>

362
00:14:49,630 --> 00:14:54,640
<font color="#E5E5E5">it so what we can do is carefully write</font>

363
00:14:51,640 --> 00:14:56,740
into various<font color="#CCCCCC"> offsets that</font><font color="#E5E5E5"> we've</font>

364
00:14:54,640 --> 00:14:59,470
calculated that<font color="#CCCCCC"> will typically be the</font>

365
00:14:56,740 --> 00:15:00,850
<font color="#E5E5E5">place</font><font color="#CCCCCC"> where a UID would be so we</font><font color="#E5E5E5"> can</font>

366
00:14:59,470 --> 00:15:03,640
keep on doing<font color="#CCCCCC"> that and maybe just</font><font color="#E5E5E5"> write</font>

367
00:15:00,850 --> 00:15:05,020
like<font color="#E5E5E5"> beef dead and we can keep on</font>

368
00:15:03,640 --> 00:15:08,680
checking that so we can do all<font color="#CCCCCC"> right we</font>

369
00:15:05,020 --> 00:15:10,300
can<font color="#E5E5E5"> check if that buffer exists now</font>

370
00:15:08,680 --> 00:15:11,890
<font color="#E5E5E5">eventually what will happen is if we</font>

371
00:15:10,300 --> 00:15:16,240
<font color="#CCCCCC">manage to</font><font color="#E5E5E5"> trick get one of these then we</font>

372
00:15:11,890 --> 00:15:19,180
<font color="#E5E5E5">can fully control</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> by now we have</font><font color="#CCCCCC"> a we</font>

373
00:15:16,240 --> 00:15:22,390
<font color="#CCCCCC">right</font><font color="#E5E5E5"> into its ID we override P</font><font color="#CCCCCC"> dot R we</font>

374
00:15:19,180 --> 00:15:23,949
have<font color="#CCCCCC"> an</font><font color="#E5E5E5"> arbitrary</font><font color="#CCCCCC"> write primitive so</font>

375
00:15:22,390 --> 00:15:26,560
this is typically what our configuration

376
00:15:23,950 --> 00:15:29,640
<font color="#E5E5E5">looks like at this stage we have</font><font color="#CCCCCC"> a</font>

377
00:15:26,560 --> 00:15:32,439
<font color="#E5E5E5">partial control control buffer which is</font>

378
00:15:29,640 --> 00:15:34,150
sufficient to control another buffer

379
00:15:32,440 --> 00:15:36,220
<font color="#E5E5E5">fully control another</font>

380
00:15:34,150 --> 00:15:40,090
so we modify partial buffer to<font color="#CCCCCC"> write</font>

381
00:15:36,220 --> 00:15:42,400
<font color="#CCCCCC">into SVC full we adjust SVC fulls UI</font>

382
00:15:40,090 --> 00:15:45,280
size<font color="#E5E5E5"> and P dot through our partially</font>

383
00:15:42,400 --> 00:15:47,620
controlled service buffer and then

384
00:15:45,280 --> 00:15:51,490
finally what we can do is we can write

385
00:15:47,620 --> 00:15:55,960
<font color="#E5E5E5">well or update as we see full</font><font color="#CCCCCC"> - to write</font>

386
00:15:51,490 --> 00:15:59,170
whatever<font color="#E5E5E5"> we want wherever we want now</font>

387
00:15:55,960 --> 00:16:03,550
we've got two bugs<font color="#CCCCCC"> let's see what we can</font>

388
00:15:59,170 --> 00:16:06,160
<font color="#CCCCCC">do in terms of exploiting them now we</font>

389
00:16:03,550 --> 00:16:07,930
have we<font color="#E5E5E5"> have</font><font color="#CCCCCC"> defeated SLR with our first</font>

390
00:16:06,160 --> 00:16:10,089
bug and we've obtained an arbitrary

391
00:16:07,930 --> 00:16:11,979
<font color="#CCCCCC">write primitive</font><font color="#E5E5E5"> I want to try two things</font>

392
00:16:10,090 --> 00:16:13,510
<font color="#E5E5E5">because virtualbox uses very old</font>

393
00:16:11,980 --> 00:16:17,680
compiler technology it's it's very

394
00:16:13,510 --> 00:16:19,030
<font color="#E5E5E5">boring</font><font color="#CCCCCC"> just trying</font><font color="#E5E5E5"> to do well it's very</font>

395
00:16:17,680 --> 00:16:20,530
boring just trying to<font color="#CCCCCC"> bypass some of the</font>

396
00:16:19,030 --> 00:16:24,339
exploit mitigations because it has a

397
00:16:20,530 --> 00:16:26,079
lack thereof now we want to try<font color="#CCCCCC"> and</font>

398
00:16:24,340 --> 00:16:29,560
<font color="#CCCCCC">break</font><font color="#E5E5E5"> up with</font><font color="#CCCCCC"> our shellcode</font><font color="#E5E5E5"> and we want</font>

399
00:16:26,080 --> 00:16:31,330
to avoid<font color="#E5E5E5"> requiring any kernel32 offsets</font>

400
00:16:29,560 --> 00:16:33,160
and for this<font color="#E5E5E5"> we're going</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> need an</font>

401
00:16:31,330 --> 00:16:34,780
arbitrary read and a command execution

402
00:16:33,160 --> 00:16:36,370
primitive<font color="#CCCCCC"> so in this scenario we're</font>

403
00:16:34,780 --> 00:16:39,520
attacking<font color="#E5E5E5"> a Windows host from a</font><font color="#CCCCCC"> Linux</font>

404
00:16:36,370 --> 00:16:41,800
guest<font color="#E5E5E5"> now what I mean by</font><font color="#CCCCCC"> shellcode</font><font color="#E5E5E5"> list</font>

405
00:16:39,520 --> 00:16:43,150
is that<font color="#E5E5E5"> we can target the actual</font>

406
00:16:41,800 --> 00:16:45,910
dispatch<font color="#E5E5E5"> table that gets called an</font>

407
00:16:43,150 --> 00:16:47,500
opcode Hendricks<font color="#E5E5E5"> now the signatures for</font>

408
00:16:45,910 --> 00:16:49,000
the functions in<font color="#CCCCCC"> that dispatch table</font>

409
00:16:47,500 --> 00:16:51,520
look awfully similar<font color="#CCCCCC"> to</font><font color="#E5E5E5"> the things we</font>

410
00:16:49,000 --> 00:16:53,170
want<font color="#E5E5E5"> to end up executing anyway so in</font>

411
00:16:51,520 --> 00:16:55,930
this case I'm<font color="#CCCCCC"> showing you</font><font color="#E5E5E5"> an</font><font color="#CCCCCC"> example of</font>

412
00:16:53,170 --> 00:16:59,319
<font color="#CCCCCC">one exec how that might typically look</font>

413
00:16:55,930 --> 00:17:02,680
is we're sending<font color="#E5E5E5"> a window create extend</font>

414
00:16:59,320 --> 00:17:04,570
<font color="#E5E5E5">opcode</font><font color="#CCCCCC"> we've overwritten ER</font><font color="#E5E5E5"> unpacked</font>

415
00:17:02,680 --> 00:17:06,639
dispatch window create<font color="#E5E5E5"> at points</font><font color="#CCCCCC"> to when</font>

416
00:17:04,569 --> 00:17:09,250
exact now and in our message we<font color="#E5E5E5"> can</font>

417
00:17:06,640 --> 00:17:10,930
specify parameters that will get passed

418
00:17:09,250 --> 00:17:13,750
out in the<font color="#E5E5E5"> OP code</font><font color="#CCCCCC"> handler</font><font color="#E5E5E5"> and</font>

419
00:17:10,930 --> 00:17:16,750
eventually passed to window create which

420
00:17:13,750 --> 00:17:18,790
is now pointing to<font color="#E5E5E5"> an exec and we can</font>

421
00:17:16,750 --> 00:17:24,579
use this for quite a<font color="#E5E5E5"> few things as well</font>

422
00:17:18,790 --> 00:17:26,409
see now<font color="#E5E5E5"> next we want to create an</font>

423
00:17:24,579 --> 00:17:28,240
arbitrary primitive using the shell

424
00:17:26,410 --> 00:17:31,120
<font color="#CCCCCC">catalyst technique for this we're</font><font color="#E5E5E5"> going</font>

425
00:17:28,240 --> 00:17:32,350
to<font color="#CCCCCC"> target a CR client object again just</font>

426
00:17:31,120 --> 00:17:34,449
<font color="#E5E5E5">because</font><font color="#CCCCCC"> there's a</font><font color="#E5E5E5"> really nice member</font>

427
00:17:32,350 --> 00:17:36,790
called<font color="#CCCCCC"> con</font><font color="#E5E5E5"> which is a CR connection</font>

428
00:17:34,450 --> 00:17:39,100
object so certain chromium messages

429
00:17:36,790 --> 00:17:42,340
<font color="#E5E5E5">after execution the responses are</font>

430
00:17:39,100 --> 00:17:44,830
buffered<font color="#E5E5E5"> and the response is pointed to</font>

431
00:17:42,340 --> 00:17:46,750
<font color="#CCCCCC">by PS buffer and C and</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> size they're</font>

432
00:17:44,830 --> 00:17:49,149
<font color="#E5E5E5">all kept</font><font color="#CCCCCC"> in CB host puffer</font><font color="#E5E5E5"> within</font>

433
00:17:46,750 --> 00:17:51,760
<font color="#CCCCCC">Khanh again</font><font color="#E5E5E5"> so if we can leaks your</font>

434
00:17:49,150 --> 00:17:53,710
connection<font color="#E5E5E5"> or con</font><font color="#CCCCCC"> with an SEO client</font>

435
00:17:51,760 --> 00:17:55,540
object and use our<font color="#CCCCCC"> arbitrary right</font>

436
00:17:53,710 --> 00:17:58,420
against that<font color="#E5E5E5"> we can basically fake</font>

437
00:17:55,540 --> 00:18:02,680
buffered responses<font color="#CCCCCC"> eventually leading to</font>

438
00:17:58,420 --> 00:18:03,820
reading arbitrary<font color="#E5E5E5"> memory now a really</font>

439
00:18:02,680 --> 00:18:06,550
interesting function<font color="#CCCCCC"> that we're</font><font color="#E5E5E5"> going to</font>

440
00:18:03,820 --> 00:18:10,389
use for<font color="#E5E5E5"> this is server try and get so</font>

441
00:18:06,550 --> 00:18:12,820
this method<font color="#E5E5E5"> takes a client ID and a</font>

442
00:18:10,390 --> 00:18:15,160
pointer or<font color="#CCCCCC"> second order pointer</font><font color="#E5E5E5"> for this</font>

443
00:18:12,820 --> 00:18:17,290
and it basically retrieves a pointer

444
00:18:15,160 --> 00:18:20,320
associated with the client ID<font color="#CCCCCC"> that was</font>

445
00:18:17,290 --> 00:18:23,200
provided<font color="#E5E5E5"> and takes that pointer and</font>

446
00:18:20,320 --> 00:18:24,820
<font color="#CCCCCC">write it to pp client</font><font color="#E5E5E5"> now what makes</font>

447
00:18:23,200 --> 00:18:26,830
this<font color="#CCCCCC"> interesting is that when</font><font color="#E5E5E5"> chromium</font>

448
00:18:24,820 --> 00:18:29,230
messages get modified<font color="#E5E5E5"> in transit</font><font color="#CCCCCC"> so</font>

449
00:18:26,830 --> 00:18:31,629
during that<font color="#CCCCCC"> whole transaction you will</font>

450
00:18:29,230 --> 00:18:33,220
<font color="#E5E5E5">get the modified version so if we can</font>

451
00:18:31,630 --> 00:18:35,140
<font color="#E5E5E5">somehow have</font><font color="#CCCCCC"> PP client point to our</font>

452
00:18:33,220 --> 00:18:39,130
chromium message then we can leak

453
00:18:35,140 --> 00:18:40,300
arbitrary<font color="#CCCCCC"> C our client objects the way</font>

454
00:18:39,130 --> 00:18:43,090
<font color="#E5E5E5">we're going to do this is by attacking</font>

455
00:18:40,300 --> 00:18:45,760
the delete fences<font color="#CCCCCC"> env function in the</font>

456
00:18:43,090 --> 00:18:48,730
dispatch<font color="#E5E5E5"> table it accepts an integer and</font>

457
00:18:45,760 --> 00:18:50,890
<font color="#E5E5E5">it</font><font color="#CCCCCC"> sets a pointer an</font><font color="#E5E5E5"> intent pointer</font>

458
00:18:48,730 --> 00:18:55,300
<font color="#CCCCCC">which kind of looks like a</font><font color="#E5E5E5"> CR client</font>

459
00:18:50,890 --> 00:18:58,810
object to me so what we can<font color="#E5E5E5"> do is we can</font>

460
00:18:55,300 --> 00:19:00,700
now specify a client ID and<font color="#E5E5E5"> in the in</font>

461
00:18:58,810 --> 00:19:04,929
the<font color="#CCCCCC"> opcode</font><font color="#E5E5E5"> handler they're basically</font>

462
00:19:00,700 --> 00:19:07,000
going to they're basically going to<font color="#E5E5E5"> use</font>

463
00:19:04,930 --> 00:19:09,130
data pointer to retrieve a pointer to

464
00:19:07,000 --> 00:19:10,450
<font color="#E5E5E5">our chromium message so when the lead</font>

465
00:19:09,130 --> 00:19:12,730
<font color="#E5E5E5">princess gets called</font>

466
00:19:10,450 --> 00:19:15,430
we're actually<font color="#E5E5E5"> passing server client get</font>

467
00:19:12,730 --> 00:19:17,530
our client ID<font color="#E5E5E5"> and a pointer</font><font color="#CCCCCC"> to our</font>

468
00:19:15,430 --> 00:19:21,820
message<font color="#CCCCCC"> after execution it gets returned</font>

469
00:19:17,530 --> 00:19:24,610
back<font color="#CCCCCC"> to us now what we're going</font><font color="#E5E5E5"> to do</font>

470
00:19:21,820 --> 00:19:26,800
now to actually<font color="#CCCCCC"> leak a connection or the</font>

471
00:19:24,610 --> 00:19:29,050
<font color="#CCCCCC">current member here is we're going</font><font color="#E5E5E5"> to</font>

472
00:19:26,800 --> 00:19:32,080
fake a chromium message and basically

473
00:19:29,050 --> 00:19:32,530
have it stretch<font color="#E5E5E5"> over across</font><font color="#CCCCCC"> ACR client</font>

474
00:19:32,080 --> 00:19:34,750
object

475
00:19:32,530 --> 00:19:37,030
<font color="#E5E5E5">the idea is to point our fully</font>

476
00:19:34,750 --> 00:19:39,580
controlled<font color="#E5E5E5"> service buffer to a couple of</font>

477
00:19:37,030 --> 00:19:42,399
allocations before the targets your

478
00:19:39,580 --> 00:19:44,350
client<font color="#CCCCCC"> object and then just write an</font>

479
00:19:42,400 --> 00:19:47,110
<font color="#CCCCCC">awkward message to it and have it</font>

480
00:19:44,350 --> 00:19:48,639
execute and<font color="#CCCCCC"> we'll receive</font><font color="#E5E5E5"> the content</font><font color="#CCCCCC"> of</font>

481
00:19:47,110 --> 00:19:50,080
that<font color="#E5E5E5"> message which will contain</font><font color="#CCCCCC"> the</font>

482
00:19:48,640 --> 00:19:53,230
entirety of<font color="#CCCCCC"> that</font><font color="#E5E5E5"> CR client object</font>

483
00:19:50,080 --> 00:19:56,470
containing pointer to<font color="#CCCCCC"> the CR connection</font>

484
00:19:53,230 --> 00:19:57,820
object<font color="#E5E5E5"> now there's a little problem of</font>

485
00:19:56,470 --> 00:19:59,290
this<font color="#E5E5E5"> and that it's not as elegant</font>

486
00:19:57,820 --> 00:20:00,200
because<font color="#E5E5E5"> we don't know what</font><font color="#CCCCCC"> that memory</font>

487
00:19:59,290 --> 00:20:03,460
is used for

488
00:20:00,200 --> 00:20:05,899
just<font color="#E5E5E5"> right to it so my idea here is to</font>

489
00:20:03,460 --> 00:20:07,909
<font color="#E5E5E5">get an initial</font><font color="#CCCCCC"> see our client</font><font color="#E5E5E5"> objects</font>

490
00:20:05,899 --> 00:20:11,029
address<font color="#E5E5E5"> make a bunch of see our client</font>

491
00:20:07,909 --> 00:20:13,429
allocations<font color="#CCCCCC"> get add and then get those</font>

492
00:20:11,029 --> 00:20:14,929
addresses and kind of like work<font color="#E5E5E5"> until I</font>

493
00:20:13,429 --> 00:20:18,200
have an<font color="#CCCCCC"> address that's within for</font>

494
00:20:14,929 --> 00:20:20,059
allocations and disconnect that<font color="#E5E5E5"> client</font>

495
00:20:18,200 --> 00:20:22,100
<font color="#E5E5E5">and then point our chromium message</font>

496
00:20:20,059 --> 00:20:24,500
buffer to that client<font color="#CCCCCC"> we know that that</font>

497
00:20:22,100 --> 00:20:27,408
<font color="#E5E5E5">memory is free now and</font><font color="#CCCCCC"> we're</font><font color="#E5E5E5"> just going</font>

498
00:20:24,500 --> 00:20:28,610
<font color="#CCCCCC">to</font><font color="#E5E5E5"> point it there so our full a fully</font>

499
00:20:27,409 --> 00:20:31,399
<font color="#E5E5E5">controlled service buffer will then</font>

500
00:20:28,610 --> 00:20:33,139
point<font color="#E5E5E5"> to that earlier a location you my</font>

501
00:20:31,399 --> 00:20:35,389
<font color="#E5E5E5">size will</font><font color="#CCCCCC"> extends</font><font color="#E5E5E5"> to pass this your</font>

502
00:20:33,139 --> 00:20:37,939
client<font color="#CCCCCC"> object and then we</font><font color="#E5E5E5"> have and then</font>

503
00:20:35,389 --> 00:20:40,490
we<font color="#E5E5E5"> write our NOC code message execute we</font>

504
00:20:37,940 --> 00:20:44,419
now have a pointer<font color="#CCCCCC"> to a CR connection</font>

505
00:20:40,490 --> 00:20:48,169
object<font color="#E5E5E5"> now there's a couple of drawbacks</font>

506
00:20:44,419 --> 00:20:50,330
to this as we see full when the<font color="#CCCCCC"> message</font>

507
00:20:48,169 --> 00:20:51,769
get executed<font color="#CCCCCC"> P daughter gets freed</font>

508
00:20:50,330 --> 00:20:54,049
<font color="#E5E5E5">meaning that we've got a double free</font>

509
00:20:51,769 --> 00:20:55,700
condition<font color="#E5E5E5"> we've disconnected to this</font>

510
00:20:54,049 --> 00:20:59,149
your client<font color="#CCCCCC"> object and then executed a</font>

511
00:20:55,700 --> 00:21:00,860
chromium message<font color="#E5E5E5"> but for for that</font>

512
00:20:59,149 --> 00:21:05,268
purpose I basically just spray the heap

513
00:21:00,860 --> 00:21:07,010
again and hope for<font color="#E5E5E5"> the best</font><font color="#CCCCCC"> we also lose</font>

514
00:21:05,269 --> 00:21:09,889
our arbitrary<font color="#E5E5E5"> right because we kind of</font>

515
00:21:07,010 --> 00:21:12,260
<font color="#E5E5E5">like used SVC phone now and it will</font><font color="#CCCCCC"> be</font>

516
00:21:09,889 --> 00:21:15,769
freed but the thing is<font color="#E5E5E5"> we can basically</font>

517
00:21:12,260 --> 00:21:18,529
reuse our partial buffer to do this

518
00:21:15,769 --> 00:21:22,159
exact<font color="#CCCCCC"> same thing</font><font color="#E5E5E5"> and regain our fully</font>

519
00:21:18,529 --> 00:21:24,350
controlled SVC buffer so using the

520
00:21:22,159 --> 00:21:27,139
address<font color="#E5E5E5"> of that CR connection object we</font>

521
00:21:24,350 --> 00:21:29,000
can<font color="#E5E5E5"> now basically manipulate POS buffer</font>

522
00:21:27,139 --> 00:21:32,840
and CB<font color="#E5E5E5"> host buffer as long as we never</font>

523
00:21:29,000 --> 00:21:34,730
disconnect<font color="#E5E5E5"> that that client so we can</font>

524
00:21:32,840 --> 00:21:40,220
manipulate<font color="#CCCCCC"> PS buffering CB s buffer to</font>

525
00:21:34,730 --> 00:21:42,320
now read arbitrary memory<font color="#E5E5E5"> so as for a</font>

526
00:21:40,220 --> 00:21:43,970
command execution<font color="#CCCCCC"> command execution</font>

527
00:21:42,320 --> 00:21:46,610
primitive there's this<font color="#E5E5E5"> convenient</font>

528
00:21:43,970 --> 00:21:49,730
function called CR spawn<font color="#CCCCCC"> it is within</font>

529
00:21:46,610 --> 00:21:52,610
<font color="#E5E5E5">the same module as CR mem copy which</font><font color="#CCCCCC"> is</font>

530
00:21:49,730 --> 00:21:54,889
used by<font color="#CCCCCC"> shirt's your opengl</font><font color="#E5E5E5"> meaning that</font>

531
00:21:52,610 --> 00:21:57,469
<font color="#E5E5E5">just through our arbitrary read and</font>

532
00:21:54,889 --> 00:22:00,049
attacking<font color="#CCCCCC"> the import address table</font><font color="#E5E5E5"> will</font>

533
00:21:57,470 --> 00:22:02,630
eventually end up<font color="#E5E5E5"> with a pointer to</font><font color="#CCCCCC"> see</font>

534
00:22:00,049 --> 00:22:04,760
our spawn and this does<font color="#E5E5E5"> on</font><font color="#CCCCCC"> Windows</font><font color="#E5E5E5"> it</font>

535
00:22:02,630 --> 00:22:09,440
does create process<font color="#E5E5E5"> on other systems</font>

536
00:22:04,760 --> 00:22:11,899
<font color="#CCCCCC">that uses exec VP</font><font color="#E5E5E5"> and we're going to use</font>

537
00:22:09,440 --> 00:22:13,510
bounce<font color="#E5E5E5"> info CR in the dispatch table to</font>

538
00:22:11,899 --> 00:22:15,239
point to this function

539
00:22:13,510 --> 00:22:19,480
now what this does<font color="#E5E5E5"> is it basically</font>

540
00:22:15,240 --> 00:22:22,720
receives basically what's going to

541
00:22:19,480 --> 00:22:25,630
happen here<font color="#CCCCCC"> the CR spawn method</font><font color="#E5E5E5"> bounce</font>

542
00:22:22,720 --> 00:22:27,340
info see<font color="#E5E5E5"> R is going to accept some value</font>

543
00:22:25,630 --> 00:22:31,419
and it's going to<font color="#E5E5E5"> be interpreted</font><font color="#CCCCCC"> as a</font>

544
00:22:27,340 --> 00:22:33,668
pointer<font color="#E5E5E5"> or it's good to give a pointer</font>

545
00:22:31,419 --> 00:22:35,140
<font color="#CCCCCC">to a chromium message to see our spawn</font>

546
00:22:33,669 --> 00:22:36,640
and see our spawn is going to

547
00:22:35,140 --> 00:22:39,040
dereference<font color="#CCCCCC"> that pointer as another</font>

548
00:22:36,640 --> 00:22:40,900
pointer so and then<font color="#CCCCCC"> that is eventually</font>

549
00:22:39,040 --> 00:22:42,210
going<font color="#CCCCCC"> to be our command</font><font color="#E5E5E5"> line so that</font><font color="#CCCCCC"> is</font>

550
00:22:40,900 --> 00:22:45,790
you<font color="#E5E5E5"> create a CR client object</font>

551
00:22:42,210 --> 00:22:48,610
<font color="#E5E5E5">disconnected</font><font color="#CCCCCC"> we're okay off the CR spawn</font>

552
00:22:45,790 --> 00:22:50,290
that<font color="#E5E5E5"> memory is not going to get freed</font><font color="#CCCCCC"> so</font>

553
00:22:48,610 --> 00:22:52,570
we'll just write all<font color="#CCCCCC"> of</font><font color="#E5E5E5"> our arguments</font><font color="#CCCCCC"> to</font>

554
00:22:50,290 --> 00:22:55,240
<font color="#CCCCCC">that</font><font color="#E5E5E5"> see our client old see our client</font>

555
00:22:52,570 --> 00:22:57,428
<font color="#E5E5E5">objects memory</font><font color="#CCCCCC"> and then add that to our</font>

556
00:22:55,240 --> 00:22:59,320
chromium message and when we call this

557
00:22:57,429 --> 00:23:02,049
dispatch method<font color="#E5E5E5"> through</font><font color="#CCCCCC"> they're using</font>

558
00:22:59,320 --> 00:23:05,710
the<font color="#E5E5E5"> relevant op codes will be executing</font>

559
00:23:02,049 --> 00:23:08,139
OS<font color="#E5E5E5"> commands so we managed to convert our</font>

560
00:23:05,710 --> 00:23:09,880
<font color="#E5E5E5">arbitrary</font><font color="#CCCCCC"> write and info</font><font color="#E5E5E5"> leak into an</font>

561
00:23:08,140 --> 00:23:11,440
arbitrary read through attacking the

562
00:23:09,880 --> 00:23:13,720
dispatch table<font color="#E5E5E5"> and creating fake service</font>

563
00:23:11,440 --> 00:23:15,610
buffers<font color="#CCCCCC"> you obtain the address of CO</font>

564
00:23:13,720 --> 00:23:17,230
spawn using our arbitrary read and we

565
00:23:15,610 --> 00:23:23,850
haven't executed<font color="#E5E5E5"> shell code or used</font>

566
00:23:17,230 --> 00:23:23,850
kernel32<font color="#CCCCCC"> alright mandatory</font>

567
00:23:25,080 --> 00:23:28,199
[Music]

568
00:23:35,320 --> 00:23:38,730
I'm hoping calc will spawn on the screen

569
00:23:51,750 --> 00:24:11,400
<font color="#E5E5E5">all right</font><font color="#CCCCCC"> I'd worked</font><font color="#E5E5E5"> thinking</font><font color="#CCCCCC"> about is</font>

570
00:24:05,410 --> 00:24:11,400
<font color="#E5E5E5">that I'm running it still so okay</font><font color="#CCCCCC"> now</font>

571
00:24:15,690 --> 00:24:21,360
all right<font color="#E5E5E5"> and any questions</font>

572
00:24:34,880 --> 00:24:37,750
I'm sorry

573
00:24:43,109 --> 00:24:49,449
<font color="#CCCCCC">entirely depends on chromium s have you</font>

574
00:24:46,179 --> 00:24:51,129
tried this on<font color="#E5E5E5"> other software this that</font>

575
00:24:49,450 --> 00:24:54,039
relies on chromium<font color="#CCCCCC"> I</font><font color="#E5E5E5"> was build upon</font>

576
00:24:51,129 --> 00:24:55,449
chromium<font color="#E5E5E5"> so the thing is I only know 3d</font>

577
00:24:54,039 --> 00:24:58,059
acceleration in VirtualBox that makes

578
00:24:55,450 --> 00:24:59,619
use of chromium<font color="#CCCCCC"> but what I will</font><font color="#E5E5E5"> say</font>

579
00:24:58,059 --> 00:25:01,479
something<font color="#E5E5E5"> to take out</font><font color="#CCCCCC"> of this is that a</font>

580
00:24:59,619 --> 00:25:03,220
lot<font color="#CCCCCC"> of the stuff regarding fuzzing and</font>

581
00:25:01,479 --> 00:25:05,789
<font color="#E5E5E5">so on that carries over</font><font color="#CCCCCC"> to other</font>

582
00:25:03,220 --> 00:25:08,619
components<font color="#CCCCCC"> of VirtualBox itself</font><font color="#E5E5E5"> so</font>

583
00:25:05,789 --> 00:25:11,019
because the<font color="#E5E5E5"> other guest</font><font color="#CCCCCC"> Edition services</font>

584
00:25:08,619 --> 00:25:12,609
<font color="#E5E5E5">exposed the same interfaces</font><font color="#CCCCCC"> and there</font>

585
00:25:11,019 --> 00:25:13,929
might be a similar strategy<font color="#E5E5E5"> that you</font><font color="#CCCCCC"> can</font>

586
00:25:12,609 --> 00:25:15,549
actually take<font color="#CCCCCC"> with the vise simulation</font>

587
00:25:13,929 --> 00:25:27,580
in VirtualBox<font color="#E5E5E5"> but as for other products</font>

588
00:25:15,549 --> 00:25:30,059
<font color="#CCCCCC">that use chromium I'm not sure any</font><font color="#E5E5E5"> more</font>

589
00:25:27,580 --> 00:25:30,059
questions

590
00:25:38,190 --> 00:25:45,019
<font color="#E5E5E5">okay then I think</font><font color="#CCCCCC"> that's it thank you</font>

591
00:25:42,500 --> 00:25:45,019
[Applause]

