1
00:00:00,770 --> 00:00:04,480
[Applause]

2
00:00:06,770 --> 00:00:11,399
hi welcome<font color="#CCCCCC"> i'm luciene and today</font><font color="#E5E5E5"> i'm</font>

3
00:00:09,900 --> 00:00:14,040
going<font color="#E5E5E5"> to talk about</font><font color="#CCCCCC"> the versioning of</font>

4
00:00:11,400 --> 00:00:17,369
error correcting<font color="#E5E5E5"> codes</font><font color="#CCCCCC"> it's so nice to</font>

5
00:00:14,040 --> 00:00:19,080
<font color="#E5E5E5">be</font><font color="#CCCCCC"> in</font><font color="#E5E5E5"> Berlin</font><font color="#CCCCCC"> I didn't not I did not</font><font color="#E5E5E5"> yet</font>

6
00:00:17,369 --> 00:00:21,330
visited<font color="#E5E5E5"> this awesome</font>

7
00:00:19,080 --> 00:00:23,519
<font color="#CCCCCC">Tower or awesome</font><font color="#E5E5E5"> needle shaped object</font>

8
00:00:21,330 --> 00:00:26,000
but anyways I hope<font color="#E5E5E5"> throughout this</font>

9
00:00:23,519 --> 00:00:28,109
<font color="#E5E5E5">presentation you'll realize what is the</font>

10
00:00:26,000 --> 00:00:30,119
what<font color="#CCCCCC"> is the relationship</font><font color="#E5E5E5"> between a</font>

11
00:00:28,109 --> 00:00:32,009
needle shaped object and memory

12
00:00:30,119 --> 00:00:34,500
corruption<font color="#CCCCCC"> so yeah let's go on with the</font>

13
00:00:32,009 --> 00:00:38,520
<font color="#CCCCCC">presentation do you remember row hammer</font>

14
00:00:34,500 --> 00:00:40,290
so row hammer<font color="#E5E5E5"> anyone</font><font color="#CCCCCC"> I cannot see</font><font color="#E5E5E5"> okay</font>

15
00:00:38,520 --> 00:00:42,360
bro<font color="#E5E5E5"> I guess many people</font><font color="#CCCCCC"> raised their</font>

16
00:00:40,290 --> 00:00:45,839
their hands so row hammer is still kind

17
00:00:42,360 --> 00:00:49,649
of<font color="#CCCCCC"> new I would</font><font color="#E5E5E5"> say first it was</font>

18
00:00:45,840 --> 00:00:51,870
documented<font color="#E5E5E5"> in 2014 so what it</font><font color="#CCCCCC"> gives us</font>

19
00:00:49,649 --> 00:00:54,360
<font color="#E5E5E5">there's a there is like a a memory</font>

20
00:00:51,870 --> 00:00:57,000
<font color="#E5E5E5">durability problem which gives a</font>

21
00:00:54,360 --> 00:00:59,489
primitive<font color="#CCCCCC"> two that flips one bit</font>

22
00:00:57,000 --> 00:01:00,840
somewhere or several bits somewhere so

23
00:00:59,489 --> 00:01:03,419
maybe it's hard<font color="#E5E5E5"> to control</font>

24
00:01:00,840 --> 00:01:05,610
however in 2015 like one<font color="#E5E5E5"> year later</font>

25
00:01:03,420 --> 00:01:07,260
<font color="#E5E5E5">someone</font><font color="#CCCCCC"> already showed the several</font>

26
00:01:05,610 --> 00:01:09,960
exploits<font color="#E5E5E5"> so basically these were</font>

27
00:01:07,260 --> 00:01:12,540
<font color="#E5E5E5">privileged escalation exploits</font><font color="#CCCCCC"> there was</font>

28
00:01:09,960 --> 00:01:16,710
a kernel kernel exploit<font color="#CCCCCC"> that was using</font>

29
00:01:12,540 --> 00:01:19,439
<font color="#CCCCCC">the row hammer to change some some bits</font>

30
00:01:16,710 --> 00:01:21,330
in the page<font color="#E5E5E5"> table entry</font><font color="#CCCCCC"> thus mapping</font>

31
00:01:19,439 --> 00:01:24,000
some resources<font color="#CCCCCC"> that were used by the</font>

32
00:01:21,330 --> 00:01:26,759
kernel<font color="#CCCCCC"> so then you can also do like a</font>

33
00:01:24,000 --> 00:01:32,189
sense and sandbox<font color="#E5E5E5"> escape so this was</font>

34
00:01:26,759 --> 00:01:35,790
already<font color="#CCCCCC"> known in 2015 yeah so about</font>

35
00:01:32,189 --> 00:01:37,439
mitigations<font color="#CCCCCC"> there aren't</font><font color="#E5E5E5"> that many yet</font>

36
00:01:35,790 --> 00:01:39,390
<font color="#CCCCCC">however everything</font><font color="#E5E5E5"> is working progress</font>

37
00:01:37,439 --> 00:01:42,089
<font color="#E5E5E5">because</font><font color="#CCCCCC"> we still want to thoroughly</font>

38
00:01:39,390 --> 00:01:43,740
understand how row hammer<font color="#E5E5E5"> is working so</font>

39
00:01:42,090 --> 00:01:47,100
we are<font color="#CCCCCC"> making</font><font color="#E5E5E5"> progress but in order to</font>

40
00:01:43,740 --> 00:01:49,710
<font color="#E5E5E5">propose a decent</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> decent solution</font><font color="#CCCCCC"> we</font>

41
00:01:47,100 --> 00:01:51,750
really have<font color="#E5E5E5"> to understand</font><font color="#CCCCCC"> the phenomenon</font>

42
00:01:49,710 --> 00:01:55,619
so my work is<font color="#E5E5E5"> actually in the direction</font>

43
00:01:51,750 --> 00:01:58,430
of mitigations<font color="#CCCCCC"> but it's more offensive</font>

44
00:01:55,619 --> 00:02:02,189
because<font color="#CCCCCC"> I'm going</font><font color="#E5E5E5"> to show why one</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> the</font>

45
00:01:58,430 --> 00:02:04,229
defenses doesn't actually work<font color="#E5E5E5"> so let's</font>

46
00:02:02,189 --> 00:02:07,408
do a refresher on how<font color="#CCCCCC"> row hammer is</font>

47
00:02:04,229 --> 00:02:09,780
working so<font color="#E5E5E5"> let's assume we have this is</font>

48
00:02:07,409 --> 00:02:12,810
like<font color="#CCCCCC"> a view of memory memory</font><font color="#E5E5E5"> could</font>

49
00:02:09,780 --> 00:02:14,710
memory cells are organized in rows and

50
00:02:12,810 --> 00:02:16,750
<font color="#CCCCCC">in cow</font>

51
00:02:14,710 --> 00:02:19,450
with the code snippet<font color="#E5E5E5"> on the right we</font>

52
00:02:16,750 --> 00:02:21,820
<font color="#E5E5E5">can trigger the bit flip so the</font><font color="#CCCCCC"> code</font>

53
00:02:19,450 --> 00:02:25,810
snippet is just a tight loop that

54
00:02:21,820 --> 00:02:28,239
accesses<font color="#CCCCCC"> two rows which are a part one</font>

55
00:02:25,810 --> 00:02:30,580
which are<font color="#E5E5E5"> apart one row so they do have</font>

56
00:02:28,240 --> 00:02:33,580
<font color="#E5E5E5">another row which</font><font color="#CCCCCC"> is not really accessed</font>

57
00:02:30,580 --> 00:02:35,520
now and if you do this fast enough<font color="#E5E5E5"> for</font>

58
00:02:33,580 --> 00:02:39,490
<font color="#E5E5E5">several times the row in the middle</font>

59
00:02:35,520 --> 00:02:41,680
<font color="#E5E5E5">could expose a bit</font><font color="#CCCCCC"> trip</font><font color="#E5E5E5"> so you while you</font>

60
00:02:39,490 --> 00:02:44,050
<font color="#E5E5E5">don't have access to this to this row</font>

61
00:02:41,680 --> 00:02:46,170
<font color="#E5E5E5">you managed to cause somehow a bit flip</font>

62
00:02:44,050 --> 00:02:49,450
in that row so in another<font color="#E5E5E5"> part of memory</font>

63
00:02:46,170 --> 00:02:52,809
<font color="#E5E5E5">you</font><font color="#CCCCCC"> managed to</font><font color="#E5E5E5"> do to have a</font><font color="#CCCCCC"> write one</font>

64
00:02:49,450 --> 00:02:57,220
bit or or more primitive<font color="#CCCCCC"> so this is</font><font color="#E5E5E5"> this</font>

65
00:02:52,810 --> 00:02:59,590
<font color="#E5E5E5">is how brohamer is working we can take</font>

66
00:02:57,220 --> 00:03:02,590
two<font color="#E5E5E5"> properties which are interesting for</font>

67
00:02:59,590 --> 00:03:05,800
for us<font color="#E5E5E5"> today</font><font color="#CCCCCC"> so the row hammer can cause</font>

68
00:03:02,590 --> 00:03:07,980
some bit flips<font color="#E5E5E5"> not like an infinite</font>

69
00:03:05,800 --> 00:03:12,220
number<font color="#CCCCCC"> of bits is</font><font color="#E5E5E5"> not any bit</font><font color="#CCCCCC"> flip so</font>

70
00:03:07,980 --> 00:03:14,049
they they also depend their position and

71
00:03:12,220 --> 00:03:17,230
the amount of<font color="#E5E5E5"> bit lives that you are</font>

72
00:03:14,050 --> 00:03:18,970
causing it depends<font color="#E5E5E5"> on the on the</font>

73
00:03:17,230 --> 00:03:21,760
hardware configuration<font color="#CCCCCC"> and on other</font>

74
00:03:18,970 --> 00:03:24,190
<font color="#E5E5E5">low-level properties of the of the</font>

75
00:03:21,760 --> 00:03:25,959
machine that<font color="#CCCCCC"> you're running</font><font color="#E5E5E5"> on but also</font>

76
00:03:24,190 --> 00:03:28,210
<font color="#E5E5E5">another property is that everything is</font>

77
00:03:25,960 --> 00:03:31,120
reproducible<font color="#CCCCCC"> so once you find</font><font color="#E5E5E5"> you found</font>

78
00:03:28,210 --> 00:03:33,460
some bit flips on one<font color="#E5E5E5"> machine you</font><font color="#CCCCCC"> can</font>

79
00:03:31,120 --> 00:03:36,280
<font color="#E5E5E5">reuse the same machine again to trigger</font>

80
00:03:33,460 --> 00:03:41,410
those bit flips so this is what we're

81
00:03:36,280 --> 00:03:43,810
going<font color="#E5E5E5"> to to work with in terms of</font>

82
00:03:41,410 --> 00:03:46,270
<font color="#CCCCCC">defenses by the way I skipped already</font>

83
00:03:43,810 --> 00:03:48,160
the software software defenses<font color="#E5E5E5"> for row</font>

84
00:03:46,270 --> 00:03:50,230
hammer<font color="#E5E5E5"> maybe you can talk we</font><font color="#CCCCCC"> can talk</font>

85
00:03:48,160 --> 00:03:53,020
afterwards<font color="#E5E5E5"> but let's look at the</font>

86
00:03:50,230 --> 00:03:55,450
hardware defenses what we have here we

87
00:03:53,020 --> 00:03:57,280
have targeted target<font color="#CCCCCC"> raw refresh which</font>

88
00:03:55,450 --> 00:04:00,700
basically<font color="#E5E5E5"> it's a harder mechanism that</font>

89
00:03:57,280 --> 00:04:04,810
will track the amount<font color="#E5E5E5"> of accesses</font><font color="#CCCCCC"> to to</font>

90
00:04:00,700 --> 00:04:08,260
these rows so if if<font color="#E5E5E5"> the if</font><font color="#CCCCCC"> the this</font>

91
00:04:04,810 --> 00:04:11,530
<font color="#E5E5E5">amount if you access this this</font><font color="#CCCCCC"> rose many</font>

92
00:04:08,260 --> 00:04:13,390
times in a<font color="#CCCCCC"> short period of time</font>

93
00:04:11,530 --> 00:04:16,720
and you<font color="#E5E5E5"> are above a certain threshold</font>

94
00:04:13,390 --> 00:04:19,510
<font color="#E5E5E5">then what will</font><font color="#CCCCCC"> happen</font><font color="#E5E5E5"> this</font><font color="#CCCCCC"> mechanism</font>

95
00:04:16,720 --> 00:04:22,780
will refresh the<font color="#E5E5E5"> adjacent rows so the</font>

96
00:04:19,510 --> 00:04:24,930
rows<font color="#CCCCCC"> that I just</font><font color="#E5E5E5"> showed now this is</font>

97
00:04:22,780 --> 00:04:27,599
something that is fairly<font color="#E5E5E5"> new</font>

98
00:04:24,930 --> 00:04:30,210
it's been pushed in the lpddr4 standard

99
00:04:27,600 --> 00:04:33,360
but however it requires collaboration

100
00:04:30,210 --> 00:04:35,039
with<font color="#CCCCCC"> a</font><font color="#E5E5E5"> former so the</font><font color="#CCCCCC"> BIOS has</font><font color="#E5E5E5"> to somehow</font>

101
00:04:33,360 --> 00:04:36,600
enable<font color="#E5E5E5"> this and also the memory</font>

102
00:04:35,039 --> 00:04:38,639
<font color="#E5E5E5">controller has</font><font color="#CCCCCC"> to be aware of all of</font>

103
00:04:36,600 --> 00:04:43,289
<font color="#E5E5E5">these things</font><font color="#CCCCCC"> so by</font><font color="#E5E5E5"> default it</font><font color="#CCCCCC"> doesn't</font>

104
00:04:38,639 --> 00:04:45,780
come enabled for sure now<font color="#E5E5E5"> this is what</font>

105
00:04:43,289 --> 00:04:47,669
one<font color="#CCCCCC"> of them which</font><font color="#E5E5E5"> probably will be we</font>

106
00:04:45,780 --> 00:04:51,750
will<font color="#CCCCCC"> see in the future</font><font color="#E5E5E5"> how it evolves</font>

107
00:04:47,669 --> 00:04:55,198
<font color="#E5E5E5">but since</font><font color="#CCCCCC"> row hammer was discovered on</font>

108
00:04:51,750 --> 00:04:59,400
<font color="#E5E5E5">servers everybody thought that ECC is</font>

109
00:04:55,199 --> 00:05:02,940
kind<font color="#E5E5E5"> of good enough for so I recollect</font>

110
00:04:59,400 --> 00:05:04,739
<font color="#CCCCCC">encodes</font><font color="#E5E5E5"> are one of the another defense</font>

111
00:05:02,940 --> 00:05:06,900
for this<font color="#CCCCCC"> hyper</font><font color="#E5E5E5"> error correcting codes</font>

112
00:05:04,740 --> 00:05:08,940
weren't really designed<font color="#CCCCCC"> to</font><font color="#E5E5E5"> defend</font>

113
00:05:06,900 --> 00:05:12,179
against<font color="#E5E5E5"> row</font><font color="#CCCCCC"> hammer</font><font color="#E5E5E5"> they were designed to</font>

114
00:05:08,940 --> 00:05:15,330
<font color="#E5E5E5">defend against bit flips or memory</font>

115
00:05:12,180 --> 00:05:17,310
errors<font color="#E5E5E5"> but those bit flips could be</font>

116
00:05:15,330 --> 00:05:20,039
completely different<font color="#CCCCCC"> so there they do</font>

117
00:05:17,310 --> 00:05:24,930
have some some different things<font color="#E5E5E5"> but</font>

118
00:05:20,039 --> 00:05:27,419
<font color="#E5E5E5">however ECC is still still good good</font>

119
00:05:24,930 --> 00:05:29,490
defense probably but the question and

120
00:05:27,419 --> 00:05:31,889
<font color="#E5E5E5">also everybody knew that once you have</font>

121
00:05:29,490 --> 00:05:36,599
enough bit flips<font color="#E5E5E5"> actually you you would</font>

122
00:05:31,889 --> 00:05:39,979
bypass ECC<font color="#E5E5E5"> okay but the question</font><font color="#CCCCCC"> is how</font>

123
00:05:36,599 --> 00:05:43,469
good<font color="#CCCCCC"> is this</font><font color="#E5E5E5"> error correction code for</font>

124
00:05:39,979 --> 00:05:45,930
<font color="#E5E5E5">for row</font><font color="#CCCCCC"> hammered</font><font color="#E5E5E5"> by the error</font><font color="#CCCCCC"> correcting</font>

125
00:05:43,470 --> 00:05:48,900
<font color="#E5E5E5">error correction codes are really used a</font>

126
00:05:45,930 --> 00:05:51,510
<font color="#CCCCCC">lot in in servers so row hammer didn't</font>

127
00:05:48,900 --> 00:05:54,000
wasn't really so much<font color="#E5E5E5"> of a problem for</font>

128
00:05:51,510 --> 00:05:56,789
<font color="#E5E5E5">let's say cloud providers because they</font>

129
00:05:54,000 --> 00:06:01,050
have they have good harder with with<font color="#CCCCCC"> is</font>

130
00:05:56,789 --> 00:06:05,070
<font color="#E5E5E5">easy support so our our research we want</font>

131
00:06:01,050 --> 00:06:06,539
to<font color="#CCCCCC"> target now</font><font color="#E5E5E5"> to understand we want to</font>

132
00:06:05,070 --> 00:06:11,699
<font color="#CCCCCC">target and to try to answer this</font>

133
00:06:06,539 --> 00:06:14,460
question<font color="#E5E5E5"> how how can we how good is ECC</font>

134
00:06:11,699 --> 00:06:16,919
and Indian how can we bypass<font color="#E5E5E5"> ECC or is</font>

135
00:06:14,460 --> 00:06:20,070
it possible or how how<font color="#CCCCCC"> many bits it will</font>

136
00:06:16,919 --> 00:06:22,859
take at the<font color="#E5E5E5"> end</font><font color="#CCCCCC"> let's start</font><font color="#E5E5E5"> with the</font>

137
00:06:20,070 --> 00:06:24,840
<font color="#E5E5E5">gentle introduction in error correction</font>

138
00:06:22,860 --> 00:06:26,759
codes<font color="#CCCCCC"> if you see one on one there will</font>

139
00:06:24,840 --> 00:06:30,150
be a<font color="#CCCCCC"> cc one or two I</font><font color="#E5E5E5"> hope we can make it</font>

140
00:06:26,759 --> 00:06:32,370
till there<font color="#CCCCCC"> so out of all the believes</font>

141
00:06:30,150 --> 00:06:34,590
<font color="#E5E5E5">that we have some of</font><font color="#CCCCCC"> them</font><font color="#E5E5E5"> will be</font>

142
00:06:32,370 --> 00:06:38,419
detected<font color="#E5E5E5"> by their correction code and</font>

143
00:06:34,590 --> 00:06:40,739
some of them are not<font color="#E5E5E5"> detectable</font>

144
00:06:38,419 --> 00:06:43,198
some of the detectable ones will be

145
00:06:40,740 --> 00:06:45,600
<font color="#E5E5E5">actually corrected</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> is the role of</font>

146
00:06:43,199 --> 00:06:48,270
the error correction<font color="#E5E5E5"> and detection</font><font color="#CCCCCC"> at</font>

147
00:06:45,600 --> 00:06:50,220
the end<font color="#E5E5E5"> right</font><font color="#CCCCCC"> for a row hammer in the</font>

148
00:06:48,270 --> 00:06:52,289
row hammer context the interesting<font color="#E5E5E5"> are</font>

149
00:06:50,220 --> 00:06:55,620
these are the one<font color="#E5E5E5"> that are undetectable</font>

150
00:06:52,290 --> 00:06:59,130
<font color="#CCCCCC">so the silent corruptions</font><font color="#E5E5E5"> so if we can</font>

151
00:06:55,620 --> 00:07:02,669
we can cause<font color="#E5E5E5"> these the bit</font><font color="#CCCCCC"> flips in in</font>

152
00:06:59,130 --> 00:07:06,960
this<font color="#E5E5E5"> let's say data</font><font color="#CCCCCC"> data set then we can</font>

153
00:07:02,669 --> 00:07:09,240
have a row hammer exploit we want to do

154
00:07:06,960 --> 00:07:11,969
<font color="#E5E5E5">this without triggering the detectable</font>

155
00:07:09,240 --> 00:07:13,860
ones<font color="#E5E5E5"> so if we corrupt a bit and that one</font>

156
00:07:11,970 --> 00:07:16,320
is detected as being corrupted by<font color="#CCCCCC"> the</font>

157
00:07:13,860 --> 00:07:18,870
error<font color="#E5E5E5"> correction code if the machine or</font>

158
00:07:16,320 --> 00:07:20,699
if our<font color="#E5E5E5"> target machine is configured</font>

159
00:07:18,870 --> 00:07:23,130
correctly<font color="#E5E5E5"> it should probably crash the</font>

160
00:07:20,699 --> 00:07:26,090
<font color="#E5E5E5">machine so we want to avoid always the</font>

161
00:07:23,130 --> 00:07:30,659
detectable ones and our goal would be to

162
00:07:26,090 --> 00:07:32,330
<font color="#E5E5E5">find undetectable bit flips but the</font>

163
00:07:30,660 --> 00:07:34,620
thing is<font color="#CCCCCC"> that at the boundary</font><font color="#E5E5E5"> between</font>

164
00:07:32,330 --> 00:07:37,020
<font color="#E5E5E5">undetectable and detectable</font><font color="#CCCCCC"> it's not</font>

165
00:07:34,620 --> 00:07:39,539
really a clear<font color="#E5E5E5"> boundary so what do I</font>

166
00:07:37,020 --> 00:07:42,690
mean<font color="#CCCCCC"> by</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> for instance let's take</font>

167
00:07:39,539 --> 00:07:46,349
<font color="#E5E5E5">second ed I'm going to use this term not</font>

168
00:07:42,690 --> 00:07:48,419
in a very far<font color="#E5E5E5"> away but let's stick with</font>

169
00:07:46,349 --> 00:07:49,740
<font color="#E5E5E5">this so</font><font color="#CCCCCC"> sick</font><font color="#E5E5E5"> death stands for single</font>

170
00:07:48,419 --> 00:07:52,710
<font color="#E5E5E5">error correction and double error</font>

171
00:07:49,740 --> 00:07:56,820
detection<font color="#E5E5E5"> so the thing is</font><font color="#CCCCCC"> that for sure</font>

172
00:07:52,710 --> 00:08:00,239
<font color="#CCCCCC">any</font><font color="#E5E5E5"> one error will</font><font color="#CCCCCC"> be corrected</font><font color="#E5E5E5"> and for</font>

173
00:07:56,820 --> 00:08:04,400
sure<font color="#E5E5E5"> two errors will be</font><font color="#CCCCCC"> detected</font><font color="#E5E5E5"> but the</font>

174
00:08:00,240 --> 00:08:06,900
there's no specification<font color="#CCCCCC"> and there's no</font>

175
00:08:04,400 --> 00:08:08,340
there's no specification<font color="#CCCCCC"> about what</font>

176
00:08:06,900 --> 00:08:11,159
would<font color="#E5E5E5"> happen with more than three bits</font>

177
00:08:08,340 --> 00:08:12,840
so there's no guarantee there so what

178
00:08:11,160 --> 00:08:15,060
actually<font color="#CCCCCC"> happens in practice</font><font color="#E5E5E5"> depending</font>

179
00:08:12,840 --> 00:08:18,260
on the implementation<font color="#E5E5E5"> some of the three</font>

180
00:08:15,060 --> 00:08:21,030
bits<font color="#E5E5E5"> errors will still will still be</font>

181
00:08:18,260 --> 00:08:22,949
detected<font color="#E5E5E5"> but not all</font><font color="#CCCCCC"> of them there</font><font color="#E5E5E5"> will</font>

182
00:08:21,030 --> 00:08:25,109
be three bit errors which are undetected

183
00:08:22,949 --> 00:08:27,900
so actually we want to look<font color="#E5E5E5"> for this</font>

184
00:08:25,110 --> 00:08:30,330
<font color="#E5E5E5">three bit errors let's say that are not</font>

185
00:08:27,900 --> 00:08:32,098
are<font color="#CCCCCC"> not detected so as you can see the</font>

186
00:08:30,330 --> 00:08:34,049
boundary again between undetectable<font color="#E5E5E5"> and</font>

187
00:08:32,099 --> 00:08:36,719
detectable it's not really that smooth

188
00:08:34,049 --> 00:08:42,120
so we<font color="#CCCCCC"> want to provoke to cause the</font>

189
00:08:36,719 --> 00:08:44,490
silent silent<font color="#E5E5E5"> memory corruption yeah so</font>

190
00:08:42,120 --> 00:08:48,270
to further target our presentation it

191
00:08:44,490 --> 00:08:49,950
will<font color="#E5E5E5"> be something that we want</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> find</font>

192
00:08:48,270 --> 00:08:51,480
the minimum<font color="#CCCCCC"> number of bits lips and also</font>

193
00:08:49,950 --> 00:08:53,520
<font color="#E5E5E5">their position</font>

194
00:08:51,480 --> 00:08:55,920
that is<font color="#CCCCCC"> EC cannot detect</font><font color="#E5E5E5"> so why the</font>

195
00:08:53,520 --> 00:08:58,079
minimum number<font color="#E5E5E5"> well because with</font><font color="#CCCCCC"> RO</font>

196
00:08:55,920 --> 00:09:00,870
hammer we cannot we cannot actually

197
00:08:58,080 --> 00:09:02,460
<font color="#E5E5E5">trigger an infinite</font><font color="#CCCCCC"> number of of</font>

198
00:09:00,870 --> 00:09:04,560
<font color="#E5E5E5">business right</font><font color="#CCCCCC"> so</font><font color="#E5E5E5"> with RO hammer we can</font>

199
00:09:02,460 --> 00:09:06,420
<font color="#E5E5E5">trigger several several several</font><font color="#CCCCCC"> bill</font>

200
00:09:04,560 --> 00:09:08,849
<font color="#E5E5E5">tips and we want to have the highest</font>

201
00:09:06,420 --> 00:09:11,370
<font color="#E5E5E5">chance to actually it</font><font color="#CCCCCC"> trigger Bishop</font>

202
00:09:08,850 --> 00:09:13,650
such that the ECC can not detect so this

203
00:09:11,370 --> 00:09:16,310
will be our<font color="#E5E5E5"> goal for this reverse</font>

204
00:09:13,650 --> 00:09:18,990
engineering and<font color="#E5E5E5"> the motivation behind it</font>

205
00:09:16,310 --> 00:09:20,939
so I think I I hope I convinced<font color="#E5E5E5"> why</font>

206
00:09:18,990 --> 00:09:24,030
error correcting codes are interesting

207
00:09:20,940 --> 00:09:25,440
in the<font color="#CCCCCC"> row</font><font color="#E5E5E5"> hammer context let's see why</font>

208
00:09:24,030 --> 00:09:27,449
reverse engineering of error correcting

209
00:09:25,440 --> 00:09:29,400
<font color="#CCCCCC">codes right because I already gave you</font>

210
00:09:27,450 --> 00:09:31,590
<font color="#E5E5E5">the</font><font color="#CCCCCC"> theory so it should be</font><font color="#E5E5E5"> kind of clear</font>

211
00:09:29,400 --> 00:09:33,540
well as I said<font color="#CCCCCC"> the boundary between</font>

212
00:09:31,590 --> 00:09:39,150
<font color="#E5E5E5">undetectable and detectable</font><font color="#CCCCCC"> it's not</font>

213
00:09:33,540 --> 00:09:42,990
really<font color="#E5E5E5"> clear</font><font color="#CCCCCC"> and what we can it's</font><font color="#E5E5E5"> not</font>

214
00:09:39,150 --> 00:09:44,750
really<font color="#E5E5E5"> clear so why</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> guys engineering</font>

215
00:09:42,990 --> 00:09:47,130
then let's see how<font color="#CCCCCC"> is</font><font color="#E5E5E5"> this</font><font color="#CCCCCC"> is</font>

216
00:09:44,750 --> 00:09:49,760
<font color="#E5E5E5">implemented and what is you see I'm</font>

217
00:09:47,130 --> 00:09:53,100
going<font color="#E5E5E5"> to target in this presentation so</font>

218
00:09:49,760 --> 00:09:57,300
<font color="#CCCCCC">first of all let's see how it works so</font>

219
00:09:53,100 --> 00:10:00,180
this the CPU wants<font color="#E5E5E5"> to write some data to</font>

220
00:09:57,300 --> 00:10:02,790
memory<font color="#CCCCCC"> what it does it will</font><font color="#E5E5E5"> compute some</font>

221
00:10:00,180 --> 00:10:04,979
extra control bits with<font color="#E5E5E5"> the data that he</font>

222
00:10:02,790 --> 00:10:06,839
<font color="#CCCCCC">want</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> CPU wants to write and it</font>

223
00:10:04,980 --> 00:10:09,210
will write both<font color="#E5E5E5"> the</font><font color="#CCCCCC"> data and both the</font>

224
00:10:06,840 --> 00:10:11,040
control bits at the<font color="#E5E5E5"> same time when the</font>

225
00:10:09,210 --> 00:10:13,320
CPU<font color="#E5E5E5"> wants to retrieve data</font><font color="#CCCCCC"> from memory</font>

226
00:10:11,040 --> 00:10:15,120
<font color="#CCCCCC">to retrieve as well the control bits and</font>

227
00:10:13,320 --> 00:10:16,980
as well the<font color="#E5E5E5"> data and then it will do</font>

228
00:10:15,120 --> 00:10:18,900
some sort of computation on this data

229
00:10:16,980 --> 00:10:20,850
and figured out if there was<font color="#CCCCCC"> error</font>

230
00:10:18,900 --> 00:10:23,100
if there was error it may as well

231
00:10:20,850 --> 00:10:25,110
<font color="#CCCCCC">correct it</font><font color="#E5E5E5"> so everything is implemented</font>

232
00:10:23,100 --> 00:10:28,950
the the ECC that we<font color="#CCCCCC"> target is</font><font color="#E5E5E5"> employed</font>

233
00:10:25,110 --> 00:10:30,980
<font color="#E5E5E5">in the CPU</font><font color="#CCCCCC"> there are some interesting</font>

234
00:10:28,950 --> 00:10:35,040
<font color="#E5E5E5">properties with this with this</font>

235
00:10:30,980 --> 00:10:37,170
implementation<font color="#E5E5E5"> of ECC so as I said it's</font>

236
00:10:35,040 --> 00:10:39,449
<font color="#CCCCCC">embedded</font><font color="#E5E5E5"> on CPU die so it's a purely</font>

237
00:10:37,170 --> 00:10:42,569
Hardware implementation<font color="#E5E5E5"> there's no much</font>

238
00:10:39,450 --> 00:10:46,410
<font color="#E5E5E5">I mean it's there's no code</font><font color="#CCCCCC"> behind it</font>

239
00:10:42,570 --> 00:10:48,150
<font color="#E5E5E5">probably there</font><font color="#CCCCCC"> is some very low code</font><font color="#E5E5E5"> it</font>

240
00:10:46,410 --> 00:10:51,600
is completely transparent<font color="#E5E5E5"> from the CPU</font>

241
00:10:48,150 --> 00:10:54,180
<font color="#E5E5E5">in the sense that you cannot you cannot</font>

242
00:10:51,600 --> 00:10:57,180
explicitly<font color="#E5E5E5"> access the ECC part the</font>

243
00:10:54,180 --> 00:10:59,430
control bits and other properties are

244
00:10:57,180 --> 00:11:02,550
<font color="#CCCCCC">that</font><font color="#E5E5E5"> optionally</font>

245
00:10:59,430 --> 00:11:04,459
for reliability<font color="#E5E5E5"> for reliability and</font><font color="#CCCCCC"> high</font>

246
00:11:02,550 --> 00:11:06,500
<font color="#E5E5E5">availability in servers you would</font>

247
00:11:04,460 --> 00:11:08,450
to<font color="#CCCCCC"> figure it out when errors are</font>

248
00:11:06,500 --> 00:11:11,089
actually<font color="#E5E5E5"> corrected for example if you</font>

249
00:11:08,450 --> 00:11:13,339
have lots of<font color="#E5E5E5"> errors within a certain</font>

250
00:11:11,089 --> 00:11:15,640
<font color="#E5E5E5">team maybe it's time</font><font color="#CCCCCC"> to replace that</font>

251
00:11:13,339 --> 00:11:18,830
<font color="#E5E5E5">theme so this is this is a good practice</font>

252
00:11:15,640 --> 00:11:20,810
and<font color="#CCCCCC"> also it must</font><font color="#E5E5E5"> be very fast</font><font color="#CCCCCC"> because</font>

253
00:11:18,830 --> 00:11:23,980
this is on the critical<font color="#CCCCCC"> path and the</font>

254
00:11:20,810 --> 00:11:26,810
data is<font color="#E5E5E5"> not too useful if if it has</font>

255
00:11:23,980 --> 00:11:28,580
<font color="#CCCCCC">uncorrectable</font><font color="#E5E5E5"> errors on it so you want</font>

256
00:11:26,810 --> 00:11:31,729
to detect this<font color="#E5E5E5"> and you want to act and</font>

257
00:11:28,580 --> 00:11:33,680
<font color="#E5E5E5">you want to</font><font color="#CCCCCC"> implement</font><font color="#E5E5E5"> it very fast</font><font color="#CCCCCC"> but</font>

258
00:11:31,730 --> 00:11:35,600
another<font color="#CCCCCC"> interesting property and</font>

259
00:11:33,680 --> 00:11:37,189
probably that's why we're doing<font color="#E5E5E5"> reverse</font>

260
00:11:35,600 --> 00:11:39,980
engineering is<font color="#CCCCCC"> that this is</font><font color="#E5E5E5"> largely</font>

261
00:11:37,190 --> 00:11:42,649
<font color="#E5E5E5">undocumented maybe you can find in some</font>

262
00:11:39,980 --> 00:11:45,260
<font color="#E5E5E5">CPUs what kind of guarantees</font><font color="#CCCCCC"> they will</font>

263
00:11:42,649 --> 00:11:47,930
offer<font color="#E5E5E5"> you like</font><font color="#CCCCCC"> like a sect that</font><font color="#E5E5E5"> kind of</font>

264
00:11:45,260 --> 00:11:50,899
implementation<font color="#E5E5E5"> but this is about it you</font>

265
00:11:47,930 --> 00:11:52,760
wouldn't<font color="#E5E5E5"> find all the details sometimes</font>

266
00:11:50,899 --> 00:11:55,070
you can find<font color="#CCCCCC"> some details</font><font color="#E5E5E5"> about errors</font>

267
00:11:52,760 --> 00:11:58,459
<font color="#E5E5E5">but most of the times you just say you</font>

268
00:11:55,070 --> 00:12:02,240
<font color="#E5E5E5">just you just find that you - correct</font><font color="#CCCCCC"> -</font>

269
00:11:58,459 --> 00:12:05,959
<font color="#E5E5E5">it will detect</font><font color="#CCCCCC"> two errors and not much</font>

270
00:12:02,240 --> 00:12:07,940
<font color="#E5E5E5">more than</font><font color="#CCCCCC"> that so we and as</font><font color="#E5E5E5"> I said the</font>

271
00:12:05,959 --> 00:12:09,920
implementation<font color="#E5E5E5"> the boundary between</font>

272
00:12:07,940 --> 00:12:12,800
detectable and undetectable the one that

273
00:12:09,920 --> 00:12:15,949
we want<font color="#CCCCCC"> to look for it's kind of</font>

274
00:12:12,800 --> 00:12:18,890
implement<font color="#CCCCCC"> and implementation specific</font><font color="#E5E5E5"> so</font>

275
00:12:15,950 --> 00:12:21,080
how can<font color="#E5E5E5"> we try how can</font><font color="#CCCCCC"> we read this the</font>

276
00:12:18,890 --> 00:12:24,230
<font color="#E5E5E5">ECC bit well there are several several</font>

277
00:12:21,080 --> 00:12:27,170
<font color="#E5E5E5">ways</font><font color="#CCCCCC"> for any</font><font color="#E5E5E5"> problem you have there's a</font>

278
00:12:24,230 --> 00:12:29,510
tool probably you can always<font color="#E5E5E5"> buy a tool</font>

279
00:12:27,170 --> 00:12:33,620
which is a testing equipment used<font color="#E5E5E5"> to</font>

280
00:12:29,510 --> 00:12:35,630
test or you have to test the memory

281
00:12:33,620 --> 00:12:37,279
behavior<font color="#E5E5E5"> and to actually get</font>

282
00:12:35,630 --> 00:12:40,550
certification you<font color="#E5E5E5"> can use this kind of</font>

283
00:12:37,279 --> 00:12:42,500
tools<font color="#E5E5E5"> to</font><font color="#CCCCCC"> to tool to debug but to debug</font>

284
00:12:40,550 --> 00:12:45,740
your memory<font color="#CCCCCC"> controller but this is a</font>

285
00:12:42,500 --> 00:12:47,570
fairly<font color="#CCCCCC"> expensive tool and we don't want</font>

286
00:12:45,740 --> 00:12:50,000
to do<font color="#E5E5E5"> that and in</font><font color="#CCCCCC"> addition there are</font>

287
00:12:47,570 --> 00:12:52,910
other other tools<font color="#E5E5E5"> but sometimes they do</font>

288
00:12:50,000 --> 00:12:55,370
<font color="#E5E5E5">not support the reading the ECC part and</font>

289
00:12:52,910 --> 00:12:58,610
these tools are fairly<font color="#CCCCCC"> expensive</font><font color="#E5E5E5"> the</font>

290
00:12:55,370 --> 00:13:00,709
question is can we do better<font color="#E5E5E5"> than this</font>

291
00:12:58,610 --> 00:13:04,700
well with reverse engineering I'm going

292
00:13:00,709 --> 00:13:06,800
to show<font color="#E5E5E5"> you two things we</font><font color="#CCCCCC"> can I'm going</font>

293
00:13:04,700 --> 00:13:09,950
<font color="#E5E5E5">to show two attacks that are</font><font color="#CCCCCC"> aimed to</font>

294
00:13:06,800 --> 00:13:13,490
<font color="#CCCCCC">reverse-engineer the ACC they</font><font color="#E5E5E5"> see that</font>

295
00:13:09,950 --> 00:13:15,680
the control<font color="#E5E5E5"> bits right one with the one</font>

296
00:13:13,490 --> 00:13:18,279
<font color="#E5E5E5">is based on a fault injection and one is</font>

297
00:13:15,680 --> 00:13:23,439
based<font color="#E5E5E5"> on</font><font color="#CCCCCC"> a cold boot attack</font>

298
00:13:18,279 --> 00:13:26,350
yeah<font color="#E5E5E5"> so this is</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> kind of the long</font>

299
00:13:23,440 --> 00:13:30,850
introduction<font color="#E5E5E5"> for my presentation let's</font>

300
00:13:26,350 --> 00:13:33,730
see<font color="#E5E5E5"> this is the</font><font color="#CCCCCC"> ACC</font><font color="#E5E5E5"> 102</font><font color="#CCCCCC"> I hope you don't</font>

301
00:13:30,850 --> 00:13:39,610
get scared<font color="#CCCCCC"> and</font><font color="#E5E5E5"> yes I cannot see too well</font>

302
00:13:33,730 --> 00:13:43,300
<font color="#E5E5E5">from here so we have we have</font><font color="#CCCCCC"> this parity</font>

303
00:13:39,610 --> 00:13:46,329
matrix which is<font color="#E5E5E5"> some let's say some some</font>

304
00:13:43,300 --> 00:13:49,120
yeah<font color="#E5E5E5"> it's a parametric switch which is</font>

305
00:13:46,329 --> 00:13:53,019
just a matrix<font color="#CCCCCC"> which is used</font><font color="#E5E5E5"> to encode</font>

306
00:13:49,120 --> 00:13:54,759
and decode this<font color="#E5E5E5"> the data that the CPU</font>

307
00:13:53,019 --> 00:13:56,920
writes and reads<font color="#E5E5E5"> so this is the</font>

308
00:13:54,759 --> 00:13:59,620
construction<font color="#E5E5E5"> that</font><font color="#CCCCCC"> has nice properties</font>

309
00:13:56,920 --> 00:14:02,680
and that is easy implement<font color="#E5E5E5"> that is easy</font>

310
00:13:59,620 --> 00:14:04,930
<font color="#E5E5E5">to implement in in</font><font color="#CCCCCC"> Hardware</font><font color="#E5E5E5"> most of the</font>

311
00:14:02,680 --> 00:14:07,420
times<font color="#E5E5E5"> things are implemented with with</font>

312
00:14:04,930 --> 00:14:10,120
with XOR operation<font color="#CCCCCC"> the takeaway from</font>

313
00:14:07,420 --> 00:14:12,370
this<font color="#CCCCCC"> one is that everything is based on</font>

314
00:14:10,120 --> 00:14:14,560
<font color="#E5E5E5">matrix multiplication when you're</font>

315
00:14:12,370 --> 00:14:17,740
<font color="#E5E5E5">encoding data so when the CPU writes</font>

316
00:14:14,560 --> 00:14:19,508
data to memory<font color="#CCCCCC"> you just multiply the</font>

317
00:14:17,740 --> 00:14:22,990
data that you<font color="#E5E5E5"> want to write you multiply</font>

318
00:14:19,509 --> 00:14:25,000
it<font color="#E5E5E5"> by</font><font color="#CCCCCC"> this parity matrix and when</font><font color="#E5E5E5"> you're</font>

319
00:14:22,990 --> 00:14:28,630
reading<font color="#E5E5E5"> that the data you</font><font color="#CCCCCC"> compute a</font>

320
00:14:25,000 --> 00:14:32,529
<font color="#CCCCCC">so-called this symbol</font><font color="#E5E5E5"> a syndrome by</font>

321
00:14:28,630 --> 00:14:34,569
reading the data<font color="#E5E5E5"> and again multiplying</font>

322
00:14:32,529 --> 00:14:37,569
this data with the parity matrix

323
00:14:34,569 --> 00:14:39,399
so again the encoding and decoding they

324
00:14:37,569 --> 00:14:41,229
do have in common<font color="#E5E5E5"> the parity matrix and</font>

325
00:14:39,399 --> 00:14:45,160
in<font color="#E5E5E5"> short the parity matrix will</font><font color="#CCCCCC"> give you</font>

326
00:14:41,230 --> 00:14:47,110
the<font color="#E5E5E5"> SEC code now we can view this parity</font>

327
00:14:45,160 --> 00:14:48,969
matrix a bit different than all of these

328
00:14:47,110 --> 00:14:50,949
operations<font color="#E5E5E5"> so basically if you have one</font>

329
00:14:48,970 --> 00:14:52,600
bit asserted in in the data that<font color="#CCCCCC"> you</font>

330
00:14:50,949 --> 00:14:55,359
want<font color="#CCCCCC"> to write</font><font color="#E5E5E5"> but if you are going to</font>

331
00:14:52,600 --> 00:14:58,269
select<font color="#E5E5E5"> just one one row of the parity</font>

332
00:14:55,360 --> 00:14:59,920
matrix the<font color="#CCCCCC"> vice-versa if you have one</font>

333
00:14:58,269 --> 00:15:03,370
error in the data<font color="#CCCCCC"> that you just</font>

334
00:14:59,920 --> 00:15:06,279
<font color="#E5E5E5">retrieved you're going to select a row</font>

335
00:15:03,370 --> 00:15:10,319
from the same parity matrix so in in

336
00:15:06,279 --> 00:15:13,540
<font color="#E5E5E5">other word in other words</font><font color="#CCCCCC"> basically this</font>

337
00:15:10,319 --> 00:15:15,790
the<font color="#E5E5E5"> syndrome so the</font><font color="#CCCCCC"> the error that</font><font color="#E5E5E5"> you</font>

338
00:15:13,540 --> 00:15:17,829
are going<font color="#E5E5E5"> to to observe the syndrome and</font>

339
00:15:15,790 --> 00:15:22,870
the<font color="#E5E5E5"> ECC part are really tied together</font>

340
00:15:17,829 --> 00:15:24,638
through this parity matrix<font color="#CCCCCC"> okay so the</font>

341
00:15:22,870 --> 00:15:27,850
question<font color="#CCCCCC"> is how do we reconstruct the</font>

342
00:15:24,639 --> 00:15:29,439
ACC<font color="#CCCCCC"> so I'm going</font><font color="#E5E5E5"> to try to rephrase the</font>

343
00:15:27,850 --> 00:15:32,200
previous slide<font color="#CCCCCC"> because I think it was</font>

344
00:15:29,439 --> 00:15:35,660
way too much<font color="#E5E5E5"> way</font><font color="#CCCCCC"> too many things</font><font color="#E5E5E5"> on it</font>

345
00:15:32,200 --> 00:15:38,060
so state differently<font color="#E5E5E5"> for sure the</font>

346
00:15:35,660 --> 00:15:41,740
syndromes<font color="#E5E5E5"> so the intermediate results of</font>

347
00:15:38,060 --> 00:15:44,869
ECC are reported<font color="#CCCCCC"> to</font><font color="#E5E5E5"> the operating system</font>

348
00:15:41,740 --> 00:15:47,660
now<font color="#CCCCCC"> this syndrome is as well used to to</font>

349
00:15:44,870 --> 00:15:49,820
do error<font color="#CCCCCC"> correction and detection</font><font color="#E5E5E5"> and we</font>

350
00:15:47,660 --> 00:15:52,430
have some some some equations there you

351
00:15:49,820 --> 00:15:56,300
can also view the you can also view the

352
00:15:52,430 --> 00:15:58,910
<font color="#E5E5E5">ACC as</font><font color="#CCCCCC"> a big table which is indexed</font><font color="#E5E5E5"> by a</font>

353
00:15:56,300 --> 00:16:02,329
<font color="#E5E5E5">symbol which is</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> bunch of bits that are</font>

354
00:15:58,910 --> 00:16:03,740
adjacent and<font color="#E5E5E5"> a symbol on one day in one</font>

355
00:16:02,330 --> 00:16:07,520
direction and the other direction<font color="#E5E5E5"> could</font>

356
00:16:03,740 --> 00:16:09,860
be the symbol value<font color="#CCCCCC"> also when you're</font>

357
00:16:07,520 --> 00:16:11,840
computing<font color="#E5E5E5"> the syndrome the another</font>

358
00:16:09,860 --> 00:16:15,380
<font color="#CCCCCC">simplification that</font><font color="#E5E5E5"> you can do is just</font>

359
00:16:11,840 --> 00:16:17,150
to read<font color="#CCCCCC"> the to do absorb between the ACC</font>

360
00:16:15,380 --> 00:16:19,550
<font color="#CCCCCC">that you you retrieved from the memory</font>

361
00:16:17,150 --> 00:16:26,870
and<font color="#E5E5E5"> the ECC that you just completed</font>

362
00:16:19,550 --> 00:16:30,079
<font color="#E5E5E5">yourself just intuitively</font><font color="#CCCCCC"> you could say</font>

363
00:16:26,870 --> 00:16:32,090
that<font color="#CCCCCC"> ECC decomposes bit by bit</font><font color="#E5E5E5"> as I said</font>

364
00:16:30,080 --> 00:16:35,420
<font color="#E5E5E5">everything is</font><font color="#CCCCCC"> implemented</font><font color="#E5E5E5"> in insole and</font>

365
00:16:32,090 --> 00:16:38,690
this is a property<font color="#E5E5E5"> of the</font><font color="#CCCCCC"> way the</font><font color="#E5E5E5"> ACC</font>

366
00:16:35,420 --> 00:16:41,390
was no was chosen to be easy<font color="#E5E5E5"> to</font>

367
00:16:38,690 --> 00:16:44,150
<font color="#E5E5E5">implement in in hardware so there are</font>

368
00:16:41,390 --> 00:16:48,220
two two interesting properties<font color="#CCCCCC"> the ACC</font>

369
00:16:44,150 --> 00:16:50,480
<font color="#CCCCCC">Val decomposes bit by bit and the ACC</font><font color="#E5E5E5"> is</font>

370
00:16:48,220 --> 00:16:52,700
<font color="#CCCCCC">is</font><font color="#E5E5E5"> very late with the syndrome so</font>

371
00:16:50,480 --> 00:16:54,920
basically the ACC we could say is<font color="#E5E5E5"> equal</font>

372
00:16:52,700 --> 00:16:58,010
with the syndrome<font color="#E5E5E5"> so if you have if we</font>

373
00:16:54,920 --> 00:17:01,780
treat ECC as a function and let's assume

374
00:16:58,010 --> 00:17:05,810
<font color="#E5E5E5">this function takes a 64-bit value input</font>

375
00:17:01,780 --> 00:17:09,260
<font color="#E5E5E5">and this this input has just only one</font>

376
00:17:05,810 --> 00:17:12,109
bit asserted on one of<font color="#E5E5E5"> the</font><font color="#CCCCCC"> positions on</font>

377
00:17:09,260 --> 00:17:14,720
one of<font color="#E5E5E5"> the positions</font><font color="#CCCCCC"> if if we write this</font>

378
00:17:12,109 --> 00:17:16,609
data or ACC<font color="#CCCCCC"> value will be written in the</font>

379
00:17:14,720 --> 00:17:19,699
control<font color="#E5E5E5"> bit and then when we read the</font>

380
00:17:16,609 --> 00:17:21,979
data<font color="#CCCCCC"> if we fold the exact bit that we</font>

381
00:17:19,699 --> 00:17:24,620
asserted previously then we<font color="#CCCCCC"> will observe</font>

382
00:17:21,980 --> 00:17:27,170
<font color="#CCCCCC">the syndrome and that syndrome</font><font color="#E5E5E5"> actually</font>

383
00:17:24,619 --> 00:17:30,919
<font color="#CCCCCC">is exactly the</font><font color="#E5E5E5"> same as the ECC that we</font>

384
00:17:27,170 --> 00:17:34,040
<font color="#E5E5E5">just wrote the memory so this is the</font><font color="#CCCCCC"> the</font>

385
00:17:30,920 --> 00:17:36,320
base of our attack<font color="#E5E5E5"> so the last equation</font>

386
00:17:34,040 --> 00:17:41,540
is kind of the most important one<font color="#E5E5E5"> from</font>

387
00:17:36,320 --> 00:17:44,270
<font color="#E5E5E5">this old math thingy okay</font><font color="#CCCCCC"> so that was</font>

388
00:17:41,540 --> 00:17:46,280
that was the the base of our our attack

389
00:17:44,270 --> 00:17:48,110
now I'm going to introduce<font color="#E5E5E5"> the</font>

390
00:17:46,280 --> 00:17:51,710
fault injection<font color="#CCCCCC"> based</font><font color="#E5E5E5"> reverse</font>

391
00:17:48,110 --> 00:17:53,659
engineering<font color="#E5E5E5"> so the thing is</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> to</font>

392
00:17:51,710 --> 00:17:57,110
rephrase everything<font color="#E5E5E5"> if you have a single</font>

393
00:17:53,660 --> 00:18:00,020
bit error in<font color="#E5E5E5"> every position</font><font color="#CCCCCC"> then this</font>

394
00:17:57,110 --> 00:18:03,139
this will allow<font color="#E5E5E5"> us to actually recover</font>

395
00:18:00,020 --> 00:18:05,690
all the<font color="#E5E5E5"> complete ECC function and with</font>

396
00:18:03,140 --> 00:18:09,740
this we can we can predict<font color="#E5E5E5"> what value</font>

397
00:18:05,690 --> 00:18:13,250
will be written<font color="#E5E5E5"> in in memory so what we</font>

398
00:18:09,740 --> 00:18:17,540
have to do<font color="#E5E5E5"> to to run our attack is</font><font color="#CCCCCC"> just</font>

399
00:18:13,250 --> 00:18:19,910
to call to cause a<font color="#E5E5E5"> single bit flip</font><font color="#CCCCCC"> in</font>

400
00:18:17,540 --> 00:18:22,520
<font color="#E5E5E5">the data that that we are reading and</font>

401
00:18:19,910 --> 00:18:24,530
then try<font color="#E5E5E5"> to observe the this syndrome</font>

402
00:18:22,520 --> 00:18:29,060
and with the<font color="#CCCCCC"> cin syndrome we can compose</font>

403
00:18:24,530 --> 00:18:34,190
the whole ECC table<font color="#E5E5E5"> but how do how can</font>

404
00:18:29,060 --> 00:18:35,720
it cause the single bit errors again<font color="#E5E5E5"> we</font>

405
00:18:34,190 --> 00:18:38,990
can<font color="#E5E5E5"> look at the through documentation</font>

406
00:18:35,720 --> 00:18:40,430
and some some motherboards they do have

407
00:18:38,990 --> 00:18:43,000
some memory<font color="#CCCCCC"> controllers it to have</font>

408
00:18:40,430 --> 00:18:46,070
resources<font color="#CCCCCC"> such that you can actually do</font>

409
00:18:43,000 --> 00:18:48,280
<font color="#E5E5E5">memory error injection but</font><font color="#CCCCCC"> this is not</font>

410
00:18:46,070 --> 00:18:50,840
<font color="#E5E5E5">really something that is standard</font>

411
00:18:48,280 --> 00:18:53,090
<font color="#E5E5E5">another another way is to actually use</font>

412
00:18:50,840 --> 00:18:56,929
<font color="#E5E5E5">the row hammer to inject</font><font color="#CCCCCC"> these errors</font>

413
00:18:53,090 --> 00:18:58,879
and<font color="#E5E5E5"> then observe the and then observe</font>

414
00:18:56,930 --> 00:19:02,690
the syndrome<font color="#E5E5E5"> but then it will be a bit</font>

415
00:18:58,880 --> 00:19:04,850
hard to see where<font color="#CCCCCC"> the error was injected</font>

416
00:19:02,690 --> 00:19:08,060
and also you don't<font color="#CCCCCC"> have that much</font>

417
00:19:04,850 --> 00:19:09,800
control<font color="#CCCCCC"> so these are and</font><font color="#E5E5E5"> also the bit</font>

418
00:19:08,060 --> 00:19:14,090
flips will be corrected<font color="#E5E5E5"> if you do just</font>

419
00:19:09,800 --> 00:19:16,340
<font color="#E5E5E5">one so that is hard to observe and again</font>

420
00:19:14,090 --> 00:19:17,870
for any problem you'll have a<font color="#CCCCCC"> to</font><font color="#E5E5E5"> the</font>

421
00:19:16,340 --> 00:19:20,510
problem with these<font color="#E5E5E5"> tools is that</font><font color="#CCCCCC"> they</font>

422
00:19:17,870 --> 00:19:22,699
are fairly<font color="#E5E5E5"> expensive and I'm not really</font>

423
00:19:20,510 --> 00:19:25,610
sure<font color="#CCCCCC"> if it comes with the NDA or</font><font color="#E5E5E5"> not but</font>

424
00:19:22,700 --> 00:19:28,010
in<font color="#E5E5E5"> any case if you see</font><font color="#CCCCCC"> a tool like</font><font color="#E5E5E5"> that</font>

425
00:19:25,610 --> 00:19:29,929
<font color="#CCCCCC">with</font><font color="#E5E5E5"> without a direct price it means</font>

426
00:19:28,010 --> 00:19:35,120
that<font color="#E5E5E5"> you know it it will take time</font><font color="#CCCCCC"> to</font>

427
00:19:29,930 --> 00:19:38,540
actually<font color="#E5E5E5"> get to</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> toe so what can</font><font color="#CCCCCC"> we</font>

428
00:19:35,120 --> 00:19:40,310
do better<font color="#E5E5E5"> than</font><font color="#CCCCCC"> this well so we will</font>

429
00:19:38,540 --> 00:19:43,370
propose a cheap and effective fault

430
00:19:40,310 --> 00:19:45,679
injection method<font color="#CCCCCC"> and I really</font><font color="#E5E5E5"> think it's</font>

431
00:19:43,370 --> 00:19:47,780
it's very<font color="#E5E5E5"> cheap but we should start</font><font color="#CCCCCC"> now</font>

432
00:19:45,680 --> 00:19:50,570
<font color="#E5E5E5">to see where the bits are actually</font>

433
00:19:47,780 --> 00:19:52,730
stored so this is a<font color="#CCCCCC"> non ECC</font><font color="#E5E5E5"> deem and</font>

434
00:19:50,570 --> 00:19:57,620
yeah obviously the<font color="#E5E5E5"> bits are stored in</font>

435
00:19:52,730 --> 00:19:59,270
the black chips<font color="#CCCCCC"> but the</font><font color="#E5E5E5"> takeaway is that</font>

436
00:19:57,620 --> 00:20:00,260
<font color="#E5E5E5">this interface is fairly standard</font>

437
00:19:59,270 --> 00:20:03,740
<font color="#E5E5E5">actually this is a</font>

438
00:20:00,260 --> 00:20:06,860
right<font color="#CCCCCC"> so for</font><font color="#E5E5E5"> example the</font><font color="#CCCCCC"> UCC team has</font>

439
00:20:03,740 --> 00:20:09,380
only one extra extra chip<font color="#E5E5E5"> and those are</font>

440
00:20:06,860 --> 00:20:11,928
the control bits<font color="#CCCCCC"> while we don't hear</font>

441
00:20:09,380 --> 00:20:13,850
exactly<font color="#CCCCCC"> we don't exactly care about the</font>

442
00:20:11,929 --> 00:20:16,669
control bit it's<font color="#E5E5E5"> actually good to know</font>

443
00:20:13,850 --> 00:20:18,860
how things<font color="#E5E5E5"> are are are</font><font color="#CCCCCC"> napped in reality</font>

444
00:20:16,669 --> 00:20:21,590
<font color="#E5E5E5">again all</font><font color="#CCCCCC"> of that this interface</font><font color="#E5E5E5"> is</font>

445
00:20:18,860 --> 00:20:24,439
standard<font color="#E5E5E5"> so for instance let's let's say</font>

446
00:20:21,590 --> 00:20:26,299
we want<font color="#CCCCCC"> to fold</font><font color="#E5E5E5"> a single bit right</font><font color="#CCCCCC"> we</font>

447
00:20:24,440 --> 00:20:27,490
can start<font color="#CCCCCC"> to the datasheet</font><font color="#E5E5E5"> of the of</font>

448
00:20:26,299 --> 00:20:31,399
<font color="#E5E5E5">that theme</font>

449
00:20:27,490 --> 00:20:33,260
DQ maps to one of the bit probably<font color="#E5E5E5"> DQ</font><font color="#CCCCCC"> 0</font>

450
00:20:31,399 --> 00:20:35,479
maps<font color="#E5E5E5"> to let's say the the least</font>

451
00:20:33,260 --> 00:20:39,408
significant<font color="#E5E5E5"> bit</font><font color="#CCCCCC"> a bit</font>

452
00:20:35,480 --> 00:20:42,799
this is pin number<font color="#CCCCCC"> three okay we also</font>

453
00:20:39,409 --> 00:20:45,590
have<font color="#E5E5E5"> it's easy</font><font color="#CCCCCC"> to gather</font><font color="#E5E5E5"> the pin</font><font color="#CCCCCC"> numbers</font>

454
00:20:42,799 --> 00:20:47,269
<font color="#E5E5E5">again this is a standard interface and</font>

455
00:20:45,590 --> 00:20:50,059
<font color="#E5E5E5">also you can find some some of these</font>

456
00:20:47,269 --> 00:20:54,679
numbers<font color="#E5E5E5"> on the PCB</font><font color="#CCCCCC"> itself</font><font color="#E5E5E5"> so we know</font>

457
00:20:50,059 --> 00:20:57,350
where pin<font color="#E5E5E5"> 1 is we can locate easily even</font>

458
00:20:54,679 --> 00:20:59,779
<font color="#E5E5E5">on the motherboard where DQ 0 stands</font>

459
00:20:57,350 --> 00:21:04,129
where<font color="#E5E5E5"> the single</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> we are we want to</font>

460
00:20:59,779 --> 00:21:07,730
fold is now<font color="#E5E5E5"> how do we actually fold a</font>

461
00:21:04,130 --> 00:21:09,320
signal well we<font color="#CCCCCC"> just want to quit so it's</font>

462
00:21:07,730 --> 00:21:11,750
an electrical signal<font color="#E5E5E5"> we just want to</font>

463
00:21:09,320 --> 00:21:14,418
create<font color="#CCCCCC"> a perturbation right</font><font color="#E5E5E5"> we should be</font>

464
00:21:11,750 --> 00:21:19,309
<font color="#CCCCCC">able to inject</font><font color="#E5E5E5"> some sort of current or</font>

465
00:21:14,419 --> 00:21:21,470
or play with<font color="#CCCCCC"> yeah or play with yeah we</font>

466
00:21:19,309 --> 00:21:24,710
should be able to<font color="#E5E5E5"> just do some sort of</font>

467
00:21:21,470 --> 00:21:28,309
perturbation there<font color="#CCCCCC"> our first</font><font color="#E5E5E5"> idea and</font>

468
00:21:24,710 --> 00:21:30,590
<font color="#E5E5E5">the way we started this project was a</font>

469
00:21:28,309 --> 00:21:32,960
bit random<font color="#E5E5E5"> so we have like a pretest</font><font color="#CCCCCC"> I</font>

470
00:21:30,590 --> 00:21:36,830
would say where we just<font color="#E5E5E5"> use a piece of</font>

471
00:21:32,960 --> 00:21:39,590
wire of<font color="#E5E5E5"> 5 centimeters and with</font><font color="#CCCCCC"> a</font>

472
00:21:36,830 --> 00:21:42,110
thickness<font color="#E5E5E5"> of 1</font><font color="#CCCCCC"> millimeter and we just</font>

473
00:21:39,590 --> 00:21:45,379
stick it there<font color="#E5E5E5"> in that hole where where</font>

474
00:21:42,110 --> 00:21:48,769
the arrow of<font color="#E5E5E5"> DQ 0 points to and we use a</font>

475
00:21:45,380 --> 00:21:54,260
lighter<font color="#E5E5E5"> yeah so this was a piezo</font>

476
00:21:48,769 --> 00:21:56,149
electric lighter<font color="#E5E5E5"> and yeah being</font><font color="#CCCCCC"> this</font>

477
00:21:54,260 --> 00:21:59,600
piezo electric lighter actually had like

478
00:21:56,149 --> 00:22:02,559
a big EMF spike<font color="#CCCCCC"> so a</font><font color="#E5E5E5"> big</font><font color="#CCCCCC"> electromagnetic</font>

479
00:21:59,600 --> 00:22:05,418
<font color="#CCCCCC">spike</font><font color="#E5E5E5"> that was picked up by</font><font color="#CCCCCC"> our antenna</font>

480
00:22:02,559 --> 00:22:07,549
which was<font color="#E5E5E5"> just a simple wire so we could</font>

481
00:22:05,419 --> 00:22:09,200
see<font color="#CCCCCC"> ECC errors at that moment and we</font>

482
00:22:07,549 --> 00:22:12,220
said yeah maybe we should<font color="#CCCCCC"> do a project</font>

483
00:22:09,200 --> 00:22:14,090
now because this looks like fun<font color="#CCCCCC"> but yet</font>

484
00:22:12,220 --> 00:22:16,309
then I<font color="#CCCCCC"> realized yeah</font>

485
00:22:14,090 --> 00:22:19,220
I don't want to move<font color="#E5E5E5"> that wire maybe I</font>

486
00:22:16,309 --> 00:22:20,990
know<font color="#E5E5E5"> maybe the the lighter will break so</font>

487
00:22:19,220 --> 00:22:22,580
let's<font color="#CCCCCC"> see if we can</font><font color="#E5E5E5"> build something even</font>

488
00:22:20,990 --> 00:22:25,400
<font color="#E5E5E5">better than</font><font color="#CCCCCC"> this</font>

489
00:22:22,580 --> 00:22:29,470
<font color="#CCCCCC">Wow so there's a nice single there</font><font color="#E5E5E5"> next</font>

490
00:22:25,400 --> 00:22:32,779
to<font color="#CCCCCC"> dq0 we have a bless a brown</font><font color="#E5E5E5"> signal</font>

491
00:22:29,470 --> 00:22:35,779
maybe<font color="#E5E5E5"> we can short that with this thing</font>

492
00:22:32,779 --> 00:22:39,070
<font color="#CCCCCC">so we built a very expensive</font><font color="#E5E5E5"> probe with</font>

493
00:22:35,779 --> 00:22:43,909
<font color="#CCCCCC">two from</font><font color="#E5E5E5"> two syringe needles that are</font>

494
00:22:39,070 --> 00:22:46,460
yeah<font color="#E5E5E5"> they are they are apart like so the</font>

495
00:22:43,909 --> 00:22:48,350
distance<font color="#E5E5E5"> between the</font><font color="#CCCCCC"> two</font><font color="#E5E5E5"> teeth the two</font>

496
00:22:46,460 --> 00:22:51,380
tips of the needle<font color="#E5E5E5"> is exactly the</font>

497
00:22:48,350 --> 00:22:55,039
distance<font color="#CCCCCC"> between two holes in that team</font>

498
00:22:51,380 --> 00:22:57,559
socket that we<font color="#E5E5E5"> just saw before and</font><font color="#CCCCCC"> also</font>

499
00:22:55,039 --> 00:23:00,860
this is<font color="#CCCCCC"> high slated</font><font color="#E5E5E5"> so I mean it's yeah</font>

500
00:22:57,559 --> 00:23:04,970
plastic in between<font color="#E5E5E5"> yeah so this was our</font>

501
00:23:00,860 --> 00:23:07,090
probe<font color="#E5E5E5"> this worked fairly well so we also</font>

502
00:23:04,970 --> 00:23:10,309
<font color="#E5E5E5">use like a tweezer to short out the</font>

503
00:23:07,090 --> 00:23:12,500
short out<font color="#CCCCCC"> the two needles and we are</font>

504
00:23:10,309 --> 00:23:15,260
<font color="#CCCCCC">observing errors it was a bit more</font>

505
00:23:12,500 --> 00:23:17,059
<font color="#E5E5E5">stable</font><font color="#CCCCCC"> than</font><font color="#E5E5E5"> the previous solution</font><font color="#CCCCCC"> it</font>

506
00:23:15,260 --> 00:23:19,669
worked nicely<font color="#CCCCCC"> but</font><font color="#E5E5E5"> then you realize that</font>

507
00:23:17,059 --> 00:23:21,590
<font color="#CCCCCC">yeah actually the VSS is next to most of</font>

508
00:23:19,669 --> 00:23:24,409
the signals right<font color="#CCCCCC"> so we</font><font color="#E5E5E5"> can do the same</font>

509
00:23:21,590 --> 00:23:25,879
<font color="#CCCCCC">for any signal</font><font color="#E5E5E5"> this was this was great</font>

510
00:23:24,409 --> 00:23:28,909
and and<font color="#E5E5E5"> actually if you look at the</font>

511
00:23:25,880 --> 00:23:31,130
printer the footprint of the<font color="#CCCCCC"> offered of</font>

512
00:23:28,909 --> 00:23:34,100
<font color="#E5E5E5">a dim socket you could see that next to</font>

513
00:23:31,130 --> 00:23:36,710
any signal<font color="#E5E5E5"> data signal you would find</font>

514
00:23:34,100 --> 00:23:41,178
the VSS signal so the idea is that we

515
00:23:36,710 --> 00:23:43,159
have<font color="#CCCCCC"> this mechanical constant probe</font><font color="#E5E5E5"> that</font>

516
00:23:41,179 --> 00:23:46,700
we can just move around<font color="#E5E5E5"> and short the</font>

517
00:23:43,159 --> 00:23:50,450
VSS with the data signal<font color="#CCCCCC"> yeah so pretty</font>

518
00:23:46,700 --> 00:23:53,570
good<font color="#E5E5E5"> so in this way we manage to do</font>

519
00:23:50,450 --> 00:23:57,740
fault injection<font color="#E5E5E5"> in all of them in all of</font>

520
00:23:53,570 --> 00:23:59,510
the<font color="#CCCCCC"> the positions of DQ</font><font color="#E5E5E5"> and by the way</font>

521
00:23:57,740 --> 00:24:02,360
this footprint also holds<font color="#E5E5E5"> through for</font>

522
00:23:59,510 --> 00:24:05,179
ddr4 so we started<font color="#CCCCCC"> free but this is true</font>

523
00:24:02,360 --> 00:24:07,158
<font color="#E5E5E5">for most of the most of the</font><font color="#CCCCCC"> dims out and</font>

524
00:24:05,179 --> 00:24:10,820
for all of<font color="#CCCCCC"> the teams</font><font color="#E5E5E5"> out there</font><font color="#CCCCCC"> because</font>

525
00:24:07,159 --> 00:24:14,390
usually<font color="#E5E5E5"> want</font><font color="#CCCCCC"> to put a vs of VSS signal</font>

526
00:24:10,820 --> 00:24:17,840
next to a data signal<font color="#E5E5E5"> such on the PCB</font>

527
00:24:14,390 --> 00:24:21,140
<font color="#CCCCCC">and the reason</font><font color="#E5E5E5"> for this is you</font><font color="#CCCCCC"> want</font><font color="#E5E5E5"> to</font>

528
00:24:17,840 --> 00:24:23,299
keep signal integrity as much as

529
00:24:21,140 --> 00:24:26,220
possible<font color="#CCCCCC"> so this</font><font color="#E5E5E5"> is something</font><font color="#CCCCCC"> like that</font>

530
00:24:23,299 --> 00:24:30,180
again<font color="#CCCCCC"> it is a</font><font color="#E5E5E5"> standard thing</font>

531
00:24:26,220 --> 00:24:32,400
so yeah<font color="#E5E5E5"> our probe</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> we</font><font color="#CCCCCC"> will have a</font>

532
00:24:30,180 --> 00:24:34,790
fault injection demo<font color="#E5E5E5"> with our demo gods</font>

533
00:24:32,400 --> 00:24:39,240
in<font color="#E5E5E5"> mp4 format</font>

534
00:24:34,790 --> 00:24:43,110
yeah<font color="#E5E5E5"> which with no sound yeah so that's</font>

535
00:24:39,240 --> 00:24:46,080
that's my<font color="#E5E5E5"> hand</font><font color="#CCCCCC"> and I I just set up the</font>

536
00:24:43,110 --> 00:24:49,080
probe there on<font color="#CCCCCC"> DQ three eyes on D q0</font><font color="#E5E5E5"> and</font>

537
00:24:46,080 --> 00:24:51,590
VSS so currently<font color="#E5E5E5"> there's no fault being</font>

538
00:24:49,080 --> 00:24:55,199
injected because<font color="#E5E5E5"> the two needles are</font>

539
00:24:51,590 --> 00:24:56,820
they they are<font color="#CCCCCC"> not in</font><font color="#E5E5E5"> contact the machine</font>

540
00:24:55,200 --> 00:25:00,570
is running so there's<font color="#E5E5E5"> no problem there</font>

541
00:24:56,820 --> 00:25:03,300
so<font color="#E5E5E5"> fairly stable</font><font color="#CCCCCC"> that's</font><font color="#E5E5E5"> that's yeah</font>

542
00:25:00,570 --> 00:25:05,429
modified<font color="#CCCCCC"> mantis version that</font><font color="#E5E5E5"> just reads</font>

543
00:25:03,300 --> 00:25:07,649
from from memory<font color="#CCCCCC"> random memory and you</font>

544
00:25:05,430 --> 00:25:11,610
<font color="#E5E5E5">can see on the right hand there's there</font>

545
00:25:07,650 --> 00:25:15,030
are the syndromes being reported this

546
00:25:11,610 --> 00:25:16,949
used to<font color="#E5E5E5"> have some but it I stopped</font><font color="#CCCCCC"> and</font>

547
00:25:15,030 --> 00:25:19,680
right now I'm using<font color="#E5E5E5"> the</font><font color="#CCCCCC"> tweezer to short</font>

548
00:25:16,950 --> 00:25:21,720
out those two those<font color="#CCCCCC"> two</font><font color="#E5E5E5"> pins so you can</font>

549
00:25:19,680 --> 00:25:25,260
see the errors on the right they're

550
00:25:21,720 --> 00:25:29,910
going they're going<font color="#E5E5E5"> up okay so this was</font>

551
00:25:25,260 --> 00:25:34,470
our our needle<font color="#E5E5E5"> so it</font><font color="#CCCCCC"> was a nice a nice</font>

552
00:25:29,910 --> 00:25:36,990
way to actually<font color="#E5E5E5"> inject errors and also</font>

553
00:25:34,470 --> 00:25:42,510
this<font color="#E5E5E5"> this</font><font color="#CCCCCC"> method would would work as</font>

554
00:25:36,990 --> 00:25:46,200
<font color="#E5E5E5">well on yes I can yeah</font><font color="#CCCCCC"> so this method</font>

555
00:25:42,510 --> 00:25:47,970
<font color="#CCCCCC">works works on any machine in</font><font color="#E5E5E5"> theory as</font>

556
00:25:46,200 --> 00:25:50,280
long as you can observe<font color="#E5E5E5"> the syndrome</font><font color="#CCCCCC"> so</font>

557
00:25:47,970 --> 00:25:52,380
let's<font color="#E5E5E5"> recap a</font><font color="#CCCCCC"> bit</font><font color="#E5E5E5"> this attack</font><font color="#CCCCCC"> to see</font>

558
00:25:50,280 --> 00:25:55,320
what it<font color="#CCCCCC"> actually takes because</font><font color="#E5E5E5"> I just</font>

559
00:25:52,380 --> 00:25:57,150
<font color="#E5E5E5">showed</font><font color="#CCCCCC"> you how</font><font color="#E5E5E5"> to inject an error</font><font color="#CCCCCC"> so</font>

560
00:25:55,320 --> 00:25:59,280
that<font color="#CCCCCC"> is that</font><font color="#E5E5E5"> the CPU will fill the</font>

561
00:25:57,150 --> 00:26:01,320
memory with with all<font color="#CCCCCC"> bit asserted</font>

562
00:25:59,280 --> 00:26:04,800
<font color="#E5E5E5">because this shunt acts as a pool to</font>

563
00:26:01,320 --> 00:26:06,570
<font color="#E5E5E5">zero now</font><font color="#CCCCCC"> then the CPU</font><font color="#E5E5E5"> will start to read</font>

564
00:26:04,800 --> 00:26:08,190
so we can write a nice program<font color="#CCCCCC"> to just</font>

565
00:26:06,570 --> 00:26:12,080
<font color="#E5E5E5">read from from the memory</font><font color="#CCCCCC"> an infinite</font>

566
00:26:08,190 --> 00:26:15,300
loop<font color="#CCCCCC"> we can short a specific signal</font><font color="#E5E5E5"> and</font>

567
00:26:12,080 --> 00:26:17,100
with our custom probe<font color="#E5E5E5"> and then</font><font color="#CCCCCC"> we</font>

568
00:26:15,300 --> 00:26:19,500
<font color="#CCCCCC">observe</font><font color="#E5E5E5"> the the syndrome and we gather</font>

569
00:26:17,100 --> 00:26:21,959
this we gather it in a nice file and

570
00:26:19,500 --> 00:26:24,960
then we just move<font color="#E5E5E5"> the probe to another</font>

571
00:26:21,960 --> 00:26:26,970
signal and so on until we<font color="#CCCCCC"> do</font><font color="#E5E5E5"> until we</font>

572
00:26:24,960 --> 00:26:30,360
<font color="#E5E5E5">recover the syndrome for every every</font>

573
00:26:26,970 --> 00:26:33,060
<font color="#E5E5E5">position of this</font><font color="#CCCCCC"> let's say</font><font color="#E5E5E5"> 64</font><font color="#CCCCCC"> bits then</font>

574
00:26:30,360 --> 00:26:35,520
then we use the<font color="#E5E5E5"> the equations that I was</font>

575
00:26:33,060 --> 00:26:38,010
showing you<font color="#E5E5E5"> before to to solve them and</font>

576
00:26:35,520 --> 00:26:39,389
to figure<font color="#E5E5E5"> out the ECC table so all the</font>

577
00:26:38,010 --> 00:26:42,000
syndromes

578
00:26:39,390 --> 00:26:43,980
if we observe all the syndromes<font color="#E5E5E5"> for all</font>

579
00:26:42,000 --> 00:26:46,110
the all the bits being faulted then we

580
00:26:43,980 --> 00:26:48,000
can recover<font color="#E5E5E5"> the full</font><font color="#CCCCCC"> DCC function so</font>

581
00:26:46,110 --> 00:26:48,510
<font color="#E5E5E5">ensure this</font><font color="#CCCCCC"> is the way that the attack</font>

582
00:26:48,000 --> 00:26:51,600
works

583
00:26:48,510 --> 00:26:53,309
is there an undesired behavior well we

584
00:26:51,600 --> 00:26:55,830
didn't get any machine crash<font color="#E5E5E5"> that was</font>

585
00:26:53,309 --> 00:26:59,160
fine<font color="#CCCCCC"> I guess I was paying</font><font color="#E5E5E5"> attention to</font>

586
00:26:55,830 --> 00:27:00,928
<font color="#E5E5E5">stuff and the thing is that</font><font color="#CCCCCC"> he sees he</font>

587
00:26:59,160 --> 00:27:03,090
<font color="#CCCCCC">will correct</font><font color="#E5E5E5"> just one bit error so</font>

588
00:27:00,929 --> 00:27:05,400
that's why you won't<font color="#E5E5E5"> get a machine crash</font>

589
00:27:03,090 --> 00:27:07,409
and yeah as I<font color="#E5E5E5"> said we can even go to</font>

590
00:27:05,400 --> 00:27:09,090
<font color="#E5E5E5">Linux and write a nice user</font><font color="#CCCCCC"> straight</font>

591
00:27:07,410 --> 00:27:12,000
program<font color="#CCCCCC"> that does the same stuff like</font>

592
00:27:09,090 --> 00:27:13,379
memory accessing yeah we also figured

593
00:27:12,000 --> 00:27:15,890
<font color="#E5E5E5">out that the memory bus is quite</font>

594
00:27:13,380 --> 00:27:20,240
resilient<font color="#CCCCCC"> because if you think</font><font color="#E5E5E5"> about it</font>

595
00:27:15,890 --> 00:27:22,440
when you<font color="#E5E5E5"> design</font><font color="#CCCCCC"> a expensive server board</font>

596
00:27:20,240 --> 00:27:24,929
you want<font color="#E5E5E5"> to have some sort of protection</font>

597
00:27:22,440 --> 00:27:28,020
<font color="#CCCCCC">of I know random random</font><font color="#E5E5E5"> limits being</font>

598
00:27:24,929 --> 00:27:29,970
sticked in your board right we got no

599
00:27:28,020 --> 00:27:32,730
<font color="#CCCCCC">magic blue smoke but yeah your knowledge</font>

600
00:27:29,970 --> 00:27:35,970
<font color="#E5E5E5">my very I'm not saying you should do</font>

601
00:27:32,730 --> 00:27:38,610
this<font color="#E5E5E5"> yeah there are some</font><font color="#CCCCCC"> downsides as</font>

602
00:27:35,970 --> 00:27:40,020
<font color="#CCCCCC">well so indeed it</font><font color="#E5E5E5"> doesn't look safe for</font>

603
00:27:38,610 --> 00:27:44,668
the victim however<font color="#CCCCCC"> with a learning</font>

604
00:27:40,020 --> 00:27:46,770
problem<font color="#E5E5E5"> it's a bit</font><font color="#CCCCCC"> error-prone so those</font>

605
00:27:44,669 --> 00:27:49,710
pins are fairly small they are<font color="#E5E5E5"> next to</font>

606
00:27:46,770 --> 00:27:52,168
<font color="#E5E5E5">each other you have</font><font color="#CCCCCC"> to somehow</font>

607
00:27:49,710 --> 00:27:55,110
coordinate when you're<font color="#CCCCCC"> moving the probe</font>

608
00:27:52,169 --> 00:27:56,640
with I know<font color="#E5E5E5"> someone else writing</font><font color="#CCCCCC"> down</font>

609
00:27:55,110 --> 00:27:58,709
<font color="#E5E5E5">the number for you or things like that</font>

610
00:27:56,640 --> 00:28:00,450
<font color="#E5E5E5">it's also time consuming we can also</font>

611
00:27:58,710 --> 00:28:02,460
make a joke how many grad students it

612
00:28:00,450 --> 00:28:05,850
<font color="#E5E5E5">takes to inject enough errors and</font>

613
00:28:02,460 --> 00:28:08,640
luckily to answer this question<font color="#E5E5E5"> probably</font>

614
00:28:05,850 --> 00:28:11,280
it doesn't<font color="#CCCCCC"> matter because</font><font color="#E5E5E5"> yeah because</font>

615
00:28:08,640 --> 00:28:13,440
<font color="#E5E5E5">we have no life I guess yeah so this</font><font color="#CCCCCC"> is</font>

616
00:28:11,280 --> 00:28:17,160
a comment<font color="#CCCCCC"> that was posted</font><font color="#E5E5E5"> so our work</font>

617
00:28:13,440 --> 00:28:19,590
was and as well<font color="#E5E5E5"> with</font><font color="#CCCCCC"> HCC</font><font color="#E5E5E5"> brohamer</font><font color="#CCCCCC"> I was</font>

618
00:28:17,160 --> 00:28:23,610
our work was or was already<font color="#CCCCCC"> named yeah</font>

619
00:28:19,590 --> 00:28:25,740
we may<font color="#E5E5E5"> publish in the news and yeah</font>

620
00:28:23,610 --> 00:28:29,540
someone commented that<font color="#E5E5E5"> we have no life</font>

621
00:28:25,740 --> 00:28:32,070
but anyways<font color="#E5E5E5"> if we have no life then I</font>

622
00:28:29,540 --> 00:28:34,980
guess we<font color="#CCCCCC"> we know how to get around</font><font color="#E5E5E5"> this</font>

623
00:28:32,070 --> 00:28:37,500
we<font color="#E5E5E5"> will get</font><font color="#CCCCCC"> alive and what we do we're</font>

624
00:28:34,980 --> 00:28:40,740
<font color="#E5E5E5">going to build another another way to</font>

625
00:28:37,500 --> 00:28:42,840
attack this ECC memory<font color="#CCCCCC"> to actually</font>

626
00:28:40,740 --> 00:28:45,330
<font color="#CCCCCC">figure it</font><font color="#E5E5E5"> out again the ECC function so</font>

627
00:28:42,840 --> 00:28:47,490
there were there<font color="#E5E5E5"> were other drawbacks of</font>

628
00:28:45,330 --> 00:28:49,199
the of our approach<font color="#E5E5E5"> as I said it's</font>

629
00:28:47,490 --> 00:28:50,970
fiddly<font color="#CCCCCC"> and you have to do it for every</font>

630
00:28:49,200 --> 00:28:51,600
every<font color="#E5E5E5"> target that that you want to</font>

631
00:28:50,970 --> 00:28:53,070
figure<font color="#E5E5E5"> it out</font>

632
00:28:51,600 --> 00:28:54,539
what if you can do just<font color="#CCCCCC"> four</font>

633
00:28:53,070 --> 00:28:56,428
only one target<font color="#E5E5E5"> and then use this</font>

634
00:28:54,539 --> 00:29:01,019
information<font color="#E5E5E5"> to actually build a nice</font>

635
00:28:56,429 --> 00:29:03,779
memory<font color="#CCCCCC"> damper based on ECC</font><font color="#E5E5E5"> okay so this</font>

636
00:29:01,019 --> 00:29:06,480
<font color="#E5E5E5">is the target</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> the second part of our</font>

637
00:29:03,779 --> 00:29:10,860
talk<font color="#E5E5E5"> so in a gentle introduction in cold</font>

638
00:29:06,480 --> 00:29:14,250
boot attack<font color="#E5E5E5"> so we know that the memory</font>

639
00:29:10,860 --> 00:29:17,008
content survives<font color="#E5E5E5"> after</font><font color="#CCCCCC"> power on power</font>

640
00:29:14,250 --> 00:29:19,200
<font color="#E5E5E5">off of course it's like a limited period</font>

641
00:29:17,009 --> 00:29:22,259
for<font color="#E5E5E5"> which it surprised and this highly</font>

642
00:29:19,200 --> 00:29:25,529
depends<font color="#E5E5E5"> on the temperature</font><font color="#CCCCCC"> we can access</font>

643
00:29:22,259 --> 00:29:27,840
this uncleared memory<font color="#E5E5E5"> either</font><font color="#CCCCCC"> on the same</font>

644
00:29:25,529 --> 00:29:29,879
host<font color="#E5E5E5"> which is called probably a reset</font>

645
00:29:27,840 --> 00:29:32,189
attack over on a different<font color="#E5E5E5"> host so</font>

646
00:29:29,879 --> 00:29:35,370
basically what we can do is we have like

647
00:29:32,190 --> 00:29:38,279
a victim machine<font color="#CCCCCC"> and we have a host</font>

648
00:29:35,370 --> 00:29:41,070
machine and we we have some interesting

649
00:29:38,279 --> 00:29:43,139
<font color="#CCCCCC">data in the victim machine</font><font color="#E5E5E5"> which ends</font><font color="#CCCCCC"> up</font>

650
00:29:41,070 --> 00:29:45,389
in in in RAM we cut the<font color="#E5E5E5"> power of the the</font>

651
00:29:43,139 --> 00:29:47,580
<font color="#CCCCCC">victim machine</font><font color="#E5E5E5"> we just quickly take the</font>

652
00:29:45,389 --> 00:29:49,229
<font color="#CCCCCC">demo template on</font><font color="#E5E5E5"> the other machine and</font>

653
00:29:47,580 --> 00:29:51,330
then<font color="#E5E5E5"> we start reading the memory there</font>

654
00:29:49,230 --> 00:29:53,460
and hopefully<font color="#CCCCCC"> we will get some plaintext</font>

655
00:29:51,330 --> 00:29:56,220
keys or passwords<font color="#CCCCCC"> so this is the cold</font>

656
00:29:53,460 --> 00:29:57,360
boot attack in short right<font color="#CCCCCC"> now if you</font>

657
00:29:56,220 --> 00:29:59,399
<font color="#CCCCCC">are lazy and</font><font color="#E5E5E5"> you can add it like very</font>

658
00:29:57,360 --> 00:30:03,779
<font color="#E5E5E5">quickly you should</font><font color="#CCCCCC"> use like a spray like</font>

659
00:29:59,399 --> 00:30:06,809
<font color="#E5E5E5">that which is</font><font color="#CCCCCC"> four which is four fault</font>

660
00:30:03,779 --> 00:30:09,179
<font color="#E5E5E5">location and that spray will cool</font><font color="#CCCCCC"> down</font>

661
00:30:06,809 --> 00:30:10,740
your your<font color="#CCCCCC"> deem such that you don't</font><font color="#E5E5E5"> you</font>

662
00:30:09,179 --> 00:30:13,740
don't lose<font color="#CCCCCC"> that much information so</font>

663
00:30:10,740 --> 00:30:16,769
actually the retention<font color="#E5E5E5"> time we could</font>

664
00:30:13,740 --> 00:30:19,590
recover like more than 95% of<font color="#E5E5E5"> the data</font>

665
00:30:16,769 --> 00:30:23,159
<font color="#CCCCCC">that the victim just wrote by just</font>

666
00:30:19,590 --> 00:30:25,678
<font color="#E5E5E5">having the the</font><font color="#CCCCCC"> deme around</font><font color="#E5E5E5"> one or</font><font color="#CCCCCC"> two</font>

667
00:30:23,159 --> 00:30:27,149
degrees<font color="#CCCCCC"> Celsius so</font><font color="#E5E5E5"> it's not really crazy</font>

668
00:30:25,679 --> 00:30:30,779
you<font color="#E5E5E5"> don't have to go to the North</font><font color="#CCCCCC"> Pole</font>

669
00:30:27,149 --> 00:30:34,439
for<font color="#E5E5E5"> this yeah so we also have a demo</font>

670
00:30:30,779 --> 00:30:38,100
with this one and the demo<font color="#CCCCCC"> god is with</font>

671
00:30:34,440 --> 00:30:42,000
us<font color="#E5E5E5"> again so I'm going to explain the</font>

672
00:30:38,100 --> 00:30:45,480
<font color="#CCCCCC">Koch attack so there are two machines</font>

673
00:30:42,000 --> 00:30:48,269
<font color="#CCCCCC">here</font><font color="#E5E5E5"> so yeah the one on the app is the</font>

674
00:30:45,480 --> 00:30:50,580
victim machine<font color="#E5E5E5"> for which we don't know</font>

675
00:30:48,269 --> 00:30:52,139
the ACC<font color="#E5E5E5"> and the one down is the host</font>

676
00:30:50,580 --> 00:30:55,620
machine<font color="#E5E5E5"> for which we know this is so the</font>

677
00:30:52,139 --> 00:30:58,789
idea is<font color="#E5E5E5"> to</font><font color="#CCCCCC"> figure out the</font><font color="#E5E5E5"> ACC on the</font>

678
00:30:55,620 --> 00:31:02,449
<font color="#CCCCCC">unknown one</font><font color="#E5E5E5"> we have some freezing spray</font>

679
00:30:58,789 --> 00:31:04,999
<font color="#CCCCCC">I actually</font><font color="#E5E5E5"> have several boxes now</font>

680
00:31:02,450 --> 00:31:07,429
yeah<font color="#E5E5E5"> it's non-conductive so yeah the</font>

681
00:31:04,999 --> 00:31:15,350
goal is that<font color="#E5E5E5"> we</font><font color="#CCCCCC"> want to recover the sec</font>

682
00:31:07,429 --> 00:31:16,639
function of the victim machine so we're

683
00:31:15,350 --> 00:31:20,330
going to<font color="#E5E5E5"> start with the host machine</font>

684
00:31:16,639 --> 00:31:22,820
<font color="#E5E5E5">being powered off and</font><font color="#CCCCCC"> the victim machine</font>

685
00:31:20,330 --> 00:31:24,980
<font color="#E5E5E5">of course</font><font color="#CCCCCC"> write some data to memory I'm</font>

686
00:31:22,820 --> 00:31:27,289
going to<font color="#E5E5E5"> apply the spray so I'm not</font>

687
00:31:24,980 --> 00:31:29,419
stressing<font color="#E5E5E5"> myself that much so it's</font><font color="#CCCCCC"> like</font>

688
00:31:27,289 --> 00:31:31,789
two or three<font color="#CCCCCC"> times it's more than enough</font>

689
00:31:29,419 --> 00:31:36,080
<font color="#E5E5E5">you know data is being written right</font><font color="#CCCCCC"> now</font>

690
00:31:31,789 --> 00:31:37,460
<font color="#E5E5E5">to memory by the victim machine yeah I</font>

691
00:31:36,080 --> 00:31:56,480
had to set<font color="#CCCCCC"> up a time where to cut</font><font color="#E5E5E5"> the</font>

692
00:31:37,460 --> 00:32:01,129
power to<font color="#CCCCCC"> the server right</font><font color="#E5E5E5"> so right now</font>

693
00:31:56,480 --> 00:32:03,379
the host is booting and<font color="#E5E5E5"> yeah we wrote</font>

694
00:32:01,129 --> 00:32:07,428
the<font color="#E5E5E5"> program such</font><font color="#CCCCCC"> that we</font><font color="#E5E5E5"> again log all</font>

695
00:32:03,379 --> 00:32:09,289
these syndromes<font color="#CCCCCC"> not to observe right so</font>

696
00:32:07,429 --> 00:32:11,690
this<font color="#E5E5E5"> also dumps all the information on</font>

697
00:32:09,289 --> 00:32:14,389
the<font color="#CCCCCC"> serial because that machine is not</font>

698
00:32:11,690 --> 00:32:16,700
too stable though<font color="#E5E5E5"> and right now we</font>

699
00:32:14,389 --> 00:32:18,769
recover all the syndromes<font color="#E5E5E5"> so the idea is</font>

700
00:32:16,700 --> 00:32:21,710
<font color="#CCCCCC">that we know the</font><font color="#E5E5E5"> data that we just wrote</font>

701
00:32:18,769 --> 00:32:24,259
we know the data that we just<font color="#E5E5E5"> observed</font>

702
00:32:21,710 --> 00:32:27,950
<font color="#E5E5E5">we know as well base is</font><font color="#CCCCCC"> a function of</font>

703
00:32:24,259 --> 00:32:30,080
<font color="#E5E5E5">the host machine and yeah everything</font>

704
00:32:27,950 --> 00:32:31,850
again is<font color="#CCCCCC"> based on our</font><font color="#E5E5E5"> operations and we</font>

705
00:32:30,080 --> 00:32:35,210
can recover<font color="#E5E5E5"> the ACC right now on the</font>

706
00:32:31,850 --> 00:32:37,279
victim machine<font color="#E5E5E5"> so this is a this is a</font>

707
00:32:35,210 --> 00:32:40,489
recap so at the<font color="#E5E5E5"> end we just gathered the</font>

708
00:32:37,279 --> 00:32:43,009
syndromes on the on the host<font color="#E5E5E5"> and we can</font>

709
00:32:40,489 --> 00:32:45,590
learn the ACC victim by applying<font color="#E5E5E5"> those</font>

710
00:32:43,009 --> 00:32:52,070
equations so this was the cold boot

711
00:32:45,590 --> 00:32:54,889
attack however there's a<font color="#CCCCCC"> problem so when</font>

712
00:32:52,070 --> 00:32:58,489
when a<font color="#E5E5E5"> machine with a ECC memory boots</font>

713
00:32:54,889 --> 00:33:00,080
up<font color="#E5E5E5"> it has to</font><font color="#CCCCCC"> train the memory and as</font>

714
00:32:58,489 --> 00:33:01,909
well any other machine<font color="#CCCCCC"> that boots up</font>

715
00:33:00,080 --> 00:33:04,539
from scratch<font color="#E5E5E5"> has to somehow train them</font>

716
00:33:01,909 --> 00:33:07,700
<font color="#E5E5E5">and the memory link but if it is EC</font>

717
00:33:04,539 --> 00:33:10,879
memory it's very important to clear the

718
00:33:07,700 --> 00:33:13,730
memory<font color="#E5E5E5"> before you use it</font><font color="#CCCCCC"> why is that</font>

719
00:33:10,879 --> 00:33:15,379
<font color="#E5E5E5">because the memory initially has let's</font>

720
00:33:13,730 --> 00:33:16,330
say random data<font color="#E5E5E5"> so you cannot make an</font>

721
00:33:15,379 --> 00:33:19,750
assumption there

722
00:33:16,330 --> 00:33:21,429
and this random<font color="#E5E5E5"> data is as well well for</font>

723
00:33:19,750 --> 00:33:25,270
all<font color="#E5E5E5"> the chips including the control</font>

724
00:33:21,430 --> 00:33:27,550
<font color="#CCCCCC">beats so then you cannot start reading</font>

725
00:33:25,270 --> 00:33:30,639
the memory<font color="#CCCCCC"> without getting</font><font color="#E5E5E5"> ECC errors so</font>

726
00:33:27,550 --> 00:33:32,260
what a any machine with ECC will do with

727
00:33:30,640 --> 00:33:33,850
this<font color="#CCCCCC"> issue</font><font color="#E5E5E5"> memory will first try to</font>

728
00:33:32,260 --> 00:33:36,220
clear out the memory or try<font color="#E5E5E5"> to write</font>

729
00:33:33,850 --> 00:33:39,100
<font color="#CCCCCC">something to to</font><font color="#E5E5E5"> this memory this is</font><font color="#CCCCCC"> a</font>

730
00:33:36,220 --> 00:33:42,220
bit bad for<font color="#CCCCCC"> our attack right because</font>

731
00:33:39,100 --> 00:33:44,199
right<font color="#E5E5E5"> now we we</font><font color="#CCCCCC"> are going</font><font color="#E5E5E5"> to when were</font>

732
00:33:42,220 --> 00:33:45,940
removing the<font color="#CCCCCC"> theme from</font><font color="#E5E5E5"> the victim to</font>

733
00:33:44,200 --> 00:33:48,130
<font color="#E5E5E5">the host the host will first reset this</font>

734
00:33:45,940 --> 00:33:52,240
memory so how<font color="#CCCCCC"> come we got syndromes</font>

735
00:33:48,130 --> 00:33:53,890
before well<font color="#E5E5E5"> and what are</font><font color="#CCCCCC"> our options so</font>

736
00:33:52,240 --> 00:33:57,610
we look through<font color="#CCCCCC"> bios if there's a memory</font>

737
00:33:53,890 --> 00:33:59,800
clear<font color="#E5E5E5"> enable or disable switch but there</font>

738
00:33:57,610 --> 00:34:02,320
wasn't any<font color="#E5E5E5"> I know some some other boards</font>

739
00:33:59,800 --> 00:34:05,680
they do have<font color="#E5E5E5"> one</font><font color="#CCCCCC"> but we</font><font color="#E5E5E5"> were using this</font>

740
00:34:02,320 --> 00:34:09,630
one so yeah<font color="#CCCCCC"> what</font><font color="#E5E5E5"> can we do</font>

741
00:34:05,680 --> 00:34:12,090
well<font color="#E5E5E5"> the obligatory</font><font color="#CCCCCC"> ida pro screenshot</font>

742
00:34:09,630 --> 00:34:14,890
there this is the<font color="#E5E5E5"> bios</font>

743
00:34:12,090 --> 00:34:17,610
<font color="#CCCCCC">it's not a year 5</font><font color="#E5E5E5"> virus it's a kind of</font>

744
00:34:14,889 --> 00:34:20,319
old version virus<font color="#CCCCCC"> can cook the old one</font>

745
00:34:17,610 --> 00:34:21,760
<font color="#CCCCCC">and we managed to</font><font color="#E5E5E5"> reverse-engineer parts</font>

746
00:34:20,320 --> 00:34:26,919
of the<font color="#E5E5E5"> bias and especially find this</font>

747
00:34:21,760 --> 00:34:30,940
this awesome<font color="#CCCCCC"> this awesome call and yeah</font>

748
00:34:26,918 --> 00:34:33,819
the call we just<font color="#E5E5E5"> knocked it out which</font>

749
00:34:30,940 --> 00:34:37,600
<font color="#CCCCCC">seems reasonable it the machine was</font>

750
00:34:33,820 --> 00:34:41,169
still stable<font color="#E5E5E5"> yeah and yeah this goes in</font>

751
00:34:37,600 --> 00:34:44,139
the<font color="#E5E5E5"> direction of alex introduction the</font>

752
00:34:41,168 --> 00:34:45,609
keynote speaker from<font color="#E5E5E5"> yesterday so yeah</font>

753
00:34:44,139 --> 00:34:47,259
you have<font color="#CCCCCC"> to</font><font color="#E5E5E5"> look</font><font color="#CCCCCC"> around when you're</font>

754
00:34:45,610 --> 00:34:50,290
doing reverse engineering and we<font color="#E5E5E5"> observe</font>

755
00:34:47,260 --> 00:34:52,990
<font color="#E5E5E5">that some similar code was contributed</font>

756
00:34:50,290 --> 00:34:55,389
<font color="#CCCCCC">to coreboot by</font><font color="#E5E5E5"> AMD and this code was</font>

757
00:34:52,989 --> 00:34:57,310
include<font color="#E5E5E5"> me was including as well the</font>

758
00:34:55,389 --> 00:34:59,350
memory installation part so<font color="#CCCCCC"> that was</font>

759
00:34:57,310 --> 00:35:02,140
kind of cool<font color="#CCCCCC"> yeah there was</font><font color="#E5E5E5"> some</font>

760
00:34:59,350 --> 00:35:05,259
<font color="#CCCCCC">checksumming bypass happening at some</font>

761
00:35:02,140 --> 00:35:07,569
point but yeah<font color="#CCCCCC"> i won't go into</font><font color="#E5E5E5"> details</font><font color="#CCCCCC"> i</font>

762
00:35:05,260 --> 00:35:09,640
had to reprogram several<font color="#E5E5E5"> times the the</font>

763
00:35:07,570 --> 00:35:13,810
<font color="#CCCCCC">BIOS chip</font><font color="#E5E5E5"> not really that complicated</font>

764
00:35:09,640 --> 00:35:17,200
<font color="#CCCCCC">maybe yeah it</font><font color="#E5E5E5"> took some time</font><font color="#CCCCCC"> I would say</font>

765
00:35:13,810 --> 00:35:20,529
obviously that right so with<font color="#CCCCCC"> this with</font>

766
00:35:17,200 --> 00:35:23,740
<font color="#E5E5E5">this hack in mind so we managed</font><font color="#CCCCCC"> to do</font>

767
00:35:20,530 --> 00:35:26,080
the call button and<font color="#E5E5E5"> to do the generic of</font>

768
00:35:23,740 --> 00:35:28,240
victim the generic<font color="#CCCCCC"> memory</font><font color="#E5E5E5"> dumper right</font>

769
00:35:26,080 --> 00:35:29,490
<font color="#E5E5E5">so this memory dumper right now works</font>

770
00:35:28,240 --> 00:35:33,118
for<font color="#CCCCCC"> any</font>

771
00:35:29,490 --> 00:35:35,759
any<font color="#CCCCCC"> machine that that has ECC memory</font>

772
00:35:33,119 --> 00:35:38,790
right so you just<font color="#E5E5E5"> can use any any victim</font>

773
00:35:35,760 --> 00:35:41,579
right now with this<font color="#E5E5E5"> with this machine</font>

774
00:35:38,790 --> 00:35:43,200
<font color="#E5E5E5">and I'm going</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> open-source</font><font color="#CCCCCC"> you have</font>

775
00:35:41,579 --> 00:35:45,119
parts<font color="#E5E5E5"> of this one so you can actually</font>

776
00:35:43,200 --> 00:35:48,509
<font color="#E5E5E5">use</font><font color="#CCCCCC"> the same word if</font><font color="#E5E5E5"> you want and flash</font>

777
00:35:45,119 --> 00:35:52,740
your<font color="#CCCCCC"> own your own BIOS image I guess you</font>

778
00:35:48,510 --> 00:35:54,660
can flash it<font color="#E5E5E5"> now even through some nicer</font>

779
00:35:52,740 --> 00:35:59,339
interface than the<font color="#E5E5E5"> the clip that I have</font>

780
00:35:54,660 --> 00:36:02,609
<font color="#CCCCCC">there</font><font color="#E5E5E5"> right</font><font color="#CCCCCC"> so I talked about</font><font color="#E5E5E5"> the fault</font>

781
00:35:59,339 --> 00:36:04,380
injection attack and how do you reverse

782
00:36:02,609 --> 00:36:07,710
engineering with that and also<font color="#E5E5E5"> with the</font>

783
00:36:04,380 --> 00:36:09,630
cold<font color="#CCCCCC"> boot right but yeah it remains the</font>

784
00:36:07,710 --> 00:36:13,500
question<font color="#CCCCCC"> okay so how about</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> row</font>

785
00:36:09,630 --> 00:36:16,710
hammer part well<font color="#CCCCCC"> this talk</font><font color="#E5E5E5"> is not really</font>

786
00:36:13,500 --> 00:36:19,530
about<font color="#E5E5E5"> this</font><font color="#CCCCCC"> row the attack itself</font><font color="#E5E5E5"> but the</font>

787
00:36:16,710 --> 00:36:23,900
idea works like<font color="#CCCCCC"> that</font><font color="#E5E5E5"> so we</font><font color="#CCCCCC"> proposed the</font>

788
00:36:19,530 --> 00:36:26,910
ECC<font color="#CCCCCC"> ployed attack</font><font color="#E5E5E5"> and it goes like this</font>

789
00:36:23,900 --> 00:36:28,710
<font color="#CCCCCC">first</font><font color="#E5E5E5"> you have to find the ECC algorithm</font>

790
00:36:26,910 --> 00:36:31,440
of the<font color="#CCCCCC"> machine that you target and this</font>

791
00:36:28,710 --> 00:36:33,480
is<font color="#E5E5E5"> fairly easy to do</font><font color="#CCCCCC"> so if you have</font>

792
00:36:31,440 --> 00:36:37,049
access<font color="#CCCCCC"> to some cloud machine you can</font>

793
00:36:33,480 --> 00:36:38,910
always do cut<font color="#E5E5E5"> proximity info and look</font>

794
00:36:37,049 --> 00:36:41,640
for the CPU<font color="#E5E5E5"> that</font><font color="#CCCCCC"> is being used there</font>

795
00:36:38,910 --> 00:36:44,339
<font color="#E5E5E5">after that you</font><font color="#CCCCCC"> can try</font><font color="#E5E5E5"> to get a similar</font>

796
00:36:41,640 --> 00:36:46,618
<font color="#CCCCCC">machine that you</font><font color="#E5E5E5"> control and the ECC</font>

797
00:36:44,339 --> 00:36:48,480
function is not really that<font color="#CCCCCC"> it is not</font>

798
00:36:46,619 --> 00:36:50,490
<font color="#E5E5E5">different at all between the</font><font color="#CCCCCC"> two so if</font>

799
00:36:48,480 --> 00:36:54,109
if it's the same version<font color="#E5E5E5"> of</font><font color="#CCCCCC"> the CPU is</font>

800
00:36:50,490 --> 00:36:57,270
it will be the same<font color="#CCCCCC"> ECC function then</font>

801
00:36:54,109 --> 00:36:59,490
the next step would be to do<font color="#E5E5E5"> some sort</font>

802
00:36:57,270 --> 00:37:01,410
of online<font color="#E5E5E5"> analysis and try to find</font>

803
00:36:59,490 --> 00:37:04,259
correctable bit flips<font color="#E5E5E5"> on the target</font>

804
00:37:01,410 --> 00:37:06,930
<font color="#E5E5E5">machine you want to do this without</font>

805
00:37:04,260 --> 00:37:09,270
going detected<font color="#CCCCCC"> so this</font><font color="#E5E5E5"> kind of will take</font>

806
00:37:06,930 --> 00:37:12,690
some time<font color="#CCCCCC"> the idea is</font><font color="#E5E5E5"> to find one</font>

807
00:37:09,270 --> 00:37:14,940
correctable bit flip at at<font color="#CCCCCC"> a</font><font color="#E5E5E5"> time now</font>

808
00:37:12,690 --> 00:37:18,869
once you<font color="#CCCCCC"> have enough correctable bit</font>

809
00:37:14,940 --> 00:37:21,119
flips you can and once you<font color="#CCCCCC"> know the the</font>

810
00:37:18,869 --> 00:37:23,430
<font color="#E5E5E5">ECC algorithm you</font><font color="#CCCCCC"> can combine</font><font color="#E5E5E5"> all</font><font color="#CCCCCC"> of</font>

811
00:37:21,119 --> 00:37:25,859
these correctable bit flips<font color="#E5E5E5"> to cause a</font>

812
00:37:23,430 --> 00:37:29,009
silent memory corruption<font color="#CCCCCC"> so this was</font><font color="#E5E5E5"> our</font>

813
00:37:25,859 --> 00:37:31,589
goal from the<font color="#CCCCCC"> beginning and basically in</font>

814
00:37:29,010 --> 00:37:33,390
this<font color="#E5E5E5"> way with</font><font color="#CCCCCC"> ACC</font><font color="#E5E5E5"> algorithm basically</font>

815
00:37:31,589 --> 00:37:36,200
you know the clear boundary between

816
00:37:33,390 --> 00:37:38,368
<font color="#E5E5E5">undetectable and detectable bit flips</font>

817
00:37:36,200 --> 00:37:42,180
yeah they're all<font color="#CCCCCC"> hammer</font><font color="#E5E5E5"> exploit is</font>

818
00:37:38,369 --> 00:37:43,350
fairly similar<font color="#E5E5E5"> with a known one the only</font>

819
00:37:42,180 --> 00:37:45,750
differences are<font color="#CCCCCC"> in</font>

820
00:37:43,350 --> 00:37:47,580
the<font color="#CCCCCC"> phases</font><font color="#E5E5E5"> in the initial</font><font color="#CCCCCC"> phases when</font>

821
00:37:45,750 --> 00:37:51,030
you have to gather<font color="#E5E5E5"> all</font><font color="#CCCCCC"> the bit flips so</font>

822
00:37:47,580 --> 00:37:55,140
this would be the the main difference I

823
00:37:51,030 --> 00:37:57,090
<font color="#E5E5E5">would say right but</font><font color="#CCCCCC"> again on this on</font>

824
00:37:55,140 --> 00:38:00,779
this talk I was focusing only on<font color="#E5E5E5"> reverse</font>

825
00:37:57,090 --> 00:38:05,310
<font color="#CCCCCC">engineering the</font><font color="#E5E5E5"> ACC functions you can</font>

826
00:38:00,780 --> 00:38:09,020
find more on on<font color="#E5E5E5"> our paper at SMP</font><font color="#CCCCCC"> that</font>

827
00:38:05,310 --> 00:38:11,190
this this<font color="#E5E5E5"> may so in short the brohamer</font>

828
00:38:09,020 --> 00:38:15,060
exploit will work<font color="#E5E5E5"> even in the presence</font>

829
00:38:11,190 --> 00:38:17,580
of ECC nowadays it is kind of slow

830
00:38:15,060 --> 00:38:19,799
<font color="#E5E5E5">that's that's least the same you can</font>

831
00:38:17,580 --> 00:38:22,650
<font color="#CCCCCC">find more information there</font><font color="#E5E5E5"> now I don't</font>

832
00:38:19,800 --> 00:38:25,650
<font color="#E5E5E5">have a logo but</font><font color="#CCCCCC"> I have a quilt for you</font>

833
00:38:22,650 --> 00:38:30,690
<font color="#E5E5E5">so this</font><font color="#CCCCCC"> is based the quilt was generated</font>

834
00:38:25,650 --> 00:38:33,000
based on<font color="#E5E5E5"> the on the on some</font><font color="#CCCCCC"> UCC</font>

835
00:38:30,690 --> 00:38:35,610
properties of that<font color="#E5E5E5"> with that</font><font color="#CCCCCC"> we</font>

836
00:38:33,000 --> 00:38:37,350
recovered so basically I'm not<font color="#CCCCCC"> sure if</font>

837
00:38:35,610 --> 00:38:39,360
you can see but the main diagonal<font color="#E5E5E5"> of</font>

838
00:38:37,350 --> 00:38:41,850
this one is completely<font color="#E5E5E5"> black so</font><font color="#CCCCCC"> there</font>

839
00:38:39,360 --> 00:38:46,380
<font color="#E5E5E5">are like black black dots there every</font>

840
00:38:41,850 --> 00:38:51,360
pixel on<font color="#E5E5E5"> the every pixel on the yeah so</font>

841
00:38:46,380 --> 00:38:54,990
so<font color="#E5E5E5"> so this is like 128 by 128 pixel</font>

842
00:38:51,360 --> 00:38:59,040
image and every pixel represents the

843
00:38:54,990 --> 00:39:02,540
Hamming distance between<font color="#CCCCCC"> IECC value that</font>

844
00:38:59,040 --> 00:39:05,520
<font color="#E5E5E5">that was obtained by just asserting that</font>

845
00:39:02,540 --> 00:39:08,700
<font color="#CCCCCC">that position in the in the data stream</font>

846
00:39:05,520 --> 00:39:12,420
<font color="#E5E5E5">so that's why</font><font color="#CCCCCC"> you would have</font><font color="#E5E5E5"> the same</font>

847
00:39:08,700 --> 00:39:15,390
<font color="#CCCCCC">ECC on the main diagonal</font><font color="#E5E5E5"> yeah to wrap it</font>

848
00:39:12,420 --> 00:39:17,190
up<font color="#CCCCCC"> I showed</font><font color="#E5E5E5"> you to to attack the fault</font>

849
00:39:15,390 --> 00:39:18,930
injection<font color="#E5E5E5"> in the cold boot attack with</font>

850
00:39:17,190 --> 00:39:22,020
the goal in<font color="#CCCCCC"> mind to</font><font color="#E5E5E5"> reverse-engineer the</font>

851
00:39:18,930 --> 00:39:24,210
<font color="#CCCCCC">ACC functions and these are important</font>

852
00:39:22,020 --> 00:39:28,259
because in this way we can understand

853
00:39:24,210 --> 00:39:31,860
how<font color="#CCCCCC"> much ECC buys us for the</font><font color="#E5E5E5"> row hammer</font>

854
00:39:28,260 --> 00:39:34,470
attack<font color="#E5E5E5"> and how good</font><font color="#CCCCCC"> over defense that is</font>

855
00:39:31,860 --> 00:39:37,880
I hope this picture makes more sense now

856
00:39:34,470 --> 00:39:45,480
<font color="#E5E5E5">for for you thanks</font>

857
00:39:37,880 --> 00:39:47,860
[Applause]

858
00:39:45,480 --> 00:39:51,910
so<font color="#CCCCCC"> we've got</font><font color="#E5E5E5"> about 15 minutes</font><font color="#CCCCCC"> of</font>

859
00:39:47,860 --> 00:40:03,030
questions<font color="#E5E5E5"> for questions do I see any</font>

860
00:39:51,910 --> 00:40:03,029
hands<font color="#CCCCCC"> I call it the after-lunch effect</font>

861
00:40:14,049 --> 00:40:20,719
so<font color="#CCCCCC"> lu-chen so I was wondering you said</font>

862
00:40:18,140 --> 00:40:22,219
<font color="#E5E5E5">you how do you hear me yeah I was</font>

863
00:40:20,719 --> 00:40:24,679
<font color="#E5E5E5">wondering you said you can recover the</font>

864
00:40:22,219 --> 00:40:26,689
ECC for any kind of machine now with the

865
00:40:24,679 --> 00:40:28,459
dumper yeah does it make<font color="#E5E5E5"> any assumptions</font>

866
00:40:26,689 --> 00:40:32,019
and like how<font color="#CCCCCC"> many</font><font color="#E5E5E5"> beats this ECC can</font>

867
00:40:28,459 --> 00:40:36,410
correct or like what kind of VCC it is

868
00:40:32,019 --> 00:40:37,609
no there's there's yeah<font color="#E5E5E5"> I always say</font>

869
00:40:36,410 --> 00:40:42,049
there's no there's<font color="#E5E5E5"> no much of a</font>

870
00:40:37,609 --> 00:40:47,239
difference<font color="#E5E5E5"> the key point is that you</font>

871
00:40:42,049 --> 00:40:50,689
<font color="#CCCCCC">have to disable the errors</font><font color="#E5E5E5"> so this this</font>

872
00:40:47,239 --> 00:40:52,789
dumper<font color="#E5E5E5"> will access lots of errors which</font>

873
00:40:50,689 --> 00:40:55,578
<font color="#E5E5E5">are not correctable so you have to make</font>

874
00:40:52,789 --> 00:40:58,279
<font color="#E5E5E5">sure that this dumper is good enough to</font>

875
00:40:55,579 --> 00:41:01,880
stay<font color="#CCCCCC"> alive</font><font color="#E5E5E5"> even if lots of errors are</font>

876
00:40:58,279 --> 00:41:05,719
not corrected and once you<font color="#CCCCCC"> know once</font><font color="#E5E5E5"> you</font>

877
00:41:01,880 --> 00:41:08,799
<font color="#CCCCCC">have</font><font color="#E5E5E5"> this one which is fairly stable it</font>

878
00:41:05,719 --> 00:41:11,509
doesn't matter<font color="#E5E5E5"> it's</font><font color="#CCCCCC"> just</font><font color="#E5E5E5"> matter maybe of</font>

879
00:41:08,799 --> 00:41:15,019
remapping or or reusing the equations

880
00:41:11,509 --> 00:41:18,769
some somehow differently<font color="#E5E5E5"> no but yeah</font>

881
00:41:15,019 --> 00:41:22,459
indeed the<font color="#CCCCCC"> host</font><font color="#E5E5E5"> that we choose has 128</font>

882
00:41:18,769 --> 00:41:26,029
bits per let's say ECC word<font color="#E5E5E5"> and we use</font>

883
00:41:22,459 --> 00:41:30,078
this one<font color="#E5E5E5"> to reverse engineer a machine</font>

884
00:41:26,029 --> 00:41:32,689
that<font color="#E5E5E5"> has 64 bits per sec word</font><font color="#CCCCCC"> this was a</font>

885
00:41:30,079 --> 00:41:36,259
difference that we<font color="#CCCCCC"> actually observed it</font>

886
00:41:32,689 --> 00:41:38,359
while<font color="#E5E5E5"> reading the data so we had to cope</font>

887
00:41:36,259 --> 00:41:40,039
with<font color="#E5E5E5"> it somehow</font><font color="#CCCCCC"> in the sense of doing</font>

888
00:41:38,359 --> 00:41:42,109
the<font color="#E5E5E5"> the proper equation and proper</font>

889
00:41:40,039 --> 00:41:44,869
computation but this is easy to to spot

890
00:41:42,109 --> 00:41:47,029
<font color="#CCCCCC">so yeah it requires some work if there's</font>

891
00:41:44,869 --> 00:41:51,160
a complete mismatch between them but<font color="#E5E5E5"> you</font>

892
00:41:47,029 --> 00:41:51,160
can still get<font color="#E5E5E5"> around</font><font color="#CCCCCC"> ok thanks</font>

893
00:42:05,220 --> 00:42:14,890
thank you<font color="#E5E5E5"> for the talk</font><font color="#CCCCCC"> maybe dumb</font>

894
00:42:07,779 --> 00:42:19,630
question but<font color="#E5E5E5"> what next what next good</font>

895
00:42:14,890 --> 00:42:22,779
question so in terms<font color="#E5E5E5"> of</font><font color="#CCCCCC"> row hammer</font>

896
00:42:19,630 --> 00:42:24,339
attack<font color="#E5E5E5"> or no I'm just it's really</font>

897
00:42:22,779 --> 00:42:26,680
interesting<font color="#E5E5E5"> to understand what's the</font>

898
00:42:24,339 --> 00:42:32,078
<font color="#E5E5E5">next steps</font><font color="#CCCCCC"> I mean maybe you have some</font>

899
00:42:26,680 --> 00:42:34,660
<font color="#E5E5E5">ideas about it yeah let's see so we</font><font color="#CCCCCC"> can</font>

900
00:42:32,079 --> 00:42:36,490
go in the direction<font color="#E5E5E5"> of more reverse</font>

901
00:42:34,660 --> 00:42:37,868
engineering<font color="#E5E5E5"> if we want to so for</font>

902
00:42:36,490 --> 00:42:40,450
instance there are there<font color="#E5E5E5"> is memory</font>

903
00:42:37,869 --> 00:42:42,609
scrambling happening and this can be as

904
00:42:40,450 --> 00:42:46,710
well<font color="#CCCCCC"> reversing here with the memory</font>

905
00:42:42,609 --> 00:42:50,440
<font color="#CCCCCC">damper that we have so you</font><font color="#E5E5E5"> can you can</font>

906
00:42:46,710 --> 00:42:55,180
<font color="#E5E5E5">read the the Scrambler if you if you</font>

907
00:42:50,440 --> 00:42:58,230
want in this way<font color="#CCCCCC"> other things is is to</font>

908
00:42:55,180 --> 00:43:00,669
actually understand the<font color="#E5E5E5"> mechanism of</font>

909
00:42:58,230 --> 00:43:03,609
again<font color="#E5E5E5"> memory scrambler in the context of</font>

910
00:43:00,670 --> 00:43:06,010
<font color="#CCCCCC">row hammer</font><font color="#E5E5E5"> is it important or not so</font>

911
00:43:03,609 --> 00:43:08,799
this<font color="#E5E5E5"> would be</font><font color="#CCCCCC"> maybe interesting to</font>

912
00:43:06,010 --> 00:43:13,630
<font color="#E5E5E5">figure it out</font><font color="#CCCCCC"> as well</font><font color="#E5E5E5"> but</font><font color="#CCCCCC"> so far it</font>

913
00:43:08,799 --> 00:43:16,029
seems not to be a good yeah<font color="#CCCCCC"> it doesn't</font>

914
00:43:13,630 --> 00:43:23,799
matter<font color="#E5E5E5"> actually yeah</font>

915
00:43:16,029 --> 00:43:25,630
what<font color="#E5E5E5"> next so yeah okay thank you we can</font>

916
00:43:23,799 --> 00:43:28,500
definitely<font color="#E5E5E5"> talk more about this and we</font>

917
00:43:25,630 --> 00:43:28,500
can brainstorm<font color="#CCCCCC"> right</font>

918
00:43:37,510 --> 00:43:43,970
yeah I was curious<font color="#E5E5E5"> why are some of</font><font color="#CCCCCC"> the</font>

919
00:43:40,820 --> 00:43:46,160
bit flips undetectable<font color="#E5E5E5"> and one you are</font>

920
00:43:43,970 --> 00:43:47,959
<font color="#CCCCCC">looking at that did it seem like there</font>

921
00:43:46,160 --> 00:43:50,089
might be a scenario where<font color="#E5E5E5"> you could not</font>

922
00:43:47,960 --> 00:43:53,560
actually<font color="#E5E5E5"> successfully exploit it due to</font>

923
00:43:50,090 --> 00:43:57,860
the undetectable range do you<font color="#CCCCCC"> want</font><font color="#E5E5E5"> a</font>

924
00:43:53,560 --> 00:43:59,750
like like you rely on only correctable

925
00:43:57,860 --> 00:44:00,850
bit flips right<font color="#E5E5E5"> but you have</font><font color="#CCCCCC"> to be</font>

926
00:43:59,750 --> 00:44:04,610
within that<font color="#CCCCCC"> area</font>

927
00:44:00,850 --> 00:44:06,259
to successfully<font color="#CCCCCC"> exploit it so the</font>

928
00:44:04,610 --> 00:44:06,860
correctable bit flips to actually<font color="#CCCCCC"> figure</font>

929
00:44:06,260 --> 00:44:10,450
<font color="#E5E5E5">them</font><font color="#CCCCCC"> out</font>

930
00:44:06,860 --> 00:44:13,430
it is the like online<font color="#E5E5E5"> analysis and then</font>

931
00:44:10,450 --> 00:44:17,629
you carefully<font color="#CCCCCC"> look for this bit flips</font>

932
00:44:13,430 --> 00:44:19,520
<font color="#CCCCCC">and you</font><font color="#E5E5E5"> can actually make sure</font><font color="#CCCCCC"> that</font>

933
00:44:17,630 --> 00:44:21,770
<font color="#CCCCCC">you're going</font><font color="#E5E5E5"> to get at most one at the</font>

934
00:44:19,520 --> 00:44:23,330
time and that one is<font color="#E5E5E5"> always correct</font>

935
00:44:21,770 --> 00:44:27,710
<font color="#CCCCCC">about so this</font><font color="#E5E5E5"> is part of the row hammer</font>

936
00:44:23,330 --> 00:44:30,259
exploit and once you got one<font color="#E5E5E5"> in one row</font>

937
00:44:27,710 --> 00:44:33,050
and then<font color="#E5E5E5"> you can let's say get one in</font>

938
00:44:30,260 --> 00:44:35,120
the same row<font color="#E5E5E5"> but not at at the same time</font>

939
00:44:33,050 --> 00:44:37,040
then you<font color="#CCCCCC"> know right now that</font><font color="#E5E5E5"> you have</font>

940
00:44:35,120 --> 00:44:38,839
two bits<font color="#CCCCCC"> maybe you can find</font><font color="#E5E5E5"> another one</font>

941
00:44:37,040 --> 00:44:42,020
<font color="#E5E5E5">and you'll have like three bit flips and</font>

942
00:44:38,840 --> 00:44:44,570
right now both you you detected them

943
00:44:42,020 --> 00:44:47,150
online right<font color="#CCCCCC"> so</font><font color="#E5E5E5"> it was edited</font><font color="#CCCCCC"> in a way</font>

944
00:44:44,570 --> 00:44:48,500
that they were just corrected and the

945
00:44:47,150 --> 00:44:51,800
question is how does<font color="#E5E5E5"> it take them being</font>

946
00:44:48,500 --> 00:44:53,630
corrected<font color="#E5E5E5"> right</font><font color="#CCCCCC"> once you</font><font color="#E5E5E5"> detect them</font>

947
00:44:51,800 --> 00:44:55,850
being corrected<font color="#E5E5E5"> and you have like three</font>

948
00:44:53,630 --> 00:44:57,020
<font color="#E5E5E5">you can say okay according to</font><font color="#CCCCCC"> my SEC</font>

949
00:44:55,850 --> 00:44:59,450
function which<font color="#E5E5E5"> I reverse engineer</font>

950
00:44:57,020 --> 00:45:01,940
<font color="#E5E5E5">offline</font><font color="#CCCCCC"> I can trigger again the same</font>

951
00:44:59,450 --> 00:45:05,149
<font color="#E5E5E5">three business but this time all three</font>

952
00:45:01,940 --> 00:45:08,870
bits or all three at<font color="#CCCCCC"> the</font><font color="#E5E5E5"> time and I'm</font>

953
00:45:05,150 --> 00:45:11,210
going to<font color="#E5E5E5"> generate</font><font color="#CCCCCC"> a cc</font><font color="#E5E5E5"> that is actually</font>

954
00:45:08,870 --> 00:45:14,029
not detected at all as being<font color="#CCCCCC"> an error so</font>

955
00:45:11,210 --> 00:45:17,690
in this way we managed to<font color="#E5E5E5"> combine the</font>

956
00:45:14,030 --> 00:45:20,270
corrected ones<font color="#E5E5E5"> the whole three ones in</font>

957
00:45:17,690 --> 00:45:21,890
an uncorrectable one<font color="#E5E5E5"> a perfect</font>

958
00:45:20,270 --> 00:45:23,780
<font color="#E5E5E5">uncorrectable three</font><font color="#CCCCCC"> months of course</font>

959
00:45:21,890 --> 00:45:26,390
right now we have to change<font color="#E5E5E5"> so if we</font>

960
00:45:23,780 --> 00:45:29,420
look<font color="#E5E5E5"> at the row hammer a bit down if a</font>

961
00:45:26,390 --> 00:45:31,730
PT entry will<font color="#CCCCCC"> map</font><font color="#E5E5E5"> over this one then</font>

962
00:45:29,420 --> 00:45:34,730
<font color="#E5E5E5">these three bit flips must be asserted</font>

963
00:45:31,730 --> 00:45:37,100
so if you have the same direction<font color="#E5E5E5"> then</font>

964
00:45:34,730 --> 00:45:41,270
it becomes a bit of<font color="#E5E5E5"> dependence</font>

965
00:45:37,100 --> 00:45:43,819
row hammer<font color="#E5E5E5"> dependent on the data now but</font>

966
00:45:41,270 --> 00:45:47,680
yeah we simulated<font color="#E5E5E5"> this one and we can</font>

967
00:45:43,820 --> 00:45:47,680
probably get around this one as well

968
00:45:52,240 --> 00:45:56,069
<font color="#E5E5E5">okay then let's have another round of</font>

969
00:45:54,500 --> 00:46:01,909
applause

970
00:45:56,070 --> 00:46:01,909
[Applause]

