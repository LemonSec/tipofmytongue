1
00:00:00,030 --> 00:00:07,049
all right so<font color="#E5E5E5"> our last talk for today is</font>

2
00:00:03,899 --> 00:00:09,389
by<font color="#E5E5E5"> Andre and he will be talking about</font>

3
00:00:07,049 --> 00:00:20,010
<font color="#CCCCCC">courage guided USB fuzzing so please</font>

4
00:00:09,389 --> 00:00:22,140
give him a big applause hi<font color="#E5E5E5"> thank you all</font>

5
00:00:20,010 --> 00:00:24,390
<font color="#CCCCCC">for coming and</font><font color="#E5E5E5"> this is to talk about USB</font>

6
00:00:22,140 --> 00:00:27,599
fuzzing as was just mentioned<font color="#E5E5E5"> and my</font>

7
00:00:24,390 --> 00:00:30,300
name is Andre and I work at<font color="#CCCCCC"> Google I've</font>

8
00:00:27,599 --> 00:00:32,719
<font color="#E5E5E5">work on different kinds of tools for the</font>

9
00:00:30,300 --> 00:00:35,670
<font color="#E5E5E5">Linux kernel that fine box and</font>

10
00:00:32,719 --> 00:00:38,219
internally my team is known as dynamic

11
00:00:35,670 --> 00:00:39,600
tools team and we have a bunch<font color="#E5E5E5"> of tools</font>

12
00:00:38,219 --> 00:00:41,070
for<font color="#E5E5E5"> user space</font><font color="#CCCCCC"> and you have a bunch</font><font color="#E5E5E5"> of</font>

13
00:00:39,600 --> 00:00:44,309
tools for kernels some of them were

14
00:00:41,070 --> 00:00:46,530
mentioned actually<font color="#E5E5E5"> earlier today so the</font>

15
00:00:44,309 --> 00:00:48,360
like two<font color="#CCCCCC"> parts to</font><font color="#E5E5E5"> my teams one the dust</font>

16
00:00:46,530 --> 00:00:51,570
your space it is<font color="#CCCCCC"> a part</font><font color="#E5E5E5"> of team</font><font color="#CCCCCC"> that</font>

17
00:00:48,360 --> 00:00:53,789
made a santa-san<font color="#CCCCCC"> em Sun and other kinds</font>

18
00:00:51,570 --> 00:00:55,680
of bug detectors happen<font color="#CCCCCC"> I mean if you</font>

19
00:00:53,789 --> 00:00:58,820
write C++ code you probably know about

20
00:00:55,680 --> 00:01:01,530
<font color="#E5E5E5">them early if you find box in C++ code</font>

21
00:00:58,820 --> 00:01:04,409
the thing<font color="#E5E5E5"> that was mentioned earlier</font>

22
00:01:01,530 --> 00:01:07,229
today<font color="#E5E5E5"> is called</font><font color="#CCCCCC"> lip father which</font><font color="#E5E5E5"> is kind</font>

23
00:01:04,409 --> 00:01:10,680
of an in process<font color="#CCCCCC"> AFL</font><font color="#E5E5E5"> like it's a</font>

24
00:01:07,229 --> 00:01:12,960
framework for fuzzing<font color="#E5E5E5"> and recently the</font>

25
00:01:10,680 --> 00:01:15,000
rest also<font color="#CCCCCC"> I</font><font color="#E5E5E5"> think that's called OSS fuzz</font>

26
00:01:12,960 --> 00:01:19,429
<font color="#E5E5E5">and basically the</font><font color="#CCCCCC"> whole idea is that</font>

27
00:01:15,000 --> 00:01:22,320
open<font color="#E5E5E5"> source projects can submit their</font>

28
00:01:19,430 --> 00:01:24,420
fathers<font color="#E5E5E5"> to Google and Google</font><font color="#CCCCCC"> will run</font>

29
00:01:22,320 --> 00:01:26,158
them on there like fuzzing<font color="#CCCCCC"> farms with</font>

30
00:01:24,420 --> 00:01:28,950
hundreds<font color="#CCCCCC"> of servers which is quite</font>

31
00:01:26,159 --> 00:01:29,909
efficient<font color="#E5E5E5"> and the parts of the team that</font>

32
00:01:28,950 --> 00:01:31,909
does kernel stuff

33
00:01:29,909 --> 00:01:35,070
we also made so we made a bunch<font color="#E5E5E5"> of</font>

34
00:01:31,909 --> 00:01:37,229
similar tools to<font color="#E5E5E5"> a scientist and and</font>

35
00:01:35,070 --> 00:01:39,630
others for the kernel which was called

36
00:01:37,229 --> 00:01:42,869
kernel<font color="#E5E5E5"> ace and kernel</font><font color="#CCCCCC"> Amazon they</font><font color="#E5E5E5"> are</font>

37
00:01:39,630 --> 00:01:44,610
bug detectors and the thing<font color="#CCCCCC"> that we'll</font>

38
00:01:42,869 --> 00:01:46,680
be talking<font color="#E5E5E5"> about today</font><font color="#CCCCCC"> is called sis</font>

39
00:01:44,610 --> 00:01:50,250
<font color="#CCCCCC">color which is a covered guided grammar</font>

40
00:01:46,680 --> 00:01:52,860
based kernel father<font color="#CCCCCC"> ok this</font><font color="#E5E5E5"> is what</font>

41
00:01:50,250 --> 00:01:54,780
we're going<font color="#CCCCCC"> to cover today</font><font color="#E5E5E5"> and I'm gonna</font>

42
00:01:52,860 --> 00:01:57,960
give some<font color="#E5E5E5"> introduction in what is this</font>

43
00:01:54,780 --> 00:02:00,979
color<font color="#E5E5E5"> and what is the USB protocol and</font>

44
00:01:57,960 --> 00:02:03,979
<font color="#E5E5E5">how are we</font><font color="#CCCCCC"> gonna combine them together</font>

45
00:02:00,979 --> 00:02:06,360
at the<font color="#E5E5E5"> end</font><font color="#CCCCCC"> we actually I mean the whole</font>

46
00:02:03,979 --> 00:02:08,758
like a small<font color="#E5E5E5"> spoiler the whole fuzzing</font>

47
00:02:06,360 --> 00:02:11,400
is going to be happening in<font color="#E5E5E5"> a VM</font>

48
00:02:08,758 --> 00:02:12,809
but we<font color="#CCCCCC"> actually gonna launch some</font>

49
00:02:11,400 --> 00:02:13,470
hardware producers and they're gonna

50
00:02:12,810 --> 00:02:15,390
blow

51
00:02:13,470 --> 00:02:17,300
like crash actual<font color="#E5E5E5"> kernels</font><font color="#CCCCCC"> or that</font>

52
00:02:15,390 --> 00:02:20,489
hopefully it works

53
00:02:17,300 --> 00:02:23,430
okay let's start<font color="#E5E5E5"> with this color</font><font color="#CCCCCC"> so</font>

54
00:02:20,490 --> 00:02:25,920
before she's colors<font color="#CCCCCC"> a Rosa father called</font>

55
00:02:23,430 --> 00:02:27,480
Trinity<font color="#CCCCCC"> and</font><font color="#E5E5E5"> I mean the whole idea</font><font color="#CCCCCC"> of</font>

56
00:02:25,920 --> 00:02:31,679
fuzzing<font color="#CCCCCC"> the kernel is basically just</font>

57
00:02:27,480 --> 00:02:33,540
<font color="#E5E5E5">issue</font><font color="#CCCCCC"> syscalls Trinity did that</font><font color="#E5E5E5"> eat even</font>

58
00:02:31,680 --> 00:02:36,690
<font color="#E5E5E5">did not</font><font color="#CCCCCC"> well</font><font color="#E5E5E5"> I accept all of the</font>

59
00:02:33,540 --> 00:02:38,310
arguments<font color="#CCCCCC"> of Cisco randomly he knew like</font>

60
00:02:36,690 --> 00:02:40,170
whenever<font color="#E5E5E5"> you need to file descriptor to</font>

61
00:02:38,310 --> 00:02:41,760
the<font color="#E5E5E5"> bus in a file descriptor or whenever</font>

62
00:02:40,170 --> 00:02:45,299
you<font color="#CCCCCC"> need like a valid address</font><font color="#E5E5E5"> it would</font>

63
00:02:41,760 --> 00:02:45,750
pass<font color="#E5E5E5"> in address the problem of that</font><font color="#CCCCCC"> this</font>

64
00:02:45,300 --> 00:02:47,850
Trinity

65
00:02:45,750 --> 00:02:51,900
it was just randomly shooting<font color="#E5E5E5"> sis calls</font>

66
00:02:47,850 --> 00:02:53,609
and even even like suppose you run

67
00:02:51,900 --> 00:02:55,740
Trinity for like<font color="#CCCCCC"> ten hours and</font><font color="#E5E5E5"> you</font>

68
00:02:53,610 --> 00:02:57,780
trigger<font color="#E5E5E5"> a bug the problem is that you</font>

69
00:02:55,740 --> 00:03:00,180
can't<font color="#CCCCCC"> actually reproduce it</font><font color="#E5E5E5"> and the only</font>

70
00:02:57,780 --> 00:03:02,910
<font color="#E5E5E5">thing that you have</font><font color="#CCCCCC"> is a crash even if a</font>

71
00:03:00,180 --> 00:03:04,530
<font color="#CCCCCC">START treaty was the same like initials</font>

72
00:03:02,910 --> 00:03:06,990
heat so it would issue the<font color="#E5E5E5"> same</font><font color="#CCCCCC"> kiss</font>

73
00:03:04,530 --> 00:03:09,930
<font color="#E5E5E5">calls the problem is that the</font><font color="#CCCCCC"> kernel is</font>

74
00:03:06,990 --> 00:03:11,310
very<font color="#E5E5E5"> in deterministic so there's like no</font>

75
00:03:09,930 --> 00:03:12,840
guarantee that the same thing<font color="#E5E5E5"> is gonna</font>

76
00:03:11,310 --> 00:03:16,140
happen again<font color="#CCCCCC"> and you can trigger the</font>

77
00:03:12,840 --> 00:03:18,390
same condition and<font color="#CCCCCC"> also</font><font color="#E5E5E5"> hints</font><font color="#CCCCCC"> doesn't</font>

78
00:03:16,140 --> 00:03:20,700
use coverage guidance<font color="#E5E5E5"> or other kinds of</font>

79
00:03:18,390 --> 00:03:26,160
guidance it's kind<font color="#E5E5E5"> of fine it's not very</font>

80
00:03:20,700 --> 00:03:29,030
deep box so here's where this is<font color="#E5E5E5"> where</font>

81
00:03:26,160 --> 00:03:32,520
<font color="#CCCCCC">this color comes in and</font><font color="#E5E5E5"> rolls idea was</font>

82
00:03:29,030 --> 00:03:35,700
basically we do the same thing as

83
00:03:32,520 --> 00:03:39,030
Trinity<font color="#CCCCCC"> issues calls</font><font color="#E5E5E5"> but first of all we</font>

84
00:03:35,700 --> 00:03:41,130
want<font color="#CCCCCC"> to do to collect coverage and kind</font>

85
00:03:39,030 --> 00:03:42,269
of<font color="#E5E5E5"> be coverage guided and the second</font>

86
00:03:41,130 --> 00:03:44,910
<font color="#E5E5E5">thing</font><font color="#CCCCCC"> that we want to</font><font color="#E5E5E5"> do is to be</font>

87
00:03:42,269 --> 00:03:47,010
grammar<font color="#E5E5E5"> based which</font><font color="#CCCCCC"> is kind of</font><font color="#E5E5E5"> like the</font>

88
00:03:44,910 --> 00:03:49,170
father<font color="#E5E5E5"> has some structure awareness on</font>

89
00:03:47,010 --> 00:03:50,970
which<font color="#E5E5E5"> kind of structures you have to</font>

90
00:03:49,170 --> 00:03:53,458
pass into<font color="#E5E5E5"> different system calls</font><font color="#CCCCCC"> so</font>

91
00:03:50,970 --> 00:03:55,019
there are some complicated ones it's

92
00:03:53,459 --> 00:03:57,440
like you pass a pointer to<font color="#CCCCCC"> a struct</font>

93
00:03:55,019 --> 00:04:00,510
which has pointers to other structures

94
00:03:57,440 --> 00:04:04,019
and the father can generate those<font color="#E5E5E5"> kind</font>

95
00:04:00,510 --> 00:04:06,269
of things and do that and initially<font color="#CCCCCC"> it</font>

96
00:04:04,019 --> 00:04:09,810
started as a father for the<font color="#CCCCCC"> UNIX kernel</font>

97
00:04:06,269 --> 00:04:13,170
but since then I mean people came<font color="#CCCCCC"> and</font>

98
00:04:09,810 --> 00:04:15,060
<font color="#CCCCCC">they</font><font color="#E5E5E5"> adapt freebsd openbsd and</font><font color="#CCCCCC"> other bsd</font>

99
00:04:13,170 --> 00:04:17,399
support and<font color="#E5E5E5"> there it also kind of</font>

100
00:04:15,060 --> 00:04:19,168
supports future which is<font color="#E5E5E5"> a</font><font color="#CCCCCC"> google-like</font>

101
00:04:17,399 --> 00:04:22,739
<font color="#E5E5E5">operating system which</font><font color="#CCCCCC"> is supposedly</font>

102
00:04:19,168 --> 00:04:25,320
<font color="#E5E5E5">should be used on</font><font color="#CCCCCC"> mobile devices</font><font color="#E5E5E5"> at some</font>

103
00:04:22,740 --> 00:04:26,660
point in the future<font color="#E5E5E5"> yeah it's a person</font>

104
00:04:25,320 --> 00:04:29,719
<font color="#CCCCCC">minority from dark architecture</font>

105
00:04:26,660 --> 00:04:31,910
and well you can actually<font color="#CCCCCC"> fuss on</font>

106
00:04:29,720 --> 00:04:33,710
<font color="#E5E5E5">different kinds of target machines so</font>

107
00:04:31,910 --> 00:04:36,410
you<font color="#E5E5E5"> can use</font><font color="#CCCCCC"> qiyam</font><font color="#E5E5E5"> one run your kernel</font>

108
00:04:33,710 --> 00:04:37,940
inside<font color="#E5E5E5"> chiamo and fuzz it there you can</font>

109
00:04:36,410 --> 00:04:39,860
use<font color="#E5E5E5"> Google Cloud</font><font color="#CCCCCC"> Engine you can use</font>

110
00:04:37,940 --> 00:04:42,710
<font color="#E5E5E5">actual Android</font><font color="#CCCCCC"> phones or some of the</font>

111
00:04:39,860 --> 00:04:44,840
<font color="#CCCCCC">boards one of the coolest thing that's</font>

112
00:04:42,710 --> 00:04:47,419
is<font color="#CCCCCC"> colored us is it can actually</font>

113
00:04:44,840 --> 00:04:51,650
<font color="#E5E5E5">generate the co-producer for a bug that</font>

114
00:04:47,420 --> 00:04:53,630
<font color="#CCCCCC">it finds</font><font color="#E5E5E5"> it's quite useful</font><font color="#CCCCCC"> and as of</font><font color="#E5E5E5"> now</font>

115
00:04:51,650 --> 00:04:56,270
<font color="#CCCCCC">we</font><font color="#E5E5E5"> found like a few thousands of bucks</font>

116
00:04:53,630 --> 00:04:58,760
<font color="#CCCCCC">there are like a bunch of kiddies</font><font color="#E5E5E5"> the</font>

117
00:04:56,270 --> 00:05:01,070
problem with<font color="#CCCCCC"> CBS is that the</font><font color="#E5E5E5"> Linux</font>

118
00:04:58,760 --> 00:05:04,969
kernel community<font color="#E5E5E5"> does really care about</font>

119
00:05:01,070 --> 00:05:07,400
series because I mean usually the kernel

120
00:05:04,970 --> 00:05:09,470
developers they fix bugs and they care

121
00:05:07,400 --> 00:05:12,349
about<font color="#E5E5E5"> the box but they don't really care</font>

122
00:05:09,470 --> 00:05:14,390
<font color="#CCCCCC">about</font><font color="#E5E5E5"> going requesting</font><font color="#CCCCCC"> CVE and doing all</font>

123
00:05:12,350 --> 00:05:18,130
this process of like disclosure and

124
00:05:14,390 --> 00:05:20,870
stuff that's<font color="#CCCCCC"> for security people</font><font color="#E5E5E5"> I guess</font>

125
00:05:18,130 --> 00:05:24,170
but it finds<font color="#E5E5E5"> very interesting bugs</font>

126
00:05:20,870 --> 00:05:26,240
<font color="#CCCCCC">I passed the</font><font color="#E5E5E5"> kernel or I mean I was</font>

127
00:05:24,170 --> 00:05:28,370
working<font color="#CCCCCC"> on</font><font color="#E5E5E5"> this color for most more than</font>

128
00:05:26,240 --> 00:05:30,290
a year now<font color="#CCCCCC"> and I've liked more than</font><font color="#E5E5E5"> two</font>

129
00:05:28,370 --> 00:05:31,940
<font color="#E5E5E5">years I guess</font><font color="#CCCCCC"> and I found some very</font>

130
00:05:30,290 --> 00:05:36,470
interesting bugs for which are public

131
00:05:31,940 --> 00:05:38,480
exploits and<font color="#CCCCCC"> ok so how does this color</font>

132
00:05:36,470 --> 00:05:40,400
work<font color="#E5E5E5"> as I mentioned there are</font><font color="#CCCCCC"> like</font><font color="#E5E5E5"> two</font>

133
00:05:38,480 --> 00:05:41,960
parts<font color="#E5E5E5"> to it the first</font><font color="#CCCCCC"> part is</font><font color="#E5E5E5"> one</font>

134
00:05:40,400 --> 00:05:45,500
coverage guidance right

135
00:05:41,960 --> 00:05:48,469
and<font color="#CCCCCC"> they give that if we</font><font color="#E5E5E5"> basically do</font>

136
00:05:45,500 --> 00:05:53,240
the same<font color="#E5E5E5"> thing that bleep father or AFL</font>

137
00:05:48,470 --> 00:05:55,610
does they so there is a<font color="#CCCCCC"> Fijian client</font>

138
00:05:53,240 --> 00:05:56,930
class like one of the most important

139
00:05:55,610 --> 00:05:59,600
things<font color="#CCCCCC"> that for the kernel actually</font><font color="#E5E5E5"> have</font>

140
00:05:56,930 --> 00:06:01,040
the source so it's easy<font color="#E5E5E5"> to use compiler</font>

141
00:05:59,600 --> 00:06:03,710
instrumentation to collect the coverage

142
00:06:01,040 --> 00:06:05,240
and<font color="#E5E5E5"> for decision</font><font color="#CCCCCC"> Clank we have some</font>

143
00:06:03,710 --> 00:06:08,960
compiler passes they just insert

144
00:06:05,240 --> 00:06:11,510
callbacks into into every basic block

145
00:06:08,960 --> 00:06:13,820
when they compile the kernel<font color="#E5E5E5"> then we</font>

146
00:06:11,510 --> 00:06:15,980
have a<font color="#E5E5E5"> kernel</font><font color="#CCCCCC"> module that would collect</font>

147
00:06:13,820 --> 00:06:19,580
<font color="#E5E5E5">bees that come</font><font color="#CCCCCC"> away</font>

148
00:06:15,980 --> 00:06:22,100
instruction how<font color="#CCCCCC"> they'll call it like the</font>

149
00:06:19,580 --> 00:06:24,520
<font color="#E5E5E5">current ret value basically from</font>

150
00:06:22,100 --> 00:06:29,090
<font color="#E5E5E5">whenever</font><font color="#CCCCCC"> this callback</font><font color="#E5E5E5"> is called</font>

151
00:06:24,520 --> 00:06:31,340
and it would expose it to user space<font color="#CCCCCC"> one</font>

152
00:06:29,090 --> 00:06:33,890
<font color="#CCCCCC">more important thing is that we collect</font>

153
00:06:31,340 --> 00:06:36,530
coverage<font color="#CCCCCC"> per task or per kernel threat</font>

154
00:06:33,890 --> 00:06:38,639
and if you collect coverage for the

155
00:06:36,530 --> 00:06:40,590
whole kernel well deposit

156
00:06:38,639 --> 00:06:42,599
there's like a lot of<font color="#E5E5E5"> a lot</font><font color="#CCCCCC"> of noise in</font>

157
00:06:40,590 --> 00:06:44,369
there and the idea<font color="#CCCCCC"> is you collect</font>

158
00:06:42,599 --> 00:06:46,319
coverage<font color="#CCCCCC"> only for the threat that</font>

159
00:06:44,370 --> 00:06:49,800
actually<font color="#E5E5E5"> issue</font><font color="#CCCCCC"> Cisco's</font><font color="#E5E5E5"> and does the</font>

160
00:06:46,319 --> 00:06:52,500
<font color="#CCCCCC">fussing</font><font color="#E5E5E5"> and the second part to</font><font color="#CCCCCC"> this</font>

161
00:06:49,800 --> 00:06:54,949
<font color="#CCCCCC">collar is</font><font color="#E5E5E5"> the structure awareness so</font>

162
00:06:52,500 --> 00:06:56,939
there is a<font color="#CCCCCC"> special language</font><font color="#E5E5E5"> to describe</font>

163
00:06:54,949 --> 00:06:59,400
<font color="#E5E5E5">different</font><font color="#CCCCCC"> syscalls that sis</font><font color="#E5E5E5"> collar</font>

164
00:06:56,939 --> 00:07:01,800
understands here's a small snippet<font color="#E5E5E5"> it's</font>

165
00:06:59,400 --> 00:07:05,039
quite self-explanatory we describe like

166
00:07:01,800 --> 00:07:09,030
<font color="#E5E5E5">open</font><font color="#CCCCCC"> or</font><font color="#E5E5E5"> eat and close his calls and</font><font color="#CCCCCC"> his</font>

167
00:07:05,039 --> 00:07:10,438
collar knows how to handle some it's

168
00:07:09,030 --> 00:07:12,888
<font color="#E5E5E5">just like some embedded types for</font>

169
00:07:10,439 --> 00:07:15,120
example<font color="#E5E5E5"> here file name is the type and</font>

170
00:07:12,889 --> 00:07:16,860
his collar would know<font color="#CCCCCC"> that whenever it</font>

171
00:07:15,120 --> 00:07:19,229
issues and opens his calls the<font color="#E5E5E5"> first</font>

172
00:07:16,860 --> 00:07:22,250
<font color="#E5E5E5">argument should be</font><font color="#CCCCCC"> a file</font><font color="#E5E5E5"> name it has</font>

173
00:07:19,229 --> 00:07:25,139
<font color="#E5E5E5">support for flags it has support for</font>

174
00:07:22,250 --> 00:07:29,330
pointers structures unions whatever else

175
00:07:25,139 --> 00:07:32,279
<font color="#E5E5E5">and one of the also interesting</font>

176
00:07:29,330 --> 00:07:34,409
properties<font color="#CCCCCC"> of it</font><font color="#E5E5E5"> is that so here we can</font>

177
00:07:32,279 --> 00:07:36,150
see that<font color="#E5E5E5"> opens his</font><font color="#CCCCCC"> collar returns a file</font>

178
00:07:34,409 --> 00:07:38,490
descriptor it's like at<font color="#E5E5E5"> the where Anders</font>

179
00:07:36,150 --> 00:07:40,378
FD<font color="#E5E5E5"> it means</font><font color="#CCCCCC"> really character and well as</font>

180
00:07:38,490 --> 00:07:44,279
<font color="#CCCCCC">it's kind</font><font color="#E5E5E5"> of like go style of describing</font>

181
00:07:40,379 --> 00:07:47,940
of<font color="#E5E5E5"> defining stuff and this collar would</font>

182
00:07:44,279 --> 00:07:50,520
know that<font color="#CCCCCC"> FD is what we call a resource</font>

183
00:07:47,940 --> 00:07:52,919
<font color="#E5E5E5">and they're like</font><font color="#CCCCCC"> his</font><font color="#E5E5E5"> calls the generate</font>

184
00:07:50,520 --> 00:07:54,810
resources<font color="#E5E5E5"> for example</font><font color="#CCCCCC"> open generates a</font>

185
00:07:52,919 --> 00:07:56,639
file<font color="#CCCCCC"> descriptor and then you're supposed</font>

186
00:07:54,810 --> 00:07:58,830
<font color="#CCCCCC">to pass</font><font color="#E5E5E5"> this file descriptor to others</font>

187
00:07:56,639 --> 00:08:00,599
his calls<font color="#E5E5E5"> and this is conscious color</font>

188
00:07:58,830 --> 00:08:02,120
kind of figures out how<font color="#E5E5E5"> to connect</font>

189
00:08:00,599 --> 00:08:04,800
<font color="#CCCCCC">differences calls between</font><font color="#E5E5E5"> each other</font>

190
00:08:02,120 --> 00:08:08,039
right<font color="#CCCCCC"> so it would connect open and read</font>

191
00:08:04,800 --> 00:08:09,689
for<font color="#E5E5E5"> example and we use those</font>

192
00:08:08,039 --> 00:08:12,330
descriptions<font color="#E5E5E5"> and those descriptions</font>

193
00:08:09,689 --> 00:08:14,250
actually manually<font color="#CCCCCC"> written by us we I</font>

194
00:08:12,330 --> 00:08:15,930
mean<font color="#E5E5E5"> my team are not really</font><font color="#CCCCCC"> kernel</font>

195
00:08:14,250 --> 00:08:17,629
experts we covered some<font color="#E5E5E5"> part of the</font>

196
00:08:15,930 --> 00:08:20,330
kernel with those<font color="#E5E5E5"> descriptions but</font>

197
00:08:17,629 --> 00:08:22,849
they're like some places<font color="#E5E5E5"> to improve</font>

198
00:08:20,330 --> 00:08:25,800
those<font color="#E5E5E5"> descriptions are used to generate</font>

199
00:08:22,849 --> 00:08:29,009
programs which are all<font color="#CCCCCC"> the program is</font>

200
00:08:25,800 --> 00:08:31,319
just<font color="#E5E5E5"> a sequence of Cisco's we use like</font>

201
00:08:29,009 --> 00:08:33,209
also a different notation for this kind

202
00:08:31,319 --> 00:08:35,579
of stuff<font color="#CCCCCC"> here's a</font><font color="#E5E5E5"> small program</font><font color="#CCCCCC"> that</font>

203
00:08:33,208 --> 00:08:37,468
<font color="#E5E5E5">just does basically just opens a file</font>

204
00:08:35,578 --> 00:08:38,069
and<font color="#E5E5E5"> routes it so the first is call is a</font>

205
00:08:37,469 --> 00:08:40,050
map

206
00:08:38,070 --> 00:08:43,019
we just<font color="#CCCCCC"> M up some memory to store the</font>

207
00:08:40,049 --> 00:08:46,319
file name then we open the<font color="#E5E5E5"> file with the</font>

208
00:08:43,019 --> 00:08:48,329
<font color="#CCCCCC">name file</font><font color="#E5E5E5"> 0 and the actual string that</font>

209
00:08:46,320 --> 00:08:51,089
holds the file name store is stored in

210
00:08:48,329 --> 00:08:52,050
our<font color="#E5E5E5"> a map memory then we read</font><font color="#CCCCCC"> forty</font><font color="#E5E5E5"> two</font>

211
00:08:51,089 --> 00:08:56,010
bytes from Italy

212
00:08:52,050 --> 00:08:58,020
and his<font color="#CCCCCC"> collar has support for</font>

213
00:08:56,010 --> 00:09:00,569
generating<font color="#E5E5E5"> random programs like that</font><font color="#CCCCCC"> and</font>

214
00:08:58,020 --> 00:09:03,150
mutating<font color="#E5E5E5"> them so like changing his call</font>

215
00:09:00,570 --> 00:09:05,250
values called parameters changing the

216
00:09:03,150 --> 00:09:08,850
order of<font color="#E5E5E5"> his calls inserting new skulls</font>

217
00:09:05,250 --> 00:09:11,730
removing skull and so on<font color="#E5E5E5"> and the</font>

218
00:09:08,850 --> 00:09:13,710
<font color="#CCCCCC">algorithmic fuzzing is quite usual I</font>

219
00:09:11,730 --> 00:09:15,690
mean it's the same<font color="#E5E5E5"> for every kind of</font>

220
00:09:13,710 --> 00:09:19,590
like generation based buzzer<font color="#E5E5E5"> so you</font>

221
00:09:15,690 --> 00:09:21,360
maintain<font color="#E5E5E5"> a corpus of programs and on</font>

222
00:09:19,590 --> 00:09:23,160
each step you<font color="#E5E5E5"> either generate a new</font>

223
00:09:21,360 --> 00:09:26,130
program or you mutate one of the

224
00:09:23,160 --> 00:09:28,079
existing<font color="#CCCCCC"> one you</font><font color="#E5E5E5"> executed you collect</font>

225
00:09:26,130 --> 00:09:29,490
coverage<font color="#E5E5E5"> and if there is any new</font>

226
00:09:28,080 --> 00:09:31,230
<font color="#E5E5E5">coverage you just added back to the</font>

227
00:09:29,490 --> 00:09:33,000
corpus<font color="#E5E5E5"> if there is not you just throw it</font>

228
00:09:31,230 --> 00:09:38,660
away and<font color="#CCCCCC"> you repeat</font><font color="#E5E5E5"> that until we're</font>

229
00:09:33,000 --> 00:09:40,650
done<font color="#E5E5E5"> okay</font><font color="#CCCCCC"> so when we start doing</font><font color="#E5E5E5"> that</font>

230
00:09:38,660 --> 00:09:43,290
ideally what you<font color="#CCCCCC"> would want</font><font color="#E5E5E5"> from a</font>

231
00:09:40,650 --> 00:09:46,170
father is that<font color="#CCCCCC"> father is</font><font color="#E5E5E5"> some like magic</font>

232
00:09:43,290 --> 00:09:48,569
box<font color="#CCCCCC"> and</font><font color="#E5E5E5"> if</font><font color="#CCCCCC"> it's resources into the</font>

233
00:09:46,170 --> 00:09:51,510
father<font color="#E5E5E5"> so resources here your resources</font>

234
00:09:48,570 --> 00:09:54,150
here means CPU time or<font color="#CCCCCC"> RAM or whatever</font>

235
00:09:51,510 --> 00:09:57,420
else<font color="#CCCCCC"> and the father would</font><font color="#E5E5E5"> just like spew</font>

236
00:09:54,150 --> 00:09:59,579
out<font color="#E5E5E5"> proof of concept</font><font color="#CCCCCC"> for you right</font><font color="#E5E5E5"> but</font>

237
00:09:57,420 --> 00:10:01,079
in reality it's all a bit<font color="#CCCCCC"> different</font>

238
00:09:59,580 --> 00:10:03,300
because you need to do a lot of stuff

239
00:10:01,080 --> 00:10:05,460
manually<font color="#E5E5E5"> you need to like launch VMs you</font>

240
00:10:03,300 --> 00:10:08,099
need to copy<font color="#CCCCCC"> as a</font><font color="#E5E5E5"> father binary stars as</font>

241
00:10:05,460 --> 00:10:10,290
he need to<font color="#E5E5E5"> monitor the console output</font>

242
00:10:08,100 --> 00:10:12,780
<font color="#E5E5E5">and actually parse crashes from there</font>

243
00:10:10,290 --> 00:10:16,290
<font color="#E5E5E5">and with Linux it's extremely difficult</font>

244
00:10:12,780 --> 00:10:17,550
<font color="#CCCCCC">and there is like a bunch</font><font color="#E5E5E5"> of a bunch of</font>

245
00:10:16,290 --> 00:10:20,219
stuff that you<font color="#E5E5E5"> need</font><font color="#CCCCCC"> to spend a</font><font color="#E5E5E5"> lot of</font>

246
00:10:17,550 --> 00:10:22,109
time on and this<font color="#E5E5E5"> is what we wanted to</font>

247
00:10:20,220 --> 00:10:24,840
<font color="#CCCCCC">address when we were building this color</font>

248
00:10:22,110 --> 00:10:27,690
and this color tries to do that<font color="#E5E5E5"> up to</font>

249
00:10:24,840 --> 00:10:30,480
some degree this<font color="#CCCCCC"> is like high-level</font>

250
00:10:27,690 --> 00:10:32,670
overview<font color="#CCCCCC"> of how it works we have</font><font color="#E5E5E5"> a main</font>

251
00:10:30,480 --> 00:10:36,270
binary which is called C's manager and

252
00:10:32,670 --> 00:10:39,630
this manager<font color="#E5E5E5"> just it</font><font color="#CCCCCC"> just creates more</font>

253
00:10:36,270 --> 00:10:43,020
<font color="#E5E5E5">basically takes takes it does all</font><font color="#CCCCCC"> of</font>

254
00:10:39,630 --> 00:10:45,150
<font color="#E5E5E5">that stuff that I</font><font color="#CCCCCC"> just listed</font><font color="#E5E5E5"> for you so</font>

255
00:10:43,020 --> 00:10:48,090
it can<font color="#E5E5E5"> create VMs it copies the</font><font color="#CCCCCC"> fuzzer</font>

256
00:10:45,150 --> 00:10:50,340
binaries<font color="#CCCCCC"> binary in there</font><font color="#E5E5E5"> it basically</font>

257
00:10:48,090 --> 00:10:50,760
tells the<font color="#CCCCCC"> files are binary</font><font color="#E5E5E5"> what to do so</font>

258
00:10:50,340 --> 00:10:54,150
the<font color="#CCCCCC"> pfizer</font>

259
00:10:50,760 --> 00:10:56,280
<font color="#E5E5E5">fast stuff it would monitor the</font><font color="#CCCCCC"> output</font>

260
00:10:54,150 --> 00:10:59,370
from<font color="#E5E5E5"> VMs it would collect crashes it</font>

261
00:10:56,280 --> 00:11:01,699
would try<font color="#CCCCCC"> to reproduce</font><font color="#E5E5E5"> the box and does</font>

262
00:10:59,370 --> 00:11:05,780
do a lot<font color="#CCCCCC"> of stuff</font><font color="#E5E5E5"> like this</font>

263
00:11:01,700 --> 00:11:08,210
and<font color="#E5E5E5"> a little bit more detailed so from</font>

264
00:11:05,780 --> 00:11:10,760
this<font color="#E5E5E5"> part I mean this is manager part we</font>

265
00:11:08,210 --> 00:11:13,550
saw on the<font color="#E5E5E5"> previous slide</font><font color="#CCCCCC"> here we have a</font>

266
00:11:10,760 --> 00:11:15,830
test machine and inside the test machine

267
00:11:13,550 --> 00:11:17,719
they actually have two wineries and<font color="#CCCCCC"> the</font>

268
00:11:15,830 --> 00:11:21,140
first one is this father<font color="#CCCCCC"> it's basically</font>

269
00:11:17,720 --> 00:11:23,540
<font color="#E5E5E5">kind of like and let me start with</font><font color="#CCCCCC"> other</font>

270
00:11:21,140 --> 00:11:25,189
<font color="#CCCCCC">parts the part that actually issues</font>

271
00:11:23,540 --> 00:11:29,270
<font color="#E5E5E5">Cisco's and collects coverage is called</font>

272
00:11:25,190 --> 00:11:32,480
<font color="#CCCCCC">sis executor and it's written</font><font color="#E5E5E5"> in C it's</font>

273
00:11:29,270 --> 00:11:35,540
<font color="#CCCCCC">I</font><font color="#E5E5E5"> mean two thousand lights of C code but</font>

274
00:11:32,480 --> 00:11:38,810
<font color="#CCCCCC">Sadie's</font><font color="#E5E5E5"> basically</font><font color="#CCCCCC"> she's managers through</font>

275
00:11:35,540 --> 00:11:41,000
is his father passes the<font color="#CCCCCC"> program's his</font>

276
00:11:38,810 --> 00:11:42,739
executor should execute his<font color="#CCCCCC"> executors</font>

277
00:11:41,000 --> 00:11:47,420
execute them<font color="#E5E5E5"> collects coverage and gives</font>

278
00:11:42,740 --> 00:11:49,490
the coverage back and the part<font color="#E5E5E5"> that</font>

279
00:11:47,420 --> 00:11:51,140
<font color="#E5E5E5">actually decides whether the program</font>

280
00:11:49,490 --> 00:11:55,480
generated some new coverage<font color="#E5E5E5"> is called</font>

281
00:11:51,140 --> 00:11:58,100
his father and his father would reply

282
00:11:55,480 --> 00:12:00,100
<font color="#E5E5E5">like would</font><font color="#CCCCCC"> reach or and all of the new</font>

283
00:11:58,100 --> 00:12:02,540
<font color="#E5E5E5">interesting programs back to his manager</font>

284
00:12:00,100 --> 00:12:04,760
here we can also see<font color="#CCCCCC"> that his manager</font>

285
00:12:02,540 --> 00:12:07,069
<font color="#E5E5E5">actually collects</font><font color="#CCCCCC"> consult</font><font color="#E5E5E5"> output from</font>

286
00:12:04,760 --> 00:12:09,290
the test machine so if<font color="#CCCCCC"> we use</font><font color="#E5E5E5"> cream we</font>

287
00:12:07,070 --> 00:12:12,050
<font color="#CCCCCC">use the serial console from crema</font>

288
00:12:09,290 --> 00:12:14,089
if these disease we also<font color="#E5E5E5"> I mean Google</font>

289
00:12:12,050 --> 00:12:15,949
<font color="#CCCCCC">Cloud engines there is also a serial</font>

290
00:12:14,090 --> 00:12:21,830
console that allows<font color="#E5E5E5"> you</font><font color="#CCCCCC"> to kind</font><font color="#E5E5E5"> of like</font>

291
00:12:15,950 --> 00:12:23,810
dump stuff that's happening<font color="#E5E5E5"> okay so</font>

292
00:12:21,830 --> 00:12:28,130
there<font color="#E5E5E5"> is something</font><font color="#CCCCCC"> like further</font>

293
00:12:23,810 --> 00:12:30,140
automation<font color="#CCCCCC"> there are two tools Eric what</font>

294
00:12:28,130 --> 00:12:33,320
quite useful the first one is called his

295
00:12:30,140 --> 00:12:36,439
CI and<font color="#CCCCCC"> that is</font><font color="#E5E5E5"> that if</font><font color="#CCCCCC"> you want</font><font color="#E5E5E5"> to fast</font>

296
00:12:33,320 --> 00:12:38,750
like a bunch of kernels and a bunch of

297
00:12:36,440 --> 00:12:41,330
<font color="#CCCCCC">different branches</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> you won't like to</font>

298
00:12:38,750 --> 00:12:43,100
continuously keep<font color="#CCCCCC"> pulling in new updates</font>

299
00:12:41,330 --> 00:12:45,980
<font color="#E5E5E5">for the kernels</font><font color="#CCCCCC"> and continuous like</font>

300
00:12:43,100 --> 00:12:47,810
build them<font color="#CCCCCC"> he</font><font color="#E5E5E5"> does it for you so it just</font>

301
00:12:45,980 --> 00:12:50,930
would update<font color="#E5E5E5"> the kernel update the his</font>

302
00:12:47,810 --> 00:12:52,750
color and<font color="#E5E5E5"> restore the manager we also</font>

303
00:12:50,930 --> 00:12:55,040
have a way to<font color="#E5E5E5"> exchange</font>

304
00:12:52,750 --> 00:12:56,990
<font color="#E5E5E5">corpuses which between differences</font>

305
00:12:55,040 --> 00:12:59,240
managers and this is what we<font color="#E5E5E5"> use his</font>

306
00:12:56,990 --> 00:13:00,950
help<font color="#E5E5E5"> for the idea is that you can for</font>

307
00:12:59,240 --> 00:13:03,230
example set up<font color="#CCCCCC"> wants his manager that</font>

308
00:13:00,950 --> 00:13:05,450
was<font color="#E5E5E5"> us one</font><font color="#CCCCCC"> colonel</font><font color="#E5E5E5"> and another his</font>

309
00:13:03,230 --> 00:13:08,060
manager that<font color="#CCCCCC"> passes another</font><font color="#E5E5E5"> branch of</font>

310
00:13:05,450 --> 00:13:09,740
<font color="#E5E5E5">this</font><font color="#CCCCCC"> colonel</font><font color="#E5E5E5"> and all some of</font><font color="#CCCCCC"> them might</font>

311
00:13:08,060 --> 00:13:11,900
happen to generate some interesting

312
00:13:09,740 --> 00:13:13,890
program and we see scope you<font color="#CCCCCC"> can</font>

313
00:13:11,900 --> 00:13:17,800
actually make them exchange them

314
00:13:13,890 --> 00:13:19,060
but I'd say<font color="#E5E5E5"> the biggest like thing in</font>

315
00:13:17,800 --> 00:13:21,310
terms of<font color="#CCCCCC"> automation</font>

316
00:13:19,060 --> 00:13:23,979
especially bug<font color="#CCCCCC"> reporting</font><font color="#E5E5E5"> automation is</font>

317
00:13:21,310 --> 00:13:27,010
called his boat and<font color="#CCCCCC"> he's what</font><font color="#E5E5E5"> is</font>

318
00:13:23,980 --> 00:13:29,230
actually a I'd<font color="#E5E5E5"> say</font><font color="#CCCCCC"> to service whose</font><font color="#E5E5E5"> idea</font>

319
00:13:27,010 --> 00:13:31,180
is that we have<font color="#CCCCCC"> a bunch of upstream</font>

320
00:13:29,230 --> 00:13:33,760
kernels like upstream<font color="#CCCCCC"> Colonel some of</font>

321
00:13:31,180 --> 00:13:36,040
the development<font color="#CCCCCC"> Colonel branches we have</font>

322
00:13:33,760 --> 00:13:38,800
<font color="#CCCCCC">seas managers for them running on</font><font color="#E5E5E5"> G's</font>

323
00:13:36,040 --> 00:13:40,660
<font color="#E5E5E5">and we have a matrix his</font><font color="#CCCCCC"> bot machine</font>

324
00:13:38,800 --> 00:13:43,209
which collects<font color="#E5E5E5"> the crashes from those</font>

325
00:13:40,660 --> 00:13:45,490
<font color="#CCCCCC">colonel</font><font color="#E5E5E5"> and to just report them to</font>

326
00:13:43,210 --> 00:13:49,060
<font color="#CCCCCC">Colonel developers on mailing</font><font color="#E5E5E5"> lists or</font>

327
00:13:45,490 --> 00:13:51,750
like whichever<font color="#CCCCCC"> ways</font><font color="#E5E5E5"> we prefer so if you</font>

328
00:13:49,060 --> 00:13:54,489
want to<font color="#CCCCCC"> check</font><font color="#E5E5E5"> it</font><font color="#CCCCCC"> out you can go to this</font>

329
00:13:51,750 --> 00:13:57,630
website<font color="#E5E5E5"> it's basically a dev</font><font color="#CCCCCC"> word for CC</font>

330
00:13:54,490 --> 00:14:03,420
bot<font color="#E5E5E5"> I'm actually going to show it to you</font>

331
00:13:57,630 --> 00:14:03,420
so whenever<font color="#E5E5E5"> you go</font><font color="#CCCCCC"> to it in a second</font>

332
00:14:17,400 --> 00:14:22,540
<font color="#E5E5E5">okay this is what we're interested in</font>

333
00:14:20,140 --> 00:14:24,310
I mean the<font color="#CCCCCC"> Deaf birth has a few kernels</font>

334
00:14:22,540 --> 00:14:26,469
besides the<font color="#E5E5E5"> Linux</font><font color="#CCCCCC"> kernel</font><font color="#E5E5E5"> because we also</font>

335
00:14:24,310 --> 00:14:29,079
<font color="#E5E5E5">have support</font><font color="#CCCCCC"> for other kernels</font><font color="#E5E5E5"> and this</font>

336
00:14:26,470 --> 00:14:32,440
is the back stats for<font color="#E5E5E5"> the Linux kernel</font>

337
00:14:29,080 --> 00:14:35,320
so so far she's what reported thousands

338
00:14:32,440 --> 00:14:37,360
bucks<font color="#E5E5E5"> that got fixed</font><font color="#CCCCCC"> and at</font><font color="#E5E5E5"> this point</font>

339
00:14:35,320 --> 00:14:39,220
<font color="#CCCCCC">actually have 500 bucks that were</font>

340
00:14:37,360 --> 00:14:43,090
<font color="#E5E5E5">reported but not fixed yet</font><font color="#CCCCCC"> why</font><font color="#E5E5E5"> she's</font>

341
00:14:39,220 --> 00:14:45,250
color<font color="#E5E5E5"> by the kernel developers and here</font>

342
00:14:43,090 --> 00:14:46,870
it's quite cool that you<font color="#E5E5E5"> can actually go</font>

343
00:14:45,250 --> 00:14:50,350
in<font color="#CCCCCC"> thump</font><font color="#E5E5E5"> into some of the box</font>

344
00:14:46,870 --> 00:14:51,880
and like if<font color="#E5E5E5"> you open some entry for the</font>

345
00:14:50,350 --> 00:14:54,700
<font color="#E5E5E5">back it's going</font><font color="#CCCCCC"> to tell you some stats</font>

346
00:14:51,880 --> 00:14:58,960
<font color="#E5E5E5">about the bug report and it's gonna tell</font>

347
00:14:54,700 --> 00:15:00,430
you the basically just the stack<font color="#E5E5E5"> of the</font>

348
00:14:58,960 --> 00:15:02,830
kernel<font color="#E5E5E5"> pressure and stuff like that</font>

349
00:15:00,430 --> 00:15:04,300
but I'd say the most interesting<font color="#CCCCCC"> part is</font>

350
00:15:02,830 --> 00:15:05,800
<font color="#CCCCCC">that you can</font><font color="#E5E5E5"> actually see</font><font color="#CCCCCC"> reproducers</font>

351
00:15:04,300 --> 00:15:08,740
here so here's the link<font color="#CCCCCC"> for</font><font color="#E5E5E5"> Caesar</font>

352
00:15:05,800 --> 00:15:10,810
<font color="#CCCCCC">around Syria Pro his repre</font><font color="#E5E5E5"> it does this</font>

353
00:15:08,740 --> 00:15:13,780
<font color="#CCCCCC">color program that triggered this crash</font>

354
00:15:10,810 --> 00:15:15,969
<font color="#CCCCCC">and the idea is you can just</font><font color="#E5E5E5"> take this</font>

355
00:15:13,780 --> 00:15:17,709
<font color="#E5E5E5">program you can just build the kernel it</font>

356
00:15:15,970 --> 00:15:20,080
crashed<font color="#CCCCCC"> you can copy this program</font><font color="#E5E5E5"> into</font>

357
00:15:17,710 --> 00:15:23,020
<font color="#CCCCCC">the kernel executed and</font><font color="#E5E5E5"> if it curves the</font>

358
00:15:20,080 --> 00:15:24,640
colonel and his<font color="#CCCCCC"> idea is to make</font><font color="#E5E5E5"> it easy</font>

359
00:15:23,020 --> 00:15:28,060
<font color="#E5E5E5">folks from kernel developers to fix</font>

360
00:15:24,640 --> 00:15:30,100
stuff so<font color="#CCCCCC"> just provide your producers to</font>

361
00:15:28,060 --> 00:15:31,869
execute his color programs you need a

362
00:15:30,100 --> 00:15:34,270
special tool which is<font color="#E5E5E5"> called his exact</font>

363
00:15:31,870 --> 00:15:37,300
<font color="#E5E5E5">Brock but just for your convenience</font>

364
00:15:34,270 --> 00:15:39,880
it also his color<font color="#CCCCCC"> also</font><font color="#E5E5E5"> generates a</font><font color="#CCCCCC"> hit</font>

365
00:15:37,300 --> 00:15:43,089
<font color="#CCCCCC">program that is well if you look at this</font>

366
00:15:39,880 --> 00:15:46,750
this this<font color="#CCCCCC"> program and says like open app</font>

367
00:15:43,090 --> 00:15:48,790
<font color="#E5E5E5">PT max stuff like that and this is what</font>

368
00:15:46,750 --> 00:15:51,180
the he program<font color="#CCCCCC"> actually says so it also</font>

369
00:15:48,790 --> 00:15:54,760
does open<font color="#CCCCCC"> up its</font><font color="#E5E5E5"> setups a bunch of</font>

370
00:15:51,180 --> 00:16:01,920
structures or arguments for the<font color="#E5E5E5"> I or I</font>

371
00:15:54,760 --> 00:16:01,920
octal<font color="#E5E5E5"> and it calls a octal okay</font>

372
00:16:03,930 --> 00:16:11,079
let's talk a bit<font color="#CCCCCC"> about</font><font color="#E5E5E5"> his</font><font color="#CCCCCC"> view so I'm</font>

373
00:16:08,830 --> 00:16:13,990
not gonna go into details about<font color="#E5E5E5"> the USB</font>

374
00:16:11,080 --> 00:16:18,430
protocol and if you interested<font color="#E5E5E5"> in news</font><font color="#CCCCCC"> B</font>

375
00:16:13,990 --> 00:16:20,800
I found the<font color="#E5E5E5"> article that I leaked at the</font>

376
00:16:18,430 --> 00:16:23,530
end<font color="#E5E5E5"> very good at</font><font color="#CCCCCC"> I mean it only covers</font>

377
00:16:20,800 --> 00:16:27,040
his<font color="#E5E5E5"> v2 but it's very good at explaining</font>

378
00:16:23,530 --> 00:16:29,260
<font color="#E5E5E5">stuff</font><font color="#CCCCCC"> I</font><font color="#E5E5E5"> I won't mention always the most</font>

379
00:16:27,040 --> 00:16:31,810
important things<font color="#E5E5E5"> so first of all with is</font>

380
00:16:29,260 --> 00:16:33,730
beer so we all know it is<font color="#E5E5E5"> B is right you</font>

381
00:16:31,810 --> 00:16:35,650
<font color="#CCCCCC">have some</font><font color="#E5E5E5"> USB device you plug it into</font><font color="#CCCCCC"> a</font>

382
00:16:33,730 --> 00:16:39,520
<font color="#E5E5E5">host</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> it starts magically working</font>

383
00:16:35,650 --> 00:16:41,829
right<font color="#CCCCCC"> it's a protocol between the host</font>

384
00:16:39,520 --> 00:16:43,990
and the<font color="#E5E5E5"> USB</font><font color="#CCCCCC"> devices</font><font color="#E5E5E5"> message-based</font><font color="#CCCCCC"> I mean</font>

385
00:16:41,830 --> 00:16:45,970
we're<font color="#E5E5E5"> not gonna go deep into this</font><font color="#CCCCCC"> but</font>

386
00:16:43,990 --> 00:16:47,590
the most important thing is when you

387
00:16:45,970 --> 00:16:49,980
<font color="#E5E5E5">plug in</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> USB device all the</font>

388
00:16:47,590 --> 00:16:52,390
<font color="#E5E5E5">communication is initiated by the host</font>

389
00:16:49,980 --> 00:16:54,400
<font color="#E5E5E5">so when you plug</font><font color="#CCCCCC"> in a device a host</font>

390
00:16:52,390 --> 00:16:57,580
would send a request to<font color="#E5E5E5"> the device and</font>

391
00:16:54,400 --> 00:16:59,170
the device should reply<font color="#E5E5E5"> right and I mean</font>

392
00:16:57,580 --> 00:17:01,420
this is this<font color="#E5E5E5"> product process happens</font>

393
00:16:59,170 --> 00:17:03,939
throughout the whole the<font color="#CCCCCC"> whole time the</font>

394
00:17:01,420 --> 00:17:06,430
device is connected<font color="#E5E5E5"> and how often the</font>

395
00:17:03,940 --> 00:17:08,650
queries are and how I mean what exactly

396
00:17:06,430 --> 00:17:10,000
<font color="#CCCCCC">the host asks the device it depends on</font>

397
00:17:08,650 --> 00:17:14,740
the device<font color="#E5E5E5"> the peasant depends on the</font>

398
00:17:10,000 --> 00:17:16,240
<font color="#E5E5E5">host and a lot of stuff</font><font color="#CCCCCC"> one device</font><font color="#E5E5E5"> when</font>

399
00:17:14,740 --> 00:17:18,040
you plug in<font color="#E5E5E5"> the device into</font><font color="#CCCCCC"> the host</font>

400
00:17:16,240 --> 00:17:21,579
<font color="#E5E5E5">there is this process which</font><font color="#CCCCCC"> is called</font>

401
00:17:18,040 --> 00:17:23,349
enumeration and the idea is that cost is

402
00:17:21,579 --> 00:17:26,560
trying to<font color="#E5E5E5"> figure out which driver should</font>

403
00:17:23,349 --> 00:17:27,550
it use for this<font color="#E5E5E5"> particular device</font><font color="#CCCCCC"> it's</font>

404
00:17:26,560 --> 00:17:31,240
work<font color="#E5E5E5"> it works like that</font>

405
00:17:27,550 --> 00:17:33,159
so the device<font color="#E5E5E5"> when you plug it in the</font>

406
00:17:31,240 --> 00:17:34,750
host asks<font color="#E5E5E5"> like what are you and</font><font color="#CCCCCC"> the</font>

407
00:17:33,160 --> 00:17:37,570
device provides some very<font color="#E5E5E5"> basic</font>

408
00:17:34,750 --> 00:17:38,890
descriptor on on what it is<font color="#E5E5E5"> and I'll</font>

409
00:17:37,570 --> 00:17:41,290
show<font color="#CCCCCC"> you</font><font color="#E5E5E5"> it a bit later and this</font>

410
00:17:38,890 --> 00:17:43,690
descriptor has a bunch of<font color="#E5E5E5"> IDs and the</font>

411
00:17:41,290 --> 00:17:45,550
host use those IDs to select<font color="#E5E5E5"> a driver</font>

412
00:17:43,690 --> 00:17:48,490
should load if it does have a driver

413
00:17:45,550 --> 00:17:51,250
just<font color="#CCCCCC"> rejects the device when the</font>

414
00:17:48,490 --> 00:17:53,110
enumeration complete<font color="#CCCCCC"> hosts gives</font><font color="#E5E5E5"> away</font>

415
00:17:51,250 --> 00:17:57,700
<font color="#E5E5E5">easy control over the device to the</font>

416
00:17:53,110 --> 00:18:01,889
<font color="#E5E5E5">driver</font><font color="#CCCCCC"> okay</font><font color="#E5E5E5"> I'm going to show</font><font color="#CCCCCC"> you a</font>

417
00:17:57,700 --> 00:18:04,810
little<font color="#CCCCCC"> bit of stuff</font><font color="#E5E5E5"> so there is a Linux</font>

418
00:18:01,890 --> 00:18:07,480
Linux tool which is<font color="#CCCCCC"> called</font><font color="#E5E5E5"> LS CSV right</font>

419
00:18:04,810 --> 00:18:10,030
and it<font color="#E5E5E5"> just shows</font><font color="#CCCCCC"> you the USB devices</font>

420
00:18:07,480 --> 00:18:14,100
that are connected to<font color="#E5E5E5"> your host you can</font>

421
00:18:10,030 --> 00:18:16,820
<font color="#CCCCCC">actually say it - we and it's gonna</font>

422
00:18:14,100 --> 00:18:18,540
it's gonna dump<font color="#E5E5E5"> all of the descriptors</font>

423
00:18:16,820 --> 00:18:21,120
<font color="#CCCCCC">give</font><font color="#E5E5E5"> me a second</font>

424
00:18:18,540 --> 00:18:23,040
so here it's gonna dump all of<font color="#E5E5E5"> the</font>

425
00:18:21,120 --> 00:18:25,050
descriptors<font color="#E5E5E5"> that he connected</font><font color="#CCCCCC"> to use</font>

426
00:18:23,040 --> 00:18:26,520
video Isis have<font color="#E5E5E5"> this is actually the</font>

427
00:18:25,050 --> 00:18:28,590
<font color="#E5E5E5">thing that</font><font color="#CCCCCC"> I mentioned so whenever you</font>

428
00:18:26,520 --> 00:18:30,270
plug in the device<font color="#E5E5E5"> this is what we're</font>

429
00:18:28,590 --> 00:18:32,399
looking<font color="#CCCCCC"> at is an optical mouse I have</font><font color="#E5E5E5"> it</font>

430
00:18:30,270 --> 00:18:36,300
like plugged in right here<font color="#E5E5E5"> and this'll</font>

431
00:18:32,400 --> 00:18:37,740
ah get tech<font color="#E5E5E5"> mouse and when you plug in</font>

432
00:18:36,300 --> 00:18:39,480
<font color="#E5E5E5">this mouse the cost would ask you for</font>

433
00:18:37,740 --> 00:18:41,790
<font color="#CCCCCC">this descriptor and the device would</font>

434
00:18:39,480 --> 00:18:43,710
reply the descriptor has some

435
00:18:41,790 --> 00:18:46,139
interesting<font color="#E5E5E5"> ideas by the vendor and</font><font color="#CCCCCC"> ID</font>

436
00:18:43,710 --> 00:18:48,200
product and the host will use this<font color="#CCCCCC"> idea</font>

437
00:18:46,140 --> 00:18:50,760
is to figure<font color="#E5E5E5"> out which drivers to load</font>

438
00:18:48,200 --> 00:18:52,380
<font color="#E5E5E5">these are not the only things that are</font>

439
00:18:50,760 --> 00:18:55,050
<font color="#E5E5E5">used to figure out the drivers so for</font>

440
00:18:52,380 --> 00:18:57,600
example the thing that's called device

441
00:18:55,050 --> 00:19:01,200
class<font color="#E5E5E5"> here it says</font><font color="#CCCCCC"> divine interface</font>

442
00:18:57,600 --> 00:19:03,419
<font color="#E5E5E5">level so</font><font color="#CCCCCC"> USB descriptors are</font><font color="#E5E5E5"> complicated</font>

443
00:19:01,200 --> 00:19:05,220
I'm not going to<font color="#CCCCCC"> explain it but here's</font>

444
00:19:03,420 --> 00:19:08,220
interface class human interface device

445
00:19:05,220 --> 00:19:11,610
and<font color="#CCCCCC"> that</font><font color="#E5E5E5"> is that the kernel</font><font color="#CCCCCC"> has</font><font color="#E5E5E5"> a bunch</font>

446
00:19:08,220 --> 00:19:15,500
of standard drivers for some<font color="#E5E5E5"> USB classes</font>

447
00:19:11,610 --> 00:19:19,500
for some standard USB device classes<font color="#E5E5E5"> and</font>

448
00:19:15,500 --> 00:19:21,420
the kernel might load<font color="#E5E5E5"> a specific driver</font>

449
00:19:19,500 --> 00:19:23,940
for<font color="#E5E5E5"> this specific device based on</font><font color="#CCCCCC"> the</font>

450
00:19:21,420 --> 00:19:26,370
<font color="#CCCCCC">vendor and</font><font color="#E5E5E5"> product IDs if the kernel has</font>

451
00:19:23,940 --> 00:19:28,260
<font color="#E5E5E5">it but if it doesn't it would just see</font>

452
00:19:26,370 --> 00:19:30,600
that it's a generic<font color="#E5E5E5"> hip device and just</font>

453
00:19:28,260 --> 00:19:34,050
<font color="#CCCCCC">load the generic head driver</font><font color="#E5E5E5"> and let it</font>

454
00:19:30,600 --> 00:19:35,010
handle it and here we<font color="#E5E5E5"> can actually go to</font>

455
00:19:34,050 --> 00:19:38,940
Wireshark

456
00:19:35,010 --> 00:19:40,320
<font color="#E5E5E5">and see how this process happens so this</font>

457
00:19:38,940 --> 00:19:44,640
is the part that where's the

458
00:19:40,320 --> 00:19:47,220
communication start and yeah so here we

459
00:19:44,640 --> 00:19:49,440
can see<font color="#E5E5E5"> that hosts issues a request</font><font color="#CCCCCC"> to</font>

460
00:19:47,220 --> 00:19:52,620
device number 20<font color="#CCCCCC"> on the first twisty bus</font>

461
00:19:49,440 --> 00:19:55,140
and it's a<font color="#E5E5E5"> gap descriptor request device</font>

462
00:19:52,620 --> 00:19:57,449
so the costs<font color="#E5E5E5"> ask asks for the device</font>

463
00:19:55,140 --> 00:19:59,400
descriptor<font color="#CCCCCC"> and the device replies an</font>

464
00:19:57,450 --> 00:20:04,290
<font color="#E5E5E5">extra and they can</font><font color="#CCCCCC"> actually</font><font color="#E5E5E5"> see that</font>

465
00:19:59,400 --> 00:20:06,000
this is the wirework<font color="#E5E5E5"> capture that I took</font>

466
00:20:04,290 --> 00:20:08,700
<font color="#E5E5E5">when I plugged in the mouse that I just</font>

467
00:20:06,000 --> 00:20:10,530
show you<font color="#E5E5E5"> and you</font><font color="#CCCCCC"> can</font><font color="#E5E5E5"> actually see that</font>

468
00:20:08,700 --> 00:20:15,650
it<font color="#CCCCCC"> just</font><font color="#E5E5E5"> sounds is a very same descriptor</font>

469
00:20:10,530 --> 00:20:18,600
<font color="#E5E5E5">with we saw in the LS USB just now right</font>

470
00:20:15,650 --> 00:20:21,929
and there is like this called<font color="#E5E5E5"> protests</font>

471
00:20:18,600 --> 00:20:24,480
of communications<font color="#E5E5E5"> the</font><font color="#CCCCCC"> hostess</font><font color="#E5E5E5"> requests</font>

472
00:20:21,929 --> 00:20:26,340
one descriptor<font color="#E5E5E5"> then device replies for</font>

473
00:20:24,480 --> 00:20:30,020
<font color="#CCCCCC">this group request</font><font color="#E5E5E5"> something else device</font>

474
00:20:26,340 --> 00:20:33,209
replies and<font color="#E5E5E5"> so on so so this</font><font color="#CCCCCC"> process</font><font color="#E5E5E5"> is</font>

475
00:20:30,020 --> 00:20:35,190
what<font color="#E5E5E5"> is called enumeration and after</font>

476
00:20:33,210 --> 00:20:39,780
enumeration is done<font color="#E5E5E5"> the host issues yet</font>

477
00:20:35,190 --> 00:20:41,309
configuration<font color="#CCCCCC"> requests</font><font color="#E5E5E5"> okay so this is</font>

478
00:20:39,780 --> 00:20:44,010
what we're actually going<font color="#E5E5E5"> to be</font><font color="#CCCCCC"> fuzzing</font>

479
00:20:41,309 --> 00:20:45,600
for the most part<font color="#E5E5E5"> so when the host</font>

480
00:20:44,010 --> 00:20:48,390
<font color="#CCCCCC">requested the scripture we want to</font>

481
00:20:45,600 --> 00:20:49,649
inject some random stuff but we don't

482
00:20:48,390 --> 00:20:51,720
want<font color="#E5E5E5"> to do this typically we want to</font>

483
00:20:49,650 --> 00:20:54,860
<font color="#E5E5E5">inject some structure to use some</font>

484
00:20:51,720 --> 00:21:00,510
structure awareness to do that<font color="#E5E5E5"> right</font>

485
00:20:54,860 --> 00:21:05,070
let's go back here<font color="#E5E5E5"> okay yeah just a bit</font>

486
00:21:00,510 --> 00:21:07,280
more this is<font color="#E5E5E5"> a picture of how the</font><font color="#CCCCCC"> Linux</font>

487
00:21:05,070 --> 00:21:10,200
is with subsystem looks from the inside

488
00:21:07,280 --> 00:21:12,809
<font color="#E5E5E5">I'd say this is easier to read from the</font>

489
00:21:10,200 --> 00:21:14,670
bottom to top<font color="#CCCCCC"> so we have three layers</font><font color="#E5E5E5"> on</font>

490
00:21:12,809 --> 00:21:16,500
<font color="#E5E5E5">this picture we</font><font color="#CCCCCC"> have the hardware layer</font>

491
00:21:14,670 --> 00:21:20,010
we have<font color="#E5E5E5"> the kernel</font><font color="#CCCCCC"> layer and it helps</font>

492
00:21:16,500 --> 00:21:22,230
the user<font color="#E5E5E5"> space layer and on the hardware</font>

493
00:21:20,010 --> 00:21:25,260
<font color="#E5E5E5">layer we have ease before that's where</font>

494
00:21:22,230 --> 00:21:26,790
we plug in our device right<font color="#E5E5E5"> the USB port</font>

495
00:21:25,260 --> 00:21:28,530
is connected<font color="#CCCCCC"> to a piece of hardware</font>

496
00:21:26,790 --> 00:21:31,920
<font color="#CCCCCC">that's called his</font><font color="#E5E5E5"> big host controller</font>

497
00:21:28,530 --> 00:21:34,710
and well I have first<font color="#CCCCCC"> beer pie here and</font>

498
00:21:31,920 --> 00:21:37,230
on the raspberry<font color="#E5E5E5"> PI's is this Hardware</font>

499
00:21:34,710 --> 00:21:41,610
<font color="#CCCCCC">piece is just</font><font color="#E5E5E5"> embedded into the human</font>

500
00:21:37,230 --> 00:21:43,410
<font color="#CCCCCC">ship that we have on our spare fight for</font>

501
00:21:41,610 --> 00:21:45,750
this cues because controller we have<font color="#E5E5E5"> a</font>

502
00:21:43,410 --> 00:21:48,390
driver in the kernel<font color="#CCCCCC"> and it's called</font>

503
00:21:45,750 --> 00:21:51,840
cheese because controller driver the

504
00:21:48,390 --> 00:21:53,760
driver<font color="#E5E5E5"> plugs USB controller into a like</font>

505
00:21:51,840 --> 00:21:56,760
a middle area layer which is<font color="#E5E5E5"> called</font><font color="#CCCCCC"> his</font>

506
00:21:53,760 --> 00:21:58,770
<font color="#E5E5E5">beaker and the whole idea is</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> abstract</font>

507
00:21:56,760 --> 00:22:00,770
away<font color="#CCCCCC"> the different kinds</font><font color="#E5E5E5"> of cost</font>

508
00:21:58,770 --> 00:22:06,120
controller<font color="#CCCCCC"> drivers that</font><font color="#E5E5E5"> you might have</font>

509
00:22:00,770 --> 00:22:08,100
right these<font color="#CCCCCC"> Bacoor</font><font color="#E5E5E5"> knows so this because</font>

510
00:22:06,120 --> 00:22:11,100
controller drivers communicates with the

511
00:22:08,100 --> 00:22:13,800
use before<font color="#E5E5E5"> with some standard</font><font color="#CCCCCC"> api</font><font color="#E5E5E5"> and it</font>

512
00:22:11,100 --> 00:22:15,719
basically passes the packets<font color="#E5E5E5"> it received</font>

513
00:22:13,800 --> 00:22:18,210
<font color="#E5E5E5">from the device messages it receives</font>

514
00:22:15,720 --> 00:22:20,370
<font color="#CCCCCC">from the</font><font color="#E5E5E5"> device to the</font><font color="#CCCCCC"> USB core based on</font>

515
00:22:18,210 --> 00:22:22,260
<font color="#E5E5E5">those messages</font><font color="#CCCCCC"> baccore figures out like</font>

516
00:22:20,370 --> 00:22:25,439
what to do the device what to<font color="#E5E5E5"> apply and</font>

517
00:22:22,260 --> 00:22:27,870
whether it<font color="#E5E5E5"> should load any drivers if at</font>

518
00:22:25,440 --> 00:22:28,900
<font color="#E5E5E5">loss any drivers</font><font color="#CCCCCC"> so here I have is be</font>

519
00:22:27,870 --> 00:22:32,679
<font color="#CCCCCC">hie use with my</font>

520
00:22:28,900 --> 00:22:34,720
<font color="#CCCCCC">search</font><font color="#E5E5E5"> and there I might be more those</font>

521
00:22:32,680 --> 00:22:37,900
drivers expose themselves to<font color="#E5E5E5"> the</font><font color="#CCCCCC"> euro</font>

522
00:22:34,720 --> 00:22:41,860
space somehow so for example when you

523
00:22:37,900 --> 00:22:45,720
plug in<font color="#E5E5E5"> a webcam the webcam get exposed</font>

524
00:22:41,860 --> 00:22:48,370
as like<font color="#CCCCCC"> /jf</font><font color="#E5E5E5"> / video</font><font color="#CCCCCC"> 0 or whatever</font><font color="#E5E5E5"> and</font>

525
00:22:45,720 --> 00:22:52,630
this<font color="#CCCCCC"> is like an</font><font color="#E5E5E5"> overview of how the host</font>

526
00:22:48,370 --> 00:22:54,939
subsystem of the<font color="#E5E5E5"> USB works</font><font color="#CCCCCC"> ok</font><font color="#E5E5E5"> what's</font>

527
00:22:52,630 --> 00:22:59,070
<font color="#CCCCCC">worse previous approaching and fuzzing</font>

528
00:22:54,940 --> 00:23:03,220
this stuff I'd say<font color="#E5E5E5"> there</font><font color="#CCCCCC"> are</font><font color="#E5E5E5"> like - I</font>

529
00:22:59,070 --> 00:23:06,000
mean there<font color="#E5E5E5"> are two ideas</font><font color="#CCCCCC"> before the</font>

530
00:23:03,220 --> 00:23:08,080
first<font color="#E5E5E5"> one is</font><font color="#CCCCCC"> just use some hardware and</font>

531
00:23:06,000 --> 00:23:10,630
there is<font color="#E5E5E5"> this thing that's called</font><font color="#CCCCCC"> phase</font>

532
00:23:08,080 --> 00:23:12,669
denture I have one of the older<font color="#CCCCCC"> words</font>

533
00:23:10,630 --> 00:23:14,620
<font color="#E5E5E5">right</font><font color="#CCCCCC"> here and basically</font><font color="#E5E5E5"> just a piece</font><font color="#CCCCCC"> of</font>

534
00:23:12,670 --> 00:23:18,580
hardware<font color="#CCCCCC"> that allows</font><font color="#E5E5E5"> you to emulate</font>

535
00:23:14,620 --> 00:23:20,679
<font color="#E5E5E5">these B devices um so it actually has</font>

536
00:23:18,580 --> 00:23:23,470
<font color="#CCCCCC">some Python framework reason for it</font><font color="#E5E5E5"> and</font>

537
00:23:20,680 --> 00:23:25,500
you<font color="#CCCCCC"> connect this part into your host</font>

538
00:23:23,470 --> 00:23:28,060
machine that you control that<font color="#CCCCCC"> like and</font>

539
00:23:25,500 --> 00:23:29,530
this part into<font color="#CCCCCC"> the</font><font color="#E5E5E5"> machine that you're</font>

540
00:23:28,060 --> 00:23:32,050
trying<font color="#E5E5E5"> to attack and you can actually</font>

541
00:23:29,530 --> 00:23:34,720
actually<font color="#E5E5E5"> drive this device with spice</font>

542
00:23:32,050 --> 00:23:36,220
and<font color="#E5E5E5"> you can basically send USB messages</font>

543
00:23:34,720 --> 00:23:38,470
to<font color="#E5E5E5"> them and they're going to get passed</font>

544
00:23:36,220 --> 00:23:41,620
to the<font color="#CCCCCC"> other end to the machine you're</font>

545
00:23:38,470 --> 00:23:44,920
trying to attack and the<font color="#E5E5E5"> other idea that</font>

546
00:23:41,620 --> 00:23:47,290
<font color="#E5E5E5">I saw is using a some kind of hypervisor</font>

547
00:23:44,920 --> 00:23:49,150
to<font color="#E5E5E5"> inject these B</font><font color="#CCCCCC"> packets into the</font>

548
00:23:47,290 --> 00:23:52,690
kernel<font color="#E5E5E5"> to connect USB devices to the</font>

549
00:23:49,150 --> 00:23:54,760
guest<font color="#CCCCCC"> Colonel</font><font color="#E5E5E5"> so I mean I saw a bunch of</font>

550
00:23:52,690 --> 00:23:56,470
<font color="#E5E5E5">articles there is one tool that actually</font>

551
00:23:54,760 --> 00:23:58,629
<font color="#E5E5E5">is actually</font><font color="#CCCCCC"> published and get help and</font>

552
00:23:56,470 --> 00:24:01,840
<font color="#E5E5E5">you can just run it and test that it's</font>

553
00:23:58,630 --> 00:24:04,030
called we use<font color="#CCCCCC"> bf and it uses the thing</font>

554
00:24:01,840 --> 00:24:07,629
that's called USB reader for the<font color="#E5E5E5"> call</font>

555
00:24:04,030 --> 00:24:12,010
inside<font color="#CCCCCC"> creosote qmo just</font><font color="#E5E5E5"> out of the box</font>

556
00:24:07,630 --> 00:24:13,690
<font color="#CCCCCC">support passing USB messages to the</font>

557
00:24:12,010 --> 00:24:17,710
internal kernel and connecting<font color="#E5E5E5"> these</font>

558
00:24:13,690 --> 00:24:21,400
video<font color="#CCCCCC"> isis</font><font color="#E5E5E5"> okay let's go to the main</font>

559
00:24:17,710 --> 00:24:25,180
part so what we want to<font color="#CCCCCC"> do is to</font><font color="#E5E5E5"> try to</font>

560
00:24:21,400 --> 00:24:27,730
<font color="#E5E5E5">fuss the USB with this color and this</font><font color="#CCCCCC"> is</font>

561
00:24:25,180 --> 00:24:29,350
<font color="#E5E5E5">the picture that initially were in our</font>

562
00:24:27,730 --> 00:24:31,810
minds<font color="#E5E5E5"> when this is color was developed</font>

563
00:24:29,350 --> 00:24:34,540
so<font color="#CCCCCC"> you have the kernel and the kernel</font>

564
00:24:31,810 --> 00:24:37,510
<font color="#CCCCCC">I mean it's kind of</font><font color="#E5E5E5"> like any other</font>

565
00:24:34,540 --> 00:24:40,760
program<font color="#E5E5E5"> it just accepts user input and</font>

566
00:24:37,510 --> 00:24:42,740
this user input can trigger box

567
00:24:40,760 --> 00:24:44,540
for the<font color="#E5E5E5"> colonel the</font><font color="#CCCCCC"> user input</font><font color="#E5E5E5"> that's</font>

568
00:24:42,740 --> 00:24:47,750
usually<font color="#CCCCCC"> management our Cisco's and</font>

569
00:24:44,540 --> 00:24:49,760
issuing<font color="#E5E5E5"> them from user</font><font color="#CCCCCC"> space but you can</font>

570
00:24:47,750 --> 00:24:52,309
<font color="#CCCCCC">think about it the</font><font color="#E5E5E5"> kernel actually</font><font color="#CCCCCC"> has a</font>

571
00:24:49,760 --> 00:24:54,049
lot more<font color="#E5E5E5"> different kinds of inputs for</font>

572
00:24:52,309 --> 00:24:56,960
example<font color="#CCCCCC"> you</font><font color="#E5E5E5"> have network packets that</font>

573
00:24:54,049 --> 00:24:58,700
come over<font color="#CCCCCC"> your Ethernet port</font><font color="#E5E5E5"> and you</font>

574
00:24:56,960 --> 00:25:00,290
have<font color="#CCCCCC"> used</font><font color="#E5E5E5"> V traffic which I mean you</font>

575
00:24:58,700 --> 00:25:04,610
plug in a USB device<font color="#CCCCCC"> and</font><font color="#E5E5E5"> the kernel</font>

576
00:25:00,290 --> 00:25:06,799
<font color="#CCCCCC">should handle that and the goal if</font><font color="#E5E5E5"> you</font>

577
00:25:04,610 --> 00:25:08,719
want<font color="#E5E5E5"> to fast the USB stack externally so</font>

578
00:25:06,799 --> 00:25:10,780
we want to fast the USB<font color="#CCCCCC"> core</font><font color="#E5E5E5"> part and</font>

579
00:25:08,720 --> 00:25:13,100
want<font color="#E5E5E5"> to fast the drivers part and</font>

580
00:25:10,780 --> 00:25:15,980
they're kind of like<font color="#E5E5E5"> two things that we</font>

581
00:25:13,100 --> 00:25:17,570
would want<font color="#CCCCCC"> ideally</font><font color="#E5E5E5"> the first one is we</font>

582
00:25:15,980 --> 00:25:21,080
would want<font color="#E5E5E5"> coverage to be collected from</font>

583
00:25:17,570 --> 00:25:23,689
USB<font color="#CCCCCC"> 2 so our fuzzing is</font><font color="#E5E5E5"> coverage guided</font>

584
00:25:21,080 --> 00:25:25,939
and the problem is<font color="#E5E5E5"> that use B is</font>

585
00:25:23,690 --> 00:25:29,720
<font color="#CCCCCC">actually handled in a</font><font color="#E5E5E5"> background</font><font color="#CCCCCC"> threat</font>

586
00:25:25,940 --> 00:25:31,610
<font color="#E5E5E5">in the kernel but currently the way that</font>

587
00:25:29,720 --> 00:25:33,320
cake off<font color="#E5E5E5"> which is the thing that</font>

588
00:25:31,610 --> 00:25:35,178
collects kernel coverage works

589
00:25:33,320 --> 00:25:40,059
is<font color="#E5E5E5"> just collected from the current</font>

590
00:25:35,179 --> 00:25:43,640
thread so we<font color="#E5E5E5"> need to somehow somehow</font>

591
00:25:40,059 --> 00:25:46,220
<font color="#E5E5E5">implement that asynchronous coverage</font>

592
00:25:43,640 --> 00:25:48,830
collection the second<font color="#E5E5E5"> part is that</font>

593
00:25:46,220 --> 00:25:52,040
<font color="#E5E5E5">ideally you would</font><font color="#CCCCCC"> want this on his boat</font>

594
00:25:48,830 --> 00:25:54,020
<font color="#E5E5E5">and I mean the idea is that we</font><font color="#CCCCCC"> don't</font>

595
00:25:52,040 --> 00:25:55,460
<font color="#E5E5E5">really want</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> report bugs manually and</font>

596
00:25:54,020 --> 00:25:58,160
<font color="#CCCCCC">it's</font><font color="#E5E5E5"> really nice</font><font color="#CCCCCC"> to take care of</font><font color="#E5E5E5"> the</font>

597
00:25:55,460 --> 00:26:00,020
infrastructure<font color="#E5E5E5"> I mean to take advantage</font>

598
00:25:58,160 --> 00:26:02,090
of the infrastructure<font color="#E5E5E5"> we already have</font>

599
00:26:00,020 --> 00:26:07,070
for<font color="#E5E5E5"> doing that</font>

600
00:26:02,090 --> 00:26:09,049
the problem is<font color="#E5E5E5"> that on his boat</font><font color="#CCCCCC"> run</font>

601
00:26:07,070 --> 00:26:12,200
<font color="#CCCCCC">Sandra he which is</font><font color="#E5E5E5"> Google</font><font color="#CCCCCC"> Cloud</font><font color="#E5E5E5"> engine</font>

602
00:26:09,049 --> 00:26:14,570
and it's like we can't actually use some

603
00:26:12,200 --> 00:26:18,230
other<font color="#E5E5E5"> kind</font><font color="#CCCCCC"> of hypervisor cause</font><font color="#E5E5E5"> we'd need</font>

604
00:26:14,570 --> 00:26:21,168
to use Jaheim in Siri we could launch a

605
00:26:18,230 --> 00:26:23,450
qmo<font color="#E5E5E5"> an instance inside of GCE</font>

606
00:26:21,169 --> 00:26:25,010
and launch<font color="#CCCCCC"> yes turn on side key and do</font>

607
00:26:23,450 --> 00:26:27,620
stuff<font color="#E5E5E5"> like that</font><font color="#CCCCCC"> but it sounds quite</font>

608
00:26:25,010 --> 00:26:29,809
<font color="#E5E5E5">difficult so it would be nice</font><font color="#CCCCCC"> to have</font>

609
00:26:27,620 --> 00:26:34,010
some kind<font color="#E5E5E5"> of way</font><font color="#CCCCCC"> to do it within the</font>

610
00:26:29,809 --> 00:26:35,629
<font color="#E5E5E5">kernel right let's address the first</font>

611
00:26:34,010 --> 00:26:38,480
<font color="#CCCCCC">part the</font><font color="#E5E5E5"> first part is that we want to</font>

612
00:26:35,630 --> 00:26:39,890
<font color="#E5E5E5">collect coverage from USB and I mean</font>

613
00:26:38,480 --> 00:26:41,780
it's not really<font color="#CCCCCC"> that difficult either</font>

614
00:26:39,890 --> 00:26:44,360
<font color="#E5E5E5">just need to implement this background</font>

615
00:26:41,780 --> 00:26:46,780
<font color="#CCCCCC">courage collection in the kernel so you</font>

616
00:26:44,360 --> 00:26:49,129
need to modify<font color="#E5E5E5"> the kernel cake off and</font>

617
00:26:46,780 --> 00:26:50,928
<font color="#E5E5E5">was idea is that we don't</font><font color="#CCCCCC"> want to</font>

618
00:26:49,130 --> 00:26:52,820
collect coverage from<font color="#E5E5E5"> all the threads in</font>

619
00:26:50,929 --> 00:26:54,020
<font color="#CCCCCC">the system</font><font color="#E5E5E5"> but</font><font color="#CCCCCC"> we want to somehow point</font>

620
00:26:52,820 --> 00:26:56,929
out this routes

621
00:26:54,020 --> 00:27:00,080
<font color="#CCCCCC">they want to handle and the way I did it</font>

622
00:26:56,930 --> 00:27:02,450
<font color="#CCCCCC">just add annotations</font><font color="#E5E5E5"> so I'm gonna show</font>

623
00:27:00,080 --> 00:27:04,730
<font color="#E5E5E5">you it a bit later as if I choose that</font><font color="#CCCCCC"> I</font>

624
00:27:02,450 --> 00:27:06,770
mean there<font color="#E5E5E5"> are links here</font><font color="#CCCCCC"> I'm</font><font color="#E5E5E5"> gonna show</font>

625
00:27:04,730 --> 00:27:08,950
I'm gonna share<font color="#CCCCCC"> these slides later and</font>

626
00:27:06,770 --> 00:27:12,530
you can<font color="#CCCCCC"> check</font><font color="#E5E5E5"> out the patch as well and</font>

627
00:27:08,950 --> 00:27:14,750
from<font color="#E5E5E5"> the point of view of usage so</font>

628
00:27:12,530 --> 00:27:17,840
before this patches you would use<font color="#CCCCCC"> take</font>

629
00:27:14,750 --> 00:27:20,420
off like<font color="#E5E5E5"> this and that is that you</font><font color="#CCCCCC"> open</font>

630
00:27:17,840 --> 00:27:22,699
a<font color="#CCCCCC"> kickoff file</font>

631
00:27:20,420 --> 00:27:25,100
um<font color="#CCCCCC"> map a</font><font color="#E5E5E5"> buffer where you would want</font><font color="#CCCCCC"> to</font>

632
00:27:22,700 --> 00:27:25,760
<font color="#E5E5E5">collect the coverage and</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> issue a cake</font>

633
00:27:25,100 --> 00:27:28,850
of<font color="#CCCCCC"> unable</font>

634
00:27:25,760 --> 00:27:30,740
<font color="#CCCCCC">Yocto and at</font><font color="#E5E5E5"> this point the coverage</font>

635
00:27:28,850 --> 00:27:34,669
<font color="#E5E5E5">from the current threat is going to be</font>

636
00:27:30,740 --> 00:27:37,130
<font color="#E5E5E5">collected into this buffer but after</font>

637
00:27:34,670 --> 00:27:38,780
this patch you can actually do this so

638
00:27:37,130 --> 00:27:40,790
the top snippet is actually kernel code

639
00:27:38,780 --> 00:27:43,790
and the bottom snippet is<font color="#CCCCCC"> inner space</font>

640
00:27:40,790 --> 00:27:46,850
code<font color="#E5E5E5"> hub event is the function that</font>

641
00:27:43,790 --> 00:27:49,100
<font color="#E5E5E5">inside the kernel handles different</font>

642
00:27:46,850 --> 00:27:51,919
events and happens on<font color="#CCCCCC"> USB cups in</font>

643
00:27:49,100 --> 00:27:54,860
<font color="#E5E5E5">particular it handles all</font><font color="#CCCCCC"> of the</font><font color="#E5E5E5"> USB</font>

644
00:27:51,920 --> 00:27:58,460
enumeration process<font color="#CCCCCC"> and that is that you</font>

645
00:27:54,860 --> 00:28:02,929
add annotations to<font color="#CCCCCC"> this</font><font color="#E5E5E5"> function and</font><font color="#CCCCCC"> use</font>

646
00:27:58,460 --> 00:28:05,420
some unique ID and I mean then you<font color="#E5E5E5"> use</font>

647
00:28:02,930 --> 00:28:07,700
this unique idea to pass it<font color="#CCCCCC"> to an i</font>

648
00:28:05,420 --> 00:28:10,220
octal that you<font color="#E5E5E5"> call from here space and</font>

649
00:28:07,700 --> 00:28:11,990
<font color="#CCCCCC">that's basically the whole idea so after</font>

650
00:28:10,220 --> 00:28:14,960
you issue this<font color="#E5E5E5"> kick off remote enable</font>

651
00:28:11,990 --> 00:28:16,280
<font color="#CCCCCC">iocked all the coverage from this</font>

652
00:28:14,960 --> 00:28:17,840
<font color="#CCCCCC">background thread is</font><font color="#E5E5E5"> going to be</font>

653
00:28:16,280 --> 00:28:22,220
collected<font color="#CCCCCC"> into this buffer that he</font>

654
00:28:17,840 --> 00:28:26,090
mapped so yeah<font color="#E5E5E5"> okay</font><font color="#CCCCCC"> now to the</font><font color="#E5E5E5"> second</font>

655
00:28:22,220 --> 00:28:28,570
<font color="#CCCCCC">part which is much more non-obvious I'd</font>

656
00:28:26,090 --> 00:28:32,389
say how do we interact these<font color="#CCCCCC"> V</font><font color="#E5E5E5"> packets</font>

657
00:28:28,570 --> 00:28:34,639
so<font color="#E5E5E5"> this</font><font color="#CCCCCC"> caller can actually now</font><font color="#E5E5E5"> inject</font>

658
00:28:32,390 --> 00:28:37,280
<font color="#E5E5E5">network packets and there is an</font>

659
00:28:34,640 --> 00:28:39,410
interface which is<font color="#E5E5E5"> called tun tab there</font>

660
00:28:37,280 --> 00:28:41,770
is<font color="#E5E5E5"> a device which is slash def slash</font>

661
00:28:39,410 --> 00:28:44,390
tune and if you<font color="#E5E5E5"> configure it</font><font color="#CCCCCC"> properly</font>

662
00:28:41,770 --> 00:28:46,970
<font color="#CCCCCC">whenever you write some data</font><font color="#E5E5E5"> into this</font>

663
00:28:44,390 --> 00:28:50,150
device<font color="#E5E5E5"> this data would go through the</font>

664
00:28:46,970 --> 00:28:51,380
same parsing path as an external pocket

665
00:28:50,150 --> 00:28:53,540
so it would go through the<font color="#CCCCCC"> whole TV</font>

666
00:28:51,380 --> 00:28:56,060
<font color="#CCCCCC">stack and you can actually find</font>

667
00:28:53,540 --> 00:28:59,720
externally trigger box or the<font color="#CCCCCC"> network</font>

668
00:28:56,060 --> 00:29:02,330
like<font color="#E5E5E5"> this the question is can we do</font>

669
00:28:59,720 --> 00:29:05,750
<font color="#E5E5E5">something similar</font><font color="#CCCCCC"> for use VM so it's</font>

670
00:29:02,330 --> 00:29:07,100
tricky<font color="#E5E5E5"> for</font><font color="#CCCCCC"> I say is the reason this is</font>

671
00:29:05,750 --> 00:29:10,600
tricky is because

672
00:29:07,100 --> 00:29:13,730
USB<font color="#E5E5E5"> communication is initiated by</font><font color="#CCCCCC"> host</font>

673
00:29:10,600 --> 00:29:16,248
<font color="#CCCCCC">so network</font><font color="#E5E5E5"> communication is initiated by</font>

674
00:29:13,730 --> 00:29:20,210
anybody<font color="#E5E5E5"> so</font><font color="#CCCCCC"> you can just kind of send</font>

675
00:29:16,249 --> 00:29:22,730
data<font color="#E5E5E5"> to sound device and it gets parsed</font>

676
00:29:20,210 --> 00:29:25,340
<font color="#E5E5E5">and handled by the kernel but you can't</font>

677
00:29:22,730 --> 00:29:28,100
actually do<font color="#CCCCCC"> it with the</font><font color="#E5E5E5"> USB easily this</font>

678
00:29:25,340 --> 00:29:30,199
way<font color="#E5E5E5"> because you're supposed</font><font color="#CCCCCC"> to have some</font>

679
00:29:28,100 --> 00:29:35,449
state inside the<font color="#CCCCCC"> kernel that</font><font color="#E5E5E5"> actually</font>

680
00:29:30,200 --> 00:29:37,940
expects<font color="#E5E5E5"> you to send</font><font color="#CCCCCC"> page right now so</font>

681
00:29:35,450 --> 00:29:39,409
yeah<font color="#E5E5E5"> I was reading and trying to figure</font>

682
00:29:37,940 --> 00:29:41,090
<font color="#CCCCCC">out</font><font color="#E5E5E5"> I mean I was reading a lot</font><font color="#CCCCCC"> of</font>

683
00:29:39,409 --> 00:29:43,789
documentation trying to figure out how

684
00:29:41,090 --> 00:29:45,769
to do stuff like<font color="#E5E5E5"> this and what I</font>

685
00:29:43,789 --> 00:29:48,919
<font color="#E5E5E5">stumbled upon is the thing that's called</font>

686
00:29:45,769 --> 00:29:51,559
gadget ESB subsystem the<font color="#CCCCCC"> whole idea</font><font color="#E5E5E5"> is</font>

687
00:29:48,919 --> 00:29:53,869
that if<font color="#E5E5E5"> you have two Linux device</font><font color="#CCCCCC"> like</font>

688
00:29:51,559 --> 00:29:55,700
some Linux<font color="#E5E5E5"> boards usually you can</font>

689
00:29:53,869 --> 00:29:59,059
actually<font color="#E5E5E5"> turn them into the USB gadget</font>

690
00:29:55,700 --> 00:30:02,119
<font color="#E5E5E5">and there is a whole subsystem that's</font>

691
00:29:59,059 --> 00:30:04,220
called gadget subsystem<font color="#CCCCCC"> for that this</font>

692
00:30:02,119 --> 00:30:07,488
subsystem provides a few interfaces to

693
00:30:04,220 --> 00:30:09,679
the<font color="#E5E5E5"> your space I'm not sure which one is</font>

694
00:30:07,489 --> 00:30:11,450
the most frequently heard about but I

695
00:30:09,679 --> 00:30:14,239
mean I like<font color="#CCCCCC"> to think about</font><font color="#E5E5E5"> gadget</font><font color="#CCCCCC"> FS</font>

696
00:30:11,450 --> 00:30:17,600
<font color="#CCCCCC">cots is the simplest one I'd say that is</font>

697
00:30:14,239 --> 00:30:20,869
that<font color="#E5E5E5"> the kernel provides an interface to</font>

698
00:30:17,600 --> 00:30:24,199
the user<font color="#E5E5E5"> space to actually implement USB</font>

699
00:30:20,869 --> 00:30:26,480
devices<font color="#E5E5E5"> in the user space</font><font color="#CCCCCC"> so let's</font><font color="#E5E5E5"> take</font>

700
00:30:24,200 --> 00:30:28,730
a look<font color="#E5E5E5"> at this picture because I mean</font>

701
00:30:26,480 --> 00:30:30,499
it's much easier to<font color="#E5E5E5"> see this way so</font><font color="#CCCCCC"> the</font>

702
00:30:28,730 --> 00:30:33,230
<font color="#CCCCCC">idea</font><font color="#E5E5E5"> is that here on the right</font>

703
00:30:30,499 --> 00:30:34,549
let's read it<font color="#E5E5E5"> from top to bottom</font><font color="#CCCCCC"> so we</font>

704
00:30:33,230 --> 00:30:37,369
have a thing that's<font color="#E5E5E5"> called user space</font>

705
00:30:34,549 --> 00:30:39,139
device app and this<font color="#E5E5E5"> is actually the your</font>

706
00:30:37,369 --> 00:30:42,470
space apps it's<font color="#CCCCCC"> going to implement all</font>

707
00:30:39,139 --> 00:30:44,209
of<font color="#E5E5E5"> the logic of our USB device and we</font>

708
00:30:42,470 --> 00:30:46,309
will<font color="#E5E5E5"> use</font><font color="#CCCCCC"> gadget the first interface</font><font color="#E5E5E5"> for</font>

709
00:30:44,210 --> 00:30:48,379
<font color="#CCCCCC">that we can actually instead</font><font color="#E5E5E5"> of using</font>

710
00:30:46,309 --> 00:30:50,869
gadget FS we can implement the whole

711
00:30:48,379 --> 00:30:53,480
thing in the kernel and<font color="#E5E5E5"> use our kernel</font>

712
00:30:50,869 --> 00:30:55,908
some custom kernel module it's like one

713
00:30:53,480 --> 00:30:57,769
of<font color="#CCCCCC"> the two</font><font color="#E5E5E5"> options that you can</font><font color="#CCCCCC"> use</font><font color="#E5E5E5"> it's</font>

714
00:30:55,909 --> 00:31:00,049
easier to<font color="#CCCCCC"> handle stuff</font><font color="#E5E5E5"> in</font><font color="#CCCCCC"> user space so</font>

715
00:30:57,769 --> 00:31:03,529
<font color="#E5E5E5">that's I mean let's let's say we walk in</font>

716
00:31:00,049 --> 00:31:05,330
the left path and walk down so there is

717
00:31:03,529 --> 00:31:07,309
this thing<font color="#CCCCCC"> that's</font><font color="#E5E5E5"> called is</font><font color="#CCCCCC"> B gadget</font>

718
00:31:05,330 --> 00:31:09,529
<font color="#E5E5E5">core and basically the same thing that</font>

719
00:31:07,309 --> 00:31:12,259
we<font color="#E5E5E5"> saw before like it's kind of like</font>

720
00:31:09,529 --> 00:31:16,759
intermediate layers that would provide

721
00:31:12,259 --> 00:31:19,909
<font color="#CCCCCC">API for</font><font color="#E5E5E5"> different kinds of drivers</font><font color="#CCCCCC"> and I</font>

722
00:31:16,759 --> 00:31:20,870
mean you have different<font color="#E5E5E5"> different USB</font>

723
00:31:19,909 --> 00:31:23,630
device controller

724
00:31:20,870 --> 00:31:26,809
<font color="#CCCCCC">this</font><font color="#E5E5E5"> video</font><font color="#CCCCCC"> vise controller is same thing</font>

725
00:31:23,630 --> 00:31:29,930
<font color="#E5E5E5">that similar thing that a USB host</font>

726
00:31:26,809 --> 00:31:32,930
controller is it just instead<font color="#E5E5E5"> is instead</font>

727
00:31:29,930 --> 00:31:35,990
of<font color="#CCCCCC"> being a host</font><font color="#E5E5E5"> it's been a device it</font>

728
00:31:32,930 --> 00:31:37,790
can<font color="#E5E5E5"> be</font><font color="#CCCCCC"> a device</font><font color="#E5E5E5"> so use be captured</font><font color="#CCCCCC"> for</font>

729
00:31:35,990 --> 00:31:41,300
provide some API is for<font color="#E5E5E5"> different</font>

730
00:31:37,790 --> 00:31:43,309
drivers to register themselves<font color="#E5E5E5"> and yeah</font>

731
00:31:41,300 --> 00:31:45,290
that's work like this so if you have

732
00:31:43,309 --> 00:31:47,330
<font color="#E5E5E5">four USB device controller and you have</font>

733
00:31:45,290 --> 00:31:50,120
some<font color="#E5E5E5"> USB port we can just plug in the</font>

734
00:31:47,330 --> 00:31:54,530
sport<font color="#E5E5E5"> into a USB host and then</font><font color="#CCCCCC"> use</font>

735
00:31:50,120 --> 00:31:59,030
<font color="#E5E5E5">gadget the first to implement some</font>

736
00:31:54,530 --> 00:32:00,710
device so let's<font color="#CCCCCC"> put the other</font><font color="#E5E5E5"> part of</font>

737
00:31:59,030 --> 00:32:02,960
the picture<font color="#E5E5E5"> back on so right now on the</font>

738
00:32:00,710 --> 00:32:05,300
Left we have<font color="#E5E5E5"> the host use V subsystem</font>

739
00:32:02,960 --> 00:32:07,670
<font color="#CCCCCC">I'm and on</font><font color="#E5E5E5"> the right we</font><font color="#CCCCCC"> have the gadget</font>

740
00:32:05,300 --> 00:32:09,740
use<font color="#CCCCCC"> with subsystem and this</font><font color="#E5E5E5"> is what</font>

741
00:32:07,670 --> 00:32:12,620
<font color="#CCCCCC">we're</font><font color="#E5E5E5"> trying to attack so I want to</font>

742
00:32:09,740 --> 00:32:15,440
<font color="#E5E5E5">attack the USB</font><font color="#CCCCCC"> core part and we want to</font>

743
00:32:12,620 --> 00:32:18,860
attack the drivers and we want to do it

744
00:32:15,440 --> 00:32:21,740
<font color="#E5E5E5">like from below externally and the</font>

745
00:32:18,860 --> 00:32:25,909
question is can we somehow do it so we

746
00:32:21,740 --> 00:32:29,179
<font color="#E5E5E5">don't need any hardware and actually</font>

747
00:32:25,910 --> 00:32:30,830
there<font color="#E5E5E5"> is a magical config that's I mean</font>

748
00:32:29,179 --> 00:32:32,540
<font color="#CCCCCC">it took</font><font color="#E5E5E5"> me</font><font color="#CCCCCC"> some</font><font color="#E5E5E5"> time to figure out what</font>

749
00:32:30,830 --> 00:32:35,360
it is<font color="#E5E5E5"> and to find out how</font><font color="#CCCCCC"> it works</font>

750
00:32:32,540 --> 00:32:39,710
but it just<font color="#CCCCCC"> the config that implements</font>

751
00:32:35,360 --> 00:32:41,209
<font color="#CCCCCC">two virtual drivers the one for host</font>

752
00:32:39,710 --> 00:32:43,010
controller and the one<font color="#E5E5E5"> for device</font>

753
00:32:41,210 --> 00:32:46,550
controller and just connect them<font color="#E5E5E5"> within</font>

754
00:32:43,010 --> 00:32:50,030
the kernel<font color="#E5E5E5"> so at this point what you</font>

755
00:32:46,550 --> 00:32:53,690
have is this<font color="#CCCCCC"> oh</font><font color="#E5E5E5"> this all happens</font><font color="#CCCCCC"> within</font>

756
00:32:50,030 --> 00:32:55,280
one VM or within the<font color="#E5E5E5"> same device and you</font>

757
00:32:53,690 --> 00:32:57,710
don't need<font color="#E5E5E5"> any hardware so you actually</font>

758
00:32:55,280 --> 00:32:59,660
actually write a user<font color="#E5E5E5"> space app that</font>

759
00:32:57,710 --> 00:33:03,530
through graduate<font color="#CCCCCC"> FS or</font><font color="#E5E5E5"> through something</font>

760
00:32:59,660 --> 00:33:05,360
<font color="#E5E5E5">else would emulate a USB device and via</font>

761
00:33:03,530 --> 00:33:07,040
<font color="#E5E5E5">the</font><font color="#CCCCCC"> diny</font><font color="#E5E5E5"> drivers</font>

762
00:33:05,360 --> 00:33:09,860
it would just be connected back to the

763
00:33:07,040 --> 00:33:12,139
<font color="#E5E5E5">same kernel so kind of like connecting</font>

764
00:33:09,860 --> 00:33:15,520
USB devices from<font color="#E5E5E5"> the user space to the</font>

765
00:33:12,140 --> 00:33:18,470
kernel this user<font color="#E5E5E5"> space is running on</font>

766
00:33:15,520 --> 00:33:20,540
<font color="#CCCCCC">okay so initially</font><font color="#E5E5E5"> I was looking at</font>

767
00:33:18,470 --> 00:33:22,250
graduate FS and I was trying<font color="#E5E5E5"> to fast</font>

768
00:33:20,540 --> 00:33:24,100
stuff through graduate FS but the

769
00:33:22,250 --> 00:33:26,570
problem with graduate the first is that

770
00:33:24,100 --> 00:33:29,060
first of<font color="#E5E5E5"> all it has some sanity checks</font>

771
00:33:26,570 --> 00:33:29,639
on the descriptors<font color="#CCCCCC"> that you pass</font><font color="#E5E5E5"> so I</font>

772
00:33:29,060 --> 00:33:32,560
mean

773
00:33:29,640 --> 00:33:34,360
ideally<font color="#CCCCCC"> what we would want to</font><font color="#E5E5E5"> pass as</font>

774
00:33:32,560 --> 00:33:37,210
much corrupted stuff as possible<font color="#CCCCCC"> all</font>

775
00:33:34,360 --> 00:33:40,090
<font color="#E5E5E5">right and second thing is</font><font color="#CCCCCC"> that gadget FS</font>

776
00:33:37,210 --> 00:33:42,450
has some<font color="#E5E5E5"> I mean it handles part of the</font>

777
00:33:40,090 --> 00:33:45,340
communication logic so it doesn't

778
00:33:42,450 --> 00:33:47,830
doesn't provide you to reply<font color="#E5E5E5"> to every</font>

779
00:33:45,340 --> 00:33:50,110
kind<font color="#E5E5E5"> of packet</font><font color="#CCCCCC"> write it handle some of</font>

780
00:33:47,830 --> 00:33:52,030
them by<font color="#E5E5E5"> themselves</font><font color="#CCCCCC"> so at this point I</font>

781
00:33:50,110 --> 00:33:54,820
thought it's a<font color="#CCCCCC"> good idea</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> write my own</font>

782
00:33:52,030 --> 00:33:57,760
kernel<font color="#E5E5E5"> puzzle</font><font color="#CCCCCC"> father module as I call it</font>

783
00:33:54,820 --> 00:34:00,220
<font color="#CCCCCC">I mean if it's gonna get up streamed</font><font color="#E5E5E5"> at</font>

784
00:33:57,760 --> 00:34:01,840
any point it<font color="#E5E5E5"> might be up streamed as if</font>

785
00:34:00,220 --> 00:34:05,530
<font color="#E5E5E5">part of graduate affairs but right now</font>

786
00:34:01,840 --> 00:34:08,799
just a<font color="#E5E5E5"> separate module and well the idea</font>

787
00:34:05,530 --> 00:34:12,060
<font color="#CCCCCC">is that it's let's take a look at the</font>

788
00:34:08,800 --> 00:34:14,560
pictures<font color="#CCCCCC"> actually has this module in so</font>

789
00:34:12,060 --> 00:34:16,360
this is actually the whole idea of the

790
00:34:14,560 --> 00:34:18,850
fuzzing approach so in<font color="#E5E5E5"> userspace</font><font color="#CCCCCC"> we have</font>

791
00:34:16,360 --> 00:34:21,850
this exact<font color="#E5E5E5"> proc application that is so</font>

792
00:34:18,850 --> 00:34:24,940
before<font color="#E5E5E5"> we have my is be father kernel</font>

793
00:34:21,850 --> 00:34:26,940
module that provides a interface kind<font color="#E5E5E5"> of</font>

794
00:34:24,940 --> 00:34:29,230
like gadget the<font color="#CCCCCC"> fastest</font><font color="#E5E5E5"> your space and</font>

795
00:34:26,940 --> 00:34:32,200
it<font color="#E5E5E5"> is that on the other</font><font color="#CCCCCC"> side</font><font color="#E5E5E5"> it's</font>

796
00:34:29,230 --> 00:34:34,570
plugged in into<font color="#E5E5E5"> USB gadget core all</font>

797
00:34:32,199 --> 00:34:41,020
<font color="#E5E5E5">right and then we use the dummy drivers</font>

798
00:34:34,570 --> 00:34:41,320
and connect<font color="#CCCCCC"> to the USB core subsystem so</font>

799
00:34:41,020 --> 00:34:43,899
yeah

800
00:34:41,320 --> 00:34:45,669
that's the whole idea<font color="#E5E5E5"> the one thing that</font>

801
00:34:43,899 --> 00:34:47,620
we actually<font color="#E5E5E5"> thought about after that is</font>

802
00:34:45,668 --> 00:34:50,649
<font color="#E5E5E5">that you can</font><font color="#CCCCCC"> actually kind of test</font>

803
00:34:47,620 --> 00:34:52,750
devices<font color="#E5E5E5"> from both ends at this point so</font>

804
00:34:50,649 --> 00:34:55,449
<font color="#CCCCCC">you can emulate some use video I said</font>

805
00:34:52,750 --> 00:34:58,210
<font color="#CCCCCC">connect it to the kernel</font><font color="#E5E5E5"> you make I mean</font>

806
00:34:55,449 --> 00:35:01,060
if you emulate<font color="#E5E5E5"> a USB camera</font><font color="#CCCCCC"> it's</font><font color="#E5E5E5"> gonna</font>

807
00:34:58,210 --> 00:35:03,880
get exposed<font color="#E5E5E5"> to your space as a device</font>

808
00:35:01,060 --> 00:35:05,710
and /tf right and you can issue<font color="#CCCCCC"> I</font>

809
00:35:03,880 --> 00:35:08,470
<font color="#CCCCCC">octaves on this device so it's kind of</font>

810
00:35:05,710 --> 00:35:14,350
like<font color="#E5E5E5"> testing from both hands it's not</font>

811
00:35:08,470 --> 00:35:16,959
<font color="#E5E5E5">implemented yet just an idea okay so for</font>

812
00:35:14,350 --> 00:35:19,480
for handling<font color="#E5E5E5"> this stuff I had to write</font>

813
00:35:16,960 --> 00:35:22,060
some<font color="#CCCCCC"> nice big descriptions and let me</font>

814
00:35:19,480 --> 00:35:28,960
actually<font color="#E5E5E5"> show them they are in sis</font><font color="#CCCCCC"> color</font>

815
00:35:22,060 --> 00:35:32,200
format so they look like<font color="#CCCCCC"> this I actually</font>

816
00:35:28,960 --> 00:35:34,120
have I've described some of<font color="#E5E5E5"> the standard</font>

817
00:35:32,200 --> 00:35:37,029
descriptor structures that they have a

818
00:35:34,120 --> 00:35:38,950
<font color="#E5E5E5">USB</font><font color="#CCCCCC"> and this</font><font color="#E5E5E5"> is like the most important</font>

819
00:35:37,030 --> 00:35:42,010
one device descriptor<font color="#E5E5E5"> it has a bunch of</font>

820
00:35:38,950 --> 00:35:43,419
stuff<font color="#CCCCCC"> on</font><font color="#E5E5E5"> it and</font><font color="#CCCCCC"> all right and I'd say I</font>

821
00:35:42,010 --> 00:35:47,770
<font color="#CCCCCC">describe like</font><font color="#E5E5E5"> 30</font>

822
00:35:43,420 --> 00:35:49,900
from structures and I've also<font color="#E5E5E5"> added it's</font>

823
00:35:47,770 --> 00:35:52,420
kind of like<font color="#E5E5E5"> fate his</font><font color="#CCCCCC"> Co so the idea is</font>

824
00:35:49,900 --> 00:35:56,770
that sometimes you don't have an<font color="#E5E5E5"> actual</font>

825
00:35:52,420 --> 00:35:59,760
<font color="#E5E5E5">his</font><font color="#CCCCCC"> code</font><font color="#E5E5E5"> to execute some complex thing</font>

826
00:35:56,770 --> 00:36:02,410
that you want<font color="#E5E5E5"> to do since that he use a</font>

827
00:35:59,760 --> 00:36:03,910
basically<font color="#E5E5E5"> just a function that from the</font>

828
00:36:02,410 --> 00:36:05,770
point of view<font color="#E5E5E5"> of his</font><font color="#CCCCCC"> caller from</font><font color="#E5E5E5"> the</font>

829
00:36:03,910 --> 00:36:08,348
point<font color="#E5E5E5"> of</font><font color="#CCCCCC"> view of generating programs</font>

830
00:36:05,770 --> 00:36:16,839
it's a<font color="#E5E5E5"> Cisco but it just implemented as</font>

831
00:36:08,349 --> 00:36:19,170
a function<font color="#E5E5E5"> and see you know the part</font>

832
00:36:16,839 --> 00:36:21,790
that I've just shown<font color="#CCCCCC"> you is are the</font>

833
00:36:19,170 --> 00:36:25,780
different kinds<font color="#E5E5E5"> of device descriptors</font>

834
00:36:21,790 --> 00:36:29,170
there's also the second<font color="#E5E5E5"> part which are</font>

835
00:36:25,780 --> 00:36:31,780
used<font color="#E5E5E5"> by device IDs and well what I did I</font>

836
00:36:29,170 --> 00:36:33,640
ran the kernel I ran the Ubuntu kernel

837
00:36:31,780 --> 00:36:37,000
if I remember correctly<font color="#CCCCCC"> I like some</font>

838
00:36:33,640 --> 00:36:40,118
equal equal kernel<font color="#E5E5E5"> and I just in runtime</font>

839
00:36:37,000 --> 00:36:42,609
<font color="#CCCCCC">kind of got all of the IDS for</font><font color="#E5E5E5"> different</font>

840
00:36:40,119 --> 00:36:44,829
drivers<font color="#E5E5E5"> at this kernel uses and I just</font>

841
00:36:42,609 --> 00:36:47,500
like my with a script converting them

842
00:36:44,829 --> 00:36:50,230
into<font color="#CCCCCC"> Cisco descriptions</font><font color="#E5E5E5"> and it helps to</font>

843
00:36:47,500 --> 00:36:52,630
<font color="#E5E5E5">if you guess I guess</font><font color="#CCCCCC"> randomly it does</font>

844
00:36:50,230 --> 00:36:56,049
really work good and even coverage does

845
00:36:52,630 --> 00:36:58,589
really help<font color="#CCCCCC"> with that</font><font color="#E5E5E5"> so just having a</font>

846
00:36:56,049 --> 00:37:01,390
list of different IDs helps a lot<font color="#E5E5E5"> and</font>

847
00:36:58,589 --> 00:37:03,400
this<font color="#E5E5E5"> is</font><font color="#CCCCCC"> what these fake is called would</font>

848
00:37:01,390 --> 00:37:06,190
look like<font color="#E5E5E5"> and it's quite simple</font>

849
00:37:03,400 --> 00:37:08,140
<font color="#E5E5E5">eat the argument</font><font color="#CCCCCC"> that this cast is</font>

850
00:37:06,190 --> 00:37:10,299
<font color="#E5E5E5">actually generated based on on those</font>

851
00:37:08,140 --> 00:37:13,990
structures<font color="#CCCCCC"> that I described</font><font color="#E5E5E5"> and it will</font>

852
00:37:10,299 --> 00:37:14,950
just<font color="#E5E5E5"> open a USB fuzzer and now here is</font>

853
00:37:13,990 --> 00:37:18,910
sexually missing a step

854
00:37:14,950 --> 00:37:21,629
I forgot<font color="#CCCCCC"> that society is</font><font color="#E5E5E5"> that you first</font>

855
00:37:18,910 --> 00:37:21,629
you need<font color="#E5E5E5"> to</font>

856
00:37:25,180 --> 00:37:33,379
so what you want to<font color="#E5E5E5"> do is you would</font>

857
00:37:28,460 --> 00:37:37,520
<font color="#CCCCCC">actually want to have some USB device</font>

858
00:37:33,380 --> 00:37:40,610
right and what you want<font color="#E5E5E5"> to do is first</font>

859
00:37:37,520 --> 00:37:44,690
like emulate device<font color="#E5E5E5"> all right</font>

860
00:37:40,610 --> 00:37:51,880
Connect device<font color="#CCCCCC"> Etsy</font><font color="#E5E5E5"> better</font><font color="#CCCCCC"> connect</font>

861
00:37:44,690 --> 00:37:51,880
<font color="#E5E5E5">device FD USB device</font>

862
00:37:58,000 --> 00:38:02,060
now this looks<font color="#E5E5E5"> better so</font><font color="#CCCCCC"> you connect</font><font color="#E5E5E5"> the</font>

863
00:38:00,590 --> 00:38:04,130
device that<font color="#E5E5E5"> is based on those</font>

864
00:38:02,060 --> 00:38:06,529
<font color="#E5E5E5">descriptions that he got</font><font color="#CCCCCC"> passed and then</font>

865
00:38:04,130 --> 00:38:08,690
you then wait for his<font color="#E5E5E5"> be event and</font>

866
00:38:06,530 --> 00:38:10,370
whenever you have some event<font color="#E5E5E5"> some</font>

867
00:38:08,690 --> 00:38:12,230
message you're supposed to<font color="#E5E5E5"> apply</font><font color="#CCCCCC"> to you</font>

868
00:38:10,370 --> 00:38:16,940
<font color="#CCCCCC">just get the reply from the description</font>

869
00:38:12,230 --> 00:38:20,570
that<font color="#CCCCCC"> you got</font><font color="#E5E5E5"> past okay this is a demo</font>

870
00:38:16,940 --> 00:38:23,210
frisbee<font color="#CCCCCC"> fuzzing in progress</font><font color="#E5E5E5"> I so I'm</font>

871
00:38:20,570 --> 00:38:26,300
gonna just<font color="#E5E5E5"> I have a dashboard cached</font>

872
00:38:23,210 --> 00:38:29,030
and<font color="#E5E5E5"> so whenever you launch is his</font>

873
00:38:26,300 --> 00:38:31,220
manager you would get<font color="#E5E5E5"> presented with</font>

874
00:38:29,030 --> 00:38:34,760
<font color="#E5E5E5">something like this so I can actually</font>

875
00:38:31,220 --> 00:38:37,100
start it it's gonna take okay<font color="#E5E5E5"> let me</font>

876
00:38:34,760 --> 00:38:40,610
just<font color="#E5E5E5"> show</font><font color="#CCCCCC"> it I can show the process</font>

877
00:38:37,100 --> 00:38:43,040
<font color="#E5E5E5">later and so this idea that you started</font>

878
00:38:40,610 --> 00:38:44,180
it's gonna show you when when it's

879
00:38:43,040 --> 00:38:45,740
actually<font color="#E5E5E5"> running is going</font><font color="#CCCCCC"> to show</font><font color="#E5E5E5"> you</font>

880
00:38:44,180 --> 00:38:47,750
the<font color="#E5E5E5"> uptime and</font><font color="#CCCCCC"> gonna</font><font color="#E5E5E5"> show you like</font>

881
00:38:45,740 --> 00:38:50,390
corpus that<font color="#E5E5E5"> you have some coverage and</font>

882
00:38:47,750 --> 00:38:52,430
so on<font color="#E5E5E5"> and after running this whole thing</font>

883
00:38:50,390 --> 00:38:54,710
<font color="#E5E5E5">and implementing it for like a week</font><font color="#CCCCCC"> I</font>

884
00:38:52,430 --> 00:38:57,730
got<font color="#CCCCCC"> a bunch of precious I mean this is</font>

885
00:38:54,710 --> 00:39:01,310
after I<font color="#E5E5E5"> report at some of the back so I</font>

886
00:38:57,730 --> 00:39:02,960
mean this decent amount I'd say<font color="#E5E5E5"> some of</font>

887
00:39:01,310 --> 00:39:05,570
<font color="#E5E5E5">them are actually quite interesting so</font>

888
00:39:02,960 --> 00:39:08,000
<font color="#E5E5E5">for example you</font><font color="#CCCCCC"> have some ease of the</font>

889
00:39:05,570 --> 00:39:11,090
few rights<font color="#E5E5E5"> and there or you have some</font>

890
00:39:08,000 --> 00:39:12,890
stuff like where was<font color="#E5E5E5"> it invalid freeze</font>

891
00:39:11,090 --> 00:39:15,470
basically double<font color="#E5E5E5"> free most of the time</font>

892
00:39:12,890 --> 00:39:19,790
so like some decent memory corruptions

893
00:39:15,470 --> 00:39:21,169
you can<font color="#CCCCCC"> actually trigger</font><font color="#E5E5E5"> over USB so</font>

894
00:39:19,790 --> 00:39:22,820
yeah and<font color="#E5E5E5"> whenever you open some</font><font color="#CCCCCC"> of the</font>

895
00:39:21,170 --> 00:39:26,660
supports<font color="#E5E5E5"> and this is</font><font color="#CCCCCC"> the report I'm</font>

896
00:39:22,820 --> 00:39:30,080
going<font color="#CCCCCC"> to actually show later this</font><font color="#E5E5E5"> like</font>

897
00:39:26,660 --> 00:39:32,540
some null pointer dereference<font color="#E5E5E5"> in a SMS</font>

898
00:39:30,080 --> 00:39:36,410
use we<font color="#E5E5E5"> drive or whatever</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> is</font>

899
00:39:32,540 --> 00:39:38,750
and you can<font color="#E5E5E5"> see is</font><font color="#CCCCCC"> your</font><font color="#E5E5E5"> editor for this</font>

900
00:39:36,410 --> 00:39:41,620
<font color="#E5E5E5">book</font><font color="#CCCCCC"> it's</font><font color="#E5E5E5"> very small</font><font color="#CCCCCC"> basically what you</font>

901
00:39:38,750 --> 00:39:44,930
need to do<font color="#E5E5E5"> we just</font><font color="#CCCCCC"> need</font><font color="#E5E5E5"> to connect a</font>

902
00:39:41,620 --> 00:39:48,049
device with sound particular descriptor

903
00:39:44,930 --> 00:39:51,759
and<font color="#E5E5E5"> the kernel crashes so I mean it's</font>

904
00:39:48,050 --> 00:39:51,760
not<font color="#CCCCCC"> really that deep</font>

905
00:39:55,890 --> 00:40:04,140
<font color="#CCCCCC">oh yeah</font><font color="#E5E5E5"> okay yeah the baccarat I</font><font color="#CCCCCC"> just</font>

906
00:40:02,190 --> 00:40:06,900
<font color="#CCCCCC">mentioned we can</font><font color="#E5E5E5"> actually try</font><font color="#CCCCCC"> to run it</font>

907
00:40:04,140 --> 00:40:08,999
in<font color="#CCCCCC"> ATM I'm</font><font color="#E5E5E5"> going to try to reproduce it</font>

908
00:40:06,900 --> 00:40:12,359
<font color="#E5E5E5">so what I have</font><font color="#CCCCCC"> here on the</font><font color="#E5E5E5"> left is I</font>

909
00:40:08,999 --> 00:40:14,609
have<font color="#CCCCCC"> qmo</font><font color="#E5E5E5"> which is right now booting it</font>

910
00:40:12,359 --> 00:40:17,339
has my USB father module inside<font color="#E5E5E5"> I try it</font>

911
00:40:14,609 --> 00:40:19,230
and I have this exact same we're pretty

912
00:40:17,339 --> 00:40:22,230
<font color="#E5E5E5">sure I</font><font color="#CCCCCC"> just showed you</font><font color="#E5E5E5"> like the one</font>

913
00:40:19,230 --> 00:40:24,690
that's in SMS USB what I'm going to do

914
00:40:22,230 --> 00:40:27,569
is I'm<font color="#CCCCCC"> going to copy</font><font color="#E5E5E5"> it</font><font color="#CCCCCC"> to the VM</font><font color="#E5E5E5"> and</font>

915
00:40:24,690 --> 00:40:36,329
I'm just gonna run it and let's see what

916
00:40:27,569 --> 00:40:40,950
happens<font color="#E5E5E5"> so to execute his color programs</font>

917
00:40:36,329 --> 00:40:43,859
he use a little which is<font color="#E5E5E5"> called his</font>

918
00:40:40,950 --> 00:40:46,169
exact<font color="#CCCCCC"> prog and I'm just gonna pass it a</font>

919
00:40:43,859 --> 00:40:52,140
bunch<font color="#E5E5E5"> of flags and I'm just going to</font>

920
00:40:46,170 --> 00:40:56,519
<font color="#CCCCCC">specify this</font><font color="#E5E5E5"> lock file right okay so</font>

921
00:40:52,140 --> 00:40:59,160
here we<font color="#E5E5E5"> have the same now where is it so</font>

922
00:40:56,519 --> 00:41:01,618
here it's at like connecting SMS USB SMS

923
00:40:59,160 --> 00:41:03,239
<font color="#E5E5E5">use blah blah blah</font><font color="#CCCCCC"> now to enter</font><font color="#E5E5E5"> the</font>

924
00:41:01,619 --> 00:41:05,339
reference<font color="#E5E5E5"> and here's the stack so right</font>

925
00:41:03,239 --> 00:41:10,170
now we<font color="#E5E5E5"> reproduce this</font><font color="#CCCCCC"> back in a VM</font>

926
00:41:05,339 --> 00:41:10,739
through the USB<font color="#E5E5E5"> fuzzer module and we had</font>

927
00:41:10,170 --> 00:41:14,029
the gun

928
00:41:10,739 --> 00:41:17,609
dummy<font color="#E5E5E5"> drivers loaded in there okay</font>

929
00:41:14,029 --> 00:41:20,730
that's not all<font color="#E5E5E5"> let's keep going we have</font>

930
00:41:17,609 --> 00:41:24,420
some time<font color="#E5E5E5"> okay</font><font color="#CCCCCC"> this is this ours results</font>

931
00:41:20,730 --> 00:41:26,670
that I got and I reported manual around

932
00:41:24,420 --> 00:41:28,710
80 bucks and different subsystems<font color="#CCCCCC"> I'd</font>

933
00:41:26,670 --> 00:41:33,720
say half of<font color="#E5E5E5"> them got fixed half of them</font>

934
00:41:28,710 --> 00:41:35,910
got ignored yeah and<font color="#E5E5E5"> five of the bucks</font>

935
00:41:33,720 --> 00:41:38,848
were in the US before<font color="#CCCCCC"> subsystem which is</font>

936
00:41:35,910 --> 00:41:41,519
kind of cool because well I mean some<font color="#CCCCCC"> of</font>

937
00:41:38,849 --> 00:41:43,680
the devices<font color="#E5E5E5"> some of the boards or some</font>

938
00:41:41,519 --> 00:41:45,779
of the kernels they don't<font color="#E5E5E5"> really have a</font>

939
00:41:43,680 --> 00:41:47,910
<font color="#E5E5E5">lot</font><font color="#CCCCCC"> of drivers</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> you can attack but</font>

940
00:41:45,779 --> 00:41:49,980
they also have the USB<font color="#CCCCCC"> course of</font><font color="#E5E5E5"> system</font>

941
00:41:47,910 --> 00:41:52,019
and if there are<font color="#E5E5E5"> bugs in the</font><font color="#CCCCCC"> core</font>

942
00:41:49,980 --> 00:41:54,799
subsystems like always<font color="#E5E5E5"> trigger all right</font>

943
00:41:52,019 --> 00:41:57,029
even that<font color="#E5E5E5"> you don't have</font><font color="#CCCCCC"> any drivers I</font>

944
00:41:54,799 --> 00:41:59,339
have like a bunch<font color="#CCCCCC"> of more that</font><font color="#E5E5E5"> are not</font>

945
00:41:57,029 --> 00:42:01,079
<font color="#E5E5E5">yet reported but what we want to do is</font>

946
00:41:59,339 --> 00:42:04,499
we want<font color="#E5E5E5"> to integrate this into his boat</font>

947
00:42:01,079 --> 00:42:07,140
and make his bought like report all of

948
00:42:04,499 --> 00:42:08,788
the box and the funny<font color="#CCCCCC"> part is</font><font color="#E5E5E5"> that like</font>

949
00:42:07,140 --> 00:42:09,359
while I was<font color="#E5E5E5"> fighting the stuff I found</font>

950
00:42:08,789 --> 00:42:11,279
<font color="#E5E5E5">12</font>

951
00:42:09,359 --> 00:42:13,920
<font color="#CCCCCC">box in the gadget subsystem because I</font>

952
00:42:11,279 --> 00:42:17,009
was like stressing it and I mean<font color="#E5E5E5"> it was</font>

953
00:42:13,920 --> 00:42:21,359
my my target<font color="#CCCCCC"> it was my tool but it still</font>

954
00:42:17,009 --> 00:42:23,489
<font color="#CCCCCC">crashed so the limitation that we</font><font color="#E5E5E5"> have</font>

955
00:42:21,359 --> 00:42:24,989
is<font color="#E5E5E5"> that it's a</font><font color="#CCCCCC"> personal</font><font color="#E5E5E5"> Linux right</font>

956
00:42:23,489 --> 00:42:27,869
because I mean you have the diamond

957
00:42:24,989 --> 00:42:30,539
<font color="#E5E5E5">stuff and the call approach works on</font>

958
00:42:27,869 --> 00:42:33,960
Linux they're a little more limitations

959
00:42:30,539 --> 00:42:36,299
cause the dummy<font color="#E5E5E5"> drivers II don't support</font>

960
00:42:33,960 --> 00:42:38,670
what is called is a<font color="#E5E5E5"> Chronos transfers</font>

961
00:42:36,299 --> 00:42:41,009
and those are the kind<font color="#E5E5E5"> of transverse</font>

962
00:42:38,670 --> 00:42:43,529
that your<font color="#E5E5E5"> webcam would</font><font color="#CCCCCC"> mean that</font><font color="#E5E5E5"> it was</font>

963
00:42:41,009 --> 00:42:47,609
<font color="#E5E5E5">passed and video</font><font color="#CCCCCC"> feeds through the</font><font color="#E5E5E5"> USB</font>

964
00:42:43,529 --> 00:42:52,259
<font color="#E5E5E5">it's kind of like sorry it kind of</font>

965
00:42:47,609 --> 00:42:54,509
limits<font color="#E5E5E5"> the amount of stuff</font><font color="#CCCCCC"> you can fuzz</font>

966
00:42:52,259 --> 00:42:58,769
like some also it<font color="#E5E5E5"> doesn't really handle</font>

967
00:42:54,509 --> 00:42:59,940
some of the<font color="#CCCCCC"> low-level use be requests so</font>

968
00:42:58,769 --> 00:43:03,359
what I want to<font color="#E5E5E5"> do in the future</font>

969
00:42:59,940 --> 00:43:05,249
first of all mostly so far<font color="#CCCCCC"> pausing</font><font color="#E5E5E5"> the</font>

970
00:43:03,359 --> 00:43:08,308
enumeration process we<font color="#E5E5E5"> want to fast also</font>

971
00:43:05,249 --> 00:43:10,649
subsequent communication so<font color="#E5E5E5"> we want to</font>

972
00:43:08,309 --> 00:43:12,960
fuzzy actually the<font color="#CCCCCC"> packet that the</font>

973
00:43:10,650 --> 00:43:17,039
webcam would pass<font color="#CCCCCC"> as</font><font color="#E5E5E5"> its video feed</font>

974
00:43:12,960 --> 00:43:18,569
right we want to upstream<font color="#CCCCCC"> all of the</font>

975
00:43:17,039 --> 00:43:22,380
stuff that<font color="#E5E5E5"> we have</font><font color="#CCCCCC"> to the kernel</font><font color="#E5E5E5"> I mean</font>

976
00:43:18,569 --> 00:43:25,980
it might<font color="#CCCCCC"> not be upstream in the way it</font>

977
00:43:22,380 --> 00:43:27,390
looks like right<font color="#CCCCCC"> now but I mean we I'm</font>

978
00:43:25,980 --> 00:43:29,579
gonna send the patches to the<font color="#E5E5E5"> upstream</font>

979
00:43:27,390 --> 00:43:32,368
developers and I'll see<font color="#E5E5E5"> what they say</font>

980
00:43:29,579 --> 00:43:34,039
<font color="#E5E5E5">and I mean the whole idea</font><font color="#CCCCCC"> is to</font><font color="#E5E5E5"> also try</font>

981
00:43:32,369 --> 00:43:36,569
to fast<font color="#E5E5E5"> other protocols</font>

982
00:43:34,039 --> 00:43:39,480
besides USB so you have like Wi-Fi you

983
00:43:36,569 --> 00:43:41,430
have energy<font color="#CCCCCC"> you have Bluetooth and stuff</font>

984
00:43:39,480 --> 00:43:45,529
like<font color="#E5E5E5"> that and the kernel also handles</font>

985
00:43:41,430 --> 00:43:48,089
that<font color="#E5E5E5"> okay this is a cool part because</font>

986
00:43:45,529 --> 00:43:50,630
this is what we<font color="#CCCCCC"> train rating hardware</font>

987
00:43:48,089 --> 00:43:53,279
producers for<font color="#E5E5E5"> the bug that we found and</font>

988
00:43:50,630 --> 00:43:55,319
let's take<font color="#E5E5E5"> a look what we</font><font color="#CCCCCC"> just get to is</font>

989
00:43:53,279 --> 00:43:57,599
the<font color="#CCCCCC"> dummy interface this</font><font color="#E5E5E5"> is the demo</font>

990
00:43:55,319 --> 00:44:01,680
that<font color="#E5E5E5"> I just showed when we ran the</font>

991
00:43:57,599 --> 00:44:03,059
<font color="#CCCCCC">Reaper user</font><font color="#E5E5E5"> inside the VM and so I mean</font>

992
00:44:01,680 --> 00:44:05,190
it looks kind of<font color="#CCCCCC"> the same you</font><font color="#E5E5E5"> have his</font>

993
00:44:03,059 --> 00:44:07,950
exact proc you have<font color="#CCCCCC"> fuzzer module gadget</font>

994
00:44:05,190 --> 00:44:11,880
<font color="#CCCCCC">cord I'm a driver</font><font color="#E5E5E5"> USB cord let's</font>

995
00:44:07,950 --> 00:44:13,078
actually look<font color="#E5E5E5"> at so what I have</font><font color="#CCCCCC"> here is</font>

996
00:44:11,880 --> 00:44:17,450
<font color="#CCCCCC">a word that</font><font color="#E5E5E5"> they have here is called</font>

997
00:44:13,079 --> 00:44:20,579
<font color="#E5E5E5">torus by</font><font color="#CCCCCC"> PI 0 right and trust very has a</font>

998
00:44:17,450 --> 00:44:22,109
<font color="#E5E5E5">USB device controller inside of it it's</font>

999
00:44:20,579 --> 00:44:25,079
called DWG<font color="#CCCCCC"> to</font>

1000
00:44:22,109 --> 00:44:27,058
and this is the kind<font color="#E5E5E5"> of like thing you</font>

1001
00:44:25,079 --> 00:44:28,859
would normally use<font color="#E5E5E5"> Raspberry</font><font color="#CCCCCC"> Pi</font><font color="#E5E5E5"> for so</font>

1002
00:44:27,059 --> 00:44:31,950
they're like a bunch<font color="#E5E5E5"> of</font><font color="#CCCCCC"> tutorials online</font>

1003
00:44:28,859 --> 00:44:34,170
on how<font color="#CCCCCC"> you can emulate a keyboard on</font><font color="#E5E5E5"> a</font>

1004
00:44:31,950 --> 00:44:36,029
Raspberry Pi zero<font color="#CCCCCC"> so you can like use</font>

1005
00:44:34,170 --> 00:44:38,720
graduate affairs and write the keyboard

1006
00:44:36,029 --> 00:44:41,190
as a user space<font color="#CCCCCC"> app or there are some</font>

1007
00:44:38,720 --> 00:44:46,038
standard modules that<font color="#E5E5E5"> would allow you to</font>

1008
00:44:41,190 --> 00:44:48,059
<font color="#CCCCCC">do it</font><font color="#E5E5E5"> inside the kernel like entry heat</font>

1009
00:44:46,039 --> 00:44:54,269
module that<font color="#E5E5E5"> you can just load and it's</font>

1010
00:44:48,059 --> 00:44:56,099
going<font color="#E5E5E5"> to be a keyboard okay so let's do</font>

1011
00:44:54,269 --> 00:44:57,930
this let's<font color="#E5E5E5"> take Raspberry Pi</font><font color="#CCCCCC"> zero and</font>

1012
00:44:56,099 --> 00:44:59,730
instead of<font color="#E5E5E5"> graduate FS and Carolyn</font>

1013
00:44:57,930 --> 00:45:02,460
device module<font color="#E5E5E5"> we're gonna load or use</font>

1014
00:44:59,730 --> 00:45:04,829
beef either kernel module and at this

1015
00:45:02,460 --> 00:45:07,049
<font color="#E5E5E5">point we can actually use our exact</font>

1016
00:45:04,829 --> 00:45:10,259
<font color="#E5E5E5">truck tool because I mean it uses the</font>

1017
00:45:07,049 --> 00:45:11,788
same interface and we also have some<font color="#E5E5E5"> USB</font>

1018
00:45:10,259 --> 00:45:14,730
host and you can actually<font color="#E5E5E5"> plug the</font>

1019
00:45:11,789 --> 00:45:16,410
Raspberry Pi<font color="#CCCCCC"> 0 into a host</font><font color="#E5E5E5"> and this is a</font>

1020
00:45:14,730 --> 00:45:18,239
<font color="#E5E5E5">hole ID you can just run the</font><font color="#CCCCCC"> same</font>

1021
00:45:16,410 --> 00:45:23,730
reducer while your Raspberry Pi

1022
00:45:18,239 --> 00:45:26,989
<font color="#E5E5E5">connected</font><font color="#CCCCCC"> to a host ok let's try</font><font color="#E5E5E5"> to show</font>

1023
00:45:23,730 --> 00:45:26,989
the demo<font color="#E5E5E5"> give me a second</font>

1024
00:45:27,349 --> 00:45:35,069
so what I have<font color="#CCCCCC"> here is I have a</font><font color="#E5E5E5"> camera</font>

1025
00:45:32,430 --> 00:45:48,989
<font color="#CCCCCC">that's set up to capture</font><font color="#E5E5E5"> my laptop</font>

1026
00:45:35,069 --> 00:45:50,910
screen<font color="#E5E5E5"> and so yeah and right here I'm</font>

1027
00:45:48,989 --> 00:45:53,309
gonna try<font color="#CCCCCC"> to show it while the camera I</font>

1028
00:45:50,910 --> 00:45:57,210
have a Raspberry Pi that's just

1029
00:45:53,309 --> 00:46:01,549
connected<font color="#CCCCCC"> to my laptop</font><font color="#E5E5E5"> over</font><font color="#CCCCCC"> a USB wire</font>

1030
00:45:57,210 --> 00:46:01,549
right<font color="#E5E5E5"> here right</font><font color="#CCCCCC"> I hope you can see it</font>

1031
00:46:09,059 --> 00:46:18,190
so at this point we're<font color="#E5E5E5"> gonna wait for</font><font color="#CCCCCC"> it</font>

1032
00:46:11,619 --> 00:46:20,049
to get so yeah and these<font color="#CCCCCC"> we I mean</font>

1033
00:46:18,190 --> 00:46:21,609
<font color="#E5E5E5">Raspberry Pi</font><font color="#CCCCCC"> zero it actually exposes</font>

1034
00:46:20,049 --> 00:46:23,920
your art interface through some of the

1035
00:46:21,609 --> 00:46:28,089
<font color="#E5E5E5">pins so you can just</font><font color="#CCCCCC"> hook up a USB</font>

1036
00:46:23,920 --> 00:46:29,849
<font color="#CCCCCC">serial adapter and basically get just</font>

1037
00:46:28,089 --> 00:46:35,650
get<font color="#CCCCCC"> the shell on the Raspberry Pi zero</font>

1038
00:46:29,849 --> 00:46:38,880
<font color="#E5E5E5">like through through yard and actually</font>

1039
00:46:35,650 --> 00:46:41,319
at this<font color="#E5E5E5"> point we can also see that the</font>

1040
00:46:38,880 --> 00:46:44,230
laptop actual detect<font color="#E5E5E5"> that it has some</font>

1041
00:46:41,319 --> 00:46:47,200
device connected<font color="#CCCCCC"> to it but it can't</font><font color="#E5E5E5"> Eric</font>

1042
00:46:44,230 --> 00:46:51,150
in countries if any descriptors<font color="#CCCCCC"> cause</font>

1043
00:46:47,200 --> 00:46:51,149
our device<font color="#E5E5E5"> just does reply</font>

1044
00:46:58,089 --> 00:47:04,599
<font color="#E5E5E5">okay we have a shell so let's first</font>

1045
00:47:01,369 --> 00:47:07,369
let's insert the<font color="#E5E5E5"> module that we have for</font>

1046
00:47:04,599 --> 00:47:09,650
<font color="#E5E5E5">to to implement</font><font color="#CCCCCC"> I mean to provide the</font>

1047
00:47:07,369 --> 00:47:12,950
interface for<font color="#E5E5E5"> your space and now we can</font>

1048
00:47:09,650 --> 00:47:16,269
<font color="#E5E5E5">just run one of the reproducers so I'm</font>

1049
00:47:12,950 --> 00:47:18,009
gonna<font color="#E5E5E5"> run the same ESB SMS USB stuff</font>

1050
00:47:16,269 --> 00:47:21,618
<font color="#E5E5E5">okay</font>

1051
00:47:18,009 --> 00:47:24,079
let's see what happens<font color="#CCCCCC"> so what happens</font>

1052
00:47:21,619 --> 00:47:26,029
right<font color="#E5E5E5"> now is that I mean I'm not sure if</font>

1053
00:47:24,079 --> 00:47:28,910
you<font color="#E5E5E5"> saw but we got a bunch of new lines</font>

1054
00:47:26,029 --> 00:47:31,279
on the screen<font color="#E5E5E5"> of our computer and the</font>

1055
00:47:28,910 --> 00:47:33,828
bug didn't trigger there is a reason why

1056
00:47:31,279 --> 00:47:37,849
<font color="#CCCCCC">that didn't happen and</font><font color="#E5E5E5"> the reason is</font>

1057
00:47:33,829 --> 00:47:41,990
that it's<font color="#CCCCCC"> actually didn't go all the way</font>

1058
00:47:37,849 --> 00:47:44,480
down I<font color="#E5E5E5"> think we did</font><font color="#CCCCCC"> okay the reason is</font>

1059
00:47:41,990 --> 00:47:47,959
that the use SMS USB module wasn't

1060
00:47:44,480 --> 00:47:50,420
actually loaded but right now it says

1061
00:47:47,960 --> 00:47:51,740
like<font color="#CCCCCC"> you</font><font color="#E5E5E5"> speaker and our furniture I</font>

1062
00:47:50,420 --> 00:47:53,630
mean right now<font color="#E5E5E5"> I</font><font color="#CCCCCC"> just</font><font color="#E5E5E5"> have like a</font>

1063
00:47:51,740 --> 00:47:57,319
hard-coded hard-coded<font color="#CCCCCC"> timeout for one</font>

1064
00:47:53,630 --> 00:47:58,490
second and it<font color="#CCCCCC"> just in it like</font><font color="#E5E5E5"> wasn't</font>

1065
00:47:57,319 --> 00:48:00,170
fast enough cause<font color="#E5E5E5"> the USB device</font>

1066
00:47:58,490 --> 00:48:01,970
<font color="#E5E5E5">disconnected before</font><font color="#CCCCCC"> the module loaded</font>

1067
00:48:00,170 --> 00:48:04,609
<font color="#CCCCCC">and this is actually what you have to</font>

1068
00:48:01,970 --> 00:48:07,640
take care of<font color="#E5E5E5"> if you fast is the</font><font color="#CCCCCC"> Unreal</font>

1069
00:48:04,609 --> 00:48:09,558
devices cause<font color="#CCCCCC"> for modules for drivers</font>

1070
00:48:07,640 --> 00:48:12,410
that I not low that it will take<font color="#E5E5E5"> them</font>

1071
00:48:09,559 --> 00:48:13,940
longer<font color="#CCCCCC"> to below that initialized than</font>

1072
00:48:12,410 --> 00:48:17,769
for the modules that<font color="#E5E5E5"> are already in</font>

1073
00:48:13,940 --> 00:48:22,749
there<font color="#CCCCCC"> so let's try it</font><font color="#E5E5E5"> the second time</font>

1074
00:48:17,769 --> 00:48:22,749
<font color="#E5E5E5">boom it's right now</font>

1075
00:48:28,550 --> 00:48:32,820
<font color="#CCCCCC">see what we got here</font>

1076
00:48:30,360 --> 00:48:37,350
<font color="#CCCCCC">easier uses Bach over a raspberry for</font>

1077
00:48:32,820 --> 00:48:38,250
<font color="#CCCCCC">your right on a real</font><font color="#E5E5E5"> hard</font><font color="#CCCCCC"> layer the</font>

1078
00:48:37,350 --> 00:48:41,100
<font color="#CCCCCC">kernel I mean</font>

1079
00:48:38,250 --> 00:48:43,200
so when Linux kernel crashes sometimes

1080
00:48:41,100 --> 00:48:45,029
it<font color="#E5E5E5"> does really crash and here we</font>

1081
00:48:43,200 --> 00:48:48,569
<font color="#E5E5E5">actually just crashed the background</font>

1082
00:48:45,030 --> 00:48:51,450
<font color="#CCCCCC">threat that handles the yeast video Isis</font>

1083
00:48:48,570 --> 00:48:53,040
and I mean it's not<font color="#E5E5E5"> really graphic when</font>

1084
00:48:51,450 --> 00:48:55,710
the Linux kernel crashes because<font color="#E5E5E5"> he</font>

1085
00:48:53,040 --> 00:48:59,009
either get a freeze or something just

1086
00:48:55,710 --> 00:49:03,050
like your laptop turns turns off or

1087
00:48:59,010 --> 00:49:17,040
something like this happens right<font color="#CCCCCC"> okay</font>

1088
00:49:03,050 --> 00:49:20,000
give me<font color="#E5E5E5"> a second</font><font color="#CCCCCC"> okay we have six</font>

1089
00:49:17,040 --> 00:49:22,020
minutes<font color="#CCCCCC"> we should be good so</font><font color="#E5E5E5"> some bonus</font>

1090
00:49:20,000 --> 00:49:26,900
at this point we can do something<font color="#CCCCCC"> else</font>

1091
00:49:22,020 --> 00:49:29,250
<font color="#CCCCCC">so yeah</font><font color="#E5E5E5"> after</font><font color="#CCCCCC"> we fast</font><font color="#E5E5E5"> the Linux kernel</font>

1092
00:49:26,900 --> 00:49:32,070
<font color="#E5E5E5">we collected some coverage and we've got</font>

1093
00:49:29,250 --> 00:49:33,210
a corpus of these video<font color="#CCCCCC"> vices</font><font color="#E5E5E5"> and we can</font>

1094
00:49:32,070 --> 00:49:35,760
actually<font color="#E5E5E5"> we actually have a way</font><font color="#CCCCCC"> to</font>

1095
00:49:33,210 --> 00:49:38,130
execute<font color="#E5E5E5"> those kind of like devices or</font>

1096
00:49:35,760 --> 00:49:40,590
programs why are as<font color="#E5E5E5"> we're prize so</font><font color="#CCCCCC"> I'll</font>

1097
00:49:38,130 --> 00:49:43,050
<font color="#E5E5E5">just connect it to windows cost and try</font>

1098
00:49:40,590 --> 00:49:46,590
to run<font color="#E5E5E5"> all the USB programs that we</font><font color="#CCCCCC"> have</font>

1099
00:49:43,050 --> 00:49:48,360
and the cool thing that<font color="#E5E5E5"> I also wanted to</font>

1100
00:49:46,590 --> 00:49:53,010
<font color="#E5E5E5">do here is to get rid</font><font color="#CCCCCC"> of all the wires</font>

1101
00:49:48,360 --> 00:49:54,600
<font color="#E5E5E5">because right now I mean you have I have</font>

1102
00:49:53,010 --> 00:49:56,730
like a bunch<font color="#E5E5E5"> of stuff in there so you</font>

1103
00:49:54,600 --> 00:49:58,279
<font color="#CCCCCC">have to plug in stuff and I</font><font color="#E5E5E5"> mean you</font>

1104
00:49:56,730 --> 00:50:00,660
<font color="#E5E5E5">have all these wires connecting stuff</font>

1105
00:49:58,280 --> 00:50:02,490
<font color="#E5E5E5">the idea is very simple let's take not</font>

1106
00:50:00,660 --> 00:50:04,770
the<font color="#CCCCCC"> five-dollar Raspberry Pi but the</font><font color="#E5E5E5"> ten</font>

1107
00:50:02,490 --> 00:50:08,129
bucks<font color="#E5E5E5"> for verify and it has five</font><font color="#CCCCCC"> onboard</font>

1108
00:50:04,770 --> 00:50:08,610
<font color="#E5E5E5">and</font><font color="#CCCCCC"> we</font><font color="#E5E5E5"> can set</font><font color="#CCCCCC"> up a Wi-Fi hotspot and we</font>

1109
00:50:08,130 --> 00:50:12,060
can just

1110
00:50:08,610 --> 00:50:15,510
SSH to it right and what<font color="#E5E5E5"> I also found</font>

1111
00:50:12,060 --> 00:50:17,340
very<font color="#E5E5E5"> nice</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> that the resisting that's</font>

1112
00:50:15,510 --> 00:50:19,680
called<font color="#CCCCCC"> zero spam and it's kind of like a</font>

1113
00:50:17,340 --> 00:50:22,530
small<font color="#CCCCCC"> PCB you can just solder</font><font color="#E5E5E5"> on</font><font color="#CCCCCC"> to your</font>

1114
00:50:19,680 --> 00:50:25,529
Raspberry Pi<font color="#CCCCCC"> zero and it just turns it's</font>

1115
00:50:22,530 --> 00:50:29,820
kind of like a flash drive a<font color="#E5E5E5"> little bit</font>

1116
00:50:25,530 --> 00:50:33,740
bigger but yeah<font color="#CCCCCC"> okay let's try to</font><font color="#E5E5E5"> do</font>

1117
00:50:29,820 --> 00:50:33,740
this<font color="#E5E5E5"> give me</font><font color="#CCCCCC"> a second</font>

1118
00:50:37,910 --> 00:50:44,790
<font color="#E5E5E5">okay here I have a laptop with windows</font>

1119
00:50:41,130 --> 00:50:46,410
10<font color="#E5E5E5"> and what I have plugged in here is</font>

1120
00:50:44,790 --> 00:50:49,590
the same<font color="#E5E5E5"> thing that I just shown you</font>

1121
00:50:46,410 --> 00:50:56,250
it's a Raspberry Pi that<font color="#E5E5E5"> is</font><font color="#CCCCCC"> v-0 stem and</font>

1122
00:50:49,590 --> 00:51:05,210
direct no wires<font color="#CCCCCC"> I just plugged in okay</font>

1123
00:50:56,250 --> 00:51:08,210
<font color="#CCCCCC">each should have set up a Wi-Fi hotspot</font>

1124
00:51:05,210 --> 00:51:08,210
<font color="#E5E5E5">oops</font>

1125
00:51:10,250 --> 00:51:13,670
don't see it<font color="#E5E5E5"> yet</font>

1126
00:51:17,010 --> 00:51:33,210
I think I did<font color="#E5E5E5"> maybe I'll need to move it</font>

1127
00:51:24,180 --> 00:51:36,390
closer<font color="#E5E5E5"> amateur</font><font color="#CCCCCC"> oh yeah perfect</font>

1128
00:51:33,210 --> 00:51:39,060
that's one for some<font color="#CCCCCC"> reason when you</font>

1129
00:51:36,390 --> 00:51:41,790
follow the default tutorial to connect

1130
00:51:39,060 --> 00:51:44,250
over<font color="#E5E5E5"> Wi-Fi to</font><font color="#CCCCCC"> Raspberry Pi to set up a</font>

1131
00:51:41,790 --> 00:51:45,779
Wi-Fi hotspot<font color="#CCCCCC"> it doesn't connect from</font>

1132
00:51:44,250 --> 00:51:47,550
<font color="#E5E5E5">the first time you need</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> keep retrying</font>

1133
00:51:45,780 --> 00:51:51,650
for a few times<font color="#E5E5E5"> and then it just works</font><font color="#CCCCCC"> I</font>

1134
00:51:47,550 --> 00:52:03,000
don't know<font color="#E5E5E5"> why haven't hear that out so</font>

1135
00:51:51,650 --> 00:52:07,380
yeah right<font color="#CCCCCC"> here's the</font><font color="#E5E5E5"> camera and here's</font>

1136
00:52:03,000 --> 00:52:13,140
the SS<font color="#CCCCCC"> agency have into our board right</font>

1137
00:52:07,380 --> 00:52:14,580
<font color="#CCCCCC">insurance a bit perfect what you're</font>

1138
00:52:13,140 --> 00:52:16,770
gonna do<font color="#E5E5E5"> is also gonna insert the module</font>

1139
00:52:14,580 --> 00:52:19,890
<font color="#E5E5E5">and you're gonna do it</font><font color="#CCCCCC"> just</font><font color="#E5E5E5"> the same</font>

1140
00:52:16,770 --> 00:52:22,109
stuff we're<font color="#E5E5E5"> gonna run a retro and the</font>

1141
00:52:19,890 --> 00:52:25,470
driver so I ran<font color="#E5E5E5"> the whole corpus that I</font>

1142
00:52:22,109 --> 00:52:28,920
have and I think<font color="#CCCCCC"> I saw two crashes</font><font color="#E5E5E5"> they</font>

1143
00:52:25,470 --> 00:52:31,259
have one<font color="#E5E5E5"> of them here and I call it</font><font color="#CCCCCC"> FTDI</font>

1144
00:52:28,920 --> 00:52:33,560
<font color="#CCCCCC">busted lock</font><font color="#E5E5E5"> let's try to run it and see</font>

1145
00:52:31,260 --> 00:52:33,560
<font color="#E5E5E5">what happens</font>

1146
00:52:38,630 --> 00:52:49,149
[Applause]

1147
00:52:50,069 --> 00:52:57,209
<font color="#E5E5E5">okay that was it thank you all</font><font color="#CCCCCC"> for</font>

1148
00:52:53,439 --> 00:52:57,209
coming<font color="#CCCCCC"> and if you have any questions</font>

1149
00:52:57,790 --> 00:53:07,090
[Applause]

1150
00:53:14,180 --> 00:53:19,788
type<font color="#CCCCCC"> great talk one question you said</font>

1151
00:53:17,690 --> 00:53:21,799
with that<font color="#CCCCCC"> half of the box</font><font color="#E5E5E5"> you found</font>

1152
00:53:19,789 --> 00:53:24,770
<font color="#CCCCCC">we're ignored by the colonel upstreaming</font>

1153
00:53:21,799 --> 00:53:25,150
team do<font color="#E5E5E5"> you know the reason why they did</font>

1154
00:53:24,770 --> 00:53:30,170
that

1155
00:53:25,150 --> 00:53:32,119
yeah<font color="#E5E5E5"> I'd say I'm dry fusion sometimes</font>

1156
00:53:30,170 --> 00:53:33,920
<font color="#CCCCCC">bugs just</font><font color="#E5E5E5"> get lost on the mailing list</font>

1157
00:53:32,119 --> 00:53:36,950
<font color="#CCCCCC">that</font><font color="#E5E5E5"> I mean that could be</font><font color="#CCCCCC"> it</font>

1158
00:53:33,920 --> 00:53:38,839
another reason<font color="#E5E5E5"> is that in Linux there</font>

1159
00:53:36,950 --> 00:53:40,730
<font color="#CCCCCC">are a lot of drivers</font><font color="#E5E5E5"> that are not</font>

1160
00:53:38,839 --> 00:53:44,150
actually maintained in<font color="#E5E5E5"> him or by anybody</font>

1161
00:53:40,730 --> 00:53:47,059
and I mean<font color="#CCCCCC"> you sent an email to people</font>

1162
00:53:44,150 --> 00:53:49,069
<font color="#E5E5E5">who are like listed as maintainer of</font>

1163
00:53:47,059 --> 00:53:51,680
these drivers but they're like emails

1164
00:53:49,069 --> 00:53:53,150
<font color="#E5E5E5">don't work anymore for example</font><font color="#CCCCCC"> or they</font>

1165
00:53:51,680 --> 00:53:55,399
just don't reply<font color="#CCCCCC"> to you because I</font><font color="#E5E5E5"> mean</font>

1166
00:53:53,150 --> 00:53:57,380
they<font color="#E5E5E5"> Dvorkin the stuff</font><font color="#CCCCCC"> fifteen years ago</font>

1167
00:53:55,400 --> 00:53:57,829
and then don't<font color="#CCCCCC"> anymore so they don't</font>

1168
00:53:57,380 --> 00:54:01,760
care

1169
00:53:57,829 --> 00:54:03,789
and<font color="#E5E5E5"> yeah I say those are two main</font>

1170
00:54:01,760 --> 00:54:03,789
reasons

1171
00:54:18,349 --> 00:54:22,729
thank you thank<font color="#E5E5E5"> you for</font><font color="#CCCCCC"> your</font><font color="#E5E5E5"> talk</font>

1172
00:54:20,420 --> 00:54:25,849
support you haven't looked at exploiting

1173
00:54:22,729 --> 00:54:29,149
<font color="#CCCCCC">bugs but from your experience in fuzzing</font>

1174
00:54:25,849 --> 00:54:30,799
USB and USB do you think<font color="#E5E5E5"> USB bugs are</font>

1175
00:54:29,150 --> 00:54:32,749
not<font color="#E5E5E5"> easy to exploit because I mean from</font>

1176
00:54:30,799 --> 00:54:36,279
<font color="#E5E5E5">the browser you have like scripting</font>

1177
00:54:32,749 --> 00:54:39,979
languages to exploit the bugs with help

1178
00:54:36,279 --> 00:54:42,049
so I<font color="#E5E5E5"> can reply to this question</font><font color="#CCCCCC"> about</font>

1179
00:54:39,979 --> 00:54:44,209
Linux right because I was<font color="#E5E5E5"> doing mostly</font>

1180
00:54:42,049 --> 00:54:46,969
work on Linux<font color="#CCCCCC"> and I'd say it's possible</font>

1181
00:54:44,209 --> 00:54:49,910
<font color="#E5E5E5">but I can say</font><font color="#CCCCCC"> that it should be easier</font>

1182
00:54:46,969 --> 00:54:53,630
so it depends on<font color="#E5E5E5"> the</font><font color="#CCCCCC"> bug for</font><font color="#E5E5E5"> the bug</font>

1183
00:54:49,910 --> 00:54:55,549
<font color="#E5E5E5">that I've looked at mostly</font><font color="#CCCCCC"> I mean if I</font>

1184
00:54:53,630 --> 00:54:57,469
wanted<font color="#E5E5E5"> to exploit some</font><font color="#CCCCCC"> of them that</font>

1185
00:54:55,549 --> 00:54:59,299
<font color="#E5E5E5">would probably be some double free or</font>

1186
00:54:57,469 --> 00:55:01,940
some some kind<font color="#CCCCCC"> of</font><font color="#E5E5E5"> memory corruption like</font>

1187
00:54:59,299 --> 00:55:03,650
that<font color="#CCCCCC"> and for</font><font color="#E5E5E5"> that you need to like crepe</font>

1188
00:55:01,940 --> 00:55:06,589
heap and do<font color="#E5E5E5"> this kind of stuff which</font>

1189
00:55:03,650 --> 00:55:08,890
isn't really easy<font color="#E5E5E5"> over USB continuing</font>

1190
00:55:06,589 --> 00:55:11,660
<font color="#E5E5E5">that the kernel is multi-threaded</font><font color="#CCCCCC"> and I</font>

1191
00:55:08,890 --> 00:55:13,848
mean you can look like limited in the

1192
00:55:11,660 --> 00:55:14,209
amount of<font color="#E5E5E5"> interaction you can have</font><font color="#CCCCCC"> with</font>

1193
00:55:13,849 --> 00:55:17,180
it

1194
00:55:14,209 --> 00:55:18,979
it should<font color="#E5E5E5"> be</font><font color="#CCCCCC"> possible</font><font color="#E5E5E5"> I don't think it</font>

1195
00:55:17,180 --> 00:55:22,549
will be very<font color="#E5E5E5"> reliable</font><font color="#CCCCCC"> for this kind of</font>

1196
00:55:18,979 --> 00:55:24,229
box<font color="#CCCCCC"> but yeah but I mean if you have some</font>

1197
00:55:22,549 --> 00:55:26,150
some<font color="#CCCCCC"> very good</font><font color="#E5E5E5"> bug yet that gives you</font>

1198
00:55:24,229 --> 00:55:28,180
like arbitrary reach right of course I

1199
00:55:26,150 --> 00:55:28,180
am

1200
00:55:36,320 --> 00:55:41,090
I think of the<font color="#CCCCCC"> token</font><font color="#E5E5E5"> when</font><font color="#CCCCCC"> you were</font>

1201
00:55:38,000 --> 00:55:42,440
<font color="#CCCCCC">talking about integrating sending of USB</font>

1202
00:55:41,090 --> 00:55:45,170
<font color="#E5E5E5">packets to inject them into the kernel</font>

1203
00:55:42,440 --> 00:55:50,210
<font color="#CCCCCC">did you consider</font><font color="#E5E5E5"> USB IEP or it was not</font>

1204
00:55:45,170 --> 00:55:51,950
suitable<font color="#CCCCCC"> I looked at it and I mean I've</font>

1205
00:55:50,210 --> 00:55:55,040
looked<font color="#E5E5E5"> at ESB idea and I've looked at</font>

1206
00:55:51,950 --> 00:55:57,620
thing that called the<font color="#CCCCCC"> HDI I think but I</font>

1207
00:55:55,040 --> 00:56:00,380
mean I don't<font color="#E5E5E5"> think this</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> the same</font>

1208
00:55:57,620 --> 00:56:02,120
thing<font color="#E5E5E5"> or very similar but some for some</font>

1209
00:56:00,380 --> 00:56:05,470
reason I<font color="#E5E5E5"> ended up with this approach I</font>

1210
00:56:02,120 --> 00:56:08,420
can't give you<font color="#CCCCCC"> all the details</font><font color="#E5E5E5"> I'd say</font>

1211
00:56:05,470 --> 00:56:10,850
my<font color="#CCCCCC"> my feeling</font><font color="#E5E5E5"> told me that</font><font color="#CCCCCC"> it'll be</font>

1212
00:56:08,420 --> 00:56:12,320
<font color="#E5E5E5">easier</font><font color="#CCCCCC"> to do</font><font color="#E5E5E5"> because it has the</font><font color="#CCCCCC"> client</font>

1213
00:56:10,850 --> 00:56:21,020
<font color="#CCCCCC">side the device side in the whole size</font>

1214
00:56:12,320 --> 00:56:23,510
<font color="#CCCCCC">yeah you know I know thank you anybody</font>

1215
00:56:21,020 --> 00:56:34,340
else if you<font color="#E5E5E5"> have please keep the hand</font>

1216
00:56:23,510 --> 00:56:36,160
open thank you very nice talk and thank

1217
00:56:34,340 --> 00:56:41,540
<font color="#E5E5E5">you for the shout out to phase dancer</font>

1218
00:56:36,160 --> 00:56:46,370
<font color="#E5E5E5">Travis were here I'm sure to hear it how</font>

1219
00:56:41,540 --> 00:56:50,920
did<font color="#CCCCCC"> you find the raspberry PI's</font><font color="#E5E5E5"> USB</font>

1220
00:56:46,370 --> 00:56:55,040
controller<font color="#E5E5E5"> if</font><font color="#CCCCCC"> his dancer used the max 32</font>

1221
00:56:50,920 --> 00:56:58,090
<font color="#CCCCCC">3421 which was not always compliant</font><font color="#E5E5E5"> but</font>

1222
00:56:55,040 --> 00:57:00,259
for<font color="#CCCCCC"> example it</font><font color="#E5E5E5"> would send necks</font>

1223
00:56:58,090 --> 00:57:05,300
<font color="#CCCCCC">continually so that he didn't</font><font color="#E5E5E5"> have the</font>

1224
00:57:00,260 --> 00:57:06,800
<font color="#E5E5E5">timeouts as much this did the Raspberry</font>

1225
00:57:05,300 --> 00:57:10,670
Pi controller

1226
00:57:06,800 --> 00:57:13,130
you know<font color="#CCCCCC"> proved more amenable so what I</font>

1227
00:57:10,670 --> 00:57:15,680
actually wanted<font color="#CCCCCC"> to have is</font><font color="#E5E5E5"> something</font>

1228
00:57:13,130 --> 00:57:17,780
very very cheap right<font color="#CCCCCC"> and I say this is</font>

1229
00:57:15,680 --> 00:57:20,540
<font color="#E5E5E5">the approach they took and this thing</font>

1230
00:57:17,780 --> 00:57:23,420
costs<font color="#CCCCCC"> five bucks</font><font color="#E5E5E5"> and it has some device</font>

1231
00:57:20,540 --> 00:57:25,970
controller<font color="#E5E5E5"> and basically that's that's</font>

1232
00:57:23,420 --> 00:57:28,790
why I took it<font color="#E5E5E5"> I mean I've tried that if</font>

1233
00:57:25,970 --> 00:57:30,919
it I mean if it happened that it doesn't

1234
00:57:28,790 --> 00:57:32,779
work I would choose something else<font color="#E5E5E5"> but</font>

1235
00:57:30,920 --> 00:57:34,940
the whole<font color="#E5E5E5"> idea</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> that I wanted</font>

1236
00:57:32,780 --> 00:57:36,590
something<font color="#E5E5E5"> with Linux and I wanted</font>

1237
00:57:34,940 --> 00:57:41,560
something cheap<font color="#E5E5E5"> and I wanted something</font>

1238
00:57:36,590 --> 00:57:41,560
<font color="#CCCCCC">with a USB</font><font color="#E5E5E5"> device controller that's</font>

1239
00:57:44,339 --> 00:57:51,580
obviously it's good enough at parsing

1240
00:57:46,480 --> 00:57:53,530
raw messages it's like a<font color="#E5E5E5"> rocket you know</font>

1241
00:57:51,580 --> 00:57:58,770
can we<font color="#E5E5E5"> do this like the IEP way where</font>

1242
00:57:53,530 --> 00:58:02,470
there are<font color="#CCCCCC"> circuits</font><font color="#E5E5E5"> but is it more</font>

1243
00:57:58,770 --> 00:58:06,580
forgiving<font color="#E5E5E5"> or less forgiving than</font><font color="#CCCCCC"> phased</font>

1244
00:58:02,470 --> 00:58:11,348
answer over they of the malformed<font color="#CCCCCC"> ESB</font>

1245
00:58:06,580 --> 00:58:14,910
packets then<font color="#E5E5E5"> I don't think</font><font color="#CCCCCC"> any of them</font>

1246
00:58:11,349 --> 00:58:17,440
care<font color="#E5E5E5"> I mean they just pass messages so</font>

1247
00:58:14,910 --> 00:58:19,270
as far<font color="#CCCCCC"> as I understand phased answer</font>

1248
00:58:17,440 --> 00:58:23,170
actually allows you<font color="#CCCCCC"> more low-level</font>

1249
00:58:19,270 --> 00:58:25,270
<font color="#CCCCCC">control of the</font><font color="#E5E5E5"> USB</font><font color="#CCCCCC"> communication because</font>

1250
00:58:23,170 --> 00:58:27,130
some parts of the<font color="#E5E5E5"> communication is</font>

1251
00:58:25,270 --> 00:58:28,630
actually handled by the gadget subsystem

1252
00:58:27,130 --> 00:58:30,640
so they have some low-level<font color="#E5E5E5"> requests</font>

1253
00:58:28,630 --> 00:58:32,589
such as they<font color="#E5E5E5"> are not fast to see higher</font>

1254
00:58:30,640 --> 00:58:35,710
layers with phased answer you can

1255
00:58:32,589 --> 00:58:39,460
actually<font color="#E5E5E5"> fast those as well but I mean</font>

1256
00:58:35,710 --> 00:58:40,869
both things they<font color="#CCCCCC"> just pass messages</font><font color="#E5E5E5"> I</font><font color="#CCCCCC"> do</font>

1257
00:58:39,460 --> 00:58:48,720
<font color="#E5E5E5">think that you mentioned about</font><font color="#CCCCCC"> necks I'm</font>

1258
00:58:40,869 --> 00:58:48,720
not sure about that so thank you

