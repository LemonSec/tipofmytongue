1
00:00:00,840 --> 00:00:06,870
[Applause]

2
00:00:05,040 --> 00:00:10,759
hello and welcome<font color="#E5E5E5"> to my talk about</font>

3
00:00:06,870 --> 00:00:13,379
<font color="#CCCCCC">chrome IPC</font><font color="#E5E5E5"> and chrome exploitation</font>

4
00:00:10,759 --> 00:00:16,020
<font color="#CCCCCC">coming from a from an exploit render</font>

5
00:00:13,380 --> 00:00:17,760
from<font color="#E5E5E5"> a compromised renderer and</font><font color="#CCCCCC"> actually</font>

6
00:00:16,020 --> 00:00:19,710
the fact<font color="#E5E5E5"> that I</font><font color="#CCCCCC"> will be using as an</font>

7
00:00:17,760 --> 00:00:21,840
<font color="#E5E5E5">example is the one that natch has talked</font>

8
00:00:19,710 --> 00:00:23,850
about<font color="#E5E5E5"> so you know heard about a lot</font>

9
00:00:21,840 --> 00:00:26,519
about<font color="#E5E5E5"> discovering bugs and this is more</font>

10
00:00:23,850 --> 00:00:30,260
gonna be about<font color="#E5E5E5"> exploit primitives and</font>

11
00:00:26,519 --> 00:00:30,259
actually writing<font color="#E5E5E5"> an exploit</font><font color="#CCCCCC"> for</font><font color="#E5E5E5"> Chrome</font>

12
00:00:30,349 --> 00:00:35,850
so net from this<font color="#E5E5E5"> bug in July last year</font>

13
00:00:33,180 --> 00:00:37,079
<font color="#E5E5E5">and he wanted to participate in the heck</font>

14
00:00:35,850 --> 00:00:39,120
to win contest which was<font color="#E5E5E5"> in September</font>

15
00:00:37,079 --> 00:00:43,079
<font color="#E5E5E5">for but for that he needed a full</font>

16
00:00:39,120 --> 00:00:44,218
exploit for this<font color="#E5E5E5"> and since it was pretty</font>

17
00:00:43,079 --> 00:00:46,260
<font color="#E5E5E5">there was a pretty short</font><font color="#CCCCCC"> amount of time</font>

18
00:00:44,219 --> 00:00:49,379
<font color="#E5E5E5">left we decided to join</font><font color="#CCCCCC"> forces on</font><font color="#E5E5E5"> that</font>

19
00:00:46,260 --> 00:00:51,180
<font color="#CCCCCC">and write the exploit together</font><font color="#E5E5E5"> and at</font>

20
00:00:49,379 --> 00:00:52,860
that<font color="#E5E5E5"> point our</font><font color="#CCCCCC"> target was windows here</font>

21
00:00:51,180 --> 00:00:55,289
and net had never done any windows

22
00:00:52,860 --> 00:00:58,469
exploitation while I<font color="#E5E5E5"> never had done any</font>

23
00:00:55,289 --> 00:01:01,109
<font color="#E5E5E5">chrome exploitation so it was so we both</font>

24
00:00:58,469 --> 00:01:02,399
learned a lot from that<font color="#E5E5E5"> so this talk is</font>

25
00:01:01,109 --> 00:01:07,799
<font color="#CCCCCC">going</font><font color="#E5E5E5"> to be about how we approach this</font>

26
00:01:02,399 --> 00:01:09,210
problem<font color="#CCCCCC"> coming from a bit</font><font color="#E5E5E5"> of a lacking</font>

27
00:01:07,799 --> 00:01:12,450
knowledge<font color="#E5E5E5"> base because</font><font color="#CCCCCC"> we never</font><font color="#E5E5E5"> really</font>

28
00:01:09,210 --> 00:01:13,759
done work<font color="#E5E5E5"> in this area</font><font color="#CCCCCC"> before and</font>

29
00:01:12,450 --> 00:01:20,759
hopefully you will<font color="#CCCCCC"> find it</font><font color="#E5E5E5"> useful maybe</font>

30
00:01:13,760 --> 00:01:22,110
for your<font color="#E5E5E5"> own bugs just a quick recap</font>

31
00:01:20,759 --> 00:01:26,040
<font color="#E5E5E5">about</font><font color="#CCCCCC"> how the chrome sandbox looks like</font>

32
00:01:22,110 --> 00:01:27,090
this is on<font color="#E5E5E5"> Windows but you will find a</font>

33
00:01:26,040 --> 00:01:29,640
<font color="#E5E5E5">very similar architecture</font><font color="#CCCCCC"> on other</font>

34
00:01:27,090 --> 00:01:33,990
<font color="#E5E5E5">platforms</font><font color="#CCCCCC"> the most important obviously</font>

35
00:01:29,640 --> 00:01:36,030
being Android<font color="#E5E5E5"> since the whole meltdown</font>

36
00:01:33,990 --> 00:01:38,820
inspector<font color="#CCCCCC"> chrome introduced site</font>

37
00:01:36,030 --> 00:01:41,270
<font color="#E5E5E5">isolation which means that you have at</font>

38
00:01:38,820 --> 00:01:43,679
least one render<font color="#E5E5E5"> process per site and</font>

39
00:01:41,270 --> 00:01:46,110
these<font color="#CCCCCC"> processes are responsible for</font>

40
00:01:43,680 --> 00:01:47,369
<font color="#E5E5E5">parsing HTML executing JavaScript and</font>

41
00:01:46,110 --> 00:01:50,430
doing all the very dangerous<font color="#CCCCCC"> file</font>

42
00:01:47,369 --> 00:01:54,360
<font color="#CCCCCC">passing stuff</font><font color="#E5E5E5"> so they're heavily sandbox</font>

43
00:01:50,430 --> 00:01:56,280
which on<font color="#CCCCCC"> Windows</font><font color="#E5E5E5"> means that they</font>

44
00:01:54,360 --> 00:01:58,079
essentially have a security token that

45
00:01:56,280 --> 00:01:59,670
<font color="#E5E5E5">that's not allowed to do anything and</font>

46
00:01:58,079 --> 00:02:03,449
most<font color="#CCCCCC"> of the kernel attack surface is</font>

47
00:01:59,670 --> 00:02:04,890
<font color="#CCCCCC">completely</font><font color="#E5E5E5"> locked</font><font color="#CCCCCC"> down</font><font color="#E5E5E5"> but of course</font>

48
00:02:03,450 --> 00:02:07,680
there<font color="#CCCCCC"> needs to be some way to do cross</font>

49
00:02:04,890 --> 00:02:09,090
our origin operations<font color="#CCCCCC"> to do networking</font>

50
00:02:07,680 --> 00:02:11,129
talk to the outside<font color="#CCCCCC"> world render the UI</font>

51
00:02:09,090 --> 00:02:13,020
and<font color="#E5E5E5"> so on and that's responsibility of</font>

52
00:02:11,129 --> 00:02:13,829
the browser process<font color="#E5E5E5"> of which there's</font>

53
00:02:13,020 --> 00:02:16,350
<font color="#CCCCCC">only one and</font>

54
00:02:13,830 --> 00:02:17,730
highly privileged<font color="#E5E5E5"> so it doesn't run</font><font color="#CCCCCC"> in</font>

55
00:02:16,350 --> 00:02:19,769
sandbox at all<font color="#E5E5E5"> and if you</font><font color="#CCCCCC"> compromise it</font>

56
00:02:17,730 --> 00:02:20,989
you get a normal<font color="#E5E5E5"> code execution has</font><font color="#CCCCCC"> to</font>

57
00:02:19,770 --> 00:02:23,070
use it<font color="#CCCCCC"> who's running Chrome</font>

58
00:02:20,990 --> 00:02:24,150
there's also GPU process that does

59
00:02:23,070 --> 00:02:29,670
compositing but I'm not going to be

60
00:02:24,150 --> 00:02:31,140
concerned with<font color="#CCCCCC"> that too much here so if</font>

61
00:02:29,670 --> 00:02:32,339
you think<font color="#CCCCCC"> about what can you do when you</font>

62
00:02:31,140 --> 00:02:35,250
<font color="#E5E5E5">compromise a renderer and you want to</font>

63
00:02:32,340 --> 00:02:37,110
<font color="#E5E5E5">escape from the chrome sandbox</font><font color="#CCCCCC"> there is</font>

64
00:02:35,250 --> 00:02:38,430
the kernel there is maybe some system

65
00:02:37,110 --> 00:02:41,760
<font color="#E5E5E5">services that you can talk</font><font color="#CCCCCC"> to or other</font>

66
00:02:38,430 --> 00:02:44,540
mechanisms of doing IPC with components

67
00:02:41,760 --> 00:02:47,519
<font color="#CCCCCC">outside</font><font color="#E5E5E5"> of chrome but also there is this</font>

68
00:02:44,540 --> 00:02:49,470
big layer of functionality exposed by

69
00:02:47,520 --> 00:02:51,810
the browser<font color="#CCCCCC"> process to the renderer in</font>

70
00:02:49,470 --> 00:02:53,810
order to do<font color="#E5E5E5"> essentially everything that</font>

71
00:02:51,810 --> 00:02:57,150
<font color="#CCCCCC">the render is can't can't do themselves</font>

72
00:02:53,810 --> 00:03:00,570
<font color="#E5E5E5">and there is at least two IPC mechanisms</font>

73
00:02:57,150 --> 00:03:03,480
that chrome uses one is legacy<font color="#E5E5E5"> chrome</font>

74
00:03:00,570 --> 00:03:05,519
chromium IPC I still<font color="#E5E5E5"> used for a lot of</font>

75
00:03:03,480 --> 00:03:07,980
services<font color="#CCCCCC"> and then they have a new</font>

76
00:03:05,520 --> 00:03:10,530
implementation of IPC which is called

77
00:03:07,980 --> 00:03:12,209
mojo<font color="#E5E5E5"> which has supposedly better state</font>

78
00:03:10,530 --> 00:03:14,970
<font color="#E5E5E5">management especially when it comes to</font>

79
00:03:12,209 --> 00:03:17,970
the shutdown<font color="#E5E5E5"> sequence</font><font color="#CCCCCC"> and it's more</font>

80
00:03:14,970 --> 00:03:19,140
performant overall and they were

81
00:03:17,970 --> 00:03:21,300
starting<font color="#CCCCCC"> to</font><font color="#E5E5E5"> move services towards that</font>

82
00:03:19,140 --> 00:03:24,869
<font color="#E5E5E5">and all</font><font color="#CCCCCC"> of them</font><font color="#E5E5E5"> I'm in mojo at this at</font>

83
00:03:21,300 --> 00:03:26,910
<font color="#E5E5E5">this</font><font color="#CCCCCC"> point</font><font color="#E5E5E5"> now the the really cool thing</font>

84
00:03:24,870 --> 00:03:28,230
about<font color="#E5E5E5"> this attack surface is that you</font>

85
00:03:26,910 --> 00:03:29,310
can find<font color="#CCCCCC"> docs that</font><font color="#E5E5E5"> work on</font><font color="#CCCCCC"> all platforms</font>

86
00:03:28,230 --> 00:03:32,429
<font color="#E5E5E5">here</font>

87
00:03:29,310 --> 00:03:33,510
so it's I mean especially<font color="#CCCCCC"> on Windows</font><font color="#E5E5E5"> and</font>

88
00:03:32,430 --> 00:03:35,190
Android which are the most important

89
00:03:33,510 --> 00:03:37,920
platforms for<font color="#E5E5E5"> Chrome</font>

90
00:03:35,190 --> 00:03:39,180
maybe if you<font color="#CCCCCC"> find a bug</font><font color="#E5E5E5"> due</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> various</font>

91
00:03:37,920 --> 00:03:40,200
circumstances<font color="#E5E5E5"> could be that it</font><font color="#CCCCCC"> might</font>

92
00:03:39,180 --> 00:03:42,510
only be<font color="#E5E5E5"> exploitable one of these</font>

93
00:03:40,200 --> 00:03:46,980
platforms<font color="#CCCCCC"> so you have double the chance</font>

94
00:03:42,510 --> 00:03:48,000
<font color="#E5E5E5">of success in that sense</font><font color="#CCCCCC"> also I</font><font color="#E5E5E5"> would</font>

95
00:03:46,980 --> 00:03:49,410
say at this point<font color="#CCCCCC"> there's probably more</font>

96
00:03:48,000 --> 00:03:51,420
tax office here than there<font color="#CCCCCC"> is actually</font>

97
00:03:49,410 --> 00:03:56,670
<font color="#CCCCCC">in the kernel because we can't really</font><font color="#E5E5E5"> do</font>

98
00:03:51,420 --> 00:03:58,799
<font color="#CCCCCC">much with the kernel</font><font color="#E5E5E5"> and at least on</font>

99
00:03:56,670 --> 00:04:00,000
Windows it's important<font color="#CCCCCC"> that from</font><font color="#E5E5E5"> an</font>

100
00:03:58,800 --> 00:04:02,000
exploitation perspective we're

101
00:04:00,000 --> 00:04:04,050
exploiting<font color="#CCCCCC"> user land to user land and</font>

102
00:04:02,000 --> 00:04:05,300
that means for example<font color="#E5E5E5"> that</font><font color="#CCCCCC"> all</font><font color="#E5E5E5"> the</font>

103
00:04:04,050 --> 00:04:07,350
modules<font color="#E5E5E5"> are loaded at the same address</font>

104
00:04:05,300 --> 00:04:11,610
<font color="#CCCCCC">so we</font><font color="#E5E5E5"> don't have to concern ourselves</font>

105
00:04:07,350 --> 00:04:14,760
with<font color="#CCCCCC"> a SLR we don't need extra leaks to</font>

106
00:04:11,610 --> 00:04:16,290
break SLR at least in Windows<font color="#E5E5E5"> and</font><font color="#CCCCCC"> also</font>

107
00:04:14,760 --> 00:04:21,349
there<font color="#E5E5E5"> is no a CFG for example which</font>

108
00:04:16,290 --> 00:04:23,550
would be there in the kernel<font color="#CCCCCC"> oh yeah so</font>

109
00:04:21,350 --> 00:04:26,139
net didn't really tell<font color="#E5E5E5"> you what the</font><font color="#CCCCCC"> bug</font>

110
00:04:23,550 --> 00:04:28,090
was that you found so I'm<font color="#E5E5E5"> just going to</font>

111
00:04:26,139 --> 00:04:29,949
<font color="#E5E5E5">gingy do that to you and for that I need</font>

112
00:04:28,090 --> 00:04:32,888
<font color="#CCCCCC">to actually explain to you a bit what</font>

113
00:04:29,949 --> 00:04:35,620
application cache is it's a<font color="#E5E5E5"> feature to</font>

114
00:04:32,889 --> 00:04:36,909
enable offline<font color="#E5E5E5"> web applications and if</font>

115
00:04:35,620 --> 00:04:37,629
you of<font color="#E5E5E5"> course if you want you website to</font>

116
00:04:36,909 --> 00:04:40,030
be available<font color="#CCCCCC"> offline</font>

117
00:04:37,629 --> 00:04:41,759
you also need all the<font color="#E5E5E5"> resources</font><font color="#CCCCCC"> that the</font>

118
00:04:40,030 --> 00:04:43,960
<font color="#CCCCCC">website uses to be</font><font color="#E5E5E5"> available offline and</font>

119
00:04:41,759 --> 00:04:46,150
F cache gives you a way<font color="#CCCCCC"> to specify</font><font color="#E5E5E5"> which</font>

120
00:04:43,960 --> 00:04:50,469
<font color="#E5E5E5">resources you want to be there in the</font>

121
00:04:46,150 --> 00:04:52,870
cache<font color="#CCCCCC"> 100% of the</font><font color="#E5E5E5"> time so here in this</font>

122
00:04:50,469 --> 00:04:55,060
<font color="#E5E5E5">example you have an</font><font color="#CCCCCC"> HTML file which uses</font>

123
00:04:52,870 --> 00:04:57,189
a which includes<font color="#E5E5E5"> an image</font><font color="#CCCCCC"> and this image</font>

124
00:04:55,060 --> 00:04:58,990
file is<font color="#E5E5E5"> also part of them and app cache</font>

125
00:04:57,189 --> 00:05:01,930
manifest<font color="#E5E5E5"> that this document references</font>

126
00:04:58,990 --> 00:05:06,039
and this manifest tells the browser<font color="#E5E5E5"> to</font>

127
00:05:01,930 --> 00:05:07,479
catch<font color="#E5E5E5"> this resource actually you can</font>

128
00:05:06,039 --> 00:05:09,039
also<font color="#E5E5E5"> specify stuff that it's not</font>

129
00:05:07,479 --> 00:05:11,438
supposed to be cached<font color="#E5E5E5"> for example</font>

130
00:05:09,039 --> 00:05:14,128
because because it's<font color="#CCCCCC"> dynamic and it</font>

131
00:05:11,439 --> 00:05:17,830
cannot<font color="#E5E5E5"> be made of a</font><font color="#CCCCCC"> variable</font><font color="#E5E5E5"> offline</font>

132
00:05:14,129 --> 00:05:19,870
some quick terminology<font color="#E5E5E5"> this this HTML</font>

133
00:05:17,830 --> 00:05:24,758
document that you saw in the spec this

134
00:05:19,870 --> 00:05:25,840
would be called a cache host<font color="#E5E5E5"> and you can</font>

135
00:05:24,759 --> 00:05:28,029
of course<font color="#CCCCCC"> have several of</font><font color="#E5E5E5"> these if you</font>

136
00:05:25,840 --> 00:05:29,948
<font color="#CCCCCC">have</font><font color="#E5E5E5"> several documents</font><font color="#CCCCCC"> loaded</font><font color="#E5E5E5"> and then</font>

137
00:05:28,029 --> 00:05:32,319
<font color="#E5E5E5">you will have one</font><font color="#CCCCCC"> so called cache group</font>

138
00:05:29,949 --> 00:05:35,680
<font color="#CCCCCC">per manifest file at these reference and</font>

139
00:05:32,319 --> 00:05:37,509
in this<font color="#CCCCCC"> example here both documents</font>

140
00:05:35,680 --> 00:05:40,860
<font color="#E5E5E5">actually specify the same manifest so</font>

141
00:05:37,509 --> 00:05:43,029
you have one<font color="#E5E5E5"> group with two hosts and</font>

142
00:05:40,860 --> 00:05:45,639
then<font color="#E5E5E5"> you can imagine that</font><font color="#CCCCCC"> maybe over</font>

143
00:05:43,029 --> 00:05:47,469
<font color="#E5E5E5">time the developer will add more stuff</font>

144
00:05:45,639 --> 00:05:50,289
to this manifest<font color="#E5E5E5"> or change resources</font>

145
00:05:47,469 --> 00:05:51,669
that are specified<font color="#E5E5E5"> in the manifest so</font>

146
00:05:50,289 --> 00:05:53,919
they can be different<font color="#E5E5E5"> versions of this</font>

147
00:05:51,669 --> 00:05:55,419
cache<font color="#E5E5E5"> that represent different points in</font>

148
00:05:53,919 --> 00:05:59,609
<font color="#CCCCCC">time where this resource these resources</font>

149
00:05:55,419 --> 00:05:59,609
were<font color="#E5E5E5"> fetched and these are called caches</font>

150
00:05:59,789 --> 00:06:09,339
and<font color="#E5E5E5"> you have several several of these</font>

151
00:06:02,319 --> 00:06:11,529
per group<font color="#CCCCCC"> alright so this is the IPC</font>

152
00:06:09,339 --> 00:06:13,419
interface net already showed it quickly

153
00:06:11,529 --> 00:06:16,240
<font color="#E5E5E5">what's important here is we</font><font color="#CCCCCC"> can register</font>

154
00:06:13,419 --> 00:06:19,799
hosts we can delete hosts and we<font color="#CCCCCC"> can</font>

155
00:06:16,240 --> 00:06:22,240
tell the<font color="#E5E5E5"> backend what manifests</font><font color="#CCCCCC"> a host</font>

156
00:06:19,800 --> 00:06:23,289
specified<font color="#CCCCCC"> because that's an HTML</font><font color="#E5E5E5"> so the</font>

157
00:06:22,240 --> 00:06:26,529
renderer knows about it<font color="#E5E5E5"> but the browser</font>

158
00:06:23,289 --> 00:06:28,210
<font color="#E5E5E5">also needs to know</font><font color="#CCCCCC"> about</font><font color="#E5E5E5"> it so this</font><font color="#CCCCCC"> is</font>

159
00:06:26,529 --> 00:06:34,539
<font color="#E5E5E5">used for this we can</font><font color="#CCCCCC"> use</font><font color="#E5E5E5"> the Select</font>

160
00:06:28,210 --> 00:06:37,089
<font color="#E5E5E5">cache function so all of these types of</font>

161
00:06:34,539 --> 00:06:38,620
objects are reference counted and<font color="#E5E5E5"> with</font>

162
00:06:37,089 --> 00:06:39,700
<font color="#E5E5E5">reference counting you will always need</font>

163
00:06:38,620 --> 00:06:41,620
to ask<font color="#E5E5E5"> question</font>

164
00:06:39,700 --> 00:06:45,570
what are the ownership semantics<font color="#E5E5E5"> who's</font>

165
00:06:41,620 --> 00:06:47,920
<font color="#CCCCCC">keeping what alive or who owns what</font><font color="#E5E5E5"> and</font>

166
00:06:45,570 --> 00:06:49,480
in order to keep something alive in<font color="#CCCCCC"> that</font>

167
00:06:47,920 --> 00:06:52,300
sense<font color="#E5E5E5"> you need a so-called strong</font>

168
00:06:49,480 --> 00:06:53,740
pointer to an object which<font color="#E5E5E5"> is a pointer</font>

169
00:06:52,300 --> 00:06:55,300
<font color="#CCCCCC">that increments the ref count by</font><font color="#E5E5E5"> one and</font>

170
00:06:53,740 --> 00:06:58,180
<font color="#CCCCCC">that's prevents the object</font><font color="#E5E5E5"> from being</font>

171
00:06:55,300 --> 00:07:01,060
freed<font color="#E5E5E5"> and you would expect maybe that in</font>

172
00:06:58,180 --> 00:07:02,620
<font color="#E5E5E5">in this example that the this appcache</font>

173
00:07:01,060 --> 00:07:04,420
group that has<font color="#E5E5E5"> several versions maybe it</font>

174
00:07:02,620 --> 00:07:06,070
will<font color="#E5E5E5"> just</font><font color="#CCCCCC"> own</font><font color="#E5E5E5"> all of these versions but</font>

175
00:07:04,420 --> 00:07:09,520
it's actually<font color="#CCCCCC"> not</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> case as you can</font>

176
00:07:06,070 --> 00:07:09,880
<font color="#CCCCCC">see on the right here it's the other way</font>

177
00:07:09,520 --> 00:07:11,979
around

178
00:07:09,880 --> 00:07:16,420
every version<font color="#E5E5E5"> has a strong pointer to</font>

179
00:07:11,980 --> 00:07:19,480
<font color="#CCCCCC">it's a group and not vice versa</font><font color="#E5E5E5"> but</font>

180
00:07:16,420 --> 00:07:21,370
there is a special<font color="#CCCCCC"> there is a well</font>

181
00:07:19,480 --> 00:07:25,000
<font color="#E5E5E5">there's there's</font><font color="#CCCCCC"> a weak pointer however</font>

182
00:07:21,370 --> 00:07:26,080
from the group to its newest version but

183
00:07:25,000 --> 00:07:27,040
that's not keeping<font color="#E5E5E5"> anything alive</font>

184
00:07:26,080 --> 00:07:29,979
<font color="#E5E5E5">otherwise</font><font color="#CCCCCC"> you would have</font><font color="#E5E5E5"> a cyclic</font>

185
00:07:27,040 --> 00:07:32,620
reference here<font color="#E5E5E5"> and nothing would ever</font>

186
00:07:29,980 --> 00:07:37,360
get freed so this this black<font color="#E5E5E5"> over here</font>

187
00:07:32,620 --> 00:07:39,130
<font color="#CCCCCC">is a weak reference and also</font><font color="#E5E5E5"> every host</font>

188
00:07:37,360 --> 00:07:42,190
will have a strong pointer to the

189
00:07:39,130 --> 00:07:43,659
version<font color="#E5E5E5"> of the case that</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> uses but the</font>

190
00:07:42,190 --> 00:07:46,120
question is okay<font color="#E5E5E5"> what what if none of</font>

191
00:07:43,660 --> 00:07:47,650
the house actually<font color="#E5E5E5"> are on the newest</font>

192
00:07:46,120 --> 00:07:50,170
version<font color="#E5E5E5"> then who's holding</font><font color="#CCCCCC"> on</font><font color="#E5E5E5"> to that</font>

193
00:07:47,650 --> 00:07:52,060
newest version<font color="#E5E5E5"> and for</font><font color="#CCCCCC"> that there's an</font>

194
00:07:50,170 --> 00:07:54,490
extra<font color="#E5E5E5"> of strong pointer that every host</font>

195
00:07:52,060 --> 00:07:56,890
has which specifically<font color="#E5E5E5"> points to the</font>

196
00:07:54,490 --> 00:07:58,270
newest<font color="#CCCCCC"> version</font><font color="#E5E5E5"> so this is how this</font>

197
00:07:56,890 --> 00:08:02,140
newest version will stay alive<font color="#E5E5E5"> and this</font>

198
00:07:58,270 --> 00:08:05,229
is important<font color="#E5E5E5"> to understand this bug now</font>

199
00:08:02,140 --> 00:08:08,440
what net<font color="#CCCCCC"> fahza found was a magic</font>

200
00:08:05,230 --> 00:08:09,550
sequence of IPC calls and<font color="#CCCCCC"> I say magic</font>

201
00:08:08,440 --> 00:08:13,150
because none<font color="#CCCCCC"> of us really understand</font><font color="#E5E5E5"> how</font>

202
00:08:09,550 --> 00:08:14,380
<font color="#E5E5E5">it works</font><font color="#CCCCCC"> about its it was found</font><font color="#E5E5E5"> about a</font>

203
00:08:13,150 --> 00:08:17,489
father so we don't<font color="#CCCCCC"> really care</font><font color="#E5E5E5"> and</font>

204
00:08:14,380 --> 00:08:21,310
that's<font color="#CCCCCC"> the</font><font color="#E5E5E5"> cool</font><font color="#CCCCCC"> thing about fuzzing and</font>

205
00:08:17,490 --> 00:08:23,380
<font color="#CCCCCC">it what it</font><font color="#E5E5E5"> does is it puts this group</font>

206
00:08:21,310 --> 00:08:25,120
<font color="#E5E5E5">into an update state where we'll refetch</font>

207
00:08:23,380 --> 00:08:29,670
the manifest<font color="#E5E5E5"> check if there's any new</font>

208
00:08:25,120 --> 00:08:29,670
resources<font color="#CCCCCC"> and so on</font><font color="#E5E5E5"> and during</font><font color="#CCCCCC"> that time</font>

209
00:08:29,970 --> 00:08:34,210
<font color="#E5E5E5">instead of holding on</font><font color="#CCCCCC"> at having a strong</font>

210
00:08:32,229 --> 00:08:35,850
pointer to<font color="#E5E5E5"> this newest version all of</font>

211
00:08:34,210 --> 00:08:38,380
the<font color="#E5E5E5"> hosts will be in a waiting State</font>

212
00:08:35,850 --> 00:08:39,670
<font color="#CCCCCC">waiting for an event to be delivered</font><font color="#E5E5E5"> by</font>

213
00:08:38,380 --> 00:08:42,039
<font color="#E5E5E5">the group saying hey this update is</font>

214
00:08:39,669 --> 00:08:44,829
<font color="#CCCCCC">finished and you</font><font color="#E5E5E5"> can go back</font><font color="#CCCCCC"> to your</font>

215
00:08:42,039 --> 00:08:47,230
normal<font color="#E5E5E5"> state about</font><font color="#CCCCCC"> what's curious</font><font color="#E5E5E5"> here</font>

216
00:08:44,830 --> 00:08:49,390
<font color="#E5E5E5">although everything everything is in use</font>

217
00:08:47,230 --> 00:08:52,760
<font color="#E5E5E5">really and nobody's really holding on to</font>

218
00:08:49,390 --> 00:08:54,980
it this<font color="#E5E5E5"> whole right</font><font color="#CCCCCC"> side here anymore</font>

219
00:08:52,760 --> 00:08:57,580
and this<font color="#E5E5E5"> means that the applications get</font>

220
00:08:54,980 --> 00:09:00,140
freed<font color="#E5E5E5"> and that the group gets freed and</font>

221
00:08:57,580 --> 00:09:01,700
what happens when<font color="#E5E5E5"> the group gets deleted</font>

222
00:09:00,140 --> 00:09:05,000
it enters its destructor and it will

223
00:09:01,700 --> 00:09:06,680
notify notify the hosts that<font color="#E5E5E5"> the update</font>

224
00:09:05,000 --> 00:09:08,990
is finished<font color="#CCCCCC"> in this case it's actually</font>

225
00:09:06,680 --> 00:09:11,540
<font color="#CCCCCC">cancelled</font><font color="#E5E5E5"> so this event listener will</font>

226
00:09:08,990 --> 00:09:13,130
will be<font color="#E5E5E5"> called and the</font><font color="#CCCCCC"> hosts go back to</font>

227
00:09:11,540 --> 00:09:15,410
the<font color="#E5E5E5"> normal state by copying this</font><font color="#CCCCCC"> week</font>

228
00:09:13,130 --> 00:09:20,660
pointer to the newest<font color="#E5E5E5"> version</font><font color="#CCCCCC"> and adding</font>

229
00:09:15,410 --> 00:09:23,780
a<font color="#E5E5E5"> new strong reference</font><font color="#CCCCCC"> but this is bad</font>

230
00:09:20,660 --> 00:09:25,670
because this app cache is deleted now

231
00:09:23,780 --> 00:09:30,920
<font color="#E5E5E5">but now we have a strong</font><font color="#CCCCCC"> reference to a</font>

232
00:09:25,670 --> 00:09:32,599
dead object<font color="#E5E5E5"> so actually we have many of</font>

233
00:09:30,920 --> 00:09:33,890
these<font color="#E5E5E5"> hosts as many as we want so</font><font color="#CCCCCC"> we can</font>

234
00:09:32,600 --> 00:09:38,300
have as many strong references to this

235
00:09:33,890 --> 00:09:40,340
dead object as we want and now if<font color="#CCCCCC"> we</font>

236
00:09:38,300 --> 00:09:43,520
delete<font color="#E5E5E5"> these hosts the strong pointer</font>

237
00:09:40,340 --> 00:09:45,980
will also get<font color="#E5E5E5"> deleted and we</font><font color="#CCCCCC"> cause a use</font>

238
00:09:43,520 --> 00:09:48,890
of the free situation specifically<font color="#E5E5E5"> we</font>

239
00:09:45,980 --> 00:09:52,610
will decrement the ref count on a<font color="#E5E5E5"> lot</font><font color="#CCCCCC"> of</font>

240
00:09:48,890 --> 00:09:53,840
free table<font color="#CCCCCC"> jekt and we can do this as</font>

241
00:09:52,610 --> 00:09:56,690
many<font color="#E5E5E5"> times as we</font><font color="#CCCCCC"> want because</font><font color="#E5E5E5"> we can</font>

242
00:09:53,840 --> 00:09:57,860
have as many hosts as we want and if

243
00:09:56,690 --> 00:09:59,540
this ref not ever goes to<font color="#CCCCCC"> zero obviously</font>

244
00:09:57,860 --> 00:10:02,390
<font color="#CCCCCC">the object is</font><font color="#E5E5E5"> going to be destroyed so</font>

245
00:09:59,540 --> 00:10:04,099
we<font color="#CCCCCC"> enter the destructor again but this</font>

246
00:10:02,390 --> 00:10:10,699
<font color="#E5E5E5">time</font><font color="#CCCCCC"> it would</font><font color="#E5E5E5"> be a</font><font color="#CCCCCC"> use</font><font color="#E5E5E5"> of</font><font color="#CCCCCC"> the free</font>

247
00:10:04,100 --> 00:10:12,650
object and so our first<font color="#E5E5E5"> analysis was</font>

248
00:10:10,700 --> 00:10:15,340
<font color="#CCCCCC">that</font><font color="#E5E5E5"> okay this seems pretty trivial</font>

249
00:10:12,650 --> 00:10:17,630
we have no<font color="#CCCCCC"> ASLR because it's</font><font color="#E5E5E5"> windows and</font>

250
00:10:15,340 --> 00:10:19,880
the modules will<font color="#CCCCCC"> be</font><font color="#E5E5E5"> in the same place as</font>

251
00:10:17,630 --> 00:10:22,189
they are in the renderer<font color="#CCCCCC"> we also found</font>

252
00:10:19,880 --> 00:10:25,130
<font color="#CCCCCC">very quickly a primitive to allocate</font>

253
00:10:22,190 --> 00:10:27,410
arbitrary<font color="#E5E5E5"> data and we could reclaim the</font>

254
00:10:25,130 --> 00:10:30,500
<font color="#CCCCCC">appcache object with that and</font><font color="#E5E5E5"> but the</font>

255
00:10:27,410 --> 00:10:33,050
problem is<font color="#CCCCCC"> F</font><font color="#E5E5E5"> cache is</font><font color="#CCCCCC"> not a virtual</font>

256
00:10:30,500 --> 00:10:36,620
class<font color="#E5E5E5"> so we can't just hijack the V</font>

257
00:10:33,050 --> 00:10:38,780
table and also<font color="#CCCCCC"> it contains pointers to</font>

258
00:10:36,620 --> 00:10:41,660
<font color="#CCCCCC">other objects that will be the reference</font>

259
00:10:38,780 --> 00:10:42,770
in<font color="#E5E5E5"> the destructor so we cannot survive</font>

260
00:10:41,660 --> 00:10:45,890
<font color="#CCCCCC">to destructor without</font><font color="#E5E5E5"> faking these</font>

261
00:10:42,770 --> 00:10:49,010
pointers<font color="#E5E5E5"> so we knew</font><font color="#CCCCCC"> that we needed</font><font color="#E5E5E5"> an</font>

262
00:10:45,890 --> 00:10:53,449
extra info<font color="#E5E5E5"> leak okay what info do we</font>

263
00:10:49,010 --> 00:10:54,740
need for this well<font color="#E5E5E5"> maybe we can place</font>

264
00:10:53,450 --> 00:10:56,000
this fake object that we need a pointer

265
00:10:54,740 --> 00:11:01,190
<font color="#CCCCCC">to somewhere</font><font color="#E5E5E5"> on the heap and</font><font color="#CCCCCC"> then</font><font color="#E5E5E5"> we</font>

266
00:10:56,000 --> 00:11:03,440
leak its location like this but this

267
00:11:01,190 --> 00:11:04,880
this would not<font color="#CCCCCC"> be enough because this</font>

268
00:11:03,440 --> 00:11:06,480
fake object in turn has other pointers

269
00:11:04,880 --> 00:11:08,610
<font color="#E5E5E5">and these need to be valid as well</font>

270
00:11:06,480 --> 00:11:11,640
so at the time<font color="#E5E5E5"> when we place this object</font>

271
00:11:08,610 --> 00:11:16,470
<font color="#E5E5E5">we didn't know what to put as the second</font>

272
00:11:11,640 --> 00:11:18,260
or a pointer<font color="#E5E5E5"> so</font><font color="#CCCCCC"> either we find</font><font color="#E5E5E5"> something</font>

273
00:11:16,470 --> 00:11:21,630
<font color="#E5E5E5">where we can change the data</font><font color="#CCCCCC"> after and</font>

274
00:11:18,260 --> 00:11:22,800
fix up<font color="#CCCCCC"> the pointer or mo you</font><font color="#E5E5E5"> can</font><font color="#CCCCCC"> get</font>

275
00:11:21,630 --> 00:11:24,300
away with some sort of<font color="#E5E5E5"> heap spray where</font>

276
00:11:22,800 --> 00:11:28,199
we just<font color="#E5E5E5"> predict where something will end</font>

277
00:11:24,300 --> 00:11:29,760
up so<font color="#E5E5E5"> this is what you ended up</font><font color="#CCCCCC"> doing</font>

278
00:11:28,200 --> 00:11:32,480
let's say this<font color="#CCCCCC"> is</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> heap bring up</font>

279
00:11:29,760 --> 00:11:35,840
<font color="#CCCCCC">words we know that the</font><font color="#E5E5E5"> allocator will</font>

280
00:11:32,480 --> 00:11:38,490
allocate from from this point on upwards

281
00:11:35,840 --> 00:11:41,520
<font color="#CCCCCC">so now we</font><font color="#E5E5E5"> leaky heap pointer any heat</font>

282
00:11:38,490 --> 00:11:43,970
pointer really and<font color="#E5E5E5"> I'll tell you later</font>

283
00:11:41,520 --> 00:11:47,069
how it<font color="#CCCCCC"> points</font><font color="#E5E5E5"> somewhere near the close</font>

284
00:11:43,970 --> 00:11:49,800
towards near the close towards the top

285
00:11:47,070 --> 00:11:52,320
<font color="#CCCCCC">of</font><font color="#E5E5E5"> the heap</font><font color="#CCCCCC"> and now if we spray some say</font>

286
00:11:49,800 --> 00:11:54,810
foreign megabytes of data<font color="#E5E5E5"> and we just</font>

287
00:11:52,320 --> 00:11:57,210
add a constant to<font color="#E5E5E5"> this and round it down</font>

288
00:11:54,810 --> 00:12:01,500
to<font color="#E5E5E5"> page size we have</font><font color="#CCCCCC"> a pointer to into</font>

289
00:11:57,210 --> 00:12:03,180
our<font color="#E5E5E5"> heap spray so this way we can if we</font>

290
00:12:01,500 --> 00:12:05,730
just repeat our fake object now in every

291
00:12:03,180 --> 00:12:07,439
<font color="#E5E5E5">in</font><font color="#CCCCCC"> every single</font><font color="#E5E5E5"> page</font><font color="#CCCCCC"> that we spray then</font>

292
00:12:05,730 --> 00:12:13,230
this point<font color="#CCCCCC"> I will</font><font color="#E5E5E5"> surely pointed to one</font>

293
00:12:07,440 --> 00:12:14,400
of these pages<font color="#CCCCCC"> and now the user</font><font color="#E5E5E5"> is</font>

294
00:12:13,230 --> 00:12:17,040
actually<font color="#E5E5E5"> I think a very generic</font>

295
00:12:14,400 --> 00:12:20,689
<font color="#E5E5E5">primitive which is useful in general for</font>

296
00:12:17,040 --> 00:12:23,130
exploitation<font color="#E5E5E5"> and we use</font><font color="#CCCCCC"> blobs for that</font>

297
00:12:20,690 --> 00:12:27,150
they're essentially<font color="#CCCCCC"> just binary</font><font color="#E5E5E5"> data</font>

298
00:12:23,130 --> 00:12:28,920
that<font color="#E5E5E5"> that you can get a URL for as you</font>

299
00:12:27,150 --> 00:12:31,860
can see here in this<font color="#CCCCCC"> example I'm</font>

300
00:12:28,920 --> 00:12:32,939
creating<font color="#E5E5E5"> a blob that has two parts so</font>

301
00:12:31,860 --> 00:12:35,910
the actual blob data would be hello

302
00:12:32,940 --> 00:12:37,920
world<font color="#E5E5E5"> we can specify a mime type</font><font color="#CCCCCC"> and if</font>

303
00:12:35,910 --> 00:12:41,400
we want we can generate a<font color="#CCCCCC"> URL with which</font>

304
00:12:37,920 --> 00:12:44,099
we<font color="#E5E5E5"> can reference this blob and we can</font>

305
00:12:41,400 --> 00:12:46,380
also pass<font color="#E5E5E5"> this URL around to another to</font>

306
00:12:44,100 --> 00:12:47,610
<font color="#CCCCCC">another site for example and because of</font>

307
00:12:46,380 --> 00:12:50,130
<font color="#E5E5E5">this it needs to be some sort</font><font color="#CCCCCC"> of</font>

308
00:12:47,610 --> 00:12:53,310
cross-site object handled by the browser

309
00:12:50,130 --> 00:12:54,990
<font color="#CCCCCC">process and in</font><font color="#E5E5E5"> fact if we just do this</font>

310
00:12:53,310 --> 00:12:56,849
<font color="#E5E5E5">it is you just</font><font color="#CCCCCC"> call this</font><font color="#E5E5E5"> blob</font>

311
00:12:54,990 --> 00:12:59,580
constructor it will just be on<font color="#E5E5E5"> the</font>

312
00:12:56,850 --> 00:13:01,740
browser heap with no header<font color="#E5E5E5"> footer we</font>

313
00:12:59,580 --> 00:13:03,450
can control the size<font color="#E5E5E5"> and we can control</font>

314
00:13:01,740 --> 00:13:06,300
the<font color="#E5E5E5"> contents fully so this is</font><font color="#CCCCCC"> a really</font>

315
00:13:03,450 --> 00:13:09,180
<font color="#E5E5E5">good primitive</font><font color="#CCCCCC"> in our experiments</font><font color="#E5E5E5"> it</font>

316
00:13:06,300 --> 00:13:10,530
works up to<font color="#CCCCCC"> a size of 8 megabytes</font><font color="#E5E5E5"> and if</font>

317
00:13:09,180 --> 00:13:14,219
we spray enough of<font color="#E5E5E5"> these you will end</font><font color="#CCCCCC"> up</font>

318
00:13:10,530 --> 00:13:15,930
<font color="#E5E5E5">with the heap looking like this</font><font color="#CCCCCC"> this</font>

319
00:13:14,220 --> 00:13:19,380
might<font color="#E5E5E5"> be it might</font><font color="#CCCCCC"> be hard to read but in</font>

320
00:13:15,930 --> 00:13:20,189
yellow I marked all<font color="#CCCCCC"> the blobs</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> ended</font>

321
00:13:19,380 --> 00:13:21,689
<font color="#E5E5E5">up being on the heap</font>

322
00:13:20,190 --> 00:13:25,259
and in<font color="#CCCCCC"> between</font><font color="#E5E5E5"> you have some unwrapped</font>

323
00:13:21,690 --> 00:13:27,420
<font color="#E5E5E5">space</font><font color="#CCCCCC"> which is small enough that the</font>

324
00:13:25,259 --> 00:13:29,910
likelihood<font color="#E5E5E5"> that if you pick any</font><font color="#CCCCCC"> of the</font>

325
00:13:27,420 --> 00:13:31,800
<font color="#CCCCCC">addresses here that you hit one of</font><font color="#E5E5E5"> the</font>

326
00:13:29,910 --> 00:13:34,699
<font color="#CCCCCC">MEP pages from a blob it's pretty high</font>

327
00:13:31,800 --> 00:13:40,139
and<font color="#E5E5E5"> probably</font><font color="#CCCCCC"> can be made even higher by</font>

328
00:13:34,699 --> 00:13:41,939
doing a bit<font color="#E5E5E5"> more careful spraying and we</font>

329
00:13:40,139 --> 00:13:43,829
<font color="#CCCCCC">used the same the</font><font color="#E5E5E5"> same primitive to</font>

330
00:13:41,939 --> 00:13:49,079
reclaim the space used by<font color="#E5E5E5"> the app cache</font>

331
00:13:43,829 --> 00:13:51,269
at the end to get code execution<font color="#CCCCCC"> okay</font><font color="#E5E5E5"> so</font>

332
00:13:49,079 --> 00:13:52,680
we need<font color="#E5E5E5"> an info leak now but we don't</font>

333
00:13:51,269 --> 00:13:56,250
really need<font color="#E5E5E5"> to leak anything specific</font>

334
00:13:52,680 --> 00:13:58,500
just<font color="#E5E5E5"> any heat point or really and of</font>

335
00:13:56,250 --> 00:13:59,699
course the first<font color="#E5E5E5"> thing</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> do is</font><font color="#CCCCCC"> look at</font>

336
00:13:58,500 --> 00:14:02,430
the object that you<font color="#CCCCCC"> actually use after</font>

337
00:13:59,699 --> 00:14:04,469
<font color="#E5E5E5">freeing in this case case the app cache</font>

338
00:14:02,430 --> 00:14:07,859
<font color="#E5E5E5">and it would have probably been possible</font>

339
00:14:04,470 --> 00:14:09,660
<font color="#CCCCCC">to turn</font><font color="#E5E5E5"> this use of the free into a</font>

340
00:14:07,860 --> 00:14:12,449
situation where<font color="#E5E5E5"> it would send an address</font>

341
00:14:09,660 --> 00:14:15,540
<font color="#CCCCCC">to the</font><font color="#E5E5E5"> back to the renderer but it</font>

342
00:14:12,449 --> 00:14:16,979
didn't seem very very<font color="#CCCCCC"> robust or</font><font color="#E5E5E5"> generic</font>

343
00:14:15,540 --> 00:14:19,560
and also it<font color="#E5E5E5"> would have</font><font color="#CCCCCC"> involved much</font>

344
00:14:16,980 --> 00:14:23,850
more magic IPC call sequences which are

345
00:14:19,560 --> 00:14:25,018
<font color="#E5E5E5">just a mess to deal with so instead we</font>

346
00:14:23,850 --> 00:14:27,569
were looking for other<font color="#E5E5E5"> objects</font><font color="#CCCCCC"> that had</font>

347
00:14:25,019 --> 00:14:30,029
the exact same<font color="#E5E5E5"> size so they would land</font>

348
00:14:27,569 --> 00:14:31,500
<font color="#E5E5E5">in the same heat bucket on Windows and</font>

349
00:14:30,029 --> 00:14:34,620
<font color="#E5E5E5">we could reclaim the space</font><font color="#CCCCCC"> of the app</font>

350
00:14:31,500 --> 00:14:35,910
cache with it<font color="#CCCCCC"> I think I think one good</font>

351
00:14:34,620 --> 00:14:38,069
way to do<font color="#CCCCCC"> it would be to use a client</font>

352
00:14:35,910 --> 00:14:41,579
<font color="#E5E5E5">plug-in and dump all the types that have</font>

353
00:14:38,069 --> 00:14:46,170
<font color="#E5E5E5">the correct size what we tried first is</font>

354
00:14:41,579 --> 00:14:49,258
<font color="#E5E5E5">to do a quick hack using windbg</font><font color="#CCCCCC"> using</font>

355
00:14:46,170 --> 00:14:52,110
the<font color="#CCCCCC"> DT</font><font color="#E5E5E5"> minus</font><font color="#CCCCCC"> S command to</font><font color="#E5E5E5"> filter types</font>

356
00:14:49,259 --> 00:14:53,370
by size and<font color="#E5E5E5"> it turned out</font><font color="#CCCCCC"> that one of</font>

357
00:14:52,110 --> 00:14:56,069
one<font color="#E5E5E5"> of these was actually good</font><font color="#CCCCCC"> enough</font>

358
00:14:53,370 --> 00:14:59,100
for<font color="#E5E5E5"> us already it's called a canonical</font>

359
00:14:56,069 --> 00:15:00,389
cookie and this object<font color="#E5E5E5"> has not exactly</font>

360
00:14:59,100 --> 00:15:01,860
<font color="#E5E5E5">the same size as an app cache it's</font><font color="#CCCCCC"> 8</font>

361
00:15:00,389 --> 00:15:05,220
byte larger but it will<font color="#CCCCCC"> end in the same</font>

362
00:15:01,860 --> 00:15:08,120
spot and it has<font color="#CCCCCC"> the first member the</font>

363
00:15:05,220 --> 00:15:11,970
name of the cookie<font color="#CCCCCC"> and this is a string</font>

364
00:15:08,120 --> 00:15:15,389
which in<font color="#E5E5E5"> turn has as its first member</font>

365
00:15:11,970 --> 00:15:16,649
<font color="#E5E5E5">pointed to the string data and with our</font>

366
00:15:15,389 --> 00:15:18,149
<font color="#CCCCCC">D current</font><font color="#E5E5E5"> primitives we could do meant</font>

367
00:15:16,649 --> 00:15:21,059
that point I thought<font color="#E5E5E5"> I would would point</font>

368
00:15:18,149 --> 00:15:22,199
lower in the heap<font color="#CCCCCC"> and</font><font color="#E5E5E5"> now if</font><font color="#CCCCCC"> we read it</font>

369
00:15:21,059 --> 00:15:24,509
back all the cookies<font color="#E5E5E5"> from the renderer</font>

370
00:15:22,199 --> 00:15:27,839
we get a cookie that<font color="#E5E5E5"> has a name with a</font>

371
00:15:24,509 --> 00:15:30,180
lot of<font color="#CCCCCC"> 0 bytes</font><font color="#E5E5E5"> and some interesting heap</font>

372
00:15:27,839 --> 00:15:31,800
pointers in it

373
00:15:30,180 --> 00:15:34,770
<font color="#E5E5E5">this is what you ended up doing</font><font color="#CCCCCC"> in the</font>

374
00:15:31,800 --> 00:15:36,780
<font color="#CCCCCC">end but before we</font><font color="#E5E5E5"> found this we also</font>

375
00:15:34,770 --> 00:15:39,150
looked at<font color="#E5E5E5"> some</font><font color="#CCCCCC"> other options</font><font color="#E5E5E5"> which would</font>

376
00:15:36,780 --> 00:15:40,980
have been more generic so I just want to

377
00:15:39,150 --> 00:15:45,810
show you these<font color="#E5E5E5"> for example</font><font color="#CCCCCC"> you can look</font>

378
00:15:40,980 --> 00:15:48,840
for for<font color="#CCCCCC"> C++ vectors that have a variable</font>

379
00:15:45,810 --> 00:15:53,160
<font color="#E5E5E5">size that you could wear you can control</font>

380
00:15:48,840 --> 00:15:54,330
the size as<font color="#E5E5E5"> the renderer because that</font>

381
00:15:53,160 --> 00:15:56,189
means<font color="#E5E5E5"> you can make it as large as you</font>

382
00:15:54,330 --> 00:15:59,340
want<font color="#CCCCCC"> and</font><font color="#E5E5E5"> you</font><font color="#CCCCCC"> can reclaim anything you</font>

383
00:15:56,190 --> 00:16:00,150
want with it<font color="#E5E5E5"> again we didn't use a clang</font>

384
00:15:59,340 --> 00:16:02,760
<font color="#CCCCCC">plug-in which would have</font><font color="#E5E5E5"> been the</font>

385
00:16:00,150 --> 00:16:05,880
correct<font color="#CCCCCC"> way to do it</font><font color="#E5E5E5"> instead</font><font color="#CCCCCC"> we just did</font>

386
00:16:02,760 --> 00:16:08,970
some guessing and Ned used some ray X's

387
00:16:05,880 --> 00:16:11,550
to search<font color="#CCCCCC"> through the code base one</font>

388
00:16:08,970 --> 00:16:13,170
thing<font color="#E5E5E5"> that we found was in the second</font>

389
00:16:11,550 --> 00:16:15,990
one here it's a class called<font color="#CCCCCC"> a blob</font>

390
00:16:13,170 --> 00:16:17,819
reader and it's again related<font color="#E5E5E5"> to the</font>

391
00:16:15,990 --> 00:16:22,920
<font color="#E5E5E5">blobs that I showed</font><font color="#CCCCCC"> earlier and</font><font color="#E5E5E5"> it pre</font>

392
00:16:17,820 --> 00:16:24,600
computes a list of<font color="#CCCCCC"> AP computes for the</font>

393
00:16:22,920 --> 00:16:26,640
<font color="#E5E5E5">paths that the block block consists of</font>

394
00:16:24,600 --> 00:16:28,620
<font color="#CCCCCC">it pre compute the size</font><font color="#E5E5E5"> so that later</font>

395
00:16:26,640 --> 00:16:29,910
when you read<font color="#E5E5E5"> from a specific offset it</font>

396
00:16:28,620 --> 00:16:34,950
can<font color="#E5E5E5"> just go</font><font color="#CCCCCC"> through this list and see</font>

397
00:16:29,910 --> 00:16:36,810
what part is this is<font color="#CCCCCC"> in so that means</font>

398
00:16:34,950 --> 00:16:38,760
later it will trust these size values

399
00:16:36,810 --> 00:16:41,969
that are<font color="#CCCCCC"> thought inside</font><font color="#E5E5E5"> this vector to</font>

400
00:16:38,760 --> 00:16:43,950
know how long a blob is and if we can

401
00:16:41,970 --> 00:16:45,540
increment<font color="#E5E5E5"> one of these integers</font><font color="#CCCCCC"> and I</font>

402
00:16:43,950 --> 00:16:47,340
guess with a lot<font color="#E5E5E5"> of memory corruption</font>

403
00:16:45,540 --> 00:16:49,040
primitives<font color="#CCCCCC"> that you could imagine</font><font color="#E5E5E5"> you</font>

404
00:16:47,340 --> 00:16:51,350
<font color="#CCCCCC">could maybe increment</font><font color="#E5E5E5"> some value here</font>

405
00:16:49,040 --> 00:16:53,699
<font color="#CCCCCC">you would get</font><font color="#E5E5E5"> an info leak as well</font>

406
00:16:51,350 --> 00:16:59,090
unfortunately we could specifically<font color="#E5E5E5"> only</font>

407
00:16:53,700 --> 00:16:59,090
decrement<font color="#CCCCCC"> a value so we can use this</font>

408
00:17:01,880 --> 00:17:05,880
yeah and one thing I<font color="#E5E5E5"> noticed when when</font>

409
00:17:04,680 --> 00:17:08,459
<font color="#E5E5E5">writing this expert together with NAT is</font>

410
00:17:05,880 --> 00:17:09,900
that we really needed to evaluate<font color="#E5E5E5"> a lot</font>

411
00:17:08,459 --> 00:17:11,339
of ideas<font color="#E5E5E5"> very</font><font color="#CCCCCC"> quickly and we need</font><font color="#E5E5E5"> to</font>

412
00:17:09,900 --> 00:17:15,020
<font color="#E5E5E5">throw away as many bad ideas as possible</font>

413
00:17:11,339 --> 00:17:17,790
<font color="#E5E5E5">as quickly</font><font color="#CCCCCC"> as possible</font><font color="#E5E5E5"> and instead of</font>

414
00:17:15,020 --> 00:17:19,950
instead<font color="#E5E5E5"> of writing all the</font><font color="#CCCCCC"> exploits to</font>

415
00:17:17,790 --> 00:17:22,920
try these things<font color="#E5E5E5"> what we did is</font><font color="#CCCCCC"> we just</font>

416
00:17:19,950 --> 00:17:25,010
<font color="#E5E5E5">modeled the end result of what we wanted</font>

417
00:17:22,920 --> 00:17:28,850
<font color="#E5E5E5">to achieve was some exploit primitive</font>

418
00:17:25,010 --> 00:17:31,620
using<font color="#E5E5E5"> Friday and this way we could</font><font color="#CCCCCC"> just</font>

419
00:17:28,850 --> 00:17:33,360
see if something worked<font color="#CCCCCC"> before</font><font color="#E5E5E5"> we had to</font>

420
00:17:31,620 --> 00:17:35,790
implement<font color="#E5E5E5"> it and this we could just</font>

421
00:17:33,360 --> 00:17:37,050
iterate much faster on on the exploit

422
00:17:35,790 --> 00:17:40,639
and collaborate better because we could

423
00:17:37,050 --> 00:17:40,639
paralyze different stages<font color="#E5E5E5"> of the exploit</font>

424
00:17:42,810 --> 00:17:45,780
yeah the good<font color="#CCCCCC"> good thing</font><font color="#E5E5E5"> here is</font><font color="#CCCCCC"> that we</font>

425
00:17:44,190 --> 00:17:48,870
can verify every<font color="#E5E5E5"> assumption that we make</font>

426
00:17:45,780 --> 00:17:53,430
in from highest to lowest risk so if you

427
00:17:48,870 --> 00:17:54,959
know<font color="#E5E5E5"> something that</font><font color="#CCCCCC"> maybe</font><font color="#E5E5E5"> we'll need to</font>

428
00:17:53,430 --> 00:17:57,240
do at the<font color="#E5E5E5"> end of the exploit but</font><font color="#CCCCCC"> we</font>

429
00:17:54,960 --> 00:17:58,590
<font color="#E5E5E5">don't really know if it works or we're</font>

430
00:17:57,240 --> 00:18:00,960
very skeptical that<font color="#E5E5E5"> it will work then</font>

431
00:17:58,590 --> 00:18:03,030
<font color="#E5E5E5">maybe we should try it to verify that</font>

432
00:18:00,960 --> 00:18:10,410
this works<font color="#E5E5E5"> in the very beginning</font><font color="#CCCCCC"> without</font>

433
00:18:03,030 --> 00:18:14,610
<font color="#E5E5E5">actually writing the full exploit okay</font>

434
00:18:10,410 --> 00:18:16,680
<font color="#CCCCCC">so also this</font><font color="#E5E5E5"> was a full chain because we</font>

435
00:18:14,610 --> 00:18:21,629
staged it on<font color="#E5E5E5"> a on</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> renderer exploit by</font>

436
00:18:16,680 --> 00:18:23,670
<font color="#E5E5E5">samel somewhere</font><font color="#CCCCCC"> close</font><font color="#E5E5E5"> and how do you</font>

437
00:18:21,630 --> 00:18:25,620
<font color="#E5E5E5">even write a sandbox escape in a</font>

438
00:18:23,670 --> 00:18:26,940
renderer how do you even load your code

439
00:18:25,620 --> 00:18:29,929
like<font color="#E5E5E5"> how do you even write this exploit</font>

440
00:18:26,940 --> 00:18:32,760
so one thing you could do is you<font color="#CCCCCC"> just</font>

441
00:18:29,930 --> 00:18:35,160
write<font color="#CCCCCC"> the</font><font color="#E5E5E5"> whole expert in C and somehow</font>

442
00:18:32,760 --> 00:18:36,570
managed to compile<font color="#CCCCCC"> that C</font><font color="#E5E5E5"> down to</font><font color="#CCCCCC"> a</font>

443
00:18:35,160 --> 00:18:40,680
<font color="#CCCCCC">shellcode and then run that shellcode in</font>

444
00:18:36,570 --> 00:18:44,970
the renderer<font color="#E5E5E5"> I personally like</font><font color="#CCCCCC"> to write</font>

445
00:18:40,680 --> 00:18:47,270
most of<font color="#E5E5E5"> it in JavaScript if possible so</font>

446
00:18:44,970 --> 00:18:52,950
we did a combination<font color="#CCCCCC"> of</font><font color="#E5E5E5"> the two things</font>

447
00:18:47,270 --> 00:18:55,290
we actually loaded<font color="#CCCCCC"> C++ code</font><font color="#E5E5E5"> in memory by</font>

448
00:18:52,950 --> 00:18:56,250
getting shell code execution<font color="#E5E5E5"> using</font>

449
00:18:55,290 --> 00:18:58,800
something called reflective DLL

450
00:18:56,250 --> 00:19:02,910
injection<font color="#CCCCCC"> which you can just</font><font color="#E5E5E5"> find the</font>

451
00:18:58,800 --> 00:19:05,580
source<font color="#E5E5E5"> code for online and then</font><font color="#CCCCCC"> this C++</font>

452
00:19:02,910 --> 00:19:07,620
<font color="#E5E5E5">code it would expose certain primitives</font>

453
00:19:05,580 --> 00:19:15,080
to<font color="#E5E5E5"> the JavaScript code so that we can</font>

454
00:19:07,620 --> 00:19:18,649
then write the expert in JavaScript<font color="#CCCCCC"> also</font>

455
00:19:15,080 --> 00:19:20,850
if we're<font color="#CCCCCC"> doing this</font><font color="#E5E5E5"> then we need our</font>

456
00:19:18,650 --> 00:19:22,380
exploit to be good enough that<font color="#CCCCCC"> we can</font>

457
00:19:20,850 --> 00:19:26,659
actually actually execute JavaScript

458
00:19:22,380 --> 00:19:29,040
after we get<font color="#E5E5E5"> shell code execution and</font>

459
00:19:26,660 --> 00:19:32,790
since<font color="#CCCCCC"> Sam who's back was</font><font color="#E5E5E5"> actually a</font>

460
00:19:29,040 --> 00:19:34,050
JavaScript engine<font color="#E5E5E5"> back what we ended up</font>

461
00:19:32,790 --> 00:19:35,430
<font color="#E5E5E5">doing is instead</font><font color="#CCCCCC"> of doing</font><font color="#E5E5E5"> all the</font>

462
00:19:34,050 --> 00:19:37,320
content generation dance and fixing up

463
00:19:35,430 --> 00:19:40,340
everything<font color="#E5E5E5"> we just ran the exploit in a</font>

464
00:19:37,320 --> 00:19:43,980
separate thread<font color="#E5E5E5"> by using web workers and</font>

465
00:19:40,340 --> 00:19:46,649
then at the<font color="#CCCCCC"> end of the shell code</font><font color="#E5E5E5"> which</font>

466
00:19:43,980 --> 00:19:48,870
did some patching and stuff it would

467
00:19:46,650 --> 00:19:50,250
<font color="#E5E5E5">just go into an infinite</font><font color="#CCCCCC"> loop</font><font color="#E5E5E5"> and the</font>

468
00:19:48,870 --> 00:19:52,500
other thread could<font color="#E5E5E5"> continue executing</font>

469
00:19:50,250 --> 00:19:56,540
JavaScript that's<font color="#E5E5E5"> I</font><font color="#CCCCCC"> think</font><font color="#E5E5E5"> that's a neat</font>

470
00:19:52,500 --> 00:19:56,540
<font color="#CCCCCC">trick</font><font color="#E5E5E5"> to make your life a lot easier</font>

471
00:19:58,730 --> 00:20:04,350
so what is it what<font color="#CCCCCC"> is</font><font color="#E5E5E5"> the C++</font><font color="#CCCCCC"> code</font>

472
00:20:01,470 --> 00:20:05,910
<font color="#E5E5E5">actually do first of all it would apply</font>

473
00:20:04,350 --> 00:20:08,490
some renderer patches that we need it

474
00:20:05,910 --> 00:20:11,310
for example<font color="#E5E5E5"> to read back the cookies</font><font color="#CCCCCC"> but</font>

475
00:20:08,490 --> 00:20:13,100
most importantly it would hook one of

476
00:20:11,310 --> 00:20:15,600
the<font color="#E5E5E5"> JavaScript</font><font color="#CCCCCC"> Senate library functions</font>

477
00:20:13,100 --> 00:20:19,649
so that we could call from JavaScript

478
00:20:15,600 --> 00:20:22,250
into C++<font color="#CCCCCC"> and then through that</font><font color="#E5E5E5"> hook the</font>

479
00:20:19,650 --> 00:20:25,470
C++ code<font color="#E5E5E5"> exposed some native</font>

480
00:20:22,250 --> 00:20:29,040
functionality to the JavaScript code<font color="#E5E5E5"> for</font>

481
00:20:25,470 --> 00:20:31,470
example<font color="#CCCCCC"> to</font><font color="#E5E5E5"> look up the</font><font color="#CCCCCC"> so called</font><font color="#E5E5E5"> cache</font>

482
00:20:29,040 --> 00:20:33,270
host proxy object which<font color="#E5E5E5"> you can call all</font>

483
00:20:31,470 --> 00:20:36,900
these IPC functions on like register

484
00:20:33,270 --> 00:20:38,910
host<font color="#E5E5E5"> and so on that I showed earlier so</font>

485
00:20:36,900 --> 00:20:40,860
this native code it will<font color="#E5E5E5"> just follow a</font>

486
00:20:38,910 --> 00:20:43,920
bunch<font color="#E5E5E5"> of pointers</font><font color="#CCCCCC"> to get to this proxy</font>

487
00:20:40,860 --> 00:20:46,590
object and then it will call our IPC

488
00:20:43,920 --> 00:20:48,300
functions directly on it<font color="#E5E5E5"> so we didn't</font>

489
00:20:46,590 --> 00:20:50,939
even<font color="#CCCCCC"> have</font><font color="#E5E5E5"> to bother with implementing</font>

490
00:20:48,300 --> 00:20:51,990
mojo<font color="#E5E5E5"> in any way or form because we just</font>

491
00:20:50,940 --> 00:20:53,370
<font color="#E5E5E5">use it as a black box</font>

492
00:20:51,990 --> 00:20:58,650
<font color="#CCCCCC">just use the implementation</font><font color="#E5E5E5"> that's</font>

493
00:20:53,370 --> 00:21:00,030
already<font color="#E5E5E5"> there in the renderer</font><font color="#CCCCCC"> of course</font>

494
00:20:58,650 --> 00:21:01,590
it's only<font color="#CCCCCC"> work</font><font color="#E5E5E5"> because we weren't</font>

495
00:21:00,030 --> 00:21:03,480
actually<font color="#E5E5E5"> exploiting it back in a motor</font>

496
00:21:01,590 --> 00:21:05,220
<font color="#E5E5E5">service if we wanted to exploit it back</font>

497
00:21:03,480 --> 00:21:07,470
in mojo itself<font color="#CCCCCC"> then</font><font color="#E5E5E5"> probably</font><font color="#CCCCCC"> we would</font>

498
00:21:05,220 --> 00:21:10,200
have to either re-implement parts of it

499
00:21:07,470 --> 00:21:12,660
or patch the implementation<font color="#E5E5E5"> that's there</font>

500
00:21:10,200 --> 00:21:19,140
to trigger whatever<font color="#E5E5E5"> other bug we have in</font>

501
00:21:12,660 --> 00:21:20,550
module itself<font color="#E5E5E5"> all right this is a quick</font>

502
00:21:19,140 --> 00:21:25,220
demo I mean browser exploit<font color="#CCCCCC"> then was a</font>

503
00:21:20,550 --> 00:21:25,220
quite boring but still there will a

504
00:21:28,160 --> 00:21:32,370
calculator<font color="#E5E5E5"> the back three times once to</font>

505
00:21:30,690 --> 00:21:33,350
get an info leak it didn't work then we

506
00:21:32,370 --> 00:21:37,320
try<font color="#E5E5E5"> that again</font>

507
00:21:33,350 --> 00:21:39,090
<font color="#CCCCCC">and then we leak a bunch of heap data we</font>

508
00:21:37,320 --> 00:21:41,310
have a heuristic<font color="#CCCCCC"> that detects pointers</font>

509
00:21:39,090 --> 00:21:44,419
in there and then we trigger the<font color="#E5E5E5"> third</font>

510
00:21:41,310 --> 00:21:44,419
time to get code execution

511
00:21:46,070 --> 00:21:50,939
[Applause]

512
00:21:51,460 --> 00:21:57,860
yeah so I mean yeah<font color="#CCCCCC"> that</font><font color="#E5E5E5"> that's it from</font>

513
00:21:54,710 --> 00:22:00,049
my from my<font color="#E5E5E5"> end you can actually find the</font>

514
00:21:57,860 --> 00:22:01,580
<font color="#CCCCCC">whole exploit online on github</font><font color="#E5E5E5"> if you</font>

515
00:22:00,049 --> 00:22:06,470
want to study it especially<font color="#CCCCCC"> I think the</font>

516
00:22:01,580 --> 00:22:07,668
most reusable parts of it are the C++

517
00:22:06,470 --> 00:22:09,559
implementation that's doing the hooking

518
00:22:07,669 --> 00:22:13,549
so you can call from JavaScript or C++

519
00:22:09,559 --> 00:22:18,139
and the and the whole heap spraying<font color="#E5E5E5"> a</font>

520
00:22:13,549 --> 00:22:20,600
business<font color="#CCCCCC"> and feel</font><font color="#E5E5E5"> free to ask questions</font>

521
00:22:18,139 --> 00:22:22,488
<font color="#CCCCCC">about it if you're studying it and</font><font color="#E5E5E5"> you</font>

522
00:22:20,600 --> 00:22:24,859
have<font color="#E5E5E5"> questions feel free to ping me on</font>

523
00:22:22,489 --> 00:22:26,059
<font color="#E5E5E5">Twitter or</font><font color="#CCCCCC"> something</font><font color="#E5E5E5"> and of course if</font>

524
00:22:24,859 --> 00:22:27,820
<font color="#CCCCCC">you</font><font color="#E5E5E5"> interested</font><font color="#CCCCCC"> in discovery you just</font>

525
00:22:26,059 --> 00:22:33,230
listen to the talk that Nate just gave

526
00:22:27,820 --> 00:22:35,450
but there's also<font color="#CCCCCC"> write-up in</font><font color="#E5E5E5"> the in the</font>

527
00:22:33,230 --> 00:22:37,909
<font color="#E5E5E5">Google documentation</font><font color="#CCCCCC"> I don't know if or</font>

528
00:22:35,450 --> 00:22:39,559
what exactly<font color="#E5E5E5"> about structure</font><font color="#CCCCCC"> we're</font>

529
00:22:37,909 --> 00:22:43,789
fuzzing and how<font color="#E5E5E5"> this</font><font color="#CCCCCC"> puzzle was</font>

530
00:22:39,559 --> 00:22:56,299
developed<font color="#E5E5E5"> okay so that's it for</font><font color="#CCCCCC"> me and</font>

531
00:22:43,789 --> 00:22:58,600
<font color="#E5E5E5">feel free to ask any</font><font color="#CCCCCC"> questions now do we</font>

532
00:22:56,299 --> 00:22:58,600
<font color="#E5E5E5">have questions</font>

533
00:23:15,120 --> 00:23:26,610
so if any questions<font color="#CCCCCC"> come up</font><font color="#E5E5E5"> later you</font>

534
00:23:16,799 --> 00:23:31,700
can find me around here<font color="#E5E5E5"> okay thank you</font>

535
00:23:26,610 --> 00:23:31,699
[Applause]

