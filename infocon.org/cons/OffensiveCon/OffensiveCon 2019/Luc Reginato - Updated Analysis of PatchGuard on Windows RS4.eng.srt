1
00:00:00,520 --> 00:00:02,839
[Applause]

2
00:00:04,819 --> 00:00:10,710
so welcome<font color="#CCCCCC"> everyone</font><font color="#E5E5E5"> thank you</font><font color="#CCCCCC"> for</font>

3
00:00:08,220 --> 00:00:11,370
getting up early after this party and to

4
00:00:10,710 --> 00:00:13,500
attend<font color="#CCCCCC"> real talk</font>

5
00:00:11,370 --> 00:00:15,360
I really appreciate it my name is<font color="#CCCCCC"> Lucas</font>

6
00:00:13,500 --> 00:00:17,190
Neto a rocket<font color="#E5E5E5"> train and today i</font>

7
00:00:15,360 --> 00:00:18,480
<font color="#E5E5E5">represent you in a</font><font color="#CCCCCC"> digital analysis of</font>

8
00:00:17,190 --> 00:00:22,439
patch code on Windows 10

9
00:00:18,480 --> 00:00:24,330
<font color="#E5E5E5">Western</font><font color="#CCCCCC"> Fork so here is a</font><font color="#E5E5E5"> summary first</font>

10
00:00:22,439 --> 00:00:26,070
<font color="#E5E5E5">there will be an introduction where I</font>

11
00:00:24,330 --> 00:00:27,919
represent<font color="#E5E5E5"> you what this</font><font color="#CCCCCC"> talks about</font><font color="#E5E5E5"> a</font>

12
00:00:26,070 --> 00:00:30,840
quick overview of what<font color="#CCCCCC"> Pudge God is and</font>

13
00:00:27,920 --> 00:00:33,360
our approach to analyze it then I will

14
00:00:30,840 --> 00:00:35,910
<font color="#E5E5E5">talk</font><font color="#CCCCCC"> about our cotton</font><font color="#E5E5E5"> initialization how</font>

15
00:00:33,360 --> 00:00:38,550
it triggers<font color="#E5E5E5"> a check how verification</font>

16
00:00:35,910 --> 00:00:40,349
routines works on I will discuss<font color="#CCCCCC"> proof</font>

17
00:00:38,550 --> 00:00:44,099
<font color="#E5E5E5">of concept that I implemented to disable</font>

18
00:00:40,350 --> 00:00:47,520
it<font color="#CCCCCC"> and finally</font><font color="#E5E5E5"> I will complete so first</font>

19
00:00:44,100 --> 00:00:49,140
the interaction<font color="#E5E5E5"> what</font><font color="#CCCCCC"> you start my</font>

20
00:00:47,520 --> 00:00:51,660
objective here<font color="#CCCCCC"> is to</font><font color="#E5E5E5"> cover</font><font color="#CCCCCC"> many</font>

21
00:00:49,140 --> 00:00:53,870
mechanics of<font color="#CCCCCC"> batch job so you can get</font>

22
00:00:51,660 --> 00:00:57,989
agravada<font color="#CCCCCC"> I've got an understanding of</font>

23
00:00:53,870 --> 00:01:00,500
<font color="#E5E5E5">how everything</font><font color="#CCCCCC"> works</font><font color="#E5E5E5"> so we can go on on</font>

24
00:00:57,989 --> 00:01:02,669
the assemble it on watch<font color="#CCCCCC"> what I found</font>

25
00:01:00,500 --> 00:01:05,689
<font color="#E5E5E5">there will be an incoming white paper</font>

26
00:01:02,670 --> 00:01:08,070
<font color="#E5E5E5">and I hope some call if I'm allowed to</font>

27
00:01:05,689 --> 00:01:11,429
<font color="#E5E5E5">there will be much more details in it</font>

28
00:01:08,070 --> 00:01:14,059
here<font color="#CCCCCC"> I only</font><font color="#E5E5E5"> have like 45 to an hour so</font>

29
00:01:11,430 --> 00:01:16,409
<font color="#CCCCCC">it's difficult</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> explain</font><font color="#E5E5E5"> all</font><font color="#CCCCCC"> of it</font>

30
00:01:14,060 --> 00:01:20,250
there will<font color="#CCCCCC"> be some known stuff since</font>

31
00:01:16,409 --> 00:01:22,170
<font color="#E5E5E5">patch quad is basically use an</font>

32
00:01:20,250 --> 00:01:24,750
incremented way of developing so

33
00:01:22,170 --> 00:01:26,939
basically most of it are from<font color="#CCCCCC"> Windows</font>

34
00:01:24,750 --> 00:01:31,950
8.1<font color="#E5E5E5"> but there is some new stuff from</font>

35
00:01:26,939 --> 00:01:34,020
Windows 10 on of<font color="#CCCCCC"> course some results so</font>

36
00:01:31,950 --> 00:01:35,520
what spatchcock originally it's called

37
00:01:34,020 --> 00:01:37,920
kernel patch<font color="#CCCCCC"> but</font><font color="#E5E5E5"> can you patch</font>

38
00:01:35,520 --> 00:01:40,439
protection<font color="#E5E5E5"> but nobody calls it that way</font>

39
00:01:37,920 --> 00:01:43,350
I don't<font color="#E5E5E5"> know</font><font color="#CCCCCC"> why</font><font color="#E5E5E5"> it first appeared on</font>

40
00:01:40,439 --> 00:01:45,270
Windows XP<font color="#E5E5E5"> x64</font><font color="#CCCCCC"> and the idea is that it</font>

41
00:01:43,350 --> 00:01:47,039
will scan<font color="#E5E5E5"> kernel for patches on sugar a</font>

42
00:01:45,270 --> 00:01:49,979
<font color="#E5E5E5">blue screen of death if it detects</font>

43
00:01:47,040 --> 00:01:52,439
<font color="#E5E5E5">modification for example or some</font>

44
00:01:49,979 --> 00:01:54,329
structure such as<font color="#E5E5E5"> the</font><font color="#CCCCCC"> IDT's gdt</font><font color="#E5E5E5"> some</font>

45
00:01:52,439 --> 00:01:56,369
devil routines are the list of floated

46
00:01:54,329 --> 00:01:58,259
module<font color="#E5E5E5"> on patch code itself that are</font>

47
00:01:56,369 --> 00:02:01,710
protected there there is a non recursive

48
00:01:58,259 --> 00:02:08,190
list available on the<font color="#CCCCCC"> Amazon if you look</font>

49
00:02:01,710 --> 00:02:10,818
at the back<font color="#CCCCCC"> check 109 so what's the</font>

50
00:02:08,190 --> 00:02:12,650
objective of patch<font color="#E5E5E5"> job</font>

51
00:02:10,818 --> 00:02:14,540
but God will prevent malware<font color="#E5E5E5"> on our</font>

52
00:02:12,650 --> 00:02:17,599
<font color="#E5E5E5">commercial products from tampering with</font>

53
00:02:14,540 --> 00:02:19,519
the camera<font color="#CCCCCC"> the idea is that</font><font color="#E5E5E5"> Microsoft</font>

54
00:02:17,599 --> 00:02:21,920
realized at some point that most<font color="#E5E5E5"> of the</font>

55
00:02:19,519 --> 00:02:25,640
report crashes that they got<font color="#CCCCCC"> away</font><font color="#E5E5E5"> from</font>

56
00:02:21,920 --> 00:02:28,578
<font color="#CCCCCC">malware on</font><font color="#E5E5E5"> or third-party drivers so</font>

57
00:02:25,640 --> 00:02:31,909
they<font color="#E5E5E5"> decided to prevent this from</font>

58
00:02:28,579 --> 00:02:34,730
<font color="#CCCCCC">happening</font><font color="#E5E5E5"> in case of malware for example</font>

59
00:02:31,909 --> 00:02:37,069
never would like to maybe hook some

60
00:02:34,730 --> 00:02:38,780
functions to enumerate<font color="#E5E5E5"> processes that it</font>

61
00:02:37,069 --> 00:02:40,730
will hide itself on for commercial

62
00:02:38,780 --> 00:02:44,200
products you can get some for<font color="#E5E5E5"> example</font>

63
00:02:40,730 --> 00:02:46,358
<font color="#E5E5E5">who can</font><font color="#CCCCCC"> quit process so that the</font>

64
00:02:44,200 --> 00:02:48,560
antivirus<font color="#E5E5E5"> for example can analyze</font>

65
00:02:46,359 --> 00:02:52,159
something before the process<font color="#CCCCCC"> is launched</font>

66
00:02:48,560 --> 00:02:55,159
<font color="#E5E5E5">and in this way</font><font color="#CCCCCC"> it's mike occurs that</font>

67
00:02:52,159 --> 00:02:58,668
this patch<font color="#E5E5E5"> are quite ugly</font><font color="#CCCCCC"> so Microsoft</font>

68
00:02:55,159 --> 00:03:00,798
decided to prevent<font color="#E5E5E5"> that</font><font color="#CCCCCC"> patch God</font><font color="#E5E5E5"> runs</font>

69
00:02:58,669 --> 00:03:03,049
at<font color="#CCCCCC"> the</font><font color="#E5E5E5"> same level as any driver</font><font color="#CCCCCC"> which</font>

70
00:03:00,799 --> 00:03:06,200
means that theoretically<font color="#E5E5E5"> an inverter can</font>

71
00:03:03,049 --> 00:03:08,930
disable it which is seems<font color="#E5E5E5"> to erratically</font>

72
00:03:06,200 --> 00:03:10,970
but the thing is<font color="#E5E5E5"> it's quite difficult</font>

73
00:03:08,930 --> 00:03:12,919
now since<font color="#CCCCCC"> page</font><font color="#E5E5E5"> quad use a lot of</font>

74
00:03:10,970 --> 00:03:16,728
techniques<font color="#E5E5E5"> to hide itself so</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> you</font>

75
00:03:12,919 --> 00:03:18,409
can just<font color="#E5E5E5"> find it and unravel it so</font><font color="#CCCCCC"> right</font>

76
00:03:16,729 --> 00:03:21,349
<font color="#E5E5E5">now it's quite difficult</font><font color="#CCCCCC"> but in this</font>

77
00:03:18,409 --> 00:03:23,659
presentation I will show<font color="#CCCCCC"> the how part</font>

78
00:03:21,349 --> 00:03:27,738
<font color="#CCCCCC">one initialize itself</font><font color="#E5E5E5"> it's many ways on</font>

79
00:03:23,659 --> 00:03:30,138
how to<font color="#E5E5E5"> disable each ways so here's a</font>

80
00:03:27,739 --> 00:03:31,459
<font color="#CCCCCC">main Mechanics for</font><font color="#E5E5E5"> review it's a very</font>

81
00:03:30,139 --> 00:03:34,549
overly simplified<font color="#CCCCCC"> diagram</font>

82
00:03:31,459 --> 00:03:36,979
<font color="#E5E5E5">I really simplified I mean it's just for</font>

83
00:03:34,549 --> 00:03:39,049
explanation first there is the

84
00:03:36,979 --> 00:03:40,549
initialization<font color="#CCCCCC"> which occurs at the</font>

85
00:03:39,049 --> 00:03:44,120
beginning<font color="#CCCCCC"> of the boot before</font><font color="#E5E5E5"> any user</font>

86
00:03:40,549 --> 00:03:47,470
driver so<font color="#CCCCCC"> that of course</font><font color="#E5E5E5"> there is no</font>

87
00:03:44,120 --> 00:03:49,840
possibility<font color="#CCCCCC"> to hook stuff at this moment</font>

88
00:03:47,470 --> 00:03:52,609
the idea<font color="#E5E5E5"> is that it will arrest</font>

89
00:03:49,840 --> 00:03:55,250
necessary<font color="#E5E5E5"> data on storage for later use</font>

90
00:03:52,609 --> 00:03:57,199
<font color="#E5E5E5">and then it will hide itself</font><font color="#CCCCCC"> basically</font>

91
00:03:55,250 --> 00:03:59,689
it's<font color="#CCCCCC"> a script but it will do it in a</font>

92
00:03:57,199 --> 00:04:01,609
hidden way so that an attacker cannot

93
00:03:59,689 --> 00:04:04,340
just find it on disable it<font color="#CCCCCC"> as just</font><font color="#E5E5E5"> not</font>

94
00:04:01,609 --> 00:04:08,919
well actually<font color="#E5E5E5"> if you worst it you you</font>

95
00:04:04,340 --> 00:04:11,359
can<font color="#CCCCCC"> find where it's sleeping then</font>

96
00:04:08,919 --> 00:04:13,459
regarding an event<font color="#CCCCCC"> check will be</font>

97
00:04:11,359 --> 00:04:15,979
triggered<font color="#CCCCCC"> for example an event maybe</font><font color="#E5E5E5"> a</font>

98
00:04:13,459 --> 00:04:18,579
<font color="#CCCCCC">timeout that comes to expression or some</font>

99
00:04:15,979 --> 00:04:20,900
other stuff<font color="#E5E5E5"> that suggests an event and</font>

100
00:04:18,579 --> 00:04:22,580
regarding the result of the check there

101
00:04:20,899 --> 00:04:24,679
will be two possible<font color="#E5E5E5"> outcomes the first</font>

102
00:04:22,580 --> 00:04:27,258
one is the modification<font color="#CCCCCC"> is detected</font>

103
00:04:24,680 --> 00:04:29,840
<font color="#E5E5E5">and second one is</font><font color="#CCCCCC"> nitwit to check</font><font color="#E5E5E5"> failed</font>

104
00:04:27,259 --> 00:04:33,590
on<font color="#E5E5E5"> it will trigger a</font><font color="#CCCCCC"> brewski noticed</font>

105
00:04:29,840 --> 00:04:35,210
with<font color="#E5E5E5"> web check</font><font color="#CCCCCC"> 109</font><font color="#E5E5E5"> so what's our</font>

106
00:04:33,590 --> 00:04:37,489
<font color="#CCCCCC">approach for</font><font color="#E5E5E5"> this we used terminus</font>

107
00:04:35,210 --> 00:04:39,530
analysis<font color="#E5E5E5"> so basically we developed a</font>

108
00:04:37,490 --> 00:04:41,660
driver to<font color="#E5E5E5"> patch the IDT and record</font>

109
00:04:39,530 --> 00:04:43,340
initialization<font color="#E5E5E5"> with on the blue screen</font>

110
00:04:41,660 --> 00:04:45,530
of death<font color="#E5E5E5"> with</font><font color="#CCCCCC"> ribbon which is a timer</font>

111
00:04:43,340 --> 00:04:47,960
<font color="#CCCCCC">cinereous tool that</font><font color="#E5E5E5"> our company develop</font>

112
00:04:45,530 --> 00:04:52,159
and then we<font color="#CCCCCC"> analyzed</font><font color="#E5E5E5"> the detection</font>

113
00:04:47,960 --> 00:04:55,250
algorithm<font color="#CCCCCC"> by</font><font color="#E5E5E5"> going back in time</font><font color="#CCCCCC"> we were</font>

114
00:04:52,160 --> 00:04:57,199
we could easily find interesting not<font color="#E5E5E5"> as</font>

115
00:04:55,250 --> 00:04:59,449
such as encryption key<font color="#E5E5E5"> on orders to</font>

116
00:04:57,199 --> 00:05:00,979
<font color="#CCCCCC">attack that</font><font color="#E5E5E5"> and basically we got a good</font>

117
00:04:59,449 --> 00:05:03,199
overview of<font color="#CCCCCC"> the</font><font color="#E5E5E5"> whole patch quad</font>

118
00:05:00,979 --> 00:05:05,389
structure which is used all along by

119
00:05:03,199 --> 00:05:08,599
patch<font color="#E5E5E5"> quad and this good overview</font>

120
00:05:05,389 --> 00:05:10,630
allowed us to use<font color="#CCCCCC"> static analysis</font><font color="#E5E5E5"> and</font>

121
00:05:08,599 --> 00:05:14,979
<font color="#E5E5E5">combined with</font><font color="#CCCCCC"> stamina and legislature to</font>

122
00:05:10,630 --> 00:05:14,979
point out a<font color="#E5E5E5"> specific mechanism</font>

123
00:05:16,539 --> 00:05:23,479
so here's intrusion<font color="#E5E5E5"> now what about the</font>

124
00:05:20,750 --> 00:05:26,990
initialization<font color="#E5E5E5"> the initialization is</font>

125
00:05:23,479 --> 00:05:30,889
performed by mostly<font color="#E5E5E5"> by K filter fiber</font>

126
00:05:26,990 --> 00:05:34,820
context which is<font color="#E5E5E5"> load function this name</font>

127
00:05:30,889 --> 00:05:37,909
is originally here to prevent<font color="#E5E5E5"> reverser</font>

128
00:05:34,820 --> 00:05:41,840
to know what it's doing<font color="#CCCCCC"> so it's</font><font color="#E5E5E5"> a trying</font>

129
00:05:37,909 --> 00:05:44,510
to maybe hide itself with a unrelated

130
00:05:41,840 --> 00:05:44,989
name and this function<font color="#E5E5E5"> is called in to</font>

131
00:05:44,510 --> 00:05:48,889
<font color="#E5E5E5">manners</font>

132
00:05:44,990 --> 00:05:51,320
the first manner is by<font color="#E5E5E5"> K e in it for</font>

133
00:05:48,889 --> 00:05:52,940
specific<font color="#CCCCCC"> state and it will use some</font>

134
00:05:51,320 --> 00:05:55,849
tricks to call k a filter<font color="#CCCCCC"> from our</font>

135
00:05:52,940 --> 00:05:58,009
context it won't just call it directly

136
00:05:55,849 --> 00:06:00,530
it<font color="#E5E5E5"> will trigger an exception under with</font>

137
00:05:58,009 --> 00:06:03,590
<font color="#CCCCCC">a</font><font color="#E5E5E5"> divider but this divider is built in a</font>

138
00:06:00,530 --> 00:06:05,508
specific manner such as it will use two

139
00:06:03,590 --> 00:06:07,698
global variables which are<font color="#CCCCCC"> KD debugger</font>

140
00:06:05,509 --> 00:06:10,070
<font color="#E5E5E5">not present on</font><font color="#CCCCCC"> KDP</font><font color="#E5E5E5"> debugger on you may</font>

141
00:06:07,699 --> 00:06:13,940
guess that basically if patch cord

142
00:06:10,070 --> 00:06:18,070
detects a debugger then it will<font color="#E5E5E5"> not be</font>

143
00:06:13,940 --> 00:06:20,599
launched so this is nice<font color="#E5E5E5"> new value so</font>

144
00:06:18,070 --> 00:06:22,520
once this happened<font color="#E5E5E5"> the exception handler</font>

145
00:06:20,599 --> 00:06:24,500
<font color="#CCCCCC">is triggered on</font><font color="#E5E5E5"> in the exception under</font>

146
00:06:22,520 --> 00:06:26,659
there is a call to<font color="#CCCCCC"> care filter further</font>

147
00:06:24,500 --> 00:06:29,840
context and this call is particular

148
00:06:26,659 --> 00:06:31,520
since<font color="#E5E5E5"> it's as 0 parameter which gives a</font>

149
00:06:29,840 --> 00:06:34,700
<font color="#CCCCCC">good in about the fact that it's called</font>

150
00:06:31,520 --> 00:06:36,529
elsewhere on the<font color="#E5E5E5"> factories it is it is</font>

151
00:06:34,700 --> 00:06:37,650
by<font color="#CCCCCC"> X license watching</font><font color="#E5E5E5"> each worker which</font>

152
00:06:36,529 --> 00:06:38,880
is call

153
00:06:37,650 --> 00:06:41,549
at the very<font color="#E5E5E5"> beginning</font><font color="#CCCCCC"> of the good</font><font color="#E5E5E5"> in</font>

154
00:06:38,880 --> 00:06:45,990
phase<font color="#E5E5E5"> one</font><font color="#CCCCCC"> initialization but once again</font>

155
00:06:41,550 --> 00:06:48,360
there<font color="#CCCCCC"> is some tricks to ID itself ok of</font>

156
00:06:45,990 --> 00:06:50,760
<font color="#CCCCCC">X place</font><font color="#E5E5E5"> don't watch it</font><font color="#CCCCCC"> worker we call a</font>

157
00:06:48,360 --> 00:06:53,130
<font color="#E5E5E5">filter</font><font color="#CCCCCC"> former context</font><font color="#E5E5E5"> with</font><font color="#CCCCCC"> only a 4%</font>

158
00:06:50,760 --> 00:06:56,610
chance<font color="#E5E5E5"> this is interesting because it</font>

159
00:06:53,130 --> 00:06:59,100
<font color="#CCCCCC">also means that it's assuming</font><font color="#E5E5E5"> that if</font>

160
00:06:56,610 --> 00:07:00,300
you think<font color="#E5E5E5"> that</font><font color="#CCCCCC"> you're</font><font color="#E5E5E5"> disabled</font><font color="#CCCCCC"> part</font>

161
00:06:59,100 --> 00:07:03,000
<font color="#E5E5E5">because you deserve worse on middle</font>

162
00:07:00,300 --> 00:07:05,430
<font color="#E5E5E5">maybe you didn't didn't disable this</font><font color="#CCCCCC"> one</font>

163
00:07:03,000 --> 00:07:08,870
so maybe your computer<font color="#CCCCCC"> will crash 1 out</font>

164
00:07:05,430 --> 00:07:11,850
of<font color="#E5E5E5"> 100 times</font><font color="#CCCCCC"> oh yeah</font>

165
00:07:08,870 --> 00:07:14,669
in this<font color="#E5E5E5"> case our structure is passed as</font>

166
00:07:11,850 --> 00:07:18,360
a parameter which will allow new methods

167
00:07:14,669 --> 00:07:21,120
of initialization so let's talk<font color="#E5E5E5"> about</font><font color="#CCCCCC"> a</font>

168
00:07:18,360 --> 00:07:23,310
further context<font color="#E5E5E5"> itself</font><font color="#CCCCCC"> it's a small</font>

169
00:07:21,120 --> 00:07:26,550
function<font color="#CCCCCC"> it has fewer checks of the bag</font>

170
00:07:23,310 --> 00:07:28,770
and it we call ki in<font color="#E5E5E5"> each patch what</font>

171
00:07:26,550 --> 00:07:30,419
context which is<font color="#CCCCCC"> actually a</font><font color="#E5E5E5"> name</font>

172
00:07:28,770 --> 00:07:32,370
<font color="#E5E5E5">function but in literacy it's called</font>

173
00:07:30,419 --> 00:07:36,330
this way by<font color="#E5E5E5"> previous research it will</font>

174
00:07:32,370 --> 00:07:39,810
search so I<font color="#E5E5E5"> keep this name since it's</font>

175
00:07:36,330 --> 00:07:41,880
pretty relevant<font color="#E5E5E5"> the thing is this</font>

176
00:07:39,810 --> 00:07:43,740
function will initialize a patch<font color="#CCCCCC"> but</font>

177
00:07:41,880 --> 00:07:46,380
<font color="#E5E5E5">context and is actually called several</font>

178
00:07:43,740 --> 00:07:49,080
<font color="#E5E5E5">times</font><font color="#CCCCCC"> so this</font><font color="#E5E5E5"> means that at any</font><font color="#CCCCCC"> moment</font>

179
00:07:46,380 --> 00:07:51,180
<font color="#E5E5E5">in the system there will</font><font color="#CCCCCC"> be multiple</font>

180
00:07:49,080 --> 00:07:53,010
<font color="#E5E5E5">paths</font><font color="#CCCCCC"> got context running so if you</font>

181
00:07:51,180 --> 00:07:55,889
disable one<font color="#E5E5E5"> there is probably another</font>

182
00:07:53,010 --> 00:07:57,419
one running the first call<font color="#E5E5E5"> to this</font>

183
00:07:55,889 --> 00:08:00,180
function will<font color="#CCCCCC"> occur no matter what the</font>

184
00:07:57,419 --> 00:08:02,280
second<font color="#CCCCCC"> goal will only have 50%</font><font color="#E5E5E5"> chances</font>

185
00:08:00,180 --> 00:08:06,210
of occurring on the circle<font color="#CCCCCC"> a Squatch</font>

186
00:08:02,280 --> 00:08:08,809
<font color="#CCCCCC">official will discuss</font><font color="#E5E5E5"> it there is also a</font>

187
00:08:06,210 --> 00:08:12,120
notification of<font color="#E5E5E5"> a callback which is</font>

188
00:08:08,810 --> 00:08:14,520
interesting we'll see why<font color="#E5E5E5"> there are two</font>

189
00:08:12,120 --> 00:08:17,370
other methods<font color="#CCCCCC"> that are not</font><font color="#E5E5E5"> joining</font><font color="#CCCCCC"> to a</font>

190
00:08:14,520 --> 00:08:21,560
filter for<font color="#CCCCCC"> a context but I put it here</font>

191
00:08:17,370 --> 00:08:23,610
such because it's<font color="#E5E5E5"> related to methods so</font>

192
00:08:21,560 --> 00:08:28,320
compared to Windows 8.1

193
00:08:23,610 --> 00:08:30,960
did these<font color="#CCCCCC"> three methods are new</font><font color="#E5E5E5"> we'll</font>

194
00:08:28,320 --> 00:08:32,700
discuss<font color="#E5E5E5"> it but I explained I talked</font>

195
00:08:30,960 --> 00:08:35,669
about<font color="#CCCCCC"> part Watson test but now I will</font>

196
00:08:32,700 --> 00:08:38,760
try<font color="#CCCCCC"> to</font><font color="#E5E5E5"> describe what it is</font><font color="#CCCCCC"> in literacy</font>

197
00:08:35,669 --> 00:08:41,598
<font color="#E5E5E5">patch cotton is used to describe</font><font color="#CCCCCC"> for</font>

198
00:08:38,760 --> 00:08:45,930
<font color="#E5E5E5">structure that is used</font><font color="#CCCCCC"> by</font><font color="#E5E5E5"> special to</font>

199
00:08:41,599 --> 00:08:48,390
perform checks<font color="#E5E5E5"> random checks and not to</font>

200
00:08:45,930 --> 00:08:51,160
perform checks and actually most<font color="#CCCCCC"> of the</font>

201
00:08:48,390 --> 00:08:54,339
<font color="#E5E5E5">people tend to modify this</font>

202
00:08:51,160 --> 00:08:55,689
<font color="#E5E5E5">this name by also including the</font>

203
00:08:54,339 --> 00:08:57,490
<font color="#CCCCCC">community is a method that</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> used</font>

204
00:08:55,690 --> 00:08:59,110
because when someone say I found<font color="#CCCCCC"> the</font>

205
00:08:57,490 --> 00:09:00,790
page<font color="#E5E5E5"> for context they don't say I found</font>

206
00:08:59,110 --> 00:09:03,699
<font color="#E5E5E5">the bad context structure and say I</font>

207
00:09:00,790 --> 00:09:06,189
found<font color="#E5E5E5"> a whole process of</font><font color="#CCCCCC"> patch card so I</font>

208
00:09:03,699 --> 00:09:08,380
like<font color="#CCCCCC"> to consider that pedrad context is</font>

209
00:09:06,190 --> 00:09:11,290
actually<font color="#CCCCCC"> a combination of a metal and a</font>

210
00:09:08,380 --> 00:09:13,329
structure so basically the<font color="#CCCCCC"> method is all</font>

211
00:09:11,290 --> 00:09:15,849
check or initialized<font color="#E5E5E5"> on triggered and</font>

212
00:09:13,329 --> 00:09:17,500
the structure holds<font color="#E5E5E5"> every information</font>

213
00:09:15,850 --> 00:09:23,410
that is necessary<font color="#CCCCCC"> for part</font><font color="#E5E5E5"> got to</font>

214
00:09:17,500 --> 00:09:25,360
proceed with checks so what about the

215
00:09:23,410 --> 00:09:27,759
structure<font color="#E5E5E5"> so structure is organized in</font>

216
00:09:25,360 --> 00:09:30,579
<font color="#E5E5E5">three parts there will be the first part</font>

217
00:09:27,759 --> 00:09:32,740
<font color="#E5E5E5">which basically hold decryption loading</font>

218
00:09:30,579 --> 00:09:34,899
which will be<font color="#E5E5E5"> executed from this part</font>

219
00:09:32,740 --> 00:09:36,130
intake structure on some<font color="#E5E5E5"> nga API</font>

220
00:09:34,899 --> 00:09:38,500
function pointer which are necessary

221
00:09:36,130 --> 00:09:41,199
since the<font color="#E5E5E5"> structure and the patrol</font>

222
00:09:38,500 --> 00:09:44,620
context would<font color="#CCCCCC"> be</font><font color="#E5E5E5"> allocated at a random</font>

223
00:09:41,199 --> 00:09:46,810
area<font color="#E5E5E5"> so to resolve function pointer it</font>

224
00:09:44,620 --> 00:09:49,420
will be may be<font color="#CCCCCC"> complicated so</font><font color="#E5E5E5"> basically</font>

225
00:09:46,810 --> 00:09:51,459
it's holding its own function table

226
00:09:49,420 --> 00:09:52,990
<font color="#E5E5E5">there are some flags that are</font><font color="#CCCCCC"> used all</font>

227
00:09:51,459 --> 00:09:55,060
along<font color="#E5E5E5"> at some random variables such as</font>

228
00:09:52,990 --> 00:09:58,440
for example<font color="#E5E5E5"> the total amount of that as</font>

229
00:09:55,060 --> 00:10:03,130
it<font color="#CCCCCC"> has been already checked many</font><font color="#E5E5E5"> other</font>

230
00:09:58,440 --> 00:10:05,889
variables<font color="#E5E5E5"> the second part with old some</font>

231
00:10:03,130 --> 00:10:08,260
<font color="#CCCCCC">Pte</font><font color="#E5E5E5"> page table entries basically patch</font>

232
00:10:05,889 --> 00:10:11,980
<font color="#CCCCCC">Col will save them for later use and we</font>

233
00:10:08,260 --> 00:10:14,500
see how it<font color="#E5E5E5"> is quite important</font><font color="#CCCCCC"> it will</font>

234
00:10:11,980 --> 00:10:17,139
<font color="#E5E5E5">also save the full code of some ng</font>

235
00:10:14,500 --> 00:10:21,670
<font color="#CCCCCC">routine such as ke bug check or okay bug</font>

236
00:10:17,139 --> 00:10:24,069
check<font color="#E5E5E5"> X you may guess that also it's a</font>

237
00:10:21,670 --> 00:10:26,439
<font color="#E5E5E5">very important for later use</font><font color="#CCCCCC"> there's</font>

238
00:10:24,069 --> 00:10:28,329
<font color="#E5E5E5">also</font><font color="#CCCCCC"> full check of the check routines on</font>

239
00:10:26,440 --> 00:10:33,040
some steps which are used by<font color="#E5E5E5"> to check</font>

240
00:10:28,329 --> 00:10:34,660
routines which likely like the user is

241
00:10:33,040 --> 00:10:36,579
<font color="#E5E5E5">very important so</font><font color="#CCCCCC"> that an attacker</font>

242
00:10:34,660 --> 00:10:39,550
cannot just hook the check routines

243
00:10:36,579 --> 00:10:43,060
because yeah<font color="#E5E5E5"> obvious reason if you were</font>

244
00:10:39,550 --> 00:10:46,599
to check<font color="#CCCCCC"> routine that</font><font color="#E5E5E5"> and then is</font><font color="#CCCCCC"> so</font><font color="#E5E5E5"> so</font>

245
00:10:43,060 --> 00:10:48,699
<font color="#E5E5E5">and the third part is very interesting</font>

246
00:10:46,600 --> 00:10:50,649
because it will contain an array of

247
00:10:48,699 --> 00:10:52,599
critical<font color="#CCCCCC"> structure data which will</font>

248
00:10:50,649 --> 00:10:55,870
contain actually all that<font color="#E5E5E5"> is</font><font color="#CCCCCC"> necessary</font>

249
00:10:52,600 --> 00:10:58,210
for<font color="#E5E5E5"> part</font><font color="#CCCCCC"> got to analyze</font>

250
00:10:55,870 --> 00:11:00,520
structure<font color="#E5E5E5"> and for example it may look</font>

251
00:10:58,210 --> 00:11:02,320
like<font color="#E5E5E5"> this from exist doctor for example</font>

252
00:11:00,520 --> 00:11:05,770
Zuri's the type of the structure which

253
00:11:02,320 --> 00:11:08,710
is also<font color="#CCCCCC"> the argument</font><font color="#E5E5E5"> given</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> ke</font><font color="#CCCCCC"> bap</font>

254
00:11:05,770 --> 00:11:11,079
check and for<font color="#E5E5E5"> example it it's too</font><font color="#CCCCCC"> if the</font>

255
00:11:08,710 --> 00:11:14,740
<font color="#E5E5E5">IDT is modified</font><font color="#CCCCCC"> three if the g dt is</font>

256
00:11:11,080 --> 00:11:16,450
modified and it's there is also<font color="#E5E5E5"> a</font>

257
00:11:14,740 --> 00:11:17,770
pointer to<font color="#E5E5E5"> the</font><font color="#CCCCCC"> data</font><font color="#E5E5E5"> the size of the data</font>

258
00:11:16,450 --> 00:11:19,690
which are necessary<font color="#E5E5E5"> to</font><font color="#CCCCCC"> perform the</font>

259
00:11:17,770 --> 00:11:21,490
checksum of course and there is the

260
00:11:19,690 --> 00:11:24,100
original arch that has been<font color="#E5E5E5"> computed at</font>

261
00:11:21,490 --> 00:11:26,140
<font color="#CCCCCC">in his initialization</font><font color="#E5E5E5"> time and will be</font>

262
00:11:24,100 --> 00:11:28,750
<font color="#E5E5E5">compared after and there are some</font>

263
00:11:26,140 --> 00:11:31,660
<font color="#CCCCCC">specific values which are</font><font color="#E5E5E5"> used depending</font>

264
00:11:28,750 --> 00:11:34,420
<font color="#E5E5E5">on</font><font color="#CCCCCC"> each</font><font color="#E5E5E5"> structure that is checked for</font>

265
00:11:31,660 --> 00:11:38,620
example for<font color="#E5E5E5"> zeg the specific values</font>

266
00:11:34,420 --> 00:11:41,170
contain the process number<font color="#E5E5E5"> so processor</font>

267
00:11:38,620 --> 00:11:41,740
<font color="#E5E5E5">number so that since the IDT is process</font>

268
00:11:41,170 --> 00:11:44,260
<font color="#E5E5E5">on bond</font>

269
00:11:41,740 --> 00:11:46,029
this means that<font color="#CCCCCC"> budge</font><font color="#E5E5E5"> call we need to</font>

270
00:11:44,260 --> 00:11:49,240
execute<font color="#E5E5E5"> on the same</font><font color="#CCCCCC"> processor to</font><font color="#E5E5E5"> get the</font>

271
00:11:46,029 --> 00:11:53,920
same<font color="#CCCCCC"> IDT so basically it may change</font>

272
00:11:49,240 --> 00:11:57,730
regarding its structure<font color="#CCCCCC"> so regarding</font>

273
00:11:53,920 --> 00:12:01,060
methods<font color="#CCCCCC"> it's how much one initialize on</font>

274
00:11:57,730 --> 00:12:03,520
triggers check most of them are

275
00:12:01,060 --> 00:12:06,790
initialized by in ecological<font color="#E5E5E5"> context</font><font color="#CCCCCC"> as</font>

276
00:12:03,520 --> 00:12:09,400
<font color="#CCCCCC">I said</font><font color="#E5E5E5"> before but not all for ki any</font>

277
00:12:06,790 --> 00:12:11,349
part of context<font color="#E5E5E5"> what determines which</font>

278
00:12:09,400 --> 00:12:14,740
method to use is actually<font color="#E5E5E5"> the argument</font>

279
00:12:11,350 --> 00:12:16,570
<font color="#CCCCCC">and when I say</font><font color="#E5E5E5"> many method here which</font>

280
00:12:14,740 --> 00:12:19,330
means<font color="#E5E5E5"> that given</font><font color="#CCCCCC"> G argument which could</font>

281
00:12:16,570 --> 00:12:22,300
be one<font color="#CCCCCC"> of this method which are 0 1 2 3</font>

282
00:12:19,330 --> 00:12:28,000
<font color="#E5E5E5">4</font><font color="#CCCCCC"> 5 7 no 6 I know no</font><font color="#E5E5E5"> white</font><font color="#CCCCCC"> there is</font><font color="#E5E5E5"> no 6</font>

283
00:12:22,300 --> 00:12:29,890
<font color="#E5E5E5">in and and in this case yeah so the</font>

284
00:12:28,000 --> 00:12:31,990
argument decide which method to use so

285
00:12:29,890 --> 00:12:36,040
let's<font color="#E5E5E5"> have a look to argument ki in each</font>

286
00:12:31,990 --> 00:12:38,230
part<font color="#E5E5E5"> of</font><font color="#CCCCCC"> our</font><font color="#E5E5E5"> context for us the two main</font>

287
00:12:36,040 --> 00:12:40,630
arguments<font color="#E5E5E5"> and in this presentation only</font>

288
00:12:38,230 --> 00:12:42,790
<font color="#E5E5E5">because of course I describe them better</font>

289
00:12:40,630 --> 00:12:44,800
in my white<font color="#E5E5E5"> paper right for this</font>

290
00:12:42,790 --> 00:12:46,569
<font color="#E5E5E5">presentation the two important</font><font color="#CCCCCC"> elements</font>

291
00:12:44,800 --> 00:12:49,719
or<font color="#E5E5E5"> the scheduling method which basically</font>

292
00:12:46,570 --> 00:12:52,000
<font color="#E5E5E5">is one of the six seven methods for me</font>

293
00:12:49,720 --> 00:12:54,790
for on a pointer to the structure<font color="#E5E5E5"> which</font>

294
00:12:52,000 --> 00:12:57,400
comes directly<font color="#CCCCCC"> from</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> x place onto a</font>

295
00:12:54,790 --> 00:13:00,459
change worker<font color="#CCCCCC"> if</font><font color="#E5E5E5"> I recall from here</font>

296
00:12:57,400 --> 00:13:04,720
basically<font color="#E5E5E5"> which only has a four percent</font>

297
00:13:00,459 --> 00:13:07,329
chance<font color="#E5E5E5"> of occurring so let's all look at</font>

298
00:13:04,720 --> 00:13:09,490
each method<font color="#E5E5E5"> the first one use a timer</font>

299
00:13:07,329 --> 00:13:11,529
with the division so basically

300
00:13:09,490 --> 00:13:15,760
<font color="#CCCCCC">godwyn mr i--'s DBC which is a deferred</font>

301
00:13:11,529 --> 00:13:18,820
procedure call on<font color="#CCCCCC"> a</font><font color="#E5E5E5"> context structure</font>

302
00:13:15,760 --> 00:13:20,880
and with<font color="#CCCCCC"> AES at college gavel timer it</font>

303
00:13:18,820 --> 00:13:25,149
<font color="#E5E5E5">was set timer with it which means that</font>

304
00:13:20,880 --> 00:13:27,790
in<font color="#E5E5E5"> system view basically it will go in</font>

305
00:13:25,149 --> 00:13:30,310
channel<font color="#E5E5E5"> structure which is</font><font color="#CCCCCC"> timer Eastern</font>

306
00:13:27,790 --> 00:13:32,079
tree and it will add the timer to this

307
00:13:30,310 --> 00:13:34,630
<font color="#E5E5E5">list on tree which will be triggered</font>

308
00:13:32,080 --> 00:13:36,100
regarding the due time and basically<font color="#CCCCCC"> if</font>

309
00:13:34,630 --> 00:13:37,899
you<font color="#E5E5E5"> want to disable this method you</font><font color="#CCCCCC"> just</font>

310
00:13:36,100 --> 00:13:40,660
have to go<font color="#E5E5E5"> through this time</font><font color="#CCCCCC"> recent tree</font>

311
00:13:37,899 --> 00:13:42,580
and find the timer<font color="#E5E5E5"> right the right timer</font>

312
00:13:40,660 --> 00:13:45,910
and set the due time to infinity is what

313
00:13:42,580 --> 00:13:48,010
patch<font color="#CCCCCC"> got won't trigger again the next</font>

314
00:13:45,910 --> 00:13:50,890
method or almost<font color="#E5E5E5"> the same method one</font><font color="#CCCCCC"> and</font>

315
00:13:48,010 --> 00:13:54,550
<font color="#CCCCCC">two</font><font color="#E5E5E5"> basically it will use a DPC unhide</font>

316
00:13:50,890 --> 00:13:56,740
<font color="#CCCCCC">it and</font><font color="#E5E5E5"> so it will initialize the DPC on</font>

317
00:13:54,550 --> 00:13:58,630
a<font color="#CCCCCC"> context</font><font color="#E5E5E5"> structure but instead</font><font color="#CCCCCC"> of</font>

318
00:13:56,740 --> 00:14:01,740
<font color="#E5E5E5">queuing directly with the timer or</font><font color="#CCCCCC"> earth</font>

319
00:13:58,630 --> 00:14:03,820
<font color="#E5E5E5">it will hide a pointer to</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> DPC into</font>

320
00:14:01,740 --> 00:14:06,360
structure in the kernel which is<font color="#E5E5E5"> the</font>

321
00:14:03,820 --> 00:14:09,700
process for user control block which<font color="#CCCCCC"> is</font>

322
00:14:06,360 --> 00:14:13,720
usually used by<font color="#E5E5E5"> the kernel to under</font>

323
00:14:09,700 --> 00:14:15,730
thread stuff on<font color="#CCCCCC"> system stuff</font><font color="#E5E5E5"> scheduling</font>

324
00:14:13,720 --> 00:14:17,350
stuff<font color="#CCCCCC"> and in</font><font color="#E5E5E5"> this case you can see that</font>

325
00:14:15,730 --> 00:14:20,260
<font color="#CCCCCC">there are two entries which</font><font color="#E5E5E5"> are each a</font>

326
00:14:17,350 --> 00:14:21,790
result on a CPI result<font color="#E5E5E5"> so now</font><font color="#CCCCCC"> that you</font>

327
00:14:20,260 --> 00:14:24,189
<font color="#CCCCCC">know that</font><font color="#E5E5E5"> you know why there are some</font>

328
00:14:21,790 --> 00:14:27,760
reserved<font color="#CCCCCC"> parts in Windows</font><font color="#E5E5E5"> camera its</font>

329
00:14:24,190 --> 00:14:29,829
tripod job and in this case the<font color="#CCCCCC"> HR</font>

330
00:14:27,760 --> 00:14:33,160
reserved<font color="#E5E5E5"> or</font><font color="#CCCCCC"> a CPI</font><font color="#E5E5E5"> reserved will hold</font>

331
00:14:29,829 --> 00:14:35,319
depending on we all may hold a pointer

332
00:14:33,160 --> 00:14:38,949
to<font color="#CCCCCC"> a</font><font color="#E5E5E5"> Kelly PC which</font><font color="#CCCCCC"> is by</font><font color="#E5E5E5"> drop typically</font>

333
00:14:35,320 --> 00:14:42,040
<font color="#E5E5E5">we see what's interesting here</font><font color="#CCCCCC"> is that</font>

334
00:14:38,950 --> 00:14:45,490
<font color="#CCCCCC">the sister is a system function</font><font color="#E5E5E5"> a legit</font>

335
00:14:42,040 --> 00:14:47,610
one which will actually Q this DPC<font color="#CCCCCC"> at</font>

336
00:14:45,490 --> 00:14:49,990
some point<font color="#E5E5E5"> for example</font><font color="#CCCCCC"> it may be</font>

337
00:14:47,610 --> 00:14:53,440
regarding some transition to either

338
00:14:49,990 --> 00:14:56,950
state<font color="#CCCCCC"> or other and once it occur it will</font>

339
00:14:53,440 --> 00:14:59,950
check<font color="#E5E5E5"> if</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> HR is our entry is is</font>

340
00:14:56,950 --> 00:15:03,459
zeroed or not<font color="#CCCCCC"> if it's not it will just</font>

341
00:14:59,950 --> 00:15:05,529
<font color="#E5E5E5">choose the PC and it will just</font><font color="#CCCCCC"> make</font><font color="#E5E5E5"> a</font>

342
00:15:03,459 --> 00:15:08,290
little check so that but God is not

343
00:15:05,529 --> 00:15:09,939
trigger too much<font color="#E5E5E5"> so there is it will</font>

344
00:15:08,290 --> 00:15:13,469
<font color="#E5E5E5">only check that at least two minutes</font>

345
00:15:09,940 --> 00:15:13,470
<font color="#E5E5E5">have elapsed</font><font color="#CCCCCC"> since the</font><font color="#E5E5E5"> last cue</font>

346
00:15:17,200 --> 00:15:26,290
so<font color="#E5E5E5"> symmetry is a specific as it</font><font color="#CCCCCC"> will use</font>

347
00:15:22,810 --> 00:15:28,750
the structure so<font color="#E5E5E5"> four percent chance</font><font color="#CCCCCC"> it</font>

348
00:15:26,290 --> 00:15:30,880
structures that's so this<font color="#E5E5E5"> made out this</font>

349
00:15:28,750 --> 00:15:33,870
particular<font color="#E5E5E5"> but let's have a look at as</font><font color="#CCCCCC"> a</font>

350
00:15:30,880 --> 00:15:37,149
<font color="#CCCCCC">structure that</font><font color="#E5E5E5"> is passed to</font><font color="#CCCCCC"> this method</font>

351
00:15:33,870 --> 00:15:38,769
basically<font color="#E5E5E5"> this is a structure and this</font>

352
00:15:37,149 --> 00:15:41,889
method<font color="#CCCCCC"> will</font><font color="#E5E5E5"> not in use two and three</font>

353
00:15:38,769 --> 00:15:43,990
which are a pointer to the PS<font color="#CCCCCC"> christened</font>

354
00:15:41,889 --> 00:15:47,769
thread function and pointer to the steps

355
00:15:43,990 --> 00:15:50,800
will check routine<font color="#E5E5E5"> so right now it's</font>

356
00:15:47,769 --> 00:15:52,449
<font color="#E5E5E5">pretty simple it will just create a new</font>

357
00:15:50,800 --> 00:15:53,920
<font color="#CCCCCC">system thread with a step to check</font>

358
00:15:52,449 --> 00:15:55,660
routine as a starter dress at the

359
00:15:53,920 --> 00:15:58,510
<font color="#E5E5E5">pointer to the contact structure as a</font>

360
00:15:55,660 --> 00:15:59,949
parameter<font color="#CCCCCC"> but</font><font color="#E5E5E5"> there is an American</font>

361
00:15:58,510 --> 00:16:03,339
toughest<font color="#E5E5E5"> question that is added that I</font>

362
00:15:59,949 --> 00:16:06,010
wanted<font color="#E5E5E5"> to point out and what's</font>

363
00:16:03,339 --> 00:16:09,010
interesting<font color="#E5E5E5"> is that</font><font color="#CCCCCC"> they're all their</font>

364
00:16:06,010 --> 00:16:10,569
<font color="#CCCCCC">own oral bypass that use to check the</font>

365
00:16:09,010 --> 00:16:13,329
<font color="#CCCCCC">started rest we don't fire</font><font color="#E5E5E5"> badge got</font>

366
00:16:10,570 --> 00:16:15,459
context so<font color="#CCCCCC"> a new version of part quad</font>

367
00:16:13,329 --> 00:16:18,099
modifies the spod rod context and

368
00:16:15,459 --> 00:16:21,459
<font color="#E5E5E5">modifies this part country in the and</font>

369
00:16:18,100 --> 00:16:24,579
<font color="#E5E5E5">start address country and put a pointer</font>

370
00:16:21,459 --> 00:16:27,219
to<font color="#CCCCCC"> k ballensat manager or</font><font color="#E5E5E5"> k swap project</font>

371
00:16:24,579 --> 00:16:30,069
process or stack or xbox<font color="#CCCCCC"> of red on earth</font>

372
00:16:27,220 --> 00:16:33,630
<font color="#E5E5E5">so so that you can't identify a</font><font color="#CCCCCC"> batch</font>

373
00:16:30,070 --> 00:16:38,890
<font color="#E5E5E5">glad Fred this</font><font color="#CCCCCC"> way</font><font color="#E5E5E5"> so yeah I found this</font>

374
00:16:33,630 --> 00:16:42,339
obfuscation quite elegant<font color="#E5E5E5"> so metal for</font>

375
00:16:38,890 --> 00:16:44,319
will cue an APC which is an<font color="#E5E5E5"> asynchronous</font>

376
00:16:42,339 --> 00:16:46,959
<font color="#CCCCCC">portion recall it will simply initialize</font>

377
00:16:44,320 --> 00:16:50,199
a context<font color="#CCCCCC"> switch on LPC on insert it in</font>

378
00:16:46,959 --> 00:16:54,099
an almost random system Fred yeah it's

379
00:16:50,199 --> 00:16:56,589
this one is simple<font color="#CCCCCC"> and the fifth one</font><font color="#E5E5E5"> is</font>

380
00:16:54,100 --> 00:16:59,560
actually<font color="#E5E5E5"> also quite elegant in my</font>

381
00:16:56,589 --> 00:17:01,180
opinion it<font color="#E5E5E5"> will use</font><font color="#CCCCCC"> the specific</font>

382
00:16:59,560 --> 00:17:05,470
<font color="#E5E5E5">structure which has only four</font><font color="#CCCCCC"> percent</font>

383
00:17:01,180 --> 00:17:07,990
chances of<font color="#E5E5E5"> occurring and this method</font>

384
00:17:05,470 --> 00:17:10,449
will basically hook<font color="#CCCCCC"> a regular</font><font color="#E5E5E5"> PC so to</font>

385
00:17:07,990 --> 00:17:12,819
do<font color="#CCCCCC"> so</font><font color="#E5E5E5"> it will get a pointer to the</font>

386
00:17:10,449 --> 00:17:15,540
global<font color="#E5E5E5"> DPC</font><font color="#CCCCCC"> which is actually legit the</font>

387
00:17:12,819 --> 00:17:19,569
pieces<font color="#E5E5E5"> that is</font><font color="#CCCCCC"> cued by the</font><font color="#E5E5E5"> system every</font>

388
00:17:15,540 --> 00:17:22,359
every second or so and it is<font color="#E5E5E5"> cube by ke</font>

389
00:17:19,569 --> 00:17:27,188
<font color="#E5E5E5">ballensat manager and the idea is that</font>

390
00:17:22,359 --> 00:17:30,520
<font color="#E5E5E5">pedrad will hook this legitimacy to to</font>

391
00:17:27,189 --> 00:17:31,390
hook to<font color="#CCCCCC"> cue its</font><font color="#E5E5E5"> own sometimes</font><font color="#CCCCCC"> I said</font>

392
00:17:30,520 --> 00:17:33,220
sometimes<font color="#CCCCCC"> it goes well</font>

393
00:17:31,390 --> 00:17:36,180
there will be a<font color="#E5E5E5"> concert that we that</font>

394
00:17:33,220 --> 00:17:40,330
will be like 120 times<font color="#CCCCCC"> around it</font>

395
00:17:36,180 --> 00:17:44,380
usually it's<font color="#CCCCCC"> 150 times on 130 times</font><font color="#E5E5E5"> so</font>

396
00:17:40,330 --> 00:17:47,590
between<font color="#E5E5E5"> this value under</font><font color="#CCCCCC"> 1</font><font color="#E5E5E5"> every 120</font>

397
00:17:44,380 --> 00:17:51,220
times it will<font color="#E5E5E5"> cue the PG DBC instead of</font>

398
00:17:47,590 --> 00:17:53,709
the<font color="#E5E5E5"> rigid one so it may be interesting</font>

399
00:17:51,220 --> 00:17:57,660
<font color="#CCCCCC">also to look if you want maybe you throw</font>

400
00:17:53,710 --> 00:18:02,140
yourself<font color="#E5E5E5"> to this legit routine so</font><font color="#CCCCCC"> yeah</font>

401
00:17:57,660 --> 00:18:04,210
so the<font color="#CCCCCC"> 7 one is</font><font color="#E5E5E5"> same seventh one is one</font>

402
00:18:02,140 --> 00:18:06,850
of<font color="#CCCCCC"> the new one</font><font color="#E5E5E5"> this one is very</font>

403
00:18:04,210 --> 00:18:10,930
<font color="#CCCCCC">interesting</font><font color="#E5E5E5"> because at first sight it</font>

404
00:18:06,850 --> 00:18:12,669
does nothing really<font color="#E5E5E5"> I looked at it and I</font>

405
00:18:10,930 --> 00:18:15,430
followed<font color="#E5E5E5"> it with timeless analogies</font>

406
00:18:12,670 --> 00:18:17,560
<font color="#E5E5E5">step-by-step and really it does nothing</font>

407
00:18:15,430 --> 00:18:19,390
<font color="#CCCCCC">because it will initialize</font><font color="#E5E5E5"> a</font><font color="#CCCCCC"> DPC</font>

408
00:18:17,560 --> 00:18:22,300
structure with a similar random routine

409
00:18:19,390 --> 00:18:23,710
and it will clears it right<font color="#E5E5E5"> after so for</font>

410
00:18:22,300 --> 00:18:25,389
now I have<font color="#E5E5E5"> no explanation about this</font>

411
00:18:23,710 --> 00:18:28,210
<font color="#E5E5E5">behavior in particular but there is</font>

412
00:18:25,390 --> 00:18:30,280
something<font color="#E5E5E5"> quite interesting in the rest</font>

413
00:18:28,210 --> 00:18:31,890
of<font color="#E5E5E5"> it and that it will initialize a</font>

414
00:18:30,280 --> 00:18:33,970
global<font color="#E5E5E5"> particle contact structure</font>

415
00:18:31,890 --> 00:18:36,550
basically<font color="#E5E5E5"> the</font><font color="#CCCCCC"> structures</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> talked</font>

416
00:18:33,970 --> 00:18:38,770
<font color="#CCCCCC">about</font><font color="#E5E5E5"> previously will be initialized in</font>

417
00:18:36,550 --> 00:18:42,190
memory<font color="#E5E5E5"> and there will be</font><font color="#CCCCCC"> global pointer</font>

418
00:18:38,770 --> 00:18:44,560
pointing to it<font color="#E5E5E5"> and what's interesting is</font>

419
00:18:42,190 --> 00:18:47,140
this global patch quad context rupture

420
00:18:44,560 --> 00:18:49,690
is actually in<font color="#E5E5E5"> clear text in memory so</font>

421
00:18:47,140 --> 00:18:51,580
if tomorrow you<font color="#E5E5E5"> want to analyze</font><font color="#CCCCCC"> bad</font><font color="#E5E5E5"> quad</font>

422
00:18:49,690 --> 00:18:53,980
<font color="#E5E5E5">on don't know where start basically I</font>

423
00:18:51,580 --> 00:18:55,750
<font color="#CCCCCC">will I will tell</font><font color="#E5E5E5"> you to start by</font>

424
00:18:53,980 --> 00:18:58,900
<font color="#E5E5E5">watching to this page wasn't</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> suture as</font>

425
00:18:55,750 --> 00:19:04,810
is as<font color="#E5E5E5"> as it's in clear text in memory so</font>

426
00:18:58,900 --> 00:19:06,220
it's a<font color="#CCCCCC"> very good</font><font color="#E5E5E5"> way to start so this</font>

427
00:19:04,810 --> 00:19:09,100
<font color="#E5E5E5">part of context which is actually used</font>

428
00:19:06,220 --> 00:19:12,390
<font color="#E5E5E5">by</font><font color="#CCCCCC"> the two new other methods and this</font><font color="#E5E5E5"> is</font>

429
00:19:09,100 --> 00:19:15,820
it may be interesting<font color="#E5E5E5"> the idea is that</font>

430
00:19:12,390 --> 00:19:18,400
first first method come back the

431
00:19:15,820 --> 00:19:20,800
callback method<font color="#CCCCCC"> come back basically will</font>

432
00:19:18,400 --> 00:19:23,410
set verification<font color="#E5E5E5"> routine pointer into a</font>

433
00:19:20,800 --> 00:19:25,600
global variable<font color="#CCCCCC"> and at this</font><font color="#E5E5E5"> point we may</font>

434
00:19:23,410 --> 00:19:27,580
ask who created this<font color="#E5E5E5"> callback in the</font>

435
00:19:25,600 --> 00:19:30,010
first place<font color="#CCCCCC"> and</font><font color="#E5E5E5"> with timeless</font><font color="#CCCCCC"> tweaking</font>

436
00:19:27,580 --> 00:19:32,699
we can apply<font color="#E5E5E5"> to the object and we go</font>

437
00:19:30,010 --> 00:19:34,930
<font color="#CCCCCC">straight to another circa 40 which is</font>

438
00:19:32,700 --> 00:19:38,800
<font color="#E5E5E5">rated to Windows Defender advanced</font>

439
00:19:34,930 --> 00:19:40,810
threat protection and this<font color="#E5E5E5"> is</font><font color="#CCCCCC"> actors</font>

440
00:19:38,800 --> 00:19:45,540
<font color="#CCCCCC">first</font><font color="#E5E5E5"> time there when we can see a link</font>

441
00:19:40,810 --> 00:19:45,540
between CMS second Falchi<font color="#CCCCCC"> patch Bob</font>

442
00:19:46,200 --> 00:19:51,659
there is also the KISW<font color="#CCCCCC"> interrupts</font>

443
00:19:48,929 --> 00:19:54,299
dispatcher which is almost<font color="#E5E5E5"> new it has</font>

444
00:19:51,659 --> 00:19:56,820
been first<font color="#E5E5E5"> thing by autumn</font><font color="#CCCCCC"> shishkin in</font>

445
00:19:54,299 --> 00:20:00,000
<font color="#E5E5E5">the</font><font color="#CCCCCC"> TWiT and it's called by KISW</font>

446
00:19:56,820 --> 00:20:02,840
<font color="#E5E5E5">unchurched and it's an</font><font color="#CCCCCC"> IDT</font><font color="#E5E5E5"> function and</font>

447
00:20:00,000 --> 00:20:06,630
it will use gravel pad context as well

448
00:20:02,840 --> 00:20:08,820
the last method not<font color="#E5E5E5"> exact last but last</font>

449
00:20:06,630 --> 00:20:10,890
method is CC<font color="#E5E5E5"> initialized</font><font color="#CCCCCC"> bc vo filer</font>

450
00:20:08,820 --> 00:20:13,200
<font color="#E5E5E5">and this one is quite</font><font color="#CCCCCC"> special because</font><font color="#E5E5E5"> it</font>

451
00:20:10,890 --> 00:20:15,029
doesn't use<font color="#CCCCCC"> part quad context</font><font color="#E5E5E5"> feature it</font>

452
00:20:13,200 --> 00:20:18,240
will<font color="#E5E5E5"> only use specific structures that</font>

453
00:20:15,029 --> 00:20:22,770
<font color="#E5E5E5">is that it will ship itself under use</font>

454
00:20:18,240 --> 00:20:24,330
itself<font color="#E5E5E5"> this this one is quite small it</font>

455
00:20:22,770 --> 00:20:27,029
won't check the entire statement will

456
00:20:24,330 --> 00:20:30,360
only check one specific<font color="#E5E5E5"> routine from the</font>

457
00:20:27,029 --> 00:20:33,179
NGO<font color="#E5E5E5"> s</font><font color="#CCCCCC"> kernel from binary and check for</font>

458
00:20:30,360 --> 00:20:36,479
<font color="#E5E5E5">its integrity</font><font color="#CCCCCC"> and this routine is</font>

459
00:20:33,179 --> 00:20:39,270
actually random<font color="#E5E5E5"> one for one for</font><font color="#CCCCCC"> each</font>

460
00:20:36,480 --> 00:20:41,549
boot so it's very very<font color="#E5E5E5"> rare but it may</font>

461
00:20:39,270 --> 00:20:46,500
occur it's not for him we<font color="#CCCCCC"> disable it</font>

462
00:20:41,549 --> 00:20:49,020
anyway<font color="#CCCCCC"> so now</font><font color="#E5E5E5"> adopt</font><font color="#CCCCCC"> with cinge</font>

463
00:20:46,500 --> 00:20:52,380
<font color="#CCCCCC">initialization</font><font color="#E5E5E5"> let's see our patch god</font>

464
00:20:49,020 --> 00:20:54,720
triggers check<font color="#E5E5E5"> there are multiple way of</font>

465
00:20:52,380 --> 00:20:56,190
to<font color="#CCCCCC"> kernel check</font><font color="#E5E5E5"> series within</font><font color="#CCCCCC"> that there</font>

466
00:20:54,720 --> 00:20:59,340
is the DPC the system<font color="#E5E5E5"> fight the</font>

467
00:20:56,190 --> 00:21:01,590
asynchronous possible the KISW<font color="#E5E5E5"> interview</font>

468
00:20:59,340 --> 00:21:04,139
dispatcher<font color="#E5E5E5"> and the global vibe from NSC</font>

469
00:21:01,590 --> 00:21:07,439
<font color="#E5E5E5">FLT and so</font><font color="#CCCCCC"> CC initialize this we</font>

470
00:21:04,140 --> 00:21:10,080
<font color="#CCCCCC">profiler so we'll go with</font><font color="#E5E5E5"> the DPC which</font>

471
00:21:07,440 --> 00:21:12,299
is actually the historical<font color="#CCCCCC"> one</font><font color="#E5E5E5"> right now</font>

472
00:21:10,080 --> 00:21:15,960
it's<font color="#E5E5E5"> worth the content but</font><font color="#CCCCCC"> i want to</font>

473
00:21:12,299 --> 00:21:17,600
<font color="#E5E5E5">explain to</font><font color="#CCCCCC"> you maybe in a comprehensive</font>

474
00:21:15,960 --> 00:21:23,309
way

475
00:21:17,600 --> 00:21:26,389
so here is what a DPC look like<font color="#E5E5E5"> it will</font>

476
00:21:23,309 --> 00:21:29,840
first check whether or not<font color="#CCCCCC"> the DPC</font><font color="#E5E5E5"> is</font>

477
00:21:26,390 --> 00:21:33,029
the pointer to<font color="#CCCCCC"> the differ context is</font>

478
00:21:29,840 --> 00:21:35,730
sorry<font color="#E5E5E5"> it will first check if the DPC</font><font color="#CCCCCC"> is</font>

479
00:21:33,029 --> 00:21:38,490
a<font color="#E5E5E5"> patch custom text one and then it will</font>

480
00:21:35,730 --> 00:21:41,190
trigger an exception under and then it

481
00:21:38,490 --> 00:21:42,990
will decrypt the structure and finally

482
00:21:41,190 --> 00:21:45,630
it<font color="#E5E5E5"> will pass control to the verification</font>

483
00:21:42,990 --> 00:21:47,580
regime so how it does this<font color="#E5E5E5"> the first</font>

484
00:21:45,630 --> 00:21:50,159
thing<font color="#E5E5E5"> it does</font><font color="#CCCCCC"> to check whether or not</font>

485
00:21:47,580 --> 00:21:52,789
<font color="#E5E5E5">the</font><font color="#CCCCCC"> DBC is</font><font color="#E5E5E5"> virtual context</font><font color="#CCCCCC"> it is</font><font color="#E5E5E5"> to</font>

486
00:21:50,159 --> 00:21:57,570
check<font color="#E5E5E5"> whether or not the</font><font color="#CCCCCC"> FIR context as</font>

487
00:21:52,789 --> 00:21:58,230
canonical<font color="#E5E5E5"> pointer</font><font color="#CCCCCC"> so basically if the</font>

488
00:21:57,570 --> 00:22:00,870
pointer star

489
00:21:58,230 --> 00:22:03,030
by ffff then it's called pointers<font color="#E5E5E5"> and</font>

490
00:22:00,870 --> 00:22:05,729
it's not<font color="#CCCCCC"> patch cotton</font><font color="#E5E5E5"> text otherwise it</font>

491
00:22:03,030 --> 00:22:07,889
is on in this case<font color="#E5E5E5"> if it is then it will</font>

492
00:22:05,730 --> 00:22:10,940
trigger an exception on<font color="#E5E5E5"> Roderick which I</font>

493
00:22:07,890 --> 00:22:12,330
like to<font color="#CCCCCC"> call</font><font color="#E5E5E5"> Russian</font><font color="#CCCCCC"> roulette trick and</font>

494
00:22:10,940 --> 00:22:14,580
here's why

495
00:22:12,330 --> 00:22:16,980
basically there<font color="#CCCCCC"> is a list of</font><font color="#E5E5E5"> chakra</font>

496
00:22:14,580 --> 00:22:19,080
function<font color="#E5E5E5"> each function will call the</font>

497
00:22:16,980 --> 00:22:22,799
next<font color="#E5E5E5"> one on the list on decrement a</font>

498
00:22:19,080 --> 00:22:24,600
pointer on<font color="#E5E5E5"> once this pointer is 0 then H</font>

499
00:22:22,799 --> 00:22:27,299
with their phones<font color="#CCCCCC"> an invalid pointer and</font>

500
00:22:24,600 --> 00:22:29,939
which will trigger an exception under<font color="#E5E5E5"> on</font>

501
00:22:27,299 --> 00:22:32,429
in this exception under the contact

502
00:22:29,940 --> 00:22:35,130
structure will be decrypted

503
00:22:32,429 --> 00:22:37,650
at<font color="#E5E5E5"> this point</font><font color="#CCCCCC"> we</font><font color="#E5E5E5"> want to know how it is</font>

504
00:22:35,130 --> 00:22:40,230
decrypted well at first there were only

505
00:22:37,650 --> 00:22:42,960
one layer but<font color="#CCCCCC"> there realized</font><font color="#E5E5E5"> as some</font>

506
00:22:40,230 --> 00:22:44,970
attackers could retrieve it anyway by

507
00:22:42,960 --> 00:22:48,320
<font color="#E5E5E5">brute forcing on going through</font><font color="#CCCCCC"> the whole</font>

508
00:22:44,970 --> 00:22:51,210
memory<font color="#E5E5E5"> so they added some specification</font>

509
00:22:48,320 --> 00:22:53,939
so the first layer decrypt the entire

510
00:22:51,210 --> 00:22:56,370
context rupture<font color="#E5E5E5"> and let a header that</font><font color="#CCCCCC"> is</font>

511
00:22:53,940 --> 00:23:00,240
equal to<font color="#CCCCCC"> CC CC so basically it's not</font>

512
00:22:56,370 --> 00:23:04,199
very good so it will rewrite the<font color="#CCCCCC"> four</font>

513
00:23:00,240 --> 00:23:06,480
first bytes and this is yeah<font color="#CCCCCC"> we're about</font>

514
00:23:04,200 --> 00:23:08,040
<font color="#E5E5E5">it this is interesting because this for</font>

515
00:23:06,480 --> 00:23:10,470
first byte are actually self-modifying

516
00:23:08,040 --> 00:23:13,350
code<font color="#E5E5E5"> it will</font><font color="#CCCCCC"> actually be executed right</font>

517
00:23:10,470 --> 00:23:15,030
after so basically it will decrypt the

518
00:23:13,350 --> 00:23:17,939
<font color="#CCCCCC">rest of the structure</font><font color="#E5E5E5"> but we encrypt the</font>

519
00:23:15,030 --> 00:23:20,629
<font color="#CCCCCC">fortress by with the will itself and I</font>

520
00:23:17,940 --> 00:23:22,710
want to just point out something<font color="#E5E5E5"> about</font>

521
00:23:20,630 --> 00:23:25,049
this for first light as<font color="#E5E5E5"> they</font><font color="#CCCCCC"> are</font>

522
00:23:22,710 --> 00:23:27,780
rewritten<font color="#CCCCCC"> one</font><font color="#E5E5E5"> they may be</font><font color="#CCCCCC"> rewritten</font><font color="#E5E5E5"> in</font>

523
00:23:25,049 --> 00:23:30,090
<font color="#E5E5E5">different way the first way is for</font>

524
00:23:27,780 --> 00:23:33,178
example<font color="#E5E5E5"> one by one and here you can see</font>

525
00:23:30,090 --> 00:23:36,120
that yeah<font color="#CCCCCC"> Sasori instruction is written</font>

526
00:23:33,179 --> 00:23:39,330
<font color="#E5E5E5">will</font><font color="#CCCCCC"> exist</font><font color="#E5E5E5"> but it also can use a soar</font>

527
00:23:36,120 --> 00:23:43,500
instruction<font color="#E5E5E5"> and also can use a rotation</font>

528
00:23:39,330 --> 00:23:45,330
so<font color="#E5E5E5"> that you see the origin of this</font>

529
00:23:43,500 --> 00:23:50,090
obfuscation<font color="#E5E5E5"> is probably because</font><font color="#CCCCCC"> they</font>

530
00:23:45,330 --> 00:23:53,220
<font color="#E5E5E5">don't want you</font><font color="#CCCCCC"> to find magic</font><font color="#E5E5E5"> value in</font>

531
00:23:50,090 --> 00:23:55,439
magic<font color="#E5E5E5"> value in in the binary so they</font>

532
00:23:53,220 --> 00:24:02,549
hide the magic<font color="#CCCCCC"> value which is actually a</font>

533
00:23:55,440 --> 00:24:04,650
<font color="#CCCCCC">1:1</font><font color="#E5E5E5"> travel etcetera so once this</font><font color="#CCCCCC"> context</font>

534
00:24:02,549 --> 00:24:06,299
structure is decrypted<font color="#E5E5E5"> basically it will</font>

535
00:24:04,650 --> 00:24:09,900
<font color="#E5E5E5">pass control to the verification routine</font>

536
00:24:06,299 --> 00:24:11,480
<font color="#E5E5E5">but that's not as simple as it seems</font>

537
00:24:09,900 --> 00:24:14,750
<font color="#E5E5E5">first it must is</font>

538
00:24:11,480 --> 00:24:17,690
not perform some checks<font color="#CCCCCC"> basically it</font>

539
00:24:14,750 --> 00:24:19,790
will check<font color="#E5E5E5"> the petrol integrity that</font>

540
00:24:17,690 --> 00:24:21,800
contextual<font color="#CCCCCC"> integrity which is necessary</font>

541
00:24:19,790 --> 00:24:25,190
to<font color="#E5E5E5"> check whether or not and that occurs</font>

542
00:24:21,800 --> 00:24:27,710
modified it during its<font color="#E5E5E5"> sleep and it will</font>

543
00:24:25,190 --> 00:24:29,990
<font color="#CCCCCC">also check the integrity of 47 routines</font>

544
00:24:27,710 --> 00:24:33,650
or part of routines which for example

545
00:24:29,990 --> 00:24:35,410
<font color="#CCCCCC">our blog of exporter thread or the</font>

546
00:24:33,650 --> 00:24:40,760
<font color="#E5E5E5">exception on</font><font color="#CCCCCC"> their of ex Walker</font><font color="#E5E5E5"> side</font>

547
00:24:35,410 --> 00:24:43,310
which are actually out points of that

548
00:24:40,760 --> 00:24:48,200
another<font color="#CCCCCC"> carrier can hook and use to hook</font>

549
00:24:43,310 --> 00:24:50,090
in<font color="#CCCCCC"> one of the bypasses I know</font><font color="#E5E5E5"> with</font><font color="#CCCCCC"> Jetta</font>

550
00:24:48,200 --> 00:24:55,430
<font color="#CCCCCC">car hooked</font><font color="#E5E5E5"> is this function to intercept</font>

551
00:24:50,090 --> 00:24:57,409
much<font color="#CCCCCC"> god before the check so it will</font>

552
00:24:55,430 --> 00:24:59,300
also initialize the<font color="#CCCCCC"> work stem and</font><font color="#E5E5E5"> then</font>

553
00:24:57,410 --> 00:25:00,890
there will be three possible stuff for

554
00:24:59,300 --> 00:25:04,040
the<font color="#E5E5E5"> worker routine which will called</font>

555
00:25:00,890 --> 00:25:06,890
<font color="#CCCCCC">verification which in eventually</font><font color="#E5E5E5"> so this</font>

556
00:25:04,040 --> 00:25:10,399
was for<font color="#E5E5E5"> the DPC now we can we were</font>

557
00:25:06,890 --> 00:25:11,960
<font color="#E5E5E5">seized a system</font><font color="#CCCCCC"> frame method</font><font color="#E5E5E5"> and the</font>

558
00:25:10,400 --> 00:25:14,660
first time the system<font color="#CCCCCC"> file</font><font color="#E5E5E5"> method is</font>

559
00:25:11,960 --> 00:25:16,850
<font color="#E5E5E5">called basically the thread will wait on</font>

560
00:25:14,660 --> 00:25:18,320
an event<font color="#E5E5E5"> and this event will be notified</font>

561
00:25:16,850 --> 00:25:22,240
at the end receive initialization

562
00:25:18,320 --> 00:25:24,710
function so basically almost<font color="#E5E5E5"> right after</font>

563
00:25:22,240 --> 00:25:26,930
basically<font color="#E5E5E5"> the method the rest of the</font>

564
00:25:24,710 --> 00:25:29,120
method is the<font color="#E5E5E5"> same as the DPC</font>

565
00:25:26,930 --> 00:25:32,360
<font color="#E5E5E5">but without the exception so basically</font>

566
00:25:29,120 --> 00:25:38,179
now it<font color="#E5E5E5"> look like this yeah next time</font>

567
00:25:32,360 --> 00:25:40,399
<font color="#E5E5E5">will be timers as usual this now that we</font>

568
00:25:38,180 --> 00:25:43,700
see system<font color="#CCCCCC"> 5</font><font color="#E5E5E5"> we can see the Icicle</font>

569
00:25:40,400 --> 00:25:47,690
<font color="#E5E5E5">specific or in this case just like</font><font color="#CCCCCC"> C</font>

570
00:25:43,700 --> 00:25:49,490
central it's<font color="#E5E5E5"> inserted as is on it will</font>

571
00:25:47,690 --> 00:25:51,320
execute directly the context<font color="#E5E5E5"> of codex</font>

572
00:25:49,490 --> 00:25:56,510
<font color="#CCCCCC">decryption without any exception on</font>

573
00:25:51,320 --> 00:25:59,899
their part and other stuff so<font color="#CCCCCC"> what about</font>

574
00:25:56,510 --> 00:26:03,379
the KISW<font color="#E5E5E5"> interrupt dispatcher and for</font>

575
00:25:59,900 --> 00:26:05,390
this case<font color="#E5E5E5"> it's</font><font color="#CCCCCC"> very completely different</font>

576
00:26:03,380 --> 00:26:07,430
since there is no need<font color="#CCCCCC"> to decrypt</font><font color="#E5E5E5"> the</font>

577
00:26:05,390 --> 00:26:09,080
<font color="#CCCCCC">context</font><font color="#E5E5E5"> rotor since as I said to you</font>

578
00:26:07,430 --> 00:26:11,180
<font color="#E5E5E5">this</font><font color="#CCCCCC"> global patch what context is</font>

579
00:26:09,080 --> 00:26:13,879
<font color="#CCCCCC">actually in clear-text</font><font color="#E5E5E5"> in memory so the</font>

580
00:26:11,180 --> 00:26:17,240
<font color="#CCCCCC">core is</font><font color="#E5E5E5"> quite direct and</font><font color="#CCCCCC"> Pacifica</font><font color="#E5E5E5"> total</font>

581
00:26:13,880 --> 00:26:20,160
<font color="#CCCCCC">virtual machine is possible</font><font color="#E5E5E5"> and finally</font>

582
00:26:17,240 --> 00:26:23,220
<font color="#E5E5E5">the scene so</font><font color="#CCCCCC"> as BP profiler</font>

583
00:26:20,160 --> 00:26:25,620
which no sorry

584
00:26:23,220 --> 00:26:28,400
finally<font color="#CCCCCC"> is</font><font color="#E5E5E5"> a global variable from</font><font color="#CCCCCC"> Ana</font>

585
00:26:25,620 --> 00:26:31,559
sexuality<font color="#E5E5E5"> and this was interesting is</font>

586
00:26:28,400 --> 00:26:33,390
it's called<font color="#E5E5E5"> only</font><font color="#CCCCCC"> by</font><font color="#E5E5E5"> second integrity</font>

587
00:26:31,559 --> 00:26:35,940
check which<font color="#E5E5E5"> is a function from</font><font color="#CCCCCC"> MS</font>

588
00:26:33,390 --> 00:26:38,610
sexuality and it's related<font color="#E5E5E5"> to</font><font color="#CCCCCC"> events</font>

589
00:26:35,940 --> 00:26:41,929
<font color="#E5E5E5">trigger</font><font color="#CCCCCC"> podgy interesting</font><font color="#E5E5E5"> from windows 8</font>

590
00:26:38,610 --> 00:26:44,939
value and I can show you a call stack

591
00:26:41,929 --> 00:26:46,770
<font color="#E5E5E5">which shows that it comes from some</font>

592
00:26:44,940 --> 00:26:49,650
event for<font color="#CCCCCC"> example this is one of the</font>

593
00:26:46,770 --> 00:26:51,870
<font color="#E5E5E5">course tags that may may lead to the</font>

594
00:26:49,650 --> 00:26:56,340
<font color="#CCCCCC">Czech routine which is</font><font color="#E5E5E5"> sanctioned file</font>

595
00:26:51,870 --> 00:26:59,250
modify event<font color="#E5E5E5"> so yeah basically yeah it's</font>

596
00:26:56,340 --> 00:27:00,928
<font color="#CCCCCC">maybe trigger in a different ways and</font><font color="#E5E5E5"> in</font>

597
00:26:59,250 --> 00:27:03,120
this case<font color="#E5E5E5"> only look at</font><font color="#CCCCCC"> that it</font>

598
00:27:00,929 --> 00:27:05,010
statically so there are a<font color="#E5E5E5"> lot of course</font>

599
00:27:03,120 --> 00:27:10,739
possible<font color="#E5E5E5"> caustic on this is one of them</font>

600
00:27:05,010 --> 00:27:13,110
so so one last<font color="#CCCCCC"> method to</font><font color="#E5E5E5"> describe is</font>

601
00:27:10,740 --> 00:27:15,809
<font color="#E5E5E5">decision which was</font><font color="#CCCCCC"> busy for failure in</font>

602
00:27:13,110 --> 00:27:17,760
this case<font color="#CCCCCC"> there are two</font><font color="#E5E5E5"> you don't</font>

603
00:27:15,809 --> 00:27:20,129
identical routines or<font color="#E5E5E5"> muscle routines</font>

604
00:27:17,760 --> 00:27:22,650
which will basically check as<font color="#E5E5E5"> I said</font>

605
00:27:20,130 --> 00:27:26,039
<font color="#CCCCCC">only one function per boot</font>

606
00:27:22,650 --> 00:27:28,049
so yeah the<font color="#E5E5E5"> check is done by itself and</font>

607
00:27:26,039 --> 00:27:35,179
then<font color="#E5E5E5"> it will go to sleep by watching</font><font color="#CCCCCC"> an</font>

608
00:27:28,049 --> 00:27:38,220
object or<font color="#CCCCCC"> delaying or</font><font color="#E5E5E5"> a simple</font><font color="#CCCCCC"> slip so</font>

609
00:27:35,179 --> 00:27:42,990
now let's see how verification routines

610
00:27:38,220 --> 00:27:47,159
works there<font color="#E5E5E5"> are free version routine</font>

611
00:27:42,990 --> 00:27:49,799
<font color="#E5E5E5">mainly the first one is historical one</font>

612
00:27:47,159 --> 00:27:52,080
<font color="#E5E5E5">it's about</font><font color="#CCCCCC"> twelve kilobytes so it's</font>

613
00:27:49,799 --> 00:27:53,370
<font color="#E5E5E5">pretty huge tours</font><font color="#CCCCCC"> but you can have a</font>

614
00:27:52,080 --> 00:27:56,699
look<font color="#E5E5E5"> at it if you want basically you</font>

615
00:27:53,370 --> 00:28:02,010
just have to<font color="#CCCCCC"> open and us colonel on</font><font color="#E5E5E5"> the</font>

616
00:27:56,700 --> 00:28:04,080
assembly it on and look<font color="#E5E5E5"> at the most huge</font>

617
00:28:02,010 --> 00:28:06,840
function in the in the<font color="#CCCCCC"> binary and it</font>

618
00:28:04,080 --> 00:28:08,789
will be<font color="#CCCCCC"> probably this one or</font><font color="#E5E5E5"> another one</font>

619
00:28:06,840 --> 00:28:12,240
<font color="#E5E5E5">from patch</font><font color="#CCCCCC"> quad but basically it's</font>

620
00:28:08,789 --> 00:28:13,559
really really<font color="#E5E5E5"> huge so it's quite</font>

621
00:28:12,240 --> 00:28:15,750
complicated<font color="#E5E5E5"> to analyze it</font>

622
00:28:13,559 --> 00:28:18,178
<font color="#E5E5E5">the second</font><font color="#CCCCCC"> function is a check routine</font>

623
00:28:15,750 --> 00:28:21,240
from<font color="#E5E5E5"> the global variable which is almost</font>

624
00:28:18,179 --> 00:28:23,549
<font color="#E5E5E5">the same as the historical</font><font color="#CCCCCC"> one but there</font>

625
00:28:21,240 --> 00:28:26,940
<font color="#E5E5E5">are no rearming part of</font><font color="#CCCCCC"> god and</font><font color="#E5E5E5"> the</font>

626
00:28:23,549 --> 00:28:28,590
third one is<font color="#CCCCCC"> a cc PCB profiler</font><font color="#E5E5E5"> on</font><font color="#CCCCCC"> non</font>

627
00:28:26,940 --> 00:28:31,230
<font color="#E5E5E5">named routine which</font><font color="#CCCCCC"> i</font><font color="#E5E5E5"> don't call as I</font>

628
00:28:28,590 --> 00:28:32,389
said I'm including check for random

629
00:28:31,230 --> 00:28:35,809
routine<font color="#E5E5E5"> one perfect</font>

630
00:28:32,390 --> 00:28:40,010
so in our case<font color="#CCCCCC"> we</font><font color="#E5E5E5"> will only see the</font><font color="#CCCCCC"> FSOC</font>

631
00:28:35,809 --> 00:28:42,440
<font color="#CCCCCC">LM jarred complete</font><font color="#E5E5E5"> FX on let's have a</font>

632
00:28:40,010 --> 00:28:44,600
look at an overly simplified diagram<font color="#E5E5E5"> of</font>

633
00:28:42,440 --> 00:28:46,340
what it<font color="#E5E5E5"> does yeah</font>

634
00:28:44,600 --> 00:28:49,219
so first there is<font color="#CCCCCC"> a prologue prologue</font>

635
00:28:46,340 --> 00:28:50,780
include this operation<font color="#E5E5E5"> basically there</font>

636
00:28:49,220 --> 00:28:51,740
<font color="#CCCCCC">are some</font><font color="#E5E5E5"> checksums from Rio encryptions</font>

637
00:28:50,780 --> 00:28:54,710
I'm 16 again

638
00:28:51,740 --> 00:28:56,390
wait some<font color="#E5E5E5"> chick Sampson recoup</font><font color="#CCCCCC"> ssin and</font>

639
00:28:54,710 --> 00:28:59,150
so on the idea<font color="#CCCCCC"> is that all of this</font>

640
00:28:56,390 --> 00:29:01,790
operation<font color="#E5E5E5"> or done</font><font color="#CCCCCC"> in one objective which</font>

641
00:28:59,150 --> 00:29:05,299
<font color="#CCCCCC">is protected by protecting</font><font color="#E5E5E5"> patch squad</font>

642
00:29:01,790 --> 00:29:08,030
while it's waiting and the thing is<font color="#E5E5E5"> but</font>

643
00:29:05,299 --> 00:29:12,530
<font color="#E5E5E5">quad will wait in the middle of the</font>

644
00:29:08,030 --> 00:29:14,570
energy<font color="#E5E5E5"> the very future routine so it</font>

645
00:29:12,530 --> 00:29:16,879
will<font color="#CCCCCC"> work</font><font color="#E5E5E5"> wait actually multiple times</font>

646
00:29:14,570 --> 00:29:20,299
during while deciding on what in the

647
00:29:16,880 --> 00:29:23,270
vegetation<font color="#E5E5E5"> routine so it can wait</font>

648
00:29:20,299 --> 00:29:24,918
with one out of three function the first

649
00:29:23,270 --> 00:29:27,410
<font color="#E5E5E5">one is an unknown function is actually</font>

650
00:29:24,919 --> 00:29:30,049
<font color="#E5E5E5">named cellphone</font><font color="#CCCCCC"> crypt wait on the Crypt</font>

651
00:29:27,410 --> 00:29:32,270
<font color="#CCCCCC">in literacy and</font><font color="#E5E5E5"> there is second one</font>

652
00:29:30,049 --> 00:29:35,179
which is<font color="#CCCCCC"> K wait for single object</font><font color="#E5E5E5"> answer</font>

653
00:29:32,270 --> 00:29:36,889
well<font color="#CCCCCC"> k delegation thread</font><font color="#E5E5E5"> the choice of</font>

654
00:29:35,179 --> 00:29:39,470
which<font color="#E5E5E5"> method to use to</font><font color="#CCCCCC"> sleep at this</font>

655
00:29:36,890 --> 00:29:41,870
point is done from<font color="#CCCCCC"> the initialization</font>

656
00:29:39,470 --> 00:29:43,429
<font color="#CCCCCC">function</font><font color="#E5E5E5"> and it</font><font color="#CCCCCC"> released each of this</font>

657
00:29:41,870 --> 00:29:45,918
<font color="#E5E5E5">function is called with the timeout or</font>

658
00:29:43,429 --> 00:29:49,130
at your time between 200 and 210 seconds

659
00:29:45,919 --> 00:29:52,340
<font color="#E5E5E5">and there is only one</font><font color="#CCCCCC"> spacer</font><font color="#E5E5E5"> case which</font>

660
00:29:49,130 --> 00:29:54,950
is when<font color="#E5E5E5"> patch call waits with K wait for</font>

661
00:29:52,340 --> 00:29:56,780
signal object in the case where<font color="#E5E5E5"> the</font>

662
00:29:54,950 --> 00:29:58,820
<font color="#E5E5E5">signal</font><font color="#CCCCCC"> s</font><font color="#E5E5E5"> the object is actually</font><font color="#CCCCCC"> already</font>

663
00:29:56,780 --> 00:30:00,649
<font color="#CCCCCC">in a signal state</font><font color="#E5E5E5"> also in this case it</font>

664
00:29:58,820 --> 00:30:08,809
just<font color="#E5E5E5"> won't wait on trigger to check</font>

665
00:30:00,650 --> 00:30:11,059
immediately so there is also something I

666
00:30:08,809 --> 00:30:13,580
want<font color="#E5E5E5"> to point out which</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> ready to</font>

667
00:30:11,059 --> 00:30:17,418
previous version<font color="#CCCCCC"> a previous version used</font>

668
00:30:13,580 --> 00:30:21,649
to already<font color="#E5E5E5"> always pick</font><font color="#CCCCCC"> execute itself on</font>

669
00:30:17,419 --> 00:30:24,860
the last processor of in this<font color="#E5E5E5"> case patch</font>

670
00:30:21,650 --> 00:30:26,919
<font color="#E5E5E5">God tries to randomize it a bit and will</font>

671
00:30:24,860 --> 00:30:29,600
loop<font color="#CCCCCC"> through our system on the thread</font>

672
00:30:26,919 --> 00:30:32,570
<font color="#CCCCCC">earth site on the system and pick a</font>

673
00:30:29,600 --> 00:30:33,010
random thread and get a mask<font color="#E5E5E5"> and pick a</font>

674
00:30:32,570 --> 00:30:35,960
random

675
00:30:33,010 --> 00:30:36,679
<font color="#E5E5E5">basically not exactly but basically pick</font>

676
00:30:35,960 --> 00:30:42,980
a random

677
00:30:36,679 --> 00:30:46,010
CPU in in this mask<font color="#E5E5E5"> so</font><font color="#CCCCCC"> next we'll see</font>

678
00:30:42,980 --> 00:30:48,290
<font color="#CCCCCC">how checks works</font><font color="#E5E5E5"> as I said before</font>

679
00:30:46,010 --> 00:30:50,900
it will use data<font color="#E5E5E5"> from the</font><font color="#CCCCCC"> contacts</font>

680
00:30:48,290 --> 00:30:52,610
structure it will you it will<font color="#E5E5E5"> need some</font>

681
00:30:50,900 --> 00:30:54,560
new type of<font color="#E5E5E5"> structure</font><font color="#CCCCCC"> to be checked the</font>

682
00:30:52,610 --> 00:30:56,240
pointers will<font color="#E5E5E5"> attach</font><font color="#CCCCCC"> size Loretta</font><font color="#E5E5E5"> the</font>

683
00:30:54,560 --> 00:30:59,179
original<font color="#CCCCCC"> checks on on some</font><font color="#E5E5E5"> specific</font>

684
00:30:56,240 --> 00:31:01,700
value<font color="#E5E5E5"> and there is also a size contour</font>

685
00:30:59,180 --> 00:31:03,920
of all the data that<font color="#CCCCCC"> has already been</font>

686
00:31:01,700 --> 00:31:06,620
checked<font color="#E5E5E5"> and also the</font><font color="#CCCCCC"> maximum amount</font><font color="#E5E5E5"> of</font>

687
00:31:03,920 --> 00:31:09,320
data to<font color="#E5E5E5"> be checked which is at this</font>

688
00:31:06,620 --> 00:31:12,800
point<font color="#E5E5E5"> you</font><font color="#CCCCCC"> may have</font><font color="#E5E5E5"> guessed algorithm so</font>

689
00:31:09,320 --> 00:31:15,320
basically here is<font color="#E5E5E5"> oh it works</font><font color="#CCCCCC"> and there</font>

690
00:31:12,800 --> 00:31:18,020
are several structures for structures<font color="#E5E5E5"> it</font>

691
00:31:15,320 --> 00:31:21,830
will check whether or<font color="#E5E5E5"> not it will need</font>

692
00:31:18,020 --> 00:31:23,360
<font color="#E5E5E5">to perform</font><font color="#CCCCCC"> some operations and then it</font>

693
00:31:21,830 --> 00:31:26,149
will compute<font color="#E5E5E5"> the ash of the target with</font>

694
00:31:23,360 --> 00:31:28,280
<font color="#CCCCCC">the size and</font><font color="#E5E5E5"> pointer to the data</font><font color="#CCCCCC"> um it</font>

695
00:31:26,150 --> 00:31:32,440
will<font color="#E5E5E5"> compare</font><font color="#CCCCCC"> it to the original</font><font color="#E5E5E5"> ash that</font>

696
00:31:28,280 --> 00:31:37,430
has been computed at boot time<font color="#E5E5E5"> then if</font>

697
00:31:32,440 --> 00:31:40,040
if the total<font color="#E5E5E5"> size of if the total size</font>

698
00:31:37,430 --> 00:31:42,380
of already<font color="#E5E5E5"> check data is less than</font>

699
00:31:40,040 --> 00:31:47,180
<font color="#E5E5E5">maximum size it will just go with</font><font color="#CCCCCC"> the</font>

700
00:31:42,380 --> 00:31:48,860
next structure<font color="#E5E5E5"> in its array so let's</font>

701
00:31:47,180 --> 00:31:52,460
have<font color="#E5E5E5"> a concrete</font><font color="#CCCCCC"> example we followed the</font>

702
00:31:48,860 --> 00:31:54,229
<font color="#CCCCCC">I did case and basically as I said</font>

703
00:31:52,460 --> 00:31:56,960
before the target processor<font color="#CCCCCC"> is tall in</font>

704
00:31:54,230 --> 00:31:59,150
the data structure<font color="#E5E5E5"> so first thing it</font>

705
00:31:56,960 --> 00:32:01,360
does it basically to change<font color="#E5E5E5"> its</font><font color="#CCCCCC"> own</font>

706
00:31:59,150 --> 00:32:05,300
affinity so that it gets<font color="#E5E5E5"> the same</font>

707
00:32:01,360 --> 00:32:08,840
affinity as the image<font color="#E5E5E5"> is one that I</font><font color="#CCCCCC"> use</font>

708
00:32:05,300 --> 00:32:10,780
at initialization<font color="#E5E5E5"> time do it will do so</font>

709
00:32:08,840 --> 00:32:15,139
with<font color="#CCCCCC"> KSAT</font><font color="#E5E5E5"> system group affinity</font><font color="#CCCCCC"> thread</font>

710
00:32:10,780 --> 00:32:17,090
next once it's got the right affinity it

711
00:32:15,140 --> 00:32:19,730
the check will<font color="#CCCCCC"> be split in two parts the</font>

712
00:32:17,090 --> 00:32:22,429
<font color="#CCCCCC">first part is</font><font color="#E5E5E5"> it will iterate through</font>

713
00:32:19,730 --> 00:32:24,800
each<font color="#E5E5E5"> cake sandwich</font><font color="#CCCCCC"> 15 in entered</font><font color="#E5E5E5"> which</font>

714
00:32:22,430 --> 00:32:28,280
is actually what I call the specific

715
00:32:24,800 --> 00:32:31,190
part this<font color="#E5E5E5"> is directly</font><font color="#CCCCCC"> this specific of</font>

716
00:32:28,280 --> 00:32:33,080
the<font color="#CCCCCC"> ID'd case and then it will perform</font>

717
00:32:31,190 --> 00:32:35,360
the checksum<font color="#CCCCCC"> of the</font><font color="#E5E5E5"> entity which</font><font color="#CCCCCC"> is the</font>

718
00:32:33,080 --> 00:32:41,270
more<font color="#E5E5E5"> common way since this section is</font>

719
00:32:35,360 --> 00:32:42,800
the usual way if this<font color="#E5E5E5"> one this check is</font>

720
00:32:41,270 --> 00:32:44,570
performed<font color="#CCCCCC"> there will be two possible</font>

721
00:32:42,800 --> 00:32:46,460
<font color="#E5E5E5">outcomes the first one is rearming purge</font>

722
00:32:44,570 --> 00:32:51,020
column and second one is

723
00:32:46,460 --> 00:32:53,690
<font color="#CCCCCC">broski</font><font color="#E5E5E5"> notice so sorry when everything</font>

724
00:32:51,020 --> 00:32:56,870
<font color="#E5E5E5">is fine basically the rearming of</font><font color="#CCCCCC"> spy</font>

725
00:32:53,690 --> 00:32:59,389
squad<font color="#E5E5E5"> will</font><font color="#CCCCCC"> be almost</font><font color="#E5E5E5"> maybe is the same</font>

726
00:32:56,870 --> 00:33:02,539
as<font color="#E5E5E5"> in</font>

727
00:32:59,389 --> 00:33:04,758
<font color="#CCCCCC">ashin part</font><font color="#E5E5E5"> so basically</font><font color="#CCCCCC"> it will if you</font>

728
00:33:02,539 --> 00:33:08,029
pick a timer<font color="#E5E5E5"> for the</font><font color="#CCCCCC"> methods</font><font color="#E5E5E5"> basically</font>

729
00:33:04,759 --> 00:33:11,089
<font color="#E5E5E5">it will reset a new timer with a random</font>

730
00:33:08,029 --> 00:33:13,969
amount<font color="#CCCCCC"> of</font><font color="#E5E5E5"> time on next check will occur</font>

731
00:33:11,089 --> 00:33:16,339
two minutes later<font color="#E5E5E5"> basically but if a</font>

732
00:33:13,969 --> 00:33:19,579
modification<font color="#E5E5E5"> is detected then it will</font>

733
00:33:16,339 --> 00:33:23,918
<font color="#E5E5E5">proceed to blue screen unless and this</font>

734
00:33:19,579 --> 00:33:27,440
<font color="#E5E5E5">is why we</font><font color="#CCCCCC"> gonna</font><font color="#E5E5E5"> analyze because most of</font>

735
00:33:23,919 --> 00:33:39,979
some bypasses<font color="#E5E5E5"> you used to hit at this</font>

736
00:33:27,440 --> 00:33:44,239
point so the<font color="#CCCCCC"> first thing it does is a</font>

737
00:33:39,979 --> 00:33:47,119
<font color="#E5E5E5">checksum of the context for sure but we</font>

738
00:33:44,239 --> 00:33:49,309
analyzed this result<font color="#E5E5E5"> on which solves</font>

739
00:33:47,119 --> 00:33:54,708
that actually<font color="#E5E5E5"> it's never compared anyway</font>

740
00:33:49,309 --> 00:33:58,309
so I have no<font color="#E5E5E5"> idea why it's maybe it's</font>

741
00:33:54,709 --> 00:34:01,879
<font color="#E5E5E5">only so that Microsoft or</font><font color="#CCCCCC"> any person</font>

742
00:33:58,309 --> 00:34:04,969
will get it<font color="#CCCCCC"> - maybe to check</font><font color="#E5E5E5"> where in</font>

743
00:34:01,879 --> 00:34:05,889
the crash dump<font color="#E5E5E5"> but this has no effect on</font>

744
00:34:04,969 --> 00:34:08,629
the control flow

745
00:34:05,889 --> 00:34:10,460
the third thing does<font color="#E5E5E5"> second thing does</font>

746
00:34:08,629 --> 00:34:12,109
is really encrypting the first part of

747
00:34:10,460 --> 00:34:15,199
the structure<font color="#E5E5E5"> but not the rest of it so</font>

748
00:34:12,109 --> 00:34:19,038
<font color="#E5E5E5">so yeah I'm not sure</font><font color="#CCCCCC"> what why it does</font>

749
00:34:15,199 --> 00:34:21,230
this<font color="#E5E5E5"> next</font><font color="#CCCCCC"> it will rewrite the page table</font>

750
00:34:19,039 --> 00:34:23,269
entries with<font color="#CCCCCC"> a save</font><font color="#E5E5E5"> value saved values</font>

751
00:34:21,230 --> 00:34:25,399
<font color="#CCCCCC">at I if you</font><font color="#E5E5E5"> recall I explained at the</font>

752
00:34:23,268 --> 00:34:28,368
beginning from<font color="#E5E5E5"> the second part of the</font>

753
00:34:25,399 --> 00:34:30,799
batch code<font color="#CCCCCC"> structure and</font><font color="#E5E5E5"> yeah this is</font>

754
00:34:28,369 --> 00:34:33,470
done because<font color="#E5E5E5"> of course if you hook this</font>

755
00:34:30,799 --> 00:34:36,980
PT<font color="#CCCCCC"> II and</font><font color="#E5E5E5"> modify it and so that</font><font color="#CCCCCC"> it</font>

756
00:34:33,469 --> 00:34:39,049
points<font color="#E5E5E5"> to your page</font><font color="#CCCCCC"> then you can modify</font>

757
00:34:36,980 --> 00:34:41,899
<font color="#CCCCCC">own hook okay but check</font><font color="#E5E5E5"> or other</font>

758
00:34:39,049 --> 00:34:43,909
specific<font color="#E5E5E5"> routine so that</font><font color="#CCCCCC"> basically</font><font color="#E5E5E5"> you</font>

759
00:34:41,899 --> 00:34:50,538
<font color="#CCCCCC">can bypass</font><font color="#E5E5E5"> patch code by modifying this</font>

760
00:34:43,909 --> 00:34:53,509
<font color="#E5E5E5">PG so this is to prevent that so a trick</font>

761
00:34:50,539 --> 00:34:55,549
is used to do so and<font color="#E5E5E5"> to flush the TLB I</font>

762
00:34:53,509 --> 00:34:57,170
<font color="#E5E5E5">want</font><font color="#CCCCCC"> each</font><font color="#E5E5E5"> punched out because I found it</font>

763
00:34:55,549 --> 00:35:00,609
very<font color="#E5E5E5"> interesting it's actually</font><font color="#CCCCCC"> a</font>

764
00:34:57,170 --> 00:35:04,099
<font color="#CCCCCC">side-effect of the Intel instruction</font>

765
00:35:00,609 --> 00:35:05,900
when you modify<font color="#CCCCCC"> this year for resistor</font>

766
00:35:04,099 --> 00:35:08,150
<font color="#CCCCCC">it will flush it shall be so I just</font>

767
00:35:05,900 --> 00:35:10,630
<font color="#E5E5E5">don't I just look at</font><font color="#CCCCCC"> it and I</font><font color="#E5E5E5"> found it</font>

768
00:35:08,150 --> 00:35:12,910
interesting I wanted to point<font color="#E5E5E5"> it out</font>

769
00:35:10,630 --> 00:35:14,920
next it will rewrite some critical

770
00:35:12,910 --> 00:35:16,720
routines<font color="#E5E5E5"> such as</font><font color="#CCCCCC"> K book check of course</font>

771
00:35:14,920 --> 00:35:19,270
and other routines that are<font color="#E5E5E5"> used to</font>

772
00:35:16,720 --> 00:35:23,109
basically<font color="#E5E5E5"> set up the entire process of</font>

773
00:35:19,270 --> 00:35:25,420
the check<font color="#CCCCCC"> a blue screen of</font><font color="#E5E5E5"> this and this</font>

774
00:35:23,110 --> 00:35:28,750
<font color="#E5E5E5">is important of course because some old</font>

775
00:35:25,420 --> 00:35:31,290
bypasses used to hook<font color="#E5E5E5"> this function on</font>

776
00:35:28,750 --> 00:35:34,870
restore the original state<font color="#E5E5E5"> of the system</font>

777
00:35:31,290 --> 00:35:38,740
so<font color="#CCCCCC"> that</font><font color="#E5E5E5"> no the screen of tests</font><font color="#CCCCCC"> we would</font>

778
00:35:34,870 --> 00:35:41,200
<font color="#E5E5E5">be triggered in</font><font color="#CCCCCC"> any way</font><font color="#E5E5E5"> so in this case</font>

779
00:35:38,740 --> 00:35:43,270
<font color="#CCCCCC">it just means</font><font color="#E5E5E5"> that if you hook this</font>

780
00:35:41,200 --> 00:35:45,879
function<font color="#E5E5E5"> your hook will be</font><font color="#CCCCCC"> rewritten</font>

781
00:35:43,270 --> 00:35:48,280
<font color="#CCCCCC">with</font><font color="#E5E5E5"> the original code before triggering</font>

782
00:35:45,880 --> 00:35:52,930
the check so that's a good<font color="#E5E5E5"> way to</font>

783
00:35:48,280 --> 00:35:54,340
prevent<font color="#E5E5E5"> a hook there is less</font><font color="#CCCCCC"> than T</font>

784
00:35:52,930 --> 00:35:56,649
debug that I found interesting and

785
00:35:54,340 --> 00:35:58,390
<font color="#E5E5E5">because also I don't</font><font color="#CCCCCC"> know why but it</font>

786
00:35:56,650 --> 00:36:00,100
will overwrite<font color="#CCCCCC"> the</font><font color="#E5E5E5"> db2 print function</font>

787
00:35:58,390 --> 00:36:01,359
with the right instruction<font color="#E5E5E5"> so basically</font>

788
00:36:00,100 --> 00:36:04,299
it's saying<font color="#E5E5E5"> to the attacker</font><font color="#CCCCCC"> no</font><font color="#E5E5E5"> you</font>

789
00:36:01,360 --> 00:36:07,840
cannot print anything<font color="#E5E5E5"> at this</font><font color="#CCCCCC"> point</font><font color="#E5E5E5"> I'm</font>

790
00:36:04,300 --> 00:36:09,700
not<font color="#CCCCCC"> sure</font><font color="#E5E5E5"> why but yeah it sounds like it</font>

791
00:36:07,840 --> 00:36:13,570
<font color="#E5E5E5">will secure the stack</font><font color="#CCCCCC"> so that even if</font>

792
00:36:09,700 --> 00:36:15,609
you find a weird way of restoring on

793
00:36:13,570 --> 00:36:21,280
hooking<font color="#E5E5E5"> cable check you won't be able</font><font color="#CCCCCC"> to</font>

794
00:36:15,610 --> 00:36:23,620
<font color="#CCCCCC">install the stack so this is all the</font>

795
00:36:21,280 --> 00:36:26,350
freshmen<font color="#CCCCCC"> what routines works so now you</font>

796
00:36:23,620 --> 00:36:28,089
have a good<font color="#E5E5E5"> overview</font><font color="#CCCCCC"> of from the</font>

797
00:36:26,350 --> 00:36:31,569
initialization<font color="#E5E5E5"> to the blue scale on this</font>

798
00:36:28,090 --> 00:36:35,470
<font color="#E5E5E5">and may we may explore how to</font><font color="#CCCCCC"> observer</font>

799
00:36:31,570 --> 00:36:39,820
it I developed a driver to disable it<font color="#E5E5E5"> I</font>

800
00:36:35,470 --> 00:36:42,549
think it's working but we'll see<font color="#E5E5E5"> and so</font>

801
00:36:39,820 --> 00:36:44,230
let's all look this is<font color="#E5E5E5"> a very simplified</font>

802
00:36:42,550 --> 00:36:46,860
<font color="#CCCCCC">I reckon I showed you at the beginning</font>

803
00:36:44,230 --> 00:36:51,280
<font color="#E5E5E5">and I just want to complicate</font><font color="#CCCCCC"> it a</font>

804
00:36:46,860 --> 00:36:53,740
little bit by adding<font color="#E5E5E5"> two slips and the</font>

805
00:36:51,280 --> 00:36:55,690
idea is that<font color="#E5E5E5"> at any</font><font color="#CCCCCC"> time Pasqual will be</font>

806
00:36:53,740 --> 00:36:56,319
in one of<font color="#CCCCCC"> these states so basically it</font>

807
00:36:55,690 --> 00:36:58,720
<font color="#CCCCCC">will</font><font color="#E5E5E5"> be other</font>

808
00:36:56,320 --> 00:37:01,360
rearming or<font color="#CCCCCC"> slipping objects but in our</font>

809
00:36:58,720 --> 00:37:04,089
case we only want<font color="#CCCCCC"> to look</font><font color="#E5E5E5"> at the</font><font color="#CCCCCC"> slip</font>

810
00:37:01,360 --> 00:37:07,720
<font color="#CCCCCC">because</font><font color="#E5E5E5"> the check is probably quite fast</font>

811
00:37:04,090 --> 00:37:12,400
and<font color="#E5E5E5"> the rearming is also quite fast</font><font color="#CCCCCC"> even</font>

812
00:37:07,720 --> 00:37:15,819
though<font color="#E5E5E5"> you you you get on the check then</font>

813
00:37:12,400 --> 00:37:18,370
you<font color="#CCCCCC"> just have to relaunch again</font><font color="#E5E5E5"> yeah</font>

814
00:37:15,820 --> 00:37:21,610
you you'll get some part when but quad

815
00:37:18,370 --> 00:37:23,740
<font color="#CCCCCC">is sleeping so this is the objective in</font>

816
00:37:21,610 --> 00:37:26,500
our<font color="#E5E5E5"> case we will disable</font>

817
00:37:23,740 --> 00:37:29,080
it's slipping<font color="#E5E5E5"> Fred so the first threat</font>

818
00:37:26,500 --> 00:37:30,760
we<font color="#CCCCCC"> need to disable also ones</font><font color="#E5E5E5"> that are</font>

819
00:37:29,080 --> 00:37:34,240
already launched so basically<font color="#E5E5E5"> this</font><font color="#CCCCCC"> clip</font>

820
00:37:30,760 --> 00:37:37,060
are already in the verification routine

821
00:37:34,240 --> 00:37:41,529
and that's why it's<font color="#E5E5E5"> the real square</font>

822
00:37:37,060 --> 00:37:44,380
<font color="#E5E5E5">around it and so how to disable the</font>

823
00:37:41,530 --> 00:37:46,000
scripting threat<font color="#CCCCCC"> basically we will loop</font>

824
00:37:44,380 --> 00:37:48,040
through<font color="#E5E5E5"> all</font><font color="#CCCCCC"> so straight on the system</font>

825
00:37:46,000 --> 00:37:50,589
<font color="#CCCCCC">and on Windsor co-star to find the check</font>

826
00:37:48,040 --> 00:37:53,589
for teens<font color="#E5E5E5"> actually add suspense at this</font>

827
00:37:50,589 --> 00:37:56,320
point<font color="#E5E5E5"> we know all of them we we know all</font>

828
00:37:53,589 --> 00:37:59,080
<font color="#E5E5E5">the all the check routine we know every</font>

829
00:37:56,320 --> 00:38:03,970
<font color="#E5E5E5">where every slip are performed so we</font>

830
00:37:59,080 --> 00:38:06,790
just have to<font color="#CCCCCC"> look</font><font color="#E5E5E5"> and look at the at the</font>

831
00:38:03,970 --> 00:38:09,069
stack and find the pointer that<font color="#E5E5E5"> belong</font>

832
00:38:06,790 --> 00:38:11,230
to the check routine<font color="#E5E5E5"> and when it's done</font>

833
00:38:09,070 --> 00:38:14,070
<font color="#E5E5E5">well you</font><font color="#CCCCCC"> just have to set timers to</font>

834
00:38:11,230 --> 00:38:18,910
<font color="#E5E5E5">infinity and this we allowed to</font><font color="#CCCCCC"> disable</font>

835
00:38:14,070 --> 00:38:22,210
already many methods so what about the

836
00:38:18,910 --> 00:38:23,710
next<font color="#CCCCCC"> one next one</font><font color="#E5E5E5"> is the one that is</font>

837
00:38:22,210 --> 00:38:26,619
<font color="#E5E5E5">hiding from the beginning so basically</font>

838
00:38:23,710 --> 00:38:29,500
the verification routine is not<font color="#E5E5E5"> launched</font>

839
00:38:26,619 --> 00:38:32,290
already so for example<font color="#CCCCCC"> for metal so</font>

840
00:38:29,500 --> 00:38:34,900
we'll see for automated yeah<font color="#CCCCCC"> for example</font>

841
00:38:32,290 --> 00:38:36,759
from it at<font color="#E5E5E5"> zero which is</font><font color="#CCCCCC"> the timer you</font>

842
00:38:34,900 --> 00:38:39,220
just have<font color="#E5E5E5"> to go as I said through the</font>

843
00:38:36,760 --> 00:38:41,650
<font color="#CCCCCC">diner Eastern tree</font><font color="#E5E5E5"> find the</font><font color="#CCCCCC"> purge quad</font>

844
00:38:39,220 --> 00:38:43,959
context on disable it from<font color="#E5E5E5"> it at one</font><font color="#CCCCCC"> on</font>

845
00:38:41,650 --> 00:38:46,119
<font color="#CCCCCC">to which use entry in the process</font>

846
00:38:43,960 --> 00:38:48,130
<font color="#CCCCCC">Forrester control block you just have to</font>

847
00:38:46,119 --> 00:38:50,950
know this entry so<font color="#E5E5E5"> that the legit</font>

848
00:38:48,130 --> 00:38:53,170
routine will only think that<font color="#E5E5E5"> but what is</font>

849
00:38:50,950 --> 00:38:54,848
not<font color="#CCCCCC"> activities this way and for the</font>

850
00:38:53,170 --> 00:38:59,740
fifth<font color="#CCCCCC"> metal well you just have to patch</font>

851
00:38:54,849 --> 00:39:04,180
back the method the hook from<font color="#CCCCCC"> patch God</font>

852
00:38:59,740 --> 00:39:08,729
to put<font color="#E5E5E5"> the original legit DPC and this</font>

853
00:39:04,180 --> 00:39:11,799
will disable<font color="#CCCCCC"> the is method</font><font color="#E5E5E5"> so what about</font>

854
00:39:08,730 --> 00:39:14,290
<font color="#CCCCCC">to two new methods the two new methods</font>

855
00:39:11,800 --> 00:39:16,300
<font color="#E5E5E5">are</font><font color="#CCCCCC"> actually interesting because</font><font color="#E5E5E5"> I said</font>

856
00:39:14,290 --> 00:39:18,279
before they use a global<font color="#CCCCCC"> patchwork on</font>

857
00:39:16,300 --> 00:39:20,349
<font color="#CCCCCC">texture but what's in Searcy what is</font>

858
00:39:18,280 --> 00:39:22,330
interesting<font color="#E5E5E5"> here is that they do</font><font color="#CCCCCC"> not</font>

859
00:39:20,349 --> 00:39:24,310
perform<font color="#E5E5E5"> the check of the global</font><font color="#CCCCCC"> patrol</font>

860
00:39:22,330 --> 00:39:26,470
context<font color="#E5E5E5"> culture there is</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> other</font>

861
00:39:24,310 --> 00:39:28,900
method does<font color="#E5E5E5"> so basically at this</font><font color="#CCCCCC"> point</font>

862
00:39:26,470 --> 00:39:30,609
we disable all methods that check<font color="#E5E5E5"> the</font>

863
00:39:28,900 --> 00:39:32,890
global virtual context culture so at

864
00:39:30,609 --> 00:39:35,170
this point you can it's basically open

865
00:39:32,890 --> 00:39:37,220
bar to modify this<font color="#E5E5E5"> page was</font><font color="#CCCCCC"> context</font>

866
00:39:35,170 --> 00:39:39,560
structure so this<font color="#E5E5E5"> is</font>

867
00:39:37,220 --> 00:39:41,359
<font color="#CCCCCC">well would you use it tough to find a</font>

868
00:39:39,560 --> 00:39:44,000
way<font color="#E5E5E5"> to modify it so that the other</font>

869
00:39:41,360 --> 00:39:46,400
<font color="#E5E5E5">method are not launched by</font><font color="#CCCCCC"> the way you</font>

870
00:39:44,000 --> 00:39:48,880
can also modify<font color="#E5E5E5"> it so</font><font color="#CCCCCC"> that you can</font>

871
00:39:46,400 --> 00:39:52,580
protect<font color="#CCCCCC"> your</font><font color="#E5E5E5"> card if you want yeah</font>

872
00:39:48,880 --> 00:39:55,030
<font color="#CCCCCC">detailed it but basically</font><font color="#E5E5E5"> it's open bar</font>

873
00:39:52,580 --> 00:40:03,049
so just have<font color="#E5E5E5"> fun with it</font>

874
00:39:55,030 --> 00:40:04,940
<font color="#E5E5E5">so how to</font><font color="#CCCCCC"> how to cook it</font><font color="#E5E5E5"> if you look at</font>

875
00:40:03,050 --> 00:40:07,340
the<font color="#CCCCCC"> beginning</font><font color="#E5E5E5"> of</font><font color="#CCCCCC"> verification routine</font>

876
00:40:04,940 --> 00:40:10,610
from for<font color="#CCCCCC"> example the callback very</font>

877
00:40:07,340 --> 00:40:13,010
important<font color="#E5E5E5"> one of the first check is done</font>

878
00:40:10,610 --> 00:40:15,950
is whether or not<font color="#E5E5E5"> the size of the</font>

879
00:40:13,010 --> 00:40:17,870
<font color="#CCCCCC">already check structure it is the number</font>

880
00:40:15,950 --> 00:40:19,819
of<font color="#E5E5E5"> the already checked structure is</font>

881
00:40:17,870 --> 00:40:22,069
<font color="#CCCCCC">above value</font><font color="#E5E5E5"> and if so it will exit</font>

882
00:40:19,820 --> 00:40:25,160
properly<font color="#E5E5E5"> but as I said this value is</font>

883
00:40:22,070 --> 00:40:26,840
<font color="#E5E5E5">user control we can patch it as we want</font>

884
00:40:25,160 --> 00:40:29,000
and we just have to put<font color="#CCCCCC"> like two</font>

885
00:40:26,840 --> 00:40:31,480
<font color="#CCCCCC">thousand and it will</font><font color="#E5E5E5"> box on it will exit</font>

886
00:40:29,000 --> 00:40:36,020
properly<font color="#E5E5E5"> okay</font><font color="#CCCCCC"> is doubly enjoyed dispatch</font>

887
00:40:31,480 --> 00:40:39,710
<font color="#E5E5E5">the one of the first check is done is an</font>

888
00:40:36,020 --> 00:40:42,520
<font color="#E5E5E5">allocation which</font><font color="#CCCCCC"> choose user</font><font color="#E5E5E5"> value this</font>

889
00:40:39,710 --> 00:40:45,520
value is supposed to be the size<font color="#E5E5E5"> of the</font>

890
00:40:42,520 --> 00:40:45,520
<font color="#CCCCCC">state-of-the-art</font>

891
00:40:45,640 --> 00:40:51,950
<font color="#E5E5E5">2056 but we can also give like F F F F F</font>

892
00:40:49,640 --> 00:40:55,730
<font color="#E5E5E5">F F F on the X allocate</font><font color="#CCCCCC"> porous tag will</font>

893
00:40:51,950 --> 00:40:58,189
fail obviously for<font color="#CCCCCC"> abuse raisins</font><font color="#E5E5E5"> yeah I</font>

894
00:40:55,730 --> 00:41:02,180
miss some F but you can get that sort of

895
00:40:58,190 --> 00:41:05,120
64 bits<font color="#CCCCCC"> of F</font><font color="#E5E5E5"> and yeah in this case it</font>

896
00:41:02,180 --> 00:41:09,589
will<font color="#E5E5E5"> exit properly so this is all you</font>

897
00:41:05,120 --> 00:41:13,970
<font color="#CCCCCC">can disable this method so basically you</font>

898
00:41:09,590 --> 00:41:18,590
will<font color="#E5E5E5"> develop</font><font color="#CCCCCC"> a we tell</font><font color="#E5E5E5"> of this it seems</font>

899
00:41:13,970 --> 00:41:21,560
<font color="#CCCCCC">work</font><font color="#E5E5E5"> so there are some programs of</font>

900
00:41:18,590 --> 00:41:23,270
<font color="#CCCCCC">course it's to the POC I'm not the</font>

901
00:41:21,560 --> 00:41:25,720
<font color="#CCCCCC">Ripper actually my first driver was like</font>

902
00:41:23,270 --> 00:41:28,100
four<font color="#E5E5E5"> months ago five months ago so</font><font color="#CCCCCC"> I</font>

903
00:41:25,720 --> 00:41:30,140
have some<font color="#E5E5E5"> problem some book</font><font color="#CCCCCC"> check which</font>

904
00:41:28,100 --> 00:41:32,690
<font color="#E5E5E5">are not related</font><font color="#CCCCCC"> to patch God authority</font>

905
00:41:30,140 --> 00:41:35,750
to a PC<font color="#CCCCCC"> that I don't funny many plates</font>

906
00:41:32,690 --> 00:41:38,150
well but yeah<font color="#E5E5E5"> basically</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> is a well</font>

907
00:41:35,750 --> 00:41:42,200
<font color="#E5E5E5">paid job but I need some work more work</font>

908
00:41:38,150 --> 00:41:46,310
<font color="#E5E5E5">to do there is a huge precondition</font><font color="#CCCCCC"> which</font>

909
00:41:42,200 --> 00:41:48,279
<font color="#CCCCCC">is its current specific service</font><font color="#E5E5E5"> it's</font>

910
00:41:46,310 --> 00:41:49,900
specific<font color="#CCCCCC"> to a specific</font><font color="#E5E5E5"> version</font>

911
00:41:48,280 --> 00:41:52,690
it's kind of specific so basically I

912
00:41:49,900 --> 00:41:56,320
have a lot of<font color="#E5E5E5"> out coded offsets in my</font>

913
00:41:52,690 --> 00:41:58,750
driver which will<font color="#E5E5E5"> change no that of it</font>

914
00:41:56,320 --> 00:42:02,590
will will change between<font color="#CCCCCC"> two</font><font color="#E5E5E5"> version of</font>

915
00:41:58,750 --> 00:42:06,690
Windows 10 and yeah still a lot of<font color="#E5E5E5"> work</font>

916
00:42:02,590 --> 00:42:13,230
to make<font color="#CCCCCC"> it more reliable</font><font color="#E5E5E5"> but yeah it's</font>

917
00:42:06,690 --> 00:42:16,119
<font color="#E5E5E5">it's</font><font color="#CCCCCC"> very interesting</font><font color="#E5E5E5"> that's it so</font>

918
00:42:13,230 --> 00:42:19,000
that's it for our proof of concept so

919
00:42:16,119 --> 00:42:21,940
now let's conclude a little bit

920
00:42:19,000 --> 00:42:24,130
basically the more<font color="#E5E5E5"> initialization method</font>

921
00:42:21,940 --> 00:42:26,590
there<font color="#CCCCCC"> is the more work there is for the</font>

922
00:42:24,130 --> 00:42:28,570
reversal of course<font color="#CCCCCC"> but</font><font color="#E5E5E5"> why use an</font>

923
00:42:26,590 --> 00:42:32,580
incremental<font color="#CCCCCC"> way of developing so</font>

924
00:42:28,570 --> 00:42:34,750
basically each time someone finds bypass

925
00:42:32,580 --> 00:42:37,450
<font color="#E5E5E5">Microsoft just add a new methods and</font>

926
00:42:34,750 --> 00:42:40,450
<font color="#E5E5E5">yeah basically say no you didn't buy</font>

927
00:42:37,450 --> 00:42:43,419
spices all of it<font color="#CCCCCC"> bypassed</font><font color="#E5E5E5"> all of it so</font>

928
00:42:40,450 --> 00:42:45,430
this oh it works and if you find bypass

929
00:42:43,420 --> 00:42:48,520
Microsoft will probably ask whether or

930
00:42:45,430 --> 00:42:50,230
<font color="#E5E5E5">not you have to</font><font color="#CCCCCC"> be sure</font><font color="#E5E5E5"> that you</font>

931
00:42:48,520 --> 00:42:53,770
bypassed all of the things on the thing

932
00:42:50,230 --> 00:42:56,320
is there are some<font color="#E5E5E5"> breadcrumbs</font><font color="#CCCCCC"> a lot of</font>

933
00:42:53,770 --> 00:42:58,869
breadcrumbs<font color="#E5E5E5"> I found some recently</font>

934
00:42:56,320 --> 00:43:00,430
<font color="#CCCCCC">actually</font><font color="#E5E5E5"> for example when you delete a</font>

935
00:42:58,869 --> 00:43:04,660
process there will<font color="#E5E5E5"> be an ID</font><font color="#CCCCCC"> to check</font>

936
00:43:00,430 --> 00:43:05,649
<font color="#E5E5E5">this don't choose any this don't</font><font color="#CCCCCC"> choose</font>

937
00:43:04,660 --> 00:43:08,080
any context<font color="#E5E5E5"> rapture</font>

938
00:43:05,650 --> 00:43:11,230
this is just in the<font color="#CCCCCC"> middle of</font><font color="#E5E5E5"> PHP cred</font>

939
00:43:08,080 --> 00:43:14,799
process delayed and this is<font color="#E5E5E5"> okay</font><font color="#CCCCCC"> because</font>

940
00:43:11,230 --> 00:43:16,900
it<font color="#CCCCCC"> actually</font><font color="#E5E5E5"> used global global</font><font color="#CCCCCC"> viral to</font>

941
00:43:14,800 --> 00:43:19,000
store the result of<font color="#CCCCCC"> these checks</font><font color="#E5E5E5"> and so</font>

942
00:43:16,900 --> 00:43:21,490
in this<font color="#E5E5E5"> case to bypass this way you will</font>

943
00:43:19,000 --> 00:43:25,960
<font color="#E5E5E5">have to it's</font><font color="#CCCCCC"> okay you will have to just</font>

944
00:43:21,490 --> 00:43:28,990
compute<font color="#E5E5E5"> again the checksum with your of</font>

945
00:43:25,960 --> 00:43:32,109
you patched<font color="#CCCCCC"> ID t and it will be</font><font color="#E5E5E5"> okay so</font>

946
00:43:28,990 --> 00:43:36,490
this is initialized in<font color="#E5E5E5"> simply initialize</font>

947
00:43:32,109 --> 00:43:38,890
transaction there is<font color="#CCCCCC"> also the case there</font>

948
00:43:36,490 --> 00:43:41,618
<font color="#E5E5E5">is the table</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> is checked and it is</font>

949
00:43:38,890 --> 00:43:45,819
initialized<font color="#CCCCCC"> instantly in its relay delay</font>

950
00:43:41,619 --> 00:43:49,690
ref<font color="#CCCCCC"> KC beed ng k CB engine and it is</font>

951
00:43:45,820 --> 00:43:53,080
checked when you initialize user<font color="#E5E5E5"> ABC and</font>

952
00:43:49,690 --> 00:43:55,450
there is also a trick from<font color="#CCCCCC"> ka verify</font>

953
00:43:53,080 --> 00:43:58,630
<font color="#E5E5E5">scope execute but in this case it will</font>

954
00:43:55,450 --> 00:44:03,080
initialize<font color="#CCCCCC"> virtual</font><font color="#E5E5E5"> context but you know</font>

955
00:43:58,630 --> 00:44:06,920
in a way that<font color="#E5E5E5"> error or disabling POC</font>

956
00:44:03,080 --> 00:44:10,130
so the idea is<font color="#CCCCCC"> that but God is not</font>

957
00:44:06,920 --> 00:44:12,530
obfuscated<font color="#CCCCCC"> at this</font><font color="#E5E5E5"> point I'm not sure</font>

958
00:44:10,130 --> 00:44:15,200
<font color="#CCCCCC">why I think</font><font color="#E5E5E5"> it well it's because it must</font>

959
00:44:12,530 --> 00:44:17,720
be<font color="#E5E5E5"> fast</font><font color="#CCCCCC"> but it's</font><font color="#E5E5E5"> not off skated</font><font color="#CCCCCC"> the code</font>

960
00:44:15,200 --> 00:44:20,330
<font color="#E5E5E5">is here yes it's pretty huge because</font>

961
00:44:17,720 --> 00:44:23,149
they<font color="#CCCCCC"> enjoyed all of the things so it's</font>

962
00:44:20,330 --> 00:44:25,069
there is a huge function but<font color="#E5E5E5"> basically</font>

963
00:44:23,150 --> 00:44:27,290
usually<font color="#E5E5E5"> you look at the graph on you see</font>

964
00:44:25,070 --> 00:44:29,960
oh<font color="#E5E5E5"> okay</font><font color="#CCCCCC"> this is a huge part of the graph</font>

965
00:44:27,290 --> 00:44:33,350
but it's only<font color="#CCCCCC"> you know location</font><font color="#E5E5E5"> and this</font>

966
00:44:29,960 --> 00:44:35,870
<font color="#E5E5E5">is okay so once you read it a lot of</font>

967
00:44:33,350 --> 00:44:38,690
<font color="#E5E5E5">time you will just</font><font color="#CCCCCC"> keep the party or you</font>

968
00:44:35,870 --> 00:44:40,819
know on it will be I won't<font color="#E5E5E5"> say obvious</font>

969
00:44:38,690 --> 00:44:44,900
of course<font color="#E5E5E5"> but yeah you you tend to</font>

970
00:44:40,820 --> 00:44:48,170
<font color="#E5E5E5">recognize some part of of this function</font>

971
00:44:44,900 --> 00:44:51,140
<font color="#CCCCCC">but your thing is that it's hidden</font><font color="#E5E5E5"> and</font>

972
00:44:48,170 --> 00:44:54,290
it<font color="#CCCCCC"> used some tricks a lot of frames the</font>

973
00:44:51,140 --> 00:44:57,140
tricks<font color="#CCCCCC"> there will be a white paper</font><font color="#E5E5E5"> with</font>

974
00:44:54,290 --> 00:45:01,450
much more details in it redacting it it

975
00:44:57,140 --> 00:45:04,549
takes<font color="#E5E5E5"> a long time but</font><font color="#CCCCCC"> yeah I'm trying to</font>

976
00:45:01,450 --> 00:45:07,129
as soon as possible

977
00:45:04,550 --> 00:45:11,150
<font color="#CCCCCC">our</font><font color="#E5E5E5"> conclusion is</font><font color="#CCCCCC"> that not a single</font>

978
00:45:07,130 --> 00:45:13,550
<font color="#CCCCCC">auger was used during analysis we use</font>

979
00:45:11,150 --> 00:45:15,590
timeless<font color="#CCCCCC"> analogies so basically all on C</font>

980
00:45:13,550 --> 00:45:18,680
<font color="#CCCCCC">debug stuff we're about passed in the</font>

981
00:45:15,590 --> 00:45:20,810
second we<font color="#E5E5E5"> don't need to and yeah we</font>

982
00:45:18,680 --> 00:45:24,470
didn't<font color="#E5E5E5"> have to launch like</font><font color="#CCCCCC"> ten times</font>

983
00:45:20,810 --> 00:45:28,490
<font color="#E5E5E5">just to get</font><font color="#CCCCCC"> any</font><font color="#E5E5E5"> specific state we just</font>

984
00:45:24,470 --> 00:45:32,330
had to<font color="#CCCCCC"> jet you</font><font color="#E5E5E5"> that I</font><font color="#CCCCCC"> own eyes</font><font color="#E5E5E5"> and then</font>

985
00:45:28,490 --> 00:45:34,189
watch back to the trace<font color="#E5E5E5"> feel free to go</font>

986
00:45:32,330 --> 00:45:36,980
to<font color="#E5E5E5"> the van booth in the hallway if you</font>

987
00:45:34,190 --> 00:45:39,680
<font color="#CCCCCC">want to and then there</font><font color="#E5E5E5"> are special</font>

988
00:45:36,980 --> 00:45:41,590
things<font color="#CCCCCC"> an acknowledgement of course</font><font color="#E5E5E5"> FN</font>

989
00:45:39,680 --> 00:45:44,540
silicon for giving me this opportunity

990
00:45:41,590 --> 00:45:46,970
<font color="#CCCCCC">bridge down for some profiling and stuff</font>

991
00:45:44,540 --> 00:45:49,810
and many<font color="#E5E5E5"> people such</font><font color="#CCCCCC"> Thunder</font><font color="#E5E5E5"> McConnell</font>

992
00:45:46,970 --> 00:45:52,609
of<font color="#E5E5E5"> artemchik in</font><font color="#CCCCCC"> gaming sky during Ansari</font>

993
00:45:49,810 --> 00:45:54,470
Peter Venus and<font color="#CCCCCC"> Mabel for letting me</font>

994
00:45:52,610 --> 00:45:57,460
work on this<font color="#E5E5E5"> awesome project</font><font color="#CCCCCC"> my</font>

995
00:45:54,470 --> 00:46:04,069
<font color="#E5E5E5">co-workers on people from</font><font color="#CCCCCC"> ice anymore</font>

996
00:45:57,460 --> 00:46:23,780
so this is basically<font color="#E5E5E5"> its</font>

997
00:46:04,070 --> 00:46:25,640
and do you have some<font color="#E5E5E5"> questions okay</font>

998
00:46:23,780 --> 00:46:25,940
<font color="#E5E5E5">first of all very nice research thank</font>

999
00:46:25,640 --> 00:46:28,819
you

1000
00:46:25,940 --> 00:46:30,590
and then I keep hearing about hyper

1001
00:46:28,820 --> 00:46:32,600
guard being<font color="#E5E5E5"> the next level of</font>

1002
00:46:30,590 --> 00:46:34,460
replacement<font color="#E5E5E5"> of pet</font><font color="#CCCCCC"> cart have you ever</font>

1003
00:46:32,600 --> 00:46:47,290
<font color="#CCCCCC">looked into</font><font color="#E5E5E5"> that at all not yet</font>

1004
00:46:34,460 --> 00:46:47,290
sorry<font color="#E5E5E5"> not yet</font><font color="#CCCCCC"> yeah more questions so</font>

1005
00:46:48,340 --> 00:46:56,780
<font color="#CCCCCC">here's an obvious one</font><font color="#E5E5E5"> how much time did</font>

1006
00:46:51,380 --> 00:46:57,170
you<font color="#E5E5E5"> sink into it</font><font color="#CCCCCC"> a lot like</font><font color="#E5E5E5"> any four</font>

1007
00:46:56,780 --> 00:47:01,220
months

1008
00:46:57,170 --> 00:47:03,290
yeah yeah because I had to level<font color="#CCCCCC"> up on</font>

1009
00:47:01,220 --> 00:47:05,089
many stuff life<font color="#E5E5E5"> if you know how to write</font>

1010
00:47:03,290 --> 00:47:11,029
drivers<font color="#E5E5E5"> on everything it will be way</font>

1011
00:47:05,090 --> 00:47:23,870
quicker and I didn't so the<font color="#CCCCCC"> data rod is</font>

1012
00:47:11,030 --> 00:47:26,950
pretty long<font color="#E5E5E5"> to analyze - okay okay</font><font color="#CCCCCC"> feel</font>

1013
00:47:23,870 --> 00:47:26,950
free<font color="#CCCCCC"> to ask</font><font color="#E5E5E5"> me some questions</font>

1014
00:47:31,760 --> 00:47:34,929
[Applause]

