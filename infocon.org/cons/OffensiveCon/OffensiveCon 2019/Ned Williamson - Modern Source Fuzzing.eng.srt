1
00:00:04,730 --> 00:00:08,760
<font color="#E5E5E5">all right</font>

2
00:00:06,029 --> 00:00:10,110
hello<font color="#E5E5E5"> everyone hear me we're good all</font>

3
00:00:08,760 --> 00:00:12,269
right can't really see<font color="#CCCCCC"> any one cent but</font>

4
00:00:10,110 --> 00:00:13,620
I can see this<font color="#CCCCCC"> yeah</font><font color="#E5E5E5"> started about that I</font>

5
00:00:12,269 --> 00:00:17,279
flew in late<font color="#E5E5E5"> last night and didn't</font>

6
00:00:13,620 --> 00:00:20,130
<font color="#E5E5E5">av-test so we exported</font><font color="#CCCCCC"> this straight to</font>

7
00:00:17,279 --> 00:00:21,769
<font color="#CCCCCC">PowerPoint</font><font color="#E5E5E5"> we'll see if it</font><font color="#CCCCCC"> works but</font>

8
00:00:20,130 --> 00:00:27,119
<font color="#E5E5E5">yeah so I'm here today to talk about</font>

9
00:00:21,769 --> 00:00:29,848
fuzzing<font color="#E5E5E5"> and I guess the last</font><font color="#CCCCCC"> couple</font>

10
00:00:27,119 --> 00:00:31,710
years<font color="#E5E5E5"> I've just kind of been exploring</font>

11
00:00:29,849 --> 00:00:34,920
<font color="#E5E5E5">how to take like this whole idea</font><font color="#CCCCCC"> of</font>

12
00:00:31,710 --> 00:00:38,910
coverage guided fuzzing that was kind of

13
00:00:34,920 --> 00:00:40,710
pioneered by AFL and<font color="#E5E5E5"> just like coming</font>

14
00:00:38,910 --> 00:00:45,209
<font color="#E5E5E5">from a more auditing bug hunting</font>

15
00:00:40,710 --> 00:00:46,950
background like how can<font color="#CCCCCC"> we use</font><font color="#E5E5E5"> AFL kind</font>

16
00:00:45,210 --> 00:00:49,370
of augment that<font color="#E5E5E5"> or live fuzzer you know</font>

17
00:00:46,950 --> 00:00:51,780
whatever kind<font color="#E5E5E5"> of fuzzing engine and so</font>

18
00:00:49,370 --> 00:00:54,510
in this<font color="#E5E5E5"> talk I'll start by going over</font><font color="#CCCCCC"> a</font>

19
00:00:51,780 --> 00:00:57,600
little<font color="#E5E5E5"> bit about what FL in the pleasure</font>

20
00:00:54,510 --> 00:01:00,030
<font color="#CCCCCC">are in case you don't</font><font color="#E5E5E5"> know</font><font color="#CCCCCC"> and then I'll</font>

21
00:00:57,600 --> 00:01:01,770
talk<font color="#E5E5E5"> about something</font><font color="#CCCCCC"> that I call the API</font>

22
00:01:00,030 --> 00:01:05,460
problem and how to address<font color="#E5E5E5"> it</font><font color="#CCCCCC"> with</font>

23
00:01:01,770 --> 00:01:08,760
<font color="#E5E5E5">fuzzing</font><font color="#CCCCCC"> and then you know once</font><font color="#E5E5E5"> you know</font>

24
00:01:05,459 --> 00:01:09,990
how to fuzz some kind of weird code<font color="#E5E5E5"> and</font>

25
00:01:08,760 --> 00:01:11,850
it's not<font color="#E5E5E5"> working how do you make</font>

26
00:01:09,990 --> 00:01:16,679
progress and try to get the bugs<font color="#E5E5E5"> to come</font>

27
00:01:11,850 --> 00:01:20,009
<font color="#CCCCCC">out and then we'll look at once you have</font>

28
00:01:16,680 --> 00:01:21,810
<font color="#CCCCCC">a way of testing</font><font color="#E5E5E5"> things well you know</font>

29
00:01:20,009 --> 00:01:24,060
how do you<font color="#E5E5E5"> decide what</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> prioritize and</font>

30
00:01:21,810 --> 00:01:27,570
then I'll have a couple real-world

31
00:01:24,060 --> 00:01:29,700
examples<font color="#CCCCCC"> and then I was thinking of</font>

32
00:01:27,570 --> 00:01:32,130
doing<font color="#E5E5E5"> some kind</font><font color="#CCCCCC"> of like live demo at the</font>

33
00:01:29,700 --> 00:01:34,850
<font color="#CCCCCC">end of the but I guess I can't so you</font>

34
00:01:32,130 --> 00:01:37,619
know I killed<font color="#E5E5E5"> 15 minutes anyways</font><font color="#CCCCCC"> so</font>

35
00:01:34,850 --> 00:01:39,600
here's the bug hunting<font color="#CCCCCC"> tower success and</font>

36
00:01:37,619 --> 00:01:42,320
it's kind of meaningless<font color="#E5E5E5"> but I thought</font>

37
00:01:39,600 --> 00:01:45,630
you know it'd<font color="#CCCCCC"> be kind</font><font color="#E5E5E5"> of entertaining</font>

38
00:01:42,320 --> 00:01:47,339
<font color="#CCCCCC">but I guess</font><font color="#E5E5E5"> when I look at you know the</font>

39
00:01:45,630 --> 00:01:51,149
<font color="#CCCCCC">tools you have available to look</font><font color="#E5E5E5"> for</font>

40
00:01:47,340 --> 00:01:53,159
bugs as a researcher<font color="#CCCCCC"> you can kind of</font>

41
00:01:51,149 --> 00:01:54,600
come at the same<font color="#CCCCCC"> problem with different</font>

42
00:01:53,159 --> 00:01:56,490
ways and<font color="#CCCCCC"> you might be</font><font color="#E5E5E5"> able to find</font><font color="#CCCCCC"> the</font>

43
00:01:54,600 --> 00:01:58,679
same bug in different ways<font color="#E5E5E5"> and the idea</font>

44
00:01:56,490 --> 00:02:00,270
<font color="#CCCCCC">is just</font><font color="#E5E5E5"> like looking at</font><font color="#CCCCCC"> all the</font>

45
00:01:58,680 --> 00:02:04,200
<font color="#CCCCCC">different techniques you</font><font color="#E5E5E5"> know how can we</font>

46
00:02:00,270 --> 00:02:06,240
<font color="#E5E5E5">combine them well to make finding bugs</font>

47
00:02:04,200 --> 00:02:08,489
<font color="#E5E5E5">as efficient as as painless as possible</font>

48
00:02:06,240 --> 00:02:11,290
<font color="#CCCCCC">and so the</font><font color="#E5E5E5"> last</font><font color="#CCCCCC"> couple years I've been</font>

49
00:02:08,489 --> 00:02:15,280
focusing<font color="#CCCCCC"> on</font><font color="#E5E5E5"> this table area</font>

50
00:02:11,290 --> 00:02:17,320
until recently<font color="#E5E5E5"> there wasn't</font><font color="#CCCCCC"> very good</font>

51
00:02:15,280 --> 00:02:19,780
static analysis tools available<font color="#E5E5E5"> as far</font>

52
00:02:17,320 --> 00:02:22,299
<font color="#E5E5E5">as</font><font color="#CCCCCC"> I'm you know having like</font><font color="#E5E5E5"> a compiler</font>

53
00:02:19,780 --> 00:02:26,020
<font color="#CCCCCC">pass</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> LLVM or something is like very</font>

54
00:02:22,300 --> 00:02:27,820
<font color="#CCCCCC">heavyweight and it doesn't catch very</font>

55
00:02:26,020 --> 00:02:30,640
deep bugs but from what I've<font color="#CCCCCC"> heard from</font>

56
00:02:27,820 --> 00:02:34,870
<font color="#E5E5E5">some other researchers is</font><font color="#CCCCCC"> that this new</font>

57
00:02:30,640 --> 00:02:36,820
some old stuff is really good<font color="#E5E5E5"> so I think</font>

58
00:02:34,870 --> 00:02:40,150
static analysis will<font color="#CCCCCC"> be getting</font><font color="#E5E5E5"> a lot</font>

59
00:02:36,820 --> 00:02:42,670
better soon<font color="#CCCCCC"> but for now</font><font color="#E5E5E5"> we'll</font><font color="#CCCCCC"> focus</font><font color="#E5E5E5"> in</font>

60
00:02:40,150 --> 00:02:46,410
on coverage<font color="#E5E5E5"> credit fuzzing and kind of</font>

61
00:02:42,670 --> 00:02:48,760
<font color="#E5E5E5">how do we combine this with auditing so</font>

62
00:02:46,410 --> 00:02:51,730
just as some<font color="#CCCCCC"> background information</font>

63
00:02:48,760 --> 00:02:56,560
about AFL and<font color="#CCCCCC"> Lim fuzzer these are kind</font>

64
00:02:51,730 --> 00:02:58,780
of<font color="#E5E5E5"> two of the more</font><font color="#CCCCCC"> popular variants</font><font color="#E5E5E5"> of a</font>

65
00:02:56,560 --> 00:03:01,630
specific fuzzing technique called

66
00:02:58,780 --> 00:03:03,730
coverage<font color="#E5E5E5"> credit fuzzing and the idea</font>

67
00:03:01,630 --> 00:03:06,790
here is<font color="#E5E5E5"> you</font><font color="#CCCCCC"> have</font><font color="#E5E5E5"> something that you want</font>

68
00:03:03,730 --> 00:03:09,820
to fuzz<font color="#E5E5E5"> you have some corpus of input</font>

69
00:03:06,790 --> 00:03:11,790
data<font color="#CCCCCC"> and</font><font color="#E5E5E5"> the way that you make progress</font>

70
00:03:09,820 --> 00:03:14,170
<font color="#E5E5E5">is by picking</font><font color="#CCCCCC"> a random corpus input</font>

71
00:03:11,790 --> 00:03:17,650
doing a random<font color="#CCCCCC"> mutation and</font><font color="#E5E5E5"> feeding this</font>

72
00:03:14,170 --> 00:03:20,500
into the<font color="#CCCCCC"> input program</font><font color="#E5E5E5"> and you see if</font>

73
00:03:17,650 --> 00:03:22,780
new coverage was uncovered<font color="#CCCCCC"> and if so you</font>

74
00:03:20,500 --> 00:03:25,330
keep<font color="#E5E5E5"> this test case as a special one if</font>

75
00:03:22,780 --> 00:03:27,549
not you discard it<font color="#CCCCCC"> so it's a</font><font color="#E5E5E5"> very simple</font>

76
00:03:25,330 --> 00:03:30,519
<font color="#E5E5E5">idea</font><font color="#CCCCCC"> but it just</font><font color="#E5E5E5"> turns out that when</font><font color="#CCCCCC"> you</font>

77
00:03:27,549 --> 00:03:33,640
do<font color="#E5E5E5"> this very quickly it</font><font color="#CCCCCC"> actually does a</font>

78
00:03:30,519 --> 00:03:35,290
great job at exploring<font color="#CCCCCC"> code so</font><font color="#E5E5E5"> you know</font>

79
00:03:33,640 --> 00:03:36,640
this<font color="#E5E5E5"> has</font><font color="#CCCCCC"> been around since like</font><font color="#E5E5E5"> 2014 so</font>

80
00:03:35,290 --> 00:03:41,260
<font color="#E5E5E5">it's not really news but you know just</font><font color="#CCCCCC"> a</font>

81
00:03:36,640 --> 00:03:43,420
little<font color="#E5E5E5"> background so because I'll be</font>

82
00:03:41,260 --> 00:03:44,980
giving<font color="#CCCCCC"> some</font><font color="#E5E5E5"> kind of specific examples</font>

83
00:03:43,420 --> 00:03:48,910
with<font color="#E5E5E5"> Lib</font><font color="#CCCCCC"> Huzur I</font><font color="#E5E5E5"> should go a little more</font>

84
00:03:44,980 --> 00:03:50,828
detail<font color="#E5E5E5"> about that</font><font color="#CCCCCC"> Lib buzzer is LLVM</font>

85
00:03:48,910 --> 00:03:54,810
<font color="#CCCCCC">projects version of coverage guided</font>

86
00:03:50,829 --> 00:03:57,489
fuzzing<font color="#E5E5E5"> and this is essentially this</font>

87
00:03:54,810 --> 00:03:59,680
exact same<font color="#CCCCCC"> design of keeping a corpus</font>

88
00:03:57,489 --> 00:04:03,100
<font color="#E5E5E5">and growing it with new inputs as they</font>

89
00:03:59,680 --> 00:04:08,350
find a new coverage<font color="#E5E5E5"> but it doesn't do</font>

90
00:04:03,100 --> 00:04:09,820
any forking like<font color="#E5E5E5"> AFL it just keeps all</font>

91
00:04:08,350 --> 00:04:12,640
these test<font color="#CCCCCC"> cases</font><font color="#E5E5E5"> in memory and it picks</font>

92
00:04:09,820 --> 00:04:14,410
one it tries<font color="#E5E5E5"> to flip a bit and run it</font>

93
00:04:12,640 --> 00:04:17,159
through<font color="#E5E5E5"> again and it just this kind</font><font color="#CCCCCC"> of</font>

94
00:04:14,410 --> 00:04:19,510
self-contained feedback loop<font color="#E5E5E5"> and then as</font>

95
00:04:17,160 --> 00:04:22,630
<font color="#CCCCCC">it's finding new coverage</font><font color="#E5E5E5"> is writing</font>

96
00:04:19,510 --> 00:04:24,219
files<font color="#E5E5E5"> out</font><font color="#CCCCCC"> to disk you know this this</font>

97
00:04:22,630 --> 00:04:27,909
<font color="#E5E5E5">does really matter but just</font><font color="#CCCCCC"> a little</font>

98
00:04:24,220 --> 00:04:29,500
detail<font color="#E5E5E5"> but the important kind of</font>

99
00:04:27,910 --> 00:04:31,090
difference<font color="#E5E5E5"> with lib</font><font color="#CCCCCC"> fuzzer which</font><font color="#E5E5E5"> i think</font>

100
00:04:29,500 --> 00:04:33,820
<font color="#E5E5E5">is important is that it's a little</font><font color="#CCCCCC"> bit</font>

101
00:04:31,090 --> 00:04:36,369
more work<font color="#E5E5E5"> to set up</font><font color="#CCCCCC"> versus AFL but it</font>

102
00:04:33,820 --> 00:04:39,820
kind of forces<font color="#CCCCCC"> you to interact with</font><font color="#E5E5E5"> an</font>

103
00:04:36,370 --> 00:04:41,470
API<font color="#E5E5E5"> and</font><font color="#CCCCCC"> make sure that as you're fuzzing</font>

104
00:04:39,820 --> 00:04:43,960
in this loop in the same<font color="#E5E5E5"> process</font><font color="#CCCCCC"> that</font>

105
00:04:41,470 --> 00:04:46,390
<font color="#E5E5E5">you don't accumulate state so for</font><font color="#CCCCCC"> that</font>

106
00:04:43,960 --> 00:04:48,880
<font color="#CCCCCC">reason you have to kind of have some</font>

107
00:04:46,390 --> 00:04:50,289
<font color="#E5E5E5">more awareness about the API or the</font><font color="#CCCCCC"> API</font>

108
00:04:48,880 --> 00:04:53,920
you're interacting with<font color="#E5E5E5"> and how to make</font>

109
00:04:50,290 --> 00:04:56,770
sure<font color="#CCCCCC"> that you can clean up</font><font color="#E5E5E5"> and reset</font><font color="#CCCCCC"> to</font>

110
00:04:53,920 --> 00:04:59,490
original state<font color="#E5E5E5"> and it I just found that</font>

111
00:04:56,770 --> 00:05:02,159
by playing with<font color="#E5E5E5"> this I realized that</font>

112
00:04:59,490 --> 00:05:05,170
<font color="#E5E5E5">this tool</font><font color="#CCCCCC"> kind of encourages you to</font>

113
00:05:02,160 --> 00:05:08,380
think<font color="#CCCCCC"> about</font><font color="#E5E5E5"> the API you're interacting</font>

114
00:05:05,170 --> 00:05:10,200
with<font color="#E5E5E5"> and kind of it kind</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> brings this</font>

115
00:05:08,380 --> 00:05:12,550
kind<font color="#E5E5E5"> of auditing mindset of like you're</font>

116
00:05:10,200 --> 00:05:13,900
looking<font color="#CCCCCC"> into API how it works some of</font>

117
00:05:12,550 --> 00:05:16,860
the semantics of it<font color="#E5E5E5"> and stuff and it</font>

118
00:05:13,900 --> 00:05:18,909
<font color="#CCCCCC">just you know once you get</font><font color="#E5E5E5"> it working</font>

119
00:05:16,860 --> 00:05:23,140
<font color="#CCCCCC">the fuzzing seems to go a little bit</font>

120
00:05:18,910 --> 00:05:26,830
<font color="#E5E5E5">better so I'll talk a little bit about I</font>

121
00:05:23,140 --> 00:05:28,870
guess how to use this<font color="#E5E5E5"> so it's</font><font color="#CCCCCC"> actually</font>

122
00:05:26,830 --> 00:05:32,050
<font color="#E5E5E5">very simple there's basically two parts</font>

123
00:05:28,870 --> 00:05:35,710
<font color="#E5E5E5">there's the writing your fuzz target</font><font color="#CCCCCC"> and</font>

124
00:05:32,050 --> 00:05:38,470
then there's<font color="#E5E5E5"> how you actually build your</font>

125
00:05:35,710 --> 00:05:40,479
<font color="#E5E5E5">fuzzer and you know this is</font><font color="#CCCCCC"> just</font>

126
00:05:38,470 --> 00:05:41,800
documentation so<font color="#E5E5E5"> I won't spend</font><font color="#CCCCCC"> too much</font>

127
00:05:40,479 --> 00:05:43,630
time<font color="#E5E5E5"> but you know you just implement a</font>

128
00:05:41,800 --> 00:05:45,220
<font color="#E5E5E5">function that will do something</font>

129
00:05:43,630 --> 00:05:49,150
interesting<font color="#E5E5E5"> with</font><font color="#CCCCCC"> your code that</font><font color="#E5E5E5"> you want</font>

130
00:05:45,220 --> 00:05:52,720
<font color="#E5E5E5">to fuzz given an input file string of</font>

131
00:05:49,150 --> 00:05:57,099
bytes<font color="#E5E5E5"> and then you pass these special</font>

132
00:05:52,720 --> 00:05:59,020
<font color="#E5E5E5">flags to</font><font color="#CCCCCC"> play and it will include the</font>

133
00:05:57,100 --> 00:06:02,320
fuzzer for you so this<font color="#CCCCCC"> is</font><font color="#E5E5E5"> like the most</font>

134
00:05:59,020 --> 00:06:04,240
<font color="#E5E5E5">recent way to do this it's very easy it</font>

135
00:06:02,320 --> 00:06:08,290
<font color="#E5E5E5">works on like Mac OS and Windows Linux</font>

136
00:06:04,240 --> 00:06:09,820
so it's<font color="#E5E5E5"> pretty easy to extend any</font>

137
00:06:08,290 --> 00:06:13,510
project<font color="#E5E5E5"> that can you can</font><font color="#CCCCCC"> build with</font>

138
00:06:09,820 --> 00:06:17,050
<font color="#CCCCCC">claimed</font><font color="#E5E5E5"> with this kind of fuzzing</font><font color="#CCCCCC"> and so</font>

139
00:06:13,510 --> 00:06:22,330
as a simple<font color="#E5E5E5"> example say you have</font><font color="#CCCCCC"> some</font>

140
00:06:17,050 --> 00:06:24,010
image parsing API that has this same you

141
00:06:22,330 --> 00:06:28,270
know takes<font color="#CCCCCC"> the data</font><font color="#E5E5E5"> and the size of</font><font color="#CCCCCC"> the</font>

142
00:06:24,010 --> 00:06:30,669
data<font color="#E5E5E5"> you know you would just do some</font>

143
00:06:28,270 --> 00:06:34,570
very trivial kind<font color="#E5E5E5"> of integration here to</font>

144
00:06:30,669 --> 00:06:36,039
use your API<font color="#E5E5E5"> and then you just build</font>

145
00:06:34,570 --> 00:06:37,540
with<font color="#E5E5E5"> these flags and then run it and</font>

146
00:06:36,039 --> 00:06:39,520
starts<font color="#CCCCCC"> buzzing and</font>

147
00:06:37,540 --> 00:06:42,790
<font color="#E5E5E5">sanitizer will print the bugs out for</font>

148
00:06:39,520 --> 00:06:44,289
you<font color="#E5E5E5"> so you</font><font color="#CCCCCC"> know this</font><font color="#E5E5E5"> is okay this is a</font>

149
00:06:42,790 --> 00:06:47,170
really<font color="#CCCCCC"> simple thing that</font><font color="#E5E5E5"> like a lot</font><font color="#CCCCCC"> of</font>

150
00:06:44,290 --> 00:06:49,420
<font color="#E5E5E5">people are already doing but how do we</font>

151
00:06:47,170 --> 00:06:53,980
find these like<font color="#CCCCCC"> sandbox</font><font color="#E5E5E5"> escapes with</font>

152
00:06:49,420 --> 00:06:56,350
like<font color="#E5E5E5"> Network</font><font color="#CCCCCC"> you know the some</font><font color="#E5E5E5"> kind of</font>

153
00:06:53,980 --> 00:06:58,690
weird<font color="#CCCCCC"> network interaction or some like</font>

154
00:06:56,350 --> 00:07:00,700
<font color="#E5E5E5">timing of packets or something like it</font>

155
00:06:58,690 --> 00:07:01,780
<font color="#CCCCCC">just seems like</font><font color="#E5E5E5"> such a huge jump</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> so</font>

156
00:07:00,700 --> 00:07:04,030
like this<font color="#E5E5E5"> is the problem I've</font><font color="#CCCCCC"> been</font>

157
00:07:01,780 --> 00:07:08,349
<font color="#E5E5E5">exploring and it turns out it's actually</font>

158
00:07:04,030 --> 00:07:10,659
<font color="#E5E5E5">not too hard</font><font color="#CCCCCC"> to deal with</font><font color="#E5E5E5"> this and so</font>

159
00:07:08,350 --> 00:07:15,460
the issue here<font color="#CCCCCC"> like I was just</font><font color="#E5E5E5"> saying</font>

160
00:07:10,660 --> 00:07:16,510
<font color="#CCCCCC">you know</font><font color="#E5E5E5"> basically when you have when</font>

161
00:07:15,460 --> 00:07:18,820
<font color="#E5E5E5">you're</font><font color="#CCCCCC"> trying to attacks line coming</font>

162
00:07:16,510 --> 00:07:20,920
from the network<font color="#CCCCCC"> I'd be CDMA</font><font color="#E5E5E5"> you've all</font>

163
00:07:18,820 --> 00:07:27,070
these kind of<font color="#E5E5E5"> weird tack surfaces that</font>

164
00:07:20,920 --> 00:07:31,600
are<font color="#E5E5E5"> not just string parsers and you know</font>

165
00:07:27,070 --> 00:07:34,120
you want a way<font color="#E5E5E5"> to basically expand the</font>

166
00:07:31,600 --> 00:07:36,940
scope of of these fuzzing campaigns to

167
00:07:34,120 --> 00:07:38,130
kind of incorporate the type of

168
00:07:36,940 --> 00:07:41,950
interaction<font color="#CCCCCC"> that could actually happen</font>

169
00:07:38,130 --> 00:07:43,540
<font color="#E5E5E5">within a you know from kind</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> an</font>

170
00:07:41,950 --> 00:07:45,219
auditing perspective you think like oh

171
00:07:43,540 --> 00:07:46,930
how<font color="#E5E5E5"> can</font><font color="#CCCCCC"> I interact</font><font color="#E5E5E5"> with this API to</font>

172
00:07:45,220 --> 00:07:51,880
trigger a bug<font color="#CCCCCC"> you know you kind of</font><font color="#E5E5E5"> want</font>

173
00:07:46,930 --> 00:07:54,820
to have a way to fuzz that<font color="#E5E5E5"> so you know</font>

174
00:07:51,880 --> 00:07:55,900
<font color="#E5E5E5">to boil it down basically when</font><font color="#CCCCCC"> people</font>

175
00:07:54,820 --> 00:07:57,310
are using coverage guide fuzzing it

176
00:07:55,900 --> 00:08:00,789
looks like they're always<font color="#E5E5E5"> attacking</font>

177
00:07:57,310 --> 00:08:02,050
these things on the left<font color="#CCCCCC"> and then what</font>

178
00:08:00,790 --> 00:08:04,240
we really want to do is be able<font color="#E5E5E5"> to kind</font>

179
00:08:02,050 --> 00:08:06,720
of extend it to focus<font color="#E5E5E5"> on fuzzing things</font>

180
00:08:04,240 --> 00:08:09,610
on the right and so if you can just

181
00:08:06,720 --> 00:08:13,540
learn how<font color="#CCCCCC"> to make this jump from fussing</font>

182
00:08:09,610 --> 00:08:16,210
some string parser thing to fuzzing an

183
00:08:13,540 --> 00:08:19,660
API this actually opens<font color="#CCCCCC"> up</font><font color="#E5E5E5"> a tremendous</font>

184
00:08:16,210 --> 00:08:21,039
<font color="#E5E5E5">amount of attack surface and you know</font>

185
00:08:19,660 --> 00:08:25,870
for example<font color="#CCCCCC"> like all of the</font><font color="#E5E5E5"> Chrome</font>

186
00:08:21,040 --> 00:08:28,150
browser IPC for sandbox escaping so I

187
00:08:25,870 --> 00:08:32,200
think like<font color="#E5E5E5"> you know it's useful</font><font color="#CCCCCC"> to kind</font>

188
00:08:28,150 --> 00:08:33,699
<font color="#E5E5E5">of explore how to do this so kind of the</font>

189
00:08:32,200 --> 00:08:36,880
existing ways<font color="#E5E5E5"> that people deal with this</font>

190
00:08:33,700 --> 00:08:39,099
problem is through either generative

191
00:08:36,880 --> 00:08:42,909
fuzzing or mutational fuzzing<font color="#E5E5E5"> and a</font>

192
00:08:39,099 --> 00:08:44,500
traditional sense<font color="#E5E5E5"> so what this means is</font>

193
00:08:42,909 --> 00:08:45,939
in the first case people<font color="#E5E5E5"> might write it</font>

194
00:08:44,500 --> 00:08:50,060
like<font color="#E5E5E5"> a</font><font color="#CCCCCC"> Python script</font><font color="#E5E5E5"> that will generate</font>

195
00:08:45,940 --> 00:08:52,260
some<font color="#CCCCCC"> random IPC calls or</font>

196
00:08:50,060 --> 00:08:54,930
you know they might think<font color="#E5E5E5"> well I don't</font>

197
00:08:52,260 --> 00:08:56,939
really know what to<font color="#E5E5E5"> generate</font><font color="#CCCCCC"> because it</font>

198
00:08:54,930 --> 00:09:01,680
won't really be<font color="#CCCCCC"> a real interaction so</font>

199
00:08:56,940 --> 00:09:03,990
let me<font color="#E5E5E5"> flip bits to try to you know</font>

200
00:09:01,680 --> 00:09:06,719
<font color="#E5E5E5">tease out any shallow bugs that might be</font>

201
00:09:03,990 --> 00:09:08,130
in a more legitimate<font color="#E5E5E5"> interaction but</font>

202
00:09:06,720 --> 00:09:09,900
<font color="#E5E5E5">what's nice about coverage guided</font>

203
00:09:08,130 --> 00:09:13,170
fuzzing is<font color="#E5E5E5"> it's doing this second thing</font>

204
00:09:09,900 --> 00:09:15,270
for you<font color="#CCCCCC"> and</font><font color="#E5E5E5"> it's you know essentially</font>

205
00:09:13,170 --> 00:09:17,280
<font color="#E5E5E5">helping you find the interesting kind of</font>

206
00:09:15,270 --> 00:09:21,530
interaction already so<font color="#CCCCCC"> all you have to</font>

207
00:09:17,280 --> 00:09:24,089
<font color="#E5E5E5">do is be able to figure out a way</font><font color="#CCCCCC"> to</font>

208
00:09:21,530 --> 00:09:30,480
interact with<font color="#E5E5E5"> this API deterministically</font>

209
00:09:24,090 --> 00:09:31,920
<font color="#E5E5E5">so okay how does this look so I thought</font>

210
00:09:30,480 --> 00:09:35,010
about it and<font color="#E5E5E5"> I thought okay</font><font color="#CCCCCC"> well you</font>

211
00:09:31,920 --> 00:09:38,969
know we can you know ideally fuzz these

212
00:09:35,010 --> 00:09:40,650
things you<font color="#E5E5E5"> know with with</font><font color="#CCCCCC"> generative</font>

213
00:09:38,970 --> 00:09:44,430
fuzzing<font color="#E5E5E5"> you're not getting coverage</font>

214
00:09:40,650 --> 00:09:45,540
feedback and it's slow<font color="#E5E5E5"> with bit flipping</font>

215
00:09:44,430 --> 00:09:48,989
mutations you know you're not<font color="#E5E5E5"> getting</font>

216
00:09:45,540 --> 00:09:50,069
much coverage but<font color="#E5E5E5"> you</font><font color="#CCCCCC"> know there's no</font>

217
00:09:48,990 --> 00:09:54,090
<font color="#E5E5E5">reason we can't just combine these</font>

218
00:09:50,070 --> 00:09:55,470
<font color="#E5E5E5">things and you can just make a</font>

219
00:09:54,090 --> 00:10:00,950
generative coverage<font color="#CCCCCC"> guide fuzzer so</font>

220
00:09:55,470 --> 00:10:04,200
that's kind of how this works<font color="#CCCCCC"> so I think</font>

221
00:10:00,950 --> 00:10:07,350
it's pretty<font color="#E5E5E5"> clear like that</font><font color="#CCCCCC"> okay you can</font>

222
00:10:04,200 --> 00:10:09,330
write a generative<font color="#CCCCCC"> buzzer in C++ and</font>

223
00:10:07,350 --> 00:10:14,040
<font color="#E5E5E5">then had this</font><font color="#CCCCCC"> covered stuff and it</font>

224
00:10:09,330 --> 00:10:15,780
should work<font color="#CCCCCC"> but how to kind of actually</font>

225
00:10:14,040 --> 00:10:18,480
do this<font color="#E5E5E5"> in practice is where it's a</font>

226
00:10:15,780 --> 00:10:21,689
little<font color="#E5E5E5"> interesting so I have talked you</font>

227
00:10:18,480 --> 00:10:24,270
<font color="#E5E5E5">know before about kind of the fuzzer I</font>

228
00:10:21,690 --> 00:10:27,660
was writing<font color="#E5E5E5"> there's a couple</font><font color="#CCCCCC"> open source</font>

229
00:10:24,270 --> 00:10:29,850
buzzers I put on the<font color="#E5E5E5"> chrome repo to find</font>

230
00:10:27,660 --> 00:10:31,230
these<font color="#E5E5E5"> hanboks escapes but like here's</font>

231
00:10:29,850 --> 00:10:36,210
kind<font color="#CCCCCC"> of</font><font color="#E5E5E5"> the truth about how they came</font>

232
00:10:31,230 --> 00:10:39,840
<font color="#CCCCCC">about</font><font color="#E5E5E5"> so okay it's a little messed up</font>

233
00:10:36,210 --> 00:10:44,160
<font color="#CCCCCC">because</font><font color="#E5E5E5"> of the PDF thing but basically</font>

234
00:10:39,840 --> 00:10:45,720
the the idea is before<font color="#E5E5E5"> you're hooking</font>

235
00:10:44,160 --> 00:10:46,980
<font color="#E5E5E5">lib</font><font color="#CCCCCC"> buzzer directly into this library</font>

236
00:10:45,720 --> 00:10:49,590
<font color="#E5E5E5">under test and now we're going</font><font color="#CCCCCC"> to</font>

237
00:10:46,980 --> 00:10:52,860
<font color="#E5E5E5">introduce a little simple parser in</font>

238
00:10:49,590 --> 00:10:55,650
<font color="#E5E5E5">between we'll just make up kind of a</font>

239
00:10:52,860 --> 00:10:59,070
floor mat<font color="#E5E5E5"> that represents an interaction</font>

240
00:10:55,650 --> 00:11:01,199
<font color="#E5E5E5">with an API and then interact with the</font>

241
00:10:59,070 --> 00:11:03,990
<font color="#CCCCCC">API so you know that sounds kind of</font>

242
00:11:01,200 --> 00:11:06,840
weird<font color="#E5E5E5"> but it's actually really simple</font>

243
00:11:03,990 --> 00:11:09,180
so the idea here<font color="#E5E5E5"> is you</font><font color="#CCCCCC"> take your input</font>

244
00:11:06,840 --> 00:11:12,390
string of bytes<font color="#E5E5E5"> and you wrap</font><font color="#CCCCCC"> it with</font>

245
00:11:09,180 --> 00:11:16,349
<font color="#E5E5E5">some kind of object</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> lets you</font>

246
00:11:12,390 --> 00:11:20,189
consume the stream<font color="#E5E5E5"> one chunk at a time</font>

247
00:11:16,350 --> 00:11:22,590
and then<font color="#E5E5E5"> you</font><font color="#CCCCCC"> just treat this</font><font color="#E5E5E5"> stream</font><font color="#CCCCCC"> of</font>

248
00:11:20,190 --> 00:11:23,940
bytes<font color="#CCCCCC"> like this</font><font color="#E5E5E5"> random number generator</font>

249
00:11:22,590 --> 00:11:28,080
and<font color="#CCCCCC"> you</font><font color="#E5E5E5"> just write a generative</font><font color="#CCCCCC"> buzzer</font>

250
00:11:23,940 --> 00:11:29,670
<font color="#E5E5E5">but the insight</font><font color="#CCCCCC"> here is</font><font color="#E5E5E5"> that coverage</font>

251
00:11:28,080 --> 00:11:32,220
guided fuzzing can explore for you

252
00:11:29,670 --> 00:11:34,319
<font color="#CCCCCC">because you're not</font><font color="#E5E5E5"> just</font><font color="#CCCCCC"> randomly</font>

253
00:11:32,220 --> 00:11:37,050
flipping a coin you're<font color="#E5E5E5"> actually you know</font>

254
00:11:34,320 --> 00:11:42,270
taking this random data from the fuzzer

255
00:11:37,050 --> 00:11:44,609
input<font color="#E5E5E5"> so yep</font><font color="#CCCCCC"> so and then you know</font>

256
00:11:42,270 --> 00:11:48,030
<font color="#CCCCCC">basically</font><font color="#E5E5E5"> I noticed that</font><font color="#CCCCCC"> the same kind</font>

257
00:11:44,610 --> 00:11:50,730
of pattern keeps<font color="#E5E5E5"> appearing where you</font>

258
00:11:48,030 --> 00:11:53,720
just<font color="#E5E5E5"> try to set up whatever kind</font><font color="#CCCCCC"> of</font>

259
00:11:50,730 --> 00:11:57,210
objects you want<font color="#E5E5E5"> to test in the</font><font color="#CCCCCC"> C++ and</font>

260
00:11:53,720 --> 00:11:58,590
you try<font color="#CCCCCC"> to set them up</font><font color="#E5E5E5"> as randomly as</font>

261
00:11:57,210 --> 00:12:01,200
possible so if they have some

262
00:11:58,590 --> 00:12:03,360
configuration options<font color="#CCCCCC"> you just try to</font>

263
00:12:01,200 --> 00:12:04,830
<font color="#E5E5E5">think about like as an auditor you're</font>

264
00:12:03,360 --> 00:12:06,990
always thinking<font color="#CCCCCC"> like</font><font color="#E5E5E5"> okay how much of</font>

265
00:12:04,830 --> 00:12:10,190
this do I control this same kind<font color="#CCCCCC"> of</font>

266
00:12:06,990 --> 00:12:12,480
insight comes<font color="#E5E5E5"> into writing the fuzzer</font>

267
00:12:10,190 --> 00:12:14,220
so you know here's this<font color="#CCCCCC"> very</font><font color="#E5E5E5"> simple</font>

268
00:12:12,480 --> 00:12:16,830
<font color="#CCCCCC">example so</font><font color="#E5E5E5"> let's say we have some kind</font>

269
00:12:14,220 --> 00:12:20,540
<font color="#E5E5E5">of database class that we want to fuzz</font>

270
00:12:16,830 --> 00:12:25,710
<font color="#E5E5E5">so you know this could</font><font color="#CCCCCC"> be</font><font color="#E5E5E5"> something in</font>

271
00:12:20,540 --> 00:12:27,150
like a<font color="#E5E5E5"> web api like in</font><font color="#CCCCCC"> JavaScript or you</font>

272
00:12:25,710 --> 00:12:31,020
know in the<font color="#E5E5E5"> Dom or something or this</font>

273
00:12:27,150 --> 00:12:32,850
could<font color="#E5E5E5"> be in the in the chrome sandbox</font>

274
00:12:31,020 --> 00:12:36,390
here from the<font color="#E5E5E5"> renderer process this</font>

275
00:12:32,850 --> 00:12:37,980
could be something that's<font color="#E5E5E5"> in a</font>

276
00:12:36,390 --> 00:12:41,250
hypervisor<font color="#CCCCCC"> and you have some way of</font>

277
00:12:37,980 --> 00:12:43,170
hitting<font color="#E5E5E5"> this API through some</font><font color="#CCCCCC"> path and</font>

278
00:12:41,250 --> 00:12:46,110
you know the idea<font color="#CCCCCC"> is</font><font color="#E5E5E5"> like there's a</font><font color="#CCCCCC"> text</font>

279
00:12:43,170 --> 00:12:48,420
service everywhere and you<font color="#CCCCCC"> know when</font><font color="#E5E5E5"> it</font>

280
00:12:46,110 --> 00:12:50,280
pulls down<font color="#E5E5E5"> to it it's just</font><font color="#CCCCCC"> they're just</font>

281
00:12:48,420 --> 00:12:52,740
<font color="#E5E5E5">C++</font><font color="#CCCCCC"> you know they're just some interface</font>

282
00:12:50,280 --> 00:12:57,689
<font color="#E5E5E5">just play with it and find the</font><font color="#CCCCCC"> bugs so</font>

283
00:12:52,740 --> 00:13:01,500
the idea is essentially we<font color="#E5E5E5"> take our</font>

284
00:12:57,690 --> 00:13:04,350
input<font color="#CCCCCC"> string and we have this API and we</font>

285
00:13:01,500 --> 00:13:08,130
say okay well we know we can control any

286
00:13:04,350 --> 00:13:11,970
of the<font color="#E5E5E5"> arguments to the API</font><font color="#CCCCCC"> so we just</font>

287
00:13:08,130 --> 00:13:14,280
take<font color="#CCCCCC"> our input string and consume you</font>

288
00:13:11,970 --> 00:13:16,670
know a<font color="#E5E5E5"> byte there and like in the</font>

289
00:13:14,280 --> 00:13:19,850
<font color="#E5E5E5">beginning of the switch and say okay</font>

290
00:13:16,670 --> 00:13:24,439
give me a<font color="#CCCCCC"> random integer from</font><font color="#E5E5E5"> zero zero</font>

291
00:13:19,850 --> 00:13:28,640
<font color="#CCCCCC">two inclusive</font><font color="#E5E5E5"> and you know this is going</font>

292
00:13:24,440 --> 00:13:30,320
to give<font color="#CCCCCC"> us which API to call</font><font color="#E5E5E5"> and you</font>

293
00:13:28,640 --> 00:13:31,850
know<font color="#E5E5E5"> then</font><font color="#CCCCCC"> we just consume a little bit</font>

294
00:13:30,320 --> 00:13:32,990
more to get the arguments and<font color="#E5E5E5"> you know</font>

295
00:13:31,850 --> 00:13:35,720
this<font color="#E5E5E5"> is just kind of a really simple</font>

296
00:13:32,990 --> 00:13:38,390
<font color="#CCCCCC">thing but incredibly</font><font color="#E5E5E5"> no one</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> doing</font>

297
00:13:35,720 --> 00:13:39,950
<font color="#E5E5E5">this and you know it's just kind of</font>

298
00:13:38,390 --> 00:13:45,199
milking this<font color="#CCCCCC"> for like a year or two on</font>

299
00:13:39,950 --> 00:13:46,460
<font color="#E5E5E5">the chrome sandbox and so if you look</font><font color="#CCCCCC"> at</font>

300
00:13:45,200 --> 00:13:47,870
this you<font color="#E5E5E5"> know this</font><font color="#CCCCCC"> is like actually a</font>

301
00:13:46,460 --> 00:13:51,589
very<font color="#CCCCCC"> familiar pattern this</font><font color="#E5E5E5"> is what</font>

302
00:13:47,870 --> 00:13:53,230
everyone does for generative fuzzing<font color="#E5E5E5"> as</font>

303
00:13:51,589 --> 00:13:55,720
I said the insight<font color="#CCCCCC"> here is</font><font color="#E5E5E5"> you're just</font>

304
00:13:53,230 --> 00:13:58,339
finding a way<font color="#CCCCCC"> to</font><font color="#E5E5E5"> make that deterministic</font>

305
00:13:55,720 --> 00:14:04,130
<font color="#CCCCCC">by using this kind</font><font color="#E5E5E5"> of helper object and</font>

306
00:13:58,339 --> 00:14:05,920
so yep<font color="#CCCCCC"> so what's the key thing here</font>

307
00:14:04,130 --> 00:14:10,760
<font color="#E5E5E5">that's making</font><font color="#CCCCCC"> this interesting is</font>

308
00:14:05,920 --> 00:14:12,760
because<font color="#E5E5E5"> things are deterministic</font><font color="#CCCCCC"> and you</font>

309
00:14:10,760 --> 00:14:19,310
know we're calling any API and you order

310
00:14:12,760 --> 00:14:21,410
if there's any<font color="#E5E5E5"> if there's anything weird</font>

311
00:14:19,310 --> 00:14:22,640
that happens<font color="#E5E5E5"> after a chain of calls the</font>

312
00:14:21,410 --> 00:14:26,000
coverage<font color="#E5E5E5"> guided fuzzing will tend to</font>

313
00:14:22,640 --> 00:14:32,150
uncover<font color="#E5E5E5"> that and funnily enough this</font>

314
00:14:26,000 --> 00:14:34,370
exact<font color="#E5E5E5"> API was what I you know I found a</font>

315
00:14:32,150 --> 00:14:37,100
couple bugs in Chrome's<font color="#CCCCCC"> network</font>

316
00:14:34,370 --> 00:14:39,650
component in the HTTP caching layer and

317
00:14:37,100 --> 00:14:41,930
it turned out<font color="#CCCCCC"> that these</font><font color="#E5E5E5"> were</font><font color="#CCCCCC"> two</font>

318
00:14:39,650 --> 00:14:44,600
<font color="#E5E5E5">critical bugs that were like user after</font>

319
00:14:41,930 --> 00:14:46,520
<font color="#E5E5E5">freeze where you didn't need JavaScript</font>

320
00:14:44,600 --> 00:14:52,760
code execution it was just outside<font color="#CCCCCC"> the</font>

321
00:14:46,520 --> 00:14:54,920
sandbox<font color="#E5E5E5"> from JavaScript</font><font color="#CCCCCC"> so that was</font><font color="#E5E5E5"> just</font>

322
00:14:52,760 --> 00:14:57,710
<font color="#E5E5E5">because</font><font color="#CCCCCC"> I saw</font><font color="#E5E5E5"> okay here's this API like</font>

323
00:14:54,920 --> 00:14:59,390
deep in the sandbox somewhere it turns

324
00:14:57,710 --> 00:15:01,760
out I<font color="#E5E5E5"> actually can hit it all the way</font><font color="#CCCCCC"> up</font>

325
00:14:59,390 --> 00:15:06,589
<font color="#CCCCCC">from</font><font color="#E5E5E5"> the render from JavaScript</font><font color="#CCCCCC"> without</font>

326
00:15:01,760 --> 00:15:07,819
having<font color="#CCCCCC"> RC</font><font color="#E5E5E5"> either and it just turned out</font>

327
00:15:06,589 --> 00:15:09,530
<font color="#E5E5E5">that this when I looked at</font>

328
00:15:07,820 --> 00:15:10,850
implementation<font color="#CCCCCC"> was really complex</font><font color="#E5E5E5"> they</font>

329
00:15:09,530 --> 00:15:13,670
had some<font color="#E5E5E5"> kind of cache eviction thing</font>

330
00:15:10,850 --> 00:15:16,670
going on<font color="#E5E5E5"> so when the database got too</font>

331
00:15:13,670 --> 00:15:19,420
big I<font color="#E5E5E5"> think I might have yeah</font><font color="#CCCCCC"> so I kind</font>

332
00:15:16,670 --> 00:15:21,680
of<font color="#E5E5E5"> like allude to</font><font color="#CCCCCC"> that here but I</font>

333
00:15:19,420 --> 00:15:25,699
<font color="#E5E5E5">started this database with a random size</font>

334
00:15:21,680 --> 00:15:27,079
and it turned out<font color="#CCCCCC"> that by default the</font>

335
00:15:25,700 --> 00:15:29,620
database was like<font color="#CCCCCC"> 2 gigabytes in size</font>

336
00:15:27,080 --> 00:15:31,510
but<font color="#CCCCCC"> I made a 512 byte database and then</font>

337
00:15:29,620 --> 00:15:33,880
<font color="#CCCCCC">I was just testing</font><font color="#E5E5E5"> this cash eviction</font>

338
00:15:31,510 --> 00:15:36,730
stuff<font color="#E5E5E5"> very thoroughly and found these</font>

339
00:15:33,880 --> 00:15:38,500
<font color="#E5E5E5">bugs so the kind of the point I want to</font>

340
00:15:36,730 --> 00:15:42,160
<font color="#E5E5E5">get across</font><font color="#CCCCCC"> is like how</font><font color="#E5E5E5"> simple this stuff</font>

341
00:15:38,500 --> 00:15:44,620
is how<font color="#E5E5E5"> under-applied it is and how</font>

342
00:15:42,160 --> 00:15:48,490
important some of<font color="#CCCCCC"> the</font><font color="#E5E5E5"> bugs are that we</font>

343
00:15:44,620 --> 00:15:51,310
can find a fit<font color="#E5E5E5"> so yep that's</font><font color="#CCCCCC"> it you know</font>

344
00:15:48,490 --> 00:15:53,010
we picked API call stuff and then wait

345
00:15:51,310 --> 00:15:57,310
for<font color="#E5E5E5"> the bugs</font>

346
00:15:53,010 --> 00:15:58,660
well not really<font color="#CCCCCC"> right so you know this</font>

347
00:15:57,310 --> 00:16:00,540
looks good<font color="#E5E5E5"> on paper but in reality</font>

348
00:15:58,660 --> 00:16:04,060
things almost<font color="#E5E5E5"> always fall apart</font>

349
00:16:00,540 --> 00:16:05,680
instantly and so<font color="#E5E5E5"> you know generally like</font>

350
00:16:04,060 --> 00:16:09,250
you forget to<font color="#CCCCCC"> call some API you've got</font>

351
00:16:05,680 --> 00:16:11,500
some<font color="#CCCCCC"> setup wrong</font><font color="#E5E5E5"> something's hard to</font>

352
00:16:09,250 --> 00:16:12,940
reach<font color="#E5E5E5"> because the</font><font color="#CCCCCC"> fuzzer just bit</font>

353
00:16:11,500 --> 00:16:15,430
flipping is not smart enough<font color="#E5E5E5"> to get you</font>

354
00:16:12,940 --> 00:16:16,690
there<font color="#CCCCCC"> you</font><font color="#E5E5E5"> were not a memory and the</font>

355
00:16:15,430 --> 00:16:20,319
<font color="#E5E5E5">buzzer dies you know like things go</font>

356
00:16:16,690 --> 00:16:22,000
wrong<font color="#E5E5E5"> all the time so the idea</font><font color="#CCCCCC"> is we</font>

357
00:16:20,320 --> 00:16:25,089
need<font color="#CCCCCC"> this process that</font><font color="#E5E5E5"> not only you</font><font color="#CCCCCC"> know</font>

358
00:16:22,000 --> 00:16:28,390
starts from<font color="#E5E5E5"> this idea but actually lets</font>

359
00:16:25,089 --> 00:16:32,620
us kind of get<font color="#E5E5E5"> to very thorough coverage</font>

360
00:16:28,390 --> 00:16:36,339
and so this is<font color="#E5E5E5"> this kind of next part</font>

361
00:16:32,620 --> 00:16:38,410
how do we deal with<font color="#E5E5E5"> failure so I keep</font>

362
00:16:36,339 --> 00:16:42,670
thinking about this<font color="#CCCCCC"> it might be</font><font color="#E5E5E5"> kind of</font>

363
00:16:38,410 --> 00:16:44,020
crazy<font color="#E5E5E5"> doing this too much but after</font>

364
00:16:42,670 --> 00:16:46,890
looking<font color="#E5E5E5"> at these no coverage reports of</font>

365
00:16:44,020 --> 00:16:49,300
fuzzing a lot<font color="#E5E5E5"> I got this sense that like</font>

366
00:16:46,890 --> 00:16:50,500
you start at the top<font color="#CCCCCC"> of this API and</font>

367
00:16:49,300 --> 00:16:51,880
it's like you're<font color="#E5E5E5"> pouring water over and</font>

368
00:16:50,500 --> 00:16:55,029
you<font color="#E5E5E5"> just see like where the water you</font>

369
00:16:51,880 --> 00:16:56,680
know<font color="#E5E5E5"> flows to like coverage</font><font color="#CCCCCC"> gutted</font>

370
00:16:55,029 --> 00:17:00,279
<font color="#E5E5E5">fuzzing will explore very quickly like</font>

371
00:16:56,680 --> 00:17:01,689
<font color="#E5E5E5">as far</font><font color="#CCCCCC"> as a can naturally</font><font color="#E5E5E5"> go and then it</font>

372
00:17:00,279 --> 00:17:03,520
<font color="#E5E5E5">will just get to a point where it's</font><font color="#CCCCCC"> like</font>

373
00:17:01,690 --> 00:17:05,170
you<font color="#E5E5E5"> know one in a billion</font><font color="#CCCCCC"> chance of</font>

374
00:17:03,520 --> 00:17:06,369
<font color="#E5E5E5">making progress and so the idea is</font>

375
00:17:05,170 --> 00:17:09,160
you're<font color="#E5E5E5"> like okay let's just look</font><font color="#CCCCCC"> at</font>

376
00:17:06,369 --> 00:17:11,169
where it's<font color="#E5E5E5"> getting stuck</font><font color="#CCCCCC"> at some point</font>

377
00:17:09,160 --> 00:17:16,990
where it's hard to<font color="#E5E5E5"> make progress</font><font color="#CCCCCC"> and how</font>

378
00:17:11,170 --> 00:17:18,429
do we undo it by hand<font color="#E5E5E5"> and so you know I</font>

379
00:17:16,990 --> 00:17:23,910
<font color="#E5E5E5">kind of got ahead of myself</font><font color="#CCCCCC"> here but you</font>

380
00:17:18,429 --> 00:17:26,679
know basically<font color="#CCCCCC"> just setting up fuzzing</font>

381
00:17:23,910 --> 00:17:28,300
<font color="#E5E5E5">in this kind of like I basically used to</font>

382
00:17:26,679 --> 00:17:30,990
think okay well I'll make some huge

383
00:17:28,300 --> 00:17:33,149
<font color="#E5E5E5">fuzzy idea like write it</font><font color="#CCCCCC"> all on paper</font>

384
00:17:30,990 --> 00:17:34,980
have this huge design and<font color="#E5E5E5"> it'll work</font><font color="#CCCCCC"> and</font>

385
00:17:33,149 --> 00:17:39,029
<font color="#E5E5E5">it never did and</font><font color="#CCCCCC"> it quickly learned that</font>

386
00:17:34,980 --> 00:17:44,399
<font color="#E5E5E5">doing very small rapid experiments was</font>

387
00:17:39,029 --> 00:17:46,529
<font color="#E5E5E5">the right way and so yeah and like you</font>

388
00:17:44,399 --> 00:17:48,809
know<font color="#E5E5E5"> just a tidbit</font><font color="#CCCCCC"> so I think the the</font>

389
00:17:46,529 --> 00:17:51,570
<font color="#E5E5E5">the metric</font><font color="#CCCCCC"> that I focused</font><font color="#E5E5E5"> on most was</font>

390
00:17:48,809 --> 00:17:55,110
<font color="#E5E5E5">just how many lines of coverage</font><font color="#CCCCCC"> was I</font>

391
00:17:51,570 --> 00:17:57,840
getting<font color="#E5E5E5"> and I've been pretty surprised</font>

392
00:17:55,110 --> 00:17:59,959
to find but like you know<font color="#E5E5E5"> out of all the</font>

393
00:17:57,840 --> 00:18:02,428
chrome sandbox escapes I found which

394
00:17:59,960 --> 00:18:06,330
<font color="#CCCCCC">it's on the</font><font color="#E5E5E5"> order</font><font color="#CCCCCC"> about ten or so these</font>

395
00:18:02,429 --> 00:18:07,649
<font color="#E5E5E5">are were all found with only about a</font>

396
00:18:06,330 --> 00:18:09,178
<font color="#E5E5E5">quarter of the code that</font><font color="#CCCCCC"> I was</font><font color="#E5E5E5"> even</font>

397
00:18:07,649 --> 00:18:11,189
trying<font color="#E5E5E5"> to cover covered so</font><font color="#CCCCCC"> you know</font>

398
00:18:09,179 --> 00:18:14,639
there's<font color="#E5E5E5"> probably still bugs there I just</font>

399
00:18:11,190 --> 00:18:16,440
got bored and moved on<font color="#CCCCCC"> but</font><font color="#E5E5E5"> yeah so</font>

400
00:18:14,639 --> 00:18:17,459
there's gonna be<font color="#E5E5E5"> more for you</font><font color="#CCCCCC"> guys and</font>

401
00:18:16,440 --> 00:18:21,450
<font color="#E5E5E5">you</font><font color="#CCCCCC"> know</font><font color="#E5E5E5"> this kind of what I'm</font><font color="#CCCCCC"> trying to</font>

402
00:18:17,460 --> 00:18:22,860
encourage<font color="#E5E5E5"> you to do so</font><font color="#CCCCCC"> here's the meta</font>

403
00:18:21,450 --> 00:18:28,259
<font color="#CCCCCC">you want to use this thing</font><font color="#E5E5E5"> called claim</font>

404
00:18:22,860 --> 00:18:29,399
<font color="#CCCCCC">coverage basically</font><font color="#E5E5E5"> I've been using this</font>

405
00:18:28,259 --> 00:18:31,409
like the last month<font color="#E5E5E5"> or so and it's</font>

406
00:18:29,399 --> 00:18:33,959
<font color="#E5E5E5">really great and been helping me a</font><font color="#CCCCCC"> lot</font>

407
00:18:31,409 --> 00:18:38,330
on some weird projects like<font color="#CCCCCC"> xnu</font>

408
00:18:33,960 --> 00:18:42,299
<font color="#E5E5E5">which I'll get to but the idea here is</font>

409
00:18:38,330 --> 00:18:46,649
<font color="#E5E5E5">you get these</font><font color="#CCCCCC"> yep</font><font color="#E5E5E5"> you get these reports</font>

410
00:18:42,299 --> 00:18:48,539
<font color="#E5E5E5">where you have hit counts per line for</font>

411
00:18:46,649 --> 00:18:51,658
your current<font color="#E5E5E5"> corpus and then you try to</font>

412
00:18:48,539 --> 00:18:55,549
cover as much as you<font color="#E5E5E5"> can obviously but</font>

413
00:18:51,659 --> 00:18:59,730
as uniformly as possible so here is

414
00:18:55,549 --> 00:19:02,279
something I took<font color="#E5E5E5"> straight from Chrome's</font>

415
00:18:59,730 --> 00:19:05,190
like unit test coverage<font color="#CCCCCC"> thing so they're</font>

416
00:19:02,279 --> 00:19:08,039
using claim<font color="#E5E5E5"> coverage reports and you can</font>

417
00:19:05,190 --> 00:19:11,039
<font color="#CCCCCC">see that in</font><font color="#E5E5E5"> the unit</font><font color="#CCCCCC"> test they're</font>

418
00:19:08,039 --> 00:19:12,658
hitting you know<font color="#E5E5E5"> some function you know</font>

419
00:19:11,039 --> 00:19:13,889
<font color="#E5E5E5">eight thousand times but then they</font>

420
00:19:12,659 --> 00:19:16,590
<font color="#E5E5E5">actually only have</font><font color="#CCCCCC"> one test case</font>

421
00:19:13,889 --> 00:19:19,678
covering one iteration of this loop<font color="#CCCCCC"> and</font>

422
00:19:16,590 --> 00:19:21,119
so when you see this<font color="#E5E5E5"> just from</font><font color="#CCCCCC"> a unit</font>

423
00:19:19,679 --> 00:19:23,369
test perspective<font color="#CCCCCC"> this already looks</font>

424
00:19:21,119 --> 00:19:27,269
suspicious<font color="#CCCCCC"> I don't</font><font color="#E5E5E5"> think that there's a</font>

425
00:19:23,369 --> 00:19:28,470
book<font color="#CCCCCC"> here or anything but essentially</font>

426
00:19:27,269 --> 00:19:33,059
you'll realize that<font color="#E5E5E5"> you know just</font>

427
00:19:28,470 --> 00:19:35,970
coverage is I mean coverage is enough

428
00:19:33,059 --> 00:19:38,610
but looking a little bit<font color="#CCCCCC"> deeper at line</font>

429
00:19:35,970 --> 00:19:40,710
counts and trying to think<font color="#CCCCCC"> about</font><font color="#E5E5E5"> how to</font>

430
00:19:38,610 --> 00:19:42,809
structure your fuzzer so that you're

431
00:19:40,710 --> 00:19:43,460
<font color="#E5E5E5">hitting things uniformly kind of at</font>

432
00:19:42,809 --> 00:19:47,089
random

433
00:19:43,460 --> 00:19:52,070
like that's where you know you'll get

434
00:19:47,089 --> 00:19:56,089
bugs quickly so<font color="#E5E5E5"> okay so now you know</font>

435
00:19:52,070 --> 00:19:57,619
<font color="#E5E5E5">it's pretty simple still you know we use</font>

436
00:19:56,089 --> 00:19:58,969
this<font color="#E5E5E5"> thing called</font><font color="#CCCCCC"> claim coverage we just</font>

437
00:19:57,619 --> 00:20:02,449
build with some flags and it's in the

438
00:19:58,969 --> 00:20:05,089
<font color="#CCCCCC">docs</font><font color="#E5E5E5"> we have some</font><font color="#CCCCCC"> HTML report and now</font>

439
00:20:02,450 --> 00:20:07,070
how do<font color="#E5E5E5"> we move forward</font><font color="#CCCCCC"> so there's</font>

440
00:20:05,089 --> 00:20:09,168
basically<font color="#E5E5E5"> three ways to</font><font color="#CCCCCC"> deal</font><font color="#E5E5E5"> with</font>

441
00:20:07,070 --> 00:20:13,399
coverage gaps<font color="#E5E5E5"> and they all have</font>

442
00:20:09,169 --> 00:20:17,269
trade-offs<font color="#CCCCCC"> Argus</font><font color="#E5E5E5"> there's four but</font>

443
00:20:13,399 --> 00:20:20,209
basically you can either<font color="#E5E5E5"> for example</font>

444
00:20:17,269 --> 00:20:24,710
here<font color="#E5E5E5"> this is not a perfect example but</font>

445
00:20:20,210 --> 00:20:26,899
you<font color="#CCCCCC"> could like</font><font color="#E5E5E5"> let's say this was a you</font>

446
00:20:24,710 --> 00:20:31,009
know<font color="#CCCCCC"> md5 track or something or you know</font>

447
00:20:26,899 --> 00:20:33,529
you have some<font color="#E5E5E5"> other unlikely condition</font>

448
00:20:31,009 --> 00:20:36,080
happening you can add a patch right<font color="#CCCCCC"> here</font>

449
00:20:33,529 --> 00:20:38,599
<font color="#E5E5E5">into code under test itself to kind of</font>

450
00:20:36,080 --> 00:20:41,619
get further<font color="#E5E5E5"> and so the problem here is</font>

451
00:20:38,599 --> 00:20:44,269
<font color="#CCCCCC">you know</font><font color="#E5E5E5"> you might introduce a bug</font><font color="#CCCCCC"> or</font>

452
00:20:41,619 --> 00:20:48,019
hide one that's there but in practice

453
00:20:44,269 --> 00:20:50,149
this<font color="#E5E5E5"> is just like a very useful tool to</font>

454
00:20:48,019 --> 00:20:53,869
<font color="#E5E5E5">make</font><font color="#CCCCCC"> progress quickly and I actually did</font>

455
00:20:50,149 --> 00:20:57,379
use<font color="#CCCCCC"> it for sandbox escape which I'll</font>

456
00:20:53,869 --> 00:20:59,779
show later<font color="#CCCCCC"> the second thing we can do is</font>

457
00:20:57,379 --> 00:21:04,488
<font color="#E5E5E5">try to edit that top level function</font>

458
00:20:59,779 --> 00:21:05,839
that's interacting<font color="#CCCCCC"> with the API and this</font>

459
00:21:04,489 --> 00:21:08,809
<font color="#E5E5E5">is the best way</font><font color="#CCCCCC"> because it's completely</font>

460
00:21:05,839 --> 00:21:11,359
<font color="#E5E5E5">sound so any modification you make there</font>

461
00:21:08,809 --> 00:21:13,668
as long<font color="#E5E5E5"> as you're not</font><font color="#CCCCCC"> doing something</font>

462
00:21:11,359 --> 00:21:17,779
<font color="#E5E5E5">weird with API that is somehow</font>

463
00:21:13,669 --> 00:21:20,389
impossible you know<font color="#E5E5E5"> your test cases will</font>

464
00:21:17,779 --> 00:21:21,710
be you know<font color="#E5E5E5"> accurately reflect what you</font>

465
00:21:20,389 --> 00:21:23,779
can do and<font color="#CCCCCC"> you know you won't</font><font color="#E5E5E5"> have fake</font>

466
00:21:21,710 --> 00:21:25,009
bugs introduced but the problem with

467
00:21:23,779 --> 00:21:27,619
this is it's actually<font color="#E5E5E5"> very</font>

468
00:21:25,009 --> 00:21:30,710
labor-intensive sometimes to actually

469
00:21:27,619 --> 00:21:32,809
<font color="#CCCCCC">make</font><font color="#E5E5E5"> these changes</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> then the third</font>

470
00:21:30,710 --> 00:21:34,700
way<font color="#CCCCCC"> is to</font><font color="#E5E5E5"> add a test case directly to</font>

471
00:21:32,809 --> 00:21:37,629
<font color="#E5E5E5">reach something which I personally never</font>

472
00:21:34,700 --> 00:21:39,619
do<font color="#E5E5E5"> because that's just so much work</font><font color="#CCCCCC"> but</font>

473
00:21:37,629 --> 00:21:41,330
you know if you're looking<font color="#E5E5E5"> at like</font><font color="#CCCCCC"> a PNG</font>

474
00:21:39,619 --> 00:21:46,218
parser or something that's that's

475
00:21:41,330 --> 00:21:47,718
relevant<font color="#E5E5E5"> but for a custom API fuzzer</font>

476
00:21:46,219 --> 00:21:51,190
<font color="#E5E5E5">we're kind of constantly iterating it's</font>

477
00:21:47,719 --> 00:21:51,190
not worth the<font color="#CCCCCC"> time investment</font>

478
00:21:51,320 --> 00:21:57,439
and then I guess<font color="#E5E5E5"> the</font><font color="#CCCCCC"> last way</font><font color="#E5E5E5"> is say</font>

479
00:21:55,130 --> 00:21:59,060
<font color="#E5E5E5">you're covering things fine but there's</font>

480
00:21:57,440 --> 00:22:01,310
<font color="#E5E5E5">just too much to</font><font color="#CCCCCC"> cover one thing you can</font>

481
00:21:59,060 --> 00:22:06,379
do is knock<font color="#CCCCCC"> things out and this sounds</font>

482
00:22:01,310 --> 00:22:07,669
kind of weird but you know<font color="#E5E5E5"> coverage</font>

483
00:22:06,380 --> 00:22:10,270
guide advising doesn't know what<font color="#CCCCCC"> to look</font>

484
00:22:07,670 --> 00:22:12,410
<font color="#CCCCCC">for it</font><font color="#E5E5E5"> just goes for everything</font><font color="#CCCCCC"> so</font>

485
00:22:10,270 --> 00:22:13,760
there's a kind<font color="#CCCCCC"> of an auditing thing but</font>

486
00:22:12,410 --> 00:22:15,950
if<font color="#E5E5E5"> you think</font><font color="#CCCCCC"> like okay that</font><font color="#E5E5E5"> was probably</font>

487
00:22:13,760 --> 00:22:17,720
a bug over<font color="#E5E5E5"> here oh there's like three</font>

488
00:22:15,950 --> 00:22:19,310
distinct interesting things happening if

489
00:22:17,720 --> 00:22:21,950
<font color="#E5E5E5">you can help make sure that</font><font color="#CCCCCC"> you're</font>

490
00:22:19,310 --> 00:22:24,070
fuzzing these things independently<font color="#E5E5E5"> this</font>

491
00:22:21,950 --> 00:22:30,290
<font color="#E5E5E5">is another way that yeah you can improve</font>

492
00:22:24,070 --> 00:22:33,500
the performance<font color="#E5E5E5"> so I guess I kind of</font>

493
00:22:30,290 --> 00:22:37,490
already<font color="#E5E5E5"> covered this but basically the</font>

494
00:22:33,500 --> 00:22:39,680
two<font color="#E5E5E5"> main ways that I do this are by</font>

495
00:22:37,490 --> 00:22:41,960
hacking the code under<font color="#E5E5E5"> test or by</font>

496
00:22:39,680 --> 00:22:43,910
<font color="#E5E5E5">changing the harness and so usually I</font>

497
00:22:41,960 --> 00:22:47,390
will edit<font color="#E5E5E5"> the code under test first just</font>

498
00:22:43,910 --> 00:22:52,040
to<font color="#E5E5E5"> make progress</font><font color="#CCCCCC"> quickly and then later</font>

499
00:22:47,390 --> 00:22:53,360
revert it or if there's a bug try to get

500
00:22:52,040 --> 00:22:58,850
rid<font color="#CCCCCC"> of the hack but</font><font color="#E5E5E5"> then keep the bug</font>

501
00:22:53,360 --> 00:23:00,469
<font color="#E5E5E5">intact and so yep</font><font color="#CCCCCC"> that's pretty much it</font>

502
00:22:58,850 --> 00:23:05,209
and so there's<font color="#E5E5E5"> one kind of other trick</font>

503
00:23:00,470 --> 00:23:08,480
<font color="#E5E5E5">which is if you're finding</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> your</font>

504
00:23:05,210 --> 00:23:10,730
fuzzer is slow or<font color="#E5E5E5"> you're hitting some</font>

505
00:23:08,480 --> 00:23:12,950
<font color="#CCCCCC">bosses</font><font color="#E5E5E5"> whatever you know it makes</font><font color="#CCCCCC"> sense</font>

506
00:23:10,730 --> 00:23:16,160
to<font color="#CCCCCC"> just kind of patch around things that</font>

507
00:23:12,950 --> 00:23:18,590
<font color="#CCCCCC">are</font><font color="#E5E5E5"> boring so like say say you you find</font>

508
00:23:16,160 --> 00:23:21,890
some<font color="#CCCCCC"> malloc</font><font color="#E5E5E5"> that will now look</font><font color="#CCCCCC"> like I've</font>

509
00:23:18,590 --> 00:23:24,169
controlled you<font color="#E5E5E5"> enter something so you</font>

510
00:23:21,890 --> 00:23:25,280
keep allocating like<font color="#E5E5E5"> four gigabytes you</font>

511
00:23:24,170 --> 00:23:27,980
know you don't really want<font color="#E5E5E5"> to do this</font>

512
00:23:25,280 --> 00:23:29,690
<font color="#CCCCCC">you want to just like oftentimes I'll</font>

513
00:23:27,980 --> 00:23:33,770
add actually<font color="#E5E5E5"> more constraints in the</font>

514
00:23:29,690 --> 00:23:35,180
code<font color="#CCCCCC"> under test so that if I might try</font>

515
00:23:33,770 --> 00:23:38,210
<font color="#CCCCCC">to parse something</font><font color="#E5E5E5"> that's too big I just</font>

516
00:23:35,180 --> 00:23:40,540
bail out early and this<font color="#E5E5E5"> kind of keeps</font>

517
00:23:38,210 --> 00:23:43,700
things moving really quickly and you

518
00:23:40,540 --> 00:23:45,139
<font color="#CCCCCC">know just I didn't know these things all</font>

519
00:23:43,700 --> 00:23:47,390
sound like trivial tricks but it's<font color="#E5E5E5"> just</font>

520
00:23:45,140 --> 00:23:51,110
<font color="#E5E5E5">like they've helped me so much that I</font>

521
00:23:47,390 --> 00:23:55,520
<font color="#E5E5E5">feel like it's worth</font><font color="#CCCCCC"> mentioning so</font>

522
00:23:51,110 --> 00:23:57,500
what's the extension from this<font color="#E5E5E5"> stream</font>

523
00:23:55,520 --> 00:23:59,870
<font color="#E5E5E5">based buzzer so say we</font><font color="#CCCCCC"> have this kind of</font>

524
00:23:57,500 --> 00:24:03,140
stream based buzzer that<font color="#E5E5E5"> is working</font>

525
00:23:59,870 --> 00:24:04,760
really well and we want to go to kind<font color="#E5E5E5"> of</font>

526
00:24:03,140 --> 00:24:06,440
<font color="#E5E5E5">the next</font><font color="#CCCCCC"> level</font><font color="#E5E5E5"> well</font>

527
00:24:04,760 --> 00:24:08,330
there's a<font color="#E5E5E5"> thing called protobuf based</font>

528
00:24:06,440 --> 00:24:10,340
<font color="#CCCCCC">api fuzzing</font><font color="#E5E5E5"> so</font><font color="#CCCCCC"> I've talked about</font><font color="#E5E5E5"> this</font>

529
00:24:08,330 --> 00:24:13,399
before<font color="#E5E5E5"> but yeah I'll go over</font><font color="#CCCCCC"> that again</font>

530
00:24:10,340 --> 00:24:17,030
<font color="#CCCCCC">just</font><font color="#E5E5E5"> recycle this talk</font><font color="#CCCCCC"> and you know</font>

531
00:24:13,400 --> 00:24:21,890
<font color="#E5E5E5">again</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> looks all messed</font><font color="#CCCCCC"> out</font><font color="#E5E5E5"> but the</font>

532
00:24:17,030 --> 00:24:23,928
<font color="#E5E5E5">idea is rather than making</font><font color="#CCCCCC"> this byte</font>

533
00:24:21,890 --> 00:24:28,160
based parser which the fuzzing engine

534
00:24:23,929 --> 00:24:29,540
doesn't<font color="#E5E5E5"> know how to deal with you know</font>

535
00:24:28,160 --> 00:24:33,500
<font color="#E5E5E5">so we're</font><font color="#CCCCCC"> doing this kind</font><font color="#E5E5E5"> of stream based</font>

536
00:24:29,540 --> 00:24:34,850
thing<font color="#CCCCCC"> you're</font><font color="#E5E5E5"> not making like the the</font>

537
00:24:33,500 --> 00:24:36,350
fuzzer still has to go through<font color="#CCCCCC"> your</font>

538
00:24:34,850 --> 00:24:38,510
little parser so even if<font color="#E5E5E5"> it's simple</font>

539
00:24:36,350 --> 00:24:41,389
<font color="#CCCCCC">it's still</font><font color="#E5E5E5"> doing that extra work and it</font>

540
00:24:38,510 --> 00:24:43,879
<font color="#E5E5E5">doesn't know really what</font><font color="#CCCCCC"> to mutate and</font>

541
00:24:41,390 --> 00:24:45,919
<font color="#E5E5E5">so you lose some performance and this</font>

542
00:24:43,880 --> 00:24:50,410
idea of protobuf<font color="#CCCCCC"> mutaters is if we</font>

543
00:24:45,919 --> 00:24:52,520
actually write<font color="#CCCCCC"> down a simple</font><font color="#E5E5E5"> grammar for</font>

544
00:24:50,410 --> 00:24:54,710
you know that we kind of implicitly

545
00:24:52,520 --> 00:24:58,010
defined<font color="#E5E5E5"> when we wrote that initial</font>

546
00:24:54,710 --> 00:25:00,799
stream based buzzer and then we hook

547
00:24:58,010 --> 00:25:02,270
this into<font color="#CCCCCC"> the fuzzing engine then it can</font>

548
00:25:00,799 --> 00:25:04,220
understand<font color="#CCCCCC"> oh this is the grammar for</font>

549
00:25:02,270 --> 00:25:05,929
<font color="#CCCCCC">this</font><font color="#E5E5E5"> thing that we're fuzzing and so</font>

550
00:25:04,220 --> 00:25:09,290
<font color="#E5E5E5">we'll make mutations on the tree based</font>

551
00:25:05,929 --> 00:25:11,090
<font color="#E5E5E5">level and so because we're not fuzzing</font>

552
00:25:09,290 --> 00:25:13,389
<font color="#CCCCCC">file parsers we're fuzzing an</font><font color="#E5E5E5"> API</font>

553
00:25:11,090 --> 00:25:16,639
there's no sense in finding bugs in<font color="#CCCCCC"> that</font>

554
00:25:13,390 --> 00:25:21,830
partial that we wrote so this is a huge

555
00:25:16,640 --> 00:25:24,320
benefit<font color="#E5E5E5"> and so yeah basically the</font>

556
00:25:21,830 --> 00:25:27,139
<font color="#CCCCCC">advantage here is</font><font color="#E5E5E5"> you get much more</font>

557
00:25:24,320 --> 00:25:33,200
<font color="#CCCCCC">performance</font><font color="#E5E5E5"> in terms of mutations if you</font>

558
00:25:27,140 --> 00:25:35,660
extend your your harness to cover more

559
00:25:33,200 --> 00:25:37,220
api's for example your existing corpus

560
00:25:35,660 --> 00:25:39,770
will be backwards<font color="#CCCCCC"> compatible so</font><font color="#E5E5E5"> you'll</font>

561
00:25:37,220 --> 00:25:40,760
just<font color="#E5E5E5"> start introducing new new api's but</font>

562
00:25:39,770 --> 00:25:46,750
the old ones will still be called

563
00:25:40,760 --> 00:25:49,280
correctly and you know it's<font color="#E5E5E5"> just kind of</font>

564
00:25:46,750 --> 00:25:51,020
better performance<font color="#E5E5E5"> but the trade-off is</font>

565
00:25:49,280 --> 00:25:52,280
protobuf is kind<font color="#CCCCCC"> of annoying</font><font color="#E5E5E5"> to deal</font>

566
00:25:51,020 --> 00:25:54,110
with for one-off

567
00:25:52,280 --> 00:25:58,040
fuzzing projects it's kind of not worth

568
00:25:54,110 --> 00:26:00,830
the effort<font color="#CCCCCC"> and it's very easy to kind of</font>

569
00:25:58,040 --> 00:26:03,678
pepper these byte stream things all over

570
00:26:00,830 --> 00:26:05,689
<font color="#E5E5E5">the</font><font color="#CCCCCC"> place rather than</font><font color="#E5E5E5"> just writing a</font>

571
00:26:03,679 --> 00:26:09,500
spec<font color="#E5E5E5"> and like you know plumbing that all</font>

572
00:26:05,690 --> 00:26:10,760
the way<font color="#E5E5E5"> through somewhere and so and</font>

573
00:26:09,500 --> 00:26:12,260
yeah<font color="#E5E5E5"> not to mention part of buff it's</font>

574
00:26:10,760 --> 00:26:15,320
like<font color="#CCCCCC"> generating some code</font><font color="#E5E5E5"> Lincoln and</font>

575
00:26:12,260 --> 00:26:16,250
stuff<font color="#E5E5E5"> and it's just kind of a hassle</font><font color="#CCCCCC"> but</font>

576
00:26:15,320 --> 00:26:17,730
<font color="#E5E5E5">when they're at the point where you're</font>

577
00:26:16,250 --> 00:26:19,920
kind of finding bugs and<font color="#E5E5E5"> you're</font>

578
00:26:17,730 --> 00:26:24,870
like ready to<font color="#E5E5E5"> do better it makes</font><font color="#CCCCCC"> sense</font>

579
00:26:19,920 --> 00:26:26,880
to introduce it so now we have kind<font color="#CCCCCC"> of</font>

580
00:26:24,870 --> 00:26:30,239
<font color="#E5E5E5">the two parts to implement protobuf</font>

581
00:26:26,880 --> 00:26:35,040
<font color="#CCCCCC">specification</font><font color="#E5E5E5"> and the</font><font color="#CCCCCC"> C++ glue that's</font>

582
00:26:30,240 --> 00:26:37,080
<font color="#E5E5E5">linking your</font><font color="#CCCCCC"> you know how do</font><font color="#E5E5E5"> we give in</font>

583
00:26:35,040 --> 00:26:38,580
one instance of<font color="#E5E5E5"> this kind of grammar</font>

584
00:26:37,080 --> 00:26:44,060
that was<font color="#E5E5E5"> generated how do we call the</font>

585
00:26:38,580 --> 00:26:46,050
api's so here's an example<font color="#E5E5E5"> for this</font>

586
00:26:44,060 --> 00:26:49,679
database thing we were<font color="#E5E5E5"> just looking at</font>

587
00:26:46,050 --> 00:26:52,710
and<font color="#E5E5E5"> I've added another evict command</font>

588
00:26:49,680 --> 00:26:55,530
<font color="#E5E5E5">just for fun but the idea here is we</font>

589
00:26:52,710 --> 00:26:59,130
have<font color="#E5E5E5"> this</font><font color="#CCCCCC"> high-level top</font><font color="#E5E5E5"> a</font><font color="#CCCCCC"> node in our</font>

590
00:26:55,530 --> 00:27:01,790
<font color="#E5E5E5">tree called a fuzz session</font><font color="#CCCCCC"> and what do</font>

591
00:26:59,130 --> 00:27:04,470
we<font color="#CCCCCC"> want to do in this fuzz session well</font>

592
00:27:01,790 --> 00:27:06,920
<font color="#E5E5E5">we need to define the</font><font color="#CCCCCC"> size of</font><font color="#E5E5E5"> the</font>

593
00:27:04,470 --> 00:27:09,150
database<font color="#CCCCCC"> and then we also want to</font>

594
00:27:06,920 --> 00:27:11,010
repeatedly call a bunch of<font color="#E5E5E5"> commands</font><font color="#CCCCCC"> and</font>

595
00:27:09,150 --> 00:27:14,400
<font color="#E5E5E5">then what</font><font color="#CCCCCC"> does it command well it's one</font>

596
00:27:11,010 --> 00:27:17,790
<font color="#E5E5E5">of one of</font><font color="#CCCCCC"> these API</font><font color="#E5E5E5"> is what is one of</font>

597
00:27:14,400 --> 00:27:20,640
<font color="#CCCCCC">these API message types well</font><font color="#E5E5E5"> we get to</font>

598
00:27:17,790 --> 00:27:23,220
the<font color="#CCCCCC"> bottom and</font><font color="#E5E5E5"> we see okay you know add</font>

599
00:27:20,640 --> 00:27:25,470
is adding a key and a value and we'll

600
00:27:23,220 --> 00:27:27,750
just put those literal types there and

601
00:27:25,470 --> 00:27:29,400
then evict for example it<font color="#E5E5E5"> doesn't take</font>

602
00:27:27,750 --> 00:27:33,000
any arguments so you know it's<font color="#E5E5E5"> just kind</font>

603
00:27:29,400 --> 00:27:36,030
<font color="#CCCCCC">of a void type</font><font color="#E5E5E5"> but you can see here how</font>

604
00:27:33,000 --> 00:27:39,120
that<font color="#CCCCCC"> if the this part</font><font color="#E5E5E5"> above mutator is</font>

605
00:27:36,030 --> 00:27:41,790
this mutator that knows how to take one

606
00:27:39,120 --> 00:27:44,280
of<font color="#E5E5E5"> these specifications</font><font color="#CCCCCC"> and it knows how</font>

607
00:27:41,790 --> 00:27:46,020
<font color="#CCCCCC">to mutate in 32s</font><font color="#E5E5E5"> the same way that live</font>

608
00:27:44,280 --> 00:27:49,020
<font color="#E5E5E5">fuzzer already does but</font><font color="#CCCCCC"> it also</font>

609
00:27:46,020 --> 00:27:51,510
<font color="#E5E5E5">understands that</font><font color="#CCCCCC"> okay we have the</font>

610
00:27:49,020 --> 00:27:54,660
sequence<font color="#E5E5E5"> of commands and let's inject an</font>

611
00:27:51,510 --> 00:27:57,510
update somewhere with valid key<font color="#E5E5E5"> and</font>

612
00:27:54,660 --> 00:27:59,640
value<font color="#E5E5E5"> rather than kind of just blindly</font>

613
00:27:57,510 --> 00:28:03,660
figuring<font color="#E5E5E5"> out how</font><font color="#CCCCCC"> to fuzz this with a</font>

614
00:27:59,640 --> 00:28:06,170
stream so here's how this<font color="#CCCCCC"> actually looks</font>

615
00:28:03,660 --> 00:28:09,600
you know this is<font color="#E5E5E5"> just kind of how you</font>

616
00:28:06,170 --> 00:28:11,790
use protobuf but it'll generate this

617
00:28:09,600 --> 00:28:15,389
header file<font color="#E5E5E5"> file for you and those</font>

618
00:28:11,790 --> 00:28:16,530
parser and<font color="#E5E5E5"> stuff so you know you can</font>

619
00:28:15,390 --> 00:28:18,560
<font color="#CCCCCC">Google how to</font><font color="#E5E5E5"> do this not worth talking</font>

620
00:28:16,530 --> 00:28:22,230
<font color="#E5E5E5">about but the interesting part here is</font>

621
00:28:18,560 --> 00:28:25,350
this<font color="#CCCCCC"> LVM</font><font color="#E5E5E5"> fuzzer input that used to take</font>

622
00:28:22,230 --> 00:28:29,670
in a data in a size now takes this<font color="#E5E5E5"> kind</font>

623
00:28:25,350 --> 00:28:30,949
of root node type called<font color="#CCCCCC"> a</font><font color="#E5E5E5"> session so we</font>

624
00:28:29,670 --> 00:28:32,450
put the session there and live

625
00:28:30,950 --> 00:28:33,919
we'll see that and it says oh okay I

626
00:28:32,450 --> 00:28:37,760
realize<font color="#CCCCCC"> that you're trying</font><font color="#E5E5E5"> to fuzz this</font>

627
00:28:33,919 --> 00:28:40,130
specific type and so then it will

628
00:28:37,760 --> 00:28:45,260
<font color="#E5E5E5">recursively kind of fuzz the you know</font>

629
00:28:40,130 --> 00:28:48,350
parts<font color="#E5E5E5"> of this tree and then we just call</font>

630
00:28:45,260 --> 00:28:50,029
<font color="#CCCCCC">into these</font><font color="#E5E5E5"> different you know functions</font>

631
00:28:48,350 --> 00:28:54,168
<font color="#E5E5E5">like we did before but we're parsing it</font>

632
00:28:50,029 --> 00:28:57,230
out of the protobuf so you know<font color="#E5E5E5"> that's</font>

633
00:28:54,169 --> 00:28:59,809
just kind<font color="#CCCCCC"> of</font><font color="#E5E5E5"> like the exact thing</font><font color="#CCCCCC"> that</font>

634
00:28:57,230 --> 00:29:01,490
<font color="#E5E5E5">I'm doing</font><font color="#CCCCCC"> not too interesting maybe but</font>

635
00:28:59,809 --> 00:29:06,158
you<font color="#E5E5E5"> know that's</font><font color="#CCCCCC"> just</font><font color="#E5E5E5"> like kind of where</font>

636
00:29:01,490 --> 00:29:06,159
coverage guide fuzzing is<font color="#E5E5E5"> today and so</font>

637
00:29:06,940 --> 00:29:11,539
that's that's<font color="#CCCCCC"> useful but you</font><font color="#E5E5E5"> know like I</font>

638
00:29:10,100 --> 00:29:15,408
<font color="#CCCCCC">said I want to kind of really emphasize</font>

639
00:29:11,539 --> 00:29:17,419
what is it that you actually<font color="#E5E5E5"> do in</font>

640
00:29:15,409 --> 00:29:18,440
practice<font color="#CCCCCC"> you know when you sit down</font>

641
00:29:17,419 --> 00:29:19,760
you're like okay I'm<font color="#CCCCCC"> just gonna fuzz</font>

642
00:29:18,440 --> 00:29:22,639
this thing like what is<font color="#E5E5E5"> what does</font><font color="#CCCCCC"> it</font>

643
00:29:19,760 --> 00:29:26,149
look<font color="#CCCCCC"> like well so you just start</font><font color="#E5E5E5"> by</font>

644
00:29:22,639 --> 00:29:28,879
taking whatever<font color="#CCCCCC"> C or C++ files that are</font>

645
00:29:26,149 --> 00:29:31,549
interesting<font color="#CCCCCC"> you try to keep as few as</font>

646
00:29:28,880 --> 00:29:35,120
<font color="#CCCCCC">possible and make this into a</font>

647
00:29:31,549 --> 00:29:37,010
<font color="#E5E5E5">self-contained library then yeah you</font>

648
00:29:35,120 --> 00:29:40,279
make this you know consumable byte

649
00:29:37,010 --> 00:29:41,658
stream<font color="#CCCCCC"> fuzzer</font><font color="#E5E5E5"> and then you kind of play</font>

650
00:29:40,279 --> 00:29:43,130
with<font color="#CCCCCC"> it until</font><font color="#E5E5E5"> your coverage is looking</font>

651
00:29:41,659 --> 00:29:44,840
really<font color="#CCCCCC"> good and</font><font color="#E5E5E5"> stuff and then at a</font>

652
00:29:43,130 --> 00:29:49,639
<font color="#CCCCCC">certain</font><font color="#E5E5E5"> point you decide either I'm</font>

653
00:29:44,840 --> 00:29:52,189
finding bugs or<font color="#CCCCCC"> I'm not or</font><font color="#E5E5E5"> I need better</font>

654
00:29:49,639 --> 00:29:55,490
mutations or something and you just<font color="#CCCCCC"> kind</font>

655
00:29:52,190 --> 00:29:57,049
<font color="#CCCCCC">of</font><font color="#E5E5E5"> play it</font><font color="#CCCCCC"> by ear and figure out you</font>

656
00:29:55,490 --> 00:29:59,210
know<font color="#E5E5E5"> up front you invest a little bit</font><font color="#CCCCCC"> of</font>

657
00:29:57,049 --> 00:30:00,830
time and<font color="#E5E5E5"> then</font><font color="#CCCCCC"> you figure out like should</font>

658
00:29:59,210 --> 00:30:04,760
I abandon this or should<font color="#E5E5E5"> I keep</font><font color="#CCCCCC"> going</font>

659
00:30:00,830 --> 00:30:08,418
<font color="#E5E5E5">and basically being able to realize when</font>

660
00:30:04,760 --> 00:30:12,649
things are going<font color="#E5E5E5"> badly and bailing for</font>

661
00:30:08,419 --> 00:30:13,909
the right reasons is important<font color="#E5E5E5"> so</font><font color="#CCCCCC"> this</font>

662
00:30:12,649 --> 00:30:16,939
<font color="#E5E5E5">is really</font><font color="#CCCCCC"> my stuff this is the most</font>

663
00:30:13,909 --> 00:30:19,010
<font color="#E5E5E5">complicated one but you know this is</font>

664
00:30:16,940 --> 00:30:20,720
kind of my my approach at a very high

665
00:30:19,010 --> 00:30:25,309
level<font color="#CCCCCC"> is</font><font color="#E5E5E5"> basically</font><font color="#CCCCCC"> just</font><font color="#E5E5E5"> what I do when I</font>

666
00:30:20,720 --> 00:30:28,010
sit down<font color="#E5E5E5"> to test something and so we</font>

667
00:30:25,309 --> 00:30:30,710
start<font color="#E5E5E5"> at that top left corner and we say</font>

668
00:30:28,010 --> 00:30:32,240
<font color="#CCCCCC">okay let's attack the</font><font color="#E5E5E5"> app</font><font color="#CCCCCC"> cache let's</font>

669
00:30:30,710 --> 00:30:33,970
attack this database thing<font color="#E5E5E5"> you know</font>

670
00:30:32,240 --> 00:30:36,500
whatever it<font color="#E5E5E5"> looks interesting</font>

671
00:30:33,970 --> 00:30:39,710
you know<font color="#CCCCCC"> container right</font><font color="#E5E5E5"> this byte</font>

672
00:30:36,500 --> 00:30:41,299
stream fuzzer<font color="#E5E5E5"> then play with</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> for a</font>

673
00:30:39,710 --> 00:30:43,049
<font color="#CCCCCC">couple</font><font color="#E5E5E5"> days and</font><font color="#CCCCCC"> then keep inspecting</font>

674
00:30:41,299 --> 00:30:46,649
this coverage report

675
00:30:43,049 --> 00:30:47,820
and then you know once<font color="#E5E5E5"> things start to</font>

676
00:30:46,649 --> 00:30:51,178
look promising then you port it<font color="#E5E5E5"> to</font>

677
00:30:47,820 --> 00:30:52,678
protobuf mutator<font color="#CCCCCC"> if not you move on and</font>

678
00:30:51,179 --> 00:30:56,639
<font color="#E5E5E5">you</font><font color="#CCCCCC"> know</font><font color="#E5E5E5"> you</font><font color="#CCCCCC"> just</font><font color="#E5E5E5"> kind of have this loop</font>

679
00:30:52,679 --> 00:31:00,480
going<font color="#E5E5E5"> on and so yeah this is pretty much</font>

680
00:30:56,639 --> 00:31:05,309
<font color="#CCCCCC">it it works really well</font><font color="#E5E5E5"> and I think this</font>

681
00:31:00,480 --> 00:31:06,870
is an underutilized<font color="#E5E5E5"> approach so even</font>

682
00:31:05,309 --> 00:31:10,830
though it's somewhat simple<font color="#E5E5E5"> it's still</font>

683
00:31:06,870 --> 00:31:13,110
effective<font color="#E5E5E5"> so now that we've seen this</font>

684
00:31:10,830 --> 00:31:16,199
approach let's talk about how I found

685
00:31:13,110 --> 00:31:19,199
this bug last year that was used<font color="#E5E5E5"> for an</font>

686
00:31:16,200 --> 00:31:21,929
<font color="#E5E5E5">actual full train exploit and so this</font>

687
00:31:19,200 --> 00:31:24,769
was like a<font color="#CCCCCC"> two bug chain I didn't find</font>

688
00:31:21,929 --> 00:31:26,879
<font color="#E5E5E5">the</font><font color="#CCCCCC"> RCE but I found the sandbox bug and</font>

689
00:31:24,769 --> 00:31:28,409
actually right after<font color="#CCCCCC"> this talk Nicolas</font>

690
00:31:26,879 --> 00:31:31,439
will<font color="#CCCCCC"> be discussing like how the exploit</font>

691
00:31:28,409 --> 00:31:33,330
worked<font color="#E5E5E5"> but what I haven't ever talked</font>

692
00:31:31,440 --> 00:31:37,019
about<font color="#E5E5E5"> is like literally what happens in</font>

693
00:31:33,330 --> 00:31:38,460
terms<font color="#E5E5E5"> of I found this thing you know</font><font color="#CCCCCC"> if</font>

694
00:31:37,019 --> 00:31:43,080
<font color="#E5E5E5">shown like the final product and another</font>

695
00:31:38,460 --> 00:31:45,990
<font color="#E5E5E5">talk but you know here's how it fit into</font>

696
00:31:43,080 --> 00:31:49,289
this process<font color="#E5E5E5"> that I had whoops</font><font color="#CCCCCC"> okay yeah</font>

697
00:31:45,990 --> 00:31:50,879
what is it<font color="#E5E5E5"> doesn't matter all that</font>

698
00:31:49,289 --> 00:31:53,158
matters is that it's a packable right so

699
00:31:50,879 --> 00:31:56,100
this<font color="#E5E5E5"> is pretty</font><font color="#CCCCCC"> corrupted I'm</font><font color="#E5E5E5"> sorry about</font>

700
00:31:53,159 --> 00:31:57,659
<font color="#E5E5E5">this</font><font color="#CCCCCC"> but you know the idea</font><font color="#E5E5E5"> is this is</font>

701
00:31:56,100 --> 00:32:00,649
<font color="#CCCCCC">the</font><font color="#E5E5E5"> interface that's just in</font><font color="#CCCCCC"> the chrome</font>

702
00:31:57,659 --> 00:32:03,149
source repo<font color="#CCCCCC"> and I was hoping</font><font color="#E5E5E5"> to kind of</font>

703
00:32:00,649 --> 00:32:04,590
show you how<font color="#CCCCCC"> I found</font><font color="#E5E5E5"> this but you know</font>

704
00:32:03,149 --> 00:32:07,139
my laptop<font color="#E5E5E5"> isn't here</font>

705
00:32:04,590 --> 00:32:09,809
but you know<font color="#E5E5E5"> basically this is the API</font>

706
00:32:07,139 --> 00:32:11,758
we're<font color="#E5E5E5"> attacking like before it's you</font>

707
00:32:09,809 --> 00:32:15,178
know like six things they take these

708
00:32:11,759 --> 00:32:17,190
primitive types<font color="#E5E5E5"> as like a host which is</font>

709
00:32:15,179 --> 00:32:20,369
<font color="#E5E5E5">an</font><font color="#CCCCCC"> int</font><font color="#E5E5E5"> you know like</font><font color="#CCCCCC"> the stuff isn't</font>

710
00:32:17,190 --> 00:32:21,869
rocket science<font color="#CCCCCC"> you know then if you</font>

711
00:32:20,369 --> 00:32:23,629
click<font color="#E5E5E5"> around it's not hard to find that</font>

712
00:32:21,869 --> 00:32:27,240
here's the actual C++ implementation

713
00:32:23,629 --> 00:32:29,309
<font color="#E5E5E5">that could be vulnerable</font><font color="#CCCCCC"> and would let</font>

714
00:32:27,240 --> 00:32:33,960
<font color="#E5E5E5">us escape the sandbox if we found a bug</font>

715
00:32:29,309 --> 00:32:36,360
<font color="#CCCCCC">in it and so we say</font><font color="#E5E5E5"> okay now</font><font color="#CCCCCC"> that we</font>

716
00:32:33,960 --> 00:32:38,970
know where<font color="#E5E5E5"> the code is we saw that it</font>

717
00:32:36,360 --> 00:32:40,799
was part of the attack<font color="#E5E5E5"> service let's</font>

718
00:32:38,970 --> 00:32:42,539
compile a tiny library containing<font color="#E5E5E5"> this</font>

719
00:32:40,799 --> 00:32:44,190
object and anything it depends<font color="#E5E5E5"> on and</font>

720
00:32:42,539 --> 00:32:48,090
try<font color="#E5E5E5"> to play with</font><font color="#CCCCCC"> it in and see what</font>

721
00:32:44,190 --> 00:32:49,860
<font color="#E5E5E5">happens and so yeah so stage one</font><font color="#CCCCCC"> is just</font>

722
00:32:48,090 --> 00:32:53,059
calling<font color="#CCCCCC"> the API</font><font color="#E5E5E5"> so</font><font color="#CCCCCC"> I just did the same</font>

723
00:32:49,860 --> 00:32:55,379
thing I described in<font color="#E5E5E5"> the beginning</font><font color="#CCCCCC"> I</font>

724
00:32:53,059 --> 00:32:56,660
just made<font color="#E5E5E5"> this byte stream thing and I</font>

725
00:32:55,379 --> 00:33:00,169
<font color="#E5E5E5">just called api's</font>

726
00:32:56,660 --> 00:33:03,170
<font color="#CCCCCC">in any order you know I instantiate</font>

727
00:33:00,170 --> 00:33:06,140
<font color="#E5E5E5">AddThis object the appcache dispatcher</font>

728
00:33:03,170 --> 00:33:08,180
<font color="#E5E5E5">host and I think like I even put a null</font>

729
00:33:06,140 --> 00:33:09,590
pointer in for the service<font color="#E5E5E5"> because like</font>

730
00:33:08,180 --> 00:33:11,330
I'm just lazy you<font color="#CCCCCC"> know let's just see</font>

731
00:33:09,590 --> 00:33:13,189
what happens<font color="#CCCCCC"> where does</font><font color="#E5E5E5"> it fall</font><font color="#CCCCCC"> over and</font>

732
00:33:11,330 --> 00:33:14,600
then so you know you start to<font color="#E5E5E5"> fuzz it</font>

733
00:33:13,190 --> 00:33:15,830
and you see oh<font color="#E5E5E5"> there's an old</font><font color="#CCCCCC"> ER f</font><font color="#E5E5E5"> okay</font>

734
00:33:14,600 --> 00:33:18,639
it's trying to use the service somewhere

735
00:33:15,830 --> 00:33:20,870
<font color="#E5E5E5">and then I'll by hand to implement like</font>

736
00:33:18,640 --> 00:33:22,580
piece<font color="#E5E5E5"> by piece</font><font color="#CCCCCC"> the functionality</font><font color="#E5E5E5"> that I</font>

737
00:33:20,870 --> 00:33:24,229
don't really<font color="#E5E5E5"> care</font><font color="#CCCCCC"> about but</font><font color="#E5E5E5"> will let me</font>

738
00:33:22,580 --> 00:33:27,860
make progress on this thing that's

739
00:33:24,230 --> 00:33:28,910
<font color="#E5E5E5">actually interesting so yeah so</font>

740
00:33:27,860 --> 00:33:30,199
basically<font color="#CCCCCC"> you know I just played with a</font>

741
00:33:28,910 --> 00:33:31,640
little<font color="#CCCCCC"> bit and</font><font color="#E5E5E5"> then suddenly there was</font>

742
00:33:30,200 --> 00:33:36,350
some crash like it was<font color="#E5E5E5"> trying to</font><font color="#CCCCCC"> make a</font>

743
00:33:31,640 --> 00:33:37,700
<font color="#E5E5E5">network request and died and through</font>

744
00:33:36,350 --> 00:33:41,090
<font color="#CCCCCC">auditing and looking at previous bug</font>

745
00:33:37,700 --> 00:33:42,650
reports<font color="#E5E5E5"> I understood that</font><font color="#CCCCCC"> weird things</font>

746
00:33:41,090 --> 00:33:44,240
happening with<font color="#CCCCCC"> network request timings</font>

747
00:33:42,650 --> 00:33:45,440
was what I was<font color="#E5E5E5"> actually looking for so I</font>

748
00:33:44,240 --> 00:33:46,550
was<font color="#E5E5E5"> pretty excited and I said</font><font color="#CCCCCC"> okay</font><font color="#E5E5E5"> you</font>

749
00:33:45,440 --> 00:33:49,130
know<font color="#E5E5E5"> like I'm done for this week you</font>

750
00:33:46,550 --> 00:33:50,120
know you know<font color="#CCCCCC"> took</font><font color="#E5E5E5"> a day off whatever I</font>

751
00:33:49,130 --> 00:33:54,700
was like<font color="#E5E5E5"> okay we're</font><font color="#CCCCCC"> ready</font><font color="#E5E5E5"> to come back</font>

752
00:33:50,120 --> 00:33:57,439
<font color="#E5E5E5">at it deal with this network problem so</font>

753
00:33:54,700 --> 00:33:59,510
basically then like I<font color="#E5E5E5"> said with this</font>

754
00:33:57,440 --> 00:34:01,880
null pointer thing<font color="#E5E5E5"> just plugged in some</font>

755
00:33:59,510 --> 00:34:04,190
fake<font color="#E5E5E5"> network object it turns out that</font>

756
00:34:01,880 --> 00:34:05,780
there actually<font color="#CCCCCC"> was one</font><font color="#E5E5E5"> already in the</font>

757
00:34:04,190 --> 00:34:11,929
<font color="#CCCCCC">Chrome sources that</font><font color="#E5E5E5"> could be used for</font>

758
00:34:05,780 --> 00:34:14,239
<font color="#CCCCCC">testing so I you know</font><font color="#E5E5E5"> let some requests</font>

759
00:34:11,929 --> 00:34:15,980
happen using<font color="#E5E5E5"> fuzzed input</font><font color="#CCCCCC"> bites</font>

760
00:34:14,239 --> 00:34:17,509
where<font color="#E5E5E5"> basically whenever a request</font><font color="#CCCCCC"> would</font>

761
00:34:15,980 --> 00:34:21,199
come in<font color="#E5E5E5"> I would just return</font><font color="#CCCCCC"> some of</font><font color="#E5E5E5"> that</font>

762
00:34:17,510 --> 00:34:24,050
input<font color="#CCCCCC"> byte stream</font><font color="#E5E5E5"> just as my you know</font>

763
00:34:21,199 --> 00:34:25,638
<font color="#E5E5E5">server response but then the problem</font>

764
00:34:24,050 --> 00:34:27,970
<font color="#CCCCCC">with that is you know do you want the</font>

765
00:34:25,639 --> 00:34:30,950
fuzzer to like generate a full HTTP

766
00:34:27,969 --> 00:34:33,439
interaction for you like this<font color="#E5E5E5"> isn't</font>

767
00:34:30,949 --> 00:34:35,799
really going to<font color="#E5E5E5"> work especially</font><font color="#CCCCCC"> not on</font>

768
00:34:33,440 --> 00:34:39,230
like my own<font color="#E5E5E5"> fork or machine yeah so I</font>

769
00:34:35,800 --> 00:34:40,760
realized that you know I could write

770
00:34:39,230 --> 00:34:43,340
this whole thing<font color="#CCCCCC"> that would generate all</font>

771
00:34:40,760 --> 00:34:45,320
these valid HTTP sessions and make<font color="#E5E5E5"> it</font>

772
00:34:43,340 --> 00:34:46,429
grammar<font color="#E5E5E5"> something like this is what I</font>

773
00:34:45,320 --> 00:34:50,990
thought I should<font color="#E5E5E5"> have done when I</font>

774
00:34:46,429 --> 00:34:54,800
started but what I know now<font color="#CCCCCC"> is that</font><font color="#E5E5E5"> you</font>

775
00:34:50,989 --> 00:34:58,629
<font color="#E5E5E5">just hack</font><font color="#CCCCCC"> things in so</font><font color="#E5E5E5"> let me go way</font>

776
00:34:54,800 --> 00:35:03,790
back actually<font color="#CCCCCC"> this might be annoying but</font>

777
00:34:58,630 --> 00:35:03,790
oh man<font color="#CCCCCC"> it's actually really</font><font color="#E5E5E5"> far but</font>

778
00:35:05,730 --> 00:35:11,710
<font color="#E5E5E5">I'm sorry yeah this thing right so this</font>

779
00:35:10,000 --> 00:35:14,560
<font color="#E5E5E5">isn't the exact snippet of code but it's</font>

780
00:35:11,710 --> 00:35:16,480
the same<font color="#E5E5E5"> concept</font><font color="#CCCCCC"> so this sounds crazy</font>

781
00:35:14,560 --> 00:35:20,500
but<font color="#E5E5E5"> what I did was like I</font><font color="#CCCCCC"> just exposed</font>

782
00:35:16,480 --> 00:35:23,110
this byte stream thing<font color="#E5E5E5"> within the</font>

783
00:35:20,500 --> 00:35:27,790
library like at<font color="#E5E5E5"> this point like line 153</font>

784
00:35:23,110 --> 00:35:29,290
<font color="#CCCCCC">I made</font><font color="#E5E5E5"> sure that I could you know use</font>

785
00:35:27,790 --> 00:35:31,150
some<font color="#E5E5E5"> global pointer and like get a hold</font>

786
00:35:29,290 --> 00:35:33,820
of<font color="#E5E5E5"> this this</font><font color="#CCCCCC"> input stream of bytes and</font>

787
00:35:31,150 --> 00:35:36,730
what I did was<font color="#E5E5E5"> I</font><font color="#CCCCCC"> just randomly I didn't</font>

788
00:35:33,820 --> 00:35:39,220
even do any parsing at all I just

789
00:35:36,730 --> 00:35:41,020
<font color="#E5E5E5">randomly created these app cache</font>

790
00:35:39,220 --> 00:35:43,839
manifests<font color="#E5E5E5"> which was this thing that</font><font color="#CCCCCC"> was</font>

791
00:35:41,020 --> 00:35:45,520
it was trying to<font color="#E5E5E5"> parse through HTTP and</font>

792
00:35:43,840 --> 00:35:49,210
I just said let's skip all<font color="#E5E5E5"> this HTTP</font>

793
00:35:45,520 --> 00:35:52,630
interaction and<font color="#CCCCCC"> just like create these</font>

794
00:35:49,210 --> 00:35:54,160
<font color="#E5E5E5">like so for example yeah actually this</font>

795
00:35:52,630 --> 00:35:56,140
is<font color="#E5E5E5"> kind of the same the right code so I</font>

796
00:35:54,160 --> 00:35:59,140
would<font color="#CCCCCC"> just</font><font color="#E5E5E5"> like say okay</font>

797
00:35:56,140 --> 00:36:02,710
picking it<font color="#E5E5E5"> from 0 to 4 and then decide</font>

798
00:35:59,140 --> 00:36:04,089
<font color="#CCCCCC">ok going to loop and then add like three</font>

799
00:36:02,710 --> 00:36:06,370
or four random entries into<font color="#E5E5E5"> this</font>

800
00:36:04,090 --> 00:36:08,830
database<font color="#E5E5E5"> and just from looking</font><font color="#CCCCCC"> the code</font>

801
00:36:06,370 --> 00:36:11,740
is<font color="#E5E5E5"> pretty obvious</font><font color="#CCCCCC"> that this</font><font color="#E5E5E5"> is something</font>

802
00:36:08,830 --> 00:36:12,880
I could<font color="#CCCCCC"> do if I wanted to and then if a</font>

803
00:36:11,740 --> 00:36:14,439
bug<font color="#E5E5E5"> comes out of this you know I'll be</font>

804
00:36:12,880 --> 00:36:18,580
really<font color="#CCCCCC"> motivated to go and actually</font><font color="#E5E5E5"> make</font>

805
00:36:14,440 --> 00:36:21,400
the real input<font color="#E5E5E5"> to reach it so I did this</font>

806
00:36:18,580 --> 00:36:24,370
kind<font color="#E5E5E5"> of everywhere</font><font color="#CCCCCC"> and I ended up having</font>

807
00:36:21,400 --> 00:36:26,110
<font color="#E5E5E5">this kind of fake header object so</font>

808
00:36:24,370 --> 00:36:31,930
whenever would try<font color="#CCCCCC"> to read HTTP headers</font>

809
00:36:26,110 --> 00:36:34,000
it would you know it's I made this<font color="#E5E5E5"> kind</font>

810
00:36:31,930 --> 00:36:36,669
<font color="#E5E5E5">of fake HTTP header API that reads from</font>

811
00:36:34,000 --> 00:36:38,710
<font color="#CCCCCC">the stream input so you would say like</font>

812
00:36:36,670 --> 00:36:40,180
<font color="#CCCCCC">okay did</font><font color="#E5E5E5"> they give us a cache header and</font>

813
00:36:38,710 --> 00:36:41,500
<font color="#E5E5E5">then I would just flip a coin and take</font>

814
00:36:40,180 --> 00:36:44,529
it<font color="#E5E5E5"> from the</font><font color="#CCCCCC"> fuzzed input and say yes or</font>

815
00:36:41,500 --> 00:36:45,730
no<font color="#E5E5E5"> like yes there is a cache header</font>

816
00:36:44,530 --> 00:36:48,520
<font color="#CCCCCC">again I would</font><font color="#E5E5E5"> try to read from it and</font>

817
00:36:45,730 --> 00:36:50,140
then<font color="#E5E5E5"> you know I just kind of really</font>

818
00:36:48,520 --> 00:36:52,690
hacked<font color="#E5E5E5"> through this thing to death</font><font color="#CCCCCC"> but</font>

819
00:36:50,140 --> 00:36:54,129
then at<font color="#E5E5E5"> the same time</font><font color="#CCCCCC"> I was knowing like</font>

820
00:36:52,690 --> 00:36:56,770
<font color="#CCCCCC">okay all this stuff that</font><font color="#E5E5E5"> I'm hacking</font>

821
00:36:54,130 --> 00:37:00,580
<font color="#E5E5E5">around like I could get it to</font><font color="#CCCCCC"> work if I</font>

822
00:36:56,770 --> 00:37:06,940
<font color="#E5E5E5">had to later and so I'll go all the way</font>

823
00:37:00,580 --> 00:37:14,140
back to where it was let's see here yes

824
00:37:06,940 --> 00:37:17,380
<font color="#E5E5E5">okay yeah and so basically playing with</font>

825
00:37:14,140 --> 00:37:19,060
caching and these HTTP responses<font color="#E5E5E5"> and</font>

826
00:37:17,380 --> 00:37:20,470
like

827
00:37:19,060 --> 00:37:24,190
reading stuff that it<font color="#E5E5E5"> was trying to</font>

828
00:37:20,470 --> 00:37:27,970
parse out of this network<font color="#CCCCCC"> request</font><font color="#E5E5E5"> was</font>

829
00:37:24,190 --> 00:37:29,920
enough to find a bug<font color="#E5E5E5"> somewhere and so I</font>

830
00:37:27,970 --> 00:37:31,540
had<font color="#E5E5E5"> like a couple fake bugs where I</font>

831
00:37:29,920 --> 00:37:32,710
would like try<font color="#CCCCCC"> to revert my hacks and</font>

832
00:37:31,540 --> 00:37:35,200
reach it and<font color="#E5E5E5"> it turned out it wasn't</font>

833
00:37:32,710 --> 00:37:39,960
possible<font color="#E5E5E5"> but in the end I finally did</font>

834
00:37:35,200 --> 00:37:42,069
<font color="#E5E5E5">get this one bug where it was real</font><font color="#CCCCCC"> and</font>

835
00:37:39,960 --> 00:37:44,080
slowly and<font color="#E5E5E5"> surely I would just kind</font><font color="#CCCCCC"> of</font>

836
00:37:42,070 --> 00:37:46,960
revert a hack<font color="#E5E5E5"> and add support at the</font>

837
00:37:44,080 --> 00:37:48,279
harness level and you<font color="#E5E5E5"> know finally</font><font color="#CCCCCC"> I had</font>

838
00:37:46,960 --> 00:37:51,790
this thing where<font color="#E5E5E5"> I had an untouched</font>

839
00:37:48,280 --> 00:37:53,830
library and I was<font color="#E5E5E5"> triggering a bug and</font>

840
00:37:51,790 --> 00:37:55,420
that<font color="#E5E5E5"> was the thing</font><font color="#CCCCCC"> that I submitted to</font>

841
00:37:53,830 --> 00:37:56,500
<font color="#E5E5E5">the chrome repo so if you saw that and</font>

842
00:37:55,420 --> 00:37:59,080
<font color="#CCCCCC">thought like oh you know how did you</font>

843
00:37:56,500 --> 00:38:01,090
<font color="#CCCCCC">think</font><font color="#E5E5E5"> like how to you know weave this</font>

844
00:37:59,080 --> 00:38:03,340
needle through the<font color="#E5E5E5"> code like yeah I had</font>

845
00:38:01,090 --> 00:38:04,990
<font color="#E5E5E5">no idea it</font><font color="#CCCCCC"> just did it like based on</font>

846
00:38:03,340 --> 00:38:09,340
what<font color="#E5E5E5"> ended</font><font color="#CCCCCC"> up finding the bug</font><font color="#E5E5E5"> when I</font>

847
00:38:04,990 --> 00:38:11,109
hacked around<font color="#E5E5E5"> so yeah so basically at</font>

848
00:38:09,340 --> 00:38:14,290
the<font color="#CCCCCC"> end I</font><font color="#E5E5E5"> was like okay I have this</font>

849
00:38:11,110 --> 00:38:16,900
<font color="#E5E5E5">stream based</font><font color="#CCCCCC"> buzzer that will find a bug</font>

850
00:38:14,290 --> 00:38:19,390
let me port it to protobuf<font color="#E5E5E5"> so that it's</font>

851
00:38:16,900 --> 00:38:21,010
easier<font color="#E5E5E5"> to kind of minimize the test case</font>

852
00:38:19,390 --> 00:38:23,230
<font color="#E5E5E5">I can play with this more and do</font><font color="#CCCCCC"> better</font>

853
00:38:21,010 --> 00:38:28,540
mutations now that I know this<font color="#E5E5E5"> is</font><font color="#CCCCCC"> a</font>

854
00:38:23,230 --> 00:38:30,250
buggy pattern<font color="#CCCCCC"> and so yeah</font><font color="#E5E5E5"> and then at</font>

855
00:38:28,540 --> 00:38:32,580
this<font color="#E5E5E5"> point you know I had this one</font><font color="#CCCCCC"> input</font>

856
00:38:30,250 --> 00:38:35,880
that would<font color="#E5E5E5"> trigger the bug and</font><font color="#CCCCCC"> then</font>

857
00:38:32,580 --> 00:38:37,870
created a second build of<font color="#E5E5E5"> Chrome and you</font>

858
00:38:35,880 --> 00:38:39,400
<font color="#CCCCCC">know added a bunch of prints</font><font color="#E5E5E5"> and just</font>

859
00:38:37,870 --> 00:38:41,830
kind of by hand reconstructed what was

860
00:38:39,400 --> 00:38:45,550
going on<font color="#E5E5E5"> with the Python server and then</font>

861
00:38:41,830 --> 00:38:47,920
that was<font color="#CCCCCC"> the you know</font><font color="#E5E5E5"> use after free PSC</font>

862
00:38:45,550 --> 00:38:49,570
that we started<font color="#CCCCCC"> from and then Nicolas</font>

863
00:38:47,920 --> 00:38:54,130
will talk about<font color="#E5E5E5"> in five minutes</font>

864
00:38:49,570 --> 00:38:57,520
so yeah so you<font color="#E5E5E5"> know this is like a</font>

865
00:38:54,130 --> 00:39:00,010
really important bug<font color="#E5E5E5"> there's not too</font>

866
00:38:57,520 --> 00:39:01,840
many people<font color="#CCCCCC"> finding sandbox escapes from</font>

867
00:39:00,010 --> 00:39:06,010
<font color="#E5E5E5">what I</font><font color="#CCCCCC"> can tell</font><font color="#E5E5E5"> it's kind of secretive</font>

868
00:39:01,840 --> 00:39:07,090
industry but<font color="#E5E5E5"> you know I would say that</font>

869
00:39:06,010 --> 00:39:08,830
<font color="#CCCCCC">you know this isn't something that's</font>

870
00:39:07,090 --> 00:39:11,140
happening<font color="#E5E5E5"> very frequently like around</font>

871
00:39:08,830 --> 00:39:12,190
<font color="#E5E5E5">the world maybe every couple</font><font color="#CCCCCC"> weeks or a</font>

872
00:39:11,140 --> 00:39:15,250
month someone's finding one<font color="#E5E5E5"> of these</font>

873
00:39:12,190 --> 00:39:18,250
<font color="#E5E5E5">things but the important thing</font><font color="#CCCCCC"> is that</font>

874
00:39:15,250 --> 00:39:22,720
this<font color="#E5E5E5"> actually wasn't a lot</font><font color="#CCCCCC"> of time to do</font>

875
00:39:18,250 --> 00:39:24,310
and it wasn't<font color="#E5E5E5"> actually a lot of insane</font>

876
00:39:22,720 --> 00:39:29,519
ingenuity or<font color="#E5E5E5"> effort or anything it was</font>

877
00:39:24,310 --> 00:39:32,038
just<font color="#E5E5E5"> like a process that is novel and</font>

878
00:39:29,519 --> 00:39:33,990
you know leverages this great coverage

879
00:39:32,039 --> 00:39:35,339
guiding technique<font color="#E5E5E5"> but in some really</font>

880
00:39:33,990 --> 00:39:39,799
weird<font color="#E5E5E5"> way that</font><font color="#CCCCCC"> no</font><font color="#E5E5E5"> one had done</font><font color="#CCCCCC"> before</font>

881
00:39:35,339 --> 00:39:41,910
<font color="#E5E5E5">and it was able</font><font color="#CCCCCC"> to uncover</font><font color="#E5E5E5"> a bug and so</font>

882
00:39:39,799 --> 00:39:45,329
the reason I'm kind of emphasizing<font color="#E5E5E5"> this</font>

883
00:39:41,910 --> 00:39:48,118
is I think<font color="#E5E5E5"> like among all of the</font>

884
00:39:45,329 --> 00:39:51,000
<font color="#E5E5E5">techniques that that people can use</font><font color="#CCCCCC"> to</font>

885
00:39:48,119 --> 00:39:52,019
find<font color="#CCCCCC"> bugs like this is one</font><font color="#E5E5E5"> of the really</font>

886
00:39:51,000 --> 00:39:53,700
<font color="#CCCCCC">one of</font><font color="#E5E5E5"> the easier ones</font>

887
00:39:52,019 --> 00:39:55,890
it's about as<font color="#E5E5E5"> hard as writing unit tests</font>

888
00:39:53,700 --> 00:39:57,930
<font color="#E5E5E5">so like this is like that interns get</font>

889
00:39:55,890 --> 00:39:59,490
assigned<font color="#E5E5E5"> to do when they join a</font><font color="#CCCCCC"> company</font>

890
00:39:57,930 --> 00:40:02,629
and yet here it's<font color="#E5E5E5"> like finding sandbox</font>

891
00:39:59,490 --> 00:40:04,979
escapes and I just think<font color="#CCCCCC"> like you know</font>

892
00:40:02,630 --> 00:40:06,900
they should<font color="#E5E5E5"> bridge this gap either the</font>

893
00:40:04,980 --> 00:40:08,460
<font color="#E5E5E5">bug should go away or you know more</font>

894
00:40:06,900 --> 00:40:09,390
<font color="#E5E5E5">people should be able to do it so you</font>

895
00:40:08,460 --> 00:40:11,339
know<font color="#CCCCCC"> I encourage</font><font color="#E5E5E5"> you guys to try this</font>

896
00:40:09,390 --> 00:40:13,859
technique<font color="#CCCCCC"> so I</font><font color="#E5E5E5"> only have three minutes</font>

897
00:40:11,339 --> 00:40:17,130
<font color="#E5E5E5">but let's talk about</font><font color="#CCCCCC"> xnu</font><font color="#E5E5E5"> real quick</font><font color="#CCCCCC"> so</font>

898
00:40:13,859 --> 00:40:21,900
this<font color="#E5E5E5"> is my new project I've just</font><font color="#CCCCCC"> started</font>

899
00:40:17,130 --> 00:40:25,440
and same exact<font color="#E5E5E5"> technique very different</font>

900
00:40:21,900 --> 00:40:27,329
attack surface and I kind of keep trying

901
00:40:25,440 --> 00:40:28,890
to discover like<font color="#E5E5E5"> okay how far can I take</font>

902
00:40:27,329 --> 00:40:31,980
this<font color="#CCCCCC"> thing and where</font><font color="#E5E5E5"> does it stop</font>

903
00:40:28,890 --> 00:40:35,160
<font color="#CCCCCC">working</font><font color="#E5E5E5"> and so I wanted to test</font><font color="#CCCCCC"> xnu</font>

904
00:40:31,980 --> 00:40:38,000
<font color="#E5E5E5">networking and so what I did was I just</font>

905
00:40:35,160 --> 00:40:41,160
<font color="#E5E5E5">took the whole network subsystem of</font><font color="#CCCCCC"> xnu</font>

906
00:40:38,000 --> 00:40:43,339
<font color="#E5E5E5">compiled it with the instrumentation for</font>

907
00:40:41,160 --> 00:40:45,390
like live buzzer and stuff and then

908
00:40:43,339 --> 00:40:48,420
tried<font color="#CCCCCC"> to</font><font color="#E5E5E5"> make this little self-contained</font>

909
00:40:45,390 --> 00:40:49,890
library<font color="#E5E5E5"> in</font><font color="#CCCCCC"> user space</font><font color="#E5E5E5"> and then of course</font>

910
00:40:48,420 --> 00:40:51,390
<font color="#CCCCCC">when you</font><font color="#E5E5E5"> go to link it there's all the</font>

911
00:40:49,890 --> 00:40:53,519
rest of the kernel missing and so it

912
00:40:51,390 --> 00:40:54,980
says like you<font color="#CCCCCC"> know a thousand functions</font>

913
00:40:53,519 --> 00:40:58,379
are missing so what I<font color="#E5E5E5"> did was I just</font>

914
00:40:54,980 --> 00:41:00,180
stubbed<font color="#E5E5E5"> all</font><font color="#CCCCCC"> those functions out to</font>

915
00:40:58,380 --> 00:41:02,609
assert false and just crash when I

916
00:41:00,180 --> 00:41:04,140
called<font color="#E5E5E5"> them so that way I could start</font>

917
00:41:02,609 --> 00:41:07,619
<font color="#CCCCCC">running and working</font><font color="#E5E5E5"> with this thing and</font>

918
00:41:04,140 --> 00:41:10,259
as<font color="#E5E5E5"> it would hit code that it</font><font color="#CCCCCC"> actually</font>

919
00:41:07,619 --> 00:41:12,349
needed to<font color="#E5E5E5"> work I would either put that</font>

920
00:41:10,259 --> 00:41:14,789
real implementation<font color="#E5E5E5"> in or stub it out or</font>

921
00:41:12,349 --> 00:41:17,759
put my own<font color="#CCCCCC"> mocked implementation or</font>

922
00:41:14,789 --> 00:41:20,309
whatever<font color="#E5E5E5"> but basically I had this kind</font>

923
00:41:17,759 --> 00:41:24,720
of<font color="#CCCCCC"> very quickly</font><font color="#E5E5E5"> had to set up to start</font>

924
00:41:20,309 --> 00:41:26,309
fuzzing and<font color="#E5E5E5"> so what I realized was once</font>

925
00:41:24,720 --> 00:41:29,930
I saw which<font color="#E5E5E5"> API is needed to be</font>

926
00:41:26,309 --> 00:41:33,019
implemented<font color="#E5E5E5"> this kind of boiled down to</font>

927
00:41:29,930 --> 00:41:35,819
you know obviously<font color="#CCCCCC"> memory allocation so</font>

928
00:41:33,019 --> 00:41:37,740
<font color="#CCCCCC">Zi look</font><font color="#E5E5E5"> M cache</font>

929
00:41:35,819 --> 00:41:40,109
<font color="#CCCCCC">not look like</font><font color="#E5E5E5"> these all these api's are</font>

930
00:41:37,740 --> 00:41:42,189
in the kernel<font color="#E5E5E5"> so I implemented all of</font>

931
00:41:40,109 --> 00:41:45,098
them by just kind of translating them to

932
00:41:42,190 --> 00:41:46,839
the user space equivalent<font color="#CCCCCC"> so for Malik</font>

933
00:41:45,099 --> 00:41:50,470
that's<font color="#CCCCCC"> trivial you just call forward it</font>

934
00:41:46,839 --> 00:41:51,819
to<font color="#CCCCCC"> the user space Malik</font><font color="#E5E5E5"> but for</font><font color="#CCCCCC"> Z</font>

935
00:41:50,470 --> 00:41:55,000
<font color="#CCCCCC">outlook you actually have this kind of</font>

936
00:41:51,819 --> 00:41:56,500
custom like zone that gets set<font color="#CCCCCC"> up and</font>

937
00:41:55,000 --> 00:41:58,650
stuff and you know<font color="#CCCCCC"> I</font><font color="#E5E5E5"> just kind of had to</font>

938
00:41:56,500 --> 00:42:00,930
<font color="#E5E5E5">develop that myself by looking</font><font color="#CCCCCC"> at the</font>

939
00:41:58,650 --> 00:42:05,579
API

940
00:42:00,930 --> 00:42:08,649
same thing with<font color="#CCCCCC"> M buffs so packets are</font>

941
00:42:05,579 --> 00:42:10,420
kind of stored in<font color="#E5E5E5"> this like slab he</font>

942
00:42:08,650 --> 00:42:12,460
<font color="#CCCCCC">thing</font><font color="#E5E5E5"> that's custom in X in you so I</font>

943
00:42:10,420 --> 00:42:15,549
<font color="#E5E5E5">just reimplemented that using the normal</font>

944
00:42:12,460 --> 00:42:17,619
<font color="#E5E5E5">heap</font><font color="#CCCCCC"> you know it took</font><font color="#E5E5E5"> like a</font><font color="#CCCCCC"> week or</font>

945
00:42:15,549 --> 00:42:21,309
something<font color="#E5E5E5"> of just randomly doing stuff</font>

946
00:42:17,619 --> 00:42:22,750
<font color="#E5E5E5">and threading and stuff I just turned</font>

947
00:42:21,309 --> 00:42:23,980
off<font color="#E5E5E5"> I said</font><font color="#CCCCCC"> okay I'll just I won't look</font>

948
00:42:22,750 --> 00:42:29,079
for race conditions right now<font color="#E5E5E5"> just</font>

949
00:42:23,980 --> 00:42:30,280
<font color="#E5E5E5">looking for parsing bugs so</font><font color="#CCCCCC"> okay so</font>

950
00:42:29,079 --> 00:42:31,750
<font color="#E5E5E5">those</font><font color="#CCCCCC"> are things I had</font><font color="#E5E5E5"> to implement so</font>

951
00:42:30,280 --> 00:42:34,960
how do we<font color="#CCCCCC"> actually interact</font><font color="#E5E5E5"> with this</font>

952
00:42:31,750 --> 00:42:36,670
thing now<font color="#CCCCCC"> so</font><font color="#E5E5E5"> the same way that user</font>

953
00:42:34,960 --> 00:42:39,609
space already interacts with the kernel

954
00:42:36,670 --> 00:42:40,900
is through<font color="#CCCCCC"> insist calls</font><font color="#E5E5E5"> and so what I do</font>

955
00:42:39,609 --> 00:42:43,150
is I just<font color="#E5E5E5"> call this just calls with</font>

956
00:42:40,900 --> 00:42:45,849
random arguments and then<font color="#E5E5E5"> whenever it</font>

957
00:42:43,150 --> 00:42:47,859
<font color="#E5E5E5">goes to copy data in from user land it</font>

958
00:42:45,849 --> 00:42:49,690
calls this<font color="#CCCCCC"> copying function so I have</font>

959
00:42:47,859 --> 00:42:53,470
this thing<font color="#CCCCCC"> hooked up to my you know</font>

960
00:42:49,690 --> 00:42:55,000
fuzzed input stream<font color="#E5E5E5"> and so then with</font>

961
00:42:53,470 --> 00:42:56,859
some more hacks to like just skip over

962
00:42:55,000 --> 00:42:57,609
file descriptors<font color="#CCCCCC"> and stuff because it's</font>

963
00:42:56,859 --> 00:43:01,808
not<font color="#CCCCCC"> really relevant</font>

964
00:42:57,609 --> 00:43:03,910
<font color="#CCCCCC">I finally had this fuzzer working so I</font>

965
00:43:01,809 --> 00:43:06,309
would I have this thing<font color="#E5E5E5"> that creates a</font>

966
00:43:03,910 --> 00:43:08,950
socket<font color="#E5E5E5"> and interacts with the socket and</font>

967
00:43:06,309 --> 00:43:11,470
<font color="#E5E5E5">then as part</font><font color="#CCCCCC"> of this</font><font color="#E5E5E5"> fuzzer loop I'm</font>

968
00:43:08,950 --> 00:43:14,049
also sending random packets in to that

969
00:43:11,470 --> 00:43:19,299
socket<font color="#E5E5E5"> and so this pretty much</font>

970
00:43:14,049 --> 00:43:20,859
encompasses networking and so I<font color="#CCCCCC"> leave</font><font color="#E5E5E5"> 20</font>

971
00:43:19,299 --> 00:43:25,180
seconds<font color="#E5E5E5"> so yeah basically just</font><font color="#CCCCCC"> got</font>

972
00:43:20,859 --> 00:43:26,828
something<font color="#E5E5E5"> working did around stuff tried</font>

973
00:43:25,180 --> 00:43:29,020
<font color="#CCCCCC">to avoid spending too much time before I</font>

974
00:43:26,829 --> 00:43:32,470
knew<font color="#CCCCCC"> it was necessary and then there's a</font>

975
00:43:29,020 --> 00:43:34,720
first bug and reporting more soon<font color="#E5E5E5"> I've</font>

976
00:43:32,470 --> 00:43:38,828
reported one actually already like last

977
00:43:34,720 --> 00:43:42,549
week<font color="#CCCCCC"> two seconds I</font><font color="#E5E5E5"> want to do</font><font color="#CCCCCC"> this on</font>

978
00:43:38,829 --> 00:43:47,799
binaries to work hard<font color="#CCCCCC"> live demo and I</font>

979
00:43:42,549 --> 00:43:49,538
<font color="#E5E5E5">guess I want but yeah sorry yeah so</font><font color="#CCCCCC"> I</font>

980
00:43:47,799 --> 00:43:53,109
<font color="#CCCCCC">don't know I guess we have a break</font><font color="#E5E5E5"> now</font>

981
00:43:49,539 --> 00:43:55,150
but yeah if<font color="#E5E5E5"> anyone has questions like</font>

982
00:43:53,109 --> 00:43:55,769
I'm happy to talk to you up here<font color="#CCCCCC"> or</font>

983
00:43:55,150 --> 00:43:58,769
<font color="#CCCCCC">something</font>

984
00:43:55,769 --> 00:43:58,769
yeah

985
00:44:05,530 --> 00:44:11,650
hi thank<font color="#E5E5E5"> you</font><font color="#CCCCCC"> delay to</font><font color="#E5E5E5"> talk and was</font>

986
00:44:09,140 --> 00:44:15,200
having<font color="#E5E5E5"> a wish</font><font color="#CCCCCC"> now how is this technique</font>

987
00:44:11,650 --> 00:44:19,100
<font color="#E5E5E5">how applicable is</font><font color="#CCCCCC"> destiny against groups</font>

988
00:44:15,200 --> 00:44:20,660
or stuff especially<font color="#E5E5E5"> yes no I totally</font>

989
00:44:19,100 --> 00:44:23,600
agree so<font color="#CCCCCC"> it does the thing that I was</font>

990
00:44:20,660 --> 00:44:27,230
<font color="#CCCCCC">trying to</font><font color="#E5E5E5"> address here</font><font color="#CCCCCC"> so I'll just</font>

991
00:44:23,600 --> 00:44:28,610
<font color="#CCCCCC">cover quickly getting fuzzing coverage</font>

992
00:44:27,230 --> 00:44:30,890
feedback and writing the harness is

993
00:44:28,610 --> 00:44:32,090
doable very<font color="#E5E5E5"> doable I have a private</font>

994
00:44:30,890 --> 00:44:34,509
<font color="#E5E5E5">project that does this</font>

995
00:44:32,090 --> 00:44:37,370
the problem is hacking<font color="#E5E5E5"> around things and</font>

996
00:44:34,510 --> 00:44:41,180
like making quick progress when you

997
00:44:37,370 --> 00:44:43,250
don't want to like I was saying<font color="#E5E5E5"> like</font>

998
00:44:41,180 --> 00:44:46,580
make some random type in place like you

999
00:44:43,250 --> 00:44:48,050
can't really do that<font color="#E5E5E5"> so</font><font color="#CCCCCC"> I haven't</font><font color="#E5E5E5"> fully</font>

1000
00:44:46,580 --> 00:44:50,710
explored<font color="#CCCCCC"> this yet but I think</font><font color="#E5E5E5"> that's</font><font color="#CCCCCC"> the</font>

1001
00:44:48,050 --> 00:45:02,720
<font color="#E5E5E5">kind</font><font color="#CCCCCC"> of next step after xnu</font>

1002
00:44:50,710 --> 00:45:05,930
yeah<font color="#E5E5E5"> I think</font><font color="#CCCCCC"> we</font><font color="#E5E5E5"> will talk I have two</font>

1003
00:45:02,720 --> 00:45:08,120
short questions both<font color="#E5E5E5"> concerning time the</font>

1004
00:45:05,930 --> 00:45:11,149
first<font color="#E5E5E5"> one</font><font color="#CCCCCC"> I read a classical for fuzzing</font>

1005
00:45:08,120 --> 00:45:13,069
yeah<font color="#E5E5E5"> because</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> mentioned it at the end</font>

1006
00:45:11,150 --> 00:45:14,720
of your talk<font color="#E5E5E5"> yeah do you decide when</font>

1007
00:45:13,070 --> 00:45:18,560
it's<font color="#E5E5E5"> time</font><font color="#CCCCCC"> to move on to your next</font><font color="#E5E5E5"> target</font>

1008
00:45:14,720 --> 00:45:21,230
<font color="#CCCCCC">how long do you usually fast</font><font color="#E5E5E5"> until you</font>

1009
00:45:18,560 --> 00:45:24,500
get<font color="#E5E5E5"> your first crash dangerous yeah</font><font color="#CCCCCC"> yeah</font>

1010
00:45:21,230 --> 00:45:29,900
so I<font color="#CCCCCC"> think at</font><font color="#E5E5E5"> this point it's about two</font>

1011
00:45:24,500 --> 00:45:31,820
weeks per<font color="#CCCCCC"> project</font><font color="#E5E5E5"> and so generally</font>

1012
00:45:29,900 --> 00:45:33,500
<font color="#E5E5E5">following this exact kind of pattern you</font>

1013
00:45:31,820 --> 00:45:36,170
know by the end<font color="#CCCCCC"> of the week</font><font color="#E5E5E5"> I'll see</font>

1014
00:45:33,500 --> 00:45:39,500
<font color="#E5E5E5">like okay I'm making progress here</font><font color="#CCCCCC"> and</font>

1015
00:45:36,170 --> 00:45:40,730
<font color="#E5E5E5">either I'm getting random nobody refs</font>

1016
00:45:39,500 --> 00:45:42,310
<font color="#E5E5E5">that kind</font><font color="#CCCCCC"> of look legit and stuff and</font>

1017
00:45:40,730 --> 00:45:46,640
<font color="#E5E5E5">like you get some kind of feedback</font><font color="#CCCCCC"> that</font>

1018
00:45:42,310 --> 00:45:48,170
this is worth pursuing<font color="#CCCCCC"> or like I mean</font>

1019
00:45:46,640 --> 00:45:50,120
generally I try<font color="#CCCCCC"> to fully cover some</font>

1020
00:45:48,170 --> 00:45:51,200
<font color="#CCCCCC">self-contained thing and usually by the</font>

1021
00:45:50,120 --> 00:45:55,940
<font color="#CCCCCC">end of</font><font color="#E5E5E5"> a couple</font><font color="#CCCCCC"> weeks</font><font color="#E5E5E5"> I'll have like</font>

1022
00:45:51,200 --> 00:45:57,649
fully explored it and<font color="#E5E5E5"> so it</font><font color="#CCCCCC"> just looks</font>

1023
00:45:55,940 --> 00:46:00,500
<font color="#CCCCCC">like it's</font><font color="#E5E5E5"> time to move on</font><font color="#CCCCCC"> but that takes</font>

1024
00:45:57,650 --> 00:46:03,230
<font color="#CCCCCC">experience I guess so and your second</font>

1025
00:46:00,500 --> 00:46:06,200
question<font color="#E5E5E5"> quick and technical real quick</font>

1026
00:46:03,230 --> 00:46:08,720
you move to X and you yeah<font color="#CCCCCC"> how much time</font>

1027
00:46:06,200 --> 00:46:10,169
did it take you to<font color="#E5E5E5"> get acquainted with</font>

1028
00:46:08,720 --> 00:46:13,140
<font color="#CCCCCC">the ecosystem</font>

1029
00:46:10,170 --> 00:46:15,420
you because it's rather big<font color="#E5E5E5"> yeah yeah so</font>

1030
00:46:13,140 --> 00:46:18,359
it's kind<font color="#CCCCCC"> of funny like</font><font color="#E5E5E5"> I I I don't</font>

1031
00:46:15,420 --> 00:46:19,890
<font color="#E5E5E5">really know anything about</font><font color="#CCCCCC"> xnu but the</font>

1032
00:46:18,360 --> 00:46:22,530
reason I<font color="#E5E5E5"> went for networking was because</font>

1033
00:46:19,890 --> 00:46:24,690
it's very<font color="#E5E5E5"> in line with stuff I already</font>

1034
00:46:22,530 --> 00:46:28,910
<font color="#E5E5E5">know which</font><font color="#CCCCCC"> is like you know huh I mean</font>

1035
00:46:24,690 --> 00:46:32,610
syscalls<font color="#CCCCCC"> houses calls work and how like</font>

1036
00:46:28,910 --> 00:46:34,680
packets work like I<font color="#CCCCCC"> need that but you</font>

1037
00:46:32,610 --> 00:46:36,180
know I'm trying<font color="#E5E5E5"> to order books on how to</font>

1038
00:46:34,680 --> 00:46:38,870
actually interact with<font color="#CCCCCC"> the</font><font color="#E5E5E5"> real</font>

1039
00:46:36,180 --> 00:46:42,000
ecosystem which I have no idea<font color="#E5E5E5"> yet and</font>

1040
00:46:38,870 --> 00:46:47,040
you<font color="#E5E5E5"> know</font><font color="#CCCCCC"> so you know there are all these</font>

1041
00:46:42,000 --> 00:46:48,480
<font color="#E5E5E5">bugs recently with this mock port stuff</font>

1042
00:46:47,040 --> 00:46:49,529
<font color="#E5E5E5">like these mock port use after freeze</font>

1043
00:46:48,480 --> 00:46:52,580
there were a couple<font color="#E5E5E5"> of bugs like that</font>

1044
00:46:49,530 --> 00:46:55,110
and when I looked at them<font color="#E5E5E5"> it seems like</font>

1045
00:46:52,580 --> 00:46:58,890
this technique<font color="#CCCCCC"> can be extended trivially</font>

1046
00:46:55,110 --> 00:47:00,180
to that so<font color="#E5E5E5"> you know I think this is</font>

1047
00:46:58,890 --> 00:47:03,839
applicable it's just I have to<font color="#E5E5E5"> get</font>

1048
00:47:00,180 --> 00:47:05,520
acquainted<font color="#E5E5E5"> but yeah as far as the the</font>

1049
00:47:03,840 --> 00:47:08,040
<font color="#E5E5E5">first prototype took me about a month to</font>

1050
00:47:05,520 --> 00:47:11,220
<font color="#E5E5E5">write for this fuzzer where I was</font>

1051
00:47:08,040 --> 00:47:15,180
<font color="#E5E5E5">finding bugs</font><font color="#CCCCCC"> and then or</font><font color="#E5E5E5"> bug you know</font>

1052
00:47:11,220 --> 00:47:17,000
and then<font color="#E5E5E5"> I haven't really worked on</font><font color="#CCCCCC"> this</font>

1053
00:47:15,180 --> 00:47:23,580
<font color="#E5E5E5">for a month or two but I'm gonna resume</font>

1054
00:47:17,000 --> 00:47:26,910
<font color="#E5E5E5">but yeah cool thank you so any more</font>

1055
00:47:23,580 --> 00:47:29,540
<font color="#CCCCCC">questions come on pester him and give me</font>

1056
00:47:26,910 --> 00:47:29,540
some exercise

1057
00:47:30,650 --> 00:47:38,060
<font color="#CCCCCC">no okay</font><font color="#E5E5E5"> see ya thanks everybody</font><font color="#CCCCCC"> and yeah</font>

1058
00:47:37,350 --> 00:47:43,159
feel<font color="#CCCCCC"> free to come</font>

1059
00:47:38,060 --> 00:47:43,159
[Applause]

