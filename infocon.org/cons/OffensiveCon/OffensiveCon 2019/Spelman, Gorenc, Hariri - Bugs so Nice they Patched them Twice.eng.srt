1
00:00:00,290 --> 00:00:06,390
[Applause]

2
00:00:04,490 --> 00:00:08,010
how's it<font color="#CCCCCC"> going everybody</font><font color="#E5E5E5"> thanks</font><font color="#CCCCCC"> for</font>

3
00:00:06,390 --> 00:00:09,570
having us out here<font color="#E5E5E5"> at offensive</font><font color="#CCCCCC"> comments</font>

4
00:00:08,010 --> 00:00:11,010
we're excited to be here<font color="#CCCCCC"> it's our second</font>

5
00:00:09,570 --> 00:00:12,840
<font color="#CCCCCC">it's the second year</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> con in our</font>

6
00:00:11,010 --> 00:00:14,250
second<font color="#E5E5E5"> year presenting so excited to</font>

7
00:00:12,840 --> 00:00:18,270
share with<font color="#E5E5E5"> you some of these stuff about</font>

8
00:00:14,250 --> 00:00:19,948
exactly<font color="#E5E5E5"> how hard it is our talk is a bug</font>

9
00:00:18,270 --> 00:00:22,470
so nice they patched<font color="#E5E5E5"> them twice a</font>

10
00:00:19,949 --> 00:00:23,730
continuing<font color="#E5E5E5"> story of failed patches and</font>

11
00:00:22,470 --> 00:00:26,519
specifically we're going<font color="#E5E5E5"> to be</font><font color="#CCCCCC"> looking</font>

12
00:00:23,730 --> 00:00:28,859
at what is<font color="#CCCCCC"> going on in in Adobe Reader</font>

13
00:00:26,519 --> 00:00:30,570
<font color="#E5E5E5">and Adobe Acrobat</font><font color="#CCCCCC"> it's one</font><font color="#E5E5E5"> of our you</font>

14
00:00:28,859 --> 00:00:32,369
know<font color="#E5E5E5"> you know new</font><font color="#CCCCCC"> favor</font><font color="#E5E5E5"> products we've</font>

15
00:00:30,570 --> 00:00:34,950
been following<font color="#E5E5E5"> it now for a good amount</font>

16
00:00:32,369 --> 00:00:38,070
<font color="#E5E5E5">of time trying</font><font color="#CCCCCC"> to understand exactly</font><font color="#E5E5E5"> why</font>

17
00:00:34,950 --> 00:00:40,140
we're receiving bugs<font color="#E5E5E5"> twice from</font>

18
00:00:38,070 --> 00:00:41,969
researchers out there<font color="#CCCCCC"> in the world and</font>

19
00:00:40,140 --> 00:00:43,559
and kind<font color="#CCCCCC"> of</font><font color="#E5E5E5"> getting an understanding</font><font color="#CCCCCC"> of</font>

20
00:00:41,969 --> 00:00:45,329
how well<font color="#CCCCCC"> dobby</font><font color="#E5E5E5"> is actually patching</font>

21
00:00:43,559 --> 00:00:46,890
their software and<font color="#E5E5E5"> how much time and</font>

22
00:00:45,329 --> 00:00:49,020
effort they're actually<font color="#E5E5E5"> looking at the</font>

23
00:00:46,890 --> 00:00:50,640
actual<font color="#E5E5E5"> root cause of the bug itself</font><font color="#CCCCCC"> so</font>

24
00:00:49,020 --> 00:00:52,710
we're going<font color="#E5E5E5"> to be talking</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> know</font>

25
00:00:50,640 --> 00:00:54,449
across<font color="#E5E5E5"> the the architecture of the</font>

26
00:00:52,710 --> 00:00:56,460
application itself<font color="#E5E5E5"> looking specifically</font>

27
00:00:54,449 --> 00:00:58,949
<font color="#E5E5E5">now at the JavaScript API is we'll</font><font color="#CCCCCC"> be</font>

28
00:00:56,460 --> 00:01:00,180
looking<font color="#E5E5E5"> at the</font><font color="#CCCCCC"> XSLT engine we'll be</font>

29
00:00:58,949 --> 00:01:01,469
looking at indexing<font color="#E5E5E5"> and we'll be looking</font>

30
00:01:00,180 --> 00:01:03,750
at file parsing so we're not talking

31
00:01:01,469 --> 00:01:05,729
<font color="#CCCCCC">about</font><font color="#E5E5E5"> just</font><font color="#CCCCCC"> one specific area in the</font>

32
00:01:03,750 --> 00:01:07,890
application but the<font color="#E5E5E5"> actual like what</font>

33
00:01:05,729 --> 00:01:11,220
seems to be<font color="#E5E5E5"> widespread</font><font color="#CCCCCC"> misses as it</font>

34
00:01:07,890 --> 00:01:13,020
relates to patching vulnerabilities so

35
00:01:11,220 --> 00:01:13,860
<font color="#CCCCCC">quick</font><font color="#E5E5E5"> first introduction</font><font color="#CCCCCC"> my name is</font>

36
00:01:13,020 --> 00:01:15,270
<font color="#CCCCCC">Brian Goran</font>

37
00:01:13,860 --> 00:01:17,909
I'm the director<font color="#CCCCCC"> of vulnerability</font>

38
00:01:15,270 --> 00:01:19,320
research inside of Trend Micro<font color="#E5E5E5"> my</font>

39
00:01:17,909 --> 00:01:20,820
primary<font color="#CCCCCC"> responsibility</font><font color="#E5E5E5"> is running</font><font color="#CCCCCC"> this</font>

40
00:01:19,320 --> 00:01:22,470
<font color="#CCCCCC">year the initiative program which is</font><font color="#E5E5E5"> the</font>

41
00:01:20,820 --> 00:01:24,298
world's<font color="#E5E5E5"> largest vendor agnostic bug</font>

42
00:01:22,470 --> 00:01:25,439
bounty program so there's probably<font color="#E5E5E5"> quite</font>

43
00:01:24,299 --> 00:01:27,210
<font color="#E5E5E5">a</font><font color="#CCCCCC"> few people</font><font color="#E5E5E5"> in this room that we've</font>

44
00:01:25,439 --> 00:01:29,008
purchased bugs from before<font color="#CCCCCC"> but</font><font color="#E5E5E5"> we work</font>

45
00:01:27,210 --> 00:01:30,360
<font color="#CCCCCC">with researchers when they find zero</font>

46
00:01:29,009 --> 00:01:32,939
days we<font color="#CCCCCC"> purchase them</font><font color="#E5E5E5"> and work with</font><font color="#CCCCCC"> the</font>

47
00:01:30,360 --> 00:01:34,439
vendors<font color="#CCCCCC"> to get them fixed and we release</font>

48
00:01:32,939 --> 00:01:34,710
protections for those bugs<font color="#CCCCCC"> while</font><font color="#E5E5E5"> we do</font>

49
00:01:34,439 --> 00:01:36,360
it

50
00:01:34,710 --> 00:01:38,339
I also<font color="#CCCCCC"> organize the pondo and hacking</font>

51
00:01:36,360 --> 00:01:41,909
contests which is<font color="#E5E5E5"> happening here in</font>

52
00:01:38,340 --> 00:01:43,590
March<font color="#E5E5E5"> working with here Jaisal all right</font>

53
00:01:41,909 --> 00:01:45,840
I'm a Jaisal<font color="#E5E5E5"> Spellman or</font><font color="#CCCCCC"> wandering</font>

54
00:01:43,590 --> 00:01:48,689
glitch and<font color="#CCCCCC"> I've been part</font><font color="#E5E5E5"> of</font><font color="#CCCCCC"> CDI for</font>

55
00:01:45,840 --> 00:01:50,159
just shy of seven years<font color="#E5E5E5"> very much like</font>

56
00:01:48,689 --> 00:01:52,380
static analysis and<font color="#CCCCCC"> that's generally</font>

57
00:01:50,159 --> 00:01:54,720
<font color="#CCCCCC">what I try and focus</font><font color="#E5E5E5"> on and I'm gonna</font>

58
00:01:52,380 --> 00:01:56,009
<font color="#E5E5E5">pass over to tool but one thing about</font>

59
00:01:54,720 --> 00:01:58,170
him<font color="#E5E5E5"> that he</font><font color="#CCCCCC"> probably won't like to admit</font>

60
00:01:56,009 --> 00:02:00,240
<font color="#E5E5E5">is internally because he spends so much</font>

61
00:01:58,170 --> 00:02:01,330
time on Adobe<font color="#E5E5E5"> we usually refer</font><font color="#CCCCCC"> to him as</font>

62
00:02:00,240 --> 00:02:05,300
a<font color="#E5E5E5"> doable</font>

63
00:02:01,330 --> 00:02:05,300
[Laughter]

64
00:02:06,159 --> 00:02:09,610
I've been working with<font color="#E5E5E5"> Zi for the past</font>

65
00:02:08,080 --> 00:02:11,560
six years

66
00:02:09,610 --> 00:02:14,230
<font color="#E5E5E5">I'm also the case</font><font color="#CCCCCC"> leap so basically any</font>

67
00:02:11,560 --> 00:02:16,720
case that gets<font color="#CCCCCC"> in the program I dispatch</font>

68
00:02:14,230 --> 00:02:20,109
it to the<font color="#E5E5E5"> analysts and I end up</font><font color="#CCCCCC"> crying</font>

69
00:02:16,720 --> 00:02:22,480
<font color="#E5E5E5">the case</font><font color="#CCCCCC"> I also do a</font><font color="#E5E5E5"> lot of root cause</font>

70
00:02:20,110 --> 00:02:23,709
analysis<font color="#E5E5E5"> research and stuff like that so</font>

71
00:02:22,480 --> 00:02:25,810
if you guys have any questions<font color="#CCCCCC"> on</font><font color="#E5E5E5"> the</font>

72
00:02:23,709 --> 00:02:28,480
pricings<font color="#E5E5E5"> which probably a lot of you do</font>

73
00:02:25,810 --> 00:02:31,150
<font color="#CCCCCC">so you guys can write me outside I can</font>

74
00:02:28,480 --> 00:02:34,390
probably fix that<font color="#CCCCCC"> thanks</font><font color="#E5E5E5"> I didn't hear</font>

75
00:02:31,150 --> 00:02:36,069
that I didn't<font color="#E5E5E5"> hear that</font><font color="#CCCCCC"> alright so I</font>

76
00:02:34,390 --> 00:02:37,359
just kind<font color="#CCCCCC"> of quick overview the levels</font>

77
00:02:36,069 --> 00:02:38,738
set<font color="#E5E5E5"> everybody you know if you haven't</font>

78
00:02:37,360 --> 00:02:41,260
<font color="#E5E5E5">spent a lot</font><font color="#CCCCCC"> of time</font><font color="#E5E5E5"> looking at Adobe</font>

79
00:02:38,739 --> 00:02:42,910
products before<font color="#E5E5E5"> this whole</font><font color="#CCCCCC"> presentation</font>

80
00:02:41,260 --> 00:02:45,250
is about<font color="#E5E5E5"> Adobe Acrobat and Adobe Reader</font>

81
00:02:42,910 --> 00:02:46,840
<font color="#CCCCCC">it's been around since 1993</font>

82
00:02:45,250 --> 00:02:48,489
and it's very widely deployed in fact

83
00:02:46,840 --> 00:02:49,870
like I get<font color="#E5E5E5"> to talk to</font><font color="#CCCCCC"> customers who are</font>

84
00:02:48,489 --> 00:02:51,760
deploying these you know security

85
00:02:49,870 --> 00:02:53,890
<font color="#E5E5E5">solutions for</font><font color="#CCCCCC"> our company</font><font color="#E5E5E5"> and it</font>

86
00:02:51,760 --> 00:02:56,500
routinely that is the you<font color="#E5E5E5"> know the</font>

87
00:02:53,890 --> 00:02:57,940
software<font color="#E5E5E5"> of choice for PDF you know PDF</font>

88
00:02:56,500 --> 00:02:59,290
stuff if they don't if<font color="#E5E5E5"> they're not using</font>

89
00:02:57,940 --> 00:03:01,000
that<font color="#E5E5E5"> you're they're using</font><font color="#CCCCCC"> Foxit right</font>

90
00:02:59,290 --> 00:03:02,560
one of those<font color="#CCCCCC"> two</font><font color="#E5E5E5"> what's nice about</font><font color="#CCCCCC"> Adobe</font>

91
00:03:01,000 --> 00:03:04,269
<font color="#CCCCCC">is this</font><font color="#E5E5E5"> multi-platform so from an</font>

92
00:03:02,560 --> 00:03:05,470
attackers<font color="#CCCCCC"> perspective you can actually</font>

93
00:03:04,269 --> 00:03:07,000
you know<font color="#E5E5E5"> take the bugs that you're</font>

94
00:03:05,470 --> 00:03:08,920
<font color="#E5E5E5">finding and lay them across different</font>

95
00:03:07,000 --> 00:03:10,660
architectures so that's really makes it

96
00:03:08,920 --> 00:03:11,920
an<font color="#CCCCCC"> interesting target</font><font color="#E5E5E5"> to look at and</font>

97
00:03:10,660 --> 00:03:13,299
there's a lot<font color="#E5E5E5"> of old code in there</font>

98
00:03:11,920 --> 00:03:15,280
<font color="#CCCCCC">alright so we'll be talking</font><font color="#E5E5E5"> a lot about</font>

99
00:03:13,299 --> 00:03:16,870
<font color="#E5E5E5">the details</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> the architecture and some</font>

100
00:03:15,280 --> 00:03:18,910
of this<font color="#E5E5E5"> stuff is open source code that's</font>

101
00:03:16,870 --> 00:03:20,350
no longer<font color="#E5E5E5"> maintained some of its you</font>

102
00:03:18,910 --> 00:03:21,970
<font color="#E5E5E5">know stuff they</font><font color="#CCCCCC"> purchased from</font><font color="#E5E5E5"> third</font>

103
00:03:20,350 --> 00:03:23,350
parties<font color="#E5E5E5"> some of</font><font color="#CCCCCC"> its stuff</font><font color="#E5E5E5"> that they just</font>

104
00:03:21,970 --> 00:03:24,370
<font color="#E5E5E5">don't actively maintain very much</font>

105
00:03:23,350 --> 00:03:26,079
because there's not a<font color="#E5E5E5"> lot of feature</font>

106
00:03:24,370 --> 00:03:27,819
change in it<font color="#E5E5E5"> so there's a lot of old</font>

107
00:03:26,079 --> 00:03:29,980
code<font color="#E5E5E5"> in this</font><font color="#CCCCCC"> product that you can go</font>

108
00:03:27,819 --> 00:03:32,018
<font color="#E5E5E5">look at and reach from you know from</font>

109
00:03:29,980 --> 00:03:33,880
<font color="#E5E5E5">basically a PDF document</font><font color="#CCCCCC"> so it</font><font color="#E5E5E5"> makes it</font>

110
00:03:32,019 --> 00:03:35,680
a<font color="#CCCCCC"> fully-featured very rich very juicy</font>

111
00:03:33,880 --> 00:03:36,819
attack surface for people<font color="#E5E5E5"> and we're</font>

112
00:03:35,680 --> 00:03:39,459
seeing<font color="#E5E5E5"> a</font><font color="#CCCCCC"> lot of</font><font color="#E5E5E5"> that come into the</font>

113
00:03:36,819 --> 00:03:40,929
<font color="#E5E5E5">program now</font><font color="#CCCCCC"> so if we look at the</font>

114
00:03:39,459 --> 00:03:42,340
architecture<font color="#CCCCCC"> there's really three</font>

115
00:03:40,930 --> 00:03:44,350
different<font color="#CCCCCC"> components</font><font color="#E5E5E5"> that you kind of</font>

116
00:03:42,340 --> 00:03:47,049
want<font color="#CCCCCC"> to be aware of</font><font color="#E5E5E5"> first is the core</font>

117
00:03:44,350 --> 00:03:48,670
<font color="#E5E5E5">Acrobat DLL or</font><font color="#CCCCCC"> after read 32</font><font color="#E5E5E5"> DLL and</font>

118
00:03:47,049 --> 00:03:50,709
that<font color="#E5E5E5"> and from there you can actually</font>

119
00:03:48,670 --> 00:03:52,238
<font color="#E5E5E5">load in different plugins based on the</font>

120
00:03:50,709 --> 00:03:54,819
<font color="#E5E5E5">functionality that you're trying to</font>

121
00:03:52,239 --> 00:03:56,620
trigger inside of<font color="#E5E5E5"> Adobe Reader or Adobe</font>

122
00:03:54,819 --> 00:03:57,940
Acrobat so you can<font color="#E5E5E5"> look there</font><font color="#CCCCCC"> East</font>

123
00:03:56,620 --> 00:03:59,889
script and a bunch<font color="#E5E5E5"> of different plugins</font>

124
00:03:57,940 --> 00:04:01,329
that<font color="#E5E5E5"> you</font><font color="#CCCCCC"> can pull in and start</font>

125
00:03:59,889 --> 00:04:04,150
activating<font color="#E5E5E5"> stuff and they</font><font color="#CCCCCC"> actually have</font>

126
00:04:01,329 --> 00:04:06,340
access<font color="#E5E5E5"> to</font><font color="#CCCCCC"> these back-end DLLs which you</font>

127
00:04:04,150 --> 00:04:08,170
can then go<font color="#CCCCCC"> and kind</font><font color="#E5E5E5"> of</font><font color="#CCCCCC"> execute a lot of</font>

128
00:04:06,340 --> 00:04:10,690
the<font color="#E5E5E5"> functionality here in the</font><font color="#CCCCCC"> backend of</font>

129
00:04:08,170 --> 00:04:13,089
the of the application and that's where

130
00:04:10,690 --> 00:04:13,930
a<font color="#E5E5E5"> lot of the older code exists right so</font>

131
00:04:13,090 --> 00:04:16,090
that's<font color="#E5E5E5"> where you're gonna want</font>

132
00:04:13,930 --> 00:04:18,970
eventually<font color="#CCCCCC"> want your your pocs your</font>

133
00:04:16,089 --> 00:04:20,039
exploits to<font color="#E5E5E5"> be hitting now you know we</font>

134
00:04:18,970 --> 00:04:21,990
sit there<font color="#CCCCCC"> and we</font>

135
00:04:20,040 --> 00:04:23,460
we kind of look across<font color="#E5E5E5"> the ecosystem and</font>

136
00:04:21,990 --> 00:04:24,780
we're buying vulnerabilities<font color="#E5E5E5"> from lots</font>

137
00:04:23,460 --> 00:04:26,219
of<font color="#E5E5E5"> people from all over the world so we</font>

138
00:04:24,780 --> 00:04:27,840
kind<font color="#E5E5E5"> of get an</font><font color="#CCCCCC"> idea of</font><font color="#E5E5E5"> what's</font><font color="#CCCCCC"> happening</font>

139
00:04:26,220 --> 00:04:30,720
and when things<font color="#E5E5E5"> are becoming hot in</font>

140
00:04:27,840 --> 00:04:33,299
specific<font color="#E5E5E5"> applications and so back</font><font color="#CCCCCC"> both</font>

141
00:04:30,720 --> 00:04:34,380
you know before 2015 you<font color="#E5E5E5"> know Adobe</font>

142
00:04:33,300 --> 00:04:35,660
Reader and<font color="#CCCCCC"> at least</font><font color="#E5E5E5"> in our program</font>

143
00:04:34,380 --> 00:04:38,370
wasn't<font color="#E5E5E5"> receiving a lot of attention</font>

144
00:04:35,660 --> 00:04:40,350
<font color="#CCCCCC">right so we we did some research and</font><font color="#E5E5E5"> we</font>

145
00:04:38,370 --> 00:04:41,820
<font color="#E5E5E5">released some research in 2015 that</font><font color="#CCCCCC"> kind</font>

146
00:04:40,350 --> 00:04:43,410
<font color="#E5E5E5">of spawned some people to actually</font><font color="#CCCCCC"> start</font>

147
00:04:41,820 --> 00:04:45,120
submitting vulnerabilities<font color="#E5E5E5"> in Adobe</font>

148
00:04:43,410 --> 00:04:46,860
Reader<font color="#E5E5E5"> into our program and</font><font color="#CCCCCC"> it's</font><font color="#E5E5E5"> really</font>

149
00:04:45,120 --> 00:04:48,060
blossomed since<font color="#E5E5E5"> then so you can</font><font color="#CCCCCC"> see back</font>

150
00:04:46,860 --> 00:04:49,980
<font color="#CCCCCC">in</font><font color="#E5E5E5"> 2015</font>

151
00:04:48,060 --> 00:04:53,400
what's on what's<font color="#E5E5E5"> depicted on the slide</font>

152
00:04:49,980 --> 00:04:56,340
is<font color="#E5E5E5"> the</font><font color="#CCCCCC"> patched bugs that</font><font color="#E5E5E5"> have</font><font color="#CCCCCC"> come from</font>

153
00:04:53,400 --> 00:04:59,460
<font color="#CCCCCC">zdi</font><font color="#E5E5E5"> in Adobe</font><font color="#CCCCCC"> Reader</font><font color="#E5E5E5"> over the years right</font>

154
00:04:56,340 --> 00:05:01,619
so 2015<font color="#E5E5E5"> less than less than</font><font color="#CCCCCC"> 100 bugs</font><font color="#E5E5E5"> and</font>

155
00:04:59,460 --> 00:05:03,479
here in 2018 almost<font color="#CCCCCC"> two hundred and</font>

156
00:05:01,620 --> 00:05:05,250
<font color="#CCCCCC">fifty zero days</font><font color="#E5E5E5"> that were that were</font>

157
00:05:03,480 --> 00:05:07,590
submitted<font color="#CCCCCC"> and purchased</font><font color="#E5E5E5"> by us and</font>

158
00:05:05,250 --> 00:05:08,880
patched<font color="#E5E5E5"> now you know we kind of look at</font>

159
00:05:07,590 --> 00:05:10,590
<font color="#CCCCCC">those bugs as they're coming</font><font color="#E5E5E5"> in and we</font>

160
00:05:08,880 --> 00:05:12,659
<font color="#E5E5E5">try</font><font color="#CCCCCC"> to like analyze</font><font color="#E5E5E5"> for trends right</font>

161
00:05:10,590 --> 00:05:14,549
<font color="#E5E5E5">that's kind of what what</font><font color="#CCCCCC"> our job is and</font>

162
00:05:12,660 --> 00:05:16,830
<font color="#CCCCCC">so what we want</font><font color="#E5E5E5"> to do is is understand</font>

163
00:05:14,550 --> 00:05:19,170
why the bugs are manifesting in the way

164
00:05:16,830 --> 00:05:22,680
that they are right<font color="#E5E5E5"> and what we noticed</font>

165
00:05:19,170 --> 00:05:24,090
<font color="#E5E5E5">you know in 2017 2018 is that a lot</font><font color="#CCCCCC"> of</font>

166
00:05:22,680 --> 00:05:27,210
the bugs<font color="#CCCCCC"> that we were receiving were</font>

167
00:05:24,090 --> 00:05:28,590
just basic<font color="#CCCCCC"> bypasses for the bugs that</font><font color="#E5E5E5"> we</font>

168
00:05:27,210 --> 00:05:30,719
had<font color="#E5E5E5"> purchased in the previous years</font>

169
00:05:28,590 --> 00:05:32,369
<font color="#E5E5E5">right so you know like we're paying</font>

170
00:05:30,720 --> 00:05:35,280
twice now for<font color="#E5E5E5"> these bugs like what the</font>

171
00:05:32,370 --> 00:05:36,870
heck's going<font color="#E5E5E5"> on and so you know we</font>

172
00:05:35,280 --> 00:05:38,280
wanted to<font color="#E5E5E5"> kind of analyze</font><font color="#CCCCCC"> that a little</font>

173
00:05:36,870 --> 00:05:40,050
bit more and we continue<font color="#CCCCCC"> to watch this</font>

174
00:05:38,280 --> 00:05:41,609
trend happen<font color="#CCCCCC"> and that's why we're</font>

175
00:05:40,050 --> 00:05:45,210
talking<font color="#E5E5E5"> here today we want to show you</font>

176
00:05:41,610 --> 00:05:47,010
the<font color="#CCCCCC"> actual code the actual fixes and and</font>

177
00:05:45,210 --> 00:05:48,359
the proof of concepts and<font color="#E5E5E5"> the bypasses</font>

178
00:05:47,010 --> 00:05:50,099
for<font color="#E5E5E5"> this proof of concept so</font><font color="#CCCCCC"> that you</font>

179
00:05:48,360 --> 00:05:52,080
can understand<font color="#E5E5E5"> and look at those bugs</font>

180
00:05:50,100 --> 00:05:53,730
yourself<font color="#E5E5E5"> generate proof of concepts and</font>

181
00:05:52,080 --> 00:05:55,950
<font color="#CCCCCC">maybe find your own bugs based off of</font>

182
00:05:53,730 --> 00:05:57,540
bugs<font color="#E5E5E5"> that</font><font color="#CCCCCC"> are previously</font><font color="#E5E5E5"> patched</font><font color="#CCCCCC"> now</font>

183
00:05:55,950 --> 00:06:00,450
we're<font color="#E5E5E5"> not the only</font><font color="#CCCCCC"> ones who noticed this</font>

184
00:05:57,540 --> 00:06:01,800
in fact<font color="#E5E5E5"> you know this is a some</font>

185
00:06:00,450 --> 00:06:04,170
conversation that was<font color="#E5E5E5"> happening around</font>

186
00:06:01,800 --> 00:06:06,810
the time<font color="#CCCCCC"> that the hacking team</font><font color="#E5E5E5"> breach</font>

187
00:06:04,170 --> 00:06:09,780
occurred<font color="#E5E5E5"> with Vitaly to work off talking</font>

188
00:06:06,810 --> 00:06:11,310
to<font color="#CCCCCC"> and I</font><font color="#E5E5E5"> quote it says Adobe analysts</font>

189
00:06:09,780 --> 00:06:13,979
are awful and they're unable<font color="#E5E5E5"> to</font>

190
00:06:11,310 --> 00:06:16,200
extrapolate<font color="#E5E5E5"> right and you know basically</font>

191
00:06:13,980 --> 00:06:17,220
what<font color="#E5E5E5"> he's</font><font color="#CCCCCC"> saying is that when they get</font><font color="#E5E5E5"> a</font>

192
00:06:16,200 --> 00:06:19,320
patch they're not actually looking

193
00:06:17,220 --> 00:06:21,720
<font color="#E5E5E5">beyond the patch itself</font><font color="#CCCCCC"> right as a</font>

194
00:06:19,320 --> 00:06:23,460
security<font color="#CCCCCC"> researcher or security analyst</font>

195
00:06:21,720 --> 00:06:25,320
you want<font color="#CCCCCC"> to you know you hope that the</font>

196
00:06:23,460 --> 00:06:26,580
researcher takes your bug<font color="#E5E5E5"> and they and</font>

197
00:06:25,320 --> 00:06:28,740
they look at<font color="#E5E5E5"> it and they apply it across</font>

198
00:06:26,580 --> 00:06:29,849
<font color="#E5E5E5">the entire software</font><font color="#CCCCCC"> try to fix</font><font color="#E5E5E5"> a lot of</font>

199
00:06:28,740 --> 00:06:31,530
bugs especially<font color="#CCCCCC"> if you're on the white</font>

200
00:06:29,850 --> 00:06:33,880
hat side of the market<font color="#E5E5E5"> that's what you</font>

201
00:06:31,530 --> 00:06:35,590
want to<font color="#CCCCCC"> happen but in this case even</font><font color="#E5E5E5"> not</font>

202
00:06:33,880 --> 00:06:38,110
most of the industry is now starting to

203
00:06:35,590 --> 00:06:39,429
<font color="#E5E5E5">notice that that</font><font color="#CCCCCC"> they're</font><font color="#E5E5E5"> missing bugs</font>

204
00:06:38,110 --> 00:06:40,990
and I know Jaisal had a story here where

205
00:06:39,430 --> 00:06:43,420
you wanted<font color="#E5E5E5"> to talk</font><font color="#CCCCCC"> about</font><font color="#E5E5E5"> you know an</font>

206
00:06:40,990 --> 00:06:46,200
experience that like this so around the

207
00:06:43,420 --> 00:06:48,880
<font color="#E5E5E5">same time it was either 2015 maybe 2016</font>

208
00:06:46,200 --> 00:06:53,830
<font color="#E5E5E5">there was a vulnerability</font><font color="#CCCCCC"> that project 0</font>

209
00:06:48,880 --> 00:06:55,719
have reported in<font color="#CCCCCC"> jpeg2000 parsing</font><font color="#E5E5E5"> and it</font>

210
00:06:53,830 --> 00:06:57,880
was a stack buffer overflow<font color="#CCCCCC"> and there's</font>

211
00:06:55,720 --> 00:07:00,310
an if/else clause in the if<font color="#E5E5E5"> clause it</font>

212
00:06:57,880 --> 00:07:02,920
went true<font color="#CCCCCC"> there was potential stack</font>

213
00:07:00,310 --> 00:07:04,690
buffer overflow<font color="#E5E5E5"> Adobe</font><font color="#CCCCCC"> patch it and $0.10</font>

214
00:07:02,920 --> 00:07:07,600
looked at it<font color="#E5E5E5"> and ended up taking</font>

215
00:07:04,690 --> 00:07:09,790
<font color="#CCCCCC">advantage of</font><font color="#E5E5E5"> another bug that's right</font>

216
00:07:07,600 --> 00:07:12,310
<font color="#E5E5E5">next to it and use it and put it on and</font>

217
00:07:09,790 --> 00:07:14,140
the kind of<font color="#E5E5E5"> funny but really</font><font color="#CCCCCC"> just sad</font>

218
00:07:12,310 --> 00:07:18,010
thing<font color="#CCCCCC"> is it was in the else clause</font>

219
00:07:14,140 --> 00:07:20,080
almost the exact same<font color="#CCCCCC"> glue they fix</font><font color="#E5E5E5"> it</font>

220
00:07:18,010 --> 00:07:22,830
in<font color="#CCCCCC"> the branch but not the else branch</font>

221
00:07:20,080 --> 00:07:25,630
<font color="#CCCCCC">and that's just a great</font><font color="#E5E5E5"> example of how</font>

222
00:07:22,830 --> 00:07:28,479
how they very much<font color="#E5E5E5"> focus on breaking the</font>

223
00:07:25,630 --> 00:07:32,260
crasher<font color="#E5E5E5"> and not really looking any</font>

224
00:07:28,480 --> 00:07:33,880
further<font color="#CCCCCC"> than that</font><font color="#E5E5E5"> yep so we're gonna go</font>

225
00:07:32,260 --> 00:07:35,380
<font color="#E5E5E5">over a set of failures right we're gonna</font>

226
00:07:33,880 --> 00:07:36,820
be<font color="#E5E5E5"> looking at</font><font color="#CCCCCC"> JavaScript we're gonna be</font>

227
00:07:35,380 --> 00:07:38,350
looking<font color="#CCCCCC"> at XSLT we're gonna be looking</font>

228
00:07:36,820 --> 00:07:39,909
<font color="#CCCCCC">at indexing</font><font color="#E5E5E5"> and we're gonna be looking</font>

229
00:07:38,350 --> 00:07:41,500
<font color="#CCCCCC">at file parsing inside of Adobe Reader</font>

230
00:07:39,910 --> 00:07:42,760
<font color="#E5E5E5">and the way that these sections work is</font>

231
00:07:41,500 --> 00:07:44,320
we're gonna give you<font color="#CCCCCC"> a little</font><font color="#E5E5E5"> bit of</font>

232
00:07:42,760 --> 00:07:45,940
overview<font color="#E5E5E5"> of what is actually happening</font>

233
00:07:44,320 --> 00:07:47,230
<font color="#CCCCCC">and</font><font color="#E5E5E5"> then in</font><font color="#CCCCCC"> that attack</font><font color="#E5E5E5"> surface how you</font>

234
00:07:45,940 --> 00:07:48,969
would go<font color="#E5E5E5"> about hitting it what a proof</font>

235
00:07:47,230 --> 00:07:50,350
<font color="#E5E5E5">of concept looks like we'll talk about</font>

236
00:07:48,970 --> 00:07:51,730
the vulnerability in question that we're

237
00:07:50,350 --> 00:07:53,200
looking<font color="#E5E5E5"> at and we'll talk about how</font><font color="#CCCCCC"> it</font>

238
00:07:51,730 --> 00:07:55,120
was triggered<font color="#E5E5E5"> we'll talk about how</font>

239
00:07:53,200 --> 00:07:57,760
exactly<font color="#CCCCCC"> they patched</font><font color="#E5E5E5"> it the first time</font>

240
00:07:55,120 --> 00:08:00,100
<font color="#CCCCCC">then we'll</font><font color="#E5E5E5"> talk</font><font color="#CCCCCC"> about</font><font color="#E5E5E5"> how easy it was to</font>

241
00:07:57,760 --> 00:08:01,020
bypass<font color="#E5E5E5"> and how fast that happened</font><font color="#CCCCCC"> and</font>

242
00:08:00,100 --> 00:08:05,560
then we'll talk about<font color="#E5E5E5"> how they actually</font>

243
00:08:01,020 --> 00:08:08,620
<font color="#CCCCCC">fixed</font><font color="#E5E5E5"> the core issue so when we look at</font>

244
00:08:05,560 --> 00:08:10,390
<font color="#CCCCCC">javascript api these are the components</font>

245
00:08:08,620 --> 00:08:13,240
<font color="#CCCCCC">in the architecture that</font><font color="#E5E5E5"> she can hit so</font>

246
00:08:10,390 --> 00:08:14,800
from<font color="#E5E5E5"> a</font><font color="#CCCCCC"> curried</font><font color="#E5E5E5"> 32</font><font color="#CCCCCC"> from the core</font>

247
00:08:13,240 --> 00:08:17,230
effectively you<font color="#CCCCCC"> can actually</font><font color="#E5E5E5"> force the</font>

248
00:08:14,800 --> 00:08:18,430
<font color="#E5E5E5">loading of the east</font><font color="#CCCCCC"> grab</font><font color="#E5E5E5"> plugin and from</font>

249
00:08:17,230 --> 00:08:20,440
the<font color="#E5E5E5"> east script plugin you can reach</font>

250
00:08:18,430 --> 00:08:22,540
<font color="#E5E5E5">basically every sub component in the</font>

251
00:08:20,440 --> 00:08:24,730
<font color="#CCCCCC">backend that you want to reach right</font><font color="#E5E5E5"> so</font>

252
00:08:22,540 --> 00:08:26,110
it's a very powerful way of<font color="#E5E5E5"> accessing a</font>

253
00:08:24,730 --> 00:08:29,920
lot of the old code that's in the back

254
00:08:26,110 --> 00:08:31,390
there<font color="#CCCCCC"> XSL se being the XSLT engine you</font>

255
00:08:29,920 --> 00:08:33,070
know<font color="#CCCCCC"> JPEG parsing a bunch</font><font color="#E5E5E5"> of different</font>

256
00:08:31,390 --> 00:08:34,929
stuff<font color="#CCCCCC"> that you can reach</font><font color="#E5E5E5"> from</font><font color="#CCCCCC"> JavaScript</font>

257
00:08:33,070 --> 00:08:37,479
<font color="#E5E5E5">which makes it a</font><font color="#CCCCCC"> very interesting place</font>

258
00:08:34,929 --> 00:08:40,959
to<font color="#E5E5E5"> start if you're gonna attack Adobe</font>

259
00:08:37,479 --> 00:08:42,250
Reader Adobe Acrobat<font color="#E5E5E5"> now obviously you</font>

260
00:08:40,960 --> 00:08:44,530
know everybody if you haven't been<font color="#E5E5E5"> in</font>

261
00:08:42,250 --> 00:08:47,290
<font color="#E5E5E5">computing for you know basically five</font>

262
00:08:44,530 --> 00:08:48,819
minutes you'll know<font color="#CCCCCC"> about</font><font color="#E5E5E5"> JavaScript</font>

263
00:08:47,290 --> 00:08:51,160
and what's interesting about<font color="#CCCCCC"> adobe's is</font>

264
00:08:48,820 --> 00:08:52,480
they have a bunch<font color="#E5E5E5"> of JavaScript</font><font color="#CCCCCC"> API is</font>

265
00:08:51,160 --> 00:08:55,300
that<font color="#E5E5E5"> they've developed specifically for</font>

266
00:08:52,480 --> 00:08:57,730
manipulating the actual<font color="#CCCCCC"> PDF itself and</font>

267
00:08:55,300 --> 00:08:59,740
<font color="#E5E5E5">making it an</font><font color="#CCCCCC"> interactive things related</font>

268
00:08:57,730 --> 00:09:01,990
to forms<font color="#CCCCCC"> javascript api is</font><font color="#E5E5E5"> for forms</font>

269
00:08:59,740 --> 00:09:04,840
annotations collaborations etc like that

270
00:09:01,990 --> 00:09:07,450
document is like<font color="#E5E5E5"> 300 pages long right so</font>

271
00:09:04,840 --> 00:09:08,650
there's a lot<font color="#E5E5E5"> of documentation</font><font color="#CCCCCC"> and a lot</font>

272
00:09:07,450 --> 00:09:10,600
<font color="#CCCCCC">of stuff going on there for you to</font>

273
00:09:08,650 --> 00:09:12,069
<font color="#CCCCCC">interact with now the JavaScript engine</font>

274
00:09:10,600 --> 00:09:13,270
<font color="#E5E5E5">itself is actually</font><font color="#CCCCCC"> a spin of</font><font color="#E5E5E5"> spider</font>

275
00:09:12,070 --> 00:09:15,580
<font color="#E5E5E5">monkey so if you've</font><font color="#CCCCCC"> been</font><font color="#E5E5E5"> looking at that</font>

276
00:09:13,270 --> 00:09:18,490
<font color="#CCCCCC">engine that's what it is</font><font color="#E5E5E5"> that's</font><font color="#CCCCCC"> all</font>

277
00:09:15,580 --> 00:09:19,990
contain an e<font color="#CCCCCC"> script</font><font color="#E5E5E5"> API and a lot</font><font color="#CCCCCC"> of the</font>

278
00:09:18,490 --> 00:09:21,610
documentation<font color="#E5E5E5"> though there is a lot</font><font color="#CCCCCC"> of</font>

279
00:09:19,990 --> 00:09:23,290
<font color="#CCCCCC">documentation it's actually</font><font color="#E5E5E5"> not</font><font color="#CCCCCC"> all of</font>

280
00:09:21,610 --> 00:09:25,720
the<font color="#E5E5E5"> features of the JavaScript engine</font>

281
00:09:23,290 --> 00:09:27,430
are actually<font color="#E5E5E5"> documented and so a lot</font><font color="#CCCCCC"> of</font>

282
00:09:25,720 --> 00:09:28,510
them are undocumented<font color="#CCCCCC"> and you can</font>

283
00:09:27,430 --> 00:09:29,439
actually use<font color="#CCCCCC"> some of the stuff that</font>

284
00:09:28,510 --> 00:09:32,020
we've talked about<font color="#E5E5E5"> in other</font>

285
00:09:29,440 --> 00:09:34,150
presentations related<font color="#E5E5E5"> to</font><font color="#CCCCCC"> adobe reader</font><font color="#E5E5E5"> to</font>

286
00:09:32,020 --> 00:09:35,650
actually find<font color="#E5E5E5"> all of the undocumented</font>

287
00:09:34,150 --> 00:09:37,990
api's and some of the bugs<font color="#E5E5E5"> that you're</font>

288
00:09:35,650 --> 00:09:39,340
going to<font color="#E5E5E5"> be able uncover or in places</font>

289
00:09:37,990 --> 00:09:40,990
that<font color="#E5E5E5"> you</font><font color="#CCCCCC"> know people</font><font color="#E5E5E5"> didn't know</font>

290
00:09:39,340 --> 00:09:42,160
actually<font color="#CCCCCC"> existed</font><font color="#E5E5E5"> right so there's</font>

291
00:09:40,990 --> 00:09:44,170
there's an<font color="#E5E5E5"> example of collaboration</font>

292
00:09:42,160 --> 00:09:47,110
<font color="#E5E5E5">where the documentation</font><font color="#CCCCCC"> says there's</font>

293
00:09:44,170 --> 00:09:50,110
<font color="#E5E5E5">three</font><font color="#CCCCCC"> api's off of that object but in</font>

294
00:09:47,110 --> 00:09:52,210
reality there's like 130 right<font color="#E5E5E5"> so at one</font>

295
00:09:50,110 --> 00:09:54,010
<font color="#CCCCCC">point there was</font><font color="#E5E5E5"> and some of the api's</font>

296
00:09:52,210 --> 00:09:56,110
are<font color="#E5E5E5"> only</font><font color="#CCCCCC"> available</font><font color="#E5E5E5"> for the standard or</font>

297
00:09:54,010 --> 00:09:56,890
professional versions of the product<font color="#CCCCCC"> so</font>

298
00:09:56,110 --> 00:09:58,390
obviously if you're<font color="#E5E5E5"> going to be</font>

299
00:09:56,890 --> 00:09:59,410
<font color="#E5E5E5">targeting somebody you're gonna you're</font>

300
00:09:58,390 --> 00:10:01,449
going to want to<font color="#E5E5E5"> know what the what</font>

301
00:09:59,410 --> 00:10:04,870
they're using<font color="#CCCCCC"> and so it</font><font color="#E5E5E5"> gives you an</font>

302
00:10:01,450 --> 00:10:07,570
<font color="#E5E5E5">idea of what's available to attack now</font>

303
00:10:04,870 --> 00:10:08,770
Adobe's JavaScript runs in two contexts

304
00:10:07,570 --> 00:10:10,600
<font color="#E5E5E5">and a</font><font color="#CCCCCC"> duel is going to describe</font><font color="#E5E5E5"> a little</font>

305
00:10:08,770 --> 00:10:14,319
<font color="#E5E5E5">bit about what those what those contexts</font>

306
00:10:10,600 --> 00:10:16,810
mean so<font color="#CCCCCC"> the JavaScript API there's two</font>

307
00:10:14,320 --> 00:10:18,640
<font color="#CCCCCC">context privilege and non privilege so</font>

308
00:10:16,810 --> 00:10:20,739
if you<font color="#E5E5E5"> guys go to the API reference that</font>

309
00:10:18,640 --> 00:10:23,620
Adobe provided you would notice that

310
00:10:20,740 --> 00:10:25,870
<font color="#E5E5E5">there's a an ass like</font><font color="#CCCCCC"> red ass next</font><font color="#E5E5E5"> to</font>

311
00:10:23,620 --> 00:10:28,450
certain<font color="#E5E5E5"> api's and these api's are</font>

312
00:10:25,870 --> 00:10:30,580
considered restricted or privileged the

313
00:10:28,450 --> 00:10:32,980
non privilege APR executed from normal

314
00:10:30,580 --> 00:10:35,170
document<font color="#E5E5E5"> privileges so if you open</font><font color="#CCCCCC"> a PDF</font>

315
00:10:32,980 --> 00:10:38,290
<font color="#E5E5E5">you can execute this API has no problem</font>

316
00:10:35,170 --> 00:10:40,599
and all these API<font color="#E5E5E5"> eyes have been really</font>

317
00:10:38,290 --> 00:10:42,339
hardly audited and looked at so most of

318
00:10:40,600 --> 00:10:45,850
<font color="#CCCCCC">the on</font><font color="#E5E5E5"> most of the bugs that</font><font color="#CCCCCC"> you guys</font>

319
00:10:42,340 --> 00:10:47,710
have seen in public<font color="#E5E5E5"> are definitely bugs</font>

320
00:10:45,850 --> 00:10:51,040
<font color="#E5E5E5">targeting these nonprofits</font><font color="#CCCCCC"> api is</font>

321
00:10:47,710 --> 00:10:54,940
nevertheless the<font color="#CCCCCC"> privilege API is can be</font>

322
00:10:51,040 --> 00:10:57,130
secured<font color="#CCCCCC"> to from inside a doc context</font><font color="#E5E5E5"> if</font>

323
00:10:54,940 --> 00:10:58,960
they're inside<font color="#E5E5E5"> a trusted function</font>

324
00:10:57,130 --> 00:11:00,640
and they're<font color="#CCCCCC"> being grabbed in a block</font>

325
00:10:58,960 --> 00:11:04,030
like<font color="#E5E5E5"> a begin proof block an</font><font color="#CCCCCC"> emperor</font>

326
00:11:00,640 --> 00:11:05,920
block these api's have not been properly

327
00:11:04,030 --> 00:11:08,890
audited<font color="#E5E5E5"> and have not been looked at for</font>

328
00:11:05,920 --> 00:11:10,839
<font color="#CCCCCC">the one reason is that</font><font color="#E5E5E5"> basically it's</font>

329
00:11:08,890 --> 00:11:12,910
<font color="#E5E5E5">really hard to hit them</font><font color="#CCCCCC"> and it would</font>

330
00:11:10,840 --> 00:11:15,640
<font color="#CCCCCC">actually require you and the</font><font color="#E5E5E5"> privileged</font>

331
00:11:12,910 --> 00:11:17,050
<font color="#E5E5E5">API bypass in order to so you</font><font color="#CCCCCC"> basically</font>

332
00:11:15,640 --> 00:11:19,689
<font color="#E5E5E5">have to chain multiple works together to</font>

333
00:11:17,050 --> 00:11:21,550
<font color="#E5E5E5">hit them</font><font color="#CCCCCC"> that's basically all I have</font><font color="#E5E5E5"> to</font>

334
00:11:19,690 --> 00:11:22,960
say<font color="#CCCCCC"> I'm dislike yeah</font><font color="#E5E5E5"> and we do believe</font>

335
00:11:21,550 --> 00:11:24,550
<font color="#E5E5E5">there there's quite a few like use after</font>

336
00:11:22,960 --> 00:11:26,020
freeze and things back<font color="#CCCCCC"> in those and from</font>

337
00:11:24,550 --> 00:11:29,380
<font color="#E5E5E5">those privileged API so if you can</font>

338
00:11:26,020 --> 00:11:31,360
figure out how<font color="#E5E5E5"> to do the JavaScript API</font>

339
00:11:29,380 --> 00:11:32,770
restriction bypasses you can hit<font color="#E5E5E5"> a lot</font>

340
00:11:31,360 --> 00:11:34,840
<font color="#E5E5E5">of those bugs and those are very</font>

341
00:11:32,770 --> 00:11:37,930
<font color="#E5E5E5">valuable now in fact there there was a</font>

342
00:11:34,840 --> 00:11:41,500
bug<font color="#CCCCCC"> that I found in JPI which</font><font color="#E5E5E5"> is very</font>

343
00:11:37,930 --> 00:11:44,380
simple<font color="#E5E5E5"> it's it's called</font><font color="#CCCCCC"> launch URL guy</font>

344
00:11:41,500 --> 00:11:46,750
and basically on<font color="#E5E5E5"> the Mac OS version of</font>

345
00:11:44,380 --> 00:11:49,810
Acrobat<font color="#E5E5E5"> it was vulnerable to command</font>

346
00:11:46,750 --> 00:11:51,400
injection so basically<font color="#E5E5E5"> forgive it of an</font>

347
00:11:49,810 --> 00:11:53,170
actual binary on disk<font color="#E5E5E5"> and it's gonna</font>

348
00:11:51,400 --> 00:11:54,490
execute it<font color="#E5E5E5"> so that's how much it has it</font>

349
00:11:53,170 --> 00:11:58,510
hasn't been<font color="#E5E5E5"> audited no one</font><font color="#CCCCCC"> tossed</font><font color="#E5E5E5"> it</font>

350
00:11:54,490 --> 00:11:59,350
before<font color="#CCCCCC"> all</font><font color="#E5E5E5"> right so the first</font><font color="#CCCCCC"> place</font>

351
00:11:58,510 --> 00:12:01,270
we're<font color="#E5E5E5"> gonna look a little bit is</font>

352
00:11:59,350 --> 00:12:03,160
annotations right so annotations are

353
00:12:01,270 --> 00:12:05,980
used to create interactive forms of

354
00:12:03,160 --> 00:12:08,199
<font color="#CCCCCC">multimedia for inside the the PDF</font><font color="#E5E5E5"> itself</font>

355
00:12:05,980 --> 00:12:10,480
<font color="#CCCCCC">and the API is are</font><font color="#E5E5E5"> relatively simple you</font>

356
00:12:08,200 --> 00:12:12,790
can see just<font color="#E5E5E5"> add and not or get a not or</font>

357
00:12:10,480 --> 00:12:14,710
get a not you know there's<font color="#E5E5E5"> different API</font>

358
00:12:12,790 --> 00:12:16,480
<font color="#E5E5E5">is that are available basically allowing</font>

359
00:12:14,710 --> 00:12:18,010
you to<font color="#E5E5E5"> create that interactive PDF that</font>

360
00:12:16,480 --> 00:12:20,740
<font color="#E5E5E5">you want to have right that's the whole</font>

361
00:12:18,010 --> 00:12:22,180
point<font color="#E5E5E5"> of the PDF but when we took a look</font>

362
00:12:20,740 --> 00:12:23,950
<font color="#E5E5E5">at this attack surface one of the things</font>

363
00:12:22,180 --> 00:12:26,680
that we one<font color="#CCCCCC"> of the kind of</font><font color="#E5E5E5"> earliest</font>

364
00:12:23,950 --> 00:12:30,070
<font color="#E5E5E5">veins of gold</font><font color="#CCCCCC"> that we found in Adobe</font>

365
00:12:26,680 --> 00:12:32,500
<font color="#CCCCCC">Reader was basically finding ways to</font>

366
00:12:30,070 --> 00:12:34,090
<font color="#E5E5E5">force the document object to be freed</font>

367
00:12:32,500 --> 00:12:36,580
<font color="#E5E5E5">and</font><font color="#CCCCCC"> the first way we figured out how</font><font color="#E5E5E5"> to</font>

368
00:12:34,090 --> 00:12:38,980
do<font color="#E5E5E5"> that was using closed</font><font color="#CCCCCC"> dock</font><font color="#E5E5E5"> right</font>

369
00:12:36,580 --> 00:12:42,670
<font color="#E5E5E5">close dock API right so the proof of</font>

370
00:12:38,980 --> 00:12:44,500
concept here<font color="#CCCCCC"> CVE 2016</font><font color="#E5E5E5"> 0 9 3</font><font color="#CCCCCC"> 1 is a bug</font>

371
00:12:42,670 --> 00:12:47,620
that<font color="#CCCCCC"> i found when we were</font><font color="#E5E5E5"> doing an audit</font>

372
00:12:44,500 --> 00:12:48,970
<font color="#E5E5E5">of of this and we had discovered that in</font>

373
00:12:47,620 --> 00:12:50,920
in this<font color="#E5E5E5"> case the structure of the proof</font>

374
00:12:48,970 --> 00:12:52,840
of concept is you define<font color="#E5E5E5"> an array you</font>

375
00:12:50,920 --> 00:12:54,610
define a getter off of the array<font color="#E5E5E5"> for</font><font color="#CCCCCC"> the</font>

376
00:12:52,840 --> 00:12:56,410
first<font color="#CCCCCC"> element in the</font><font color="#E5E5E5"> array</font><font color="#CCCCCC"> and in that</font>

377
00:12:54,610 --> 00:12:57,790
<font color="#E5E5E5">Ella in the getter handler it's you</font>

378
00:12:56,410 --> 00:12:59,530
basically just<font color="#E5E5E5"> close the doc and then</font>

379
00:12:57,790 --> 00:13:00,819
basically any API<font color="#E5E5E5"> that you call later</font>

380
00:12:59,530 --> 00:13:02,740
when<font color="#E5E5E5"> it handles the getter it's gonna</font>

381
00:13:00,820 --> 00:13:04,210
remove the<font color="#CCCCCC"> document object and force to</font>

382
00:13:02,740 --> 00:13:05,650
use after free condition<font color="#CCCCCC"> right so this</font>

383
00:13:04,210 --> 00:13:07,180
<font color="#E5E5E5">is the simple proof of concept</font><font color="#CCCCCC"> that we</font>

384
00:13:05,650 --> 00:13:08,380
developed back then and it<font color="#E5E5E5"> was so</font>

385
00:13:07,180 --> 00:13:10,540
effective<font color="#CCCCCC"> that I remember we were</font>

386
00:13:08,380 --> 00:13:12,160
sitting<font color="#E5E5E5"> at recon we had figured this out</font>

387
00:13:10,540 --> 00:13:14,589
and we were literally<font color="#E5E5E5"> sitting in the</font>

388
00:13:12,160 --> 00:13:16,930
conference<font color="#CCCCCC"> room there recon going line</font>

389
00:13:14,590 --> 00:13:18,940
by<font color="#CCCCCC"> line through the API document and we</font>

390
00:13:16,930 --> 00:13:20,140
<font color="#E5E5E5">undiscovered like dozens and dozens of</font>

391
00:13:18,940 --> 00:13:22,600
bugs<font color="#E5E5E5"> just sitting there at the</font>

392
00:13:20,140 --> 00:13:24,490
<font color="#CCCCCC">conference using this technique and</font>

393
00:13:22,600 --> 00:13:25,930
<font color="#E5E5E5">guess not even like fuzzing we just</font>

394
00:13:24,490 --> 00:13:27,610
taken the document<font color="#E5E5E5"> and going through it</font>

395
00:13:25,930 --> 00:13:29,890
<font color="#CCCCCC">so</font><font color="#E5E5E5"> I said</font><font color="#CCCCCC"> okay</font><font color="#E5E5E5"> well we're gonna we're</font>

396
00:13:27,610 --> 00:13:32,530
gonna go fix this issue with Adobe so we

397
00:13:29,890 --> 00:13:35,199
disclosed all those bugs to Adobe<font color="#E5E5E5"> and</font>

398
00:13:32,530 --> 00:13:36,730
they fix the bugs<font color="#E5E5E5"> and we can we kind of</font>

399
00:13:35,200 --> 00:13:37,960
you<font color="#E5E5E5"> know said okay well that's that</font>

400
00:13:36,730 --> 00:13:39,430
right we're gonna move on we're gonna

401
00:13:37,960 --> 00:13:40,900
find<font color="#E5E5E5"> something else</font><font color="#CCCCCC"> and we decided</font><font color="#E5E5E5"> let's</font>

402
00:13:39,430 --> 00:13:42,280
take a closer<font color="#CCCCCC"> look at</font><font color="#E5E5E5"> finding other ways</font>

403
00:13:40,900 --> 00:13:45,670
<font color="#E5E5E5">where we</font><font color="#CCCCCC"> can close</font><font color="#E5E5E5"> a document and this</font>

404
00:13:42,280 --> 00:13:48,490
is what we came up<font color="#CCCCCC"> with right</font><font color="#E5E5E5"> literally</font>

405
00:13:45,670 --> 00:13:51,069
<font color="#CCCCCC">the same exact thing except just with a</font>

406
00:13:48,490 --> 00:13:52,690
different<font color="#CCCCCC"> way of closing</font><font color="#E5E5E5"> the document so</font>

407
00:13:51,070 --> 00:13:54,310
very highly effective

408
00:13:52,690 --> 00:13:55,840
we found<font color="#E5E5E5"> that like literally a</font><font color="#CCCCCC"> couple</font>

409
00:13:54,310 --> 00:13:57,219
days after the<font color="#CCCCCC"> patch or now</font><font color="#E5E5E5"> and again we</font>

410
00:13:55,840 --> 00:13:59,740
<font color="#E5E5E5">went line by line</font><font color="#CCCCCC"> through the API</font>

411
00:13:57,220 --> 00:14:01,780
document ripping it apart<font color="#E5E5E5"> and finding</font>

412
00:13:59,740 --> 00:14:03,130
tons and<font color="#E5E5E5"> tons and tons of bugs just</font>

413
00:14:01,780 --> 00:14:04,959
looking for different<font color="#E5E5E5"> ways of closing</font>

414
00:14:03,130 --> 00:14:06,370
<font color="#E5E5E5">the document right so you think</font><font color="#CCCCCC"> that</font>

415
00:14:04,960 --> 00:14:08,050
they would<font color="#CCCCCC"> have you know try to take a</font>

416
00:14:06,370 --> 00:14:09,520
little<font color="#E5E5E5"> bit deeper approach just not like</font>

417
00:14:08,050 --> 00:14:11,439
looking<font color="#E5E5E5"> at the</font><font color="#CCCCCC"> proof-of-concept</font><font color="#E5E5E5"> itself</font>

418
00:14:09,520 --> 00:14:13,150
and trying to stop<font color="#CCCCCC"> that</font><font color="#E5E5E5"> but trying to</font>

419
00:14:11,440 --> 00:14:16,780
<font color="#E5E5E5">figure</font><font color="#CCCCCC"> out the core of</font><font color="#E5E5E5"> the issue itself</font>

420
00:14:13,150 --> 00:14:18,280
<font color="#CCCCCC">now the way we're gonna</font><font color="#E5E5E5"> look at like the</font>

421
00:14:16,780 --> 00:14:21,010
real bugs that<font color="#CCCCCC"> we're gonna analyze</font><font color="#E5E5E5"> here</font>

422
00:14:18,280 --> 00:14:23,620
the first bug is this is an<font color="#CCCCCC"> ocg set</font>

423
00:14:21,010 --> 00:14:25,930
intent<font color="#CCCCCC"> heat-based</font><font color="#E5E5E5"> buffer overflow</font><font color="#CCCCCC"> but</font>

424
00:14:23,620 --> 00:14:29,380
the original<font color="#CCCCCC"> bug was tooth the CVE 2018</font>

425
00:14:25,930 --> 00:14:36,729
<font color="#CCCCCC">4910</font><font color="#E5E5E5"> and it was ultimately fixed in</font><font color="#CCCCCC"> CVE</font>

426
00:14:29,380 --> 00:14:39,160
<font color="#CCCCCC">2000 1849</font><font color="#E5E5E5"> 62 right so what is</font><font color="#CCCCCC"> ocg so ocg</font>

427
00:14:36,730 --> 00:14:40,540
is optional<font color="#CCCCCC"> content groups</font><font color="#E5E5E5"> and so when</font>

428
00:14:39,160 --> 00:14:42,400
you want<font color="#E5E5E5"> to have an inner if you think</font>

429
00:14:40,540 --> 00:14:43,959
about<font color="#E5E5E5"> like a CAD drawing</font><font color="#CCCCCC"> and it's got</font>

430
00:14:42,400 --> 00:14:46,300
<font color="#CCCCCC">different layers to show different</font>

431
00:14:43,960 --> 00:14:48,820
<font color="#CCCCCC">things</font><font color="#E5E5E5"> that's effectively what</font><font color="#CCCCCC"> ocg is</font>

432
00:14:46,300 --> 00:14:50,560
for Adobe<font color="#E5E5E5"> it controls the visibility of</font>

433
00:14:48,820 --> 00:14:52,540
page<font color="#E5E5E5"> content so if you have one I want</font>

434
00:14:50,560 --> 00:14:54,400
to have a multi-language<font color="#E5E5E5"> document you</font>

435
00:14:52,540 --> 00:14:56,709
<font color="#E5E5E5">can have a page or a layer</font><font color="#CCCCCC"> that's</font>

436
00:14:54,400 --> 00:14:58,569
<font color="#E5E5E5">English</font><font color="#CCCCCC"> and a layer that's</font><font color="#E5E5E5"> German</font><font color="#CCCCCC"> all</font>

437
00:14:56,710 --> 00:15:00,370
<font color="#CCCCCC">right</font><font color="#E5E5E5"> and so you can toggle this on and</font>

438
00:14:58,570 --> 00:15:02,140
<font color="#E5E5E5">off with flags and it's all you can all</font>

439
00:15:00,370 --> 00:15:04,030
do it from<font color="#CCCCCC"> JavaScript so there's a nice</font>

440
00:15:02,140 --> 00:15:05,050
set of<font color="#CCCCCC"> api's that are available</font><font color="#E5E5E5"> to you</font>

441
00:15:04,030 --> 00:15:07,569
and the one that<font color="#E5E5E5"> we're</font><font color="#CCCCCC"> looking at</font>

442
00:15:05,050 --> 00:15:10,390
specifically here is set intent<font color="#CCCCCC"> all</font>

443
00:15:07,570 --> 00:15:13,060
<font color="#CCCCCC">right so set intent is supposed to set</font>

444
00:15:10,390 --> 00:15:15,010
the intent array for an<font color="#E5E5E5"> OC g40 CG</font>

445
00:15:13,060 --> 00:15:19,689
objects and it<font color="#CCCCCC"> basically takes an array</font>

446
00:15:15,010 --> 00:15:22,480
<font color="#E5E5E5">right so if we look</font><font color="#CCCCCC"> at</font><font color="#E5E5E5"> the core bug it's</font>

447
00:15:19,690 --> 00:15:23,820
the classic<font color="#E5E5E5"> integer overflow leading to</font>

448
00:15:22,480 --> 00:15:25,860
a<font color="#CCCCCC"> heat-based</font><font color="#E5E5E5"> buffer overflow</font>

449
00:15:23,820 --> 00:15:27,480
most like<font color="#E5E5E5"> stuff textbook from some of</font>

450
00:15:25,860 --> 00:15:29,880
the C programming<font color="#CCCCCC"> guys back in the</font><font color="#E5E5E5"> day</font>

451
00:15:27,480 --> 00:15:31,590
<font color="#E5E5E5">so what ends up happening is</font><font color="#CCCCCC"> the in the</font>

452
00:15:29,880 --> 00:15:34,470
vulnerability<font color="#CCCCCC"> they get the length</font>

453
00:15:31,590 --> 00:15:36,690
<font color="#CCCCCC">property right here</font><font color="#E5E5E5"> fully controlled by</font>

454
00:15:34,470 --> 00:15:38,850
the attacker<font color="#CCCCCC"> then they do a little</font><font color="#E5E5E5"> bit</font>

455
00:15:36,690 --> 00:15:41,730
of<font color="#E5E5E5"> math multiplying it by two which</font>

456
00:15:38,850 --> 00:15:43,440
wraps the integer to make it small<font color="#E5E5E5"> then</font>

457
00:15:41,730 --> 00:15:45,690
they call malloc on that to<font color="#E5E5E5"> create a</font>

458
00:15:43,440 --> 00:15:48,120
small heap object<font color="#CCCCCC"> then they start using</font>

459
00:15:45,690 --> 00:15:49,590
<font color="#E5E5E5">a loop start going into a loop with the</font>

460
00:15:48,120 --> 00:15:51,900
<font color="#CCCCCC">with the length that</font><font color="#E5E5E5"> was provided</font>

461
00:15:49,590 --> 00:15:54,390
previously<font color="#CCCCCC"> and it ends up resulting</font><font color="#E5E5E5"> in a</font>

462
00:15:51,900 --> 00:15:56,480
heap based buffer overflow<font color="#E5E5E5"> right classic</font>

463
00:15:54,390 --> 00:15:59,580
you know<font color="#E5E5E5"> programming mistake being made</font>

464
00:15:56,480 --> 00:16:01,260
<font color="#E5E5E5">in this example right so how do you</font>

465
00:15:59,580 --> 00:16:02,520
trigger the bug<font color="#E5E5E5"> right so let's take a</font>

466
00:16:01,260 --> 00:16:04,530
look at the proof<font color="#E5E5E5"> of concepts now that</font>

467
00:16:02,520 --> 00:16:06,090
the<font color="#E5E5E5"> CNT doesn't really matter what's</font>

468
00:16:04,530 --> 00:16:09,150
important is that<font color="#E5E5E5"> there's an array there</font>

469
00:16:06,090 --> 00:16:10,530
and there's a new<font color="#CCCCCC"> defiant there's a new</font>

470
00:16:09,150 --> 00:16:12,300
getter we're defining a getter that

471
00:16:10,530 --> 00:16:14,069
basically sets<font color="#E5E5E5"> the length of the array</font>

472
00:16:12,300 --> 00:16:17,000
<font color="#CCCCCC">to a value that you know is going</font><font color="#E5E5E5"> to</font>

473
00:16:14,070 --> 00:16:19,320
wrap so in this case seven ffff ffff

474
00:16:17,000 --> 00:16:21,120
<font color="#CCCCCC">then you're going to call set intent on</font>

475
00:16:19,320 --> 00:16:22,800
that array<font color="#E5E5E5"> and it's going to result in</font>

476
00:16:21,120 --> 00:16:26,960
the<font color="#CCCCCC"> heap</font><font color="#E5E5E5"> base buffer overflow occurring</font>

477
00:16:22,800 --> 00:16:29,490
now you know we sent<font color="#E5E5E5"> this a to</font><font color="#CCCCCC"> adobe</font>

478
00:16:26,960 --> 00:16:32,340
sent this proof<font color="#E5E5E5"> of</font><font color="#CCCCCC"> concept to</font><font color="#E5E5E5"> adobe and</font>

479
00:16:29,490 --> 00:16:35,010
and they released<font color="#E5E5E5"> quarterly so they it</font>

480
00:16:32,340 --> 00:16:37,260
took two months to<font color="#E5E5E5"> analyze this bug had</font>

481
00:16:35,010 --> 00:16:39,630
months<font color="#CCCCCC"> to</font><font color="#E5E5E5"> look at it and so if you would</font>

482
00:16:37,260 --> 00:16:40,650
think<font color="#E5E5E5"> like</font><font color="#CCCCCC"> it's integer overflow</font><font color="#E5E5E5"> you</font>

483
00:16:39,630 --> 00:16:43,110
know you're gonna do some sort<font color="#CCCCCC"> of</font>

484
00:16:40,650 --> 00:16:44,370
overflow calculation overflow check to

485
00:16:43,110 --> 00:16:47,130
make<font color="#E5E5E5"> sure</font><font color="#CCCCCC"> that you're actually</font><font color="#E5E5E5"> you know</font>

486
00:16:44,370 --> 00:16:49,470
<font color="#E5E5E5">correctly fixing the bug but know this</font>

487
00:16:47,130 --> 00:16:57,270
is what they released which is

488
00:16:49,470 --> 00:17:00,150
effectively<font color="#CCCCCC"> only looking it's still a</font>

489
00:16:57,270 --> 00:17:03,060
quick fix<font color="#CCCCCC"> yeah it's a fix</font><font color="#E5E5E5"> it's a fix</font>

490
00:17:00,150 --> 00:17:04,650
<font color="#E5E5E5">it's a fix you can imagine the guy was</font>

491
00:17:03,060 --> 00:17:05,790
probably<font color="#E5E5E5"> under a lot of pressure or the</font>

492
00:17:04,650 --> 00:17:07,980
guy or the<font color="#E5E5E5"> gal under a lot of pressure</font>

493
00:17:05,790 --> 00:17:11,540
to<font color="#E5E5E5"> get the fix out so this is what we</font>

494
00:17:07,980 --> 00:17:16,230
had right this is what we get back<font color="#E5E5E5"> yeah</font>

495
00:17:11,540 --> 00:17:18,510
<font color="#CCCCCC">its quality</font><font color="#E5E5E5"> all right so you think</font><font color="#CCCCCC"> about</font>

496
00:17:16,230 --> 00:17:20,790
<font color="#CCCCCC">okay obviously</font><font color="#E5E5E5"> you know this but this is</font>

497
00:17:18,510 --> 00:17:23,760
this patches by passable<font color="#E5E5E5"> and it was kind</font>

498
00:17:20,790 --> 00:17:25,199
of funny because we know we know<font color="#E5E5E5"> people</font>

499
00:17:23,760 --> 00:17:26,879
look<font color="#E5E5E5"> at our advisories and</font><font color="#CCCCCC"> they know</font>

500
00:17:25,199 --> 00:17:28,620
that<font color="#CCCCCC"> the bugs are coming</font><font color="#E5E5E5"> out and we know</font>

501
00:17:26,880 --> 00:17:32,730
that people<font color="#E5E5E5"> monitor all that stuff right</font>

502
00:17:28,620 --> 00:17:35,219
<font color="#E5E5E5">and so we when the patch came out the</font>

503
00:17:32,730 --> 00:17:36,440
researcher<font color="#E5E5E5"> literally sent us the bypass</font>

504
00:17:35,220 --> 00:17:38,270
in like an hour

505
00:17:36,440 --> 00:17:39,830
<font color="#CCCCCC">- the patch was released</font><font color="#E5E5E5"> so like</font>

506
00:17:38,270 --> 00:17:42,500
immediately into<font color="#CCCCCC"> the system we had a</font>

507
00:17:39,830 --> 00:17:44,870
<font color="#CCCCCC">brand new</font><font color="#E5E5E5"> proof of concept</font><font color="#CCCCCC"> that was that</font>

508
00:17:42,500 --> 00:17:46,520
was triggering<font color="#E5E5E5"> the bug again</font><font color="#CCCCCC"> and this is</font>

509
00:17:44,870 --> 00:17:50,510
<font color="#CCCCCC">exactly what the</font><font color="#E5E5E5"> proof-of-concept looked</font>

510
00:17:46,520 --> 00:17:52,220
like so quite<font color="#E5E5E5"> good yeah very enjoyable</font>

511
00:17:50,510 --> 00:17:56,180
<font color="#CCCCCC">we paid him twice</font>

512
00:17:52,220 --> 00:17:57,650
so so yeah you<font color="#E5E5E5"> know when I'm working</font><font color="#CCCCCC"> on</font>

513
00:17:56,180 --> 00:18:02,420
budget I got to account<font color="#CCCCCC"> for</font><font color="#E5E5E5"> all</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> these</font>

514
00:17:57,650 --> 00:18:06,410
things<font color="#CCCCCC"> you know</font><font color="#E5E5E5"> so later on</font><font color="#CCCCCC"> my</font><font color="#E5E5E5"> Adobe</font>

515
00:18:02,420 --> 00:18:08,060
figured out how<font color="#E5E5E5"> to do math and they they</font>

516
00:18:06,410 --> 00:18:10,010
fix the vulnerability<font color="#CCCCCC"> and made sure that</font>

517
00:18:08,060 --> 00:18:12,020
<font color="#E5E5E5">the in length wouldn't</font><font color="#CCCCCC"> rap anymore and</font>

518
00:18:10,010 --> 00:18:14,629
as a result the calculation would would

519
00:18:12,020 --> 00:18:16,370
would work<font color="#E5E5E5"> so that's the JavaScript API</font>

520
00:18:14,630 --> 00:18:19,460
section<font color="#CCCCCC"> I'm</font><font color="#E5E5E5"> gonna turn it over to</font><font color="#CCCCCC"> Jaisal</font>

521
00:18:16,370 --> 00:18:22,669
he's gonna do the<font color="#CCCCCC"> XSLT section and talk</font>

522
00:18:19,460 --> 00:18:25,430
<font color="#E5E5E5">about that area all right so extensible</font>

523
00:18:22,670 --> 00:18:27,200
stylesheet language transformations<font color="#CCCCCC"> XSLT</font>

524
00:18:25,430 --> 00:18:29,720
<font color="#CCCCCC">if you're</font><font color="#E5E5E5"> ever in the unfortunate</font>

525
00:18:27,200 --> 00:18:32,180
<font color="#CCCCCC">position of having to</font><font color="#E5E5E5"> process</font><font color="#CCCCCC"> xml at all</font>

526
00:18:29,720 --> 00:18:34,280
but<font color="#E5E5E5"> especially large quantities</font><font color="#CCCCCC"> XSLT is</font>

527
00:18:32,180 --> 00:18:37,310
a great way of<font color="#E5E5E5"> just transforming that</font>

528
00:18:34,280 --> 00:18:40,610
data<font color="#CCCCCC"> I'm gonna give a little bit</font><font color="#E5E5E5"> of an</font>

529
00:18:37,310 --> 00:18:42,590
overview<font color="#CCCCCC"> view</font><font color="#E5E5E5"> over it of it but in</font><font color="#CCCCCC"> dobby</font>

530
00:18:40,610 --> 00:18:44,389
Reader or Acrobat<font color="#E5E5E5"> you start off with</font>

531
00:18:42,590 --> 00:18:46,459
Acrobat or<font color="#CCCCCC"> a</font><font color="#E5E5E5"> curried 32 as you would</font>

532
00:18:44,390 --> 00:18:48,560
with anything else<font color="#E5E5E5"> you</font><font color="#CCCCCC"> have two vectors</font>

533
00:18:46,460 --> 00:18:50,750
<font color="#E5E5E5">in you have a script</font><font color="#CCCCCC"> so through</font>

534
00:18:48,560 --> 00:18:54,260
JavaScript and then you have<font color="#E5E5E5"> a preform</font>

535
00:18:50,750 --> 00:18:55,400
which is like<font color="#E5E5E5"> XML forms architecture</font><font color="#CCCCCC"> I'm</font>

536
00:18:54,260 --> 00:18:58,400
not really<font color="#E5E5E5"> going to cover that as much</font>

537
00:18:55,400 --> 00:18:59,050
though one<font color="#E5E5E5"> of the bypasses will</font><font color="#CCCCCC"> we'll</font>

538
00:18:58,400 --> 00:19:01,670
use that

539
00:18:59,050 --> 00:19:03,919
ultimately though it ends up<font color="#CCCCCC"> going to ax</font>

540
00:19:01,670 --> 00:19:07,490
SLE which as<font color="#E5E5E5"> Brian said earlier is the</font>

541
00:19:03,920 --> 00:19:10,670
<font color="#CCCCCC">XSLT parser</font><font color="#E5E5E5"> all of that code is really</font>

542
00:19:07,490 --> 00:19:12,680
just based<font color="#E5E5E5"> on and really is a open</font>

543
00:19:10,670 --> 00:19:15,650
<font color="#E5E5E5">source product called it's AB electron</font>

544
00:19:12,680 --> 00:19:19,190
and<font color="#E5E5E5"> that was abandoned I think in to put</font>

545
00:19:15,650 --> 00:19:21,200
2010<font color="#CCCCCC"> the version</font><font color="#E5E5E5"> that adobe is currently</font>

546
00:19:19,190 --> 00:19:23,150
<font color="#E5E5E5">using in the reader that shipping right</font>

547
00:19:21,200 --> 00:19:25,520
<font color="#E5E5E5">now is a slightly modified</font><font color="#CCCCCC"> version in</font>

548
00:19:23,150 --> 00:19:27,140
that they've had some spot fixes but as

549
00:19:25,520 --> 00:19:28,310
we'll see they don't fix<font color="#E5E5E5"> everything</font>

550
00:19:27,140 --> 00:19:30,290
perfectly

551
00:19:28,310 --> 00:19:32,870
one of the first bugs we found where we

552
00:19:30,290 --> 00:19:35,750
had submitted<font color="#E5E5E5"> to</font><font color="#CCCCCC"> us was in</font><font color="#E5E5E5"> 2012 by</font>

553
00:19:32,870 --> 00:19:38,629
<font color="#CCCCCC">Nicolas Gregoire who often goes by a</font>

554
00:19:35,750 --> 00:19:43,730
guardian<font color="#E5E5E5"> and he broke the patch and</font>

555
00:19:38,630 --> 00:19:46,580
resubmitted a case in 2017<font color="#CCCCCC"> alright so</font>

556
00:19:43,730 --> 00:19:50,180
here's just<font color="#E5E5E5"> an</font><font color="#CCCCCC"> example of what using</font>

557
00:19:46,580 --> 00:19:52,010
extra using<font color="#CCCCCC"> XSLT from JavaScript</font><font color="#E5E5E5"> in</font>

558
00:19:50,180 --> 00:19:54,200
might look<font color="#CCCCCC"> like you're from a PDF might</font>

559
00:19:52,010 --> 00:19:56,420
look<font color="#CCCCCC"> like</font><font color="#E5E5E5"> we have this very</font><font color="#CCCCCC"> very</font><font color="#E5E5E5"> simple</font>

560
00:19:54,200 --> 00:19:58,670
XML document<font color="#E5E5E5"> where we just have a self</font>

561
00:19:56,420 --> 00:20:01,250
terminating node<font color="#E5E5E5"> nothing too interesting</font>

562
00:19:58,670 --> 00:20:03,950
we then have<font color="#CCCCCC"> an XSLT which is also just</font>

563
00:20:01,250 --> 00:20:05,750
<font color="#CCCCCC">XML</font><font color="#E5E5E5"> in this case is going to match some</font>

564
00:20:03,950 --> 00:20:09,160
stuff and<font color="#E5E5E5"> then run for</font><font color="#CCCCCC"> each</font><font color="#E5E5E5"> for</font><font color="#CCCCCC"> every</font>

565
00:20:05,750 --> 00:20:11,960
node<font color="#CCCCCC"> that it runs and then just sorts it</font>

566
00:20:09,160 --> 00:20:14,540
as far<font color="#E5E5E5"> as actually using the API it's</font>

567
00:20:11,960 --> 00:20:17,240
fairly<font color="#E5E5E5"> straightforward we parse our XML</font>

568
00:20:14,540 --> 00:20:20,180
we end up with a Dom like structure and

569
00:20:17,240 --> 00:20:22,280
<font color="#E5E5E5">then</font><font color="#CCCCCC"> we can apply xsf style sheets</font><font color="#E5E5E5"> to</font>

570
00:20:20,180 --> 00:20:24,560
particular nodes or to the entire<font color="#CCCCCC"> DOM or</font>

571
00:20:22,280 --> 00:20:26,330
<font color="#E5E5E5">really anything like that it's pretty</font>

572
00:20:24,560 --> 00:20:29,179
straightforward<font color="#CCCCCC"> if we go the sfa</font>

573
00:20:26,330 --> 00:20:30,649
approach it's very similar you<font color="#CCCCCC"> can</font><font color="#E5E5E5"> do it</font>

574
00:20:29,180 --> 00:20:33,110
basically<font color="#CCCCCC"> the exact same way and so</font>

575
00:20:30,650 --> 00:20:35,330
<font color="#E5E5E5">either works perfectly for</font><font color="#CCCCCC"> triggering</font>

576
00:20:33,110 --> 00:20:38,510
<font color="#E5E5E5">bugs here one thing I want to point out</font>

577
00:20:35,330 --> 00:20:40,129
is one thing<font color="#CCCCCC"> that</font><font color="#E5E5E5"> you really</font><font color="#CCCCCC"> want to do</font>

578
00:20:38,510 --> 00:20:43,100
if you're<font color="#CCCCCC"> doing any sort</font><font color="#E5E5E5"> of parsing of</font>

579
00:20:40,130 --> 00:20:45,020
<font color="#CCCCCC">XML documents is filter and</font><font color="#E5E5E5"> only do</font>

580
00:20:43,100 --> 00:20:46,730
<font color="#E5E5E5">certain things on certain nodes and</font>

581
00:20:45,020 --> 00:20:49,280
that's done<font color="#CCCCCC"> through these select</font>

582
00:20:46,730 --> 00:20:52,400
<font color="#E5E5E5">attributes using</font><font color="#CCCCCC"> a syntax called</font><font color="#E5E5E5"> XPath</font>

583
00:20:49,280 --> 00:20:54,440
<font color="#CCCCCC">the main thing about XPath is you have</font>

584
00:20:52,400 --> 00:20:56,960
fairly Richardson<font color="#CCCCCC"> text to specify</font>

585
00:20:54,440 --> 00:20:58,730
individual<font color="#E5E5E5"> nodes depending on their</font>

586
00:20:56,960 --> 00:21:01,280
ancestors or siblings or anything like

587
00:20:58,730 --> 00:21:02,690
<font color="#E5E5E5">that also</font><font color="#CCCCCC"> their attributes</font><font color="#E5E5E5"> and to aid</font>

588
00:21:01,280 --> 00:21:04,550
<font color="#E5E5E5">that there are a lot of functions</font><font color="#CCCCCC"> that</font>

589
00:21:02,690 --> 00:21:07,030
<font color="#E5E5E5">are available</font><font color="#CCCCCC"> to you that you</font><font color="#E5E5E5"> can call</font>

590
00:21:04,550 --> 00:21:10,370
<font color="#E5E5E5">to basically filter out different</font>

591
00:21:07,030 --> 00:21:12,500
different nodes and the<font color="#E5E5E5"> voter abilities</font>

592
00:21:10,370 --> 00:21:15,800
we'll talk<font color="#E5E5E5"> about are in the</font><font color="#CCCCCC"> Lang of</font>

593
00:21:12,500 --> 00:21:19,940
function at<font color="#CCCCCC"> CV 2012 15 30 and the</font><font color="#E5E5E5"> bypass</font>

594
00:21:15,800 --> 00:21:26,060
is<font color="#CCCCCC"> 2017 to 962 both of which are type</font>

595
00:21:19,940 --> 00:21:28,040
confusion<font color="#CCCCCC"> so the way the functions are</font>

596
00:21:26,060 --> 00:21:30,649
handled for the for everything in the

597
00:21:28,040 --> 00:21:32,780
XPath syntax is there's a giant switch

598
00:21:30,650 --> 00:21:35,330
statement for every<font color="#E5E5E5"> single function that</font>

599
00:21:32,780 --> 00:21:38,120
it supports<font color="#E5E5E5"> inside a function called</font>

600
00:21:35,330 --> 00:21:40,429
call func<font color="#CCCCCC"> and when it goes to</font><font color="#E5E5E5"> handle</font>

601
00:21:38,120 --> 00:21:41,750
this<font color="#E5E5E5"> it ensures that has the correct</font>

602
00:21:40,430 --> 00:21:43,910
<font color="#E5E5E5">number of arguments so for the</font><font color="#CCCCCC"> Lang</font>

603
00:21:41,750 --> 00:21:46,010
function<font color="#CCCCCC"> it's responsible for</font><font color="#E5E5E5"> filtering</font>

604
00:21:43,910 --> 00:21:48,050
<font color="#E5E5E5">based on the localization</font><font color="#CCCCCC"> of a</font>

605
00:21:46,010 --> 00:21:49,910
particular node and it does that by

606
00:21:48,050 --> 00:21:53,090
<font color="#E5E5E5">checking to see if that particular node</font>

607
00:21:49,910 --> 00:21:54,590
has a Lang attribute<font color="#E5E5E5"> set to whatever</font>

608
00:21:53,090 --> 00:21:58,580
<font color="#E5E5E5">language you're looking for so if you</font>

609
00:21:54,590 --> 00:22:01,310
<font color="#E5E5E5">want</font><font color="#CCCCCC"> en dash us and your notes</font><font color="#E5E5E5"> specify</font>

610
00:21:58,580 --> 00:22:03,679
as<font color="#E5E5E5"> Ian - us then</font><font color="#CCCCCC"> that would</font><font color="#E5E5E5"> return true</font>

611
00:22:01,310 --> 00:22:04,159
<font color="#CCCCCC">and it would be selected</font><font color="#E5E5E5"> if it doesn't</font>

612
00:22:03,680 --> 00:22:06,500
but

613
00:22:04,160 --> 00:22:08,630
it's ancestor<font color="#CCCCCC"> node it does have</font><font color="#E5E5E5"> that set</font>

614
00:22:06,500 --> 00:22:10,640
then that<font color="#CCCCCC"> would be selected</font><font color="#E5E5E5"> and so</font>

615
00:22:08,630 --> 00:22:12,260
basically it'll iterate from<font color="#E5E5E5"> the current</font>

616
00:22:10,640 --> 00:22:14,900
node all the way up the ancestor chain

617
00:22:12,260 --> 00:22:16,940
and test repeatedly whether or not it

618
00:22:14,900 --> 00:22:19,640
even<font color="#E5E5E5"> has Lang attribute and if it does</font>

619
00:22:16,940 --> 00:22:20,810
if it<font color="#CCCCCC"> equals what we're looking for and</font>

620
00:22:19,640 --> 00:22:23,540
so that's exactly<font color="#E5E5E5"> what</font><font color="#CCCCCC"> this code does</font>

621
00:22:20,810 --> 00:22:26,149
<font color="#E5E5E5">but if we look at the very very bottom</font>

622
00:22:23,540 --> 00:22:27,850
line<font color="#E5E5E5"> we'll see a call to a function or</font>

623
00:22:26,150 --> 00:22:30,380
what looks to be<font color="#E5E5E5"> a function called</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> e</font>

624
00:22:27,850 --> 00:22:32,240
on the current node that<font color="#E5E5E5"> we're operating</font>

625
00:22:30,380 --> 00:22:34,220
on and then that gets<font color="#CCCCCC"> the</font><font color="#E5E5E5"> reference and</font>

626
00:22:32,240 --> 00:22:37,040
function gets called as a result of it

627
00:22:34,220 --> 00:22:38,840
if we look at what<font color="#E5E5E5"> tui actually looks</font>

628
00:22:37,040 --> 00:22:41,629
like<font color="#E5E5E5"> we'll see that it's actually a</font>

629
00:22:38,840 --> 00:22:44,360
macro<font color="#E5E5E5"> that macro is just calling another</font>

630
00:22:41,630 --> 00:22:47,090
macro called cast cast is conditionally

631
00:22:44,360 --> 00:22:49,340
defined<font color="#E5E5E5"> the sad thing is if you</font><font color="#CCCCCC"> are</font>

632
00:22:47,090 --> 00:22:51,110
<font color="#E5E5E5">looking at a debug build then it's gonna</font>

633
00:22:49,340 --> 00:22:53,929
call a<font color="#CCCCCC"> dynamic cast</font><font color="#E5E5E5"> and if you do a</font>

634
00:22:51,110 --> 00:22:55,669
dynamic<font color="#E5E5E5"> cast of</font><font color="#CCCCCC"> incompatible types then</font>

635
00:22:53,930 --> 00:22:57,860
it's just<font color="#CCCCCC"> gonna return a null pointer</font>

636
00:22:55,670 --> 00:22:59,420
and in this particular<font color="#E5E5E5"> case because we</font>

637
00:22:57,860 --> 00:23:01,219
<font color="#CCCCCC">have we're already dereferencing it</font>

638
00:22:59,420 --> 00:23:04,640
without<font color="#CCCCCC"> checking anything</font><font color="#E5E5E5"> we'll end up</font>

639
00:23:01,220 --> 00:23:06,500
crashing but pretty innocuous<font color="#CCCCCC"> in</font><font color="#E5E5E5"> the</font>

640
00:23:04,640 --> 00:23:09,110
<font color="#E5E5E5">production code that ends up being a</font>

641
00:23:06,500 --> 00:23:10,940
c-style cast<font color="#CCCCCC"> and so we</font><font color="#E5E5E5"> just trigger type</font>

642
00:23:09,110 --> 00:23:14,750
confusion if we're providing<font color="#E5E5E5"> a type that</font>

643
00:23:10,940 --> 00:23:17,330
<font color="#E5E5E5">is not appropriate</font><font color="#CCCCCC"> unfortunately it is</font>

644
00:23:14,750 --> 00:23:19,970
<font color="#E5E5E5">trivial</font><font color="#CCCCCC"> to use a type that's</font><font color="#E5E5E5"> not</font>

645
00:23:17,330 --> 00:23:22,010
appropriate<font color="#CCCCCC"> and with this proof of</font>

646
00:23:19,970 --> 00:23:24,460
<font color="#E5E5E5">concept</font><font color="#CCCCCC"> it'll</font><font color="#E5E5E5"> end up crashing as it</font>

647
00:23:22,010 --> 00:23:27,020
tries to dereference<font color="#E5E5E5"> ABCD as a pointer</font>

648
00:23:24,460 --> 00:23:29,210
it's very very<font color="#E5E5E5"> straightforward here we</font>

649
00:23:27,020 --> 00:23:32,180
just have<font color="#E5E5E5"> a</font><font color="#CCCCCC"> nexus l stylesheet that will</font>

650
00:23:29,210 --> 00:23:34,490
match on every node<font color="#E5E5E5"> and then just call a</font>

651
00:23:32,180 --> 00:23:37,310
<font color="#E5E5E5">lang function on a given node in this</font>

652
00:23:34,490 --> 00:23:41,240
case it will target ABCD and you have an

653
00:23:37,310 --> 00:23:43,639
instant<font color="#CCCCCC"> access violation so adobe</font>

654
00:23:41,240 --> 00:23:47,680
<font color="#E5E5E5">patched this as they patch everything</font>

655
00:23:43,640 --> 00:23:49,670
<font color="#E5E5E5">and fix the crasher it no longer crashes</font>

656
00:23:47,680 --> 00:23:51,860
<font color="#E5E5E5">unfortunately for them they didn't</font>

657
00:23:49,670 --> 00:23:53,810
<font color="#CCCCCC">actually properly</font><font color="#E5E5E5"> like look</font><font color="#CCCCCC"> for any</font>

658
00:23:51,860 --> 00:23:55,639
invariant testing whatsoever and<font color="#E5E5E5"> AG</font><font color="#CCCCCC"> are</font>

659
00:23:53,810 --> 00:23:58,129
<font color="#E5E5E5">you found that he could</font><font color="#CCCCCC"> bypass this</font>

660
00:23:55,640 --> 00:24:01,400
patch with text nodes or commenting

661
00:23:58,130 --> 00:24:02,840
nodes<font color="#CCCCCC"> and so here's an example and in</font>

662
00:24:01,400 --> 00:24:05,960
this<font color="#E5E5E5"> case he</font><font color="#CCCCCC"> just merged the two</font>

663
00:24:02,840 --> 00:24:08,110
<font color="#CCCCCC">together in an</font><font color="#E5E5E5"> x fa and in this case</font>

664
00:24:05,960 --> 00:24:09,230
<font color="#CCCCCC">we'll end up</font><font color="#E5E5E5"> crashing as we dereference</font>

665
00:24:08,110 --> 00:24:12,320
<font color="#CCCCCC">xxxxX</font>

666
00:24:09,230 --> 00:24:15,530
<font color="#E5E5E5">it's very very simple</font><font color="#CCCCCC"> and very very</font>

667
00:24:12,320 --> 00:24:18,409
<font color="#E5E5E5">straightforward</font><font color="#CCCCCC"> to trigger and dobby</font>

668
00:24:15,530 --> 00:24:20,540
just did not do any variant hunting

669
00:24:18,410 --> 00:24:22,460
we can see how they actually patched it

670
00:24:20,540 --> 00:24:24,710
thanks to updated<font color="#CCCCCC"> sabotage sources that</font>

671
00:24:22,460 --> 00:24:26,600
they<font color="#E5E5E5"> provided and we can see that they</font>

672
00:24:24,710 --> 00:24:28,400
actually fix it properly<font color="#E5E5E5"> but now</font>

673
00:24:26,600 --> 00:24:30,199
<font color="#E5E5E5">actually using a call to dynamic cast</font>

674
00:24:28,400 --> 00:24:32,660
<font color="#E5E5E5">and there's a null pointer check</font>

675
00:24:30,200 --> 00:24:34,910
<font color="#E5E5E5">afterwards</font><font color="#CCCCCC"> and we know that it's in</font>

676
00:24:32,660 --> 00:24:36,710
reference<font color="#E5E5E5"> to the case</font><font color="#CCCCCC"> that we submitted</font>

677
00:24:34,910 --> 00:24:39,020
<font color="#E5E5E5">to them because we see</font><font color="#CCCCCC"> fix for Peter</font>

678
00:24:36,710 --> 00:24:41,390
<font color="#E5E5E5">sixty or eighty one which is just kind</font>

679
00:24:39,020 --> 00:24:43,730
of nice to<font color="#CCCCCC"> be</font><font color="#E5E5E5"> able to see and with that</font>

680
00:24:41,390 --> 00:24:45,740
I'm gonna hand<font color="#E5E5E5"> it over to Abdul so I</font>

681
00:24:43,730 --> 00:24:47,419
just want to note down that<font color="#E5E5E5"> recently I</font>

682
00:24:45,740 --> 00:24:49,130
<font color="#E5E5E5">don't be updated as a blocker on code</font>

683
00:24:47,419 --> 00:24:50,419
and uploaded<font color="#CCCCCC"> that</font><font color="#E5E5E5"> to their</font><font color="#CCCCCC"> web site so</font>

684
00:24:49,130 --> 00:24:52,990
you<font color="#CCCCCC"> guys can check</font><font color="#E5E5E5"> it out</font><font color="#CCCCCC"> if you guys</font>

685
00:24:50,419 --> 00:24:55,370
want<font color="#E5E5E5"> to find more</font><font color="#CCCCCC"> bugs</font>

686
00:24:52,990 --> 00:24:57,080
<font color="#CCCCCC">alright so I'm gonna</font><font color="#E5E5E5"> talk about indexing</font>

687
00:24:55,370 --> 00:25:00,260
which is relatively a new<font color="#E5E5E5"> attack surface</font>

688
00:24:57,080 --> 00:25:02,780
<font color="#CCCCCC">I found this last year right before</font>

689
00:25:00,260 --> 00:25:05,809
<font color="#E5E5E5">pointer on and it happens that's</font><font color="#CCCCCC"> a pass</font>

690
00:25:02,780 --> 00:25:07,428
<font color="#E5E5E5">in a</font><font color="#CCCCCC"> pelt which he was here</font><font color="#E5E5E5"> probably</font><font color="#CCCCCC"> I</font>

691
00:25:05,809 --> 00:25:09,530
was looking at the same thing<font color="#CCCCCC"> but</font><font color="#E5E5E5"> he was</font>

692
00:25:07,429 --> 00:25:12,559
being<font color="#E5E5E5"> a</font><font color="#CCCCCC"> little</font><font color="#E5E5E5"> bit quiet about the whole</font>

693
00:25:09,530 --> 00:25:15,590
<font color="#CCCCCC">attack surface so</font><font color="#E5E5E5"> you can reach this</font>

694
00:25:12,559 --> 00:25:18,740
through a script<font color="#CCCCCC"> catalog</font><font color="#E5E5E5"> APA</font><font color="#CCCCCC"> plugin</font>

695
00:25:15,590 --> 00:25:20,540
search<font color="#CCCCCC"> plugin</font><font color="#E5E5E5"> and eventually everything</font>

696
00:25:18,740 --> 00:25:24,250
that deals<font color="#E5E5E5"> with index index parsing</font>

697
00:25:20,540 --> 00:25:28,370
happens<font color="#E5E5E5"> inside onyx 32 so what's onyx 32</font>

698
00:25:24,250 --> 00:25:31,100
<font color="#CCCCCC">an overview so</font><font color="#E5E5E5"> basically back</font><font color="#CCCCCC"> in 2003 I</font>

699
00:25:28,370 --> 00:25:32,659
don't be needed a solution<font color="#CCCCCC"> for like an</font>

700
00:25:31,100 --> 00:25:34,820
indexing solution for fast searching<font color="#E5E5E5"> in</font>

701
00:25:32,660 --> 00:25:37,220
PDFs<font color="#CCCCCC"> so they bought a solution from</font><font color="#E5E5E5"> a</font>

702
00:25:34,820 --> 00:25:40,100
company called<font color="#CCCCCC"> lag stack they offer that</font>

703
00:25:37,220 --> 00:25:43,720
<font color="#E5E5E5">and it's called onyx and</font><font color="#CCCCCC"> basically it's</font>

704
00:25:40,100 --> 00:25:45,918
just a<font color="#CCCCCC"> dll</font><font color="#E5E5E5"> onyx 282 the PLL and</font>

705
00:25:43,720 --> 00:25:47,690
everything that<font color="#CCCCCC"> deals with indexing fast</font>

706
00:25:45,919 --> 00:25:49,640
<font color="#CCCCCC">searching happens there the nice thing</font>

707
00:25:47,690 --> 00:25:51,830
about this is that<font color="#E5E5E5"> this dll hasn't been</font>

708
00:25:49,640 --> 00:25:54,410
audited so when I saw the<font color="#CCCCCC"> DLL it was the</font>

709
00:25:51,830 --> 00:25:56,840
last<font color="#CCCCCC"> time it was</font><font color="#E5E5E5"> modified was 2015 I</font>

710
00:25:54,410 --> 00:25:59,270
guess or 2014 something like that<font color="#E5E5E5"> so no</font>

711
00:25:56,840 --> 00:26:01,399
one touched it<font color="#CCCCCC"> I included a note here</font>

712
00:25:59,270 --> 00:26:04,549
that<font color="#E5E5E5"> it was possible to trigger the</font>

713
00:26:01,400 --> 00:26:06,049
parsing code through JavaScript I don't

714
00:26:04,549 --> 00:26:09,530
<font color="#CCCCCC">think it's possible</font><font color="#E5E5E5"> anymore I'll get to</font>

715
00:26:06,049 --> 00:26:11,510
that<font color="#E5E5E5"> later the nice thing about like</font>

716
00:26:09,530 --> 00:26:14,600
stack they provided documentation and

717
00:26:11,510 --> 00:26:17,360
sample code of how to use the actual API

718
00:26:14,600 --> 00:26:19,610
of<font color="#E5E5E5"> onyx</font><font color="#CCCCCC"> so what I did is basically I I</font>

719
00:26:17,360 --> 00:26:21,860
read the documentation grab some sample

720
00:26:19,610 --> 00:26:24,350
code<font color="#E5E5E5"> I wrote a small harness and I</font>

721
00:26:21,860 --> 00:26:27,020
started<font color="#E5E5E5"> fuzzing idea out directly and I</font>

722
00:26:24,350 --> 00:26:28,699
found a bunch<font color="#E5E5E5"> of bugs Sebastian did the</font>

723
00:26:27,020 --> 00:26:31,070
same thing<font color="#E5E5E5"> but he basically took another</font>

724
00:26:28,700 --> 00:26:33,620
approach<font color="#CCCCCC"> he did when I fell</font><font color="#E5E5E5"> I did</font>

725
00:26:31,070 --> 00:26:42,259
<font color="#E5E5E5">or framework he found more bugs than I</font>

726
00:26:33,620 --> 00:26:44,389
did<font color="#CCCCCC"> just fine I admit defeat but</font><font color="#E5E5E5"> I'm</font>

727
00:26:42,259 --> 00:26:45,889
gonna be discussing an interesting bug

728
00:26:44,389 --> 00:26:48,469
which is an untrusted pointed

729
00:26:45,889 --> 00:26:51,500
dereference<font color="#E5E5E5"> which we both found</font><font color="#CCCCCC"> I found</font>

730
00:26:48,470 --> 00:26:53,480
<font color="#CCCCCC">it first so I had</font><font color="#E5E5E5"> condoms on that but</font><font color="#CCCCCC"> he</font>

731
00:26:51,500 --> 00:26:55,940
bypassed the<font color="#CCCCCC"> path later so it's it's an</font>

732
00:26:53,480 --> 00:26:59,360
<font color="#E5E5E5">interesting use case okay</font>

733
00:26:55,940 --> 00:27:01,250
so initially<font color="#E5E5E5"> I was</font><font color="#CCCCCC"> approaching I wasn't</font>

734
00:26:59,360 --> 00:27:04,039
<font color="#E5E5E5">looking at indexing</font><font color="#CCCCCC"> I was looking at the</font>

735
00:27:01,250 --> 00:27:06,139
<font color="#CCCCCC">catalog plugin</font><font color="#E5E5E5"> which is a plugin that</font>

736
00:27:04,039 --> 00:27:10,549
only<font color="#E5E5E5"> exists in Acrobat and not</font><font color="#CCCCCC"> metre</font>

737
00:27:06,139 --> 00:27:12,769
which<font color="#CCCCCC"> is the paid version of reader so</font>

738
00:27:10,549 --> 00:27:14,990
that<font color="#CCCCCC"> way it works you can you can grab a</font>

739
00:27:12,769 --> 00:27:17,000
bunch<font color="#E5E5E5"> of PDFs and create an index file</font>

740
00:27:14,990 --> 00:27:18,470
for them for searching searching

741
00:27:17,000 --> 00:27:21,620
purposes<font color="#E5E5E5"> that's that's</font><font color="#CCCCCC"> a whole purpose</font>

742
00:27:18,470 --> 00:27:25,039
of<font color="#CCCCCC"> Gotama</font><font color="#E5E5E5"> so</font><font color="#CCCCCC"> it generates</font><font color="#E5E5E5"> a</font><font color="#CCCCCC"> PDX file</font>

743
00:27:21,620 --> 00:27:26,508
which links<font color="#CCCCCC"> to</font><font color="#E5E5E5"> two files</font><font color="#CCCCCC"> a master index</font>

744
00:27:25,039 --> 00:27:30,379
file and the slave index file in<font color="#E5E5E5"> this</font>

745
00:27:26,509 --> 00:27:32,659
<font color="#CCCCCC">case it's index and index</font><font color="#E5E5E5"> one</font><font color="#CCCCCC"> I found</font>

746
00:27:30,379 --> 00:27:34,879
<font color="#E5E5E5">out that you can pass the path of pdx</font>

747
00:27:32,659 --> 00:27:36,679
<font color="#E5E5E5">and then you can call build on it and</font>

748
00:27:34,879 --> 00:27:39,949
then you can force the triggering the

749
00:27:36,679 --> 00:27:41,269
parsing to happen tonics<font color="#CCCCCC"> tonics code the</font>

750
00:27:39,950 --> 00:27:43,429
the thing<font color="#E5E5E5"> that I</font><font color="#CCCCCC"> will</font><font color="#E5E5E5"> note down</font><font color="#CCCCCC"> that</font>

751
00:27:41,269 --> 00:27:46,190
<font color="#E5E5E5">build is not documented so</font><font color="#CCCCCC"> I found it</font><font color="#E5E5E5"> by</font>

752
00:27:43,429 --> 00:27:47,990
accident<font color="#E5E5E5"> was just dumping out of</font>

753
00:27:46,190 --> 00:27:50,600
<font color="#CCCCCC">catalog and</font><font color="#E5E5E5"> I found it which is which</font><font color="#CCCCCC"> is</font>

754
00:27:47,990 --> 00:27:52,759
cool<font color="#E5E5E5"> eventually I was able to find two</font>

755
00:27:50,600 --> 00:27:55,370
types<font color="#E5E5E5"> of books the first type of bug</font>

756
00:27:52,759 --> 00:27:57,379
bugs<font color="#CCCCCC"> affected the actual core api's of</font>

757
00:27:55,370 --> 00:27:59,539
<font color="#CCCCCC">onyx</font><font color="#E5E5E5"> and the second type</font><font color="#CCCCCC"> of bugs</font>

758
00:27:57,379 --> 00:28:02,600
<font color="#E5E5E5">actually affected</font><font color="#CCCCCC"> the way these</font><font color="#E5E5E5"> api's</font>

759
00:27:59,539 --> 00:28:04,129
were being used inside<font color="#E5E5E5"> catalog</font><font color="#CCCCCC"> so if you</font>

760
00:28:02,600 --> 00:28:06,230
use them<font color="#CCCCCC"> in a specific way than you can</font>

761
00:28:04,129 --> 00:28:09,769
trigger<font color="#CCCCCC"> heap overflows in</font><font color="#E5E5E5"> the catalog</font>

762
00:28:06,230 --> 00:28:12,409
plugin<font color="#CCCCCC"> that said</font><font color="#E5E5E5"> I ship I think three</font>

763
00:28:09,769 --> 00:28:15,019
bugs for<font color="#E5E5E5"> bugs I think three in catalog</font>

764
00:28:12,409 --> 00:28:16,940
and one in the<font color="#E5E5E5"> quarry pies send them to</font>

765
00:28:15,019 --> 00:28:20,629
Adobe they went back<font color="#E5E5E5"> to us with the fix</font>

766
00:28:16,940 --> 00:28:23,659
<font color="#E5E5E5">and they fixed they basically had to</font>

767
00:28:20,629 --> 00:28:25,699
send the<font color="#E5E5E5"> onyx book to next</font><font color="#CCCCCC"> stack they</font>

768
00:28:23,659 --> 00:28:27,559
fixed it they got back to<font color="#E5E5E5"> us and they</font>

769
00:28:25,700 --> 00:28:29,929
disabled the<font color="#E5E5E5"> build API</font><font color="#CCCCCC"> so</font><font color="#E5E5E5"> basically</font>

770
00:28:27,559 --> 00:28:30,918
according<font color="#E5E5E5"> to them</font><font color="#CCCCCC"> we cannot reach that</font>

771
00:28:29,929 --> 00:28:33,320
<font color="#E5E5E5">commit anymore</font>

772
00:28:30,919 --> 00:28:34,549
they went in like they<font color="#E5E5E5"> went further and</font>

773
00:28:33,320 --> 00:28:35,870
<font color="#E5E5E5">they were like</font><font color="#CCCCCC"> listen we're not</font>

774
00:28:34,549 --> 00:28:38,389
interested<font color="#E5E5E5"> in these indexing bugs</font>

775
00:28:35,870 --> 00:28:40,580
anymore<font color="#CCCCCC"> and they sent us a big email</font>

776
00:28:38,389 --> 00:28:42,799
listing all the possible<font color="#CCCCCC"> vectors that</font>

777
00:28:40,580 --> 00:28:44,408
they think<font color="#CCCCCC"> that</font><font color="#E5E5E5"> you might</font><font color="#CCCCCC"> be</font><font color="#E5E5E5"> able to use</font>

778
00:28:42,799 --> 00:28:47,980
to reach that

779
00:28:44,409 --> 00:28:50,320
you know<font color="#CCCCCC"> code base and inside the email</font>

780
00:28:47,980 --> 00:28:52,419
<font color="#E5E5E5">they basically mentioned the search</font>

781
00:28:50,320 --> 00:28:54,820
<font color="#CCCCCC">plug-in and they were like listen</font><font color="#E5E5E5"> the</font>

782
00:28:52,419 --> 00:28:57,580
catalog stuff is done<font color="#E5E5E5"> you might be</font><font color="#CCCCCC"> able</font>

783
00:28:54,820 --> 00:28:59,470
<font color="#CCCCCC">to reach it through search but every</font>

784
00:28:57,580 --> 00:29:01,269
<font color="#E5E5E5">single method in the Search API is</font>

785
00:28:59,470 --> 00:29:03,519
privileged<font color="#CCCCCC"> so basically you</font><font color="#E5E5E5"> guys cannot</font>

786
00:29:01,269 --> 00:29:06,159
do it unless<font color="#CCCCCC"> you bypass the privileges</font>

787
00:29:03,519 --> 00:29:08,440
<font color="#E5E5E5">so I was like okay</font><font color="#CCCCCC"> but it happened</font>

788
00:29:06,159 --> 00:29:09,820
<font color="#CCCCCC">before</font><font color="#E5E5E5"> we were able to bypass privileges</font>

789
00:29:08,440 --> 00:29:13,210
<font color="#E5E5E5">and we were kind</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> making that argument</font>

790
00:29:09,820 --> 00:29:14,710
<font color="#E5E5E5">in the meantime I think like the day</font>

791
00:29:13,210 --> 00:29:16,840
<font color="#CCCCCC">after or a couple days</font><font color="#E5E5E5"> later</font>

792
00:29:14,710 --> 00:29:18,490
Sebastian pings me and he's like well I

793
00:29:16,840 --> 00:29:21,189
found<font color="#E5E5E5"> a way to</font><font color="#CCCCCC"> actually trigger these</font>

794
00:29:18,490 --> 00:29:23,950
all these<font color="#E5E5E5"> bugs and I was like how he's</font>

795
00:29:21,190 --> 00:29:26,649
like through the search plugin<font color="#CCCCCC"> I was</font>

796
00:29:23,950 --> 00:29:29,620
like no I<font color="#CCCCCC"> don't I don't we said that it</font>

797
00:29:26,649 --> 00:29:33,070
cannot be<font color="#CCCCCC"> done and in fact what he found</font>

798
00:29:29,620 --> 00:29:34,989
out is<font color="#E5E5E5"> that one</font><font color="#CCCCCC"> of the methods</font><font color="#E5E5E5"> if you</font>

799
00:29:33,070 --> 00:29:36,730
pass a<font color="#CCCCCC"> specific argument to it then you</font>

800
00:29:34,990 --> 00:29:39,639
<font color="#E5E5E5">can hit</font><font color="#CCCCCC"> it through</font><font color="#E5E5E5"> that document</font><font color="#CCCCCC"> the</font>

801
00:29:36,730 --> 00:29:42,129
document privileges<font color="#CCCCCC"> so basically how do</font>

802
00:29:39,639 --> 00:29:44,199
we didn't do their job<font color="#E5E5E5"> quite well so in</font>

803
00:29:42,129 --> 00:29:45,908
fact what he did<font color="#CCCCCC"> he used that and</font><font color="#E5E5E5"> we</font>

804
00:29:44,200 --> 00:29:48,340
<font color="#E5E5E5">treated it as a bypass mitigation bypass</font>

805
00:29:45,909 --> 00:29:50,470
and he slammed all these books together

806
00:29:48,340 --> 00:29:53,049
<font color="#E5E5E5">so he eventually sent like nine bugs or</font>

807
00:29:50,470 --> 00:29:57,190
<font color="#E5E5E5">something so I don't be eventually</font>

808
00:29:53,049 --> 00:30:00,240
admitted defeat as well and they started

809
00:29:57,190 --> 00:30:03,340
processing these cases so back to the

810
00:30:00,240 --> 00:30:05,230
<font color="#E5E5E5">untested pointer dereference so this was</font>

811
00:30:03,340 --> 00:30:08,470
initially found by myself through

812
00:30:05,230 --> 00:30:11,529
fuzzing<font color="#E5E5E5"> and it was in I</font><font color="#CCCCCC"> axe start</font>

813
00:30:08,470 --> 00:30:15,100
retrieval session which which is

814
00:30:11,529 --> 00:30:16,389
<font color="#E5E5E5">exported by</font><font color="#CCCCCC"> onyx</font><font color="#E5E5E5"> 32 today RL basically I</font>

815
00:30:15,100 --> 00:30:17,918
called it an untrusted pointer

816
00:30:16,389 --> 00:30:20,740
dereference<font color="#E5E5E5"> servicing calls it an</font>

817
00:30:17,919 --> 00:30:22,750
internal<font color="#CCCCCC"> flow eternal</font><font color="#E5E5E5"> flow which is true</font>

818
00:30:20,740 --> 00:30:24,490
because<font color="#E5E5E5"> you overflow an object and</font>

819
00:30:22,750 --> 00:30:28,870
basically overwrite a file class T

820
00:30:24,490 --> 00:30:31,059
pointer which gets<font color="#E5E5E5"> dereference later the</font>

821
00:30:28,870 --> 00:30:33,309
<font color="#CCCCCC">interesting</font><font color="#E5E5E5"> part is</font><font color="#CCCCCC"> that you can</font>

822
00:30:31,059 --> 00:30:36,070
override<font color="#E5E5E5"> that</font><font color="#CCCCCC"> by class t pointer with a</font>

823
00:30:33,309 --> 00:30:38,830
counter<font color="#CCCCCC"> initially</font><font color="#E5E5E5"> I thought that I</font>

824
00:30:36,070 --> 00:30:40,539
cannot control<font color="#CCCCCC"> this bug I did</font><font color="#E5E5E5"> further</font>

825
00:30:38,830 --> 00:30:43,120
investigation<font color="#E5E5E5"> and turns out you can</font>

826
00:30:40,539 --> 00:30:45,549
<font color="#E5E5E5">increment this counter by duplicating a</font>

827
00:30:43,120 --> 00:30:46,178
certain<font color="#CCCCCC"> object inside</font><font color="#E5E5E5"> the the actual</font>

828
00:30:45,549 --> 00:30:49,389
index file

829
00:30:46,179 --> 00:30:51,250
so I started replicating this object and

830
00:30:49,389 --> 00:30:53,918
I ended up<font color="#E5E5E5"> I ended up with this like 10</font>

831
00:30:51,250 --> 00:30:56,320
megabyte of<font color="#E5E5E5"> index file called located</font>

832
00:30:53,919 --> 00:30:56,840
and eventually I<font color="#E5E5E5"> was</font><font color="#CCCCCC"> able to control it</font>

833
00:30:56,320 --> 00:31:00,230
in

834
00:30:56,840 --> 00:31:03,230
<font color="#E5E5E5">thing meaningful we sent it but we sent</font>

835
00:31:00,230 --> 00:31:04,700
<font color="#E5E5E5">this back to Adobe and basically when</font>

836
00:31:03,230 --> 00:31:06,289
they passed they sent it to<font color="#E5E5E5"> Lex</font><font color="#CCCCCC"> tack-on</font>

837
00:31:04,700 --> 00:31:08,090
they patched it<font color="#CCCCCC"> she Batson got back to</font>

838
00:31:06,289 --> 00:31:11,779
me he's<font color="#CCCCCC"> like I can trigger the bug again</font>

839
00:31:08,090 --> 00:31:13,580
<font color="#CCCCCC">it was like</font><font color="#E5E5E5"> fine</font><font color="#CCCCCC"> send or</font><font color="#E5E5E5"> send me the</font>

840
00:31:11,779 --> 00:31:15,620
crash and it turns out<font color="#CCCCCC"> that they what</font>

841
00:31:13,580 --> 00:31:18,020
they<font color="#CCCCCC"> did they didn't fix</font><font color="#E5E5E5"> the core issue</font>

842
00:31:15,620 --> 00:31:20,360
<font color="#CCCCCC">they</font><font color="#E5E5E5"> added a simple magic</font><font color="#CCCCCC"> value check</font>

843
00:31:18,020 --> 00:31:21,799
and basically<font color="#E5E5E5"> if you get that check</font>

844
00:31:20,360 --> 00:31:25,870
right<font color="#E5E5E5"> and then you can trigger the</font><font color="#CCCCCC"> bug</font>

845
00:31:21,799 --> 00:31:28,210
again we sent<font color="#CCCCCC"> that back</font><font color="#E5E5E5"> to Adobe and</font>

846
00:31:25,870 --> 00:31:30,289
Adobe send it back to Lex<font color="#CCCCCC"> tack</font>

847
00:31:28,210 --> 00:31:32,240
<font color="#E5E5E5">eventually they got back to</font><font color="#CCCCCC"> us</font><font color="#E5E5E5"> and they</font>

848
00:31:30,289 --> 00:31:35,299
were like<font color="#CCCCCC"> listen like stack is</font><font color="#E5E5E5"> not going</font>

849
00:31:32,240 --> 00:31:37,220
<font color="#E5E5E5">to</font><font color="#CCCCCC"> patch this sometime right there they</font>

850
00:31:35,299 --> 00:31:39,860
I think<font color="#E5E5E5"> they they don't have the staff</font>

851
00:31:37,220 --> 00:31:41,179
<font color="#E5E5E5">for</font><font color="#CCCCCC"> that or</font><font color="#E5E5E5"> whatever and they figured</font>

852
00:31:39,860 --> 00:31:42,770
<font color="#E5E5E5">out there's only one solution to it</font>

853
00:31:41,179 --> 00:31:47,779
which is<font color="#E5E5E5"> basically killed the whole</font>

854
00:31:42,770 --> 00:31:49,129
thing<font color="#E5E5E5"> so they'd save the whole</font><font color="#CCCCCC"> Onix you</font>

855
00:31:47,779 --> 00:31:51,110
know<font color="#CCCCCC"> codebase basically if you</font><font color="#E5E5E5"> want to</font>

856
00:31:49,130 --> 00:31:53,179
enable it<font color="#CCCCCC"> you have to do that through</font>

857
00:31:51,110 --> 00:31:55,760
the food that<font color="#E5E5E5"> just I just freaky or</font>

858
00:31:53,179 --> 00:31:58,460
whatever so this is this is<font color="#CCCCCC"> the indexing</font>

859
00:31:55,760 --> 00:32:00,379
stuff<font color="#E5E5E5"> we're gonna go over some file</font>

860
00:31:58,460 --> 00:32:03,559
<font color="#E5E5E5">processing issues</font><font color="#CCCCCC"> Brian's</font><font color="#E5E5E5"> gonna start</font>

861
00:32:00,380 --> 00:32:05,450
<font color="#E5E5E5">off yeah so one of the kind</font><font color="#CCCCCC"> of newest</font>

862
00:32:03,559 --> 00:32:08,928
hottest areas inside of Adobe Reader<font color="#E5E5E5"> is</font>

863
00:32:05,450 --> 00:32:11,690
file parsing vulnerabilities<font color="#CCCCCC"> and the way</font>

864
00:32:08,929 --> 00:32:13,549
that it works is a lot of<font color="#E5E5E5"> it's happening</font>

865
00:32:11,690 --> 00:32:15,260
<font color="#CCCCCC">in image</font><font color="#E5E5E5"> conversion right and so image</font>

866
00:32:13,549 --> 00:32:17,529
conversion<font color="#E5E5E5"> can it will actually take an</font>

867
00:32:15,260 --> 00:32:19,908
image<font color="#E5E5E5"> and try to convert it into a PDF</font>

868
00:32:17,529 --> 00:32:21,470
<font color="#E5E5E5">for display within the application and</font>

869
00:32:19,909 --> 00:32:23,330
<font color="#CCCCCC">it's</font><font color="#E5E5E5"> really nice because you can again</font>

870
00:32:21,470 --> 00:32:24,799
reach a lot<font color="#E5E5E5"> of the back end dll's where</font>

871
00:32:23,330 --> 00:32:27,918
a lot of this older cold code is

872
00:32:24,799 --> 00:32:29,779
including font parsing<font color="#CCCCCC"> JPEG</font><font color="#E5E5E5"> 2000 parsing</font>

873
00:32:27,919 --> 00:32:31,279
etc<font color="#E5E5E5"> and color management graphics</font>

874
00:32:29,779 --> 00:32:32,510
management all<font color="#E5E5E5"> of these different API is</font>

875
00:32:31,279 --> 00:32:34,610
that<font color="#CCCCCC"> you</font><font color="#E5E5E5"> wouldn't normally be able</font><font color="#CCCCCC"> to</font>

876
00:32:32,510 --> 00:32:36,770
get to now the way that it works is that

877
00:32:34,610 --> 00:32:38,270
<font color="#E5E5E5">image image conversion is a plugin</font>

878
00:32:36,770 --> 00:32:40,520
that's actually used to convert those

879
00:32:38,270 --> 00:32:43,100
images to<font color="#E5E5E5"> PDFs like I talked about and</font>

880
00:32:40,520 --> 00:32:45,080
it<font color="#CCCCCC"> can be used you</font><font color="#E5E5E5"> can simply trigger it</font>

881
00:32:43,100 --> 00:32:47,000
by<font color="#CCCCCC"> opening the grip the image file from</font>

882
00:32:45,080 --> 00:32:48,230
within<font color="#E5E5E5"> reader right so it automatically</font>

883
00:32:47,000 --> 00:32:50,270
go<font color="#E5E5E5"> to image conversion and try to</font>

884
00:32:48,230 --> 00:32:52,010
convert it but you can also do it from

885
00:32:50,270 --> 00:32:53,270
JavaScript right so if you're<font color="#E5E5E5"> kind of</font>

886
00:32:52,010 --> 00:32:55,250
<font color="#E5E5E5">trying to deliver a payload where the</font>

887
00:32:53,270 --> 00:32:57,168
<font color="#CCCCCC">actual</font><font color="#E5E5E5"> attack doesn't happen from</font>

888
00:32:55,250 --> 00:32:59,840
opening it<font color="#E5E5E5"> from within reader you can</font>

889
00:32:57,169 --> 00:33:01,460
<font color="#E5E5E5">open it from from JavaScript right</font><font color="#CCCCCC"> and</font>

890
00:32:59,840 --> 00:33:02,959
they<font color="#CCCCCC"> actually</font><font color="#E5E5E5"> leverage a</font><font color="#CCCCCC"> lot</font><font color="#E5E5E5"> of open</font>

891
00:33:01,460 --> 00:33:04,850
source projects<font color="#E5E5E5"> and so you can actually</font>

892
00:33:02,960 --> 00:33:06,890
<font color="#E5E5E5">use like</font><font color="#CCCCCC"> AFL and some of these other</font>

893
00:33:04,850 --> 00:33:09,469
tools and fuzzy fuzzy actual open source

894
00:33:06,890 --> 00:33:10,020
components<font color="#E5E5E5"> and then actually apply those</font>

895
00:33:09,470 --> 00:33:11,700
bugs and

896
00:33:10,020 --> 00:33:14,310
try to<font color="#E5E5E5"> trigger them from with inside</font><font color="#CCCCCC"> of</font>

897
00:33:11,700 --> 00:33:16,080
<font color="#CCCCCC">the the</font><font color="#E5E5E5"> closed source binary itself now</font>

898
00:33:14,310 --> 00:33:17,820
you<font color="#CCCCCC"> can see like we put some put some of</font>

899
00:33:16,080 --> 00:33:19,980
the like stats for the both types of

900
00:33:17,820 --> 00:33:21,840
bugs<font color="#E5E5E5"> that we're getting</font><font color="#CCCCCC"> in</font><font color="#E5E5E5"> this area and</font>

901
00:33:19,980 --> 00:33:24,450
<font color="#E5E5E5">you see</font><font color="#CCCCCC"> back at 2016 really nobody was</font>

902
00:33:21,840 --> 00:33:26,459
looking at it publicly<font color="#E5E5E5"> at least and</font>

903
00:33:24,450 --> 00:33:27,570
sending<font color="#E5E5E5"> bugs to us so just</font><font color="#CCCCCC"> two</font>

904
00:33:26,460 --> 00:33:30,660
<font color="#E5E5E5">out-of-bounds reads but if you look in</font>

905
00:33:27,570 --> 00:33:32,399
2018 it really exploded<font color="#E5E5E5"> right people are</font>

906
00:33:30,660 --> 00:33:35,940
really fuzzing this hard including some

907
00:33:32,400 --> 00:33:37,560
of<font color="#E5E5E5"> the people</font><font color="#CCCCCC"> in this room and receiving</font>

908
00:33:35,940 --> 00:33:38,940
a lot<font color="#CCCCCC"> more bugs in this area and a</font><font color="#E5E5E5"> lot</font>

909
00:33:37,560 --> 00:33:40,409
of the code is<font color="#CCCCCC"> being audited</font><font color="#E5E5E5"> quite</font>

910
00:33:38,940 --> 00:33:42,750
heavily right now which is<font color="#CCCCCC"> interesting</font>

911
00:33:40,410 --> 00:33:45,060
now like I said<font color="#E5E5E5"> you can do EMF parsing</font>

912
00:33:42,750 --> 00:33:47,270
<font color="#E5E5E5">JPEG parsing all of these JPEG 2000</font><font color="#CCCCCC"> TIFF</font>

913
00:33:45,060 --> 00:33:50,129
<font color="#CCCCCC">etcetera so there's a lot</font><font color="#E5E5E5"> of formats to</font>

914
00:33:47,270 --> 00:33:51,990
<font color="#CCCCCC">go fuzz if you're interested</font><font color="#E5E5E5"> in but one</font>

915
00:33:50,130 --> 00:33:53,850
of the most buggy formats<font color="#E5E5E5"> that</font><font color="#CCCCCC"> we have</font>

916
00:33:51,990 --> 00:33:55,800
seen in the program<font color="#E5E5E5"> is actually EMF</font>

917
00:33:53,850 --> 00:33:57,870
<font color="#E5E5E5">right so EMF can actually be parsed by</font>

918
00:33:55,800 --> 00:33:59,340
<font color="#E5E5E5">but I did we read her and Abdul is going</font>

919
00:33:57,870 --> 00:34:01,050
to<font color="#E5E5E5"> cover</font><font color="#CCCCCC"> all other</font><font color="#E5E5E5"> details</font><font color="#CCCCCC"> related to</font>

920
00:33:59,340 --> 00:34:04,199
EMF parsing and the bugs<font color="#E5E5E5"> that we've seen</font>

921
00:34:01,050 --> 00:34:06,720
there so<font color="#CCCCCC"> one one thing I want to mention</font>

922
00:34:04,200 --> 00:34:10,380
<font color="#E5E5E5">that at one point of my life I was</font>

923
00:34:06,720 --> 00:34:11,790
fuzzing<font color="#CCCCCC"> Foxit Foxit reader</font><font color="#E5E5E5"> so I was</font>

924
00:34:10,380 --> 00:34:14,399
fuzzing the<font color="#E5E5E5"> image conversion</font><font color="#CCCCCC"> in</font><font color="#E5E5E5"> a</font><font color="#CCCCCC"> foxy</font>

925
00:34:11,790 --> 00:34:16,409
<font color="#CCCCCC">theater and I found I got this crashing</font>

926
00:34:14,399 --> 00:34:17,730
a JPEG<font color="#CCCCCC"> image so I was like let</font><font color="#E5E5E5"> me test</font>

927
00:34:16,409 --> 00:34:21,000
<font color="#E5E5E5">it in</font><font color="#CCCCCC"> Adobe and basically it crashed</font>

928
00:34:17,730 --> 00:34:22,710
them as well<font color="#E5E5E5"> at one point as well we</font>

929
00:34:21,000 --> 00:34:24,418
were we were doing<font color="#E5E5E5"> everything on Adobe</font>

930
00:34:22,710 --> 00:34:26,130
Reader<font color="#CCCCCC"> and we</font><font color="#E5E5E5"> found a bunch of bugs and</font>

931
00:34:24,418 --> 00:34:28,770
<font color="#E5E5E5">JavaScript we tested them and Foxit and</font>

932
00:34:26,130 --> 00:34:31,290
they actually had<font color="#E5E5E5"> to so you guys if you</font>

933
00:34:28,770 --> 00:34:32,310
<font color="#E5E5E5">guys have a bug here</font><font color="#CCCCCC"> they're</font><font color="#E5E5E5"> okay you</font>

934
00:34:31,290 --> 00:34:36,480
might get it to<font color="#E5E5E5"> hit on the other</font>

935
00:34:32,310 --> 00:34:38,610
software<font color="#CCCCCC"> just note back</font><font color="#E5E5E5"> to AMF</font><font color="#CCCCCC"> so</font>

936
00:34:36,480 --> 00:34:41,990
basically it's a very<font color="#CCCCCC"> old</font><font color="#E5E5E5"> file format</font>

937
00:34:38,610 --> 00:34:46,440
initially<font color="#E5E5E5"> it's</font><font color="#CCCCCC"> wmf</font><font color="#E5E5E5"> basically a 16-bit</font>

938
00:34:41,989 --> 00:34:49,428
format back to windows 3.11<font color="#CCCCCC"> and then it</font>

939
00:34:46,440 --> 00:34:51,659
evolved when<font color="#CCCCCC"> 32-bit GDI</font><font color="#E5E5E5"> has been</font>

940
00:34:49,429 --> 00:34:54,780
introduced and basically it's now EMF

941
00:34:51,659 --> 00:34:56,250
<font color="#E5E5E5">it's documented it's all online</font><font color="#CCCCCC"> most of</font>

942
00:34:54,780 --> 00:34:59,330
the bugs<font color="#CCCCCC"> that we got</font><font color="#E5E5E5"> we're in the</font>

943
00:34:56,250 --> 00:35:02,220
records parsing which<font color="#CCCCCC"> I'm</font><font color="#E5E5E5"> gonna get into</font>

944
00:34:59,330 --> 00:35:04,110
<font color="#E5E5E5">basically it has records</font><font color="#CCCCCC"> a bunch</font><font color="#E5E5E5"> of</font>

945
00:35:02,220 --> 00:35:06,509
records<font color="#E5E5E5"> each record has a type as a size</font>

946
00:35:04,110 --> 00:35:08,670
and a record buffer<font color="#CCCCCC"> but my record</font><font color="#E5E5E5"> buffer</font>

947
00:35:06,510 --> 00:35:11,990
<font color="#E5E5E5">the buffer has</font><font color="#CCCCCC"> a bunch of parameters but</font>

948
00:35:08,670 --> 00:35:11,990
<font color="#E5E5E5">we're not gonna get into</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> in detail</font>

949
00:35:12,350 --> 00:35:16,950
so this<font color="#CCCCCC"> is the the</font><font color="#E5E5E5"> record that we've</font>

950
00:35:15,150 --> 00:35:18,270
been getting<font color="#CCCCCC"> a</font><font color="#E5E5E5"> lot</font><font color="#CCCCCC"> of bugs in which is</font>

951
00:35:16,950 --> 00:35:20,310
the<font color="#CCCCCC"> alpha band which is basically</font>

952
00:35:18,270 --> 00:35:21,840
specifies a block transfer from the

953
00:35:20,310 --> 00:35:22,549
source of it map to a destination

954
00:35:21,840 --> 00:35:24,940
rectangle

955
00:35:22,550 --> 00:35:28,940
so the<font color="#CCCCCC"> bug</font><font color="#E5E5E5"> that we received basically</font>

956
00:35:24,940 --> 00:35:31,760
affect the way the parsing happens<font color="#CCCCCC"> so</font>

957
00:35:28,940 --> 00:35:33,080
before the application attempt so before

958
00:35:31,760 --> 00:35:36,110
the parsing happens<font color="#E5E5E5"> it allocates a</font>

959
00:35:33,080 --> 00:35:38,330
buffer and then it<font color="#E5E5E5"> tries to copy</font><font color="#CCCCCC"> a bunch</font>

960
00:35:36,110 --> 00:35:40,730
of<font color="#E5E5E5"> data to it and then allocates another</font>

961
00:35:38,330 --> 00:35:43,130
buffer<font color="#E5E5E5"> and tries to</font><font color="#CCCCCC"> move it</font><font color="#E5E5E5"> up to the</font>

962
00:35:40,730 --> 00:35:44,840
initial<font color="#E5E5E5"> buffer and not</font><font color="#CCCCCC"> so let</font><font color="#E5E5E5"> me let me</font>

963
00:35:43,130 --> 00:35:47,420
<font color="#CCCCCC">show you the code flow</font><font color="#E5E5E5"> from a high</font><font color="#CCCCCC"> level</font>

964
00:35:44,840 --> 00:35:50,180
so initially<font color="#E5E5E5"> it starts off</font><font color="#CCCCCC"> with parsing</font>

965
00:35:47,420 --> 00:35:52,280
a bunch of EMF fields<font color="#E5E5E5"> then it allocates</font>

966
00:35:50,180 --> 00:35:55,790
a buffer<font color="#E5E5E5"> right then it chooses the</font>

967
00:35:52,280 --> 00:35:58,280
compression based<font color="#E5E5E5"> on that then it goes</font>

968
00:35:55,790 --> 00:36:00,350
to<font color="#E5E5E5"> a parsing function a bitmap parsing</font>

969
00:35:58,280 --> 00:36:02,450
function in that parsing function

970
00:36:00,350 --> 00:36:05,900
there's a switch case based<font color="#E5E5E5"> on the bit</font>

971
00:36:02,450 --> 00:36:08,660
count in these switch cases it allocates

972
00:36:05,900 --> 00:36:11,120
another temporary buffer then it puts

973
00:36:08,660 --> 00:36:13,430
bitmap data in it<font color="#CCCCCC"> and a temp and</font><font color="#E5E5E5"> enters</font>

974
00:36:11,120 --> 00:36:15,140
a copy loop<font color="#E5E5E5"> and it copies it</font><font color="#CCCCCC"> to the</font>

975
00:36:13,430 --> 00:36:17,270
initial buffer there which is quite

976
00:36:15,140 --> 00:36:21,170
innocent but I don't be managed to

977
00:36:17,270 --> 00:36:22,610
<font color="#E5E5E5">Massacre the whole thing</font><font color="#CCCCCC"> so first bucket</font>

978
00:36:21,170 --> 00:36:25,160
<font color="#E5E5E5">I'm gonna be talking about is a heap</font>

979
00:36:22,610 --> 00:36:28,370
buffer overflow let's go<font color="#E5E5E5"> back to the</font>

980
00:36:25,160 --> 00:36:30,140
flow so it starts parsing a bunch of EMF

981
00:36:28,370 --> 00:36:32,750
fields<font color="#E5E5E5"> which I have highlighted here</font>

982
00:36:30,140 --> 00:36:36,950
<font color="#E5E5E5">these are the ones</font><font color="#CCCCCC"> that are relevant to</font>

983
00:36:32,750 --> 00:36:39,080
this bug it allocates the buffer<font color="#E5E5E5"> based</font>

984
00:36:36,950 --> 00:36:42,500
on the<font color="#E5E5E5"> following formula which is X</font>

985
00:36:39,080 --> 00:36:45,140
source<font color="#CCCCCC"> x</font><font color="#E5E5E5"> 304 based on the value of</font><font color="#CCCCCC"> bit</font>

986
00:36:42,500 --> 00:36:47,840
<font color="#CCCCCC">come so if bit count is 18 then it</font>

987
00:36:45,140 --> 00:36:52,670
multiplies<font color="#CCCCCC"> it by 3 if not multiplies it</font>

988
00:36:47,840 --> 00:36:57,260
by 4 can you guys see the bug yeah<font color="#E5E5E5"> I</font>

989
00:36:52,670 --> 00:36:58,910
think so so basically if<font color="#E5E5E5"> you consider</font>

990
00:36:57,260 --> 00:37:01,580
the following<font color="#E5E5E5"> values 5 5 5 5 6</font>

991
00:36:58,910 --> 00:37:05,120
<font color="#CCCCCC">multiplied by 3 then it's gonna</font><font color="#E5E5E5"> wrap</font>

992
00:37:01,580 --> 00:37:08,990
it's gonna end up<font color="#E5E5E5"> in a size 2 buffer and</font>

993
00:37:05,120 --> 00:37:10,700
<font color="#E5E5E5">basically kind of integer overflow the</font>

994
00:37:08,990 --> 00:37:12,859
<font color="#E5E5E5">compression that</font><font color="#CCCCCC"> we used in this case</font><font color="#E5E5E5"> is</font>

995
00:37:10,700 --> 00:37:15,950
RGB so basically in Acrobat it supports

996
00:37:12,860 --> 00:37:18,170
<font color="#E5E5E5">the following compressions RGB</font><font color="#CCCCCC"> r8 or</font><font color="#E5E5E5"> l9</font>

997
00:37:15,950 --> 00:37:20,779
<font color="#E5E5E5">and bit fields which which are in</font><font color="#CCCCCC"> one</font>

998
00:37:18,170 --> 00:37:22,850
<font color="#CCCCCC">switch case the the bug that</font><font color="#E5E5E5"> I'm gonna</font>

999
00:37:20,780 --> 00:37:25,880
be<font color="#E5E5E5"> covering basically covers the first</font>

1000
00:37:22,850 --> 00:37:29,690
<font color="#E5E5E5">compression which is RGB so when the</font>

1001
00:37:25,880 --> 00:37:33,530
parsing happens we overflowed<font color="#E5E5E5"> the buffer</font>

1002
00:37:29,690 --> 00:37:34,880
<font color="#E5E5E5">Vantage</font><font color="#CCCCCC"> err and then we go to the switch</font>

1003
00:37:33,530 --> 00:37:36,330
case based<font color="#E5E5E5"> on the bit count</font>

1004
00:37:34,880 --> 00:37:38,910
<font color="#CCCCCC">allocator buffer</font>

1005
00:37:36,330 --> 00:37:42,360
got the bitmap<font color="#E5E5E5"> and</font><font color="#CCCCCC"> then enter the copy</font>

1006
00:37:38,910 --> 00:37:44,009
<font color="#E5E5E5">loop and the copy loop the counter is</font><font color="#CCCCCC"> CX</font>

1007
00:37:42,360 --> 00:37:46,050
source which is something we control and

1008
00:37:44,010 --> 00:37:47,930
<font color="#E5E5E5">basically overflow buffer which is</font>

1009
00:37:46,050 --> 00:37:50,040
pretty simple

1010
00:37:47,930 --> 00:37:53,009
does this<font color="#E5E5E5"> is the first allocation that</font>

1011
00:37:50,040 --> 00:37:55,230
happens there as for the patch<font color="#CCCCCC"> I don't</font>

1012
00:37:53,010 --> 00:37:59,400
<font color="#E5E5E5">think they actually understood where the</font>

1013
00:37:55,230 --> 00:38:01,320
bug is<font color="#CCCCCC"> so something I did</font><font color="#E5E5E5"> not I did</font><font color="#CCCCCC"> not</font>

1014
00:37:59,400 --> 00:38:03,330
mention before<font color="#CCCCCC"> the allocation happens</font>

1015
00:38:01,320 --> 00:38:05,640
<font color="#E5E5E5">there's a small multiplication that's</font>

1016
00:38:03,330 --> 00:38:09,210
done it not applies<font color="#CCCCCC"> B width by the</font>

1017
00:38:05,640 --> 00:38:11,009
<font color="#CCCCCC">height multiplied by 3 or 4 it's not a</font>

1018
00:38:09,210 --> 00:38:14,190
check for integer overflow it's

1019
00:38:11,010 --> 00:38:15,900
basically a check whether it exceeds a

1020
00:38:14,190 --> 00:38:17,280
certain size for<font color="#E5E5E5"> allocation basically if</font>

1021
00:38:15,900 --> 00:38:18,780
it's exceed a certain size then it's

1022
00:38:17,280 --> 00:38:21,660
gonna tell you not enough memory<font color="#E5E5E5"> if not</font>

1023
00:38:18,780 --> 00:38:25,080
then go<font color="#CCCCCC"> ahead so what they did</font><font color="#E5E5E5"> they</font>

1024
00:38:21,660 --> 00:38:27,060
thought that<font color="#E5E5E5"> B height is the problem</font><font color="#CCCCCC"> so</font>

1025
00:38:25,080 --> 00:38:29,430
they entered<font color="#E5E5E5"> another check</font><font color="#CCCCCC"> so basically</font>

1026
00:38:27,060 --> 00:38:30,509
it fails because<font color="#E5E5E5"> if you consider the</font>

1027
00:38:29,430 --> 00:38:32,520
following

1028
00:38:30,510 --> 00:38:34,200
because if<font color="#CCCCCC"> B hide</font><font color="#E5E5E5"> this one then</font>

1029
00:38:32,520 --> 00:38:37,050
<font color="#E5E5E5">basically it's gonna bypass a check and</font>

1030
00:38:34,200 --> 00:38:38,460
it's gonna allocate<font color="#E5E5E5"> exactly the same</font>

1031
00:38:37,050 --> 00:38:41,070
<font color="#CCCCCC">weight allocated before so what</font><font color="#E5E5E5"> they did</font>

1032
00:38:38,460 --> 00:38:43,880
<font color="#E5E5E5">they</font><font color="#CCCCCC"> basically just made sure</font><font color="#E5E5E5"> that the</font>

1033
00:38:41,070 --> 00:38:46,050
pub that<font color="#E5E5E5"> we send them does not hit</font>

1034
00:38:43,880 --> 00:38:47,520
<font color="#CCCCCC">regardless of whether what you guys</font>

1035
00:38:46,050 --> 00:38:50,790
<font color="#E5E5E5">controlling</font><font color="#CCCCCC"> the weight is what</font><font color="#E5E5E5"> you guys</font>

1036
00:38:47,520 --> 00:38:52,500
do not control so I'm not gonna go<font color="#CCCCCC"> over</font>

1037
00:38:50,790 --> 00:38:54,270
the final fix<font color="#E5E5E5"> because they basically</font>

1038
00:38:52,500 --> 00:38:55,770
fixed both bugs I'm gonna be talking

1039
00:38:54,270 --> 00:38:59,430
<font color="#E5E5E5">about in one</font><font color="#CCCCCC"> fix which</font><font color="#E5E5E5"> I'm we're gonna</font>

1040
00:38:55,770 --> 00:39:01,290
mention later<font color="#CCCCCC"> so the last book that</font><font color="#E5E5E5"> I'm</font>

1041
00:38:59,430 --> 00:39:05,730
gonna<font color="#E5E5E5"> be talking about is an outer bound</font>

1042
00:39:01,290 --> 00:39:07,740
read<font color="#E5E5E5"> I'm going back to the code flow it</font>

1043
00:39:05,730 --> 00:39:09,120
allocates the buffer<font color="#E5E5E5"> this time we're not</font>

1044
00:39:07,740 --> 00:39:11,040
gonna overflow that buffer we're not

1045
00:39:09,120 --> 00:39:13,920
gonna trigger<font color="#E5E5E5"> the bug</font><font color="#CCCCCC"> through the</font>

1046
00:39:11,040 --> 00:39:16,230
compression this time the bit debit

1047
00:39:13,920 --> 00:39:19,200
count is 20 and then we allocate a

1048
00:39:16,230 --> 00:39:20,760
temporary buffer the temporary buffer is

1049
00:39:19,200 --> 00:39:23,310
allocated using<font color="#E5E5E5"> this formula which is</font>

1050
00:39:20,760 --> 00:39:26,100
<font color="#E5E5E5">basically</font><font color="#CCCCCC"> bet count x width shifted by</font>

1051
00:39:23,310 --> 00:39:30,750
<font color="#CCCCCC">three and if you guys</font><font color="#E5E5E5"> considered these</font>

1052
00:39:26,100 --> 00:39:32,069
values it's 20 x 8<font color="#E5E5E5"> 0 0 0 1 to the</font><font color="#CCCCCC"> pi/3</font>

1053
00:39:30,750 --> 00:39:34,140
<font color="#E5E5E5">and then it's gonna overflow and you're</font>

1054
00:39:32,070 --> 00:39:36,840
gonna<font color="#E5E5E5"> end up with</font><font color="#CCCCCC"> a buffer</font><font color="#E5E5E5"> of size 4</font>

1055
00:39:34,140 --> 00:39:41,520
before<font color="#CCCCCC"> so basically they failed every</font>

1056
00:39:36,840 --> 00:39:43,440
allocation<font color="#E5E5E5"> here then you</font><font color="#CCCCCC"> basically enter</font>

1057
00:39:41,520 --> 00:39:45,450
a copy loop the copy loop is based on

1058
00:39:43,440 --> 00:39:47,430
the<font color="#CCCCCC"> x axis</font><font color="#E5E5E5"> or counter and then you're</font>

1059
00:39:45,450 --> 00:39:48,689
gonna trigger<font color="#E5E5E5"> an outer bound read when</font>

1060
00:39:47,430 --> 00:39:54,089
accessing<font color="#CCCCCC"> that time free</font><font color="#E5E5E5"> above</font>

1061
00:39:48,690 --> 00:39:57,720
so how<font color="#E5E5E5"> did they fix this guy so they</font>

1062
00:39:54,089 --> 00:39:59,549
went back five<font color="#E5E5E5"> goals all the way back</font>

1063
00:39:57,720 --> 00:40:02,459
because<font color="#E5E5E5"> they figured they have to fix it</font>

1064
00:39:59,549 --> 00:40:05,130
from<font color="#E5E5E5"> the root cause right</font><font color="#CCCCCC"> and in this</font>

1065
00:40:02,460 --> 00:40:07,020
case I think it was<font color="#CCCCCC"> the</font><font color="#E5E5E5"> same developer</font>

1066
00:40:05,130 --> 00:40:11,280
he basically thought that<font color="#E5E5E5"> seven</font><font color="#CCCCCC"> ffffff</font>

1067
00:40:07,020 --> 00:40:12,660
is the value that<font color="#CCCCCC"> we should and he just</font>

1068
00:40:11,280 --> 00:40:15,710
<font color="#E5E5E5">won I wanted to make</font><font color="#CCCCCC"> sure</font><font color="#E5E5E5"> that the value</font>

1069
00:40:12,660 --> 00:40:19,589
is doesn't<font color="#E5E5E5"> have</font><font color="#CCCCCC"> enough of that</font><font color="#E5E5E5"> in fact</font>

1070
00:40:15,710 --> 00:40:22,289
this<font color="#E5E5E5"> is the comparison here</font><font color="#CCCCCC"> so in fact</font>

1071
00:40:19,589 --> 00:40:24,029
<font color="#E5E5E5">if we consider the following values</font>

1072
00:40:22,289 --> 00:40:26,460
because we<font color="#CCCCCC"> control all</font><font color="#E5E5E5"> the all the</font>

1073
00:40:24,030 --> 00:40:29,730
values right<font color="#CCCCCC"> four multiplies by four</font>

1074
00:40:26,460 --> 00:40:32,369
zero zero<font color="#CCCCCC"> zero</font><font color="#E5E5E5"> two shifted by three then</font>

1075
00:40:29,730 --> 00:40:35,910
you're gonna have<font color="#E5E5E5"> a small</font><font color="#CCCCCC"> gopher as well</font>

1076
00:40:32,369 --> 00:40:38,549
and then<font color="#E5E5E5"> you get at the</font><font color="#CCCCCC"> park again</font><font color="#E5E5E5"> so I</font>

1077
00:40:35,910 --> 00:40:40,589
mentioned that all<font color="#E5E5E5"> these bugs exist in</font>

1078
00:40:38,549 --> 00:40:43,200
the RGB compression which<font color="#CCCCCC"> is the first</font>

1079
00:40:40,589 --> 00:40:45,538
case<font color="#E5E5E5"> nevertheless we did</font><font color="#CCCCCC"> a little</font><font color="#E5E5E5"> bit of</font>

1080
00:40:43,200 --> 00:40:48,538
<font color="#CCCCCC">investigation</font><font color="#E5E5E5"> turns out that case</font><font color="#CCCCCC"> zero</font>

1081
00:40:45,539 --> 00:40:50,970
<font color="#E5E5E5">and case three the functions are almost</font>

1082
00:40:48,539 --> 00:40:52,319
identical<font color="#CCCCCC"> with</font><font color="#E5E5E5"> a slight change in case</font>

1083
00:40:50,970 --> 00:40:55,200
<font color="#E5E5E5">three so basically all the bugs that</font><font color="#CCCCCC"> you</font>

1084
00:40:52,319 --> 00:40:56,819
can trigger<font color="#E5E5E5"> in case 0 which is</font>

1085
00:40:55,200 --> 00:40:59,460
compression<font color="#E5E5E5"> RGB can be actually</font>

1086
00:40:56,819 --> 00:41:01,640
<font color="#E5E5E5">triggered the same exact bugs and and</font>

1087
00:40:59,460 --> 00:41:05,069
the<font color="#E5E5E5"> other function which is</font><font color="#CCCCCC"> fascinating</font>

1088
00:41:01,640 --> 00:41:07,410
so that said we sent all this to Adobe

1089
00:41:05,069 --> 00:41:08,849
and they basically<font color="#E5E5E5"> figured out there</font>

1090
00:41:07,410 --> 00:41:14,009
there's only<font color="#E5E5E5"> one way to fix it</font>

1091
00:41:08,849 --> 00:41:16,920
kill the whole thing yes<font color="#CCCCCC"> so basically</font>

1092
00:41:14,010 --> 00:41:19,980
they<font color="#E5E5E5"> disabled</font><font color="#CCCCCC"> EMF parsing and you can</font>

1093
00:41:16,920 --> 00:41:22,020
enable through the history<font color="#E5E5E5"> the also I</font>

1094
00:41:19,980 --> 00:41:24,869
<font color="#E5E5E5">think they killed</font><font color="#CCCCCC"> XPS parsing because</font>

1095
00:41:22,020 --> 00:41:26,880
they got<font color="#CCCCCC"> touch</font><font color="#E5E5E5"> really bad as well so</font>

1096
00:41:24,869 --> 00:41:29,940
that's<font color="#E5E5E5"> that's basically</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> and give</font><font color="#CCCCCC"> it</font>

1097
00:41:26,880 --> 00:41:31,440
to<font color="#E5E5E5"> Brian</font><font color="#CCCCCC"> to conclude yeah so in</font>

1098
00:41:29,940 --> 00:41:34,190
conclusion<font color="#E5E5E5"> I mean obviously we're having</font>

1099
00:41:31,440 --> 00:41:36,809
<font color="#E5E5E5">lots of fun at the</font><font color="#CCCCCC"> expense of Adobe but</font>

1100
00:41:34,190 --> 00:41:37,920
but you know we wanted to like in

1101
00:41:36,809 --> 00:41:39,569
<font color="#CCCCCC">reality what we really</font><font color="#E5E5E5"> did is only</font>

1102
00:41:37,920 --> 00:41:40,770
<font color="#CCCCCC">covered like four pieces</font><font color="#E5E5E5"> of the attack</font>

1103
00:41:39,569 --> 00:41:42,299
surface right that are that<font color="#E5E5E5"> are</font>

1104
00:41:40,770 --> 00:41:43,799
interesting right so if we<font color="#E5E5E5"> look back at</font>

1105
00:41:42,299 --> 00:41:45,270
the general<font color="#E5E5E5"> architecture</font><font color="#CCCCCC"> the real</font>

1106
00:41:43,799 --> 00:41:47,130
question that<font color="#E5E5E5"> we have is like what</font>

1107
00:41:45,270 --> 00:41:48,839
exactly<font color="#CCCCCC"> is going</font><font color="#E5E5E5"> on in that codebase</font>

1108
00:41:47,130 --> 00:41:50,400
right so we want<font color="#E5E5E5"> to you know if we're</font>

1109
00:41:48,839 --> 00:41:52,470
seeing<font color="#E5E5E5"> the same bugs over and over again</font>

1110
00:41:50,400 --> 00:41:54,720
where<font color="#E5E5E5"> are we seeing regressions happen</font>

1111
00:41:52,470 --> 00:41:56,879
when are the regressions happening

1112
00:41:54,720 --> 00:41:58,140
how fast are they discovered which means

1113
00:41:56,880 --> 00:42:00,180
how fast<font color="#E5E5E5"> can I stack or take advantage</font>

1114
00:41:58,140 --> 00:42:01,859
<font color="#CCCCCC">of just basically</font><font color="#E5E5E5"> patch</font><font color="#CCCCCC"> tipping the bug</font>

1115
00:42:00,180 --> 00:42:02,288
and finding the bypass right<font color="#CCCCCC"> there's an</font>

1116
00:42:01,859 --> 00:42:03,819
entire

1117
00:42:02,289 --> 00:42:06,249
<font color="#CCCCCC">three out there just</font><font color="#E5E5E5"> for generating</font><font color="#CCCCCC"> and</font>

1118
00:42:03,819 --> 00:42:07,359
<font color="#CCCCCC">APO sees right</font><font color="#E5E5E5"> so if you look and they</font>

1119
00:42:06,249 --> 00:42:08,678
<font color="#CCCCCC">spend a little bit</font><font color="#E5E5E5"> more time just</font>

1120
00:42:07,359 --> 00:42:10,269
looking<font color="#CCCCCC"> at Adobe stuff you'll be able to</font>

1121
00:42:08,679 --> 00:42:12,429
get into the<font color="#E5E5E5"> industry of the</font><font color="#CCCCCC"> zero</font><font color="#E5E5E5"> day</font>

1122
00:42:10,269 --> 00:42:13,629
POC<font color="#E5E5E5"> so that's you know it's it's kind of</font>

1123
00:42:12,429 --> 00:42:15,309
interesting<font color="#E5E5E5"> so if we actually go back</font>

1124
00:42:13,630 --> 00:42:16,479
<font color="#CCCCCC">and highlight all of</font><font color="#E5E5E5"> the pieces of the</font>

1125
00:42:15,309 --> 00:42:19,660
attack surface<font color="#E5E5E5"> where we've had</font>

1126
00:42:16,479 --> 00:42:22,749
regressions occur it gets basically<font color="#E5E5E5"> all</font>

1127
00:42:19,660 --> 00:42:24,549
<font color="#E5E5E5">red right so you know that you know when</font>

1128
00:42:22,749 --> 00:42:26,019
we looking at<font color="#E5E5E5"> the codebase and we're</font>

1129
00:42:24,549 --> 00:42:28,299
spending a lot<font color="#CCCCCC"> of time analyzing</font><font color="#E5E5E5"> these</font>

1130
00:42:26,019 --> 00:42:30,129
these coat the the components you know

1131
00:42:28,299 --> 00:42:31,538
it's it's showing up<font color="#CCCCCC"> over and over</font><font color="#E5E5E5"> and</font>

1132
00:42:30,130 --> 00:42:33,189
<font color="#CCCCCC">over again</font><font color="#E5E5E5"> now you have to understand</font>

1133
00:42:31,539 --> 00:42:34,989
like<font color="#CCCCCC"> that</font><font color="#E5E5E5"> in big software manufacturer</font>

1134
00:42:33,189 --> 00:42:36,578
having four months<font color="#CCCCCC"> to patch a bug</font><font color="#E5E5E5"> you</font>

1135
00:42:34,989 --> 00:42:38,949
<font color="#CCCCCC">know lots of pressure a</font><font color="#E5E5E5"> lot</font><font color="#CCCCCC"> of you know</font>

1136
00:42:36,579 --> 00:42:40,359
bugs<font color="#E5E5E5"> coming in it's a it is actually a</font>

1137
00:42:38,949 --> 00:42:41,410
<font color="#E5E5E5">challenge and so like if we look at the</font>

1138
00:42:40,359 --> 00:42:42,910
<font color="#E5E5E5">final thoughts</font><font color="#CCCCCC"> I</font><font color="#E5E5E5"> like to kind of</font>

1139
00:42:41,410 --> 00:42:45,519
separate them between defensive and

1140
00:42:42,910 --> 00:42:46,899
offensive<font color="#CCCCCC"> perspectives just because it's</font>

1141
00:42:45,519 --> 00:42:47,890
you know we're at offensive<font color="#E5E5E5"> console</font>

1142
00:42:46,900 --> 00:42:50,559
we're<font color="#CCCCCC"> gonna look</font><font color="#E5E5E5"> at the offensive side</font>

1143
00:42:47,890 --> 00:42:51,189
<font color="#E5E5E5">but patching can be very very</font>

1144
00:42:50,559 --> 00:42:53,259
<font color="#CCCCCC">challenging</font>

1145
00:42:51,189 --> 00:42:54,910
right so not<font color="#CCCCCC"> only like us in the</font>

1146
00:42:53,259 --> 00:42:56,650
security<font color="#CCCCCC"> world like we live and breathe</font>

1147
00:42:54,910 --> 00:42:58,328
<font color="#CCCCCC">all</font><font color="#E5E5E5"> of these different vulnerability</font>

1148
00:42:56,650 --> 00:42:59,439
types we spend a lot<font color="#CCCCCC"> of time looking</font><font color="#E5E5E5"> at</font>

1149
00:42:58,329 --> 00:43:01,539
the<font color="#E5E5E5"> codebase</font><font color="#CCCCCC"> you can imagine</font><font color="#E5E5E5"> a</font>

1150
00:42:59,439 --> 00:43:04,239
sustaining engineer who gets the bug

1151
00:43:01,539 --> 00:43:05,979
from their<font color="#E5E5E5"> security</font><font color="#CCCCCC"> I mailbox</font><font color="#E5E5E5"> has to go</font>

1152
00:43:04,239 --> 00:43:07,089
in and<font color="#CCCCCC"> analyze all</font><font color="#E5E5E5"> this stuff and like</font>

1153
00:43:05,979 --> 00:43:09,069
they're getting<font color="#E5E5E5"> lots of different bugs</font>

1154
00:43:07,089 --> 00:43:10,209
and so trying<font color="#CCCCCC"> to fully understand all</font>

1155
00:43:09,069 --> 00:43:11,829
the proof<font color="#E5E5E5"> of concepts it can be really</font>

1156
00:43:10,209 --> 00:43:14,078
challenging<font color="#E5E5E5"> for them because they may</font>

1157
00:43:11,829 --> 00:43:16,689
not<font color="#CCCCCC"> be as passionate</font><font color="#E5E5E5"> about the code base</font>

1158
00:43:14,079 --> 00:43:17,769
as we are right but<font color="#E5E5E5"> but in this case you</font>

1159
00:43:16,689 --> 00:43:18,999
know we're poking at<font color="#CCCCCC"> it though we were</font>

1160
00:43:17,769 --> 00:43:20,618
making fun<font color="#CCCCCC"> of</font><font color="#E5E5E5"> it they'll be</font><font color="#CCCCCC"> a little bit</font>

1161
00:43:18,999 --> 00:43:22,269
having some fun<font color="#E5E5E5"> with them but Adobe's</font>

1162
00:43:20,619 --> 00:43:24,309
not the only vendor struggling with this

1163
00:43:22,269 --> 00:43:25,779
<font color="#E5E5E5">right there's a lot of failed patches</font>

1164
00:43:24,309 --> 00:43:27,880
coming<font color="#E5E5E5"> out in fact Patch Tuesday was</font>

1165
00:43:25,779 --> 00:43:30,939
what this week and we're already aware

1166
00:43:27,880 --> 00:43:34,029
<font color="#E5E5E5">of failed patches in the Microsoft</font>

1167
00:43:30,939 --> 00:43:36,158
patches that occurred<font color="#E5E5E5"> right so it's</font><font color="#CCCCCC"> it's</font>

1168
00:43:34,029 --> 00:43:37,959
happening<font color="#CCCCCC"> across the industry</font><font color="#E5E5E5"> and and if</font>

1169
00:43:36,159 --> 00:43:39,549
you<font color="#E5E5E5"> look at the under verticals like</font>

1170
00:43:37,959 --> 00:43:41,109
we're talking<font color="#CCCCCC"> about Adobe</font><font color="#E5E5E5"> and kind of</font>

1171
00:43:39,549 --> 00:43:42,939
<font color="#E5E5E5">these big-name vendors but if you look</font>

1172
00:43:41,109 --> 00:43:45,669
at the other verticals like SCADA<font color="#E5E5E5"> and</font>

1173
00:43:42,939 --> 00:43:47,078
iio<font color="#CCCCCC"> T there's a significant</font><font color="#E5E5E5"> amount of</font>

1174
00:43:45,669 --> 00:43:48,848
failed patching going on and we'll<font color="#CCCCCC"> be</font>

1175
00:43:47,079 --> 00:43:50,799
talking<font color="#E5E5E5"> about that later later in the</font>

1176
00:43:48,849 --> 00:43:52,689
year more<font color="#CCCCCC"> than</font><font color="#E5E5E5"> likely</font><font color="#CCCCCC"> where there's</font>

1177
00:43:50,799 --> 00:43:53,979
there's so much failure going on

1178
00:43:52,689 --> 00:43:55,749
<font color="#CCCCCC">wouldn't</font><font color="#E5E5E5"> release the patches</font><font color="#CCCCCC"> that it</font>

1179
00:43:53,979 --> 00:43:58,749
could almost be<font color="#E5E5E5"> considered fraud right</font>

1180
00:43:55,749 --> 00:44:00,038
<font color="#E5E5E5">so you know looking and a lot of what</font>

1181
00:43:58,749 --> 00:44:01,718
the vendors are<font color="#E5E5E5"> doing</font><font color="#CCCCCC"> is you know</font>

1182
00:44:00,039 --> 00:44:02,949
eliminating those<font color="#E5E5E5"> local bases they're</font>

1183
00:44:01,719 --> 00:44:04,359
not even going<font color="#E5E5E5"> and fixing the bugs</font>

1184
00:44:02,949 --> 00:44:05,829
anymore<font color="#E5E5E5"> they're</font><font color="#CCCCCC"> just saying like forget</font>

1185
00:44:04,359 --> 00:44:07,719
it<font color="#E5E5E5"> we're just going</font><font color="#CCCCCC"> to disable</font><font color="#E5E5E5"> the</font>

1186
00:44:05,829 --> 00:44:09,099
entire<font color="#E5E5E5"> thing you know nobody's using</font>

1187
00:44:07,719 --> 00:44:11,049
<font color="#E5E5E5">this code base we're just going</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> get</font>

1188
00:44:09,099 --> 00:44:12,549
rid<font color="#E5E5E5"> of the whole thing</font><font color="#CCCCCC"> you know which</font><font color="#E5E5E5"> is</font>

1189
00:44:11,049 --> 00:44:14,049
it<font color="#CCCCCC"> which is a viable solution and maybe</font>

1190
00:44:12,549 --> 00:44:15,440
<font color="#E5E5E5">the only viable solution if you don't</font>

1191
00:44:14,049 --> 00:44:16,970
have<font color="#E5E5E5"> access to the code or the</font>

1192
00:44:15,440 --> 00:44:18,319
<font color="#E5E5E5">purrs have left and if you're not</font>

1193
00:44:16,970 --> 00:44:20,328
<font color="#E5E5E5">interested in supporting that stuff you</font>

1194
00:44:18,319 --> 00:44:22,009
know<font color="#E5E5E5"> make</font><font color="#CCCCCC"> it a really</font><font color="#E5E5E5"> painful on the</font>

1195
00:44:20,329 --> 00:44:24,410
<font color="#CCCCCC">end-user to actually go use some of that</font>

1196
00:44:22,010 --> 00:44:26,329
functionality<font color="#CCCCCC"> that they're</font><font color="#E5E5E5"> trying to get</font>

1197
00:44:24,410 --> 00:44:28,310
access<font color="#CCCCCC"> to now from</font><font color="#E5E5E5"> the offensive</font>

1198
00:44:26,329 --> 00:44:30,200
perspective obviously<font color="#CCCCCC"> patch tipping is</font>

1199
00:44:28,310 --> 00:44:31,490
going to be<font color="#CCCCCC"> extremely valuable when</font>

1200
00:44:30,200 --> 00:44:33,200
you're when you're<font color="#CCCCCC"> dealing with code</font>

1201
00:44:31,490 --> 00:44:35,240
bases where you know<font color="#E5E5E5"> Pat failed patches</font>

1202
00:44:33,200 --> 00:44:36,828
are occurring quite often<font color="#CCCCCC"> and you can</font>

1203
00:44:35,240 --> 00:44:38,390
use that to go find new variants like

1204
00:44:36,829 --> 00:44:39,770
for example the proof of concept<font color="#CCCCCC"> that</font>

1205
00:44:38,390 --> 00:44:41,210
that Jaisal talked about at the<font color="#CCCCCC"> very</font>

1206
00:44:39,770 --> 00:44:43,190
<font color="#CCCCCC">beginning of the</font><font color="#E5E5E5"> presentation where they</font>

1207
00:44:41,210 --> 00:44:45,170
didn't fix<font color="#CCCCCC"> in the else clause</font><font color="#E5E5E5"> right you</font>

1208
00:44:43,190 --> 00:44:46,670
can but you know do a patch<font color="#E5E5E5"> diff and go</font>

1209
00:44:45,170 --> 00:44:49,010
look in the else<font color="#CCCCCC"> clause right</font><font color="#E5E5E5"> you know</font>

1210
00:44:46,670 --> 00:44:51,319
even project<font color="#E5E5E5"> zero isthat one so I know</font>

1211
00:44:49,010 --> 00:44:53,359
<font color="#E5E5E5">like when we were doing the the proof</font>

1212
00:44:51,319 --> 00:44:56,290
<font color="#CCCCCC">consoles you wanted to mention</font><font color="#E5E5E5"> the close</font>

1213
00:44:53,359 --> 00:44:59,270
<font color="#CCCCCC">dock thing Brian</font><font color="#E5E5E5"> had shown that</font>

1214
00:44:56,290 --> 00:45:01,849
<font color="#E5E5E5">basically just replacing</font><font color="#CCCCCC"> apt</font><font color="#E5E5E5"> close dock</font>

1215
00:44:59,270 --> 00:45:03,800
with<font color="#E5E5E5"> the exact menu item close was</font>

1216
00:45:01,849 --> 00:45:05,480
sufficient<font color="#E5E5E5"> to trigger a bug there was</font>

1217
00:45:03,800 --> 00:45:07,099
one that I wanted<font color="#CCCCCC"> to</font><font color="#E5E5E5"> bring up then and I</font>

1218
00:45:05,480 --> 00:45:09,440
didn't remember<font color="#CCCCCC"> until a couple slides</font>

1219
00:45:07,099 --> 00:45:12,200
later but<font color="#CCCCCC"> Abdulle found a bypass where I</font>

1220
00:45:09,440 --> 00:45:14,240
was<font color="#E5E5E5"> just calling</font><font color="#CCCCCC"> close</font><font color="#E5E5E5"> dock twice to now</font>

1221
00:45:12,200 --> 00:45:14,899
trigger<font color="#CCCCCC"> the use after free that's</font><font color="#E5E5E5"> just</font>

1222
00:45:14,240 --> 00:45:17,540
ridiculous

1223
00:45:14,900 --> 00:45:18,890
yeah so you just you know spending<font color="#CCCCCC"> a lot</font>

1224
00:45:17,540 --> 00:45:20,869
of time looking<font color="#CCCCCC"> at the proof</font><font color="#E5E5E5"> of concepts</font>

1225
00:45:18,890 --> 00:45:22,910
<font color="#CCCCCC">that</font><font color="#E5E5E5"> exist out</font><font color="#CCCCCC"> there doing simple</font>

1226
00:45:20,869 --> 00:45:24,589
modifications or innocence modifications

1227
00:45:22,910 --> 00:45:26,299
can actually extend<font color="#E5E5E5"> the life of the</font>

1228
00:45:24,589 --> 00:45:27,920
exploit<font color="#E5E5E5"> you know like if we look at the</font>

1229
00:45:26,300 --> 00:45:29,270
EMF<font color="#E5E5E5"> one there's like 15</font><font color="#CCCCCC"> different ways</font>

1230
00:45:27,920 --> 00:45:30,740
to<font color="#E5E5E5"> hit the different bugs just</font>

1231
00:45:29,270 --> 00:45:32,660
underneath<font color="#E5E5E5"> in that one piece of code</font>

1232
00:45:30,740 --> 00:45:34,578
<font color="#CCCCCC">right so there's there's ways that you</font>

1233
00:45:32,660 --> 00:45:37,310
can go about<font color="#E5E5E5"> and and extend the life of</font>

1234
00:45:34,579 --> 00:45:38,750
the proof<font color="#E5E5E5"> of concepts that you have or</font>

1235
00:45:37,310 --> 00:45:40,460
<font color="#CCCCCC">reach rigor them and get you know</font><font color="#E5E5E5"> get</font>

1236
00:45:38,750 --> 00:45:42,859
paid twice by<font color="#E5E5E5"> bounty programs like ours</font>

1237
00:45:40,460 --> 00:45:44,390
<font color="#E5E5E5">just by you know understanding what's</font>

1238
00:45:42,859 --> 00:45:46,578
<font color="#E5E5E5">being patched how it's being patched and</font>

1239
00:45:44,390 --> 00:45:51,348
always remember<font color="#CCCCCC"> 7</font><font color="#E5E5E5"> FFF is the</font><font color="#CCCCCC"> God of all</font>

1240
00:45:46,579 --> 00:45:54,740
evil<font color="#CCCCCC"> at least for</font><font color="#E5E5E5"> Adobe with that is</font>

1241
00:45:51,349 --> 00:45:57,490
there<font color="#E5E5E5"> any questions</font><font color="#CCCCCC"> I can't see you</font>

1242
00:45:54,740 --> 00:45:57,490
because<font color="#E5E5E5"> the lights are so bright</font>

1243
00:46:10,890 --> 00:46:15,450
everybody hungry<font color="#CCCCCC"> yeah okay</font><font color="#E5E5E5"> thank you</font>

1244
00:46:14,100 --> 00:46:17,370
<font color="#CCCCCC">very</font><font color="#E5E5E5"> much I want to thank offensive</font><font color="#CCCCCC"> Khan</font>

1245
00:46:15,450 --> 00:46:18,930
for<font color="#E5E5E5"> having us out here</font><font color="#CCCCCC"> we've sponsored</font>

1246
00:46:17,370 --> 00:46:20,330
every year so<font color="#E5E5E5"> it's a great conference</font>

1247
00:46:18,930 --> 00:46:24,810
<font color="#E5E5E5">thank you</font>

1248
00:46:20,330 --> 00:46:24,810
[Applause]

