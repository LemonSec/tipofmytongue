1
00:00:00,630 --> 00:00:07,099
[Applause]

2
00:00:12,230 --> 00:00:17,490
microphone okay yeah<font color="#E5E5E5"> now it's working</font>

3
00:00:15,179 --> 00:00:19,770
so I say I will talk<font color="#CCCCCC"> more about</font><font color="#E5E5E5"> you</font>

4
00:00:17,490 --> 00:00:21,810
<font color="#CCCCCC">fight in security so</font><font color="#E5E5E5"> my name is</font>

5
00:00:19,770 --> 00:00:23,640
<font color="#CCCCCC">Alexander matrosov and today I will</font>

6
00:00:21,810 --> 00:00:25,919
present<font color="#E5E5E5"> betraying the</font><font color="#CCCCCC"> bios going deeper</font>

7
00:00:23,640 --> 00:00:28,289
<font color="#CCCCCC">envious guard implementations actually I</font>

8
00:00:25,920 --> 00:00:30,300
were happy to present on<font color="#CCCCCC"> first</font><font color="#E5E5E5"> edition</font>

9
00:00:28,289 --> 00:00:32,460
of<font color="#E5E5E5"> offensive</font><font color="#CCCCCC"> con because my personal</font>

10
00:00:30,300 --> 00:00:35,160
opinion offensive it's very important

11
00:00:32,460 --> 00:00:37,469
for<font color="#CCCCCC"> my</font><font color="#E5E5E5"> defensive stronger and it was</font>

12
00:00:35,160 --> 00:00:38,760
<font color="#E5E5E5">already very right points from the</font>

13
00:00:37,469 --> 00:00:41,820
<font color="#CCCCCC">keynote speaker</font>

14
00:00:38,760 --> 00:00:45,989
Rodrigo Branca<font color="#E5E5E5"> and actually I</font><font color="#CCCCCC"> don't see</font>

15
00:00:41,820 --> 00:00:48,390
any<font color="#E5E5E5"> right half for development teams how</font>

16
00:00:45,989 --> 00:00:52,730
they can make a product stronger without

17
00:00:48,390 --> 00:00:56,340
offensive<font color="#CCCCCC"> security team because actually</font>

18
00:00:52,730 --> 00:00:58,230
unfortunately<font color="#CCCCCC"> usual developers don't</font>

19
00:00:56,340 --> 00:01:00,120
understand how the right<font color="#E5E5E5"> implements the</font>

20
00:00:58,230 --> 00:01:04,619
mitigations and security technologies

21
00:01:00,120 --> 00:01:07,020
and like<font color="#CCCCCC"> during security development</font>

22
00:01:04,619 --> 00:01:11,400
<font color="#E5E5E5">lifecycle somebody should break the</font>

23
00:01:07,020 --> 00:01:14,520
things to<font color="#E5E5E5"> make it right right</font><font color="#CCCCCC"> okay so</font>

24
00:01:11,400 --> 00:01:17,189
I'm leading embedded security at<font color="#CCCCCC"> Nvidia</font>

25
00:01:14,520 --> 00:01:18,658
and I have a lot of experience<font color="#CCCCCC"> before in</font>

26
00:01:17,189 --> 00:01:21,600
reverse engineering<font color="#CCCCCC"> and security</font>

27
00:01:18,659 --> 00:01:24,150
research and actually<font color="#E5E5E5"> we drop out some</font>

28
00:01:21,600 --> 00:01:30,089
stuff<font color="#E5E5E5"> inside the book rootkits and boot</font>

29
00:01:24,150 --> 00:01:33,659
kids based mostly on legacy<font color="#E5E5E5"> boot kids on</font>

30
00:01:30,090 --> 00:01:36,140
MBR<font color="#CCCCCC"> and VBR infections but also have</font>

31
00:01:33,659 --> 00:01:41,369
very interesting chapters about<font color="#CCCCCC"> ufi</font>

32
00:01:36,140 --> 00:01:44,009
implants<font color="#CCCCCC"> actually this talk</font>

33
00:01:41,369 --> 00:01:48,030
I don't speak from<font color="#CCCCCC"> my employer</font><font color="#E5E5E5"> and also</font>

34
00:01:44,009 --> 00:01:54,079
my opinions<font color="#CCCCCC"> it's mine and all bad jokes</font>

35
00:01:48,030 --> 00:01:56,579
to the<font color="#CCCCCC"> preach the same presentation</font>

36
00:01:54,079 --> 00:01:58,679
<font color="#E5E5E5">actually today presentation will be</font>

37
00:01:56,579 --> 00:02:00,449
different it's like<font color="#E5E5E5"> around 40% of the</font>

38
00:01:58,680 --> 00:02:02,610
content but the title of this

39
00:02:00,450 --> 00:02:06,100
presentation being already<font color="#E5E5E5"> presented</font><font color="#CCCCCC"> on</font>

40
00:02:02,610 --> 00:02:08,590
<font color="#E5E5E5">do you say blackhat</font><font color="#CCCCCC"> h2c 0</font><font color="#E5E5E5"> nights</font>

41
00:02:06,100 --> 00:02:13,060
and blue head and you can find by<font color="#CCCCCC"> this</font>

42
00:02:08,590 --> 00:02:16,330
link<font color="#CCCCCC"> this presentation but today stuff</font>

43
00:02:13,060 --> 00:02:18,610
<font color="#CCCCCC">it's quite new so</font><font color="#E5E5E5"> and my image waiter</font>

44
00:02:16,330 --> 00:02:22,470
been like<font color="#CCCCCC"> ok it's documentation about</font>

45
00:02:18,610 --> 00:02:25,239
<font color="#CCCCCC">the BIOS guard and it's how intel</font><font color="#E5E5E5"> see</font>

46
00:02:22,470 --> 00:02:28,060
for the public how technology looks like

47
00:02:25,239 --> 00:02:30,459
and for me it's<font color="#E5E5E5"> like</font><font color="#CCCCCC"> ok</font><font color="#E5E5E5"> it's quite</font>

48
00:02:28,060 --> 00:02:33,340
interesting<font color="#E5E5E5"> because here is actually</font>

49
00:02:30,459 --> 00:02:37,150
nothing<font color="#E5E5E5"> right</font><font color="#CCCCCC"> about implementation</font>

50
00:02:33,340 --> 00:02:41,830
<font color="#E5E5E5">details and I was actually discussed</font>

51
00:02:37,150 --> 00:02:44,769
today<font color="#E5E5E5"> some things about how</font><font color="#CCCCCC"> I'm AI bias</font>

52
00:02:41,830 --> 00:02:46,480
<font color="#E5E5E5">updates working where is the problems</font>

53
00:02:44,769 --> 00:02:48,400
with current implementations and

54
00:02:46,480 --> 00:02:52,660
actually why the<font color="#CCCCCC"> bias got been created</font>

55
00:02:48,400 --> 00:02:54,880
and<font color="#E5E5E5"> also I will</font><font color="#CCCCCC"> discuss some interesting</font>

56
00:02:52,660 --> 00:02:58,390
<font color="#E5E5E5">things about the bias guard and one of</font>

57
00:02:54,880 --> 00:02:59,560
the thing it's inside the<font color="#CCCCCC"> bias are</font>

58
00:02:58,390 --> 00:03:02,048
updates

59
00:02:59,560 --> 00:03:04,330
<font color="#CCCCCC">it is like BIOS guard scripting language</font>

60
00:03:02,049 --> 00:03:07,260
which<font color="#E5E5E5"> is given complete and it's pretty</font>

61
00:03:04,330 --> 00:03:10,840
<font color="#CCCCCC">interesting right because</font><font color="#E5E5E5"> it's</font><font color="#CCCCCC"> actually</font>

62
00:03:07,260 --> 00:03:14,560
executed by<font color="#E5E5E5"> ACL model and also I will</font>

63
00:03:10,840 --> 00:03:18,280
show a<font color="#E5E5E5"> few new interesting ways how to</font>

64
00:03:14,560 --> 00:03:21,640
bypass into a boot guard<font color="#E5E5E5"> implementation</font>

65
00:03:18,280 --> 00:03:23,829
based on american megatrends<font color="#CCCCCC"> and also</font><font color="#E5E5E5"> i</font>

66
00:03:21,640 --> 00:03:29,279
<font color="#E5E5E5">will put a little bit</font><font color="#CCCCCC"> more details about</font>

67
00:03:23,829 --> 00:03:31,690
<font color="#E5E5E5">ACM identification code models so</font>

68
00:03:29,280 --> 00:03:33,670
actually<font color="#CCCCCC"> i'm pretty</font><font color="#E5E5E5"> the same thing</font>

69
00:03:31,690 --> 00:03:36,370
already<font color="#CCCCCC"> been</font><font color="#E5E5E5"> discussed by</font><font color="#CCCCCC"> alex</font><font color="#E5E5E5"> anezka</font>

70
00:03:33,670 --> 00:03:38,350
<font color="#CCCCCC">and his presentation because</font><font color="#E5E5E5"> operating</font>

71
00:03:36,370 --> 00:03:40,440
system make much more stronger

72
00:03:38,350 --> 00:03:43,480
<font color="#E5E5E5">mitigations against</font><font color="#CCCCCC"> rude kids and</font>

73
00:03:40,440 --> 00:03:46,840
actually<font color="#E5E5E5"> from from the firmware it's</font>

74
00:03:43,480 --> 00:03:48,488
much more<font color="#E5E5E5"> interesting to expose kernel</font>

75
00:03:46,840 --> 00:03:51,970
or inject something<font color="#E5E5E5"> inside the kernel</font>

76
00:03:48,489 --> 00:03:56,230
and<font color="#CCCCCC"> exploit as if modern server it's</font>

77
00:03:51,970 --> 00:03:58,870
much more easier<font color="#E5E5E5"> and actually</font><font color="#CCCCCC"> u5 bias</font>

78
00:03:56,230 --> 00:04:02,130
<font color="#CCCCCC">it's over six million lines from the</font>

79
00:03:58,870 --> 00:04:06,160
<font color="#E5E5E5">secret which of course has a room for</font>

80
00:04:02,130 --> 00:04:08,500
vulnerabilities right so and it was

81
00:04:06,160 --> 00:04:12,459
pretty interesting<font color="#E5E5E5"> presentation from</font>

82
00:04:08,500 --> 00:04:14,889
enthalpy cert on blackhat<font color="#E5E5E5"> last year</font>

83
00:04:12,459 --> 00:04:16,620
where they<font color="#E5E5E5"> discussed the bugs and</font>

84
00:04:14,889 --> 00:04:19,160
different<font color="#E5E5E5"> classes</font><font color="#CCCCCC"> of the box and</font>

85
00:04:16,620 --> 00:04:22,610
<font color="#E5E5E5">actually the level of</font>

86
00:04:19,160 --> 00:04:25,570
configurational box<font color="#CCCCCC"> wins a</font><font color="#E5E5E5"> vendor make</font>

87
00:04:22,610 --> 00:04:28,250
it something<font color="#E5E5E5"> different with</font>

88
00:04:25,570 --> 00:04:30,740
specification by technology developer

89
00:04:28,250 --> 00:04:33,020
and<font color="#CCCCCC"> it's mica room for vulnerability</font><font color="#E5E5E5"> and</font>

90
00:04:30,740 --> 00:04:37,960
it's pretty much interesting and<font color="#E5E5E5"> I do</font>

91
00:04:33,020 --> 00:04:37,960
show what a few examples<font color="#E5E5E5"> today too</font><font color="#CCCCCC"> and</font>

92
00:04:38,170 --> 00:04:45,890
<font color="#E5E5E5">also I see some trend when some some of</font>

93
00:04:43,310 --> 00:04:49,570
the vendors<font color="#CCCCCC"> claw big cloud</font><font color="#E5E5E5"> vendors like</font>

94
00:04:45,890 --> 00:04:53,510
Google Microsoft and Amazon<font color="#CCCCCC"> trying to</font>

95
00:04:49,570 --> 00:04:57,020
make some<font color="#E5E5E5"> look for the</font><font color="#CCCCCC"> route of</font><font color="#E5E5E5"> trust</font>

96
00:04:53,510 --> 00:05:00,370
and peripheral devices<font color="#CCCCCC"> there by the</font>

97
00:04:57,020 --> 00:05:03,770
hardware<font color="#E5E5E5"> and implement their own chips</font>

98
00:05:00,370 --> 00:05:07,420
<font color="#CCCCCC">Google did the</font><font color="#E5E5E5"> kitten and Microsoft did</font>

99
00:05:03,770 --> 00:05:12,440
<font color="#E5E5E5">Olympus Olympus</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> also actually</font>

100
00:05:07,420 --> 00:05:16,030
interesting thing because<font color="#E5E5E5"> some</font><font color="#CCCCCC"> of the</font>

101
00:05:12,440 --> 00:05:18,620
root of trust<font color="#CCCCCC"> move into the cloud and</font>

102
00:05:16,030 --> 00:05:22,010
it's quite<font color="#CCCCCC"> interesting</font><font color="#E5E5E5"> and I will</font>

103
00:05:18,620 --> 00:05:25,760
actually discussed some of<font color="#E5E5E5"> the new ACL</font>

104
00:05:22,010 --> 00:05:28,940
models at<font color="#E5E5E5"> Pearson</font><font color="#CCCCCC"> Windows server review</font>

105
00:05:25,760 --> 00:05:32,210
versions<font color="#E5E5E5"> so here is a reference if</font><font color="#CCCCCC"> you</font>

106
00:05:28,940 --> 00:05:34,850
want to grab<font color="#E5E5E5"> more information about</font><font color="#CCCCCC"> this</font>

107
00:05:32,210 --> 00:05:38,120
<font color="#E5E5E5">technologies but today I will focused</font>

108
00:05:34,850 --> 00:05:40,220
and<font color="#CCCCCC"> another things but actually also</font>

109
00:05:38,120 --> 00:05:43,510
about looking the root of trust<font color="#E5E5E5"> and</font>

110
00:05:40,220 --> 00:05:46,760
hardware<font color="#E5E5E5"> and how we can break</font><font color="#CCCCCC"> it and</font>

111
00:05:43,510 --> 00:05:48,980
what I actually<font color="#E5E5E5"> very interested to to</font>

112
00:05:46,760 --> 00:05:53,960
look<font color="#E5E5E5"> inside the</font><font color="#CCCCCC"> cheetah</font><font color="#E5E5E5"> or Microsoft</font>

113
00:05:48,980 --> 00:05:59,480
Olympus<font color="#E5E5E5"> chip but it's not common to buy</font>

114
00:05:53,960 --> 00:06:03,229
on<font color="#E5E5E5"> the market right so it's not more</font>

115
00:05:59,480 --> 00:06:06,470
actually legacy in in the<font color="#CCCCCC"> bias anymore</font>

116
00:06:03,230 --> 00:06:09,950
right<font color="#CCCCCC"> no legacy</font><font color="#E5E5E5"> bias and you</font><font color="#CCCCCC"> fight you</font>

117
00:06:06,470 --> 00:06:12,220
if I actually<font color="#E5E5E5"> in everywhere and now</font>

118
00:06:09,950 --> 00:06:14,840
legacy inside you<font color="#CCCCCC"> fight because</font>

119
00:06:12,220 --> 00:06:17,030
different<font color="#E5E5E5"> vendors have different cycles</font>

120
00:06:14,840 --> 00:06:20,510
for<font color="#E5E5E5"> the update</font><font color="#CCCCCC"> they're</font><font color="#E5E5E5"> firmer and also</font>

121
00:06:17,030 --> 00:06:23,270
the ecosystem of<font color="#CCCCCC"> ufi and firmware</font><font color="#E5E5E5"> is</font>

122
00:06:20,510 --> 00:06:25,490
very<font color="#E5E5E5"> inconsistent</font><font color="#CCCCCC"> so it's how many</font>

123
00:06:23,270 --> 00:06:30,308
farmers<font color="#E5E5E5"> we have inside the BIOS update</font>

124
00:06:25,490 --> 00:06:33,929
so and it's quite evolved<font color="#E5E5E5"> right</font>

125
00:06:30,309 --> 00:06:42,789
here's some severe numbers<font color="#CCCCCC"> not here but</font>

126
00:06:33,929 --> 00:06:45,779
<font color="#CCCCCC">em so one of the interesting thing I've</font>

127
00:06:42,789 --> 00:06:47,199
<font color="#E5E5E5">been looking different bias updates and</font>

128
00:06:45,779 --> 00:06:50,499
fine

129
00:06:47,199 --> 00:06:52,689
so the BIOS<font color="#E5E5E5"> update is sign it</font><font color="#CCCCCC"> but some</font>

130
00:06:50,499 --> 00:06:54,309
of the of these farmers delivered

131
00:06:52,689 --> 00:06:58,749
<font color="#E5E5E5">separate last example a bandit</font>

132
00:06:54,309 --> 00:07:01,419
controller and it was not and here is

133
00:06:58,749 --> 00:07:04,689
the list of<font color="#E5E5E5"> the files from a bad BIOS</font>

134
00:07:01,419 --> 00:07:06,459
update and we can see he<font color="#CCCCCC"> seeded</font><font color="#E5E5E5"> beam and</font>

135
00:07:04,689 --> 00:07:10,689
I didn't very interested because<font color="#E5E5E5"> it's I</font>

136
00:07:06,459 --> 00:07:13,569
will not say<font color="#E5E5E5"> isn't vendor name but they</font>

137
00:07:10,689 --> 00:07:16,899
actually<font color="#E5E5E5"> don't sign embedded controller</font>

138
00:07:13,569 --> 00:07:21,789
<font color="#E5E5E5">update and also provide separate tool</font>

139
00:07:16,899 --> 00:07:24,399
for update<font color="#CCCCCC"> this summer and</font><font color="#E5E5E5"> I look it as</font>

140
00:07:21,789 --> 00:07:28,479
a tool<font color="#E5E5E5"> and it was</font><font color="#CCCCCC"> registered forward</font>

141
00:07:24,399 --> 00:07:30,969
even by the comments so the<font color="#E5E5E5"> firmware is</font>

142
00:07:28,479 --> 00:07:34,899
not sign<font color="#CCCCCC"> it</font><font color="#E5E5E5"> and we can use like sign a</font>

143
00:07:30,969 --> 00:07:37,539
driver<font color="#CCCCCC"> sign it</font><font color="#E5E5E5"> binary with a sign a</font>

144
00:07:34,899 --> 00:07:39,629
driver inside<font color="#E5E5E5"> which is</font><font color="#CCCCCC"> updated and sign</font>

145
00:07:37,539 --> 00:07:42,878
it firmer and that's<font color="#E5E5E5"> cool because like</font>

146
00:07:39,629 --> 00:07:44,919
<font color="#E5E5E5">BIOS actually communicating with</font>

147
00:07:42,879 --> 00:07:47,679
<font color="#CCCCCC">embedded controller some ways in its new</font>

148
00:07:44,919 --> 00:07:49,209
room<font color="#CCCCCC"> for I like</font><font color="#E5E5E5"> attacking the the some</font>

149
00:07:47,679 --> 00:07:50,888
<font color="#E5E5E5">of</font><font color="#CCCCCC"> these cement services which is</font>

150
00:07:49,209 --> 00:07:54,879
communicating with embedded controller

151
00:07:50,889 --> 00:07:58,029
from the<font color="#E5E5E5"> firmware inside and I think a</font>

152
00:07:54,879 --> 00:08:02,499
lot<font color="#CCCCCC"> of vendors</font><font color="#E5E5E5"> will will be look on this</font>

153
00:07:58,029 --> 00:08:04,869
picture<font color="#E5E5E5"> like security boundary will be</font>

154
00:08:02,499 --> 00:08:06,909
not breaking right we already updated

155
00:08:04,869 --> 00:08:08,739
the<font color="#E5E5E5"> firmware and firmware will be should</font>

156
00:08:06,909 --> 00:08:13,438
communicate in the right way with<font color="#CCCCCC"> OC</font>

157
00:08:08,739 --> 00:08:15,998
<font color="#CCCCCC">cement services yeah</font>

158
00:08:13,439 --> 00:08:20,159
never underestimate<font color="#CCCCCC"> a reverse</font><font color="#E5E5E5"> engineer</font>

159
00:08:15,999 --> 00:08:23,079
<font color="#E5E5E5">in your code model so what kind of</font>

160
00:08:20,159 --> 00:08:25,409
vendors<font color="#E5E5E5"> today</font><font color="#CCCCCC"> will cover</font><font color="#E5E5E5"> its gigabyte</font>

161
00:08:23,079 --> 00:08:28,269
<font color="#CCCCCC">Asustek</font><font color="#E5E5E5"> MSI and Lenovo and</font>

162
00:08:25,409 --> 00:08:33,479
vulnerabilities actually there which

163
00:08:28,269 --> 00:08:36,519
will<font color="#E5E5E5"> be discussed today so it's quite</font>

164
00:08:33,479 --> 00:08:38,709
high level view how many different

165
00:08:36,519 --> 00:08:42,610
<font color="#E5E5E5">technologies we have to protect the bias</font>

166
00:08:38,708 --> 00:08:42,909
and we can see different<font color="#CCCCCC"> things and most</font>

167
00:08:42,610 --> 00:08:45,400
<font color="#E5E5E5">of</font>

168
00:08:42,909 --> 00:08:48,280
it's just log beats which is actually

169
00:08:45,400 --> 00:08:50,319
<font color="#E5E5E5">locking some activity from the user mode</font>

170
00:08:48,280 --> 00:08:53,470
from<font color="#CCCCCC"> the kernel mode</font><font color="#E5E5E5"> to update the</font>

171
00:08:50,320 --> 00:08:58,030
biases example<font color="#E5E5E5"> was log beat or bias</font>

172
00:08:53,470 --> 00:09:01,240
right in Albert and also we do have bias

173
00:08:58,030 --> 00:09:04,180
<font color="#CCCCCC">Garten boot guard</font><font color="#E5E5E5"> which is actually has</font>

174
00:09:01,240 --> 00:09:06,100
authenticated code models and partially

175
00:09:04,180 --> 00:09:09,849
the technologies implemented implemented

176
00:09:06,100 --> 00:09:15,490
in this components and<font color="#CCCCCC"> this</font><font color="#E5E5E5"> components</font>

177
00:09:09,850 --> 00:09:18,760
verified by micro card and also spy

178
00:09:15,490 --> 00:09:28,030
flash protection<font color="#CCCCCC"> by</font><font color="#E5E5E5"> PRS registers which</font>

179
00:09:18,760 --> 00:09:31,480
is<font color="#CCCCCC"> raise the bar for a bit more for spy</font>

180
00:09:28,030 --> 00:09:37,780
<font color="#CCCCCC">flash</font><font color="#E5E5E5"> write operations but this street</font>

181
00:09:31,480 --> 00:09:39,670
<font color="#E5E5E5">vendors doesn't use this so and this</font>

182
00:09:37,780 --> 00:09:43,750
<font color="#E5E5E5">series which been discovered for black</font>

183
00:09:39,670 --> 00:09:48,520
hat talk and today some<font color="#CCCCCC"> of the</font><font color="#E5E5E5"> things</font>

184
00:09:43,750 --> 00:09:51,850
will be<font color="#E5E5E5"> resolved series so it's about</font>

185
00:09:48,520 --> 00:09:54,220
<font color="#CCCCCC">BIOS</font><font color="#E5E5E5"> update process and usually we</font><font color="#CCCCCC"> have</font>

186
00:09:51,850 --> 00:09:56,680
<font color="#CCCCCC">update application which is</font>

187
00:09:54,220 --> 00:09:59,380
communicating with the<font color="#E5E5E5"> driver and then</font>

188
00:09:56,680 --> 00:10:01,870
the driver<font color="#CCCCCC"> corporate as a BIOS</font><font color="#E5E5E5"> update</font>

189
00:09:59,380 --> 00:10:05,260
image in specific memory and a cause of

190
00:10:01,870 --> 00:10:08,610
watchdog over<font color="#CCCCCC"> SMM</font><font color="#E5E5E5"> service which is</font>

191
00:10:05,260 --> 00:10:11,770
actually called<font color="#E5E5E5"> from the ring zero and</font>

192
00:10:08,610 --> 00:10:14,200
it can<font color="#CCCCCC"> be implemented in two ways for</font>

193
00:10:11,770 --> 00:10:17,680
one of them it's a semi flash and one of

194
00:10:14,200 --> 00:10:19,600
them it's a security smile and actually

195
00:10:17,680 --> 00:10:23,199
most<font color="#E5E5E5"> interesting insecurities my</font><font color="#CCCCCC"> flash</font>

196
00:10:19,600 --> 00:10:26,410
<font color="#E5E5E5">because specifically this is</font><font color="#CCCCCC"> mam</font><font color="#E5E5E5"> Dixie</font>

197
00:10:23,200 --> 00:10:28,750
<font color="#E5E5E5">driver verifying the signature of the</font>

198
00:10:26,410 --> 00:10:35,910
BIOS update<font color="#E5E5E5"> that's mean it's pretty</font>

199
00:10:28,750 --> 00:10:40,960
complex<font color="#CCCCCC"> parser and</font><font color="#E5E5E5"> also I start looking</font>

200
00:10:35,910 --> 00:10:44,199
<font color="#CCCCCC">some of the biases and they using like</font>

201
00:10:40,960 --> 00:10:47,110
it's my second<font color="#E5E5E5"> semi flash but this</font>

202
00:10:44,200 --> 00:10:49,780
actually<font color="#CCCCCC"> dump it from one</font><font color="#E5E5E5"> of the Dell</font>

203
00:10:47,110 --> 00:10:53,560
systems where<font color="#E5E5E5"> it's my first still loaded</font>

204
00:10:49,780 --> 00:10:55,189
<font color="#E5E5E5">inside the same</font><font color="#CCCCCC"> iam so that's mean we</font>

205
00:10:53,560 --> 00:10:58,189
<font color="#CCCCCC">can communicating</font>

206
00:10:55,190 --> 00:11:02,060
<font color="#CCCCCC">visas driver</font><font color="#E5E5E5"> because it's</font><font color="#CCCCCC"> loaded and</font>

207
00:10:58,190 --> 00:11:07,610
registered in EFI system<font color="#CCCCCC"> Oh runtime</font>

208
00:11:02,060 --> 00:11:10,750
services<font color="#E5E5E5"> so and it was quite</font><font color="#CCCCCC"> interesting</font>

209
00:11:07,610 --> 00:11:15,050
thing because by it BIOS updates<font color="#E5E5E5"> been</font>

210
00:11:10,750 --> 00:11:17,720
<font color="#E5E5E5">check it by</font><font color="#CCCCCC"> security my flash</font><font color="#E5E5E5"> but we can</font>

211
00:11:15,050 --> 00:11:19,339
still<font color="#E5E5E5"> use this</font><font color="#CCCCCC"> it's my flesh and or</font>

212
00:11:17,720 --> 00:11:21,680
communicating<font color="#CCCCCC"> business</font><font color="#E5E5E5"> is my flash</font>

213
00:11:19,340 --> 00:11:27,200
driver and this example our taxes<font color="#CCCCCC"> so</font>

214
00:11:21,680 --> 00:11:31,339
here is actually it's my handlers for

215
00:11:27,200 --> 00:11:33,890
security<font color="#E5E5E5"> so my</font><font color="#CCCCCC"> flash we</font><font color="#E5E5E5"> can see the</font>

216
00:11:31,340 --> 00:11:35,750
robot image get policy and set policy

217
00:11:33,890 --> 00:11:38,890
and get policy actually<font color="#E5E5E5"> very interesting</font>

218
00:11:35,750 --> 00:11:43,490
<font color="#E5E5E5">because it's</font><font color="#CCCCCC"> the most complex parser for</font>

219
00:11:38,890 --> 00:11:47,060
for<font color="#E5E5E5"> this driver</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> it's</font><font color="#CCCCCC"> it's coverage</font>

220
00:11:43,490 --> 00:11:49,460
<font color="#E5E5E5">BIOS update signature verification and I</font>

221
00:11:47,060 --> 00:11:52,369
was quite interesting to<font color="#E5E5E5"> get in</font>

222
00:11:49,460 --> 00:11:56,750
it's<font color="#CCCCCC"> a reconstructed flow from the Dixie</font>

223
00:11:52,370 --> 00:11:59,630
driver by say<font color="#CCCCCC"> Lucy and see okay we</font><font color="#E5E5E5"> have</font>

224
00:11:56,750 --> 00:12:03,770
a get policy which is pass some

225
00:11:59,630 --> 00:12:07,090
parameters to to the<font color="#E5E5E5"> function and inside</font>

226
00:12:03,770 --> 00:12:10,630
this function<font color="#E5E5E5"> we have</font><font color="#CCCCCC"> wow man supply</font>

227
00:12:07,090 --> 00:12:17,060
<font color="#E5E5E5">quite interesting in the parser and</font>

228
00:12:10,630 --> 00:12:20,600
<font color="#E5E5E5">actually it was one of the main reason</font>

229
00:12:17,060 --> 00:12:23,869
why<font color="#CCCCCC"> inter creates bias guard and bias</font>

230
00:12:20,600 --> 00:12:26,390
guard<font color="#E5E5E5"> it's actually armoring bias</font>

231
00:12:23,870 --> 00:12:33,370
updates because<font color="#CCCCCC"> all the verification</font>

232
00:12:26,390 --> 00:12:33,370
flow mostly happens inside<font color="#CCCCCC"> Asia model</font>

233
00:12:33,460 --> 00:12:41,450
which is actually split as security

234
00:12:36,740 --> 00:12:46,630
boundaries between<font color="#CCCCCC"> SMM and Asia</font><font color="#E5E5E5"> and also</font>

235
00:12:41,450 --> 00:12:49,700
on<font color="#E5E5E5"> also all all spy flash aberration</font>

236
00:12:46,630 --> 00:12:52,189
<font color="#E5E5E5">control it by</font><font color="#CCCCCC"> ACM models</font><font color="#E5E5E5"> that's mean</font>

237
00:12:49,700 --> 00:12:54,890
even if it will<font color="#CCCCCC"> be vulnerability inside</font>

238
00:12:52,190 --> 00:12:59,560
<font color="#E5E5E5">its</font><font color="#CCCCCC"> mmm driver attacker can't actually</font>

239
00:12:54,890 --> 00:13:01,819
<font color="#E5E5E5">raise the persistent because it's</font><font color="#CCCCCC"> ACM</font>

240
00:12:59,560 --> 00:13:05,630
communicating with<font color="#E5E5E5"> the spy</font><font color="#CCCCCC"> flash but of</font>

241
00:13:01,820 --> 00:13:06,360
course in the real world<font color="#E5E5E5"> that's not true</font>

242
00:13:05,630 --> 00:13:09,730
<font color="#E5E5E5">because</font>

243
00:13:06,360 --> 00:13:12,910
vendors want to find the ways how update

244
00:13:09,730 --> 00:13:13,960
firmware easier and the technology is

245
00:13:12,910 --> 00:13:18,240
very<font color="#E5E5E5"> complex</font>

246
00:13:13,960 --> 00:13:22,860
I mean<font color="#CCCCCC"> biased guard</font><font color="#E5E5E5"> and it's hard to</font>

247
00:13:18,240 --> 00:13:26,080
implement<font color="#CCCCCC"> follow all the points for</font>

248
00:13:22,860 --> 00:13:30,010
<font color="#E5E5E5">specification I think because it's</font><font color="#CCCCCC"> wise</font>

249
00:13:26,080 --> 00:13:32,770
they make some rooms for attacker<font color="#CCCCCC"> but</font>

250
00:13:30,010 --> 00:13:38,410
<font color="#E5E5E5">let's</font><font color="#CCCCCC"> discuss what</font><font color="#E5E5E5"> would</font><font color="#CCCCCC"> Intel bias</font>

251
00:13:32,770 --> 00:13:41,640
guard<font color="#E5E5E5"> doing so actually first of all its</font>

252
00:13:38,410 --> 00:13:46,420
armoring spy flash<font color="#E5E5E5"> access and access</font>

253
00:13:41,640 --> 00:13:48,370
controlled by<font color="#E5E5E5"> bars guard ACM</font><font color="#CCCCCC"> this</font>

254
00:13:46,420 --> 00:13:50,740
partially implemented and<font color="#E5E5E5"> microcode and</font>

255
00:13:48,370 --> 00:13:55,060
PCH and actually using embedded

256
00:13:50,740 --> 00:13:57,130
controller<font color="#E5E5E5"> and also it's why I show some</font>

257
00:13:55,060 --> 00:14:01,989
previous slide<font color="#E5E5E5"> when the embedded</font>

258
00:13:57,130 --> 00:14:06,220
controller not been sign it and but as

259
00:14:01,990 --> 00:14:08,410
example if this<font color="#CCCCCC"> platform</font><font color="#E5E5E5"> will use the</font>

260
00:14:06,220 --> 00:14:10,900
<font color="#CCCCCC">bios guard</font><font color="#E5E5E5"> but embedded controller will</font>

261
00:14:08,410 --> 00:14:16,600
not sign it<font color="#CCCCCC"> it's it's some</font><font color="#E5E5E5"> interesting</font>

262
00:14:10,900 --> 00:14:18,760
things can be happens right so and all

263
00:14:16,600 --> 00:14:25,510
the identification<font color="#E5E5E5"> for the BIOS updates</font>

264
00:14:18,760 --> 00:14:28,480
now in<font color="#CCCCCC"> ACM but some of the vendors still</font>

265
00:14:25,510 --> 00:14:33,400
have a room when we can<font color="#E5E5E5"> program firmware</font>

266
00:14:28,480 --> 00:14:37,180
with<font color="#CCCCCC"> the physical</font><font color="#E5E5E5"> access by flesh flesh</font>

267
00:14:33,400 --> 00:14:39,640
programming tool and also post update

268
00:14:37,180 --> 00:14:45,880
verification<font color="#E5E5E5"> only rely on</font><font color="#CCCCCC"> in</font><font color="#E5E5E5"> tabooed</font>

269
00:14:39,640 --> 00:14:48,699
guard integrity and here is my targets

270
00:14:45,880 --> 00:14:50,589
for reversing here is the list<font color="#E5E5E5"> of</font><font color="#CCCCCC"> my</font>

271
00:14:48,700 --> 00:14:54,220
targets for<font color="#E5E5E5"> reverse</font><font color="#CCCCCC"> engineering I walk</font>

272
00:14:50,589 --> 00:14:57,580
inside<font color="#E5E5E5"> is among drivers I</font><font color="#CCCCCC"> walk inside</font>

273
00:14:54,220 --> 00:15:02,520
ACM<font color="#E5E5E5"> and also check the format of the</font>

274
00:14:57,580 --> 00:15:02,520
BIOS updates because it<font color="#E5E5E5"> was different</font>

275
00:15:03,180 --> 00:15:12,430
here is the list of<font color="#CCCCCC"> the components which</font>

276
00:15:06,280 --> 00:15:15,459
using<font color="#E5E5E5"> by by wise garden and it and</font>

277
00:15:12,430 --> 00:15:17,430
<font color="#E5E5E5">actually very interesting</font><font color="#CCCCCC"> because we can</font>

278
00:15:15,460 --> 00:15:19,589
<font color="#E5E5E5">see</font><font color="#CCCCCC"> eight</font>

279
00:15:17,430 --> 00:15:21,750
different drivers<font color="#E5E5E5"> some of them in</font>

280
00:15:19,589 --> 00:15:24,570
<font color="#E5E5E5">platform utilization states some of them</font>

281
00:15:21,750 --> 00:15:26,100
<font color="#E5E5E5">on</font><font color="#CCCCCC"> Islam and a jig</font><font color="#E5E5E5"> say so it's huge</font>

282
00:15:24,570 --> 00:15:30,149
<font color="#CCCCCC">attacks</font><font color="#E5E5E5"> your face because we have</font><font color="#CCCCCC"> like</font>

283
00:15:26,100 --> 00:15:34,200
three<font color="#CCCCCC"> different</font><font color="#E5E5E5"> drivers and BIOS guard</font>

284
00:15:30,149 --> 00:15:37,170
services<font color="#CCCCCC"> it's specific</font><font color="#E5E5E5"> model which is</font>

285
00:15:34,200 --> 00:15:40,890
actually executed by<font color="#CCCCCC"> us guard script so</font>

286
00:15:37,170 --> 00:15:43,709
and<font color="#E5E5E5"> here's some artifacts how because</font>

287
00:15:40,890 --> 00:15:47,580
actually some<font color="#CCCCCC"> um drivers for the BIOS</font>

288
00:15:43,709 --> 00:15:49,349
guard can be<font color="#E5E5E5"> in loaded but the</font>

289
00:15:47,580 --> 00:15:51,660
technology will be<font color="#E5E5E5"> not enabled</font><font color="#CCCCCC"> just</font>

290
00:15:49,350 --> 00:15:53,670
because some<font color="#CCCCCC"> of the developers it sways</font>

291
00:15:51,660 --> 00:15:56,279
it to remove<font color="#E5E5E5"> from the firmware image it</font>

292
00:15:53,670 --> 00:15:59,910
still appears on the platform but not

293
00:15:56,279 --> 00:16:02,370
use it so how we<font color="#E5E5E5"> can know the platform</font>

294
00:15:59,910 --> 00:16:05,670
is using the<font color="#E5E5E5"> BIOS guard this signature</font>

295
00:16:02,370 --> 00:16:10,100
has been reconstructed<font color="#CCCCCC"> and all american</font>

296
00:16:05,670 --> 00:16:14,310
megatrends be fed<font color="#CCCCCC"> oh</font><font color="#E5E5E5"> actually all bias</font>

297
00:16:10,100 --> 00:16:20,850
<font color="#E5E5E5">guard update packages have this</font>

298
00:16:14,310 --> 00:16:23,250
signature<font color="#E5E5E5"> MIP fed a my</font><font color="#CCCCCC"> GD and also if</font>

299
00:16:20,850 --> 00:16:25,620
the platform<font color="#E5E5E5"> using the</font><font color="#CCCCCC"> bios guard the</font>

300
00:16:23,250 --> 00:16:31,560
thermal variable by his guard capsule

301
00:16:25,620 --> 00:16:33,360
variable appears in but actually<font color="#E5E5E5"> you</font>

302
00:16:31,560 --> 00:16:37,040
<font color="#CCCCCC">can't modify</font><font color="#E5E5E5"> this</font><font color="#CCCCCC"> firmer variable</font>

303
00:16:33,360 --> 00:16:42,779
outside<font color="#CCCCCC"> SML on this mmm driver do and</font>

304
00:16:37,040 --> 00:16:48,329
also this good for a<font color="#CCCCCC"> cm exist only</font><font color="#E5E5E5"> when</font>

305
00:16:42,779 --> 00:16:51,330
the<font color="#CCCCCC"> bias</font><font color="#E5E5E5"> guard really used so how in my</font>

306
00:16:48,330 --> 00:16:53,910
bias guard guard format looks<font color="#E5E5E5"> like so we</font>

307
00:16:51,330 --> 00:17:00,000
have<font color="#E5E5E5"> a bias guard heater script and</font>

308
00:16:53,910 --> 00:17:05,879
firmware<font color="#E5E5E5"> update package and also in the</font>

309
00:17:00,000 --> 00:17:08,099
bias guard heater we can see interesting

310
00:17:05,880 --> 00:17:10,589
<font color="#CCCCCC">things like a thermal security</font><font color="#E5E5E5"> version</font>

311
00:17:08,099 --> 00:17:14,129
number<font color="#E5E5E5"> and embedded controller security</font>

312
00:17:10,589 --> 00:17:16,849
<font color="#E5E5E5">version number and that's actually been</font>

313
00:17:14,130 --> 00:17:20,760
very<font color="#E5E5E5"> interesting to</font><font color="#CCCCCC"> find that because</font>

314
00:17:16,849 --> 00:17:25,428
that's mean embedded controller using by

315
00:17:20,760 --> 00:17:25,429
some of the services of the<font color="#E5E5E5"> buzz guard</font>

316
00:17:29,040 --> 00:17:35,200
and I start<font color="#CCCCCC"> thinking about this</font>

317
00:17:32,790 --> 00:17:40,149
discovery with<font color="#CCCCCC"> the buyers guard script</font>

318
00:17:35,200 --> 00:17:45,940
<font color="#E5E5E5">and when I actually found some of the</font>

319
00:17:40,150 --> 00:17:48,300
<font color="#CCCCCC">comments and</font><font color="#E5E5E5"> I been</font><font color="#CCCCCC"> concluded this</font>

320
00:17:45,940 --> 00:17:51,430
language is a Turing complete language

321
00:17:48,300 --> 00:17:54,129
<font color="#E5E5E5">executed by ACM model and by his guard</font>

322
00:17:51,430 --> 00:17:57,700
services<font color="#E5E5E5"> actually</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> SMM driver which</font>

323
00:17:54,130 --> 00:18:01,750
is<font color="#CCCCCC"> passed the</font><font color="#E5E5E5"> control to ACM with a</font>

324
00:17:57,700 --> 00:18:03,340
specific<font color="#CCCCCC"> comment</font><font color="#E5E5E5"> and bios guard script</font>

325
00:18:01,750 --> 00:18:07,180
support operations which<font color="#CCCCCC"> is</font>

326
00:18:03,340 --> 00:18:10,679
<font color="#E5E5E5">communicating</font><font color="#CCCCCC"> with a spy</font><font color="#E5E5E5"> fire ship so</font>

327
00:18:07,180 --> 00:18:14,080
here is operations which<font color="#CCCCCC"> as I restore</font>

328
00:18:10,680 --> 00:18:17,830
its load store which<font color="#CCCCCC"> is can like load</font>

329
00:18:14,080 --> 00:18:20,919
and store the byte or word<font color="#E5E5E5"> value</font><font color="#CCCCCC"> simply</font>

330
00:18:17,830 --> 00:18:22,929
<font color="#CCCCCC">copy</font><font color="#E5E5E5"> jump or conditional jump and those</font>

331
00:18:20,920 --> 00:18:25,960
are most interesting comment and to read

332
00:18:22,930 --> 00:18:33,220
the key hash which is in thermal

333
00:18:25,960 --> 00:18:38,230
programmable fuse<font color="#CCCCCC"> it's</font><font color="#E5E5E5"> american</font>

334
00:18:33,220 --> 00:18:40,270
megatrends bias guard comments and one

335
00:18:38,230 --> 00:18:44,770
<font color="#E5E5E5">of the most interesting is of course</font>

336
00:18:40,270 --> 00:18:48,580
<font color="#E5E5E5">write and read and erase because</font><font color="#CCCCCC"> it's</font>

337
00:18:44,770 --> 00:18:51,070
using<font color="#E5E5E5"> over bias bias guard update</font>

338
00:18:48,580 --> 00:18:54,730
process and these comments<font color="#CCCCCC"> actually</font>

339
00:18:51,070 --> 00:18:57,340
partially<font color="#E5E5E5"> can be used inside this</font><font color="#CCCCCC"> mmm</font>

340
00:18:54,730 --> 00:19:01,470
driver<font color="#E5E5E5"> and it's quite</font><font color="#CCCCCC"> interesting</font>

341
00:18:57,340 --> 00:19:03,840
because it's destroying consistence of

342
00:19:01,470 --> 00:19:08,080
<font color="#E5E5E5">technology security technology because</font>

343
00:19:03,840 --> 00:19:10,780
in ideal world it should be only<font color="#CCCCCC"> a cm</font>

344
00:19:08,080 --> 00:19:13,720
model which is control<font color="#CCCCCC"> also write and</font>

345
00:19:10,780 --> 00:19:17,710
read operations<font color="#CCCCCC"> for the spy flash but in</font>

346
00:19:13,720 --> 00:19:22,050
the real<font color="#E5E5E5"> world we have partially</font>

347
00:19:17,710 --> 00:19:22,050
controlled<font color="#E5E5E5"> operations from</font><font color="#CCCCCC"> SMM driver</font>

348
00:19:23,010 --> 00:19:31,290
<font color="#E5E5E5">here is</font><font color="#CCCCCC"> a components and woodsy does</font>

349
00:19:26,080 --> 00:19:33,970
<font color="#CCCCCC">force bios guard</font><font color="#E5E5E5"> and actually we can see</font>

350
00:19:31,290 --> 00:19:36,060
for<font color="#E5E5E5"> the platform</font><font color="#CCCCCC"> initialization stage we</font>

351
00:19:33,970 --> 00:19:40,309
have cups of update validation that's

352
00:19:36,060 --> 00:19:43,950
actually mean the<font color="#E5E5E5"> update process</font>

353
00:19:40,309 --> 00:19:46,529
it's a bit different<font color="#E5E5E5"> with previous</font>

354
00:19:43,950 --> 00:19:48,419
update process which is<font color="#CCCCCC"> used</font><font color="#E5E5E5"> circus</font><font color="#CCCCCC"> in</font>

355
00:19:46,529 --> 00:19:53,029
my flesh and it's my first<font color="#CCCCCC"> drivers</font>

356
00:19:48,419 --> 00:19:56,279
because actually platform going to some

357
00:19:53,029 --> 00:19:58,379
some of the<font color="#CCCCCC"> boots</font><font color="#E5E5E5"> state but it stalled</font>

358
00:19:56,279 --> 00:20:03,769
<font color="#CCCCCC">and then played</font><font color="#E5E5E5"> from initialization</font>

359
00:19:58,379 --> 00:20:09,658
driver<font color="#CCCCCC"> start not</font><font color="#E5E5E5"> Jeep reboot it's like</font>

360
00:20:03,769 --> 00:20:11,849
not asleep<font color="#CCCCCC"> its</font><font color="#E5E5E5"> s5 and then pay driver</font>

361
00:20:09,659 --> 00:20:13,889
trigger it and verifies the<font color="#E5E5E5"> capsule</font>

362
00:20:11,849 --> 00:20:17,059
update<font color="#CCCCCC"> it's actually</font><font color="#E5E5E5"> make a bit</font><font color="#CCCCCC"> fasten</font>

363
00:20:13,889 --> 00:20:21,238
different difficult because we always

364
00:20:17,059 --> 00:20:23,459
don't don't have a<font color="#E5E5E5"> feedback from the</font>

365
00:20:21,239 --> 00:20:27,599
system<font color="#CCCCCC"> because if you did</font><font color="#E5E5E5"> something</font>

366
00:20:23,459 --> 00:20:30,719
<font color="#E5E5E5">wrong it's just freeze and then after</font>

367
00:20:27,599 --> 00:20:39,149
reboot you lose all the<font color="#E5E5E5"> state of the</font>

368
00:20:30,719 --> 00:20:41,609
<font color="#E5E5E5">spazzing context also in Islam</font><font color="#CCCCCC"> we have a</font>

369
00:20:39,149 --> 00:20:46,589
<font color="#E5E5E5">bias guard</font><font color="#CCCCCC"> SMM driver</font><font color="#E5E5E5"> which is</font>

370
00:20:41,609 --> 00:20:50,279
<font color="#E5E5E5">responsible for recoveries for firmware</font>

371
00:20:46,589 --> 00:20:53,149
recovery services and interesting thing

372
00:20:50,279 --> 00:20:56,339
in health some is my handlers which is

373
00:20:53,149 --> 00:21:00,149
not communicating<font color="#CCCCCC"> directly with the</font><font color="#E5E5E5"> P</font>

374
00:20:56,339 --> 00:21:03,509
rating system but it's actually have

375
00:21:00,149 --> 00:21:09,658
some parameters<font color="#E5E5E5"> passing over a</font><font color="#CCCCCC"> supply</font>

376
00:21:03,509 --> 00:21:15,629
tables and it's actually possible let's

377
00:21:09,659 --> 00:21:18,919
discuss a bit more<font color="#E5E5E5"> about a cm and a CM</font>

378
00:21:15,629 --> 00:21:23,488
it's<font color="#CCCCCC"> out indicated called model and</font>

379
00:21:18,919 --> 00:21:26,519
before<font color="#CCCCCC"> III seen only</font><font color="#E5E5E5"> a cm models</font>

380
00:21:23,489 --> 00:21:28,619
<font color="#E5E5E5">developed by Intel and also sign it</font>

381
00:21:26,519 --> 00:21:33,089
actually always<font color="#CCCCCC"> say</font><font color="#E5E5E5"> a</font><font color="#CCCCCC"> cm model sign it</font>

382
00:21:28,619 --> 00:21:37,949
by Intel because verification<font color="#E5E5E5"> routine</font>

383
00:21:33,089 --> 00:21:42,809
inside the microcode and<font color="#E5E5E5"> a</font><font color="#CCCCCC"> CM execute</font>

384
00:21:37,950 --> 00:21:46,799
inside<font color="#CCCCCC"> a serum and a serum it's specific</font>

385
00:21:42,809 --> 00:21:51,178
<font color="#CCCCCC">cache state</font><font color="#E5E5E5"> when one core will be</font>

386
00:21:46,799 --> 00:21:51,870
dedicated to read to execute inside the

387
00:21:51,179 --> 00:21:55,260
cache in

388
00:21:51,870 --> 00:22:01,408
<font color="#E5E5E5">non</font><font color="#CCCCCC"> invictus mod and it's pretty much</font>

389
00:21:55,260 --> 00:22:04,679
interesting because we end a<font color="#CCCCCC"> cm model</font>

390
00:22:01,409 --> 00:22:08,490
usually<font color="#E5E5E5"> executed on early state</font><font color="#CCCCCC"> boot</font>

391
00:22:04,679 --> 00:22:11,909
<font color="#CCCCCC">butin state of the platform</font><font color="#E5E5E5"> but some of</font>

392
00:22:08,490 --> 00:22:24,270
<font color="#CCCCCC">this is mam drivers can reward and</font>

393
00:22:11,909 --> 00:22:26,130
execute<font color="#CCCCCC"> during a dig suffice</font><font color="#E5E5E5"> to so very</font>

394
00:22:24,270 --> 00:22:28,760
<font color="#CCCCCC">interesting thing</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> what</font><font color="#E5E5E5"> I find out</font>

395
00:22:26,130 --> 00:22:33,179
<font color="#E5E5E5">when I reverse engineered a same models</font>

396
00:22:28,760 --> 00:22:37,279
<font color="#CCCCCC">it's easy</font><font color="#E5E5E5"> models it's mixed</font><font color="#CCCCCC"> develop</font><font color="#E5E5E5"> it</font>

397
00:22:33,179 --> 00:22:41,240
on mix between<font color="#E5E5E5"> C and assembly language</font>

398
00:22:37,279 --> 00:22:43,919
that's pretty<font color="#E5E5E5"> interesting because</font>

399
00:22:41,240 --> 00:22:48,390
development<font color="#E5E5E5"> teams can apply</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> static</font>

400
00:22:43,919 --> 00:22:52,320
analysis tool I mean like usual static

401
00:22:48,390 --> 00:22:54,270
analysis products for for finding the

402
00:22:52,320 --> 00:22:58,080
vulnerabilities<font color="#CCCCCC"> in the C code but here</font>

403
00:22:54,270 --> 00:23:00,840
is assembly is just destroy some and the

404
00:22:58,080 --> 00:23:03,149
path<font color="#E5E5E5"> to find vulnerabilities and it</font>

405
00:23:00,840 --> 00:23:06,840
doesn't work there<font color="#CCCCCC"> so and actually</font>

406
00:23:03,149 --> 00:23:11,309
<font color="#E5E5E5">assembly code it's around 30 percent in</font>

407
00:23:06,840 --> 00:23:14,610
ACM models and<font color="#CCCCCC"> okay what kind</font><font color="#E5E5E5"> of</font><font color="#CCCCCC"> ischium</font>

408
00:23:11,309 --> 00:23:18,658
models<font color="#E5E5E5"> we</font><font color="#CCCCCC"> have inside the BIOS update</font>

409
00:23:14,610 --> 00:23:18,959
<font color="#E5E5E5">and we do have a</font><font color="#CCCCCC"> Senate and</font><font color="#E5E5E5"> currently</font>

410
00:23:18,659 --> 00:23:23,399
actually

411
00:23:18,960 --> 00:23:26,730
<font color="#CCCCCC">sn8 and</font><font color="#E5E5E5"> as clean is</font><font color="#CCCCCC"> one model</font><font color="#E5E5E5"> it's</font><font color="#CCCCCC"> sixty</font>

412
00:23:23,399 --> 00:23:32,360
awaited and into a boot guard and<font color="#E5E5E5"> into</font>

413
00:23:26,730 --> 00:23:35,909
<font color="#E5E5E5">BIOS guard but Alex</font><font color="#CCCCCC"> and ESCO tweeted in</font>

414
00:23:32,360 --> 00:23:38,370
2017<font color="#E5E5E5"> December</font><font color="#CCCCCC"> about new ECM model</font>

415
00:23:35,909 --> 00:23:43,440
discover it<font color="#E5E5E5"> and the file</font><font color="#CCCCCC"> system in in</font>

416
00:23:38,370 --> 00:23:47,100
Windows Server and<font color="#CCCCCC"> specifically</font><font color="#E5E5E5"> this ACM</font>

417
00:23:43,440 --> 00:23:51,690
related with txt and it's locked<font color="#CCCCCC"> the</font>

418
00:23:47,100 --> 00:23:54,529
secure boot<font color="#E5E5E5"> state for guests inside the</font>

419
00:23:51,690 --> 00:23:54,529
hyper-v<font color="#E5E5E5"> cloud</font>

420
00:23:56,970 --> 00:24:03,210
here is<font color="#CCCCCC"> a format of recovered format of</font>

421
00:23:59,730 --> 00:24:06,380
ischium what is undocumented<font color="#E5E5E5"> and we can</font>

422
00:24:03,210 --> 00:24:11,660
see it has<font color="#E5E5E5"> an entry</font><font color="#CCCCCC"> point and</font><font color="#E5E5E5"> also</font>

423
00:24:06,380 --> 00:24:14,850
<font color="#E5E5E5">signatures</font><font color="#CCCCCC"> eros ap says signature inside</font>

424
00:24:11,660 --> 00:24:16,590
exponent public key and<font color="#CCCCCC"> heater and of</font>

425
00:24:14,850 --> 00:24:21,000
course entry point for starting point

426
00:24:16,590 --> 00:24:27,870
for execution<font color="#CCCCCC"> and most of the models</font>

427
00:24:21,000 --> 00:24:32,520
<font color="#E5E5E5">it's around like 32 kilobytes</font><font color="#CCCCCC"> to most</font>

428
00:24:27,870 --> 00:24:38,159
bigger one it was 256 kilobytes<font color="#CCCCCC"> for bias</font>

429
00:24:32,520 --> 00:24:41,280
guard he<font color="#E5E5E5"> is a</font><font color="#CCCCCC"> cm heater fully shaven</font>

430
00:24:38,160 --> 00:24:45,360
he'll recover it<font color="#E5E5E5"> and actually I will be</font>

431
00:24:41,280 --> 00:24:46,820
released the model<font color="#E5E5E5"> for either for Odeon</font>

432
00:24:45,360 --> 00:24:50,520
<font color="#CCCCCC">ACMs</font>

433
00:24:46,820 --> 00:24:52,710
read<font color="#E5E5E5"> before I developed only for boot</font>

434
00:24:50,520 --> 00:24:54,180
guard but currently I made a generic

435
00:24:52,710 --> 00:24:59,610
model<font color="#E5E5E5"> and will release after the</font>

436
00:24:54,180 --> 00:25:02,610
conference and what is an interesting

437
00:24:59,610 --> 00:25:04,860
<font color="#E5E5E5">thing before it was found the</font>

438
00:25:02,610 --> 00:25:08,639
vulnerabilities in HCM only<font color="#CCCCCC"> NSA need and</font>

439
00:25:04,860 --> 00:25:11,010
mostly by invisible<font color="#E5E5E5"> things labs and we</font>

440
00:25:08,640 --> 00:25:13,740
can see it was<font color="#CCCCCC"> only three public known</font>

441
00:25:11,010 --> 00:25:20,310
vulnerabilities which is privilege

442
00:25:13,740 --> 00:25:22,200
escalation to ACM but it's<font color="#CCCCCC"> privilege</font>

443
00:25:20,310 --> 00:25:26,850
<font color="#E5E5E5">escalation two of them</font><font color="#CCCCCC"> experienced</font>

444
00:25:22,200 --> 00:25:31,940
collation by code execution<font color="#E5E5E5"> so and 2009</font>

445
00:25:26,850 --> 00:25:36,629
and 2011<font color="#CCCCCC"> and one of them actually pretty</font>

446
00:25:31,940 --> 00:25:44,180
clear described and inside the paper

447
00:25:36,630 --> 00:25:49,710
<font color="#E5E5E5">into</font><font color="#CCCCCC"> XT we were sn8 hijacking but it was</font>

448
00:25:44,180 --> 00:25:52,740
no more issues<font color="#E5E5E5"> found publicly</font><font color="#CCCCCC"> what we</font>

449
00:25:49,710 --> 00:25:58,880
have as you remember and<font color="#E5E5E5"> previous so I</font>

450
00:25:52,740 --> 00:26:02,550
see and a mixed assembler code so and

451
00:25:58,880 --> 00:26:05,760
mostly<font color="#E5E5E5"> all</font><font color="#CCCCCC"> the ACM models developed by</font>

452
00:26:02,550 --> 00:26:07,470
Intel<font color="#CCCCCC"> use it non-addicted mod and have</font>

453
00:26:05,760 --> 00:26:09,809
some dependencies by chipset so<font color="#CCCCCC"> you</font>

454
00:26:07,470 --> 00:26:12,299
can't take one<font color="#CCCCCC"> AC</font>

455
00:26:09,809 --> 00:26:14,820
put inside the different BIOS update for

456
00:26:12,299 --> 00:26:19,590
different platform and load<font color="#E5E5E5"> there so it</font>

457
00:26:14,820 --> 00:26:22,139
will be not executed and for for boot

458
00:26:19,590 --> 00:26:25,709
guard<font color="#CCCCCC"> it's actually verifies came in</font><font color="#E5E5E5"> the</font>

459
00:26:22,139 --> 00:26:29,129
fest<font color="#E5E5E5"> and Intel initial initial boot</font>

460
00:26:25,710 --> 00:26:31,110
block<font color="#CCCCCC"> IBB</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> I actually</font><font color="#E5E5E5"> I wrote a bit a</font>

461
00:26:29,130 --> 00:26:35,190
<font color="#E5E5E5">bit later on the next slide described</font>

462
00:26:31,110 --> 00:26:39,199
what that's mean<font color="#CCCCCC"> but it's a parsers</font>

463
00:26:35,190 --> 00:26:42,450
<font color="#E5E5E5">pretty complex parses inside a</font><font color="#CCCCCC"> CM auto</font>

464
00:26:39,200 --> 00:26:46,440
so here is a flow for the<font color="#E5E5E5"> into boot</font>

465
00:26:42,450 --> 00:26:49,169
guard and we can see how actually many

466
00:26:46,440 --> 00:26:51,720
routines and code blocks we have<font color="#E5E5E5"> by this</font>

467
00:26:49,169 --> 00:26:55,950
graph and here is a call<font color="#CCCCCC"> graph from the</font>

468
00:26:51,720 --> 00:27:00,480
entry point<font color="#E5E5E5"> and what what actually this</font>

469
00:26:55,950 --> 00:27:03,659
ACM does so<font color="#E5E5E5"> it's has a few different</font>

470
00:27:00,480 --> 00:27:07,080
<font color="#CCCCCC">parcels</font><font color="#E5E5E5"> for K manifest</font><font color="#CCCCCC"> I will be</font>

471
00:27:03,659 --> 00:27:09,980
manifest<font color="#E5E5E5"> and also</font><font color="#CCCCCC"> it's enabled some of</font>

472
00:27:07,080 --> 00:27:14,449
specific features for into a boot guard

473
00:27:09,980 --> 00:27:17,159
and I was<font color="#CCCCCC"> thinking okay</font><font color="#E5E5E5"> if I take old</font>

474
00:27:14,450 --> 00:27:21,000
<font color="#CCCCCC">ACM model from previous platform and</font>

475
00:27:17,159 --> 00:27:21,929
make it Bend if with a new one<font color="#E5E5E5"> what I</font>

476
00:27:21,000 --> 00:27:27,600
can find him

477
00:27:21,929 --> 00:27:29,399
<font color="#E5E5E5">finds there what I can discover and it</font>

478
00:27:27,600 --> 00:27:34,908
was pretty interesting<font color="#CCCCCC"> because some of</font>

479
00:27:29,399 --> 00:27:39,750
the flows has a lot of<font color="#E5E5E5"> changes and also</font>

480
00:27:34,909 --> 00:27:42,750
actually specifically for boot guard

481
00:27:39,750 --> 00:27:45,419
<font color="#CCCCCC">I found few patches integer</font><font color="#E5E5E5"> overflows</font>

482
00:27:42,750 --> 00:27:50,059
and around<font color="#E5E5E5"> three</font><font color="#CCCCCC"> or</font><font color="#E5E5E5"> four memory</font>

483
00:27:45,419 --> 00:27:53,490
<font color="#E5E5E5">corruption</font><font color="#CCCCCC"> bugs inside</font><font color="#E5E5E5"> this parsers</font><font color="#CCCCCC"> so</font>

484
00:27:50,059 --> 00:27:57,210
that's actually straight<font color="#E5E5E5"> means like we</font>

485
00:27:53,490 --> 00:28:01,190
can find the vulnerabilities<font color="#E5E5E5"> inside</font><font color="#CCCCCC"> ACM</font>

486
00:27:57,210 --> 00:28:07,889
but it's a bit difficult to<font color="#E5E5E5"> exploit</font>

487
00:28:01,190 --> 00:28:12,090
<font color="#CCCCCC">these vulnerabilities but</font><font color="#E5E5E5"> ACM models can</font>

488
00:28:07,889 --> 00:28:15,260
be<font color="#CCCCCC"> loaded from</font><font color="#E5E5E5"> the file</font><font color="#CCCCCC"> system for some</font>

489
00:28:12,090 --> 00:28:20,580
of them as you<font color="#CCCCCC"> can see from screenshot</font>

490
00:28:15,260 --> 00:28:22,790
of<font color="#E5E5E5"> Alexander's</font><font color="#CCCCCC"> could--but</font><font color="#E5E5E5"> Microsoft</font><font color="#CCCCCC"> 60</font>

491
00:28:20,580 --> 00:28:25,040
model signed by Intel

492
00:28:22,790 --> 00:28:30,980
loaded from the file system because it's

493
00:28:25,040 --> 00:28:34,399
<font color="#CCCCCC">loaded by hyper-v it's not loaded by</font>

494
00:28:30,980 --> 00:28:36,820
<font color="#E5E5E5">hyper-v it pass it to</font><font color="#CCCCCC"> SMM by hyper-v and</font>

495
00:28:34,400 --> 00:28:38,960
then it's loaded in the<font color="#CCCCCC"> Invicta</font>

496
00:28:36,820 --> 00:28:41,090
non-addicted<font color="#CCCCCC"> mod cache it's pretty</font>

497
00:28:38,960 --> 00:28:43,580
interesting and it's much<font color="#CCCCCC"> easier to fast</font>

498
00:28:41,090 --> 00:28:47,720
<font color="#E5E5E5">from file systems and you have a</font><font color="#CCCCCC"> BIOS</font>

499
00:28:43,580 --> 00:28:51,139
<font color="#E5E5E5">update you change it a</font><font color="#CCCCCC"> bit and then</font><font color="#E5E5E5"> you</font>

500
00:28:47,720 --> 00:28:54,620
need flash another system and<font color="#E5E5E5"> boot and</font>

501
00:28:51,140 --> 00:29:00,440
again make this loop<font color="#CCCCCC"> it's pretty hard</font>

502
00:28:54,620 --> 00:29:02,570
and<font color="#E5E5E5"> take a lot of time and now one</font><font color="#CCCCCC"> of</font>

503
00:29:00,440 --> 00:29:08,660
the<font color="#E5E5E5"> most interesting part about new</font>

504
00:29:02,570 --> 00:29:11,590
bypasses for<font color="#E5E5E5"> boot guard so boot guard</font>

505
00:29:08,660 --> 00:29:14,390
<font color="#CCCCCC">armoring secure boot and actually most</font>

506
00:29:11,590 --> 00:29:19,100
interesting thing it's<font color="#E5E5E5"> locket root of</font>

507
00:29:14,390 --> 00:29:22,040
trust inside the hardware and been

508
00:29:19,100 --> 00:29:23,719
developed in 2013 but<font color="#CCCCCC"> it was fused the</font>

509
00:29:22,040 --> 00:29:25,790
changes<font color="#E5E5E5"> because when I reverse</font>

510
00:29:23,720 --> 00:29:28,670
engineering different versions<font color="#E5E5E5"> I find</font>

511
00:29:25,790 --> 00:29:31,940
some find out some of<font color="#CCCCCC"> the changes in the</font>

512
00:29:28,670 --> 00:29:33,650
technology<font color="#E5E5E5"> most interesting</font><font color="#CCCCCC"> mod</font><font color="#E5E5E5"> it's</font>

513
00:29:31,940 --> 00:29:38,510
verified boot where it's locked

514
00:29:33,650 --> 00:29:43,370
root of trust<font color="#CCCCCC"> cache for vendor key</font>

515
00:29:38,510 --> 00:29:46,370
inside<font color="#CCCCCC"> field programmable</font><font color="#E5E5E5"> fuse and there</font>

516
00:29:43,370 --> 00:29:48,739
it's<font color="#CCCCCC"> actually attack surface</font><font color="#E5E5E5"> getting</font>

517
00:29:46,370 --> 00:29:53,959
more complicated<font color="#CCCCCC"> because we</font><font color="#E5E5E5"> have now a</font>

518
00:29:48,740 --> 00:29:59,750
hardware company<font color="#CCCCCC"> it's into a boot guard</font>

519
00:29:53,960 --> 00:30:02,480
operating modes but actually most

520
00:29:59,750 --> 00:30:04,910
interesting and actually<font color="#CCCCCC"> most</font><font color="#E5E5E5"> of the</font>

521
00:30:02,480 --> 00:30:08,120
<font color="#CCCCCC">vendors use it when the measured</font><font color="#E5E5E5"> boot</font>

522
00:30:04,910 --> 00:30:11,900
and verified boot<font color="#CCCCCC"> enabled together and</font>

523
00:30:08,120 --> 00:30:14,330
<font color="#E5E5E5">just mean like we have a root of trust</font>

524
00:30:11,900 --> 00:30:18,560
<font color="#CCCCCC">working on the hardware and</font><font color="#E5E5E5"> also some of</font>

525
00:30:14,330 --> 00:30:23,659
<font color="#CCCCCC">the paths for most software mods for</font>

526
00:30:18,560 --> 00:30:29,800
sleep and for for hibernate sometimes

527
00:30:23,660 --> 00:30:33,200
use only tibia it's a boot cut flow when

528
00:30:29,800 --> 00:30:38,840
<font color="#E5E5E5">CPU actually from the reset walk vector</font>

529
00:30:33,200 --> 00:30:43,010
before even bias will be<font color="#E5E5E5"> enabled start</font>

530
00:30:38,840 --> 00:30:46,060
booting<font color="#E5E5E5"> and getting the control it start</font>

531
00:30:43,010 --> 00:30:52,540
<font color="#E5E5E5">CPU microcode flow which is actually</font>

532
00:30:46,060 --> 00:30:55,129
execute a same model<font color="#E5E5E5"> and verify IBB</font>

533
00:30:52,540 --> 00:31:02,330
initial boot block<font color="#E5E5E5"> which is usually</font>

534
00:30:55,130 --> 00:31:06,980
<font color="#E5E5E5">cover</font><font color="#CCCCCC"> check</font><font color="#E5E5E5"> and pay phases here's a</font>

535
00:31:02,330 --> 00:31:10,580
chain<font color="#CCCCCC"> of trust for boot guard</font><font color="#E5E5E5"> so as we</font>

536
00:31:06,980 --> 00:31:13,580
can see<font color="#E5E5E5"> we have some</font><font color="#CCCCCC"> of the relations</font>

537
00:31:10,580 --> 00:31:16,429
with memory<font color="#E5E5E5"> engine because memory engine</font>

538
00:31:13,580 --> 00:31:19,760
responsible for programming<font color="#E5E5E5"> field</font>

539
00:31:16,430 --> 00:31:23,090
<font color="#E5E5E5">programmable fuse and also we have a</font><font color="#CCCCCC"> kim</font>

540
00:31:19,760 --> 00:31:24,920
<font color="#CCCCCC">yuna fest and initial block manifest</font>

541
00:31:23,090 --> 00:31:29,300
<font color="#E5E5E5">where is actually initial boot block</font>

542
00:31:24,920 --> 00:31:31,730
<font color="#E5E5E5">stirred</font><font color="#CCCCCC"> and also we do have a lot of</font>

543
00:31:29,300 --> 00:31:33,919
<font color="#E5E5E5">different components but for us one of</font>

544
00:31:31,730 --> 00:31:36,050
<font color="#CCCCCC">the most interesting is the signatures</font>

545
00:31:33,920 --> 00:31:38,630
<font color="#E5E5E5">and</font><font color="#CCCCCC"> what the signatures cover and the</font>

546
00:31:36,050 --> 00:31:42,889
hashes values and we<font color="#CCCCCC"> can see om root</font>

547
00:31:38,630 --> 00:31:44,240
public key and<font color="#E5E5E5"> also we we see this om</font>

548
00:31:42,890 --> 00:31:48,890
root public key

549
00:31:44,240 --> 00:31:50,270
been<font color="#E5E5E5"> sign it in k manifest and it's</font>

550
00:31:48,890 --> 00:31:53,420
important<font color="#E5E5E5"> for the</font><font color="#CCCCCC"> future because</font>

551
00:31:50,270 --> 00:31:58,520
<font color="#E5E5E5">remember for</font><font color="#CCCCCC"> the future</font><font color="#E5E5E5"> because</font><font color="#CCCCCC"> i will</font>

552
00:31:53,420 --> 00:32:01,750
show<font color="#E5E5E5"> how we had how the vendors actually</font>

553
00:31:58,520 --> 00:32:04,310
<font color="#E5E5E5">implements this floor wrongly so</font><font color="#CCCCCC"> which</font>

554
00:32:01,750 --> 00:32:07,450
<font color="#E5E5E5">lock it by hardware these companies</font>

555
00:32:04,310 --> 00:32:10,070
inside the<font color="#CCCCCC"> former</font><font color="#E5E5E5"> and what's actually</font>

556
00:32:07,450 --> 00:32:14,810
<font color="#E5E5E5">validation for doing so</font>

557
00:32:10,070 --> 00:32:20,060
it's<font color="#E5E5E5"> verify by ACM security version</font>

558
00:32:14,810 --> 00:32:21,470
<font color="#E5E5E5">number and execute ACM then and after</font>

559
00:32:20,060 --> 00:32:24,800
signature verification

560
00:32:21,470 --> 00:32:27,280
<font color="#CCCCCC">Oh actually it's verified boot flow from</font>

561
00:32:24,800 --> 00:32:33,200
<font color="#E5E5E5">estimates a bit different</font><font color="#CCCCCC"> oh actually</font>

562
00:32:27,280 --> 00:32:38,389
<font color="#E5E5E5">here is interesting thing because when</font>

563
00:32:33,200 --> 00:32:41,810
you close and open your lid the vendors

564
00:32:38,390 --> 00:32:44,270
always fighting<font color="#E5E5E5"> how fast you get some</font>

565
00:32:41,810 --> 00:32:48,080
picture on your<font color="#CCCCCC"> screen and of course if</font>

566
00:32:44,270 --> 00:32:51,049
you go<font color="#CCCCCC"> all all the flow for</font>

567
00:32:48,080 --> 00:32:54,260
<font color="#E5E5E5">we find all the good root root of trust</font>

568
00:32:51,049 --> 00:32:58,100
<font color="#CCCCCC">chain of trust it will be</font><font color="#E5E5E5"> preached a</font>

569
00:32:54,260 --> 00:33:00,679
long time and they implement a<font color="#CCCCCC"> specific</font>

570
00:32:58,100 --> 00:33:05,480
assessment driver<font color="#E5E5E5"> which is</font><font color="#CCCCCC"> only check</font>

571
00:33:00,679 --> 00:33:08,840
the<font color="#E5E5E5"> store previous state of verification</font>

572
00:33:05,480 --> 00:33:13,460
flow if it is good then it's passing

573
00:33:08,840 --> 00:33:16,418
control to the<font color="#CCCCCC"> operating system</font><font color="#E5E5E5"> and it's</font>

574
00:33:13,460 --> 00:33:22,279
actually<font color="#CCCCCC"> the</font><font color="#E5E5E5"> flow what</font><font color="#CCCCCC"> is what what this</font>

575
00:33:16,419 --> 00:33:27,679
<font color="#E5E5E5">is</font><font color="#CCCCCC"> Imam driver does and also here's a</font>

576
00:33:22,279 --> 00:33:33,100
chain of<font color="#E5E5E5"> trust for for the om k</font><font color="#CCCCCC"> cache</font>

577
00:33:27,679 --> 00:33:36,799
and we<font color="#CCCCCC"> can see it is we have</font><font color="#E5E5E5"> K manifest</font>

578
00:33:33,100 --> 00:33:39,620
<font color="#E5E5E5">which is cover km ID and we have</font><font color="#CCCCCC"> our</font><font color="#E5E5E5"> M</font>

579
00:33:36,799 --> 00:33:46,789
key hash which is<font color="#E5E5E5"> only covered by key</font>

580
00:33:39,620 --> 00:33:48,739
signature<font color="#E5E5E5"> here is a</font><font color="#CCCCCC"> K manifest and also</font>

581
00:33:46,789 --> 00:33:49,549
it's been recovered by reverse

582
00:33:48,740 --> 00:34:02,179
engineering

583
00:33:49,549 --> 00:34:05,539
obviously this<font color="#CCCCCC"> SMM driver so we can see</font>

584
00:34:02,179 --> 00:34:10,909
<font color="#CCCCCC">few interesting things I will be a</font>

585
00:34:05,539 --> 00:34:14,239
manifest<font color="#E5E5E5"> hash and actually RSA signature</font>

586
00:34:10,909 --> 00:34:19,460
a public key for for the comprehension

587
00:34:14,239 --> 00:34:22,069
so and the<font color="#E5E5E5"> hash which is actually</font>

588
00:34:19,460 --> 00:34:25,810
program<font color="#CCCCCC"> it inside the programmable fuse</font>

589
00:34:22,070 --> 00:34:33,460
it's there so it's stored in this

590
00:34:25,810 --> 00:34:37,460
particular volume<font color="#E5E5E5"> inside the bio subject</font>

591
00:34:33,460 --> 00:34:40,280
here is BPM would<font color="#E5E5E5"> guard policy manifest</font>

592
00:34:37,460 --> 00:34:43,879
and it's quite interesting<font color="#CCCCCC"> because it</font>

593
00:34:40,280 --> 00:34:47,570
has<font color="#CCCCCC"> IBB signals and</font><font color="#E5E5E5"> I be basic men's</font>

594
00:34:43,879 --> 00:34:49,899
showing the coverage for components

595
00:34:47,570 --> 00:34:54,950
inside the<font color="#CCCCCC"> bias</font>

596
00:34:49,899 --> 00:34:56,810
<font color="#CCCCCC">bye-bye-bye hashes volume and it was</font>

597
00:34:54,949 --> 00:35:01,259
also recovered<font color="#E5E5E5"> and</font>

598
00:34:56,810 --> 00:35:03,299
when when when<font color="#E5E5E5"> I discovered</font><font color="#CCCCCC"> the Sphinx I</font>

599
00:35:01,260 --> 00:35:07,320
start thinking how I can automate to

600
00:35:03,300 --> 00:35:09,570
verify IBB for all different<font color="#CCCCCC"> bias</font>

601
00:35:07,320 --> 00:35:12,650
updates because like we<font color="#E5E5E5"> have all the</font>

602
00:35:09,570 --> 00:35:18,330
<font color="#CCCCCC">values and this coverage</font><font color="#E5E5E5"> pretty much</font>

603
00:35:12,650 --> 00:35:23,570
<font color="#E5E5E5">easy to to calculate so I commit to bias</font>

604
00:35:18,330 --> 00:35:27,930
guard<font color="#CCCCCC"> o u Phi 2</font><font color="#E5E5E5"> for verifying boot guard</font>

605
00:35:23,570 --> 00:35:30,690
values<font color="#CCCCCC"> last year in October</font><font color="#E5E5E5"> it was just</font>

606
00:35:27,930 --> 00:35:38,490
commit and then much<font color="#CCCCCC"> more improvements</font>

607
00:35:30,690 --> 00:35:41,430
in end of November<font color="#CCCCCC"> so</font><font color="#E5E5E5"> actually attack</font>

608
00:35:38,490 --> 00:35:43,770
<font color="#E5E5E5">your never attack standard right so it's</font>

609
00:35:41,430 --> 00:35:47,819
<font color="#CCCCCC">always looking inside specific</font>

610
00:35:43,770 --> 00:35:51,750
implementations and<font color="#CCCCCC"> it's which is</font><font color="#E5E5E5"> smart</font>

611
00:35:47,820 --> 00:35:53,880
because why we should look<font color="#E5E5E5"> on the</font>

612
00:35:51,750 --> 00:35:56,130
standard let's look how its implemented

613
00:35:53,880 --> 00:36:00,690
<font color="#E5E5E5">where is actually vulnerabilities exist</font>

614
00:35:56,130 --> 00:36:05,070
<font color="#CCCCCC">I work inside</font><font color="#E5E5E5"> by a boot guard</font><font color="#CCCCCC"> diksha</font>

615
00:36:00,690 --> 00:36:07,800
validation<font color="#E5E5E5"> fall which is actually define</font>

616
00:36:05,070 --> 00:36:11,130
one<font color="#CCCCCC"> of the transition flock when you</font>

617
00:36:07,800 --> 00:36:19,190
open the<font color="#E5E5E5"> lid and return your system from</font>

618
00:36:11,130 --> 00:36:26,690
<font color="#E5E5E5">the sleep and actually I start looking</font>

619
00:36:19,190 --> 00:36:26,690
more more deeply<font color="#CCCCCC"> on this transition</font><font color="#E5E5E5"> and</font>

620
00:36:28,790 --> 00:36:37,890
so error messages sometimes<font color="#E5E5E5"> provide much</font>

621
00:36:35,880 --> 00:36:45,390
more context for<font color="#CCCCCC"> reverse engineering</font>

622
00:36:37,890 --> 00:36:49,109
<font color="#CCCCCC">than other code and this errors says</font>

623
00:36:45,390 --> 00:36:54,990
like about specific verification or the

624
00:36:49,110 --> 00:36:56,820
<font color="#E5E5E5">state which is been in the true when the</font>

625
00:36:54,990 --> 00:37:00,029
chain of trust<font color="#CCCCCC"> been</font><font color="#E5E5E5"> verified correctly</font>

626
00:36:56,820 --> 00:37:04,890
so I mean wow that's interesting

627
00:37:00,030 --> 00:37:10,970
<font color="#E5E5E5">and after actually I show it this</font><font color="#CCCCCC"> back</font>

628
00:37:04,890 --> 00:37:10,970
on<font color="#E5E5E5"> black</font><font color="#CCCCCC"> cat you say last year</font>

629
00:37:11,360 --> 00:37:17,580
Alex<font color="#E5E5E5"> yermolov from embody discovers the</font>

630
00:37:15,570 --> 00:37:21,480
same<font color="#CCCCCC"> Bach insight into not canned been</font>

631
00:37:17,580 --> 00:37:28,470
reported to Intel and described but some

632
00:37:21,480 --> 00:37:30,600
details<font color="#E5E5E5"> on the</font><font color="#CCCCCC"> blog</font><font color="#E5E5E5"> but let's discuss</font>

633
00:37:28,470 --> 00:37:32,629
more specific implementation details

634
00:37:30,600 --> 00:37:37,500
details

635
00:37:32,630 --> 00:37:41,580
it was my target platform and it's<font color="#E5E5E5"> has</font>

636
00:37:37,500 --> 00:37:43,770
<font color="#E5E5E5">American medical tents bias and the same</font>

637
00:37:41,580 --> 00:37:48,170
as<font color="#E5E5E5"> internal knock use</font><font color="#CCCCCC"> that's</font><font color="#E5E5E5"> why</font>

638
00:37:43,770 --> 00:37:53,160
<font color="#CCCCCC">Zeppelin ability being the same and</font>

639
00:37:48,170 --> 00:37:55,710
actually for<font color="#E5E5E5"> the boot guard</font><font color="#CCCCCC"> they did</font>

640
00:37:53,160 --> 00:37:59,040
almost everything properly but<font color="#E5E5E5"> they not</font>

641
00:37:55,710 --> 00:38:01,920
lock it in me because it has a read and

642
00:37:59,040 --> 00:38:07,230
write access<font color="#E5E5E5"> and also it's been a</font>

643
00:38:01,920 --> 00:38:09,690
<font color="#CCCCCC">problem with cache because</font><font color="#E5E5E5"> it's been not</font>

644
00:38:07,230 --> 00:38:12,900
program at<font color="#E5E5E5"> oh it's not been</font><font color="#CCCCCC"> Lockett it's</font>

645
00:38:09,690 --> 00:38:17,550
been<font color="#E5E5E5"> program at but not</font><font color="#CCCCCC"> lock it by field</font>

646
00:38:12,900 --> 00:38:19,800
<font color="#CCCCCC">programmable fuse and</font><font color="#E5E5E5"> they've been quite</font>

647
00:38:17,550 --> 00:38:22,740
interesting for me<font color="#CCCCCC"> because we have open</font>

648
00:38:19,800 --> 00:38:27,420
in the<font color="#E5E5E5"> region and programmable field</font>

649
00:38:22,740 --> 00:38:35,009
fuse<font color="#E5E5E5"> program</font><font color="#CCCCCC"> I'd buy Amin so you can</font>

650
00:38:27,420 --> 00:38:38,700
actually<font color="#E5E5E5"> use specific</font><font color="#CCCCCC"> SMM driver to just</font>

651
00:38:35,010 --> 00:38:42,800
erase this hash inside and it will<font color="#E5E5E5"> be</font>

652
00:38:38,700 --> 00:38:44,970
pretty much<font color="#E5E5E5"> that's it and also they</font>

653
00:38:42,800 --> 00:38:46,650
actually use measure<font color="#E5E5E5"> at boot plus</font>

654
00:38:44,970 --> 00:38:51,149
verified boot which<font color="#CCCCCC"> is not stronger mod</font>

655
00:38:46,650 --> 00:38:54,650
but it's not helped because because of

656
00:38:51,150 --> 00:38:59,370
<font color="#E5E5E5">this box and let's discuss how actually</font>

657
00:38:54,650 --> 00:39:03,210
it's worked<font color="#CCCCCC"> so this part in</font><font color="#E5E5E5"> hardware</font>

658
00:38:59,370 --> 00:39:07,680
don't exist anymore because we<font color="#CCCCCC"> already</font>

659
00:39:03,210 --> 00:39:11,010
know<font color="#E5E5E5"> we can clean the cache and actually</font>

660
00:39:07,680 --> 00:39:14,490
I did<font color="#E5E5E5"> it in previous presentation so</font>

661
00:39:11,010 --> 00:39:17,550
show<font color="#E5E5E5"> it in more details on it and our</font>

662
00:39:14,490 --> 00:39:20,009
root of trust<font color="#E5E5E5"> now only firmware so but</font>

663
00:39:17,550 --> 00:39:23,520
<font color="#CCCCCC">ok</font><font color="#E5E5E5"> so it's already fixed when</font><font color="#CCCCCC"> they're</font>

664
00:39:20,010 --> 00:39:27,680
<font color="#E5E5E5">programmers</font><font color="#CCCCCC"> - right so we have</font>

665
00:39:23,520 --> 00:39:31,890
everything done correctly we<font color="#CCCCCC"> have</font>

666
00:39:27,680 --> 00:39:35,399
disabled the meridians<font color="#E5E5E5"> we have program</font>

667
00:39:31,890 --> 00:39:39,629
at<font color="#E5E5E5"> field programmable fuse everything is</font>

668
00:39:35,400 --> 00:39:46,589
done<font color="#E5E5E5"> so what the attacker can do in this</font>

669
00:39:39,630 --> 00:39:51,980
case<font color="#E5E5E5"> so but remember this root root of</font>

670
00:39:46,589 --> 00:39:56,540
trust for the key right and what if

671
00:39:51,980 --> 00:40:01,410
vendor don't<font color="#CCCCCC"> refire M care</font><font color="#E5E5E5"> key hash and</font>

672
00:39:56,540 --> 00:40:06,329
actually I reverse engineer it<font color="#CCCCCC"> on</font><font color="#E5E5E5"> the</font>

673
00:40:01,410 --> 00:40:10,589
Nova on X 230<font color="#E5E5E5"> series they for think that</font>

674
00:40:06,329 --> 00:40:14,130
they doesn't<font color="#E5E5E5"> verify</font><font color="#CCCCCC"> the key hash the</font>

675
00:40:10,589 --> 00:40:16,200
vendor hash<font color="#E5E5E5"> so that means they break the</font>

676
00:40:14,130 --> 00:40:18,480
root of chain<font color="#CCCCCC"> of trust</font><font color="#E5E5E5"> but it's</font>

677
00:40:16,200 --> 00:40:23,240
implemented correctly<font color="#CCCCCC"> I don't know what</font>

678
00:40:18,480 --> 00:40:29,940
it was<font color="#E5E5E5"> the reason but some of the the</font>

679
00:40:23,240 --> 00:40:33,868
<font color="#CCCCCC">recent update</font><font color="#E5E5E5"> being changed in last two</font>

680
00:40:29,940 --> 00:40:37,470
weeks ago and but previous updates if

681
00:40:33,869 --> 00:40:38,880
you not update your bias still have this

682
00:40:37,470 --> 00:40:40,919
<font color="#E5E5E5">I don't know</font>

683
00:40:38,880 --> 00:40:49,230
vulnerability but it looks<font color="#E5E5E5"> like as a</font>

684
00:40:40,920 --> 00:40:53,339
backdoor for developers also for boot

685
00:40:49,230 --> 00:40:57,089
guard<font color="#E5E5E5"> full validation</font><font color="#CCCCCC"> as I mentioned we</font>

686
00:40:53,339 --> 00:41:01,319
<font color="#CCCCCC">develop that specific you fight</font><font color="#E5E5E5"> to</font>

687
00:40:57,089 --> 00:41:03,779
version<font color="#E5E5E5"> and my commit actually validated</font>

688
00:41:01,319 --> 00:41:06,509
<font color="#E5E5E5">all the boot guard flow which</font><font color="#CCCCCC"> is covered</font>

689
00:41:03,780 --> 00:41:09,900
which is not here is a blog post link

690
00:41:06,510 --> 00:41:15,839
<font color="#CCCCCC">where a bit more describe it about</font><font color="#E5E5E5"> the</font>

691
00:41:09,900 --> 00:41:18,690
issues and<font color="#E5E5E5"> what you can find from output</font>

692
00:41:15,839 --> 00:41:23,130
of a new version of<font color="#CCCCCC"> ufi to you can</font>

693
00:41:18,690 --> 00:41:26,099
actually found<font color="#E5E5E5"> all information about</font><font color="#CCCCCC"> ACM</font>

694
00:41:23,130 --> 00:41:27,510
all the keys<font color="#E5E5E5"> and</font><font color="#CCCCCC"> actually everything</font><font color="#E5E5E5"> and</font>

695
00:41:26,099 --> 00:41:34,950
<font color="#E5E5E5">also the</font>

696
00:41:27,510 --> 00:41:39,530
coverage<font color="#E5E5E5"> for initial woodblock and one</font>

697
00:41:34,950 --> 00:41:42,029
<font color="#E5E5E5">of the</font><font color="#CCCCCC"> farmers wish I recently looked</font>

698
00:41:39,530 --> 00:41:46,710
don't cover everything properly

699
00:41:42,030 --> 00:41:49,200
<font color="#E5E5E5">everything being covered properly pay</font>

700
00:41:46,710 --> 00:41:51,840
<font color="#E5E5E5">dekes if everything so everything</font>

701
00:41:49,200 --> 00:41:58,950
covered by<font color="#CCCCCC"> IBB</font><font color="#E5E5E5"> and vendor cash so but</font>

702
00:41:51,840 --> 00:42:01,380
<font color="#CCCCCC">it's few sections which is has a row</font><font color="#E5E5E5"> one</font>

703
00:41:58,950 --> 00:42:03,720
volume in the pay which<font color="#CCCCCC"> is has a row</font>

704
00:42:01,380 --> 00:42:06,440
<font color="#E5E5E5">section which is not covered</font><font color="#CCCCCC"> its</font><font color="#E5E5E5"> to rob</font>

705
00:42:03,720 --> 00:42:09,689
sections and<font color="#CCCCCC"> okay what</font><font color="#E5E5E5"> is inside and</font>

706
00:42:06,440 --> 00:42:15,690
they just use a bit on the beginning of

707
00:42:09,690 --> 00:42:17,970
<font color="#E5E5E5">this row file and rest of the file it</font>

708
00:42:15,690 --> 00:42:20,550
<font color="#E5E5E5">just has some constant values which</font>

709
00:42:17,970 --> 00:42:24,930
doesn't make sense<font color="#E5E5E5"> because I change it</font>

710
00:42:20,550 --> 00:42:27,300
for check it and<font color="#CCCCCC"> okay let's look inside</font>

711
00:42:24,930 --> 00:42:29,879
<font color="#CCCCCC">house a pay driver fled from</font>

712
00:42:27,300 --> 00:42:38,400
initialization<font color="#E5E5E5"> drivers load their worlds</font>

713
00:42:29,880 --> 00:42:42,600
<font color="#E5E5E5">and</font><font color="#CCCCCC"> okay it's straightforward pay file</font>

714
00:42:38,400 --> 00:42:47,760
older<font color="#E5E5E5"> so it's a load</font><font color="#CCCCCC"> microsoft portable</font>

715
00:42:42,600 --> 00:42:51,839
executable files but<font color="#CCCCCC"> okay and this</font>

716
00:42:47,760 --> 00:42:55,350
<font color="#CCCCCC">header this prototype</font><font color="#E5E5E5"> of the function</font>

717
00:42:51,840 --> 00:42:57,270
you can find in<font color="#CCCCCC"> tiana</font><font color="#E5E5E5"> core and it's the</font>

718
00:42:55,350 --> 00:43:00,270
same as implemented<font color="#CCCCCC"> an american</font>

719
00:42:57,270 --> 00:43:03,720
megatrends biases and<font color="#CCCCCC"> okay it's</font>

720
00:43:00,270 --> 00:43:06,840
authenticated<font color="#CCCCCC"> state so yeah i can do</font>

721
00:43:03,720 --> 00:43:11,339
much there<font color="#CCCCCC"> but let's look maybe it is</font>

722
00:43:06,840 --> 00:43:13,950
something<font color="#E5E5E5"> wrong</font><font color="#CCCCCC"> her i look inside</font><font color="#E5E5E5"> the</font>

723
00:43:11,340 --> 00:43:18,420
world file and<font color="#CCCCCC"> okay</font><font color="#E5E5E5"> here is also tonific</font>

724
00:43:13,950 --> 00:43:21,439
ated state but in american megatrends it

725
00:43:18,420 --> 00:43:28,020
<font color="#CCCCCC">always true Oh false so it's never used</font>

726
00:43:21,440 --> 00:43:30,510
because they face everything loaded

727
00:43:28,020 --> 00:43:32,880
pretty fast<font color="#E5E5E5"> this</font><font color="#CCCCCC"> file</font><font color="#E5E5E5"> should</font><font color="#CCCCCC"> be</font><font color="#E5E5E5"> go very</font>

728
00:43:30,510 --> 00:43:35,550
fast<font color="#CCCCCC"> and it's covered by</font><font color="#E5E5E5"> it should be</font>

729
00:43:32,880 --> 00:43:37,800
<font color="#E5E5E5">covered by</font><font color="#CCCCCC"> IBB</font><font color="#E5E5E5"> why we should check the</font>

730
00:43:35,550 --> 00:43:39,970
signatures for all the file when it's

731
00:43:37,800 --> 00:43:46,960
loaded<font color="#CCCCCC"> and also</font>

732
00:43:39,970 --> 00:43:51,459
<font color="#E5E5E5">six of low-loader payloader of</font><font color="#CCCCCC"> pay</font><font color="#E5E5E5"> it's</font>

733
00:43:46,960 --> 00:43:54,970
just parts the form of<font color="#CCCCCC"> firmer</font><font color="#E5E5E5"> well</font>

734
00:43:51,460 --> 00:43:57,970
volumes<font color="#CCCCCC"> find the binary which</font><font color="#E5E5E5"> has the</font>

735
00:43:54,970 --> 00:44:00,819
<font color="#CCCCCC">header of Microsoft portable executable</font>

736
00:43:57,970 --> 00:44:03,129
file and start loading because<font color="#E5E5E5"> it's dark</font>

737
00:44:00,820 --> 00:44:06,490
bars a<font color="#CCCCCC"> hitter discovers the image size</font>

738
00:44:03,130 --> 00:44:10,840
<font color="#E5E5E5">and then start loaded and no</font>

739
00:44:06,490 --> 00:44:14,229
verification<font color="#E5E5E5"> for anything there but</font><font color="#CCCCCC"> okay</font>

740
00:44:10,840 --> 00:44:17,230
we can actually<font color="#CCCCCC"> load the page driver but</font>

741
00:44:14,230 --> 00:44:21,820
what we can do next so because it will

742
00:44:17,230 --> 00:44:25,990
this page will<font color="#CCCCCC"> be locked and we actually</font>

743
00:44:21,820 --> 00:44:27,849
<font color="#E5E5E5">can do much there most interesting most</font>

744
00:44:25,990 --> 00:44:31,109
interesting thing it's getting<font color="#E5E5E5"> inside</font>

745
00:44:27,849 --> 00:44:35,440
<font color="#CCCCCC">the</font><font color="#E5E5E5"> system management mode right and</font>

746
00:44:31,109 --> 00:44:38,529
here is a path actually<font color="#CCCCCC"> exists because</font>

747
00:44:35,440 --> 00:44:41,800
<font color="#CCCCCC">we have a</font><font color="#E5E5E5"> page driver which is can</font>

748
00:44:38,530 --> 00:44:43,930
discover the boot services which is

749
00:44:41,800 --> 00:44:48,130
actually has a pointer<font color="#CCCCCC"> to all loaded</font>

750
00:44:43,930 --> 00:44:51,250
<font color="#E5E5E5">drivers by</font><font color="#CCCCCC"> OK'd protocol so good</font>

751
00:44:48,130 --> 00:44:54,940
<font color="#E5E5E5">services can easily find by the</font>

752
00:44:51,250 --> 00:44:58,349
<font color="#E5E5E5">signature just in the memory of doing</font>

753
00:44:54,940 --> 00:45:01,330
<font color="#E5E5E5">the platform installation phase and then</font>

754
00:44:58,349 --> 00:45:04,599
we hook locate protocol and inject

755
00:45:01,330 --> 00:45:08,170
malicious driver by this<font color="#E5E5E5"> locate protocol</font>

756
00:45:04,599 --> 00:45:11,320
function and this structure<font color="#E5E5E5"> actually</font>

757
00:45:08,170 --> 00:45:17,560
exists<font color="#E5E5E5"> inside</font><font color="#CCCCCC"> ufi specification in the</font>

758
00:45:11,320 --> 00:45:20,080
header<font color="#CCCCCC"> and all the constants also</font><font color="#E5E5E5"> there</font>

759
00:45:17,560 --> 00:45:29,520
so it's<font color="#CCCCCC"> kind of unhorse</font><font color="#E5E5E5"> for</font><font color="#CCCCCC"> finding</font>

760
00:45:20,080 --> 00:45:33,279
inside the memory and actually it's very

761
00:45:29,520 --> 00:45:37,660
<font color="#E5E5E5">interesting because</font><font color="#CCCCCC"> you can see clearly</font>

762
00:45:33,280 --> 00:45:40,839
<font color="#CCCCCC">like implementations</font><font color="#E5E5E5"> and the standards</font>

763
00:45:37,660 --> 00:45:44,339
<font color="#E5E5E5">it's very different right and sometimes</font>

764
00:45:40,839 --> 00:45:48,410
<font color="#E5E5E5">you can discover very obvious bugs</font><font color="#CCCCCC"> and</font>

765
00:45:44,339 --> 00:45:52,190
<font color="#E5E5E5">also</font><font color="#CCCCCC"> it's</font>

766
00:45:48,410 --> 00:45:54,140
not expected<font color="#CCCCCC"> been by original developers</font>

767
00:45:52,190 --> 00:45:56,390
because<font color="#E5E5E5"> okay we have a row section but</font>

768
00:45:54,140 --> 00:45:58,490
what the attacker can get there because

769
00:45:56,390 --> 00:46:02,509
<font color="#E5E5E5">it's not executable file with just the</font>

770
00:45:58,490 --> 00:46:06,368
data but specifically payloader<font color="#E5E5E5"> allow us</font>

771
00:46:02,509 --> 00:46:06,369
make something<font color="#E5E5E5"> more</font><font color="#CCCCCC"> interesting right</font>

772
00:46:07,180 --> 00:46:14,598
and<font color="#E5E5E5"> instead</font><font color="#CCCCCC"> i want to say so it's two</font>

773
00:46:11,839 --> 00:46:19,308
different<font color="#CCCCCC"> realities between developers</font>

774
00:46:14,599 --> 00:46:21,829
<font color="#CCCCCC">and</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> hackers</font><font color="#E5E5E5"> because they thinking</font>

775
00:46:19,309 --> 00:46:24,529
in different<font color="#CCCCCC"> ways and it shows the</font>

776
00:46:21,829 --> 00:46:28,099
importance<font color="#E5E5E5"> to connect two different</font>

777
00:46:24,529 --> 00:46:32,380
worlds<font color="#CCCCCC"> in in in a very productive way</font>

778
00:46:28,099 --> 00:46:36,460
<font color="#E5E5E5">for making products more secure right</font>

779
00:46:32,380 --> 00:46:36,460
thank<font color="#E5E5E5"> you</font><font color="#CCCCCC"> for</font><font color="#E5E5E5"> your attention</font><font color="#CCCCCC"> and</font>

780
00:46:37,460 --> 00:46:44,230
[Applause]

781
00:46:39,370 --> 00:46:46,890
we have actually around<font color="#E5E5E5"> five minutes for</font>

782
00:46:44,230 --> 00:46:46,890
<font color="#E5E5E5">the questions</font>

783
00:47:02,260 --> 00:47:11,260
so thank you<font color="#E5E5E5"> for your lecture</font><font color="#CCCCCC"> I'd like</font>

784
00:47:07,640 --> 00:47:13,700
to ask you to expand about<font color="#E5E5E5"> the</font>

785
00:47:11,260 --> 00:47:19,070
communication methods between<font color="#CCCCCC"> SMM and</font>

786
00:47:13,700 --> 00:47:27,080
ACM<font color="#E5E5E5"> if you could okay so the</font><font color="#CCCCCC"> question is</font>

787
00:47:19,070 --> 00:47:29,810
how<font color="#CCCCCC"> SMM can use the ACM right or how</font>

788
00:47:27,080 --> 00:47:33,230
<font color="#CCCCCC">it's connect</font><font color="#E5E5E5"> because actually the</font>

789
00:47:29,810 --> 00:47:33,950
execution<font color="#E5E5E5"> the main for ACM and</font><font color="#CCCCCC"> SMI much</font>

790
00:47:33,230 --> 00:47:36,830
<font color="#E5E5E5">different</font>

791
00:47:33,950 --> 00:47:43,098
so<font color="#CCCCCC"> SMM can be responsible</font><font color="#E5E5E5"> only for</font>

792
00:47:36,830 --> 00:47:47,089
loading<font color="#E5E5E5"> ACM to the cache and specify non</font>

793
00:47:43,099 --> 00:47:50,780
<font color="#CCCCCC">invictus mod and</font><font color="#E5E5E5"> raise some specific</font>

794
00:47:47,089 --> 00:47:53,540
value for signal to CPU for execute that

795
00:47:50,780 --> 00:47:57,920
and it can<font color="#CCCCCC"> executed</font><font color="#E5E5E5"> only on the</font>

796
00:47:53,540 --> 00:48:00,619
dedicated<font color="#E5E5E5"> core which</font><font color="#CCCCCC"> is make a bit</font><font color="#E5E5E5"> more</font>

797
00:47:57,920 --> 00:48:05,599
<font color="#E5E5E5">difficult</font><font color="#CCCCCC"> to exploit some</font><font color="#E5E5E5"> race condition</font>

798
00:48:00,619 --> 00:48:08,839
bugs<font color="#E5E5E5"> so the capital so the SMM just</font>

799
00:48:05,599 --> 00:48:12,230
loads the ACM into the cache runs it

800
00:48:08,839 --> 00:48:16,310
with no actually<font color="#CCCCCC"> it's signal</font><font color="#E5E5E5"> CPU to</font>

801
00:48:12,230 --> 00:48:22,430
<font color="#CCCCCC">Lotus</font><font color="#E5E5E5"> mm to the ACM to the cache</font><font color="#CCCCCC"> s mm</font>

802
00:48:16,310 --> 00:48:27,529
<font color="#E5E5E5">doesn't operate directly</font><font color="#CCCCCC"> business</font><font color="#E5E5E5"> with</font>

803
00:48:22,430 --> 00:48:31,970
the cache in this way so it's set up<font color="#E5E5E5"> the</font>

804
00:48:27,530 --> 00:48:38,150
<font color="#CCCCCC">mod signal CPU and CPU loaded oh it's a</font>

805
00:48:31,970 --> 00:48:41,209
<font color="#CCCCCC">mime mepid</font><font color="#E5E5E5"> ACM and CPU executes</font><font color="#CCCCCC"> a CM</font>

806
00:48:38,150 --> 00:48:44,480
model<font color="#E5E5E5"> inside the non</font><font color="#CCCCCC"> Invicta demoed</font>

807
00:48:41,210 --> 00:48:47,960
cache<font color="#E5E5E5"> yeah also known as the calcium</font><font color="#CCCCCC"> and</font>

808
00:48:44,480 --> 00:48:51,080
other think actually the ACM adjust a

809
00:48:47,960 --> 00:48:52,970
binary blob the thing is<font color="#E5E5E5"> it's has a</font>

810
00:48:51,080 --> 00:48:57,049
signature which is validated by

811
00:48:52,970 --> 00:48:59,569
microcode<font color="#E5E5E5"> and yeah so it's pretty</font>

812
00:48:57,050 --> 00:49:02,420
straightforward code just<font color="#E5E5E5"> in binary</font>

813
00:48:59,570 --> 00:49:06,560
<font color="#E5E5E5">blobs sometimes some very weird</font><font color="#CCCCCC"> parsers</font>

814
00:49:02,420 --> 00:49:09,710
there and for<font color="#E5E5E5"> me it's quite surprised</font>

815
00:49:06,560 --> 00:49:11,350
<font color="#E5E5E5">it's no</font><font color="#CCCCCC"> lot of issues been found on</font>

816
00:49:09,710 --> 00:49:14,650
public because

817
00:49:11,350 --> 00:49:16,480
only three issues appears but<font color="#E5E5E5"> binary</font>

818
00:49:14,650 --> 00:49:18,820
<font color="#E5E5E5">differing with previous</font><font color="#CCCCCC"> versions only</font>

819
00:49:16,480 --> 00:49:21,780
boot guard<font color="#E5E5E5"> show a lot of</font><font color="#CCCCCC"> issues been</font>

820
00:49:18,820 --> 00:49:21,780
<font color="#CCCCCC">paid silently</font>

