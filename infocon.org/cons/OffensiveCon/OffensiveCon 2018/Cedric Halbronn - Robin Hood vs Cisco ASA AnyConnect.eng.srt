1
00:00:01,220 --> 00:00:08,610
hi everyone<font color="#E5E5E5"> so</font><font color="#CCCCCC"> today I'm gonna talk</font>

2
00:00:05,790 --> 00:00:10,860
<font color="#CCCCCC">about Cisco sa firewalls and the story</font>

3
00:00:08,610 --> 00:00:11,820
of journey<font color="#E5E5E5"> how I found</font><font color="#CCCCCC"> a bug</font><font color="#E5E5E5"> and how I</font>

4
00:00:10,860 --> 00:00:16,108
exploited it

5
00:00:11,820 --> 00:00:18,270
so I'm Cedric<font color="#E5E5E5"> working at HCC group doing</font>

6
00:00:16,109 --> 00:00:20,699
<font color="#CCCCCC">vulnerability research exploited opened</font>

7
00:00:18,270 --> 00:00:23,460
<font color="#E5E5E5">and reverse engineering and basically my</font>

8
00:00:20,699 --> 00:00:25,230
my main goal<font color="#CCCCCC"> is to</font><font color="#E5E5E5"> help the pen test</font>

9
00:00:23,460 --> 00:00:26,930
team because we have<font color="#E5E5E5"> quite a huge</font><font color="#CCCCCC"> pen</font>

10
00:00:25,230 --> 00:00:29,310
<font color="#CCCCCC">test team to basically weaponize</font>

11
00:00:26,930 --> 00:00:31,619
<font color="#CCCCCC">exploiter</font><font color="#E5E5E5"> we can basically demonstrate</font>

12
00:00:29,310 --> 00:00:36,989
when abilities to client say<font color="#CCCCCC"> ok you</font><font color="#E5E5E5"> need</font>

13
00:00:31,619 --> 00:00:40,230
<font color="#E5E5E5">to patch basically so I basically put it</font>

14
00:00:36,989 --> 00:00:42,059
like existing exploits on focusing<font color="#E5E5E5"> on a</font>

15
00:00:40,230 --> 00:00:45,328
say<font color="#E5E5E5"> I'm started to do some phasing and I</font>

16
00:00:42,059 --> 00:00:47,730
found a preauth<font color="#CCCCCC"> nobility</font><font color="#E5E5E5"> on Cisco or</font>

17
00:00:45,329 --> 00:00:49,379
<font color="#E5E5E5">Cisco is a firewalls</font><font color="#CCCCCC"> so today we're</font>

18
00:00:47,730 --> 00:00:53,819
<font color="#CCCCCC">gonna</font><font color="#E5E5E5"> talk about that</font><font color="#CCCCCC"> and the idea was</font>

19
00:00:49,379 --> 00:00:56,910
<font color="#E5E5E5">to prove remote code execution so it's</font>

20
00:00:53,820 --> 00:01:00,180
been patched now there's been a lot of

21
00:00:56,910 --> 00:01:03,029
noise kind<font color="#E5E5E5"> of around this</font><font color="#CCCCCC"> bin</font><font color="#E5E5E5"> ability so</font>

22
00:01:00,180 --> 00:01:06,659
I'm gonna<font color="#E5E5E5"> explain first thing is this</font>

23
00:01:03,030 --> 00:01:09,810
bug is nothing<font color="#CCCCCC"> I qb1</font><font color="#E5E5E5"> the the bug I</font><font color="#CCCCCC"> found</font>

24
00:01:06,659 --> 00:01:12,210
was originally found in a web<font color="#CCCCCC"> BPM but</font>

25
00:01:09,810 --> 00:01:14,310
I've used<font color="#E5E5E5"> IQ v1 as a helper to prove</font>

26
00:01:12,210 --> 00:01:16,280
remote code execution<font color="#E5E5E5"> so again the back</font>

27
00:01:14,310 --> 00:01:19,229
<font color="#E5E5E5">is not in itv1</font>

28
00:01:16,280 --> 00:01:23,390
so<font color="#E5E5E5"> leave it up context what</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> a Cisco</font>

29
00:01:19,229 --> 00:01:26,070
ASA firewall<font color="#E5E5E5"> so basically if you use a</font>

30
00:01:23,390 --> 00:01:29,850
VPN<font color="#E5E5E5"> to connect to your company which</font>

31
00:01:26,070 --> 00:01:32,100
most mostly<font color="#E5E5E5"> you'll probably die do you</font>

32
00:01:29,850 --> 00:01:33,658
<font color="#E5E5E5">probably have a</font><font color="#CCCCCC"> Cisco si so you</font><font color="#E5E5E5"> have a</font>

33
00:01:32,100 --> 00:01:36,390
other manufacturer like juniper or

34
00:01:33,659 --> 00:01:38,610
<font color="#E5E5E5">whatever but it's basically</font><font color="#CCCCCC"> beyond 3.2</font>

35
00:01:36,390 --> 00:01:40,740
your<font color="#E5E5E5"> enterprise and the other thing to</font>

36
00:01:38,610 --> 00:01:43,979
know also is<font color="#CCCCCC"> that a si is different from</font>

37
00:01:40,740 --> 00:01:46,110
iOS it's very confusing<font color="#E5E5E5"> because they all</font>

38
00:01:43,979 --> 00:01:48,600
they<font color="#E5E5E5"> both have the</font><font color="#CCCCCC"> same interface the</font>

39
00:01:46,110 --> 00:01:50,310
same<font color="#CCCCCC"> command-line interface which is</font><font color="#E5E5E5"> a</font>

40
00:01:48,600 --> 00:01:51,960
<font color="#CCCCCC">Cisco shell</font><font color="#E5E5E5"> but they are different</font><font color="#CCCCCC"> in</font>

41
00:01:50,310 --> 00:01:54,210
<font color="#E5E5E5">Charlie and it's very important for</font>

42
00:01:51,960 --> 00:01:56,908
exploitation<font color="#E5E5E5"> because it means you have</font>

43
00:01:54,210 --> 00:02:00,270
<font color="#E5E5E5">different constraints so a iOS is like a</font>

44
00:01:56,909 --> 00:02:02,909
property<font color="#E5E5E5"> or person system</font><font color="#CCCCCC"> I'm not</font><font color="#E5E5E5"> an</font>

45
00:02:00,270 --> 00:02:06,179
<font color="#E5E5E5">expert on iOS</font><font color="#CCCCCC"> but I know</font><font color="#E5E5E5"> it's it's</font>

46
00:02:02,909 --> 00:02:09,720
mostly<font color="#E5E5E5"> MIPS or PowerPC but I may have</font>

47
00:02:06,180 --> 00:02:12,540
<font color="#E5E5E5">been mostly focusing on a sales that's</font>

48
00:02:09,720 --> 00:02:13,650
what we're going<font color="#CCCCCC"> to talk about</font><font color="#E5E5E5"> a sa is</font>

49
00:02:12,540 --> 00:02:16,230
Linux based

50
00:02:13,650 --> 00:02:19,590
so it's<font color="#E5E5E5"> basically a</font><font color="#CCCCCC"> Linux</font><font color="#E5E5E5"> like any Linux</font>

51
00:02:16,230 --> 00:02:23,459
<font color="#E5E5E5">normal Linux</font><font color="#CCCCCC"> with one single binary of</font>

52
00:02:19,590 --> 00:02:26,129
<font color="#E5E5E5">40</font><font color="#CCCCCC"> makes 40</font><font color="#E5E5E5"> megabytes and code liner and</font>

53
00:02:23,459 --> 00:02:29,069
<font color="#E5E5E5">that contains everything and because</font>

54
00:02:26,129 --> 00:02:30,450
we're<font color="#E5E5E5"> talking about rather it contains</font>

55
00:02:29,069 --> 00:02:31,920
the actual<font color="#E5E5E5"> network stack</font>

56
00:02:30,450 --> 00:02:33,298
meaning if you're<font color="#E5E5E5"> if you're on</font><font color="#CCCCCC"> Linux you</font>

57
00:02:31,920 --> 00:02:34,768
don't have any network it's the actual

58
00:02:33,299 --> 00:02:37,650
<font color="#CCCCCC">liner battery</font><font color="#E5E5E5"> that gives you this</font>

59
00:02:34,769 --> 00:02:40,890
network and does everything it's also

60
00:02:37,650 --> 00:02:43,349
interesting<font color="#E5E5E5"> to know that</font><font color="#CCCCCC"> it's x86</font><font color="#E5E5E5"> or 64</font>

61
00:02:40,890 --> 00:02:45,629
equivalent<font color="#E5E5E5"> so if you</font><font color="#CCCCCC"> use to that on on</font>

62
00:02:43,349 --> 00:02:48,828
the<font color="#E5E5E5"> desktop that's what you have in this</font>

63
00:02:45,629 --> 00:02:53,518
<font color="#CCCCCC">run</font><font color="#E5E5E5"> so this is what we have for example</font>

64
00:02:48,829 --> 00:02:55,049
<font color="#E5E5E5">some devices different size different</font>

65
00:02:53,519 --> 00:03:04,500
model<font color="#CCCCCC"> but they all run the same</font>

66
00:02:55,049 --> 00:03:06,239
<font color="#E5E5E5">operating</font><font color="#CCCCCC"> system</font><font color="#E5E5E5"> so I brought</font><font color="#CCCCCC"> one this</font>

67
00:03:04,500 --> 00:03:07,950
<font color="#E5E5E5">is the</font><font color="#CCCCCC"> one at the</font><font color="#E5E5E5"> top so this is the</font>

68
00:03:06,239 --> 00:03:11,659
smallest<font color="#E5E5E5"> one the a say five five oh five</font>

69
00:03:07,950 --> 00:03:14,879
and<font color="#CCCCCC"> then</font><font color="#E5E5E5"> you have more better one so</font>

70
00:03:11,659 --> 00:03:16,910
<font color="#CCCCCC">little bit about</font><font color="#E5E5E5"> the disclosure</font><font color="#CCCCCC"> timeline</font>

71
00:03:14,879 --> 00:03:19,380
because<font color="#E5E5E5"> it's a little</font><font color="#CCCCCC"> bit confusing</font>

72
00:03:16,910 --> 00:03:22,200
<font color="#CCCCCC">there has been</font><font color="#E5E5E5"> an wannabes array there's</font>

73
00:03:19,380 --> 00:03:24,269
been another<font color="#CCCCCC"> Advisory</font><font color="#E5E5E5"> so what it is</font>

74
00:03:22,200 --> 00:03:26,849
<font color="#CCCCCC">about basically</font><font color="#E5E5E5"> in October</font><font color="#CCCCCC"> I reported</font>

75
00:03:24,269 --> 00:03:29,940
the<font color="#E5E5E5"> vanilla tea to Cisco and they were</font>

76
00:03:26,849 --> 00:03:33,298
<font color="#CCCCCC">able to replicate the issue and</font><font color="#E5E5E5"> I told</font>

77
00:03:29,940 --> 00:03:36,209
them<font color="#CCCCCC"> ok</font><font color="#E5E5E5"> we I'm gonna talk</font><font color="#CCCCCC"> about it</font><font color="#E5E5E5"> next</font>

78
00:03:33,299 --> 00:03:39,239
year<font color="#CCCCCC"> is it ok and</font><font color="#E5E5E5"> we agreed</font><font color="#CCCCCC"> we're</font><font color="#E5E5E5"> not</font>

79
00:03:36,209 --> 00:03:40,620
<font color="#CCCCCC">gonna</font><font color="#E5E5E5"> release it before February and</font>

80
00:03:39,239 --> 00:03:42,470
they're gonna release the<font color="#CCCCCC"> Advisory and</font>

81
00:03:40,620 --> 00:03:47,280
at the end of January that's<font color="#E5E5E5"> fine and</font>

82
00:03:42,470 --> 00:03:48,900
then early January<font color="#CCCCCC"> luckily we discovered</font>

83
00:03:47,280 --> 00:03:51,720
that<font color="#CCCCCC"> actually the patches already</font>

84
00:03:48,900 --> 00:03:56,040
existed<font color="#CCCCCC"> so that's that's interesting</font>

85
00:03:51,720 --> 00:03:59,790
<font color="#CCCCCC">because I have three tables the first</font>

86
00:03:56,040 --> 00:04:03,090
one on the left<font color="#CCCCCC"> is basically</font><font color="#E5E5E5"> my analysis</font>

87
00:03:59,790 --> 00:04:05,480
<font color="#CCCCCC">so what I</font><font color="#E5E5E5"> realized that it was patch</font><font color="#CCCCCC"> in</font>

88
00:04:03,090 --> 00:04:07,949
early<font color="#E5E5E5"> January I checked all the</font><font color="#CCCCCC"> versions</font>

89
00:04:05,480 --> 00:04:09,660
<font color="#E5E5E5">after getting all the</font><font color="#CCCCCC"> firmware because</font>

90
00:04:07,949 --> 00:04:11,400
<font color="#E5E5E5">it's the firmware not available on</font><font color="#CCCCCC"> the</font>

91
00:04:09,660 --> 00:04:13,739
<font color="#CCCCCC">Internet so if you don't have a Cisco</font>

92
00:04:11,400 --> 00:04:15,750
account<font color="#E5E5E5"> that's another story but</font><font color="#CCCCCC"> once</font>

93
00:04:13,739 --> 00:04:19,019
you have all the firmware<font color="#E5E5E5"> test them all</font>

94
00:04:15,750 --> 00:04:21,209
and realize<font color="#E5E5E5"> ok for example nine one the</font>

95
00:04:19,019 --> 00:04:22,860
<font color="#E5E5E5">nine one seven</font><font color="#CCCCCC"> twenty patched the</font>

96
00:04:21,209 --> 00:04:24,430
vulnerability<font color="#E5E5E5"> so you have this system of</font>

97
00:04:22,860 --> 00:04:26,350
branches I'm gonna

98
00:04:24,430 --> 00:04:29,560
talk about<font color="#E5E5E5"> just after but each branch</font>

99
00:04:26,350 --> 00:04:32,009
<font color="#CCCCCC">leaves</font><font color="#E5E5E5"> in parallel and basically you</font>

100
00:04:29,560 --> 00:04:35,320
<font color="#E5E5E5">have</font><font color="#CCCCCC"> uni different patch for each branch</font>

101
00:04:32,009 --> 00:04:38,410
so then at the end<font color="#E5E5E5"> of January like what</font>

102
00:04:35,320 --> 00:04:41,080
what was agreed that<font color="#E5E5E5"> they patch they</font>

103
00:04:38,410 --> 00:04:44,800
release an advisory and the patch were

104
00:04:41,080 --> 00:04:49,180
already existing<font color="#CCCCCC"> since November</font><font color="#E5E5E5"> but they</font>

105
00:04:44,800 --> 00:04:51,400
make<font color="#E5E5E5"> it public</font><font color="#CCCCCC"> basically</font><font color="#E5E5E5"> and then I do</font>

106
00:04:49,180 --> 00:04:54,850
<font color="#CCCCCC">my presentation at recon</font><font color="#E5E5E5"> five of</font>

107
00:04:51,400 --> 00:04:56,979
February and<font color="#E5E5E5"> the same day</font><font color="#CCCCCC"> I realize just</font>

108
00:04:54,850 --> 00:04:58,780
<font color="#CCCCCC">watching on the internet that actually</font>

109
00:04:56,979 --> 00:05:02,050
<font color="#CCCCCC">there will be updated</font><font color="#E5E5E5"> their advisory and</font>

110
00:04:58,780 --> 00:05:05,198
the bag actually<font color="#E5E5E5"> in fact impacts other</font>

111
00:05:02,050 --> 00:05:06,940
attack vectors<font color="#E5E5E5"> so what it is about an</font>

112
00:05:05,199 --> 00:05:09,280
<font color="#E5E5E5">interesting thing is</font><font color="#CCCCCC"> in the first</font>

113
00:05:06,940 --> 00:05:13,120
<font color="#E5E5E5">advisory</font><font color="#CCCCCC"> they release at</font><font color="#E5E5E5"> the end</font><font color="#CCCCCC"> of</font>

114
00:05:09,280 --> 00:05:15,130
January<font color="#CCCCCC"> you can</font><font color="#E5E5E5"> see on the second</font><font color="#CCCCCC"> table</font>

115
00:05:13,120 --> 00:05:17,500
that the version<font color="#CCCCCC"> are very similar</font><font color="#E5E5E5"> to</font>

116
00:05:15,130 --> 00:05:19,840
<font color="#CCCCCC">what I had tested early</font><font color="#E5E5E5"> January which</font>

117
00:05:17,500 --> 00:05:22,330
makes<font color="#E5E5E5"> sense except one which is nine</font>

118
00:05:19,840 --> 00:05:24,190
nine one<font color="#CCCCCC"> I had tested</font><font color="#E5E5E5"> that was patched</font>

119
00:05:22,330 --> 00:05:27,430
for me at least for<font color="#E5E5E5"> my proof of concept</font>

120
00:05:24,190 --> 00:05:30,370
but the nine in their case they say it's

121
00:05:27,430 --> 00:05:32,380
nine nine one one two<font color="#E5E5E5"> and was what was</font>

122
00:05:30,370 --> 00:05:34,780
interesting<font color="#E5E5E5"> at that time is</font><font color="#CCCCCC"> nine nine</font>

123
00:05:32,380 --> 00:05:36,940
<font color="#CCCCCC">eleven to</font><font color="#E5E5E5"> wasn't available</font><font color="#CCCCCC"> from Scott</font>

124
00:05:34,780 --> 00:05:40,000
weird<font color="#E5E5E5"> people were</font><font color="#CCCCCC"> going crazy on</font><font color="#E5E5E5"> the</font>

125
00:05:36,940 --> 00:05:42,039
internet saying or the it's it's a<font color="#E5E5E5"> huge</font>

126
00:05:40,000 --> 00:05:44,860
<font color="#CCCCCC">bag but the patch is not available</font><font color="#E5E5E5"> and</font>

127
00:05:42,039 --> 00:05:46,539
<font color="#E5E5E5">actually it all made sense when they</font>

128
00:05:44,860 --> 00:05:49,000
<font color="#CCCCCC">actually</font><font color="#E5E5E5"> released a second advisory at</font>

129
00:05:46,539 --> 00:05:51,520
least for me because<font color="#E5E5E5"> basically they</font>

130
00:05:49,000 --> 00:05:53,710
probably realized that it was<font color="#E5E5E5"> not</font>

131
00:05:51,520 --> 00:05:56,020
<font color="#CCCCCC">totally fixed and they said that it</font>

132
00:05:53,710 --> 00:05:58,180
would be<font color="#CCCCCC"> fixed in 9</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> 1/2</font><font color="#E5E5E5"> but he</font>

133
00:05:56,020 --> 00:05:59,830
<font color="#E5E5E5">wasn't available that at</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> time and</font>

134
00:05:58,180 --> 00:06:04,000
they also patched the same bag in all

135
00:05:59,830 --> 00:06:07,448
the all<font color="#E5E5E5"> other branches at least that's</font>

136
00:06:04,000 --> 00:06:10,030
my<font color="#E5E5E5"> assumption so in the in the second</font>

137
00:06:07,449 --> 00:06:15,490
advisory they released an update for

138
00:06:10,030 --> 00:06:17,650
each branch<font color="#E5E5E5"> that patch the actual bug so</font>

139
00:06:15,490 --> 00:06:20,620
that much the<font color="#CCCCCC"> actual board but</font><font color="#E5E5E5"> also the</font>

140
00:06:17,650 --> 00:06:23,229
other attack vectors<font color="#E5E5E5"> so to summarize I</font>

141
00:06:20,620 --> 00:06:25,960
found the<font color="#E5E5E5"> English internal vulnerability</font>

142
00:06:23,229 --> 00:06:28,150
in web VPN SSL<font color="#E5E5E5"> but actually it impacts</font>

143
00:06:25,960 --> 00:06:31,840
the XML parser I'm<font color="#E5E5E5"> going to talk</font><font color="#CCCCCC"> about</font>

144
00:06:28,150 --> 00:06:34,150
it today<font color="#E5E5E5"> and originally in the</font>

145
00:06:31,840 --> 00:06:36,429
<font color="#E5E5E5">advisories I said its web</font><font color="#CCCCCC"> EP</font><font color="#E5E5E5"> and SSL but</font>

146
00:06:34,150 --> 00:06:37,169
now<font color="#CCCCCC"> they changed it to</font><font color="#E5E5E5"> XML parser</font>

147
00:06:36,430 --> 00:06:40,620
<font color="#E5E5E5">because</font>

148
00:06:37,169 --> 00:06:44,580
it impacts other protocols that<font color="#CCCCCC"> use</font><font color="#E5E5E5"> the</font>

149
00:06:40,620 --> 00:06:48,479
<font color="#E5E5E5">same XML parser so originally it was all</font>

150
00:06:44,580 --> 00:06:51,508
the<font color="#E5E5E5"> Cisco</font><font color="#CCCCCC"> essay on this list except the</font>

151
00:06:48,479 --> 00:06:54,960
new one<font color="#CCCCCC"> firepower that probably have</font>

152
00:06:51,509 --> 00:06:56,430
some attack vectors that weren't<font color="#CCCCCC"> web VPN</font>

153
00:06:54,960 --> 00:06:59,849
<font color="#CCCCCC">I haven't</font><font color="#E5E5E5"> checked</font><font color="#CCCCCC"> but that's my guess</font>

154
00:06:56,430 --> 00:07:03,029
and on the<font color="#CCCCCC"> writes all the actual</font><font color="#E5E5E5"> attack</font>

155
00:06:59,849 --> 00:07:05,279
vectors<font color="#E5E5E5"> so the only one I had found</font>

156
00:07:03,029 --> 00:07:08,909
<font color="#E5E5E5">basically kind of is the any correct and</font>

157
00:07:05,279 --> 00:07:12,330
<font color="#CCCCCC">client less</font><font color="#E5E5E5"> SSL VPN that were basically</font>

158
00:07:08,909 --> 00:07:15,360
SSL VPN<font color="#E5E5E5"> that</font><font color="#CCCCCC"> I've used</font><font color="#E5E5E5"> to exploit the</font>

159
00:07:12,330 --> 00:07:19,529
bug but all the other attack vectors are

160
00:07:15,360 --> 00:07:21,389
either local or remote like the itv2 one

161
00:07:19,529 --> 00:07:26,089
<font color="#E5E5E5">but some of them are local so</font><font color="#CCCCCC"> that</font>

162
00:07:21,389 --> 00:07:26,089
<font color="#CCCCCC">probably VM the impact is probably less</font>

163
00:07:29,930 --> 00:07:36,689
<font color="#E5E5E5">okay so I've been</font><font color="#CCCCCC"> talking about</font><font color="#E5E5E5"> web</font><font color="#CCCCCC"> PPN</font>

164
00:07:33,509 --> 00:07:41,159
SSL<font color="#E5E5E5"> so let's talk about some protocols</font>

165
00:07:36,689 --> 00:07:43,199
that we're<font color="#CCCCCC"> gonna need to understand</font><font color="#E5E5E5"> for</font>

166
00:07:41,159 --> 00:07:48,210
<font color="#E5E5E5">the vulnerability so I said originally I</font>

167
00:07:43,199 --> 00:07:51,990
found the debug in SSL VPN so SSL VPN is

168
00:07:48,210 --> 00:07:54,599
basically what you're<font color="#CCCCCC"> gonna</font><font color="#E5E5E5"> see if you</font>

169
00:07:51,990 --> 00:07:57,539
use<font color="#E5E5E5"> any connect clients if you use an in</font>

170
00:07:54,599 --> 00:08:00,569
client client<font color="#E5E5E5"> either on your phone or</font><font color="#CCCCCC"> on</font>

171
00:07:57,539 --> 00:08:03,409
<font color="#E5E5E5">Windows or whatever this one is on the</font>

172
00:08:00,569 --> 00:08:06,479
<font color="#E5E5E5">phone on the bottom right it's going to</font>

173
00:08:03,409 --> 00:08:11,520
<font color="#E5E5E5">establish an</font><font color="#CCCCCC"> SSL</font><font color="#E5E5E5"> VPN connection is</font>

174
00:08:06,479 --> 00:08:15,149
basically SSL on the left side you have

175
00:08:11,520 --> 00:08:18,240
<font color="#E5E5E5">the</font><font color="#CCCCCC"> web browser which is</font><font color="#E5E5E5"> a client last</font>

176
00:08:15,149 --> 00:08:21,240
version<font color="#E5E5E5"> of the same protocol then you</font>

177
00:08:18,240 --> 00:08:25,860
have<font color="#CCCCCC"> Ikey so Ikey</font><font color="#E5E5E5"> originally when I</font>

178
00:08:21,240 --> 00:08:29,099
found the bug<font color="#E5E5E5"> Ikey wasn't</font><font color="#CCCCCC"> I didn't find</font>

179
00:08:25,860 --> 00:08:31,110
<font color="#E5E5E5">the back in Ikey but I've used Ikey to</font>

180
00:08:29,099 --> 00:08:33,179
help me messaging the heap and

181
00:08:31,110 --> 00:08:36,750
exploiting the<font color="#CCCCCC"> back to prove remote code</font>

182
00:08:33,179 --> 00:08:39,439
execution<font color="#E5E5E5"> so originally it's just a</font>

183
00:08:36,750 --> 00:08:42,750
helper<font color="#E5E5E5"> even though now we know it's also</font>

184
00:08:39,440 --> 00:08:44,959
exploitable<font color="#E5E5E5"> put potentially over Ikey</font>

185
00:08:42,750 --> 00:08:50,790
I'm not<font color="#CCCCCC"> going to talk about</font><font color="#E5E5E5"> that today</font>

186
00:08:44,959 --> 00:08:53,219
Ikey can be either<font color="#E5E5E5"> Ikey v1</font><font color="#CCCCCC"> or itv2</font><font color="#E5E5E5"> and</font>

187
00:08:50,790 --> 00:08:56,540
<font color="#E5E5E5">mostly used for like static</font>

188
00:08:53,220 --> 00:09:00,210
point-to-point beam VPN between two

189
00:08:56,540 --> 00:09:03,150
gateways<font color="#E5E5E5"> or firewalls</font><font color="#CCCCCC"> but</font><font color="#E5E5E5"> it could also</font>

190
00:09:00,210 --> 00:09:04,710
be used by any connect or<font color="#E5E5E5"> a Windows</font>

191
00:09:03,150 --> 00:09:09,720
client<font color="#CCCCCC"> even</font><font color="#E5E5E5"> though I've never been able</font>

192
00:09:04,710 --> 00:09:13,050
<font color="#CCCCCC">to configure</font><font color="#E5E5E5"> it so</font><font color="#CCCCCC"> some previous work</font>

193
00:09:09,720 --> 00:09:15,570
<font color="#CCCCCC">there hasn't been</font><font color="#E5E5E5"> much</font><font color="#CCCCCC"> research on</font><font color="#E5E5E5"> a</font><font color="#CCCCCC"> se</font>

194
00:09:13,050 --> 00:09:19,109
but there<font color="#E5E5E5"> are a</font><font color="#CCCCCC"> few in very</font><font color="#E5E5E5"> interesting</font>

195
00:09:15,570 --> 00:09:23,100
research<font color="#E5E5E5"> to start with in 2014</font><font color="#CCCCCC"> as it's</font>

196
00:09:19,110 --> 00:09:25,530
almost<font color="#E5E5E5"> four years ago</font><font color="#CCCCCC"> an extra present</font>

197
00:09:23,100 --> 00:09:28,020
and I think a<font color="#CCCCCC"> very original research on</font>

198
00:09:25,530 --> 00:09:29,850
how to<font color="#E5E5E5"> route C square a say and how to</font>

199
00:09:28,020 --> 00:09:33,270
<font color="#E5E5E5">leak the version remotely so it was like</font>

200
00:09:29,850 --> 00:09:35,670
a<font color="#E5E5E5"> very good presentation on with like</font>

201
00:09:33,270 --> 00:09:40,230
<font color="#E5E5E5">Mario adventure which is quite a quest</font>

202
00:09:35,670 --> 00:09:44,089
quite nice slide to read on 2016<font color="#CCCCCC"> Exodus</font>

203
00:09:40,230 --> 00:09:47,600
Intel<font color="#CCCCCC"> published a really nice exploits</font>

204
00:09:44,090 --> 00:09:50,040
in<font color="#CCCCCC"> the IKEA cisco fragmentation</font><font color="#E5E5E5"> payload</font>

205
00:09:47,600 --> 00:09:53,630
were basically<font color="#E5E5E5"> they exploited the heap</font>

206
00:09:50,040 --> 00:09:57,900
<font color="#E5E5E5">overflow they got a</font><font color="#CCCCCC"> CV either the</font>

207
00:09:53,630 --> 00:10:01,410
responsibly disclosed<font color="#CCCCCC"> it to cisco before</font>

208
00:09:57,900 --> 00:10:04,590
talking<font color="#E5E5E5"> about</font><font color="#CCCCCC"> it it was more done very</font>

209
00:10:01,410 --> 00:10:06,740
nice<font color="#CCCCCC"> bag they publish proof of concept</font>

210
00:10:04,590 --> 00:10:08,940
like an<font color="#CCCCCC"> export for a specific</font><font color="#E5E5E5"> version</font>

211
00:10:06,740 --> 00:10:11,610
very good<font color="#E5E5E5"> starting point to understand</font>

212
00:10:08,940 --> 00:10:14,010
the internals<font color="#CCCCCC"> and then interest in</font><font color="#E5E5E5"> you</font>

213
00:10:11,610 --> 00:10:17,010
six<font color="#CCCCCC"> months later</font><font color="#E5E5E5"> the shadow brokers</font>

214
00:10:14,010 --> 00:10:19,890
leaked lots of<font color="#E5E5E5"> files targeting routers</font>

215
00:10:17,010 --> 00:10:24,300
and<font color="#E5E5E5"> Cisco says and there is like a SNMP</font>

216
00:10:19,890 --> 00:10:27,330
<font color="#CCCCCC">stack overflow targeting</font><font color="#E5E5E5"> all ASA's since</font>

217
00:10:24,300 --> 00:10:31,589
ages targeting from<font color="#E5E5E5"> version</font><font color="#CCCCCC"> eight to</font>

218
00:10:27,330 --> 00:10:33,780
<font color="#CCCCCC">nine quite crazy and because there is no</font>

219
00:10:31,590 --> 00:10:36,240
stack cookie stack overflow at that<font color="#E5E5E5"> time</font>

220
00:10:33,780 --> 00:10:38,400
there was no annex<font color="#E5E5E5"> a cellar stack</font>

221
00:10:36,240 --> 00:10:41,040
overflow<font color="#E5E5E5"> richer on the shell on the</font>

222
00:10:38,400 --> 00:10:44,579
stack shellcode<font color="#E5E5E5"> win so it was pretty</font>

223
00:10:41,040 --> 00:10:47,730
pretty<font color="#CCCCCC"> nice</font><font color="#E5E5E5"> so that was</font><font color="#CCCCCC"> basically the</font>

224
00:10:44,580 --> 00:10:51,000
base of our research also<font color="#E5E5E5"> that and we</font>

225
00:10:47,730 --> 00:10:52,860
because I'm<font color="#E5E5E5"> basically one</font><font color="#CCCCCC"> of my job is</font>

226
00:10:51,000 --> 00:10:55,050
to weaponize<font color="#CCCCCC"> the exploit so we can show</font>

227
00:10:52,860 --> 00:10:57,150
the<font color="#E5E5E5"> rarity</font><font color="#CCCCCC"> to clients</font><font color="#E5E5E5"> basically</font>

228
00:10:55,050 --> 00:11:01,349
<font color="#E5E5E5">weaponizing these</font><font color="#CCCCCC"> two exploits so we can</font>

229
00:10:57,150 --> 00:11:03,030
use them when we need<font color="#E5E5E5"> and then to</font>

230
00:11:01,350 --> 00:11:04,329
actually<font color="#E5E5E5"> weaponize all these exploits</font><font color="#CCCCCC"> I</font>

231
00:11:03,030 --> 00:11:06,879
actually needed to<font color="#CCCCCC"> build some</font>

232
00:11:04,329 --> 00:11:09,459
tools<font color="#CCCCCC"> I mean some people</font><font color="#E5E5E5"> are</font><font color="#CCCCCC"> really</font><font color="#E5E5E5"> good</font>

233
00:11:06,879 --> 00:11:11,860
<font color="#CCCCCC">I don't know how Exodus Intel</font><font color="#E5E5E5"> actually</font>

234
00:11:09,459 --> 00:11:14,469
managed to exploit this<font color="#E5E5E5"> bag but if you</font>

235
00:11:11,860 --> 00:11:16,600
don't have<font color="#E5E5E5"> any tool like what we saw</font><font color="#CCCCCC"> in</font>

236
00:11:14,470 --> 00:11:19,059
the previous presentation help tools

237
00:11:16,600 --> 00:11:23,019
<font color="#E5E5E5">really help understanding how things are</font>

238
00:11:19,059 --> 00:11:26,139
<font color="#CCCCCC">going you</font><font color="#E5E5E5"> need to do some helpers so</font>

239
00:11:23,019 --> 00:11:30,519
I'll<font color="#E5E5E5"> end up just for</font><font color="#CCCCCC"> this working on a</font>

240
00:11:26,139 --> 00:11:33,160
bunch of tools to help<font color="#E5E5E5"> me and with a</font>

241
00:11:30,519 --> 00:11:34,989
colleague we released a<font color="#E5E5E5"> series of eight</font>

242
00:11:33,160 --> 00:11:36,850
blog post with different tools<font color="#E5E5E5"> and</font>

243
00:11:34,989 --> 00:11:39,160
internal do we figure<font color="#CCCCCC"> out so if you want</font>

244
00:11:36,850 --> 00:11:43,389
<font color="#CCCCCC">to have a</font><font color="#E5E5E5"> look later</font>

245
00:11:39,160 --> 00:11:47,738
so we also released<font color="#CCCCCC"> these tools</font><font color="#E5E5E5"> last</font>

246
00:11:43,389 --> 00:11:51,399
summer<font color="#E5E5E5"> and so if we name them</font><font color="#CCCCCC"> ACA tools</font>

247
00:11:47,739 --> 00:11:54,879
and it's basically three<font color="#E5E5E5"> or actually six</font>

248
00:11:51,399 --> 00:11:56,470
tools<font color="#E5E5E5"> the first one is a</font><font color="#CCCCCC"> sa</font><font color="#E5E5E5"> firmware it</font>

249
00:11:54,879 --> 00:11:59,279
allows you to unpack and repack the

250
00:11:56,470 --> 00:12:01,959
former<font color="#CCCCCC"> because it's like a binary</font><font color="#E5E5E5"> format</font>

251
00:11:59,279 --> 00:12:05,220
it allows you to<font color="#E5E5E5"> inject the gdb server</font>

252
00:12:01,959 --> 00:12:08,559
or unpack the former to actually mind

253
00:12:05,220 --> 00:12:10,989
<font color="#E5E5E5">the firmer understanding what mitigation</font>

254
00:12:08,559 --> 00:12:12,519
is in there and whatever<font color="#CCCCCC"> because you</font>

255
00:12:10,989 --> 00:12:14,619
have like<font color="#CCCCCC"> two hundred</font><font color="#E5E5E5"> different farmers</font>

256
00:12:12,519 --> 00:12:17,439
so if you want to<font color="#CCCCCC"> know which one has a</font>

257
00:12:14,619 --> 00:12:21,939
latest mitigation for instance and then

258
00:12:17,439 --> 00:12:24,339
we have a CDBG<font color="#E5E5E5"> AC debugger which is not</font>

259
00:12:21,939 --> 00:12:26,110
really a full debugger in that we did we

260
00:12:24,339 --> 00:12:28,269
don't amply implement the<font color="#E5E5E5"> whole</font>

261
00:12:26,110 --> 00:12:30,189
debugging stack because we rely on gdb

262
00:12:28,269 --> 00:12:32,319
<font color="#E5E5E5">but it's basically a wrapper on top of</font>

263
00:12:30,189 --> 00:12:36,819
gdb that allows you<font color="#E5E5E5"> to connect</font><font color="#CCCCCC"> to the</font>

264
00:12:32,319 --> 00:12:42,279
gdb server and have a nice interface<font color="#E5E5E5"> and</font>

265
00:12:36,819 --> 00:12:44,738
we also support both<font color="#CCCCCC"> qmu debugging and</font>

266
00:12:42,279 --> 00:12:46,419
the real hardware<font color="#E5E5E5"> the real hardware you</font>

267
00:12:44,739 --> 00:12:50,110
have<font color="#E5E5E5"> the serial line so you can debug</font>

268
00:12:46,419 --> 00:12:53,579
<font color="#E5E5E5">the the over the soil and instead of</font>

269
00:12:50,110 --> 00:12:56,169
having<font color="#E5E5E5"> your Cisco shell if</font><font color="#CCCCCC"> your local</font>

270
00:12:53,579 --> 00:12:58,329
<font color="#E5E5E5">the other thing we ended up doing</font><font color="#CCCCCC"> is</font>

271
00:12:56,169 --> 00:13:02,259
<font color="#CCCCCC">basically building tools to analyze heap</font>

272
00:12:58,329 --> 00:13:04,329
structures they have<font color="#CCCCCC"> the</font><font color="#E5E5E5"> support</font>

273
00:13:02,259 --> 00:13:05,199
depending on the version either<font color="#E5E5E5"> GL</font><font color="#CCCCCC"> maroc</font>

274
00:13:04,329 --> 00:13:07,899
or Peeta Mellark

275
00:13:05,199 --> 00:13:11,139
so<font color="#E5E5E5"> we end up writing tools to display</font>

276
00:13:07,899 --> 00:13:14,439
<font color="#E5E5E5">the heap</font><font color="#CCCCCC"> so we could otherwise</font><font color="#E5E5E5"> the hip</font>

277
00:13:11,139 --> 00:13:17,020
<font color="#E5E5E5">injury and and structures in memory</font><font color="#CCCCCC"> and</font>

278
00:13:14,439 --> 00:13:21,099
we also

279
00:13:17,020 --> 00:13:22,660
brought a tool to analyze what what the

280
00:13:21,100 --> 00:13:25,420
<font color="#CCCCCC">mempool structures so they are actually</font>

281
00:13:22,660 --> 00:13:27,969
<font color="#E5E5E5">internal metadata specific to Cisco that</font>

282
00:13:25,420 --> 00:13:30,939
<font color="#CCCCCC">are</font><font color="#E5E5E5"> embedded into the gel Malakand or</font>

283
00:13:27,970 --> 00:13:33,399
<font color="#CCCCCC">peeta mellark metadata</font><font color="#E5E5E5"> and that contains</font>

284
00:13:30,940 --> 00:13:35,770
<font color="#E5E5E5">actually useful information I will see</font>

285
00:13:33,399 --> 00:13:37,360
later<font color="#E5E5E5"> but like like the the actual color</font>

286
00:13:35,770 --> 00:13:39,160
that did the allocation which which

287
00:13:37,360 --> 00:13:41,890
which is<font color="#E5E5E5"> quite nice when you do</font>

288
00:13:39,160 --> 00:13:44,829
something<font color="#CCCCCC"> showy</font><font color="#E5E5E5"> to see which chunk has</font>

289
00:13:41,890 --> 00:13:46,480
been allocated<font color="#CCCCCC"> by what function and we</font>

290
00:13:44,830 --> 00:13:48,339
also use red<font color="#E5E5E5"> sync which is basically a</font>

291
00:13:46,480 --> 00:13:50,980
very<font color="#E5E5E5"> nice tool developed by Alex</font><font color="#CCCCCC"> Casa</font>

292
00:13:48,339 --> 00:13:54,339
which<font color="#E5E5E5"> allows you</font><font color="#CCCCCC"> to synchronize Ida and</font>

293
00:13:50,980 --> 00:13:56,410
<font color="#E5E5E5">a debugger if you if you use</font><font color="#CCCCCC"> iodine or</font>

294
00:13:54,339 --> 00:13:58,480
debugger very often<font color="#E5E5E5"> you need to</font>

295
00:13:56,410 --> 00:14:00,370
synchronize them or instead<font color="#CCCCCC"> of</font><font color="#E5E5E5"> copying</font>

296
00:13:58,480 --> 00:14:03,670
<font color="#E5E5E5">things from one to the other which I</font>

297
00:14:00,370 --> 00:14:05,350
used<font color="#E5E5E5"> to do that</font><font color="#CCCCCC"> it's</font><font color="#E5E5E5"> very nice and it</font>

298
00:14:03,670 --> 00:14:09,099
<font color="#CCCCCC">allows it I will show you in the demo</font>

299
00:14:05,350 --> 00:14:12,910
<font color="#CCCCCC">how we use that and then</font><font color="#E5E5E5"> we</font><font color="#CCCCCC"> also wrote</font>

300
00:14:09,100 --> 00:14:15,070
<font color="#E5E5E5">Ida hands which is kind of a small tool</font>

301
00:14:12,910 --> 00:14:16,719
in<font color="#E5E5E5"> that it allows you to run either from</font>

302
00:14:15,070 --> 00:14:19,360
the<font color="#E5E5E5"> command line about just spawning</font>

303
00:14:16,720 --> 00:14:21,400
<font color="#E5E5E5">like ten instances at the same time and</font>

304
00:14:19,360 --> 00:14:23,410
so<font color="#E5E5E5"> you</font><font color="#CCCCCC"> don't have ten instances</font><font color="#E5E5E5"> of the</font>

305
00:14:21,400 --> 00:14:25,779
gwee of Ida running but it allowed us

306
00:14:23,410 --> 00:14:30,640
basically<font color="#E5E5E5"> to</font><font color="#CCCCCC"> run Ida on different</font>

307
00:14:25,779 --> 00:14:32,529
firmware 200 of them<font color="#CCCCCC"> and in</font><font color="#E5E5E5"> order to my</font>

308
00:14:30,640 --> 00:14:34,870
information<font color="#CCCCCC"> and execute</font><font color="#E5E5E5"> Ida Python</font>

309
00:14:32,529 --> 00:14:36,370
scripts so it's not related to<font color="#E5E5E5"> Cisco it</font>

310
00:14:34,870 --> 00:14:40,959
could be used<font color="#CCCCCC"> for other stuff</font><font color="#E5E5E5"> but we</font>

311
00:14:36,370 --> 00:14:44,560
used it for for Cisco and we wrote a

312
00:14:40,959 --> 00:14:47,040
tutorial<font color="#E5E5E5"> like on our repo which allows</font>

313
00:14:44,560 --> 00:14:51,459
you to<font color="#E5E5E5"> set up</font><font color="#CCCCCC"> your a sa from scratch</font>

314
00:14:47,040 --> 00:14:54,279
<font color="#E5E5E5">like installing gns3 having it</font><font color="#CCCCCC"> qm</font>

315
00:14:51,459 --> 00:14:58,209
enabling gdb<font color="#E5E5E5"> and debugging basically and</font>

316
00:14:54,279 --> 00:15:01,150
then having<font color="#E5E5E5"> it working so this is</font>

317
00:14:58,209 --> 00:15:02,949
basically what<font color="#CCCCCC"> we have so this</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> a</font>

318
00:15:01,150 --> 00:15:05,709
<font color="#E5E5E5">quick demo to show you the debugging</font>

319
00:15:02,950 --> 00:15:08,589
environment that we use to basically

320
00:15:05,709 --> 00:15:09,760
weaponize the exploit and then actually

321
00:15:08,589 --> 00:15:18,490
exploit the bag I'm<font color="#E5E5E5"> going to talk about</font>

322
00:15:09,760 --> 00:15:21,339
today so<font color="#CCCCCC"> on the left</font><font color="#E5E5E5"> side right</font><font color="#CCCCCC"> so</font>

323
00:15:18,490 --> 00:15:24,730
<font color="#E5E5E5">imagine that we're attached to an a say</font>

324
00:15:21,339 --> 00:15:27,310
<font color="#E5E5E5">like we already attached and on the</font>

325
00:15:24,730 --> 00:15:28,990
right you have gdb clients which

326
00:15:27,310 --> 00:15:31,180
<font color="#E5E5E5">basically</font>

327
00:15:28,990 --> 00:15:33,550
is connected to the gdb server on the

328
00:15:31,180 --> 00:15:35,529
actual rudder<font color="#E5E5E5"> and on the left side you</font>

329
00:15:33,550 --> 00:15:40,660
<font color="#CCCCCC">have either which is synchronized with</font>

330
00:15:35,529 --> 00:15:42,850
gdb<font color="#E5E5E5"> with the two plugins on the bottom</font>

331
00:15:40,660 --> 00:15:46,630
right we<font color="#E5E5E5"> have a script</font><font color="#CCCCCC"> that we're</font><font color="#E5E5E5"> going</font>

332
00:15:42,850 --> 00:15:49,180
<font color="#E5E5E5">to run to talk</font><font color="#CCCCCC"> Aiki</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> ideas</font><font color="#E5E5E5"> we're</font>

333
00:15:46,630 --> 00:15:51,510
<font color="#E5E5E5">going</font><font color="#CCCCCC"> to trigger some breakpoints under</font>

334
00:15:49,180 --> 00:15:51,510
debugger

335
00:15:56,550 --> 00:16:02,020
so we trigger we send<font color="#CCCCCC"> different packets</font>

336
00:15:59,890 --> 00:16:05,459
<font color="#E5E5E5">and now it trigger a breakpoint so look</font>

337
00:16:02,020 --> 00:16:08,680
at you maybe<font color="#E5E5E5"> you saw on the right either</font>

338
00:16:05,459 --> 00:16:10,390
<font color="#CCCCCC">change</font><font color="#E5E5E5"> color</font><font color="#CCCCCC"> so now we're using the I'll</font>

339
00:16:08,680 --> 00:16:12,010
<font color="#CCCCCC">check with is a comment to show the</font>

340
00:16:10,390 --> 00:16:14,439
different chunks<font color="#CCCCCC"> and we can see on the</font>

341
00:16:12,010 --> 00:16:16,330
right we<font color="#CCCCCC"> have the actual symbols what is</font>

342
00:16:14,440 --> 00:16:18,790
interesting in we<font color="#CCCCCC"> don't</font><font color="#E5E5E5"> actually have</font>

343
00:16:16,330 --> 00:16:22,360
<font color="#E5E5E5">the symbols in gdb</font><font color="#CCCCCC"> but we are</font><font color="#E5E5E5"> basically</font>

344
00:16:18,790 --> 00:16:24,819
fetching them from either<font color="#E5E5E5"> so here I'm</font>

345
00:16:22,360 --> 00:16:26,709
showing that we<font color="#CCCCCC"> have some data that we</font>

346
00:16:24,820 --> 00:16:29,140
<font color="#CCCCCC">analyzed in the actual contents of</font><font color="#E5E5E5"> the</font>

347
00:16:26,709 --> 00:16:31,270
<font color="#E5E5E5">chunks and if we do a regular back trace</font>

348
00:16:29,140 --> 00:16:32,830
<font color="#E5E5E5">we don't have the symbols</font><font color="#CCCCCC"> but</font><font color="#E5E5E5"> if you do</font>

349
00:16:31,270 --> 00:16:34,779
the beautiful<font color="#E5E5E5"> by</font><font color="#CCCCCC"> trends that we</font>

350
00:16:32,830 --> 00:16:37,000
implemented<font color="#CCCCCC"> we are fetching the symbols</font>

351
00:16:34,779 --> 00:16:38,860
in<font color="#E5E5E5"> either and we have this trace so it's</font>

352
00:16:37,000 --> 00:16:41,020
a lot easier<font color="#E5E5E5"> to debug and if we step by</font>

353
00:16:38,860 --> 00:16:44,620
step<font color="#E5E5E5"> it's going to step in the graph of</font>

354
00:16:41,020 --> 00:16:46,990
either so this tool is works for other

355
00:16:44,620 --> 00:16:50,040
debugger<font color="#CCCCCC"> I didn't write it</font>

356
00:16:46,990 --> 00:17:02,200
<font color="#CCCCCC">it's Alex care but I</font><font color="#E5E5E5"> I mean this</font><font color="#CCCCCC"> one</font>

357
00:16:50,040 --> 00:17:05,589
<font color="#CCCCCC">helped me working with ASI okay so I</font>

358
00:17:02,200 --> 00:17:07,689
want<font color="#E5E5E5"> to clarify one thing about</font><font color="#CCCCCC"> cisco si</font>

359
00:17:05,589 --> 00:17:10,300
which<font color="#E5E5E5"> is the system</font><font color="#CCCCCC"> of branches</font><font color="#E5E5E5"> because</font>

360
00:17:07,689 --> 00:17:11,740
when I started<font color="#E5E5E5"> with ASA's</font><font color="#CCCCCC"> it was for me</font>

361
00:17:10,300 --> 00:17:12,879
<font color="#E5E5E5">it was a nightmare</font><font color="#CCCCCC"> I didn't understand</font>

362
00:17:11,740 --> 00:17:16,150
<font color="#E5E5E5">anything I didn't know anything about</font>

363
00:17:12,880 --> 00:17:18,250
aces and the<font color="#CCCCCC"> system</font><font color="#E5E5E5"> of branch is at</font>

364
00:17:16,150 --> 00:17:21,150
least<font color="#E5E5E5"> to me it was completely not</font>

365
00:17:18,250 --> 00:17:24,939
<font color="#E5E5E5">intuitive you have different versions</font>

366
00:17:21,150 --> 00:17:27,030
<font color="#CCCCCC">okay seven eight nine one nine two and</font>

367
00:17:24,939 --> 00:17:30,070
<font color="#CCCCCC">three and four and nine</font><font color="#E5E5E5"> and actually</font>

368
00:17:27,030 --> 00:17:32,500
there<font color="#E5E5E5"> are actually branches in the term</font>

369
00:17:30,070 --> 00:17:35,200
of<font color="#E5E5E5"> they are living together and think</font>

370
00:17:32,500 --> 00:17:38,320
<font color="#E5E5E5">about them as Windows XP Windows 7</font>

371
00:17:35,200 --> 00:17:40,390
Windows<font color="#CCCCCC"> 8 Windows 10 basically so they</font>

372
00:17:38,320 --> 00:17:42,580
have<font color="#E5E5E5"> different mitigations like</font><font color="#CCCCCC"> windows</font>

373
00:17:40,390 --> 00:17:44,830
and they live together<font color="#E5E5E5"> and so</font>

374
00:17:42,580 --> 00:17:48,730
of them are<font color="#E5E5E5"> end-of-life so that's</font>

375
00:17:44,830 --> 00:17:50,529
interesting<font color="#CCCCCC"> it's</font><font color="#E5E5E5"> in</font><font color="#CCCCCC"> its its</font><font color="#E5E5E5"> it's not</font>

376
00:17:48,730 --> 00:17:53,950
<font color="#E5E5E5">intuitive because they are just numbers</font>

377
00:17:50,529 --> 00:17:56,409
<font color="#CCCCCC">I think and and some</font><font color="#E5E5E5"> of them are still</font>

378
00:17:53,950 --> 00:17:59,649
patched<font color="#CCCCCC"> ok so if you are</font><font color="#E5E5E5"> on the</font><font color="#CCCCCC"> nine</font>

379
00:17:56,409 --> 00:18:00,940
<font color="#CCCCCC">zero</font><font color="#E5E5E5"> your end of life you're not you're</font>

380
00:17:59,649 --> 00:18:03,399
not<font color="#E5E5E5"> going</font><font color="#CCCCCC"> to have the latest batch if</font>

381
00:18:00,940 --> 00:18:06,370
you're 9 1 your patch but<font color="#E5E5E5"> if you line</font><font color="#CCCCCC"> 3</font>

382
00:18:03,399 --> 00:18:10,209
your end up light as well so avoid<font color="#E5E5E5"> 93 95</font>

383
00:18:06,370 --> 00:18:13,779
<font color="#CCCCCC">but stick on the other one but</font>

384
00:18:10,210 --> 00:18:16,049
<font color="#E5E5E5">interestingly as well you have this kind</font>

385
00:18:13,779 --> 00:18:18,340
of<font color="#CCCCCC"> thing in</font><font color="#E5E5E5"> with</font><font color="#CCCCCC"> four different</font><font color="#E5E5E5"> bugs</font>

386
00:18:16,049 --> 00:18:20,620
<font color="#CCCCCC">you'll have</font><font color="#E5E5E5"> different</font><font color="#CCCCCC"> versions that you</font>

387
00:18:18,340 --> 00:18:22,689
need to be aware of<font color="#E5E5E5"> to</font><font color="#CCCCCC"> actually have the</font>

388
00:18:20,620 --> 00:18:24,729
actual patch for the branch you're

389
00:18:22,690 --> 00:18:26,740
interested in it's not about having<font color="#E5E5E5"> the</font>

390
00:18:24,730 --> 00:18:31,870
highest<font color="#E5E5E5"> number it's about having the</font>

391
00:18:26,740 --> 00:18:34,090
right<font color="#CCCCCC"> one on</font><font color="#E5E5E5"> your branch and actually I</font>

392
00:18:31,870 --> 00:18:40,000
<font color="#CCCCCC">wouldn't recommend all</font><font color="#E5E5E5"> the one in yellow</font>

393
00:18:34,090 --> 00:18:43,360
the reason why is because version above

394
00:18:40,000 --> 00:18:44,649
95 one<font color="#E5E5E5"> only have a cellar so we were</font>

395
00:18:43,360 --> 00:18:47,350
able to basically mind<font color="#E5E5E5"> all the</font>

396
00:18:44,649 --> 00:18:51,340
mitigations<font color="#CCCCCC"> by using a</font><font color="#E5E5E5"> safer more tool</font>

397
00:18:47,350 --> 00:18:56,500
that we brought and also the<font color="#E5E5E5"> worse</font>

398
00:18:51,340 --> 00:18:59,918
<font color="#CCCCCC">subversion below 93 or 94</font><font color="#E5E5E5"> 3 depending on</font>

399
00:18:56,500 --> 00:19:02,289
<font color="#E5E5E5">the branch don't have an X so</font><font color="#CCCCCC"> you end up</font>

400
00:18:59,919 --> 00:19:07,779
<font color="#CCCCCC">actually if you really</font><font color="#E5E5E5"> want the latest</font>

401
00:19:02,289 --> 00:19:13,269
<font color="#CCCCCC">medication you want to be above 96</font><font color="#E5E5E5"> the</font>

402
00:19:07,779 --> 00:19:16,330
93 well<font color="#E5E5E5"> 93</font><font color="#CCCCCC"> - but</font><font color="#E5E5E5"> because of the latest</font>

403
00:19:13,269 --> 00:19:17,490
bag I found you want to be under 96

404
00:19:16,330 --> 00:19:22,379
branch now

405
00:19:17,490 --> 00:19:27,159
so a<font color="#CCCCCC"> Silurian X is</font><font color="#E5E5E5"> enabled after 9 5 3</font>

406
00:19:22,380 --> 00:19:30,880
right so the last thing<font color="#E5E5E5"> to discuss is</font>

407
00:19:27,159 --> 00:19:32,710
<font color="#CCCCCC">basically what we're</font><font color="#E5E5E5"> going to talk</font><font color="#CCCCCC"> about</font>

408
00:19:30,880 --> 00:19:36,159
<font color="#E5E5E5">today</font><font color="#CCCCCC"> the export I'm going to show you</font>

409
00:19:32,710 --> 00:19:41,019
only<font color="#E5E5E5"> works at the moment</font><font color="#CCCCCC"> on GL maroc</font>

410
00:19:36,159 --> 00:19:42,970
without NX and without a SLR so it shows

411
00:19:41,019 --> 00:19:45,549
one thing<font color="#E5E5E5"> is that even though there is</font>

412
00:19:42,970 --> 00:19:48,100
like a known method to exploit the bag

413
00:19:45,549 --> 00:19:50,019
<font color="#E5E5E5">if you stick on late like on the latest</font>

414
00:19:48,100 --> 00:19:51,399
version<font color="#CCCCCC"> you</font><font color="#E5E5E5"> raise the bar and a lot</font>

415
00:19:50,019 --> 00:19:54,300
harder<font color="#E5E5E5"> because basically you need to</font>

416
00:19:51,399 --> 00:19:57,989
leak a<font color="#CCCCCC"> cellar remotely like</font>

417
00:19:54,300 --> 00:20:00,480
like what<font color="#CCCCCC"> eternal blue or romance</font>

418
00:19:57,990 --> 00:20:02,550
<font color="#E5E5E5">actually need to do which is</font><font color="#CCCCCC"> a harder</font>

419
00:20:00,480 --> 00:20:05,070
problem I'm not saying it's impossible

420
00:20:02,550 --> 00:20:06,440
<font color="#CCCCCC">I'm just saying it's it raised the</font><font color="#E5E5E5"> bar</font>

421
00:20:05,070 --> 00:20:11,669
<font color="#E5E5E5">oh definitely</font>

422
00:20:06,440 --> 00:20:14,250
so the<font color="#CCCCCC"> back is</font><font color="#E5E5E5"> not a</font><font color="#CCCCCC"> Nike v1 the</font><font color="#E5E5E5"> back I</font>

423
00:20:11,670 --> 00:20:17,880
exploited in<font color="#E5E5E5"> web EPN so it crashed in</font>

424
00:20:14,250 --> 00:20:24,350
web<font color="#CCCCCC"> EPN</font><font color="#E5E5E5"> and I'm using</font><font color="#CCCCCC"> itv1</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> massage</font>

425
00:20:17,880 --> 00:20:28,650
the<font color="#CCCCCC"> hip and get remote code execution</font><font color="#E5E5E5"> so</font>

426
00:20:24,350 --> 00:20:31,230
earlier the title of the<font color="#E5E5E5"> presentation is</font>

427
00:20:28,650 --> 00:20:34,860
Robin<font color="#CCCCCC"> Hood Robin</font><font color="#E5E5E5"> Hood against Cisco</font>

428
00:20:31,230 --> 00:20:36,510
<font color="#CCCCCC">essays why Robin Hood</font><font color="#E5E5E5"> so originally I</font>

429
00:20:34,860 --> 00:20:38,370
was like okay I need<font color="#CCCCCC"> to leverage</font>

430
00:20:36,510 --> 00:20:41,220
<font color="#CCCCCC">Aiki to exploit the bag</font><font color="#E5E5E5"> and</font>

431
00:20:38,370 --> 00:20:44,129
interestingly some really old<font color="#E5E5E5"> devices</font>

432
00:20:41,220 --> 00:20:46,290
only<font color="#E5E5E5"> have 50</font><font color="#CCCCCC"> Ikey sessions available and</font>

433
00:20:44,130 --> 00:20:48,120
if<font color="#E5E5E5"> you want to massage the heap it's a</font>

434
00:20:46,290 --> 00:20:53,250
constraint because you cannot send as

435
00:20:48,120 --> 00:20:55,770
many packet as you want<font color="#CCCCCC"> like if you have</font>

436
00:20:53,250 --> 00:20:57,330
<font color="#E5E5E5">like a more expensive device you're</font>

437
00:20:55,770 --> 00:20:59,940
going<font color="#CCCCCC"> to be able to</font><font color="#E5E5E5"> create more like</font>

438
00:20:57,330 --> 00:21:03,689
more sessions<font color="#E5E5E5"> so why am</font><font color="#CCCCCC"> I am I saying</font>

439
00:20:59,940 --> 00:21:04,800
<font color="#E5E5E5">you can only send less packets it's</font>

440
00:21:03,690 --> 00:21:06,930
because basically I'm going<font color="#E5E5E5"> to leverage</font>

441
00:21:04,800 --> 00:21:08,399
IP fragmentation<font color="#E5E5E5"> and I give</font>

442
00:21:06,930 --> 00:21:11,760
<font color="#CCCCCC">fragmentation you have a limit of eight</font>

443
00:21:08,400 --> 00:21:12,870
thousand bytes per session<font color="#E5E5E5"> and so the</font>

444
00:21:11,760 --> 00:21:15,120
more sessions you have<font color="#CCCCCC"> the more</font>

445
00:21:12,870 --> 00:21:17,280
feng-shui<font color="#E5E5E5"> the the exploit is going to be</font>

446
00:21:15,120 --> 00:21:19,949
more<font color="#CCCCCC"> reliable on these</font><font color="#E5E5E5"> devices that are</font>

447
00:21:17,280 --> 00:21:21,870
more expensive<font color="#E5E5E5"> and I found it cool like</font>

448
00:21:19,950 --> 00:21:23,880
<font color="#CCCCCC">oh it's actually possible to exploit</font>

449
00:21:21,870 --> 00:21:25,919
like the big giants with like<font color="#E5E5E5"> really</font>

450
00:21:23,880 --> 00:21:27,660
<font color="#E5E5E5">expensive devices that have lots of</font>

451
00:21:25,920 --> 00:21:29,610
<font color="#CCCCCC">sessions because it's</font><font color="#E5E5E5"> going to be more</font>

452
00:21:27,660 --> 00:21:32,820
reliable<font color="#CCCCCC"> and</font><font color="#E5E5E5"> basically with</font><font color="#CCCCCC"> my export</font>

453
00:21:29,610 --> 00:21:34,409
I'm<font color="#CCCCCC"> gonna basically</font><font color="#E5E5E5"> be able to reap a</font>

454
00:21:32,820 --> 00:21:39,060
rub from<font color="#E5E5E5"> the rich and give to the poor</font>

455
00:21:34,410 --> 00:21:41,610
<font color="#E5E5E5">like okay let's call it Robin Hood so</font>

456
00:21:39,060 --> 00:21:45,210
anyway<font color="#E5E5E5"> so I haven't talked about the</font>

457
00:21:41,610 --> 00:21:45,870
exploit yet<font color="#E5E5E5"> anything so let's get</font>

458
00:21:45,210 --> 00:21:49,500
started

459
00:21:45,870 --> 00:21:51,810
how did I found<font color="#E5E5E5"> the bug so originally I</font>

460
00:21:49,500 --> 00:21:54,270
wanted to<font color="#E5E5E5"> do some fuzzing and I was like</font>

461
00:21:51,810 --> 00:21:57,629
we have<font color="#CCCCCC"> any connect which is nice</font>

462
00:21:54,270 --> 00:22:01,620
because it<font color="#CCCCCC"> allows</font><font color="#E5E5E5"> you</font><font color="#CCCCCC"> to establish</font><font color="#E5E5E5"> SSL</font>

463
00:21:57,630 --> 00:22:03,330
connection and<font color="#E5E5E5"> it's preauth okay I'm</font>

464
00:22:01,620 --> 00:22:06,300
<font color="#E5E5E5">just gonna look at the message preauth</font>

465
00:22:03,330 --> 00:22:08,429
so I used<font color="#E5E5E5"> burp and I sniffed the first</font>

466
00:22:06,300 --> 00:22:11,460
message and I ended<font color="#E5E5E5"> up with an XML</font>

467
00:22:08,430 --> 00:22:13,650
packet which has<font color="#CCCCCC"> a bunch</font><font color="#E5E5E5"> of fields</font><font color="#CCCCCC"> like</font>

468
00:22:11,460 --> 00:22:16,430
the version<font color="#E5E5E5"> of the clients but all</font><font color="#CCCCCC"> we're</font>

469
00:22:13,650 --> 00:22:19,170
<font color="#CCCCCC">interested in at the moment it's XML</font>

470
00:22:16,430 --> 00:22:21,030
doing some kind<font color="#E5E5E5"> of reverse reverse</font>

471
00:22:19,170 --> 00:22:23,700
engineering<font color="#CCCCCC"> starting from the existing</font>

472
00:22:21,030 --> 00:22:26,910
XML tags I found and ended up finding

473
00:22:23,700 --> 00:22:29,850
<font color="#E5E5E5">this huge table which</font><font color="#CCCCCC"> contains 21 feet</font>

474
00:22:26,910 --> 00:22:31,800
<font color="#CCCCCC">not shoot but 27 tags</font><font color="#E5E5E5"> so that not many</font>

475
00:22:29,850 --> 00:22:37,560
<font color="#E5E5E5">but what I ended up doing is basically</font>

476
00:22:31,800 --> 00:22:39,930
<font color="#CCCCCC">writing a template with my 27 tags</font><font color="#E5E5E5"> as an</font>

477
00:22:37,560 --> 00:22:43,740
internal sample and I wanted<font color="#E5E5E5"> to</font><font color="#CCCCCC"> do some</font>

478
00:22:39,930 --> 00:22:46,190
mutation fuzzy my<font color="#CCCCCC"> my fuzzy architecture</font>

479
00:22:43,740 --> 00:22:49,590
is<font color="#E5E5E5"> really basic I don't do anything like</font>

480
00:22:46,190 --> 00:22:51,690
<font color="#CCCCCC">concrete</font><font color="#E5E5E5"> execution</font><font color="#CCCCCC"> or or even</font><font color="#E5E5E5"> Cutco</font>

481
00:22:49,590 --> 00:22:55,379
<font color="#CCCCCC">right or</font><font color="#E5E5E5"> whatever I'm remote</font><font color="#CCCCCC"> I have the</font>

482
00:22:51,690 --> 00:22:57,930
router<font color="#E5E5E5"> I am from my PC I sign a mediated</font>

483
00:22:55,380 --> 00:22:59,310
packets<font color="#E5E5E5"> using</font><font color="#CCCCCC"> my initial sample and you</font>

484
00:22:57,930 --> 00:23:01,200
didn't using in<font color="#CCCCCC"> random so it's quite</font>

485
00:22:59,310 --> 00:23:04,860
<font color="#E5E5E5">nice for for XML because</font><font color="#CCCCCC"> it's going to</font>

486
00:23:01,200 --> 00:23:07,230
<font color="#E5E5E5">generate valid XML kind of still and I</font>

487
00:23:04,860 --> 00:23:10,740
don't<font color="#CCCCCC"> care</font><font color="#E5E5E5"> about the response</font><font color="#CCCCCC"> the reply</font>

488
00:23:07,230 --> 00:23:12,450
but I then I do an ICMP ping<font color="#CCCCCC"> to see if</font>

489
00:23:10,740 --> 00:23:15,780
the the device is<font color="#E5E5E5"> still alive</font>

490
00:23:12,450 --> 00:23:18,420
and if it<font color="#E5E5E5"> it died it's going to reboot</font>

491
00:23:15,780 --> 00:23:21,600
<font color="#CCCCCC">but all it matters</font><font color="#E5E5E5"> is I don't get any</font>

492
00:23:18,420 --> 00:23:24,690
reply from<font color="#E5E5E5"> for my ICMP packet so I know</font>

493
00:23:21,600 --> 00:23:26,969
the packet I just sent was interesting

494
00:23:24,690 --> 00:23:30,750
because<font color="#E5E5E5"> it crushed the router it's</font>

495
00:23:26,970 --> 00:23:32,490
really slow I don't that I don't attach

496
00:23:30,750 --> 00:23:34,590
a debugger I don't need it at the moment

497
00:23:32,490 --> 00:23:37,290
<font color="#E5E5E5">and wanted to start the</font><font color="#CCCCCC"> first thing</font>

498
00:23:34,590 --> 00:23:42,030
before<font color="#E5E5E5"> going on leave and the</font><font color="#CCCCCC"> ASI kept</font>

499
00:23:37,290 --> 00:23:43,950
crashing so that was good and<font color="#CCCCCC"> bad</font><font color="#E5E5E5"> the</font>

500
00:23:42,030 --> 00:23:45,120
good<font color="#E5E5E5"> thing is I already found back the</font>

501
00:23:43,950 --> 00:23:47,280
bad thing is<font color="#E5E5E5"> I couldn't leave the</font>

502
00:23:45,120 --> 00:23:53,719
<font color="#CCCCCC">further during my holidays</font><font color="#E5E5E5"> because it</font>

503
00:23:47,280 --> 00:23:57,930
would<font color="#E5E5E5"> fill my hard disk so anyway I I</font>

504
00:23:53,720 --> 00:23:59,970
went on leave<font color="#E5E5E5"> on my way back</font><font color="#CCCCCC"> I I was</font>

505
00:23:57,930 --> 00:24:03,600
<font color="#E5E5E5">like</font><font color="#CCCCCC"> ok I need</font><font color="#E5E5E5"> to understand what's</font>

506
00:23:59,970 --> 00:24:05,250
<font color="#CCCCCC">going on so let's understand the bug so</font>

507
00:24:03,600 --> 00:24:07,740
the first thing<font color="#CCCCCC"> to know is</font><font color="#E5E5E5"> because we</font>

508
00:24:05,250 --> 00:24:11,550
wrote this<font color="#CCCCCC"> AAA cdbg instrumentation tool</font>

509
00:24:07,740 --> 00:24:13,470
which allows<font color="#E5E5E5"> you</font><font color="#CCCCCC"> to attach</font><font color="#E5E5E5"> gdb</font><font color="#CCCCCC"> restore</font>

510
00:24:11,550 --> 00:24:16,020
<font color="#CCCCCC">the</font><font color="#E5E5E5"> device attached</font><font color="#CCCCCC"> to gdb result</font><font color="#E5E5E5"> the</font>

511
00:24:13,470 --> 00:24:19,860
device<font color="#CCCCCC"> we're</font><font color="#E5E5E5"> going to leverage our</font><font color="#CCCCCC"> sed</font>

512
00:24:16,020 --> 00:24:20,340
debugger tool to automate<font color="#CCCCCC"> triaging the</font>

513
00:24:19,860 --> 00:24:22,979
different

514
00:24:20,340 --> 00:24:24,570
just to know if they are<font color="#CCCCCC"> they</font><font color="#E5E5E5"> say we</font>

515
00:24:22,980 --> 00:24:28,440
assume they are all the<font color="#E5E5E5"> same crash but</font>

516
00:24:24,570 --> 00:24:31,370
<font color="#CCCCCC">it would be nice to</font><font color="#E5E5E5"> be sure</font><font color="#CCCCCC"> so we do</font>

517
00:24:28,440 --> 00:24:34,590
that we connect<font color="#E5E5E5"> gdb</font><font color="#CCCCCC"> fire the test case</font>

518
00:24:31,370 --> 00:24:37,320
<font color="#CCCCCC">save the crash info and so on</font><font color="#E5E5E5"> and we use</font>

519
00:24:34,590 --> 00:24:41,428
<font color="#E5E5E5">something like</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> a basic gdb script</font>

520
00:24:37,320 --> 00:24:45,270
which basically<font color="#E5E5E5"> define</font><font color="#CCCCCC"> hook stop with</font>

521
00:24:41,429 --> 00:24:48,570
which will be called<font color="#E5E5E5"> when the debugger</font>

522
00:24:45,270 --> 00:24:50,700
will<font color="#CCCCCC"> hit States</font><font color="#E5E5E5"> and give give</font><font color="#CCCCCC"> a hand</font><font color="#E5E5E5"> and</font>

523
00:24:48,570 --> 00:24:53,610
basically all we do is we save the

524
00:24:50,700 --> 00:24:55,370
<font color="#CCCCCC">back-trace</font><font color="#E5E5E5"> and the registers in a text</font>

525
00:24:53,610 --> 00:24:58,168
file and then we can basically have a

526
00:24:55,370 --> 00:25:00,979
wrapper that<font color="#CCCCCC"> can go through all our text</font>

527
00:24:58,169 --> 00:25:05,340
file and see<font color="#E5E5E5"> they're all the same crash</font>

528
00:25:00,980 --> 00:25:07,080
so yeah<font color="#E5E5E5"> so we</font><font color="#CCCCCC"> got we got</font><font color="#E5E5E5"> why we have we</font>

529
00:25:05,340 --> 00:25:10,309
<font color="#CCCCCC">we thought</font><font color="#E5E5E5"> they</font><font color="#CCCCCC"> are all the</font><font color="#E5E5E5"> same crash</font>

530
00:25:07,080 --> 00:25:13,470
<font color="#CCCCCC">which</font><font color="#E5E5E5"> makes</font><font color="#CCCCCC"> sense</font><font color="#E5E5E5"> so here you have a</font>

531
00:25:10,309 --> 00:25:16,529
<font color="#CCCCCC">screenshot of the actual instances qmu</font>

532
00:25:13,470 --> 00:25:18,720
<font color="#E5E5E5">because we've I first it on both a</font><font color="#CCCCCC"> Si</font>

533
00:25:16,529 --> 00:25:21,390
and<font color="#CCCCCC"> si V which is the</font><font color="#E5E5E5"> virtualized</font>

534
00:25:18,720 --> 00:25:23,340
a say on<font color="#CCCCCC"> Inc um ooh</font><font color="#E5E5E5"> and I tested</font><font color="#CCCCCC"> it on</font>

535
00:25:21,390 --> 00:25:27,960
both 64 and 32<font color="#CCCCCC"> bits so it was</font>

536
00:25:23,340 --> 00:25:29,879
interesting to<font color="#CCCCCC"> find the same bug so from</font>

537
00:25:27,960 --> 00:25:33,870
that<font color="#E5E5E5"> you you know they're all the same</font>

538
00:25:29,880 --> 00:25:35,850
<font color="#E5E5E5">crash</font><font color="#CCCCCC"> you take the smallest sample so</font>

539
00:25:33,870 --> 00:25:40,168
you<font color="#E5E5E5"> have something</font><font color="#CCCCCC"> like that which has a</font>

540
00:25:35,850 --> 00:25:44,639
bunch<font color="#CCCCCC"> of XML tiles and basically I</font><font color="#E5E5E5"> ended</font>

541
00:25:40,169 --> 00:25:47,130
up<font color="#E5E5E5"> manually removing tags to see which</font>

542
00:25:44,640 --> 00:25:49,590
one was interesting or if there<font color="#E5E5E5"> was</font>

543
00:25:47,130 --> 00:25:51,600
anything interesting<font color="#E5E5E5"> could have</font>

544
00:25:49,590 --> 00:25:53,580
automated<font color="#CCCCCC"> it but I</font><font color="#E5E5E5"> tried manually first</font>

545
00:25:51,600 --> 00:25:57,330
<font color="#E5E5E5">and it added up being quite quick so</font>

546
00:25:53,580 --> 00:25:59,970
that's why I didn't automate it<font color="#CCCCCC"> so and</font>

547
00:25:57,330 --> 00:26:01,710
that's what I got so it's basically a

548
00:25:59,970 --> 00:26:03,419
config oath<font color="#E5E5E5"> which is basically the</font>

549
00:26:01,710 --> 00:26:06,360
<font color="#CCCCCC">rather like the thing you need to</font><font color="#E5E5E5"> send</font>

550
00:26:03,419 --> 00:26:08,520
so it's so it accepts your<font color="#E5E5E5"> your external</font>

551
00:26:06,360 --> 00:26:11,490
packet<font color="#E5E5E5"> but the interesting bit is the</font>

552
00:26:08,520 --> 00:26:13,080
hosts can reply<font color="#E5E5E5"> which is the tag</font><font color="#CCCCCC"> that if</font>

553
00:26:11,490 --> 00:26:16,289
I remove this tag it doesn't crash

554
00:26:13,080 --> 00:26:18,510
<font color="#E5E5E5">anymore so it's it's due to this tag and</font>

555
00:26:16,289 --> 00:26:21,029
the other<font color="#E5E5E5"> interesting thing is I</font>

556
00:26:18,510 --> 00:26:24,390
actually need<font color="#E5E5E5"> to send a packet twice to</font>

557
00:26:21,029 --> 00:26:27,779
trigger the crash which I was<font color="#E5E5E5"> quite</font>

558
00:26:24,390 --> 00:26:29,970
lucky<font color="#CCCCCC"> to to find it by fuzzing but it's</font>

559
00:26:27,779 --> 00:26:32,580
basically I found<font color="#E5E5E5"> it because at some</font>

560
00:26:29,970 --> 00:26:36,640
point<font color="#E5E5E5"> I said it twice</font>

561
00:26:32,580 --> 00:26:40,179
so I get<font color="#E5E5E5"> I attach a debugger</font><font color="#CCCCCC"> look at the</font>

562
00:26:36,640 --> 00:26:41,260
back trace I'm having a<font color="#E5E5E5"> free call</font><font color="#CCCCCC"> so at</font>

563
00:26:40,180 --> 00:26:45,430
the moment we don't know<font color="#CCCCCC"> if it's like</font><font color="#E5E5E5"> a</font>

564
00:26:41,260 --> 00:26:48,879
heap<font color="#CCCCCC"> user to free heap overflow double</font>

565
00:26:45,430 --> 00:26:51,810
free<font color="#E5E5E5"> and we can check that you</font><font color="#CCCCCC"> have two</font>

566
00:26:48,880 --> 00:26:54,760
<font color="#E5E5E5">interesting functions one of them is</font>

567
00:26:51,810 --> 00:26:57,970
<font color="#E5E5E5">related to the processing of the clients</font>

568
00:26:54,760 --> 00:27:01,270
<font color="#E5E5E5">and it's in a parser function so it's</font>

569
00:26:57,970 --> 00:27:03,100
definitely related<font color="#CCCCCC"> to our</font><font color="#E5E5E5"> XML packet so</font>

570
00:27:01,270 --> 00:27:05,530
now basically we<font color="#E5E5E5"> have a starting point</font>

571
00:27:03,100 --> 00:27:06,810
we look for from<font color="#E5E5E5"> the back trace we look</font>

572
00:27:05,530 --> 00:27:09,700
at the different functions<font color="#CCCCCC"> that are</font>

573
00:27:06,810 --> 00:27:13,389
around that<font color="#E5E5E5"> and after two days</font><font color="#CCCCCC"> of</font>

574
00:27:09,700 --> 00:27:16,450
reversing and we end up<font color="#E5E5E5"> with some</font>

575
00:27:13,390 --> 00:27:18,430
understanding<font color="#CCCCCC"> of</font><font color="#E5E5E5"> what is the</font><font color="#CCCCCC"> bug so we</font>

576
00:27:16,450 --> 00:27:20,440
have aggregate<font color="#CCCCCC"> off</font><font color="#E5E5E5"> path path which is</font>

577
00:27:18,430 --> 00:27:23,350
<font color="#E5E5E5">basically responsible</font><font color="#CCCCCC"> to pass the XML</font>

578
00:27:20,440 --> 00:27:26,590
<font color="#E5E5E5">and the</font><font color="#CCCCCC"> weight parse</font><font color="#E5E5E5"> XML is going to</font>

579
00:27:23,350 --> 00:27:28,600
<font color="#E5E5E5">initialize</font><font color="#CCCCCC"> lebecq's pads which is an</font>

580
00:27:26,590 --> 00:27:30,879
open source library<font color="#E5E5E5"> and they rely on</font>

581
00:27:28,600 --> 00:27:32,230
<font color="#E5E5E5">that and the way if you want to use the</font>

582
00:27:30,880 --> 00:27:34,060
back space you need to define some

583
00:27:32,230 --> 00:27:37,480
callbacks<font color="#E5E5E5"> that's going to be cold by</font>

584
00:27:34,060 --> 00:27:39,850
<font color="#CCCCCC">lebecq's pads each time some XML tag or</font>

585
00:27:37,480 --> 00:27:43,780
data is uncontrolled<font color="#E5E5E5"> so basically the</font>

586
00:27:39,850 --> 00:27:48,820
<font color="#CCCCCC">way it's implemented in Si is you</font>

587
00:27:43,780 --> 00:27:51,700
register<font color="#E5E5E5"> all start handler</font><font color="#CCCCCC"> when you the</font>

588
00:27:48,820 --> 00:27:55,090
tag is open and you have<font color="#CCCCCC"> all data</font>

589
00:27:51,700 --> 00:27:57,690
handler which is for when data is passed

590
00:27:55,090 --> 00:28:01,389
by the<font color="#CCCCCC"> lebecq's pad</font><font color="#E5E5E5"> and you have an</font><font color="#CCCCCC"> Hana</font>

591
00:27:57,690 --> 00:28:05,080
<font color="#E5E5E5">which is for when the actual tag is</font>

592
00:28:01,390 --> 00:28:08,140
closed<font color="#E5E5E5"> and the interesting</font><font color="#CCCCCC"> thing</font><font color="#E5E5E5"> is the</font>

593
00:28:05,080 --> 00:28:10,960
<font color="#CCCCCC">the I found the bug in the actual data</font>

594
00:28:08,140 --> 00:28:14,110
holder meaning when the actual<font color="#E5E5E5"> data for</font>

595
00:28:10,960 --> 00:28:18,550
the actual hosts can reply is<font color="#E5E5E5"> passed so</font>

596
00:28:14,110 --> 00:28:22,300
<font color="#E5E5E5">in this case a so I wrote some pseudo</font>

597
00:28:18,550 --> 00:28:24,669
<font color="#E5E5E5">code that I from my reversing but</font>

598
00:28:22,300 --> 00:28:27,129
basically I have different<font color="#E5E5E5"> steps like</font><font color="#CCCCCC"> 1</font>

599
00:28:24,670 --> 00:28:29,860
<font color="#CCCCCC">2 3 4 in the actual function processing</font>

600
00:28:27,130 --> 00:28:32,110
the data and then I have step 5<font color="#CCCCCC"> in the</font>

601
00:28:29,860 --> 00:28:34,990
actual function<font color="#E5E5E5"> another function</font><font color="#CCCCCC"> that</font>

602
00:28:32,110 --> 00:28:36,250
actually<font color="#CCCCCC"> frees some kind of pointer</font><font color="#E5E5E5"> so</font>

603
00:28:34,990 --> 00:28:38,920
I'm<font color="#E5E5E5"> going</font><font color="#CCCCCC"> to use some animation just to</font>

604
00:28:36,250 --> 00:28:40,210
explain it<font color="#CCCCCC"> to</font><font color="#E5E5E5"> you if you don't want to</font>

605
00:28:38,920 --> 00:28:41,740
<font color="#E5E5E5">look at the code but just to understand</font>

606
00:28:40,210 --> 00:28:43,570
the problem otherwise<font color="#E5E5E5"> you can follow</font>

607
00:28:41,740 --> 00:28:46,030
with<font color="#CCCCCC"> the code as</font><font color="#E5E5E5"> well so when the first</font>

608
00:28:43,570 --> 00:28:49,030
<font color="#E5E5E5">spike so remember I sent</font><font color="#CCCCCC"> two XML packets</font>

609
00:28:46,030 --> 00:28:51,670
<font color="#E5E5E5">the first packet ice and basically what</font>

610
00:28:49,030 --> 00:28:54,310
he's gonna do in in<font color="#E5E5E5"> the step</font><font color="#CCCCCC"> one it's</font>

611
00:28:51,670 --> 00:28:58,000
gonna get<font color="#E5E5E5"> because it's an</font><font color="#CCCCCC"> host</font><font color="#E5E5E5"> can reply</font>

612
00:28:54,310 --> 00:28:59,830
it's<font color="#E5E5E5"> gonna get the pointer from</font><font color="#CCCCCC"> a lock</font>

613
00:28:58,000 --> 00:29:01,810
<font color="#E5E5E5">which is a specific case and we can</font><font color="#CCCCCC"> see</font>

614
00:28:59,830 --> 00:29:05,320
there<font color="#E5E5E5"> is a</font><font color="#CCCCCC"> specific case</font><font color="#E5E5E5"> for for the</font>

615
00:29:01,810 --> 00:29:09,250
<font color="#E5E5E5">hosts can reply</font><font color="#CCCCCC"> tagged</font><font color="#E5E5E5"> so</font><font color="#CCCCCC"> it's gonna</font>

616
00:29:05,320 --> 00:29:10,720
allocate a chunk<font color="#CCCCCC"> in step four and the</font>

617
00:29:09,250 --> 00:29:12,100
reason why it's because<font color="#E5E5E5"> because there</font>

618
00:29:10,720 --> 00:29:13,870
wasn't any pointer before there wasn't

619
00:29:12,100 --> 00:29:17,110
data<font color="#E5E5E5"> step two and three are going to be</font>

620
00:29:13,870 --> 00:29:20,669
skipped<font color="#CCCCCC"> and a tip for it's going to be</font>

621
00:29:17,110 --> 00:29:24,010
allocated so now Peter tile<font color="#E5E5E5"> is is a</font>

622
00:29:20,670 --> 00:29:26,800
<font color="#CCCCCC">whole hold our pointer to our allocated</font>

623
00:29:24,010 --> 00:29:30,280
shank<font color="#E5E5E5"> and we set it to a lock for later</font>

624
00:29:26,800 --> 00:29:34,240
and later<font color="#E5E5E5"> so we so some data is copied</font>

625
00:29:30,280 --> 00:29:37,240
<font color="#E5E5E5">into the chunk and later</font><font color="#CCCCCC"> in</font><font color="#E5E5E5"> step five we</font>

626
00:29:34,240 --> 00:29:39,760
we end up freeing the chunk so we have a

627
00:29:37,240 --> 00:29:41,170
<font color="#CCCCCC">fresh freed shank</font><font color="#E5E5E5"> but actually one</font>

628
00:29:39,760 --> 00:29:45,660
problem is there is a dangling pointer

629
00:29:41,170 --> 00:29:48,430
to this<font color="#E5E5E5"> reagent but it's in a free chunk</font>

630
00:29:45,660 --> 00:29:52,360
so now we send<font color="#E5E5E5"> our second example packet</font>

631
00:29:48,430 --> 00:29:56,890
and again we go through the steps step 1

632
00:29:52,360 --> 00:29:59,830
we get the pointer step 2<font color="#CCCCCC"> we check if</font>

633
00:29:56,890 --> 00:30:01,630
there is<font color="#E5E5E5"> some data and instead we check</font>

634
00:29:59,830 --> 00:30:03,070
if<font color="#E5E5E5"> the pointer is valid it's valid</font>

635
00:30:01,630 --> 00:30:05,110
because there is dangling pointer<font color="#E5E5E5"> check</font>

636
00:30:03,070 --> 00:30:07,810
if there<font color="#CCCCCC"> is data there is</font><font color="#E5E5E5"> it's a free</font>

637
00:30:05,110 --> 00:30:10,929
chunky<font color="#CCCCCC"> told some some metadata in the</font>

638
00:30:07,810 --> 00:30:13,659
<font color="#CCCCCC">free Chang and then we</font><font color="#E5E5E5"> check step 3 if</font>

639
00:30:10,930 --> 00:30:15,460
there<font color="#E5E5E5"> is some previous length</font><font color="#CCCCCC"> yes there</font>

640
00:30:13,660 --> 00:30:17,830
is because<font color="#E5E5E5"> there was some data and we</font>

641
00:30:15,460 --> 00:30:21,010
had up calling string<font color="#CCCCCC"> cards to</font><font color="#E5E5E5"> append</font>

642
00:30:17,830 --> 00:30:23,439
the<font color="#E5E5E5"> data into this</font><font color="#CCCCCC"> precinct and then we</font>

643
00:30:21,010 --> 00:30:24,910
<font color="#E5E5E5">return so we don't reallocate anything</font>

644
00:30:23,440 --> 00:30:26,530
we<font color="#E5E5E5"> just add</font><font color="#CCCCCC"> in</font><font color="#E5E5E5"> some data in the free</font>

645
00:30:24,910 --> 00:30:30,040
<font color="#CCCCCC">check but what is really</font><font color="#E5E5E5"> interesting is</font>

646
00:30:26,530 --> 00:30:33,450
later<font color="#E5E5E5"> in step</font><font color="#CCCCCC"> 5 we're freeing</font><font color="#E5E5E5"> a free</font>

647
00:30:30,040 --> 00:30:36,629
<font color="#CCCCCC">shank again resulting into a double free</font>

648
00:30:33,450 --> 00:30:38,680
so now we know it's a<font color="#E5E5E5"> double free and</font>

649
00:30:36,630 --> 00:30:40,330
what is<font color="#E5E5E5"> interesting is we know it's</font><font color="#CCCCCC"> a</font>

650
00:30:38,680 --> 00:30:42,580
<font color="#E5E5E5">double free but also for two thousand</font>

651
00:30:40,330 --> 00:30:45,520
bytes<font color="#E5E5E5"> because the the malach is two</font>

652
00:30:42,580 --> 00:30:47,679
<font color="#E5E5E5">thousand bytes so here we don't overflow</font>

653
00:30:45,520 --> 00:30:49,090
any memory like 2000<font color="#E5E5E5"> by the check I</font>

654
00:30:47,680 --> 00:30:51,430
<font color="#E5E5E5">don't show</font><font color="#CCCCCC"> it in the the</font><font color="#E5E5E5"> actual code</font>

655
00:30:49,090 --> 00:30:54,459
that 2000 byte is fine<font color="#CCCCCC"> to check the size</font>

656
00:30:51,430 --> 00:30:56,140
but it's<font color="#E5E5E5"> just we have a constraint with</font>

657
00:30:54,460 --> 00:30:57,820
double free it operates on<font color="#E5E5E5"> the on the</font>

658
00:30:56,140 --> 00:31:01,880
<font color="#CCCCCC">two thousand by chunk</font>

659
00:30:57,820 --> 00:31:03,889
so just how our<font color="#E5E5E5"> first found it because</font>

660
00:31:01,880 --> 00:31:06,230
<font color="#CCCCCC">there was</font><font color="#E5E5E5"> there is</font><font color="#CCCCCC"> in line metadata for</font>

661
00:31:03,890 --> 00:31:08,480
<font color="#CCCCCC">allocated Chang and Finch preaching</font><font color="#E5E5E5"> but</font>

662
00:31:06,230 --> 00:31:10,700
<font color="#E5E5E5">they are different</font><font color="#CCCCCC"> basically when</font><font color="#E5E5E5"> you</font>

663
00:31:08,480 --> 00:31:12,710
free a chunk there is some check<font color="#CCCCCC"> on the</font>

664
00:31:10,700 --> 00:31:14,570
metadata on the metadata that<font color="#CCCCCC"> is</font>

665
00:31:12,710 --> 00:31:17,690
actually a valid allocated chunk<font color="#E5E5E5"> and</font>

666
00:31:14,570 --> 00:31:21,230
because we do a double<font color="#E5E5E5"> free the metadata</font>

667
00:31:17,690 --> 00:31:25,280
is wrong and<font color="#E5E5E5"> it end up resulting in into</font>

668
00:31:21,230 --> 00:31:29,660
an assert and why our<font color="#CCCCCC"> Father found the</font>

669
00:31:25,280 --> 00:31:32,540
bag okay<font color="#CCCCCC"> so we have our bag we know it's</font>

670
00:31:29,660 --> 00:31:37,790
a<font color="#E5E5E5"> double free how do we exploit that</font><font color="#CCCCCC"> I</font>

671
00:31:32,540 --> 00:31:40,190
ended up using a technique<font color="#E5E5E5"> because I've</font>

672
00:31:37,790 --> 00:31:42,350
been<font color="#E5E5E5"> working on</font><font color="#CCCCCC"> I key and I know it's</font>

673
00:31:40,190 --> 00:31:44,510
quite<font color="#E5E5E5"> nice to</font><font color="#CCCCCC"> do some he Feng Shui and</font>

674
00:31:42,350 --> 00:31:44,990
leverage interesting structures in

675
00:31:44,510 --> 00:31:48,140
memory

676
00:31:44,990 --> 00:31:50,360
I know if using<font color="#CCCCCC"> I key so let's do that</font>

677
00:31:48,140 --> 00:31:54,620
and let's do<font color="#E5E5E5"> it like</font><font color="#CCCCCC"> Robin Hood using as</font>

678
00:31:50,360 --> 00:31:57,530
many session as we can but our ultimate

679
00:31:54,620 --> 00:32:00,919
goal<font color="#E5E5E5"> before</font><font color="#CCCCCC"> getting remote execution is</font>

680
00:31:57,530 --> 00:32:04,899
to trigger some memory<font color="#E5E5E5"> me</font><font color="#CCCCCC"> writes so I</font>

681
00:32:00,920 --> 00:32:10,790
call me<font color="#E5E5E5"> writes a special</font><font color="#CCCCCC"> write primitive</font>

682
00:32:04,900 --> 00:32:15,740
<font color="#CCCCCC">due to</font><font color="#E5E5E5"> doubly linked list pointers the</font>

683
00:32:10,790 --> 00:32:18,590
<font color="#CCCCCC">others in red you have</font><font color="#E5E5E5"> to the so the</font>

684
00:32:15,740 --> 00:32:20,540
example is an allocated chunk and so you

685
00:32:18,590 --> 00:32:23,178
have the gel<font color="#E5E5E5"> malloc header which is pray</font>

686
00:32:20,540 --> 00:32:25,159
foot and head<font color="#E5E5E5"> and underneath you have</font>

687
00:32:23,179 --> 00:32:29,059
<font color="#CCCCCC">the</font><font color="#E5E5E5"> actual</font><font color="#CCCCCC"> mental hair which is specific</font>

688
00:32:25,160 --> 00:32:32,179
to Cisco and for Cisco chunks<font color="#E5E5E5"> you have a</font>

689
00:32:29,059 --> 00:32:35,899
special<font color="#CCCCCC"> double linked list for allocated</font>

690
00:32:32,179 --> 00:32:37,640
chunk<font color="#E5E5E5"> so if you've done some heap</font>

691
00:32:35,900 --> 00:32:39,500
exploitation usually you have<font color="#CCCCCC"> double</font>

692
00:32:37,640 --> 00:32:41,330
<font color="#E5E5E5">linked list for free chunks like for</font>

693
00:32:39,500 --> 00:32:43,940
free list<font color="#E5E5E5"> but here we are actually</font>

694
00:32:41,330 --> 00:32:46,370
<font color="#E5E5E5">talking about allocated chunks the idea</font>

695
00:32:43,940 --> 00:32:48,980
is that<font color="#E5E5E5"> they can track allocations</font><font color="#CCCCCC"> to</font>

696
00:32:46,370 --> 00:32:51,428
know who like what stack is<font color="#E5E5E5"> it a key</font>

697
00:32:48,980 --> 00:32:54,260
that<font color="#E5E5E5"> is taking a lot</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> memory</font><font color="#CCCCCC"> or is it</font>

698
00:32:51,429 --> 00:32:57,650
SSL so they can track who allocated what

699
00:32:54,260 --> 00:32:59,420
and so what from an<font color="#E5E5E5"> are</font><font color="#CCCCCC"> on from an</font>

700
00:32:57,650 --> 00:33:00,710
exploitation point of view of these

701
00:32:59,420 --> 00:33:04,340
pointers are really interesting<font color="#CCCCCC"> because</font>

702
00:33:00,710 --> 00:33:05,900
we<font color="#CCCCCC"> can if we can</font><font color="#E5E5E5"> corrupt in them when an</font>

703
00:33:04,340 --> 00:33:08,000
allocated<font color="#E5E5E5"> shank is going</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> be freed</font>

704
00:33:05,900 --> 00:33:10,220
this this

705
00:33:08,000 --> 00:33:11,960
<font color="#CCCCCC">allocate this chunk is going to be</font>

706
00:33:10,220 --> 00:33:15,170
from the<font color="#CCCCCC"> doubler link list and we can</font>

707
00:33:11,960 --> 00:33:16,400
potentially<font color="#E5E5E5"> get a mirror right primitive</font>

708
00:33:15,170 --> 00:33:19,460
we call it mirror because they're gonna

709
00:33:16,400 --> 00:33:20,750
be<font color="#E5E5E5"> two operations to write operations</font>

710
00:33:19,460 --> 00:33:22,250
<font color="#E5E5E5">and one of them is going to be useful</font>

711
00:33:20,750 --> 00:33:25,730
and<font color="#E5E5E5"> the other one is going</font><font color="#CCCCCC"> to be a side</font>

712
00:33:22,250 --> 00:33:27,770
effect<font color="#E5E5E5"> the interesting thing is this</font>

713
00:33:25,730 --> 00:33:30,920
actually was exploited already by

714
00:33:27,770 --> 00:33:33,620
exertion<font color="#CCCCCC"> talent 2016</font><font color="#E5E5E5"> and it's possible</font>

715
00:33:30,920 --> 00:33:39,380
because there is no siphoning<font color="#CCCCCC"> King and</font>

716
00:33:33,620 --> 00:33:41,510
we were able able to abuse<font color="#CCCCCC"> it</font><font color="#E5E5E5"> still the</font>

717
00:33:39,380 --> 00:33:42,920
<font color="#CCCCCC">other thing to know is that</font><font color="#E5E5E5"> even though</font>

718
00:33:41,510 --> 00:33:44,780
the GL<font color="#CCCCCC"> mark</font><font color="#E5E5E5"> or Peeta Mellark</font>

719
00:33:42,920 --> 00:33:46,460
would have<font color="#CCCCCC"> siphoned</font><font color="#E5E5E5"> linking the</font><font color="#CCCCCC"> Cisco</font>

720
00:33:44,780 --> 00:33:51,139
mempool doesn't have some safe and

721
00:33:46,460 --> 00:33:53,510
linking so our strategy<font color="#E5E5E5"> just to before</font>

722
00:33:51,140 --> 00:33:55,190
we<font color="#E5E5E5"> go through the different step is we</font>

723
00:33:53,510 --> 00:33:59,150
want<font color="#CCCCCC"> to</font><font color="#E5E5E5"> message the heap to do some</font>

724
00:33:55,190 --> 00:34:00,650
things we we want to<font color="#E5E5E5"> leverage</font><font color="#CCCCCC"> our double</font>

725
00:33:59,150 --> 00:34:02,810
free primitive we're<font color="#CCCCCC"> going to see that</font>

726
00:34:00,650 --> 00:34:05,540
we call actually<font color="#E5E5E5"> repeatable free</font>

727
00:34:02,810 --> 00:34:09,799
primitive<font color="#CCCCCC"> and then we want to basically</font>

728
00:34:05,540 --> 00:34:12,830
<font color="#CCCCCC">curb some data on the heat</font><font color="#E5E5E5"> in order to</font>

729
00:34:09,800 --> 00:34:16,990
<font color="#CCCCCC">trick to</font><font color="#E5E5E5"> to created confusion</font><font color="#CCCCCC"> States</font><font color="#E5E5E5"> and</font>

730
00:34:12,830 --> 00:34:20,330
then<font color="#E5E5E5"> overflow some memory in order</font><font color="#CCCCCC"> to</font>

731
00:34:16,989 --> 00:34:22,159
override the<font color="#E5E5E5"> mere</font><font color="#CCCCCC"> the pointers that we</font>

732
00:34:20,330 --> 00:34:24,319
want the<font color="#E5E5E5"> the mirror right primitives off</font>

733
00:34:22,159 --> 00:34:27,819
<font color="#E5E5E5">so it's quite like a complicated process</font>

734
00:34:24,320 --> 00:34:31,220
<font color="#CCCCCC">so I'm</font><font color="#E5E5E5"> going to explain how basically to</font>

735
00:34:27,820 --> 00:34:35,179
<font color="#CCCCCC">work from</font><font color="#E5E5E5"> nothing</font><font color="#CCCCCC"> no primitive and</font>

736
00:34:31,219 --> 00:34:38,839
basically build primitive one on top<font color="#E5E5E5"> of</font>

737
00:34:35,179 --> 00:34:42,050
<font color="#CCCCCC">the other so first if you're</font><font color="#E5E5E5"> not</font>

738
00:34:38,840 --> 00:34:47,660
<font color="#E5E5E5">familiar with Ikey reassembly</font><font color="#CCCCCC"> basically</font>

739
00:34:42,050 --> 00:34:49,760
the<font color="#E5E5E5"> idea is what was explained</font><font color="#CCCCCC"> in</font><font color="#E5E5E5"> the</font>

740
00:34:47,659 --> 00:34:51,589
previous talk is<font color="#E5E5E5"> you send different IP</font>

741
00:34:49,760 --> 00:34:53,960
fragments<font color="#E5E5E5"> and they're going to be</font>

742
00:34:51,590 --> 00:34:57,140
<font color="#CCCCCC">resonable into another packet and here</font>

743
00:34:53,960 --> 00:34:58,670
the idea<font color="#CCCCCC"> is you you send a sequence</font>

744
00:34:57,139 --> 00:35:00,799
number one sequence number two sequence

745
00:34:58,670 --> 00:35:02,480
number three and the last one has the

746
00:35:00,800 --> 00:35:04,100
special<font color="#E5E5E5"> bits indicating it's the last</font>

747
00:35:02,480 --> 00:35:08,660
one<font color="#E5E5E5"> and that's when it's going to</font><font color="#CCCCCC"> be</font>

748
00:35:04,100 --> 00:35:11,509
reassembled<font color="#CCCCCC"> and this this</font><font color="#E5E5E5"> was used to</font>

749
00:35:08,660 --> 00:35:14,000
exploit the<font color="#E5E5E5"> bug</font><font color="#CCCCCC"> by examining the Intel</font>

750
00:35:11,510 --> 00:35:15,920
because<font color="#E5E5E5"> it the bug was in the</font><font color="#CCCCCC"> IKEA</font>

751
00:35:14,000 --> 00:35:18,650
<font color="#CCCCCC">reassembly but actually the IP</font>

752
00:35:15,920 --> 00:35:22,540
reassembly is<font color="#CCCCCC"> a nice primitive if you</font>

753
00:35:18,650 --> 00:35:24,880
can correct<font color="#E5E5E5"> things because we're</font>

754
00:35:22,540 --> 00:35:26,620
we we can<font color="#E5E5E5"> I'll show you why it's</font>

755
00:35:24,880 --> 00:35:29,110
interesting<font color="#E5E5E5"> but basically what we</font>

756
00:35:26,620 --> 00:35:30,940
learned from<font color="#E5E5E5"> the previous</font><font color="#CCCCCC"> bag is</font><font color="#E5E5E5"> that I</font>

757
00:35:29,110 --> 00:35:33,070
keep fragmentation is also a nice

758
00:35:30,940 --> 00:35:35,650
reliable<font color="#CCCCCC"> thankful mechanism I'll show</font>

759
00:35:33,070 --> 00:35:39,220
you right after<font color="#E5E5E5"> and that the reassemble</font>

760
00:35:35,650 --> 00:35:40,840
packet length which<font color="#CCCCCC"> is used for</font><font color="#E5E5E5"> when you</font>

761
00:35:39,220 --> 00:35:42,939
say you<font color="#E5E5E5"> actually receive</font><font color="#CCCCCC"> the last frag</font>

762
00:35:40,840 --> 00:35:45,010
to actually<font color="#CCCCCC"> allocate the packet</font><font color="#E5E5E5"> to hold</font>

763
00:35:42,940 --> 00:35:47,950
the different fragments<font color="#E5E5E5"> it's updated</font>

764
00:35:45,010 --> 00:35:50,440
each<font color="#CCCCCC"> time it receive</font><font color="#E5E5E5"> the fragments</font><font color="#CCCCCC"> so</font>

765
00:35:47,950 --> 00:35:53,020
let's say we<font color="#CCCCCC"> ship the first fragment</font>

766
00:35:50,440 --> 00:35:54,850
<font color="#CCCCCC">you're gonna have</font><font color="#E5E5E5"> some where it's going</font>

767
00:35:53,020 --> 00:35:57,070
to<font color="#E5E5E5"> store the length of the first</font>

768
00:35:54,850 --> 00:35:58,750
<font color="#CCCCCC">fragment</font><font color="#E5E5E5"> and then we receive the second</font>

769
00:35:57,070 --> 00:36:01,540
one it's going<font color="#E5E5E5"> to add that to</font><font color="#CCCCCC"> the length</font>

770
00:35:58,750 --> 00:36:03,640
and then<font color="#CCCCCC"> the third one is</font><font color="#E5E5E5"> gonna add that</font>

771
00:36:01,540 --> 00:36:05,680
<font color="#E5E5E5">to the length and now it's allocating</font>

772
00:36:03,640 --> 00:36:07,690
the<font color="#CCCCCC"> reasonable packets but it doesn't</font>

773
00:36:05,680 --> 00:36:09,609
check the previous length for the

774
00:36:07,690 --> 00:36:13,030
fragment<font color="#E5E5E5"> it's just using</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> one it has</font>

775
00:36:09,610 --> 00:36:14,740
computed right<font color="#E5E5E5"> and we're going to see</font>

776
00:36:13,030 --> 00:36:19,780
<font color="#E5E5E5">that if</font><font color="#CCCCCC"> we</font><font color="#E5E5E5"> are</font><font color="#CCCCCC"> able to</font><font color="#E5E5E5"> change</font><font color="#CCCCCC"> the</font>

777
00:36:14,740 --> 00:36:21,549
lengths of one<font color="#E5E5E5"> fragment before we</font>

778
00:36:19,780 --> 00:36:24,550
trigger reassembly<font color="#E5E5E5"> we can put</font>

779
00:36:21,550 --> 00:36:26,440
potentially do something<font color="#CCCCCC"> wrong because</font>

780
00:36:24,550 --> 00:36:30,790
the reasonable length is going to be

781
00:36:26,440 --> 00:36:32,560
trusted but anyway the normal way is

782
00:36:30,790 --> 00:36:38,500
basically to copy all<font color="#E5E5E5"> the</font><font color="#CCCCCC"> fragments</font><font color="#E5E5E5"> and</font>

783
00:36:32,560 --> 00:36:40,180
everything is<font color="#E5E5E5"> fine so the other</font>

784
00:36:38,500 --> 00:36:43,330
constraint we have with<font color="#E5E5E5"> Ikey I said</font>

785
00:36:40,180 --> 00:36:45,190
earlier is we have we need<font color="#E5E5E5"> to say we can</font>

786
00:36:43,330 --> 00:36:49,080
send more<font color="#E5E5E5"> than</font><font color="#CCCCCC"> 8,000 bytes per session</font>

787
00:36:45,190 --> 00:36:51,460
<font color="#E5E5E5">and this is this can</font><font color="#CCCCCC"> be</font><font color="#E5E5E5"> annoying because</font>

788
00:36:49,080 --> 00:36:57,940
we have another<font color="#E5E5E5"> constraint on the actual</font>

789
00:36:51,460 --> 00:37:01,710
<font color="#E5E5E5">XML buffer which is our double free bug</font>

790
00:36:57,940 --> 00:37:04,540
which we're gonna call repeatable<font color="#E5E5E5"> free</font>

791
00:37:01,710 --> 00:37:06,970
just<font color="#E5E5E5"> after basically it's because it's</font>

792
00:37:04,540 --> 00:37:09,300
on a two<font color="#E5E5E5"> thousand bytes chunk if we do a</font>

793
00:37:06,970 --> 00:37:15,879
hip<font color="#CCCCCC"> Feng Shui just on two thousand bytes</font>

794
00:37:09,300 --> 00:37:17,680
<font color="#E5E5E5">we end up</font><font color="#CCCCCC"> we want</font><font color="#E5E5E5"> to spray</font><font color="#CCCCCC"> the like send</font>

795
00:37:15,880 --> 00:37:19,630
lots of two thousand bytes<font color="#E5E5E5"> packets to</font>

796
00:37:17,680 --> 00:37:21,549
fill all the<font color="#E5E5E5"> hole and however our data</font>

797
00:37:19,630 --> 00:37:23,590
<font color="#E5E5E5">message layout but we can only send</font><font color="#CCCCCC"> for</font>

798
00:37:21,550 --> 00:37:25,360
<font color="#CCCCCC">possessions</font><font color="#E5E5E5"> so it's you need lots of</font>

799
00:37:23,590 --> 00:37:28,000
<font color="#CCCCCC">sessions to actually massage the heat</font>

800
00:37:25,360 --> 00:37:29,710
right and the other thing is it also

801
00:37:28,000 --> 00:37:32,860
limits<font color="#E5E5E5"> how many mere rights we get</font>

802
00:37:29,710 --> 00:37:35,089
because our<font color="#E5E5E5"> ultimate goal</font><font color="#CCCCCC"> we're</font><font color="#E5E5E5"> gonna</font>

803
00:37:32,860 --> 00:37:37,549
we're gonna show<font color="#CCCCCC"> that but if we</font>

804
00:37:35,089 --> 00:37:40,219
<font color="#E5E5E5">work out with mm bites chunk with a</font>

805
00:37:37,549 --> 00:37:42,559
sanctuary<font color="#E5E5E5"> and we have an overlapping at</font>

806
00:37:40,219 --> 00:37:45,529
some point we get<font color="#E5E5E5"> a hole and our goal is</font>

807
00:37:42,559 --> 00:37:47,420
<font color="#CCCCCC">to</font><font color="#E5E5E5"> curb some some target chunk</font><font color="#CCCCCC"> we're</font><font color="#E5E5E5"> not</font>

808
00:37:45,529 --> 00:37:49,880
going to<font color="#E5E5E5"> be able to</font><font color="#CCCCCC"> correct many</font><font color="#E5E5E5"> of them</font>

809
00:37:47,420 --> 00:37:52,039
because<font color="#E5E5E5"> we need to replace this overlap</font>

810
00:37:49,880 --> 00:37:53,930
in shank with an IP fragment which needs

811
00:37:52,039 --> 00:37:56,749
to<font color="#E5E5E5"> be less</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> ain't our eight thousand</font>

812
00:37:53,930 --> 00:37:59,479
bytes which is the<font color="#E5E5E5"> maximum so our</font>

813
00:37:56,749 --> 00:38:02,930
solution at the<font color="#CCCCCC"> end</font><font color="#E5E5E5"> which I'm going</font><font color="#CCCCCC"> to</font>

814
00:37:59,479 --> 00:38:04,968
<font color="#E5E5E5">explain is to use 800 bytes because 800</font>

815
00:38:02,930 --> 00:38:07,249
bytes<font color="#E5E5E5"> times four gives two thousand</font>

816
00:38:04,969 --> 00:38:11,329
bytes so we have<font color="#E5E5E5"> a just we've just</font>

817
00:38:07,249 --> 00:38:19,669
changed the granular granularity okay

818
00:38:11,329 --> 00:38:22,309
so let's build our primitives so first

819
00:38:19,670 --> 00:38:24,289
primitive<font color="#E5E5E5"> we want is to</font><font color="#CCCCCC"> create holes so</font>

820
00:38:22,309 --> 00:38:25,609
we're<font color="#CCCCCC"> going to use two sessions the</font>

821
00:38:24,289 --> 00:38:28,089
first one is going<font color="#E5E5E5"> to be</font><font color="#CCCCCC"> exactly two</font>

822
00:38:25,609 --> 00:38:32,509
it's going<font color="#CCCCCC"> to</font><font color="#E5E5E5"> be used to send different</font>

823
00:38:28,089 --> 00:38:33,589
<font color="#E5E5E5">fragments to fill all the whole and at</font>

824
00:38:32,509 --> 00:38:36,200
some point we're going to<font color="#E5E5E5"> have some</font>

825
00:38:33,589 --> 00:38:43,369
adjacency so everything I show you is

826
00:38:36,200 --> 00:38:45,468
<font color="#CCCCCC">ikey fragments and at some point when we</font>

827
00:38:43,369 --> 00:38:47,089
have some adjacency we can send<font color="#CCCCCC"> another</font>

828
00:38:45,469 --> 00:38:48,890
fragment<font color="#E5E5E5"> from a different</font><font color="#CCCCCC"> session so I'm</font>

829
00:38:47,089 --> 00:38:51,799
using different<font color="#E5E5E5"> colors to show you</font>

830
00:38:48,890 --> 00:38:55,279
<font color="#E5E5E5">different sessions and then I'm I can</font>

831
00:38:51,799 --> 00:38:58,849
just have another fragment<font color="#CCCCCC"> after just so</font>

832
00:38:55,279 --> 00:39:00,619
my session<font color="#E5E5E5"> to fragment is in between</font><font color="#CCCCCC"> and</font>

833
00:38:58,849 --> 00:39:03,410
now<font color="#CCCCCC"> basically</font><font color="#E5E5E5"> what I'm gonna do is I'm</font>

834
00:39:00,619 --> 00:39:05,809
<font color="#E5E5E5">gonna trigger reassembly</font><font color="#CCCCCC"> for the session</font>

835
00:39:03,410 --> 00:39:07,969
number two<font color="#E5E5E5"> in red and the idea is</font>

836
00:39:05,809 --> 00:39:09,859
<font color="#E5E5E5">because it's it received the last frag</font>

837
00:39:07,969 --> 00:39:11,749
<font color="#E5E5E5">the idea</font><font color="#CCCCCC"> is it's going</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> actually</font>

838
00:39:09,859 --> 00:39:15,589
trigger reassembly because it's gonna

839
00:39:11,749 --> 00:39:17,359
it's gonna it's gonna think it needs to

840
00:39:15,589 --> 00:39:19,640
reassemble them all and it's<font color="#E5E5E5"> gonna copy</font>

841
00:39:17,359 --> 00:39:23,660
by two fragments<font color="#E5E5E5"> into my reassemble</font>

842
00:39:19,640 --> 00:39:26,900
packets so it's gonna fail because<font color="#E5E5E5"> I</font>

843
00:39:23,660 --> 00:39:28,969
didn't sign any valid<font color="#CCCCCC"> I</font><font color="#E5E5E5"> keep a cat at</font>

844
00:39:26,900 --> 00:39:31,460
the<font color="#E5E5E5"> end in the actual data but what</font>

845
00:39:28,969 --> 00:39:34,160
<font color="#E5E5E5">matters</font><font color="#CCCCCC"> here is that we created a hole</font>

846
00:39:31,460 --> 00:39:37,130
<font color="#E5E5E5">because the actual fragment itself is</font>

847
00:39:34,160 --> 00:39:40,390
not needed anymore<font color="#E5E5E5"> and it's</font><font color="#CCCCCC"> gonna be</font>

848
00:39:37,130 --> 00:39:45,289
freed so<font color="#CCCCCC"> we end</font><font color="#E5E5E5"> up having a whole</font>

849
00:39:40,390 --> 00:39:47,950
control<font color="#CCCCCC"> in the middle</font><font color="#E5E5E5"> of packet</font><font color="#CCCCCC"> we</font><font color="#E5E5E5"> sin</font>

850
00:39:45,289 --> 00:39:52,810
and<font color="#CCCCCC"> no are gonna stay in memory</font>

851
00:39:47,950 --> 00:39:56,140
I'm using the<font color="#CCCCCC"> dot square to</font><font color="#E5E5E5"> to to show a</font>

852
00:39:52,810 --> 00:39:57,640
<font color="#E5E5E5">free</font><font color="#CCCCCC"> change</font><font color="#E5E5E5"> so we are able to our first</font>

853
00:39:56,140 --> 00:40:00,609
primitive<font color="#E5E5E5"> is to create a</font><font color="#CCCCCC"> hole we</font><font color="#E5E5E5"> can</font>

854
00:39:57,640 --> 00:40:03,009
create<font color="#E5E5E5"> hole the second thing we</font><font color="#CCCCCC"> actually</font>

855
00:40:00,610 --> 00:40:05,560
need to<font color="#E5E5E5"> do which I didn't do at first</font>

856
00:40:03,010 --> 00:40:09,070
<font color="#E5E5E5">but I ended up doing it because</font><font color="#CCCCCC"> it would</font>

857
00:40:05,560 --> 00:40:11,650
improve<font color="#CCCCCC"> my feng shui is basically every</font>

858
00:40:09,070 --> 00:40:14,560
time<font color="#E5E5E5"> later when we're</font><font color="#CCCCCC"> gonna want</font><font color="#E5E5E5"> to work</font>

859
00:40:11,650 --> 00:40:17,710
with<font color="#E5E5E5"> like our our 800 bytes trying to do</font>

860
00:40:14,560 --> 00:40:22,480
our<font color="#CCCCCC"> Feng Shui lots of small allocations</font>

861
00:40:17,710 --> 00:40:25,660
<font color="#E5E5E5">end up being made</font><font color="#CCCCCC"> in addition to our 800</font>

862
00:40:22,480 --> 00:40:27,400
bytes<font color="#E5E5E5"> and to avoid having them</font><font color="#CCCCCC"> mess</font><font color="#E5E5E5"> up</font>

863
00:40:25,660 --> 00:40:28,930
with our Feng Shui<font color="#E5E5E5"> because what we want</font>

864
00:40:27,400 --> 00:40:31,390
basically<font color="#E5E5E5"> the the first line is</font><font color="#CCCCCC"> the</font>

865
00:40:28,930 --> 00:40:34,419
different fragments<font color="#E5E5E5"> 800 all next to each</font>

866
00:40:31,390 --> 00:40:36,190
<font color="#E5E5E5">other but we end up having some smaller</font>

867
00:40:34,420 --> 00:40:38,650
<font color="#E5E5E5">location like in the signal line in</font><font color="#CCCCCC"> blue</font>

868
00:40:36,190 --> 00:40:40,090
<font color="#CCCCCC">that end up being in</font><font color="#E5E5E5"> the middle and that</font>

869
00:40:38,650 --> 00:40:41,620
<font color="#E5E5E5">mess up with our French we we want to</font>

870
00:40:40,090 --> 00:40:44,740
avoid them<font color="#CCCCCC"> so what we end up doing</font>

871
00:40:41,620 --> 00:40:47,859
basically is<font color="#E5E5E5"> to previously creates a</font>

872
00:40:44,740 --> 00:40:50,799
small hole<font color="#E5E5E5"> so next time we send our</font>

873
00:40:47,860 --> 00:40:53,020
fragment<font color="#E5E5E5"> the small blue chunk will go</font>

874
00:40:50,800 --> 00:40:55,810
into our<font color="#CCCCCC"> holes and we'll get</font><font color="#E5E5E5"> the</font>

875
00:40:53,020 --> 00:40:57,880
adjacency we want on top so basically

876
00:40:55,810 --> 00:40:59,740
how do we create<font color="#E5E5E5"> hope that we we</font><font color="#CCCCCC"> just</font>

877
00:40:57,880 --> 00:41:02,980
use the same<font color="#E5E5E5"> technique as we explained</font>

878
00:40:59,740 --> 00:41:05,740
before<font color="#CCCCCC"> so we initially we send 70 frag</font>

879
00:41:02,980 --> 00:41:08,800
70 bytes<font color="#E5E5E5"> fragment chunk in two</font><font color="#CCCCCC"> different</font>

880
00:41:05,740 --> 00:41:10,930
sessions<font color="#E5E5E5"> and we just alternate</font><font color="#CCCCCC"> the</font>

881
00:41:08,800 --> 00:41:13,360
packets and<font color="#E5E5E5"> at some point we just</font>

882
00:41:10,930 --> 00:41:15,759
reassemble session number<font color="#CCCCCC"> two and we</font><font color="#E5E5E5"> get</font>

883
00:41:13,360 --> 00:41:19,120
<font color="#E5E5E5">lots of small holes and that's that's</font>

884
00:41:15,760 --> 00:41:21,610
enough<font color="#E5E5E5"> next time we want to send our 800</font>

885
00:41:19,120 --> 00:41:23,710
bytes chunks all the small blue chunks

886
00:41:21,610 --> 00:41:26,250
will go inside<font color="#CCCCCC"> the small holes and we'll</font>

887
00:41:23,710 --> 00:41:29,920
get adjacency with our black fragments

888
00:41:26,250 --> 00:41:34,330
so from now on<font color="#E5E5E5"> we can get some adjacency</font>

889
00:41:29,920 --> 00:41:36,520
for our<font color="#CCCCCC"> fragments so the primitive</font>

890
00:41:34,330 --> 00:41:38,860
number<font color="#E5E5E5"> two that</font><font color="#CCCCCC"> we have is</font><font color="#E5E5E5"> basically the</font>

891
00:41:36,520 --> 00:41:40,600
one due<font color="#CCCCCC"> to</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> bug</font>

892
00:41:38,860 --> 00:41:43,720
so it's a<font color="#E5E5E5"> double frame ability but</font>

893
00:41:40,600 --> 00:41:46,029
actually this primitive<font color="#E5E5E5"> is a lot more</font>

894
00:41:43,720 --> 00:41:47,890
<font color="#CCCCCC">powerful than</font><font color="#E5E5E5"> double free primitive and</font>

895
00:41:46,030 --> 00:41:49,300
<font color="#E5E5E5">it's actually funny because it's similar</font>

896
00:41:47,890 --> 00:41:52,290
to<font color="#E5E5E5"> the bag that was present in earlier</font>

897
00:41:49,300 --> 00:41:54,460
we can call it several times because<font color="#E5E5E5"> I</font>

898
00:41:52,290 --> 00:41:57,040
said earlier we can send<font color="#E5E5E5"> different</font>

899
00:41:54,460 --> 00:41:58,540
packets to trigger<font color="#E5E5E5"> a free and if we</font>

900
00:41:57,040 --> 00:42:00,770
relocate<font color="#CCCCCC"> we allocate something in</font>

901
00:41:58,540 --> 00:42:02,870
between<font color="#CCCCCC"> we</font><font color="#E5E5E5"> can actually free</font>

902
00:42:00,770 --> 00:42:06,980
it and then relocate<font color="#E5E5E5"> freed so it's like</font>

903
00:42:02,870 --> 00:42:09,770
<font color="#E5E5E5">a very very very strong primitive so</font>

904
00:42:06,980 --> 00:42:11,420
let's say we have our<font color="#E5E5E5"> whole we have our</font>

905
00:42:09,770 --> 00:42:15,110
two<font color="#CCCCCC"> hundred by a two thousand bytes</font>

906
00:42:11,420 --> 00:42:18,890
whole we send our XML<font color="#E5E5E5"> packet</font><font color="#CCCCCC"> it's</font>

907
00:42:15,110 --> 00:42:20,630
<font color="#E5E5E5">allocated</font><font color="#CCCCCC"> into our whole but we we know</font>

908
00:42:18,890 --> 00:42:24,620
it's gonna be freed there is a dangling

909
00:42:20,630 --> 00:42:27,470
pointer now we send a fragment for a

910
00:42:24,620 --> 00:42:29,839
session<font color="#CCCCCC"> okay</font><font color="#E5E5E5"> for now we leave a free</font>

911
00:42:27,470 --> 00:42:31,310
<font color="#CCCCCC">whole I'll explain why later but</font>

912
00:42:29,840 --> 00:42:34,010
basically<font color="#CCCCCC"> the idea is the</font><font color="#E5E5E5"> session</font>

913
00:42:31,310 --> 00:42:36,740
fragment and the<font color="#E5E5E5"> dangling border points</font>

914
00:42:34,010 --> 00:42:39,980
the same memory region now we<font color="#E5E5E5"> sent our</font>

915
00:42:36,740 --> 00:42:42,439
our second external packets<font color="#CCCCCC"> and it's</font>

916
00:42:39,980 --> 00:42:44,780
going<font color="#E5E5E5"> to trigger our</font><font color="#CCCCCC"> repeatable free</font>

917
00:42:42,440 --> 00:42:48,800
primitive it's going to free our actual

918
00:42:44,780 --> 00:42:50,840
<font color="#E5E5E5">IP packets and and now what we can do is</font>

919
00:42:48,800 --> 00:42:53,480
<font color="#E5E5E5">send another fragment from another</font>

920
00:42:50,840 --> 00:42:55,940
session<font color="#E5E5E5"> and confuse our initial pink</font>

921
00:42:53,480 --> 00:42:56,510
fragment<font color="#E5E5E5"> with a purple different</font>

922
00:42:55,940 --> 00:42:58,640
<font color="#E5E5E5">fragment</font>

923
00:42:56,510 --> 00:43:01,760
so now we have an interesting<font color="#E5E5E5"> States</font>

924
00:42:58,640 --> 00:43:06,560
<font color="#E5E5E5">right</font><font color="#CCCCCC"> we have a confusion</font><font color="#E5E5E5"> confuse</font><font color="#CCCCCC"> States</font>

925
00:43:01,760 --> 00:43:09,200
or confuse<font color="#E5E5E5"> fragment in the pink one</font><font color="#CCCCCC"> so</font>

926
00:43:06,560 --> 00:43:11,660
that's<font color="#E5E5E5"> basically what we have so I'm</font>

927
00:43:09,200 --> 00:43:14,810
showing basically<font color="#CCCCCC"> the output of DLL</font>

928
00:43:11,660 --> 00:43:18,980
chunk and it shows you on top you have

929
00:43:14,810 --> 00:43:20,900
<font color="#CCCCCC">the the actual pink one which is the</font>

930
00:43:18,980 --> 00:43:24,500
initial fragment<font color="#E5E5E5"> that we</font><font color="#CCCCCC"> send if like</font>

931
00:43:20,900 --> 00:43:26,840
before freeing it and we can see on top

932
00:43:24,500 --> 00:43:28,400
<font color="#CCCCCC">that</font><font color="#E5E5E5"> it's allocated because</font><font color="#CCCCCC"> it's m4</font>

933
00:43:26,840 --> 00:43:33,860
<font color="#CCCCCC">malloc and</font><font color="#E5E5E5"> then underneath we</font><font color="#CCCCCC"> have</font><font color="#E5E5E5"> a</font>

934
00:43:28,400 --> 00:43:36,110
free<font color="#E5E5E5"> chunk of ten bytes and we can if we</font>

935
00:43:33,860 --> 00:43:37,730
<font color="#E5E5E5">print the actual content of the chunk we</font>

936
00:43:36,110 --> 00:43:41,810
can see that<font color="#E5E5E5"> the payload length of the</font>

937
00:43:37,730 --> 00:43:44,720
IP<font color="#CCCCCC"> header is one fe6</font>

938
00:43:41,810 --> 00:43:46,970
and later<font color="#CCCCCC"> we do out our repeatable free</font>

939
00:43:44,720 --> 00:43:49,459
will relocate<font color="#E5E5E5"> a different chunk from</font>

940
00:43:46,970 --> 00:43:52,910
different session and now we can see<font color="#E5E5E5"> we</font>

941
00:43:49,460 --> 00:43:56,390
replaced it<font color="#E5E5E5"> with payload length of 1</font><font color="#CCCCCC"> f2</font>

942
00:43:52,910 --> 00:43:59,870
<font color="#E5E5E5">and basically what happens is we confuse</font>

943
00:43:56,390 --> 00:44:02,779
the pink<font color="#E5E5E5"> session fragment and we</font>

944
00:43:59,870 --> 00:44:05,150
increase its length<font color="#E5E5E5"> because of</font><font color="#CCCCCC"> the</font>

945
00:44:02,780 --> 00:44:07,640
<font color="#CCCCCC">alignments</font><font color="#E5E5E5"> we just over overrode the</font>

946
00:44:05,150 --> 00:44:09,860
<font color="#E5E5E5">memory with a different length and in in</font>

947
00:44:07,640 --> 00:44:13,100
memory<font color="#CCCCCC"> it thinks the payload length is</font>

948
00:44:09,860 --> 00:44:14,290
<font color="#CCCCCC">different so</font><font color="#E5E5E5"> the trick</font><font color="#CCCCCC"> really here is</font>

949
00:44:13,100 --> 00:44:16,839
really<font color="#E5E5E5"> to to</font>

950
00:44:14,290 --> 00:44:21,820
leave a small<font color="#E5E5E5"> fragment</font><font color="#CCCCCC"> a small</font><font color="#E5E5E5"> sorry a</font>

951
00:44:16,840 --> 00:44:24,400
small free<font color="#CCCCCC"> tank after s1 and we get our</font>

952
00:44:21,820 --> 00:44:27,190
<font color="#E5E5E5">confused</font><font color="#CCCCCC"> pedal length</font><font color="#E5E5E5"> so this is our</font>

953
00:44:24,400 --> 00:44:30,070
<font color="#E5E5E5">third primitive</font><font color="#CCCCCC"> confused fragment length</font>

954
00:44:27,190 --> 00:44:32,490
<font color="#E5E5E5">that we get from the reputable free</font>

955
00:44:30,070 --> 00:44:35,470
primitive from the previous one

956
00:44:32,490 --> 00:44:39,640
our fourth primitive is actually<font color="#CCCCCC"> similar</font>

957
00:44:35,470 --> 00:44:41,799
<font color="#CCCCCC">to what</font><font color="#E5E5E5"> Exodus Intel did to overflow</font><font color="#CCCCCC"> IQ</font>

958
00:44:39,640 --> 00:44:44,950
<font color="#CCCCCC">v1</font><font color="#E5E5E5"> so</font><font color="#CCCCCC"> even though now all the bug</font><font color="#E5E5E5"> that</font>

959
00:44:41,800 --> 00:44:46,810
<font color="#E5E5E5">they found are patched</font><font color="#CCCCCC"> we're</font><font color="#E5E5E5"> gonna</font>

960
00:44:44,950 --> 00:44:49,240
<font color="#E5E5E5">actually use a trick which is quite</font>

961
00:44:46,810 --> 00:44:51,220
similar<font color="#CCCCCC"> the idea is basically to abuse</font>

962
00:44:49,240 --> 00:44:53,319
the previous primitive where we change

963
00:44:51,220 --> 00:44:55,120
<font color="#E5E5E5">the length of a fragment to actually</font>

964
00:44:53,320 --> 00:44:58,990
overflows<font color="#E5E5E5"> a memory when we read some of</font>

965
00:44:55,120 --> 00:45:01,319
<font color="#E5E5E5">the packets so again the reassembly</font><font color="#CCCCCC"> the</font>

966
00:44:58,990 --> 00:45:04,390
number one is<font color="#CCCCCC"> to send different</font>

967
00:45:01,320 --> 00:45:06,550
fragments<font color="#CCCCCC"> and reassemble them</font><font color="#E5E5E5"> into the</font>

968
00:45:04,390 --> 00:45:08,680
actual reassemble<font color="#CCCCCC"> packet but you know in</font>

969
00:45:06,550 --> 00:45:11,320
our<font color="#E5E5E5"> case what we want to do is basically</font>

970
00:45:08,680 --> 00:45:14,290
send our fragment<font color="#CCCCCC"> like the normal way</font>

971
00:45:11,320 --> 00:45:18,100
<font color="#E5E5E5">okay it's going</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> update the reasonable</font>

972
00:45:14,290 --> 00:45:21,130
length<font color="#E5E5E5"> in memory and now that the length</font>

973
00:45:18,100 --> 00:45:24,730
is computed<font color="#E5E5E5"> basically what we want is</font>

974
00:45:21,130 --> 00:45:26,500
what<font color="#E5E5E5"> we want to increase</font><font color="#CCCCCC"> the length of</font>

975
00:45:24,730 --> 00:45:28,660
one<font color="#E5E5E5"> of the</font><font color="#CCCCCC"> fragments</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> what's</font><font color="#E5E5E5"> going to</font>

976
00:45:26,500 --> 00:45:31,870
<font color="#CCCCCC">happen is it's gonna reassemble the</font>

977
00:45:28,660 --> 00:45:34,540
packets<font color="#E5E5E5"> with a fixed size which capital</font>

978
00:45:31,870 --> 00:45:36,040
<font color="#E5E5E5">n is n plus n plus P but then is going</font>

979
00:45:34,540 --> 00:45:37,840
to copy the different fragments<font color="#E5E5E5"> but one</font>

980
00:45:36,040 --> 00:45:42,090
of them<font color="#CCCCCC"> is</font><font color="#E5E5E5"> larger and we end up</font>

981
00:45:37,840 --> 00:45:44,950
overflowing some memory on the heap and

982
00:45:42,090 --> 00:45:46,390
<font color="#E5E5E5">doing a heap overflow so that's our</font>

983
00:45:44,950 --> 00:45:47,049
fourth primitive which is overflowing

984
00:45:46,390 --> 00:45:49,270
<font color="#CCCCCC">the</font><font color="#E5E5E5"> heap</font>

985
00:45:47,050 --> 00:45:52,630
what is interesting<font color="#E5E5E5"> is actually</font><font color="#CCCCCC"> there is</font>

986
00:45:49,270 --> 00:45:54,250
a check when they actually copy the

987
00:45:52,630 --> 00:45:55,600
different fragments like when when they

988
00:45:54,250 --> 00:45:57,220
actually copy the fragment they check

989
00:45:55,600 --> 00:46:00,130
that it doesn't overflow the reassemble

990
00:45:57,220 --> 00:46:02,770
length but the check is incomplete

991
00:46:00,130 --> 00:46:04,300
because<font color="#E5E5E5"> of some alignments and the</font>

992
00:46:02,770 --> 00:46:06,850
structure that<font color="#CCCCCC"> they take</font><font color="#E5E5E5"> into account</font>

993
00:46:04,300 --> 00:46:08,920
that<font color="#CCCCCC"> it shouldn't have done we</font><font color="#E5E5E5"> end up</font>

994
00:46:06,850 --> 00:46:12,490
having<font color="#E5E5E5"> this capability to actually</font>

995
00:46:08,920 --> 00:46:15,100
<font color="#E5E5E5">overflow up to 16 to 18 bytes so that's</font>

996
00:46:12,490 --> 00:46:18,419
good<font color="#E5E5E5"> enough</font><font color="#CCCCCC"> for us we we are able to</font>

997
00:46:15,100 --> 00:46:18,420
<font color="#E5E5E5">corrupt some adjacent memory</font>

998
00:46:24,390 --> 00:46:32,680
so I'm<font color="#E5E5E5"> gonna do a</font><font color="#CCCCCC"> demo going to try to</font>

999
00:46:28,299 --> 00:46:36,069
exploit this<font color="#CCCCCC"> si</font><font color="#E5E5E5"> 505 that only has 25</font><font color="#CCCCCC"> I</font>

1000
00:46:32,680 --> 00:46:37,930
<font color="#E5E5E5">key sessions live I do have a video it</font>

1001
00:46:36,069 --> 00:46:40,239
<font color="#E5E5E5">doesn't work it's not one person</font>

1002
00:46:37,930 --> 00:46:43,720
reliable<font color="#E5E5E5"> but before I'm just</font><font color="#CCCCCC"> gonna show</font>

1003
00:46:40,239 --> 00:46:46,869
you the different steps<font color="#CCCCCC"> to summarize</font><font color="#E5E5E5"> so</font>

1004
00:46:43,720 --> 00:46:48,399
the idea is we want<font color="#CCCCCC"> to</font><font color="#E5E5E5"> use different IQ</font>

1005
00:46:46,869 --> 00:46:50,739
one session<font color="#CCCCCC"> okay</font>

1006
00:46:48,400 --> 00:46:53,229
so on the right on top on the top right

1007
00:46:50,739 --> 00:46:55,390
<font color="#E5E5E5">side</font><font color="#CCCCCC"> we're gonna have the different</font>

1008
00:46:53,229 --> 00:46:56,379
sessions<font color="#E5E5E5"> with different colors to say</font>

1009
00:46:55,390 --> 00:46:59,200
that there are part of<font color="#E5E5E5"> different</font>

1010
00:46:56,380 --> 00:47:01,479
sessions at<font color="#E5E5E5"> the bottom left we have</font>

1011
00:46:59,200 --> 00:47:03,339
<font color="#CCCCCC">sorry on the</font><font color="#E5E5E5"> bottom right we</font><font color="#CCCCCC"> have the</font>

1012
00:47:01,479 --> 00:47:05,859
heap<font color="#E5E5E5"> different things going on the heat</font>

1013
00:47:03,339 --> 00:47:08,140
somewhere<font color="#E5E5E5"> on the heap and on the bottom</font>

1014
00:47:05,859 --> 00:47:09,819
left<font color="#E5E5E5"> we have somewhere where</font><font color="#CCCCCC"> we have</font>

1015
00:47:08,140 --> 00:47:13,390
some adjacency that's where we're doing

1016
00:47:09,819 --> 00:47:16,210
our<font color="#E5E5E5"> feng shui so we sent a bunch of IP</font>

1017
00:47:13,390 --> 00:47:19,078
fragments which are<font color="#E5E5E5"> to fill all the hole</font>

1018
00:47:16,210 --> 00:47:23,739
in blue and then we send different

1019
00:47:19,079 --> 00:47:26,739
fragments<font color="#CCCCCC"> adjacent because</font><font color="#E5E5E5"> we filled all</font>

1020
00:47:23,739 --> 00:47:29,229
<font color="#CCCCCC">the hole</font><font color="#E5E5E5"> that's going to be allocated on</font>

1021
00:47:26,739 --> 00:47:32,710
this that are<font color="#E5E5E5"> part of the same session</font>

1022
00:47:29,229 --> 00:47:34,210
so I'm using a green to indicate session

1023
00:47:32,710 --> 00:47:36,309
that's<font color="#E5E5E5"> going to be used later to create</font>

1024
00:47:34,210 --> 00:47:38,710
<font color="#CCCCCC">a</font><font color="#E5E5E5"> hole and here I'm</font><font color="#CCCCCC"> using for them</font>

1025
00:47:36,309 --> 00:47:41,259
because<font color="#CCCCCC"> 4 times 800 gives</font><font color="#E5E5E5"> two thousand</font>

1026
00:47:38,710 --> 00:47:43,630
bytes which is the size of the reputable

1027
00:47:41,259 --> 00:47:45,849
free primitive<font color="#E5E5E5"> so I want to create later</font>

1028
00:47:43,630 --> 00:47:49,839
2000 bytes<font color="#E5E5E5"> but when I'm just sending</font>

1029
00:47:45,849 --> 00:47:52,029
different<font color="#E5E5E5"> fragments that can be adjusted</font>

1030
00:47:49,839 --> 00:47:54,489
on<font color="#E5E5E5"> the heat and here I'm create I'm</font>

1031
00:47:52,029 --> 00:47:56,469
sending from<font color="#E5E5E5"> another whole creation</font>

1032
00:47:54,489 --> 00:48:00,369
session like another green<font color="#E5E5E5"> not the same</font>

1033
00:47:56,469 --> 00:48:03,339
as the<font color="#CCCCCC"> j1 but with like</font><font color="#E5E5E5"> five of them I'm</font>

1034
00:48:00,369 --> 00:48:05,259
gonna we're gonna see why and basically

1035
00:48:03,339 --> 00:48:08,769
the the<font color="#E5E5E5"> k1 are going is going to be used</font>

1036
00:48:05,259 --> 00:48:09,880
for<font color="#CCCCCC"> the reassemble packets</font><font color="#E5E5E5"> and because</font>

1037
00:48:08,769 --> 00:48:12,038
it's<font color="#CCCCCC"> gonna</font><font color="#E5E5E5"> be used</font><font color="#CCCCCC"> for the reassemble</font>

1038
00:48:09,880 --> 00:48:13,989
packet and we're going<font color="#CCCCCC"> to</font><font color="#E5E5E5"> overflow</font><font color="#CCCCCC"> the</font>

1039
00:48:12,039 --> 00:48:15,519
<font color="#E5E5E5">memory then we send different fragments</font>

1040
00:48:13,989 --> 00:48:18,519
<font color="#CCCCCC">that's going</font><font color="#E5E5E5"> to be basically our</font>

1041
00:48:15,519 --> 00:48:20,468
fragment<font color="#E5E5E5"> that we</font><font color="#CCCCCC"> target to</font><font color="#E5E5E5"> corrupt the</font>

1042
00:48:18,519 --> 00:48:22,589
<font color="#E5E5E5">linked list pointers to trigger our</font>

1043
00:48:20,469 --> 00:48:25,920
<font color="#E5E5E5">millwrights</font>

1044
00:48:22,589 --> 00:48:28,749
<font color="#CCCCCC">okay so we have this layout and because</font>

1045
00:48:25,920 --> 00:48:31,250
we want<font color="#CCCCCC"> to check</font><font color="#E5E5E5"> that it works we use</font>

1046
00:48:28,749 --> 00:48:33,049
the<font color="#E5E5E5"> DLL chunk to show that</font>

1047
00:48:31,250 --> 00:48:37,280
we have the layout<font color="#E5E5E5"> we want so if you</font>

1048
00:48:33,050 --> 00:48:39,650
don't want to<font color="#E5E5E5"> follow the actual tool I'm</font>

1049
00:48:37,280 --> 00:48:43,910
gonna show at some point the output<font color="#CCCCCC"> that</font>

1050
00:48:39,650 --> 00:48:46,670
<font color="#E5E5E5">our our tool shows us so we can debug</font>

1051
00:48:43,910 --> 00:48:48,620
the actual<font color="#CCCCCC"> feng shui but</font><font color="#E5E5E5"> basically this</font>

1052
00:48:46,670 --> 00:48:51,290
is quite handy<font color="#CCCCCC"> I mean at least I think</font>

1053
00:48:48,620 --> 00:48:52,460
to show that our<font color="#CCCCCC"> French reworks and we</font>

1054
00:48:51,290 --> 00:48:56,660
have the actual layout that we were

1055
00:48:52,460 --> 00:48:59,060
expecting I'm using -<font color="#E5E5E5"> P to indicate that</font>

1056
00:48:56,660 --> 00:49:01,399
<font color="#CCCCCC">is going to show the</font><font color="#E5E5E5"> actual content of</font>

1057
00:48:59,060 --> 00:49:03,440
the of the chunk and that's why we see

1058
00:49:01,400 --> 00:49:05,570
<font color="#E5E5E5">the AI jajay because we're actually</font>

1059
00:49:03,440 --> 00:49:10,600
showing the actual content of<font color="#E5E5E5"> the actual</font>

1060
00:49:05,570 --> 00:49:14,240
<font color="#E5E5E5">chunk so now we are going to</font><font color="#CCCCCC"> or do</font><font color="#E5E5E5"> our</font>

1061
00:49:10,600 --> 00:49:17,390
exploits so we send our last fragment

1062
00:49:14,240 --> 00:49:20,180
<font color="#E5E5E5">for the</font><font color="#CCCCCC"> J session and it's gonna</font>

1063
00:49:17,390 --> 00:49:22,520
basically reassemble the<font color="#CCCCCC"> J's session</font>

1064
00:49:20,180 --> 00:49:26,450
<font color="#E5E5E5">it's gonna create a 2000 by chunk which</font>

1065
00:49:22,520 --> 00:49:28,970
is which is which is free<font color="#E5E5E5"> because</font>

1066
00:49:26,450 --> 00:49:31,939
reassembly occurred so we<font color="#E5E5E5"> can see in</font>

1067
00:49:28,970 --> 00:49:34,069
bold<font color="#CCCCCC"> it's a free 2000 by chunk and now</font>

1068
00:49:31,940 --> 00:49:38,990
we're sending our<font color="#E5E5E5"> XML</font><font color="#CCCCCC"> packet it's</font><font color="#E5E5E5"> gonna</font>

1069
00:49:34,070 --> 00:49:41,360
fill the<font color="#E5E5E5"> hole because because it fits</font>

1070
00:49:38,990 --> 00:49:43,910
the<font color="#CCCCCC"> size and now it's going to free the</font>

1071
00:49:41,360 --> 00:49:46,520
<font color="#E5E5E5">chunk as well you do to the free at the</font>

1072
00:49:43,910 --> 00:49:49,000
<font color="#CCCCCC">end of the handling now we sang our</font>

1073
00:49:46,520 --> 00:49:51,200
first fragment<font color="#E5E5E5"> into a different session</font>

1074
00:49:49,000 --> 00:49:54,770
<font color="#E5E5E5">and that's</font><font color="#CCCCCC"> going</font><font color="#E5E5E5"> to be the one want to</font>

1075
00:49:51,200 --> 00:49:57,529
correct<font color="#CCCCCC"> it has a free tank</font><font color="#E5E5E5"> after because</font>

1076
00:49:54,770 --> 00:49:58,910
it's smaller than<font color="#CCCCCC"> the</font><font color="#E5E5E5"> actual</font><font color="#CCCCCC"> check and</font>

1077
00:49:57,530 --> 00:50:02,600
then we trigger<font color="#E5E5E5"> our repeatable free</font>

1078
00:49:58,910 --> 00:50:05,299
primitive to free the actual fragment

1079
00:50:02,600 --> 00:50:08,089
<font color="#CCCCCC">that we just send so we see it's freed</font>

1080
00:50:05,300 --> 00:50:10,520
now and what we do is we<font color="#E5E5E5"> send our</font>

1081
00:50:08,090 --> 00:50:11,870
replacement fragment to overwrite<font color="#E5E5E5"> the</font>

1082
00:50:10,520 --> 00:50:15,500
previous fragment and we've corrupted

1083
00:50:11,870 --> 00:50:18,109
the actual session fragment<font color="#E5E5E5"> and this is</font>

1084
00:50:15,500 --> 00:50:20,300
the payload<font color="#E5E5E5"> length I showed</font><font color="#CCCCCC"> earlier so</font>

1085
00:50:18,110 --> 00:50:23,330
<font color="#CCCCCC">now we basically</font><font color="#E5E5E5"> collected the length of</font>

1086
00:50:20,300 --> 00:50:25,250
s1<font color="#E5E5E5"> with like the actual length of s</font><font color="#CCCCCC"> too</font>

1087
00:50:23,330 --> 00:50:28,220
so it's increased and<font color="#E5E5E5"> now what we want</font>

1088
00:50:25,250 --> 00:50:29,840
<font color="#CCCCCC">is trick trigger reassembly of the</font>

1089
00:50:28,220 --> 00:50:31,759
session<font color="#CCCCCC"> one but we need to create</font><font color="#E5E5E5"> a hole</font>

1090
00:50:29,840 --> 00:50:33,590
first so we reassemble the<font color="#CCCCCC"> que session</font>

1091
00:50:31,760 --> 00:50:35,570
which is<font color="#E5E5E5"> two thousand and eight hundred</font>

1092
00:50:33,590 --> 00:50:36,740
bytes and<font color="#E5E5E5"> it goes and basically</font><font color="#CCCCCC"> created</font>

1093
00:50:35,570 --> 00:50:40,910
two thousand<font color="#CCCCCC"> and eight hundred bytes</font>

1094
00:50:36,740 --> 00:50:42,560
<font color="#CCCCCC">hole so now what we do is</font><font color="#E5E5E5"> we reassemble</font>

1095
00:50:40,910 --> 00:50:44,450
at<font color="#CCCCCC"> first the session number</font><font color="#E5E5E5"> one and</font>

1096
00:50:42,560 --> 00:50:46,940
because we increased the

1097
00:50:44,450 --> 00:50:48,710
the size of one<font color="#E5E5E5"> of the strengths the</font>

1098
00:50:46,940 --> 00:50:51,319
actual buffer that's gonna be<font color="#CCCCCC"> reassemble</font>

1099
00:50:48,710 --> 00:50:53,480
<font color="#E5E5E5">that's going to be smaller that's what's</font>

1100
00:50:51,319 --> 00:50:56,630
going to<font color="#E5E5E5"> be actually copied so we're</font>

1101
00:50:53,480 --> 00:50:58,190
<font color="#E5E5E5">going</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> end up allocating a free so</font>

1102
00:50:56,630 --> 00:50:59,779
sorry we're<font color="#E5E5E5"> going to end up allocating a</font>

1103
00:50:58,190 --> 00:51:01,999
buffer which<font color="#CCCCCC"> is smaller that's what</font>

1104
00:50:59,779 --> 00:51:05,269
we're going to copy and<font color="#E5E5E5"> we end up being</font>

1105
00:51:01,999 --> 00:51:07,249
<font color="#E5E5E5">able to</font><font color="#CCCCCC"> corrupt the the free</font><font color="#E5E5E5"> chunk which</font>

1106
00:51:05,269 --> 00:51:10,008
is right<font color="#E5E5E5"> after and basically increase</font>

1107
00:51:07,249 --> 00:51:11,959
its size from 30 bytes to 2/3 to

1108
00:51:10,009 --> 00:51:14,690
whatever<font color="#E5E5E5"> we want because we control the</font>

1109
00:51:11,960 --> 00:51:17,420
data we<font color="#CCCCCC"> want to</font><font color="#E5E5E5"> do that we use to curb</font>

1110
00:51:14,690 --> 00:51:19,880
this chunk so now basically<font color="#E5E5E5"> what we have</font>

1111
00:51:17,420 --> 00:51:22,400
if we<font color="#E5E5E5"> have a free chunk which was</font>

1112
00:51:19,880 --> 00:51:24,109
increased<font color="#E5E5E5"> in size and because the real</font>

1113
00:51:22,400 --> 00:51:29,089
<font color="#E5E5E5">small packets is going to be</font><font color="#CCCCCC"> freed</font>

1114
00:51:24,109 --> 00:51:30,890
because it's not valid<font color="#E5E5E5"> data they are</font>

1115
00:51:29,089 --> 00:51:34,880
going<font color="#E5E5E5"> to be call us together</font><font color="#CCCCCC"> like the</font>

1116
00:51:30,890 --> 00:51:36,980
the one in pink and the the<font color="#E5E5E5"> adjacent</font>

1117
00:51:34,880 --> 00:51:38,900
free chain so we<font color="#E5E5E5"> end up having two</font>

1118
00:51:36,980 --> 00:51:43,160
thousand eight hundred plus two thousand

1119
00:51:38,900 --> 00:51:45,019
and<font color="#E5E5E5"> we'd end up having</font><font color="#CCCCCC"> 4800 bytes which</font>

1120
00:51:43,160 --> 00:51:47,598
basically<font color="#CCCCCC"> encompasses the following</font>

1121
00:51:45,019 --> 00:51:51,379
chunk and<font color="#E5E5E5"> basically here we win because</font>

1122
00:51:47,599 --> 00:51:55,279
we can replace this whole with like

1123
00:51:51,380 --> 00:51:57,769
control data from another<font color="#E5E5E5"> IP</font><font color="#CCCCCC"> sessions</font>

1124
00:51:55,279 --> 00:52:01,039
hence the<font color="#CCCCCC"> robin hood</font><font color="#E5E5E5"> technique but</font>

1125
00:51:57,769 --> 00:52:04,008
basically we corrupt<font color="#E5E5E5"> all the adjacent</font>

1126
00:52:01,039 --> 00:52:05,960
<font color="#E5E5E5">chunks and we</font><font color="#CCCCCC"> called all the maple</font>

1127
00:52:04,009 --> 00:52:08,749
header and all the linked<font color="#E5E5E5"> list pointers</font>

1128
00:52:05,960 --> 00:52:11,779
and we can basically have a mirror<font color="#E5E5E5"> ID</font>

1129
00:52:08,749 --> 00:52:14,209
primitive from now on<font color="#E5E5E5"> so let's get our</font>

1130
00:52:11,779 --> 00:52:16,339
me right<font color="#E5E5E5"> we send the</font><font color="#CCCCCC"> last fragment to</font>

1131
00:52:14,210 --> 00:52:18,440
reassemble<font color="#E5E5E5"> the different session so we</font>

1132
00:52:16,339 --> 00:52:20,210
assembled the<font color="#CCCCCC"> p session it's going to</font>

1133
00:52:18,440 --> 00:52:22,190
<font color="#E5E5E5">trigger the first me right so the first</font>

1134
00:52:20,210 --> 00:52:24,619
<font color="#E5E5E5">thing</font><font color="#CCCCCC"> we do is with this double check</font>

1135
00:52:22,190 --> 00:52:26,390
hips<font color="#E5E5E5"> the reason we</font><font color="#CCCCCC"> disable check hips</font><font color="#E5E5E5"> is</font>

1136
00:52:24,619 --> 00:52:28,880
because there<font color="#E5E5E5"> is a mechanism that check</font>

1137
00:52:26,390 --> 00:52:33,470
the heap and disabling it allows<font color="#CCCCCC"> us just</font>

1138
00:52:28,880 --> 00:52:35,989
to make sure<font color="#E5E5E5"> it's not</font><font color="#CCCCCC"> going to stop us</font>

1139
00:52:33,470 --> 00:52:40,098
<font color="#CCCCCC">from the exploit</font><font color="#E5E5E5"> and we just reboot the</font>

1140
00:52:35,989 --> 00:52:42,319
<font color="#CCCCCC">router then we send three</font><font color="#E5E5E5"> of them and</font>

1141
00:52:40,099 --> 00:52:46,279
the idea<font color="#E5E5E5"> is to</font><font color="#CCCCCC"> actually write</font><font color="#E5E5E5"> a</font>

1142
00:52:42,319 --> 00:52:51,650
trampoline<font color="#CCCCCC"> somewhere in memory to give</font>

1143
00:52:46,279 --> 00:52:55,880
us a way<font color="#E5E5E5"> to execute some kind of shell</font>

1144
00:52:51,650 --> 00:52:58,170
code and the last one we use basically

1145
00:52:55,880 --> 00:53:00,570
<font color="#CCCCCC">it's to override</font><font color="#E5E5E5"> a function</font>

1146
00:52:58,170 --> 00:53:03,170
that's going<font color="#E5E5E5"> to be used the next time</font>

1147
00:53:00,570 --> 00:53:05,460
you want<font color="#CCCCCC"> to initiate</font><font color="#E5E5E5"> a Nike session</font>

1148
00:53:03,170 --> 00:53:09,630
<font color="#CCCCCC">because then we can basically send</font><font color="#E5E5E5"> an</font>

1149
00:53:05,460 --> 00:53:11,390
Nike session and get a<font color="#E5E5E5"> codex</font><font color="#CCCCCC"> egg so the</font>

1150
00:53:09,630 --> 00:53:15,150
idea is we code this function pointer

1151
00:53:11,390 --> 00:53:17,339
<font color="#E5E5E5">and now we can send our</font><font color="#CCCCCC"> I key in it</font>

1152
00:53:15,150 --> 00:53:19,200
<font color="#CCCCCC">packet</font><font color="#E5E5E5"> it's going to basically go</font>

1153
00:53:17,340 --> 00:53:21,810
through<font color="#E5E5E5"> the</font><font color="#CCCCCC"> parsing through</font><font color="#E5E5E5"> this</font>

1154
00:53:19,200 --> 00:53:22,799
<font color="#E5E5E5">function that we patched it so we're</font>

1155
00:53:21,810 --> 00:53:25,580
gonna<font color="#E5E5E5"> basically go through our</font>

1156
00:53:22,800 --> 00:53:28,440
trampoline<font color="#E5E5E5"> and now basically it's gonna</font>

1157
00:53:25,580 --> 00:53:31,740
with a bunch of the reference<font color="#E5E5E5"> month to</font>

1158
00:53:28,440 --> 00:53:39,180
to<font color="#E5E5E5"> basically jump to to our packets and</font>

1159
00:53:31,740 --> 00:53:41,810
execute<font color="#E5E5E5"> our packets and</font><font color="#CCCCCC"> we'll be so I</font>

1160
00:53:39,180 --> 00:53:41,810
have a demo

1161
00:54:00,390 --> 00:54:04,160
<font color="#E5E5E5">okay so</font>

1162
00:54:05,320 --> 00:54:09,710
so on the right I have<font color="#E5E5E5"> the yet both are</font>

1163
00:54:08,960 --> 00:54:13,190
<font color="#CCCCCC">the attacker</font>

1164
00:54:09,710 --> 00:54:19,640
<font color="#E5E5E5">I'm remote and basically so I'm checking</font>

1165
00:54:13,190 --> 00:54:25,280
the<font color="#CCCCCC"> router is alive and now I'm gonna</font>

1166
00:54:19,640 --> 00:54:27,350
trigger<font color="#E5E5E5"> the</font><font color="#CCCCCC"> exploit and on the right I</font>

1167
00:54:25,280 --> 00:54:31,000
<font color="#CCCCCC">have a shell waiting for me to connect</font>

1168
00:54:27,350 --> 00:54:31,000
and I have a show

1169
00:54:57,940 --> 00:55:03,500
so I'm not going to<font color="#E5E5E5"> talk about that but</font>

1170
00:55:00,260 --> 00:55:06,230
<font color="#E5E5E5">before actually working this way I tried</font>

1171
00:55:03,500 --> 00:55:08,750
a bunch<font color="#CCCCCC"> of other techniques which didn't</font>

1172
00:55:06,230 --> 00:55:12,230
work<font color="#E5E5E5"> which I documented in the slide if</font>

1173
00:55:08,750 --> 00:55:14,000
you're interested in<font color="#E5E5E5"> but basically the</font>

1174
00:55:12,230 --> 00:55:15,560
interesting thing is it took<font color="#E5E5E5"> me</font>

1175
00:55:14,000 --> 00:55:18,110
basically<font color="#E5E5E5"> two weeks</font><font color="#CCCCCC"> to actually</font><font color="#E5E5E5"> build</font>

1176
00:55:15,560 --> 00:55:19,640
the exploits but obviously it took me

1177
00:55:18,110 --> 00:55:22,460
months before<font color="#CCCCCC"> to actually</font><font color="#E5E5E5"> write the tool</font>

1178
00:55:19,640 --> 00:55:26,990
that helped me<font color="#E5E5E5"> understanding the layout</font>

1179
00:55:22,460 --> 00:55:30,920
<font color="#E5E5E5">and stuff before so just</font><font color="#CCCCCC"> as a conclusion</font>

1180
00:55:26,990 --> 00:55:33,979
what do we learn from<font color="#CCCCCC"> that so the</font>

1181
00:55:30,920 --> 00:55:36,700
interesting<font color="#CCCCCC"> thing is at first I was</font>

1182
00:55:33,980 --> 00:55:39,170
trying<font color="#E5E5E5"> to do some fuzzy but actually I</font>

1183
00:55:36,700 --> 00:55:40,609
find<font color="#E5E5E5"> it a little bit lame to call it</font>

1184
00:55:39,170 --> 00:55:42,830
<font color="#CCCCCC">fuzzing</font><font color="#E5E5E5"> because it was just</font><font color="#CCCCCC"> sending the</font>

1185
00:55:40,610 --> 00:55:44,150
actual tag that it was supported would

1186
00:55:42,830 --> 00:55:46,880
have been enough to actually<font color="#E5E5E5"> find the</font>

1187
00:55:44,150 --> 00:55:51,050
<font color="#CCCCCC">bug so in our</font><font color="#E5E5E5"> case Radames</font><font color="#CCCCCC"> a-- was</font>

1188
00:55:46,880 --> 00:55:53,930
useless<font color="#CCCCCC"> the exploit currently works on</font>

1189
00:55:51,050 --> 00:55:56,720
32-bit<font color="#E5E5E5"> it would be easy to port on</font>

1190
00:55:53,930 --> 00:55:58,940
<font color="#E5E5E5">64-bit for the same versions that don't</font>

1191
00:55:56,720 --> 00:56:01,850
have an X<font color="#CCCCCC"> and a SLR</font>

1192
00:55:58,940 --> 00:56:04,330
it's the challenges is more complicated

1193
00:56:01,850 --> 00:56:08,890
<font color="#CCCCCC">with a SLR</font><font color="#E5E5E5"> because you need to remotely</font>

1194
00:56:04,330 --> 00:56:12,590
<font color="#CCCCCC">bypass SLR even though I have some ideas</font>

1195
00:56:08,890 --> 00:56:15,290
<font color="#CCCCCC">it's in a seven-year-old bag</font>

1196
00:56:12,590 --> 00:56:17,390
I don't know what you think<font color="#E5E5E5"> but</font><font color="#CCCCCC"> for me</font>

1197
00:56:15,290 --> 00:56:19,400
it means<font color="#E5E5E5"> nobody looked at it because</font><font color="#CCCCCC"> I</font>

1198
00:56:17,390 --> 00:56:26,960
was quite<font color="#CCCCCC"> lucky to actually find this</font>

1199
00:56:19,400 --> 00:56:29,030
bug by just<font color="#E5E5E5"> trying things and</font><font color="#CCCCCC"> one thing</font>

1200
00:56:26,960 --> 00:56:32,120
I<font color="#E5E5E5"> learned from it is</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> IQ v1 is</font>

1201
00:56:29,030 --> 00:56:35,360
really powerful<font color="#E5E5E5"> in order to leverage</font>

1202
00:56:32,120 --> 00:56:37,700
<font color="#E5E5E5">interesting States on the heap and to do</font>

1203
00:56:35,360 --> 00:56:41,150
something<font color="#CCCCCC"> shree I am even</font><font color="#E5E5E5"> though it's</font>

1204
00:56:37,700 --> 00:56:44,509
not<font color="#CCCCCC"> 100 percent reliable it works quite</font>

1205
00:56:41,150 --> 00:56:47,210
<font color="#E5E5E5">nice especially that</font><font color="#CCCCCC"> cisco a say if it</font>

1206
00:56:44,510 --> 00:56:50,240
crashes<font color="#E5E5E5"> basically it's going to reboot</font>

1207
00:56:47,210 --> 00:56:52,150
and then you get<font color="#E5E5E5"> basically a fresh state</font>

1208
00:56:50,240 --> 00:56:59,330
where you know it's<font color="#E5E5E5"> going to work</font><font color="#CCCCCC"> like</font>

1209
00:56:52,150 --> 00:57:01,340
99.99 percent so like<font color="#CCCCCC"> I said I've used</font>

1210
00:56:59,330 --> 00:57:04,009
web<font color="#CCCCCC"> PPN for the actual bug but I've used</font>

1211
00:57:01,340 --> 00:57:05,540
<font color="#E5E5E5">itv1 for the X like for the sanctuary so</font>

1212
00:57:04,010 --> 00:57:08,720
it would<font color="#E5E5E5"> be nice</font><font color="#CCCCCC"> to see if it's possible</font>

1213
00:57:05,540 --> 00:57:11,150
<font color="#CCCCCC">to actually exploit it just using web</font><font color="#E5E5E5"> DP</font>

1214
00:57:08,720 --> 00:57:13,250
and only and now that

1215
00:57:11,150 --> 00:57:15,380
<font color="#CCCCCC">sisqó told her that there are other</font>

1216
00:57:13,250 --> 00:57:16,370
attack vector<font color="#E5E5E5"> actually having it working</font>

1217
00:57:15,380 --> 00:57:21,020
just on itv2

1218
00:57:16,370 --> 00:57:25,940
would be<font color="#CCCCCC"> maybe good and the</font><font color="#E5E5E5"> last thing</font>

1219
00:57:21,020 --> 00:57:28,700
is for the next steps is basically the

1220
00:57:25,940 --> 00:57:30,560
this double<font color="#E5E5E5"> like this repeatable free</font>

1221
00:57:28,700 --> 00:57:32,419
primitive is very<font color="#E5E5E5"> powerful because we</font>

1222
00:57:30,560 --> 00:57:37,490
can call it several times and a<font color="#E5E5E5"> little</font>

1223
00:57:32,420 --> 00:57:39,290
bit like what<font color="#CCCCCC"> the</font><font color="#E5E5E5"> GDI guys did before it</font>

1224
00:57:37,490 --> 00:57:41,540
would<font color="#E5E5E5"> be nice</font><font color="#CCCCCC"> to use this repeatable</font>

1225
00:57:39,290 --> 00:57:47,990
free to<font color="#E5E5E5"> basically get a leak</font><font color="#CCCCCC"> back and</font>

1226
00:57:41,540 --> 00:57:53,410
bypass<font color="#CCCCCC"> aslr remotely and maybe find</font>

1227
00:57:47,990 --> 00:57:56,740
other bugs like using<font color="#E5E5E5"> real fuzzy so just</font>

1228
00:57:53,410 --> 00:57:59,210
if you want<font color="#E5E5E5"> to protect against</font><font color="#CCCCCC"> zero</font><font color="#E5E5E5"> days</font>

1229
00:57:56,740 --> 00:58:01,850
or if you just<font color="#E5E5E5"> want to advise your</font>

1230
00:57:59,210 --> 00:58:05,120
clients what to use<font color="#E5E5E5"> just use the one in</font>

1231
00:58:01,850 --> 00:58:06,650
<font color="#CCCCCC">green just stick on the diversion with a</font>

1232
00:58:05,120 --> 00:58:09,040
<font color="#E5E5E5">SL</font><font color="#CCCCCC"> rnx</font>

1233
00:58:06,650 --> 00:58:12,560
[Music]

1234
00:58:09,040 --> 00:58:16,310
this one<font color="#E5E5E5"> make</font><font color="#CCCCCC"> sure your patch to this</font>

1235
00:58:12,560 --> 00:58:17,950
<font color="#E5E5E5">bag if you want yeah I want to thank my</font>

1236
00:58:16,310 --> 00:58:21,230
colleague who had developing the tools

1237
00:58:17,950 --> 00:58:23,330
search for<font color="#E5E5E5"> Cisco search for Helen B's</font>

1238
00:58:21,230 --> 00:58:26,000
<font color="#E5E5E5">lots of people for providing feedbacks</font>

1239
00:58:23,330 --> 00:58:28,340
for my previous<font color="#E5E5E5"> presentation so I could</font>

1240
00:58:26,000 --> 00:58:31,450
improve it for<font color="#E5E5E5"> this one and thank you</font>

1241
00:58:28,340 --> 00:58:31,450
<font color="#CCCCCC">very much if you</font><font color="#E5E5E5"> have any question</font>

1242
00:58:31,750 --> 00:58:38,220
[Applause]

1243
00:58:35,660 --> 00:58:47,810
not sure we have<font color="#E5E5E5"> much time</font><font color="#CCCCCC"> for questions</font>

1244
00:58:38,220 --> 00:58:50,459
<font color="#E5E5E5">by the way okay</font><font color="#CCCCCC"> I have a question yeah</font>

1245
00:58:47,810 --> 00:58:53,369
<font color="#E5E5E5">my question is first of all we know that</font>

1246
00:58:50,460 --> 00:58:57,150
<font color="#CCCCCC">Cisco doesn't do bug bounty no they</font>

1247
00:58:53,369 --> 00:59:02,520
don't<font color="#CCCCCC"> and we know</font><font color="#E5E5E5"> that the bugs that we</font>

1248
00:58:57,150 --> 00:59:04,200
probably can cannot sell to<font color="#E5E5E5"> zero diem do</font>

1249
00:59:02,520 --> 00:59:06,450
we know the price or do they even buy

1250
00:59:04,200 --> 00:59:09,330
Cisco's bugs<font color="#CCCCCC"> I would be interested to</font>

1251
00:59:06,450 --> 00:59:12,060
<font color="#CCCCCC">know</font><font color="#E5E5E5"> I don't know and I think the answer</font>

1252
00:59:09,330 --> 00:59:14,790
is<font color="#E5E5E5"> no</font><font color="#CCCCCC"> they don't buy either</font><font color="#E5E5E5"> so we don't</font>

1253
00:59:12,060 --> 00:59:15,869
<font color="#E5E5E5">have yes I don't</font><font color="#CCCCCC"> know yeah okay that's</font>

1254
00:59:14,790 --> 00:59:16,410
<font color="#E5E5E5">that's all right maybe they do maybe</font>

1255
00:59:15,869 --> 00:59:19,800
they<font color="#CCCCCC"> don't</font>

1256
00:59:16,410 --> 00:59:22,560
so the question is if they<font color="#E5E5E5"> don't buy and</font>

1257
00:59:19,800 --> 00:59:26,310
Cisco doesn't do bug bounty and<font color="#E5E5E5"> we are</font>

1258
00:59:22,560 --> 00:59:28,259
at<font color="#CCCCCC"> unoffensive con the only I mean as to</font>

1259
00:59:26,310 --> 00:59:30,180
what I see the only<font color="#E5E5E5"> outcome to us</font>

1260
00:59:28,260 --> 00:59:33,000
<font color="#E5E5E5">finding these bugs is to so that we can</font>

1261
00:59:30,180 --> 00:59:34,859
have a better<font color="#CCCCCC"> infrastructure and and and</font>

1262
00:59:33,000 --> 00:59:39,390
you<font color="#E5E5E5"> know like for the general well-being</font>

1263
00:59:34,860 --> 00:59:41,700
of humanity<font color="#CCCCCC"> is there any</font><font color="#E5E5E5"> other objective</font>

1264
00:59:39,390 --> 00:59:45,299
to finding bugs in a Cisco IOS

1265
00:59:41,700 --> 00:59:47,220
<font color="#E5E5E5">you mean for me or you mean for us like</font>

1266
00:59:45,300 --> 00:59:50,390
I think having<font color="#E5E5E5"> access</font><font color="#CCCCCC"> to the</font>

1267
00:59:47,220 --> 00:59:54,560
infrastructure of<font color="#E5E5E5"> people can be</font>

1268
00:59:50,390 --> 00:59:54,560
interesting for some people

