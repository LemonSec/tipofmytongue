1
00:00:02,780 --> 00:00:07,830
thanks guys so my<font color="#E5E5E5"> name</font><font color="#CCCCCC"> is Joe and</font><font color="#E5E5E5"> I work</font>

2
00:00:06,029 --> 00:00:10,019
for Microsoft<font color="#CCCCCC"> I'm on the nsrc</font>

3
00:00:07,830 --> 00:00:12,240
<font color="#E5E5E5">vulnerabilities and mitigations team and</font>

4
00:00:10,019 --> 00:00:14,129
I'm<font color="#E5E5E5"> here today to share</font><font color="#CCCCCC"> with you a</font>

5
00:00:12,240 --> 00:00:16,880
little<font color="#E5E5E5"> bit</font><font color="#CCCCCC"> of the engineering</font><font color="#E5E5E5"> backstory</font>

6
00:00:14,130 --> 00:00:18,960
behind<font color="#E5E5E5"> both control flow guard and</font>

7
00:00:16,880 --> 00:00:21,689
<font color="#E5E5E5">Microsoft's greater control flow</font>

8
00:00:18,960 --> 00:00:22,859
integrity strategy and one of the things

9
00:00:21,689 --> 00:00:24,689
I'm going<font color="#E5E5E5"> to be sharing</font><font color="#CCCCCC"> with</font><font color="#E5E5E5"> you is a</font>

10
00:00:22,859 --> 00:00:27,330
bunch of the issues that<font color="#E5E5E5"> we found with</font>

11
00:00:24,689 --> 00:00:29,939
<font color="#CCCCCC">CFI technology as we've gone down this</font>

12
00:00:27,330 --> 00:00:32,549
road<font color="#CCCCCC"> and just</font><font color="#E5E5E5"> full disclosure</font><font color="#CCCCCC"> this is</font>

13
00:00:29,939 --> 00:00:34,800
going to be a no-holds-barred talk so

14
00:00:32,549 --> 00:00:36,540
even though I work for Microsoft<font color="#E5E5E5"> we are</font>

15
00:00:34,800 --> 00:00:39,199
going to be<font color="#CCCCCC"> sharing with</font><font color="#E5E5E5"> you everything</font>

16
00:00:36,540 --> 00:00:41,640
we<font color="#CCCCCC"> know about</font><font color="#E5E5E5"> problems with</font><font color="#CCCCCC"> CFI</font>

17
00:00:39,200 --> 00:00:43,950
including outstanding design level

18
00:00:41,640 --> 00:00:44,969
issues with control flow guard and also

19
00:00:43,950 --> 00:00:48,570
be sharing<font color="#CCCCCC"> with you guys for the first</font>

20
00:00:44,969 --> 00:00:50,610
<font color="#E5E5E5">time the details of how</font><font color="#CCCCCC"> we broke</font><font color="#E5E5E5"> return</font>

21
00:00:48,570 --> 00:00:54,510
flow guard<font color="#CCCCCC"> and why we</font><font color="#E5E5E5"> ended up not</font>

22
00:00:50,610 --> 00:00:56,010
<font color="#CCCCCC">shipping</font><font color="#E5E5E5"> it but before we dive into</font><font color="#CCCCCC"> that</font>

23
00:00:54,510 --> 00:00:58,440
I just<font color="#CCCCCC"> want to</font><font color="#E5E5E5"> give everyone a</font><font color="#CCCCCC"> little</font>

24
00:00:56,010 --> 00:01:01,468
<font color="#E5E5E5">bit of</font><font color="#CCCCCC"> historical context for why we</font>

25
00:00:58,440 --> 00:01:03,300
even went down<font color="#E5E5E5"> this crazy road so</font>

26
00:01:01,469 --> 00:01:06,020
control flow guard actually started

27
00:01:03,300 --> 00:01:09,000
being developed for<font color="#CCCCCC"> Windows</font><font color="#E5E5E5"> in about</font>

28
00:01:06,020 --> 00:01:11,189
<font color="#E5E5E5">2011 and that initial development went</font>

29
00:01:09,000 --> 00:01:12,600
into 2012<font color="#CCCCCC"> and I'm sure you</font><font color="#E5E5E5"> guys have</font><font color="#CCCCCC"> all</font>

30
00:01:11,189 --> 00:01:14,610
<font color="#E5E5E5">seen these graphs</font><font color="#CCCCCC"> before if you've ever</font>

31
00:01:12,600 --> 00:01:16,559
watched<font color="#E5E5E5"> matt miller give a talk but</font>

32
00:01:14,610 --> 00:01:19,170
basically<font color="#E5E5E5"> the problem that Microsoft had</font>

33
00:01:16,560 --> 00:01:20,930
is people<font color="#CCCCCC"> continued to</font><font color="#E5E5E5"> find</font><font color="#CCCCCC"> more and</font>

34
00:01:19,170 --> 00:01:24,119
<font color="#E5E5E5">more vulnerabilities in our products and</font>

35
00:01:20,930 --> 00:01:26,220
people were also<font color="#E5E5E5"> able to exploit those</font>

36
00:01:24,119 --> 00:01:28,590
vulnerabilities<font color="#E5E5E5"> more and more frequently</font>

37
00:01:26,220 --> 00:01:32,820
<font color="#CCCCCC">and we need to come up with</font><font color="#E5E5E5"> a plan to</font>

38
00:01:28,590 --> 00:01:34,350
<font color="#CCCCCC">try</font><font color="#E5E5E5"> to keep our customers safe and</font>

39
00:01:32,820 --> 00:01:36,270
there's some realities that<font color="#E5E5E5"> we have to</font>

40
00:01:34,350 --> 00:01:38,820
deal with<font color="#E5E5E5"> and you know this slide is all</font>

41
00:01:36,270 --> 00:01:43,259
framed around<font color="#E5E5E5"> what was going on in 2011</font>

42
00:01:38,820 --> 00:01:45,210
<font color="#E5E5E5">2012</font><font color="#CCCCCC"> but we have</font><font color="#E5E5E5"> things like the SDL we</font>

43
00:01:43,259 --> 00:01:47,700
fuzz we do pen testing we have static

44
00:01:45,210 --> 00:01:49,500
<font color="#CCCCCC">analysis</font><font color="#E5E5E5"> tools we work on but no matter</font>

45
00:01:47,700 --> 00:01:51,380
what we do we<font color="#CCCCCC"> just can't seem to find</font>

46
00:01:49,500 --> 00:01:54,479
<font color="#E5E5E5">all the bugs people keep finding them</font>

47
00:01:51,380 --> 00:01:57,719
<font color="#E5E5E5">we've also gone and implemented a bunch</font>

48
00:01:54,479 --> 00:02:00,030
of simplistic mitigations like<font color="#E5E5E5"> DEP we</font>

49
00:01:57,719 --> 00:02:03,149
have a SLR we've done hardening on our

50
00:02:00,030 --> 00:02:05,340
<font color="#CCCCCC">heap metadata etc etc</font><font color="#E5E5E5"> but these simple</font>

51
00:02:03,149 --> 00:02:07,290
mitigations are just not proving to be

52
00:02:05,340 --> 00:02:09,000
<font color="#E5E5E5">robust against the really strong</font>

53
00:02:07,290 --> 00:02:11,069
primitives<font color="#E5E5E5"> that people are starting</font><font color="#CCCCCC"> to</font>

54
00:02:09,000 --> 00:02:11,760
<font color="#CCCCCC">get out of their bugs</font><font color="#E5E5E5"> especially in the</font>

55
00:02:11,068 --> 00:02:14,768
web browser

56
00:02:11,760 --> 00:02:17,048
and when we look<font color="#E5E5E5"> at what</font><font color="#CCCCCC"> our options are</font>

57
00:02:14,769 --> 00:02:18,549
as far<font color="#E5E5E5"> as trying to keep people</font><font color="#CCCCCC"> safe we</font>

58
00:02:17,049 --> 00:02:21,310
do<font color="#E5E5E5"> have limited options</font>

59
00:02:18,549 --> 00:02:23,709
<font color="#E5E5E5">for one obviously</font><font color="#CCCCCC"> anything that we end</font>

60
00:02:21,310 --> 00:02:25,569
up<font color="#CCCCCC"> doing needs</font><font color="#E5E5E5"> to work</font><font color="#CCCCCC"> for the targets</font>

61
00:02:23,709 --> 00:02:29,049
<font color="#E5E5E5">that get attacked the most so Internet</font>

62
00:02:25,569 --> 00:02:30,399
<font color="#E5E5E5">Explorer and office</font><font color="#CCCCCC"> one of the</font><font color="#E5E5E5"> options</font>

63
00:02:29,049 --> 00:02:32,650
that<font color="#E5E5E5"> we would have certainly</font><font color="#CCCCCC"> liked to</font>

64
00:02:30,400 --> 00:02:34,840
pursue at the time was<font color="#E5E5E5"> doing a lot</font><font color="#CCCCCC"> more</font>

65
00:02:32,650 --> 00:02:37,840
<font color="#E5E5E5">hardcore sandboxing for</font><font color="#CCCCCC"> you know</font>

66
00:02:34,840 --> 00:02:40,180
Internet<font color="#E5E5E5"> Explorer in office but the</font>

67
00:02:37,840 --> 00:02:42,579
issue for us<font color="#E5E5E5"> is that both of those</font>

68
00:02:40,180 --> 00:02:45,340
products<font color="#CCCCCC"> have lots of compatibility</font>

69
00:02:42,579 --> 00:02:48,909
concerns due<font color="#CCCCCC"> to their old plug-in models</font>

70
00:02:45,340 --> 00:02:50,500
<font color="#E5E5E5">and so doing any sort of sandboxing ends</font>

71
00:02:48,909 --> 00:02:52,689
up<font color="#E5E5E5"> running up against those compact</font>

72
00:02:50,500 --> 00:02:55,480
concerns and<font color="#CCCCCC"> sandboxing also has a</font>

73
00:02:52,689 --> 00:02:57,459
really<font color="#E5E5E5"> huge engineering cost and at that</font>

74
00:02:55,480 --> 00:03:00,159
time<font color="#E5E5E5"> we</font><font color="#CCCCCC"> just did</font><font color="#E5E5E5"> not have</font><font color="#CCCCCC"> the</font>

75
00:02:57,459 --> 00:03:02,079
<font color="#E5E5E5">engineering</font><font color="#CCCCCC"> resources to pull off that</font>

76
00:03:00,159 --> 00:03:03,608
<font color="#E5E5E5">effort and then the other issue with</font>

77
00:03:02,079 --> 00:03:05,709
<font color="#E5E5E5">sandboxing</font><font color="#CCCCCC"> too is that it</font><font color="#E5E5E5"> really only</font>

78
00:03:03,609 --> 00:03:07,359
<font color="#E5E5E5">helps protect the software that you</font>

79
00:03:05,709 --> 00:03:08,980
sandbox<font color="#CCCCCC"> so all the</font><font color="#E5E5E5"> other software</font>

80
00:03:07,359 --> 00:03:12,040
<font color="#CCCCCC">running on</font><font color="#E5E5E5"> Windows doesn't get any</font>

81
00:03:08,980 --> 00:03:14,230
benefit<font color="#CCCCCC"> from that and</font><font color="#E5E5E5"> at the end of the</font>

82
00:03:12,040 --> 00:03:16,810
day any changes that<font color="#E5E5E5"> we decide to make</font>

83
00:03:14,230 --> 00:03:18,879
to the<font color="#CCCCCC"> Windows stack end up having</font>

84
00:03:16,810 --> 00:03:21,010
really<font color="#E5E5E5"> big compatibility hurdles to jump</font>

85
00:03:18,879 --> 00:03:24,159
<font color="#E5E5E5">through performance hurdles we need to</font>

86
00:03:21,010 --> 00:03:25,840
you<font color="#E5E5E5"> know remain a bi compliant etc so</font>

87
00:03:24,159 --> 00:03:28,540
when we're<font color="#CCCCCC"> looking at doing</font><font color="#E5E5E5"> really big</font>

88
00:03:25,840 --> 00:03:30,699
pushes<font color="#E5E5E5"> we need to invest very wisely</font>

89
00:03:28,540 --> 00:03:33,129
<font color="#CCCCCC">because if we end up</font><font color="#E5E5E5"> spending years</font>

90
00:03:30,699 --> 00:03:35,409
going<font color="#E5E5E5"> down a path</font><font color="#CCCCCC"> and then we end</font><font color="#E5E5E5"> up not</font>

91
00:03:33,129 --> 00:03:38,918
<font color="#E5E5E5">being performant it's a huge waste of</font>

92
00:03:35,409 --> 00:03:42,608
<font color="#E5E5E5">time</font><font color="#CCCCCC"> for us and that brings us to our</font>

93
00:03:38,919 --> 00:03:44,229
control flow integrity strategy<font color="#E5E5E5"> so when</font>

94
00:03:42,609 --> 00:03:46,269
we went and<font color="#E5E5E5"> we</font><font color="#CCCCCC"> looked at how our</font>

95
00:03:44,229 --> 00:03:48,569
customers<font color="#CCCCCC"> were being attacked we can see</font>

96
00:03:46,269 --> 00:03:50,650
that all remote code execution

97
00:03:48,569 --> 00:03:54,698
<font color="#E5E5E5">vulnerabilities</font><font color="#CCCCCC"> that are targeting</font>

98
00:03:50,650 --> 00:03:57,939
<font color="#E5E5E5">memory safety issues end up hijacking</font>

99
00:03:54,699 --> 00:04:00,159
control flow and we realized<font color="#CCCCCC"> that if we</font>

100
00:03:57,939 --> 00:04:03,340
<font color="#CCCCCC">can constrain control flow to what we</font>

101
00:04:00,159 --> 00:04:05,078
<font color="#E5E5E5">consider</font><font color="#CCCCCC"> to be legitimate paths then</font>

102
00:04:03,340 --> 00:04:08,109
that's gonna break all exploits<font color="#CCCCCC"> as</font>

103
00:04:05,079 --> 00:04:09,970
they're<font color="#E5E5E5"> currently written now doing</font>

104
00:04:08,109 --> 00:04:12,280
control flow integrity is a really huge

105
00:04:09,970 --> 00:04:14,228
lift<font color="#E5E5E5"> and it does have significant</font>

106
00:04:12,280 --> 00:04:17,529
<font color="#CCCCCC">performance penalties and compatibility</font>

107
00:04:14,229 --> 00:04:18,909
penalties<font color="#E5E5E5"> so we don't want to just go</font>

108
00:04:17,529 --> 00:04:21,159
<font color="#E5E5E5">down this road</font><font color="#CCCCCC"> of implementing it</font>

109
00:04:18,909 --> 00:04:22,719
<font color="#E5E5E5">without really thinking about do we</font>

110
00:04:21,159 --> 00:04:23,520
think this<font color="#E5E5E5"> is</font><font color="#CCCCCC"> going to</font><font color="#E5E5E5"> make a difference</font>

111
00:04:22,719 --> 00:04:25,080
in the long term

112
00:04:23,520 --> 00:04:27,330
or do we think<font color="#E5E5E5"> this is</font><font color="#CCCCCC"> something that</font>

113
00:04:25,080 --> 00:04:27,930
will be trivially worked around<font color="#E5E5E5"> and if</font>

114
00:04:27,330 --> 00:04:30,508
it's the latter

115
00:04:27,930 --> 00:04:32,729
<font color="#CCCCCC">then we're not</font><font color="#E5E5E5"> gonna waste our time</font><font color="#CCCCCC"> Matt</font>

116
00:04:30,509 --> 00:04:34,770
<font color="#E5E5E5">Miller ended up doing a talk I think</font>

117
00:04:32,729 --> 00:04:37,318
<font color="#CCCCCC">about five years</font><font color="#E5E5E5"> ago</font><font color="#CCCCCC"> that I linked in</font>

118
00:04:34,770 --> 00:04:39,770
the slide<font color="#E5E5E5"> deck that kind</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> outlines how</font>

119
00:04:37,319 --> 00:04:42,810
<font color="#E5E5E5">Microsoft thinks about different</font>

120
00:04:39,770 --> 00:04:44,729
<font color="#CCCCCC">exploitation primitives</font><font color="#E5E5E5"> but the gist of</font>

121
00:04:42,810 --> 00:04:46,830
<font color="#E5E5E5">it is that after we thought about it for</font>

122
00:04:44,729 --> 00:04:48,810
awhile<font color="#CCCCCC"> we decided we think that</font><font color="#E5E5E5"> this is</font>

123
00:04:46,830 --> 00:04:50,219
a worthwhile<font color="#E5E5E5"> path to go down</font><font color="#CCCCCC"> we do think</font>

124
00:04:48,810 --> 00:04:52,080
that<font color="#E5E5E5"> this will make attackers lives more</font>

125
00:04:50,220 --> 00:04:54,210
<font color="#E5E5E5">difficult</font><font color="#CCCCCC"> and another</font><font color="#E5E5E5"> really nice thing</font>

126
00:04:52,080 --> 00:04:56,419
<font color="#CCCCCC">is that the security teams at Microsoft</font>

127
00:04:54,210 --> 00:04:59,310
were actually very well<font color="#E5E5E5"> positioned to</font>

128
00:04:56,419 --> 00:05:02,159
implement a<font color="#E5E5E5"> lot of these changes and to</font>

129
00:04:59,310 --> 00:05:05,009
help drive other teams to implement<font color="#CCCCCC"> the</font>

130
00:05:02,159 --> 00:05:10,440
rest of them so it seems to<font color="#CCCCCC"> work out on</font>

131
00:05:05,009 --> 00:05:13,500
<font color="#E5E5E5">all</font><font color="#CCCCCC"> fronts for us now this</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> actually a</font>

132
00:05:10,440 --> 00:05:17,789
slide<font color="#CCCCCC"> that I took from internal</font>

133
00:05:13,500 --> 00:05:20,759
presentation done back in<font color="#E5E5E5"> 2012 and this</font>

134
00:05:17,789 --> 00:05:23,669
presentation was on<font color="#E5E5E5"> how Microsoft was</font>

135
00:05:20,759 --> 00:05:25,800
going to solve<font color="#E5E5E5"> memory</font><font color="#CCCCCC"> safety issues and</font>

136
00:05:23,669 --> 00:05:28,590
you can see that there's really<font color="#E5E5E5"> four</font>

137
00:05:25,800 --> 00:05:31,199
<font color="#CCCCCC">tenets to our strategy here the first</font>

138
00:05:28,590 --> 00:05:32,580
piece of it is control flow guard which

139
00:05:31,199 --> 00:05:33,750
probably everyone's<font color="#CCCCCC"> familiar with</font>

140
00:05:32,580 --> 00:05:37,080
because it's been<font color="#E5E5E5"> released for a few</font>

141
00:05:33,750 --> 00:05:38,599
years now<font color="#E5E5E5"> the next piece is split stacks</font>

142
00:05:37,080 --> 00:05:41,400
<font color="#CCCCCC">so we need to have</font><font color="#E5E5E5"> something to</font><font color="#CCCCCC"> protect</font>

143
00:05:38,599 --> 00:05:44,250
<font color="#E5E5E5">return addresses stored on the stack and</font>

144
00:05:41,400 --> 00:05:46,679
in today's terminology<font color="#E5E5E5"> we would probably</font>

145
00:05:44,250 --> 00:05:49,440
<font color="#E5E5E5">depend on</font><font color="#CCCCCC"> Intel CET to provide us a</font>

146
00:05:46,680 --> 00:05:53,130
<font color="#CCCCCC">Hardware shadow stack the third pillar</font>

147
00:05:49,440 --> 00:05:55,800
here is image load restrictions<font color="#CCCCCC"> and so</font>

148
00:05:53,130 --> 00:05:57,719
<font color="#CCCCCC">this is all</font><font color="#E5E5E5"> about making sure</font><font color="#CCCCCC"> that even</font>

149
00:05:55,800 --> 00:05:59,069
<font color="#CCCCCC">though attackers have to follow valid</font>

150
00:05:57,719 --> 00:06:01,440
control flow paths we want to make<font color="#CCCCCC"> sure</font>

151
00:05:59,069 --> 00:06:03,719
that they can't load code from the

152
00:06:01,440 --> 00:06:05,960
system<font color="#E5E5E5"> that we</font><font color="#CCCCCC"> don't want</font><font color="#E5E5E5"> to be loaded</font>

153
00:06:03,719 --> 00:06:08,250
in<font color="#E5E5E5"> that process and in today's</font>

154
00:06:05,960 --> 00:06:09,780
terminology Microsoft has a number<font color="#CCCCCC"> of</font>

155
00:06:08,250 --> 00:06:12,449
different things<font color="#E5E5E5"> that we do to enforce</font>

156
00:06:09,780 --> 00:06:15,289
<font color="#CCCCCC">this pillar</font><font color="#E5E5E5"> we have code integrity guard</font>

157
00:06:12,449 --> 00:06:17,219
we have no child process we have

158
00:06:15,289 --> 00:06:19,409
<font color="#E5E5E5">restrictions that prevent you loading</font>

159
00:06:17,219 --> 00:06:22,139
<font color="#E5E5E5">images from network shares and images</font>

160
00:06:19,409 --> 00:06:24,090
that<font color="#CCCCCC"> have low mandatory labels and then</font>

161
00:06:22,139 --> 00:06:25,919
the fourth pillar is dynamic code

162
00:06:24,090 --> 00:06:28,289
restrictions<font color="#E5E5E5"> and this is all about</font>

163
00:06:25,919 --> 00:06:31,469
making<font color="#E5E5E5"> sure that an attacker cannot</font>

164
00:06:28,289 --> 00:06:34,050
cannot just go<font color="#CCCCCC"> and instantiate new</font>

165
00:06:31,469 --> 00:06:36,849
executable<font color="#E5E5E5"> code pages like using virtual</font>

166
00:06:34,050 --> 00:06:43,389
<font color="#E5E5E5">Alec on Windows</font><font color="#CCCCCC"> and in today's term</font>

167
00:06:36,849 --> 00:06:45,069
<font color="#E5E5E5">this would be arbitrary code garden and</font>

168
00:06:43,389 --> 00:06:46,959
when<font color="#E5E5E5"> I was going</font><font color="#CCCCCC"> back through time</font>

169
00:06:45,069 --> 00:06:48,789
looking through<font color="#CCCCCC"> all of</font><font color="#E5E5E5"> our old documents</font>

170
00:06:46,959 --> 00:06:51,550
to put this presentation together<font color="#CCCCCC"> I</font>

171
00:06:48,789 --> 00:06:54,789
found<font color="#E5E5E5"> this quote in a internal document</font>

172
00:06:51,550 --> 00:06:56,169
it was a CFG assessment document<font color="#CCCCCC"> and it</font>

173
00:06:54,789 --> 00:06:58,240
said since<font color="#E5E5E5"> we'll be</font><font color="#CCCCCC"> the first major</font>

174
00:06:56,169 --> 00:07:00,549
<font color="#E5E5E5">software vendor to deploy a control flow</font>

175
00:06:58,240 --> 00:07:02,050
integrity solution at scale<font color="#E5E5E5"> we will have</font>

176
00:07:00,550 --> 00:07:03,669
the great<font color="#E5E5E5"> distinction of being the first</font>

177
00:07:02,050 --> 00:07:06,399
<font color="#CCCCCC">to</font><font color="#E5E5E5"> experience the school of hard knocks</font>

178
00:07:03,669 --> 00:07:08,469
<font color="#CCCCCC">and</font><font color="#E5E5E5"> this turned out to be</font><font color="#CCCCCC"> very true and</font>

179
00:07:06,399 --> 00:07:12,339
<font color="#E5E5E5">that's what we're gonna be</font><font color="#CCCCCC"> talking about</font>

180
00:07:08,469 --> 00:07:16,509
now so the school of hard knocks<font color="#CCCCCC"> or how</font>

181
00:07:12,339 --> 00:07:18,789
<font color="#E5E5E5">our understanding</font><font color="#CCCCCC"> of CFI has evolved and</font>

182
00:07:16,509 --> 00:07:21,939
you know one question<font color="#CCCCCC"> to answer is how</font>

183
00:07:18,789 --> 00:07:23,558
did<font color="#E5E5E5"> we get here so if you go and you</font>

184
00:07:21,939 --> 00:07:25,749
<font color="#CCCCCC">know you might be aware that</font><font color="#E5E5E5"> Microsoft</font>

185
00:07:23,559 --> 00:07:27,729
has a mitigation bypass bounty so we

186
00:07:25,749 --> 00:07:30,219
will pay you money<font color="#CCCCCC"> for finding ways</font>

187
00:07:27,729 --> 00:07:31,748
around<font color="#E5E5E5"> our exploit mitigations</font><font color="#CCCCCC"> and if</font>

188
00:07:30,219 --> 00:07:33,699
you go<font color="#E5E5E5"> and</font><font color="#CCCCCC"> you look under control flow</font>

189
00:07:31,749 --> 00:07:36,039
<font color="#E5E5E5">guard we have this massive section of</font>

190
00:07:33,699 --> 00:07:38,499
things that are considered<font color="#E5E5E5"> out of scope</font>

191
00:07:36,039 --> 00:07:41,259
<font color="#CCCCCC">for the bounty</font><font color="#E5E5E5"> and so what I hope to</font>

192
00:07:38,499 --> 00:07:43,180
<font color="#CCCCCC">inform you today is</font><font color="#E5E5E5"> how did we come</font><font color="#CCCCCC"> to</font>

193
00:07:41,259 --> 00:07:45,729
learn<font color="#E5E5E5"> that</font><font color="#CCCCCC"> all</font><font color="#E5E5E5"> of these design level</font>

194
00:07:43,180 --> 00:07:50,800
problems<font color="#E5E5E5"> exist and what do we think we</font>

195
00:07:45,729 --> 00:07:51,909
can do<font color="#E5E5E5"> about them so the first thing</font>

196
00:07:50,800 --> 00:07:53,469
we're going<font color="#E5E5E5"> to talk</font><font color="#CCCCCC"> about</font><font color="#E5E5E5"> is control</font>

197
00:07:51,909 --> 00:07:55,899
<font color="#E5E5E5">flow guard because that was the first</font>

198
00:07:53,469 --> 00:07:58,240
<font color="#E5E5E5">pillar of that strategy that we</font>

199
00:07:55,899 --> 00:07:59,769
implemented<font color="#CCCCCC"> I'm</font><font color="#E5E5E5"> assuming that most</font>

200
00:07:58,240 --> 00:08:03,159
<font color="#E5E5E5">people know how control flow guard works</font>

201
00:07:59,769 --> 00:08:05,379
but just<font color="#E5E5E5"> super briefly there is a</font><font color="#CCCCCC"> bitmap</font>

202
00:08:03,159 --> 00:08:08,409
<font color="#E5E5E5">that</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> loaded in each process</font><font color="#CCCCCC"> this</font>

203
00:08:05,379 --> 00:08:10,869
bitmap<font color="#E5E5E5"> indicates whether any particular</font>

204
00:08:08,409 --> 00:08:13,929
virtual address is<font color="#E5E5E5"> a valid indirect call</font>

205
00:08:10,869 --> 00:08:16,449
target or<font color="#E5E5E5"> not and prior to any indirect</font>

206
00:08:13,929 --> 00:08:18,789
call or indirect jump being made there

207
00:08:16,449 --> 00:08:21,339
is a check function<font color="#E5E5E5"> that checks</font><font color="#CCCCCC"> that</font>

208
00:08:18,789 --> 00:08:23,589
bitmap<font color="#CCCCCC"> if the function is</font><font color="#E5E5E5"> not marked as</font>

209
00:08:21,339 --> 00:08:25,389
valid then the process fast fails<font color="#E5E5E5"> and if</font>

210
00:08:23,589 --> 00:08:27,459
it is<font color="#E5E5E5"> Marcus valid then you make the</font>

211
00:08:25,389 --> 00:08:29,679
indirect call and one thing that<font color="#CCCCCC"> I'll</font>

212
00:08:27,459 --> 00:08:32,729
<font color="#CCCCCC">point out here is that control flow</font>

213
00:08:29,679 --> 00:08:34,809
guard is<font color="#E5E5E5"> coarse-grained so there is no</font>

214
00:08:32,729 --> 00:08:37,120
checking to make sure<font color="#E5E5E5"> that the</font><font color="#CCCCCC"> function</font>

215
00:08:34,809 --> 00:08:38,828
you're<font color="#E5E5E5"> about to indirectly call expects</font>

216
00:08:37,120 --> 00:08:40,328
the same number of parameters or that

217
00:08:38,828 --> 00:08:42,789
the parameters are of the correct type

218
00:08:40,328 --> 00:08:44,920
<font color="#E5E5E5">it's just a binary</font><font color="#CCCCCC"> can this function be</font>

219
00:08:42,789 --> 00:08:46,660
indirectly called or not and the way

220
00:08:44,920 --> 00:08:50,229
that that list is<font color="#CCCCCC"> created by</font><font color="#E5E5E5"> default</font><font color="#CCCCCC"> is</font>

221
00:08:46,660 --> 00:08:50,500
<font color="#E5E5E5">that at compile time</font><font color="#CCCCCC"> any function that</font>

222
00:08:50,230 --> 00:08:53,530
<font color="#E5E5E5">has</font>

223
00:08:50,500 --> 00:08:56,590
<font color="#E5E5E5">it's</font><font color="#CCCCCC"> address taken</font><font color="#E5E5E5"> is marked as a valid</font>

224
00:08:53,530 --> 00:08:58,990
indirect call target<font color="#E5E5E5"> any function</font><font color="#CCCCCC"> that</font>

225
00:08:56,590 --> 00:09:01,270
is inside<font color="#E5E5E5"> of a V table will be</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> valid</font>

226
00:08:58,990 --> 00:09:03,430
indirect call target and any<font color="#E5E5E5"> function</font>

227
00:09:01,270 --> 00:09:08,020
<font color="#CCCCCC">that is a DLL export is also a valid</font>

228
00:09:03,430 --> 00:09:10,060
indirect call target now prior to

229
00:09:08,020 --> 00:09:12,400
<font color="#E5E5E5">control flow guard shipping</font><font color="#CCCCCC"> we did lots</font>

230
00:09:10,060 --> 00:09:14,650
of analysis on it and we had a bunch<font color="#E5E5E5"> of</font>

231
00:09:12,400 --> 00:09:17,110
limitations that<font color="#E5E5E5"> we knew about</font><font color="#CCCCCC"> right off</font>

232
00:09:14,650 --> 00:09:19,060
<font color="#CCCCCC">the bat an obvious one is stack</font>

233
00:09:17,110 --> 00:09:20,920
corruption control flow guard makes no

234
00:09:19,060 --> 00:09:24,010
attempt<font color="#E5E5E5"> to</font><font color="#CCCCCC"> protect</font><font color="#E5E5E5"> the stack we needed</font>

235
00:09:20,920 --> 00:09:25,390
our split stack<font color="#E5E5E5"> pillar to do that so we</font>

236
00:09:24,010 --> 00:09:27,670
already<font color="#E5E5E5"> know that if someone can find</font>

237
00:09:25,390 --> 00:09:29,830
the stack we're done there's also a

238
00:09:27,670 --> 00:09:32,949
number of compatibility related issues

239
00:09:29,830 --> 00:09:35,050
<font color="#E5E5E5">because when you work at Microsoft</font><font color="#CCCCCC"> you</font>

240
00:09:32,950 --> 00:09:38,710
can't ship<font color="#E5E5E5"> a mitigation if it breaks all</font>

241
00:09:35,050 --> 00:09:40,569
existing<font color="#CCCCCC"> software so as a</font><font color="#E5E5E5"> result we have</font>

242
00:09:38,710 --> 00:09:42,670
certain<font color="#CCCCCC"> things such</font><font color="#E5E5E5"> as any time a</font>

243
00:09:40,570 --> 00:09:44,890
<font color="#CCCCCC">process creates a new executable</font><font color="#E5E5E5"> code</font>

244
00:09:42,670 --> 00:09:46,680
page<font color="#E5E5E5"> by default all the virtual</font>

245
00:09:44,890 --> 00:09:49,920
addresses of that code page will be

246
00:09:46,680 --> 00:09:52,839
<font color="#E5E5E5">marked as valid in direct call targets</font>

247
00:09:49,920 --> 00:09:55,270
<font color="#CCCCCC">similarly processes that support control</font>

248
00:09:52,840 --> 00:09:58,900
flow guard can still load<font color="#CCCCCC"> dll's</font><font color="#E5E5E5"> that</font>

249
00:09:55,270 --> 00:10:00,460
don't support control flow garden<font color="#CCCCCC"> there</font>

250
00:09:58,900 --> 00:10:02,439
<font color="#CCCCCC">are</font><font color="#E5E5E5"> some issues</font><font color="#CCCCCC"> because</font><font color="#E5E5E5"> control flow</font>

251
00:10:00,460 --> 00:10:04,570
guard is<font color="#E5E5E5"> coarse-grained</font><font color="#CCCCCC"> you can call</font>

252
00:10:02,440 --> 00:10:06,160
functions<font color="#E5E5E5"> out</font><font color="#CCCCCC"> of context and</font><font color="#E5E5E5"> maybe get</font>

253
00:10:04,570 --> 00:10:08,230
them to do slightly<font color="#E5E5E5"> unexpected things</font>

254
00:10:06,160 --> 00:10:09,969
<font color="#E5E5E5">one thing we knew about right off the</font>

255
00:10:08,230 --> 00:10:12,580
bat is you could call a function out<font color="#CCCCCC"> of</font>

256
00:10:09,970 --> 00:10:14,650
context<font color="#E5E5E5"> and that function could end up</font>

257
00:10:12,580 --> 00:10:16,270
writing a stack address<font color="#CCCCCC"> onto the heap</font>

258
00:10:14,650 --> 00:10:18,579
<font color="#CCCCCC">for you depending on</font><font color="#E5E5E5"> how you called that</font>

259
00:10:16,270 --> 00:10:20,470
function<font color="#E5E5E5"> so we already knew that people</font>

260
00:10:18,580 --> 00:10:23,470
were going to<font color="#CCCCCC"> be able</font><font color="#E5E5E5"> to find stack</font>

261
00:10:20,470 --> 00:10:26,830
addresses<font color="#CCCCCC"> we also had a class that we</font>

262
00:10:23,470 --> 00:10:28,900
just called<font color="#E5E5E5"> dangerous functions and this</font>

263
00:10:26,830 --> 00:10:30,760
is primarily<font color="#E5E5E5"> functions like</font><font color="#CCCCCC"> NT continued</font>

264
00:10:28,900 --> 00:10:33,130
<font color="#CCCCCC">in long jump these</font><font color="#E5E5E5"> are functions</font><font color="#CCCCCC"> that</font>

265
00:10:30,760 --> 00:10:35,740
take<font color="#E5E5E5"> a pointer to</font><font color="#CCCCCC"> a context record and</font>

266
00:10:33,130 --> 00:10:38,500
they use<font color="#CCCCCC"> that context record to set all</font>

267
00:10:35,740 --> 00:10:40,120
of the register<font color="#E5E5E5"> state so you have direct</font>

268
00:10:38,500 --> 00:10:43,440
control<font color="#CCCCCC"> over the instruction pointer the</font>

269
00:10:40,120 --> 00:10:45,820
stack pointer etc and the last category

270
00:10:43,440 --> 00:10:48,040
<font color="#E5E5E5">is</font><font color="#CCCCCC"> just generally known as data</font>

271
00:10:45,820 --> 00:10:50,200
corruption<font color="#CCCCCC"> and this is the idea that</font><font color="#E5E5E5"> an</font>

272
00:10:48,040 --> 00:10:51,819
attacker<font color="#E5E5E5"> doesn't actually need to hijack</font>

273
00:10:50,200 --> 00:10:54,580
control flow to make<font color="#CCCCCC"> a</font><font color="#E5E5E5"> program do</font>

274
00:10:51,820 --> 00:10:57,910
<font color="#CCCCCC">interesting things for example if there</font>

275
00:10:54,580 --> 00:11:00,010
was a file path<font color="#E5E5E5"> to an executable</font><font color="#CCCCCC"> that</font>

276
00:10:57,910 --> 00:11:01,360
was stored<font color="#E5E5E5"> on the heap and that file</font>

277
00:11:00,010 --> 00:11:02,970
path was<font color="#CCCCCC"> eventually going to</font><font color="#E5E5E5"> be passed</font>

278
00:11:01,360 --> 00:11:05,970
<font color="#E5E5E5">to win exec then</font>

279
00:11:02,970 --> 00:11:09,180
<font color="#E5E5E5">tacker could corrupt that path using</font><font color="#CCCCCC"> a</font>

280
00:11:05,970 --> 00:11:10,680
<font color="#E5E5E5">readwrite primitive and they could you</font>

281
00:11:09,180 --> 00:11:13,128
<font color="#E5E5E5">know end up getting you to load and</font>

282
00:11:10,680 --> 00:11:15,779
executable<font color="#CCCCCC"> off of a network share</font>

283
00:11:13,129 --> 00:11:19,500
similar attacks<font color="#E5E5E5"> exist for load</font><font color="#CCCCCC"> library</font>

284
00:11:15,779 --> 00:11:20,879
and a<font color="#E5E5E5"> number of other functions now one</font>

285
00:11:19,500 --> 00:11:22,620
<font color="#E5E5E5">thing I forgot to mention is that when</font>

286
00:11:20,879 --> 00:11:24,810
control flow guard was<font color="#E5E5E5"> in very</font><font color="#CCCCCC"> early</font>

287
00:11:22,620 --> 00:11:26,970
development<font color="#E5E5E5"> there really was no formal</font>

288
00:11:24,810 --> 00:11:30,209
threat model for it<font color="#E5E5E5"> it was really just</font>

289
00:11:26,970 --> 00:11:32,550
<font color="#E5E5E5">thought of as a way to kill Rob</font>

290
00:11:30,209 --> 00:11:34,349
but prior to CFG shipping we actually

291
00:11:32,550 --> 00:11:36,149
did<font color="#E5E5E5"> have a more formalized threat model</font>

292
00:11:34,350 --> 00:11:38,129
for it all the decisions that we were

293
00:11:36,149 --> 00:11:40,139
<font color="#CCCCCC">making for control flow</font><font color="#E5E5E5"> guard assume</font>

294
00:11:38,129 --> 00:11:42,449
<font color="#E5E5E5">that the attacker has an arbitrary</font>

295
00:11:40,139 --> 00:11:44,579
readwrite primitive and with that it's

296
00:11:42,449 --> 00:11:46,439
kind of implied<font color="#CCCCCC"> that we also</font><font color="#E5E5E5"> assume the</font>

297
00:11:44,579 --> 00:11:49,019
attacker has full knowledge<font color="#E5E5E5"> of the</font>

298
00:11:46,439 --> 00:11:50,370
<font color="#CCCCCC">virtual address</font><font color="#E5E5E5"> space of the</font><font color="#CCCCCC"> process so</font>

299
00:11:49,019 --> 00:11:51,750
we<font color="#E5E5E5"> assume the attacker knows where the</font>

300
00:11:50,370 --> 00:11:53,550
stacks<font color="#E5E5E5"> are we assume they</font><font color="#CCCCCC"> know where the</font>

301
00:11:51,750 --> 00:11:56,699
heaps are where the images are etc

302
00:11:53,550 --> 00:11:58,109
<font color="#E5E5E5">control flow guard has to be robust even</font>

303
00:11:56,699 --> 00:12:00,839
if an attacker has all<font color="#CCCCCC"> of that knowledge</font>

304
00:11:58,110 --> 00:12:03,629
<font color="#E5E5E5">because the mitigation is designed to be</font>

305
00:12:00,839 --> 00:12:09,120
<font color="#E5E5E5">resilient against an attacker</font><font color="#CCCCCC"> that has</font>

306
00:12:03,629 --> 00:12:11,519
these sort<font color="#E5E5E5"> of info leaks so let's go and</font>

307
00:12:09,120 --> 00:12:13,620
<font color="#CCCCCC">take a walk down memory lane</font><font color="#E5E5E5"> now</font><font color="#CCCCCC"> back in</font>

308
00:12:11,519 --> 00:12:15,509
<font color="#E5E5E5">November of 2014 as one control flow</font>

309
00:12:13,620 --> 00:12:17,759
guard<font color="#E5E5E5"> which is the first pillo of our</font>

310
00:12:15,509 --> 00:12:19,379
<font color="#E5E5E5">strategy finally ended up shipping to</font>

311
00:12:17,759 --> 00:12:21,689
the world it took quite a while<font color="#CCCCCC"> to</font><font color="#E5E5E5"> get</font>

312
00:12:19,379 --> 00:12:23,550
it out<font color="#E5E5E5"> it was delayed several</font><font color="#CCCCCC"> windows</font>

313
00:12:21,689 --> 00:12:26,399
releases I believe<font color="#E5E5E5"> because people were</font>

314
00:12:23,550 --> 00:12:27,959
scared<font color="#E5E5E5"> about performance but we ended up</font>

315
00:12:26,399 --> 00:12:29,819
shipping<font color="#E5E5E5"> it as an optional update and</font>

316
00:12:27,959 --> 00:12:32,339
then something that<font color="#CCCCCC"> was kind of cool for</font>

317
00:12:29,819 --> 00:12:34,079
us happened we saw some<font color="#E5E5E5"> zero days in</font><font color="#CCCCCC"> the</font>

318
00:12:32,339 --> 00:12:36,809
wild<font color="#E5E5E5"> in flash and I think it was</font>

319
00:12:34,079 --> 00:12:39,000
<font color="#E5E5E5">December of 2014 and that's never good</font>

320
00:12:36,809 --> 00:12:40,769
news<font color="#CCCCCC"> but one thing that</font><font color="#E5E5E5"> was kind of neat</font>

321
00:12:39,000 --> 00:12:42,660
was that we<font color="#CCCCCC"> actually caught one of these</font>

322
00:12:40,769 --> 00:12:44,339
<font color="#E5E5E5">zero days because the authors didn't</font>

323
00:12:42,660 --> 00:12:46,350
realize that we had shipped control flow

324
00:12:44,339 --> 00:12:47,819
guard as an optional update and their

325
00:12:46,350 --> 00:12:50,370
exploit didn't work with control flow

326
00:12:47,819 --> 00:12:51,930
guard<font color="#E5E5E5"> so in the windows crash dumps we</font>

327
00:12:50,370 --> 00:12:55,170
started seeing<font color="#E5E5E5"> all</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> these functions</font>

328
00:12:51,930 --> 00:12:56,939
<font color="#E5E5E5">failing on the CFG check</font><font color="#CCCCCC"> function and so</font>

329
00:12:55,170 --> 00:12:58,139
you know for<font color="#E5E5E5"> us as a</font><font color="#CCCCCC"> company that's</font>

330
00:12:56,939 --> 00:13:00,540
building mitigations trying to keep

331
00:12:58,139 --> 00:13:02,009
people<font color="#CCCCCC"> safe we thought you know</font><font color="#E5E5E5"> this</font><font color="#CCCCCC"> is</font>

332
00:13:00,540 --> 00:13:03,089
awesome we shipped this mitigation<font color="#E5E5E5"> and</font>

333
00:13:02,009 --> 00:13:04,860
one month later<font color="#E5E5E5"> we</font><font color="#CCCCCC"> just caught a</font>

334
00:13:03,089 --> 00:13:08,610
<font color="#CCCCCC">zero-day we're keeping people protected</font>

335
00:13:04,860 --> 00:13:10,439
that's great in February of 2015 so

336
00:13:08,610 --> 00:13:12,420
<font color="#CCCCCC">three months after it shipped as an</font>

337
00:13:10,439 --> 00:13:14,780
optional update<font color="#E5E5E5"> we ended up shipping it</font>

338
00:13:12,420 --> 00:13:17,630
as an enabled by default mitigation

339
00:13:14,780 --> 00:13:19,339
for everyone on<font color="#E5E5E5"> Windows 8 1 the reason</font>

340
00:13:17,630 --> 00:13:20,420
we didn't do that<font color="#E5E5E5"> initially is really</font>

341
00:13:19,340 --> 00:13:22,910
because we were<font color="#E5E5E5"> scared</font>

342
00:13:20,420 --> 00:13:24,920
<font color="#E5E5E5">control flow guard is a really big</font>

343
00:13:22,910 --> 00:13:26,630
change<font color="#E5E5E5"> for the operating system</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> just</font>

344
00:13:24,920 --> 00:13:28,819
pushing that<font color="#CCCCCC"> out to hundreds of</font><font color="#E5E5E5"> millions</font>

345
00:13:26,630 --> 00:13:30,290
<font color="#E5E5E5">of people at once it can be a little bit</font>

346
00:13:28,820 --> 00:13:32,270
scary we don't want to break<font color="#CCCCCC"> everyone</font>

347
00:13:30,290 --> 00:13:32,660
but we had enough<font color="#CCCCCC"> confidence in</font><font color="#E5E5E5"> it by</font>

348
00:13:32,270 --> 00:13:37,220
then

349
00:13:32,660 --> 00:13:38,870
so it's enabled by default<font color="#E5E5E5"> so now that</font>

350
00:13:37,220 --> 00:13:40,880
it's<font color="#E5E5E5"> enabled by</font><font color="#CCCCCC"> default</font><font color="#E5E5E5"> we start</font>

351
00:13:38,870 --> 00:13:42,320
<font color="#E5E5E5">monitoring what people are doing what or</font>

352
00:13:40,880 --> 00:13:44,150
<font color="#E5E5E5">what her</font><font color="#CCCCCC"> attacker is doing to get around</font>

353
00:13:42,320 --> 00:13:46,760
control flow guard and really the first

354
00:13:44,150 --> 00:13:49,040
test<font color="#E5E5E5"> of it was at pwned</font><font color="#CCCCCC"> own that year</font>

355
00:13:46,760 --> 00:13:50,930
pwned<font color="#E5E5E5"> own happens every March and so</font>

356
00:13:49,040 --> 00:13:52,939
this was<font color="#E5E5E5"> one month after control flow</font>

357
00:13:50,930 --> 00:13:54,500
guard initially shipped we're pretty

358
00:13:52,940 --> 00:13:57,650
excited<font color="#CCCCCC"> to see</font><font color="#E5E5E5"> what</font><font color="#CCCCCC"> people would come up</font>

359
00:13:54,500 --> 00:13:59,030
<font color="#CCCCCC">with and I think</font><font color="#E5E5E5"> ultimately the ways</font>

360
00:13:57,650 --> 00:14:02,390
that<font color="#E5E5E5"> people got around control flow</font>

361
00:13:59,030 --> 00:14:03,860
guard<font color="#E5E5E5"> all utilized known weaknesses we</font>

362
00:14:02,390 --> 00:14:05,449
knew that<font color="#E5E5E5"> this stuff could happen we</font>

363
00:14:03,860 --> 00:14:07,970
<font color="#CCCCCC">just hoped it wouldn't we hadn't gotten</font>

364
00:14:05,450 --> 00:14:10,820
<font color="#E5E5E5">around to fixing</font><font color="#CCCCCC"> it yet</font><font color="#E5E5E5"> so for example</font>

365
00:14:07,970 --> 00:14:14,210
we saw one team<font color="#CCCCCC"> that just</font><font color="#E5E5E5"> indirectly</font>

366
00:14:10,820 --> 00:14:16,370
called<font color="#E5E5E5"> win exec which is a dll export so</font>

367
00:14:14,210 --> 00:14:17,240
it's a valid indirect call target and

368
00:14:16,370 --> 00:14:18,920
they called it with<font color="#CCCCCC"> controlled</font>

369
00:14:17,240 --> 00:14:21,320
parameters<font color="#CCCCCC"> and they</font><font color="#E5E5E5"> launched some</font>

370
00:14:18,920 --> 00:14:22,849
executable off of a network share<font color="#E5E5E5"> we</font>

371
00:14:21,320 --> 00:14:24,890
also saw some<font color="#CCCCCC"> people that</font><font color="#E5E5E5"> were leaking</font>

372
00:14:22,850 --> 00:14:27,320
stack addresses and then using<font color="#E5E5E5"> those</font>

373
00:14:24,890 --> 00:14:28,730
stack addresses to call<font color="#E5E5E5"> NT</font><font color="#CCCCCC"> continue now</font>

374
00:14:27,320 --> 00:14:30,320
you might<font color="#CCCCCC"> be</font><font color="#E5E5E5"> wondering wait why is</font>

375
00:14:28,730 --> 00:14:31,940
somebody leaking a stack address and

376
00:14:30,320 --> 00:14:34,190
then calling in<font color="#CCCCCC"> T</font><font color="#E5E5E5"> continue and it's</font>

377
00:14:31,940 --> 00:14:35,960
because I didn't<font color="#E5E5E5"> tell you something</font><font color="#CCCCCC"> when</font>

378
00:14:34,190 --> 00:14:38,390
we when<font color="#CCCCCC"> we found these classes of</font>

379
00:14:35,960 --> 00:14:40,160
<font color="#E5E5E5">dangerous functions like NT continue we</font>

380
00:14:38,390 --> 00:14:43,340
put a little<font color="#E5E5E5"> bit of a mitigation in</font>

381
00:14:40,160 --> 00:14:45,439
place<font color="#E5E5E5"> we required that</font><font color="#CCCCCC"> before NT</font>

382
00:14:43,340 --> 00:14:47,750
<font color="#CCCCCC">continue we'll set all of</font><font color="#E5E5E5"> your register</font>

383
00:14:45,440 --> 00:14:49,400
state it verifies that the stack

384
00:14:47,750 --> 00:14:51,560
pointers that<font color="#E5E5E5"> you're giving it</font><font color="#CCCCCC"> to set</font>

385
00:14:49,400 --> 00:14:54,199
are actually<font color="#CCCCCC"> within</font><font color="#E5E5E5"> the bounds of your</font>

386
00:14:51,560 --> 00:14:56,479
<font color="#E5E5E5">current threads stack and our thinking</font>

387
00:14:54,200 --> 00:14:58,490
there was if you know where the stack is

388
00:14:56,480 --> 00:15:00,230
then control flow guard is bypassed<font color="#CCCCCC"> so</font>

389
00:14:58,490 --> 00:15:01,940
this is<font color="#E5E5E5"> just a nice way of us</font><font color="#CCCCCC"> making</font>

390
00:15:00,230 --> 00:15:03,590
sure that you at<font color="#CCCCCC"> least</font><font color="#E5E5E5"> know where the</font>

391
00:15:01,940 --> 00:15:05,590
stack is before you<font color="#E5E5E5"> can control the</font>

392
00:15:03,590 --> 00:15:07,790
instruction pointer from<font color="#CCCCCC"> an T continue</font>

393
00:15:05,590 --> 00:15:09,410
<font color="#CCCCCC">but that's what people did</font><font color="#E5E5E5"> they lead the</font>

394
00:15:07,790 --> 00:15:12,530
stack and then they called NT<font color="#E5E5E5"> continue</font>

395
00:15:09,410 --> 00:15:15,350
<font color="#E5E5E5">and we also saw one case where someone</font>

396
00:15:12,530 --> 00:15:16,790
found a pointer in one of the flash

397
00:15:15,350 --> 00:15:18,890
binaries that<font color="#E5E5E5"> pointed</font><font color="#CCCCCC"> to some</font>

398
00:15:16,790 --> 00:15:23,030
read/write/execute memory<font color="#E5E5E5"> yeah I was</font>

399
00:15:18,890 --> 00:15:24,470
actually<font color="#E5E5E5"> Nico</font><font color="#CCCCCC"> he's sitting here and</font><font color="#E5E5E5"> yeah</font>

400
00:15:23,030 --> 00:15:26,120
so he just<font color="#E5E5E5"> wrote</font><font color="#CCCCCC"> as payload directly</font>

401
00:15:24,470 --> 00:15:27,850
into that<font color="#E5E5E5"> read write execute memory and</font>

402
00:15:26,120 --> 00:15:30,279
had a great<font color="#E5E5E5"> time so that</font>

403
00:15:27,850 --> 00:15:31,839
<font color="#E5E5E5">that was kind of a disappointing</font><font color="#CCCCCC"> one for</font>

404
00:15:30,279 --> 00:15:33,160
us<font color="#E5E5E5"> it's</font><font color="#CCCCCC"> like</font><font color="#E5E5E5"> man you know we put all</font>

405
00:15:31,839 --> 00:15:33,970
this work<font color="#CCCCCC"> into</font><font color="#E5E5E5"> control flow guard and</font>

406
00:15:33,160 --> 00:15:37,930
<font color="#E5E5E5">then there's just</font><font color="#CCCCCC"> read write execute</font>

407
00:15:33,970 --> 00:15:39,160
memory laying around<font color="#CCCCCC"> exploits in the</font>

408
00:15:37,930 --> 00:15:40,750
<font color="#E5E5E5">wild there's something that I wanted to</font>

409
00:15:39,160 --> 00:15:43,259
<font color="#E5E5E5">talk</font><font color="#CCCCCC"> about but I honestly</font><font color="#E5E5E5"> just don't</font>

410
00:15:40,750 --> 00:15:45,970
have time<font color="#CCCCCC"> the good news is though that</font>

411
00:15:43,259 --> 00:15:48,459
we haven't actually<font color="#E5E5E5"> seen anything all</font>

412
00:15:45,970 --> 00:15:50,259
that<font color="#E5E5E5"> interesting in exploits in the wild</font>

413
00:15:48,459 --> 00:15:52,420
<font color="#CCCCCC">over the past three years with regards</font>

414
00:15:50,259 --> 00:15:54,519
to<font color="#E5E5E5"> bypass and control flow guard that we</font>

415
00:15:52,420 --> 00:15:56,620
didn't<font color="#E5E5E5"> also see in either</font><font color="#CCCCCC"> pone</font><font color="#E5E5E5"> to own or</font>

416
00:15:54,519 --> 00:16:00,699
<font color="#E5E5E5">just in our own</font><font color="#CCCCCC"> internal research</font><font color="#E5E5E5"> so</font>

417
00:15:56,620 --> 00:16:03,519
we're not<font color="#E5E5E5"> really missing out on much and</font>

418
00:16:00,699 --> 00:16:04,750
then internally<font color="#CCCCCC"> we actually did quite a</font>

419
00:16:03,519 --> 00:16:07,029
bit<font color="#CCCCCC"> of work</font><font color="#E5E5E5"> on control flow guard</font>

420
00:16:04,750 --> 00:16:09,850
ourselves<font color="#CCCCCC"> one</font><font color="#E5E5E5"> of the things we did was</font>

421
00:16:07,029 --> 00:16:12,269
<font color="#E5E5E5">we</font><font color="#CCCCCC"> did some internal prototyping</font><font color="#E5E5E5"> on what</font>

422
00:16:09,850 --> 00:16:14,829
we were calling control flow guard<font color="#CCCCCC"> plus</font>

423
00:16:12,269 --> 00:16:17,860
now as I mentioned before<font color="#E5E5E5"> control flow</font>

424
00:16:14,829 --> 00:16:19,989
guard is coarse-grained<font color="#CCCCCC"> and we wanted</font><font color="#E5E5E5"> to</font>

425
00:16:17,860 --> 00:16:22,060
<font color="#E5E5E5">investigate</font><font color="#CCCCCC"> if it was possible to</font><font color="#E5E5E5"> make</font>

426
00:16:19,990 --> 00:16:23,709
<font color="#E5E5E5">it finer grained it's actually something</font>

427
00:16:22,060 --> 00:16:25,689
<font color="#CCCCCC">we'd</font><font color="#E5E5E5"> considered during the initial</font>

428
00:16:23,709 --> 00:16:27,579
design of control flow guard but we<font color="#E5E5E5"> just</font>

429
00:16:25,690 --> 00:16:30,000
didn't<font color="#CCCCCC"> have the time</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> resources to</font>

430
00:16:27,579 --> 00:16:31,930
fully<font color="#CCCCCC"> investigate the idea</font><font color="#E5E5E5"> back then</font>

431
00:16:30,000 --> 00:16:35,259
<font color="#E5E5E5">unfortunately what we ended up finding</font>

432
00:16:31,930 --> 00:16:37,599
was that there were a lot of compat

433
00:16:35,259 --> 00:16:39,250
issues on<font color="#CCCCCC"> windows and the best</font>

434
00:16:37,600 --> 00:16:42,370
granularity<font color="#CCCCCC"> that we could get with</font>

435
00:16:39,250 --> 00:16:44,199
control flow guard<font color="#E5E5E5"> was ensuring that the</font>

436
00:16:42,370 --> 00:16:46,540
function you're calling has the correct

437
00:16:44,199 --> 00:16:48,490
number of<font color="#E5E5E5"> arguments but</font><font color="#CCCCCC"> we couldn't</font>

438
00:16:46,540 --> 00:16:49,990
ensure that it had the arguments were of

439
00:16:48,490 --> 00:16:53,199
the correct type<font color="#E5E5E5"> or that</font><font color="#CCCCCC"> the return</font>

440
00:16:49,990 --> 00:16:54,490
values of the correct type<font color="#E5E5E5"> and so given</font>

441
00:16:53,199 --> 00:16:56,649
that<font color="#E5E5E5"> we weren't</font><font color="#CCCCCC"> really getting</font><font color="#E5E5E5"> that much</font>

442
00:16:54,490 --> 00:16:58,480
more granularity<font color="#E5E5E5"> and the fact that there</font>

443
00:16:56,649 --> 00:16:59,860
was gonna<font color="#CCCCCC"> be probably some performance</font>

444
00:16:58,480 --> 00:17:02,949
cost here and there was gonna be<font color="#CCCCCC"> a lot</font>

445
00:16:59,860 --> 00:17:04,750
<font color="#CCCCCC">of developer cost</font><font color="#E5E5E5"> we figured it's just</font>

446
00:17:02,949 --> 00:17:08,260
not worth it<font color="#E5E5E5"> right now this is not the</font>

447
00:17:04,750 --> 00:17:10,119
<font color="#E5E5E5">right thing to invest in</font><font color="#CCCCCC"> internally we</font>

448
00:17:08,260 --> 00:17:12,220
<font color="#CCCCCC">also</font><font color="#E5E5E5"> were looking for weaknesses in</font>

449
00:17:10,119 --> 00:17:13,658
control flow guard<font color="#CCCCCC"> and our red team</font>

450
00:17:12,220 --> 00:17:16,209
found something that<font color="#CCCCCC"> I thought</font><font color="#E5E5E5"> was</font>

451
00:17:13,659 --> 00:17:19,600
pretty clever<font color="#E5E5E5"> they called</font><font color="#CCCCCC"> it their stack</font>

452
00:17:16,209 --> 00:17:22,900
<font color="#E5E5E5">spray attack</font><font color="#CCCCCC"> and what they realized</font><font color="#E5E5E5"> was</font>

453
00:17:19,599 --> 00:17:26,079
<font color="#CCCCCC">that</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> windows memory manager uses</font><font color="#E5E5E5"> the</font>

454
00:17:22,900 --> 00:17:30,010
exact same<font color="#E5E5E5"> allocator to allocate stacks</font>

455
00:17:26,079 --> 00:17:32,230
<font color="#E5E5E5">for</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> process as it does when a process</font>

456
00:17:30,010 --> 00:17:35,740
called virtual<font color="#CCCCCC"> outlook to get some</font>

457
00:17:32,230 --> 00:17:38,080
virtual memory<font color="#E5E5E5"> and in JavaScript</font><font color="#CCCCCC"> if you</font>

458
00:17:35,740 --> 00:17:40,600
allocate<font color="#CCCCCC"> a</font><font color="#E5E5E5"> really big array that will</font>

459
00:17:38,080 --> 00:17:41,809
end up<font color="#E5E5E5"> turning into a virtual alok</font>

460
00:17:40,600 --> 00:17:43,759
allocation

461
00:17:41,809 --> 00:17:45,639
and so what they were able<font color="#E5E5E5"> to do was</font>

462
00:17:43,759 --> 00:17:48,349
they sprayed some really big stacks<font color="#CCCCCC"> that</font>

463
00:17:45,639 --> 00:17:49,820
<font color="#CCCCCC">were</font><font color="#E5E5E5"> the size of a heap or the size that</font>

464
00:17:48,349 --> 00:17:52,460
they<font color="#E5E5E5"> were sorry they sprayed some very</font>

465
00:17:49,820 --> 00:17:55,070
big JavaScript arrays<font color="#CCCCCC"> that were</font><font color="#E5E5E5"> the size</font>

466
00:17:52,460 --> 00:17:56,450
of a stack<font color="#E5E5E5"> on</font><font color="#CCCCCC"> Windows and then they</font>

467
00:17:55,070 --> 00:17:58,428
would free some of<font color="#CCCCCC"> those JavaScript</font>

468
00:17:56,450 --> 00:17:59,960
arrays and<font color="#E5E5E5"> then</font><font color="#CCCCCC"> they would do</font><font color="#E5E5E5"> something</font>

469
00:17:58,429 --> 00:18:02,450
like<font color="#CCCCCC"> create web workers</font><font color="#E5E5E5"> that would cause</font>

470
00:17:59,960 --> 00:18:05,149
new threads to<font color="#E5E5E5"> be created which means</font>

471
00:18:02,450 --> 00:18:06,979
new stacks to be<font color="#E5E5E5"> allocated and those</font>

472
00:18:05,149 --> 00:18:08,809
stacks would be<font color="#E5E5E5"> allocated in</font><font color="#CCCCCC"> the exact</font>

473
00:18:06,979 --> 00:18:11,419
same virtual address where they had just

474
00:18:08,809 --> 00:18:12,950
freed JavaScript arrays<font color="#CCCCCC"> so if you have a</font>

475
00:18:11,419 --> 00:18:15,080
use after free<font color="#CCCCCC"> and a JavaScript array</font>

476
00:18:12,950 --> 00:18:17,570
<font color="#E5E5E5">then this gives you a super convenient</font>

477
00:18:15,080 --> 00:18:20,059
<font color="#E5E5E5">way to just directly start writing</font><font color="#CCCCCC"> to</font>

478
00:18:17,570 --> 00:18:23,928
the stack<font color="#E5E5E5"> so I thought that was pretty</font>

479
00:18:20,059 --> 00:18:25,779
clever<font color="#CCCCCC"> we also realized that one</font>

480
00:18:23,929 --> 00:18:30,009
possible<font color="#E5E5E5"> oversight we made with our</font>

481
00:18:25,779 --> 00:18:32,899
<font color="#E5E5E5">image load restrictions</font><font color="#CCCCCC"> pillar</font><font color="#E5E5E5"> was that</font>

482
00:18:30,009 --> 00:18:35,299
<font color="#E5E5E5">Microsoft ships a number of dll's that</font>

483
00:18:32,899 --> 00:18:38,718
<font color="#E5E5E5">contain scripting engines like vbscript</font>

484
00:18:35,299 --> 00:18:40,190
and<font color="#CCCCCC"> PowerShell</font><font color="#E5E5E5"> and it's possible those</font>

485
00:18:38,719 --> 00:18:42,080
are all signed by Microsoft<font color="#E5E5E5"> and it's</font>

486
00:18:40,190 --> 00:18:43,909
<font color="#E5E5E5">possible to load those directly into</font><font color="#CCCCCC"> the</font>

487
00:18:42,080 --> 00:18:46,460
edge<font color="#E5E5E5"> browser for example</font><font color="#CCCCCC"> or the internet</font>

488
00:18:43,909 --> 00:18:48,200
<font color="#CCCCCC">explorer browser</font><font color="#E5E5E5"> and so even if we had</font>

489
00:18:46,460 --> 00:18:50,239
really good<font color="#E5E5E5"> control flow integrity an</font>

490
00:18:48,200 --> 00:18:52,519
attacker could just load<font color="#CCCCCC"> PowerShell</font>

491
00:18:50,239 --> 00:18:54,169
script in the process<font color="#CCCCCC"> and use</font><font color="#E5E5E5"> that to</font>

492
00:18:52,519 --> 00:18:56,089
Interop<font color="#CCCCCC"> with all the system calls and</font>

493
00:18:54,169 --> 00:18:57,139
<font color="#E5E5E5">whatnot so</font><font color="#CCCCCC"> we realized okay so we're</font>

494
00:18:56,089 --> 00:19:00,729
probably gonna<font color="#E5E5E5"> need to do something</font>

495
00:18:57,139 --> 00:19:00,728
<font color="#CCCCCC">about people</font><font color="#E5E5E5"> just loading script engines</font>

496
00:19:02,049 --> 00:19:07,190
<font color="#CCCCCC">alright so what did we end</font><font color="#E5E5E5"> up doing</font>

497
00:19:04,309 --> 00:19:09,918
<font color="#E5E5E5">about this stuff now</font><font color="#CCCCCC"> whenever we make</font>

498
00:19:07,190 --> 00:19:13,039
changes to<font color="#E5E5E5"> our exploit mitigations we</font>

499
00:19:09,919 --> 00:19:15,799
kind of categorize them in two ways we

500
00:19:13,039 --> 00:19:20,359
have strategic<font color="#E5E5E5"> changes which we really</font>

501
00:19:15,799 --> 00:19:22,849
think<font color="#CCCCCC"> about as a change that</font><font color="#E5E5E5"> is robust</font>

502
00:19:20,359 --> 00:19:24,649
or contributes to a mitigation being

503
00:19:22,849 --> 00:19:27,019
more robust<font color="#E5E5E5"> and we think is like the</font>

504
00:19:24,649 --> 00:19:28,699
<font color="#E5E5E5">right long-term</font><font color="#CCCCCC"> direction</font><font color="#E5E5E5"> and then we</font>

505
00:19:27,019 --> 00:19:30,979
have tactical changes which are things

506
00:19:28,700 --> 00:19:32,719
<font color="#E5E5E5">that we know are weak we know they're</font>

507
00:19:30,979 --> 00:19:35,330
fragile<font color="#E5E5E5"> but they're pretty low cost</font>

508
00:19:32,719 --> 00:19:37,489
<font color="#CCCCCC">primped for us to implement</font><font color="#E5E5E5"> and it will</font>

509
00:19:35,330 --> 00:19:40,960
disrupt<font color="#E5E5E5"> the</font><font color="#CCCCCC"> way that</font><font color="#E5E5E5"> people are writing</font>

510
00:19:37,489 --> 00:19:45,409
exploits<font color="#E5E5E5"> so we just go ahead and do it</font>

511
00:19:40,960 --> 00:19:46,759
<font color="#CCCCCC">on the strategic</font><font color="#E5E5E5"> side in July that's</font>

512
00:19:45,409 --> 00:19:50,839
when the first version of Windows 10

513
00:19:46,759 --> 00:19:53,059
Windows 10 shipped and with that<font color="#E5E5E5"> we got</font>

514
00:19:50,839 --> 00:19:54,710
the edge browser<font color="#E5E5E5"> and</font><font color="#CCCCCC"> that was</font><font color="#E5E5E5"> really</font>

515
00:19:53,059 --> 00:19:55,360
great<font color="#CCCCCC"> for the security teams because the</font>

516
00:19:54,710 --> 00:19:57,460
edge browser

517
00:19:55,360 --> 00:19:59,740
a way better sandbox and it<font color="#E5E5E5"> also gets</font>

518
00:19:57,460 --> 00:20:01,570
<font color="#E5E5E5">rid of a lot</font><font color="#CCCCCC"> of the app compat issues</font>

519
00:19:59,740 --> 00:20:02,799
<font color="#E5E5E5">that</font><font color="#CCCCCC"> I II</font><font color="#E5E5E5"> had so that means in the</font>

520
00:20:01,570 --> 00:20:05,649
future<font color="#E5E5E5"> we can be way more aggressive</font>

521
00:20:02,799 --> 00:20:07,330
<font color="#CCCCCC">with exploit mitigations then we made a</font>

522
00:20:05,650 --> 00:20:08,830
number<font color="#E5E5E5"> of tactical changes one of the</font>

523
00:20:07,330 --> 00:20:11,199
things we did<font color="#E5E5E5"> was something that we</font>

524
00:20:08,830 --> 00:20:13,750
called explicit suppression so we

525
00:20:11,200 --> 00:20:15,790
realized hey attackers are calling<font color="#CCCCCC"> Wynn</font>

526
00:20:13,750 --> 00:20:17,380
<font color="#E5E5E5">exact and empty continue because these</font>

527
00:20:15,790 --> 00:20:19,928
<font color="#CCCCCC">functions</font><font color="#E5E5E5"> are valid</font><font color="#CCCCCC"> indirect call</font>

528
00:20:17,380 --> 00:20:21,520
targets<font color="#E5E5E5"> and we don't think</font><font color="#CCCCCC"> that anyone</font>

529
00:20:19,929 --> 00:20:24,400
<font color="#CCCCCC">should ever actually be calling these</font>

530
00:20:21,520 --> 00:20:27,780
things<font color="#E5E5E5"> indirectly so we're just gonna go</font>

531
00:20:24,400 --> 00:20:33,070
and<font color="#CCCCCC"> mark those</font><font color="#E5E5E5"> as invalid call targets</font>

532
00:20:27,780 --> 00:20:35,678
we also spent some<font color="#E5E5E5"> time trying</font><font color="#CCCCCC"> to find</font>

533
00:20:33,070 --> 00:20:37,809
areas where stack addresses were being

534
00:20:35,679 --> 00:20:40,150
leaked onto the<font color="#E5E5E5"> heap or into global</font>

535
00:20:37,809 --> 00:20:42,370
variables<font color="#CCCCCC"> because that was</font><font color="#E5E5E5"> another thing</font>

536
00:20:40,150 --> 00:20:44,260
<font color="#CCCCCC">that we had</font><font color="#E5E5E5"> seen at</font><font color="#CCCCCC"> pone to own but we</font>

537
00:20:42,370 --> 00:20:45,489
<font color="#E5E5E5">quickly realized that there was no way</font>

538
00:20:44,260 --> 00:20:48,370
we<font color="#CCCCCC"> were gonna be able to</font><font color="#E5E5E5"> find all of</font>

539
00:20:45,490 --> 00:20:50,230
these and it's just like some<font color="#E5E5E5"> of the</font>

540
00:20:48,370 --> 00:20:52,360
cases were really easy to fix and<font color="#E5E5E5"> some</font>

541
00:20:50,230 --> 00:20:54,820
of them were actually really<font color="#E5E5E5"> quite</font>

542
00:20:52,360 --> 00:20:57,600
complicated<font color="#E5E5E5"> to fix and we</font><font color="#CCCCCC"> decided this</font>

543
00:20:54,820 --> 00:21:00,040
is not<font color="#E5E5E5"> the right place to spend our time</font>

544
00:20:57,600 --> 00:21:02,490
<font color="#E5E5E5">and then one continuing theme through</font>

545
00:21:00,040 --> 00:21:04,840
all<font color="#CCCCCC"> windows releases is just fixing</font>

546
00:21:02,490 --> 00:21:08,040
instrumentation gaps<font color="#E5E5E5"> these are areas</font>

547
00:21:04,840 --> 00:21:10,659
where control flow guard was not

548
00:21:08,040 --> 00:21:12,190
<font color="#E5E5E5">properly added to a binary and so there</font>

549
00:21:10,660 --> 00:21:16,780
<font color="#E5E5E5">are indirect calls that are not</font>

550
00:21:12,190 --> 00:21:19,330
instrumented and then later in 2015

551
00:21:16,780 --> 00:21:22,299
<font color="#CCCCCC">because with Windows 10 we now ship</font>

552
00:21:19,330 --> 00:21:25,360
multiple windows releases per year<font color="#E5E5E5"> we</font>

553
00:21:22,299 --> 00:21:27,370
made some<font color="#E5E5E5"> more changes so this is where</font>

554
00:21:25,360 --> 00:21:29,830
we<font color="#E5E5E5"> first started implementing our image</font>

555
00:21:27,370 --> 00:21:33,639
load restrictions<font color="#CCCCCC"> pillar of our strategy</font>

556
00:21:29,830 --> 00:21:35,379
<font color="#CCCCCC">and what we did here was one edge will</font>

557
00:21:33,640 --> 00:21:38,770
now only<font color="#E5E5E5"> load binaries that are signed</font>

558
00:21:35,380 --> 00:21:41,169
<font color="#E5E5E5">by Microsoft and two edge will not</font><font color="#CCCCCC"> load</font>

559
00:21:38,770 --> 00:21:43,629
<font color="#E5E5E5">any binaries that</font><font color="#CCCCCC"> come from</font><font color="#E5E5E5"> a network</font>

560
00:21:41,169 --> 00:21:46,540
share<font color="#CCCCCC"> and both of these are enforced by</font>

561
00:21:43,630 --> 00:21:48,760
<font color="#CCCCCC">the kernel we also made a few</font><font color="#E5E5E5"> more</font>

562
00:21:46,540 --> 00:21:51,250
tactical changes one thing<font color="#CCCCCC"> we did was we</font>

563
00:21:48,760 --> 00:21:54,419
<font color="#CCCCCC">four edge specifically we gave it even</font>

564
00:21:51,250 --> 00:21:56,410
more functions to explicitly suppress

565
00:21:54,419 --> 00:21:58,179
<font color="#CCCCCC">these</font><font color="#E5E5E5"> are functions</font><font color="#CCCCCC"> that we weren't</font>

566
00:21:56,410 --> 00:21:59,860
<font color="#E5E5E5">really</font><font color="#CCCCCC"> comfortable doing system-wide but</font>

567
00:21:58,179 --> 00:22:02,020
with edge we could be a little<font color="#E5E5E5"> bit more</font>

568
00:21:59,860 --> 00:22:04,270
aggressive<font color="#E5E5E5"> and we also did stack</font>

569
00:22:02,020 --> 00:22:06,580
isolation which in response to our<font color="#CCCCCC"> red</font>

570
00:22:04,270 --> 00:22:07,629
<font color="#CCCCCC">team stack sprang attack what we did was</font>

571
00:22:06,580 --> 00:22:10,480
we<font color="#CCCCCC"> gave the</font>

572
00:22:07,630 --> 00:22:13,000
memory manager<font color="#E5E5E5"> a new</font><font color="#CCCCCC"> allocator that it</font>

573
00:22:10,480 --> 00:22:16,660
<font color="#E5E5E5">uses just to allocate the stacks the</font>

574
00:22:13,000 --> 00:22:19,030
tabs and<font color="#E5E5E5"> the peds and so that guarantees</font>

575
00:22:16,660 --> 00:22:22,030
that<font color="#E5E5E5"> you can never have like a virtually</font>

576
00:22:19,030 --> 00:22:25,600
allocated region of memory<font color="#CCCCCC"> that's</font><font color="#E5E5E5"> right</font>

577
00:22:22,030 --> 00:22:27,280
<font color="#E5E5E5">next to or on top of</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> stack and then</font>

578
00:22:25,600 --> 00:22:28,629
one<font color="#E5E5E5"> other</font><font color="#CCCCCC"> thing that we</font><font color="#E5E5E5"> realized was</font>

579
00:22:27,280 --> 00:22:31,060
<font color="#CCCCCC">that now that we have this explicit</font>

580
00:22:28,630 --> 00:22:32,790
suppression thing in<font color="#E5E5E5"> place we have this</font>

581
00:22:31,060 --> 00:22:34,000
issue which is<font color="#E5E5E5"> that there could</font><font color="#CCCCCC"> be</font>

582
00:22:32,790 --> 00:22:36,570
<font color="#E5E5E5">dangerous</font>

583
00:22:34,000 --> 00:22:39,520
<font color="#CCCCCC">rapper functions so if you for example</font>

584
00:22:36,570 --> 00:22:42,070
<font color="#E5E5E5">explicitly suppress win exec from being</font>

585
00:22:39,520 --> 00:22:43,540
called in<font color="#E5E5E5"> directly then what happens if</font>

586
00:22:42,070 --> 00:22:45,730
there's a function called win exec

587
00:22:43,540 --> 00:22:47,860
rapper<font color="#E5E5E5"> that is a valid indirect call</font>

588
00:22:45,730 --> 00:22:50,160
target and then just passes its

589
00:22:47,860 --> 00:22:52,929
parameters to the real win exec function

590
00:22:50,160 --> 00:22:54,220
that just immediately<font color="#E5E5E5"> bypasses all the</font>

591
00:22:52,930 --> 00:22:56,860
explicit suppression work that you've

592
00:22:54,220 --> 00:23:00,010
tried to do so<font color="#E5E5E5"> we went and found some</font><font color="#CCCCCC"> of</font>

593
00:22:56,860 --> 00:23:02,439
<font color="#CCCCCC">these</font><font color="#E5E5E5"> things using static analysis</font><font color="#CCCCCC"> but</font>

594
00:23:00,010 --> 00:23:05,500
this was another area<font color="#E5E5E5"> where we very</font>

595
00:23:02,440 --> 00:23:07,150
quickly<font color="#E5E5E5"> realized that</font><font color="#CCCCCC"> we were just</font><font color="#E5E5E5"> not</font>

596
00:23:05,500 --> 00:23:09,370
<font color="#E5E5E5">going to be able to find all of these</font>

597
00:23:07,150 --> 00:23:18,130
<font color="#E5E5E5">and I'll talk a little bit</font><font color="#CCCCCC"> more about</font>

598
00:23:09,370 --> 00:23:19,989
this in a little<font color="#E5E5E5"> bit so 2016 new year</font>

599
00:23:18,130 --> 00:23:21,880
new set of learnings we actually learned

600
00:23:19,990 --> 00:23:25,480
a ton of<font color="#E5E5E5"> stuff</font><font color="#CCCCCC"> about control flow guard</font>

601
00:23:21,880 --> 00:23:28,420
<font color="#E5E5E5">this year</font><font color="#CCCCCC"> first</font><font color="#E5E5E5"> up was</font><font color="#CCCCCC"> pone - own and</font>

602
00:23:25,480 --> 00:23:30,220
also<font color="#E5E5E5"> we had</font><font color="#CCCCCC"> pwned</font><font color="#E5E5E5"> fest in 2016 that</font>

603
00:23:28,420 --> 00:23:32,110
<font color="#E5E5E5">happened in November so</font><font color="#CCCCCC"> these</font><font color="#E5E5E5"> slept like</font>

604
00:23:30,220 --> 00:23:35,620
the<font color="#E5E5E5"> chronological ordering of the slides</font>

605
00:23:32,110 --> 00:23:37,149
gets a little<font color="#E5E5E5"> bit funky</font><font color="#CCCCCC"> but the point</font>

606
00:23:35,620 --> 00:23:39,729
<font color="#CCCCCC">being</font><font color="#E5E5E5"> that at all of these exploit</font>

607
00:23:37,150 --> 00:23:40,600
competitions we saw the exact same thing

608
00:23:39,730 --> 00:23:42,490
being used

609
00:23:40,600 --> 00:23:44,830
people were just<font color="#E5E5E5"> leaking the stack</font>

610
00:23:42,490 --> 00:23:46,230
address directly corrupting<font color="#CCCCCC"> return</font>

611
00:23:44,830 --> 00:23:48,639
pointers that<font color="#E5E5E5"> were stored on the stack</font>

612
00:23:46,230 --> 00:23:50,500
<font color="#E5E5E5">they were using</font><font color="#CCCCCC"> that to create a little</font>

613
00:23:48,640 --> 00:23:52,480
<font color="#CCCCCC">raw payload that would create</font><font color="#E5E5E5"> some</font>

614
00:23:50,500 --> 00:23:54,880
<font color="#CCCCCC">read/write/execute</font><font color="#E5E5E5"> read/write/execute</font>

615
00:23:52,480 --> 00:23:57,550
memory for them<font color="#E5E5E5"> and that's where they</font>

616
00:23:54,880 --> 00:24:05,230
<font color="#CCCCCC">deliver their second stage payload and</font>

617
00:23:57,550 --> 00:24:08,110
<font color="#E5E5E5">that was ubiquitous and we had lots of</font>

618
00:24:05,230 --> 00:24:10,810
bounty reports in 2016<font color="#E5E5E5"> one of the really</font>

619
00:24:08,110 --> 00:24:14,399
interesting<font color="#E5E5E5"> bounty reports we got was</font>

620
00:24:10,810 --> 00:24:16,419
attacks against read-only memory<font color="#E5E5E5"> now I</font>

621
00:24:14,400 --> 00:24:17,710
kind of skimmed<font color="#CCCCCC"> over this when I</font><font color="#E5E5E5"> was</font>

622
00:24:16,420 --> 00:24:19,850
talking<font color="#E5E5E5"> about how control flow guard</font>

623
00:24:17,710 --> 00:24:21,860
works<font color="#CCCCCC"> but I mentioned how</font>

624
00:24:19,850 --> 00:24:23,780
<font color="#CCCCCC">trol flow guard has this check</font><font color="#E5E5E5"> function</font>

625
00:24:21,860 --> 00:24:25,490
that checks the bitmap to see if

626
00:24:23,780 --> 00:24:28,070
something as a valid<font color="#E5E5E5"> indirect call</font>

627
00:24:25,490 --> 00:24:30,080
target the way this actually<font color="#E5E5E5"> works is</font>

628
00:24:28,070 --> 00:24:33,020
there's a function pointer<font color="#E5E5E5"> that stores</font>

629
00:24:30,080 --> 00:24:35,990
<font color="#E5E5E5">either the address to this check</font>

630
00:24:33,020 --> 00:24:37,668
<font color="#CCCCCC">function or it stores a no op function</font>

631
00:24:35,990 --> 00:24:39,980
and the reason that<font color="#CCCCCC"> we do this</font><font color="#E5E5E5"> is</font>

632
00:24:37,669 --> 00:24:41,630
because<font color="#E5E5E5"> for functions</font><font color="#CCCCCC"> that don't</font><font color="#E5E5E5"> support</font>

633
00:24:39,980 --> 00:24:44,570
control flow guard we need an easy<font color="#E5E5E5"> way</font>

634
00:24:41,630 --> 00:24:45,980
<font color="#CCCCCC">to disable</font><font color="#E5E5E5"> it</font><font color="#CCCCCC"> so when if when or when a</font>

635
00:24:44,570 --> 00:24:50,450
process doesn't<font color="#E5E5E5"> support control flow</font>

636
00:24:45,980 --> 00:24:52,010
guard<font color="#E5E5E5"> this</font><font color="#CCCCCC"> I call function pointer it</font>

637
00:24:50,450 --> 00:24:54,169
points to the no op it just always<font color="#E5E5E5"> says</font>

638
00:24:52,010 --> 00:24:56,960
yes<font color="#E5E5E5"> this function you're trying to call</font>

639
00:24:54,169 --> 00:24:59,539
<font color="#E5E5E5">as a valid indirect call target and what</font>

640
00:24:56,960 --> 00:25:02,659
<font color="#E5E5E5">people realize they could do was they</font>

641
00:24:59,539 --> 00:25:04,669
could make that<font color="#E5E5E5"> memory writable and they</font>

642
00:25:02,659 --> 00:25:07,220
could change that CFG check function

643
00:25:04,669 --> 00:25:10,309
<font color="#E5E5E5">pointer to point to the no op function</font>

644
00:25:07,220 --> 00:25:12,080
and now all of<font color="#CCCCCC"> sudden</font><font color="#E5E5E5"> every single call</font>

645
00:25:10,309 --> 00:25:15,950
target in the process is a valid call

646
00:25:12,080 --> 00:25:18,408
<font color="#E5E5E5">indirect call target</font><font color="#CCCCCC"> we also saw people</font>

647
00:25:15,950 --> 00:25:20,840
that were similarly making memory

648
00:25:18,409 --> 00:25:22,610
rewrite execute<font color="#E5E5E5"> so even though functions</font>

649
00:25:20,840 --> 00:25:24,530
like virtual protect were explicitly

650
00:25:22,610 --> 00:25:26,750
suppressed<font color="#E5E5E5"> they found wrappers around</font>

651
00:25:24,530 --> 00:25:30,440
<font color="#E5E5E5">these and would make memory read/write</font>

652
00:25:26,750 --> 00:25:32,870
executable and<font color="#E5E5E5"> there's also an</font>

653
00:25:30,440 --> 00:25:34,370
interesting<font color="#CCCCCC"> case for</font><font color="#E5E5E5"> our jits at this</font>

654
00:25:32,870 --> 00:25:36,559
point in time our<font color="#CCCCCC"> jits were still in</font>

655
00:25:34,370 --> 00:25:38,600
process<font color="#E5E5E5"> and the way that the</font><font color="#CCCCCC"> jets work</font>

656
00:25:36,559 --> 00:25:40,730
is they would get some code<font color="#E5E5E5"> to read</font>

657
00:25:38,600 --> 00:25:43,340
write<font color="#CCCCCC"> memory and then they would flip</font>

658
00:25:40,730 --> 00:25:45,799
<font color="#CCCCCC">the memory protection on that code they</font>

659
00:25:43,340 --> 00:25:48,139
just and make<font color="#E5E5E5"> it read execute</font>

660
00:25:45,799 --> 00:25:49,580
and we figured this<font color="#E5E5E5"> is</font><font color="#CCCCCC"> a pretty</font><font color="#E5E5E5"> small</font>

661
00:25:48,140 --> 00:25:50,710
window<font color="#E5E5E5"> we don't think that somebody</font>

662
00:25:49,580 --> 00:25:53,149
<font color="#CCCCCC">would be able to</font><font color="#E5E5E5"> write their</font><font color="#CCCCCC"> own</font>

663
00:25:50,710 --> 00:25:56,150
malicious code into<font color="#CCCCCC"> that</font><font color="#E5E5E5"> chip buffer</font>

664
00:25:53,150 --> 00:25:57,559
before<font color="#CCCCCC"> it</font><font color="#E5E5E5"> got made read execute and it</font>

665
00:25:56,150 --> 00:26:02,210
turns<font color="#E5E5E5"> out that we were wrong people</font><font color="#CCCCCC"> were</font>

666
00:25:57,559 --> 00:26:05,510
<font color="#E5E5E5">able to do that</font><font color="#CCCCCC"> we also had</font><font color="#E5E5E5"> some</font>

667
00:26:02,210 --> 00:26:08,000
interesting compiler bugs<font color="#E5E5E5"> so we noticed</font>

668
00:26:05,510 --> 00:26:10,640
that some DL elves were being<font color="#E5E5E5"> generated</font>

669
00:26:08,000 --> 00:26:13,130
with writable import address tables

670
00:26:10,640 --> 00:26:14,990
<font color="#E5E5E5">which is a really big problem because</font>

671
00:26:13,130 --> 00:26:17,570
<font color="#CCCCCC">all of those function pointers in there</font>

672
00:26:14,990 --> 00:26:19,429
get called they don't have any CFG check

673
00:26:17,570 --> 00:26:20,870
happening on them they<font color="#E5E5E5"> are just trusted</font>

674
00:26:19,429 --> 00:26:24,770
function pointers so if someone can

675
00:26:20,870 --> 00:26:26,840
modify<font color="#E5E5E5"> them then you can by design make</font>

676
00:26:24,770 --> 00:26:29,360
those IAT entries point anywhere<font color="#E5E5E5"> you</font>

677
00:26:26,840 --> 00:26:32,090
want there was also a<font color="#E5E5E5"> case where the</font>

678
00:26:29,360 --> 00:26:34,199
compiler<font color="#E5E5E5"> was generating some thunks for</font>

679
00:26:32,090 --> 00:26:38,189
just internal purposes

680
00:26:34,200 --> 00:26:40,320
and these thunks would take in a

681
00:26:38,190 --> 00:26:43,530
<font color="#CCCCCC">function pointer</font><font color="#E5E5E5"> from</font><font color="#CCCCCC"> the RA X register</font>

682
00:26:40,320 --> 00:26:46,649
<font color="#E5E5E5">and call it</font><font color="#CCCCCC"> indirectly</font><font color="#E5E5E5"> without any sort</font>

683
00:26:43,530 --> 00:26:49,080
of CFG check and it wasn't<font color="#CCCCCC"> actually an</font>

684
00:26:46,650 --> 00:26:51,420
issue<font color="#CCCCCC"> because there was no possible way</font>

685
00:26:49,080 --> 00:26:53,699
that<font color="#E5E5E5"> an attacker would ever be able to</font>

686
00:26:51,420 --> 00:26:57,920
influence<font color="#E5E5E5"> the function pointer that was</font>

687
00:26:53,700 --> 00:27:00,480
passed in except<font color="#E5E5E5"> that the compiler was</font>

688
00:26:57,920 --> 00:27:02,910
accidentally<font color="#E5E5E5"> making all of these thunks</font>

689
00:27:00,480 --> 00:27:05,310
valid<font color="#E5E5E5"> in direct call targets which meant</font>

690
00:27:02,910 --> 00:27:07,050
that<font color="#E5E5E5"> actually you could easily control</font>

691
00:27:05,310 --> 00:27:08,760
the RA<font color="#CCCCCC"> X register value</font><font color="#E5E5E5"> that was being</font>

692
00:27:07,050 --> 00:27:12,120
passed in there<font color="#E5E5E5"> so</font><font color="#CCCCCC"> that was a direct</font>

693
00:27:08,760 --> 00:27:14,190
control flow guard bypass as well<font color="#CCCCCC"> and</font>

694
00:27:12,120 --> 00:27:16,110
then we saw<font color="#E5E5E5"> kind of more the same we saw</font>

695
00:27:14,190 --> 00:27:18,510
more data only corruption attacks people

696
00:27:16,110 --> 00:27:19,979
<font color="#E5E5E5">finding interesting</font><font color="#CCCCCC"> dll</font><font color="#E5E5E5"> paths stored in</font>

697
00:27:18,510 --> 00:27:22,110
the heap or in global variables that

698
00:27:19,980 --> 00:27:23,730
they could corrupt<font color="#E5E5E5"> we saw people</font>

699
00:27:22,110 --> 00:27:26,540
reporting us interesting ways they could

700
00:27:23,730 --> 00:27:29,700
leak stack addresses uninstrumented

701
00:27:26,540 --> 00:27:32,100
<font color="#E5E5E5">indirect calls and binaries and</font><font color="#CCCCCC"> we saw</font>

702
00:27:29,700 --> 00:27:34,650
some interesting<font color="#CCCCCC"> research on really</font>

703
00:27:32,100 --> 00:27:37,169
testing the<font color="#CCCCCC"> limits of</font><font color="#E5E5E5"> coarse-grained</font><font color="#CCCCCC"> CFI</font>

704
00:27:34,650 --> 00:27:39,300
<font color="#E5E5E5">and</font><font color="#CCCCCC"> i have a pretty</font><font color="#E5E5E5"> good link to an</font>

705
00:27:37,170 --> 00:27:45,270
article<font color="#E5E5E5"> that</font><font color="#CCCCCC"> really explores</font><font color="#E5E5E5"> that at the</font>

706
00:27:39,300 --> 00:27:46,860
end of the slides<font color="#CCCCCC"> so one of the things</font>

707
00:27:45,270 --> 00:27:51,780
that we realized and<font color="#E5E5E5"> I kind of hinted</font><font color="#CCCCCC"> at</font>

708
00:27:46,860 --> 00:27:54,570
this earlier<font color="#E5E5E5"> was that no</font><font color="#CCCCCC"> matter how</font>

709
00:27:51,780 --> 00:27:58,879
fine-grained<font color="#E5E5E5"> our control flow solution</font>

710
00:27:54,570 --> 00:28:02,129
is we end up with<font color="#E5E5E5"> this predicament where</font>

711
00:27:58,880 --> 00:28:05,490
attackers can still probably<font color="#E5E5E5"> call any</font>

712
00:28:02,130 --> 00:28:07,680
function they want in your program with

713
00:28:05,490 --> 00:28:09,660
arguments that they control they can

714
00:28:07,680 --> 00:28:11,400
<font color="#E5E5E5">either do this</font><font color="#CCCCCC"> because they'll find some</font>

715
00:28:09,660 --> 00:28:13,710
wrapper around that function that's a

716
00:28:11,400 --> 00:28:16,440
valid indirect call target or they'll do

717
00:28:13,710 --> 00:28:17,850
this because<font color="#E5E5E5"> the arguments</font><font color="#CCCCCC"> that get</font>

718
00:28:16,440 --> 00:28:19,560
passed to that function are stored on

719
00:28:17,850 --> 00:28:21,149
<font color="#E5E5E5">the</font><font color="#CCCCCC"> heap somewhere</font><font color="#E5E5E5"> or are stored in a</font>

720
00:28:19,560 --> 00:28:22,800
global somewhere or are stored on<font color="#E5E5E5"> the</font>

721
00:28:21,150 --> 00:28:24,060
<font color="#CCCCCC">stack somewhere and they can overwrite</font>

722
00:28:22,800 --> 00:28:26,730
all of that because they have an

723
00:28:24,060 --> 00:28:28,679
arbitrary readwrite primitive and it

724
00:28:26,730 --> 00:28:30,960
it's probably<font color="#CCCCCC"> not the case that it's</font>

725
00:28:28,680 --> 00:28:32,850
trivial<font color="#E5E5E5"> for attackers</font><font color="#CCCCCC"> to call</font><font color="#E5E5E5"> any</font>

726
00:28:30,960 --> 00:28:35,130
function that's loaded in<font color="#CCCCCC"> your program</font>

727
00:28:32,850 --> 00:28:37,409
with controlled arguments but<font color="#E5E5E5"> from our</font>

728
00:28:35,130 --> 00:28:39,480
<font color="#CCCCCC">perspective</font><font color="#E5E5E5"> we have no good way</font><font color="#CCCCCC"> of</font>

729
00:28:37,410 --> 00:28:41,430
reasoning about<font color="#E5E5E5"> which functions an</font>

730
00:28:39,480 --> 00:28:42,929
attacker can actually call with

731
00:28:41,430 --> 00:28:45,150
controlled arguments and which functions

732
00:28:42,929 --> 00:28:46,169
they can't<font color="#E5E5E5"> which means that we just</font><font color="#CCCCCC"> have</font>

733
00:28:45,150 --> 00:28:48,179
<font color="#E5E5E5">to assume</font>

734
00:28:46,169 --> 00:28:51,419
<font color="#E5E5E5">they can call all of the functions with</font>

735
00:28:48,179 --> 00:28:53,820
valid arguments so in this you know<font color="#CCCCCC"> in</font>

736
00:28:51,419 --> 00:28:55,619
this world we are still<font color="#E5E5E5"> killing raw</font>

737
00:28:53,820 --> 00:28:57,840
<font color="#E5E5E5">because</font><font color="#CCCCCC"> we can guarantee you that an</font>

738
00:28:55,619 --> 00:29:00,779
attacker cannot call<font color="#E5E5E5"> into the middle of</font>

739
00:28:57,840 --> 00:29:02,939
a function but we have to assume<font color="#CCCCCC"> that a</font>

740
00:29:00,779 --> 00:29:05,999
particular process is<font color="#E5E5E5"> going</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> be able</font>

741
00:29:02,940 --> 00:29:09,450
<font color="#E5E5E5">to do or exercise any functionality that</font>

742
00:29:05,999 --> 00:29:11,399
it actually has access<font color="#E5E5E5"> to exercise and</font>

743
00:29:09,450 --> 00:29:13,289
for<font color="#E5E5E5"> us this means that control flow</font>

744
00:29:11,399 --> 00:29:16,529
integrity<font color="#E5E5E5"> really has to go</font><font color="#CCCCCC"> hand-in-hand</font>

745
00:29:13,289 --> 00:29:19,139
<font color="#CCCCCC">with a super strong sandbox</font><font color="#E5E5E5"> so the</font>

746
00:29:16,529 --> 00:29:21,899
sandbox is there to<font color="#E5E5E5"> limit what a process</font>

747
00:29:19,139 --> 00:29:23,039
<font color="#CCCCCC">is able to legitimately do and we have</font>

748
00:29:21,899 --> 00:29:25,080
some<font color="#E5E5E5"> of those</font><font color="#CCCCCC"> restrictions in place</font>

749
00:29:23,039 --> 00:29:26,669
<font color="#CCCCCC">already right so we say you can't load</font>

750
00:29:25,080 --> 00:29:27,960
images off a network share<font color="#E5E5E5"> you can't</font>

751
00:29:26,669 --> 00:29:30,690
load images that<font color="#CCCCCC"> aren't signed by</font>

752
00:29:27,960 --> 00:29:33,749
Microsoft<font color="#CCCCCC"> and then control flow</font>

753
00:29:30,690 --> 00:29:36,059
<font color="#CCCCCC">Integrity's responsibility here</font><font color="#E5E5E5"> is to</font>

754
00:29:33,749 --> 00:29:38,940
make<font color="#E5E5E5"> it really really</font><font color="#CCCCCC"> annoying for an</font>

755
00:29:36,059 --> 00:29:41,369
attacker to try to exercise any<font color="#E5E5E5"> of that</font>

756
00:29:38,940 --> 00:29:44,279
programs functionality to escape the

757
00:29:41,369 --> 00:29:46,220
sandbox<font color="#E5E5E5"> so in our minds</font><font color="#CCCCCC"> that you really</font>

758
00:29:44,279 --> 00:29:49,559
go<font color="#E5E5E5"> hand in hand</font>

759
00:29:46,220 --> 00:29:51,389
one other attack that we realized we had

760
00:29:49,559 --> 00:29:53,428
<font color="#CCCCCC">to deal with</font><font color="#E5E5E5"> were a binary downgrade</font>

761
00:29:51,389 --> 00:29:54,809
<font color="#CCCCCC">attacks and we realize</font><font color="#E5E5E5"> this after we saw</font>

762
00:29:53,429 --> 00:29:56,730
these compiler bugs<font color="#E5E5E5"> coming through</font>

763
00:29:54,809 --> 00:29:59,369
<font color="#E5E5E5">because we ended up having to recompile</font>

764
00:29:56,730 --> 00:30:01,109
these binaries<font color="#E5E5E5"> but all of the old</font>

765
00:29:59,369 --> 00:30:03,090
binaries are still out there<font color="#E5E5E5"> they're</font>

766
00:30:01,109 --> 00:30:05,309
<font color="#CCCCCC">still published</font><font color="#E5E5E5"> they're still signed by</font>

767
00:30:03,090 --> 00:30:08,009
Microsoft<font color="#CCCCCC"> which means that they can</font>

768
00:30:05,309 --> 00:30:09,989
still<font color="#E5E5E5"> be loaded by edge</font><font color="#CCCCCC"> if someone</font>

769
00:30:08,009 --> 00:30:11,909
writes that binary<font color="#E5E5E5"> to disk which we</font>

770
00:30:09,989 --> 00:30:14,580
assume they<font color="#CCCCCC"> can do because</font><font color="#E5E5E5"> as I</font><font color="#CCCCCC"> just</font>

771
00:30:11,909 --> 00:30:17,009
said we<font color="#E5E5E5"> assume that that process</font><font color="#CCCCCC"> can do</font>

772
00:30:14,580 --> 00:30:18,570
any functionality<font color="#E5E5E5"> that it has permission</font>

773
00:30:17,009 --> 00:30:21,809
<font color="#CCCCCC">to do an edge certainly has permission</font>

774
00:30:18,570 --> 00:30:23,279
to<font color="#E5E5E5"> write files to the temp folder</font><font color="#CCCCCC"> then</font>

775
00:30:21,809 --> 00:30:25,080
we assume<font color="#E5E5E5"> an attacker can drop an old</font>

776
00:30:23,279 --> 00:30:28,169
version<font color="#E5E5E5"> of a binary that is still signed</font>

777
00:30:25,080 --> 00:30:30,389
by us to disk<font color="#E5E5E5"> and load it</font><font color="#CCCCCC"> so we realized</font>

778
00:30:28,169 --> 00:30:32,159
yeah<font color="#CCCCCC"> okay</font><font color="#E5E5E5"> we really need some way</font><font color="#CCCCCC"> of</font>

779
00:30:30,389 --> 00:30:33,629
<font color="#CCCCCC">control better controlling what binaries</font>

780
00:30:32,159 --> 00:30:38,340
are being loaded we can't just say you

781
00:30:33,629 --> 00:30:41,009
need<font color="#CCCCCC"> to</font><font color="#E5E5E5"> be Microsoft signed and then one</font>

782
00:30:38,340 --> 00:30:43,350
other<font color="#E5E5E5"> really cool attack that we figured</font>

783
00:30:41,009 --> 00:30:47,609
out and this was<font color="#CCCCCC"> actually as part</font><font color="#E5E5E5"> of the</font>

784
00:30:43,350 --> 00:30:49,590
<font color="#E5E5E5">effort with Intel to build CET which was</font>

785
00:30:47,609 --> 00:30:50,730
both forward edge but also more

786
00:30:49,590 --> 00:30:52,918
<font color="#CCCCCC">importantly for</font><font color="#E5E5E5"> us backward edge</font>

787
00:30:50,730 --> 00:30:55,049
<font color="#E5E5E5">protection it's what we call a code</font>

788
00:30:52,919 --> 00:30:56,879
replacement attack so if you look at

789
00:30:55,049 --> 00:30:59,200
this diagram<font color="#CCCCCC"> here I have this super</font>

790
00:30:56,879 --> 00:31:02,320
<font color="#E5E5E5">short call stack</font><font color="#CCCCCC"> there's</font>

791
00:30:59,200 --> 00:31:05,050
DLL called<font color="#CCCCCC"> foo</font><font color="#E5E5E5"> DLL and</font><font color="#CCCCCC"> it has a</font><font color="#E5E5E5"> function</font>

792
00:31:02,320 --> 00:31:08,649
called<font color="#E5E5E5"> start work and that function</font>

793
00:31:05,050 --> 00:31:12,909
<font color="#CCCCCC">calls</font><font color="#E5E5E5"> into a second DLL and</font><font color="#CCCCCC"> it calls the</font>

794
00:31:08,650 --> 00:31:13,600
do work function now<font color="#E5E5E5"> what happens if an</font>

795
00:31:12,910 --> 00:31:16,030
attacker

796
00:31:13,600 --> 00:31:18,129
<font color="#E5E5E5">well that do work function is sitting</font>

797
00:31:16,030 --> 00:31:21,490
there<font color="#E5E5E5"> in</font><font color="#CCCCCC"> a loop doing some processing</font><font color="#E5E5E5"> an</font>

798
00:31:18,130 --> 00:31:25,630
attacker forces<font color="#E5E5E5"> that process to unload</font>

799
00:31:21,490 --> 00:31:29,020
<font color="#E5E5E5">foo DLL and then an attacker forces that</font>

800
00:31:25,630 --> 00:31:31,750
process<font color="#E5E5E5"> to load</font><font color="#CCCCCC"> a new</font><font color="#E5E5E5"> DLL called bar DLL</font>

801
00:31:29,020 --> 00:31:35,020
at the exact same virtual address<font color="#E5E5E5"> that</font>

802
00:31:31,750 --> 00:31:36,970
foo<font color="#E5E5E5"> used to be loaded and of course</font><font color="#CCCCCC"> var</font>

803
00:31:35,020 --> 00:31:41,260
DLL is signed by Microsoft it's a

804
00:31:36,970 --> 00:31:43,570
completely<font color="#E5E5E5"> valid binary well when that</font>

805
00:31:41,260 --> 00:31:47,320
do<font color="#E5E5E5"> work function finally returns even</font>

806
00:31:43,570 --> 00:31:49,059
<font color="#CCCCCC">with</font><font color="#E5E5E5"> CET in place CET will</font><font color="#CCCCCC"> verify you</font>

807
00:31:47,320 --> 00:31:50,800
are<font color="#CCCCCC"> indeed returning to the correct</font>

808
00:31:49,059 --> 00:31:53,770
virtual address that<font color="#E5E5E5"> is saved on the</font>

809
00:31:50,800 --> 00:31:56,200
shadow stack<font color="#E5E5E5"> except that that virtual</font>

810
00:31:53,770 --> 00:31:59,320
address is really not what<font color="#E5E5E5"> anyone was</font>

811
00:31:56,200 --> 00:32:03,340
<font color="#CCCCCC">expecting</font><font color="#E5E5E5"> it's now potentially the start</font>

812
00:31:59,320 --> 00:32:05,770
of a<font color="#CCCCCC"> Rob payload and so we realized</font><font color="#E5E5E5"> yeah</font>

813
00:32:03,340 --> 00:32:07,209
we need to<font color="#E5E5E5"> do some</font><font color="#CCCCCC"> work to prevent</font><font color="#E5E5E5"> this</font>

814
00:32:05,770 --> 00:32:10,000
sort<font color="#E5E5E5"> of attack from happening we can't</font>

815
00:32:07,210 --> 00:32:17,590
just let<font color="#E5E5E5"> people unload code pages at any</font>

816
00:32:10,000 --> 00:32:19,950
you know arbitrary point in time<font color="#E5E5E5"> all</font>

817
00:32:17,590 --> 00:32:24,939
right so we got<font color="#E5E5E5"> about halfway through</font>

818
00:32:19,950 --> 00:32:26,040
2016 I'd say<font color="#E5E5E5"> and what we decided was we</font>

819
00:32:24,940 --> 00:32:28,179
have a big problem

820
00:32:26,040 --> 00:32:30,070
everyone is just attacking<font color="#E5E5E5"> the stack</font>

821
00:32:28,179 --> 00:32:32,440
<font color="#CCCCCC">right now</font><font color="#E5E5E5"> and even</font><font color="#CCCCCC"> though we have a</font>

822
00:32:30,070 --> 00:32:33,970
growing<font color="#E5E5E5"> list of design level issues that</font>

823
00:32:32,440 --> 00:32:36,010
we need<font color="#E5E5E5"> to find ways to mitigate</font><font color="#CCCCCC"> in</font>

824
00:32:33,970 --> 00:32:37,750
control flow guard<font color="#E5E5E5"> mitigating those</font>

825
00:32:36,010 --> 00:32:40,059
issues is actually<font color="#CCCCCC"> gonna</font><font color="#E5E5E5"> have</font><font color="#CCCCCC"> very</font>

826
00:32:37,750 --> 00:32:42,220
little value<font color="#CCCCCC"> at right now</font><font color="#E5E5E5"> because nobody</font>

827
00:32:40,059 --> 00:32:44,050
<font color="#CCCCCC">is</font><font color="#E5E5E5"> bypassing control flow guard by</font>

828
00:32:42,220 --> 00:32:45,640
attacking control flow guard they're

829
00:32:44,050 --> 00:32:47,290
bypassing<font color="#CCCCCC"> control flow guard by</font>

830
00:32:45,640 --> 00:32:50,679
corrupting<font color="#E5E5E5"> return pointers on the stack</font>

831
00:32:47,290 --> 00:32:53,860
<font color="#E5E5E5">and we'd really</font><font color="#CCCCCC"> prefer not to wait for</font>

832
00:32:50,679 --> 00:32:56,800
CET because even if CET ship tomorrow

833
00:32:53,860 --> 00:32:59,320
<font color="#E5E5E5">it's gonna take many years before it has</font>

834
00:32:56,800 --> 00:33:01,360
full market penetration<font color="#E5E5E5"> and so from our</font>

835
00:32:59,320 --> 00:33:04,809
perspective<font color="#CCCCCC"> that means</font><font color="#E5E5E5"> our customers are</font>

836
00:33:01,360 --> 00:33:07,360
<font color="#E5E5E5">still at risk and that is when someone</font>

837
00:33:04,809 --> 00:33:10,389
<font color="#CCCCCC">on our red team Jordan</font><font color="#E5E5E5"> rabbit had a</font>

838
00:33:07,360 --> 00:33:12,189
really awesome<font color="#E5E5E5"> observation he noticed</font>

839
00:33:10,390 --> 00:33:16,840
that<font color="#E5E5E5"> on Windows the</font>

840
00:33:12,190 --> 00:33:18,850
segment register is not used by<font color="#E5E5E5"> user</font>

841
00:33:16,840 --> 00:33:21,129
mode at all<font color="#E5E5E5"> it's a completely unused</font>

842
00:33:18,850 --> 00:33:22,840
register and that allowed<font color="#CCCCCC"> us to</font><font color="#E5E5E5"> do</font>

843
00:33:21,129 --> 00:33:25,870
<font color="#E5E5E5">something really what we thought was</font>

844
00:33:22,840 --> 00:33:28,240
really cool<font color="#E5E5E5"> we create a one terabyte</font>

845
00:33:25,870 --> 00:33:30,549
<font color="#E5E5E5">region</font><font color="#CCCCCC"> of virtual address space in user</font>

846
00:33:28,240 --> 00:33:32,409
mode<font color="#CCCCCC"> and we make this region completely</font>

847
00:33:30,549 --> 00:33:34,450
<font color="#E5E5E5">opaque to</font><font color="#CCCCCC"> user mode so if user mode</font>

848
00:33:32,409 --> 00:33:36,610
tries to query this region using virtual

849
00:33:34,450 --> 00:33:38,559
query<font color="#E5E5E5"> they receive no information about</font>

850
00:33:36,610 --> 00:33:40,418
<font color="#E5E5E5">what is mapped in this region what is</font>

851
00:33:38,559 --> 00:33:44,168
unmapped in this region it's just a big

852
00:33:40,419 --> 00:33:46,299
blob to them and any access violations

853
00:33:44,169 --> 00:33:47,980
in this<font color="#E5E5E5"> region are fatal even</font><font color="#CCCCCC"> if you're</font>

854
00:33:46,299 --> 00:33:50,080
inside of<font color="#CCCCCC"> an exception handler if you</font>

855
00:33:47,980 --> 00:33:53,740
blow up in<font color="#E5E5E5"> this inside of</font><font color="#CCCCCC"> this region</font>

856
00:33:50,080 --> 00:33:55,928
<font color="#E5E5E5">the process crashes and then what we can</font>

857
00:33:53,740 --> 00:33:59,139
<font color="#E5E5E5">do is we can</font><font color="#CCCCCC"> allocate shadow stacks</font><font color="#E5E5E5"> at</font>

858
00:33:55,929 --> 00:34:01,899
random<font color="#CCCCCC"> positions</font><font color="#E5E5E5"> in this region and we</font>

859
00:33:59,139 --> 00:34:04,500
can point the<font color="#E5E5E5"> FS segment register to</font><font color="#CCCCCC"> the</font>

860
00:34:01,899 --> 00:34:07,779
shadow stack of your particular thread

861
00:34:04,500 --> 00:34:11,739
and then what we do<font color="#CCCCCC"> is we use our</font>

862
00:34:07,779 --> 00:34:14,319
compiler to modify all<font color="#CCCCCC"> the code</font><font color="#E5E5E5"> and in</font>

863
00:34:11,739 --> 00:34:17,678
the prologue<font color="#CCCCCC"> of every function we</font><font color="#E5E5E5"> emit</font>

864
00:34:14,319 --> 00:34:20,800
two instructions<font color="#E5E5E5"> that simply move the</font>

865
00:34:17,679 --> 00:34:23,679
return pointer for your function<font color="#CCCCCC"> onto</font>

866
00:34:20,800 --> 00:34:25,929
the shadow stack and in the epilogue<font color="#CCCCCC"> of</font>

867
00:34:23,679 --> 00:34:27,579
the function we retrieve that stored

868
00:34:25,929 --> 00:34:30,010
return pointer from<font color="#E5E5E5"> the shadow stack and</font>

869
00:34:27,579 --> 00:34:31,389
check to see<font color="#CCCCCC"> if it's the same as the</font>

870
00:34:30,010 --> 00:34:34,270
return pointer<font color="#E5E5E5"> that's currently</font><font color="#CCCCCC"> stored</font>

871
00:34:31,389 --> 00:34:36,159
on the normal stack<font color="#E5E5E5"> if it isn't then we</font>

872
00:34:34,270 --> 00:34:39,579
blow up the<font color="#E5E5E5"> process and if it is the</font>

873
00:34:36,159 --> 00:34:42,099
same<font color="#E5E5E5"> then we allow you to return now</font>

874
00:34:39,579 --> 00:34:44,020
<font color="#E5E5E5">there's two really important things to</font>

875
00:34:42,099 --> 00:34:45,730
realize<font color="#E5E5E5"> here the first thing is this</font>

876
00:34:44,020 --> 00:34:47,349
relies on a secret which<font color="#CCCCCC"> is something</font>

877
00:34:45,730 --> 00:34:50,260
<font color="#CCCCCC">that control flow guard had hoped to</font>

878
00:34:47,349 --> 00:34:52,089
<font color="#CCCCCC">avoid</font><font color="#E5E5E5"> the secret is the location of</font><font color="#CCCCCC"> that</font>

879
00:34:50,260 --> 00:34:53,859
shadow stack<font color="#CCCCCC"> if someone knows where it</font>

880
00:34:52,089 --> 00:34:57,310
is<font color="#CCCCCC"> then they can go</font><font color="#E5E5E5"> and corrupt the</font>

881
00:34:53,859 --> 00:34:59,710
<font color="#E5E5E5">values on it the other</font><font color="#CCCCCC"> thing to realize</font>

882
00:34:57,310 --> 00:35:02,290
<font color="#E5E5E5">is that there are two by design race</font>

883
00:34:59,710 --> 00:35:04,930
conditions here if an attacker is able

884
00:35:02,290 --> 00:35:07,420
<font color="#E5E5E5">to corrupt the return pointer on the</font>

885
00:35:04,930 --> 00:35:09,669
normal stack<font color="#E5E5E5"> before it is copied off</font>

886
00:35:07,420 --> 00:35:11,109
<font color="#CCCCCC">onto the shadow stack</font><font color="#E5E5E5"> then return flow</font>

887
00:35:09,670 --> 00:35:13,119
guard will<font color="#E5E5E5"> be bypassed because that</font>

888
00:35:11,109 --> 00:35:15,940
corrupted return pointer will<font color="#CCCCCC"> be used in</font>

889
00:35:13,119 --> 00:35:19,180
the epilogue<font color="#E5E5E5"> check and similarly in the</font>

890
00:35:15,940 --> 00:35:21,339
<font color="#CCCCCC">epilogue</font><font color="#E5E5E5"> if the attacker is able</font><font color="#CCCCCC"> to</font>

891
00:35:19,180 --> 00:35:24,460
corrupt the return pointer on<font color="#CCCCCC"> the normal</font>

892
00:35:21,339 --> 00:35:25,980
stack<font color="#E5E5E5"> after</font><font color="#CCCCCC"> the epilogue check runs</font><font color="#E5E5E5"> but</font>

893
00:35:24,460 --> 00:35:27,990
before that<font color="#CCCCCC"> return in store</font>

894
00:35:25,980 --> 00:35:33,840
<font color="#CCCCCC">and execute</font><font color="#E5E5E5"> then they can also bypass</font>

895
00:35:27,990 --> 00:35:36,689
<font color="#CCCCCC">returns low guard so we did all</font><font color="#E5E5E5"> this</font>

896
00:35:33,840 --> 00:35:39,090
development<font color="#CCCCCC"> and then this ANC attack was</font>

897
00:35:36,690 --> 00:35:42,359
published<font color="#CCCCCC"> and this</font><font color="#E5E5E5"> is a hardware timing</font>

898
00:35:39,090 --> 00:35:45,540
attack<font color="#E5E5E5"> that allows you from</font><font color="#CCCCCC"> javascript</font>

899
00:35:42,359 --> 00:35:47,910
<font color="#E5E5E5">in the</font><font color="#CCCCCC"> web browser to</font><font color="#E5E5E5"> determine if any</font>

900
00:35:45,540 --> 00:35:50,820
<font color="#E5E5E5">particular virtual address is mapped or</font>

901
00:35:47,910 --> 00:35:53,480
not and because<font color="#CCCCCC"> this</font><font color="#E5E5E5"> doesn't rely on</font>

902
00:35:50,820 --> 00:35:55,800
<font color="#E5E5E5">directly accessing the memory</font><font color="#CCCCCC"> its</font>

903
00:35:53,480 --> 00:35:59,190
microarchitecture timing attack<font color="#E5E5E5"> that</font>

904
00:35:55,800 --> 00:36:01,590
looks to see what<font color="#E5E5E5"> pages in the page</font>

905
00:35:59,190 --> 00:36:04,590
table are mapped it means that they<font color="#E5E5E5"> can</font>

906
00:36:01,590 --> 00:36:05,940
<font color="#CCCCCC">actually successfully be anonymize the</font>

907
00:36:04,590 --> 00:36:07,680
shadow stack region and they can figure

908
00:36:05,940 --> 00:36:11,130
<font color="#E5E5E5">out where all</font><font color="#CCCCCC"> the shadows</font><font color="#E5E5E5"> stack pages</font>

909
00:36:07,680 --> 00:36:13,980
are mapped now the POC<font color="#CCCCCC"> that we built in</font>

910
00:36:11,130 --> 00:36:16,500
edge for this<font color="#CCCCCC"> to test our FG</font><font color="#E5E5E5"> it took</font>

911
00:36:13,980 --> 00:36:18,210
several minutes<font color="#E5E5E5"> to run but one thing</font>

912
00:36:16,500 --> 00:36:19,950
<font color="#CCCCCC">that we know about</font><font color="#E5E5E5"> attacks is</font><font color="#CCCCCC"> that they</font>

913
00:36:18,210 --> 00:36:22,080
usually<font color="#E5E5E5"> don't get worse over time they</font>

914
00:36:19,950 --> 00:36:24,210
usually get better over time<font color="#CCCCCC"> so while it</font>

915
00:36:22,080 --> 00:36:25,890
took us a few minutes<font color="#E5E5E5"> give someone a</font>

916
00:36:24,210 --> 00:36:31,470
couple<font color="#E5E5E5"> more years</font><font color="#CCCCCC"> it might</font><font color="#E5E5E5"> take a few</font>

917
00:36:25,890 --> 00:36:33,629
seconds but the real nail in our<font color="#CCCCCC"> F</font>

918
00:36:31,470 --> 00:36:37,799
cheese coffin was actually the race

919
00:36:33,630 --> 00:36:39,270
condition<font color="#E5E5E5"> so when we originally were</font>

920
00:36:37,800 --> 00:36:41,250
thinking about<font color="#CCCCCC"> this race condition that</font>

921
00:36:39,270 --> 00:36:43,530
<font color="#E5E5E5">our FG had we figured it's probably</font>

922
00:36:41,250 --> 00:36:45,359
<font color="#E5E5E5">gonna be pretty</font><font color="#CCCCCC"> impossible to win this</font>

923
00:36:43,530 --> 00:36:48,180
race with any sort<font color="#E5E5E5"> of reliability</font>

924
00:36:45,359 --> 00:36:51,529
<font color="#E5E5E5">because</font><font color="#CCCCCC"> if you attempt</font><font color="#E5E5E5"> to win the race</font>

925
00:36:48,180 --> 00:36:54,029
<font color="#E5E5E5">we think you're either going</font><font color="#CCCCCC"> to write</font>

926
00:36:51,530 --> 00:36:56,040
<font color="#E5E5E5">your you're going to try to corrupt the</font>

927
00:36:54,030 --> 00:36:57,570
return pointer a little bit too late

928
00:36:56,040 --> 00:37:00,390
you're gonna do it after the epilogue

929
00:36:57,570 --> 00:37:03,720
code has run and if you do<font color="#E5E5E5"> that then the</font>

930
00:37:00,390 --> 00:37:06,450
prologue code is<font color="#E5E5E5"> or sorry</font><font color="#CCCCCC"> I mix that up</font>

931
00:37:03,720 --> 00:37:08,250
<font color="#E5E5E5">you're going to do you're right after</font>

932
00:37:06,450 --> 00:37:10,500
the prologue code has run and then<font color="#E5E5E5"> the</font>

933
00:37:08,250 --> 00:37:14,250
epilogue code which checks right<font color="#E5E5E5"> before</font>

934
00:37:10,500 --> 00:37:16,590
you return is<font color="#CCCCCC"> going to blow</font><font color="#E5E5E5"> up or you're</font>

935
00:37:14,250 --> 00:37:18,210
<font color="#E5E5E5">going to do your corruption attempt at</font><font color="#CCCCCC"> a</font>

936
00:37:16,590 --> 00:37:19,770
<font color="#E5E5E5">completely incorrect time and you're</font>

937
00:37:18,210 --> 00:37:21,480
<font color="#E5E5E5">just</font><font color="#CCCCCC"> going</font><font color="#E5E5E5"> to corrupt some random piece</font>

938
00:37:19,770 --> 00:37:24,240
of data on the stack frame<font color="#CCCCCC"> of another</font>

939
00:37:21,480 --> 00:37:27,240
<font color="#E5E5E5">function and maybe that'll cause the</font>

940
00:37:24,240 --> 00:37:30,419
<font color="#E5E5E5">program</font><font color="#CCCCCC"> to crash maybe</font><font color="#E5E5E5"> it won't but in</font>

941
00:37:27,240 --> 00:37:31,529
either<font color="#E5E5E5"> case it won't result in</font><font color="#CCCCCC"> rfg being</font>

942
00:37:30,420 --> 00:37:34,940
<font color="#CCCCCC">defeated because</font><font color="#E5E5E5"> you won't have</font>

943
00:37:31,530 --> 00:37:37,890
successfully corrupted<font color="#E5E5E5"> a return pointer</font>

944
00:37:34,940 --> 00:37:39,280
but we have someone<font color="#E5E5E5"> named</font><font color="#CCCCCC"> Reed borsa</font><font color="#E5E5E5"> who</font>

945
00:37:37,890 --> 00:37:41,170
is on our<font color="#CCCCCC"> red team</font>

946
00:37:39,280 --> 00:37:42,820
and he was taking a<font color="#E5E5E5"> look at our</font><font color="#CCCCCC"> FG and</font>

947
00:37:41,170 --> 00:37:45,850
he was trying<font color="#CCCCCC"> to figure out</font><font color="#E5E5E5"> how</font><font color="#CCCCCC"> can I</font>

948
00:37:42,820 --> 00:37:49,660
win<font color="#E5E5E5"> this race</font><font color="#CCCCCC"> and Reid realized he has</font>

949
00:37:45,850 --> 00:37:51,279
two important things<font color="#E5E5E5"> right</font><font color="#CCCCCC"> now</font><font color="#E5E5E5"> one he</font>

950
00:37:49,660 --> 00:37:53,589
knows where the return pointer is gonna

951
00:37:51,280 --> 00:37:55,510
be stored<font color="#E5E5E5"> on the normal stack because</font>

952
00:37:53,590 --> 00:37:57,460
<font color="#E5E5E5">per our threat model</font><font color="#CCCCCC"> the attacker has</font>

953
00:37:55,510 --> 00:37:59,230
arbitrary read<font color="#E5E5E5"> write and they have full</font>

954
00:37:57,460 --> 00:38:02,230
<font color="#CCCCCC">knowledge of</font><font color="#E5E5E5"> the address space</font><font color="#CCCCCC"> of the</font>

955
00:37:59,230 --> 00:38:05,350
<font color="#E5E5E5">process</font><font color="#CCCCCC"> and Reid also knows that he has</font>

956
00:38:02,230 --> 00:38:07,990
<font color="#E5E5E5">control over at least two threads in a</font>

957
00:38:05,350 --> 00:38:11,560
process in edge you<font color="#CCCCCC"> have the ability to</font>

958
00:38:07,990 --> 00:38:13,419
spawn web<font color="#E5E5E5"> workers and it's possible</font>

959
00:38:11,560 --> 00:38:15,850
through data corruption<font color="#E5E5E5"> that you can end</font>

960
00:38:13,420 --> 00:38:18,280
up bending<font color="#E5E5E5"> the control flow of any of</font>

961
00:38:15,850 --> 00:38:23,529
those threads and getting them to<font color="#CCCCCC"> do</font>

962
00:38:18,280 --> 00:38:27,130
somewhat arbitrary actions<font color="#CCCCCC"> but what Reid</font>

963
00:38:23,530 --> 00:38:29,350
needed is<font color="#E5E5E5"> two things really the first</font>

964
00:38:27,130 --> 00:38:31,060
<font color="#E5E5E5">thing he needs is when he attempts to</font>

965
00:38:29,350 --> 00:38:33,460
<font color="#E5E5E5">win this race when he attempts to</font>

966
00:38:31,060 --> 00:38:35,770
<font color="#E5E5E5">corrupt the return pointer</font><font color="#CCCCCC"> he needs the</font>

967
00:38:33,460 --> 00:38:38,080
process to not blow up<font color="#E5E5E5"> if he fails</font><font color="#CCCCCC"> to</font>

968
00:38:35,770 --> 00:38:40,120
win his race<font color="#CCCCCC"> the second thing</font><font color="#E5E5E5"> he needs</font>

969
00:38:38,080 --> 00:38:43,180
is he needs to actually<font color="#CCCCCC"> be able</font><font color="#E5E5E5"> to win</font>

970
00:38:40,120 --> 00:38:45,130
the race<font color="#CCCCCC"> sometimes</font><font color="#E5E5E5"> and all of this kind</font>

971
00:38:43,180 --> 00:38:48,490
of comes<font color="#E5E5E5"> together with this realization</font>

972
00:38:45,130 --> 00:38:51,850
<font color="#CCCCCC">that if you look at this histogram that</font>

973
00:38:48,490 --> 00:38:54,790
Reid created we<font color="#E5E5E5"> have what we call thread</font>

974
00:38:51,850 --> 00:38:57,130
<font color="#CCCCCC">1 and thread 1 spends the vast majority</font>

975
00:38:54,790 --> 00:38:59,770
<font color="#CCCCCC">of its time</font><font color="#E5E5E5"> inside of a sleep function</font>

976
00:38:57,130 --> 00:39:02,650
<font color="#E5E5E5">and that sleep function does</font><font color="#CCCCCC"> absolutely</font>

977
00:38:59,770 --> 00:39:05,470
<font color="#E5E5E5">nothing</font><font color="#CCCCCC"> and every once in a while that</font>

978
00:39:02,650 --> 00:39:07,810
<font color="#CCCCCC">thread will wake up and it will call get</font>

979
00:39:05,470 --> 00:39:10,540
<font color="#CCCCCC">length and get length will call string</font>

980
00:39:07,810 --> 00:39:12,610
<font color="#CCCCCC">length</font><font color="#E5E5E5"> and he decides he is going</font><font color="#CCCCCC"> to</font>

981
00:39:10,540 --> 00:39:15,820
target the return pointer of that string

982
00:39:12,610 --> 00:39:18,460
length function<font color="#E5E5E5"> now if you look at the</font>

983
00:39:15,820 --> 00:39:20,650
stack depth over time you can see that

984
00:39:18,460 --> 00:39:23,350
at the<font color="#CCCCCC"> virtual address that that return</font>

985
00:39:20,650 --> 00:39:25,780
pointer is stored<font color="#E5E5E5"> the vast majority of</font>

986
00:39:23,350 --> 00:39:27,549
the time<font color="#CCCCCC"> that memory isn't being used by</font>

987
00:39:25,780 --> 00:39:29,770
anything<font color="#E5E5E5"> because</font><font color="#CCCCCC"> the sleep function</font>

988
00:39:27,550 --> 00:39:32,080
stack frame is<font color="#E5E5E5"> is much higher it's it's</font>

989
00:39:29,770 --> 00:39:34,780
it's<font color="#E5E5E5"> not</font><font color="#CCCCCC"> gonna</font><font color="#E5E5E5"> be corrupted and that</font>

990
00:39:32,080 --> 00:39:36,940
<font color="#CCCCCC">means that if you perform</font><font color="#E5E5E5"> a right to</font>

991
00:39:34,780 --> 00:39:38,830
that virtual address at any given point

992
00:39:36,940 --> 00:39:40,120
in<font color="#E5E5E5"> time on</font><font color="#CCCCCC"> average you're going to be</font>

993
00:39:38,830 --> 00:39:42,400
corrupting nothing

994
00:39:40,120 --> 00:39:44,170
now that's<font color="#E5E5E5"> very good because that</font><font color="#CCCCCC"> means</font>

995
00:39:42,400 --> 00:39:47,350
that<font color="#E5E5E5"> his first condition is satisfied</font>

996
00:39:44,170 --> 00:39:50,710
<font color="#E5E5E5">failures to win the race do not actually</font>

997
00:39:47,350 --> 00:39:52,480
<font color="#E5E5E5">crash the process and what this allows</font>

998
00:39:50,710 --> 00:39:52,790
him to do is he can create<font color="#E5E5E5"> a second</font>

999
00:39:52,480 --> 00:39:55,490
<font color="#E5E5E5">threat</font>

1000
00:39:52,790 --> 00:39:58,310
and that second thread just enters a

1001
00:39:55,490 --> 00:40:00,919
very tight loop and all that<font color="#E5E5E5"> that loop</font>

1002
00:39:58,310 --> 00:40:03,799
does is<font color="#CCCCCC"> it</font><font color="#E5E5E5"> attempts</font><font color="#CCCCCC"> to write a corrupted</font>

1003
00:40:00,920 --> 00:40:05,360
return pointer to<font color="#CCCCCC"> that virtual address</font>

1004
00:40:03,800 --> 00:40:08,480
where the legitimate return pointer is

1005
00:40:05,360 --> 00:40:11,000
stored<font color="#E5E5E5"> now when he starts that loop</font><font color="#CCCCCC"> on</font>

1006
00:40:08,480 --> 00:40:12,830
average you're<font color="#E5E5E5"> going to be in the sleep</font>

1007
00:40:11,000 --> 00:40:15,620
function<font color="#E5E5E5"> on the first thread meaning</font>

1008
00:40:12,830 --> 00:40:18,410
that that loop is going to be corrupting

1009
00:40:15,620 --> 00:40:21,319
nothing<font color="#E5E5E5"> however when the get length</font>

1010
00:40:18,410 --> 00:40:23,629
<font color="#CCCCCC">function is called</font><font color="#E5E5E5"> and it goes and calls</font>

1011
00:40:21,320 --> 00:40:26,690
the string<font color="#E5E5E5"> length function that loop is</font>

1012
00:40:23,630 --> 00:40:30,320
still running<font color="#CCCCCC"> and that loop actually</font><font color="#E5E5E5"> has</font>

1013
00:40:26,690 --> 00:40:33,020
effectively<font color="#E5E5E5"> a 100% probability that it</font>

1014
00:40:30,320 --> 00:40:35,330
will<font color="#E5E5E5"> overwrite that return pointer after</font>

1015
00:40:33,020 --> 00:40:38,300
the call<font color="#E5E5E5"> instruction is made but before</font>

1016
00:40:35,330 --> 00:40:40,460
that prologue code can safely store the

1017
00:40:38,300 --> 00:40:44,330
return pointer to the shadow stack and

1018
00:40:40,460 --> 00:40:46,850
so I think in<font color="#E5E5E5"> reeds POC that he made he</font>

1019
00:40:44,330 --> 00:40:50,110
did<font color="#E5E5E5"> five thousand attempts and I don't</font>

1020
00:40:46,850 --> 00:40:52,790
<font color="#CCCCCC">think he saw a</font><font color="#E5E5E5"> single failure and then</font>

1021
00:40:50,110 --> 00:40:57,110
we worked<font color="#E5E5E5"> and built a POC</font>

1022
00:40:52,790 --> 00:40:59,360
inside of the edge browser and that POC

1023
00:40:57,110 --> 00:41:01,970
I think was<font color="#CCCCCC"> also 100% reliable</font>

1024
00:40:59,360 --> 00:41:03,560
so with control flow guard in<font color="#CCCCCC"> place with</font>

1025
00:41:01,970 --> 00:41:06,799
<font color="#E5E5E5">return flow guard in place</font><font color="#CCCCCC"> we were able</font>

1026
00:41:03,560 --> 00:41:08,930
<font color="#CCCCCC">to hijack control flow by exploiting</font>

1027
00:41:06,800 --> 00:41:12,260
<font color="#E5E5E5">this race condition with basically</font><font color="#CCCCCC"> 100%</font>

1028
00:41:08,930 --> 00:41:15,350
<font color="#CCCCCC">probability and this was a</font><font color="#E5E5E5"> little bit</font>

1029
00:41:12,260 --> 00:41:17,810
<font color="#E5E5E5">unfortunate for us</font><font color="#CCCCCC"> to say the</font><font color="#E5E5E5"> least</font><font color="#CCCCCC"> so</font>

1030
00:41:15,350 --> 00:41:19,400
we spent<font color="#CCCCCC"> some time you know</font><font color="#E5E5E5"> looking at</font>

1031
00:41:17,810 --> 00:41:21,590
this and<font color="#CCCCCC"> trying</font><font color="#E5E5E5"> to think is there</font><font color="#CCCCCC"> a way</font>

1032
00:41:19,400 --> 00:41:24,500
<font color="#CCCCCC">that</font><font color="#E5E5E5"> we can fix</font><font color="#CCCCCC"> our FG to make it</font>

1033
00:41:21,590 --> 00:41:26,750
resistant to<font color="#E5E5E5"> this race condition and we</font>

1034
00:41:24,500 --> 00:41:29,270
came up<font color="#CCCCCC"> with a few proposals but those</font>

1035
00:41:26,750 --> 00:41:31,880
proposals<font color="#CCCCCC"> either would hurt performance</font>

1036
00:41:29,270 --> 00:41:33,560
<font color="#E5E5E5">quite a bit or they would really blow up</font>

1037
00:41:31,880 --> 00:41:36,080
the size of the binary<font color="#E5E5E5"> because we need</font>

1038
00:41:33,560 --> 00:41:38,000
to add lots<font color="#CCCCCC"> more code to the prologue</font>

1039
00:41:36,080 --> 00:41:40,970
and<font color="#CCCCCC"> epilogue</font><font color="#E5E5E5"> or potentially</font><font color="#CCCCCC"> to the</font>

1040
00:41:38,000 --> 00:41:42,980
function callers<font color="#E5E5E5"> and neither of those</font>

1041
00:41:40,970 --> 00:41:45,109
was acceptable for<font color="#E5E5E5"> shipping the</font>

1042
00:41:42,980 --> 00:41:50,780
mitigation and so it ended up<font color="#E5E5E5"> being</font>

1043
00:41:45,110 --> 00:41:54,170
killed now while we were<font color="#E5E5E5"> going</font><font color="#CCCCCC"> through</font>

1044
00:41:50,780 --> 00:41:56,450
this<font color="#E5E5E5"> we realized a few things</font><font color="#CCCCCC"> techniques</font>

1045
00:41:54,170 --> 00:41:58,400
<font color="#E5E5E5">exist to extend race condition windows</font>

1046
00:41:56,450 --> 00:42:00,620
<font color="#E5E5E5">one way is if you have a race</font><font color="#CCCCCC"> condition</font>

1047
00:41:58,400 --> 00:42:04,100
that crosses cache line boundaries and

1048
00:42:00,620 --> 00:42:06,290
so some of<font color="#E5E5E5"> the code is paged out then</font>

1049
00:42:04,100 --> 00:42:08,360
<font color="#CCCCCC">that naturally extends the race</font>

1050
00:42:06,290 --> 00:42:10,940
<font color="#E5E5E5">for you because the</font><font color="#CCCCCC"> CPU</font><font color="#E5E5E5"> will have to go</font>

1051
00:42:08,360 --> 00:42:13,850
and spend<font color="#E5E5E5"> time loading in code to finish</font>

1052
00:42:10,940 --> 00:42:15,980
its execution<font color="#E5E5E5"> another way that you can</font>

1053
00:42:13,850 --> 00:42:19,130
<font color="#E5E5E5">make races even easier to win is you can</font>

1054
00:42:15,980 --> 00:42:21,230
call system calls like suspend thread

1055
00:42:19,130 --> 00:42:23,480
<font color="#E5E5E5">and get</font><font color="#CCCCCC"> direct contacts get thread</font>

1056
00:42:21,230 --> 00:42:25,790
context<font color="#E5E5E5"> so you can actually suspend and</font>

1057
00:42:23,480 --> 00:42:28,190
suspend an other thread and then<font color="#CCCCCC"> you can</font>

1058
00:42:25,790 --> 00:42:29,660
retrieve<font color="#E5E5E5"> its register state and you can</font>

1059
00:42:28,190 --> 00:42:32,060
<font color="#CCCCCC">look at the instruction pointer and see</font>

1060
00:42:29,660 --> 00:42:34,460
am I at<font color="#CCCCCC"> the right place</font><font color="#E5E5E5"> to start</font>

1061
00:42:32,060 --> 00:42:38,360
<font color="#E5E5E5">executing my</font><font color="#CCCCCC"> Reis</font><font color="#E5E5E5"> you know my race</font>

1062
00:42:34,460 --> 00:42:42,140
condition or not we also<font color="#E5E5E5"> realized that</font>

1063
00:42:38,360 --> 00:42:44,900
<font color="#E5E5E5">more races</font><font color="#CCCCCC"> exist</font><font color="#E5E5E5"> in our existing</font><font color="#CCCCCC"> CFI</font>

1064
00:42:42,140 --> 00:42:47,500
strategy<font color="#E5E5E5"> so the unwinder in Windows</font>

1065
00:42:44,900 --> 00:42:50,420
which is used for<font color="#E5E5E5"> handling exceptions</font>

1066
00:42:47,500 --> 00:42:51,860
<font color="#CCCCCC">among other things has a number</font><font color="#E5E5E5"> of</font>

1067
00:42:50,420 --> 00:42:54,200
places<font color="#E5E5E5"> where it will go and it</font><font color="#CCCCCC"> will set</font>

1068
00:42:51,860 --> 00:42:55,790
CPU register<font color="#E5E5E5"> state and this is actually</font>

1069
00:42:54,200 --> 00:42:58,129
one of the<font color="#CCCCCC"> places where NT</font><font color="#E5E5E5"> continue is</font>

1070
00:42:55,790 --> 00:43:00,410
called<font color="#E5E5E5"> now we have checks in</font><font color="#CCCCCC"> place</font><font color="#E5E5E5"> an NT</font>

1071
00:42:58,130 --> 00:43:01,640
continue to say oh you can only set the

1072
00:43:00,410 --> 00:43:03,649
<font color="#E5E5E5">instruction pointer if you know where</font>

1073
00:43:01,640 --> 00:43:08,060
the stacks are but that's all vulnerable

1074
00:43:03,650 --> 00:43:09,620
<font color="#E5E5E5">to racing and the CFG check function</font>

1075
00:43:08,060 --> 00:43:11,930
<font color="#E5E5E5">itself</font><font color="#CCCCCC"> actually has a race condition</font>

1076
00:43:09,620 --> 00:43:14,270
built into it in combination<font color="#E5E5E5"> with code</font>

1077
00:43:11,930 --> 00:43:16,129
replacement attacks<font color="#E5E5E5"> if you can suspend</font><font color="#CCCCCC"> a</font>

1078
00:43:14,270 --> 00:43:19,160
thread<font color="#E5E5E5"> right after the CFG check</font>

1079
00:43:16,130 --> 00:43:20,810
<font color="#CCCCCC">function is made and then unload the</font><font color="#E5E5E5"> DLL</font>

1080
00:43:19,160 --> 00:43:22,910
that<font color="#CCCCCC"> you are about to in directly</font><font color="#E5E5E5"> call</font>

1081
00:43:20,810 --> 00:43:25,040
into and load a new<font color="#CCCCCC"> dll in its place</font>

1082
00:43:22,910 --> 00:43:27,589
then you're<font color="#E5E5E5"> going to indirectly call</font>

1083
00:43:25,040 --> 00:43:29,180
<font color="#CCCCCC">into who knows what whatever the</font>

1084
00:43:27,590 --> 00:43:32,590
attacker chooses<font color="#E5E5E5"> but at that point the</font>

1085
00:43:29,180 --> 00:43:36,049
CFG check function<font color="#E5E5E5"> has already executed</font>

1086
00:43:32,590 --> 00:43:38,390
<font color="#E5E5E5">so what we realized here is that for</font><font color="#CCCCCC"> CFI</font>

1087
00:43:36,050 --> 00:43:41,000
to be robust against targets that we

1088
00:43:38,390 --> 00:43:43,009
really care about<font color="#E5E5E5"> like web browsers it</font>

1089
00:43:41,000 --> 00:43:44,960
is not<font color="#CCCCCC"> sufficient to threat model</font>

1090
00:43:43,010 --> 00:43:47,090
against an arbitrary<font color="#CCCCCC"> readwrite primitive</font>

1091
00:43:44,960 --> 00:43:49,790
<font color="#E5E5E5">you must threat model against an</font>

1092
00:43:47,090 --> 00:43:52,460
arbitrary<font color="#CCCCCC"> readwrite</font><font color="#E5E5E5"> at arbitrary times</font>

1093
00:43:49,790 --> 00:43:55,370
primitive<font color="#E5E5E5"> so all race conditions are</font>

1094
00:43:52,460 --> 00:43:58,010
fair game<font color="#E5E5E5"> and it's worth</font><font color="#CCCCCC"> noting that</font>

1095
00:43:55,370 --> 00:43:59,660
today there is no<font color="#CCCCCC"> CFI solution that is</font>

1096
00:43:58,010 --> 00:44:02,930
robust against<font color="#E5E5E5"> this sort of threat model</font>

1097
00:43:59,660 --> 00:44:05,540
<font color="#E5E5E5">and I don't think</font><font color="#CCCCCC"> that aside from CFG</font>

1098
00:44:02,930 --> 00:44:07,190
<font color="#E5E5E5">there's a nice</font><font color="#CCCCCC"> EFI solutions that are</font>

1099
00:44:05,540 --> 00:44:09,800
<font color="#E5E5E5">attempting to be robust against this</font>

1100
00:44:07,190 --> 00:44:15,350
threat model but I could be wrong<font color="#CCCCCC"> about</font>

1101
00:44:09,800 --> 00:44:18,770
that<font color="#CCCCCC"> okay</font><font color="#E5E5E5"> so that was a huge information</font>

1102
00:44:15,350 --> 00:44:19,940
<font color="#CCCCCC">dump we're gonna pull out of</font><font color="#E5E5E5"> problems we</font>

1103
00:44:18,770 --> 00:44:23,380
found<font color="#E5E5E5"> talk a little</font>

1104
00:44:19,940 --> 00:44:28,160
about some changes we've made now<font color="#CCCCCC"> in</font>

1105
00:44:23,380 --> 00:44:30,680
<font color="#CCCCCC">2016 this</font><font color="#E5E5E5"> was sort of as</font><font color="#CCCCCC"> rfg work was in</font>

1106
00:44:28,160 --> 00:44:32,899
development<font color="#E5E5E5"> we continued to make some</font>

1107
00:44:30,680 --> 00:44:34,430
<font color="#CCCCCC">improvements to control flow guard</font><font color="#E5E5E5"> one</font>

1108
00:44:32,900 --> 00:44:37,250
<font color="#E5E5E5">of them one of the image load</font>

1109
00:44:34,430 --> 00:44:39,379
restrictions<font color="#CCCCCC"> or a mitigation</font><font color="#E5E5E5"> that falls</font>

1110
00:44:37,250 --> 00:44:42,800
into the image load restrictions<font color="#CCCCCC"> pillar</font>

1111
00:44:39,380 --> 00:44:44,840
was enabling<font color="#CCCCCC"> No Child process for edge</font>

1112
00:44:42,800 --> 00:44:49,280
<font color="#E5E5E5">so this makes it so</font><font color="#CCCCCC"> that edge can never</font>

1113
00:44:44,840 --> 00:44:51,470
spawn child processes<font color="#CCCCCC"> and we also made</font>

1114
00:44:49,280 --> 00:44:55,340
<font color="#CCCCCC">some tactical</font><font color="#E5E5E5"> changes we hardened the</font>

1115
00:44:51,470 --> 00:45:02,689
long jump<font color="#E5E5E5"> call a little bit but it's</font>

1116
00:44:55,340 --> 00:45:04,730
<font color="#E5E5E5">still not robust all right so in 2017 we</font>

1117
00:45:02,690 --> 00:45:08,090
didn't really<font color="#E5E5E5"> do quite</font><font color="#CCCCCC"> so much research</font>

1118
00:45:04,730 --> 00:45:09,980
into<font color="#CCCCCC"> CFI</font><font color="#E5E5E5"> at</font><font color="#CCCCCC"> pwned own we continued to</font>

1119
00:45:08,090 --> 00:45:11,570
see<font color="#CCCCCC"> the same trend</font><font color="#E5E5E5"> attackers were going</font>

1120
00:45:09,980 --> 00:45:13,520
<font color="#CCCCCC">after the stack they were creating</font>

1121
00:45:11,570 --> 00:45:15,680
<font color="#E5E5E5">rewrite execute memory</font><font color="#CCCCCC"> and they were</font>

1122
00:45:13,520 --> 00:45:17,180
delivering their payload<font color="#CCCCCC"> that way and on</font>

1123
00:45:15,680 --> 00:45:19,790
the<font color="#CCCCCC"> bounty most of the cases</font><font color="#E5E5E5"> that we</font>

1124
00:45:17,180 --> 00:45:22,009
were receiving revolved around binaries

1125
00:45:19,790 --> 00:45:24,520
<font color="#CCCCCC">that were missing instrumentation but</font><font color="#E5E5E5"> we</font>

1126
00:45:22,010 --> 00:45:26,810
did<font color="#CCCCCC"> receive</font><font color="#E5E5E5"> a few interesting bugs in</font>

1127
00:45:24,520 --> 00:45:29,060
arbitrary code generation<font color="#E5E5E5"> which</font><font color="#CCCCCC"> I'm</font>

1128
00:45:26,810 --> 00:45:32,960
going<font color="#E5E5E5"> to talk</font><font color="#CCCCCC"> about</font><font color="#E5E5E5"> here in a second</font>

1129
00:45:29,060 --> 00:45:35,570
arbitrary<font color="#E5E5E5"> code generation is our dynamic</font>

1130
00:45:32,960 --> 00:45:38,630
code restriction pillar<font color="#E5E5E5"> so this prevents</font>

1131
00:45:35,570 --> 00:45:42,890
<font color="#E5E5E5">a process from allocating new executable</font>

1132
00:45:38,630 --> 00:45:44,630
memory<font color="#E5E5E5"> and so with this change in place</font>

1133
00:45:42,890 --> 00:45:47,150
that should no longer<font color="#E5E5E5"> be possible for</font>

1134
00:45:44,630 --> 00:45:48,860
attackers to<font color="#E5E5E5"> use a raw payload to</font>

1135
00:45:47,150 --> 00:45:53,810
virtual protect<font color="#E5E5E5"> read write execute</font>

1136
00:45:48,860 --> 00:45:56,270
memory<font color="#CCCCCC"> we</font><font color="#E5E5E5"> also enabled the no mandatory</font>

1137
00:45:53,810 --> 00:45:58,520
<font color="#CCCCCC">low label images</font><font color="#E5E5E5"> mitigation</font><font color="#CCCCCC"> for edge</font>

1138
00:45:56,270 --> 00:46:00,830
that's a very long mitigation name what

1139
00:45:58,520 --> 00:46:03,410
that means is when<font color="#E5E5E5"> edge writes a file to</font>

1140
00:46:00,830 --> 00:46:05,270
disk because<font color="#E5E5E5"> edge is</font><font color="#CCCCCC"> sandboxed</font><font color="#E5E5E5"> that file</font>

1141
00:46:03,410 --> 00:46:06,830
will<font color="#E5E5E5"> have a low mandatory label on</font><font color="#CCCCCC"> it</font>

1142
00:46:05,270 --> 00:46:09,170
<font color="#E5E5E5">and there's no way for edge to remove</font>

1143
00:46:06,830 --> 00:46:11,029
that and all<font color="#E5E5E5"> that this mitigation does</font>

1144
00:46:09,170 --> 00:46:14,030
is it prevents<font color="#E5E5E5"> edge from ever loading a</font>

1145
00:46:11,030 --> 00:46:16,490
<font color="#CCCCCC">DLL or</font><font color="#E5E5E5"> exe that has a low mandatory</font>

1146
00:46:14,030 --> 00:46:18,740
label this<font color="#CCCCCC"> is intended to stop downgrade</font>

1147
00:46:16,490 --> 00:46:20,479
attacks<font color="#CCCCCC"> you can't write an old version</font>

1148
00:46:18,740 --> 00:46:23,720
<font color="#E5E5E5">of a Microsoft signed binary to disk and</font>

1149
00:46:20,480 --> 00:46:27,140
<font color="#E5E5E5">then load it and we also enabled support</font>

1150
00:46:23,720 --> 00:46:29,629
for CFG<font color="#E5E5E5"> strict mode in Windows so it is</font>

1151
00:46:27,140 --> 00:46:32,270
now possible for<font color="#E5E5E5"> a process</font><font color="#CCCCCC"> to say I only</font>

1152
00:46:29,630 --> 00:46:34,780
want<font color="#E5E5E5"> images loaded that support control</font>

1153
00:46:32,270 --> 00:46:34,780
flow garden

1154
00:46:36,909 --> 00:46:42,679
<font color="#E5E5E5">all right so after</font><font color="#CCCCCC"> all of this work this</font>

1155
00:46:40,519 --> 00:46:43,968
is you know<font color="#E5E5E5"> well over</font><font color="#CCCCCC"> five</font><font color="#E5E5E5"> years of</font>

1156
00:46:42,679 --> 00:46:46,130
effort and over three years<font color="#E5E5E5"> of having</font>

1157
00:46:43,969 --> 00:46:48,919
<font color="#CCCCCC">control flow guard</font><font color="#E5E5E5"> actually enabled in</font>

1158
00:46:46,130 --> 00:46:52,339
<font color="#E5E5E5">Windows and shipping where are we now</font>

1159
00:46:48,919 --> 00:46:55,578
well we do<font color="#E5E5E5"> have control flow guard it is</font>

1160
00:46:52,339 --> 00:46:58,519
shipping<font color="#E5E5E5"> it does have a few design level</font>

1161
00:46:55,579 --> 00:47:01,039
problems right<font color="#CCCCCC"> now but it's there split</font>

1162
00:46:58,519 --> 00:47:02,749
<font color="#CCCCCC">stacks we still</font><font color="#E5E5E5"> aren't there yet image</font>

1163
00:47:01,039 --> 00:47:05,209
load<font color="#E5E5E5"> restrictions</font><font color="#CCCCCC"> we've made pretty good</font>

1164
00:47:02,749 --> 00:47:06,558
progress<font color="#CCCCCC"> there's</font><font color="#E5E5E5"> just one thing really</font>

1165
00:47:05,209 --> 00:47:08,479
left<font color="#E5E5E5"> to be done that I'll talk about in</font>

1166
00:47:06,559 --> 00:47:11,569
a second<font color="#CCCCCC"> but we do</font><font color="#E5E5E5"> have code integrity</font>

1167
00:47:08,479 --> 00:47:13,249
we do have no<font color="#E5E5E5"> child process you cannot</font>

1168
00:47:11,569 --> 00:47:15,140
load images<font color="#E5E5E5"> that have a mandatory low</font>

1169
00:47:13,249 --> 00:47:16,959
label<font color="#E5E5E5"> and you can't load images over the</font>

1170
00:47:15,140 --> 00:47:19,729
<font color="#CCCCCC">network</font><font color="#E5E5E5"> so effectively you</font><font color="#CCCCCC"> can only load</font>

1171
00:47:16,959 --> 00:47:21,799
Microsoft signed images that are already

1172
00:47:19,729 --> 00:47:25,549
<font color="#E5E5E5">installed on the</font><font color="#CCCCCC"> system by a higher</font>

1173
00:47:21,799 --> 00:47:27,649
privileged user<font color="#E5E5E5"> and on the dynamic code</font>

1174
00:47:25,549 --> 00:47:30,140
restrictions pillar<font color="#E5E5E5"> we do have arbitrary</font>

1175
00:47:27,649 --> 00:47:31,640
code guard enabled and it is working<font color="#E5E5E5"> as</font>

1176
00:47:30,140 --> 00:47:37,189
we<font color="#CCCCCC"> intend it to you there have been some</font>

1177
00:47:31,640 --> 00:47:39,109
bugs<font color="#E5E5E5"> but the design</font><font color="#CCCCCC"> has held up so what</font>

1178
00:47:37,189 --> 00:47:40,939
is left to do and I realize this text is

1179
00:47:39,109 --> 00:47:44,209
very<font color="#E5E5E5"> small because</font><font color="#CCCCCC"> there are a number of</font>

1180
00:47:40,939 --> 00:47:45,678
<font color="#E5E5E5">things left to do</font><font color="#CCCCCC"> for code integrity</font>

1181
00:47:44,209 --> 00:47:47,839
guard the main thing that we need to<font color="#CCCCCC"> do</font>

1182
00:47:45,679 --> 00:47:50,299
is we need<font color="#CCCCCC"> to have a way to be more</font>

1183
00:47:47,839 --> 00:47:52,729
<font color="#CCCCCC">granular with what binaries we allow to</font>

1184
00:47:50,299 --> 00:47:54,649
be loaded into a process<font color="#E5E5E5"> so even though</font>

1185
00:47:52,729 --> 00:47:56,359
only Microsoft signed binaries<font color="#CCCCCC"> that</font>

1186
00:47:54,649 --> 00:47:58,699
<font color="#E5E5E5">we're already on the system can be</font>

1187
00:47:56,359 --> 00:48:00,619
<font color="#CCCCCC">loaded in edge right now we really</font><font color="#E5E5E5"> need</font>

1188
00:47:58,699 --> 00:48:03,559
<font color="#E5E5E5">to stop things like scripting engines</font>

1189
00:48:00,619 --> 00:48:04,969
from<font color="#E5E5E5"> being loaded in for arbitrary code</font>

1190
00:48:03,559 --> 00:48:07,999
guard<font color="#E5E5E5"> we think it's working as intended</font>

1191
00:48:04,969 --> 00:48:11,059
<font color="#CCCCCC">- the bugs</font><font color="#E5E5E5"> that people have found for</font>

1192
00:48:07,999 --> 00:48:13,578
CET well we need hardware<font color="#E5E5E5"> to be released</font>

1193
00:48:11,059 --> 00:48:16,609
and for control flow guard we have a

1194
00:48:13,579 --> 00:48:18,439
<font color="#CCCCCC">number of</font><font color="#E5E5E5"> things we need</font><font color="#CCCCCC"> to do to</font>

1195
00:48:16,609 --> 00:48:21,380
mitigate<font color="#E5E5E5"> these code replacement attacks</font>

1196
00:48:18,439 --> 00:48:23,509
<font color="#CCCCCC">we really need to prevent sandbox</font>

1197
00:48:21,380 --> 00:48:26,119
processes from<font color="#E5E5E5"> being able to unmapped</font>

1198
00:48:23,509 --> 00:48:28,099
executable code<font color="#E5E5E5"> pages unless</font><font color="#CCCCCC"> a broker</font>

1199
00:48:26,119 --> 00:48:30,259
says it's<font color="#CCCCCC"> okay</font><font color="#E5E5E5"> and presumably the broker</font>

1200
00:48:28,099 --> 00:48:31,969
would need to go<font color="#CCCCCC"> through the call stacks</font>

1201
00:48:30,259 --> 00:48:33,380
of all the threads<font color="#E5E5E5"> to</font><font color="#CCCCCC"> make sure</font><font color="#E5E5E5"> that</font>

1202
00:48:31,969 --> 00:48:35,749
none of<font color="#E5E5E5"> those threads have a call stack</font>

1203
00:48:33,380 --> 00:48:39,289
that's going to<font color="#CCCCCC"> return</font><font color="#E5E5E5"> into that code</font>

1204
00:48:35,749 --> 00:48:40,698
page you're<font color="#CCCCCC"> on mapping similarly for</font>

1205
00:48:39,289 --> 00:48:43,159
these read-only memory attacks that<font color="#E5E5E5"> we</font>

1206
00:48:40,699 --> 00:48:46,370
have<font color="#E5E5E5"> we also need to have a broker</font><font color="#CCCCCC"> that</font>

1207
00:48:43,159 --> 00:48:48,890
decides if a process is allowed<font color="#CCCCCC"> to</font>

1208
00:48:46,370 --> 00:48:51,680
on map or change the<font color="#E5E5E5"> memory protection</font>

1209
00:48:48,890 --> 00:48:53,839
of a read-only memory page and it would

1210
00:48:51,680 --> 00:48:57,440
probably<font color="#E5E5E5"> just</font><font color="#CCCCCC"> be for specific protected</font>

1211
00:48:53,840 --> 00:49:00,560
read-only memory pages<font color="#CCCCCC"> race conditions</font>

1212
00:48:57,440 --> 00:49:02,300
<font color="#CCCCCC">is kind of an open-ended</font><font color="#E5E5E5"> question</font><font color="#CCCCCC"> we</font>

1213
00:49:00,560 --> 00:49:04,970
know that we probably<font color="#E5E5E5"> need</font><font color="#CCCCCC"> to move the</font>

1214
00:49:02,300 --> 00:49:07,880
entire unwinder out of the process<font color="#E5E5E5"> and</font>

1215
00:49:04,970 --> 00:49:09,799
we think that<font color="#E5E5E5"> the CFG</font><font color="#CCCCCC"> check-raise</font>

1216
00:49:07,880 --> 00:49:13,250
condition<font color="#E5E5E5"> that I talked about will be</font>

1217
00:49:09,800 --> 00:49:16,940
killed by code replacement attacks<font color="#E5E5E5"> being</font>

1218
00:49:13,250 --> 00:49:19,690
mitigated<font color="#E5E5E5"> all stack related issues we</font>

1219
00:49:16,940 --> 00:49:21,980
<font color="#CCCCCC">think will be addressed by CET and</font>

1220
00:49:19,690 --> 00:49:22,970
<font color="#E5E5E5">coarse-grain</font><font color="#CCCCCC"> CFI limitations are</font>

1221
00:49:21,980 --> 00:49:26,060
something that we're<font color="#E5E5E5"> gonna continue</font>

1222
00:49:22,970 --> 00:49:28,129
<font color="#E5E5E5">doing</font><font color="#CCCCCC"> research on finer grained</font><font color="#E5E5E5"> CFI but</font>

1223
00:49:26,060 --> 00:49:32,240
we're not<font color="#CCCCCC"> 100%</font><font color="#E5E5E5"> sure what</font><font color="#CCCCCC"> we can do there</font>

1224
00:49:28,130 --> 00:49:34,940
yet<font color="#E5E5E5"> all right</font><font color="#CCCCCC"> so what would</font><font color="#E5E5E5"> I like</font><font color="#CCCCCC"> you</font>

1225
00:49:32,240 --> 00:49:37,850
to take<font color="#CCCCCC"> away</font><font color="#E5E5E5"> from this well doing good</font>

1226
00:49:34,940 --> 00:49:39,740
<font color="#CCCCCC">CFI</font><font color="#E5E5E5"> is really hard it is not an easy</font>

1227
00:49:37,850 --> 00:49:41,360
<font color="#E5E5E5">solution there's lots of performance</font>

1228
00:49:39,740 --> 00:49:43,790
penalties involved<font color="#E5E5E5"> lots of engineering</font>

1229
00:49:41,360 --> 00:49:45,710
<font color="#CCCCCC">effort involved but for</font><font color="#E5E5E5"> this thing to be</font>

1230
00:49:43,790 --> 00:49:47,720
robust it really needs<font color="#CCCCCC"> to be modeled</font>

1231
00:49:45,710 --> 00:49:50,690
against arbitrary<font color="#CCCCCC"> readwrite at arbitrary</font>

1232
00:49:47,720 --> 00:49:52,520
times nobody<font color="#E5E5E5"> actually</font><font color="#CCCCCC"> is robust against</font>

1233
00:49:50,690 --> 00:49:54,020
<font color="#E5E5E5">this right now but we're trying</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> be</font>

1234
00:49:52,520 --> 00:49:56,660
and we<font color="#E5E5E5"> think that we have line</font><font color="#CCCCCC"> of sight</font>

1235
00:49:54,020 --> 00:49:58,880
to<font color="#E5E5E5"> get there another point is to</font>

1236
00:49:56,660 --> 00:50:00,170
maximize<font color="#E5E5E5"> the benefit you get with</font><font color="#CCCCCC"> CFI it</font>

1237
00:49:58,880 --> 00:50:01,790
needs to be combined with<font color="#E5E5E5"> strong</font>

1238
00:50:00,170 --> 00:50:04,760
<font color="#E5E5E5">sandboxing</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> two have to go</font>

1239
00:50:01,790 --> 00:50:06,470
<font color="#E5E5E5">hand-in-hand</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> from our observations</font>

1240
00:50:04,760 --> 00:50:09,170
<font color="#E5E5E5">even though we currently have a</font><font color="#CCCCCC"> CFI</font>

1241
00:50:06,470 --> 00:50:11,450
solution that is not<font color="#CCCCCC"> robust we do still</font>

1242
00:50:09,170 --> 00:50:13,000
see this<font color="#E5E5E5"> increasing the complexity</font><font color="#CCCCCC"> of</font>

1243
00:50:11,450 --> 00:50:15,109
exploits<font color="#E5E5E5"> that are being written and</font>

1244
00:50:13,000 --> 00:50:16,610
<font color="#E5E5E5">particularly things like arbitrary code</font>

1245
00:50:15,110 --> 00:50:18,200
guard we think are gonna cause people a

1246
00:50:16,610 --> 00:50:21,040
lot<font color="#CCCCCC"> of pain</font><font color="#E5E5E5"> because</font><font color="#CCCCCC"> it's gonna force</font>

1247
00:50:18,200 --> 00:50:23,419
payloads to<font color="#E5E5E5"> be delivered entirely in</font><font color="#CCCCCC"> raw</font>

1248
00:50:21,040 --> 00:50:26,090
<font color="#CCCCCC">so we think that</font><font color="#E5E5E5"> there's</font><font color="#CCCCCC"> still value</font>

1249
00:50:23,420 --> 00:50:27,860
<font color="#CCCCCC">even if it's not</font><font color="#E5E5E5"> perfect</font><font color="#CCCCCC"> and the last</font>

1250
00:50:26,090 --> 00:50:29,480
thing I'll mention is that<font color="#E5E5E5"> Microsoft</font>

1251
00:50:27,860 --> 00:50:30,530
<font color="#CCCCCC">does have a number of bounties and</font><font color="#E5E5E5"> a</font>

1252
00:50:29,480 --> 00:50:32,390
<font color="#CCCCCC">number</font><font color="#E5E5E5"> of these things were actually</font>

1253
00:50:30,530 --> 00:50:34,400
<font color="#CCCCCC">found thanks</font><font color="#E5E5E5"> to the mitigation bypass</font>

1254
00:50:32,390 --> 00:50:36,080
bounty so if you guys want<font color="#CCCCCC"> to</font>

1255
00:50:34,400 --> 00:50:39,880
participate<font color="#E5E5E5"> we would love to have you</font>

1256
00:50:36,080 --> 00:50:39,880
participate<font color="#E5E5E5"> thanks</font>

1257
00:50:44,450 --> 00:50:56,339
[Applause]

1258
00:50:47,689 --> 00:50:58,439
any questions how do you protect against

1259
00:50:56,339 --> 00:51:00,029
<font color="#E5E5E5">doing things like messing with a bitmap</font>

1260
00:50:58,439 --> 00:51:04,499
<font color="#E5E5E5">or messing with the pointer from the</font>

1261
00:51:00,029 --> 00:51:06,659
<font color="#E5E5E5">pepper to the bitmap</font><font color="#CCCCCC"> so the bitmap is</font>

1262
00:51:04,499 --> 00:51:09,348
protected by<font color="#E5E5E5"> the kernel it cannot</font><font color="#CCCCCC"> be</font>

1263
00:51:06,659 --> 00:51:12,989
made writable by<font color="#E5E5E5"> user mode</font><font color="#CCCCCC"> and</font>

1264
00:51:09,349 --> 00:51:14,459
<font color="#CCCCCC">protecting the pointer to</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> bitmap I</font>

1265
00:51:12,989 --> 00:51:18,749
don't<font color="#E5E5E5"> think the CFG check function</font>

1266
00:51:14,459 --> 00:51:20,638
<font color="#E5E5E5">actually follows the</font><font color="#CCCCCC"> I don't</font><font color="#E5E5E5"> think it</font>

1267
00:51:18,749 --> 00:51:22,609
follows a pointer from the<font color="#E5E5E5"> peb but if it</font>

1268
00:51:20,639 --> 00:51:25,109
does that's just another case of

1269
00:51:22,609 --> 00:51:27,629
pointers that<font color="#E5E5E5"> we need to ensure actually</font>

1270
00:51:25,109 --> 00:51:29,578
stay<font color="#E5E5E5"> read-only so it falls into that</font>

1271
00:51:27,629 --> 00:51:30,689
bucket<font color="#E5E5E5"> of read only memory attacks where</font>

1272
00:51:29,579 --> 00:51:33,449
we need to<font color="#E5E5E5"> have some better way of</font>

1273
00:51:30,689 --> 00:51:35,489
<font color="#E5E5E5">protecting certain sensitive pointers</font>

1274
00:51:33,449 --> 00:51:39,629
okay so let's put the<font color="#CCCCCC"> pepper into a</font>

1275
00:51:35,489 --> 00:51:46,439
<font color="#E5E5E5">variable into a constant part yeah</font>

1276
00:51:39,629 --> 00:51:48,629
presumably okay so a<font color="#CCCCCC"> two things so</font>

1277
00:51:46,439 --> 00:51:50,879
regarding the<font color="#E5E5E5"> ANC attack that you</font>

1278
00:51:48,629 --> 00:51:54,328
mentioned as<font color="#E5E5E5"> far as I can</font><font color="#CCCCCC"> remember they</font>

1279
00:51:50,879 --> 00:51:56,219
that<font color="#E5E5E5"> only permits them to</font><font color="#CCCCCC"> leak</font><font color="#E5E5E5"> a part of</font>

1280
00:51:54,329 --> 00:51:58,859
the<font color="#E5E5E5"> address because they can only</font>

1281
00:51:56,219 --> 00:52:02,029
determine the cache lines that I use

1282
00:51:58,859 --> 00:52:08,729
inside<font color="#E5E5E5"> the page tables but not exactly</font>

1283
00:52:02,029 --> 00:52:09,749
<font color="#CCCCCC">which page table entries are used so did</font>

1284
00:52:08,729 --> 00:52:12,299
you investigate whether it would be

1285
00:52:09,749 --> 00:52:15,299
<font color="#E5E5E5">possible to rely on a small amount of</font>

1286
00:52:12,299 --> 00:52:17,249
randomization<font color="#E5E5E5"> that would be inside cache</font>

1287
00:52:15,299 --> 00:52:19,788
lines<font color="#E5E5E5"> or did with</font><font color="#CCCCCC"> that break because of</font>

1288
00:52:17,249 --> 00:52:24,118
<font color="#CCCCCC">these new side</font><font color="#E5E5E5"> channel tags but rely on</font>

1289
00:52:19,789 --> 00:52:26,189
<font color="#CCCCCC">thought about</font><font color="#E5E5E5"> forwarding or so yeah so I</font>

1290
00:52:24,119 --> 00:52:27,689
don't<font color="#E5E5E5"> think that we spent</font><font color="#CCCCCC"> a whole lot of</font>

1291
00:52:26,189 --> 00:52:31,049
time<font color="#E5E5E5"> investigating how to</font><font color="#CCCCCC"> mitigate that</font>

1292
00:52:27,689 --> 00:52:32,759
<font color="#E5E5E5">because very shortly after we were</font>

1293
00:52:31,049 --> 00:52:35,369
successful in exploiting this<font color="#E5E5E5"> race</font>

1294
00:52:32,759 --> 00:52:37,799
condition which was just<font color="#E5E5E5"> an there was no</font>

1295
00:52:35,369 --> 00:52:39,779
way that<font color="#E5E5E5"> we could mitigate it</font><font color="#CCCCCC"> I know</font>

1296
00:52:37,799 --> 00:52:41,459
that we did do<font color="#E5E5E5"> some thinking about if</font>

1297
00:52:39,779 --> 00:52:43,829
there were<font color="#E5E5E5"> ways we could mitigate and</font>

1298
00:52:41,459 --> 00:52:45,808
see but it starts<font color="#E5E5E5"> to get into really</font>

1299
00:52:43,829 --> 00:52:47,609
scary<font color="#E5E5E5"> territory because people are just</font>

1300
00:52:45,809 --> 00:52:51,179
finding<font color="#E5E5E5"> as you know more and</font><font color="#CCCCCC"> more</font>

1301
00:52:47,609 --> 00:52:53,200
<font color="#CCCCCC">hardware side channels</font><font color="#E5E5E5"> and so when that</font>

1302
00:52:51,179 --> 00:52:55,810
<font color="#CCCCCC">AMC</font><font color="#E5E5E5"> attack was discovered it really</font>

1303
00:52:53,200 --> 00:52:58,810
solidified<font color="#CCCCCC"> to us</font><font color="#E5E5E5"> we're taking a big risk</font>

1304
00:52:55,810 --> 00:53:01,299
by trying<font color="#E5E5E5"> to depend on hiding secrets</font>

1305
00:52:58,810 --> 00:53:02,828
<font color="#E5E5E5">but really the the timing attack was the</font>

1306
00:53:01,300 --> 00:53:05,290
nail<font color="#E5E5E5"> in</font><font color="#CCCCCC"> the coffin and and we</font><font color="#E5E5E5"> just</font>

1307
00:53:02,829 --> 00:53:07,540
stopped<font color="#CCCCCC"> looking at the how to protect</font>

1308
00:53:05,290 --> 00:53:12,279
against a<font color="#CCCCCC"> and C after that</font><font color="#E5E5E5"> so regarding</font>

1309
00:53:07,540 --> 00:53:13,660
the<font color="#E5E5E5"> timing attack</font><font color="#CCCCCC"> I'm wondering why you</font>

1310
00:53:12,280 --> 00:53:17,079
did not<font color="#E5E5E5"> mention the possibility of</font>

1311
00:53:13,660 --> 00:53:20,799
<font color="#CCCCCC">trying to</font><font color="#E5E5E5"> pivot the stack point to the</font>

1312
00:53:17,079 --> 00:53:23,530
control stack then<font color="#E5E5E5"> doing the call or</font>

1313
00:53:20,800 --> 00:53:25,480
return instruction on the one end<font color="#CCCCCC"> up on</font>

1314
00:53:23,530 --> 00:53:28,900
the other<font color="#CCCCCC"> stack and then pivoting the</font>

1315
00:53:25,480 --> 00:53:31,540
<font color="#E5E5E5">stack pointer back</font><font color="#CCCCCC"> is that just for</font>

1316
00:53:28,900 --> 00:53:34,300
performance<font color="#E5E5E5"> reasons or yeah</font><font color="#CCCCCC"> so we did</font>

1317
00:53:31,540 --> 00:53:36,839
some preliminary benchmarking on that so

1318
00:53:34,300 --> 00:53:39,690
the<font color="#E5E5E5"> idea is that if if instead</font><font color="#CCCCCC"> of</font>

1319
00:53:36,839 --> 00:53:41,560
returning<font color="#CCCCCC"> from the stack pointer you</font>

1320
00:53:39,690 --> 00:53:44,109
transition your<font color="#E5E5E5"> stack to be the shadow</font>

1321
00:53:41,560 --> 00:53:45,790
stack and<font color="#E5E5E5"> then you</font><font color="#CCCCCC"> return I think</font>

1322
00:53:44,109 --> 00:53:48,430
<font color="#CCCCCC">there's a few</font><font color="#E5E5E5"> issues there one we need</font>

1323
00:53:45,790 --> 00:53:50,380
to<font color="#CCCCCC"> be very careful about since the stack</font>

1324
00:53:48,430 --> 00:53:52,450
pointer now actually points to<font color="#E5E5E5"> the</font>

1325
00:53:50,380 --> 00:53:54,520
shadow stack then someone<font color="#E5E5E5"> can call get</font>

1326
00:53:52,450 --> 00:53:56,560
thread context and now learn where the

1327
00:53:54,520 --> 00:53:59,500
shadow stack is located so we need to be

1328
00:53:56,560 --> 00:54:01,509
very careful<font color="#E5E5E5"> there and it also did seem</font>

1329
00:53:59,500 --> 00:54:04,329
to<font color="#E5E5E5"> cause performance issues on Intel</font>

1330
00:54:01,510 --> 00:54:07,000
doing<font color="#CCCCCC"> I mean modifying</font><font color="#E5E5E5"> where you were</font>

1331
00:54:04,329 --> 00:54:09,329
returning from<font color="#E5E5E5"> at all like the stack you</font>

1332
00:54:07,000 --> 00:54:13,390
<font color="#E5E5E5">were using one thing we considered was</font>

1333
00:54:09,329 --> 00:54:15,609
switching<font color="#E5E5E5"> from returns to jumps that</font>

1334
00:54:13,390 --> 00:54:17,618
just jumped<font color="#CCCCCC"> directly from the shadow</font>

1335
00:54:15,609 --> 00:54:19,390
stack<font color="#CCCCCC"> that also caused really big</font>

1336
00:54:17,619 --> 00:54:25,089
performance penalties<font color="#E5E5E5"> because now you're</font>

1337
00:54:19,390 --> 00:54:27,069
not<font color="#E5E5E5"> using the</font><font color="#CCCCCC"> RSB the</font><font color="#E5E5E5"> return buffer and</font>

1338
00:54:25,089 --> 00:54:30,040
so that was<font color="#E5E5E5"> like a multi point</font>

1339
00:54:27,069 --> 00:54:32,079
performance<font color="#CCCCCC"> hit</font><font color="#E5E5E5"> so yeah basically came</font>

1340
00:54:30,040 --> 00:54:34,569
<font color="#CCCCCC">down to those two things one we now are</font>

1341
00:54:32,079 --> 00:54:36,040
being we're at much higher risk<font color="#E5E5E5"> of</font>

1342
00:54:34,569 --> 00:54:38,170
leaking where the shadow stack is and

1343
00:54:36,040 --> 00:54:40,470
<font color="#CCCCCC">two it was</font><font color="#E5E5E5"> hurting performance okay</font>

1344
00:54:38,170 --> 00:54:40,470
thanks

1345
00:54:43,360 --> 00:54:48,650
any more questions<font color="#CCCCCC"> I have a last</font>

1346
00:54:46,970 --> 00:54:51,169
<font color="#E5E5E5">question</font><font color="#CCCCCC"> if nobody</font><font color="#E5E5E5"> else has a question</font>

1347
00:54:48,650 --> 00:54:52,490
<font color="#CCCCCC">now my question is I</font><font color="#E5E5E5"> know that the</font>

1348
00:54:51,170 --> 00:54:54,530
<font color="#E5E5E5">Windows security team is doing great</font>

1349
00:54:52,490 --> 00:54:55,879
<font color="#E5E5E5">work</font><font color="#CCCCCC"> with so much of research as</font><font color="#E5E5E5"> well as</font>

1350
00:54:54,530 --> 00:54:58,460
<font color="#E5E5E5">the bounty</font>

1351
00:54:55,880 --> 00:55:02,270
why does Windows 10 still ship with

1352
00:54:58,460 --> 00:55:04,730
baked in Adobe<font color="#E5E5E5"> Flash which is not</font>

1353
00:55:02,270 --> 00:55:06,259
removable by end-user<font color="#E5E5E5"> so we know that</font>

1354
00:55:04,730 --> 00:55:08,570
<font color="#CCCCCC">there are dobby</font><font color="#E5E5E5"> clashes</font><font color="#CCCCCC"> really is out</font>

1355
00:55:06,260 --> 00:55:10,670
<font color="#E5E5E5">there and they're exploited</font><font color="#CCCCCC"> every now</font>

1356
00:55:08,570 --> 00:55:12,740
and then why does Windows<font color="#E5E5E5"> 10 still ship</font>

1357
00:55:10,670 --> 00:55:15,200
with it it's baked in<font color="#CCCCCC"> it's so</font><font color="#E5E5E5"> deep in</font>

1358
00:55:12,740 --> 00:55:18,740
that<font color="#CCCCCC"> even takes me for example</font><font color="#E5E5E5"> with my</font>

1359
00:55:15,200 --> 00:55:21,500
<font color="#E5E5E5">script or always my expertise with 15</font>

1360
00:55:18,740 --> 00:55:23,479
years<font color="#E5E5E5"> of</font><font color="#CCCCCC"> research with Windows</font><font color="#E5E5E5"> it takes</font>

1361
00:55:21,500 --> 00:55:25,520
some<font color="#CCCCCC"> time to</font><font color="#E5E5E5"> remove it right why do you</font>

1362
00:55:23,480 --> 00:55:28,100
why do you still ship it with baked in

1363
00:55:25,520 --> 00:55:31,150
Adobe<font color="#E5E5E5"> Flash</font><font color="#CCCCCC"> I do not have the answer to</font>

1364
00:55:28,100 --> 00:55:31,150
that<font color="#E5E5E5"> question</font><font color="#CCCCCC"> sorry</font>

1365
00:55:33,500 --> 00:55:38,170
[Applause]

