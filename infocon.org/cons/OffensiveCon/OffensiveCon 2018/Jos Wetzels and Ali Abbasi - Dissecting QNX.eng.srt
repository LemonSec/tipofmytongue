1
00:00:00,800 --> 00:00:05,939
<font color="#E5E5E5">all right hello and welcome everybody to</font>

2
00:00:03,780 --> 00:00:07,770
a talk the second<font color="#CCCCCC"> q</font><font color="#E5E5E5"> annex analyzing and</font>

3
00:00:05,940 --> 00:00:10,860
breaking exploit mitigations<font color="#CCCCCC"> and fearing</font>

4
00:00:07,770 --> 00:00:12,268
<font color="#CCCCCC">g's and Kunik</font><font color="#E5E5E5"> six and seven my name is</font>

5
00:00:10,860 --> 00:00:13,920
<font color="#CCCCCC">jose vessels</font><font color="#E5E5E5"> and I'm currently an</font>

6
00:00:12,269 --> 00:00:15,540
independent security<font color="#E5E5E5"> researcher with</font>

7
00:00:13,920 --> 00:00:17,698
<font color="#CCCCCC">midnight blue or I mainly focus on</font>

8
00:00:15,540 --> 00:00:19,529
embedded<font color="#CCCCCC"> system security I previously</font>

9
00:00:17,699 --> 00:00:21,270
worked<font color="#E5E5E5"> as a</font><font color="#CCCCCC"> security researcher</font><font color="#E5E5E5"> at the</font>

10
00:00:19,529 --> 00:00:22,920
University<font color="#E5E5E5"> of Twente in the Netherlands</font>

11
00:00:21,270 --> 00:00:25,169
<font color="#E5E5E5">I focused on critical infrastructure</font>

12
00:00:22,920 --> 00:00:26,849
protection<font color="#CCCCCC"> and most of this work was</font>

13
00:00:25,170 --> 00:00:28,140
done as<font color="#CCCCCC"> part of my master's thesis at</font>

14
00:00:26,849 --> 00:00:31,170
the Eindhoven University of Technology

15
00:00:28,140 --> 00:00:33,210
in<font color="#E5E5E5"> the Netherlands and my name is Elia</font>

16
00:00:31,170 --> 00:00:35,460
passive and<font color="#E5E5E5"> I am PhD student at</font>

17
00:00:33,210 --> 00:00:37,620
Eindhoven University of Technology<font color="#E5E5E5"> and</font>

18
00:00:35,460 --> 00:00:39,510
visiting<font color="#CCCCCC"> is a chair at a chair of system</font>

19
00:00:37,620 --> 00:00:41,879
security<font color="#CCCCCC"> of Rover</font><font color="#E5E5E5"> University</font><font color="#CCCCCC"> boham in</font>

20
00:00:39,510 --> 00:00:44,760
Germany my research<font color="#E5E5E5"> mostly is about</font>

21
00:00:41,879 --> 00:00:47,879
embedded systems binary security and

22
00:00:44,760 --> 00:00:49,620
industrial control systems<font color="#E5E5E5"> all right so</font>

23
00:00:47,879 --> 00:00:51,030
I'm gonna start<font color="#CCCCCC"> this presentation</font><font color="#E5E5E5"> off</font>

24
00:00:49,620 --> 00:00:52,440
with an introduction<font color="#E5E5E5"> to Q annex</font>

25
00:00:51,030 --> 00:00:53,579
<font color="#CCCCCC">discussing a little bit</font><font color="#E5E5E5"> about the</font>

26
00:00:52,440 --> 00:00:55,649
operating system<font color="#E5E5E5"> and security</font>

27
00:00:53,579 --> 00:00:57,390
<font color="#E5E5E5">architecture then moving on to the</font>

28
00:00:55,649 --> 00:00:58,890
<font color="#E5E5E5">pseudo-random number generators the</font>

29
00:00:57,390 --> 00:01:01,559
exploit mitigations and finishing off

30
00:00:58,890 --> 00:01:03,809
with<font color="#E5E5E5"> some final remarks so what is Q</font>

31
00:01:01,559 --> 00:01:06,119
<font color="#CCCCCC">next UNIX</font><font color="#E5E5E5"> is a unix-like POSIX compliant</font>

32
00:01:03,809 --> 00:01:08,189
<font color="#CCCCCC">real-time operating system and was</font>

33
00:01:06,119 --> 00:01:10,260
initially released in 1982 and later

34
00:01:08,189 --> 00:01:12,630
acquired by<font color="#E5E5E5"> blackberry it's closed</font>

35
00:01:10,260 --> 00:01:14,880
source and proprietary<font color="#E5E5E5"> so all of this</font>

36
00:01:12,630 --> 00:01:17,220
was obtained by reverse<font color="#CCCCCC"> engineering</font>

37
00:01:14,880 --> 00:01:19,140
<font color="#E5E5E5">there's two main lines of queuing</font>

38
00:01:17,220 --> 00:01:21,750
excitement or<font color="#CCCCCC"> skew next six were the</font>

39
00:01:19,140 --> 00:01:23,670
latest<font color="#CCCCCC"> versions Kunik 6.6 and that's a</font>

40
00:01:21,750 --> 00:01:25,470
32-bit<font color="#CCCCCC"> operating system</font><font color="#E5E5E5"> and under see</font>

41
00:01:23,670 --> 00:01:28,350
<font color="#E5E5E5">you next</font><font color="#CCCCCC"> seven which was released</font><font color="#E5E5E5"> in</font>

42
00:01:25,470 --> 00:01:30,780
<font color="#E5E5E5">March of 2017 and that's a 64-bit</font>

43
00:01:28,350 --> 00:01:32,880
operating<font color="#E5E5E5"> system it's most famously</font>

44
00:01:30,780 --> 00:01:34,409
<font color="#CCCCCC">known for its use in mobile</font><font color="#E5E5E5"> systems it</font>

45
00:01:32,880 --> 00:01:35,729
forms the basis of BlackBerry 10

46
00:01:34,409 --> 00:01:37,979
operating system<font color="#CCCCCC"> as well as</font><font color="#E5E5E5"> the</font>

47
00:01:35,729 --> 00:01:39,179
BlackBerry tablet<font color="#E5E5E5"> operating system but</font>

48
00:01:37,979 --> 00:01:41,729
that's<font color="#E5E5E5"> really only the tip of</font><font color="#CCCCCC"> the</font>

49
00:01:39,180 --> 00:01:43,560
<font color="#E5E5E5">iceberg of key Onix usage because these</font>

50
00:01:41,729 --> 00:01:46,289
<font color="#E5E5E5">days it's obviously far</font><font color="#CCCCCC"> more prominent</font>

51
00:01:43,560 --> 00:01:48,240
<font color="#E5E5E5">in automotive it holds more than</font><font color="#CCCCCC"> 50%</font>

52
00:01:46,290 --> 00:01:50,070
market share in infotainment units for

53
00:01:48,240 --> 00:01:51,780
example<font color="#CCCCCC"> and is said to be</font><font color="#E5E5E5"> used in</font>

54
00:01:50,070 --> 00:01:53,070
<font color="#CCCCCC">various self-driving car initiatives</font>

55
00:01:51,780 --> 00:01:55,500
such as the<font color="#E5E5E5"> one by Delphi automotive</font>

56
00:01:53,070 --> 00:01:58,829
<font color="#E5E5E5">which has partnered with blackberry on</font>

57
00:01:55,500 --> 00:02:01,079
this kind of project<font color="#E5E5E5"> another interesting</font>

58
00:01:58,829 --> 00:02:03,179
application is the usage of<font color="#E5E5E5"> Kunik San</font>

59
00:02:01,079 --> 00:02:05,158
Cisco<font color="#E5E5E5"> IOS XR which is the operating</font>

60
00:02:03,180 --> 00:02:05,759
<font color="#E5E5E5">system used in carrier grade routers by</font>

61
00:02:05,159 --> 00:02:07,290
Cisco

62
00:02:05,759 --> 00:02:09,630
<font color="#E5E5E5">as you can see on the right</font><font color="#CCCCCC"> of the slide</font>

63
00:02:07,290 --> 00:02:11,460
given<font color="#E5E5E5"> X forms the basis of this</font>

64
00:02:09,630 --> 00:02:14,040
operating system and<font color="#E5E5E5"> that makes</font><font color="#CCCCCC"> for an</font>

65
00:02:11,460 --> 00:02:15,480
interesting<font color="#E5E5E5"> target as well</font><font color="#CCCCCC"> and outside</font>

66
00:02:14,040 --> 00:02:16,980
<font color="#CCCCCC">of</font><font color="#E5E5E5"> that it's used in many many more</font>

67
00:02:15,480 --> 00:02:18,989
critical systems you see everywhere

68
00:02:16,980 --> 00:02:20,549
<font color="#CCCCCC">around you industrial control systems</font>

69
00:02:18,990 --> 00:02:23,400
including the nuclear<font color="#E5E5E5"> power plants by</font>

70
00:02:20,550 --> 00:02:25,530
Westinghouse turbine controllers defense

71
00:02:23,400 --> 00:02:27,870
applications like UAVs and<font color="#E5E5E5"> military</font>

72
00:02:25,530 --> 00:02:30,090
radios<font color="#E5E5E5"> medical applications railway</font>

73
00:02:27,870 --> 00:02:33,180
<font color="#E5E5E5">safety you name it</font><font color="#CCCCCC"> there's enough</font><font color="#E5E5E5"> reason</font>

74
00:02:30,090 --> 00:02:35,670
to<font color="#E5E5E5"> be interested</font><font color="#CCCCCC"> in connect security so</font>

75
00:02:33,180 --> 00:02:38,130
some<font color="#CCCCCC"> of you might remember that</font><font color="#E5E5E5"> not lost</font>

76
00:02:35,670 --> 00:02:39,390
<font color="#E5E5E5">ccc but</font><font color="#CCCCCC"> as ec before that we talked a</font>

77
00:02:38,130 --> 00:02:40,829
little bit about<font color="#CCCCCC"> the peering</font><font color="#E5E5E5"> G's of</font>

78
00:02:39,390 --> 00:02:42,779
given<font color="#E5E5E5"> X</font><font color="#CCCCCC"> 6.6</font>

79
00:02:40,830 --> 00:02:44,670
but in<font color="#E5E5E5"> this talk we'll talk about the</font>

80
00:02:42,780 --> 00:02:46,290
new<font color="#CCCCCC"> Buren G's they introduced in Kunik</font>

81
00:02:44,670 --> 00:02:48,480
<font color="#CCCCCC">seven in</font><font color="#E5E5E5"> userspace in kernel space</font>

82
00:02:46,290 --> 00:02:50,160
mostly as a result<font color="#CCCCCC"> of our research into</font>

83
00:02:48,480 --> 00:02:52,230
<font color="#E5E5E5">Kunik</font><font color="#CCCCCC"> six and we'll talk about the</font>

84
00:02:50,160 --> 00:02:55,049
exploit mitigations of given<font color="#CCCCCC"> x 6</font><font color="#E5E5E5"> and 7</font>

85
00:02:52,230 --> 00:02:56,609
which have not been discussed before<font color="#E5E5E5"> so</font>

86
00:02:55,050 --> 00:03:02,190
let's start with<font color="#E5E5E5"> the operating</font><font color="#CCCCCC"> system</font>

87
00:02:56,610 --> 00:03:04,560
<font color="#E5E5E5">and security architecture</font><font color="#CCCCCC"> thanks so Q</font>

88
00:03:02,190 --> 00:03:07,500
annex basically is a true microkernel

89
00:03:04,560 --> 00:03:09,570
<font color="#E5E5E5">and what it means means that's basically</font>

90
00:03:07,500 --> 00:03:11,550
most of<font color="#CCCCCC"> the functionalities which</font>

91
00:03:09,570 --> 00:03:15,750
usually<font color="#E5E5E5"> you find in monolithic kernels</font>

92
00:03:11,550 --> 00:03:18,450
<font color="#E5E5E5">are outside of the of the kernel</font><font color="#CCCCCC"> and the</font>

93
00:03:15,750 --> 00:03:20,370
reason well partially<font color="#CCCCCC"> it makes the</font>

94
00:03:18,450 --> 00:03:23,339
operating system much more stable<font color="#E5E5E5"> and of</font>

95
00:03:20,370 --> 00:03:27,020
course<font color="#E5E5E5"> there will be less ropes for</font>

96
00:03:23,340 --> 00:03:30,900
offensive guys like you to hang on them

97
00:03:27,020 --> 00:03:33,150
so how putting lots of these components

98
00:03:30,900 --> 00:03:33,800
<font color="#E5E5E5">of the operating system outside</font><font color="#CCCCCC"> of the</font>

99
00:03:33,150 --> 00:03:38,130
kernel

100
00:03:33,800 --> 00:03:40,320
like scale<font color="#CCCCCC"> so basically the core or the</font>

101
00:03:38,130 --> 00:03:42,720
<font color="#CCCCCC">heart of the communiques basically it's</font>

102
00:03:40,320 --> 00:03:46,440
<font color="#E5E5E5">message passing functionality which</font>

103
00:03:42,720 --> 00:03:49,050
means that<font color="#CCCCCC"> this device drivers and lots</font>

104
00:03:46,440 --> 00:03:51,090
of protocol stacks<font color="#E5E5E5"> residing in user</font>

105
00:03:49,050 --> 00:03:53,490
<font color="#E5E5E5">space</font><font color="#CCCCCC"> and then they'll communicate with</font>

106
00:03:51,090 --> 00:03:56,090
a client-server architecture<font color="#E5E5E5"> which we</font>

107
00:03:53,490 --> 00:03:59,490
call here like message passing<font color="#E5E5E5"> and</font>

108
00:03:56,090 --> 00:04:01,560
communicate with each<font color="#E5E5E5"> other and me the</font>

109
00:03:59,490 --> 00:04:05,459
microkernel<font color="#E5E5E5"> and microkernel basically is</font>

110
00:04:01,560 --> 00:04:08,040
like really<font color="#CCCCCC"> really tiny</font><font color="#E5E5E5"> like scheduler</font>

111
00:04:05,459 --> 00:04:13,920
like very<font color="#E5E5E5"> very basic essential stuff</font>

112
00:04:08,040 --> 00:04:17,279
there we<font color="#E5E5E5"> can divide generally the attack</font>

113
00:04:13,920 --> 00:04:20,099
surface in<font color="#CCCCCC"> Q annex to</font><font color="#E5E5E5"> two</font><font color="#CCCCCC"> parts so</font>

114
00:04:17,279 --> 00:04:21,539
either local attack surface and a remote

115
00:04:20,100 --> 00:04:22,570
attack surface<font color="#E5E5E5"> so there are lots of</font>

116
00:04:21,540 --> 00:04:25,000
things<font color="#E5E5E5"> in local</font>

117
00:04:22,570 --> 00:04:27,190
<font color="#E5E5E5">attack surface or process manager like</font>

118
00:04:25,000 --> 00:04:30,010
resource manager lots of things like

119
00:04:27,190 --> 00:04:32,650
<font color="#CCCCCC">that which attacker can target</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> also</font>

120
00:04:30,010 --> 00:04:34,810
the microkernel itself<font color="#E5E5E5"> and then in the</font>

121
00:04:32,650 --> 00:04:36,669
remote port<font color="#E5E5E5"> you have network managers</font>

122
00:04:34,810 --> 00:04:39,340
like network services and all of them

123
00:04:36,670 --> 00:04:42,550
which can<font color="#E5E5E5"> get targeted which I talked</font>

124
00:04:39,340 --> 00:04:45,929
about<font color="#E5E5E5"> them in one example later but here</font>

125
00:04:42,550 --> 00:04:48,340
is important thing<font color="#CCCCCC"> because lots of this</font>

126
00:04:45,930 --> 00:04:51,970
essential services so<font color="#CCCCCC"> for example device</font>

127
00:04:48,340 --> 00:04:55,780
driver<font color="#E5E5E5"> much run with a root user there's</font>

128
00:04:51,970 --> 00:04:57,430
really maybe there is no motivation<font color="#E5E5E5"> for</font>

129
00:04:55,780 --> 00:04:58,809
<font color="#E5E5E5">attackers sometimes you even target the</font>

130
00:04:57,430 --> 00:05:00,310
microkernel<font color="#E5E5E5"> because the targeting the</font>

131
00:04:58,810 --> 00:05:03,040
microkernel itself is the hardest part

132
00:05:00,310 --> 00:05:04,330
so sometimes that<font color="#CCCCCC"> occurred even don't</font>

133
00:05:03,040 --> 00:05:05,770
need<font color="#CCCCCC"> to target the mantra counter</font>

134
00:05:04,330 --> 00:05:11,979
because the device<font color="#E5E5E5"> driver</font><font color="#CCCCCC"> already have</font>

135
00:05:05,770 --> 00:05:13,870
lots<font color="#E5E5E5"> of access</font><font color="#CCCCCC"> to lots of things so so</font>

136
00:05:11,980 --> 00:05:15,820
looking<font color="#CCCCCC"> back at the security research</font>

137
00:05:13,870 --> 00:05:19,270
history<font color="#E5E5E5"> in</font><font color="#CCCCCC"> kianak Unix</font>

138
00:05:15,820 --> 00:05:21,150
so from<font color="#CCCCCC"> 2011 to 2014</font>

139
00:05:19,270 --> 00:05:24,609
blackberry mobile research did lots of

140
00:05:21,150 --> 00:05:26,500
work on<font color="#E5E5E5"> ease mostly not about like</font>

141
00:05:24,610 --> 00:05:29,020
directly<font color="#CCCCCC"> communiques but about the black</font>

142
00:05:26,500 --> 00:05:32,410
dream of<font color="#CCCCCC"> iOS</font><font color="#E5E5E5"> which</font><font color="#CCCCCC"> it's kernel is</font>

143
00:05:29,020 --> 00:05:35,349
basically<font color="#CCCCCC"> communiques and there was one</font>

144
00:05:32,410 --> 00:05:39,280
<font color="#CCCCCC">very interesting talk</font><font color="#E5E5E5"> in 2016</font>

145
00:05:35,350 --> 00:05:42,040
<font color="#E5E5E5">Alex Plaskett</font><font color="#CCCCCC"> on UNIX inter-process</font>

146
00:05:39,280 --> 00:05:43,750
<font color="#CCCCCC">communication and current codes which I</font>

147
00:05:42,040 --> 00:05:47,200
recommend you<font color="#E5E5E5"> it's in YouTube to watch</font>

148
00:05:43,750 --> 00:05:50,830
<font color="#E5E5E5">it there were various other individual</font>

149
00:05:47,200 --> 00:05:55,599
vulnerabilities such as work by<font color="#E5E5E5"> a GPS as</font>

150
00:05:50,830 --> 00:05:57,190
our<font color="#CCCCCC"> forth yeah so overall if we make</font>

151
00:05:55,600 --> 00:05:58,900
observation of all of these<font color="#E5E5E5"> reported</font>

152
00:05:57,190 --> 00:06:02,469
vulnerabilities we can say most<font color="#E5E5E5"> of them</font>

153
00:05:58,900 --> 00:06:04,200
are about set UID logic parks some

154
00:06:02,470 --> 00:06:08,080
memory corruption vulnerabilities<font color="#E5E5E5"> and</font>

155
00:06:04,200 --> 00:06:13,000
lots of insecure<font color="#E5E5E5"> permission problems</font>

156
00:06:08,080 --> 00:06:17,229
basically for interesting one was last

157
00:06:13,000 --> 00:06:20,500
year by the WikiLeaks leaked named<font color="#E5E5E5"> vault</font>

158
00:06:17,230 --> 00:06:22,770
7 which was showing that<font color="#E5E5E5"> United</font><font color="#CCCCCC"> States</font>

159
00:06:20,500 --> 00:06:26,590
Central Intelligence Agency<font color="#CCCCCC"> are</font>

160
00:06:22,770 --> 00:06:28,479
interested in<font color="#CCCCCC"> targeting UNIX</font><font color="#E5E5E5"> in their</font>

161
00:06:26,590 --> 00:06:30,789
embedded development<font color="#E5E5E5"> branch which they</font>

162
00:06:28,480 --> 00:06:33,340
didn't do until the end of<font color="#E5E5E5"> almost end of</font>

163
00:06:30,790 --> 00:06:36,480
2014<font color="#E5E5E5"> but we don't know after</font><font color="#CCCCCC"> that maybe</font>

164
00:06:33,340 --> 00:06:38,130
they did so<font color="#CCCCCC"> overall there was not</font><font color="#E5E5E5"> real</font>

165
00:06:36,480 --> 00:06:39,690
on exploiting litigation and

166
00:06:38,130 --> 00:06:43,350
pseudo-random number generator of

167
00:06:39,690 --> 00:06:48,570
<font color="#CCCCCC">communiques and almost no work</font><font color="#E5E5E5"> on his</font>

168
00:06:43,350 --> 00:06:52,790
internal designs so start let's<font color="#E5E5E5"> start</font>

169
00:06:48,570 --> 00:06:56,540
<font color="#CCCCCC">with the syscalls soak</font><font color="#E5E5E5"> UNIX support</font>

170
00:06:52,790 --> 00:07:00,810
around<font color="#E5E5E5"> 90 so in some versions maybe 99</font>

171
00:06:56,540 --> 00:07:05,610
but overall<font color="#E5E5E5"> let's say 90 like syscalls</font>

172
00:07:00,810 --> 00:07:07,950
and they also like compared<font color="#CCCCCC"> linux which</font>

173
00:07:05,610 --> 00:07:11,910
<font color="#E5E5E5">we have over 300 but it's much less but</font>

174
00:07:07,950 --> 00:07:15,110
also they implement like lots of<font color="#E5E5E5"> POSIX</font>

175
00:07:11,910 --> 00:07:18,420
<font color="#CCCCCC">syscalls or like</font><font color="#E5E5E5"> basically like</font><font color="#CCCCCC"> Lipsy</font>

176
00:07:15,110 --> 00:07:25,260
<font color="#E5E5E5">functions as</font><font color="#CCCCCC"> a message passing stops</font><font color="#E5E5E5"> in</font>

177
00:07:18,420 --> 00:07:27,420
their<font color="#CCCCCC"> implementation so the</font><font color="#E5E5E5"> syscalls</font>

178
00:07:25,260 --> 00:07:29,570
<font color="#CCCCCC">invoked with typical instruction</font><font color="#E5E5E5"> also</font>

179
00:07:27,420 --> 00:07:34,170
like so<font color="#E5E5E5"> season turn into your extraneous</font>

180
00:07:29,570 --> 00:07:39,990
SVC or<font color="#CCCCCC"> SWI in arm and the</font><font color="#E5E5E5"> cisco number</font>

181
00:07:34,170 --> 00:07:43,380
get located in<font color="#CCCCCC"> ax in r12</font><font color="#E5E5E5"> in arm and</font><font color="#CCCCCC"> in</font>

182
00:07:39,990 --> 00:07:47,850
PowerPC<font color="#CCCCCC"> r0</font><font color="#E5E5E5"> and the listing are located</font>

183
00:07:43,380 --> 00:07:50,790
in kernel calls<font color="#CCCCCC"> at h5 so up on</font><font color="#E5E5E5"> the entry</font>

184
00:07:47,850 --> 00:07:52,620
to<font color="#CCCCCC"> the to the to the like basically when</font>

185
00:07:50,790 --> 00:07:54,450
you make a sis call you an enter to the

186
00:07:52,620 --> 00:07:56,580
kernel in journal entry or<font color="#CCCCCC"> currency</font>

187
00:07:54,450 --> 00:07:58,289
<font color="#CCCCCC">Center and basically what will happen is</font>

188
00:07:56,580 --> 00:08:00,690
<font color="#CCCCCC">that you</font><font color="#E5E5E5"> are saving your registers and</font>

189
00:07:58,290 --> 00:08:03,900
then switching<font color="#E5E5E5"> to</font><font color="#CCCCCC"> the kernel stack and</font>

190
00:08:00,690 --> 00:08:06,300
get the active trade wait for that for

191
00:08:03,900 --> 00:08:08,179
the right CPU<font color="#E5E5E5"> and then echo</font><font color="#CCCCCC"> out the</font>

192
00:08:06,300 --> 00:08:10,050
kernel

193
00:08:08,180 --> 00:08:11,940
interesting thing is that so basically

194
00:08:10,050 --> 00:08:15,510
<font color="#CCCCCC">they are using a Cisco number in</font><font color="#E5E5E5"> index</font>

195
00:08:11,940 --> 00:08:18,600
<font color="#E5E5E5">into a kernel call table and in all</font>

196
00:08:15,510 --> 00:08:22,500
<font color="#E5E5E5">their clinics for example you could you</font>

197
00:08:18,600 --> 00:08:24,990
could make a number which doesn't exist

198
00:08:22,500 --> 00:08:27,150
as a Cisco number so a higher number<font color="#CCCCCC"> and</font>

199
00:08:24,990 --> 00:08:29,070
then just<font color="#CCCCCC"> jump to some other part of</font><font color="#E5E5E5"> the</font>

200
00:08:27,150 --> 00:08:35,309
kernel<font color="#CCCCCC"> because you are</font><font color="#E5E5E5"> over passing the</font>

201
00:08:29,070 --> 00:08:37,530
table so booting process in<font color="#CCCCCC"> cue</font><font color="#E5E5E5"> annex so</font>

202
00:08:35,309 --> 00:08:39,359
once the hardware initialize what you

203
00:08:37,530 --> 00:08:42,419
will have is that<font color="#E5E5E5"> you have</font><font color="#CCCCCC"> initial</font>

204
00:08:39,360 --> 00:08:45,390
program loader which copies basically

205
00:08:42,419 --> 00:08:46,710
image file system to the RAM and then

206
00:08:45,390 --> 00:08:48,390
you have<font color="#CCCCCC"> shorter program which</font>

207
00:08:46,710 --> 00:08:50,610
<font color="#CCCCCC">configured for example</font>

208
00:08:48,390 --> 00:08:52,920
interrupt controllers<font color="#E5E5E5"> and then after</font>

209
00:08:50,610 --> 00:08:55,620
that you basically<font color="#E5E5E5"> load the microkernel</font>

210
00:08:52,920 --> 00:09:00,479
<font color="#E5E5E5">or proc NGO which we talk about</font><font color="#CCCCCC"> it again</font>

211
00:08:55,620 --> 00:09:03,480
later<font color="#CCCCCC"> and basically so it</font><font color="#E5E5E5"> set</font><font color="#CCCCCC"> up the</font>

212
00:09:00,480 --> 00:09:04,760
kernel and run<font color="#CCCCCC"> build files</font><font color="#E5E5E5"> and later you</font>

213
00:09:03,480 --> 00:09:06,990
eventually

214
00:09:04,760 --> 00:09:08,700
depending on the application because<font color="#CCCCCC"> the</font>

215
00:09:06,990 --> 00:09:11,010
same embedded operating system you load

216
00:09:08,700 --> 00:09:16,740
for example<font color="#CCCCCC"> HMI if it's a current</font>

217
00:09:11,010 --> 00:09:19,230
assignment or<font color="#E5E5E5"> water</font><font color="#CCCCCC"> so again</font>

218
00:09:16,740 --> 00:09:21,930
<font color="#E5E5E5">UNIX is embedded operating system so</font>

219
00:09:19,230 --> 00:09:23,880
<font color="#E5E5E5">basically it means</font><font color="#CCCCCC"> that it will</font><font color="#E5E5E5"> be using</font>

220
00:09:21,930 --> 00:09:27,469
<font color="#CCCCCC">different applications so it can be</font>

221
00:09:23,880 --> 00:09:31,200
<font color="#E5E5E5">using a space porn applications or in</font>

222
00:09:27,470 --> 00:09:34,560
<font color="#CCCCCC">automotive industry or</font><font color="#E5E5E5"> medical devices</font>

223
00:09:31,200 --> 00:09:37,620
<font color="#E5E5E5">but the point</font><font color="#CCCCCC"> here is</font><font color="#E5E5E5"> that most of those</font>

224
00:09:34,560 --> 00:09:41,160
<font color="#CCCCCC">UNIX not you know core binaries will</font>

225
00:09:37,620 --> 00:09:43,740
remain the same<font color="#CCCCCC"> there and it come with</font>

226
00:09:41,160 --> 00:09:47,280
three<font color="#CCCCCC"> different flavor</font><font color="#E5E5E5"> with the images</font>

227
00:09:43,740 --> 00:09:51,000
<font color="#E5E5E5">so either it is ifs which we talked</font>

228
00:09:47,280 --> 00:09:54,540
before<font color="#E5E5E5"> or flash file system image or</font><font color="#CCCCCC"> I'm</font>

229
00:09:51,000 --> 00:09:57,030
<font color="#E5E5E5">a transaction file system and they can</font>

230
00:09:54,540 --> 00:10:01,890
be combined<font color="#E5E5E5"> into a single image you know</font>

231
00:09:57,030 --> 00:10:04,949
for example<font color="#E5E5E5"> NAND flash dumping the ifs</font>

232
00:10:01,890 --> 00:10:06,540
or<font color="#E5E5E5"> EFS is also very</font><font color="#CCCCCC"> simple because</font>

233
00:10:04,950 --> 00:10:09,270
<font color="#E5E5E5">actually</font><font color="#CCCCCC"> communiques provide you a</font>

234
00:10:06,540 --> 00:10:10,500
<font color="#E5E5E5">functionality</font><font color="#CCCCCC"> i get to</font><font color="#E5E5E5"> to to actually do</font>

235
00:10:09,270 --> 00:10:15,660
<font color="#E5E5E5">that</font><font color="#CCCCCC"> so as</font><font color="#E5E5E5"> you can see</font><font color="#CCCCCC"> in this</font><font color="#E5E5E5"> example</font>

236
00:10:10,500 --> 00:10:22,440
we are just<font color="#E5E5E5"> dumping</font><font color="#CCCCCC"> the EFS</font><font color="#E5E5E5"> or ifs in</font>

237
00:10:15,660 --> 00:10:25,079
<font color="#CCCCCC">english ink unix</font><font color="#E5E5E5"> so next is a memory</font>

238
00:10:22,440 --> 00:10:27,060
layout so you will have current space a

239
00:10:25,080 --> 00:10:30,510
kernel airspace and user space

240
00:10:27,060 --> 00:10:31,650
separation<font color="#E5E5E5"> supported by tunics and</font><font color="#CCCCCC"> the</font>

241
00:10:30,510 --> 00:10:33,540
only thing which is<font color="#CCCCCC"> running</font><font color="#E5E5E5"> in the</font>

242
00:10:31,650 --> 00:10:36,569
<font color="#CCCCCC">microcurrent</font><font color="#E5E5E5"> in the internet space is</font>

243
00:10:33,540 --> 00:10:39,959
<font color="#CCCCCC">basically the microkernel the proc NGO</font>

244
00:10:36,570 --> 00:10:42,150
<font color="#CCCCCC">she</font><font color="#E5E5E5"> talked</font><font color="#CCCCCC"> about before</font><font color="#E5E5E5"> not the whole of</font>

245
00:10:39,960 --> 00:10:45,300
<font color="#CCCCCC">pregnant you're</font><font color="#E5E5E5"> just part of it other</font>

246
00:10:42,150 --> 00:10:47,790
part to stay in user space

247
00:10:45,300 --> 00:10:49,439
there's also user space separation

248
00:10:47,790 --> 00:10:52,380
because you have lots of sensitive

249
00:10:49,440 --> 00:10:54,600
application running like within<font color="#E5E5E5"> the user</font>

250
00:10:52,380 --> 00:10:59,370
space or device drivers protocol stacks

251
00:10:54,600 --> 00:11:01,110
<font color="#E5E5E5">so there will be a support</font><font color="#CCCCCC"> for visual</font>

252
00:10:59,370 --> 00:11:02,040
<font color="#CCCCCC">private memory</font><font color="#E5E5E5"> in user space application</font>

253
00:11:01,110 --> 00:11:05,699
we<font color="#E5E5E5"> are</font>

254
00:11:02,040 --> 00:11:08,069
memory management<font color="#CCCCCC"> unit</font><font color="#E5E5E5"> and also</font><font color="#CCCCCC"> you will</font>

255
00:11:05,699 --> 00:11:10,969
<font color="#CCCCCC">have lots of unique slide process access</font>

256
00:11:08,070 --> 00:11:15,449
control which I<font color="#CCCCCC"> talked about</font><font color="#E5E5E5"> them</font><font color="#CCCCCC"> dr.</font>

257
00:11:10,970 --> 00:11:17,550
with respect to user management<font color="#E5E5E5"> so you</font>

258
00:11:15,449 --> 00:11:21,000
have all of<font color="#CCCCCC"> those standard stuff</font><font color="#E5E5E5"> which</font>

259
00:11:17,550 --> 00:11:24,359
<font color="#E5E5E5">you find in Linux</font><font color="#CCCCCC"> or pseudo or liking</font>

260
00:11:21,000 --> 00:11:27,600
<font color="#E5E5E5">and also lots of this file permission</font>

261
00:11:24,360 --> 00:11:31,980
models and so you have also<font color="#CCCCCC"> etc or</font>

262
00:11:27,600 --> 00:11:34,110
password etc shadow and<font color="#CCCCCC"> it's</font><font color="#E5E5E5"> UNIX also</font>

263
00:11:31,980 --> 00:11:37,529
support<font color="#E5E5E5"> mandatory access control</font><font color="#CCCCCC"> lists</font>

264
00:11:34,110 --> 00:11:39,750
<font color="#E5E5E5">like similar</font><font color="#CCCCCC"> to Linux I respect the</font>

265
00:11:37,529 --> 00:11:44,910
hashing mechanism<font color="#E5E5E5"> in with the passwords</font>

266
00:11:39,750 --> 00:11:48,060
<font color="#E5E5E5">so my default it supports sha-512</font><font color="#CCCCCC"> in</font>

267
00:11:44,910 --> 00:11:51,029
connect<font color="#E5E5E5"> six and shall</font><font color="#CCCCCC"> five 256</font>

268
00:11:48,060 --> 00:11:53,369
however it also do a backward

269
00:11:51,029 --> 00:11:56,459
compatibility<font color="#E5E5E5"> so it support also any</font>

270
00:11:53,370 --> 00:11:58,589
<font color="#CCCCCC">five which is</font><font color="#E5E5E5"> I know I don't</font><font color="#CCCCCC"> think it's</font>

271
00:11:56,459 --> 00:12:00,119
a good practice<font color="#E5E5E5"> considering</font><font color="#CCCCCC"> that in</font>

272
00:11:58,589 --> 00:12:02,310
December the devices once you have a

273
00:12:00,120 --> 00:12:06,089
passport and<font color="#CCCCCC"> these passwords</font><font color="#E5E5E5"> something</font>

274
00:12:02,310 --> 00:12:09,138
like like based on md5 can get<font color="#CCCCCC"> crack so</font>

275
00:12:06,089 --> 00:12:12,980
there will<font color="#E5E5E5"> be a long life</font><font color="#CCCCCC"> shelf</font><font color="#E5E5E5"> for</font>

276
00:12:09,139 --> 00:12:16,050
<font color="#E5E5E5">photos</font><font color="#CCCCCC"> password so best</font><font color="#E5E5E5"> thing stir and</font>

277
00:12:12,980 --> 00:12:21,269
<font color="#CCCCCC">Infinix seven and Kunik 6.6 the patched</font>

278
00:12:16,050 --> 00:12:26,490
ones<font color="#E5E5E5"> basically the only support PPD k-df</font>

279
00:12:21,269 --> 00:12:33,269
to sha-512<font color="#CCCCCC"> or</font><font color="#E5E5E5"> sha-256 default one is</font><font color="#CCCCCC"> 500</font>

280
00:12:26,490 --> 00:12:36,060
512 so the process manager in<font color="#CCCCCC"> Phoenix is</font>

281
00:12:33,269 --> 00:12:40,230
basically combined in the<font color="#E5E5E5"> proc and</font><font color="#CCCCCC"> you</font>

282
00:12:36,060 --> 00:12:43,589
which I say before it's run the protein

283
00:12:40,230 --> 00:12:45,269
to<font color="#E5E5E5"> your basically</font><font color="#CCCCCC"> run as PID</font><font color="#E5E5E5"> 1 and in</font>

284
00:12:43,589 --> 00:12:48,540
what in<font color="#CCCCCC"> walks basically</font><font color="#E5E5E5"> the microkernel</font>

285
00:12:45,269 --> 00:12:50,880
<font color="#CCCCCC">the same way as other processes and</font><font color="#E5E5E5"> but</font>

286
00:12:48,540 --> 00:12:55,199
it have a ring<font color="#E5E5E5"> 0 she's called</font><font color="#CCCCCC"> privileged</font>

287
00:12:50,880 --> 00:12:57,180
basically as<font color="#E5E5E5"> say the</font><font color="#CCCCCC"> game before it</font>

288
00:12:55,199 --> 00:12:59,729
<font color="#CCCCCC">ought to support standard POSIX stuff</font>

289
00:12:57,180 --> 00:13:03,359
<font color="#E5E5E5">the file let's fight for matters of the</font>

290
00:12:59,730 --> 00:13:06,000
binaries or else and if<font color="#E5E5E5"> for example</font><font color="#CCCCCC"> file</font>

291
00:13:03,360 --> 00:13:08,899
system is memory mapped the<font color="#E5E5E5"> quote can</font><font color="#CCCCCC"> be</font>

292
00:13:06,000 --> 00:13:08,899
<font color="#E5E5E5">executed in place</font>

293
00:13:10,460 --> 00:13:22,550
so<font color="#E5E5E5"> process abilities and basically</font>

294
00:13:17,890 --> 00:13:25,480
<font color="#CCCCCC">eunuchs</font><font color="#E5E5E5"> provide something</font><font color="#CCCCCC"> I guess</font>

295
00:13:22,550 --> 00:13:28,430
everybody knows<font color="#CCCCCC"> ruthless execution and</font>

296
00:13:25,480 --> 00:13:31,040
so<font color="#CCCCCC"> and also</font><font color="#E5E5E5"> for</font><font color="#CCCCCC"> example you can obtain</font>

297
00:13:28,430 --> 00:13:32,510
certain capabilities<font color="#E5E5E5"> before dropping</font>

298
00:13:31,040 --> 00:13:36,560
<font color="#CCCCCC">your</font><font color="#E5E5E5"> route or restricting certain</font>

299
00:13:32,510 --> 00:13:38,660
actions<font color="#E5E5E5"> even for root user and</font><font color="#CCCCCC"> the</font>

300
00:13:36,560 --> 00:13:42,020
abilities which clinics provide is like

301
00:13:38,660 --> 00:13:46,060
<font color="#CCCCCC">a some dumbing range</font><font color="#E5E5E5"> on our inheritance</font>

302
00:13:42,020 --> 00:13:51,310
<font color="#E5E5E5">and you can basically specify custom</font>

303
00:13:46,060 --> 00:13:56,560
abilities however<font color="#E5E5E5"> it's really like like</font>

304
00:13:51,310 --> 00:13:58,729
<font color="#E5E5E5">depending on the system integrator to to</font>

305
00:13:56,560 --> 00:14:01,089
implement<font color="#CCCCCC"> these things correctly and</font>

306
00:13:58,730 --> 00:14:03,560
<font color="#E5E5E5">lots of developers in</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> method</font>

307
00:14:01,089 --> 00:14:08,930
development environment<font color="#CCCCCC"> you just</font><font color="#E5E5E5"> don't</font>

308
00:14:03,560 --> 00:14:10,760
know how these abilities<font color="#E5E5E5"> like what kind</font>

309
00:14:08,930 --> 00:14:14,779
of functionality<font color="#E5E5E5"> they further provide</font>

310
00:14:10,760 --> 00:14:18,140
and so so some some uncovered

311
00:14:14,779 --> 00:14:23,600
functionality exists<font color="#CCCCCC"> err for example if</font>

312
00:14:18,140 --> 00:14:25,250
<font color="#E5E5E5">I system or network</font><font color="#CCCCCC"> which the developer</font>

313
00:14:23,600 --> 00:14:27,560
might not know of<font color="#E5E5E5"> course in security</font>

314
00:14:25,250 --> 00:14:30,200
community it's very<font color="#CCCCCC"> well known but it</font>

315
00:14:27,560 --> 00:14:36,260
might<font color="#CCCCCC"> not</font><font color="#E5E5E5"> be known in a meta development</font>

316
00:14:30,200 --> 00:14:38,330
environments<font color="#E5E5E5"> so therefore lots of this</font>

317
00:14:36,260 --> 00:14:40,010
these capabilities can<font color="#E5E5E5"> be used to</font>

318
00:14:38,330 --> 00:14:41,750
elevate<font color="#CCCCCC"> routes or even maybe</font><font color="#E5E5E5"> you don't</font>

319
00:14:40,010 --> 00:14:44,600
need<font color="#CCCCCC"> route because you can get access</font><font color="#E5E5E5"> to</font>

320
00:14:41,750 --> 00:14:47,180
<font color="#E5E5E5">certain things which we show later so</font>

321
00:14:44,600 --> 00:14:51,529
there is no really<font color="#CCCCCC"> true sandbox turn in</font>

322
00:14:47,180 --> 00:14:56,959
<font color="#E5E5E5">UNIX while</font><font color="#CCCCCC"> a developer might trust it as</font>

323
00:14:51,529 --> 00:15:00,740
it<font color="#CCCCCC"> is</font><font color="#E5E5E5"> so here's the example</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> ruthless</font>

324
00:14:56,959 --> 00:15:06,050
execution basically in<font color="#E5E5E5"> UNIX so a lower</font>

325
00:15:00,740 --> 00:15:08,209
child process<font color="#E5E5E5"> with certain abilities can</font>

326
00:15:06,050 --> 00:15:11,569
install interrupt service routine

327
00:15:08,209 --> 00:15:14,479
handler which runs<font color="#E5E5E5"> in the kernel space</font>

328
00:15:11,570 --> 00:15:17,410
<font color="#E5E5E5">and basically here we are invoking</font>

329
00:15:14,480 --> 00:15:21,100
<font color="#E5E5E5">arbitrary code reading which is located</font>

330
00:15:17,410 --> 00:15:21,100
within<font color="#CCCCCC"> the macrocosm</font>

331
00:15:21,620 --> 00:15:27,470
and interesting<font color="#CCCCCC"> saying</font><font color="#E5E5E5"> one of</font><font color="#CCCCCC"> the</font>

332
00:15:25,760 --> 00:15:32,360
<font color="#E5E5E5">interesting functionalities within EQ</font>

333
00:15:27,470 --> 00:15:35,050
annex<font color="#E5E5E5"> is basically</font><font color="#CCCCCC"> disk units</font><font color="#E5E5E5"> so units</font>

334
00:15:32,360 --> 00:15:37,550
<font color="#E5E5E5">make it possible for multiple</font>

335
00:15:35,050 --> 00:15:40,099
<font color="#CCCCCC">microkernels communicate with each other</font>

336
00:15:37,550 --> 00:15:43,040
<font color="#CCCCCC">over the</font><font color="#E5E5E5"> message passing functionalities</font>

337
00:15:40,100 --> 00:15:45,200
which we discussed before<font color="#CCCCCC"> either over</font>

338
00:15:43,040 --> 00:15:50,680
<font color="#CCCCCC">the serial communication or even the</font>

339
00:15:45,200 --> 00:15:50,680
network<font color="#E5E5E5"> so over anything basically and</font>

340
00:15:51,940 --> 00:15:56,510
so it's very<font color="#E5E5E5"> useful for</font><font color="#CCCCCC"> certain</font>

341
00:15:54,410 --> 00:15:58,160
<font color="#E5E5E5">applications so</font><font color="#CCCCCC"> for example if if you</font>

342
00:15:56,510 --> 00:15:59,780
have multiple engine control unit or

343
00:15:58,160 --> 00:16:02,209
<font color="#E5E5E5">electronic control</font><font color="#CCCCCC"> unit in a car</font><font color="#E5E5E5"> you</font>

344
00:15:59,780 --> 00:16:06,860
they can all<font color="#CCCCCC"> share</font><font color="#E5E5E5"> one cellular modem</font>

345
00:16:02,210 --> 00:16:10,460
with each other or a juicer can share

346
00:16:06,860 --> 00:16:12,590
<font color="#CCCCCC">multiple network interfaces and as you</font>

347
00:16:10,460 --> 00:16:16,690
can<font color="#E5E5E5"> see</font><font color="#CCCCCC"> here it's mapped in a slash net</font>

348
00:16:12,590 --> 00:16:20,480
director in<font color="#CCCCCC"> UNIX</font><font color="#E5E5E5"> and you can see all</font>

349
00:16:16,690 --> 00:16:22,880
connected nodes in the in the<font color="#E5E5E5"> Q net</font>

350
00:16:20,480 --> 00:16:27,740
basically<font color="#CCCCCC"> in the slash net directory of</font>

351
00:16:22,880 --> 00:16:31,550
<font color="#CCCCCC">communiques</font><font color="#E5E5E5"> however when they were</font>

352
00:16:27,740 --> 00:16:33,680
<font color="#E5E5E5">designing units</font><font color="#CCCCCC"> they didn't have</font>

353
00:16:31,550 --> 00:16:36,290
attackers in mind or like<font color="#E5E5E5"> they were</font>

354
00:16:33,680 --> 00:16:40,069
assuming<font color="#CCCCCC"> that it will be</font><font color="#E5E5E5"> executed or</font>

355
00:16:36,290 --> 00:16:41,180
being wrong<font color="#CCCCCC"> in a trusted</font><font color="#E5E5E5"> environment</font><font color="#CCCCCC"> so</font>

356
00:16:40,070 --> 00:16:43,820
<font color="#E5E5E5">therefore there is no authentication</font>

357
00:16:41,180 --> 00:16:45,560
basically and the only<font color="#E5E5E5"> thing which</font>

358
00:16:43,820 --> 00:16:50,270
basically<font color="#E5E5E5"> you need</font><font color="#CCCCCC"> really is that you</font>

359
00:16:45,560 --> 00:16:54,739
just pass a user ID<font color="#E5E5E5"> and that's it</font>

360
00:16:50,270 --> 00:16:57,470
basically<font color="#E5E5E5"> so and one unit node basically</font>

361
00:16:54,740 --> 00:16:59,600
<font color="#E5E5E5">access to all other</font><font color="#CCCCCC"> unit nodes in the</font>

362
00:16:57,470 --> 00:17:01,280
network<font color="#E5E5E5"> also</font><font color="#CCCCCC"> there</font><font color="#E5E5E5"> is no packet</font>

363
00:16:59,600 --> 00:17:04,360
integrity which means that you can<font color="#CCCCCC"> also</font>

364
00:17:01,280 --> 00:17:08,959
<font color="#E5E5E5">Forge your user ID</font>

365
00:17:04,359 --> 00:17:11,800
however it's not like<font color="#E5E5E5"> this again you</font>

366
00:17:08,959 --> 00:17:14,480
guys<font color="#E5E5E5"> can hang on the existing ropes</font>

367
00:17:11,800 --> 00:17:17,030
<font color="#E5E5E5">provided by Q net because Q net what</font>

368
00:17:14,480 --> 00:17:22,220
they do is that they can limit<font color="#CCCCCC"> certain</font>

369
00:17:17,030 --> 00:17:24,829
user<font color="#E5E5E5"> ID</font><font color="#CCCCCC"> or</font><font color="#E5E5E5"> map a user ID to more limited</font>

370
00:17:22,220 --> 00:17:27,560
user<font color="#E5E5E5"> IDs so let's say you have user ID</font>

371
00:17:24,829 --> 00:17:32,330
<font color="#E5E5E5">root in all your you're claiming that</font>

372
00:17:27,560 --> 00:17:34,659
<font color="#E5E5E5">you</font><font color="#CCCCCC"> are UID 0</font><font color="#E5E5E5"> they can map it to UID 99</font>

373
00:17:32,330 --> 00:17:38,139
in targets and

374
00:17:34,660 --> 00:17:39,790
<font color="#E5E5E5">qnet note so basically limiting you from</font>

375
00:17:38,140 --> 00:17:42,600
having root access suddenly in the

376
00:17:39,790 --> 00:17:47,050
device<font color="#E5E5E5"> right which is sounds good but</font>

377
00:17:42,600 --> 00:17:49,030
it's not working<font color="#CCCCCC"> because</font><font color="#E5E5E5"> basically their</font>

378
00:17:47,050 --> 00:17:53,680
resource manager<font color="#CCCCCC"> in</font><font color="#E5E5E5"> units basically</font>

379
00:17:49,030 --> 00:17:55,870
<font color="#E5E5E5">doesn't check the privilege of the the</font>

380
00:17:53,680 --> 00:17:59,620
<font color="#E5E5E5">the user ID basically so</font><font color="#CCCCCC"> basically you</font>

381
00:17:55,870 --> 00:18:04,689
can access<font color="#CCCCCC"> to any file in the</font><font color="#E5E5E5"> operating</font>

382
00:17:59,620 --> 00:18:06,909
<font color="#E5E5E5">system and really yeah so it doesn't</font>

383
00:18:04,690 --> 00:18:10,480
basically working<font color="#E5E5E5"> so basically bypass</font>

384
00:18:06,910 --> 00:18:12,940
<font color="#E5E5E5">this kind of mitigation provided by</font>

385
00:18:10,480 --> 00:18:15,940
<font color="#CCCCCC">communiques for map any map root which</font>

386
00:18:12,940 --> 00:18:17,830
you can limit the<font color="#E5E5E5"> user ID</font><font color="#CCCCCC"> i used a</font>

387
00:18:15,940 --> 00:18:21,190
specific high<font color="#CCCCCC"> privileged</font><font color="#E5E5E5"> user ID to a</font>

388
00:18:17,830 --> 00:18:24,760
<font color="#E5E5E5">limited one</font><font color="#CCCCCC"> the patch are</font><font color="#E5E5E5"> already</font>

389
00:18:21,190 --> 00:18:29,610
available<font color="#CCCCCC"> bark unix fork units but</font>

390
00:18:24,760 --> 00:18:29,610
overall<font color="#E5E5E5"> qnet fundamentally is broken</font>

391
00:18:30,150 --> 00:18:36,220
also clinics provide lots of debugging

392
00:18:33,310 --> 00:18:38,530
<font color="#E5E5E5">functionalities</font><font color="#CCCCCC"> so for</font><font color="#E5E5E5"> example</font><font color="#CCCCCC"> P debug</font>

393
00:18:36,220 --> 00:18:45,490
which is a process level debugging which

394
00:18:38,530 --> 00:18:49,899
basically like if similar to gdb or like

395
00:18:45,490 --> 00:18:52,770
<font color="#CCCCCC">fork</font><font color="#E5E5E5"> of gdb and it can provide debugging</font>

396
00:18:49,900 --> 00:18:56,190
functionality both over serial or tcp/ip

397
00:18:52,770 --> 00:18:59,200
<font color="#E5E5E5">there's a wrapper around it</font><font color="#CCCCCC"> q</font><font color="#E5E5E5"> con and</font>

398
00:18:56,190 --> 00:19:01,660
you can remote ID connectivity<font color="#CCCCCC"> over port</font>

399
00:18:59,200 --> 00:19:03,970
8000 to connect with it<font color="#E5E5E5"> there is no</font>

400
00:19:01,660 --> 00:19:05,890
authentication<font color="#CCCCCC"> so you can</font><font color="#E5E5E5"> basically</font>

401
00:19:03,970 --> 00:19:09,250
upload and download<font color="#E5E5E5"> files and run</font>

402
00:19:05,890 --> 00:19:12,490
anything<font color="#E5E5E5"> as routes</font><font color="#CCCCCC"> now so there is a</font>

403
00:19:09,250 --> 00:19:15,070
<font color="#CCCCCC">metric module for it I don't know if you</font>

404
00:19:12,490 --> 00:19:17,110
guys<font color="#E5E5E5"> are familiar with</font><font color="#CCCCCC"> VxWorks another</font>

405
00:19:15,070 --> 00:19:18,129
<font color="#E5E5E5">real-time operating system in a method</font>

406
00:19:17,110 --> 00:19:21,129
<font color="#CCCCCC">board</font>

407
00:19:18,130 --> 00:19:23,970
it's something<font color="#E5E5E5"> like</font><font color="#CCCCCC"> exploits or</font>

408
00:19:21,130 --> 00:19:28,420
Metasploit module which<font color="#E5E5E5"> exists that for</font>

409
00:19:23,970 --> 00:19:29,860
<font color="#CCCCCC">vxworks wdb agent</font><font color="#E5E5E5"> by</font><font color="#CCCCCC"> HT more so yeah</font>

410
00:19:28,420 --> 00:19:35,080
there are similar functionalities

411
00:19:29,860 --> 00:19:38,199
existing<font color="#CCCCCC"> qnx as well</font><font color="#E5E5E5"> there's also a</font>

412
00:19:35,080 --> 00:19:42,790
possibility<font color="#E5E5E5"> to dump a running process or</font>

413
00:19:38,200 --> 00:19:46,150
even<font color="#E5E5E5"> basically produce a post crash core</font>

414
00:19:42,790 --> 00:19:47,740
dumps and get it out of<font color="#E5E5E5"> a device and</font><font color="#CCCCCC"> its</font>

415
00:19:46,150 --> 00:19:50,140
really<font color="#E5E5E5"> nice</font><font color="#CCCCCC"> if you're</font>

416
00:19:47,740 --> 00:19:52,809
planning<font color="#E5E5E5"> to integrate it to</font><font color="#CCCCCC"> to fuzzing</font>

417
00:19:50,140 --> 00:19:54,460
or fuzzing frameworks

418
00:19:52,809 --> 00:19:59,470
<font color="#E5E5E5">there's also current debugging</font>

419
00:19:54,460 --> 00:20:02,280
functionality or<font color="#CCCCCC"> KT bar</font><font color="#E5E5E5"> it's only will</font>

420
00:19:59,470 --> 00:20:06,250
be<font color="#E5E5E5"> provided over serial only and</font>

421
00:20:02,280 --> 00:20:09,879
basically<font color="#E5E5E5"> you need to recompile the the</font>

422
00:20:06,250 --> 00:20:13,090
source operating system<font color="#CCCCCC"> because you have</font>

423
00:20:09,880 --> 00:20:14,770
to make the<font color="#E5E5E5"> proc NGO which is the</font>

424
00:20:13,090 --> 00:20:18,040
process<font color="#E5E5E5"> measure within the amount</font><font color="#CCCCCC"> within</font>

425
00:20:14,770 --> 00:20:24,370
a<font color="#E5E5E5"> microkernel debuggable</font>

426
00:20:18,040 --> 00:20:27,639
basically so trainings<font color="#E5E5E5"> also provide lots</font>

427
00:20:24,370 --> 00:20:29,889
of<font color="#E5E5E5"> debugging output in</font><font color="#CCCCCC"> this kernel</font>

428
00:20:27,640 --> 00:20:34,750
debugging functionality or<font color="#E5E5E5"> KT bar they</font>

429
00:20:29,890 --> 00:20:37,630
<font color="#CCCCCC">have so the where the error occurred</font><font color="#E5E5E5"> the</font>

430
00:20:34,750 --> 00:20:40,030
the stack<font color="#CCCCCC"> content register values</font><font color="#E5E5E5"> lots</font>

431
00:20:37,630 --> 00:20:43,860
of information order kernel code<font color="#CCCCCC"> Kerala</font>

432
00:20:40,030 --> 00:20:46,960
<font color="#CCCCCC">State</font><font color="#E5E5E5"> so all of them are provided yes</font>

433
00:20:43,860 --> 00:20:48,370
thanks for<font color="#CCCCCC"> that</font><font color="#E5E5E5"> so let's talk a little</font>

434
00:20:46,960 --> 00:20:52,179
<font color="#E5E5E5">bit about the pseudo-random number</font>

435
00:20:48,370 --> 00:20:53,860
generators<font color="#CCCCCC"> so this is quite</font><font color="#E5E5E5"> self-evident</font>

436
00:20:52,179 --> 00:20:55,809
<font color="#E5E5E5">but while look at the</font><font color="#CCCCCC"> beer</font><font color="#E5E5E5"> in G's of</font><font color="#CCCCCC"> Q</font>

437
00:20:53,860 --> 00:20:57,340
<font color="#E5E5E5">annex well because they form like on any</font>

438
00:20:55,809 --> 00:20:58,660
unix-like operating system the

439
00:20:57,340 --> 00:21:01,750
foundation of the wider cryptographic

440
00:20:58,660 --> 00:21:03,520
ecosystem just used a few<font color="#E5E5E5"> random for</font>

441
00:21:01,750 --> 00:21:05,470
cryptographically secure numbers<font color="#CCCCCC"> its</font>

442
00:21:03,520 --> 00:21:07,510
received wisdom and the strength<font color="#E5E5E5"> of</font>

443
00:21:05,470 --> 00:21:10,090
exploit mitigations in some cases like a

444
00:21:07,510 --> 00:21:11,860
SLR<font color="#E5E5E5"> or stack entries should depend but</font>

445
00:21:10,090 --> 00:21:13,990
it<font color="#E5E5E5"> don't but it should</font><font color="#CCCCCC"> depend on</font><font color="#E5E5E5"> the</font>

446
00:21:11,860 --> 00:21:15,820
<font color="#CCCCCC">strength</font><font color="#E5E5E5"> of the peer in G's actually so</font>

447
00:21:13,990 --> 00:21:17,740
if I can predict a cannery or an SLR

448
00:21:15,820 --> 00:21:22,300
address and it makes exploit development

449
00:21:17,740 --> 00:21:24,309
a<font color="#E5E5E5"> lot easier so</font><font color="#CCCCCC"> Q</font><font color="#E5E5E5"> annex has a user space</font>

450
00:21:22,300 --> 00:21:27,399
PNG which is accessed through<font color="#CCCCCC"> the def</font>

451
00:21:24,309 --> 00:21:28,360
random interface it's handled by a<font color="#E5E5E5"> user</font>

452
00:21:27,400 --> 00:21:30,429
<font color="#E5E5E5">space service</font>

453
00:21:28,360 --> 00:21:32,559
it's a microkernel<font color="#E5E5E5"> operating system</font>

454
00:21:30,429 --> 00:21:35,380
which is<font color="#E5E5E5"> running as root</font>

455
00:21:32,559 --> 00:21:38,649
this is started<font color="#E5E5E5"> after booth by the etc</font>

456
00:21:35,380 --> 00:21:40,510
startup script and on the kernel side of

457
00:21:38,650 --> 00:21:42,370
things as of Kunik<font color="#CCCCCC"> 7 they now have a</font>

458
00:21:40,510 --> 00:21:44,890
<font color="#E5E5E5">peer in G as well which is implemented</font>

459
00:21:42,370 --> 00:21:46,959
in the<font color="#CCCCCC"> microkernel executable as a</font>

460
00:21:44,890 --> 00:21:48,490
function named random value and this

461
00:21:46,960 --> 00:21:50,260
<font color="#E5E5E5">cannot</font><font color="#CCCCCC"> be accessed</font><font color="#E5E5E5"> directly in user</font>

462
00:21:48,490 --> 00:21:52,179
space and<font color="#E5E5E5"> we'll discuss the details</font><font color="#CCCCCC"> a</font>

463
00:21:50,260 --> 00:21:54,790
little<font color="#E5E5E5"> bit later</font>

464
00:21:52,179 --> 00:21:56,980
so the<font color="#CCCCCC"> Burin</font><font color="#E5E5E5"> G for the user space part</font>

465
00:21:54,790 --> 00:21:59,770
<font color="#E5E5E5">for Q annex 6 was covered in our talk</font>

466
00:21:56,980 --> 00:22:01,020
wheel of<font color="#CCCCCC"> fortune' at 33 C</font><font color="#E5E5E5"> 3 so I'll keep</font>

467
00:21:59,770 --> 00:22:03,150
it<font color="#CCCCCC"> short here</font>

468
00:22:01,020 --> 00:22:05,730
the underlying<font color="#E5E5E5"> PNG is based on yarrow by</font>

469
00:22:03,150 --> 00:22:07,559
Bruce Schneier and others and there were

470
00:22:05,730 --> 00:22:09,360
various problems here<font color="#E5E5E5"> because it was</font>

471
00:22:07,559 --> 00:22:11,280
based on an older<font color="#CCCCCC"> version of yarrow</font>

472
00:22:09,360 --> 00:22:12,659
instead of the reference version and

473
00:22:11,280 --> 00:22:14,428
that<font color="#E5E5E5"> they</font><font color="#CCCCCC"> added a</font><font color="#E5E5E5"> bunch of really</font>

474
00:22:12,660 --> 00:22:16,470
cryptographically sketchy design

475
00:22:14,429 --> 00:22:18,780
decisions on top of that but the biggest

476
00:22:16,470 --> 00:22:20,370
<font color="#E5E5E5">problem was</font><font color="#CCCCCC"> that it had</font><font color="#E5E5E5"> low quality boo</font>

477
00:22:18,780 --> 00:22:21,389
time entropy as you can see on the top

478
00:22:20,370 --> 00:22:24,120
right<font color="#CCCCCC"> of the</font><font color="#E5E5E5"> slide</font>

479
00:22:21,390 --> 00:22:26,640
it used clock time clock cycles the

480
00:22:24,120 --> 00:22:28,260
<font color="#E5E5E5">currently running process IDs at boot</font>

481
00:22:26,640 --> 00:22:30,240
time which is always static and the

482
00:22:28,260 --> 00:22:31,920
device names which is static<font color="#E5E5E5"> as well and</font>

483
00:22:30,240 --> 00:22:33,809
then they pull<font color="#CCCCCC"> atresia 1 and that</font><font color="#E5E5E5"> was</font>

484
00:22:31,920 --> 00:22:37,290
basically<font color="#E5E5E5"> the appear in G internal state</font>

485
00:22:33,809 --> 00:22:39,270
now this was<font color="#E5E5E5"> very low</font><font color="#CCCCCC"> boot time entropy</font>

486
00:22:37,290 --> 00:22:41,490
quality but to make it<font color="#E5E5E5"> worse</font><font color="#CCCCCC"> reseed</font>

487
00:22:39,270 --> 00:22:43,200
control was broken so<font color="#E5E5E5"> during run time</font>

488
00:22:41,490 --> 00:22:44,820
they would collect additional entropy

489
00:22:43,200 --> 00:22:46,890
but they would never<font color="#CCCCCC"> actually feed it</font>

490
00:22:44,820 --> 00:22:48,960
back<font color="#CCCCCC"> into it appear</font><font color="#E5E5E5"> in G</font><font color="#CCCCCC"> state again so</font>

491
00:22:46,890 --> 00:22:50,429
the only<font color="#CCCCCC"> peer in G entropy that was in</font>

492
00:22:48,960 --> 00:22:52,470
the<font color="#E5E5E5"> system at all was whatever they</font>

493
00:22:50,429 --> 00:22:55,530
collected at boot and<font color="#E5E5E5"> that was</font><font color="#CCCCCC"> kind of</font>

494
00:22:52,470 --> 00:22:58,380
bad<font color="#E5E5E5"> so after we reported some of this</font>

495
00:22:55,530 --> 00:23:01,139
stuff<font color="#E5E5E5"> to</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> blackberry they redesigned</font>

496
00:22:58,380 --> 00:23:03,360
the<font color="#E5E5E5"> user space</font><font color="#CCCCCC"> PNG</font><font color="#E5E5E5"> based on our feedback</font>

497
00:23:01,140 --> 00:23:04,830
<font color="#E5E5E5">they now use the heimdall fortuna</font>

498
00:23:03,360 --> 00:23:06,840
implementation for<font color="#E5E5E5"> those of you familiar</font>

499
00:23:04,830 --> 00:23:08,850
with<font color="#CCCCCC"> it</font><font color="#E5E5E5"> they</font><font color="#CCCCCC"> have a couple of</font><font color="#E5E5E5"> new</font>

500
00:23:06,840 --> 00:23:11,100
entropy sources they have an<font color="#CCCCCC"> eerie</font><font color="#E5E5E5"> seed</font>

501
00:23:08,850 --> 00:23:13,409
control mechanism<font color="#CCCCCC"> the</font><font color="#E5E5E5"> overall quality</font>

502
00:23:11,100 --> 00:23:15,059
seems<font color="#E5E5E5"> to be much better than given x6</font>

503
00:23:13,410 --> 00:23:17,010
but there is some potential<font color="#CCCCCC"> for</font>

504
00:23:15,059 --> 00:23:18,590
<font color="#E5E5E5">weaknesses depending on system</font>

505
00:23:17,010 --> 00:23:20,820
integration conditions because obviously

506
00:23:18,590 --> 00:23:22,379
usually when<font color="#E5E5E5"> this is used in an embedded</font>

507
00:23:20,820 --> 00:23:25,110
system there is<font color="#E5E5E5"> layers and layers and</font>

508
00:23:22,380 --> 00:23:27,440
<font color="#CCCCCC">layers of OMS with all very</font><font color="#E5E5E5"> specific</font>

509
00:23:25,110 --> 00:23:31,020
embedded requirements when integrating

510
00:23:27,440 --> 00:23:33,000
<font color="#CCCCCC">cue annex into</font><font color="#E5E5E5"> their product so this is</font>

511
00:23:31,020 --> 00:23:35,700
what it looks like<font color="#E5E5E5"> right now in Kunik</font><font color="#CCCCCC"> 7</font>

512
00:23:33,000 --> 00:23:37,710
and in green you can<font color="#CCCCCC"> see the new the new</font>

513
00:23:35,700 --> 00:23:40,290
entropy sources<font color="#E5E5E5"> so on the top left you</font>

514
00:23:37,710 --> 00:23:42,300
have<font color="#CCCCCC"> a seed file</font><font color="#E5E5E5"> and this was integrated</font>

515
00:23:40,290 --> 00:23:44,639
<font color="#E5E5E5">to to basically mitigate low</font><font color="#CCCCCC"> bouton</font>

516
00:23:42,300 --> 00:23:46,169
<font color="#E5E5E5">entropy conditions</font><font color="#CCCCCC"> so what they have is</font>

517
00:23:44,640 --> 00:23:48,360
you can<font color="#CCCCCC"> supply as part of</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> firmware</font>

518
00:23:46,170 --> 00:23:50,790
<font color="#CCCCCC">you can supply a little</font><font color="#E5E5E5"> bit of a file</font>

519
00:23:48,360 --> 00:23:52,889
with<font color="#E5E5E5"> entropy and after the system shuts</font>

520
00:23:50,790 --> 00:23:54,809
down<font color="#E5E5E5"> it will put some output from the</font>

521
00:23:52,890 --> 00:23:56,370
PNG back into the file<font color="#CCCCCC"> so that</font><font color="#E5E5E5"> the next</font>

522
00:23:54,809 --> 00:23:59,550
<font color="#CCCCCC">time they boot</font><font color="#E5E5E5"> they have some additional</font>

523
00:23:56,370 --> 00:24:02,129
<font color="#CCCCCC">budem entropy the second new source is</font>

524
00:23:59,550 --> 00:24:02,639
<font color="#E5E5E5">the user supplied source which is</font>

525
00:24:02,130 --> 00:24:05,580
basically

526
00:24:02,640 --> 00:24:08,160
<font color="#CCCCCC">via</font><font color="#E5E5E5"> the DEF random interface which is</font>

527
00:24:05,580 --> 00:24:10,350
<font color="#E5E5E5">made writable by</font><font color="#CCCCCC"> default</font><font color="#E5E5E5"> it's world</font>

528
00:24:08,160 --> 00:24:12,390
writable<font color="#E5E5E5"> which is not that good an idea</font>

529
00:24:10,350 --> 00:24:15,449
<font color="#E5E5E5">but it can be locked down</font><font color="#CCCCCC"> with some</font>

530
00:24:12,390 --> 00:24:17,190
permissions and here system integrators

531
00:24:15,450 --> 00:24:19,410
can<font color="#CCCCCC"> ride their</font><font color="#E5E5E5"> own entropy gathering</font>

532
00:24:17,190 --> 00:24:21,690
<font color="#E5E5E5">demon to feed from whatever source is</font>

533
00:24:19,410 --> 00:24:24,030
available<font color="#CCCCCC"> on their embedded system and</font>

534
00:24:21,690 --> 00:24:26,670
the final source<font color="#E5E5E5"> is the</font><font color="#CCCCCC"> receipt source</font>

535
00:24:24,030 --> 00:24:29,280
<font color="#E5E5E5">which unfortunately does not contribute</font>

536
00:24:26,670 --> 00:24:31,740
very<font color="#E5E5E5"> high quality random entropy because</font>

537
00:24:29,280 --> 00:24:33,840
<font color="#CCCCCC">it uses</font><font color="#E5E5E5"> the currently running process ID</font>

538
00:24:31,740 --> 00:24:36,180
<font color="#E5E5E5">which is always static for the random</font>

539
00:24:33,840 --> 00:24:37,980
service<font color="#CCCCCC"> there currently</font><font color="#E5E5E5"> the current time</font>

540
00:24:36,180 --> 00:24:39,960
and<font color="#CCCCCC"> the clock cycles value which are</font>

541
00:24:37,980 --> 00:24:42,510
<font color="#E5E5E5">both very low quality entropy sources</font>

542
00:24:39,960 --> 00:24:46,230
<font color="#E5E5E5">it's mitigated somewhat by the fact that</font>

543
00:24:42,510 --> 00:24:49,350
<font color="#E5E5E5">they also use rc4</font><font color="#CCCCCC"> fat with the output of</font>

544
00:24:46,230 --> 00:24:51,870
the<font color="#E5E5E5"> PNG itself so overall it's better</font>

545
00:24:49,350 --> 00:24:53,790
but if you're evaluating a Kunik system

546
00:24:51,870 --> 00:24:56,370
make<font color="#CCCCCC"> sure to</font><font color="#E5E5E5"> look at what particular</font>

547
00:24:53,790 --> 00:24:58,139
<font color="#E5E5E5">selection of entropy sources they chose</font>

548
00:24:56,370 --> 00:25:00,030
and where they're feeding them from but

549
00:24:58,140 --> 00:25:04,050
because it could<font color="#E5E5E5"> be worse than you think</font>

550
00:25:00,030 --> 00:25:06,270
<font color="#E5E5E5">it is so as of q1 x7 they've also</font>

551
00:25:04,050 --> 00:25:08,700
introduced<font color="#E5E5E5"> a</font><font color="#CCCCCC"> new kernel PNG after our</font>

552
00:25:06,270 --> 00:25:10,710
assessment and<font color="#E5E5E5"> this is currently only</font>

553
00:25:08,700 --> 00:25:12,030
<font color="#CCCCCC">used for a SLR stack Canaries and a</font>

554
00:25:10,710 --> 00:25:14,280
couple<font color="#E5E5E5"> of other</font><font color="#CCCCCC"> security related</font>

555
00:25:12,030 --> 00:25:16,770
<font color="#CCCCCC">functionality</font><font color="#E5E5E5"> and you can see it</font>

556
00:25:14,280 --> 00:25:18,690
pictured on the right<font color="#CCCCCC"> of the slide</font><font color="#E5E5E5"> so</font>

557
00:25:16,770 --> 00:25:20,280
what happens is they gather sources of

558
00:25:18,690 --> 00:25:22,110
entropy<font color="#E5E5E5"> from a couple</font><font color="#CCCCCC"> of different</font>

559
00:25:20,280 --> 00:25:24,720
<font color="#E5E5E5">sources so they have like the currently</font>

560
00:25:22,110 --> 00:25:27,120
active process ID<font color="#E5E5E5"> they have the clock</font>

561
00:25:24,720 --> 00:25:29,760
cycles value they<font color="#CCCCCC"> have</font><font color="#E5E5E5"> the current time</font>

562
00:25:27,120 --> 00:25:32,250
in nanoseconds they have a random seed

563
00:25:29,760 --> 00:25:33,740
<font color="#CCCCCC">value which can</font><font color="#E5E5E5"> be supplied by means of</font>

564
00:25:32,250 --> 00:25:36,120
a system call they introduced

565
00:25:33,740 --> 00:25:37,800
specifically for this purpose<font color="#CCCCCC"> it's a</font>

566
00:25:36,120 --> 00:25:39,419
system call you can only call if you

567
00:25:37,800 --> 00:25:41,580
<font color="#E5E5E5">have the right capabilities by the way</font>

568
00:25:39,420 --> 00:25:44,280
and then they concatenate all of this

569
00:25:41,580 --> 00:25:46,830
into a single<font color="#CCCCCC"> block</font><font color="#E5E5E5"> that's</font><font color="#CCCCCC"> fat through</font>

570
00:25:44,280 --> 00:25:48,440
shout<font color="#CCCCCC"> two</font><font color="#E5E5E5"> five</font><font color="#CCCCCC"> six</font><font color="#E5E5E5"> and then the output</font>

571
00:25:46,830 --> 00:25:51,120
<font color="#CCCCCC">of that is chopped into individual</font>

572
00:25:48,440 --> 00:25:52,950
<font color="#CCCCCC">32-bit blocks</font><font color="#E5E5E5"> the first of which</font><font color="#CCCCCC"> is kept</font>

573
00:25:51,120 --> 00:25:55,560
secret<font color="#CCCCCC"> it's never actually</font><font color="#E5E5E5"> output it's</font>

574
00:25:52,950 --> 00:25:56,850
kept as a salt value and<font color="#E5E5E5"> subsequent</font>

575
00:25:55,560 --> 00:25:59,040
values<font color="#E5E5E5"> whenever the random value</font>

576
00:25:56,850 --> 00:26:01,260
<font color="#CCCCCC">function is</font><font color="#E5E5E5"> called get output by the</font>

577
00:25:59,040 --> 00:26:03,389
function so<font color="#CCCCCC"> you get a sequence of</font><font color="#E5E5E5"> 32 bit</font>

578
00:26:01,260 --> 00:26:06,000
blocks<font color="#E5E5E5"> and once the entire appear in</font><font color="#CCCCCC"> GA</font>

579
00:26:03,390 --> 00:26:07,500
output state is exhausted the entire

580
00:26:06,000 --> 00:26:10,950
<font color="#E5E5E5">process starts again but this time</font>

581
00:26:07,500 --> 00:26:12,480
including<font color="#CCCCCC"> the seed value</font><font color="#E5E5E5"> that was kept</font>

582
00:26:10,950 --> 00:26:16,890
secret<font color="#E5E5E5"> so this is actually quite good</font>

583
00:26:12,480 --> 00:26:20,760
<font color="#E5E5E5">kernel Beringia let's talk about the</font>

584
00:26:16,890 --> 00:26:22,890
exploit mitigations of<font color="#E5E5E5"> qnx so while look</font>

585
00:26:20,760 --> 00:26:24,690
at<font color="#E5E5E5"> the exploit mitigations well because</font>

586
00:26:22,890 --> 00:26:26,220
the mitigations<font color="#E5E5E5"> that were</font><font color="#CCCCCC"> girlie</font>

587
00:26:24,690 --> 00:26:29,310
used to in the<font color="#CCCCCC"> general-purpose</font><font color="#E5E5E5"> world</font>

588
00:26:26,220 --> 00:26:30,990
<font color="#E5E5E5">Windows Linux BSD they didn't come</font>

589
00:26:29,310 --> 00:26:33,659
falling<font color="#E5E5E5"> from the sky and they didn't</font>

590
00:26:30,990 --> 00:26:35,700
<font color="#E5E5E5">have the quality they</font><font color="#CCCCCC"> have now when they</font>

591
00:26:33,660 --> 00:26:37,620
first started<font color="#E5E5E5"> being implemented and</font>

592
00:26:35,700 --> 00:26:39,720
being rolled out<font color="#E5E5E5"> there was</font><font color="#CCCCCC"> actually a</font>

593
00:26:37,620 --> 00:26:42,149
long history all<font color="#E5E5E5"> of you will be very</font>

594
00:26:39,720 --> 00:26:43,770
<font color="#E5E5E5">familiar with of weaknesses and</font><font color="#CCCCCC"> bypasses</font>

595
00:26:42,150 --> 00:26:46,320
and subsequent improvements that<font color="#CCCCCC"> took</font>

596
00:26:43,770 --> 00:26:48,300
years<font color="#E5E5E5"> and</font><font color="#CCCCCC"> years but</font><font color="#E5E5E5"> because nobody is</font>

597
00:26:46,320 --> 00:26:51,149
actually<font color="#E5E5E5"> looked at the mitigations in</font>

598
00:26:48,300 --> 00:26:52,980
<font color="#CCCCCC">qnx this</font><font color="#E5E5E5"> similar history is not there so</font>

599
00:26:51,150 --> 00:26:55,260
there's a lot<font color="#E5E5E5"> of low hanging fruit to</font>

600
00:26:52,980 --> 00:26:58,200
<font color="#E5E5E5">pick off and there's a second point</font>

601
00:26:55,260 --> 00:27:00,480
that's<font color="#CCCCCC"> communiques does not come from</font>

602
00:26:58,200 --> 00:27:02,760
<font color="#E5E5E5">the same architectural legacy as Windows</font>

603
00:27:00,480 --> 00:27:05,460
Linux or BSD<font color="#CCCCCC"> so they could not easily</font>

604
00:27:02,760 --> 00:27:07,470
port one to one<font color="#CCCCCC"> any improvements that</font>

605
00:27:05,460 --> 00:27:10,100
were being rolled out there so there's a

606
00:27:07,470 --> 00:27:12,930
lot<font color="#E5E5E5"> of homebrew stuff in there</font>

607
00:27:10,100 --> 00:27:14,730
so what mitigations are available for

608
00:27:12,930 --> 00:27:16,860
<font color="#CCCCCC">qyx right now</font><font color="#E5E5E5"> while there is data</font>

609
00:27:14,730 --> 00:27:18,600
execution prevention<font color="#CCCCCC"> norris address</font>

610
00:27:16,860 --> 00:27:21,110
space layout randomization there are

611
00:27:18,600 --> 00:27:23,969
stack enemies and<font color="#E5E5E5"> there is really</font>

612
00:27:21,110 --> 00:27:26,340
relocation read-only<font color="#CCCCCC"> railro very hard to</font>

613
00:27:23,970 --> 00:27:28,710
pronounce<font color="#E5E5E5"> these are not enabled by</font>

614
00:27:26,340 --> 00:27:30,720
<font color="#CCCCCC">default however</font><font color="#E5E5E5"> so it might</font><font color="#CCCCCC"> just be that</font>

615
00:27:28,710 --> 00:27:32,190
<font color="#E5E5E5">if you encounter a</font><font color="#CCCCCC"> queue an X</font><font color="#E5E5E5"> firmware</font>

616
00:27:30,720 --> 00:27:35,430
image<font color="#E5E5E5"> even</font><font color="#CCCCCC"> if</font><font color="#E5E5E5"> it's the latest version</font>

617
00:27:32,190 --> 00:27:37,380
<font color="#E5E5E5">given X 7 whatever then if system</font>

618
00:27:35,430 --> 00:27:38,880
integrators did not<font color="#E5E5E5"> explicitly enable</font>

619
00:27:37,380 --> 00:27:41,370
these mitigations it might still<font color="#E5E5E5"> be</font>

620
00:27:38,880 --> 00:27:44,040
exploiting like it's the 90s<font color="#CCCCCC"> so also</font>

621
00:27:41,370 --> 00:27:45,810
don't expect<font color="#CCCCCC"> any more modern mitigations</font>

622
00:27:44,040 --> 00:27:47,639
like feed table protection<font color="#E5E5E5"> it's not</font>

623
00:27:45,810 --> 00:27:48,450
there there's no control flow integrity

624
00:27:47,640 --> 00:27:49,950
of any kind

625
00:27:48,450 --> 00:27:53,700
there's no kernel<font color="#CCCCCC"> data and code</font>

626
00:27:49,950 --> 00:27:56,040
isolation this<font color="#E5E5E5"> may be part of of the</font>

627
00:27:53,700 --> 00:27:58,200
future but as far as<font color="#E5E5E5"> I gather there's no</font>

628
00:27:56,040 --> 00:28:01,800
clear<font color="#E5E5E5"> roadmap for this yeah so it's just</font>

629
00:27:58,200 --> 00:28:03,600
<font color="#E5E5E5">these mitigations now Kunik</font><font color="#CCCCCC"> unix</font><font color="#E5E5E5"> has</font>

630
00:28:01,800 --> 00:28:05,850
support for hardware<font color="#E5E5E5"> based data</font>

631
00:28:03,600 --> 00:28:09,600
execution prevention<font color="#E5E5E5"> by means of using</font>

632
00:28:05,850 --> 00:28:12,179
<font color="#CCCCCC">the well-known annex and exam bits</font><font color="#E5E5E5"> it</font>

633
00:28:09,600 --> 00:28:14,189
has support<font color="#E5E5E5"> for this on x86 it also</font>

634
00:28:12,180 --> 00:28:16,530
support<font color="#CCCCCC"> for this</font><font color="#E5E5E5"> on arm it does not</font>

635
00:28:14,190 --> 00:28:20,070
however<font color="#E5E5E5"> have support for this on</font><font color="#CCCCCC"> mips</font>

636
00:28:16,530 --> 00:28:21,990
even though mips32 after release 3 I

637
00:28:20,070 --> 00:28:24,570
think<font color="#CCCCCC"> has support for</font><font color="#E5E5E5"> a bit like</font><font color="#CCCCCC"> that</font>

638
00:28:21,990 --> 00:28:28,320
for PowerPC there's a lot of variation

639
00:28:24,570 --> 00:28:30,629
but that's you know<font color="#E5E5E5"> PowerPC</font><font color="#CCCCCC"> so the real</font>

640
00:28:28,320 --> 00:28:33,689
<font color="#E5E5E5">problem with given X</font><font color="#CCCCCC"> DB is that it has</font>

641
00:28:30,630 --> 00:28:36,150
insecure default settings<font color="#E5E5E5"> so regardless</font>

642
00:28:33,690 --> 00:28:37,549
<font color="#E5E5E5">of whether it's enabled or not the stack</font>

643
00:28:36,150 --> 00:28:41,299
is always left

644
00:28:37,549 --> 00:28:43,369
<font color="#CCCCCC">even though the heap is not</font><font color="#E5E5E5"> if you link</font>

645
00:28:41,299 --> 00:28:46,279
and compile with<font color="#E5E5E5"> all the proper settings</font>

646
00:28:43,369 --> 00:28:48,439
then the new stack elf program header is

647
00:28:46,279 --> 00:28:50,210
completely<font color="#E5E5E5"> ignored by the program loader</font>

648
00:28:48,440 --> 00:28:51,739
so regardless of<font color="#E5E5E5"> your tool chain being</font>

649
00:28:50,210 --> 00:28:53,690
<font color="#E5E5E5">set up regardless</font><font color="#CCCCCC"> of you</font><font color="#E5E5E5"> know having</font>

650
00:28:51,739 --> 00:28:56,539
hardware support for<font color="#CCCCCC"> this the stack will</font>

651
00:28:53,690 --> 00:28:58,700
be executable now it's possible<font color="#E5E5E5"> to</font><font color="#CCCCCC"> turn</font>

652
00:28:56,539 --> 00:29:00,980
this off by specifying a particular

653
00:28:58,700 --> 00:29:02,960
<font color="#E5E5E5">option in a microkernel start up</font><font color="#CCCCCC"> flags</font>

654
00:29:00,980 --> 00:29:05,269
<font color="#E5E5E5">but the problem is that this is</font><font color="#CCCCCC"> a</font>

655
00:29:02,960 --> 00:29:07,610
system-wide setting<font color="#E5E5E5"> so there's no</font><font color="#CCCCCC"> opt</font>

656
00:29:05,269 --> 00:29:09,379
<font color="#CCCCCC">out if you have any legacy applications</font>

657
00:29:07,610 --> 00:29:11,928
that for whatever reason need to have

658
00:29:09,379 --> 00:29:13,519
like an executable stack<font color="#CCCCCC"> it'd be you</font>

659
00:29:11,929 --> 00:29:15,859
know trampolines understand or whatever

660
00:29:13,519 --> 00:29:18,409
then they can no<font color="#CCCCCC"> longer function</font><font color="#E5E5E5"> and</font>

661
00:29:15,859 --> 00:29:19,369
system<font color="#E5E5E5"> integrators might decide you</font><font color="#CCCCCC"> know</font>

662
00:29:18,409 --> 00:29:20,749
they want to<font color="#CCCCCC"> keep a particular</font>

663
00:29:19,369 --> 00:29:22,699
<font color="#CCCCCC">application that needs</font><font color="#E5E5E5"> this</font>

664
00:29:20,749 --> 00:29:24,529
functionality<font color="#E5E5E5"> and not enable this or</font>

665
00:29:22,700 --> 00:29:27,109
they're<font color="#E5E5E5"> simply not</font><font color="#CCCCCC"> aware of</font><font color="#E5E5E5"> this flag at</font>

666
00:29:24,529 --> 00:29:29,239
all<font color="#E5E5E5"> so this issue is</font><font color="#CCCCCC"> still present</font><font color="#E5E5E5"> on</font>

667
00:29:27,109 --> 00:29:31,189
<font color="#CCCCCC">UNIX six</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> seven</font><font color="#E5E5E5"> and it's not going</font>

668
00:29:29,239 --> 00:29:33,769
away they're not<font color="#E5E5E5"> moving to any opt out</font>

669
00:29:31,190 --> 00:29:35,869
model here so if you encounter a UNIX

670
00:29:33,769 --> 00:29:37,879
firmware image just check if this<font color="#E5E5E5"> is</font>

671
00:29:35,869 --> 00:29:39,590
among the startup<font color="#CCCCCC"> flags because</font><font color="#E5E5E5"> if it's</font>

672
00:29:37,879 --> 00:29:44,330
not you<font color="#E5E5E5"> won't have to bother with</font><font color="#CCCCCC"> a lot</font>

673
00:29:39,590 --> 00:29:47,029
<font color="#E5E5E5">of other stuff</font><font color="#CCCCCC"> so Q annex a is allow Q</font>

674
00:29:44,330 --> 00:29:48,889
annex<font color="#E5E5E5"> a</font><font color="#CCCCCC"> solarz enabled again</font><font color="#E5E5E5"> by starting</font>

675
00:29:47,029 --> 00:29:51,590
the microkernel with a dedicated flag

676
00:29:48,889 --> 00:29:54,678
<font color="#CCCCCC">child</font><font color="#E5E5E5"> processes inherent their parents a</font>

677
00:29:51,590 --> 00:29:58,158
<font color="#E5E5E5">SLR settings so they can be toggled on</font><font color="#CCCCCC"> a</font>

678
00:29:54,679 --> 00:30:00,139
<font color="#E5E5E5">process basis they randomized the</font>

679
00:29:58,159 --> 00:30:01,609
objects at<font color="#CCCCCC"> a base</font><font color="#E5E5E5"> address</font><font color="#CCCCCC"> level</font><font color="#E5E5E5"> so it's</font>

680
00:30:00,139 --> 00:30:03,258
not very fine-grained but as

681
00:30:01,609 --> 00:30:05,509
fine-grained as most<font color="#E5E5E5"> days all our</font>

682
00:30:03,259 --> 00:30:07,639
implementations and it randomizes<font color="#E5E5E5"> all</font>

683
00:30:05,509 --> 00:30:10,100
the memory objects as<font color="#E5E5E5"> you can see on the</font>

684
00:30:07,639 --> 00:30:12,498
right<font color="#CCCCCC"> of the slide except for the kernel</font>

685
00:30:10,100 --> 00:30:14,840
code<font color="#E5E5E5"> image how terrible that is depends</font>

686
00:30:12,499 --> 00:30:16,389
<font color="#E5E5E5">on your</font><font color="#CCCCCC"> opinion of ka Lars usefulness in</font>

687
00:30:14,840 --> 00:30:19,369
general especially<font color="#CCCCCC"> in embedded systems</font>

688
00:30:16,389 --> 00:30:22,668
<font color="#CCCCCC">but so far they they randomized most of</font>

689
00:30:19,369 --> 00:30:23,869
the stuff<font color="#CCCCCC"> a problem is</font><font color="#E5E5E5"> that they</font><font color="#CCCCCC"> have in</font>

690
00:30:22,669 --> 00:30:26,269
the<font color="#E5E5E5"> tool chain</font>

691
00:30:23,869 --> 00:30:28,428
they have<font color="#CCCCCC"> PI disabled by default so that</font>

692
00:30:26,269 --> 00:30:30,230
means that no of the system binaries you

693
00:30:28,429 --> 00:30:31,850
encounter by default and none of<font color="#E5E5E5"> the</font>

694
00:30:30,230 --> 00:30:33,679
stuff<font color="#CCCCCC"> that will be compiled</font><font color="#E5E5E5"> and linked</font>

695
00:30:31,850 --> 00:30:36,049
with<font color="#E5E5E5"> default to change settings will</font>

696
00:30:33,679 --> 00:30:37,730
have position independent executables so

697
00:30:36,049 --> 00:30:39,739
any of the executable image code

698
00:30:37,730 --> 00:30:42,139
addresses won't be randomized by a<font color="#E5E5E5"> SLR</font>

699
00:30:39,739 --> 00:30:44,570
<font color="#E5E5E5">but kind of defeats love the point there</font>

700
00:30:42,139 --> 00:30:46,649
<font color="#E5E5E5">so make sure to</font><font color="#CCCCCC"> check</font><font color="#E5E5E5"> whether it is is</font>

701
00:30:44,570 --> 00:30:50,040
enabled if you're you know defender<font color="#CCCCCC"> or</font>

702
00:30:46,650 --> 00:30:52,680
an attacker<font color="#E5E5E5"> so in order to figure out</font>

703
00:30:50,040 --> 00:30:54,810
<font color="#CCCCCC">how QNX aslr works under the</font><font color="#E5E5E5"> hood</font><font color="#CCCCCC"> i</font>

704
00:30:52,680 --> 00:30:57,270
reverse engineer the memory manager and

705
00:30:54,810 --> 00:30:59,610
here you can see<font color="#CCCCCC"> like</font><font color="#E5E5E5"> roughly</font><font color="#CCCCCC"> the layout</font>

706
00:30:57,270 --> 00:31:01,620
<font color="#E5E5E5">but what it all comes down to is</font><font color="#CCCCCC"> that</font>

707
00:30:59,610 --> 00:31:04,620
under the<font color="#CCCCCC"> hood it all comes down to the</font>

708
00:31:01,620 --> 00:31:08,209
<font color="#E5E5E5">EM map</font><font color="#CCCCCC"> goal which</font><font color="#E5E5E5"> is implemented in the</font>

709
00:31:04,620 --> 00:31:10,800
<font color="#E5E5E5">microkernel memory manager</font><font color="#CCCCCC"> Siskel's</font><font color="#E5E5E5"> and</font>

710
00:31:08,210 --> 00:31:12,660
the<font color="#E5E5E5"> randomization happens in the two</font>

711
00:31:10,800 --> 00:31:14,669
functions that<font color="#E5E5E5"> are highlighted in blue</font>

712
00:31:12,660 --> 00:31:16,560
and<font color="#E5E5E5"> that's stack randomized and map find</font>

713
00:31:14,670 --> 00:31:18,480
virtual address<font color="#CCCCCC"> and both of</font><font color="#E5E5E5"> these</font>

714
00:31:16,560 --> 00:31:20,490
<font color="#CCCCCC">functions which apply the randomization</font>

715
00:31:18,480 --> 00:31:22,350
in question<font color="#E5E5E5"> rely on the same random</font>

716
00:31:20,490 --> 00:31:24,990
<font color="#E5E5E5">number generator which we'll discuss in</font>

717
00:31:22,350 --> 00:31:27,750
<font color="#CCCCCC">just a minute</font><font color="#E5E5E5"> now the first of these</font>

718
00:31:24,990 --> 00:31:29,280
functions map find<font color="#CCCCCC"> VA randomizes among</font>

719
00:31:27,750 --> 00:31:31,890
other things the virtual address<font color="#CCCCCC"> is</font>

720
00:31:29,280 --> 00:31:33,450
<font color="#E5E5E5">returned by a map calls so the way this</font>

721
00:31:31,890 --> 00:31:35,940
happens as you can see on the right<font color="#CCCCCC"> of</font>

722
00:31:33,450 --> 00:31:38,190
<font color="#CCCCCC">this light it</font><font color="#E5E5E5"> subtracts or adds a random</font>

723
00:31:35,940 --> 00:31:40,260
value to or<font color="#E5E5E5"> from the phone virtual</font>

724
00:31:38,190 --> 00:31:42,000
address<font color="#E5E5E5"> and it does this by</font><font color="#CCCCCC"> taking</font><font color="#E5E5E5"> the</font>

725
00:31:40,260 --> 00:31:44,250
lower 32 bits of the random number

726
00:31:42,000 --> 00:31:47,010
generator<font color="#E5E5E5"> result bit was left shifting</font>

727
00:31:44,250 --> 00:31:49,470
them by 12 then extracting the lower 24

728
00:31:47,010 --> 00:31:51,570
bits and applying that<font color="#CCCCCC"> and the</font><font color="#E5E5E5"> problem</font>

729
00:31:49,470 --> 00:31:54,270
is that<font color="#CCCCCC"> this bit masking regardless of</font>

730
00:31:51,570 --> 00:31:56,310
the<font color="#CCCCCC"> quality</font><font color="#E5E5E5"> of the RNG contributes at</font>

731
00:31:54,270 --> 00:31:59,340
most 12 bits of entropy which is worse

732
00:31:56,310 --> 00:32:01,290
in practice as we'll see now the second

733
00:31:59,340 --> 00:32:02,970
of these randomization functions is

734
00:32:01,290 --> 00:32:04,860
called<font color="#E5E5E5"> very conveniently stack</font>

735
00:32:02,970 --> 00:32:06,680
<font color="#CCCCCC">randomized and it randomizes</font><font color="#E5E5E5"> the stack</font>

736
00:32:04,860 --> 00:32:08,969
start address<font color="#CCCCCC"> so whenever you know</font>

737
00:32:06,680 --> 00:32:10,500
<font color="#CCCCCC">processes started up or a new thread is</font>

738
00:32:08,970 --> 00:32:13,470
started up<font color="#E5E5E5"> this gets applied when the</font>

739
00:32:10,500 --> 00:32:15,300
<font color="#E5E5E5">stack gets allocated it subtracts</font><font color="#CCCCCC"> a</font>

740
00:32:13,470 --> 00:32:17,400
random value in the very same fashion

741
00:32:15,300 --> 00:32:19,320
<font color="#CCCCCC">from</font><font color="#E5E5E5"> the original stack pointer by</font>

742
00:32:17,400 --> 00:32:21,540
taking<font color="#E5E5E5"> a lower 32 bits of the random</font>

743
00:32:19,320 --> 00:32:23,310
number generator result and bit was left

744
00:32:21,540 --> 00:32:25,860
shifting them by<font color="#CCCCCC"> 4</font><font color="#E5E5E5"> and at most</font>

745
00:32:23,310 --> 00:32:28,320
extracting the lower 11<font color="#E5E5E5"> bits and this</font>

746
00:32:25,860 --> 00:32:30,270
contributes again at most<font color="#CCCCCC"> 7 bits of</font>

747
00:32:28,320 --> 00:32:32,340
entropy being<font color="#CCCCCC"> bores in practice this is</font>

748
00:32:30,270 --> 00:32:33,780
mitigated a little bit by<font color="#E5E5E5"> the</font><font color="#CCCCCC"> fact that</font>

749
00:32:32,340 --> 00:32:36,090
it's combined<font color="#CCCCCC"> with the result</font><font color="#E5E5E5"> of the</font>

750
00:32:33,780 --> 00:32:37,860
previous<font color="#E5E5E5"> map find</font><font color="#CCCCCC"> VA function but this</font>

751
00:32:36,090 --> 00:32:41,370
doesn't<font color="#E5E5E5"> matter a lot in</font><font color="#CCCCCC"> practice</font>

752
00:32:37,860 --> 00:32:44,159
why because<font color="#E5E5E5"> Kunik</font><font color="#CCCCCC"> 6a</font><font color="#E5E5E5"> Solara has a very</font>

753
00:32:41,370 --> 00:32:45,840
weak<font color="#E5E5E5"> random number generator so these</font>

754
00:32:44,160 --> 00:32:49,560
upper bounds are actually<font color="#E5E5E5"> optimistic</font>

755
00:32:45,840 --> 00:32:51,689
because<font color="#CCCCCC"> key 1x6 SLR relies fully on the</font>

756
00:32:49,560 --> 00:32:53,310
clock cycle<font color="#E5E5E5"> system</font><font color="#CCCCCC"> called</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> clock</font>

757
00:32:51,690 --> 00:32:55,650
<font color="#E5E5E5">cycle system call as the name says</font>

758
00:32:53,310 --> 00:32:57,450
<font color="#E5E5E5">retrieves a 64-bit freerunning cycle</font>

759
00:32:55,650 --> 00:32:59,430
counter and the implementation of<font color="#E5E5E5"> this</font>

760
00:32:57,450 --> 00:33:00,350
<font color="#CCCCCC">is</font><font color="#E5E5E5"> architecture specific as you</font><font color="#CCCCCC"> can</font><font color="#E5E5E5"> see</font>

761
00:32:59,430 --> 00:33:02,720
on the right of<font color="#CCCCCC"> this</font>

762
00:33:00,350 --> 00:33:04,850
so for x86 it will simply be a call<font color="#E5E5E5"> to</font>

763
00:33:02,720 --> 00:33:06,620
read time stamp counter<font color="#CCCCCC"> forearm</font><font color="#E5E5E5"> it's</font>

764
00:33:04,850 --> 00:33:08,658
some emulation stuff implemented in a

765
00:33:06,620 --> 00:33:13,158
microkernel<font color="#E5E5E5"> form</font><font color="#CCCCCC"> it's</font><font color="#E5E5E5"> it's the counter</font>

766
00:33:08,659 --> 00:33:15,860
register<font color="#E5E5E5"> etc etc etc we evaluated the</font>

767
00:33:13,159 --> 00:33:17,720
actual entropy of<font color="#E5E5E5"> Kunik</font><font color="#CCCCCC"> six aslr</font>

768
00:33:15,860 --> 00:33:19,789
addresses so<font color="#E5E5E5"> we measured various</font>

769
00:33:17,720 --> 00:33:21,889
processes<font color="#E5E5E5"> across various boot sessions</font>

770
00:33:19,789 --> 00:33:23,179
and then harvested addresses for<font color="#E5E5E5"> all</font><font color="#CCCCCC"> the</font>

771
00:33:21,889 --> 00:33:25,729
different memory objects that are

772
00:33:23,179 --> 00:33:27,559
interesting<font color="#E5E5E5"> and we</font><font color="#CCCCCC"> used the NIST entropy</font>

773
00:33:25,730 --> 00:33:30,919
source testing tool to obtain<font color="#CCCCCC"> a min and</font>

774
00:33:27,559 --> 00:33:32,840
Ruby estimate and for clarification 256

775
00:33:30,919 --> 00:33:34,850
bits of uniformly random<font color="#E5E5E5"> data should</font>

776
00:33:32,840 --> 00:33:36,918
correspond to turn<font color="#CCCCCC"> the 56 bits of man</font>

777
00:33:34,850 --> 00:33:39,168
entropy<font color="#E5E5E5"> and we found the average min</font>

778
00:33:36,919 --> 00:33:41,120
entropy of<font color="#E5E5E5"> an</font><font color="#CCCCCC"> acyl are randomized</font>

779
00:33:39,169 --> 00:33:43,340
<font color="#E5E5E5">address to be four point four seven bits</font>

780
00:33:41,120 --> 00:33:45,229
<font color="#E5E5E5">so that's very weak if you compare it</font>

781
00:33:43,340 --> 00:33:48,080
for example on the right of the<font color="#CCCCCC"> slide</font><font color="#E5E5E5"> to</font>

782
00:33:45,230 --> 00:33:49,970
<font color="#CCCCCC">mainline Linux aslr on the 32-bit</font><font color="#E5E5E5"> system</font>

783
00:33:48,080 --> 00:33:51,740
or the<font color="#CCCCCC"> backs a is a lot of</font><font color="#E5E5E5"> patches which</font>

784
00:33:49,970 --> 00:33:54,080
you know<font color="#CCCCCC"> oscillate somewhere between six</font>

785
00:33:51,740 --> 00:33:58,639
<font color="#E5E5E5">and twenty seven twenty eight bits of</font>

786
00:33:54,080 --> 00:34:00,168
entropy<font color="#E5E5E5"> so why is this an issue</font><font color="#CCCCCC"> oh well</font>

787
00:33:58,639 --> 00:34:02,600
because<font color="#E5E5E5"> of the potential</font><font color="#CCCCCC"> for cue annex</font>

788
00:34:00,169 --> 00:34:05,360
<font color="#E5E5E5">is a large</font><font color="#CCCCCC"> brute forcing like like many</font>

789
00:34:02,600 --> 00:34:07,340
unix-like systems UNIX has memory layout

790
00:34:05,360 --> 00:34:09,889
inheritance<font color="#E5E5E5"> so if you have a parent</font>

791
00:34:07,340 --> 00:34:12,379
process<font color="#CCCCCC"> and you</font><font color="#E5E5E5"> have for example</font><font color="#CCCCCC"> let's</font>

792
00:34:09,889 --> 00:34:14,000
say a forking networking daemon where

793
00:34:12,379 --> 00:34:17,270
every income and client connection is

794
00:34:14,000 --> 00:34:18,918
handled by a new child<font color="#E5E5E5"> then it will fork</font>

795
00:34:17,270 --> 00:34:21,020
and it will make a copy<font color="#CCCCCC"> of the memory</font>

796
00:34:18,918 --> 00:34:23,359
layout for the child and<font color="#E5E5E5"> that means it</font>

797
00:34:21,020 --> 00:34:25,790
because that happens after<font color="#CCCCCC"> a SLR is</font>

798
00:34:23,359 --> 00:34:28,429
applied<font color="#E5E5E5"> that the SLR layout will be the</font>

799
00:34:25,790 --> 00:34:30,168
same in the child<font color="#E5E5E5"> as in the parent for</font>

800
00:34:28,429 --> 00:34:32,179
each subsequent child<font color="#CCCCCC"> it will be the</font>

801
00:34:30,168 --> 00:34:34,129
same as well and that<font color="#E5E5E5"> means that if you</font>

802
00:34:32,179 --> 00:34:36,260
have<font color="#CCCCCC"> very low entropy</font><font color="#E5E5E5"> and an attacker</font>

803
00:34:34,129 --> 00:34:38,899
can guess<font color="#E5E5E5"> these addresses and work to</font>

804
00:34:36,260 --> 00:34:42,099
the<font color="#E5E5E5"> crashes</font><font color="#CCCCCC"> and see if the child</font><font color="#E5E5E5"> is</font>

805
00:34:38,899 --> 00:34:44,388
<font color="#E5E5E5">still</font><font color="#CCCCCC"> alive and then kept a reasonable</font>

806
00:34:42,099 --> 00:34:47,569
that within a reasonable amount<font color="#CCCCCC"> of time</font>

807
00:34:44,389 --> 00:34:49,639
<font color="#CCCCCC">their payload to be active now does this</font>

808
00:34:47,569 --> 00:34:52,069
work in<font color="#E5E5E5"> practice</font><font color="#CCCCCC"> yes it actually works</font>

809
00:34:49,639 --> 00:34:53,329
in<font color="#CCCCCC"> practice and quite fast on the left</font>

810
00:34:52,069 --> 00:34:55,429
eye of<font color="#E5E5E5"> the slide you can see a</font>

811
00:34:53,329 --> 00:34:58,579
vulnerable demonstration service running

812
00:34:55,429 --> 00:35:01,010
<font color="#CCCCCC">on port 1 3 3 7</font><font color="#E5E5E5"> and on the right you can</font>

813
00:34:58,579 --> 00:35:04,010
<font color="#E5E5E5">see a script</font><font color="#CCCCCC"> brute-force in the</font><font color="#E5E5E5"> a SLR</font>

814
00:35:01,010 --> 00:35:06,380
<font color="#E5E5E5">and within a couple</font><font color="#CCCCCC"> of seconds</font><font color="#E5E5E5"> it pops a</font>

815
00:35:04,010 --> 00:35:08,839
<font color="#E5E5E5">root</font><font color="#CCCCCC"> shell</font><font color="#E5E5E5"> so you know this basically</font>

816
00:35:06,380 --> 00:35:11,819
means<font color="#E5E5E5"> that a SLR remotely doesn't really</font>

817
00:35:08,839 --> 00:35:15,670
pose any kind<font color="#E5E5E5"> of obstacle in Q 1 X 6</font>

818
00:35:11,819 --> 00:35:17,859
of course it's it's nice to bypass<font color="#E5E5E5"> it</font><font color="#CCCCCC"> by</font>

819
00:35:15,670 --> 00:35:19,989
<font color="#CCCCCC">brute forcing</font><font color="#E5E5E5"> but the main point</font><font color="#CCCCCC"> of a</font>

820
00:35:17,859 --> 00:35:21,910
SLR is<font color="#E5E5E5"> not so much the randomization of</font>

821
00:35:19,989 --> 00:35:24,400
these addresses<font color="#CCCCCC"> as</font><font color="#E5E5E5"> well as guaranteeing</font>

822
00:35:21,910 --> 00:35:26,229
memory<font color="#E5E5E5"> layout secrecy so if you have</font>

823
00:35:24,400 --> 00:35:29,079
information<font color="#E5E5E5"> leaks</font><font color="#CCCCCC"> whether they can</font><font color="#E5E5E5"> be</font>

824
00:35:26,229 --> 00:35:31,239
<font color="#CCCCCC">exploited</font><font color="#E5E5E5"> remotely or locally that's</font>

825
00:35:29,079 --> 00:35:33,189
that's always nice<font color="#CCCCCC"> to have and cue annex</font>

826
00:35:31,239 --> 00:35:35,349
is quite full<font color="#CCCCCC"> of them</font><font color="#E5E5E5"> and a lot of them</font>

827
00:35:33,189 --> 00:35:38,109
feel like<font color="#E5E5E5"> they're from</font><font color="#CCCCCC"> the early</font><font color="#E5E5E5"> 2000s</font>

828
00:35:35,349 --> 00:35:39,819
<font color="#CCCCCC">and</font><font color="#E5E5E5"> we'll highlight two</font><font color="#CCCCCC"> of them the</font>

829
00:35:38,109 --> 00:35:43,058
first<font color="#E5E5E5"> of which resides in the process</font>

830
00:35:39,819 --> 00:35:45,009
file system so<font color="#CCCCCC"> cue annex</font><font color="#E5E5E5"> like most</font>

831
00:35:43,059 --> 00:35:47,380
unix-like operating systems<font color="#CCCCCC"> are support</font>

832
00:35:45,009 --> 00:35:50,739
for a process<font color="#E5E5E5"> virtual file system</font><font color="#CCCCCC"> and</font>

833
00:35:47,380 --> 00:35:53,499
here every process<font color="#CCCCCC"> has an entry</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> you</font>

834
00:35:50,739 --> 00:35:55,900
can do some information querying about

835
00:35:53,499 --> 00:35:58,959
<font color="#CCCCCC">their currently running</font><font color="#E5E5E5"> processes by</font>

836
00:35:55,900 --> 00:36:00,910
using the<font color="#CCCCCC"> def CTL api</font><font color="#E5E5E5"> now as you can</font>

837
00:35:58,959 --> 00:36:02,558
already see in the slide<font color="#CCCCCC"> the good thing</font>

838
00:36:00,910 --> 00:36:04,749
<font color="#CCCCCC">about this is that all of these entries</font>

839
00:36:02,559 --> 00:36:07,959
entries regardless of the process

840
00:36:04,749 --> 00:36:10,629
permissions are world readable<font color="#CCCCCC"> and what</font>

841
00:36:07,959 --> 00:36:13,479
you can<font color="#E5E5E5"> use for</font><font color="#CCCCCC"> this is you can actually</font>

842
00:36:10,630 --> 00:36:15,640
<font color="#E5E5E5">query these entries and get full memory</font>

843
00:36:13,479 --> 00:36:17,649
mappings you can get that<font color="#E5E5E5"> program</font><font color="#CCCCCC"> state</font>

844
00:36:15,640 --> 00:36:19,900
to the<font color="#E5E5E5"> registers you can even get stack</font>

845
00:36:17,650 --> 00:36:21,969
frame back traces and all of this

846
00:36:19,900 --> 00:36:24,910
information<font color="#E5E5E5"> regardless of privilege</font>

847
00:36:21,969 --> 00:36:26,319
boundaries<font color="#E5E5E5"> and what's very nice</font><font color="#CCCCCC"> as you</font>

848
00:36:24,910 --> 00:36:28,058
<font color="#E5E5E5">can see on the right of</font><font color="#CCCCCC"> the slide is</font>

849
00:36:26,319 --> 00:36:29,709
<font color="#CCCCCC">that even if you can you know compile</font>

850
00:36:28,059 --> 00:36:32,469
your own utility to do this for you

851
00:36:29,709 --> 00:36:34,390
locally<font color="#E5E5E5"> then</font><font color="#CCCCCC"> qnx nicely provides for you</font>

852
00:36:32,469 --> 00:36:37,029
a utility<font color="#CCCCCC"> that's included</font><font color="#E5E5E5"> standardly</font>

853
00:36:34,390 --> 00:36:39,129
called PID<font color="#CCCCCC"> m and it allows you to</font>

854
00:36:37,029 --> 00:36:44,859
<font color="#E5E5E5">retrieve all</font><font color="#CCCCCC"> of this information for</font><font color="#E5E5E5"> you</font>

855
00:36:39,130 --> 00:36:47,170
<font color="#CCCCCC">so</font><font color="#E5E5E5"> second information</font><font color="#CCCCCC"> league will</font>

856
00:36:44,859 --> 00:36:50,229
discuss resides in the LD debug

857
00:36:47,170 --> 00:36:52,809
environment variable so the LD debug

858
00:36:50,229 --> 00:36:54,578
environment variable allows you to query

859
00:36:52,809 --> 00:36:56,529
some<font color="#E5E5E5"> debugging information about an</font>

860
00:36:54,579 --> 00:36:59,319
application<font color="#CCCCCC"> that started and</font><font color="#E5E5E5"> this is</font>

861
00:36:56,529 --> 00:37:02,049
particularly<font color="#E5E5E5"> interesting for set UID</font>

862
00:36:59,319 --> 00:37:04,209
binaries and as we<font color="#E5E5E5"> discussed</font><font color="#CCCCCC"> UNIX has a</font>

863
00:37:02,049 --> 00:37:07,059
lot of<font color="#E5E5E5"> issues which set</font><font color="#CCCCCC"> UAD binaries in</font>

864
00:37:04,209 --> 00:37:09,249
the past<font color="#E5E5E5"> and the problem here is that if</font>

865
00:37:07,059 --> 00:37:12,130
you<font color="#E5E5E5"> specify LD debug is all and</font>

866
00:37:09,249 --> 00:37:14,410
<font color="#E5E5E5">installed your set UID binary then it</font>

867
00:37:12,130 --> 00:37:16,029
doesn't check any<font color="#E5E5E5"> of the permissions</font><font color="#CCCCCC"> you</font>

868
00:37:14,410 --> 00:37:18,129
know the differences between the set<font color="#CCCCCC"> u</font>

869
00:37:16,029 --> 00:37:20,410
ID binary and the current user that you

870
00:37:18,130 --> 00:37:22,750
are and it simply dumps all the

871
00:37:20,410 --> 00:37:25,598
information for<font color="#CCCCCC"> reloaded libraries</font>

872
00:37:22,750 --> 00:37:27,460
that's a very<font color="#E5E5E5"> nice second information</font>

873
00:37:25,599 --> 00:37:29,980
<font color="#E5E5E5">leak and these are just two</font><font color="#CCCCCC"> examples</font>

874
00:37:27,460 --> 00:37:31,720
because<font color="#E5E5E5"> if you just spend you know</font><font color="#CCCCCC"> a</font>

875
00:37:29,980 --> 00:37:36,070
week of hunting you'll find much<font color="#E5E5E5"> more</font>

876
00:37:31,720 --> 00:37:39,250
<font color="#E5E5E5">issues like these now we reported these</font>

877
00:37:36,070 --> 00:37:41,500
issues and as of Kunik<font color="#CCCCCC"> seven they made</font>

878
00:37:39,250 --> 00:37:43,720
some<font color="#CCCCCC"> changes hazal are still disabled by</font>

879
00:37:41,500 --> 00:37:46,480
default<font color="#CCCCCC"> so the</font><font color="#E5E5E5"> default settings are</font>

880
00:37:43,720 --> 00:37:49,689
<font color="#E5E5E5">still not having a SLR enabled there's</font>

881
00:37:46,480 --> 00:37:51,750
no<font color="#CCCCCC"> ke SLR</font><font color="#E5E5E5"> but</font><font color="#CCCCCC"> they do use a kernel P&G</font>

882
00:37:49,690 --> 00:37:55,240
now that we previously discussed<font color="#E5E5E5"> so</font>

883
00:37:51,750 --> 00:37:57,609
that's theoretically much stronger<font color="#E5E5E5"> the</font>

884
00:37:55,240 --> 00:38:00,009
problem is<font color="#E5E5E5"> that despite the use of this</font>

885
00:37:57,609 --> 00:38:02,020
new<font color="#CCCCCC"> RNG and having a 64-bit address</font>

886
00:38:00,010 --> 00:38:03,910
space<font color="#E5E5E5"> these low theoretical upper bounds</font>

887
00:38:02,020 --> 00:38:06,160
remain<font color="#E5E5E5"> because they forgot</font><font color="#CCCCCC"> to remove</font><font color="#E5E5E5"> the</font>

888
00:38:03,910 --> 00:38:07,868
<font color="#CCCCCC">bit masking applications</font><font color="#E5E5E5"> so at most</font>

889
00:38:06,160 --> 00:38:10,930
there's still<font color="#E5E5E5"> seven bits and twelve bits</font>

890
00:38:07,869 --> 00:38:12,160
<font color="#E5E5E5">of of entropy there and I talked to the</font>

891
00:38:10,930 --> 00:38:13,930
people<font color="#E5E5E5"> at</font><font color="#CCCCCC"> Blackberry and he said yeah</font>

892
00:38:12,160 --> 00:38:17,368
we're gonna remove<font color="#CCCCCC"> that but that's gonna</font>

893
00:38:13,930 --> 00:38:19,930
be another<font color="#E5E5E5"> batch so that's that's</font><font color="#CCCCCC"> coming</font>

894
00:38:17,369 --> 00:38:21,010
<font color="#CCCCCC">another</font><font color="#E5E5E5"> interesting observation</font><font color="#CCCCCC"> I'm not</font>

895
00:38:19,930 --> 00:38:23,140
sure if they're they're gonna do

896
00:38:21,010 --> 00:38:25,540
something<font color="#CCCCCC"> about that I either is the</font>

897
00:38:23,140 --> 00:38:27,190
fact that they<font color="#E5E5E5"> always load code images</font>

898
00:38:25,540 --> 00:38:29,589
in the lower 32 bits of<font color="#E5E5E5"> the address</font>

899
00:38:27,190 --> 00:38:31,240
space<font color="#CCCCCC"> so</font><font color="#E5E5E5"> you know that that's</font><font color="#CCCCCC"> something</font>

900
00:38:29,589 --> 00:38:34,290
you kind<font color="#E5E5E5"> of want</font><font color="#CCCCCC"> to avoid it as well but</font>

901
00:38:31,240 --> 00:38:37,118
I'm<font color="#E5E5E5"> not sure if that's gonna be</font><font color="#CCCCCC"> patched</font>

902
00:38:34,290 --> 00:38:39,880
<font color="#E5E5E5">so they fixed the LD debug issue that's</font>

903
00:38:37,119 --> 00:38:42,520
good<font color="#CCCCCC"> but they did</font><font color="#E5E5E5"> not completely fix the</font>

904
00:38:39,880 --> 00:38:45,580
process<font color="#CCCCCC"> file system information leak</font><font color="#E5E5E5"> so</font>

905
00:38:42,520 --> 00:38:47,849
as you<font color="#E5E5E5"> can</font><font color="#CCCCCC"> see on the top right that's a</font>

906
00:38:45,580 --> 00:38:51,098
very recent release of Kunik<font color="#CCCCCC"> seven and</font>

907
00:38:47,849 --> 00:38:53,080
they restricted<font color="#CCCCCC"> the PID</font><font color="#E5E5E5"> on utility so</font>

908
00:38:51,099 --> 00:38:55,359
you can no longer query<font color="#CCCCCC"> information</font>

909
00:38:53,080 --> 00:38:58,060
about higher<font color="#CCCCCC"> privileged processes if you</font>

910
00:38:55,359 --> 00:38:59,890
<font color="#E5E5E5">write</font><font color="#CCCCCC"> your own small C file compile it</font>

911
00:38:58,060 --> 00:39:02,259
and drop<font color="#CCCCCC"> it on</font><font color="#E5E5E5"> the system</font><font color="#CCCCCC"> you can still</font>

912
00:38:59,890 --> 00:39:04,000
query this information so they<font color="#CCCCCC"> respected</font>

913
00:39:02,260 --> 00:39:05,980
<font color="#E5E5E5">the wrong thing there</font><font color="#CCCCCC"> and as far</font><font color="#E5E5E5"> as</font><font color="#CCCCCC"> I</font>

914
00:39:04,000 --> 00:39:07,599
know this<font color="#E5E5E5"> is still out there so might be</font>

915
00:39:05,980 --> 00:39:11,560
<font color="#E5E5E5">gonna be patched might be not didn't</font>

916
00:39:07,599 --> 00:39:18,490
hear anything<font color="#CCCCCC"> about that so</font><font color="#E5E5E5"> on to the</font>

917
00:39:11,560 --> 00:39:20,770
communiques<font color="#E5E5E5"> stack Canaries so</font><font color="#CCCCCC"> Q</font><font color="#E5E5E5"> annex</font>

918
00:39:18,490 --> 00:39:22,330
uses<font color="#E5E5E5"> GCC stack smashing protector so</font>

919
00:39:20,770 --> 00:39:24,400
that's<font color="#E5E5E5"> that's what you're all very</font>

920
00:39:22,330 --> 00:39:26,200
familiar<font color="#CCCCCC"> with</font><font color="#E5E5E5"> probably and the compiler</font>

921
00:39:24,400 --> 00:39:28,630
side is okay and<font color="#E5E5E5"> it's what we're used to</font>

922
00:39:26,200 --> 00:39:30,009
<font color="#E5E5E5">now the problem starts on the operating</font>

923
00:39:28,630 --> 00:39:31,990
<font color="#E5E5E5">system side of things because the</font>

924
00:39:30,010 --> 00:39:34,180
implementations there are again homebrew

925
00:39:31,990 --> 00:39:35,180
the user space<font color="#E5E5E5"> master Camery is</font>

926
00:39:34,180 --> 00:39:37,819
generated at

927
00:39:35,180 --> 00:39:40,940
start up<font color="#E5E5E5"> with</font><font color="#CCCCCC"> Lipsy is loaded but unlike</font>

928
00:39:37,820 --> 00:39:43,070
the regular implementation like<font color="#CCCCCC"> Linux it</font>

929
00:39:40,940 --> 00:39:45,320
does<font color="#E5E5E5"> not use lib as a</font><font color="#CCCCCC"> speech guard setup</font>

930
00:39:43,070 --> 00:39:48,290
<font color="#E5E5E5">function for this instead it uses a</font>

931
00:39:45,320 --> 00:39:49,730
custom function<font color="#E5E5E5"> called init cookies and</font>

932
00:39:48,290 --> 00:39:50,540
what doesn't<font color="#CCCCCC"> it cookies do and what's</font>

933
00:39:49,730 --> 00:39:53,000
the problem here

934
00:39:50,540 --> 00:39:55,310
well the problem again is<font color="#E5E5E5"> that</font><font color="#CCCCCC"> address</font>

935
00:39:53,000 --> 00:39:57,470
entropy<font color="#CCCCCC"> form very weak sources in this</font>

936
00:39:55,310 --> 00:39:59,660
case three sources<font color="#CCCCCC"> only</font><font color="#E5E5E5"> two of which are</font>

937
00:39:57,470 --> 00:40:02,419
relevant if a<font color="#E5E5E5"> SLR is enabled you</font><font color="#CCCCCC"> can see</font>

938
00:39:59,660 --> 00:40:04,430
on the bottom<font color="#E5E5E5"> of the slide</font><font color="#CCCCCC"> it uses read</font>

939
00:40:02,420 --> 00:40:06,740
<font color="#E5E5E5">I'm stem</font><font color="#CCCCCC"> counter it uses the address of</font>

940
00:40:04,430 --> 00:40:09,109
a local stack variable and it uses<font color="#E5E5E5"> the</font>

941
00:40:06,740 --> 00:40:10,939
address<font color="#CCCCCC"> of the function itself and the</font>

942
00:40:09,110 --> 00:40:12,830
<font color="#E5E5E5">last two are not randomized at all if a</font>

943
00:40:10,940 --> 00:40:15,290
SLR<font color="#CCCCCC"> is not enabled and you know if it</font>

944
00:40:12,830 --> 00:40:18,799
was<font color="#E5E5E5"> enabled then it's still based only</font>

945
00:40:15,290 --> 00:40:20,360
on clock cycles so we also evaluated<font color="#E5E5E5"> the</font>

946
00:40:18,800 --> 00:40:23,060
cannery min and should be across<font color="#E5E5E5"> three</font>

947
00:40:20,360 --> 00:40:24,320
<font color="#CCCCCC">configurations</font><font color="#E5E5E5"> without a SLR with a SLR</font>

948
00:40:23,060 --> 00:40:27,320
<font color="#CCCCCC">but without position independent</font>

949
00:40:24,320 --> 00:40:29,300
executable enabled and with both enabled

950
00:40:27,320 --> 00:40:32,090
<font color="#E5E5E5">we found that the</font><font color="#CCCCCC"> average min entropy</font>

951
00:40:29,300 --> 00:40:34,400
for this<font color="#E5E5E5"> these cannery values was seven</font>

952
00:40:32,090 --> 00:40:36,770
point<font color="#CCCCCC"> seven nine bits and SLR had no</font>

953
00:40:34,400 --> 00:40:39,200
noticeable<font color="#E5E5E5"> influence here so that's less</font>

954
00:40:36,770 --> 00:40:40,790
than<font color="#CCCCCC"> ideal because</font><font color="#E5E5E5"> using a secure</font><font color="#CCCCCC"> and</font>

955
00:40:39,200 --> 00:40:43,759
the number generator you should have at

956
00:40:40,790 --> 00:40:46,100
least 24 bits of min entropy<font color="#CCCCCC"> if they use</font>

957
00:40:43,760 --> 00:40:49,580
a terminating style cannery<font color="#E5E5E5"> for a</font><font color="#CCCCCC"> 32-bit</font>

958
00:40:46,100 --> 00:40:52,100
value<font color="#CCCCCC"> with a</font><font color="#E5E5E5"> no value in the middle so</font>

959
00:40:49,580 --> 00:40:54,259
this is not the worst<font color="#E5E5E5"> thing because in</font>

960
00:40:52,100 --> 00:40:56,450
kernel space the problems are even<font color="#E5E5E5"> worse</font>

961
00:40:54,260 --> 00:40:59,570
<font color="#E5E5E5">a</font><font color="#CCCCCC"> microkernel</font><font color="#E5E5E5"> obviously is neither</font>

962
00:40:56,450 --> 00:41:01,759
loaded<font color="#E5E5E5"> nor linked against</font><font color="#CCCCCC"> Lipsy but</font>

963
00:40:59,570 --> 00:41:04,880
<font color="#E5E5E5">master cannery generation is done buddy</font>

964
00:41:01,760 --> 00:41:06,830
<font color="#CCCCCC">init cookies function so they would have</font>

965
00:41:04,880 --> 00:41:08,960
to find something<font color="#E5E5E5"> else</font><font color="#CCCCCC"> but Q and X</font>

966
00:41:06,830 --> 00:41:10,670
forgot to implement a replacement<font color="#CCCCCC"> master</font>

967
00:41:08,960 --> 00:41:12,650
<font color="#E5E5E5">cannery routine so the kernel space</font>

968
00:41:10,670 --> 00:41:14,300
Canaries are used everywhere<font color="#E5E5E5"> across the</font>

969
00:41:12,650 --> 00:41:17,090
microkernel but they're<font color="#E5E5E5"> never actually</font>

970
00:41:14,300 --> 00:41:18,920
generated so they're<font color="#CCCCCC"> always</font><font color="#E5E5E5"> zero and you</font>

971
00:41:17,090 --> 00:41:22,550
know that's not<font color="#E5E5E5"> very good</font><font color="#CCCCCC"> for stack</font>

972
00:41:18,920 --> 00:41:24,440
<font color="#CCCCCC">Havanese now they made changes to</font><font color="#E5E5E5"> this</font>

973
00:41:22,550 --> 00:41:26,090
and they're enabled by default now in

974
00:41:24,440 --> 00:41:29,330
the tool chain<font color="#CCCCCC"> and they generate at</font>

975
00:41:26,090 --> 00:41:31,160
least<font color="#CCCCCC"> in Kunik 7 64-bit Canaries</font><font color="#E5E5E5"> based</font>

976
00:41:29,330 --> 00:41:33,529
on<font color="#CCCCCC"> our recommendations for user</font><font color="#E5E5E5"> space</font>

977
00:41:31,160 --> 00:41:37,460
<font color="#CCCCCC">communiques now mixes in the alpha</font>

978
00:41:33,530 --> 00:41:38,930
ciliary factor value<font color="#E5E5E5"> 80 random and what</font>

979
00:41:37,460 --> 00:41:40,880
this<font color="#E5E5E5"> basically does is when it</font><font color="#CCCCCC"> is</font>

980
00:41:38,930 --> 00:41:43,460
started<font color="#CCCCCC"> up it transfers some value from</font>

981
00:41:40,880 --> 00:41:45,560
kernel space to user space<font color="#E5E5E5"> and in kernel</font>

982
00:41:43,460 --> 00:41:48,110
space this value is<font color="#CCCCCC"> basically 64 bits</font>

983
00:41:45,560 --> 00:41:49,490
generated<font color="#CCCCCC"> by the kernel</font><font color="#E5E5E5"> PNG</font>

984
00:41:48,110 --> 00:41:52,820
kernel-space<font color="#E5E5E5"> canneries they now</font>

985
00:41:49,490 --> 00:41:55,430
concatenate<font color="#E5E5E5"> two 32-bit kernel</font><font color="#CCCCCC"> P&G value</font>

986
00:41:52,820 --> 00:41:58,130
so canneries are more or<font color="#E5E5E5"> less fixed on Q</font>

987
00:41:55,430 --> 00:42:02,060
<font color="#E5E5E5">and X</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> that brings us to</font><font color="#CCCCCC"> the final</font>

988
00:41:58,130 --> 00:42:04,790
mitigation relocation<font color="#CCCCCC"> read only the</font>

989
00:42:02,060 --> 00:42:06,920
problem what relocation read only<font color="#E5E5E5"> seeks</font>

990
00:42:04,790 --> 00:42:09,200
to address<font color="#E5E5E5"> is that dynamically linked</font>

991
00:42:06,920 --> 00:42:11,480
binaries use relocation to<font color="#CCCCCC"> the runtime</font>

992
00:42:09,200 --> 00:42:14,270
<font color="#E5E5E5">lookup of symbols in shared libraries</font>

993
00:42:11,480 --> 00:42:15,620
<font color="#E5E5E5">you can see on the right</font><font color="#CCCCCC"> of the slide</font><font color="#E5E5E5"> if</font>

994
00:42:14,270 --> 00:42:17,630
you<font color="#E5E5E5"> call a</font><font color="#CCCCCC"> function that's</font><font color="#E5E5E5"> in an</font>

995
00:42:15,620 --> 00:42:20,740
<font color="#E5E5E5">external library</font><font color="#CCCCCC"> you call a function</font>

996
00:42:17,630 --> 00:42:23,030
<font color="#E5E5E5">located in the PLT and that resolves it</font>

997
00:42:20,740 --> 00:42:26,089
usually<font color="#E5E5E5"> during runtime</font><font color="#CCCCCC"> now this is a</font>

998
00:42:23,030 --> 00:42:28,190
popular<font color="#E5E5E5"> target for attacking</font><font color="#CCCCCC"> because if</font>

999
00:42:26,090 --> 00:42:30,170
you<font color="#CCCCCC"> overwrite one of these</font><font color="#E5E5E5"> entries then</font>

1000
00:42:28,190 --> 00:42:32,810
once the<font color="#E5E5E5"> function gets called the</font>

1001
00:42:30,170 --> 00:42:34,700
relocation data that's overridden<font color="#E5E5E5"> allows</font>

1002
00:42:32,810 --> 00:42:37,400
you to hijack control flow and this is

1003
00:42:34,700 --> 00:42:39,049
where railroad comes in<font color="#E5E5E5"> and at first you</font>

1004
00:42:37,400 --> 00:42:41,960
had partial railroad which basically

1005
00:42:39,050 --> 00:42:43,880
works<font color="#CCCCCC"> by reordering</font><font color="#E5E5E5"> the elf sections so</font>

1006
00:42:41,960 --> 00:42:46,150
that<font color="#E5E5E5"> the internal data sections like the</font>

1007
00:42:43,880 --> 00:42:48,980
global<font color="#E5E5E5"> offset</font><font color="#CCCCCC"> table the destructor</font>

1008
00:42:46,150 --> 00:42:51,590
section<font color="#CCCCCC"> precede the program data like</font>

1009
00:42:48,980 --> 00:42:53,600
the data section<font color="#E5E5E5"> and the BSS section and</font>

1010
00:42:51,590 --> 00:42:56,030
then the<font color="#E5E5E5"> relocation data is made</font>

1011
00:42:53,600 --> 00:42:58,069
read-only<font color="#E5E5E5"> by covering them with a</font>

1012
00:42:56,030 --> 00:43:00,710
dedicated segment after relocation is

1013
00:42:58,070 --> 00:43:02,720
done<font color="#E5E5E5"> the problem is that many</font>

1014
00:43:00,710 --> 00:43:04,040
<font color="#CCCCCC">applications use lazy bindings so they</font>

1015
00:43:02,720 --> 00:43:06,500
don't resolve all<font color="#CCCCCC"> of them at runtime</font>

1016
00:43:04,040 --> 00:43:08,210
because that would<font color="#E5E5E5"> slow down</font><font color="#CCCCCC"> startup</font>

1017
00:43:06,500 --> 00:43:10,550
times but they resolve them whenever

1018
00:43:08,210 --> 00:43:12,950
they're hit<font color="#E5E5E5"> so</font><font color="#CCCCCC"> that means that if you do</font>

1019
00:43:10,550 --> 00:43:15,740
<font color="#E5E5E5">that you cannot make it</font><font color="#CCCCCC"> read-only</font><font color="#E5E5E5"> right</font>

1020
00:43:12,950 --> 00:43:18,529
away you cannot cover the PLT gap

1021
00:43:15,740 --> 00:43:20,899
segment<font color="#E5E5E5"> section there so that's left</font>

1022
00:43:18,530 --> 00:43:23,660
writable in partial well well<font color="#E5E5E5"> now in</font>

1023
00:43:20,900 --> 00:43:25,910
<font color="#CCCCCC">order to address that</font><font color="#E5E5E5"> they you</font><font color="#CCCCCC"> disable</font>

1024
00:43:23,660 --> 00:43:28,009
lazy binding by using the<font color="#E5E5E5"> by now flag</font>

1025
00:43:25,910 --> 00:43:31,279
and then you basically resolve all of

1026
00:43:28,010 --> 00:43:34,730
<font color="#E5E5E5">the symbols at startup time and you make</font>

1027
00:43:31,280 --> 00:43:38,240
all of the the internal the relevant

1028
00:43:34,730 --> 00:43:39,220
internal data sections read-only now

1029
00:43:38,240 --> 00:43:41,330
<font color="#CCCCCC">queue</font><font color="#E5E5E5"> annex</font>

1030
00:43:39,220 --> 00:43:43,910
implemented is but the problem<font color="#CCCCCC"> is that</font>

1031
00:43:41,330 --> 00:43:45,710
<font color="#CCCCCC">their implementation was broken on the</font>

1032
00:43:43,910 --> 00:43:48,319
left you can<font color="#CCCCCC"> see the implementation</font><font color="#E5E5E5"> on</font>

1033
00:43:45,710 --> 00:43:50,630
<font color="#E5E5E5">Debian Linux and here you can see that</font>

1034
00:43:48,320 --> 00:43:52,610
the new railroad segment covers all of

1035
00:43:50,630 --> 00:43:55,460
<font color="#E5E5E5">the relevant internal data sections</font>

1036
00:43:52,610 --> 00:43:57,590
including the global offset table<font color="#E5E5E5"> on the</font>

1037
00:43:55,460 --> 00:44:00,900
<font color="#E5E5E5">right you can</font><font color="#CCCCCC"> see the cue annex 6.6</font>

1038
00:43:57,590 --> 00:44:03,329
implementation where they forgot<font color="#E5E5E5"> to</font>

1039
00:44:00,900 --> 00:44:05,550
reorder the internal<font color="#E5E5E5"> data sections so</font>

1040
00:44:03,329 --> 00:44:07,829
the<font color="#E5E5E5"> global offset table does not proceed</font>

1041
00:44:05,550 --> 00:44:09,480
<font color="#E5E5E5">the program data sections and</font><font color="#CCCCCC"> that means</font>

1042
00:44:07,829 --> 00:44:11,550
that it's<font color="#CCCCCC"> the only</font><font color="#E5E5E5"> thing that falls</font>

1043
00:44:09,480 --> 00:44:14,160
outside of<font color="#E5E5E5"> the range of the new railroad</font>

1044
00:44:11,550 --> 00:44:15,510
<font color="#CCCCCC">segment and</font><font color="#E5E5E5"> that means that even if you</font>

1045
00:44:14,160 --> 00:44:18,118
have all your<font color="#E5E5E5"> linker and compiler</font>

1046
00:44:15,510 --> 00:44:20,849
settings set up<font color="#E5E5E5"> according</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> you know</font>

1047
00:44:18,119 --> 00:44:23,490
whatever kind<font color="#E5E5E5"> of standards you</font><font color="#CCCCCC"> have then</font>

1048
00:44:20,849 --> 00:44:26,280
it's still exploited then you can still

1049
00:44:23,490 --> 00:44:30,779
overwrite<font color="#CCCCCC"> relocation data here</font><font color="#E5E5E5"> so it's</font>

1050
00:44:26,280 --> 00:44:32,490
<font color="#E5E5E5">completely useless</font><font color="#CCCCCC"> you can see here</font>

1051
00:44:30,780 --> 00:44:34,050
<font color="#E5E5E5">basically what this looks like in</font>

1052
00:44:32,490 --> 00:44:35,970
practice<font color="#CCCCCC"> I'm left you have an</font>

1053
00:44:34,050 --> 00:44:37,890
application<font color="#CCCCCC"> on Debian Linux if you try</font>

1054
00:44:35,970 --> 00:44:39,990
to write<font color="#E5E5E5"> a relocation data would</font>

1055
00:44:37,890 --> 00:44:42,029
<font color="#CCCCCC">railroad</font><font color="#E5E5E5"> enabled you</font><font color="#CCCCCC"> can on the right</font>

1056
00:44:39,990 --> 00:44:44,240
you have<font color="#CCCCCC"> it on</font><font color="#E5E5E5"> cue annex and you can so</font>

1057
00:44:42,030 --> 00:44:47,190
that's<font color="#E5E5E5"> not what you want to</font><font color="#CCCCCC"> be the case</font>

1058
00:44:44,240 --> 00:44:49,649
and<font color="#CCCCCC"> we also found a very</font><font color="#E5E5E5"> weird local by</font>

1059
00:44:47,190 --> 00:44:52,050
bus<font color="#CCCCCC"> so the same</font><font color="#E5E5E5"> LD debug environment</font>

1060
00:44:49,650 --> 00:44:54,150
variable has an undocumented option

1061
00:44:52,050 --> 00:44:55,980
called<font color="#CCCCCC"> ambassdor and the only</font><font color="#E5E5E5"> thing it</font>

1062
00:44:54,150 --> 00:44:57,869
does is disabling railroad without<font color="#E5E5E5"> any</font>

1063
00:44:55,980 --> 00:44:59,339
<font color="#E5E5E5">kind of privilege checks</font><font color="#CCCCCC"> I'm not sure</font>

1064
00:44:57,869 --> 00:45:02,369
why it's there<font color="#E5E5E5"> but</font><font color="#CCCCCC"> it's very</font><font color="#E5E5E5"> nice for</font>

1065
00:44:59,339 --> 00:45:05,099
<font color="#CCCCCC">exploiting set your idea</font><font color="#E5E5E5"> binaries both</font>

1066
00:45:02,369 --> 00:45:08,220
issues<font color="#E5E5E5"> now are fixed with patches</font><font color="#CCCCCC"> for</font>

1067
00:45:05,099 --> 00:45:10,740
<font color="#CCCCCC">Kunik</font><font color="#E5E5E5"> 6.6 and cubic 7 however so these</font>

1068
00:45:08,220 --> 00:45:14,640
are no<font color="#E5E5E5"> longer an issue and that brings</font>

1069
00:45:10,740 --> 00:45:16,560
us<font color="#E5E5E5"> to the final remarks so we disclose</font>

1070
00:45:14,640 --> 00:45:18,660
all of<font color="#CCCCCC"> these issues that we discussed</font><font color="#E5E5E5"> to</font>

1071
00:45:16,560 --> 00:45:23,339
<font color="#CCCCCC">blackberry</font><font color="#E5E5E5"> most of the issues were fixed</font>

1072
00:45:18,660 --> 00:45:25,259
in<font color="#E5E5E5"> 7.0 patches are available for</font><font color="#CCCCCC"> 6.6</font><font color="#E5E5E5"> but</font>

1073
00:45:23,339 --> 00:45:27,089
what's really<font color="#E5E5E5"> important</font><font color="#CCCCCC"> to remember here</font>

1074
00:45:25,260 --> 00:45:29,310
<font color="#E5E5E5">is</font><font color="#CCCCCC"> because</font><font color="#E5E5E5"> cue annex is an embedded</font>

1075
00:45:27,089 --> 00:45:31,200
operating system<font color="#CCCCCC"> it will take lots of</font>

1076
00:45:29,310 --> 00:45:33,349
<font color="#CCCCCC">time before</font><font color="#E5E5E5"> these patches filter down to</font>

1077
00:45:31,200 --> 00:45:35,520
<font color="#E5E5E5">the OEMs and eventually the end users</font>

1078
00:45:33,349 --> 00:45:38,130
especially if you have<font color="#E5E5E5"> the more deeply</font>

1079
00:45:35,520 --> 00:45:40,319
embedded systems<font color="#CCCCCC"> and the kind</font><font color="#E5E5E5"> of systems</font>

1080
00:45:38,130 --> 00:45:42,569
which have very<font color="#CCCCCC"> very short and irregular</font>

1081
00:45:40,319 --> 00:45:44,310
maintenance windows then when are you

1082
00:45:42,569 --> 00:45:46,290
gonna update<font color="#CCCCCC"> the</font><font color="#E5E5E5"> firmware when our</font>

1083
00:45:44,310 --> 00:45:49,560
<font color="#E5E5E5">people come in contact</font><font color="#CCCCCC"> you know reach</font>

1084
00:45:46,290 --> 00:45:51,660
<font color="#CCCCCC">out to their</font><font color="#E5E5E5"> om and integrate the new</font>

1085
00:45:49,560 --> 00:45:53,549
the<font color="#CCCCCC"> new updates so many of these issues</font>

1086
00:45:51,660 --> 00:45:55,920
<font color="#E5E5E5">even though patches are available and</font>

1087
00:45:53,550 --> 00:45:58,619
given<font color="#E5E5E5"> X 7 has some of these issues fixed</font>

1088
00:45:55,920 --> 00:46:03,300
<font color="#CCCCCC">will be out there</font><font color="#E5E5E5"> in</font><font color="#CCCCCC"> the wild</font><font color="#E5E5E5"> for a long</font>

1089
00:45:58,619 --> 00:46:05,280
time to come<font color="#CCCCCC"> as a conclusion things were</font>

1090
00:46:03,300 --> 00:46:07,349
mostly<font color="#CCCCCC"> ok on the tool change side but</font>

1091
00:46:05,280 --> 00:46:10,500
you know that's that's the because they

1092
00:46:07,349 --> 00:46:11,940
use GCC as as their compiler<font color="#E5E5E5"> tool chain</font>

1093
00:46:10,500 --> 00:46:13,560
there were some weak<font color="#E5E5E5"> defaults some</font>

1094
00:46:11,940 --> 00:46:14,040
linker mistakes but<font color="#CCCCCC"> that was not</font><font color="#E5E5E5"> the</font>

1095
00:46:13,560 --> 00:46:15,900
real

1096
00:46:14,040 --> 00:46:17,790
<font color="#CCCCCC">issue the real issue is that problems</font>

1097
00:46:15,900 --> 00:46:20,400
reside on<font color="#E5E5E5"> the operating system</font><font color="#CCCCCC"> side of</font>

1098
00:46:17,790 --> 00:46:22,080
things<font color="#E5E5E5"> and that's mainly not because</font>

1099
00:46:20,400 --> 00:46:24,119
skew annex doesn't know what it's doing

1100
00:46:22,080 --> 00:46:25,980
<font color="#E5E5E5">it's because</font><font color="#CCCCCC"> cue annex cannot benefit</font>

1101
00:46:24,119 --> 00:46:27,660
directly from<font color="#E5E5E5"> any work that's been</font><font color="#CCCCCC"> done</font>

1102
00:46:25,980 --> 00:46:29,790
<font color="#E5E5E5">in general purpose operating</font><font color="#CCCCCC"> system</font>

1103
00:46:27,660 --> 00:46:31,950
security<font color="#E5E5E5"> because</font><font color="#CCCCCC"> it cannot easily</font><font color="#E5E5E5"> port</font>

1104
00:46:29,790 --> 00:46:33,960
whatever is<font color="#E5E5E5"> being done in</font><font color="#CCCCCC"> in</font><font color="#E5E5E5"> line X</font>

1105
00:46:31,950 --> 00:46:35,910
being<font color="#E5E5E5"> done in Windows being done in and</font>

1106
00:46:33,960 --> 00:46:37,950
BSD<font color="#E5E5E5"> one to one they have a very</font>

1107
00:46:35,910 --> 00:46:40,200
<font color="#CCCCCC">different architectural model</font><font color="#E5E5E5"> and the</font>

1108
00:46:37,950 --> 00:46:43,649
result is homebrew DIY mitigations which

1109
00:46:40,200 --> 00:46:45,000
are very subpar<font color="#CCCCCC"> what's also very evident</font>

1110
00:46:43,650 --> 00:46:46,619
is that<font color="#E5E5E5"> there has</font><font color="#CCCCCC"> been a complete lack</font>

1111
00:46:45,000 --> 00:46:48,480
of<font color="#E5E5E5"> prior attention by security</font>

1112
00:46:46,619 --> 00:46:50,760
researchers<font color="#CCCCCC"> a</font><font color="#E5E5E5"> lot of the vulnerabilities</font>

1113
00:46:48,480 --> 00:46:53,340
feel like they're<font color="#E5E5E5"> from</font><font color="#CCCCCC"> the early 2000s</font>

1114
00:46:50,760 --> 00:46:55,410
<font color="#E5E5E5">and of course embedded random number</font>

1115
00:46:53,340 --> 00:46:57,390
generator design remains difficult and

1116
00:46:55,410 --> 00:46:59,339
should be issues mean that the design

1117
00:46:57,390 --> 00:47:00,900
burden rests with<font color="#CCCCCC"> the system integrators</font>

1118
00:46:59,340 --> 00:47:03,090
because you cannot account for entropy

1119
00:47:00,900 --> 00:47:04,830
sources<font color="#CCCCCC"> if you don't know what kind of</font>

1120
00:47:03,090 --> 00:47:06,960
entropy sources will<font color="#CCCCCC"> be available across</font>

1121
00:47:04,830 --> 00:47:08,759
<font color="#E5E5E5">the hundreds of thousands of different</font>

1122
00:47:06,960 --> 00:47:12,330
configurations<font color="#CCCCCC"> that</font><font color="#E5E5E5"> your OS will be</font>

1123
00:47:08,760 --> 00:47:14,070
deployed<font color="#E5E5E5"> on on a more positive note at</font>

1124
00:47:12,330 --> 00:47:15,869
<font color="#E5E5E5">least</font><font color="#CCCCCC"> communiques attempts to keep up</font>

1125
00:47:14,070 --> 00:47:17,970
with general purpose<font color="#E5E5E5"> operating system</font>

1126
00:47:15,869 --> 00:47:19,590
<font color="#E5E5E5">security I looked at a lot</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> other</font>

1127
00:47:17,970 --> 00:47:21,180
<font color="#E5E5E5">embedded operating systems as I</font>

1128
00:47:19,590 --> 00:47:23,700
discussed in<font color="#CCCCCC"> my</font><font color="#E5E5E5"> talk the RTOS</font>

1129
00:47:21,180 --> 00:47:27,350
exploit mitigation<font color="#CCCCCC"> blues at</font><font color="#E5E5E5"> 2007</font>

1130
00:47:23,700 --> 00:47:30,569
<font color="#CCCCCC">hardware dot</font><font color="#E5E5E5"> 17s hardware conference and</font>

1131
00:47:27,350 --> 00:47:32,520
<font color="#E5E5E5">they're one of</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> very few non line XP</font>

1132
00:47:30,570 --> 00:47:33,930
<font color="#E5E5E5">SD or Windows based embedded</font><font color="#CCCCCC"> operating</font>

1133
00:47:32,520 --> 00:47:36,060
systems<font color="#E5E5E5"> that</font><font color="#CCCCCC"> actually bothers to</font>

1134
00:47:33,930 --> 00:47:37,919
implement mitigations<font color="#E5E5E5"> and they had a</font>

1135
00:47:36,060 --> 00:47:39,930
quick and extensive Thunder response and

1136
00:47:37,920 --> 00:47:43,260
they had a good<font color="#CCCCCC"> integration of the</font>

1137
00:47:39,930 --> 00:47:45,029
feedback we gave but there really is

1138
00:47:43,260 --> 00:47:48,000
needed<font color="#E5E5E5"> more</font><font color="#CCCCCC"> attention to embedded</font>

1139
00:47:45,030 --> 00:47:49,859
operating<font color="#CCCCCC"> system</font><font color="#E5E5E5"> security in general</font><font color="#CCCCCC"> you</font>

1140
00:47:48,000 --> 00:47:51,540
can<font color="#E5E5E5"> expect more Kunik stuff in the</font>

1141
00:47:49,859 --> 00:47:53,640
<font color="#E5E5E5">future I should</font><font color="#CCCCCC"> of course</font><font color="#E5E5E5"> have removed</font>

1142
00:47:51,540 --> 00:47:55,020
the fans have gone here but we're going

1143
00:47:53,640 --> 00:47:58,140
<font color="#E5E5E5">to cover some additional</font><font color="#CCCCCC"> issues at</font>

1144
00:47:55,020 --> 00:48:01,730
blackhat<font color="#E5E5E5"> Asia and infiltrate so there's</font>

1145
00:47:58,140 --> 00:48:01,730
any questions I'll take them now

1146
00:48:13,829 --> 00:48:21,549
<font color="#CCCCCC">you said that the RNG</font><font color="#E5E5E5"> loads</font><font color="#CCCCCC"> RNG stayed</font>

1147
00:48:18,789 --> 00:48:24,369
on boot and then saves it on<font color="#E5E5E5"> shutdown</font>

1148
00:48:21,549 --> 00:48:27,009
<font color="#E5E5E5">does it also write the rng seed file on</font>

1149
00:48:24,369 --> 00:48:30,130
boot in case the<font color="#E5E5E5"> system crashes or is</font>

1150
00:48:27,009 --> 00:48:33,939
the<font color="#E5E5E5"> system if a crash is going to reload</font>

1151
00:48:30,130 --> 00:48:36,130
the same seed on second boot no it only

1152
00:48:33,939 --> 00:48:37,959
<font color="#E5E5E5">writes it like when it shuts down and it</font>

1153
00:48:36,130 --> 00:48:41,229
reads it during boot like there's if the

1154
00:48:37,959 --> 00:48:43,448
system crashes<font color="#E5E5E5"> or in any way you would</font>

1155
00:48:41,229 --> 00:48:46,598
be like glitched<font color="#CCCCCC"> or something like that</font>

1156
00:48:43,449 --> 00:48:49,199
<font color="#E5E5E5">then</font><font color="#CCCCCC"> and you</font><font color="#E5E5E5"> know it uses the same seed</font>

1157
00:48:46,599 --> 00:48:49,199
file again

1158
00:48:57,460 --> 00:49:08,720
<font color="#CCCCCC">is blackberry still shipping</font><font color="#E5E5E5"> 6.6 as far</font>

1159
00:49:04,340 --> 00:49:10,730
<font color="#E5E5E5">as I know 6.6 is not the underlying</font><font color="#CCCCCC"> cue</font>

1160
00:49:08,720 --> 00:49:15,200
<font color="#CCCCCC">annex version for blackberry 10 and</font>

1161
00:49:10,730 --> 00:49:15,770
BlackBerry tablet OS<font color="#CCCCCC"> I think that is yes</font>

1162
00:49:15,200 --> 00:49:19,430
they do

1163
00:49:15,770 --> 00:49:22,130
<font color="#CCCCCC">keep the</font><font color="#E5E5E5"> 6.6 yes the option to you can</font>

1164
00:49:19,430 --> 00:49:25,580
choose like<font color="#E5E5E5"> you can go</font><font color="#CCCCCC"> force it Kunik</font><font color="#E5E5E5"> 7</font>

1165
00:49:22,130 --> 00:49:28,670
<font color="#E5E5E5">or</font><font color="#CCCCCC"> you can go with</font><font color="#E5E5E5"> clinic 6.6 yes so</font>

1166
00:49:25,580 --> 00:49:31,700
they are<font color="#E5E5E5"> sipping it for</font><font color="#CCCCCC"> OMS so there are</font>

1167
00:49:28,670 --> 00:49:37,660
om still releasing<font color="#E5E5E5"> new products life</font>

1168
00:49:31,700 --> 00:49:37,660
today with<font color="#CCCCCC"> 6.6</font><font color="#E5E5E5"> yes yeah okay thanks</font>

