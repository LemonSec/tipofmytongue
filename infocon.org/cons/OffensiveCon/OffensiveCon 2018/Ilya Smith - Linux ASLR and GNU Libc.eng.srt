1
00:00:03,080 --> 00:00:10,349
thank you so first<font color="#E5E5E5"> I will</font><font color="#CCCCCC"> sate Who I am</font>

2
00:00:08,429 --> 00:00:13,469
<font color="#CCCCCC">I'm</font><font color="#E5E5E5"> a spiritual researcher and positive</font>

3
00:00:10,349 --> 00:00:16,049
technologist<font color="#E5E5E5"> I plain CTF and have some</font>

4
00:00:13,469 --> 00:00:20,160
<font color="#E5E5E5">experience in exploitation and being</font>

5
00:00:16,049 --> 00:00:22,740
<font color="#E5E5E5">realizes today we were going</font><font color="#CCCCCC"> to speak</font>

6
00:00:20,160 --> 00:00:24,900
about line access where we will take a

7
00:00:22,740 --> 00:00:27,570
look how<font color="#E5E5E5"> it is implemented and find some</font>

8
00:00:24,900 --> 00:00:31,830
<font color="#CCCCCC">weaknesses</font><font color="#E5E5E5"> we'll take a look much closer</font>

9
00:00:27,570 --> 00:00:34,440
on the<font color="#E5E5E5"> new</font><font color="#CCCCCC"> Lipsy and you</font><font color="#E5E5E5"> will find a lot</font>

10
00:00:31,830 --> 00:00:38,250
of<font color="#E5E5E5"> interesting weaknesses of</font><font color="#CCCCCC"> it and I</font>

11
00:00:34,440 --> 00:00:42,899
will<font color="#E5E5E5"> also say</font><font color="#CCCCCC"> some words about links to</font>

12
00:00:38,250 --> 00:00:47,489
<font color="#CCCCCC">now patches I prepared for</font><font color="#E5E5E5"> some some of</font>

13
00:00:42,899 --> 00:00:50,850
what I found<font color="#E5E5E5"> so let's start the basic</font>

14
00:00:47,489 --> 00:00:55,349
things just to<font color="#CCCCCC"> make you know everything</font>

15
00:00:50,850 --> 00:00:58,260
<font color="#E5E5E5">knows about it so other space layout</font>

16
00:00:55,350 --> 00:01:03,629
randomization is<font color="#E5E5E5"> mitigation techniques</font>

17
00:00:58,260 --> 00:01:06,860
<font color="#E5E5E5">that was made a lot of time before so</font>

18
00:01:03,629 --> 00:01:12,150
it's it's based on idea let's add some

19
00:01:06,860 --> 00:01:16,289
randomness<font color="#E5E5E5"> to</font><font color="#CCCCCC"> the address</font><font color="#E5E5E5"> and basically</font>

20
00:01:12,150 --> 00:01:19,860
this<font color="#E5E5E5"> idea has different implementation</font>

21
00:01:16,290 --> 00:01:23,909
in other operation systems<font color="#E5E5E5"> and you know</font>

22
00:01:19,860 --> 00:01:27,150
there's no good approach about what

23
00:01:23,909 --> 00:01:31,110
exact address<font color="#CCCCCC"> we should take and how we</font>

24
00:01:27,150 --> 00:01:34,200
can get this<font color="#CCCCCC"> random and so on so there</font>

25
00:01:31,110 --> 00:01:35,700
is that's<font color="#E5E5E5"> why for the last years you may</font>

26
00:01:34,200 --> 00:01:38,790
found a lot of<font color="#CCCCCC"> different researches</font>

27
00:01:35,700 --> 00:01:43,579
about<font color="#E5E5E5"> others space layout randomization</font>

28
00:01:38,790 --> 00:01:49,290
<font color="#E5E5E5">in this</font><font color="#CCCCCC"> all</font><font color="#E5E5E5"> that was compromised</font>

29
00:01:43,579 --> 00:01:51,408
so some evolution about<font color="#CCCCCC"> other space it</font>

30
00:01:49,290 --> 00:01:55,290
was<font color="#E5E5E5"> introduced first in line</font><font color="#CCCCCC"> acts</font><font color="#E5E5E5"> in</font>

31
00:01:51,409 --> 00:01:58,799
2005<font color="#CCCCCC"> here and you may find the good</font>

32
00:01:55,290 --> 00:02:02,579
description<font color="#CCCCCC"> on</font><font color="#E5E5E5"> of it all site link is</font>

33
00:01:58,799 --> 00:02:06,079
provided<font color="#E5E5E5"> and of course good good things</font>

34
00:02:02,579 --> 00:02:09,478
was made by<font color="#CCCCCC"> parks team ensure security</font>

35
00:02:06,079 --> 00:02:11,620
<font color="#CCCCCC">the last patches</font><font color="#E5E5E5"> was attended to</font><font color="#CCCCCC"> assert</font>

36
00:02:09,479 --> 00:02:14,790
<font color="#CCCCCC">to leap attack that allows you</font>

37
00:02:11,620 --> 00:02:18,879
to use<font color="#CCCCCC"> upsets to live from binary to</font>

38
00:02:14,790 --> 00:02:23,290
bypass the SLR<font color="#CCCCCC"> and this one was</font><font color="#E5E5E5"> fix it</font>

39
00:02:18,879 --> 00:02:27,909
<font color="#E5E5E5">and the last work I want to point</font><font color="#CCCCCC"> before</font>

40
00:02:23,290 --> 00:02:30,459
<font color="#CCCCCC">we go next is ISIL RNG that carries</font>

41
00:02:27,909 --> 00:02:35,470
something<font color="#CCCCCC"> real job today</font><font color="#E5E5E5"> but there are</font>

42
00:02:30,459 --> 00:02:38,140
still<font color="#CCCCCC"> no patches provided ok</font>

43
00:02:35,470 --> 00:02:42,579
some basically known techniques of

44
00:02:38,140 --> 00:02:45,578
<font color="#E5E5E5">bypassing SLR is first of all is</font><font color="#CCCCCC"> an</font>

45
00:02:42,579 --> 00:02:48,730
information leakage when you can get

46
00:02:45,579 --> 00:02:52,140
some pointer from<font color="#E5E5E5"> a</font><font color="#CCCCCC"> wearable</font><font color="#E5E5E5"> application</font>

47
00:02:48,730 --> 00:02:53,608
and just<font color="#E5E5E5"> use it later</font><font color="#CCCCCC"> forever you want</font>

48
00:02:52,140 --> 00:02:56,708
another one

49
00:02:53,609 --> 00:02:59,950
<font color="#E5E5E5">techniques is out of bounds</font><font color="#CCCCCC"> of course</font>

50
00:02:56,709 --> 00:03:03,640
when you have<font color="#E5E5E5"> some static</font><font color="#CCCCCC"> array or</font>

51
00:02:59,950 --> 00:03:07,659
<font color="#CCCCCC">dynamic</font><font color="#E5E5E5"> area matter and you can address</font>

52
00:03:03,640 --> 00:03:11,500
from<font color="#E5E5E5"> it from some I know input another</font>

53
00:03:07,659 --> 00:03:14,709
<font color="#E5E5E5">one is a weak implementation of course</font>

54
00:03:11,500 --> 00:03:18,870
good example<font color="#E5E5E5"> was an AMD bulldozer that</font>

55
00:03:14,709 --> 00:03:22,419
allows you<font color="#CCCCCC"> to find the</font><font color="#E5E5E5"> stack easily</font>

56
00:03:18,870 --> 00:03:26,319
<font color="#E5E5E5">provided</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> side effects of course this</font>

57
00:03:22,419 --> 00:03:30,090
is almost everything<font color="#CCCCCC"> knows already</font>

58
00:03:26,319 --> 00:03:34,230
I hope<font color="#E5E5E5"> oh it's a little time by the way</font>

59
00:03:30,090 --> 00:03:41,530
so first of all let's take a look on how

60
00:03:34,230 --> 00:03:46,810
<font color="#E5E5E5">does current</font><font color="#CCCCCC"> Eisler works in linux</font><font color="#E5E5E5"> we</font>

61
00:03:41,530 --> 00:03:50,079
will take take a<font color="#CCCCCC"> look on</font><font color="#E5E5E5"> the maps</font><font color="#CCCCCC"> it's</font>

62
00:03:46,810 --> 00:03:55,419
if you know it's a file that allows to

63
00:03:50,079 --> 00:04:00,129
show current layout<font color="#E5E5E5"> current meetings in</font>

64
00:03:55,419 --> 00:04:04,209
<font color="#CCCCCC">linux and what we will</font><font color="#E5E5E5"> see that behavior</font>

65
00:04:00,129 --> 00:04:10,720
<font color="#E5E5E5">would be</font><font color="#CCCCCC"> the same for any other process</font>

66
00:04:04,209 --> 00:04:15,760
and real focus on x86<font color="#CCCCCC"> 64 64 bits because</font>

67
00:04:10,720 --> 00:04:20,589
<font color="#E5E5E5">it's modern and so on so first of all</font>

68
00:04:15,760 --> 00:04:24,669
you<font color="#E5E5E5"> will</font><font color="#CCCCCC"> see the</font><font color="#E5E5E5"> binary image of in our</font>

69
00:04:20,589 --> 00:04:25,599
case it's<font color="#E5E5E5"> less but it could be anything</font>

70
00:04:24,669 --> 00:04:30,940
else

71
00:04:25,600 --> 00:04:35,050
<font color="#E5E5E5">it looks fine honestly so this yeah what</font>

72
00:04:30,940 --> 00:04:42,610
I want to point here is is that here is

73
00:04:35,050 --> 00:04:46,090
a basis section of static<font color="#E5E5E5"> erase global</font>

74
00:04:42,610 --> 00:04:49,720
arrays which<font color="#CCCCCC"> are not</font><font color="#E5E5E5"> map it has been</font>

75
00:04:46,090 --> 00:04:54,460
less unless itself but it's Muppet by

76
00:04:49,720 --> 00:04:58,990
<font color="#CCCCCC">kernel</font><font color="#E5E5E5"> so I think it's important to to</font>

77
00:04:54,460 --> 00:05:01,120
know<font color="#CCCCCC"> that this this thing is</font><font color="#E5E5E5"> exist so</font>

78
00:04:58,990 --> 00:05:04,960
next one is hip hip is just near the

79
00:05:01,120 --> 00:05:07,120
<font color="#E5E5E5">binary and later we will see why</font><font color="#CCCCCC"> and</font>

80
00:05:04,960 --> 00:05:11,229
right now yeah it also looks fine

81
00:05:07,120 --> 00:05:13,840
what doesn't<font color="#E5E5E5"> looks fine is libraries and</font>

82
00:05:11,230 --> 00:05:17,290
if you<font color="#E5E5E5"> take closer the libraries are</font>

83
00:05:13,840 --> 00:05:22,419
going<font color="#E5E5E5"> one</font><font color="#CCCCCC"> by one and they just glued to</font>

84
00:05:17,290 --> 00:05:27,490
each other and this<font color="#E5E5E5"> is because libraries</font>

85
00:05:22,420 --> 00:05:32,170
<font color="#E5E5E5">was loaded by new</font><font color="#CCCCCC"> Lipsy and loaded with</font>

86
00:05:27,490 --> 00:05:35,230
<font color="#E5E5E5">a map system call who work like this so</font>

87
00:05:32,170 --> 00:05:38,790
what we need<font color="#CCCCCC"> to know about it right</font><font color="#E5E5E5"> here</font>

88
00:05:35,230 --> 00:05:41,820
and<font color="#E5E5E5"> right now that a map system</font><font color="#CCCCCC"> course</font>

89
00:05:38,790 --> 00:05:44,800
works<font color="#E5E5E5"> like this and that the new</font><font color="#CCCCCC"> Lipsy</font>

90
00:05:41,820 --> 00:05:50,320
<font color="#E5E5E5">do the loading of any immediate</font>

91
00:05:44,800 --> 00:05:56,760
libraries for your<font color="#E5E5E5"> process</font><font color="#CCCCCC"> right here I</font>

92
00:05:50,320 --> 00:05:56,760
want to<font color="#E5E5E5"> sorry</font>

93
00:05:58,740 --> 00:06:10,330
it's big<font color="#CCCCCC"> I</font><font color="#E5E5E5"> will fix it</font><font color="#CCCCCC"> okay</font>

94
00:06:03,790 --> 00:06:13,720
later yes<font color="#CCCCCC"> so first of</font><font color="#E5E5E5"> all from the</font>

95
00:06:10,330 --> 00:06:16,630
exactly<font color="#E5E5E5"> system call that creates new</font>

96
00:06:13,720 --> 00:06:20,380
<font color="#E5E5E5">process in Linux happens the following</font>

97
00:06:16,630 --> 00:06:24,250
since<font color="#CCCCCC"> code mapping is removed from the</font>

98
00:06:20,380 --> 00:06:27,430
process<font color="#E5E5E5"> and it starts with a creating a</font>

99
00:06:24,250 --> 00:06:30,310
stack region<font color="#E5E5E5"> after</font><font color="#CCCCCC"> state region creation</font>

100
00:06:27,430 --> 00:06:31,930
<font color="#CCCCCC">system chooses a map</font><font color="#E5E5E5"> based</font><font color="#CCCCCC"> there's a</font>

101
00:06:30,310 --> 00:06:35,800
special

102
00:06:31,930 --> 00:06:38,800
you that later will<font color="#CCCCCC"> be used</font><font color="#E5E5E5"> to making</font><font color="#CCCCCC"> a</font>

103
00:06:35,800 --> 00:06:43,509
map system call<font color="#E5E5E5"> to make any address</font><font color="#CCCCCC"> from</font>

104
00:06:38,800 --> 00:06:48,789
it<font color="#E5E5E5"> so this is somehow a higher border</font><font color="#CCCCCC"> to</font>

105
00:06:43,509 --> 00:06:53,919
<font color="#CCCCCC">which</font><font color="#E5E5E5"> a map will choose address after</font>

106
00:06:48,789 --> 00:06:59,110
<font color="#CCCCCC">that</font><font color="#E5E5E5"> it makes a binary the formula you</font>

107
00:06:53,919 --> 00:07:01,330
see<font color="#CCCCCC"> is describes it and it comes</font><font color="#E5E5E5"> starts</font>

108
00:06:59,110 --> 00:07:04,000
with a large interp interpreter and

109
00:07:01,330 --> 00:07:06,849
makes it to run

110
00:07:04,000 --> 00:07:11,229
yeah and<font color="#CCCCCC"> heap is only 32 megabytes from</font>

111
00:07:06,849 --> 00:07:16,509
binary yeah this<font color="#CCCCCC"> just</font><font color="#E5E5E5"> basic things you</font>

112
00:07:11,229 --> 00:07:21,990
<font color="#CCCCCC">may know it already</font><font color="#E5E5E5"> so right now we will</font>

113
00:07:16,509 --> 00:07:21,990
<font color="#E5E5E5">speak</font><font color="#CCCCCC"> about how exactly a map works a</font>

114
00:07:23,340 --> 00:07:31,330
map system<font color="#E5E5E5"> call inside of Linux kernel</font>

115
00:07:27,250 --> 00:07:34,090
works the structure that<font color="#CCCCCC"> named VM area</font>

116
00:07:31,330 --> 00:07:38,139
which<font color="#E5E5E5"> on memory area and it describes</font>

117
00:07:34,090 --> 00:07:40,900
start and<font color="#CCCCCC"> and page</font><font color="#E5E5E5"> access permissions</font>

118
00:07:38,139 --> 00:07:43,570
for for this way<font color="#E5E5E5"> I mean it's what we</font>

119
00:07:40,900 --> 00:07:48,280
really need to<font color="#CCCCCC"> know about it all other</font>

120
00:07:43,570 --> 00:07:50,740
<font color="#CCCCCC">fields are</font><font color="#E5E5E5"> not necessary right now these</font>

121
00:07:48,280 --> 00:07:51,400
<font color="#E5E5E5">structures are organized in doubly</font>

122
00:07:50,740 --> 00:07:56,380
linked<font color="#CCCCCC"> list</font>

123
00:07:51,400 --> 00:08:02,979
<font color="#CCCCCC">it's</font><font color="#E5E5E5"> allows to find neighbor of email in</font>

124
00:07:56,380 --> 00:08:07,060
kernel and also<font color="#E5E5E5"> it's organized to red</font>

125
00:08:02,979 --> 00:08:13,389
black tree<font color="#E5E5E5"> here</font><font color="#CCCCCC"> the key of a tree is</font>

126
00:08:07,060 --> 00:08:19,990
start of signal and<font color="#E5E5E5"> this how Linux</font>

127
00:08:13,389 --> 00:08:22,300
kernel helps to such the<font color="#E5E5E5"> VMA according</font>

128
00:08:19,990 --> 00:08:24,909
<font color="#E5E5E5">to the address for</font><font color="#CCCCCC"> example</font><font color="#E5E5E5"> if you have a</font>

129
00:08:22,300 --> 00:08:28,840
page fault you go through this tree<font color="#E5E5E5"> and</font>

130
00:08:24,909 --> 00:08:31,419
found the exact same a and make a call

131
00:08:28,840 --> 00:08:37,740
<font color="#CCCCCC">for</font><font color="#E5E5E5"> example to load pages exact pages</font>

132
00:08:31,419 --> 00:08:41,549
for these mappings<font color="#E5E5E5"> and so on</font><font color="#CCCCCC"> yeah and</font>

133
00:08:37,740 --> 00:08:45,700
<font color="#E5E5E5">also this complicated structure used for</font>

134
00:08:41,549 --> 00:08:51,010
finding for for<font color="#CCCCCC"> choosing</font>

135
00:08:45,700 --> 00:08:55,420
memory address it keeps gap gap between

136
00:08:51,010 --> 00:08:59,740
<font color="#E5E5E5">two VMAs and also this is</font><font color="#CCCCCC"> an</font><font color="#E5E5E5"> element red</font>

137
00:08:55,420 --> 00:09:02,500
black tree and it keeps gap that<font color="#E5E5E5"> is</font>

138
00:08:59,740 --> 00:09:06,520
<font color="#E5E5E5">calculated</font><font color="#CCCCCC"> like gap between a</font><font color="#E5E5E5"> neighbor</font>

139
00:09:02,500 --> 00:09:11,910
<font color="#E5E5E5">and between the previous EMA and gap of</font>

140
00:09:06,520 --> 00:09:15,370
left and<font color="#E5E5E5"> right</font><font color="#CCCCCC"> subtree so how the</font>

141
00:09:11,910 --> 00:09:19,180
algorithm works<font color="#E5E5E5"> of choosing address is</font>

142
00:09:15,370 --> 00:09:21,010
<font color="#E5E5E5">just trying to use and find a</font><font color="#CCCCCC"> maxima</font>

143
00:09:19,180 --> 00:09:25,120
dress let's have a suitable<font color="#E5E5E5"> length</font>

144
00:09:21,010 --> 00:09:28,540
<font color="#E5E5E5">that's why you see that all old</font>

145
00:09:25,120 --> 00:09:31,900
libraries are goes one by one so this<font color="#CCCCCC"> is</font>

146
00:09:28,540 --> 00:09:34,240
<font color="#CCCCCC">a</font><font color="#E5E5E5"> important point because we will</font><font color="#CCCCCC"> use</font>

147
00:09:31,900 --> 00:09:37,449
the exact algorithm

148
00:09:34,240 --> 00:09:43,020
a map<font color="#E5E5E5"> choose it</font><font color="#CCCCCC"> I want you to understand</font>

149
00:09:37,450 --> 00:09:43,020
it<font color="#CCCCCC"> so sorry</font>

150
00:09:43,290 --> 00:09:51,640
now let's talk why is it bad

151
00:09:46,890 --> 00:09:57,160
first and it was<font color="#E5E5E5"> already told in offset</font>

152
00:09:51,640 --> 00:09:58,900
to<font color="#E5E5E5"> leap attack that all all the signals</font>

153
00:09:57,160 --> 00:10:01,449
are close to<font color="#CCCCCC"> each other and it means</font>

154
00:09:58,900 --> 00:10:04,840
<font color="#CCCCCC">that we can easily</font><font color="#E5E5E5"> make</font><font color="#CCCCCC"> upset from one</font>

155
00:10:01,450 --> 00:10:09,240
to another<font color="#E5E5E5"> and another one point is if</font>

156
00:10:04,840 --> 00:10:13,570
you corrupt<font color="#E5E5E5"> something you may affect</font>

157
00:10:09,240 --> 00:10:17,320
<font color="#CCCCCC">neighbors regions also if you leak</font>

158
00:10:13,570 --> 00:10:19,480
<font color="#CCCCCC">address you</font><font color="#E5E5E5"> can easily compute the</font>

159
00:10:17,320 --> 00:10:22,930
address<font color="#E5E5E5"> of other segments we will see</font>

160
00:10:19,480 --> 00:10:27,340
later how to do it properly

161
00:10:22,930 --> 00:10:30,939
yeah and good example<font color="#CCCCCC"> I was found in the</font>

162
00:10:27,340 --> 00:10:35,800
old<font color="#E5E5E5"> 1913</font><font color="#CCCCCC"> three</font><font color="#E5E5E5"> years was a</font><font color="#CCCCCC"> peach p.m.</font>

163
00:10:30,940 --> 00:10:40,240
<font color="#CCCCCC">Allah who has the error</font><font color="#E5E5E5"> of region lines</font>

164
00:10:35,800 --> 00:10:43,510
and if you make an extra comment

165
00:10:40,240 --> 00:10:46,900
<font color="#CCCCCC">it'll interpret it's like not to comment</font>

166
00:10:43,510 --> 00:10:52,500
<font color="#E5E5E5">and continue to go on the memory and you</font>

167
00:10:46,900 --> 00:10:52,500
have read over to the<font color="#E5E5E5"> next segment</font><font color="#CCCCCC"> so</font>

168
00:10:54,630 --> 00:10:59,800
<font color="#CCCCCC">yeah let's see how this</font><font color="#E5E5E5"> issue is deep</font>

169
00:10:58,570 --> 00:11:03,250
<font color="#E5E5E5">enough</font>

170
00:10:59,800 --> 00:11:06,910
<font color="#E5E5E5">to dissolve</font><font color="#CCCCCC"> I want you to understand</font><font color="#E5E5E5"> how</font>

171
00:11:03,250 --> 00:11:11,500
<font color="#CCCCCC">line-x</font><font color="#E5E5E5"> process is created</font><font color="#CCCCCC"> when</font><font color="#E5E5E5"> you call</font>

172
00:11:06,910 --> 00:11:14,800
exactly<font color="#CCCCCC"> first Canelo's the binary it's a</font>

173
00:11:11,500 --> 00:11:17,649
lot the interpreter and<font color="#CCCCCC"> executes an</font>

174
00:11:14,800 --> 00:11:20,290
interpreter<font color="#E5E5E5"> in our case it's the</font><font color="#CCCCCC"> LG</font>

175
00:11:17,649 --> 00:11:24,220
program LG program do loading libraries

176
00:11:20,290 --> 00:11:26,339
it's initialized<font color="#E5E5E5"> different inner stuff</font>

177
00:11:24,220 --> 00:11:29,500
and prepares different variables

178
00:11:26,339 --> 00:11:31,899
<font color="#E5E5E5">allocating different objects it run</font>

179
00:11:29,500 --> 00:11:37,660
constructors that<font color="#E5E5E5"> will be defined in the</font>

180
00:11:31,899 --> 00:11:41,170
<font color="#CCCCCC">L</font><font color="#E5E5E5"> file and the other stuff and run the</font>

181
00:11:37,660 --> 00:11:45,390
exact<font color="#CCCCCC"> application so our plan would be</font>

182
00:11:41,170 --> 00:11:47,920
to<font color="#E5E5E5"> find some constant steps and try to</font>

183
00:11:45,390 --> 00:11:55,480
use these constant steps to exploit

184
00:11:47,920 --> 00:12:01,649
everything yeah and what what I will<font color="#E5E5E5"> use</font>

185
00:11:55,480 --> 00:12:05,290
is<font color="#E5E5E5"> the fact that any program</font><font color="#CCCCCC"> have such</font>

186
00:12:01,649 --> 00:12:09,279
property that you can control execution

187
00:12:05,290 --> 00:12:14,349
<font color="#CCCCCC">flow somehow</font><font color="#E5E5E5"> for example in any attack</font>

188
00:12:09,279 --> 00:12:17,380
<font color="#E5E5E5">when you for</font><font color="#CCCCCC"> example use HIPAA use of</font>

189
00:12:14,350 --> 00:12:21,790
the free even ability or other else<font color="#E5E5E5"> what</font>

190
00:12:17,380 --> 00:12:26,970
you<font color="#CCCCCC"> do you</font><font color="#E5E5E5"> make in some flow to make all</font>

191
00:12:21,790 --> 00:12:32,980
objects be in the<font color="#E5E5E5"> memory like you want</font>

192
00:12:26,970 --> 00:12:35,170
so this one we<font color="#E5E5E5"> will</font><font color="#CCCCCC"> use to build such</font>

193
00:12:32,980 --> 00:12:37,690
flow<font color="#E5E5E5"> and we will take</font><font color="#CCCCCC"> a look what's</font>

194
00:12:35,170 --> 00:12:41,500
<font color="#CCCCCC">going on on the application from its</font>

195
00:12:37,690 --> 00:12:46,779
beginning<font color="#CCCCCC"> and to the</font><font color="#E5E5E5"> soul we will use</font>

196
00:12:41,500 --> 00:12:49,980
<font color="#E5E5E5">this trace a map just to see what</font><font color="#CCCCCC"> what's</font>

197
00:12:46,779 --> 00:12:53,320
what's calling and what's the<font color="#CCCCCC"> layout</font>

198
00:12:49,980 --> 00:12:56,290
first of all<font color="#E5E5E5"> lodging library or order</font>

199
00:12:53,320 --> 00:12:59,230
it's what we see<font color="#E5E5E5"> because on the picture</font>

200
00:12:56,290 --> 00:13:02,410
<font color="#CCCCCC">you seen from</font><font color="#E5E5E5"> laws less broad self maps</font>

201
00:12:59,230 --> 00:13:05,140
there is<font color="#E5E5E5"> there was libraries which are</font>

202
00:13:02,410 --> 00:13:11,050
<font color="#CCCCCC">always in constant mode in constants</font>

203
00:13:05,140 --> 00:13:12,259
<font color="#E5E5E5">order glitzy doesn't use a system</font><font color="#CCCCCC"> called</font>

204
00:13:11,050 --> 00:13:16,969
<font color="#E5E5E5">you sleep</font>

205
00:13:12,259 --> 00:13:22,009
and implement<font color="#CCCCCC"> Loden</font><font color="#E5E5E5"> of libraries by</font>

206
00:13:16,970 --> 00:13:24,799
itself<font color="#CCCCCC"> and yeah it has a constant audit</font>

207
00:13:22,009 --> 00:13:29,089
and the algorithm<font color="#E5E5E5"> is provided on the</font>

208
00:13:24,799 --> 00:13:31,549
slide<font color="#E5E5E5"> that's how we can repeat this load</font>

209
00:13:29,089 --> 00:13:35,389
in order<font color="#E5E5E5"> if he for example analyze some</font>

210
00:13:31,549 --> 00:13:39,049
<font color="#E5E5E5">binary application you can build the</font>

211
00:13:35,389 --> 00:13:42,439
<font color="#CCCCCC">same</font><font color="#E5E5E5"> Lodge in order and in theory you</font>

212
00:13:39,049 --> 00:13:45,649
can<font color="#E5E5E5"> make the same layout until</font><font color="#CCCCCC"> the</font>

213
00:13:42,439 --> 00:13:52,059
<font color="#E5E5E5">program starts until anything</font><font color="#CCCCCC"> be</font>

214
00:13:45,649 --> 00:13:53,600
<font color="#E5E5E5">executed so this is a interesting point</font>

215
00:13:52,059 --> 00:13:57,769
<font color="#E5E5E5">next</font><font color="#CCCCCC"> step</font>

216
00:13:53,600 --> 00:14:01,189
why do we need<font color="#E5E5E5"> it there is a procedure</font>

217
00:13:57,769 --> 00:14:03,859
<font color="#CCCCCC">linking table in the elf file</font>

218
00:14:01,189 --> 00:14:09,618
<font color="#E5E5E5">it contains pointers to the libraries</font>

219
00:14:03,859 --> 00:14:13,939
<font color="#E5E5E5">for example</font><font color="#CCCCCC"> when Lipsy links libraries</font>

220
00:14:09,619 --> 00:14:16,209
<font color="#E5E5E5">it use this table to</font><font color="#CCCCCC"> keep pointers to</font>

221
00:14:13,939 --> 00:14:20,059
other libraries from<font color="#E5E5E5"> function it needs</font>

222
00:14:16,209 --> 00:14:24,949
<font color="#E5E5E5">so if you for example</font><font color="#CCCCCC"> leak</font><font color="#E5E5E5"> address from</font>

223
00:14:20,059 --> 00:14:26,509
one of functions<font color="#E5E5E5"> for</font><font color="#CCCCCC"> example</font><font color="#E5E5E5"> it's</font>

224
00:14:24,949 --> 00:14:28,849
usually what you're doing when you have

225
00:14:26,509 --> 00:14:35,660
arbitrary<font color="#CCCCCC"> read for example in trying to</font>

226
00:14:28,850 --> 00:14:38,239
read dot<font color="#E5E5E5"> got</font><font color="#CCCCCC"> BLT and get the address of</font>

227
00:14:35,660 --> 00:14:43,459
<font color="#E5E5E5">some function for</font><font color="#CCCCCC"> example for</font><font color="#E5E5E5"> offset to</font>

228
00:14:38,239 --> 00:14:46,789
<font color="#CCCCCC">Lipsy and find the</font><font color="#E5E5E5"> system right but when</font>

229
00:14:43,459 --> 00:14:49,779
the rest<font color="#E5E5E5"> function wasn't called yet</font>

230
00:14:46,789 --> 00:14:54,230
until that<font color="#CCCCCC"> moment</font><font color="#E5E5E5"> it will contain</font>

231
00:14:49,779 --> 00:14:56,989
pointer<font color="#E5E5E5"> to LG library and it won't be</font>

232
00:14:54,230 --> 00:14:59,839
<font color="#CCCCCC">May it might be a</font><font color="#E5E5E5"> problem because you</font>

233
00:14:56,989 --> 00:15:04,609
you need<font color="#CCCCCC"> Lipsy system and you have some</font>

234
00:14:59,839 --> 00:15:07,489
<font color="#E5E5E5">liberal</font><font color="#CCCCCC"> g so here we can say that you</font>

235
00:15:04,609 --> 00:15:10,369
<font color="#E5E5E5">can easily calculate difference between</font>

236
00:15:07,489 --> 00:15:13,639
this function<font color="#E5E5E5"> and get your lips desired</font>

237
00:15:10,369 --> 00:15:16,850
<font color="#CCCCCC">Lipsy system you need only what you need</font>

238
00:15:13,639 --> 00:15:21,949
here is<font color="#E5E5E5"> to know the size and offsets to</font>

239
00:15:16,850 --> 00:15:24,620
<font color="#CCCCCC">do so you need the exact version of elf</font>

240
00:15:21,949 --> 00:15:29,290
files and

241
00:15:24,620 --> 00:15:29,290
and this is file<font color="#CCCCCC"> L files could be easily</font>

242
00:15:29,560 --> 00:15:37,209
easily gotten<font color="#E5E5E5"> from Linux distributive</font>

243
00:15:33,830 --> 00:15:42,890
packages so here you will for example

244
00:15:37,210 --> 00:15:43,370
<font color="#CCCCCC">brute force only ten times but</font><font color="#E5E5E5"> not much</font>

245
00:15:42,890 --> 00:15:47,360
more

246
00:15:43,370 --> 00:15:49,940
and things what need<font color="#E5E5E5"> to know that</font><font color="#CCCCCC"> since</font>

247
00:15:47,360 --> 00:15:51,740
<font color="#CCCCCC">version sent seven for example in</font><font color="#E5E5E5"> ondraw</font>

248
00:15:49,940 --> 00:15:54,050
<font color="#CCCCCC">interpolation system there</font><font color="#E5E5E5"> was</font>

249
00:15:51,740 --> 00:15:59,510
implemented randomization<font color="#E5E5E5"> for the</font>

250
00:15:54,050 --> 00:16:03,109
library order next interesting<font color="#CCCCCC"> thing</font>

251
00:15:59,510 --> 00:16:05,390
<font color="#CCCCCC">that</font><font color="#E5E5E5"> you</font><font color="#CCCCCC"> might see on the</font><font color="#E5E5E5"> map</font><font color="#CCCCCC"> that there</font>

252
00:16:03,110 --> 00:16:09,950
are worse free allocations which are

253
00:16:05,390 --> 00:16:14,630
seated<font color="#CCCCCC"> inside the lip LG these free</font>

254
00:16:09,950 --> 00:16:17,600
allocations<font color="#CCCCCC"> first of</font><font color="#E5E5E5"> all we need to say</font>

255
00:16:14,630 --> 00:16:22,939
why this free allocations<font color="#E5E5E5"> come there</font>

256
00:16:17,600 --> 00:16:26,750
well the answer is<font color="#E5E5E5"> when line external</font><font color="#CCCCCC"> a</font>

257
00:16:22,940 --> 00:16:30,530
<font color="#CCCCCC">lot something</font><font color="#E5E5E5"> it looks</font><font color="#CCCCCC"> if there is a</font>

258
00:16:26,750 --> 00:16:36,730
hole between two segments of elf files

259
00:16:30,530 --> 00:16:40,910
<font color="#CCCCCC">it called an map and when it's unmapped</font>

260
00:16:36,730 --> 00:16:45,530
any other a map allocation can<font color="#E5E5E5"> be placed</font>

261
00:16:40,910 --> 00:16:48,530
just<font color="#CCCCCC"> in this space and since linux</font>

262
00:16:45,530 --> 00:16:53,060
kernel was on original origin only

263
00:16:48,530 --> 00:16:56,079
<font color="#E5E5E5">binary and LG interpreter this effects</font>

264
00:16:53,060 --> 00:17:01,089
only<font color="#E5E5E5"> these two for example</font><font color="#CCCCCC"> in ellipse e</font>

265
00:16:56,080 --> 00:17:11,480
<font color="#CCCCCC">larger code this code is made with</font>

266
00:17:01,089 --> 00:17:15,560
unprotect<font color="#CCCCCC"> to brought non so sorry how</font>

267
00:17:11,480 --> 00:17:18,199
you might use it<font color="#E5E5E5"> you may use it that for</font>

268
00:17:15,560 --> 00:17:22,609
<font color="#E5E5E5">example if you have some am a primitive</font>

269
00:17:18,199 --> 00:17:26,720
<font color="#E5E5E5">or some memory</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> was a mapped and you</font>

270
00:17:22,609 --> 00:17:30,290
can use this<font color="#E5E5E5"> memory to read or write</font><font color="#CCCCCC"> out</font>

271
00:17:26,720 --> 00:17:33,170
<font color="#CCCCCC">of bounds you can bypass a solar</font><font color="#E5E5E5"> because</font>

272
00:17:30,290 --> 00:17:36,139
you don't need<font color="#E5E5E5"> to know anything else</font><font color="#CCCCCC"> you</font>

273
00:17:33,170 --> 00:17:37,960
already<font color="#E5E5E5"> near the lip GL you can</font>

274
00:17:36,140 --> 00:17:43,289
otherwise the

275
00:17:37,960 --> 00:17:43,289
pointers and variables inside the lip<font color="#E5E5E5"> GL</font>

276
00:17:45,630 --> 00:17:53,769
<font color="#CCCCCC">steg</font><font color="#E5E5E5"> well before continue let me say</font>

277
00:17:51,250 --> 00:17:55,779
about<font color="#CCCCCC"> free glucose storage</font><font color="#E5E5E5"> you may</font>

278
00:17:53,769 --> 00:17:59,559
already know that<font color="#E5E5E5"> free local storage is</font>

279
00:17:55,779 --> 00:18:02,139
<font color="#CCCCCC">used to keep some local variables</font><font color="#E5E5E5"> local</font>

280
00:17:59,559 --> 00:18:03,789
for the<font color="#CCCCCC"> freed so if you have another</font>

281
00:18:02,139 --> 00:18:10,080
<font color="#CCCCCC">freed you have another copy of this</font>

282
00:18:03,789 --> 00:18:15,309
variable and in our key techniques<font color="#CCCCCC"> sixty</font>

283
00:18:10,080 --> 00:18:19,210
x86 64<font color="#CCCCCC"> this is implemented</font><font color="#E5E5E5"> with register</font>

284
00:18:15,309 --> 00:18:24,580
FS this register keeps pointer to some

285
00:18:19,210 --> 00:18:27,279
<font color="#E5E5E5">special structure that's named</font><font color="#CCCCCC"> GCB</font><font color="#E5E5E5"> had</font>

286
00:18:24,580 --> 00:18:32,379
freed control<font color="#E5E5E5"> block and this structure</font>

287
00:18:27,279 --> 00:18:35,399
points to<font color="#E5E5E5"> staggered how does</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> work</font>

288
00:18:32,380 --> 00:18:39,429
this<font color="#CCCCCC"> stag art is</font><font color="#E5E5E5"> a</font><font color="#CCCCCC"> mitigation that works</font>

289
00:18:35,399 --> 00:18:43,629
with against<font color="#CCCCCC"> battle flow and works</font><font color="#E5E5E5"> like</font>

290
00:18:39,429 --> 00:18:46,889
following<font color="#E5E5E5"> it just keeps a special secret</font>

291
00:18:43,630 --> 00:18:50,320
volume on the top of the stack and

292
00:18:46,889 --> 00:18:52,899
checks it when stack<font color="#E5E5E5"> when you go from</font>

293
00:18:50,320 --> 00:18:56,379
out of the function<font color="#E5E5E5"> and</font><font color="#CCCCCC"> you go to the</font>

294
00:18:52,899 --> 00:18:59,949
local function it checks<font color="#E5E5E5"> this value to</font>

295
00:18:56,380 --> 00:19:03,700
the talent volume<font color="#E5E5E5"> and if this doesn't</font>

296
00:18:59,950 --> 00:19:06,279
compares<font color="#E5E5E5"> this checks was failed it</font>

297
00:19:03,700 --> 00:19:10,570
called<font color="#E5E5E5"> tech check fail and application</font>

298
00:19:06,279 --> 00:19:13,929
will<font color="#CCCCCC"> be terminated</font><font color="#E5E5E5"> so what's interesting</font>

299
00:19:10,570 --> 00:19:20,460
here so one of<font color="#CCCCCC"> this free allocation was</font>

300
00:19:13,929 --> 00:19:23,470
<font color="#E5E5E5">a</font><font color="#CCCCCC"> TCB of main freed</font><font color="#E5E5E5"> and this means that</font>

301
00:19:20,460 --> 00:19:27,279
you know the location of<font color="#E5E5E5"> the</font><font color="#CCCCCC"> stack</font>

302
00:19:23,470 --> 00:19:30,850
cookie and how to get there<font color="#CCCCCC"> you just</font>

303
00:19:27,279 --> 00:19:33,880
<font color="#E5E5E5">need</font><font color="#CCCCCC"> to a map some small value to get</font>

304
00:19:30,850 --> 00:19:37,360
under<font color="#CCCCCC"> these</font><font color="#E5E5E5"> TCB and some be quality</font><font color="#CCCCCC"> go</font>

305
00:19:33,880 --> 00:19:40,269
<font color="#E5E5E5">get above this</font><font color="#CCCCCC"> TCB so once again if you</font>

306
00:19:37,360 --> 00:19:43,840
<font color="#CCCCCC">have some</font><font color="#E5E5E5"> out</font><font color="#CCCCCC"> of bounds from</font><font color="#E5E5E5"> this</font>

307
00:19:40,269 --> 00:19:45,720
mapping you<font color="#E5E5E5"> can easily for example</font><font color="#CCCCCC"> reach</font>

308
00:19:43,840 --> 00:19:49,418
state cookie

309
00:19:45,720 --> 00:19:50,900
it's one of possible<font color="#E5E5E5"> also it is possible</font>

310
00:19:49,419 --> 00:19:53,720
<font color="#CCCCCC">to change</font><font color="#E5E5E5"> other</font>

311
00:19:50,900 --> 00:19:57,110
fields of TCB<font color="#E5E5E5"> which are also interested</font>

312
00:19:53,720 --> 00:20:01,060
but not<font color="#CCCCCC"> correct</font><font color="#E5E5E5"> in this talk but you may</font>

313
00:19:57,110 --> 00:20:03,979
take a look<font color="#CCCCCC"> also</font><font color="#E5E5E5"> how to get this buffer</font>

314
00:20:01,060 --> 00:20:07,760
to get this buffer first of all you can

315
00:20:03,980 --> 00:20:12,530
use<font color="#E5E5E5"> a map of malicious file of like</font>

316
00:20:07,760 --> 00:20:15,260
<font color="#CCCCCC">already set right and second one is</font><font color="#E5E5E5"> Emma</font>

317
00:20:12,530 --> 00:20:17,660
<font color="#CCCCCC">log</font><font color="#E5E5E5"> there's a big length the know Lipsy</font>

318
00:20:15,260 --> 00:20:21,140
works when you calm alex is<font color="#E5E5E5"> a big length</font>

319
00:20:17,660 --> 00:20:26,510
it sees and things and just call a map

320
00:20:21,140 --> 00:20:28,520
<font color="#E5E5E5">without using current heap so if you</font>

321
00:20:26,510 --> 00:20:32,480
have some a map and he power flow you

322
00:20:28,520 --> 00:20:37,730
<font color="#E5E5E5">can use it to for example get ECB or get</font>

323
00:20:32,480 --> 00:20:42,400
inside the<font color="#CCCCCC"> algae and do crazy</font><font color="#E5E5E5"> stuff but</font>

324
00:20:37,730 --> 00:20:47,450
<font color="#E5E5E5">that's not all what would be if you</font>

325
00:20:42,400 --> 00:20:52,040
create a thread<font color="#CCCCCC"> and</font><font color="#E5E5E5"> we'll ask and we'll</font>

326
00:20:47,450 --> 00:20:54,710
try to<font color="#E5E5E5"> find TCB of a new Fred well new</font>

327
00:20:52,040 --> 00:20:57,610
Fred is allocated with a map<font color="#CCCCCC"> stack stack</font>

328
00:20:54,710 --> 00:21:01,670
<font color="#E5E5E5">for new threat is allocated is a map and</font>

329
00:20:57,610 --> 00:21:04,449
this new stack will<font color="#CCCCCC"> be placed near the</font>

330
00:21:01,670 --> 00:21:09,050
libraries so for example if you have

331
00:21:04,450 --> 00:21:13,940
<font color="#CCCCCC">reach out of bounds in the</font><font color="#E5E5E5"> stack in the</font>

332
00:21:09,050 --> 00:21:18,560
area of stack right you can change<font color="#E5E5E5"> some</font>

333
00:21:13,940 --> 00:21:24,230
values in the libraries<font color="#E5E5E5"> but</font><font color="#CCCCCC"> where's and</font>

334
00:21:18,560 --> 00:21:27,020
you TCB here's<font color="#E5E5E5"> a call Ofcom this is</font>

335
00:21:24,230 --> 00:21:29,410
system call that<font color="#E5E5E5"> makes a new fret inside</font>

336
00:21:27,020 --> 00:21:32,690
the application<font color="#E5E5E5"> and you may see that it</font>

337
00:21:29,410 --> 00:21:34,940
sets a child stack address<font color="#CCCCCC"> and TLS</font>

338
00:21:32,690 --> 00:21:38,960
<font color="#E5E5E5">address and you may see that there</font><font color="#CCCCCC"> is</font>

339
00:21:34,940 --> 00:21:39,710
<font color="#E5E5E5">only one thousand eighty eight bytes 888</font>

340
00:21:38,960 --> 00:21:43,910
bytes

341
00:21:39,710 --> 00:21:47,900
below the stack<font color="#E5E5E5"> it means that you can</font>

342
00:21:43,910 --> 00:21:51,520
easily<font color="#CCCCCC"> other</font><font color="#E5E5E5"> write step cookie at all on</font>

343
00:21:47,900 --> 00:21:57,500
value this<font color="#E5E5E5"> leaf for example this code</font>

344
00:21:51,520 --> 00:22:01,850
you just rewrite the real cookie with

345
00:21:57,500 --> 00:22:04,390
some<font color="#E5E5E5"> volume and you just need to rewrite</font>

346
00:22:01,850 --> 00:22:09,449
more bytes to rewrite there

347
00:22:04,390 --> 00:22:13,600
<font color="#CCCCCC">boiled egg artist altar and do the</font>

348
00:22:09,450 --> 00:22:17,830
<font color="#E5E5E5">bypassing what to say here</font>

349
00:22:13,600 --> 00:22:25,049
it was it really works<font color="#E5E5E5"> this is you see</font>

350
00:22:17,830 --> 00:22:30,449
the<font color="#E5E5E5"> work of this</font><font color="#CCCCCC"> code and it</font><font color="#E5E5E5"> has only</font><font color="#CCCCCC"> in</font>

351
00:22:25,049 --> 00:22:33,910
1966<font color="#E5E5E5"> you see how much bytes is here yes</font>

352
00:22:30,450 --> 00:22:37,179
<font color="#E5E5E5">this issue was not reported but was</font>

353
00:22:33,910 --> 00:22:40,990
<font color="#E5E5E5">found and described in the</font><font color="#CCCCCC"> Sun</font><font color="#E5E5E5"> block of</font>

354
00:22:37,179 --> 00:22:42,940
some guy<font color="#E5E5E5"> in 2013 and this link was</font>

355
00:22:40,990 --> 00:22:46,630
provided by<font color="#CCCCCC"> a red-hot security team they</font>

356
00:22:42,940 --> 00:22:49,210
said hey we<font color="#E5E5E5"> found that where was the</font>

357
00:22:46,630 --> 00:22:52,270
same issue<font color="#CCCCCC"> is it the same I said yes</font>

358
00:22:49,210 --> 00:22:56,320
that's the same and they said<font color="#CCCCCC"> okay</font><font color="#E5E5E5"> but</font>

359
00:22:52,270 --> 00:23:01,480
<font color="#E5E5E5">we need</font><font color="#CCCCCC"> a buck in the bugzilla</font><font color="#E5E5E5"> to fix it</font>

360
00:22:56,320 --> 00:23:05,559
<font color="#CCCCCC">I think this</font><font color="#E5E5E5"> one should</font><font color="#CCCCCC"> be doing</font><font color="#E5E5E5"> private</font>

361
00:23:01,480 --> 00:23:08,919
but<font color="#CCCCCC"> ok and in tow Amir was</font><font color="#E5E5E5"> hacked the</font>

362
00:23:05,559 --> 00:23:12,070
same way<font color="#CCCCCC"> here's the point</font><font color="#E5E5E5"> maybe you your</font>

363
00:23:08,919 --> 00:23:14,290
original they have<font color="#E5E5E5"> TLS on the bottom of</font>

364
00:23:12,070 --> 00:23:17,260
the stack<font color="#E5E5E5"> so that's why I think it's</font>

365
00:23:14,290 --> 00:23:20,409
somehow legacy from<font color="#CCCCCC"> MINIX maybe I don't</font>

366
00:23:17,260 --> 00:23:25,120
<font color="#E5E5E5">know but it's what we need to you know</font>

367
00:23:20,410 --> 00:23:27,600
fix<font color="#E5E5E5"> how to fix it first of all we need</font>

368
00:23:25,120 --> 00:23:30,969
<font color="#CCCCCC">to remove right access from Stuttgart</font>

369
00:23:27,600 --> 00:23:34,090
<font color="#E5E5E5">because there is no any good reason to</font>

370
00:23:30,970 --> 00:23:37,990
rewrite the<font color="#CCCCCC"> stag art right</font>

371
00:23:34,090 --> 00:23:41,080
next we<font color="#E5E5E5"> need to move staggered separate</font>

372
00:23:37,990 --> 00:23:44,559
to<font color="#E5E5E5"> the separate region somewhere</font><font color="#CCCCCC"> out of</font>

373
00:23:41,080 --> 00:23:47,860
<font color="#CCCCCC">the stack of</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> freed and this place</font>

374
00:23:44,559 --> 00:23:50,620
should<font color="#CCCCCC"> be</font><font color="#E5E5E5"> run dumb enough to doesn't</font>

375
00:23:47,860 --> 00:23:53,860
allow any attacker to get to find this

376
00:23:50,620 --> 00:23:56,530
<font color="#CCCCCC">address</font><font color="#E5E5E5"> and another one good idea to</font>

377
00:23:53,860 --> 00:23:59,559
have a new canary since we use a<font color="#CCCCCC"> fast</font>

378
00:23:56,530 --> 00:24:02,500
register for<font color="#E5E5E5"> any</font><font color="#CCCCCC"> we freed we can</font>

379
00:23:59,559 --> 00:24:05,139
generate new<font color="#E5E5E5"> canary for any</font><font color="#CCCCCC"> freed and</font>

380
00:24:02,500 --> 00:24:09,070
only Linux can do<font color="#E5E5E5"> is because for example</font>

381
00:24:05,140 --> 00:24:11,490
in<font color="#CCCCCC"> Marco six and in in the</font><font color="#E5E5E5"> windows</font><font color="#CCCCCC"> stack</font>

382
00:24:09,070 --> 00:24:13,629
<font color="#CCCCCC">gallery skipped in the static variables</font>

383
00:24:11,490 --> 00:24:17,440
<font color="#E5E5E5">so I don't know I think it's really</font>

384
00:24:13,630 --> 00:24:18,160
<font color="#CCCCCC">interesting</font><font color="#E5E5E5"> there are idea but anyway</font>

385
00:24:17,440 --> 00:24:22,080
this

386
00:24:18,160 --> 00:24:22,080
bypass techniques is your day for now

387
00:24:23,429 --> 00:24:34,419
next let's call malach from from the

388
00:24:30,760 --> 00:24:36,220
<font color="#CCCCCC">fleet we just read</font><font color="#E5E5E5"> if you call</font><font color="#CCCCCC"> malloc on</font>

389
00:24:34,419 --> 00:24:39,460
<font color="#CCCCCC">a treat you will see that a map is</font>

390
00:24:36,220 --> 00:24:43,710
called and this map<font color="#E5E5E5"> just creates a new</font>

391
00:24:39,460 --> 00:24:47,650
<font color="#CCCCCC">heap and what does</font><font color="#E5E5E5"> it mean it means</font><font color="#CCCCCC"> that</font>

392
00:24:43,710 --> 00:24:51,100
now<font color="#E5E5E5"> your hip object is very close</font><font color="#CCCCCC"> to the</font>

393
00:24:47,650 --> 00:24:56,080
stack to<font color="#CCCCCC"> the libraries and so on much</font>

394
00:24:51,100 --> 00:24:58,780
closer than original<font color="#E5E5E5"> heap so if you lick</font>

395
00:24:56,080 --> 00:25:07,449
something<font color="#E5E5E5"> you can calculate the address</font>

396
00:24:58,780 --> 00:25:10,270
<font color="#E5E5E5">of of libraries but let's see on the</font>

397
00:25:07,450 --> 00:25:13,179
some proof of concept<font color="#CCCCCC"> if we take</font><font color="#E5E5E5"> a look</font>

398
00:25:10,270 --> 00:25:15,668
on the<font color="#CCCCCC"> result of this code we will see</font>

399
00:25:13,179 --> 00:25:19,929
the difference and there's various

400
00:25:15,669 --> 00:25:22,120
<font color="#CCCCCC">different</font><font color="#E5E5E5"> goings the answer is when</font>

401
00:25:19,929 --> 00:25:25,630
<font color="#CCCCCC">Lipsy allocates a new heap</font>

402
00:25:22,120 --> 00:25:32,110
it<font color="#E5E5E5"> uses alignment it doesn't allocate</font>

403
00:25:25,630 --> 00:25:34,960
just a map and<font color="#E5E5E5"> that's all it's a map 128</font>

404
00:25:32,110 --> 00:25:39,100
megabytes and on map of the part that is

405
00:25:34,960 --> 00:25:42,270
<font color="#CCCCCC">not aligned</font><font color="#E5E5E5"> so you may see</font><font color="#CCCCCC"> that there is</font>

406
00:25:39,100 --> 00:25:47,350
possible<font color="#CCCCCC"> heaps</font><font color="#E5E5E5"> count possible hips is</font>

407
00:25:42,270 --> 00:25:49,240
has power<font color="#E5E5E5"> of 2 to 22 and if you for</font>

408
00:25:47,350 --> 00:25:51,580
example tries to do it from<font color="#E5E5E5"> the</font>

409
00:25:49,240 --> 00:25:54,690
application beginning<font color="#E5E5E5"> just from the</font>

410
00:25:51,580 --> 00:25:57,280
<font color="#CCCCCC">beginning just</font><font color="#E5E5E5"> call</font><font color="#CCCCCC"> be</font><font color="#E5E5E5"> freed cred</font><font color="#CCCCCC"> and</font>

411
00:25:54,690 --> 00:26:02,380
inside the period<font color="#CCCCCC"> craft you call malloc</font>

412
00:25:57,280 --> 00:26:06,399
<font color="#E5E5E5">you will see that only 2 in 14 entropy</font>

413
00:26:02,380 --> 00:26:10,030
here and it's very easily to Gus<font color="#E5E5E5"> it's a</font>

414
00:26:06,400 --> 00:26:12,039
really small volume when ourselves

415
00:26:10,030 --> 00:26:14,590
that's not owner ability

416
00:26:12,039 --> 00:26:21,490
<font color="#E5E5E5">it's a algorithm</font><font color="#CCCCCC"> constraint how malloc</font>

417
00:26:14,590 --> 00:26:25,330
works so and disagree<font color="#CCCCCC"> with them I used</font>

418
00:26:21,490 --> 00:26:29,590
this simple Python code to get some

419
00:26:25,330 --> 00:26:33,580
<font color="#CCCCCC">mr. gramo</font><font color="#E5E5E5"> off of this wall use it just</font>

420
00:26:29,590 --> 00:26:37,449
runs my secret and just remembers<font color="#CCCCCC"> the</font>

421
00:26:33,580 --> 00:26:40,510
<font color="#E5E5E5">addresses it returns and here's here's</font>

422
00:26:37,450 --> 00:26:44,730
<font color="#CCCCCC">the small code just</font><font color="#E5E5E5"> melaka and print and</font>

423
00:26:40,510 --> 00:26:50,470
you may see that<font color="#CCCCCC"> Polk makes this result</font>

424
00:26:44,730 --> 00:26:58,210
<font color="#CCCCCC">is just proof of concept so next</font>

425
00:26:50,470 --> 00:27:01,210
interesting<font color="#E5E5E5"> thing one of interesting</font>

426
00:26:58,210 --> 00:27:03,610
flux of a map is map fixed this flux

427
00:27:01,210 --> 00:27:06,210
<font color="#E5E5E5">allow you to fix the address</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> you</font>

428
00:27:03,610 --> 00:27:09,189
request<font color="#E5E5E5"> for example if you need to a map</font>

429
00:27:06,210 --> 00:27:13,690
to allocate memory in the exact address

430
00:27:09,190 --> 00:27:17,380
<font color="#E5E5E5">and there is in manual there is some</font>

431
00:27:13,690 --> 00:27:20,710
point<font color="#E5E5E5"> that if you have existing</font><font color="#CCCCCC"> mapping</font>

432
00:27:17,380 --> 00:27:23,590
there<font color="#CCCCCC"> it would be discarded</font><font color="#E5E5E5"> the problem</font>

433
00:27:20,710 --> 00:27:30,100
of it if you have some primitive that

434
00:27:23,590 --> 00:27:30,760
can be a map memory<font color="#CCCCCC"> you can do whatever</font>

435
00:27:30,100 --> 00:27:33,250
you want

436
00:27:30,760 --> 00:27:37,780
honestly<font color="#E5E5E5"> and this problem</font><font color="#CCCCCC"> discuss</font>

437
00:27:33,250 --> 00:27:42,130
<font color="#E5E5E5">already on the</font><font color="#CCCCCC"> LVM net articles but this</font>

438
00:27:37,780 --> 00:27:46,810
different example<font color="#CCCCCC"> I found</font><font color="#E5E5E5"> another</font>

439
00:27:42,130 --> 00:27:48,480
interesting example honestly so here's a

440
00:27:46,810 --> 00:27:52,210
[Music]

441
00:27:48,480 --> 00:27:55,870
<font color="#CCCCCC">and this</font><font color="#E5E5E5"> is description from</font><font color="#CCCCCC"> the elf</font>

442
00:27:52,210 --> 00:27:59,920
specific file<font color="#E5E5E5"> and you</font><font color="#CCCCCC"> might see there is</font>

443
00:27:55,870 --> 00:28:03,429
a description<font color="#E5E5E5"> of elf</font><font color="#CCCCCC"> segment and the</font>

444
00:27:59,920 --> 00:28:09,460
rest point that they should be sorted on

445
00:28:03,430 --> 00:28:13,590
the<font color="#E5E5E5"> PV</font><font color="#CCCCCC"> add row but not here no not read</font>

446
00:28:09,460 --> 00:28:17,320
GL<font color="#CCCCCC"> tech</font><font color="#E5E5E5"> this at all this means we can</font>

447
00:28:13,590 --> 00:28:23,730
make different order and let's see what

448
00:28:17,320 --> 00:28:23,730
happens<font color="#CCCCCC"> I have some demonstration</font>

449
00:28:28,260 --> 00:28:38,290
here is I used special<font color="#CCCCCC"> and an</font><font color="#E5E5E5"> exploit</font>

450
00:28:33,460 --> 00:28:42,700
for<font color="#CCCCCC"> LGD utility that is used</font><font color="#E5E5E5"> to show the</font>

451
00:28:38,290 --> 00:28:45,930
libraries<font color="#E5E5E5"> of some</font><font color="#CCCCCC"> Binnorie and also I</font>

452
00:28:42,700 --> 00:28:49,480
have some fun<font color="#CCCCCC"> if rather</font><font color="#E5E5E5"> to framework</font>

453
00:28:45,930 --> 00:28:52,510
this one is how it works in just example

454
00:28:49,480 --> 00:28:58,540
how it usually works<font color="#E5E5E5"> and now I prepare</font>

455
00:28:52,510 --> 00:29:04,830
my exploit you can see then inside the

456
00:28:58,540 --> 00:29:08,139
LGG<font color="#E5E5E5"> I executed my</font><font color="#CCCCCC"> katya tcp passivity</font>

457
00:29:04,830 --> 00:29:17,879
<font color="#CCCCCC">and also i crushed</font>

458
00:29:08,140 --> 00:29:17,880
<font color="#CCCCCC">reiben agility i think you love it</font>

459
00:29:21,660 --> 00:29:27,040
yes thank him<font color="#E5E5E5"> this</font><font color="#CCCCCC"> this slice</font>

460
00:29:25,210 --> 00:29:30,160
demonstrate the same way<font color="#E5E5E5"> I made it</font>

461
00:29:27,040 --> 00:29:34,659
<font color="#CCCCCC">before I use exploit</font><font color="#E5E5E5"> how does it works</font>

462
00:29:30,160 --> 00:29:38,080
it<font color="#CCCCCC"> has only three</font><font color="#E5E5E5"> segments one is the</font>

463
00:29:34,660 --> 00:29:44,950
headers<font color="#CCCCCC"> read/write doesn't matter</font><font color="#E5E5E5"> second</font>

464
00:29:38,080 --> 00:29:48,850
has some of first and third and third is

465
00:29:44,950 --> 00:29:51,580
just another one segment<font color="#E5E5E5"> just padding</font><font color="#CCCCCC"> so</font>

466
00:29:48,850 --> 00:29:57,730
how do<font color="#E5E5E5"> Linux kernel and new</font><font color="#CCCCCC"> Lipsy</font>

467
00:29:51,580 --> 00:29:59,860
computes how<font color="#CCCCCC"> do they lost anything</font><font color="#E5E5E5"> first</font>

468
00:29:57,730 --> 00:30:02,680
<font color="#E5E5E5">of all they compute total size of elf</font>

469
00:29:59,860 --> 00:30:05,800
file<font color="#CCCCCC"> because they no need to know it</font>

470
00:30:02,680 --> 00:30:09,790
because<font color="#CCCCCC"> they want to allocate enough</font>

471
00:30:05,800 --> 00:30:13,720
memory they do it only<font color="#CCCCCC"> this counting</font>

472
00:30:09,790 --> 00:30:17,790
<font color="#E5E5E5">first and last segment so here's an</font>

473
00:30:13,720 --> 00:30:20,950
error<font color="#E5E5E5"> they just take last segment</font><font color="#CCCCCC"> Minos</font>

474
00:30:17,790 --> 00:30:25,080
first segment<font color="#CCCCCC"> and that's how they</font>

475
00:30:20,950 --> 00:30:29,350
compute the total<font color="#CCCCCC"> site total size and</font>

476
00:30:25,080 --> 00:30:32,679
here<font color="#E5E5E5"> I just remap with a third segment I</font>

477
00:30:29,350 --> 00:30:36,639
just remap the<font color="#CCCCCC"> Lipsy that comes</font><font color="#E5E5E5"> just</font>

478
00:30:32,680 --> 00:30:40,120
after my lip elf<font color="#E5E5E5"> so here you may see</font><font color="#CCCCCC"> lip</font>

479
00:30:36,640 --> 00:30:42,400
<font color="#CCCCCC">see and lip pedal so I</font><font color="#E5E5E5"> just read my lip</font>

480
00:30:40,120 --> 00:30:45,668
evil I just rewrite with<font color="#E5E5E5"> ellipses quad</font>

481
00:30:42,400 --> 00:30:48,159
<font color="#E5E5E5">and since a map function is inside the</font>

482
00:30:45,669 --> 00:30:50,950
<font color="#CCCCCC">ellipse ECOT it will write and when it</font>

483
00:30:48,159 --> 00:30:57,190
go back from system call it just started

484
00:30:50,950 --> 00:31:01,539
to<font color="#CCCCCC"> execute another code so well</font><font color="#E5E5E5"> I don't</font>

485
00:30:57,190 --> 00:31:04,029
know when<font color="#CCCCCC"> you'll about LDD in in the</font>

486
00:31:01,539 --> 00:31:07,510
manual<font color="#E5E5E5"> about OGD to</font><font color="#CCCCCC"> set</font><font color="#E5E5E5"> that sometimes</font>

487
00:31:04,029 --> 00:31:09,640
<font color="#E5E5E5">of the</font><font color="#CCCCCC"> G makes acute code but that</font>

488
00:31:07,510 --> 00:31:14,590
that's<font color="#E5E5E5"> why you don't shouldn't use it in</font>

489
00:31:09,640 --> 00:31:17,080
the malicious files<font color="#E5E5E5"> but you know there's</font>

490
00:31:14,590 --> 00:31:19,779
some difference between<font color="#E5E5E5"> might execute</font>

491
00:31:17,080 --> 00:31:20,350
code and will guarantee execute code

492
00:31:19,779 --> 00:31:26,590
right

493
00:31:20,350 --> 00:31:31,029
but anyway<font color="#E5E5E5"> community thinks this is not</font>

494
00:31:26,590 --> 00:31:34,199
a security<font color="#E5E5E5"> issue just try to send my</font>

495
00:31:31,029 --> 00:31:38,260
exploit to your friend and ask hey man

496
00:31:34,200 --> 00:31:40,480
how many libraries<font color="#E5E5E5"> need to be for this</font>

497
00:31:38,260 --> 00:31:44,129
code for<font color="#E5E5E5"> example</font><font color="#CCCCCC"> fall for this elf</font>

498
00:31:40,480 --> 00:31:45,809
he will type LGD and have some kind of

499
00:31:44,130 --> 00:31:52,000
exploitation

500
00:31:45,809 --> 00:31:55,330
it's like<font color="#CCCCCC"> XSS for binaries ok what's</font><font color="#E5E5E5"> the</font>

501
00:31:52,000 --> 00:31:58,360
impact<font color="#E5E5E5"> and the</font><font color="#CCCCCC"> impact for it is</font><font color="#E5E5E5"> copy</font>

502
00:31:55,330 --> 00:32:02,889
pasted code<font color="#E5E5E5"> why copy pasted code because</font>

503
00:31:58,360 --> 00:32:07,059
you<font color="#CCCCCC"> know radar because LGD lib</font><font color="#E5E5E5"> you know</font>

504
00:32:02,890 --> 00:32:09,240
Lipsy<font color="#E5E5E5"> LD and because Linux kernel has</font>

505
00:32:07,059 --> 00:32:12,039
the same<font color="#E5E5E5"> thing they didn't care</font><font color="#CCCCCC"> about</font>

506
00:32:09,240 --> 00:32:14,590
periodic so I think<font color="#E5E5E5"> you may find</font><font color="#CCCCCC"> much</font>

507
00:32:12,039 --> 00:32:16,720
more projects that do the<font color="#CCCCCC"> same loading</font>

508
00:32:14,590 --> 00:32:19,840
<font color="#E5E5E5">and especially in some different</font>

509
00:32:16,720 --> 00:32:23,409
<font color="#E5E5E5">Association and intimidation tricks you</font>

510
00:32:19,840 --> 00:32:25,299
may use this approach another one thing

511
00:32:23,409 --> 00:32:28,390
and being<font color="#E5E5E5"> real</font><font color="#CCCCCC"> analysis tools like red</font>

512
00:32:25,299 --> 00:32:32,200
bean<font color="#CCCCCC"> and</font><font color="#E5E5E5"> rather just crushed</font><font color="#CCCCCC"> maybe some</font>

513
00:32:28,390 --> 00:32:37,539
online tools works the same I never

514
00:32:32,200 --> 00:32:41,970
<font color="#CCCCCC">tested but let's go next next thing what</font>

515
00:32:37,539 --> 00:32:45,490
I found was a memory cache<font color="#E5E5E5"> well</font><font color="#CCCCCC"> if she</font>

516
00:32:41,970 --> 00:32:48,340
<font color="#CCCCCC">keeps cache of the stacks</font><font color="#E5E5E5"> it allocates</font>

517
00:32:45,490 --> 00:32:52,419
<font color="#CCCCCC">and the fridge</font><font color="#E5E5E5"> and the heap it allocates</font>

518
00:32:48,340 --> 00:32:53,740
so each time<font color="#E5E5E5"> you</font><font color="#CCCCCC"> call be freed great it</font>

519
00:32:52,419 --> 00:32:57,190
first checks

520
00:32:53,740 --> 00:33:00,220
<font color="#E5E5E5">there is a stack</font><font color="#CCCCCC"> cashed in the list</font><font color="#E5E5E5"> and</font>

521
00:32:57,190 --> 00:33:03,580
if<font color="#E5E5E5"> so it will return</font><font color="#CCCCCC"> this address the</font>

522
00:33:00,220 --> 00:33:05,650
same for the<font color="#E5E5E5"> malach from the</font><font color="#CCCCCC"> freed</font><font color="#E5E5E5"> what</font>

523
00:33:03,580 --> 00:33:09,330
does it mean it means then if you leak

524
00:33:05,650 --> 00:33:12,730
some it only<font color="#CCCCCC"> wants</font><font color="#E5E5E5"> you have a good</font>

525
00:33:09,330 --> 00:33:15,010
<font color="#E5E5E5">chance to take it for the another treat</font>

526
00:33:12,730 --> 00:33:18,040
so if<font color="#E5E5E5"> even if free it is finished and</font>

527
00:33:15,010 --> 00:33:20,740
<font color="#E5E5E5">you have leakage</font><font color="#CCCCCC"> you can use this</font>

528
00:33:18,040 --> 00:33:23,710
address later<font color="#E5E5E5"> it's easily</font><font color="#CCCCCC"> by</font><font color="#E5E5E5"> pacifiers</font>

529
00:33:20,740 --> 00:33:27,130
<font color="#CCCCCC">where and</font><font color="#E5E5E5"> also</font><font color="#CCCCCC"> initialized volume</font><font color="#E5E5E5"> here's</font>

530
00:33:23,710 --> 00:33:29,950
a code<font color="#E5E5E5"> they just do this proof of</font>

531
00:33:27,130 --> 00:33:33,160
concept<font color="#CCCCCC"> it</font><font color="#E5E5E5"> Duma lock it set some value</font>

532
00:33:29,950 --> 00:33:36,610
it<font color="#CCCCCC"> prints everything and it sets</font><font color="#E5E5E5"> only if</font>

533
00:33:33,160 --> 00:33:39,070
its first time<font color="#E5E5E5"> executed</font><font color="#CCCCCC"> as you can see</font>

534
00:33:36,610 --> 00:33:42,669
the same values<font color="#E5E5E5"> absolutely there is no a</font>

535
00:33:39,070 --> 00:33:46,720
map<font color="#E5E5E5"> code between this and here's the</font>

536
00:33:42,670 --> 00:33:49,740
response<font color="#E5E5E5"> of security team ISIL</font><font color="#CCCCCC"> our is</font>

537
00:33:46,720 --> 00:33:57,460
<font color="#E5E5E5">the post exploitation mitigation measure</font>

538
00:33:49,740 --> 00:34:01,090
honestly I didn't know so next is such a

539
00:33:57,460 --> 00:34:04,120
space layout randomization<font color="#CCCCCC"> as we already</font>

540
00:34:01,090 --> 00:34:06,490
<font color="#E5E5E5">said it is</font><font color="#CCCCCC"> easily to build the same</font>

541
00:34:04,120 --> 00:34:09,969
order of libraries it is easily<font color="#E5E5E5"> to</font>

542
00:34:06,490 --> 00:34:13,359
repeat the<font color="#CCCCCC"> algorithm of how Linux kernel</font>

543
00:34:09,969 --> 00:34:15,850
chooses the address so I did the<font color="#E5E5E5"> same I</font>

544
00:34:13,359 --> 00:34:20,080
just<font color="#E5E5E5"> implemented some small Python</font>

545
00:34:15,850 --> 00:34:24,429
<font color="#E5E5E5">script who chooses</font><font color="#CCCCCC"> the MUX suitable size</font>

546
00:34:20,080 --> 00:34:27,029
and parses load libraries and do the

547
00:34:24,429 --> 00:34:30,609
same layout<font color="#E5E5E5"> before we go to the main and</font>

548
00:34:27,030 --> 00:34:32,710
also we can<font color="#E5E5E5"> go deeper and for example</font><font color="#CCCCCC"> if</font>

549
00:34:30,609 --> 00:34:35,918
we use<font color="#E5E5E5"> a</font><font color="#CCCCCC"> stray suitability to</font><font color="#E5E5E5"> analyze</font>

550
00:34:32,710 --> 00:34:38,350
<font color="#E5E5E5">some binary and we will see</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> and if</font>

551
00:34:35,918 --> 00:34:42,100
we see<font color="#E5E5E5"> that from the beginning program</font>

552
00:34:38,350 --> 00:34:47,319
makes some<font color="#CCCCCC"> M maps</font><font color="#E5E5E5"> we can also</font><font color="#CCCCCC"> add there</font>

553
00:34:42,100 --> 00:34:51,219
and when<font color="#E5E5E5"> we get some leakage or we have</font>

554
00:34:47,320 --> 00:34:54,490
read<font color="#E5E5E5"> right out of bands bounds we just</font>

555
00:34:51,219 --> 00:34:57,399
easily adjust this information<font color="#CCCCCC"> fix-up</font><font color="#E5E5E5"> it</font>

556
00:34:54,489 --> 00:35:01,149
this information in our layout and get

557
00:34:57,400 --> 00:35:03,880
the wall layout<font color="#CCCCCC"> I have I will push it</font><font color="#E5E5E5"> to</font>

558
00:35:01,150 --> 00:35:06,270
my github and everyone come<font color="#CCCCCC"> you could</font>

559
00:35:03,880 --> 00:35:06,270
use it

560
00:35:06,630 --> 00:35:15,570
so right<font color="#E5E5E5"> right now I</font><font color="#CCCCCC"> think it's</font><font color="#E5E5E5"> time to</font>

561
00:35:09,850 --> 00:35:19,509
<font color="#CCCCCC">patch we</font><font color="#E5E5E5"> already discussed the holes and</font>

562
00:35:15,570 --> 00:35:22,210
how to patch the<font color="#E5E5E5"> holes quite easy</font><font color="#CCCCCC"> we</font>

563
00:35:19,510 --> 00:35:25,960
just<font color="#CCCCCC"> need to call protein on there</font>

564
00:35:22,210 --> 00:35:29,950
I already submit a patch<font color="#CCCCCC"> a few</font><font color="#E5E5E5"> months</font>

565
00:35:25,960 --> 00:35:34,180
ago but<font color="#E5E5E5"> never seen it</font><font color="#CCCCCC"> I hope right now</font>

566
00:35:29,950 --> 00:35:37,390
it will take<font color="#E5E5E5"> more attention next one is</font>

567
00:35:34,180 --> 00:35:44,980
a<font color="#E5E5E5"> check in order</font><font color="#CCCCCC"> in this elf segments</font>

568
00:35:37,390 --> 00:35:47,950
and terminate if it fails and I really

569
00:35:44,980 --> 00:35:50,740
provide I am going to provide<font color="#E5E5E5"> a patch</font>

570
00:35:47,950 --> 00:35:57,040
for a map choosing<font color="#E5E5E5"> address I'm going to</font>

571
00:35:50,740 --> 00:35:59,620
make it random<font color="#E5E5E5"> so to do so first of all</font>

572
00:35:57,040 --> 00:36:01,720
we need<font color="#CCCCCC"> to</font><font color="#E5E5E5"> make some</font><font color="#CCCCCC"> lists of gaps</font>

573
00:35:59,620 --> 00:36:04,210
<font color="#E5E5E5">because</font><font color="#CCCCCC"> right now there is no</font>

574
00:36:01,720 --> 00:36:06,810
information about<font color="#CCCCCC"> the gaps just take the</font>

575
00:36:04,210 --> 00:36:10,330
<font color="#E5E5E5">only ultimate red black tree that is not</font>

576
00:36:06,810 --> 00:36:13,810
<font color="#E5E5E5">suitable for it to do so</font><font color="#CCCCCC"> we need</font><font color="#E5E5E5"> to keep</font>

577
00:36:10,330 --> 00:36:17,819
<font color="#CCCCCC">somewhere</font><font color="#E5E5E5"> head</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> don't this and don't</font>

578
00:36:13,810 --> 00:36:19,360
spend a lot<font color="#CCCCCC"> of</font><font color="#E5E5E5"> canal time I just made</font>

579
00:36:17,820 --> 00:36:23,740
<font color="#E5E5E5">random choice</font>

580
00:36:19,360 --> 00:36:27,940
I used a current algorithm<font color="#CCCCCC"> to get the</font>

581
00:36:23,740 --> 00:36:30,040
<font color="#CCCCCC">mark suitable address and I'm</font><font color="#E5E5E5"> starting</font>

582
00:36:27,940 --> 00:36:33,960
to walk the tree from the<font color="#E5E5E5"> lowest</font><font color="#CCCCCC"> address</font>

583
00:36:30,040 --> 00:36:37,320
and randomly<font color="#E5E5E5"> choose suitable regions and</font>

584
00:36:33,960 --> 00:36:40,900
that's how I to choose a really<font color="#E5E5E5"> random</font>

585
00:36:37,320 --> 00:36:46,090
region and take some<font color="#CCCCCC"> page in in this</font>

586
00:36:40,900 --> 00:36:50,140
region very simple honestly I've<font color="#CCCCCC"> tested</font>

587
00:36:46,090 --> 00:36:52,480
this patch on the current - boom -<font color="#E5E5E5"> and I</font>

588
00:36:50,140 --> 00:36:54,240
really like it<font color="#CCCCCC"> because libraries</font><font color="#E5E5E5"> are far</font>

589
00:36:52,480 --> 00:36:57,640
<font color="#E5E5E5">hard to predict</font>

590
00:36:54,240 --> 00:37:02,709
TCB<font color="#CCCCCC"> sounder outside the</font><font color="#E5E5E5"> scope</font><font color="#CCCCCC"> you will</font>

591
00:36:57,640 --> 00:37:07,240
never find it<font color="#CCCCCC"> and system works fine I'm</font>

592
00:37:02,710 --> 00:37:12,310
even tried different browsers<font color="#CCCCCC"> I</font><font color="#E5E5E5"> watch</font>

593
00:37:07,240 --> 00:37:15,189
YouTube<font color="#E5E5E5"> it's works so can you feel the</font>

594
00:37:12,310 --> 00:37:17,819
<font color="#CCCCCC">difference</font><font color="#E5E5E5"> on</font><font color="#CCCCCC"> these pictures</font><font color="#E5E5E5"> first</font>

595
00:37:15,190 --> 00:37:22,199
before<font color="#CCCCCC"> it is currently doing</font>

596
00:37:17,819 --> 00:37:25,019
and after is a new one<font color="#CCCCCC"> of course</font><font color="#E5E5E5"> the</font>

597
00:37:22,199 --> 00:37:28,920
ideal case how<font color="#E5E5E5"> to fix this issue would</font>

598
00:37:25,019 --> 00:37:32,008
<font color="#E5E5E5">be</font><font color="#CCCCCC"> to take a</font><font color="#E5E5E5"> look on each different type</font>

599
00:37:28,920 --> 00:37:34,589
<font color="#CCCCCC">of</font><font color="#E5E5E5"> segment for example you have a freed</font>

600
00:37:32,009 --> 00:37:37,589
you have a fridge stack<font color="#E5E5E5"> so you need to</font>

601
00:37:34,589 --> 00:37:39,930
have some separate regions for that and

602
00:37:37,589 --> 00:37:42,690
you have libraries you have some

603
00:37:39,930 --> 00:37:44,669
<font color="#E5E5E5">different separate regions for libraries</font>

604
00:37:42,690 --> 00:37:47,729
and<font color="#E5E5E5"> so on</font><font color="#CCCCCC"> but</font><font color="#E5E5E5"> I think</font><font color="#CCCCCC"> it's complicated</font>

605
00:37:44,670 --> 00:37:52,739
<font color="#CCCCCC">and maybe someday we will see this</font>

606
00:37:47,729 --> 00:37:55,459
approach so what's the limitations right

607
00:37:52,739 --> 00:37:59,099
now the limitation is it works only if

608
00:37:55,459 --> 00:38:01,709
64-bit architecture because in 32-bit

609
00:37:59,099 --> 00:38:04,890
architectures<font color="#E5E5E5"> there is no sound much</font>

610
00:38:01,709 --> 00:38:11,459
<font color="#CCCCCC">virtual memory</font><font color="#E5E5E5"> but I think it could be</font>

611
00:38:04,890 --> 00:38:14,160
<font color="#E5E5E5">done just decreasing the entropy and of</font>

612
00:38:11,459 --> 00:38:16,499
course I've added some overhead<font color="#E5E5E5"> to the</font>

613
00:38:14,160 --> 00:38:20,249
<font color="#E5E5E5">because in worst case I will need to</font>

614
00:38:16,499 --> 00:38:26,430
visit wall tree from the one list<font color="#E5E5E5"> to</font>

615
00:38:20,249 --> 00:38:28,859
another but<font color="#CCCCCC"> it's security right yeah and</font>

616
00:38:26,430 --> 00:38:33,118
before<font color="#CCCCCC"> I finished I found in one more</font>

617
00:38:28,859 --> 00:38:37,140
back in line external it's quite simple

618
00:38:33,119 --> 00:38:41,069
but anyway so when I<font color="#E5E5E5"> just first executed</font>

619
00:38:37,140 --> 00:38:44,400
it application will cross<font color="#E5E5E5"> randomly and</font>

620
00:38:41,069 --> 00:38:50,279
it was with<font color="#E5E5E5"> the reason of</font><font color="#CCCCCC"> EI</font><font color="#E5E5E5"> p.m. like</font>

621
00:38:44,400 --> 00:38:54,660
<font color="#E5E5E5">no permissions and this</font><font color="#CCCCCC"> reason</font><font color="#E5E5E5"> usually</font>

622
00:38:50,279 --> 00:38:57,690
<font color="#E5E5E5">happens when you try to a map file that</font>

623
00:38:54,660 --> 00:39:02,449
you don't have access<font color="#CCCCCC"> to</font><font color="#E5E5E5"> but in my</font><font color="#CCCCCC"> case</font>

624
00:38:57,690 --> 00:39:07,319
I got<font color="#E5E5E5"> this error even in inside</font><font color="#CCCCCC"> they</font>

625
00:39:02,449 --> 00:39:09,630
inside the Linux kernel allocations<font color="#CCCCCC"> so</font>

626
00:39:07,319 --> 00:39:12,058
the reason was about a map min address

627
00:39:09,630 --> 00:39:14,069
<font color="#E5E5E5">this is a variable system configuration</font>

628
00:39:12,059 --> 00:39:17,940
variable you can change it as

629
00:39:14,069 --> 00:39:21,989
administrator from system control and it

630
00:39:17,940 --> 00:39:25,469
do the following<font color="#E5E5E5"> it have some hook that</font>

631
00:39:21,989 --> 00:39:29,430
checks on any<font color="#CCCCCC"> a map request</font><font color="#E5E5E5"> it checks</font>

632
00:39:25,469 --> 00:39:30,860
<font color="#E5E5E5">that you cannot allocate less than this</font>

633
00:39:29,430 --> 00:39:33,330
value

634
00:39:30,860 --> 00:39:38,700
because it's prohibited<font color="#CCCCCC"> by the system</font>

635
00:39:33,330 --> 00:39:40,620
<font color="#CCCCCC">the error</font><font color="#E5E5E5"> was because Linux kernel when</font>

636
00:39:38,700 --> 00:39:44,310
trying to<font color="#CCCCCC"> call him the function of</font>

637
00:39:40,620 --> 00:39:47,400
searching address it was doesn't use

638
00:39:44,310 --> 00:39:49,140
this<font color="#E5E5E5"> variable and use just hard coded</font>

639
00:39:47,400 --> 00:39:53,610
<font color="#E5E5E5">will you okay</font>

640
00:39:49,140 --> 00:39:56,819
like page size only<font color="#E5E5E5"> so the reason if</font><font color="#CCCCCC"> we</font>

641
00:39:53,610 --> 00:40:01,230
choose<font color="#E5E5E5"> a boy or less this others</font><font color="#CCCCCC"> a map</font>

642
00:39:56,820 --> 00:40:04,410
<font color="#CCCCCC">min address when we get permissions fail</font>

643
00:40:01,230 --> 00:40:06,780
and interesting<font color="#CCCCCC"> volley about interesting</font>

644
00:40:04,410 --> 00:40:10,740
<font color="#E5E5E5">question</font><font color="#CCCCCC"> about it what happens is this</font>

645
00:40:06,780 --> 00:40:13,890
<font color="#E5E5E5">will you will changing of this</font><font color="#CCCCCC"> wall you</font>

646
00:40:10,740 --> 00:40:15,540
will<font color="#E5E5E5"> raise a function that chooses the</font>

647
00:40:13,890 --> 00:40:19,080
address<font color="#E5E5E5"> because</font><font color="#CCCCCC"> it's two different</font>

648
00:40:15,540 --> 00:40:22,200
functions<font color="#CCCCCC"> like one at one</font><font color="#E5E5E5"> time you</font>

649
00:40:19,080 --> 00:40:25,170
trying<font color="#E5E5E5"> to find a suitable address in two</font>

650
00:40:22,200 --> 00:40:28,649
<font color="#E5E5E5">borders like less is</font><font color="#CCCCCC"> a map mean other</font>

651
00:40:25,170 --> 00:40:31,350
skies in my base<font color="#CCCCCC"> we</font><font color="#E5E5E5"> trying to find and</font>

652
00:40:28,650 --> 00:40:34,020
at the same time<font color="#E5E5E5"> system administrator</font>

653
00:40:31,350 --> 00:40:37,140
changes this volume to<font color="#E5E5E5"> some higher and</font>

654
00:40:34,020 --> 00:40:40,259
you choose this and you get a perm<font color="#CCCCCC"> for</font>

655
00:40:37,140 --> 00:40:43,259
<font color="#CCCCCC">because when you go out of</font><font color="#E5E5E5"> the function</font>

656
00:40:40,260 --> 00:40:45,300
<font color="#CCCCCC">that</font><font color="#E5E5E5"> checks that that chooses address</font>

657
00:40:43,260 --> 00:40:47,850
<font color="#E5E5E5">you go to the check</font><font color="#CCCCCC"> that checks</font><font color="#E5E5E5"> that</font>

658
00:40:45,300 --> 00:40:50,960
this<font color="#E5E5E5"> value less</font><font color="#CCCCCC"> than a map me in volume</font>

659
00:40:47,850 --> 00:40:54,500
and it fails<font color="#E5E5E5"> and you get</font><font color="#CCCCCC"> here p.m.</font><font color="#E5E5E5"> and</font>

660
00:40:50,960 --> 00:41:01,010
nobody will handle it<font color="#CCCCCC"> ever so there's</font>

661
00:40:54,500 --> 00:41:04,080
another one those denying of service

662
00:41:01,010 --> 00:41:07,550
<font color="#E5E5E5">nectar if you for example can somehow</font>

663
00:41:04,080 --> 00:41:11,460
set this variable to<font color="#CCCCCC"> the very big value</font>

664
00:41:07,550 --> 00:41:16,910
<font color="#E5E5E5">any request will happens</font><font color="#CCCCCC"> via via peer</font>

665
00:41:11,460 --> 00:41:21,150
and nobody will come confound it easily

666
00:41:16,910 --> 00:41:25,290
<font color="#E5E5E5">because he appear is going only only</font><font color="#CCCCCC"> off</font>

667
00:41:21,150 --> 00:41:30,450
of control restrictions<font color="#E5E5E5"> so this is a</font>

668
00:41:25,290 --> 00:41:33,060
<font color="#E5E5E5">question about how how you I don't know</font>

669
00:41:30,450 --> 00:41:36,149
how I'm up is designed to<font color="#E5E5E5"> maybe how this</font>

670
00:41:33,060 --> 00:41:40,200
hooks designed as I think<font color="#E5E5E5"> we need to do</font>

671
00:41:36,150 --> 00:41:42,030
they need<font color="#E5E5E5"> to change how they find the</font>

672
00:41:40,200 --> 00:41:43,240
address and they need to take account

673
00:41:42,030 --> 00:41:49,720
this volume

674
00:41:43,240 --> 00:41:56,709
so here's my conclusion<font color="#CCCCCC"> I described an</font>

675
00:41:49,720 --> 00:42:05,799
implementation I found I found many

676
00:41:56,710 --> 00:42:08,710
<font color="#E5E5E5">things sorry</font><font color="#CCCCCC"> I found hip alignment</font>

677
00:42:05,800 --> 00:42:14,530
I found stack and freed caches<font color="#CCCCCC"> I</font>

678
00:42:08,710 --> 00:42:17,050
reported<font color="#E5E5E5"> it to</font><font color="#CCCCCC"> the vendor also today I</font>

679
00:42:14,530 --> 00:42:20,230
said about problem of<font color="#CCCCCC"> close</font>

680
00:42:17,050 --> 00:42:23,980
memory regions so if member registers

681
00:42:20,230 --> 00:42:28,380
<font color="#CCCCCC">closed and this is a</font><font color="#E5E5E5"> problem and I'm not</font>

682
00:42:23,980 --> 00:42:34,720
<font color="#CCCCCC">first but nobody nobody cares I think</font>

683
00:42:28,380 --> 00:42:39,460
also<font color="#E5E5E5"> today I showed how the D was hacked</font>

684
00:42:34,720 --> 00:42:42,549
<font color="#E5E5E5">and how how to bypass</font><font color="#CCCCCC"> the guard</font><font color="#E5E5E5"> and I</font>

685
00:42:39,460 --> 00:42:45,430
made utility for<font color="#E5E5E5"> bypassing a seller and</font>

686
00:42:42,550 --> 00:42:49,839
I patched a kernel<font color="#CCCCCC"> I will submit my</font>

687
00:42:45,430 --> 00:42:53,529
<font color="#E5E5E5">patches very soon</font><font color="#CCCCCC"> I</font><font color="#E5E5E5"> already sent this</font>

688
00:42:49,839 --> 00:42:56,940
box - GLIP<font color="#CCCCCC"> C</font><font color="#E5E5E5"> tracker you may take a</font><font color="#CCCCCC"> look</font>

689
00:42:53,530 --> 00:43:01,059
there<font color="#E5E5E5"> what else</font>

690
00:42:56,940 --> 00:43:03,609
<font color="#E5E5E5">yeah what's next well the approach</font><font color="#CCCCCC"> I'm</font>

691
00:43:01,059 --> 00:43:06,520
<font color="#CCCCCC">eight I just take a look what</font><font color="#E5E5E5"> happens on</font>

692
00:43:03,609 --> 00:43:08,259
the process from<font color="#E5E5E5"> the beginning and the</font>

693
00:43:06,520 --> 00:43:10,480
same thing could<font color="#CCCCCC"> be done with the</font>

694
00:43:08,260 --> 00:43:12,450
Microsoft<font color="#CCCCCC"> Windows and</font><font color="#E5E5E5"> Mac</font><font color="#CCCCCC"> o six because</font>

695
00:43:10,480 --> 00:43:16,589
I'm sure they have very interesting

696
00:43:12,450 --> 00:43:22,299
<font color="#E5E5E5">variables also for example</font><font color="#CCCCCC"> in</font><font color="#E5E5E5"> macro</font><font color="#CCCCCC"> six</font>

697
00:43:16,589 --> 00:43:29,049
<font color="#E5E5E5">when it loads much binary it have</font>

698
00:43:22,299 --> 00:43:32,380
different regions<font color="#CCCCCC"> for area and</font><font color="#E5E5E5"> different</font>

699
00:43:29,049 --> 00:43:36,990
regions<font color="#CCCCCC"> for</font><font color="#E5E5E5"> text I mean for code and for</font>

700
00:43:32,380 --> 00:43:40,390
data but<font color="#E5E5E5"> these regions are clue to other</font>

701
00:43:36,990 --> 00:43:44,290
<font color="#CCCCCC">binaries for example if you call them up</font>

702
00:43:40,390 --> 00:43:51,040
in the<font color="#CCCCCC"> macro 6</font><font color="#E5E5E5"> you'll see that all that</font>

703
00:43:44,290 --> 00:43:54,609
of any<font color="#E5E5E5"> loaded library lies just near the</font>

704
00:43:51,040 --> 00:43:56,470
<font color="#CCCCCC">data of other library</font><font color="#E5E5E5"> but not near the</font>

705
00:43:54,609 --> 00:43:56,950
code but near<font color="#CCCCCC"> the data and the code is</font>

706
00:43:56,470 --> 00:44:00,730
<font color="#CCCCCC">this</font>

707
00:43:56,950 --> 00:44:05,500
same core denier but they are not in the

708
00:44:00,730 --> 00:44:10,270
one in the one segment<font color="#CCCCCC"> I hope you</font>

709
00:44:05,500 --> 00:44:13,690
understand<font color="#CCCCCC"> yeah the good question is</font>

710
00:44:10,270 --> 00:44:17,770
about<font color="#E5E5E5"> 32-bit system but it's already</font>

711
00:44:13,690 --> 00:44:23,859
know that<font color="#CCCCCC"> there is nothing</font><font color="#E5E5E5"> to do we need</font>

712
00:44:17,770 --> 00:44:26,349
<font color="#E5E5E5">to use</font><font color="#CCCCCC"> 64-bit yeah I have some thanks to</font>

713
00:44:23,859 --> 00:44:28,740
brilliant<font color="#E5E5E5"> people who helped me but I</font>

714
00:44:26,349 --> 00:44:34,089
didn't this research<font color="#E5E5E5"> who helped me in</font>

715
00:44:28,740 --> 00:44:38,430
translation in other<font color="#E5E5E5"> stuff and to this</font>

716
00:44:34,089 --> 00:44:38,430
guy who made this<font color="#CCCCCC"> picture</font>

717
00:44:42,690 --> 00:44:52,500
[Applause]

718
00:44:48,810 --> 00:44:52,500
anybody has any questions

719
00:45:03,270 --> 00:45:09,130
thanks nice talk<font color="#CCCCCC"> I just wonder you said</font>

720
00:45:06,580 --> 00:45:20,009
currently nooks and<font color="#E5E5E5"> you see</font><font color="#CCCCCC"> set a bun</font><font color="#E5E5E5"> to</font>

721
00:45:09,130 --> 00:45:23,940
which current version did you use which

722
00:45:20,010 --> 00:45:25,720
version did you test your<font color="#CCCCCC"> exploits on</font>

723
00:45:23,940 --> 00:45:28,690
exploits for what

724
00:45:25,720 --> 00:45:31,200
can you please because there is

725
00:45:28,690 --> 00:45:34,510
everything is so<font color="#CCCCCC"> very connected</font><font color="#E5E5E5"> yeah but</font>

726
00:45:31,200 --> 00:45:37,390
I've<font color="#CCCCCC"> tasted</font><font color="#E5E5E5"> on lightest Ubuntu for</font>

727
00:45:34,510 --> 00:45:39,310
example<font color="#E5E5E5"> the same works on the largest</font>

728
00:45:37,390 --> 00:45:43,330
kernel version for example<font color="#CCCCCC"> you can just</font>

729
00:45:39,310 --> 00:45:45,279
<font color="#E5E5E5">get cloned Linux you can build a new</font>

730
00:45:43,330 --> 00:45:49,360
version of criminal and do the same

731
00:45:45,280 --> 00:45:55,060
works because a map is predictable and

732
00:45:49,360 --> 00:45:57,310
because the new<font color="#CCCCCC"> Lipsy doesn't care so it</font>

733
00:45:55,060 --> 00:45:58,060
works it easily works my my exploit

734
00:45:57,310 --> 00:46:00,779
works

735
00:45:58,060 --> 00:46:04,810
I know it's perfectly<font color="#E5E5E5"> I just took a new</font>

736
00:46:00,780 --> 00:46:06,640
Ubuntu and it works<font color="#CCCCCC"> I know</font><font color="#E5E5E5"> I still</font><font color="#CCCCCC"> think</font>

737
00:46:04,810 --> 00:46:07,960
you should always mention the kernel

738
00:46:06,640 --> 00:46:11,379
version you're testing on because a

739
00:46:07,960 --> 00:46:13,930
boudreaux is not a version<font color="#E5E5E5"> it's yeah I</font><font color="#CCCCCC"> I</font>

740
00:46:11,380 --> 00:46:20,560
know but it's much easier<font color="#CCCCCC"> to say right</font>

741
00:46:13,930 --> 00:46:24,009
now<font color="#E5E5E5"> current but yeah in my in my white</font>

742
00:46:20,560 --> 00:46:26,620
paper about<font color="#E5E5E5"> this work I used</font><font color="#CCCCCC"> four dots</font>

743
00:46:24,010 --> 00:46:29,580
<font color="#E5E5E5">and a</font><font color="#CCCCCC"> one for what's the current version</font>

744
00:46:26,620 --> 00:46:29,580
I can't remember<font color="#E5E5E5"> now</font>

745
00:46:32,650 --> 00:46:46,390
<font color="#CCCCCC">I think it's 4:16 yeah</font><font color="#E5E5E5"> thank you no</font>

746
00:46:39,190 --> 00:46:54,000
problem<font color="#CCCCCC"> I can take a look honestly</font>

747
00:46:46,390 --> 00:46:58,270
<font color="#E5E5E5">because I have a clone of of</font><font color="#CCCCCC"> Kira now so</font>

748
00:46:54,000 --> 00:47:00,069
for the randomization<font color="#CCCCCC"> of MF addresses</font>

749
00:46:58,270 --> 00:47:03,549
that<font color="#E5E5E5"> you implemented what is the</font>

750
00:47:00,069 --> 00:47:06,089
<font color="#CCCCCC">worst-case</font><font color="#E5E5E5"> memory overhead for example</font>

751
00:47:03,549 --> 00:47:09,009
when you're creating lots of<font color="#E5E5E5"> 4k mappings</font>

752
00:47:06,089 --> 00:47:10,720
<font color="#E5E5E5">if you count all the extra page tables</font>

753
00:47:09,010 --> 00:47:15,309
<font color="#E5E5E5">that you have to allocate and what is</font>

754
00:47:10,720 --> 00:47:18,640
the impact on TLB pressure well<font color="#E5E5E5"> honestly</font>

755
00:47:15,309 --> 00:47:21,549
I didn't meet any mirrors I just checked

756
00:47:18,640 --> 00:47:25,118
<font color="#E5E5E5">that it works fine and I was trying to</font>

757
00:47:21,549 --> 00:47:29,589
allocate<font color="#E5E5E5"> about 10 gigabytes or something</font>

758
00:47:25,119 --> 00:47:35,400
like<font color="#E5E5E5"> this</font><font color="#CCCCCC"> I didn't check the performance</font>

759
00:47:29,589 --> 00:47:35,400
question because I<font color="#E5E5E5"> honestly had no time</font>

