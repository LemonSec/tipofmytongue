1
00:00:04,549 --> 00:00:10,200
all right<font color="#E5E5E5"> so just to make</font><font color="#CCCCCC"> sure you're</font>

2
00:00:07,649 --> 00:00:11,820
not scared<font color="#E5E5E5"> it might eventually kill all</font>

3
00:00:10,200 --> 00:00:13,799
your<font color="#E5E5E5"> bugs but we're definitely not there</font>

4
00:00:11,820 --> 00:00:15,660
<font color="#E5E5E5">that's why it's called field report on a</font>

5
00:00:13,799 --> 00:00:18,300
<font color="#CCCCCC">zero-day machine and not a zero-day</font>

6
00:00:15,660 --> 00:00:24,560
machine but<font color="#E5E5E5"> you know maybe in a few</font>

7
00:00:18,300 --> 00:00:27,599
<font color="#CCCCCC">years actually this is</font><font color="#E5E5E5"> the topic that</font>

8
00:00:24,560 --> 00:00:31,169
I've been<font color="#E5E5E5"> dealing</font><font color="#CCCCCC"> with for quite a while</font>

9
00:00:27,599 --> 00:00:35,040
<font color="#E5E5E5">you see here on the first slide is</font><font color="#CCCCCC"> a</font>

10
00:00:31,170 --> 00:00:37,770
note from<font color="#E5E5E5"> 2008 it's called the master</font>

11
00:00:35,040 --> 00:00:39,719
plan<font color="#E5E5E5"> so I will not show you the whole</font>

12
00:00:37,770 --> 00:00:42,270
piece<font color="#CCCCCC"> of paper</font><font color="#E5E5E5"> because there are a</font><font color="#CCCCCC"> lot</font>

13
00:00:39,719 --> 00:00:44,280
of embarrassing<font color="#E5E5E5"> things on there but one</font>

14
00:00:42,270 --> 00:00:46,530
of the embarrassing things<font color="#E5E5E5"> definitely</font>

15
00:00:44,280 --> 00:00:49,980
this line here and I want<font color="#E5E5E5"> to show to you</font>

16
00:00:46,530 --> 00:00:55,230
it<font color="#E5E5E5"> says become a node a machine and</font>

17
00:00:49,980 --> 00:00:59,669
build one<font color="#E5E5E5"> okay so</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> was 2008 and yeah</font>

18
00:00:55,230 --> 00:01:01,730
<font color="#E5E5E5">this this journey is one</font><font color="#CCCCCC"> else</font><font color="#E5E5E5"> 2018 so</font>

19
00:00:59,670 --> 00:01:06,720
I've been on this journey<font color="#E5E5E5"> for the last</font>

20
00:01:01,730 --> 00:01:11,039
<font color="#CCCCCC">ten years</font><font color="#E5E5E5"> and today we want to give</font><font color="#CCCCCC"> you</font>

21
00:01:06,720 --> 00:01:14,010
an update<font color="#CCCCCC"> on where we are with that now</font>

22
00:01:11,040 --> 00:01:16,110
before<font color="#CCCCCC"> you start</font><font color="#E5E5E5"> calling me a fraud</font><font color="#CCCCCC"> you</font>

23
00:01:14,010 --> 00:01:21,180
know let's just point<font color="#E5E5E5"> it out</font>

24
00:01:16,110 --> 00:01:23,610
<font color="#E5E5E5">in the first line of course</font><font color="#CCCCCC"> universal</font>

25
00:01:21,180 --> 00:01:25,229
discovery method<font color="#E5E5E5"> cannot exist for</font>

26
00:01:23,610 --> 00:01:28,049
vulnerabilities so you can't just build

27
00:01:25,229 --> 00:01:31,110
<font color="#E5E5E5">this machine which will</font><font color="#CCCCCC"> just take code</font>

28
00:01:28,049 --> 00:01:32,700
and arbitrary arbitrary code and<font color="#E5E5E5"> just</font>

29
00:01:31,110 --> 00:01:35,960
tell you okay<font color="#E5E5E5"> these are all the</font>

30
00:01:32,700 --> 00:01:38,250
vulnerabilities<font color="#CCCCCC"> and all the rest is good</font>

31
00:01:35,960 --> 00:01:40,439
but<font color="#E5E5E5"> you</font><font color="#CCCCCC"> know that's</font><font color="#E5E5E5"> kind</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> the computer</font>

32
00:01:38,250 --> 00:01:41,820
science<font color="#CCCCCC"> way of looking at it and if you</font>

33
00:01:40,439 --> 00:01:43,139
look at it more<font color="#CCCCCC"> from an engineering</font>

34
00:01:41,820 --> 00:01:46,860
perspective<font color="#E5E5E5"> then</font><font color="#CCCCCC"> you'll ask yourself</font>

35
00:01:43,140 --> 00:01:49,320
<font color="#CCCCCC">okay but what can we do and</font><font color="#E5E5E5"> let's be</font>

36
00:01:46,860 --> 00:01:52,350
honest here I mean most of<font color="#E5E5E5"> the bugs we</font>

37
00:01:49,320 --> 00:01:53,990
see are<font color="#CCCCCC"> actually not super complex</font>

38
00:01:52,350 --> 00:01:56,548
things that we've never seen<font color="#CCCCCC"> before</font>

39
00:01:53,990 --> 00:01:58,770
<font color="#CCCCCC">we're dealing a lot with you know the</font>

40
00:01:56,549 --> 00:01:59,729
same kind<font color="#CCCCCC"> of patterns of injection over</font>

41
00:01:58,770 --> 00:02:02,100
<font color="#CCCCCC">and</font><font color="#E5E5E5"> over again</font>

42
00:01:59,729 --> 00:02:03,929
<font color="#E5E5E5">and for these kinds of things it is</font>

43
00:02:02,100 --> 00:02:06,990
worth asking<font color="#E5E5E5"> how much of this can we</font>

44
00:02:03,930 --> 00:02:09,929
automate<font color="#E5E5E5"> now what's the current state of</font>

45
00:02:06,990 --> 00:02:12,480
things<font color="#E5E5E5"> I think that it will always be</font>

46
00:02:09,929 --> 00:02:14,000
<font color="#E5E5E5">the</font><font color="#CCCCCC"> case that finding vulnerabilities</font>

47
00:02:12,480 --> 00:02:15,649
requires a very<font color="#E5E5E5"> deep</font>

48
00:02:14,000 --> 00:02:19,700
standing of the<font color="#E5E5E5"> quote base that you're</font>

49
00:02:15,650 --> 00:02:22,370
looking at and you will all know<font color="#E5E5E5"> the the</font>

50
00:02:19,700 --> 00:02:23,959
main strategy that is<font color="#E5E5E5"> always a big part</font>

51
00:02:22,370 --> 00:02:26,360
of<font color="#E5E5E5"> doing this is just</font><font color="#CCCCCC"> staring at the</font>

52
00:02:23,960 --> 00:02:29,390
code<font color="#CCCCCC"> for a very very long time and</font>

53
00:02:26,360 --> 00:02:33,290
<font color="#E5E5E5">mostly this talk is about making that</font>

54
00:02:29,390 --> 00:02:36,739
time you know less and<font color="#CCCCCC"> if we look at the</font>

55
00:02:33,290 --> 00:02:40,549
tooling<font color="#E5E5E5"> well I guess fuzzing is there</font>

56
00:02:36,740 --> 00:02:42,440
and a lot of the<font color="#E5E5E5"> bugs that</font><font color="#CCCCCC"> you don't</font>

57
00:02:40,550 --> 00:02:44,660
discover our due to the fact<font color="#CCCCCC"> that people</font>

58
00:02:42,440 --> 00:02:46,640
are<font color="#E5E5E5"> doing software testing guess that's</font>

59
00:02:44,660 --> 00:02:48,680
<font color="#E5E5E5">not that you know it's nothing</font><font color="#CCCCCC"> not</font>

60
00:02:46,640 --> 00:02:50,390
interesting<font color="#CCCCCC"> to hear but that is</font><font color="#E5E5E5"> actually</font>

61
00:02:48,680 --> 00:02:52,790
a<font color="#CCCCCC"> method that's</font><font color="#E5E5E5"> really important for</font>

62
00:02:50,390 --> 00:02:54,679
about finding<font color="#E5E5E5"> today</font><font color="#CCCCCC"> and then you see a</font>

63
00:02:52,790 --> 00:02:57,290
bit of taint analysis and symbolic can

64
00:02:54,680 --> 00:02:58,340
call and con<font color="#E5E5E5"> colleague execution</font><font color="#CCCCCC"> I think</font>

65
00:02:57,290 --> 00:03:00,769
there's also going to be<font color="#CCCCCC"> a talk tomorrow</font>

66
00:02:58,340 --> 00:03:03,500
about<font color="#CCCCCC"> con colleague execution</font><font color="#E5E5E5"> coupled</font>

67
00:03:00,770 --> 00:03:08,000
with fuzzing<font color="#CCCCCC"> and so you'll learn about</font>

68
00:03:03,500 --> 00:03:09,830
<font color="#E5E5E5">that more about that there and so when I</font>

69
00:03:08,000 --> 00:03:13,010
<font color="#E5E5E5">initially started</font><font color="#CCCCCC"> off I thought okay</font><font color="#E5E5E5"> so</font>

70
00:03:09,830 --> 00:03:15,230
there's so much research<font color="#E5E5E5"> out there let's</font>

71
00:03:13,010 --> 00:03:17,060
<font color="#E5E5E5">just take this stuff and then</font><font color="#CCCCCC"> just put</font>

72
00:03:15,230 --> 00:03:19,100
<font color="#CCCCCC">it together</font><font color="#E5E5E5"> and there's gonna be your</font>

73
00:03:17,060 --> 00:03:20,840
machine and if you look into academia

74
00:03:19,100 --> 00:03:23,209
you'll see all sorts<font color="#CCCCCC"> of really</font><font color="#E5E5E5"> cool</font>

75
00:03:20,840 --> 00:03:24,440
<font color="#CCCCCC">things like</font><font color="#E5E5E5"> you're improving model</font>

76
00:03:23,209 --> 00:03:26,510
checking dynamic taint tracking

77
00:03:24,440 --> 00:03:29,180
<font color="#E5E5E5">ground-based fuzzing what</font><font color="#CCCCCC"> white-box</font>

78
00:03:26,510 --> 00:03:31,070
fuzzing static<font color="#CCCCCC"> dataflow analysis which</font>

79
00:03:29,180 --> 00:03:32,780
we will<font color="#E5E5E5"> talk about today</font><font color="#CCCCCC"> a lot a</font>

80
00:03:31,070 --> 00:03:35,510
symbolic<font color="#E5E5E5"> execution can call the</font>

81
00:03:32,780 --> 00:03:37,340
execution I just mentioned SMT solving

82
00:03:35,510 --> 00:03:38,959
for input crafting I think it was also a

83
00:03:37,340 --> 00:03:40,700
a training<font color="#E5E5E5"> and there's gonna be a</font>

84
00:03:38,959 --> 00:03:42,970
training<font color="#E5E5E5"> at the end again where you</font>

85
00:03:40,700 --> 00:03:46,220
learn a bit more about<font color="#E5E5E5"> that and even</font>

86
00:03:42,970 --> 00:03:49,070
automatic<font color="#E5E5E5"> exploit generation so if you</font>

87
00:03:46,220 --> 00:03:50,510
<font color="#E5E5E5">ask some academics</font><font color="#CCCCCC"> you know what we're</font>

88
00:03:49,070 --> 00:03:51,500
doing<font color="#CCCCCC"> here</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> really</font><font color="#E5E5E5"> pretty pointless</font>

89
00:03:50,510 --> 00:03:55,609
because<font color="#CCCCCC"> you could have just generated</font>

90
00:03:51,500 --> 00:03:58,250
<font color="#CCCCCC">the exploit yep alright but let's look</font>

91
00:03:55,610 --> 00:04:01,160
<font color="#E5E5E5">at the practice</font><font color="#CCCCCC"> I</font><font color="#E5E5E5"> mean for real</font><font color="#CCCCCC"> what do</font>

92
00:03:58,250 --> 00:04:03,440
we see we see<font color="#E5E5E5"> fuzzers</font><font color="#CCCCCC"> w</font><font color="#E5E5E5"> people use</font>

93
00:04:01,160 --> 00:04:05,750
fuzzers<font color="#E5E5E5"> that's the automation</font><font color="#CCCCCC"> that we</font>

94
00:04:03,440 --> 00:04:08,510
use and<font color="#E5E5E5"> we don't do that in a dumb way</font><font color="#CCCCCC"> I</font>

95
00:04:05,750 --> 00:04:11,540
<font color="#E5E5E5">mean you do see fuzzers that try to</font>

96
00:04:08,510 --> 00:04:15,140
increase code coverage and they will use

97
00:04:11,540 --> 00:04:16,640
some form of static analysis as<font color="#E5E5E5"> well we</font>

98
00:04:15,140 --> 00:04:19,310
don't<font color="#CCCCCC"> just look for crashes we have</font>

99
00:04:16,640 --> 00:04:21,320
<font color="#E5E5E5">runtime runtime memory detectors that</font>

100
00:04:19,310 --> 00:04:24,380
<font color="#E5E5E5">will tell us say you know you just you</font>

101
00:04:21,320 --> 00:04:26,150
<font color="#CCCCCC">just wrote something</font><font color="#E5E5E5"> past the end of</font>

102
00:04:24,380 --> 00:04:26,740
<font color="#CCCCCC">your buffer this would not lead to</font><font color="#E5E5E5"> a</font>

103
00:04:26,150 --> 00:04:29,049
crash

104
00:04:26,740 --> 00:04:30,910
now what<font color="#E5E5E5"> I'm just telling you and then</font>

105
00:04:29,050 --> 00:04:33,099
there's static<font color="#E5E5E5"> analysis or looking at</font>

106
00:04:30,910 --> 00:04:36,250
the<font color="#E5E5E5"> code</font><font color="#CCCCCC"> and let's be honest</font><font color="#E5E5E5"> we we are</font>

107
00:04:33,099 --> 00:04:41,259
mostly stuck in in disassemblers<font color="#E5E5E5"> and</font><font color="#CCCCCC"> i</font>

108
00:04:36,250 --> 00:04:42,699
des<font color="#E5E5E5"> and we use grep a lot yeah and and</font><font color="#CCCCCC"> I</font>

109
00:04:41,259 --> 00:04:44,710
guess you<font color="#CCCCCC"> know that</font><font color="#E5E5E5"> that's not really</font>

110
00:04:42,699 --> 00:04:46,470
<font color="#E5E5E5">that's not really too advanced</font><font color="#CCCCCC"> so</font>

111
00:04:44,710 --> 00:04:50,169
there's a bit that we<font color="#E5E5E5"> can do</font><font color="#CCCCCC"> there</font>

112
00:04:46,470 --> 00:04:51,340
symbolic execution is used I mean<font color="#E5E5E5"> you'll</font>

113
00:04:50,169 --> 00:04:54,370
hear a lot<font color="#CCCCCC"> that symbolic execution</font>

114
00:04:51,340 --> 00:04:56,469
simply does not<font color="#E5E5E5"> scale that's true but</font>

115
00:04:54,370 --> 00:04:58,270
specifically<font color="#E5E5E5"> if you look at so for</font>

116
00:04:56,470 --> 00:05:00,580
finding<font color="#CCCCCC"> vulnerabilities but</font><font color="#E5E5E5"> specifically</font>

117
00:04:58,270 --> 00:05:02,979
if you look at crafting of exploits<font color="#CCCCCC"> if</font>

118
00:05:00,580 --> 00:05:04,690
you already have a crash and you just

119
00:05:02,979 --> 00:05:06,699
want to know what are the conditions so

120
00:05:04,690 --> 00:05:08,139
<font color="#CCCCCC">that</font><font color="#E5E5E5"> I can actually exploit this then</font>

121
00:05:06,699 --> 00:05:09,729
symbolic execution is definitely

122
00:05:08,139 --> 00:05:13,030
something<font color="#E5E5E5"> that people are using today</font>

123
00:05:09,729 --> 00:05:14,889
<font color="#E5E5E5">and</font><font color="#CCCCCC"> that works</font><font color="#E5E5E5"> and still I mean if you</font>

124
00:05:13,030 --> 00:05:17,859
<font color="#E5E5E5">compare that list of things that we have</font>

125
00:05:14,889 --> 00:05:21,039
to what's on this<font color="#E5E5E5"> slide</font><font color="#CCCCCC"> there is this</font>

126
00:05:17,860 --> 00:05:23,380
huge<font color="#CCCCCC"> gap between</font><font color="#E5E5E5"> what research has to</font>

127
00:05:21,039 --> 00:05:25,150
offer<font color="#E5E5E5"> and what</font><font color="#CCCCCC"> we do in practice</font><font color="#E5E5E5"> and</font>

128
00:05:23,380 --> 00:05:26,440
that's especially true for static

129
00:05:25,150 --> 00:05:30,789
analysis<font color="#CCCCCC"> and that's something that we</font>

130
00:05:26,440 --> 00:05:33,070
want<font color="#CCCCCC"> to change so I guess one of the big</font>

131
00:05:30,789 --> 00:05:37,449
questions<font color="#CCCCCC"> for me was always</font><font color="#E5E5E5"> why is</font>

132
00:05:33,070 --> 00:05:40,539
fuzzing something that works so well<font color="#CCCCCC"> and</font>

133
00:05:37,449 --> 00:05:41,680
I<font color="#CCCCCC"> think the main reason is that fuzzing</font>

134
00:05:40,539 --> 00:05:46,509
is<font color="#E5E5E5"> one of the few tools that actually</font>

135
00:05:41,680 --> 00:05:49,180
<font color="#E5E5E5">integrates into our workflow</font><font color="#CCCCCC"> and you're</font>

136
00:05:46,509 --> 00:05:51,550
also coupling<font color="#E5E5E5"> you're combining</font><font color="#CCCCCC"> two</font>

137
00:05:49,180 --> 00:05:54,820
things<font color="#E5E5E5"> here one the ability</font><font color="#CCCCCC"> of the</font>

138
00:05:51,550 --> 00:05:56,409
machine to just explore code<font color="#E5E5E5"> really fast</font>

139
00:05:54,820 --> 00:05:58,240
and the<font color="#E5E5E5"> other is you're actually telling</font>

140
00:05:56,409 --> 00:06:00,400
it something which<font color="#CCCCCC"> is</font><font color="#E5E5E5"> say if I point</font><font color="#CCCCCC"> my</font>

141
00:05:58,240 --> 00:06:02,650
father to this interface<font color="#CCCCCC"> here</font><font color="#E5E5E5"> then this</font>

142
00:06:00,400 --> 00:06:04,810
is going<font color="#E5E5E5"> to be an interface where I can</font>

143
00:06:02,650 --> 00:06:06,969
get attacker<font color="#CCCCCC"> control data into the</font>

144
00:06:04,810 --> 00:06:09,759
application<font color="#E5E5E5"> now think of your classic</font>

145
00:06:06,969 --> 00:06:11,050
<font color="#E5E5E5">static analysis report it will tell you</font>

146
00:06:09,759 --> 00:06:12,759
about<font color="#E5E5E5"> all sorts of</font><font color="#CCCCCC"> things that</font><font color="#E5E5E5"> might go</font>

147
00:06:11,050 --> 00:06:14,590
<font color="#CCCCCC">wrong but the first thing you'll say is</font>

148
00:06:12,759 --> 00:06:16,780
hey this<font color="#E5E5E5"> is not attacker controlled this</font>

149
00:06:14,590 --> 00:06:18,849
code is dead<font color="#E5E5E5"> something like that</font>

150
00:06:16,780 --> 00:06:20,559
and with the<font color="#CCCCCC"> fuzzer</font><font color="#E5E5E5"> that code is</font>

151
00:06:18,849 --> 00:06:22,719
definitely<font color="#E5E5E5"> not dead it is attacker</font>

152
00:06:20,560 --> 00:06:24,580
controlled<font color="#E5E5E5"> because you selected that</font>

153
00:06:22,719 --> 00:06:26,830
interface<font color="#CCCCCC"> is something that you can talk</font>

154
00:06:24,580 --> 00:06:28,840
<font color="#E5E5E5">to and you're also seeing</font><font color="#CCCCCC"> something</font><font color="#E5E5E5"> else</font>

155
00:06:26,830 --> 00:06:30,639
<font color="#CCCCCC">if this thing falls over then that's</font>

156
00:06:28,840 --> 00:06:31,900
<font color="#E5E5E5">actually</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> policy violation</font><font color="#CCCCCC"> meaning</font>

157
00:06:30,639 --> 00:06:34,120
<font color="#E5E5E5">that's actually something</font><font color="#CCCCCC"> that's</font>

158
00:06:31,900 --> 00:06:35,460
security<font color="#CCCCCC"> critical</font><font color="#E5E5E5"> and for second Alice</font>

159
00:06:34,120 --> 00:06:39,830
that's usually not<font color="#CCCCCC"> the case</font>

160
00:06:35,460 --> 00:06:42,590
<font color="#E5E5E5">so here the tool kind of benefit</font>

161
00:06:39,830 --> 00:06:45,469
from what the analyst knows and the

162
00:06:42,590 --> 00:06:48,830
<font color="#E5E5E5">analyst benefits from how fast the tool</font>

163
00:06:45,470 --> 00:06:51,710
can simply explore these things<font color="#E5E5E5"> and I</font>

164
00:06:48,830 --> 00:06:53,810
think<font color="#CCCCCC"> Sean hewn put this pretty well in</font>

165
00:06:51,710 --> 00:06:57,140
his paper<font color="#E5E5E5"> called think sidewalk not</font>

166
00:06:53,810 --> 00:06:59,050
robot<font color="#CCCCCC"> where he said</font><font color="#E5E5E5"> for static analysis</font>

167
00:06:57,140 --> 00:07:01,789
this<font color="#E5E5E5"> is</font><font color="#CCCCCC"> not the case</font><font color="#E5E5E5"> so he says</font>

168
00:06:59,050 --> 00:07:03,410
significant<font color="#E5E5E5"> under investigated potential</font>

169
00:07:01,790 --> 00:07:05,690
exists for static analysis techniques

170
00:07:03,410 --> 00:07:08,600
<font color="#E5E5E5">designed for integration into a human</font>

171
00:07:05,690 --> 00:07:10,370
<font color="#CCCCCC">quote</font><font color="#E5E5E5"> auditors workflow a human expert</font>

172
00:07:08,600 --> 00:07:11,600
will typically have significant amounts

173
00:07:10,370 --> 00:07:13,730
of internalized knowledge and

174
00:07:11,600 --> 00:07:17,390
integrating it with algorithms<font color="#CCCCCC"> is</font>

175
00:07:13,730 --> 00:07:19,040
non-trivial<font color="#E5E5E5"> so in other words what we</font>

176
00:07:17,390 --> 00:07:21,890
want to focus on is<font color="#CCCCCC"> actually how do we</font>

177
00:07:19,040 --> 00:07:25,250
take<font color="#CCCCCC"> that knowledge</font><font color="#E5E5E5"> that an analyst has</font>

178
00:07:21,890 --> 00:07:29,240
and actually make perfect use of<font color="#CCCCCC"> the</font>

179
00:07:25,250 --> 00:07:32,720
<font color="#E5E5E5">machine to to leverage that</font><font color="#CCCCCC"> knowledge to</font>

180
00:07:29,240 --> 00:07:36,470
find box fast and so one<font color="#CCCCCC"> of the</font><font color="#E5E5E5"> first</font>

181
00:07:32,720 --> 00:07:39,260
things I<font color="#CCCCCC"> did there was</font><font color="#E5E5E5"> I was in 2012</font><font color="#CCCCCC"> an</font>

182
00:07:36,470 --> 00:07:41,540
extreme<font color="#E5E5E5"> form of leveraging analyst</font>

183
00:07:39,260 --> 00:07:43,550
knowledge<font color="#E5E5E5"> just to say hey just give me a</font>

184
00:07:41,540 --> 00:07:46,700
box show me what that<font color="#E5E5E5"> looks like in</font>

185
00:07:43,550 --> 00:07:49,100
completion<font color="#CCCCCC"> and then</font><font color="#E5E5E5"> you know go ahead</font>

186
00:07:46,700 --> 00:07:51,430
<font color="#CCCCCC">machine and</font><font color="#E5E5E5"> just find</font><font color="#CCCCCC"> something that</font>

187
00:07:49,100 --> 00:07:53,960
looks<font color="#E5E5E5"> just like that or similar to that</font>

188
00:07:51,430 --> 00:07:56,630
so this<font color="#E5E5E5"> is something that that</font><font color="#CCCCCC"> I call</font>

189
00:07:53,960 --> 00:07:59,780
<font color="#E5E5E5">the vulnerability extrapolation it works</font>

190
00:07:56,630 --> 00:08:02,120
<font color="#CCCCCC">it's just that it's very expensive</font>

191
00:07:59,780 --> 00:08:03,710
<font color="#CCCCCC">because you're saying you know you can</font>

192
00:08:02,120 --> 00:08:05,810
only<font color="#E5E5E5"> use</font><font color="#CCCCCC"> it if you give me a complete</font>

193
00:08:03,710 --> 00:08:08,150
example<font color="#E5E5E5"> of a bug and then maybe there's</font>

194
00:08:05,810 --> 00:08:10,970
something<font color="#CCCCCC"> like</font><font color="#E5E5E5"> that again many times</font>

195
00:08:08,150 --> 00:08:12,560
there isn't so especially<font color="#CCCCCC"> if you have</font>

196
00:08:10,970 --> 00:08:16,670
<font color="#E5E5E5">bugs that</font><font color="#CCCCCC"> are kind of</font><font color="#E5E5E5"> unique that</font>

197
00:08:12,560 --> 00:08:18,770
doesn't give you much so um I didn't

198
00:08:16,670 --> 00:08:21,580
started looking at all<font color="#CCCCCC"> different kinds</font>

199
00:08:18,770 --> 00:08:24,380
of<font color="#E5E5E5"> ways</font><font color="#CCCCCC"> in which code is</font><font color="#E5E5E5"> represented</font>

200
00:08:21,580 --> 00:08:27,820
<font color="#E5E5E5">simply to see what kind of patterns</font><font color="#CCCCCC"> I</font>

201
00:08:24,380 --> 00:08:30,110
would be able<font color="#E5E5E5"> to</font><font color="#CCCCCC"> formulate and</font>

202
00:08:27,820 --> 00:08:32,780
essentially<font color="#E5E5E5"> started with a syntax tree</font>

203
00:08:30,110 --> 00:08:35,090
that just decomposes the<font color="#E5E5E5"> code into its</font>

204
00:08:32,780 --> 00:08:37,728
language<font color="#E5E5E5"> elements then at some point I</font>

205
00:08:35,090 --> 00:08:39,860
wanted<font color="#CCCCCC"> to model control flow</font><font color="#E5E5E5"> so like you</font>

206
00:08:37,729 --> 00:08:41,990
know<font color="#E5E5E5"> from from</font><font color="#CCCCCC"> ida pro</font><font color="#E5E5E5"> your control flow</font>

207
00:08:39,860 --> 00:08:44,420
graph that<font color="#E5E5E5"> tells</font><font color="#CCCCCC"> you this is how</font><font color="#E5E5E5"> you get</font>

208
00:08:41,990 --> 00:08:46,520
from<font color="#CCCCCC"> one statement</font><font color="#E5E5E5"> to the other and then</font>

209
00:08:44,420 --> 00:08:47,430
finally and this<font color="#CCCCCC"> is something</font><font color="#E5E5E5"> very</font>

210
00:08:46,520 --> 00:08:49,860
<font color="#E5E5E5">important</font>

211
00:08:47,430 --> 00:08:53,189
for modeling vulnerabilities<font color="#CCCCCC"> data flow</font>

212
00:08:49,860 --> 00:08:55,020
so data flow<font color="#E5E5E5"> meaning there's something</font>

213
00:08:53,190 --> 00:08:56,970
<font color="#CCCCCC">at control I want to know where it goes</font>

214
00:08:55,020 --> 00:09:00,000
and<font color="#E5E5E5"> I want to know if there any kind of</font>

215
00:08:56,970 --> 00:09:02,310
kinds<font color="#E5E5E5"> of checks on</font><font color="#CCCCCC"> that and so</font>

216
00:09:00,000 --> 00:09:04,590
eventually<font color="#E5E5E5"> I needed to store that</font><font color="#CCCCCC"> data</font>

217
00:09:02,310 --> 00:09:08,459
and initially<font color="#CCCCCC"> it just went into</font><font color="#E5E5E5"> these</font>

218
00:09:04,590 --> 00:09:10,920
large pickled objects and<font color="#E5E5E5"> that</font>

219
00:09:08,460 --> 00:09:13,920
absolutely<font color="#CCCCCC"> didn't scale so I needed</font><font color="#E5E5E5"> a</font>

220
00:09:10,920 --> 00:09:15,750
way to do<font color="#E5E5E5"> it better</font><font color="#CCCCCC"> and I essentially</font>

221
00:09:13,920 --> 00:09:18,180
<font color="#CCCCCC">all put that into a</font><font color="#E5E5E5"> graph database and</font>

222
00:09:15,750 --> 00:09:19,830
then<font color="#E5E5E5"> notice oh wow</font><font color="#CCCCCC"> you know all of</font><font color="#E5E5E5"> these</font>

223
00:09:18,180 --> 00:09:22,079
data<font color="#E5E5E5"> structures they're essentially</font>

224
00:09:19,830 --> 00:09:25,080
<font color="#E5E5E5">describing the same code so why not just</font>

225
00:09:22,080 --> 00:09:28,830
put<font color="#E5E5E5"> that together and suddenly you can</font>

226
00:09:25,080 --> 00:09:31,290
you can describe walks in that path that

227
00:09:28,830 --> 00:09:33,450
<font color="#E5E5E5">actually</font><font color="#CCCCCC"> look at syntax control flow and</font>

228
00:09:31,290 --> 00:09:36,260
data flow<font color="#E5E5E5"> and that's something</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> was</font>

229
00:09:33,450 --> 00:09:40,860
a lot<font color="#CCCCCC"> more powerful</font><font color="#E5E5E5"> than that work in</font>

230
00:09:36,260 --> 00:09:43,890
2012<font color="#E5E5E5"> and essentially led to the creation</font>

231
00:09:40,860 --> 00:09:45,510
of a tool<font color="#E5E5E5"> that's open</font><font color="#CCCCCC"> source and</font><font color="#E5E5E5"> that</font>

232
00:09:43,890 --> 00:09:48,180
you<font color="#E5E5E5"> might have heard</font><font color="#CCCCCC"> of before</font><font color="#E5E5E5"> because</font>

233
00:09:45,510 --> 00:09:51,270
<font color="#E5E5E5">you know I tend to give the same talks a</font>

234
00:09:48,180 --> 00:09:55,260
lot<font color="#E5E5E5"> of times and so the tool is called</font>

235
00:09:51,270 --> 00:09:58,500
<font color="#CCCCCC">urine after the person who carries the</font>

236
00:09:55,260 --> 00:10:01,200
master plan in<font color="#E5E5E5"> his wallet</font><font color="#CCCCCC"> and it is</font>

237
00:09:58,500 --> 00:10:05,610
essentially a search<font color="#CCCCCC"> engine</font><font color="#E5E5E5"> for</font>

238
00:10:01,200 --> 00:10:07,890
vulnerability discovery<font color="#CCCCCC"> and it</font><font color="#E5E5E5"> uses a so</font>

239
00:10:05,610 --> 00:10:09,780
called fuzzy parser<font color="#E5E5E5"> meaning you can</font>

240
00:10:07,890 --> 00:10:11,939
throw<font color="#E5E5E5"> things at it that kind of look</font>

241
00:10:09,780 --> 00:10:14,910
like<font color="#CCCCCC"> C and it will do</font><font color="#E5E5E5"> the best that it</font>

242
00:10:11,940 --> 00:10:17,250
can to create<font color="#E5E5E5"> these data</font><font color="#CCCCCC"> structures of</font>

243
00:10:14,910 --> 00:10:18,990
it that you<font color="#E5E5E5"> can then search and then</font>

244
00:10:17,250 --> 00:10:20,670
there's a query language<font color="#CCCCCC"> and this is an</font>

245
00:10:18,990 --> 00:10:23,400
extensible query language you can kind

246
00:10:20,670 --> 00:10:26,010
of build<font color="#E5E5E5"> your own abstractions</font><font color="#CCCCCC"> to then</font>

247
00:10:23,400 --> 00:10:28,140
use that<font color="#E5E5E5"> as a search engine and you'll</font>

248
00:10:26,010 --> 00:10:33,630
see this today<font color="#CCCCCC"> so Nico</font><font color="#E5E5E5"> is going to demo</font>

249
00:10:28,140 --> 00:10:35,100
<font color="#E5E5E5">something like that today all right but</font>

250
00:10:33,630 --> 00:10:36,900
now let's finally<font color="#E5E5E5"> come to the machine</font>

251
00:10:35,100 --> 00:10:39,240
that<font color="#CCCCCC"> we actually want to</font><font color="#E5E5E5"> build this is</font>

252
00:10:36,900 --> 00:10:41,100
<font color="#E5E5E5">the stuff that's behind it and you know</font>

253
00:10:39,240 --> 00:10:45,540
this is my<font color="#E5E5E5"> wild imagination of how that</font>

254
00:10:41,100 --> 00:10:48,540
<font color="#E5E5E5">should look</font><font color="#CCCCCC"> like</font><font color="#E5E5E5"> so on the right you see</font>

255
00:10:45,540 --> 00:10:50,880
<font color="#E5E5E5">a</font><font color="#CCCCCC"> code hose so it's essentially quote</font>

256
00:10:48,540 --> 00:10:54,800
dripping<font color="#E5E5E5"> into the machine at high speed</font>

257
00:10:50,880 --> 00:10:56,550
so<font color="#E5E5E5"> not</font><font color="#CCCCCC"> dripping</font><font color="#E5E5E5"> really and then you</font><font color="#CCCCCC"> see</font>

258
00:10:54,800 --> 00:10:57,599
<font color="#E5E5E5">pre-calculated intermediate</font>

259
00:10:56,550 --> 00:11:00,240
representation

260
00:10:57,600 --> 00:11:01,860
for the world's lips and frameworks<font color="#E5E5E5"> so</font>

261
00:11:00,240 --> 00:11:04,320
it's kind of<font color="#E5E5E5"> like these graph structures</font>

262
00:11:01,860 --> 00:11:06,000
and they're down there and when the code

263
00:11:04,320 --> 00:11:08,640
comes in you can<font color="#E5E5E5"> check its dependencies</font>

264
00:11:06,000 --> 00:11:11,610
you<font color="#E5E5E5"> can load these intermediate graph</font>

265
00:11:08,640 --> 00:11:14,040
representations<font color="#E5E5E5"> and it will create a new</font>

266
00:11:11,610 --> 00:11:18,060
graph representation for that<font color="#CCCCCC"> code that</font>

267
00:11:14,040 --> 00:11:19,620
flows in and then on the left is the

268
00:11:18,060 --> 00:11:22,500
left<font color="#E5E5E5"> foot yes it's left</font><font color="#CCCCCC"> for you as well</font>

269
00:11:19,620 --> 00:11:24,420
<font color="#E5E5E5">on the left you have the world's</font>

270
00:11:22,500 --> 00:11:28,500
collective<font color="#E5E5E5"> knowledge about vulnerability</font>

271
00:11:24,420 --> 00:11:31,400
discovery and this<font color="#CCCCCC"> Oda for automata is</font>

272
00:11:28,500 --> 00:11:33,750
going to use this world's collective

273
00:11:31,400 --> 00:11:36,540
knowledge about vulnerability discovery

274
00:11:33,750 --> 00:11:38,820
and the intermediate representation of

275
00:11:36,540 --> 00:11:41,969
the code to essentially<font color="#E5E5E5"> find all the</font>

276
00:11:38,820 --> 00:11:45,240
toxic<font color="#CCCCCC"> assets of the world code which</font><font color="#E5E5E5"> you</font>

277
00:11:41,970 --> 00:11:46,850
see up<font color="#CCCCCC"> there</font><font color="#E5E5E5"> and then there are these</font>

278
00:11:45,240 --> 00:11:49,500
crazy<font color="#E5E5E5"> nerds and they can do two things</font>

279
00:11:46,850 --> 00:11:51,780
<font color="#E5E5E5">one is they can</font><font color="#CCCCCC"> actually query this</font>

280
00:11:49,500 --> 00:11:53,160
machine and<font color="#E5E5E5"> ask questions as was already</font>

281
00:11:51,780 --> 00:11:55,800
the case with that<font color="#E5E5E5"> search engine</font>

282
00:11:53,160 --> 00:11:57,180
approach<font color="#CCCCCC"> they can also add to the</font>

283
00:11:55,800 --> 00:11:59,310
world's collective<font color="#E5E5E5"> knowledge about</font>

284
00:11:57,180 --> 00:12:01,170
vulnerability discovery<font color="#E5E5E5"> and one thing I</font>

285
00:11:59,310 --> 00:12:03,089
didn't<font color="#CCCCCC"> put</font><font color="#E5E5E5"> into here because it's just</font>

286
00:12:01,170 --> 00:12:05,160
lots of arrows<font color="#CCCCCC"> is of course they can</font>

287
00:12:03,090 --> 00:12:08,040
also comment<font color="#E5E5E5"> on what the machine</font>

288
00:12:05,160 --> 00:12:11,310
produced<font color="#CCCCCC"> I'm saying hey this is really</font>

289
00:12:08,040 --> 00:12:14,040
<font color="#E5E5E5">not true and that</font><font color="#CCCCCC"> information will then</font>

290
00:12:11,310 --> 00:12:16,250
<font color="#CCCCCC">go back into</font><font color="#E5E5E5"> this this collective</font>

291
00:12:14,040 --> 00:12:20,670
knowledge about horrible discovery

292
00:12:16,250 --> 00:12:22,650
all right and so we now have a company

293
00:12:20,670 --> 00:12:25,890
or I am part of<font color="#CCCCCC"> a company now and</font>

294
00:12:22,650 --> 00:12:27,420
<font color="#E5E5E5">they're building this and I think</font><font color="#CCCCCC"> one of</font>

295
00:12:25,890 --> 00:12:28,860
the big things I learnt this year I mean

296
00:12:27,420 --> 00:12:31,140
<font color="#E5E5E5">it's kind of clear you always know it</font>

297
00:12:28,860 --> 00:12:33,120
but no seriously it<font color="#CCCCCC"> is a huge step from</font>

298
00:12:31,140 --> 00:12:34,920
a like a research prototype to something

299
00:12:33,120 --> 00:12:36,840
that<font color="#CCCCCC"> actually works if you you know</font>

300
00:12:34,920 --> 00:12:39,089
<font color="#E5E5E5">throw arbitrary code at it and</font><font color="#CCCCCC"> it</font>

301
00:12:36,840 --> 00:12:41,730
<font color="#E5E5E5">doesn't</font><font color="#CCCCCC"> just</font><font color="#E5E5E5"> crash and burn</font><font color="#CCCCCC"> and today</font>

302
00:12:39,090 --> 00:12:46,020
<font color="#E5E5E5">all we want to talk a lot</font><font color="#CCCCCC"> about what we</font>

303
00:12:41,730 --> 00:12:48,450
learned in<font color="#CCCCCC"> that first</font><font color="#E5E5E5"> yeah so here are</font>

304
00:12:46,020 --> 00:12:50,310
the core questions and challenges<font color="#CCCCCC"> that</font>

305
00:12:48,450 --> 00:12:52,560
we dealt with<font color="#E5E5E5"> this year one is language</font>

306
00:12:50,310 --> 00:12:54,900
<font color="#CCCCCC">intra neutrality we wanted to</font><font color="#E5E5E5"> build</font>

307
00:12:52,560 --> 00:12:58,920
<font color="#E5E5E5">something from the start</font><font color="#CCCCCC"> that is</font>

308
00:12:54,900 --> 00:13:02,189
actually capable of eventually handling

309
00:12:58,920 --> 00:13:05,430
arbitrary languages the second is it's

310
00:13:02,190 --> 00:13:06,870
pretty hard to<font color="#E5E5E5"> distinguish between the</font>

311
00:13:05,430 --> 00:13:07,819
input of the<font color="#E5E5E5"> machine and the actual</font>

312
00:13:06,870 --> 00:13:10,280
algorithm

313
00:13:07,820 --> 00:13:11,900
only if we separate this nicely<font color="#CCCCCC"> do we</font>

314
00:13:10,280 --> 00:13:15,050
get<font color="#CCCCCC"> something</font><font color="#E5E5E5"> that's generic enough and</font>

315
00:13:11,900 --> 00:13:17,390
finally how do we<font color="#E5E5E5"> build a big</font><font color="#CCCCCC"> knowledge</font>

316
00:13:15,050 --> 00:13:19,459
base<font color="#E5E5E5"> because just taking lots of queries</font>

317
00:13:17,390 --> 00:13:21,350
and storing them<font color="#E5E5E5"> is you know works for</font>

318
00:13:19,460 --> 00:13:24,380
up to<font color="#E5E5E5"> 10 queries after that it gets</font>

319
00:13:21,350 --> 00:13:28,850
really<font color="#CCCCCC"> messy so looking at language</font>

320
00:13:24,380 --> 00:13:30,110
neutrality<font color="#CCCCCC"> the first thing you might</font>

321
00:13:28,850 --> 00:13:32,420
<font color="#CCCCCC">think is say let's just</font><font color="#E5E5E5"> use an</font>

322
00:13:30,110 --> 00:13:34,100
intermediate<font color="#CCCCCC"> language just like LLVM</font>

323
00:13:32,420 --> 00:13:37,490
would do you know intermediate languages

324
00:13:34,100 --> 00:13:39,110
are nice<font color="#CCCCCC"> they come in a</font><font color="#E5E5E5"> form that that's</font>

325
00:13:37,490 --> 00:13:41,480
easy<font color="#E5E5E5"> to analyze so they have certain</font>

326
00:13:39,110 --> 00:13:46,460
<font color="#CCCCCC">properties as a safe form 3a dress code</font>

327
00:13:41,480 --> 00:13:48,620
<font color="#E5E5E5">and that's what we tried first but it</font>

328
00:13:46,460 --> 00:13:51,440
didn't really<font color="#E5E5E5"> work too well and the</font>

329
00:13:48,620 --> 00:13:53,390
<font color="#E5E5E5">reason for</font><font color="#CCCCCC"> that is</font><font color="#E5E5E5"> that you end up at a</font>

330
00:13:51,440 --> 00:13:55,790
lower level<font color="#E5E5E5"> of abstraction than the</font>

331
00:13:53,390 --> 00:13:58,730
actual<font color="#E5E5E5"> source code so something that</font>

332
00:13:55,790 --> 00:14:01,040
<font color="#CCCCCC">might be</font><font color="#E5E5E5"> pretty easy to analyze in that</font>

333
00:13:58,730 --> 00:14:03,500
particular<font color="#CCCCCC"> language</font><font color="#E5E5E5"> because the</font>

334
00:14:01,040 --> 00:14:05,660
<font color="#E5E5E5">expression can</font><font color="#CCCCCC"> be written as essentially</font>

335
00:14:03,500 --> 00:14:07,520
one line of code<font color="#E5E5E5"> becomes very very</font>

336
00:14:05,660 --> 00:14:09,800
clumsy when you actually start rolling

337
00:14:07,520 --> 00:14:12,590
it<font color="#E5E5E5"> out and compiling it down there was</font>

338
00:14:09,800 --> 00:14:14,329
another project in 2015-16<font color="#E5E5E5"> that I was</font>

339
00:14:12,590 --> 00:14:16,790
<font color="#CCCCCC">working on where we try to</font><font color="#E5E5E5"> just do all</font>

340
00:14:14,330 --> 00:14:19,060
<font color="#CCCCCC">of this stuff on binary</font><font color="#E5E5E5"> kind of works</font>

341
00:14:16,790 --> 00:14:21,140
but you know it's very<font color="#E5E5E5"> clumsy all of the</font>

342
00:14:19,060 --> 00:14:23,270
you<font color="#E5E5E5"> start reasoning about memory</font>

343
00:14:21,140 --> 00:14:25,189
accesses instead of the you<font color="#E5E5E5"> know the</font>

344
00:14:23,270 --> 00:14:27,890
<font color="#CCCCCC">actual logic</font><font color="#E5E5E5"> of the code and that's</font>

345
00:14:25,190 --> 00:14:32,540
where<font color="#CCCCCC"> your yeah your language gets</font><font color="#E5E5E5"> very</font>

346
00:14:27,890 --> 00:14:36,050
clumsy<font color="#E5E5E5"> but there's another approach</font><font color="#CCCCCC"> and</font>

347
00:14:32,540 --> 00:14:39,380
you<font color="#CCCCCC"> actually</font><font color="#E5E5E5"> just need to look back you</font>

348
00:14:36,050 --> 00:14:41,359
know<font color="#E5E5E5"> travel back into the 70s</font><font color="#CCCCCC"> and if you</font>

349
00:14:39,380 --> 00:14:44,060
dig long enough you'll find a<font color="#CCCCCC"> solution</font>

350
00:14:41,360 --> 00:14:47,180
<font color="#E5E5E5">here and it's called the functional</font>

351
00:14:44,060 --> 00:14:49,339
<font color="#CCCCCC">approach for data flow analysis and it's</font>

352
00:14:47,180 --> 00:14:52,040
a very simple<font color="#CCCCCC"> idea just</font><font color="#E5E5E5"> don't care about</font>

353
00:14:49,340 --> 00:14:55,780
the language too much<font color="#E5E5E5"> just say that</font>

354
00:14:52,040 --> 00:14:57,439
there are these instructions<font color="#E5E5E5"> or</font>

355
00:14:55,780 --> 00:15:00,230
statements whatever you want to call

356
00:14:57,440 --> 00:15:04,310
<font color="#E5E5E5">them and they are defined by a function</font>

357
00:15:00,230 --> 00:15:07,070
and that<font color="#CCCCCC"> function takes some input</font><font color="#E5E5E5"> and</font>

358
00:15:04,310 --> 00:15:09,829
maps it to<font color="#E5E5E5"> an output and yeah they're</font>

359
00:15:07,070 --> 00:15:12,080
all connected<font color="#E5E5E5"> through that</font><font color="#CCCCCC"> graph so you</font>

360
00:15:09,830 --> 00:15:14,690
get a<font color="#E5E5E5"> system of equations essentially</font>

361
00:15:12,080 --> 00:15:18,890
<font color="#E5E5E5">solve them</font><font color="#CCCCCC"> you're done</font><font color="#E5E5E5"> that's the idea</font>

362
00:15:14,690 --> 00:15:21,089
<font color="#CCCCCC">and</font><font color="#E5E5E5"> if you look at that in practice</font><font color="#CCCCCC"> so</font>

363
00:15:18,890 --> 00:15:23,010
here's a bit of<font color="#E5E5E5"> code</font><font color="#CCCCCC"> that shows</font><font color="#E5E5E5"> this</font>

364
00:15:21,089 --> 00:15:25,829
so you have<font color="#E5E5E5"> this code where you're</font>

365
00:15:23,010 --> 00:15:28,620
<font color="#E5E5E5">reading something from get header</font><font color="#CCCCCC"> you're</font>

366
00:15:25,829 --> 00:15:30,989
then checking it against know it then

367
00:15:28,620 --> 00:15:34,700
taints this thing called command<font color="#CCCCCC"> and</font>

368
00:15:30,990 --> 00:15:39,660
then goes to exit<font color="#E5E5E5"> so what you now do is</font>

369
00:15:34,700 --> 00:15:42,029
you attach the facts<font color="#E5E5E5"> to each of the</font>

370
00:15:39,660 --> 00:15:44,160
notes so here at get header you can<font color="#CCCCCC"> say</font>

371
00:15:42,029 --> 00:15:46,649
<font color="#CCCCCC">okay X comes from</font><font color="#E5E5E5"> the network so X is</font>

372
00:15:44,160 --> 00:15:49,290
tainted<font color="#E5E5E5"> and then you simply</font><font color="#CCCCCC"> propagate</font>

373
00:15:46,649 --> 00:15:51,480
this through the graph and each<font color="#E5E5E5"> of these</font>

374
00:15:49,290 --> 00:15:53,430
notes here is just represented by a

375
00:15:51,480 --> 00:15:55,290
function<font color="#CCCCCC"> and so here's an example</font><font color="#E5E5E5"> of</font>

376
00:15:53,430 --> 00:15:57,899
<font color="#E5E5E5">that the one that really matters</font><font color="#CCCCCC"> in</font><font color="#E5E5E5"> this</font>

377
00:15:55,290 --> 00:15:59,670
example is just<font color="#CCCCCC"> the plus the plus takes</font>

378
00:15:57,899 --> 00:16:04,440
something that<font color="#E5E5E5"> stained it which is the X</font>

379
00:15:59,670 --> 00:16:06,540
<font color="#E5E5E5">and it</font><font color="#CCCCCC"> then</font><font color="#E5E5E5"> means that the return value</font>

380
00:16:04,440 --> 00:16:08,220
<font color="#CCCCCC">of</font><font color="#E5E5E5"> this is tainted so you can say the</font>

381
00:16:06,540 --> 00:16:11,670
transfer function of<font color="#E5E5E5"> a plus is if you</font>

382
00:16:08,220 --> 00:16:13,709
get x<font color="#E5E5E5"> and y then if X or Y are</font><font color="#CCCCCC"> tainted</font>

383
00:16:11,670 --> 00:16:16,079
<font color="#E5E5E5">then the return value is tainted</font><font color="#CCCCCC"> and</font>

384
00:16:13,709 --> 00:16:18,479
<font color="#CCCCCC">then you can imagine</font><font color="#E5E5E5"> each of</font><font color="#CCCCCC"> those those</font>

385
00:16:16,079 --> 00:16:20,609
has<font color="#E5E5E5"> one and then you start propagate</font>

386
00:16:18,480 --> 00:16:22,620
propagating this change<font color="#E5E5E5"> and eventually</font>

387
00:16:20,610 --> 00:16:24,630
you reach<font color="#E5E5E5"> this fixed point and you can</font>

388
00:16:22,620 --> 00:16:28,050
say<font color="#CCCCCC"> okay now I have</font><font color="#E5E5E5"> my statements at</font>

389
00:16:24,630 --> 00:16:32,100
every at every<font color="#CCCCCC"> note and</font><font color="#E5E5E5"> here I can</font><font color="#CCCCCC"> see</font>

390
00:16:28,050 --> 00:16:34,170
<font color="#CCCCCC">I'm calling</font><font color="#E5E5E5"> X</font><font color="#CCCCCC"> X and</font><font color="#E5E5E5"> by the way CMD is</font>

391
00:16:32,100 --> 00:16:38,070
tainted<font color="#CCCCCC"> it's essentially</font><font color="#E5E5E5"> our taint</font>

392
00:16:34,170 --> 00:16:39,959
<font color="#E5E5E5">analysis works and now there's one</font><font color="#CCCCCC"> great</font>

393
00:16:38,070 --> 00:16:42,140
<font color="#E5E5E5">idea then you</font><font color="#CCCCCC"> know few years into</font><font color="#E5E5E5"> the</font>

394
00:16:39,959 --> 00:16:45,000
future<font color="#E5E5E5"> from the 70s which is in 95</font>

395
00:16:42,140 --> 00:16:46,380
<font color="#E5E5E5">people say hey you</font><font color="#CCCCCC"> know don't take out</font>

396
00:16:45,000 --> 00:16:49,019
those transfer functions and<font color="#E5E5E5"> just</font>

397
00:16:46,380 --> 00:16:52,199
represent<font color="#E5E5E5"> those functions as graphs so</font>

398
00:16:49,019 --> 00:16:55,050
<font color="#E5E5E5">suddenly you have these graphs connect</font>

399
00:16:52,199 --> 00:16:58,979
it in<font color="#E5E5E5"> the control flow so graph of</font>

400
00:16:55,050 --> 00:17:01,109
graphs so say and so if you do that then

401
00:16:58,980 --> 00:17:02,699
<font color="#E5E5E5">suddenly solving your data flow problems</font>

402
00:17:01,110 --> 00:17:06,750
just becomes<font color="#E5E5E5"> a graph for each ability</font>

403
00:17:02,699 --> 00:17:08,309
problem and so that's essentially what

404
00:17:06,750 --> 00:17:09,869
we used so there's one more<font color="#CCCCCC"> important</font>

405
00:17:08,309 --> 00:17:12,119
<font color="#CCCCCC">idea in</font><font color="#E5E5E5"> that paper which is summary</font>

406
00:17:09,869 --> 00:17:13,829
edges and summary edges means<font color="#E5E5E5"> if you've</font>

407
00:17:12,119 --> 00:17:15,448
already explored something if you

408
00:17:13,829 --> 00:17:18,000
already<font color="#E5E5E5"> know</font><font color="#CCCCCC"> that if I go into this</font>

409
00:17:15,449 --> 00:17:20,100
function<font color="#E5E5E5"> and</font><font color="#CCCCCC"> X is taint it then the</font>

410
00:17:18,000 --> 00:17:21,809
return value<font color="#CCCCCC"> is tainted</font><font color="#E5E5E5"> then let's just</font>

411
00:17:20,099 --> 00:17:23,369
create a summary edge of that<font color="#E5E5E5"> then we</font>

412
00:17:21,809 --> 00:17:25,319
don't have<font color="#E5E5E5"> to compute that again and and</font>

413
00:17:23,369 --> 00:17:28,198
that is really how<font color="#E5E5E5"> you make taint</font>

414
00:17:25,319 --> 00:17:31,090
another scale at all and so our idea<font color="#E5E5E5"> was</font>

415
00:17:28,199 --> 00:17:34,330
<font color="#E5E5E5">hey</font><font color="#CCCCCC"> let's just represent the</font><font color="#E5E5E5"> entire</font>

416
00:17:31,090 --> 00:17:35,709
<font color="#CCCCCC">kote as call</font><font color="#E5E5E5"> sites call sites and</font>

417
00:17:34,330 --> 00:17:40,720
methods<font color="#E5E5E5"> that are called all</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> the</font>

418
00:17:35,710 --> 00:17:42,970
operators<font color="#E5E5E5"> there is no</font><font color="#CCCCCC"> + or you know + -</font>

419
00:17:40,720 --> 00:17:45,400
or some shift operator or something none

420
00:17:42,970 --> 00:17:49,570
of<font color="#CCCCCC"> that exists anymore</font><font color="#E5E5E5"> all we have is</font>

421
00:17:45,400 --> 00:17:52,169
function calls and<font color="#E5E5E5"> we describe the</font>

422
00:17:49,570 --> 00:17:54,760
semantics of these function calls using

423
00:17:52,169 --> 00:17:56,559
summary edges yeah<font color="#CCCCCC"> that's what we call</font>

424
00:17:54,760 --> 00:17:58,960
<font color="#CCCCCC">the semantic code property graph I'm</font>

425
00:17:56,559 --> 00:18:01,000
going<font color="#CCCCCC"> to hurry a little bit you</font><font color="#E5E5E5"> know</font><font color="#CCCCCC"> and</font>

426
00:17:58,960 --> 00:18:03,149
essentially it means<font color="#CCCCCC"> all of these</font>

427
00:18:01,000 --> 00:18:05,320
semantics of built-in operators are

428
00:18:03,149 --> 00:18:07,559
represented by<font color="#CCCCCC"> these summary</font><font color="#E5E5E5"> edges all</font>

429
00:18:05,320 --> 00:18:10,389
of the semantics of external libraries

430
00:18:07,559 --> 00:18:12,460
including calls into native<font color="#CCCCCC"> code are</font>

431
00:18:10,390 --> 00:18:14,289
modeled<font color="#CCCCCC"> that way and then finally</font>

432
00:18:12,460 --> 00:18:16,330
anything that you've already<font color="#E5E5E5"> analyzed in</font>

433
00:18:14,289 --> 00:18:19,330
that code base you<font color="#CCCCCC"> don't</font><font color="#E5E5E5"> have to analyze</font>

434
00:18:16,330 --> 00:18:21,789
<font color="#E5E5E5">again because we</font><font color="#CCCCCC"> encoded</font><font color="#E5E5E5"> semantics and</font>

435
00:18:19,330 --> 00:18:23,199
that's<font color="#E5E5E5"> something</font><font color="#CCCCCC"> really important if you</font>

436
00:18:21,789 --> 00:18:27,450
<font color="#CCCCCC">want</font><font color="#E5E5E5"> to scale this</font><font color="#CCCCCC"> - you know all</font>

437
00:18:23,200 --> 00:18:28,750
<font color="#E5E5E5">libraries all frameworks out there</font>

438
00:18:27,450 --> 00:18:31,500
<font color="#CCCCCC">alright</font>

439
00:18:28,750 --> 00:18:35,169
so<font color="#CCCCCC"> Marco will now tell you</font><font color="#E5E5E5"> more about</font>

440
00:18:31,500 --> 00:18:36,700
how to<font color="#E5E5E5"> actually create all of well how</font>

441
00:18:35,169 --> 00:18:38,919
to actually<font color="#E5E5E5"> store all of these patterns</font>

442
00:18:36,700 --> 00:18:42,399
<font color="#E5E5E5">in some way in this database</font><font color="#CCCCCC"> so that you</font>

443
00:18:38,919 --> 00:18:44,649
don't end up with<font color="#E5E5E5"> just a you know</font><font color="#CCCCCC"> ad</font><font color="#E5E5E5"> hoc</font>

444
00:18:42,399 --> 00:18:46,570
queries<font color="#E5E5E5"> having</font><font color="#CCCCCC"> ten of them and then</font>

445
00:18:44,649 --> 00:18:56,370
asking yourself<font color="#E5E5E5"> do we already cover this</font>

446
00:18:46,570 --> 00:18:59,320
case so right now we will present<font color="#E5E5E5"> like</font>

447
00:18:56,370 --> 00:19:02,110
what we need to store all the<font color="#E5E5E5"> knowledge</font>

448
00:18:59,320 --> 00:19:04,510
base<font color="#CCCCCC"> that we</font><font color="#E5E5E5"> need so basically we</font>

449
00:19:02,110 --> 00:19:07,029
created our own<font color="#E5E5E5"> language</font><font color="#CCCCCC"> that looks like</font>

450
00:19:04,510 --> 00:19:09,700
<font color="#CCCCCC">a firewall configuration so the syntax</font>

451
00:19:07,029 --> 00:19:16,110
<font color="#E5E5E5">is really basic so it's basic to</font><font color="#CCCCCC"> parse -</font>

452
00:19:09,700 --> 00:19:19,149
to use and to save so it's really<font color="#E5E5E5"> simple</font>

453
00:19:16,110 --> 00:19:21,610
everyone<font color="#E5E5E5"> would say probably like why</font>

454
00:19:19,149 --> 00:19:23,979
will you invent a new language<font color="#E5E5E5"> but don't</font>

455
00:19:21,610 --> 00:19:25,570
worry it's really easy it's just<font color="#E5E5E5"> few</font>

456
00:19:23,980 --> 00:19:29,320
statements<font color="#CCCCCC"> and it's not a</font>

457
00:19:25,570 --> 00:19:31,779
<font color="#E5E5E5">turing-complete language so it's not</font>

458
00:19:29,320 --> 00:19:35,439
<font color="#E5E5E5">like a complete new</font><font color="#CCCCCC"> programming language</font>

459
00:19:31,779 --> 00:19:39,670
and<font color="#E5E5E5"> the</font><font color="#CCCCCC"> idea is like to store all the</font>

460
00:19:35,440 --> 00:19:42,640
<font color="#E5E5E5">summary edges as fabian described so</font>

461
00:19:39,670 --> 00:19:43,810
semantics of all the functions<font color="#CCCCCC"> in this</font>

462
00:19:42,640 --> 00:19:46,450
<font color="#CCCCCC">case with</font><font color="#E5E5E5"> a functional approach</font>

463
00:19:43,810 --> 00:19:50,800
<font color="#E5E5E5">everything is a functions also operators</font>

464
00:19:46,450 --> 00:19:53,230
and stuff and<font color="#CCCCCC"> also</font><font color="#E5E5E5"> some rules about</font>

465
00:19:50,800 --> 00:19:59,050
important input and outputs<font color="#E5E5E5"> about</font>

466
00:19:53,230 --> 00:20:02,140
programs and<font color="#E5E5E5"> libraries which in these</font>

467
00:19:59,050 --> 00:20:04,149
ages people<font color="#E5E5E5"> don't write code from</font>

468
00:20:02,140 --> 00:20:06,010
directly from scratch but they use a lot

469
00:20:04,150 --> 00:20:10,030
of<font color="#E5E5E5"> libraries so we also need the</font>

470
00:20:06,010 --> 00:20:12,700
semantics<font color="#CCCCCC"> for all the libraries so in</font>

471
00:20:10,030 --> 00:20:16,410
the next<font color="#CCCCCC"> slide I will</font><font color="#E5E5E5"> show the example</font>

472
00:20:12,700 --> 00:20:19,210
about<font color="#E5E5E5"> how we write</font><font color="#CCCCCC"> these semantics so</font>

473
00:20:16,410 --> 00:20:21,370
yeah so this basically<font color="#E5E5E5"> already works</font>

474
00:20:19,210 --> 00:20:23,560
this machine<font color="#E5E5E5"> so we have all the</font>

475
00:20:21,370 --> 00:20:26,649
knowledge<font color="#E5E5E5"> base</font><font color="#CCCCCC"> that it contains the</font>

476
00:20:23,560 --> 00:20:29,379
semantics the transformation<font color="#CCCCCC"> input</font>

477
00:20:26,650 --> 00:20:37,170
<font color="#E5E5E5">output and</font><font color="#CCCCCC"> flow description</font><font color="#E5E5E5"> and also</font>

478
00:20:29,380 --> 00:20:39,570
some kind<font color="#E5E5E5"> of customer related rules</font><font color="#CCCCCC"> so</font>

479
00:20:37,170 --> 00:20:42,310
<font color="#E5E5E5">also the customer can write his own</font>

480
00:20:39,570 --> 00:20:45,010
different rules<font color="#E5E5E5"> and this will be written</font>

481
00:20:42,310 --> 00:20:47,950
<font color="#CCCCCC">in</font><font color="#E5E5E5"> our syntax and then of course the</font>

482
00:20:45,010 --> 00:20:51,370
property graph that<font color="#CCCCCC"> synthetized all the</font>

483
00:20:47,950 --> 00:20:53,920
code as<font color="#E5E5E5"> fabian described</font><font color="#CCCCCC"> before</font><font color="#E5E5E5"> and then</font>

484
00:20:51,370 --> 00:20:56,530
both of<font color="#E5E5E5"> the input goes into the fall</font>

485
00:20:53,920 --> 00:20:59,290
autumn<font color="#E5E5E5"> at machine and out of this full</font>

486
00:20:56,530 --> 00:21:02,440
automatic<font color="#CCCCCC"> machine the output will be a</font>

487
00:20:59,290 --> 00:21:04,409
<font color="#E5E5E5">security profile that we call like that</font>

488
00:21:02,440 --> 00:21:06,640
because it's<font color="#CCCCCC"> like the summary of</font>

489
00:21:04,410 --> 00:21:09,550
<font color="#E5E5E5">everything that it's important about the</font>

490
00:21:06,640 --> 00:21:14,200
code<font color="#E5E5E5"> so everything</font><font color="#CCCCCC"> that it's toxic about</font>

491
00:21:09,550 --> 00:21:17,590
the code so<font color="#CCCCCC"> here's like the</font><font color="#E5E5E5"> basic</font>

492
00:21:14,200 --> 00:21:20,590
<font color="#CCCCCC">example of how to define a</font><font color="#E5E5E5"> semantics so</font>

493
00:21:17,590 --> 00:21:23,350
as described before<font color="#E5E5E5"> the functional</font>

494
00:21:20,590 --> 00:21:26,889
<font color="#CCCCCC">approach also operations like additions</font>

495
00:21:23,350 --> 00:21:30,550
and shift and<font color="#E5E5E5"> whatever is a function so</font>

496
00:21:26,890 --> 00:21:34,240
in this case you can see the<font color="#CCCCCC"> definition</font>

497
00:21:30,550 --> 00:21:38,440
of semantics<font color="#E5E5E5"> of the addition so you</font><font color="#CCCCCC"> will</font>

498
00:21:34,240 --> 00:21:40,480
see that the<font color="#E5E5E5"> result of addition is</font>

499
00:21:38,440 --> 00:21:43,330
tainted<font color="#CCCCCC"> bought from</font><font color="#E5E5E5"> the bought</font><font color="#CCCCCC"> operand</font>

500
00:21:40,480 --> 00:21:44,830
so from the<font color="#E5E5E5"> first parameter and the</font>

501
00:21:43,330 --> 00:21:47,409
second parameter if you think as a

502
00:21:44,830 --> 00:21:49,060
functional approach so in this case in

503
00:21:47,410 --> 00:21:51,340
<font color="#E5E5E5">our syntax it will be</font><font color="#CCCCCC"> written like that</font>

504
00:21:49,060 --> 00:21:52,428
<font color="#E5E5E5">so in the red you</font><font color="#CCCCCC"> see the first</font>

505
00:21:51,340 --> 00:21:55,610
<font color="#CCCCCC">parameter</font>

506
00:21:52,429 --> 00:21:59,629
as a source<font color="#E5E5E5"> so the</font><font color="#CCCCCC"> minus s means source</font>

507
00:21:55,610 --> 00:22:01,879
and<font color="#E5E5E5"> the minus D is the destination so we</font>

508
00:21:59,629 --> 00:22:04,119
we<font color="#E5E5E5"> basically say that the the first</font>

509
00:22:01,879 --> 00:22:06,949
<font color="#E5E5E5">parameter will taint the return value</font>

510
00:22:04,119 --> 00:22:09,529
<font color="#E5E5E5">during this operation and also in the</font>

511
00:22:06,950 --> 00:22:11,330
second line<font color="#E5E5E5"> you will</font><font color="#CCCCCC"> see that also the</font>

512
00:22:09,529 --> 00:22:13,759
second<font color="#E5E5E5"> parameter will taint the return</font>

513
00:22:11,330 --> 00:22:16,639
value of<font color="#E5E5E5"> this operation so</font><font color="#CCCCCC"> but of the</font>

514
00:22:13,759 --> 00:22:20,450
operand of this<font color="#E5E5E5"> operation</font><font color="#CCCCCC"> will end up in</font>

515
00:22:16,639 --> 00:22:22,279
the result of this operation<font color="#E5E5E5"> so in this</font>

516
00:22:20,450 --> 00:22:27,110
<font color="#E5E5E5">slide you will</font><font color="#CCCCCC"> see</font><font color="#E5E5E5"> something</font><font color="#CCCCCC"> that it's a</font>

517
00:22:22,279 --> 00:22:30,889
little<font color="#CCCCCC"> bit more complicated so the</font><font color="#E5E5E5"> this</font>

518
00:22:27,110 --> 00:22:33,498
like library call<font color="#CCCCCC"> as you can see there</font>

519
00:22:30,889 --> 00:22:38,029
are more definitions needed<font color="#E5E5E5"> so basically</font>

520
00:22:33,499 --> 00:22:40,129
you<font color="#E5E5E5"> have a semantics that</font><font color="#CCCCCC"> define in the</font>

521
00:22:38,029 --> 00:22:43,480
first line you see from the parameter to

522
00:22:40,129 --> 00:22:46,459
the instance<font color="#E5E5E5"> because in this example is</font>

523
00:22:43,480 --> 00:22:50,360
from<font color="#E5E5E5"> Java so object-oriented code and</font>

524
00:22:46,460 --> 00:22:52,399
you have the<font color="#E5E5E5"> concept of instance so in</font>

525
00:22:50,360 --> 00:22:55,309
the first<font color="#E5E5E5"> line you can see the parameter</font>

526
00:22:52,399 --> 00:23:01,189
<font color="#E5E5E5">as a source will taint the instance</font>

527
00:22:55,309 --> 00:23:03,259
itself<font color="#CCCCCC"> and as you can</font><font color="#E5E5E5"> see from the last</font>

528
00:23:01,190 --> 00:23:05,629
line<font color="#CCCCCC"> there is something that it's not</font>

529
00:23:03,259 --> 00:23:07,730
<font color="#E5E5E5">really direct to think that it's a</font>

530
00:23:05,629 --> 00:23:11,869
mapping<font color="#E5E5E5"> from the instance today instance</font>

531
00:23:07,730 --> 00:23:14,389
itself<font color="#E5E5E5"> and if you really</font><font color="#CCCCCC"> think</font><font color="#E5E5E5"> about it</font>

532
00:23:11,869 --> 00:23:16,999
makes sense<font color="#E5E5E5"> because in the append</font>

533
00:23:14,389 --> 00:23:20,029
operation<font color="#CCCCCC"> also what is</font><font color="#E5E5E5"> already inside</font>

534
00:23:16,999 --> 00:23:21,889
<font color="#CCCCCC">the instance will matters in the</font>

535
00:23:20,029 --> 00:23:25,970
instance in the instance<font color="#CCCCCC"> after</font><font color="#E5E5E5"> the</font>

536
00:23:21,889 --> 00:23:28,158
operation<font color="#E5E5E5"> so both are needed and what</font>

537
00:23:25,970 --> 00:23:31,100
<font color="#CCCCCC">it's in the second and</font><font color="#E5E5E5"> third line it's</font>

538
00:23:28,159 --> 00:23:35,230
also important in this case because<font color="#CCCCCC"> Java</font>

539
00:23:31,100 --> 00:23:37,998
for doing like better syntactic sugar

540
00:23:35,230 --> 00:23:40,399
the during the<font color="#E5E5E5"> append operation they</font>

541
00:23:37,999 --> 00:23:44,240
return the instance value<font color="#E5E5E5"> so you can</font>

542
00:23:40,399 --> 00:23:46,820
come get a lot of<font color="#CCCCCC"> append</font><font color="#E5E5E5"> operations so</font>

543
00:23:44,240 --> 00:23:48,799
in this case also the the instance will

544
00:23:46,820 --> 00:23:51,320
end up in the return value so we need

545
00:23:48,799 --> 00:23:53,509
the<font color="#E5E5E5"> same mapping from the parameter to</font>

546
00:23:51,320 --> 00:23:57,379
the return value as you can see<font color="#E5E5E5"> from the</font>

547
00:23:53,509 --> 00:24:02,019
third line of<font color="#E5E5E5"> code and and also from the</font>

548
00:23:57,379 --> 00:24:05,509
parameter to the essence<font color="#E5E5E5"> itself so</font>

549
00:24:02,019 --> 00:24:06,380
that's<font color="#E5E5E5"> just for the semantics so right</font>

550
00:24:05,509 --> 00:24:09,230
now we<font color="#E5E5E5"> will go</font>

551
00:24:06,380 --> 00:24:12,080
into detail about<font color="#E5E5E5"> how</font><font color="#CCCCCC"> to find important</font>

552
00:24:09,230 --> 00:24:14,120
<font color="#CCCCCC">flows so what it's really matters like</font>

553
00:24:12,080 --> 00:24:18,020
finding vulnerabilities<font color="#CCCCCC"> so this is a</font>

554
00:24:14,120 --> 00:24:21,350
really stupid code about Java<font color="#CCCCCC"> as you can</font>

555
00:24:18,020 --> 00:24:23,620
see there is like get input<font color="#CCCCCC"> stream</font><font color="#E5E5E5"> that</font>

556
00:24:21,350 --> 00:24:26,270
<font color="#E5E5E5">it could be from a file in this case and</font>

557
00:24:23,620 --> 00:24:28,909
there are a<font color="#E5E5E5"> lot of operations like</font>

558
00:24:26,270 --> 00:24:31,210
<font color="#E5E5E5">reading from that buffer</font><font color="#CCCCCC"> creating a</font>

559
00:24:28,910 --> 00:24:33,919
string<font color="#CCCCCC"> buffer and then</font><font color="#E5E5E5"> at the</font><font color="#CCCCCC"> end after</font>

560
00:24:31,210 --> 00:24:36,890
also some interprocedural call it will

561
00:24:33,919 --> 00:24:38,690
end<font color="#E5E5E5"> up in the red value function that in</font>

562
00:24:36,890 --> 00:24:42,200
<font color="#E5E5E5">this case is something important because</font>

563
00:24:38,690 --> 00:24:44,929
in<font color="#E5E5E5"> Java do some kind of visualization</font>

564
00:24:42,200 --> 00:24:49,280
which is one of<font color="#E5E5E5"> the most important class</font>

565
00:24:44,929 --> 00:24:52,309
<font color="#CCCCCC">of bugs</font><font color="#E5E5E5"> in Java so how we</font><font color="#CCCCCC"> can try to</font>

566
00:24:49,280 --> 00:24:54,080
find this we can try<font color="#CCCCCC"> to model these kind</font>

567
00:24:52,309 --> 00:24:56,750
of vulnerabilities so the machine will

568
00:24:54,080 --> 00:24:59,990
find it<font color="#E5E5E5"> automatically so we basically</font>

569
00:24:56,750 --> 00:25:03,380
define our source<font color="#E5E5E5"> and we can choose our</font>

570
00:24:59,990 --> 00:25:07,429
tag name in<font color="#E5E5E5"> this</font><font color="#CCCCCC"> case is a file we which</font>

571
00:25:03,380 --> 00:25:10,039
was like the full name and which part of

572
00:25:07,429 --> 00:25:12,679
the method<font color="#E5E5E5"> it's actually the starting</font>

573
00:25:10,039 --> 00:25:15,289
point from<font color="#E5E5E5"> the source</font><font color="#CCCCCC"> so in this case</font>

574
00:25:12,679 --> 00:25:17,360
the return value so the input stream

575
00:25:15,289 --> 00:25:22,400
<font color="#E5E5E5">object</font><font color="#CCCCCC"> itself would be the starting</font>

576
00:25:17,360 --> 00:25:25,370
<font color="#E5E5E5">point for the</font><font color="#CCCCCC"> dataflow operation and of</font>

577
00:25:22,400 --> 00:25:27,830
course we also need to<font color="#CCCCCC"> define our sink</font>

578
00:25:25,370 --> 00:25:31,340
<font color="#E5E5E5">so</font><font color="#CCCCCC"> we can</font><font color="#E5E5E5"> define in the same way you</font>

579
00:25:27,830 --> 00:25:34,010
define you specify the full name and

580
00:25:31,340 --> 00:25:36,230
also<font color="#E5E5E5"> you specify what part of the method</font>

581
00:25:34,010 --> 00:25:38,299
is<font color="#CCCCCC"> actually what is important</font><font color="#E5E5E5"> for the</font>

582
00:25:36,230 --> 00:25:41,570
<font color="#CCCCCC">dataflow so in this case what it's</font>

583
00:25:38,299 --> 00:25:44,120
really should be<font color="#E5E5E5"> control for data flow</font>

584
00:25:41,570 --> 00:25:47,658
<font color="#E5E5E5">is the first parameter</font><font color="#CCCCCC"> so we specify the</font>

585
00:25:44,120 --> 00:25:51,590
first parameter<font color="#E5E5E5"> as the sink and we also</font>

586
00:25:47,659 --> 00:25:55,730
give us like<font color="#E5E5E5"> fancy name this error</font><font color="#CCCCCC"> Iser</font>

587
00:25:51,590 --> 00:25:56,899
so it can be<font color="#E5E5E5"> used in the results so but</font>

588
00:25:55,730 --> 00:25:58,940
what's really important<font color="#E5E5E5"> for</font>

589
00:25:56,900 --> 00:26:01,130
vulnerabilities is not really to know if

590
00:25:58,940 --> 00:26:01,870
there is<font color="#CCCCCC"> a flow</font><font color="#E5E5E5"> from file or this</font>

591
00:26:01,130 --> 00:26:06,110
<font color="#CCCCCC">réaliser</font>

592
00:26:01,870 --> 00:26:07,850
but what it's most important is the

593
00:26:06,110 --> 00:26:10,010
question<font color="#E5E5E5"> it's something in</font><font color="#CCCCCC"> the middle</font>

594
00:26:07,850 --> 00:26:13,100
this<font color="#CCCCCC"> is blocking this kind</font><font color="#E5E5E5"> of data flow</font>

595
00:26:10,010 --> 00:26:16,700
some kind of escaping some kind of

596
00:26:13,100 --> 00:26:21,590
encryption<font color="#E5E5E5"> or whatever</font><font color="#CCCCCC"> related this kind</font>

597
00:26:16,700 --> 00:26:23,419
<font color="#E5E5E5">of flow so yeah it basically makes sense</font>

598
00:26:21,590 --> 00:26:25,939
<font color="#E5E5E5">also to define this kind of</font>

599
00:26:23,419 --> 00:26:29,260
transformation during<font color="#E5E5E5"> the data flow so</font>

600
00:26:25,940 --> 00:26:31,760
how we can<font color="#CCCCCC"> do that we</font><font color="#E5E5E5"> basically created</font>

601
00:26:29,260 --> 00:26:34,490
<font color="#E5E5E5">also statement to specify</font>

602
00:26:31,760 --> 00:26:37,190
transformations so transformations are

603
00:26:34,490 --> 00:26:40,070
functions<font color="#E5E5E5"> call in the middle of the data</font>

604
00:26:37,190 --> 00:26:42,769
<font color="#E5E5E5">flow and in this case we define an</font>

605
00:26:40,070 --> 00:26:47,059
escape function which also we define<font color="#E5E5E5"> as</font>

606
00:26:42,769 --> 00:26:49,010
a full name of<font color="#CCCCCC"> the</font><font color="#E5E5E5"> method and</font><font color="#CCCCCC"> also what</font>

607
00:26:47,059 --> 00:26:51,740
enter in this case is the sink at the

608
00:26:49,010 --> 00:26:53,389
<font color="#E5E5E5">parameter and the return value is what</font>

609
00:26:51,740 --> 00:26:57,139
it's<font color="#CCCCCC"> coming out of this transformation</font>

610
00:26:53,389 --> 00:26:59,990
operation<font color="#E5E5E5"> and on the last line you can</font>

611
00:26:57,139 --> 00:27:02,809
see we<font color="#E5E5E5"> attach some kind of tags</font><font color="#CCCCCC"> they</font>

612
00:26:59,990 --> 00:27:06,370
really use useful for data<font color="#E5E5E5"> flow tracking</font>

613
00:27:02,809 --> 00:27:09,289
because sometimes you also want to

614
00:27:06,370 --> 00:27:12,168
remove this<font color="#E5E5E5"> tacking during the data flow</font>

615
00:27:09,289 --> 00:27:16,190
tracking<font color="#CCCCCC"> if you think about</font><font color="#E5E5E5"> encryption</font>

616
00:27:12,169 --> 00:27:19,789
and decryption<font color="#CCCCCC"> it cool</font><font color="#E5E5E5"> off so it's also</font>

617
00:27:16,190 --> 00:27:24,440
important to<font color="#CCCCCC"> think about the inverse</font>

618
00:27:19,789 --> 00:27:26,570
operation so at the<font color="#E5E5E5"> end the description</font>

619
00:27:24,440 --> 00:27:28,850
of finding this class of vulnerability

620
00:27:26,570 --> 00:27:31,639
<font color="#E5E5E5">will be something</font><font color="#CCCCCC"> like that so defining</font>

621
00:27:28,850 --> 00:27:35,510
<font color="#E5E5E5">the the input as a source the</font>

622
00:27:31,639 --> 00:27:38,299
transformation and<font color="#E5E5E5"> the sink</font><font color="#CCCCCC"> of course</font>

623
00:27:35,510 --> 00:27:41,360
you can say specify multiple<font color="#CCCCCC"> of them</font><font color="#E5E5E5"> and</font>

624
00:27:38,299 --> 00:27:43,990
<font color="#E5E5E5">it's what is our knowledge base its base</font>

625
00:27:41,360 --> 00:27:46,969
so we have a lot of

626
00:27:43,990 --> 00:27:48,919
<font color="#CCCCCC">Sinkin sources and</font><font color="#E5E5E5"> also a lot of</font>

627
00:27:46,970 --> 00:27:53,000
mappings that<font color="#E5E5E5"> define the semantics of</font>

628
00:27:48,919 --> 00:27:56,720
all the operations<font color="#E5E5E5"> so basically you</font>

629
00:27:53,000 --> 00:27:58,789
define<font color="#E5E5E5"> source sink escaping and what is</font>

630
00:27:56,720 --> 00:28:04,340
really important<font color="#CCCCCC"> here is the definition</font>

631
00:27:58,789 --> 00:28:06,639
of flow description<font color="#CCCCCC"> so as I</font><font color="#E5E5E5"> said a</font>

632
00:28:04,340 --> 00:28:09,590
vulnerability<font color="#E5E5E5"> is only important if you</font>

633
00:28:06,639 --> 00:28:11,449
in this case it<font color="#E5E5E5"> doesn't pass</font><font color="#CCCCCC"> through the</font>

634
00:28:09,590 --> 00:28:13,490
<font color="#E5E5E5">transformer so if there is no</font>

635
00:28:11,450 --> 00:28:17,570
transformation involved<font color="#E5E5E5"> to the this</font>

636
00:28:13,490 --> 00:28:22,309
<font color="#E5E5E5">réaliser</font><font color="#CCCCCC"> so in this case we specify our</font>

637
00:28:17,570 --> 00:28:23,950
flow as file<font color="#E5E5E5"> not escaped</font><font color="#CCCCCC"> so during the</font>

638
00:28:22,309 --> 00:28:27,519
data flow

639
00:28:23,950 --> 00:28:30,730
it shouldn't<font color="#E5E5E5"> be passing through distance</font>

640
00:28:27,519 --> 00:28:33,700
transformer and the data should end up

641
00:28:30,730 --> 00:28:40,750
in this<font color="#E5E5E5"> Eliezer so this flow will only</font>

642
00:28:33,700 --> 00:28:43,179
be reported if these rules matches so at

643
00:28:40,750 --> 00:28:46,690
the<font color="#E5E5E5"> end we you can see something</font><font color="#CCCCCC"> like</font>

644
00:28:43,179 --> 00:28:49,360
<font color="#CCCCCC">that</font><font color="#E5E5E5"> so basically as I said we will have</font>

645
00:28:46,690 --> 00:28:54,510
<font color="#E5E5E5">multiple of this knowledge base</font><font color="#CCCCCC"> so a lot</font>

646
00:28:49,360 --> 00:28:58,269
<font color="#E5E5E5">of policy definition and which basically</font>

647
00:28:54,510 --> 00:29:01,419
model<font color="#E5E5E5"> a lot of different bugs</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> lot of</font>

648
00:28:58,269 --> 00:29:05,080
different<font color="#E5E5E5"> data leaks and whatever is</font>

649
00:29:01,419 --> 00:29:07,090
important to report and then all of this

650
00:29:05,080 --> 00:29:08,830
will<font color="#E5E5E5"> end up in our machine</font><font color="#CCCCCC"> and the</font>

651
00:29:07,090 --> 00:29:11,230
results will<font color="#CCCCCC"> be the security</font><font color="#E5E5E5"> profile as</font>

652
00:29:08,830 --> 00:29:13,750
I said so the always toxic about the

653
00:29:11,230 --> 00:29:17,110
call and this<font color="#E5E5E5"> security profile is like a</font>

654
00:29:13,750 --> 00:29:19,389
summary of<font color="#E5E5E5"> all we found out about this</font>

655
00:29:17,110 --> 00:29:21,939
is you can see in the information flow

656
00:29:19,389 --> 00:29:24,309
<font color="#E5E5E5">you have</font><font color="#CCCCCC"> a flow from a password to fire</font>

657
00:29:21,940 --> 00:29:28,510
and there is some<font color="#E5E5E5"> kind of</font><font color="#CCCCCC"> transformation</font>

658
00:29:24,309 --> 00:29:35,139
which<font color="#E5E5E5"> is md5 so probably in this case</font>

659
00:29:28,510 --> 00:29:37,179
md5<font color="#CCCCCC"> is not the best</font><font color="#E5E5E5"> so right now we will</font>

660
00:29:35,139 --> 00:29:40,870
<font color="#E5E5E5">have</font><font color="#CCCCCC"> Nikko that</font><font color="#E5E5E5"> will show you some demos</font>

661
00:29:37,179 --> 00:29:43,500
so<font color="#CCCCCC"> oh it's really working our stuff</font><font color="#E5E5E5"> so</font>

662
00:29:40,870 --> 00:29:43,500
<font color="#E5E5E5">welcome</font>

663
00:29:51,050 --> 00:29:57,970
yeah almost<font color="#E5E5E5"> the whole team</font><font color="#CCCCCC"> on</font><font color="#E5E5E5"> stage so</font>

664
00:29:53,750 --> 00:30:02,360
next year<font color="#CCCCCC"> well you get invited again you</font>

665
00:29:57,970 --> 00:30:02,870
if you get invited<font color="#CCCCCC"> again you will demo</font>

666
00:30:02,360 --> 00:30:05,689
<font color="#CCCCCC">stoom</font>

667
00:30:02,870 --> 00:30:09,559
right so the<font color="#E5E5E5"> first</font><font color="#CCCCCC"> slide</font><font color="#E5E5E5"> I wanted to</font>

668
00:30:05,690 --> 00:30:13,309
make is that<font color="#CCCCCC"> yeah I just</font><font color="#E5E5E5"> want to say</font>

669
00:30:09,559 --> 00:30:15,950
that we have only of we are showing<font color="#E5E5E5"> only</font>

670
00:30:13,309 --> 00:30:20,360
<font color="#E5E5E5">a small</font><font color="#CCCCCC"> subset of</font><font color="#E5E5E5"> the features that we</font>

671
00:30:15,950 --> 00:30:25,429
<font color="#CCCCCC">are currently have with the</font><font color="#E5E5E5"> repple we</font>

672
00:30:20,360 --> 00:30:26,870
have any developing<font color="#E5E5E5"> features and also at</font>

673
00:30:25,429 --> 00:30:30,040
the<font color="#CCCCCC"> very moment someone is sitting in</font>

674
00:30:26,870 --> 00:30:38,479
<font color="#E5E5E5">our basement and working now our ticket</font>

675
00:30:30,040 --> 00:30:41,300
and also all the packs we show and yeah

676
00:30:38,480 --> 00:30:43,190
we don't<font color="#E5E5E5"> show them to just embarrass</font>

677
00:30:41,300 --> 00:30:46,309
people<font color="#CCCCCC"> we love and</font><font color="#E5E5E5"> support open-source</font>

678
00:30:43,190 --> 00:30:51,679
and this is just something I wanted<font color="#E5E5E5"> to</font>

679
00:30:46,309 --> 00:30:54,830
<font color="#E5E5E5">have one a slide all right so where we</font>

680
00:30:51,679 --> 00:30:58,550
<font color="#E5E5E5">are</font><font color="#CCCCCC"> where is the rapid working we're at</font>

681
00:30:54,830 --> 00:31:02,780
<font color="#E5E5E5">will chain are we at the moment and we</font>

682
00:30:58,550 --> 00:31:06,440
are<font color="#E5E5E5"> not in the follow to Matt we are</font>

683
00:31:02,780 --> 00:31:11,440
here with the fingertips<font color="#E5E5E5"> at the</font><font color="#CCCCCC"> CPG at</font>

684
00:31:06,440 --> 00:31:14,780
the graph<font color="#E5E5E5"> so directly querying the graph</font>

685
00:31:11,440 --> 00:31:17,390
<font color="#CCCCCC">why we do this while I'm showing this</font>

686
00:31:14,780 --> 00:31:19,879
this in some<font color="#CCCCCC"> minutes or in some slides</font>

687
00:31:17,390 --> 00:31:20,510
and demoing this you<font color="#E5E5E5"> don't need to use</font>

688
00:31:19,880 --> 00:31:22,730
the wrapper

689
00:31:20,510 --> 00:31:26,120
we have sure we have tools<font color="#CCCCCC"> we have to</font>

690
00:31:22,730 --> 00:31:28,580
<font color="#E5E5E5">Java to see PG PG</font><font color="#CCCCCC"> to ask</font><font color="#E5E5E5"> if you have a</font>

691
00:31:26,120 --> 00:31:30,919
decent code path and you have<font color="#E5E5E5"> a</font>

692
00:31:28,580 --> 00:31:33,409
knowledge base<font color="#E5E5E5"> and you have</font><font color="#CCCCCC"> T some</font>

693
00:31:30,920 --> 00:31:36,950
policy rules<font color="#CCCCCC"> you don't have to use the</font>

694
00:31:33,410 --> 00:31:39,860
wrapper you can just say create a CPG

695
00:31:36,950 --> 00:31:43,660
<font color="#E5E5E5">and get</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> security profile out of the</font>

696
00:31:39,860 --> 00:31:48,860
<font color="#CCCCCC">CPG with our regular command-line tools</font>

697
00:31:43,660 --> 00:31:50,750
<font color="#E5E5E5">all right back to the rebel against if</font>

698
00:31:48,860 --> 00:31:54,850
you aren't familiar with rapper rapper

699
00:31:50,750 --> 00:31:56,890
means<font color="#CCCCCC"> read</font><font color="#E5E5E5"> evaluate print loop it's like</font>

700
00:31:54,850 --> 00:32:02,379
you know<font color="#E5E5E5"> it from</font><font color="#CCCCCC"> peyten is like a prompt</font>

701
00:31:56,890 --> 00:32:04,840
and<font color="#E5E5E5"> yeah our rapper has comes with</font>

702
00:32:02,380 --> 00:32:07,570
several features we<font color="#E5E5E5"> have type checking</font>

703
00:32:04,840 --> 00:32:10,689
so<font color="#E5E5E5"> also tab completion reclined support</font>

704
00:32:07,570 --> 00:32:13,179
we can type to our processes so you

705
00:32:10,690 --> 00:32:17,320
don't have to<font color="#E5E5E5"> you're not</font><font color="#CCCCCC"> jailed into our</font>

706
00:32:13,180 --> 00:32:19,150
tooling<font color="#CCCCCC"> you can process the data with</font>

707
00:32:17,320 --> 00:32:21,730
your favorite whatsoever

708
00:32:19,150 --> 00:32:24,850
<font color="#CCCCCC">maybe pipe into</font><font color="#E5E5E5"> elasticsearch if you are</font>

709
00:32:21,730 --> 00:32:26,500
<font color="#E5E5E5">happy with it</font><font color="#CCCCCC"> you can also extend it you</font>

710
00:32:24,850 --> 00:32:29,889
<font color="#CCCCCC">don't need to interact with it you can</font>

711
00:32:26,500 --> 00:32:31,620
just<font color="#E5E5E5"> start script from the command line</font>

712
00:32:29,890 --> 00:32:37,620
<font color="#E5E5E5">awesome</font>

713
00:32:31,620 --> 00:32:40,449
yeah<font color="#E5E5E5"> all right so to query the graph</font><font color="#CCCCCC"> we</font>

714
00:32:37,620 --> 00:32:43,090
<font color="#CCCCCC">introduce a language named</font><font color="#E5E5E5"> code property</font>

715
00:32:40,450 --> 00:32:44,680
<font color="#E5E5E5">graph language</font><font color="#CCCCCC"> cpg</font><font color="#E5E5E5"> you know it's</font>

716
00:32:43,090 --> 00:32:46,389
<font color="#E5E5E5">actually not a real</font><font color="#CCCCCC"> language it's not</font>

717
00:32:44,680 --> 00:32:51,340
<font color="#E5E5E5">something you need</font><font color="#CCCCCC"> to learn like the</font>

718
00:32:46,390 --> 00:32:54,370
policy<font color="#E5E5E5"> or</font><font color="#CCCCCC"> I don't know sequel rust</font><font color="#E5E5E5"> or</font>

719
00:32:51,340 --> 00:32:57,730
whatsoever<font color="#E5E5E5"> you know it doesn't take much</font>

720
00:32:54,370 --> 00:33:01,300
time at all<font color="#CCCCCC"> just a few minutes</font><font color="#E5E5E5"> and</font>

721
00:32:57,730 --> 00:33:04,360
you're in there and<font color="#E5E5E5"> what it offers</font>

722
00:33:01,300 --> 00:33:06,460
it offers here straight from<font color="#CCCCCC"> the</font>

723
00:33:04,360 --> 00:33:08,080
<font color="#CCCCCC">command-line information all the</font>

724
00:33:06,460 --> 00:33:10,480
information you need initially from a

725
00:33:08,080 --> 00:33:13,300
from an<font color="#E5E5E5"> application like namespaces</font>

726
00:33:10,480 --> 00:33:15,730
classes methods<font color="#CCCCCC"> locals members method</font>

727
00:33:13,300 --> 00:33:19,530
<font color="#E5E5E5">returns whatsoever everything you want</font>

728
00:33:15,730 --> 00:33:23,230
you can use<font color="#CCCCCC"> reg X</font><font color="#E5E5E5"> sure you can trigger</font>

729
00:33:19,530 --> 00:33:24,940
you<font color="#CCCCCC"> can find out about data flows</font><font color="#E5E5E5"> and if</font>

730
00:33:23,230 --> 00:33:29,050
you want you<font color="#E5E5E5"> can also load policies on</font>

731
00:33:24,940 --> 00:33:32,470
the fly so the first project<font color="#E5E5E5"> I want to</font>

732
00:33:29,050 --> 00:33:36,490
show it's a demo project we<font color="#CCCCCC"> introduced</font>

733
00:33:32,470 --> 00:33:39,490
<font color="#E5E5E5">for ourselves</font><font color="#CCCCCC"> it's just to train our</font>

734
00:33:36,490 --> 00:33:43,270
tools to<font color="#E5E5E5"> work for towards and it is</font>

735
00:33:39,490 --> 00:33:45,940
based on<font color="#E5E5E5"> customer code it's maybe</font>

736
00:33:43,270 --> 00:33:50,220
artificial but we've seen worse actually

737
00:33:45,940 --> 00:33:50,220
<font color="#E5E5E5">so let's</font>

738
00:33:55,860 --> 00:34:01,678
all right I already<font color="#CCCCCC"> created</font><font color="#E5E5E5"> a CPG with</font>

739
00:33:58,860 --> 00:34:05,010
our from our<font color="#CCCCCC"> jar is</font><font color="#E5E5E5"> a spring Bouchard</font>

740
00:34:01,679 --> 00:34:06,960
spring would itself create start<font color="#CCCCCC"> of our</font>

741
00:34:05,010 --> 00:34:12,929
<font color="#CCCCCC">army that which you can execute from the</font>

742
00:34:06,960 --> 00:34:16,679
command line yeah<font color="#E5E5E5"> and you don't need</font><font color="#CCCCCC"> a</font>

743
00:34:12,929 --> 00:34:20,220
<font color="#E5E5E5">tomcat</font><font color="#CCCCCC"> whatsoever in it and</font><font color="#E5E5E5"> I'm jump</font>

744
00:34:16,679 --> 00:34:22,500
right in I'm loading the<font color="#CCCCCC"> cpg yes into</font>

745
00:34:20,219 --> 00:34:27,959
the<font color="#CCCCCC"> wrapper and</font><font color="#E5E5E5"> I'm ready to to query</font>

746
00:34:22,500 --> 00:34:30,300
the yeah the application internals like

747
00:34:27,960 --> 00:34:34,679
namespaces<font color="#E5E5E5"> here you can see</font><font color="#CCCCCC"> named</font>

748
00:34:30,300 --> 00:34:38,159
completion<font color="#E5E5E5"> and there you go you see the</font>

749
00:34:34,679 --> 00:34:41,849
name<font color="#E5E5E5"> all the name spaces which are</font>

750
00:34:38,159 --> 00:34:49,440
packages in this case and you<font color="#E5E5E5"> can go</font>

751
00:34:41,849 --> 00:34:49,770
down to<font color="#E5E5E5"> class methods and so on and so</font>

752
00:34:49,440 --> 00:34:55,720
on

753
00:34:49,770 --> 00:35:03,099
<font color="#E5E5E5">and as I said you can</font><font color="#CCCCCC"> use the</font>

754
00:34:55,719 --> 00:35:06,098
<font color="#E5E5E5">rags let's see what do</font><font color="#CCCCCC"> we</font><font color="#E5E5E5"> have let's do</font>

755
00:35:03,099 --> 00:35:10,119
<font color="#E5E5E5">another example actually</font><font color="#CCCCCC"> I'm starting</font>

756
00:35:06,099 --> 00:35:12,339
with methods<font color="#E5E5E5"> most of the cases and go</font>

757
00:35:10,119 --> 00:35:19,290
for a full<font color="#E5E5E5"> name you can match the exact</font>

758
00:35:12,339 --> 00:35:19,290
full name or<font color="#CCCCCC"> just a powerful name and</font><font color="#E5E5E5"> I</font>

759
00:35:19,740 --> 00:35:25,390
request<font color="#E5E5E5"> this is something you want to</font>

760
00:35:23,170 --> 00:35:27,089
probably<font color="#E5E5E5"> have initially were you looking</font>

761
00:35:25,390 --> 00:35:34,319
for initially if you are analyzing<font color="#E5E5E5"> a</font>

762
00:35:27,089 --> 00:35:37,000
binary<font color="#CCCCCC"> or a tool and</font><font color="#E5E5E5"> you immediately get</font>

763
00:35:34,319 --> 00:35:43,090
error messages<font color="#CCCCCC"> so you don't have</font><font color="#E5E5E5"> to you</font>

764
00:35:37,000 --> 00:35:48,580
<font color="#E5E5E5">don't fire a query and get errors</font><font color="#CCCCCC"> half</font>

765
00:35:43,090 --> 00:35:54,280
<font color="#E5E5E5">often hour later but it should see a</font>

766
00:35:48,580 --> 00:35:58,330
typo<font color="#CCCCCC"> alright so and</font><font color="#E5E5E5"> now we see</font><font color="#CCCCCC"> all the</font>

767
00:35:54,280 --> 00:36:04,500
methods including some we are<font color="#E5E5E5"> including</font>

768
00:35:58,330 --> 00:36:06,940
<font color="#CCCCCC">requests somewhere like web</font><font color="#E5E5E5"> request yeah</font>

769
00:36:04,500 --> 00:36:13,030
<font color="#E5E5E5">request attributes which is maybe not</font>

770
00:36:06,940 --> 00:36:14,440
<font color="#E5E5E5">that interesting and</font><font color="#CCCCCC"> told you we can we</font>

771
00:36:13,030 --> 00:36:16,960
can trigger data flows we can find

772
00:36:14,440 --> 00:36:23,620
figure out about reason<font color="#E5E5E5"> about data flows</font>

773
00:36:16,960 --> 00:36:28,510
in this<font color="#CCCCCC"> fruit or apple and therefore I'm</font>

774
00:36:23,620 --> 00:36:31,240
using<font color="#E5E5E5"> our request as data flow object so</font>

775
00:36:28,510 --> 00:36:35,140
every method<font color="#E5E5E5"> that contains requests in</font>

776
00:36:31,240 --> 00:36:37,029
<font color="#E5E5E5">the name and has parameters</font><font color="#CCCCCC"> I use the</font>

777
00:36:35,140 --> 00:36:38,950
parameters as data flow object as a

778
00:36:37,030 --> 00:36:41,040
source<font color="#E5E5E5"> and we want to start our doubt</font>

779
00:36:38,950 --> 00:36:47,109
data flow tracking from there on and

780
00:36:41,040 --> 00:36:51,820
let's say<font color="#E5E5E5"> you're using</font><font color="#CCCCCC"> feed object which</font>

781
00:36:47,110 --> 00:36:54,190
is our religion<font color="#E5E5E5"> interest</font><font color="#CCCCCC"> it's a general</font>

782
00:36:51,820 --> 00:36:59,620
method<font color="#E5E5E5"> which is really interesting</font>

783
00:36:54,190 --> 00:37:02,440
drawing a pen test so as a thing<font color="#E5E5E5"> and we</font>

784
00:36:59,620 --> 00:37:08,279
<font color="#CCCCCC">defined our source or sink you say</font>

785
00:37:02,440 --> 00:37:11,670
reachable by and there you go<font color="#E5E5E5"> so we</font>

786
00:37:08,280 --> 00:37:15,780
<font color="#CCCCCC">found several flows and one of them is</font>

787
00:37:11,670 --> 00:37:18,490
as an<font color="#E5E5E5"> example do post login and we see</font>

788
00:37:15,780 --> 00:37:21,640
<font color="#E5E5E5">our parameters coming</font><font color="#CCCCCC"> in which</font><font color="#E5E5E5"> is named</font>

789
00:37:18,490 --> 00:37:24,910
<font color="#E5E5E5">out and you can see the line number</font>

790
00:37:21,640 --> 00:37:27,549
which is actually matching<font color="#CCCCCC"> yeah it gets</font>

791
00:37:24,910 --> 00:37:31,990
<font color="#E5E5E5">decoded from it gets decoded basics it</font>

792
00:37:27,550 --> 00:37:35,650
gets six<font color="#E5E5E5"> basics before recorded then it</font>

793
00:37:31,990 --> 00:37:40,470
gets assigned and ends up in<font color="#E5E5E5"> the end in</font>

794
00:37:35,650 --> 00:37:43,060
read object<font color="#E5E5E5"> so just with the two queries</font>

795
00:37:40,470 --> 00:37:46,720
and or just<font color="#CCCCCC"> with</font><font color="#E5E5E5"> three queries three</font>

796
00:37:43,060 --> 00:37:49,590
command line three commands you<font color="#E5E5E5"> can</font>

797
00:37:46,720 --> 00:37:52,779
reason about this<font color="#E5E5E5"> this method and what</font>

798
00:37:49,590 --> 00:37:55,290
it eventually does what<font color="#E5E5E5"> were what could</font>

799
00:37:52,780 --> 00:37:55,290
happen there

800
00:38:01,440 --> 00:38:12,549
okay this is<font color="#CCCCCC"> actually built on a</font>

801
00:38:05,729 --> 00:38:24,968
customer code we saw some slides<font color="#E5E5E5"> so this</font>

802
00:38:12,549 --> 00:38:27,969
was a basic demo with artificial code<font color="#CCCCCC"> so</font>

803
00:38:24,969 --> 00:38:32,469
you saw<font color="#CCCCCC"> data flow tracking from source</font>

804
00:38:27,969 --> 00:38:37,559
to sink<font color="#CCCCCC"> you saw some filtering</font><font color="#E5E5E5"> you sauce</font>

805
00:38:32,469 --> 00:38:40,329
<font color="#CCCCCC">Xun tags how you can filter for eggs</font><font color="#E5E5E5"> and</font>

806
00:38:37,559 --> 00:38:43,989
then<font color="#E5E5E5"> you may be asked how can can I have</font>

807
00:38:40,329 --> 00:38:51,819
more<font color="#CCCCCC"> complex queries maybe I want</font><font color="#E5E5E5"> to</font>

808
00:38:43,989 --> 00:38:54,279
<font color="#E5E5E5">have a method name maybe I want to</font><font color="#CCCCCC"> have</font>

809
00:38:51,819 --> 00:38:58,150
<font color="#E5E5E5">all the parameters of a method warm a</font>

810
00:38:54,279 --> 00:39:01,959
<font color="#CCCCCC">worn which is caught by a method in</font>

811
00:38:58,150 --> 00:39:03,999
<font color="#E5E5E5">which the parameter get in which the</font>

812
00:39:01,959 --> 00:39:10,930
method<font color="#E5E5E5"> get a door is</font><font color="#CCCCCC"> caught</font><font color="#E5E5E5"> with this</font>

813
00:39:03,999 --> 00:39:13,359
very parameter X custom error so it

814
00:39:10,930 --> 00:39:15,129
<font color="#CCCCCC">might</font><font color="#E5E5E5"> be interesting</font><font color="#CCCCCC"> for you</font><font color="#E5E5E5"> okay is</font>

815
00:39:13,359 --> 00:39:18,910
there a function where you<font color="#E5E5E5"> have get</font>

816
00:39:15,130 --> 00:39:21,640
error in it and is there<font color="#CCCCCC"> a logging</font>

817
00:39:18,910 --> 00:39:22,839
whatsoever in it and maybe you can<font color="#E5E5E5"> find</font>

818
00:39:21,640 --> 00:39:24,069
<font color="#E5E5E5">out</font><font color="#CCCCCC"> okay</font>

819
00:39:22,839 --> 00:39:27,308
they're reading<font color="#CCCCCC"> the header they are</font>

820
00:39:24,069 --> 00:39:29,140
logging<font color="#E5E5E5"> it and</font><font color="#CCCCCC"> a custom error can</font><font color="#E5E5E5"> be in</font>

821
00:39:27,309 --> 00:39:34,569
<font color="#E5E5E5">this case a token or something else</font>

822
00:39:29,140 --> 00:39:38,009
which we also saw in customer code<font color="#E5E5E5"> all</font>

823
00:39:34,569 --> 00:39:41,199
<font color="#E5E5E5">right so then next demo is</font><font color="#CCCCCC"> comments i/o</font>

824
00:39:38,009 --> 00:39:49,930
which<font color="#E5E5E5"> is</font><font color="#CCCCCC"> maybe known it's a very thin</font>

825
00:39:41,199 --> 00:39:53,069
layer<font color="#CCCCCC"> of fiber power and it has</font><font color="#E5E5E5"> we call</font>

826
00:39:49,930 --> 00:40:00,279
it parameter injection in it authorities

827
00:39:53,069 --> 00:40:02,619
<font color="#E5E5E5">they are widely used and</font><font color="#CCCCCC"> know and here</font>

828
00:40:00,279 --> 00:40:05,099
<font color="#CCCCCC">I'm also</font><font color="#E5E5E5"> loading the</font><font color="#CCCCCC"> cpg straight</font>

829
00:40:02,619 --> 00:40:05,099
through a wrapper

830
00:40:05,740 --> 00:40:16,229
and in<font color="#E5E5E5"> this case we</font><font color="#CCCCCC"> are searching</font><font color="#E5E5E5"> for</font>

831
00:40:11,640 --> 00:40:16,230
<font color="#E5E5E5">the</font><font color="#CCCCCC"> exit permit method</font>

832
00:40:30,010 --> 00:40:39,650
and we found one<font color="#CCCCCC"> random method and also</font>

833
00:40:36,320 --> 00:40:41,900
there's also another feature<font color="#CCCCCC"> of the</font>

834
00:40:39,650 --> 00:40:47,500
rubber you can you can go up<font color="#E5E5E5"> you can</font>

835
00:40:41,900 --> 00:40:57,110
<font color="#E5E5E5">search</font><font color="#CCCCCC"> for callers and you find a caller</font>

836
00:40:47,500 --> 00:41:01,930
<font color="#E5E5E5">you can find a color but this time we</font>

837
00:40:57,110 --> 00:41:13,340
<font color="#E5E5E5">are using let's see</font><font color="#CCCCCC"> Unix</font>

838
00:41:01,930 --> 00:41:18,080
right and so on<font color="#CCCCCC"> and so on so you get the</font>

839
00:41:13,340 --> 00:41:19,700
<font color="#E5E5E5">principal so you can interactively get</font>

840
00:41:18,080 --> 00:41:22,279
information from from the code you

841
00:41:19,700 --> 00:41:24,169
sometimes we have<font color="#CCCCCC"> also methods</font><font color="#E5E5E5"> which are</font>

842
00:41:22,280 --> 00:41:27,200
interesting but have no color you can

843
00:41:24,170 --> 00:41:34,100
easily reason about that<font color="#E5E5E5"> and find out if</font>

844
00:41:27,200 --> 00:41:37,970
they have a<font color="#CCCCCC"> caller or not but yeah as</font>

845
00:41:34,100 --> 00:41:40,480
you guess there's also a source matching

846
00:41:37,970 --> 00:41:40,480
to the<font color="#E5E5E5"> sink</font>

847
00:41:50,380 --> 00:42:10,030
well it takes a few seconds ah<font color="#CCCCCC"> so we see</font>

848
00:42:04,390 --> 00:42:13,720
we have parameter in free space KB which

849
00:42:10,030 --> 00:42:16,630
is a string named path and it<font color="#E5E5E5"> eventually</font>

850
00:42:13,720 --> 00:42:19,509
ends up in<font color="#CCCCCC"> Ex leg so this is</font><font color="#E5E5E5"> something</font>

851
00:42:16,630 --> 00:42:21,490
in<font color="#CCCCCC"> this</font><font color="#E5E5E5"> wood this</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> something</font><font color="#CCCCCC"> that</font>

852
00:42:19,510 --> 00:42:24,960
would interest<font color="#E5E5E5"> me as a pen tester or</font>

853
00:42:21,490 --> 00:42:36,270
analyst or<font color="#E5E5E5"> yeah I said the power</font>

854
00:42:24,960 --> 00:42:39,880
whatsoever and eventually<font color="#E5E5E5"> yeah this is</font>

855
00:42:36,270 --> 00:42:44,560
<font color="#CCCCCC">you off the flow but you</font><font color="#E5E5E5"> saw the flow</font>

856
00:42:39,880 --> 00:42:47,190
<font color="#E5E5E5">and you know what what we can do with</font>

857
00:42:44,560 --> 00:42:51,430
this flow is<font color="#E5E5E5"> we can inject parameters</font>

858
00:42:47,190 --> 00:42:53,470
<font color="#E5E5E5">you you cannot manage to execute</font>

859
00:42:51,430 --> 00:42:58,569
actually code or inject code but<font color="#CCCCCC"> you can</font>

860
00:42:53,470 --> 00:43:00,609
manage<font color="#E5E5E5"> to I don't know just just pretend</font>

861
00:42:58,570 --> 00:43:04,330
<font color="#E5E5E5">a different disk size which can</font><font color="#CCCCCC"> lead to</font>

862
00:43:00,610 --> 00:43:07,600
<font color="#E5E5E5">denial of service so and as</font><font color="#CCCCCC"> we said it</font>

863
00:43:04,330 --> 00:43:13,870
<font color="#CCCCCC">is a</font><font color="#E5E5E5"> this a minor finding yet a good</font>

864
00:43:07,600 --> 00:43:15,580
example for data flow<font color="#CCCCCC"> tracking</font><font color="#E5E5E5"> so we</font>

865
00:43:13,870 --> 00:43:18,609
found<font color="#CCCCCC"> the flow interactively on the</font>

866
00:43:15,580 --> 00:43:21,670
<font color="#CCCCCC">rebel and during some room</font><font color="#E5E5E5"> some doing</font>

867
00:43:18,610 --> 00:43:25,270
some queries<font color="#E5E5E5"> but you then maybe you</font>

868
00:43:21,670 --> 00:43:28,990
don't<font color="#CCCCCC"> want</font><font color="#E5E5E5"> to query or do this every</font>

869
00:43:25,270 --> 00:43:31,720
time<font color="#E5E5E5"> for</font><font color="#CCCCCC"> every new jar every new binary</font>

870
00:43:28,990 --> 00:43:33,669
you get you want<font color="#CCCCCC"> to have this</font>

871
00:43:31,720 --> 00:43:36,640
information stored as I<font color="#E5E5E5"> said somewhere</font>

872
00:43:33,670 --> 00:43:38,620
else in<font color="#E5E5E5"> the policy and this is how it</font>

873
00:43:36,640 --> 00:43:44,500
would<font color="#E5E5E5"> look like it's also pretty</font>

874
00:43:38,620 --> 00:43:48,279
straightforward<font color="#E5E5E5"> yeah but mark already</font>

875
00:43:44,500 --> 00:43:53,410
<font color="#E5E5E5">talked about the policy right next demo</font>

876
00:43:48,280 --> 00:43:57,280
is open<font color="#CCCCCC"> Sava</font><font color="#E5E5E5"> opens always a Java</font>

877
00:43:53,410 --> 00:43:59,500
framework for rapid development<font color="#CCCCCC"> it has</font>

878
00:43:57,280 --> 00:44:02,539
all foreign foreign downloads a week

879
00:43:59,500 --> 00:44:09,869
<font color="#E5E5E5">it's hard to find</font>

880
00:44:02,539 --> 00:44:15,269
active Java CMS frameworks that<font color="#CCCCCC"> are used</font>

881
00:44:09,869 --> 00:44:19,499
and you can yeah just yeah it's almost

882
00:44:15,269 --> 00:44:23,549
Java is dying in the CMS platform

883
00:44:19,499 --> 00:44:28,890
whatever we open<font color="#E5E5E5"> summer comes with</font><font color="#CCCCCC"> an</font>

884
00:44:23,549 --> 00:44:32,910
invoice demo and this<font color="#E5E5E5"> demo has CSV</font>

885
00:44:28,890 --> 00:44:35,640
injection<font color="#CCCCCC"> often</font><font color="#E5E5E5"> sees reinjection</font><font color="#CCCCCC"> it's</font>

886
00:44:32,910 --> 00:44:38,038
not<font color="#E5E5E5"> people say</font><font color="#CCCCCC"> okay I don't</font><font color="#E5E5E5"> care about</font>

887
00:44:35,640 --> 00:44:41,940
CSP injection but CSV injection often

888
00:44:38,039 --> 00:44:46,980
pops up and you what what it says is<font color="#CCCCCC"> you</font>

889
00:44:41,940 --> 00:44:50,069
can insert formulas that<font color="#E5E5E5"> are</font><font color="#CCCCCC"> interpreted</font>

890
00:44:46,980 --> 00:44:53,519
<font color="#CCCCCC">by Excel or LibreOffice</font><font color="#E5E5E5"> and as soon as</font>

891
00:44:50,069 --> 00:44:56,700
<font color="#E5E5E5">someone exports data from the page and</font>

892
00:44:53,519 --> 00:45:01,399
opens this exported data in with Libre

893
00:44:56,700 --> 00:45:07,529
Office or Excel<font color="#CCCCCC"> code gets executed or</font>

894
00:45:01,400 --> 00:45:24,779
yeah<font color="#CCCCCC"> you can alter the sheets</font><font color="#E5E5E5"> right so</font>

895
00:45:07,529 --> 00:45:28,650
we demoed this so as you can see<font color="#CCCCCC"> I added</font>

896
00:45:24,779 --> 00:45:33,450
a parameter a payload<font color="#E5E5E5"> according</font><font color="#CCCCCC"> to the</font>

897
00:45:28,650 --> 00:45:38,940
<font color="#E5E5E5">CVE I showed from 2018 and I saved the</font>

898
00:45:33,450 --> 00:45:47,689
invoice right<font color="#E5E5E5"> that's enough for here let</font>

899
00:45:38,940 --> 00:45:51,950
<font color="#E5E5E5">me say generate</font><font color="#CCCCCC"> excel you export it</font><font color="#E5E5E5"> and</font>

900
00:45:47,690 --> 00:45:51,950
as you<font color="#E5E5E5"> see this is</font><font color="#CCCCCC"> my</font>

901
00:46:02,530 --> 00:46:04,590
you

902
00:46:41,970 --> 00:46:50,499
some demo<font color="#CCCCCC"> 5 nights my god</font>

903
00:46:47,900 --> 00:46:50,499
<font color="#CCCCCC">right</font>

904
00:46:52,089 --> 00:47:03,180
yep<font color="#CCCCCC"> so I'm loading</font><font color="#E5E5E5"> open</font><font color="#CCCCCC"> sama again and</font>

905
00:47:00,459 --> 00:47:07,739
we<font color="#E5E5E5"> don't have that much time left</font><font color="#CCCCCC"> so</font><font color="#E5E5E5"> I'm</font>

906
00:47:03,180 --> 00:47:07,739
skipping the search process for this

907
00:47:09,930 --> 00:47:36,239
just using your<font color="#CCCCCC"> sinking</font><font color="#E5E5E5"> source so it</font>

908
00:47:22,660 --> 00:47:44,439
also takes some<font color="#CCCCCC"> time mean why</font><font color="#E5E5E5"> just</font><font color="#CCCCCC"> is</font>

909
00:47:36,239 --> 00:47:47,559
<font color="#E5E5E5">and as you</font><font color="#CCCCCC"> can</font><font color="#E5E5E5"> see we found out that</font>

910
00:47:44,439 --> 00:47:50,828
there's<font color="#E5E5E5"> requests coming in to get</font>

911
00:47:47,559 --> 00:47:56,469
requests and going straight<font color="#CCCCCC"> through</font><font color="#E5E5E5"> this</font>

912
00:47:50,829 --> 00:47:59,349
through this<font color="#CCCCCC"> method to CSV table</font><font color="#E5E5E5"> data</font>

913
00:47:56,469 --> 00:48:01,809
gets the table model<font color="#E5E5E5"> the data from table</font>

914
00:47:59,349 --> 00:48:04,479
model<font color="#E5E5E5"> gets pulled and appended to a</font>

915
00:48:01,809 --> 00:48:10,569
string<font color="#E5E5E5"> so it's just going</font><font color="#CCCCCC"> through a</font>

916
00:48:04,479 --> 00:48:13,390
table<font color="#CCCCCC"> and it eventually gets written out</font>

917
00:48:10,569 --> 00:48:17,049
<font color="#CCCCCC">looking to a customer's by tor tor users</font>

918
00:48:13,390 --> 00:48:32,910
<font color="#CCCCCC">five yeah and here again</font><font color="#E5E5E5"> we see the</font>

919
00:48:17,049 --> 00:48:32,910
<font color="#CCCCCC">append</font><font color="#E5E5E5"> under which should not be okay</font>

920
00:48:34,289 --> 00:48:40,859
<font color="#CCCCCC">okay there's another</font><font color="#E5E5E5"> success and</font>

921
00:48:48,680 --> 00:48:50,740
you

922
00:48:55,350 --> 00:48:57,410
you

923
00:49:16,590 --> 00:49:24,860
but I'm not going<font color="#CCCCCC"> to demo them now</font><font color="#E5E5E5"> just</font>

924
00:49:22,020 --> 00:49:27,720
as a yeah

925
00:49:24,860 --> 00:49:30,120
then we'll face lights and this<font color="#E5E5E5"> is one</font>

926
00:49:27,720 --> 00:49:35,759
flow how you can which helped<font color="#E5E5E5"> us</font><font color="#CCCCCC"> to find</font>

927
00:49:30,120 --> 00:49:38,310
<font color="#E5E5E5">the CSS triggered by the import</font><font color="#CCCCCC"> yeah we</font>

928
00:49:35,760 --> 00:49:42,150
have<font color="#CCCCCC"> some other ones we</font><font color="#E5E5E5"> found but</font><font color="#CCCCCC"> we</font>

929
00:49:38,310 --> 00:49:44,790
cannot cover<font color="#E5E5E5"> now this is</font><font color="#CCCCCC"> grata CMS</font><font color="#E5E5E5"> also</font>

930
00:49:42,150 --> 00:49:47,610
exercise and open can distort<font color="#CCCCCC"> exercise</font>

931
00:49:44,790 --> 00:49:50,390
there's actually more<font color="#CCCCCC"> but we don't have</font>

932
00:49:47,610 --> 00:49:50,390
<font color="#E5E5E5">that much time left</font>

933
00:49:50,540 --> 00:49:59,340
yeah so this<font color="#E5E5E5"> was the demo block and</font>

934
00:49:56,570 --> 00:50:01,320
maybe someone is asking yeah where's<font color="#CCCCCC"> the</font>

935
00:49:59,340 --> 00:50:03,960
cloud where's the cloud<font color="#E5E5E5"> so we are</font>

936
00:50:01,320 --> 00:50:06,290
<font color="#CCCCCC">startup where's the cloud and we do</font><font color="#E5E5E5"> have</font>

937
00:50:03,960 --> 00:50:06,290
a cloud

938
00:50:08,150 --> 00:50:16,530
<font color="#CCCCCC">hidden behind</font><font color="#E5E5E5"> the screenshots is our UI</font>

939
00:50:11,510 --> 00:50:20,400
<font color="#E5E5E5">so if you want to have your files</font>

940
00:50:16,530 --> 00:50:21,200
<font color="#E5E5E5">analyzed and have fancy gooeys we can do</font>

941
00:50:20,400 --> 00:50:25,410
<font color="#E5E5E5">that</font>

942
00:50:21,200 --> 00:50:32,129
just ask<font color="#E5E5E5"> us and also in inside</font><font color="#CCCCCC"> the cool</font>

943
00:50:25,410 --> 00:50:33,359
you can<font color="#E5E5E5"> see the data flows</font><font color="#CCCCCC"> finally</font>

944
00:50:32,130 --> 00:50:36,450
what's coming next

945
00:50:33,360 --> 00:50:40,050
yeah we keep on we keep<font color="#E5E5E5"> working</font><font color="#CCCCCC"> on</font>

946
00:50:36,450 --> 00:50:42,000
features<font color="#E5E5E5"> we keep working on other</font>

947
00:50:40,050 --> 00:50:43,920
languages<font color="#E5E5E5"> so Joe is just</font><font color="#CCCCCC"> beginning</font>

948
00:50:42,000 --> 00:50:47,250
<font color="#E5E5E5">and we have other languages in the</font>

949
00:50:43,920 --> 00:51:00,150
pipeline yeah<font color="#E5E5E5"> also improving policies</font>

950
00:50:47,250 --> 00:51:06,950
and eventually maybe be<font color="#E5E5E5"> able to maybe</font>

951
00:51:00,150 --> 00:51:06,950
files<font color="#E5E5E5"> can</font><font color="#CCCCCC"> sell something yeah thanks</font>

952
00:51:07,850 --> 00:51:14,610
[Applause]

953
00:51:18,310 --> 00:51:31,790
if anybody has a question<font color="#CCCCCC"> I so it's a</font>

954
00:51:29,030 --> 00:51:33,970
one one little<font color="#E5E5E5"> question regarding for</font>

955
00:51:31,790 --> 00:51:36,500
instance<font color="#E5E5E5"> Java being a typed language and</font>

956
00:51:33,970 --> 00:51:39,470
do you actually have to<font color="#E5E5E5"> care about the</font>

957
00:51:36,500 --> 00:51:42,200
<font color="#CCCCCC">types</font><font color="#E5E5E5"> that much because</font><font color="#CCCCCC"> I could imagine</font>

958
00:51:39,470 --> 00:51:45,319
<font color="#E5E5E5">like for the class operator if you match</font>

959
00:51:42,200 --> 00:51:47,299
it<font color="#CCCCCC"> to a function</font><font color="#E5E5E5"> it's actually both</font>

960
00:51:45,320 --> 00:51:51,080
string concatenation<font color="#E5E5E5"> and plus operation</font>

961
00:51:47,300 --> 00:51:53,090
<font color="#E5E5E5">on numbers whether one might have</font>

962
00:51:51,080 --> 00:51:54,200
<font color="#CCCCCC">negative results on the training</font><font color="#E5E5E5"> where</font>

963
00:51:53,090 --> 00:51:56,930
the other one would have<font color="#CCCCCC"> positive</font>

964
00:51:54,200 --> 00:51:59,379
results<font color="#CCCCCC"> do you do actually</font><font color="#E5E5E5"> have</font><font color="#CCCCCC"> that</font>

965
00:51:56,930 --> 00:52:06,549
already<font color="#E5E5E5"> built in or is</font><font color="#CCCCCC"> missing</font>

966
00:51:59,380 --> 00:52:06,550
especially<font color="#CCCCCC"> this method is just just met</font>

967
00:52:07,390 --> 00:52:23,200
<font color="#E5E5E5">and since you know it's not about the</font>

968
00:52:20,930 --> 00:52:25,250
memory it's more about<font color="#E5E5E5"> typing the stuff</font>

969
00:52:23,200 --> 00:52:29,359
<font color="#E5E5E5">somewhere in your graphs</font>

970
00:52:25,250 --> 00:52:31,280
<font color="#CCCCCC">that's the are you considering the types</font>

971
00:52:29,360 --> 00:52:39,740
at all of the input<font color="#CCCCCC"> data to</font><font color="#E5E5E5"> some</font>

972
00:52:31,280 --> 00:52:41,540
<font color="#CCCCCC">function to distinguish by type so</font><font color="#E5E5E5"> we</font>

973
00:52:39,740 --> 00:52:43,250
because<font color="#E5E5E5"> a method might act differently</font>

974
00:52:41,540 --> 00:52:44,840
depending<font color="#E5E5E5"> on the</font><font color="#CCCCCC"> type of the input yeah</font>

975
00:52:43,250 --> 00:52:47,510
so you<font color="#CCCCCC"> have the all of the types in the</font>

976
00:52:44,840 --> 00:52:49,970
graph<font color="#E5E5E5"> it's like a</font><font color="#CCCCCC"> type</font><font color="#E5E5E5"> ast you can use</font>

977
00:52:47,510 --> 00:52:52,400
it you<font color="#CCCCCC"> don't have to</font><font color="#E5E5E5"> when it comes to</font>

978
00:52:49,970 --> 00:52:53,779
annotations<font color="#CCCCCC"> you can write</font><font color="#E5E5E5"> very generic</font>

979
00:52:52,400 --> 00:52:56,860
ones that don't<font color="#E5E5E5"> care about the type and</font>

980
00:52:53,780 --> 00:52:59,860
you<font color="#CCCCCC"> can write caring about the type</font>

981
00:52:56,860 --> 00:52:59,860
<font color="#E5E5E5">Thanks</font>

982
00:53:04,630 --> 00:53:10,580
think it was<font color="#CCCCCC"> a good presentation</font>

983
00:53:07,210 --> 00:53:13,790
speaking about<font color="#CCCCCC"> shower</font><font color="#E5E5E5"> in general is it</font>

984
00:53:10,580 --> 00:53:15,799
possible to find a path from source to

985
00:53:13,790 --> 00:53:20,240
sink<font color="#E5E5E5"> if the application is using</font>

986
00:53:15,800 --> 00:53:22,310
reflection<font color="#E5E5E5"> for internal calls</font><font color="#CCCCCC"> yeah we</font>

987
00:53:20,240 --> 00:53:25,310
have<font color="#CCCCCC"> some cases where we modeled</font><font color="#E5E5E5"> that as</font>

988
00:53:22,310 --> 00:53:29,450
well<font color="#E5E5E5"> but yeah is it is a lot</font><font color="#CCCCCC"> more</font>

989
00:53:25,310 --> 00:53:33,170
<font color="#CCCCCC">difficult with reflection maybe we can</font>

990
00:53:29,450 --> 00:53:35,868
show<font color="#CCCCCC"> you</font><font color="#E5E5E5"> some of this offline how we</font>

991
00:53:33,170 --> 00:53:38,060
went about<font color="#E5E5E5"> that but yeah reflection is</font>

992
00:53:35,869 --> 00:53:43,869
definitely something<font color="#E5E5E5"> tricky for static</font>

993
00:53:38,060 --> 00:53:43,869
analysis always<font color="#E5E5E5"> and yeah thank you</font>

994
00:53:51,700 --> 00:53:55,480
[Applause]

