1
00:00:08,480 --> 00:00:10,400
hello everybody welcome to my talk about

2
00:00:10,400 --> 00:00:12,080
my project called android project

3
00:00:12,080 --> 00:00:12,880
creator

4
00:00:12,880 --> 00:00:15,120
which is not the most creative way but i

5
00:00:15,120 --> 00:00:16,640
think it conveys the message quite

6
00:00:16,640 --> 00:00:18,000
clearly

7
00:00:18,000 --> 00:00:20,160
i have a small table of contents for the

8
00:00:20,160 --> 00:00:22,160
talk of today first a bit about myself

9
00:00:22,160 --> 00:00:25,119
who am i then i'll be talking more about

10
00:00:25,119 --> 00:00:25,760
the

11
00:00:25,760 --> 00:00:28,160
analysis of android applications in

12
00:00:28,160 --> 00:00:28,800
short

13
00:00:28,800 --> 00:00:30,800
the layout of a android package also

14
00:00:30,800 --> 00:00:32,558
known as apk

15
00:00:32,558 --> 00:00:36,800
and then how to analyze an apk

16
00:00:36,800 --> 00:00:38,399
because you're starting with a file and

17
00:00:38,399 --> 00:00:40,000
you basically want to end up with the

18
00:00:40,000 --> 00:00:42,320
code you can analyze and work with

19
00:00:42,320 --> 00:00:43,760
you want to understand what's happening

20
00:00:43,760 --> 00:00:45,360
within the application

21
00:00:45,360 --> 00:00:47,440
and then about the decompilation itself

22
00:00:47,440 --> 00:00:50,239
as that is also a process on its own

23
00:00:50,239 --> 00:00:53,199
um then the advantages of android

24
00:00:53,199 --> 00:00:55,520
project creator which is the main part

25
00:00:55,520 --> 00:00:56,399
of the talk

26
00:00:56,399 --> 00:00:58,879
and then there's time for questions if

27
00:00:58,879 --> 00:01:00,399
there are more questions than can be

28
00:01:00,399 --> 00:01:02,079
asked i'll be in the chat after the

29
00:01:02,079 --> 00:01:05,199
talk as well so we can address all the

30
00:01:05,199 --> 00:01:07,040
questions that you might

31
00:01:07,040 --> 00:01:09,520
have about the the tool or the talk

32
00:01:09,520 --> 00:01:11,119
itself

33
00:01:11,119 --> 00:01:14,000
so who am i my name is max gerste i go

34
00:01:14,000 --> 00:01:15,040
by the nickname of

35
00:01:15,040 --> 00:01:18,320
libra on twitter i use the

36
00:01:18,320 --> 00:01:20,960
libra analysis handle for those

37
00:01:20,960 --> 00:01:22,400
interested i'll be sharing the

38
00:01:22,400 --> 00:01:25,119
slides of this presentation later via

39
00:01:25,119 --> 00:01:26,320
twitter

40
00:01:26,320 --> 00:01:28,560
i graduated my bachelor in cyber

41
00:01:28,560 --> 00:01:30,799
security laude in january 2019

42
00:01:30,799 --> 00:01:33,759
in the netherlands during my studies i

43
00:01:33,759 --> 00:01:34,400
worked as a

44
00:01:34,400 --> 00:01:35,759
android malware analyst for thread

45
00:01:35,759 --> 00:01:38,400
fabric i tend to write blogs about

46
00:01:38,400 --> 00:01:40,000
reverse engineering in my spare

47
00:01:40,000 --> 00:01:43,759
time mainly about my

48
00:01:43,759 --> 00:01:45,680
binary analysis course which features a

49
00:01:45,680 --> 00:01:47,280
variety of

50
00:01:47,280 --> 00:01:50,079
articles about reversing and how to

51
00:01:50,079 --> 00:01:51,280
approach that in a

52
00:01:51,280 --> 00:01:55,360
step-by-step manner i write custom

53
00:01:55,360 --> 00:01:58,560
tools that i open source on my github

54
00:01:58,560 --> 00:02:00,479
one of these is android project creator

55
00:02:00,479 --> 00:02:01,759
obviously

56
00:02:01,759 --> 00:02:04,560
i gave a workshop at botcom 2019 about

57
00:02:04,560 --> 00:02:04,880
the

58
00:02:04,880 --> 00:02:07,680
static android model analysis where also

59
00:02:07,680 --> 00:02:09,119
i featured this tool

60
00:02:09,119 --> 00:02:11,760
as part of it and currently i work at

61
00:02:11,760 --> 00:02:13,200
abn amro

62
00:02:13,200 --> 00:02:16,400
at the gcic on the global cyber

63
00:02:16,400 --> 00:02:17,200
intelligence

64
00:02:17,200 --> 00:02:19,840
center where we focus on the outside

65
00:02:19,840 --> 00:02:20,480
threads

66
00:02:20,480 --> 00:02:24,319
and we see for the bank and we provide

67
00:02:24,319 --> 00:02:25,520
timely and actual

68
00:02:25,520 --> 00:02:28,319
intelligence to internal departments we

69
00:02:28,319 --> 00:02:29,520
focus on research

70
00:02:29,520 --> 00:02:31,040
and we also want to give something back

71
00:02:31,040 --> 00:02:33,360
to the community and part of that giving

72
00:02:33,360 --> 00:02:34,080
back is

73
00:02:34,080 --> 00:02:36,319
is a talk such as this to to help other

74
00:02:36,319 --> 00:02:37,360
people

75
00:02:37,360 --> 00:02:41,120
with their research so moving on to the

76
00:02:41,120 --> 00:02:42,000
layout of a

77
00:02:42,000 --> 00:02:44,959
android package one of the important

78
00:02:44,959 --> 00:02:47,120
things is the android manifest

79
00:02:47,120 --> 00:02:50,640
which is a xml file

80
00:02:50,640 --> 00:02:52,720
with a tool like apk tool you can decode

81
00:02:52,720 --> 00:02:53,910
this file from the

82
00:02:53,910 --> 00:02:55,360
[Music]

83
00:02:55,360 --> 00:02:57,360
from the apk itself and there you can

84
00:02:57,360 --> 00:02:59,280
see the permissions that the application

85
00:02:59,280 --> 00:03:00,319
requires

86
00:03:00,319 --> 00:03:02,400
so these applications can be used to

87
00:03:02,400 --> 00:03:04,319
read internal file storage connect to

88
00:03:04,319 --> 00:03:05,599
the internet

89
00:03:05,599 --> 00:03:08,800
use the accessibility service

90
00:03:08,800 --> 00:03:10,640
whatever the application needs that is

91
00:03:10,640 --> 00:03:13,200
defined within the operating system is

92
00:03:13,200 --> 00:03:16,319
in here then you have the classes.dex

93
00:03:16,319 --> 00:03:17,120
file

94
00:03:17,120 --> 00:03:19,120
which basically contains the compiled

95
00:03:19,120 --> 00:03:20,640
classes

96
00:03:20,640 --> 00:03:22,560
now there's a limit as to how many

97
00:03:22,560 --> 00:03:23,760
classes can be in

98
00:03:23,760 --> 00:03:26,560
a single class stoptext file per the

99
00:03:26,560 --> 00:03:28,000
android

100
00:03:28,000 --> 00:03:31,440
operating system so one android package

101
00:03:31,440 --> 00:03:33,599
can have multiple classes.x files in

102
00:03:33,599 --> 00:03:34,560
them

103
00:03:34,560 --> 00:03:37,120
where you have the classes n dot x as a

104
00:03:37,120 --> 00:03:39,920
naming scheme where n is a number

105
00:03:39,920 --> 00:03:42,400
ranging from one upwards i haven't seen

106
00:03:42,400 --> 00:03:45,040
more than two but

107
00:03:45,040 --> 00:03:47,440
theoretically that should be possible

108
00:03:47,440 --> 00:03:48,239
then you have the

109
00:03:48,239 --> 00:03:51,519
resources file dot arsc

110
00:03:51,519 --> 00:03:53,920
and where you can find the embedded

111
00:03:53,920 --> 00:03:55,840
resources which is the views within the

112
00:03:55,840 --> 00:03:56,640
applications

113
00:03:56,640 --> 00:03:59,519
and the menus that you see then you have

114
00:03:59,519 --> 00:04:01,200
the meta in folder

115
00:04:01,200 --> 00:04:03,840
related to certificate information

116
00:04:03,840 --> 00:04:05,120
signed by the developer of the

117
00:04:05,120 --> 00:04:06,560
application

118
00:04:06,560 --> 00:04:09,120
you can often use this in yara rules for

119
00:04:09,120 --> 00:04:10,560
example if you want to match on a

120
00:04:10,560 --> 00:04:12,319
specific developer to see

121
00:04:12,319 --> 00:04:15,680
what was brought out by a certain

122
00:04:15,680 --> 00:04:16,560
developer

123
00:04:16,560 --> 00:04:18,399
if the same certificate is used in a

124
00:04:18,399 --> 00:04:21,199
campaign for example

125
00:04:21,199 --> 00:04:22,639
i mean you have the library folder in

126
00:04:22,639 --> 00:04:24,400
case there are native

127
00:04:24,400 --> 00:04:26,800
files that are used because you can also

128
00:04:26,800 --> 00:04:29,199
write part of the application and see if

129
00:04:29,199 --> 00:04:29,600
you

130
00:04:29,600 --> 00:04:31,759
if you wish to do that and you can

131
00:04:31,759 --> 00:04:32,720
connect it

132
00:04:32,720 --> 00:04:34,960
so the libraries are present in multiple

133
00:04:34,960 --> 00:04:35,919
architectures

134
00:04:35,919 --> 00:04:39,680
32 bits and 64 bits and multiple flavors

135
00:04:39,680 --> 00:04:41,840
of aram as well

136
00:04:41,840 --> 00:04:44,800
these are always the same in terms of

137
00:04:44,800 --> 00:04:45,840
functionality

138
00:04:45,840 --> 00:04:48,000
so if you're reversing and you tend to

139
00:04:48,000 --> 00:04:49,919
prefer 32 bits

140
00:04:49,919 --> 00:04:53,440
over arm for example then

141
00:04:53,440 --> 00:04:54,960
you can pick your flavor and work with

142
00:04:54,960 --> 00:04:57,440
that then you have the

143
00:04:57,440 --> 00:05:00,560
assets folder mostly contains arbitrary

144
00:05:00,560 --> 00:05:01,199
files

145
00:05:01,199 --> 00:05:03,520
that are used within the application

146
00:05:03,520 --> 00:05:05,520
where you can also store an encrypted

147
00:05:05,520 --> 00:05:07,680
classes.dex file which is later loaded

148
00:05:07,680 --> 00:05:09,600
this is a common loading technique in

149
00:05:09,600 --> 00:05:10,960
android malware

150
00:05:10,960 --> 00:05:13,440
and you have the resources folder which

151
00:05:13,440 --> 00:05:15,199
contains the resources that are used in

152
00:05:15,199 --> 00:05:16,720
the application

153
00:05:16,720 --> 00:05:18,880
so you have backgrounds of different

154
00:05:18,880 --> 00:05:20,960
sizes for mobile phones of different

155
00:05:20,960 --> 00:05:22,479
sizes

156
00:05:22,479 --> 00:05:24,400
because downscaling would still require

157
00:05:24,400 --> 00:05:26,320
memory and more processing power than

158
00:05:26,320 --> 00:05:28,000
using several images and just

159
00:05:28,000 --> 00:05:31,600
picking whichever fits best for example

160
00:05:31,600 --> 00:05:33,680
so that leads me to the analysis of an

161
00:05:33,680 --> 00:05:36,240
apk a lot of questions i generally get

162
00:05:36,240 --> 00:05:37,919
are where do i start do i need an

163
00:05:37,919 --> 00:05:38,960
additional phone

164
00:05:38,960 --> 00:05:41,360
or do i need to use an emulator do i

165
00:05:41,360 --> 00:05:43,199
need to work with linux because

166
00:05:43,199 --> 00:05:46,800
that might work better

167
00:05:46,800 --> 00:05:49,440
well where do you start you can start in

168
00:05:49,440 --> 00:05:51,360
a variety of ways

169
00:05:51,360 --> 00:05:54,720
one of the is statically which is

170
00:05:54,720 --> 00:05:56,800
how you can use android project creator

171
00:05:56,800 --> 00:05:58,240
because you convert

172
00:05:58,240 --> 00:06:02,639
the apk into an android studio project

173
00:06:02,639 --> 00:06:04,400
but you can also run it on an emulator

174
00:06:04,400 --> 00:06:06,720
if you want to depends on the goal you

175
00:06:06,720 --> 00:06:08,080
have

176
00:06:08,080 --> 00:06:10,240
when analyzing so do you need an

177
00:06:10,240 --> 00:06:11,759
additional phone

178
00:06:11,759 --> 00:06:13,840
if you're just here to pen test normal

179
00:06:13,840 --> 00:06:14,960
applications

180
00:06:14,960 --> 00:06:16,560
you might want to use a different phone

181
00:06:16,560 --> 00:06:18,960
but you could use your own

182
00:06:18,960 --> 00:06:22,639
however if you're into analyzing malware

183
00:06:22,639 --> 00:06:24,560
then i suggest you do not use your own

184
00:06:24,560 --> 00:06:26,800
phone

185
00:06:26,800 --> 00:06:30,080
and you either use an emulator or

186
00:06:30,080 --> 00:06:33,039
or something different as for the effect

187
00:06:33,039 --> 00:06:33,520
if you

188
00:06:33,520 --> 00:06:36,080
should use linux i would suggest you use

189
00:06:36,080 --> 00:06:38,560
whatever you are most comfortable with

190
00:06:38,560 --> 00:06:41,120
which can be windows linux distribution

191
00:06:41,120 --> 00:06:42,960
any flavor of mac os that you

192
00:06:42,960 --> 00:06:45,440
that you enjoy using because essentially

193
00:06:45,440 --> 00:06:48,240
it's about your way of working and how

194
00:06:48,240 --> 00:06:50,319
you can

195
00:06:50,319 --> 00:06:52,960
use your knowledge the best is obviously

196
00:06:52,960 --> 00:06:53,759
without

197
00:06:53,759 --> 00:06:55,759
restrictions that certain operating

198
00:06:55,759 --> 00:06:57,599
systems impose on you if you don't like

199
00:06:57,599 --> 00:06:59,840
those

200
00:07:00,000 --> 00:07:02,720
so to decompile an apk uh you need

201
00:07:02,720 --> 00:07:04,080
multiple steps

202
00:07:04,080 --> 00:07:06,880
uh you need to decode the apk twice if

203
00:07:06,880 --> 00:07:08,479
you want to get all information

204
00:07:08,479 --> 00:07:11,919
because if you use apk tool for this

205
00:07:11,919 --> 00:07:15,120
then you can either

206
00:07:15,120 --> 00:07:17,120
get one part or the other part that's a

207
00:07:17,120 --> 00:07:18,240
bit too

208
00:07:18,240 --> 00:07:20,080
more in-depth to go into now but

209
00:07:20,080 --> 00:07:22,160
basically you need to run it twice

210
00:07:22,160 --> 00:07:25,199
to get all the the information and then

211
00:07:25,199 --> 00:07:27,120
out of the decoded information you get

212
00:07:27,120 --> 00:07:29,199
the classes.dex file

213
00:07:29,199 --> 00:07:32,000
and you need to convert this into a jar

214
00:07:32,000 --> 00:07:32,639
a

215
00:07:32,639 --> 00:07:36,000
java archive once you've done this then

216
00:07:36,000 --> 00:07:36,720
you can use

217
00:07:36,720 --> 00:07:39,680
any normal java d compiler to get your

218
00:07:39,680 --> 00:07:40,800
java code

219
00:07:40,800 --> 00:07:43,039
and then you can merge the java code the

220
00:07:43,039 --> 00:07:44,000
resources the

221
00:07:44,000 --> 00:07:47,360
smiley which is the well quote-unquote

222
00:07:47,360 --> 00:07:50,560
java assembly to put it roughly you can

223
00:07:50,560 --> 00:07:52,160
merge all that together in a folder

224
00:07:52,160 --> 00:07:52,960
structure you

225
00:07:52,960 --> 00:07:55,520
enjoy working with or you find suitable

226
00:07:55,520 --> 00:07:58,000
and then you can start the analysis

227
00:07:58,000 --> 00:07:59,520
obviously you can also use different

228
00:07:59,520 --> 00:08:02,240
tools to open an apk

229
00:08:02,240 --> 00:08:04,080
instantly see the java code and some

230
00:08:04,080 --> 00:08:05,599
more information

231
00:08:05,599 --> 00:08:07,520
but if you want to get everything that

232
00:08:07,520 --> 00:08:09,520
you can from the apk then this is the

233
00:08:09,520 --> 00:08:10,879
the way

234
00:08:10,879 --> 00:08:13,440
you can work well like i said you can

235
00:08:13,440 --> 00:08:14,479
use apk tool

236
00:08:14,479 --> 00:08:17,520
to obtain the manifest the resources and

237
00:08:17,520 --> 00:08:19,120
the smiley code as well

238
00:08:19,120 --> 00:08:22,160
and then you have dextre jar to convert

239
00:08:22,160 --> 00:08:23,599
the classes to dax

240
00:08:23,599 --> 00:08:27,280
into a java archive and then you can use

241
00:08:27,280 --> 00:08:30,319
any existing java d compiler

242
00:08:30,319 --> 00:08:32,080
so one of the decompilers could be jd

243
00:08:32,080 --> 00:08:34,479
gui fern flower you can use jet x you

244
00:08:34,479 --> 00:08:35,760
can use cfr

245
00:08:35,760 --> 00:08:39,919
or pro cyan i presume because

246
00:08:39,919 --> 00:08:41,440
as far as i remember it's made by

247
00:08:41,440 --> 00:08:44,399
someone who's french

248
00:08:44,480 --> 00:08:47,279
so these are the tools you can use there

249
00:08:47,279 --> 00:08:49,519
nearly all of these tools

250
00:08:49,519 --> 00:08:52,480
have a client our command line interface

251
00:08:52,480 --> 00:08:53,040
only

252
00:08:53,040 --> 00:08:55,440
some of them have a gui as well as

253
00:08:55,440 --> 00:08:56,880
especially jd gui's

254
00:08:56,880 --> 00:09:00,800
name implies but jet x also has a gui

255
00:09:00,800 --> 00:09:02,880
so since all of them have a command line

256
00:09:02,880 --> 00:09:04,720
interface you can also automate the

257
00:09:04,720 --> 00:09:08,160
process entirely and this also

258
00:09:08,160 --> 00:09:10,880
doesn't require you to remember all the

259
00:09:10,880 --> 00:09:11,839
commands

260
00:09:11,839 --> 00:09:14,240
that you used to use for each of the

261
00:09:14,240 --> 00:09:15,839
tools because they're different

262
00:09:15,839 --> 00:09:19,440
obviously and automating is

263
00:09:19,440 --> 00:09:21,440
well always faster than doing manual

264
00:09:21,440 --> 00:09:22,959
work

265
00:09:22,959 --> 00:09:25,600
you can also have a different approach

266
00:09:25,600 --> 00:09:28,640
you can use for example radare 2

267
00:09:28,640 --> 00:09:33,120
to directly disassemble into smiley code

268
00:09:33,120 --> 00:09:35,360
and if you have plugins for that such as

269
00:09:35,360 --> 00:09:37,920
r2 deck you can also decompile it

270
00:09:37,920 --> 00:09:41,760
you can use jitra as well to

271
00:09:41,760 --> 00:09:44,800
analyze an apk or you can use jet by pnf

272
00:09:44,800 --> 00:09:45,760
software

273
00:09:45,760 --> 00:09:49,040
and the reason why i'm not going into

274
00:09:49,040 --> 00:09:50,720
further into jeb is because this is the

275
00:09:50,720 --> 00:09:53,360
only paid tool that is in this list

276
00:09:53,360 --> 00:09:57,200
furthermore all of the tools are

277
00:09:57,200 --> 00:09:59,279
available for free and most of them have

278
00:09:59,279 --> 00:10:01,519
their source code published

279
00:10:01,519 --> 00:10:04,000
so you can either build your own version

280
00:10:04,000 --> 00:10:06,399
or use that

281
00:10:06,399 --> 00:10:08,320
so that brings us after the basics it

282
00:10:08,320 --> 00:10:10,560
brings us to android project creator

283
00:10:10,560 --> 00:10:12,320
so what does it do well basically

284
00:10:12,320 --> 00:10:14,480
android project creator combines

285
00:10:14,480 --> 00:10:18,000
these tools into one program with one

286
00:10:18,000 --> 00:10:21,680
interface um in addition to that

287
00:10:21,680 --> 00:10:24,399
it uh uses all the resources that it

288
00:10:24,399 --> 00:10:26,160
gathers like i said before the smiley

289
00:10:26,160 --> 00:10:27,839
code the resources

290
00:10:27,839 --> 00:10:31,279
the the images that you get out of it

291
00:10:31,279 --> 00:10:32,800
the java code

292
00:10:32,800 --> 00:10:34,800
and it combines this into an android

293
00:10:34,800 --> 00:10:35,839
studio project

294
00:10:35,839 --> 00:10:39,680
so it copies it into the format that

295
00:10:39,680 --> 00:10:42,880
android studio project would look like

296
00:10:42,880 --> 00:10:46,000
for those who are following along either

297
00:10:46,000 --> 00:10:48,480
now or later on you can get it from from

298
00:10:48,480 --> 00:10:49,440
github

299
00:10:49,440 --> 00:10:51,600
which has a link with more explanations

300
00:10:51,600 --> 00:10:53,760
to my website as well

301
00:10:53,760 --> 00:10:55,519
and for those who are on remnucks you

302
00:10:55,519 --> 00:10:57,839
can also use it from there

303
00:10:57,839 --> 00:10:59,519
do expect some friction because you're

304
00:10:59,519 --> 00:11:02,000
using decompiled code in ide

305
00:11:02,000 --> 00:11:04,480
so naturally they're going to be errors

306
00:11:04,480 --> 00:11:06,079
not only with the code but especially

307
00:11:06,079 --> 00:11:08,000
with the resources

308
00:11:08,000 --> 00:11:09,680
if you're decompiling a really small

309
00:11:09,680 --> 00:11:11,760
application the chances are that your

310
00:11:11,760 --> 00:11:14,720
code is actually fine but the resources

311
00:11:14,720 --> 00:11:16,640
i've never encountered proper resources

312
00:11:16,640 --> 00:11:20,000
due to the way they are decoded

313
00:11:20,079 --> 00:11:22,399
so expect some friction there and also

314
00:11:22,399 --> 00:11:23,200
ensure that

315
00:11:23,200 --> 00:11:26,800
you use android studio properly in the

316
00:11:26,800 --> 00:11:28,720
sense that you configured it properly

317
00:11:28,720 --> 00:11:30,800
i'll go into one of the pitfalls later

318
00:11:30,800 --> 00:11:33,519
on in more detail and i'll note

319
00:11:33,519 --> 00:11:35,839
others as well but also note that

320
00:11:35,839 --> 00:11:38,560
decompilation does not always produce

321
00:11:38,560 --> 00:11:40,720
code and does not always produce correct

322
00:11:40,720 --> 00:11:43,440
code so the people who are

323
00:11:43,440 --> 00:11:45,440
have analyzed more applications by

324
00:11:45,440 --> 00:11:47,600
reverse engineering be it on windows mac

325
00:11:47,600 --> 00:11:49,519
or linux or android

326
00:11:49,519 --> 00:11:52,320
or ios for that matter are aware of this

327
00:11:52,320 --> 00:11:54,160
but especially for those

328
00:11:54,160 --> 00:11:57,519
well new to the uh to the trade

329
00:11:57,519 --> 00:11:59,519
uh you're not always ending up with code

330
00:11:59,519 --> 00:12:01,360
that is correct uh and sometimes you're

331
00:12:01,360 --> 00:12:03,440
not ending up with code at all

332
00:12:03,440 --> 00:12:05,279
uh this is also the reason that android

333
00:12:05,279 --> 00:12:06,720
project creator has

334
00:12:06,720 --> 00:12:09,680
uh all of the mentioned d compilers

335
00:12:09,680 --> 00:12:11,440
included in the project

336
00:12:11,440 --> 00:12:14,959
so you can by specifying the d comma

337
00:12:14,959 --> 00:12:18,320
d compiler as a command line interface

338
00:12:18,320 --> 00:12:20,399
argument you can just switch the

339
00:12:20,399 --> 00:12:21,519
decompiler

340
00:12:21,519 --> 00:12:23,200
if you think the code is not correct or

341
00:12:23,200 --> 00:12:26,000
if you're not getting a code at all

342
00:12:26,000 --> 00:12:28,880
and lastly but i that goes without

343
00:12:28,880 --> 00:12:30,320
saying for any of the reverse

344
00:12:30,320 --> 00:12:31,680
engineering tasks

345
00:12:31,680 --> 00:12:34,000
be creative both in finding solutions

346
00:12:34,000 --> 00:12:36,320
but also in finding workarounds

347
00:12:36,320 --> 00:12:39,839
when you encounter errors in general

348
00:12:39,839 --> 00:12:42,320
so why use android project creator there

349
00:12:42,320 --> 00:12:44,240
are multiple tools out there

350
00:12:44,240 --> 00:12:47,200
what is the added benefit well it runs

351
00:12:47,200 --> 00:12:48,959
on on java so it runs

352
00:12:48,959 --> 00:12:51,120
cross-platform on windows linux and mac

353
00:12:51,120 --> 00:12:52,240
os

354
00:12:52,240 --> 00:12:55,600
i last tested mac os when i

355
00:12:55,600 --> 00:12:58,639
still had access to a macbook this was a

356
00:12:58,639 --> 00:13:00,480
few years ago

357
00:13:00,480 --> 00:13:02,560
the basics are not really have not

358
00:13:02,560 --> 00:13:04,480
really changed at all

359
00:13:04,480 --> 00:13:06,880
but it's it's not fully tested so if

360
00:13:06,880 --> 00:13:08,560
you're using mac os and you encounter an

361
00:13:08,560 --> 00:13:09,440
error then

362
00:13:09,440 --> 00:13:12,000
uh it could be due to a lack of testing

363
00:13:12,000 --> 00:13:13,200
uh if you find an

364
00:13:13,200 --> 00:13:15,200
error in any way possible in the tool

365
00:13:15,200 --> 00:13:16,800
then feel free to open an issue on

366
00:13:16,800 --> 00:13:17,519
github

367
00:13:17,519 --> 00:13:19,360
i'll get back to you and we'll figure

368
00:13:19,360 --> 00:13:21,360
out a way how to solve that

369
00:13:21,360 --> 00:13:22,720
we have solved multiple issues in the

370
00:13:22,720 --> 00:13:24,959
past like like this

371
00:13:24,959 --> 00:13:28,639
another really unique advantage

372
00:13:28,639 --> 00:13:31,600
is the visualized views that you have in

373
00:13:31,600 --> 00:13:33,839
android studio so when you open the view

374
00:13:33,839 --> 00:13:35,120
it gives you

375
00:13:35,120 --> 00:13:37,279
like a gui version for those who have

376
00:13:37,279 --> 00:13:39,120
programmed with android studio will know

377
00:13:39,120 --> 00:13:40,639
what i'm talking about

378
00:13:40,639 --> 00:13:42,320
so instead of viewing the xml you're

379
00:13:42,320 --> 00:13:44,720
viewing a visual representation

380
00:13:44,720 --> 00:13:47,680
similar to viewing html source code or

381
00:13:47,680 --> 00:13:49,839
viewing it in the browser

382
00:13:49,839 --> 00:13:51,519
so this gives you a quick overview of

383
00:13:51,519 --> 00:13:52,959
what you're looking at

384
00:13:52,959 --> 00:13:56,079
and how you can use this you can also

385
00:13:56,079 --> 00:13:57,920
fix the compiler mistakes and remove

386
00:13:57,920 --> 00:14:00,480
garbage code

387
00:14:00,480 --> 00:14:02,000
how the compiler mistakes happen from

388
00:14:02,000 --> 00:14:03,360
time to time and when you spot them you

389
00:14:03,360 --> 00:14:03,920
can

390
00:14:03,920 --> 00:14:06,800
you can fix them garbage code is often

391
00:14:06,800 --> 00:14:09,360
inserted as a form of obfuscation

392
00:14:09,360 --> 00:14:11,120
and if you're looking at the code right

393
00:14:11,120 --> 00:14:12,880
now that's not an issue

394
00:14:12,880 --> 00:14:15,519
but if you are looking at the same code

395
00:14:15,519 --> 00:14:17,040
in three months

396
00:14:17,040 --> 00:14:19,600
then you have to see again which of the

397
00:14:19,600 --> 00:14:21,279
code is garbage and which is not

398
00:14:21,279 --> 00:14:24,959
so removing it on the in on the first go

399
00:14:24,959 --> 00:14:26,720
makes it really easy if you get back a

400
00:14:26,720 --> 00:14:28,399
few months later because maybe you go

401
00:14:28,399 --> 00:14:31,680
from a thousand lines of code back to 30

402
00:14:31,680 --> 00:14:33,920
and looking at 30 lines of code that

403
00:14:33,920 --> 00:14:35,920
actually makes sense

404
00:14:35,920 --> 00:14:37,920
is a lot easier than going through the

405
00:14:37,920 --> 00:14:39,600
same garbage code again

406
00:14:39,600 --> 00:14:42,720
that saves you time and not all tools

407
00:14:42,720 --> 00:14:44,000
allow you to edit the code

408
00:14:44,000 --> 00:14:47,199
in general or refactor for that matter

409
00:14:47,199 --> 00:14:48,880
so this is one of the advantages you're

410
00:14:48,880 --> 00:14:50,320
having as well

411
00:14:50,320 --> 00:14:52,480
and one of the other unique advantages

412
00:14:52,480 --> 00:14:54,800
is the interactive usage of the

413
00:14:54,800 --> 00:14:58,000
manifest like i said it declares which

414
00:14:58,000 --> 00:14:59,440
permissions are used but it also

415
00:14:59,440 --> 00:15:01,920
declares for example the

416
00:15:01,920 --> 00:15:05,600
main function or main clause in which

417
00:15:05,600 --> 00:15:08,160
contains the the oncreate function which

418
00:15:08,160 --> 00:15:09,680
is the starting point when you first

419
00:15:09,680 --> 00:15:11,600
open the application

420
00:15:11,600 --> 00:15:14,240
so you can use ctrl click when you're

421
00:15:14,240 --> 00:15:15,199
pressing on the

422
00:15:15,199 --> 00:15:17,040
on the class name in the manifest and

423
00:15:17,040 --> 00:15:19,040
then android studio automatically jumps

424
00:15:19,040 --> 00:15:20,720
to this class

425
00:15:20,720 --> 00:15:23,440
which is not present in any other tool

426
00:15:23,440 --> 00:15:25,440
i've used so far

427
00:15:25,440 --> 00:15:26,639
you have all the information in one

428
00:15:26,639 --> 00:15:28,480
place you have the java code the smiley

429
00:15:28,480 --> 00:15:30,079
code your resources your libraries

430
00:15:30,079 --> 00:15:31,440
everything

431
00:15:31,440 --> 00:15:34,800
and if you're using or viewing

432
00:15:34,800 --> 00:15:36,959
one of the enumerations that are within

433
00:15:36,959 --> 00:15:39,040
android's code base

434
00:15:39,040 --> 00:15:41,360
assuming you have the correct data set

435
00:15:41,360 --> 00:15:43,600
installed within android studio

436
00:15:43,600 --> 00:15:45,839
and the build tool so to say and then

437
00:15:45,839 --> 00:15:47,440
you can actually view this

438
00:15:47,440 --> 00:15:49,440
documented so you can see what the

439
00:15:49,440 --> 00:15:51,759
android original android development

440
00:15:51,759 --> 00:15:53,199
team wrote for this

441
00:15:53,199 --> 00:15:55,920
value of this enumeration and you can

442
00:15:55,920 --> 00:15:57,600
you can work with that rather than going

443
00:15:57,600 --> 00:15:59,040
onto the

444
00:15:59,040 --> 00:16:01,360
website and finding out what is what it

445
00:16:01,360 --> 00:16:02,800
is

446
00:16:02,800 --> 00:16:05,839
so you're also also always working in an

447
00:16:05,839 --> 00:16:07,360
up-to-date environment because android

448
00:16:07,360 --> 00:16:08,480
studio is the main

449
00:16:08,480 --> 00:16:11,600
way to develop android applications

450
00:16:11,600 --> 00:16:14,000
updates are being pushed for every new

451
00:16:14,000 --> 00:16:16,000
version there's an emulator

452
00:16:16,000 --> 00:16:19,440
embedded you can do anything to create

453
00:16:19,440 --> 00:16:20,959
apps with it which means it's always up

454
00:16:20,959 --> 00:16:23,279
to date and you're never lacking

455
00:16:23,279 --> 00:16:25,120
in terms of versions or working with

456
00:16:25,120 --> 00:16:27,519
outdated software

457
00:16:27,519 --> 00:16:29,839
android project creator can also be used

458
00:16:29,839 --> 00:16:31,759
in an automated sense you can

459
00:16:31,759 --> 00:16:34,320
run it as many times as you want to

460
00:16:34,320 --> 00:16:35,279
convert

461
00:16:35,279 --> 00:16:38,480
apks into android studio projects

462
00:16:38,480 --> 00:16:40,560
in the back end somewhere and there's

463
00:16:40,560 --> 00:16:42,959
also support for some commercial tooling

464
00:16:42,959 --> 00:16:45,600
like i mentioned chat before jab is

465
00:16:45,600 --> 00:16:46,800
supported via

466
00:16:46,800 --> 00:16:50,079
script if you can run jab headless

467
00:16:50,079 --> 00:16:52,800
requires you to have the jet pro license

468
00:16:52,800 --> 00:16:53,519
and that's uh

469
00:16:53,519 --> 00:16:55,199
in that case so not only the android

470
00:16:55,199 --> 00:16:57,920
version but the bigger license

471
00:16:57,920 --> 00:17:00,320
but it's it's also included if you uh if

472
00:17:00,320 --> 00:17:01,519
you're working with that and

473
00:17:01,519 --> 00:17:05,359
find this way of working more convenient

474
00:17:05,359 --> 00:17:06,880
so the flowchart i showed before is

475
00:17:06,880 --> 00:17:08,480
basically shortened to

476
00:17:08,480 --> 00:17:11,199
one action which is run android project

477
00:17:11,199 --> 00:17:12,480
creator

478
00:17:12,480 --> 00:17:16,079
and then you can open the project in

479
00:17:16,079 --> 00:17:18,079
in android studio and you can start

480
00:17:18,079 --> 00:17:20,240
working with that one

481
00:17:20,240 --> 00:17:23,280
so how to further utilize this well

482
00:17:23,280 --> 00:17:24,880
there are basically a few options for

483
00:17:24,880 --> 00:17:27,439
the command line interface you can

484
00:17:27,439 --> 00:17:28,559
install

485
00:17:28,559 --> 00:17:30,559
this means that in the folder where the

486
00:17:30,559 --> 00:17:31,760
jar is located

487
00:17:31,760 --> 00:17:34,000
a new folder will be made named library

488
00:17:34,000 --> 00:17:35,360
and in this library all

489
00:17:35,360 --> 00:17:37,679
dependencies will be installed meaning

490
00:17:37,679 --> 00:17:38,960
they will be cloned from

491
00:17:38,960 --> 00:17:41,120
github which is either the official

492
00:17:41,120 --> 00:17:43,039
github of the tool or it's a mirror on

493
00:17:43,039 --> 00:17:44,240
my own github

494
00:17:44,240 --> 00:17:47,120
because not all tools are available uh

495
00:17:47,120 --> 00:17:48,799
anymore

496
00:17:48,799 --> 00:17:51,840
pardon me uh the update version requires

497
00:17:51,840 --> 00:17:53,919
you to have first installed it obviously

498
00:17:53,919 --> 00:17:57,200
uh but uh it doesn't get pulled from all

499
00:17:57,200 --> 00:17:59,360
the repositories again and then rebuilds

500
00:17:59,360 --> 00:18:02,400
all the uh the dependencies the

501
00:18:02,400 --> 00:18:03,840
decompile

502
00:18:03,840 --> 00:18:05,919
will mostly be used because this is

503
00:18:05,919 --> 00:18:08,000
where you transform your apk into an

504
00:18:08,000 --> 00:18:09,760
android studio project

505
00:18:09,760 --> 00:18:11,039
and then we have the compact

506
00:18:11,039 --> 00:18:14,480
installation which basically

507
00:18:14,480 --> 00:18:17,520
fills your library folder with a

508
00:18:17,520 --> 00:18:20,320
pre pre-compiled version of all the

509
00:18:20,320 --> 00:18:21,360
dependencies

510
00:18:21,360 --> 00:18:24,000
that are hosted on my github so if you

511
00:18:24,000 --> 00:18:26,160
trust my github enough to do this

512
00:18:26,160 --> 00:18:28,160
this will shorten your installation time

513
00:18:28,160 --> 00:18:29,520
depending on your internet download

514
00:18:29,520 --> 00:18:31,120
speed of course

515
00:18:31,120 --> 00:18:34,000
but from maybe a few minutes into a few

516
00:18:34,000 --> 00:18:36,400
seconds

517
00:18:36,400 --> 00:18:38,799
but that is up to the user and one of

518
00:18:38,799 --> 00:18:40,160
the future

519
00:18:40,160 --> 00:18:42,080
updates that i have is the compact

520
00:18:42,080 --> 00:18:44,799
update which allows you to

521
00:18:44,799 --> 00:18:46,960
refill the library with the

522
00:18:46,960 --> 00:18:48,000
pre-configured

523
00:18:48,000 --> 00:18:50,559
and pre-compiled tool set because

524
00:18:50,559 --> 00:18:52,080
currently you need to manually remove it

525
00:18:52,080 --> 00:18:52,480
and then

526
00:18:52,480 --> 00:18:55,039
install it again we're currently at

527
00:18:55,039 --> 00:18:56,160
version 1.4

528
00:18:56,160 --> 00:18:57,760
stable for those watching this in the

529
00:18:57,760 --> 00:18:59,600
future

530
00:18:59,600 --> 00:19:01,840
so there are a few uh prerequisites for

531
00:19:01,840 --> 00:19:02,880
android studio

532
00:19:02,880 --> 00:19:05,200
for sorry for android project creator

533
00:19:05,200 --> 00:19:07,360
you need to have the java 8 runtime

534
00:19:07,360 --> 00:19:11,039
and the java 8 development kit

535
00:19:11,039 --> 00:19:13,760
not really because of android project

536
00:19:13,760 --> 00:19:15,120
creator itself

537
00:19:15,120 --> 00:19:16,880
it should be able to run on any java

538
00:19:16,880 --> 00:19:19,440
version but multiple of the dependencies

539
00:19:19,440 --> 00:19:21,120
that are being used

540
00:19:21,120 --> 00:19:23,840
do not function beyond java 8 so keep

541
00:19:23,840 --> 00:19:24,880
this in mind

542
00:19:24,880 --> 00:19:27,039
and you also need to have any recent

543
00:19:27,039 --> 00:19:28,000
version of maven

544
00:19:28,000 --> 00:19:30,799
installed during the build process of

545
00:19:30,799 --> 00:19:33,360
one tool

546
00:19:34,080 --> 00:19:37,600
so if you encounter any errors during

547
00:19:37,600 --> 00:19:39,679
the installation

548
00:19:39,679 --> 00:19:41,760
note that android project creator is

549
00:19:41,760 --> 00:19:43,679
using the installation

550
00:19:43,679 --> 00:19:46,240
build process as a wrapper around your

551
00:19:46,240 --> 00:19:46,720
system

552
00:19:46,720 --> 00:19:50,000
shell so that means it starts either a

553
00:19:50,000 --> 00:19:50,400
shell

554
00:19:50,400 --> 00:19:54,080
or cmd.exe and runs the command that is

555
00:19:54,080 --> 00:19:56,000
it needs to run in order to start the

556
00:19:56,000 --> 00:19:57,120
build process

557
00:19:57,120 --> 00:19:59,200
but if there is any error and the

558
00:19:59,200 --> 00:20:00,320
project

559
00:20:00,320 --> 00:20:02,880
will be well failing to build and then

560
00:20:02,880 --> 00:20:04,000
the next one will be

561
00:20:04,000 --> 00:20:06,640
found now this can be the case for some

562
00:20:06,640 --> 00:20:08,640
decompilers in that case you can

563
00:20:08,640 --> 00:20:10,159
either write a node or have a mental

564
00:20:10,159 --> 00:20:12,240
node to not use that specific decompiler

565
00:20:12,240 --> 00:20:14,400
because it's not present

566
00:20:14,400 --> 00:20:17,919
you can also try to fix that so keep in

567
00:20:17,919 --> 00:20:20,640
mind if you look to fix this scroll back

568
00:20:20,640 --> 00:20:23,600
into the standard output when you

569
00:20:23,600 --> 00:20:26,000
executed android project creator

570
00:20:26,000 --> 00:20:27,679
because it's not at the end it's

571
00:20:27,679 --> 00:20:29,120
somewhere in the middle probably where

572
00:20:29,120 --> 00:20:30,480
your error is

573
00:20:30,480 --> 00:20:32,400
and then you should be able to work it

574
00:20:32,400 --> 00:20:35,360
out from there if you need any help then

575
00:20:35,360 --> 00:20:39,120
just post a message or send me a direct

576
00:20:39,120 --> 00:20:40,400
message on twitter

577
00:20:40,400 --> 00:20:43,600
i try to keep up with the messages so

578
00:20:43,600 --> 00:20:45,919
give me some some time to respond but

579
00:20:45,919 --> 00:20:49,840
you should get a response

580
00:20:50,000 --> 00:20:53,120
so once you've fully installed the the

581
00:20:53,120 --> 00:20:53,679
tool

582
00:20:53,679 --> 00:20:56,000
and well there's a lot more standard

583
00:20:56,000 --> 00:20:56,960
output

584
00:20:56,960 --> 00:20:59,760
that goes before this but it will verify

585
00:20:59,760 --> 00:21:02,480
your tool set that you're currently

586
00:21:02,480 --> 00:21:06,159
having and if this verification is

587
00:21:06,159 --> 00:21:07,760
successful you'll just get the message

588
00:21:07,760 --> 00:21:09,840
that it's successful and if not it will

589
00:21:09,840 --> 00:21:12,400
state to you which tool is missing

590
00:21:12,400 --> 00:21:14,159
and if a tool is missing it is really

591
00:21:14,159 --> 00:21:16,720
likely that the build failed

592
00:21:16,720 --> 00:21:19,440
or it was magically somehow not present

593
00:21:19,440 --> 00:21:21,039
for another reason

594
00:21:21,039 --> 00:21:22,960
so you will get a notice at the end as

595
00:21:22,960 --> 00:21:24,799
well that states well maybe

596
00:21:24,799 --> 00:21:27,520
cfr is missing for some reason and then

597
00:21:27,520 --> 00:21:28,159
you can

598
00:21:28,159 --> 00:21:31,840
scroll back up into the logs and know

599
00:21:31,840 --> 00:21:34,400
where to look for at the start of the

600
00:21:34,400 --> 00:21:36,799
compilation of cfr

601
00:21:36,799 --> 00:21:38,320
so this is the help menu as well

602
00:21:38,320 --> 00:21:40,320
actually which which is posted at last

603
00:21:40,320 --> 00:21:42,080
with the indentation for the install

604
00:21:42,080 --> 00:21:45,679
compact install update etc

605
00:21:45,679 --> 00:21:47,360
and that brings us to the to the second

606
00:21:47,360 --> 00:21:50,799
part for the decompilation itself

607
00:21:50,799 --> 00:21:52,400
so you need three things for the

608
00:21:52,400 --> 00:21:54,640
decompilation you need to decompile our

609
00:21:54,640 --> 00:21:59,440
name which is listed on this slide

610
00:21:59,440 --> 00:22:01,760
as one of the tools and they are all

611
00:22:01,760 --> 00:22:03,600
case insensitive

612
00:22:03,600 --> 00:22:05,360
in case you were wondering about that

613
00:22:05,360 --> 00:22:08,400
but you can use cfr fernflower jetix

614
00:22:08,400 --> 00:22:11,520
jdcmd which is the decompiler part of jd

615
00:22:11,520 --> 00:22:12,559
gui

616
00:22:12,559 --> 00:22:16,280
you can use pro xeon and if you have

617
00:22:16,280 --> 00:22:19,039
a jab 3 license like i said you can use

618
00:22:19,039 --> 00:22:20,320
that as well

619
00:22:20,320 --> 00:22:22,559
for the jab one you need to have

620
00:22:22,559 --> 00:22:24,159
slightly different commands to explain

621
00:22:24,159 --> 00:22:25,360
in the help menu but

622
00:22:25,360 --> 00:22:28,960
i'll not go into that in this talk as

623
00:22:28,960 --> 00:22:29,440
i'm

624
00:22:29,440 --> 00:22:31,039
focusing on the majority of the tools

625
00:22:31,039 --> 00:22:33,520
here due to time constraints

626
00:22:33,520 --> 00:22:36,240
so you need the decompiler name and you

627
00:22:36,240 --> 00:22:36,799
also need

628
00:22:36,799 --> 00:22:39,120
the location of the apk android project

629
00:22:39,120 --> 00:22:40,799
creator needs to

630
00:22:40,799 --> 00:22:43,200
read and use and you also need the

631
00:22:43,200 --> 00:22:45,200
output location for the android studio

632
00:22:45,200 --> 00:22:46,640
project

633
00:22:46,640 --> 00:22:48,240
now there are a few nodes to make on

634
00:22:48,240 --> 00:22:50,000
this both the path

635
00:22:50,000 --> 00:22:53,280
to the apk and output location can

636
00:22:53,280 --> 00:22:56,400
either be in full

637
00:22:56,400 --> 00:22:58,480
or they can be relative from your

638
00:22:58,480 --> 00:22:59,440
current terminal

639
00:22:59,440 --> 00:23:03,360
or command prompts working directory

640
00:23:03,360 --> 00:23:05,280
and the output folder does not have to

641
00:23:05,280 --> 00:23:07,600
exist before running the decompilation

642
00:23:07,600 --> 00:23:10,400
however if more folders within that

643
00:23:10,400 --> 00:23:11,679
folder already exist

644
00:23:11,679 --> 00:23:14,880
you will get an error message so

645
00:23:14,880 --> 00:23:18,240
at the bottom you'll see the java

646
00:23:18,240 --> 00:23:20,720
jar command to run the the android

647
00:23:20,720 --> 00:23:22,159
project creator jar

648
00:23:22,159 --> 00:23:24,240
stating the decompile flag with fern

649
00:23:24,240 --> 00:23:26,000
flower for this example

650
00:23:26,000 --> 00:23:28,159
and then in my home folder documents i

651
00:23:28,159 --> 00:23:30,400
have a apk named malware

652
00:23:30,400 --> 00:23:33,520
and so it's reading from a

653
00:23:33,520 --> 00:23:36,159
from a full path but then i want to make

654
00:23:36,159 --> 00:23:37,679
the android studio project

655
00:23:37,679 --> 00:23:40,960
in the location that my current shell

656
00:23:40,960 --> 00:23:44,960
is which in this case makes a new folder

657
00:23:44,960 --> 00:23:48,080
named malware fern so this is one of the

658
00:23:48,080 --> 00:23:49,840
tips i also give

659
00:23:49,840 --> 00:23:53,039
append your studio project

660
00:23:53,039 --> 00:23:57,120
with the decompiler name because if you

661
00:23:57,120 --> 00:23:59,279
encounter errors later on then you know

662
00:23:59,279 --> 00:24:00,640
for sure which

663
00:24:00,640 --> 00:24:03,600
decompiler you used but it's also easier

664
00:24:03,600 --> 00:24:04,159
to just

665
00:24:04,159 --> 00:24:07,200
compare them afterwards or maybe run

666
00:24:07,200 --> 00:24:09,440
three run it with 3d compilers from the

667
00:24:09,440 --> 00:24:10,320
start and then

668
00:24:10,320 --> 00:24:14,159
just see where you end up in the end

669
00:24:14,159 --> 00:24:16,320
so the decompilation will obviously show

670
00:24:16,320 --> 00:24:17,679
you all the output of the

671
00:24:17,679 --> 00:24:19,840
compiler itself it will then read the

672
00:24:19,840 --> 00:24:21,760
android studio project into a temporary

673
00:24:21,760 --> 00:24:23,919
location in this case i was working in

674
00:24:23,919 --> 00:24:25,440
my videos folder

675
00:24:25,440 --> 00:24:27,440
and then in the library folder which is

676
00:24:27,440 --> 00:24:29,039
from android project creator there's a

677
00:24:29,039 --> 00:24:30,480
temp folder

678
00:24:30,480 --> 00:24:32,640
in in that temp folder there's a new

679
00:24:32,640 --> 00:24:33,679
folder for each

680
00:24:33,679 --> 00:24:36,240
instance that you run where all of the

681
00:24:36,240 --> 00:24:37,840
temporary folders

682
00:24:37,840 --> 00:24:41,120
are managed then it tries to to find

683
00:24:41,120 --> 00:24:42,720
everything that it needs

684
00:24:42,720 --> 00:24:44,799
for the manifest the resources native

685
00:24:44,799 --> 00:24:46,799
libraries smiley

686
00:24:46,799 --> 00:24:48,640
everything that is needed and then the

687
00:24:48,640 --> 00:24:51,200
temp folder is copied into the location

688
00:24:51,200 --> 00:24:51,840
that you

689
00:24:51,840 --> 00:24:54,880
last specified as the last argument and

690
00:24:54,880 --> 00:24:56,080
then the temp folder is

691
00:24:56,080 --> 00:24:59,279
cleaned so this

692
00:24:59,279 --> 00:25:01,039
gives you the android studio project

693
00:25:01,039 --> 00:25:04,080
which you can then open

694
00:25:04,320 --> 00:25:06,640
and then there are three main nodes i

695
00:25:06,640 --> 00:25:09,200
want to make

696
00:25:09,360 --> 00:25:12,159
pardon me one is missing build tools

697
00:25:12,159 --> 00:25:13,760
this will be an error that you'll get or

698
00:25:13,760 --> 00:25:14,080
a

699
00:25:14,080 --> 00:25:16,640
notification from from android studio do

700
00:25:16,640 --> 00:25:18,720
install these

701
00:25:18,720 --> 00:25:21,600
and just pick well any version

702
00:25:21,600 --> 00:25:23,679
preferably multiple

703
00:25:23,679 --> 00:25:25,279
because this gives you all the files

704
00:25:25,279 --> 00:25:27,679
that android studio will need

705
00:25:27,679 --> 00:25:30,880
but also will give you the like i

706
00:25:30,880 --> 00:25:32,000
mentioned before

707
00:25:32,000 --> 00:25:33,919
the documented code when you're looking

708
00:25:33,919 --> 00:25:36,640
into enumerations or classes

709
00:25:36,640 --> 00:25:38,240
also expect errors i mentioned this

710
00:25:38,240 --> 00:25:39,840
before

711
00:25:39,840 --> 00:25:43,120
but i learned that quite some people

712
00:25:43,120 --> 00:25:44,960
do not expect these errors so i'll

713
00:25:44,960 --> 00:25:46,960
reiterate that again

714
00:25:46,960 --> 00:25:49,200
and refactoring is actually one of the

715
00:25:49,200 --> 00:25:52,480
struggles i initially had

716
00:25:52,559 --> 00:25:55,120
when you're refactoring code and i'm

717
00:25:55,120 --> 00:25:57,200
using the netbeans keybinds

718
00:25:57,200 --> 00:26:01,200
in android studio so your your keybind

719
00:26:01,200 --> 00:26:03,039
is very likely to differ but if you

720
00:26:03,039 --> 00:26:05,120
press ctrl r

721
00:26:05,120 --> 00:26:08,159
in that case then this menu will pop up

722
00:26:08,159 --> 00:26:10,320
that i have put in the screenshot

723
00:26:10,320 --> 00:26:11,360
originally

724
00:26:11,360 --> 00:26:13,120
the search for text occurrences and

725
00:26:13,120 --> 00:26:14,960
search in comments and strings are

726
00:26:14,960 --> 00:26:16,320
enabled

727
00:26:16,320 --> 00:26:18,880
this means that if you are refactoring

728
00:26:18,880 --> 00:26:19,360
code

729
00:26:19,360 --> 00:26:22,080
then you're also messing with strings

730
00:26:22,080 --> 00:26:23,840
and comments that you maybe have made

731
00:26:23,840 --> 00:26:25,039
before

732
00:26:25,039 --> 00:26:28,480
and do make sure to uncheck these

733
00:26:28,480 --> 00:26:30,880
uh because otherwise you're messing with

734
00:26:30,880 --> 00:26:31,919
more

735
00:26:31,919 --> 00:26:34,159
than the variable class name package

736
00:26:34,159 --> 00:26:35,679
name function name

737
00:26:35,679 --> 00:26:39,919
and that you have selected to to change

738
00:26:39,919 --> 00:26:41,279
so that's actually one of the the

739
00:26:41,279 --> 00:26:44,640
biggest tips i have for that part

740
00:26:44,640 --> 00:26:46,080
because this took me a while to figure

741
00:26:46,080 --> 00:26:47,840
out why this was happening as this menu

742
00:26:47,840 --> 00:26:50,320
does not pop up when you use the

743
00:26:50,320 --> 00:26:52,320
single hotkey so if you press ctrl r you

744
00:26:52,320 --> 00:26:54,640
can refactor and if you do it twice

745
00:26:54,640 --> 00:26:57,440
uh ctrl r then then you'll get this this

746
00:26:57,440 --> 00:26:59,440
pop-up

747
00:26:59,440 --> 00:27:02,400
so those are the tips uh when analyzing

748
00:27:02,400 --> 00:27:03,039
it with

749
00:27:03,039 --> 00:27:05,520
android studio as well which leaves me

750
00:27:05,520 --> 00:27:07,360
to ask if there are any

751
00:27:07,360 --> 00:27:11,279
questions from the audience

752
00:27:11,279 --> 00:27:13,840
but i'll i'll assume we first go back to

753
00:27:13,840 --> 00:27:21,760
the studio for that

754
00:27:21,760 --> 00:27:23,840
you

