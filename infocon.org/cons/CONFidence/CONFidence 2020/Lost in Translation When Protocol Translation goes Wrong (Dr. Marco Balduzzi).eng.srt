1
00:00:11,280 --> 00:00:11,840
all right

2
00:00:11,840 --> 00:00:14,160
looks like i'm online uh i hope not

3
00:00:14,160 --> 00:00:16,480
everybody went to lunch already uh

4
00:00:16,480 --> 00:00:19,680
i i'm also ready to go for a pizza so uh

5
00:00:19,680 --> 00:00:21,520
i will have this prediction for you guys

6
00:00:21,520 --> 00:00:22,400
and then

7
00:00:22,400 --> 00:00:24,960
jump to have some some food for me uh to

8
00:00:24,960 --> 00:00:26,240
enjoy also the

9
00:00:26,240 --> 00:00:29,599
rest of the afternoon conference

10
00:00:29,599 --> 00:00:31,920
um so this work is called lost in

11
00:00:31,920 --> 00:00:33,360
translation so we look at

12
00:00:33,360 --> 00:00:36,480
how industrial protocols operate

13
00:00:36,480 --> 00:00:38,480
uh when they translate from one protocol

14
00:00:38,480 --> 00:00:39,680
to the other

15
00:00:39,680 --> 00:00:42,160
and so we call it loss in translation

16
00:00:42,160 --> 00:00:44,160
because we found like several problems

17
00:00:44,160 --> 00:00:45,440
with the obvious

18
00:00:45,440 --> 00:00:48,320
device operate so they might get lost in

19
00:00:48,320 --> 00:00:49,440
translating

20
00:00:49,440 --> 00:00:50,960
uh so this is a joint work between

21
00:00:50,960 --> 00:00:53,039
myself and colleagues at trent

22
00:00:53,039 --> 00:00:55,120
as well as luca as independent

23
00:00:55,120 --> 00:00:56,719
researcher

24
00:00:56,719 --> 00:00:59,280
um so industrial networks are very

25
00:00:59,280 --> 00:01:01,680
complex ecosystems so they're not as

26
00:01:01,680 --> 00:01:02,640
simple as

27
00:01:02,640 --> 00:01:05,760
they were in 80s uh nowadays they

28
00:01:05,760 --> 00:01:09,119
um they they run on

29
00:01:09,119 --> 00:01:11,119
different layers so you have like the

30
00:01:11,119 --> 00:01:13,280
enterprise layer on the top

31
00:01:13,280 --> 00:01:16,000
where you define what your network

32
00:01:16,000 --> 00:01:17,759
should do right so what your business is

33
00:01:17,759 --> 00:01:19,360
about what you want to produce for

34
00:01:19,360 --> 00:01:20,560
example

35
00:01:20,560 --> 00:01:22,320
uh resource include for example the

36
00:01:22,320 --> 00:01:23,600
cloud and so on

37
00:01:23,600 --> 00:01:26,159
when you have a control network where

38
00:01:26,159 --> 00:01:28,000
you define basically you have a control

39
00:01:28,000 --> 00:01:30,320
server that control the production

40
00:01:30,320 --> 00:01:33,920
and usually control network run on tcp

41
00:01:33,920 --> 00:01:35,759
and then you have the fieldbus network

42
00:01:35,759 --> 00:01:37,920
which normally run on serial

43
00:01:37,920 --> 00:01:39,600
and is that part of the network that is

44
00:01:39,600 --> 00:01:41,920
directly connected to a plc

45
00:01:41,920 --> 00:01:44,399
and two different sensors as well as

46
00:01:44,399 --> 00:01:46,399
motors and so on and so forth

47
00:01:46,399 --> 00:01:48,720
so this is very very simple file but can

48
00:01:48,720 --> 00:01:50,960
be way more complex than this

49
00:01:50,960 --> 00:01:53,520
uh this is because each of his network

50
00:01:53,520 --> 00:01:55,040
layer

51
00:01:55,040 --> 00:01:57,040
may run on different protocols so if you

52
00:01:57,040 --> 00:01:58,960
take for example a field network down

53
00:01:58,960 --> 00:02:00,079
here on the right

54
00:02:00,079 --> 00:02:02,719
uh you might have profibus cc link and

55
00:02:02,719 --> 00:02:05,040
open and so on and so forth so there are

56
00:02:05,040 --> 00:02:08,160
many protocols for for each of this

57
00:02:08,160 --> 00:02:08,800
layer

58
00:02:08,800 --> 00:02:11,038
this is because uh different vendors

59
00:02:11,038 --> 00:02:12,560
have different protocol

60
00:02:12,560 --> 00:02:15,280
uh as well as because over here uh there

61
00:02:15,280 --> 00:02:16,959
was been like different protocols being

62
00:02:16,959 --> 00:02:17,760
introduced

63
00:02:17,760 --> 00:02:19,760
so this complicated really a lot the

64
00:02:19,760 --> 00:02:21,360
problem here

65
00:02:21,360 --> 00:02:24,080
in communication that's why the market

66
00:02:24,080 --> 00:02:24,480
has

67
00:02:24,480 --> 00:02:27,040
produced over the last uh i would say

68
00:02:27,040 --> 00:02:28,160
five to ten years

69
00:02:28,160 --> 00:02:31,040
uh devices that are called uh protocol

70
00:02:31,040 --> 00:02:31,840
gateways

71
00:02:31,840 --> 00:02:34,239
uh like this one you have here with me

72
00:02:34,239 --> 00:02:35,040
right

73
00:02:35,040 --> 00:02:37,360
uh and you can also see on the screen so

74
00:02:37,360 --> 00:02:39,360
they all come pretty much with few

75
00:02:39,360 --> 00:02:40,640
interfaces

76
00:02:40,640 --> 00:02:42,720
uh for example here we have like a

77
00:02:42,720 --> 00:02:44,400
serial interface

78
00:02:44,400 --> 00:02:47,519
um this is the wireless interface down

79
00:02:47,519 --> 00:02:48,480
here you have

80
00:02:48,480 --> 00:02:51,280
an internet interface so this basically

81
00:02:51,280 --> 00:02:52,000
operate

82
00:02:52,000 --> 00:02:55,680
as as gateways no converting from one

83
00:02:55,680 --> 00:02:56,400
protocol

84
00:02:56,400 --> 00:02:59,920
to the other this one you see on screen

85
00:02:59,920 --> 00:03:02,879
is exactly the piece of hardware i hold

86
00:03:02,879 --> 00:03:04,000
in my hand

87
00:03:04,000 --> 00:03:05,680
as you can see it's pretty tiny like 10

88
00:03:05,680 --> 00:03:07,040
cm longer

89
00:03:07,040 --> 00:03:08,640
and as i said it has different

90
00:03:08,640 --> 00:03:10,400
interfaces and

91
00:03:10,400 --> 00:03:12,239
some of this device might have the bug

92
00:03:12,239 --> 00:03:14,159
port uh like jtag

93
00:03:14,159 --> 00:03:16,560
to be able to debug the device some

94
00:03:16,560 --> 00:03:18,159
other may not have

95
00:03:18,159 --> 00:03:21,200
and um yeah i mean there are different

96
00:03:21,200 --> 00:03:22,000
models on

97
00:03:22,000 --> 00:03:24,879
on the market so uh typical installation

98
00:03:24,879 --> 00:03:27,280
is as following so you have the product

99
00:03:27,280 --> 00:03:30,239
here in the middle and what the protocol

100
00:03:30,239 --> 00:03:31,440
get with us

101
00:03:31,440 --> 00:03:34,400
is to connect the control network that

102
00:03:34,400 --> 00:03:37,280
in this example run on modbus tcp

103
00:03:37,280 --> 00:03:39,920
down to the field network which runs on

104
00:03:39,920 --> 00:03:42,239
modbus rtu

105
00:03:42,239 --> 00:03:45,120
so as you can see here there is a plc

106
00:03:45,120 --> 00:03:45,440
which

107
00:03:45,440 --> 00:03:48,159
control a relay a motor a thermometer

108
00:03:48,159 --> 00:03:49,599
and other sensor

109
00:03:49,599 --> 00:03:53,120
and since this plc is running on modbus

110
00:03:53,120 --> 00:03:54,159
rtu

111
00:03:54,159 --> 00:03:56,640
on serial right uh it needs to be

112
00:03:56,640 --> 00:03:58,400
connected to the control network via

113
00:03:58,400 --> 00:04:00,000
gateway that does the translation from

114
00:04:00,000 --> 00:04:02,640
modbus tcp to modbus rtu

115
00:04:02,640 --> 00:04:04,879
so in this case you have appear in the

116
00:04:04,879 --> 00:04:06,720
right corner a modbus tcp

117
00:04:06,720 --> 00:04:09,680
master node so the master node is the

118
00:04:09,680 --> 00:04:11,040
node that controls

119
00:04:11,040 --> 00:04:13,200
a slave node so in this case the master

120
00:04:13,200 --> 00:04:14,879
node is an hmi like a

121
00:04:14,879 --> 00:04:17,279
an interface where the ot engineer can

122
00:04:17,279 --> 00:04:19,040
operate and set

123
00:04:19,040 --> 00:04:21,120
for example the speed of a motor can

124
00:04:21,120 --> 00:04:22,800
read the value and thermometer and so on

125
00:04:22,800 --> 00:04:23,759
and so forth

126
00:04:23,759 --> 00:04:26,880
so from this hmi interface he can

127
00:04:26,880 --> 00:04:30,479
control the plc which act as a modbus

128
00:04:30,479 --> 00:04:33,520
slave node what if what often

129
00:04:33,520 --> 00:04:36,080
happen here in installation there is an

130
00:04:36,080 --> 00:04:37,759
ics firewall

131
00:04:37,759 --> 00:04:40,880
which monitor uh the tcpap traffic

132
00:04:40,880 --> 00:04:42,800
and in case there are operations that

133
00:04:42,800 --> 00:04:44,000
are not uh

134
00:04:44,000 --> 00:04:46,800
allowed for example setting uh i don't

135
00:04:46,800 --> 00:04:48,320
know like a speed of a motor

136
00:04:48,320 --> 00:04:50,560
up to a value which is too high and

137
00:04:50,560 --> 00:04:52,160
might damage more

138
00:04:52,160 --> 00:04:55,360
the firewall can basically stop such

139
00:04:55,360 --> 00:04:59,360
such request so a common understanding

140
00:04:59,360 --> 00:05:01,360
is that protocol gateways are a

141
00:05:01,360 --> 00:05:04,080
tiny cheap embedded piece of hardware

142
00:05:04,080 --> 00:05:05,520
often they are hidden

143
00:05:05,520 --> 00:05:08,080
you know somewhere in you know server

144
00:05:08,080 --> 00:05:10,000
and server farm so uh

145
00:05:10,000 --> 00:05:12,800
they are not visible uh actually that's

146
00:05:12,800 --> 00:05:14,240
not true because this device

147
00:05:14,240 --> 00:05:16,400
actually run a fully fledged operating

148
00:05:16,400 --> 00:05:17,520
system

149
00:05:17,520 --> 00:05:19,600
some have a linux and battery operating

150
00:05:19,600 --> 00:05:21,280
system others have

151
00:05:21,280 --> 00:05:23,440
any other real-time operating system

152
00:05:23,440 --> 00:05:25,039
running uh so they

153
00:05:25,039 --> 00:05:28,160
really learn a fully system right and

154
00:05:28,160 --> 00:05:30,720
uh they don't perform secondary tasks as

155
00:05:30,720 --> 00:05:32,479
many people think right i mean they're

156
00:05:32,479 --> 00:05:32,800
not

157
00:05:32,800 --> 00:05:34,800
industrial robots so they are not like

158
00:05:34,800 --> 00:05:36,160
huge robots you can see that are

159
00:05:36,160 --> 00:05:37,600
producing something

160
00:05:37,600 --> 00:05:39,600
but they play a very very important role

161
00:05:39,600 --> 00:05:41,440
in the network because if this device

162
00:05:41,440 --> 00:05:42,000
crash

163
00:05:42,000 --> 00:05:44,560
or have some problems then all the

164
00:05:44,560 --> 00:05:45,520
production

165
00:05:45,520 --> 00:05:48,240
that screw up because all the traffic go

166
00:05:48,240 --> 00:05:50,000
through these devices so they

167
00:05:50,000 --> 00:05:51,919
they're basically like a core component

168
00:05:51,919 --> 00:05:53,360
to the network

169
00:05:53,360 --> 00:05:56,000
and as a consequence of this wrong

170
00:05:56,000 --> 00:05:57,680
commons misunderstanding

171
00:05:57,680 --> 00:05:59,840
these devices tend to be overlooked and

172
00:05:59,840 --> 00:06:02,240
often not indexed in the list of the

173
00:06:02,240 --> 00:06:04,560
assets of your company so in the list of

174
00:06:04,560 --> 00:06:06,800
of things like inventory list you know

175
00:06:06,800 --> 00:06:08,560
of things of devices you have in your

176
00:06:08,560 --> 00:06:09,360
company

177
00:06:09,360 --> 00:06:11,360
and they might not be correctly for

178
00:06:11,360 --> 00:06:12,479
example patch

179
00:06:12,479 --> 00:06:15,280
cannot be correctly monitored or even

180
00:06:15,280 --> 00:06:17,919
misconfigured

181
00:06:17,919 --> 00:06:20,720
so we start our search with idea to do

182
00:06:20,720 --> 00:06:21,600
something new

183
00:06:21,600 --> 00:06:24,080
so in the past thomas you can see here

184
00:06:24,080 --> 00:06:24,880
on the left side

185
00:06:24,880 --> 00:06:26,639
give the presentation a blanket you have

186
00:06:26,639 --> 00:06:28,240
us 2018

187
00:06:28,240 --> 00:06:30,319
where you show that this device might

188
00:06:30,319 --> 00:06:31,520
have problems

189
00:06:31,520 --> 00:06:33,520
um what we call intrinsic

190
00:06:33,520 --> 00:06:35,440
vulnerabilities

191
00:06:35,440 --> 00:06:37,919
for us not much about finding bugs in

192
00:06:37,919 --> 00:06:39,440
these devices but it's more like

193
00:06:39,440 --> 00:06:41,120
studying the technology behind the

194
00:06:41,120 --> 00:06:42,880
protocol translation

195
00:06:42,880 --> 00:06:44,800
and see what could go wrong when you

196
00:06:44,800 --> 00:06:46,720
translate from one protocol to the other

197
00:06:46,720 --> 00:06:47,120
like

198
00:06:47,120 --> 00:06:49,520
looking at from the network standpoint

199
00:06:49,520 --> 00:06:51,599
what happened in the translation

200
00:06:51,599 --> 00:06:54,400
and we did it in a vendor-neutral way so

201
00:06:54,400 --> 00:06:55,520
we are not

202
00:06:55,520 --> 00:06:58,400
finger-pointing a specific vendor but we

203
00:06:58,400 --> 00:07:00,400
are studying as i said the technology

204
00:07:00,400 --> 00:07:03,840
behind behind these devices

205
00:07:03,840 --> 00:07:06,400
uh we focus on modbus because it's

206
00:07:06,400 --> 00:07:08,960
probably the most and widely used

207
00:07:08,960 --> 00:07:11,919
uh ics protocol out there has been

208
00:07:11,919 --> 00:07:13,280
around for decades

209
00:07:13,280 --> 00:07:16,400
uh has been i mean is used everywhere

210
00:07:16,400 --> 00:07:19,599
and support both the uh

211
00:07:19,599 --> 00:07:21,599
the control networks of the tcpap side

212
00:07:21,599 --> 00:07:24,000
of the interface as well as

213
00:07:24,000 --> 00:07:26,479
the serial network what's called modbus

214
00:07:26,479 --> 00:07:28,639
rtu

215
00:07:28,639 --> 00:07:31,039
so we consider five getaways from five

216
00:07:31,039 --> 00:07:32,080
different vendors

217
00:07:32,080 --> 00:07:33,520
as you can see on the screen we have

218
00:07:33,520 --> 00:07:36,479
some from uh taiwan from the east

219
00:07:36,479 --> 00:07:39,199
uh some from europe or some from us as

220
00:07:39,199 --> 00:07:39,840
well

221
00:07:39,840 --> 00:07:43,440
so we try to uh be as global as possible

222
00:07:43,440 --> 00:07:45,280
as iteration as possible

223
00:07:45,280 --> 00:07:48,080
and so the gateways are pretty much all

224
00:07:48,080 --> 00:07:49,280
similar to each other

225
00:07:49,280 --> 00:07:51,280
apart but they divide into macro

226
00:07:51,280 --> 00:07:52,479
categories

227
00:07:52,479 --> 00:07:54,639
those of that are real-time gateways

228
00:07:54,639 --> 00:07:56,319
like this one on screen here

229
00:07:56,319 --> 00:07:59,759
on my hand and bosovatar data station

230
00:07:59,759 --> 00:08:01,840
so the main difference here is that

231
00:08:01,840 --> 00:08:03,199
real-time gateway

232
00:08:03,199 --> 00:08:06,000
operating real time so as soon as you

233
00:08:06,000 --> 00:08:07,680
have a packet hitting the

234
00:08:07,680 --> 00:08:10,720
inbound interface device translate the

235
00:08:10,720 --> 00:08:12,960
packet down to the outbound interface so

236
00:08:12,960 --> 00:08:14,560
there is a one-to-one

237
00:08:14,560 --> 00:08:16,960
uh match if you want between inbound and

238
00:08:16,960 --> 00:08:18,400
outbound traffic

239
00:08:18,400 --> 00:08:20,400
while data stations are more complex

240
00:08:20,400 --> 00:08:21,599
devices and

241
00:08:21,599 --> 00:08:24,400
for optimization and performance reason

242
00:08:24,400 --> 00:08:24,960
they

243
00:08:24,960 --> 00:08:27,280
adopting a synchronous approach so

244
00:08:27,280 --> 00:08:29,120
inbound and outbound are not

245
00:08:29,120 --> 00:08:32,000
necessarily in sync so what happened is

246
00:08:32,000 --> 00:08:33,599
that if the inbound interface for

247
00:08:33,599 --> 00:08:35,279
example receive the read command

248
00:08:35,279 --> 00:08:37,120
for example to read the value out of the

249
00:08:37,120 --> 00:08:38,320
sensor

250
00:08:38,320 --> 00:08:40,399
the device might not query the sensor

251
00:08:40,399 --> 00:08:41,360
directly

252
00:08:41,360 --> 00:08:43,599
because the device might have already a

253
00:08:43,599 --> 00:08:44,399
cached

254
00:08:44,399 --> 00:08:47,440
uh version of the of the of the data on

255
00:08:47,440 --> 00:08:48,480
the sensor

256
00:08:48,480 --> 00:08:50,880
so the device so the get redundant does

257
00:08:50,880 --> 00:08:52,240
not wait for an incoming

258
00:08:52,240 --> 00:08:54,640
pull request to pull data out of the

259
00:08:54,640 --> 00:08:55,279
slave

260
00:08:55,279 --> 00:08:58,560
so the data station uh regularly poll

261
00:08:58,560 --> 00:09:02,720
is laid like a plc for uh updated values

262
00:09:02,720 --> 00:09:05,360
keep a local cache and then update and

263
00:09:05,360 --> 00:09:06,880
then when a request come

264
00:09:06,880 --> 00:09:08,720
from a master you basically respond to

265
00:09:08,720 --> 00:09:10,080
the master

266
00:09:10,080 --> 00:09:12,000
uh of course this more complex

267
00:09:12,000 --> 00:09:14,480
configuration require what is called the

268
00:09:14,480 --> 00:09:16,959
input output mapping table and it's

269
00:09:16,959 --> 00:09:18,000
something we will see

270
00:09:18,000 --> 00:09:21,440
later in in the presentation

271
00:09:21,440 --> 00:09:23,120
so let's see how we approach our

272
00:09:23,120 --> 00:09:25,600
research so suppose we have researcher

273
00:09:25,600 --> 00:09:26,000
like

274
00:09:26,000 --> 00:09:28,800
ourselves right we want to study how a

275
00:09:28,800 --> 00:09:29,920
get we operate

276
00:09:29,920 --> 00:09:32,560
one out of many's right so the approach

277
00:09:32,560 --> 00:09:34,640
tends to be generic as much as possible

278
00:09:34,640 --> 00:09:36,560
you know if it we can reuse the same

279
00:09:36,560 --> 00:09:38,160
approach on different

280
00:09:38,160 --> 00:09:42,080
gateway products so what we do we um

281
00:09:42,080 --> 00:09:44,720
we configure a fuzzer based on what we

282
00:09:44,720 --> 00:09:46,959
want to test like which kind of protocol

283
00:09:46,959 --> 00:09:48,160
we want to assess

284
00:09:48,160 --> 00:09:50,560
do we want to test the gateway from the

285
00:09:50,560 --> 00:09:52,800
uh tcp interface so we can in the

286
00:09:52,800 --> 00:09:55,279
translation from tcp to serial

287
00:09:55,279 --> 00:09:58,320
or from the serial interface translation

288
00:09:58,320 --> 00:09:59,360
from syria

289
00:09:59,360 --> 00:10:02,399
to tcp so we configure the further the

290
00:10:02,399 --> 00:10:04,240
further generate test cases for the

291
00:10:04,240 --> 00:10:05,360
gateway

292
00:10:05,360 --> 00:10:07,360
and also might obligatory in case there

293
00:10:07,360 --> 00:10:09,519
are problems like we get we might crash

294
00:10:09,519 --> 00:10:11,600
we get to my delivery translation and so

295
00:10:11,600 --> 00:10:12,959
on and so forth so the fact there is

296
00:10:12,959 --> 00:10:14,560
already some heuristics

297
00:10:14,560 --> 00:10:17,920
for monitoring uh the device under test

298
00:10:17,920 --> 00:10:19,920
at the point the gateway what it does is

299
00:10:19,920 --> 00:10:21,440
receive inbound traffic and it

300
00:10:21,440 --> 00:10:22,959
translates the traffic

301
00:10:22,959 --> 00:10:26,079
uh down to a simulator so simulator

302
00:10:26,079 --> 00:10:29,360
is a piece of code that simulates uh

303
00:10:29,360 --> 00:10:32,560
for example an hmi interface as a master

304
00:10:32,560 --> 00:10:33,360
node

305
00:10:33,360 --> 00:10:36,720
or can simulate a plc a slave node

306
00:10:36,720 --> 00:10:38,640
and it's very important especially for

307
00:10:38,640 --> 00:10:40,560
data station that might not work

308
00:10:40,560 --> 00:10:42,079
correctly if there is no

309
00:10:42,079 --> 00:10:45,279
simulator attached to the gateway when

310
00:10:45,279 --> 00:10:46,240
we have sniffer

311
00:10:46,240 --> 00:10:48,959
that collect data sends such data down

312
00:10:48,959 --> 00:10:51,360
to an analyzer that process the data in

313
00:10:51,360 --> 00:10:52,320
real time

314
00:10:52,320 --> 00:10:54,240
by comparing inbound and outbound

315
00:10:54,240 --> 00:10:56,079
traffic and detecting

316
00:10:56,079 --> 00:10:59,360
what their potential problems third we

317
00:10:59,360 --> 00:11:00,000
go a bit

318
00:11:00,000 --> 00:11:02,800
in detail on on these macro components

319
00:11:02,800 --> 00:11:05,519
so when it comes to the uh simulator

320
00:11:05,519 --> 00:11:07,600
as i said is it's very important piece

321
00:11:07,600 --> 00:11:08,959
of code because it's it's

322
00:11:08,959 --> 00:11:12,079
used uh as a device as i mean it

323
00:11:12,079 --> 00:11:13,920
simulates basically for example a plc

324
00:11:13,920 --> 00:11:14,480
right

325
00:11:14,480 --> 00:11:16,640
so in this example you have two

326
00:11:16,640 --> 00:11:17,600
simulator

327
00:11:17,600 --> 00:11:19,760
one on the left side of the screen which

328
00:11:19,760 --> 00:11:20,720
uh

329
00:11:20,720 --> 00:11:22,560
simulate the master node and

330
00:11:22,560 --> 00:11:24,079
disconnected via

331
00:11:24,079 --> 00:11:26,720
as you can see here via tcp on this

332
00:11:26,720 --> 00:11:27,600
address

333
00:11:27,600 --> 00:11:30,560
to the uh to the gateway and then we

334
00:11:30,560 --> 00:11:31,600
have a slave

335
00:11:31,600 --> 00:11:34,560
which is a connected vrtu so we a serial

336
00:11:34,560 --> 00:11:35,279
interface

337
00:11:35,279 --> 00:11:38,320
serial port to the gateway so in this

338
00:11:38,320 --> 00:11:41,200
example the master

339
00:11:41,200 --> 00:11:44,240
a read coil command so ask

340
00:11:44,240 --> 00:11:46,079
to send the command to the slave by

341
00:11:46,079 --> 00:11:47,440
requesting

342
00:11:47,440 --> 00:11:50,560
to read the value of five coils

343
00:11:50,560 --> 00:11:54,079
so coil is an address of one bit only

344
00:11:54,079 --> 00:11:55,839
so that means it's going basically to

345
00:11:55,839 --> 00:11:57,440
read the value of the first

346
00:11:57,440 --> 00:12:00,800
five bits out of the of the of the slave

347
00:12:00,800 --> 00:12:01,360
right

348
00:12:01,360 --> 00:12:03,600
for example the plc so in this case send

349
00:12:03,600 --> 00:12:04,639
request

350
00:12:04,639 --> 00:12:06,880
they get to translate the request for

351
00:12:06,880 --> 00:12:08,880
the slave is label reply and get to the

352
00:12:08,880 --> 00:12:10,720
master so it's very simple

353
00:12:10,720 --> 00:12:12,399
so this is an example of translation

354
00:12:12,399 --> 00:12:14,000
from tcp to

355
00:12:14,000 --> 00:12:17,200
serial let me use this example to tell

356
00:12:17,200 --> 00:12:19,279
you a bit more about how

357
00:12:19,279 --> 00:12:22,880
the modbus protocol look like

358
00:12:22,880 --> 00:12:25,839
so here is the packet that is sent by

359
00:12:25,839 --> 00:12:26,800
the master

360
00:12:26,800 --> 00:12:29,519
so it contain a header and information

361
00:12:29,519 --> 00:12:31,200
such as the type of protocol the

362
00:12:31,200 --> 00:12:32,480
language of the

363
00:12:32,480 --> 00:12:34,560
payload and so forth and here you have

364
00:12:34,560 --> 00:12:35,760
the payload

365
00:12:35,760 --> 00:12:38,079
which consists of these five bytes that

366
00:12:38,079 --> 00:12:39,040
are basically

367
00:12:39,040 --> 00:12:41,600
uh expressed by function code zero one

368
00:12:41,600 --> 00:12:42,399
which means

369
00:12:42,399 --> 00:12:45,360
read data starting from address zero for

370
00:12:45,360 --> 00:12:47,680
a quantity of five register

371
00:12:47,680 --> 00:12:49,920
so remember when the master node

372
00:12:49,920 --> 00:12:52,480
generated this packet this bucket get

373
00:12:52,480 --> 00:12:56,160
hit the gateway the gateway

374
00:12:56,160 --> 00:12:58,560
get rid of a modbus tcp header which is

375
00:12:58,560 --> 00:13:00,880
not present in modbus rtu

376
00:13:00,880 --> 00:13:03,279
take the payload compute the checksum

377
00:13:03,279 --> 00:13:03,920
and send

378
00:13:03,920 --> 00:13:07,600
such packet down to the serial interface

379
00:13:07,600 --> 00:13:11,360
at that point of the slave reply with

380
00:13:11,360 --> 00:13:13,760
one zero zero which is actually the data

381
00:13:13,760 --> 00:13:15,680
which was on the plc

382
00:13:15,680 --> 00:13:19,279
and physically the the gateway does

383
00:13:19,279 --> 00:13:22,560
the opposite you basically reassemble

384
00:13:22,560 --> 00:13:24,560
the hair and you can see here register

385
00:13:24,560 --> 00:13:27,600
value 15 which correspond to what was

386
00:13:27,600 --> 00:13:31,680
uh on the on the on the delay

387
00:13:31,680 --> 00:13:33,279
yeah so let me tell you a bit about

388
00:13:33,279 --> 00:13:34,959
fuzzing so fuzzing is very complex

389
00:13:34,959 --> 00:13:36,560
argument we can speak for hours about

390
00:13:36,560 --> 00:13:36,880
this

391
00:13:36,880 --> 00:13:38,240
of course we don't have time so i'm

392
00:13:38,240 --> 00:13:40,240
trying to just give the go very high

393
00:13:40,240 --> 00:13:41,120
level

394
00:13:41,120 --> 00:13:43,839
uh so there are two macro categories of

395
00:13:43,839 --> 00:13:45,760
fat zero supposing that are mutation

396
00:13:45,760 --> 00:13:46,160
based

397
00:13:46,160 --> 00:13:49,279
so we are able to learn uh the semantic

398
00:13:49,279 --> 00:13:50,320
of the protocol

399
00:13:50,320 --> 00:13:53,040
and these are used when you want a funds

400
00:13:53,040 --> 00:13:53,760
protocol

401
00:13:53,760 --> 00:13:56,079
that is for example proprietary for

402
00:13:56,079 --> 00:13:58,880
example cmss7 or any other property

403
00:13:58,880 --> 00:14:00,079
protocol

404
00:14:00,079 --> 00:14:02,639
in this case we went for a generation

405
00:14:02,639 --> 00:14:03,839
based further

406
00:14:03,839 --> 00:14:07,120
because modbus is uh um yeah as

407
00:14:07,120 --> 00:14:09,360
you know is a free specification you can

408
00:14:09,360 --> 00:14:10,560
download the specification for our

409
00:14:10,560 --> 00:14:11,600
website

410
00:14:11,600 --> 00:14:14,000
and at that point we went for buffalo

411
00:14:14,000 --> 00:14:15,920
and in particular a customized version

412
00:14:15,920 --> 00:14:17,839
of the code developed by uncraft i want

413
00:14:17,839 --> 00:14:19,360
to create it here

414
00:14:19,360 --> 00:14:23,600
and move on is super cool because uh

415
00:14:23,600 --> 00:14:25,199
you can basically if you know like the

416
00:14:25,199 --> 00:14:27,199
uh if you have a specification

417
00:14:27,199 --> 00:14:28,800
then at that point that you can for

418
00:14:28,800 --> 00:14:30,320
example here on the screen

419
00:14:30,320 --> 00:14:32,079
this is an example to file the right

420
00:14:32,079 --> 00:14:33,360
single coil

421
00:14:33,360 --> 00:14:36,639
request so a call used to set a beat

422
00:14:36,639 --> 00:14:40,079
on on a on a slave uh on the slave node

423
00:14:40,079 --> 00:14:42,880
so here you can specify like here with a

424
00:14:42,880 --> 00:14:43,680
block called

425
00:14:43,680 --> 00:14:47,199
adu the header of the modbus tcp

426
00:14:47,199 --> 00:14:49,440
you can specify you have the payload and

427
00:14:49,440 --> 00:14:51,040
you go define you basically define all

428
00:14:51,040 --> 00:14:52,240
the different fields

429
00:14:52,240 --> 00:14:54,160
what the different fields are if you are

430
00:14:54,160 --> 00:14:55,760
integer if they are

431
00:14:55,760 --> 00:14:59,120
a word how big how long you know uh the

432
00:14:59,120 --> 00:15:00,959
indianness of the field

433
00:15:00,959 --> 00:15:03,839
and also you can say uh if you wanna

434
00:15:03,839 --> 00:15:05,199
what one of us you wanna find

435
00:15:05,199 --> 00:15:07,760
all the fields just some of them uh do

436
00:15:07,760 --> 00:15:08,959
you wanna fuds

437
00:15:08,959 --> 00:15:11,600
in which uh you know you wanna cover all

438
00:15:11,600 --> 00:15:12,160
the

439
00:15:12,160 --> 00:15:14,959
other space of the field or just you

440
00:15:14,959 --> 00:15:16,079
want to add a few

441
00:15:16,079 --> 00:15:19,199
random values uh you may want to add

442
00:15:19,199 --> 00:15:21,680
like some down here for example some

443
00:15:21,680 --> 00:15:22,800
trailing gearbed

444
00:15:22,800 --> 00:15:24,320
so like if you want to make for example

445
00:15:24,320 --> 00:15:26,560
a very long packet to potentially

446
00:15:26,560 --> 00:15:27,040
trigger

447
00:15:27,040 --> 00:15:30,079
a dial service for example condition so

448
00:15:30,079 --> 00:15:32,320
it's really cool i really suggest you to

449
00:15:32,320 --> 00:15:35,920
uh to take a look at this faster

450
00:15:35,920 --> 00:15:38,320
you can also of course instrument fazer

451
00:15:38,320 --> 00:15:41,120
to monitor for condition that might

452
00:15:41,120 --> 00:15:43,519
be a sign of a crash uh for example you

453
00:15:43,519 --> 00:15:44,240
cannot

454
00:15:44,240 --> 00:15:45,759
regularly connect with the device to see

455
00:15:45,759 --> 00:15:47,839
if the device is still up or not

456
00:15:47,839 --> 00:15:49,519
and in case something is wrong you can

457
00:15:49,519 --> 00:15:50,959
automatically

458
00:15:50,959 --> 00:15:53,120
reboot the device if you have a way like

459
00:15:53,120 --> 00:15:54,399
to as we did

460
00:15:54,399 --> 00:15:57,120
on our side to control an intelligent

461
00:15:57,120 --> 00:15:59,360
power socket

462
00:15:59,360 --> 00:16:01,519
okay sniffer we use a wireshark for the

463
00:16:01,519 --> 00:16:02,880
internet interface

464
00:16:02,880 --> 00:16:06,320
and io ninja which is a very cool piece

465
00:16:06,320 --> 00:16:07,680
of code

466
00:16:07,680 --> 00:16:10,240
to monitor our serial interfaces and

467
00:16:10,240 --> 00:16:12,240
then we have basically a code for

468
00:16:12,240 --> 00:16:13,360
normalize

469
00:16:13,360 --> 00:16:15,680
the output of these tools to be able to

470
00:16:15,680 --> 00:16:16,560
compare

471
00:16:16,560 --> 00:16:18,560
uh what come from the internet interface

472
00:16:18,560 --> 00:16:21,120
with the serial interface

473
00:16:21,120 --> 00:16:23,839
uh in this way the analyzer can as i

474
00:16:23,839 --> 00:16:24,160
said

475
00:16:24,160 --> 00:16:25,759
automatically detect mismatches and

476
00:16:25,759 --> 00:16:27,199
packet drops

477
00:16:27,199 --> 00:16:29,199
i'm not going much into detail on how we

478
00:16:29,199 --> 00:16:31,120
did this otherwise would take too much

479
00:16:31,120 --> 00:16:31,519
time

480
00:16:31,519 --> 00:16:33,279
it's written in the paper so we have

481
00:16:33,279 --> 00:16:34,720
different heuristics

482
00:16:34,720 --> 00:16:37,680
for uh making sure that the inbound

483
00:16:37,680 --> 00:16:38,399
pocket

484
00:16:38,399 --> 00:16:40,079
actually get forward that could get

485
00:16:40,079 --> 00:16:41,759
translated to the outbound pocket

486
00:16:41,759 --> 00:16:45,279
and in a correct way

487
00:16:45,839 --> 00:16:49,120
this is our setup uh one of our setups

488
00:16:49,120 --> 00:16:50,160
for example here

489
00:16:50,160 --> 00:16:52,079
we have an intelligent power socket

490
00:16:52,079 --> 00:16:53,759
power strip that get

491
00:16:53,759 --> 00:16:55,600
it's used to reboot the device in case

492
00:16:55,600 --> 00:16:58,160
of crash we have a serial tab

493
00:16:58,160 --> 00:17:00,160
that we use to monitor the serial

494
00:17:00,160 --> 00:17:02,079
traffic we have a sniffer of a tcp

495
00:17:02,079 --> 00:17:03,920
interface as well then we have an

496
00:17:03,920 --> 00:17:05,439
arduino where we run

497
00:17:05,439 --> 00:17:08,559
both our fuzzer as well as different

498
00:17:08,559 --> 00:17:09,520
simulators

499
00:17:09,520 --> 00:17:11,439
that all of these of course it's uh

500
00:17:11,439 --> 00:17:12,720
linux based

501
00:17:12,720 --> 00:17:16,640
so it works pretty well with arduino

502
00:17:16,640 --> 00:17:19,039
all right so this is a pretty it's first

503
00:17:19,039 --> 00:17:20,480
15 minutes of my talk

504
00:17:20,480 --> 00:17:23,520
uh it's about uh uh what we kind of

505
00:17:23,520 --> 00:17:24,480
introduction

506
00:17:24,480 --> 00:17:26,400
let's now go to the most interesting

507
00:17:26,400 --> 00:17:27,839
thing so what we've found

508
00:17:27,839 --> 00:17:29,919
so let me start with resource exertion

509
00:17:29,919 --> 00:17:31,760
so this is the case in which the device

510
00:17:31,760 --> 00:17:35,200
might for example uh reboot my

511
00:17:35,200 --> 00:17:38,480
hanger um i have problem on the tcpap

512
00:17:38,480 --> 00:17:39,120
stack

513
00:17:39,120 --> 00:17:41,520
so all the tested device you know show

514
00:17:41,520 --> 00:17:42,480
such a problem

515
00:17:42,480 --> 00:17:44,880
so it was very easy for an attacker to

516
00:17:44,880 --> 00:17:47,440
block these devices which means like uh

517
00:17:47,440 --> 00:17:49,280
around some for example a plant because

518
00:17:49,280 --> 00:17:51,039
you can remotely

519
00:17:51,039 --> 00:17:53,039
anywhere from the control network by

520
00:17:53,039 --> 00:17:54,880
just sending few packets

521
00:17:54,880 --> 00:17:56,559
blocked in the device and block

522
00:17:56,559 --> 00:17:58,160
basically all the communication

523
00:17:58,160 --> 00:18:01,280
down to the uh to a field bus network

524
00:18:01,280 --> 00:18:03,520
so here we have a device which uh

525
00:18:03,520 --> 00:18:05,520
operates in 15 minutes because

526
00:18:05,520 --> 00:18:08,799
here 50 minutes 45 seconds and so we

527
00:18:08,799 --> 00:18:10,640
start fuzzing it here on the right you

528
00:18:10,640 --> 00:18:12,720
can see that we generate a test case

529
00:18:12,720 --> 00:18:15,760
every second for a total

530
00:18:15,760 --> 00:18:19,200
amount of bandwidth which is only 21

531
00:18:19,200 --> 00:18:21,360
kilobits per second so it's neglectable

532
00:18:21,360 --> 00:18:22,480
it's nothing

533
00:18:22,480 --> 00:18:25,360
but even at this speed rate we can

534
00:18:25,360 --> 00:18:27,039
basically be divided you know the fats

535
00:18:27,039 --> 00:18:28,480
area detector

536
00:18:28,480 --> 00:18:31,200
effects thanks to procmo like a crash uh

537
00:18:31,200 --> 00:18:33,440
in fact if we connect to the device here

538
00:18:33,440 --> 00:18:35,760
the web interface of the device does not

539
00:18:35,760 --> 00:18:37,760
respond so the device actually

540
00:18:37,760 --> 00:18:41,120
uh just you know crash and so what the

541
00:18:41,120 --> 00:18:43,520
system did automatically bootstrap

542
00:18:43,520 --> 00:18:46,720
thanks to the 2018 this power socket

543
00:18:46,720 --> 00:18:49,200
uh this intelligent power socket we made

544
00:18:49,200 --> 00:18:50,880
the device reboot

545
00:18:50,880 --> 00:18:54,240
and uh the device yes you know got up

546
00:18:54,240 --> 00:18:57,440
in five seconds and you can see your

547
00:18:57,440 --> 00:18:59,919
physical state up again and you can see

548
00:18:59,919 --> 00:19:01,760
that the fat is in continuum so this is

549
00:19:01,760 --> 00:19:02,480
a

550
00:19:02,480 --> 00:19:04,320
it's called dgb's device but um you know

551
00:19:04,320 --> 00:19:06,640
all these different of our devices

552
00:19:06,640 --> 00:19:09,919
show this problem but one called red

553
00:19:09,919 --> 00:19:12,960
lion was actually even cooler because

554
00:19:12,960 --> 00:19:14,720
by sending a single pocket you could

555
00:19:14,720 --> 00:19:16,880
basically make the device reboot

556
00:19:16,880 --> 00:19:19,679
so uh one of this packet is called read

557
00:19:19,679 --> 00:19:20,240
coil

558
00:19:20,240 --> 00:19:23,440
0 which means you want to read out of

559
00:19:23,440 --> 00:19:24,400
the slave

560
00:19:24,400 --> 00:19:27,440
uh the value of the uh

561
00:19:27,440 --> 00:19:30,640
of the address number zero so this

562
00:19:30,640 --> 00:19:32,240
device is a data station

563
00:19:32,240 --> 00:19:35,200
so uh i'm going to describe that later

564
00:19:35,200 --> 00:19:35,760
but

565
00:19:35,760 --> 00:19:37,679
just to be briefly briefly mentioned

566
00:19:37,679 --> 00:19:40,000
that this is zero here in data station

567
00:19:40,000 --> 00:19:40,960
is used as an

568
00:19:40,960 --> 00:19:43,760
index in the memory uh of a value

569
00:19:43,760 --> 00:19:45,600
mapping table so it's an index in the

570
00:19:45,600 --> 00:19:47,760
mapping table so most likely we made

571
00:19:47,760 --> 00:19:49,679
this some mistakes

572
00:19:49,679 --> 00:19:51,760
with zero uh it could be that the index

573
00:19:51,760 --> 00:19:53,520
table might start from one so the device

574
00:19:53,520 --> 00:19:54,799
doesn't doesn't know what

575
00:19:54,799 --> 00:19:57,120
zero is that point the device basically

576
00:19:57,120 --> 00:19:58,160
reboot

577
00:19:58,160 --> 00:20:01,600
uh let me uh using uh pop-up

578
00:20:01,600 --> 00:20:04,320
here yeah vlc i'm going to show you a

579
00:20:04,320 --> 00:20:06,159
demo bus uh

580
00:20:06,159 --> 00:20:09,200
it's pretty short so here is basically

581
00:20:09,200 --> 00:20:11,280
the device that is beeping correctly

582
00:20:11,280 --> 00:20:13,600
so it's working it's fine so here we

583
00:20:13,600 --> 00:20:15,760
send such packet where we say okay

584
00:20:15,760 --> 00:20:18,559
read basically zero and you can see the

585
00:20:18,559 --> 00:20:21,039
device basically

586
00:20:21,039 --> 00:20:23,280
just you know crashed uh you can see

587
00:20:23,280 --> 00:20:24,960
down here there are no more information

588
00:20:24,960 --> 00:20:26,400
coming no more logs coming from the

589
00:20:26,400 --> 00:20:27,679
device

590
00:20:27,679 --> 00:20:29,360
there is a beep the device is actually

591
00:20:29,360 --> 00:20:31,600
rebooting down here it takes about 20

592
00:20:31,600 --> 00:20:32,799
seconds

593
00:20:32,799 --> 00:20:35,280
and now is up again you can see down

594
00:20:35,280 --> 00:20:35,840
here

595
00:20:35,840 --> 00:20:37,440
then i'm going to send the same packet

596
00:20:37,440 --> 00:20:39,039
again

597
00:20:39,039 --> 00:20:41,120
and the device they see crash again so

598
00:20:41,120 --> 00:20:42,720
all the lats went down

599
00:20:42,720 --> 00:20:45,919
and you basically reboot

600
00:20:46,840 --> 00:20:49,440
yeah yeah pretty scary

601
00:20:49,440 --> 00:20:52,720
all right so let's now look at the core

602
00:20:52,720 --> 00:20:54,640
power search that is this protocol

603
00:20:54,640 --> 00:20:56,960
translation thing so how

604
00:20:56,960 --> 00:20:59,919
we can abuse a protocol translation to

605
00:20:59,919 --> 00:21:01,280
do a large set

606
00:21:01,280 --> 00:21:03,760
to regular set of attacks so first we

607
00:21:03,760 --> 00:21:04,400
start

608
00:21:04,400 --> 00:21:06,480
testing our device and see how reliable

609
00:21:06,480 --> 00:21:08,480
they are when it comes to my filtering

610
00:21:08,480 --> 00:21:10,080
mark 4 packets

611
00:21:10,080 --> 00:21:11,840
and it turned out that one of these

612
00:21:11,840 --> 00:21:13,840
devices was

613
00:21:13,840 --> 00:21:16,400
not able to filter any more form packet

614
00:21:16,400 --> 00:21:18,000
you can see the zero here so he said

615
00:21:18,000 --> 00:21:19,360
okay you know probably

616
00:21:19,360 --> 00:21:22,159
you know this device does not have any

617
00:21:22,159 --> 00:21:22,640
you know

618
00:21:22,640 --> 00:21:25,039
filtering mechanism in place so some of

619
00:21:25,039 --> 00:21:26,000
these packets

620
00:21:26,000 --> 00:21:29,600
turn out to have a wrong message lang

621
00:21:29,600 --> 00:21:31,520
information what does it mean

622
00:21:31,520 --> 00:21:34,960
it means that um basically

623
00:21:34,960 --> 00:21:37,760
uh in the modbus tcp packet there is a

624
00:21:37,760 --> 00:21:39,200
field called message lang

625
00:21:39,200 --> 00:21:41,440
that is used to indicate how long is the

626
00:21:41,440 --> 00:21:43,120
pdu like the payload

627
00:21:43,120 --> 00:21:45,520
so in this case the payload consists of

628
00:21:45,520 --> 00:21:47,120
six bytes

629
00:21:47,120 --> 00:21:48,720
but you know the message length field

630
00:21:48,720 --> 00:21:50,799
contain a value of 11. so there is a

631
00:21:50,799 --> 00:21:51,840
match between

632
00:21:51,840 --> 00:21:54,640
the real length of the payload and what

633
00:21:54,640 --> 00:21:55,520
is expressed

634
00:21:55,520 --> 00:21:59,039
in the field of a a modmas tcp header

635
00:21:59,039 --> 00:22:01,200
so this packet was one of my four

636
00:22:01,200 --> 00:22:03,520
packets that were automatically

637
00:22:03,520 --> 00:22:06,960
built by the fuzzer okay

638
00:22:06,960 --> 00:22:09,039
so what happened here is that the device

639
00:22:09,039 --> 00:22:10,080
did not

640
00:22:10,080 --> 00:22:13,039
do any translation so did not get read

641
00:22:13,039 --> 00:22:14,480
for example of header

642
00:22:14,480 --> 00:22:16,960
compute the checksum so it did not

643
00:22:16,960 --> 00:22:17,840
convert from

644
00:22:17,840 --> 00:22:21,720
tcp to rtu but basically it just did the

645
00:22:21,720 --> 00:22:23,840
straightforwarding right so it basically

646
00:22:23,840 --> 00:22:25,679
took the packet as it is and just

647
00:22:25,679 --> 00:22:29,919
put it on the on the outbound interface

648
00:22:29,919 --> 00:22:33,039
and what happened here is that if you

649
00:22:33,039 --> 00:22:34,720
have for example an attacker that

650
00:22:34,720 --> 00:22:36,880
compromise in historian like a database

651
00:22:36,880 --> 00:22:38,720
for example where data of the production

652
00:22:38,720 --> 00:22:39,600
on store

653
00:22:39,600 --> 00:22:41,200
you can send such pocket down to the

654
00:22:41,200 --> 00:22:43,039
protocol gateway what the

655
00:22:43,039 --> 00:22:44,880
protocol will get it does it for the

656
00:22:44,880 --> 00:22:47,120
packet as it is to the plc

657
00:22:47,120 --> 00:22:48,880
so as an example we have this packet

658
00:22:48,880 --> 00:22:50,480
here you can see on screen

659
00:22:50,480 --> 00:22:53,280
this is a packet that has as you can see

660
00:22:53,280 --> 00:22:54,159
here in

661
00:22:54,159 --> 00:22:57,039
function code four that means that this

662
00:22:57,039 --> 00:22:58,000
packet is a

663
00:22:58,000 --> 00:23:01,280
read request okay modbus tcp

664
00:23:01,280 --> 00:23:04,720
if this byte is four it means that we

665
00:23:04,720 --> 00:23:06,400
are going to send basically by the

666
00:23:06,400 --> 00:23:08,559
semantic module tcp is a read request

667
00:23:08,559 --> 00:23:10,240
and we are saying we are basically

668
00:23:10,240 --> 00:23:13,760
asking to the plc to give us uh

669
00:23:13,760 --> 00:23:16,799
70 registers in x starting from this

670
00:23:16,799 --> 00:23:17,679
address

671
00:23:17,679 --> 00:23:19,440
whatever is that if this pocket get

672
00:23:19,440 --> 00:23:21,360
forwarded as it is or mode on

673
00:23:21,360 --> 00:23:25,039
on the rtu bus if we read the same

674
00:23:25,039 --> 00:23:27,039
packet by applying the modbus

675
00:23:27,039 --> 00:23:30,799
rtu semantic basically uh

676
00:23:30,799 --> 00:23:33,120
this packet automatically become a right

677
00:23:33,120 --> 00:23:34,480
multiple coil

678
00:23:34,480 --> 00:23:37,520
request this is because the function

679
00:23:37,520 --> 00:23:41,520
code in modbus rtu is the second byte

680
00:23:41,520 --> 00:23:44,960
which is zero f so automatically

681
00:23:44,960 --> 00:23:46,799
basically we are able to convert the

682
00:23:46,799 --> 00:23:48,880
read request into write request

683
00:23:48,880 --> 00:23:51,120
so this is pretty severe as i'm going to

684
00:23:51,120 --> 00:23:52,799
show you in the demo because if you have

685
00:23:52,799 --> 00:23:54,240
a firewall in between

686
00:23:54,240 --> 00:23:56,799
that prevent any change to the

687
00:23:56,799 --> 00:23:58,080
configuration

688
00:23:58,080 --> 00:24:00,720
of your plant of your network for

689
00:24:00,720 --> 00:24:01,279
example

690
00:24:01,279 --> 00:24:04,400
change the value of a motor or

691
00:24:04,400 --> 00:24:07,360
disable a relay or disable a thermometer

692
00:24:07,360 --> 00:24:08,880
if you have a foreign placement prevent

693
00:24:08,880 --> 00:24:10,159
that

694
00:24:10,159 --> 00:24:12,240
then you normally say okay you know i'm

695
00:24:12,240 --> 00:24:13,520
relaxed but you know

696
00:24:13,520 --> 00:24:16,000
here you can basically convert a read

697
00:24:16,000 --> 00:24:17,039
into the right

698
00:24:17,039 --> 00:24:19,520
so you can basically fall easily the

699
00:24:19,520 --> 00:24:20,400
firewall

700
00:24:20,400 --> 00:24:22,880
and you can send a very knockout packet

701
00:24:22,880 --> 00:24:24,159
like a reader and

702
00:24:24,159 --> 00:24:26,080
turn it into a very fancy packet where

703
00:24:26,080 --> 00:24:27,919
you can basically change anything in

704
00:24:27,919 --> 00:24:29,600
your network

705
00:24:29,600 --> 00:24:31,279
so let me show you this example here

706
00:24:31,279 --> 00:24:34,320
with vlc again

707
00:24:36,080 --> 00:24:39,360
so this is our our gateway you know is

708
00:24:39,360 --> 00:24:42,080
this one here it's operating correctly

709
00:24:42,080 --> 00:24:44,559
this is a web interface it's configured

710
00:24:44,559 --> 00:24:46,640
to convert the modbus protocol

711
00:24:46,640 --> 00:24:50,000
from internet to serial is listening on

712
00:24:50,000 --> 00:24:51,120
this port

713
00:24:51,120 --> 00:24:52,960
for inbound traffic on the ethernet

714
00:24:52,960 --> 00:24:54,320
interface

715
00:24:54,320 --> 00:24:55,919
now what i'm going to do i'm going to

716
00:24:55,919 --> 00:24:58,320
run the two sniffer

717
00:24:58,320 --> 00:25:01,520
one on veteran interface uh and one on

718
00:25:01,520 --> 00:25:01,919
the

719
00:25:01,919 --> 00:25:04,000
on the serial interface thanks to this

720
00:25:04,000 --> 00:25:05,440
pass monitor

721
00:25:05,440 --> 00:25:08,080
application and then i'm going basically

722
00:25:08,080 --> 00:25:09,919
to send the packet i show you before

723
00:25:09,919 --> 00:25:12,880
exactly the same like a read request

724
00:25:12,880 --> 00:25:14,799
and you will see basically that on the

725
00:25:14,799 --> 00:25:16,799
plc which is this one you can see here

726
00:25:16,799 --> 00:25:17,679
on screen

727
00:25:17,679 --> 00:25:19,520
something will happen so the plc

728
00:25:19,520 --> 00:25:21,679
correctly is correctly operating so he's

729
00:25:21,679 --> 00:25:24,080
reading the value out of the thermometer

730
00:25:24,080 --> 00:25:26,000
it's reading the value out of

731
00:25:26,000 --> 00:25:30,080
a tachometer uh is saying that the motor

732
00:25:30,080 --> 00:25:32,720
in the production system is operating

733
00:25:32,720 --> 00:25:34,799
correctly and so on and so forth

734
00:25:34,799 --> 00:25:37,200
so i'm going to send the such packet

735
00:25:37,200 --> 00:25:37,840
down here

736
00:25:37,840 --> 00:25:39,600
you can see the read request function

737
00:25:39,600 --> 00:25:40,880
code 4

738
00:25:40,880 --> 00:25:45,600
such number of address from this address

739
00:25:46,240 --> 00:25:48,559
all right so so you can see here as soon

740
00:25:48,559 --> 00:25:49,919
as i send the packet

741
00:25:49,919 --> 00:25:52,320
basically the gateway for the packet as

742
00:25:52,320 --> 00:25:54,640
it is on the serial interface

743
00:25:54,640 --> 00:25:57,039
the plc receive the packet interpret the

744
00:25:57,039 --> 00:25:58,320
pocket at the right

745
00:25:58,320 --> 00:26:00,960
so it disables basically the turmoil and

746
00:26:00,960 --> 00:26:02,799
the other information keep the motor

747
00:26:02,799 --> 00:26:03,600
running

748
00:26:03,600 --> 00:26:05,440
so that means that the motor is running

749
00:26:05,440 --> 00:26:07,200
without a feedback loop so it doesn't

750
00:26:07,200 --> 00:26:08,080
know how much

751
00:26:08,080 --> 00:26:10,240
if things are going fine or not so you

752
00:26:10,240 --> 00:26:11,440
have basically a

753
00:26:11,440 --> 00:26:13,919
production which is out of control that

754
00:26:13,919 --> 00:26:15,360
it could be very severe

755
00:26:15,360 --> 00:26:17,360
here and ago i'm showing that from a

756
00:26:17,360 --> 00:26:19,279
sniffer basically it's a push request

757
00:26:19,279 --> 00:26:22,000
that's the pocket the attacker sent

758
00:26:22,000 --> 00:26:24,640
and he's exactly the same as the packet

759
00:26:24,640 --> 00:26:26,720
that is received on the serial side so

760
00:26:26,720 --> 00:26:28,000
there is actually no

761
00:26:28,000 --> 00:26:30,720
as i said no translation but a simple

762
00:26:30,720 --> 00:26:34,640
forwarding of the packet as it is

763
00:26:34,640 --> 00:26:36,320
all right so let me jump to data

764
00:26:36,320 --> 00:26:37,760
stations so these are more complex

765
00:26:37,760 --> 00:26:38,720
devices

766
00:26:38,720 --> 00:26:41,440
because they do not work synchronously

767
00:26:41,440 --> 00:26:43,760
but we have two routine one

768
00:26:43,760 --> 00:26:46,159
that basically parse the inbound traffic

769
00:26:46,159 --> 00:26:48,000
and set basically values

770
00:26:48,000 --> 00:26:50,480
in the ad in the in their mapping table

771
00:26:50,480 --> 00:26:51,520
the second one

772
00:26:51,520 --> 00:26:54,000
is basically use the discrete monitor

773
00:26:54,000 --> 00:26:55,919
value mapping table in case where

774
00:26:55,919 --> 00:26:58,000
there are changes uh somewhere in the

775
00:26:58,000 --> 00:26:59,760
address of the mapping table generated

776
00:26:59,760 --> 00:27:02,960
the appropriate request for the slave

777
00:27:02,960 --> 00:27:05,360
so take this example here we have

778
00:27:05,360 --> 00:27:06,240
another

779
00:27:06,240 --> 00:27:09,120
a data station configured as following

780
00:27:09,120 --> 00:27:10,240
so the data station

781
00:27:10,240 --> 00:27:13,120
is uh configured to set a software

782
00:27:13,120 --> 00:27:13,760
switch

783
00:27:13,760 --> 00:27:16,960
on the slave like set a bit like zero

784
00:27:16,960 --> 00:27:18,559
one whatever obviously

785
00:27:18,559 --> 00:27:21,760
and set a an integer like a critical

786
00:27:21,760 --> 00:27:22,720
temperature

787
00:27:22,720 --> 00:27:26,159
on uh of the plc

788
00:27:26,159 --> 00:27:29,440
and these two modbus command are mapped

789
00:27:29,440 --> 00:27:31,760
to this address you can see here so

790
00:27:31,760 --> 00:27:32,480
address

791
00:27:32,480 --> 00:27:35,120
zero which is one byte is used to

792
00:27:35,120 --> 00:27:36,799
control the software

793
00:27:36,799 --> 00:27:39,840
the set software switch while address

794
00:27:39,840 --> 00:27:41,919
two and three which is two bytes

795
00:27:41,919 --> 00:27:43,760
to set the critical temperature what

796
00:27:43,760 --> 00:27:46,000
does it mean it means that

797
00:27:46,000 --> 00:27:49,360
if the device received a

798
00:27:49,360 --> 00:27:53,039
a request of write to the first

799
00:27:53,039 --> 00:27:55,440
address other zero what the device will

800
00:27:55,440 --> 00:27:57,039
do is generate a

801
00:27:57,039 --> 00:28:00,080
set software switch command why if you

802
00:28:00,080 --> 00:28:01,200
receive the request

803
00:28:01,200 --> 00:28:03,360
for address space two and three it will

804
00:28:03,360 --> 00:28:05,760
basically set the critical threshold

805
00:28:05,760 --> 00:28:08,799
kind of bit confusing thing uh so there

806
00:28:08,799 --> 00:28:10,480
are different problems here the first

807
00:28:10,480 --> 00:28:13,840
is that uh it's uh it's a given weird

808
00:28:13,840 --> 00:28:16,159
factor thanks so i basically whatever is

809
00:28:16,159 --> 00:28:17,919
that

810
00:28:17,919 --> 00:28:20,399
in a beast device if a device receive a

811
00:28:20,399 --> 00:28:21,039
right

812
00:28:21,039 --> 00:28:23,840
coil i don't know address zero it will

813
00:28:23,840 --> 00:28:25,520
basically propagate

814
00:28:25,520 --> 00:28:27,679
the right call to the outbound interface

815
00:28:27,679 --> 00:28:29,520
as it is in a data station

816
00:28:29,520 --> 00:28:33,039
we use zero as a index

817
00:28:33,039 --> 00:28:35,360
in the mapping table i show you before

818
00:28:35,360 --> 00:28:37,440
so in the mapping table here

819
00:28:37,440 --> 00:28:40,399
down here basically it's using an index

820
00:28:40,399 --> 00:28:42,559
here so you will not

821
00:28:42,559 --> 00:28:44,399
for while the packet as it is but it

822
00:28:44,399 --> 00:28:45,840
will set basically

823
00:28:45,840 --> 00:28:48,880
that bit in the in the others table

824
00:28:48,880 --> 00:28:51,360
that's how these data stations are

825
00:28:51,360 --> 00:28:52,080
designed

826
00:28:52,080 --> 00:28:53,919
and the problem is that there is an out

827
00:28:53,919 --> 00:28:55,360
of buying the right condition

828
00:28:55,360 --> 00:28:56,640
and also there is no check on the

829
00:28:56,640 --> 00:28:58,159
financial code what does it mean it

830
00:28:58,159 --> 00:28:59,440
means that the attacker can

831
00:28:59,440 --> 00:29:02,880
write everywhere in the mapping table

832
00:29:02,880 --> 00:29:05,840
and trigger basically any command is

833
00:29:05,840 --> 00:29:07,840
configured in the mapping table

834
00:29:07,840 --> 00:29:09,120
based on how the mapping table is

835
00:29:09,120 --> 00:29:11,200
configured so let me

836
00:29:11,200 --> 00:29:12,960
okay let me show you here the impact the

837
00:29:12,960 --> 00:29:14,960
input is that an attacker can convert

838
00:29:14,960 --> 00:29:17,120
the right coil into right register

839
00:29:17,120 --> 00:29:19,039
as well and write register in the right

840
00:29:19,039 --> 00:29:21,600
coil and can also cause an amplification

841
00:29:21,600 --> 00:29:23,679
attack so it can use a right multiple

842
00:29:23,679 --> 00:29:24,799
coil

843
00:29:24,799 --> 00:29:27,760
a request to generate on the serial side

844
00:29:27,760 --> 00:29:28,399
multiple

845
00:29:28,399 --> 00:29:32,080
right call and write register request

846
00:29:32,080 --> 00:29:33,600
okay let's go with an example which

847
00:29:33,600 --> 00:29:35,360
makes things way more easier to

848
00:29:35,360 --> 00:29:36,880
understand because we don't have

849
00:29:36,880 --> 00:29:40,080
much time here i have 10 more minutes so

850
00:29:40,080 --> 00:29:43,279
uh so let's assume there is a uh again

851
00:29:43,279 --> 00:29:46,720
like a in a production plant

852
00:29:46,720 --> 00:29:48,480
that is configured as following so there

853
00:29:48,480 --> 00:29:50,000
is a uh

854
00:29:50,000 --> 00:29:53,200
then the army can set a critical temper

855
00:29:53,200 --> 00:29:55,760
threshold critical temperature in this

856
00:29:55,760 --> 00:29:57,760
case is 200 celsius

857
00:29:57,760 --> 00:29:59,440
and then we have basically a plan that

858
00:29:59,440 --> 00:30:01,279
is monitoring the temperature in this

859
00:30:01,279 --> 00:30:03,120
case the 42 celsius now

860
00:30:03,120 --> 00:30:05,520
so what happened is that if this current

861
00:30:05,520 --> 00:30:07,679
temperatures go over the critical

862
00:30:07,679 --> 00:30:08,720
temperatures

863
00:30:08,720 --> 00:30:11,200
the production basically the plc

864
00:30:11,200 --> 00:30:14,000
generator to trigger an alarm

865
00:30:14,000 --> 00:30:17,520
and and block the production so

866
00:30:17,520 --> 00:30:20,000
we assume that this critical threshold

867
00:30:20,000 --> 00:30:22,080
is a is a protected parameter

868
00:30:22,080 --> 00:30:25,520
so there is no way to change such value

869
00:30:25,520 --> 00:30:28,960
because the uh and because we don't want

870
00:30:28,960 --> 00:30:31,039
you know uh someone might pump my temper

871
00:30:31,039 --> 00:30:32,159
with his critical

872
00:30:32,159 --> 00:30:34,480
uh value so a way in which this

873
00:30:34,480 --> 00:30:35,279
implemented

874
00:30:35,279 --> 00:30:37,679
is via an ics firewall so regular css

875
00:30:37,679 --> 00:30:38,399
file that

876
00:30:38,399 --> 00:30:42,080
block requests to set a critical

877
00:30:42,080 --> 00:30:43,919
threshold

878
00:30:43,919 --> 00:30:45,760
normally you do it you normally do it by

879
00:30:45,760 --> 00:30:47,360
blocking a right

880
00:30:47,360 --> 00:30:49,919
request okay where write register

881
00:30:49,919 --> 00:30:51,279
request where you want to change

882
00:30:51,279 --> 00:30:54,080
basically value of the register okay

883
00:30:54,080 --> 00:30:56,159
so we show you how exactly an attacker

884
00:30:56,159 --> 00:30:57,120
can actually set

885
00:30:57,120 --> 00:31:00,080
such value very high to disable the

886
00:31:00,080 --> 00:31:01,679
alarm so to make sure to

887
00:31:01,679 --> 00:31:04,159
make any way that the temperature may

888
00:31:04,159 --> 00:31:05,200
not even

889
00:31:05,200 --> 00:31:08,559
may not be able to hit such threshold

890
00:31:08,559 --> 00:31:10,720
and we also show you the opposite how

891
00:31:10,720 --> 00:31:12,960
you can set the pressure very low

892
00:31:12,960 --> 00:31:16,240
to trigger false positive so here it's

893
00:31:16,240 --> 00:31:19,919
basically the example uh let me go back

894
00:31:19,919 --> 00:31:22,559
yeah here

895
00:31:23,840 --> 00:31:27,279
mox camera one so this is uh

896
00:31:27,279 --> 00:31:29,679
what we built here it's our testing lab

897
00:31:29,679 --> 00:31:31,120
so that's the gateway

898
00:31:31,120 --> 00:31:32,960
to the data station we are going to test

899
00:31:32,960 --> 00:31:34,480
it has between interfaces

900
00:31:34,480 --> 00:31:36,799
ethernet and serial the internet is

901
00:31:36,799 --> 00:31:38,559
connected either to a faster

902
00:31:38,559 --> 00:31:42,640
or to something basically what simulator

903
00:31:42,640 --> 00:31:45,200
the machine controlled by the attacker

904
00:31:45,200 --> 00:31:47,279
where actually the attacking traffic is

905
00:31:47,279 --> 00:31:49,519
generated

906
00:31:49,519 --> 00:31:52,320
then we have uh yes a serial cable which

907
00:31:52,320 --> 00:31:53,120
is connected

908
00:31:53,120 --> 00:31:56,159
down here this is an arduino that runs

909
00:31:56,159 --> 00:31:59,279
open plc that simulates basically the

910
00:31:59,279 --> 00:32:01,679
plc i described you before

911
00:32:01,679 --> 00:32:03,919
and this plc is connected to a different

912
00:32:03,919 --> 00:32:06,000
sensor for the temperature

913
00:32:06,000 --> 00:32:07,919
for example and it's actually measuring

914
00:32:07,919 --> 00:32:09,039
this 42

915
00:32:09,039 --> 00:32:12,159
degrees celsius and to the alarm so this

916
00:32:12,159 --> 00:32:13,679
basically simulate you know the

917
00:32:13,679 --> 00:32:15,600
production

918
00:32:15,600 --> 00:32:19,199
so now here uh

919
00:32:19,919 --> 00:32:22,080
yeah so this is what happened on the

920
00:32:22,080 --> 00:32:24,480
what happened on the tax side so this is

921
00:32:24,480 --> 00:32:27,840
how a uh legitimate uh

922
00:32:27,840 --> 00:32:31,039
engineer would change with this critical

923
00:32:31,039 --> 00:32:33,840
threshold temperature it will use this

924
00:32:33,840 --> 00:32:36,640
uh right register command because the

925
00:32:36,640 --> 00:32:38,559
threshold temperature

926
00:32:38,559 --> 00:32:42,000
is uh it takes basically a register

927
00:32:42,000 --> 00:32:45,919
right so value 3000 means 300 because it

928
00:32:45,919 --> 00:32:47,279
gets converted in float

929
00:32:47,279 --> 00:32:50,320
it's one one byte of uh

930
00:32:50,320 --> 00:32:52,320
as you can see here it basically uses

931
00:32:52,320 --> 00:32:53,840
this function code six which is

932
00:32:53,840 --> 00:32:55,440
right register you can set it back to

933
00:32:55,440 --> 00:32:58,480
200. so now we show an attacker can

934
00:32:58,480 --> 00:32:59,519
change that

935
00:32:59,519 --> 00:33:01,840
by meaning the right coil so the right

936
00:33:01,840 --> 00:33:03,840
coil is used to flip one bit

937
00:33:03,840 --> 00:33:05,679
only right so it doesn't make sense

938
00:33:05,679 --> 00:33:07,440
because you're basically

939
00:33:07,440 --> 00:33:09,440
setting one bit and thanks to one bit

940
00:33:09,440 --> 00:33:10,720
you're changing

941
00:33:10,720 --> 00:33:13,039
an integer and the problem here is that

942
00:33:13,039 --> 00:33:14,240
you're changing basically

943
00:33:14,240 --> 00:33:17,679
address 22 so when the attacker

944
00:33:17,679 --> 00:33:18,640
generates such

945
00:33:18,640 --> 00:33:21,679
requests this 22 is used as an

946
00:33:21,679 --> 00:33:23,760
index in their mapping table so the

947
00:33:23,760 --> 00:33:26,320
address 22 in the mapping table the data

948
00:33:26,320 --> 00:33:27,200
station

949
00:33:27,200 --> 00:33:30,080
get flipped and at that point that value

950
00:33:30,080 --> 00:33:31,519
converted in integer

951
00:33:31,519 --> 00:33:34,320
is used to set the threshold so you can

952
00:33:34,320 --> 00:33:35,760
see the threshold go up to

953
00:33:35,760 --> 00:33:38,320
1800 which is very high and this might

954
00:33:38,320 --> 00:33:39,519
cause problem because

955
00:33:39,519 --> 00:33:41,440
if a production get too high then there

956
00:33:41,440 --> 00:33:42,559
is no control

957
00:33:42,559 --> 00:33:44,240
then you're going probably to burn you

958
00:33:44,240 --> 00:33:46,399
know something right

959
00:33:46,399 --> 00:33:50,240
but even bad even worse you can

960
00:33:50,240 --> 00:33:53,279
flip as you can see here it's b23 if i

961
00:33:53,279 --> 00:33:55,039
call correctly and you can cause an

962
00:33:55,039 --> 00:33:56,799
integer overflow

963
00:33:56,799 --> 00:33:58,960
and because you're going basically over

964
00:33:58,960 --> 00:34:00,559
a maximum so it's actually an integrated

965
00:34:00,559 --> 00:34:01,600
overflow

966
00:34:01,600 --> 00:34:03,519
you set a critical threshold down to

967
00:34:03,519 --> 00:34:04,960
negative and

968
00:34:04,960 --> 00:34:07,279
and you can see the alarm get trigger

969
00:34:07,279 --> 00:34:08,800
you can see from the plc

970
00:34:08,800 --> 00:34:12,239
uh interface uh hm interface correctly

971
00:34:12,239 --> 00:34:14,399
connected to the plc sorry

972
00:34:14,399 --> 00:34:18,639
and also physically from

973
00:34:18,639 --> 00:34:21,760
from here yep right

974
00:34:21,760 --> 00:34:23,119
here you can see on screen that

975
00:34:23,119 --> 00:34:24,800
basically you know

976
00:34:24,800 --> 00:34:26,480
we are changing we are flipping that bit

977
00:34:26,480 --> 00:34:28,480
we do an overflow

978
00:34:28,480 --> 00:34:30,800
and we bring the temperature down to

979
00:34:30,800 --> 00:34:33,119
negative

980
00:34:33,119 --> 00:34:36,639
yeah okay so let's see

981
00:34:36,639 --> 00:34:38,239
briefly different techniques we have

982
00:34:38,239 --> 00:34:40,079
found to leak the mapping table

983
00:34:40,079 --> 00:34:43,119
in order to make such attacks more uh

984
00:34:43,119 --> 00:34:44,960
targeted because if you have an

985
00:34:44,960 --> 00:34:46,320
understanding of the mapping table

986
00:34:46,320 --> 00:34:48,079
you're not doing a blind attack

987
00:34:48,079 --> 00:34:49,440
but you know you're doing an attack

988
00:34:49,440 --> 00:34:52,079
where you know what you're doing right

989
00:34:52,079 --> 00:34:54,399
you know so uh the first problem we

990
00:34:54,399 --> 00:34:56,079
found is that one device

991
00:34:56,079 --> 00:34:58,079
uh encrypt the admin password used to

992
00:34:58,079 --> 00:34:59,280
configure the device

993
00:34:59,280 --> 00:35:01,839
with the noise that is guessable why

994
00:35:01,839 --> 00:35:03,440
because the noise is always the same

995
00:35:03,440 --> 00:35:05,839
after reboot reconfiguration or update

996
00:35:05,839 --> 00:35:08,880
because it is initialized if you

997
00:35:08,880 --> 00:35:10,000
if you look at the firmware is

998
00:35:10,000 --> 00:35:12,560
initialized without any initialization

999
00:35:12,560 --> 00:35:13,119
vector

1000
00:35:13,119 --> 00:35:15,520
you can see here v11 does not have any

1001
00:35:15,520 --> 00:35:17,680
initialization vector so it's always the

1002
00:35:17,680 --> 00:35:18,320
same

1003
00:35:18,320 --> 00:35:20,720
so you can use such nonce reuse it and

1004
00:35:20,720 --> 00:35:22,480
authenticate it basically authenticate

1005
00:35:22,480 --> 00:35:23,920
yourself to the device and have full

1006
00:35:23,920 --> 00:35:25,359
access to the device not only to the

1007
00:35:25,359 --> 00:35:27,200
mapping table

1008
00:35:27,200 --> 00:35:29,200
so first is the fact that the

1009
00:35:29,200 --> 00:35:30,880
configuration in our device the

1010
00:35:30,880 --> 00:35:32,960
configuration that is damp

1011
00:35:32,960 --> 00:35:35,359
is by the device that you can dump the

1012
00:35:35,359 --> 00:35:36,000
device

1013
00:35:36,000 --> 00:35:39,359
is uh decryptable why is decryptable

1014
00:35:39,359 --> 00:35:41,280
because you can basically hear python

1015
00:35:41,280 --> 00:35:42,800
you can extract

1016
00:35:42,800 --> 00:35:46,000
the configuration uh from the traffic

1017
00:35:46,000 --> 00:35:48,640
then you can see that the aes key that

1018
00:35:48,640 --> 00:35:49,599
is used

1019
00:35:49,599 --> 00:35:52,480
is embedded as part of the configuration

1020
00:35:52,480 --> 00:35:54,000
you know it's super lame

1021
00:35:54,000 --> 00:35:56,240
uh so we figure out that they don't use

1022
00:35:56,240 --> 00:35:58,320
a standard aes

1023
00:35:58,320 --> 00:36:00,560
but what we managed to do was to

1024
00:36:00,560 --> 00:36:01,920
basically reuse

1025
00:36:01,920 --> 00:36:05,200
the library from the firmware

1026
00:36:05,200 --> 00:36:07,200
and we basically use such library we

1027
00:36:07,200 --> 00:36:09,280
emulate the library with qmo

1028
00:36:09,280 --> 00:36:11,599
and we passed basically when we did when

1029
00:36:11,599 --> 00:36:13,200
we do vertically decryption

1030
00:36:13,200 --> 00:36:16,720
the is key which is included in the

1031
00:36:16,720 --> 00:36:18,640
in in the packet that we dump from the

1032
00:36:18,640 --> 00:36:20,480
network so you can basically decrypt all

1033
00:36:20,480 --> 00:36:23,040
the configurations that come as a sqlite

1034
00:36:23,040 --> 00:36:26,240
and then you can dump the mapping table

1035
00:36:26,240 --> 00:36:27,920
i want to mention that in the recent

1036
00:36:27,920 --> 00:36:30,000
version of moxa the firmware is

1037
00:36:30,000 --> 00:36:32,240
encrypted but the guy did the mistakes

1038
00:36:32,240 --> 00:36:35,359
because when they introduced the

1039
00:36:35,359 --> 00:36:37,760
encryption mechanism in the firmware

1040
00:36:37,760 --> 00:36:39,200
they basically

1041
00:36:39,200 --> 00:36:40,960
included the key as well so if you look

1042
00:36:40,960 --> 00:36:42,800
at the post here you can see how you can

1043
00:36:42,800 --> 00:36:44,400
decrypt basically

1044
00:36:44,400 --> 00:36:47,280
uh modern recent firmware of mocks up

1045
00:36:47,280 --> 00:36:48,640
and after you decrypt with firmware you

1046
00:36:48,640 --> 00:36:49,760
can extract of course

1047
00:36:49,760 --> 00:36:51,359
all the libraries to the crypto

1048
00:36:51,359 --> 00:36:53,599
configuration

1049
00:36:53,599 --> 00:36:55,119
but in other case we found the

1050
00:36:55,119 --> 00:36:57,520
privileged escalation uh so you can log

1051
00:36:57,520 --> 00:36:58,800
into the web interface

1052
00:36:58,800 --> 00:37:00,560
where you can and you go in the debug

1053
00:37:00,560 --> 00:37:02,240
session where you can ping

1054
00:37:02,240 --> 00:37:05,359
uh you know devices and here there is

1055
00:37:05,359 --> 00:37:07,839
basically common injection vulnerability

1056
00:37:07,839 --> 00:37:08,240
and

1057
00:37:08,240 --> 00:37:10,400
in which you can run a tailored

1058
00:37:10,400 --> 00:37:11,760
intellect demo basically

1059
00:37:11,760 --> 00:37:14,800
and you know this ping frame runner's

1060
00:37:14,800 --> 00:37:15,760
root so i mean

1061
00:37:15,760 --> 00:37:17,760
i don't know why but you know at that

1062
00:37:17,760 --> 00:37:19,200
point you know tail let's run it through

1063
00:37:19,200 --> 00:37:21,760
it and you can basically connect in

1064
00:37:21,760 --> 00:37:23,359
to the device and you're basically root

1065
00:37:23,359 --> 00:37:25,440
so you can go from uh in a privileged

1066
00:37:25,440 --> 00:37:26,079
user called

1067
00:37:26,079 --> 00:37:28,880
read-only to an admin to that point you

1068
00:37:28,880 --> 00:37:30,640
can do whatever you want

1069
00:37:30,640 --> 00:37:32,640
so in another device we found a memory

1070
00:37:32,640 --> 00:37:33,839
leakage

1071
00:37:33,839 --> 00:37:35,839
that allows us to dump a part of the

1072
00:37:35,839 --> 00:37:37,680
mapping table we are still investigating

1073
00:37:37,680 --> 00:37:38,720
this problem

1074
00:37:38,720 --> 00:37:40,640
so what happened is that you can send

1075
00:37:40,640 --> 00:37:41,760
basically uh

1076
00:37:41,760 --> 00:37:43,920
you can see here this is the tag payload

1077
00:37:43,920 --> 00:37:45,200
so you can send

1078
00:37:45,200 --> 00:37:47,599
a request where you're going to ask to

1079
00:37:47,599 --> 00:37:49,440
read for registered

1080
00:37:49,440 --> 00:37:52,000
starting from address zero what the

1081
00:37:52,000 --> 00:37:54,480
device does here he leak

1082
00:37:54,480 --> 00:37:56,000
as you can see a part of the mapping

1083
00:37:56,000 --> 00:37:58,839
table called the register

1084
00:37:58,839 --> 00:38:02,240
455.63 in such a way that basically a

1085
00:38:02,240 --> 00:38:04,240
damper mapping table to the slave

1086
00:38:04,240 --> 00:38:07,520
and then you read back such such values

1087
00:38:07,520 --> 00:38:09,280
at that point using attacker you query

1088
00:38:09,280 --> 00:38:10,560
again the uh

1089
00:38:10,560 --> 00:38:12,480
the gateway and you dump the mapping

1090
00:38:12,480 --> 00:38:13,920
table

1091
00:38:13,920 --> 00:38:16,400
and the address in which of this memory

1092
00:38:16,400 --> 00:38:17,599
of the memory

1093
00:38:17,599 --> 00:38:20,560
it's a guessable is predictable so you

1094
00:38:20,560 --> 00:38:22,880
can control which portion of the of the

1095
00:38:22,880 --> 00:38:25,119
other space you're going basically

1096
00:38:25,119 --> 00:38:26,800
to uh to map at the point you can

1097
00:38:26,800 --> 00:38:28,800
basically identify the mapping table and

1098
00:38:28,800 --> 00:38:30,720
extract it

1099
00:38:30,720 --> 00:38:32,000
of course we found a bunch of our

1100
00:38:32,000 --> 00:38:34,160
problem i don't have time today uh

1101
00:38:34,160 --> 00:38:36,160
but basically a problem with the cloud

1102
00:38:36,160 --> 00:38:37,839
uh so the lack of encryption

1103
00:38:37,839 --> 00:38:39,680
lack of sanitization broken

1104
00:38:39,680 --> 00:38:41,680
authentication and so on and so forth

1105
00:38:41,680 --> 00:38:43,839
uh the fact that you can change the

1106
00:38:43,839 --> 00:38:46,079
address of these devices by a single

1107
00:38:46,079 --> 00:38:49,119
magic packet bring the device physically

1108
00:38:49,119 --> 00:38:51,920
offline or actually another ip there are

1109
00:38:51,920 --> 00:38:52,560
problems with

1110
00:38:52,560 --> 00:38:54,560
rv device implement different

1111
00:38:54,560 --> 00:38:57,119
specifications in translation

1112
00:38:57,119 --> 00:38:59,200
so they don't actually fall necessarily

1113
00:38:59,200 --> 00:39:01,200
the specification modbus

1114
00:39:01,200 --> 00:39:03,200
at that point this might cause problem

1115
00:39:03,200 --> 00:39:05,200
when you integrate the device devices of

1116
00:39:05,200 --> 00:39:07,440
different vendors

1117
00:39:07,440 --> 00:39:09,920
and so on and so forth so i would say

1118
00:39:09,920 --> 00:39:10,640
you have to

1119
00:39:10,640 --> 00:39:13,119
uh as a field engineer you have to

1120
00:39:13,119 --> 00:39:15,040
consider security as an important aspect

1121
00:39:15,040 --> 00:39:17,280
in product selection so

1122
00:39:17,280 --> 00:39:19,920
recent devices have certain degree of

1123
00:39:19,920 --> 00:39:21,040
security

1124
00:39:21,040 --> 00:39:23,920
while other may not so uh try to focus

1125
00:39:23,920 --> 00:39:25,920
on those devices that have some security

1126
00:39:25,920 --> 00:39:26,800
capabilities

1127
00:39:26,800 --> 00:39:30,000
in place do not rely on a single point

1128
00:39:30,000 --> 00:39:32,240
of error so don't say okay either scs

1129
00:39:32,240 --> 00:39:34,160
file i'm done because we have seen how

1130
00:39:34,160 --> 00:39:36,320
we can basically bypass access firewall

1131
00:39:36,320 --> 00:39:38,400
by converting legitimate packets into

1132
00:39:38,400 --> 00:39:39,280
malicious

1133
00:39:39,280 --> 00:39:40,960
so you might want to include as well

1134
00:39:40,960 --> 00:39:43,119
other techniques of monitoring

1135
00:39:43,119 --> 00:39:47,200
your uh your uh your network and uh

1136
00:39:47,200 --> 00:39:49,200
also consider these devices in important

1137
00:39:49,200 --> 00:39:51,200
assets even if you're small embedded we

1138
00:39:51,200 --> 00:39:53,599
might create big problems

1139
00:39:53,599 --> 00:39:55,599
so thanks to this resource we released

1140
00:39:55,599 --> 00:39:57,839
different uh vulnerabilities

1141
00:39:57,839 --> 00:39:59,920
now we are at the number of 10 that we

1142
00:39:59,920 --> 00:40:02,240
disclosure disclosed via zi

1143
00:40:02,240 --> 00:40:04,960
uh some have been closed uh they are

1144
00:40:04,960 --> 00:40:06,480
actually zero days they are not going to

1145
00:40:06,480 --> 00:40:07,200
be patched

1146
00:40:07,200 --> 00:40:08,560
some have already been patched some

1147
00:40:08,560 --> 00:40:10,319
other are going to be patched some are

1148
00:40:10,319 --> 00:40:11,040
still open

1149
00:40:11,040 --> 00:40:12,640
so there is a bit of everything i want

1150
00:40:12,640 --> 00:40:15,359
to thank ics cert for collaborating with

1151
00:40:15,359 --> 00:40:17,119
us on this research

1152
00:40:17,119 --> 00:40:18,960
and i want to thank you as well for

1153
00:40:18,960 --> 00:40:21,760
attending my presentation

1154
00:40:21,760 --> 00:40:25,359
so i took up 40 minutes exactly and

1155
00:40:25,359 --> 00:40:26,640
thanks as well you can follow me on

1156
00:40:26,640 --> 00:40:29,200
twitter uh if you have question i'm open

1157
00:40:29,200 --> 00:40:31,200
to take questions here or even offline

1158
00:40:31,200 --> 00:40:32,319
on twitter

1159
00:40:32,319 --> 00:40:35,839
uh this is a qr code pointing to a link

1160
00:40:35,839 --> 00:40:37,920
including the paper so you can also

1161
00:40:37,920 --> 00:40:39,280
download the paper and

1162
00:40:39,280 --> 00:40:42,400
give it a ring so thanks a lot i

1163
00:40:42,400 --> 00:40:45,440
i'm done with my talk i'm open to

1164
00:40:45,440 --> 00:40:53,200
two questions thank you

1165
00:40:53,200 --> 00:40:55,279
you

