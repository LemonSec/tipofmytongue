1
00:00:10,960 --> 00:00:11,360
so

2
00:00:11,360 --> 00:00:13,360
hello everybody i hope you can hear me

3
00:00:13,360 --> 00:00:14,559
loud and clear

4
00:00:14,559 --> 00:00:16,480
thanks to first thing first i would like

5
00:00:16,480 --> 00:00:18,720
to thank the confidence committee for

6
00:00:18,720 --> 00:00:19,680
choosing my talk

7
00:00:19,680 --> 00:00:21,439
and of course for still having this

8
00:00:21,439 --> 00:00:23,519
virtual conference

9
00:00:23,519 --> 00:00:26,880
um so my name is omar tsofati and i am a

10
00:00:26,880 --> 00:00:29,119
security researcher at cyberarklabs

11
00:00:29,119 --> 00:00:31,519
and my recent researchers were focused

12
00:00:31,519 --> 00:00:32,640
on cloud security

13
00:00:32,640 --> 00:00:35,120
and on the authentication mechanism and

14
00:00:35,120 --> 00:00:37,440
i've been chosen also to be one of

15
00:00:37,440 --> 00:00:39,600
the msrc most valuable security

16
00:00:39,600 --> 00:00:40,960
researchers for years

17
00:00:40,960 --> 00:00:44,000
2019 and 2020.

18
00:00:44,000 --> 00:00:46,320
right uh let's begin with our

19
00:00:46,320 --> 00:00:47,200
presentation

20
00:00:47,200 --> 00:00:49,840
and today i will show you two critical

21
00:00:49,840 --> 00:00:50,640
vulnerabilities

22
00:00:50,640 --> 00:00:52,800
that i found in microsoft online

23
00:00:52,800 --> 00:00:54,000
services

24
00:00:54,000 --> 00:00:55,840
those vulnerabilities affected millions

25
00:00:55,840 --> 00:00:57,199
of users and

26
00:00:57,199 --> 00:00:59,920
potentially could lead to mass account

27
00:00:59,920 --> 00:01:00,640
takeover

28
00:01:00,640 --> 00:01:04,080
if the bad guys found them before we did

29
00:01:04,080 --> 00:01:06,320
i'll briefly speak about azure and its

30
00:01:06,320 --> 00:01:07,119
features

31
00:01:07,119 --> 00:01:10,240
and general including uh in general

32
00:01:10,240 --> 00:01:11,600
including its integration with

33
00:01:11,600 --> 00:01:12,320
on-premises

34
00:01:12,320 --> 00:01:14,560
environment as known and as hybrid

35
00:01:14,560 --> 00:01:15,680
environment

36
00:01:15,680 --> 00:01:18,240
then we will cover uh the first

37
00:01:18,240 --> 00:01:19,840
vulnerability for today the manifest

38
00:01:19,840 --> 00:01:20,799
vulnerability

39
00:01:20,799 --> 00:01:22,640
everyone vulnerability relates to

40
00:01:22,640 --> 00:01:24,400
misconfiguration that was in

41
00:01:24,400 --> 00:01:26,799
azure portal extension manifest that

42
00:01:26,799 --> 00:01:28,000
eventually could

43
00:01:28,000 --> 00:01:30,479
let a malicious attacker to take over

44
00:01:30,479 --> 00:01:32,159
victim's account

45
00:01:32,159 --> 00:01:34,400
and right after it we will understand

46
00:01:34,400 --> 00:01:36,560
the fundamentals of the

47
00:01:36,560 --> 00:01:39,360
authentication protocol off and of

48
00:01:39,360 --> 00:01:41,280
course when you're talking about off

49
00:01:41,280 --> 00:01:43,759
you must also speak about the openid

50
00:01:43,759 --> 00:01:45,040
connect or

51
00:01:45,040 --> 00:01:47,759
adc in short and moreover we'll talk

52
00:01:47,759 --> 00:01:48,240
about

53
00:01:48,240 --> 00:01:50,159
an off configuration related

54
00:01:50,159 --> 00:01:52,159
vulnerability in the second part

55
00:01:52,159 --> 00:01:54,960
and it's a vulnerability that we found

56
00:01:54,960 --> 00:01:56,240
in a microsoft

57
00:01:56,240 --> 00:01:59,520
that affected all microsoft 365 users

58
00:01:59,520 --> 00:02:01,840
including all the users created in azure

59
00:02:01,840 --> 00:02:03,280
active directory

60
00:02:03,280 --> 00:02:05,439
even if you didn't have a 365

61
00:02:05,439 --> 00:02:07,040
subscription

62
00:02:07,040 --> 00:02:10,479
and um and we will see our simple link

63
00:02:10,479 --> 00:02:11,599
of monitoring

64
00:02:11,599 --> 00:02:13,520
brought up to like a dangerous account

65
00:02:13,520 --> 00:02:15,200
takeover vulnerability

66
00:02:15,200 --> 00:02:17,680
and at the very end we'll talk about how

67
00:02:17,680 --> 00:02:19,599
you can mitigate those vulnerabilities

68
00:02:19,599 --> 00:02:21,760
and right after it will have some time

69
00:02:21,760 --> 00:02:24,239
for q a

70
00:02:24,239 --> 00:02:27,760
all right so microsoft azure microsoft

71
00:02:27,760 --> 00:02:29,920
azure is one of the rising stars of the

72
00:02:29,920 --> 00:02:33,040
cloud computing services providers of

73
00:02:33,040 --> 00:02:33,680
this time

74
00:02:33,680 --> 00:02:36,080
and also a tech leader in this area

75
00:02:36,080 --> 00:02:37,760
considering the four year gaps

76
00:02:37,760 --> 00:02:40,720
microsoft as compared to aws which

77
00:02:40,720 --> 00:02:41,200
launched

78
00:02:41,200 --> 00:02:44,800
launch in 2006 and the azure which

79
00:02:44,800 --> 00:02:47,360
launched in 2010 it is impressive to see

80
00:02:47,360 --> 00:02:49,519
how azure closed the gap

81
00:02:49,519 --> 00:02:51,760
azure today offers more than 600

82
00:02:51,760 --> 00:02:52,720
services

83
00:02:52,720 --> 00:02:55,440
and it actually increases daily

84
00:02:55,440 --> 00:02:56,560
irregularly

85
00:02:56,560 --> 00:02:58,640
one of the primary key advantages azure

86
00:02:58,640 --> 00:03:00,720
has compared to its main competitors

87
00:03:00,720 --> 00:03:02,640
it's the excellent integration with

88
00:03:02,640 --> 00:03:03,760
on-premises

89
00:03:03,760 --> 00:03:08,000
active directory and as you know guys

90
00:03:08,000 --> 00:03:11,040
um every good platform need a good

91
00:03:11,040 --> 00:03:13,519
controlling panel this is the azure

92
00:03:13,519 --> 00:03:14,159
portal

93
00:03:14,159 --> 00:03:16,400
which is an all-in-one controlling panel

94
00:03:16,400 --> 00:03:18,159
that microsoft offers

95
00:03:18,159 --> 00:03:20,239
in order to manage your cloud assets in

96
00:03:20,239 --> 00:03:21,200
azure

97
00:03:21,200 --> 00:03:24,159
and in one of my researchers i happened

98
00:03:24,159 --> 00:03:25,040
to look at some

99
00:03:25,040 --> 00:03:28,480
azure features and while looking at the

100
00:03:28,480 --> 00:03:31,040
at outcome traffic i identified some

101
00:03:31,040 --> 00:03:32,080
bizarre

102
00:03:32,080 --> 00:03:35,519
requests i saw those requests telemetry

103
00:03:35,519 --> 00:03:36,000
ones

104
00:03:36,000 --> 00:03:38,319
and were sent to strange aust a local

105
00:03:38,319 --> 00:03:39,120
loss called

106
00:03:39,120 --> 00:03:43,920
ura abs which is what's really odd

107
00:03:43,920 --> 00:03:46,239
so those are the requests at first

108
00:03:46,239 --> 00:03:48,720
glance i thought that was just a bag

109
00:03:48,720 --> 00:03:50,879
something that i did to my browser just

110
00:03:50,879 --> 00:03:52,319
a random black magic

111
00:03:52,319 --> 00:03:54,480
that happened to visit me from time to

112
00:03:54,480 --> 00:03:55,360
time

113
00:03:55,360 --> 00:03:58,159
so i refresh the page and close and open

114
00:03:58,159 --> 00:04:00,000
my browser restart my computer

115
00:04:00,000 --> 00:04:02,400
and i even went to another computer and

116
00:04:02,400 --> 00:04:04,560
i still saw those strange requests

117
00:04:04,560 --> 00:04:07,599
to the local server and i also changed

118
00:04:07,599 --> 00:04:09,519
an account to another account and

119
00:04:09,519 --> 00:04:12,560
just the same request went out

120
00:04:12,560 --> 00:04:16,160
so let's see the world quest so

121
00:04:16,160 --> 00:04:18,320
let's let's take a look on this request

122
00:04:18,320 --> 00:04:19,199
it's a bit weird

123
00:04:19,199 --> 00:04:21,680
why would azure sandals request it's

124
00:04:21,680 --> 00:04:23,120
weird doesn't it

125
00:04:23,120 --> 00:04:25,840
and um and if you will take a closer

126
00:04:25,840 --> 00:04:27,680
look we can see the art is

127
00:04:27,680 --> 00:04:30,639
your rehabs and so i search for the

128
00:04:30,639 --> 00:04:32,479
string hurry up in the capture traffic

129
00:04:32,479 --> 00:04:34,960
to see what what triggered this

130
00:04:34,960 --> 00:04:37,520
but i couldn't find any results beside a

131
00:04:37,520 --> 00:04:38,400
few files

132
00:04:38,400 --> 00:04:41,360
that um that the yori absa string was in

133
00:04:41,360 --> 00:04:42,080
it

134
00:04:42,080 --> 00:04:44,400
and there one of those of those files

135
00:04:44,400 --> 00:04:46,160
was the configuration file

136
00:04:46,160 --> 00:04:49,280
which is the extension manifest file uh

137
00:04:49,280 --> 00:04:50,960
extend the configuration files is

138
00:04:50,960 --> 00:04:54,000
located at portal azure.com

139
00:04:54,000 --> 00:04:56,400
content slash extension manifest slash

140
00:04:56,400 --> 00:04:59,280
the cone version dojs

141
00:04:59,280 --> 00:05:01,120
so you may ask yourself what is

142
00:05:01,120 --> 00:05:03,280
extension manifest

143
00:05:03,280 --> 00:05:05,680
so every extension in azure located in a

144
00:05:05,680 --> 00:05:06,479
json

145
00:05:06,479 --> 00:05:08,560
manifest file that defines basic

146
00:05:08,560 --> 00:05:11,360
information about extension

147
00:05:11,360 --> 00:05:14,240
we can see in this picture uh the app

148
00:05:14,240 --> 00:05:15,120
extension

149
00:05:15,120 --> 00:05:17,600
as a your uri attribute that contains

150
00:05:17,600 --> 00:05:18,960
the azure apps

151
00:05:18,960 --> 00:05:21,600
have string if we take a look on the

152
00:05:21,600 --> 00:05:23,039
other extensions

153
00:05:23,039 --> 00:05:26,400
we can see clearly that those as your

154
00:05:26,400 --> 00:05:29,280
attribute and their uri attribute is not

155
00:05:29,280 --> 00:05:31,280
like the one we have

156
00:05:31,280 --> 00:05:34,400
well that's interesting doesn't it

157
00:05:34,400 --> 00:05:36,800
so we know it is something that is

158
00:05:36,800 --> 00:05:39,039
connected to the extension manifest

159
00:05:39,039 --> 00:05:41,039
and another thing to say about extension

160
00:05:41,039 --> 00:05:42,400
manifest is that

161
00:05:42,400 --> 00:05:45,840
um every if not all the pages we see in

162
00:05:45,840 --> 00:05:46,560
azure

163
00:05:46,560 --> 00:05:49,840
is actually an extension that we browse

164
00:05:49,840 --> 00:05:50,880
to

165
00:05:50,880 --> 00:05:53,120
so that's a great starting point to

166
00:05:53,120 --> 00:05:54,080
understand

167
00:05:54,080 --> 00:05:56,960
the issue itself so in order to

168
00:05:56,960 --> 00:05:57,919
understand better

169
00:05:57,919 --> 00:06:00,800
uh what triggered this a request to go

170
00:06:00,800 --> 00:06:01,520
out

171
00:06:01,520 --> 00:06:05,280
uh we set a xhr fetch breakpoint

172
00:06:05,280 --> 00:06:08,319
in chrome developer tools and so the

173
00:06:08,319 --> 00:06:10,240
breakpoint will break on every request

174
00:06:10,240 --> 00:06:12,560
that contains the url string

175
00:06:12,560 --> 00:06:15,520
in it so very shortly after the break on

176
00:06:15,520 --> 00:06:16,560
the breakpoint

177
00:06:16,560 --> 00:06:18,720
set it triggered and then we could

178
00:06:18,720 --> 00:06:19,600
analyze the

179
00:06:19,600 --> 00:06:22,800
uh the function that triggers that

180
00:06:22,800 --> 00:06:26,000
and which one is passing the your uri

181
00:06:26,000 --> 00:06:29,360
attribute of the extension

182
00:06:29,360 --> 00:06:32,720
um so we found out uh this is the one

183
00:06:32,720 --> 00:06:36,080
uh each it's an obvious catenae

184
00:06:36,080 --> 00:06:39,680
a function named tt at first glance uh

185
00:06:39,680 --> 00:06:41,120
can you see what could

186
00:06:41,120 --> 00:06:43,840
be problem in this function that uh

187
00:06:43,840 --> 00:06:45,199
possible problem

188
00:06:45,199 --> 00:06:48,479
uh well it is a bit odd at least for me

189
00:06:48,479 --> 00:06:50,800
uh so let's let's see what happens when

190
00:06:50,800 --> 00:06:51,840
the function actually

191
00:06:51,840 --> 00:06:55,280
called the with the relevant parameter

192
00:06:55,280 --> 00:06:57,919
so it looks like that uh and now it

193
00:06:57,919 --> 00:06:59,759
actually looks better i think

194
00:06:59,759 --> 00:07:02,160
uh so we can we can see the result

195
00:07:02,160 --> 00:07:03,199
function returns

196
00:07:03,199 --> 00:07:06,800
an object um which is which include

197
00:07:06,800 --> 00:07:09,840
origin protocol and a drive and we could

198
00:07:09,840 --> 00:07:12,240
we could also uh see that the origin is

199
00:07:12,240 --> 00:07:13,680
malformed and also

200
00:07:13,680 --> 00:07:16,720
uh it's just the same as that we saw in

201
00:07:16,720 --> 00:07:18,800
the strange request before

202
00:07:18,800 --> 00:07:21,360
well that's interesting so i really ate

203
00:07:21,360 --> 00:07:22,639
obfuscated functions

204
00:07:22,639 --> 00:07:24,880
and uh to make things a bit clearer for

205
00:07:24,880 --> 00:07:26,160
me i wrote

206
00:07:26,160 --> 00:07:28,800
i rewrote this obscrite function so we

207
00:07:28,800 --> 00:07:30,240
could understand it better

208
00:07:30,240 --> 00:07:32,880
so this is the the one that i wrote that

209
00:07:32,880 --> 00:07:34,720
does just the same logic

210
00:07:34,720 --> 00:07:37,520
so the function get uri object uh

211
00:07:37,520 --> 00:07:38,720
receives the string

212
00:07:38,720 --> 00:07:41,039
which is the uri that needs to be parsed

213
00:07:41,039 --> 00:07:42,639
the function looks uh

214
00:07:42,639 --> 00:07:45,199
for the location of the first a double

215
00:07:45,199 --> 00:07:46,160
slash

216
00:07:46,160 --> 00:07:48,240
and if it finds it it's at the flag

217
00:07:48,240 --> 00:07:49,840
variable called easy uri

218
00:07:49,840 --> 00:07:52,720
contains four slashes so in short it

219
00:07:52,720 --> 00:07:54,080
looks for the

220
00:07:54,080 --> 00:07:56,160
double fault slashes in the ui parameter

221
00:07:56,160 --> 00:07:58,400
that pass to the function then if the

222
00:07:58,400 --> 00:08:00,479
uri string contains those

223
00:08:00,479 --> 00:08:03,120
fault slashes the function will takes

224
00:08:03,120 --> 00:08:03,919
everything

225
00:08:03,919 --> 00:08:06,639
that is before that and consider it is

226
00:08:06,639 --> 00:08:07,680
the protocol

227
00:08:07,680 --> 00:08:09,280
the protocol that needs to be used when

228
00:08:09,280 --> 00:08:10,800
sending a request out

229
00:08:10,800 --> 00:08:14,000
using this uri if the ui doesn't

230
00:08:14,000 --> 00:08:16,080
a string doesn't contain the two slashes

231
00:08:16,080 --> 00:08:18,240
the skip takes the current page protocol

232
00:08:18,240 --> 00:08:20,560
and set the value

233
00:08:20,560 --> 00:08:23,759
and set it as the protocol value

234
00:08:23,759 --> 00:08:25,120
right after it it search for the

235
00:08:25,120 --> 00:08:28,080
location of the single slash

236
00:08:28,080 --> 00:08:31,120
index after this two slashes

237
00:08:31,120 --> 00:08:33,519
then if there is no single slash it will

238
00:08:33,519 --> 00:08:35,440
search for the question mark

239
00:08:35,440 --> 00:08:37,039
which in our case there is a single

240
00:08:37,039 --> 00:08:38,719
slash so we want to search for the

241
00:08:38,719 --> 00:08:40,240
question mark

242
00:08:40,240 --> 00:08:43,679
and um and right after it it tries to

243
00:08:43,679 --> 00:08:45,519
extract the origin that

244
00:08:45,519 --> 00:08:48,080
it should be sent to or the domain name

245
00:08:48,080 --> 00:08:50,080
and so as you can see it tries to get

246
00:08:50,080 --> 00:08:52,240
the

247
00:08:52,560 --> 00:08:55,600
it will go to two characters

248
00:08:55,600 --> 00:08:58,320
after the fourth slash location uh index

249
00:08:58,320 --> 00:08:59,440
in our case

250
00:08:59,440 --> 00:09:02,160
the index is zeroed by the function

251
00:09:02,160 --> 00:09:03,760
because it couldn't find the two fourth

252
00:09:03,760 --> 00:09:06,080
slashes in the uri parameter

253
00:09:06,080 --> 00:09:08,000
so it will take everything from the

254
00:09:08,000 --> 00:09:09,440
index to

255
00:09:09,440 --> 00:09:12,560
until the index nine

256
00:09:12,560 --> 00:09:15,040
which is the one that before the slash

257
00:09:15,040 --> 00:09:15,839
and the

258
00:09:15,839 --> 00:09:18,560
the one the single fault slash and then

259
00:09:18,560 --> 00:09:19,920
the function wraps up

260
00:09:19,920 --> 00:09:23,120
everything into an object and returns it

261
00:09:23,120 --> 00:09:26,480
and that's about what we got eventually

262
00:09:26,480 --> 00:09:29,839
uh so now we understand the bad passing

263
00:09:29,839 --> 00:09:30,480
part and

264
00:09:30,480 --> 00:09:34,000
what really went wrong there so instead

265
00:09:34,000 --> 00:09:35,360
of parsing a uri

266
00:09:35,360 --> 00:09:37,440
as a relative path as it should in this

267
00:09:37,440 --> 00:09:40,480
case it passes it as a regular uri

268
00:09:40,480 --> 00:09:43,600
or url all right so

269
00:09:43,600 --> 00:09:46,000
with that understanding in mind let's

270
00:09:46,000 --> 00:09:46,640
figure out

271
00:09:46,640 --> 00:09:50,399
a way what can go wrong with those

272
00:09:50,399 --> 00:09:52,880
with those requests and what is going on

273
00:09:52,880 --> 00:09:53,600
there

274
00:09:53,600 --> 00:09:58,000
so we can see this is an option request

275
00:09:58,000 --> 00:10:00,000
and option requests are made in order to

276
00:10:00,000 --> 00:10:02,399
verify a destination is ready to

277
00:10:02,399 --> 00:10:04,240
talk with us and accept the request

278
00:10:04,240 --> 00:10:05,600
method we would like

279
00:10:05,600 --> 00:10:08,720
to use in case everything's okay and the

280
00:10:08,720 --> 00:10:11,120
browser will then send a real request

281
00:10:11,120 --> 00:10:14,320
that that they intended to send

282
00:10:14,320 --> 00:10:17,120
at the first place so the request in our

283
00:10:17,120 --> 00:10:17,519
case

284
00:10:17,519 --> 00:10:20,079
looks like this and it contains a very

285
00:10:20,079 --> 00:10:21,360
interesting header

286
00:10:21,360 --> 00:10:22,880
which is the authorization editor of

287
00:10:22,880 --> 00:10:25,440
course and authorization header contains

288
00:10:25,440 --> 00:10:27,760
a valid access token to azure resource

289
00:10:27,760 --> 00:10:28,560
manager

290
00:10:28,560 --> 00:10:31,600
api and which you can

291
00:10:31,600 --> 00:10:34,000
actually use to control almost uh all

292
00:10:34,000 --> 00:10:35,600
the resources in azure

293
00:10:35,600 --> 00:10:37,360
of course according to the user's

294
00:10:37,360 --> 00:10:38,959
permission

295
00:10:38,959 --> 00:10:41,519
so that's interesting if i was in tucker

296
00:10:41,519 --> 00:10:43,200
i would like to put my hands on

297
00:10:43,200 --> 00:10:46,079
this token of course so if we will

298
00:10:46,079 --> 00:10:47,760
consider the attack scenario it will

299
00:10:47,760 --> 00:10:48,800
look like this

300
00:10:48,800 --> 00:10:52,160
and so um the user is browsing into the

301
00:10:52,160 --> 00:10:53,360
azure portal

302
00:10:53,360 --> 00:10:55,519
and debugging the portal sends the token

303
00:10:55,519 --> 00:10:57,920
to the ura abs asked

304
00:10:57,920 --> 00:11:00,320
which the attacker owes in some way and

305
00:11:00,320 --> 00:11:02,240
we'll talk about it in a second how it

306
00:11:02,240 --> 00:11:03,360
can be happen

307
00:11:03,360 --> 00:11:05,440
and then the token is sent to the

308
00:11:05,440 --> 00:11:06,800
attacker now

309
00:11:06,800 --> 00:11:08,640
after the attacker has access to the

310
00:11:08,640 --> 00:11:11,040
token it can impersonate the victim

311
00:11:11,040 --> 00:11:14,079
and take action on his behalf so

312
00:11:14,079 --> 00:11:16,720
in theory that sounds good but can it

313
00:11:16,720 --> 00:11:17,760
really

314
00:11:17,760 --> 00:11:20,640
be exploited in real life that's a good

315
00:11:20,640 --> 00:11:21,200
question

316
00:11:21,200 --> 00:11:24,560
um so yes indeed it can be exploited

317
00:11:24,560 --> 00:11:26,399
this attack scenario is real and can be

318
00:11:26,399 --> 00:11:28,160
exploited in both local environment

319
00:11:28,160 --> 00:11:31,600
and irregular environment all right

320
00:11:31,600 --> 00:11:35,360
so the first attack vector is the local

321
00:11:35,360 --> 00:11:36,959
environment scenario

322
00:11:36,959 --> 00:11:39,360
which in it that packets spin up and

323
00:11:39,360 --> 00:11:40,880
asked in the network

324
00:11:40,880 --> 00:11:42,720
in the local network and calls it your

325
00:11:42,720 --> 00:11:45,279
rehabs then it gets a signed certificate

326
00:11:45,279 --> 00:11:45,600
by

327
00:11:45,600 --> 00:11:48,640
by a root ca or by a local domain root

328
00:11:48,640 --> 00:11:50,079
ca

329
00:11:50,079 --> 00:11:53,120
and after setting this all up whenever a

330
00:11:53,120 --> 00:11:53,680
user

331
00:11:53,680 --> 00:11:55,839
will browse to the azure portal will be

332
00:11:55,839 --> 00:11:57,120
affected by the bag

333
00:11:57,120 --> 00:12:00,480
and send is talking to the attacker

334
00:12:00,480 --> 00:12:03,600
um but this this

335
00:12:03,600 --> 00:12:06,000
this local environment attack well it's

336
00:12:06,000 --> 00:12:07,839
not that interesting

337
00:12:07,839 --> 00:12:09,120
we thought it would be much more

338
00:12:09,120 --> 00:12:11,519
interesting if this attack could affect

339
00:12:11,519 --> 00:12:13,760
every azure user out there in the world

340
00:12:13,760 --> 00:12:15,360
does not it does no matter where it's

341
00:12:15,360 --> 00:12:17,519
located

342
00:12:17,519 --> 00:12:20,639
so it actually can be done and the main

343
00:12:20,639 --> 00:12:22,839
reason for this is a dns service

344
00:12:22,839 --> 00:12:24,880
configuration dns servers

345
00:12:24,880 --> 00:12:27,760
most of the time do their job do their

346
00:12:27,760 --> 00:12:28,639
job well

347
00:12:28,639 --> 00:12:31,279
but some dns servers may actually do it

348
00:12:31,279 --> 00:12:32,160
too well

349
00:12:32,160 --> 00:12:34,240
and let me explain what i mean by that

350
00:12:34,240 --> 00:12:36,480
some dns servers configurations

351
00:12:36,480 --> 00:12:38,880
add the suffix from the commonly known

352
00:12:38,880 --> 00:12:40,079
top-level domain

353
00:12:40,079 --> 00:12:43,920
like com net organ etc and they added to

354
00:12:43,920 --> 00:12:45,360
the localhost names when

355
00:12:45,360 --> 00:12:48,240
when they don't meant to when they can't

356
00:12:48,240 --> 00:12:49,600
manage to find the

357
00:12:49,600 --> 00:12:52,959
uh the recorded them their

358
00:12:52,959 --> 00:12:55,600
their host name in the local record in

359
00:12:55,600 --> 00:12:56,320
this case

360
00:12:56,320 --> 00:12:58,720
the dns server uh when it uh when it's

361
00:12:58,720 --> 00:13:00,240
trying to resolve the array ups

362
00:13:00,240 --> 00:13:01,680
it's also trying to resolve your

363
00:13:01,680 --> 00:13:03,519
reapp.com uriab.net

364
00:13:03,519 --> 00:13:06,639
etc so a potential attacker can

365
00:13:06,639 --> 00:13:09,440
abuse this behavior by buying buying

366
00:13:09,440 --> 00:13:09,839
many

367
00:13:09,839 --> 00:13:12,160
and registering many different urea

368
00:13:12,160 --> 00:13:13,200
domains

369
00:13:13,200 --> 00:13:14,959
with different suffixes and then exploit

370
00:13:14,959 --> 00:13:16,240
them

371
00:13:16,240 --> 00:13:19,360
so yes it won't actually be enough as

372
00:13:19,360 --> 00:13:20,880
the attacker still needs

373
00:13:20,880 --> 00:13:22,959
a valid certificate for the local server

374
00:13:22,959 --> 00:13:24,639
sign up by a public

375
00:13:24,639 --> 00:13:29,040
root ca and as of november 1st 2015 caa

376
00:13:29,040 --> 00:13:29,519
slash

377
00:13:29,519 --> 00:13:32,480
browser forum no longer allows public a

378
00:13:32,480 --> 00:13:34,560
publicly trusted ssl certificates to

379
00:13:34,560 --> 00:13:36,320
include those local names

380
00:13:36,320 --> 00:13:38,560
such as internal server names and

381
00:13:38,560 --> 00:13:40,000
reserved ip addresses

382
00:13:40,000 --> 00:13:42,240
as it could lead to manage the middle

383
00:13:42,240 --> 00:13:43,360
attacks in local

384
00:13:43,360 --> 00:13:46,800
networks but there are still a malicious

385
00:13:46,800 --> 00:13:49,279
root case and some routiers that have

386
00:13:49,279 --> 00:13:50,720
been compromised over the years like

387
00:13:50,720 --> 00:13:52,160
commodore in 2011

388
00:13:52,160 --> 00:13:55,519
and diggy notre in 2013 for example

389
00:13:55,519 --> 00:13:57,920
so it actually still can be happen this

390
00:13:57,920 --> 00:13:59,680
kind of attacks

391
00:13:59,680 --> 00:14:03,839
so um for uh making a poc out of this

392
00:14:03,839 --> 00:14:06,959
uh we bought 27 uh different theory of

393
00:14:06,959 --> 00:14:07,600
the

394
00:14:07,600 --> 00:14:10,399
domains with different suffixes like

395
00:14:10,399 --> 00:14:12,639
uriab.com uriab.net

396
00:14:12,639 --> 00:14:16,240
org and etc and of course it was a as a

397
00:14:16,240 --> 00:14:18,079
responsible and a protective measure of

398
00:14:18,079 --> 00:14:18,560
course

399
00:14:18,560 --> 00:14:21,680
um another important point to make uh

400
00:14:21,680 --> 00:14:24,399
that um security mess uh features are

401
00:14:24,399 --> 00:14:25,040
great

402
00:14:25,040 --> 00:14:27,199
uh browser knows how to validate the

403
00:14:27,199 --> 00:14:29,199
certificate is is okay and everything is

404
00:14:29,199 --> 00:14:30,399
good with that

405
00:14:30,399 --> 00:14:32,800
but some users actually turn this

406
00:14:32,800 --> 00:14:34,480
certificate validation off

407
00:14:34,480 --> 00:14:36,079
in their browser and there are many

408
00:14:36,079 --> 00:14:37,920
reasons for that some of them is because

409
00:14:37,920 --> 00:14:38,320
they

410
00:14:38,320 --> 00:14:41,440
are receiving surfing errors or maybe

411
00:14:41,440 --> 00:14:44,240
because they need to access their input

412
00:14:44,240 --> 00:14:45,040
incorrectly

413
00:14:45,040 --> 00:14:47,680
sign their website from time to time

414
00:14:47,680 --> 00:14:49,040
like your web developers

415
00:14:49,040 --> 00:14:52,480
and uh seriously please don't do that

416
00:14:52,480 --> 00:14:54,240
try to find another solution and when

417
00:14:54,240 --> 00:14:55,839
you do that you expose yourself to to

418
00:14:55,839 --> 00:14:56,320
risk

419
00:14:56,320 --> 00:14:58,880
and that could be really a big problem

420
00:14:58,880 --> 00:15:00,399
and um

421
00:15:00,399 --> 00:15:03,839
we actually made the poc uh which uh

422
00:15:03,839 --> 00:15:06,320
we just we created a self-signed

423
00:15:06,320 --> 00:15:08,399
certificate for our servers

424
00:15:08,399 --> 00:15:11,519
and uh and actually um we we got

425
00:15:11,519 --> 00:15:14,720
we started to get requests and uh

426
00:15:14,720 --> 00:15:18,079
some of the requests and um sent with

427
00:15:18,079 --> 00:15:20,079
the authorization token in it

428
00:15:20,079 --> 00:15:22,320
and uh it was really cool this was

429
00:15:22,320 --> 00:15:23,440
actually um

430
00:15:23,440 --> 00:15:26,399
a token from external organization which

431
00:15:26,399 --> 00:15:27,279
nothing to do with

432
00:15:27,279 --> 00:15:29,600
with us it was really really nice to see

433
00:15:29,600 --> 00:15:30,320
this

434
00:15:30,320 --> 00:15:33,040
and uh by that we actually demonstrated

435
00:15:33,040 --> 00:15:34,560
that this attack is real

436
00:15:34,560 --> 00:15:37,440
and uh you guys should not turn off the

437
00:15:37,440 --> 00:15:38,839
certificate validation

438
00:15:38,839 --> 00:15:41,519
function all right so let's talk a bit

439
00:15:41,519 --> 00:15:42,399
about the fix

440
00:15:42,399 --> 00:15:46,320
um so mike microsoft fixed this issue

441
00:15:46,320 --> 00:15:49,920
on uh september 6th to 2019

442
00:15:49,920 --> 00:15:52,079
and microsoft decided to fix this issue

443
00:15:52,079 --> 00:15:53,440
by adding a simple

444
00:15:53,440 --> 00:15:56,639
a simple simple thing

445
00:15:56,639 --> 00:15:59,279
uh they created a new a tag element then

446
00:15:59,279 --> 00:15:59,680
set

447
00:15:59,680 --> 00:16:02,560
the a draft attribute to the past

448
00:16:02,560 --> 00:16:03,680
parameter

449
00:16:03,680 --> 00:16:05,839
this change this change actually fix the

450
00:16:05,839 --> 00:16:07,519
problem with the help

451
00:16:07,519 --> 00:16:09,839
of the the way that the browser handle

452
00:16:09,839 --> 00:16:11,440
uh relative paths

453
00:16:11,440 --> 00:16:13,759
uh the browser takes the url as a

454
00:16:13,759 --> 00:16:14,959
relative url

455
00:16:14,959 --> 00:16:17,199
of course and therefore the browser adds

456
00:16:17,199 --> 00:16:18,639
the current ost

457
00:16:18,639 --> 00:16:22,320
to it and so it's actually uh

458
00:16:22,320 --> 00:16:24,240
solved this problem because now it's a

459
00:16:24,240 --> 00:16:26,399
valid valid url and not

460
00:16:26,399 --> 00:16:29,680
no no longer just a relative one and not

461
00:16:29,680 --> 00:16:31,839
to say uh microsoft managed to fix this

462
00:16:31,839 --> 00:16:32,480
issue

463
00:16:32,480 --> 00:16:34,560
before we had the chance to report it to

464
00:16:34,560 --> 00:16:36,399
them we found it like

465
00:16:36,399 --> 00:16:38,880
four or five days before microsoft or i

466
00:16:38,880 --> 00:16:41,199
think one week before and microsoft

467
00:16:41,199 --> 00:16:43,440
fixed this this vulnerability and

468
00:16:43,440 --> 00:16:45,210
actually it was really cool to see this

469
00:16:45,210 --> 00:16:46,800
[Music]

470
00:16:46,800 --> 00:16:51,680
right so let's wrap it up

471
00:16:51,680 --> 00:16:53,839
this was the first uh first part of the

472
00:16:53,839 --> 00:16:54,720
session

473
00:16:54,720 --> 00:16:58,240
and so um we had the wheel telemetry

474
00:16:58,240 --> 00:16:58,959
request

475
00:16:58,959 --> 00:17:01,120
to a local server those telemetry

476
00:17:01,120 --> 00:17:02,880
requests contained the user's access

477
00:17:02,880 --> 00:17:04,959
token in the authorization editor

478
00:17:04,959 --> 00:17:07,039
their request eventually ended up in the

479
00:17:07,039 --> 00:17:09,520
attacker's end

480
00:17:09,520 --> 00:17:12,240
and if if the token ended up in that

481
00:17:12,240 --> 00:17:12,880
accent

482
00:17:12,880 --> 00:17:14,319
it will be able to impersonate the

483
00:17:14,319 --> 00:17:16,880
victim and take action on isbiaf

484
00:17:16,880 --> 00:17:19,520
in the azure environment and attacker

485
00:17:19,520 --> 00:17:20,480
could create in

486
00:17:20,480 --> 00:17:23,439
virtual machines deleting data accessing

487
00:17:23,439 --> 00:17:26,000
data and actually do much more than that

488
00:17:26,000 --> 00:17:28,880
and so my main takeaway at least from

489
00:17:28,880 --> 00:17:30,480
this vulnerability finding

490
00:17:30,480 --> 00:17:32,720
is always to investigate and go deeper

491
00:17:32,720 --> 00:17:35,039
into things especially when they see mod

492
00:17:35,039 --> 00:17:37,679
like the one like the weird request we

493
00:17:37,679 --> 00:17:38,400
saw

494
00:17:38,400 --> 00:17:40,320
i'm sure that um there are many more

495
00:17:40,320 --> 00:17:42,480
vulnerabilities like this out there

496
00:17:42,480 --> 00:17:44,960
on other platforms and just waiting for

497
00:17:44,960 --> 00:17:47,120
you to find them

498
00:17:47,120 --> 00:17:50,160
all right um so that was the first part

499
00:17:50,160 --> 00:17:51,280
of the session

500
00:17:51,280 --> 00:17:53,760
now we'll talk about uh the second one

501
00:17:53,760 --> 00:17:54,799
and

502
00:17:54,799 --> 00:17:57,039
we will cover a even more dangerous

503
00:17:57,039 --> 00:17:58,640
account takeover vulnerability that

504
00:17:58,640 --> 00:17:59,600
exposed

505
00:17:59,600 --> 00:18:03,200
all 365 users and

506
00:18:03,200 --> 00:18:06,240
and aad users and the vulnerability

507
00:18:06,240 --> 00:18:08,240
which we called it black direct is an

508
00:18:08,240 --> 00:18:10,080
off relates vulnerability

509
00:18:10,080 --> 00:18:11,520
so in order to understand the

510
00:18:11,520 --> 00:18:13,840
vulnerability itself we first need to

511
00:18:13,840 --> 00:18:15,679
briefly understand that what

512
00:18:15,679 --> 00:18:19,360
off and oidc are

513
00:18:19,360 --> 00:18:23,039
so let's go over it so

514
00:18:23,039 --> 00:18:26,320
what is off let's answer this a question

515
00:18:26,320 --> 00:18:26,720
first

516
00:18:26,720 --> 00:18:28,960
off is an open standard for

517
00:18:28,960 --> 00:18:30,080
authorization

518
00:18:30,080 --> 00:18:32,480
which sometimes it mixes up with its

519
00:18:32,480 --> 00:18:33,280
extension

520
00:18:33,280 --> 00:18:36,799
oidc which is the open id connect

521
00:18:36,799 --> 00:18:39,120
which is actually extends the protocol

522
00:18:39,120 --> 00:18:40,000
to also support

523
00:18:40,000 --> 00:18:43,039
authentication of supports authorization

524
00:18:43,039 --> 00:18:45,120
and oidc extends it to support also

525
00:18:45,120 --> 00:18:46,720
authentication

526
00:18:46,720 --> 00:18:49,039
so in short off is used to delegate

527
00:18:49,039 --> 00:18:49,919
permission

528
00:18:49,919 --> 00:18:52,960
of the users account to first and third

529
00:18:52,960 --> 00:18:54,960
party applications

530
00:18:54,960 --> 00:18:56,720
in order to understand why would need

531
00:18:56,720 --> 00:18:58,400
such a thing we need

532
00:18:58,400 --> 00:19:01,600
first go back in time so let's talk a

533
00:19:01,600 --> 00:19:02,720
bit history

534
00:19:02,720 --> 00:19:05,840
uh in the first in the past in order to

535
00:19:05,840 --> 00:19:07,520
let the third party application access

536
00:19:07,520 --> 00:19:08,480
to your data

537
00:19:08,480 --> 00:19:11,919
you needed to provide your password well

538
00:19:11,919 --> 00:19:13,600
what do you think what do you think

539
00:19:13,600 --> 00:19:15,919
about that what could actually go wrong

540
00:19:15,919 --> 00:19:19,280
with doing this well everything can go

541
00:19:19,280 --> 00:19:19,840
wrong

542
00:19:19,840 --> 00:19:22,640
in short app stores the user's password

543
00:19:22,640 --> 00:19:25,039
in plain text apps get a

544
00:19:25,039 --> 00:19:26,880
and get complete access to the user's

545
00:19:26,880 --> 00:19:28,080
account

546
00:19:28,080 --> 00:19:30,640
users can't revoke the app access to

547
00:19:30,640 --> 00:19:31,919
their account

548
00:19:31,919 --> 00:19:34,400
except by changing their password and

549
00:19:34,400 --> 00:19:34,960
also

550
00:19:34,960 --> 00:19:37,919
if the application got compromised it

551
00:19:37,919 --> 00:19:38,640
exposed

552
00:19:38,640 --> 00:19:42,720
all its users password

553
00:19:42,880 --> 00:19:45,440
so should we make something different

554
00:19:45,440 --> 00:19:47,039
absolutely

555
00:19:47,039 --> 00:19:48,799
there were efforts to implement new

556
00:19:48,799 --> 00:19:50,559
methods similar to off

557
00:19:50,559 --> 00:19:53,120
before a offer was released but every

558
00:19:53,120 --> 00:19:54,240
implementation was

559
00:19:54,240 --> 00:19:56,960
slightly different from from the other

560
00:19:56,960 --> 00:19:59,120
and not compatible with each other

561
00:19:59,120 --> 00:20:02,400
uh we had a flicker off we had a

562
00:20:02,400 --> 00:20:06,240
off sub which was a google and

563
00:20:06,240 --> 00:20:09,919
implementation uh we had a bp off of yao

564
00:20:09,919 --> 00:20:13,919
and really much more um

565
00:20:13,919 --> 00:20:17,440
so um all of those companies and

566
00:20:17,440 --> 00:20:19,200
and others joined together and brought

567
00:20:19,200 --> 00:20:21,200
up to life of portugal

568
00:20:21,200 --> 00:20:23,200
the authorization protocol that provides

569
00:20:23,200 --> 00:20:24,400
everything that you needed

570
00:20:24,400 --> 00:20:27,520
uh in order to in order to give third

571
00:20:27,520 --> 00:20:28,400
party and first

572
00:20:28,400 --> 00:20:31,440
party application access to your account

573
00:20:31,440 --> 00:20:33,840
securely without giving giving the

574
00:20:33,840 --> 00:20:35,520
password

575
00:20:35,520 --> 00:20:38,880
all right so let's see how it looks and

576
00:20:38,880 --> 00:20:41,600
in real life so as you can see there is

577
00:20:41,600 --> 00:20:43,600
a user that wants to get access to

578
00:20:43,600 --> 00:20:46,320
office.com

579
00:20:47,039 --> 00:20:49,600
the user browses to office.com and then

580
00:20:49,600 --> 00:20:50,880
clicks on the login

581
00:20:50,880 --> 00:20:53,039
button you redirect it to the microsoft

582
00:20:53,039 --> 00:20:54,480
authorization server

583
00:20:54,480 --> 00:20:56,480
the authorization server receives a

584
00:20:56,480 --> 00:20:58,400
request with the relevant parameters

585
00:20:58,400 --> 00:21:00,400
like the client id which represents the

586
00:21:00,400 --> 00:21:02,480
application that asks the user's

587
00:21:02,480 --> 00:21:04,880
permission it also includes the

588
00:21:04,880 --> 00:21:06,480
resources

589
00:21:06,480 --> 00:21:08,880
that application wants to get access to

590
00:21:08,880 --> 00:21:10,400
and the redirect uri

591
00:21:10,400 --> 00:21:12,640
parameter which states where the token

592
00:21:12,640 --> 00:21:15,039
should be transferred

593
00:21:15,039 --> 00:21:17,440
and the authorization server validates

594
00:21:17,440 --> 00:21:18,880
that everything is okay

595
00:21:18,880 --> 00:21:21,840
uh he evolved he validates that the user

596
00:21:21,840 --> 00:21:22,799
is logged in

597
00:21:22,799 --> 00:21:24,640
the application is authorized by the

598
00:21:24,640 --> 00:21:26,480
user the redirect uri

599
00:21:26,480 --> 00:21:29,919
is in the lowest and etc and after all

600
00:21:29,919 --> 00:21:30,640
those checks

601
00:21:30,640 --> 00:21:33,679
the authorization server creates a token

602
00:21:33,679 --> 00:21:36,880
it creates a token and uh actually uh

603
00:21:36,880 --> 00:21:39,520
after after it creates a token the token

604
00:21:39,520 --> 00:21:40,559
will be sent to

605
00:21:40,559 --> 00:21:43,760
back to the office.com server and by the

606
00:21:43,760 --> 00:21:47,520
the user's browser and that application

607
00:21:47,520 --> 00:21:50,080
can use this token to get the user's

608
00:21:50,080 --> 00:21:51,840
data

609
00:21:51,840 --> 00:21:55,440
uh so that's the flow in general uh and

610
00:21:55,440 --> 00:21:57,360
every off application needs to be

611
00:21:57,360 --> 00:21:59,280
registered in the authorization server

612
00:21:59,280 --> 00:22:00,880
in some way and also

613
00:22:00,880 --> 00:22:05,039
it needs to be approved by the user

614
00:22:05,280 --> 00:22:08,480
so if you take microsoft for example in

615
00:22:08,480 --> 00:22:10,559
azure every application is represented

616
00:22:10,559 --> 00:22:12,559
as a service principal object

617
00:22:12,559 --> 00:22:14,480
which is an instance of application

618
00:22:14,480 --> 00:22:16,720
object the service principle looks like

619
00:22:16,720 --> 00:22:17,919
this the

620
00:22:17,919 --> 00:22:20,240
like in this image that you can see you

621
00:22:20,240 --> 00:22:22,559
can see a json object that represents

622
00:22:22,559 --> 00:22:24,880
the application settings that include

623
00:22:24,880 --> 00:22:25,760
application name

624
00:22:25,760 --> 00:22:27,919
application id and also includes

625
00:22:27,919 --> 00:22:29,840
authorized list of urls

626
00:22:29,840 --> 00:22:32,320
that can receive the generated tokens in

627
00:22:32,320 --> 00:22:33,520
the future

628
00:22:33,520 --> 00:22:35,440
in this example you can see that the

629
00:22:35,440 --> 00:22:37,760
allowed list allowed urls

630
00:22:37,760 --> 00:22:40,400
in this case is google.com and

631
00:22:40,400 --> 00:22:41,679
google.com

632
00:22:41,679 --> 00:22:44,640
a slash anything that will come after it

633
00:22:44,640 --> 00:22:45,520
um

634
00:22:45,520 --> 00:22:48,480
so so far so good it sounds like nothing

635
00:22:48,480 --> 00:22:49,600
can go wrong here

636
00:22:49,600 --> 00:22:52,400
uh well almost nothing can go wrong we

637
00:22:52,400 --> 00:22:53,280
found out

638
00:22:53,280 --> 00:22:55,280
there are some a pre-installed service

639
00:22:55,280 --> 00:22:57,200
principle by a microsoft

640
00:22:57,200 --> 00:23:00,720
er in every azure ad environment

641
00:23:00,720 --> 00:23:04,080
which includes also 365 users

642
00:23:04,080 --> 00:23:06,400
when i say pre-installed i mean that the

643
00:23:06,400 --> 00:23:08,000
user doesn't need to approve

644
00:23:08,000 --> 00:23:10,400
uh approve those application manually

645
00:23:10,400 --> 00:23:12,240
because they're already

646
00:23:12,240 --> 00:23:14,720
approved those off applications are

647
00:23:14,720 --> 00:23:16,960
considered privileged because they can

648
00:23:16,960 --> 00:23:19,280
ask the users for accessing highly

649
00:23:19,280 --> 00:23:20,080
sensitive

650
00:23:20,080 --> 00:23:23,840
apis uh like the graph api uh which lets

651
00:23:23,840 --> 00:23:25,840
you make changes in the active and the

652
00:23:25,840 --> 00:23:27,280
azure active directory

653
00:23:27,280 --> 00:23:30,400
and uh to uh the uh azure

654
00:23:30,400 --> 00:23:32,960
resource manager api uh which lets you

655
00:23:32,960 --> 00:23:34,480
uh control azure

656
00:23:34,480 --> 00:23:37,679
resources your cloud assets

657
00:23:37,679 --> 00:23:39,679
uh so we looked for those principal

658
00:23:39,679 --> 00:23:40,960
service principles

659
00:23:40,960 --> 00:23:43,600
for finding any any kind of bug that can

660
00:23:43,600 --> 00:23:44,480
be

661
00:23:44,480 --> 00:23:47,919
in in those applications and so we found

662
00:23:47,919 --> 00:23:50,480
out that those applications a very large

663
00:23:50,480 --> 00:23:54,240
white listed url list as we saw before

664
00:23:54,240 --> 00:23:57,279
uh we checked every application to look

665
00:23:57,279 --> 00:24:00,960
at if we could take it take it over take

666
00:24:00,960 --> 00:24:03,679
and actually we could we could manage to

667
00:24:03,679 --> 00:24:04,480
do so

668
00:24:04,480 --> 00:24:08,240
so some of the uri were subdomains

669
00:24:08,240 --> 00:24:09,760
that were vulnerable to subdomain

670
00:24:09,760 --> 00:24:12,320
takeover uh which i will explain it

671
00:24:12,320 --> 00:24:14,480
in short uh subdomain takeover it's it's

672
00:24:14,480 --> 00:24:15,840
an attack that makes a

673
00:24:15,840 --> 00:24:19,039
the subdomain to point on an ip

674
00:24:19,039 --> 00:24:20,320
addresses of my choice

675
00:24:20,320 --> 00:24:24,559
because of a bad dns configuration um

676
00:24:24,559 --> 00:24:27,360
and actually um we we managed to take

677
00:24:27,360 --> 00:24:30,320
over some of the whitelisted the uri

678
00:24:30,320 --> 00:24:35,039
uri your eyes and that this actually um

679
00:24:35,039 --> 00:24:37,120
led us to uh to the following attack

680
00:24:37,120 --> 00:24:38,480
scenario

681
00:24:38,480 --> 00:24:41,520
so um we for the

682
00:24:41,520 --> 00:24:43,360
in this example we see that uh we took

683
00:24:43,360 --> 00:24:46,400
over a secureserver.office.com

684
00:24:46,400 --> 00:24:49,600
and in some way and this

685
00:24:49,600 --> 00:24:52,559
this this one is a whitelisted in the

686
00:24:52,559 --> 00:24:54,640
office application which is approved by

687
00:24:54,640 --> 00:24:55,520
default

688
00:24:55,520 --> 00:24:59,039
in in microsoft off application

689
00:24:59,039 --> 00:25:01,279
and that's just an example it's not uh

690
00:25:01,279 --> 00:25:03,279
it wasn't that one but um

691
00:25:03,279 --> 00:25:05,520
yeah so you do understand that uh so the

692
00:25:05,520 --> 00:25:06,880
user clicks on the link or

693
00:25:06,880 --> 00:25:10,159
a subway um browser to this secure

694
00:25:10,159 --> 00:25:10,880
server

695
00:25:10,880 --> 00:25:13,200
office.com which is a trusted one you

696
00:25:13,200 --> 00:25:14,240
can see it's

697
00:25:14,240 --> 00:25:16,080
called it's with office.com and

698
00:25:16,080 --> 00:25:18,000
everything should be fine

699
00:25:18,000 --> 00:25:21,600
uh so um the user is actually browser to

700
00:25:21,600 --> 00:25:21,919
it

701
00:25:21,919 --> 00:25:24,640
uh secure.com the bet server redacts the

702
00:25:24,640 --> 00:25:26,400
user to the authorization server

703
00:25:26,400 --> 00:25:28,080
the authorization server validates the

704
00:25:28,080 --> 00:25:29,600
request parameters

705
00:25:29,600 --> 00:25:31,679
uh and the authorization server

706
00:25:31,679 --> 00:25:33,520
recognized that the rig directory is

707
00:25:33,520 --> 00:25:36,240
whitelisted and everything else is okay

708
00:25:36,240 --> 00:25:38,240
uh and therefore it creates an access

709
00:25:38,240 --> 00:25:39,919
token that eventually

710
00:25:39,919 --> 00:25:42,320
the victim browsers they send the access

711
00:25:42,320 --> 00:25:44,159
token to the malicious

712
00:25:44,159 --> 00:25:45,679
website which is controlled by the

713
00:25:45,679 --> 00:25:48,159
attacker and then the attacker can

714
00:25:48,159 --> 00:25:52,159
actually steal every every data that

715
00:25:52,159 --> 00:25:55,279
the users add change that uh compromise

716
00:25:55,279 --> 00:25:57,919
things can do a lot of bad things

717
00:25:57,919 --> 00:26:01,279
so let's see how it actually um

718
00:26:01,279 --> 00:26:03,600
looked in real life so this is the proof

719
00:26:03,600 --> 00:26:05,200
of concept that we made

720
00:26:05,200 --> 00:26:07,760
of this vulnerability uh as you can see

721
00:26:07,760 --> 00:26:10,880
this is the victim user

722
00:26:10,880 --> 00:26:13,360
it doesn't actually have any any third

723
00:26:13,360 --> 00:26:15,120
party application installed

724
00:26:15,120 --> 00:26:18,159
that has access to its um its account so

725
00:26:18,159 --> 00:26:18,559
it's

726
00:26:18,559 --> 00:26:22,240
only the very

727
00:26:22,559 --> 00:26:24,480
built-in off application that's

728
00:26:24,480 --> 00:26:26,799
configured by microsoft

729
00:26:26,799 --> 00:26:29,840
okay uh we'll search for an attacker

730
00:26:29,840 --> 00:26:30,640
user that

731
00:26:30,640 --> 00:26:32,960
might be existing in active directory so

732
00:26:32,960 --> 00:26:35,600
there is no such a user of course

733
00:26:35,600 --> 00:26:39,679
um then the user's uh going to outlook

734
00:26:39,679 --> 00:26:42,880
he receives a new email uh actually it's

735
00:26:42,880 --> 00:26:43,760
um

736
00:26:43,760 --> 00:26:46,080
it's a social engineering email it

737
00:26:46,080 --> 00:26:47,279
receives a new

738
00:26:47,279 --> 00:26:49,440
phishing mail from a generic financial

739
00:26:49,440 --> 00:26:51,200
company

740
00:26:51,200 --> 00:26:54,000
and they clicks on the link and actually

741
00:26:54,000 --> 00:26:54,400
when

742
00:26:54,400 --> 00:26:56,320
when you see this screen the attacker

743
00:26:56,320 --> 00:26:58,080
already have the um

744
00:26:58,080 --> 00:27:01,360
anti-access token in it uh it already

745
00:27:01,360 --> 00:27:02,480
stole the access token

746
00:27:02,480 --> 00:27:04,320
this takes only a second so the users

747
00:27:04,320 --> 00:27:06,320
won't actually feel anything and see

748
00:27:06,320 --> 00:27:07,200
anything

749
00:27:07,200 --> 00:27:08,799
and we'll actually after it will

750
00:27:08,799 --> 00:27:10,240
redirect it to

751
00:27:10,240 --> 00:27:13,200
um to innocent website that he won't

752
00:27:13,200 --> 00:27:14,720
suspicious anything

753
00:27:14,720 --> 00:27:17,760
so it won't look suspicious and

754
00:27:17,760 --> 00:27:19,279
and in the meanwhile we created a new

755
00:27:19,279 --> 00:27:21,200
user which is the attacker attacker

756
00:27:21,200 --> 00:27:23,039
created a user for im

757
00:27:23,039 --> 00:27:25,600
with the highway permissions of a global

758
00:27:25,600 --> 00:27:27,440
administrator

759
00:27:27,440 --> 00:27:31,520
so as you can see a new user created

760
00:27:32,799 --> 00:27:36,320
and let's see the assigned roles

761
00:27:36,399 --> 00:27:39,440
and global administrator that's kind of

762
00:27:39,440 --> 00:27:40,240
cool

763
00:27:40,240 --> 00:27:44,159
so that that is a really dangerous

764
00:27:44,159 --> 00:27:45,200
vulnerability that

765
00:27:45,200 --> 00:27:47,440
was closed so let's talk about the fix

766
00:27:47,440 --> 00:27:48,399
and

767
00:27:48,399 --> 00:27:50,080
so we reported this vulnerability to

768
00:27:50,080 --> 00:27:51,840
microsoft and together we

769
00:27:51,840 --> 00:27:55,039
uh we managed to uh to fix this uh

770
00:27:55,039 --> 00:27:56,080
vulnerability

771
00:27:56,080 --> 00:27:58,480
and it took a while because it's not

772
00:27:58,480 --> 00:28:00,159
that easy to fix there are a lot of

773
00:28:00,159 --> 00:28:01,039
application that

774
00:28:01,039 --> 00:28:03,120
you need to monitor and and look for

775
00:28:03,120 --> 00:28:04,559
those uh kind of

776
00:28:04,559 --> 00:28:07,919
bad uris that could be uh taking over

777
00:28:07,919 --> 00:28:10,559
and actually microsoft remove the

778
00:28:10,559 --> 00:28:11,279
vulnerable

779
00:28:11,279 --> 00:28:14,399
urls from the redirect uri list of those

780
00:28:14,399 --> 00:28:15,360
applications

781
00:28:15,360 --> 00:28:17,679
which basically fix the issue for their

782
00:28:17,679 --> 00:28:18,720
application

783
00:28:18,720 --> 00:28:20,880
but i must say there might be more

784
00:28:20,880 --> 00:28:22,159
vulnerable application

785
00:28:22,159 --> 00:28:25,679
which not created by microsoft

786
00:28:25,679 --> 00:28:28,000
that might be in your account and might

787
00:28:28,000 --> 00:28:29,919
expose you to similar vulnerability like

788
00:28:29,919 --> 00:28:30,880
this

789
00:28:30,880 --> 00:28:33,600
so in order to find those application

790
00:28:33,600 --> 00:28:35,840
and mitigate the risk we created a free

791
00:28:35,840 --> 00:28:37,279
online tool

792
00:28:37,279 --> 00:28:39,679
that you can scan your environment with

793
00:28:39,679 --> 00:28:40,480
it

794
00:28:40,480 --> 00:28:42,159
it will tell you which application are

795
00:28:42,159 --> 00:28:44,320
vulnerable and to similar attack in your

796
00:28:44,320 --> 00:28:45,279
account

797
00:28:45,279 --> 00:28:47,120
uh so let's talk a bit about the

798
00:28:47,120 --> 00:28:48,880
statistics uh

799
00:28:48,880 --> 00:28:51,919
we ran a more than 200

800
00:28:51,919 --> 00:28:55,360
scans and the two detected more than a

801
00:28:55,360 --> 00:28:56,320
1200

802
00:28:56,320 --> 00:29:00,159
vulnerable urls in 700 different

803
00:29:00,159 --> 00:29:03,440
off applications in addition

804
00:29:03,440 --> 00:29:05,360
we found with the help of this tool of

805
00:29:05,360 --> 00:29:06,640
course another for

806
00:29:06,640 --> 00:29:08,480
microsoft vulnerable applications and

807
00:29:08,480 --> 00:29:09,760
reported it to them

808
00:29:09,760 --> 00:29:13,679
of course microsoft um so

809
00:29:13,679 --> 00:29:15,520
if you want to see if your environment

810
00:29:15,520 --> 00:29:17,600
might be exposed to such risk

811
00:29:17,600 --> 00:29:19,360
you're more than welcome to want this

812
00:29:19,360 --> 00:29:20,720
tool in the

813
00:29:20,720 --> 00:29:24,159
in in the website uh black direct

814
00:29:24,159 --> 00:29:27,200
your model welcome to do so so guys

815
00:29:27,200 --> 00:29:29,360
that's it i was almost zafati i hope you

816
00:29:29,360 --> 00:29:30,399
enjoyed this session

817
00:29:30,399 --> 00:29:33,600
and if you um and if you would like to

818
00:29:33,600 --> 00:29:34,159
read more

819
00:29:34,159 --> 00:29:35,760
about those vulnerabilities you can

820
00:29:35,760 --> 00:29:38,000
check our blog posts on cyber art clubs

821
00:29:38,000 --> 00:29:38,480
website

822
00:29:38,480 --> 00:29:40,640
links are shown on the screen so thank

823
00:29:40,640 --> 00:29:42,080
you for attention

824
00:29:42,080 --> 00:29:54,000
let's get back to the studio

