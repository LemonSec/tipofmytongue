1
00:00:10,080 --> 00:00:11,200
hi everyone

2
00:00:11,200 --> 00:00:12,799
um thank you for coming thank you for

3
00:00:12,799 --> 00:00:15,200
watching this hope everyone's safe

4
00:00:15,200 --> 00:00:17,520
wherever they are in the world it's a

5
00:00:17,520 --> 00:00:18,240
shame we

6
00:00:18,240 --> 00:00:21,680
cannot do this uh in person but um

7
00:00:21,680 --> 00:00:24,560
we've got great things prepared for next

8
00:00:24,560 --> 00:00:26,080
years and the years to come

9
00:00:26,080 --> 00:00:29,278
so let's start

10
00:00:29,679 --> 00:00:32,320
so i'm danny i'm the cto of net alpha

11
00:00:32,320 --> 00:00:34,559
financial systems

12
00:00:34,559 --> 00:00:37,440
i'm also freed um the co-founder of

13
00:00:37,440 --> 00:00:39,520
drops

14
00:00:39,520 --> 00:00:42,879
so um this talk came about um when we

15
00:00:42,879 --> 00:00:45,280
were both doing pen testing i was doing

16
00:00:45,280 --> 00:00:46,559
cloud pen testing

17
00:00:46,559 --> 00:00:48,320
mo was doing a lot of internal pen

18
00:00:48,320 --> 00:00:50,399
testing and we were thinking how we can

19
00:00:50,399 --> 00:00:52,000
combine those two

20
00:00:52,000 --> 00:00:54,960
and get a nice chill chain which we

21
00:00:54,960 --> 00:00:57,199
called from the cloud to the ground

22
00:00:57,199 --> 00:01:00,960
so let's start we'll start with a little

23
00:01:00,960 --> 00:01:02,559
basic cloud knowledge the shared

24
00:01:02,559 --> 00:01:04,479
responsibility model we have

25
00:01:04,479 --> 00:01:07,040
a few models we have the ias the

26
00:01:07,040 --> 00:01:08,799
infrastructure as a service

27
00:01:08,799 --> 00:01:11,200
where you get provided just the basic

28
00:01:11,200 --> 00:01:12,159
infrastructure

29
00:01:12,159 --> 00:01:15,520
and your networks the os applications

30
00:01:15,520 --> 00:01:17,600
data and the people are your

31
00:01:17,600 --> 00:01:18,960
responsibility

32
00:01:18,960 --> 00:01:21,920
we got the platform as a service which

33
00:01:21,920 --> 00:01:24,159
is similar to ruku

34
00:01:24,159 --> 00:01:27,360
or others more managed services in aws

35
00:01:27,360 --> 00:01:31,200
azure or gcp where they manage the os

36
00:01:31,200 --> 00:01:34,320
and the virtual network for you and then

37
00:01:34,320 --> 00:01:35,439
sas

38
00:01:35,439 --> 00:01:38,880
software as a service which

39
00:01:38,880 --> 00:01:41,520
they basically give you a service so you

40
00:01:41,520 --> 00:01:43,119
don't have too much to manage

41
00:01:43,119 --> 00:01:45,439
so the more you have to manage the more

42
00:01:45,439 --> 00:01:46,880
security risks

43
00:01:46,880 --> 00:01:48,960
you have the bigger the attack vector

44
00:01:48,960 --> 00:01:52,240
that is your responsibility

45
00:01:52,720 --> 00:01:55,600
so in terms of cloud um there are many

46
00:01:55,600 --> 00:01:57,600
ways of getting photos on the cloud

47
00:01:57,600 --> 00:02:00,640
from leaked credentials ssrf became

48
00:02:00,640 --> 00:02:02,960
very very popular for stealing

49
00:02:02,960 --> 00:02:05,360
credentials from metadata servers

50
00:02:05,360 --> 00:02:08,160
and um what i'll show you right now for

51
00:02:08,160 --> 00:02:08,800
example

52
00:02:08,800 --> 00:02:12,160
using exploit and python special library

53
00:02:12,160 --> 00:02:16,400
to get a remote card execution

54
00:02:18,400 --> 00:02:22,560
so we call this a hummus bomb and

55
00:02:22,560 --> 00:02:25,280
we're taking advantage of an open reddit

56
00:02:25,280 --> 00:02:25,840
server

57
00:02:25,840 --> 00:02:29,040
to inject a malicious pickled

58
00:02:29,040 --> 00:02:32,160
python message that will give us

59
00:02:32,160 --> 00:02:35,200
control over that aws machine so as you

60
00:02:35,200 --> 00:02:36,000
can see on the right

61
00:02:36,000 --> 00:02:39,280
side we have control over the machine

62
00:02:39,280 --> 00:02:41,840
we're going to do a troll request to 169

63
00:02:41,840 --> 00:02:42,800
254

64
00:02:42,800 --> 00:02:46,800
169 254 which is the metadata server

65
00:02:46,800 --> 00:02:48,840
and that will dump us some interesting

66
00:02:48,840 --> 00:02:50,640
configurations

67
00:02:50,640 --> 00:02:52,959
this for instance is the user data which

68
00:02:52,959 --> 00:02:55,280
will let us know what the instance

69
00:02:55,280 --> 00:02:59,280
does once it runs for the first time

70
00:02:59,440 --> 00:03:01,680
and the second thing you can look at the

71
00:03:01,680 --> 00:03:02,800
user data

72
00:03:02,800 --> 00:03:05,599
as a startup script the second thing

73
00:03:05,599 --> 00:03:05,920
that

74
00:03:05,920 --> 00:03:07,760
i just did you can see there is another

75
00:03:07,760 --> 00:03:09,360
troll to that same address

76
00:03:09,360 --> 00:03:12,800
with security credentials in the path

77
00:03:12,800 --> 00:03:15,440
so there we go we just draw a dump of

78
00:03:15,440 --> 00:03:18,239
the access sheet the token

79
00:03:18,239 --> 00:03:20,080
so we can use that from our machine or

80
00:03:20,080 --> 00:03:22,640
any machine to talk to the aws services

81
00:03:22,640 --> 00:03:26,879
on behalf of the compromised machine

82
00:03:26,879 --> 00:03:30,159
this is a this is the payload it creates

83
00:03:30,159 --> 00:03:32,159
a payload it takes advantage of

84
00:03:32,159 --> 00:03:34,640
salary which is a queuing service for

85
00:03:34,640 --> 00:03:35,599
python

86
00:03:35,599 --> 00:03:39,680
and it uses the deserialization attack

87
00:03:39,680 --> 00:03:44,959
to get that rc and get us a shell

88
00:03:45,040 --> 00:03:48,319
second thing that is basically an

89
00:03:48,319 --> 00:03:51,040
old trick using new technology so

90
00:03:51,040 --> 00:03:53,200
service meshes there are many of them

91
00:03:53,200 --> 00:03:56,480
um link rd console

92
00:03:56,480 --> 00:04:00,560
sdo i'm familiar with consoles so i took

93
00:04:00,560 --> 00:04:01,920
that as an example

94
00:04:01,920 --> 00:04:04,239
so let's first talk about what is a

95
00:04:04,239 --> 00:04:05,439
service mesh

96
00:04:05,439 --> 00:04:08,400
so it gives us two two capabilities

97
00:04:08,400 --> 00:04:09,599
service discovery

98
00:04:09,599 --> 00:04:11,360
especially when we're talking in cloud

99
00:04:11,360 --> 00:04:13,280
and microservice everything's

100
00:04:13,280 --> 00:04:14,640
distributed

101
00:04:14,640 --> 00:04:18,000
and each service that has its own role

102
00:04:18,000 --> 00:04:19,918
our services need to know how to find

103
00:04:19,918 --> 00:04:21,279
other services that they need to

104
00:04:21,279 --> 00:04:22,400
communicate with

105
00:04:22,400 --> 00:04:24,000
so that's where service discovery comes

106
00:04:24,000 --> 00:04:25,919
in and then the service mesh

107
00:04:25,919 --> 00:04:28,479
gives us identity based authorization

108
00:04:28,479 --> 00:04:29,040
and

109
00:04:29,040 --> 00:04:31,360
l7 and traffic management basically

110
00:04:31,360 --> 00:04:32,400
gives us a lot of

111
00:04:32,400 --> 00:04:35,199
abstraction from telling services how to

112
00:04:35,199 --> 00:04:36,960
communicate with each other it creates

113
00:04:36,960 --> 00:04:37,919
some kind of

114
00:04:37,919 --> 00:04:40,400
network for them to communicate and a

115
00:04:40,400 --> 00:04:41,280
lot of that

116
00:04:41,280 --> 00:04:43,680
if configured right is great if

117
00:04:43,680 --> 00:04:45,680
configured wrong

118
00:04:45,680 --> 00:04:47,840
you get a lot of plain text traffic if

119
00:04:47,840 --> 00:04:50,320
you don't enforce tls

120
00:04:50,320 --> 00:04:52,639
and i will show you something that i

121
00:04:52,639 --> 00:04:53,680
called submission

122
00:04:53,680 --> 00:04:56,160
so it's basically impersonation for

123
00:04:56,160 --> 00:04:58,880
service message

124
00:04:58,880 --> 00:05:00,960
this is how the console dashboard looks

125
00:05:00,960 --> 00:05:02,160
you can see i

126
00:05:02,160 --> 00:05:05,199
put up a small demo environment we have

127
00:05:05,199 --> 00:05:06,479
console

128
00:05:06,479 --> 00:05:09,280
um the two console servers two posters

129
00:05:09,280 --> 00:05:10,000
servers

130
00:05:10,000 --> 00:05:12,560
one sentry server and one vault which

131
00:05:12,560 --> 00:05:13,840
i'll get to a bit

132
00:05:13,840 --> 00:05:17,600
later in the talk so

133
00:05:17,600 --> 00:05:19,759
from one of those services let's say i

134
00:05:19,759 --> 00:05:20,800
have a machine that is

135
00:05:20,800 --> 00:05:23,440
connected to that mesh i can do a dig

136
00:05:23,440 --> 00:05:24,000
command

137
00:05:24,000 --> 00:05:26,639
just dig post address dot service dot

138
00:05:26,639 --> 00:05:27,680
console

139
00:05:27,680 --> 00:05:29,759
and we can see that there are two

140
00:05:29,759 --> 00:05:30,800
services

141
00:05:30,800 --> 00:05:34,000
answering to that they command

142
00:05:34,000 --> 00:05:35,520
so let's see how we can do an

143
00:05:35,520 --> 00:05:37,199
impersonate a service on a compromise

144
00:05:37,199 --> 00:05:39,199
machine

145
00:05:39,199 --> 00:05:42,080
this is a configuration file for console

146
00:05:42,080 --> 00:05:43,759
for console agent

147
00:05:43,759 --> 00:05:46,000
so i'm going to add a service i'm going

148
00:05:46,000 --> 00:05:47,280
to call it postdress

149
00:05:47,280 --> 00:05:50,160
it's going to be a poster server i'm

150
00:05:50,160 --> 00:05:50,639
going to

151
00:05:50,639 --> 00:05:53,919
listen on port 5432 which is the

152
00:05:53,919 --> 00:05:56,960
default postgres server and we can even

153
00:05:56,960 --> 00:05:58,880
do a little health check

154
00:05:58,880 --> 00:06:01,039
and you know it's been bash user

155
00:06:01,039 --> 00:06:02,080
imagination

156
00:06:02,080 --> 00:06:05,199
the format is called hcl

157
00:06:05,199 --> 00:06:07,440
and this specifically i showed it in a

158
00:06:07,440 --> 00:06:09,120
in a json format but

159
00:06:09,120 --> 00:06:12,160
hcl is uh is

160
00:06:12,160 --> 00:06:15,360
hashicorps who who own console is their

161
00:06:15,360 --> 00:06:21,840
language for configuring services

162
00:06:22,400 --> 00:06:24,319
so like i said health checks can be used

163
00:06:24,319 --> 00:06:27,600
to execute arbitrary command

164
00:06:27,600 --> 00:06:30,160
and we can move that file to the console

165
00:06:30,160 --> 00:06:31,199
config

166
00:06:31,199 --> 00:06:34,319
and do a how to reload

167
00:06:34,319 --> 00:06:37,039
second way which is pretty common so a

168
00:06:37,039 --> 00:06:38,240
registrator

169
00:06:38,240 --> 00:06:41,360
is a docker container that does you the

170
00:06:41,360 --> 00:06:42,880
automates that job of registering new

171
00:06:42,880 --> 00:06:45,120
services so if you have

172
00:06:45,120 --> 00:06:47,440
one machine with lots of services

173
00:06:47,440 --> 00:06:48,560
running on it

174
00:06:48,560 --> 00:06:50,160
instead of doing that manual job or

175
00:06:50,160 --> 00:06:52,639
maintaining scripts to do a manual job

176
00:06:52,639 --> 00:06:55,680
registrator will get a token that gives

177
00:06:55,680 --> 00:06:58,000
the permission to register new services

178
00:06:58,000 --> 00:07:00,000
and every time a new container starts

179
00:07:00,000 --> 00:07:01,120
with a service name

180
00:07:01,120 --> 00:07:03,280
and some tags in the environment

181
00:07:03,280 --> 00:07:04,240
variables

182
00:07:04,240 --> 00:07:07,120
it will register it so let's explore

183
00:07:07,120 --> 00:07:09,360
this

184
00:07:10,960 --> 00:07:13,919
so on the left i'm just going to run

185
00:07:13,919 --> 00:07:15,520
python

186
00:07:15,520 --> 00:07:18,319
and on the right i will run a man in the

187
00:07:18,319 --> 00:07:20,160
middle proxy that i wrote for

188
00:07:20,160 --> 00:07:23,759
post address it utilizes the

189
00:07:23,759 --> 00:07:25,759
it's a feature but it's something that

190
00:07:25,759 --> 00:07:28,840
you can exploit to get plain text

191
00:07:28,840 --> 00:07:31,840
credentials

192
00:07:34,560 --> 00:07:38,560
so you can see that after running that

193
00:07:38,560 --> 00:07:41,520
that proxy as a container i just ran an

194
00:07:41,520 --> 00:07:43,199
empty container gave it the name post

195
00:07:43,199 --> 00:07:44,639
address

196
00:07:44,639 --> 00:07:47,440
and run this proxy it will listen on

197
00:07:47,440 --> 00:07:48,080
five four

198
00:07:48,080 --> 00:07:51,520
three two and it will relay the traffic

199
00:07:51,520 --> 00:07:53,840
to the real postdress instance

200
00:07:53,840 --> 00:07:56,160
and on the left you can see that i made

201
00:07:56,160 --> 00:07:58,080
a couple of authentication requests

202
00:07:58,080 --> 00:08:00,560
to connect it to the postdress server

203
00:08:00,560 --> 00:08:02,759
using the host

204
00:08:02,759 --> 00:08:05,120
postdress.service.console so

205
00:08:05,120 --> 00:08:07,280
it would not hate my proxy server every

206
00:08:07,280 --> 00:08:09,039
time but every once in a while it will

207
00:08:09,039 --> 00:08:09,520
hit it

208
00:08:09,520 --> 00:08:11,120
because it distributes the load between

209
00:08:11,120 --> 00:08:12,720
those two servers

210
00:08:12,720 --> 00:08:16,240
so as you can see i got the username

211
00:08:16,240 --> 00:08:19,360
i got the hashed password i got the salt

212
00:08:19,360 --> 00:08:22,720
and also got the plain text password

213
00:08:22,720 --> 00:08:25,120
and the user would not know because this

214
00:08:25,120 --> 00:08:26,560
is a transparent proxy

215
00:08:26,560 --> 00:08:30,560
it will talk to the real poser server

216
00:08:30,560 --> 00:08:33,840
and will transfer everything

217
00:08:38,839 --> 00:08:41,839
transparently

218
00:08:43,519 --> 00:08:46,000
so let's talk a bit of uh what happens

219
00:08:46,000 --> 00:08:47,600
after you're in and you just want to sit

220
00:08:47,600 --> 00:08:49,120
in the cloud and

221
00:08:49,120 --> 00:08:52,480
observe so lambda layers

222
00:08:52,480 --> 00:08:55,680
in aws it's a serverless service

223
00:08:55,680 --> 00:08:59,279
you basically create one function and

224
00:08:59,279 --> 00:09:01,200
it runs every time that service is hit

225
00:09:01,200 --> 00:09:03,120
whether from an endpoint or

226
00:09:03,120 --> 00:09:06,640
from an api so

227
00:09:06,640 --> 00:09:08,480
aws release something called lambda

228
00:09:08,480 --> 00:09:11,200
layers because there is a

229
00:09:11,200 --> 00:09:13,279
limit on how big a lambda file can be

230
00:09:13,279 --> 00:09:14,800
the function can be

231
00:09:14,800 --> 00:09:18,160
so and usually you want to use

232
00:09:18,160 --> 00:09:19,920
um common dependencies between your

233
00:09:19,920 --> 00:09:22,480
layers if you have a library for an api

234
00:09:22,480 --> 00:09:23,760
you want to use it between all the

235
00:09:23,760 --> 00:09:25,920
layers that access that api

236
00:09:25,920 --> 00:09:29,680
so we can utilize that and put in a row

237
00:09:29,680 --> 00:09:33,279
layer and register it if there is

238
00:09:33,279 --> 00:09:36,399
not if if the company or

239
00:09:36,399 --> 00:09:40,560
um whoever you're testing does not have

240
00:09:40,560 --> 00:09:42,720
good infrastructure as code and they

241
00:09:42,720 --> 00:09:45,200
cannot see changes in the infrastructure

242
00:09:45,200 --> 00:09:48,399
and detect them pretty fast you can hide

243
00:09:48,399 --> 00:09:49,200
in there

244
00:09:49,200 --> 00:09:51,519
and it'll be in plain sight the

245
00:09:51,519 --> 00:09:54,320
developers will see the same layer

246
00:09:54,320 --> 00:09:57,680
and i will show you how i hid it

247
00:09:57,680 --> 00:10:00,640
in in plain library like one of the most

248
00:10:00,640 --> 00:10:02,839
common libraries in python which is

249
00:10:02,839 --> 00:10:04,160
requests

250
00:10:04,160 --> 00:10:06,399
so i took the request library i pulled

251
00:10:06,399 --> 00:10:08,000
it from github

252
00:10:08,000 --> 00:10:12,320
and i added a small couple of lines

253
00:10:12,320 --> 00:10:14,320
that will just take the environmental

254
00:10:14,320 --> 00:10:18,079
variables and send them to my server

255
00:10:18,079 --> 00:10:21,680
i add that as a layer and because

256
00:10:21,680 --> 00:10:26,079
it all compounds as one python library

257
00:10:26,079 --> 00:10:29,120
end of day the you when the user uses

258
00:10:29,120 --> 00:10:29,920
requests

259
00:10:29,920 --> 00:10:32,399
in the lambda function it will use my

260
00:10:32,399 --> 00:10:33,839
version of it

261
00:10:33,839 --> 00:10:37,920
so let's see how that works we'll send

262
00:10:37,920 --> 00:10:40,720
our c2 f subfresh of credentials every

263
00:10:40,720 --> 00:10:41,120
time

264
00:10:41,120 --> 00:10:42,959
plus the request data so we can also see

265
00:10:42,959 --> 00:10:44,839
what the user was requesting from that

266
00:10:44,839 --> 00:10:47,600
function

267
00:10:47,600 --> 00:10:50,240
this is a simple flash server to just to

268
00:10:50,240 --> 00:10:52,560
catch that

269
00:10:52,560 --> 00:10:56,959
and import requests and the moment this

270
00:10:56,959 --> 00:11:00,399
happens and

271
00:11:00,399 --> 00:11:02,800
this is a basic lambda function the

272
00:11:02,800 --> 00:11:03,760
moment request

273
00:11:03,760 --> 00:11:06,640
yet gets called it will do what it's

274
00:11:06,640 --> 00:11:07,519
supposed to do but

275
00:11:07,519 --> 00:11:10,160
also send our server a fresh set of

276
00:11:10,160 --> 00:11:11,839
credentials

277
00:11:11,839 --> 00:11:14,079
let's see it in action so on the left we

278
00:11:14,079 --> 00:11:17,360
have flash server waiting to capture it

279
00:11:17,360 --> 00:11:19,920
on the right we're just executing uh

280
00:11:19,920 --> 00:11:22,240
we're sending our troll function to

281
00:11:22,240 --> 00:11:24,880
uh code command to to the api and you

282
00:11:24,880 --> 00:11:26,160
can see that we got

283
00:11:26,160 --> 00:11:28,640
a set of credentials don't try to use

284
00:11:28,640 --> 00:11:30,640
them they're expired

285
00:11:30,640 --> 00:11:34,959
um but yeah it will happen every time

286
00:11:34,959 --> 00:11:36,399
so we keep getting a fresh set of

287
00:11:36,399 --> 00:11:38,959
credentials

288
00:11:40,880 --> 00:11:44,000
so look out for that try to implement as

289
00:11:44,000 --> 00:11:44,399
much

290
00:11:44,399 --> 00:11:47,440
infrastructure as code and detection

291
00:11:47,440 --> 00:11:49,120
capabilities to see changes in the

292
00:11:49,120 --> 00:11:50,320
infrastructure

293
00:11:50,320 --> 00:11:52,480
especially in subtle things like lambda

294
00:11:52,480 --> 00:11:53,519
layers

295
00:11:53,519 --> 00:11:55,360
which can go and notice because usually

296
00:11:55,360 --> 00:11:58,959
the developers maintain that

297
00:11:59,839 --> 00:12:02,480
so you know now that we've uh

298
00:12:02,480 --> 00:12:03,680
established our foothold

299
00:12:03,680 --> 00:12:05,279
we're going to go a little bit over

300
00:12:05,279 --> 00:12:06,800
active directory and

301
00:12:06,800 --> 00:12:09,440
discuss how we're going to manage

302
00:12:09,440 --> 00:12:10,079
pivoting

303
00:12:10,079 --> 00:12:12,399
from there just a quick rundown active

304
00:12:12,399 --> 00:12:13,760
directory

305
00:12:13,760 --> 00:12:15,519
is used to manage computers and users of

306
00:12:15,519 --> 00:12:18,639
most enterprises on windows enterprises

307
00:12:18,639 --> 00:12:20,240
it's a directory service database and

308
00:12:20,240 --> 00:12:22,240
ldap is the primary protocol that we can

309
00:12:22,240 --> 00:12:24,000
use to communicate to it

310
00:12:24,000 --> 00:12:25,680
and uh the attack scenario that we're

311
00:12:25,680 --> 00:12:27,920
looking at is going to be

312
00:12:27,920 --> 00:12:30,720
abusing the single stun which is a cd

313
00:12:30,720 --> 00:12:32,000
single sign-on solution that's created

314
00:12:32,000 --> 00:12:33,040
by microsoft

315
00:12:33,040 --> 00:12:36,959
and um the adfs proxy which is a

316
00:12:36,959 --> 00:12:38,560
proxy host in the cloud that allows

317
00:12:38,560 --> 00:12:41,120
authentication to active directory

318
00:12:41,120 --> 00:12:43,200
without a direct connection internal to

319
00:12:43,200 --> 00:12:44,480
the internal network so

320
00:12:44,480 --> 00:12:47,120
this is very useful in scenarios where

321
00:12:47,120 --> 00:12:47,760
um

322
00:12:47,760 --> 00:12:49,519
you don't want the outside communicating

323
00:12:49,519 --> 00:12:52,399
to the inside and um we've

324
00:12:52,399 --> 00:12:54,160
i you know there's several bugs that

325
00:12:54,160 --> 00:12:56,320
have been identified um over the past

326
00:12:56,320 --> 00:12:57,040
year that

327
00:12:57,040 --> 00:12:59,839
we've leveraged to um you know

328
00:12:59,839 --> 00:13:01,040
essentially

329
00:13:01,040 --> 00:13:04,079
uh compromise your your organization uh

330
00:13:04,079 --> 00:13:04,959
via your

331
00:13:04,959 --> 00:13:08,240
via uh your cloud infrastructure

332
00:13:08,240 --> 00:13:10,639
so some of the tools uh that i wanted to

333
00:13:10,639 --> 00:13:11,519
to just bring

334
00:13:11,519 --> 00:13:15,279
attention to road tools um it's an azure

335
00:13:15,279 --> 00:13:18,000
av exploitation framework by dirk john

336
00:13:18,000 --> 00:13:18,480
um

337
00:13:18,480 --> 00:13:22,320
and ad internals um azure ad internals

338
00:13:22,320 --> 00:13:22,880
by dr

339
00:13:22,880 --> 00:13:26,160
nistori cinema my apologies for

340
00:13:26,160 --> 00:13:35,839
ending this pronunciations

341
00:13:49,920 --> 00:13:52,959
so i what we're doing essentially is uh

342
00:13:52,959 --> 00:13:56,320
you know adfs uh we're we're

343
00:13:56,320 --> 00:13:59,279
you know in this test scenario um we

344
00:13:59,279 --> 00:14:00,800
have adfs so that's being

345
00:14:00,800 --> 00:14:02,480
the proxy is being used for sharepoint

346
00:14:02,480 --> 00:14:04,720
and exchange authentication

347
00:14:04,720 --> 00:14:07,440
and um you know this allows enterprise

348
00:14:07,440 --> 00:14:08,000
sharepoint

349
00:14:08,000 --> 00:14:10,639
exchange access from the outside without

350
00:14:10,639 --> 00:14:12,399
actually exposing your internal

351
00:14:12,399 --> 00:14:15,279
now the vulnerability that we identified

352
00:14:15,279 --> 00:14:17,120
was identified by preempt which

353
00:14:17,120 --> 00:14:20,399
allows an attacker to perform excessive

354
00:14:20,399 --> 00:14:21,600
brute force attacks

355
00:14:21,600 --> 00:14:24,399
um without rate limiting and this also

356
00:14:24,399 --> 00:14:25,199
circumvents

357
00:14:25,199 --> 00:14:28,560
these uh ex the extranet lockout policy

358
00:14:28,560 --> 00:14:31,199
which just does not is not applied for a

359
00:14:31,199 --> 00:14:32,000
wia

360
00:14:32,000 --> 00:14:34,560
iwa authentication request so

361
00:14:34,560 --> 00:14:35,920
essentially

362
00:14:35,920 --> 00:14:38,320
we have an unlimited amount of attempts

363
00:14:38,320 --> 00:14:40,480
to authenticate against

364
00:14:40,480 --> 00:14:43,519
um you know a list of known users so

365
00:14:43,519 --> 00:14:46,000
we could do this by enumerating uh an

366
00:14:46,000 --> 00:14:47,920
organization's uh

367
00:14:47,920 --> 00:14:49,440
you know naming structure based on

368
00:14:49,440 --> 00:14:51,040
emails so on and so forth

369
00:14:51,040 --> 00:14:52,800
but what we have now is the ability to

370
00:14:52,800 --> 00:14:54,480
guess repetitively over and over and

371
00:14:54,480 --> 00:14:55,120
over again

372
00:14:55,120 --> 00:14:58,079
without ever locking out an account uh

373
00:14:58,079 --> 00:14:58,800
so

374
00:14:58,800 --> 00:15:01,680
time is time is our friend here and um

375
00:15:01,680 --> 00:15:02,320
you know

376
00:15:02,320 --> 00:15:03,920
what we eventually do is we have a set

377
00:15:03,920 --> 00:15:05,519
of valve credentials which

378
00:15:05,519 --> 00:15:07,519
allows us to pivot to the north to the

379
00:15:07,519 --> 00:15:08,720
organization

380
00:15:08,720 --> 00:15:12,079
um now danny

381
00:15:12,079 --> 00:15:14,560
do you want to uh demonstrate quickly

382
00:15:14,560 --> 00:15:15,440
how we could

383
00:15:15,440 --> 00:15:18,959
prevent something like this yes so um

384
00:15:18,959 --> 00:15:22,000
to test this out we just spun up a

385
00:15:22,000 --> 00:15:25,680
play an nginx server um and did a proxy

386
00:15:25,680 --> 00:15:26,880
bypass

387
00:15:26,880 --> 00:15:28,800
and with the built-in module for raid

388
00:15:28,800 --> 00:15:30,079
limiting we

389
00:15:30,079 --> 00:15:33,199
limit the rate to 10 requests per second

390
00:15:33,199 --> 00:15:36,959
um it's based on ip addresses and

391
00:15:36,959 --> 00:15:40,240
the tool that mo used to test it just

392
00:15:40,240 --> 00:15:42,160
it wasn't plausible to do it once it was

393
00:15:42,160 --> 00:15:43,600
limited so

394
00:15:43,600 --> 00:15:45,199
we just added another layer of raid

395
00:15:45,199 --> 00:15:46,800
limiting with

396
00:15:46,800 --> 00:15:50,320
about five lines of code

397
00:15:50,320 --> 00:15:55,839
so we thought it was a great success

398
00:15:56,800 --> 00:15:59,680
so now that we've pivoted to the

399
00:15:59,680 --> 00:16:00,639
organization

400
00:16:00,639 --> 00:16:02,800
let's say we you know leverage citrix or

401
00:16:02,800 --> 00:16:04,079
vpn

402
00:16:04,079 --> 00:16:06,320
access we've uh logged in and we're now

403
00:16:06,320 --> 00:16:08,240
in the organization's internal

404
00:16:08,240 --> 00:16:10,399
network and we're going to basically run

405
00:16:10,399 --> 00:16:12,399
over some some quick

406
00:16:12,399 --> 00:16:15,759
opponents on how we can get da very very

407
00:16:15,759 --> 00:16:16,240
quickly

408
00:16:16,240 --> 00:16:19,519
highly effective fashion without even

409
00:16:19,519 --> 00:16:22,079
using any critical vulnerabilities

410
00:16:22,079 --> 00:16:24,240
and you know i've said it before and

411
00:16:24,240 --> 00:16:25,759
i'll say it again your vulnerability

412
00:16:25,759 --> 00:16:27,279
scanner is lying to you

413
00:16:27,279 --> 00:16:30,480
we're going to leverage um information

414
00:16:30,480 --> 00:16:33,600
low and medium filing findings only

415
00:16:33,600 --> 00:16:35,759
in our different attack scenarios to

416
00:16:35,759 --> 00:16:37,440
demonstrate how we can compromise an

417
00:16:37,440 --> 00:16:38,480
organization

418
00:16:38,480 --> 00:16:41,519
without any critical or high uh bugs

419
00:16:41,519 --> 00:16:44,880
uh powershell was dead but um

420
00:16:44,880 --> 00:16:46,800
is it really though because we've had a

421
00:16:46,800 --> 00:16:48,480
current uh currently we've had some bit

422
00:16:48,480 --> 00:16:50,160
of a resurrection going on

423
00:16:50,160 --> 00:16:52,480
um empire is being brought back and

424
00:16:52,480 --> 00:16:53,600
there's different ways of

425
00:16:53,600 --> 00:16:56,399
executing powershell without powershell

426
00:16:56,399 --> 00:16:57,920
and you know we're going to leverage nc

427
00:16:57,920 --> 00:17:00,000
bypasses

428
00:17:00,000 --> 00:17:01,680
in this attack scenario we're going to

429
00:17:01,680 --> 00:17:03,759
use net

430
00:17:03,759 --> 00:17:05,839
because that's the fresh hotness you

431
00:17:05,839 --> 00:17:07,520
could also use install shield

432
00:17:07,520 --> 00:17:09,439
um you know we're going to discuss

433
00:17:09,439 --> 00:17:11,199
undetectable payloads

434
00:17:11,199 --> 00:17:14,959
c2s and c3s how to bypass ntlm relay

435
00:17:14,959 --> 00:17:16,799
mitigations

436
00:17:16,799 --> 00:17:18,480
no shells are necessary but it's way

437
00:17:18,480 --> 00:17:20,400
more fun

438
00:17:20,400 --> 00:17:22,880
so uh we're hopped on on the internal uh

439
00:17:22,880 --> 00:17:24,559
we're going to run a quick scan

440
00:17:24,559 --> 00:17:26,799
um you know we're it's we're going to be

441
00:17:26,799 --> 00:17:28,240
looking for null sessions

442
00:17:28,240 --> 00:17:30,320
uh null sessions are important for us

443
00:17:30,320 --> 00:17:32,240
because uh it's typically

444
00:17:32,240 --> 00:17:35,520
a very very simple attack vector for us

445
00:17:35,520 --> 00:17:35,919
we can

446
00:17:35,919 --> 00:17:38,559
enumerate um information about an

447
00:17:38,559 --> 00:17:39,919
organization we can enumerate the

448
00:17:39,919 --> 00:17:41,039
password policy

449
00:17:41,039 --> 00:17:42,720
all the user accounts within it within

450
00:17:42,720 --> 00:17:44,240
an organization

451
00:17:44,240 --> 00:17:46,559
and this will allow us to you know

452
00:17:46,559 --> 00:17:48,720
identify who we want to target further

453
00:17:48,720 --> 00:17:51,120
um even perform additional password

454
00:17:51,120 --> 00:17:52,000
guessing attacks

455
00:17:52,000 --> 00:17:55,600
to to gain um you know higher privileged

456
00:17:55,600 --> 00:17:56,559
accounts

457
00:17:56,559 --> 00:17:58,000
um we're going to look for systems with

458
00:17:58,000 --> 00:18:00,000
smb sign and disabled now this

459
00:18:00,000 --> 00:18:03,039
is uh relay attacks are are

460
00:18:03,039 --> 00:18:05,520
you know our fresh vulnerability that's

461
00:18:05,520 --> 00:18:07,440
only been around for 12 years or so

462
00:18:07,440 --> 00:18:10,559
so uh it's something that i still see

463
00:18:10,559 --> 00:18:13,520
all the time organizations do not enable

464
00:18:13,520 --> 00:18:15,440
us to do signing

465
00:18:15,440 --> 00:18:18,400
it's it's a it's a medium risk finding

466
00:18:18,400 --> 00:18:19,440
in the majority of vulnerability

467
00:18:19,440 --> 00:18:20,320
scanners but

468
00:18:20,320 --> 00:18:23,280
it's a critical the impact is very

469
00:18:23,280 --> 00:18:24,640
critical when exploited because it does

470
00:18:24,640 --> 00:18:25,039
give

471
00:18:25,039 --> 00:18:27,440
the attacker system privileges we're

472
00:18:27,440 --> 00:18:29,039
going to look for anonymous shares

473
00:18:29,039 --> 00:18:31,440
anonymous shares are useful because uh

474
00:18:31,440 --> 00:18:32,720
besides grabbing

475
00:18:32,720 --> 00:18:34,960
you know what's on those shares we can

476
00:18:34,960 --> 00:18:36,000
see um

477
00:18:36,000 --> 00:18:38,400
we can upload malicious scf files on

478
00:18:38,400 --> 00:18:39,440
there

479
00:18:39,440 --> 00:18:41,760
and you can come couple that with lmr

480
00:18:41,760 --> 00:18:43,039
nbt poisoning

481
00:18:43,039 --> 00:18:46,160
um dns-64 was anything to perform

482
00:18:46,160 --> 00:18:48,320
uh attacks where you can actually obtain

483
00:18:48,320 --> 00:18:49,840
a user's

484
00:18:49,840 --> 00:18:52,720
net ntlm hatch which then you can crack

485
00:18:52,720 --> 00:18:54,880
for additional ownage

486
00:18:54,880 --> 00:18:56,480
we're not going to do any rc's because

487
00:18:56,480 --> 00:18:59,120
that's too easy

488
00:18:59,120 --> 00:19:01,919
and our scan does look for ldap so a

489
00:19:01,919 --> 00:19:04,160
simple enough uh scan here

490
00:19:04,160 --> 00:19:06,160
you know very one one simple one liner

491
00:19:06,160 --> 00:19:08,000
here we're looking at we're evaluating

492
00:19:08,000 --> 00:19:10,080
all the above attack scenarios that we

493
00:19:10,080 --> 00:19:11,840
just mentioned with exception

494
00:19:11,840 --> 00:19:15,039
exception of s b r c s um very very

495
00:19:15,039 --> 00:19:16,080
simple

496
00:19:16,080 --> 00:19:18,480
looking at only two ports and it's going

497
00:19:18,480 --> 00:19:20,000
to give us a substantial amount of

498
00:19:20,000 --> 00:19:20,960
information to

499
00:19:20,960 --> 00:19:24,000
continue our next leg of our attack so

500
00:19:24,000 --> 00:19:26,960
a quick diagram of uh and you know relay

501
00:19:26,960 --> 00:19:27,679
attacks

502
00:19:27,679 --> 00:19:30,000
if you know if you like looking at

503
00:19:30,000 --> 00:19:30,880
drawings

504
00:19:30,880 --> 00:19:34,880
we're going to leverage in packets

505
00:19:35,440 --> 00:19:38,320
and the successful related host with smb

506
00:19:38,320 --> 00:19:38,880
sign is

507
00:19:38,880 --> 00:19:42,000
disabled is going to result in remote

508
00:19:42,000 --> 00:19:43,200
code execution

509
00:19:43,200 --> 00:19:45,840
with system private privileges um you

510
00:19:45,840 --> 00:19:46,880
could you know

511
00:19:46,880 --> 00:19:50,720
couple ntlm relay x with um

512
00:19:50,720 --> 00:19:53,840
secrets dump to dump hashes uh there's

513
00:19:53,840 --> 00:19:54,880
there's really

514
00:19:54,880 --> 00:19:56,799
uh you can assign you can provide a

515
00:19:56,799 --> 00:19:59,360
one-liner to to perform your own command

516
00:19:59,360 --> 00:20:00,880
execution you can add a local admin

517
00:20:00,880 --> 00:20:02,400
account really the world is

518
00:20:02,400 --> 00:20:06,080
your oyster um you could fire off many

519
00:20:06,080 --> 00:20:06,559
cats

520
00:20:06,559 --> 00:20:09,039
um really just uh whatever your it's up

521
00:20:09,039 --> 00:20:10,400
to your creativity

522
00:20:10,400 --> 00:20:12,400
um so we're going to enable wpad

523
00:20:12,400 --> 00:20:14,080
spoofing and authentication

524
00:20:14,080 --> 00:20:15,760
requests and related targets with sd

525
00:20:15,760 --> 00:20:17,200
science disabled now there are

526
00:20:17,200 --> 00:20:18,400
mitigations in place

527
00:20:18,400 --> 00:20:20,480
uh let's say that there's s p signing

528
00:20:20,480 --> 00:20:21,919
enabled or epa

529
00:20:21,919 --> 00:20:24,880
well the last two tries that microsoft

530
00:20:24,880 --> 00:20:25,760
has had uh

531
00:20:25,760 --> 00:20:28,240
that they've attempted to mitigate this

532
00:20:28,240 --> 00:20:30,240
um they've actually implemented broken

533
00:20:30,240 --> 00:20:32,159
mitigations they were circumvented by

534
00:20:32,159 --> 00:20:33,280
the pram team

535
00:20:33,280 --> 00:20:36,559
um cv 2019-1040

536
00:20:36,559 --> 00:20:38,880
allows bypassing of uh the mess the mic

537
00:20:38,880 --> 00:20:39,760
message

538
00:20:39,760 --> 00:20:41,600
uh integrity code and ntlm

539
00:20:41,600 --> 00:20:42,799
authentication

540
00:20:42,799 --> 00:20:45,600
uh firing off anti-unreal relay x with

541
00:20:45,600 --> 00:20:46,640
remove nick

542
00:20:46,640 --> 00:20:50,080
will still exploit a system who is miss

543
00:20:50,080 --> 00:20:53,360
which is missing uh cbe 2019-1040

544
00:20:53,360 --> 00:20:56,320
um so even if the system has system uh

545
00:20:56,320 --> 00:20:57,760
that hasn't been signing

546
00:20:57,760 --> 00:21:00,320
enabled um and it does not have this

547
00:21:00,320 --> 00:21:02,960
patch then you can still circumvent the

548
00:21:02,960 --> 00:21:06,480
the mitigation that's that's in place

549
00:21:06,480 --> 00:21:09,280
so uh this is still a very very relevant

550
00:21:09,280 --> 00:21:10,320
attack vector

551
00:21:10,320 --> 00:21:13,360
highly effective it allows for

552
00:21:13,360 --> 00:21:14,960
you know instant escalation and domain

553
00:21:14,960 --> 00:21:17,120
admin if you were to couple it with a

554
00:21:17,120 --> 00:21:21,120
private change attack so

555
00:21:21,120 --> 00:21:23,120
you know relaying snb to ldap is another

556
00:21:23,120 --> 00:21:24,559
attack vector

557
00:21:24,559 --> 00:21:26,799
you're effectively modifying ntlm

558
00:21:26,799 --> 00:21:28,640
authentication packets without

559
00:21:28,640 --> 00:21:30,400
invalidating authentication these are

560
00:21:30,400 --> 00:21:32,159
this is a for an environment where

561
00:21:32,159 --> 00:21:35,200
once again cv 2019-1040 is missing

562
00:21:35,200 --> 00:21:37,120
um and it allows an attacker to

563
00:21:37,120 --> 00:21:38,640
basically remove the flags

564
00:21:38,640 --> 00:21:40,960
which would prevent relaying from cross

565
00:21:40,960 --> 00:21:42,080
protocol

566
00:21:42,080 --> 00:21:43,919
so here we're looking at relaying from

567
00:21:43,919 --> 00:21:45,200
smb to ldap which

568
00:21:45,200 --> 00:21:46,880
typically should not be able to should

569
00:21:46,880 --> 00:21:48,799
not be possible but due to this

570
00:21:48,799 --> 00:21:52,240
um the the flaw in the in the in this uh

571
00:21:52,240 --> 00:21:53,919
scenario it allows us to perform that

572
00:21:53,919 --> 00:21:55,360
type of attack um

573
00:21:55,360 --> 00:21:57,120
now we were to if we were to leverage

574
00:21:57,120 --> 00:21:59,200
these full service bug or printer bug

575
00:21:59,200 --> 00:22:01,280
you can course any windows system

576
00:22:01,280 --> 00:22:02,480
authenticate to

577
00:22:02,480 --> 00:22:05,360
other machines the uh um the rpc

578
00:22:05,360 --> 00:22:06,320
interface

579
00:22:06,320 --> 00:22:08,640
and possible possibly other protocols

580
00:22:08,640 --> 00:22:10,000
you know if anyone wants to

581
00:22:10,000 --> 00:22:13,600
give it a shot um so as of right now we

582
00:22:13,600 --> 00:22:15,440
know of two working impact scenarios

583
00:22:15,440 --> 00:22:18,559
um using any active directory account we

584
00:22:18,559 --> 00:22:20,960
can connect to the smv view exchange

585
00:22:20,960 --> 00:22:23,200
and uh trigger the swivel service bug

586
00:22:23,200 --> 00:22:24,960
and exchange server connects back to

587
00:22:24,960 --> 00:22:26,880
attacker box by smb

588
00:22:26,880 --> 00:22:30,159
and that can be relayed to ldap um and

589
00:22:30,159 --> 00:22:32,000
you've got yourself a nice little kill

590
00:22:32,000 --> 00:22:34,320
chain um and we're using relay

591
00:22:34,320 --> 00:22:37,280
um of that authentic we're using the

592
00:22:37,280 --> 00:22:37,840
relay

593
00:22:37,840 --> 00:22:40,240
ldap authentication to grant grantbc dc

594
00:22:40,240 --> 00:22:41,520
sync to dump

595
00:22:41,520 --> 00:22:45,039
all the password hashes in ap um

596
00:22:45,039 --> 00:22:47,440
there's also relaying kerberos

597
00:22:47,440 --> 00:22:48,960
delegation so we're

598
00:22:48,960 --> 00:22:51,280
relaying ldap over tls to create a new

599
00:22:51,280 --> 00:22:52,480
machine account

600
00:22:52,480 --> 00:22:54,799
on the system and we're leveraging the

601
00:22:54,799 --> 00:22:56,000
same printer bug script

602
00:22:56,000 --> 00:22:58,960
um against a secondary domain controller

603
00:22:58,960 --> 00:23:00,720
and that results in the relay connection

604
00:23:00,720 --> 00:23:02,559
creating computer count

605
00:23:02,559 --> 00:23:04,640
and when we create that computer account

606
00:23:04,640 --> 00:23:06,159
we can use it to

607
00:23:06,159 --> 00:23:08,240
impersonate a da account and then we use

608
00:23:08,240 --> 00:23:09,840
that impersonating ticket to run

609
00:23:09,840 --> 00:23:12,320
secret dumps or whatever you know

610
00:23:12,320 --> 00:23:14,960
hotness that you want against that dc

611
00:23:14,960 --> 00:23:17,360
so uh you know one of my favorite attack

612
00:23:17,360 --> 00:23:18,159
scenarios

613
00:23:18,159 --> 00:23:21,200
um which is you know

614
00:23:21,200 --> 00:23:23,039
it's not very it's not stealth at all

615
00:23:23,039 --> 00:23:25,280
that's highly effective you just want to

616
00:23:25,280 --> 00:23:27,760
kick down doors um you hop into the

617
00:23:27,760 --> 00:23:28,559
networking

618
00:23:28,559 --> 00:23:31,039
you know you're running responder in mit

619
00:23:31,039 --> 00:23:33,039
m6 mit m6 is

620
00:23:33,039 --> 00:23:36,960
um running dns 6 poisoning

621
00:23:36,960 --> 00:23:40,080
on ipv6 and which is enabled

622
00:23:40,080 --> 00:23:42,559
since windows 7 and up and typically not

623
00:23:42,559 --> 00:23:44,400
monitored by the majority of security

624
00:23:44,400 --> 00:23:45,600
products out there

625
00:23:45,600 --> 00:23:48,559
so very effective although in some

626
00:23:48,559 --> 00:23:49,919
environments it may cause network

627
00:23:49,919 --> 00:23:50,720
outages so

628
00:23:50,720 --> 00:23:53,760
use at your own risk um and

629
00:23:53,760 --> 00:23:55,919
effectively we're using these two tools

630
00:23:55,919 --> 00:23:57,679
to perform our poisoning attacks couple

631
00:23:57,679 --> 00:23:58,159
that with

632
00:23:58,159 --> 00:24:01,520
ntlm relay x um i'm using solid trinity

633
00:24:01,520 --> 00:24:03,520
but you can insert your favorite c2 or

634
00:24:03,520 --> 00:24:05,679
c3

635
00:24:05,679 --> 00:24:08,400
there's a new one that i've been messing

636
00:24:08,400 --> 00:24:09,840
with the last few days called grat

637
00:24:09,840 --> 00:24:12,080
and it's got you know the latest and

638
00:24:12,080 --> 00:24:12,960
greatest in

639
00:24:12,960 --> 00:24:16,400
in evasion techniques so

640
00:24:16,400 --> 00:24:18,640
you know if anyone has the time hop on

641
00:24:18,640 --> 00:24:20,240
the github and take a look at it

642
00:24:20,240 --> 00:24:22,799
um so with here in this use case

643
00:24:22,799 --> 00:24:24,559
scenario we're using sign of trinity

644
00:24:24,559 --> 00:24:27,279
and we're creating a https listener um

645
00:24:27,279 --> 00:24:27,679
with

646
00:24:27,679 --> 00:24:31,279
ms build with ms build stager

647
00:24:31,279 --> 00:24:36,159
now this is the

648
00:24:38,159 --> 00:24:40,480
that's mo when he starts popping charles

649
00:24:40,480 --> 00:24:47,840
that's right

650
00:24:51,440 --> 00:24:55,200
so disco is good so we're

651
00:24:55,200 --> 00:24:56,799
you know is a quick screenshot of us

652
00:24:56,799 --> 00:24:58,880
setting up our listener

653
00:24:58,880 --> 00:25:02,240
now this is going to uh

654
00:25:02,240 --> 00:25:05,279
basically create the the stager that

655
00:25:05,279 --> 00:25:06,000
we're going to

656
00:25:06,000 --> 00:25:09,760
use to to deploy it's a very simple

657
00:25:09,760 --> 00:25:12,720
attack um scenario and we're using ms

658
00:25:12,720 --> 00:25:13,279
build

659
00:25:13,279 --> 00:25:16,080
this is compiled on the on the on the

660
00:25:16,080 --> 00:25:17,600
remote system

661
00:25:17,600 --> 00:25:19,919
and effectively what happens is when the

662
00:25:19,919 --> 00:25:21,039
attacker

663
00:25:21,039 --> 00:25:23,440
performs a relay attack you're giving

664
00:25:23,440 --> 00:25:25,520
you're instructing the system to

665
00:25:25,520 --> 00:25:27,600
the the vulnerable system to download

666
00:25:27,600 --> 00:25:29,039
your stager

667
00:25:29,039 --> 00:25:30,960
and here's an example of our of our

668
00:25:30,960 --> 00:25:32,080
liner here

669
00:25:32,080 --> 00:25:35,120
so um you know we're we're instructing

670
00:25:35,120 --> 00:25:35,440
the

671
00:25:35,440 --> 00:25:37,840
remote system to connect back uh to our

672
00:25:37,840 --> 00:25:39,679
attacker system via smd

673
00:25:39,679 --> 00:25:42,400
download our stage compile it with ms

674
00:25:42,400 --> 00:25:42,960
build

675
00:25:42,960 --> 00:25:46,799
and uh execute it in memory and um

676
00:25:46,799 --> 00:25:48,799
it's you know this is going to happen

677
00:25:48,799 --> 00:25:50,400
this this instruction

678
00:25:50,400 --> 00:25:51,520
is going to be run with system

679
00:25:51,520 --> 00:25:53,520
privileges so now we're looking at

680
00:25:53,520 --> 00:25:56,000
you know an entire network getting

681
00:25:56,000 --> 00:25:56,799
compromised

682
00:25:56,799 --> 00:26:00,240
uh systems with smb signing disabled um

683
00:26:00,240 --> 00:26:03,360
all with reverse shells uh with system

684
00:26:03,360 --> 00:26:04,480
privileges just flying back to your

685
00:26:04,480 --> 00:26:05,279
system

686
00:26:05,279 --> 00:26:08,240
it's uh it's like christmas so um you

687
00:26:08,240 --> 00:26:08,960
know there's

688
00:26:08,960 --> 00:26:10,480
some uh screenshots of this attack

689
00:26:10,480 --> 00:26:12,159
scenario happening and

690
00:26:12,159 --> 00:26:14,400
in the event that that uh you know the

691
00:26:14,400 --> 00:26:15,279
shell is not

692
00:26:15,279 --> 00:26:17,360
um if we don't get a shell at the very

693
00:26:17,360 --> 00:26:18,400
least we're getting the net

694
00:26:18,400 --> 00:26:21,520
ntlm hash of the of the uh

695
00:26:21,520 --> 00:26:23,520
the system and this allows us to crack

696
00:26:23,520 --> 00:26:24,880
that hash as well

697
00:26:24,880 --> 00:26:28,080
um and here's a screenshot of us just

698
00:26:28,080 --> 00:26:30,720
raining sessions uh one after another

699
00:26:30,720 --> 00:26:31,440
just

700
00:26:31,440 --> 00:26:33,440
tons and tons of sessions it goes on

701
00:26:33,440 --> 00:26:34,880
forever and ever

702
00:26:34,880 --> 00:26:38,720
and that's party time for us

703
00:26:38,720 --> 00:26:41,279
so we've got a bunch of shells now um

704
00:26:41,279 --> 00:26:42,320
typically you only need

705
00:26:42,320 --> 00:26:46,159
one but uh you know sound training can

706
00:26:46,159 --> 00:26:48,880
can it's kind of uh one of the one of

707
00:26:48,880 --> 00:26:50,640
the reasons why i like about it is

708
00:26:50,640 --> 00:26:53,279
marcelo he made it so that you can

709
00:26:53,279 --> 00:26:55,039
really highly customize it it's kind of

710
00:26:55,039 --> 00:26:56,799
like bring your own interpreter

711
00:26:56,799 --> 00:27:01,120
um style um so what we've done is we've

712
00:27:01,120 --> 00:27:03,360
executed in this use case scenario where

713
00:27:03,360 --> 00:27:05,200
we're running an amc bypassed

714
00:27:05,200 --> 00:27:09,440
um version of meme and cats

715
00:27:09,440 --> 00:27:12,480
that uh pauses amc um

716
00:27:12,480 --> 00:27:14,640
and and then it actually executes

717
00:27:14,640 --> 00:27:16,320
meaning cats

718
00:27:16,320 --> 00:27:19,120
and then once the credentials have been

719
00:27:19,120 --> 00:27:20,159
pulled back

720
00:27:20,159 --> 00:27:23,440
then you can um you know celebrate and

721
00:27:23,440 --> 00:27:25,200
then it restores um

722
00:27:25,200 --> 00:27:27,919
amc uh and you know there's different

723
00:27:27,919 --> 00:27:29,440
types of modules that you could also

724
00:27:29,440 --> 00:27:29,919
leverage

725
00:27:29,919 --> 00:27:32,480
there's el sassi there's different um

726
00:27:32,480 --> 00:27:34,080
there's donut so there's different

727
00:27:34,080 --> 00:27:36,240
methods uh proc dump if you want to you

728
00:27:36,240 --> 00:27:37,360
know

729
00:27:37,360 --> 00:27:40,720
go a little bit uh a bit more stealth

730
00:27:40,720 --> 00:27:41,120
but

731
00:27:41,120 --> 00:27:42,559
there's many different methods of

732
00:27:42,559 --> 00:27:44,399
dumping all sas and getting clear text

733
00:27:44,399 --> 00:27:45,279
credentials

734
00:27:45,279 --> 00:27:47,760
so uh you know we've got many cats here

735
00:27:47,760 --> 00:27:48,559
um

736
00:27:48,559 --> 00:27:51,679
circum you know bypassing amc and

737
00:27:51,679 --> 00:27:53,279
obtaining credentials

738
00:27:53,279 --> 00:28:03,840
and um we're kicking down doors

739
00:28:11,279 --> 00:28:13,679
all right so it's time to talk a bit

740
00:28:13,679 --> 00:28:16,159
about the the blue side

741
00:28:16,159 --> 00:28:19,200
so um like i was saying before to

742
00:28:19,200 --> 00:28:22,399
actually catch all those um things like

743
00:28:22,399 --> 00:28:25,440
lambda layers or addition of new lambda

744
00:28:25,440 --> 00:28:27,440
layers or changing infrastructure

745
00:28:27,440 --> 00:28:30,720
in my opinion having um as code is one

746
00:28:30,720 --> 00:28:32,559
of the most important things

747
00:28:32,559 --> 00:28:35,600
you can have i am a fan of hashicorp's

748
00:28:35,600 --> 00:28:36,799
terraform

749
00:28:36,799 --> 00:28:40,159
it's cloud agnostic it incorporates so

750
00:28:40,159 --> 00:28:41,120
many services

751
00:28:41,120 --> 00:28:44,960
together and for people who like aws

752
00:28:44,960 --> 00:28:46,720
and want to use the aws negative things

753
00:28:46,720 --> 00:28:48,960
you can use abs platformation

754
00:28:48,960 --> 00:28:52,240
from my personal experience hashicorp

755
00:28:52,240 --> 00:28:55,840
on terraform it has a huge library of

756
00:28:55,840 --> 00:28:56,640
open source

757
00:28:56,640 --> 00:28:59,440
modules for it and when a new lbs

758
00:28:59,440 --> 00:29:01,200
service comes out or some changes in the

759
00:29:01,200 --> 00:29:02,240
service

760
00:29:02,240 --> 00:29:05,760
come out usually the hashicorp modules

761
00:29:05,760 --> 00:29:08,480
get updated faster to include that new

762
00:29:08,480 --> 00:29:10,080
service or those new features in the

763
00:29:10,080 --> 00:29:10,960
service

764
00:29:10,960 --> 00:29:14,320
then aws is cloud formation

765
00:29:14,320 --> 00:29:16,720
um immutable infrastructure so like we

766
00:29:16,720 --> 00:29:17,919
have our

767
00:29:17,919 --> 00:29:20,399
initial success code having immutable

768
00:29:20,399 --> 00:29:22,000
infrastructure in terms of

769
00:29:22,000 --> 00:29:24,880
your machine images is very important i

770
00:29:24,880 --> 00:29:26,399
am

771
00:29:26,399 --> 00:29:29,520
i am not against patching

772
00:29:29,520 --> 00:29:32,720
as a let's say the first mitigation

773
00:29:32,720 --> 00:29:34,960
but i do like to have all the machines

774
00:29:34,960 --> 00:29:36,159
on the same

775
00:29:36,159 --> 00:29:39,039
level same library levels so making

776
00:29:39,039 --> 00:29:41,200
baking amis with packer which is also a

777
00:29:41,200 --> 00:29:43,200
hashicorp tool

778
00:29:43,200 --> 00:29:46,559
which let you configure a json

779
00:29:46,559 --> 00:29:49,440
file that will basically set up a whole

780
00:29:49,440 --> 00:29:50,320
um

781
00:29:50,320 --> 00:29:52,080
for here it's amazon so it's a amazon

782
00:29:52,080 --> 00:29:54,080
machine image and then you deploy

783
00:29:54,080 --> 00:29:56,080
to all the machines you have running

784
00:29:56,080 --> 00:29:58,559
that way you're all on the same page

785
00:29:58,559 --> 00:30:00,320
all the machines are on the same page

786
00:30:00,320 --> 00:30:03,360
and after you do the first patching

787
00:30:03,360 --> 00:30:06,399
of making a new ami with packer

788
00:30:06,399 --> 00:30:08,480
you save you have packer the packer

789
00:30:08,480 --> 00:30:09,919
files you have them in version control

790
00:30:09,919 --> 00:30:11,520
so you can see change in them as well

791
00:30:11,520 --> 00:30:13,440
especially their breaking changes and

792
00:30:13,440 --> 00:30:16,960
just have everything on the same page

793
00:30:16,960 --> 00:30:20,559
um second thing something that i've seen

794
00:30:20,559 --> 00:30:21,440
a lot

795
00:30:21,440 --> 00:30:24,480
that cloud shell is being used so cloud

796
00:30:24,480 --> 00:30:25,279
shows

797
00:30:25,279 --> 00:30:27,039
is amazing it's an audit trail for

798
00:30:27,039 --> 00:30:29,679
everything happening in your aws account

799
00:30:29,679 --> 00:30:34,080
but even if you have integrity um

800
00:30:34,080 --> 00:30:37,200
flag turned on if i get an

801
00:30:37,200 --> 00:30:39,360
admin or root account on your aws

802
00:30:39,360 --> 00:30:41,279
account i can still delete those log

803
00:30:41,279 --> 00:30:42,399
files

804
00:30:42,399 --> 00:30:45,440
um which is something that you would not

805
00:30:45,440 --> 00:30:48,960
want the ability to do so there's a

806
00:30:48,960 --> 00:30:50,320
one-way sync

807
00:30:50,320 --> 00:30:53,760
which you can have along the function um

808
00:30:53,760 --> 00:30:56,880
basically take the cloud trail

809
00:30:56,880 --> 00:30:59,200
from all those buckets and you give it a

810
00:30:59,200 --> 00:30:59,919
bucket

811
00:30:59,919 --> 00:31:03,279
in um in a separate account

812
00:31:03,279 --> 00:31:06,559
where it's a write only permission

813
00:31:06,559 --> 00:31:09,840
so basically your adolescent account can

814
00:31:09,840 --> 00:31:10,159
only

815
00:31:10,159 --> 00:31:12,960
write there but it cannot change it

816
00:31:12,960 --> 00:31:15,039
cannot delete any files that means once

817
00:31:15,039 --> 00:31:17,279
it wrote to that external bucket in your

818
00:31:17,279 --> 00:31:19,120
other aws account

819
00:31:19,120 --> 00:31:21,679
even if someone gets a route or

820
00:31:21,679 --> 00:31:23,360
permission on your

821
00:31:23,360 --> 00:31:24,799
in one of your airbus accounts you

822
00:31:24,799 --> 00:31:26,399
cannot delete it from that shared

823
00:31:26,399 --> 00:31:27,760
account

824
00:31:27,760 --> 00:31:30,000
that's something that's very strong i

825
00:31:30,000 --> 00:31:32,000
highly recommend doing that and then

826
00:31:32,000 --> 00:31:35,600
from there you can push it or pull from

827
00:31:35,600 --> 00:31:38,080
your sim system whether it's

828
00:31:38,080 --> 00:31:40,640
an elk based system or splunk or

829
00:31:40,640 --> 00:31:43,120
anything else

830
00:31:43,120 --> 00:31:46,240
it's like no secret management so like i

831
00:31:46,240 --> 00:31:48,559
showed with that pose-dress

832
00:31:48,559 --> 00:31:51,600
attack the thing is if i hard-code

833
00:31:51,600 --> 00:31:53,600
credentials or even if i pass them one

834
00:31:53,600 --> 00:31:54,159
time

835
00:31:54,159 --> 00:31:57,039
the moment the attacker drops them he's

836
00:31:57,039 --> 00:31:57,360
got

837
00:31:57,360 --> 00:32:00,080
credentials that live forever and he can

838
00:32:00,080 --> 00:32:00,960
do

839
00:32:00,960 --> 00:32:03,440
you can use them for four days so what

840
00:32:03,440 --> 00:32:04,240
you would want

841
00:32:04,240 --> 00:32:07,039
is a way to validate potentials first so

842
00:32:07,039 --> 00:32:08,880
yes you can do that manually

843
00:32:08,880 --> 00:32:10,640
but a better way would be to use

844
00:32:10,640 --> 00:32:12,799
something like hashicorp vault

845
00:32:12,799 --> 00:32:17,440
for secret management or aws ssm

846
00:32:17,440 --> 00:32:19,360
parameter store so that will give you

847
00:32:19,360 --> 00:32:20,640
granular control over

848
00:32:20,640 --> 00:32:22,480
credentials and it can automatically

849
00:32:22,480 --> 00:32:23,679
generate this is

850
00:32:23,679 --> 00:32:25,840
um hashicorp vault it can generate

851
00:32:25,840 --> 00:32:26,720
autolive

852
00:32:26,720 --> 00:32:29,120
database credentials so it manages it

853
00:32:29,120 --> 00:32:30,080
for you

854
00:32:30,080 --> 00:32:33,360
and very very very important is to

855
00:32:33,360 --> 00:32:35,039
follow the hard earning guide

856
00:32:35,039 --> 00:32:37,760
because especially something as

857
00:32:37,760 --> 00:32:39,679
important as your secret manager

858
00:32:39,679 --> 00:32:41,760
you want to have the highest level of

859
00:32:41,760 --> 00:32:43,600
security they're a very good hardening

860
00:32:43,600 --> 00:32:44,880
guide but i've seen

861
00:32:44,880 --> 00:32:47,120
production systems where they were on

862
00:32:47,120 --> 00:32:48,640
default and

863
00:32:48,640 --> 00:32:52,640
it does more harm than than good

864
00:32:52,640 --> 00:32:54,559
second of all if you do use a service

865
00:32:54,559 --> 00:32:56,720
mesh um especially within your versions

866
00:32:56,720 --> 00:32:57,679
of console and

867
00:32:57,679 --> 00:32:59,840
other servers meshes um some of the

868
00:32:59,840 --> 00:33:01,440
defaults have changed i think to

869
00:33:01,440 --> 00:33:03,919
to a better way but also follow the

870
00:33:03,919 --> 00:33:05,200
hardening guides

871
00:33:05,200 --> 00:33:08,399
manage your own um keys you can so you

872
00:33:08,399 --> 00:33:09,279
can

873
00:33:09,279 --> 00:33:11,600
combine consoled vault and that way

874
00:33:11,600 --> 00:33:13,360
vault will manage your keys

875
00:33:13,360 --> 00:33:15,440
and it can rotate your keys be for the

876
00:33:15,440 --> 00:33:17,279
inter service communication

877
00:33:17,279 --> 00:33:20,559
um and enforce tls of course and you can

878
00:33:20,559 --> 00:33:22,159
use the sidecars

879
00:33:22,159 --> 00:33:23,919
so basically you would have a psycho

880
00:33:23,919 --> 00:33:26,240
running on a docker container running in

881
00:33:26,240 --> 00:33:27,200
each system

882
00:33:27,200 --> 00:33:28,960
which your services would communicate

883
00:33:28,960 --> 00:33:30,399
with it and

884
00:33:30,399 --> 00:33:32,559
through that it will encrypt and decrypt

885
00:33:32,559 --> 00:33:34,480
the traffic going in and out

886
00:33:34,480 --> 00:33:38,000
um so that's just your endpoint inside

887
00:33:38,000 --> 00:33:39,840
that machine to communicate to other

888
00:33:39,840 --> 00:33:42,320
services

889
00:33:42,480 --> 00:33:45,440
of course have a waff

890
00:33:45,919 --> 00:33:48,399
either you can use aws swap with custom

891
00:33:48,399 --> 00:33:50,559
rules or manage the rules

892
00:33:50,559 --> 00:33:52,240
i like the open source solution like

893
00:33:52,240 --> 00:33:53,600
mozart or

894
00:33:53,600 --> 00:33:56,559
um naxi i i've been using naxi with

895
00:33:56,559 --> 00:33:57,840
nginx

896
00:33:57,840 --> 00:34:00,399
for a long time it's very good it has a

897
00:34:00,399 --> 00:34:03,760
great learning capability

898
00:34:03,760 --> 00:34:05,039
as you can see here in the in the

899
00:34:05,039 --> 00:34:07,600
diagram you can put it on learning mode

900
00:34:07,600 --> 00:34:11,359
and you run an elk stack

901
00:34:11,359 --> 00:34:13,918
and it will send the things there all

902
00:34:13,918 --> 00:34:15,359
the requests that

903
00:34:15,359 --> 00:34:18,000
would get blocked and they have a tool

904
00:34:18,000 --> 00:34:19,599
to generate rules from the request that

905
00:34:19,599 --> 00:34:22,720
you actually want to block

906
00:34:22,879 --> 00:34:24,639
utilize services the cloud providers

907
00:34:24,639 --> 00:34:26,159
give you guard duty

908
00:34:26,159 --> 00:34:28,079
is excellent for thread detection it

909
00:34:28,079 --> 00:34:29,918
does continuous monitoring

910
00:34:29,918 --> 00:34:33,280
set it up to work with cloudwatch alarms

911
00:34:33,280 --> 00:34:37,040
and with sns to send you notifications

912
00:34:37,040 --> 00:34:38,800
or if you're using ops genie

913
00:34:38,800 --> 00:34:41,839
victorops have those things constantly

914
00:34:41,839 --> 00:34:44,480
sent over um to you and alert you about

915
00:34:44,480 --> 00:34:45,119
that

916
00:34:45,119 --> 00:34:47,119
you can also add some automated actions

917
00:34:47,119 --> 00:34:49,040
you can utilize lambda layers

918
00:34:49,040 --> 00:34:51,040
so if guard duty detects a credential

919
00:34:51,040 --> 00:34:52,159
compromise

920
00:34:52,159 --> 00:34:54,159
you can have a lambda function listen to

921
00:34:54,159 --> 00:34:55,359
that alert

922
00:34:55,359 --> 00:34:58,800
or and invalidate those credentials

923
00:34:58,800 --> 00:35:00,560
and issue new credentials to that

924
00:35:00,560 --> 00:35:03,200
machine it's very powerful it's

925
00:35:03,200 --> 00:35:06,240
basically instant mitigation um

926
00:35:06,240 --> 00:35:08,400
also using inspector inspector is a

927
00:35:08,400 --> 00:35:09,839
great tool that will

928
00:35:09,839 --> 00:35:13,119
scan all your machines for

929
00:35:13,119 --> 00:35:15,359
os versions and it'll show you the

930
00:35:15,359 --> 00:35:18,240
latest cves for any tools you're using

931
00:35:18,240 --> 00:35:20,720
and it's great to keep everything

932
00:35:20,720 --> 00:35:21,839
updated

933
00:35:21,839 --> 00:35:23,920
and you can do it it will we can do a

934
00:35:23,920 --> 00:35:25,680
weekly stand daily scan

935
00:35:25,680 --> 00:35:28,839
and after you update your packer file

936
00:35:28,839 --> 00:35:30,560
with basically with the

937
00:35:30,560 --> 00:35:32,720
patches you can upload it again and do a

938
00:35:32,720 --> 00:35:34,160
rescan and see that

939
00:35:34,160 --> 00:35:37,839
everything went well so

940
00:35:37,839 --> 00:35:40,960
this is it for us um we would be

941
00:35:40,960 --> 00:35:42,720
happy to take some questions if anyone

942
00:35:42,720 --> 00:35:45,839
has any

