1
00:00:11,040 --> 00:00:13,040
aloha how's everyone doing today my name

2
00:00:13,040 --> 00:00:13,599
is jim

3
00:00:13,599 --> 00:00:15,360
going to be presented today we're going

4
00:00:15,360 --> 00:00:17,520
to talk about the oauth top 10.

5
00:00:17,520 --> 00:00:19,600
look i i got some things still a little

6
00:00:19,600 --> 00:00:20,880
bit busy right now but

7
00:00:20,880 --> 00:00:22,720
we do need to talk about the oauth top

8
00:00:22,720 --> 00:00:24,080
10. it's going to benefit you

9
00:00:24,080 --> 00:00:25,439
professionally it's going to benefit you

10
00:00:25,439 --> 00:00:26,480
intellectually

11
00:00:26,480 --> 00:00:28,560
it's something that we all need to know

12
00:00:28,560 --> 00:00:30,240
about so i'm going to talk about it even

13
00:00:30,240 --> 00:00:31,199
though

14
00:00:31,199 --> 00:00:33,200
i got a few things to do we're doing a

15
00:00:33,200 --> 00:00:35,200
fish we're going to do this efficiently

16
00:00:35,200 --> 00:00:36,399
we're going to do it efficiently let's

17
00:00:36,399 --> 00:00:38,480
do this so

18
00:00:38,480 --> 00:00:40,399
i'm going to share out my lovely screen

19
00:00:40,399 --> 00:00:41,520
here

20
00:00:41,520 --> 00:00:43,200
let's get this let's get this party

21
00:00:43,200 --> 00:00:44,960
started

22
00:00:44,960 --> 00:00:49,680
all right yeah the oauth top ten

23
00:00:49,680 --> 00:00:52,239
hi everybody

24
00:00:56,879 --> 00:00:59,520
it's game time os top 10 and more who

25
00:00:59,520 --> 00:01:01,280
the heck am i my name is jim aniko i'm

26
00:01:01,280 --> 00:01:02,399
going to be presenter

27
00:01:02,399 --> 00:01:04,319
from hawaii wrote a book on secure

28
00:01:04,319 --> 00:01:06,000
coding been a programmer most of my

29
00:01:06,000 --> 00:01:07,040
adult life

30
00:01:07,040 --> 00:01:08,720
we want to develop secure code i

31
00:01:08,720 --> 00:01:10,880
recommend to develop a secure code

32
00:01:10,880 --> 00:01:13,520
you abide by a standard the application

33
00:01:13,520 --> 00:01:15,200
security verification standard

34
00:01:15,200 --> 00:01:17,600
is a standard from owasp specific to web

35
00:01:17,600 --> 00:01:18,720
and api security

36
00:01:18,720 --> 00:01:20,640
we have the oash cheat sheet series it's

37
00:01:20,640 --> 00:01:23,439
the living encyclopedia of secure coding

38
00:01:23,439 --> 00:01:24,080
knowledge

39
00:01:24,080 --> 00:01:26,320
the point is we want to be informed

40
00:01:26,320 --> 00:01:28,000
about what security is from an

41
00:01:28,000 --> 00:01:29,439
engineering point of view

42
00:01:29,439 --> 00:01:31,920
before we write code pretty basic and

43
00:01:31,920 --> 00:01:33,680
the other big point of application

44
00:01:33,680 --> 00:01:35,119
security is testing

45
00:01:35,119 --> 00:01:37,920
these days we want to use automation to

46
00:01:37,920 --> 00:01:40,000
test our software for security on a

47
00:01:40,000 --> 00:01:41,200
continuous

48
00:01:41,200 --> 00:01:44,159
cyclic basis use usually using at least

49
00:01:44,159 --> 00:01:44,880
three tools

50
00:01:44,880 --> 00:01:47,360
static analysis dynamic analysis and

51
00:01:47,360 --> 00:01:49,280
software composition analysis three

52
00:01:49,280 --> 00:01:50,079
stools

53
00:01:50,079 --> 00:01:53,200
automated every day testing for security

54
00:01:53,200 --> 00:01:54,000
it's called

55
00:01:54,000 --> 00:01:56,000
it's devops the security aspect of

56
00:01:56,000 --> 00:01:57,360
devops also

57
00:01:57,360 --> 00:01:59,920
automation only covers so much be sure

58
00:01:59,920 --> 00:02:01,600
that you have penetration testing

59
00:02:01,600 --> 00:02:04,079
with an expert testing your system for

60
00:02:04,079 --> 00:02:05,280
security issues

61
00:02:05,280 --> 00:02:07,200
that automation doesn't do a great job

62
00:02:07,200 --> 00:02:09,360
at like access control or business logic

63
00:02:09,360 --> 00:02:10,000
or similar

64
00:02:10,000 --> 00:02:12,319
the us top 10 is an awareness list it's

65
00:02:12,319 --> 00:02:13,280
not a standard

66
00:02:13,280 --> 00:02:14,959
it's just meant to provide education

67
00:02:14,959 --> 00:02:16,480
like we're doing right now

68
00:02:16,480 --> 00:02:18,480
these are the oauths top 10 items

69
00:02:18,480 --> 00:02:20,480
injection authentication issues

70
00:02:20,480 --> 00:02:23,840
data protection xml issues like xxe

71
00:02:23,840 --> 00:02:25,599
access control configuration for

72
00:02:25,599 --> 00:02:27,599
security user interface security

73
00:02:27,599 --> 00:02:29,040
cross-site scripting

74
00:02:29,040 --> 00:02:31,280
insecure deserialization service site

75
00:02:31,280 --> 00:02:32,560
endpoints an injection

76
00:02:32,560 --> 00:02:34,879
command injection endpoint using

77
00:02:34,879 --> 00:02:36,959
third-party libraries which could be any

78
00:02:36,959 --> 00:02:38,080
other bug on this list

79
00:02:38,080 --> 00:02:40,879
and more and then a10 insufficient

80
00:02:40,879 --> 00:02:41,360
logging

81
00:02:41,360 --> 00:02:43,280
these are the the you know what this

82
00:02:43,280 --> 00:02:45,440
list is a little clunky it's not perfect

83
00:02:45,440 --> 00:02:46,080
but it's

84
00:02:46,080 --> 00:02:49,360
it facilitates a conversation like this

85
00:02:49,360 --> 00:02:52,040
and this this list was first uh built in

86
00:02:52,040 --> 00:02:53,599
2018

87
00:02:53,599 --> 00:02:55,599
these categories were new in this

88
00:02:55,599 --> 00:02:57,200
version of the os top 10

89
00:02:57,200 --> 00:02:58,959
and we're getting ready for another top

90
00:02:58,959 --> 00:03:01,120
10 in 2021 so

91
00:03:01,120 --> 00:03:03,040
this list will be refreshed in the next

92
00:03:03,040 --> 00:03:05,040
year let's start with injection

93
00:03:05,040 --> 00:03:07,360
i worry about sql injection sql

94
00:03:07,360 --> 00:03:09,360
injection happens when the attacker

95
00:03:09,360 --> 00:03:12,560
can add his or her own sequel into your

96
00:03:12,560 --> 00:03:13,599
application

97
00:03:13,599 --> 00:03:16,159
by by different input fields this has

98
00:03:16,159 --> 00:03:17,599
been a number one risk

99
00:03:17,599 --> 00:03:20,640
it's 1998 jeff forestall used nick's

100
00:03:20,640 --> 00:03:22,000
meeting christmas day

101
00:03:22,000 --> 00:03:24,000
coined the phrase sql injection and

102
00:03:24,000 --> 00:03:26,239
began this era of attacks

103
00:03:26,239 --> 00:03:27,760
and this is what the problem is from a

104
00:03:27,760 --> 00:03:30,159
code point of view string building

105
00:03:30,159 --> 00:03:33,040
with uh with sql creation it's that

106
00:03:33,040 --> 00:03:34,959
dynamic sequel we want to stop

107
00:03:34,959 --> 00:03:37,120
it and by the way validation's not going

108
00:03:37,120 --> 00:03:39,200
to save you this is a valid email

109
00:03:39,200 --> 00:03:39,680
address

110
00:03:39,680 --> 00:03:42,959
it's live and valid and any and yet

111
00:03:42,959 --> 00:03:44,959
it will cause sql injection this is the

112
00:03:44,959 --> 00:03:47,040
the universal truth attack or

113
00:03:47,040 --> 00:03:49,440
one does not equal manacode.com with a

114
00:03:49,440 --> 00:03:51,200
legal email address so go ahead and do

115
00:03:51,200 --> 00:03:52,319
good validation

116
00:03:52,319 --> 00:03:53,760
but you have to parameterize your

117
00:03:53,760 --> 00:03:55,760
queries you also want to configure your

118
00:03:55,760 --> 00:03:57,439
database properly as well

119
00:03:57,439 --> 00:03:59,200
that's the goal of stopping sql

120
00:03:59,200 --> 00:04:00,879
injections three defenses

121
00:04:00,879 --> 00:04:03,519
so uh parameterized queries exist in

122
00:04:03,519 --> 00:04:05,360
pearl even we have placeholders

123
00:04:05,360 --> 00:04:07,439
notice there's no string building we're

124
00:04:07,439 --> 00:04:09,840
binding data into the query it exists in

125
00:04:09,840 --> 00:04:12,239
java prepared state it's in dot net

126
00:04:12,239 --> 00:04:14,080
at the bottom there's the java prepared

127
00:04:14,080 --> 00:04:16,320
there's a net prepared statement in c

128
00:04:16,320 --> 00:04:19,199
sharp we have even object uh databases

129
00:04:19,199 --> 00:04:21,519
like hadoop there's a hql statement on

130
00:04:21,519 --> 00:04:22,240
the bottom

131
00:04:22,240 --> 00:04:24,240
with a parameterized query and be

132
00:04:24,240 --> 00:04:26,000
careful some parameters can't be

133
00:04:26,000 --> 00:04:27,840
parameterized you strict

134
00:04:27,840 --> 00:04:30,080
exact match validation when you can't

135
00:04:30,080 --> 00:04:32,080
parametrize escaping's not going to help

136
00:04:32,080 --> 00:04:32,479
you

137
00:04:32,479 --> 00:04:35,040
and be careful learn to parameterize

138
00:04:35,040 --> 00:04:35,919
your queries

139
00:04:35,919 --> 00:04:38,400
take this seriously bobby tables will

140
00:04:38,400 --> 00:04:40,560
show you parameterized queries in many

141
00:04:40,560 --> 00:04:41,360
languages

142
00:04:41,360 --> 00:04:43,520
so will the cheat sheet it's a it's a

143
00:04:43,520 --> 00:04:45,440
requirement in asvs

144
00:04:45,440 --> 00:04:47,520
we're now looking at two broken

145
00:04:47,520 --> 00:04:49,759
authentication a2 os top ten what's

146
00:04:49,759 --> 00:04:50,880
authentication

147
00:04:50,880 --> 00:04:52,720
we're verifying who the user is a

148
00:04:52,720 --> 00:04:54,720
session can be stateless like a jot or

149
00:04:54,720 --> 00:04:55,600
stateful

150
00:04:55,600 --> 00:04:57,600
like a traditional session what's

151
00:04:57,600 --> 00:04:59,360
changed a lot in this world

152
00:04:59,360 --> 00:05:02,000
is password policy number one don't

153
00:05:02,000 --> 00:05:03,840
limit the password strength

154
00:05:03,840 --> 00:05:06,400
and use a modern password policy scheme

155
00:05:06,400 --> 00:05:08,240
and what does that mean to us in the us

156
00:05:08,240 --> 00:05:08,800
right

157
00:05:08,800 --> 00:05:11,280
it means stopping things like credential

158
00:05:11,280 --> 00:05:12,160
stuffing

159
00:05:12,160 --> 00:05:14,560
by when user registers an account or

160
00:05:14,560 --> 00:05:15,919
changes a password

161
00:05:15,919 --> 00:05:17,840
make sure that username password

162
00:05:17,840 --> 00:05:20,320
combination is not known from a public

163
00:05:20,320 --> 00:05:20,960
breach

164
00:05:20,960 --> 00:05:22,639
and look i know you probably don't want

165
00:05:22,639 --> 00:05:24,240
to blindly follow u.s

166
00:05:24,240 --> 00:05:27,600
regulations but hang on some of you code

167
00:05:27,600 --> 00:05:28,880
for u.s companies

168
00:05:28,880 --> 00:05:30,720
and this is smart stuff even if you

169
00:05:30,720 --> 00:05:32,639
don't follow it it's just good research

170
00:05:32,639 --> 00:05:35,759
this is this special publication 863

171
00:05:35,759 --> 00:05:37,600
it's the u.s government digital media

172
00:05:37,600 --> 00:05:39,039
guidelines for passwords

173
00:05:39,039 --> 00:05:40,560
don't limit the characters of the

174
00:05:40,560 --> 00:05:42,639
password at least eight character

175
00:05:42,639 --> 00:05:44,400
passwords and use multi-factor for

176
00:05:44,400 --> 00:05:45,360
sensitive data

177
00:05:45,360 --> 00:05:48,080
a character password with mfa is legit

178
00:05:48,080 --> 00:05:48,479
block

179
00:05:48,479 --> 00:05:50,560
context-specific passwords like the word

180
00:05:50,560 --> 00:05:52,000
password or username

181
00:05:52,000 --> 00:05:53,440
or the name of your company or name of

182
00:05:53,440 --> 00:05:56,319
your industry block the top 50 to 150

183
00:05:56,319 --> 00:05:57,680
000 common passwords

184
00:05:57,680 --> 00:05:59,919
stop credential stuffing by checking

185
00:05:59,919 --> 00:06:02,160
against the list of breached username

186
00:06:02,160 --> 00:06:03,199
password pairs

187
00:06:03,199 --> 00:06:05,600
throttle brute force attacks drop all

188
00:06:05,600 --> 00:06:07,600
these garbage special character rules

189
00:06:07,600 --> 00:06:10,160
um don't use password security questions

190
00:06:10,160 --> 00:06:11,520
or hints we can look them up

191
00:06:11,520 --> 00:06:13,759
no more password expiration for the sake

192
00:06:13,759 --> 00:06:16,080
of it it does bad patterns and again any

193
00:06:16,080 --> 00:06:17,120
printable character

194
00:06:17,120 --> 00:06:19,120
and again multi-factor as soon as

195
00:06:19,120 --> 00:06:20,560
sensitive data is in play

196
00:06:20,560 --> 00:06:22,720
and now we have a very different kind of

197
00:06:22,720 --> 00:06:24,000
password policy

198
00:06:24,000 --> 00:06:26,000
that meets up to how we're actually

199
00:06:26,000 --> 00:06:27,919
attacked this is a bad password it's a

200
00:06:27,919 --> 00:06:28,960
common pattern

201
00:06:28,960 --> 00:06:31,039
the word password is in it it's one of

202
00:06:31,039 --> 00:06:32,800
the most common passwords for for

203
00:06:32,800 --> 00:06:34,560
enterprise password policy

204
00:06:34,560 --> 00:06:36,720
i don't like it so we can we also want

205
00:06:36,720 --> 00:06:38,720
to store the password securely

206
00:06:38,720 --> 00:06:40,560
a lot of devs will store their password

207
00:06:40,560 --> 00:06:42,880
insecurely we care about password

208
00:06:42,880 --> 00:06:43,600
storage

209
00:06:43,600 --> 00:06:46,080
after your database has been breached

210
00:06:46,080 --> 00:06:48,240
the attacker can throw super computing

211
00:06:48,240 --> 00:06:50,560
power at it like all of these breaches

212
00:06:50,560 --> 00:06:53,199
show us passwords in the wild so we have

213
00:06:53,199 --> 00:06:54,960
to get to defend against that as well

214
00:06:54,960 --> 00:06:55,599
remember that

215
00:06:55,599 --> 00:06:58,160
by the way this is s crypt is an example

216
00:06:58,160 --> 00:06:59,840
of a good algorithm from just a couple

217
00:06:59,840 --> 00:07:01,520
years ago for password storage

218
00:07:01,520 --> 00:07:04,319
we have internet based cloud cracking

219
00:07:04,319 --> 00:07:05,120
services

220
00:07:05,120 --> 00:07:07,280
but the key is to pre-hash use a good

221
00:07:07,280 --> 00:07:09,120
algorithm and then encrypt or mac at the

222
00:07:09,120 --> 00:07:09,680
end

223
00:07:09,680 --> 00:07:12,240
number one uh make sure you hash the

224
00:07:12,240 --> 00:07:14,639
password before you store it number two

225
00:07:14,639 --> 00:07:16,560
make sure you use the right algorithm b

226
00:07:16,560 --> 00:07:18,639
crypt s crypt or argon 2y

227
00:07:18,639 --> 00:07:20,479
number three after you protect it with

228
00:07:20,479 --> 00:07:21,840
the proper algorithm

229
00:07:21,840 --> 00:07:23,759
and by the way hash cracking is that

230
00:07:23,759 --> 00:07:25,360
fast md5 2 million

231
00:07:25,360 --> 00:07:27,440
200 million attempts per second on my

232
00:07:27,440 --> 00:07:29,520
laptop after i stowed your database take

233
00:07:29,520 --> 00:07:30,800
a breath

234
00:07:30,800 --> 00:07:33,759
shot 80 million 68 million on my laptop

235
00:07:33,759 --> 00:07:35,599
in terms of password compares per second

236
00:07:35,599 --> 00:07:37,919
and b crypt only 390. it actually helps

237
00:07:37,919 --> 00:07:40,319
java b crypt there we go at least a 13

238
00:07:40,319 --> 00:07:41,599
work factor in my opinion

239
00:07:41,599 --> 00:07:44,720
it's in b crypt it's in php uh script is

240
00:07:44,720 --> 00:07:46,960
a good algorithm i'd use argon 2y these

241
00:07:46,960 --> 00:07:47,440
days

242
00:07:47,440 --> 00:07:49,120
you know s crypt is cool if you have it

243
00:07:49,120 --> 00:07:50,720
already but really if i was going to

244
00:07:50,720 --> 00:07:52,080
pick an algorithm i'd go b

245
00:07:52,080 --> 00:07:54,160
crypt or i go argon 2. when i'm done

246
00:07:54,160 --> 00:07:56,240
with b crypt or argon 2i

247
00:07:56,240 --> 00:07:58,960
i then recommend you encrypt at the end

248
00:07:58,960 --> 00:08:00,800
if you have a good key infrastructure in

249
00:08:00,800 --> 00:08:02,879
place and then protect the password

250
00:08:02,879 --> 00:08:04,879
now we're talking modern password policy

251
00:08:04,879 --> 00:08:06,879
and by the way when we look at the same

252
00:08:06,879 --> 00:08:08,080
this standard

253
00:08:08,080 --> 00:08:09,759
we look at this workflow and these

254
00:08:09,759 --> 00:08:11,520
different guides that say

255
00:08:11,520 --> 00:08:13,199
the only point of these slides is in the

256
00:08:13,199 --> 00:08:15,599
standard that says if you have

257
00:08:15,599 --> 00:08:18,080
sensitive data then you immediately need

258
00:08:18,080 --> 00:08:18,879
to do at least

259
00:08:18,879 --> 00:08:22,319
aal level 2 which is multi-factor so

260
00:08:22,319 --> 00:08:24,000
you know if you have a sensitive system

261
00:08:24,000 --> 00:08:26,000
without multi-factor of some kind it's

262
00:08:26,000 --> 00:08:28,319
like welcome to 2020 folks we need it's

263
00:08:28,319 --> 00:08:29,039
basics

264
00:08:29,039 --> 00:08:31,759
number okay next sensitive data exposure

265
00:08:31,759 --> 00:08:33,599
right we want to make sure that we have

266
00:08:33,599 --> 00:08:36,000
well-configured https anywhere

267
00:08:36,000 --> 00:08:38,320
anybody have a good excuse to use http

268
00:08:38,320 --> 00:08:40,559
go ahead and say it now it's wrong wrong

269
00:08:40,559 --> 00:08:42,080
sorry i'm sorry i apologize

270
00:08:42,080 --> 00:08:44,959
use https everywhere hey that guy who

271
00:08:44,959 --> 00:08:46,959
just said it's okay someone talk to him

272
00:08:46,959 --> 00:08:49,760
please also store your keys in a proper

273
00:08:49,760 --> 00:08:51,920
vault like the vault project or amazon's

274
00:08:51,920 --> 00:08:52,640
key vaults

275
00:08:52,640 --> 00:08:55,040
isolate your keys so the developers

276
00:08:55,040 --> 00:08:56,320
can't extract it

277
00:08:56,320 --> 00:08:58,959
but they can operate on the key without

278
00:08:58,959 --> 00:09:01,040
accessing it in their code using proper

279
00:09:01,040 --> 00:09:02,320
key isolation

280
00:09:02,320 --> 00:09:06,160
also use a well-vetted crypto library

281
00:09:06,160 --> 00:09:08,800
like google tank or lib sodium this is

282
00:09:08,800 --> 00:09:10,399
hard to get right here's some cheat

283
00:09:10,399 --> 00:09:12,240
sheets from owasp we're looking at a4

284
00:09:12,240 --> 00:09:13,279
xxe

285
00:09:13,279 --> 00:09:15,360
this is about xml level attacks this is

286
00:09:15,360 --> 00:09:17,519
where i can build a dtd based xml

287
00:09:17,519 --> 00:09:20,560
and say entity xxe system is a system

288
00:09:20,560 --> 00:09:22,080
file or a shadow

289
00:09:22,080 --> 00:09:24,640
file so with this attack i send this xml

290
00:09:24,640 --> 00:09:25,839
to your server

291
00:09:25,839 --> 00:09:28,000
it lets me extract a file off your

292
00:09:28,000 --> 00:09:30,160
system because of a poorly configured

293
00:09:30,160 --> 00:09:31,920
xml parser in your code

294
00:09:31,920 --> 00:09:33,360
there here's other attacks to this

295
00:09:33,360 --> 00:09:35,920
category but the trick is to configure

296
00:09:35,920 --> 00:09:37,200
your xml parser

297
00:09:37,200 --> 00:09:40,240
turn off dtds and external entities and

298
00:09:40,240 --> 00:09:42,160
so this is a well-known attack category

299
00:09:42,160 --> 00:09:44,720
it's a real-world one that attackers use

300
00:09:44,720 --> 00:09:45,519
frequently

301
00:09:45,519 --> 00:09:47,680
at least back in 2018 it's still

302
00:09:47,680 --> 00:09:49,440
happening here's some cheat cheats

303
00:09:49,440 --> 00:09:51,600
we're looking at a5 broken access

304
00:09:51,600 --> 00:09:53,920
control this is a design topic like for

305
00:09:53,920 --> 00:09:54,560
example

306
00:09:54,560 --> 00:09:56,720
this query is vulnerable to an access

307
00:09:56,720 --> 00:09:58,959
control evasion just by changing the

308
00:09:58,959 --> 00:10:00,800
number i can steal people's data

309
00:10:00,800 --> 00:10:02,560
so i'll add ownership reference the

310
00:10:02,560 --> 00:10:04,880
owner is a user id from session

311
00:10:04,880 --> 00:10:07,120
the point is i want more time on this so

312
00:10:07,120 --> 00:10:08,079
for now

313
00:10:08,079 --> 00:10:11,200
um code to to a feature name don't code

314
00:10:11,200 --> 00:10:12,399
to a role

315
00:10:12,399 --> 00:10:14,720
and consider advanced access control

316
00:10:14,720 --> 00:10:15,440
standards

317
00:10:15,440 --> 00:10:18,000
like attribute based access control and

318
00:10:18,000 --> 00:10:18,560
again

319
00:10:18,560 --> 00:10:20,800
um here's a nist standard on modern

320
00:10:20,800 --> 00:10:21,839
access control

321
00:10:21,839 --> 00:10:24,320
it's design heavy work hard to get this

322
00:10:24,320 --> 00:10:25,200
right up front

323
00:10:25,200 --> 00:10:27,839
and a quick note on a6 configuration a

324
00:10:27,839 --> 00:10:30,320
lot of configuration drives security now

325
00:10:30,320 --> 00:10:32,399
like my whole infrastructure it's a yaml

326
00:10:32,399 --> 00:10:33,760
file right so

327
00:10:33,760 --> 00:10:36,399
if you can't verify a config file assume

328
00:10:36,399 --> 00:10:37,519
it's not secure

329
00:10:37,519 --> 00:10:39,920
go out of your way to use automation or

330
00:10:39,920 --> 00:10:40,959
an expert

331
00:10:40,959 --> 00:10:43,120
to review your stuff for security your

332
00:10:43,120 --> 00:10:44,240
configuration

333
00:10:44,240 --> 00:10:46,560
stuff for security a7 cross-site

334
00:10:46,560 --> 00:10:47,360
scripting

335
00:10:47,360 --> 00:10:49,680
it's when the attacker can inject script

336
00:10:49,680 --> 00:10:50,720
into your website

337
00:10:50,720 --> 00:10:52,720
through one of your actual web features

338
00:10:52,720 --> 00:10:53,839
there's reflective

339
00:10:53,839 --> 00:10:56,480
and stored xss where we're literally

340
00:10:56,480 --> 00:10:57,519
implanting

341
00:10:57,519 --> 00:11:00,880
um the uh of content in your website

342
00:11:00,880 --> 00:11:02,959
that contains javascript so when another

343
00:11:02,959 --> 00:11:04,800
user looks at that content

344
00:11:04,800 --> 00:11:06,800
they're executing javascript from the

345
00:11:06,800 --> 00:11:08,560
attacker the attacker

346
00:11:08,560 --> 00:11:10,079
when doing cross-site scripting or

347
00:11:10,079 --> 00:11:11,760
content injection the real name

348
00:11:11,760 --> 00:11:14,480
they can steal some data to face the

349
00:11:14,480 --> 00:11:15,839
website

350
00:11:15,839 --> 00:11:18,160
and and to stop it is painfully

351
00:11:18,160 --> 00:11:19,120
difficult

352
00:11:19,120 --> 00:11:21,600
it's so easy to get cross-site scripting

353
00:11:21,600 --> 00:11:22,320
wrong

354
00:11:22,320 --> 00:11:24,480
the the saving grace our new standards

355
00:11:24,480 --> 00:11:26,399
like content security policy

356
00:11:26,399 --> 00:11:29,920
as well as uh trusted types but as of

357
00:11:29,920 --> 00:11:30,720
right now

358
00:11:30,720 --> 00:11:32,800
learning the framework and doing xss

359
00:11:32,800 --> 00:11:34,720
defense is painfully difficult

360
00:11:34,720 --> 00:11:36,399
there's several different cheat sheets

361
00:11:36,399 --> 00:11:38,079
on this topic go study

362
00:11:38,079 --> 00:11:41,519
a8 insecure to serialization when you're

363
00:11:41,519 --> 00:11:44,320
automatically deserializing binary data

364
00:11:44,320 --> 00:11:45,519
on the server that comes from an

365
00:11:45,519 --> 00:11:46,560
untrusted source

366
00:11:46,560 --> 00:11:49,519
the attacker can modify that binary add

367
00:11:49,519 --> 00:11:49,839
an

368
00:11:49,839 --> 00:11:52,320
operating system command capability to

369
00:11:52,320 --> 00:11:53,360
that binary

370
00:11:53,360 --> 00:11:55,600
so when it's deserialized the attacker

371
00:11:55,600 --> 00:11:56,639
is executing

372
00:11:56,639 --> 00:11:58,800
operating system commands on your server

373
00:11:58,800 --> 00:12:01,600
back in 2017 when this was a big problem

374
00:12:01,600 --> 00:12:04,480
most live defenses did not work this

375
00:12:04,480 --> 00:12:05,680
paper debunked

376
00:12:05,680 --> 00:12:07,839
how to stop the serialization and by the

377
00:12:07,839 --> 00:12:09,760
way all the third-party libraries of

378
00:12:09,760 --> 00:12:10,000
this

379
00:12:10,000 --> 00:12:12,959
era are vulnerable like the xml and json

380
00:12:12,959 --> 00:12:13,760
libraries

381
00:12:13,760 --> 00:12:15,760
i hope you update those if you have

382
00:12:15,760 --> 00:12:18,480
really old json or xml libraries

383
00:12:18,480 --> 00:12:20,160
they're vulnerable to serialization

384
00:12:20,160 --> 00:12:21,519
attacks through how

385
00:12:21,519 --> 00:12:24,160
xml parsers and json parsers work this

386
00:12:24,160 --> 00:12:24,880
is a hard

387
00:12:24,880 --> 00:12:27,680
topic here's the oracle secure code this

388
00:12:27,680 --> 00:12:29,760
oracle secure coding guide on this

389
00:12:29,760 --> 00:12:31,760
and some other defense guides on how to

390
00:12:31,760 --> 00:12:32,959
stop this problem

391
00:12:32,959 --> 00:12:35,920
it's hard a9 using known vulnerable

392
00:12:35,920 --> 00:12:37,519
components

393
00:12:37,519 --> 00:12:39,120
you know when last time i built a big

394
00:12:39,120 --> 00:12:40,639
piece of software these are some

395
00:12:40,639 --> 00:12:42,639
third-party libraries i was using

396
00:12:42,639 --> 00:12:45,120
all vulnerable to critical security

397
00:12:45,120 --> 00:12:45,839
problems

398
00:12:45,839 --> 00:12:48,000
the whole equifax issue was because of

399
00:12:48,000 --> 00:12:49,760
third-party library security

400
00:12:49,760 --> 00:12:52,720
so we want to use tools to scan our

401
00:12:52,720 --> 00:12:54,160
development environments

402
00:12:54,160 --> 00:12:56,720
looking for known insecure third-party

403
00:12:56,720 --> 00:12:57,519
libraries

404
00:12:57,519 --> 00:13:00,000
the big flagship project from owasp is

405
00:13:00,000 --> 00:13:01,760
owasp dependency check

406
00:13:01,760 --> 00:13:04,720
i highly recommend you use it every day

407
00:13:04,720 --> 00:13:06,320
when you're developing software

408
00:13:06,320 --> 00:13:08,880
there's net specific tools there's

409
00:13:08,880 --> 00:13:11,920
javascript specific tools like retire.js

410
00:13:11,920 --> 00:13:15,120
and npm audit and so please at the very

411
00:13:15,120 --> 00:13:16,240
least

412
00:13:16,240 --> 00:13:18,160
scan your development environment for

413
00:13:18,160 --> 00:13:20,160
third-party library and security

414
00:13:20,160 --> 00:13:22,880
at the very most at the very most you

415
00:13:22,880 --> 00:13:23,440
know keep

416
00:13:23,440 --> 00:13:25,360
everything up to date at all times

417
00:13:25,360 --> 00:13:26,720
here's my last topic logging and

418
00:13:26,720 --> 00:13:27,440
monitoring

419
00:13:27,440 --> 00:13:29,200
we need logging and monitoring for vote

420
00:13:29,200 --> 00:13:31,279
for three things intrusion detection

421
00:13:31,279 --> 00:13:33,519
forensics after an attack and for law

422
00:13:33,519 --> 00:13:35,040
and compliance right

423
00:13:35,040 --> 00:13:38,639
so log often and log early

424
00:13:38,639 --> 00:13:40,240
at the very minimum log all

425
00:13:40,240 --> 00:13:42,320
authentication events

426
00:13:42,320 --> 00:13:44,720
all access control failures and all

427
00:13:44,720 --> 00:13:46,560
input validation errors if that's all

428
00:13:46,560 --> 00:13:47,680
you do

429
00:13:47,680 --> 00:13:49,199
then you'll give me enough information

430
00:13:49,199 --> 00:13:51,839
to do proper forensics and compliance

431
00:13:51,839 --> 00:13:53,680
and similar around security issues

432
00:13:53,680 --> 00:13:56,480
even better work with the security team

433
00:13:56,480 --> 00:13:57,040
so you're

434
00:13:57,040 --> 00:13:59,360
actually so you actually have a standard

435
00:13:59,360 --> 00:14:00,959
around what to log

436
00:14:00,959 --> 00:14:03,199
and uh here's some additional things to

437
00:14:03,199 --> 00:14:05,120
consider for your logging mechanism

438
00:14:05,120 --> 00:14:06,959
that first last is most important for

439
00:14:06,959 --> 00:14:08,480
security here's a few things

440
00:14:08,480 --> 00:14:10,399
not to log like credit card data and

441
00:14:10,399 --> 00:14:12,560
session ids and privacy-centric data

442
00:14:12,560 --> 00:14:14,000
that you don't have permission to be

443
00:14:14,000 --> 00:14:14,800
storing

444
00:14:14,800 --> 00:14:16,399
here's a couple notes on logging from

445
00:14:16,399 --> 00:14:17,839
the oas foundation

446
00:14:17,839 --> 00:14:21,040
so yeah write secure code folks

447
00:14:21,040 --> 00:14:23,199
test your software for security all the

448
00:14:23,199 --> 00:14:24,079
time

449
00:14:24,079 --> 00:14:25,519
you know what time it is for me i'm

450
00:14:25,519 --> 00:14:27,440
going to the beach it's been my great

451
00:14:27,440 --> 00:14:28,480
pleasure

452
00:14:28,480 --> 00:14:30,560
please go forth and write secure code i

453
00:14:30,560 --> 00:14:31,920
salute you all

454
00:14:31,920 --> 00:14:35,599
thank you so much for your time bye-bye

455
00:14:39,720 --> 00:14:42,720
everybody

