1
00:00:08,080 --> 00:00:09,679
all right so i would uh

2
00:00:09,679 --> 00:00:11,759
i would prefer of course to be

3
00:00:11,759 --> 00:00:14,240
physically in poland um

4
00:00:14,240 --> 00:00:16,239
but i guess this is the second best

5
00:00:16,239 --> 00:00:17,840
thing after that

6
00:00:17,840 --> 00:00:20,880
uh so polls keep telling me that there's

7
00:00:20,880 --> 00:00:24,000
uh never too early for vodka so i'll

8
00:00:24,000 --> 00:00:24,400
start

9
00:00:24,400 --> 00:00:31,439
this talk with a little uh refresher

10
00:00:31,439 --> 00:00:34,480
all right so um

11
00:00:34,480 --> 00:00:37,520
about me uh like edo as uh mentioned

12
00:00:37,520 --> 00:00:39,200
i've been working in the industry for

13
00:00:39,200 --> 00:00:40,559
the last 15 years

14
00:00:40,559 --> 00:00:42,960
i've mostly i've started on the network

15
00:00:42,960 --> 00:00:44,559
security side

16
00:00:44,559 --> 00:00:47,360
then i moved to bot detection which is

17
00:00:47,360 --> 00:00:48,559
more or less in the

18
00:00:48,559 --> 00:00:51,360
intersection between network and and and

19
00:00:51,360 --> 00:00:52,239
the web

20
00:00:52,239 --> 00:00:55,199
security i moved to javascript code

21
00:00:55,199 --> 00:00:57,360
protection to client-side security and

22
00:00:57,360 --> 00:00:58,000
i've been

23
00:00:58,000 --> 00:01:01,840
mostly focused on the website

24
00:01:01,840 --> 00:01:05,519
i've been a speaker in a few

25
00:01:05,519 --> 00:01:08,880
conferences these are a few of the one

26
00:01:08,880 --> 00:01:11,439
ones that have been i have several

27
00:01:11,439 --> 00:01:13,600
patents in application security and my

28
00:01:13,600 --> 00:01:14,720
main interests are

29
00:01:14,720 --> 00:01:16,640
hacking the web browser security

30
00:01:16,640 --> 00:01:18,000
application security

31
00:01:18,000 --> 00:01:20,560
reverse engineering and heavy metal

32
00:01:20,560 --> 00:01:22,560
music

33
00:01:22,560 --> 00:01:24,640
so for today i'll be speaking about

34
00:01:24,640 --> 00:01:26,320
magecart which is a

35
00:01:26,320 --> 00:01:29,040
fairly new type of attack then i'll move

36
00:01:29,040 --> 00:01:30,079
to

37
00:01:30,079 --> 00:01:33,840
addressing web schemers anatomy and

38
00:01:33,840 --> 00:01:36,560
the the the talk will progress by

39
00:01:36,560 --> 00:01:37,520
showing you

40
00:01:37,520 --> 00:01:41,040
how we are hunting down web schemers

41
00:01:41,040 --> 00:01:44,159
with a few demos included uh at the very

42
00:01:44,159 --> 00:01:45,600
end i'll present you

43
00:01:45,600 --> 00:01:49,520
uh a bluetooth minus uh which i'll

44
00:01:49,520 --> 00:01:51,680
let's keep it a surprise for now and at

45
00:01:51,680 --> 00:01:54,880
the very end a little bit of q a

46
00:01:54,880 --> 00:01:58,159
so about magegard um assuming that

47
00:01:58,159 --> 00:01:59,840
you are not familiar with this type of

48
00:01:59,840 --> 00:02:02,000
attack i'll i'll just start by

49
00:02:02,000 --> 00:02:04,880
telling you how a mageguard attack goes

50
00:02:04,880 --> 00:02:05,360
so

51
00:02:05,360 --> 00:02:09,598
um it's it's it's a client-side uh

52
00:02:09,598 --> 00:02:13,680
browser based attack uh where you have

53
00:02:13,680 --> 00:02:15,040
first-party code and you have

54
00:02:15,040 --> 00:02:16,959
third-party code third-party code is

55
00:02:16,959 --> 00:02:18,319
usually loaded

56
00:02:18,319 --> 00:02:21,599
dynamically from a third-party server

57
00:02:21,599 --> 00:02:25,200
that code can load more code dynamically

58
00:02:25,200 --> 00:02:27,599
you can have iframes and those iframes

59
00:02:27,599 --> 00:02:28,879
can load extra code

60
00:02:28,879 --> 00:02:31,519
so all of this code will end up in the

61
00:02:31,519 --> 00:02:34,000
same executing context the browser

62
00:02:34,000 --> 00:02:37,360
and will be able to fully view the dom

63
00:02:37,360 --> 00:02:39,680
and all the the other javascript code

64
00:02:39,680 --> 00:02:41,040
running in there

65
00:02:41,040 --> 00:02:44,319
so what happens if one of these files

66
00:02:44,319 --> 00:02:47,040
is compromised uh maybe the servers were

67
00:02:47,040 --> 00:02:47,680
breached

68
00:02:47,680 --> 00:02:49,120
maybe the attackers were able to

69
00:02:49,120 --> 00:02:50,959
penetrate the the server and

70
00:02:50,959 --> 00:02:53,840
change the javascript in place and by

71
00:02:53,840 --> 00:02:55,040
doing that they can

72
00:02:55,040 --> 00:02:57,519
inject arbitrary javascript code and

73
00:02:57,519 --> 00:02:59,680
that javascript code will have access to

74
00:02:59,680 --> 00:03:00,480
everything

75
00:03:00,480 --> 00:03:04,159
including form fields or paying forms

76
00:03:04,159 --> 00:03:06,720
and and that's what they do they target

77
00:03:06,720 --> 00:03:07,760
payment forms

78
00:03:07,760 --> 00:03:10,640
and they excel trade the the data that

79
00:03:10,640 --> 00:03:11,360
the user

80
00:03:11,360 --> 00:03:14,080
inserts in the payment form namely the

81
00:03:14,080 --> 00:03:15,760
credit card information

82
00:03:15,760 --> 00:03:19,040
so when one of these

83
00:03:19,040 --> 00:03:22,159
gets compromised the whole environment

84
00:03:22,159 --> 00:03:25,040
the whole browser and application uh

85
00:03:25,040 --> 00:03:25,920
provided that

86
00:03:25,920 --> 00:03:27,599
it's running in the same execution

87
00:03:27,599 --> 00:03:29,599
context gets compromised

88
00:03:29,599 --> 00:03:33,280
as well so what happens next

89
00:03:33,280 --> 00:03:36,560
is uh the form gets

90
00:03:36,560 --> 00:03:39,519
hooked gets uh we we call this a form

91
00:03:39,519 --> 00:03:40,799
jacking this

92
00:03:40,799 --> 00:03:42,720
it's another term for this type of

93
00:03:42,720 --> 00:03:44,080
attack and

94
00:03:44,080 --> 00:03:47,440
the the data is sent out to um

95
00:03:47,440 --> 00:03:49,440
what we call the drop server the drop

96
00:03:49,440 --> 00:03:50,560
server uh

97
00:03:50,560 --> 00:03:53,840
might sit in um in a like

98
00:03:53,840 --> 00:03:56,400
unsuspicious domain name like coolest

99
00:03:56,400 --> 00:03:57,920
fonts.com

100
00:03:57,920 --> 00:04:00,560
or it might leverage one of the existing

101
00:04:00,560 --> 00:04:01,599
third-party

102
00:04:01,599 --> 00:04:04,640
servers and domains uh

103
00:04:04,640 --> 00:04:07,599
and and that usually uh takes care of

104
00:04:07,599 --> 00:04:09,040
bypassing csp

105
00:04:09,040 --> 00:04:12,000
and and things like that that are white

106
00:04:12,000 --> 00:04:13,519
listing the domains where the

107
00:04:13,519 --> 00:04:14,080
application

108
00:04:14,080 --> 00:04:17,279
can communicate with so mage cart

109
00:04:17,279 --> 00:04:18,160
attacks

110
00:04:18,160 --> 00:04:21,759
the name comes from the

111
00:04:21,759 --> 00:04:24,560
might come or it's probably coming from

112
00:04:24,560 --> 00:04:27,280
magento because the magento

113
00:04:27,280 --> 00:04:29,360
e-commerce web stores were the first to

114
00:04:29,360 --> 00:04:30,800
be targeted and

115
00:04:30,800 --> 00:04:35,440
the majority were magento breaches

116
00:04:35,440 --> 00:04:38,479
but nowadays they can target any

117
00:04:38,479 --> 00:04:41,840
any type of web server as long as it's

118
00:04:41,840 --> 00:04:42,800
serving uh

119
00:04:42,800 --> 00:04:46,000
javascripts dynamically to

120
00:04:46,000 --> 00:04:48,639
e-commerce web shop it's it's good

121
00:04:48,639 --> 00:04:50,479
enough for the attackers they just have

122
00:04:50,479 --> 00:04:52,160
to find ways to breach those

123
00:04:52,160 --> 00:04:54,880
those servers it's also called the

124
00:04:54,880 --> 00:04:56,000
supply chain attack

125
00:04:56,000 --> 00:04:58,800
because it's uh it's going after the

126
00:04:58,800 --> 00:04:59,759
components

127
00:04:59,759 --> 00:05:02,240
of the web application not served

128
00:05:02,240 --> 00:05:02,880
directly

129
00:05:02,880 --> 00:05:07,520
by the the first party and um

130
00:05:07,520 --> 00:05:11,039
it all started back in 2015 more or less

131
00:05:11,039 --> 00:05:13,840
uh a single group started it but right

132
00:05:13,840 --> 00:05:15,360
now we have

133
00:05:15,360 --> 00:05:18,400
tens of different uh cyber criminal

134
00:05:18,400 --> 00:05:21,360
groups uh doing mage card attacks with

135
00:05:21,360 --> 00:05:21,919
different

136
00:05:21,919 --> 00:05:26,080
uh mo's the the good thing about these

137
00:05:26,080 --> 00:05:28,479
attacks at least for attackers is that

138
00:05:28,479 --> 00:05:30,080
they they scale very well

139
00:05:30,080 --> 00:05:32,080
they only need to breach one server

140
00:05:32,080 --> 00:05:33,919
modify the code and

141
00:05:33,919 --> 00:05:37,120
they hit all the users at once so uh

142
00:05:37,120 --> 00:05:40,160
if they stay one week in the server

143
00:05:40,160 --> 00:05:42,160
they will able they will be able to

144
00:05:42,160 --> 00:05:43,840
scheme all the payments

145
00:05:43,840 --> 00:05:46,720
uh of that week of that website from all

146
00:05:46,720 --> 00:05:47,840
the users

147
00:05:47,840 --> 00:05:52,320
um they also uh they are also a

148
00:05:52,320 --> 00:05:54,000
good preference of the attackers because

149
00:05:54,000 --> 00:05:56,000
they they seek the weakest link so

150
00:05:56,000 --> 00:05:57,600
usually third parties

151
00:05:57,600 --> 00:06:00,800
are the are smaller companies uh

152
00:06:00,800 --> 00:06:03,759
probably with less resources to dedicate

153
00:06:03,759 --> 00:06:05,120
to security

154
00:06:05,120 --> 00:06:07,759
um they are probably using ubqs software

155
00:06:07,759 --> 00:06:10,160
like magento or other things

156
00:06:10,160 --> 00:06:11,919
they are probably doing all sorts of

157
00:06:11,919 --> 00:06:14,319
mistakes in configuring those uh

158
00:06:14,319 --> 00:06:17,919
those softwares and and that's how the

159
00:06:17,919 --> 00:06:20,880
the attackers are able to easily breach

160
00:06:20,880 --> 00:06:22,960
them

161
00:06:22,960 --> 00:06:25,440
so you might ask how often this happens

162
00:06:25,440 --> 00:06:26,880
uh right now

163
00:06:26,880 --> 00:06:29,600
almost every week certainly every month

164
00:06:29,600 --> 00:06:30,240
uh

165
00:06:30,240 --> 00:06:33,120
i'm not going through all these attacks

166
00:06:33,120 --> 00:06:34,960
um

167
00:06:34,960 --> 00:06:38,319
and and and and that's the the sort of

168
00:06:38,319 --> 00:06:38,800
thing that

169
00:06:38,800 --> 00:06:40,800
has been happening so it's it's very

170
00:06:40,800 --> 00:06:42,560
profitable for attackers so

171
00:06:42,560 --> 00:06:44,479
it's no wonder that they have been

172
00:06:44,479 --> 00:06:46,880
increasing

173
00:06:46,880 --> 00:06:48,880
so talking about the anatomy of an

174
00:06:48,880 --> 00:06:50,560
attack um

175
00:06:50,560 --> 00:06:53,120
did what you're seeing right now it's uh

176
00:06:53,120 --> 00:06:54,560
the inventors

177
00:06:54,560 --> 00:06:57,039
web schemer it has been used in the

178
00:06:57,039 --> 00:06:58,479
ticketmaster breach

179
00:06:58,479 --> 00:07:01,919
back in 2018. uh you are just seeing the

180
00:07:01,919 --> 00:07:02,479
schemer

181
00:07:02,479 --> 00:07:05,759
it's a one-liner it was concatenated at

182
00:07:05,759 --> 00:07:08,000
the end of a file

183
00:07:08,000 --> 00:07:11,280
and as you can see it's obfuscated

184
00:07:11,280 --> 00:07:14,840
but this obfuscation is not really very

185
00:07:14,840 --> 00:07:16,560
resilient um

186
00:07:16,560 --> 00:07:19,680
by doing a bit of a manual uh the

187
00:07:19,680 --> 00:07:20,639
obfuscation

188
00:07:20,639 --> 00:07:24,319
you you get the the gist of what

189
00:07:24,319 --> 00:07:26,800
the code is doing so basically it's

190
00:07:26,800 --> 00:07:27,680
first checking

191
00:07:27,680 --> 00:07:30,960
if it's running in the right page order

192
00:07:30,960 --> 00:07:34,560
checkout or one step then it iterates

193
00:07:34,560 --> 00:07:35,199
all form

194
00:07:35,199 --> 00:07:39,039
fields and known ids

195
00:07:39,039 --> 00:07:42,080
installs event listeners in

196
00:07:42,080 --> 00:07:45,840
on click events collects all form field

197
00:07:45,840 --> 00:07:47,199
values

198
00:07:47,199 --> 00:07:50,639
replaces also the on submit events uh

199
00:07:50,639 --> 00:07:54,000
installs its own event listener

200
00:07:54,000 --> 00:07:57,120
and eventually sends the

201
00:07:57,120 --> 00:08:00,319
scheme data to the drop server

202
00:08:00,319 --> 00:08:02,800
and does it all again after 30

203
00:08:02,800 --> 00:08:03,680
milliseconds

204
00:08:03,680 --> 00:08:07,039
so it needs to keep running

205
00:08:07,039 --> 00:08:09,680
in order to to give enough time for the

206
00:08:09,680 --> 00:08:10,400
user to

207
00:08:10,400 --> 00:08:14,159
enter the credit card data

208
00:08:14,240 --> 00:08:17,520
so web skimmer kits are

209
00:08:17,520 --> 00:08:20,800
are available on the dark web

210
00:08:20,800 --> 00:08:23,599
so attackers don't need special skills

211
00:08:23,599 --> 00:08:24,479
they can just

212
00:08:24,479 --> 00:08:27,520
buy a ready-to-use kit

213
00:08:27,520 --> 00:08:30,479
they the these kits have loader codes

214
00:08:30,479 --> 00:08:32,479
skimmer code generation

215
00:08:32,479 --> 00:08:35,839
and apply javascript obfuscation uh they

216
00:08:35,839 --> 00:08:38,399
provide also a c2 admin panel like the

217
00:08:38,399 --> 00:08:39,279
one that you see

218
00:08:39,279 --> 00:08:43,360
on the right uh they go roughly from 250

219
00:08:43,360 --> 00:08:47,680
to 5000 um they are mostly used in spray

220
00:08:47,680 --> 00:08:48,160
and prey

221
00:08:48,160 --> 00:08:51,760
kind of attack so they they the users

222
00:08:51,760 --> 00:08:54,800
get access to breached

223
00:08:54,800 --> 00:08:57,519
third party servers and they just

224
00:08:57,519 --> 00:08:58,320
installed this

225
00:08:58,320 --> 00:09:00,399
and basically they are attacking a lot

226
00:09:00,399 --> 00:09:02,480
of different web applications because

227
00:09:02,480 --> 00:09:03,040
the

228
00:09:03,040 --> 00:09:04,959
multiple applications are linking to

229
00:09:04,959 --> 00:09:06,240
that the file that

230
00:09:06,240 --> 00:09:08,440
they had just modified um

231
00:09:08,440 --> 00:09:09,760
[Music]

232
00:09:09,760 --> 00:09:12,720
there's even a toolkit called inter

233
00:09:12,720 --> 00:09:13,440
which

234
00:09:13,440 --> 00:09:16,480
goes roughly around 1300

235
00:09:16,480 --> 00:09:18,880
and uses this special caesar plus

236
00:09:18,880 --> 00:09:20,320
javascript obfuscation

237
00:09:20,320 --> 00:09:22,640
which also is also available on the dark

238
00:09:22,640 --> 00:09:24,640
web for 100 bucks

239
00:09:24,640 --> 00:09:28,000
and but the problem of this toolkit

240
00:09:28,000 --> 00:09:31,760
is that it does fake checkout pages

241
00:09:31,760 --> 00:09:33,760
what this means is that the user is

242
00:09:33,760 --> 00:09:34,800
entering the data

243
00:09:34,800 --> 00:09:36,880
but then click submit and the

244
00:09:36,880 --> 00:09:38,959
transaction will not be successful

245
00:09:38,959 --> 00:09:41,519
so this is actually a bad example

246
00:09:41,519 --> 00:09:42,800
because the user will

247
00:09:42,800 --> 00:09:46,640
uh will will will realize

248
00:09:46,640 --> 00:09:49,839
that something has happened uh will

249
00:09:49,839 --> 00:09:51,920
probably contact support and probably

250
00:09:51,920 --> 00:09:52,160
the

251
00:09:52,160 --> 00:09:54,560
the infection will be discovered uh

252
00:09:54,560 --> 00:09:56,320
sooner rather than later

253
00:09:56,320 --> 00:09:59,360
so the the best web schemer kits they

254
00:09:59,360 --> 00:10:01,920
they try to to be as stealthy as they

255
00:10:01,920 --> 00:10:02,800
can be

256
00:10:02,800 --> 00:10:05,519
uh they will make sure that transactions

257
00:10:05,519 --> 00:10:06,720
are successful

258
00:10:06,720 --> 00:10:10,079
um while still skimming the credit card

259
00:10:10,079 --> 00:10:12,479
data

260
00:10:14,399 --> 00:10:18,399
so um now i'll i'll present what we have

261
00:10:18,399 --> 00:10:19,279
been doing

262
00:10:19,279 --> 00:10:22,560
to to hunt down uh schemers before i get

263
00:10:22,560 --> 00:10:24,240
into the

264
00:10:24,240 --> 00:10:26,720
the main theme of this talk i will tell

265
00:10:26,720 --> 00:10:27,360
you about

266
00:10:27,360 --> 00:10:30,160
um the solution and approach that we

267
00:10:30,160 --> 00:10:31,360
have been following

268
00:10:31,360 --> 00:10:34,320
lately so we have built a tool a

269
00:10:34,320 --> 00:10:36,959
client-side defense solution

270
00:10:36,959 --> 00:10:38,880
that it's basically able to alert and

271
00:10:38,880 --> 00:10:40,720
block malicious behavior

272
00:10:40,720 --> 00:10:44,640
and it allows you to for each resource

273
00:10:44,640 --> 00:10:46,880
in the page regardless of being a first

274
00:10:46,880 --> 00:10:48,640
party or third party

275
00:10:48,640 --> 00:10:51,040
you set permission levels so you can

276
00:10:51,040 --> 00:10:51,760
control

277
00:10:51,760 --> 00:10:53,760
whether a certain file can be loaded

278
00:10:53,760 --> 00:10:56,480
should be loaded or be blocked

279
00:10:56,480 --> 00:11:00,000
you can control if you allow it to load

280
00:11:00,000 --> 00:11:03,279
you can then control uh high-level

281
00:11:03,279 --> 00:11:06,560
uh behavior assumptions uh about what it

282
00:11:06,560 --> 00:11:07,680
should be doing

283
00:11:07,680 --> 00:11:10,240
and you can block it if they they they

284
00:11:10,240 --> 00:11:11,360
go outside

285
00:11:11,360 --> 00:11:14,640
your expectations uh things like uh

286
00:11:14,640 --> 00:11:17,680
should this file be touching any cookies

287
00:11:17,680 --> 00:11:20,160
you can you can set those expectations

288
00:11:20,160 --> 00:11:22,399
and the solution will be able to

289
00:11:22,399 --> 00:11:25,040
to fence the scripts and and and block

290
00:11:25,040 --> 00:11:28,800
and even block it from accessing cookies

291
00:11:28,800 --> 00:11:30,959
and then at the third permission level

292
00:11:30,959 --> 00:11:31,920
you can

293
00:11:31,920 --> 00:11:34,800
go as deep as you want in terms of

294
00:11:34,800 --> 00:11:36,880
specifying the behavior that you want to

295
00:11:36,880 --> 00:11:37,440
allow

296
00:11:37,440 --> 00:11:40,480
or to block to give you

297
00:11:40,480 --> 00:11:43,440
a few examples we can alert or block

298
00:11:43,440 --> 00:11:44,480
scripts

299
00:11:44,480 --> 00:11:46,480
if we see it installing a specific

300
00:11:46,480 --> 00:11:49,120
listener like on submit

301
00:11:49,120 --> 00:11:50,800
obviously if you're using third-party

302
00:11:50,800 --> 00:11:53,360
code you more or less know what it

303
00:11:53,360 --> 00:11:54,639
should be doing if

304
00:11:54,639 --> 00:11:57,680
it should be touching forms and

305
00:11:57,680 --> 00:12:00,240
you you should have these expectations

306
00:12:00,240 --> 00:12:00,720
and

307
00:12:00,720 --> 00:12:04,000
you can actually create rules um

308
00:12:04,000 --> 00:12:06,240
to make sure that your expectations are

309
00:12:06,240 --> 00:12:07,200
met

310
00:12:07,200 --> 00:12:10,639
we can block uh from sending data

311
00:12:10,639 --> 00:12:13,760
to unknown domains or using a specific

312
00:12:13,760 --> 00:12:14,240
method

313
00:12:14,240 --> 00:12:17,200
like web sockets um or if a file

314
00:12:17,200 --> 00:12:19,200
javascript is touching a specific form

315
00:12:19,200 --> 00:12:20,560
like a payment form

316
00:12:20,560 --> 00:12:23,360
um obviously you shouldn't be including

317
00:12:23,360 --> 00:12:24,079
all your

318
00:12:24,079 --> 00:12:25,920
third-party javascripts in the checkout

319
00:12:25,920 --> 00:12:27,200
page but

320
00:12:27,200 --> 00:12:30,720
some might be needed there uh

321
00:12:30,720 --> 00:12:34,320
for good reasons but still

322
00:12:34,320 --> 00:12:36,079
there's no reason why you shouldn't be

323
00:12:36,079 --> 00:12:38,480
limiting the ones that should be

324
00:12:38,480 --> 00:12:40,800
actually touching the payment form or

325
00:12:40,800 --> 00:12:41,519
installing

326
00:12:41,519 --> 00:12:44,560
listeners so our

327
00:12:44,560 --> 00:12:46,880
solution will give you the tools to

328
00:12:46,880 --> 00:12:47,680
actually go

329
00:12:47,680 --> 00:12:50,880
deeper and enforce that as you know

330
00:12:50,880 --> 00:12:53,600
using conventional web technologies you

331
00:12:53,600 --> 00:12:54,079
can

332
00:12:54,079 --> 00:12:57,120
do things like iframes and boxing but

333
00:12:57,120 --> 00:13:00,320
uh what you are able to limit uh inside

334
00:13:00,320 --> 00:13:01,680
the knife frame

335
00:13:01,680 --> 00:13:05,279
sandbox iframe is is

336
00:13:05,279 --> 00:13:07,519
extremely limited so you can either

337
00:13:07,519 --> 00:13:11,360
allow all javascript or disallow

338
00:13:11,360 --> 00:13:13,680
the javascripts you don't have fine

339
00:13:13,680 --> 00:13:15,040
grain

340
00:13:15,040 --> 00:13:18,399
ways of controlling and enforcing

341
00:13:18,399 --> 00:13:20,240
specific behaviors that you want to

342
00:13:20,240 --> 00:13:21,440
allow and

343
00:13:21,440 --> 00:13:23,279
behaviors that you don't want to allow

344
00:13:23,279 --> 00:13:25,600
so you can block um

345
00:13:25,600 --> 00:13:27,360
you can block javascript from adding

346
00:13:27,360 --> 00:13:29,120
elements to the dom

347
00:13:29,120 --> 00:13:32,480
so changing the interface or

348
00:13:32,480 --> 00:13:36,399
using a specific api um

349
00:13:36,399 --> 00:13:39,600
and and or even to add more javascript

350
00:13:39,600 --> 00:13:40,480
dynamically

351
00:13:40,480 --> 00:13:42,959
using a pen child or insert before uh

352
00:13:42,959 --> 00:13:44,079
for instance

353
00:13:44,079 --> 00:13:47,040
so in general what it allows you is to

354
00:13:47,040 --> 00:13:48,560
to fence scripts

355
00:13:48,560 --> 00:13:52,160
to to create a cage around the scripts

356
00:13:52,160 --> 00:13:54,959
and enforce a list privilege principle

357
00:13:54,959 --> 00:13:56,160
applied to

358
00:13:56,160 --> 00:13:59,360
third party code and why not also apply

359
00:13:59,360 --> 00:14:01,519
to first party code because

360
00:14:01,519 --> 00:14:04,720
you you can also be breached for

361
00:14:04,720 --> 00:14:07,279
first parties can be preached and and

362
00:14:07,279 --> 00:14:08,480
attackers can change

363
00:14:08,480 --> 00:14:12,079
the behavior of that code too and

364
00:14:12,079 --> 00:14:14,959
not to forget of course if a third-party

365
00:14:14,959 --> 00:14:17,279
script is tempered and

366
00:14:17,279 --> 00:14:20,079
and is actually able to execute on the

367
00:14:20,079 --> 00:14:21,279
execution environment

368
00:14:21,279 --> 00:14:23,199
it's also able to tamper with first

369
00:14:23,199 --> 00:14:24,720
party code and make it do

370
00:14:24,720 --> 00:14:27,519
something different so everything should

371
00:14:27,519 --> 00:14:27,839
be

372
00:14:27,839 --> 00:14:30,320
fenced and and and we should apply the

373
00:14:30,320 --> 00:14:32,160
least privilege principle to

374
00:14:32,160 --> 00:14:35,360
the whole web application

375
00:14:35,360 --> 00:14:38,560
uh to do this we we use a

376
00:14:38,560 --> 00:14:40,199
technique called javascript

377
00:14:40,199 --> 00:14:41,920
virtualization um

378
00:14:41,920 --> 00:14:44,959
i will tell you uh roughly how it works

379
00:14:44,959 --> 00:14:48,079
so we need to add an embedded agent this

380
00:14:48,079 --> 00:14:48,800
is actually

381
00:14:48,800 --> 00:14:51,360
a javascript that you need to include in

382
00:14:51,360 --> 00:14:53,040
the page it should be loaded

383
00:14:53,040 --> 00:14:56,839
as early as possible and what it does

384
00:14:56,839 --> 00:14:59,600
is it's proxies

385
00:14:59,600 --> 00:15:02,639
a bunch of things in the in the the web

386
00:15:02,639 --> 00:15:03,360
apis

387
00:15:03,360 --> 00:15:07,120
uh i create element insert before um

388
00:15:07,120 --> 00:15:10,560
xhr open and send and uh

389
00:15:10,560 --> 00:15:13,680
when when the other files are loaded

390
00:15:13,680 --> 00:15:16,320
uh they will actually see the proxied

391
00:15:16,320 --> 00:15:17,040
versions

392
00:15:17,040 --> 00:15:20,240
of those uh methods and

393
00:15:20,240 --> 00:15:23,440
and and by going through our virtualized

394
00:15:23,440 --> 00:15:25,760
implementations we are able to

395
00:15:25,760 --> 00:15:28,639
enforce the rules uh that uh were

396
00:15:28,639 --> 00:15:30,480
configured

397
00:15:30,480 --> 00:15:32,880
so this is uh more than enough to

398
00:15:32,880 --> 00:15:33,600
mitigate

399
00:15:33,600 --> 00:15:35,440
this type of attacks match card from

400
00:15:35,440 --> 00:15:37,120
jacking or

401
00:15:37,120 --> 00:15:40,880
any type of event handler hijacking um

402
00:15:40,880 --> 00:15:44,079
it's it's very useful to prevent data

403
00:15:44,079 --> 00:15:46,079
leakage because you can enforce uh

404
00:15:46,079 --> 00:15:48,480
to to what domains data can be sent out

405
00:15:48,480 --> 00:15:50,160
and you can actually control

406
00:15:50,160 --> 00:15:53,440
what data is being sent out so you can

407
00:15:53,440 --> 00:15:56,880
enforce the the the syntax

408
00:15:56,880 --> 00:16:00,240
and uh of the data going out um

409
00:16:00,240 --> 00:16:03,279
and even our embedded agent code is

410
00:16:03,279 --> 00:16:04,240
protected with

411
00:16:04,240 --> 00:16:07,680
um with with temporal resistance

412
00:16:07,680 --> 00:16:10,399
javascript obfuscation so in a nutshell

413
00:16:10,399 --> 00:16:13,920
this is javascript virtualization

414
00:16:13,920 --> 00:16:16,320
but what we are we have been doing

415
00:16:16,320 --> 00:16:17,279
lately and

416
00:16:17,279 --> 00:16:20,320
the main topic of this talk is

417
00:16:20,320 --> 00:16:23,519
magekart's classification so

418
00:16:23,519 --> 00:16:27,040
um obviously by using the solution i've

419
00:16:27,040 --> 00:16:28,959
just described we can fence the scripts

420
00:16:28,959 --> 00:16:31,279
we can block data from going out

421
00:16:31,279 --> 00:16:34,800
but uh we do that because we

422
00:16:34,800 --> 00:16:37,519
we can roll out the rules uh to prevent

423
00:16:37,519 --> 00:16:37,920
those

424
00:16:37,920 --> 00:16:40,800
those things from happening but how can

425
00:16:40,800 --> 00:16:42,639
we know for sure

426
00:16:42,639 --> 00:16:45,839
that the the thing causing that behavior

427
00:16:45,839 --> 00:16:49,040
was a schemer in the first place uh

428
00:16:49,040 --> 00:16:51,839
so this is a question that we had and

429
00:16:51,839 --> 00:16:52,480
also

430
00:16:52,480 --> 00:16:55,839
if it's if if it's indeed it's a schemer

431
00:16:55,839 --> 00:16:58,880
which schemer are we talking about so in

432
00:16:58,880 --> 00:17:00,480
order to solve this problem

433
00:17:00,480 --> 00:17:02,839
we started building a mage card

434
00:17:02,839 --> 00:17:05,439
classifier

435
00:17:05,439 --> 00:17:09,439
and we started a simple

436
00:17:09,439 --> 00:17:11,679
with a simple solution based in static

437
00:17:11,679 --> 00:17:14,079
code analysis

438
00:17:14,079 --> 00:17:16,240
a little disclaimer here this is a work

439
00:17:16,240 --> 00:17:18,000
in progress so we have been working on

440
00:17:18,000 --> 00:17:18,880
this and we'll

441
00:17:18,880 --> 00:17:21,679
keep working on this and it answers the

442
00:17:21,679 --> 00:17:22,319
question

443
00:17:22,319 --> 00:17:25,439
how likely is that this specific file

444
00:17:25,439 --> 00:17:27,280
contains a magic card schemer

445
00:17:27,280 --> 00:17:31,039
and the answer is a percentage

446
00:17:31,360 --> 00:17:34,080
so the requirements for this classifier

447
00:17:34,080 --> 00:17:35,039
is

448
00:17:35,039 --> 00:17:37,520
are that it should be purely based on

449
00:17:37,520 --> 00:17:38,160
behavior

450
00:17:38,160 --> 00:17:40,720
so we didn't wanted any hard-coded

451
00:17:40,720 --> 00:17:42,559
signatures or regexes

452
00:17:42,559 --> 00:17:46,400
because they are very easy to bypass

453
00:17:46,400 --> 00:17:49,760
you can change you can change the the

454
00:17:49,760 --> 00:17:52,880
the aspect of of of javascript very

455
00:17:52,880 --> 00:17:53,679
easily

456
00:17:53,679 --> 00:17:56,160
by just applying code transformations

457
00:17:56,160 --> 00:17:57,679
obfuscation

458
00:17:57,679 --> 00:18:01,120
minification so it's very easy to modify

459
00:18:01,120 --> 00:18:03,360
the the aspect of the code just enough

460
00:18:03,360 --> 00:18:05,679
so that the signatures break

461
00:18:05,679 --> 00:18:08,400
that's why we didn't want any anything

462
00:18:08,400 --> 00:18:10,240
related to that we wanted something

463
00:18:10,240 --> 00:18:11,440
based on behavior

464
00:18:11,440 --> 00:18:14,640
because um at the very end

465
00:18:14,640 --> 00:18:16,960
the the behavior of the code will be the

466
00:18:16,960 --> 00:18:19,120
same

467
00:18:19,120 --> 00:18:21,840
uh it should also deal with obfuscation

468
00:18:21,840 --> 00:18:23,039
uh like i said

469
00:18:23,039 --> 00:18:26,720
it should some some um some code is

470
00:18:26,720 --> 00:18:27,520
obfuscated

471
00:18:27,520 --> 00:18:30,559
most schemers are obfuscated

472
00:18:30,559 --> 00:18:32,960
and since we are using static code

473
00:18:32,960 --> 00:18:33,840
analysis

474
00:18:33,840 --> 00:18:37,039
we we have to have a way to look

475
00:18:37,039 --> 00:18:40,480
underneath the obfuscation to be able to

476
00:18:40,480 --> 00:18:41,600
pick up the

477
00:18:41,600 --> 00:18:44,799
features that we are looking for so the

478
00:18:44,799 --> 00:18:47,440
the solution uh needs automatic the

479
00:18:47,440 --> 00:18:49,039
obfuscation

480
00:18:49,039 --> 00:18:52,160
in order to be effective uh

481
00:18:52,160 --> 00:18:54,640
it's we also need to extract a very

482
00:18:54,640 --> 00:18:56,720
diverse set of behaviors because

483
00:18:56,720 --> 00:18:59,039
right now we know what schemers are

484
00:18:59,039 --> 00:19:01,600
doing but we never know in the future

485
00:19:01,600 --> 00:19:04,480
so we need to look for a very complete a

486
00:19:04,480 --> 00:19:06,240
very diverse set of behaviors

487
00:19:06,240 --> 00:19:09,120
in order to better learn how they are

488
00:19:09,120 --> 00:19:10,080
evolving and

489
00:19:10,080 --> 00:19:12,640
and to be very effective in in finding

490
00:19:12,640 --> 00:19:13,600
them

491
00:19:13,600 --> 00:19:16,559
and finally needs to be accurate so when

492
00:19:16,559 --> 00:19:18,400
we say it's uh

493
00:19:18,400 --> 00:19:22,840
it's a web schemer it needs to be a web

494
00:19:22,840 --> 00:19:24,400
schemer

495
00:19:24,400 --> 00:19:27,200
here you can see the architecture very

496
00:19:27,200 --> 00:19:28,160
simply put

497
00:19:28,160 --> 00:19:31,120
um we have a notification detection

498
00:19:31,120 --> 00:19:31,760
module

499
00:19:31,760 --> 00:19:34,720
it just tells us if it's obfuscated or

500
00:19:34,720 --> 00:19:35,520
not

501
00:19:35,520 --> 00:19:38,400
and what obfuscation it has been used

502
00:19:38,400 --> 00:19:40,080
what tool

503
00:19:40,080 --> 00:19:42,960
and then we have uh the obfuscator

504
00:19:42,960 --> 00:19:44,480
module

505
00:19:44,480 --> 00:19:48,160
that the office gets the codes

506
00:19:48,240 --> 00:19:51,280
then we have a features extractor and

507
00:19:51,280 --> 00:19:52,240
these features

508
00:19:52,240 --> 00:19:55,760
are passed to a scorer that comes out

509
00:19:55,760 --> 00:19:56,559
with with the

510
00:19:56,559 --> 00:20:00,160
final score of the

511
00:20:00,160 --> 00:20:04,000
of the file so we are using heuristics

512
00:20:04,000 --> 00:20:07,280
and simple heuristics and we are

513
00:20:07,280 --> 00:20:10,480
grouping the features um according to

514
00:20:10,480 --> 00:20:11,600
semantics

515
00:20:11,600 --> 00:20:14,000
and and establishing weights for

516
00:20:14,000 --> 00:20:15,520
different groups

517
00:20:15,520 --> 00:20:18,960
so right now no ai has been used um i'm

518
00:20:18,960 --> 00:20:21,840
saying this now because

519
00:20:21,840 --> 00:20:23,679
otherwise i would get the question at

520
00:20:23,679 --> 00:20:25,440
the end

521
00:20:25,440 --> 00:20:29,120
but we do have plans to to use ai

522
00:20:29,120 --> 00:20:32,640
in the future namely machine learning

523
00:20:32,640 --> 00:20:35,840
to learn what features uh schemers have

524
00:20:35,840 --> 00:20:37,679
been starting to do

525
00:20:37,679 --> 00:20:41,200
um starting to to use and and

526
00:20:41,200 --> 00:20:45,280
and to to grow this classifier

527
00:20:45,280 --> 00:20:48,240
these are the some examples of the

528
00:20:48,240 --> 00:20:49,919
different

529
00:20:49,919 --> 00:20:51,520
features that we are collecting

530
00:20:51,520 --> 00:20:53,840
organized in groups so are looking for

531
00:20:53,840 --> 00:20:54,720
very diverse

532
00:20:54,720 --> 00:20:59,200
types of things obfuscation of course

533
00:20:59,200 --> 00:21:02,240
fingerprinting if they're using hooking

534
00:21:02,240 --> 00:21:03,600
into events or

535
00:21:03,600 --> 00:21:07,200
forms if they're using the network

536
00:21:07,200 --> 00:21:09,840
so a lot of different things uh even

537
00:21:09,840 --> 00:21:11,520
keywords we're looking for certain

538
00:21:11,520 --> 00:21:12,559
keywords

539
00:21:12,559 --> 00:21:16,080
uh usually used in in them

540
00:21:16,080 --> 00:21:19,360
in payment forms like billing or credit

541
00:21:19,360 --> 00:21:21,760
card etc

542
00:21:21,760 --> 00:21:25,440
and we have been growing this list

543
00:21:25,440 --> 00:21:28,960
so now time for a few demos let's start

544
00:21:28,960 --> 00:21:32,480
by the british airways web schemer um

545
00:21:32,480 --> 00:21:34,880
this skimmer uh it's actually very

546
00:21:34,880 --> 00:21:35,520
simple

547
00:21:35,520 --> 00:21:37,679
so you can see the whole skimmer uh on

548
00:21:37,679 --> 00:21:38,799
the right

549
00:21:38,799 --> 00:21:42,080
uh it didn't use obfuscation so it's

550
00:21:42,080 --> 00:21:43,120
very

551
00:21:43,120 --> 00:21:46,000
um and it was one of the first

552
00:21:46,000 --> 00:21:47,039
high-profile

553
00:21:47,039 --> 00:21:50,799
mage guard attacks that we have seen uh

554
00:21:50,799 --> 00:21:54,080
and um it the the problem happened when

555
00:21:54,080 --> 00:21:58,640
uh dependency modernizer um was

556
00:21:58,640 --> 00:22:01,679
tempered by someone and someone

557
00:22:01,679 --> 00:22:04,320
at the british airways has pulled a

558
00:22:04,320 --> 00:22:07,120
modified version of modernizer

559
00:22:07,120 --> 00:22:11,280
and deployed it locally um

560
00:22:11,280 --> 00:22:15,200
so this is uh one one um

561
00:22:15,200 --> 00:22:17,280
one one problem is dealing with third

562
00:22:17,280 --> 00:22:18,880
with third-party codes

563
00:22:18,880 --> 00:22:21,120
sometimes a lot of people decide to host

564
00:22:21,120 --> 00:22:22,960
it themselves but they have to be

565
00:22:22,960 --> 00:22:23,520
careful

566
00:22:23,520 --> 00:22:26,559
uh where they are pulling that code from

567
00:22:26,559 --> 00:22:29,919
and and make sure that you

568
00:22:29,919 --> 00:22:32,400
audits that third-party components

569
00:22:32,400 --> 00:22:33,760
frequently

570
00:22:33,760 --> 00:22:36,799
um so it's using target selectors

571
00:22:36,799 --> 00:22:40,080
it's using event binding and serializing

572
00:22:40,080 --> 00:22:40,960
the whole form

573
00:22:40,960 --> 00:22:44,000
and sending this using it it's xhr

574
00:22:44,000 --> 00:22:48,080
post to this domain uh be

575
00:22:48,080 --> 00:22:51,600
a waze.com which is not a

576
00:22:51,600 --> 00:22:55,200
domain that belongs to british airways

577
00:22:55,200 --> 00:22:57,840
this was actually the biggest gdpr fine

578
00:22:57,840 --> 00:22:58,559
ever

579
00:22:58,559 --> 00:23:01,600
so um some say

580
00:23:01,600 --> 00:23:04,480
that it lasted 15 days some say that it

581
00:23:04,480 --> 00:23:05,679
lasted two months

582
00:23:05,679 --> 00:23:09,679
uh the the official numbers

583
00:23:09,679 --> 00:23:13,120
say that uh almost 400

584
00:23:13,120 --> 00:23:16,320
000 credit cards were schemed um

585
00:23:16,320 --> 00:23:18,640
and because they didn't have any

586
00:23:18,640 --> 00:23:20,960
protection mechanisms in place

587
00:23:20,960 --> 00:23:24,480
uh they they didn't took precautions

588
00:23:24,480 --> 00:23:27,919
um the british airways was fined with

589
00:23:27,919 --> 00:23:31,840
roughly 230 million us dollars

590
00:23:31,840 --> 00:23:34,960
so it was the biggest fine ever of the

591
00:23:34,960 --> 00:23:38,640
gdpr um

592
00:23:38,640 --> 00:23:41,679
so here is the demo uh to save time i

593
00:23:41,679 --> 00:23:44,159
pre-recorded the demo in my laptop

594
00:23:44,159 --> 00:23:47,200
so let me just hit play

595
00:23:47,200 --> 00:23:51,440
so this is the modernizr library

596
00:23:51,440 --> 00:23:54,240
and the code has been beautified because

597
00:23:54,240 --> 00:23:55,760
it was minimized

598
00:23:55,760 --> 00:23:58,320
minified and here at the very end you

599
00:23:58,320 --> 00:24:01,600
see the the web schemer

600
00:24:02,880 --> 00:24:07,120
and it's uh running in the onload events

601
00:24:07,120 --> 00:24:10,720
uh actually using jquery and and

602
00:24:10,720 --> 00:24:13,279
binding the the mouse up and touch end

603
00:24:13,279 --> 00:24:14,159
events

604
00:24:14,159 --> 00:24:16,640
and serializing the whole form and

605
00:24:16,640 --> 00:24:17,440
sending it

606
00:24:17,440 --> 00:24:21,520
to um that endpoint controlled by the

607
00:24:21,520 --> 00:24:22,240
attacker

608
00:24:22,240 --> 00:24:25,440
so we are running our classifier next uh

609
00:24:25,440 --> 00:24:27,760
it's a cli tool

610
00:24:27,760 --> 00:24:32,640
um we use as inputs the

611
00:24:32,640 --> 00:24:35,919
the web schemer file

612
00:24:38,080 --> 00:24:40,240
and the output is the features that have

613
00:24:40,240 --> 00:24:41,279
been detected

614
00:24:41,279 --> 00:24:44,960
and the final score which is uh 52

615
00:24:44,960 --> 00:24:48,320
so it's we consider over 50 to be the

616
00:24:48,320 --> 00:24:50,240
threshold that we consider to be a mage

617
00:24:50,240 --> 00:24:51,760
card schemer so it's just

618
00:24:51,760 --> 00:24:54,799
over uh the threshold that we are

619
00:24:54,799 --> 00:24:55,840
considering

620
00:24:55,840 --> 00:24:57,919
so we would still consider this to be

621
00:24:57,919 --> 00:24:59,279
magekart

622
00:24:59,279 --> 00:25:02,320
uh but

623
00:25:03,440 --> 00:25:08,240
but not for much so

624
00:25:10,480 --> 00:25:12,640
so the detective features uh so we

625
00:25:12,640 --> 00:25:14,400
detect a lot of different features

626
00:25:14,400 --> 00:25:17,600
uh but uh this web schema is actually

627
00:25:17,600 --> 00:25:18,240
very

628
00:25:18,240 --> 00:25:20,080
very different from the the current web

629
00:25:20,080 --> 00:25:22,720
schemer so it doesn't use obfuscation

630
00:25:22,720 --> 00:25:26,799
um it's only a single function so it's

631
00:25:26,799 --> 00:25:29,120
very different looking from the current

632
00:25:29,120 --> 00:25:31,120
um

633
00:25:31,120 --> 00:25:34,480
web schemers second example the

634
00:25:34,480 --> 00:25:37,679
inventor that has shown you before uh

635
00:25:37,679 --> 00:25:41,600
so this example um this schemer is

636
00:25:41,600 --> 00:25:43,840
is quite different from the the previous

637
00:25:43,840 --> 00:25:45,840
one so it's obfuscated

638
00:25:45,840 --> 00:25:48,960
uh it does page location check so

639
00:25:48,960 --> 00:25:50,799
it's actually checking if it's running

640
00:25:50,799 --> 00:25:52,480
in the checkout page

641
00:25:52,480 --> 00:25:56,240
uh the ticketmaster web uh

642
00:25:56,240 --> 00:25:59,679
schemer wasn't doing that and and and

643
00:25:59,679 --> 00:26:01,520
basically it was running in all the

644
00:26:01,520 --> 00:26:03,039
pages so

645
00:26:03,039 --> 00:26:06,720
um that can be uh more noisy

646
00:26:06,720 --> 00:26:09,360
because by running in all the pages

647
00:26:09,360 --> 00:26:10,000
there are

648
00:26:10,000 --> 00:26:12,640
higher chances of being discovered so by

649
00:26:12,640 --> 00:26:13,679
limiting to

650
00:26:13,679 --> 00:26:18,080
just one or two pages they're actually

651
00:26:18,080 --> 00:26:20,559
being slightly more stealthy and and

652
00:26:20,559 --> 00:26:22,240
that's good for them because the longer

653
00:26:22,240 --> 00:26:22,880
they stay

654
00:26:22,880 --> 00:26:25,520
in the page with without being detected

655
00:26:25,520 --> 00:26:26,159
uh

656
00:26:26,159 --> 00:26:27,919
better chances that they are collecting

657
00:26:27,919 --> 00:26:29,919
more credit card uh

658
00:26:29,919 --> 00:26:32,640
credit card information uh they're also

659
00:26:32,640 --> 00:26:34,320
using multi-page checkouts

660
00:26:34,320 --> 00:26:37,919
so they're this is uh

661
00:26:37,919 --> 00:26:40,320
this is used because uh sometimes the

662
00:26:40,320 --> 00:26:41,520
checkout forms

663
00:26:41,520 --> 00:26:44,720
they collect data uh across different

664
00:26:44,720 --> 00:26:45,679
pages

665
00:26:45,679 --> 00:26:47,919
so they are they are storing data in

666
00:26:47,919 --> 00:26:49,360
cookies and then

667
00:26:49,360 --> 00:26:51,760
uh in the final step they they pick up

668
00:26:51,760 --> 00:26:54,080
the data and send it send it to the drop

669
00:26:54,080 --> 00:26:56,480
server

670
00:26:57,120 --> 00:27:00,480
so um i'm going to run the demo

671
00:27:00,480 --> 00:27:03,600
uh in three versions of this file

672
00:27:03,600 --> 00:27:06,400
so the first one is a de-obfuscated

673
00:27:06,400 --> 00:27:08,480
version

674
00:27:08,480 --> 00:27:12,320
of this web schemer the second one is

675
00:27:12,320 --> 00:27:15,360
the obfuscated version of the schema but

676
00:27:15,360 --> 00:27:15,679
just

677
00:27:15,679 --> 00:27:18,640
the schemer not the file where the the

678
00:27:18,640 --> 00:27:20,000
schema was

679
00:27:20,000 --> 00:27:23,679
inserted and finally the third

680
00:27:23,679 --> 00:27:26,799
version is the the off-scale version but

681
00:27:26,799 --> 00:27:29,760
within the scope of the full file so i'm

682
00:27:29,760 --> 00:27:33,279
doing this because i want to

683
00:27:33,279 --> 00:27:36,399
provide a comparison between the the

684
00:27:36,399 --> 00:27:40,399
the scores of all three versions

685
00:27:42,960 --> 00:27:45,600
so this is the the obfuscated version of

686
00:27:45,600 --> 00:27:48,399
the schemer and just the skimmer

687
00:27:48,399 --> 00:27:53,520
the drop server is very easy to see

688
00:27:53,520 --> 00:27:56,480
let's run this

689
00:28:00,640 --> 00:28:05,200
okay so we the final score is 66 percent

690
00:28:05,200 --> 00:28:07,919
and a few features are detected

691
00:28:07,919 --> 00:28:10,240
obfuscation is not detected because

692
00:28:10,240 --> 00:28:13,679
we de-obfuscated the the schemer

693
00:28:13,679 --> 00:28:17,760
and we see like the use of rejects is

694
00:28:17,760 --> 00:28:20,880
uh keyword password set timeout

695
00:28:20,880 --> 00:28:24,399
uh location checking

696
00:28:24,399 --> 00:28:28,960
now next we will run with the obfuscated

697
00:28:28,960 --> 00:28:32,480
version but just a schemer

698
00:28:40,640 --> 00:28:43,679
and it gives us a final score of

699
00:28:43,679 --> 00:28:47,679
181 percent so uh certainly a

700
00:28:47,679 --> 00:28:50,000
good increase compared with the previous

701
00:28:50,000 --> 00:28:51,440
uh version

702
00:28:51,440 --> 00:28:54,640
and obfuscation was detected

703
00:28:54,640 --> 00:28:57,679
and finally the full file used and

704
00:28:57,679 --> 00:29:01,120
with the obfuscated schema so and now we

705
00:29:01,120 --> 00:29:04,720
we see 85 so as you can see

706
00:29:04,720 --> 00:29:09,279
um as we detect more features

707
00:29:09,279 --> 00:29:13,039
uh the the the score gets higher

708
00:29:13,039 --> 00:29:15,039
and we are more certain that we are

709
00:29:15,039 --> 00:29:16,159
dealing with the

710
00:29:16,159 --> 00:29:20,080
with the web schemer and even detecting

711
00:29:20,080 --> 00:29:24,080
uh one line of obfuscated javascripts uh

712
00:29:24,080 --> 00:29:27,120
in in in the file that is not obfuscated

713
00:29:27,120 --> 00:29:30,240
is very suspicious and something that uh

714
00:29:30,240 --> 00:29:34,320
weighs on the scoring uh heuristics

715
00:29:34,320 --> 00:29:36,799
so as you can see detected features a

716
00:29:36,799 --> 00:29:38,559
lot of different features detected in

717
00:29:38,559 --> 00:29:39,919
the first version

718
00:29:39,919 --> 00:29:43,840
it was de-obfuscated so it was easy to

719
00:29:43,840 --> 00:29:45,360
collect these features

720
00:29:45,360 --> 00:29:48,320
the second version was obfuscated but we

721
00:29:48,320 --> 00:29:51,440
were able to de-obfuscate the

722
00:29:51,440 --> 00:29:54,480
the file and grab the same features

723
00:29:54,480 --> 00:29:56,480
uh we also detected the type of

724
00:29:56,480 --> 00:29:58,399
obfuscation it was used the

725
00:29:58,399 --> 00:30:01,840
sun x tool which is um an open source

726
00:30:01,840 --> 00:30:05,760
obfuscation it's not very good but it's

727
00:30:05,760 --> 00:30:08,720
it's free so it's it's used by a lot of

728
00:30:08,720 --> 00:30:09,279
uh

729
00:30:09,279 --> 00:30:12,880
bad guys um and and finally

730
00:30:12,880 --> 00:30:16,000
uh we detected uh

731
00:30:16,000 --> 00:30:18,640
the same things as before but uh more

732
00:30:18,640 --> 00:30:20,320
than that we detected that the

733
00:30:20,320 --> 00:30:21,600
obfuscation portion

734
00:30:21,600 --> 00:30:24,880
was just uh about on the bottom of

735
00:30:24,880 --> 00:30:29,279
of the scripts the final

736
00:30:29,279 --> 00:30:34,799
schemer is this caesar plus skimmer

737
00:30:34,799 --> 00:30:37,679
this schemer is basically i brought this

738
00:30:37,679 --> 00:30:39,520
example because it's using the caesar

739
00:30:39,520 --> 00:30:41,120
plus obfuscation

740
00:30:41,120 --> 00:30:45,120
uh you can have a look at it

741
00:30:45,120 --> 00:30:48,720
in the image to the right um

742
00:30:48,720 --> 00:30:52,000
so the obfuscation is uh slightly weird

743
00:30:52,000 --> 00:30:55,039
weirder because it's using encoding uh

744
00:30:55,039 --> 00:30:57,760
it uses multi-page checkouts but not via

745
00:30:57,760 --> 00:30:58,720
cookies

746
00:30:58,720 --> 00:31:02,480
it's using local storage and

747
00:31:02,480 --> 00:31:05,600
it was hidden inside

748
00:31:05,600 --> 00:31:08,720
a jquery plugin

749
00:31:08,720 --> 00:31:11,919
and ready to download by anyone looking

750
00:31:11,919 --> 00:31:12,720
for

751
00:31:12,720 --> 00:31:16,720
that type of functionality

752
00:31:17,760 --> 00:31:20,480
so i'll i'll actually demo uh these at

753
00:31:20,480 --> 00:31:21,519
the end when the

754
00:31:21,519 --> 00:31:24,080
i i'll talk about our the obfuscation

755
00:31:24,080 --> 00:31:25,200
for caesar plus

756
00:31:25,200 --> 00:31:29,039
um for now i'm just saying that this

757
00:31:29,039 --> 00:31:31,360
scheme this particular schemer was

758
00:31:31,360 --> 00:31:32,080
scored

759
00:31:32,080 --> 00:31:35,120
in 86

760
00:31:36,080 --> 00:31:38,640
so it's slightly higher than the last

761
00:31:38,640 --> 00:31:39,600
example

762
00:31:39,600 --> 00:31:41,679
uh and the reason why is because the

763
00:31:41,679 --> 00:31:43,440
caesar obfuscation

764
00:31:43,440 --> 00:31:46,880
is uh is more unique um

765
00:31:46,880 --> 00:31:50,320
we don't see a benign code using caesar

766
00:31:50,320 --> 00:31:52,320
plus obfuscation that much

767
00:31:52,320 --> 00:31:56,480
so it's uh when we see caesar plus it's

768
00:31:56,480 --> 00:31:59,519
it's it's very likely that this is uh

769
00:31:59,519 --> 00:32:02,559
some some kind of malware and together

770
00:32:02,559 --> 00:32:04,240
with all the other features that we have

771
00:32:04,240 --> 00:32:05,200
extracted we

772
00:32:05,200 --> 00:32:07,440
concluded that that's good chances that

773
00:32:07,440 --> 00:32:10,960
we are talking about the web schemer

774
00:32:12,240 --> 00:32:15,519
so comparing all the schemers uh that we

775
00:32:15,519 --> 00:32:16,159
have seen

776
00:32:16,159 --> 00:32:19,360
um i present the

777
00:32:19,360 --> 00:32:22,080
presented the samples in increasing

778
00:32:22,080 --> 00:32:23,679
scoring order

779
00:32:23,679 --> 00:32:26,320
and uh as you can see all of those

780
00:32:26,320 --> 00:32:28,559
samples were considered to be

781
00:32:28,559 --> 00:32:33,120
schemers one of the good things about

782
00:32:33,120 --> 00:32:36,799
this classification is since it uses

783
00:32:36,799 --> 00:32:39,600
static code analysis it's very it's very

784
00:32:39,600 --> 00:32:42,000
easy to scale so it's very easy to

785
00:32:42,000 --> 00:32:44,799
run this through thousands or even

786
00:32:44,799 --> 00:32:46,799
millions of files uh

787
00:32:46,799 --> 00:32:48,640
we don't need to run a browser we don't

788
00:32:48,640 --> 00:32:51,440
need to do dynamic analysis

789
00:32:51,440 --> 00:32:54,080
so it's it's very it's very cheap to run

790
00:32:54,080 --> 00:32:55,279
this classifier

791
00:32:55,279 --> 00:32:57,919
and the the the results are very very

792
00:32:57,919 --> 00:32:59,039
promising

793
00:32:59,039 --> 00:33:02,640
so regarding the testing um we gathered

794
00:33:02,640 --> 00:33:06,960
a collection of 244 schema samples

795
00:33:06,960 --> 00:33:09,200
uh we also collected all the javascript

796
00:33:09,200 --> 00:33:10,000
from the top

797
00:33:10,000 --> 00:33:13,120
1000 alexa and we

798
00:33:13,120 --> 00:33:16,480
pre-labeled all the skimmer samples

799
00:33:16,480 --> 00:33:19,600
we ran the classifier through

800
00:33:19,600 --> 00:33:21,840
all the samples including the the

801
00:33:21,840 --> 00:33:22,960
schemers

802
00:33:22,960 --> 00:33:25,760
and at the end we compared the score

803
00:33:25,760 --> 00:33:26,720
that the

804
00:33:26,720 --> 00:33:29,760
the tool gave with with the label

805
00:33:29,760 --> 00:33:32,720
if any and we measured false positives

806
00:33:32,720 --> 00:33:33,039
and

807
00:33:33,039 --> 00:33:34,960
true positives and false negatives and

808
00:33:34,960 --> 00:33:37,600
true negatives

809
00:33:37,600 --> 00:33:41,039
the results are were very good so we we

810
00:33:41,039 --> 00:33:43,840
got a 95 percent true positives

811
00:33:43,840 --> 00:33:46,480
so we actually considered to be this to

812
00:33:46,480 --> 00:33:48,480
be very promising results

813
00:33:48,480 --> 00:33:51,760
obviously we are still uh optimizing and

814
00:33:51,760 --> 00:33:55,360
and improving the the classifier

815
00:33:55,360 --> 00:33:58,559
but uh for the the first

816
00:33:58,559 --> 00:34:00,880
batch of results uh i think they are

817
00:34:00,880 --> 00:34:05,600
very promising

818
00:34:05,600 --> 00:34:09,520
um so now i'll present brutus minus

819
00:34:09,520 --> 00:34:12,560
uh this was the surprise i saved for

820
00:34:12,560 --> 00:34:13,119
last

821
00:34:13,119 --> 00:34:16,719
um so when working uh

822
00:34:16,719 --> 00:34:20,879
in this classifier we as you saw we

823
00:34:20,879 --> 00:34:22,960
we were finding a lot of different uh

824
00:34:22,960 --> 00:34:24,960
web schemers using scissor plus

825
00:34:24,960 --> 00:34:28,239
obfuscation so we decided to build our

826
00:34:28,239 --> 00:34:28,639
own

827
00:34:28,639 --> 00:34:32,879
tool that the officegates caesar plus

828
00:34:32,879 --> 00:34:36,000
and and i'll i'll i'll show you a

829
00:34:36,000 --> 00:34:38,560
a very quick demo of that tool working

830
00:34:38,560 --> 00:34:39,199
on the

831
00:34:39,199 --> 00:34:42,239
on the sample before that uh a brief

832
00:34:42,239 --> 00:34:43,119
context about

833
00:34:43,119 --> 00:34:46,560
caesar plus obfuscation uh

834
00:34:46,560 --> 00:34:48,560
as i mentioned before it's available on

835
00:34:48,560 --> 00:34:50,239
the dark web for 100

836
00:34:50,239 --> 00:34:53,918
so it's uh it's pretty uh affordable for

837
00:34:53,918 --> 00:34:55,760
an attacker i would say

838
00:34:55,760 --> 00:35:00,000
um so no wonder that um

839
00:35:00,000 --> 00:35:03,440
they they are adding this type of um

840
00:35:03,440 --> 00:35:05,040
protection techniques to to their

841
00:35:05,040 --> 00:35:07,119
schemers it's actually more than this

842
00:35:07,119 --> 00:35:08,800
they are they are they are

843
00:35:08,800 --> 00:35:12,079
web schemers are evolving a lot uh

844
00:35:12,079 --> 00:35:14,000
they they have been using things like

845
00:35:14,000 --> 00:35:15,359
bot detection

846
00:35:15,359 --> 00:35:18,480
or stenography so it's it's a cat and

847
00:35:18,480 --> 00:35:19,440
mouse game

848
00:35:19,440 --> 00:35:23,760
for sure so this particular obfuscation

849
00:35:23,760 --> 00:35:27,680
it presents two layers of obfuscation

850
00:35:27,680 --> 00:35:32,079
that i will detail next it uses

851
00:35:32,079 --> 00:35:34,560
different techniques to obfuscate

852
00:35:34,560 --> 00:35:36,560
strings and integers

853
00:35:36,560 --> 00:35:40,880
uh for instance they are converting um

854
00:35:40,880 --> 00:35:44,800
converting a number to

855
00:35:44,800 --> 00:35:48,720
a string to the base 34

856
00:35:48,720 --> 00:35:50,720
representation of the string it's a way

857
00:35:50,720 --> 00:35:52,400
to encode the string

858
00:35:52,400 --> 00:35:54,960
they are using ternary operators they

859
00:35:54,960 --> 00:35:55,760
are encoding

860
00:35:55,760 --> 00:35:59,760
chars they are using regexes to

861
00:35:59,760 --> 00:36:02,560
find and replace portions of strings

862
00:36:02,560 --> 00:36:04,800
they are using that code injection

863
00:36:04,800 --> 00:36:07,839
um and they are using things like

864
00:36:07,839 --> 00:36:12,480
um unresolved symbols to break the code

865
00:36:12,480 --> 00:36:15,839
uh depending on certain checks

866
00:36:15,839 --> 00:36:18,640
so the first layer is using a lot of

867
00:36:18,640 --> 00:36:19,359
encoding

868
00:36:19,359 --> 00:36:22,480
uh as you could see here this is

869
00:36:22,480 --> 00:36:24,640
isn't valid javascript uh what you're

870
00:36:24,640 --> 00:36:26,400
seeing there it's a

871
00:36:26,400 --> 00:36:28,640
a bunch of strings that need to be

872
00:36:28,640 --> 00:36:29,920
decoded using

873
00:36:29,920 --> 00:36:34,800
uh eval and um

874
00:36:34,800 --> 00:36:38,160
but but it's just meant to to hide what

875
00:36:38,160 --> 00:36:40,320
they're doing underneath

876
00:36:40,320 --> 00:36:43,280
but it's more than that it's actually

877
00:36:43,280 --> 00:36:43,760
doing

878
00:36:43,760 --> 00:36:47,680
anti-tampering uh in the second layer

879
00:36:47,680 --> 00:36:50,560
so in the second layer uh after decoding

880
00:36:50,560 --> 00:36:51,359
it checks

881
00:36:51,359 --> 00:36:54,400
for a crc the crc is

882
00:36:54,400 --> 00:36:57,839
included in the file in the first layer

883
00:36:57,839 --> 00:37:01,200
using a variable and it's checking if

884
00:37:01,200 --> 00:37:01,520
the

885
00:37:01,520 --> 00:37:05,040
after decoding if the the decoded

886
00:37:05,040 --> 00:37:08,160
matches the if thing actually if the

887
00:37:08,160 --> 00:37:10,000
encoded for uh

888
00:37:10,000 --> 00:37:13,040
code is matching the crc and if not

889
00:37:13,040 --> 00:37:13,839
they're running

890
00:37:13,839 --> 00:37:15,920
um they're calling an undeclared

891
00:37:15,920 --> 00:37:18,800
function to break the code on purpose

892
00:37:18,800 --> 00:37:22,240
uh so it's actually slightly uh

893
00:37:22,240 --> 00:37:25,040
it's more difficult to automatically the

894
00:37:25,040 --> 00:37:26,160
officegate

895
00:37:26,160 --> 00:37:28,800
code that it's trying to self-check and

896
00:37:28,800 --> 00:37:29,200
and

897
00:37:29,200 --> 00:37:32,240
trying to be temporary resistant uh

898
00:37:32,240 --> 00:37:34,880
compared with other obfuscations that

899
00:37:34,880 --> 00:37:37,760
are more passive like the sonics that

900
00:37:37,760 --> 00:37:40,640
you saw before

901
00:37:41,440 --> 00:37:44,320
so here is the demo of us running brutus

902
00:37:44,320 --> 00:37:45,839
minus

903
00:37:45,839 --> 00:37:51,839
this is the obfuscated code

904
00:37:53,200 --> 00:37:55,760
so most most of the code is just the

905
00:37:55,760 --> 00:37:58,800
encoded strings

906
00:38:00,880 --> 00:38:04,800
and here i'm running the brutus minus

907
00:38:04,800 --> 00:38:07,839
which is a cli tool as well on that

908
00:38:07,839 --> 00:38:10,240
sample

909
00:38:10,880 --> 00:38:16,079
and redirecting to a new file

910
00:38:16,880 --> 00:38:18,960
so here you can see the brutus version

911
00:38:18,960 --> 00:38:20,079
of it so

912
00:38:20,079 --> 00:38:22,240
as you can see it's much more the

913
00:38:22,240 --> 00:38:23,359
obfuscated

914
00:38:23,359 --> 00:38:26,640
um we can still see a lot of different

915
00:38:26,640 --> 00:38:29,920
um so you can see that code but we see

916
00:38:29,920 --> 00:38:31,760
what what matters we see the page

917
00:38:31,760 --> 00:38:33,040
location check

918
00:38:33,040 --> 00:38:35,920
we see it using local storage to do

919
00:38:35,920 --> 00:38:39,200
multi-page checkouts

920
00:38:39,200 --> 00:38:43,040
we see it's sending data out

921
00:38:43,040 --> 00:38:46,160
hooking um grabbing all the data from

922
00:38:46,160 --> 00:38:47,599
the

923
00:38:47,599 --> 00:38:50,800
those form elements

924
00:38:52,000 --> 00:38:55,119
and finally we see the the drop server

925
00:38:55,119 --> 00:38:56,400
address

926
00:38:56,400 --> 00:39:00,400
and the xhr post to that address

927
00:39:00,400 --> 00:39:02,320
so everything that we need in order to

928
00:39:02,320 --> 00:39:04,640
classify is here

929
00:39:04,640 --> 00:39:08,000
um and it's full

930
00:39:08,000 --> 00:39:09,839
fully automate automated uh the

931
00:39:09,839 --> 00:39:11,200
obfuscation so

932
00:39:11,200 --> 00:39:13,839
again the cost of running this is close

933
00:39:13,839 --> 00:39:16,400
to zero

934
00:39:19,920 --> 00:39:22,720
so wrapping up

935
00:39:22,960 --> 00:39:25,119
so we mostly address the the topic of

936
00:39:25,119 --> 00:39:27,520
web schemers

937
00:39:27,520 --> 00:39:29,359
they are getting increasingly more

938
00:39:29,359 --> 00:39:30,800
sophisticated as i

939
00:39:30,800 --> 00:39:33,599
uh mentioned before uh they are using

940
00:39:33,599 --> 00:39:35,119
things like bot detection

941
00:39:35,119 --> 00:39:38,400
uh they are using stenography they are

942
00:39:38,400 --> 00:39:39,280
trying to use

943
00:39:39,280 --> 00:39:42,400
heavier obfuscation and

944
00:39:42,400 --> 00:39:46,720
it will only get more complex as we go

945
00:39:46,720 --> 00:39:48,960
so the the defenses need to be

946
00:39:48,960 --> 00:39:50,320
sophisticated

947
00:39:50,320 --> 00:39:54,320
as well but they need to be scalable

948
00:39:54,320 --> 00:39:57,119
and they need to be effective so our

949
00:39:57,119 --> 00:39:58,000
approach is

950
00:39:58,000 --> 00:40:00,720
based on behavior which is good because

951
00:40:00,720 --> 00:40:02,160
it's more resilient to

952
00:40:02,160 --> 00:40:05,599
the code changing form um

953
00:40:05,599 --> 00:40:07,359
so we needed the classification a

954
00:40:07,359 --> 00:40:08,640
classifier to

955
00:40:08,640 --> 00:40:10,560
know what type of schemer we are dealing

956
00:40:10,560 --> 00:40:13,040
with so we decided to build one

957
00:40:13,040 --> 00:40:16,160
that's what we presented um you can work

958
00:40:16,160 --> 00:40:16,960
with different

959
00:40:16,960 --> 00:40:20,240
layers of obfuscated code as you seen

960
00:40:20,240 --> 00:40:23,040
as a as you saw the results are very

961
00:40:23,040 --> 00:40:25,839
promising

962
00:40:26,000 --> 00:40:29,280
if not if not deciding automatically

963
00:40:29,280 --> 00:40:32,079
it can at the very minimum select the

964
00:40:32,079 --> 00:40:34,319
best candidates for analysis

965
00:40:34,319 --> 00:40:37,440
and it scales very well at the very end

966
00:40:37,440 --> 00:40:39,839
as a bonus represented brutus minus

967
00:40:39,839 --> 00:40:42,319
uh which is the our caesar plus the

968
00:40:42,319 --> 00:40:43,760
obfuscated

969
00:40:43,760 --> 00:40:46,720
and of course this uh will keep working

970
00:40:46,720 --> 00:40:47,359
um

971
00:40:47,359 --> 00:40:51,119
on our classifier so um

972
00:40:51,119 --> 00:40:53,520
i don't know when we will be the next

973
00:40:53,520 --> 00:40:54,160
talk but

974
00:40:54,160 --> 00:40:56,560
uh we'll probably keep presenting the

975
00:40:56,560 --> 00:40:57,520
results uh

976
00:40:57,520 --> 00:41:00,560
as we develop this

977
00:41:01,040 --> 00:41:04,240
that's all for me uh thank you and

978
00:41:04,240 --> 00:41:07,839
back to the studio

