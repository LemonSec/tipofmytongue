1
00:00:10,639 --> 00:00:11,679
so yes my name

2
00:00:11,679 --> 00:00:14,480
is rogan dawes i work for a company

3
00:00:14,480 --> 00:00:15,120
called

4
00:00:15,120 --> 00:00:18,720
orange cyber defense we are the sense

5
00:00:18,720 --> 00:00:19,279
post

6
00:00:19,279 --> 00:00:23,119
team that

7
00:00:26,400 --> 00:00:28,640
that was recently acquired by orange

8
00:00:28,640 --> 00:00:30,720
cyber defense sense posts

9
00:00:30,720 --> 00:00:31,950
ourselves has been

10
00:00:31,950 --> 00:00:33,920
[Music]

11
00:00:33,920 --> 00:00:36,640
involved in the information security

12
00:00:36,640 --> 00:00:38,640
arena since 2002

13
00:00:38,640 --> 00:00:42,000
2001 actually we're based in south

14
00:00:42,000 --> 00:00:42,640
africa

15
00:00:42,640 --> 00:00:46,640
and in the united kingdom um

16
00:00:46,640 --> 00:00:50,320
yeah so

17
00:00:50,320 --> 00:00:51,680
let's do a little bit of an

18
00:00:51,680 --> 00:00:54,000
archaeological expedition

19
00:00:54,000 --> 00:00:57,199
into the sort of history of

20
00:00:57,199 --> 00:01:01,120
what came before usb and why usb

21
00:01:01,120 --> 00:01:04,239
was such a such a great idea

22
00:01:04,239 --> 00:01:07,199
was so important

23
00:01:07,439 --> 00:01:10,080
so historically and i don't know how

24
00:01:10,080 --> 00:01:11,520
many of you

25
00:01:11,520 --> 00:01:13,280
have used computers that go back this

26
00:01:13,280 --> 00:01:15,200
far we had

27
00:01:15,200 --> 00:01:17,280
a number of different peripheral

28
00:01:17,280 --> 00:01:18,799
interfaces

29
00:01:18,799 --> 00:01:21,840
that we could use to connect devices

30
00:01:21,840 --> 00:01:22,400
such as

31
00:01:22,400 --> 00:01:25,119
modems joysticks printers keyboards and

32
00:01:25,119 --> 00:01:27,840
mice

33
00:01:27,840 --> 00:01:33,119
we had just you know rs-232 serial ports

34
00:01:33,119 --> 00:01:36,799
that we had mice connected to we had ps2

35
00:01:36,799 --> 00:01:37,840
keyboards

36
00:01:37,840 --> 00:01:41,439
we had modems connected using rs232

37
00:01:41,439 --> 00:01:44,159
and we had joysticks connected using

38
00:01:44,159 --> 00:01:45,600
game ports

39
00:01:45,600 --> 00:01:48,479
and of course the printers connected

40
00:01:48,479 --> 00:01:51,040
using parallel ports

41
00:01:51,040 --> 00:01:54,560
and all of these connectors

42
00:01:54,560 --> 00:01:57,439
were different to start with which meant

43
00:01:57,439 --> 00:01:58,560
that

44
00:01:58,560 --> 00:02:00,560
you always had different cables and

45
00:02:00,560 --> 00:02:02,320
maybe you were going to run out of ports

46
00:02:02,320 --> 00:02:04,159
if you wanted to connect two printers to

47
00:02:04,159 --> 00:02:05,040
your

48
00:02:05,040 --> 00:02:08,000
to your computer you were always in a

49
00:02:08,000 --> 00:02:11,120
difficult situation

50
00:02:11,120 --> 00:02:13,680
the implication though about having all

51
00:02:13,680 --> 00:02:14,720
of these different

52
00:02:14,720 --> 00:02:18,160
connectors is that there was generally

53
00:02:18,160 --> 00:02:19,200
no

54
00:02:19,200 --> 00:02:21,680
automatic configuration of the

55
00:02:21,680 --> 00:02:23,920
peripherals that you plugged in

56
00:02:23,920 --> 00:02:28,160
apart from keyboards connected using ps2

57
00:02:28,160 --> 00:02:30,319
and mice connected using ps2 because

58
00:02:30,319 --> 00:02:32,480
those were ports dedicated

59
00:02:32,480 --> 00:02:35,760
for just that purpose but for other

60
00:02:35,760 --> 00:02:37,599
devices such as serial mice

61
00:02:37,599 --> 00:02:41,280
serial modems serial printers

62
00:02:41,280 --> 00:02:43,440
joysticks and other printers there

63
00:02:43,440 --> 00:02:45,440
generally was this administrative

64
00:02:45,440 --> 00:02:47,200
overhead

65
00:02:47,200 --> 00:02:50,560
that was required in order to

66
00:02:50,560 --> 00:02:54,400
get the device working specifying

67
00:02:54,400 --> 00:02:58,239
which printer sorry which port

68
00:02:58,239 --> 00:03:01,599
the device was connected to as well as

69
00:03:01,599 --> 00:03:04,200
loading device drivers from

70
00:03:04,200 --> 00:03:05,440
[Music]

71
00:03:05,440 --> 00:03:08,959
external media the old floppy disks

72
00:03:08,959 --> 00:03:13,440
and so on that was a sort of

73
00:03:13,440 --> 00:03:16,400
common experience for those of us who

74
00:03:16,400 --> 00:03:19,840
had to work through these times

75
00:03:20,000 --> 00:03:23,440
and so this administrative overhead was

76
00:03:23,440 --> 00:03:25,519
was really painful and there were many

77
00:03:25,519 --> 00:03:26,879
many drawbacks

78
00:03:26,879 --> 00:03:29,760
to to having all of these different

79
00:03:29,760 --> 00:03:31,280
peripherals

80
00:03:31,280 --> 00:03:35,280
peripheral interfaces and so now we've

81
00:03:35,280 --> 00:03:36,799
got

82
00:03:36,799 --> 00:03:40,000
usb and the situation

83
00:03:40,000 --> 00:03:42,480
is vastly improved we've got type a type

84
00:03:42,480 --> 00:03:44,480
b type mini a type mini b

85
00:03:44,480 --> 00:03:49,840
micro micro b usb 3 type c

86
00:03:50,000 --> 00:03:51,680
and actually i'm going to claim that

87
00:03:51,680 --> 00:03:55,920
this is a vast improvement

88
00:03:57,680 --> 00:04:01,200
so even though the connectors are

89
00:04:01,200 --> 00:04:01,760
different

90
00:04:01,760 --> 00:04:04,239
they're all electrically compatible so

91
00:04:04,239 --> 00:04:06,560
you so you can convert from one to the

92
00:04:06,560 --> 00:04:07,439
next

93
00:04:07,439 --> 00:04:11,760
using a simple dongle

94
00:04:11,760 --> 00:04:14,959
but the main thing that

95
00:04:14,959 --> 00:04:16,399
that led to what i claim is an

96
00:04:16,399 --> 00:04:18,639
improvement in the situation

97
00:04:18,639 --> 00:04:20,250
is the

98
00:04:20,250 --> 00:04:22,960
[Music]

99
00:04:22,960 --> 00:04:26,320
the usb device classes

100
00:04:26,320 --> 00:04:29,600
and the device descriptors that every

101
00:04:29,600 --> 00:04:31,440
single usb device

102
00:04:31,440 --> 00:04:34,000
has to implement and what this really

103
00:04:34,000 --> 00:04:35,280
means for us

104
00:04:35,280 --> 00:04:38,479
is that we can plug in an

105
00:04:38,479 --> 00:04:41,680
arbitrary usb device not knowing

106
00:04:41,680 --> 00:04:42,639
anything about

107
00:04:42,639 --> 00:04:45,280
it and we can interrogate that device

108
00:04:45,280 --> 00:04:46,639
using our computer

109
00:04:46,639 --> 00:04:50,400
to find out who made it

110
00:04:50,400 --> 00:04:53,280
both a numerical identifier as well as a

111
00:04:53,280 --> 00:04:55,199
textual identifier

112
00:04:55,199 --> 00:04:57,680
we can find out what device it is again

113
00:04:57,680 --> 00:04:58,800
a numeric

114
00:04:58,800 --> 00:05:02,160
a product identifier and a description

115
00:05:02,160 --> 00:05:06,000
as well as detailed information

116
00:05:06,000 --> 00:05:12,800
about what the device claims to be

117
00:05:13,600 --> 00:05:17,360
um and those claims

118
00:05:17,360 --> 00:05:21,039
will generally be one or more of a usb

119
00:05:21,039 --> 00:05:22,479
device class

120
00:05:22,479 --> 00:05:25,280
the device classes are things like human

121
00:05:25,280 --> 00:05:26,639
interface devices

122
00:05:26,639 --> 00:05:30,400
keyboards mice joysticks and so forth

123
00:05:30,400 --> 00:05:33,600
mass storage devices usb flash drives

124
00:05:33,600 --> 00:05:36,400
cd-rom drives external hard drives and

125
00:05:36,400 --> 00:05:37,759
the like

126
00:05:37,759 --> 00:05:40,880
maybe a printer an audio device

127
00:05:40,880 --> 00:05:45,360
such as a an external sound card

128
00:05:45,360 --> 00:05:50,479
or it could be a webcam

129
00:05:51,199 --> 00:05:55,120
and so being able to identify

130
00:05:55,120 --> 00:05:59,199
what the device is and what interfaces

131
00:05:59,199 --> 00:06:02,720
it claims to to provide

132
00:06:02,720 --> 00:06:06,000
gives us the ability to

133
00:06:06,000 --> 00:06:09,199
to automatically install drivers for

134
00:06:09,199 --> 00:06:10,400
these devices

135
00:06:10,400 --> 00:06:12,560
you don't have to go oh yes i've just

136
00:06:12,560 --> 00:06:13,440
connected

137
00:06:13,440 --> 00:06:17,280
a samsung printer and then i need to go

138
00:06:17,280 --> 00:06:19,120
and say oh yes well it's the

139
00:06:19,120 --> 00:06:23,039
scx 4300 so let me go down this list of

140
00:06:23,039 --> 00:06:24,960
printers on this driver disk

141
00:06:24,960 --> 00:06:26,639
and choose the right one and hope that

142
00:06:26,639 --> 00:06:29,039
it's actually there

143
00:06:29,039 --> 00:06:32,639
what we found now or what's what we are

144
00:06:32,639 --> 00:06:36,479
experiencing now is that

145
00:06:36,479 --> 00:06:39,600
operating system vendors the microsoft's

146
00:06:39,600 --> 00:06:40,880
linux's

147
00:06:40,880 --> 00:06:43,680
apples etc of the world have implemented

148
00:06:43,680 --> 00:06:45,199
class drivers

149
00:06:45,199 --> 00:06:48,720
which have a generic driver for

150
00:06:48,720 --> 00:06:52,000
each kind each class of usb

151
00:06:52,000 --> 00:06:55,759
device and so in many cases we can plug

152
00:06:55,759 --> 00:06:56,560
in

153
00:06:56,560 --> 00:06:59,680
a an arbitrary usb device

154
00:06:59,680 --> 00:07:03,199
and find that it it actually just

155
00:07:03,199 --> 00:07:06,800
starts working without any

156
00:07:06,800 --> 00:07:10,240
um fiddling or configuration required

157
00:07:10,240 --> 00:07:13,280
and so over the past

158
00:07:13,280 --> 00:07:16,960
or 20 25 years or so we've managed to

159
00:07:16,960 --> 00:07:17,360
move

160
00:07:17,360 --> 00:07:20,479
from plug and prey and

161
00:07:20,479 --> 00:07:24,080
hope that it that it functions to

162
00:07:24,080 --> 00:07:27,199
the sort of ideal utopia of plug in the

163
00:07:27,199 --> 00:07:27,840
device

164
00:07:27,840 --> 00:07:31,280
and it just works which is

165
00:07:31,280 --> 00:07:34,080
a wonderful situation to be in i think

166
00:07:34,080 --> 00:07:37,039
most of you will agree

167
00:07:37,120 --> 00:07:41,520
unfortunately with that ease of use

168
00:07:41,520 --> 00:07:45,120
comes people looking to

169
00:07:45,120 --> 00:07:49,840
to abuse that for their own purposes

170
00:07:49,840 --> 00:07:52,160
so let's talk about some of the ways in

171
00:07:52,160 --> 00:07:55,440
which usb devices have been exploited

172
00:07:55,440 --> 00:08:00,960
or abused to attack systems

173
00:08:02,000 --> 00:08:05,680
one of the early forms of attack was

174
00:08:05,680 --> 00:08:08,319
made use of the mass storage devices so

175
00:08:08,319 --> 00:08:10,160
the usb flash drives and external hard

176
00:08:10,160 --> 00:08:11,599
drives and so on

177
00:08:11,599 --> 00:08:13,840
moving a device from one machine to

178
00:08:13,840 --> 00:08:16,239
another

179
00:08:16,319 --> 00:08:20,400
you could trigger an automatic execution

180
00:08:20,400 --> 00:08:23,360
of an application that was loaded onto

181
00:08:23,360 --> 00:08:24,560
that flash drive

182
00:08:24,560 --> 00:08:28,560
making use of an autorandon inf file

183
00:08:28,560 --> 00:08:30,639
and now of 20 years of hindsight we can

184
00:08:30,639 --> 00:08:33,120
see that that's clearly a terrible idea

185
00:08:33,120 --> 00:08:37,279
but in the early 2000s

186
00:08:37,279 --> 00:08:40,479
or late 1990s this was considered to be

187
00:08:40,479 --> 00:08:42,399
the height of user friendliness

188
00:08:42,399 --> 00:08:45,519
that you could install software onto a

189
00:08:45,519 --> 00:08:46,560
flash drive

190
00:08:46,560 --> 00:08:48,000
you could plug it in and it would

191
00:08:48,000 --> 00:08:50,640
automatically load the installation

192
00:08:50,640 --> 00:08:51,360
program

193
00:08:51,360 --> 00:08:55,040
for the particular application or

194
00:08:55,040 --> 00:08:58,720
whatever it was that the the flash drive

195
00:08:58,720 --> 00:08:59,680
creator

196
00:08:59,680 --> 00:09:02,720
had decided to do and naturally people

197
00:09:02,720 --> 00:09:05,440
used this to execute and distribute

198
00:09:05,440 --> 00:09:06,640
malware

199
00:09:06,640 --> 00:09:11,200
they would copy a autorun.inf file onto

200
00:09:11,200 --> 00:09:13,519
any flash drives that were plugged into

201
00:09:13,519 --> 00:09:15,200
an infected computer

202
00:09:15,200 --> 00:09:17,600
copy itself over onto the flash drive

203
00:09:17,600 --> 00:09:18,240
and then

204
00:09:18,240 --> 00:09:19,680
whenever that flash drive was plugged

205
00:09:19,680 --> 00:09:21,680
into another windows computer

206
00:09:21,680 --> 00:09:24,399
that application would get executed and

207
00:09:24,399 --> 00:09:26,080
spread onto the

208
00:09:26,080 --> 00:09:29,760
further victims

209
00:09:29,760 --> 00:09:32,880
and so microsoft killed that feature

210
00:09:32,880 --> 00:09:36,160
after a while after it had been abused

211
00:09:36,160 --> 00:09:39,440
but left it enabled for cd-rom drives

212
00:09:39,440 --> 00:09:42,560
now of course um you know i think the

213
00:09:42,560 --> 00:09:43,120
the

214
00:09:43,120 --> 00:09:45,279
supposition was that people didn't have

215
00:09:45,279 --> 00:09:47,760
access to create their own cds

216
00:09:47,760 --> 00:09:50,720
very easily but before long writable

217
00:09:50,720 --> 00:09:52,959
cd-rom drives were also a thing

218
00:09:52,959 --> 00:09:56,800
and this was being exploited there as

219
00:09:56,800 --> 00:09:58,560
well

220
00:09:58,560 --> 00:10:02,839
and finally this then led to

221
00:10:02,839 --> 00:10:04,959
uh vendor

222
00:10:04,959 --> 00:10:08,720
creating a standard called u3

223
00:10:08,720 --> 00:10:12,480
which was effectively a cd-rom

224
00:10:12,480 --> 00:10:15,519
sorry a flash drive that appeared to be

225
00:10:15,519 --> 00:10:18,959
a cd-rom so it would enumerate as a

226
00:10:18,959 --> 00:10:21,600
cd-rom even though it was just a

227
00:10:21,600 --> 00:10:24,720
plug-in flash drive and would still make

228
00:10:24,720 --> 00:10:25,920
use of these

229
00:10:25,920 --> 00:10:29,040
auto-run features

230
00:10:29,040 --> 00:10:33,839
and of course that was abused as well

231
00:10:36,160 --> 00:10:39,600
around 2009 2010

232
00:10:39,600 --> 00:10:43,040
um thinkgeek came up with a novelty

233
00:10:43,040 --> 00:10:44,160
device

234
00:10:44,160 --> 00:10:46,640
called the phantom keystroker the

235
00:10:46,640 --> 00:10:49,279
phantom keystroker was intended as

236
00:10:49,279 --> 00:10:53,600
a um you know frustrate your friends

237
00:10:53,600 --> 00:10:57,839
annoy your enemies kind of gag device

238
00:10:57,839 --> 00:11:00,959
that was a keyboard that would randomly

239
00:11:00,959 --> 00:11:01,360
turn

240
00:11:01,360 --> 00:11:05,440
on a caps lock key move the mouse around

241
00:11:05,440 --> 00:11:09,040
and type random keystrokes to

242
00:11:09,040 --> 00:11:11,920
to annoy whoever it was that you had to

243
00:11:11,920 --> 00:11:12,640
plug this

244
00:11:12,640 --> 00:11:15,760
into their computer for but

245
00:11:15,760 --> 00:11:18,800
a guy named adrian crenshaw quickly

246
00:11:18,800 --> 00:11:20,160
realized that there was

247
00:11:20,160 --> 00:11:24,320
a huge amount of potential in this

248
00:11:24,320 --> 00:11:29,279
as well as darren at hack 5 and

249
00:11:29,279 --> 00:11:33,279
digi ninja got together and created

250
00:11:33,279 --> 00:11:35,440
well adrian crenshaw created the

251
00:11:35,440 --> 00:11:38,399
programmable head usb keystroke dongle

252
00:11:38,399 --> 00:11:41,440
and robin wood

253
00:11:41,440 --> 00:11:44,320
and darren kitchen at hack5 created the

254
00:11:44,320 --> 00:11:47,120
usb rubber ducky

255
00:11:47,120 --> 00:11:51,839
and those allow you to create a

256
00:11:51,839 --> 00:11:54,480
programmable keyboard that would type

257
00:11:54,480 --> 00:11:54,880
out

258
00:11:54,880 --> 00:11:57,440
a particular payload or sequence of

259
00:11:57,440 --> 00:11:59,440
keystrokes

260
00:11:59,440 --> 00:12:02,560
and that could be used to very quickly

261
00:12:02,560 --> 00:12:04,639
type out an exploit onto somebody's

262
00:12:04,639 --> 00:12:06,639
keyboard for example

263
00:12:06,639 --> 00:12:10,880
pressing windows r running command.exe

264
00:12:10,880 --> 00:12:13,839
and then downloading some content from

265
00:12:13,839 --> 00:12:15,200
the internet

266
00:12:15,200 --> 00:12:18,079
through some malware and then and then

267
00:12:18,079 --> 00:12:20,000
executing that on the victim

268
00:12:20,000 --> 00:12:22,560
so to take just a few seconds and then

269
00:12:22,560 --> 00:12:24,160
you could unplug the device and walk

270
00:12:24,160 --> 00:12:25,200
away

271
00:12:25,200 --> 00:12:27,760
leaving this malware running on the

272
00:12:27,760 --> 00:12:29,440
computer

273
00:12:29,440 --> 00:12:31,440
and so this was a very effective attack

274
00:12:31,440 --> 00:12:33,279
and it still is quite effective

275
00:12:33,279 --> 00:12:36,480
although possibly less

276
00:12:36,480 --> 00:12:40,000
to the less nowadays because of

277
00:12:40,000 --> 00:12:43,040
network controls and things like

278
00:12:43,040 --> 00:12:48,480
outbound http filtering and so forth

279
00:12:50,560 --> 00:12:54,000
in 2016 taking a bit of a

280
00:12:54,000 --> 00:12:57,120
jump talking about different categories

281
00:12:57,120 --> 00:12:59,279
of malware so we've talked about mass

282
00:12:59,279 --> 00:13:01,200
storage we've talked about human

283
00:13:01,200 --> 00:13:02,639
interface devices

284
00:13:02,639 --> 00:13:05,680
and now we're talking about usb network

285
00:13:05,680 --> 00:13:07,360
interfaces

286
00:13:07,360 --> 00:13:11,120
so in 2016 a guy named sami kamkar

287
00:13:11,120 --> 00:13:14,160
introduced a technique or a tool called

288
00:13:14,160 --> 00:13:15,600
poison tap

289
00:13:15,600 --> 00:13:18,480
which used a usb network interface and

290
00:13:18,480 --> 00:13:20,240
an extremely broad

291
00:13:20,240 --> 00:13:24,079
dhcp lease on that

292
00:13:24,079 --> 00:13:26,880
interface to trick the host computer

293
00:13:26,880 --> 00:13:28,880
into routing all of its traffic via the

294
00:13:28,880 --> 00:13:30,800
raspberry pi

295
00:13:30,800 --> 00:13:32,880
and this allowed interception of

296
00:13:32,880 --> 00:13:34,000
cleartext network

297
00:13:34,000 --> 00:13:37,600
protocols such as http but also

298
00:13:37,600 --> 00:13:40,240
smb and so on this would allow the

299
00:13:40,240 --> 00:13:41,360
raspberry pi

300
00:13:41,360 --> 00:13:44,959
to steal cookies and deliver persistent

301
00:13:44,959 --> 00:13:47,519
cash http pages to the browser

302
00:13:47,519 --> 00:13:49,760
assuming that what that one was running

303
00:13:49,760 --> 00:13:50,800
and making

304
00:13:50,800 --> 00:13:54,639
regular requests over the network

305
00:13:54,639 --> 00:13:57,920
and having this ability allowed

306
00:13:57,920 --> 00:14:01,360
the poison tap device to capture

307
00:14:01,360 --> 00:14:05,600
those cookies and reuse them for

308
00:14:05,600 --> 00:14:08,320
you know on a separate machine pass

309
00:14:08,320 --> 00:14:09,839
those over to the attacker

310
00:14:09,839 --> 00:14:11,440
and because there were cookies rather

311
00:14:11,440 --> 00:14:13,839
than credentials in many cases those

312
00:14:13,839 --> 00:14:15,600
cookies would just

313
00:14:15,600 --> 00:14:18,639
allow the attacker

314
00:14:18,639 --> 00:14:21,680
to authenticate as the victim to

315
00:14:21,680 --> 00:14:24,880
whatever websites that computer was

316
00:14:24,880 --> 00:14:31,839
trying to connect to

317
00:14:32,560 --> 00:14:34,639
and of course who could forget the nsa

318
00:14:34,639 --> 00:14:35,760
and catalogue

319
00:14:35,760 --> 00:14:37,839
which was revealed by edward snowden

320
00:14:37,839 --> 00:14:40,000
around 2013.

321
00:14:40,000 --> 00:14:42,959
this included details of devices such as

322
00:14:42,959 --> 00:14:44,160
the cottonmouth one

323
00:14:44,160 --> 00:14:47,199
two and three which were designed

324
00:14:47,199 --> 00:14:50,000
to provide wireless access to a usb

325
00:14:50,000 --> 00:14:50,800
cable

326
00:14:50,800 --> 00:14:52,880
for the low low price of twenty thousand

327
00:14:52,880 --> 00:14:54,320
dollars

328
00:14:54,320 --> 00:14:57,440
minimum quantity 50 making a

329
00:14:57,440 --> 00:15:00,880
one million dollar purchase and this

330
00:15:00,880 --> 00:15:02,560
device although we don't have all the

331
00:15:02,560 --> 00:15:05,120
details of its capabilities

332
00:15:05,120 --> 00:15:08,240
appears to have included a usb

333
00:15:08,240 --> 00:15:11,440
hub so that the

334
00:15:11,440 --> 00:15:13,519
device that was connected via the cable

335
00:15:13,519 --> 00:15:14,880
would still function

336
00:15:14,880 --> 00:15:17,120
at the same time as the cottonmouth

337
00:15:17,120 --> 00:15:18,000
device

338
00:15:18,000 --> 00:15:20,399
being able to implement whatever

339
00:15:20,399 --> 00:15:21,680
functionality

340
00:15:21,680 --> 00:15:25,199
it was programmed to do so for example

341
00:15:25,199 --> 00:15:28,560
mass storage or human interface device

342
00:15:28,560 --> 00:15:30,560
keeping in mind that the cottonmouth or

343
00:15:30,560 --> 00:15:32,000
that the ant catalog

344
00:15:32,000 --> 00:15:35,199
dates from 2008 so very early days

345
00:15:35,199 --> 00:15:38,560
of usb security

346
00:15:38,560 --> 00:15:42,560
before we have things like block lists

347
00:15:42,560 --> 00:15:46,319
for mass storage devices

348
00:15:47,440 --> 00:15:49,600
and of course there are a bunch of

349
00:15:49,600 --> 00:15:52,079
variations on the same basic themes

350
00:15:52,079 --> 00:15:54,880
mass storage attacks human interface

351
00:15:54,880 --> 00:15:57,040
device attacks

352
00:15:57,040 --> 00:16:00,959
network interface attacks one of the

353
00:16:00,959 --> 00:16:04,240
variations was bad usb

354
00:16:04,240 --> 00:16:06,959
which was able to reprogram an actual

355
00:16:06,959 --> 00:16:08,240
flash drive

356
00:16:08,240 --> 00:16:11,920
to enumerate on the on the host or to

357
00:16:11,920 --> 00:16:12,800
the host

358
00:16:12,800 --> 00:16:17,519
as a keyboard or as a network interface

359
00:16:17,519 --> 00:16:20,700
and so this allowed for device for

360
00:16:20,700 --> 00:16:22,720
[Music]

361
00:16:22,720 --> 00:16:25,519
innocuous looking devices to be

362
00:16:25,519 --> 00:16:26,880
repurposed

363
00:16:26,880 --> 00:16:31,040
with malicious intent

364
00:16:34,000 --> 00:16:37,440
so the current situation um

365
00:16:37,440 --> 00:16:40,480
going back to 2016 i presented a tool

366
00:16:40,480 --> 00:16:40,959
called

367
00:16:40,959 --> 00:16:46,239
u.s abuse at defcon in las vegas

368
00:16:46,720 --> 00:16:49,839
we commissioned some custom hardware

369
00:16:49,839 --> 00:16:51,360
that was based on

370
00:16:51,360 --> 00:16:55,600
a dev board that i found

371
00:16:55,600 --> 00:16:59,040
from a company in china

372
00:16:59,440 --> 00:17:02,560
and in 2016 we presented

373
00:17:02,560 --> 00:17:06,559
our custom hardware that

374
00:17:06,559 --> 00:17:10,000
that new that provided essentially usb

375
00:17:10,000 --> 00:17:13,760
rubber ducky capabilities but

376
00:17:13,760 --> 00:17:16,799
with a wi-fi interface as well

377
00:17:16,799 --> 00:17:19,839
and what this allowed to do which i

378
00:17:19,839 --> 00:17:21,199
think is quite innovative

379
00:17:21,199 --> 00:17:24,480
and and still is

380
00:17:24,480 --> 00:17:26,880
still is relevant today i think so

381
00:17:26,880 --> 00:17:30,160
firstly it incorporated a mouse jiggler

382
00:17:30,160 --> 00:17:34,160
to avoid screen saver activations

383
00:17:34,160 --> 00:17:39,120
it was very subtle it moved only one

384
00:17:39,120 --> 00:17:42,559
mouse unit left and right

385
00:17:42,559 --> 00:17:46,080
every few seconds and in doing so

386
00:17:46,080 --> 00:17:49,280
it allowed

387
00:17:49,760 --> 00:17:54,000
the victim computer to remain asleep if

388
00:17:54,000 --> 00:17:56,240
it was previously asleep

389
00:17:56,240 --> 00:17:58,840
but would prevent the screen saver from

390
00:17:58,840 --> 00:18:00,480
activating if

391
00:18:00,480 --> 00:18:03,840
the machine was unlocked which i thought

392
00:18:03,840 --> 00:18:06,720
was an interesting variation i think the

393
00:18:06,720 --> 00:18:09,440
the one pixel movement was considered to

394
00:18:09,440 --> 00:18:09,760
be

395
00:18:09,760 --> 00:18:12,160
too small to wake up the machine but

396
00:18:12,160 --> 00:18:15,840
enough to keep it awake

397
00:18:16,000 --> 00:18:18,240
secondly with the wi-fi interface it

398
00:18:18,240 --> 00:18:20,240
provided a means for remote

399
00:18:20,240 --> 00:18:23,600
triggering of your payload at

400
00:18:23,600 --> 00:18:26,160
a suitable time and what this really

401
00:18:26,160 --> 00:18:26,720
meant

402
00:18:26,720 --> 00:18:30,080
is that in contrary to

403
00:18:30,080 --> 00:18:32,480
the usb rubber duckies where you could

404
00:18:32,480 --> 00:18:34,480
program a fixed delay

405
00:18:34,480 --> 00:18:37,520
or none at all you could actually watch

406
00:18:37,520 --> 00:18:38,880
to see

407
00:18:38,880 --> 00:18:41,520
when this device was plugged in you

408
00:18:41,520 --> 00:18:42,000
could watch

409
00:18:42,000 --> 00:18:44,880
to see when would be a good time to

410
00:18:44,880 --> 00:18:48,240
actually launch your attack

411
00:18:48,400 --> 00:18:51,440
so while the victim is away from their

412
00:18:51,440 --> 00:18:53,760
computer and their computer is

413
00:18:53,760 --> 00:18:57,120
is locked then you could approach and

414
00:18:57,120 --> 00:18:59,120
plug this device in

415
00:18:59,120 --> 00:19:00,720
wait for them to return to their

416
00:19:00,720 --> 00:19:02,559
computer watching from

417
00:19:02,559 --> 00:19:05,280
a safe distance and then when the

418
00:19:05,280 --> 00:19:06,880
computer is unlocked and they've turned

419
00:19:06,880 --> 00:19:08,000
their head away

420
00:19:08,000 --> 00:19:10,640
for a few seconds you could trigger your

421
00:19:10,640 --> 00:19:12,880
payload

422
00:19:12,880 --> 00:19:16,320
and then finally the most innovative

423
00:19:16,320 --> 00:19:20,400
feature of the u.s abuse attack

424
00:19:20,400 --> 00:19:23,120
is that it provided a communications

425
00:19:23,120 --> 00:19:23,760
channel

426
00:19:23,760 --> 00:19:25,919
between the victim and the attacker that

427
00:19:25,919 --> 00:19:28,080
was completely independent

428
00:19:28,080 --> 00:19:30,880
of any networking capabilities that the

429
00:19:30,880 --> 00:19:31,679
victim

430
00:19:31,679 --> 00:19:35,840
computer had so if it had

431
00:19:35,840 --> 00:19:38,320
a network interface that was completely

432
00:19:38,320 --> 00:19:39,360
disabled

433
00:19:39,360 --> 00:19:42,640
or connected via all sorts of

434
00:19:42,640 --> 00:19:45,280
network intrusion detection and

435
00:19:45,280 --> 00:19:46,320
monitoring

436
00:19:46,320 --> 00:19:49,600
tools it didn't matter at all because

437
00:19:49,600 --> 00:19:51,200
any communications

438
00:19:51,200 --> 00:19:52,640
that happened between the victim

439
00:19:52,640 --> 00:19:54,480
computer and the attacker

440
00:19:54,480 --> 00:19:57,600
were actually tunneled through this

441
00:19:57,600 --> 00:20:00,640
usb device that looks just like a flash

442
00:20:00,640 --> 00:20:02,880
drive

443
00:20:03,039 --> 00:20:06,240
and all of this was possible

444
00:20:06,240 --> 00:20:08,720
without requiring any special drivers or

445
00:20:08,720 --> 00:20:09,919
configuration

446
00:20:09,919 --> 00:20:13,760
because windows already provided them

447
00:20:13,760 --> 00:20:15,760
so this communications channel was

448
00:20:15,760 --> 00:20:18,799
achieved using the rawhid interface

449
00:20:18,799 --> 00:20:21,039
so i've mentioned keyboards mice and

450
00:20:21,039 --> 00:20:22,159
joysticks

451
00:20:22,159 --> 00:20:25,760
human interface device class also

452
00:20:25,760 --> 00:20:29,520
specifies a raw channel

453
00:20:29,520 --> 00:20:33,520
which simply allows users to send

454
00:20:33,520 --> 00:20:36,320
arbitrary bytes to the device and

455
00:20:36,320 --> 00:20:36,880
receive

456
00:20:36,880 --> 00:20:39,679
arbitrary bytes in return and

457
00:20:39,679 --> 00:20:41,360
essentially what this provides you

458
00:20:41,360 --> 00:20:44,559
is very similar to

459
00:20:44,559 --> 00:20:50,158
a netcat data pipe

460
00:20:50,880 --> 00:20:53,039
in its first incarnation on the us of

461
00:20:53,039 --> 00:20:53,919
use hardware

462
00:20:53,919 --> 00:20:56,000
it was limited to eight kilobytes per

463
00:20:56,000 --> 00:20:57,679
second

464
00:20:57,679 --> 00:21:02,400
which is not insignificant

465
00:21:02,400 --> 00:21:05,600
and so it leveraged this this data

466
00:21:05,600 --> 00:21:06,320
channel

467
00:21:06,320 --> 00:21:08,799
to minimize the on-screen time of the

468
00:21:08,799 --> 00:21:10,080
typed payload

469
00:21:10,080 --> 00:21:13,679
by downloading a more complicated script

470
00:21:13,679 --> 00:21:18,159
after the initial script had been

471
00:21:18,159 --> 00:21:22,080
had been typed out and as a result u.s

472
00:21:22,080 --> 00:21:22,720
abuse

473
00:21:22,720 --> 00:21:26,159
was able to execute

474
00:21:26,159 --> 00:21:30,640
and disappear from screen within about

475
00:21:30,640 --> 00:21:33,840
six to eight seconds

476
00:21:34,080 --> 00:21:37,679
unfortunately the u.s abuse attack chain

477
00:21:37,679 --> 00:21:40,400
was rather complicated to set up and

478
00:21:40,400 --> 00:21:42,000
there didn't really seem to be

479
00:21:42,000 --> 00:21:44,960
much take up of the technique outside of

480
00:21:44,960 --> 00:21:47,280
a very small

481
00:21:47,280 --> 00:21:50,720
pool of people

482
00:21:50,720 --> 00:21:52,480
the default firmware available for the

483
00:21:52,480 --> 00:21:54,480
wood injector which is the device on the

484
00:21:54,480 --> 00:21:58,720
right hand side

485
00:21:58,720 --> 00:22:01,760
did a similar thing but

486
00:22:01,760 --> 00:22:04,960
rather chose to use a serial port rather

487
00:22:04,960 --> 00:22:07,360
than a raw head interface

488
00:22:07,360 --> 00:22:10,559
and as a result this technique only

489
00:22:10,559 --> 00:22:12,000
worked on windows 10

490
00:22:12,000 --> 00:22:15,120
workstations due to driver issues

491
00:22:15,120 --> 00:22:19,360
on earlier versions of windows

492
00:22:19,679 --> 00:22:22,640
the interesting thing about the rawhid

493
00:22:22,640 --> 00:22:23,600
interface

494
00:22:23,600 --> 00:22:26,799
is that by default on both windows

495
00:22:26,799 --> 00:22:30,799
and os 10 is that

496
00:22:30,799 --> 00:22:34,400
the user has permission to access this

497
00:22:34,400 --> 00:22:35,440
device

498
00:22:35,440 --> 00:22:39,039
on linux however that permission is not

499
00:22:39,039 --> 00:22:44,158
granted by default to unprivileged users

500
00:22:49,280 --> 00:22:52,480
in late 2016 to 2017 marcus mains was

501
00:22:52,480 --> 00:22:53,039
working

502
00:22:53,039 --> 00:22:56,080
on pawn pi which brought together

503
00:22:56,080 --> 00:22:57,840
almost all of the previously mentioned

504
00:22:57,840 --> 00:23:00,000
attack types into a single inexpensive

505
00:23:00,000 --> 00:23:00,880
device

506
00:23:00,880 --> 00:23:04,960
based on a raspberry pi zero or zero w

507
00:23:04,960 --> 00:23:06,799
one of its early claims to fame included

508
00:23:06,799 --> 00:23:09,200
capturing any smb network hashes

509
00:23:09,200 --> 00:23:10,960
cracking them automatically using john

510
00:23:10,960 --> 00:23:12,799
the ripper and then typing out the

511
00:23:12,799 --> 00:23:15,200
password to unlock the screen

512
00:23:15,200 --> 00:23:19,520
a fully plug and phone device

513
00:23:19,520 --> 00:23:21,600
marcus also implemented the same raw

514
00:23:21,600 --> 00:23:23,919
head interface in pawn pi

515
00:23:23,919 --> 00:23:26,400
but in my opinion never really leveraged

516
00:23:26,400 --> 00:23:27,360
it fully

517
00:23:27,360 --> 00:23:30,320
in terms of its capabilities as you can

518
00:23:30,320 --> 00:23:31,440
see

519
00:23:31,440 --> 00:23:34,400
this is part of the port pi

520
00:23:34,400 --> 00:23:36,080
configuration interface

521
00:23:36,080 --> 00:23:38,799
where it is able to support or implement

522
00:23:38,799 --> 00:23:41,520
a variety of different usb interfaces

523
00:23:41,520 --> 00:23:45,520
whether cdc's ecm ethernet over usb

524
00:23:45,520 --> 00:23:49,200
for unix's rndis ethernet over usb for

525
00:23:49,200 --> 00:23:51,200
windows

526
00:23:51,200 --> 00:23:54,400
keyboard mouse raw head serial

527
00:23:54,400 --> 00:23:57,679
as well as mesh storage

528
00:24:01,279 --> 00:24:02,960
so this is just an example of some of

529
00:24:02,960 --> 00:24:04,720
the ways in which people

530
00:24:04,720 --> 00:24:07,919
built up their pawn fire devices

531
00:24:07,919 --> 00:24:11,520
using screens and buttons and

532
00:24:11,520 --> 00:24:13,840
usb stems allowing you to plug in the

533
00:24:13,840 --> 00:24:14,640
device

534
00:24:14,640 --> 00:24:19,760
without having to use a cable

535
00:24:19,760 --> 00:24:23,360
in 2016 as well mark newland published a

536
00:24:23,360 --> 00:24:25,200
tool called mouse jack

537
00:24:25,200 --> 00:24:26,720
the results of his research into a

538
00:24:26,720 --> 00:24:28,960
variety of wireless keyboards and mice

539
00:24:28,960 --> 00:24:30,480
he figured out that even though the key

540
00:24:30,480 --> 00:24:31,840
reports were encrypted between the

541
00:24:31,840 --> 00:24:33,279
keyboard and the receiver

542
00:24:33,279 --> 00:24:35,520
mouse reports were not and most

543
00:24:35,520 --> 00:24:36,320
importantly

544
00:24:36,320 --> 00:24:37,760
that it was possible to send an

545
00:24:37,760 --> 00:24:39,520
unencrypted keyboard report to the mouse

546
00:24:39,520 --> 00:24:40,640
endpoint

547
00:24:40,640 --> 00:24:42,880
in doing so he was able to inject

548
00:24:42,880 --> 00:24:44,640
keystrokes into an existing wireless

549
00:24:44,640 --> 00:24:45,600
receiver

550
00:24:45,600 --> 00:24:47,679
covering manufacturers such as logitech

551
00:24:47,679 --> 00:24:49,440
microsoft dell lenovo

552
00:24:49,440 --> 00:24:52,640
amazon and more this was a great find

553
00:24:52,640 --> 00:24:54,400
from an attacker's perspective

554
00:24:54,400 --> 00:24:56,320
because it eliminated one of the hardest

555
00:24:56,320 --> 00:24:58,159
parts of the rubber ducky attack

556
00:24:58,159 --> 00:24:59,679
actually plugging the dongle into the

557
00:24:59,679 --> 00:25:01,679
victim's computer and having it stay

558
00:25:01,679 --> 00:25:04,000
there long enough to be effective

559
00:25:04,000 --> 00:25:05,840
mass jack attacks are still effective

560
00:25:05,840 --> 00:25:08,080
today even with recently purchased

561
00:25:08,080 --> 00:25:10,400
devices from logitech themselves

562
00:25:10,400 --> 00:25:11,919
updating firmware in the unifying

563
00:25:11,919 --> 00:25:13,520
receiver is near impossible

564
00:25:13,520 --> 00:25:15,360
because even years afterwards there is

565
00:25:15,360 --> 00:25:17,679
either no updated firmware available

566
00:25:17,679 --> 00:25:19,760
or it is buried so deeply that nobody

567
00:25:19,760 --> 00:25:20,720
can find it

568
00:25:20,720 --> 00:25:22,480
even when they are actively looking for

569
00:25:22,480 --> 00:25:24,640
it and factories are even stock

570
00:25:24,640 --> 00:25:25,600
producing

571
00:25:25,600 --> 00:25:27,520
devices with vulnerable firmware the

572
00:25:27,520 --> 00:25:30,559
last time i checked

573
00:25:32,159 --> 00:25:35,200
in 2017 at hackcon in norway i met mark

574
00:25:35,200 --> 00:25:35,760
newlin

575
00:25:35,760 --> 00:25:37,440
and learnt about mouse jacking and one

576
00:25:37,440 --> 00:25:38,799
of the things that he mentioned was

577
00:25:38,799 --> 00:25:41,200
logitech's hit plus plus protocol

578
00:25:41,200 --> 00:25:43,039
this is a raw head interface used by

579
00:25:43,039 --> 00:25:45,360
logitech to do out-of-band functions

580
00:25:45,360 --> 00:25:46,799
such as getting the battery level from

581
00:25:46,799 --> 00:25:49,279
the peripheral or programming macros

582
00:25:49,279 --> 00:25:51,279
of course as soon as i heard this i

583
00:25:51,279 --> 00:25:52,799
wondered whether it would be possible to

584
00:25:52,799 --> 00:25:54,640
implement u.s abuse style attacks

585
00:25:54,640 --> 00:25:56,799
against unifying receivers and get the

586
00:25:56,799 --> 00:25:58,720
same benefits of not requiring direct

587
00:25:58,720 --> 00:26:00,400
physical access to the target

588
00:26:00,400 --> 00:26:03,600
as the original mass junk attacks

589
00:26:03,600 --> 00:26:05,840
unfortunately for me i'm not smart

590
00:26:05,840 --> 00:26:07,600
enough to implement this myself

591
00:26:07,600 --> 00:26:10,720
but marcus mains completed an epic deep

592
00:26:10,720 --> 00:26:12,559
dive into the unifying receivers

593
00:26:12,559 --> 00:26:14,240
and figured out all of the necessary

594
00:26:14,240 --> 00:26:16,480
details having reported a number of new

595
00:26:16,480 --> 00:26:18,000
vulnerabilities to logitech

596
00:26:18,000 --> 00:26:20,640
he released logitech which combined mass

597
00:26:20,640 --> 00:26:22,480
tracking and u.s abuse attacks

598
00:26:22,480 --> 00:26:27,360
to get a shell using a unifying receiver

599
00:26:27,360 --> 00:26:29,200
this tool was implemented as firmware

600
00:26:29,200 --> 00:26:32,559
for a nordic nrf52840 microprocessor

601
00:26:32,559 --> 00:26:35,279
accessed using a simple serial terminal

602
00:26:35,279 --> 00:26:36,720
and this was implemented

603
00:26:36,720 --> 00:26:39,840
on a variety of supported devices

604
00:26:39,840 --> 00:26:43,840
which you can see on my slide

605
00:26:44,640 --> 00:26:47,679
and finally in 2019 mike grover

606
00:26:47,679 --> 00:26:49,600
released the omg cable coming full

607
00:26:49,600 --> 00:26:51,440
circle to the nsa playset

608
00:26:51,440 --> 00:26:53,600
and the cottonmouth tool implementing a

609
00:26:53,600 --> 00:26:55,440
wi-fi controlled rubber ducky

610
00:26:55,440 --> 00:26:58,720
in a usb cable unfortunately

611
00:26:58,720 --> 00:27:00,320
this currently has no raw head

612
00:27:00,320 --> 00:27:02,320
capabilities so it's limited to

613
00:27:02,320 --> 00:27:04,080
keystroke injection only

614
00:27:04,080 --> 00:27:06,080
or keyboard logging if you guess his

615
00:27:06,080 --> 00:27:09,360
most recent cable

616
00:27:13,120 --> 00:27:15,039
so what does the future hold for usb

617
00:27:15,039 --> 00:27:17,279
attacks i still find

618
00:27:17,279 --> 00:27:19,279
through numerous physical assessments

619
00:27:19,279 --> 00:27:20,480
that plugging in

620
00:27:20,480 --> 00:27:22,880
so-called innocuous usb devices such as

621
00:27:22,880 --> 00:27:25,520
keyboards and mice is very effective

622
00:27:25,520 --> 00:27:27,039
this has even been in the face of

623
00:27:27,039 --> 00:27:28,799
systems configured with usb control

624
00:27:28,799 --> 00:27:29,600
software

625
00:27:29,600 --> 00:27:31,200
configured with a list of explicitly

626
00:27:31,200 --> 00:27:32,799
permitted devices

627
00:27:32,799 --> 00:27:35,360
setting the usb vendor id and product id

628
00:27:35,360 --> 00:27:36,159
to that

629
00:27:36,159 --> 00:27:38,720
of an approved device is enough in most

630
00:27:38,720 --> 00:27:39,440
cases

631
00:27:39,440 --> 00:27:42,960
to get around those controls

632
00:27:47,200 --> 00:27:49,840
in the very near future i will be

633
00:27:49,840 --> 00:27:51,520
releasing some changes to

634
00:27:51,520 --> 00:27:53,760
phone pi to make establishing tunnels

635
00:27:53,760 --> 00:27:55,440
over usb devices

636
00:27:55,440 --> 00:27:57,760
in much simpler matter that just about

637
00:27:57,760 --> 00:28:00,080
anybody can achieve

638
00:28:00,080 --> 00:28:03,039
and so what i'd like to do next is show

639
00:28:03,039 --> 00:28:04,559
a demonstration

640
00:28:04,559 --> 00:28:08,480
of just how easy it is to get a shell

641
00:28:08,480 --> 00:28:11,600
over a

642
00:28:12,720 --> 00:28:16,159
usb device so what i have

643
00:28:16,159 --> 00:28:19,200
is a device

644
00:28:19,200 --> 00:28:22,080
a raspberry pi or similar that is

645
00:28:22,080 --> 00:28:23,279
running the

646
00:28:23,279 --> 00:28:26,880
pawn pi stack i have

647
00:28:26,880 --> 00:28:33,039
a victim computer on the left hand side

648
00:28:33,039 --> 00:28:37,360
my pawn pi logs are going to be shown

649
00:28:37,360 --> 00:28:40,480
in this window on

650
00:28:40,480 --> 00:28:44,960
at the bottom and then my attacker

651
00:28:44,960 --> 00:28:49,919
is this whole virtual machine window

652
00:28:56,840 --> 00:28:59,840
inset

653
00:29:02,240 --> 00:29:04,799
okay so our victim is the windows

654
00:29:04,799 --> 00:29:05,919
machine in the background

655
00:29:05,919 --> 00:29:08,480
our attacker is the kali instance in the

656
00:29:08,480 --> 00:29:09,679
foreground

657
00:29:09,679 --> 00:29:12,320
in the top right hand corner logs in the

658
00:29:12,320 --> 00:29:13,919
bottom section

659
00:29:13,919 --> 00:29:17,120
and then various terminals that we will

660
00:29:17,120 --> 00:29:18,000
use

661
00:29:18,000 --> 00:29:21,679
to gain our shells

662
00:29:24,000 --> 00:29:27,200
so one of the things that

663
00:29:27,200 --> 00:29:30,880
us abuse does and pawn pi is it gets you

664
00:29:30,880 --> 00:29:31,600
a shell

665
00:29:31,600 --> 00:29:35,039
over this usb connection

666
00:29:35,039 --> 00:29:37,279
and so firstly we need to set up

667
00:29:37,279 --> 00:29:39,760
something that will catch the shell

668
00:29:39,760 --> 00:29:42,240
i'm choosing to use metasploit for this

669
00:29:42,240 --> 00:29:45,039
but you can use a simple netcat listener

670
00:29:45,039 --> 00:29:47,760
if you prefer

671
00:29:49,360 --> 00:29:52,480
just setting it up to listen on

672
00:29:52,480 --> 00:29:55,760
port 4444 as is

673
00:29:55,760 --> 00:29:59,120
commonly used so this is the

674
00:29:59,120 --> 00:30:02,559
pawn pi interface we have our usb gadget

675
00:30:02,559 --> 00:30:03,520
settings

676
00:30:03,520 --> 00:30:05,039
where we have selected the keyboard

677
00:30:05,039 --> 00:30:09,600
mouse and our raw head device

678
00:30:09,600 --> 00:30:12,000
on the left hand side we have a variety

679
00:30:12,000 --> 00:30:13,120
of descriptor

680
00:30:13,120 --> 00:30:15,360
configuration the vendor id and product

681
00:30:15,360 --> 00:30:17,200
id and various

682
00:30:17,200 --> 00:30:20,240
descriptive fields it's important to

683
00:30:20,240 --> 00:30:22,159
make sure

684
00:30:22,159 --> 00:30:24,159
that after you've loaded the covert

685
00:30:24,159 --> 00:30:25,440
channel

686
00:30:25,440 --> 00:30:29,200
javascript or headscript file that

687
00:30:29,200 --> 00:30:32,880
the vendor id and product id that

688
00:30:32,880 --> 00:30:35,120
is passed through to the script matches

689
00:30:35,120 --> 00:30:36,320
the device

690
00:30:36,320 --> 00:30:39,520
that you have configured

691
00:30:41,520 --> 00:30:45,360
and so it launches the

692
00:30:45,360 --> 00:30:48,320
the payload using the key keyboard and

693
00:30:48,320 --> 00:30:50,320
for the purposes of this demonstration

694
00:30:50,320 --> 00:30:54,080
i have not hidden the window

695
00:30:54,080 --> 00:30:58,080
it then downloaded a secondary

696
00:30:58,080 --> 00:31:01,679
payload and then established a command

697
00:31:01,679 --> 00:31:02,480
shell

698
00:31:02,480 --> 00:31:05,600
with my metasploit

699
00:31:05,600 --> 00:31:10,320
instance so we can see the sessions

700
00:31:10,320 --> 00:31:19,840
we can connect to it

701
00:31:20,320 --> 00:31:23,360
and as you can see we have a shell

702
00:31:23,360 --> 00:31:26,320
and we can communicate with that

703
00:31:26,320 --> 00:31:27,360
remotely

704
00:31:27,360 --> 00:31:30,640
without causing any visible traffic on

705
00:31:30,640 --> 00:31:33,679
the victim's computer and certainly

706
00:31:33,679 --> 00:31:34,480
nothing on

707
00:31:34,480 --> 00:31:38,399
the victim's networking interfaces

708
00:31:40,159 --> 00:31:42,880
the next step that i wanted to show you

709
00:31:42,880 --> 00:31:44,080
though

710
00:31:44,080 --> 00:31:47,039
is that you can also tunnel arbitrary

711
00:31:47,039 --> 00:31:51,039
tcp connections over the same interface

712
00:31:51,039 --> 00:31:55,120
so i have a http server listening on

713
00:31:55,120 --> 00:31:59,840
localhost 65535 and a tcp proxy

714
00:31:59,840 --> 00:32:03,519
implemented in the firmware of

715
00:32:03,519 --> 00:32:06,640
the second stage that was uploaded and

716
00:32:06,640 --> 00:32:08,480
so if i connect to localhost

717
00:32:08,480 --> 00:32:12,799
port 65535 i can access the http server

718
00:32:12,799 --> 00:32:16,240
which is running on my kali instance

719
00:32:16,240 --> 00:32:19,600
and all of this is being done over

720
00:32:19,600 --> 00:32:28,000
the usb head interface

721
00:32:28,000 --> 00:32:31,919
so this will be released

722
00:32:31,919 --> 00:32:35,120
in the next few days there's a

723
00:32:35,120 --> 00:32:38,399
little bit of polishing

724
00:32:38,399 --> 00:32:41,600
and bug fixing that needs to be done

725
00:32:41,600 --> 00:32:44,960
and then it will be published on the

726
00:32:44,960 --> 00:32:46,399
sensepost blog

727
00:32:46,399 --> 00:32:51,840
and made available to everybody

728
00:32:51,840 --> 00:32:55,360
and this is my my

729
00:32:55,360 --> 00:32:58,559
conclusion and with this i ho hand the

730
00:32:58,559 --> 00:32:58,960
mic

731
00:32:58,960 --> 00:33:01,070
back over to the

732
00:33:01,070 --> 00:33:03,360
[Music]

733
00:33:03,360 --> 00:33:11,840
the mc

734
00:33:15,039 --> 00:33:17,120
you

