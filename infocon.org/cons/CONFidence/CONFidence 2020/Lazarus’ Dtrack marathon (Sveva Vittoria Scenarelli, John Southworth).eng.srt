1
00:00:06,879 --> 00:00:08,320
good morning everyone

2
00:00:08,320 --> 00:00:10,000
thank you very much for joining us today

3
00:00:10,000 --> 00:00:11,519
and good morning from london

4
00:00:11,519 --> 00:00:13,280
thank you for joining our presentation

5
00:00:13,280 --> 00:00:15,280
on the lazarus group's use of the

6
00:00:15,280 --> 00:00:16,079
detract remote

7
00:00:16,079 --> 00:00:17,920
access trojan and we're going to be

8
00:00:17,920 --> 00:00:20,160
performing a retrospective analysis

9
00:00:20,160 --> 00:00:21,520
of the various campaigns that we've

10
00:00:21,520 --> 00:00:24,480
observed over the years

11
00:00:24,480 --> 00:00:26,720
my name is john southworth and i am a

12
00:00:26,720 --> 00:00:28,640
senior threat intelligence analyst

13
00:00:28,640 --> 00:00:32,079
at pwc uk i primarily focus on tracking

14
00:00:32,079 --> 00:00:34,079
threat actors based in the asia pacific

15
00:00:34,079 --> 00:00:34,880
region

16
00:00:34,880 --> 00:00:36,399
and i've been tracking north korea based

17
00:00:36,399 --> 00:00:39,920
threat actors for the past few years

18
00:00:39,920 --> 00:00:42,320
and instead i don't know if you can see

19
00:00:42,320 --> 00:00:43,280
me um

20
00:00:43,280 --> 00:00:45,760
hi i'm sabra i'm also a senior

21
00:00:45,760 --> 00:00:48,160
intelligence analyst at plvc uk

22
00:00:48,160 --> 00:00:50,640
i also focus on introductory space in

23
00:00:50,640 --> 00:00:52,000
asia pacific region

24
00:00:52,000 --> 00:00:54,480
but instead of doing comparative malware

25
00:00:54,480 --> 00:00:56,480
in university i used to do

26
00:00:56,480 --> 00:00:58,320
a comparative literature instead so

27
00:00:58,320 --> 00:01:00,160
that's a bit of a jump there

28
00:01:00,160 --> 00:01:02,239
and speaking of drums let's go right

29
00:01:02,239 --> 00:01:04,400
into our agenda for the day

30
00:01:04,400 --> 00:01:07,280
so we thought we'd start to talk a bit

31
00:01:07,280 --> 00:01:09,040
about the lazarus group whether you

32
00:01:09,040 --> 00:01:11,119
known them already or not

33
00:01:11,119 --> 00:01:13,439
and we're going to give a brief timeline

34
00:01:13,439 --> 00:01:15,680
of the most high profile operations that

35
00:01:15,680 --> 00:01:18,000
have been attributed to lazarus group

36
00:01:18,000 --> 00:01:19,600
we're also going to be touched on the

37
00:01:19,600 --> 00:01:21,920
different ways in which lazarus group is

38
00:01:21,920 --> 00:01:23,520
tracked across the industry

39
00:01:23,520 --> 00:01:25,680
and touch on some of the subgroups and

40
00:01:25,680 --> 00:01:26,640
aliases

41
00:01:26,640 --> 00:01:29,600
that the lazerus group is known as then

42
00:01:29,600 --> 00:01:31,280
we're going to go into

43
00:01:31,280 --> 00:01:33,600
the detract remote access trojan and

44
00:01:33,600 --> 00:01:35,840
we're going to trace its evolution

45
00:01:35,840 --> 00:01:37,840
its different characteristics and

46
00:01:37,840 --> 00:01:39,119
functionality

47
00:01:39,119 --> 00:01:40,799
and take a look at some of the campaigns

48
00:01:40,799 --> 00:01:43,040
where detrock was used as a payload

49
00:01:43,040 --> 00:01:45,920
from there we're going to look at ditrax

50
00:01:45,920 --> 00:01:47,040
dropper

51
00:01:47,040 --> 00:01:49,920
track drop as we call it and how we have

52
00:01:49,920 --> 00:01:51,439
observed track drop

53
00:01:51,439 --> 00:01:53,360
working and dropping some tools

54
00:01:53,360 --> 00:01:54,880
associated with lasers

55
00:01:54,880 --> 00:01:56,960
and other tools associated with a laser

56
00:01:56,960 --> 00:01:58,399
subgroup that is known as

57
00:01:58,399 --> 00:02:01,600
andario including a downloader which is

58
00:02:01,600 --> 00:02:03,600
fairly sophisticated and which we known

59
00:02:03,600 --> 00:02:06,960
as anonymous talking about the anonymous

60
00:02:06,960 --> 00:02:08,720
downloader which is associated with

61
00:02:08,720 --> 00:02:09,520
andario

62
00:02:09,520 --> 00:02:11,280
we're also going to be talking about

63
00:02:11,280 --> 00:02:13,920
anonymous connections to another

64
00:02:13,920 --> 00:02:16,959
on the real tool the back door rift door

65
00:02:16,959 --> 00:02:18,400
and then we're going to pull all these

66
00:02:18,400 --> 00:02:20,959
threads together look at how all of this

67
00:02:20,959 --> 00:02:22,400
is connected to lazarus

68
00:02:22,400 --> 00:02:24,400
and what this tells us about lazarus

69
00:02:24,400 --> 00:02:26,319
operations and finally we're going to

70
00:02:26,319 --> 00:02:27,360
give a bit of

71
00:02:27,360 --> 00:02:30,080
insight into how defenders and end users

72
00:02:30,080 --> 00:02:31,360
can protect themselves

73
00:02:31,360 --> 00:02:34,160
from ditra campaigns but without further

74
00:02:34,160 --> 00:02:35,760
ado i'm going to hand over to john who's

75
00:02:35,760 --> 00:02:36,000
going

76
00:02:36,000 --> 00:02:37,519
to be talking to us about the lazarus

77
00:02:37,519 --> 00:02:39,120
group

78
00:02:39,120 --> 00:02:42,400
thank you very much seba so

79
00:02:42,400 --> 00:02:45,280
i imagine that most of us listening to

80
00:02:45,280 --> 00:02:46,239
this presentation

81
00:02:46,239 --> 00:02:48,239
have already heard of the lazarus group

82
00:02:48,239 --> 00:02:49,599
but if you haven't

83
00:02:49,599 --> 00:02:51,840
i'll do a quick overview it is a north

84
00:02:51,840 --> 00:02:53,280
korea-based threat actor

85
00:02:53,280 --> 00:02:55,400
that has been active since approximately

86
00:02:55,400 --> 00:02:56,959
2007.

87
00:02:56,959 --> 00:02:58,239
and on the right-hand side of this

88
00:02:58,239 --> 00:03:00,239
screen you can see several of the

89
00:03:00,239 --> 00:03:01,840
well-known campaigns

90
00:03:01,840 --> 00:03:03,599
that have been attributed back to the

91
00:03:03,599 --> 00:03:05,280
lazarus group

92
00:03:05,280 --> 00:03:07,599
now lazarus group is not the only name

93
00:03:07,599 --> 00:03:09,680
that this threat actor is known by

94
00:03:09,680 --> 00:03:12,239
and internally at pwc we track the

95
00:03:12,239 --> 00:03:13,040
lazarus group

96
00:03:13,040 --> 00:03:16,080
under the name black artemis

97
00:03:16,080 --> 00:03:18,800
it is also known in open source which a

98
00:03:18,800 --> 00:03:20,480
name that has been given to it by the us

99
00:03:20,480 --> 00:03:21,280
government

100
00:03:21,280 --> 00:03:24,959
as hidden cobra now what is interesting

101
00:03:24,959 --> 00:03:26,400
about the lazarus group

102
00:03:26,400 --> 00:03:28,959
is that its motivations have been

103
00:03:28,959 --> 00:03:29,519
changing

104
00:03:29,519 --> 00:03:32,319
over time and on this slide you will see

105
00:03:32,319 --> 00:03:34,000
several of the motivations associated

106
00:03:34,000 --> 00:03:34,799
with it

107
00:03:34,799 --> 00:03:37,519
namely that of espionage it's well known

108
00:03:37,519 --> 00:03:39,519
for its espionage campaigns which focus

109
00:03:39,519 --> 00:03:40,159
on

110
00:03:40,159 --> 00:03:42,799
stealing information from organizations

111
00:03:42,799 --> 00:03:43,680
for the purposes

112
00:03:43,680 --> 00:03:45,120
of turning it into actionable

113
00:03:45,120 --> 00:03:48,159
intelligence but perhaps it is more well

114
00:03:48,159 --> 00:03:50,560
well known recently for his campaigns

115
00:03:50,560 --> 00:03:52,159
that target organizations for the

116
00:03:52,159 --> 00:03:54,000
purposes of cybercrime

117
00:03:54,000 --> 00:03:58,000
that is financially motivated campaigns

118
00:03:58,000 --> 00:03:59,680
but originally the lazarus group was

119
00:03:59,680 --> 00:04:01,120
also known for

120
00:04:01,120 --> 00:04:03,120
its campaigns that were targeting

121
00:04:03,120 --> 00:04:04,640
organizations for the purposes of

122
00:04:04,640 --> 00:04:05,680
sabotage

123
00:04:05,680 --> 00:04:08,319
that is they have more of a destructive

124
00:04:08,319 --> 00:04:11,439
or disruptive angle

125
00:04:13,439 --> 00:04:15,599
now in the threat intelligence community

126
00:04:15,599 --> 00:04:17,519
it's sometimes hard to come to a

127
00:04:17,519 --> 00:04:18,639
consensus

128
00:04:18,639 --> 00:04:21,600
of what the term lazarus group actually

129
00:04:21,600 --> 00:04:22,400
means

130
00:04:22,400 --> 00:04:24,080
after all it is a threat actor that has

131
00:04:24,080 --> 00:04:25,600
been around for a long time

132
00:04:25,600 --> 00:04:28,320
and its motivations have been evolving

133
00:04:28,320 --> 00:04:29,840
what i can say is that

134
00:04:29,840 --> 00:04:32,400
within pwc the way that we track this

135
00:04:32,400 --> 00:04:34,320
intrusion set that is known as black

136
00:04:34,320 --> 00:04:35,440
artemis

137
00:04:35,440 --> 00:04:37,360
spans these three motivations that you

138
00:04:37,360 --> 00:04:38,800
can see on this slide

139
00:04:38,800 --> 00:04:41,520
that being sabotage espionage and

140
00:04:41,520 --> 00:04:43,520
cybercrime

141
00:04:43,520 --> 00:04:46,080
now this name black artemis also aligns

142
00:04:46,080 --> 00:04:47,600
with the open source names that i've

143
00:04:47,600 --> 00:04:48,639
also mentioned

144
00:04:48,639 --> 00:04:50,639
that being lazarus group and hidden

145
00:04:50,639 --> 00:04:52,880
cobra and throughout this presentation

146
00:04:52,880 --> 00:04:54,800
we'll be using the terms black artemis

147
00:04:54,800 --> 00:04:58,080
and lazarus group interchangeably

148
00:04:58,080 --> 00:04:59,919
however there are also other ways to

149
00:04:59,919 --> 00:05:02,160
track subgroups of the lazarus group as

150
00:05:02,160 --> 00:05:03,840
you can see on this slide

151
00:05:03,840 --> 00:05:05,840
for instance in the column describing

152
00:05:05,840 --> 00:05:08,240
the lazarus group's sabotage campaigns

153
00:05:08,240 --> 00:05:10,960
a known subgroup or also an alias of

154
00:05:10,960 --> 00:05:11,360
this

155
00:05:11,360 --> 00:05:13,600
group is called dark soul which was

156
00:05:13,600 --> 00:05:14,960
originally known for targeting

157
00:05:14,960 --> 00:05:16,800
organizations in south korea with the

158
00:05:16,800 --> 00:05:18,720
purposes of sabotage

159
00:05:18,720 --> 00:05:21,360
i.e through denial of service attacks

160
00:05:21,360 --> 00:05:23,120
but also on the far right you can see in

161
00:05:23,120 --> 00:05:24,560
the cyber crime column

162
00:05:24,560 --> 00:05:26,560
there are a couple of names that can be

163
00:05:26,560 --> 00:05:27,919
used to specifically track

164
00:05:27,919 --> 00:05:30,160
the subgroups of lazarus that focus on

165
00:05:30,160 --> 00:05:31,280
financial crime

166
00:05:31,280 --> 00:05:35,120
specifically apt-38 and blue narrow

167
00:05:35,120 --> 00:05:37,440
one that is also worth pointing out is

168
00:05:37,440 --> 00:05:39,360
the subgroup of lazarus

169
00:05:39,360 --> 00:05:42,240
known as andario that we assess spans

170
00:05:42,240 --> 00:05:44,400
both the motivations of espionage

171
00:05:44,400 --> 00:05:46,800
and cybercrime and it's worth pointing

172
00:05:46,800 --> 00:05:48,080
out that all of these are still

173
00:05:48,080 --> 00:05:51,199
a part of this lazarus umbrella but you

174
00:05:51,199 --> 00:05:52,400
may be asking why

175
00:05:52,400 --> 00:05:54,400
don't we track them in this more

176
00:05:54,400 --> 00:05:55,600
specific way

177
00:05:55,600 --> 00:05:57,360
and the reason we do that is that we are

178
00:05:57,360 --> 00:05:59,120
seeing an overlap in the tools that it

179
00:05:59,120 --> 00:05:59,919
uses

180
00:05:59,919 --> 00:06:03,520
for the purposes of espionage with also

181
00:06:03,520 --> 00:06:04,560
for the purposes

182
00:06:04,560 --> 00:06:06,720
of cyber prime so for instance a remote

183
00:06:06,720 --> 00:06:08,560
access trojan that we'll see being used

184
00:06:08,560 --> 00:06:11,520
in an espionage campaign would also then

185
00:06:11,520 --> 00:06:12,800
be reused

186
00:06:12,800 --> 00:06:14,880
in this different campaign targeting a

187
00:06:14,880 --> 00:06:16,479
completely different organization

188
00:06:16,479 --> 00:06:19,039
for a different motivation i.e

189
00:06:19,039 --> 00:06:21,680
cyberprime

190
00:06:23,120 --> 00:06:24,880
so on this slide we've mapped out a

191
00:06:24,880 --> 00:06:26,240
timeline of some of the really

192
00:06:26,240 --> 00:06:27,280
well-known

193
00:06:27,280 --> 00:06:30,479
lazarus group campaigns and the way

194
00:06:30,479 --> 00:06:32,080
we've done this is that we've

195
00:06:32,080 --> 00:06:34,080
named the campaign and given the year

196
00:06:34,080 --> 00:06:35,600
and a brief description

197
00:06:35,600 --> 00:06:38,319
of what that campaign involved so early

198
00:06:38,319 --> 00:06:40,160
on in the timeline you'll be able to see

199
00:06:40,160 --> 00:06:42,960
campaigns that were more focused on

200
00:06:42,960 --> 00:06:44,080
sabotage

201
00:06:44,080 --> 00:06:46,800
such as operation flame and operation

202
00:06:46,800 --> 00:06:48,160
troy which were well known to be

203
00:06:48,160 --> 00:06:50,479
targeting south korea

204
00:06:50,479 --> 00:06:52,479
as we go through the timeline there are

205
00:06:52,479 --> 00:06:54,080
more focuses on

206
00:06:54,080 --> 00:06:56,800
espionage campaigns such as operation

207
00:06:56,800 --> 00:06:58,080
blockbuster

208
00:06:58,080 --> 00:06:59,759
and the further we go we can start to

209
00:06:59,759 --> 00:07:01,680
see more and more cybercrime-focused

210
00:07:01,680 --> 00:07:02,720
campaigns as well

211
00:07:02,720 --> 00:07:04,000
such as the well-known bank of

212
00:07:04,000 --> 00:07:05,759
bangladesh heist

213
00:07:05,759 --> 00:07:09,440
and targeting of the bank of chile

214
00:07:09,440 --> 00:07:11,440
if we get up to the modern day we start

215
00:07:11,440 --> 00:07:12,720
to get onto the topic of this

216
00:07:12,720 --> 00:07:14,080
presentation

217
00:07:14,080 --> 00:07:17,360
which we started tracking in late 2019

218
00:07:17,360 --> 00:07:19,199
where the lazarus group used a tool

219
00:07:19,199 --> 00:07:22,319
known as d-trac

220
00:07:23,599 --> 00:07:27,360
so what is d-track d-track is a remote

221
00:07:27,360 --> 00:07:29,680
axis trojan that has been used by black

222
00:07:29,680 --> 00:07:30,319
artemis

223
00:07:30,319 --> 00:07:33,680
since at least 2014.

224
00:07:33,680 --> 00:07:36,240
the name d-track itself comes from the

225
00:07:36,240 --> 00:07:37,520
kaspersky blog

226
00:07:37,520 --> 00:07:40,240
released in late 2019 where they named

227
00:07:40,240 --> 00:07:41,759
this tool

228
00:07:41,759 --> 00:07:43,520
we assess from our research that there

229
00:07:43,520 --> 00:07:45,360
are also a couple of other names

230
00:07:45,360 --> 00:07:48,000
that are associated with this tool

231
00:07:48,000 --> 00:07:49,039
specifically

232
00:07:49,039 --> 00:07:51,840
preft which is the symantec name for it

233
00:07:51,840 --> 00:07:53,840
and hadesbot which is the crowdstrike

234
00:07:53,840 --> 00:07:55,759
name for it

235
00:07:55,759 --> 00:07:58,720
we released reporting internally at pwc

236
00:07:58,720 --> 00:08:00,400
on these various campaigns

237
00:08:00,400 --> 00:08:02,720
at the end of 2019 and the beginning of

238
00:08:02,720 --> 00:08:03,759
2020

239
00:08:03,759 --> 00:08:06,240
which builds up the basis of all this

240
00:08:06,240 --> 00:08:07,919
research

241
00:08:07,919 --> 00:08:10,000
now i've been calling d-trac a remote

242
00:08:10,000 --> 00:08:12,160
access trojan so far but it's a little

243
00:08:12,160 --> 00:08:14,479
bit more nuanced than that

244
00:08:14,479 --> 00:08:16,240
in fact when we were tracking it we

245
00:08:16,240 --> 00:08:18,560
found that earlier variants of d-track

246
00:08:18,560 --> 00:08:21,199
were closer to back doors that is they

247
00:08:21,199 --> 00:08:23,120
weren't so much there to

248
00:08:23,120 --> 00:08:24,879
interact with the file system of the

249
00:08:24,879 --> 00:08:26,400
infected machine in depth

250
00:08:26,400 --> 00:08:29,280
we're more so there to provide basic

251
00:08:29,280 --> 00:08:30,720
functionality

252
00:08:30,720 --> 00:08:34,240
and drop further tools whereas later on

253
00:08:34,240 --> 00:08:36,240
we found that d-track was more close to

254
00:08:36,240 --> 00:08:37,919
a fully fledged rat

255
00:08:37,919 --> 00:08:39,599
in that it could perform a lot of

256
00:08:39,599 --> 00:08:41,839
capabilities that the back doors could

257
00:08:41,839 --> 00:08:44,800
but also exfiltrate data as well for the

258
00:08:44,800 --> 00:08:46,800
threat actors use

259
00:08:46,800 --> 00:08:48,320
and in the next slide we're going to be

260
00:08:48,320 --> 00:08:50,000
breaking down these capabilities

261
00:08:50,000 --> 00:08:53,839
as we've observed them over time as such

262
00:08:53,839 --> 00:08:54,959
and you can see this is

263
00:08:54,959 --> 00:08:58,240
broken down into almost two sections

264
00:08:58,240 --> 00:09:01,040
at the top we have two capabilities that

265
00:09:01,040 --> 00:09:02,800
we have observed being consistent with

266
00:09:02,800 --> 00:09:03,200
all

267
00:09:03,200 --> 00:09:06,640
the track samples that we have picked up

268
00:09:06,640 --> 00:09:08,720
the first being the capability to

269
00:09:08,720 --> 00:09:11,120
download a file to the infected system

270
00:09:11,120 --> 00:09:13,040
and the second being the ability to

271
00:09:13,040 --> 00:09:14,880
change the time between beacons to the

272
00:09:14,880 --> 00:09:15,600
command and

273
00:09:15,600 --> 00:09:18,480
control servers

274
00:09:18,640 --> 00:09:21,600
we have also seen the abilities to run

275
00:09:21,600 --> 00:09:22,880
shell commands

276
00:09:22,880 --> 00:09:25,200
and remove persistence and exit from the

277
00:09:25,200 --> 00:09:26,560
remote access trojan

278
00:09:26,560 --> 00:09:28,000
but there are slight gaps in these

279
00:09:28,000 --> 00:09:30,640
capabilities where they weren't present

280
00:09:30,640 --> 00:09:33,440
now we can explain away some of those

281
00:09:33,440 --> 00:09:34,959
with some of the capabilities that were

282
00:09:34,959 --> 00:09:37,680
also present that would fill those gaps

283
00:09:37,680 --> 00:09:39,680
but these four capabilities at the top

284
00:09:39,680 --> 00:09:41,040
make up what we call

285
00:09:41,040 --> 00:09:44,480
the core build of d-trac

286
00:09:44,480 --> 00:09:45,760
as we go through the rest of these

287
00:09:45,760 --> 00:09:48,160
capabilities though we start to see the

288
00:09:48,160 --> 00:09:48,800
changes

289
00:09:48,800 --> 00:09:51,200
over time in the color yellow you can

290
00:09:51,200 --> 00:09:52,880
see all of the capabilities that are

291
00:09:52,880 --> 00:09:54,800
more associated with the backdoor

292
00:09:54,800 --> 00:09:55,600
variants

293
00:09:55,600 --> 00:09:58,160
of d-track and in orange the

294
00:09:58,160 --> 00:10:00,240
capabilities associated with

295
00:10:00,240 --> 00:10:02,640
the remote access trojan variants with

296
00:10:02,640 --> 00:10:05,120
2017 being the pivotal year

297
00:10:05,120 --> 00:10:08,720
between them changing these capabilities

298
00:10:08,720 --> 00:10:11,519
so for instance for the back door there

299
00:10:11,519 --> 00:10:12,800
are various capabilities

300
00:10:12,800 --> 00:10:15,040
such as downloading and immediately

301
00:10:15,040 --> 00:10:16,640
executing a file

302
00:10:16,640 --> 00:10:19,200
performing code injection or executing

303
00:10:19,200 --> 00:10:22,079
shell code within the same process

304
00:10:22,079 --> 00:10:24,160
these are all more experimental features

305
00:10:24,160 --> 00:10:25,680
as they only appear

306
00:10:25,680 --> 00:10:28,160
for very short amounts of time and then

307
00:10:28,160 --> 00:10:30,959
i'm seemingly never used again

308
00:10:30,959 --> 00:10:32,720
one capability i want to highlight which

309
00:10:32,720 --> 00:10:34,480
is at the top of this section

310
00:10:34,480 --> 00:10:36,560
is this removing persistent mechanisms

311
00:10:36,560 --> 00:10:37,839
if they've been set

312
00:10:37,839 --> 00:10:40,640
and immediately executing a file now

313
00:10:40,640 --> 00:10:42,399
this could be explained by

314
00:10:42,399 --> 00:10:44,720
the lazarus group using this capability

315
00:10:44,720 --> 00:10:45,519
to

316
00:10:45,519 --> 00:10:48,320
remove detract and then install a new

317
00:10:48,320 --> 00:10:48,959
implant

318
00:10:48,959 --> 00:10:50,720
maybe a new remote access trojan that it

319
00:10:50,720 --> 00:10:52,240
wants to use

320
00:10:52,240 --> 00:10:54,240
but some security researchers have also

321
00:10:54,240 --> 00:10:55,519
speculated

322
00:10:55,519 --> 00:10:58,079
that d-track has been used to deploy

323
00:10:58,079 --> 00:10:59,120
more tools

324
00:10:59,120 --> 00:11:01,519
for the purposes of sabotage such as

325
00:11:01,519 --> 00:11:03,120
disc wipers

326
00:11:03,120 --> 00:11:04,959
and this capability could also explain

327
00:11:04,959 --> 00:11:06,480
that

328
00:11:06,480 --> 00:11:08,240
we're going back to the end of it from

329
00:11:08,240 --> 00:11:10,640
this year 2017 onwards

330
00:11:10,640 --> 00:11:12,560
all of these experimental features were

331
00:11:12,560 --> 00:11:14,320
gotten and instead we're left with the

332
00:11:14,320 --> 00:11:15,839
two capabilities

333
00:11:15,839 --> 00:11:18,160
of exfiltrating files and getting the

334
00:11:18,160 --> 00:11:19,920
current configuration of the remote

335
00:11:19,920 --> 00:11:21,040
access trojan

336
00:11:21,040 --> 00:11:23,120
which builds up a stable build of

337
00:11:23,120 --> 00:11:25,120
detract that is used consistently

338
00:11:25,120 --> 00:11:29,600
from 2017 onwards

339
00:11:29,600 --> 00:11:31,120
so let's dive into the internals of

340
00:11:31,120 --> 00:11:33,760
detract a bit more in depth

341
00:11:33,760 --> 00:11:36,000
before any malicious code is executed by

342
00:11:36,000 --> 00:11:37,519
d-trac it must perform its

343
00:11:37,519 --> 00:11:39,600
initialization routine

344
00:11:39,600 --> 00:11:42,800
this consists of generating a victim id

345
00:11:42,800 --> 00:11:45,120
which is made by combining the values

346
00:11:45,120 --> 00:11:46,880
such as the computer name

347
00:11:46,880 --> 00:11:48,720
and the hardware id of the infected

348
00:11:48,720 --> 00:11:50,079
system

349
00:11:50,079 --> 00:11:51,920
it will then gather some basic system

350
00:11:51,920 --> 00:11:54,079
information such as the operating system

351
00:11:54,079 --> 00:11:55,040
type

352
00:11:55,040 --> 00:11:56,720
and the ip address of the infected

353
00:11:56,720 --> 00:11:58,320
machine

354
00:11:58,320 --> 00:12:01,040
and finally it will decode a number of

355
00:12:01,040 --> 00:12:02,959
hard-coded command control server

356
00:12:02,959 --> 00:12:04,079
addresses

357
00:12:04,079 --> 00:12:05,920
and you can see this at a high level on

358
00:12:05,920 --> 00:12:08,480
the right hand side of the slide

359
00:12:08,480 --> 00:12:10,160
a nice feature that you can also see on

360
00:12:10,160 --> 00:12:12,560
this slide in the bottom left

361
00:12:12,560 --> 00:12:15,360
is a screenshot where very kindly of the

362
00:12:15,360 --> 00:12:16,399
threat actor they

363
00:12:16,399 --> 00:12:18,720
or rather a mistake on their part they

364
00:12:18,720 --> 00:12:20,320
forgot to remove their debug logging

365
00:12:20,320 --> 00:12:21,519
messages

366
00:12:21,519 --> 00:12:23,920
which spells out the key functionality

367
00:12:23,920 --> 00:12:24,959
of these samples

368
00:12:24,959 --> 00:12:26,480
and in this case you can see that it's

369
00:12:26,480 --> 00:12:28,160
begun the main thread and that the

370
00:12:28,160 --> 00:12:29,600
initialization has finished

371
00:12:29,600 --> 00:12:33,120
successfully so how are these strings

372
00:12:33,120 --> 00:12:35,600
decoded how are these c2 addresses

373
00:12:35,600 --> 00:12:38,959
actually decoded well we have observed

374
00:12:38,959 --> 00:12:41,600
three variants of the string decoding

375
00:12:41,600 --> 00:12:42,560
routines

376
00:12:42,560 --> 00:12:45,600
being used in d-track in particular we

377
00:12:45,600 --> 00:12:47,680
have seen rc4 being used to decode the

378
00:12:47,680 --> 00:12:48,320
strings

379
00:12:48,320 --> 00:12:50,240
with a hard-coded key stored within the

380
00:12:50,240 --> 00:12:52,320
binary itself

381
00:12:52,320 --> 00:12:54,480
we've seen a method of xor being used

382
00:12:54,480 --> 00:12:56,079
where a one byte key is stored at the

383
00:12:56,079 --> 00:12:57,600
beginning of the string

384
00:12:57,600 --> 00:12:59,600
and then used to subsequently decode the

385
00:12:59,600 --> 00:13:01,279
rest of the string

386
00:13:01,279 --> 00:13:03,440
and we have seen a variant or multiple

387
00:13:03,440 --> 00:13:04,639
variants

388
00:13:04,639 --> 00:13:06,639
where strings are prepended with the

389
00:13:06,639 --> 00:13:08,079
characters ccs

390
00:13:08,079 --> 00:13:10,399
underscore and are then removed at

391
00:13:10,399 --> 00:13:12,399
runtime

392
00:13:12,399 --> 00:13:14,079
now the kind of strings that are encoded

393
00:13:14,079 --> 00:13:15,600
by these routines

394
00:13:15,600 --> 00:13:19,040
are as mentioned the c2s

395
00:13:19,040 --> 00:13:22,000
but also things like the api functions

396
00:13:22,000 --> 00:13:22,480
and

397
00:13:22,480 --> 00:13:24,079
format strings that might want to be

398
00:13:24,079 --> 00:13:26,000
used and you can see an example of this

399
00:13:26,000 --> 00:13:27,680
routine on the right

400
00:13:27,680 --> 00:13:29,920
where this routine has the capability to

401
00:13:29,920 --> 00:13:31,279
decode ccs

402
00:13:31,279 --> 00:13:35,839
underscore strings and xor strings

403
00:13:37,760 --> 00:13:40,000
so in combination with this string

404
00:13:40,000 --> 00:13:42,160
decoding routine

405
00:13:42,160 --> 00:13:44,880
d-track for the most part will perform a

406
00:13:44,880 --> 00:13:48,079
technique known as dynamic api loading

407
00:13:48,079 --> 00:13:50,560
this is where rather than having all of

408
00:13:50,560 --> 00:13:51,279
your

409
00:13:51,279 --> 00:13:53,760
imports and windows apis stored in your

410
00:13:53,760 --> 00:13:55,920
import address table

411
00:13:55,920 --> 00:13:58,399
instead they are all loaded at run time

412
00:13:58,399 --> 00:14:00,000
using the windows api's

413
00:14:00,000 --> 00:14:03,040
load library and get prop address

414
00:14:03,040 --> 00:14:05,040
this can make static analysis harder as

415
00:14:05,040 --> 00:14:06,880
you won't see these apis present in the

416
00:14:06,880 --> 00:14:07,680
binary

417
00:14:07,680 --> 00:14:10,480
using only static analysis tools and

418
00:14:10,480 --> 00:14:11,440
this is actually

419
00:14:11,440 --> 00:14:14,000
a technique that is quite consistently

420
00:14:14,000 --> 00:14:14,800
used by

421
00:14:14,800 --> 00:14:17,920
black artemis or the lazarus group it's

422
00:14:17,920 --> 00:14:20,079
not unique to the lazarus group

423
00:14:20,079 --> 00:14:21,920
but it is informative that they carry on

424
00:14:21,920 --> 00:14:23,360
using this technique

425
00:14:23,360 --> 00:14:27,040
in most of their tools

426
00:14:27,120 --> 00:14:29,680
this technique combined with the string

427
00:14:29,680 --> 00:14:31,279
encoding can make detract

428
00:14:31,279 --> 00:14:34,399
a bit of a pain to analyze statically

429
00:14:34,399 --> 00:14:36,800
but we developed some hydro scripts

430
00:14:36,800 --> 00:14:38,560
internally just to make our lives a bit

431
00:14:38,560 --> 00:14:40,240
easier to automatically decode these

432
00:14:40,240 --> 00:14:40,880
strings

433
00:14:40,880 --> 00:14:45,839
and to help us retype these libraries

434
00:14:47,279 --> 00:14:48,800
so for the most part i've been

435
00:14:48,800 --> 00:14:51,199
describing features of d-track

436
00:14:51,199 --> 00:14:54,000
that are consistent across all samples

437
00:14:54,000 --> 00:14:55,600
but i want to talk about a few features

438
00:14:55,600 --> 00:14:57,279
over the next few slides that we've only

439
00:14:57,279 --> 00:14:59,040
observed in a couple of samples

440
00:14:59,040 --> 00:15:00,959
again sometimes more experimental

441
00:15:00,959 --> 00:15:02,399
features

442
00:15:02,399 --> 00:15:04,639
in this case we've observed a couple of

443
00:15:04,639 --> 00:15:06,800
persistence mechanisms being set

444
00:15:06,800 --> 00:15:09,120
by the d-trac promote access trojan

445
00:15:09,120 --> 00:15:11,920
specifically we have seen them use

446
00:15:11,920 --> 00:15:15,120
a service using the sc command to create

447
00:15:15,120 --> 00:15:16,560
a service that will automatically

448
00:15:16,560 --> 00:15:17,199
execute

449
00:15:17,199 --> 00:15:19,519
when the user logs in and we've also

450
00:15:19,519 --> 00:15:20,240
seen them

451
00:15:20,240 --> 00:15:22,399
dropping shortcut links into the user's

452
00:15:22,399 --> 00:15:23,440
startup folder

453
00:15:23,440 --> 00:15:26,399
that will again execute detracts dropper

454
00:15:26,399 --> 00:15:28,240
at runtime

455
00:15:28,240 --> 00:15:29,680
we'll be talking about the dropper a

456
00:15:29,680 --> 00:15:32,240
little bit later on and as i've said

457
00:15:32,240 --> 00:15:33,600
not all of these samples have a

458
00:15:33,600 --> 00:15:36,160
persistence mechanism this was more

459
00:15:36,160 --> 00:15:39,440
observed in older samples towards 2014

460
00:15:39,440 --> 00:15:40,320
2015

461
00:15:40,320 --> 00:15:43,360
variants of detract

462
00:15:44,639 --> 00:15:46,720
and i quickly want to go over a couple

463
00:15:46,720 --> 00:15:48,399
of different techniques that we've seen

464
00:15:48,399 --> 00:15:49,519
detract use

465
00:15:49,519 --> 00:15:52,720
to try and evade analysis the first

466
00:15:52,720 --> 00:15:54,639
being antivirus evasion

467
00:15:54,639 --> 00:15:56,800
specifically we have seen some detract

468
00:15:56,800 --> 00:15:57,680
variants

469
00:15:57,680 --> 00:15:59,600
look for file paths and running

470
00:15:59,600 --> 00:16:01,920
processes associated with the armlab

471
00:16:01,920 --> 00:16:03,040
antivirus

472
00:16:03,040 --> 00:16:05,519
software and even so far it's going to

473
00:16:05,519 --> 00:16:06,160
try and

474
00:16:06,160 --> 00:16:08,560
destroy the windows that are associated

475
00:16:08,560 --> 00:16:11,360
with the ad process

476
00:16:11,360 --> 00:16:13,600
this is interesting in of itself as

477
00:16:13,600 --> 00:16:15,600
onlab is a south korean anti-virus

478
00:16:15,600 --> 00:16:16,320
vendor

479
00:16:16,320 --> 00:16:19,360
and could indicate some targeting

480
00:16:19,360 --> 00:16:20,880
there is also a technique we've seen

481
00:16:20,880 --> 00:16:23,600
used in some d-trac samples

482
00:16:23,600 --> 00:16:26,000
that will evade sandboxes and this is

483
00:16:26,000 --> 00:16:27,839
done by using the windows api

484
00:16:27,839 --> 00:16:30,720
get cursorpos to get the position of the

485
00:16:30,720 --> 00:16:31,920
mouse cursor

486
00:16:31,920 --> 00:16:34,160
and not continue executing until the

487
00:16:34,160 --> 00:16:36,000
mouse cursor has moved

488
00:16:36,000 --> 00:16:37,759
this can be defeated by a lot of modern

489
00:16:37,759 --> 00:16:39,040
sandboxes by

490
00:16:39,040 --> 00:16:41,360
simulating mouse movement but given this

491
00:16:41,360 --> 00:16:43,040
was present in all the samples it might

492
00:16:43,040 --> 00:16:44,240
have been enough back then

493
00:16:44,240 --> 00:16:47,440
to actually evade sandboxes there are a

494
00:16:47,440 --> 00:16:50,000
couple of more anti-analysis techniques

495
00:16:50,000 --> 00:16:52,120
that we've observed as well including an

496
00:16:52,120 --> 00:16:53,839
anti-virtualization technique

497
00:16:53,839 --> 00:16:55,680
that would look for the vmware drag and

498
00:16:55,680 --> 00:16:57,360
drop folder

499
00:16:57,360 --> 00:16:59,440
and a few cases where detract would look

500
00:16:59,440 --> 00:17:01,040
for the following running processes

501
00:17:01,040 --> 00:17:02,880
you can see in the bottom right

502
00:17:02,880 --> 00:17:04,880
including process explorer

503
00:17:04,880 --> 00:17:07,919
wireshark and process monitor standard

504
00:17:07,919 --> 00:17:09,359
tools that are associated

505
00:17:09,359 --> 00:17:12,799
with malware analysis

506
00:17:13,760 --> 00:17:15,520
so i've been focusing on the

507
00:17:15,520 --> 00:17:17,439
capabilities of e-track so far

508
00:17:17,439 --> 00:17:19,119
i quickly want to touch on some of the

509
00:17:19,119 --> 00:17:21,199
command control features

510
00:17:21,199 --> 00:17:23,520
so as i said before at the beginning of

511
00:17:23,520 --> 00:17:25,599
its initialization detract will

512
00:17:25,599 --> 00:17:28,720
decode between two to five hard-coded

513
00:17:28,720 --> 00:17:29,679
urls

514
00:17:29,679 --> 00:17:30,799
for the most part we've seen them

515
00:17:30,799 --> 00:17:33,600
decoding three urls but this is varied

516
00:17:33,600 --> 00:17:35,760
over time

517
00:17:35,760 --> 00:17:38,240
most of these urls contain domains

518
00:17:38,240 --> 00:17:39,120
themselves

519
00:17:39,120 --> 00:17:40,799
and from our analysis we assess that

520
00:17:40,799 --> 00:17:42,880
most of the domains observed

521
00:17:42,880 --> 00:17:44,799
are likely compromised infrastructure

522
00:17:44,799 --> 00:17:47,039
being used to host the lazarus group's

523
00:17:47,039 --> 00:17:49,760
command and control servers

524
00:17:49,760 --> 00:17:51,679
however we've seen some interesting

525
00:17:51,679 --> 00:17:53,120
cases where

526
00:17:53,120 --> 00:17:55,280
rather than a domain being used we've

527
00:17:55,280 --> 00:17:57,360
seen ip addresses being used and more

528
00:17:57,360 --> 00:17:58,720
specifically we've seen

529
00:17:58,720 --> 00:18:01,200
internal ip addresses being used for

530
00:18:01,200 --> 00:18:03,520
command and control

531
00:18:03,520 --> 00:18:05,520
this likely indicates that the lazarus

532
00:18:05,520 --> 00:18:06,880
group has

533
00:18:06,880 --> 00:18:09,039
embedded their commander control servers

534
00:18:09,039 --> 00:18:11,360
within a victim organization's network

535
00:18:11,360 --> 00:18:12,840
and are using them for command and

536
00:18:12,840 --> 00:18:15,200
control

537
00:18:15,200 --> 00:18:17,840
c2 is done over http as you can see on

538
00:18:17,840 --> 00:18:19,520
some images on the right hand side of

539
00:18:19,520 --> 00:18:20,559
this slide

540
00:18:20,559 --> 00:18:22,559
but the communications are encrypted

541
00:18:22,559 --> 00:18:28,000
using a custom cryptography routine

542
00:18:28,000 --> 00:18:31,360
right so john has

543
00:18:31,360 --> 00:18:34,480
kindly given us a very good technical

544
00:18:34,480 --> 00:18:36,640
deep dive into d-track

545
00:18:36,640 --> 00:18:38,720
but i thought that maybe we could take a

546
00:18:38,720 --> 00:18:40,720
look also at some of the campaigns

547
00:18:40,720 --> 00:18:42,960
that detract has been used as a payload

548
00:18:42,960 --> 00:18:43,919
in

549
00:18:43,919 --> 00:18:46,960
um so both from our geographic

550
00:18:46,960 --> 00:18:49,679
and sectoral and motivation perspective

551
00:18:49,679 --> 00:18:50,960
firstly we've seen

552
00:18:50,960 --> 00:18:53,520
a variant of the track called atm

553
00:18:53,520 --> 00:18:56,080
d-track by kaspersky being used in

554
00:18:56,080 --> 00:18:58,640
targeting of financial institutions

555
00:18:58,640 --> 00:19:00,799
for example for the purposes of atm

556
00:19:00,799 --> 00:19:02,080
cashlet attacks

557
00:19:02,080 --> 00:19:05,120
but we've used d-truck mostly being used

558
00:19:05,120 --> 00:19:08,320
for espionage purposes for example palo

559
00:19:08,320 --> 00:19:10,720
alto unit 42 actually reported that

560
00:19:10,720 --> 00:19:12,880
what we assess is that d-trac variant

561
00:19:12,880 --> 00:19:13,760
which they call

562
00:19:13,760 --> 00:19:16,080
t-drop 2 was used to target

563
00:19:16,080 --> 00:19:18,240
transportation and logistics companies

564
00:19:18,240 --> 00:19:20,799
in europe we've seen the track mostly

565
00:19:20,799 --> 00:19:23,039
deployed against south korean targets

566
00:19:23,039 --> 00:19:26,400
but then in late 2019 several

567
00:19:26,400 --> 00:19:28,799
indian organizations including the

568
00:19:28,799 --> 00:19:30,720
indian space research organization

569
00:19:30,720 --> 00:19:32,880
and kundan kulam nuclear power plant

570
00:19:32,880 --> 00:19:35,679
reported that they had been compromised

571
00:19:35,679 --> 00:19:38,400
with d-trac now as john mentioned there

572
00:19:38,400 --> 00:19:39,679
also have been reports

573
00:19:39,679 --> 00:19:41,840
that d-track might have been used to

574
00:19:41,840 --> 00:19:43,919
execute disk wipers and other

575
00:19:43,919 --> 00:19:45,679
sabotage-oriented malware

576
00:19:45,679 --> 00:19:47,840
we have not observed evidence of this

577
00:19:47,840 --> 00:19:48,720
firsthand

578
00:19:48,720 --> 00:19:50,559
but we cannot rule out based on the

579
00:19:50,559 --> 00:19:52,240
capabilities of detract that this could

580
00:19:52,240 --> 00:19:54,320
have been a possibility

581
00:19:54,320 --> 00:19:57,440
now let's take a closer look at the kk

582
00:19:57,440 --> 00:19:58,000
and pp

583
00:19:58,000 --> 00:20:00,000
incident because it's been a pretty big

584
00:20:00,000 --> 00:20:02,000
headline and it's also a very particular

585
00:20:02,000 --> 00:20:02,720
case

586
00:20:02,720 --> 00:20:06,320
of use of the track so let's start

587
00:20:06,320 --> 00:20:08,320
and what we have here on screen is a

588
00:20:08,320 --> 00:20:10,320
sample that we assess was highly likely

589
00:20:10,320 --> 00:20:12,159
used in the kkk mpp

590
00:20:12,159 --> 00:20:15,679
intrusion now the sample works like this

591
00:20:15,679 --> 00:20:18,320
there is a portable executable dropper

592
00:20:18,320 --> 00:20:19,600
which has been patched

593
00:20:19,600 --> 00:20:22,559
to lead to a decryption routine which

594
00:20:22,559 --> 00:20:24,720
decrypts unencrypted overlay

595
00:20:24,720 --> 00:20:27,840
and then loads the decrypted payload

596
00:20:27,840 --> 00:20:29,039
into memory

597
00:20:29,039 --> 00:20:32,480
which is a direct standard thing but

598
00:20:32,480 --> 00:20:35,039
this sample is particularly tailored to

599
00:20:35,039 --> 00:20:36,320
the victim environment and we're going

600
00:20:36,320 --> 00:20:37,840
to get to that in a second

601
00:20:37,840 --> 00:20:39,520
now if we look at the structure of the

602
00:20:39,520 --> 00:20:40,960
binary we have a win

603
00:20:40,960 --> 00:20:43,919
main function which contains three main

604
00:20:43,919 --> 00:20:46,080
subroutines which neatly subdivide the

605
00:20:46,080 --> 00:20:48,480
main functionality of dtrak

606
00:20:48,480 --> 00:20:50,799
firstly we have a subroutine that takes

607
00:20:50,799 --> 00:20:52,559
care of initialization

608
00:20:52,559 --> 00:20:55,679
and of the windows libraries import

609
00:20:55,679 --> 00:20:57,600
which we can see on screen here on the

610
00:20:57,600 --> 00:21:00,000
right is done with the ccs

611
00:21:00,000 --> 00:21:02,960
underscore obfuscation which is a fairly

612
00:21:02,960 --> 00:21:04,720
trivial obfuscation method if you think

613
00:21:04,720 --> 00:21:06,240
about it but actually

614
00:21:06,240 --> 00:21:08,960
might have been just about enough to

615
00:21:08,960 --> 00:21:09,840
bypass

616
00:21:09,840 --> 00:21:12,880
static signaturing methods or any kind

617
00:21:12,880 --> 00:21:13,840
of like static

618
00:21:13,840 --> 00:21:17,280
detection then we go into another

619
00:21:17,280 --> 00:21:19,440
subroutine which takes care of victim

620
00:21:19,440 --> 00:21:21,520
fingerprinting and identification

621
00:21:21,520 --> 00:21:23,440
and then there's a third function which

622
00:21:23,440 --> 00:21:24,799
actually contains

623
00:21:24,799 --> 00:21:27,520
the huge chunk of the main detox

624
00:21:27,520 --> 00:21:28,880
functionality and

625
00:21:28,880 --> 00:21:31,120
the ability to actually look more in

626
00:21:31,120 --> 00:21:32,799
depth at the victim and not the file

627
00:21:32,799 --> 00:21:34,400
system

628
00:21:34,400 --> 00:21:36,720
so victim fingerprinting and

629
00:21:36,720 --> 00:21:38,880
identification in the kk and ppp

630
00:21:38,880 --> 00:21:40,960
track sample are done pretty much as

631
00:21:40,960 --> 00:21:42,799
this direct standard so we'll have a

632
00:21:42,799 --> 00:21:43,679
victim id

633
00:21:43,679 --> 00:21:46,320
which comprises of computer name windows

634
00:21:46,320 --> 00:21:48,559
owner and windows copy organization as

635
00:21:48,559 --> 00:21:50,559
well as some hardware information

636
00:21:50,559 --> 00:21:53,200
and the kmpp direct sample will also

637
00:21:53,200 --> 00:21:54,960
like other detroit samples

638
00:21:54,960 --> 00:21:58,320
gather the machine operating system and

639
00:21:58,320 --> 00:22:01,360
local ap but then that's where the

640
00:22:01,360 --> 00:22:03,200
differences with the standard detract

641
00:22:03,200 --> 00:22:04,400
build begin

642
00:22:04,400 --> 00:22:08,000
because in this case we have no external

643
00:22:08,000 --> 00:22:10,159
ap addresses being decrypted

644
00:22:10,159 --> 00:22:13,120
and we have no external c2s and no

645
00:22:13,120 --> 00:22:14,640
configuration files

646
00:22:14,640 --> 00:22:17,600
rather we just go into the main chunk of

647
00:22:17,600 --> 00:22:18,720
functionality

648
00:22:18,720 --> 00:22:21,440
and we jump into much deeper victim

649
00:22:21,440 --> 00:22:22,320
fingerprinting

650
00:22:22,320 --> 00:22:24,960
which is affected through a whole series

651
00:22:24,960 --> 00:22:26,799
of sequential

652
00:22:26,799 --> 00:22:30,080
command line commands that are just run

653
00:22:30,080 --> 00:22:32,240
one after the other so you can see on

654
00:22:32,240 --> 00:22:33,280
the screen here

655
00:22:33,280 --> 00:22:36,799
a task list or netstat and the results

656
00:22:36,799 --> 00:22:38,559
of all of these commands that have been

657
00:22:38,559 --> 00:22:40,159
run on the btm system

658
00:22:40,159 --> 00:22:43,440
are then logged into specific files

659
00:22:43,440 --> 00:22:46,320
which as you can see on the top are

660
00:22:46,320 --> 00:22:47,520
saved in a folder

661
00:22:47,520 --> 00:22:50,799
called temp within the user's normal

662
00:22:50,799 --> 00:22:51,600
temp folder

663
00:22:51,600 --> 00:22:55,039
you can never have enough temps and then

664
00:22:55,039 --> 00:22:58,240
after this is done all of these files

665
00:22:58,240 --> 00:23:00,799
will be packaged up in a compressed

666
00:23:00,799 --> 00:23:03,360
archive and password protected

667
00:23:03,360 --> 00:23:05,840
the kmpp direct sample will also gather

668
00:23:05,840 --> 00:23:07,679
browsing and internet data which is

669
00:23:07,679 --> 00:23:08,960
saved in a folder

670
00:23:08,960 --> 00:23:12,320
again in the temp folder with the name

671
00:23:12,320 --> 00:23:14,960
of the machine's local ip address

672
00:23:14,960 --> 00:23:16,880
only after all of this information has

673
00:23:16,880 --> 00:23:18,159
been captured

674
00:23:18,159 --> 00:23:21,200
the malware will try to reach

675
00:23:21,200 --> 00:23:24,559
on internal ap and if a connection is

676
00:23:24,559 --> 00:23:26,000
possible it will go on to further

677
00:23:26,000 --> 00:23:28,080
functionality if it's not you will stop

678
00:23:28,080 --> 00:23:31,200
executing now if it has

679
00:23:31,200 --> 00:23:33,280
reached this internal ap address which

680
00:23:33,280 --> 00:23:34,799
is in the 192 range

681
00:23:34,799 --> 00:23:36,640
the malware will then proceed to

682
00:23:36,640 --> 00:23:38,480
enumerate drives and

683
00:23:38,480 --> 00:23:40,240
files present on the viking machine's

684
00:23:40,240 --> 00:23:41,919
file system and

685
00:23:41,919 --> 00:23:44,000
again package up all this information

686
00:23:44,000 --> 00:23:46,080
that it has collected and compress it in

687
00:23:46,080 --> 00:23:47,279
a password protected

688
00:23:47,279 --> 00:23:49,520
archive we've mentioned that the sample

689
00:23:49,520 --> 00:23:51,200
is highly tailored

690
00:23:51,200 --> 00:23:54,159
and if this is not already interesting

691
00:23:54,159 --> 00:23:55,039
enough

692
00:23:55,039 --> 00:23:56,880
the exfiltration method that the sample

693
00:23:56,880 --> 00:23:59,039
uses will definitely be

694
00:23:59,039 --> 00:24:01,520
so what we see here is that this sample

695
00:24:01,520 --> 00:24:02,799
also contains

696
00:24:02,799 --> 00:24:05,679
a whole series of hard-coded commands

697
00:24:05,679 --> 00:24:06,320
using

698
00:24:06,320 --> 00:24:09,679
net in order to mount a network share

699
00:24:09,679 --> 00:24:12,400
onto another internal ap we see here in

700
00:24:12,400 --> 00:24:14,559
the 10 network range

701
00:24:14,559 --> 00:24:18,559
using hard-coded account credentials

702
00:24:18,559 --> 00:24:20,400
which are specific with the compromised

703
00:24:20,400 --> 00:24:21,600
environment we see

704
00:24:21,600 --> 00:24:23,520
that it's trying to mount a network

705
00:24:23,520 --> 00:24:26,400
share on a domain controller

706
00:24:26,400 --> 00:24:29,520
so this is very distinctive and very

707
00:24:29,520 --> 00:24:32,400
relevant for a whole series of reasons

708
00:24:32,400 --> 00:24:34,880
firstly because what we're looking at

709
00:24:34,880 --> 00:24:35,520
here

710
00:24:35,520 --> 00:24:39,200
is not really a backdoor

711
00:24:39,200 --> 00:24:43,679
well we would have a normal detox sample

712
00:24:43,679 --> 00:24:46,240
in its main chunk of functionality

713
00:24:46,240 --> 00:24:47,679
having a huge jump table

714
00:24:47,679 --> 00:24:49,440
interpreting commands received from the

715
00:24:49,440 --> 00:24:52,000
c2 and then taking further action based

716
00:24:52,000 --> 00:24:53,600
on the command received and then feeding

717
00:24:53,600 --> 00:24:54,799
back information

718
00:24:54,799 --> 00:24:56,720
there is none of that here there is no

719
00:24:56,720 --> 00:24:58,480
interaction with sc2

720
00:24:58,480 --> 00:25:01,039
what we have instead is basically an

721
00:25:01,039 --> 00:25:02,080
infostealer

722
00:25:02,080 --> 00:25:04,080
uh with just a whole series of hardcoded

723
00:25:04,080 --> 00:25:05,840
commands this is not going to download

724
00:25:05,840 --> 00:25:07,200
any further payloads

725
00:25:07,200 --> 00:25:09,600
it's just going to execute whatever is

726
00:25:09,600 --> 00:25:11,200
hard-coded in the sample and then

727
00:25:11,200 --> 00:25:13,200
exfiltrate the results

728
00:25:13,200 --> 00:25:16,960
so what does this tell us that firstly

729
00:25:16,960 --> 00:25:20,000
the binary has been almost carved out

730
00:25:20,000 --> 00:25:21,919
of its main functionality and replaced

731
00:25:21,919 --> 00:25:23,440
with these specific

732
00:25:23,440 --> 00:25:26,559
ad-hoc capabilities but also

733
00:25:26,559 --> 00:25:28,080
that the threat actor would have needed

734
00:25:28,080 --> 00:25:29,679
to have a very

735
00:25:29,679 --> 00:25:32,159
deep level of penetration of the kk and

736
00:25:32,159 --> 00:25:33,200
pp network

737
00:25:33,200 --> 00:25:36,000
in order to firstly move laterally

738
00:25:36,000 --> 00:25:37,520
secondly compromise the domain

739
00:25:37,520 --> 00:25:39,840
controller and be able to use it for

740
00:25:39,840 --> 00:25:40,480
staging

741
00:25:40,480 --> 00:25:43,039
of exfiltrated information and thirdly

742
00:25:43,039 --> 00:25:44,240
to even pinpoint

743
00:25:44,240 --> 00:25:46,720
systems of interest on which to drop

744
00:25:46,720 --> 00:25:48,000
these tailored

745
00:25:48,000 --> 00:25:50,400
detox samples to then perform

746
00:25:50,400 --> 00:25:52,159
information stealing

747
00:25:52,159 --> 00:25:54,799
and we also need to remember that dtrac

748
00:25:54,799 --> 00:25:57,600
is not a standalone executable it

749
00:25:57,600 --> 00:25:59,600
it's not like it just arrives magically

750
00:25:59,600 --> 00:26:00,880
in victim systems

751
00:26:00,880 --> 00:26:04,159
it needs to have a prior foothold the

752
00:26:04,159 --> 00:26:06,159
tractor proper needs to arrive there

753
00:26:06,159 --> 00:26:07,679
somehow in the first place

754
00:26:07,679 --> 00:26:09,760
all of which requires prior compromise

755
00:26:09,760 --> 00:26:11,279
of the environment

756
00:26:11,279 --> 00:26:14,240
and now let's look at a bit of an easter

757
00:26:14,240 --> 00:26:15,120
egg which are

758
00:26:15,120 --> 00:26:18,200
the links to lazarus now

759
00:26:18,200 --> 00:26:21,520
kkmpp d-track is effectively

760
00:26:21,520 --> 00:26:24,400
d-trac the binary structure is exactly

761
00:26:24,400 --> 00:26:25,919
the same and you can tell that the code

762
00:26:25,919 --> 00:26:27,440
base is the same

763
00:26:27,440 --> 00:26:30,720
what is changed is that it's almost been

764
00:26:30,720 --> 00:26:32,240
carved out like a pumpkin

765
00:26:32,240 --> 00:26:34,559
and then the ad-hoc has been added in in

766
00:26:34,559 --> 00:26:35,520
its place

767
00:26:35,520 --> 00:26:37,520
we can also have a few very interesting

768
00:26:37,520 --> 00:26:39,120
details for example

769
00:26:39,120 --> 00:26:40,880
one of the passwords that is used to

770
00:26:40,880 --> 00:26:43,279
encrypt the compressed archives

771
00:26:43,279 --> 00:26:46,480
is the one they dkw ero

772
00:26:46,480 --> 00:26:49,520
38 etc now that's

773
00:26:49,520 --> 00:26:51,840
such a well-known lazarus password that

774
00:26:51,840 --> 00:26:52,799
varistoto

775
00:26:52,799 --> 00:26:55,039
actually ended up using it as a case

776
00:26:55,039 --> 00:26:57,039
study for their ida

777
00:26:57,039 --> 00:26:59,279
plugin so it's pretty much a known

778
00:26:59,279 --> 00:27:00,080
convention

779
00:27:00,080 --> 00:27:02,159
and it actually dates back all the way

780
00:27:02,159 --> 00:27:04,640
to the days of operation troy

781
00:27:04,640 --> 00:27:07,919
which was a series of destructive and

782
00:27:07,919 --> 00:27:09,760
disruptive attacks on south korean

783
00:27:09,760 --> 00:27:12,159
targets in 2009 so we're

784
00:27:12,159 --> 00:27:14,799
seeing the same password a decade later

785
00:27:14,799 --> 00:27:15,360
now

786
00:27:15,360 --> 00:27:18,960
a caveat here very huge caveat this may

787
00:27:18,960 --> 00:27:20,960
well be a threat actor convention we

788
00:27:20,960 --> 00:27:22,880
also know that false flag operations are

789
00:27:22,880 --> 00:27:24,240
very much a thing

790
00:27:24,240 --> 00:27:26,640
but we also know that malware-based

791
00:27:26,640 --> 00:27:27,520
attribution

792
00:27:27,520 --> 00:27:30,559
is very much limited and so

793
00:27:30,559 --> 00:27:32,559
the important thing to remember here is

794
00:27:32,559 --> 00:27:34,000
that whenever we're looking at an

795
00:27:34,000 --> 00:27:35,919
intrusion it's not enough to just look

796
00:27:35,919 --> 00:27:36,880
at the malware and say

797
00:27:36,880 --> 00:27:39,919
yep this is this or to look at these

798
00:27:39,919 --> 00:27:41,760
details you also need to be looking at

799
00:27:41,760 --> 00:27:43,840
the tactics techniques and procedures

800
00:27:43,840 --> 00:27:45,760
involving the intrusion as well as the

801
00:27:45,760 --> 00:27:47,520
infrastructure in order to be able to

802
00:27:47,520 --> 00:27:48,159
make

803
00:27:48,159 --> 00:27:51,279
a comprehensive assessment

804
00:27:51,279 --> 00:27:54,799
so we also said that d-track effectively

805
00:27:54,799 --> 00:27:56,080
is loaded in memory it's not a

806
00:27:56,080 --> 00:27:57,840
standalone executable it doesn't really

807
00:27:57,840 --> 00:27:58,799
touch disk

808
00:27:58,799 --> 00:28:01,600
so how does it get there maybe john can

809
00:28:01,600 --> 00:28:03,039
tell us

810
00:28:03,039 --> 00:28:06,080
thank you very much so as weber has

811
00:28:06,080 --> 00:28:07,520
highlighted

812
00:28:07,520 --> 00:28:10,480
dtrak has never saved a disk in a

813
00:28:10,480 --> 00:28:11,679
standard format

814
00:28:11,679 --> 00:28:14,240
so how do we track it if it's never

815
00:28:14,240 --> 00:28:16,240
saved a disk it's never going to be

816
00:28:16,240 --> 00:28:19,440
easily shared on online multi-antivirus

817
00:28:19,440 --> 00:28:21,679
scanners for example

818
00:28:21,679 --> 00:28:24,320
what we found through our analysis is

819
00:28:24,320 --> 00:28:25,039
that

820
00:28:25,039 --> 00:28:28,320
d-track is dropped by a unique dropper

821
00:28:28,320 --> 00:28:30,559
that we call track drop and has been

822
00:28:30,559 --> 00:28:32,799
around since at least 2014

823
00:28:32,799 --> 00:28:34,880
i.e the same time that detract campaigns

824
00:28:34,880 --> 00:28:36,480
began

825
00:28:36,480 --> 00:28:38,720
track drop also goes by a couple of

826
00:28:38,720 --> 00:28:40,159
other names that we assess

827
00:28:40,159 --> 00:28:42,880
are similar in open source including

828
00:28:42,880 --> 00:28:44,480
export control

829
00:28:44,480 --> 00:28:47,039
and t-drop 2 although the connection to

830
00:28:47,039 --> 00:28:48,720
t-drop 2 itself is a little bit more

831
00:28:48,720 --> 00:28:49,360
nuanced

832
00:28:49,360 --> 00:28:52,080
and we'll get on to that in a few slides

833
00:28:52,080 --> 00:28:52,559
so

834
00:28:52,559 --> 00:28:55,760
what is track drop itself for the most

835
00:28:55,760 --> 00:28:58,159
part track drop binaries are benign

836
00:28:58,159 --> 00:28:59,279
executables

837
00:28:59,279 --> 00:29:02,000
that have been patched or modified in

838
00:29:02,000 --> 00:29:02,559
order to

839
00:29:02,559 --> 00:29:05,600
execute a unique cryptography routine

840
00:29:05,600 --> 00:29:08,240
that will decode a payload stored in the

841
00:29:08,240 --> 00:29:09,679
encrypted overlay

842
00:29:09,679 --> 00:29:12,799
of the portable executable and then run

843
00:29:12,799 --> 00:29:14,240
it

844
00:29:14,240 --> 00:29:16,080
the nice thing about this unique

845
00:29:16,080 --> 00:29:17,760
cryptography routine

846
00:29:17,760 --> 00:29:19,919
is that we were able to go away and

847
00:29:19,919 --> 00:29:21,360
using yara

848
00:29:21,360 --> 00:29:24,159
signature this cryptography routine and

849
00:29:24,159 --> 00:29:25,760
then we were able to use this

850
00:29:25,760 --> 00:29:28,320
to track all of the track drop samples

851
00:29:28,320 --> 00:29:29,520
that we have observed

852
00:29:29,520 --> 00:29:32,399
over the last few years from 2014

853
00:29:32,399 --> 00:29:34,720
onwards

854
00:29:34,720 --> 00:29:36,640
now there are two variants of track drop

855
00:29:36,640 --> 00:29:38,480
that we have observed

856
00:29:38,480 --> 00:29:41,919
the first loads detract into the same

857
00:29:41,919 --> 00:29:42,480
process

858
00:29:42,480 --> 00:29:44,880
as track drop itself but for the more

859
00:29:44,880 --> 00:29:46,240
common variants

860
00:29:46,240 --> 00:29:47,440
we see it use a slightly more

861
00:29:47,440 --> 00:29:49,520
complicated process of

862
00:29:49,520 --> 00:29:51,520
hollowing a randomly selected system

863
00:29:51,520 --> 00:29:53,679
binary and loading detract

864
00:29:53,679 --> 00:29:58,559
into that process i.e process hollowing

865
00:29:59,520 --> 00:30:02,000
so for the most part we've observed

866
00:30:02,000 --> 00:30:02,880
track drop

867
00:30:02,880 --> 00:30:06,159
dropping detract samples but not

868
00:30:06,159 --> 00:30:07,840
exclusively

869
00:30:07,840 --> 00:30:09,600
in fact through our analysis we found

870
00:30:09,600 --> 00:30:10,880
that track drop

871
00:30:10,880 --> 00:30:14,000
also drops a suite of other tools

872
00:30:14,000 --> 00:30:15,919
including downloaders this is where

873
00:30:15,919 --> 00:30:18,320
t-drop 2 comes into play

874
00:30:18,320 --> 00:30:21,039
key loggers and then slightly more out

875
00:30:21,039 --> 00:30:21,679
there

876
00:30:21,679 --> 00:30:24,399
bank fishing pages and even a case where

877
00:30:24,399 --> 00:30:26,880
it was dropping some adware

878
00:30:26,880 --> 00:30:28,320
so ever we'll also be talking a little

879
00:30:28,320 --> 00:30:30,080
bit later about

880
00:30:30,080 --> 00:30:31,919
another sample that is dropped by track

881
00:30:31,919 --> 00:30:33,520
drop which we call the anonymous

882
00:30:33,520 --> 00:30:35,279
downloader

883
00:30:35,279 --> 00:30:38,000
so by taking d-track and pivoting back

884
00:30:38,000 --> 00:30:39,840
to track drop

885
00:30:39,840 --> 00:30:42,559
we were able to map out all these

886
00:30:42,559 --> 00:30:44,159
various tools being used

887
00:30:44,159 --> 00:30:47,520
by the lazarus group and detail them

888
00:30:47,520 --> 00:30:49,360
so let's start talking about the

889
00:30:49,360 --> 00:30:51,520
downloaders

890
00:30:51,520 --> 00:30:54,000
now this is where the connection to

891
00:30:54,000 --> 00:30:55,679
t-drop 2 comes in

892
00:30:55,679 --> 00:30:58,399
and it's a little bit more complicated

893
00:30:58,399 --> 00:31:00,000
than just saying track drop

894
00:31:00,000 --> 00:31:02,559
and t-drop 2 are the same incidentally

895
00:31:02,559 --> 00:31:03,679
we named

896
00:31:03,679 --> 00:31:05,840
the down uh the dropper track drop

897
00:31:05,840 --> 00:31:06,799
independently of t

898
00:31:06,799 --> 00:31:09,039
drop two so the names are just being

899
00:31:09,039 --> 00:31:11,200
similar just a coincidence

900
00:31:11,200 --> 00:31:13,279
but track drop more refers to the

901
00:31:13,279 --> 00:31:15,200
component that is used to perform

902
00:31:15,200 --> 00:31:17,600
the process hollowing or code injection

903
00:31:17,600 --> 00:31:19,120
whereas t-drop 2

904
00:31:19,120 --> 00:31:22,960
appears to more describe the complete

905
00:31:22,960 --> 00:31:26,640
set of the dropper and the downloader

906
00:31:26,640 --> 00:31:28,880
so how does the downloader work what it

907
00:31:28,880 --> 00:31:30,159
does is that

908
00:31:30,159 --> 00:31:33,519
it will download a payload from the c2

909
00:31:33,519 --> 00:31:35,919
save it to disk with a file with a dot

910
00:31:35,919 --> 00:31:38,000
exe extension

911
00:31:38,000 --> 00:31:40,240
and then we'll overwrite the first two

912
00:31:40,240 --> 00:31:41,840
bytes of the file

913
00:31:41,840 --> 00:31:45,279
with the values mz that is

914
00:31:45,279 --> 00:31:48,799
the dos header magic value otherwise it

915
00:31:48,799 --> 00:31:50,240
wouldn't be able to execute properly

916
00:31:50,240 --> 00:31:51,039
without it

917
00:31:51,039 --> 00:31:52,960
and then we'll subsequently execute that

918
00:31:52,960 --> 00:31:54,799
payload

919
00:31:54,799 --> 00:31:56,960
open source research that we've looked

920
00:31:56,960 --> 00:32:00,320
at specifically palo alto's

921
00:32:00,320 --> 00:32:02,640
analysis on t-drop 2 and the payload

922
00:32:02,640 --> 00:32:03,679
that it drops

923
00:32:03,679 --> 00:32:06,480
we assess are likely highly likely

924
00:32:06,480 --> 00:32:08,000
consistent with that

925
00:32:08,000 --> 00:32:12,000
d-track being served by these

926
00:32:12,840 --> 00:32:14,240
downloaders

927
00:32:14,240 --> 00:32:15,919
track drop samples have also been

928
00:32:15,919 --> 00:32:17,840
observed dropping key loggers

929
00:32:17,840 --> 00:32:20,960
and screenshot gathering modules

930
00:32:20,960 --> 00:32:23,360
as independent samples that will save

931
00:32:23,360 --> 00:32:24,399
these

932
00:32:24,399 --> 00:32:27,200
key logging files to disk this is a

933
00:32:27,200 --> 00:32:28,320
technique that we've seen

934
00:32:28,320 --> 00:32:30,320
the lazarus group used before

935
00:32:30,320 --> 00:32:32,399
specifically in financially motivated

936
00:32:32,399 --> 00:32:33,519
campaigns

937
00:32:33,519 --> 00:32:34,880
where rather than having their key

938
00:32:34,880 --> 00:32:36,880
loggers and screenshot gatherers

939
00:32:36,880 --> 00:32:39,039
automatically exfiltrate this data to a

940
00:32:39,039 --> 00:32:40,960
commander control server

941
00:32:40,960 --> 00:32:43,120
instead they are saved to disk and it is

942
00:32:43,120 --> 00:32:45,120
up to whatever remote access trojan

943
00:32:45,120 --> 00:32:47,200
is running on the system to accelerate

944
00:32:47,200 --> 00:32:49,919
that data for the threat actors use

945
00:32:49,919 --> 00:32:51,760
in this case you can see on the right an

946
00:32:51,760 --> 00:32:53,840
example key log output

947
00:32:53,840 --> 00:32:55,919
and this will be stored to disk in a

948
00:32:55,919 --> 00:32:57,279
compressed archive

949
00:32:57,279 --> 00:32:58,880
encrypted with the password that you can

950
00:32:58,880 --> 00:33:00,880
see on screen

951
00:33:00,880 --> 00:33:03,440
now a 2017 variant of this keylogger

952
00:33:03,440 --> 00:33:05,120
also had the capability to gather

953
00:33:05,120 --> 00:33:07,279
screenshots of the infected system

954
00:33:07,279 --> 00:33:09,440
but this was later removed in a 2018

955
00:33:09,440 --> 00:33:11,840
variant

956
00:33:13,039 --> 00:33:14,720
so this is where some of the samples

957
00:33:14,720 --> 00:33:16,480
being dropped by track drop

958
00:33:16,480 --> 00:33:18,880
gets a little bit odd in this in the

959
00:33:18,880 --> 00:33:20,000
case of track drop

960
00:33:20,000 --> 00:33:22,320
we saw it dropping this html page that

961
00:33:22,320 --> 00:33:24,240
you can see on the right which is

962
00:33:24,240 --> 00:33:27,760
masquerading as a banking page almost an

963
00:33:27,760 --> 00:33:28,559
email

964
00:33:28,559 --> 00:33:30,880
for an indian bank claiming that the

965
00:33:30,880 --> 00:33:32,880
user's account has been compromised

966
00:33:32,880 --> 00:33:35,760
and they need to input their details

967
00:33:35,760 --> 00:33:37,120
note that this is a

968
00:33:37,120 --> 00:33:39,760
campaign that is targeting customers of

969
00:33:39,760 --> 00:33:40,399
a bank

970
00:33:40,399 --> 00:33:42,240
and there is no evidence to suggest that

971
00:33:42,240 --> 00:33:43,679
it is targeting the bank

972
00:33:43,679 --> 00:33:47,120
itself while we couldn't obtain

973
00:33:47,120 --> 00:33:49,840
the next stage when we would go through

974
00:33:49,840 --> 00:33:52,080
that click here to update sign it is

975
00:33:52,080 --> 00:33:53,440
highly likely that

976
00:33:53,440 --> 00:33:55,919
this would be some form of credential or

977
00:33:55,919 --> 00:33:58,559
financial information phishing

978
00:33:58,559 --> 00:34:00,399
but what's even more strange about this

979
00:34:00,399 --> 00:34:02,399
sample of track drop is that it didn't

980
00:34:02,399 --> 00:34:05,519
just drop this banking phishing page

981
00:34:05,519 --> 00:34:08,239
but also dropped a sample that we call

982
00:34:08,239 --> 00:34:09,040
the anonymous

983
00:34:09,040 --> 00:34:10,719
downloader which server is going to talk

984
00:34:10,719 --> 00:34:13,359
more about

985
00:34:14,399 --> 00:34:17,359
yep so what is this an honeywell

986
00:34:17,359 --> 00:34:19,040
downloader that we have been mentioning

987
00:34:19,040 --> 00:34:20,560
for the past 20 minutes

988
00:34:20,560 --> 00:34:22,639
thank you john for the introduction

989
00:34:22,639 --> 00:34:23,679
anonymous

990
00:34:23,679 --> 00:34:25,839
is a downloader that from the limits of

991
00:34:25,839 --> 00:34:28,000
our visibility and collection we assess

992
00:34:28,000 --> 00:34:30,800
has been used by the black cartomist

993
00:34:30,800 --> 00:34:31,839
intrusion set

994
00:34:31,839 --> 00:34:34,239
since at least 2016 and the name comes

995
00:34:34,239 --> 00:34:36,079
from the anonymous string

996
00:34:36,079 --> 00:34:38,879
which is used as the key to the crypt

997
00:34:38,879 --> 00:34:39,679
the strings

998
00:34:39,679 --> 00:34:42,480
of this downloader now the way anonymous

999
00:34:42,480 --> 00:34:43,199
gets

1000
00:34:43,199 --> 00:34:46,000
on the victim system is via the standard

1001
00:34:46,000 --> 00:34:48,159
track drop installation routine

1002
00:34:48,159 --> 00:34:50,719
but there are a few added quotient and

1003
00:34:50,719 --> 00:34:52,000
anti-analysis tricks which are

1004
00:34:52,000 --> 00:34:53,440
interesting to touch on

1005
00:34:53,440 --> 00:34:56,000
firstly a sandbox check which you can

1006
00:34:56,000 --> 00:34:57,440
see here on screen and which is

1007
00:34:57,440 --> 00:34:58,880
incidentally

1008
00:34:58,880 --> 00:35:01,440
the same as the ones in a 2014

1009
00:35:01,440 --> 00:35:02,880
environment of d-track

1010
00:35:02,880 --> 00:35:05,839
so we have here a 2016 downloader a

1011
00:35:05,839 --> 00:35:07,520
different malware family

1012
00:35:07,520 --> 00:35:09,920
being dropped by the same dropper that

1013
00:35:09,920 --> 00:35:12,079
is associated with j-truck samples and

1014
00:35:12,079 --> 00:35:12,480
which

1015
00:35:12,480 --> 00:35:15,760
also embeds code taken from 2014 v truck

1016
00:35:15,760 --> 00:35:18,320
that's a bit of a connection there now

1017
00:35:18,320 --> 00:35:19,119
anonymous

1018
00:35:19,119 --> 00:35:21,440
also performs an antivirus check the

1019
00:35:21,440 --> 00:35:22,720
samples that we observed

1020
00:35:22,720 --> 00:35:24,880
specifically checked for kaspersky and

1021
00:35:24,880 --> 00:35:26,560
quick heal antivirus

1022
00:35:26,560 --> 00:35:28,800
by trying to read whether there were any

1023
00:35:28,800 --> 00:35:30,079
registry keys associated

1024
00:35:30,079 --> 00:35:33,440
with these avs if any of them was

1025
00:35:33,440 --> 00:35:35,200
present on the victim system then

1026
00:35:35,200 --> 00:35:37,359
another neighbor would record it

1027
00:35:37,359 --> 00:35:40,480
and then would actually append data to

1028
00:35:40,480 --> 00:35:42,000
the end of its own binary

1029
00:35:42,000 --> 00:35:44,480
in order to potentially change its hash

1030
00:35:44,480 --> 00:35:45,359
and

1031
00:35:45,359 --> 00:35:48,560
bypass hash base detection anonymous

1032
00:35:48,560 --> 00:35:49,599
would also check

1033
00:35:49,599 --> 00:35:53,040
whether a mutex of global anonymous was

1034
00:35:53,040 --> 00:35:54,640
present on the beacon system

1035
00:35:54,640 --> 00:35:56,800
and if it was then the binary would stop

1036
00:35:56,800 --> 00:35:58,720
executing otherwise it would go on to

1037
00:35:58,720 --> 00:36:00,320
further functionality

1038
00:36:00,320 --> 00:36:02,800
such as persistence which in this case

1039
00:36:02,800 --> 00:36:04,960
was affected by placing a link file in

1040
00:36:04,960 --> 00:36:06,640
the user startup folder

1041
00:36:06,640 --> 00:36:08,800
masquerading as a windows updater which

1042
00:36:08,800 --> 00:36:10,320
is a technique that we are seeing

1043
00:36:10,320 --> 00:36:12,560
lazarus use after the present day for

1044
00:36:12,560 --> 00:36:14,400
example in its blinding

1045
00:36:14,400 --> 00:36:17,280
campaigns in terms of anonymous

1046
00:36:17,280 --> 00:36:18,240
functionality

1047
00:36:18,240 --> 00:36:21,040
the downloader would just loop back to a

1048
00:36:21,040 --> 00:36:23,119
payload staging server until it got a

1049
00:36:23,119 --> 00:36:24,400
positive response

1050
00:36:24,400 --> 00:36:26,320
and it then would download a payload and

1051
00:36:26,320 --> 00:36:27,520
then prepend

1052
00:36:27,520 --> 00:36:31,119
the mz header on it very similar to

1053
00:36:31,119 --> 00:36:33,520
tear up two actually and then it would

1054
00:36:33,520 --> 00:36:35,200
set persistence for this payload and

1055
00:36:35,200 --> 00:36:36,480
execute it

1056
00:36:36,480 --> 00:36:39,040
after doing this anonymous would proceed

1057
00:36:39,040 --> 00:36:39,680
to

1058
00:36:39,680 --> 00:36:42,640
empty the file of track drop that

1059
00:36:42,640 --> 00:36:44,400
existed on disk

1060
00:36:44,400 --> 00:36:46,960
but not by deleting the entire file just

1061
00:36:46,960 --> 00:36:47,440
by

1062
00:36:47,440 --> 00:36:49,839
emptying all of its contents and leaving

1063
00:36:49,839 --> 00:36:50,720
behind

1064
00:36:50,720 --> 00:36:54,079
only the letters bm now this is a very

1065
00:36:54,079 --> 00:36:55,520
interesting detail because

1066
00:36:55,520 --> 00:36:58,960
bm is a very well-known lazarus

1067
00:36:58,960 --> 00:37:01,040
and andaryl typical encoding for the

1068
00:37:01,040 --> 00:37:02,560
dust header and set

1069
00:37:02,560 --> 00:37:05,680
we can see here in 2016 in the sony

1070
00:37:05,680 --> 00:37:06,880
pictures hack

1071
00:37:06,880 --> 00:37:09,920
incident novetta's operation blockbuster

1072
00:37:09,920 --> 00:37:10,720
report

1073
00:37:10,720 --> 00:37:14,240
detailed how the india whiskey lazarus 2

1074
00:37:14,240 --> 00:37:17,200
had its first two rights being bm and a

1075
00:37:17,200 --> 00:37:19,839
2018 ant lab presentation also touched

1076
00:37:19,839 --> 00:37:22,079
on anandario specific backdoor

1077
00:37:22,079 --> 00:37:25,040
known as vm door which would also use

1078
00:37:25,040 --> 00:37:26,079
the bm

1079
00:37:26,079 --> 00:37:29,359
header and it's also interesting as an

1080
00:37:29,359 --> 00:37:30,880
anti-forensics techniques

1081
00:37:30,880 --> 00:37:33,440
because investigators could not maybe

1082
00:37:33,440 --> 00:37:35,359
get back the original track drop file

1083
00:37:35,359 --> 00:37:37,119
and would only see this random file with

1084
00:37:37,119 --> 00:37:39,040
only the bm letters left in it which

1085
00:37:39,040 --> 00:37:39,839
would be

1086
00:37:39,839 --> 00:37:43,839
a bit odd but let's look a bit closer at

1087
00:37:43,839 --> 00:37:44,880
the anonymous

1088
00:37:44,880 --> 00:37:47,119
encryption and what it reveals to us

1089
00:37:47,119 --> 00:37:50,560
about its connection to andario so

1090
00:37:50,560 --> 00:37:53,040
the anonymous encryption works like this

1091
00:37:53,040 --> 00:37:54,320
we have a custom implement

1092
00:37:54,320 --> 00:37:56,000
implementation of rc4

1093
00:37:56,000 --> 00:37:58,480
with key anonymous and then we also have

1094
00:37:58,480 --> 00:38:00,720
got base64 encoding

1095
00:38:00,720 --> 00:38:04,240
and this same exact mechanism of hiding

1096
00:38:04,240 --> 00:38:04,960
strings

1097
00:38:04,960 --> 00:38:08,560
from simple analysis was found in a 2019

1098
00:38:08,560 --> 00:38:09,520
variant

1099
00:38:09,520 --> 00:38:12,720
of an andarian backdoor known as rift

1100
00:38:12,720 --> 00:38:13,599
door

1101
00:38:13,599 --> 00:38:15,680
now reef door is a long-standing

1102
00:38:15,680 --> 00:38:17,520
well-known underworld tool which unlock

1103
00:38:17,520 --> 00:38:18,000
published

1104
00:38:18,000 --> 00:38:20,400
a really cool report about it's been in

1105
00:38:20,400 --> 00:38:22,240
use since at least 2014.

1106
00:38:22,240 --> 00:38:24,560
when it was a very basic very

1107
00:38:24,560 --> 00:38:26,240
lightweight backdoor with limited

1108
00:38:26,240 --> 00:38:27,359
functionality

1109
00:38:27,359 --> 00:38:30,720
but then in 2019 we observed a reloaded

1110
00:38:30,720 --> 00:38:32,320
version of reef door

1111
00:38:32,320 --> 00:38:33,839
which used an oliver encryption

1112
00:38:33,839 --> 00:38:35,440
mechanism and

1113
00:38:35,440 --> 00:38:37,760
had so much added functionality

1114
00:38:37,760 --> 00:38:39,839
including for example the possibility of

1115
00:38:39,839 --> 00:38:41,680
spawning a reverse shell on the victim

1116
00:38:41,680 --> 00:38:43,359
system so it went from

1117
00:38:43,359 --> 00:38:45,040
a lightweight back door to a fully

1118
00:38:45,040 --> 00:38:47,280
fledged route

1119
00:38:47,280 --> 00:38:50,320
and if we look here we can see kind of

1120
00:38:50,320 --> 00:38:51,760
like the connections that start

1121
00:38:51,760 --> 00:38:53,520
multiplying so we have

1122
00:38:53,520 --> 00:38:55,599
track drop which is associated with the

1123
00:38:55,599 --> 00:38:57,760
d-track lazarus trojan

1124
00:38:57,760 --> 00:39:00,000
dropping the 2016 version of the

1125
00:39:00,000 --> 00:39:01,440
anonymous downloader

1126
00:39:01,440 --> 00:39:03,599
and then we see the same encryption

1127
00:39:03,599 --> 00:39:06,160
three years later in a 2019 sample of

1128
00:39:06,160 --> 00:39:07,920
reef door which is uniquely associated

1129
00:39:07,920 --> 00:39:08,800
with andario

1130
00:39:08,800 --> 00:39:11,680
so a lot of connections there and it's

1131
00:39:11,680 --> 00:39:14,560
by no means the end of it

1132
00:39:14,560 --> 00:39:17,359
we've said track drop drop c track and

1133
00:39:17,359 --> 00:39:18,400
also not neighbor

1134
00:39:18,400 --> 00:39:20,960
anonymous leads us to restore fast

1135
00:39:20,960 --> 00:39:22,800
forward to february 2020

1136
00:39:22,800 --> 00:39:26,079
and u.s cisa releases indicators on

1137
00:39:26,079 --> 00:39:28,880
two more families one of which it calls

1138
00:39:28,880 --> 00:39:30,880
hot cross sand which never fails to make

1139
00:39:30,880 --> 00:39:32,000
me really hungry

1140
00:39:32,000 --> 00:39:34,079
and another one which is known as bistro

1141
00:39:34,079 --> 00:39:35,119
math

1142
00:39:35,119 --> 00:39:37,839
now in our analysis of hot croissant of

1143
00:39:37,839 --> 00:39:40,320
a few samples compiled in 2018

1144
00:39:40,320 --> 00:39:42,800
we realized that actually hot croissant

1145
00:39:42,800 --> 00:39:44,320
was a sort of

1146
00:39:44,320 --> 00:39:46,800
baby version or early version of the

1147
00:39:46,800 --> 00:39:48,240
2019 variant

1148
00:39:48,240 --> 00:39:50,320
of rift or and what i mean by this is

1149
00:39:50,320 --> 00:39:52,240
that the structure of the binary was

1150
00:39:52,240 --> 00:39:54,240
effectively the same

1151
00:39:54,240 --> 00:39:57,040
but with smaller chunks of functionality

1152
00:39:57,040 --> 00:39:58,160
and fewer command

1153
00:39:58,160 --> 00:40:01,520
and control codes but then in turn

1154
00:40:01,520 --> 00:40:03,760
from this connection we also found that

1155
00:40:03,760 --> 00:40:04,880
bistro month

1156
00:40:04,880 --> 00:40:07,359
and hot cross sound actually had a

1157
00:40:07,359 --> 00:40:08,000
similar

1158
00:40:08,000 --> 00:40:10,240
cryptographic routine which was not

1159
00:40:10,240 --> 00:40:11,119
publicly

1160
00:40:11,119 --> 00:40:14,000
known before so it was a pretty strong

1161
00:40:14,000 --> 00:40:15,119
connection there

1162
00:40:15,119 --> 00:40:18,319
and furthermore bistro math itself then

1163
00:40:18,319 --> 00:40:18,800
had

1164
00:40:18,800 --> 00:40:21,599
in some samples the same exact string

1165
00:40:21,599 --> 00:40:23,359
encoding to detract with the ccs

1166
00:40:23,359 --> 00:40:24,960
underscore method

1167
00:40:24,960 --> 00:40:28,079
so we have this like absolute loop of

1168
00:40:28,079 --> 00:40:29,760
connections round and around

1169
00:40:29,760 --> 00:40:31,599
and what you're gonna ask me right now

1170
00:40:31,599 --> 00:40:33,520
is why do we care

1171
00:40:33,520 --> 00:40:35,599
what do you do this for what does this

1172
00:40:35,599 --> 00:40:36,640
mean and

1173
00:40:36,640 --> 00:40:38,960
to be honest you're right but let me get

1174
00:40:38,960 --> 00:40:41,520
a bit more serious for one moment

1175
00:40:41,520 --> 00:40:44,240
now the reason why this is important is

1176
00:40:44,240 --> 00:40:45,839
because what we have here

1177
00:40:45,839 --> 00:40:48,560
is several tools that are attributed to

1178
00:40:48,560 --> 00:40:48,960
some

1179
00:40:48,960 --> 00:40:51,119
lazarus group some to andario which is

1180
00:40:51,119 --> 00:40:52,640
another subgroup

1181
00:40:52,640 --> 00:40:55,040
but what our analysis shows is that we

1182
00:40:55,040 --> 00:40:57,359
can make a reasonable assessment that

1183
00:40:57,359 --> 00:41:00,079
all these tools highly likely stem from

1184
00:41:00,079 --> 00:41:01,520
a same code base

1185
00:41:01,520 --> 00:41:03,520
or at the very least we use the same

1186
00:41:03,520 --> 00:41:04,720
code chunks

1187
00:41:04,720 --> 00:41:08,240
and there is this idea of iterating on

1188
00:41:08,240 --> 00:41:10,880
or rehashing an established code base in

1189
00:41:10,880 --> 00:41:12,880
order to make new our families

1190
00:41:12,880 --> 00:41:15,839
or embed tricks that work from our

1191
00:41:15,839 --> 00:41:17,440
family into another

1192
00:41:17,440 --> 00:41:19,040
and there is this concept of like

1193
00:41:19,040 --> 00:41:20,720
sleeping up on habits

1194
00:41:20,720 --> 00:41:22,880
in the coding stuff so at least from a

1195
00:41:22,880 --> 00:41:24,160
development standpoint there's a

1196
00:41:24,160 --> 00:41:25,280
connection

1197
00:41:25,280 --> 00:41:28,079
and it also hints to the fact that

1198
00:41:28,079 --> 00:41:29,760
lazarus and andario

1199
00:41:29,760 --> 00:41:32,079
are not in fact separate entities

1200
00:41:32,079 --> 00:41:32,880
they've been

1201
00:41:32,880 --> 00:41:35,599
linked in the past but very much from

1202
00:41:35,599 --> 00:41:37,200
our assessment it's highly likely that

1203
00:41:37,200 --> 00:41:38,000
they continue

1204
00:41:38,000 --> 00:41:41,040
to be linked i mean also all of this

1205
00:41:41,040 --> 00:41:41,760
analysis

1206
00:41:41,760 --> 00:41:45,040
gives us a window of insight into the

1207
00:41:45,040 --> 00:41:46,800
development modus operandi

1208
00:41:46,800 --> 00:41:50,079
of black artemis as an intrusion set

1209
00:41:50,079 --> 00:41:52,560
which has a very sprawling tool set new

1210
00:41:52,560 --> 00:41:53,440
additions

1211
00:41:53,440 --> 00:41:56,480
very often but then all of these tie

1212
00:41:56,480 --> 00:41:58,319
back to an established code base

1213
00:41:58,319 --> 00:42:00,000
and then there's also this idea of

1214
00:42:00,000 --> 00:42:02,000
really investing into an implant

1215
00:42:02,000 --> 00:42:03,680
that has been developed and kind of

1216
00:42:03,680 --> 00:42:05,599
maintaining it and then

1217
00:42:05,599 --> 00:42:08,560
iterating on it and then in some cases

1218
00:42:08,560 --> 00:42:09,920
even tailoring it to

1219
00:42:09,920 --> 00:42:12,319
specific intrusions like we saw with the

1220
00:42:12,319 --> 00:42:14,400
kk and pp case

1221
00:42:14,400 --> 00:42:17,359
and what if we take a step back what

1222
00:42:17,359 --> 00:42:18,480
does this tell us

1223
00:42:18,480 --> 00:42:22,880
about d-track and about the lazarus crew

1224
00:42:23,920 --> 00:42:28,319
thank you so drak

1225
00:42:28,319 --> 00:42:31,040
has been well known for its use in

1226
00:42:31,040 --> 00:42:31,920
campaigns

1227
00:42:31,920 --> 00:42:34,079
that are targeting organizations for the

1228
00:42:34,079 --> 00:42:35,760
purposes of espionage as we've

1229
00:42:35,760 --> 00:42:38,400
highlighted in this presentation

1230
00:42:38,400 --> 00:42:41,760
but not only that it is a dual tool

1231
00:42:41,760 --> 00:42:44,640
with multiple purposes i.e through the

1232
00:42:44,640 --> 00:42:46,720
research that was released by kaspersky

1233
00:42:46,720 --> 00:42:48,720
detailing atm d-track

1234
00:42:48,720 --> 00:42:51,280
a variant of d-trac focused on dumping

1235
00:42:51,280 --> 00:42:51,839
the

1236
00:42:51,839 --> 00:42:56,000
atm tracks of compromised atm machines

1237
00:42:56,000 --> 00:42:57,520
this was focused on financially

1238
00:42:57,520 --> 00:42:59,520
motivated campaigns

1239
00:42:59,520 --> 00:43:01,599
now this use of tooling as we've

1240
00:43:01,599 --> 00:43:03,280
mentioned before for both the purposes

1241
00:43:03,280 --> 00:43:05,280
of espionage and cybercrime

1242
00:43:05,280 --> 00:43:06,800
continues to be seen through our

1243
00:43:06,800 --> 00:43:08,480
tracking of the lazarus group

1244
00:43:08,480 --> 00:43:10,800
in particular the remote access trojan

1245
00:43:10,800 --> 00:43:12,480
known as manuscript

1246
00:43:12,480 --> 00:43:16,160
and recently analyzed by the the us

1247
00:43:16,160 --> 00:43:18,960
cesa team blinding can or what we call

1248
00:43:18,960 --> 00:43:20,640
internally as show state

1249
00:43:20,640 --> 00:43:22,560
has also been used for the dual purposes

1250
00:43:22,560 --> 00:43:23,680
of espionage

1251
00:43:23,680 --> 00:43:26,960
and cyber but not only that

1252
00:43:26,960 --> 00:43:29,440
through our dtrac analysis these

1253
00:43:29,440 --> 00:43:31,119
campaigns can be tied back

1254
00:43:31,119 --> 00:43:34,319
to previous campaigns including t-drop 2

1255
00:43:34,319 --> 00:43:36,560
and subsequently t-drop which was a part

1256
00:43:36,560 --> 00:43:38,240
of operation troy

1257
00:43:38,240 --> 00:43:40,640
which are campaigns with the purposes of

1258
00:43:40,640 --> 00:43:42,640
sabotage

1259
00:43:42,640 --> 00:43:45,520
so this remote access trojan and in

1260
00:43:45,520 --> 00:43:46,079
general

1261
00:43:46,079 --> 00:43:49,119
lazarus code has been developed since at

1262
00:43:49,119 --> 00:43:51,280
least 2009 and continues to be

1263
00:43:51,280 --> 00:43:55,200
seen in samples even in this year

1264
00:43:55,200 --> 00:43:58,079
now it's important to point out that

1265
00:43:58,079 --> 00:43:58,720
despite

1266
00:43:58,720 --> 00:44:01,760
our thorough investigation of d-trak

1267
00:44:01,760 --> 00:44:03,920
we've not seen it being used again since

1268
00:44:03,920 --> 00:44:06,839
these prolific campaigns at the end of

1269
00:44:06,839 --> 00:44:08,319
2019

1270
00:44:08,319 --> 00:44:10,400
this could likely be explained due to

1271
00:44:10,400 --> 00:44:11,359
the fact that

1272
00:44:11,359 --> 00:44:13,119
there was a lot of public reporting on

1273
00:44:13,119 --> 00:44:14,880
it at the time and the threat actor

1274
00:44:14,880 --> 00:44:17,280
might have been spooked off a bit

1275
00:44:17,280 --> 00:44:19,040
but that doesn't rule out the fact that

1276
00:44:19,040 --> 00:44:21,359
in the future they may use this tool

1277
00:44:21,359 --> 00:44:22,000
again

1278
00:44:22,000 --> 00:44:23,760
and all of this research will enable us

1279
00:44:23,760 --> 00:44:25,200
to carry on tracking it

1280
00:44:25,200 --> 00:44:27,200
and has also led us on to tracking

1281
00:44:27,200 --> 00:44:28,800
further malware families

1282
00:44:28,800 --> 00:44:32,079
used by lazarus

1283
00:44:33,520 --> 00:44:36,000
so what can we say about the lazarus

1284
00:44:36,000 --> 00:44:37,839
group as a result of all this

1285
00:44:37,839 --> 00:44:40,960
well it's lazarus still being lazarus

1286
00:44:40,960 --> 00:44:41,680
really

1287
00:44:41,680 --> 00:44:44,000
but with its constant adapting and

1288
00:44:44,000 --> 00:44:47,359
iterating on its previous campaigns

1289
00:44:47,359 --> 00:44:49,920
from the perspective of espionage it

1290
00:44:49,920 --> 00:44:51,680
continues to go over the same kind of

1291
00:44:51,680 --> 00:44:52,640
targets

1292
00:44:52,640 --> 00:44:55,119
such as government organizations but is

1293
00:44:55,119 --> 00:44:57,920
having an increasingly broad reach

1294
00:44:57,920 --> 00:44:59,599
such as recently there have been many

1295
00:44:59,599 --> 00:45:01,520
campaigns targeting the aerospace and

1296
00:45:01,520 --> 00:45:02,720
defense sector

1297
00:45:02,720 --> 00:45:05,839
as details in the us government's

1298
00:45:05,839 --> 00:45:08,960
report on blinding can and from the

1299
00:45:08,960 --> 00:45:10,960
financially motivated perspective of

1300
00:45:10,960 --> 00:45:12,720
lazarus group

1301
00:45:12,720 --> 00:45:14,560
it's still doing the same kind of

1302
00:45:14,560 --> 00:45:16,640
campaigns but

1303
00:45:16,640 --> 00:45:19,520
having a different avenue of monetizing

1304
00:45:19,520 --> 00:45:21,440
the results of those campaigns

1305
00:45:21,440 --> 00:45:23,520
in particular all the lazarus

1306
00:45:23,520 --> 00:45:25,119
financially motivated campaigns were

1307
00:45:25,119 --> 00:45:27,119
known for targeting organizations such

1308
00:45:27,119 --> 00:45:28,400
as large banks

1309
00:45:28,400 --> 00:45:30,079
with the purposes of compromising their

1310
00:45:30,079 --> 00:45:33,440
swift systems to forge transactions

1311
00:45:33,440 --> 00:45:36,240
whereas more recently again with the u.s

1312
00:45:36,240 --> 00:45:37,200
cesar team's

1313
00:45:37,200 --> 00:45:39,760
release of the beagle boys research

1314
00:45:39,760 --> 00:45:41,040
which is a subgroup

1315
00:45:41,040 --> 00:45:43,599
of the lazarus group and its financially

1316
00:45:43,599 --> 00:45:46,000
motivated subset

1317
00:45:46,000 --> 00:45:48,079
these detail campaigns that were

1318
00:45:48,079 --> 00:45:49,680
targeting organizations

1319
00:45:49,680 --> 00:45:51,760
for the purposes of compromising atm

1320
00:45:51,760 --> 00:45:53,839
systems through use of the fast cache

1321
00:45:53,839 --> 00:45:54,560
malware

1322
00:45:54,560 --> 00:45:58,960
in order to perform atm cash out attacks

1323
00:45:59,520 --> 00:46:01,520
so what kind of advice can we give to

1324
00:46:01,520 --> 00:46:03,359
organizations and defenders

1325
00:46:03,359 --> 00:46:06,240
to try and stop these campaigns if your

1326
00:46:06,240 --> 00:46:08,400
organization has the capability to

1327
00:46:08,400 --> 00:46:11,040
monitor network traffic because detract

1328
00:46:11,040 --> 00:46:13,040
uses just http

1329
00:46:13,040 --> 00:46:16,079
and not something like https you can get

1330
00:46:16,079 --> 00:46:18,480
a quick win out of that

1331
00:46:18,480 --> 00:46:20,079
we would also recommend that you don't

1332
00:46:20,079 --> 00:46:22,800
rule out internal traffic being used

1333
00:46:22,800 --> 00:46:25,280
for command control beacons because as

1334
00:46:25,280 --> 00:46:27,119
we've discussed

1335
00:46:27,119 --> 00:46:30,880
lazarus c2s have likely been deployed

1336
00:46:30,880 --> 00:46:31,760
internally

1337
00:46:31,760 --> 00:46:35,040
on compromised networks

1338
00:46:35,040 --> 00:46:36,319
from the perspective of endpoint

1339
00:46:36,319 --> 00:46:38,160
monitoring if the tools that your

1340
00:46:38,160 --> 00:46:39,359
organization uses

1341
00:46:39,359 --> 00:46:41,839
has the capability to monitor api usage

1342
00:46:41,839 --> 00:46:43,280
we highly recommend looking for the

1343
00:46:43,280 --> 00:46:45,200
usage of specific apis

1344
00:46:45,200 --> 00:46:48,079
that are used for code injection and

1345
00:46:48,079 --> 00:46:49,839
process hollowing

1346
00:46:49,839 --> 00:46:51,520
if you can stop track drop before it

1347
00:46:51,520 --> 00:46:53,680
injects d-trac into memory

1348
00:46:53,680 --> 00:46:56,880
you've stopped the whole thing

1349
00:46:56,880 --> 00:46:59,599
also look out for the usage of things

1350
00:46:59,599 --> 00:47:01,440
such as

1351
00:47:01,440 --> 00:47:03,280
living off the land techniques such as

1352
00:47:03,280 --> 00:47:06,079
net as we saw being used for the kk npp

1353
00:47:06,079 --> 00:47:08,839
detract samples being used to exfiltrate

1354
00:47:08,839 --> 00:47:10,480
data

1355
00:47:10,480 --> 00:47:12,079
we also highly recommend that you look

1356
00:47:12,079 --> 00:47:14,000
for new code signing certificates being

1357
00:47:14,000 --> 00:47:15,760
used within your organization

1358
00:47:15,760 --> 00:47:17,359
as over the last couple of years we've

1359
00:47:17,359 --> 00:47:19,119
observed the lazarus group

1360
00:47:19,119 --> 00:47:21,839
either forging or stealing code signing

1361
00:47:21,839 --> 00:47:23,040
certificates

1362
00:47:23,040 --> 00:47:26,240
in order to sign their malware and make

1363
00:47:26,240 --> 00:47:30,000
it more likely to go under the radar

1364
00:47:33,280 --> 00:47:37,359
sorry what can we recommend to end users

1365
00:47:37,359 --> 00:47:38,480
as well

1366
00:47:38,480 --> 00:47:41,119
look out for banking and recruitment

1367
00:47:41,119 --> 00:47:42,640
campaigns

1368
00:47:42,640 --> 00:47:44,079
that might be targeting you as

1369
00:47:44,079 --> 00:47:46,319
individuals we've seen the lazarus group

1370
00:47:46,319 --> 00:47:48,640
especially in the last year using fake

1371
00:47:48,640 --> 00:47:49,920
job applications

1372
00:47:49,920 --> 00:47:51,599
and sometimes even programs that would

1373
00:47:51,599 --> 00:47:53,839
generate application pdfs

1374
00:47:53,839 --> 00:47:57,599
to target individuals and

1375
00:47:57,599 --> 00:48:00,880
this is also

1376
00:48:01,119 --> 00:48:03,040
added to the fact that the lazarus group

1377
00:48:03,040 --> 00:48:04,800
has been seen in open source research

1378
00:48:04,800 --> 00:48:05,440
recently

1379
00:48:05,440 --> 00:48:08,319
using linkedin as a vector for this and

1380
00:48:08,319 --> 00:48:09,599
then for the threat intelligence

1381
00:48:09,599 --> 00:48:11,760
analysts and reverse engineers like us

1382
00:48:11,760 --> 00:48:13,280
we highly recommend that you keep

1383
00:48:13,280 --> 00:48:15,280
signaturing lazarus malware

1384
00:48:15,280 --> 00:48:17,280
look for any interesting strings look

1385
00:48:17,280 --> 00:48:19,520
for any particular encoding routines

1386
00:48:19,520 --> 00:48:21,520
look for all the cryptographic routines

1387
00:48:21,520 --> 00:48:23,440
that are unique to those samples

1388
00:48:23,440 --> 00:48:25,520
or unique code chunks as we've been

1389
00:48:25,520 --> 00:48:27,680
saying these code bases developed over

1390
00:48:27,680 --> 00:48:29,040
time and

1391
00:48:29,040 --> 00:48:31,839
yara rule for one sample may find you

1392
00:48:31,839 --> 00:48:33,359
many others in the process and it is

1393
00:48:33,359 --> 00:48:34,960
highly worth your time

1394
00:48:34,960 --> 00:48:37,920
as we have shown with this presentation

1395
00:48:37,920 --> 00:48:39,280
to finish things off

1396
00:48:39,280 --> 00:48:41,599
we've also provided the mitre attack

1397
00:48:41,599 --> 00:48:43,440
mappings for all of the techniques we've

1398
00:48:43,440 --> 00:48:45,920
observed being used in these campaigns

1399
00:48:45,920 --> 00:48:47,839
microattack is an amazing framework so

1400
00:48:47,839 --> 00:48:49,200
we'd recommend you check out all of

1401
00:48:49,200 --> 00:48:51,119
these

1402
00:48:51,119 --> 00:48:52,800
and we also provide some indicators of

1403
00:48:52,800 --> 00:48:54,960
compromise for the various tools that

1404
00:48:54,960 --> 00:48:55,760
we've been

1405
00:48:55,760 --> 00:48:58,160
looking at through this presentation in

1406
00:48:58,160 --> 00:48:59,520
case you want to recreate

1407
00:48:59,520 --> 00:49:02,800
some of the research yourself and

1408
00:49:02,800 --> 00:49:04,800
after the final slide we also provide

1409
00:49:04,800 --> 00:49:06,160
all of the references

1410
00:49:06,160 --> 00:49:07,920
for the various open source blogs and

1411
00:49:07,920 --> 00:49:09,440
reports that we've been using

1412
00:49:09,440 --> 00:49:12,720
to help us with this research

1413
00:49:12,720 --> 00:49:14,160
thank you very much for listening and

1414
00:49:14,160 --> 00:49:17,839
we'll pass back over to the host

