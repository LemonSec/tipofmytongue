1
00:00:08,320 --> 00:00:08,960
okay hi

2
00:00:08,960 --> 00:00:10,800
everyone and welcome to my session on

3
00:00:10,800 --> 00:00:12,480
defending against the dark arts of lore

4
00:00:12,480 --> 00:00:13,519
bins

5
00:00:13,519 --> 00:00:15,360
in this session i'll be covering off how

6
00:00:15,360 --> 00:00:16,800
to harden your end points against this

7
00:00:16,800 --> 00:00:17,760
attack vector

8
00:00:17,760 --> 00:00:21,119
and explain why you would want to

9
00:00:21,119 --> 00:00:23,199
now this is the session overview the

10
00:00:23,199 --> 00:00:25,119
hows and whys of low bins

11
00:00:25,119 --> 00:00:26,480
and we will get to all of these in a

12
00:00:26,480 --> 00:00:28,560
minute

13
00:00:28,560 --> 00:00:30,320
now the conference organizers have

14
00:00:30,320 --> 00:00:32,719
already done a great job introducing me

15
00:00:32,719 --> 00:00:34,399
we're not going to dwell on this slide

16
00:00:34,399 --> 00:00:36,640
for too long but the one thing i do want

17
00:00:36,640 --> 00:00:38,239
to highlight just quickly is that

18
00:00:38,239 --> 00:00:39,840
standard chartered is a great place to

19
00:00:39,840 --> 00:00:40,559
work

20
00:00:40,559 --> 00:00:42,160
and in the poland market we've invested

21
00:00:42,160 --> 00:00:44,160
quite a lot of resources into hiring

22
00:00:44,160 --> 00:00:45,680
great cyber security talent

23
00:00:45,680 --> 00:00:47,680
so if you are looking for a new role

24
00:00:47,680 --> 00:00:49,440
please reach out to the talent team by

25
00:00:49,440 --> 00:00:50,320
hop in

26
00:00:50,320 --> 00:00:52,000
i know that they are lurking there you

27
00:00:52,000 --> 00:00:54,640
know somewhere

28
00:00:55,360 --> 00:00:58,480
so for the uninitiated low bins stands

29
00:00:58,480 --> 00:01:00,399
for living off the land binaries

30
00:01:00,399 --> 00:01:02,719
whilst lowbass extends the definition by

31
00:01:02,719 --> 00:01:04,640
adding scripts

32
00:01:04,640 --> 00:01:05,920
this session will be focused on

33
00:01:05,920 --> 00:01:08,080
microsoft windows to be exact

34
00:01:08,080 --> 00:01:09,920
and although there are similar living

35
00:01:09,920 --> 00:01:11,600
off the land concepts within the linux

36
00:01:11,600 --> 00:01:13,760
and mac os estate

37
00:01:13,760 --> 00:01:15,840
now microsoft in their infinite wisdom

38
00:01:15,840 --> 00:01:17,439
has decided to give the world

39
00:01:17,439 --> 00:01:19,200
many many ways to exploit their

40
00:01:19,200 --> 00:01:20,560
operating system

41
00:01:20,560 --> 00:01:22,080
but in recent times they have made

42
00:01:22,080 --> 00:01:23,920
strides in providing additional security

43
00:01:23,920 --> 00:01:25,439
control mechanisms to help

44
00:01:25,439 --> 00:01:28,240
rein in this attack path now the

45
00:01:28,240 --> 00:01:30,640
traditional definition of low bins

46
00:01:30,640 --> 00:01:33,280
is where a windows os related binary has

47
00:01:33,280 --> 00:01:34,560
undocumented features

48
00:01:34,560 --> 00:01:37,360
that can be exploited by attackers but i

49
00:01:37,360 --> 00:01:38,640
personally like to include

50
00:01:38,640 --> 00:01:41,119
other windows binaries which i consider

51
00:01:41,119 --> 00:01:42,479
high risk

52
00:01:42,479 --> 00:01:44,960
and by high risk it's in the sense that

53
00:01:44,960 --> 00:01:46,880
they can be used as part of an attack

54
00:01:46,880 --> 00:01:47,520
path

55
00:01:47,520 --> 00:01:49,119
and not necessarily tied to any

56
00:01:49,119 --> 00:01:50,720
undocumented features

57
00:01:50,720 --> 00:01:52,960
so an example of such a high-risk binary

58
00:01:52,960 --> 00:01:54,399
would be power shell

59
00:01:54,399 --> 00:01:58,399
or ps exact now the low bass project

60
00:01:58,399 --> 00:02:00,320
has done a great job documenting the

61
00:02:00,320 --> 00:02:01,759
various microsoft binaries

62
00:02:01,759 --> 00:02:04,320
that fall under their definition and

63
00:02:04,320 --> 00:02:05,520
they have even in fact

64
00:02:05,520 --> 00:02:08,160
mapped these binaries back to the mitre

65
00:02:08,160 --> 00:02:09,360
attack framework

66
00:02:09,360 --> 00:02:10,639
so if you haven't checked out their

67
00:02:10,639 --> 00:02:14,480
project site i strongly recommend it

68
00:02:15,599 --> 00:02:18,879
so previously malware held the coveted

69
00:02:18,879 --> 00:02:20,480
position of being

70
00:02:20,480 --> 00:02:22,959
before attackers but malware is very

71
00:02:22,959 --> 00:02:24,000
noisy

72
00:02:24,000 --> 00:02:26,080
it's often flagged by antivirus or other

73
00:02:26,080 --> 00:02:28,800
security control mechanisms such as ids

74
00:02:28,800 --> 00:02:31,840
ips or even application whitelisting the

75
00:02:31,840 --> 00:02:32,560
use of

76
00:02:32,560 --> 00:02:34,400
lol bins have been seen across many

77
00:02:34,400 --> 00:02:36,640
recent campaigns they are popular

78
00:02:36,640 --> 00:02:38,560
because they are already present

79
00:02:38,560 --> 00:02:40,800
present in many machines yeah you know

80
00:02:40,800 --> 00:02:41,760
and they're rarely

81
00:02:41,760 --> 00:02:44,400
appropriately hardened from any misuse

82
00:02:44,400 --> 00:02:45,840
they can be used to bypass certain

83
00:02:45,840 --> 00:02:48,239
security controls such as applocker

84
00:02:48,239 --> 00:02:50,160
and that is particularly true when

85
00:02:50,160 --> 00:02:51,760
there's no additional hardening

86
00:02:51,760 --> 00:02:54,959
or configuration have been applied so in

87
00:02:54,959 --> 00:02:55,599
fact

88
00:02:55,599 --> 00:02:57,680
recent research from kaspersky indicates

89
00:02:57,680 --> 00:02:59,599
legitimate tool abuse has been seen in

90
00:02:59,599 --> 00:03:00,560
30

91
00:03:00,560 --> 00:03:01,840
of recent breaches that they have

92
00:03:01,840 --> 00:03:03,599
investigated so

93
00:03:03,599 --> 00:03:05,840
powershell and ps exec making up the

94
00:03:05,840 --> 00:03:08,400
bulk of these abuse tools

95
00:03:08,400 --> 00:03:10,000
so when we think about some of the

96
00:03:10,000 --> 00:03:11,680
recent campaign

97
00:03:11,680 --> 00:03:14,480
eset in their operations deception

98
00:03:14,480 --> 00:03:15,200
campaign

99
00:03:15,200 --> 00:03:18,480
uh you know research uncovered uh

100
00:03:18,480 --> 00:03:20,480
a campaign that was a cyber espionage

101
00:03:20,480 --> 00:03:22,560
related one targeting the aerospace and

102
00:03:22,560 --> 00:03:23,840
defense industry

103
00:03:23,840 --> 00:03:25,760
the low bins used in this in this

104
00:03:25,760 --> 00:03:27,519
campaign were wmic

105
00:03:27,519 --> 00:03:29,440
for code execution as well as lateral

106
00:03:29,440 --> 00:03:30,720
movement

107
00:03:30,720 --> 00:03:33,280
cert util for encoding and decoding

108
00:03:33,280 --> 00:03:34,080
powershell

109
00:03:34,080 --> 00:03:38,319
and run dll for malware execution

110
00:03:38,720 --> 00:03:40,799
another recent example of a campaign

111
00:03:40,799 --> 00:03:42,640
where lol beams have been used

112
00:03:42,640 --> 00:03:44,879
is a credit card scraping campaign this

113
00:03:44,879 --> 00:03:46,560
one leveraged ps exec for remote

114
00:03:46,560 --> 00:03:47,760
execution

115
00:03:47,760 --> 00:03:49,920
as well as powershell for reflective

116
00:03:49,920 --> 00:03:52,319
injection

117
00:03:54,560 --> 00:03:57,120
now microsoft have themselves researched

118
00:03:57,120 --> 00:03:59,200
quite a bit into the astaroth

119
00:03:59,200 --> 00:04:01,920
stealing campaign previously microsoft

120
00:04:01,920 --> 00:04:04,480
discovered that it was abusing wmic

121
00:04:04,480 --> 00:04:07,120
for their attack file but the attackers

122
00:04:07,120 --> 00:04:08,720
have recently shifted to abusing

123
00:04:08,720 --> 00:04:10,080
alternate data streams

124
00:04:10,080 --> 00:04:14,159
as well as ext export.exe now exe export

125
00:04:14,159 --> 00:04:16,399
is a binary which is part of internet

126
00:04:16,399 --> 00:04:17,600
explorer

127
00:04:17,600 --> 00:04:19,519
legitimately it is used for importing

128
00:04:19,519 --> 00:04:21,759
and exporting firefox browser bookmark

129
00:04:21,759 --> 00:04:24,720
to and from internet explorer now the

130
00:04:24,720 --> 00:04:26,000
attackers were seen using this

131
00:04:26,000 --> 00:04:28,560
executable to load a malicious dll

132
00:04:28,560 --> 00:04:31,680
this is via a side loading technique so

133
00:04:31,680 --> 00:04:33,759
by renaming their malicious dll to that

134
00:04:33,759 --> 00:04:35,840
of a legitimate dll

135
00:04:35,840 --> 00:04:38,880
it was loaded when ext export process

136
00:04:38,880 --> 00:04:40,960
was executed

137
00:04:40,960 --> 00:04:43,199
this campaign was also seen abusing bits

138
00:04:43,199 --> 00:04:46,479
admin to download additional payloads

139
00:04:46,479 --> 00:04:48,320
and another recent example would be the

140
00:04:48,320 --> 00:04:50,000
reevil ransomware group

141
00:04:50,000 --> 00:04:51,919
who are very fond of abusing windows

142
00:04:51,919 --> 00:04:53,840
commands such as task kill

143
00:04:53,840 --> 00:04:55,520
and netstop before deploying their

144
00:04:55,520 --> 00:04:56,880
ransomware payloads

145
00:04:56,880 --> 00:04:58,320
in order to cause the most damage to

146
00:04:58,320 --> 00:05:00,000
their victims

147
00:05:00,000 --> 00:05:01,919
now what all of these examples

148
00:05:01,919 --> 00:05:03,919
demonstrate is that the attackers have

149
00:05:03,919 --> 00:05:05,680
adapted to their environments

150
00:05:05,680 --> 00:05:07,320
and that these attacks are not just

151
00:05:07,320 --> 00:05:09,600
nation-state-sponsored campaigns

152
00:05:09,600 --> 00:05:11,440
they are a cross-section of attack

153
00:05:11,440 --> 00:05:13,600
groups targeting all industries whether

154
00:05:13,600 --> 00:05:14,479
they are big

155
00:05:14,479 --> 00:05:17,039
or small

156
00:05:17,600 --> 00:05:19,280
so another reason for the popularity of

157
00:05:19,280 --> 00:05:21,199
lower bins is because they are literally

158
00:05:21,199 --> 00:05:23,440
everywhere the current low-bass project

159
00:05:23,440 --> 00:05:25,919
is tracking over a hundred lobbins

160
00:05:25,919 --> 00:05:27,440
and that's not even counting the other

161
00:05:27,440 --> 00:05:30,479
high-risk binaries

162
00:05:30,639 --> 00:05:33,680
so how are the attackers getting in

163
00:05:33,680 --> 00:05:35,120
well when we think about the main

164
00:05:35,120 --> 00:05:36,800
external threat attack vectors in

165
00:05:36,800 --> 00:05:38,080
ingress pass

166
00:05:38,080 --> 00:05:40,720
we are looking at by the internet this

167
00:05:40,720 --> 00:05:41,840
is via

168
00:05:41,840 --> 00:05:44,639
drive-by downloads as well as the tax on

169
00:05:44,639 --> 00:05:46,400
public facing infrastructure

170
00:05:46,400 --> 00:05:48,400
so that could be for example brute force

171
00:05:48,400 --> 00:05:51,360
or password-spraying attacks against rdp

172
00:05:51,360 --> 00:05:53,360
as well as attacks against unknown and

173
00:05:53,360 --> 00:05:54,960
unpatched vulnerabilities on the public

174
00:05:54,960 --> 00:05:56,880
facing infrastructure

175
00:05:56,880 --> 00:06:00,479
attackers are also getting in by email

176
00:06:00,479 --> 00:06:02,639
and typically we'll see this in

177
00:06:02,639 --> 00:06:04,479
malicious attachments to emails

178
00:06:04,479 --> 00:06:06,240
i mean you know who doesn't love an

179
00:06:06,240 --> 00:06:07,919
office document with macros right

180
00:06:07,919 --> 00:06:10,319
everyone loves macros and we're also

181
00:06:10,319 --> 00:06:12,000
seeing email campaigns

182
00:06:12,000 --> 00:06:15,600
uh you know leveraging phishing links to

183
00:06:15,600 --> 00:06:17,199
the credential harvesting for later

184
00:06:17,199 --> 00:06:20,080
attacks on other infrastructure

185
00:06:20,080 --> 00:06:22,160
attackers are also you know external

186
00:06:22,160 --> 00:06:23,120
facing attack class

187
00:06:23,120 --> 00:06:25,520
also leveraging peripheral devices such

188
00:06:25,520 --> 00:06:27,759
as usb mass storage devices

189
00:06:27,759 --> 00:06:30,319
uh usb kit devices optical media and

190
00:06:30,319 --> 00:06:34,240
other storage drives

191
00:06:34,240 --> 00:06:36,080
so in order to protect against lower bin

192
00:06:36,080 --> 00:06:38,240
attacks it is important to implement a

193
00:06:38,240 --> 00:06:40,000
layered security control posture

194
00:06:40,000 --> 00:06:41,840
and this is because in many instances

195
00:06:41,840 --> 00:06:43,039
what you're trying to protect

196
00:06:43,039 --> 00:06:45,039
is against the unknown and that is

197
00:06:45,039 --> 00:06:46,880
undocumented features of windows

198
00:06:46,880 --> 00:06:48,560
binaries are present in nearly every

199
00:06:48,560 --> 00:06:51,520
single os release

200
00:06:54,160 --> 00:06:56,240
so although there are many security

201
00:06:56,240 --> 00:06:58,160
controls out there as i just

202
00:06:58,160 --> 00:07:00,400
showed on my previous slide we're going

203
00:07:00,400 --> 00:07:01,280
to be focusing

204
00:07:01,280 --> 00:07:03,759
on the following three security controls

205
00:07:03,759 --> 00:07:04,639
this is because

206
00:07:04,639 --> 00:07:06,400
these controls are focused on hardening

207
00:07:06,400 --> 00:07:07,919
the end points which is where the low

208
00:07:07,919 --> 00:07:09,680
bin attacks occur

209
00:07:09,680 --> 00:07:11,280
now anyone who's known me for more than

210
00:07:11,280 --> 00:07:13,360
a minute or anyone who's known me more

211
00:07:13,360 --> 00:07:14,319
than a minute can attest

212
00:07:14,319 --> 00:07:15,919
is that i love application white

213
00:07:15,919 --> 00:07:17,840
listening um in fact

214
00:07:17,840 --> 00:07:19,680
you know i have application whitelisting

215
00:07:19,680 --> 00:07:21,440
deployed in my home environment too

216
00:07:21,440 --> 00:07:24,240
by app locker but app locker can only go

217
00:07:24,240 --> 00:07:24,800
so far

218
00:07:24,800 --> 00:07:26,479
which is why we will also be discussing

219
00:07:26,479 --> 00:07:28,160
the other defensive mechanisms such as

220
00:07:28,160 --> 00:07:29,199
exploit guard

221
00:07:29,199 --> 00:07:32,720
and host-based firewall rules

222
00:07:32,880 --> 00:07:35,360
so applocker is a very nuanced control

223
00:07:35,360 --> 00:07:36,880
and i've seen it deployed

224
00:07:36,880 --> 00:07:39,039
well as well as i've seen it deployed

225
00:07:39,039 --> 00:07:41,280
really badly

226
00:07:41,280 --> 00:07:43,199
applock is built into the enterprise and

227
00:07:43,199 --> 00:07:44,879
server versions of windows

228
00:07:44,879 --> 00:07:46,479
and was originally designed to replace

229
00:07:46,479 --> 00:07:49,120
software restriction policies

230
00:07:49,120 --> 00:07:51,440
at the high level app locker allows you

231
00:07:51,440 --> 00:07:52,720
to design policies

232
00:07:52,720 --> 00:07:55,759
for the execution of msis scripts

233
00:07:55,759 --> 00:07:58,639
executables dlls as well as microsoft

234
00:07:58,639 --> 00:08:00,160
windows apps

235
00:08:00,160 --> 00:08:02,080
the policies can be granular based on

236
00:08:02,080 --> 00:08:04,080
security groups and digitally signed

237
00:08:04,080 --> 00:08:04,960
files

238
00:08:04,960 --> 00:08:06,879
as well as more generic hash and

239
00:08:06,879 --> 00:08:09,039
path-based rules

240
00:08:09,039 --> 00:08:11,840
now a standard app locker policy might

241
00:08:11,840 --> 00:08:12,720
say

242
00:08:12,720 --> 00:08:14,960
let's allow all microsoft files to

243
00:08:14,960 --> 00:08:16,080
execute

244
00:08:16,080 --> 00:08:18,639
now the issue with this is twofold

245
00:08:18,639 --> 00:08:20,160
firstly we're trying to defend against

246
00:08:20,160 --> 00:08:22,080
microsoft's own binaries

247
00:08:22,080 --> 00:08:24,160
and secondly you'd be surprised how many

248
00:08:24,160 --> 00:08:25,919
legitimate microsoft binary files are

249
00:08:25,919 --> 00:08:29,039
not even digitally signed

250
00:08:30,080 --> 00:08:31,919
but the larger issue is this even when

251
00:08:31,919 --> 00:08:33,679
you want to build publisher

252
00:08:33,679 --> 00:08:35,760
fields publisher policy rules you hit a

253
00:08:35,760 --> 00:08:38,159
snag the product name is the same across

254
00:08:38,159 --> 00:08:39,440
many binaries

255
00:08:39,440 --> 00:08:41,919
as you can see in the screenshot so what

256
00:08:41,919 --> 00:08:43,200
this means is that you can

257
00:08:43,200 --> 00:08:45,120
cannot simply build an outlook a policy

258
00:08:45,120 --> 00:08:47,360
that says allow all microsoft signed

259
00:08:47,360 --> 00:08:48,800
binaries

260
00:08:48,800 --> 00:08:51,120
no you know in order to protect against

261
00:08:51,120 --> 00:08:52,160
the lower bin attacks

262
00:08:52,160 --> 00:08:53,680
you need to actually build these

263
00:08:53,680 --> 00:08:56,320
specific policies per binary

264
00:08:56,320 --> 00:08:57,920
and really this is the preferred method

265
00:08:57,920 --> 00:08:59,519
to protect against abuse of high-risk

266
00:08:59,519 --> 00:09:00,800
binary

267
00:09:00,800 --> 00:09:02,320
if you have a standard user in an

268
00:09:02,320 --> 00:09:04,560
organization whose main tools are the

269
00:09:04,560 --> 00:09:05,360
office suite

270
00:09:05,360 --> 00:09:07,360
and the web browser they shouldn't have

271
00:09:07,360 --> 00:09:08,720
the privilege or need

272
00:09:08,720 --> 00:09:11,839
to run powershell for example and for

273
00:09:11,839 --> 00:09:12,720
the risk-averse

274
00:09:12,720 --> 00:09:14,160
there's also the option to deploy

275
00:09:14,160 --> 00:09:16,720
applocker rules in audit only mode

276
00:09:16,720 --> 00:09:18,800
meaning the blocking component is not

277
00:09:18,800 --> 00:09:21,519
enabled but the logging is

278
00:09:21,519 --> 00:09:24,320
the telemetry can almost be as useful at

279
00:09:24,320 --> 00:09:25,920
least from a detective security control

280
00:09:25,920 --> 00:09:26,640
perspective

281
00:09:26,640 --> 00:09:28,720
as you can build real-time alerting of

282
00:09:28,720 --> 00:09:30,240
the relevant applocker windows event

283
00:09:30,240 --> 00:09:32,560
logs

284
00:09:34,160 --> 00:09:36,880
so why is an app locker enough to combat

285
00:09:36,880 --> 00:09:38,399
low bin attacks

286
00:09:38,399 --> 00:09:40,399
it's probably best if i give you a bit

287
00:09:40,399 --> 00:09:42,640
of an example so

288
00:09:42,640 --> 00:09:44,880
even with app locker policy deployed to

289
00:09:44,880 --> 00:09:47,519
only allow microsoft sign dlls to load

290
00:09:47,519 --> 00:09:49,360
you could still use powershell to

291
00:09:49,360 --> 00:09:51,360
reflectively load an unsigned virtuous

292
00:09:51,360 --> 00:09:52,880
dll

293
00:09:52,880 --> 00:09:56,000
such as sharpscoid so not only will

294
00:09:56,000 --> 00:09:56,959
powershell load

295
00:09:56,959 --> 00:09:59,120
the unsigned dll applocker won't even

296
00:09:59,120 --> 00:10:00,640
log the fact that the dll has been

297
00:10:00,640 --> 00:10:02,240
loaded in the first place

298
00:10:02,240 --> 00:10:04,079
this is due to the way the dll has been

299
00:10:04,079 --> 00:10:05,279
called

300
00:10:05,279 --> 00:10:08,480
so on the screenshot here you can see

301
00:10:08,480 --> 00:10:10,399
the app lock or event that you would see

302
00:10:10,399 --> 00:10:13,040
if you had enabled the order only policy

303
00:10:13,040 --> 00:10:15,040
and then loaded an unauthorized dll such

304
00:10:15,040 --> 00:10:16,640
as sharpsploit

305
00:10:16,640 --> 00:10:18,320
if i was to load this same dll

306
00:10:18,320 --> 00:10:19,760
reflectively through powershell

307
00:10:19,760 --> 00:10:22,320
via the system.reflection.assembly call

308
00:10:22,320 --> 00:10:23,920
there would be no app locker event

309
00:10:23,920 --> 00:10:25,200
generated

310
00:10:25,200 --> 00:10:27,120
obviously you could have powershell logs

311
00:10:27,120 --> 00:10:28,800
that would provide visibility into the

312
00:10:28,800 --> 00:10:31,120
malicious dll being reflectively loaded

313
00:10:31,120 --> 00:10:32,640
but if your aim is to harden your

314
00:10:32,640 --> 00:10:34,240
systems against the capability in the

315
00:10:34,240 --> 00:10:35,120
first place

316
00:10:35,120 --> 00:10:38,640
you need to go a few steps further

317
00:10:41,920 --> 00:10:43,680
which brings me to the windows side by

318
00:10:43,680 --> 00:10:46,000
side directory

319
00:10:46,000 --> 00:10:47,680
anyone who's attempted to harden the

320
00:10:47,680 --> 00:10:49,120
windows operating system

321
00:10:49,120 --> 00:10:50,320
will have probably come across this

322
00:10:50,320 --> 00:10:52,399
directory in the past

323
00:10:52,399 --> 00:10:54,560
it is used to cache files upon part of

324
00:10:54,560 --> 00:10:55,760
the windows updates

325
00:10:55,760 --> 00:10:58,320
as well as restore points not to mention

326
00:10:58,320 --> 00:11:00,399
hard linked binaries

327
00:11:00,399 --> 00:11:02,800
so if you haven't come across it before

328
00:11:02,800 --> 00:11:04,320
you might be surprised to learn that the

329
00:11:04,320 --> 00:11:06,079
windows side-by-side directory contains

330
00:11:06,079 --> 00:11:07,440
copies of the binaries

331
00:11:07,440 --> 00:11:09,120
we're trying to protect from misuse and

332
00:11:09,120 --> 00:11:10,640
abuse

333
00:11:10,640 --> 00:11:12,720
this directory helps demonstrate why

334
00:11:12,720 --> 00:11:14,399
path-based app local rules

335
00:11:14,399 --> 00:11:17,200
and policies are not ideal so to give

336
00:11:17,200 --> 00:11:19,040
you an example

337
00:11:19,040 --> 00:11:20,560
if you were creating an app locker

338
00:11:20,560 --> 00:11:22,560
policy based on a directory path

339
00:11:22,560 --> 00:11:24,720
say to allow only certain users or

340
00:11:24,720 --> 00:11:27,040
groups who are in powershell

341
00:11:27,040 --> 00:11:28,720
you would need to include more than just

342
00:11:28,720 --> 00:11:31,279
a standard powershell

343
00:11:31,279 --> 00:11:33,200
you would also need to include this part

344
00:11:33,200 --> 00:11:35,279
at least on my system

345
00:11:35,279 --> 00:11:37,440
and that brings me to the next point

346
00:11:37,440 --> 00:11:38,720
these directories

347
00:11:38,720 --> 00:11:41,360
are subject to change with every single

348
00:11:41,360 --> 00:11:43,440
windows updates and releases

349
00:11:43,440 --> 00:11:45,680
which makes them untenable for app

350
00:11:45,680 --> 00:11:48,959
locker path-based policies

351
00:11:49,600 --> 00:11:52,560
so what is the preferred method to build

352
00:11:52,560 --> 00:11:55,040
an app locker policy

353
00:11:55,040 --> 00:11:57,200
well in the first instance you want to

354
00:11:57,200 --> 00:11:59,040
build rules based on publishers

355
00:11:59,040 --> 00:12:01,360
that is digital signatures and you want

356
00:12:01,360 --> 00:12:02,959
to go a step further you want to build

357
00:12:02,959 --> 00:12:05,120
these rules per binary

358
00:12:05,120 --> 00:12:07,360
tagging them through the user and or

359
00:12:07,360 --> 00:12:08,320
security groups

360
00:12:08,320 --> 00:12:10,079
will require the ability to launch the

361
00:12:10,079 --> 00:12:11,839
application

362
00:12:11,839 --> 00:12:14,800
so for example powershell should be

363
00:12:14,800 --> 00:12:16,880
restricted to an 80 security group

364
00:12:16,880 --> 00:12:19,360
who requires the privileges to launch it

365
00:12:19,360 --> 00:12:20,959
powershell can be further hardened of

366
00:12:20,959 --> 00:12:21,839
course by

367
00:12:21,839 --> 00:12:24,240
allowing the execution only of digitally

368
00:12:24,240 --> 00:12:25,440
signed script

369
00:12:25,440 --> 00:12:26,959
and powershell logging should of course

370
00:12:26,959 --> 00:12:30,240
be enabled and centralized

371
00:12:30,240 --> 00:12:33,519
now if your binary files are not signed

372
00:12:33,519 --> 00:12:34,800
you need to request your vendor's

373
00:12:34,800 --> 00:12:37,360
assignment because it is 2020 after all

374
00:12:37,360 --> 00:12:39,600
but for for non-microsoft binaries if

375
00:12:39,600 --> 00:12:41,440
you are building a policy

376
00:12:41,440 --> 00:12:43,200
and depending on the frequency of change

377
00:12:43,200 --> 00:12:44,639
you could build a

378
00:12:44,639 --> 00:12:46,880
policy based on binary hash values but

379
00:12:46,880 --> 00:12:49,120
again it's not ideal

380
00:12:49,120 --> 00:12:51,040
and one thing to remember is that the

381
00:12:51,040 --> 00:12:53,519
absence of an app locker rule

382
00:12:53,519 --> 00:12:55,200
uh means that everything else will be

383
00:12:55,200 --> 00:12:57,120
blocked and what this means is

384
00:12:57,120 --> 00:12:59,360
app locker rules are explicit so if a

385
00:12:59,360 --> 00:13:01,200
file doesn't fall under the criteria of

386
00:13:01,200 --> 00:13:02,160
an allowed rule

387
00:13:02,160 --> 00:13:04,639
it will it will be blocked by default

388
00:13:04,639 --> 00:13:06,880
once you have adblocker enabled

389
00:13:06,880 --> 00:13:09,279
so you need to test via order only mode

390
00:13:09,279 --> 00:13:10,480
and it's highly recommended

391
00:13:10,480 --> 00:13:12,399
that you do so so that you don't break

392
00:13:12,399 --> 00:13:14,720
anything

393
00:13:18,240 --> 00:13:21,120
so it's breaking of breaking things this

394
00:13:21,120 --> 00:13:23,600
brings me to exploit guard

395
00:13:23,600 --> 00:13:25,519
explant guard was introduced to replace

396
00:13:25,519 --> 00:13:27,120
the enhanced mitigation experience

397
00:13:27,120 --> 00:13:28,880
toolkit or emmet

398
00:13:28,880 --> 00:13:30,399
it allows more granular security

399
00:13:30,399 --> 00:13:33,519
controls to be applied to binary files

400
00:13:33,519 --> 00:13:36,320
in windows 10 exploit guide is

401
00:13:36,320 --> 00:13:38,240
configured by the security center for

402
00:13:38,240 --> 00:13:39,440
windows defender

403
00:13:39,440 --> 00:13:41,760
but can also be centrally managed by gpo

404
00:13:41,760 --> 00:13:43,839
policies

405
00:13:43,839 --> 00:13:45,519
there are quite a lot of options under

406
00:13:45,519 --> 00:13:46,880
exploit guard i'm not going to go

407
00:13:46,880 --> 00:13:48,639
through all of them here

408
00:13:48,639 --> 00:13:50,880
suffice to say that it is quite easy to

409
00:13:50,880 --> 00:13:52,480
break core features of the operating

410
00:13:52,480 --> 00:13:54,639
system if you're not careful

411
00:13:54,639 --> 00:13:56,160
as i wrote there with exploit guard

412
00:13:56,160 --> 00:13:58,320
comes much responsibility

413
00:13:58,320 --> 00:14:00,079
so instead we will be talking about the

414
00:14:00,079 --> 00:14:01,680
exploit guard settings that are most

415
00:14:01,680 --> 00:14:05,279
useful for defending against lol bin

416
00:14:06,639 --> 00:14:09,199
so firstly code integrity guard which

417
00:14:09,199 --> 00:14:10,880
ensures that all binaries loaded into

418
00:14:10,880 --> 00:14:12,480
the process are digitally signed by

419
00:14:12,480 --> 00:14:13,360
microsoft

420
00:14:13,360 --> 00:14:17,279
this includes dll arbitrary code guard

421
00:14:17,279 --> 00:14:18,639
which helps protect against malicious

422
00:14:18,639 --> 00:14:21,519
attackers loading code into memory

423
00:14:21,519 --> 00:14:23,519
locking low integrity images which

424
00:14:23,519 --> 00:14:24,720
prevents

425
00:14:24,720 --> 00:14:26,480
loading files which are untrusted

426
00:14:26,480 --> 00:14:28,000
typically because they're coming from

427
00:14:28,000 --> 00:14:28,720
the internet

428
00:14:28,720 --> 00:14:31,760
or sandbox browsers blocking of

429
00:14:31,760 --> 00:14:35,279
child processes and disabling windows 32

430
00:14:35,279 --> 00:14:36,800
system calls

431
00:14:36,800 --> 00:14:38,959
now this last one will kill any gui

432
00:14:38,959 --> 00:14:40,639
application so you do have to be careful

433
00:14:40,639 --> 00:14:42,560
with this option

434
00:14:42,560 --> 00:14:45,600
now again exploit guard rules can be

435
00:14:45,600 --> 00:14:47,440
configured in order only mode

436
00:14:47,440 --> 00:14:49,839
but some of these rules are quite noisy

437
00:14:49,839 --> 00:14:51,279
so you do need to be careful as to what

438
00:14:51,279 --> 00:14:52,639
you're doing

439
00:14:52,639 --> 00:14:55,440
so any executable that can be used for

440
00:14:55,440 --> 00:14:56,959
dll injection technique

441
00:14:56,959 --> 00:14:58,320
needs to have an exploit guard rule

442
00:14:58,320 --> 00:15:00,079
created with code integrity guard

443
00:15:00,079 --> 00:15:01,279
enabled

444
00:15:01,279 --> 00:15:04,399
either in blocking mode for a protective

445
00:15:04,399 --> 00:15:04,959
control

446
00:15:04,959 --> 00:15:07,839
or an audit mode for a detective control

447
00:15:07,839 --> 00:15:09,360
but it is important to remember that

448
00:15:09,360 --> 00:15:10,880
even in order only mode

449
00:15:10,880 --> 00:15:13,199
this rule is often quite noisy because

450
00:15:13,199 --> 00:15:14,320
many of the

451
00:15:14,320 --> 00:15:18,800
microsoft dlls are not digitally signed

452
00:15:21,519 --> 00:15:24,160
so if we take the sharpspoiled example

453
00:15:24,160 --> 00:15:25,440
from earlier

454
00:15:25,440 --> 00:15:26,880
where we've used powershell to

455
00:15:26,880 --> 00:15:28,959
reflectively load a malicious dll to run

456
00:15:28,959 --> 00:15:30,480
arbitrary commands

457
00:15:30,480 --> 00:15:32,000
there are a few ways we can leverage

458
00:15:32,000 --> 00:15:34,160
exploit data protect against it

459
00:15:34,160 --> 00:15:35,680
firstly we could block powershell from

460
00:15:35,680 --> 00:15:38,079
creating any child processes

461
00:15:38,079 --> 00:15:40,320
or a better option is to enable code

462
00:15:40,320 --> 00:15:41,440
integrity guide

463
00:15:41,440 --> 00:15:43,600
which will stop reflectively loading any

464
00:15:43,600 --> 00:15:45,600
unsigned dlls

465
00:15:45,600 --> 00:15:47,680
similarly if we think back to the

466
00:15:47,680 --> 00:15:49,839
asterox infostiller campaign

467
00:15:49,839 --> 00:15:53,040
which was infusing exexport for dll side

468
00:15:53,040 --> 00:15:54,160
loading

469
00:15:54,160 --> 00:15:55,680
you could add an exploit card rule to

470
00:15:55,680 --> 00:15:57,440
this binary that would include

471
00:15:57,440 --> 00:15:59,920
uh code integrity guards this would

472
00:15:59,920 --> 00:16:01,920
mitigate the inside loading of these

473
00:16:01,920 --> 00:16:08,639
clls as well but you do need to be

474
00:16:08,639 --> 00:16:10,000
careful with exploit guard

475
00:16:10,000 --> 00:16:11,680
and you do need to understand the

476
00:16:11,680 --> 00:16:13,040
potential downstream

477
00:16:13,040 --> 00:16:15,120
and upstream impacts because microsoft

478
00:16:15,120 --> 00:16:16,480
is one of the worst offenders when it

479
00:16:16,480 --> 00:16:18,240
comes to unsigned dll

480
00:16:18,240 --> 00:16:19,839
and i've got an idea for microsoft and

481
00:16:19,839 --> 00:16:22,160
it's sam you sign your damn binaries

482
00:16:22,160 --> 00:16:25,680
because it's 20 20. come on

483
00:16:26,800 --> 00:16:30,000
so the blocking of child processors can

484
00:16:30,000 --> 00:16:32,560
also be used as a quick and dirty way to

485
00:16:32,560 --> 00:16:34,880
stop the offer suite from running macros

486
00:16:34,880 --> 00:16:36,079
but that's only if you don't mind

487
00:16:36,079 --> 00:16:37,759
blocking macros for everyone

488
00:16:37,759 --> 00:16:40,720
in the environment it's also important

489
00:16:40,720 --> 00:16:42,639
to reiterate that exploit guard policies

490
00:16:42,639 --> 00:16:43,279
are per

491
00:16:43,279 --> 00:16:45,680
named binary so if you're building a

492
00:16:45,680 --> 00:16:48,560
policy for example for powershell.exe

493
00:16:48,560 --> 00:16:51,680
and someone renames it to ps.exe then

494
00:16:51,680 --> 00:16:54,079
the policy will no longer be effective

495
00:16:54,079 --> 00:16:56,399
there is no publisher-based uh rules

496
00:16:56,399 --> 00:16:58,320
like that of applocker

497
00:16:58,320 --> 00:17:00,480
and again this highlights the necessity

498
00:17:00,480 --> 00:17:05,839
of a layered approach to security

499
00:17:09,520 --> 00:17:10,959
which brings us to the host-based

500
00:17:10,959 --> 00:17:13,119
firewall now

501
00:17:13,119 --> 00:17:15,039
host-based firewalls are not always the

502
00:17:15,039 --> 00:17:17,439
sexiest of security controls

503
00:17:17,439 --> 00:17:19,919
and it cops a lot of flack it's often

504
00:17:19,919 --> 00:17:20,559
overlooked

505
00:17:20,559 --> 00:17:22,400
especially considering you know how

506
00:17:22,400 --> 00:17:24,079
effective it can be when configured

507
00:17:24,079 --> 00:17:25,520
correctly

508
00:17:25,520 --> 00:17:27,199
the previous true security controls

509
00:17:27,199 --> 00:17:29,200
applocker and exploit guard

510
00:17:29,200 --> 00:17:30,880
are best at protecting and hardening

511
00:17:30,880 --> 00:17:32,880
against know and lol bins

512
00:17:32,880 --> 00:17:35,200
but what about those where the abusable

513
00:17:35,200 --> 00:17:38,480
capabilities are undocumented

514
00:17:38,480 --> 00:17:40,720
just last week we saw a perfect example

515
00:17:40,720 --> 00:17:42,559
of this when a security researcher

516
00:17:42,559 --> 00:17:43,520
muhammad asker

517
00:17:43,520 --> 00:17:45,120
disclosed the ability to download an

518
00:17:45,120 --> 00:17:47,520
arbitrary file using a windows defender

519
00:17:47,520 --> 00:17:48,799
binary

520
00:17:48,799 --> 00:17:50,400
this is where a hardened host-based

521
00:17:50,400 --> 00:17:54,160
firewall policy would come into play

522
00:17:56,720 --> 00:17:59,679
so what are the firewall recommendations

523
00:17:59,679 --> 00:18:01,679
we want to deny all outbound traffic

524
00:18:01,679 --> 00:18:03,440
without a specific rule

525
00:18:03,440 --> 00:18:05,280
we want to deny all inbound traffic

526
00:18:05,280 --> 00:18:07,360
without a specific rule

527
00:18:07,360 --> 00:18:09,679
we want to build policies again per

528
00:18:09,679 --> 00:18:10,480
binary

529
00:18:10,480 --> 00:18:13,520
ip port critical and onboard the logs

530
00:18:13,520 --> 00:18:15,440
for whenever a firewall rule is created

531
00:18:15,440 --> 00:18:17,280
or deleted

532
00:18:17,280 --> 00:18:20,640
so building the rules per binary

533
00:18:20,640 --> 00:18:22,640
is similar to the concept of network

534
00:18:22,640 --> 00:18:24,080
micro segmentation

535
00:18:24,080 --> 00:18:26,640
whereby you are allowing only certain

536
00:18:26,640 --> 00:18:28,160
binaries to communicate with certain

537
00:18:28,160 --> 00:18:28,960
systems

538
00:18:28,960 --> 00:18:31,679
over well-defined network protocols so

539
00:18:31,679 --> 00:18:33,280
in the above example

540
00:18:33,280 --> 00:18:36,000
of windows defender if you had in place

541
00:18:36,000 --> 00:18:38,080
a specific firewall policy to say that

542
00:18:38,080 --> 00:18:39,600
for example the relevant windows

543
00:18:39,600 --> 00:18:41,520
defender binary which was mp command

544
00:18:41,520 --> 00:18:42,559
run.exe

545
00:18:42,559 --> 00:18:44,400
could only communicate to microsoft's

546
00:18:44,400 --> 00:18:46,720
own mp3s

547
00:18:46,720 --> 00:18:48,960
then this discovery last week would not

548
00:18:48,960 --> 00:18:50,720
have put your organization at risk

549
00:18:50,720 --> 00:18:52,080
at least not without a new firewall

550
00:18:52,080 --> 00:18:54,240
policy deployed or removing the old one

551
00:18:54,240 --> 00:18:56,720
that was in place

552
00:18:56,720 --> 00:18:58,720
now even legitimate microsoft

553
00:18:58,720 --> 00:18:59,760
applications such as

554
00:18:59,760 --> 00:19:02,320
offers don't actually require internet

555
00:19:02,320 --> 00:19:03,760
access to function

556
00:19:03,760 --> 00:19:05,679
at least not in a corporate environment

557
00:19:05,679 --> 00:19:07,600
so you might allow

558
00:19:07,600 --> 00:19:09,280
office suite to access onedrive or

559
00:19:09,280 --> 00:19:11,360
sharepoint online but the office suite

560
00:19:11,360 --> 00:19:13,039
gets updated by windows update

561
00:19:13,039 --> 00:19:15,039
and or sccm or similar tools in the

562
00:19:15,039 --> 00:19:16,240
corporate environment

563
00:19:16,240 --> 00:19:17,840
it doesn't get updated over the internet

564
00:19:17,840 --> 00:19:19,280
directly so

565
00:19:19,280 --> 00:19:21,039
why not ensure that it cannot access the

566
00:19:21,039 --> 00:19:22,720
network by deploying a hard

567
00:19:22,720 --> 00:19:25,840
firewall policy

568
00:19:29,520 --> 00:19:33,120
so how do we bring it all together

569
00:19:33,120 --> 00:19:35,280
i've listed some helpful tips here but

570
00:19:35,280 --> 00:19:36,880
these are not rocket science

571
00:19:36,880 --> 00:19:39,919
we're talking about removing unnecessary

572
00:19:39,919 --> 00:19:40,559
components

573
00:19:40,559 --> 00:19:42,559
of the operating environment we're

574
00:19:42,559 --> 00:19:44,000
talking about configuring security

575
00:19:44,000 --> 00:19:44,720
controls

576
00:19:44,720 --> 00:19:46,799
at the granular level her business that

577
00:19:46,799 --> 00:19:48,799
will use a requirement

578
00:19:48,799 --> 00:19:50,880
we're talking about ensuring that we

579
00:19:50,880 --> 00:19:52,080
have visibility

580
00:19:52,080 --> 00:19:54,400
into the endpoint and network via you

581
00:19:54,400 --> 00:19:55,440
know a scene

582
00:19:55,440 --> 00:19:58,880
by adr and ensuring that we maintain an

583
00:19:58,880 --> 00:20:00,720
accurate inventory

584
00:20:00,720 --> 00:20:02,640
that records not just assets such as

585
00:20:02,640 --> 00:20:04,840
hardware but also software has been

586
00:20:04,840 --> 00:20:06,320
installed

587
00:20:06,320 --> 00:20:08,799
so i can't stress this enough but

588
00:20:08,799 --> 00:20:10,799
reducing your attack surface and knowing

589
00:20:10,799 --> 00:20:12,240
what is allowed

590
00:20:12,240 --> 00:20:14,480
as in an inventory of asset software is

591
00:20:14,480 --> 00:20:17,520
key to protecting your estate

592
00:20:17,520 --> 00:20:19,840
the security control is discussed here

593
00:20:19,840 --> 00:20:22,080
today can be extended by other common

594
00:20:22,080 --> 00:20:23,280
sense best practices

595
00:20:23,280 --> 00:20:25,360
approaches such as separation of

596
00:20:25,360 --> 00:20:26,640
privileges

597
00:20:26,640 --> 00:20:29,360
the least privileged principle

598
00:20:29,360 --> 00:20:31,520
multi-factor authentication

599
00:20:31,520 --> 00:20:33,840
disabling macros or at least only

600
00:20:33,840 --> 00:20:35,520
allowing macros that your organization

601
00:20:35,520 --> 00:20:37,520
has digitally signed

602
00:20:37,520 --> 00:20:39,360
restriction of the command prompt and

603
00:20:39,360 --> 00:20:42,240
registry editing tools by tpo policies

604
00:20:42,240 --> 00:20:43,760
centralized log management and

605
00:20:43,760 --> 00:20:49,360
deployment of an edr

606
00:20:49,360 --> 00:20:52,000
so defending against attacks requires

607
00:20:52,000 --> 00:20:54,159
visibility into your environment

608
00:20:54,159 --> 00:20:56,240
and being a good defender means that you

609
00:20:56,240 --> 00:20:58,400
are able to identify anomalies

610
00:20:58,400 --> 00:21:00,080
outliers if you will of knowing good

611
00:21:00,080 --> 00:21:01,760
behavior

612
00:21:01,760 --> 00:21:04,799
logan attacks take this to the extreme

613
00:21:04,799 --> 00:21:06,880
as you need to be able to determine good

614
00:21:06,880 --> 00:21:08,559
wmic behavior

615
00:21:08,559 --> 00:21:11,679
from suspicious wmic behavior by

616
00:21:11,679 --> 00:21:13,679
hardening your endpoints via applocker

617
00:21:13,679 --> 00:21:15,280
exploit guard and host-based firewall

618
00:21:15,280 --> 00:21:17,120
policies you will be in a much better

619
00:21:17,120 --> 00:21:18,720
position to defend against this attack

620
00:21:18,720 --> 00:21:20,159
vector

621
00:21:20,159 --> 00:21:21,600
it's good to remember that proactive

622
00:21:21,600 --> 00:21:23,360
security measures are much better than

623
00:21:23,360 --> 00:21:24,880
reactive security measures

624
00:21:24,880 --> 00:21:26,159
you don't want to wait to become the

625
00:21:26,159 --> 00:21:28,240
next victim and you need to harden

626
00:21:28,240 --> 00:21:31,600
harden your endpoints now

627
00:21:31,600 --> 00:21:33,200
this has been short and sweet but thank

628
00:21:33,200 --> 00:21:35,120
you all for your time and

629
00:21:35,120 --> 00:21:37,919
you all get macros i love to give out

630
00:21:37,919 --> 00:21:40,559
macros we all get them

631
00:21:40,559 --> 00:21:43,919
i do have some references here as well

632
00:21:43,919 --> 00:21:44,880
which i will

633
00:21:44,880 --> 00:21:48,080
provide to the

634
00:21:48,080 --> 00:21:50,799
conference organizers later as well and

635
00:21:50,799 --> 00:21:52,000
i think

636
00:21:52,000 --> 00:21:56,240
um adam from my team was giving a

637
00:21:56,240 --> 00:21:58,960
a another talk on on the cat and mouse

638
00:21:58,960 --> 00:22:00,799
game of cyber fishing

639
00:22:00,799 --> 00:22:02,960
uh and i think he probably would have

640
00:22:02,960 --> 00:22:04,000
had a few cat

641
00:22:04,000 --> 00:22:05,760
memes in his talk and i didn't have any

642
00:22:05,760 --> 00:22:07,280
camp meme so i added these at the end

643
00:22:07,280 --> 00:22:08,159
here

644
00:22:08,159 --> 00:22:10,400
uh just to just keep it interesting but

645
00:22:10,400 --> 00:22:12,240
thank you all for your time and if

646
00:22:12,240 --> 00:22:13,919
you've got any questions you know please

647
00:22:13,919 --> 00:22:27,840
please hit me up

648
00:22:35,039 --> 00:22:37,120
you

