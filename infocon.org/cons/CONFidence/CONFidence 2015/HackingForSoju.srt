1
00:00:00,040 --> 00:00:07,669
my name is Karl Swenson and I'm going to
talk about PHP protocol handlers and

2
00:00:07,669 --> 00:00:17,220
some weird stuff they can do so yeah
manage costs on Sun sometimes cause I'm

3
00:00:17,220 --> 00:00:22,790
a massive student at Royal Technical
Institute in Stockholm and the City of

4
00:00:22,790 --> 00:00:27,580
player for the Swedish him packing for
sorry this is my first conference talk

5
00:00:27,580 --> 00:00:33,400
and if you would like to reach me
afterwards there is some contact details

6
00:00:33,400 --> 00:00:43,320
they're so first let's talk about
opening files mean we have different

7
00:00:43,320 --> 00:00:52,050
opinions on what languages can do should
do so but I think I mean opening files

8
00:00:52,050 --> 00:00:59,190
is central part in any language and I
think that it should be very simple

9
00:00:59,190 --> 00:01:04,289
operation basically you know just pass
something down to their operating system

10
00:01:04,290 --> 00:01:10,790
to get a filehandle back maybe depending
on your language you want to allocate

11
00:01:10,790 --> 00:01:17,690
some offer or some supporting resource
but overall I think this should be a

12
00:01:17,690 --> 00:01:23,080
simple operation I mean if I would guess
you could like implement something and

13
00:01:23,080 --> 00:01:28,860
you know ten to thirty lines of code and
topology legacy open is twenty two lines

14
00:01:28,860 --> 00:01:43,780
of code so that would be reasonable I
think so let's talk about PHP PHP has a

15
00:01:43,780 --> 00:01:51,049
lot of features and you can it seems
like you can do anything anywhere and

16
00:01:51,049 --> 00:01:58,780
this also applies for opening files so
in PHP you can mean of course you can

17
00:01:58,780 --> 00:02:07,110
just open simple regular local file
system files you can also open files

18
00:02:07,110 --> 00:02:16,970
over HTTP and I think that's yeah well
that's maybe ok you can also do things

19
00:02:16,970 --> 00:02:24,600
like opening a sealer compressed file
and just treat it as if it were a

20
00:02:24,600 --> 00:02:29,519
regular file and so this is where I
think it starts to get a little too

21
00:02:29,520 --> 00:02:36,100
advanced for just opening files and also
if you try to open a silly feel is still

22
00:02:36,100 --> 00:02:43,130
a compressed file which is not actually
a selig compressed file I mean I think

23
00:02:43,130 --> 00:02:46,989
the reasonable thing would be to you
know throw an error something say that

24
00:02:46,989 --> 00:02:52,500
this is not impressed but PHP says yeah
ok sure I'll just treat it as a regular

25
00:02:52,500 --> 00:03:00,280
file so you can also if you have a SIP
are you can open a file inside the city

26
00:03:00,280 --> 00:03:06,640
park I've as if it were a regular file
with this syntax here so you specify the

27
00:03:06,640 --> 00:03:12,179
game there are 10 a.m. the harsh and the
file inside it archive so now we will

28
00:03:12,180 --> 00:03:17,200
read from left that txt as if it were a
regular file on the file system

29
00:03:17,200 --> 00:03:26,970
constraints and then as if this wasn't
enough you can do things like open this

30
00:03:26,970 --> 00:03:32,549
file but all data that you read from
this file should first be passed through

31
00:03:32,549 --> 00:03:39,810
this function before you pass it on to
the rest of the code so this is where it

32
00:03:39,810 --> 00:03:46,640
gets really strange till like this kind
of feature has no place in a simple like

33
00:03:46,640 --> 00:03:54,260
file opened operation ok so this is a
lot of strange stuff but what what

34
00:03:54,260 --> 00:04:01,429
implications does this have I mean how
do we use files in PHP

35
00:04:01,430 --> 00:04:06,739
about me you could just you know open a
file read stuff right stuff like you do

36
00:04:06,739 --> 00:04:12,650
in animal any language but I think the
two most common operations in PHP when

37
00:04:12,650 --> 00:04:17,160
it comes to files is easier to just you
know read all the contents of the file

38
00:04:17,160 --> 00:04:17,540
in

39
00:04:17,540 --> 00:04:25,610
return it as a string maybe sometimes
that's used for you know serving up

40
00:04:25,610 --> 00:04:31,770
images that are in that you need to add
certain headers to and stuff like that

41
00:04:31,770 --> 00:04:38,200
and the other thing to do with files in
PHP is also the include and require

42
00:04:38,200 --> 00:04:44,770
function which is the way you realize
your programs in PHP I mean and that's a

43
00:04:44,770 --> 00:04:50,070
good thing you want to do that but what
you really should think about is that

44
00:04:50,070 --> 00:04:56,110
what include actually does is basically
this you take the contents of a file and

45
00:04:56,110 --> 00:05:01,980
you evaluated as PHP code I mean this is
not a problem it adjusts if it's a

46
00:05:01,980 --> 00:05:07,600
hard-coded file because that's just
saying I want to use this code but the

47
00:05:07,600 --> 00:05:15,280
problem of course arises when you when
this parameter can be manipulated by the

48
00:05:15,280 --> 00:05:24,780
user so this shows up in both CTF
challenges and in actual production code

49
00:05:24,780 --> 00:05:31,989
so first let's go to it like the first
example where this can go wrong this is

50
00:05:31,990 --> 00:05:34,210
short in this example

51
00:05:34,210 --> 00:05:38,030
bit so you probably wouldn't find
something exactly like this but

52
00:05:38,030 --> 00:05:42,940
something basically like this you can
have some some kind of website which has

53
00:05:42,940 --> 00:05:47,940
parameters with switch that the I want
to see the About page and then inside

54
00:05:47,940 --> 00:05:52,840
the code it would be something like this
take the parameter slap on the dot PHP

55
00:05:52,840 --> 00:05:58,619
and included so this means that sense

56
00:05:58,620 --> 00:06:08,560
since include can open any file that
effort not just you know regular local

57
00:06:08,560 --> 00:06:15,520
files you can do is the simple remote
file inclusion of course people have

58
00:06:15,520 --> 00:06:21,780
realized this and we have added like
security options like allow ful open to

59
00:06:21,780 --> 00:06:29,520
to plant stuff like this but that also
feels like an afterthought to give a bad

60
00:06:29,520 --> 00:06:38,440
patch to severe problem so for the next
sample this is from a CTF challenge this

61
00:06:38,440 --> 00:06:44,080
is from condition called Colgate's the
qualifiers which was earlier this year

62
00:06:44,080 --> 00:06:53,490
so we wanted to there was a web web
silence 2012 to exploit this website and

63
00:06:53,490 --> 00:06:58,830
we wanted the source code of the site
because that makes exploiting much is

64
00:06:58,830 --> 00:07:07,389
here so this website basically had this
function like you could you a page so

65
00:07:07,389 --> 00:07:14,070
usually would be like in the php page
equal stake home or upload I think

66
00:07:14,070 --> 00:07:15,940
because this was like

67
00:07:15,940 --> 00:07:24,850
image uploading site so what we did was
we added on this which basically says

68
00:07:24,850 --> 00:07:33,350
take the index file passes through base
64 encoded and read it so later in the

69
00:07:33,350 --> 00:07:41,370
cold they add that PHP so this get this
becomes in the speech P we included and

70
00:07:41,370 --> 00:07:49,770
we will get the whole index PHP
outputted as a 64 encoding sense of

71
00:07:49,770 --> 00:07:56,109
course base 64 encoded text will be
evaluated by the PHP interpreter and

72
00:07:56,110 --> 00:08:00,610
just passed on as ultimate so and then
we could do this for a few other pages

73
00:08:00,610 --> 00:08:06,360
and then we had the full source code of
the website which made the next step

74
00:08:06,360 --> 00:08:15,380
much easier which I will come back to in
later example yeah so here is some

75
00:08:15,380 --> 00:08:22,710
actual production code from one of my
teammates he provided this he was doing

76
00:08:22,710 --> 00:08:29,419
our security audits for a customer so
basically they have they had won the

77
00:08:29,419 --> 00:08:33,949
hostname and they had to service this
was one of the service which hosted

78
00:08:33,950 --> 00:08:39,250
images sold the original code would do
something like I mean there there was

79
00:08:39,250 --> 00:08:42,080
some other stuff before here but
essentially it would get some parameters

80
00:08:42,080 --> 00:08:48,440
from the user extract the Holst schema
and make sure that it was a stupid ass

81
00:08:48,440 --> 00:08:55,840
and him . customer dot com much they
made a mistake this should be an or as

82
00:08:55,840 --> 00:09:00,870
an app which means that we only have to
fulfill one of these two requirements

83
00:09:00,870 --> 00:09:06,770
and then there is another problem here

84
00:09:06,770 --> 00:09:10,689
workers if we pass this

85
00:09:10,690 --> 00:09:18,340
think he will do this price URL function
and tried to extract the whole stand the

86
00:09:18,340 --> 00:09:24,630
scheme so the scheme will be there's no
problem and it will claim that this is

87
00:09:24,630 --> 00:09:29,030
the host name which seems very
reasonable because if it would have been

88
00:09:29,030 --> 00:09:35,000
his TDP here then this would be a had
been a perfectly valid http URL in which

89
00:09:35,000 --> 00:09:44,490
this would have been the host however in
the context of opening a file this is

90
00:09:44,490 --> 00:09:54,420
just path so this would hear tried to
get the contents of this file and so

91
00:09:54,420 --> 00:10:00,740
we're going to the non existing
directory in customer dot com and then

92
00:10:00,740 --> 00:10:05,240
up again but that's not a problem
because it does path normalization so

93
00:10:05,240 --> 00:10:14,100
these two Arts Council out and we only
have index PHP left so it would try to

94
00:10:14,100 --> 00:10:20,910
open in the PHP src like compressed file
but it's not of course but yeah that's

95
00:10:20,910 --> 00:10:26,569
not a problem because it was still read
it as a regular file so basically we

96
00:10:26,570 --> 00:10:32,660
would output the index php file the and
there will probably be some image header

97
00:10:32,660 --> 00:10:42,449
and whatever but you could just read out
the source code provides security issue

98
00:10:42,450 --> 00:10:54,470
and yeah hopefully they fix it anyway so
this this thing skis these things keep

99
00:10:54,470 --> 00:10:59,600
happening so this is this was an actual
production cold this is from the other

100
00:10:59,600 --> 00:11:05,630
part of the Kodiak qualifier challenge
we're so basically it was as I said it

101
00:11:05,630 --> 00:11:10,040
was an image uploading site so you could
upload images it would check that it was

102
00:11:10,040 --> 00:11:16,140
a valid JPEG image and then it would
give you like a random I D

103
00:11:16,140 --> 00:11:23,840
for that image so we could take some
some PHP code that we wanted to execute

104
00:11:23,840 --> 00:11:32,870
sit up and then we prevented a valid
JPEG file and as you may or may not know

105
00:11:32,870 --> 00:11:38,510
if you concatenate jpg filed with the
SEC filed both of the files are still

106
00:11:38,510 --> 00:11:44,050
valid because supply I'll sorry
typically read backwards and the JPEG

107
00:11:44,050 --> 00:11:51,010
file and the file market so when we
upload this it will pass the Jay Peak

108
00:11:51,010 --> 00:11:57,150
validation check because it is a valid
JPEG image and then we could go back to

109
00:11:57,150 --> 00:12:05,250
this page and provide this URL which
basically says that we want to open this

110
00:12:05,250 --> 00:12:10,340
zip file in the upload directory which
we had extracted from the source code

111
00:12:10,340 --> 00:12:18,210
that we got earlier and this was the
random idea we had and so this was

112
00:12:18,210 --> 00:12:28,070
uploaded JPEG file and the percent 23 /
science so this would say you know take

113
00:12:28,070 --> 00:12:29,170
this city

114
00:12:29,170 --> 00:12:37,370
archive random aidid or JPEG and inside
at sip given me shell and they added on

115
00:12:37,370 --> 00:12:46,960
the PHP here so include the PHP code in
this archive and execute its so there we

116
00:12:46,960 --> 00:12:52,930
had remote code execution and then we
could yet the flag and sold the

117
00:12:52,930 --> 00:13:00,359
challenge so this was when I was
preparing this talk this was a quote

118
00:13:00,360 --> 00:13:05,430
from my teammates which highlights
because it feels like there are so many

119
00:13:05,430 --> 00:13:11,370
strange advanced features in PHP this
was one of them

120
00:13:11,370 --> 00:13:21,980
yeah so the Summary page PHP is still
messed up and evil is still evil so you

121
00:13:21,980 --> 00:13:27,130
have to think about what include
actually is evaluating code from a file

122
00:13:27,130 --> 00:13:35,460
so make sure that the user can affect
the path in any way and you know they're

123
00:13:35,460 --> 00:13:40,050
been seen in some of this example and
other examples will find as you know you

124
00:13:40,050 --> 00:13:44,400
try to filter things like you shouldn't
have this in the past not have this in

125
00:13:44,400 --> 00:13:55,240
the path of stuff but there are no small
bugs tough breaks so that was all I had

126
00:13:55,240 --> 00:13:55,870
thank you

