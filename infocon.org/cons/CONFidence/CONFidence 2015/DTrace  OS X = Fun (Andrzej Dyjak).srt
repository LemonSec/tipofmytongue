1
00:00:00,000 --> 00:00:07,500
so what is the trees this race is
instrumentation and drying dynamic

2
00:00:07,500 --> 00:00:14,509
instrumentation and running for mayor
for salaries it was made by the Brian

3
00:00:14,509 --> 00:00:20,820
comes from Mike Shapiro and Adam
levanthal in 2005 and then it was

4
00:00:20,820 --> 00:00:28,750
introduced to some BSD systems like
previous the NetBeans IDE and along with

5
00:00:28,750 --> 00:00:35,760
it it was then added to a sex which is
loosely based on the FreeBSD

6
00:00:35,760 --> 00:00:46,589
particularly for OSX it was included in
2007 in 2.5 version of OSX codename

7
00:00:46,590 --> 00:00:52,940
lower part and you any developer might
know the trees from the instrument

8
00:00:52,940 --> 00:00:58,019
instruments 24 I sex

9
00:00:58,020 --> 00:01:14,020
stability was weaker assumption for the
trees because the line was

10
00:01:14,020 --> 00:01:22,869
and salaries is for servers so you could
you can't actually break the system

11
00:01:22,869 --> 00:01:29,270
because well that would be a very good
and the second one was the No overhead

12
00:01:29,270 --> 00:01:37,390
so the applications that are not traced
need to work exactly like they would

13
00:01:37,390 --> 00:01:42,810
work if the trace was not present at the
system at all and they actually achieved

14
00:01:42,810 --> 00:01:50,320
that however in order to do so they
needed to remove some parts some

15
00:01:50,320 --> 00:01:56,279
interesting parts from the language and
that's why I say that it's kinda retired

16
00:01:56,280 --> 00:02:02,009
at the burger / DBA DBA and run because
you can't do everything we did rise for

17
00:02:02,009 --> 00:02:04,820
something so you actually need to use

18
00:02:04,820 --> 00:02:12,250
any any sort of a debugger or or actual
DBI enjoying for example pin 249 America

19
00:02:12,250 --> 00:02:23,920
or so this is Christmas current nice
nice and that's how the basic the script

20
00:02:23,920 --> 00:02:32,429
looks like so you have a provider which
generally provides you with some vague

21
00:02:32,430 --> 00:02:41,100
functionality then you have for example
PID then you have a module so for PID

22
00:02:41,100 --> 00:02:49,549
you could actually raise some particular
cold chance inside of dynamic library

23
00:02:49,550 --> 00:02:54,680
and that would go for module then
function well this is self explanatory

24
00:02:54,680 --> 00:03:02,570
and name we trace which stands for the
semantic meaning so for example if you

25
00:03:02,570 --> 00:03:08,760
have some kind of a function then name
could be for example entry and retired

26
00:03:08,760 --> 00:03:13,420
so for every entry of dysfunction

27
00:03:13,420 --> 00:03:24,070
make some actions that are defined and
one more thing about functions as you

28
00:03:24,070 --> 00:03:31,480
may probably know you could deduce that
that you actually need to have you can

29
00:03:31,480 --> 00:03:38,840
have striped binaries so you need to
have symbols mean kind of

30
00:03:38,840 --> 00:03:44,799
then you have a predicate which is the
only form of EF if statements in the D

31
00:03:44,799 --> 00:03:53,900
and you have actions so all that you can
also round one line from the command

32
00:03:53,900 --> 00:03:58,480
line so the other one niece is just a
white 19 there but basically does the

33
00:03:58,480 --> 00:04:04,260
same so yeah that's how it looks like so
for example here you have a DTrace

34
00:04:04,260 --> 00:04:08,179
provider and

35
00:04:08,180 --> 00:04:13,260
two fields are just left out

36
00:04:13,260 --> 00:04:18,599
module and function and you have a
beginning so again will try our for the

37
00:04:18,600 --> 00:04:25,190
entry point of the DTrace script itself
so for example if you want to make some

38
00:04:25,190 --> 00:04:30,600
kind of a formatting then you can do
that by heat race begins and also the

39
00:04:30,600 --> 00:04:37,800
dress and if you want to do something at
the end of the the transcript so the

40
00:04:37,800 --> 00:04:43,610
architectural looks like this you have a
script or one-liners that go to the

41
00:04:43,610 --> 00:04:50,889
trace command which is basically the
DTrace consumer you could technically

42
00:04:50,889 --> 00:04:58,199
culture own consumer for example in
Python and that would be heightened by

43
00:04:58,199 --> 00:05:09,430
the rankings and that makes the day I F
which is no that actually passes in the

44
00:05:09,430 --> 00:05:14,530
script that the IAF is made by leave the
address which is the still in userspace

45
00:05:14,530 --> 00:05:21,448
but it sends the objects into the kernel
and 43 driver to actually scheduled

46
00:05:21,449 --> 00:05:30,860
stuff for the Detroit providers and as a
bonus you have something like you as the

47
00:05:30,860 --> 00:05:36,139
tease which are a user-level statically
different racing basically you can make

48
00:05:36,139 --> 00:05:45,400
some static points in your own programs
or programs of other people and input

49
00:05:45,400 --> 00:05:52,539
prob statically into the coat and this
actually is quite interesting because

50
00:05:52,539 --> 00:06:01,120
for example if you have a javascript
provider which is Jas then people from

51
00:06:01,120 --> 00:06:08,470
Muslim introduced DTrace USDA's into
into Mozilla Firefox

52
00:06:08,470 --> 00:06:16,180
and you could peek into the internals of
the JavaScript via de tres and it would

53
00:06:16,180 --> 00:06:22,560
be enhanced even more if you do that
fire you sdt down if you wouldn't have

54
00:06:22,560 --> 00:06:27,290
few sdt at all and you would just try to
go

55
00:06:27,290 --> 00:06:35,590
dynamically by a bear DTrace and that's
because you wouldn't have the underlying

56
00:06:35,590 --> 00:06:44,179
meaning ok so dance and the language
basically D is like see so if you know

57
00:06:44,180 --> 00:06:53,550
see then they will be easy to learn that
ickes so basically like seen anyone

58
00:06:53,550 --> 00:07:01,220
knows that one important part is that
you can reference point and that means

59
00:07:01,220 --> 00:07:07,180
that you can work structure trains and
you can can strings through concussed

60
00:07:07,180 --> 00:07:14,400
feelings and reference so so yup and
types of scholars types are scholars

61
00:07:14,400 --> 00:07:22,020
streams are ice and associate II Iran's
columnist usual just volumes drinks that

62
00:07:22,020 --> 00:07:28,289
is kinda different times see because
well it's not like three weeks or

63
00:07:28,290 --> 00:07:29,470
whatever

64
00:07:29,470 --> 00:07:35,260
higher-level language and then you have
a nice which are like see and then you

65
00:07:35,260 --> 00:07:40,840
have associated arise that are not like
see because you used tuples inside of

66
00:07:40,840 --> 00:07:50,020
them and you have a kind of different
scope than in C and you you use

67
00:07:50,020 --> 00:07:56,419
variables in a different way as good as
you can see so if you want to have a

68
00:07:56,419 --> 00:08:03,859
global variable then you just use name
but without any type if you want to have

69
00:08:03,860 --> 00:08:08,970
closed lock ounce then use these are you
sure you want to have thread lock on

70
00:08:08,970 --> 00:08:17,000
youself ro butter and if you want to
reference to external variables you can

71
00:08:17,000 --> 00:08:21,280
do that do that by tactic and yeah

72
00:08:21,280 --> 00:08:30,690
example you can actually go for the
current variables interesting buildings

73
00:08:30,690 --> 00:08:39,210
so they did rest of course they needed
to introduce some kind of functionality

74
00:08:39,210 --> 00:08:45,430
that that that you can use some kind of
additional data and that comes in the

75
00:08:45,430 --> 00:08:54,410
form of buildings so you have like three
pointers to typical structures 44

76
00:08:54,410 --> 00:09:00,780
processes threat in UNIX systems so you
can reference some interesting values

77
00:09:00,780 --> 00:09:06,550
inside of structures those structures so
does our type thing for which is four

78
00:09:06,550 --> 00:09:12,319
processes Carroll who pays for which
he's kind of for lightweight processes

79
00:09:12,320 --> 00:09:18,070
and kind of threat which is current
threats which are which is for frets

80
00:09:18,070 --> 00:09:22,630
that we have a caller well calories just
a function that cult the frankly the

81
00:09:22,630 --> 00:09:31,030
function that you're actually probing
you can reference arguments exact names

82
00:09:31,030 --> 00:09:38,439
PID sleepy ideas are parent process IDs
you can use time stamps and interesting

83
00:09:38,440 --> 00:09:46,210
part is that you can actually damage the
registers but you cannot modify them and

84
00:09:46,210 --> 00:09:57,010
actually ok I have this example later in
this line so operators well these are

85
00:09:57,010 --> 00:10:04,370
exactly like seen apart from truck apart
from streams and source as you can see

86
00:10:04,370 --> 00:10:11,160
for logical XOR you have double fashions

87
00:10:11,160 --> 00:10:18,910
birds and for be twice you have just one
so far we try sees it is normal

88
00:10:18,910 --> 00:10:26,110
you don't have loops and you don't have
sex because as I stated earlier you

89
00:10:26,110 --> 00:10:30,390
actually cannot have them from the
assumptions because if you would have

90
00:10:30,390 --> 00:10:33,040
loops or if so then you could do

91
00:10:33,040 --> 00:10:39,209
never-ending loops or or if so that
would be very bad for production system

92
00:10:39,209 --> 00:10:47,589
however there are reserved keywords
inside of the trace so you have she

93
00:10:47,589 --> 00:10:54,769
wants for doing wine for those ETFs as
but they didn't actually implement that

94
00:10:54,769 --> 00:11:03,279
or at least they didn't do that for for
public functions and subroutines this

95
00:11:03,279 --> 00:11:12,079
are also kind of buildings in into the
DTrace so you can dump the stack use the

96
00:11:12,079 --> 00:11:18,709
keys for user amount because indeed race
when you tracing any any application you

97
00:11:18,709 --> 00:11:25,119
do that from inside of the cardinal and
if it's in the user mouth then you would

98
00:11:25,120 --> 00:11:30,110
have different stocks for the actual
DTrace prob which is incredible and and

99
00:11:30,110 --> 00:11:36,029
different stock for the application that
you want to have stopped for so then you

100
00:11:36,029 --> 00:11:43,529
to use our stock price man is for
tracing general pointers so you can

101
00:11:43,529 --> 00:11:52,620
trace memory Alipay locations because
peace are well for internal usage of

102
00:11:52,620 --> 00:11:59,040
drinks then you have copy copy in stock
and copy into as I said just a second

103
00:11:59,040 --> 00:12:04,750
ago did races in the kernel so if you
want to have something from user might

104
00:12:04,750 --> 00:12:12,449
for example you want to have a string
that is appointed by the argument then

105
00:12:12,449 --> 00:12:17,819
you need to somehow copied into the
cardinal and you would do that fire

106
00:12:17,819 --> 00:12:24,719
copying I have that in the example so I
pointed out later

107
00:12:24,720 --> 00:12:33,899
message sizes and stink lange's well
that relates to other and be copies then

108
00:12:33,899 --> 00:12:38,980
you have disruptive for specific
processes these are only available if

109
00:12:38,980 --> 00:12:44,380
you switch the destructive

110
00:12:44,380 --> 00:12:50,430
which are stopped race copy out and
system stopped and rice are kind of self

111
00:12:50,430 --> 00:13:00,280
explanatory can stop processes and raise
some signal for example 9 heal and copy

112
00:13:00,280 --> 00:13:07,140
all copy arts training is actually
distracted because you can mangled e

113
00:13:07,140 --> 00:13:17,050
memory so this actually was used by name
in his examples I will provide the

114
00:13:17,050 --> 00:13:25,870
reference later when where she on x86
when you call functions you usually do

115
00:13:25,870 --> 00:13:35,750
that vial stdcall or city a clue not
usually fast so you can actually change

116
00:13:35,750 --> 00:13:42,400
the things that are on the stack buy a
copy out instruction so you could for

117
00:13:42,400 --> 00:13:49,520
example tamper we've we've the output of
some applications Forex Forex 64 you

118
00:13:49,520 --> 00:13:54,540
could do that probably i didnt as that
you could do that if the argument is a

119
00:13:54,540 --> 00:14:02,540
pointer so because x64 the first six
arguments are passed by registers so you

120
00:14:02,540 --> 00:14:07,030
can't modify the register but if the
argument disappointed in you can see

121
00:14:07,030 --> 00:14:11,350
reference that point and then mangled
with the memory pointed by the pointer

122
00:14:11,350 --> 00:14:19,250
and System X 60 well it's just like in
see it exacts d application provided

123
00:14:19,250 --> 00:14:26,240
strength for the application and forced
for this whole systems are also

124
00:14:26,240 --> 00:14:34,440
destructive break point panic and chill
breakpoints 860 break point and then it

125
00:14:34,440 --> 00:14:38,330
waits for the kernel debugger so you
shouldn't do that if you don't have

126
00:14:38,330 --> 00:14:39,769
another burger

127
00:14:39,769 --> 00:14:50,040
tuned armed and well managed the colonel
and sheila is also interesting for race

128
00:14:50,040 --> 00:14:57,439
conditions because you can when you're
analyzing race condition then you can

129
00:14:57,439 --> 00:15:05,689
put some cheese inside of the colonel
and well he will win races more often

130
00:15:05,689 --> 00:15:20,110
than not so it's good for for analyzing
and now we're going into providers I

131
00:15:20,110 --> 00:15:25,339
don't know if you've noticed I usually
only the interesting ones so if you see

132
00:15:25,339 --> 00:15:30,970
the ellipses than there are more and you
should check them but for more

133
00:15:30,970 --> 00:15:37,959
interesting ones are like siskel PID
object C abt and prog rock siskel you

134
00:15:37,959 --> 00:15:47,829
can trace the calendar system for PID
you can trace any process for object see

135
00:15:47,829 --> 00:15:54,569
this is kinda Apple specific you can go
into the man he tries and you can read

136
00:15:54,569 --> 00:16:01,579
about object object see provider every T
stands for function boundary tracing and

137
00:16:01,579 --> 00:16:10,399
is used to actually any function inside
of the current so you can peek into the

138
00:16:10,399 --> 00:16:16,100
kernel via FB tea and it's quite
interesting and broke well actually used

139
00:16:16,100 --> 00:16:22,389
properly wants and I seen it in a very
interesting shoes at which was done

140
00:16:22,389 --> 00:16:28,429
couple of weeks ago for lunch the
vulnerability analysis because the guy

141
00:16:28,429 --> 00:16:36,730
had a coruña bTW but the Apple as usual
didn't release the colonel colonel

142
00:16:36,730 --> 00:16:46,279
we've d-backs in both Europe and he
couldn't actually connect and he wanted

143
00:16:46,279 --> 00:16:53,510
to know what the crash is happening so
she used the prop because we've prob you

144
00:16:53,510 --> 00:16:59,189
can said say that yeah okay at the point
of the crash for some product process

145
00:16:59,190 --> 00:17:07,309
time the for example start and registers
and he did that it made Finks simpler

146
00:17:07,309 --> 00:17:15,510
this is the output while I was around
for this so basically you are listing

147
00:17:15,510 --> 00:17:22,109
the all the providers on the system by a
disgrace that she'll then our case used

148
00:17:22,109 --> 00:17:28,719
to focus on young the second column then
I'm grasping for the provided that I

149
00:17:28,720 --> 00:17:35,660
want to show for example PID and then I
counted so for PID you have 0 because I

150
00:17:35,660 --> 00:17:43,020
didn't press anything but forces us to
have 980 and well MBT kindest things out

151
00:17:43,020 --> 00:17:57,510
of 100,000 soviet it's it's pretty rich
past wore black hat 2008 Taylor and

152
00:17:57,510 --> 00:18:03,640
David introduced framework retrace where
they showed some appliances of the

153
00:18:03,640 --> 00:18:09,470
tracing to the vulnerability research
but it was kinda pretty pretty simple

154
00:18:09,470 --> 00:18:17,710
they just cut some stock-based buffer
overflows and some basic cheap stuff and

155
00:18:17,710 --> 00:18:25,370
then normal interest rate 2013 he on the
other hand presented a rootkit like

156
00:18:25,370 --> 00:18:26,809
abilities

157
00:18:26,809 --> 00:18:34,389
possible with the trace not very very
useful I wouldn't do anything anything

158
00:18:34,389 --> 00:18:39,719
like that we did race because it misses
the point you can actually just you know

159
00:18:39,720 --> 00:18:51,059
the details of but he presented a lot of
interesting one-liners and ideals and

160
00:18:51,059 --> 00:18:54,549
they are worth checking out

161
00:18:54,549 --> 00:19:03,110
and similar projects if you happened to
be on Linux then you can use system type

162
00:19:03,110 --> 00:19:13,059
which is very similar and actually it's
kind of sunny compatible beef with the

163
00:19:13,059 --> 00:19:18,519
semantics of distress because it had
wanted to do that in this way more

164
00:19:18,519 --> 00:19:26,549
interesting to read case you can
reference to the two-hour block post and

165
00:19:26,549 --> 00:19:35,200
detours this was kinda started before
the trace or in in the same years in the

166
00:19:35,200 --> 00:19:42,950
past decade nineties and this is
actually funny because if you reverse

167
00:19:42,950 --> 00:19:48,509
any yellows from Microsoft you've
probably seen the video I edi

168
00:19:48,509 --> 00:19:54,549
instruction in the front room prologue
this is actually hot spot for the for

169
00:19:54,549 --> 00:20:02,010
the detours so it does introduce
overhead but it's very slight

170
00:20:02,010 --> 00:20:12,560
you can read about the idea and the
provided link so using

171
00:20:12,560 --> 00:20:22,370
first run through some one-liners then I
will run through some scripts so this

172
00:20:22,370 --> 00:20:31,000
one just shows you the number of Cisco's
that we executed on the behalf of the

173
00:20:31,000 --> 00:20:39,060
PID the PID in this example East preview
application on my sex that run some

174
00:20:39,060 --> 00:20:46,919
tests P injury so you could you could
see how many we are executed this is

175
00:20:46,920 --> 00:20:55,010
kind of interesting if you want to see
if you seek for any particular Cisco not

176
00:20:55,010 --> 00:21:00,260
very interesting in general case or
maybe for profiling the cold then than

177
00:21:00,260 --> 00:21:13,000
it is interesting the second one liner
time since I will go back to this one as

178
00:21:13,000 --> 00:21:22,830
you can see I left out the module and an
actual function so I just put on any

179
00:21:22,830 --> 00:21:32,340
Cisco that is in the system and here I
only put entry on the read siskel that's

180
00:21:32,340 --> 00:21:38,689
why that's why only capture read and I
read the third argument which is parked

181
00:21:38,690 --> 00:21:45,050
too because we can't from zero in C and
I someone that so the third argument is

182
00:21:45,050 --> 00:21:52,760
actually how many guys the process was
reading in that particular breed

183
00:21:52,760 --> 00:22:01,100
function this also is kinda not very
informative in a general sense maybe if

184
00:22:01,100 --> 00:22:05,550
you want to analyze what the what
exactly does the application is doing

185
00:22:05,550 --> 00:22:06,290
then

186
00:22:06,290 --> 00:22:12,889
maybe it would be kinda interesting or
or if you have a profiling the

187
00:22:12,890 --> 00:22:18,100
application then you can pinpoint the
bottlenecks so why does it reading like

188
00:22:18,100 --> 00:22:26,230
1,000,000,000 bytes dysfunction it it
shouldn't do that and also and I

189
00:22:26,230 --> 00:22:28,020
actually used that in my work

190
00:22:28,020 --> 00:22:37,310
couple of times you can trace and the
execution on the on the system in this

191
00:22:37,310 --> 00:22:44,129
example I tried the POSIX poll which is
used on ice axe contrary to the usual

192
00:22:44,130 --> 00:22:49,690
exactly if you will trace on the exact V
then you will have signed up with

193
00:22:49,690 --> 00:22:58,480
specific culture thanks for all
applications that does icon stuff and

194
00:22:58,480 --> 00:23:04,750
you wouldn't cut out so we actually need
to put the props on POSIX spot along

195
00:23:04,750 --> 00:23:13,620
with the timestamps so it's interesting
because Apple doesn't always is asking

196
00:23:13,620 --> 00:23:20,919
straight so it seems it is interesting
what exactly happened in your system you

197
00:23:20,920 --> 00:23:28,640
might be surprised and for some more
one-liners you can either reference the

198
00:23:28,640 --> 00:23:35,510
provided link or just google for them
there is there is really shitty lots of

199
00:23:35,510 --> 00:23:44,830
resources on that so no problem we've we
finding this and for scripts scripts are

200
00:23:44,830 --> 00:23:56,000
kinda more logical or stranded strategy
approach so you if you want to develop a

201
00:23:56,000 --> 00:24:01,040
script then you need to have an actual
idea what do you want to do so I present

202
00:24:01,040 --> 00:24:05,420
at rockingham put memory allocation
scooping and heat tracing those are like

203
00:24:05,420 --> 00:24:09,450
a general ideas that I wanted to

204
00:24:09,450 --> 00:24:17,429
to standing and the trace was helpful
with that so for tracking info input i'd

205
00:24:17,429 --> 00:24:25,740
covered this on my block couple of weeks
ago for REIT that usually when you went

206
00:24:25,740 --> 00:24:32,059
up occasions processing the imports you
wouldn't just read the big five each

207
00:24:32,059 --> 00:24:38,840
each time that you want to do something
with it you would usually memory map map

208
00:24:38,840 --> 00:24:46,418
it and then reference the that memories
it it's faster so I did that for mmm up

209
00:24:46,419 --> 00:24:55,850
and interesting problem arose in the OS
X and the israelis particularly

210
00:24:55,850 --> 00:25:02,439
and of course you can track any input so
the same idea can be done for the

211
00:25:02,440 --> 00:25:10,760
network inputs to implement basic
sniffer capabilities so I will run

212
00:25:10,760 --> 00:25:20,200
through each DTrace Chang so at the end
if you do every child and you would have

213
00:25:20,200 --> 00:25:29,139
working script so in the beginning I
introduced to global a race in which I

214
00:25:29,139 --> 00:25:42,600
will be tracking the file descriptors
and pointers then open I'm starting to

215
00:25:42,600 --> 00:25:50,969
put two probes on entry and return
because on entry I want to have the

216
00:25:50,970 --> 00:25:57,490
arguments that were provided to open and
then returned I want to have returned

217
00:25:57,490 --> 00:26:05,730
value which is our fighters descriptor
I'm defining to fret local variables in

218
00:26:05,730 --> 00:26:09,770
the entry so I'm

219
00:26:09,770 --> 00:26:19,490
find them which which isn't required and
the other one is actually required

220
00:26:19,490 --> 00:26:25,790
because you want to have some kind of a
flood that you actually went into the

221
00:26:25,790 --> 00:26:33,760
the the the open which we will use as a
predicate in the India return prob so

222
00:26:33,760 --> 00:26:43,450
I'm using this as a predicate then I'm
saving the retirement find a script or

223
00:26:43,450 --> 00:26:55,380
in putting this into an IRA but as you
can see I'm putting did in US index so

224
00:26:55,380 --> 00:27:03,020
I'm just saying yeah I have some kind of
5 descriptor for example one hundred and

225
00:27:03,020 --> 00:27:09,520
I'm sitting 21 so it is used so I can
later check that this fight a stripper

226
00:27:09,520 --> 00:27:16,980
is actually used in time freeing the
variables such as name and open ok

227
00:27:16,980 --> 00:27:28,400
because if you make the variable 0 than
you and Daddy delete it so that's that

228
00:27:28,400 --> 00:27:35,200
for open for mmm up where I actually
used attract FDI

229
00:27:35,200 --> 00:27:45,240
as a predicate again because probably
arguments for a map but the first

230
00:27:45,240 --> 00:27:50,940
argument is the fighters descriptor so
I'm checking if the attractive D array

231
00:27:50,940 --> 00:28:00,860
of this file descriptor is locked US
Open and if it is making some fried

232
00:28:00,860 --> 00:28:06,570
local variables that are really using
the return then i checking if any of it

233
00:28:06,570 --> 00:28:12,470
any of the Fed local variables are set
and because that would also could be

234
00:28:12,470 --> 00:28:13,260
just

235
00:28:13,260 --> 00:28:21,360
MFD not ms busy and I'm actually to some
longing and you start thinking the

236
00:28:21,360 --> 00:28:32,120
return however in my you read example I
actually picking to the moment memory

237
00:28:32,120 --> 00:28:39,840
inside of the Erie to return however on
any map return I cannot do that and that

238
00:28:39,840 --> 00:28:40,939
was strange to me

239
00:28:40,940 --> 00:28:46,910
apparently we did raise you cannot speak
into the memory that wasn't touched by

240
00:28:46,910 --> 00:28:49,710
the process so even though and map

241
00:28:49,710 --> 00:28:54,740
well the memory was actually part
because it was mapped the process itself

242
00:28:54,740 --> 00:29:02,620
didn't touch it yet so did raise can't
dump it even though the pointer is valid

243
00:29:02,620 --> 00:29:10,909
so I'm checking the memory when I'm
gonna mapping the mapped memory so you

244
00:29:10,910 --> 00:29:19,030
take the memory via tradesmen then I
copy in the the the point that I want to

245
00:29:19,030 --> 00:29:24,440
track the reference so i'm i'm doing the
copy in because you need to have the

246
00:29:24,440 --> 00:29:31,330
truck from the user into the current
amount and then from this chunk you

247
00:29:31,330 --> 00:29:39,419
actually tries the memory is kinda look
very elegant way but it's how it's how

248
00:29:39,420 --> 00:29:46,710
it works so yeah and then I'm just from
the variables the clothes I'm free the

249
00:29:46,710 --> 00:29:53,380
trapped of divorce you don't actually do
that formerly memory allocation snow

250
00:29:53,380 --> 00:29:54,570
pink

251
00:29:54,570 --> 00:30:00,050
I wanted to have a simple to imitate
Sopot of all trace amount of memory

252
00:30:00,050 --> 00:30:10,100
allocations and and goal was to use it
for vlak which actually succeeded

253
00:30:10,100 --> 00:30:18,260
however the idea can be on some rainfall
amounted to make people out on others is

254
00:30:18,260 --> 00:30:23,040
also picking to customary alligators are
tracking kernel memory allocations so

255
00:30:23,040 --> 00:30:25,220
far keep an eye out another analysis

256
00:30:25,220 --> 00:30:32,720
usually when you are exploiting some
vulnerability these days you have Isilon

257
00:30:32,720 --> 00:30:41,120
you have a bunch of other things that
tried to stop you so you might not get

258
00:30:41,120 --> 00:30:44,830
100% reliability and then you want to
know

259
00:30:44,830 --> 00:30:50,418
well okay so how much reliability I do
have and yeah you can do that we did a

260
00:30:50,419 --> 00:30:57,100
burger but everyone knows that sucks so
you can also use the price for that so

261
00:30:57,100 --> 00:31:01,789
yeah basic workflow look like this

262
00:31:01,789 --> 00:31:09,539
used in place of the overflow you just
play with the heap in the in the

263
00:31:09,539 --> 00:31:13,669
internal applications from so for
example in Brasov you to use javascript

264
00:31:13,669 --> 00:31:19,010
and then you see how many times you have
an object that you want to have the

265
00:31:19,010 --> 00:31:25,210
others that you want to have it all four
brothers it's kinda different different

266
00:31:25,210 --> 00:31:30,770
game but you could do that for any other
applications that are not as easy to

267
00:31:30,770 --> 00:31:36,860
manipulate the heap as it is in the
browsers and then you actually need to

268
00:31:36,860 --> 00:31:46,209
use some kind of functionality 222
research the you reliable well D the

269
00:31:46,210 --> 00:31:56,809
odds that you have with your objects so
this looks like I'm just putting some

270
00:31:56,809 --> 00:31:57,799
props on

271
00:31:57,799 --> 00:32:07,450
on each allocation functions so for
Lipsy do these are my love my love valor

272
00:32:07,450 --> 00:32:14,720
colloquial looking and reality which so
I put all of them into the slides but

273
00:32:14,720 --> 00:32:18,080
they are just

274
00:32:18,080 --> 00:32:24,529
for the sake of the completeness so I'm
using the entry and return because I'm

275
00:32:24,529 --> 00:32:30,630
entry I have the requisite size and then
returned I have actually the the memory

276
00:32:30,630 --> 00:32:39,390
pointer so I need to have two probes for
each function and this actually see

277
00:32:39,390 --> 00:32:45,090
interesting why do they have to relocate
when they do have free outlook because

278
00:32:45,090 --> 00:32:49,530
apparently reality is FreeBSD

279
00:32:49,530 --> 00:32:59,230
three bears the functionality do spy sex
which frees the source buffer when it

280
00:32:59,230 --> 00:33:07,060
faced so if you want to relocate some
buffer and the reallocation phase then

281
00:33:07,060 --> 00:33:12,780
relock will not read the source buffer
it will just take no you will not have

282
00:33:12,780 --> 00:33:21,190
no chance of memory but reality F lee
also free the source buffer which is

283
00:33:21,190 --> 00:33:31,450
interesting and for free you just for
the sake of completeness I just

284
00:33:31,450 --> 00:33:40,620
did we avoid because interest actually
use the void but the free function

285
00:33:40,620 --> 00:33:48,959
doesn't return any anything so yeah it's
basically voting see but its vote it's

286
00:33:48,960 --> 00:33:58,440
not stream so if you run for a less you
have something like this in my catalog

287
00:33:58,440 --> 00:34:05,299
in my home directory and you can type it
to look at something like this so you

288
00:34:05,299 --> 00:34:12,099
have a nice design visualization of the
44 each memory allocation this is

289
00:34:12,099 --> 00:34:17,099
actually work in progress because when I
was developing the script some problems

290
00:34:17,099 --> 00:34:25,929
arose and I'm still discussing it we've
we've TV operators but the others are

291
00:34:25,929 --> 00:34:30,940
available on my get help if you want to
check that out

292
00:34:30,940 --> 00:34:38,179
also yeah the interesting parties are
the memory allocation functions on all

293
00:34:38,179 --> 00:34:45,819
sex are fret safer not well they are
thread-safe that they need to do some

294
00:34:45,819 --> 00:34:54,339
testing to do actually know that and
last idea that I want to implement its

295
00:34:54,339 --> 00:35:01,029
heat racing so it's kinda like code
coverage but the end is different so

296
00:35:01,030 --> 00:35:04,620
incurred coverage your tracing the

297
00:35:04,620 --> 00:35:09,580
instructions that will sheet inside of
the application with the specific input

298
00:35:09,580 --> 00:35:19,150
however you do that because you want to
you want to have a small pool of funds

299
00:35:19,150 --> 00:35:22,480
for the corporation as possible

300
00:35:22,480 --> 00:35:29,170
have heat tracing I want to know which
particular functions and later which

301
00:35:29,170 --> 00:35:37,620
particular code language heat when I run
a specific input so basically you could

302
00:35:37,620 --> 00:35:46,630
do that with either if you doing that
for either I have something like Max but

303
00:35:46,630 --> 00:35:53,400
I have I had a problem with Mike service
so I implemented this r/c the transcript

304
00:35:53,400 --> 00:35:59,880
but it's not you it's not yet public its
it is very similar to the idea from the

305
00:35:59,880 --> 00:36:08,070
DVD the labs guys can referenced their
block and the idea is quite welcome unit

306
00:36:08,070 --> 00:36:16,670
there so yeah I didn't mention that so I
do I want to have this information toxic

307
00:36:16,670 --> 00:36:25,810
colonize the grass you don't need to
colorize graphic and future work more

308
00:36:25,810 --> 00:36:32,850
color more carnal work more years the
key work I would I want to see something

309
00:36:32,850 --> 00:36:39,960
like this for V 84 the eighties
JavaScript engine for crime so I would

310
00:36:39,960 --> 00:36:46,310
like to see similar tool that is for
Muslim Firefox or chrome or maybe even

311
00:36:46,310 --> 00:36:48,630
for summary

312
00:36:48,630 --> 00:36:54,110
item based DTrace consumer which would
be heightened bindings there are there

313
00:36:54,110 --> 00:37:02,520
is something like rotten Robbie bindings
for the trace but i dont coating in

314
00:37:02,520 --> 00:37:10,030
robie so I didn't use that I'm open to
ideas so you can make me if you have

315
00:37:10,030 --> 00:37:11,570
something in mind

316
00:37:11,570 --> 00:37:20,430
yeah and that would be it references are
links so you can trust

317
00:37:20,430 --> 00:37:30,370
check them out later any questions

318
00:37:30,370 --> 00:37:38,319
how safe are these copy in copy out
functions of the Colonels base because I

319
00:37:38,320 --> 00:37:42,800
mean you no one could potentially right
of malicious these terrorists to justice

320
00:37:42,800 --> 00:37:51,420
trash everything yeah that's why when
you're doing the copy out this is this

321
00:37:51,420 --> 00:37:56,360
isn't safe so you need to actually
define the problem which stands for

322
00:37:56,360 --> 00:38:02,890
pragmatic destructive to be able to do
that and this race there can be only by

323
00:38:02,890 --> 00:38:08,710
a route so that's what you should know
that you should know what you're doing

324
00:38:08,710 --> 00:38:11,900
but then again you need to explicitly
state that you want to have a

325
00:38:11,900 --> 00:38:17,990
destructive that you want to perform
destructive operation however with the

326
00:38:17,990 --> 00:38:25,310
copy in these are 100% safe because
they're just basically you're stating

327
00:38:25,310 --> 00:38:29,759
that you want to have some memory that
is the user space and I want to see

328
00:38:29,760 --> 00:38:35,760
what's that memories so so you need to
use copy in because they trace

329
00:38:35,760 --> 00:38:41,360
references that Minori it copies of
copies it into its own internal buffers

330
00:38:41,360 --> 00:38:49,960
and then it will present it to you for
example for tradesmen so its copy aren't

331
00:38:49,960 --> 00:38:59,060
is destructive copy opinions are 100%
safe

332
00:38:59,060 --> 00:39:05,770
so my question is about Mac OS Apple has
that nice feature that when you call

333
00:39:05,770 --> 00:39:13,780
Pete raised with betrays deny attach it
disables both its future Petraeus calls

334
00:39:13,780 --> 00:39:20,350
for other processes but I think it also
disables the trees is there any way

335
00:39:20,350 --> 00:39:24,830
other than replacing the kind of
extension to make it possible to enable

336
00:39:24,830 --> 00:39:36,210
yeah I have this on my to-do list but
technically you shouldn't be able to ask

337
00:39:36,210 --> 00:39:43,770
you stated you might be able to do that
but yeah I didn't have that on my to-do

338
00:39:43,770 --> 00:39:56,790
list if you do that for the some process
because I so if you would want to trace

339
00:39:56,790 --> 00:40:03,620
i2c probably wouldn't be able to buy a
PID provider because it's it is turned

340
00:40:03,620 --> 00:40:09,049
off so now you wouldn't be able to
change that rioters because you would

341
00:40:09,050 --> 00:40:16,650
also not be able to Detroit application
as far as I recall but I will double

342
00:40:16,650 --> 00:40:22,700
check that and I have that on my to-do
list thanks

343
00:40:22,700 --> 00:40:29,500
any other questions so that

