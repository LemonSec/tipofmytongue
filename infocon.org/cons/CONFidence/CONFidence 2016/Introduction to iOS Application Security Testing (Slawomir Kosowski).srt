1
00:00:04,710 --> 00:00:08,670
I think we'll make it we can start and
hello everyone my name is for Microsoft

2
00:00:08,670 --> 00:00:13,740
scheme and today i'd like to present and
say couple of words about testing iOS

3
00:00:13,740 --> 00:00:16,740
applications

4
00:00:17,860 --> 00:00:28,509
already not working nice i was working
but ok about me

5
00:00:28,510 --> 00:00:33,880
currently I'm working as web and mobile
applications esters ninety percent of my

6
00:00:33,880 --> 00:00:37,660
time doing mobile and ninety percent of
mobile time I'm doing iOS has my

7
00:00:37,660 --> 00:00:38,650
presentation

8
00:00:38,650 --> 00:00:43,059
I'm previously I've been working on
couple security projects i'll spend the

9
00:00:43,059 --> 00:00:47,379
building and different i idn't access
management systems housework and also as

10
00:00:47,379 --> 00:00:52,930
a system administrator and I'm working
an offensive security testing

11
00:00:52,930 --> 00:00:59,530
applications and ok so I'd like to know
better the audience that we have here we

12
00:00:59,530 --> 00:01:00,520
are not so many

13
00:01:00,520 --> 00:01:04,479
but do we have any iOS developers hands
up up

14
00:01:04,479 --> 00:01:07,539
one good and do develop and Swift as
well

15
00:01:07,540 --> 00:01:13,509
our objective c only objective c cool
and do we have any pentre source and I

16
00:01:13,509 --> 00:01:14,830
have that we have

17
00:01:14,830 --> 00:01:18,850
ok quite a few perfect perfect guys

18
00:01:18,850 --> 00:01:22,960
and many people related with Android
developers testers

19
00:01:23,710 --> 00:01:27,009
cool cool right

20
00:01:27,010 --> 00:01:32,260
ok so a couple of words about what we
will cover and what we won't cover the

21
00:01:32,260 --> 00:01:35,950
presentation is about application
testing so will give a brief

22
00:01:35,950 --> 00:01:42,460
introduction to iOS itself and then go
through objective-c runtime will set up

23
00:01:42,460 --> 00:01:46,630
a testing environment and we'll go
through very basic and simple life cycle

24
00:01:46,630 --> 00:01:53,619
for the dentist on giving some real life
examples and things that you want you

25
00:01:53,619 --> 00:01:57,490
won't see here is slow level staff men
the jailbreak development

26
00:01:57,490 --> 00:02:02,140
we also want cover Swift as quite you
and there are still many changes

27
00:02:02,140 --> 00:02:04,530
I think that new version is coming

28
00:02:04,530 --> 00:02:09,990
we also will focus on black box
assessments and I think it's most the

29
00:02:09,990 --> 00:02:12,569
most frequent case where we do

30
00:02:12,569 --> 00:02:16,079
dentist of application and we don't have
access to the source code and also i

31
00:02:16,080 --> 00:02:21,090
won't cover things like classical web
testing which I assume that the audience

32
00:02:21,090 --> 00:02:21,870
here

33
00:02:21,870 --> 00:02:27,630
ok so about is itself in its a mobile
operating system from apple

34
00:02:27,630 --> 00:02:33,060
it's unix-like with X a new kernel it's
in general is called source with some

35
00:02:33,060 --> 00:02:34,290
extent exceptions

36
00:02:34,290 --> 00:02:40,290
you can see up well you will see a link
and open source apple com there are a

37
00:02:40,290 --> 00:02:44,760
couple of libraries that you can look
into and the applications are written in

38
00:02:44,760 --> 00:02:49,170
mainly in objective-c and very recently
in Swift as apple introduced in the new

39
00:02:49,170 --> 00:02:55,170
language and coach is the main API
handling all the touch events from from

40
00:02:55,170 --> 00:03:02,069
the user and all the user input and due
to the system and just a couple of words

41
00:03:02,069 --> 00:03:04,079
about the security model

42
00:03:04,080 --> 00:03:08,220
what you have to understand is that iOS
is basically the entire ecosystem

43
00:03:08,220 --> 00:03:12,840
starting from hardware to software Apple
controls vast majority of the hardware

44
00:03:12,840 --> 00:03:15,989
from cpu bootloader

45
00:03:17,340 --> 00:03:23,250
TPM up to the software with its own
operating system and applications and

46
00:03:23,250 --> 00:03:27,420
though unfortunately won't have time to
go into details of those things

47
00:03:27,420 --> 00:03:32,730
just a couple of words first of all
those are security features of the

48
00:03:32,730 --> 00:03:34,349
operating system itself

49
00:03:34,349 --> 00:03:40,170
security with changing that in the CPU
itself in the in the silicon there is

50
00:03:40,170 --> 00:03:45,988
apple CA certificate and all the code
that is being front and that's being

51
00:03:45,989 --> 00:03:50,099
clouded by the by the system by the
device is being checked if it has known

52
00:03:50,099 --> 00:03:54,869
and good signature security life is
basically a TPM for mobile devices

53
00:03:55,650 --> 00:04:02,790
it's it's included in all of devices to
adopt after our iphone 5s

54
00:04:02,790 --> 00:04:08,160
I believe encryption and the protection
and starting from iOS 8

55
00:04:08,160 --> 00:04:11,310
all data on the device is encrypted

56
00:04:11,310 --> 00:04:15,239
even though you don't have passcode and
the data is encrypted obviously prevents

57
00:04:15,239 --> 00:04:20,760
only it protects only against offline
attacks but all data is encrypted and in

58
00:04:20,760 --> 00:04:24,599
I devices there are no SD cards so we
don't have problem here

59
00:04:24,600 --> 00:04:28,650
trusted code execution is a bit related
to secure boot chain meaning that only

60
00:04:28,650 --> 00:04:34,109
able sign called can run on devices and
also all third-party applications have

61
00:04:34,110 --> 00:04:37,260
to be signed by by apple

62
00:04:38,340 --> 00:04:42,510
it's it's a bit of the shortcut thinking
because there are some exceptions but in

63
00:04:42,510 --> 00:04:44,190
general we can we can assume so

64
00:04:44,190 --> 00:04:48,479
and network security also worth
mentioning is that starting from iOS 9

65
00:04:48,479 --> 00:04:51,330
on the TLS is a connection are allow
that

66
00:04:51,330 --> 00:04:57,030
if you want to connect a resource over
HTTP it must be whitelisted so

67
00:04:57,539 --> 00:05:04,650
ok and the key chain was kitchen kitchen
is also a security feature is basically

68
00:05:04,650 --> 00:05:09,210
a sequel I database which stars also all
sensitive information like passwords

69
00:05:09,210 --> 00:05:18,750
stock and tokens and applications can
access the items in keychain and only

70
00:05:18,750 --> 00:05:21,150
that they can read the items in the
kitchen

71
00:05:21,150 --> 00:05:26,010
only for the for the same a keychain
access group so 2 applications cancer

72
00:05:26,010 --> 00:05:29,039
items but they must belong to the same
access group

73
00:05:29,040 --> 00:05:33,510
and the war mentioning obviously kitchen
can be can be read on the jailbroken

74
00:05:33,510 --> 00:05:39,060
device so it can be fully dumped with
reading my tools applications and books

75
00:05:39,060 --> 00:05:42,510
so it's compared to android and hear it

76
00:05:42,510 --> 00:05:46,740
it looks a bit different so we have only
two users on the system you have a

77
00:05:46,740 --> 00:05:50,910
mobile android user and all the world
third-party applications they run as a

78
00:05:50,910 --> 00:05:56,400
mobile user and they are in some book
which means that they can access only

79
00:05:56,400 --> 00:06:01,320
their own data they can share explicitly
data with other applications and also

80
00:06:01,320 --> 00:06:07,320
compared to android wear the IPC model
is very very broad and here I pieces are

81
00:06:07,320 --> 00:06:11,760
very very limited again we hope we don't
have time to discuss them but in short

82
00:06:11,760 --> 00:06:20,219
and only pieces are only by our of
hundred handlers and and baseboard good

83
00:06:20,220 --> 00:06:21,870
now

84
00:06:21,870 --> 00:06:26,280
objective-c a couple of words of
objective-c it's a it's an objective

85
00:06:26,280 --> 00:06:27,359
language based on

86
00:06:27,360 --> 00:06:31,230
it's basically a superset of C and which
means that you can use objective c

87
00:06:31,230 --> 00:06:36,360
compiler to compile C applications and
you can embed it C code in your in your

88
00:06:36,360 --> 00:06:41,820
applications as well and it is a couple
of interesting features and we'll see

89
00:06:41,820 --> 00:06:45,090
we'll see a couple of details on on an
example

90
00:06:45,090 --> 00:06:50,489
so one of the features it is infix
notation so you can see that

91
00:06:51,090 --> 00:06:56,039
first of all use square brackets and
when you want to call a method on a

92
00:06:56,040 --> 00:06:59,520
particular object you have object that
method and then after a call you have

93
00:06:59,520 --> 00:07:00,510
arguments

94
00:07:00,510 --> 00:07:05,250
so if you want to initialize instance
offer and a string class with string

95
00:07:05,250 --> 00:07:09,420
confidence 2016 you call you pass
actually a method street with string

96
00:07:09,420 --> 00:07:13,260
with a parameter this is actually a
string with that sign

97
00:07:13,260 --> 00:07:20,340
simple as that in objective c you have
two methods you have class instance

98
00:07:20,340 --> 00:07:25,169
methods and they already know that this
is the interface interface

99
00:07:26,100 --> 00:07:31,980
of their of the class and you have two
types of methods one which is a class

100
00:07:31,980 --> 00:07:36,510
method and you can see the pass on here
and one which is an instance method and

101
00:07:36,510 --> 00:07:37,770
you can see the -

102
00:07:37,770 --> 00:07:42,299
and the difference is simple you can
call the class method on its own

103
00:07:42,300 --> 00:07:47,070
whereas in order to call air an instance
method you first have an itch

104
00:07:47,070 --> 00:07:51,450
initializing out an object actually
allocate more initialized and then you

105
00:07:51,450 --> 00:07:54,510
can call instance method on the
particular instance of an object

106
00:07:55,140 --> 00:07:58,169
this will be useful later on during our
application analysis

107
00:07:58,170 --> 00:08:02,730
ok so it's interesting what happens in
the hood

108
00:08:02,730 --> 00:08:07,110
mm in objective-c because you don't
actually call a method in objective-c a

109
00:08:07,110 --> 00:08:10,170
actually passed you passed a message

110
00:08:10,170 --> 00:08:15,300
the method and what happens on early
food so in objective-c runtime you have

111
00:08:15,300 --> 00:08:19,380
a function called object is to match
this message sent and terrorists an

112
00:08:19,380 --> 00:08:24,120
example for from John John skis book and
when you basically do something like

113
00:08:24,120 --> 00:08:28,590
this with with Objective C so you have
say something method on say something

114
00:08:28,590 --> 00:08:34,919
object located in July's you call you
actually pass the net force a width

115
00:08:34,919 --> 00:08:37,770
apart there hello world and then you
release the object

116
00:08:37,770 --> 00:08:41,400
now what happens under the hood it's
actually gets translated into pure see

117
00:08:41,400 --> 00:08:46,530
calls and you can hear see and mr. chain
or more of gyp the objective c message

118
00:08:46,530 --> 00:08:51,240
sent functions and finally and the gap
on the object is to get class say

119
00:08:51,240 --> 00:08:52,290
something

120
00:08:52,290 --> 00:08:56,790
okay and then we have something called
NS sector from string

121
00:08:56,790 --> 00:09:00,630
so basically objective-c message sent
takes two parameters versus the pointer

122
00:09:00,630 --> 00:09:04,410
to an instance of an object on which we
want to pass the method and second is

123
00:09:04,410 --> 00:09:08,790
selector selector is basically a c
string with the name of a method

124
00:09:08,790 --> 00:09:14,880
registered in their own time and so then
you might think how the call graph looks

125
00:09:14,880 --> 00:09:16,860
looks like and it looks like this

126
00:09:16,860 --> 00:09:22,230
so are those are basically this is the
almost the same faction object to see

127
00:09:22,230 --> 00:09:25,080
message sent with small variation

128
00:09:25,080 --> 00:09:29,490
in class from which inherited returning
current structure and and normal

129
00:09:29,490 --> 00:09:33,030
function so we don't have much

130
00:09:33,750 --> 00:09:37,140
we don't have much information from
what's going on the application just

131
00:09:37,140 --> 00:09:40,860
based on the call graph it will be very
useful to see what happens when we

132
00:09:40,860 --> 00:09:48,180
actually went this objective c message
sent function is it's cold and you to

133
00:09:48,180 --> 00:09:48,599
this

134
00:09:48,600 --> 00:09:52,080
due to this property of the language
that have we use this objective c

135
00:09:52,080 --> 00:09:57,420
message a message sent object is a
message sent function and we their

136
00:09:57,420 --> 00:10:02,550
implementation of the method is a result
i'm dynamically which means that we can

137
00:10:02,550 --> 00:10:08,339
change in American implementation during
the run time and this feature is called

138
00:10:08,340 --> 00:10:12,060
methods whistling and it's actually not
the back it's a feature and we'll have

139
00:10:12,060 --> 00:10:17,069
we use it in testing and i'll show you
how i also included some links i highly

140
00:10:17,070 --> 00:10:21,060
recommend because the runtime itself is
very interesting it's written C and

141
00:10:21,060 --> 00:10:21,780
assembly

142
00:10:21,780 --> 00:10:26,790
it obviously must be very efficient and
i recommend the game - it's more

143
00:10:26,790 --> 00:10:33,930
ok so we're very very quick introduction
to the arm to the system and to the

144
00:10:33,930 --> 00:10:39,030
programming language that's used will go
to the actual meat of this presentation

145
00:10:39,030 --> 00:10:40,980
so application analysis

146
00:10:40,980 --> 00:10:46,650
ok so first of all what we want to lose
you would need

147
00:10:46,650 --> 00:10:51,060
so for starting binary analysis of
classical idea pro is very useful

148
00:10:51,060 --> 00:10:55,439
however hopper is also nice you can get
quite far with hopper

149
00:10:55,440 --> 00:11:00,660
it's a disassembler and the compiler
which is very interesting and the prices

150
00:11:00,660 --> 00:11:01,800
are comparable

151
00:11:01,800 --> 00:11:05,969
I mean proper cause something like a
hundred dollars or make yours I think

152
00:11:05,970 --> 00:11:12,090
we're either pro is itself is I think
$1,500 process x-rays for the compiler

153
00:11:12,090 --> 00:11:19,890
and also when you buy x rays you have to
buy separately for 32 and 64 bits and

154
00:11:19,890 --> 00:11:25,620
hopper has has all of this in in in one
license at constant visit tool that will

155
00:11:25,620 --> 00:11:31,140
allow us to to as see what methods are
in the binary what what methods are used

156
00:11:31,140 --> 00:11:35,970
and how interface far interface files
look like from vary from the binary

157
00:11:36,800 --> 00:11:42,380
auto will give us some information about
the binary itself and strings all know

158
00:11:42,380 --> 00:11:44,570
from from unix systems

159
00:11:44,570 --> 00:11:50,750
ok in again in iOS compared to android
we have we rely on runtime on your

160
00:11:50,750 --> 00:11:55,700
manipulation which means that we do some
static analysis but mainly with play

161
00:11:55,700 --> 00:11:59,269
with interact directly with the
application and we'll see how in a

162
00:11:59,269 --> 00:12:00,170
minute

163
00:12:00,170 --> 00:12:06,050
and what those who would need out there
are two widely used tools one is secret

164
00:12:06,050 --> 00:12:10,550
it basically injects into the running
process into the running application and

165
00:12:10,550 --> 00:12:13,939
it gives you an interactive console and
you can interact with the application

166
00:12:13,940 --> 00:12:17,570
from the console you can call them that
you can actually cut all of us messages

167
00:12:17,570 --> 00:12:22,700
to methods with this comment line and
free does something similar however and

168
00:12:22,700 --> 00:12:26,450
completely different way and the main
difference for us is that freezer can

169
00:12:26,450 --> 00:12:28,940
inject to the hook into a starting
process

170
00:12:28,940 --> 00:12:32,690
so let's say that the application using
labor a detection and closes immediately

171
00:12:33,380 --> 00:12:37,370
you don't have time to hook into process
with secret you can do it with free that

172
00:12:37,370 --> 00:12:44,180
very useful very nice to documentation
is a bit a bit lacking and debugger

173
00:12:44,810 --> 00:12:49,399
obviously the burger is very important
so some time ago Apple move from DC to

174
00:12:49,399 --> 00:12:55,730
lv m and subsequently from GDB to LD be
as a debugger and GDP is fully supported

175
00:12:55,730 --> 00:13:02,060
on the iOS 7 for those people who are
not into iOS now we have conversion is I

176
00:13:02,060 --> 00:13:08,029
think not . free . something so we have
already two major reasons that are

177
00:13:08,029 --> 00:13:11,510
without gb and from iOS 8

178
00:13:11,510 --> 00:13:17,060
we have LD be as a default debugger
which is working and however some some

179
00:13:17,060 --> 00:13:20,329
pictures are still missing ldb and it's
not

180
00:13:20,329 --> 00:13:24,020
well it's fully functional but some
useful stuff is missing for us

181
00:13:24,020 --> 00:13:30,140
ok so you want test application what you
actually need

182
00:13:30,140 --> 00:13:35,180
unfortunately no simulator as in case of
android so you have to have filled

183
00:13:35,180 --> 00:13:37,030
device to do meaningful testing

184
00:13:37,030 --> 00:13:42,730
i recommend getting a bit older maybe
device with a bit older iOS because you

185
00:13:42,730 --> 00:13:49,540
have still a bit more tools than four
muir iOS's and but make sure that the

186
00:13:49,540 --> 00:13:52,990
IRS that you're using has available
jailbreak so that you can actually

187
00:13:52,990 --> 00:13:57,070
jailbreak it because we first think
about Drake doesn't quite make sense and

188
00:13:57,070 --> 00:14:01,510
if you want to test any legacy
applications you need another pair of

189
00:14:01,510 --> 00:14:07,840
devices and my my recommendation is to
use two devices / iOS version of a

190
00:14:07,840 --> 00:14:11,860
broken non-jailbroken because it happens
that developers are giving you the

191
00:14:11,860 --> 00:14:16,120
application to be tested you launch it
on jailbroken device and doesn't launch

192
00:14:16,120 --> 00:14:17,560
you see anything

193
00:14:17,560 --> 00:14:20,650
well it might be some tricky jai bri
detection function what's happening so

194
00:14:20,650 --> 00:14:24,699
we start debugging the button bugging
and but when you check it on laundry

195
00:14:24,700 --> 00:14:27,700
broken device you see that the
application is actually not working

196
00:14:28,270 --> 00:14:35,890
so yeah and it can save you some time
and OS X and X code is very use force

197
00:14:35,890 --> 00:14:40,569
you don't have to have mac to test iOS
part it's useful to compile your own

198
00:14:40,570 --> 00:14:46,330
code and and check also and check also
maybe to some proof of concept and

199
00:14:46,330 --> 00:14:47,050
attacks

200
00:14:47,050 --> 00:14:52,780
ok and and and all

201
00:14:53,350 --> 00:14:57,640
if you basically jailbreaking device
requires a exploiting it

202
00:14:57,640 --> 00:15:02,020
and you have ready-made jailbreaks for
some iOS versions but obviously not for

203
00:15:02,020 --> 00:15:05,650
all iOS versions because as soon as
jailbreak is released a couple patches

204
00:15:05,650 --> 00:15:12,040
the vulnerabilities and and if you fail
to jailbreak the device you can restore

205
00:15:12,040 --> 00:15:15,760
it with itunes but also upgrade to the
US version

206
00:15:16,360 --> 00:15:19,570
you can't restart to the previous
version which is obviously a problem

207
00:15:19,570 --> 00:15:23,920
because then it comes to bracket there
is a handy tool called semi restore

208
00:15:23,920 --> 00:15:28,360
which you can use and it happened to me
that jailbreak failed in a in the middle

209
00:15:29,560 --> 00:15:34,989
and then I couldn't launch the
application and and then the stories

210
00:15:34,990 --> 00:15:40,360
handy and save me 11 ipod and again no
possibility to downgrade iOS version so

211
00:15:40,360 --> 00:15:45,460
again if you also buy a device and also
especially used one make sure that it

212
00:15:45,460 --> 00:15:48,460
has iOS with currently available
jailbreak

213
00:15:49,930 --> 00:15:54,760
ok I jailbreaking as such in there are
already Drake's release is very

214
00:15:54,760 --> 00:15:58,810
straightforward usual you just read next
next next next done it reboots couple of

215
00:15:58,810 --> 00:16:01,599
things and then it's basically all

216
00:16:01,600 --> 00:16:06,790
and what jailbreaking does first of all
it doesn't break the application sandbox

217
00:16:06,790 --> 00:16:12,339
it allows to run unsigned code for party
cold and it also gives you shell access

218
00:16:12,339 --> 00:16:17,680
to the device because normally there is
no termina or such thing on iOS and also

219
00:16:17,680 --> 00:16:22,510
it will install the city application
store from which you get and other

220
00:16:22,510 --> 00:16:27,160
useful stuff like openness age or
aptitude and this is how it looks like

221
00:16:27,160 --> 00:16:30,730
this is a screen shot forum of the
street city application first thing you

222
00:16:30,730 --> 00:16:35,230
do is you install aptitude and you
install openssh you have those two users

223
00:16:35,230 --> 00:16:39,460
by default on is we have fruit and
mobile and default password to SS ages

224
00:16:39,460 --> 00:16:45,700
alpine and I list that the some tools
that i usually installed directly on

225
00:16:45,700 --> 00:16:48,910
jailbroken device that then are useful
to for testing

226
00:16:48,910 --> 00:16:54,160
ok free . i won't spend time on this
very straight forward to go to that

227
00:16:54,160 --> 00:16:58,660
website you install one part on your
workstation and the second part on your

228
00:16:58,660 --> 00:17:01,420
iOS device an agent very straightforward

229
00:17:01,420 --> 00:17:09,760
nothing fancy there now we have tools
and we are we're not focusing on the

230
00:17:09,760 --> 00:17:13,900
application and on Android as some of
you know the applications are packaged

231
00:17:13,900 --> 00:17:20,679
in apk files and in iOS this is IPA file
IP is simply a zip archive just rename

232
00:17:20,679 --> 00:17:24,670
it or you unzip it and you have all the
bundle you have application binary and

233
00:17:24,670 --> 00:17:29,530
all the static data is required for
application so graphic certificates any

234
00:17:29,530 --> 00:17:33,760
other code and i always use this Mack OH
binary format

235
00:17:34,700 --> 00:17:39,860
and usually binaries contain when you
want you and you see a binary usually

236
00:17:39,860 --> 00:17:45,530
contains - lets a sub binaries and this
is called fat binary for different

237
00:17:45,530 --> 00:17:46,639
architectures

238
00:17:46,640 --> 00:17:51,860
so the way up the the device can install
can choose the proper binary for its the

239
00:17:51,860 --> 00:17:59,240
cpu ok and now we have we have our
device jailbroken

240
00:17:59,240 --> 00:18:04,460
we have installed our tools from the
list that I shown and now we have a tool

241
00:18:04,460 --> 00:18:08,960
called install a pump when you use -
well at least you all the third party

242
00:18:08,960 --> 00:18:14,600
applications you use the eye on the
application this QR code reader and you

243
00:18:14,600 --> 00:18:18,020
can see that here it gives you free
folders and the applications are

244
00:18:18,020 --> 00:18:22,190
installed into the into the unique
folders will bundle ID so it's a

245
00:18:22,190 --> 00:18:25,400
convenient way to check where the
application was already with or also

246
00:18:25,400 --> 00:18:26,570
actually installed

247
00:18:26,570 --> 00:18:31,280
ok so how will test

248
00:18:31,280 --> 00:18:35,360
well usual test approaches like this
first you get the IPA file from

249
00:18:35,360 --> 00:18:38,659
developers from clients from the store
as well from the apple app store

250
00:18:39,440 --> 00:18:43,400
depending on you and then the
application might actually prevent you

251
00:18:43,400 --> 00:18:47,180
running on jailbroken device because
well they break

252
00:18:47,180 --> 00:18:51,170
maple some risk for the end user if he
doesn't know what it really means and

253
00:18:51,170 --> 00:18:52,400
what it really does

254
00:18:52,400 --> 00:18:56,030
so some especially financial
applications they prevent running on

255
00:18:56,030 --> 00:18:57,230
jailbroken device

256
00:18:57,230 --> 00:19:02,150
so we have to bypass it because you have
to actually analyze the application and

257
00:19:02,150 --> 00:19:04,610
it's not really a vulnerability himself

258
00:19:04,610 --> 00:19:08,179
if you can bypass the break detection
it's not enough on our ability but you

259
00:19:08,180 --> 00:19:12,560
needed for testing right then the
application is if it's not a standalone

260
00:19:12,560 --> 00:19:16,909
application and then it will probably
contact with a backhand server and it

261
00:19:16,910 --> 00:19:22,580
usually does it over https good and and
the application may actually use

262
00:19:22,580 --> 00:19:28,580
certificate pinning certificate pinning
is actually prevention against the road

263
00:19:28,580 --> 00:19:36,470
CA and the application has this server
certificate bundled into it and check if

264
00:19:36,470 --> 00:19:41,390
it if it will fit is correct and so even
if you install your bed profile on the

265
00:19:41,390 --> 00:19:44,570
device and still the application one
trusted

266
00:19:45,770 --> 00:19:47,270
so again you have to bypass this

267
00:19:47,270 --> 00:19:51,440
and then you expect the traffic use you
do usual web start this

268
00:19:51,440 --> 00:19:57,110
nothing really consider and then my open
most interesting part is this one abuse

269
00:19:57,110 --> 00:19:58,490
application logic

270
00:19:58,490 --> 00:20:03,320
I want a manipulation and you can also
remember forensics the attack vectors

271
00:20:03,320 --> 00:20:06,620
are now very limited and some other
minor things

272
00:20:06,620 --> 00:20:10,699
checking local storage client-side box
and other minor checks

273
00:20:10,700 --> 00:20:20,750
ok and now the binary encryption so
actually apple and this applies only to

274
00:20:20,750 --> 00:20:24,860
the binary star to download from apple
app store because apple app store they

275
00:20:24,860 --> 00:20:31,340
they use the parade erm which means that
the binary something are encrypted now

276
00:20:31,340 --> 00:20:35,000
obviously if they run on device they
must be somehow decrypted so we can get

277
00:20:35,000 --> 00:20:38,240
them but if you download the IPA from
app store

278
00:20:38,780 --> 00:20:43,820
you put the binary into hopper idea pro
whatever you'll get garbage because it's

279
00:20:43,820 --> 00:20:44,270
encrypted

280
00:20:44,270 --> 00:20:50,420
now there are some tools that do it for
you just put their name of the two which

281
00:20:50,420 --> 00:20:52,790
is called clutch the binary and equips
it

282
00:20:52,790 --> 00:20:57,080
alternatively you can use the debugger
and i recommend doing on your own

283
00:20:57,080 --> 00:21:00,710
I won't go into details because it's
probably documented on the Internet

284
00:21:00,710 --> 00:21:06,260
no point in repeating it here ok so we
have unencrypted binary and how we can

285
00:21:06,260 --> 00:21:14,150
start analyzing it and the binary is on
iOS have free security features set to

286
00:21:14,150 --> 00:21:16,520
by the compiler and you're in compiling
time

287
00:21:16,520 --> 00:21:21,110
automatic reference counting counting it
counts the number of locations and the

288
00:21:21,110 --> 00:21:25,879
allocations of objects to prevent more
corruptions start canary to prevent

289
00:21:25,880 --> 00:21:29,390
buffer overflows and pi which is
position independent execute execute

290
00:21:29,390 --> 00:21:35,390
table and this is for a sol a sol are
for the binary you can check those

291
00:21:35,390 --> 00:21:36,110
features

292
00:21:36,110 --> 00:21:40,669
by the way this is how you do on the IPA
file . vulnerable iOS application will

293
00:21:40,670 --> 00:21:44,750
use it here you can download it from the
internet and you can train your skills

294
00:21:44,750 --> 00:21:50,270
on it basically and you go to the
director and the news this auto and it

295
00:21:50,270 --> 00:21:53,270
gives you actually this is this part
binary

296
00:21:53,270 --> 00:21:57,850
so you can see that you have one output
for architecture rb7 once if you

297
00:21:57,850 --> 00:22:03,459
and second one forearm 64 and here is
the Frog pie so all is good we have pie

298
00:22:03,460 --> 00:22:09,160
enabled find you know similar without
two words that you can see we have

299
00:22:09,160 --> 00:22:14,919
32-bit addresses 64-bit addresses with
likes it up everything is good and I

300
00:22:14,919 --> 00:22:18,130
think really complicated similarity with
automatic reference counting

301
00:22:18,730 --> 00:22:26,320
I just lifted for for brevity but we
have our binary binary features to the

302
00:22:26,320 --> 00:22:30,668
checked so now we can set up the
environment again

303
00:22:30,669 --> 00:22:35,320
nothing for the fancy lunch burb in the
settings Wi-Fi you go to the Wi-Fi

304
00:22:35,320 --> 00:22:40,570
settings you put your burp and one
remark on babe just remember to listen

305
00:22:40,570 --> 00:22:44,289
on all their faces because you you
listen on the Wi-Fi obviously two

306
00:22:44,289 --> 00:22:46,539
devices are on the same Wi-Fi network

307
00:22:46,539 --> 00:22:50,650
now we have everything that stopped

308
00:22:50,650 --> 00:22:54,340
we want to launch the application and it
happens that the application doesn't

309
00:22:54,340 --> 00:22:58,090
want to lunch because there is a
jailbreak detection before we can buy

310
00:22:58,090 --> 00:23:00,789
passes let's talk about how it's being
detected

311
00:23:00,789 --> 00:23:04,360
usually that through the checks are
really trivial so first of all checks

312
00:23:04,360 --> 00:23:08,110
for existence of additional files that
are installed during the day breaking

313
00:23:08,110 --> 00:23:09,879
which is like -

314
00:23:09,880 --> 00:23:15,909
and it also can check for api calls for
King is forbidden Andre broken degree on

315
00:23:15,909 --> 00:23:21,460
the non jailbroken devices system
normally would yield you the currently

316
00:23:21,460 --> 00:23:27,460
available shell and also city I URL
handler it is this third party app store

317
00:23:27,460 --> 00:23:30,070
and it checks if they're your skin is
register

318
00:23:30,070 --> 00:23:33,370
I also include to an article for
reference want to read more

319
00:23:33,370 --> 00:23:36,489
ok now we want to bypass it how we can
do it

320
00:23:37,270 --> 00:23:42,789
obviously lazy people they invented the
tool for it to make it automatic and

321
00:23:42,789 --> 00:23:46,658
this is called ex-con you can download
from cydia but it doesn't work always

322
00:23:46,659 --> 00:23:53,620
and then you need to do it manually and
i usually do using one of those tools

323
00:23:53,620 --> 00:23:59,620
which we already discussed and now we
see how we can get it to how we can do

324
00:23:59,620 --> 00:24:02,949
it in practice on the example of this
tumblr bio is application

325
00:24:03,520 --> 00:24:09,600
first of all what we have to do we use
the Aleppo is the common to only make

326
00:24:09,600 --> 00:24:14,399
Finn binary from the binary so want to
extract only one architecture and then

327
00:24:14,400 --> 00:24:18,840
we use cause them to and it's tipped and
we usually check for strings like

328
00:24:18,840 --> 00:24:23,820
jailbreak detection route check things
like this and developers are pretty good

329
00:24:23,820 --> 00:24:27,960
on giving us hints or where to look at
so we can see that it has to class

330
00:24:27,960 --> 00:24:31,919
methods app is cracked devices
jailbroken they divide they return

331
00:24:31,919 --> 00:24:32,730
bullying

332
00:24:32,730 --> 00:24:39,750
perfect we launched our binary inhale /
on left hand side of the hopper you have

333
00:24:39,750 --> 00:24:44,460
the search pane and you start taking a
break right so you can see that it but

334
00:24:44,460 --> 00:24:48,510
it turns out that there are two classes
as a fun and I power CJ protection bc

335
00:24:48,510 --> 00:24:54,390
you can also they compare the class it
also gives you their return type and so

336
00:24:54,390 --> 00:24:58,650
we can see that there are couple of
methods use their ok good so we know now

337
00:24:58,650 --> 00:25:02,429
the probably some of those methods are
used to date into that detect the

338
00:25:02,429 --> 00:25:04,260
jailbreak

339
00:25:04,260 --> 00:25:08,100
I still have some time

340
00:25:08,100 --> 00:25:14,039
good and so in in this application you
have basically two buttons one for

341
00:25:14,039 --> 00:25:19,230
jailbreak last one to break this to they
and employ two different methods so try

342
00:25:19,230 --> 00:25:23,070
to bypass this when you click it
obviously says that the advice is

343
00:25:23,070 --> 00:25:25,200
jailbroken want to bypass this

344
00:25:25,200 --> 00:25:31,350
so we launched the secret that p and
this is a process ID and remember that

345
00:25:31,350 --> 00:25:33,750
this SF anti-piracy is jailbroken

346
00:25:33,750 --> 00:25:37,860
this is class method we can call it on
its own right so we do it here and

347
00:25:37,860 --> 00:25:40,260
returns through device is very broken
right

348
00:25:40,260 --> 00:25:48,720
and now we want to call the second
method that this drug detection bc is

349
00:25:48,720 --> 00:25:53,220
very broken right so this is this one
and we can see this - so this is an

350
00:25:53,220 --> 00:25:58,679
instance method and now inside cup you
have function called choose and choose

351
00:25:58,679 --> 00:26:02,520
will go for the heap and it will look
for signature of this particular class

352
00:26:02,520 --> 00:26:08,070
and it will return you an array of an
instances of this class so you could

353
00:26:08,070 --> 00:26:13,080
choose and there is empty are a no
instances and actually this is because

354
00:26:13,080 --> 00:26:15,780
we haven't tapped the second button yet

355
00:26:15,780 --> 00:26:17,680
the second test after we did it

356
00:26:17,680 --> 00:26:22,150
we do another choose the object was
created we have the address and then we

357
00:26:22,150 --> 00:26:23,560
can call it is jailbroken

358
00:26:23,560 --> 00:26:26,500
so this is the main difference between
an instance method in class method in

359
00:26:26,500 --> 00:26:27,490
instance method

360
00:26:27,490 --> 00:26:30,640
you need to have a particular instance
already created in the memory

361
00:26:31,570 --> 00:26:37,000
good now we want to bypass this right so
we see that probably if this returns

362
00:26:37,000 --> 00:26:41,560
through our fall so it's pretty trivial
to patch it and to return to turn in

363
00:26:41,560 --> 00:26:44,500
those case force and the device will be
broken

364
00:26:44,500 --> 00:26:49,240
indeed you can do it very simply with
secret you just used a prototype is

365
00:26:49,240 --> 00:26:52,660
jailbroken and you replace the
implementation of the function

366
00:26:52,660 --> 00:26:57,370
this is actually pure JavaScript so you
just put function return false

367
00:26:57,370 --> 00:27:01,000
you call a method this returns false and
device not a broken

368
00:27:01,000 --> 00:27:04,930
this is very trivial example but you'll
see that in real life developers they

369
00:27:04,930 --> 00:27:08,290
didn't don't do much more than this very
often

370
00:27:08,800 --> 00:27:12,550
ok a second tool and to be honest free
dies

371
00:27:12,550 --> 00:27:20,050
my favorite tool and I'm a big big fan
of dynamic instrumentation and free

372
00:27:20,050 --> 00:27:24,700
basically requires you two things one of
the first thing is you start on on your

373
00:27:24,700 --> 00:27:29,680
workstation second think you install
install it on your idevice use USB

374
00:27:29,680 --> 00:27:34,870
connection not by five and we'll use a
tool called for your praise & what r

375
00:27:34,870 --> 00:27:40,090
your praise that is basically you launch
an application and you pass an argument

376
00:27:40,090 --> 00:27:44,230
the name of the method that you want to
trace this is very very protection bc is

377
00:27:44,230 --> 00:27:51,430
very broken and this will create and and
I Oh with callback functions on enter on

378
00:27:51,430 --> 00:27:56,590
and the only again this is playing
javascript and this will enable you to

379
00:27:56,590 --> 00:28:00,909
see what arguments were passed to the
function and what values were returned

380
00:28:00,910 --> 00:28:01,660
from it

381
00:28:01,660 --> 00:28:08,140
so will basically replace return value
and change it to 0 with all three plays

382
00:28:08,140 --> 00:28:10,480
0 and we'll see what happens

383
00:28:10,480 --> 00:28:15,430
we launch the application this you do
all your work station and it says

384
00:28:15,430 --> 00:28:19,960
instrumenting functions or good started
creating one function it detected it all

385
00:28:19,960 --> 00:28:20,650
good

386
00:28:20,650 --> 00:28:26,440
and then you also see time we click on
the button to jailbreak and it was some

387
00:28:26,440 --> 00:28:29,570
somewhere after seven seconds or after
launching the application

388
00:28:29,570 --> 00:28:34,370
and block us on the output ordinary
returns is your one changing the return

389
00:28:34,370 --> 00:28:42,169
value to 0 0 and indeed it work - to
bypass the library detection and and you

390
00:28:42,170 --> 00:28:46,130
also can see that was quick for a second
time obviously it also work this

391
00:28:46,130 --> 00:28:50,330
this tool is also extremely good if you
want to press what's happening in the

392
00:28:50,330 --> 00:28:54,620
application sometimes you have
applications that use application and

393
00:28:54,620 --> 00:28:58,820
that tried to scramble things and
quipped things and this is very very

394
00:28:58,820 --> 00:29:01,939
useful when you trace the methods

395
00:29:01,940 --> 00:29:05,840
not necessarily for debris detection but
to see what happens in the application

396
00:29:05,840 --> 00:29:09,919
and you can do during some cool stuff if
you if you are lucky to get an

397
00:29:09,920 --> 00:29:12,800
application that and the best things
like this

398
00:29:12,800 --> 00:29:18,590
good so we bypass the driver detection
which by the way is not vulnerability

399
00:29:18,590 --> 00:29:19,189
itself

400
00:29:19,190 --> 00:29:23,480
at least I don't think that this is just
like crew detection on Android but still

401
00:29:23,480 --> 00:29:27,950
you have to do it to test meaningfully
then you test for certificate pinning

402
00:29:27,950 --> 00:29:34,790
and there is also a tool called SL kill
switch which tries to automatically

403
00:29:34,790 --> 00:29:39,170
disabled certificate pinning and first
thing you do is you make sure that this

404
00:29:39,170 --> 00:29:42,650
too is not enabled and you don't have
your butt profile installed on the

405
00:29:42,650 --> 00:29:43,790
device

406
00:29:43,790 --> 00:29:47,149
if it's not installed and you can see
the traffic in birth it means that the

407
00:29:47,150 --> 00:29:50,030
application doesn't do certificate
validation at all

408
00:29:50,030 --> 00:29:55,040
so basically like if it if there was an
HTTPS then you install the best profile

409
00:29:55,040 --> 00:29:59,510
and if you can see the traffic that it
means that there is an opening so it's

410
00:29:59,510 --> 00:30:00,920
less serious but still

411
00:30:00,920 --> 00:30:06,230
then if you enable for instance slq
switch and you can see the traffic from

412
00:30:06,230 --> 00:30:09,230
there on it means that the cervical
spinning and all is good

413
00:30:09,830 --> 00:30:13,100
however if you still don't see the
traffic it means that we have a problem

414
00:30:13,100 --> 00:30:18,050
and you have to buy posit and again this
is not a vulnerability but you need to

415
00:30:18,050 --> 00:30:22,190
be able to inject into the traffic to
test a test for box like in the web

416
00:30:22,190 --> 00:30:27,800
applications and then you have to do it
manually and there are there are there

417
00:30:27,800 --> 00:30:31,649
is very good to reference in iOS
application security book

418
00:30:31,650 --> 00:30:37,890
and on the implementation with with iOS
API you basically also look for three or

419
00:30:37,890 --> 00:30:41,430
four strings in the binary like x509 or
search

420
00:30:41,430 --> 00:30:44,700
you also look for api calls and then try
to see it on your own

421
00:30:45,510 --> 00:30:49,140
recently also developers started to use
openssl directly

422
00:30:50,480 --> 00:30:55,130
and using openssl has one more advantage
that you have to turn of your product

423
00:30:55,130 --> 00:31:00,440
traffic on your own because openssl
ignores your proxy settings in the

424
00:31:00,440 --> 00:31:08,030
device right now more tedious part and a
bit less interesting but still you can

425
00:31:08,030 --> 00:31:12,470
have some good findings herb you're
checking for local storage and

426
00:31:12,470 --> 00:31:16,610
applications heavily used sequel
database to store data and you can often

427
00:31:16,610 --> 00:31:21,678
find there are some configuration
information personal details

428
00:31:22,220 --> 00:31:25,640
financial information so it's very good
to look into it

429
00:31:25,640 --> 00:31:29,150
you have also something called police
tis property list

430
00:31:29,150 --> 00:31:34,370
it's apple format for binary xml files
you have a tool to look into them and

431
00:31:34,370 --> 00:31:40,668
there are also sometimes interesting
things start application screenshots

432
00:31:40,669 --> 00:31:44,690
webview cashing those are all minor and
more tedious things pretty

433
00:31:44,690 --> 00:31:49,370
straightforward and my favorite report
approach personal is this forensic one

434
00:31:49,370 --> 00:31:55,219
and the basically what you do is you do
LS on the root directory with full time

435
00:31:55,220 --> 00:31:59,900
then you play with the application
changed a bit interactive it and then

436
00:31:59,900 --> 00:32:03,350
you do it once again and you do differ
on both and you see what the and you

437
00:32:03,350 --> 00:32:07,969
look what what has changed like this you
can see if there were any that there was

438
00:32:07,970 --> 00:32:11,059
an internal written to the local storage
if there was an integrated into the

439
00:32:11,059 --> 00:32:12,830
keychain things like that

440
00:32:12,830 --> 00:32:20,750
also one hint databases use something
called right ahead log which contains

441
00:32:20,750 --> 00:32:24,770
uncommitted transactions which means
that something might not have been yet

442
00:32:24,770 --> 00:32:27,950
committed to the database itself but
it's been waiting to write a headlock

443
00:32:27,950 --> 00:32:31,040
and there there might be also some some
useful stuff

444
00:32:31,790 --> 00:32:39,860
ok - tools that are very briefly mention
is one is I Explorer you can use it on

445
00:32:39,860 --> 00:32:41,479
non jailbroken device as well

446
00:32:41,480 --> 00:32:45,710
now with some mutations and you can look
into the content of

447
00:32:46,480 --> 00:32:49,660
of your iDevice by the way is violent
and so I think

448
00:32:50,230 --> 00:32:55,419
iOS 4.2 but you can also look into
backups itunes backups

449
00:32:55,419 --> 00:33:01,419
because when you plug the USB cable
today I device into your pc then

450
00:33:01,419 --> 00:33:06,520
automatically back up so late i'm not
use a second - it's still working i

451
00:33:06,520 --> 00:33:09,940
checked it on iOS 8 . something i don't
recall now which one

452
00:33:09,940 --> 00:33:15,790
it's kind of like freedom you install an
agent on device you create it in an

453
00:33:15,790 --> 00:33:20,500
application and then on your workstation
you have nice web interface with prices

454
00:33:20,500 --> 00:33:21,880
- some functions

455
00:33:21,880 --> 00:33:26,140
it's not obviously as flexible but
that's not something nice gooey and you

456
00:33:26,140 --> 00:33:30,010
can still see a lot of lot of things
going in the application here

457
00:33:30,010 --> 00:33:39,580
ok and some some closing thoughts from
from my side is that still server-side

458
00:33:39,580 --> 00:33:44,799
box are most impactful because the
platform as such is its maturing it uses

459
00:33:44,799 --> 00:33:46,809
encryption it uses TPM

460
00:33:46,809 --> 00:33:51,490
so there are less and less scenarios for
getting the data from the device itself

461
00:33:52,390 --> 00:33:55,720
I'm not saying that it's not that that
is impossible but it's getting harder

462
00:33:55,720 --> 00:34:01,030
and the issue might be for instance when
users choose week Pascal's like one two

463
00:34:01,030 --> 00:34:06,790
three four four zeros and it obviously
happens and good practices also - why

464
00:34:06,790 --> 00:34:08,350
device after 10 attempts

465
00:34:08,350 --> 00:34:12,190
then you are you are less even less
lucky and the interesting stuff that i

466
00:34:12,190 --> 00:34:18,040
got from apple app store it's from march
seven this year and this is partitioning

467
00:34:18,040 --> 00:34:25,149
of iOS in on all idevices and if you
have the image in your head

468
00:34:25,659 --> 00:34:30,790
how it looks like on Android and this
actually ranging from Android two points

469
00:34:30,790 --> 00:34:35,770
something to android 6 and this is one
of their well advantages and

470
00:34:35,770 --> 00:34:39,550
disadvantages of the platform of
unification but you can see that the

471
00:34:39,550 --> 00:34:46,869
security is much more common control in
this scenario like right from my

472
00:34:46,869 --> 00:34:50,260
perspective I start with web application
testing and really

473
00:34:50,918 --> 00:34:54,308
well after some time you probably
getting bored if you don't touch the new

474
00:34:54,309 --> 00:34:57,579
technologies but if you're testing
company like I'll see all the

475
00:34:57,579 --> 00:35:04,059
applications so mobile mobile for the
mobile stuff is fun differently and the

476
00:35:04,059 --> 00:35:09,040
platform itself is again solid but the
barbers obviously will do

477
00:35:09,040 --> 00:35:12,910
implementation errors design errors they
will try to implement homegrown crypto

478
00:35:12,910 --> 00:35:19,450
and this will remain from again from my
perspective moving into mobile is good

479
00:35:19,450 --> 00:35:23,259
in a sense that if you want to get
closer to negative security to reverse

480
00:35:23,260 --> 00:35:24,190
engineering

481
00:35:24,190 --> 00:35:29,230
you'll start touching things like this
you start reading api documentation and

482
00:35:29,230 --> 00:35:32,470
you'll start reading assemble your start
using these assembler it's stuff that

483
00:35:32,470 --> 00:35:38,828
you really want want to use your web
tests and also they give you a chance to

484
00:35:38,829 --> 00:35:44,200
I mean they apple if your chance to to
constantly learn because they introduce

485
00:35:44,200 --> 00:35:45,970
new technologies now

486
00:35:45,970 --> 00:35:52,118
things like Apple pay or health kit and
it needs you to be on your toes all the

487
00:35:52,119 --> 00:35:57,819
time and also your theories of a few iOS
and they release new iOS and happened

488
00:35:57,819 --> 00:36:00,520
half of your tools that you are they are
not working anymore

489
00:36:00,520 --> 00:36:06,549
so you have to rewrite or maybe a
transcript of your tools and also from

490
00:36:06,549 --> 00:36:14,140
my my notice is that there are a lot of
tools for iOS smaller than eight but for

491
00:36:14,140 --> 00:36:16,390
recent is meant to they don't work

492
00:36:16,390 --> 00:36:20,920
and this is why i try to your eye on as
staff which is as simple as possible

493
00:36:20,920 --> 00:36:24,970
like debugger like freedom which is
basically an engine very very rough

494
00:36:24,970 --> 00:36:26,430
engine

495
00:36:26,430 --> 00:36:29,640
and and in this way you

496
00:36:29,640 --> 00:36:33,118
you are pretty much sure that you will
be able to test the next generation of

497
00:36:33,119 --> 00:36:34,020
devices

498
00:36:34,020 --> 00:36:38,490
obviously unless there are jailbreaks
developed in the same basis to iOS is

499
00:36:38,490 --> 00:36:44,129
because otherwise we don't have job and
yeah

500
00:36:44,130 --> 00:36:47,700
and so I think I said everything this
homemade crypto security by obscurity

501
00:36:47,700 --> 00:36:50,520
developer software assume that

502
00:36:50,520 --> 00:36:56,069
well no one can change the request made
to the server so it must be trusted

503
00:36:56,069 --> 00:37:00,180
right and you find sequel injection you
find privilege escalation stuff like

504
00:37:00,180 --> 00:37:01,859
this

505
00:37:01,859 --> 00:37:06,450
right so that's all from my sight and
questions from the audience

506
00:37:07,079 --> 00:37:12,240
these weights

507
00:37:21,530 --> 00:37:28,280
obviously the future with April
improving the protection from jailbreaks

508
00:37:28,280 --> 00:37:30,350
implementing touch ID

509
00:37:30,350 --> 00:37:34,069
how how to test equipment we look in the
future

510
00:37:34,070 --> 00:37:39,230
well I believe in history Charles event
with release of iOS 9 and rootless

511
00:37:39,230 --> 00:37:44,240
system and daybreakers prove that they
can still do their job pretty good and

512
00:37:44,240 --> 00:37:47,990
they are still developing great breaks
its getting harder and harder you can

513
00:37:47,990 --> 00:37:51,109
also see it in bug bounty programs like
zero do

514
00:37:51,110 --> 00:37:58,670
how much they pay for a full day break
on on recent iOS's but also introducing

515
00:37:58,670 --> 00:38:04,820
new technologies introduced larger the
surface for attacks and possibly more

516
00:38:04,820 --> 00:38:09,740
holes and on the other hand there were
like many discussions about the

517
00:38:09,740 --> 00:38:13,220
jailbreak developers they just burn
exploit too fast

518
00:38:13,220 --> 00:38:17,390
they just released the exploit that
released the you know the jailbreak tool

519
00:38:17,390 --> 00:38:21,350
Apple immediately patches it and they
release a couple of really neat and very

520
00:38:21,350 --> 00:38:26,029
good exploit that could be used for a
bit later to to keep their you know

521
00:38:26,030 --> 00:38:31,640
their that debris time for jailbreaking
the newest version longer but i believe

522
00:38:31,640 --> 00:38:40,879
that for us future third day breaks will
be developed questions

523
00:38:41,600 --> 00:38:44,600
was

524
00:38:46,420 --> 00:38:49,420
expect good one hello very interesting
talk

525
00:38:49,960 --> 00:38:53,980
I have a question about the jailbreaking
detection do you think we can automate

526
00:38:53,980 --> 00:38:58,839
it so maybe we can imagine someone
making them aware that that I'd as a

527
00:38:58,839 --> 00:39:04,720
bank application that Detective that try
to avoid the gel gel texture and then

528
00:39:04,720 --> 00:39:09,009
you know the user is numb p and sell it
and then you get to the account again

529
00:39:09,010 --> 00:39:12,940
and the scenario of installing the
application and user device is kind of

530
00:39:12,940 --> 00:39:17,230
limited as is opposed to android you
have only the official app store

531
00:39:17,230 --> 00:39:21,940
you have two other methods of the . the
applications one is a talk without her

532
00:39:21,940 --> 00:39:25,299
certificate but you have to plug it into
your ex called pocket with the USB cable

533
00:39:25,299 --> 00:39:26,559
and deploy it

534
00:39:26,559 --> 00:39:29,710
so we just can't send the file to
someone hey install this file like with

535
00:39:29,710 --> 00:39:30,819
ap case right

536
00:39:30,819 --> 00:39:35,349
this all the malware on Android this is
where it comes from and on iOS it's just

537
00:39:35,349 --> 00:39:38,950
basically goes through the vetting
process which is by the way a perfect

538
00:39:38,950 --> 00:39:43,299
now the second more viable attack
scenario is stolen

539
00:39:43,299 --> 00:39:51,579
MDM profiles companies use MDM to push
applications and then if you are able to

540
00:39:51,579 --> 00:39:52,930
talk

541
00:39:52,930 --> 00:39:57,578
over server then are able to still
certificated push the applications and

542
00:39:57,579 --> 00:40:02,829
then this is viable but you can already
start our yeah obviously Jerry detection

543
00:40:02,829 --> 00:40:07,030
can go very far and they can try to
developers and you can try to obfuscate

544
00:40:07,030 --> 00:40:10,750
they called they can also provide an
anti debugging techniques things like

545
00:40:10,750 --> 00:40:14,020
this so but from my experience they
never did it

546
00:40:14,020 --> 00:40:17,079
so it's simple and it's like going
through the state detection error

547
00:40:17,079 --> 00:40:22,390
I mean I as a user I should be warned
about the implications and then it's my

548
00:40:22,390 --> 00:40:22,868
choice

549
00:40:22,869 --> 00:40:25,869
I run the department question again

550
00:40:27,940 --> 00:40:36,430
but there is one more risk involves the
exploitation of application already

551
00:40:36,430 --> 00:40:41,618
installed for instance the web browser
if you found find a remote code

552
00:40:41,619 --> 00:40:46,869
execution in the web browser or iOS you
can run a code that will take a break to

553
00:40:46,869 --> 00:40:51,550
this is not exactly i mean for
jailbreaking you have to have multiple

554
00:40:51,550 --> 00:40:52,750
exploits

555
00:40:52,750 --> 00:40:56,980
first of all as applications are in
sandbox

556
00:40:56,980 --> 00:41:01,240
okay if you get code execution then our
students and box then you have escaped

557
00:41:01,240 --> 00:41:05,379
from sandbox ok but you are still in use
Earl and so we need to have a colonel

558
00:41:05,380 --> 00:41:06,309
exploit

559
00:41:06,309 --> 00:41:11,049
there you go it colonel so then you have
to push the boot wrong but what room is

560
00:41:11,049 --> 00:41:15,819
actually signed so we have to find the
holder and also putting processes like

561
00:41:15,819 --> 00:41:17,980
multi-step process

562
00:41:17,980 --> 00:41:22,390
I have some additional slides so this is
how booting process looks like you have

563
00:41:22,390 --> 00:41:27,970
this root CA lie down in silicon then
you have lb you have I bored you have is

564
00:41:27,970 --> 00:41:32,200
Colonel and os itself and what
jailbreakers they do they usually

565
00:41:32,200 --> 00:41:37,419
exploit this or that this will probably
give you via turd daybreak which means

566
00:41:37,420 --> 00:41:42,849
that you have to have your iDevice part
to the pc and once we rebooted to lose

567
00:41:42,849 --> 00:41:47,530
the jailbreak and this is what we call a
Break normal here like uh theatre which

568
00:41:47,530 --> 00:41:50,440
means that you reboot your device and is
constant and jailbroken

569
00:41:50,440 --> 00:41:55,299
so in short words it's not one exploit
it's not as simple as that

570
00:41:55,299 --> 00:42:00,430
and this is also why the prices for
exploit our delhi even reading the

571
00:42:00,430 --> 00:42:03,759
write-ups I must admit I tried to read
the right house for this

572
00:42:03,760 --> 00:42:08,260
if you are not very into the platform
it's extremely hard to understand what

573
00:42:08,260 --> 00:42:09,250
they're doing

574
00:42:09,250 --> 00:42:12,250
thanks question on back

575
00:42:14,080 --> 00:42:17,170
hi

576
00:42:17,170 --> 00:42:21,130
I've got a question from a bit different
perspective because you said I you

577
00:42:21,130 --> 00:42:24,160
believe that the platform itself is
pretty solid

578
00:42:24,160 --> 00:42:31,450
I'm not actually much into apple but I
think we've all heard about rumors about

579
00:42:31,450 --> 00:42:35,980
back doors that Apple leaves
intentionally so could you shed some

580
00:42:35,980 --> 00:42:38,980
force experienced on on that topic

581
00:42:38,980 --> 00:42:46,210
I'm not allowed by our advertiser I'm
running Android by the way and you know

582
00:42:46,210 --> 00:42:52,690
it's I think if you have other problems
if your if your enemy is NSA or another

583
00:42:52,690 --> 00:42:56,560
security agency you have you are in much
bigger trouble

584
00:42:57,100 --> 00:43:00,880
I mean everyone is now picking into your
privacy

585
00:43:00,880 --> 00:43:07,150
that's true if you are afraid of
backdoors well might be but you have any

586
00:43:07,150 --> 00:43:10,090
specific buyer in mind that word it was
detected

587
00:43:10,090 --> 00:43:14,470
yeah i mean not please wait

588
00:43:14,470 --> 00:43:21,339
yeah i think that everything is possible
i mean it's only software and hardware

589
00:43:21,340 --> 00:43:26,560
right so it can be also my point was if
if you actually come across anything

590
00:43:26,560 --> 00:43:32,170
like that or is there anything really
substantial you could find in the

591
00:43:32,170 --> 00:43:36,460
internet well media media says that
Apple is being pushed to really you know

592
00:43:36,460 --> 00:43:40,270
install backdoors it was pushing the
past and there are two speak discussions

593
00:43:40,270 --> 00:43:45,310
and their PR says or their mind fashion
is that they refuse to do so they

594
00:43:45,310 --> 00:43:49,540
haven't done this if they did that the
if they have done this or not I don't

595
00:43:49,540 --> 00:43:54,520
know but again like big platform
hardware software it gives you a unified

596
00:43:54,520 --> 00:43:56,680
attack surface you own one

597
00:43:56,680 --> 00:43:59,269
you own all of them right now

598
00:43:59,269 --> 00:44:03,109
on the other hand you can control
security a much better so it's always a

599
00:44:03,109 --> 00:44:03,439
trade-off

