1
00:00:06,470 --> 00:00:13,370
all right plugging in my screen and we

2
00:00:12,590 --> 00:00:16,540
should be life

3
00:00:13,370 --> 00:00:20,450
yes hello everyone it's nice that

4
00:00:16,540 --> 00:00:22,400
there's so many people here I will try

5
00:00:20,450 --> 00:00:25,039
not to disappoint you and my name is

6
00:00:22,400 --> 00:00:26,390
Michael sighs doc I'm from secure again

7
00:00:25,039 --> 00:00:28,279
from security um and today I'll be

8
00:00:26,390 --> 00:00:30,109
speaking about really old

9
00:00:28,279 --> 00:00:33,440
vulnerabilities which should be passed

10
00:00:30,109 --> 00:00:39,079
already but they are not and they are

11
00:00:33,440 --> 00:00:42,379
quite critical and may be interesting ok

12
00:00:39,079 --> 00:00:46,160
about me I'm a pin Chester and trainer

13
00:00:42,379 --> 00:00:48,620
I'm concerned mostly about IOT security

14
00:00:46,160 --> 00:00:52,069
this is my research but I won't cover

15
00:00:48,620 --> 00:00:53,930
this today and I work in security oh we

16
00:00:52,070 --> 00:00:57,140
do pen testing and training something

17
00:00:53,930 --> 00:01:03,739
like 250 pentas a year and 100 trainings

18
00:00:57,140 --> 00:01:06,440
a year ok so let's start and the first

19
00:01:03,739 --> 00:01:10,789
demo will be this stuff so this is

20
00:01:06,440 --> 00:01:13,970
Logitech our 400 die used in every

21
00:01:10,789 --> 00:01:16,700
single also IT security conference and

22
00:01:13,970 --> 00:01:19,789
this is the most popular presentation

23
00:01:16,700 --> 00:01:22,910
clicker and actually this is clicker

24
00:01:19,789 --> 00:01:25,069
this is dongle this is clicker this is

25
00:01:22,910 --> 00:01:27,319
backdoor and actually I can inject

26
00:01:25,069 --> 00:01:29,569
wirelessly I'll try to do this in a

27
00:01:27,319 --> 00:01:31,789
moment I can inject wirelessly any

28
00:01:29,569 --> 00:01:33,470
keystroke not only page down page up any

29
00:01:31,789 --> 00:01:37,009
keystroke for example I can start

30
00:01:33,470 --> 00:01:39,080
calculator or download rootkit or

31
00:01:37,009 --> 00:01:44,500
anything actually on the target computer

32
00:01:39,080 --> 00:01:44,500
so now I'm plugging this into my windows

33
00:01:45,369 --> 00:01:54,369
alright and maybe I will switch screen

34
00:01:49,910 --> 00:01:54,369
to my Windows so the target

35
00:02:04,799 --> 00:02:09,959
alright here's my windows with some

36
00:02:06,869 --> 00:02:13,019
garbage and now I have this little

37
00:02:09,959 --> 00:02:13,709
dongle I will talk about this a bit

38
00:02:13,019 --> 00:02:16,590
later

39
00:02:13,709 --> 00:02:20,550
it's crazy radio and now I'm starting

40
00:02:16,590 --> 00:02:23,730
just scholarly notes and it's my pointer

41
00:02:20,550 --> 00:02:30,319
turned on yes and we'll see if it works

42
00:02:23,730 --> 00:02:30,319
so let's try let's stop scanning

43
00:02:37,209 --> 00:02:40,620
scanning scanning scanning

44
00:02:44,569 --> 00:02:48,079
stills coming

45
00:02:50,910 --> 00:02:54,870
all right and now let's try this

46
00:02:53,190 --> 00:02:59,040
keystroke injection we'll see if it

47
00:02:54,870 --> 00:03:03,390
works a start calculator so it works

48
00:02:59,040 --> 00:03:08,130
actually you can input any single key so

49
00:03:03,390 --> 00:03:15,480
next speakers be world okay let's move

50
00:03:08,130 --> 00:03:25,320
to my main laptop and actually how it

51
00:03:15,480 --> 00:03:27,570
works all right so come on myths here

52
00:03:25,320 --> 00:03:29,519
are that this communication dongle and

53
00:03:27,570 --> 00:03:33,120
this clicker must be somehow encrypted

54
00:03:29,520 --> 00:03:35,400
of course it's not true and then if it's

55
00:03:33,120 --> 00:03:37,950
not encrypted we can all the inject

56
00:03:35,400 --> 00:03:40,170
pagedown which are maybe escaped all the

57
00:03:37,950 --> 00:03:42,049
limited set of cultures it's also not

58
00:03:40,170 --> 00:03:47,730
true we can inject actually every single

59
00:03:42,050 --> 00:03:50,100
key and what we need we need for example

60
00:03:47,730 --> 00:03:52,140
this stuff this is normally used to

61
00:03:50,100 --> 00:03:54,540
control drones there is a Swedish

62
00:03:52,140 --> 00:03:57,269
company which sells this stuff it has

63
00:03:54,540 --> 00:04:00,480
power amplifier external antenna and it

64
00:03:57,270 --> 00:04:02,220
has range of 1 kilometer I'm not sure if

65
00:04:00,480 --> 00:04:07,019
I can inject in a keystroke from 1

66
00:04:02,220 --> 00:04:10,350
kilometer but I tried this at home from

67
00:04:07,020 --> 00:04:13,350
behind the wall and it worked

68
00:04:10,350 --> 00:04:14,970
then we need a custom femur to this

69
00:04:13,350 --> 00:04:17,548
stuff because this is used to control

70
00:04:14,970 --> 00:04:19,529
draws we want to control someone with

71
00:04:17,548 --> 00:04:22,979
this so little research from this

72
00:04:19,529 --> 00:04:24,989
Bastille company it enables permissions

73
00:04:22,980 --> 00:04:27,930
mode for example on the staff and the

74
00:04:24,990 --> 00:04:31,140
last thing a little script by company

75
00:04:27,930 --> 00:04:33,300
sis by the way they have tomorrow as

76
00:04:31,140 --> 00:04:36,120
fibers are a bit more presentation about

77
00:04:33,300 --> 00:04:39,480
their new research so I invite you to to

78
00:04:36,120 --> 00:04:40,200
them and this Python script is quite

79
00:04:39,480 --> 00:04:43,640
simple

80
00:04:40,200 --> 00:04:47,550
more or less it just gets Windows run

81
00:04:43,640 --> 00:04:50,310
CMD for example here and or just calc

82
00:04:47,550 --> 00:04:54,800
and write your transmitted and that's it

83
00:04:50,310 --> 00:04:58,650
really really simple and a fix for this

84
00:04:54,800 --> 00:05:00,330
this model I think is not patched so if

85
00:04:58,650 --> 00:05:03,150
you buy a new one would be variable

86
00:05:00,330 --> 00:05:04,229
there's also a new research from April

87
00:05:03,150 --> 00:05:07,859
this year

88
00:05:04,230 --> 00:05:09,450
so Logitech r800 is also vulnerable 500

89
00:05:07,860 --> 00:05:12,930
is also variable to limited strong

90
00:05:09,450 --> 00:05:16,140
injection and many different vendors to

91
00:05:12,930 --> 00:05:17,550
so it's not so not so nice for us from

92
00:05:16,140 --> 00:05:21,060
security perspective it's it's quite

93
00:05:17,550 --> 00:05:23,960
nice ok this is the first thing let's

94
00:05:21,060 --> 00:05:28,020
talk about maybe I will stop here a bit

95
00:05:23,960 --> 00:05:32,690
about strange HTTP requests do you think

96
00:05:28,020 --> 00:05:32,690
that this request is valid or invalid

97
00:05:34,310 --> 00:05:41,010
okay who thinks it's valid hand up okay

98
00:05:39,210 --> 00:05:46,380
not so many people who think it's

99
00:05:41,010 --> 00:05:51,539
invalid to free okay how about the

100
00:05:46,380 --> 00:05:56,280
others I don't know okay let's try so I

101
00:05:51,540 --> 00:06:04,290
will try to start web suite here and I

102
00:05:56,280 --> 00:06:11,549
will try to go to h2 Sakura go to PL all

103
00:06:04,290 --> 00:06:18,150
right and what do we have here I will

104
00:06:11,550 --> 00:06:26,120
try to remove all this garbage right and

105
00:06:18,150 --> 00:06:29,130
now let's maybe this too and let's try

106
00:06:26,120 --> 00:06:31,530
so of course it's valid normal HTTP

107
00:06:29,130 --> 00:06:34,469
request we have different files here

108
00:06:31,530 --> 00:06:37,169
like admin like innocent like test and

109
00:06:34,470 --> 00:06:45,720
so on and so on and I if I call her

110
00:06:37,170 --> 00:06:50,970
innocent HTML of course is valid if I

111
00:06:45,720 --> 00:06:56,550
put here test it's of course valid but

112
00:06:50,970 --> 00:07:00,510
let's try this stuff so innocent and now

113
00:06:56,550 --> 00:07:06,000
this get slash it can be test or just

114
00:07:00,510 --> 00:07:09,830
left without this stuff as far as I

115
00:07:06,000 --> 00:07:13,280
remember let's let's try now we must

116
00:07:09,830 --> 00:07:20,789
turn off this

117
00:07:13,280 --> 00:07:22,698
and we must put here this test.html of

118
00:07:20,789 --> 00:07:25,650
course

119
00:07:22,699 --> 00:07:29,099
so our final request I should request is

120
00:07:25,650 --> 00:07:33,150
this blank line and this get without an

121
00:07:29,099 --> 00:07:35,870
empirical version here and actually we

122
00:07:33,150 --> 00:07:38,568
have two responses concatenated into

123
00:07:35,870 --> 00:07:42,090
into one response this is a bit strange

124
00:07:38,569 --> 00:07:44,759
how it actually works so let's go back

125
00:07:42,090 --> 00:07:46,979
to to the presentation and it uses two

126
00:07:44,759 --> 00:07:48,599
different features the first feature is

127
00:07:46,979 --> 00:07:52,460
something which is called HTTP

128
00:07:48,599 --> 00:07:55,860
pipelining by the way it's turned off in

129
00:07:52,460 --> 00:07:59,849
most of modern browsers but it's turned

130
00:07:55,860 --> 00:08:03,139
on in almost every modern HTTP server

131
00:07:59,849 --> 00:08:06,479
and it allows me to send different HTTP

132
00:08:03,139 --> 00:08:08,130
requests in one TCP connection without

133
00:08:06,479 --> 00:08:10,349
waiting for responses so many many

134
00:08:08,130 --> 00:08:14,880
different requests without responses

135
00:08:10,349 --> 00:08:19,050
this is one thing and this stuff is HTTP

136
00:08:14,880 --> 00:08:22,620
version 0-9 protocol and surprisingly

137
00:08:19,050 --> 00:08:25,830
many many many HTTP servers still

138
00:08:22,620 --> 00:08:29,909
support this old version so we have two

139
00:08:25,830 --> 00:08:33,449
things here HTTP pipelining and then

140
00:08:29,909 --> 00:08:36,360
this HTTP 0.9 and it is quite nice to

141
00:08:33,450 --> 00:08:38,550
bypass web application firewalls filter

142
00:08:36,360 --> 00:08:40,469
stuff like this because we normally do

143
00:08:38,549 --> 00:08:43,649
this request our Web Application

144
00:08:40,469 --> 00:08:46,770
Firewall or filter says it's it's in a

145
00:08:43,649 --> 00:08:49,079
sense HTML I can go with this request go

146
00:08:46,770 --> 00:08:52,949
with this communication and actually

147
00:08:49,079 --> 00:08:54,870
when it reaches HTTP server it has to

148
00:08:52,950 --> 00:08:57,890
request this innocent in this admin

149
00:08:54,870 --> 00:09:02,670
which is not checked by wofe or filter

150
00:08:57,890 --> 00:09:05,610
pretty nice trick ok another interesting

151
00:09:02,670 --> 00:09:10,020
stuff for bypassing filter at something

152
00:09:05,610 --> 00:09:13,950
which was defined in 9 1996 not so new

153
00:09:10,020 --> 00:09:16,709
and let's say we allow we are allowed to

154
00:09:13,950 --> 00:09:19,350
connect to this cost this X X X X dot

155
00:09:16,709 --> 00:09:22,199
meal and we are not allowed to connect

156
00:09:19,350 --> 00:09:25,500
to this internal web site and actually

157
00:09:22,199 --> 00:09:26,370
if we issue requests like this HTTP

158
00:09:25,500 --> 00:09:29,999
server

159
00:09:26,370 --> 00:09:32,279
will process the URLs as as the

160
00:09:29,999 --> 00:09:34,889
following this has priority number one

161
00:09:32,279 --> 00:09:38,009
this is prior to number two so actually

162
00:09:34,889 --> 00:09:40,139
we'll do HTP request to this and if we

163
00:09:38,009 --> 00:09:42,990
have check against this if you are

164
00:09:40,139 --> 00:09:45,149
reaching this cost which is which is

165
00:09:42,990 --> 00:09:48,899
okay then we're screwed

166
00:09:45,149 --> 00:09:51,720
so we can bypass the filter okay now

167
00:09:48,899 --> 00:09:55,620
another interesting stuff it's called

168
00:09:51,720 --> 00:09:58,439
IBM zero three seven encoding from the

169
00:09:55,620 --> 00:10:03,749
description it looks pretty old I guess

170
00:09:58,439 --> 00:10:08,610
and and let's see how it works once

171
00:10:03,749 --> 00:10:15,870
again burp let's go to secure rack this

172
00:10:08,610 --> 00:10:19,230
time let's go to burp all right and I

173
00:10:15,870 --> 00:10:23,059
will do something like this repeater all

174
00:10:19,230 --> 00:10:23,059
this garbage is unnecessary

175
00:10:23,120 --> 00:10:33,240
all right and I will have here parameter

176
00:10:26,819 --> 00:10:39,149
like test value okay now I'll try to

177
00:10:33,240 --> 00:10:43,230
change a request to post and maybe it

178
00:10:39,149 --> 00:10:48,329
was a bit too fast so test value this is

179
00:10:43,230 --> 00:10:54,889
pretty normal HTTP POST request okay

180
00:10:48,329 --> 00:10:54,888
maybe this is this is not good all right

181
00:10:58,080 --> 00:11:06,640
okay now there is once ah not after post

182
00:11:02,380 --> 00:11:08,350
but here before the protocol right and

183
00:11:06,640 --> 00:11:09,250
this is pretty normal request and we can

184
00:11:08,350 --> 00:11:17,350
do a trick

185
00:11:09,250 --> 00:11:21,340
here's car set something like this as

186
00:11:17,350 --> 00:11:25,780
far as I remember and you have garbage

187
00:11:21,340 --> 00:11:29,350
here in params you see normal test

188
00:11:25,780 --> 00:11:31,720
normal value and if our once again Web

189
00:11:29,350 --> 00:11:35,650
Application Firewall or filter checks

190
00:11:31,720 --> 00:11:39,100
against this and this filter doesn't

191
00:11:35,650 --> 00:11:41,740
understand this IBM zero three seven

192
00:11:39,100 --> 00:11:45,160
encoding we can easily bypass any filter

193
00:11:41,740 --> 00:11:47,320
we can encode xml's in this stuff and so

194
00:11:45,160 --> 00:11:51,930
on so on it's only an example there is

195
00:11:47,320 --> 00:11:51,930
IBM 504 remember

196
00:11:58,010 --> 00:12:02,400
yeah another encoding different

197
00:12:00,720 --> 00:12:04,410
different different and coatings here

198
00:12:02,400 --> 00:12:07,260
ideal for bypassing web application

199
00:12:04,410 --> 00:12:10,260
firewalls on different filters alright

200
00:12:07,260 --> 00:12:14,160
so let's go back to the presentation

201
00:12:10,260 --> 00:12:21,600
and another interesting request maybe

202
00:12:14,160 --> 00:12:24,270
let's try this h2 cigarette PL and we

203
00:12:21,600 --> 00:12:29,100
have a little script which the displays

204
00:12:24,270 --> 00:12:31,370
may user agent you a dot PHP so a little

205
00:12:29,100 --> 00:12:33,990
riddle for you

206
00:12:31,370 --> 00:12:42,300
let's go back here let's remove this

207
00:12:33,990 --> 00:12:50,360
staff and I will provide this header so

208
00:12:42,300 --> 00:12:50,359
let's see how it works you way of course

209
00:12:55,550 --> 00:13:03,060
user-agent tests and now a little riddle

210
00:12:58,140 --> 00:13:06,000
I will put here another user agent with

211
00:13:03,060 --> 00:13:08,280
the values secure ACK and what do you

212
00:13:06,000 --> 00:13:10,560
think will be the response so the value

213
00:13:08,280 --> 00:13:13,260
of this user agent server site will be

214
00:13:10,560 --> 00:13:19,290
watched secure rack or test who is for

215
00:13:13,260 --> 00:13:23,030
secure ik and up ok who is for test ok

216
00:13:19,290 --> 00:13:27,360
and who is for something else

217
00:13:23,030 --> 00:13:31,890
ok more or less the same responses to

218
00:13:27,360 --> 00:13:34,350
each of my questions so actually this is

219
00:13:31,890 --> 00:13:36,689
the value so not to test not secure ACK

220
00:13:34,350 --> 00:13:40,110
and this is so-called folded folded

221
00:13:36,690 --> 00:13:42,600
folded header HTTP folded header so you

222
00:13:40,110 --> 00:13:45,300
can continue value after a little space

223
00:13:42,600 --> 00:13:48,480
another line another space and so and so

224
00:13:45,300 --> 00:13:50,280
on and sometimes HTTP servers or

225
00:13:48,480 --> 00:13:52,140
different filters don't know this stuff

226
00:13:50,280 --> 00:13:54,630
and they can be crushed they can be

227
00:13:52,140 --> 00:13:56,850
exploited and stuff like this for

228
00:13:54,630 --> 00:14:00,750
example we had something in in the last

229
00:13:56,850 --> 00:14:03,780
year in light httpd we have use of the

230
00:14:00,750 --> 00:14:08,280
river nobility connected with parsing

231
00:14:03,780 --> 00:14:11,280
those folded headers all right something

232
00:14:08,280 --> 00:14:15,060
different and the preload I guess that

233
00:14:11,280 --> 00:14:18,480
most of you know this stuff so actually

234
00:14:15,060 --> 00:14:22,199
it allows me to load any code load my

235
00:14:18,480 --> 00:14:26,250
coat let's say to any binary owned by me

236
00:14:22,200 --> 00:14:30,300
let's say and it works more or less like

237
00:14:26,250 --> 00:14:33,750
this I should switch to to a proper

238
00:14:30,300 --> 00:14:40,339
virtual machine I will try to put this

239
00:14:33,750 --> 00:14:40,339
in in white background

240
00:14:46,190 --> 00:14:51,170
it was free as far as I remember free

241
00:14:55,970 --> 00:15:04,650
okay so we have for example this basic

242
00:15:00,870 --> 00:15:06,750
very basic programming see know this

243
00:15:04,650 --> 00:15:09,180
underscore init function it's very

244
00:15:06,750 --> 00:15:14,490
important and it's just prints hello can

245
00:15:09,180 --> 00:15:17,589
color your confidence let's try to do

246
00:15:14,490 --> 00:15:20,619
this like this now let's compile this

247
00:15:17,590 --> 00:15:20,619
[Music]

248
00:15:21,200 --> 00:15:38,040
maybe not this but and here basic and

249
00:15:30,590 --> 00:15:42,480
let's try to let's try to do something

250
00:15:38,040 --> 00:15:46,040
like this LD preload basic this and

251
00:15:42,480 --> 00:15:51,530
start any binary like ID for example

252
00:15:46,040 --> 00:15:55,290
okay a little fix here should be this

253
00:15:51,530 --> 00:15:58,040
and as you can see just before the

254
00:15:55,290 --> 00:16:00,689
normal code starts our code is executed

255
00:15:58,040 --> 00:16:03,180
right we can inject any code before I

256
00:16:00,690 --> 00:16:06,480
don't know LS once again our code and

257
00:16:03,180 --> 00:16:11,370
then LS this is pretty standard it's not

258
00:16:06,480 --> 00:16:14,040
a security vulnerability unless unless

259
00:16:11,370 --> 00:16:16,620
for example we had privilege escalation

260
00:16:14,040 --> 00:16:18,060
in FreeBSD it was published a zero-day

261
00:16:16,620 --> 00:16:20,070
some time ago

262
00:16:18,060 --> 00:16:24,510
I'm actually the procedure was the same

263
00:16:20,070 --> 00:16:28,080
so our code then we said LD preload our

264
00:16:24,510 --> 00:16:30,960
code then we run a sweet binary on by

265
00:16:28,080 --> 00:16:33,390
root and sweet binary should ignore this

266
00:16:30,960 --> 00:16:35,070
every pillow preload because without

267
00:16:33,390 --> 00:16:37,080
this we has we have code execution is

268
00:16:35,070 --> 00:16:41,450
rude but somehow it didn't so we had

269
00:16:37,080 --> 00:16:46,140
root pretty pretty simple we had also a

270
00:16:41,450 --> 00:16:48,720
similar stuff in Linux almost or

271
00:16:46,140 --> 00:16:53,760
something like twenty years ago and if

272
00:16:48,720 --> 00:16:55,500
you set twice the same variable as the

273
00:16:53,760 --> 00:16:59,100
preload and then the same the preload

274
00:16:55,500 --> 00:16:59,370
the second was used by sweet binary so

275
00:16:59,100 --> 00:17:02,850
the

276
00:16:59,370 --> 00:17:07,290
LD preload is not so it's not so safe

277
00:17:02,850 --> 00:17:09,480
and one year and a half ago we have

278
00:17:07,290 --> 00:17:12,809
another interesting stuff concerning

279
00:17:09,480 --> 00:17:13,290
this LD pillows so exploit against go go

280
00:17:12,809 --> 00:17:15,569
ahead

281
00:17:13,290 --> 00:17:19,500
HTTP server this is it is really popular

282
00:17:15,569 --> 00:17:26,819
IOT HTTP server I can try to navigate to

283
00:17:19,500 --> 00:17:30,020
to zoom I alright and search for go

284
00:17:26,819 --> 00:17:30,020
ahead HTTP servers

285
00:17:37,720 --> 00:17:46,309
and and you can see as you can see the

286
00:17:43,280 --> 00:17:49,340
simple response imple query gives me

287
00:17:46,309 --> 00:17:51,110
something about my millions IP addresses

288
00:17:49,340 --> 00:17:54,740
public I bid IP addresses with this

289
00:17:51,110 --> 00:17:58,309
device it's a bit it's a bit of cheating

290
00:17:54,740 --> 00:18:03,170
because in 2019 we had only two Millions

291
00:17:58,309 --> 00:18:04,970
so it's quite ok so let's see what is

292
00:18:03,170 --> 00:18:13,760
going on we'll just going on about this

293
00:18:04,970 --> 00:18:18,350
exploit all right so basically you can

294
00:18:13,760 --> 00:18:22,340
do something like this so we locate this

295
00:18:18,350 --> 00:18:25,100
vulnerable IOT then we go to CGI slash

296
00:18:22,340 --> 00:18:29,059
bin and then we can target default

297
00:18:25,100 --> 00:18:32,270
binary on those go ahead installation or

298
00:18:29,059 --> 00:18:36,290
we can target any actually binary

299
00:18:32,270 --> 00:18:41,240
written in C so it must load external

300
00:18:36,290 --> 00:18:45,190
libraries and where we put our code more

301
00:18:41,240 --> 00:18:49,340
or less here and I will try to show you

302
00:18:45,190 --> 00:18:50,900
real working exploit against this so

303
00:18:49,340 --> 00:18:56,480
it's really really simple platform

304
00:18:50,900 --> 00:18:59,600
independent and first we'll need our

305
00:18:56,480 --> 00:19:02,360
code and our shell will be really simple

306
00:18:59,600 --> 00:19:07,760
so the same as before this init function

307
00:19:02,360 --> 00:19:10,090
and now we are starting netcat on port 2

308
00:19:07,760 --> 00:19:10,090
2 2 2

309
00:19:10,580 --> 00:19:17,090
I already compiled it and moved it from

310
00:19:14,240 --> 00:19:23,750
virtual machine to my macbook and I will

311
00:19:17,090 --> 00:19:35,860
try to I'll try to show it to you first

312
00:19:23,750 --> 00:19:35,860
I'll need to start HTTP server alright

313
00:19:40,870 --> 00:19:59,018
this director I guess just stopping HTTP

314
00:19:44,230 --> 00:20:01,990
server alright was my IP address it's

315
00:19:59,019 --> 00:20:18,159
free at the end so now let's try to

316
00:20:01,990 --> 00:20:21,879
navigate here okay so now the CGI or CGI

317
00:20:18,159 --> 00:20:23,799
test alright so this is this is the

318
00:20:21,879 --> 00:20:28,080
default script which is installed on

319
00:20:23,799 --> 00:20:34,480
those HTTP servers when CGI is enabled

320
00:20:28,080 --> 00:20:38,678
exploit so let's move to web suite let's

321
00:20:34,480 --> 00:20:41,080
move this to repeater let's start this

322
00:20:38,679 --> 00:20:47,529
different let's this fancy LD preload

323
00:20:41,080 --> 00:20:51,610
and how to send our code will send this

324
00:20:47,529 --> 00:20:57,340
here in HTTP body weight in CGI can be

325
00:20:51,610 --> 00:20:59,918
mapped here so proc self FD 0 standard

326
00:20:57,340 --> 00:21:04,928
input of course we must change this to

327
00:20:59,919 --> 00:21:12,659
post and now our compiled as a binary so

328
00:21:04,929 --> 00:21:19,950
our paste from file I will take this

329
00:21:12,659 --> 00:21:25,690
she'll probably it's it's this and

330
00:21:19,950 --> 00:21:32,830
before I start this I will check if if

331
00:21:25,690 --> 00:21:36,429
the port 2 2 2 2 2 is open or not so 2 2

332
00:21:32,830 --> 00:21:40,600
2 2 of course it's not opened

333
00:21:36,429 --> 00:21:43,419
so now let's cross our fingers at the

334
00:21:40,600 --> 00:21:48,369
preload here's them our input and here

335
00:21:43,419 --> 00:21:53,200
standard input with this nice code it

336
00:21:48,369 --> 00:21:54,279
it's doing something out here as you can

337
00:21:53,200 --> 00:21:56,409
see

338
00:21:54,279 --> 00:21:59,679
can connect to the server and have

339
00:21:56,409 --> 00:22:02,159
privileges with this web server so it's

340
00:21:59,679 --> 00:22:07,149
pretty easy if you want to easily hack

341
00:22:02,159 --> 00:22:09,669
an IOT device you can check if it uses

342
00:22:07,149 --> 00:22:12,399
this go ahead HTTP server which is

343
00:22:09,669 --> 00:22:13,749
really really popular and then if it

344
00:22:12,399 --> 00:22:19,389
uses cgi-bin

345
00:22:13,749 --> 00:22:24,190
if so you can go with this trick all

346
00:22:19,389 --> 00:22:28,209
right another crazy thing which was

347
00:22:24,190 --> 00:22:30,249
introduced in 2009 and it's it's in

348
00:22:28,210 --> 00:22:34,389
default configuration of PHP till now

349
00:22:30,249 --> 00:22:36,580
and was presented on blackhat last year

350
00:22:34,389 --> 00:22:38,830
and actually in PHP there is something

351
00:22:36,580 --> 00:22:42,639
which is called far forest both a

352
00:22:38,830 --> 00:22:45,279
protocol and a file format and it can be

353
00:22:42,639 --> 00:22:48,339
used quite easily to achieve remote code

354
00:22:45,279 --> 00:22:54,929
execution in many tricky situations I

355
00:22:48,339 --> 00:22:54,928
will try to live demo this for you and

356
00:22:55,259 --> 00:23:03,429
alright and for example vulnerable code

357
00:22:59,529 --> 00:23:05,919
will look like this so in PHP only file

358
00:23:03,429 --> 00:23:09,239
exists of course file read and so on

359
00:23:05,919 --> 00:23:14,559
also is ok but only file exists against

360
00:23:09,239 --> 00:23:18,190
this protocol empty far so inside can be

361
00:23:14,559 --> 00:23:23,349
no PHP actually no PHP parked gives us

362
00:23:18,190 --> 00:23:27,940
remote code execution why because of

363
00:23:23,349 --> 00:23:32,830
this so metadata of this far archive we

364
00:23:27,940 --> 00:23:33,489
can put serialized PHP data so we see

365
00:23:32,830 --> 00:23:36,668
realized

366
00:23:33,489 --> 00:23:38,889
malicious object or objects and then if

367
00:23:36,669 --> 00:23:42,190
PHP is checking if this file exists it

368
00:23:38,889 --> 00:23:45,008
also parses this metadata so it does

369
00:23:42,190 --> 00:23:48,070
silent this realization so we put this

370
00:23:45,009 --> 00:23:51,099
civilized let's say remote code

371
00:23:48,070 --> 00:23:53,529
execution and then we must find place in

372
00:23:51,099 --> 00:23:57,249
an application which we control first

373
00:23:53,529 --> 00:23:59,499
part of of this the important stuff is

374
00:23:57,249 --> 00:24:02,799
that this extension can be anything it

375
00:23:59,499 --> 00:24:06,249
can be JPEG in can be dot PNG it can be

376
00:24:02,799 --> 00:24:08,200
the dupa everything actually so we can

377
00:24:06,249 --> 00:24:10,330
easily bypass any filters all

378
00:24:08,200 --> 00:24:14,669
jpgs are allowed okay let's go with JPEG

379
00:24:10,330 --> 00:24:19,899
I'll try to show show this to you life

380
00:24:14,669 --> 00:24:24,070
okay and we'll need one more tool so

381
00:24:19,899 --> 00:24:26,739
this PHP GDC creates us this civilized

382
00:24:24,070 --> 00:24:29,918
data or it creates justice for it can be

383
00:24:26,740 --> 00:24:32,649
an extension here actually and if we

384
00:24:29,919 --> 00:24:34,570
want to run ID command we just want this

385
00:24:32,649 --> 00:24:38,229
stuff like this so let's move to our

386
00:24:34,570 --> 00:24:42,700
scenario and our scenario will look like

387
00:24:38,230 --> 00:24:46,080
this first step here we'll need to

388
00:24:42,700 --> 00:24:48,730
upload our file our far it can be used

389
00:24:46,080 --> 00:24:50,559
or any function widget or any

390
00:24:48,730 --> 00:24:53,830
functionality which allows us to upload

391
00:24:50,559 --> 00:24:56,289
I know avatar or agreement or our CV or

392
00:24:53,830 --> 00:24:58,840
something can be used here so this file

393
00:24:56,289 --> 00:25:01,090
is uploaded here without an intrigues

394
00:24:58,840 --> 00:25:04,240
the structure of this file is a bit

395
00:25:01,090 --> 00:25:06,610
tricky more about this later first step

396
00:25:04,240 --> 00:25:09,340
and then in the second step we map we

397
00:25:06,610 --> 00:25:13,570
must locate the place which can read or

398
00:25:09,340 --> 00:25:16,240
check if this file exists so for example

399
00:25:13,570 --> 00:25:18,879
XML external entities is a perfect place

400
00:25:16,240 --> 00:25:22,360
for this normally XML external entities

401
00:25:18,880 --> 00:25:24,580
allows are for reading files listing

402
00:25:22,360 --> 00:25:28,389
directories or maybe server side because

403
00:25:24,580 --> 00:25:31,539
forgery they don't allow for remote code

404
00:25:28,389 --> 00:25:34,570
execution this system here doesn't allow

405
00:25:31,539 --> 00:25:37,570
any remote code execution but if we

406
00:25:34,570 --> 00:25:39,908
locate a place in in an application like

407
00:25:37,570 --> 00:25:42,039
in API or just normal place in the

408
00:25:39,909 --> 00:25:46,840
application which accepts XML we can

409
00:25:42,039 --> 00:25:51,070
adhere doctype we can point this our

410
00:25:46,840 --> 00:25:53,678
file and use this entity so xml parser

411
00:25:51,070 --> 00:25:55,720
will try to read this PHP word will

412
00:25:53,679 --> 00:25:59,080
disable eyes stuff here and we have

413
00:25:55,720 --> 00:26:07,510
remote code execution so let's move to

414
00:25:59,080 --> 00:26:11,399
my virtual machine all right now we have

415
00:26:07,510 --> 00:26:11,399
IP address for

416
00:26:18,370 --> 00:26:21,209
for

417
00:26:27,429 --> 00:26:35,080
so the first step is to create this far

418
00:26:32,229 --> 00:26:37,749
file actually this is normally done not

419
00:26:35,080 --> 00:26:41,439
on the target server but on my visual

420
00:26:37,749 --> 00:26:42,940
machine right but I must then upload

421
00:26:41,440 --> 00:26:45,369
this file to the target machine and

422
00:26:42,940 --> 00:26:48,279
point the path in this xxe let's try

423
00:26:45,369 --> 00:26:54,879
this I've downloaded just normal you

424
00:26:48,279 --> 00:26:57,700
know example jpg file I can try to embed

425
00:26:54,879 --> 00:27:03,639
here something malicious in this test

426
00:26:57,700 --> 00:27:12,279
jpg and this time port 4 4 4 4 and not

427
00:27:03,639 --> 00:27:13,119
here here right we can see how it looks

428
00:27:12,279 --> 00:27:17,799
like

429
00:27:13,119 --> 00:27:23,668
so HTML cache let's try this brutal cut

430
00:27:17,799 --> 00:27:26,769
here it looks not so nice but some were

431
00:27:23,669 --> 00:27:29,229
somewhere in the beginning we have we

432
00:27:26,769 --> 00:27:32,830
have this stuff this is PHP sterilized

433
00:27:29,229 --> 00:27:35,169
data which deserialize start system

434
00:27:32,830 --> 00:27:38,049
function and then this netiquette and by

435
00:27:35,169 --> 00:27:44,279
the way this file looks pretty normal so

436
00:27:38,049 --> 00:27:50,769
let's let's see so it was for cache and

437
00:27:44,279 --> 00:27:53,320
then test JPEG pretty normal file now

438
00:27:50,769 --> 00:27:55,119
let's start our attack so we have our

439
00:27:53,320 --> 00:28:03,009
application which is on the same ip

440
00:27:55,119 --> 00:28:06,339
address sure this simple application

441
00:28:03,009 --> 00:28:08,859
just accept an XML anyplace which

442
00:28:06,339 --> 00:28:14,259
accepts XML is ok what should I do here

443
00:28:08,859 --> 00:28:17,439
I should put here doctype so let's move

444
00:28:14,259 --> 00:28:18,609
to here this pretty standard X exceeds

445
00:28:17,440 --> 00:28:23,710
nothing fancy

446
00:28:18,609 --> 00:28:30,129
now we must point here the path to to my

447
00:28:23,710 --> 00:28:35,829
binary so it was in for www HTML cache

448
00:28:30,129 --> 00:28:38,619
as far as I remember right and we must

449
00:28:35,829 --> 00:28:40,889
use this entity as HP somewhere so for

450
00:28:38,619 --> 00:28:42,689
example let's try this here

451
00:28:40,890 --> 00:28:44,100
okay before clicking tech stocks or

452
00:28:42,690 --> 00:28:48,210
sending this to the server

453
00:28:44,100 --> 00:28:59,810
I'll try this port 4 4 4 4 so let's see

454
00:28:48,210 --> 00:29:04,080
let's see okay right fixes in a moment

455
00:28:59,810 --> 00:29:09,379
let's try this port 4 4 4 4 shouldn't

456
00:29:04,080 --> 00:29:13,710
listen right and now let's go to fixing

457
00:29:09,380 --> 00:29:16,530
missing e alright and actually it has

458
00:29:13,710 --> 00:29:21,540
here one more error I guess one more

459
00:29:16,530 --> 00:29:24,170
error let's go check stock roars but

460
00:29:21,540 --> 00:29:31,230
still connection refused can you spot an

461
00:29:24,170 --> 00:29:34,380
error here yeah one more slash because

462
00:29:31,230 --> 00:29:37,380
this is protocol and this is path so it

463
00:29:34,380 --> 00:29:42,720
must be absolute path once again

464
00:29:37,380 --> 00:29:46,650
hopefully no more errors and now as you

465
00:29:42,720 --> 00:29:48,750
can see I have remote code execution so

466
00:29:46,650 --> 00:29:52,860
pretty nice stuff I guess most of you

467
00:29:48,750 --> 00:29:56,130
know this xx see XML external entity now

468
00:29:52,860 --> 00:29:59,939
there's a way to more or less easy we

469
00:29:56,130 --> 00:30:05,670
execute code in PHP HP environments ok

470
00:29:59,940 --> 00:30:09,210
let's move on and he ll I will check my

471
00:30:05,670 --> 00:30:12,150
time I have a bit more minutes until

472
00:30:09,210 --> 00:30:14,150
they're actually this is Windows NT and

473
00:30:12,150 --> 00:30:19,310
[Music]

474
00:30:14,150 --> 00:30:22,860
it was used something in like something

475
00:30:19,310 --> 00:30:26,520
1996 so it's quite all and Microsoft

476
00:30:22,860 --> 00:30:29,449
introduced an new way to store users

477
00:30:26,520 --> 00:30:33,810
passwords it was called an T hash or

478
00:30:29,450 --> 00:30:36,420
ntlm hash and previously they used LM

479
00:30:33,810 --> 00:30:39,030
hash which is extremely easy to crack

480
00:30:36,420 --> 00:30:43,590
and this new version was a bit tougher

481
00:30:39,030 --> 00:30:46,020
and the nice thing is that most of

482
00:30:43,590 --> 00:30:48,780
people think that know until M is not

483
00:30:46,020 --> 00:30:53,370
used anymore we have Kerberos we have

484
00:30:48,780 --> 00:30:54,750
ntlm version - stuff like this no these

485
00:30:53,370 --> 00:30:59,310
are protocols

486
00:30:54,750 --> 00:31:01,650
and this ntlm hash is cash so actually

487
00:30:59,310 --> 00:31:06,030
if you try to dam hashes from your

488
00:31:01,650 --> 00:31:09,210
Windows 10 or Windows 2008 server there

489
00:31:06,030 --> 00:31:12,000
will be an TL n LM hashes and for

490
00:31:09,210 --> 00:31:14,100
example you can use very well-known tool

491
00:31:12,000 --> 00:31:17,280
many cats to do this this is an example

492
00:31:14,100 --> 00:31:20,490
session on Windows 2016 session server

493
00:31:17,280 --> 00:31:24,090
and as you can see hush aunty LM here

494
00:31:20,490 --> 00:31:30,630
hush aunty LM here and how fast it can

495
00:31:24,090 --> 00:31:33,560
be cracked actually quite fast and hash

496
00:31:30,630 --> 00:31:38,010
Cup team a couple of months ago

497
00:31:33,560 --> 00:31:42,240
announced that on one GPU it was quite

498
00:31:38,010 --> 00:31:46,110
new GPU so this RT X xx atti

499
00:31:42,240 --> 00:31:49,830
they achieved 100 something more than

500
00:31:46,110 --> 00:31:52,229
100 Giga hashes per second dissipate so

501
00:31:49,830 --> 00:31:54,780
actually every single password small

502
00:31:52,230 --> 00:31:57,960
letters capital letters special

503
00:31:54,780 --> 00:32:03,510
characters digit up to 8 characters can

504
00:31:57,960 --> 00:32:05,000
be cracked in less than 20 24 hours so

505
00:32:03,510 --> 00:32:10,860
it's quite interesting

506
00:32:05,000 --> 00:32:16,050
really really nice stuff ok and probably

507
00:32:10,860 --> 00:32:20,389
our last topic zippers and actually this

508
00:32:16,050 --> 00:32:25,820
zip format was introduced in 1989 and

509
00:32:20,390 --> 00:32:30,120
till now most or many many zip puckers

510
00:32:25,820 --> 00:32:32,550
use two different methods for encrypting

511
00:32:30,120 --> 00:32:35,340
files or encrypting archives the first

512
00:32:32,550 --> 00:32:39,360
one most of the time should be default

513
00:32:35,340 --> 00:32:41,730
one its pkzip crypto or zip crypto and

514
00:32:39,360 --> 00:32:44,149
another one is using AES

515
00:32:41,730 --> 00:32:48,450
so modern encryption algorithm and

516
00:32:44,150 --> 00:32:53,430
actually this can be cracked easily

517
00:32:48,450 --> 00:32:56,730
quite easily or quite fast it was a new

518
00:32:53,430 --> 00:33:01,200
paper a couple of months ago with first

519
00:32:56,730 --> 00:33:02,850
GPU implementation of those zips I mean

520
00:33:01,200 --> 00:33:05,190
cracking password of those zips and

521
00:33:02,850 --> 00:33:07,320
there are two types of attack the first

522
00:33:05,190 --> 00:33:10,980
type is full brute force

523
00:33:07,320 --> 00:33:13,950
full brute force so you know you know

524
00:33:10,980 --> 00:33:16,880
nothing actually and this Pete is

525
00:33:13,950 --> 00:33:20,940
something like 18 Giga hashes per second

526
00:33:16,880 --> 00:33:24,120
so every password less than 8 character

527
00:33:20,940 --> 00:33:26,460
can be cracked in actually less than

528
00:33:24,120 --> 00:33:29,309
four days on a single GPU and there is

529
00:33:26,460 --> 00:33:33,049
another attack it was well known or just

530
00:33:29,309 --> 00:33:35,940
it has been known since since in since

531
00:33:33,049 --> 00:33:41,190
1994 or something but now it's

532
00:33:35,940 --> 00:33:44,940
implemented on a GPU so if you know at

533
00:33:41,190 --> 00:33:47,639
least 13 consecutive bytes of plaintext

534
00:33:44,940 --> 00:33:49,590
I mean plain text of this encrypted zip

535
00:33:47,639 --> 00:33:53,309
you can start this known plaintext

536
00:33:49,590 --> 00:33:56,970
attack and actually the speed of

537
00:33:53,309 --> 00:34:00,389
cracking is like this so 22 Zita hashes

538
00:33:56,970 --> 00:34:07,320
per second so this is the number this

539
00:34:00,389 --> 00:34:11,040
checks per second and actually it cracks

540
00:34:07,320 --> 00:34:14,159
every password up to 15 characters in

541
00:34:11,040 --> 00:34:17,369
less than 15 hours on for very strong

542
00:34:14,159 --> 00:34:20,819
GPUs so the lesson for you is please

543
00:34:17,369 --> 00:34:23,099
don't use zip crypto or just use a

544
00:34:20,819 --> 00:34:26,449
script ography within zip or just

545
00:34:23,099 --> 00:34:27,990
compress or encrypt files using 7-zip

546
00:34:26,449 --> 00:34:31,290
all right

547
00:34:27,989 --> 00:34:35,219
another interesting stuff is this this

548
00:34:31,290 --> 00:34:39,060
is valid since since the zip format was

549
00:34:35,219 --> 00:34:41,939
born so actually you can pack in zip

550
00:34:39,060 --> 00:34:44,629
this strange file name and you can also

551
00:34:41,940 --> 00:34:48,359
pack a sibling

552
00:34:44,629 --> 00:34:55,409
within zip you can pack also zip bump

553
00:34:48,359 --> 00:34:58,380
let's try with this last example zip bom

554
00:34:55,409 --> 00:35:02,369
bom is pretty pretty normal it's pretty

555
00:34:58,380 --> 00:35:06,359
small file which can be unzip into this

556
00:35:02,369 --> 00:35:07,770
petabytes so it's quite good so if you

557
00:35:06,359 --> 00:35:11,310
are uploading this file and our

558
00:35:07,770 --> 00:35:13,440
application decompresses this is it

559
00:35:11,310 --> 00:35:16,890
blindly we can kill this application

560
00:35:13,440 --> 00:35:20,099
nice stuff but maybe this is more

561
00:35:16,890 --> 00:35:22,279
interesting do have more 10 minutes or

562
00:35:20,099 --> 00:35:22,280
not

563
00:35:22,910 --> 00:35:29,009
five minutes I will try to do this in

564
00:35:25,289 --> 00:35:32,549
five minutes then I will need to charge

565
00:35:29,009 --> 00:35:41,400
new virtual machine so it can be tricky

566
00:35:32,549 --> 00:35:44,420
I will kill maybe this one I will kill a

567
00:35:41,400 --> 00:35:44,420
right killed

568
00:35:50,440 --> 00:36:01,750
all right maybe I will kill also this

569
00:35:53,619 --> 00:36:04,660
one alright and I'll try to show a real

570
00:36:01,750 --> 00:36:08,020
working for nobility with this strange

571
00:36:04,660 --> 00:36:14,970
paths within zip all right ignore and

572
00:36:08,020 --> 00:36:14,970
let's start this network card

573
00:36:15,690 --> 00:36:27,160
alright Wi-Fi we can start so maybe my

574
00:36:20,619 --> 00:36:32,589
machine is starting and now come on come

575
00:36:27,160 --> 00:36:37,299
on come on yeah hopefully it's starting

576
00:36:32,589 --> 00:36:40,240
let's talk about fury so if you have an

577
00:36:37,299 --> 00:36:42,190
application which accepts zip file and

578
00:36:40,240 --> 00:36:44,740
you want to have remote code execution

579
00:36:42,190 --> 00:36:47,650
so we want to upload the shell you can

580
00:36:44,740 --> 00:36:50,558
name your shell or you could name your

581
00:36:47,650 --> 00:36:54,010
file like this so we go up up up up then

582
00:36:50,559 --> 00:36:57,819
your directory and shell and almost all

583
00:36:54,010 --> 00:37:01,240
is extracting zips stars blindly without

584
00:36:57,819 --> 00:37:02,799
checking for stuff like this or this if

585
00:37:01,240 --> 00:37:05,589
you want to read your password from the

586
00:37:02,799 --> 00:37:07,270
server you can create a zip with sibling

587
00:37:05,589 --> 00:37:10,270
to et Cie password or your local

588
00:37:07,270 --> 00:37:12,849
computer park symlink upload this and

589
00:37:10,270 --> 00:37:14,920
what it's decompressed you can read this

590
00:37:12,849 --> 00:37:19,410
password but now it points to ET cie

591
00:37:14,920 --> 00:37:19,410
password on the server pretty crazy and

592
00:37:19,440 --> 00:37:25,930
actually I don't know maybe two months

593
00:37:23,829 --> 00:37:28,329
ago there was a little back with this

594
00:37:25,930 --> 00:37:31,210
Cisco prime infrastructure and actually

595
00:37:28,329 --> 00:37:34,960
they used this similar trick so they

596
00:37:31,210 --> 00:37:39,460
uploaded a tar tar archive and they'd

597
00:37:34,960 --> 00:37:42,069
named the file inside here so their Java

598
00:37:39,460 --> 00:37:44,859
JSP web shell was unpacked the place

599
00:37:42,069 --> 00:37:47,910
where they were able to run run any

600
00:37:44,859 --> 00:37:51,400
commands add another interesting stuff a

601
00:37:47,910 --> 00:37:54,339
problem with OS X so MacBooks it was

602
00:37:51,400 --> 00:37:58,960
part like two weeks ago maybe so

603
00:37:54,339 --> 00:38:02,259
actually the exploit here involved using

604
00:37:58,960 --> 00:38:03,610
same link so if you park zip with a

605
00:38:02,260 --> 00:38:06,070
symlink and

606
00:38:03,610 --> 00:38:07,990
and is filed to someone they unpack this

607
00:38:06,070 --> 00:38:10,630
but they unpacked symlink and the

608
00:38:07,990 --> 00:38:13,089
sibling was malicious maliciously placed

609
00:38:10,630 --> 00:38:16,300
to a directory and a file system which

610
00:38:13,090 --> 00:38:19,090
was removed from standard checks on all

611
00:38:16,300 --> 00:38:21,580
sx and if someone was taking this he was

612
00:38:19,090 --> 00:38:23,500
actually doing remote code execution so

613
00:38:21,580 --> 00:38:26,410
you can see not only web applications

614
00:38:23,500 --> 00:38:29,430
but stuff like this are vulnerable so

615
00:38:26,410 --> 00:38:33,720
let's go to our virtual machine

616
00:38:29,430 --> 00:38:39,430
all right address five this time and

617
00:38:33,720 --> 00:38:42,370
this will be our last demo all right

618
00:38:39,430 --> 00:38:44,410
nuke cell and this Nick saw is quite

619
00:38:42,370 --> 00:38:47,200
popular document management in Java and

620
00:38:44,410 --> 00:38:51,069
you need any user name I will use your

621
00:38:47,200 --> 00:38:53,379
admin but any user name is okay here to

622
00:38:51,070 --> 00:39:00,250
have remote code execution by uploading

623
00:38:53,380 --> 00:39:10,510
a zip file so let's login let's see our

624
00:39:00,250 --> 00:39:16,960
zip file our zip file is here I'll show

625
00:39:10,510 --> 00:39:19,930
you this sure ok so it looks more or

626
00:39:16,960 --> 00:39:21,580
less like this so you can see double dot

627
00:39:19,930 --> 00:39:22,359
slash double dot slash double slash our

628
00:39:21,580 --> 00:39:25,299
shell

629
00:39:22,360 --> 00:39:27,430
this is replaced and here we have this

630
00:39:25,300 --> 00:39:29,860
charges be packed it's a simple form

631
00:39:27,430 --> 00:39:33,910
with one input box will input here a

632
00:39:29,860 --> 00:39:35,740
command and it's executed and returned

633
00:39:33,910 --> 00:39:38,410
in a standard response so let's try to

634
00:39:35,740 --> 00:39:41,259
upload this file we have worse bite

635
00:39:38,410 --> 00:39:45,790
workspaces here where we can upload

636
00:39:41,260 --> 00:39:54,600
files any user is ok we only need to

637
00:39:45,790 --> 00:39:54,600
upload a file so which is file here

638
00:39:57,030 --> 00:40:02,400
comfy and our vote

639
00:40:03,540 --> 00:40:14,190
all right create right now we must

640
00:40:12,150 --> 00:40:17,160
unpack this somehow because it's not

641
00:40:14,190 --> 00:40:22,920
automatically unpacked so it is navigate

642
00:40:17,160 --> 00:40:35,540
to this colorful file right and right

643
00:40:22,920 --> 00:40:37,860
click right click and preview disappears

644
00:40:35,540 --> 00:40:40,320
gosh all right

645
00:40:37,860 --> 00:40:47,130
maybe something is wrong with my browser

646
00:40:40,320 --> 00:40:49,880
no worries so maybe I'll start this nice

647
00:40:47,130 --> 00:40:49,880
browser Safari

648
00:40:58,520 --> 00:41:09,170
okay login and now we must only unpack

649
00:41:04,820 --> 00:41:15,260
our file so workspaces test and our

650
00:41:09,170 --> 00:41:18,230
comfy right-click and preview just let's

651
00:41:15,260 --> 00:41:20,360
see what's inside so it forces our nuke

652
00:41:18,230 --> 00:41:23,030
sio2 and practice a little error because

653
00:41:20,360 --> 00:41:28,570
the name was a bit strange and now let's

654
00:41:23,030 --> 00:41:32,900
navigate here it was maybe here JSP

655
00:41:28,570 --> 00:41:36,920
right and you can see we can issue any

656
00:41:32,900 --> 00:41:39,920
command so standard way to upload JSP

657
00:41:36,920 --> 00:41:42,800
shell it's very very common almost every

658
00:41:39,920 --> 00:41:45,680
time you encounter this zip stuff and an

659
00:41:42,800 --> 00:41:49,100
unpacking this stuff you can exploit it

660
00:41:45,680 --> 00:41:50,779
in this way alright

661
00:41:49,100 --> 00:41:53,960
they head back this era Metasploit the

662
00:41:50,780 --> 00:41:55,340
same so by importing malicious project

663
00:41:53,960 --> 00:41:58,550
they had remote code execution in

664
00:41:55,340 --> 00:42:01,300
Metasploit is really really popular okay

665
00:41:58,550 --> 00:42:01,300
that's it

