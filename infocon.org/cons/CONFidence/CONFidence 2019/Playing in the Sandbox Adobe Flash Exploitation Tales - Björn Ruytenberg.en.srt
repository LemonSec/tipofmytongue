1
00:00:06,259 --> 00:00:14,910
thank you for having me so

2
00:00:11,580 --> 00:00:17,820
self i'm Buuren item Eric I'm an master

3
00:00:14,910 --> 00:00:20,099
student at tu Eindhoven in the

4
00:00:17,820 --> 00:00:22,380
Netherlands I'm a teaching assistant for

5
00:00:20,099 --> 00:00:25,349
several graduate and undergraduate

6
00:00:22,380 --> 00:00:29,099
courses and in my spare time I'm a

7
00:00:25,349 --> 00:00:31,800
security researcher my main interests

8
00:00:29,100 --> 00:00:34,800
are hardware security and sandboxing and

9
00:00:31,800 --> 00:00:38,250
virtualization in commonly used

10
00:00:34,800 --> 00:00:41,370
enterprise products such as Adobe Flash

11
00:00:38,250 --> 00:00:44,489
and Adobe Flash what I'll be talking

12
00:00:41,370 --> 00:00:48,269
about today starting with some of the

13
00:00:44,489 --> 00:00:50,459
flash runtime basics are we going

14
00:00:48,269 --> 00:00:53,699
through an outline of the sandbox

15
00:00:50,460 --> 00:00:56,729
security architecture and then quickly

16
00:00:53,699 --> 00:01:00,479
moving on to flash exploitation two

17
00:00:56,729 --> 00:01:03,440
scenarios one in which I'm going to

18
00:01:00,479 --> 00:01:07,080
escape the local sandbox and one

19
00:01:03,440 --> 00:01:08,270
escaping the remote sandbox and for each

20
00:01:07,080 --> 00:01:14,460
of these two I'll be demonstrating

21
00:01:08,270 --> 00:01:18,630
several examples of leaking information

22
00:01:14,460 --> 00:01:23,220
stealing local files and stealing

23
00:01:18,630 --> 00:01:25,770
Windows user credentials and finally in

24
00:01:23,220 --> 00:01:28,140
light of recent efforts by various

25
00:01:25,770 --> 00:01:31,729
vendors to deprecated flash I'll be

26
00:01:28,140 --> 00:01:36,510
talking about flash its future

27
00:01:31,730 --> 00:01:42,600
specifically the gaps that are being

28
00:01:36,510 --> 00:01:47,909
left open to exploits by current current

29
00:01:42,600 --> 00:01:49,320
plans to deprecated flash so Adobe Flash

30
00:01:47,909 --> 00:01:51,990
I'm sure you're all familiar with it

31
00:01:49,320 --> 00:01:55,500
it's a plugin that runs inside your

32
00:01:51,990 --> 00:01:57,960
browser but you can also use it to

33
00:01:55,500 --> 00:02:01,200
develop applications for a desktop or

34
00:01:57,960 --> 00:02:04,800
your mobile phone and some of the use

35
00:02:01,200 --> 00:02:06,979
cases are web animations but also

36
00:02:04,800 --> 00:02:09,419
streaming DRM protected media

37
00:02:06,979 --> 00:02:11,489
browser-based games audio and video

38
00:02:09,419 --> 00:02:13,048
conferencing and basically any

39
00:02:11,489 --> 00:02:17,060
general-purpose application that you can

40
00:02:13,049 --> 00:02:22,290
think of and it's multi-platform

41
00:02:17,060 --> 00:02:23,830
so it runs on all contemporary operating

42
00:02:22,290 --> 00:02:26,629
systems

43
00:02:23,830 --> 00:02:29,720
so a flash application starts with

44
00:02:26,629 --> 00:02:31,909
writing ActionScript code and this

45
00:02:29,720 --> 00:02:36,620
ActionScript code compiles to what is

46
00:02:31,909 --> 00:02:39,200
called an SWF binary now this binary can

47
00:02:36,620 --> 00:02:42,709
then be embedded in HTML pages which is

48
00:02:39,200 --> 00:02:45,260
the most common use case but it can also

49
00:02:42,709 --> 00:02:49,280
be embedded in PDFs compiled help

50
00:02:45,260 --> 00:02:51,230
manuals HTML help manuals and most

51
00:02:49,280 --> 00:02:58,190
importantly it can also be embedded in

52
00:02:51,230 --> 00:03:01,640
office documents now running a flash

53
00:02:58,190 --> 00:03:03,019
application if you're running a flash

54
00:03:01,640 --> 00:03:04,670
application if we're running one of

55
00:03:03,019 --> 00:03:06,340
these sandboxes and today I'll be

56
00:03:04,670 --> 00:03:09,950
talking about the top two

57
00:03:06,340 --> 00:03:11,930
starting with to remote sandbox the

58
00:03:09,950 --> 00:03:16,339
Royal sandbox basically allows the flash

59
00:03:11,930 --> 00:03:17,930
application to access remote servers but

60
00:03:16,340 --> 00:03:21,950
it does not allow the flash application

61
00:03:17,930 --> 00:03:25,040
to allow the local file system local

62
00:03:21,950 --> 00:03:27,500
ways file system is tsx opposite it

63
00:03:25,040 --> 00:03:30,260
allows accessing the local file system

64
00:03:27,500 --> 00:03:37,489
but it does not allow accessing remote

65
00:03:30,260 --> 00:03:40,220
servers so suppose you have a local file

66
00:03:37,489 --> 00:03:44,209
like an HTML file embedding a flash

67
00:03:40,220 --> 00:03:45,889
application and you try to open it then

68
00:03:44,209 --> 00:03:48,459
it will be running in the what it's

69
00:03:45,889 --> 00:03:50,950
called local with filesystem sandbox and

70
00:03:48,459 --> 00:03:53,239
if you have a look at the adobe

71
00:03:50,950 --> 00:03:55,429
developer documentation there are

72
00:03:53,239 --> 00:03:58,940
actually two definitions that are

73
00:03:55,430 --> 00:04:03,769
relevant here so I'll briefly go through

74
00:03:58,940 --> 00:04:06,319
them first one defines the local with

75
00:04:03,769 --> 00:04:08,359
filesystem sandbox itself and adobe says

76
00:04:06,319 --> 00:04:11,988
this is the default sandbox for local

77
00:04:08,359 --> 00:04:14,720
files SWF files in the sandbox may not

78
00:04:11,989 --> 00:04:18,260
contact the internet or any surface in

79
00:04:14,720 --> 00:04:21,108
any way so pretty straightforward but

80
00:04:18,260 --> 00:04:24,789
then there's another definition that is

81
00:04:21,108 --> 00:04:24,789
important here and

82
00:04:24,860 --> 00:04:30,650
Adobe in this definition Adobe defines

83
00:04:28,819 --> 00:04:34,610
what constitutes a local flash

84
00:04:30,650 --> 00:04:37,068
application so a local SWF file

85
00:04:34,610 --> 00:04:42,139
describes any file reference by using

86
00:04:37,069 --> 00:04:44,060
the file protocol or a UNC path which

87
00:04:42,139 --> 00:04:49,639
does not include an IP address or a

88
00:04:44,060 --> 00:04:52,610
qualifying domain so here it's already

89
00:04:49,639 --> 00:04:56,800
starting to be a bit tricky a bit wordy

90
00:04:52,610 --> 00:05:00,020
and a bit ambiguous in a way especially

91
00:04:56,800 --> 00:05:03,889
this file protocol and this UNC path

92
00:05:00,020 --> 00:05:06,859
what are those actually and how does the

93
00:05:03,889 --> 00:05:11,680
exclusion of an IP address or qualifying

94
00:05:06,860 --> 00:05:14,240
domain effective formative protocols so

95
00:05:11,680 --> 00:05:18,289
I'll come back to those questions later

96
00:05:14,240 --> 00:05:19,879
but first if you've ever used Windows

97
00:05:18,289 --> 00:05:22,580
File Sharing you will most likely be

98
00:05:19,879 --> 00:05:24,080
familiar with this screen and what

99
00:05:22,580 --> 00:05:25,878
you're actually I'm using under the hood

100
00:05:24,080 --> 00:05:30,050
is a protocol called server message

101
00:05:25,879 --> 00:05:33,289
block or SMB and closely related to SMB

102
00:05:30,050 --> 00:05:38,300
is the universal naming convention or

103
00:05:33,289 --> 00:05:43,789
UNC now UNC is a Windows concept to

104
00:05:38,300 --> 00:05:45,889
express as a be passed to well an SMB

105
00:05:43,789 --> 00:05:49,580
server and these resources can be

106
00:05:45,889 --> 00:05:53,810
anything from shared files to devices

107
00:05:49,580 --> 00:05:57,139
and named pipes you can use any of these

108
00:05:53,810 --> 00:05:58,940
host identifiers IP address domain name

109
00:05:57,139 --> 00:06:04,310
and what is called a net buyers host

110
00:05:58,940 --> 00:06:06,409
name which originates from Windows

111
00:06:04,310 --> 00:06:09,650
networks it's it's a type of name

112
00:06:06,409 --> 00:06:12,650
resolution so if you take all this into

113
00:06:09,650 --> 00:06:15,229
account of course this raises the

114
00:06:12,650 --> 00:06:17,960
question what the paths are accepted by

115
00:06:15,229 --> 00:06:22,610
flash so let's have a look at some

116
00:06:17,960 --> 00:06:27,198
examples the first one will be accepted

117
00:06:22,610 --> 00:06:30,889
by flash well no because there's an IP

118
00:06:27,199 --> 00:06:35,509
address in there the second one some

119
00:06:30,889 --> 00:06:36,700
server comm no because it's a domain

120
00:06:35,509 --> 00:06:41,000
name

121
00:06:36,700 --> 00:06:43,340
the third one intuitively you would say

122
00:06:41,000 --> 00:06:47,270
no but the answer is yes

123
00:06:43,340 --> 00:06:49,969
and this is only the case if you're

124
00:06:47,270 --> 00:06:56,479
referencing the local host name so in

125
00:06:49,970 --> 00:06:58,430
this case some PC so the other scheme

126
00:06:56,480 --> 00:07:01,670
that's being accepted by flash is to

127
00:06:58,430 --> 00:07:03,380
file your RI and if you want to have a

128
00:07:01,670 --> 00:07:06,650
look at the definition you have to go

129
00:07:03,380 --> 00:07:11,180
back all the way to 1994 this is

130
00:07:06,650 --> 00:07:14,120
actually the entire RFC and the most

131
00:07:11,180 --> 00:07:16,370
important bit is already on top it says

132
00:07:14,120 --> 00:07:18,740
that the file URL scheme is used to

133
00:07:16,370 --> 00:07:21,560
designate files accessible on a

134
00:07:18,740 --> 00:07:24,410
particular host computer but this scheme

135
00:07:21,560 --> 00:07:26,720
unlike most other URL schemes does not

136
00:07:24,410 --> 00:07:30,920
designate a resource that is universally

137
00:07:26,720 --> 00:07:33,760
accessible over the internet so this is

138
00:07:30,920 --> 00:07:36,410
quite an interesting exception because

139
00:07:33,760 --> 00:07:41,330
below you already see there's a host

140
00:07:36,410 --> 00:07:43,820
identifier in there but it turns out

141
00:07:41,330 --> 00:07:46,700
that because the RFC does not specify

142
00:07:43,820 --> 00:07:50,780
which protocols should be used to fetch

143
00:07:46,700 --> 00:07:52,969
this resource basically every

144
00:07:50,780 --> 00:07:55,489
implementation out there just ignores

145
00:07:52,970 --> 00:07:58,669
the host identifier and just assumes the

146
00:07:55,490 --> 00:08:04,850
path to be referencing the local file

147
00:07:58,669 --> 00:08:07,520
system so here's an example on Windows

148
00:08:04,850 --> 00:08:12,650
just the word document host is on the

149
00:08:07,520 --> 00:08:14,810
local C Drive and well apart from the

150
00:08:12,650 --> 00:08:16,880
former RSC there's another one just

151
00:08:14,810 --> 00:08:20,390
highlighting some non-standard syntax

152
00:08:16,880 --> 00:08:23,150
variations but that's pretty much hits

153
00:08:20,390 --> 00:08:27,080
for the file you arrived so in terms of

154
00:08:23,150 --> 00:08:29,169
flash flash doesn't really impose any

155
00:08:27,080 --> 00:08:32,539
restrictions on the file you're right

156
00:08:29,169 --> 00:08:34,520
under the assumption that you cannot

157
00:08:32,539 --> 00:08:41,750
express remote pass so there's nothing

158
00:08:34,520 --> 00:08:46,460
to restrict okay so if you want to

159
00:08:41,750 --> 00:08:51,350
escape the local sandbox now first let's

160
00:08:46,460 --> 00:08:53,600
summarize what we have so far so

161
00:08:51,350 --> 00:08:57,680
we have to look with file system sandbox

162
00:08:53,600 --> 00:09:00,460
and it lets us access UNC pass and it

163
00:08:57,680 --> 00:09:04,339
lets us use the file schemes but the

164
00:09:00,460 --> 00:09:07,610
flash restricts UNC to local hosts only

165
00:09:04,339 --> 00:09:09,860
and the file schemes takes only local

166
00:09:07,610 --> 00:09:13,100
pass so the question is if you want to

167
00:09:09,860 --> 00:09:17,240
escape the local sent box where do we go

168
00:09:13,100 --> 00:09:21,410
from here well let's go back to past

169
00:09:17,240 --> 00:09:24,500
expressions on Windows flash is a

170
00:09:21,410 --> 00:09:29,089
multi-platform runtime and on Windows it

171
00:09:24,500 --> 00:09:30,950
uses the win32 shell FBI now there's a

172
00:09:29,089 --> 00:09:33,200
book over here that I found and it says

173
00:09:30,950 --> 00:09:37,820
Windows 2000 but it's actually much

174
00:09:33,200 --> 00:09:40,610
older and it's quite an interesting API

175
00:09:37,820 --> 00:09:43,130
in the sense that it has a pack of

176
00:09:40,610 --> 00:09:46,310
tricks that you can use to do some

177
00:09:43,130 --> 00:09:51,350
interesting stuff and one is this you

178
00:09:46,310 --> 00:09:55,729
can express UNC tags inside the file

179
00:09:51,350 --> 00:09:59,180
scheme so in our example we have this

180
00:09:55,730 --> 00:10:01,970
path to a remote resource in the UNC

181
00:09:59,180 --> 00:10:03,829
syntax but if you want to express that

182
00:10:01,970 --> 00:10:07,100
in a file scheme you simply add another

183
00:10:03,830 --> 00:10:13,240
slash swap forward and back slashes and

184
00:10:07,100 --> 00:10:20,300
then include the entire UNC URL now

185
00:10:13,240 --> 00:10:23,870
flash actually parses this as being a

186
00:10:20,300 --> 00:10:28,420
local path so for now we can access

187
00:10:23,870 --> 00:10:28,420
remote resources from the local sandbox

188
00:10:30,100 --> 00:10:35,180
so this is of course interesting we just

189
00:10:32,750 --> 00:10:38,089
escape the local sandbox but we want to

190
00:10:35,180 --> 00:10:40,790
steal some files so the approach is

191
00:10:38,089 --> 00:10:43,180
basically you append local content to

192
00:10:40,790 --> 00:10:46,520
the SMB resource requests that you make

193
00:10:43,180 --> 00:10:48,920
a couple of basic steps so you read the

194
00:10:46,520 --> 00:10:53,240
file that you're interested in and then

195
00:10:48,920 --> 00:10:56,390
you take an account of the SMB path

196
00:10:53,240 --> 00:10:58,220
restrictions so the file you're reading

197
00:10:56,390 --> 00:11:02,380
you need to split in at most two hundred

198
00:10:58,220 --> 00:11:06,760
and sixty bytes and then URL encode

199
00:11:02,380 --> 00:11:08,710
whatever content it has then you append

200
00:11:06,760 --> 00:11:10,569
the chunks to all the SMB resource

201
00:11:08,710 --> 00:11:12,700
requests you're going to make you make

202
00:11:10,570 --> 00:11:15,610
the requests and only attacker ends you

203
00:11:12,700 --> 00:11:19,990
capture all your requests and reassemble

204
00:11:15,610 --> 00:11:24,100
the entire file so let's have a look how

205
00:11:19,990 --> 00:11:26,170
that works in practice on the Left

206
00:11:24,100 --> 00:11:30,790
there's the attacker machine and on the

207
00:11:26,170 --> 00:11:34,420
right the victim machine so first I'll

208
00:11:30,790 --> 00:11:37,719
be running an SMB lover scripts that

209
00:11:34,420 --> 00:11:40,020
access an SMB server and on the right

210
00:11:37,720 --> 00:11:44,890
side the victim will be opening this

211
00:11:40,020 --> 00:11:46,780
very trustworthy looking file and as you

212
00:11:44,890 --> 00:11:50,260
can see it reads the winners hosts file

213
00:11:46,780 --> 00:11:54,810
and sense it in chunks to the attacker

214
00:11:50,260 --> 00:11:57,430
side and as you can see we've started

215
00:11:54,810 --> 00:12:05,890
reconstructed the entire file on your

216
00:11:57,430 --> 00:12:07,930
attacker end ok so we can escape the

217
00:12:05,890 --> 00:12:10,330
local sandbox we can export rate local

218
00:12:07,930 --> 00:12:13,870
files but there's something interesting

219
00:12:10,330 --> 00:12:17,440
going on here because apparently we can

220
00:12:13,870 --> 00:12:19,780
access remote SMB servers so for me to

221
00:12:17,440 --> 00:12:23,820
trigger the question can we actually

222
00:12:19,780 --> 00:12:27,750
leverage SMB for other kinds of attacks

223
00:12:23,820 --> 00:12:31,420
so let's talk about SMB in particularly

224
00:12:27,750 --> 00:12:34,030
SME authentication as a/b supports

225
00:12:31,420 --> 00:12:38,829
various authentication schemes and one

226
00:12:34,030 --> 00:12:41,140
of them is called Antillean ntlm v2 and

227
00:12:38,830 --> 00:12:43,330
in this scheme you lock on user a

228
00:12:41,140 --> 00:12:45,420
username and a hash of to user passwords

229
00:12:43,330 --> 00:12:48,640
and there's a challenge response

230
00:12:45,420 --> 00:12:52,860
mechanism involved so I'll briefly go

231
00:12:48,640 --> 00:12:55,390
through how that works we have a user

232
00:12:52,860 --> 00:12:57,220
and the user enters the username and

233
00:12:55,390 --> 00:13:00,670
password to log onto the Windows machine

234
00:12:57,220 --> 00:13:03,250
and instructs the Windows client who

235
00:13:00,670 --> 00:13:06,880
connects you to server now what happen

236
00:13:03,250 --> 00:13:10,240
is the client sends will send a username

237
00:13:06,880 --> 00:13:13,720
in plaintext to the server the server

238
00:13:10,240 --> 00:13:15,890
will respond with a challenge and the

239
00:13:13,720 --> 00:13:18,250
client will use this challenge to

240
00:13:15,890 --> 00:13:23,240
encrypt a hash if to use a password and

241
00:13:18,250 --> 00:13:25,310
then send it back now after you if

242
00:13:23,240 --> 00:13:28,279
everything went well then basically the

243
00:13:25,310 --> 00:13:33,109
user will be authorized to access the

244
00:13:28,279 --> 00:13:35,870
resources on the server now this seems

245
00:13:33,110 --> 00:13:39,529
or might seem a solid approach but it is

246
00:13:35,870 --> 00:13:42,890
not really there is an attack called the

247
00:13:39,529 --> 00:13:45,920
SMB relay attack and again I will

248
00:13:42,890 --> 00:13:48,019
briefly go through how this works so the

249
00:13:45,920 --> 00:13:50,750
username locks onto the Windows machine

250
00:13:48,019 --> 00:13:52,550
and then will try to access some

251
00:13:50,750 --> 00:13:54,800
resource on the server but this time

252
00:13:52,550 --> 00:13:57,410
there's an attacker in the middle and so

253
00:13:54,800 --> 00:14:00,859
what will happen is the Windows client

254
00:13:57,410 --> 00:14:03,589
will send the user name and then means

255
00:14:00,860 --> 00:14:05,420
the attacker has to username now the

256
00:14:03,589 --> 00:14:09,500
attacker will forward to username to the

257
00:14:05,420 --> 00:14:11,149
server and the server will respond with

258
00:14:09,500 --> 00:14:16,790
a challenge and that means the attacker

259
00:14:11,149 --> 00:14:19,970
has the challenge sorry I'm moving too

260
00:14:16,790 --> 00:14:23,390
fast the challenge will be forwarded to

261
00:14:19,970 --> 00:14:26,390
the client and the client will use this

262
00:14:23,390 --> 00:14:28,699
to encrypt a hash of the password and

263
00:14:26,390 --> 00:14:30,890
then send it back and that means that

264
00:14:28,699 --> 00:14:33,890
the attacker obtains the entire block

265
00:14:30,890 --> 00:14:36,290
now since the attacker already have to

266
00:14:33,890 --> 00:14:38,810
challenge this means the attacker can

267
00:14:36,290 --> 00:14:42,380
trivially decrypt it and obtain the hash

268
00:14:38,810 --> 00:14:43,939
of the user password this entire block

269
00:14:42,380 --> 00:14:47,000
is then again forwarded to the server

270
00:14:43,940 --> 00:14:49,130
and well that basically means that the

271
00:14:47,000 --> 00:14:54,410
attacker can authenticate himself

272
00:14:49,130 --> 00:14:56,149
impersonate himself as the victim so the

273
00:14:54,410 --> 00:14:58,850
bottom line is the attacker actually

274
00:14:56,149 --> 00:15:03,380
obtains the plaintext username and a

275
00:14:58,850 --> 00:15:07,190
hash of the user password so if you have

276
00:15:03,380 --> 00:15:09,500
this ntlm hash what can you do with it

277
00:15:07,190 --> 00:15:13,000
so first of all you can mount what is

278
00:15:09,500 --> 00:15:15,040
called a pass to hash attack

279
00:15:13,000 --> 00:15:16,930
one approach is that the attacker

280
00:15:15,040 --> 00:15:19,150
authenticates on the third-party host

281
00:15:16,930 --> 00:15:20,560
that the victim is allowed to access and

282
00:15:19,150 --> 00:15:24,579
that's the scenario we've seen on the

283
00:15:20,560 --> 00:15:26,829
previous slide one other approach is

284
00:15:24,580 --> 00:15:28,300
that the ascend attacker authenticates

285
00:15:26,830 --> 00:15:31,930
on the client machine but this was

286
00:15:28,300 --> 00:15:33,880
eventually patched for Microsoft and the

287
00:15:31,930 --> 00:15:35,260
third option is that the attacker tries

288
00:15:33,880 --> 00:15:38,590
to authenticate against the remote

289
00:15:35,260 --> 00:15:41,230
desktop surface which interestingly does

290
00:15:38,590 --> 00:15:42,790
not work on Windows 10 because got

291
00:15:41,230 --> 00:15:49,450
patched but it never got patched on

292
00:15:42,790 --> 00:15:53,740
Windows 8.1 and Windows Server 2016 if

293
00:15:49,450 --> 00:15:55,870
I'm correct here now finally if that all

294
00:15:53,740 --> 00:15:58,840
fails you can try to obtain the

295
00:15:55,870 --> 00:16:04,090
plaintext password and you can do that

296
00:15:58,840 --> 00:16:06,520
by using rainbow tables and you can also

297
00:16:04,090 --> 00:16:10,030
try to brute force the hash and to give

298
00:16:06,520 --> 00:16:12,040
you a rough idea basically an eight

299
00:16:10,030 --> 00:16:15,100
character password permutation can be

300
00:16:12,040 --> 00:16:17,740
found in under six hours and this is a

301
00:16:15,100 --> 00:16:20,560
number from 2012 so you can imagine that

302
00:16:17,740 --> 00:16:25,120
with today's hardware it will be much

303
00:16:20,560 --> 00:16:29,410
faster than that right so what does that

304
00:16:25,120 --> 00:16:31,210
mean for our attacker scenario well we

305
00:16:29,410 --> 00:16:33,219
have our malicious flash application

306
00:16:31,210 --> 00:16:36,490
running on the victim PC so basically we

307
00:16:33,220 --> 00:16:37,600
can instruct it to connect to an SMB

308
00:16:36,490 --> 00:16:41,680
server of our choosing

309
00:16:37,600 --> 00:16:44,850
so what we can do is run a Python script

310
00:16:41,680 --> 00:16:48,849
called SMB trap an SMB trap is basically

311
00:16:44,850 --> 00:16:53,980
a Windows user credentials logger while

312
00:16:48,850 --> 00:16:58,720
acting as an SMB server so going back to

313
00:16:53,980 --> 00:17:00,430
our attacker scenario the application

314
00:16:58,720 --> 00:17:03,010
will try to connect to the attacker

315
00:17:00,430 --> 00:17:05,319
control server but there are something

316
00:17:03,010 --> 00:17:08,410
different this time because Windows will

317
00:17:05,319 --> 00:17:10,379
try to authenticate as a guest now

318
00:17:08,410 --> 00:17:14,170
obviously this is not what we want so we

319
00:17:10,380 --> 00:17:16,680
tell the clients that it cannot access

320
00:17:14,170 --> 00:17:20,199
the resource without authenticating and

321
00:17:16,680 --> 00:17:22,420
basically this restores the regular

322
00:17:20,199 --> 00:17:25,449
logon procedure which we've discussed in

323
00:17:22,420 --> 00:17:26,410
the previous slides in that in the sense

324
00:17:25,449 --> 00:17:29,350
that the

325
00:17:26,410 --> 00:17:32,080
kind sense the plaintext username to the

326
00:17:29,350 --> 00:17:34,389
server the server sends back to

327
00:17:32,080 --> 00:17:37,030
challenge and then the clients will send

328
00:17:34,390 --> 00:17:42,730
back a hash of the password encrypted

329
00:17:37,030 --> 00:17:45,040
with that challenge so here's an example

330
00:17:42,730 --> 00:17:53,170
how you can turn that into an actual

331
00:17:45,040 --> 00:17:56,250
attack be running as a beat trap and on

332
00:17:53,170 --> 00:18:00,250
the victims side will be again opening a

333
00:17:56,250 --> 00:18:05,740
local file this time we'll be opening it

334
00:18:00,250 --> 00:18:09,670
in Firefox and as you can see we just

335
00:18:05,740 --> 00:18:11,980
escaped the sandbox and I put a rainbow

336
00:18:09,670 --> 00:18:14,680
table in there so it as a be trap

337
00:18:11,980 --> 00:18:24,160
managed to match the hash against this

338
00:18:14,680 --> 00:18:26,470
very secure password so we can export

339
00:18:24,160 --> 00:18:29,800
eight local files we can disclose them

340
00:18:26,470 --> 00:18:32,470
to a remote server and we can also steal

341
00:18:29,800 --> 00:18:35,169
Windows user credentials so I've been

342
00:18:32,470 --> 00:18:37,270
having a look at how this is actually

343
00:18:35,170 --> 00:18:39,880
possible and it just turns out there are

344
00:18:37,270 --> 00:18:42,490
a number of fundamental issues in

345
00:18:39,880 --> 00:18:44,740
sandbox policies so starting with these

346
00:18:42,490 --> 00:18:48,490
arbitrary definitions of what

347
00:18:44,740 --> 00:18:51,000
constitutes a local file and what

348
00:18:48,490 --> 00:18:55,020
constitutes the local with filesystem

349
00:18:51,000 --> 00:18:58,530
sandbox there are very wordy and very

350
00:18:55,020 --> 00:19:00,910
ambiguous and apparently Adobe's

351
00:18:58,530 --> 00:19:03,790
developers didn't know what to do with

352
00:19:00,910 --> 00:19:07,210
it either so that means that this this

353
00:19:03,790 --> 00:19:09,850
blacklist approach does not cover all

354
00:19:07,210 --> 00:19:15,480
corner cases like the examples I just

355
00:19:09,850 --> 00:19:15,480
showed and it allows to turn

356
00:19:15,960 --> 00:19:25,360
remote Pass actually into into a local

357
00:19:21,760 --> 00:19:28,410
path and so this renders flash subject

358
00:19:25,360 --> 00:19:31,120
to well known as a be vulnerable ''tis

359
00:19:28,410 --> 00:19:35,260
now the interesting thing is is for

360
00:19:31,120 --> 00:19:39,189
mobility is House Department as agnostic

361
00:19:35,260 --> 00:19:41,080
it worked in all browsers and chrome and

362
00:19:39,190 --> 00:19:43,900
etch are actually two special cases here

363
00:19:41,080 --> 00:19:46,629
because they apply their own sandbox on

364
00:19:43,900 --> 00:19:53,920
top of the flash hand box but despite

365
00:19:46,630 --> 00:19:57,610
this mechanism the not going past the

366
00:19:53,920 --> 00:20:01,720
the path to that are created was just

367
00:19:57,610 --> 00:20:03,729
being accepted as well now it turns out

368
00:20:01,720 --> 00:20:06,580
that the sandbox policies were largely

369
00:20:03,730 --> 00:20:09,490
unmodified since Flash Player 9 which

370
00:20:06,580 --> 00:20:11,169
was released in 2000 exists in six so

371
00:20:09,490 --> 00:20:15,030
that means that this for mobility has

372
00:20:11,170 --> 00:20:21,700
actually been present for over ten years

373
00:20:15,030 --> 00:20:23,170
it was fixed in Flash Player 23 and in

374
00:20:21,700 --> 00:20:25,210
this version Adobe introduced new

375
00:20:23,170 --> 00:20:27,220
sandbox policies basically the they

376
00:20:25,210 --> 00:20:29,920
dropped the entire local with file

377
00:20:27,220 --> 00:20:31,750
system sandbox and there were also all

378
00:20:29,920 --> 00:20:35,860
the local file system API is because

379
00:20:31,750 --> 00:20:37,990
they had no user anymore and local

380
00:20:35,860 --> 00:20:40,719
networking became the new default

381
00:20:37,990 --> 00:20:43,330
sandbox which is pretty much similar to

382
00:20:40,720 --> 00:20:46,030
the remote sandbox in the sense that you

383
00:20:43,330 --> 00:20:51,179
can access remote servers but you cannot

384
00:20:46,030 --> 00:20:54,790
access the local file system so this was

385
00:20:51,180 --> 00:20:56,950
it was a change that required web

386
00:20:54,790 --> 00:21:00,450
developers to refactor their existing

387
00:20:56,950 --> 00:21:03,580
applications for local file system

388
00:21:00,450 --> 00:21:06,490
interaction developers had to move to

389
00:21:03,580 --> 00:21:09,520
html5 techniques which at the time was

390
00:21:06,490 --> 00:21:14,680
still being considered a competitor to

391
00:21:09,520 --> 00:21:17,200
flash and interestingly it also covertly

392
00:21:14,680 --> 00:21:19,980
added some restrictions to SMB access in

393
00:21:17,200 --> 00:21:24,330
the other sandbox the remote sandbox and

394
00:21:19,980 --> 00:21:24,330
I'll be talking about that later

395
00:21:26,320 --> 00:21:33,668
okay so here are the lease notes for

396
00:21:28,989 --> 00:21:36,159
Flash Player 23 and well the new sandbox

397
00:21:33,669 --> 00:21:38,379
policies they seem a solace approach but

398
00:21:36,159 --> 00:21:41,350
there's no mentioning of this remote

399
00:21:38,379 --> 00:21:43,049
sandbox so for me it is triggered a

400
00:21:41,350 --> 00:21:46,719
question Hey

401
00:21:43,049 --> 00:21:48,489
with this sandbox b4 roll or would they

402
00:21:46,720 --> 00:21:54,070
have patched this vulnerability in the

403
00:21:48,489 --> 00:21:55,590
remote sandbox as well so moving on to

404
00:21:54,070 --> 00:21:58,989
the remote set box

405
00:21:55,590 --> 00:22:03,369
it turns out that they actually did

406
00:21:58,989 --> 00:22:06,909
change the remote sandbox and well

407
00:22:03,369 --> 00:22:09,908
basically the wrong sandbox now rejects

408
00:22:06,909 --> 00:22:12,070
human C and file style paths and in fact

409
00:22:09,909 --> 00:22:15,179
it rejects any URL which is being

410
00:22:12,070 --> 00:22:18,609
prefixed not being prefixed by HTTP or

411
00:22:15,179 --> 00:22:22,239
HTTPS so it turns out that flash 23

412
00:22:18,609 --> 00:22:25,389
actually introduced a whitelist approach

413
00:22:22,239 --> 00:22:28,570
and so if you want to escape the remote

414
00:22:25,389 --> 00:22:34,289
sandbox you have to think about other

415
00:22:28,570 --> 00:22:40,178
options so let's go to back to SMB and

416
00:22:34,289 --> 00:22:42,730
back in 2015 there was a new new

417
00:22:40,179 --> 00:22:45,070
publication on a new attack and it

418
00:22:42,730 --> 00:22:47,859
basically works like this you have an

419
00:22:45,070 --> 00:22:50,529
HTTP client and it requests some file

420
00:22:47,859 --> 00:22:53,590
from a remote attack control server and

421
00:22:50,529 --> 00:22:57,489
the server will respond with a 302

422
00:22:53,590 --> 00:22:59,649
redirect header but in the location

423
00:22:57,489 --> 00:23:04,359
header it will not put another HTTP

424
00:22:59,649 --> 00:23:08,738
resource but a reference to well the

425
00:23:04,359 --> 00:23:14,189
same kind of file style UNC path that I

426
00:23:08,739 --> 00:23:14,190
previously showed in the previous slide

427
00:23:14,309 --> 00:23:22,690
so this vulnerability it's actually well

428
00:23:17,200 --> 00:23:24,940
documented and it turns out that it that

429
00:23:22,690 --> 00:23:28,059
it effects all of these win32 API

430
00:23:24,940 --> 00:23:30,609
functions so any application that uses

431
00:23:28,059 --> 00:23:33,668
any of these functions is actually

432
00:23:30,609 --> 00:23:35,109
fallible and this trigger to industry to

433
00:23:33,669 --> 00:23:38,530
patch their software

434
00:23:35,109 --> 00:23:41,730
so obviously this trigger question

435
00:23:38,530 --> 00:23:46,780
for me is Adobe Flash vulnerable as well

436
00:23:41,730 --> 00:23:48,490
so I test this for this using this setup

437
00:23:46,780 --> 00:23:52,170
and I'll briefly go through how it works

438
00:23:48,490 --> 00:23:54,940
we are going to have the client with our

439
00:23:52,170 --> 00:23:58,510
malicious flash application the clients

440
00:23:54,940 --> 00:24:00,760
will try to download a file from the

441
00:23:58,510 --> 00:24:04,060
attack control server the server will

442
00:24:00,760 --> 00:24:07,120
respond with an HTTP 302 referencing

443
00:24:04,060 --> 00:24:09,550
this file style UNC path and then if

444
00:24:07,120 --> 00:24:16,320
everything went well the client will

445
00:24:09,550 --> 00:24:19,570
connect to our middle Isha's SMB server

446
00:24:16,320 --> 00:24:25,270
so the first try it didn't really work

447
00:24:19,570 --> 00:24:28,480
so here's a Wireshark trace and we can

448
00:24:25,270 --> 00:24:29,710
see that while the flash application is

449
00:24:28,480 --> 00:24:32,950
actually doing a request

450
00:24:29,710 --> 00:24:34,450
there's no SMB traffic in there but

451
00:24:32,950 --> 00:24:38,290
there are some other interesting things

452
00:24:34,450 --> 00:24:40,780
like this thing on top it says there's a

453
00:24:38,290 --> 00:24:43,780
get request for a file called cross

454
00:24:40,780 --> 00:24:46,990
domain dot XML this is pretty

455
00:24:43,780 --> 00:24:51,340
interesting because I didn't program my

456
00:24:46,990 --> 00:24:53,530
flash application to do that so it turns

457
00:24:51,340 --> 00:24:55,270
out that is cross domain that XML is a

458
00:24:53,530 --> 00:24:57,820
reference to what is called the cross

459
00:24:55,270 --> 00:25:01,450
domain policy file and if you're

460
00:24:57,820 --> 00:25:04,450
familiar with HTTP course it's it's

461
00:25:01,450 --> 00:25:08,170
pretty similar in that it's well in this

462
00:25:04,450 --> 00:25:10,090
case it dictates when the SWF is allowed

463
00:25:08,170 --> 00:25:12,250
to reload resources from a different

464
00:25:10,090 --> 00:25:16,060
domain other than the one is this hosted

465
00:25:12,250 --> 00:25:17,710
on so for example if you have a flash

466
00:25:16,060 --> 00:25:21,760
application and it's hosted on domain

467
00:25:17,710 --> 00:25:24,280
a.com it will not be able to load any

468
00:25:21,760 --> 00:25:26,260
resources from domain be calm if the

469
00:25:24,280 --> 00:25:32,770
main build condos not authorize the

470
00:25:26,260 --> 00:25:35,920
flash application to do that so again

471
00:25:32,770 --> 00:25:38,590
here's that with definition and the most

472
00:25:35,920 --> 00:25:42,070
interesting thing is apart from it being

473
00:25:38,590 --> 00:25:46,389
again very wordy that there are also a

474
00:25:42,070 --> 00:25:48,270
lot of reference to domains but we're

475
00:25:46,390 --> 00:25:51,739
actually interested in is what happens

476
00:25:48,270 --> 00:25:55,529
when we're switching protocols

477
00:25:51,739 --> 00:25:59,609
redirecting for HTTP to SMB now there's

478
00:25:55,529 --> 00:26:03,450
nothing in the spec that that tells us

479
00:25:59,609 --> 00:26:06,259
why the attack is being blocked but we

480
00:26:03,450 --> 00:26:08,609
do see that the Wireshark trace shows

481
00:26:06,259 --> 00:26:11,759
the cross domain direction now being

482
00:26:08,609 --> 00:26:15,840
requested from the machine that's

483
00:26:11,759 --> 00:26:18,659
hosting the flash application so that is

484
00:26:15,840 --> 00:26:21,840
already contradicting the specification

485
00:26:18,659 --> 00:26:24,659
but I figured okay you know what let's

486
00:26:21,840 --> 00:26:27,299
just construct a least restrictive cross

487
00:26:24,659 --> 00:26:28,799
domain policy this is just a few lines

488
00:26:27,299 --> 00:26:32,549
of XML code telling the flash

489
00:26:28,799 --> 00:26:38,330
application it's it's okay you can

490
00:26:32,549 --> 00:26:40,529
access any resource on this domain and

491
00:26:38,330 --> 00:26:43,649
now I'm going to show you what happens

492
00:26:40,529 --> 00:26:48,899
when we feed that policy to the flash

493
00:26:43,649 --> 00:26:51,478
runtime so on the attacker side I will

494
00:26:48,899 --> 00:26:53,699
be running two scripts one is a web

495
00:26:51,479 --> 00:26:58,320
server and the other one is as a beach

496
00:26:53,700 --> 00:27:02,190
wrap and we'll be using edge this time

497
00:26:58,320 --> 00:27:07,830
on the client machine navigating to the

498
00:27:02,190 --> 00:27:11,690
web server and as you can see we've

499
00:27:07,830 --> 00:27:14,369
again escaped the remote sandbox and

500
00:27:11,690 --> 00:27:21,539
managed to obtain the user password on

501
00:27:14,369 --> 00:27:23,539
the attacker side so this one Realty

502
00:27:21,539 --> 00:27:28,169
actually broke though week's patch for

503
00:27:23,539 --> 00:27:30,149
the former vulnerability and it exposes

504
00:27:28,169 --> 00:27:33,539
Windows user credentials to a remote

505
00:27:30,149 --> 00:27:35,219
server and it turns out that well the

506
00:27:33,539 --> 00:27:37,289
problem basically is inconsistent

507
00:27:35,220 --> 00:27:41,549
powerful relation this whitelist

508
00:27:37,289 --> 00:27:44,009
approach is seemingly very solid but the

509
00:27:41,549 --> 00:27:48,629
check is only done once and it's not

510
00:27:44,009 --> 00:27:50,580
being applied to any redirects the

511
00:27:48,629 --> 00:27:52,738
interesting thing also is that it

512
00:27:50,580 --> 00:27:55,019
affects Firefox Internet Explorer and

513
00:27:52,739 --> 00:27:59,609
Microsoft Office but not chrome and edge

514
00:27:55,019 --> 00:28:02,840
and chrome - were probably not for a

515
00:27:59,609 --> 00:28:04,178
role as a response to the previous

516
00:28:02,840 --> 00:28:07,119
vulnerability

517
00:28:04,179 --> 00:28:09,659
and for Chrome we can actually see that

518
00:28:07,119 --> 00:28:13,119
this this is this that this is the case

519
00:28:09,659 --> 00:28:15,999
so Chrome has this nice developer tool

520
00:28:13,119 --> 00:28:18,070
called net internals and we can actually

521
00:28:15,999 --> 00:28:23,139
see what happens when it processes the

522
00:28:18,070 --> 00:28:25,629
redirect response and as you can see

523
00:28:23,139 --> 00:28:32,830
here it does not take to redirect

524
00:28:25,629 --> 00:28:34,539
because it's being considered unsafe so

525
00:28:32,830 --> 00:28:38,168
this one reveals he was fixed in Flash

526
00:28:34,539 --> 00:28:40,860
Player 26 and well basically it does so

527
00:28:38,169 --> 00:28:45,879
by applying improve validation to

528
00:28:40,860 --> 00:28:48,219
redirects as well the interesting thing

529
00:28:45,879 --> 00:28:51,369
is that it's required again refactoring

530
00:28:48,220 --> 00:28:54,659
from for existing flash applications

531
00:28:51,369 --> 00:28:59,289
because it now dropped support for SMB

532
00:28:54,659 --> 00:29:01,179
altogether and also it was a bit of

533
00:28:59,289 --> 00:29:04,570
fortunate that this change was not

534
00:29:01,179 --> 00:29:11,139
actually reflected in the change logs or

535
00:29:04,570 --> 00:29:15,970
the developer documentation so the

536
00:29:11,139 --> 00:29:18,600
future of Flash I'm sure you've all seen

537
00:29:15,970 --> 00:29:21,610
this announcement back in August 2017

538
00:29:18,600 --> 00:29:27,369
that Adobe is going to demarcate flash

539
00:29:21,610 --> 00:29:30,699
by 2020 and so I figured it was a good

540
00:29:27,369 --> 00:29:33,549
idea to have a look at what the industry

541
00:29:30,700 --> 00:29:36,070
is doing to deprecated so from the

542
00:29:33,549 --> 00:29:40,570
browser perspectives across the board we

543
00:29:36,070 --> 00:29:44,439
see all sorts of measures like vendeur

544
00:29:40,570 --> 00:29:49,749
curated blacklist or whitelist some form

545
00:29:44,440 --> 00:29:52,360
of click to play and we also see that we

546
00:29:49,749 --> 00:29:55,419
the plug-in will basically be disabled

547
00:29:52,360 --> 00:29:58,860
by default at the end of this year and

548
00:29:55,419 --> 00:30:03,369
plug-in support will be dropped by early

549
00:29:58,860 --> 00:30:07,570
2020 or late 2020 in some of the other

550
00:30:03,369 --> 00:30:10,059
cases what is interesting though that

551
00:30:07,570 --> 00:30:12,730
Internet Explorer is an exception to

552
00:30:10,059 --> 00:30:15,700
this because there are no is

553
00:30:12,730 --> 00:30:17,999
restrictions to flash until later this

554
00:30:15,700 --> 00:30:17,999
year

555
00:30:19,900 --> 00:30:27,770
in response to web de web browser

556
00:30:24,200 --> 00:30:30,830
vendors deprecating flash the web has

557
00:30:27,770 --> 00:30:31,700
moved to open web technologies so for

558
00:30:30,830 --> 00:30:35,090
streaming

559
00:30:31,700 --> 00:30:38,450
there's html5 video for web UI

560
00:30:35,090 --> 00:30:40,309
animations there CSS and J's video

561
00:30:38,450 --> 00:30:42,470
conferencing there's web RTC and for

562
00:30:40,309 --> 00:30:48,559
games and anything else we have the

563
00:30:42,470 --> 00:30:50,780
canvas WebGL and web assembly and as you

564
00:30:48,559 --> 00:30:54,230
can see this has actually resulted in

565
00:30:50,780 --> 00:31:00,350
reduced market share from flash down

566
00:30:54,230 --> 00:31:06,679
from almost 26% in 2012 to 3.5% at the

567
00:31:00,350 --> 00:31:12,260
end of May of this year now this

568
00:31:06,679 --> 00:31:13,340
obviously triggers the question is flash

569
00:31:12,260 --> 00:31:15,980
the thing of the past

570
00:31:13,340 --> 00:31:19,059
well web browsers are not the only

571
00:31:15,980 --> 00:31:21,740
attack factory in fact Flash Player is

572
00:31:19,059 --> 00:31:25,639
distributed via mandatory Windows

573
00:31:21,740 --> 00:31:27,590
updates at least until 2020 there are no

574
00:31:25,640 --> 00:31:31,130
further announcements by Microsoft yet

575
00:31:27,590 --> 00:31:33,350
at this point and this is especially a

576
00:31:31,130 --> 00:31:36,590
problem for Windows 10 and Windows

577
00:31:33,350 --> 00:31:40,909
Server 2016 and up because you cannot

578
00:31:36,590 --> 00:31:44,928
opt out or uninstall Flash Player on

579
00:31:40,910 --> 00:31:47,660
Windows 8.1 Windows Server 2012 or two

580
00:31:44,929 --> 00:31:50,030
it's a little bit better because you can

581
00:31:47,660 --> 00:31:52,340
actually uninstall flash but you will

582
00:31:50,030 --> 00:31:54,470
need to do so with each Flash Player

583
00:31:52,340 --> 00:31:57,428
updates and as you can see in the

584
00:31:54,470 --> 00:32:02,450
screenshot right here they do get

585
00:31:57,429 --> 00:32:03,950
released very occasionally so basically

586
00:32:02,450 --> 00:32:07,970
this means that the attack surface

587
00:32:03,950 --> 00:32:10,600
remains outside browsers and one of the

588
00:32:07,970 --> 00:32:13,000
most important

589
00:32:10,600 --> 00:32:16,060
attack vectors here is office because

590
00:32:13,000 --> 00:32:22,020
office does not restrict Flash content

591
00:32:16,060 --> 00:32:26,020
at all from office 2010 up to to our

592
00:32:22,020 --> 00:32:30,250
office 2019 there is one minor exception

593
00:32:26,020 --> 00:32:35,770
if you're running the office 365 version

594
00:32:30,250 --> 00:32:40,360
then you are protected and as for the

595
00:32:35,770 --> 00:32:44,040
rest well you can embed as an SWF in

596
00:32:40,360 --> 00:32:46,179
PDFs in compiled HTML help files and

597
00:32:44,040 --> 00:32:50,590
because Internet Explorer does not

598
00:32:46,180 --> 00:32:53,280
restrict flash at all well basically if

599
00:32:50,590 --> 00:32:56,560
you can get ahold of a internet for

600
00:32:53,280 --> 00:32:58,930
based web browser control you're back in

601
00:32:56,560 --> 00:33:01,179
business and also when you manage to

602
00:32:58,930 --> 00:33:04,780
invoke the Flash Player control through

603
00:33:01,180 --> 00:33:07,620
for example PowerShell or calm or the

604
00:33:04,780 --> 00:33:07,620
window scripting host

605
00:33:09,270 --> 00:33:16,540
so the takeaway that I would like to

606
00:33:11,980 --> 00:33:19,960
give with this talk is the parsing

607
00:33:16,540 --> 00:33:25,330
seemingly simple in performance such as

608
00:33:19,960 --> 00:33:28,480
well a file pass it can be well can be

609
00:33:25,330 --> 00:33:30,669
deceptively complicated simply because

610
00:33:28,480 --> 00:33:32,800
of the diverse landscape of parameters

611
00:33:30,670 --> 00:33:36,990
that you have to take into into account

612
00:33:32,800 --> 00:33:40,000
like this URI scheme specs which are

613
00:33:36,990 --> 00:33:43,180
very short and very well ambiguous in a

614
00:33:40,000 --> 00:33:46,590
way there's OS specific interpretations

615
00:33:43,180 --> 00:33:50,710
so if you offload for example file path

616
00:33:46,590 --> 00:33:52,290
processing to the OS then you need to be

617
00:33:50,710 --> 00:33:54,760
extra careful

618
00:33:52,290 --> 00:33:57,790
there are sandbox policies that you need

619
00:33:54,760 --> 00:34:00,990
to take into account if you're running

620
00:33:57,790 --> 00:34:04,780
inside a browser then there's that and

621
00:34:00,990 --> 00:34:07,570
also well the OS that you're developing

622
00:34:04,780 --> 00:34:09,639
for it has specific vulnerabilities that

623
00:34:07,570 --> 00:34:12,730
you may or may not want to have to look

624
00:34:09,639 --> 00:34:15,400
at so basically there you really need a

625
00:34:12,730 --> 00:34:18,580
structured approach for something as

626
00:34:15,400 --> 00:34:23,440
simple as parsing file input file paths

627
00:34:18,580 --> 00:34:24,699
to capture all corner cases so all the

628
00:34:23,440 --> 00:34:26,980
issues

629
00:34:24,699 --> 00:34:30,189
I disclosed him to Adobe they were all

630
00:34:26,980 --> 00:34:32,080
patched the deployment process was a bit

631
00:34:30,190 --> 00:34:34,840
unfortunate because it broke existing

632
00:34:32,080 --> 00:34:39,759
applications twice documentation was not

633
00:34:34,840 --> 00:34:45,159
updated but the fix turns out to be a

634
00:34:39,760 --> 00:34:48,970
solid approach the industry efforts to

635
00:34:45,159 --> 00:34:52,240
duplicate flash well it generates mixed

636
00:34:48,969 --> 00:34:53,980
results I mean we're seeing the web is

637
00:34:52,239 --> 00:34:57,459
migrating from flash to other

638
00:34:53,980 --> 00:35:00,900
technologies and most of the browser

639
00:34:57,460 --> 00:35:04,210
vendors are also deprecating flash but

640
00:35:00,900 --> 00:35:06,820
two other major attack vectors like

641
00:35:04,210 --> 00:35:08,830
office and Internet Explorer are still

642
00:35:06,820 --> 00:35:12,760
vulnerable because they do not impose

643
00:35:08,830 --> 00:35:16,390
any restrictions and well the fact that

644
00:35:12,760 --> 00:35:20,109
Windows issues mandatory flash updates

645
00:35:16,390 --> 00:35:24,000
does not help ire so basically the

646
00:35:20,109 --> 00:35:26,680
attack surface is still significant and

647
00:35:24,000 --> 00:35:28,690
the advice I would like to give is

648
00:35:26,680 --> 00:35:32,790
regularly review the need for Flash

649
00:35:28,690 --> 00:35:34,900
Player develop deployment and well

650
00:35:32,790 --> 00:35:39,880
disabling it really is not enough you

651
00:35:34,900 --> 00:35:41,650
really need to uninstall it so if you're

652
00:35:39,880 --> 00:35:43,750
interested in the vulnerabilities I've

653
00:35:41,650 --> 00:35:46,540
put up two blog posts with some more

654
00:35:43,750 --> 00:35:48,280
technical details and I'll be around

655
00:35:46,540 --> 00:35:52,450
here at the conference and you can also

656
00:35:48,280 --> 00:35:57,180
reach me on Twitter thank you

657
00:35:52,450 --> 00:35:57,180
[Applause]

658
00:35:57,420 --> 00:36:07,650
any questions no questions think

