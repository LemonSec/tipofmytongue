1
00:00:06,279 --> 00:00:12,410
okay so our talk is named The Revenge of

2
00:00:10,070 --> 00:00:14,839
the script kiddies most of you probably

3
00:00:12,410 --> 00:00:17,240
know the term but script kiddies refers

4
00:00:14,839 --> 00:00:19,550
to young people running scripts that

5
00:00:17,240 --> 00:00:21,380
they didn't write themselves during

6
00:00:19,550 --> 00:00:24,739
their free time to hack different things

7
00:00:21,380 --> 00:00:27,320
usually not in a very experienced way

8
00:00:24,739 --> 00:00:29,480
but in the next 50 minutes what we're

9
00:00:27,320 --> 00:00:31,489
going to show you and is that script is

10
00:00:29,480 --> 00:00:34,610
no longer the property of just script

11
00:00:31,489 --> 00:00:36,590
kiddies anymore but rather a tool in the

12
00:00:34,610 --> 00:00:41,690
hands of much more sophisticated and

13
00:00:36,590 --> 00:00:42,920
advanced attackers okay let's dive into

14
00:00:41,690 --> 00:00:46,849
the agenda then we'll introduce

15
00:00:42,920 --> 00:00:49,730
ourselves and then to our content so

16
00:00:46,850 --> 00:00:52,370
we'll start by presenting banking Trojan

17
00:00:49,730 --> 00:00:54,559
or financial malware or bankers we call

18
00:00:52,370 --> 00:00:57,078
them all these three names it's

19
00:00:54,560 --> 00:00:59,840
interchangeable for us so just so you

20
00:00:57,079 --> 00:01:02,980
know after we do this short introduction

21
00:00:59,840 --> 00:01:06,500
will present three different examples of

22
00:01:02,980 --> 00:01:08,869
scripting languages in different phases

23
00:01:06,500 --> 00:01:10,520
of banking Trojans attacks so we'll see

24
00:01:08,869 --> 00:01:13,100
infection we'll see the download

25
00:01:10,520 --> 00:01:15,949
we'll see code execution and we'll see

26
00:01:13,100 --> 00:01:18,469
encryption and decryption finally we'll

27
00:01:15,950 --> 00:01:22,549
conclude and go on to the rest of the

28
00:01:18,469 --> 00:01:24,949
amazing talks that we have here before I

29
00:01:22,549 --> 00:01:26,479
forget I don't think many of the

30
00:01:24,950 --> 00:01:28,249
organizers are here but we'd like to

31
00:01:26,479 --> 00:01:30,590
thank them dearly for having us here

32
00:01:28,249 --> 00:01:33,908
this is an amazing event in my own

33
00:01:30,590 --> 00:01:36,889
opinion and it's a pleasure to be here

34
00:01:33,909 --> 00:01:39,170
okay so my name is affair I'm a security

35
00:01:36,889 --> 00:01:42,139
researcher in a data center and cloud

36
00:01:39,170 --> 00:01:44,899
security company named Guardi core I'm

37
00:01:42,139 --> 00:01:48,109
part of the labs team and we have a nice

38
00:01:44,899 --> 00:01:51,289
website that you can check for our

39
00:01:48,109 --> 00:01:54,499
publications I also wrote a tutorial on

40
00:01:51,289 --> 00:01:56,090
reverse engineering about a year ago if

41
00:01:54,499 --> 00:01:57,380
you're a beginner to the field of

42
00:01:56,090 --> 00:02:00,259
reverse engineering you're more than

43
00:01:57,380 --> 00:02:02,839
welcome to check this website and tell

44
00:02:00,259 --> 00:02:03,459
me what you think and or we'll take it

45
00:02:02,840 --> 00:02:08,060
from here

46
00:02:03,459 --> 00:02:10,660
Thank You Phil so hi everyone my name is

47
00:02:08,060 --> 00:02:16,909
all I work for Proofpoint

48
00:02:10,660 --> 00:02:19,250
part of cloud security team first of all

49
00:02:16,909 --> 00:02:21,739
we would like to thank the still

50
00:02:19,250 --> 00:02:24,800
this research was mostly conducted in

51
00:02:21,740 --> 00:02:27,110
IBM labs while we walk there and we want

52
00:02:24,800 --> 00:02:30,980
to thank them for allowing us to present

53
00:02:27,110 --> 00:02:34,610
it here so let's start what's the basic

54
00:02:30,980 --> 00:02:36,380
concept of financial models so they have

55
00:02:34,610 --> 00:02:38,750
to wait and for an online session to

56
00:02:36,380 --> 00:02:42,500
takes place before they can start

57
00:02:38,750 --> 00:02:45,080
hijacking the session that fact makes

58
00:02:42,500 --> 00:02:48,440
them want to infect as many machines as

59
00:02:45,080 --> 00:02:50,600
possible as fast as possible it's very

60
00:02:48,440 --> 00:02:55,190
crucial and we shall example later on

61
00:02:50,600 --> 00:02:56,810
how Romney did it also it's important to

62
00:02:55,190 --> 00:02:59,450
know that the target is the end-user

63
00:02:56,810 --> 00:03:01,360
himself and not the bank the Mallo is

64
00:02:59,450 --> 00:03:03,200
aimed to steal money from the end-users

65
00:03:01,360 --> 00:03:05,420
sometimes the bank will give them the

66
00:03:03,200 --> 00:03:08,230
money back but still they want to take

67
00:03:05,420 --> 00:03:09,708
the money from the end-user themselves

68
00:03:08,230 --> 00:03:13,340
so yeah

69
00:03:09,709 --> 00:03:16,190
the end goal is money and they achieve

70
00:03:13,340 --> 00:03:20,690
it using two ways one is in session

71
00:03:16,190 --> 00:03:23,239
where the Foresters will transfer money

72
00:03:20,690 --> 00:03:24,859
from the victim's account to their

73
00:03:23,239 --> 00:03:27,830
account or the mule account that they

74
00:03:24,860 --> 00:03:30,980
made before and the other way is just

75
00:03:27,830 --> 00:03:33,260
swapping accounts so when you try

76
00:03:30,980 --> 00:03:36,200
transfer money the money will actually

77
00:03:33,260 --> 00:03:38,660
go to the victim to the foster account

78
00:03:36,200 --> 00:03:41,209
instead of your account so their PA

79
00:03:38,660 --> 00:03:43,010
account for example and try to transfer

80
00:03:41,209 --> 00:03:44,720
money for a friend tomorrow we've

81
00:03:43,010 --> 00:03:47,929
changed the number of the bank account

82
00:03:44,720 --> 00:03:51,109
so it will go to a mule account in other

83
00:03:47,930 --> 00:03:55,370
ways come take over my Wells use remote

84
00:03:51,110 --> 00:03:57,890
access tools also today most banking

85
00:03:55,370 --> 00:04:01,730
most banks is browser fingerprinting

86
00:03:57,890 --> 00:04:05,750
which means that they want to know what

87
00:04:01,730 --> 00:04:08,060
plugins did the user have on system

88
00:04:05,750 --> 00:04:11,209
what's the encoding for the languages

89
00:04:08,060 --> 00:04:14,120
what's resolution and a finger paint all

90
00:04:11,209 --> 00:04:18,310
of it when fraudster try to do ATM

91
00:04:14,120 --> 00:04:21,108
they must mimic all of those properties

92
00:04:18,310 --> 00:04:23,780
so what's the flow for a financial model

93
00:04:21,108 --> 00:04:27,349
first of all usually it all start with

94
00:04:23,780 --> 00:04:31,440
spam campaigns and after a spam campaign

95
00:04:27,349 --> 00:04:34,830
is sent users usually bite the bait

96
00:04:31,440 --> 00:04:37,890
and the Machine gets infected after that

97
00:04:34,830 --> 00:04:40,080
Marla will try to get persistency and to

98
00:04:37,890 --> 00:04:42,510
gain control over the browser after

99
00:04:40,080 --> 00:04:44,640
having gained control over the browser

100
00:04:42,510 --> 00:04:47,130
he will usually try to perform some web

101
00:04:44,640 --> 00:04:48,990
injections or basically will try to

102
00:04:47,130 --> 00:04:50,940
alter the web page itself

103
00:04:48,990 --> 00:04:53,580
and change the context that the user

104
00:04:50,940 --> 00:04:56,370
sees I will show examples later on and

105
00:04:53,580 --> 00:04:58,229
the other thing mothers try to do is to

106
00:04:56,370 --> 00:05:00,720
redirect the user to a completely fake

107
00:04:58,230 --> 00:05:03,180
website also we'll see example later on

108
00:05:00,720 --> 00:05:07,500
and eventually they want to get off it

109
00:05:03,180 --> 00:05:09,300
and have a great success so spam

110
00:05:07,500 --> 00:05:13,710
campaigns we all know we love them there

111
00:05:09,300 --> 00:05:15,680
is no need to get into those or most of

112
00:05:13,710 --> 00:05:18,590
the marvels begin with spam campaigns

113
00:05:15,680 --> 00:05:21,720
then they achieve persistence using

114
00:05:18,590 --> 00:05:23,719
startup folder registry keys task

115
00:05:21,720 --> 00:05:26,610
scheduler we all know and love the gig

116
00:05:23,720 --> 00:05:28,230
and we will today will show you some

117
00:05:26,610 --> 00:05:31,680
cool tricks that rahmatan go see that

118
00:05:28,230 --> 00:05:35,850
does they still use the desk scheduler

119
00:05:31,680 --> 00:05:37,980
but they have cool tricks and then they

120
00:05:35,850 --> 00:05:40,640
aim to control over the browser it's

121
00:05:37,980 --> 00:05:43,680
usually done by code injection and

122
00:05:40,640 --> 00:05:46,710
hooking of API functions most of the

123
00:05:43,680 --> 00:05:49,410
time is done by using windows function

124
00:05:46,710 --> 00:05:51,690
and creative mode thread so on the right

125
00:05:49,410 --> 00:05:54,540
side you can see Firefox function theory

126
00:05:51,690 --> 00:05:57,660
Dampier right being hooked and jump to

127
00:05:54,540 --> 00:05:59,760
some unknown place of model code what's

128
00:05:57,660 --> 00:06:01,860
nice about hooking these functions is

129
00:05:59,760 --> 00:06:04,020
that model don't need to handle SSL

130
00:06:01,860 --> 00:06:07,410
encryption and decryption they get the

131
00:06:04,020 --> 00:06:10,469
data already in clear text so they just

132
00:06:07,410 --> 00:06:11,730
take it before or after Firefox has

133
00:06:10,470 --> 00:06:15,120
already done the encryption or

134
00:06:11,730 --> 00:06:16,680
decryption for them which is cool and on

135
00:06:15,120 --> 00:06:18,960
the left side we can see trick about

136
00:06:16,680 --> 00:06:27,860
code 11 called parser injected to

137
00:06:18,960 --> 00:06:27,859
browser and this is not working

138
00:06:29,509 --> 00:06:35,059
nice yeah you have another one

139
00:06:40,729 --> 00:06:46,780
okay

140
00:06:42,710 --> 00:06:46,780
yeah stop talking

141
00:06:52,840 --> 00:06:57,250
yeah so as I said before there are two

142
00:06:55,240 --> 00:07:00,370
types of attack web injections and

143
00:06:57,250 --> 00:07:02,080
redirect in web injects you basically

144
00:07:00,370 --> 00:07:04,270
the model basically insert malicious

145
00:07:02,080 --> 00:07:06,310
code into the original web page sauce

146
00:07:04,270 --> 00:07:09,849
they actually alter the page the HTML

147
00:07:06,310 --> 00:07:12,160
code whatever they want to do and in

148
00:07:09,850 --> 00:07:13,750
redirect redirect attacks they will

149
00:07:12,160 --> 00:07:16,120
usually redirect the user to a fake

150
00:07:13,750 --> 00:07:19,090
website completely tailor-made to fool

151
00:07:16,120 --> 00:07:22,510
them so it the website will look exactly

152
00:07:19,090 --> 00:07:25,210
like the original banking website it's

153
00:07:22,510 --> 00:07:28,360
just a completely fake one and let's see

154
00:07:25,210 --> 00:07:29,799
example for those two so first of all I

155
00:07:28,360 --> 00:07:32,950
have to say that we were not allowed to

156
00:07:29,800 --> 00:07:33,610
show real bank examples so we did the

157
00:07:32,950 --> 00:07:35,620
best we could

158
00:07:33,610 --> 00:07:38,800
so on the left side we can see Google

159
00:07:35,620 --> 00:07:41,650
and username in Booga Jeff is trying to

160
00:07:38,800 --> 00:07:43,300
log into his email account and Google is

161
00:07:41,650 --> 00:07:45,638
saying that they will never ask us

162
00:07:43,300 --> 00:07:48,430
season for his grandmother's favorite

163
00:07:45,639 --> 00:07:50,139
preferences and on the right side after

164
00:07:48,430 --> 00:07:52,150
the mod well altered the page we can see

165
00:07:50,139 --> 00:07:54,669
that they actually asked for his

166
00:07:52,150 --> 00:07:56,859
grandmother's favorite pet and they we

167
00:07:54,669 --> 00:08:00,940
said that Google will never ask for your

168
00:07:56,860 --> 00:08:03,390
favorite pizza so usually it works for

169
00:08:00,940 --> 00:08:07,810
most users they can tell the difference

170
00:08:03,390 --> 00:08:10,120
the other way that Marvel uses is just

171
00:08:07,810 --> 00:08:12,130
redirection so again we can show little

172
00:08:10,120 --> 00:08:14,380
banking web page so just imagine my

173
00:08:12,130 --> 00:08:16,690
little pony wedding is a real Bank

174
00:08:14,380 --> 00:08:19,150
website what you can see is that the

175
00:08:16,690 --> 00:08:21,539
address is still there and the icon

176
00:08:19,150 --> 00:08:23,919
necessarily icon is still there the

177
00:08:21,539 --> 00:08:25,979
website icon is there the topic is there

178
00:08:23,919 --> 00:08:29,109
everything look exactly as it should be

179
00:08:25,979 --> 00:08:30,430
but instead of getting to your bank

180
00:08:29,110 --> 00:08:32,770
website you get into completely

181
00:08:30,430 --> 00:08:34,479
tailor-made fake website it's made

182
00:08:32,770 --> 00:08:38,620
entirely to steal your credentials or

183
00:08:34,479 --> 00:08:40,659
details or just folio so now that we

184
00:08:38,620 --> 00:08:42,580
know that Marvel does it we have the

185
00:08:40,659 --> 00:08:44,980
question of how we knows which targets

186
00:08:42,580 --> 00:08:48,280
to attack and the answer is model

187
00:08:44,980 --> 00:08:50,440
configurations so the model store attack

188
00:08:48,280 --> 00:08:53,439
in configuration files usually they will

189
00:08:50,440 --> 00:08:56,080
be encrypted on the left side we can see

190
00:08:53,440 --> 00:09:00,640
trick bot as those this configuration

191
00:08:56,080 --> 00:09:03,300
config file and on the right side we can

192
00:09:00,640 --> 00:09:06,250
see goes east all these models and

193
00:09:03,300 --> 00:09:08,079
configuration inside the registry it's

194
00:09:06,250 --> 00:09:10,690
are encrypted so there is not much we

195
00:09:08,080 --> 00:09:13,690
can read here after the corruption it

196
00:09:10,690 --> 00:09:16,540
will look something like that so now we

197
00:09:13,690 --> 00:09:18,760
have a trick bot list of servers IPs and

198
00:09:16,540 --> 00:09:21,969
ports that it tries to connect to in

199
00:09:18,760 --> 00:09:24,610
order to fetch modules form below that

200
00:09:21,970 --> 00:09:27,250
there should be a list of targets the

201
00:09:24,610 --> 00:09:29,050
thing about trying to attack so there

202
00:09:27,250 --> 00:09:31,600
should be a target and what you do it

203
00:09:29,050 --> 00:09:33,010
when you reach the target on the right

204
00:09:31,600 --> 00:09:35,590
side you can see an example of free

205
00:09:33,010 --> 00:09:38,560
injection so you can see the function

206
00:09:35,590 --> 00:09:41,800
get login it ratifies that the username

207
00:09:38,560 --> 00:09:44,979
and password exists and user enter them

208
00:09:41,800 --> 00:09:46,959
and then it calls function calls copy

209
00:09:44,980 --> 00:09:48,580
string to clipboard which basically

210
00:09:46,960 --> 00:09:52,420
steals this and I mean pass all the via

211
00:09:48,580 --> 00:09:55,600
the function above and now fill will

212
00:09:52,420 --> 00:09:58,560
continue thank you for the nice

213
00:09:55,600 --> 00:10:01,680
introduction do we have a clicker I

214
00:09:58,560 --> 00:10:05,500
can't live without the clicker thank you

215
00:10:01,680 --> 00:10:07,689
okay so as we promised before we had a

216
00:10:05,500 --> 00:10:09,550
nice overview on banking Trojans and now

217
00:10:07,690 --> 00:10:10,600
is the time to actually get into some

218
00:10:09,550 --> 00:10:13,329
real examples

219
00:10:10,600 --> 00:10:16,390
so the first banker we're going to talk

220
00:10:13,330 --> 00:10:20,110
about is named earth Smith or go Z or is

221
00:10:16,390 --> 00:10:24,220
SP again different names we call the

222
00:10:20,110 --> 00:10:25,810
same family the same thing ok so just a

223
00:10:24,220 --> 00:10:28,600
little bit of background on earth sniff

224
00:10:25,810 --> 00:10:30,699
this is a malware sample that's been

225
00:10:28,600 --> 00:10:33,010
around with us for many years actually

226
00:10:30,700 --> 00:10:36,550
the source code of earth sniff leaked in

227
00:10:33,010 --> 00:10:38,650
2015 and this led to many of its module

228
00:10:36,550 --> 00:10:41,530
being used by other malware families as

229
00:10:38,650 --> 00:10:43,449
well so the most recent one I can think

230
00:10:41,530 --> 00:10:46,180
of is Dana bot for those of you who know

231
00:10:43,450 --> 00:10:48,010
Dana bought used earth sniffs web

232
00:10:46,180 --> 00:10:50,260
injection modules so the actual

233
00:10:48,010 --> 00:10:52,689
JavaScript code that is injected to the

234
00:10:50,260 --> 00:10:56,589
browser during the session was used by

235
00:10:52,690 --> 00:10:58,570
other malware as well now these are

236
00:10:56,589 --> 00:11:00,280
exactly the modules I was interested in

237
00:10:58,570 --> 00:11:02,350
when I worked in IBM because we

238
00:11:00,280 --> 00:11:03,970
investigated the JavaScript code that

239
00:11:02,350 --> 00:11:06,339
was injected to the browser and we

240
00:11:03,970 --> 00:11:11,620
signed this code to detect malicious

241
00:11:06,339 --> 00:11:13,480
activity in the banking sessions so to

242
00:11:11,620 --> 00:11:15,850
investigate those modules and this code

243
00:11:13,480 --> 00:11:18,730
we had to actually infect our own

244
00:11:15,850 --> 00:11:20,090
machines and this was not an easy task

245
00:11:18,730 --> 00:11:23,240
at

246
00:11:20,090 --> 00:11:25,070
the first attempt we tried was trying to

247
00:11:23,240 --> 00:11:27,620
infect completely clean machines in

248
00:11:25,070 --> 00:11:29,660
fetching a sample from the wild and just

249
00:11:27,620 --> 00:11:31,190
double-clicking the executable file on a

250
00:11:29,660 --> 00:11:33,800
clean machine and hoping for the best

251
00:11:31,190 --> 00:11:36,200
but this didn't work because earth

252
00:11:33,800 --> 00:11:38,510
sniffs command and control servers went

253
00:11:36,200 --> 00:11:41,420
up and down almost on a daily basis so

254
00:11:38,510 --> 00:11:44,090
we just didn't manage to download the

255
00:11:41,420 --> 00:11:46,569
configuration onto the machine and we

256
00:11:44,090 --> 00:11:50,720
didn't get any web injections of course

257
00:11:46,570 --> 00:11:52,790
so the other approach we tried was to

258
00:11:50,720 --> 00:11:56,810
run a sample on a machine which already

259
00:11:52,790 --> 00:11:59,030
had the malware configuration and what

260
00:11:56,810 --> 00:12:00,800
we basically did is we fold earth leaf

261
00:11:59,030 --> 00:12:02,480
to think that it was running on an

262
00:12:00,800 --> 00:12:03,709
already infected machine when it

263
00:12:02,480 --> 00:12:05,690
actually wasn't we just had the

264
00:12:03,710 --> 00:12:07,610
configuration in the registry and we

265
00:12:05,690 --> 00:12:11,420
thought that running the sample with

266
00:12:07,610 --> 00:12:13,670
this time work but once again this

267
00:12:11,420 --> 00:12:16,579
didn't work we wrote a very nice Python

268
00:12:13,670 --> 00:12:18,860
script that took registry values

269
00:12:16,580 --> 00:12:20,870
actually I forgot to say we why we had

270
00:12:18,860 --> 00:12:22,940
access to the registry at all

271
00:12:20,870 --> 00:12:25,040
we had access to end-users machine

272
00:12:22,940 --> 00:12:27,350
because we were getting from time to

273
00:12:25,040 --> 00:12:29,540
time reports on fraud and we were able

274
00:12:27,350 --> 00:12:30,410
to connect to machines in the wild which

275
00:12:29,540 --> 00:12:32,689
were infected

276
00:12:30,410 --> 00:12:34,490
so under full agreement of the end user

277
00:12:32,690 --> 00:12:37,670
we were able to read the relevant

278
00:12:34,490 --> 00:12:40,310
registry values and fetch the malware

279
00:12:37,670 --> 00:12:43,130
samples as well so what we tried to do

280
00:12:40,310 --> 00:12:45,079
was to read the registry on a victim's

281
00:12:43,130 --> 00:12:47,120
machine and copy the relevant values

282
00:12:45,080 --> 00:12:50,630
onto our virtual machines and then run

283
00:12:47,120 --> 00:12:53,390
the dll on this machine but this didn't

284
00:12:50,630 --> 00:12:55,250
work as well so our second approach

285
00:12:53,390 --> 00:12:58,189
didn't really work and there were no

286
00:12:55,250 --> 00:13:00,410
JavaScript injections to the websites

287
00:12:58,190 --> 00:13:04,610
which we knew were targeted by ER sniff

288
00:13:00,410 --> 00:13:06,500
for sure so we had no choice and we had

289
00:13:04,610 --> 00:13:08,570
to take a deeper look into the malware

290
00:13:06,500 --> 00:13:10,970
and what we found out was that earth

291
00:13:08,570 --> 00:13:11,840
sniff cared for a value named security

292
00:13:10,970 --> 00:13:15,290
identifier

293
00:13:11,840 --> 00:13:17,960
which is a per user value that our sniff

294
00:13:15,290 --> 00:13:21,680
used as a randomization seed to generate

295
00:13:17,960 --> 00:13:23,870
names inside its configuration so what

296
00:13:21,680 --> 00:13:26,209
we were actually missing was to take our

297
00:13:23,870 --> 00:13:28,340
virtual machine and give it the security

298
00:13:26,210 --> 00:13:30,740
identifier of the remote machine that

299
00:13:28,340 --> 00:13:32,330
was infected so what we had to do was

300
00:13:30,740 --> 00:13:35,090
basically add another

301
00:13:32,330 --> 00:13:36,980
step two our Python script and use this

302
00:13:35,090 --> 00:13:39,800
tool named CID change which is available

303
00:13:36,980 --> 00:13:42,560
online we just changed the CID of our

304
00:13:39,800 --> 00:13:44,750
local machine we said the local registry

305
00:13:42,560 --> 00:13:45,109
with the values we saw on the victim

306
00:13:44,750 --> 00:13:47,920
machine

307
00:13:45,110 --> 00:13:50,120
we ran the DLL and this was actually

308
00:13:47,920 --> 00:13:52,430
successful and we could see the

309
00:13:50,120 --> 00:13:53,900
JavaScript code doing web injections and

310
00:13:52,430 --> 00:13:57,979
redirects and everything that earth

311
00:13:53,900 --> 00:14:00,829
sniff was doing at the time but things

312
00:13:57,980 --> 00:14:02,690
are not so fortunate all the time an

313
00:14:00,830 --> 00:14:06,200
earth sniff decided to go Sylas

314
00:14:02,690 --> 00:14:08,000
completely and so we didn't have any

315
00:14:06,200 --> 00:14:12,200
executable to run anymore

316
00:14:08,000 --> 00:14:13,970
and we I looked sort of like that we

317
00:14:12,200 --> 00:14:18,100
decided to read the registry because

318
00:14:13,970 --> 00:14:21,320
this is the only thing that we had so we

319
00:14:18,100 --> 00:14:23,750
we we've taken a look into the registry

320
00:14:21,320 --> 00:14:26,840
values and as you can see much of the

321
00:14:23,750 --> 00:14:29,180
data was just hexadecimal values huge

322
00:14:26,840 --> 00:14:31,040
ones actually representing both the

323
00:14:29,180 --> 00:14:33,920
configuration of our sniff and it's

324
00:14:31,040 --> 00:14:36,560
actual modules but among all these

325
00:14:33,920 --> 00:14:40,640
where's the laser here do I have a laser

326
00:14:36,560 --> 00:14:48,140
I don't know if I do there is one line

327
00:14:40,640 --> 00:14:49,760
here with capital S as a key never mind

328
00:14:48,140 --> 00:14:51,650
where you can actually see plaintext

329
00:14:49,760 --> 00:14:54,290
code and this is PowerShell code within

330
00:14:51,650 --> 00:14:56,660
the registry so a lot of hexadecimal

331
00:14:54,290 --> 00:14:59,660
rubbish but one entry which is actual

332
00:14:56,660 --> 00:15:01,520
code this was interesting a nice thing

333
00:14:59,660 --> 00:15:04,329
to mention was that when we double-click

334
00:15:01,520 --> 00:15:07,880
this entry this is what's showed up

335
00:15:04,330 --> 00:15:12,500
nothing Windows registry doesn't display

336
00:15:07,880 --> 00:15:14,330
data which is too long so we knew that

337
00:15:12,500 --> 00:15:16,970
this data could be exported of course

338
00:15:14,330 --> 00:15:20,960
and we took all this code and dumped it

339
00:15:16,970 --> 00:15:22,790
into a file and this is what we got now

340
00:15:20,960 --> 00:15:24,440
I shortened the strings a little bit

341
00:15:22,790 --> 00:15:26,900
just to make things more readable but

342
00:15:24,440 --> 00:15:29,750
this was the actual script the whole

343
00:15:26,900 --> 00:15:31,699
script it was five statements long we

344
00:15:29,750 --> 00:15:34,430
had two function declarations as you can

345
00:15:31,700 --> 00:15:37,160
see one a variable assignment in between

346
00:15:34,430 --> 00:15:39,500
the functions and to invoke expression

347
00:15:37,160 --> 00:15:43,880
statements how many of you read or

348
00:15:39,500 --> 00:15:45,500
written PowerShell code ok that's nice

349
00:15:43,880 --> 00:15:48,980
not too many I'll just

350
00:15:45,500 --> 00:15:51,200
say that IEX and a voc expression stands

351
00:15:48,980 --> 00:15:53,000
for the evaluation function in

352
00:15:51,200 --> 00:15:55,190
powershell which mean it's taking a

353
00:15:53,000 --> 00:15:56,480
string and it treats it as if it is code

354
00:15:55,190 --> 00:15:58,670
and just executes it

355
00:15:56,480 --> 00:16:00,950
so the equivalent in Python for example

356
00:15:58,670 --> 00:16:02,319
is the eval I think or in JavaScript as

357
00:16:00,950 --> 00:16:05,330
well

358
00:16:02,320 --> 00:16:08,480
okay so let's dig in to this code

359
00:16:05,330 --> 00:16:10,730
actually we can see right away that the

360
00:16:08,480 --> 00:16:14,150
two functions are handling base64 data

361
00:16:10,730 --> 00:16:16,270
we search the documentation a little bit

362
00:16:14,150 --> 00:16:19,069
and we saw that the first one was

363
00:16:16,270 --> 00:16:21,560
converting base64 data into an integer

364
00:16:19,070 --> 00:16:24,020
array where the second one was using the

365
00:16:21,560 --> 00:16:28,160
first function to convert basic C 4 to

366
00:16:24,020 --> 00:16:30,530
an actual string so this part we knew

367
00:16:28,160 --> 00:16:33,920
the next thing was to figure out what

368
00:16:30,530 --> 00:16:35,990
the data was what this variable was so

369
00:16:33,920 --> 00:16:38,270
once again we decoded basics T for data

370
00:16:35,990 --> 00:16:40,970
dumped it into a binary file open it

371
00:16:38,270 --> 00:16:44,060
with our favorite hex editor and this is

372
00:16:40,970 --> 00:16:46,820
what we saw there was a lot of op codes

373
00:16:44,060 --> 00:16:50,479
of course but then we ran into this part

374
00:16:46,820 --> 00:16:52,070
where many function names appeared so we

375
00:16:50,480 --> 00:16:54,920
see the C runtime functions like

376
00:16:52,070 --> 00:16:56,810
memcache we see Windows API functions

377
00:16:54,920 --> 00:16:58,819
like create process and at this time we

378
00:16:56,810 --> 00:17:03,890
realize this was actually like shellcode

379
00:16:58,820 --> 00:17:05,510
payload ok nice that's our that's some

380
00:17:03,890 --> 00:17:08,300
information for us we can assume that

381
00:17:05,510 --> 00:17:11,569
it's somehow executing code here but we

382
00:17:08,300 --> 00:17:14,060
still have some more insights to draw

383
00:17:11,569 --> 00:17:17,720
from the script so let's go for the

384
00:17:14,060 --> 00:17:20,240
first invoke expression statement when

385
00:17:17,720 --> 00:17:23,060
we decode what's within the parameter

386
00:17:20,240 --> 00:17:25,939
this is what we get a lot of PowerShell

387
00:17:23,060 --> 00:17:27,740
code let's clean it up a little bit

388
00:17:25,939 --> 00:17:31,700
actually this is too long for one slide

389
00:17:27,740 --> 00:17:33,860
so I split it into two what we can see

390
00:17:31,700 --> 00:17:35,810
that our sniff is doing here is it's

391
00:17:33,860 --> 00:17:39,250
creating a PowerShell class whose

392
00:17:35,810 --> 00:17:41,600
members are Windows API functions from

393
00:17:39,250 --> 00:17:43,610
kernel32 modules so we can see get

394
00:17:41,600 --> 00:17:47,810
current thread ID open thread queue user

395
00:17:43,610 --> 00:17:50,449
ABC and sleep and in the second part

396
00:17:47,810 --> 00:17:52,520
it's creating yet another powershell

397
00:17:50,450 --> 00:17:55,610
class word imports get current process

398
00:17:52,520 --> 00:17:57,020
and virtual alec so at this point we can

399
00:17:55,610 --> 00:17:59,090
kind of assume what it's going to do

400
00:17:57,020 --> 00:18:02,150
there's some thread management here

401
00:17:59,090 --> 00:18:03,709
memory allocation something is fishy and

402
00:18:02,150 --> 00:18:07,100
there's of course the payload the

403
00:18:03,710 --> 00:18:10,340
shellcode itself but to really make this

404
00:18:07,100 --> 00:18:12,530
whole picture complete we'll take a look

405
00:18:10,340 --> 00:18:15,980
at the last statement that we have here

406
00:18:12,530 --> 00:18:18,170
and the last invoke expression evaluates

407
00:18:15,980 --> 00:18:20,720
to this so as you can see we have the

408
00:18:18,170 --> 00:18:21,470
exact functions that earth was importing

409
00:18:20,720 --> 00:18:24,020
from before

410
00:18:21,470 --> 00:18:27,320
let's prettify this thing to have the

411
00:18:24,020 --> 00:18:29,300
punch of this script so air sniff is

412
00:18:27,320 --> 00:18:30,800
actually allocating memory in the

413
00:18:29,300 --> 00:18:33,770
current process that's running which is

414
00:18:30,800 --> 00:18:37,100
the PowerShell context and it's

415
00:18:33,770 --> 00:18:39,080
allocating just enough memory space to

416
00:18:37,100 --> 00:18:41,209
populate the shellcode as you can see

417
00:18:39,080 --> 00:18:43,340
payload length and it's giving it read

418
00:18:41,210 --> 00:18:45,890
read and execute permissions and then it

419
00:18:43,340 --> 00:18:48,949
copies the payload on to the newly

420
00:18:45,890 --> 00:18:51,560
allocated buffer and then it just runs

421
00:18:48,950 --> 00:18:54,560
this code by providing Q user a PC with

422
00:18:51,560 --> 00:18:58,340
the buffer address and the current

423
00:18:54,560 --> 00:19:01,909
thread so this is how our sniff is

424
00:18:58,340 --> 00:19:04,220
executing code using the the registry

425
00:19:01,910 --> 00:19:06,260
value now as you can see it does it by

426
00:19:04,220 --> 00:19:09,980
creating the classes and importing

427
00:19:06,260 --> 00:19:13,760
Windows API functions now how does all

428
00:19:09,980 --> 00:19:16,130
this get run in the first place so our

429
00:19:13,760 --> 00:19:19,250
mentioned before that banking Trojans

430
00:19:16,130 --> 00:19:21,230
are still using very classical methods

431
00:19:19,250 --> 00:19:23,270
and as you can see what our sniff is

432
00:19:21,230 --> 00:19:26,390
using here is the task scheduler which

433
00:19:23,270 --> 00:19:28,910
is a very classical trick but actually

434
00:19:26,390 --> 00:19:30,710
there's a twist here it's not running an

435
00:19:28,910 --> 00:19:33,410
executable file because as I mentioned

436
00:19:30,710 --> 00:19:36,140
it went Silas so there is no executable

437
00:19:33,410 --> 00:19:38,930
file to run instead what it's doing it's

438
00:19:36,140 --> 00:19:41,750
running a completely benign program

439
00:19:38,930 --> 00:19:45,040
built-in in Windows named for files and

440
00:19:41,750 --> 00:19:49,340
if we zoom in to the value that is being

441
00:19:45,040 --> 00:19:52,310
executed with every scheduled task this

442
00:19:49,340 --> 00:19:55,820
is it so it goes through the windows

443
00:19:52,310 --> 00:19:57,980
system32 folder and it's just iterating

444
00:19:55,820 --> 00:20:00,500
on all the files there recursively and

445
00:19:57,980 --> 00:20:02,090
it's looking for a file that matches

446
00:20:00,500 --> 00:20:05,030
this blue pattern over there I don't

447
00:20:02,090 --> 00:20:07,610
know if you see a P star double-l dot

448
00:20:05,030 --> 00:20:09,770
star e which matches PowerShell of

449
00:20:07,610 --> 00:20:11,990
course so air sniff is looking for a

450
00:20:09,770 --> 00:20:14,870
file for the PowerShell

451
00:20:11,990 --> 00:20:16,850
cutable and it provides it with the ICI

452
00:20:14,870 --> 00:20:18,678
flag which stands for encoded command

453
00:20:16,850 --> 00:20:21,850
and there it gives it basic ste 4

454
00:20:18,679 --> 00:20:25,160
encoded commands to execute

455
00:20:21,850 --> 00:20:27,080
let's employ our best trick and decode

456
00:20:25,160 --> 00:20:29,530
this data and this is what we get

457
00:20:27,080 --> 00:20:32,449
so PowerShell once again invokes an

458
00:20:29,530 --> 00:20:34,399
expression where it's fetches the

459
00:20:32,450 --> 00:20:37,670
registry value with the actual

460
00:20:34,400 --> 00:20:39,620
PowerShell code so this is end to end

461
00:20:37,670 --> 00:20:42,110
how ursin if it's executing malicious

462
00:20:39,620 --> 00:20:43,580
payload on the victim machine with every

463
00:20:42,110 --> 00:20:47,059
reboot of the machine because it's

464
00:20:43,580 --> 00:20:50,928
persistent without having a file on the

465
00:20:47,059 --> 00:20:54,050
file system why is it using script at

466
00:20:50,929 --> 00:20:56,360
all so first of all file as malware is a

467
00:20:54,050 --> 00:20:59,240
stealthier malware in the sense that it

468
00:20:56,360 --> 00:21:02,300
made antivirus scanner engines more

469
00:20:59,240 --> 00:21:04,309
easily so if you know the scanner engine

470
00:21:02,300 --> 00:21:07,010
just periodically scans the file system

471
00:21:04,309 --> 00:21:12,740
looking for signatures in earth sniff is

472
00:21:07,010 --> 00:21:14,900
obviously escaping these checks also all

473
00:21:12,740 --> 00:21:17,480
the malicious activity is done from

474
00:21:14,900 --> 00:21:21,190
within the PowerShell program which is

475
00:21:17,480 --> 00:21:24,170
allegedly benign and is part of Windows

476
00:21:21,190 --> 00:21:26,450
so yeah this is our sniff and it's usage

477
00:21:24,170 --> 00:21:28,220
of automated scripts and the next

478
00:21:26,450 --> 00:21:34,100
example will be the Ramnath malware

479
00:21:28,220 --> 00:21:35,840
which or will present Thank You fear so

480
00:21:34,100 --> 00:21:39,530
before I want to talk about Romney I

481
00:21:35,840 --> 00:21:40,970
want to talk about three topics in

482
00:21:39,530 --> 00:21:45,020
Windows so we'll all be in the same

483
00:21:40,970 --> 00:21:48,050
level the first one is Windows DP API or

484
00:21:45,020 --> 00:21:50,809
data production API so basically it's

485
00:21:48,050 --> 00:21:53,659
simple to keep the graphic API it's been

486
00:21:50,809 --> 00:21:56,000
around since Windows 2000 Microsoft

487
00:21:53,660 --> 00:21:58,610
provided it for developers to have

488
00:21:56,000 --> 00:22:02,270
easier life to encode encrypting to keep

489
00:21:58,610 --> 00:22:04,669
data it enables symmetric encryption of

490
00:22:02,270 --> 00:22:06,530
any kind of data which is nice it has

491
00:22:04,670 --> 00:22:09,230
two different scope one is current user

492
00:22:06,530 --> 00:22:11,809
and one is local machine when you use

493
00:22:09,230 --> 00:22:14,179
the current user one if you decrypt

494
00:22:11,809 --> 00:22:16,340
something only that user will be able to

495
00:22:14,179 --> 00:22:18,440
open it and if use the local machine the

496
00:22:16,340 --> 00:22:21,830
data will be available to all all users

497
00:22:18,440 --> 00:22:23,929
in those machines and the good thing

498
00:22:21,830 --> 00:22:25,370
about local machine is when you encrypt

499
00:22:23,929 --> 00:22:27,259
using it

500
00:22:25,370 --> 00:22:30,248
you can actually get some files from the

501
00:22:27,259 --> 00:22:32,299
machine and he kept it locally and

502
00:22:30,249 --> 00:22:34,519
current user

503
00:22:32,299 --> 00:22:37,129
but the encryption is based on the hash

504
00:22:34,519 --> 00:22:38,899
of the password of the user and this is

505
00:22:37,129 --> 00:22:41,360
all sounds very promising if you click

506
00:22:38,899 --> 00:22:45,678
on the link you'll see a lecture that

507
00:22:41,360 --> 00:22:48,229
was given last year saying how not safe

508
00:22:45,679 --> 00:22:50,480
it is say basically you can tell us

509
00:22:48,230 --> 00:22:53,860
everything but your secret so not as

510
00:22:50,480 --> 00:22:53,860
safe as you wish they will be

511
00:22:55,149 --> 00:22:59,899
Benjamin Dell being tweeted some time

512
00:22:58,100 --> 00:23:03,049
ago that friends don't let friends save

513
00:22:59,899 --> 00:23:06,189
passwords with dpi API and he said it

514
00:23:03,049 --> 00:23:08,809
it's almost like little text passwords

515
00:23:06,190 --> 00:23:11,389
however today many applications use it

516
00:23:08,809 --> 00:23:13,908
for legitimate reasons home for example

517
00:23:11,389 --> 00:23:16,668
easy to save all of the users personal

518
00:23:13,909 --> 00:23:20,269
data the passwords everything inside the

519
00:23:16,669 --> 00:23:23,499
browser and mimikatz can pretty much

520
00:23:20,269 --> 00:23:27,950
fetch everything from your DPI

521
00:23:23,499 --> 00:23:29,539
information and it is also a decrypted

522
00:23:27,950 --> 00:23:31,759
it was written by Neil soft long time

523
00:23:29,539 --> 00:23:34,360
ago but you can just give them some

524
00:23:31,759 --> 00:23:36,679
files and it will decrypt it for you

525
00:23:34,360 --> 00:23:38,658
another term I wanted to talk about is

526
00:23:36,679 --> 00:23:42,619
LAN bus or living off the land banners

527
00:23:38,659 --> 00:23:44,119
and scripts and also libraries it was

528
00:23:42,619 --> 00:23:48,259
called by Christopher Campbell and Matt

529
00:23:44,119 --> 00:23:51,559
rebel and they build cool repo currently

530
00:23:48,259 --> 00:23:54,200
there's 96 binaries which is basically a

531
00:23:51,559 --> 00:23:56,509
list of files that you can use post post

532
00:23:54,200 --> 00:23:58,519
exploitation you just enter Windows

533
00:23:56,509 --> 00:24:01,220
machine and those files should already

534
00:23:58,519 --> 00:24:03,440
be there waiting for you it's a list of

535
00:24:01,220 --> 00:24:05,419
files and whatever you can do with them

536
00:24:03,440 --> 00:24:07,669
or we can abuse them to do things that

537
00:24:05,419 --> 00:24:10,460
usually are not allowed not supposed to

538
00:24:07,669 --> 00:24:12,789
do I'm mentioning this because one it

539
00:24:10,460 --> 00:24:16,249
uses long bus and we'll see it shortly

540
00:24:12,789 --> 00:24:18,710
and the last term is a messiah wente

541
00:24:16,249 --> 00:24:22,399
malware scan interface it's part of

542
00:24:18,710 --> 00:24:23,990
Windows 10 it's an interface standard

543
00:24:22,399 --> 00:24:28,100
that allows application to integrate

544
00:24:23,990 --> 00:24:28,940
with animal products it's not limited to

545
00:24:28,100 --> 00:24:33,080
Windows Defender

546
00:24:28,940 --> 00:24:35,480
every auntie model can and integrate

547
00:24:33,080 --> 00:24:37,369
with it and most of them actually does

548
00:24:35,480 --> 00:24:38,880
integrate with them it was already

549
00:24:37,369 --> 00:24:41,820
bypassed few times

550
00:24:38,880 --> 00:24:45,150
that link you can see cyberfest it these

551
00:24:41,820 --> 00:24:46,889
memory patching to do it and the reason

552
00:24:45,150 --> 00:24:49,160
I'm talking about am a size because Ram

553
00:24:46,890 --> 00:24:52,110
it is abusing it also will see shortly

554
00:24:49,160 --> 00:24:56,220
and now we can start talk about Ram it

555
00:24:52,110 --> 00:24:59,850
so Romney is operating since 2002 got

556
00:24:56,220 --> 00:25:02,160
taken down at 2015 that fact doesn't

557
00:24:59,850 --> 00:25:04,610
hurt him doesn't interrupt him from

558
00:25:02,160 --> 00:25:07,080
disturbing new versions almost weekly

559
00:25:04,610 --> 00:25:09,419
the latest known from a financial model

560
00:25:07,080 --> 00:25:12,929
is named camellia they name each model

561
00:25:09,420 --> 00:25:15,450
which is cool and campaign not so long

562
00:25:12,930 --> 00:25:17,520
ago they were able to infect 100,000

563
00:25:15,450 --> 00:25:20,400
machines in two months which is really

564
00:25:17,520 --> 00:25:23,100
really cool as I said before Marvel has

565
00:25:20,400 --> 00:25:25,940
to have an active session so they want

566
00:25:23,100 --> 00:25:28,320
to infect as many machines as possible

567
00:25:25,940 --> 00:25:30,780
100,000 machines in two months is very

568
00:25:28,320 --> 00:25:34,950
fast and exactly what am I wanted so

569
00:25:30,780 --> 00:25:37,740
they succeed in that Amit comes you can

570
00:25:34,950 --> 00:25:40,800
load any model they desire they have the

571
00:25:37,740 --> 00:25:42,510
HIV and C model which is hidden VNC this

572
00:25:40,800 --> 00:25:45,060
allows them to trick browser

573
00:25:42,510 --> 00:25:46,980
fingerprinting tools so they can just

574
00:25:45,060 --> 00:25:48,810
connect your machine have a remote

575
00:25:46,980 --> 00:25:50,880
connection hidden remote connection to

576
00:25:48,810 --> 00:25:53,399
your machine open your browser and

577
00:25:50,880 --> 00:25:55,350
connect to the banking website it also

578
00:25:53,400 --> 00:25:58,080
come loaded with key logger screen

579
00:25:55,350 --> 00:26:00,330
mobile cookie go grab a phone girl many

580
00:25:58,080 --> 00:26:02,280
browser injections and more and what's

581
00:26:00,330 --> 00:26:04,439
nice about run it and most when an

582
00:26:02,280 --> 00:26:07,440
advanced financial marvels the 2d they

583
00:26:04,440 --> 00:26:13,280
can create and add new models in a very

584
00:26:07,440 --> 00:26:15,960
fast time so how did I get to Romney

585
00:26:13,280 --> 00:26:18,810
while I walk photo still someone called

586
00:26:15,960 --> 00:26:21,390
and say every sample I needed to have a

587
00:26:18,810 --> 00:26:22,889
look at it and send me some files and I

588
00:26:21,390 --> 00:26:25,950
just double-click it and nothing

589
00:26:22,890 --> 00:26:28,470
happened and we did the same experience

590
00:26:25,950 --> 00:26:31,050
experiment a few times and after a few

591
00:26:28,470 --> 00:26:32,820
times just open the scripts and I

592
00:26:31,050 --> 00:26:36,389
started to use some function call

593
00:26:32,820 --> 00:26:38,580
unprotect after some researching I

594
00:26:36,390 --> 00:26:40,520
realized that this function was part of

595
00:26:38,580 --> 00:26:43,409
dpi API we will see it shortly

596
00:26:40,520 --> 00:26:45,530
so eventually just infected a machine

597
00:26:43,410 --> 00:26:48,390
which Romney and saw that there was this

598
00:26:45,530 --> 00:26:51,760
randomly generated name a GPX something

599
00:26:48,390 --> 00:26:54,549
that runs every 15 minutes after login

600
00:26:51,760 --> 00:26:56,559
and what this task is doing is basically

601
00:26:54,549 --> 00:26:58,629
of calling wmic

602
00:26:56,559 --> 00:27:03,580
which you can see it'll read about it in

603
00:26:58,630 --> 00:27:04,330
Lowell bus and WMA seas creating calling

604
00:27:03,580 --> 00:27:07,480
a vbscript

605
00:27:04,330 --> 00:27:10,299
which resides in a row something folder

606
00:27:07,480 --> 00:27:12,669
and now let's go into the folder into

607
00:27:10,299 --> 00:27:15,279
the scripts so we can see that the

608
00:27:12,669 --> 00:27:18,580
folder has three files at the X T VB

609
00:27:15,279 --> 00:27:20,590
script and a PowerShell script and when

610
00:27:18,580 --> 00:27:24,658
trying to opening the VB script it looks

611
00:27:20,590 --> 00:27:27,610
a bit obtuse cated just let's verify it

612
00:27:24,659 --> 00:27:30,279
now it's much more readable now it's

613
00:27:27,610 --> 00:27:32,439
easy to see that they'll look to check

614
00:27:30,279 --> 00:27:35,169
whether your system is 32 bits or 64

615
00:27:32,440 --> 00:27:38,440
bits and they open the appropriate

616
00:27:35,169 --> 00:27:40,870
powershell version then they try to run

617
00:27:38,440 --> 00:27:42,730
PowerShell in a hidden window while

618
00:27:40,870 --> 00:27:46,059
bypassing the execution policy of

619
00:27:42,730 --> 00:27:48,789
Windows it seems to be how us to

620
00:27:46,059 --> 00:27:51,789
accomplish then they call the some

621
00:27:48,789 --> 00:27:55,269
powershell script we will now look at

622
00:27:51,789 --> 00:27:56,860
the powershell script so I open the

623
00:27:55,269 --> 00:28:00,370
PowerShell script and this is what I saw

624
00:27:56,860 --> 00:28:04,600
a little bit unreadable just rename some

625
00:28:00,370 --> 00:28:06,789
variables now it's much more readable so

626
00:28:04,600 --> 00:28:09,370
we can see that they took some txt file

627
00:28:06,789 --> 00:28:12,429
read it and then call a function called

628
00:28:09,370 --> 00:28:16,330
called unprotect this function is part

629
00:28:12,429 --> 00:28:18,820
of windows DPI api and the scope was

630
00:28:16,330 --> 00:28:21,010
local machine so basically the model

631
00:28:18,820 --> 00:28:23,649
encrypted himself using windows api api

632
00:28:21,010 --> 00:28:25,149
and now it it opens that that means that

633
00:28:23,649 --> 00:28:26,709
if you took the files to your own

634
00:28:25,149 --> 00:28:27,309
machine you won't be able to decrypt it

635
00:28:26,710 --> 00:28:29,320
yourself

636
00:28:27,309 --> 00:28:32,320
you have to do it on the victims machine

637
00:28:29,320 --> 00:28:34,389
and in order to decrypt it in the

638
00:28:32,320 --> 00:28:35,950
victim's machine it's really easy task

639
00:28:34,389 --> 00:28:38,979
to accomplish all you need to do is that

640
00:28:35,950 --> 00:28:42,669
this line out file and now we will have

641
00:28:38,980 --> 00:28:46,889
a pretty output with a complete tag txt

642
00:28:42,669 --> 00:28:49,750
file and we'll see it really soon so

643
00:28:46,889 --> 00:28:51,908
this was the original text I don't know

644
00:28:49,750 --> 00:28:54,190
about you guys most experiments on my

645
00:28:51,909 --> 00:28:56,380
machine looks better than Oh more

646
00:28:54,190 --> 00:28:59,440
readable this one it's obviously

647
00:28:56,380 --> 00:29:01,690
encrypted so now we have the cryptid

648
00:28:59,440 --> 00:29:04,299
file because we did it before we use the

649
00:29:01,690 --> 00:29:05,580
out file function and this is what it

650
00:29:04,299 --> 00:29:08,260
looks like

651
00:29:05,580 --> 00:29:10,149
it's pretty readable you can read it it

652
00:29:08,260 --> 00:29:11,860
has some meaningful names but obviously

653
00:29:10,150 --> 00:29:14,710
as you can see the topic it has some

654
00:29:11,860 --> 00:29:17,290
random means so we start browsing the

655
00:29:14,710 --> 00:29:20,260
file and I started to test 2006 on it

656
00:29:17,290 --> 00:29:25,600
line which is a lot when all of a sudden

657
00:29:20,260 --> 00:29:28,629
I bumped into a remark over there know

658
00:29:25,600 --> 00:29:30,610
that comment said this is still get work

659
00:29:28,630 --> 00:29:32,980
address but instead of PowerShell

660
00:29:30,610 --> 00:29:35,168
converting his thing to a pointer you

661
00:29:32,980 --> 00:29:36,730
must do it yourself and I was thinking

662
00:29:35,169 --> 00:29:39,070
wait this doesn't really look like

663
00:29:36,730 --> 00:29:41,590
yourself obviously he copied it from

664
00:29:39,070 --> 00:29:45,100
somewhere I just put this comment on

665
00:29:41,590 --> 00:29:47,379
Google and Google did invoke inflective

666
00:29:45,100 --> 00:29:49,389
the injection which is part of power

667
00:29:47,380 --> 00:29:51,580
sploit basically it allows for

668
00:29:49,390 --> 00:29:55,390
reflective the injection via PowerShell

669
00:29:51,580 --> 00:29:57,909
it's really cool tool and my next step

670
00:29:55,390 --> 00:30:01,750
was to compel the original version to

671
00:29:57,910 --> 00:30:03,190
run its version the version on github on

672
00:30:01,750 --> 00:30:05,049
the right side we can see the version of

673
00:30:03,190 --> 00:30:07,540
github on the left side you can see ROM

674
00:30:05,049 --> 00:30:08,679
its version so instead it's it's pretty

675
00:30:07,540 --> 00:30:13,120
much the exact same thing

676
00:30:08,679 --> 00:30:15,940
it is also scared it really badly and so

677
00:30:13,120 --> 00:30:17,918
we changed some function names use the

678
00:30:15,940 --> 00:30:21,610
bed office Kato when it really made our

679
00:30:17,919 --> 00:30:23,770
life easier now we wanted to see what on

680
00:30:21,610 --> 00:30:26,049
it actually added to the code so we just

681
00:30:23,770 --> 00:30:30,520
browse to the end of the file and we can

682
00:30:26,049 --> 00:30:32,440
saw see this thing initially we saw this

683
00:30:30,520 --> 00:30:35,020
function which reflected the flexion

684
00:30:32,440 --> 00:30:39,190
assembly load some basics default string

685
00:30:35,020 --> 00:30:41,740
so all we did was the Coley string put

686
00:30:39,190 --> 00:30:44,770
it inside a binary file and load it with

687
00:30:41,740 --> 00:30:47,620
our favorite dotnet the compiler and now

688
00:30:44,770 --> 00:30:49,330
this is what we got you can see that the

689
00:30:47,620 --> 00:30:51,639
function name is disabled and it did

690
00:30:49,330 --> 00:30:55,270
close the library called a Masai dot DL

691
00:30:51,640 --> 00:30:57,900
arrow and after that he does get back

692
00:30:55,270 --> 00:31:00,010
address to some function in AMS I

693
00:30:57,900 --> 00:31:00,910
changed the protection creates new

694
00:31:00,010 --> 00:31:04,660
buffer

695
00:31:00,910 --> 00:31:07,840
basically it's cooking 101 obviously the

696
00:31:04,660 --> 00:31:09,490
mother is hooking a Masai functions we

697
00:31:07,840 --> 00:31:11,889
talked about it before about what is the

698
00:31:09,490 --> 00:31:15,159
NSA and he does it in order to avoid

699
00:31:11,890 --> 00:31:17,140
detection you actually use the same

700
00:31:15,159 --> 00:31:18,880
method that cyborg published you just

701
00:31:17,140 --> 00:31:21,100
changed the buffer a bit

702
00:31:18,880 --> 00:31:23,800
so that that tells us that raw meat is

703
00:31:21,100 --> 00:31:27,790
up to date and reads blogs which is cool

704
00:31:23,800 --> 00:31:29,919
so now we know that the function does

705
00:31:27,790 --> 00:31:32,889
this able a Masai we can rename it to

706
00:31:29,920 --> 00:31:36,160
disable a Masai we also notice that the

707
00:31:32,890 --> 00:31:39,190
model has some outputs things some debug

708
00:31:36,160 --> 00:31:42,760
string left which is also bad OPSEC and

709
00:31:39,190 --> 00:31:46,110
we see that it calls the sable MSI then

710
00:31:42,760 --> 00:31:47,820
it declared our original file name and

711
00:31:46,110 --> 00:31:50,469
basically

712
00:31:47,820 --> 00:31:52,270
Ramnath don't want the doorbell or the

713
00:31:50,470 --> 00:31:53,710
model itself to stay on the machine they

714
00:31:52,270 --> 00:31:57,639
only want the payload to be on the

715
00:31:53,710 --> 00:32:00,880
machine so they declare file and of the

716
00:31:57,640 --> 00:32:02,650
Mallory and they stop it delete it and

717
00:32:00,880 --> 00:32:06,850
eventually you can see that they create

718
00:32:02,650 --> 00:32:08,740
new payload it starts with 45 a as most

719
00:32:06,850 --> 00:32:11,260
of you probably know it's the magic

720
00:32:08,740 --> 00:32:14,020
header for NZ so we can guess it's an

721
00:32:11,260 --> 00:32:16,780
executable file and then it does invoke

722
00:32:14,020 --> 00:32:19,030
reflective be injection basically runs

723
00:32:16,780 --> 00:32:22,170
loads that file into PowerShell and run

724
00:32:19,030 --> 00:32:26,500
it from PowerShell context and that's

725
00:32:22,170 --> 00:32:28,720
most of the scripts job and now let's

726
00:32:26,500 --> 00:32:31,240
just recap so the architect the

727
00:32:28,720 --> 00:32:36,400
architecture was a scheduled task that

728
00:32:31,240 --> 00:32:38,980
ran Randall all best wmhc lat exe that

729
00:32:36,400 --> 00:32:42,310
called the VB script the VB script when

730
00:32:38,980 --> 00:32:47,200
the PowerShell the PowerShell read kept

731
00:32:42,310 --> 00:32:49,899
an R and a txt file and yeah the

732
00:32:47,200 --> 00:32:52,570
question is why script so Romney did it

733
00:32:49,900 --> 00:32:56,140
for multiple purposes he decrypted a txt

734
00:32:52,570 --> 00:32:58,950
file using scripts he bypassed IMSI he

735
00:32:56,140 --> 00:33:01,690
did some code injection even scripts and

736
00:32:58,950 --> 00:33:04,900
actually it's a bit hard for antiviruses

737
00:33:01,690 --> 00:33:08,500
to detect it because they're encrypted

738
00:33:04,900 --> 00:33:10,990
the payload in each machine and romney

739
00:33:08,500 --> 00:33:13,480
did a pretty good job because used many

740
00:33:10,990 --> 00:33:16,750
many scripting languages VB script

741
00:33:13,480 --> 00:33:19,090
powershell the test rescheduled trick he

742
00:33:16,750 --> 00:33:21,580
also have complex architectures we just

743
00:33:19,090 --> 00:33:23,919
saw before it was pretty it took some

744
00:33:21,580 --> 00:33:27,810
time to unveil everything and to figure

745
00:33:23,920 --> 00:33:30,340
out why does every step of the way and

746
00:33:27,810 --> 00:33:31,840
that's it we will now continue with some

747
00:33:30,340 --> 00:33:36,520
back swap

748
00:33:31,840 --> 00:33:39,070
you sew back swap will be our last

749
00:33:36,520 --> 00:33:40,900
example and more particularly what drops

750
00:33:39,070 --> 00:33:45,520
back swap onto the machine which is a

751
00:33:40,900 --> 00:33:47,890
dropper named Astapor Nemec on some

752
00:33:45,520 --> 00:33:50,230
background on back swap as we do for all

753
00:33:47,890 --> 00:33:54,070
malware so this malware was first

754
00:33:50,230 --> 00:33:55,990
spotted in March of last year it started

755
00:33:54,070 --> 00:33:58,149
by actually targeting Polish entities

756
00:33:55,990 --> 00:34:00,850
like banking institutions and

757
00:33:58,150 --> 00:34:03,250
cryptocurrency exchange platforms but

758
00:34:00,850 --> 00:34:05,949
soon it realize that apparently there is

759
00:34:03,250 --> 00:34:08,589
more money in Spain and it moved to

760
00:34:05,950 --> 00:34:13,000
attacking and targeting the sixth

761
00:34:08,589 --> 00:34:15,129
biggest banks in Spain now back soap is

762
00:34:13,000 --> 00:34:18,250
using simple yet very very cool

763
00:34:15,129 --> 00:34:20,440
techniques to do with gigs to do its web

764
00:34:18,250 --> 00:34:24,159
injections and the information stealing

765
00:34:20,440 --> 00:34:27,280
and I'll show you some examples first of

766
00:34:24,159 --> 00:34:29,740
all back soap is using bitmap images to

767
00:34:27,280 --> 00:34:33,760
hide its binary code within benign

768
00:34:29,739 --> 00:34:37,118
programs like a ladybug and when rare

769
00:34:33,760 --> 00:34:40,359
for example so it actually uses images

770
00:34:37,119 --> 00:34:44,950
and it's been using Putin images as well

771
00:34:40,359 --> 00:34:46,899
as Cartman's bottom also a nice thing I

772
00:34:44,949 --> 00:34:48,790
saw when I investigated back swap is

773
00:34:46,899 --> 00:34:51,429
that the actual code injection to the

774
00:34:48,790 --> 00:34:54,730
browser was done through the address bar

775
00:34:51,429 --> 00:34:57,760
so I just opened a banking website and

776
00:34:54,730 --> 00:34:59,830
all of a sudden I saw the URL disappear

777
00:34:57,760 --> 00:35:02,349
from the address bar and some JavaScript

778
00:34:59,830 --> 00:35:03,910
code pasted there so it was a matter of

779
00:35:02,349 --> 00:35:07,080
a second but I could actually see that

780
00:35:03,910 --> 00:35:09,399
and that's a very ridiculous method of

781
00:35:07,080 --> 00:35:13,480
injecting code to a browser because it's

782
00:35:09,400 --> 00:35:15,820
very visible also the injected code

783
00:35:13,480 --> 00:35:18,550
actually stays in the browser history so

784
00:35:15,820 --> 00:35:22,089
if you type JavaScript in the address

785
00:35:18,550 --> 00:35:26,020
bar you can actually see the code that

786
00:35:22,089 --> 00:35:29,310
it's that it injected back stop was very

787
00:35:26,020 --> 00:35:32,530
very nicely researched and they're

788
00:35:29,310 --> 00:35:34,480
absolutely great two blog posts that

789
00:35:32,530 --> 00:35:36,400
I've read and I highly recommend one is

790
00:35:34,480 --> 00:35:38,050
by Michael and Peter from ESET and the

791
00:35:36,400 --> 00:35:40,450
other one is the evolution of back swap

792
00:35:38,050 --> 00:35:42,820
written by ty Cohen from check point if

793
00:35:40,450 --> 00:35:45,848
you want to further read on this malware

794
00:35:42,820 --> 00:35:49,880
then I really recommend

795
00:35:45,849 --> 00:35:53,390
so let's do some storytime when we

796
00:35:49,880 --> 00:35:54,950
worked in Trusteer a customer contacted

797
00:35:53,390 --> 00:35:58,279
us and told us that there was a fraud

798
00:35:54,950 --> 00:35:59,960
case in a victim's machine and the nice

799
00:35:58,280 --> 00:36:01,760
thing was that the end user was just

800
00:35:59,960 --> 00:36:03,109
willing to share the sample with us and

801
00:36:01,760 --> 00:36:06,349
we were obviously very happy because

802
00:36:03,109 --> 00:36:09,680
temp samples are great right and so we

803
00:36:06,349 --> 00:36:11,740
agreed and in turn we got these so there

804
00:36:09,680 --> 00:36:14,930
was some archive file that when we

805
00:36:11,740 --> 00:36:19,399
extracted this is what showed up eight

806
00:36:14,930 --> 00:36:21,919
JSE files some sharing the same size as

807
00:36:19,400 --> 00:36:26,390
you can see but I'll have different hash

808
00:36:21,920 --> 00:36:29,410
values so eight distinct jst files we

809
00:36:26,390 --> 00:36:32,210
had no idea what these were actually

810
00:36:29,410 --> 00:36:34,430
this was definitely not a sample we're

811
00:36:32,210 --> 00:36:36,410
very used to binary files and eggsy's

812
00:36:34,430 --> 00:36:39,859
and stuff like that so yeah what was

813
00:36:36,410 --> 00:36:42,740
that we just decided to perform the

814
00:36:39,859 --> 00:36:45,980
shortest and dirtiest analysis we could

815
00:36:42,740 --> 00:36:51,770
and this is gonna be the next example of

816
00:36:45,980 --> 00:36:53,329
back swap so we opened the file the

817
00:36:51,770 --> 00:36:56,480
files are one of the file with our

818
00:36:53,329 --> 00:36:59,300
favorite editor and this is what we saw

819
00:36:56,480 --> 00:37:02,359
a lot of rubbish this was not fun to see

820
00:36:59,300 --> 00:37:04,550
but our next step of course was to ask

821
00:37:02,359 --> 00:37:08,420
Google what JSP was because to be honest

822
00:37:04,550 --> 00:37:11,050
I never ran into JSE files before and we

823
00:37:08,420 --> 00:37:14,780
saw that these were JavaScript encoded

824
00:37:11,050 --> 00:37:16,819
files and of course obviously the next

825
00:37:14,780 --> 00:37:18,680
thing we had to do was to find a decoder

826
00:37:16,819 --> 00:37:21,829
for these files to be able to read them

827
00:37:18,680 --> 00:37:25,040
and we found this project on github

828
00:37:21,829 --> 00:37:26,780
named SCR deck we simply ran it on each

829
00:37:25,040 --> 00:37:29,839
one of the files and we got some

830
00:37:26,780 --> 00:37:33,079
readable nice files a little obfuscated

831
00:37:29,839 --> 00:37:37,880
but this this is obviously nicer than

832
00:37:33,079 --> 00:37:40,940
what we had before okay so we had now

833
00:37:37,880 --> 00:37:43,190
eight files each one had around 60 K

834
00:37:40,940 --> 00:37:44,569
lines of code resulting in half a

835
00:37:43,190 --> 00:37:48,230
million lines of code that we were

836
00:37:44,569 --> 00:37:50,270
definitely not about to read but we

837
00:37:48,230 --> 00:37:53,359
decided to just take a brief look to see

838
00:37:50,270 --> 00:37:55,880
what's in there and we noticed that each

839
00:37:53,359 --> 00:37:57,980
one of the script files started with two

840
00:37:55,880 --> 00:37:58,460
function declarations each one is

841
00:37:57,980 --> 00:38:00,830
calling

842
00:37:58,460 --> 00:38:03,050
the unescape method on some parameter

843
00:38:00,830 --> 00:38:05,150
and each one of these functions were

844
00:38:03,050 --> 00:38:07,490
called thousands of time from within

845
00:38:05,150 --> 00:38:09,710
each script so we figured out these were

846
00:38:07,490 --> 00:38:12,459
important functions and we decided to

847
00:38:09,710 --> 00:38:14,930
just print out what they had to offer

848
00:38:12,460 --> 00:38:17,200
now since they were called thousands of

849
00:38:14,930 --> 00:38:19,609
time we figured out that they were

850
00:38:17,200 --> 00:38:22,189
decoding something and we decided to

851
00:38:19,609 --> 00:38:24,380
just add our own variable to each one of

852
00:38:22,190 --> 00:38:26,660
the scripts here we named it accumulated

853
00:38:24,380 --> 00:38:29,900
string we added one more line to each

854
00:38:26,660 --> 00:38:32,029
one of the functions to actually append

855
00:38:29,900 --> 00:38:35,180
the unescape characters to our new

856
00:38:32,030 --> 00:38:36,980
variable then we ran this thing on an

857
00:38:35,180 --> 00:38:38,480
isolated machine of course because once

858
00:38:36,980 --> 00:38:42,080
again we didn't know what these scripts

859
00:38:38,480 --> 00:38:44,839
were so we ran it from the command line

860
00:38:42,080 --> 00:38:48,080
and this is what we saw nice plain text

861
00:38:44,839 --> 00:38:51,290
decoded and the even nicer thing was to

862
00:38:48,080 --> 00:38:53,660
find out that this was connecting some

863
00:38:51,290 --> 00:38:55,580
machine some remote machine at this

864
00:38:53,660 --> 00:38:57,670
point of course we understood that what

865
00:38:55,580 --> 00:39:01,190
we had in our hands was a dropper or

866
00:38:57,670 --> 00:39:03,710
droppers in floral and definitely not

867
00:39:01,190 --> 00:39:05,839
back subsample but we were smart at this

868
00:39:03,710 --> 00:39:08,060
point and we could actually fetch or try

869
00:39:05,839 --> 00:39:10,279
to fetch the sampler from the command

870
00:39:08,060 --> 00:39:12,500
and control servers of course we googled

871
00:39:10,280 --> 00:39:15,560
all the indicators that we saw like some

872
00:39:12,500 --> 00:39:17,900
parts of this URL and we saw that this

873
00:39:15,560 --> 00:39:20,630
was the Oh stamp or an emic odd dropper

874
00:39:17,900 --> 00:39:24,230
which worked closely with the backs of

875
00:39:20,630 --> 00:39:28,609
malware and this was also covered very

876
00:39:24,230 --> 00:39:29,810
nicely by a third poll and yeah so this

877
00:39:28,609 --> 00:39:31,520
is the end of our quick and dirty

878
00:39:29,810 --> 00:39:34,820
solution backs up by the way a nice

879
00:39:31,520 --> 00:39:38,480
anecdote it's also moved from JSC to

880
00:39:34,820 --> 00:39:41,089
PowerShell which indicates some trending

881
00:39:38,480 --> 00:39:45,260
PowerShell usage in the world of malware

882
00:39:41,089 --> 00:39:47,839
which is interesting and after all these

883
00:39:45,260 --> 00:39:51,609
examples and real-life case studies we

884
00:39:47,839 --> 00:39:55,070
can now conclude what we've seen today

885
00:39:51,609 --> 00:39:57,109
so banking Trojans financial malware is

886
00:39:55,070 --> 00:40:00,260
moving more and more functionality from

887
00:39:57,109 --> 00:40:03,890
binary files to scripting languages and

888
00:40:00,260 --> 00:40:05,990
we saw the scripts integrated in various

889
00:40:03,890 --> 00:40:07,848
parts of the attacks so we saw the

890
00:40:05,990 --> 00:40:11,209
infection itself with the download of

891
00:40:07,849 --> 00:40:12,380
back swap we saw code execution from the

892
00:40:11,210 --> 00:40:14,809
registry for example

893
00:40:12,380 --> 00:40:18,880
with earth sniff and we saw how Ramnath

894
00:40:14,809 --> 00:40:21,559
was using scripts to encrypt data

895
00:40:18,880 --> 00:40:24,440
specific for the machine it was running

896
00:40:21,559 --> 00:40:27,319
on why are they using script so we

897
00:40:24,440 --> 00:40:31,099
mentioned that a little as well scripts

898
00:40:27,319 --> 00:40:34,849
are easier to hide from anti viruses

899
00:40:31,099 --> 00:40:37,369
engines and also I would like to say

900
00:40:34,849 --> 00:40:39,799
that malware authors are just as lazy as

901
00:40:37,369 --> 00:40:42,349
malware researchers and scripting is

902
00:40:39,799 --> 00:40:44,180
easier than compiling C code I don't

903
00:40:42,349 --> 00:40:47,779
know maybe some of you think differently

904
00:40:44,180 --> 00:40:50,058
I like writing in Python and eventually

905
00:40:47,779 --> 00:40:52,549
this thing works I mean they get all the

906
00:40:50,059 --> 00:40:54,980
functionality they want using these

907
00:40:52,549 --> 00:40:57,740
methods so they still managed to make a

908
00:40:54,980 --> 00:41:00,349
lot of money out of their cybercrime and

909
00:40:57,740 --> 00:41:03,109
yeah this is it

910
00:41:00,349 --> 00:41:05,299
so we're down here thank you very much

911
00:41:03,109 --> 00:41:09,799
for being here at 9 o'clock in the

912
00:41:05,299 --> 00:41:13,480
morning yeah thank you so much also for

913
00:41:09,799 --> 00:41:13,480
you it was very great presentation

