1
00:00:08,019 --> 00:00:13,059
a lot of you are probably familiar with

2
00:00:09,580 --> 00:00:15,519
what Yara is you build the rule it's

3
00:00:13,059 --> 00:00:17,650
kind of like a signature and you can use

4
00:00:15,519 --> 00:00:19,119
it to hunt malware now a lot of these

5
00:00:17,650 --> 00:00:23,320
rules that you see that are being built

6
00:00:19,119 --> 00:00:25,119
are built only using strings and when

7
00:00:23,320 --> 00:00:28,060
you start adding in things like a string

8
00:00:25,119 --> 00:00:32,860
out for stations the strings no longer

9
00:00:28,060 --> 00:00:35,260
work so if you look at malware from ten

10
00:00:32,860 --> 00:00:36,670
years ago for example and you look at it

11
00:00:35,260 --> 00:00:39,519
the same malware today

12
00:00:36,670 --> 00:00:41,470
your er rule probably won't work so

13
00:00:39,519 --> 00:00:43,479
basically I'm going to show you how to

14
00:00:41,470 --> 00:00:44,110
build your rules that are actually going

15
00:00:43,479 --> 00:00:49,720
to last

16
00:00:44,110 --> 00:00:51,909
while threat hunting so just to tell you

17
00:00:49,720 --> 00:00:54,089
a little bit about myself let me get

18
00:00:51,909 --> 00:00:54,089
this

19
00:01:12,549 --> 00:01:20,810
okay just so my name is Jay Rosenberg

20
00:01:17,960 --> 00:01:22,850
and I'm a senior security researcher on

21
00:01:20,810 --> 00:01:25,970
the global research and analysis team of

22
00:01:22,850 --> 00:01:27,860
Kaspersky also known as great formerly I

23
00:01:25,970 --> 00:01:28,310
was I led the research at a startup

24
00:01:27,860 --> 00:01:30,350
called

25
00:01:28,310 --> 00:01:32,869
Intel labs where we created a code reuse

26
00:01:30,350 --> 00:01:36,229
technology and I've been reverse

27
00:01:32,869 --> 00:01:39,530
engineering and programming for about 14

28
00:01:36,229 --> 00:01:41,390
years now when I focus on a threat

29
00:01:39,530 --> 00:01:50,630
intelligence malware analysis and

30
00:01:41,390 --> 00:01:54,080
reverse engineering okay so just a quick

31
00:01:50,630 --> 00:01:58,360
overview a couple basic things with

32
00:01:54,080 --> 00:02:03,250
yarra that just a little introduction

33
00:01:58,360 --> 00:02:03,250
the next part will be building and

34
00:02:04,959 --> 00:02:10,509
building and managing data sets now data

35
00:02:08,449 --> 00:02:15,190
is really important when it comes to

36
00:02:10,509 --> 00:02:18,410
building proper yarra rules that work

37
00:02:15,190 --> 00:02:20,090
the next part will be going into using

38
00:02:18,410 --> 00:02:22,340
our for threat hunting because you can

39
00:02:20,090 --> 00:02:24,320
use it in multiple ways like if you want

40
00:02:22,340 --> 00:02:25,670
to detect something and you build the

41
00:02:24,320 --> 00:02:29,900
our rule differently if you're actually

42
00:02:25,670 --> 00:02:33,369
hunting for new threats then I'll be

43
00:02:29,900 --> 00:02:35,870
speaking about building string rules

44
00:02:33,370 --> 00:02:38,650
using unique strings from the binary and

45
00:02:35,870 --> 00:02:41,120
then building rules from the actual code

46
00:02:38,650 --> 00:02:44,750
and then I'm gonna do like a case study

47
00:02:41,120 --> 00:02:47,900
with apt 15's malware or ours fox or

48
00:02:44,750 --> 00:02:50,440
mirage and show you how to build a rule

49
00:02:47,900 --> 00:02:50,440
with that

50
00:02:52,390 --> 00:03:01,488
so yarra basics so this is just like the

51
00:02:58,220 --> 00:03:03,380
basic syntax for a yard rule on the top

52
00:03:01,489 --> 00:03:06,079
and just demonstrating like a C style

53
00:03:03,380 --> 00:03:08,900
comment you see you have like the rule

54
00:03:06,079 --> 00:03:13,940
the name you can add some comments some

55
00:03:08,900 --> 00:03:15,890
metadata and a condition now the

56
00:03:13,940 --> 00:03:17,269
metadata is actually really important

57
00:03:15,890 --> 00:03:17,950
because you don't know where your rule

58
00:03:17,269 --> 00:03:20,590
is going

59
00:03:17,950 --> 00:03:23,140
and if you don't add comments and made a

60
00:03:20,590 --> 00:03:28,209
data someone else who picks up your rule

61
00:03:23,140 --> 00:03:30,730
might not know what it's used for so

62
00:03:28,209 --> 00:03:34,989
it's it's always good to to add some

63
00:03:30,730 --> 00:03:40,149
information to your role and this

64
00:03:34,989 --> 00:03:44,110
clicker is not working so one of the

65
00:03:40,150 --> 00:03:48,030
main modules that you can use with Yara

66
00:03:44,110 --> 00:03:53,200
is the PD module now this allows you to

67
00:03:48,030 --> 00:03:56,920
read information from the P header this

68
00:03:53,200 --> 00:03:59,230
is the most commonly used library that I

69
00:03:56,920 --> 00:04:05,260
use they have one for LF if you're more

70
00:03:59,230 --> 00:04:08,980
of a Linux person now you see like first

71
00:04:05,260 --> 00:04:12,160
it's checking for the header the MZ

72
00:04:08,980 --> 00:04:14,798
header by looking at the first two bytes

73
00:04:12,160 --> 00:04:17,738
of the file five eight four D and then

74
00:04:14,799 --> 00:04:20,168
it's checking if the file is exporting

75
00:04:17,738 --> 00:04:23,289
get module hair delay and then it checks

76
00:04:20,168 --> 00:04:24,940
the number of sections and if it has

77
00:04:23,289 --> 00:04:33,330
three sections and all these conditions

78
00:04:24,940 --> 00:04:36,610
are met then you have a valid match so

79
00:04:33,330 --> 00:04:40,539
as I said before building and managing

80
00:04:36,610 --> 00:04:44,680
these data sets is very important

81
00:04:40,539 --> 00:04:48,820
creating successful rules the more data

82
00:04:44,680 --> 00:04:50,770
you have the better so there's a few

83
00:04:48,820 --> 00:04:53,710
essential data collections that I

84
00:04:50,770 --> 00:04:56,620
believe you should have one of them

85
00:04:53,710 --> 00:04:59,469
being a small clean collection now these

86
00:04:56,620 --> 00:05:01,210
are files that you know are clean you

87
00:04:59,470 --> 00:05:03,220
don't want this collection to be too big

88
00:05:01,210 --> 00:05:04,739
because when you're testing your rules

89
00:05:03,220 --> 00:05:08,470
if you have if you if you make the

90
00:05:04,740 --> 00:05:11,200
collection too big then it might take a

91
00:05:08,470 --> 00:05:13,180
long time to run the our rule and you

92
00:05:11,200 --> 00:05:14,919
don't want to run a yard roll over a

93
00:05:13,180 --> 00:05:17,139
large collection if you're gonna have a

94
00:05:14,919 --> 00:05:18,969
lot of false positives so you want to do

95
00:05:17,139 --> 00:05:21,669
this first with a small clean clutch and

96
00:05:18,970 --> 00:05:25,479
check it against that and make sure you

97
00:05:21,669 --> 00:05:28,210
don't have any false positives the next

98
00:05:25,479 --> 00:05:30,349
collection that you want to have is a

99
00:05:28,210 --> 00:05:33,250
large clean collection now

100
00:05:30,350 --> 00:05:36,080
if you pass the first step with the

101
00:05:33,250 --> 00:05:39,740
small clean collection now's the time to

102
00:05:36,080 --> 00:05:44,990
run it over a larger sample set of more

103
00:05:39,740 --> 00:05:47,060
clean files and if you pass this then

104
00:05:44,990 --> 00:05:49,580
you want to you want to search it over

105
00:05:47,060 --> 00:05:52,520
files that you know are classified as

106
00:05:49,580 --> 00:05:54,710
malicious usually when you do this you

107
00:05:52,520 --> 00:05:56,330
want to categorize them into families

108
00:05:54,710 --> 00:06:00,169
like maybe you say you have some Lazarus

109
00:05:56,330 --> 00:06:03,080
malware or you have maybe t15 malware or

110
00:06:00,170 --> 00:06:06,860
Tortola whatever it is and categorize

111
00:06:03,080 --> 00:06:08,300
them and or if you just have a bunch of

112
00:06:06,860 --> 00:06:14,120
files you know are malicious you can add

113
00:06:08,300 --> 00:06:15,560
them to their just unknown and the last

114
00:06:14,120 --> 00:06:19,100
collection you want to have is just

115
00:06:15,560 --> 00:06:22,880
random data random files the more data

116
00:06:19,100 --> 00:06:24,410
you have the better you know you you

117
00:06:22,880 --> 00:06:27,430
might get this is stuff you don't know

118
00:06:24,410 --> 00:06:32,170
whether it's clean or it's malicious

119
00:06:27,430 --> 00:06:35,510
this is just a data set of random files

120
00:06:32,170 --> 00:06:38,120
that you might find connections that you

121
00:06:35,510 --> 00:06:40,909
didn't know existed before and other

122
00:06:38,120 --> 00:06:50,110
malware to the same family is right

123
00:06:40,910 --> 00:06:52,400
after that you're looking to hunt for so

124
00:06:50,110 --> 00:06:55,760
there's like a big problem when it comes

125
00:06:52,400 --> 00:06:59,479
to getting data I come from a small

126
00:06:55,760 --> 00:07:03,680
start-up in tel-aviv and our biggest

127
00:06:59,480 --> 00:07:06,040
struggle was getting data for when

128
00:07:03,680 --> 00:07:09,920
you're not like such a large company so

129
00:07:06,040 --> 00:07:12,860
there's a few sources you know the

130
00:07:09,920 --> 00:07:16,310
normal one is virustotal I mean this is

131
00:07:12,860 --> 00:07:22,420
pretty much all I had as a data source

132
00:07:16,310 --> 00:07:25,760
in order to find new apts and new

133
00:07:22,420 --> 00:07:30,200
threats that maybe went undetected by

134
00:07:25,760 --> 00:07:33,740
other vendors there's also virus Bay

135
00:07:30,200 --> 00:07:36,979
which is ran by a colleague of mine IDO

136
00:07:33,740 --> 00:07:39,370
now or it's a community community of

137
00:07:36,980 --> 00:07:42,410
malware researchers that share samples

138
00:07:39,370 --> 00:07:43,500
I'm sure we can arrange some invite

139
00:07:42,410 --> 00:07:49,890
codes after the

140
00:07:43,500 --> 00:07:51,420
there is actually ito and Danny can you

141
00:07:49,890 --> 00:07:57,360
give out some invite codes after this

142
00:07:51,420 --> 00:07:59,730
for virus pay all right cool

143
00:07:57,360 --> 00:08:01,770
I put seen it up here just like maybe

144
00:07:59,730 --> 00:08:04,710
that's we're gonna get some clean clean

145
00:08:01,770 --> 00:08:06,590
files because as I said clean files are

146
00:08:04,710 --> 00:08:09,900
just as important as malicious ones

147
00:08:06,590 --> 00:08:12,270
Microsoft maybe you take like a whole

148
00:08:09,900 --> 00:08:15,659
operating system extract all the files

149
00:08:12,270 --> 00:08:18,120
you know these files are clean and this

150
00:08:15,660 --> 00:08:21,630
could be part of your clean data set and

151
00:08:18,120 --> 00:08:25,830
then Mel pedia is another one that you

152
00:08:21,630 --> 00:08:31,140
can also click now we're off of a bit

153
00:08:25,830 --> 00:08:35,689
similar to virus Bay so you need

154
00:08:31,140 --> 00:08:41,189
something to manage all this data now

155
00:08:35,690 --> 00:08:44,070
before I joined Kaspersky they gave me

156
00:08:41,190 --> 00:08:50,100
access to their system called Clara now

157
00:08:44,070 --> 00:08:53,070
this is a yarra management system you

158
00:08:50,100 --> 00:08:55,230
put up a bunch of collections as I

159
00:08:53,070 --> 00:08:58,140
talked about before and then you're able

160
00:08:55,230 --> 00:09:00,120
to actually search yarra rules over

161
00:08:58,140 --> 00:09:02,630
these collections and it's completely

162
00:09:00,120 --> 00:09:05,190
open-source you can find it on github

163
00:09:02,630 --> 00:09:08,040
and I was using this before I joined

164
00:09:05,190 --> 00:09:12,710
Kaspersky I think it's the best platform

165
00:09:08,040 --> 00:09:12,709
for managing your or your data sets

166
00:09:16,000 --> 00:09:20,560
so this is just an example of what it

167
00:09:18,009 --> 00:09:26,050
looks like when you search a rule via

168
00:09:20,560 --> 00:09:29,649
Clara you see you have the status

169
00:09:26,050 --> 00:09:33,459
finished just that the execution times

170
00:09:29,649 --> 00:09:35,740
this is a rule the collection I tried to

171
00:09:33,459 --> 00:09:38,290
search over with sass and it didn't

172
00:09:35,740 --> 00:09:40,629
match any files but when you'd use this

173
00:09:38,290 --> 00:09:43,209
in your own case you can create like

174
00:09:40,629 --> 00:09:46,720
your own collections like this was the

175
00:09:43,209 --> 00:09:48,939
collection sass now you you can create

176
00:09:46,720 --> 00:09:50,949
those four essential data sets that I

177
00:09:48,939 --> 00:09:55,959
was talking about earlier they're small

178
00:09:50,949 --> 00:10:03,399
clean the large clean the malicious and

179
00:09:55,959 --> 00:10:06,160
the random data so moving into threat

180
00:10:03,399 --> 00:10:08,199
hunting as I said before there's a

181
00:10:06,160 --> 00:10:14,379
difference between hunting for new

182
00:10:08,199 --> 00:10:17,378
threats versus using Yara to detect so

183
00:10:14,379 --> 00:10:21,040
threat hunting you want to make like

184
00:10:17,379 --> 00:10:22,120
what I call loose rules this includes a

185
00:10:21,040 --> 00:10:29,079
lot of wildcards

186
00:10:22,120 --> 00:10:31,420
so if a certain instruction may be the

187
00:10:29,079 --> 00:10:33,849
register is gonna change you want a wild

188
00:10:31,420 --> 00:10:36,579
card the bite responsible for saying

189
00:10:33,850 --> 00:10:40,139
what registers there the thing with this

190
00:10:36,579 --> 00:10:42,040
though is you have more false positives

191
00:10:40,139 --> 00:10:45,339
but you have a higher chance of getting

192
00:10:42,040 --> 00:10:47,529
a new variant I can tell you this from

193
00:10:45,339 --> 00:10:49,350
being at a startup and the only thing I

194
00:10:47,529 --> 00:10:56,730
was able to search our rules over was

195
00:10:49,350 --> 00:11:01,120
virustotal and I managed to find a PT's

196
00:10:56,730 --> 00:11:06,459
named a malware and just by building

197
00:11:01,120 --> 00:11:10,059
these rules the other thing you can use

198
00:11:06,459 --> 00:11:11,979
our for really is detection but these

199
00:11:10,059 --> 00:11:15,600
are these are tight rules these are

200
00:11:11,980 --> 00:11:20,649
rules meant to detect certain variants

201
00:11:15,600 --> 00:11:23,199
and there they're more specific and

202
00:11:20,649 --> 00:11:25,540
that's maybe if you want to scan

203
00:11:23,199 --> 00:11:27,609
computers on your network and detect

204
00:11:25,540 --> 00:11:34,839
like a certain variant of a

205
00:11:27,610 --> 00:11:37,450
now where so where can you use these er

206
00:11:34,839 --> 00:11:42,160
rules as I mentioned before as data

207
00:11:37,450 --> 00:11:45,220
sources virustotal and now pedia both

208
00:11:42,160 --> 00:11:48,310
let you search our rules or you can

209
00:11:45,220 --> 00:11:50,019
upload a rule to virustotal and every

210
00:11:48,310 --> 00:11:53,079
time something gets scanned it scans

211
00:11:50,019 --> 00:11:56,500
with your yard rule now the way I build

212
00:11:53,079 --> 00:12:00,189
rules I almost took virustotal down I

213
00:11:56,500 --> 00:12:01,899
got an email from from Victor the

214
00:12:00,190 --> 00:12:06,430
creator of yarra he wasn't too happy

215
00:12:01,899 --> 00:12:09,850
with me he sent me a photo of a graph of

216
00:12:06,430 --> 00:12:12,719
when it ran against my rules and their

217
00:12:09,850 --> 00:12:16,690
server CPUs is piqued

218
00:12:12,720 --> 00:12:18,790
so try not to wild card things too much

219
00:12:16,690 --> 00:12:21,600
and it's not my fault if you take down

220
00:12:18,790 --> 00:12:21,599
virustotal

221
00:12:24,690 --> 00:12:34,510
so just like a procedure for building

222
00:12:29,589 --> 00:12:38,170
these successful rules first you want to

223
00:12:34,510 --> 00:12:40,450
do an analysis so you take whatever

224
00:12:38,170 --> 00:12:42,130
malware samples you have access to that

225
00:12:40,450 --> 00:12:47,529
you're looking to find maybe new

226
00:12:42,130 --> 00:12:50,620
variants or or other tools from the same

227
00:12:47,529 --> 00:12:52,360
group so you want as many tools from the

228
00:12:50,620 --> 00:12:56,410
same group or the same our family that

229
00:12:52,360 --> 00:13:01,839
you can analyze the second step is to

230
00:12:56,410 --> 00:13:04,390
identify strings code maybe even meted

231
00:13:01,839 --> 00:13:07,750
out of the PE file or your left file

232
00:13:04,390 --> 00:13:13,089
whatever using yarrow 4 and finally the

233
00:13:07,750 --> 00:13:14,890
unique information like the strength the

234
00:13:13,089 --> 00:13:18,579
third step is actually build the rule

235
00:13:14,890 --> 00:13:23,230
using information that you got from the

236
00:13:18,579 --> 00:13:24,599
binary for us to test it on those data

237
00:13:23,230 --> 00:13:26,649
sets that I spoke about before

238
00:13:24,600 --> 00:13:29,500
we're going to go over with this small

239
00:13:26,649 --> 00:13:32,980
clean data set the large clean data set

240
00:13:29,500 --> 00:13:40,270
your malicious data set and your random

241
00:13:32,980 --> 00:13:40,930
data now eww now you want to deploy the

242
00:13:40,270 --> 00:13:42,879
rule

243
00:13:40,930 --> 00:13:44,290
now at this point maybe a passed all

244
00:13:42,879 --> 00:13:48,129
your tests you don't have any false

245
00:13:44,290 --> 00:13:49,509
positives but you know there's a lot of

246
00:13:48,129 --> 00:13:52,990
data out there on the Internet

247
00:13:49,509 --> 00:13:56,529
so maybe you put it up the virustotal

248
00:13:52,990 --> 00:13:58,269
and you start getting a lot of false

249
00:13:56,529 --> 00:14:01,779
positives this used to happen to me a

250
00:13:58,269 --> 00:14:04,509
lot because we didn't have much data so

251
00:14:01,779 --> 00:14:07,209
you want to monitor the results that are

252
00:14:04,509 --> 00:14:10,480
you're getting from if you're searching

253
00:14:07,209 --> 00:14:11,979
you're on virustotal for like false

254
00:14:10,480 --> 00:14:18,119
positives and maybe you have to adjust

255
00:14:11,980 --> 00:14:20,069
something in your rule so this is uh I

256
00:14:18,119 --> 00:14:23,079
want to show you the difference between

257
00:14:20,069 --> 00:14:25,599
string rules that tend to stop working

258
00:14:23,079 --> 00:14:28,209
after a couple generations of the same

259
00:14:25,600 --> 00:14:35,019
malware and rules that are built off

260
00:14:28,209 --> 00:14:36,758
coat the thing about malware is like the

261
00:14:35,019 --> 00:14:42,610
strings might disappear but they're

262
00:14:36,759 --> 00:14:45,939
still using the same code base so this

263
00:14:42,610 --> 00:14:49,899
is just an example binary that I made

264
00:14:45,939 --> 00:14:55,449
and we can see okay you have what can be

265
00:14:49,899 --> 00:15:00,069
a unique string test space STR and we

266
00:14:55,449 --> 00:15:03,160
can build a yard rule off of that so

267
00:15:00,069 --> 00:15:05,378
this yard rule is going to detect if the

268
00:15:03,160 --> 00:15:14,009
binary if a binary has this unique

269
00:15:05,379 --> 00:15:17,939
strength test STR but what happens here

270
00:15:14,009 --> 00:15:22,709
this is often a common case in malware

271
00:15:17,939 --> 00:15:26,649
it they create the string as an array

272
00:15:22,709 --> 00:15:31,299
and now searching test string will no

273
00:15:26,649 --> 00:15:35,230
longer work so what do you do now if you

274
00:15:31,299 --> 00:15:37,629
look at older samples thread actors used

275
00:15:35,230 --> 00:15:39,939
to not do this type of thing so you

276
00:15:37,629 --> 00:15:42,459
could just find the strings as things

277
00:15:39,939 --> 00:15:46,779
have evolved these techniques are to get

278
00:15:42,459 --> 00:15:49,618
around yarra rules AV engines and other

279
00:15:46,779 --> 00:15:49,619
security products

280
00:15:51,269 --> 00:16:00,459
so if we look here on the left we have

281
00:15:56,230 --> 00:16:03,689
the string in plain text and then on the

282
00:16:00,459 --> 00:16:06,878
right we have it initialized as an array

283
00:16:03,689 --> 00:16:13,719
but what stays the same or almost the

284
00:16:06,879 --> 00:16:15,249
same is the code so I like to build my

285
00:16:13,720 --> 00:16:18,819
rules from the code because the code

286
00:16:15,249 --> 00:16:28,359
doesn't change most of the time so I'm

287
00:16:18,819 --> 00:16:30,280
going to show you it's demo time so

288
00:16:28,359 --> 00:16:33,720
something's bound to go wrong

289
00:16:30,280 --> 00:16:33,720
[Music]

290
00:16:43,590 --> 00:16:46,590
sir

291
00:16:48,980 --> 00:16:59,060
to what what ito loves busting my balls

292
00:16:59,200 --> 00:17:02,419
[Music]

293
00:17:07,790 --> 00:17:25,459
I'm his second wife by the way ten great

294
00:17:22,829 --> 00:17:25,459
question moe

295
00:18:03,120 --> 00:18:10,939
okay debate

296
00:18:22,299 --> 00:18:29,889
so here if we look at the code we can

297
00:18:27,459 --> 00:18:34,389
see after the string is initialized by

298
00:18:29,889 --> 00:18:39,129
an array here we have a lot of the same

299
00:18:34,389 --> 00:18:42,668
code compared to the goodbye area on the

300
00:18:39,129 --> 00:18:45,129
right now it's not identical

301
00:18:42,669 --> 00:18:47,859
if you actually look here you see this

302
00:18:45,129 --> 00:18:52,269
one shows movie CX which is going to

303
00:18:47,859 --> 00:18:54,879
give you different optos or the same

304
00:18:52,269 --> 00:18:56,469
output but for the register the second

305
00:18:54,879 --> 00:18:58,689
byte that tells what the register is

306
00:18:56,469 --> 00:19:01,089
it's going to change so on the right you

307
00:18:58,690 --> 00:19:03,279
have movie a X so now I got to build a

308
00:19:01,089 --> 00:19:07,690
rule that's going to work across both

309
00:19:03,279 --> 00:19:09,719
binaries from the code so what we do

310
00:19:07,690 --> 00:19:09,719
here

311
00:19:41,090 --> 00:19:47,370
so in order to build the rule role of

312
00:19:44,549 --> 00:19:50,610
the code we want to we want to be aware

313
00:19:47,370 --> 00:19:54,330
of things that can change from binary to

314
00:19:50,610 --> 00:19:57,570
binary maybe you use maybe the author

315
00:19:54,330 --> 00:19:59,428
use different compilation flags maybe

316
00:19:57,570 --> 00:20:02,309
just a different compiler in general and

317
00:19:59,429 --> 00:20:04,140
it just changed the code slightly and we

318
00:20:02,309 --> 00:20:08,100
want these rules to work throughout

319
00:20:04,140 --> 00:20:11,070
multiple generations so let's start

320
00:20:08,100 --> 00:20:14,428
building a rule over here so I'm going

321
00:20:11,070 --> 00:20:26,760
to start from this code which looks the

322
00:20:14,429 --> 00:20:33,030
same on both sides so I'll go c7 of four

323
00:20:26,760 --> 00:20:35,309
or five see the FC is the EBP plus fair

324
00:20:33,030 --> 00:20:38,190
four so that's gonna change so now we

325
00:20:35,309 --> 00:20:41,100
want a wild-card that anything like that

326
00:20:38,190 --> 00:20:43,309
that can change maybe if they change the

327
00:20:41,100 --> 00:20:46,110
function slightly it would it would be

328
00:20:43,309 --> 00:20:48,799
f8 it could this is something that we

329
00:20:46,110 --> 00:20:51,240
wild-card wildcard I mean putting these

330
00:20:48,799 --> 00:20:54,900
question marks which basically means it

331
00:20:51,240 --> 00:20:57,330
will it will accept any bite to match

332
00:20:54,900 --> 00:20:59,760
when you're matching this rule

333
00:20:57,330 --> 00:21:03,418
now constants are a very good thing to

334
00:20:59,760 --> 00:21:06,150
look for so we have elite leet as the

335
00:21:03,419 --> 00:21:08,280
constant here so we're gonna write that

336
00:21:06,150 --> 00:21:13,919
in the rule we're gonna do the same for

337
00:21:08,280 --> 00:21:24,679
the next line wild-card offset for the

338
00:21:13,919 --> 00:21:24,679
EBP take the constant again wildcard

339
00:21:29,320 --> 00:21:42,169
wild card okay so we covered those those

340
00:21:39,860 --> 00:21:45,740
lines with the constants there now let's

341
00:21:42,170 --> 00:21:48,260
get to the next part you see this is

342
00:21:45,740 --> 00:21:53,200
where it changes you have the movie CX

343
00:21:48,260 --> 00:21:57,800
here and B move EAX here

344
00:21:53,200 --> 00:22:00,890
so it's gonna happen is we're gonna take

345
00:21:57,800 --> 00:22:05,510
the out code for the move

346
00:22:00,890 --> 00:22:07,309
now the it's for D on the left and on

347
00:22:05,510 --> 00:22:10,129
the right we have four or five so we're

348
00:22:07,309 --> 00:22:12,170
gonna wild-card this because this is

349
00:22:10,130 --> 00:22:15,260
saying what register it's being moved

350
00:22:12,170 --> 00:22:19,760
into so wild card next one's an offset

351
00:22:15,260 --> 00:22:22,580
from the EBP so it's wild card that now

352
00:22:19,760 --> 00:22:25,129
we have the same thing with these ads on

353
00:22:22,580 --> 00:22:27,050
the left you have a DC X on the right

354
00:22:25,130 --> 00:22:30,170
you have a Dax so we're going to wild

355
00:22:27,050 --> 00:22:36,580
card what says what registers going into

356
00:22:30,170 --> 00:22:40,510
and the offset and do that for all the

357
00:22:36,580 --> 00:22:40,510
ads okay

358
00:22:41,290 --> 00:22:50,870
so the next one again it's still using

359
00:22:44,450 --> 00:22:56,870
the ECX so we're gonna wild card the 4d

360
00:22:50,870 --> 00:23:04,969
in the f0 same thing with the move in a

361
00:22:56,870 --> 00:23:08,989
wild card here now you see this XOR that

362
00:23:04,970 --> 00:23:10,940
we have this is a tricky one we need

363
00:23:08,990 --> 00:23:13,970
when it's X or EAX it's actually a

364
00:23:10,940 --> 00:23:17,020
different opcode so if you look over

365
00:23:13,970 --> 00:23:20,270
here X or evx

366
00:23:17,020 --> 00:23:22,309
you have the eight one and then the f2

367
00:23:20,270 --> 00:23:25,580
specifying the register and then the

368
00:23:22,309 --> 00:23:31,460
constant if you look down here when it's

369
00:23:25,580 --> 00:23:32,780
exploring the EAX the opcode is 35 so

370
00:23:31,460 --> 00:23:36,710
how do we deal with that that's

371
00:23:32,780 --> 00:23:38,540
different than just wild carding and you

372
00:23:36,710 --> 00:23:40,400
can see that it changes from binary to

373
00:23:38,540 --> 00:23:45,480
binary

374
00:23:40,400 --> 00:23:49,170
the xor EAX isn't down until here the X

375
00:23:45,480 --> 00:23:51,680
or e ax is the second one here so we've

376
00:23:49,170 --> 00:23:54,570
got a we've got to be able to skip

377
00:23:51,680 --> 00:23:55,980
basically these the opcode for this

378
00:23:54,570 --> 00:23:58,230
instruction because it can be different

379
00:23:55,980 --> 00:23:59,880
now the constants are the same but the

380
00:23:58,230 --> 00:24:07,400
opcode is different so if we continue

381
00:23:59,880 --> 00:24:11,460
building the rule we want to do a

382
00:24:07,400 --> 00:24:13,740
bracket and one to two now this one to

383
00:24:11,460 --> 00:24:16,500
two basically specifies that it's gonna

384
00:24:13,740 --> 00:24:18,720
it's gonna skip the next one two bytes

385
00:24:16,500 --> 00:24:23,820
this is because in one instruction the

386
00:24:18,720 --> 00:24:30,390
opcode is two bytes and in the X or ax

387
00:24:23,820 --> 00:24:32,669
it's only one byte so let's do the one

388
00:24:30,390 --> 00:24:40,010
to two now let's fill in the constant

389
00:24:32,670 --> 00:24:40,010
nein nein nein nein nein nein here we go

390
00:24:41,390 --> 00:24:48,570
for the move doing the same thing as

391
00:24:44,940 --> 00:24:50,400
before for the move and now here we're

392
00:24:48,570 --> 00:24:55,020
gonna hit the next x4 so we're gonna do

393
00:24:50,400 --> 00:24:59,370
another one to two and then 1 1 1 1 1 1

394
00:24:55,020 --> 00:25:05,970
1 1 8 9 doing the same thing for the

395
00:24:59,370 --> 00:25:08,639
moves as we did before and then here's

396
00:25:05,970 --> 00:25:10,830
another XOR so we're gonna skip 1 to 2

397
00:25:08,640 --> 00:25:18,800
and then we're gonna put in the

398
00:25:10,830 --> 00:25:18,800
constants bad food in X

399
00:25:26,330 --> 00:25:33,570
keep moving down we have another move

400
00:25:30,929 --> 00:25:35,789
and a wild card the same they have some

401
00:25:33,570 --> 00:25:58,110
pushes with some constants these are

402
00:25:35,789 --> 00:26:01,049
probably gonna stay the same so here we

403
00:25:58,110 --> 00:26:02,939
see we have a push EDX this is another

404
00:26:01,049 --> 00:26:04,649
one that you want to you want to watch

405
00:26:02,940 --> 00:26:12,509
out for you change the calling

406
00:26:04,649 --> 00:26:15,239
convention of a function maybe from fast

407
00:26:12,509 --> 00:26:18,330
call or C deck

408
00:26:15,240 --> 00:26:20,730
the registers might change or just the

409
00:26:18,330 --> 00:26:24,840
compiler you're using so what I do for

410
00:26:20,730 --> 00:26:27,389
pushes is I do five and then a question

411
00:26:24,840 --> 00:26:33,269
marked so basically this means anywhere

412
00:26:27,389 --> 00:26:40,168
in the Oh X 50 and below Oh X 60 it will

413
00:26:33,269 --> 00:26:43,259
accept anything in that range as we can

414
00:26:40,169 --> 00:26:47,879
see on the right it's bush ECX and on

415
00:26:43,259 --> 00:26:49,950
the left it's bush edx and then the last

416
00:26:47,879 --> 00:26:51,840
thing I'm going to add is just the

417
00:26:49,950 --> 00:26:54,330
opcode of the call because it doesn't

418
00:26:51,840 --> 00:26:55,860
matter this can this is a relative call

419
00:26:54,330 --> 00:26:57,509
so the next four bytes can change

420
00:26:55,860 --> 00:27:00,658
because the distance might change from

421
00:26:57,509 --> 00:27:02,789
the call so just instead of just adding

422
00:27:00,659 --> 00:27:05,370
the wild card we'll just take the rule

423
00:27:02,789 --> 00:27:09,679
as is here so let's try and run this

424
00:27:05,370 --> 00:27:09,678
over both files

425
00:27:47,820 --> 00:27:51,950
oops where's the safety

426
00:28:12,090 --> 00:28:17,699
okay now the first few lines is because

427
00:28:15,870 --> 00:28:20,129
I have the files open in Ida and these

428
00:28:17,700 --> 00:28:23,070
are the associated files with Ida so

429
00:28:20,130 --> 00:28:28,950
it's getting an error with those but you

430
00:28:23,070 --> 00:28:31,679
see it caught sample1 and sample2 both

431
00:28:28,950 --> 00:28:33,120
of these binaries one is with the with

432
00:28:31,680 --> 00:28:37,230
the string that was initialized by an

433
00:28:33,120 --> 00:28:43,739
array and the other binary is with the

434
00:28:37,230 --> 00:28:46,440
string in plain text and now this was

435
00:28:43,740 --> 00:28:48,840
built from this rule that came from the

436
00:28:46,440 --> 00:28:51,810
code now the thing is the code usually

437
00:28:48,840 --> 00:28:55,010
doesn't change thread actors they

438
00:28:51,810 --> 00:28:57,720
operate just like software companies and

439
00:28:55,010 --> 00:29:01,110
I'm sure a lot of you program or

440
00:28:57,720 --> 00:29:04,200
something like that I'd sent a copy and

441
00:29:01,110 --> 00:29:05,429
paste code from project to project

442
00:29:04,200 --> 00:29:08,160
I'm not going to rewrite the same

443
00:29:05,430 --> 00:29:11,730
function twice and I'm ceremony you do

444
00:29:08,160 --> 00:29:13,260
the same so this code these little

445
00:29:11,730 --> 00:29:17,640
pieces of code if you find the unique

446
00:29:13,260 --> 00:29:20,310
code are what stands out and this if you

447
00:29:17,640 --> 00:29:22,440
put a rule like this up on on virustotal

448
00:29:20,310 --> 00:29:26,220
for example let's say it was from an

449
00:29:22,440 --> 00:29:32,220
actual apt you might find new variants

450
00:29:26,220 --> 00:29:35,450
undetected variants actual different

451
00:29:32,220 --> 00:29:40,980
malware but from the same thread actor

452
00:29:35,450 --> 00:29:44,600
and from my experience working in and in

453
00:29:40,980 --> 00:29:46,950
desert when virustotal is my only option

454
00:29:44,600 --> 00:29:49,260
this worked and I was able to find new

455
00:29:46,950 --> 00:29:55,310
apts all the time by building my yarra

456
00:29:49,260 --> 00:29:59,900
rules off the code and just a quick

457
00:29:55,310 --> 00:29:59,899
quick demonstration with

458
00:30:04,100 --> 00:30:12,840
if we run it with just the test string

459
00:30:07,760 --> 00:30:15,360
it only found that sample to which had

460
00:30:12,840 --> 00:30:17,310
the non alpha skated string so you can

461
00:30:15,360 --> 00:30:20,159
see that the code by building it off the

462
00:30:17,310 --> 00:30:23,700
code we find both binaries building it

463
00:30:20,160 --> 00:30:26,370
off the string we only found one binary

464
00:30:23,700 --> 00:30:27,780
and this tends to happen any our rules

465
00:30:26,370 --> 00:30:30,330
stop working I noticed a lot of people

466
00:30:27,780 --> 00:30:34,260
online they publish our rules it doesn't

467
00:30:30,330 --> 00:30:36,389
cover the code and when it does they

468
00:30:34,260 --> 00:30:38,460
take a unique function but they don't

469
00:30:36,390 --> 00:30:43,350
wild card things that can change as you

470
00:30:38,460 --> 00:30:44,700
saw like the registers offsets and these

471
00:30:43,350 --> 00:30:55,379
are things you need to take into account

472
00:30:44,700 --> 00:30:57,750
when building these rules and as I said

473
00:30:55,380 --> 00:30:59,160
don't wild card too much unless you want

474
00:30:57,750 --> 00:31:02,850
an email from Victor the creator of

475
00:30:59,160 --> 00:31:04,610
Yarra I heard I'm on a first-name basis

476
00:31:02,850 --> 00:31:07,020
and the virustotal office because of

477
00:31:04,610 --> 00:31:09,510
certain rules that I put up and they had

478
00:31:07,020 --> 00:31:12,660
to disable them multiple times and yeah

479
00:31:09,510 --> 00:31:23,070
I'm not first-name basis not on a good

480
00:31:12,660 --> 00:31:26,430
reason okay so now what actually should

481
00:31:23,070 --> 00:31:29,730
that was just a sample file that I I

482
00:31:26,430 --> 00:31:34,490
compiled myself so I want to show you

483
00:31:29,730 --> 00:31:39,240
with actual real-world sample samples

484
00:31:34,490 --> 00:31:41,790
and I'm going to do that with the apt 15

485
00:31:39,240 --> 00:31:47,690
Mirage Mirage box whatever you want to

486
00:31:41,790 --> 00:31:50,700
call it and their malware tool set so

487
00:31:47,690 --> 00:31:52,830
the way I used to before our joint

488
00:31:50,700 --> 00:31:58,230
Kaspersky I had the visibility that I do

489
00:31:52,830 --> 00:32:02,429
now the way you used to build rules was

490
00:31:58,230 --> 00:32:04,620
I would go on I would go on different

491
00:32:02,430 --> 00:32:08,930
like security threat intelligence blogs

492
00:32:04,620 --> 00:32:14,729
maybe secure list or Palo Alto zone it

493
00:32:08,930 --> 00:32:16,359
42e sets blog checkpoint any of them and

494
00:32:14,730 --> 00:32:21,999
I would take

495
00:32:16,359 --> 00:32:23,859
the IOC s or even information that's in

496
00:32:21,999 --> 00:32:26,019
the post let's say there was a hash that

497
00:32:23,859 --> 00:32:30,158
was posted but I can't find this hash

498
00:32:26,019 --> 00:32:31,690
anywhere you can actually use data from

499
00:32:30,159 --> 00:32:34,149
screenshots or information from

500
00:32:31,690 --> 00:32:37,509
screenshots or other information that's

501
00:32:34,149 --> 00:32:40,599
given out in the post so just going to

502
00:32:37,509 --> 00:32:43,739
show you an example with a with a blog

503
00:32:40,599 --> 00:32:49,718
post that I did while I was that integer

504
00:32:43,739 --> 00:32:52,749
on Roz Fox you see we have like a code

505
00:32:49,719 --> 00:32:55,559
reuse from Raj at the time of finding

506
00:32:52,749 --> 00:33:06,249
this there were only ten detection x' on

507
00:32:55,559 --> 00:33:10,289
VT so here's an example photo of some of

508
00:33:06,249 --> 00:33:13,089
the shared code so what can you do here

509
00:33:10,289 --> 00:33:16,299
let's say you can't find the IOC s from

510
00:33:13,089 --> 00:33:19,958
the hashes on the bottom you can take

511
00:33:16,299 --> 00:33:21,549
this information here and build a yard

512
00:33:19,959 --> 00:33:27,339
well actually from the code just from a

513
00:33:21,549 --> 00:33:29,950
screenshot from a blog post you can you

514
00:33:27,339 --> 00:33:31,629
can start writing from the the up codes

515
00:33:29,950 --> 00:33:34,059
there's actually some unique strings

516
00:33:31,629 --> 00:33:38,678
here and then maybe you can find other

517
00:33:34,059 --> 00:33:41,619
variants or the same malware but with a

518
00:33:38,679 --> 00:33:49,059
different hash just from looking at one

519
00:33:41,619 --> 00:33:54,178
of these blog posts here here's another

520
00:33:49,059 --> 00:33:58,509
example now this was a function for

521
00:33:54,179 --> 00:34:03,489
decrypting the CNC configuration and I

522
00:33:58,509 --> 00:34:06,759
found this code to be in many of the apt

523
00:34:03,489 --> 00:34:08,949
15 and Miraj binaries now this is what I

524
00:34:06,759 --> 00:34:10,389
would consider a unique piece of code

525
00:34:08,949 --> 00:34:13,089
now

526
00:34:10,389 --> 00:34:16,419
the difference in the the code here as

527
00:34:13,089 --> 00:34:19,000
you see it's checking the length 134 on

528
00:34:16,418 --> 00:34:23,379
the left but on the right it's checking

529
00:34:19,000 --> 00:34:26,289
one to see so what does that mean it

530
00:34:23,379 --> 00:34:28,328
means we're gonna have to wild-card this

531
00:34:26,289 --> 00:34:30,010
area of the code in order for it to work

532
00:34:28,329 --> 00:34:35,350
on other samples

533
00:34:30,010 --> 00:34:42,639
so yes this is how I work so many are

534
00:34:35,350 --> 00:34:45,270
the windows open so let's take a mirage

535
00:34:42,639 --> 00:34:45,270
sample

536
00:35:10,160 --> 00:35:18,259
I mean I just know where to find this

537
00:35:12,140 --> 00:35:20,029
function but from from like just a

538
00:35:18,260 --> 00:35:23,840
screen shot you could actually build the

539
00:35:20,030 --> 00:35:25,340
rule if you took the opcodes just a

540
00:35:23,840 --> 00:35:27,500
little more difficult if you don't have

541
00:35:25,340 --> 00:35:28,490
the sample because any just you got to

542
00:35:27,500 --> 00:35:36,890
know the opcodes for each the

543
00:35:28,490 --> 00:35:40,000
instructions so here let's get the D op

544
00:35:36,890 --> 00:35:48,250
codes now let's build a rule from this

545
00:35:40,000 --> 00:35:48,250
rule a PT 15

546
00:35:58,530 --> 00:36:09,400
condition c1 okay since we said that the

547
00:36:07,570 --> 00:36:11,710
only it looks like the only piece of

548
00:36:09,400 --> 00:36:17,170
code that's changing here is the length

549
00:36:11,710 --> 00:36:18,340
of the CNC configuration so we're going

550
00:36:17,170 --> 00:36:23,370
to build the rule from the beginning of

551
00:36:18,340 --> 00:36:27,400
the function three three zero zero zero

552
00:36:23,370 --> 00:36:32,400
eight zero now this is another thing I

553
00:36:27,400 --> 00:36:35,620
can change is the address here you have

554
00:36:32,400 --> 00:36:37,600
maybe in this binary it's one zero zero

555
00:36:35,620 --> 00:36:39,549
one three two six eight and another

556
00:36:37,600 --> 00:36:44,380
binary it's different so again we're

557
00:36:39,550 --> 00:36:50,050
going to wild-card this four bytes in

558
00:36:44,380 --> 00:36:52,510
the ink EAX now we have the 3d and we're

559
00:36:50,050 --> 00:37:03,040
going to wild-card the length of the CNC

560
00:36:52,510 --> 00:37:07,470
configuration 7 - 2 C 3 okay so now we

561
00:37:03,040 --> 00:37:10,120
built the rule from this CNC

562
00:37:07,470 --> 00:37:14,500
configuration decryption as we saw on

563
00:37:10,120 --> 00:37:19,900
the blog post that was unique code now

564
00:37:14,500 --> 00:37:22,500
what happens when I run this across the

565
00:37:19,900 --> 00:37:22,500
samples

566
00:37:44,269 --> 00:37:48,558
so it looks like we got a hit again this

567
00:37:46,519 --> 00:37:51,348
is the errors in the beginning are from

568
00:37:48,559 --> 00:37:54,049
the file being open and Ida so you can

569
00:37:51,349 --> 00:37:57,559
ignore that and it seems we got a hit

570
00:37:54,049 --> 00:38:01,670
with multiple barrage samples actually

571
00:37:57,559 --> 00:38:05,749
every one in the folder and these

572
00:38:01,670 --> 00:38:10,119
different samples vary from can go back

573
00:38:05,749 --> 00:38:12,200
to 2012 to something more recent in 2017

574
00:38:10,119 --> 00:38:15,829
whereas if you did it off the strings

575
00:38:12,200 --> 00:38:20,450
these strings might have been obfuscated

576
00:38:15,829 --> 00:38:24,170
over the years to prevent detection but

577
00:38:20,450 --> 00:38:26,078
still the code hasn't changed and we're

578
00:38:24,170 --> 00:38:31,240
able to build the rule based off this

579
00:38:26,079 --> 00:38:31,240
now something interesting here

580
00:38:44,430 --> 00:38:47,690
this one

581
00:38:48,780 --> 00:38:55,770
now this file that we actually hit this

582
00:38:52,470 --> 00:38:58,620
is not a mirage sample this is another

583
00:38:55,770 --> 00:39:01,290
sample from a PT 15 yet we took the

584
00:38:58,620 --> 00:39:03,290
unique code from a mirage sample and if

585
00:39:01,290 --> 00:39:09,000
we applied this like on virustotal

586
00:39:03,290 --> 00:39:11,670
and we're waiting for for a hit it would

587
00:39:09,000 --> 00:39:14,130
have hit this this file here which is

588
00:39:11,670 --> 00:39:16,740
not me raj at all but it's another

589
00:39:14,130 --> 00:39:19,380
malware from the apt 15 group so you see

590
00:39:16,740 --> 00:39:21,839
you can find using the unique code

591
00:39:19,380 --> 00:39:24,210
instead of the strings you'll actually

592
00:39:21,840 --> 00:39:27,020
find maybe other malware from the same

593
00:39:24,210 --> 00:39:29,730
thread actor because of the code reuse

594
00:39:27,020 --> 00:39:34,320
as I said before they tend to reuse code

595
00:39:29,730 --> 00:39:38,040
just like any software company what I'm

596
00:39:34,320 --> 00:39:44,190
just showing you from the shift f7 this

597
00:39:38,040 --> 00:39:46,290
is not how I reverse engineer if we look

598
00:39:44,190 --> 00:39:50,510
here I mean it's just an easier way to

599
00:39:46,290 --> 00:39:50,509
show that it's not a not the same

600
00:39:50,750 --> 00:40:04,140
malware there they're clearly different

601
00:39:55,110 --> 00:40:06,900
so this is uh we I built one rule from

602
00:40:04,140 --> 00:40:09,230
this unique code and using this rule we

603
00:40:06,900 --> 00:40:13,260
detected a different brand new malware

604
00:40:09,230 --> 00:40:15,780
from the same group this happens all the

605
00:40:13,260 --> 00:40:17,430
time I'm used to having limited

606
00:40:15,780 --> 00:40:19,500
resources like I said I was at a

607
00:40:17,430 --> 00:40:21,720
start-up we didn't exactly have a big

608
00:40:19,500 --> 00:40:24,660
budget or visibility like I do it

609
00:40:21,720 --> 00:40:27,480
Kaspersky so if you don't have large

610
00:40:24,660 --> 00:40:29,310
resources and let's say you just have

611
00:40:27,480 --> 00:40:34,910
virus total this will still allow you to

612
00:40:29,310 --> 00:40:42,299
find new apts or new threats without

613
00:40:34,910 --> 00:40:46,680
having access to so much data so just to

614
00:40:42,300 --> 00:40:51,330
wrap up as I've been saying the thing

615
00:40:46,680 --> 00:40:54,810
you want to look for is code that is

616
00:40:51,330 --> 00:40:58,020
unique to specific samples and you want

617
00:40:54,810 --> 00:41:01,700
a wild card the things that that can

618
00:40:58,020 --> 00:41:01,700
change from sample to sample

619
00:41:02,210 --> 00:41:11,520
not not only this you you want to build

620
00:41:10,020 --> 00:41:15,210
those data collections that I mentioned

621
00:41:11,520 --> 00:41:18,119
before you need a way to manage these

622
00:41:15,210 --> 00:41:21,090
data sets that you have test the rules

623
00:41:18,119 --> 00:41:23,160
out and make sure you're not popping up

624
00:41:21,090 --> 00:41:24,540
with a lot of false positives there are

625
00:41:23,160 --> 00:41:27,029
plenty of times that have put up one of

626
00:41:24,540 --> 00:41:29,100
these rules I thought okay search my

627
00:41:27,030 --> 00:41:30,600
clean collection my small clean

628
00:41:29,100 --> 00:41:32,520
collection search my large clean

629
00:41:30,600 --> 00:41:35,850
collection search my malicious

630
00:41:32,520 --> 00:41:37,500
collection on my random data and then I

631
00:41:35,850 --> 00:41:38,970
put up on virustotal and actually you

632
00:41:37,500 --> 00:41:43,290
know my whole email is getting spammed

633
00:41:38,970 --> 00:41:48,330
with false positive results which means

634
00:41:43,290 --> 00:41:53,369
you need to adjust something so the main

635
00:41:48,330 --> 00:41:57,509
thing is the code it doesn't lie the

636
00:41:53,369 --> 00:41:59,550
strings are easily manipulated so when

637
00:41:57,510 --> 00:42:02,160
building rules that you want them to

638
00:41:59,550 --> 00:42:04,500
last for generations and generations of

639
00:42:02,160 --> 00:42:07,020
different malware and not only the same

640
00:42:04,500 --> 00:42:09,900
malware but now we're from the same

641
00:42:07,020 --> 00:42:18,020
thread actor you should be using the

642
00:42:09,900 --> 00:42:18,020
code any questions

643
00:42:26,520 --> 00:42:31,410
I believe they give out independent

644
00:42:28,710 --> 00:42:34,580
research accounts

645
00:42:31,410 --> 00:42:34,580
[Music]

646
00:42:47,579 --> 00:42:51,849
well what what happens is you put the

647
00:42:50,049 --> 00:42:53,529
rule up there's two ways you can do it

648
00:42:51,849 --> 00:42:55,599
it's in the regular hunting or you can

649
00:42:53,529 --> 00:42:57,069
do a retro hunt a retro hunt lets you

650
00:42:55,599 --> 00:42:59,499
search the past three months of hours

651
00:42:57,069 --> 00:43:02,109
total uploads with your yard rule and

652
00:42:59,499 --> 00:43:03,999
the other regular hunting every time a

653
00:43:02,109 --> 00:43:06,910
file gets uploaded or rescan and

654
00:43:03,999 --> 00:43:08,769
virustotal it sends you an email or you

655
00:43:06,910 --> 00:43:11,319
can check on their website with the

656
00:43:08,769 --> 00:43:15,339
results the match essentially of the our

657
00:43:11,319 --> 00:43:25,690
rule and the sample - - the sample which

658
00:43:15,339 --> 00:43:32,710
then you can go and download the rule

659
00:43:25,690 --> 00:43:35,309
itself yes mm-hmm

660
00:43:32,710 --> 00:43:35,309
that's correct

661
00:43:53,740 --> 00:44:02,259
I mean it it can it can go on none you

662
00:43:59,350 --> 00:44:04,540
wanna like basically basically it's

663
00:44:02,260 --> 00:44:07,330
something you pick up over time of doing

664
00:44:04,540 --> 00:44:09,279
this over and over again and checking

665
00:44:07,330 --> 00:44:11,850
your rules that you've built in the past

666
00:44:09,280 --> 00:44:14,650
like and if you keep practicing this you

667
00:44:11,850 --> 00:44:16,330
start to see like what parts of the code

668
00:44:14,650 --> 00:44:19,750
that you want to build it off of now

669
00:44:16,330 --> 00:44:22,000
right there in this piece of code in the

670
00:44:19,750 --> 00:44:25,420
samples that I showed they were there

671
00:44:22,000 --> 00:44:29,530
were some constants being used now these

672
00:44:25,420 --> 00:44:31,030
constants tend not to change a lot tend

673
00:44:29,530 --> 00:44:34,270
to use the same constant so when there's

674
00:44:31,030 --> 00:44:37,300
a constant this is an area of code that

675
00:44:34,270 --> 00:44:38,500
I'm going to look for and say hey I'm

676
00:44:37,300 --> 00:44:42,430
going to start writing the rule from

677
00:44:38,500 --> 00:44:45,180
here I mean there's other methods for

678
00:44:42,430 --> 00:44:45,180
this you can

679
00:44:56,150 --> 00:45:04,400
I mean yeah you can do that well you

680
00:45:03,080 --> 00:45:08,150
could build something that that

681
00:45:04,400 --> 00:45:09,590
automates it that maybe wildcards of

682
00:45:08,150 --> 00:45:12,110
things that I told you about wild

683
00:45:09,590 --> 00:45:16,310
carding I mean I I prefer to do them by

684
00:45:12,110 --> 00:45:18,440
hand just because like of doing this for

685
00:45:16,310 --> 00:45:20,480
a long time and I can see exactly what I

686
00:45:18,440 --> 00:45:23,540
want and sometimes when you build an

687
00:45:20,480 --> 00:45:26,060
automated tool you know it can add stuff

688
00:45:23,540 --> 00:45:28,880
that maybe it shouldn't have added and I

689
00:45:26,060 --> 00:45:31,910
tend to do these by hands but you can

690
00:45:28,880 --> 00:45:34,070
easily build a tool that takes maybe

691
00:45:31,910 --> 00:45:38,560
give it an address and then address and

692
00:45:34,070 --> 00:45:54,020
then it'll construct the rule itself

693
00:45:38,560 --> 00:45:59,060
using the wild carding yeah the so

694
00:45:54,020 --> 00:46:04,210
actually what I showed you before from

695
00:45:59,060 --> 00:46:09,770
the blog posts on intezaar

696
00:46:04,210 --> 00:46:16,030
I found a low detection variance of

697
00:46:09,770 --> 00:46:22,940
Miraj here's actually the code reuse

698
00:46:16,030 --> 00:46:27,860
can't really see it so there was a 13%

699
00:46:22,940 --> 00:46:31,700
code reuse from from me Raj 74% of it

700
00:46:27,860 --> 00:46:35,330
was actually unique to this specific

701
00:46:31,700 --> 00:46:38,839
variant and this is just one example of

702
00:46:35,330 --> 00:46:41,480
an apt that I was able to find while at

703
00:46:38,840 --> 00:46:43,390
a small startup just by using yar rules

704
00:46:41,480 --> 00:46:46,310
that I was able to put up on virustotal

705
00:46:43,390 --> 00:46:51,230
there's other examples of my old work on

706
00:46:46,310 --> 00:46:53,860
the intent Ezzor blog if you'd like to

707
00:46:51,230 --> 00:46:56,870
see more I can show you later you know

708
00:46:53,860 --> 00:47:00,790
mm-hmm in my room

709
00:46:56,870 --> 00:47:00,790
yes naked

710
00:47:03,800 --> 00:47:17,030
any other questions you may mow yes

711
00:47:11,440 --> 00:47:20,120
anyone else want to watch gaper view

712
00:47:17,030 --> 00:47:25,520
okay that's a good idea let's make some

713
00:47:20,120 --> 00:47:28,520
money off it all right that's it

714
00:47:25,520 --> 00:47:31,280
you can follow me on Twitter here at JJ

715
00:47:28,520 --> 00:47:32,120
dessert and thank you very much for

716
00:47:31,280 --> 00:47:38,679
attending

717
00:47:32,120 --> 00:47:38,679
[Applause]

