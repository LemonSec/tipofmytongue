1
00:00:06,250 --> 00:00:11,440
yes hi ok so today I'm going to talk

2
00:00:10,240 --> 00:00:15,160
about interrupts occation from the

3
00:00:11,440 --> 00:00:16,869
abilities we are going to focus most on

4
00:00:15,160 --> 00:00:19,359
the web applications however I believe

5
00:00:16,869 --> 00:00:21,850
that several concepts which I will share

6
00:00:19,359 --> 00:00:24,820
here will be also applicable to all

7
00:00:21,850 --> 00:00:29,409
other types of applications that you can

8
00:00:24,820 --> 00:00:29,948
imagine so again my name is Marcia

9
00:00:29,409 --> 00:00:33,070
Dorsky

10
00:00:29,949 --> 00:00:34,870
I'm using handle security ksl I'm not

11
00:00:33,070 --> 00:00:37,899
like super active on Twitter but posting

12
00:00:34,870 --> 00:00:41,620
there some content from time to time so

13
00:00:37,899 --> 00:00:43,330
you can follow me whatever table table

14
00:00:41,620 --> 00:00:45,550
of contents so we'll start with the

15
00:00:43,330 --> 00:00:49,089
introduction so we'll just briefly

16
00:00:45,550 --> 00:00:51,280
explain why I'm here then we'll jump

17
00:00:49,090 --> 00:00:53,140
into inter application vulnerabilities

18
00:00:51,280 --> 00:00:56,020
so this phrase interrupts Acacia

19
00:00:53,140 --> 00:00:58,900
venerability is not a well-known phrase

20
00:00:56,020 --> 00:01:01,900
while we all explain what is there let's

21
00:00:58,900 --> 00:01:03,790
say the day what are these inter

22
00:01:01,900 --> 00:01:06,189
application vulnerabilities and where

23
00:01:03,790 --> 00:01:08,229
you can find them then we'll jump

24
00:01:06,189 --> 00:01:10,539
directly to a couple of real-life

25
00:01:08,229 --> 00:01:13,620
examples which were identified during

26
00:01:10,540 --> 00:01:15,909
bug bounty hunting independent one and

27
00:01:13,620 --> 00:01:18,670
because I believe that each presentation

28
00:01:15,909 --> 00:01:21,490
should end with some take away with

29
00:01:18,670 --> 00:01:24,670
something that you can take away from it

30
00:01:21,490 --> 00:01:28,060
and use right away during your research

31
00:01:24,670 --> 00:01:32,830
I will share some things which which you

32
00:01:28,060 --> 00:01:35,140
might find useful later on so a little

33
00:01:32,830 --> 00:01:37,450
bit about myself so as I mentioned my

34
00:01:35,140 --> 00:01:39,310
name is marcin Tchaikovsky I used to

35
00:01:37,450 --> 00:01:42,430
work as a separate cyber security

36
00:01:39,310 --> 00:01:44,229
consultant doing web application

37
00:01:42,430 --> 00:01:46,540
penetration testing infrastructure

38
00:01:44,229 --> 00:01:50,710
penetration testing some red teaming and

39
00:01:46,540 --> 00:01:53,380
so on I did that for five years or

40
00:01:50,710 --> 00:01:56,729
something currently I'm responsible for

41
00:01:53,380 --> 00:02:00,729
security system deployment in a quite

42
00:01:56,729 --> 00:02:03,729
huge global company apart from that I'm

43
00:02:00,729 --> 00:02:05,799
an independent bug bounty hunter member

44
00:02:03,729 --> 00:02:10,119
of Sinag Red Team so one of the bug

45
00:02:05,799 --> 00:02:12,819
bounty platforms and also I participate

46
00:02:10,119 --> 00:02:16,030
in some independent bug bounty programs

47
00:02:12,819 --> 00:02:19,239
which are not let's say list it on this

48
00:02:16,030 --> 00:02:21,040
private bug bounty platforms so for

49
00:02:19,240 --> 00:02:21,750
example I was participating in hack the

50
00:02:21,040 --> 00:02:25,000
Pentagon

51
00:02:21,750 --> 00:02:29,760
United Airlines bug bounty or some bug

52
00:02:25,000 --> 00:02:33,790
bounties for of major international

53
00:02:29,760 --> 00:02:35,170
banks why this slide is important

54
00:02:33,790 --> 00:02:40,959
because I believe that the entire

55
00:02:35,170 --> 00:02:43,869
research would not happen if not they

56
00:02:40,959 --> 00:02:47,319
let's say the perspective which I was

57
00:02:43,870 --> 00:02:50,410
able to to develop by working on the

58
00:02:47,319 --> 00:02:52,510
both ends so I was able to work as a guy

59
00:02:50,410 --> 00:02:54,640
from the offensive perspective and now

60
00:02:52,510 --> 00:02:55,870
working on a defensive end I'm able to

61
00:02:54,640 --> 00:02:58,329
spot some let's say

62
00:02:55,870 --> 00:03:00,370
weak areas in this software testing and

63
00:02:58,330 --> 00:03:04,239
software development processes which

64
00:03:00,370 --> 00:03:10,209
later on might be used right away to

65
00:03:04,239 --> 00:03:11,950
find some decent vulnerabilities so yeah

66
00:03:10,209 --> 00:03:14,260
so why hunting for boxing secure

67
00:03:11,950 --> 00:03:18,429
applications so I changed the company

68
00:03:14,260 --> 00:03:21,640
recently once what resulted in change in

69
00:03:18,430 --> 00:03:24,550
my contract terms so because of that

70
00:03:21,640 --> 00:03:26,649
from let's say one and a half year I'm

71
00:03:24,550 --> 00:03:29,620
able to participate in different bug

72
00:03:26,650 --> 00:03:33,910
bounty programs I'm able to participate

73
00:03:29,620 --> 00:03:36,730
in them regularly and would say spend a

74
00:03:33,910 --> 00:03:38,260
little bit more time on that regularly

75
00:03:36,730 --> 00:03:41,709
doesn't mean full time because as I

76
00:03:38,260 --> 00:03:43,810
mention is not my it's not my full-time

77
00:03:41,709 --> 00:03:45,580
job and what is more is not even my

78
00:03:43,810 --> 00:03:47,769
part-time job because to be honest I am

79
00:03:45,580 --> 00:03:50,920
spending like I don't know maybe couple

80
00:03:47,769 --> 00:03:54,540
of hours per week on that it's also hard

81
00:03:50,920 --> 00:03:57,879
to maintain let's say Aguilar level of

82
00:03:54,540 --> 00:03:59,590
of time spend on that so sometimes I'm

83
00:03:57,879 --> 00:04:01,989
just looking for some box for I don't

84
00:03:59,590 --> 00:04:04,440
know ten weeks ten ten hours per week

85
00:04:01,989 --> 00:04:08,069
and sometimes I'm not hunting for any

86
00:04:04,440 --> 00:04:11,500
vulnerabilities for this couple of weeks

87
00:04:08,069 --> 00:04:14,220
so because of that there is a need to

88
00:04:11,500 --> 00:04:17,259
let's say to come up with some will say

89
00:04:14,220 --> 00:04:19,180
methodology of hunting for bugs I

90
00:04:17,259 --> 00:04:21,579
believe that every bug bounty hunter do

91
00:04:19,180 --> 00:04:23,710
that because there is a dark side of bad

92
00:04:21,579 --> 00:04:26,169
multi programs that probably a lot of

93
00:04:23,710 --> 00:04:28,750
you maybe are not aware of or maybe

94
00:04:26,169 --> 00:04:30,310
there is no a lot information about that

95
00:04:28,750 --> 00:04:32,620
because most of the time when you are

96
00:04:30,310 --> 00:04:34,480
hearing about bug bounty programs

97
00:04:32,620 --> 00:04:37,750
you hear about you know like like

98
00:04:34,480 --> 00:04:40,330
payouts I didn't know 10k US dollars or

99
00:04:37,750 --> 00:04:42,220
15k u.s. dollars you know people just

100
00:04:40,330 --> 00:04:44,349
writing some posts what they did and

101
00:04:42,220 --> 00:04:46,060
what they found to think is that I

102
00:04:44,350 --> 00:04:48,040
believe that majority of people who

103
00:04:46,060 --> 00:04:51,280
spend a lot of time of bug bounty

104
00:04:48,040 --> 00:04:54,040
programs are not even getting paid for

105
00:04:51,280 --> 00:04:56,830
that because they because of the

106
00:04:54,040 --> 00:04:59,470
duplicates so because the information

107
00:04:56,830 --> 00:05:03,070
about vulnerabilities reported by other

108
00:04:59,470 --> 00:05:06,100
other researchers is not publicly

109
00:05:03,070 --> 00:05:08,170
available and also because of the fact

110
00:05:06,100 --> 00:05:09,790
that some of the bug bounty programs are

111
00:05:08,170 --> 00:05:11,860
in the market for let's say like five

112
00:05:09,790 --> 00:05:14,770
years or something so it's really hard

113
00:05:11,860 --> 00:05:16,420
to find any new vulnerabilities so

114
00:05:14,770 --> 00:05:18,609
basically it results in a fact that a

115
00:05:16,420 --> 00:05:22,360
lot of people spend a lot of time on

116
00:05:18,610 --> 00:05:24,070
just you know creating these reports for

117
00:05:22,360 --> 00:05:27,010
bug bounty program looking for bug bomb

118
00:05:24,070 --> 00:05:29,590
for bugs in the applications and in the

119
00:05:27,010 --> 00:05:32,349
end they end up with nothing

120
00:05:29,590 --> 00:05:36,130
so basically in the root is this simple

121
00:05:32,350 --> 00:05:38,140
problem statement so how actually can we

122
00:05:36,130 --> 00:05:40,570
find unique vulnerabilities in your

123
00:05:38,140 --> 00:05:43,349
application of companies which are

124
00:05:40,570 --> 00:05:45,460
security major because most of the times

125
00:05:43,350 --> 00:05:47,950
companies which ran these bug bounty

126
00:05:45,460 --> 00:05:50,289
programs there are companies whose

127
00:05:47,950 --> 00:05:52,120
applications are publicly available and

128
00:05:50,290 --> 00:05:54,940
they will probably assess by many

129
00:05:52,120 --> 00:05:59,170
independent parties at least couple of

130
00:05:54,940 --> 00:06:02,500
times but it's still possible to find

131
00:05:59,170 --> 00:06:04,240
some vulnerabilities so that's let's say

132
00:06:02,500 --> 00:06:07,210
the problem statement that we need to

133
00:06:04,240 --> 00:06:09,970
solve and I would like to show you the

134
00:06:07,210 --> 00:06:13,239
methodology that basically I think it is

135
00:06:09,970 --> 00:06:16,720
valid for this one so quick intro to

136
00:06:13,240 --> 00:06:18,460
this one as well so usually while I was

137
00:06:16,720 --> 00:06:21,160
pen testing applications back in the

138
00:06:18,460 --> 00:06:24,159
days when we were asked to test some

139
00:06:21,160 --> 00:06:26,470
applications we were given a URL to the

140
00:06:24,160 --> 00:06:28,120
application that we should test so

141
00:06:26,470 --> 00:06:28,570
sometimes it was a little bit more than

142
00:06:28,120 --> 00:06:30,190
that

143
00:06:28,570 --> 00:06:32,620
but most of the times were given just

144
00:06:30,190 --> 00:06:35,530
URL and probably some accounts to begin

145
00:06:32,620 --> 00:06:38,110
the pen test process however the thing

146
00:06:35,530 --> 00:06:40,000
is that usually applications doesn't

147
00:06:38,110 --> 00:06:43,360
look like that usually they will look

148
00:06:40,000 --> 00:06:45,940
like that so apart from the apart from

149
00:06:43,360 --> 00:06:46,610
the server itself you have all the other

150
00:06:45,940 --> 00:06:49,130
company

151
00:06:46,610 --> 00:06:51,340
I don't know like some back-end system

152
00:06:49,130 --> 00:06:53,840
some other legacy application which is

153
00:06:51,340 --> 00:06:55,909
connected to this one as well as some

154
00:06:53,840 --> 00:06:59,090
other components for example mail server

155
00:06:55,910 --> 00:07:01,640
which sends emails to the end users who

156
00:06:59,090 --> 00:07:04,219
register in the application and what's

157
00:07:01,640 --> 00:07:07,789
even worse for the people who perform

158
00:07:04,220 --> 00:07:10,430
the pen test is that it's 2019 now so

159
00:07:07,790 --> 00:07:12,500
the application will look like that and

160
00:07:10,430 --> 00:07:13,850
I'm stupidly missing some components

161
00:07:12,500 --> 00:07:16,700
because right now everything is in the

162
00:07:13,850 --> 00:07:18,740
cloud so we have a WS lambda functions

163
00:07:16,700 --> 00:07:21,200
we have some is no simple email services

164
00:07:18,740 --> 00:07:24,980
and all of these components which

165
00:07:21,200 --> 00:07:27,740
usually let's say are not the part of

166
00:07:24,980 --> 00:07:29,750
the of the or pen testers are not

167
00:07:27,740 --> 00:07:32,090
informed about them so as you can see

168
00:07:29,750 --> 00:07:34,400
there is this challenge because pen

169
00:07:32,090 --> 00:07:36,530
testers are testing this thing so that's

170
00:07:34,400 --> 00:07:38,840
usually the information that they get

171
00:07:36,530 --> 00:07:41,210
and the system looks like that so you

172
00:07:38,840 --> 00:07:44,179
have a lot of components which

173
00:07:41,210 --> 00:07:46,280
theoretically are in scope and which

174
00:07:44,180 --> 00:07:49,700
theoretically may have some impact on

175
00:07:46,280 --> 00:07:51,320
the application that you are testing so

176
00:07:49,700 --> 00:07:55,550
there is a question so if you have this

177
00:07:51,320 --> 00:07:58,010
one and that one who covers the Delta so

178
00:07:55,550 --> 00:07:59,450
who is the person who is responsible for

179
00:07:58,010 --> 00:08:01,880
testing all the components which were

180
00:07:59,450 --> 00:08:06,260
not covered by the initial penetration

181
00:08:01,880 --> 00:08:09,490
test just couple of phrases which I

182
00:08:06,260 --> 00:08:13,640
encountered a couple of times while

183
00:08:09,490 --> 00:08:17,030
let's say scoping dependence right so

184
00:08:13,640 --> 00:08:18,560
some of them let's say valid ones so

185
00:08:17,030 --> 00:08:21,440
there is a good rationale of while

186
00:08:18,560 --> 00:08:23,750
people are doing that but still only

187
00:08:21,440 --> 00:08:26,360
some functionalities are in scope or

188
00:08:23,750 --> 00:08:28,990
email sending is disabled not to flood

189
00:08:26,360 --> 00:08:31,460
our people from helpdesk or whoever or

190
00:08:28,990 --> 00:08:33,020
test environment is isolated from the

191
00:08:31,460 --> 00:08:36,650
internet for security reasons which is

192
00:08:33,020 --> 00:08:38,150
probably completely fine something is

193
00:08:36,650 --> 00:08:39,949
out of scope because it's not ready yet

194
00:08:38,150 --> 00:08:41,829
and the go life is next week or

195
00:08:39,950 --> 00:08:45,440
something so basically you have all day

196
00:08:41,830 --> 00:08:47,000
let's say reasons why you cannot test

197
00:08:45,440 --> 00:08:47,770
the application from the very beginning

198
00:08:47,000 --> 00:08:52,940
to the very end

199
00:08:47,770 --> 00:08:55,340
so maybe integration test will cover all

200
00:08:52,940 --> 00:08:59,130
these components which are will say

201
00:08:55,340 --> 00:09:02,070
connected or which are somehow dependent

202
00:08:59,130 --> 00:09:04,170
from our application so I googled a

203
00:09:02,070 --> 00:09:07,040
little bit to find some definition of

204
00:09:04,170 --> 00:09:09,990
integration testing so what it covers

205
00:09:07,040 --> 00:09:11,790
what is let's say where is the security

206
00:09:09,990 --> 00:09:14,550
in the integration testing process and

207
00:09:11,790 --> 00:09:16,319
to be honest I found nothing so there is

208
00:09:14,550 --> 00:09:18,689
no like you know straight answer to this

209
00:09:16,320 --> 00:09:20,610
question but I found some articles like

210
00:09:18,690 --> 00:09:22,260
this one on the left hand side that you

211
00:09:20,610 --> 00:09:23,910
know there was some article where people

212
00:09:22,260 --> 00:09:25,590
were asking so who should be responsible

213
00:09:23,910 --> 00:09:28,290
for integration testing is that

214
00:09:25,590 --> 00:09:30,000
developer or is that maybe tester so the

215
00:09:28,290 --> 00:09:31,650
thing is that I believe that if this

216
00:09:30,000 --> 00:09:35,130
let's say responsibility for this

217
00:09:31,650 --> 00:09:40,040
testing process is not like clear it's

218
00:09:35,130 --> 00:09:42,540
not going to be them properly and

219
00:09:40,040 --> 00:09:46,680
another topic related to integration

220
00:09:42,540 --> 00:09:50,280
testing process so ideally if you have

221
00:09:46,680 --> 00:09:52,079
some people or some team which performs

222
00:09:50,280 --> 00:09:54,480
the integration testing you should have

223
00:09:52,080 --> 00:09:55,650
some people who understand system a you

224
00:09:54,480 --> 00:09:57,180
should have some people who understand

225
00:09:55,650 --> 00:09:59,220
system B from both business and

226
00:09:57,180 --> 00:10:00,839
technical perspective and in the end you

227
00:09:59,220 --> 00:10:03,300
should have some pen testers or people

228
00:10:00,840 --> 00:10:06,690
from the security who will just point

229
00:10:03,300 --> 00:10:08,790
out specific vulnerabilities that might

230
00:10:06,690 --> 00:10:10,920
be there so ideally it should be it

231
00:10:08,790 --> 00:10:12,959
should look like that however usually it

232
00:10:10,920 --> 00:10:15,000
looks like that so usually people who

233
00:10:12,960 --> 00:10:17,190
are involved in integration testing have

234
00:10:15,000 --> 00:10:18,960
no knowledge about system a and system B

235
00:10:17,190 --> 00:10:20,760
they have just some technical

236
00:10:18,960 --> 00:10:22,590
information how should they connect one

237
00:10:20,760 --> 00:10:27,030
to another and they do not care about

238
00:10:22,590 --> 00:10:30,930
the security at all so the question is

239
00:10:27,030 --> 00:10:33,390
like you know taking into account

240
00:10:30,930 --> 00:10:35,430
everything that we just mentioned so

241
00:10:33,390 --> 00:10:38,069
there is this question is that if we are

242
00:10:35,430 --> 00:10:40,260
still exploiting the technology or if we

243
00:10:38,070 --> 00:10:42,990
are exploiting the process because if we

244
00:10:40,260 --> 00:10:48,270
take into account all of these five

245
00:10:42,990 --> 00:10:51,750
bullet points which are here we may set

246
00:10:48,270 --> 00:10:54,480
up and hypothesis that all of these

247
00:10:51,750 --> 00:10:56,940
things which are let's say between one

248
00:10:54,480 --> 00:10:59,880
system and another or between various

249
00:10:56,940 --> 00:11:03,920
system components they are not tested so

250
00:10:59,880 --> 00:11:09,060
that was the let's say hypothesis or the

251
00:11:03,920 --> 00:11:10,500
methodology that I decided to let's say

252
00:11:09,060 --> 00:11:12,609
to do a little bit of research and death

253
00:11:10,500 --> 00:11:15,209
so I decided to hunt for

254
00:11:12,610 --> 00:11:18,459
back panties in some web applications

255
00:11:15,209 --> 00:11:21,998
having this mindset in my mind and it

256
00:11:18,459 --> 00:11:25,959
resulted we've that's a huge profit

257
00:11:21,999 --> 00:11:28,869
because the acceptance rate changed so

258
00:11:25,959 --> 00:11:30,670
it was over forty four percent and the

259
00:11:28,869 --> 00:11:32,290
thing is that usually the acceptance

260
00:11:30,670 --> 00:11:35,079
rate for this bug bounty programs is

261
00:11:32,290 --> 00:11:36,819
probably lower than five percent so I

262
00:11:35,079 --> 00:11:38,799
was able to report twenty seven unique

263
00:11:36,819 --> 00:11:41,170
vulnerabilities in eleven months not

264
00:11:38,799 --> 00:11:44,199
waste ink let's say too much time on

265
00:11:41,170 --> 00:11:46,059
that just to give you a brief

266
00:11:44,199 --> 00:11:49,019
information about the systems which were

267
00:11:46,059 --> 00:11:53,920
in scope destroy the publicly available

268
00:11:49,019 --> 00:11:55,749
applications of some major vendors major

269
00:11:53,920 --> 00:11:58,420
companies so yeah it may looks a little

270
00:11:55,749 --> 00:12:00,699
bit as this fishy advertisement that he

271
00:11:58,420 --> 00:12:01,509
found you know like one weird trick but

272
00:12:00,699 --> 00:12:04,959
yet that's true

273
00:12:01,509 --> 00:12:07,660
so speaking about the definition so does

274
00:12:04,959 --> 00:12:09,849
the definition which basically I created

275
00:12:07,660 --> 00:12:12,299
myself for the sake of this presentation

276
00:12:09,850 --> 00:12:14,019
so if we are speaking about

277
00:12:12,299 --> 00:12:15,610
vulnerabilities which require at least

278
00:12:14,019 --> 00:12:16,860
two different system with stem

279
00:12:15,610 --> 00:12:18,879
components to be exported successfully

280
00:12:16,860 --> 00:12:23,589
we are speaking about this inter

281
00:12:18,879 --> 00:12:26,970
application vulnerabilities okay so as I

282
00:12:23,589 --> 00:12:29,559
mentioned most of the applications which

283
00:12:26,970 --> 00:12:31,679
which I'm going to talk about here I

284
00:12:29,559 --> 00:12:34,238
cannot say the names of the companies

285
00:12:31,679 --> 00:12:36,429
however just you need to take that for

286
00:12:34,239 --> 00:12:39,040
granted that these are the some major

287
00:12:36,429 --> 00:12:40,779
publicly available web pages which

288
00:12:39,040 --> 00:12:42,819
probably all of you know so we are

289
00:12:40,779 --> 00:12:45,910
talking about some huge cyber security

290
00:12:42,819 --> 00:12:48,819
vendor huge ecommerce websites huge

291
00:12:45,910 --> 00:12:50,439
sports league so like really big

292
00:12:48,819 --> 00:12:54,429
well-known companies and really

293
00:12:50,439 --> 00:12:56,559
well-known applications starting with

294
00:12:54,429 --> 00:12:58,238
the first example so story of a desktop

295
00:12:56,559 --> 00:13:00,219
application so there was this

296
00:12:58,239 --> 00:13:04,059
application or there was the bug bounty

297
00:13:00,220 --> 00:13:06,129
for this company which was available for

298
00:13:04,059 --> 00:13:08,949
some time already and you have pretty

299
00:13:06,129 --> 00:13:10,419
much the entire domain in scope so I did

300
00:13:08,949 --> 00:13:12,339
a little bit of research in that domain

301
00:13:10,419 --> 00:13:13,959
so looking for some information on

302
00:13:12,339 --> 00:13:17,529
Google and so on and finding some

303
00:13:13,959 --> 00:13:18,998
potentially vulnerable endpoints and to

304
00:13:17,529 --> 00:13:21,249
be honest it was not that easy to find

305
00:13:18,999 --> 00:13:24,459
something however you know again by

306
00:13:21,249 --> 00:13:26,060
googling I noticed that there are

307
00:13:24,459 --> 00:13:28,430
certain URLs

308
00:13:26,060 --> 00:13:31,219
where the email address is passed in get

309
00:13:28,430 --> 00:13:32,900
requests so I was able to find them just

310
00:13:31,220 --> 00:13:35,120
by googling going to the last page and

311
00:13:32,900 --> 00:13:37,430
so and so on right and then I went to

312
00:13:35,120 --> 00:13:39,050
the application started to click through

313
00:13:37,430 --> 00:13:42,800
the application to actually find this

314
00:13:39,050 --> 00:13:44,689
vulnerable endpoint which generates this

315
00:13:42,800 --> 00:13:46,520
get request because I was thinking okay

316
00:13:44,690 --> 00:13:50,510
so more bidders there's some vulnerable

317
00:13:46,520 --> 00:13:52,670
form but I wasn't able to find that

318
00:13:50,510 --> 00:13:56,630
function or that form which actually

319
00:13:52,670 --> 00:13:58,780
generated this vulnerable URL so I

320
00:13:56,630 --> 00:14:01,160
thought that maybe there is some other

321
00:13:58,780 --> 00:14:03,260
component of application which actually

322
00:14:01,160 --> 00:14:06,819
sends that kind of weak was to do web

323
00:14:03,260 --> 00:14:10,250
server and so it has to be somewhere and

324
00:14:06,820 --> 00:14:11,930
actually that was correct because there

325
00:14:10,250 --> 00:14:13,400
was some desktop application which could

326
00:14:11,930 --> 00:14:16,280
be downloaded from the web page of the

327
00:14:13,400 --> 00:14:20,240
vendor you just need to a distant you as

328
00:14:16,280 --> 00:14:22,459
you was able to download that that

329
00:14:20,240 --> 00:14:24,800
application so Fick line the store

330
00:14:22,460 --> 00:14:28,910
application the thing is that this

331
00:14:24,800 --> 00:14:30,620
application most of the operations it

332
00:14:28,910 --> 00:14:32,360
performed it on the local workstation

333
00:14:30,620 --> 00:14:35,350
however there were two functionalities

334
00:14:32,360 --> 00:14:38,180
so license renewal and forgot password

335
00:14:35,350 --> 00:14:40,420
functionalities which resulted in HTTP

336
00:14:38,180 --> 00:14:43,760
request being sent to the web server

337
00:14:40,420 --> 00:14:46,880
yeah so I decided to work a little bit

338
00:14:43,760 --> 00:14:47,540
more on that and I ended up with two co

339
00:14:46,880 --> 00:14:50,150
site scripting

340
00:14:47,540 --> 00:14:52,490
with the very basic parallel payload so

341
00:14:50,150 --> 00:14:55,100
I noted by that by clicking you know a

342
00:14:52,490 --> 00:14:56,840
renew license and the information about

343
00:14:55,100 --> 00:15:00,500
the information that you want to renew

344
00:14:56,840 --> 00:15:02,480
license is sent over get parameter with

345
00:15:00,500 --> 00:15:04,600
number of different parameters and just

346
00:15:02,480 --> 00:15:08,090
by modifying them with this simple

347
00:15:04,600 --> 00:15:11,630
script alert one scripts payload I was

348
00:15:08,090 --> 00:15:12,890
able to spot the reflector Texas's it

349
00:15:11,630 --> 00:15:14,930
was more than that because obviously

350
00:15:12,890 --> 00:15:17,900
this forgot password mechanism was the

351
00:15:14,930 --> 00:15:20,900
one which was generating this email

352
00:15:17,900 --> 00:15:22,670
address disclosure in in get request so

353
00:15:20,900 --> 00:15:25,010
obviously the indexing protection was

354
00:15:22,670 --> 00:15:27,819
not properly configured so as a result

355
00:15:25,010 --> 00:15:30,800
there was another bug bounty on this one

356
00:15:27,820 --> 00:15:33,590
however that was just the beginning and

357
00:15:30,800 --> 00:15:36,979
because this license renewal maasai

358
00:15:33,590 --> 00:15:38,620
mechanism is probably the most important

359
00:15:36,980 --> 00:15:40,660
thing here so

360
00:15:38,620 --> 00:15:43,420
for this of you for somehow familiar

361
00:15:40,660 --> 00:15:46,630
with the HDTV protocol and the testing

362
00:15:43,420 --> 00:15:49,630
process so this is more or less how this

363
00:15:46,630 --> 00:15:51,220
license renewal process looked like so

364
00:15:49,630 --> 00:15:54,700
you were sending some information some

365
00:15:51,220 --> 00:15:56,830
ID and to the web server and based on

366
00:15:54,700 --> 00:15:59,170
that he was replying to you with your

367
00:15:56,830 --> 00:16:01,240
license number so you have obvious

368
00:15:59,170 --> 00:16:05,349
unsecure direct object reference

369
00:16:01,240 --> 00:16:07,240
vulnerability but the thing is that to

370
00:16:05,350 --> 00:16:09,310
have this kind of another ability you

371
00:16:07,240 --> 00:16:10,990
need to understand if this applique if

372
00:16:09,310 --> 00:16:12,880
this information which is disclosed to

373
00:16:10,990 --> 00:16:15,300
you so if that license number is

374
00:16:12,880 --> 00:16:19,000
actually a confidential information

375
00:16:15,300 --> 00:16:21,130
because the thing is that no one really

376
00:16:19,000 --> 00:16:23,230
knows if this license number is

377
00:16:21,130 --> 00:16:26,770
confidential because if it was license

378
00:16:23,230 --> 00:16:28,570
key that's pretty much obvious that is

379
00:16:26,770 --> 00:16:31,329
confidential information but what is

380
00:16:28,570 --> 00:16:33,460
this license number no clue still I've

381
00:16:31,330 --> 00:16:36,310
sent that report and I was you know the

382
00:16:33,460 --> 00:16:40,060
report was revoked or rejected because

383
00:16:36,310 --> 00:16:45,459
they mentioned that it's not a sensitive

384
00:16:40,060 --> 00:16:47,530
information at all however I started to

385
00:16:45,460 --> 00:16:49,660
dig a little bit more on this

386
00:16:47,530 --> 00:16:53,439
vulnerability and all the let's say

387
00:16:49,660 --> 00:16:55,600
systems in scope and actually identified

388
00:16:53,440 --> 00:16:57,610
that there was some other webpage which

389
00:16:55,600 --> 00:17:01,180
also of the same vendor which also

390
00:16:57,610 --> 00:17:04,360
allows you to renew the licenses this

391
00:17:01,180 --> 00:17:06,940
webpage was a little bit different than

392
00:17:04,359 --> 00:17:09,280
the previous one and that's how it

393
00:17:06,940 --> 00:17:11,230
looked like so you you had to provide

394
00:17:09,280 --> 00:17:13,300
your license ID and based on the

395
00:17:11,230 --> 00:17:16,510
information you provided it will just

396
00:17:13,300 --> 00:17:19,990
give you the web page where you can

397
00:17:16,510 --> 00:17:22,390
renew that license and it also were

398
00:17:19,990 --> 00:17:24,130
providing your email address so email

399
00:17:22,390 --> 00:17:26,200
address associated with that license and

400
00:17:24,130 --> 00:17:29,680
the ID to speed up the process so

401
00:17:26,200 --> 00:17:31,450
obviously if you take to account this

402
00:17:29,680 --> 00:17:34,810
information that you can easily list all

403
00:17:31,450 --> 00:17:36,820
the license numbers and you can take

404
00:17:34,810 --> 00:17:39,040
this information so you can easily Isis

405
00:17:36,820 --> 00:17:41,470
associate all the license IDs with email

406
00:17:39,040 --> 00:17:43,240
addresses you have a pretty decent

407
00:17:41,470 --> 00:17:47,860
vulnerability right because you can

408
00:17:43,240 --> 00:17:51,590
easily dump the entire database of

409
00:17:47,860 --> 00:17:54,139
customer emails of that particular

410
00:17:51,590 --> 00:17:56,259
vendor so again classical interval

411
00:17:54,139 --> 00:17:57,979
application dependency so we are

412
00:17:56,259 --> 00:18:00,350
connecting those between two

413
00:17:57,980 --> 00:18:08,360
applications factually exploits some

414
00:18:00,350 --> 00:18:11,209
issue okay continuing on that so this

415
00:18:08,360 --> 00:18:14,330
out this let's say license renewal flow

416
00:18:11,210 --> 00:18:16,580
it looks more or less like that so we

417
00:18:14,330 --> 00:18:18,320
were just you know you need to

418
00:18:16,580 --> 00:18:21,559
authenticate you were just sending the

419
00:18:18,320 --> 00:18:23,779
information about the about what

420
00:18:21,559 --> 00:18:26,799
actually what is your email address than

421
00:18:23,779 --> 00:18:30,740
you were directed and so on and so on so

422
00:18:26,799 --> 00:18:32,960
this your email address were sent in God

423
00:18:30,740 --> 00:18:36,259
requests one of the parameters then the

424
00:18:32,960 --> 00:18:40,249
server respondent with redirection to

425
00:18:36,259 --> 00:18:44,570
the single sign-on webpage and the some

426
00:18:40,249 --> 00:18:47,179
information were encoded in base64 sync

427
00:18:44,570 --> 00:18:49,009
when this basically first think it

428
00:18:47,179 --> 00:18:50,809
couldn't be easily decrypted so you were

429
00:18:49,009 --> 00:18:53,840
able to decode that but you were not

430
00:18:50,809 --> 00:18:56,210
able to get information however the last

431
00:18:53,840 --> 00:18:58,779
step redirected you of the server

432
00:18:56,210 --> 00:19:01,580
returned the login page before email so

433
00:18:58,779 --> 00:19:05,090
you may probably know where it's going

434
00:19:01,580 --> 00:19:07,789
now so you could easily replace the

435
00:19:05,090 --> 00:19:10,149
email in the first request and after the

436
00:19:07,789 --> 00:19:15,019
server possessed it you would have

437
00:19:10,149 --> 00:19:18,559
reflected XSS on SSO webpage so probably

438
00:19:15,019 --> 00:19:21,789
one of the critical applications of that

439
00:19:18,559 --> 00:19:24,740
particular window so again bug bounty

440
00:19:21,789 --> 00:19:27,889
yep so just by let's say digging into

441
00:19:24,740 --> 00:19:29,929
that web days desktop application which

442
00:19:27,889 --> 00:19:33,139
were let's say which was a beginning of

443
00:19:29,929 --> 00:19:36,710
the entire research I was able to

444
00:19:33,139 --> 00:19:39,889
identify five vulnerabilities and far

445
00:19:36,710 --> 00:19:41,929
four of them were like really basic ones

446
00:19:39,889 --> 00:19:44,119
because you know vulnerabilities like

447
00:19:41,929 --> 00:19:46,369
reflected XSS with a basic payload or

448
00:19:44,119 --> 00:19:48,019
insecure data capture difference that's

449
00:19:46,369 --> 00:19:51,340
something which probably shouldn't exist

450
00:19:48,019 --> 00:19:54,730
anymore in modern applications still

451
00:19:51,340 --> 00:19:58,999
that's the story of of this first

452
00:19:54,730 --> 00:20:02,330
company which I was able to assay

453
00:19:58,999 --> 00:20:05,330
exploit with that methodology going

454
00:20:02,330 --> 00:20:08,090
forward another case of this Intel

455
00:20:05,330 --> 00:20:12,050
Asia's vulnerability so this was a

456
00:20:08,090 --> 00:20:16,370
webpage of major sports league they used

457
00:20:12,050 --> 00:20:18,350
a number of applications located within

458
00:20:16,370 --> 00:20:20,800
different subdomains so they had a

459
00:20:18,350 --> 00:20:23,810
separate application for Easter for

460
00:20:20,800 --> 00:20:25,909
auctions for subscriptions for scores

461
00:20:23,810 --> 00:20:31,960
results whatever like plenty of

462
00:20:25,910 --> 00:20:34,970
different some domains and they say the

463
00:20:31,960 --> 00:20:37,720
the payouts for these big bounties were

464
00:20:34,970 --> 00:20:40,970
offered only for the high-impact

465
00:20:37,720 --> 00:20:43,250
vulnerabilities so as you can see SQL

466
00:20:40,970 --> 00:20:46,370
injection remote execution or persistent

467
00:20:43,250 --> 00:20:47,600
XSS what is more you go you could easily

468
00:20:46,370 --> 00:20:50,179
see that there is a web application

469
00:20:47,600 --> 00:21:00,860
firewall for certain subdomains because

470
00:20:50,180 --> 00:21:02,830
the payloads were just blocked okay but

471
00:21:00,860 --> 00:21:05,479
there was this Fink so this application

472
00:21:02,830 --> 00:21:08,780
supported some kind of registration

473
00:21:05,480 --> 00:21:11,090
mechanism which was somehow similar to

474
00:21:08,780 --> 00:21:13,730
single sign-on the thing is that you

475
00:21:11,090 --> 00:21:16,129
could easily register on each of these

476
00:21:13,730 --> 00:21:20,600
subdomains and then you could use this

477
00:21:16,130 --> 00:21:22,910
credentials to authenticate to any other

478
00:21:20,600 --> 00:21:26,060
web application which was also in in

479
00:21:22,910 --> 00:21:28,250
scope of this of this vendor of this

480
00:21:26,060 --> 00:21:30,679
domain so basically you that was some

481
00:21:28,250 --> 00:21:32,330
back-end database which was a source of

482
00:21:30,680 --> 00:21:36,470
tools like a single source of truth so

483
00:21:32,330 --> 00:21:38,960
for all the applications and the thing

484
00:21:36,470 --> 00:21:40,880
is that email address was also published

485
00:21:38,960 --> 00:21:42,950
in each of these applications in most

486
00:21:40,880 --> 00:21:44,690
cases it was encoded and the filtering

487
00:21:42,950 --> 00:21:47,930
mechanism existed during registration

488
00:21:44,690 --> 00:21:50,360
process but the thing is that input

489
00:21:47,930 --> 00:21:52,550
filtering is not easy especially for the

490
00:21:50,360 --> 00:21:55,010
emails because we need to ask ourself a

491
00:21:52,550 --> 00:21:58,040
question what actually is a valid for my

492
00:21:55,010 --> 00:21:59,600
format for the email address so you can

493
00:21:58,040 --> 00:22:00,350
go to a rough seas to find this

494
00:21:59,600 --> 00:22:02,719
information

495
00:22:00,350 --> 00:22:06,889
you can go to Wikipedia because it's

496
00:22:02,720 --> 00:22:09,320
let's say explain during a more honest

497
00:22:06,890 --> 00:22:11,600
understandable manner so basically the

498
00:22:09,320 --> 00:22:14,030
thing is if you can see that from the

499
00:22:11,600 --> 00:22:16,149
backside that special characters are

500
00:22:14,030 --> 00:22:19,040
allowed in the local part of the email

501
00:22:16,150 --> 00:22:22,040
and if you

502
00:22:19,040 --> 00:22:25,659
it in the quotes so basically this means

503
00:22:22,040 --> 00:22:28,520
this kind of email valid from the RFC

504
00:22:25,660 --> 00:22:31,640
perspective and actually a lot of

505
00:22:28,520 --> 00:22:33,379
webpages accept this kind of email so

506
00:22:31,640 --> 00:22:35,780
the thing is that if this kind of email

507
00:22:33,380 --> 00:22:40,100
is accepted so if you are able to bypass

508
00:22:35,780 --> 00:22:43,160
the filter and on the other hand output

509
00:22:40,100 --> 00:22:45,429
encoding is not there you have a huge

510
00:22:43,160 --> 00:22:48,890
huge problem

511
00:22:45,430 --> 00:22:50,960
why because on one of these pages you

512
00:22:48,890 --> 00:22:54,140
are actually able to register yourself

513
00:22:50,960 --> 00:22:55,810
with this kind of email address cool the

514
00:22:54,140 --> 00:22:59,540
thing is that on some other web page

515
00:22:55,810 --> 00:23:02,210
output encoding was not enabled so

516
00:22:59,540 --> 00:23:04,490
basically you started the attack from

517
00:23:02,210 --> 00:23:07,100
one application just by putting the

518
00:23:04,490 --> 00:23:10,610
payload there this application was once

519
00:23:07,100 --> 00:23:12,980
a protected from cosig scripting however

520
00:23:10,610 --> 00:23:16,429
the other application which used the

521
00:23:12,980 --> 00:23:17,930
same user database was not protected

522
00:23:16,430 --> 00:23:22,820
from this kind of attacks so this

523
00:23:17,930 --> 00:23:25,760
resulted in the persistent XSS the thing

524
00:23:22,820 --> 00:23:27,439
was that most likely the only impacted

525
00:23:25,760 --> 00:23:29,540
person will be the account owner because

526
00:23:27,440 --> 00:23:33,770
that's the only place where you can see

527
00:23:29,540 --> 00:23:38,830
the the user email address however still

528
00:23:33,770 --> 00:23:40,129
they paid bounty for that so I was happy

529
00:23:38,830 --> 00:23:42,350
actually

530
00:23:40,130 --> 00:23:45,110
there was more of this kind of exercises

531
00:23:42,350 --> 00:23:46,219
with that vendor because obviously as I

532
00:23:45,110 --> 00:23:47,740
mentioned a lot of well-known

533
00:23:46,220 --> 00:23:51,380
applications allow you to register

534
00:23:47,740 --> 00:23:53,570
accounts with this kind of quality mail

535
00:23:51,380 --> 00:23:55,280
address one of these web pages is PayPal

536
00:23:53,570 --> 00:23:57,350
so you can go to PayPal and register

537
00:23:55,280 --> 00:23:59,750
yourself this kind of accounts the thing

538
00:23:57,350 --> 00:24:01,189
is that pay low also have some woth so

539
00:23:59,750 --> 00:24:05,000
if you register yourself this kind of

540
00:24:01,190 --> 00:24:06,560
account you will then get let's say you

541
00:24:05,000 --> 00:24:11,420
will get error messages coming from

542
00:24:06,560 --> 00:24:15,679
PayPal but you can still use that people

543
00:24:11,420 --> 00:24:18,320
let's say registered email address to

544
00:24:15,680 --> 00:24:20,930
let's say start the or to initiate the

545
00:24:18,320 --> 00:24:24,169
payment process so that happens for for

546
00:24:20,930 --> 00:24:26,060
this application so here is the flow so

547
00:24:24,170 --> 00:24:28,700
I wanted to purchase an item then I

548
00:24:26,060 --> 00:24:31,129
decided to pay with my PayPal account

549
00:24:28,700 --> 00:24:32,299
and the web server I directed me to

550
00:24:31,130 --> 00:24:35,209
PayPal web page

551
00:24:32,299 --> 00:24:39,609
so that's how it looks like so I was

552
00:24:35,209 --> 00:24:42,529
able to I needed to authenticate with my

553
00:24:39,609 --> 00:24:45,799
PayPal account however I was able to

554
00:24:42,529 --> 00:24:48,889
press that little Bank button which says

555
00:24:45,799 --> 00:24:52,399
cancel and go back to store dot example

556
00:24:48,889 --> 00:24:54,158
that comb and just you know not to

557
00:24:52,399 --> 00:24:58,518
continue the transaction the thing is

558
00:24:54,159 --> 00:25:01,789
that the application has the very long

559
00:24:58,519 --> 00:25:04,129
list of all the transactions successful

560
00:25:01,789 --> 00:25:04,700
and unsuccessful ones with all the

561
00:25:04,129 --> 00:25:09,049
details

562
00:25:04,700 --> 00:25:11,629
so just because of let's say initiating

563
00:25:09,049 --> 00:25:15,200
the transaction with this trick email

564
00:25:11,629 --> 00:25:19,399
address I was able to perform another

565
00:25:15,200 --> 00:25:21,589
paralytic attack however in that case it

566
00:25:19,399 --> 00:25:23,889
resulted in no profit because I think

567
00:25:21,589 --> 00:25:26,958
that right after I report the first

568
00:25:23,889 --> 00:25:30,199
vulnerability like that and the vendor

569
00:25:26,959 --> 00:25:32,749
decided to change the scope so they said

570
00:25:30,200 --> 00:25:35,509
that persistent cos I scripting which

571
00:25:32,749 --> 00:25:42,249
have no clear impact on other users were

572
00:25:35,509 --> 00:25:45,729
excluded from from program scope however

573
00:25:42,249 --> 00:25:48,049
still again that's an example of

574
00:25:45,729 --> 00:25:49,609
interrupts occation Fornell abilities so

575
00:25:48,049 --> 00:25:51,489
just by using number of different

576
00:25:49,609 --> 00:25:54,439
systems we are able to find some pretty

577
00:25:51,489 --> 00:25:57,049
easy vulnerabilities which were not

578
00:25:54,440 --> 00:25:59,629
encountered before and quick update on

579
00:25:57,049 --> 00:26:01,190
that because the entire presentation is

580
00:25:59,629 --> 00:26:03,799
mentioning the vulnerabilities which

581
00:26:01,190 --> 00:26:04,999
were identified last year this year I've

582
00:26:03,799 --> 00:26:07,070
even last mouth

583
00:26:04,999 --> 00:26:08,749
I even identified three of these cases

584
00:26:07,070 --> 00:26:13,070
of this kind of exercises in email

585
00:26:08,749 --> 00:26:15,379
addresses which were actually which were

586
00:26:13,070 --> 00:26:19,489
able to let's say to impact multiple

587
00:26:15,379 --> 00:26:21,708
users because they had some kind of I

588
00:26:19,489 --> 00:26:25,129
don't know like referral mechanism so

589
00:26:21,709 --> 00:26:26,599
the information about the person in a

590
00:26:25,129 --> 00:26:28,549
mail address of person who sent you that

591
00:26:26,599 --> 00:26:34,789
communication was present on the webpage

592
00:26:28,549 --> 00:26:39,289
so it ended up with a decent payouts 3rd

593
00:26:34,789 --> 00:26:41,599
huge area so this is related to emails

594
00:26:39,289 --> 00:26:44,359
so as somebody mentioned a lot of

595
00:26:41,599 --> 00:26:46,050
applications sent emails to their users

596
00:26:44,359 --> 00:26:48,629
you have

597
00:26:46,050 --> 00:26:50,730
pretty much every application every

598
00:26:48,630 --> 00:26:53,850
webpage sends emails I don't know if

599
00:26:50,730 --> 00:26:55,950
it's newsletter registration mechanism

600
00:26:53,850 --> 00:26:59,879
forgot password functionality referral

601
00:26:55,950 --> 00:27:02,370
mechanism so all of this they send image

602
00:26:59,880 --> 00:27:04,260
the end users and the thing is that

603
00:27:02,370 --> 00:27:06,059
these functionalities which send email

604
00:27:04,260 --> 00:27:09,420
and which rely on email communications

605
00:27:06,059 --> 00:27:11,399
again they are often not tested because

606
00:27:09,420 --> 00:27:13,950
usually where you have a test

607
00:27:11,400 --> 00:27:16,320
environment people wants to disable them

608
00:27:13,950 --> 00:27:20,910
by sending functionality not to create a

609
00:27:16,320 --> 00:27:22,770
lot of noise let's say in the network so

610
00:27:20,910 --> 00:27:25,670
there was this huge application

611
00:27:22,770 --> 00:27:28,139
e-commerce one and they have this

612
00:27:25,670 --> 00:27:32,010
functionality which allows one user to

613
00:27:28,140 --> 00:27:35,160
chat with the other user nicely to agree

614
00:27:32,010 --> 00:27:38,460
on the payment details and all the stuff

615
00:27:35,160 --> 00:27:41,220
like that so that's the flow how it

616
00:27:38,460 --> 00:27:43,170
looks like so let's say that Bob wants

617
00:27:41,220 --> 00:27:46,020
to chat with Alan he sends him some

618
00:27:43,170 --> 00:27:48,450
message in the web application then Alan

619
00:27:46,020 --> 00:27:51,290
receives a notification like an email

620
00:27:48,450 --> 00:27:55,110
message coming from this email address

621
00:27:51,290 --> 00:27:57,960
and just by replying to this email he is

622
00:27:55,110 --> 00:28:00,919
able to reply directly to Bob and Bob

623
00:27:57,960 --> 00:28:04,410
sees the entire communication in his

624
00:28:00,920 --> 00:28:08,400
profile so in the application the thing

625
00:28:04,410 --> 00:28:10,860
is that obviously if you know what is

626
00:28:08,400 --> 00:28:13,770
the email address so if you know what is

627
00:28:10,860 --> 00:28:16,500
the sender and the recipients temporary

628
00:28:13,770 --> 00:28:18,330
in a mail address you can easily spoof

629
00:28:16,500 --> 00:28:21,840
the message content and that's exactly

630
00:28:18,330 --> 00:28:24,750
what happened so basically you can you

631
00:28:21,840 --> 00:28:29,159
could identify that you are able to spot

632
00:28:24,750 --> 00:28:30,090
the send there's email address in some

633
00:28:29,160 --> 00:28:32,820
JSON requests

634
00:28:30,090 --> 00:28:36,020
so just by replying or just by sending a

635
00:28:32,820 --> 00:28:38,820
message from that email to that email

636
00:28:36,020 --> 00:28:41,100
you were able to spoof the messages in

637
00:28:38,820 --> 00:28:44,850
the communication so you were just able

638
00:28:41,100 --> 00:28:46,620
to create you know the communication by

639
00:28:44,850 --> 00:28:47,309
yourself so you could talk with one to

640
00:28:46,620 --> 00:28:51,120
each other

641
00:28:47,309 --> 00:28:54,149
agree on some contract terms or whatever

642
00:28:51,120 --> 00:28:56,719
and then non-repudiation is being

643
00:28:54,150 --> 00:28:59,850
affected

644
00:28:56,720 --> 00:29:05,400
more on debt malcontent spoofing so that

645
00:28:59,850 --> 00:29:10,679
is quite well-known attack so it relies

646
00:29:05,400 --> 00:29:13,740
on let's say the usage of host header so

647
00:29:10,680 --> 00:29:17,730
just since some of the email content is

648
00:29:13,740 --> 00:29:20,070
created based on the value of host

649
00:29:17,730 --> 00:29:22,170
header just by replacing hospital you

650
00:29:20,070 --> 00:29:24,240
are able to impact the content of the

651
00:29:22,170 --> 00:29:27,060
email messages that are coming to the

652
00:29:24,240 --> 00:29:28,890
end users so this is the say one of the

653
00:29:27,060 --> 00:29:31,830
most classic examples so you have a

654
00:29:28,890 --> 00:29:36,000
hacker who will research password of

655
00:29:31,830 --> 00:29:39,120
some random user and he will modify the

656
00:29:36,000 --> 00:29:41,550
value of host header and as a result the

657
00:29:39,120 --> 00:29:44,100
guy will receive an email address coming

658
00:29:41,550 --> 00:29:46,889
from a email message coming from a

659
00:29:44,100 --> 00:29:53,459
completely legit email address with

660
00:29:46,890 --> 00:29:56,940
spoofed domain name in the email body so

661
00:29:53,460 --> 00:29:59,040
that's like a huge class of

662
00:29:56,940 --> 00:30:01,050
vulnerabilities related to insecure HTTP

663
00:29:59,040 --> 00:30:03,690
headers it's not just about emails

664
00:30:01,050 --> 00:30:05,879
because I was also able to prove the

665
00:30:03,690 --> 00:30:07,890
content of text message which was

666
00:30:05,880 --> 00:30:11,460
delivered to the end user just by simply

667
00:30:07,890 --> 00:30:13,500
modifying this host headers so you can

668
00:30:11,460 --> 00:30:15,780
modify the host header you can try to

669
00:30:13,500 --> 00:30:18,330
substitute or to add another header

670
00:30:15,780 --> 00:30:20,610
which is x4 well with hosts or you can

671
00:30:18,330 --> 00:30:23,879
come up with some more fancy headers

672
00:30:20,610 --> 00:30:25,469
like X Akamai original URL so basically

673
00:30:23,880 --> 00:30:29,160
the rule is simple the more fancy

674
00:30:25,470 --> 00:30:38,070
Heather you have the bigger the chance

675
00:30:29,160 --> 00:30:42,510
of payouts is third case related to to

676
00:30:38,070 --> 00:30:45,360
to to to email vulnerabilities so as you

677
00:30:42,510 --> 00:30:47,460
can probably imagine spidering the

678
00:30:45,360 --> 00:30:51,780
classical spider link doesn't work

679
00:30:47,460 --> 00:30:56,970
anymore for the URLs which are sent in

680
00:30:51,780 --> 00:30:58,830
email messages so basically as I

681
00:30:56,970 --> 00:31:04,650
mentioned a lot of applications send

682
00:30:58,830 --> 00:31:06,570
different things in in male body so what

683
00:31:04,650 --> 00:31:08,190
I usually do is I will put my email

684
00:31:06,570 --> 00:31:09,520
address and register myself to

685
00:31:08,190 --> 00:31:12,040
everything

686
00:31:09,520 --> 00:31:15,340
that I can register for so all the

687
00:31:12,040 --> 00:31:17,559
things like subscribe unsubscribe refer

688
00:31:15,340 --> 00:31:20,110
someone if I have friends I don't know

689
00:31:17,559 --> 00:31:22,540
all of these things newsletters you can

690
00:31:20,110 --> 00:31:25,020
just register himself you will you will

691
00:31:22,540 --> 00:31:28,870
get some kind of email message from that

692
00:31:25,020 --> 00:31:30,490
service and then you can pretty much use

693
00:31:28,870 --> 00:31:32,649
active scanner ones or some other

694
00:31:30,490 --> 00:31:34,840
feature on that just to find

695
00:31:32,650 --> 00:31:37,210
vulnerabilities within right and again

696
00:31:34,840 --> 00:31:38,949
just by doing that so just by getting

697
00:31:37,210 --> 00:31:40,720
these emails and then following the

698
00:31:38,950 --> 00:31:41,679
links in that and putting some really

699
00:31:40,720 --> 00:31:44,670
basic payloads

700
00:31:41,679 --> 00:31:47,860
I was able to identify like multiple

701
00:31:44,670 --> 00:31:52,410
vulnerabilities like reflected for site

702
00:31:47,860 --> 00:31:52,409
scripting or insecure CAPTCHA governance

703
00:31:52,710 --> 00:31:59,920
okay going to the takeaway section so if

704
00:31:58,120 --> 00:32:03,159
you are a bug bounty hunter open test

705
00:31:59,920 --> 00:32:05,679
but pen tester some quick wins for you

706
00:32:03,160 --> 00:32:08,350
so you can go to your favorite web page

707
00:32:05,679 --> 00:32:11,050
try to register yourself with this kind

708
00:32:08,350 --> 00:32:13,510
of email if you're successful you can go

709
00:32:11,050 --> 00:32:16,510
to my profile section or some similar

710
00:32:13,510 --> 00:32:18,610
thing in the application and yeah there

711
00:32:16,510 --> 00:32:22,420
is a huge chance that you will spot a

712
00:32:18,610 --> 00:32:27,459
persistent course a scripting second

713
00:32:22,420 --> 00:32:30,880
thing if you have a application which

714
00:32:27,460 --> 00:32:33,280
has email sending capabilities you can

715
00:32:30,880 --> 00:32:35,080
just subscribe to all the new status

716
00:32:33,280 --> 00:32:37,389
notifications promotions gift cards

717
00:32:35,080 --> 00:32:42,309
whatever and look for vulnerabilities

718
00:32:37,390 --> 00:32:44,020
there and the first thing which I

719
00:32:42,309 --> 00:32:47,290
already mention is just by simply

720
00:32:44,020 --> 00:32:50,860
modifying the value of hospitals you can

721
00:32:47,290 --> 00:32:53,700
prove the email messages or the text

722
00:32:50,860 --> 00:32:57,879
messages what is still valid

723
00:32:53,700 --> 00:32:59,679
finding valid vulnerability know how to

724
00:32:57,880 --> 00:33:03,880
avoid these issues and that's probably

725
00:32:59,679 --> 00:33:05,880
something which is it's very easy to

726
00:33:03,880 --> 00:33:09,940
talk about that but it's much harder to

727
00:33:05,880 --> 00:33:12,550
execute that in let's say real life so

728
00:33:09,940 --> 00:33:14,380
some advice which I can give so during

729
00:33:12,550 --> 00:33:16,690
the testing process you should analyze

730
00:33:14,380 --> 00:33:19,559
all the application interfaces so you

731
00:33:16,690 --> 00:33:21,580
should probably know what are the other

732
00:33:19,559 --> 00:33:22,410
application components which may affect

733
00:33:21,580 --> 00:33:26,970
the

734
00:33:22,410 --> 00:33:29,780
original application and try to perform

735
00:33:26,970 --> 00:33:31,920
some kind of security analysis of them

736
00:33:29,780 --> 00:33:34,440
make sure the integration test cover

737
00:33:31,920 --> 00:33:36,960
security aspects it's again it's quite

738
00:33:34,440 --> 00:33:40,260
easy to tell may be harder to achieve

739
00:33:36,960 --> 00:33:42,630
but what you can do for sure is use

740
00:33:40,260 --> 00:33:44,879
deference in-depth approach so if you

741
00:33:42,630 --> 00:33:47,310
can use both input filtering and output

742
00:33:44,880 --> 00:33:52,560
encoding do that maybe you can reduce

743
00:33:47,310 --> 00:33:54,510
the DD DD attack surface and obviously

744
00:33:52,560 --> 00:33:57,030
make sure that the test environment is

745
00:33:54,510 --> 00:33:58,920
as similar to plot as possible so

746
00:33:57,030 --> 00:34:01,800
basically if on protein environment you

747
00:33:58,920 --> 00:34:05,310
have with a no sending email so just you

748
00:34:01,800 --> 00:34:08,668
have some load balance or application

749
00:34:05,310 --> 00:34:11,100
firewall before that probably it would

750
00:34:08,668 --> 00:34:15,679
be good idea to have the same

751
00:34:11,100 --> 00:34:19,319
configuration in the test environment

752
00:34:15,679 --> 00:34:20,760
some advanced things to consider so

753
00:34:19,320 --> 00:34:23,460
first of all make sure that your

754
00:34:20,760 --> 00:34:25,260
security team understands the business

755
00:34:23,460 --> 00:34:26,550
process and understands what sets of

756
00:34:25,260 --> 00:34:30,870
data actually process about the

757
00:34:26,550 --> 00:34:32,820
application make sure that your security

758
00:34:30,870 --> 00:34:36,029
team is aware of all the interfaces and

759
00:34:32,820 --> 00:34:39,419
all the and has a good knowledge about

760
00:34:36,030 --> 00:34:41,250
the entire and tested ecosystem what

761
00:34:39,418 --> 00:34:43,560
else Google dorking so that's a nice

762
00:34:41,250 --> 00:34:46,500
activity which probably you can perform

763
00:34:43,560 --> 00:34:50,159
so just the very basic thing is just

764
00:34:46,500 --> 00:34:52,940
type the domain where the application is

765
00:34:50,159 --> 00:34:55,440
located go to the last page of Google

766
00:34:52,940 --> 00:34:58,230
search and you will probably spots I'm

767
00:34:55,440 --> 00:35:00,090
web pages like which are not used

768
00:34:58,230 --> 00:35:03,000
anymore of some web pages with some

769
00:35:00,090 --> 00:35:05,700
stage parameters first thing is probably

770
00:35:03,000 --> 00:35:07,740
the hardest one so if there are some

771
00:35:05,700 --> 00:35:10,049
closed system data dependencies you can

772
00:35:07,740 --> 00:35:11,640
analyze that but to be honest it will

773
00:35:10,050 --> 00:35:13,230
take a lot of effort and this effort

774
00:35:11,640 --> 00:35:15,089
will be not just on the security team

775
00:35:13,230 --> 00:35:20,670
but also on the business team who

776
00:35:15,090 --> 00:35:23,730
actually manages the application

777
00:35:20,670 --> 00:35:27,660
MorphOS on that I published some let's

778
00:35:23,730 --> 00:35:30,630
say some data some statistics of the

779
00:35:27,660 --> 00:35:33,149
entire research that I took if you want

780
00:35:30,630 --> 00:35:34,050
to find more about that you can go to

781
00:35:33,150 --> 00:35:35,530
medium.com

782
00:35:34,050 --> 00:35:37,510
just type this in

783
00:35:35,530 --> 00:35:40,090
application vulnerabilities and you will

784
00:35:37,510 --> 00:35:43,230
find the article with more detailed

785
00:35:40,090 --> 00:35:46,330
information on the numbers how much

786
00:35:43,230 --> 00:35:49,270
vulnerabilities of if each was in each

787
00:35:46,330 --> 00:35:53,680
category I was able to identify using

788
00:35:49,270 --> 00:35:56,259
this kind of methodology so yeah that's

789
00:35:53,680 --> 00:35:57,490
it from my side thank you very much if

790
00:35:56,260 --> 00:36:14,110
there are any questions I will be happy

791
00:35:57,490 --> 00:36:18,750
to answer yes please sorry I can't hear

792
00:36:14,110 --> 00:36:18,750
anything because of this machine

793
00:36:33,440 --> 00:36:38,390
could you mention the bounties that you

794
00:36:35,239 --> 00:36:41,809
got awarded for the bounties in 3rd and

795
00:36:38,390 --> 00:36:43,999
2nd case again you didn't mention the

796
00:36:41,809 --> 00:36:48,950
bounties in your first two examples

797
00:36:43,999 --> 00:36:52,098
could you mention them yet the pay um

798
00:36:48,950 --> 00:36:55,038
okay so the payouts for this usually for

799
00:36:52,099 --> 00:36:56,809
insecurity really defense it depends

800
00:36:55,039 --> 00:36:58,489
from one let's say web page to another

801
00:36:56,809 --> 00:37:05,079
but in that case it was around one

802
00:36:58,489 --> 00:37:05,079
thousand US dollars okay thank you

803
00:37:06,819 --> 00:37:17,829
any other questions

804
00:37:10,269 --> 00:37:17,828
go ahead do you have a mic

805
00:37:25,330 --> 00:37:31,960
very nice presentation thank you I have

806
00:37:27,970 --> 00:37:33,669
one question so what is your plan for

807
00:37:31,960 --> 00:37:36,550
the next bug bounties will you do the

808
00:37:33,670 --> 00:37:40,180
same thing so do you plan to expand your

809
00:37:36,550 --> 00:37:43,180
testing methodology I think I will stick

810
00:37:40,180 --> 00:37:45,549
to that approach because I believe that

811
00:37:43,180 --> 00:37:47,109
using that approach in text extending

812
00:37:45,550 --> 00:37:49,300
this methodology let's say to more

813
00:37:47,110 --> 00:37:58,680
advanced vulnerabilities will probably

814
00:37:49,300 --> 00:37:58,680
bring even more results thank you yes

815
00:38:00,210 --> 00:38:06,760
how about the mobile apps have you found

816
00:38:03,130 --> 00:38:09,070
any interrupts occasionally yes the

817
00:38:06,760 --> 00:38:11,380
thing is that I'm not working on mobile

818
00:38:09,070 --> 00:38:13,000
apps a lot but I believe that pretty

819
00:38:11,380 --> 00:38:14,680
much the same concepts might be used

820
00:38:13,000 --> 00:38:16,690
here so for example if you can initiate

821
00:38:14,680 --> 00:38:19,230
some process using your mobile app and

822
00:38:16,690 --> 00:38:21,940
complete that using your web application

823
00:38:19,230 --> 00:38:23,830
it's probably the very same case so

824
00:38:21,940 --> 00:38:25,960
maybe input filtering is not there on

825
00:38:23,830 --> 00:38:28,600
the mobile and maybe output according is

826
00:38:25,960 --> 00:38:31,840
not a new app so I believe that the

827
00:38:28,600 --> 00:38:38,400
concept is still the same but the day

828
00:38:31,840 --> 00:38:45,690
today let's say the vector is difference

829
00:38:38,400 --> 00:38:45,690
thank you okay thank you very much

830
00:38:46,010 --> 00:38:48,609
[Applause]

