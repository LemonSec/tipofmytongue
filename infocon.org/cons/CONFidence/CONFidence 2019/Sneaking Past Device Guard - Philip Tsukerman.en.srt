1
00:00:06,280 --> 00:00:12,160
right thank you this is good that's a

2
00:00:09,940 --> 00:00:14,230
good start anyway hi my name is Philip I

3
00:00:12,160 --> 00:00:15,639
work for cyber reason and I did not

4
00:00:14,230 --> 00:00:18,700
think of a third thing to say about

5
00:00:15,639 --> 00:00:22,270
myself this talk is going to be about

6
00:00:18,700 --> 00:00:25,060
device guard will understand what device

7
00:00:22,270 --> 00:00:27,550
guard is as a feature in Windows I'll

8
00:00:25,060 --> 00:00:29,439
show a couple of VBA based bypasses a

9
00:00:27,550 --> 00:00:32,080
couple of non VBA based techniques that

10
00:00:29,439 --> 00:00:33,730
also bypass device guard and actually

11
00:00:32,080 --> 00:00:35,650
most of these are not counted as

12
00:00:33,730 --> 00:00:38,230
vulnerabilities and they don't have CVS

13
00:00:35,650 --> 00:00:40,360
but if you'll try to tell your boss like

14
00:00:38,230 --> 00:00:42,640
oh the breach happened but they didn't

15
00:00:40,360 --> 00:00:45,760
use TVs you will probably get fired so

16
00:00:42,640 --> 00:00:49,540
it doesn't really matter as long as your

17
00:00:45,760 --> 00:00:51,579
machine is vulnerable anyway let's begin

18
00:00:49,540 --> 00:00:54,339
with a quick introduction to what device

19
00:00:51,579 --> 00:00:56,170
guard is device guard is an application

20
00:00:54,340 --> 00:00:58,239
whitelisting feature in Windows 10 it's

21
00:00:56,170 --> 00:01:01,289
actually the successor to another

22
00:00:58,239 --> 00:01:03,968
feature called app Locker now

23
00:01:01,289 --> 00:01:06,789
application whitelisting what it tries

24
00:01:03,969 --> 00:01:09,460
to achieve is to only allow code that's

25
00:01:06,789 --> 00:01:12,010
defined by a specific policy in this

26
00:01:09,460 --> 00:01:14,619
case it's by a certificate by a

27
00:01:12,010 --> 00:01:18,040
signature or maybe by a hash or even by

28
00:01:14,619 --> 00:01:21,070
a path and only this kind of allowed

29
00:01:18,040 --> 00:01:23,110
code that's explicitly mentioned in a

30
00:01:21,070 --> 00:01:26,500
policy could be able to run on a machine

31
00:01:23,110 --> 00:01:28,450
and this type of feature inhibits and

32
00:01:26,500 --> 00:01:30,220
attackers ability to run arbitrary code

33
00:01:28,450 --> 00:01:33,970
on a compromised machine meaning that

34
00:01:30,220 --> 00:01:35,679
even if you are compromised you still

35
00:01:33,970 --> 00:01:41,079
can't do anything you want on the

36
00:01:35,680 --> 00:01:43,090
machine now this is these type of these

37
00:01:41,079 --> 00:01:44,829
types of features have a pretty cool

38
00:01:43,090 --> 00:01:47,890
threat model because you basically can

39
00:01:44,829 --> 00:01:50,589
use anything you can find in the

40
00:01:47,890 --> 00:01:52,329
operating system and there's lots of

41
00:01:50,590 --> 00:01:54,070
logical vulnerabilities which is good

42
00:01:52,329 --> 00:01:57,789
for me because I'm really bad at memory

43
00:01:54,070 --> 00:01:59,740
corruption now to understand how these

44
00:01:57,790 --> 00:02:05,340
features protect against arbitrary code

45
00:01:59,740 --> 00:02:07,630
execution let's give a bit of more

46
00:02:05,340 --> 00:02:09,970
specific definition of what I mean by

47
00:02:07,630 --> 00:02:12,220
arbitrary code execution and what I mean

48
00:02:09,970 --> 00:02:14,470
is the ability to interact with the u.s.

49
00:02:12,220 --> 00:02:17,050
freely under the constraints of

50
00:02:14,470 --> 00:02:19,870
privilege meaning that I'll be able to

51
00:02:17,050 --> 00:02:22,540
ask the u.s. to let me do pretty much

52
00:02:19,870 --> 00:02:24,760
anything and I may get the answer that

53
00:02:22,540 --> 00:02:27,370
new access denied but I still should be

54
00:02:24,760 --> 00:02:29,170
able to ask and the most direct way to

55
00:02:27,370 --> 00:02:31,049
achieve this is by having the full

56
00:02:29,170 --> 00:02:34,149
control of the memory of a process

57
00:02:31,049 --> 00:02:36,879
basically I could be able to allocate

58
00:02:34,150 --> 00:02:38,829
code and then jump to it or to use

59
00:02:36,879 --> 00:02:40,720
arbitrary syscalls which is pretty much

60
00:02:38,829 --> 00:02:42,909
equivalent because if I can use

61
00:02:40,720 --> 00:02:47,560
arbitrary sis calls I could always just

62
00:02:42,909 --> 00:02:50,470
well allocate my code and vice versa now

63
00:02:47,560 --> 00:02:54,190
when we are looking at a system without

64
00:02:50,470 --> 00:02:55,299
application whitelisting this whole

65
00:02:54,190 --> 00:02:58,510
distinction doesn't really matter

66
00:02:55,299 --> 00:03:01,030
because well if I have an or C that's a

67
00:02:58,510 --> 00:03:03,578
remote command execution it's basically

68
00:03:01,030 --> 00:03:05,349
a remote code execution why because well

69
00:03:03,579 --> 00:03:07,629
I can just run a command with my own

70
00:03:05,349 --> 00:03:11,140
code and then my own code runs and I can

71
00:03:07,629 --> 00:03:13,298
do pretty much whatever but this

72
00:03:11,140 --> 00:03:15,059
equation actually breaks the moment you

73
00:03:13,299 --> 00:03:19,180
implement application whitelisting

74
00:03:15,060 --> 00:03:22,299
because suddenly even if you can choose

75
00:03:19,180 --> 00:03:24,280
which code runs you only have a small

76
00:03:22,299 --> 00:03:27,130
subset of what's allowed by your

77
00:03:24,280 --> 00:03:29,380
application whitelisting policy so if

78
00:03:27,130 --> 00:03:31,900
for example you want to implement

79
00:03:29,380 --> 00:03:34,930
credential stealing or command and

80
00:03:31,900 --> 00:03:36,609
control or something like that you're on

81
00:03:34,930 --> 00:03:38,980
you have a really serious problem

82
00:03:36,609 --> 00:03:41,709
because you have an exploit that in your

83
00:03:38,980 --> 00:03:44,918
lab is able to launch calculator and

84
00:03:41,709 --> 00:03:46,629
then you find out that when you get to

85
00:03:44,919 --> 00:03:49,389
your target machine you're only allowed

86
00:03:46,629 --> 00:03:51,298
to launch calculator which is probably

87
00:03:49,389 --> 00:03:54,280
not what you want to do as an attacker

88
00:03:51,299 --> 00:03:56,169
so application whitelisting tries to

89
00:03:54,280 --> 00:03:58,769
break this equation of remote command

90
00:03:56,169 --> 00:04:02,709
execution or command execution equates

91
00:03:58,769 --> 00:04:07,060
code execution and even if you are

92
00:04:02,709 --> 00:04:09,819
somehow able add a specific instance to

93
00:04:07,060 --> 00:04:12,370
bypass application whitelisting it's

94
00:04:09,819 --> 00:04:15,040
pretty easy to use your new found

95
00:04:12,370 --> 00:04:18,728
arbitrary code execution abilities so

96
00:04:15,040 --> 00:04:21,909
let's say you found you're executing in

97
00:04:18,728 --> 00:04:23,800
a sandboxed process many sandbox escapes

98
00:04:21,910 --> 00:04:27,430
give you command execution and you're

99
00:04:23,800 --> 00:04:30,010
downgraded to calc same thing happens

100
00:04:27,430 --> 00:04:31,930
with privilege escalation most lateral

101
00:04:30,010 --> 00:04:33,248
movement techniques and when you try to

102
00:04:31,930 --> 00:04:35,499
do persistence it's

103
00:04:33,249 --> 00:04:38,219
almost always you are allowed to run a

104
00:04:35,499 --> 00:04:43,599
command and not you are allowed to run

105
00:04:38,219 --> 00:04:46,149
orbitary assembly or whatever now the

106
00:04:43,599 --> 00:04:49,089
way device guard in practice implements

107
00:04:46,149 --> 00:04:52,029
this is by defending a couple of

108
00:04:49,089 --> 00:04:56,829
different ways to run code the most

109
00:04:52,029 --> 00:04:59,049
direct way is PE files and this is

110
00:04:56,829 --> 00:05:02,529
pretty simple at the moment you have a

111
00:04:59,049 --> 00:05:04,899
device guard policy in place you can't

112
00:05:02,529 --> 00:05:06,939
run a be file that isn't compliant with

113
00:05:04,899 --> 00:05:08,649
the policy meaning that if you just

114
00:05:06,939 --> 00:05:13,119
download some kind of unsigned

115
00:05:08,649 --> 00:05:15,999
executable it simply won't run the other

116
00:05:13,119 --> 00:05:18,849
types of the device dart implementations

117
00:05:15,999 --> 00:05:20,709
are a tiny bit more subtle for example

118
00:05:18,849 --> 00:05:23,860
if you try to use PowerShell which is

119
00:05:20,709 --> 00:05:26,199
today like the red teamers attackers

120
00:05:23,860 --> 00:05:28,769
whatever favorite toolkit and you don't

121
00:05:26,199 --> 00:05:31,599
have assigned explicitly allowed script

122
00:05:28,769 --> 00:05:33,789
PowerShell will actually run in what's

123
00:05:31,599 --> 00:05:36,549
called constrained language modes which

124
00:05:33,789 --> 00:05:38,919
strips power which strips powershell of

125
00:05:36,549 --> 00:05:40,869
most of its power you you basically

126
00:05:38,919 --> 00:05:44,409
can't use most of your favorite types

127
00:05:40,869 --> 00:05:46,929
and objects and comm objects etc and

128
00:05:44,409 --> 00:05:50,558
while you can do some offensive

129
00:05:46,929 --> 00:05:52,299
functionality using WMI constraint

130
00:05:50,559 --> 00:05:55,959
language move basically neuters

131
00:05:52,299 --> 00:05:58,388
powershell which is pretty unfortunate

132
00:05:55,959 --> 00:06:01,289
for attackers and a very similar thing

133
00:05:58,389 --> 00:06:04,869
happens with Windows scripting engines

134
00:06:01,289 --> 00:06:08,318
JavaScript and VB script etc and these

135
00:06:04,869 --> 00:06:10,629
mostly communicate or only communicate

136
00:06:08,319 --> 00:06:13,389
with the operating system using comm

137
00:06:10,629 --> 00:06:16,569
objects and what happens when you run a

138
00:06:13,389 --> 00:06:18,069
non whitelisted script is that most

139
00:06:16,569 --> 00:06:21,239
common objects are filtered so you're

140
00:06:18,069 --> 00:06:23,709
able to use things like Greg X and

141
00:06:21,239 --> 00:06:26,498
dictionaries but you can't really do

142
00:06:23,709 --> 00:06:29,979
shell commands at etc and again you have

143
00:06:26,499 --> 00:06:32,279
this very powerful attacker tool that is

144
00:06:29,979 --> 00:06:36,969
neutered unless you're somehow able to

145
00:06:32,279 --> 00:06:39,549
bypass device guard now if you just try

146
00:06:36,969 --> 00:06:44,420
to double click an unsigned or

147
00:06:39,549 --> 00:06:46,700
unallowable you're gonna have this nice

148
00:06:44,420 --> 00:06:48,560
blue pop-up that says Windows Defender

149
00:06:46,700 --> 00:06:50,539
application control which is another

150
00:06:48,560 --> 00:06:52,880
name for device guard was used to block

151
00:06:50,540 --> 00:06:59,480
this app which doesn't help you in any

152
00:06:52,880 --> 00:07:01,700
way now some of the bypasses I'm going

153
00:06:59,480 --> 00:07:04,730
to show will actually require you to be

154
00:07:01,700 --> 00:07:07,039
an admin and an admin can just disable

155
00:07:04,730 --> 00:07:08,390
device guard and that's it but what

156
00:07:07,040 --> 00:07:11,900
happens when you disable device guard

157
00:07:08,390 --> 00:07:13,880
first of all this will comment place

158
00:07:11,900 --> 00:07:17,030
only after you reboot the machine and

159
00:07:13,880 --> 00:07:18,890
you will have an event written to the

160
00:07:17,030 --> 00:07:21,679
event log so if you're a defender and

161
00:07:18,890 --> 00:07:23,900
you're implementing device guard in your

162
00:07:21,680 --> 00:07:26,020
network the first thing you need to

163
00:07:23,900 --> 00:07:29,239
monitor is these kinds of events and

164
00:07:26,020 --> 00:07:33,169
this means that as an attacker if I do

165
00:07:29,240 --> 00:07:36,170
this styrenes should go should go off in

166
00:07:33,170 --> 00:07:38,720
the sock of whatever organization you're

167
00:07:36,170 --> 00:07:41,380
you're attacking which is not exactly

168
00:07:38,720 --> 00:07:44,000
good this is why the moment you have

169
00:07:41,380 --> 00:07:47,150
multiple bypasses for device guard even

170
00:07:44,000 --> 00:07:50,540
if they require admin you basically gain

171
00:07:47,150 --> 00:07:52,849
the power of stealth which is extremely

172
00:07:50,540 --> 00:07:55,400
important if you don't just want to

173
00:07:52,850 --> 00:07:57,620
paint it or something but if you

174
00:07:55,400 --> 00:08:00,349
actually want to gain something from the

175
00:07:57,620 --> 00:08:02,680
machine you're attacking unless you can

176
00:08:00,350 --> 00:08:05,060
do everything in like five seconds and

177
00:08:02,680 --> 00:08:09,080
also that's the most common scenario for

178
00:08:05,060 --> 00:08:10,610
lateral movement so basically if you

179
00:08:09,080 --> 00:08:14,180
break the Vice guard on one machine you

180
00:08:10,610 --> 00:08:16,400
can just move laterally and using

181
00:08:14,180 --> 00:08:19,640
various admin bypasses and never

182
00:08:16,400 --> 00:08:22,460
encountered device guard again anyway

183
00:08:19,640 --> 00:08:24,560
let's dive into some actual bypasses and

184
00:08:22,460 --> 00:08:29,060
the first one the first couple of points

185
00:08:24,560 --> 00:08:32,510
are going to use VBA now VBA or Visual

186
00:08:29,060 --> 00:08:35,080
Basic for applications is what powers my

187
00:08:32,510 --> 00:08:40,729
most favorite piece of software which is

188
00:08:35,080 --> 00:08:42,650
office macros and while it is made by

189
00:08:40,729 --> 00:08:45,200
Microsoft and it's probably the most

190
00:08:42,650 --> 00:08:46,699
ubiquitous piece of software that's

191
00:08:45,200 --> 00:08:49,100
distributed by Microsoft

192
00:08:46,700 --> 00:08:51,290
apart from Windows itself it's still

193
00:08:49,100 --> 00:08:57,290
uninstrumented by device guard meaning

194
00:08:51,290 --> 00:09:00,209
that macros allow you to

195
00:08:57,290 --> 00:09:02,430
macros allow you to basically reach

196
00:09:00,209 --> 00:09:04,500
arbitrary full arbitrary code execution

197
00:09:02,430 --> 00:09:07,620
in a couple of ways first of all you

198
00:09:04,500 --> 00:09:09,470
could just import win API functions and

199
00:09:07,620 --> 00:09:12,450
run whatever shell code you want and

200
00:09:09,470 --> 00:09:14,160
macros also have calm functionality

201
00:09:12,450 --> 00:09:16,709
meaning that you could abuse calm

202
00:09:14,160 --> 00:09:19,649
objects to execute techniques such as

203
00:09:16,709 --> 00:09:23,689
dotnet J script which will also leave

204
00:09:19,649 --> 00:09:26,160
you to full arbitrary code execution and

205
00:09:23,690 --> 00:09:27,839
this whole thing is not instrumented by

206
00:09:26,160 --> 00:09:29,399
device guard meaning that nothing is

207
00:09:27,839 --> 00:09:31,410
stopping you the moment you run a macro

208
00:09:29,399 --> 00:09:34,410
from doing anything you like on the

209
00:09:31,410 --> 00:09:37,469
machine now of course there's the naive

210
00:09:34,410 --> 00:09:41,430
approach I have an excel file it

211
00:09:37,470 --> 00:09:43,800
contains an macro that I wrote I need to

212
00:09:41,430 --> 00:09:46,170
somehow make the user click on the

213
00:09:43,800 --> 00:09:49,170
enable content button and then my code

214
00:09:46,170 --> 00:09:51,870
executes but that's a really lame bypass

215
00:09:49,170 --> 00:09:53,760
because it requires user interaction and

216
00:09:51,870 --> 00:09:56,940
we're already in a post exploitation

217
00:09:53,760 --> 00:09:59,370
scenario we've said that we have command

218
00:09:56,940 --> 00:10:02,579
execution and we want to upgrade it into

219
00:09:59,370 --> 00:10:04,860
actual code execution so to do something

220
00:10:02,579 --> 00:10:07,109
that's not really lame with macros we

221
00:10:04,860 --> 00:10:09,740
actually need to discover how to run

222
00:10:07,110 --> 00:10:15,000
macros without user or GUI interactions

223
00:10:09,740 --> 00:10:20,250
now this won't be a vulnerability

224
00:10:15,000 --> 00:10:24,240
because you know you're still in a post

225
00:10:20,250 --> 00:10:27,839
exploitation scenario but still so the

226
00:10:24,240 --> 00:10:30,140
first idea I had to do this is using a

227
00:10:27,839 --> 00:10:32,610
lateral movement or decom approach

228
00:10:30,140 --> 00:10:35,550
instead of making somebody click on a

229
00:10:32,610 --> 00:10:39,089
button you could actually use the the

230
00:10:35,550 --> 00:10:41,310
various office call objects pretty much

231
00:10:39,089 --> 00:10:43,740
every office application PowerPoint Word

232
00:10:41,310 --> 00:10:46,890
Excel etc has its own call object-- and

233
00:10:43,740 --> 00:10:49,709
the macro functionality is exposed by

234
00:10:46,890 --> 00:10:53,189
these Co objects-- now even if you have

235
00:10:49,709 --> 00:10:54,750
macros turn off and etc this will not go

236
00:10:53,190 --> 00:11:00,120
through protected mode and you will be

237
00:10:54,750 --> 00:11:02,790
able to run your macros now you can't

238
00:11:00,120 --> 00:11:05,040
really do arbitrary comma objects

239
00:11:02,790 --> 00:11:06,930
locally with device guard because if you

240
00:11:05,040 --> 00:11:08,849
are able to do what you're able to use

241
00:11:06,930 --> 00:11:10,439
stuff like dotnet jscript and basically

242
00:11:08,850 --> 00:11:12,209
bypass the feature altogether

243
00:11:10,440 --> 00:11:14,459
but if you're doing this remotely

244
00:11:12,209 --> 00:11:17,790
there's nothing stopping you if you have

245
00:11:14,459 --> 00:11:20,008
admin credentials so if you're trying to

246
00:11:17,790 --> 00:11:22,769
laterally move to machine with device

247
00:11:20,009 --> 00:11:24,870
guard you could use this to completely

248
00:11:22,769 --> 00:11:29,279
bypass it and it looks pretty much like

249
00:11:24,870 --> 00:11:32,850
this so first of all I define some kind

250
00:11:29,279 --> 00:11:35,879
of macro straying that in this case just

251
00:11:32,850 --> 00:11:40,350
creates a calculator and I use a bit of

252
00:11:35,879 --> 00:11:44,490
WMI magic - to change the registry key

253
00:11:40,350 --> 00:11:46,170
which allows me to inject macros into an

254
00:11:44,490 --> 00:11:48,930
office column object without creating a

255
00:11:46,170 --> 00:11:51,479
file meaning that I don't really need an

256
00:11:48,930 --> 00:11:55,800
actual document on the machine and the

257
00:11:51,480 --> 00:11:57,930
moment I do this I create the let's say

258
00:11:55,800 --> 00:11:59,430
Excel application comma object this

259
00:11:57,930 --> 00:12:02,189
could be PowerPoint this could be Ward

260
00:11:59,430 --> 00:12:04,829
that doesn't really matter and I just

261
00:12:02,189 --> 00:12:06,719
add my macro and execute the macro and

262
00:12:04,829 --> 00:12:09,649
that's it that's all I need to bypass

263
00:12:06,720 --> 00:12:12,720
device guard from a remote machine and

264
00:12:09,649 --> 00:12:17,670
my extremely malicious calculator will

265
00:12:12,720 --> 00:12:20,819
run but this was remote and also it

266
00:12:17,670 --> 00:12:24,029
needed admin which isn't perfect so I

267
00:12:20,819 --> 00:12:26,040
wanted to find out what if I have some

268
00:12:24,029 --> 00:12:28,290
kind of technique that will allow me to

269
00:12:26,040 --> 00:12:32,160
do the same thing but locally and with

270
00:12:28,290 --> 00:12:35,160
an unprivileged user and here we need to

271
00:12:32,160 --> 00:12:37,620
understand when does office say I just

272
00:12:35,160 --> 00:12:41,990
don't need protected mode let's just run

273
00:12:37,620 --> 00:12:45,720
every macro and whatever and there are

274
00:12:41,990 --> 00:12:47,910
two cases in which this happens the

275
00:12:45,720 --> 00:12:51,029
first is trusted documents if you've

276
00:12:47,910 --> 00:12:53,339
ever run a macro on a machine and try to

277
00:12:51,029 --> 00:12:55,500
run to try to open the same document

278
00:12:53,339 --> 00:12:58,050
you'll mostly find out that the macro

279
00:12:55,500 --> 00:12:59,850
runs automatically and it doesn't prompt

280
00:12:58,050 --> 00:13:02,219
you with the button anymore this is

281
00:12:59,850 --> 00:13:04,230
because the document is counted as

282
00:13:02,220 --> 00:13:08,160
trusted and trusted documents we'll just

283
00:13:04,230 --> 00:13:09,809
run macros automatically I need to do

284
00:13:08,160 --> 00:13:12,899
some weird registry games to make this

285
00:13:09,809 --> 00:13:15,709
work so I opted I so I opted in for the

286
00:13:12,899 --> 00:13:17,670
easier version which is the second one

287
00:13:15,709 --> 00:13:19,680
documents running from what's called

288
00:13:17,670 --> 00:13:22,199
trusted locations will not go through a

289
00:13:19,680 --> 00:13:24,180
protected mode meaning that if I have a

290
00:13:22,199 --> 00:13:25,949
document in a trusted location I

291
00:13:24,180 --> 00:13:28,380
need the user to do anything I should

292
00:13:25,950 --> 00:13:32,010
just run my macro and bypass the Vice

293
00:13:28,380 --> 00:13:33,750
card so let's see what trusted locations

294
00:13:32,010 --> 00:13:35,610
are they're actually a bunch of folders

295
00:13:33,750 --> 00:13:38,910
that are managed in the registry for

296
00:13:35,610 --> 00:13:41,670
each and every office application and

297
00:13:38,910 --> 00:13:43,649
the default ones are writable by admins

298
00:13:41,670 --> 00:13:45,149
because you know if you can write if

299
00:13:43,649 --> 00:13:48,630
everybody could write into a trusted

300
00:13:45,149 --> 00:13:53,339
location then it does not really help

301
00:13:48,630 --> 00:13:55,709
security so for example we can here see

302
00:13:53,339 --> 00:14:00,750
the trusted location for Microsoft

303
00:13:55,709 --> 00:14:03,300
Access this ACCC whiz folder and as you

304
00:14:00,750 --> 00:14:06,839
can see we have read and execute for

305
00:14:03,300 --> 00:14:09,420
everybody but everybody but users don't

306
00:14:06,839 --> 00:14:13,380
really have the right permission meaning

307
00:14:09,420 --> 00:14:15,209
that I have to be an admin to write this

308
00:14:13,380 --> 00:14:18,420
directory to be able to run my macro

309
00:14:15,209 --> 00:14:21,779
without a protected mode and on the

310
00:14:18,420 --> 00:14:25,620
registry side it looks like this so we

311
00:14:21,779 --> 00:14:29,250
have basically access security trusted

312
00:14:25,620 --> 00:14:31,350
locations location to key and it

313
00:14:29,250 --> 00:14:34,709
contains a short description of whatever

314
00:14:31,350 --> 00:14:38,160
this folder is and the actual path to

315
00:14:34,709 --> 00:14:40,050
the folder but if you look at this and

316
00:14:38,160 --> 00:14:44,719
especially at the path you'll find the

317
00:14:40,050 --> 00:14:47,699
problem this is found in HK Cu which is

318
00:14:44,720 --> 00:14:50,070
writable by the current user meaning

319
00:14:47,700 --> 00:14:52,650
that it does not really matter that this

320
00:14:50,070 --> 00:14:55,380
trusted location is writable by admins

321
00:14:52,650 --> 00:14:57,829
if the definition of the trusted

322
00:14:55,380 --> 00:15:00,750
location it's writable by everyone so

323
00:14:57,830 --> 00:15:02,640
all I need to do is to write my own

324
00:15:00,750 --> 00:15:05,970
trusted location which I am able to do

325
00:15:02,640 --> 00:15:08,250
because I am the current user so I'm

326
00:15:05,970 --> 00:15:10,200
again using a bit of WMI magic the same

327
00:15:08,250 --> 00:15:15,480
thing just changing a registry key this

328
00:15:10,200 --> 00:15:18,810
time I'm adding a new a new location

329
00:15:15,480 --> 00:15:21,750
called bypass test that that basically

330
00:15:18,810 --> 00:15:24,779
defines C temp as a trusted location and

331
00:15:21,750 --> 00:15:28,350
then all I need to do is just run office

332
00:15:24,779 --> 00:15:32,040
this in this case Microsoft Access with

333
00:15:28,350 --> 00:15:34,800
my malicious access DB and even add the

334
00:15:32,040 --> 00:15:36,900
slash embedding flag that says hey

335
00:15:34,800 --> 00:15:37,449
access just don't open the GUI because a

336
00:15:36,900 --> 00:15:41,319
GUI would

337
00:15:37,449 --> 00:15:42,849
bad and I can run a macro without going

338
00:15:41,319 --> 00:15:45,759
through protected mode without anybody

339
00:15:42,850 --> 00:15:48,819
pressing a button and turning office and

340
00:15:45,759 --> 00:15:51,699
basically uh posting placed post

341
00:15:48,819 --> 00:15:57,579
exploitation tool which is pretty cool I

342
00:15:51,699 --> 00:16:00,849
think anyway office macros look terrible

343
00:15:57,579 --> 00:16:02,649
and the moment you use them and post

344
00:16:00,850 --> 00:16:06,879
exploitation you discover that pretty

345
00:16:02,649 --> 00:16:11,529
much every single defense mechanism is

346
00:16:06,879 --> 00:16:14,319
only meant to work against like phishing

347
00:16:11,529 --> 00:16:15,999
or exploitation so they're pretty easy

348
00:16:14,319 --> 00:16:21,368
to bypass the moment you're actually

349
00:16:15,999 --> 00:16:23,859
sitting on the machine so I think well

350
00:16:21,369 --> 00:16:25,929
we're gonna see a bunch of post

351
00:16:23,859 --> 00:16:29,019
exploitation malware that's based all

352
00:16:25,929 --> 00:16:32,738
inside of office sometime soon but who

353
00:16:29,019 --> 00:16:35,949
knows so what we can do is just block

354
00:16:32,739 --> 00:16:38,739
the vbe seven dot d ll file which is the

355
00:16:35,949 --> 00:16:41,229
library implementing VBA using the Vice

356
00:16:38,739 --> 00:16:43,539
guards so if you can't close the VBA

357
00:16:41,230 --> 00:16:47,319
engine you can't run VBA which is fine

358
00:16:43,539 --> 00:16:51,279
and this means hooray we are now

359
00:16:47,319 --> 00:16:54,939
protected against office macros so let's

360
00:16:51,279 --> 00:16:56,679
see a couple of non VBA attacks so we

361
00:16:54,939 --> 00:17:01,118
got bored of macros now it's time for

362
00:16:56,679 --> 00:17:02,619
more macros VBA is actually not the only

363
00:17:01,119 --> 00:17:05,500
type of macro that's available in office

364
00:17:02,619 --> 00:17:08,260
and there's an older version or older

365
00:17:05,500 --> 00:17:11,939
macro feature in Excel called Excel for

366
00:17:08,260 --> 00:17:14,829
macros which was implemented in 92 and

367
00:17:11,939 --> 00:17:18,490
has no relation whatsoever to VBA

368
00:17:14,829 --> 00:17:22,260
and this functionality is actually

369
00:17:18,490 --> 00:17:25,449
implemented in Excel dot XE itself and

370
00:17:22,260 --> 00:17:28,240
it exposes two very interesting

371
00:17:25,449 --> 00:17:31,000
functions called call and register which

372
00:17:28,240 --> 00:17:32,440
basically allow you to execute arbitrary

373
00:17:31,000 --> 00:17:35,230
functions from dll's

374
00:17:32,440 --> 00:17:37,029
and the only drawback is that it's

375
00:17:35,230 --> 00:17:40,840
disgusting because it's a macro feature

376
00:17:37,029 --> 00:17:42,880
that was designed in 92 so at first i

377
00:17:40,840 --> 00:17:44,769
was not able to run actual shellcode i

378
00:17:42,880 --> 00:17:46,990
was able to run a bunch of scripts and

379
00:17:44,769 --> 00:17:50,600
command lines which was not enough to

380
00:17:46,990 --> 00:17:53,080
actually bypass device guard but

381
00:17:50,600 --> 00:17:56,750
Stein and Peter of Al Clank actually

382
00:17:53,080 --> 00:17:58,970
released way to run x86 shellcode using

383
00:17:56,750 --> 00:18:01,670
Excel for macros which is exactly what I

384
00:17:58,970 --> 00:18:03,590
want if I can run shell code I can

385
00:18:01,670 --> 00:18:06,130
bypass application whitelisting so

386
00:18:03,590 --> 00:18:08,959
amazing let's have a quick walkthrough

387
00:18:06,130 --> 00:18:11,210
through how this works so first of all

388
00:18:08,960 --> 00:18:14,540
here we're using the register functions

389
00:18:11,210 --> 00:18:17,930
which basically take DLL name a function

390
00:18:14,540 --> 00:18:21,710
name this weird JJ JJ JJ thing which is

391
00:18:17,930 --> 00:18:23,150
actually a function signature and then

392
00:18:21,710 --> 00:18:27,770
you can actually use these functions

393
00:18:23,150 --> 00:18:30,230
from a macro so I register the shellcode

394
00:18:27,770 --> 00:18:33,920
usual suspect functions like virtual a

395
00:18:30,230 --> 00:18:36,170
lock right process memory and create

396
00:18:33,920 --> 00:18:39,320
thread and then I could just use them

397
00:18:36,170 --> 00:18:42,470
with in with shellcode that's embedded

398
00:18:39,320 --> 00:18:46,669
inside of the excel sheet this weird

399
00:18:42,470 --> 00:18:48,620
value thing is because you can enter the

400
00:18:46,670 --> 00:18:51,350
large byte array in a single cell in

401
00:18:48,620 --> 00:18:53,659
Excel but it won't be able to show you

402
00:18:51,350 --> 00:18:55,550
that so I have all of my shellcode and

403
00:18:53,660 --> 00:18:57,680
Excel just can't show it in the GUI

404
00:18:55,550 --> 00:19:00,740
which is pretty weird but anyway the

405
00:18:57,680 --> 00:19:07,310
moment you run it let's say through

406
00:19:00,740 --> 00:19:11,720
again decom you're able to run your

407
00:19:07,310 --> 00:19:13,639
shellcode using no VBA and what I'm

408
00:19:11,720 --> 00:19:15,740
showing here is actually just opening a

409
00:19:13,640 --> 00:19:20,180
file and running Auto macros body calm

410
00:19:15,740 --> 00:19:22,000
but Stan from outflank actually has a

411
00:19:20,180 --> 00:19:24,860
pretty cool script that does this

412
00:19:22,000 --> 00:19:29,930
interactively by dick without going

413
00:19:24,860 --> 00:19:33,429
through a file and one of the main

414
00:19:29,930 --> 00:19:37,820
problems with Excel for macros was that

415
00:19:33,430 --> 00:19:41,770
the x64 version was a bit broken

416
00:19:37,820 --> 00:19:45,080
meaning that you couldn't really run X

417
00:19:41,770 --> 00:19:47,030
like 64 bit shellcode due to some weird

418
00:19:45,080 --> 00:19:49,010
data type and calling convention

419
00:19:47,030 --> 00:19:50,899
constraints and you would basically have

420
00:19:49,010 --> 00:19:55,400
your stack corrupted and lots of weird

421
00:19:50,900 --> 00:19:58,690
stuff but I recently actually found out

422
00:19:55,400 --> 00:20:00,920
how to run EXO how to run 64-bit

423
00:19:58,690 --> 00:20:04,280
shellcode through Excel for macros on

424
00:20:00,920 --> 00:20:06,410
64-bit excel and have

425
00:20:04,280 --> 00:20:08,270
short article about it if that's what

426
00:20:06,410 --> 00:20:12,250
interests you anyway

427
00:20:08,270 --> 00:20:16,010
now I have invoke invoke a shellcode

428
00:20:12,250 --> 00:20:20,240
which allows you to run shellcode by

429
00:20:16,010 --> 00:20:24,200
Excel remotely either on 32-bit or

430
00:20:20,240 --> 00:20:27,110
64-bit versions of office and if you

431
00:20:24,200 --> 00:20:28,760
were wondering this dish this dish

432
00:20:27,110 --> 00:20:30,590
trusted folder thing work

433
00:20:28,760 --> 00:20:33,680
it works just exactly the same you don't

434
00:20:30,590 --> 00:20:35,629
even need another another example

435
00:20:33,680 --> 00:20:38,900
because you could just steal the old

436
00:20:35,630 --> 00:20:43,970
example and then just use it with an

437
00:20:38,900 --> 00:20:48,320
excel file and that's it anyway so

438
00:20:43,970 --> 00:20:51,920
there's a benefit to excel for macros in

439
00:20:48,320 --> 00:20:54,740
relation to VBA because Excel for macros

440
00:20:51,920 --> 00:20:57,290
as I've said are implemented inside of

441
00:20:54,740 --> 00:20:59,420
excel dot XE itself meaning that you

442
00:20:57,290 --> 00:21:01,370
don't have some kind of outside library

443
00:20:59,420 --> 00:21:04,250
that you can just block and say oh now

444
00:21:01,370 --> 00:21:06,020
Excel works and macros do not work if

445
00:21:04,250 --> 00:21:10,130
you have Excel on your machine and

446
00:21:06,020 --> 00:21:12,320
Microsoft don't decide to simply disable

447
00:21:10,130 --> 00:21:14,420
Excel for macros for everybody which i

448
00:21:12,320 --> 00:21:17,330
think is a good idea unless one of you

449
00:21:14,420 --> 00:21:23,210
uses Excel for macros for benign

450
00:21:17,330 --> 00:21:27,260
purposes please raise your hand awesome

451
00:21:23,210 --> 00:21:28,730
so no external library to block meaning

452
00:21:27,260 --> 00:21:30,530
that as long as you have Excel you

453
00:21:28,730 --> 00:21:35,300
basically have device guard for every

454
00:21:30,530 --> 00:21:40,550
day which is pretty nice anyway let's go

455
00:21:35,300 --> 00:21:43,129
on to active script bypasses now active

456
00:21:40,550 --> 00:21:46,370
script is a generic Windows scripting

457
00:21:43,130 --> 00:21:49,270
technology it basically is a way that

458
00:21:46,370 --> 00:21:51,889
windows wanted to allow people to build

459
00:21:49,270 --> 00:21:55,010
different applications that could be

460
00:21:51,890 --> 00:21:56,840
scripted very simply using all of the

461
00:21:55,010 --> 00:21:58,790
available Windows scripting engines and

462
00:21:56,840 --> 00:22:01,449
to build their own scripting engine

463
00:21:58,790 --> 00:22:04,100
which could you could be used to script

464
00:22:01,450 --> 00:22:06,800
whatever applications comply with the

465
00:22:04,100 --> 00:22:08,570
active script standard so this is

466
00:22:06,800 --> 00:22:09,590
actually the technology behind vbscript

467
00:22:08,570 --> 00:22:12,919
and jscript

468
00:22:09,590 --> 00:22:15,679
and it's also the target of many recent

469
00:22:12,920 --> 00:22:18,940
bypasses such as squiggly-doo squiggly 2

470
00:22:15,680 --> 00:22:22,130
and squiggly some other thing

471
00:22:18,940 --> 00:22:24,530
so there's a couple of different ways to

472
00:22:22,130 --> 00:22:27,500
use active script for bypasses but first

473
00:22:24,530 --> 00:22:29,990
let's see what active script is supposed

474
00:22:27,500 --> 00:22:32,570
off so we actually have two main

475
00:22:29,990 --> 00:22:34,550
components the first is a scripting host

476
00:22:32,570 --> 00:22:38,419
it's an application compliant with a

477
00:22:34,550 --> 00:22:39,980
standard which you can use to which you

478
00:22:38,420 --> 00:22:43,750
can use any of the engines to script

479
00:22:39,980 --> 00:22:47,240
meaning that if I have Internet Explorer

480
00:22:43,750 --> 00:22:49,240
it actually implements an active script

481
00:22:47,240 --> 00:22:51,710
host and this is why you can use both

482
00:22:49,240 --> 00:22:54,830
JavaScript and VB script inside of a

483
00:22:51,710 --> 00:22:57,910
Internet Explorer and the other main

484
00:22:54,830 --> 00:23:01,159
component is the actual scripting engine

485
00:22:57,910 --> 00:23:04,100
which implements its own scripting

486
00:23:01,160 --> 00:23:07,430
language and also all of the interfaces

487
00:23:04,100 --> 00:23:09,740
for active script meaning that I have BB

488
00:23:07,430 --> 00:23:12,080
script it can use it against any single

489
00:23:09,740 --> 00:23:14,560
active script host this is why it works

490
00:23:12,080 --> 00:23:18,639
against C script and also works against

491
00:23:14,560 --> 00:23:21,560
Internet Explorer MSHDA etc etc and

492
00:23:18,640 --> 00:23:24,320
there's actually a bunch of different

493
00:23:21,560 --> 00:23:26,300
hosts and engines and windows this is

494
00:23:24,320 --> 00:23:29,750
not a complete list so you have stuff

495
00:23:26,300 --> 00:23:32,840
like W and C script you have things like

496
00:23:29,750 --> 00:23:37,850
SCR Abdi ll which is a scripting host

497
00:23:32,840 --> 00:23:41,659
for for calm scriptlets you have MX XML

498
00:23:37,850 --> 00:23:44,060
3 & 6 which implement the MS Microsoft

499
00:23:41,660 --> 00:23:46,940
XML engine and you also have MS HTML

500
00:23:44,060 --> 00:23:48,470
which is the HTML engine behind Internet

501
00:23:46,940 --> 00:23:50,720
Explorer and a bunch of other stuff and

502
00:23:48,470 --> 00:23:52,760
in terms of engines the most common ones

503
00:23:50,720 --> 00:23:55,400
are jscript audio which is JavaScript

504
00:23:52,760 --> 00:23:57,110
you have VB script are GL o and you have

505
00:23:55,400 --> 00:23:58,910
jscript 9 todd yellow which is also

506
00:23:57,110 --> 00:24:03,740
javascript because you can never have

507
00:23:58,910 --> 00:24:06,260
enough JavaScript anyway let's see how

508
00:24:03,740 --> 00:24:09,110
device guard actually works and how its

509
00:24:06,260 --> 00:24:13,430
implemented its side of active script so

510
00:24:09,110 --> 00:24:15,860
a bi as of 74 device called in active

511
00:24:13,430 --> 00:24:18,650
scripts tries to filter the comm objects

512
00:24:15,860 --> 00:24:20,929
you can create so let's say I want to

513
00:24:18,650 --> 00:24:24,350
create a new object w script shell and

514
00:24:20,930 --> 00:24:26,270
I'm running in the context of an on sign

515
00:24:24,350 --> 00:24:28,040
script meaning that job meaning that

516
00:24:26,270 --> 00:24:30,440
device guard will try to stop me from

517
00:24:28,040 --> 00:24:31,680
creating really evil stuff one of those

518
00:24:30,440 --> 00:24:35,250
evil things

519
00:24:31,680 --> 00:24:36,840
is w script gel which is absolutely

520
00:24:35,250 --> 00:24:39,870
terrible and we should not be allowed to

521
00:24:36,840 --> 00:24:43,909
run it so I try to create a new

522
00:24:39,870 --> 00:24:47,129
activexobject and the text of my script

523
00:24:43,910 --> 00:24:49,650
now this w script shell goes into class

524
00:24:47,130 --> 00:24:51,720
ID from frog ID which is a Windows API

525
00:24:49,650 --> 00:24:54,570
call that translate this friendly name

526
00:24:51,720 --> 00:24:58,760
into the class ID gooood of the same

527
00:24:54,570 --> 00:25:02,639
coma object and this object is then

528
00:24:58,760 --> 00:25:04,500
passed on from the engine to the

529
00:25:02,640 --> 00:25:08,070
scripting host to a function called

530
00:25:04,500 --> 00:25:13,050
is class allowed and under the hood this

531
00:25:08,070 --> 00:25:16,040
function calls another function called W

532
00:25:13,050 --> 00:25:19,080
the LDP is class in approved list

533
00:25:16,040 --> 00:25:21,470
implemented WL GP DLL which is the user

534
00:25:19,080 --> 00:25:24,060
mode implementation of device guard and

535
00:25:21,470 --> 00:25:26,280
this function basically just checks my

536
00:25:24,060 --> 00:25:29,610
class ID Gyu it against the hard-coded

537
00:25:26,280 --> 00:25:32,550
list of what's allowed to run in non

538
00:25:29,610 --> 00:25:35,159
sign script and if it returns loud

539
00:25:32,550 --> 00:25:37,379
everything just goes on as usual and I

540
00:25:35,160 --> 00:25:40,020
create the instance of my object and if

541
00:25:37,380 --> 00:25:43,850
it's not allowed you get an exception

542
00:25:40,020 --> 00:25:49,260
and that's it your script is done now

543
00:25:43,850 --> 00:25:52,530
one way did you bypass this is with what

544
00:25:49,260 --> 00:25:54,390
happens when scripting hosts don't have

545
00:25:52,530 --> 00:25:57,149
this is class allowed function

546
00:25:54,390 --> 00:26:00,150
implemented and what happens is that the

547
00:25:57,150 --> 00:26:03,390
scripting engine des falls into well

548
00:26:00,150 --> 00:26:05,460
just allow the class to to be created so

549
00:26:03,390 --> 00:26:08,640
if I have a class that just doesn't

550
00:26:05,460 --> 00:26:13,440
implement it that's it I've suffered a

551
00:26:08,640 --> 00:26:16,730
device guard and one such class is the

552
00:26:13,440 --> 00:26:21,150
active script consumer which is a WMI

553
00:26:16,730 --> 00:26:22,830
executable that implements the WMI

554
00:26:21,150 --> 00:26:26,190
eventing script consumer it's

555
00:26:22,830 --> 00:26:28,500
implemented in STR console l and it's

556
00:26:26,190 --> 00:26:29,490
basically an independent active script

557
00:26:28,500 --> 00:26:31,620
host by itself

558
00:26:29,490 --> 00:26:34,200
and does not implement device guard

559
00:26:31,620 --> 00:26:37,770
meaning that any engine running under

560
00:26:34,200 --> 00:26:40,350
STR constant or exe will simply run any

561
00:26:37,770 --> 00:26:43,800
comic that you require no matter of the

562
00:26:40,350 --> 00:26:45,689
script is sign or not the only downside

563
00:26:43,800 --> 00:26:49,919
it's available as a

564
00:26:45,690 --> 00:26:52,530
which is well do bad and this is

565
00:26:49,920 --> 00:26:55,590
actually the thing that implements W my

566
00:26:52,530 --> 00:26:57,620
persistence so if you've ever seen this

567
00:26:55,590 --> 00:27:00,540
tried to catch this or use this

568
00:26:57,620 --> 00:27:02,669
implementing a device guard bypass using

569
00:27:00,540 --> 00:27:06,180
active script consumer is exactly

570
00:27:02,670 --> 00:27:11,220
exactly the same what you need to do is

571
00:27:06,180 --> 00:27:13,560
to create an event filter with which

572
00:27:11,220 --> 00:27:17,490
basically says every time that something

573
00:27:13,560 --> 00:27:21,030
happens in this case when thirty two

574
00:27:17,490 --> 00:27:23,910
process called notepad is created you

575
00:27:21,030 --> 00:27:30,180
invoke your event consumer which in my

576
00:27:23,910 --> 00:27:34,890
case is this name test with a script of

577
00:27:30,180 --> 00:27:38,790
run CMD and then I bind my filter and

578
00:27:34,890 --> 00:27:41,610
consumers so I have this so I have this

579
00:27:38,790 --> 00:27:44,639
event that every time that note that is

580
00:27:41,610 --> 00:27:47,399
executed CMD is executed and that's

581
00:27:44,640 --> 00:27:49,470
about it and as you can see if you've

582
00:27:47,400 --> 00:27:51,480
ever implemented WI persistence this is

583
00:27:49,470 --> 00:27:53,600
exactly the same with no modifications

584
00:27:51,480 --> 00:27:53,600
whatsoever

585
00:27:54,320 --> 00:28:00,899
another scripting host that does not

586
00:27:58,200 --> 00:28:03,630
implement device guard is the Microsoft

587
00:28:00,900 --> 00:28:07,230
XML engine which is implemented in msxml

588
00:28:03,630 --> 00:28:11,160
three and six and these use what's

589
00:28:07,230 --> 00:28:13,350
called XSLT files now XSLT is a format

590
00:28:11,160 --> 00:28:17,310
that's designed to help you transform

591
00:28:13,350 --> 00:28:19,350
XML files to another format or which

592
00:28:17,310 --> 00:28:22,679
could be XML or it could be something

593
00:28:19,350 --> 00:28:24,330
else entirely and XSLT actually supports

594
00:28:22,680 --> 00:28:26,280
embedded scripting meaning that you can

595
00:28:24,330 --> 00:28:30,480
use javascript or BB script or whatever

596
00:28:26,280 --> 00:28:33,510
to help you transform your XML and the

597
00:28:30,480 --> 00:28:36,720
scripting host for msxml is implemented

598
00:28:33,510 --> 00:28:38,730
in msxml DLL itself and does not support

599
00:28:36,720 --> 00:28:42,630
device guard meaning that the moment you

600
00:28:38,730 --> 00:28:45,000
are able to apply the XSLT transform of

601
00:28:42,630 --> 00:28:47,130
your choice to an arbitrary XML file

602
00:28:45,000 --> 00:28:50,390
does not really matter which XML file it

603
00:28:47,130 --> 00:28:52,650
is you could run your script not be

604
00:28:50,390 --> 00:28:54,360
intercepted by device guard use

605
00:28:52,650 --> 00:28:56,400
something like dotnet to jscript and

606
00:28:54,360 --> 00:28:58,979
that's it you're running arbitrary

607
00:28:56,400 --> 00:29:03,210
assembly awesome

608
00:28:58,980 --> 00:29:05,399
so one way to do this is by using the

609
00:29:03,210 --> 00:29:07,799
application transform XML method of

610
00:29:05,399 --> 00:29:12,029
Microsoft Access yes there's a lot of

611
00:29:07,799 --> 00:29:14,429
office in this talk what it does as you

612
00:29:12,029 --> 00:29:16,559
might guess is just take an XML file

613
00:29:14,429 --> 00:29:20,460
take an XSL transform and apply the

614
00:29:16,559 --> 00:29:24,418
transform to the XML and of course

615
00:29:20,460 --> 00:29:26,519
there's a very polite script option

616
00:29:24,419 --> 00:29:28,380
which asks you do you want to run the

617
00:29:26,519 --> 00:29:29,909
scripts on this and yes I do want to run

618
00:29:28,380 --> 00:29:34,320
the script on this I don't care about

619
00:29:29,909 --> 00:29:36,389
XML so you can pretty much do it in four

620
00:29:34,320 --> 00:29:39,178
lines of PowerShell you create the

621
00:29:36,389 --> 00:29:42,209
access to application call object you

622
00:29:39,179 --> 00:29:46,950
create a new XM you create a new Access

623
00:29:42,210 --> 00:29:50,039
database you get the URL of an excel

624
00:29:46,950 --> 00:29:51,929
file which will be both the XML file to

625
00:29:50,039 --> 00:29:53,610
transform and the transform to apply

626
00:29:51,929 --> 00:29:56,429
because again we don't really care about

627
00:29:53,610 --> 00:30:01,019
the identity of the original XML file

628
00:29:56,429 --> 00:30:03,539
and just call transform XML with our

629
00:30:01,019 --> 00:30:05,279
excel file and in this case it will run

630
00:30:03,539 --> 00:30:07,440
notepad but it could run dot native

631
00:30:05,279 --> 00:30:10,740
jscript or any malicious thing that you

632
00:30:07,440 --> 00:30:13,710
would like to and I also supply like a

633
00:30:10,740 --> 00:30:16,019
non-existent path because of course my

634
00:30:13,710 --> 00:30:18,240
XSL won't be actually able to transform

635
00:30:16,019 --> 00:30:19,679
an XML file and it will throw an

636
00:30:18,240 --> 00:30:21,419
exception but that doesn't matter

637
00:30:19,679 --> 00:30:25,950
because my script is running I don't

638
00:30:21,419 --> 00:30:27,510
care about the XML itself and if you

639
00:30:25,950 --> 00:30:31,850
want to see a quick implementation of

640
00:30:27,510 --> 00:30:35,158
this there's a link at the bottom

641
00:30:31,850 --> 00:30:37,949
another way to run extra cells is by

642
00:30:35,159 --> 00:30:41,039
modifying a lateral movement method by

643
00:30:37,950 --> 00:30:45,269
Matt Nelson of spec drops and it's by

644
00:30:41,039 --> 00:30:48,389
using the outlook coma object and a look

645
00:30:45,269 --> 00:30:51,029
actually allows you to create almost

646
00:30:48,389 --> 00:30:54,959
arbitrary comm objects using the create

647
00:30:51,029 --> 00:30:57,690
object function and we can use it to

648
00:30:54,960 --> 00:31:00,210
create this free threaded Dom document

649
00:30:57,690 --> 00:31:03,649
whatever which is basically a comm

650
00:31:00,210 --> 00:31:06,480
representation of an XML file and also

651
00:31:03,649 --> 00:31:09,029
msxml to XSL template which is a common

652
00:31:06,480 --> 00:31:11,820
representation of an excel transform and

653
00:31:09,029 --> 00:31:12,630
again do pretty much the same thing we

654
00:31:11,820 --> 00:31:14,639
just apply

655
00:31:12,630 --> 00:31:18,090
or transform which contains a malicious

656
00:31:14,640 --> 00:31:20,520
script to our XML file and that's it the

657
00:31:18,090 --> 00:31:22,260
script executes nothing nothing stops it

658
00:31:20,520 --> 00:31:25,200
from running whatever arbitrary code at

659
00:31:22,260 --> 00:31:30,210
once and we are again running whatever

660
00:31:25,200 --> 00:31:33,360
we want all right so when I showed you

661
00:31:30,210 --> 00:31:36,990
this graph there was a small lie by

662
00:31:33,360 --> 00:31:39,570
omission and it's we always see that

663
00:31:36,990 --> 00:31:41,970
well the script calls something and then

664
00:31:39,570 --> 00:31:45,840
class ID from pragati is called from the

665
00:31:41,970 --> 00:31:46,740
engine etc and then the host as class

666
00:31:45,840 --> 00:31:49,290
allowed is called

667
00:31:46,740 --> 00:31:52,710
so almost all of these arrows are

668
00:31:49,290 --> 00:31:55,200
actually just imports but the second

669
00:31:52,710 --> 00:31:57,410
arrow from the engine to the host as

670
00:31:55,200 --> 00:31:59,910
class allowed is not an import and

671
00:31:57,410 --> 00:32:02,790
there's something interesting about how

672
00:31:59,910 --> 00:32:05,250
this function is called and the thing is

673
00:32:02,790 --> 00:32:08,310
that there's no single implementation of

674
00:32:05,250 --> 00:32:10,410
when and who calls this function which

675
00:32:08,310 --> 00:32:13,530
was actually the basis for a

676
00:32:10,410 --> 00:32:16,320
vulnerability because of inconsistent

677
00:32:13,530 --> 00:32:20,220
implementations so let's look at two of

678
00:32:16,320 --> 00:32:22,800
them at the top we have the jscript 9

679
00:32:20,220 --> 00:32:26,370
scripting engine running and under the

680
00:32:22,800 --> 00:32:28,260
MS HTML scripting host and we can see

681
00:32:26,370 --> 00:32:32,639
that I want to create a new

682
00:32:28,260 --> 00:32:36,540
activexobject this may be W script up

683
00:32:32,640 --> 00:32:38,640
shell and J step nine calls create

684
00:32:36,540 --> 00:32:41,909
object from frog ID then called can

685
00:32:38,640 --> 00:32:44,460
object run which subsequently calls host

686
00:32:41,910 --> 00:32:49,290
query cost and policy is safe to and

687
00:32:44,460 --> 00:32:52,740
whatever which are some generic safety

688
00:32:49,290 --> 00:32:55,440
check functions in MS HTML and MS HTML

689
00:32:52,740 --> 00:32:57,900
decides oh and I also need to call is

690
00:32:55,440 --> 00:33:01,290
class allowed which is our treasurer

691
00:32:57,900 --> 00:33:03,420
device guard function on the bottom

692
00:33:01,290 --> 00:33:08,070
image you can see something a bit

693
00:33:03,420 --> 00:33:11,220
different we have J s create object in

694
00:33:08,070 --> 00:33:14,250
JavaScript or X e dot DL L we have get

695
00:33:11,220 --> 00:33:18,360
object from prag ID and is class allowed

696
00:33:14,250 --> 00:33:23,130
is called directly now both of these

697
00:33:18,360 --> 00:33:26,189
work but this small difference is as I

698
00:33:23,130 --> 00:33:28,769
said the basis for vulnerability

699
00:33:26,190 --> 00:33:31,440
and what happens here is that ms HTML

700
00:33:28,769 --> 00:33:34,169
itself calls its own is glass allowed

701
00:33:31,440 --> 00:33:36,480
function meaning that basically the team

702
00:33:34,169 --> 00:33:39,809
that developed device guard for MS HTML

703
00:33:36,480 --> 00:33:41,970
decided it's our responsibility

704
00:33:39,809 --> 00:33:44,070
whenever somebody checks anything

705
00:33:41,970 --> 00:33:46,080
related to security with a common object

706
00:33:44,070 --> 00:33:47,809
we will call is class allowed and check

707
00:33:46,080 --> 00:33:54,210
everything against device guard and

708
00:33:47,809 --> 00:33:58,019
apparently the developers of C script W

709
00:33:54,210 --> 00:34:00,750
script etc just say well we saw anybody

710
00:33:58,019 --> 00:34:02,700
who develops a scripting engine will

711
00:34:00,750 --> 00:34:05,070
want to use device guards so let's just

712
00:34:02,700 --> 00:34:08,819
give them a pointer to the class loud

713
00:34:05,070 --> 00:34:10,649
function and then whoever develops the

714
00:34:08,819 --> 00:34:13,739
scripting engine will call it whenever

715
00:34:10,649 --> 00:34:15,328
necessary so again as you can see J

716
00:34:13,739 --> 00:34:19,290
script calls is class allowed to

717
00:34:15,329 --> 00:34:23,609
directly MS HTML calls is class allowed

718
00:34:19,290 --> 00:34:26,909
by itself so we have two pairs of

719
00:34:23,609 --> 00:34:28,799
implementation in one pair we have both

720
00:34:26,909 --> 00:34:31,530
teams thinking that the scripting host

721
00:34:28,800 --> 00:34:33,990
is responsible for checking if the class

722
00:34:31,530 --> 00:34:37,530
is allowed and in the other pair we have

723
00:34:33,989 --> 00:34:40,199
both both teams of developers thinking

724
00:34:37,530 --> 00:34:43,159
that the engine is responsible for

725
00:34:40,199 --> 00:34:48,689
checking if the class is allowed

726
00:34:43,159 --> 00:34:51,629
now this is how it works naturally but

727
00:34:48,690 --> 00:34:53,730
as I've said before every scripting

728
00:34:51,629 --> 00:34:56,609
engine should be able to work with any

729
00:34:53,730 --> 00:34:59,400
scripting host because of the active

730
00:34:56,609 --> 00:35:02,549
script interface implementation meaning

731
00:34:59,400 --> 00:35:06,630
that there's really nothing prohibiting

732
00:35:02,550 --> 00:35:09,720
me from using one type of implementation

733
00:35:06,630 --> 00:35:12,450
with the other so the developers of

734
00:35:09,720 --> 00:35:16,049
jscript 9 never thought that it's going

735
00:35:12,450 --> 00:35:19,529
to be used outside of ms HTML as a

736
00:35:16,050 --> 00:35:21,900
scripting host meaning that they don't

737
00:35:19,530 --> 00:35:24,839
check for themselves if the class is

738
00:35:21,900 --> 00:35:29,550
allowed so if I'm trying to run it under

739
00:35:24,839 --> 00:35:31,799
C script J skip 9 never checks is class

740
00:35:29,550 --> 00:35:33,930
allowed C script just gives the pointer

741
00:35:31,800 --> 00:35:36,300
to is grassle out and says ah the the

742
00:35:33,930 --> 00:35:38,970
engine will check it so it never checks

743
00:35:36,300 --> 00:35:39,910
by itself meaning that his class allowed

744
00:35:38,970 --> 00:35:43,140
has never call

745
00:35:39,910 --> 00:35:45,308
nobody checks for the validity for the

746
00:35:43,140 --> 00:35:47,348
for the validity of the common object

747
00:35:45,309 --> 00:35:50,710
and I couldn't create pretty much

748
00:35:47,349 --> 00:35:53,380
anything I like undersea script so this

749
00:35:50,710 --> 00:35:54,940
is actually really easy to exploit here

750
00:35:53,380 --> 00:35:58,599
we can see see script

751
00:35:54,940 --> 00:36:01,359
trying to run a regular JavaScript file

752
00:35:58,599 --> 00:36:03,880
that simply tries to run to execute

753
00:36:01,359 --> 00:36:06,759
calculator and we can see we have this

754
00:36:03,880 --> 00:36:08,890
exception automation for automation

755
00:36:06,759 --> 00:36:10,990
server can create object which which is

756
00:36:08,890 --> 00:36:13,720
what you get when you try to create a

757
00:36:10,990 --> 00:36:18,029
disallowed column object but the moment

758
00:36:13,720 --> 00:36:21,368
I provide the the gooood the class ID of

759
00:36:18,029 --> 00:36:24,339
jscript 9 as a scripting engine which is

760
00:36:21,369 --> 00:36:27,359
this slash a parameter to see script

761
00:36:24,339 --> 00:36:29,650
I basically override the default

762
00:36:27,359 --> 00:36:32,950
scripting engine that is to be used and

763
00:36:29,650 --> 00:36:34,569
instead used a script 9 so now we have C

764
00:36:32,950 --> 00:36:37,328
script and jscript 9 working together

765
00:36:34,569 --> 00:36:40,119
nobody checking anything and that's it I

766
00:36:37,329 --> 00:36:42,609
can run my beautiful calculator without

767
00:36:40,119 --> 00:36:44,799
anybody inhibiting me and of course you

768
00:36:42,609 --> 00:36:46,869
could you know use darknet to J script

769
00:36:44,799 --> 00:36:50,549
or whatever to do the exact same thing

770
00:36:46,869 --> 00:36:55,569
and run something that's actually useful

771
00:36:50,549 --> 00:36:58,930
so this vulnerability actually was not

772
00:36:55,569 --> 00:37:02,680
only limited to C script and W script

773
00:36:58,930 --> 00:37:04,210
because STR ops DLL which is the

774
00:37:02,680 --> 00:37:05,740
scripting host implementing calm

775
00:37:04,210 --> 00:37:09,369
scriptlets

776
00:37:05,740 --> 00:37:11,919
was also implemented in the exact same

777
00:37:09,369 --> 00:37:13,930
way as T script and the only thing that

778
00:37:11,920 --> 00:37:18,009
I was missing is a friendly name a prog

779
00:37:13,930 --> 00:37:21,970
ID forge a script 9 because there simply

780
00:37:18,009 --> 00:37:25,000
isn't one so all we need to do is to

781
00:37:21,970 --> 00:37:27,730
have this run you have scripting

782
00:37:25,000 --> 00:37:29,920
language you mostly have jscript VB

783
00:37:27,730 --> 00:37:32,769
script you have nothing for jscript 9 so

784
00:37:29,920 --> 00:37:35,589
if I can somehow call jscript 9 let's

785
00:37:32,769 --> 00:37:38,709
say also J script then I can exploit

786
00:37:35,589 --> 00:37:41,230
this too it's really easy to do so all I

787
00:37:38,710 --> 00:37:45,609
need to do is just add the new registry

788
00:37:41,230 --> 00:37:48,789
entry under H KCU binding the gooood the

789
00:37:45,609 --> 00:37:50,680
class ID of jscript 9 to also J script

790
00:37:48,789 --> 00:37:52,630
and that's it and now we can use any

791
00:37:50,680 --> 00:37:53,710
technique such as reg STR to run a

792
00:37:52,630 --> 00:37:57,010
script let

793
00:37:53,710 --> 00:38:02,200
and which will again run anything I want

794
00:37:57,010 --> 00:38:04,270
under device guard all right so this

795
00:38:02,200 --> 00:38:06,308
vulnerability was patched in November

796
00:38:04,270 --> 00:38:10,300
and the patch was actually pretty good

797
00:38:06,309 --> 00:38:12,309
so I did not find a way to bypass it in

798
00:38:10,300 --> 00:38:14,410
code so we should be safe from this

799
00:38:12,309 --> 00:38:19,180
vulnerability right

800
00:38:14,410 --> 00:38:22,720
well almost so here we have two versions

801
00:38:19,180 --> 00:38:26,319
of JavaScript of Jacob 9 on the same

802
00:38:22,720 --> 00:38:29,669
machine the first is the version on my

803
00:38:26,319 --> 00:38:32,170
patched machine and windows system32 and

804
00:38:29,670 --> 00:38:35,650
we check the certificate and it's valid

805
00:38:32,170 --> 00:38:39,160
and the other one is the vulnerable

806
00:38:35,650 --> 00:38:42,760
version and we check its certificate and

807
00:38:39,160 --> 00:38:45,160
it's also valid and what does device

808
00:38:42,760 --> 00:38:47,109
guard stop it stops everything that's

809
00:38:45,160 --> 00:38:49,240
not signed invalid by a specific

810
00:38:47,109 --> 00:38:52,270
certificate and both of these are signed

811
00:38:49,240 --> 00:38:55,118
by the same certificate and we're in the

812
00:38:52,270 --> 00:38:57,369
post exploitation scenario so why don't

813
00:38:55,119 --> 00:38:59,530
I just choose to run the vulnerable

814
00:38:57,369 --> 00:39:02,559
version like who cares if there's a safe

815
00:38:59,530 --> 00:39:04,750
version I don't want it and this was

816
00:39:02,559 --> 00:39:06,880
actually discovered by Jimmy Bain beau

817
00:39:04,750 --> 00:39:10,359
hops on Twitter and you could still

818
00:39:06,880 --> 00:39:12,339
abuse two of our recent bypasses I used

819
00:39:10,359 --> 00:39:15,430
a script 9 he used msxml

820
00:39:12,339 --> 00:39:17,259
and just drink the final version back

821
00:39:15,430 --> 00:39:19,390
and that's it you have the vulnerability

822
00:39:17,260 --> 00:39:21,430
again anything you all you need to do is

823
00:39:19,390 --> 00:39:24,598
to register it as a calm object similar

824
00:39:21,430 --> 00:39:28,779
to the way I did with the script it's

825
00:39:24,599 --> 00:39:30,849
and that's pretty much it now this is a

826
00:39:28,780 --> 00:39:34,150
problem with catalog hygiene meaning

827
00:39:30,849 --> 00:39:36,369
that the signature catalogs of

828
00:39:34,150 --> 00:39:41,829
vulnerable versions of files are still

829
00:39:36,369 --> 00:39:44,770
present on an updated version of Windows

830
00:39:41,829 --> 00:39:49,720
so the vulnerable versions still count

831
00:39:44,770 --> 00:39:51,940
as signed and could be used now he's

832
00:39:49,720 --> 00:39:54,069
shown it for a cup for our device guard

833
00:39:51,940 --> 00:39:59,859
bypasses but this is actually also valid

834
00:39:54,069 --> 00:40:02,259
for other stuff now the way that

835
00:39:59,859 --> 00:40:07,390
Microsoft tried to mitigate this issue

836
00:40:02,260 --> 00:40:10,720
is by adding msxml 3 & 6 and

837
00:40:07,390 --> 00:40:12,788
nine up to a certain version to a

838
00:40:10,720 --> 00:40:15,189
Microsoft recommended blocklist

839
00:40:12,789 --> 00:40:18,069
for device guard which is basically like

840
00:40:15,190 --> 00:40:20,079
tons of versions of PowerShell and lots

841
00:40:18,069 --> 00:40:23,230
of different device guard bypassing

842
00:40:20,079 --> 00:40:24,849
executables so there's just an XML that

843
00:40:23,230 --> 00:40:26,920
you add to your policy and then none of

844
00:40:24,849 --> 00:40:31,480
these things can run because they're

845
00:40:26,920 --> 00:40:34,809
explicitly blacklisted but this is

846
00:40:31,480 --> 00:40:36,730
really not enough because this doesn't

847
00:40:34,809 --> 00:40:41,559
update with every single Windows Update

848
00:40:36,730 --> 00:40:43,329
and also at least up until now was only

849
00:40:41,559 --> 00:40:46,869
relevant to strictly device guard

850
00:40:43,329 --> 00:40:49,059
bypasses but what if I have an RC e so I

851
00:40:46,869 --> 00:40:53,319
think these are two projects zero bugs

852
00:40:49,059 --> 00:40:56,319
in J stripped and vbscript so what if I

853
00:40:53,319 --> 00:40:59,500
have I use after free and I just abused

854
00:40:56,319 --> 00:41:04,299
that use after free which is which still

855
00:40:59,500 --> 00:41:06,250
exists in a signed file and I use it to

856
00:41:04,299 --> 00:41:07,990
run my shellcode or whatever I don't

857
00:41:06,250 --> 00:41:11,500
really care that it's not a device guard

858
00:41:07,990 --> 00:41:15,279
bypassed by per se but you know it's not

859
00:41:11,500 --> 00:41:16,750
deployed in a browser or anything but

860
00:41:15,279 --> 00:41:18,819
again I'm in a post exploitation

861
00:41:16,750 --> 00:41:20,829
scenario I can choose to run that

862
00:41:18,819 --> 00:41:22,720
vulnerable code I'm not trying to run

863
00:41:20,829 --> 00:41:26,670
anything in a higher privilege so I

864
00:41:22,720 --> 00:41:31,500
could use these old patched or C's as

865
00:41:26,670 --> 00:41:34,380
still viable device guard bypasses and

866
00:41:31,500 --> 00:41:38,410
actually the scope of this is pretty big

867
00:41:34,380 --> 00:41:40,869
there isn't a bunch of stale catalog

868
00:41:38,410 --> 00:41:43,598
catalog hygiene problems as much as

869
00:41:40,869 --> 00:41:46,539
there isn't really a thing called

870
00:41:43,599 --> 00:41:47,950
catalog hygiene meaning that the moment

871
00:41:46,539 --> 00:41:50,289
Windows updates

872
00:41:47,950 --> 00:41:53,618
unless you're updating forum let's say

873
00:41:50,289 --> 00:41:56,230
RS 3 to RS for all of the catalogs

874
00:41:53,619 --> 00:41:58,630
remain meaning that every RCE

875
00:41:56,230 --> 00:42:01,660
that you could somehow reach using some

876
00:41:58,630 --> 00:42:04,960
command line tricks is still available

877
00:42:01,660 --> 00:42:06,640
on a fully patched machine and you don't

878
00:42:04,960 --> 00:42:09,460
even need to bring your own vulnerable

879
00:42:06,640 --> 00:42:11,920
code that's signed because most of the

880
00:42:09,460 --> 00:42:14,769
old code is actually stored and see

881
00:42:11,920 --> 00:42:17,319
windows win a success so all you need to

882
00:42:14,769 --> 00:42:21,519
do is choose your favorite code

883
00:42:17,319 --> 00:42:24,159
execution bypass whatever register it

884
00:42:21,519 --> 00:42:28,839
and use that on a fully patched machine

885
00:42:24,159 --> 00:42:31,869
because the bundle code is not gone so I

886
00:42:28,839 --> 00:42:35,019
think the way to fix this is to delete

887
00:42:31,869 --> 00:42:37,089
the old catalogs of pretty much every

888
00:42:35,019 --> 00:42:40,899
vulnerable pile of the mold the moment

889
00:42:37,089 --> 00:42:43,058
you update Windows or else patching is

890
00:42:40,899 --> 00:42:44,529
pretty much meaningless because you

891
00:42:43,059 --> 00:42:48,789
could always choose to use the

892
00:42:44,529 --> 00:42:51,999
vulnerable version of the code so that's

893
00:42:48,789 --> 00:42:53,829
it for actual device guard bypasses but

894
00:42:51,999 --> 00:42:57,488
let's see what these things could do

895
00:42:53,829 --> 00:42:58,479
that that give you the benefit what

896
00:42:57,489 --> 00:42:59,019
benefits you could gain from these

897
00:42:58,479 --> 00:43:01,448
techniques

898
00:42:59,019 --> 00:43:04,718
apart from actual device called bypasses

899
00:43:01,449 --> 00:43:07,239
so first of all I've showcased a bunch

900
00:43:04,719 --> 00:43:10,029
of different alternative execution

901
00:43:07,239 --> 00:43:11,979
techniques some of these abuse office

902
00:43:10,029 --> 00:43:13,239
for post exploitation which is not

903
00:43:11,979 --> 00:43:18,428
something that I've seen a lot in the

904
00:43:13,239 --> 00:43:21,159
wild which will probably bypass a lot of

905
00:43:18,429 --> 00:43:23,079
different defenses and also there's a

906
00:43:21,159 --> 00:43:24,969
couple of msi bypasses here

907
00:43:23,079 --> 00:43:26,919
first of all jscript 9 is not

908
00:43:24,969 --> 00:43:29,109
instrumented with a MSI meaning that if

909
00:43:26,919 --> 00:43:31,929
you're running anything under jscript 9

910
00:43:29,109 --> 00:43:33,759
for example the same exploit I showed it

911
00:43:31,929 --> 00:43:35,889
won't work as a device go to exploit

912
00:43:33,759 --> 00:43:37,509
anymore but it's still as name is I

913
00:43:35,889 --> 00:43:40,329
bypass which is pretty much free you

914
00:43:37,509 --> 00:43:43,479
just like modify your command line a bit

915
00:43:40,329 --> 00:43:46,119
and that's it no registry rights no

916
00:43:43,479 --> 00:43:49,658
weird memory patching just that's it no

917
00:43:46,119 --> 00:43:51,189
no I miss hi and this actually gave me

918
00:43:49,659 --> 00:43:55,029
the idea for another bypass which is

919
00:43:51,189 --> 00:43:57,428
very similar there's a third native

920
00:43:55,029 --> 00:44:00,399
active script JavaScript implementation

921
00:43:57,429 --> 00:44:02,739
in Windows but this one doesn't really

922
00:44:00,399 --> 00:44:05,949
have built-in ActiveX or comm

923
00:44:02,739 --> 00:44:08,409
functionality so yeah you can't just use

924
00:44:05,949 --> 00:44:10,659
it to create arbitrary count objects but

925
00:44:08,409 --> 00:44:13,659
W script the scripting host actually

926
00:44:10,659 --> 00:44:16,659
helps this functionality so instead of

927
00:44:13,659 --> 00:44:18,999
doing new activexobject which transcend

928
00:44:16,659 --> 00:44:20,799
the engine you could do W script or

929
00:44:18,999 --> 00:44:23,979
create object and still create your

930
00:44:20,799 --> 00:44:29,139
object no MSI and run your malicious

931
00:44:23,979 --> 00:44:30,759
script the way you want you could also

932
00:44:29,139 --> 00:44:34,479
stick a bunch of different techniques

933
00:44:30,759 --> 00:44:35,410
together because you could bypass a MSI

934
00:44:34,479 --> 00:44:37,779
using Jason

935
00:44:35,410 --> 00:44:39,910
or chakra for example and then run your

936
00:44:37,780 --> 00:44:42,450
shellcode through Excel having a bunch

937
00:44:39,910 --> 00:44:46,660
of different AMS I bypassing wireless

938
00:44:42,450 --> 00:44:49,270
modules which are I think not really

939
00:44:46,660 --> 00:44:51,759
sought out by defenders today and you

940
00:44:49,270 --> 00:44:57,970
can do injections without injections etc

941
00:44:51,760 --> 00:45:00,190
etc anyway to the conclusion most of

942
00:44:57,970 --> 00:45:02,109
these techniques are pretty easy to

943
00:45:00,190 --> 00:45:06,339
detect if you know what you're looking

944
00:45:02,109 --> 00:45:08,799
for as you've seen the nature of doing

945
00:45:06,339 --> 00:45:11,109
of bypassing device guard means that you

946
00:45:08,799 --> 00:45:13,150
need to play with a command line lot so

947
00:45:11,109 --> 00:45:15,308
command line detection is loaded module

948
00:45:13,150 --> 00:45:19,480
detection is a tiny bit of registry and

949
00:45:15,309 --> 00:45:22,869
WMI monitoring will pretty much give you

950
00:45:19,480 --> 00:45:26,230
visibility into anything related to

951
00:45:22,869 --> 00:45:30,220
these techniques so knowing is half the

952
00:45:26,230 --> 00:45:32,289
battle a I suppose and I think Y

953
00:45:30,220 --> 00:45:34,029
showcased a bunch of different

954
00:45:32,289 --> 00:45:35,799
weaknesses in device guard this is still

955
00:45:34,030 --> 00:45:37,780
a really good feature and it's probably

956
00:45:35,799 --> 00:45:40,750
the best way you could do application

957
00:45:37,780 --> 00:45:43,270
whitelisting today but if Microsoft

958
00:45:40,750 --> 00:45:45,460
locks down office even though it's not

959
00:45:43,270 --> 00:45:47,200
an integral part of Windows It's Made

960
00:45:45,460 --> 00:45:50,619
like Microsoft and you know it's pretty

961
00:45:47,200 --> 00:45:51,819
ubiquitous this will bring device guard

962
00:45:50,619 --> 00:45:54,730
from something that's applicable to

963
00:45:51,819 --> 00:45:57,160
servers to something that's applicable

964
00:45:54,730 --> 00:46:00,339
to you know workstations without a ton

965
00:45:57,160 --> 00:46:02,950
of different bypasses also of course

966
00:46:00,339 --> 00:46:05,259
implement a general generic solution to

967
00:46:02,950 --> 00:46:08,828
Kellogg hygiene to make patching

968
00:46:05,260 --> 00:46:11,440
actually work well also I'm not sure

969
00:46:08,829 --> 00:46:13,420
that I found the only implementation

970
00:46:11,440 --> 00:46:16,470
like the only vulnerability and the

971
00:46:13,420 --> 00:46:18,700
implementations of active script so

972
00:46:16,470 --> 00:46:23,950
fixing that would be nice like one

973
00:46:18,700 --> 00:46:25,808
consistent implementation and also if

974
00:46:23,950 --> 00:46:29,649
you've read about a bit of Microsoft

975
00:46:25,809 --> 00:46:32,319
news you know that apparently Python is

976
00:46:29,650 --> 00:46:34,539
available on the Windows Store so if

977
00:46:32,319 --> 00:46:36,400
today you have a fully updated version

978
00:46:34,539 --> 00:46:40,240
of Windows and you just go Python it

979
00:46:36,400 --> 00:46:42,579
will try to install Python so starting

980
00:46:40,240 --> 00:46:44,919
with a more generic implementation of

981
00:46:42,579 --> 00:46:47,170
device guard for pretty much everything

982
00:46:44,920 --> 00:46:48,790
I think is a smart move because what if

983
00:46:47,170 --> 00:46:51,550
I wanted to use Java there's no device

984
00:46:48,790 --> 00:46:53,140
for Java so you really need to extend

985
00:46:51,550 --> 00:46:57,220
this model to allow people to use

986
00:46:53,140 --> 00:46:58,839
different types of code anyway that's

987
00:46:57,220 --> 00:47:01,930
pretty much the end if you want to learn

988
00:46:58,840 --> 00:47:04,300
more about device guard or more about

989
00:47:01,930 --> 00:47:08,140
weird intersections between Windows

990
00:47:04,300 --> 00:47:08,650
internals and and red teaming and stuff

991
00:47:08,140 --> 00:47:10,170
like that

992
00:47:08,650 --> 00:47:14,740
you should probably follow these guys

993
00:47:10,170 --> 00:47:18,820
and I've based much of my research upon

994
00:47:14,740 --> 00:47:20,259
their work and that's about it you can

995
00:47:18,820 --> 00:47:25,060
ask me questions now you could ask me

996
00:47:20,260 --> 00:47:28,660
questions later I'm available thank you

997
00:47:25,060 --> 00:47:30,960
so much Phillip guys congratulations for

998
00:47:28,660 --> 00:47:30,960
Phillip

