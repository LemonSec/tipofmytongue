1
00:00:00,080 --> 00:00:02,320
um

2
00:00:11,280 --> 00:00:12,400
good

3
00:00:12,400 --> 00:00:14,960
day everyone my name is jim maniko i'm

4
00:00:14,960 --> 00:00:17,199
to be your presenter for this talk

5
00:00:17,199 --> 00:00:20,240
it is 2 20 in the morning for me in the

6
00:00:20,240 --> 00:00:23,279
pacific of the united states i am tired

7
00:00:23,279 --> 00:00:25,519
i'm a little bit cranky so you need to

8
00:00:25,519 --> 00:00:26,640
pay attention because we're going to

9
00:00:26,640 --> 00:00:29,599
work on a technique or a series of

10
00:00:29,599 --> 00:00:31,840
techniques for secure coding we're going

11
00:00:31,840 --> 00:00:34,640
to learn about request forgery in a

12
00:00:34,640 --> 00:00:36,640
browser and we're going to learn about

13
00:00:36,640 --> 00:00:39,600
request forgery on the server i'm a

14
00:00:39,600 --> 00:00:41,440
little bit cranky this morning so i

15
00:00:41,440 --> 00:00:44,160
apologize but let's get to work here my

16
00:00:44,160 --> 00:00:45,680
name is jim manico i'll be your

17
00:00:45,680 --> 00:00:46,800
presenter

18
00:00:46,800 --> 00:00:49,120
and let's look at the traditional

19
00:00:49,120 --> 00:00:51,280
forgery first let's look at cross site

20
00:00:51,280 --> 00:00:53,039
request forgery

21
00:00:53,039 --> 00:00:55,520
first this is a clothing optional talk

22
00:00:55,520 --> 00:00:57,600
by the way just let's let's

23
00:00:57,600 --> 00:00:59,920
you know clothing optional so okay so

24
00:00:59,920 --> 00:01:02,000
you're in the browser and you go visit

25
00:01:02,000 --> 00:01:04,799
an attacker's website as a victim

26
00:01:04,799 --> 00:01:05,920
and then

27
00:01:05,920 --> 00:01:09,119
that attacker website can deliver code

28
00:01:09,119 --> 00:01:10,640
into your browser

29
00:01:10,640 --> 00:01:13,360
that will force your browser to make a

30
00:01:13,360 --> 00:01:16,240
request to another website and

31
00:01:16,240 --> 00:01:19,119
especially if you're currently logged in

32
00:01:19,119 --> 00:01:21,920
to the victim website that

33
00:01:21,920 --> 00:01:24,880
forage request in some situations will

34
00:01:24,880 --> 00:01:25,759
work

35
00:01:25,759 --> 00:01:28,240
again this attack type cross-site

36
00:01:28,240 --> 00:01:31,680
request forgery it's a way to trick a

37
00:01:31,680 --> 00:01:32,880
user

38
00:01:32,880 --> 00:01:35,920
into conducting a request that they

39
00:01:35,920 --> 00:01:38,560
never intended to in this exam in these

40
00:01:38,560 --> 00:01:41,360
examples it's about transferring money

41
00:01:41,360 --> 00:01:45,360
deleting email or even sending e sending

42
00:01:45,360 --> 00:01:47,680
email that the user

43
00:01:47,680 --> 00:01:50,240
never intended to to do now let's look

44
00:01:50,240 --> 00:01:52,479
at this last example here

45
00:01:52,479 --> 00:01:55,200
imagine there's a vulnerability in this

46
00:01:55,200 --> 00:01:58,399
webmail system and i'm visiting please

47
00:01:58,399 --> 00:02:00,799
note the site that i'm on here right i'm

48
00:02:00,799 --> 00:02:04,000
on an evil website that's an attacker

49
00:02:04,000 --> 00:02:08,800
that's bad b-a-d it's a bad website

50
00:02:08,800 --> 00:02:11,680
controlled by an attacker in some way

51
00:02:11,680 --> 00:02:15,360
and then i go visit this code now this

52
00:02:15,360 --> 00:02:17,920
code makes a request to some webmail

53
00:02:17,920 --> 00:02:21,040
site and it forces me to send email and

54
00:02:21,040 --> 00:02:23,360
the destination is my boss i'm gonna

55
00:02:23,360 --> 00:02:25,200
tell the boss they're a jerk

56
00:02:25,200 --> 00:02:26,959
and i'm gonna use

57
00:02:26,959 --> 00:02:31,440
the rel the rel is no refer attribute

58
00:02:31,440 --> 00:02:33,599
now why am i using that attribute so

59
00:02:33,599 --> 00:02:36,560
when i make a request when i force a

60
00:02:36,560 --> 00:02:40,560
victim to make a request to webmail

61
00:02:40,560 --> 00:02:43,519
it's not going to leak the referrer that

62
00:02:43,519 --> 00:02:46,480
would be evil.com so by saying this i

63
00:02:46,480 --> 00:02:47,840
say no

64
00:02:47,840 --> 00:02:51,040
don't do a referral and so there you go

65
00:02:51,040 --> 00:02:53,360
that's where we're going so it's forged

66
00:02:53,360 --> 00:02:55,920
requests on the web so my question is

67
00:02:55,920 --> 00:02:58,319
what's the result here when the image

68
00:02:58,319 --> 00:03:00,239
loads now look at this image when the

69
00:03:00,239 --> 00:03:02,319
image loads

70
00:03:02,319 --> 00:03:04,959
a get request is made right a get

71
00:03:04,959 --> 00:03:07,120
request is made to the banking

72
00:03:07,120 --> 00:03:10,239
application and if the user is logged

73
00:03:10,239 --> 00:03:11,760
into the bank

74
00:03:11,760 --> 00:03:14,959
the cookie is if they're logged in

75
00:03:14,959 --> 00:03:17,120
and the cookie is valid

76
00:03:17,120 --> 00:03:19,440
that cookie is gonna be sent

77
00:03:19,440 --> 00:03:22,159
automatically and if the user is logged

78
00:03:22,159 --> 00:03:22,959
in

79
00:03:22,959 --> 00:03:25,360
the user is authenticated now the

80
00:03:25,360 --> 00:03:28,799
attacker does not see the response the

81
00:03:28,799 --> 00:03:30,480
attack launches

82
00:03:30,480 --> 00:03:33,440
in the browser of a victim

83
00:03:33,440 --> 00:03:36,080
so does does it matter that the attacker

84
00:03:36,080 --> 00:03:39,040
doesn't see the response no it doesn't

85
00:03:39,040 --> 00:03:41,760
the attacker gets the result of this

86
00:03:41,760 --> 00:03:44,239
attack they get the money they get the

87
00:03:44,239 --> 00:03:46,879
message to be sent maliciously and

88
00:03:46,879 --> 00:03:47,840
similar

89
00:03:47,840 --> 00:03:48,720
you know

90
00:03:48,720 --> 00:03:50,159
let's keep looking at this we're going

91
00:03:50,159 --> 00:03:51,760
to look at this from a lot of different

92
00:03:51,760 --> 00:03:53,920
angles but look at this here this is

93
00:03:53,920 --> 00:03:56,959
also an evil website bad

94
00:03:56,959 --> 00:03:59,280
and so on this evil website we have an

95
00:03:59,280 --> 00:04:00,640
iframe

96
00:04:00,640 --> 00:04:02,879
that's invisible white

97
00:04:02,879 --> 00:04:03,920
width

98
00:04:03,920 --> 00:04:07,040
height and border are all like zero so

99
00:04:07,040 --> 00:04:08,879
there's so it's so it's it's an

100
00:04:08,879 --> 00:04:10,799
invisible iframe

101
00:04:10,799 --> 00:04:13,360
it's going to make a submission to this

102
00:04:13,360 --> 00:04:17,120
internal website and transfer money and

103
00:04:17,120 --> 00:04:18,959
there's the account and the money

104
00:04:18,959 --> 00:04:20,560
they're going to transfer

105
00:04:20,560 --> 00:04:22,800
and there's the form submitting

106
00:04:22,800 --> 00:04:25,280
automatically so let's put this all

107
00:04:25,280 --> 00:04:27,520
together think about this for a second

108
00:04:27,520 --> 00:04:29,360
it's an evil website

109
00:04:29,360 --> 00:04:32,080
it makes an automatic request to your

110
00:04:32,080 --> 00:04:34,960
intranet website where you're logged in

111
00:04:34,960 --> 00:04:36,160
all day

112
00:04:36,160 --> 00:04:39,919
the user doesn't see anything because

113
00:04:39,919 --> 00:04:42,880
i'm using style to make this invisible

114
00:04:42,880 --> 00:04:46,080
and the submission happens automatically

115
00:04:46,080 --> 00:04:49,600
by javascript this is messed up this is

116
00:04:49,600 --> 00:04:51,919
a post request that's firing

117
00:04:51,919 --> 00:04:55,759
automatically this is very very bad it's

118
00:04:55,759 --> 00:04:57,600
cross-site request forgery with the post

119
00:04:57,600 --> 00:05:00,960
request in the us one of our big movie

120
00:05:00,960 --> 00:05:04,400
streaming services is netflix right when

121
00:05:04,400 --> 00:05:07,680
netflix was attacked back in 2006

122
00:05:07,680 --> 00:05:10,240
we want to start at the body request

123
00:05:10,240 --> 00:05:12,479
here start the body so that when this

124
00:05:12,479 --> 00:05:15,840
page renders at some evil website the

125
00:05:15,840 --> 00:05:18,000
first thing that happens is

126
00:05:18,000 --> 00:05:21,199
a get request goes to netflix and adds

127
00:05:21,199 --> 00:05:24,400
that movie to the queue that's now a

128
00:05:24,400 --> 00:05:26,560
movie it's a dvd

129
00:05:26,560 --> 00:05:29,360
that's at the very bottom of the queue

130
00:05:29,360 --> 00:05:31,919
then we wait two seconds and call load

131
00:05:31,919 --> 00:05:33,120
image 2

132
00:05:33,120 --> 00:05:36,160
which load image 2 is right there

133
00:05:36,160 --> 00:05:38,320
that's going to fire to netflix move to

134
00:05:38,320 --> 00:05:41,600
top a certain movie so in this attack

135
00:05:41,600 --> 00:05:43,919
we take a dvd

136
00:05:43,919 --> 00:05:46,800
add it to the bottom of the dvd queue

137
00:05:46,800 --> 00:05:49,360
and then move it to the top of the queue

138
00:05:49,360 --> 00:05:51,919
and this becomes the next movie

139
00:05:51,919 --> 00:05:53,919
delivered to the home

140
00:05:53,919 --> 00:05:56,479
and in the us this movie was

141
00:05:56,479 --> 00:05:58,479
inappropriate for children it was an

142
00:05:58,479 --> 00:06:00,319
adult movie so

143
00:06:00,319 --> 00:06:03,120
in the us that's a very big deal i know

144
00:06:03,120 --> 00:06:04,639
and i know in

145
00:06:04,639 --> 00:06:06,080
poland you probably just give it to your

146
00:06:06,080 --> 00:06:08,319
kids who cares but this was a this is a

147
00:06:08,319 --> 00:06:10,240
this is a big deal in the us it was

148
00:06:10,240 --> 00:06:12,720
inappropriate movies being delivered to

149
00:06:12,720 --> 00:06:15,600
people and it shows us how request

150
00:06:15,600 --> 00:06:18,160
forgery can work nobody ordered these

151
00:06:18,160 --> 00:06:20,720
movies they were ordered for them by an

152
00:06:20,720 --> 00:06:21,840
attacker

153
00:06:21,840 --> 00:06:24,000
now look at this now we're getting a bit

154
00:06:24,000 --> 00:06:25,680
more serious

155
00:06:25,680 --> 00:06:28,960
this is cross site request forgery

156
00:06:28,960 --> 00:06:31,759
that shows up in a whole nation

157
00:06:31,759 --> 00:06:34,720
this is an attack against brazil

158
00:06:34,720 --> 00:06:38,639
there were literally five million people

159
00:06:38,639 --> 00:06:41,360
impacted by this five million throughout

160
00:06:41,360 --> 00:06:42,400
brazil

161
00:06:42,400 --> 00:06:46,479
and this attack also attacks an intranet

162
00:06:46,479 --> 00:06:51,039
the attack goes after 192 168 1.1 that's

163
00:06:51,039 --> 00:06:53,120
an intranet address

164
00:06:53,120 --> 00:06:57,039
and in brazil a third of the nation was

165
00:06:57,039 --> 00:07:00,000
using this router because they gave it

166
00:07:00,000 --> 00:07:03,360
to you for free it's a free router when

167
00:07:03,360 --> 00:07:05,599
you order internet service in brazil

168
00:07:05,599 --> 00:07:09,440
around this era in 2012 and and if

169
00:07:09,440 --> 00:07:11,599
you're if you are connected to this

170
00:07:11,599 --> 00:07:14,160
router and you visit the internet and

171
00:07:14,160 --> 00:07:16,800
you run across this code it's going to

172
00:07:16,800 --> 00:07:20,240
automatically submit via javascript here

173
00:07:20,240 --> 00:07:22,400
it's going to submit to a local address

174
00:07:22,400 --> 00:07:24,639
the home of that router and it's going

175
00:07:24,639 --> 00:07:28,080
to change the root password to this

176
00:07:28,080 --> 00:07:30,160
password right there and now the

177
00:07:30,160 --> 00:07:32,479
attacker knows your password now what

178
00:07:32,479 --> 00:07:34,880
the attacker did when he got access to

179
00:07:34,880 --> 00:07:36,800
this router

180
00:07:36,800 --> 00:07:39,360
is change your dns oops let's get rid of

181
00:07:39,360 --> 00:07:41,440
all that mess there it goes get rid of

182
00:07:41,440 --> 00:07:42,720
all that mess

183
00:07:42,720 --> 00:07:45,440
so it it would it would literally change

184
00:07:45,440 --> 00:07:48,160
the dns of the server of that little

185
00:07:48,160 --> 00:07:52,800
router if i can change your dns

186
00:07:52,800 --> 00:07:54,960
you know i control all of your web

187
00:07:54,960 --> 00:07:57,919
traffic it's a really big deal and so

188
00:07:57,919 --> 00:08:00,479
the point i'm trying to make is i can

189
00:08:00,479 --> 00:08:04,479
use cross site request forgery to attack

190
00:08:04,479 --> 00:08:07,440
your intranet to attack your internal

191
00:08:07,440 --> 00:08:10,400
network i can host the attack and a web

192
00:08:10,400 --> 00:08:12,960
page outside of your network

193
00:08:12,960 --> 00:08:16,160
and when and when someone visits any

194
00:08:16,160 --> 00:08:18,400
website while being logged into single

195
00:08:18,400 --> 00:08:21,199
sign-on that code can be delivered to

196
00:08:21,199 --> 00:08:24,240
the browser and trick the user into

197
00:08:24,240 --> 00:08:26,400
making any request

198
00:08:26,400 --> 00:08:29,120
on the intranet where people are logged

199
00:08:29,120 --> 00:08:32,320
in via single sign-on all day

200
00:08:32,320 --> 00:08:35,200
this is bad right

201
00:08:35,200 --> 00:08:36,159
and so

202
00:08:36,159 --> 00:08:39,360
the way we stop cross-site request

203
00:08:39,360 --> 00:08:42,320
forgery is these two patterns here

204
00:08:42,320 --> 00:08:44,640
it's the synchronizer token pattern for

205
00:08:44,640 --> 00:08:46,160
a web app

206
00:08:46,160 --> 00:08:48,320
or the double submit cookie

207
00:08:48,320 --> 00:08:49,360
pattern

208
00:08:49,360 --> 00:08:52,880
for a stateless api we also have these

209
00:08:52,880 --> 00:08:55,440
other defenses like re-authentication

210
00:08:55,440 --> 00:08:56,800
is good

211
00:08:56,800 --> 00:08:59,920
just making the user log in before they

212
00:08:59,920 --> 00:09:02,240
fit log in again

213
00:09:02,240 --> 00:09:04,880
before they finish a transaction that's

214
00:09:04,880 --> 00:09:08,000
good we also have same site cookies

215
00:09:08,000 --> 00:09:10,320
which is a standard on the web which

216
00:09:10,320 --> 00:09:12,959
helps defeat request forgery and the

217
00:09:12,959 --> 00:09:15,600
browser automatically sends some some

218
00:09:15,600 --> 00:09:18,640
headers request headers like origin or

219
00:09:18,640 --> 00:09:21,120
refer header which we can verify to stop

220
00:09:21,120 --> 00:09:23,040
request forgery as well

221
00:09:23,040 --> 00:09:24,000
all right

222
00:09:24,000 --> 00:09:27,040
the first major pattern we care about is

223
00:09:27,040 --> 00:09:30,000
the synchronizer token pattern it's a

224
00:09:30,000 --> 00:09:32,399
hidden token in html so what this what

225
00:09:32,399 --> 00:09:35,440
this means is at login time when a user

226
00:09:35,440 --> 00:09:38,720
logs in i'm going to put a random value

227
00:09:38,720 --> 00:09:41,680
in the user session there right and then

228
00:09:41,680 --> 00:09:44,320
any time i build a form i'm going to add

229
00:09:44,320 --> 00:09:46,800
a c surf token to that sensitive form

230
00:09:46,800 --> 00:09:48,640
the same value right

231
00:09:48,640 --> 00:09:50,959
and then whenever a user submits a

232
00:09:50,959 --> 00:09:53,440
sensitive request i'm going to compare

233
00:09:53,440 --> 00:09:55,680
the token in the session i'm going to

234
00:09:55,680 --> 00:09:58,080
see if it matches what's in the actual

235
00:09:58,080 --> 00:09:59,279
request

236
00:09:59,279 --> 00:10:00,959
and if they match

237
00:10:00,959 --> 00:10:03,519
then then this is not an attack this is

238
00:10:03,519 --> 00:10:07,120
a real request because the attacker

239
00:10:07,120 --> 00:10:09,519
the the attacker who's making a request

240
00:10:09,519 --> 00:10:11,519
from a different website

241
00:10:11,519 --> 00:10:13,920
they have no idea what this token is

242
00:10:13,920 --> 00:10:17,120
going to be when you log in tomorrow so

243
00:10:17,120 --> 00:10:20,560
they can't predict what that token value

244
00:10:20,560 --> 00:10:21,839
looks like

245
00:10:21,839 --> 00:10:25,600
you should only need to do this

246
00:10:25,600 --> 00:10:28,640
when method is post right because in

247
00:10:28,640 --> 00:10:29,680
theory

248
00:10:29,680 --> 00:10:33,279
your get requests should not run

249
00:10:33,279 --> 00:10:34,880
transactions

250
00:10:34,880 --> 00:10:36,720
your get request

251
00:10:36,720 --> 00:10:38,720
should be item potent and null and

252
00:10:38,720 --> 00:10:41,279
potentially no side effects and it

253
00:10:41,279 --> 00:10:42,880
should have the same every request

254
00:10:42,880 --> 00:10:45,200
should have the same effect so it's just

255
00:10:45,200 --> 00:10:47,040
about reading

256
00:10:47,040 --> 00:10:48,000
data

257
00:10:48,000 --> 00:10:51,680
many of our frameworks do not protect

258
00:10:51,680 --> 00:10:55,040
get requests from sea surf protection

259
00:10:55,040 --> 00:10:57,600
because your get requests

260
00:10:57,600 --> 00:11:00,399
should not cause any harm right your get

261
00:11:00,399 --> 00:11:03,360
request to just read data a get request

262
00:11:03,360 --> 00:11:05,760
should not run a transaction so that's

263
00:11:05,760 --> 00:11:08,079
the main defense synchronizer token the

264
00:11:08,079 --> 00:11:10,480
second defense is double cookie submit

265
00:11:10,480 --> 00:11:11,680
defense

266
00:11:11,680 --> 00:11:14,959
now this is important when you have a

267
00:11:14,959 --> 00:11:16,880
stateless

268
00:11:16,880 --> 00:11:21,040
api a stateless web service that still

269
00:11:21,040 --> 00:11:23,839
uses a browser the way this defense

270
00:11:23,839 --> 00:11:24,959
works is

271
00:11:24,959 --> 00:11:28,399
when someone hits submit on a javascript

272
00:11:28,399 --> 00:11:30,160
client this is like

273
00:11:30,160 --> 00:11:33,120
right this is like react or this is like

274
00:11:33,120 --> 00:11:34,160
view

275
00:11:34,160 --> 00:11:36,079
right don't use angular as garbage but i

276
00:11:36,079 --> 00:11:38,160
use react and view it's what it's my

277
00:11:38,160 --> 00:11:41,920
preference and so when you hit submit on

278
00:11:41,920 --> 00:11:44,880
this it's going to use javascript to

279
00:11:44,880 --> 00:11:47,680
create a cookie with an anti-sea surf

280
00:11:47,680 --> 00:11:50,240
token in it right and then that same

281
00:11:50,240 --> 00:11:52,959
value is added to the request right

282
00:11:52,959 --> 00:11:53,839
there

283
00:11:53,839 --> 00:11:56,639
and so the way this works is the way

284
00:11:56,639 --> 00:12:00,000
this works is there's no way the evil

285
00:12:00,000 --> 00:12:02,639
domain can read your cookie on your

286
00:12:02,639 --> 00:12:04,320
website remember

287
00:12:04,320 --> 00:12:06,399
cookies are are

288
00:12:06,399 --> 00:12:09,760
set up for one domain only and if this

289
00:12:09,760 --> 00:12:13,360
defense requires the client to read to

290
00:12:13,360 --> 00:12:15,760
make a cookie in javascript

291
00:12:15,760 --> 00:12:18,959
and put that same value in the request

292
00:12:18,959 --> 00:12:21,360
there's no way the attacker on an evil

293
00:12:21,360 --> 00:12:24,399
website can mess with your cookies

294
00:12:24,399 --> 00:12:27,040
so this is why this defense works so

295
00:12:27,040 --> 00:12:30,800
well we use cookie isolation and again

296
00:12:30,800 --> 00:12:32,959
with sync with this with the double

297
00:12:32,959 --> 00:12:35,040
cookie submit defense

298
00:12:35,040 --> 00:12:38,079
we're gonna in javascript create a

299
00:12:38,079 --> 00:12:40,079
cookie on the fly

300
00:12:40,079 --> 00:12:42,240
and put that same value in the request

301
00:12:42,240 --> 00:12:44,800
all the server does the server just

302
00:12:44,800 --> 00:12:47,360
checks if the value is the same in the

303
00:12:47,360 --> 00:12:48,560
request

304
00:12:48,560 --> 00:12:50,320
and then the cookie

305
00:12:50,320 --> 00:12:52,079
now there's some other defenses that we

306
00:12:52,079 --> 00:12:55,120
care about here right we also like uh

307
00:12:55,120 --> 00:12:56,560
what do we like here

308
00:12:56,560 --> 00:12:58,160
we also like

309
00:12:58,160 --> 00:13:01,279
just forcing a user to log in

310
00:13:01,279 --> 00:13:04,320
for example if i was going to

311
00:13:04,320 --> 00:13:07,040
uh do a financial transaction like in a

312
00:13:07,040 --> 00:13:09,760
bank transfer money i'd make the user

313
00:13:09,760 --> 00:13:11,600
log in again

314
00:13:11,600 --> 00:13:14,720
before before i complete the transaction

315
00:13:14,720 --> 00:13:17,200
it does impact the user experience but

316
00:13:17,200 --> 00:13:19,440
it's very very good security

317
00:13:19,440 --> 00:13:21,920
other defenses that we care about

318
00:13:21,920 --> 00:13:24,079
is the same site cookie right when you

319
00:13:24,079 --> 00:13:25,600
have a cook key

320
00:13:25,600 --> 00:13:27,279
there's a lot of different things you

321
00:13:27,279 --> 00:13:30,240
can do here in terms of values but it's

322
00:13:30,240 --> 00:13:33,279
this one value right here the same site

323
00:13:33,279 --> 00:13:36,160
cookie this is a cookie flag it's either

324
00:13:36,160 --> 00:13:38,240
strict or lacks

325
00:13:38,240 --> 00:13:40,800
this will limit a cookie

326
00:13:40,800 --> 00:13:43,199
from leaving the browser

327
00:13:43,199 --> 00:13:45,680
unless the current page

328
00:13:45,680 --> 00:13:48,639
and the server are the same

329
00:13:48,639 --> 00:13:50,560
registrable domain

330
00:13:50,560 --> 00:13:53,360
so this is about a rule will the cookie

331
00:13:53,360 --> 00:13:55,839
leave the browser whenever the cookie is

332
00:13:55,839 --> 00:13:58,160
about to whatever a request is made from

333
00:13:58,160 --> 00:13:59,760
the browser

334
00:13:59,760 --> 00:14:00,839
we're gonna

335
00:14:00,839 --> 00:14:04,639
compare we're gonna compare uh what page

336
00:14:04,639 --> 00:14:06,959
is the browser and what page is the

337
00:14:06,959 --> 00:14:10,320
server and that need they both need to

338
00:14:10,320 --> 00:14:12,720
match the domain of the cookie

339
00:14:12,720 --> 00:14:15,360
or the cookie is not gonna leave the

340
00:14:15,360 --> 00:14:16,399
browser

341
00:14:16,399 --> 00:14:18,160
remember the attack

342
00:14:18,160 --> 00:14:21,519
it's hosted on an evil website

343
00:14:21,519 --> 00:14:24,639
so the site is evil and the server is

344
00:14:24,639 --> 00:14:27,519
webmail they're not the same site so the

345
00:14:27,519 --> 00:14:31,199
request will not be sent

346
00:14:31,199 --> 00:14:34,639
uh a few and that's the same site cookie

347
00:14:34,639 --> 00:14:36,560
defense right there

348
00:14:36,560 --> 00:14:39,360
yeah and this is default as lacks in the

349
00:14:39,360 --> 00:14:43,440
browser if you do not set the same site

350
00:14:43,440 --> 00:14:46,560
value yourself the browser will do it

351
00:14:46,560 --> 00:14:49,600
for you and make your cookie same site

352
00:14:49,600 --> 00:14:51,120
lacks

353
00:14:51,120 --> 00:14:53,040
there's two different kinds of same site

354
00:14:53,040 --> 00:14:54,959
cookie they're strict and lacks right

355
00:14:54,959 --> 00:14:56,720
right there strict and lacks

356
00:14:56,720 --> 00:14:59,440
if your cookie is strict

357
00:14:59,440 --> 00:15:01,680
then the request needs to start from

358
00:15:01,680 --> 00:15:04,720
inside of a web page if your cookie is

359
00:15:04,720 --> 00:15:06,000
lacks

360
00:15:06,000 --> 00:15:08,639
then the link can start in text or

361
00:15:08,639 --> 00:15:11,440
similar so i digress the same site

362
00:15:11,440 --> 00:15:13,920
cookie does a good job in stopping

363
00:15:13,920 --> 00:15:16,959
request forgery a few notes

364
00:15:16,959 --> 00:15:18,000
is that

365
00:15:18,000 --> 00:15:21,199
uh same site cookies are not gonna work

366
00:15:21,199 --> 00:15:23,839
for non-cookie based session management

367
00:15:23,839 --> 00:15:27,120
like for example http basic and digest

368
00:15:27,120 --> 00:15:28,800
if that's a problem

369
00:15:28,800 --> 00:15:30,800
a cookie's not going to help you

370
00:15:30,800 --> 00:15:33,040
network-based session management while

371
00:15:33,040 --> 00:15:34,000
rare

372
00:15:34,000 --> 00:15:35,759
that's not gonna we're not gonna be able

373
00:15:35,759 --> 00:15:37,920
to fix that problem if you have a

374
00:15:37,920 --> 00:15:40,639
sub-domain controlled by an adversary or

375
00:15:40,639 --> 00:15:43,440
a customer they can use c surf to attack

376
00:15:43,440 --> 00:15:45,759
the top level domain and not all

377
00:15:45,759 --> 00:15:48,959
browsers support same site so same site

378
00:15:48,959 --> 00:15:51,680
is not perfect remember what i'm

379
00:15:51,680 --> 00:15:53,279
recommending is

380
00:15:53,279 --> 00:15:56,480
is you use synchronizer token or double

381
00:15:56,480 --> 00:15:59,519
submit and these become optional right

382
00:15:59,519 --> 00:16:01,920
same site cookie is not enough of a

383
00:16:01,920 --> 00:16:04,240
defense by itself so let's put this

384
00:16:04,240 --> 00:16:05,759
let's put this all together what do we

385
00:16:05,759 --> 00:16:08,000
got here right the other thing that we

386
00:16:08,000 --> 00:16:10,320
can look at is

387
00:16:10,320 --> 00:16:12,800
we can also control uh

388
00:16:12,800 --> 00:16:15,279
no that's good that's good

389
00:16:15,279 --> 00:16:17,040
a few last notes

390
00:16:17,040 --> 00:16:19,600
when we come to xss

391
00:16:19,600 --> 00:16:24,000
any time i inject javascript into your

392
00:16:24,000 --> 00:16:25,199
website

393
00:16:25,199 --> 00:16:28,160
request forgery defense is all useless

394
00:16:28,160 --> 00:16:30,800
right a single flaw

395
00:16:30,800 --> 00:16:35,440
where i inject javascript into your site

396
00:16:35,440 --> 00:16:36,880
will let me

397
00:16:36,880 --> 00:16:39,519
undermine any any defense to stop

398
00:16:39,519 --> 00:16:41,680
request forgery and this happened to

399
00:16:41,680 --> 00:16:44,399
twitter a long time ago this was the

400
00:16:44,399 --> 00:16:46,880
attack the attack is right here it's all

401
00:16:46,880 --> 00:16:47,759
of this

402
00:16:47,759 --> 00:16:49,759
and this is how they launched the attack

403
00:16:49,759 --> 00:16:53,199
in a tweet they tweeted this out it got

404
00:16:53,199 --> 00:16:55,120
the the script was allowed to run from

405
00:16:55,120 --> 00:16:56,240
the attack

406
00:16:56,240 --> 00:16:58,560
they stole the copy of the token via

407
00:16:58,560 --> 00:17:01,360
javascript and re and there's the token

408
00:17:01,360 --> 00:17:04,000
right there the the up off token and

409
00:17:04,000 --> 00:17:06,559
there they are reusing that off token

410
00:17:06,559 --> 00:17:09,280
and reusing the auth token so they and

411
00:17:09,280 --> 00:17:11,359
they tweet it they force the user to

412
00:17:11,359 --> 00:17:14,079
tweet about goats so let's look at all

413
00:17:14,079 --> 00:17:14,880
this

414
00:17:14,880 --> 00:17:17,199
so if your framework supports c surf

415
00:17:17,199 --> 00:17:19,760
protection go ahead and use it you

416
00:17:19,760 --> 00:17:22,319
should for a stateful web app use

417
00:17:22,319 --> 00:17:26,079
synchronizer token for a stateless api

418
00:17:26,079 --> 00:17:28,640
use double submit cookies and then use

419
00:17:28,640 --> 00:17:30,799
do one of these defenses either do same

420
00:17:30,799 --> 00:17:33,000
site cookie

421
00:17:33,000 --> 00:17:35,200
re-authentication you can verify the

422
00:17:35,200 --> 00:17:38,080
headers match your domain and similar

423
00:17:38,080 --> 00:17:41,200
and remember one cross-site scripting

424
00:17:41,200 --> 00:17:44,880
will defeat all sea surf defense so one

425
00:17:44,880 --> 00:17:47,280
javascript injection and this defense is

426
00:17:47,280 --> 00:17:48,799
useless also

427
00:17:48,799 --> 00:17:50,960
don't use get for state changing

428
00:17:50,960 --> 00:17:52,960
operations you shouldn't need to protect

429
00:17:52,960 --> 00:17:55,679
to get this is the summary for cross

430
00:17:55,679 --> 00:17:58,400
site request forgery and you should read

431
00:17:58,400 --> 00:18:00,720
that guide for more information

432
00:18:00,720 --> 00:18:04,080
the other kind of forgery is server side

433
00:18:04,080 --> 00:18:06,320
request forgery this won't take that

434
00:18:06,320 --> 00:18:09,600
long to talk about server side recorder

435
00:18:09,600 --> 00:18:13,120
it happened last in 2019

436
00:18:13,120 --> 00:18:16,960
against capital one but we also saw this

437
00:18:16,960 --> 00:18:19,120
uh we also saw this

438
00:18:19,120 --> 00:18:20,240
um

439
00:18:20,240 --> 00:18:24,559
at get lab back in 2000 in early 2021

440
00:18:24,559 --> 00:18:27,200
gitlab had a major uh

441
00:18:27,200 --> 00:18:30,320
server side request forgery so did

442
00:18:30,320 --> 00:18:31,679
microsoft

443
00:18:31,679 --> 00:18:35,919
exchange have a big c serve so this is a

444
00:18:35,919 --> 00:18:39,120
server side request forgery this is a

445
00:18:39,120 --> 00:18:42,480
big problem the way this works is

446
00:18:42,480 --> 00:18:46,000
you need to find a spot a variable like

447
00:18:46,000 --> 00:18:48,400
this url in the bank

448
00:18:48,400 --> 00:18:51,280
that does something called a server side

449
00:18:51,280 --> 00:18:54,000
include right what's a server side

450
00:18:54,000 --> 00:18:56,320
include a server side include is when

451
00:18:56,320 --> 00:18:59,360
you have this parameter url

452
00:18:59,360 --> 00:19:01,440
on the server

453
00:19:01,440 --> 00:19:05,200
it's gonna load that url and embed it in

454
00:19:05,200 --> 00:19:08,120
the web page this comes up more often in

455
00:19:08,120 --> 00:19:10,000
microservices but in general you

456
00:19:10,000 --> 00:19:12,480
shouldn't do this but this happened to

457
00:19:12,480 --> 00:19:15,520
an amazon web service for capital one

458
00:19:15,520 --> 00:19:18,720
this url was meant to be like for news

459
00:19:18,720 --> 00:19:21,280
or something innocent but the attacker

460
00:19:21,280 --> 00:19:23,600
what did the attacker do here the

461
00:19:23,600 --> 00:19:25,440
attacker

462
00:19:25,440 --> 00:19:28,559
they change the url in a capital one

463
00:19:28,559 --> 00:19:32,400
website to an amazon url right this is

464
00:19:32,400 --> 00:19:34,880
part of amazon web service

465
00:19:34,880 --> 00:19:37,520
and it stole the credential file of the

466
00:19:37,520 --> 00:19:40,320
web application firewall it's kind of

467
00:19:40,320 --> 00:19:42,160
ironic isn't it

468
00:19:42,160 --> 00:19:45,280
so i make a request to the server

469
00:19:45,280 --> 00:19:47,679
i change a parameter

470
00:19:47,679 --> 00:19:50,320
and that parameter is something that the

471
00:19:50,320 --> 00:19:53,760
server axon so this is how you find this

472
00:19:53,760 --> 00:19:56,960
vulnerability find a parameter

473
00:19:56,960 --> 00:19:59,760
that the server is going to use to to

474
00:19:59,760 --> 00:20:02,559
make a request to look up data and then

475
00:20:02,559 --> 00:20:06,000
change that url to be something in

476
00:20:06,000 --> 00:20:09,120
infrastructure or another request that

477
00:20:09,120 --> 00:20:10,960
that you want to forge again have the

478
00:20:10,960 --> 00:20:13,840
server forge and now you have

479
00:20:13,840 --> 00:20:16,720
server side request forgery what

480
00:20:16,720 --> 00:20:19,360
happened here was the attacker changed

481
00:20:19,360 --> 00:20:22,080
capital one's url this is the capital

482
00:20:22,080 --> 00:20:24,880
one breach is what we're talking about

483
00:20:24,880 --> 00:20:28,000
the attacker changed the url to an

484
00:20:28,000 --> 00:20:30,559
amazon infrastructure reference and that

485
00:20:30,559 --> 00:20:32,240
gave the attacker

486
00:20:32,240 --> 00:20:36,240
access to capital one's amazon account

487
00:20:36,240 --> 00:20:38,400
the attacker logged into amazon with

488
00:20:38,400 --> 00:20:40,000
this account

489
00:20:40,000 --> 00:20:42,240
they went to their s3 bucket and they

490
00:20:42,240 --> 00:20:45,120
stole a hundred million

491
00:20:45,120 --> 00:20:47,520
credit card applications

492
00:20:47,520 --> 00:20:50,720
the way this works is again the request

493
00:20:50,720 --> 00:20:54,080
here's the basic uh you know old school

494
00:20:54,080 --> 00:20:56,000
api architecture

495
00:20:56,000 --> 00:20:59,600
the request comes into the public api

496
00:20:59,600 --> 00:21:01,520
that per the the parameter is

497
00:21:01,520 --> 00:21:05,760
manipulated and now the path of how b

498
00:21:05,760 --> 00:21:07,280
happens b

499
00:21:07,280 --> 00:21:09,520
is the public api

500
00:21:09,520 --> 00:21:13,200
making a request to an internal api and

501
00:21:13,200 --> 00:21:16,400
we can use basic path traversal

502
00:21:16,400 --> 00:21:19,919
to manipulate that url and change what

503
00:21:19,919 --> 00:21:22,000
the server is going to do

504
00:21:22,000 --> 00:21:24,400
so here's all so here i'm expecting that

505
00:21:24,400 --> 00:21:26,320
parameter 23.

506
00:21:26,320 --> 00:21:28,799
there's the parameter variable and i'm

507
00:21:28,799 --> 00:21:31,039
going to add that parameter var i'm

508
00:21:31,039 --> 00:21:33,360
going to add that to the url

509
00:21:33,360 --> 00:21:36,240
and i can just do path traversal and

510
00:21:36,240 --> 00:21:38,720
that's the final hit that the server

511
00:21:38,720 --> 00:21:39,679
does

512
00:21:39,679 --> 00:21:42,159
and i'm now able to change

513
00:21:42,159 --> 00:21:43,520
the path

514
00:21:43,520 --> 00:21:46,400
of how the server makes rick request

515
00:21:46,400 --> 00:21:48,400
because of the feature that they built

516
00:21:48,400 --> 00:21:49,760
in securely

517
00:21:49,760 --> 00:21:53,120
so if you're gonna build a url like this

518
00:21:53,120 --> 00:21:55,679
if you're gonna build a url where some

519
00:21:55,679 --> 00:21:58,080
of that data is a variable from a

520
00:21:58,080 --> 00:22:00,720
different source then you should build

521
00:22:00,720 --> 00:22:03,120
your urls like this

522
00:22:03,120 --> 00:22:05,120
you should be i'm almost done folks you

523
00:22:05,120 --> 00:22:07,200
should build your urls

524
00:22:07,200 --> 00:22:09,360
so that parameter

525
00:22:09,360 --> 00:22:12,720
is encoded for the url these are you

526
00:22:12,720 --> 00:22:15,600
encode for url path because i'm putting

527
00:22:15,600 --> 00:22:18,159
it on a path here uri and this is in

528
00:22:18,159 --> 00:22:21,120
code for uri parameter when putting that

529
00:22:21,120 --> 00:22:23,039
parameter um they're putting that

530
00:22:23,039 --> 00:22:25,919
variable on a parameter of a url now no

531
00:22:25,919 --> 00:22:28,159
matter what attack

532
00:22:28,159 --> 00:22:30,320
gets to that variable

533
00:22:30,320 --> 00:22:32,720
we have encoded it so the path of the

534
00:22:32,720 --> 00:22:35,919
url can't change here's my lab and by

535
00:22:35,919 --> 00:22:38,000
the way here here are some some more

536
00:22:38,000 --> 00:22:40,240
informations about server side request

537
00:22:40,240 --> 00:22:42,720
forgery you should go look at if you

538
00:22:42,720 --> 00:22:44,159
haven't already

539
00:22:44,159 --> 00:22:46,640
go look at orange to size talk right

540
00:22:46,640 --> 00:22:48,640
here one of the best talks ever on

541
00:22:48,640 --> 00:22:51,120
server side request forgery and here's

542
00:22:51,120 --> 00:22:52,640
my last slide

543
00:22:52,640 --> 00:22:55,280
in order to have good server side

544
00:22:55,280 --> 00:22:57,200
requests forward to reach defense we

545
00:22:57,200 --> 00:22:59,760
want great authentication on our

546
00:22:59,760 --> 00:23:03,039
internal internet api's we want great

547
00:23:03,039 --> 00:23:05,200
access control on our emperor and our

548
00:23:05,200 --> 00:23:08,720
apis and if you have urls as a parameter

549
00:23:08,720 --> 00:23:11,520
you got to validate that url

550
00:23:11,520 --> 00:23:15,039
go back to what happened to capital one

551
00:23:15,039 --> 00:23:17,280
for a second go back to this how could

552
00:23:17,280 --> 00:23:19,039
they have fixed this

553
00:23:19,039 --> 00:23:22,640
this url if that you are just said

554
00:23:22,640 --> 00:23:27,360
if the url starts with example.com

555
00:23:27,360 --> 00:23:29,280
then that problem would have gone away

556
00:23:29,280 --> 00:23:31,600
the answer would have been validate the

557
00:23:31,600 --> 00:23:32,960
url

558
00:23:32,960 --> 00:23:36,640
to make sure it's only a url that the

559
00:23:36,640 --> 00:23:38,400
server should act on

560
00:23:38,400 --> 00:23:39,440
so

561
00:23:39,440 --> 00:23:43,360
when a url is a parameter do strong url

562
00:23:43,360 --> 00:23:47,679
validation absolutely avoid taking a url

563
00:23:47,679 --> 00:23:50,799
as a full parameter that the server acts

564
00:23:50,799 --> 00:23:53,120
on if you can get away with it

565
00:23:53,120 --> 00:23:56,799
and build your url safely using url

566
00:23:56,799 --> 00:23:59,360
encoding also when you have a web

567
00:23:59,360 --> 00:24:02,400
service you can use network controls to

568
00:24:02,400 --> 00:24:04,159
limit what it's allowed to do and do

569
00:24:04,159 --> 00:24:06,159
micro segmentation

570
00:24:06,159 --> 00:24:08,480
these help a lot as well again using

571
00:24:08,480 --> 00:24:11,679
putting network controls around services

572
00:24:11,679 --> 00:24:13,919
limit what requests they can make it's

573
00:24:13,919 --> 00:24:16,880
easy to do that's an effective strategy

574
00:24:16,880 --> 00:24:19,679
as well and guess what i'm done

575
00:24:19,679 --> 00:24:21,600
it has been a pleasure

576
00:24:21,600 --> 00:24:23,360
to give a talk to you this morning i'm

577
00:24:23,360 --> 00:24:25,279
awake i'm awake now

578
00:24:25,279 --> 00:24:27,360
i'm awake does anybody have any

579
00:24:27,360 --> 00:24:28,960
questions before we finish up for today

580
00:24:28,960 --> 00:24:30,559
again it's been my great pleasure to be

581
00:24:30,559 --> 00:24:31,360
here

582
00:24:31,360 --> 00:24:32,960
i'm gonna go back to the beach in a few

583
00:24:32,960 --> 00:24:34,559
minutes

584
00:24:34,559 --> 00:24:37,440
but that's it for today

585
00:24:37,440 --> 00:24:41,880
who's with me is anyone there

