1
00:00:08,880 --> 00:00:12,080
hi hello good afternoon

2
00:00:12,080 --> 00:00:15,040
my name is arthur korinsky and i'm cloud

3
00:00:15,040 --> 00:00:16,880
architect

4
00:00:16,880 --> 00:00:19,760
here in google cloud poland

5
00:00:19,760 --> 00:00:21,119
uh

6
00:00:21,119 --> 00:00:23,279
i'm not

7
00:00:23,279 --> 00:00:26,480
it's my first time on confidence so i'm

8
00:00:26,480 --> 00:00:28,240
the challenger and i'm pretending to be

9
00:00:28,240 --> 00:00:29,760
one of the

10
00:00:29,760 --> 00:00:31,039
confidence

11
00:00:31,039 --> 00:00:32,960
legend speakers

12
00:00:32,960 --> 00:00:35,680
i grew up from the development

13
00:00:35,680 --> 00:00:39,440
and i'm not a seasoned security guy

14
00:00:39,440 --> 00:00:41,520
but always the security was close to my

15
00:00:41,520 --> 00:00:43,040
heart and

16
00:00:43,040 --> 00:00:46,399
development is uh almost all of my heart

17
00:00:46,399 --> 00:00:48,800
so i think it's it's it's uh really

18
00:00:48,800 --> 00:00:52,239
important to connect these two towards

19
00:00:52,239 --> 00:00:55,360
i'm not going to say a lot why

20
00:00:55,360 --> 00:00:59,280
we should care about devsecops because

21
00:00:59,280 --> 00:01:00,559
my colleagues

22
00:01:00,559 --> 00:01:02,719
did a great

23
00:01:02,719 --> 00:01:05,360
introduction but i would like to quote

24
00:01:05,360 --> 00:01:07,600
elizabeth austin

25
00:01:07,600 --> 00:01:09,760
who really said what is the state of the

26
00:01:09,760 --> 00:01:13,920
security and current development process

27
00:01:13,920 --> 00:01:16,159
she says and i agree that

28
00:01:16,159 --> 00:01:18,400
we did enormous progress in the

29
00:01:18,400 --> 00:01:20,159
development we introduced the agile

30
00:01:20,159 --> 00:01:22,320
methodologies we

31
00:01:22,320 --> 00:01:24,159
introduced devops there my colleague

32
00:01:24,159 --> 00:01:26,960
colleagues said that devsecops is just a

33
00:01:26,960 --> 00:01:29,520
hype word and devops also was a few

34
00:01:29,520 --> 00:01:31,119
years ago

35
00:01:31,119 --> 00:01:33,680
everyone was talking about devops and

36
00:01:33,680 --> 00:01:35,840
no one really had idea what the devops

37
00:01:35,840 --> 00:01:38,320
really is and now i think we are in a

38
00:01:38,320 --> 00:01:41,280
very different uh world so we have a

39
00:01:41,280 --> 00:01:43,840
devops we have a methodologies we really

40
00:01:43,840 --> 00:01:46,880
speed with the development but

41
00:01:46,880 --> 00:01:49,360
security and minerality

42
00:01:49,360 --> 00:01:51,439
doesn't keep up with this

43
00:01:51,439 --> 00:01:54,000
with this speed and

44
00:01:54,000 --> 00:01:56,000
it would be very naive to think that the

45
00:01:56,000 --> 00:01:58,320
development will slow down just too much

46
00:01:58,320 --> 00:02:00,159
the security speed

47
00:02:00,159 --> 00:02:01,759
what really need to do

48
00:02:01,759 --> 00:02:02,799
is to

49
00:02:02,799 --> 00:02:06,840
speed up security in a secure

50
00:02:06,840 --> 00:02:09,038
way so

51
00:02:09,038 --> 00:02:12,000
how we should make the teams to work

52
00:02:12,000 --> 00:02:13,360
together

53
00:02:13,360 --> 00:02:15,120
and

54
00:02:15,120 --> 00:02:18,640
it's really difficult because uh if you

55
00:02:18,640 --> 00:02:20,840
look into the

56
00:02:20,840 --> 00:02:23,760
field and we look into some statistics

57
00:02:23,760 --> 00:02:25,760
it seems that we are really over

58
00:02:25,760 --> 00:02:28,720
numbered by the developers depending on

59
00:02:28,720 --> 00:02:30,239
the

60
00:02:30,239 --> 00:02:31,440
source

61
00:02:31,440 --> 00:02:34,319
we look into we see different numbers

62
00:02:34,319 --> 00:02:38,080
from 500 to 1 to 100 to 1 and this 100

63
00:02:38,080 --> 00:02:39,920
to 1 is

64
00:02:39,920 --> 00:02:41,280
i think the

65
00:02:41,280 --> 00:02:43,599
most often found

66
00:02:43,599 --> 00:02:46,239
number so if you want to do per

67
00:02:46,239 --> 00:02:48,160
programming we should have

68
00:02:48,160 --> 00:02:51,840
two hands against against 200 hands to

69
00:02:51,840 --> 00:02:54,560
really uh support the

70
00:02:54,560 --> 00:02:56,720
development at current

71
00:02:56,720 --> 00:02:59,200
stage

72
00:02:59,360 --> 00:03:02,000
also i think this is the

73
00:03:02,000 --> 00:03:04,239
i would risk to say this is the most

74
00:03:04,239 --> 00:03:06,000
important sentences in the history of

75
00:03:06,000 --> 00:03:07,840
the software development it's a joy

76
00:03:07,840 --> 00:03:09,760
manifesto

77
00:03:09,760 --> 00:03:13,040
and let's try to look into this from the

78
00:03:13,040 --> 00:03:15,040
perspective of the

79
00:03:15,040 --> 00:03:18,080
security operations i think it was also

80
00:03:18,080 --> 00:03:20,800
mentioned by my colleagues from pmi

81
00:03:20,800 --> 00:03:22,239
where is this

82
00:03:22,239 --> 00:03:24,480
difference between the perception of the

83
00:03:24,480 --> 00:03:27,120
of the world yes how does it sound from

84
00:03:27,120 --> 00:03:28,879
these security people

85
00:03:28,879 --> 00:03:30,799
working software over comprehensive

86
00:03:30,799 --> 00:03:32,319
documentation

87
00:03:32,319 --> 00:03:34,400
how do you feel

88
00:03:34,400 --> 00:03:36,400
when you hear responding to change over

89
00:03:36,400 --> 00:03:38,159
following the plan

90
00:03:38,159 --> 00:03:40,400
i think it's a little bit

91
00:03:40,400 --> 00:03:43,120
scary thing if you think from the

92
00:03:43,120 --> 00:03:45,040
security point of view but from the

93
00:03:45,040 --> 00:03:47,360
perspective of development it's a let's

94
00:03:47,360 --> 00:03:48,400
say

95
00:03:48,400 --> 00:03:51,519
everyday situation

96
00:03:53,200 --> 00:03:55,439
i have to

97
00:03:55,439 --> 00:03:58,319
i should have start with agenda but i

98
00:03:58,319 --> 00:04:00,879
will do it right now i will have two

99
00:04:00,879 --> 00:04:04,480
parts in my presentation first part

100
00:04:04,480 --> 00:04:06,879
will be a little bit wider and

101
00:04:06,879 --> 00:04:09,200
theoretical let's say about the

102
00:04:09,200 --> 00:04:11,519
devops i feel i think it will be quite

103
00:04:11,519 --> 00:04:14,879
complementary to what the practical side

104
00:04:14,879 --> 00:04:17,358
of the of my pmi colleagues

105
00:04:17,358 --> 00:04:19,040
showed you

106
00:04:19,040 --> 00:04:21,839
the second part i will dive a little bit

107
00:04:21,839 --> 00:04:24,479
deeper to show some tools and focus

108
00:04:24,479 --> 00:04:26,880
especially on protecting the software

109
00:04:26,880 --> 00:04:29,199
supply chain so please if you are only

110
00:04:29,199 --> 00:04:31,360
interested in the second part don't give

111
00:04:31,360 --> 00:04:32,320
up

112
00:04:32,320 --> 00:04:34,479
during the the first part there will be

113
00:04:34,479 --> 00:04:37,520
also a console and cloud console

114
00:04:37,520 --> 00:04:38,800
in a minutes

115
00:04:38,800 --> 00:04:41,199
okay but going back to the to the

116
00:04:41,199 --> 00:04:43,360
devsecops and there are

117
00:04:43,360 --> 00:04:46,960
really multiple aspects to to address uh

118
00:04:46,960 --> 00:04:50,080
in this area education also mentioned

119
00:04:50,080 --> 00:04:52,880
today culture and organization the same

120
00:04:52,880 --> 00:04:54,960
thing like with the devops yes we had to

121
00:04:54,960 --> 00:04:57,440
change culture to close the gap between

122
00:04:57,440 --> 00:04:59,360
between development and operation the

123
00:04:59,360 --> 00:05:01,360
same

124
00:05:01,360 --> 00:05:02,639
thing here

125
00:05:02,639 --> 00:05:04,560
we have to introduce concept of secure

126
00:05:04,560 --> 00:05:06,639
by design which is not that obvious to

127
00:05:06,639 --> 00:05:08,400
the to the people creating software

128
00:05:08,400 --> 00:05:11,120
nowadays we have to take care about the

129
00:05:11,120 --> 00:05:13,759
technical aspects like pipeline security

130
00:05:13,759 --> 00:05:16,639
random security visibility take care

131
00:05:16,639 --> 00:05:18,880
about automation which is also source of

132
00:05:18,880 --> 00:05:20,240
really

133
00:05:20,240 --> 00:05:21,680
really great risk

134
00:05:21,680 --> 00:05:22,720
nowadays

135
00:05:22,720 --> 00:05:26,320
and also the tool to limit risk in many

136
00:05:26,320 --> 00:05:29,120
cases we need to take care about the

137
00:05:29,120 --> 00:05:30,960
transparency of what happens in our

138
00:05:30,960 --> 00:05:32,960
environment especially now when it's

139
00:05:32,960 --> 00:05:36,160
based on a containerized workload so a

140
00:05:36,160 --> 00:05:37,840
lot of aspects not going to address

141
00:05:37,840 --> 00:05:39,919
every of them because it will be boring

142
00:05:39,919 --> 00:05:40,880
and long

143
00:05:40,880 --> 00:05:43,280
but i would choose three of them which

144
00:05:43,280 --> 00:05:44,240
are

145
00:05:44,240 --> 00:05:47,199
in my opinion very important first of

146
00:05:47,199 --> 00:05:48,000
all

147
00:05:48,000 --> 00:05:50,960
organizational and cultural shift

148
00:05:50,960 --> 00:05:52,880
first of all we are

149
00:05:52,880 --> 00:05:55,680
outnumbered we just cannot

150
00:05:55,680 --> 00:05:56,639
match

151
00:05:56,639 --> 00:05:59,759
with number of developers uh in number

152
00:05:59,759 --> 00:06:02,240
of security engineers so what we really

153
00:06:02,240 --> 00:06:04,560
need to do we need to inject like a

154
00:06:04,560 --> 00:06:06,880
dependency injection in a in a software

155
00:06:06,880 --> 00:06:08,720
development we need to inject the

156
00:06:08,720 --> 00:06:11,440
security into the development teams and

157
00:06:11,440 --> 00:06:15,120
in a field and in a what i see in uh

158
00:06:15,120 --> 00:06:16,800
in a practice

159
00:06:16,800 --> 00:06:18,080
there are

160
00:06:18,080 --> 00:06:20,080
security champions being established

161
00:06:20,080 --> 00:06:22,080
within the devops team from internal the

162
00:06:22,080 --> 00:06:24,319
teams but these are not guys that are

163
00:06:24,319 --> 00:06:26,240
forced to be the security champions

164
00:06:26,240 --> 00:06:28,240
there are people like myself the people

165
00:06:28,240 --> 00:06:30,160
that were really a little bit more

166
00:06:30,160 --> 00:06:32,880
sensitive around security than other

167
00:06:32,880 --> 00:06:34,400
parts of the

168
00:06:34,400 --> 00:06:35,440
team

169
00:06:35,440 --> 00:06:37,199
it's quite obvious

170
00:06:37,199 --> 00:06:39,440
if you think about the devsecops the

171
00:06:39,440 --> 00:06:42,639
sexy the sec is in the middle so there

172
00:06:42,639 --> 00:06:44,319
will be always

173
00:06:44,319 --> 00:06:47,919
a way to bypass this middle part we

174
00:06:47,919 --> 00:06:50,880
cannot as a developers we cannot

175
00:06:50,880 --> 00:06:52,080
bypass

176
00:06:52,080 --> 00:06:55,919
operations it's not possible but

177
00:06:55,919 --> 00:06:57,599
there is a possibility to bypass

178
00:06:57,599 --> 00:07:00,319
security these are other ways

179
00:07:00,319 --> 00:07:03,199
use incidents to educate not blame

180
00:07:03,199 --> 00:07:05,840
especially in case of developers you

181
00:07:05,840 --> 00:07:07,520
cannot make these

182
00:07:07,520 --> 00:07:10,160
champions to be the fully flagged

183
00:07:10,160 --> 00:07:12,160
security engineers in the within the

184
00:07:12,160 --> 00:07:15,280
weeks so be realistic yes you need to do

185
00:07:15,280 --> 00:07:18,400
it agile way iterate improve and give a

186
00:07:18,400 --> 00:07:19,280
time

187
00:07:19,280 --> 00:07:21,120
we have a lot of great tools that

188
00:07:21,120 --> 00:07:23,120
promotes the communication and

189
00:07:23,120 --> 00:07:24,880
information sharing which were

190
00:07:24,880 --> 00:07:26,560
introduced with

191
00:07:26,560 --> 00:07:29,039
with with agile methodologies like

192
00:07:29,039 --> 00:07:31,199
information radiators like stand-up

193
00:07:31,199 --> 00:07:32,800
meetings and so on

194
00:07:32,800 --> 00:07:34,720
why not use the same tools for the for

195
00:07:34,720 --> 00:07:36,560
the security why not put the micro

196
00:07:36,560 --> 00:07:38,880
attacks posters close to the standard

197
00:07:38,880 --> 00:07:41,680
meeting place why not use the security

198
00:07:41,680 --> 00:07:45,039
as a great place for uh to to the great

199
00:07:45,039 --> 00:07:47,360
thing to to discuss use the aging

200
00:07:47,360 --> 00:07:50,000
methodologies for the same sake as

201
00:07:50,000 --> 00:07:52,720
improving your software quality because

202
00:07:52,720 --> 00:07:55,039
introducing security into the software

203
00:07:55,039 --> 00:07:57,120
development is improving software

204
00:07:57,120 --> 00:07:59,440
quality

205
00:07:59,440 --> 00:08:01,520
invest time in a champion invest time on

206
00:08:01,520 --> 00:08:03,840
your security team in champions as my

207
00:08:03,840 --> 00:08:06,000
colleagues said

208
00:08:06,000 --> 00:08:08,319
developers the development team they

209
00:08:08,319 --> 00:08:10,479
must understand they must understand the

210
00:08:10,479 --> 00:08:12,560
reasons so they stop

211
00:08:12,560 --> 00:08:15,360
perceive security

212
00:08:15,360 --> 00:08:17,599
standards and security requirements as

213
00:08:17,599 --> 00:08:19,919
you know just blockers and

214
00:08:19,919 --> 00:08:22,319
things to slow development down and they

215
00:08:22,319 --> 00:08:24,840
understand we are developers

216
00:08:24,840 --> 00:08:27,520
are okay it's a risky but we are

217
00:08:27,520 --> 00:08:30,319
reasonable people we will we will follow

218
00:08:30,319 --> 00:08:31,919
things that we understand and see

219
00:08:31,919 --> 00:08:33,120
reasons for

220
00:08:33,120 --> 00:08:34,719
and this is something that i haven't

221
00:08:34,719 --> 00:08:36,640
heard today

222
00:08:36,640 --> 00:08:40,000
i believe that very key thing in a in a

223
00:08:40,000 --> 00:08:41,760
in a devops is a

224
00:08:41,760 --> 00:08:44,080
introducing development team into the

225
00:08:44,080 --> 00:08:46,080
risk management but

226
00:08:46,080 --> 00:08:48,640
it was said i think in a

227
00:08:48,640 --> 00:08:51,200
devops handbook if you give developer

228
00:08:51,200 --> 00:08:54,000
one line of code to reviewed

229
00:08:54,000 --> 00:08:56,000
she or he will find five problems in

230
00:08:56,000 --> 00:08:58,640
this single line but if you give

231
00:08:58,640 --> 00:09:00,640
thousand lines they will say it looks

232
00:09:00,640 --> 00:09:02,160
good to me

233
00:09:02,160 --> 00:09:04,160
so the same thing with

234
00:09:04,160 --> 00:09:06,839
risk management use the

235
00:09:06,839 --> 00:09:09,760
lightweight methodologies like like like

236
00:09:09,760 --> 00:09:12,640
i i've chosen here mozilla

237
00:09:12,640 --> 00:09:14,320
r a

238
00:09:14,320 --> 00:09:17,120
do you do it lightweight so

239
00:09:17,120 --> 00:09:18,800
you have really available information

240
00:09:18,800 --> 00:09:20,720
from the process and not have a process

241
00:09:20,720 --> 00:09:23,040
that everyone will just try to

242
00:09:23,040 --> 00:09:25,040
complete as fast as possible

243
00:09:25,040 --> 00:09:26,240
very quickly

244
00:09:26,240 --> 00:09:28,320
education

245
00:09:28,320 --> 00:09:30,720
also problem that i think from the

246
00:09:30,720 --> 00:09:33,519
previous presentation on this topic

247
00:09:33,519 --> 00:09:34,839
is very

248
00:09:34,839 --> 00:09:37,760
obvious it's sometimes really surprising

249
00:09:37,760 --> 00:09:40,080
when i am having a discussion what is

250
00:09:40,080 --> 00:09:43,279
the let's say level of understanding of

251
00:09:43,279 --> 00:09:46,480
security and it's not because uh

252
00:09:46,480 --> 00:09:48,080
people don't want to know about the

253
00:09:48,080 --> 00:09:49,760
security i think there is some

254
00:09:49,760 --> 00:09:52,399
educational gap in this in this topic

255
00:09:52,399 --> 00:09:55,839
still but first of all responsibility

256
00:09:55,839 --> 00:09:58,560
we discussed

257
00:09:58,560 --> 00:10:01,279
wolves firewalls

258
00:10:01,279 --> 00:10:03,519
network parameters now

259
00:10:03,519 --> 00:10:05,680
we need to understand that the security

260
00:10:05,680 --> 00:10:08,000
starts with the first line of developed

261
00:10:08,000 --> 00:10:10,800
code it it's not responsibility of some

262
00:10:10,800 --> 00:10:13,920
security guys to put a lot of

263
00:10:13,920 --> 00:10:15,920
magic devices to protect the software

264
00:10:15,920 --> 00:10:18,560
which is really

265
00:10:18,560 --> 00:10:20,000
like a mesh

266
00:10:20,000 --> 00:10:22,480
or a swiss cheese

267
00:10:22,480 --> 00:10:24,720
so it's the first thing if you have this

268
00:10:24,720 --> 00:10:26,480
understanding of responsibility and

269
00:10:26,480 --> 00:10:28,399
acceptance of this responsibility then

270
00:10:28,399 --> 00:10:30,959
you can put sec in your devops process

271
00:10:30,959 --> 00:10:33,519
and of course the basic things like a

272
00:10:33,519 --> 00:10:35,120
wasp

273
00:10:35,120 --> 00:10:37,760
top 10 of course but also we have things

274
00:10:37,760 --> 00:10:40,160
like juice shops web goals when

275
00:10:40,160 --> 00:10:42,240
developers can really quickly learn

276
00:10:42,240 --> 00:10:44,480
about the vulnerabilities and then

277
00:10:44,480 --> 00:10:47,760
understand how to avoid them container

278
00:10:47,760 --> 00:10:50,320
we live in a containerized world it's

279
00:10:50,320 --> 00:10:52,079
really amazing from the perspective of

280
00:10:52,079 --> 00:10:54,240
developer it's so handy it's so nice

281
00:10:54,240 --> 00:10:56,079
that if you start using it you're

282
00:10:56,079 --> 00:11:00,240
addicted but the containers have the

283
00:11:00,240 --> 00:11:03,120
let's say a lot of the uh security

284
00:11:03,120 --> 00:11:06,399
consequences yes and we are really

285
00:11:06,399 --> 00:11:09,200
important to make all the developers to

286
00:11:09,200 --> 00:11:11,920
understand what risks are in the

287
00:11:11,920 --> 00:11:14,560
containers what are container escapes

288
00:11:14,560 --> 00:11:16,640
what are risk in container images and

289
00:11:16,640 --> 00:11:18,800
images sources what is privilege mode

290
00:11:18,800 --> 00:11:21,120
capabilities what you can do with some

291
00:11:21,120 --> 00:11:23,920
popular docker switches it's really

292
00:11:23,920 --> 00:11:25,640
eye-opening and it will

293
00:11:25,640 --> 00:11:26,959
[Music]

294
00:11:26,959 --> 00:11:29,360
force the critical thinking about the

295
00:11:29,360 --> 00:11:31,200
software security it's very important

296
00:11:31,200 --> 00:11:33,839
things and the basic things very often

297
00:11:33,839 --> 00:11:36,399
forgotten like cryptography

298
00:11:36,399 --> 00:11:39,440
yes i agree with my colleagues that we

299
00:11:39,440 --> 00:11:41,519
don't require every single developer to

300
00:11:41,519 --> 00:11:43,920
understand completely the

301
00:11:43,920 --> 00:11:46,160
cryptography but we need them to

302
00:11:46,160 --> 00:11:48,800
understand how to use it and

303
00:11:48,800 --> 00:11:51,040
the most important thing

304
00:11:51,040 --> 00:11:53,519
in most cases they should know that it's

305
00:11:53,519 --> 00:11:56,160
bad idea to implement our own

306
00:11:56,160 --> 00:11:58,240
cryptographic libraries

307
00:11:58,240 --> 00:12:00,480
unless there is a really good reason for

308
00:12:00,480 --> 00:12:02,000
for that

309
00:12:02,000 --> 00:12:04,880
kubernetes security and also the things

310
00:12:04,880 --> 00:12:07,920
like cyber kill chain stride mitre they

311
00:12:07,920 --> 00:12:10,399
are very useful things

312
00:12:10,399 --> 00:12:13,279
very easy to understand and to

313
00:12:13,279 --> 00:12:15,680
start again critically thinking about

314
00:12:15,680 --> 00:12:19,120
the security okay that's uh

315
00:12:19,120 --> 00:12:22,240
that's a theoretical part i just would

316
00:12:22,240 --> 00:12:24,399
want to

317
00:12:24,399 --> 00:12:27,040
put it out that you know it's it's time

318
00:12:27,040 --> 00:12:28,399
when it's not really hyper it's

319
00:12:28,399 --> 00:12:30,399
something that we can really effectively

320
00:12:30,399 --> 00:12:32,560
starting to implement into our

321
00:12:32,560 --> 00:12:34,560
development process

322
00:12:34,560 --> 00:12:35,360
so

323
00:12:35,360 --> 00:12:39,200
let's now dive into protecting pipeline

324
00:12:39,200 --> 00:12:43,120
software supply chain our

325
00:12:43,200 --> 00:12:46,000
pipeline delivery pipeline

326
00:12:46,000 --> 00:12:47,839
is it secure is it something which is

327
00:12:47,839 --> 00:12:50,000
internal and we should not care let's

328
00:12:50,000 --> 00:12:53,120
see but first a very short

329
00:12:53,120 --> 00:12:56,000
quiz just for you to answer just in your

330
00:12:56,000 --> 00:12:59,279
head how much of software is written by

331
00:12:59,279 --> 00:13:02,639
our developers

332
00:13:02,880 --> 00:13:04,720
so the answer is

333
00:13:04,720 --> 00:13:06,320
25

334
00:13:06,320 --> 00:13:08,560
because 75

335
00:13:08,560 --> 00:13:11,120
is in the open source which we use as a

336
00:13:11,120 --> 00:13:13,040
libraries and dependencies for our

337
00:13:13,040 --> 00:13:14,000
software

338
00:13:14,000 --> 00:13:17,040
one year ago it was 22 to 80 so it's

339
00:13:17,040 --> 00:13:19,600
increasing

340
00:13:19,600 --> 00:13:23,279
and just for curiosity 85 percent of

341
00:13:23,279 --> 00:13:26,320
audit code i put the source here

342
00:13:26,320 --> 00:13:28,320
used components

343
00:13:28,320 --> 00:13:30,399
older than three years and having a lot

344
00:13:30,399 --> 00:13:33,360
of well-known vulnerabilities there

345
00:13:33,360 --> 00:13:34,720
so yes

346
00:13:34,720 --> 00:13:37,440
we need to care you've seen the very

347
00:13:37,440 --> 00:13:39,360
similar image on

348
00:13:39,360 --> 00:13:42,160
a previous presentation and that's true

349
00:13:42,160 --> 00:13:45,120
in a pipeline we have

350
00:13:45,120 --> 00:13:47,680
resources and processes

351
00:13:47,680 --> 00:13:51,360
which are exposing new attack surfaces

352
00:13:51,360 --> 00:13:52,320
yes

353
00:13:52,320 --> 00:13:54,000
and if you think

354
00:13:54,000 --> 00:13:56,959
i think it's quite quite common to to

355
00:13:56,959 --> 00:13:59,680
have a knowledge about solarwinds attack

356
00:13:59,680 --> 00:14:00,560
and

357
00:14:00,560 --> 00:14:02,880
it was not you know attacking runtime

358
00:14:02,880 --> 00:14:05,360
yes it was a code that was injected into

359
00:14:05,360 --> 00:14:08,639
into source code and this is very scary

360
00:14:08,639 --> 00:14:10,720
i was analyzing this code and i've got

361
00:14:10,720 --> 00:14:12,240
to admit

362
00:14:12,240 --> 00:14:14,480
we used to do things like like code

363
00:14:14,480 --> 00:14:18,399
reviews but i saw the code and if and if

364
00:14:18,399 --> 00:14:20,240
i was reviewing the code even if it was

365
00:14:20,240 --> 00:14:22,959
my own code it was so well fit into the

366
00:14:22,959 --> 00:14:24,240
style

367
00:14:24,240 --> 00:14:26,639
of this of this of this source base that

368
00:14:26,639 --> 00:14:29,519
it was probably i wouldn't spot it so

369
00:14:29,519 --> 00:14:31,440
review is not

370
00:14:31,440 --> 00:14:32,480
enough

371
00:14:32,480 --> 00:14:34,320
so let's look at it

372
00:14:34,320 --> 00:14:35,839
step by

373
00:14:35,839 --> 00:14:37,760
step with some

374
00:14:37,760 --> 00:14:40,160
example of tools and what we can really

375
00:14:40,160 --> 00:14:44,279
found in our ourselves

376
00:14:44,480 --> 00:14:48,160
okay so first of all oh i don't want

377
00:14:48,160 --> 00:14:49,519
rectangle

378
00:14:49,519 --> 00:14:52,399
i want arrow

379
00:14:52,399 --> 00:14:53,440
so

380
00:14:53,440 --> 00:14:55,680
first of all we start with

381
00:14:55,680 --> 00:14:56,839
code

382
00:14:56,839 --> 00:14:58,800
commit but

383
00:14:58,800 --> 00:15:00,079
is this code

384
00:15:00,079 --> 00:15:02,079
written by our developers

385
00:15:02,079 --> 00:15:05,199
is it really code submitted which is

386
00:15:05,199 --> 00:15:07,839
our code legitimate code but it comes

387
00:15:07,839 --> 00:15:10,160
from some other other source

388
00:15:10,160 --> 00:15:14,079
we have a pretty simple answer sign it

389
00:15:14,079 --> 00:15:16,399
and it's really not a problem of course

390
00:15:16,399 --> 00:15:18,800
i'm not telling you that you should sign

391
00:15:18,800 --> 00:15:21,839
every code in every repository but

392
00:15:21,839 --> 00:15:24,560
we are experts here from talking about

393
00:15:24,560 --> 00:15:26,959
risks yes so please evaluate the risk

394
00:15:26,959 --> 00:15:28,959
and you have a systems like in case of

395
00:15:28,959 --> 00:15:30,240
solar rooms

396
00:15:30,240 --> 00:15:33,199
maybe it's really worth to consider

397
00:15:33,199 --> 00:15:35,279
signing your comments or your pushes to

398
00:15:35,279 --> 00:15:38,079
the repository and of course to make it

399
00:15:38,079 --> 00:15:40,639
work you must also from time to time

400
00:15:40,639 --> 00:15:43,360
validate the signal signatures yes

401
00:15:43,360 --> 00:15:46,639
so i'm not going to give an example here

402
00:15:46,639 --> 00:15:49,120
because the uh for example git

403
00:15:49,120 --> 00:15:51,440
capabilities to sign in code are quite

404
00:15:51,440 --> 00:15:53,120
obvious

405
00:15:53,120 --> 00:15:56,240
query come to static code analysis so

406
00:15:56,240 --> 00:15:58,880
using the sas also mentioned today sas

407
00:15:58,880 --> 00:15:59,759
tools

408
00:15:59,759 --> 00:16:01,020
they have a quite

409
00:16:01,020 --> 00:16:02,160
[Music]

410
00:16:02,160 --> 00:16:04,079
let's say mixed opinions yes because

411
00:16:04,079 --> 00:16:07,120
they are static it means they can

412
00:16:07,120 --> 00:16:09,440
see problems and they cannot see that

413
00:16:09,440 --> 00:16:12,079
this problem is inside some control

414
00:16:12,079 --> 00:16:14,000
structures which really

415
00:16:14,000 --> 00:16:16,560
solves this problem yes and

416
00:16:16,560 --> 00:16:19,839
from people really experienced with sas

417
00:16:19,839 --> 00:16:21,360
i heard that

418
00:16:21,360 --> 00:16:23,839
it requires really a lot of

419
00:16:23,839 --> 00:16:25,120
effort to

420
00:16:25,120 --> 00:16:27,279
make it uh

421
00:16:27,279 --> 00:16:29,920
configured well but still it's really

422
00:16:29,920 --> 00:16:32,560
worth worth doing

423
00:16:32,560 --> 00:16:35,040
after static code analysis we are in a

424
00:16:35,040 --> 00:16:37,279
in a sales repository or

425
00:16:37,279 --> 00:16:40,320
really is that in in a source repository

426
00:16:40,320 --> 00:16:43,279
and now usually the pipeline the push to

427
00:16:43,279 --> 00:16:46,800
the repository triggers triggers built

428
00:16:46,800 --> 00:16:48,480
in some

429
00:16:48,480 --> 00:16:51,600
in some environment in our case i

430
00:16:51,600 --> 00:16:54,480
showing here the google cloud bit as

431
00:16:54,480 --> 00:16:57,519
example because i'll be using it later

432
00:16:57,519 --> 00:17:00,079
the build does a lot of things and it

433
00:17:00,079 --> 00:17:00,959
can

434
00:17:00,959 --> 00:17:02,720
do even more

435
00:17:02,720 --> 00:17:05,919
one thing that i would like to put

436
00:17:05,919 --> 00:17:08,240
focus on is the software composition

437
00:17:08,240 --> 00:17:09,520
analysis

438
00:17:09,520 --> 00:17:10,799
as we saw

439
00:17:10,799 --> 00:17:13,760
a few minutes ago our software really

440
00:17:13,760 --> 00:17:15,679
consists

441
00:17:15,679 --> 00:17:19,799
in a majority it consists

442
00:17:20,000 --> 00:17:21,439
of

443
00:17:21,439 --> 00:17:23,199
open source libraries

444
00:17:23,199 --> 00:17:25,599
these libraries are taken from different

445
00:17:25,599 --> 00:17:27,760
places they have a

446
00:17:27,760 --> 00:17:29,440
different maintenance level and we

447
00:17:29,440 --> 00:17:32,480
really should check what we are using to

448
00:17:32,480 --> 00:17:34,320
build our software that we will put into

449
00:17:34,320 --> 00:17:37,200
production in a in a few moments what we

450
00:17:37,200 --> 00:17:39,120
can find in uh

451
00:17:39,120 --> 00:17:40,640
in this libraries

452
00:17:40,640 --> 00:17:42,799
this is the this is the moment when i

453
00:17:42,799 --> 00:17:43,480
switch to

454
00:17:43,480 --> 00:17:44,640
[Music]

455
00:17:44,640 --> 00:17:46,720
console

456
00:17:46,720 --> 00:17:49,120
what you can see here

457
00:17:49,120 --> 00:17:51,520
oh maybe i use again i have something

458
00:17:51,520 --> 00:17:55,600
called some project this is the quite uh

459
00:17:55,600 --> 00:17:58,080
popular part of software taken from the

460
00:17:58,080 --> 00:18:01,039
github repository i deliberately changed

461
00:18:01,039 --> 00:18:03,840
its name to to protect outers and others

462
00:18:03,840 --> 00:18:06,000
close to my to my heart

463
00:18:06,000 --> 00:18:06,880
uh

464
00:18:06,880 --> 00:18:09,520
this is the java project which is uh

465
00:18:09,520 --> 00:18:12,320
based on on a maven so i downloaded

466
00:18:12,320 --> 00:18:13,679
downloaded

467
00:18:13,679 --> 00:18:15,600
dependencies from this

468
00:18:15,600 --> 00:18:17,520
project yes

469
00:18:17,520 --> 00:18:21,440
so they are in my local repo

470
00:18:21,840 --> 00:18:24,559
as you can see a lot of well-known

471
00:18:24,559 --> 00:18:25,520
things

472
00:18:25,520 --> 00:18:27,440
is used to

473
00:18:27,440 --> 00:18:28,880
to

474
00:18:28,880 --> 00:18:32,160
compose this this this software

475
00:18:32,160 --> 00:18:34,640
what i will do i will use a very very

476
00:18:34,640 --> 00:18:36,640
simple software

477
00:18:36,640 --> 00:18:40,160
which is called dependency check

478
00:18:40,160 --> 00:18:42,960
which is also one of the hours

479
00:18:42,960 --> 00:18:45,360
project it can be used in many different

480
00:18:45,360 --> 00:18:47,520
ways the aren't asked command line tool

481
00:18:47,520 --> 00:18:49,679
it's not very fresh and when i looked

482
00:18:49,679 --> 00:18:52,160
that the project is is uh

483
00:18:52,160 --> 00:18:53,919
not very dynamically developed but it

484
00:18:53,919 --> 00:18:55,360
does its own

485
00:18:55,360 --> 00:18:58,000
it does job it was created

486
00:18:58,000 --> 00:18:58,799
for

487
00:18:58,799 --> 00:19:02,640
what i will do i will just run this uh

488
00:19:02,640 --> 00:19:04,320
very simple check

489
00:19:04,320 --> 00:19:06,640
on this repository

490
00:19:06,640 --> 00:19:09,039
i was going to show you the the full the

491
00:19:09,039 --> 00:19:11,200
full uh process this software is first

492
00:19:11,200 --> 00:19:13,919
downloading the databases on of

493
00:19:13,919 --> 00:19:17,360
cves uh analyzing and building the index

494
00:19:17,360 --> 00:19:19,360
of these cvs and then is doing analyzes

495
00:19:19,360 --> 00:19:21,440
but it takes time and

496
00:19:21,440 --> 00:19:22,960
the time is really short for this

497
00:19:22,960 --> 00:19:25,290
presentation so i decided to

498
00:19:25,290 --> 00:19:27,360
[Music]

499
00:19:27,360 --> 00:19:31,760
to avoid avoid that okay so

500
00:19:31,760 --> 00:19:33,760
uh unfortunately it does some database

501
00:19:33,760 --> 00:19:36,559
maintenance but it shouldn't take it

502
00:19:36,559 --> 00:19:38,000
more than uh

503
00:19:38,000 --> 00:19:42,240
than a than minute or so and we will see

504
00:19:42,240 --> 00:19:43,600
uh

505
00:19:43,600 --> 00:19:46,000
okay

506
00:19:48,799 --> 00:19:52,160
okay we are starting but really to to to

507
00:19:52,160 --> 00:19:55,120
save our time

508
00:19:55,280 --> 00:19:56,400
okay

509
00:19:56,400 --> 00:19:58,799
it does it's analyzing but i show you

510
00:19:58,799 --> 00:20:00,480
exactly the same the result of the same

511
00:20:00,480 --> 00:20:02,960
analyzing analysis

512
00:20:02,960 --> 00:20:04,000
i did

513
00:20:04,000 --> 00:20:06,240
yesterday i put it into our object

514
00:20:06,240 --> 00:20:07,200
storage

515
00:20:07,200 --> 00:20:08,400
just

516
00:20:08,400 --> 00:20:10,159
to make it clear

517
00:20:10,159 --> 00:20:12,000
all the resources in the cloud you see

518
00:20:12,000 --> 00:20:14,320
during this presentation will be removed

519
00:20:14,320 --> 00:20:16,320
after this presentation i know this is a

520
00:20:16,320 --> 00:20:17,200
very

521
00:20:17,200 --> 00:20:19,679
specific conference so

522
00:20:19,679 --> 00:20:22,400
it we are all begun so

523
00:20:22,400 --> 00:20:24,640
so just just just

524
00:20:24,640 --> 00:20:26,799
made the statement this is the result of

525
00:20:26,799 --> 00:20:29,600
the dependency check of this project and

526
00:20:29,600 --> 00:20:32,240
it's not it was not some some really old

527
00:20:32,240 --> 00:20:35,120
project it was a well-maintained

528
00:20:35,120 --> 00:20:38,159
living project yes and what we see

529
00:20:38,159 --> 00:20:40,240
here yes

530
00:20:40,240 --> 00:20:42,480
from my perspective

531
00:20:42,480 --> 00:20:43,520
i believe

532
00:20:43,520 --> 00:20:45,840
there is something we should at least

533
00:20:45,840 --> 00:20:48,880
show this image the developers yes to

534
00:20:48,880 --> 00:20:51,280
take some of our dependencies libraries

535
00:20:51,280 --> 00:20:53,520
and do this kind of check if we are not

536
00:20:53,520 --> 00:20:56,159
doing it right now yes

537
00:20:56,159 --> 00:20:58,880
we have even see some critical

538
00:20:58,880 --> 00:21:03,039
vulnerabilities present in a in this

539
00:21:04,000 --> 00:21:07,360
yes so this is just as a as an example

540
00:21:07,360 --> 00:21:09,600
what can be done there are

541
00:21:09,600 --> 00:21:10,480
really

542
00:21:10,480 --> 00:21:12,400
a lot of i'm not going to endorse any

543
00:21:12,400 --> 00:21:14,320
special vendor here i just i just use it

544
00:21:14,320 --> 00:21:16,799
as an example we have things like like

545
00:21:16,799 --> 00:21:19,280
like black duck for example and a lot of

546
00:21:19,280 --> 00:21:20,960
other software that that can do it can

547
00:21:20,960 --> 00:21:24,080
be plugged into our pipeline and do this

548
00:21:24,080 --> 00:21:26,880
very important and overlooked uh step

549
00:21:26,880 --> 00:21:27,840
which is

550
00:21:27,840 --> 00:21:31,679
which is composition analysis okay so we

551
00:21:31,679 --> 00:21:36,559
are done with this and our artifact

552
00:21:36,559 --> 00:21:38,400
lands in some

553
00:21:38,400 --> 00:21:41,120
registry as usually we have some freshly

554
00:21:41,120 --> 00:21:42,880
built docker

555
00:21:42,880 --> 00:21:46,159
image which is here

556
00:21:46,799 --> 00:21:49,520
which is here

557
00:21:49,600 --> 00:21:51,600
what we need to do now this doctor

558
00:21:51,600 --> 00:21:54,080
docker image will be soon deployed to

559
00:21:54,080 --> 00:21:56,880
our environments to to some kind of

560
00:21:56,880 --> 00:21:59,760
runtime usually to some

561
00:21:59,760 --> 00:22:01,679
testing

562
00:22:01,679 --> 00:22:04,880
uat pre-production production so on

563
00:22:04,880 --> 00:22:06,799
we should be sure that

564
00:22:06,799 --> 00:22:09,360
what we deploy

565
00:22:09,360 --> 00:22:11,360
to this environment

566
00:22:11,360 --> 00:22:13,200
is secure

567
00:22:13,200 --> 00:22:14,880
is a

568
00:22:14,880 --> 00:22:16,640
right quality

569
00:22:16,640 --> 00:22:18,960
and it went through all the process that

570
00:22:18,960 --> 00:22:21,679
we wanted to go and this is when we

571
00:22:21,679 --> 00:22:24,720
should do some kind of attestation

572
00:22:24,720 --> 00:22:26,480
probably the first attestation that we

573
00:22:26,480 --> 00:22:28,720
should do is to check for

574
00:22:28,720 --> 00:22:30,880
vulnerabilities in our

575
00:22:30,880 --> 00:22:32,400
in our

576
00:22:32,400 --> 00:22:34,559
image

577
00:22:34,559 --> 00:22:36,080
and we can

578
00:22:36,080 --> 00:22:38,320
it's another place where we can use

579
00:22:38,320 --> 00:22:42,720
multiple tools if we use images

580
00:22:42,720 --> 00:22:45,280
many companies at this point especially

581
00:22:45,280 --> 00:22:48,000
with mature development process and and

582
00:22:48,000 --> 00:22:50,880
security sensitive they of course use

583
00:22:50,880 --> 00:22:54,159
internal registries of the base images

584
00:22:54,159 --> 00:22:56,000
which is a very good practice the images

585
00:22:56,000 --> 00:22:58,080
are are hard and they're

586
00:22:58,080 --> 00:23:00,799
they are clean and then can be used but

587
00:23:00,799 --> 00:23:02,640
in many cases still

588
00:23:02,640 --> 00:23:05,840
open registries are are used and images

589
00:23:05,840 --> 00:23:08,799
are not well kept let's see how it looks

590
00:23:08,799 --> 00:23:11,120
for for some

591
00:23:11,120 --> 00:23:15,679
images that we just take from

592
00:23:15,679 --> 00:23:20,159
from the internet from the repository

593
00:23:20,159 --> 00:23:23,840
what i will do

594
00:23:24,240 --> 00:23:26,400
let me

595
00:23:26,400 --> 00:23:27,280
take

596
00:23:27,280 --> 00:23:29,840
oh let's say we will

597
00:23:29,840 --> 00:23:33,120
take some popular software like redis

598
00:23:33,120 --> 00:23:36,159
only is a random choice i love freddy's

599
00:23:36,159 --> 00:23:38,240
this is great software it's very widely

600
00:23:38,240 --> 00:23:41,919
used we also use the radius

601
00:23:41,919 --> 00:23:44,320
in our cloud for the memory store

602
00:23:44,320 --> 00:23:47,200
it's a great software i just take the

603
00:23:47,200 --> 00:23:51,080
image latest image

604
00:23:51,760 --> 00:23:52,720
so

605
00:23:52,720 --> 00:23:55,200
i will move to artifact register if you

606
00:23:55,200 --> 00:23:57,679
use some let's say commercial product

607
00:23:57,679 --> 00:23:59,440
usually you are in a very comfortable

608
00:23:59,440 --> 00:24:02,000
situation probably like in case of our

609
00:24:02,000 --> 00:24:05,279
artifact registry you have some

610
00:24:05,279 --> 00:24:06,880
built-in vulnerabilities carrying

611
00:24:06,880 --> 00:24:09,520
capabilities it's just start off with

612
00:24:09,520 --> 00:24:12,000
the with with a single with a single

613
00:24:12,000 --> 00:24:14,240
click

614
00:24:16,480 --> 00:24:22,159
i will create a repository for our case

615
00:24:24,159 --> 00:24:26,400
it will be docker in repository i will

616
00:24:26,400 --> 00:24:28,400
use

617
00:24:28,400 --> 00:24:30,880
region we can use for the most of our

618
00:24:30,880 --> 00:24:32,720
demos because i have the most resources

619
00:24:32,720 --> 00:24:33,520
there

620
00:24:33,520 --> 00:24:35,440
i can decide how to encrypt it i will

621
00:24:35,440 --> 00:24:37,039
use it with the

622
00:24:37,039 --> 00:24:40,240
default google manager encryption and

623
00:24:40,240 --> 00:24:42,480
i'll create repository

624
00:24:42,480 --> 00:24:44,880
when i have repository what i what i

625
00:24:44,880 --> 00:24:47,279
will do

626
00:24:47,279 --> 00:24:49,039
i pull the reddis

627
00:24:49,039 --> 00:24:52,159
so now what i need to do

628
00:24:52,159 --> 00:24:53,760
is to

629
00:24:53,760 --> 00:24:55,440
configure

630
00:24:55,440 --> 00:24:58,400
docker to connect to our repository i

631
00:24:58,400 --> 00:25:01,640
need to

632
00:25:04,320 --> 00:25:05,919
tag image

633
00:25:05,919 --> 00:25:08,480
to be pushed into the repository

634
00:25:08,480 --> 00:25:10,159
and then when i can do

635
00:25:10,159 --> 00:25:11,600
i can just

636
00:25:11,600 --> 00:25:13,279
push

637
00:25:13,279 --> 00:25:17,120
image to the to the repository

638
00:25:19,520 --> 00:25:21,440
okay

639
00:25:21,440 --> 00:25:22,799
what happened when i push image to

640
00:25:22,799 --> 00:25:24,159
repository

641
00:25:24,159 --> 00:25:27,520
it automatically triggered

642
00:25:27,600 --> 00:25:30,640
vulnerability is scanning

643
00:25:30,640 --> 00:25:33,440
and as you can see

644
00:25:33,440 --> 00:25:34,400
there

645
00:25:34,400 --> 00:25:35,360
another

646
00:25:35,360 --> 00:25:38,320
time there is something to really

647
00:25:38,320 --> 00:25:39,760
care about

648
00:25:39,760 --> 00:25:43,440
we should just try to make some score

649
00:25:43,440 --> 00:25:46,400
and decide what we really have to patch

650
00:25:46,400 --> 00:25:49,600
and what what we can accept yes

651
00:25:49,600 --> 00:25:52,080
but it's not it's really important to

652
00:25:52,080 --> 00:25:54,720
also make this exercise with developers

653
00:25:54,720 --> 00:25:55,840
if are not

654
00:25:55,840 --> 00:25:59,520
aware what they download using the

655
00:25:59,520 --> 00:26:02,880
let's say random base images

656
00:26:02,880 --> 00:26:05,279
of course we don't have to

657
00:26:05,279 --> 00:26:07,200
use the commercial pro commercial

658
00:26:07,200 --> 00:26:08,400
product or

659
00:26:08,400 --> 00:26:10,640
we can use any other tool like for

660
00:26:10,640 --> 00:26:12,720
example 3d

661
00:26:12,720 --> 00:26:16,240
i will use it this time

662
00:26:16,240 --> 00:26:18,400
in the container container way because

663
00:26:18,400 --> 00:26:21,279
we live in a container and cloud world

664
00:26:21,279 --> 00:26:25,039
and we can do the same thing on a

665
00:26:25,039 --> 00:26:27,120
using using 3v

666
00:26:27,120 --> 00:26:30,000
let's say we do

667
00:26:30,000 --> 00:26:32,799
delete like that

668
00:26:33,279 --> 00:26:35,039
and as we can find

669
00:26:35,039 --> 00:26:36,720
trivia is even

670
00:26:36,720 --> 00:26:39,919
less delicate for for this image

671
00:26:39,919 --> 00:26:41,840
i've got to admit i was wondering why we

672
00:26:41,840 --> 00:26:43,760
have this difference from the number of

673
00:26:43,760 --> 00:26:46,960
found cves in these images i i had no

674
00:26:46,960 --> 00:26:49,360
time to really verify why i have why we

675
00:26:49,360 --> 00:26:53,520
have 112 here and over 60 there

676
00:26:53,520 --> 00:26:54,400
but

677
00:26:54,400 --> 00:26:56,320
i will leave it to you if you if you're

678
00:26:56,320 --> 00:26:59,440
really interested but really the images

679
00:26:59,440 --> 00:27:01,760
should be scanned

680
00:27:01,760 --> 00:27:03,200
so when we

681
00:27:03,200 --> 00:27:05,760
what we did

682
00:27:05,760 --> 00:27:08,480
we scan the image we deploy the image to

683
00:27:08,480 --> 00:27:10,960
we fix it we patched it and we are ready

684
00:27:10,960 --> 00:27:11,840
to

685
00:27:11,840 --> 00:27:15,200
deploy image to the environment but it

686
00:27:15,200 --> 00:27:18,000
also after passing the environment it

687
00:27:18,000 --> 00:27:21,360
also should have some information that

688
00:27:21,360 --> 00:27:23,679
quality controls automatic tested manual

689
00:27:23,679 --> 00:27:26,240
testing whatever actually happened and

690
00:27:26,240 --> 00:27:29,360
someone is saying yes certified this is

691
00:27:29,360 --> 00:27:30,559
this is it

692
00:27:30,559 --> 00:27:32,720
so

693
00:27:32,799 --> 00:27:35,039
in our case we use something called

694
00:27:35,039 --> 00:27:37,200
binary authorization which is part of

695
00:27:37,200 --> 00:27:37,380
the

696
00:27:37,380 --> 00:27:38,640
[Music]

697
00:27:38,640 --> 00:27:41,440
our our our service but it's really

698
00:27:41,440 --> 00:27:43,679
based on two open source project

699
00:27:43,679 --> 00:27:47,440
graphics and criticises graphics is a

700
00:27:47,440 --> 00:27:49,600
database for the

701
00:27:49,600 --> 00:27:51,840
metadata for the

702
00:27:51,840 --> 00:27:54,559
for the images when we can

703
00:27:54,559 --> 00:27:56,559
put the metadata about the attestation

704
00:27:56,559 --> 00:27:59,840
we do and the criticism

705
00:27:59,840 --> 00:28:02,399
the critics give us possibility to

706
00:28:02,399 --> 00:28:05,520
verify those attestations and i would

707
00:28:05,520 --> 00:28:08,799
like to show you how we can be sure

708
00:28:08,799 --> 00:28:11,120
that the container we

709
00:28:11,120 --> 00:28:13,360
put to our production develo the

710
00:28:13,360 --> 00:28:15,200
environment is

711
00:28:15,200 --> 00:28:18,559
really certified and is really attested

712
00:28:18,559 --> 00:28:20,159
that it went through the process where

713
00:28:20,159 --> 00:28:21,840
you wanted it to

714
00:28:21,840 --> 00:28:25,600
it to go and also that no one on this

715
00:28:25,600 --> 00:28:27,360
this pipeline is quite let's say

716
00:28:27,360 --> 00:28:29,919
complicated the original original image

717
00:28:29,919 --> 00:28:32,240
was simplified by by myself but it can

718
00:28:32,240 --> 00:28:34,720
really be complicated in that

719
00:28:34,720 --> 00:28:36,640
many places here

720
00:28:36,640 --> 00:28:39,440
something really happened but

721
00:28:39,440 --> 00:28:41,600
why not if we if we

722
00:28:41,600 --> 00:28:44,880
get here why not put our own images here

723
00:28:44,880 --> 00:28:46,799
we should be sure that what we put here

724
00:28:46,799 --> 00:28:49,760
is a really legitimate legitimate

725
00:28:49,760 --> 00:28:52,000
image of of the of the software you want

726
00:28:52,000 --> 00:28:52,799
to

727
00:28:52,799 --> 00:28:56,399
we want to run so i will move here to

728
00:28:56,399 --> 00:28:58,880
the gcp environment

729
00:28:58,880 --> 00:29:01,520
and in a security

730
00:29:01,520 --> 00:29:04,799
part we have something which is called

731
00:29:04,799 --> 00:29:07,200
binary authorization and again this is

732
00:29:07,200 --> 00:29:09,600
based on open source projects we have

733
00:29:09,600 --> 00:29:11,840
this culture of sharing

734
00:29:11,840 --> 00:29:13,919
a lot of our ideas to

735
00:29:13,919 --> 00:29:16,640
to to to do the white community so the

736
00:29:16,640 --> 00:29:21,039
graphics and duties are opened yes

737
00:29:21,039 --> 00:29:23,679
we have binary authorization in our case

738
00:29:23,679 --> 00:29:27,679
we have two attesters one is called qa

739
00:29:27,679 --> 00:29:29,919
i will start with from this one

740
00:29:29,919 --> 00:29:31,919
wounds a tester that you can imagine

741
00:29:31,919 --> 00:29:33,600
this is attestation

742
00:29:33,600 --> 00:29:35,440
of

743
00:29:35,440 --> 00:29:37,919
vulnerability scanning so when i perform

744
00:29:37,919 --> 00:29:41,440
vulnerability scanning and the score of

745
00:29:41,440 --> 00:29:44,080
the scanning yes with each

746
00:29:44,080 --> 00:29:46,080
cve

747
00:29:46,080 --> 00:29:48,799
criticality there is a there is a score

748
00:29:48,799 --> 00:29:49,840
assigned

749
00:29:49,840 --> 00:29:52,559
if there is no cves with the score over

750
00:29:52,559 --> 00:29:54,399
five we assume

751
00:29:54,399 --> 00:29:55,279
that

752
00:29:55,279 --> 00:29:58,000
okay we can attest test the image

753
00:29:58,000 --> 00:29:59,600
there will be

754
00:29:59,600 --> 00:30:02,799
note attached to to the image

755
00:30:02,799 --> 00:30:05,120
which will be of course

756
00:30:05,120 --> 00:30:09,760
signed we will use cloud kms this is the

757
00:30:09,760 --> 00:30:11,520
advantage of using the cloud environment

758
00:30:11,520 --> 00:30:13,520
from my perspective that all the

759
00:30:13,520 --> 00:30:15,279
infrastructure is there yes i have a key

760
00:30:15,279 --> 00:30:18,640
management in place i have a

761
00:30:18,640 --> 00:30:21,360
binary authorization in place the

762
00:30:21,360 --> 00:30:23,840
kubernetes is there so so i really don't

763
00:30:23,840 --> 00:30:26,480
don't have to let's say set up all it by

764
00:30:26,480 --> 00:30:27,760
by myself

765
00:30:27,760 --> 00:30:29,760
uh so i will use the

766
00:30:29,760 --> 00:30:33,120
the the the kms the cloud key mass key

767
00:30:33,120 --> 00:30:36,000
uh to sign and then verify yes the the

768
00:30:36,000 --> 00:30:38,960
key ms is protected by

769
00:30:38,960 --> 00:30:41,279
impermissions so

770
00:30:41,279 --> 00:30:42,159
only

771
00:30:42,159 --> 00:30:45,200
only certain actors have the right to

772
00:30:45,200 --> 00:30:48,320
use the key private key for the signing

773
00:30:48,320 --> 00:30:50,480
and only certain actors can verify the

774
00:30:50,480 --> 00:30:53,679
signature using using the corresponding

775
00:30:53,679 --> 00:30:55,919
public key and another attestation is a

776
00:30:55,919 --> 00:30:58,799
q a attestation which we can assume will

777
00:30:58,799 --> 00:31:00,799
be used when

778
00:31:00,799 --> 00:31:04,080
when we pass some q a process manual

779
00:31:04,080 --> 00:31:06,640
automatic it's up to you really

780
00:31:06,640 --> 00:31:07,840
and then

781
00:31:07,840 --> 00:31:10,399
the next very important part

782
00:31:10,399 --> 00:31:11,360
is a

783
00:31:11,360 --> 00:31:13,519
policy yes and in this case we have

784
00:31:13,519 --> 00:31:15,679
policy which says

785
00:31:15,679 --> 00:31:16,960
by default

786
00:31:16,960 --> 00:31:20,320
disallow all images

787
00:31:20,320 --> 00:31:21,200
and

788
00:31:21,200 --> 00:31:22,960
then we have a

789
00:31:22,960 --> 00:31:25,519
kubernetes cluster specific rules which

790
00:31:25,519 --> 00:31:26,320
which

791
00:31:26,320 --> 00:31:28,159
defines that for the

792
00:31:28,159 --> 00:31:30,000
staging cluster

793
00:31:30,000 --> 00:31:33,840
we accept images with

794
00:31:33,840 --> 00:31:35,039
wounds

795
00:31:35,039 --> 00:31:37,760
at a histories are tested to be scanned

796
00:31:37,760 --> 00:31:39,679
for vulnerabilities

797
00:31:39,679 --> 00:31:43,360
and for the production clusters we

798
00:31:43,360 --> 00:31:44,799
accept

799
00:31:44,799 --> 00:31:48,000
only images with these two

800
00:31:48,000 --> 00:31:53,039
attestations how do we verify uh

801
00:31:53,840 --> 00:31:55,200
different question

802
00:31:55,200 --> 00:31:58,080
who is responsible to verify on on a

803
00:31:58,080 --> 00:32:00,320
cluster that the at the station of the

804
00:32:00,320 --> 00:32:02,080
image are there this is really the

805
00:32:02,080 --> 00:32:04,399
admission controller

806
00:32:04,399 --> 00:32:06,879
the people

807
00:32:06,960 --> 00:32:09,120
playing with with kubernetes they are

808
00:32:09,120 --> 00:32:11,440
they are definitely aware the the being

809
00:32:11,440 --> 00:32:12,320
called

810
00:32:12,320 --> 00:32:13,760
admission controller that mission

811
00:32:13,760 --> 00:32:17,760
control is used to allow or disallow pod

812
00:32:17,760 --> 00:32:20,000
creation because it's on the level of

813
00:32:20,000 --> 00:32:22,240
the pod pod creation if there is not a

814
00:32:22,240 --> 00:32:25,519
station the pot will not be

815
00:32:25,519 --> 00:32:28,000
created so very quickly let's see it in

816
00:32:28,000 --> 00:32:30,320
a in action

817
00:32:30,320 --> 00:32:32,799
i will go to cloud build first of all i

818
00:32:32,799 --> 00:32:35,760
will quickly show you uh

819
00:32:35,760 --> 00:32:38,480
the build config in a build config we

820
00:32:38,480 --> 00:32:41,840
have a step which is

821
00:32:41,840 --> 00:32:45,039
a tester this step is using it's using

822
00:32:45,039 --> 00:32:48,720
really in this case it's using really

823
00:32:48,720 --> 00:32:52,559
a script which is which is using a

824
00:32:52,559 --> 00:32:54,880
container container scanning api to scan

825
00:32:54,880 --> 00:32:58,720
containers if there is no

826
00:32:58,960 --> 00:33:01,600
cve with score larger than 5 data

827
00:33:01,600 --> 00:33:04,399
station will be created and there is

828
00:33:04,399 --> 00:33:06,080
another attestation

829
00:33:06,080 --> 00:33:07,519
here or

830
00:33:07,519 --> 00:33:09,600
not at the station really the process

831
00:33:09,600 --> 00:33:10,960
will stop

832
00:33:10,960 --> 00:33:12,399
and will wait

833
00:33:12,399 --> 00:33:14,640
for the

834
00:33:14,640 --> 00:33:17,120
image to get

835
00:33:17,120 --> 00:33:18,880
to get the

836
00:33:18,880 --> 00:33:21,279
attestation for the q a we just emulate

837
00:33:21,279 --> 00:33:24,880
the manual processor giving the q a

838
00:33:24,880 --> 00:33:27,679
attestation here it will even

839
00:33:27,679 --> 00:33:29,679
suggest us

840
00:33:29,679 --> 00:33:32,480
the command to do it

841
00:33:32,480 --> 00:33:34,799
i did it before of course in a normal

842
00:33:34,799 --> 00:33:38,080
process the submit will trigger this

843
00:33:38,080 --> 00:33:40,080
the build i will just

844
00:33:40,080 --> 00:33:41,519
force

845
00:33:41,519 --> 00:33:43,760
rebuilding the the image

846
00:33:43,760 --> 00:33:46,240
in the meantime we take a look here we

847
00:33:46,240 --> 00:33:48,320
have two clusters

848
00:33:48,320 --> 00:33:50,720
this is production cluster and staging

849
00:33:50,720 --> 00:33:54,000
cluster if you look into the workloads

850
00:33:54,000 --> 00:33:55,519
hopefully yes

851
00:33:55,519 --> 00:33:56,960
i clean it up

852
00:33:56,960 --> 00:33:59,279
hopefully we have no

853
00:33:59,279 --> 00:34:03,200
deployments on any of these two

854
00:34:03,200 --> 00:34:05,600
two clusters

855
00:34:05,600 --> 00:34:08,159
so the build is going we

856
00:34:08,159 --> 00:34:09,520
have container

857
00:34:09,520 --> 00:34:12,879
container build

858
00:34:13,440 --> 00:34:15,839
okay

859
00:34:15,918 --> 00:34:18,159
waiting for another another step which

860
00:34:18,159 --> 00:34:20,480
is

861
00:34:20,480 --> 00:34:22,800
pushing container into the container

862
00:34:22,800 --> 00:34:24,960
registry

863
00:34:24,960 --> 00:34:27,679
while it happens i can

864
00:34:27,679 --> 00:34:29,760
move to some finished job and just

865
00:34:29,760 --> 00:34:31,280
explain here

866
00:34:31,280 --> 00:34:32,159
yes

867
00:34:32,159 --> 00:34:33,119
we have

868
00:34:33,119 --> 00:34:35,760
vulnerability scanning here

869
00:34:35,760 --> 00:34:37,839
we have when it's

870
00:34:37,839 --> 00:34:41,918
successful we do the attestation

871
00:34:41,918 --> 00:34:44,719
then we create money first we deploy to

872
00:34:44,719 --> 00:34:46,719
the staging

873
00:34:46,719 --> 00:34:48,960
when it's when that when

874
00:34:48,960 --> 00:34:51,119
deployment to the staging is done we are

875
00:34:51,119 --> 00:34:53,440
waiting here in a build process it's

876
00:34:53,440 --> 00:34:58,400
only sample process for this q a

877
00:34:58,400 --> 00:35:00,720
at the station

878
00:35:00,720 --> 00:35:03,680
so let's go back to our build process

879
00:35:03,680 --> 00:35:05,119
and let's see

880
00:35:05,119 --> 00:35:07,599
if we have it done okay

881
00:35:07,599 --> 00:35:10,720
so now we should be

882
00:35:10,720 --> 00:35:14,079
waiting on a attestation process and if

883
00:35:14,079 --> 00:35:16,800
we go to the kubernetes cluster

884
00:35:16,800 --> 00:35:18,560
what we have here

885
00:35:18,560 --> 00:35:20,640
hopefully

886
00:35:20,640 --> 00:35:21,839
yes

887
00:35:21,839 --> 00:35:24,480
we have the deployment done what does it

888
00:35:24,480 --> 00:35:25,599
mean

889
00:35:25,599 --> 00:35:31,160
we allowed container to be deployed here

890
00:35:32,480 --> 00:35:34,560
after we just did the attestation

891
00:35:34,560 --> 00:35:36,800
because of the vulnerability because it

892
00:35:36,800 --> 00:35:39,760
is staging the staging cluster

893
00:35:39,760 --> 00:35:42,000
because i see the time is really running

894
00:35:42,000 --> 00:35:44,960
fast what i will do now i will try to

895
00:35:44,960 --> 00:35:46,480
skip the deployment to production

896
00:35:46,480 --> 00:35:47,760
cluster

897
00:35:47,760 --> 00:35:49,839
i will try to deploy

898
00:35:49,839 --> 00:35:52,720
i will try to deploy this image without

899
00:35:52,720 --> 00:35:54,640
the second attestation

900
00:35:54,640 --> 00:35:57,280
directly to the

901
00:35:57,280 --> 00:35:59,760
to the cluster

902
00:35:59,760 --> 00:36:02,800
what i need in this case

903
00:36:02,800 --> 00:36:05,330
let's make sure yes it's the is this

904
00:36:05,330 --> 00:36:07,200
[Music]

905
00:36:07,200 --> 00:36:09,759
i will need

906
00:36:09,920 --> 00:36:11,599
a digest

907
00:36:11,599 --> 00:36:14,480
and i will try to do it from

908
00:36:14,480 --> 00:36:17,040
from here

909
00:36:20,800 --> 00:36:24,720
i set up environment a little bit

910
00:36:24,720 --> 00:36:27,760
okay i lost the digest very clever

911
00:36:27,760 --> 00:36:31,240
from my site

912
00:36:43,040 --> 00:36:46,040
okay

913
00:36:55,599 --> 00:36:58,240
my possibility to type and talk at the

914
00:36:58,240 --> 00:37:00,400
same time are limited so i'm really

915
00:37:00,400 --> 00:37:02,800
sorry for this

916
00:37:02,800 --> 00:37:07,440
quiet time okay we tried to deploy this

917
00:37:07,440 --> 00:37:09,920
container here

918
00:37:09,920 --> 00:37:12,320
let's see what happened

919
00:37:12,320 --> 00:37:15,359
as you can see it failed you can see it

920
00:37:15,359 --> 00:37:16,480
was a

921
00:37:16,480 --> 00:37:19,920
attempt to deploy to production cluster

922
00:37:19,920 --> 00:37:24,320
but it failed it failed with the

923
00:37:24,320 --> 00:37:27,119
information that the admission web hook

924
00:37:27,119 --> 00:37:28,240
stopped

925
00:37:28,240 --> 00:37:29,599
because

926
00:37:29,599 --> 00:37:32,000
there was denied by the a tester there

927
00:37:32,000 --> 00:37:34,839
was not a station that the

928
00:37:34,839 --> 00:37:37,839
container past q a

929
00:37:37,839 --> 00:37:39,839
yes

930
00:37:39,839 --> 00:37:43,599
okay so we deployed here and now we do

931
00:37:43,599 --> 00:37:45,440
all the things that we

932
00:37:45,440 --> 00:37:46,560
we are

933
00:37:46,560 --> 00:37:48,880
pretty good at this point i would say in

934
00:37:48,880 --> 00:37:50,720
protecting the security of the cluster

935
00:37:50,720 --> 00:37:53,839
yes we should look here for the things

936
00:37:53,839 --> 00:37:56,320
like content runtime

937
00:37:56,320 --> 00:37:58,880
security look for things like executing

938
00:37:58,880 --> 00:38:00,160
binary

939
00:38:00,160 --> 00:38:03,119
outside the image like replacing

940
00:38:03,119 --> 00:38:06,000
libraries in in running containers and

941
00:38:06,000 --> 00:38:08,000
so on yes of course do all the

942
00:38:08,000 --> 00:38:10,079
protection from the front

943
00:38:10,079 --> 00:38:11,760
and of course the one

944
00:38:11,760 --> 00:38:14,960
thing that is missing from here

945
00:38:14,960 --> 00:38:16,320
there is

946
00:38:16,320 --> 00:38:19,040
not anything can be really automated and

947
00:38:19,040 --> 00:38:21,280
replaced by the by the tools sometimes

948
00:38:21,280 --> 00:38:23,040
we need someone to just

949
00:38:23,040 --> 00:38:24,160
do some

950
00:38:24,160 --> 00:38:26,960
testing on our uh

951
00:38:26,960 --> 00:38:28,640
on our

952
00:38:28,640 --> 00:38:30,960
on our software i'm inspired by the

953
00:38:30,960 --> 00:38:32,560
presentation by the

954
00:38:32,560 --> 00:38:33,520
uh

955
00:38:33,520 --> 00:38:34,720
pyotrek

956
00:38:34,720 --> 00:38:37,680
starting the conference so yes

957
00:38:37,680 --> 00:38:39,680
and the tools yes

958
00:38:39,680 --> 00:38:42,240
i call my colleagues from from from from

959
00:38:42,240 --> 00:38:44,560
pmi they they avoided bus we have a lot

960
00:38:44,560 --> 00:38:46,400
of tools to support this security of the

961
00:38:46,400 --> 00:38:47,200
client

962
00:38:47,200 --> 00:38:49,680
pipeline software composition analysis

963
00:38:49,680 --> 00:38:52,400
tool static analysis tool dynamic

964
00:38:52,400 --> 00:38:55,520
analyzing tool container analyzing tool

965
00:38:55,520 --> 00:38:58,000
of course in a in a google cloud of

966
00:38:58,000 --> 00:39:00,400
course not only we have a lot of tools

967
00:39:00,400 --> 00:39:02,560
that are let's say out of the box which

968
00:39:02,560 --> 00:39:06,079
is done which does a lot of this thing

969
00:39:06,079 --> 00:39:08,000
and jazza

970
00:39:08,000 --> 00:39:11,040
cloud cloud degradation if we are in a

971
00:39:11,040 --> 00:39:12,560
cloud environment

972
00:39:12,560 --> 00:39:15,359
and i hope most of you already are or

973
00:39:15,359 --> 00:39:16,640
will be soon

974
00:39:16,640 --> 00:39:17,760
there is a

975
00:39:17,760 --> 00:39:20,480
thing that is very important we really

976
00:39:20,480 --> 00:39:22,720
have a very strong security culture we

977
00:39:22,720 --> 00:39:26,320
put a lot of effort to implement defense

978
00:39:26,320 --> 00:39:29,280
in debt and to protect any layer which

979
00:39:29,280 --> 00:39:32,400
you are using yes then we can on you can

980
00:39:32,400 --> 00:39:35,119
focus on this part which is left

981
00:39:35,119 --> 00:39:37,599
to you by the short responsibility model

982
00:39:37,599 --> 00:39:40,480
yes and you can really verify you don't

983
00:39:40,480 --> 00:39:42,720
have to trust you can verify that what

984
00:39:42,720 --> 00:39:45,280
we do in the layers below

985
00:39:45,280 --> 00:39:48,960
is really is really is really solid

986
00:39:48,960 --> 00:39:51,280
my time is up i was really prepared to

987
00:39:51,280 --> 00:39:54,000
talk twice longer to this i was going to

988
00:39:54,000 --> 00:39:55,520
tell you about the visibility what

989
00:39:55,520 --> 00:39:57,839
happens in the environment and the need

990
00:39:57,839 --> 00:39:59,760
to build the

991
00:39:59,760 --> 00:40:01,920
integrated

992
00:40:01,920 --> 00:40:04,960
logging pipeline and i really

993
00:40:04,960 --> 00:40:06,000
i really

994
00:40:06,000 --> 00:40:07,680
advise to look into this direction you

995
00:40:07,680 --> 00:40:09,680
don't have to start two years

996
00:40:09,680 --> 00:40:12,319
development project to build something

997
00:40:12,319 --> 00:40:13,119
but

998
00:40:13,119 --> 00:40:15,839
you should use and iterate

999
00:40:15,839 --> 00:40:18,800
to to start doing that because it's a

1000
00:40:18,800 --> 00:40:21,280
really critical in the let's say a

1001
00:40:21,280 --> 00:40:25,280
distributed containerized world

1002
00:40:25,280 --> 00:40:27,359
i was going to tell you how to do it in

1003
00:40:27,359 --> 00:40:30,160
a gcp but fortunately we have the

1004
00:40:30,160 --> 00:40:32,960
security foundation guide for the gcp or

1005
00:40:32,960 --> 00:40:34,640
just to get inspired you can look into

1006
00:40:34,640 --> 00:40:36,400
this document and you will find a lot of

1007
00:40:36,400 --> 00:40:39,680
details how to do it with your

1008
00:40:39,680 --> 00:40:42,000
login infrastructure how to do the

1009
00:40:42,000 --> 00:40:45,920
detective controls on this on this login

1010
00:40:45,920 --> 00:40:46,880
but

1011
00:40:46,880 --> 00:40:49,440
i will jump to the

1012
00:40:49,440 --> 00:40:51,680
to the wrap-up part

1013
00:40:51,680 --> 00:40:52,400
so

1014
00:40:52,400 --> 00:40:54,480
what i would like you to take from this

1015
00:40:54,480 --> 00:40:56,560
introduce the second to devops and

1016
00:40:56,560 --> 00:40:58,960
educate it's not just a buzzword we

1017
00:40:58,960 --> 00:41:00,880
really need this and we developers

1018
00:41:00,880 --> 00:41:03,920
really want to know more about about the

1019
00:41:03,920 --> 00:41:06,319
security manage open source dependencies

1020
00:41:06,319 --> 00:41:08,800
because most of your systems are

1021
00:41:08,800 --> 00:41:11,520
written not by your developers

1022
00:41:11,520 --> 00:41:12,800
secure

1023
00:41:12,800 --> 00:41:14,160
build process

1024
00:41:14,160 --> 00:41:16,720
because it will be

1025
00:41:16,720 --> 00:41:18,640
focused by more and more

1026
00:41:18,640 --> 00:41:20,800
attackers and it's really complicated

1027
00:41:20,800 --> 00:41:23,040
there is a lot of surfaces when the

1028
00:41:23,040 --> 00:41:24,240
attack can

1029
00:41:24,240 --> 00:41:26,640
happen

1030
00:41:26,640 --> 00:41:27,680
using

1031
00:41:27,680 --> 00:41:29,680
open source standards or using

1032
00:41:29,680 --> 00:41:32,319
commercial tools restrict deployments to

1033
00:41:32,319 --> 00:41:35,040
trusted images the images that went

1034
00:41:35,040 --> 00:41:37,280
through the process that you defined and

1035
00:41:37,280 --> 00:41:39,599
you want to be sure that it really went

1036
00:41:39,599 --> 00:41:41,839
to this process

1037
00:41:41,839 --> 00:41:43,440
run your workloads in the trusted

1038
00:41:43,440 --> 00:41:45,119
environments

1039
00:41:45,119 --> 00:41:47,520
and the thing that i really

1040
00:41:47,520 --> 00:41:50,800
run over get visibility into the your

1041
00:41:50,800 --> 00:41:52,640
pipeline and your runtime in the

1042
00:41:52,640 --> 00:41:54,480
consistent way

1043
00:41:54,480 --> 00:41:56,480
and it's very important to architect

1044
00:41:56,480 --> 00:41:59,040
your logging so it can really be

1045
00:41:59,040 --> 00:42:02,000
analyzing context and let's say single

1046
00:42:02,000 --> 00:42:03,440
place

1047
00:42:03,440 --> 00:42:05,200
thank you very much

1048
00:42:05,200 --> 00:42:08,079
i'm done and then let's return to the

1049
00:42:08,079 --> 00:42:11,079
studio

