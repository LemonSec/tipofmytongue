1
00:00:10,800 --> 00:00:12,880
all right welcome everybody

2
00:00:12,880 --> 00:00:15,040
today i'll be talking about the

3
00:00:15,040 --> 00:00:18,320
cix sharp loader which is a reference of

4
00:00:18,320 --> 00:00:20,320
course to c-sharp in this case for the

5
00:00:20,320 --> 00:00:21,439
title

6
00:00:21,439 --> 00:00:23,199
uh for the table of contents for today

7
00:00:23,199 --> 00:00:24,560
it's quite filled

8
00:00:24,560 --> 00:00:26,480
first i'll talk a bit about who am i

9
00:00:26,480 --> 00:00:28,880
who's giving this presentation and then

10
00:00:28,880 --> 00:00:31,039
i'll talk a bit about the more generic

11
00:00:31,039 --> 00:00:33,600
terms what are loaders i'll talk a bit

12
00:00:33,600 --> 00:00:35,680
about the egg and onion model that is

13
00:00:35,680 --> 00:00:38,160
probably known to quite some of you

14
00:00:38,160 --> 00:00:39,840
i'll be talking about loaders and their

15
00:00:39,840 --> 00:00:42,000
coverage in blogs in general

16
00:00:42,000 --> 00:00:44,960
the attribution of this loader

17
00:00:44,960 --> 00:00:46,079
from

18
00:00:46,079 --> 00:00:47,520
multiple angles

19
00:00:47,520 --> 00:00:49,200
uh i'll talk a bit about confusing

20
00:00:49,200 --> 00:00:52,879
family names as this voter is known

21
00:00:52,879 --> 00:00:54,320
by multiple

22
00:00:54,320 --> 00:00:55,760
nicknames

23
00:00:55,760 --> 00:00:57,280
which might be confusing because you

24
00:00:57,280 --> 00:00:59,280
might know one but not the other

25
00:00:59,280 --> 00:01:01,600
or vice versa i'll talk about the

26
00:01:01,600 --> 00:01:03,680
capabilities of the loader itself so

27
00:01:03,680 --> 00:01:05,519
what can i do technically

28
00:01:05,519 --> 00:01:08,000
and i'll be talking about the

29
00:01:08,000 --> 00:01:10,000
extraction of both the payload and the

30
00:01:10,000 --> 00:01:12,320
loaders configuration

31
00:01:12,320 --> 00:01:15,360
for a single loader but also in bulk

32
00:01:15,360 --> 00:01:17,360
and then the outcome of the bulk

33
00:01:17,360 --> 00:01:18,960
analysis that i did

34
00:01:18,960 --> 00:01:22,479
and in the end i have a conclusion

35
00:01:22,479 --> 00:01:24,720
to tie it all back together

36
00:01:24,720 --> 00:01:27,040
so first of all who am i well my name is

37
00:01:27,040 --> 00:01:29,280
uh max guersta i go by the nickname of

38
00:01:29,280 --> 00:01:30,240
libra

39
00:01:30,240 --> 00:01:33,280
or libra analysis on twitter

40
00:01:33,280 --> 00:01:36,000
and currently i'm working for mcafee's

41
00:01:36,000 --> 00:01:39,200
advanced research team

42
00:01:39,200 --> 00:01:41,280
in my spare time i write blogs uh

43
00:01:41,280 --> 00:01:43,040
although also for work

44
00:01:43,040 --> 00:01:46,079
um i have wrote my own binary analysis

45
00:01:46,079 --> 00:01:49,280
course uh which people can i can use to

46
00:01:49,280 --> 00:01:51,200
get into reverse engineering and

47
00:01:51,200 --> 00:01:54,399
analyzing malware and i write software

48
00:01:54,399 --> 00:01:56,560
as well last year i gave a presentation

49
00:01:56,560 --> 00:01:57,759
here

50
00:01:57,759 --> 00:01:59,040
at the confidence conference about

51
00:01:59,040 --> 00:02:00,960
android project creator

52
00:02:00,960 --> 00:02:03,119
which is a tool you can use to analyze

53
00:02:03,119 --> 00:02:05,040
apks

54
00:02:05,040 --> 00:02:07,280
so that's how i uh

55
00:02:07,280 --> 00:02:08,878
i spend my time

56
00:02:08,878 --> 00:02:11,038
basically

57
00:02:11,038 --> 00:02:13,599
but moving on to to this topic what are

58
00:02:13,599 --> 00:02:16,080
loaders so really briefly

59
00:02:16,080 --> 00:02:17,520
a loader is

60
00:02:17,520 --> 00:02:19,440
used to load as its name already

61
00:02:19,440 --> 00:02:20,640
indicates

62
00:02:20,640 --> 00:02:23,280
indicates a remote payload uh or a

63
00:02:23,280 --> 00:02:25,360
payload that's embedded within the file

64
00:02:25,360 --> 00:02:27,760
so it can be either or both

65
00:02:27,760 --> 00:02:30,800
um and it can have additional defensive

66
00:02:30,800 --> 00:02:33,200
measures so it might be checking if it's

67
00:02:33,200 --> 00:02:34,879
running in a sandbox in a virtual

68
00:02:34,879 --> 00:02:38,560
machine if antivirus is installed and it

69
00:02:38,560 --> 00:02:41,040
might abort the execution or perform

70
00:02:41,040 --> 00:02:42,000
other

71
00:02:42,000 --> 00:02:43,440
measures

72
00:02:43,440 --> 00:02:46,319
once these parts are encountered and now

73
00:02:46,319 --> 00:02:47,680
these payloads

74
00:02:47,680 --> 00:02:49,599
that are within these loaders

75
00:02:49,599 --> 00:02:51,599
they are generally encrypted and or

76
00:02:51,599 --> 00:02:53,840
obfuscated because otherwise it wouldn't

77
00:02:53,840 --> 00:02:57,840
make too much sense to use a loader

78
00:02:58,000 --> 00:03:00,959
if you have a narrow rule for a specific

79
00:03:00,959 --> 00:03:01,920
family

80
00:03:01,920 --> 00:03:03,519
let's say agent tesla because that will

81
00:03:03,519 --> 00:03:05,840
become relevant later on in this town

82
00:03:05,840 --> 00:03:09,200
and the rule will match the family that

83
00:03:09,200 --> 00:03:11,360
you're looking for however if i were to

84
00:03:11,360 --> 00:03:14,239
put agent tesla in a loader then your

85
00:03:14,239 --> 00:03:17,680
yara rule would not catch the uh the

86
00:03:17,680 --> 00:03:21,519
loader has dropping agent tesla however

87
00:03:21,519 --> 00:03:24,400
it would obviously uh be working if you

88
00:03:24,400 --> 00:03:26,560
have a ur rule to detect this loader but

89
00:03:26,560 --> 00:03:28,239
then you still don't know what the

90
00:03:28,239 --> 00:03:30,159
payload family is so there's a

91
00:03:30,159 --> 00:03:32,400
distinction in there

92
00:03:32,400 --> 00:03:35,280
and the loaders can also be

93
00:03:35,280 --> 00:03:37,200
linked together so you can have one

94
00:03:37,200 --> 00:03:39,599
loader that loads the next

95
00:03:39,599 --> 00:03:41,519
and so forth and so forth

96
00:03:41,519 --> 00:03:43,200
although

97
00:03:43,200 --> 00:03:44,560
there's a there's a point where it

98
00:03:44,560 --> 00:03:45,599
doesn't

99
00:03:45,599 --> 00:03:48,879
really add anything to to link more

100
00:03:48,879 --> 00:03:52,400
but some people are really creative

101
00:03:52,400 --> 00:03:54,480
in this research i encountered at least

102
00:03:54,480 --> 00:03:57,120
one sample that was in a chain of 14

103
00:03:57,120 --> 00:03:58,159
loaders

104
00:03:58,159 --> 00:04:01,599
nearly identical ones as well

105
00:04:01,599 --> 00:04:03,360
so some people really

106
00:04:03,360 --> 00:04:05,920
will see a benefit uh whereas others

107
00:04:05,920 --> 00:04:08,480
just try to to bypass

108
00:04:08,480 --> 00:04:10,319
the default security measures that a lot

109
00:04:10,319 --> 00:04:14,080
of companies have or they should have

110
00:04:14,080 --> 00:04:16,478
then the ag in the onion model

111
00:04:16,478 --> 00:04:17,600
so

112
00:04:17,600 --> 00:04:20,478
like i said loaders are used to

113
00:04:20,478 --> 00:04:23,199
get a payload on a target

114
00:04:23,199 --> 00:04:26,000
at b at one speed multiple times either

115
00:04:26,000 --> 00:04:28,080
works but in this case you want your

116
00:04:28,080 --> 00:04:30,960
company to have a network structure more

117
00:04:30,960 --> 00:04:33,199
like an onion rather than an egg

118
00:04:33,199 --> 00:04:36,080
so the egg has a really hard outer shell

119
00:04:36,080 --> 00:04:38,639
um which is nice you know when once you

120
00:04:38,639 --> 00:04:39,759
get out and

121
00:04:39,759 --> 00:04:41,280
you're baking a cake

122
00:04:41,280 --> 00:04:43,040
you just need to crack the egg put the

123
00:04:43,040 --> 00:04:45,600
the inside of the egg

124
00:04:45,600 --> 00:04:47,600
in the basket and you can continue

125
00:04:47,600 --> 00:04:48,639
however

126
00:04:48,639 --> 00:04:50,800
once an attacker is inside a network

127
00:04:50,800 --> 00:04:52,960
that has a really difficult perimeter to

128
00:04:52,960 --> 00:04:54,160
breach

129
00:04:54,160 --> 00:04:56,160
it's all fair game if there is nothing

130
00:04:56,160 --> 00:04:57,360
else in there

131
00:04:57,360 --> 00:05:00,160
however with the onion approach uh for

132
00:05:00,160 --> 00:05:02,000
every step along the way the attacker

133
00:05:02,000 --> 00:05:04,400
needs to have more effort and there's a

134
00:05:04,400 --> 00:05:06,720
higher chance of catching the attacker

135
00:05:06,720 --> 00:05:07,600
because

136
00:05:07,600 --> 00:05:09,840
we're all humans and we all make

137
00:05:09,840 --> 00:05:11,759
mistakes eventually

138
00:05:11,759 --> 00:05:13,280
so maybe it's not in the first layer

139
00:05:13,280 --> 00:05:16,240
maybe it's not in the second layer but

140
00:05:16,240 --> 00:05:18,560
if you need to struggle for every step

141
00:05:18,560 --> 00:05:19,680
of the way

142
00:05:19,680 --> 00:05:22,400
chances are that you will be catching

143
00:05:22,400 --> 00:05:25,039
the attacker much earlier on

144
00:05:25,039 --> 00:05:27,520
um and this also goes for the chain of

145
00:05:27,520 --> 00:05:29,680
execution for malware so we have the

146
00:05:29,680 --> 00:05:32,080
really common ones where you have a word

147
00:05:32,080 --> 00:05:34,960
macro or an office macro that then

148
00:05:34,960 --> 00:05:36,479
launches on powershell script it

149
00:05:36,479 --> 00:05:38,720
downloads something and executes it

150
00:05:38,720 --> 00:05:40,800
and then generally that's a loader

151
00:05:40,800 --> 00:05:42,800
that's fetched and then the loader might

152
00:05:42,800 --> 00:05:44,880
deploy the eventual

153
00:05:44,880 --> 00:05:47,600
malware itself so if you were to be able

154
00:05:47,600 --> 00:05:48,880
to avoid

155
00:05:48,880 --> 00:05:50,880
the first step but also the second and

156
00:05:50,880 --> 00:05:52,880
the third and the fourth then you would

157
00:05:52,880 --> 00:05:55,120
be as safe as possible however if your

158
00:05:55,120 --> 00:05:57,600
main focus is just on disabling the

159
00:05:57,600 --> 00:06:00,240
first step then the moment the first

160
00:06:00,240 --> 00:06:02,400
step changes or for some reason it

161
00:06:02,400 --> 00:06:04,960
didn't get

162
00:06:04,960 --> 00:06:07,759
blocked by the by the antivirus you're

163
00:06:07,759 --> 00:06:08,639
using

164
00:06:08,639 --> 00:06:12,479
and then you have no insight anymore so

165
00:06:12,479 --> 00:06:14,560
that's something that i i want to

166
00:06:14,560 --> 00:06:16,240
reflect on here

167
00:06:16,240 --> 00:06:19,440
um as the coverage of loaders and vlogs

168
00:06:19,440 --> 00:06:21,440
is quite often

169
00:06:21,440 --> 00:06:23,759
neglected or omitted

170
00:06:23,759 --> 00:06:24,639
and

171
00:06:24,639 --> 00:06:27,600
research is meant to be reproducible so

172
00:06:27,600 --> 00:06:29,520
if you have a loader

173
00:06:29,520 --> 00:06:32,240
within the chain of events then quite

174
00:06:32,240 --> 00:06:34,960
often it's only a small remark

175
00:06:34,960 --> 00:06:37,039
within the research paper

176
00:06:37,039 --> 00:06:38,479
i.e

177
00:06:38,479 --> 00:06:40,400
after unpacking the malware we found

178
00:06:40,400 --> 00:06:41,759
this and this

179
00:06:41,759 --> 00:06:43,680
although that is great and the sharing

180
00:06:43,680 --> 00:06:46,319
is appreciated it's also really

181
00:06:46,319 --> 00:06:50,400
useful for other researchers for other

182
00:06:50,400 --> 00:06:52,720
people in the industry to

183
00:06:52,720 --> 00:06:55,360
know how to do this

184
00:06:55,360 --> 00:06:57,039
but then again the

185
00:06:57,039 --> 00:06:59,440
absence in these reports is also

186
00:06:59,440 --> 00:07:01,039
understandable you have a limited scope

187
00:07:01,039 --> 00:07:03,199
to write about you have limited time to

188
00:07:03,199 --> 00:07:05,840
do so and the reuse of loaders for

189
00:07:05,840 --> 00:07:08,639
different families might also be

190
00:07:08,639 --> 00:07:11,360
repeating information in blogs

191
00:07:11,360 --> 00:07:13,520
so that was one of the good drives for

192
00:07:13,520 --> 00:07:17,120
me to write about this loader and

193
00:07:17,120 --> 00:07:18,880
because i wanted to shed some light on

194
00:07:18,880 --> 00:07:20,080
it

195
00:07:20,080 --> 00:07:22,240
i'm moving on to the attribution of this

196
00:07:22,240 --> 00:07:26,080
loader and the firm 360 total security

197
00:07:26,080 --> 00:07:27,880
links the loader to the

198
00:07:27,880 --> 00:07:29,440
actor.vendetta

199
00:07:29,440 --> 00:07:32,639
and during the research there is at

200
00:07:32,639 --> 00:07:35,120
least one leaked loader that i

201
00:07:35,120 --> 00:07:36,240
encountered

202
00:07:36,240 --> 00:07:38,000
and so

203
00:07:38,000 --> 00:07:39,360
that might that makes it really

204
00:07:39,360 --> 00:07:41,840
difficult for me at least

205
00:07:41,840 --> 00:07:43,039
to

206
00:07:43,039 --> 00:07:45,120
state who is using it or who is behind

207
00:07:45,120 --> 00:07:47,840
it and based on the public reports of

208
00:07:47,840 --> 00:07:49,280
this malware

209
00:07:49,280 --> 00:07:51,919
that we encountered

210
00:07:51,919 --> 00:07:54,639
the sectors have been really varying as

211
00:07:54,639 --> 00:07:57,280
well as the geographic locations

212
00:07:57,280 --> 00:08:00,479
where where the mother has been observed

213
00:08:00,479 --> 00:08:03,759
uh making the attribution from our side

214
00:08:03,759 --> 00:08:05,759
uh all

215
00:08:05,759 --> 00:08:09,039
difficult uh to say the very least

216
00:08:09,039 --> 00:08:11,199
so for now we're not attributing this to

217
00:08:11,199 --> 00:08:14,080
to any specific group

218
00:08:14,080 --> 00:08:15,280
it's more

219
00:08:15,280 --> 00:08:17,199
providing insight in how the malware

220
00:08:17,199 --> 00:08:19,520
works

221
00:08:19,599 --> 00:08:20,720
so

222
00:08:20,720 --> 00:08:23,440
like i started the talk out the cx sharp

223
00:08:23,440 --> 00:08:25,919
loader as we refer to it has multiple

224
00:08:25,919 --> 00:08:27,360
names

225
00:08:27,360 --> 00:08:29,039
the other

226
00:08:29,039 --> 00:08:32,399
common name for it is the v0 loader

227
00:08:32,399 --> 00:08:35,279
and in some cases also lazarus

228
00:08:35,279 --> 00:08:37,360
but this is not to be confused with the

229
00:08:37,360 --> 00:08:38,958
apt this is

230
00:08:38,958 --> 00:08:41,679
well purely distinct

231
00:08:41,679 --> 00:08:44,800
there's a great blog by g data's kristen

232
00:08:44,800 --> 00:08:46,160
hung

233
00:08:46,160 --> 00:08:48,480
who sheds light on ambiguous naming

234
00:08:48,480 --> 00:08:49,760
schemes

235
00:08:49,760 --> 00:08:52,800
for malware and also provides several

236
00:08:52,800 --> 00:08:54,399
potential solutions

237
00:08:54,399 --> 00:08:57,040
uh what we as an industry can do

238
00:08:57,040 --> 00:08:58,959
but i found it interesting to see that

239
00:08:58,959 --> 00:09:01,279
the names that were used were different

240
00:09:01,279 --> 00:09:02,959
even though the

241
00:09:02,959 --> 00:09:07,519
re zero has a higher well share so to

242
00:09:07,519 --> 00:09:11,279
and based on the total amount of samples

243
00:09:11,279 --> 00:09:13,040
42

244
00:09:13,040 --> 00:09:14,560
rather

245
00:09:14,560 --> 00:09:16,800
well it's rather big

246
00:09:16,800 --> 00:09:18,880
compared to the much lesser used 18

247
00:09:18,880 --> 00:09:21,120
percent of cx sharp so logically you

248
00:09:21,120 --> 00:09:22,959
would follow that if something is well

249
00:09:22,959 --> 00:09:25,279
nearly half of the samples

250
00:09:25,279 --> 00:09:28,320
that i encountered were named re zero

251
00:09:28,320 --> 00:09:29,920
it would make more sense to come up with

252
00:09:29,920 --> 00:09:31,920
that name as a

253
00:09:31,920 --> 00:09:33,200
default name

254
00:09:33,200 --> 00:09:35,839
so why isn't it well if we look at the

255
00:09:35,839 --> 00:09:39,200
first scene date on virustotal

256
00:09:39,200 --> 00:09:42,320
as is plotted on the horizontal axis

257
00:09:42,320 --> 00:09:45,760
and then we can see that the re-zero

258
00:09:45,760 --> 00:09:48,320
samples with the name re-zero

259
00:09:48,320 --> 00:09:50,399
only started emerging

260
00:09:50,399 --> 00:09:53,600
from february uh last year onwards

261
00:09:53,600 --> 00:09:57,360
however the cix sharp name has been

262
00:09:57,360 --> 00:10:00,399
used well quite a bit prior to that

263
00:10:00,399 --> 00:10:01,519
already

264
00:10:01,519 --> 00:10:02,839
in july

265
00:10:02,839 --> 00:10:06,079
2019 so the first occurrence here is

266
00:10:06,079 --> 00:10:07,760
probably what named the malware rather

267
00:10:07,760 --> 00:10:09,839
than the most frequent name

268
00:10:09,839 --> 00:10:13,680
but looking back it might be a

269
00:10:13,680 --> 00:10:16,000
easy conclusion to jump to to state that

270
00:10:16,000 --> 00:10:19,279
v0 would be the official name

271
00:10:19,279 --> 00:10:21,120
to refer to

272
00:10:21,120 --> 00:10:22,800
so this is more of a

273
00:10:22,800 --> 00:10:26,480
historical point of view to it

274
00:10:26,480 --> 00:10:29,040
so i've talked quite a lot about what is

275
00:10:29,040 --> 00:10:31,040
a loader what does it do

276
00:10:31,040 --> 00:10:33,120
in general but what does this loader do

277
00:10:33,120 --> 00:10:36,959
well in this case uh it first starts by

278
00:10:36,959 --> 00:10:39,440
decrypting the embedded payload if there

279
00:10:39,440 --> 00:10:42,000
is any uh in memory

280
00:10:42,000 --> 00:10:43,360
and parsing its

281
00:10:43,360 --> 00:10:46,800
its configuration file internally and

282
00:10:46,800 --> 00:10:49,120
then the main function is called

283
00:10:49,120 --> 00:10:51,920
and from then onwards it also depends on

284
00:10:51,920 --> 00:10:55,040
what the configuration file said

285
00:10:55,040 --> 00:10:57,760
when looking into the functions that it

286
00:10:57,760 --> 00:11:00,880
has so the dotted line indicates that it

287
00:11:00,880 --> 00:11:03,839
is potentially doing this whereas the

288
00:11:03,839 --> 00:11:06,240
solid line means that this is done for

289
00:11:06,240 --> 00:11:08,399
sure so the first few steps are always

290
00:11:08,399 --> 00:11:11,040
executed and then it depends on the

291
00:11:11,040 --> 00:11:13,120
version and also the configuration

292
00:11:13,120 --> 00:11:14,880
itself on what is

293
00:11:14,880 --> 00:11:17,600
performed in terms of actions so it can

294
00:11:17,600 --> 00:11:19,360
disable defender

295
00:11:19,360 --> 00:11:22,160
i've seen some samples but not enough to

296
00:11:22,160 --> 00:11:24,640
say it's a trend rather edited version

297
00:11:24,640 --> 00:11:26,079
of sorts

298
00:11:26,079 --> 00:11:30,079
that disable different antivirus suites

299
00:11:30,079 --> 00:11:32,720
but defender was embedded as a as a

300
00:11:32,720 --> 00:11:34,320
proper option

301
00:11:34,320 --> 00:11:36,959
a delay in execution using sleep i had

302
00:11:36,959 --> 00:11:40,160
to just wait x amount of seconds

303
00:11:40,160 --> 00:11:42,079
a message box can be displayed to the

304
00:11:42,079 --> 00:11:45,040
user with a fake error message

305
00:11:45,040 --> 00:11:46,720
the detection for both virtual

306
00:11:46,720 --> 00:11:50,320
environments and sandbox is possible

307
00:11:50,320 --> 00:11:53,360
and the execution of a remote payload

308
00:11:53,360 --> 00:11:55,760
the persistence as a scheduled task and

309
00:11:55,760 --> 00:11:58,959
the execution of the embedded payloads

310
00:11:58,959 --> 00:12:01,920
and note that the option to execute a

311
00:12:01,920 --> 00:12:03,920
remote payload and launch the embedded

312
00:12:03,920 --> 00:12:06,320
payload are

313
00:12:06,320 --> 00:12:08,639
combinable for the for the actor so you

314
00:12:08,639 --> 00:12:10,560
can have a remote payload that you

315
00:12:10,560 --> 00:12:12,240
launch only to launch your embedded

316
00:12:12,240 --> 00:12:14,480
payload afterwards and you can do this

317
00:12:14,480 --> 00:12:17,120
for a variety of reasons maybe you have

318
00:12:17,120 --> 00:12:19,440
a special implant you want to drop or

319
00:12:19,440 --> 00:12:21,440
you want to have different

320
00:12:21,440 --> 00:12:24,639
mower on the machine or you want to have

321
00:12:24,639 --> 00:12:26,560
a different goal

322
00:12:26,560 --> 00:12:29,200
you can you can do that in here

323
00:12:29,200 --> 00:12:30,959
but you can also obviously use your

324
00:12:30,959 --> 00:12:33,440
embedded payload to launch something and

325
00:12:33,440 --> 00:12:35,920
that will be up to the attackers

326
00:12:35,920 --> 00:12:36,800
well

327
00:12:36,800 --> 00:12:39,040
tactics techniques and procedures in

328
00:12:39,040 --> 00:12:40,720
that case

329
00:12:40,720 --> 00:12:42,959
so how does this look in code well they

330
00:12:42,959 --> 00:12:45,600
were nice enough to at least once use a

331
00:12:45,600 --> 00:12:48,800
version with very little obfuscation a

332
00:12:48,800 --> 00:12:50,320
little to none

333
00:12:50,320 --> 00:12:52,320
and include some some helpful symbols

334
00:12:52,320 --> 00:12:53,600
along the way

335
00:12:53,600 --> 00:12:56,560
uh so this is the main class uh with

336
00:12:56,560 --> 00:12:59,440
some an excerpt of some fields uh that

337
00:12:59,440 --> 00:13:02,079
are in there so you can see a string

338
00:13:02,079 --> 00:13:04,800
which is a password and you can see a

339
00:13:04,800 --> 00:13:06,720
byte area which is the payload so this

340
00:13:06,720 --> 00:13:08,639
is the embedded payload

341
00:13:08,639 --> 00:13:10,639
which is loaded from a resource then

342
00:13:10,639 --> 00:13:12,959
some sort of decryption is done and then

343
00:13:12,959 --> 00:13:15,120
some unscrambling it's done

344
00:13:15,120 --> 00:13:17,440
only to all result in the

345
00:13:17,440 --> 00:13:19,200
decrypted payload

346
00:13:19,200 --> 00:13:21,680
then there's a string called k which

347
00:13:21,680 --> 00:13:24,639
has some numeric values

348
00:13:24,639 --> 00:13:25,600
in there

349
00:13:25,600 --> 00:13:27,839
with a lot of pipes in between

350
00:13:27,839 --> 00:13:30,240
we can see that the string area below

351
00:13:30,240 --> 00:13:33,200
splits the given string into a string

352
00:13:33,200 --> 00:13:34,480
array

353
00:13:34,480 --> 00:13:38,560
based on two pipes so the string aa or

354
00:13:38,560 --> 00:13:40,320
the string area aaa

355
00:13:40,320 --> 00:13:43,519
is the config

356
00:13:43,519 --> 00:13:45,360
array in this case it's not necessarily

357
00:13:45,360 --> 00:13:48,160
a file and you can see in the two fields

358
00:13:48,160 --> 00:13:49,360
below that are included in the

359
00:13:49,360 --> 00:13:50,800
screenshot

360
00:13:50,800 --> 00:13:53,600
that based on in the value on a specific

361
00:13:53,600 --> 00:13:57,040
index of this array specific values

362
00:13:57,040 --> 00:14:00,160
are triggered within the malware

363
00:14:00,160 --> 00:14:02,480
so how does this look like

364
00:14:02,480 --> 00:14:04,480
within the main function right because

365
00:14:04,480 --> 00:14:07,920
so far in the previous slide uh i

366
00:14:07,920 --> 00:14:09,760
explained that first of all the program

367
00:14:09,760 --> 00:14:11,360
is started the

368
00:14:11,360 --> 00:14:14,480
payload is decrypted the config is set

369
00:14:14,480 --> 00:14:16,720
then we end up in the main function so

370
00:14:16,720 --> 00:14:19,279
you can see here that there are uh well

371
00:14:19,279 --> 00:14:22,720
as dn spy conveniently named flags

372
00:14:22,720 --> 00:14:25,680
and we can see that for example flag 2

373
00:14:25,680 --> 00:14:28,880
is a boolean which is true if the

374
00:14:28,880 --> 00:14:30,720
anti-emulation

375
00:14:30,720 --> 00:14:33,519
value based on the configuration

376
00:14:33,519 --> 00:14:34,959
is equal to one

377
00:14:34,959 --> 00:14:37,839
and if this is true then windows

378
00:14:37,839 --> 00:14:39,199
defender

379
00:14:39,199 --> 00:14:40,800
is disabled

380
00:14:40,800 --> 00:14:42,399
and then we have more and more of these

381
00:14:42,399 --> 00:14:44,880
options for antivirus release virtual

382
00:14:44,880 --> 00:14:47,440
machines we have anti-sandboxes

383
00:14:47,440 --> 00:14:50,480
so we have a lot of options here

384
00:14:50,480 --> 00:14:53,600
to potentially go into our skip

385
00:14:53,600 --> 00:14:56,000
and we can also conveniently see that in

386
00:14:56,000 --> 00:14:57,519
case

387
00:14:57,519 --> 00:15:00,880
of the detection

388
00:15:00,880 --> 00:15:02,959
of a virtual machine as the function

389
00:15:02,959 --> 00:15:05,600
returns a boolean if this is true

390
00:15:05,600 --> 00:15:08,480
the program simply exits with the status

391
00:15:08,480 --> 00:15:10,839
code 0 which indicates a normal

392
00:15:10,839 --> 00:15:15,839
ending so how is the defender

393
00:15:15,839 --> 00:15:17,839
tool disabled

394
00:15:17,839 --> 00:15:20,079
basically by by changing some

395
00:15:20,079 --> 00:15:23,600
some registry settings on the computer

396
00:15:23,600 --> 00:15:26,720
and assuming that you have a specific

397
00:15:26,720 --> 00:15:29,040
identity on the computer because you

398
00:15:29,040 --> 00:15:30,160
need

399
00:15:30,160 --> 00:15:33,279
certain permissions to do this

400
00:15:33,279 --> 00:15:34,320
so the

401
00:15:34,320 --> 00:15:36,320
both the anti-sandboxing and the entry

402
00:15:36,320 --> 00:15:38,399
virtual machine

403
00:15:38,399 --> 00:15:40,720
functions are rather lengthy i just put

404
00:15:40,720 --> 00:15:43,040
like the first few lines of each as they

405
00:15:43,040 --> 00:15:44,639
they kind of

406
00:15:44,639 --> 00:15:46,160
reflect the sentiment

407
00:15:46,160 --> 00:15:48,399
and so the anti-virtual machine checks

408
00:15:48,399 --> 00:15:50,880
for the

409
00:15:50,880 --> 00:15:53,199
hardware that virtualbox

410
00:15:53,199 --> 00:15:55,199
well delivers to your computer which is

411
00:15:55,199 --> 00:15:56,639
obviously software

412
00:15:56,639 --> 00:15:58,959
and that you need for that

413
00:15:58,959 --> 00:16:01,600
and it does so for a lot of different

414
00:16:01,600 --> 00:16:04,079
different vendors

415
00:16:04,079 --> 00:16:05,120
and other

416
00:16:05,120 --> 00:16:07,920
tools that you will generally encounter

417
00:16:07,920 --> 00:16:10,480
on virtual machines

418
00:16:10,480 --> 00:16:12,720
and not on the normal machine

419
00:16:12,720 --> 00:16:17,120
well in case any of these checks returns

420
00:16:17,120 --> 00:16:19,600
is is present it returns true and as we

421
00:16:19,600 --> 00:16:21,279
saw in the previous screenshot of the

422
00:16:21,279 --> 00:16:23,680
program exits and the same goes for the

423
00:16:23,680 --> 00:16:26,160
empty sandbox it checks for modules it

424
00:16:26,160 --> 00:16:29,279
checks for names files

425
00:16:29,279 --> 00:16:31,199
you name it and there's there's quite

426
00:16:31,199 --> 00:16:33,120
some in there

427
00:16:33,120 --> 00:16:34,800
so that's how that's done within the

428
00:16:34,800 --> 00:16:36,959
loader moving on within the main

429
00:16:36,959 --> 00:16:38,079
function

430
00:16:38,079 --> 00:16:39,680
we can see here that it can download

431
00:16:39,680 --> 00:16:41,199
something

432
00:16:41,199 --> 00:16:42,639
and based on the

433
00:16:42,639 --> 00:16:44,880
config link and file name

434
00:16:44,880 --> 00:16:46,880
this file is downloaded and then

435
00:16:46,880 --> 00:16:48,079
executed

436
00:16:48,079 --> 00:16:50,880
and we can also see that it can persist

437
00:16:50,880 --> 00:16:52,480
using startup

438
00:16:52,480 --> 00:16:55,920
and we have two different versions of

439
00:16:55,920 --> 00:16:58,240
the payload execution in the bottom we

440
00:16:58,240 --> 00:17:00,560
see flight 10 and flag 11

441
00:17:00,560 --> 00:17:02,639
where we have reflection and the start

442
00:17:02,639 --> 00:17:05,280
of the injection

443
00:17:05,280 --> 00:17:07,599
but first i want to talk a bit about the

444
00:17:07,599 --> 00:17:10,400
startup and the startup or persistence

445
00:17:10,400 --> 00:17:13,439
is done via the scheduled tasks and this

446
00:17:13,439 --> 00:17:15,760
is actually what led me to find

447
00:17:15,760 --> 00:17:17,919
over 500 different versions of this

448
00:17:17,919 --> 00:17:20,000
loader

449
00:17:20,000 --> 00:17:23,119
in a variety of platforms online

450
00:17:23,119 --> 00:17:25,439
because they have a

451
00:17:25,439 --> 00:17:27,839
template that they load

452
00:17:27,839 --> 00:17:29,600
based on

453
00:17:29,600 --> 00:17:32,320
the scheduled tasks or how you should

454
00:17:32,320 --> 00:17:34,320
submit one and they only replace the

455
00:17:34,320 --> 00:17:35,840
name and the file

456
00:17:35,840 --> 00:17:37,200
file name

457
00:17:37,200 --> 00:17:40,640
within but there's a very specific

458
00:17:40,640 --> 00:17:42,559
way that this template looks like as you

459
00:17:42,559 --> 00:17:44,240
can see the square brackets with

460
00:17:44,240 --> 00:17:46,559
location and user id are within the

461
00:17:46,559 --> 00:17:47,679
resource

462
00:17:47,679 --> 00:17:49,840
and if you were to run strings on such a

463
00:17:49,840 --> 00:17:51,760
binary you could actually

464
00:17:51,760 --> 00:17:53,520
view the full

465
00:17:53,520 --> 00:17:55,120
resource

466
00:17:55,120 --> 00:17:56,799
now the point here is that if you were

467
00:17:56,799 --> 00:17:59,600
to obfuscate a sample

468
00:17:59,600 --> 00:18:01,840
then you will not be able to view it if

469
00:18:01,840 --> 00:18:04,559
you were to use computer x for example

470
00:18:04,559 --> 00:18:06,960
um depending on the settings but

471
00:18:06,960 --> 00:18:10,080
if done properly the resource itself is

472
00:18:10,080 --> 00:18:13,120
not really human readable anymore

473
00:18:13,120 --> 00:18:16,000
so you would in some cases need some

474
00:18:16,000 --> 00:18:18,160
de-obfuscation prior to running a yara

475
00:18:18,160 --> 00:18:19,039
rule

476
00:18:19,039 --> 00:18:21,120
that matches this

477
00:18:21,120 --> 00:18:23,840
but still it's a it's an interesting way

478
00:18:23,840 --> 00:18:25,440
to find

479
00:18:25,440 --> 00:18:28,400
well one linking pin for all samples

480
00:18:28,400 --> 00:18:31,520
and the date on which the scheduled task

481
00:18:31,520 --> 00:18:34,320
is allegedly first installed

482
00:18:34,320 --> 00:18:37,600
is very specific and from 2014

483
00:18:37,600 --> 00:18:38,960
which is also

484
00:18:38,960 --> 00:18:41,360
interesting if you look at the

485
00:18:41,360 --> 00:18:44,720
schedule tasks on your machine

486
00:18:44,720 --> 00:18:46,960
moving on to the execution

487
00:18:46,960 --> 00:18:50,160
uh the reflection is

488
00:18:50,160 --> 00:18:52,000
loading a different domain binary and it

489
00:18:52,000 --> 00:18:54,720
needs the binary for this to work

490
00:18:54,720 --> 00:18:56,400
after which

491
00:18:56,400 --> 00:18:58,000
the entry point

492
00:18:58,000 --> 00:18:59,200
of the

493
00:18:59,200 --> 00:19:01,039
file is invoked

494
00:19:01,039 --> 00:19:03,440
potentially with an empty string

495
00:19:03,440 --> 00:19:06,160
[Music]

496
00:19:06,160 --> 00:19:08,720
as a with an empty string array

497
00:19:08,720 --> 00:19:10,640
but um

498
00:19:10,640 --> 00:19:14,000
if need be and otherwise uh without

499
00:19:14,000 --> 00:19:15,919
if anything goes wrong here meaning if

500
00:19:15,919 --> 00:19:18,160
the binary is not based on

501
00:19:18,160 --> 00:19:20,720
the framework or for any other reason

502
00:19:20,720 --> 00:19:23,039
anything goes wrong it moves to the

503
00:19:23,039 --> 00:19:25,679
start inject this is also the

504
00:19:25,679 --> 00:19:28,570
other way of launching the payload

505
00:19:28,570 --> 00:19:29,840
[Music]

506
00:19:29,840 --> 00:19:32,320
this is a process hollowing

507
00:19:32,320 --> 00:19:33,679
function

508
00:19:33,679 --> 00:19:35,120
using the

509
00:19:35,120 --> 00:19:37,520
interoperability

510
00:19:37,520 --> 00:19:41,520
service of net meaning it can use native

511
00:19:41,520 --> 00:19:42,720
system calls

512
00:19:42,720 --> 00:19:44,880
and native information along with the

513
00:19:44,880 --> 00:19:48,000
help of certain structures that you need

514
00:19:48,000 --> 00:19:50,640
and then it performs the normal

515
00:19:50,640 --> 00:19:53,280
way of process handling

516
00:19:53,280 --> 00:19:54,799
a target

517
00:19:54,799 --> 00:19:57,520
the target itself is based upon

518
00:19:57,520 --> 00:19:59,520
the config itself so there are multiple

519
00:19:59,520 --> 00:20:01,520
options in here

520
00:20:01,520 --> 00:20:04,000
all based on either binaries that are

521
00:20:04,000 --> 00:20:06,960
present on windows or the loader itself

522
00:20:06,960 --> 00:20:10,400
but i'll get back to that later on

523
00:20:10,400 --> 00:20:12,799
the class itself

524
00:20:12,799 --> 00:20:16,320
based on the code similarity we

525
00:20:16,320 --> 00:20:19,520
change that back to the

526
00:20:19,520 --> 00:20:23,360
run pe class of 9x cad on github

527
00:20:23,360 --> 00:20:25,600
even though the compiled code looks

528
00:20:25,600 --> 00:20:26,960
slightly different on the right than it

529
00:20:26,960 --> 00:20:27,919
does

530
00:20:27,919 --> 00:20:29,600
when you look at the github version on

531
00:20:29,600 --> 00:20:30,559
the left

532
00:20:30,559 --> 00:20:33,120
we can clearly see the

533
00:20:33,120 --> 00:20:36,640
for loop which tries five times to start

534
00:20:36,640 --> 00:20:38,640
the sample and if you look on the right

535
00:20:38,640 --> 00:20:40,640
side we can see the bro dot handle run

536
00:20:40,640 --> 00:20:43,440
which is the following itself

537
00:20:43,440 --> 00:20:46,840
is executed five times

538
00:20:46,840 --> 00:20:48,400
maximum

539
00:20:48,400 --> 00:20:51,600
uh and otherwise uh it basically fails

540
00:20:51,600 --> 00:20:53,600
uh based on the well it's a bit obscure

541
00:20:53,600 --> 00:20:55,039
but based on the coaching and the

542
00:20:55,039 --> 00:20:57,760
returns there

543
00:20:57,919 --> 00:20:58,960
so we

544
00:20:58,960 --> 00:21:00,559
based on the code similarity we assume

545
00:21:00,559 --> 00:21:02,559
that the public source code here has

546
00:21:02,559 --> 00:21:03,760
been used

547
00:21:03,760 --> 00:21:07,120
but this is no indication or provides no

548
00:21:07,120 --> 00:21:08,960
information on the fact that this actor

549
00:21:08,960 --> 00:21:11,200
would be tied to this loader

550
00:21:11,200 --> 00:21:13,039
and we have no

551
00:21:13,039 --> 00:21:16,480
evidence for such a claim but just to

552
00:21:16,480 --> 00:21:20,320
avoid speculation i want to mention that

553
00:21:20,320 --> 00:21:23,919
so the loader itself like a lot of more

554
00:21:23,919 --> 00:21:25,760
changed over time

555
00:21:25,760 --> 00:21:29,039
and what we mostly have seen is that the

556
00:21:29,039 --> 00:21:30,960
configuration's array

557
00:21:30,960 --> 00:21:33,440
size has increased so in the graph below

558
00:21:33,440 --> 00:21:36,080
you can see that conflict 29 conflict 37

559
00:21:36,080 --> 00:21:37,640
and conflict 38

560
00:21:37,640 --> 00:21:39,200
[Music]

561
00:21:39,200 --> 00:21:43,600
are blue orange and gray respectively

562
00:21:43,600 --> 00:21:46,159
and we can also see clearly how one

563
00:21:46,159 --> 00:21:48,559
version died out and the next one

564
00:21:48,559 --> 00:21:50,400
was used

565
00:21:50,400 --> 00:21:52,640
be it that of some samples for example

566
00:21:52,640 --> 00:21:54,240
on december 20

567
00:21:54,240 --> 00:21:56,799
and 2020 we can still see some

568
00:21:56,799 --> 00:21:59,280
examples of conflict 29

569
00:21:59,280 --> 00:22:02,159
but the majority of its usage was way

570
00:22:02,159 --> 00:22:04,000
before that

571
00:22:04,000 --> 00:22:05,120
so

572
00:22:05,120 --> 00:22:07,679
these new fields within the area also

573
00:22:07,679 --> 00:22:09,760
provide options

574
00:22:09,760 --> 00:22:12,480
for new

575
00:22:12,480 --> 00:22:14,720
new functionalities that they added

576
00:22:14,720 --> 00:22:16,480
so in the screenshot i shared early on

577
00:22:16,480 --> 00:22:19,200
the sleep was always present between 45

578
00:22:19,200 --> 00:22:22,320
and 60 seconds based on random value

579
00:22:22,320 --> 00:22:23,840
between those

580
00:22:23,840 --> 00:22:26,080
however in later versions the sleep

581
00:22:26,080 --> 00:22:28,400
functionality is configurable

582
00:22:28,400 --> 00:22:31,039
both to turn it on and off but also to

583
00:22:31,039 --> 00:22:33,919
configure a set length that you as an

584
00:22:33,919 --> 00:22:36,960
actor want and the custom message box

585
00:22:36,960 --> 00:22:38,159
prompt

586
00:22:38,159 --> 00:22:41,840
can be shown to to a user uh be with

587
00:22:41,840 --> 00:22:44,080
whatever message and whatever style you

588
00:22:44,080 --> 00:22:45,039
want

589
00:22:45,039 --> 00:22:47,360
so it can be yes no with a warning or it

590
00:22:47,360 --> 00:22:49,679
can be only an okay dialogue

591
00:22:49,679 --> 00:22:53,280
so there's some freedom there as well

592
00:22:53,360 --> 00:22:54,880
so

593
00:22:54,880 --> 00:22:59,440
the collection of the 513 unique samples

594
00:22:59,440 --> 00:23:02,720
based on the variable has been completed

595
00:23:02,720 --> 00:23:04,000
for this

596
00:23:04,000 --> 00:23:06,559
thought experiment so the same so how do

597
00:23:06,559 --> 00:23:09,039
we then continue and talk about the fact

598
00:23:09,039 --> 00:23:12,960
that we want to extract the um

599
00:23:12,960 --> 00:23:15,440
payload and the configuration

600
00:23:15,440 --> 00:23:17,520
array for each of these samples without

601
00:23:17,520 --> 00:23:19,919
doing it manually obviously

602
00:23:19,919 --> 00:23:22,320
even though 513 is a lot of work it can

603
00:23:22,320 --> 00:23:24,480
still be done manually but ideally you

604
00:23:24,480 --> 00:23:27,440
want to work on something and have a

605
00:23:27,440 --> 00:23:30,000
tool that does this for you so you can

606
00:23:30,000 --> 00:23:32,000
further automate the process let's say a

607
00:23:32,000 --> 00:23:34,159
yara rule fetches

608
00:23:34,159 --> 00:23:37,039
or catches this loader and then you

609
00:23:37,039 --> 00:23:39,120
might want to refer to your extraction

610
00:23:39,120 --> 00:23:41,520
tool and say okay well i

611
00:23:41,520 --> 00:23:42,799
check what it does and give you the

612
00:23:42,799 --> 00:23:44,320
payload and then we can run the payload

613
00:23:44,320 --> 00:23:46,559
again to uh through the yara rules to

614
00:23:46,559 --> 00:23:49,279
see if we maybe have a hit on this

615
00:23:49,279 --> 00:23:50,720
and then it also doesn't matter if you

616
00:23:50,720 --> 00:23:53,039
were to chain this loader uh multiple

617
00:23:53,039 --> 00:23:54,880
times because you can keep this doing

618
00:23:54,880 --> 00:23:56,640
iteratively

619
00:23:56,640 --> 00:23:58,880
so the plan of approach is uh pretty

620
00:23:58,880 --> 00:24:00,559
straightforward we want to obtain the

621
00:24:00,559 --> 00:24:01,760
payload

622
00:24:01,760 --> 00:24:05,039
and the configuration area we want to

623
00:24:05,039 --> 00:24:07,120
decrypt the payload and we want to dump

624
00:24:07,120 --> 00:24:09,039
it to the disk because we want a copy of

625
00:24:09,039 --> 00:24:11,360
it i want to parse the configuration

626
00:24:11,360 --> 00:24:13,840
configuration in basically any form that

627
00:24:13,840 --> 00:24:17,039
we want to use

628
00:24:17,120 --> 00:24:20,080
but as a main caveat here

629
00:24:20,080 --> 00:24:22,559
uh avoid resetting the machine we're

630
00:24:22,559 --> 00:24:24,159
doing the analysis on because that would

631
00:24:24,159 --> 00:24:28,080
make the analysis a lot slower

632
00:24:28,240 --> 00:24:30,960
but it's not necessarily a hard

633
00:24:30,960 --> 00:24:33,360
requirement but it was one for me when i

634
00:24:33,360 --> 00:24:34,880
worked on this

635
00:24:34,880 --> 00:24:39,279
because i i figured it should be doable

636
00:24:39,440 --> 00:24:40,159
so

637
00:24:40,159 --> 00:24:42,159
how do we how do we go ahead well we can

638
00:24:42,159 --> 00:24:44,960
use the reflection related process that

639
00:24:44,960 --> 00:24:47,120
the net framework provides

640
00:24:47,120 --> 00:24:49,600
and obviously you need an ide of sorts

641
00:24:49,600 --> 00:24:52,880
or i used visual studio

642
00:24:52,880 --> 00:24:54,320
so

643
00:24:54,320 --> 00:24:56,720
classically and generally what you want

644
00:24:56,720 --> 00:24:58,000
to do is you want to recreate the

645
00:24:58,000 --> 00:24:59,919
decryption routine you want to fetch the

646
00:24:59,919 --> 00:25:03,120
resource and you want to decrypt it

647
00:25:03,120 --> 00:25:05,120
and then you want to go ahead with

648
00:25:05,120 --> 00:25:06,799
whatever you want to do with it but

649
00:25:06,799 --> 00:25:08,720
there are downsides here so it would

650
00:25:08,720 --> 00:25:11,200
require continuous maintenance

651
00:25:11,200 --> 00:25:13,120
simply due to the fact that a single

652
00:25:13,120 --> 00:25:14,559
change in the description routine would

653
00:25:14,559 --> 00:25:16,480
break your tool which is kind of a

654
00:25:16,480 --> 00:25:17,840
downside

655
00:25:17,840 --> 00:25:20,159
um but in some cases there's no other

656
00:25:20,159 --> 00:25:22,960
way around it however what you can also

657
00:25:22,960 --> 00:25:25,600
do is get lucky you can find a flaw

658
00:25:25,600 --> 00:25:28,240
and in this case static variables really

659
00:25:28,240 --> 00:25:30,159
prove their worth

660
00:25:30,159 --> 00:25:31,120
so

661
00:25:31,120 --> 00:25:33,440
just digging in on on static

662
00:25:33,440 --> 00:25:35,039
variables as you can see

663
00:25:35,039 --> 00:25:36,400
in the sphincter that i showed you

664
00:25:36,400 --> 00:25:37,840
earlier the

665
00:25:37,840 --> 00:25:40,080
variables are all static so what does

666
00:25:40,080 --> 00:25:41,360
this mean

667
00:25:41,360 --> 00:25:43,679
and why is this useful well for

668
00:25:43,679 --> 00:25:45,600
microsoft's documentation

669
00:25:45,600 --> 00:25:48,240
and in the quote that i have it says the

670
00:25:48,240 --> 00:25:50,159
type information for static class is

671
00:25:50,159 --> 00:25:51,919
loaded by the dotnet runtime with the

672
00:25:51,919 --> 00:25:53,840
program that references the class is

673
00:25:53,840 --> 00:25:54,799
loaded

674
00:25:54,799 --> 00:25:57,840
it is guaranteed to be loaded and and to

675
00:25:57,840 --> 00:26:00,320
have its fields initialized and its

676
00:26:00,320 --> 00:26:02,159
static constructor called before the

677
00:26:02,159 --> 00:26:03,840
class is referenced for the first time

678
00:26:03,840 --> 00:26:05,440
in your program

679
00:26:05,440 --> 00:26:07,840
so essentially if i were to load

680
00:26:07,840 --> 00:26:09,200
[Music]

681
00:26:09,200 --> 00:26:10,960
reflectively a

682
00:26:10,960 --> 00:26:13,360
tool uh or

683
00:26:13,360 --> 00:26:15,440
in one of the loader instances like a

684
00:26:15,440 --> 00:26:18,880
file and it would initialize all these

685
00:26:18,880 --> 00:26:21,360
static variables now in this case we can

686
00:26:21,360 --> 00:26:23,360
see that both the

687
00:26:23,360 --> 00:26:26,880
um declaration of the variable payload

688
00:26:26,880 --> 00:26:29,279
but also the initialization is done at

689
00:26:29,279 --> 00:26:32,000
once um because we can see that it

690
00:26:32,000 --> 00:26:34,640
payload equals extra unscramble yada

691
00:26:34,640 --> 00:26:35,760
yada

692
00:26:35,760 --> 00:26:39,279
so essentially once we load the

693
00:26:39,279 --> 00:26:41,840
file in memory this code is executed and

694
00:26:41,840 --> 00:26:44,480
we can simply fetch the

695
00:26:44,480 --> 00:26:45,520
payload

696
00:26:45,520 --> 00:26:48,559
in raw form from memory thereby

697
00:26:48,559 --> 00:26:51,679
we do not care if the sort decryption

698
00:26:51,679 --> 00:26:54,640
changes if the unscramble changes or if

699
00:26:54,640 --> 00:26:57,039
they find a completely new way of

700
00:26:57,039 --> 00:26:59,520
decrypting it as long as they keep it

701
00:26:59,520 --> 00:27:02,880
statically um like this

702
00:27:02,880 --> 00:27:05,200
now note here is that it's a it's a

703
00:27:05,200 --> 00:27:06,880
private field

704
00:27:06,880 --> 00:27:08,960
but for that we don't really care too

705
00:27:08,960 --> 00:27:09,919
much

706
00:27:09,919 --> 00:27:11,840
as you will see in a bit

707
00:27:11,840 --> 00:27:15,200
so obfuscation becomes uh irrelevant for

708
00:27:15,200 --> 00:27:16,720
this piece obviously if you were to

709
00:27:16,720 --> 00:27:19,200
analyze it manually or look at it i want

710
00:27:19,200 --> 00:27:22,240
to find differences between versions

711
00:27:22,240 --> 00:27:24,399
it will become relevant again

712
00:27:24,399 --> 00:27:26,559
but the fields are assigned their value

713
00:27:26,559 --> 00:27:29,520
prior to being accessed and if you have

714
00:27:29,520 --> 00:27:32,240
confusedrx for example enjoys static

715
00:27:32,240 --> 00:27:33,520
constructors

716
00:27:33,520 --> 00:27:35,840
which then assigns the value and these

717
00:27:35,840 --> 00:27:38,480
are also executed prior to

718
00:27:38,480 --> 00:27:40,480
the access that we want

719
00:27:40,480 --> 00:27:42,320
so the new kind of approach is even

720
00:27:42,320 --> 00:27:44,720
simpler we don't simply want to load it

721
00:27:44,720 --> 00:27:46,880
and then we want to find and handle the

722
00:27:46,880 --> 00:27:49,279
required fields within the binary now

723
00:27:49,279 --> 00:27:51,279
there's an asterisk here next to

724
00:27:51,279 --> 00:27:52,720
the

725
00:27:52,720 --> 00:27:54,159
load part

726
00:27:54,159 --> 00:27:55,919
because there are different ways of

727
00:27:55,919 --> 00:27:57,039
loading it you can load it for

728
00:27:57,039 --> 00:27:59,600
reflection only you can fully load it

729
00:27:59,600 --> 00:28:01,200
but in this case

730
00:28:01,200 --> 00:28:03,679
i just use the assembly.load after

731
00:28:03,679 --> 00:28:06,320
getting the binary as a

732
00:28:06,320 --> 00:28:08,080
white array

733
00:28:08,080 --> 00:28:10,640
but uh well feel free to to change some

734
00:28:10,640 --> 00:28:13,279
stuff there if you want

735
00:28:13,279 --> 00:28:15,279
and you do need some settings in your

736
00:28:15,279 --> 00:28:17,120
visual studio project as well as you

737
00:28:17,120 --> 00:28:18,480
need to allow

738
00:28:18,480 --> 00:28:21,600
as uh interested code from external

739
00:28:21,600 --> 00:28:23,120
sources because that's that's what

740
00:28:23,120 --> 00:28:26,640
you're doing otherwise it cannot execute

741
00:28:26,640 --> 00:28:28,559
this talk will cover the the main

742
00:28:28,559 --> 00:28:32,320
concepts briefly but the link here

743
00:28:32,320 --> 00:28:34,960
covers a complete write-up on how to to

744
00:28:34,960 --> 00:28:36,399
make such a

745
00:28:36,399 --> 00:28:38,399
extractor

746
00:28:38,399 --> 00:28:41,600
so this is a really shortened version

747
00:28:41,600 --> 00:28:42,640
of the

748
00:28:42,640 --> 00:28:45,120
extraction class so basically you

749
00:28:45,120 --> 00:28:47,279
provide the path to a file to this

750
00:28:47,279 --> 00:28:48,320
function

751
00:28:48,320 --> 00:28:51,039
you then create a assembly object using

752
00:28:51,039 --> 00:28:53,679
assembly.loadfile

753
00:28:53,679 --> 00:28:55,440
and then you just iterate over all the

754
00:28:55,440 --> 00:28:56,480
types

755
00:28:56,480 --> 00:28:58,159
within that file so basically these are

756
00:28:58,159 --> 00:28:59,760
the classes

757
00:28:59,760 --> 00:29:02,159
now then we want to get the fields from

758
00:29:02,159 --> 00:29:04,080
each class we want to get the fields

759
00:29:04,080 --> 00:29:06,480
that are non-public i.e private and we

760
00:29:06,480 --> 00:29:09,520
want to get all fields that are static

761
00:29:09,520 --> 00:29:11,760
so we get all these back

762
00:29:11,760 --> 00:29:14,000
then we simply iterate over them

763
00:29:14,000 --> 00:29:16,960
as we want to get their value

764
00:29:16,960 --> 00:29:18,559
and uh

765
00:29:18,559 --> 00:29:19,679
per field

766
00:29:19,679 --> 00:29:22,640
and we want to check the type so if the

767
00:29:22,640 --> 00:29:24,880
value is a string array then it might

768
00:29:24,880 --> 00:29:26,799
get interesting

769
00:29:26,799 --> 00:29:29,440
um and if the value is a byte area it

770
00:29:29,440 --> 00:29:31,520
might also get interesting now take in

771
00:29:31,520 --> 00:29:34,559
mind that uh simply checking the type is

772
00:29:34,559 --> 00:29:37,200
not necessarily a good idea to only do

773
00:29:37,200 --> 00:29:38,000
that

774
00:29:38,000 --> 00:29:40,240
uh mainly because there can be multiple

775
00:29:40,240 --> 00:29:43,120
string areas within uh the binary

776
00:29:43,120 --> 00:29:45,120
and also multiple byte arrays so in this

777
00:29:45,120 --> 00:29:48,159
case i added a check um to check if the

778
00:29:48,159 --> 00:29:50,159
length is more than 28 and given that

779
00:29:50,159 --> 00:29:52,240
it's quite sizable

780
00:29:52,240 --> 00:29:55,279
you can fairly safely assume

781
00:29:55,279 --> 00:29:58,080
that this is uh indeed the uh the

782
00:29:58,080 --> 00:30:00,399
conflict array that we're talking about

783
00:30:00,399 --> 00:30:02,640
and in this case uh

784
00:30:02,640 --> 00:30:05,520
some values are printed um obviously

785
00:30:05,520 --> 00:30:08,080
there's a lot more to it but then you

786
00:30:08,080 --> 00:30:09,840
would either have font size zero in the

787
00:30:09,840 --> 00:30:11,840
screenshot or we would have tons of

788
00:30:11,840 --> 00:30:14,799
screenshots hence the the write up and

789
00:30:14,799 --> 00:30:17,120
for the byte array there's a check for

790
00:30:17,120 --> 00:30:19,279
the first and second byte basically for

791
00:30:19,279 --> 00:30:20,840
the pe header

792
00:30:20,840 --> 00:30:24,240
um so if it's a pe file we write it

793
00:30:24,240 --> 00:30:26,320
back to the path that was originally

794
00:30:26,320 --> 00:30:29,200
given but we append underscore extracted

795
00:30:29,200 --> 00:30:31,520
to the newly created file

796
00:30:31,520 --> 00:30:34,000
so based on this we have all the data we

797
00:30:34,000 --> 00:30:35,039
have the

798
00:30:35,039 --> 00:30:37,840
config and we have the payload and we

799
00:30:37,840 --> 00:30:42,240
can then continue with the bulk analysis

800
00:30:42,240 --> 00:30:43,840
so

801
00:30:43,840 --> 00:30:46,080
given that the yara rule

802
00:30:46,080 --> 00:30:47,840
is on

803
00:30:47,840 --> 00:30:51,679
vt or this pt links it to the etr

804
00:30:51,679 --> 00:30:53,039
repository

805
00:30:53,039 --> 00:30:55,600
if you were to find this one on

806
00:30:55,600 --> 00:30:57,279
fire's total you actually do get the

807
00:30:57,279 --> 00:30:58,960
notification

808
00:30:58,960 --> 00:31:00,960
and the rule itself is also

809
00:31:00,960 --> 00:31:03,039
publicly available if you want to use it

810
00:31:03,039 --> 00:31:04,799
in in-house scanning or for different

811
00:31:04,799 --> 00:31:06,000
research

812
00:31:06,000 --> 00:31:07,919
so all figures i'll be talking about are

813
00:31:07,919 --> 00:31:10,080
about the 513

814
00:31:10,080 --> 00:31:11,760
loader so if you see percentages that's

815
00:31:11,760 --> 00:31:14,000
what it based on unless specified

816
00:31:14,000 --> 00:31:16,159
otherwise

817
00:31:16,159 --> 00:31:18,399
now the execution method has several

818
00:31:18,399 --> 00:31:20,960
options you can uh hollow ms build you

819
00:31:20,960 --> 00:31:23,919
can hollow vbc you can hollow the

820
00:31:23,919 --> 00:31:26,720
red reg service

821
00:31:26,720 --> 00:31:28,480
you can hollow the loader

822
00:31:28,480 --> 00:31:31,039
and you can do a direct launch now 72

823
00:31:31,039 --> 00:31:33,200
percent of all loaders uh hollows the

824
00:31:33,200 --> 00:31:34,240
loader

825
00:31:34,240 --> 00:31:35,120
uh

826
00:31:35,120 --> 00:31:37,120
or a new instance of the loader uh

827
00:31:37,120 --> 00:31:40,080
technically that is uh but only 10 goes

828
00:31:40,080 --> 00:31:42,720
for a direct launch of the payload

829
00:31:42,720 --> 00:31:44,960
having said that the direct launch in

830
00:31:44,960 --> 00:31:46,720
old versions is

831
00:31:46,720 --> 00:31:48,000
basically

832
00:31:48,000 --> 00:31:50,000
still process following because it

833
00:31:50,000 --> 00:31:52,559
launches a second embedded payload which

834
00:31:52,559 --> 00:31:54,320
is only there to perform process

835
00:31:54,320 --> 00:31:56,399
following so the 10

836
00:31:56,399 --> 00:31:59,519
is potentially even less but at least

837
00:31:59,519 --> 00:32:02,159
10 percent

838
00:32:02,960 --> 00:32:04,080
the

839
00:32:04,080 --> 00:32:06,320
scheduled tasks uh are interesting as

840
00:32:06,320 --> 00:32:08,720
well to see because roughly half

841
00:32:08,720 --> 00:32:09,840
or

842
00:32:09,840 --> 00:32:11,519
54

843
00:32:11,519 --> 00:32:13,440
of the loaders used for systems whereas

844
00:32:13,440 --> 00:32:15,360
the roughly other half

845
00:32:15,360 --> 00:32:16,320
didn't

846
00:32:16,320 --> 00:32:19,120
but take in mind here

847
00:32:19,120 --> 00:32:21,919
at the fact that since loaders are often

848
00:32:21,919 --> 00:32:25,039
linked or chained so to say

849
00:32:25,039 --> 00:32:27,279
and the

850
00:32:27,279 --> 00:32:31,600
frequency of the cix sharp loader is

851
00:32:31,600 --> 00:32:33,919
probably higher than the 500 or so

852
00:32:33,919 --> 00:32:37,440
samples i encountered as these

853
00:32:37,440 --> 00:32:40,399
hits were only first in line so if you

854
00:32:40,399 --> 00:32:43,360
do a retro hunt and

855
00:32:43,360 --> 00:32:45,279
for example then it doesn't check what

856
00:32:45,279 --> 00:32:47,200
else is executed in memory so if there's

857
00:32:47,200 --> 00:32:48,720
a different loader prior to it then you

858
00:32:48,720 --> 00:32:50,240
won't find it

859
00:32:50,240 --> 00:32:52,480
so other loaders can provide persistence

860
00:32:52,480 --> 00:32:54,880
for mower samples some of our samples

861
00:32:54,880 --> 00:32:57,760
don't care about resistance

862
00:32:57,760 --> 00:33:00,799
and in in other cases the final payload

863
00:33:00,799 --> 00:33:01,919
itself

864
00:33:01,919 --> 00:33:03,760
actually has a resistance mechanism

865
00:33:03,760 --> 00:33:06,799
built in on its own uh meaning that no

866
00:33:06,799 --> 00:33:09,679
loader is required to do so so it's it's

867
00:33:09,679 --> 00:33:12,000
interesting to see that half of it uh

868
00:33:12,000 --> 00:33:14,159
used it but it doesn't mean that only

869
00:33:14,159 --> 00:33:16,159
half of the payloads persist itself on

870
00:33:16,159 --> 00:33:18,720
the target

871
00:33:18,799 --> 00:33:20,880
and then talking about sleep or delayed

872
00:33:20,880 --> 00:33:22,080
execution

873
00:33:22,080 --> 00:33:24,960
uh if you will so

874
00:33:24,960 --> 00:33:26,159
uh the

875
00:33:26,159 --> 00:33:28,399
uh only a small percentage of the

876
00:33:28,399 --> 00:33:31,120
loaders actually used sleep about 22

877
00:33:31,120 --> 00:33:32,880
23

878
00:33:32,880 --> 00:33:34,960
um but what was interesting to see is

879
00:33:34,960 --> 00:33:37,200
that the sleep time itself is is roughly

880
00:33:37,200 --> 00:33:39,360
based around what humans see as round

881
00:33:39,360 --> 00:33:40,480
numbers

882
00:33:40,480 --> 00:33:44,250
so you can see that there's 5 10 15

883
00:33:44,250 --> 00:33:45,360
[Music]

884
00:33:45,360 --> 00:33:47,120
30 45

885
00:33:47,120 --> 00:33:49,840
those are our small peaks

886
00:33:49,840 --> 00:33:53,120
in terms of how many seconds sleep

887
00:33:53,120 --> 00:33:54,480
should be

888
00:33:54,480 --> 00:33:56,880
used or the sample should sleep for that

889
00:33:56,880 --> 00:33:57,919
length

890
00:33:57,919 --> 00:34:01,360
and you can also see that 60 66 and 600

891
00:34:01,360 --> 00:34:03,120
are also

892
00:34:03,120 --> 00:34:06,240
normal for for humans because we just

893
00:34:06,240 --> 00:34:09,440
press six two times rather than sixty um

894
00:34:09,440 --> 00:34:11,359
but but it's an interesting perspective

895
00:34:11,359 --> 00:34:13,839
to to see what preference there is among

896
00:34:13,839 --> 00:34:14,879
actors

897
00:34:14,879 --> 00:34:16,320
um

898
00:34:16,320 --> 00:34:19,520
but even a few seconds sleep uh

899
00:34:19,520 --> 00:34:21,520
will not matter too much once on the

900
00:34:21,520 --> 00:34:24,639
system from a defensive point of view uh

901
00:34:24,639 --> 00:34:26,560
however it might help with other forms

902
00:34:26,560 --> 00:34:30,000
of detection invasion

903
00:34:30,079 --> 00:34:34,760
and then we uh head into the topic of

904
00:34:34,760 --> 00:34:36,879
anti-something so it can be anti-virtual

905
00:34:36,879 --> 00:34:38,560
machine and sandbox

906
00:34:38,560 --> 00:34:40,159
and we can see that

907
00:34:40,159 --> 00:34:41,199
nearly

908
00:34:41,199 --> 00:34:44,159
four-fifths do not really do anything

909
00:34:44,159 --> 00:34:46,079
against

910
00:34:46,079 --> 00:34:48,639
analysis platforms we can see that

911
00:34:48,639 --> 00:34:53,280
roughly uh 10 for ntvm and roughly 11

912
00:34:53,280 --> 00:34:55,679
for anti-sandbox was there and about

913
00:34:55,679 --> 00:34:58,079
eight percent of the loaders had both

914
00:34:58,079 --> 00:35:01,760
options so those were both mdpm and

915
00:35:01,760 --> 00:35:04,079
um the numbers here are quite low but it

916
00:35:04,079 --> 00:35:06,400
doesn't prove nor disprove the claim

917
00:35:06,400 --> 00:35:08,079
that anti-analysis capabilities are

918
00:35:08,079 --> 00:35:10,079
commonly used

919
00:35:10,079 --> 00:35:12,320
as this is just one loader and it

920
00:35:12,320 --> 00:35:14,480
shouldn't be taken as a industry

921
00:35:14,480 --> 00:35:15,760
standard

922
00:35:15,760 --> 00:35:17,680
or industry-wide

923
00:35:17,680 --> 00:35:21,118
figure that can be used

924
00:35:21,680 --> 00:35:25,040
so the final families that dropped out

925
00:35:25,040 --> 00:35:26,160
of the

926
00:35:26,160 --> 00:35:27,280
loaders

927
00:35:27,280 --> 00:35:29,040
required some additional investigation

928
00:35:29,040 --> 00:35:30,880
because like i said loaders are quite

929
00:35:30,880 --> 00:35:32,800
often chained

930
00:35:32,800 --> 00:35:33,599
and

931
00:35:33,599 --> 00:35:35,839
you end up digging into a lot more

932
00:35:35,839 --> 00:35:37,760
loaders and a lot more steps before

933
00:35:37,760 --> 00:35:40,800
reaching the final version

934
00:35:40,800 --> 00:35:42,240
but even then it's interesting to see

935
00:35:42,240 --> 00:35:44,480
that over half of all the encountered

936
00:35:44,480 --> 00:35:46,720
families were agent tesla

937
00:35:46,720 --> 00:35:50,400
and we can also see that the mass logger

938
00:35:50,400 --> 00:35:53,200
was 15 of the total

939
00:35:53,200 --> 00:35:55,119
so agent tesla is a

940
00:35:55,119 --> 00:35:56,400
active

941
00:35:56,400 --> 00:35:59,440
in use by a lot of different actors

942
00:35:59,440 --> 00:36:00,240
and

943
00:36:00,240 --> 00:36:02,320
it's

944
00:36:02,320 --> 00:36:04,960
simplistic in design to a certain extent

945
00:36:04,960 --> 00:36:06,880
it's not the easiest power necessarily

946
00:36:06,880 --> 00:36:08,720
but it's not the

947
00:36:08,720 --> 00:36:10,640
and the hardest to ever analyze

948
00:36:10,640 --> 00:36:12,400
obviously either

949
00:36:12,400 --> 00:36:14,750
it's a commodity mower and

950
00:36:14,750 --> 00:36:16,000
[Music]

951
00:36:16,000 --> 00:36:18,400
this this suits the loader itself this

952
00:36:18,400 --> 00:36:21,119
loader is not the top of the bill

953
00:36:21,119 --> 00:36:23,359
hardest to ever look at

954
00:36:23,359 --> 00:36:25,760
as obviously can be seen by all the

955
00:36:25,760 --> 00:36:27,440
nicely included symbols that made my

956
00:36:27,440 --> 00:36:29,440
life a bit easier

957
00:36:29,440 --> 00:36:30,960
so this actually

958
00:36:30,960 --> 00:36:34,000
looks like a logical match as well

959
00:36:34,000 --> 00:36:36,000
and there's a five percent that we

960
00:36:36,000 --> 00:36:36,880
called

961
00:36:36,880 --> 00:36:38,800
other

962
00:36:38,800 --> 00:36:41,599
in here and um

963
00:36:41,599 --> 00:36:43,760
or fifteen percent rather um sorry for

964
00:36:43,760 --> 00:36:45,520
the mix-up five percent is mass longer

965
00:36:45,520 --> 00:36:47,839
than fifteen percent is other and the

966
00:36:47,839 --> 00:36:50,640
other is uh a bunch of families some

967
00:36:50,640 --> 00:36:52,560
samples only came across ones like the

968
00:36:52,560 --> 00:36:54,400
mr fireman keylogger

969
00:36:54,400 --> 00:36:56,800
and which was interesting to to find out

970
00:36:56,800 --> 00:36:59,200
which one it was but it was only one out

971
00:36:59,200 --> 00:37:01,280
of more than 500 so we would bundle

972
00:37:01,280 --> 00:37:04,000
those together and

973
00:37:04,000 --> 00:37:05,839
it makes sense because generally the

974
00:37:05,839 --> 00:37:08,720
names that are listed here are known

975
00:37:08,720 --> 00:37:13,598
family names towards the industry

976
00:37:14,079 --> 00:37:17,200
so when looking at the the payloads

977
00:37:17,200 --> 00:37:18,400
something else

978
00:37:18,400 --> 00:37:19,440
became

979
00:37:19,440 --> 00:37:22,480
clear as well there were 530 unique

980
00:37:22,480 --> 00:37:24,880
loaders however once extracting all the

981
00:37:24,880 --> 00:37:29,359
preloads and there were only 447

982
00:37:29,359 --> 00:37:31,119
which means we ended up with 66

983
00:37:31,119 --> 00:37:33,040
duplicates

984
00:37:33,040 --> 00:37:33,839
so

985
00:37:33,839 --> 00:37:35,839
a different loader but it dropped the

986
00:37:35,839 --> 00:37:37,280
same payload

987
00:37:37,280 --> 00:37:40,640
and out of these 66 duplicates 48

988
00:37:40,640 --> 00:37:42,720
were agent tesla

989
00:37:42,720 --> 00:37:43,839
so

990
00:37:43,839 --> 00:37:46,480
even though the majority of

991
00:37:46,480 --> 00:37:48,880
the payload was

992
00:37:48,880 --> 00:37:52,240
agent tesla even the duplicates

993
00:37:52,240 --> 00:37:54,560
are really

994
00:37:54,560 --> 00:37:56,800
asian tesla focused as well

995
00:37:56,800 --> 00:37:58,960
which might mean that people who want to

996
00:37:58,960 --> 00:38:01,200
drop agent tesla either had easy access

997
00:38:01,200 --> 00:38:04,240
to this loader or preferred it for one

998
00:38:04,240 --> 00:38:05,839
reason or another

999
00:38:05,839 --> 00:38:07,359
but there are no

1000
00:38:07,359 --> 00:38:10,560
facts to directly support those claims

1001
00:38:10,560 --> 00:38:12,800
another thing that struck me

1002
00:38:12,800 --> 00:38:14,240
was that there were several barely

1003
00:38:14,240 --> 00:38:17,359
utilized capabilities

1004
00:38:17,359 --> 00:38:18,960
the message box

1005
00:38:18,960 --> 00:38:21,200
option was only used seven times

1006
00:38:21,200 --> 00:38:24,240
but four times there was a message

1007
00:38:24,240 --> 00:38:25,760
so three of those

1008
00:38:25,760 --> 00:38:28,560
just displayed an empty pop-up box

1009
00:38:28,560 --> 00:38:29,920
um

1010
00:38:29,920 --> 00:38:32,960
this can still be uh well explained by

1011
00:38:32,960 --> 00:38:34,720
the fact that the message box was only

1012
00:38:34,720 --> 00:38:36,160
added in the later version so not the

1013
00:38:36,160 --> 00:38:38,480
first version however

1014
00:38:38,480 --> 00:38:39,599
the remote

1015
00:38:39,599 --> 00:38:41,359
download was

1016
00:38:41,359 --> 00:38:43,280
used even less and it was present from

1017
00:38:43,280 --> 00:38:45,200
the first version that we observed

1018
00:38:45,200 --> 00:38:48,720
um and there one of the remote payloads

1019
00:38:48,720 --> 00:38:51,440
uh well i had no url so that's that's

1020
00:38:51,440 --> 00:38:52,880
not really gonna work

1021
00:38:52,880 --> 00:38:54,400
um

1022
00:38:54,400 --> 00:38:56,480
if you uh if you try to do that

1023
00:38:56,480 --> 00:38:58,720
but the loader well in some way

1024
00:38:58,720 --> 00:39:00,720
gracefully handles exceptions by just

1025
00:39:00,720 --> 00:39:02,480
returning the function and

1026
00:39:02,480 --> 00:39:03,839
continuing

1027
00:39:03,839 --> 00:39:06,400
its execution so from uh from a victim's

1028
00:39:06,400 --> 00:39:08,079
perspective it doesn't matter if such a

1029
00:39:08,079 --> 00:39:09,839
mistake is made

1030
00:39:09,839 --> 00:39:12,480
by the actor

1031
00:39:12,960 --> 00:39:16,960
so in conclusion the loader itself is uh

1032
00:39:16,960 --> 00:39:18,800
is versatile you can do quite a lot with

1033
00:39:18,800 --> 00:39:21,839
it uh it has quite some some options uh

1034
00:39:21,839 --> 00:39:23,680
but the design itself is quite

1035
00:39:23,680 --> 00:39:25,119
simplistic

1036
00:39:25,119 --> 00:39:26,720
um

1037
00:39:26,720 --> 00:39:28,640
so from an attacker's perspective it's

1038
00:39:28,640 --> 00:39:31,119
easy to use and uh

1039
00:39:31,119 --> 00:39:33,839
cheap to make if you were to remake such

1040
00:39:33,839 --> 00:39:35,119
a loader

1041
00:39:35,119 --> 00:39:38,000
however it is it can be really impactful

1042
00:39:38,000 --> 00:39:39,839
for organizations

1043
00:39:39,839 --> 00:39:42,800
which is why the onion model is

1044
00:39:42,800 --> 00:39:45,359
recommended over the ag model

1045
00:39:45,359 --> 00:39:48,000
to stay with those analogies

1046
00:39:48,000 --> 00:39:50,079
and i hope the

1047
00:39:50,079 --> 00:39:51,280
technical

1048
00:39:51,280 --> 00:39:54,640
analysis and also the extraction segment

1049
00:39:54,640 --> 00:39:57,119
will help other researchers and

1050
00:39:57,119 --> 00:39:58,800
organizations

1051
00:39:58,800 --> 00:40:01,200
to do more research into loaders to have

1052
00:40:01,200 --> 00:40:04,240
clear overview of loaders and also

1053
00:40:04,240 --> 00:40:05,359
to

1054
00:40:05,359 --> 00:40:08,319
to work with this

1055
00:40:08,400 --> 00:40:10,160
if you have any questions you can ask

1056
00:40:10,160 --> 00:40:12,560
them now in the chat if you do think of

1057
00:40:12,560 --> 00:40:16,240
a question later on uh that you think is

1058
00:40:16,240 --> 00:40:17,760
well worth asking

1059
00:40:17,760 --> 00:40:20,640
uh as are well nearly all questions you

1060
00:40:20,640 --> 00:40:22,720
can reach out to me on twitter at libra

1061
00:40:22,720 --> 00:40:24,960
analysis i will publish these slides

1062
00:40:24,960 --> 00:40:26,880
there as well so the hyperlinks that i

1063
00:40:26,880 --> 00:40:30,640
mentioned are in the slides and the blog

1064
00:40:30,640 --> 00:40:33,520
that i wrote for the uh for mcafee's atr

1065
00:40:33,520 --> 00:40:34,560
team

1066
00:40:34,560 --> 00:40:37,920
is also linked in this slide

1067
00:40:37,920 --> 00:40:41,280
so all the information should be in here

1068
00:40:41,280 --> 00:40:43,440
meaning that if you want to do something

1069
00:40:43,440 --> 00:40:44,640
with it then

1070
00:40:44,640 --> 00:40:46,240
you should be able to

1071
00:40:46,240 --> 00:40:48,000
and with that i will

1072
00:40:48,000 --> 00:40:51,720
take you back to the studio

1073
00:40:56,800 --> 00:40:58,880
you

