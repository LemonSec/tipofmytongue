1
00:00:11,840 --> 00:00:15,040
all right so welcome everybody

2
00:00:15,040 --> 00:00:16,720
today i'm going to

3
00:00:16,720 --> 00:00:17,920
present

4
00:00:17,920 --> 00:00:19,439
uh

5
00:00:19,439 --> 00:00:22,080
why sorry

6
00:00:22,080 --> 00:00:23,199
um

7
00:00:23,199 --> 00:00:25,920
the motivation regarding this uh

8
00:00:25,920 --> 00:00:28,960
talk is actually based on the quote from

9
00:00:28,960 --> 00:00:32,159
one of the black black hot dog

10
00:00:32,159 --> 00:00:35,600
and there's a very nice quote uh from

11
00:00:35,600 --> 00:00:37,440
marco slaviero

12
00:00:37,440 --> 00:00:39,200
and

13
00:00:39,200 --> 00:00:42,079
basically there are more and more

14
00:00:42,079 --> 00:00:45,760
resources in the cloud but the number of

15
00:00:45,760 --> 00:00:47,360
known attacks

16
00:00:47,360 --> 00:00:50,640
against aws and other providers too is

17
00:00:50,640 --> 00:00:52,320
pretty low

18
00:00:52,320 --> 00:00:53,760
so it is

19
00:00:53,760 --> 00:00:55,280
rare it is uh

20
00:00:55,280 --> 00:00:59,120
fair sure that this number will increase

21
00:00:59,120 --> 00:01:00,399
in future

22
00:01:00,399 --> 00:01:03,920
and i hope that after this presentation

23
00:01:03,920 --> 00:01:06,479
uh you will start to discuss in your

24
00:01:06,479 --> 00:01:09,200
teams in your companies

25
00:01:09,200 --> 00:01:12,960
how are you going to mitigate those

26
00:01:12,960 --> 00:01:15,119
modern threats

27
00:01:15,119 --> 00:01:17,439
but before that let me introduce myself

28
00:01:17,439 --> 00:01:20,880
so my name is pablo jaba and i work as a

29
00:01:20,880 --> 00:01:24,159
senior ethical hacker in soft surf i

30
00:01:24,159 --> 00:01:26,640
also recently started

31
00:01:26,640 --> 00:01:27,360
the

32
00:01:27,360 --> 00:01:30,799
my career as aws authorized instructor

33
00:01:30,799 --> 00:01:34,640
so i'm giving the aws courses

34
00:01:34,640 --> 00:01:38,479
and after work i'm still passionate

35
00:01:38,479 --> 00:01:40,960
about the cloud security so some of my

36
00:01:40,960 --> 00:01:42,880
researches can be found

37
00:01:42,880 --> 00:01:45,040
on my medium block

38
00:01:45,040 --> 00:01:46,159
if you are

39
00:01:46,159 --> 00:01:47,920
interested in

40
00:01:47,920 --> 00:01:50,799
some cloud security news then i

41
00:01:50,799 --> 00:01:53,439
encourage you to follow me on my twitter

42
00:01:53,439 --> 00:01:57,279
and linkedin accounts

43
00:01:57,439 --> 00:02:00,399
all right so most of the attacks start

44
00:02:00,399 --> 00:02:02,799
from initial access

45
00:02:02,799 --> 00:02:05,119
what we already know

46
00:02:05,119 --> 00:02:07,759
so before we will jump to the less

47
00:02:07,759 --> 00:02:09,758
obvious attacks

48
00:02:09,758 --> 00:02:12,640
let's talk little about commonly known

49
00:02:12,640 --> 00:02:13,680
methods

50
00:02:13,680 --> 00:02:14,879
one of them

51
00:02:14,879 --> 00:02:16,239
is

52
00:02:16,239 --> 00:02:17,840
i

53
00:02:17,840 --> 00:02:20,560
i am key slick

54
00:02:20,560 --> 00:02:24,160
and it was the real plug in github so

55
00:02:24,160 --> 00:02:27,280
what i did i did recently uh the

56
00:02:27,280 --> 00:02:31,200
research uh so i committed the real aws

57
00:02:31,200 --> 00:02:34,879
keys in my one of my github repository

58
00:02:34,879 --> 00:02:38,239
and in around 50 seconds i got a

59
00:02:38,239 --> 00:02:41,920
notification email from aws

60
00:02:41,920 --> 00:02:42,720
and

61
00:02:42,720 --> 00:02:47,040
after around six minutes i got first um

62
00:02:47,040 --> 00:02:50,959
attempts to use those keys by malicious

63
00:02:50,959 --> 00:02:52,239
actors

64
00:02:52,239 --> 00:02:53,200
now

65
00:02:53,200 --> 00:02:54,400
if you

66
00:02:54,400 --> 00:02:55,840
if you uh

67
00:02:55,840 --> 00:02:59,040
think that a six minute is a good time

68
00:02:59,040 --> 00:02:59,840
then

69
00:02:59,840 --> 00:03:02,840
well i think it's pretty slow for bots

70
00:03:02,840 --> 00:03:05,519
right so

71
00:03:05,519 --> 00:03:08,080
there's an explanation why it took six

72
00:03:08,080 --> 00:03:10,560
minutes why it took so long

73
00:03:10,560 --> 00:03:13,440
first of all this situation has

74
00:03:13,440 --> 00:03:17,680
changed a little uh recently so

75
00:03:17,680 --> 00:03:20,720
once i got the email notification from

76
00:03:20,720 --> 00:03:22,239
aws

77
00:03:22,239 --> 00:03:26,239
um i automatically to my

78
00:03:26,239 --> 00:03:29,599
compromised keys there was added the

79
00:03:29,599 --> 00:03:34,239
aws compromised key quarantine and this

80
00:03:34,239 --> 00:03:35,360
policy

81
00:03:35,360 --> 00:03:39,200
actually denies some dangerous actions

82
00:03:39,200 --> 00:03:42,319
of course not all of them but definitely

83
00:03:42,319 --> 00:03:45,599
that's a good step by aws

84
00:03:45,599 --> 00:03:49,280
furthermore a few days later i got a

85
00:03:49,280 --> 00:03:51,840
notification um well

86
00:03:51,840 --> 00:03:55,120
i got a notification about the created

87
00:03:55,120 --> 00:03:59,040
support ticket for this incident

88
00:03:59,040 --> 00:04:00,959
and i got any

89
00:04:00,959 --> 00:04:03,760
quite interesting information from aws

90
00:04:03,760 --> 00:04:06,480
support that hey i'm running three

91
00:04:06,480 --> 00:04:07,840
instances

92
00:04:07,840 --> 00:04:10,640
launched in my uh in one of the region

93
00:04:10,640 --> 00:04:14,080
which actually that was true

94
00:04:14,080 --> 00:04:16,560
when i searched the event history of the

95
00:04:16,560 --> 00:04:19,759
cloud trail i seen nothing

96
00:04:19,759 --> 00:04:22,960
but in cloud trail logs if you want to

97
00:04:22,960 --> 00:04:25,520
read cloud trail logs in

98
00:04:25,520 --> 00:04:29,600
um in cli then this is

99
00:04:29,600 --> 00:04:31,600
this this is not trivial

100
00:04:31,600 --> 00:04:33,440
uh but once i

101
00:04:33,440 --> 00:04:37,280
uh filter the uh the actions taken by

102
00:04:37,280 --> 00:04:40,800
aws support team you can see that they

103
00:04:40,800 --> 00:04:42,720
can you know that

104
00:04:42,720 --> 00:04:44,080
they can

105
00:04:44,080 --> 00:04:48,320
investigate the issue and help you

106
00:04:48,320 --> 00:04:49,199
now

107
00:04:49,199 --> 00:04:52,479
why those bots were so slow

108
00:04:52,479 --> 00:04:55,759
this is because github implemented the

109
00:04:55,759 --> 00:04:56,880
um

110
00:04:56,880 --> 00:05:00,400
the mechanism of finding those law those

111
00:05:00,400 --> 00:05:03,360
leaks so for example aws keys of course

112
00:05:03,360 --> 00:05:05,919
not only aws keys but

113
00:05:05,919 --> 00:05:06,880
um

114
00:05:06,880 --> 00:05:09,680
including them

115
00:05:09,680 --> 00:05:13,280
before they will publish um the latest

116
00:05:13,280 --> 00:05:16,880
comment in public repository it

117
00:05:16,880 --> 00:05:18,160
they are

118
00:05:18,160 --> 00:05:20,240
delaying it

119
00:05:20,240 --> 00:05:22,400
by five minutes

120
00:05:22,400 --> 00:05:25,600
what it means you have five minutes for

121
00:05:25,600 --> 00:05:27,360
your reaction

122
00:05:27,360 --> 00:05:28,560
um

123
00:05:28,560 --> 00:05:29,440
to

124
00:05:29,440 --> 00:05:32,080
block those keys and to take some

125
00:05:32,080 --> 00:05:33,440
actions

126
00:05:33,440 --> 00:05:36,000
after the after those five minutes this

127
00:05:36,000 --> 00:05:37,759
is accessible for

128
00:05:37,759 --> 00:05:39,600
publicly

129
00:05:39,600 --> 00:05:40,880
and

130
00:05:40,880 --> 00:05:44,560
of course malicious bots then will start

131
00:05:44,560 --> 00:05:47,680
harvesting your keys

132
00:05:47,680 --> 00:05:49,680
this is a well-known method

133
00:05:49,680 --> 00:05:53,199
another well-known method is the

134
00:05:53,199 --> 00:05:54,440
is

135
00:05:54,440 --> 00:05:57,759
compromising the web application

136
00:05:57,759 --> 00:06:01,120
uh and because of which is hosted in the

137
00:06:01,120 --> 00:06:04,560
cloud and then exploiting the

138
00:06:04,560 --> 00:06:07,120
vulnerability like server side request

139
00:06:07,120 --> 00:06:10,319
forgery uh remote code execution or

140
00:06:10,319 --> 00:06:14,319
unintended proxy because then you can go

141
00:06:14,319 --> 00:06:15,199
and

142
00:06:15,199 --> 00:06:18,560
um grab the instance profile that is

143
00:06:18,560 --> 00:06:21,120
attached to this particular instance to

144
00:06:21,120 --> 00:06:22,880
your web server

145
00:06:22,880 --> 00:06:27,039
and then you can escalate your attacks

146
00:06:27,039 --> 00:06:30,960
uh if that is something new to you you

147
00:06:30,960 --> 00:06:33,199
don't know much about it then i

148
00:06:33,199 --> 00:06:35,039
encourage you to

149
00:06:35,039 --> 00:06:36,560
go and

150
00:06:36,560 --> 00:06:39,680
watch my previous presentation about it

151
00:06:39,680 --> 00:06:42,400
if you want to read more about the real

152
00:06:42,400 --> 00:06:45,440
case scenario then i think the capital

153
00:06:45,440 --> 00:06:46,639
one

154
00:06:46,639 --> 00:06:51,360
breach is a great example here

155
00:06:51,360 --> 00:06:55,599
what is new regarding um compromising

156
00:06:55,599 --> 00:06:58,000
the the hosts

157
00:06:58,000 --> 00:07:00,720
in the cloud is that the

158
00:07:00,720 --> 00:07:04,319
the new group well they are not new but

159
00:07:04,319 --> 00:07:07,599
they started their campaigning to 2020

160
00:07:07,599 --> 00:07:10,080
the team tnt group

161
00:07:10,080 --> 00:07:13,759
they are they are targeting uh many

162
00:07:13,759 --> 00:07:17,360
applications mostly kubernetes clusters

163
00:07:17,360 --> 00:07:19,280
so they are searching for

164
00:07:19,280 --> 00:07:22,400
um kubernetes clusters which have

165
00:07:22,400 --> 00:07:26,160
publicly as accessible control panel

166
00:07:26,160 --> 00:07:30,160
uh and then they are start start

167
00:07:30,160 --> 00:07:33,039
harvesting aws credentials

168
00:07:33,039 --> 00:07:36,400
and probably in future they will

169
00:07:36,400 --> 00:07:38,160
do more about

170
00:07:38,160 --> 00:07:40,720
lateral movements and privilege

171
00:07:40,720 --> 00:07:44,639
escalations and to you know to do

172
00:07:44,639 --> 00:07:45,680
um

173
00:07:45,680 --> 00:07:49,280
to make even better results

174
00:07:49,280 --> 00:07:51,680
if you are curious about the the team

175
00:07:51,680 --> 00:07:53,919
tnt operations there's a good research

176
00:07:53,919 --> 00:07:56,720
about it so encourage you to

177
00:07:56,720 --> 00:07:58,120
go and read

178
00:07:58,120 --> 00:07:59,360
[Music]

179
00:07:59,360 --> 00:08:01,919
reads all of it

180
00:08:01,919 --> 00:08:04,319
but now we are going to the main part of

181
00:08:04,319 --> 00:08:06,960
this presentation what if

182
00:08:06,960 --> 00:08:09,039
i don't have any publicly exposed

183
00:08:09,039 --> 00:08:13,039
resources i don't use any iam users

184
00:08:13,039 --> 00:08:16,000
which is pretty common nowadays people

185
00:08:16,000 --> 00:08:19,520
stopped using iam users and instead they

186
00:08:19,520 --> 00:08:22,160
are using the iam roles

187
00:08:22,160 --> 00:08:23,199
and

188
00:08:23,199 --> 00:08:26,479
it is not a rare thing that people

189
00:08:26,479 --> 00:08:29,039
started scanning their

190
00:08:29,039 --> 00:08:32,080
cloud infrastructure against enemies

191
00:08:32,080 --> 00:08:34,000
configurations

192
00:08:34,000 --> 00:08:38,719
well obviously this still can be hacked

193
00:08:38,719 --> 00:08:40,640
first rule

194
00:08:40,640 --> 00:08:43,839
do not trust people in the cyber world i

195
00:08:43,839 --> 00:08:46,080
think we all fail

196
00:08:46,080 --> 00:08:47,360
and

197
00:08:47,360 --> 00:08:50,640
let me prove it

198
00:08:50,720 --> 00:08:51,600
in

199
00:08:51,600 --> 00:08:52,480
in the

200
00:08:52,480 --> 00:08:54,399
previous year

201
00:08:54,399 --> 00:08:57,200
i made a little research and

202
00:08:57,200 --> 00:08:59,839
i needed a

203
00:08:59,839 --> 00:09:03,600
lambda function that was responsible for

204
00:09:03,600 --> 00:09:05,519
renaming the

205
00:09:05,519 --> 00:09:07,279
names of the

206
00:09:07,279 --> 00:09:09,360
files uploaded to

207
00:09:09,360 --> 00:09:11,600
the s3 bucket

208
00:09:11,600 --> 00:09:14,080
so once the file is uploaded to the

209
00:09:14,080 --> 00:09:17,360
bucket then the event is triggered that

210
00:09:17,360 --> 00:09:20,399
if the event triggers lambda function

211
00:09:20,399 --> 00:09:23,279
and this lambda function should rename

212
00:09:23,279 --> 00:09:26,880
the name of the file from test new png

213
00:09:26,880 --> 00:09:27,600
to

214
00:09:27,600 --> 00:09:30,880
scan me test new png

215
00:09:30,880 --> 00:09:33,519
i haven't found ready to use

216
00:09:33,519 --> 00:09:38,080
library so i created my own package in

217
00:09:38,080 --> 00:09:43,360
npa npm js repository and i called it s3

218
00:09:43,360 --> 00:09:46,800
object rename i put some

219
00:09:46,800 --> 00:09:50,399
usage instructions and that's pretty

220
00:09:50,399 --> 00:09:52,080
pretty easy

221
00:09:52,080 --> 00:09:54,399
to follow uh package

222
00:09:54,399 --> 00:09:57,839
what you can see after a few days after

223
00:09:57,839 --> 00:10:01,839
several days there was uh 53 weekly

224
00:10:01,839 --> 00:10:03,920
downloads

225
00:10:03,920 --> 00:10:04,800
but

226
00:10:04,800 --> 00:10:05,839
after

227
00:10:05,839 --> 00:10:09,920
a month there was almost 500 downloads

228
00:10:09,920 --> 00:10:12,720
of this package what is so special about

229
00:10:12,720 --> 00:10:14,079
it

230
00:10:14,079 --> 00:10:14,880
well

231
00:10:14,880 --> 00:10:17,839
i created so here just to give you the

232
00:10:17,839 --> 00:10:20,800
idea the concept of this package so here

233
00:10:20,800 --> 00:10:22,079
if you use

234
00:10:22,079 --> 00:10:25,600
it in the lambda function you have to

235
00:10:25,600 --> 00:10:27,120
attach it

236
00:10:27,120 --> 00:10:29,040
to your lambda function

237
00:10:29,040 --> 00:10:33,200
and then you can you have to just run uh

238
00:10:33,200 --> 00:10:35,600
you you have to give the name of the

239
00:10:35,600 --> 00:10:38,320
bucket the name of the file that you

240
00:10:38,320 --> 00:10:42,160
want to uh rename and the new name of

241
00:10:42,160 --> 00:10:43,839
the file

242
00:10:43,839 --> 00:10:45,440
pretty easy right

243
00:10:45,440 --> 00:10:47,760
so when you run it

244
00:10:47,760 --> 00:10:50,399
then you will you will see in your logs

245
00:10:50,399 --> 00:10:51,760
that everything

246
00:10:51,760 --> 00:10:54,160
went smoothly everything

247
00:10:54,160 --> 00:10:57,200
is good so that's all

248
00:10:57,200 --> 00:11:00,240
but under the hood if you invest

249
00:11:00,240 --> 00:11:03,600
investigate this as free rename package

250
00:11:03,600 --> 00:11:06,560
you will see a line of obfuscated

251
00:11:06,560 --> 00:11:08,480
javascript code

252
00:11:08,480 --> 00:11:09,680
after

253
00:11:09,680 --> 00:11:12,399
this code is is basically doing this

254
00:11:12,399 --> 00:11:15,839
thing so it verifies if among the

255
00:11:15,839 --> 00:11:18,640
environment variables if there is the

256
00:11:18,640 --> 00:11:21,600
aws access key id so it doesn't have to

257
00:11:21,600 --> 00:11:24,640
be run in lambda function but if it is

258
00:11:24,640 --> 00:11:27,040
run on your local workstation and you

259
00:11:27,040 --> 00:11:31,680
have a configured aws access key id uh

260
00:11:31,680 --> 00:11:35,279
in your environment variables then this

261
00:11:35,279 --> 00:11:39,279
obfuscated code will uh will be launched

262
00:11:39,279 --> 00:11:41,760
and what it what it does well it

263
00:11:41,760 --> 00:11:43,040
basically

264
00:11:43,040 --> 00:11:43,920
sent

265
00:11:43,920 --> 00:11:48,980
as the get parameter to my uh server

266
00:11:48,980 --> 00:11:50,160
[Music]

267
00:11:50,160 --> 00:11:52,639
and i got those uh

268
00:11:52,639 --> 00:11:57,360
those aws key on my uh on my server

269
00:11:57,360 --> 00:11:58,959
what is

270
00:11:58,959 --> 00:12:02,720
pretty scary about it is the fact that i

271
00:12:02,720 --> 00:12:07,200
got not only my test aws access keys but

272
00:12:07,200 --> 00:12:09,600
i also get keys from

273
00:12:09,600 --> 00:12:11,680
random users

274
00:12:11,680 --> 00:12:16,160
who were blindly running my package

275
00:12:16,160 --> 00:12:18,560
this is not new technic

276
00:12:18,560 --> 00:12:21,040
attack technique actually

277
00:12:21,040 --> 00:12:22,399
there is even

278
00:12:22,399 --> 00:12:25,120
better uh attack technique which is

279
00:12:25,120 --> 00:12:27,360
called the type of squatting

280
00:12:27,360 --> 00:12:31,519
in 2016 one researcher made

281
00:12:31,519 --> 00:12:35,120
a pretty good research uh so what what

282
00:12:35,120 --> 00:12:37,680
he did he

283
00:12:37,680 --> 00:12:40,959
uploaded a lot of

284
00:12:40,959 --> 00:12:42,480
a lot of

285
00:12:42,480 --> 00:12:46,959
renamed packages which are

286
00:12:46,959 --> 00:12:50,399
which names are very very similar to the

287
00:12:50,399 --> 00:12:53,519
original packages like coffee but with

288
00:12:53,519 --> 00:12:56,240
just one letter e

289
00:12:56,240 --> 00:12:57,279
and

290
00:12:57,279 --> 00:12:58,560
uh

291
00:12:58,560 --> 00:13:00,720
he uploaded it to

292
00:13:00,720 --> 00:13:03,120
the python package the ruby package and

293
00:13:03,120 --> 00:13:05,040
the

294
00:13:05,040 --> 00:13:07,519
javascript packages

295
00:13:07,519 --> 00:13:10,720
the results uh were

296
00:13:10,720 --> 00:13:14,000
again very scary because there were more

297
00:13:14,000 --> 00:13:17,839
than 17 thousands of unique hosts where

298
00:13:17,839 --> 00:13:18,639
these

299
00:13:18,639 --> 00:13:21,200
packages were launched

300
00:13:21,200 --> 00:13:23,839
basically he was testing uh the

301
00:13:23,839 --> 00:13:27,360
launching similarly to me that

302
00:13:27,360 --> 00:13:30,480
he was grabbing a notification

303
00:13:30,480 --> 00:13:32,320
request

304
00:13:32,320 --> 00:13:33,760
taken from the

305
00:13:33,760 --> 00:13:35,360
victim

306
00:13:35,360 --> 00:13:36,800
now

307
00:13:36,800 --> 00:13:40,560
the new the new thing uh that appeared

308
00:13:40,560 --> 00:13:41,360
uh

309
00:13:41,360 --> 00:13:44,160
recently was that one of the

310
00:13:44,160 --> 00:13:46,079
developer he

311
00:13:46,079 --> 00:13:49,600
published a package which is named as a

312
00:13:49,600 --> 00:13:51,040
dash

313
00:13:51,040 --> 00:13:51,920
and

314
00:13:51,920 --> 00:13:54,639
the this package that didn't contain

315
00:13:54,639 --> 00:13:55,360
well

316
00:13:55,360 --> 00:13:56,959
i'm not sure if it's

317
00:13:56,959 --> 00:13:59,440
now it is accessible but

318
00:13:59,440 --> 00:14:01,600
there was no malicious code inside

319
00:14:01,600 --> 00:14:02,399
however

320
00:14:02,399 --> 00:14:04,399
he was testing if

321
00:14:04,399 --> 00:14:08,560
he can uh name package like that like

322
00:14:08,560 --> 00:14:10,959
dash or double dash

323
00:14:10,959 --> 00:14:12,800
and there was

324
00:14:12,800 --> 00:14:14,560
almost

325
00:14:14,560 --> 00:14:16,880
there was over 70

326
00:14:16,880 --> 00:14:20,000
hundreds thousands of downloads

327
00:14:20,000 --> 00:14:21,120
why

328
00:14:21,120 --> 00:14:22,399
well

329
00:14:22,399 --> 00:14:26,160
probably because if you put such name uh

330
00:14:26,160 --> 00:14:31,040
such comment in your cli like npm i dash

331
00:14:31,040 --> 00:14:32,720
space bar

332
00:14:32,720 --> 00:14:34,959
some flag some package name

333
00:14:34,959 --> 00:14:38,639
then it will install this uh this

334
00:14:38,639 --> 00:14:40,959
package named

335
00:14:40,959 --> 00:14:43,360
as a dash

336
00:14:43,360 --> 00:14:46,880
going even a step further uh also a

337
00:14:46,880 --> 00:14:49,760
research from this year regarding the

338
00:14:49,760 --> 00:14:51,680
supply chain

339
00:14:51,680 --> 00:14:54,079
supply chain attack i'm sorry

340
00:14:54,079 --> 00:14:55,199
um

341
00:14:55,199 --> 00:14:58,480
what was about the the researcher

342
00:14:58,480 --> 00:15:01,279
found in the internet in the publicly

343
00:15:01,279 --> 00:15:04,240
accessible resources a lot of packages a

344
00:15:04,240 --> 00:15:06,560
lot of internal packages

345
00:15:06,560 --> 00:15:08,800
packages which were used by apple

346
00:15:08,800 --> 00:15:13,199
microsoft and other big big companies

347
00:15:13,199 --> 00:15:16,079
now those internal packages were only

348
00:15:16,079 --> 00:15:18,480
accessible in their

349
00:15:18,480 --> 00:15:20,000
internal

350
00:15:20,000 --> 00:15:21,920
repositories

351
00:15:21,920 --> 00:15:23,920
okay but

352
00:15:23,920 --> 00:15:27,440
he found a way that there are those

353
00:15:27,440 --> 00:15:31,279
package managers used commonly in those

354
00:15:31,279 --> 00:15:34,399
companies by developers um

355
00:15:34,399 --> 00:15:35,759
they can

356
00:15:35,759 --> 00:15:37,680
for example if this package is not

357
00:15:37,680 --> 00:15:41,360
accessible anymore in the internal

358
00:15:41,360 --> 00:15:44,880
repository then this package will be

359
00:15:44,880 --> 00:15:47,759
downloaded from that publicly

360
00:15:47,759 --> 00:15:50,639
from the public repository or

361
00:15:50,639 --> 00:15:52,160
if

362
00:15:52,160 --> 00:15:56,000
if there is a newer version of the same

363
00:15:56,000 --> 00:15:57,519
package name as

364
00:15:57,519 --> 00:16:01,440
as it is in uh the public repository it

365
00:16:01,440 --> 00:16:03,519
will be downloaded

366
00:16:03,519 --> 00:16:06,800
so in this way the the researcher was

367
00:16:06,800 --> 00:16:08,399
able to

368
00:16:08,399 --> 00:16:12,880
run to run remote code execution in

369
00:16:12,880 --> 00:16:13,839
in

370
00:16:13,839 --> 00:16:16,880
big companies

371
00:16:16,959 --> 00:16:20,480
now going into the cloud

372
00:16:20,480 --> 00:16:24,720
is the package um the the supply chain

373
00:16:24,720 --> 00:16:26,800
attacks only accessible

374
00:16:26,800 --> 00:16:30,720
only a threat against packages well not

375
00:16:30,720 --> 00:16:34,240
only so here's an example of community

376
00:16:34,240 --> 00:16:35,920
ami

377
00:16:35,920 --> 00:16:38,560
when you are running the ec2 instance

378
00:16:38,560 --> 00:16:42,560
you may have may choose the brand new

379
00:16:42,560 --> 00:16:44,639
amazon amis

380
00:16:44,639 --> 00:16:46,560
or you can

381
00:16:46,560 --> 00:16:48,839
take some

382
00:16:48,839 --> 00:16:52,880
amazon uh machine images from the aws

383
00:16:52,880 --> 00:16:54,720
marketplace so for example i was

384
00:16:54,720 --> 00:16:58,959
searching for apache guacamole

385
00:16:58,959 --> 00:17:02,480
this uh so in the aws marketplace you

386
00:17:02,480 --> 00:17:05,359
can find the aws

387
00:17:05,359 --> 00:17:08,720
ec2 instance with pre-installed and

388
00:17:08,720 --> 00:17:11,599
pre-configured apache guacamole which is

389
00:17:11,599 --> 00:17:13,039
super

390
00:17:13,039 --> 00:17:16,559
nice feature because without all those

391
00:17:16,559 --> 00:17:19,280
configuration steps i can

392
00:17:19,280 --> 00:17:22,400
just in a few clicks i can spin up the

393
00:17:22,400 --> 00:17:24,160
ec2 instance

394
00:17:24,160 --> 00:17:28,480
with working apache guacamole

395
00:17:28,480 --> 00:17:29,919
server

396
00:17:29,919 --> 00:17:33,679
but there is also a community ami

397
00:17:33,679 --> 00:17:35,200
there and

398
00:17:35,200 --> 00:17:39,440
everyone can also uh

399
00:17:39,440 --> 00:17:42,880
publish the community ami with the same

400
00:17:42,880 --> 00:17:46,240
thing so for example i can create my own

401
00:17:46,240 --> 00:17:48,480
ami and publish it

402
00:17:48,480 --> 00:17:50,720
as a with the working

403
00:17:50,720 --> 00:17:53,590
guacamole apache guacamole

404
00:17:53,590 --> 00:17:55,200
[Music]

405
00:17:55,200 --> 00:17:58,160
the difference is that those from aws

406
00:17:58,160 --> 00:18:01,760
marketplace costs additional money and

407
00:18:01,760 --> 00:18:03,360
community ami

408
00:18:03,360 --> 00:18:05,600
are for free

409
00:18:05,600 --> 00:18:09,840
those in aws marketplace they are scout

410
00:18:09,840 --> 00:18:11,360
this price

411
00:18:11,360 --> 00:18:13,840
always you know you have always

412
00:18:13,840 --> 00:18:16,320
something for this additional price

413
00:18:16,320 --> 00:18:18,320
because it goes from the

414
00:18:18,320 --> 00:18:19,360
um

415
00:18:19,360 --> 00:18:21,520
from the

416
00:18:21,520 --> 00:18:24,720
authorized sources as well as

417
00:18:24,720 --> 00:18:25,760
those

418
00:18:25,760 --> 00:18:30,000
amis are scanned by amazon

419
00:18:30,000 --> 00:18:33,840
but those in community amis are not

420
00:18:33,840 --> 00:18:35,919
and this is not a

421
00:18:35,919 --> 00:18:40,000
rare um observation that some of them

422
00:18:40,000 --> 00:18:44,640
are already uh infected um here is the

423
00:18:44,640 --> 00:18:45,840
example

424
00:18:45,840 --> 00:18:49,200
that the one company they discovered

425
00:18:49,200 --> 00:18:53,520
after five years of running this ami

426
00:18:53,520 --> 00:18:56,960
they found that this easy to instance is

427
00:18:56,960 --> 00:19:00,799
quite uh slow comparing to others

428
00:19:00,799 --> 00:19:03,280
so they started investigating it and

429
00:19:03,280 --> 00:19:07,039
they found that this ami is actually

430
00:19:07,039 --> 00:19:09,600
infected so they reported it to to

431
00:19:09,600 --> 00:19:11,760
amazon of course it was removed

432
00:19:11,760 --> 00:19:15,039
but the thing is how many of you

433
00:19:15,039 --> 00:19:18,320
is going is using those from uh

434
00:19:18,320 --> 00:19:21,039
community those community amis and they

435
00:19:21,039 --> 00:19:23,280
are really investigating if there is any

436
00:19:23,280 --> 00:19:25,600
malware inside of them

437
00:19:25,600 --> 00:19:28,880
because there can be any kind of code

438
00:19:28,880 --> 00:19:31,120
that is running on your

439
00:19:31,120 --> 00:19:34,239
cloud resource

440
00:19:34,640 --> 00:19:37,760
another thing the serverless application

441
00:19:37,760 --> 00:19:41,840
repository another great feature great

442
00:19:41,840 --> 00:19:45,200
service in aws that you can

443
00:19:45,200 --> 00:19:48,559
publish your serverless application and

444
00:19:48,559 --> 00:19:50,840
it can be run by

445
00:19:50,840 --> 00:19:53,600
others and i was searching for

446
00:19:53,600 --> 00:19:56,559
serverless gold if you don't know

447
00:19:56,559 --> 00:19:59,600
this this project definitely go in the

448
00:19:59,600 --> 00:20:03,120
github page and find the more about this

449
00:20:03,120 --> 00:20:05,039
server let's go

450
00:20:05,039 --> 00:20:07,520
one important thing is that this

451
00:20:07,520 --> 00:20:10,400
repository is no longer maintained

452
00:20:10,400 --> 00:20:13,760
what it means that it was created that

453
00:20:13,760 --> 00:20:15,600
this is the original

454
00:20:15,600 --> 00:20:17,120
um

455
00:20:17,120 --> 00:20:19,919
original deployment in serverless

456
00:20:19,919 --> 00:20:22,400
application repository

457
00:20:22,400 --> 00:20:24,000
however the

458
00:20:24,000 --> 00:20:27,559
node runtime version is the

459
00:20:27,559 --> 00:20:31,280
deprecated in this version what means it

460
00:20:31,280 --> 00:20:32,799
doesn't work

461
00:20:32,799 --> 00:20:34,159
so

462
00:20:34,159 --> 00:20:37,120
there are other alternative version

463
00:20:37,120 --> 00:20:41,039
like with the same uh description with

464
00:20:41,039 --> 00:20:42,320
different

465
00:20:42,320 --> 00:20:44,159
names with different

466
00:20:44,159 --> 00:20:47,440
number of deployments

467
00:20:47,440 --> 00:20:50,000
and even in the

468
00:20:50,000 --> 00:20:52,799
github issues of serverless go you can

469
00:20:52,799 --> 00:20:55,360
find that the the advice just go to

470
00:20:55,360 --> 00:20:57,679
serverless application repository and

471
00:20:57,679 --> 00:21:01,760
search for upsec serverless gold because

472
00:21:01,760 --> 00:21:04,159
it there is a fix and it is the working

473
00:21:04,159 --> 00:21:05,360
version

474
00:21:05,360 --> 00:21:06,320
so

475
00:21:06,320 --> 00:21:07,120
but

476
00:21:07,120 --> 00:21:09,280
what are those

477
00:21:09,280 --> 00:21:10,480
well

478
00:21:10,480 --> 00:21:12,720
nobody knows they are

479
00:21:12,720 --> 00:21:16,720
deployed and they are released by

480
00:21:16,720 --> 00:21:20,960
other aws accounts so there's no

481
00:21:20,960 --> 00:21:24,960
problem if i'm going to release another

482
00:21:24,960 --> 00:21:27,760
serverless gold version with even cooler

483
00:21:27,760 --> 00:21:30,400
name like the this is the latest

484
00:21:30,400 --> 00:21:33,360
serverless gold and people are blindly

485
00:21:33,360 --> 00:21:34,640
running it

486
00:21:34,640 --> 00:21:38,480
i hope that all of you are

487
00:21:38,480 --> 00:21:42,240
reading the code before running it but

488
00:21:42,240 --> 00:21:45,360
the practice shows that well not all of

489
00:21:45,360 --> 00:21:45,910
us

490
00:21:45,910 --> 00:21:47,840
[Music]

491
00:21:47,840 --> 00:21:51,120
another uh another interesting fact is

492
00:21:51,120 --> 00:21:52,640
um

493
00:21:52,640 --> 00:21:56,000
that we are giving this access to our

494
00:21:56,000 --> 00:21:59,039
cloud resources

495
00:21:59,039 --> 00:22:04,320
and it is pretty pretty um often

496
00:22:04,320 --> 00:22:05,200
and

497
00:22:05,200 --> 00:22:09,840
it is only visible in the trust policy

498
00:22:09,840 --> 00:22:13,039
so you have a role that and this is your

499
00:22:13,039 --> 00:22:14,159
uh

500
00:22:14,159 --> 00:22:16,240
aws account id

501
00:22:16,240 --> 00:22:17,760
and this is

502
00:22:17,760 --> 00:22:20,720
the aws account of

503
00:22:20,720 --> 00:22:24,880
other um of this third-party service

504
00:22:24,880 --> 00:22:27,360
okay so for example this third party

505
00:22:27,360 --> 00:22:29,600
service is doing the

506
00:22:29,600 --> 00:22:31,360
log monitoring

507
00:22:31,360 --> 00:22:35,679
for you so they need access to your

508
00:22:35,679 --> 00:22:37,120
to your cloud

509
00:22:37,120 --> 00:22:39,840
account and

510
00:22:39,840 --> 00:22:44,880
most often it is done by uh adding um

511
00:22:44,880 --> 00:22:48,960
access via the iam role

512
00:22:48,960 --> 00:22:51,600
now there was another research

513
00:22:51,600 --> 00:22:53,760
that 82

514
00:22:53,760 --> 00:22:55,280
of companies

515
00:22:55,280 --> 00:22:58,480
unknowingly give third parties access to

516
00:22:58,480 --> 00:23:02,720
the to all their cloud data now

517
00:23:02,720 --> 00:23:07,039
why unknowingly why so many and why

518
00:23:07,039 --> 00:23:08,640
access to

519
00:23:08,640 --> 00:23:10,960
all cloud data

520
00:23:10,960 --> 00:23:12,480
because

521
00:23:12,480 --> 00:23:14,960
because that is the easier way

522
00:23:14,960 --> 00:23:18,159
okay so here is the

523
00:23:18,159 --> 00:23:19,679
instruction

524
00:23:19,679 --> 00:23:23,120
uh from one third-party service pretty

525
00:23:23,120 --> 00:23:26,880
common uh that i've seen a lot in the in

526
00:23:26,880 --> 00:23:28,159
the wild

527
00:23:28,159 --> 00:23:31,039
and they are giving the instruction that

528
00:23:31,039 --> 00:23:34,880
hey give us uh give us a read-only

529
00:23:34,880 --> 00:23:36,559
access role

530
00:23:36,559 --> 00:23:39,600
so we will be able to

531
00:23:39,600 --> 00:23:42,159
to do our job

532
00:23:42,159 --> 00:23:45,440
now read only access and it is very

533
00:23:45,440 --> 00:23:48,240
common that those third-party services

534
00:23:48,240 --> 00:23:49,760
are asking for

535
00:23:49,760 --> 00:23:53,520
such uh such role why because as you

536
00:23:53,520 --> 00:23:57,120
remember as free bucket name has to be

537
00:23:57,120 --> 00:24:01,039
unique okay so every aws account uh

538
00:24:01,039 --> 00:24:04,240
which has the buckets for logs have to

539
00:24:04,240 --> 00:24:05,679
be named

540
00:24:05,679 --> 00:24:07,600
differently

541
00:24:07,600 --> 00:24:09,279
and

542
00:24:09,279 --> 00:24:10,640
the and

543
00:24:10,640 --> 00:24:13,520
it should be the access for example this

544
00:24:13,520 --> 00:24:16,240
third party service require access only

545
00:24:16,240 --> 00:24:20,480
to one bucket and only permissions to

546
00:24:20,480 --> 00:24:23,279
read objects inside of these buckets

547
00:24:23,279 --> 00:24:27,440
with logs but it is much easier to ask

548
00:24:27,440 --> 00:24:31,600
for read only access but it also gives

549
00:24:31,600 --> 00:24:34,880
an access to all the uh you know the

550
00:24:34,880 --> 00:24:36,960
read access to all

551
00:24:36,960 --> 00:24:39,279
other services

552
00:24:39,279 --> 00:24:43,279
now when i went through this research my

553
00:24:43,279 --> 00:24:44,720
first

554
00:24:44,720 --> 00:24:46,960
thought was

555
00:24:46,960 --> 00:24:48,720
hey is the

556
00:24:48,720 --> 00:24:52,080
cloud version of solar winds is just a

557
00:24:52,080 --> 00:24:54,000
matter of time

558
00:24:54,000 --> 00:24:56,240
uh please let me know in comments what

559
00:24:56,240 --> 00:24:58,559
do you think about it because i think

560
00:24:58,559 --> 00:25:01,679
that sooner or later one of those uh

561
00:25:01,679 --> 00:25:04,799
third party service will be compromised

562
00:25:04,799 --> 00:25:08,640
and that gives access to

563
00:25:08,640 --> 00:25:12,000
hundreds or thousands of aws accounts

564
00:25:12,000 --> 00:25:14,640
which are using this uh third-party

565
00:25:14,640 --> 00:25:17,039
service

566
00:25:17,279 --> 00:25:20,799
so as you see initial access

567
00:25:20,799 --> 00:25:23,600
is possible even if you are not exposing

568
00:25:23,600 --> 00:25:25,919
any vulnerable resources in the public

569
00:25:25,919 --> 00:25:28,480
internet now let's go through their

570
00:25:28,480 --> 00:25:31,600
privilege escalation methods

571
00:25:31,600 --> 00:25:35,279
pretty known i hope that it is commonly

572
00:25:35,279 --> 00:25:37,520
known error among you

573
00:25:37,520 --> 00:25:40,799
methods of escalating privileges um

574
00:25:40,799 --> 00:25:44,480
those those this method is based on the

575
00:25:44,480 --> 00:25:47,760
research of spencer bitsen

576
00:25:47,760 --> 00:25:51,120
and basically it searches through the

577
00:25:51,120 --> 00:25:53,520
dangerous permissions

578
00:25:53,520 --> 00:25:57,360
for example if compromised principle it

579
00:25:57,360 --> 00:26:00,080
can be the iam role it can be the iem

580
00:26:00,080 --> 00:26:04,240
user uh if this principle has the

581
00:26:04,240 --> 00:26:07,840
permission to pass role and to easy to

582
00:26:07,840 --> 00:26:09,279
run instance

583
00:26:09,279 --> 00:26:11,760
then this user

584
00:26:11,760 --> 00:26:16,080
can simply spin up a new ec2 instance

585
00:26:16,080 --> 00:26:16,960
and

586
00:26:16,960 --> 00:26:20,720
we've attached instance profile

587
00:26:20,720 --> 00:26:22,480
with the

588
00:26:22,480 --> 00:26:25,679
admin role and in this way

589
00:26:25,679 --> 00:26:28,799
then accessing this instance will give

590
00:26:28,799 --> 00:26:31,760
the access to the admin role

591
00:26:31,760 --> 00:26:34,480
which gives you access to all resources

592
00:26:34,480 --> 00:26:35,440
in your

593
00:26:35,440 --> 00:26:36,960
um

594
00:26:36,960 --> 00:26:40,400
in your uh account

595
00:26:40,400 --> 00:26:43,200
but this is about the lesser known

596
00:26:43,200 --> 00:26:47,440
techniques so here is my research

597
00:26:47,440 --> 00:26:51,720
it's it is based uh on some uh

598
00:26:51,720 --> 00:26:54,799
misconceptions in trust policy because

599
00:26:54,799 --> 00:26:57,039
basically in general

600
00:26:57,039 --> 00:26:59,760
iam role every identity and acts

601
00:26:59,760 --> 00:27:03,120
management role can be assumed when

602
00:27:03,120 --> 00:27:04,840
those two

603
00:27:04,840 --> 00:27:08,559
requirements are satisfied so first of

604
00:27:08,559 --> 00:27:11,760
all there has to be a trust relationship

605
00:27:11,760 --> 00:27:14,240
with the principal so for example my

606
00:27:14,240 --> 00:27:16,799
compromise aws

607
00:27:16,799 --> 00:27:19,120
identity and access management user has

608
00:27:19,120 --> 00:27:21,279
to have the trust relationship with this

609
00:27:21,279 --> 00:27:23,440
particular role

610
00:27:23,440 --> 00:27:24,480
and

611
00:27:24,480 --> 00:27:28,240
it should have also this sts assume role

612
00:27:28,240 --> 00:27:30,720
permission

613
00:27:30,720 --> 00:27:32,080
i've seen

614
00:27:32,080 --> 00:27:33,679
several times

615
00:27:33,679 --> 00:27:36,799
when there was approach that for example

616
00:27:36,799 --> 00:27:41,039
operators in aws account they

617
00:27:41,039 --> 00:27:43,840
didn't have the assume role permission

618
00:27:43,840 --> 00:27:46,559
and only administrators have this

619
00:27:46,559 --> 00:27:47,679
permission

620
00:27:47,679 --> 00:27:48,720
and

621
00:27:48,720 --> 00:27:51,600
in this approach every administrator can

622
00:27:51,600 --> 00:27:54,480
assume any role in this

623
00:27:54,480 --> 00:27:55,919
in this

624
00:27:55,919 --> 00:27:57,360
account

625
00:27:57,360 --> 00:28:00,080
which which is good because

626
00:28:00,080 --> 00:28:02,559
operator cannot assume this role right

627
00:28:02,559 --> 00:28:04,399
so there's no way about the privilege

628
00:28:04,399 --> 00:28:05,840
escalation

629
00:28:05,840 --> 00:28:06,720
well

630
00:28:06,720 --> 00:28:10,000
this is not always true because i found

631
00:28:10,000 --> 00:28:10,880
some

632
00:28:10,880 --> 00:28:14,000
um some ways that this

633
00:28:14,000 --> 00:28:17,919
requirement doesn't have to be satisfied

634
00:28:17,919 --> 00:28:20,480
and here's the example

635
00:28:20,480 --> 00:28:24,399
when you have the trust policy which is

636
00:28:24,399 --> 00:28:25,200
uh

637
00:28:25,200 --> 00:28:26,960
which has this

638
00:28:26,960 --> 00:28:28,000
um

639
00:28:28,000 --> 00:28:30,720
organization id okay so

640
00:28:30,720 --> 00:28:34,640
nowadays i think that everybody well

641
00:28:34,640 --> 00:28:36,480
surely not everybody but

642
00:28:36,480 --> 00:28:39,200
most of uh

643
00:28:39,200 --> 00:28:43,200
working companies in aws they use a aws

644
00:28:43,200 --> 00:28:45,120
organization

645
00:28:45,120 --> 00:28:48,960
and it is much easier to configure

646
00:28:48,960 --> 00:28:50,799
such role

647
00:28:50,799 --> 00:28:52,080
for all

648
00:28:52,080 --> 00:28:55,279
principles in the organization

649
00:28:55,279 --> 00:28:58,399
so there's a wildcard but there's also

650
00:28:58,399 --> 00:29:00,640
the conditions so

651
00:29:00,640 --> 00:29:03,520
so the accounts which are external to

652
00:29:03,520 --> 00:29:06,880
this organization cannot assume this

653
00:29:06,880 --> 00:29:08,000
role

654
00:29:08,000 --> 00:29:10,399
but what i discovered

655
00:29:10,399 --> 00:29:11,120
the

656
00:29:11,120 --> 00:29:15,039
it it was that if there is the

657
00:29:15,039 --> 00:29:17,760
wildcard here and no matter what

658
00:29:17,760 --> 00:29:20,240
condition is there

659
00:29:20,240 --> 00:29:21,200
any

660
00:29:21,200 --> 00:29:22,720
principle

661
00:29:22,720 --> 00:29:26,720
will be granted with the sds assume role

662
00:29:26,720 --> 00:29:27,760
permission

663
00:29:27,760 --> 00:29:29,520
in other words

664
00:29:29,520 --> 00:29:33,760
the trust policy behave like a

665
00:29:33,760 --> 00:29:36,080
resource policy base resource based

666
00:29:36,080 --> 00:29:37,279
policy

667
00:29:37,279 --> 00:29:40,320
so it can grant permission to the

668
00:29:40,320 --> 00:29:41,130
principal

669
00:29:41,130 --> 00:29:42,480
[Music]

670
00:29:42,480 --> 00:29:43,760
and

671
00:29:43,760 --> 00:29:45,520
you don't then

672
00:29:45,520 --> 00:29:49,279
require the assume role permission

673
00:29:49,279 --> 00:29:53,120
in them when you search for trust trust

674
00:29:53,120 --> 00:29:54,799
policies some

675
00:29:54,799 --> 00:29:56,320
references

676
00:29:56,320 --> 00:29:57,600
on in the

677
00:29:57,600 --> 00:30:00,240
official resources like for example

678
00:30:00,240 --> 00:30:03,520
aws uh security blog which is awesome by

679
00:30:03,520 --> 00:30:05,360
the way

680
00:30:05,360 --> 00:30:07,279
you can find that

681
00:30:07,279 --> 00:30:11,200
such policy is even in this block as a

682
00:30:11,200 --> 00:30:14,399
reference now as you can see uh i'm

683
00:30:14,399 --> 00:30:17,440
referring referring to this article

684
00:30:17,440 --> 00:30:20,399
using the web archive because after

685
00:30:20,399 --> 00:30:23,679
publishing my article this section was

686
00:30:23,679 --> 00:30:26,399
removed which is awesome because

687
00:30:26,399 --> 00:30:29,840
now i have approved that aws folks they

688
00:30:29,840 --> 00:30:32,880
are listening they are

689
00:30:32,880 --> 00:30:34,720
they they see

690
00:30:34,720 --> 00:30:36,720
that the researchers work

691
00:30:36,720 --> 00:30:39,919
and they are trying to do uh to do

692
00:30:39,919 --> 00:30:40,440
better

693
00:30:40,440 --> 00:30:42,080
[Music]

694
00:30:42,080 --> 00:30:45,200
this is not the only way how can we

695
00:30:45,200 --> 00:30:48,399
bypass this requirement of having the

696
00:30:48,399 --> 00:30:51,039
assumed role another very interesting

697
00:30:51,039 --> 00:30:52,000
which is

698
00:30:52,000 --> 00:30:52,880
still

699
00:30:52,880 --> 00:30:54,399
quite

700
00:30:54,399 --> 00:30:55,919
old for me

701
00:30:55,919 --> 00:30:59,120
uh thing about trust policy is that if

702
00:30:59,120 --> 00:31:01,679
you put in the principle

703
00:31:01,679 --> 00:31:03,600
role uh

704
00:31:03,600 --> 00:31:07,279
on r a r n sorry

705
00:31:07,279 --> 00:31:09,919
um of the role

706
00:31:09,919 --> 00:31:13,200
then this role again doesn't require the

707
00:31:13,200 --> 00:31:15,600
fsu role permission

708
00:31:15,600 --> 00:31:18,080
which is weird

709
00:31:18,080 --> 00:31:18,960
in

710
00:31:18,960 --> 00:31:21,840
in this case just imagine that there's a

711
00:31:21,840 --> 00:31:25,760
compromised unprivileged iam user which

712
00:31:25,760 --> 00:31:29,519
then is allowed without uh assume role

713
00:31:29,519 --> 00:31:33,279
permission is allowed to access the

714
00:31:33,279 --> 00:31:37,039
maintenance role and then if the admins

715
00:31:37,039 --> 00:31:41,200
role trust policy have this principle

716
00:31:41,200 --> 00:31:44,240
have this role in principle then

717
00:31:44,240 --> 00:31:46,559
from the maintenance role it is possible

718
00:31:46,559 --> 00:31:50,399
to access admin role that may be quite

719
00:31:50,399 --> 00:31:51,840
um

720
00:31:51,840 --> 00:31:54,720
confusing and hard to understand so let

721
00:31:54,720 --> 00:31:58,159
me show it on a demo

722
00:31:58,159 --> 00:32:01,679
so here i have compromised user okay

723
00:32:01,679 --> 00:32:05,120
as you can see there's no uh permissions

724
00:32:05,120 --> 00:32:07,840
so this user has no permissions okay so

725
00:32:07,840 --> 00:32:10,640
nobody cares about compromised user

726
00:32:10,640 --> 00:32:12,559
which has no permissions

727
00:32:12,559 --> 00:32:14,480
we have this maintenance role

728
00:32:14,480 --> 00:32:15,360
um

729
00:32:15,360 --> 00:32:18,640
with read only access so again nothing

730
00:32:18,640 --> 00:32:22,480
very scary uh just read only access and

731
00:32:22,480 --> 00:32:24,080
if we go to the

732
00:32:24,080 --> 00:32:26,960
trust relationship we can see that yeah

733
00:32:26,960 --> 00:32:30,399
there is wildcard in the principle but

734
00:32:30,399 --> 00:32:33,519
there is also condition that only a

735
00:32:33,519 --> 00:32:37,279
principle from this aws account can this

736
00:32:37,279 --> 00:32:40,080
aws organization can assume it so

737
00:32:40,080 --> 00:32:43,039
assuming i have this compromised account

738
00:32:43,039 --> 00:32:45,279
uh long term keys

739
00:32:45,279 --> 00:32:48,559
so here uh using the aws sds get caller

740
00:32:48,559 --> 00:32:51,200
identity here i can prove that yes i'm

741
00:32:51,200 --> 00:32:55,039
using this compromised user profile

742
00:32:55,039 --> 00:32:57,279
so now let's try to assume the

743
00:32:57,279 --> 00:32:59,840
maintenance role you can do it by the

744
00:32:59,840 --> 00:33:02,399
command sts assume role then you have to

745
00:33:02,399 --> 00:33:05,679
specify the ir and

746
00:33:05,679 --> 00:33:08,080
the name of the

747
00:33:08,080 --> 00:33:10,399
of the role uh and

748
00:33:10,399 --> 00:33:13,519
then voila you are getting the aws

749
00:33:13,519 --> 00:33:16,240
access key secret access key as well as

750
00:33:16,240 --> 00:33:18,159
the session token because

751
00:33:18,159 --> 00:33:19,279
roles

752
00:33:19,279 --> 00:33:22,640
do not use the long term credentials so

753
00:33:22,640 --> 00:33:24,960
let me now configure

754
00:33:24,960 --> 00:33:27,519
um this maintenance

755
00:33:27,519 --> 00:33:30,799
role profile on my local workstation

756
00:33:30,799 --> 00:33:33,600
here i'm specifying the aws access key

757
00:33:33,600 --> 00:33:36,399
id secret access key

758
00:33:36,399 --> 00:33:39,679
as well as the region and i have to also

759
00:33:39,679 --> 00:33:42,320
specify the session token and from the

760
00:33:42,320 --> 00:33:46,640
cli you can do it by aws configure set

761
00:33:46,640 --> 00:33:48,720
aws session token

762
00:33:48,720 --> 00:33:51,279
command and then you are specifying this

763
00:33:51,279 --> 00:33:52,110
session token

764
00:33:52,110 --> 00:33:53,679
[Music]

765
00:33:53,679 --> 00:33:58,880
uh so let me just quickly copy paste it

766
00:33:59,350 --> 00:34:00,880
[Music]

767
00:34:00,880 --> 00:34:03,200
and then of course in the name of the

768
00:34:03,200 --> 00:34:05,679
maintenance role uh

769
00:34:05,679 --> 00:34:07,519
profile

770
00:34:07,519 --> 00:34:08,879
okay so

771
00:34:08,879 --> 00:34:12,399
that gives me so let's now check if this

772
00:34:12,399 --> 00:34:16,320
role uh was configured properly so again

773
00:34:16,320 --> 00:34:19,119
sds get color identity but this time

774
00:34:19,119 --> 00:34:22,079
using the profile maintenance role

775
00:34:22,079 --> 00:34:24,000
and

776
00:34:24,000 --> 00:34:26,399
it is a confirmation that yeah i'm using

777
00:34:26,399 --> 00:34:27,359
the

778
00:34:27,359 --> 00:34:31,199
assumed role maintenance role now

779
00:34:31,199 --> 00:34:33,760
there is another role under the same

780
00:34:33,760 --> 00:34:36,560
account but this time there's no wild

781
00:34:36,560 --> 00:34:39,199
card in trust policy

782
00:34:39,199 --> 00:34:41,760
um so let me check the trust policy of

783
00:34:41,760 --> 00:34:44,119
the admin role okay there's a

784
00:34:44,119 --> 00:34:46,639
administrator access

785
00:34:46,639 --> 00:34:49,040
attached to this role

786
00:34:49,040 --> 00:34:51,520
but this time instead of wildcard there

787
00:34:51,520 --> 00:34:54,879
is the maintenance role which is allowed

788
00:34:54,879 --> 00:34:55,760
to

789
00:34:55,760 --> 00:34:59,760
assume the admin role so now because i

790
00:34:59,760 --> 00:35:02,160
have this my maintenance role i can

791
00:35:02,160 --> 00:35:03,760
assume

792
00:35:03,760 --> 00:35:05,359
admin role too

793
00:35:05,359 --> 00:35:06,880
okay

794
00:35:06,880 --> 00:35:07,760
and

795
00:35:07,760 --> 00:35:11,920
as you can see now i am the admin role

796
00:35:11,920 --> 00:35:14,960
so always if you are uh doing some

797
00:35:14,960 --> 00:35:19,200
pentest stuff uh remember to verify

798
00:35:19,200 --> 00:35:23,920
those trust policy configurations

799
00:35:23,920 --> 00:35:26,160
good

800
00:35:28,240 --> 00:35:31,680
now regarding data exfiltration

801
00:35:31,680 --> 00:35:34,400
um it is well known that you can

802
00:35:34,400 --> 00:35:36,960
once you are inside you can exfiltrate

803
00:35:36,960 --> 00:35:39,839
data using numerous ways

804
00:35:39,839 --> 00:35:42,960
now like for example you can do

805
00:35:42,960 --> 00:35:46,000
a shadow copy of the ec2 or rds

806
00:35:46,000 --> 00:35:47,680
snapshots

807
00:35:47,680 --> 00:35:50,400
and you can then share it with the

808
00:35:50,400 --> 00:35:51,680
attackers

809
00:35:51,680 --> 00:35:54,560
aws account you can if you have

810
00:35:54,560 --> 00:35:56,960
permissions to the simple email service

811
00:35:56,960 --> 00:35:59,280
or simple notification service then you

812
00:35:59,280 --> 00:36:02,000
can simply use them to extract those

813
00:36:02,000 --> 00:36:06,800
data there is even the vpc endpoint

814
00:36:07,040 --> 00:36:10,720
way that you can set up the

815
00:36:10,720 --> 00:36:12,800
connection from the

816
00:36:12,800 --> 00:36:16,960
restricted vpc uh to particular services

817
00:36:16,960 --> 00:36:18,400
like uh

818
00:36:18,400 --> 00:36:21,520
s3 for example so imagine that you have

819
00:36:21,520 --> 00:36:23,359
restricted vpc

820
00:36:23,359 --> 00:36:26,240
um and so there's no connection uh

821
00:36:26,240 --> 00:36:28,880
outbound connection to the internet so

822
00:36:28,880 --> 00:36:32,000
you cannot use as free service but if

823
00:36:32,000 --> 00:36:34,880
you set up the vpc endpoint and then

824
00:36:34,880 --> 00:36:37,839
from this restricted vpc you can access

825
00:36:37,839 --> 00:36:40,400
the s3 service

826
00:36:40,400 --> 00:36:42,720
not going out

827
00:36:42,720 --> 00:36:45,040
from the amazon

828
00:36:45,040 --> 00:36:46,480
infrastructure

829
00:36:46,480 --> 00:36:48,560
but the thing is that all of them can be

830
00:36:48,560 --> 00:36:52,079
monitored you will see logs

831
00:36:52,079 --> 00:36:54,880
in when you investigate the issue you

832
00:36:54,880 --> 00:36:57,440
will see all those logs uh

833
00:36:57,440 --> 00:37:01,920
when the attacker use those services

834
00:37:01,920 --> 00:37:05,200
so lesser known

835
00:37:06,839 --> 00:37:11,680
okay just the luck sorry um so in a

836
00:37:11,680 --> 00:37:13,760
lesser known technique is the dns

837
00:37:13,760 --> 00:37:17,520
exfiltration which is so cool for me uh

838
00:37:17,520 --> 00:37:20,000
that there is um

839
00:37:20,000 --> 00:37:23,040
default configuration when you are

840
00:37:23,040 --> 00:37:26,079
spinning up the new vpc or you are using

841
00:37:26,079 --> 00:37:27,760
the default vpc

842
00:37:27,760 --> 00:37:30,240
there is always by default

843
00:37:30,240 --> 00:37:33,200
enabled dns resolution

844
00:37:33,200 --> 00:37:36,560
what means that once you set up spin up

845
00:37:36,560 --> 00:37:39,359
your ec2 installs in the

846
00:37:39,359 --> 00:37:41,839
vpc then you don't have to worry about

847
00:37:41,839 --> 00:37:44,240
the dns because when you type for

848
00:37:44,240 --> 00:37:48,079
example curl google com then you will

849
00:37:48,079 --> 00:37:51,280
get the name google com will be resolved

850
00:37:51,280 --> 00:37:54,320
by the amazon provided dns

851
00:37:54,320 --> 00:37:56,320
easy right

852
00:37:56,320 --> 00:37:59,680
but the devil is in the details and if

853
00:37:59,680 --> 00:38:03,440
you go through in detail uh through the

854
00:38:03,440 --> 00:38:04,560
amazon

855
00:38:04,560 --> 00:38:08,000
documentation you will see that this dns

856
00:38:08,000 --> 00:38:09,920
traffic actually

857
00:38:09,920 --> 00:38:11,599
cannot be controlled

858
00:38:11,599 --> 00:38:14,640
in other words you cannot block it

859
00:38:14,640 --> 00:38:16,640
control it using the network access

860
00:38:16,640 --> 00:38:20,079
control lists or security groups

861
00:38:20,079 --> 00:38:21,359
furthermore

862
00:38:21,359 --> 00:38:22,800
um

863
00:38:22,800 --> 00:38:24,480
there is the

864
00:38:24,480 --> 00:38:27,520
vpc flow logs if you are familiar with

865
00:38:27,520 --> 00:38:29,760
this this is the service which is

866
00:38:29,760 --> 00:38:31,760
responsible for

867
00:38:31,760 --> 00:38:33,760
logging all the network

868
00:38:33,760 --> 00:38:36,079
traffic okay like

869
00:38:36,079 --> 00:38:38,800
what was the query um

870
00:38:38,800 --> 00:38:41,920
from which source ip to each destination

871
00:38:41,920 --> 00:38:45,359
ip what protocol and so on however even

872
00:38:45,359 --> 00:38:47,599
in the documentation there is the clear

873
00:38:47,599 --> 00:38:48,800
statement

874
00:38:48,800 --> 00:38:51,920
that this dns traffic this the traffic

875
00:38:51,920 --> 00:38:55,760
to amazon dns server is not logged at

876
00:38:55,760 --> 00:38:56,880
all

877
00:38:56,880 --> 00:38:58,720
so what it means from the attacker's

878
00:38:58,720 --> 00:39:00,240
perspective

879
00:39:00,240 --> 00:39:03,599
well it is a great way to exfiltrate

880
00:39:03,599 --> 00:39:07,920
data which is silent uh they exfiltrate

881
00:39:07,920 --> 00:39:11,040
data because it is not logged anywhere

882
00:39:11,040 --> 00:39:13,359
so imagine the following situation i

883
00:39:13,359 --> 00:39:15,839
have the private subnet and i have the

884
00:39:15,839 --> 00:39:18,480
public subnet from the private subnet

885
00:39:18,480 --> 00:39:19,839
every

886
00:39:19,839 --> 00:39:22,720
traffic which is going outside of my

887
00:39:22,720 --> 00:39:25,280
subnet should go through the public

888
00:39:25,280 --> 00:39:26,400
subnet

889
00:39:26,400 --> 00:39:29,200
to the internet gateway and then to the

890
00:39:29,200 --> 00:39:30,560
internet

891
00:39:30,560 --> 00:39:31,440
but

892
00:39:31,440 --> 00:39:35,599
knowing that the amazon aws provided dns

893
00:39:35,599 --> 00:39:39,280
infrastructure uh is using the different

894
00:39:39,280 --> 00:39:40,720
infrastructure

895
00:39:40,720 --> 00:39:43,280
when you do the following

896
00:39:43,280 --> 00:39:46,480
comment like ping and here is the secret

897
00:39:46,480 --> 00:39:50,480
message encoded in base64

898
00:39:50,480 --> 00:39:51,359
then

899
00:39:51,359 --> 00:39:54,839
i'm the owner of the name server

900
00:39:54,839 --> 00:39:58,480
zepsky.com now this query will be then

901
00:39:58,480 --> 00:40:00,880
sent to my dns

902
00:40:00,880 --> 00:40:02,400
name server

903
00:40:02,400 --> 00:40:05,680
uh which is the jetski

904
00:40:05,680 --> 00:40:09,599
and then i can see this secret

905
00:40:09,599 --> 00:40:11,680
message

906
00:40:11,680 --> 00:40:14,079
of course i can go a step further and

907
00:40:14,079 --> 00:40:16,960
instead of just sending the secret

908
00:40:16,960 --> 00:40:18,000
message

909
00:40:18,000 --> 00:40:21,040
using the dns i can set up a reverse

910
00:40:21,040 --> 00:40:25,520
show right so imagine you have the um

911
00:40:25,520 --> 00:40:27,280
restricted vpc

912
00:40:27,280 --> 00:40:30,800
and you can spin up the reverse shell

913
00:40:30,800 --> 00:40:33,760
over the dns okay so

914
00:40:33,760 --> 00:40:37,280
um this this instance shouldn't have

915
00:40:37,280 --> 00:40:39,760
access with the internet

916
00:40:39,760 --> 00:40:42,560
but i can run the dns

917
00:40:42,560 --> 00:40:45,200
cut to binary on it

918
00:40:45,200 --> 00:40:48,160
okay and then it will connect

919
00:40:48,160 --> 00:40:51,200
to my name server so using the dns

920
00:40:51,200 --> 00:40:54,560
traffic it will come it will give me the

921
00:40:54,560 --> 00:40:59,040
reverse shell to this victim instance

922
00:40:59,040 --> 00:41:02,400
one important thing to note is that this

923
00:41:02,400 --> 00:41:06,400
is very loud okay so there's a lot of

924
00:41:06,400 --> 00:41:08,640
dns queries when you are setting up the

925
00:41:08,640 --> 00:41:10,079
reverse shell

926
00:41:10,079 --> 00:41:13,440
and if you are so loud then there's a

927
00:41:13,440 --> 00:41:16,319
good news for you because it will be

928
00:41:16,319 --> 00:41:19,760
detected by the aws guard duty so then

929
00:41:19,760 --> 00:41:22,319
you will get the incident that

930
00:41:22,319 --> 00:41:24,079
there's a dm

931
00:41:24,079 --> 00:41:28,800
possible dns data exfiltration

932
00:41:29,839 --> 00:41:31,920
so what about defense

933
00:41:31,920 --> 00:41:32,880
um

934
00:41:32,880 --> 00:41:36,160
let's start from the ending so regarding

935
00:41:36,160 --> 00:41:38,720
the dns exfiltration

936
00:41:38,720 --> 00:41:41,440
there is a new service which is called

937
00:41:41,440 --> 00:41:45,520
the route 53 resolver dns firewall

938
00:41:45,520 --> 00:41:48,319
and this service was released

939
00:41:48,319 --> 00:41:50,560
at the end of march of this year so

940
00:41:50,560 --> 00:41:52,480
that's pretty new

941
00:41:52,480 --> 00:41:53,520
and

942
00:41:53,520 --> 00:41:57,920
from my experience it seems that it is

943
00:41:57,920 --> 00:42:01,520
it is not commonly used so

944
00:42:01,520 --> 00:42:04,240
in other words i don't know any customer

945
00:42:04,240 --> 00:42:08,000
which is which uses the root 53 resolver

946
00:42:08,000 --> 00:42:11,280
dns firewall but it is definitely

947
00:42:11,280 --> 00:42:13,110
something that you should use

948
00:42:13,110 --> 00:42:14,319
[Music]

949
00:42:14,319 --> 00:42:16,800
why because then you can

950
00:42:16,800 --> 00:42:17,760
see

951
00:42:17,760 --> 00:42:21,599
any logs you have the ability to allow

952
00:42:21,599 --> 00:42:23,760
block or alert

953
00:42:23,760 --> 00:42:25,839
any dns queries

954
00:42:25,839 --> 00:42:29,119
and for example here i specified all the

955
00:42:29,119 --> 00:42:32,800
domains uh and i want to be alerted

956
00:42:32,800 --> 00:42:35,839
about all dns queries and then in the

957
00:42:35,839 --> 00:42:38,560
logs i can see that and then

958
00:42:38,560 --> 00:42:39,599
and then

959
00:42:39,599 --> 00:42:42,640
once you test it you can then

960
00:42:42,640 --> 00:42:45,359
specify the law or

961
00:42:45,359 --> 00:42:46,560
block

962
00:42:46,560 --> 00:42:47,370
rules

963
00:42:47,370 --> 00:42:48,720
[Music]

964
00:42:48,720 --> 00:42:50,240
regarding the

965
00:42:50,240 --> 00:42:52,240
privilege escalation

966
00:42:52,240 --> 00:42:54,400
start from limiting permissions to third

967
00:42:54,400 --> 00:42:56,800
parties seriously this is

968
00:42:56,800 --> 00:43:00,240
very common and practice

969
00:43:00,240 --> 00:43:02,800
what is what i've seen among my

970
00:43:02,800 --> 00:43:04,000
customers

971
00:43:04,000 --> 00:43:05,440
so

972
00:43:05,440 --> 00:43:07,280
it was even uh

973
00:43:07,280 --> 00:43:10,480
that i asked hey why they have so so

974
00:43:10,480 --> 00:43:14,640
much uh so uh wide permissions

975
00:43:14,640 --> 00:43:16,079
um and

976
00:43:16,079 --> 00:43:19,200
all of them are replied that hey this is

977
00:43:19,200 --> 00:43:22,079
how it works the the third party service

978
00:43:22,079 --> 00:43:26,079
is asking directly for this uh read-only

979
00:43:26,079 --> 00:43:27,839
permissions

980
00:43:27,839 --> 00:43:31,520
um there was also situation when i uh

981
00:43:31,520 --> 00:43:34,720
when i found some aws account which has

982
00:43:34,720 --> 00:43:37,040
even even higher than just read-only

983
00:43:37,040 --> 00:43:40,880
permissions and it took several days for

984
00:43:40,880 --> 00:43:44,160
the customer to investigate who the hell

985
00:43:44,160 --> 00:43:47,359
is this aws account and after several

986
00:43:47,359 --> 00:43:50,240
days of investigation they found that

987
00:43:50,240 --> 00:43:53,280
well the this is the third party service

988
00:43:53,280 --> 00:43:55,440
which we were using

989
00:43:55,440 --> 00:43:59,520
a couple years ago and we no longer use

990
00:43:59,520 --> 00:44:01,359
it but well

991
00:44:01,359 --> 00:44:04,480
they they forget they forgot about

992
00:44:04,480 --> 00:44:08,960
removing it from the trust policies

993
00:44:08,960 --> 00:44:11,839
and another great service that you may

994
00:44:11,839 --> 00:44:15,280
like is the iem access analyzer and

995
00:44:15,280 --> 00:44:18,960
based on the history of usage

996
00:44:18,960 --> 00:44:22,800
iam permissions uh well all aws

997
00:44:22,800 --> 00:44:24,160
permissions

998
00:44:24,160 --> 00:44:27,520
it will give you an information which

999
00:44:27,520 --> 00:44:30,720
permissions are used by every principal

1000
00:44:30,720 --> 00:44:34,319
and uh which are not and can be removed

1001
00:44:34,319 --> 00:44:37,359
so this is a great approach to

1002
00:44:37,359 --> 00:44:40,160
set up the list privilege

1003
00:44:40,160 --> 00:44:42,319
policy

1004
00:44:42,319 --> 00:44:44,400
and one more thing if you are doing

1005
00:44:44,400 --> 00:44:47,839
security assessment it is not just

1006
00:44:47,839 --> 00:44:49,680
running a scanner

1007
00:44:49,680 --> 00:44:52,000
finding just misconfigurations of the

1008
00:44:52,000 --> 00:44:55,040
service is one thing but do not be so

1009
00:44:55,040 --> 00:44:56,880
focused on just finding the missed

1010
00:44:56,880 --> 00:44:59,359
configurations because if you run a

1011
00:44:59,359 --> 00:45:02,960
scanner it will not detect those issues

1012
00:45:02,960 --> 00:45:06,079
well vast majority of scanners will not

1013
00:45:06,079 --> 00:45:07,440
detect the

1014
00:45:07,440 --> 00:45:11,040
um the issues in trust policy because

1015
00:45:11,040 --> 00:45:13,119
from the perspective of scanner it looks

1016
00:45:13,119 --> 00:45:14,000
like

1017
00:45:14,000 --> 00:45:16,000
legitimate traffic

1018
00:45:16,000 --> 00:45:18,240
okay

1019
00:45:18,240 --> 00:45:21,200
and regarding the supply chain attacks

1020
00:45:21,200 --> 00:45:22,000
well

1021
00:45:22,000 --> 00:45:25,040
uh that may sound quite sarcastic but

1022
00:45:25,040 --> 00:45:28,000
but use only trusted resources

1023
00:45:28,000 --> 00:45:30,720
now i need to say why i uh

1024
00:45:30,720 --> 00:45:34,000
i need to explain myself why why i

1025
00:45:34,000 --> 00:45:36,720
didn't use you know more

1026
00:45:36,720 --> 00:45:38,240
um

1027
00:45:38,240 --> 00:45:40,880
more instructions what should be done

1028
00:45:40,880 --> 00:45:45,920
because it depends on how you use um aws

1029
00:45:45,920 --> 00:45:48,480
how you use any cloud

1030
00:45:48,480 --> 00:45:49,599
and

1031
00:45:49,599 --> 00:45:52,720
how your infrastructure look like

1032
00:45:52,720 --> 00:45:56,240
so for example one good rule is to use

1033
00:45:56,240 --> 00:45:59,680
the golden ami image okay so you have

1034
00:45:59,680 --> 00:46:04,480
the um authorized the brand new ami from

1035
00:46:04,480 --> 00:46:07,680
amazon which is free from any malware

1036
00:46:07,680 --> 00:46:11,359
and then you are baking it in uh

1037
00:46:11,359 --> 00:46:14,480
with the all the dependencies

1038
00:46:14,480 --> 00:46:17,440
your application require with all

1039
00:46:17,440 --> 00:46:21,520
software additional and so on and

1040
00:46:21,520 --> 00:46:24,640
your users are allowed only to use this

1041
00:46:24,640 --> 00:46:27,200
golden image and this is in general a

1042
00:46:27,200 --> 00:46:28,400
great rule

1043
00:46:28,400 --> 00:46:30,880
but if you don't maintain this golden

1044
00:46:30,880 --> 00:46:34,400
image then it can be it can

1045
00:46:34,400 --> 00:46:37,440
very quickly became um

1046
00:46:37,440 --> 00:46:39,040
you know

1047
00:46:39,040 --> 00:46:41,040
unpatched and

1048
00:46:41,040 --> 00:46:44,000
vulnerable to newly discovered uh

1049
00:46:44,000 --> 00:46:46,000
vulnerabilities

1050
00:46:46,000 --> 00:46:47,040
um

1051
00:46:47,040 --> 00:46:48,400
so yeah

1052
00:46:48,400 --> 00:46:50,960
so forgive me but

1053
00:46:50,960 --> 00:46:53,599
in this in this um

1054
00:46:53,599 --> 00:46:56,560
regarding this class of attack i have to

1055
00:46:56,560 --> 00:47:00,000
just say that use only trusted resources

1056
00:47:00,000 --> 00:47:04,400
raise awareness among your teammates

1057
00:47:04,400 --> 00:47:07,599
that such attacks are possible and those

1058
00:47:07,599 --> 00:47:09,520
attacks i'm pretty sure they will be

1059
00:47:09,520 --> 00:47:12,000
more and more often visible in

1060
00:47:12,000 --> 00:47:14,160
in the wild

1061
00:47:14,160 --> 00:47:17,520
all right that's all from my side um

1062
00:47:17,520 --> 00:47:18,720
so

1063
00:47:18,720 --> 00:47:20,079
we are a little

1064
00:47:20,079 --> 00:47:22,079
um after the time

1065
00:47:22,079 --> 00:47:23,520
uh so

1066
00:47:23,520 --> 00:47:26,800
if you want to uh connect i would really

1067
00:47:26,800 --> 00:47:28,800
love your feedback regarding the

1068
00:47:28,800 --> 00:47:30,800
presentation this is the first time i

1069
00:47:30,800 --> 00:47:33,280
was giving this presentation so

1070
00:47:33,280 --> 00:47:35,680
uh i would really appreciate any

1071
00:47:35,680 --> 00:47:37,280
feedback from you

1072
00:47:37,280 --> 00:47:38,800
again if you want to follow me on

1073
00:47:38,800 --> 00:47:41,680
twitter or linkedin feel free

1074
00:47:41,680 --> 00:47:46,240
there i'm sharing my uh latest findings

1075
00:47:46,240 --> 00:47:47,200
okay

1076
00:47:47,200 --> 00:47:49,520
that's all from my side are there any

1077
00:47:49,520 --> 00:47:52,520
questions

