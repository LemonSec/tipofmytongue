1
00:00:01,819 --> 00:00:05,920
so today I'm going to talk<font color="#CCCCCC"> about invoked</font>

2
00:00:04,220 --> 00:00:08,600
<font color="#CCCCCC">ossification</font><font color="#E5E5E5"> looking at finn-style</font>

3
00:00:05,920 --> 00:00:10,010
<font color="#E5E5E5">office</font><font color="#CCCCCC"> keishon of command XE in any</font>

4
00:00:08,600 --> 00:00:13,099
argument you can think of that you'd

5
00:00:10,010 --> 00:00:19,689
want to run<font color="#E5E5E5"> on the command</font><font color="#CCCCCC"> as I</font><font color="#E5E5E5"> said my</font>

6
00:00:13,099 --> 00:00:25,529
name is<font color="#E5E5E5"> Daniel Bohannon I do check one</font>

7
00:00:19,690 --> 00:00:25,529
<font color="#CCCCCC">check check</font><font color="#E5E5E5"> a little</font><font color="#CCCCCC"> bit</font>

8
00:00:26,490 --> 00:00:48,120
we have any extra<font color="#CCCCCC"> back looking swap out</font>

9
00:00:30,140 --> 00:00:48,680
check keep going<font color="#CCCCCC"> alright can</font><font color="#E5E5E5"> you hear me</font>

10
00:00:48,120 --> 00:00:51,720
<font color="#CCCCCC">alright</font>

11
00:00:48,680 --> 00:00:53,760
awesome<font color="#CCCCCC"> so yeah I</font><font color="#E5E5E5"> do detection stuff</font>

12
00:00:51,720 --> 00:00:55,680
<font color="#E5E5E5">with the advanced practices team at</font><font color="#CCCCCC"> fire</font>

13
00:00:53,760 --> 00:00:57,540
<font color="#E5E5E5">I previous to</font><font color="#CCCCCC"> that was doing man dir</font>

14
00:00:55,680 --> 00:01:00,269
<font color="#CCCCCC">consulting</font><font color="#E5E5E5"> I have an obsession with</font>

15
00:00:57,540 --> 00:01:02,010
obfuscation<font color="#CCCCCC"> and so I'm</font><font color="#E5E5E5"> the author of the</font>

16
00:01:00,270 --> 00:01:03,180
invoke obfuscation in book cradle craft

17
00:01:02,010 --> 00:01:04,860
your office occasionally<font color="#E5E5E5"> works for</font>

18
00:01:03,180 --> 00:01:06,450
PowerShell co-author<font color="#CCCCCC"> or the revoke</font>

19
00:01:04,860 --> 00:01:08,250
obfuscation detection for<font color="#E5E5E5"> PowerShell</font>

20
00:01:06,450 --> 00:01:09,750
with<font color="#E5E5E5"> Lee Holmes from Microsoft and then</font>

21
00:01:08,250 --> 00:01:11,600
<font color="#CCCCCC">invoked ossification which we'll be</font>

22
00:01:09,750 --> 00:01:13,710
<font color="#CCCCCC">talking about today</font>

23
00:01:11,600 --> 00:01:15,809
disclaimer nothing I'm talking about is

24
00:01:13,710 --> 00:01:17,550
pointing to anyone or set of customers

25
00:01:15,810 --> 00:01:18,509
our clients<font color="#CCCCCC"> the far right</font>

26
00:01:17,550 --> 00:01:20,399
most of the stuff I'm talking<font color="#CCCCCC"> about</font>

27
00:01:18,509 --> 00:01:22,740
<font color="#E5E5E5">we've had never seen in the</font><font color="#CCCCCC"> wild before</font>

28
00:01:20,399 --> 00:01:25,080
this research was out but standard

29
00:01:22,740 --> 00:01:26,300
disclaimer<font color="#E5E5E5"> so today we're gonna take a</font>

30
00:01:25,080 --> 00:01:28,679
quick look<font color="#E5E5E5"> at the state</font><font color="#CCCCCC"> of obfuscation</font>

31
00:01:26,300 --> 00:01:30,360
<font color="#CCCCCC">and then we're gonna dive into three</font>

32
00:01:28,680 --> 00:01:31,890
case studies<font color="#CCCCCC"> to kind</font><font color="#E5E5E5"> of for me to kind</font>

33
00:01:30,360 --> 00:01:33,929
of share<font color="#CCCCCC"> the impetus that led me</font><font color="#E5E5E5"> to</font>

34
00:01:31,890 --> 00:01:35,549
<font color="#CCCCCC">start</font><font color="#E5E5E5"> doing this</font><font color="#CCCCCC"> research</font><font color="#E5E5E5"> and then we're</font>

35
00:01:33,930 --> 00:01:37,920
<font color="#E5E5E5">going</font><font color="#CCCCCC"> to cover</font><font color="#E5E5E5"> kind of three sections of</font>

36
00:01:35,549 --> 00:01:39,659
obfuscation<font color="#E5E5E5"> in command XE first is</font>

37
00:01:37,920 --> 00:01:41,700
obfuscation of legitimate binary names

38
00:01:39,659 --> 00:01:43,830
then we're gonna look at a category<font color="#E5E5E5"> that</font>

39
00:01:41,700 --> 00:01:45,900
<font color="#E5E5E5">I'm I've counted of insertion character</font>

40
00:01:43,830 --> 00:01:47,189
obfuscation<font color="#CCCCCC"> and then we're gonna wrap</font>

41
00:01:45,900 --> 00:01:49,799
<font color="#E5E5E5">all those things together into full</font>

42
00:01:47,189 --> 00:01:51,179
payload<font color="#CCCCCC"> encoding and obfuscation I mean</font>

43
00:01:49,799 --> 00:01:52,670
you can just<font color="#E5E5E5"> see how crazy it'll get</font>

44
00:01:51,180 --> 00:01:54,420
then I'm gonna do a<font color="#E5E5E5"> demo of</font>

45
00:01:52,670 --> 00:01:56,220
<font color="#E5E5E5">investigation which is up</font><font color="#CCCCCC"> on</font><font color="#E5E5E5"> my github</font>

46
00:01:54,420 --> 00:01:58,650
<font color="#E5E5E5">and then at the end we'll</font><font color="#CCCCCC"> talk about</font><font color="#E5E5E5"> the</font>

47
00:01:56,220 --> 00:02:01,020
<font color="#E5E5E5">technique often there's a lot</font><font color="#CCCCCC"> of content</font>

48
00:01:58,650 --> 00:02:02,580
<font color="#E5E5E5">but if you miss something or if you</font>

49
00:02:01,020 --> 00:02:04,140
<font color="#E5E5E5">don't like the sound of my voice</font><font color="#CCCCCC"> you can</font>

50
00:02:02,580 --> 00:02:06,000
read my white paper<font color="#CCCCCC"> on this topic which</font>

51
00:02:04,140 --> 00:02:07,229
is<font color="#E5E5E5"> 36 pages of everything we're</font><font color="#CCCCCC"> talking</font>

52
00:02:06,000 --> 00:02:09,720
<font color="#CCCCCC">about and it does go into a lot more</font>

53
00:02:07,229 --> 00:02:12,110
detail and<font color="#E5E5E5"> some of the in the wild cases</font>

54
00:02:09,720 --> 00:02:15,989
as well<font color="#E5E5E5"> as a lot of the detection work</font>

55
00:02:12,110 --> 00:02:16,530
so state of obfuscation<font color="#CCCCCC"> let's dive right</font>

56
00:02:15,989 --> 00:02:18,660
<font color="#E5E5E5">in</font>

57
00:02:16,530 --> 00:02:20,430
why<font color="#CCCCCC"> office gate well from a red teamers</font>

58
00:02:18,660 --> 00:02:23,160
perspective<font color="#E5E5E5"> it's a great way to evade</font>

59
00:02:20,430 --> 00:02:25,890
rigid detections<font color="#CCCCCC"> and it's</font><font color="#E5E5E5"> typically</font>

60
00:02:23,160 --> 00:02:27,570
pretty effective<font color="#CCCCCC"> and if you look around</font>

61
00:02:25,890 --> 00:02:29,149
<font color="#CCCCCC">you</font><font color="#E5E5E5"> can</font><font color="#CCCCCC"> find an obfuscation framework</font>

62
00:02:27,570 --> 00:02:31,170
for almost<font color="#E5E5E5"> any language</font><font color="#CCCCCC"> you can think of</font>

63
00:02:29,150 --> 00:02:32,790
and I don't really<font color="#CCCCCC"> even though I may be</font>

64
00:02:31,170 --> 00:02:34,410
<font color="#E5E5E5">biased</font><font color="#CCCCCC"> I don't</font><font color="#E5E5E5"> really see the slowing</font>

65
00:02:32,790 --> 00:02:37,858
down<font color="#E5E5E5"> anytime soon</font><font color="#CCCCCC"> because it's just so</font>

66
00:02:34,410 --> 00:02:39,510
easy<font color="#E5E5E5"> it's free</font><font color="#CCCCCC"> its effective from</font><font color="#E5E5E5"> the</font>

67
00:02:37,859 --> 00:02:40,290
blue team's perspective<font color="#CCCCCC"> we've actually</font>

68
00:02:39,510 --> 00:02:41,909
made some<font color="#E5E5E5"> good</font>

69
00:02:40,290 --> 00:02:44,609
over the past several years in<font color="#CCCCCC"> terms</font><font color="#E5E5E5"> of</font>

70
00:02:41,909 --> 00:02:47,340
visibility<font color="#CCCCCC"> things</font><font color="#E5E5E5"> like the anti-malware</font>

71
00:02:44,610 --> 00:02:48,569
scan interface um ET w which is event

72
00:02:47,340 --> 00:02:51,989
tracing<font color="#E5E5E5"> for</font><font color="#CCCCCC"> Windows it's been around</font>

73
00:02:48,569 --> 00:02:53,399
since Windows but more recently a lot<font color="#E5E5E5"> of</font>

74
00:02:51,989 --> 00:02:55,470
defenders have been using it to<font color="#E5E5E5"> get</font>

75
00:02:53,400 --> 00:02:58,290
better visibility without having to

76
00:02:55,470 --> 00:03:00,299
write kernel level level<font color="#CCCCCC"> drivers there's</font>

77
00:02:58,290 --> 00:03:01,769
also a signature<font color="#E5E5E5"> list detection like</font>

78
00:03:00,299 --> 00:03:03,420
some of the data<font color="#E5E5E5"> science techniques that</font>

79
00:03:01,769 --> 00:03:04,610
Lee<font color="#CCCCCC"> and I put into Revo confiscation</font>

80
00:03:03,420 --> 00:03:06,899
which is what this<font color="#E5E5E5"> little</font><font color="#CCCCCC"> gift is here</font>

81
00:03:04,610 --> 00:03:09,090
<font color="#E5E5E5">but there's always room</font><font color="#CCCCCC"> for improvement</font>

82
00:03:06,900 --> 00:03:10,799
<font color="#CCCCCC">because no matter what additional</font><font color="#E5E5E5"> gains</font>

83
00:03:09,090 --> 00:03:13,319
<font color="#CCCCCC">bees defenders get attackers are</font>

84
00:03:10,799 --> 00:03:15,329
responding<font color="#E5E5E5"> one of several ways one they</font>

85
00:03:13,319 --> 00:03:17,250
could just choose softer targets just

86
00:03:15,329 --> 00:03:19,049
<font color="#E5E5E5">low-hanging fruit get the targets I</font>

87
00:03:17,250 --> 00:03:21,090
don't have all this visibility<font color="#E5E5E5"> or they</font>

88
00:03:19,049 --> 00:03:23,790
can<font color="#CCCCCC"> just go straight and disable that</font>

89
00:03:21,090 --> 00:03:26,069
<font color="#E5E5E5">disability that visibility I'm disabled</font>

90
00:03:23,790 --> 00:03:28,048
<font color="#CCCCCC">I am</font><font color="#E5E5E5"> zgw all the all manner of anti</font>

91
00:03:26,069 --> 00:03:30,268
forensics<font color="#E5E5E5"> or they can write their</font>

92
00:03:28,049 --> 00:03:32,190
<font color="#E5E5E5">tradecraft</font><font color="#CCCCCC"> or port existing</font><font color="#E5E5E5"> tradecraft</font>

93
00:03:30,269 --> 00:03:34,500
<font color="#CCCCCC">in</font><font color="#E5E5E5"> two languages</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> don't provide this</font>

94
00:03:32,190 --> 00:03:35,970
excellent visibility<font color="#CCCCCC"> so a lot of</font><font color="#E5E5E5"> the</font>

95
00:03:34,500 --> 00:03:37,409
tools<font color="#CCCCCC"> that people were using written</font><font color="#E5E5E5"> in</font>

96
00:03:35,970 --> 00:03:39,450
PowerShell they can start to port<font color="#CCCCCC"> that</font>

97
00:03:37,409 --> 00:03:41,159
to c-sharp<font color="#E5E5E5"> and</font><font color="#CCCCCC"> start to lose all the</font>

98
00:03:39,450 --> 00:03:44,760
great<font color="#CCCCCC"> visibility that</font><font color="#E5E5E5"> PowerShell gave us</font>

99
00:03:41,159 --> 00:03:45,780
as defenders and still does give us so

100
00:03:44,760 --> 00:03:48,000
this talk has nothing to do<font color="#E5E5E5"> with</font>

101
00:03:45,780 --> 00:03:50,459
PowerShell<font color="#E5E5E5"> it's all about command X the</font>

102
00:03:48,000 --> 00:03:51,629
<font color="#E5E5E5">office keishon and traditionally when I</font>

103
00:03:50,459 --> 00:03:54,000
<font color="#E5E5E5">talk</font><font color="#CCCCCC"> to a lot</font><font color="#E5E5E5"> of defenders about</font>

104
00:03:51,629 --> 00:03:56,010
detecting suspicious command<font color="#CCCCCC"> exiting</font>

105
00:03:54,000 --> 00:03:57,989
well command<font color="#CCCCCC"> I</font><font color="#E5E5E5"> actually is super common</font>

106
00:03:56,010 --> 00:03:59,879
<font color="#E5E5E5">it's it's in everything everything calls</font>

107
00:03:57,989 --> 00:04:01,470
<font color="#CCCCCC">it</font><font color="#E5E5E5"> it's running all the time and most</font>

108
00:03:59,879 --> 00:04:03,599
<font color="#E5E5E5">offenders will write rules based off of</font>

109
00:04:01,470 --> 00:04:06,510
command<font color="#CCCCCC"> XE being a</font><font color="#E5E5E5"> process and its</font>

110
00:04:03,599 --> 00:04:08,099
arguments contains<font color="#E5E5E5"> a B or C something</font>

111
00:04:06,510 --> 00:04:09,720
like that<font color="#E5E5E5"> but you can also look at it</font>

112
00:04:08,099 --> 00:04:12,480
<font color="#CCCCCC">from a parent-child process relationship</font>

113
00:04:09,720 --> 00:04:14,579
<font color="#E5E5E5">so</font><font color="#CCCCCC"> Explorer spawning command XE is far</font>

114
00:04:12,480 --> 00:04:16,680
less interesting<font color="#E5E5E5"> than windward spawning</font>

115
00:04:14,579 --> 00:04:17,970
<font color="#CCCCCC">command XE</font><font color="#E5E5E5"> but it doesn't</font><font color="#CCCCCC"> necessarily</font>

116
00:04:16,680 --> 00:04:20,430
mean<font color="#E5E5E5"> it's malicious just because when</font>

117
00:04:17,970 --> 00:04:22,229
word spawns<font color="#E5E5E5"> command XE you can also look</font>

118
00:04:20,430 --> 00:04:25,020
at<font color="#E5E5E5"> it as</font><font color="#CCCCCC"> a source of action so command</font>

119
00:04:22,229 --> 00:04:26,729
modifying a registry key or writing a

120
00:04:25,020 --> 00:04:28,380
file or deleting a file<font color="#E5E5E5"> being an</font>

121
00:04:26,729 --> 00:04:29,669
alternate data stream those are some of

122
00:04:28,380 --> 00:04:31,050
<font color="#E5E5E5">the additional</font><font color="#CCCCCC"> things you</font><font color="#E5E5E5"> can kind</font><font color="#CCCCCC"> of</font>

123
00:04:29,669 --> 00:04:34,710
look<font color="#E5E5E5"> at for how do you detect malicious</font>

124
00:04:31,050 --> 00:04:36,330
use of command XE so how did I get

125
00:04:34,710 --> 00:04:39,659
<font color="#CCCCCC">started on this path of</font><font color="#E5E5E5"> this particular</font>

126
00:04:36,330 --> 00:04:40,830
<font color="#E5E5E5">office</font><font color="#CCCCCC"> keishon genre well last year</font><font color="#E5E5E5"> the</font>

127
00:04:39,659 --> 00:04:43,620
<font color="#CCCCCC">very end of June</font>

128
00:04:40,830 --> 00:04:45,570
my manager Nick<font color="#E5E5E5"> Carr now we released</font>

129
00:04:43,620 --> 00:04:48,599
this blog post outlining three different

130
00:04:45,570 --> 00:04:50,580
groups<font color="#CCCCCC"> fin</font><font color="#E5E5E5"> a apt 32 and fin</font><font color="#CCCCCC"> 7 and some</font>

131
00:04:48,599 --> 00:04:52,800
<font color="#E5E5E5">really</font><font color="#CCCCCC"> interesting unique</font><font color="#E5E5E5"> obfuscation</font>

132
00:04:50,580 --> 00:04:53,919
<font color="#E5E5E5">that they were using in the wild during</font>

133
00:04:52,800 --> 00:04:56,560
<font color="#E5E5E5">our investing</font>

134
00:04:53,920 --> 00:04:59,050
so the first one<font color="#CCCCCC"> Finn ate oh and this</font><font color="#E5E5E5"> is</font>

135
00:04:56,560 --> 00:05:00,730
<font color="#E5E5E5">we here's the blog post right</font><font color="#CCCCCC"> there so</font>

136
00:04:59,050 --> 00:05:03,490
the<font color="#E5E5E5"> first one is Finn ate a financial</font>

137
00:05:00,730 --> 00:05:05,770
threat group<font color="#E5E5E5"> in this this was</font><font color="#CCCCCC"> actually D</font>

138
00:05:03,490 --> 00:05:07,240
obfuscated<font color="#CCCCCC"> from a macro and one of their</font>

139
00:05:05,770 --> 00:05:09,070
payloads<font color="#E5E5E5"> and they're</font><font color="#CCCCCC"> actually setting</font>

140
00:05:07,240 --> 00:05:10,270
<font color="#E5E5E5">the very bottom part is a PowerShell</font>

141
00:05:09,070 --> 00:05:12,820
command which we're setting from

142
00:05:10,270 --> 00:05:15,099
windward in one environment<font color="#E5E5E5"> variable um</font>

143
00:05:12,820 --> 00:05:16,450
called Microsoft<font color="#E5E5E5"> Update</font><font color="#CCCCCC"> Catalog</font><font color="#E5E5E5"> the</font>

144
00:05:15,100 --> 00:05:18,310
second environment variable is the

145
00:05:16,450 --> 00:05:20,050
middle one<font color="#CCCCCC"> powershell dap which when you</font>

146
00:05:18,310 --> 00:05:21,940
pipe something<font color="#E5E5E5"> in to powershell -</font>

147
00:05:20,050 --> 00:05:24,160
<font color="#E5E5E5">powershell will run what you piped in a</font>

148
00:05:21,940 --> 00:05:25,870
standard input so then all you see from

149
00:05:24,160 --> 00:05:26,350
windward is a single<font color="#E5E5E5"> child process of</font>

150
00:05:25,870 --> 00:05:30,010
command

151
00:05:26,350 --> 00:05:31,900
<font color="#E5E5E5">/c echo VAR</font><font color="#CCCCCC"> one pipe VAR</font><font color="#E5E5E5"> - so you have</font>

152
00:05:30,010 --> 00:05:32,920
no<font color="#CCCCCC"> idea</font><font color="#E5E5E5"> of what's actually happening</font><font color="#CCCCCC"> if</font>

153
00:05:31,900 --> 00:05:34,299
you<font color="#E5E5E5"> just look at the command line</font>

154
00:05:32,920 --> 00:05:36,460
<font color="#E5E5E5">arguments it was a really clever way</font><font color="#CCCCCC"> of</font>

155
00:05:34,300 --> 00:05:38,740
<font color="#E5E5E5">using environment process level</font>

156
00:05:36,460 --> 00:05:40,870
<font color="#CCCCCC">environment variables as well standard</font>

157
00:05:38,740 --> 00:05:42,910
input<font color="#E5E5E5"> the second case</font><font color="#CCCCCC"> studies</font><font color="#E5E5E5"> from</font><font color="#CCCCCC"> apt</font>

158
00:05:40,870 --> 00:05:45,370
<font color="#E5E5E5">32 also known as ocean Lotus</font><font color="#CCCCCC"> from</font>

159
00:05:42,910 --> 00:05:47,290
<font color="#CCCCCC">Vietnam and</font><font color="#E5E5E5"> it's been pretty common to</font>

160
00:05:45,370 --> 00:05:49,180
<font color="#E5E5E5">see attackers use carrots which is the</font>

161
00:05:47,290 --> 00:05:52,180
escape<font color="#CCCCCC"> character for command XE to break</font>

162
00:05:49,180 --> 00:05:54,100
up arguments but for the<font color="#CCCCCC"> past year or so</font>

163
00:05:52,180 --> 00:05:55,570
<font color="#CCCCCC">I've I've tweeted a couple times and</font>

164
00:05:54,100 --> 00:05:57,220
wondered why don't more attackers<font color="#CCCCCC"> use</font>

165
00:05:55,570 --> 00:05:58,240
the double quote<font color="#E5E5E5"> because it's far</font><font color="#CCCCCC"> more</font>

166
00:05:57,220 --> 00:06:00,340
effective<font color="#E5E5E5"> than the care and most</font>

167
00:05:58,240 --> 00:06:02,260
defenders aren't looking<font color="#CCCCCC"> for it well</font><font color="#E5E5E5"> apt</font>

168
00:06:00,340 --> 00:06:03,760
<font color="#E5E5E5">32 apparently he did somebody's advice</font>

169
00:06:02,260 --> 00:06:06,730
and started using double<font color="#CCCCCC"> quotes in this</font>

170
00:06:03,760 --> 00:06:08,890
case it was to<font color="#E5E5E5"> break up defenders</font>

171
00:06:06,730 --> 00:06:10,540
arguments for the register<font color="#CCCCCC"> of 32</font>

172
00:06:08,890 --> 00:06:12,310
squiggly-doo discovered by<font color="#E5E5E5"> Casey Smith</font>

173
00:06:10,540 --> 00:06:15,580
and they realized a lot of<font color="#E5E5E5"> defenders</font>

174
00:06:12,310 --> 00:06:16,990
we're looking for /i : HTTP and<font color="#E5E5E5"> so they</font>

175
00:06:15,580 --> 00:06:20,140
broke<font color="#E5E5E5"> it</font><font color="#CCCCCC"> up first with carrots and then</font>

176
00:06:16,990 --> 00:06:22,060
with double quotes<font color="#CCCCCC"> pretty cool the last</font>

177
00:06:20,140 --> 00:06:26,349
<font color="#E5E5E5">one this is</font><font color="#CCCCCC"> from a financial group named</font>

178
00:06:22,060 --> 00:06:28,780
<font color="#E5E5E5">fin 7 also known as carbon</font><font color="#CCCCCC"> AK they fin</font><font color="#E5E5E5"> 7</font>

179
00:06:26,350 --> 00:06:30,430
<font color="#CCCCCC">an apt 30 to vie for</font><font color="#E5E5E5"> first place in my</font>

180
00:06:28,780 --> 00:06:32,650
heart of<font color="#E5E5E5"> the most creative obfuscation</font>

181
00:06:30,430 --> 00:06:33,550
<font color="#CCCCCC">they're</font><font color="#E5E5E5"> really good and they office</font><font color="#CCCCCC"> gate</font>

182
00:06:32,650 --> 00:06:35,020
very tastefully

183
00:06:33,550 --> 00:06:36,370
they don't just obfuscate everything

184
00:06:35,020 --> 00:06:37,630
they do certain<font color="#E5E5E5"> pieces and you can</font>

185
00:06:36,370 --> 00:06:39,580
<font color="#E5E5E5">really get inside their head and see</font>

186
00:06:37,630 --> 00:06:41,980
what they're<font color="#E5E5E5"> trying to evade</font><font color="#CCCCCC"> or with</font>

187
00:06:39,580 --> 00:06:44,200
each layer of<font color="#E5E5E5"> obfuscation this is</font>

188
00:06:41,980 --> 00:06:45,820
extracted from<font color="#E5E5E5"> a</font><font color="#CCCCCC"> linked file I</font><font color="#E5E5E5"> mean as</font>

189
00:06:44,200 --> 00:06:47,710
you<font color="#CCCCCC"> can</font><font color="#E5E5E5"> see with word</font><font color="#CCCCCC"> application they</font>

190
00:06:45,820 --> 00:06:49,540
have<font color="#E5E5E5"> some concatenation in there instead</font>

191
00:06:47,710 --> 00:06:53,200
<font color="#E5E5E5">of</font><font color="#CCCCCC"> the string eval they do an</font><font color="#E5E5E5"> ASCII</font>

192
00:06:49,540 --> 00:06:54,790
conversion and then add<font color="#CCCCCC"> v</font><font color="#E5E5E5"> al but the two</font>

193
00:06:53,200 --> 00:06:58,030
red<font color="#CCCCCC"> boxes is what I really</font><font color="#E5E5E5"> want to focus</font>

194
00:06:54,790 --> 00:07:00,460
on because when I saw<font color="#E5E5E5"> this sample my</font>

195
00:06:58,030 --> 00:07:01,809
manager found<font color="#CCCCCC"> this on Wednesday</font><font color="#E5E5E5"> and it</font>

196
00:07:00,460 --> 00:07:04,120
really perplexed<font color="#E5E5E5"> me and I thought about</font>

197
00:07:01,810 --> 00:07:06,220
<font color="#E5E5E5">it all that day because if you'll notice</font>

198
00:07:04,120 --> 00:07:08,020
there's<font color="#CCCCCC"> these at science right</font>

199
00:07:06,220 --> 00:07:10,300
let's break this down you have command

200
00:07:08,020 --> 00:07:12,120
<font color="#E5E5E5">it's setting</font><font color="#CCCCCC"> w</font><font color="#E5E5E5"> script jscript blah blah</font>

201
00:07:10,300 --> 00:07:14,560
<font color="#E5E5E5">blah into an environment</font><font color="#CCCCCC"> variable X and</font>

202
00:07:12,120 --> 00:07:16,450
then in the middle it's<font color="#E5E5E5"> writing out this</font>

203
00:07:14,560 --> 00:07:18,310
this javascript file let's ignore that

204
00:07:16,450 --> 00:07:19,510
<font color="#CCCCCC">for the time being but then it echos</font><font color="#E5E5E5"> X</font>

205
00:07:18,310 --> 00:07:21,190
in the command so it's<font color="#CCCCCC"> gonna</font><font color="#E5E5E5"> run a</font>

206
00:07:19,510 --> 00:07:23,409
separate command process that will run

207
00:07:21,190 --> 00:07:25,360
<font color="#E5E5E5">the contents of X but what bothered me</font>

208
00:07:23,410 --> 00:07:28,060
<font color="#CCCCCC">was these garbage delimiters these @</font>

209
00:07:25,360 --> 00:07:30,730
signs<font color="#E5E5E5"> because if you run</font><font color="#CCCCCC"> W script lasat</font>

210
00:07:28,060 --> 00:07:32,650
signs in there it fails<font color="#E5E5E5"> like the axon is</font>

211
00:07:30,730 --> 00:07:35,740
not some forgotten obfuscation character

212
00:07:32,650 --> 00:07:37,060
that<font color="#CCCCCC"> w script knows it fails</font><font color="#E5E5E5"> but what I</font>

213
00:07:35,740 --> 00:07:40,660
<font color="#E5E5E5">notice is</font><font color="#CCCCCC"> that if you look at the X</font>

214
00:07:37,060 --> 00:07:42,310
variable at<font color="#E5E5E5"> the very end they thin thin</font>

215
00:07:40,660 --> 00:07:44,470
<font color="#CCCCCC">7 did something</font><font color="#E5E5E5"> really cool they</font>

216
00:07:42,310 --> 00:07:46,950
<font color="#CCCCCC">actually made space after that</font><font color="#E5E5E5"> variable</font>

217
00:07:44,470 --> 00:07:49,210
and then inserted<font color="#E5E5E5"> this syntax right here</font>

218
00:07:46,950 --> 00:07:50,620
now what<font color="#E5E5E5"> this does so you put a colon</font>

219
00:07:49,210 --> 00:07:53,260
after<font color="#E5E5E5"> an environment variable</font><font color="#CCCCCC"> name in</font>

220
00:07:50,620 --> 00:07:55,420
command<font color="#CCCCCC"> X E</font><font color="#E5E5E5"> and remember this is like</font>

221
00:07:53,260 --> 00:07:58,030
command<font color="#CCCCCC"> X E not like just</font><font color="#E5E5E5"> went in like</font>

222
00:07:55,420 --> 00:08:00,160
for all time command X<font color="#CCCCCC"> e if you put a</font>

223
00:07:58,030 --> 00:08:01,900
colon<font color="#CCCCCC"> after the variable</font><font color="#E5E5E5"> name and then</font>

224
00:08:00,160 --> 00:08:03,970
you put a string it will<font color="#E5E5E5"> say I want</font><font color="#CCCCCC"> to</font>

225
00:08:01,900 --> 00:08:05,950
<font color="#E5E5E5">find every</font><font color="#CCCCCC"> case-sensitive</font><font color="#E5E5E5"> instance of</font>

226
00:08:03,970 --> 00:08:07,540
this string and replace it<font color="#CCCCCC"> with whatever</font>

227
00:08:05,950 --> 00:08:09,880
you have<font color="#CCCCCC"> on</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> right side of the equal</font>

228
00:08:07,540 --> 00:08:11,470
sign<font color="#CCCCCC"> so as you</font><font color="#E5E5E5"> can</font><font color="#CCCCCC"> see here the whole</font>

229
00:08:09,880 --> 00:08:13,030
string is just<font color="#E5E5E5"> a single character</font><font color="#CCCCCC"> act</font>

230
00:08:11,470 --> 00:08:14,650
and there's nothing<font color="#E5E5E5"> on the right of the</font>

231
00:08:13,030 --> 00:08:16,690
equal sign so<font color="#E5E5E5"> it's literally in memory</font>

232
00:08:14,650 --> 00:08:19,179
removing the<font color="#CCCCCC"> ax</font><font color="#E5E5E5"> replacing it with</font>

233
00:08:16,690 --> 00:08:22,270
nothing<font color="#E5E5E5"> now when I saw that I was</font><font color="#CCCCCC"> like</font>

234
00:08:19,180 --> 00:08:24,550
<font color="#CCCCCC">that is tasteful man what finesse how</font>

235
00:08:22,270 --> 00:08:26,549
cool is that<font color="#E5E5E5"> did you know that command</font>

236
00:08:24,550 --> 00:08:28,990
<font color="#E5E5E5">could do that</font><font color="#CCCCCC"> never seen</font><font color="#E5E5E5"> that before</font><font color="#CCCCCC"> so</font>

237
00:08:26,550 --> 00:08:31,270
<font color="#CCCCCC">anyways we found this sample on a</font>

238
00:08:28,990 --> 00:08:32,680
Wednesday<font color="#CCCCCC"> I figured out what</font><font color="#E5E5E5"> that</font>

239
00:08:31,270 --> 00:08:34,270
technique was and so we read this blog

240
00:08:32,679 --> 00:08:36,218
<font color="#E5E5E5">post on a Thursday published it on a</font>

241
00:08:34,270 --> 00:08:37,240
Friday and that weekend I went<font color="#E5E5E5"> home and</font>

242
00:08:36,219 --> 00:08:40,150
<font color="#CCCCCC">started</font><font color="#E5E5E5"> playing around and wrote this</font>

243
00:08:37,240 --> 00:08:43,630
little POC called out<font color="#E5E5E5"> fin coded command</font>

244
00:08:40,150 --> 00:08:45,670
<font color="#E5E5E5">and as soon as</font><font color="#CCCCCC"> I published it I kind of</font>

245
00:08:43,630 --> 00:08:48,130
<font color="#E5E5E5">sat back and</font><font color="#CCCCCC"> thought I wonder if there's</font>

246
00:08:45,670 --> 00:08:50,229
<font color="#CCCCCC">more here fin</font><font color="#E5E5E5"> 7 obviously knew about</font>

247
00:08:48,130 --> 00:08:51,730
<font color="#E5E5E5">this trick I didn't know about what</font>

248
00:08:50,230 --> 00:08:53,620
<font color="#E5E5E5">other weird things can command on</font>

249
00:08:51,730 --> 00:08:56,530
<font color="#E5E5E5">actually support maybe this is worth</font>

250
00:08:53,620 --> 00:08:58,839
<font color="#E5E5E5">more time and after after about a week</font>

251
00:08:56,530 --> 00:09:00,730
of digging in I realized<font color="#CCCCCC"> that this was</font>

252
00:08:58,839 --> 00:09:02,580
<font color="#E5E5E5">about to consume the next</font><font color="#CCCCCC"> 9 months</font><font color="#E5E5E5"> of</font><font color="#CCCCCC"> my</font>

253
00:09:00,730 --> 00:09:06,010
life<font color="#E5E5E5"> and that's</font><font color="#CCCCCC"> exactly what happened</font>

254
00:09:02,580 --> 00:09:08,110
so implications of this research<font color="#CCCCCC"> these</font>

255
00:09:06,010 --> 00:09:10,180
often techniques will for sure

256
00:09:08,110 --> 00:09:11,560
<font color="#CCCCCC">affect static detection if you're</font>

257
00:09:10,180 --> 00:09:15,550
<font color="#CCCCCC">running</font><font color="#E5E5E5"> detections looking for command</font>

258
00:09:11,560 --> 00:09:18,369
<font color="#CCCCCC">XE and arguments in like</font><font color="#E5E5E5"> run keys or 70</font>

259
00:09:15,550 --> 00:09:20,170
45<font color="#CCCCCC"> GID</font><font color="#E5E5E5"> for security or for a service</font>

260
00:09:18,370 --> 00:09:21,970
<font color="#CCCCCC">creation it will definitely affect those</font>

261
00:09:20,170 --> 00:09:23,560
things if you're looking doing<font color="#E5E5E5"> yard</font>

262
00:09:21,970 --> 00:09:25,600
rules for batch files and stuff<font color="#CCCCCC"> like</font>

263
00:09:23,560 --> 00:09:28,660
that it will<font color="#E5E5E5"> affect those things for</font>

264
00:09:25,600 --> 00:09:29,980
dynamic detection<font color="#E5E5E5"> it will certain these</font>

265
00:09:28,660 --> 00:09:31,540
techniques will definitely affect

266
00:09:29,980 --> 00:09:33,550
dynamic detection so if you're a

267
00:09:31,540 --> 00:09:35,560
defender<font color="#CCCCCC"> I don't want you to write off</font>

268
00:09:33,550 --> 00:09:37,060
that<font color="#E5E5E5"> that oh well that those</font><font color="#CCCCCC"> @ signs</font>

269
00:09:35,560 --> 00:09:38,920
<font color="#E5E5E5">were removed from W script finally ran</font>

270
00:09:37,060 --> 00:09:40,239
that's true in<font color="#E5E5E5"> that</font><font color="#CCCCCC"> case but there are</font>

271
00:09:38,920 --> 00:09:42,130
ways that<font color="#E5E5E5"> we can</font><font color="#CCCCCC"> keep characters in</font>

272
00:09:40,240 --> 00:09:45,040
there so I'll try<font color="#CCCCCC"> to point</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> out as</font>

273
00:09:42,130 --> 00:09:48,220
we go and basically<font color="#E5E5E5"> we'll be</font><font color="#CCCCCC"> able to</font>

274
00:09:45,040 --> 00:09:49,750
take the techniques we'll talk about<font color="#E5E5E5"> and</font>

275
00:09:48,220 --> 00:09:51,610
with a tool that<font color="#E5E5E5"> I released you can take</font>

276
00:09:49,750 --> 00:09:54,760
any<font color="#CCCCCC"> arbitrary command for command that</font>

277
00:09:51,610 --> 00:09:57,579
XE<font color="#E5E5E5"> like just this echo command and you</font>

278
00:09:54,760 --> 00:09:58,839
start<font color="#CCCCCC"> ad layer upon layer upon layer</font><font color="#E5E5E5"> to</font>

279
00:09:57,579 --> 00:10:01,388
<font color="#E5E5E5">get something that looks like that and</font>

280
00:09:58,839 --> 00:10:03,040
<font color="#E5E5E5">it still works so hang on tight we're</font>

281
00:10:01,389 --> 00:10:04,300
gonna move really fast<font color="#CCCCCC"> we're going to</font>

282
00:10:03,040 --> 00:10:06,160
<font color="#E5E5E5">cover</font><font color="#CCCCCC"> all these techniques</font><font color="#E5E5E5"> and then</font>

283
00:10:04,300 --> 00:10:08,290
we're<font color="#E5E5E5"> gonna stack them all together to</font>

284
00:10:06,160 --> 00:10:11,199
build full<font color="#E5E5E5"> payload in</font><font color="#CCCCCC"> codings</font><font color="#E5E5E5"> and</font>

285
00:10:08,290 --> 00:10:13,240
hopefully as a<font color="#E5E5E5"> defender</font><font color="#CCCCCC"> you won't be</font>

286
00:10:11,199 --> 00:10:14,769
super discouraged<font color="#E5E5E5"> but somewhat</font>

287
00:10:13,240 --> 00:10:16,420
challenged and how you go<font color="#E5E5E5"> about</font>

288
00:10:14,769 --> 00:10:17,980
detecting this<font color="#E5E5E5"> sort of thing and as a</font>

289
00:10:16,420 --> 00:10:18,990
red teamer<font color="#E5E5E5"> hopefully you'll find some</font><font color="#CCCCCC"> of</font>

290
00:10:17,980 --> 00:10:23,380
this interesting<font color="#E5E5E5"> as well</font>

291
00:10:18,990 --> 00:10:24,880
so<font color="#E5E5E5"> who's binary is it anyway</font><font color="#CCCCCC"> a lot of</font>

292
00:10:23,380 --> 00:10:27,610
defenders will write rules<font color="#E5E5E5"> like</font><font color="#CCCCCC"> if the</font>

293
00:10:24,880 --> 00:10:30,070
process name is command<font color="#CCCCCC"> XE and the</font>

294
00:10:27,610 --> 00:10:31,540
arguments are a<font color="#E5E5E5"> B and C well the problem</font>

295
00:10:30,070 --> 00:10:33,940
with<font color="#CCCCCC"> that is that it's</font><font color="#E5E5E5"> really easy</font><font color="#CCCCCC"> for</font>

296
00:10:31,540 --> 00:10:35,410
attackers just to rename binaries<font color="#CCCCCC"> so you</font>

297
00:10:33,940 --> 00:10:36,730
can rename a binary<font color="#E5E5E5"> to something else</font>

298
00:10:35,410 --> 00:10:38,140
and<font color="#CCCCCC"> all</font><font color="#E5E5E5"> of a sudden</font><font color="#CCCCCC"> the defenders rule</font>

299
00:10:36,730 --> 00:10:41,140
doesn't<font color="#E5E5E5"> work</font><font color="#CCCCCC"> unless they're looking at</font>

300
00:10:38,140 --> 00:10:42,579
internal<font color="#E5E5E5"> version</font><font color="#CCCCCC"> information so I'm not</font>

301
00:10:41,140 --> 00:10:45,069
<font color="#E5E5E5">talking</font><font color="#CCCCCC"> about</font><font color="#E5E5E5"> that I'm</font><font color="#CCCCCC"> not</font><font color="#E5E5E5"> talking</font><font color="#CCCCCC"> about</font>

302
00:10:42,579 --> 00:10:45,969
when attackers rename command<font color="#CCCCCC"> XE</font><font color="#E5E5E5"> another</font>

303
00:10:45,070 --> 00:10:48,670
thing there's a lot<font color="#CCCCCC"> of</font><font color="#E5E5E5"> kind of like</font>

304
00:10:45,970 --> 00:10:50,890
<font color="#E5E5E5">command</font><font color="#CCCCCC"> XE substitutes like</font><font color="#E5E5E5"> for files or</font>

305
00:10:48,670 --> 00:10:52,479
<font color="#E5E5E5">PC a</font><font color="#CCCCCC"> lua</font><font color="#E5E5E5"> or script</font><font color="#CCCCCC"> Runner</font><font color="#E5E5E5"> so basically</font>

306
00:10:50,890 --> 00:10:54,250
if<font color="#E5E5E5"> you have detection</font><font color="#CCCCCC"> that's looking for</font>

307
00:10:52,480 --> 00:10:55,510
like<font color="#CCCCCC"> windward spawning</font><font color="#E5E5E5"> command the</font>

308
00:10:54,250 --> 00:10:57,160
attacker could just use when we're

309
00:10:55,510 --> 00:10:58,870
spawning<font color="#E5E5E5"> for files to then launch their</font>

310
00:10:57,160 --> 00:11:00,640
other thing so when commands<font color="#E5E5E5"> just use</font>

311
00:10:58,870 --> 00:11:02,560
commas like a shim<font color="#E5E5E5"> in between to break</font>

312
00:11:00,640 --> 00:11:03,610
<font color="#E5E5E5">up a parent-child process</font><font color="#CCCCCC"> there's a lot</font>

313
00:11:02,560 --> 00:11:06,420
of other things and<font color="#E5E5E5"> here's a good</font>

314
00:11:03,610 --> 00:11:08,380
resource for some of those additional

315
00:11:06,420 --> 00:11:11,319
binaries but that's<font color="#E5E5E5"> also not what I'm</font>

316
00:11:08,380 --> 00:11:13,959
talking<font color="#CCCCCC"> about</font><font color="#E5E5E5"> I'm talking</font><font color="#CCCCCC"> about</font><font color="#E5E5E5"> purely</font>

317
00:11:11,319 --> 00:11:16,360
syntactical obfuscation<font color="#CCCCCC"> of the</font>

318
00:11:13,959 --> 00:11:19,739
legitimate binary name and the<font color="#CCCCCC"> examples</font>

319
00:11:16,360 --> 00:11:23,260
<font color="#CCCCCC">we'll look at are the string CMD and</font>

320
00:11:19,740 --> 00:11:25,149
<font color="#E5E5E5">PowerShell</font><font color="#CCCCCC"> what we can do that</font><font color="#E5E5E5"> is with</font>

321
00:11:23,260 --> 00:11:26,980
environment variable encoding<font color="#E5E5E5"> if you</font>

322
00:11:25,149 --> 00:11:28,569
have known environment variables you<font color="#E5E5E5"> can</font>

323
00:11:26,980 --> 00:11:31,720
use this<font color="#E5E5E5"> syntax to basically get sub</font>

324
00:11:28,569 --> 00:11:33,339
<font color="#E5E5E5">strings out of that syntax so if we echo</font>

325
00:11:31,720 --> 00:11:34,630
<font color="#E5E5E5">program data we get this and</font>

326
00:11:33,340 --> 00:11:36,730
something that<font color="#CCCCCC"> see</font><font color="#E5E5E5"> is the path</font><font color="#CCCCCC"> that you</font>

327
00:11:34,630 --> 00:11:39,850
have<font color="#E5E5E5"> then if we echo these two</font><font color="#CCCCCC"> sub</font>

328
00:11:36,730 --> 00:11:41,830
<font color="#CCCCCC">strings of program data we get CMD the</font>

329
00:11:39,850 --> 00:11:45,880
bottom example is doing<font color="#CCCCCC"> the same with</font>

330
00:11:41,830 --> 00:11:46,990
<font color="#E5E5E5">PowerShell now the thing</font><font color="#CCCCCC"> about these</font>

331
00:11:45,880 --> 00:11:48,850
samples though is<font color="#CCCCCC"> that when you actually</font>

332
00:11:46,990 --> 00:11:49,810
<font color="#E5E5E5">paste this into the command prompt when</font>

333
00:11:48,850 --> 00:11:52,990
you actually<font color="#E5E5E5"> look</font><font color="#CCCCCC"> at your</font><font color="#E5E5E5"> process</font>

334
00:11:49,810 --> 00:11:55,150
execution<font color="#E5E5E5"> events that the option is gone</font>

335
00:11:52,990 --> 00:11:57,400
it only shows<font color="#CCCCCC"> the pure</font><font color="#E5E5E5"> value of that</font>

336
00:11:55,150 --> 00:11:59,680
character<font color="#CCCCCC"> and the reason</font><font color="#E5E5E5"> this is because</font>

337
00:11:57,400 --> 00:12:01,660
when you use known<font color="#E5E5E5"> environment variables</font>

338
00:11:59,680 --> 00:12:03,760
not new ones but existing<font color="#E5E5E5"> ones they all</font>

339
00:12:01,660 --> 00:12:06,430
resolve<font color="#E5E5E5"> when you run it on</font><font color="#CCCCCC"> the command</font>

340
00:12:03,760 --> 00:12:08,950
line<font color="#E5E5E5"> so that</font><font color="#CCCCCC"> really</font><font color="#E5E5E5"> got</font><font color="#CCCCCC"> me thinking can</font>

341
00:12:06,430 --> 00:12:10,599
I find a way to obfuscate<font color="#CCCCCC"> the very names</font>

342
00:12:08,950 --> 00:12:13,270
<font color="#E5E5E5">that does not resolve on the command</font>

343
00:12:10,600 --> 00:12:15,880
line<font color="#E5E5E5"> so what I ended</font><font color="#CCCCCC"> up coming</font><font color="#E5E5E5"> down to</font>

344
00:12:13,270 --> 00:12:18,040
was three interesting<font color="#E5E5E5"> internal commands</font>

345
00:12:15,880 --> 00:12:20,170
<font color="#E5E5E5">these don't spawn extra processes these</font>

346
00:12:18,040 --> 00:12:21,819
are internal<font color="#E5E5E5"> the command set a sews and</font>

347
00:12:20,170 --> 00:12:23,319
<font color="#E5E5E5">F type set will show you all the</font>

348
00:12:21,820 --> 00:12:25,000
environment variables<font color="#CCCCCC"> and their values a</font>

349
00:12:23,320 --> 00:12:26,620
<font color="#CCCCCC">sews will show you the association</font>

350
00:12:25,000 --> 00:12:28,750
between<font color="#E5E5E5"> a file extension</font><font color="#CCCCCC"> and an</font>

351
00:12:26,620 --> 00:12:30,550
<font color="#E5E5E5">associated type and then F type will</font>

352
00:12:28,750 --> 00:12:32,170
take that<font color="#E5E5E5"> associated type and map it to</font>

353
00:12:30,550 --> 00:12:34,510
the binary<font color="#CCCCCC"> and</font><font color="#E5E5E5"> arguments that needs to</font>

354
00:12:32,170 --> 00:12:35,979
run so<font color="#CCCCCC"> associate F type are very</font><font color="#E5E5E5"> similar</font>

355
00:12:34,510 --> 00:12:37,930
but why did<font color="#CCCCCC"> I come down</font><font color="#E5E5E5"> to these three</font>

356
00:12:35,980 --> 00:12:39,520
<font color="#CCCCCC">at the end of the day running these</font>

357
00:12:37,930 --> 00:12:41,469
commands<font color="#E5E5E5"> will produce a lot</font><font color="#CCCCCC"> of standard</font>

358
00:12:39,520 --> 00:12:45,069
<font color="#CCCCCC">output</font><font color="#E5E5E5"> that happen to contain the</font>

359
00:12:41,470 --> 00:12:46,570
strings<font color="#E5E5E5"> CMD and PowerShell somewhere in</font>

360
00:12:45,070 --> 00:12:48,940
the output<font color="#E5E5E5"> so how can we take advantage</font>

361
00:12:46,570 --> 00:12:51,420
<font color="#E5E5E5">of</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> let's look at the set example if</font>

362
00:12:48,940 --> 00:12:53,680
I do set<font color="#E5E5E5"> fine storing PowerShell then to</font>

363
00:12:51,420 --> 00:12:56,410
environment variables come back the<font color="#E5E5E5"> path</font>

364
00:12:53,680 --> 00:12:57,819
in<font color="#E5E5E5"> the PS module path if I'm an</font><font color="#CCCCCC"> attacker</font>

365
00:12:56,410 --> 00:12:59,709
I want to use the one that's<font color="#CCCCCC"> coming</font><font color="#E5E5E5"> most</font>

366
00:12:57,820 --> 00:13:01,030
<font color="#E5E5E5">consistent on different systems</font><font color="#CCCCCC"> people's</font>

367
00:12:59,710 --> 00:13:03,010
<font color="#CCCCCC">path variables are probably</font><font color="#E5E5E5"> gonna be</font>

368
00:13:01,030 --> 00:13:05,620
<font color="#CCCCCC">pretty different but who's modifying PS</font>

369
00:13:03,010 --> 00:13:06,790
module path<font color="#CCCCCC"> probably not many people</font><font color="#E5E5E5"> so</font>

370
00:13:05,620 --> 00:13:08,860
<font color="#E5E5E5">let's just go with</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> and we don't</font>

371
00:13:06,790 --> 00:13:10,930
have<font color="#E5E5E5"> to specify PS module path we can</font>

372
00:13:08,860 --> 00:13:12,700
<font color="#CCCCCC">just say capital P capital</font><font color="#E5E5E5"> s capital</font><font color="#CCCCCC"> M</font>

373
00:13:10,930 --> 00:13:14,260
<font color="#E5E5E5">and that will also get us that result</font>

374
00:13:12,700 --> 00:13:15,670
and so whenever there's something<font color="#E5E5E5"> like</font>

375
00:13:14,260 --> 00:13:17,020
<font color="#E5E5E5">this there's a lot of variation this is</font>

376
00:13:15,670 --> 00:13:18,610
<font color="#E5E5E5">actually a screenshot from my source</font>

377
00:13:17,020 --> 00:13:20,319
code<font color="#CCCCCC"> well I'll</font><font color="#E5E5E5"> just take a huge array of</font>

378
00:13:18,610 --> 00:13:22,450
a lot<font color="#E5E5E5"> of</font><font color="#CCCCCC"> options and</font><font color="#E5E5E5"> just random would</font>

379
00:13:20,320 --> 00:13:25,450
choose one<font color="#CCCCCC"> of</font><font color="#E5E5E5"> those every time</font><font color="#CCCCCC"> I run the</font>

380
00:13:22,450 --> 00:13:27,520
code so when we do this we'll see this

381
00:13:25,450 --> 00:13:29,800
bottom box here is<font color="#E5E5E5"> the full value of PS</font>

382
00:13:27,520 --> 00:13:31,569
module path<font color="#E5E5E5"> so what we need to do two</font>

383
00:13:29,800 --> 00:13:33,969
instances of<font color="#E5E5E5"> PowerShell and I want to</font>

384
00:13:31,570 --> 00:13:35,200
lift both<font color="#E5E5E5"> of</font><font color="#CCCCCC"> those out so I want to look</font>

385
00:13:33,970 --> 00:13:37,270
at the characters that<font color="#E5E5E5"> are</font><font color="#CCCCCC"> on either</font>

386
00:13:35,200 --> 00:13:39,580
side of these<font color="#E5E5E5"> and in this case the</font>

387
00:13:37,270 --> 00:13:41,170
backslash<font color="#E5E5E5"> and the lowercase s are the</font>

388
00:13:39,580 --> 00:13:44,080
<font color="#CCCCCC">two des limiters</font><font color="#E5E5E5"> that I need to delimit</font>

389
00:13:41,170 --> 00:13:45,969
this entire payload on<font color="#E5E5E5"> so if I de limit</font>

390
00:13:44,080 --> 00:13:46,930
on the lowercase s and the backslash it

391
00:13:45,970 --> 00:13:48,760
breaks this up in the third

392
00:13:46,930 --> 00:13:50,979
pieces where I'm interested in<font color="#E5E5E5"> piece</font>

393
00:13:48,760 --> 00:13:52,870
<font color="#CCCCCC">number four and piece</font><font color="#E5E5E5"> number</font><font color="#CCCCCC"> 11</font><font color="#E5E5E5"> both</font>

394
00:13:50,980 --> 00:13:54,730
containing<font color="#CCCCCC"> a stream PowerShell</font><font color="#E5E5E5"> so now</font>

395
00:13:52,870 --> 00:13:58,990
how can<font color="#E5E5E5"> I do this on the command line</font>

396
00:13:54,730 --> 00:14:00,640
<font color="#E5E5E5">using only command XE well the for loop</font>

397
00:13:58,990 --> 00:14:02,230
<font color="#E5E5E5">and command XE has some pretty</font><font color="#CCCCCC"> cool</font>

398
00:14:00,640 --> 00:14:05,740
<font color="#CCCCCC">features one of</font><font color="#E5E5E5"> them being delimiter</font><font color="#CCCCCC"> z--</font>

399
00:14:02,230 --> 00:14:07,750
so if I run<font color="#CCCCCC"> that set unstring</font><font color="#E5E5E5"> PSM at the</font>

400
00:14:05,740 --> 00:14:09,220
end of<font color="#E5E5E5"> this command then</font><font color="#CCCCCC"> i say for</font><font color="#E5E5E5"> the</font>

401
00:14:07,750 --> 00:14:10,720
result<font color="#E5E5E5"> that comes back</font><font color="#CCCCCC"> i want</font><font color="#E5E5E5"> you to</font>

402
00:14:09,220 --> 00:14:13,149
apply<font color="#E5E5E5"> these</font><font color="#CCCCCC"> delimiter x' and take this</font>

403
00:14:10,720 --> 00:14:14,950
<font color="#E5E5E5">token the forth token in this case it</font>

404
00:14:13,149 --> 00:14:16,930
will return to me the<font color="#E5E5E5"> string</font><font color="#CCCCCC"> powershell</font>

405
00:14:14,950 --> 00:14:19,000
and<font color="#CCCCCC"> i just say do whatever the result of</font>

406
00:14:16,930 --> 00:14:20,529
that is literally execute whatever<font color="#CCCCCC"> comes</font>

407
00:14:19,000 --> 00:14:21,940
back and so as you<font color="#CCCCCC"> can see in that</font>

408
00:14:20,529 --> 00:14:24,250
screenshot<font color="#CCCCCC"> this will actually</font><font color="#E5E5E5"> run</font>

409
00:14:21,940 --> 00:14:25,990
PowerShell<font color="#CCCCCC"> now why does this matter well</font>

410
00:14:24,250 --> 00:14:27,190
are you gonna see<font color="#E5E5E5"> PowerShell in plain</font>

411
00:14:25,990 --> 00:14:29,410
<font color="#E5E5E5">text it since it's a separate process</font>

412
00:14:27,190 --> 00:14:30,550
<font color="#CCCCCC">yes you absolutely</font><font color="#E5E5E5"> will but what if this</font>

413
00:14:29,410 --> 00:14:31,930
<font color="#E5E5E5">is sitting in registry and you're</font>

414
00:14:30,550 --> 00:14:33,910
looking for anywhere where PowerShell is

415
00:14:31,930 --> 00:14:35,649
listed in registry well now PowerShell

416
00:14:33,910 --> 00:14:37,689
is not<font color="#E5E5E5"> listed anywhere it's it's hidden</font>

417
00:14:35,649 --> 00:14:39,160
in this weird for loop thing<font color="#E5E5E5"> so it's</font>

418
00:14:37,690 --> 00:14:42,490
just a<font color="#E5E5E5"> kind of interesting way</font><font color="#CCCCCC"> to layer</font>

419
00:14:39,160 --> 00:14:44,800
<font color="#E5E5E5">what you're actually</font><font color="#CCCCCC"> trying to do so</font>

420
00:14:42,490 --> 00:14:46,060
that<font color="#CCCCCC"> was binary name obfuscation</font><font color="#E5E5E5"> next</font>

421
00:14:44,800 --> 00:14:49,060
let's look at character insertion

422
00:14:46,060 --> 00:14:52,239
obfuscation<font color="#CCCCCC"> so as</font><font color="#E5E5E5"> I mentioned earlier</font>

423
00:14:49,060 --> 00:14:53,920
with apt<font color="#E5E5E5"> 32 they use the</font><font color="#CCCCCC"> caret symbols</font>

424
00:14:52,240 --> 00:14:55,360
which is pretty<font color="#E5E5E5"> common</font><font color="#CCCCCC"> which is the</font>

425
00:14:53,920 --> 00:14:56,890
<font color="#E5E5E5">escape character and if you escape</font>

426
00:14:55,360 --> 00:14:58,930
<font color="#E5E5E5">something that has no escapable meaning</font>

427
00:14:56,890 --> 00:15:00,189
<font color="#CCCCCC">the carrot is still there you do have to</font>

428
00:14:58,930 --> 00:15:02,290
worry about double escaping though when

429
00:15:00,190 --> 00:15:03,430
you<font color="#E5E5E5"> have multiple child processes</font><font color="#CCCCCC"> the</font>

430
00:15:02,290 --> 00:15:04,779
double quotes are far more effective

431
00:15:03,430 --> 00:15:06,699
<font color="#CCCCCC">because you</font><font color="#E5E5E5"> don't have to double escape</font>

432
00:15:04,779 --> 00:15:08,380
anything<font color="#CCCCCC"> double quotes will persist</font>

433
00:15:06,700 --> 00:15:10,180
hundreds of child<font color="#E5E5E5"> processes down without</font>

434
00:15:08,380 --> 00:15:12,220
ever losing their<font color="#CCCCCC"> value like carrots do</font>

435
00:15:10,180 --> 00:15:14,800
you have to keep in<font color="#CCCCCC"> mind they have to be</font>

436
00:15:12,220 --> 00:15:16,089
evenly balanced<font color="#CCCCCC"> you can't have an odd</font>

437
00:15:14,800 --> 00:15:17,260
number<font color="#CCCCCC"> of double</font><font color="#E5E5E5"> quotes on the command</font>

438
00:15:16,089 --> 00:15:18,640
<font color="#CCCCCC">line because command actually</font><font color="#E5E5E5"> doesn't</font>

439
00:15:17,260 --> 00:15:20,350
<font color="#E5E5E5">really have a good way</font><font color="#CCCCCC"> to escape it's</font>

440
00:15:18,640 --> 00:15:22,480
like impossible<font color="#E5E5E5"> to actually escape</font>

441
00:15:20,350 --> 00:15:23,620
double quotes so<font color="#CCCCCC"> paring them is really</font>

442
00:15:22,480 --> 00:15:25,930
important because the<font color="#E5E5E5"> way it kind of</font>

443
00:15:23,620 --> 00:15:28,330
joins all the arguments<font color="#E5E5E5"> together</font><font color="#CCCCCC"> i'm</font>

444
00:15:25,930 --> 00:15:29,760
encapsulating<font color="#CCCCCC"> parentheses the only time</font>

445
00:15:28,330 --> 00:15:31,959
I've ever<font color="#E5E5E5"> seen this in the wild was</font>

446
00:15:29,760 --> 00:15:33,610
investigating some newscaster activity

447
00:15:31,959 --> 00:15:35,199
<font color="#E5E5E5">and I don't believe they were doing</font><font color="#CCCCCC"> it</font>

448
00:15:33,610 --> 00:15:37,810
for<font color="#E5E5E5"> obfuscation purposes but you can put</font>

449
00:15:35,200 --> 00:15:39,820
an even even paired of or an evenly

450
00:15:37,810 --> 00:15:42,339
paired number of parentheses around

451
00:15:39,820 --> 00:15:43,839
commands and some sub<font color="#E5E5E5"> commands and this</font>

452
00:15:42,339 --> 00:15:46,660
could definitely break some rules if

453
00:15:43,839 --> 00:15:48,640
<font color="#E5E5E5">your reg</font><font color="#CCCCCC"> xing like sub command a and</font>

454
00:15:46,660 --> 00:15:51,490
then ampersand one or two of those or

455
00:15:48,640 --> 00:15:52,779
name pipes or vertical pipes<font color="#E5E5E5"> followed by</font>

456
00:15:51,490 --> 00:15:54,760
white space<font color="#E5E5E5"> then the next command</font>

457
00:15:52,779 --> 00:15:56,709
because<font color="#E5E5E5"> you could have the</font><font color="#CCCCCC"> parentheses</font>

458
00:15:54,760 --> 00:15:58,240
in between that leading and<font color="#E5E5E5"> trailing</font>

459
00:15:56,709 --> 00:15:59,619
<font color="#E5E5E5">special characters this may be a little</font>

460
00:15:58,240 --> 00:16:00,080
hard<font color="#E5E5E5"> to see but</font><font color="#CCCCCC"> that's a comma</font><font color="#E5E5E5"> and the</font>

461
00:15:59,620 --> 00:16:02,690
semi<font color="#E5E5E5"> Cole</font>

462
00:16:00,080 --> 00:16:03,980
on either side<font color="#CCCCCC"> of command I've never</font>

463
00:16:02,690 --> 00:16:06,110
seen this used before

464
00:16:03,980 --> 00:16:07,520
and I came across this when I was

465
00:16:06,110 --> 00:16:09,020
<font color="#CCCCCC">writing a fuzzer script in this</font><font color="#E5E5E5"> research</font>

466
00:16:07,520 --> 00:16:10,430
<font color="#CCCCCC">just</font><font color="#E5E5E5"> to say I wonder what characters I</font>

467
00:16:09,020 --> 00:16:12,380
can<font color="#E5E5E5"> throw into</font><font color="#CCCCCC"> a command and it</font><font color="#E5E5E5"> still</font>

468
00:16:10,430 --> 00:16:13,729
produced a valid command and so these

469
00:16:12,380 --> 00:16:15,080
are<font color="#CCCCCC"> the</font><font color="#E5E5E5"> two that</font><font color="#CCCCCC"> I came</font><font color="#E5E5E5"> down to and so</font>

470
00:16:13,730 --> 00:16:17,930
anywhere<font color="#E5E5E5"> where you have</font><font color="#CCCCCC"> whitespace</font>

471
00:16:15,080 --> 00:16:19,850
that's used as a delimiter<font color="#E5E5E5"> character you</font>

472
00:16:17,930 --> 00:16:21,920
can replace<font color="#CCCCCC"> that</font><font color="#E5E5E5"> with as many commas and</font>

473
00:16:19,850 --> 00:16:23,240
semicolons as you want<font color="#E5E5E5"> and we'll see</font>

474
00:16:21,920 --> 00:16:24,589
what<font color="#E5E5E5"> that will</font><font color="#CCCCCC"> really mess with</font><font color="#E5E5E5"> a lot of</font>

475
00:16:23,240 --> 00:16:26,900
detections<font color="#CCCCCC"> as we get into</font><font color="#E5E5E5"> some examples</font>

476
00:16:24,590 --> 00:16:28,040
<font color="#E5E5E5">and</font><font color="#CCCCCC"> a few slides and</font><font color="#E5E5E5"> then standard input</font>

477
00:16:26,900 --> 00:16:30,800
argument hiding we already saw an

478
00:16:28,040 --> 00:16:32,599
example<font color="#E5E5E5"> of</font><font color="#CCCCCC"> that it's</font><font color="#E5E5E5"> non-existent</font>

479
00:16:30,800 --> 00:16:35,030
<font color="#E5E5E5">environment variables this</font><font color="#CCCCCC"> was from</font><font color="#E5E5E5"> a</font>

480
00:16:32,600 --> 00:16:37,520
<font color="#CCCCCC">old blog post from several</font><font color="#E5E5E5"> years</font><font color="#CCCCCC"> ago not</font>

481
00:16:35,030 --> 00:16:39,110
mine<font color="#CCCCCC"> where</font><font color="#E5E5E5"> you</font><font color="#CCCCCC"> in a batch file</font><font color="#E5E5E5"> this</font>

482
00:16:37,520 --> 00:16:40,460
<font color="#E5E5E5">doesn't work on the command line</font><font color="#CCCCCC"> but in</font>

483
00:16:39,110 --> 00:16:42,500
a batch file you can<font color="#E5E5E5"> basically put</font>

484
00:16:40,460 --> 00:16:43,670
non-existent<font color="#E5E5E5"> like dummy variables all</font>

485
00:16:42,500 --> 00:16:45,620
over the place<font color="#E5E5E5"> and they'll just be</font>

486
00:16:43,670 --> 00:16:47,360
resolved to nothing when<font color="#CCCCCC"> the batch file</font>

487
00:16:45,620 --> 00:16:48,380
actually<font color="#E5E5E5"> runs on the command line they</font>

488
00:16:47,360 --> 00:16:52,100
won't resolve and you'll just<font color="#E5E5E5"> have</font>

489
00:16:48,380 --> 00:16:53,360
<font color="#E5E5E5">person at 8% breaking your command</font><font color="#CCCCCC"> using</font>

490
00:16:52,100 --> 00:16:54,650
custom environment variables as<font color="#E5E5E5"> well as</font>

491
00:16:53,360 --> 00:16:55,850
<font color="#E5E5E5">existing environment</font><font color="#CCCCCC"> variables</font><font color="#E5E5E5"> we kind</font>

492
00:16:54,650 --> 00:16:57,770
of already<font color="#E5E5E5"> touched on both of those but</font>

493
00:16:55,850 --> 00:16:59,270
collectively I call this insertion

494
00:16:57,770 --> 00:17:00,560
character obfuscation because you can

495
00:16:59,270 --> 00:17:01,910
start to insert<font color="#E5E5E5"> these in a lot of</font>

496
00:17:00,560 --> 00:17:05,050
<font color="#E5E5E5">different</font><font color="#CCCCCC"> places</font><font color="#E5E5E5"> in any command that</font><font color="#CCCCCC"> you</font>

497
00:17:01,910 --> 00:17:07,430
have in an outfit coded command<font color="#CCCCCC"> I</font>

498
00:17:05,050 --> 00:17:08,720
basically as some of the the<font color="#E5E5E5"> input you</font>

499
00:17:07,430 --> 00:17:11,270
<font color="#CCCCCC">can select</font><font color="#E5E5E5"> whether you want</font><font color="#CCCCCC"> your payload</font>

500
00:17:08,720 --> 00:17:12,470
to be run<font color="#E5E5E5"> by command or PowerShell and</font><font color="#CCCCCC"> I</font>

501
00:17:11,270 --> 00:17:13,190
included some<font color="#CCCCCC"> of these substring</font>

502
00:17:12,470 --> 00:17:15,800
obfuscation

503
00:17:13,190 --> 00:17:17,930
<font color="#E5E5E5">in that tool</font><font color="#CCCCCC"> and then someone replied on</font>

504
00:17:15,800 --> 00:17:21,020
Twitter and had a full command with just

505
00:17:17,930 --> 00:17:22,670
these concatenated substrings<font color="#E5E5E5"> and so in</font>

506
00:17:21,020 --> 00:17:23,959
<font color="#E5E5E5">invoked</font><font color="#CCCCCC"> ah sophistication you can add</font>

507
00:17:22,670 --> 00:17:26,900
<font color="#E5E5E5">that as an option to basically just</font>

508
00:17:23,959 --> 00:17:32,180
substring encode any command or payload

509
00:17:26,900 --> 00:17:33,140
that<font color="#E5E5E5"> you have so in the wild</font><font color="#CCCCCC"> as I</font>

510
00:17:32,180 --> 00:17:34,520
<font color="#E5E5E5">started to come across on these</font>

511
00:17:33,140 --> 00:17:36,380
techniques I started to hunt for them to

512
00:17:34,520 --> 00:17:37,879
see I'm probably not<font color="#E5E5E5"> the</font><font color="#CCCCCC"> first person to</font>

513
00:17:36,380 --> 00:17:39,860
<font color="#E5E5E5">find this is it being</font><font color="#CCCCCC"> used elsewhere</font>

514
00:17:37,880 --> 00:17:41,420
<font color="#E5E5E5">that we know</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> this</font><font color="#CCCCCC"> is an example</font><font color="#E5E5E5"> of</font><font color="#CCCCCC"> a</font>

515
00:17:39,860 --> 00:17:43,310
piece of<font color="#E5E5E5"> malware called devourer and</font>

516
00:17:41,420 --> 00:17:45,470
this was uploaded<font color="#CCCCCC"> to virus total in 2012</font>

517
00:17:43,310 --> 00:17:46,760
<font color="#E5E5E5">and this technique goes way back</font><font color="#CCCCCC"> once</font>

518
00:17:45,470 --> 00:17:48,230
<font color="#E5E5E5">you</font><font color="#CCCCCC"> start to look</font><font color="#E5E5E5"> on forums</font><font color="#CCCCCC"> people have</font>

519
00:17:46,760 --> 00:17:52,070
been<font color="#CCCCCC"> doing</font><font color="#E5E5E5"> this these tricks for a long</font>

520
00:17:48,230 --> 00:17:54,080
time with substring variables this<font color="#E5E5E5"> is</font>

521
00:17:52,070 --> 00:17:56,510
another one<font color="#E5E5E5"> a</font><font color="#CCCCCC"> j/s batch obfuscator this</font>

522
00:17:54,080 --> 00:17:58,790
is a tiny project on<font color="#CCCCCC"> github but it's</font>

523
00:17:56,510 --> 00:18:00,530
<font color="#E5E5E5">really cool it's a it's about two and</font><font color="#CCCCCC"> a</font>

524
00:17:58,790 --> 00:18:02,000
<font color="#CCCCCC">half years old on github and</font><font color="#E5E5E5"> basically</font>

525
00:18:00,530 --> 00:18:03,049
it starts the batch file starts with

526
00:18:02,000 --> 00:18:05,169
<font color="#E5E5E5">setting</font>

527
00:18:03,049 --> 00:18:07,369
a custom variable<font color="#E5E5E5"> with a full alphabet</font>

528
00:18:05,169 --> 00:18:09,049
<font color="#CCCCCC">and then the rest of</font><font color="#E5E5E5"> the payload is</font>

529
00:18:07,369 --> 00:18:10,610
taking<font color="#CCCCCC"> substrings of that variable</font><font color="#E5E5E5"> that</font>

530
00:18:09,049 --> 00:18:12,379
<font color="#E5E5E5">has the full alphabet</font><font color="#CCCCCC"> and we've actually</font>

531
00:18:10,610 --> 00:18:15,258
seen<font color="#CCCCCC"> some interesting Chinese</font><font color="#E5E5E5"> apt groups</font>

532
00:18:12,379 --> 00:18:17,059
<font color="#CCCCCC">using a modified version</font><font color="#E5E5E5"> of this tool</font>

533
00:18:15,259 --> 00:18:19,100
<font color="#CCCCCC">and looking</font><font color="#E5E5E5"> very similar</font><font color="#CCCCCC"> a lot of</font><font color="#E5E5E5"> the</font>

534
00:18:17,059 --> 00:18:20,210
differences<font color="#CCCCCC"> you'll see are with some of</font>

535
00:18:19,100 --> 00:18:22,998
the first couple of commands will have

536
00:18:20,210 --> 00:18:24,679
extra<font color="#CCCCCC"> @ signs and then also the payload</font>

537
00:18:22,999 --> 00:18:25,820
won't necessarily be<font color="#E5E5E5"> the entire alphabet</font>

538
00:18:24,679 --> 00:18:28,129
<font color="#CCCCCC">it will be just</font><font color="#E5E5E5"> the characters that they</font>

539
00:18:25,820 --> 00:18:30,710
<font color="#E5E5E5">need</font><font color="#CCCCCC"> and random</font><font color="#E5E5E5"> ordering and there's a</font>

540
00:18:28,129 --> 00:18:31,639
decoded example right there<font color="#E5E5E5"> this last</font>

541
00:18:30,710 --> 00:18:33,499
one I'm not<font color="#E5E5E5"> gonna</font><font color="#CCCCCC"> go into</font><font color="#E5E5E5"> too much</font>

542
00:18:31,639 --> 00:18:35,090
detail<font color="#E5E5E5"> it's really juicy</font><font color="#CCCCCC"> though and all</font>

543
00:18:33,499 --> 00:18:37,580
the tails are<font color="#E5E5E5"> in the white paper this is</font>

544
00:18:35,090 --> 00:18:39,080
<font color="#CCCCCC">a tool called batch encryption</font><font color="#E5E5E5"> where</font>

545
00:18:37,580 --> 00:18:41,359
they<font color="#CCCCCC"> basically use both known and</font>

546
00:18:39,080 --> 00:18:42,320
<font color="#E5E5E5">unknown environment variables they start</font>

547
00:18:41,359 --> 00:18:44,119
with setting<font color="#E5E5E5"> an environment variable</font>

548
00:18:42,320 --> 00:18:45,590
they call a<font color="#CCCCCC"> single quote that's</font><font color="#E5E5E5"> the name</font>

549
00:18:44,119 --> 00:18:47,629
of<font color="#CCCCCC"> the variable</font><font color="#E5E5E5"> and then they set that</font>

550
00:18:45,590 --> 00:18:49,488
as some massive crazy value but they do

551
00:18:47,629 --> 00:18:51,408
that<font color="#E5E5E5"> with using</font><font color="#CCCCCC"> existing</font><font color="#E5E5E5"> environment</font>

552
00:18:49,489 --> 00:18:52,940
variable<font color="#CCCCCC"> sub strings</font><font color="#E5E5E5"> once they set that</font>

553
00:18:51,409 --> 00:18:55,100
and the rest<font color="#E5E5E5"> of the payload is just just</font>

554
00:18:52,940 --> 00:18:56,809
taking characters one by one out<font color="#CCCCCC"> of that</font>

555
00:18:55,100 --> 00:19:00,009
single variable so it kind of makes<font color="#E5E5E5"> your</font>

556
00:18:56,809 --> 00:19:02,178
mind melt when you try<font color="#CCCCCC"> to decode that</font>

557
00:19:00,009 --> 00:19:03,739
<font color="#CCCCCC">alright</font><font color="#E5E5E5"> talk</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> our office getting</font>

558
00:19:02,179 --> 00:19:05,659
binary names<font color="#E5E5E5"> we kind of</font><font color="#CCCCCC"> cover this</font>

559
00:19:03,739 --> 00:19:09,649
general<font color="#CCCCCC"> category of</font><font color="#E5E5E5"> character insertion</font>

560
00:19:05,659 --> 00:19:11,450
but what about the attacker who says<font color="#CCCCCC"> ok</font>

561
00:19:09,649 --> 00:19:13,699
maybe<font color="#E5E5E5"> the defenders are looking for a</font>

562
00:19:11,450 --> 00:19:15,440
lot<font color="#CCCCCC"> of tick marks</font><font color="#E5E5E5"> or a lot of carrots a</font>

563
00:19:13,700 --> 00:19:17,539
lot<font color="#E5E5E5"> of quotes and these commas and</font>

564
00:19:15,440 --> 00:19:19,159
semicolons<font color="#CCCCCC"> is there a way that I can</font>

565
00:19:17,539 --> 00:19:22,100
obfuscate my payload without using any

566
00:19:19,159 --> 00:19:24,830
of<font color="#E5E5E5"> that the answer is</font><font color="#CCCCCC"> yes and I chose</font>

567
00:19:22,100 --> 00:19:26,238
this as an example the<font color="#CCCCCC"> the portion</font><font color="#E5E5E5"> on</font>

568
00:19:24,830 --> 00:19:27,799
the right just<font color="#E5E5E5"> the netstat command that</font>

569
00:19:26,239 --> 00:19:29,840
<font color="#E5E5E5">has no importance other than it's just</font>

570
00:19:27,799 --> 00:19:31,940
<font color="#E5E5E5">something simple but the left side of</font>

571
00:19:29,840 --> 00:19:33,889
the command if your defender then this

572
00:19:31,940 --> 00:19:36,289
should send chills up<font color="#E5E5E5"> your spine because</font>

573
00:19:33,889 --> 00:19:37,729
seeing<font color="#E5E5E5"> calm spec variable sitting in the</font>

574
00:19:36,289 --> 00:19:39,710
registry<font color="#CCCCCC"> run</font><font color="#E5E5E5"> key or as a service is a</font>

575
00:19:37,730 --> 00:19:41,690
<font color="#E5E5E5">big</font><font color="#CCCCCC"> red flag Metasploit is one of the</font>

576
00:19:39,710 --> 00:19:45,200
first the first<font color="#E5E5E5"> ones I at least saw</font>

577
00:19:41,690 --> 00:19:47,570
using<font color="#CCCCCC"> it but /bc start beat</font><font color="#E5E5E5"> and this</font>

578
00:19:45,200 --> 00:19:49,220
together is like<font color="#E5E5E5"> never good this is</font>

579
00:19:47,570 --> 00:19:50,989
always<font color="#E5E5E5"> bad news</font><font color="#CCCCCC"> so I use this as</font><font color="#E5E5E5"> an</font>

580
00:19:49,220 --> 00:19:53,659
example<font color="#CCCCCC"> to show</font><font color="#E5E5E5"> this can actually be</font>

581
00:19:50,989 --> 00:19:56,629
obfuscated<font color="#CCCCCC"> in some really weird ways and</font>

582
00:19:53,659 --> 00:19:58,100
so it itself is<font color="#E5E5E5"> not</font><font color="#CCCCCC"> a silver</font><font color="#E5E5E5"> bullet so</font>

583
00:19:56,629 --> 00:19:59,299
what are these<font color="#CCCCCC"> things well com spec is</font>

584
00:19:58,100 --> 00:20:02,809
the<font color="#E5E5E5"> environment variable that</font><font color="#CCCCCC"> points to</font>

585
00:19:59,299 --> 00:20:04,908
the full path of command<font color="#E5E5E5"> XE</font><font color="#CCCCCC"> BC start</font><font color="#E5E5E5"> be</font>

586
00:20:02,809 --> 00:20:07,070
<font color="#E5E5E5">man there's the expressions there a lot</font>

587
00:20:04,909 --> 00:20:08,539
<font color="#CCCCCC">of times when tools use a lot</font><font color="#E5E5E5"> of flags</font>

588
00:20:07,070 --> 00:20:10,789
sometimes all those flags<font color="#E5E5E5"> aren't even</font>

589
00:20:08,539 --> 00:20:12,440
necessary so what if you as a hacker<font color="#CCCCCC"> to</font>

590
00:20:10,789 --> 00:20:13,999
started removing some<font color="#CCCCCC"> of those and what</font>

591
00:20:12,440 --> 00:20:15,800
if<font color="#CCCCCC"> you as</font><font color="#E5E5E5"> a defender didn't check to see</font>

592
00:20:13,999 --> 00:20:18,930
are these required

593
00:20:15,800 --> 00:20:20,669
so how can we office get<font color="#E5E5E5"> comms back well</font>

594
00:20:18,930 --> 00:20:22,170
there's<font color="#E5E5E5"> two</font><font color="#CCCCCC"> things we can</font><font color="#E5E5E5"> do one is</font>

595
00:20:20,670 --> 00:20:24,000
going<font color="#E5E5E5"> to our environment variable</font>

596
00:20:22,170 --> 00:20:26,280
substring right so the value of<font color="#CCCCCC"> coms</font>

597
00:20:24,000 --> 00:20:27,960
<font color="#CCCCCC">back is</font><font color="#E5E5E5"> 27 characters long so we could</font>

598
00:20:26,280 --> 00:20:29,310
do something<font color="#CCCCCC"> like</font><font color="#E5E5E5"> this</font><font color="#CCCCCC"> and say start</font>

599
00:20:27,960 --> 00:20:31,260
from<font color="#E5E5E5"> the zeroth character and just</font><font color="#CCCCCC"> go</font>

600
00:20:29,310 --> 00:20:33,179
outwards to infinity or start from<font color="#E5E5E5"> zero</font>

601
00:20:31,260 --> 00:20:34,920
and<font color="#E5E5E5"> go</font><font color="#CCCCCC"> forward</font><font color="#E5E5E5"> 27 or you can use</font>

602
00:20:33,180 --> 00:20:37,050
negative indexing<font color="#E5E5E5"> and say start from the</font>

603
00:20:34,920 --> 00:20:38,700
end but let's<font color="#E5E5E5"> go back 27 and then go out</font>

604
00:20:37,050 --> 00:20:40,680
and<font color="#E5E5E5"> so these all resolve to the same</font>

605
00:20:38,700 --> 00:20:42,720
value and<font color="#E5E5E5"> you don't have to stick with</font>

606
00:20:40,680 --> 00:20:44,250
27 you could do leet as your<font color="#E5E5E5"> number if</font>

607
00:20:42,720 --> 00:20:45,870
you want to and it will still process

608
00:20:44,250 --> 00:20:48,600
that just fine it never goes past the

609
00:20:45,870 --> 00:20:49,770
bounds when you start environment

610
00:20:48,600 --> 00:20:51,360
variable substitution is similar

611
00:20:49,770 --> 00:20:52,740
<font color="#E5E5E5">remember this is what fin</font><font color="#CCCCCC"> 7 did they</font>

612
00:20:51,360 --> 00:20:54,419
basically said take all the<font color="#CCCCCC"> @ signs and</font>

613
00:20:52,740 --> 00:20:56,490
replace them with<font color="#E5E5E5"> nothing well you could</font>

614
00:20:54,420 --> 00:20:58,110
take values<font color="#E5E5E5"> that never exist</font><font color="#CCCCCC"> and replace</font>

615
00:20:56,490 --> 00:20:59,700
them with doesn't matter what because

616
00:20:58,110 --> 00:21:01,169
they're never<font color="#E5E5E5"> gonna affect the value or</font>

617
00:20:59,700 --> 00:21:02,400
you could do<font color="#CCCCCC"> something like actually</font>

618
00:21:01,170 --> 00:21:05,220
changing back<font color="#E5E5E5"> slashes the forward</font>

619
00:21:02,400 --> 00:21:06,960
slashes and it's gonna run<font color="#CCCCCC"> just fine so</font>

620
00:21:05,220 --> 00:21:08,760
let's choose<font color="#CCCCCC"> two of</font><font color="#E5E5E5"> those and just</font><font color="#CCCCCC"> kind</font>

621
00:21:06,960 --> 00:21:11,940
of keep those<font color="#E5E5E5"> in our site as we keep</font>

622
00:21:08,760 --> 00:21:13,560
<font color="#E5E5E5">going we can also I don't think this</font>

623
00:21:11,940 --> 00:21:15,000
<font color="#CCCCCC">should break anyone's defenses but</font><font color="#E5E5E5"> you</font>

624
00:21:13,560 --> 00:21:16,620
can randomize the casing of<font color="#CCCCCC"> the</font>

625
00:21:15,000 --> 00:21:18,150
environment variable<font color="#E5E5E5"> you can add a lot</font>

626
00:21:16,620 --> 00:21:19,469
<font color="#CCCCCC">of</font><font color="#E5E5E5"> whitespace in interesting places this</font>

627
00:21:18,150 --> 00:21:21,240
actually does<font color="#CCCCCC"> change</font><font color="#E5E5E5"> the behavior of the</font>

628
00:21:19,470 --> 00:21:22,770
<font color="#E5E5E5">bottom</font><font color="#CCCCCC"> example but it doesn't matter</font>

629
00:21:21,240 --> 00:21:24,210
<font color="#E5E5E5">because</font><font color="#CCCCCC"> we didn't</font><font color="#E5E5E5"> want to change</font><font color="#CCCCCC"> it in</font>

630
00:21:22,770 --> 00:21:26,820
<font color="#E5E5E5">the first place and then you can</font>

631
00:21:24,210 --> 00:21:29,280
explicitly sign integers<font color="#E5E5E5"> I don't know if</font>

632
00:21:26,820 --> 00:21:30,600
you've ever<font color="#CCCCCC"> seen a plus 0 or minus 0 but</font>

633
00:21:29,280 --> 00:21:32,850
it shouldn't be<font color="#CCCCCC"> happening on</font><font color="#E5E5E5"> a command</font>

634
00:21:30,600 --> 00:21:34,740
<font color="#E5E5E5">line it is an interesting indicator and</font>

635
00:21:32,850 --> 00:21:36,899
looking for how<font color="#E5E5E5"> people are signing stuff</font>

636
00:21:34,740 --> 00:21:38,490
it<font color="#E5E5E5"> doesn't need to be signed so let's</font>

637
00:21:36,900 --> 00:21:39,840
just<font color="#E5E5E5"> replace</font><font color="#CCCCCC"> that with a</font><font color="#E5E5E5"> bottom one now</font>

638
00:21:38,490 --> 00:21:42,270
a really important point<font color="#E5E5E5"> here is</font><font color="#CCCCCC"> that</font>

639
00:21:39,840 --> 00:21:44,159
context is crucial if you're a red

640
00:21:42,270 --> 00:21:46,980
teamer and you take this command and you

641
00:21:44,160 --> 00:21:48,360
paste it into services or registry run

642
00:21:46,980 --> 00:21:52,440
key or<font color="#CCCCCC"> something like that</font><font color="#E5E5E5"> it will not</font>

643
00:21:48,360 --> 00:21:54,600
<font color="#E5E5E5">work and here's why</font><font color="#CCCCCC"> is that</font><font color="#E5E5E5"> this this</font>

644
00:21:52,440 --> 00:21:56,490
crazy substring institution stuff it

645
00:21:54,600 --> 00:21:58,560
only makes<font color="#E5E5E5"> sense in the context of</font>

646
00:21:56,490 --> 00:22:00,120
command<font color="#CCCCCC"> XE but when you're running</font>

647
00:21:58,560 --> 00:22:01,980
<font color="#E5E5E5">something as a service or run key it</font>

648
00:22:00,120 --> 00:22:03,510
doesn't know what the context is yet<font color="#E5E5E5"> the</font>

649
00:22:01,980 --> 00:22:04,740
<font color="#E5E5E5">only reason</font><font color="#CCCCCC"> percent com spec</font><font color="#E5E5E5"> percent</font>

650
00:22:03,510 --> 00:22:06,780
works is it's literally<font color="#E5E5E5"> like a find and</font>

651
00:22:04,740 --> 00:22:08,010
replace for command<font color="#E5E5E5"> and the operating</font>

652
00:22:06,780 --> 00:22:10,830
system knows that<font color="#CCCCCC"> but it can't handle</font>

653
00:22:08,010 --> 00:22:12,660
<font color="#E5E5E5">this so you in that case you start with</font>

654
00:22:10,830 --> 00:22:14,340
a legitimate<font color="#CCCCCC"> command XE without this</font>

655
00:22:12,660 --> 00:22:16,290
crazy obfuscation but then the rest is

656
00:22:14,340 --> 00:22:18,300
fair game<font color="#CCCCCC"> but if you're running</font><font color="#E5E5E5"> it in</font>

657
00:22:16,290 --> 00:22:19,770
command XE or in a batch file or

658
00:22:18,300 --> 00:22:21,270
something<font color="#CCCCCC"> like</font><font color="#E5E5E5"> W script thought shell it</font>

659
00:22:19,770 --> 00:22:24,629
understands<font color="#E5E5E5"> that context so</font><font color="#CCCCCC"> it's</font>

660
00:22:21,270 --> 00:22:25,950
<font color="#CCCCCC">something important to check so for the</font>

661
00:22:24,630 --> 00:22:27,210
rest<font color="#E5E5E5"> of the arguments</font><font color="#CCCCCC"> we can randomize</font>

662
00:22:25,950 --> 00:22:28,379
the case

663
00:22:27,210 --> 00:22:30,839
we can actually<font color="#E5E5E5"> remove white space</font>

664
00:22:28,379 --> 00:22:33,418
between<font color="#E5E5E5"> almost any argument we see so</font>

665
00:22:30,839 --> 00:22:35,190
who's looking<font color="#CCCCCC"> for</font><font color="#E5E5E5"> as a defender space</font><font color="#CCCCCC"> /b</font>

666
00:22:33,419 --> 00:22:36,989
space because this will burn you<font color="#CCCCCC"> right</font>

667
00:22:35,190 --> 00:22:38,519
here<font color="#E5E5E5"> another interesting thing is</font><font color="#CCCCCC"> that</font>

668
00:22:36,989 --> 00:22:40,469
you'll notice<font color="#E5E5E5"> between our</font><font color="#CCCCCC"> comm spec</font>

669
00:22:38,519 --> 00:22:43,349
which is command<font color="#E5E5E5"> and the very first</font>

670
00:22:40,469 --> 00:22:45,749
<font color="#E5E5E5">argument of /b there's zero</font><font color="#CCCCCC"> whitespace</font>

671
00:22:43,349 --> 00:22:47,580
<font color="#E5E5E5">in this but when you look at the process</font>

672
00:22:45,749 --> 00:22:49,379
<font color="#CCCCCC">execution logs or when you</font><font color="#E5E5E5"> query a</font>

673
00:22:47,580 --> 00:22:52,080
running process<font color="#CCCCCC"> the operating system</font>

674
00:22:49,379 --> 00:22:53,820
<font color="#E5E5E5">adds a white space</font><font color="#CCCCCC"> so</font><font color="#E5E5E5"> to make it</font><font color="#CCCCCC"> more</font>

675
00:22:52,080 --> 00:22:55,080
interesting<font color="#E5E5E5"> now I could have</font><font color="#CCCCCC"> a rule that</font>

676
00:22:53,820 --> 00:22:57,059
a hundred<font color="#CCCCCC"> percent detects something</font>

677
00:22:55,080 --> 00:22:59,339
statically like in registry or in event

678
00:22:57,059 --> 00:23:01,589
logs as like a service creation<font color="#E5E5E5"> but will</font>

679
00:22:59,339 --> 00:23:03,629
fail<font color="#CCCCCC"> in the dynamic data because the</font>

680
00:23:01,589 --> 00:23:05,158
operating operating system actually<font color="#E5E5E5"> adds</font>

681
00:23:03,629 --> 00:23:06,599
that<font color="#E5E5E5"> white space in there so it's really</font>

682
00:23:05,159 --> 00:23:08,450
<font color="#E5E5E5">important to test against all the</font>

683
00:23:06,599 --> 00:23:11,070
different data sources<font color="#CCCCCC"> that you have</font>

684
00:23:08,450 --> 00:23:11,849
<font color="#E5E5E5">will just reorder a no.2 in a way</font>

685
00:23:11,070 --> 00:23:13,859
because<font color="#CCCCCC"> it doesn't</font><font color="#E5E5E5"> matter</font>

686
00:23:11,849 --> 00:23:16,289
so<font color="#CCCCCC"> will</font><font color="#E5E5E5"> you</font><font color="#CCCCCC"> remove</font><font color="#E5E5E5"> white space we can</font>

687
00:23:13,859 --> 00:23:17,460
also add a lot<font color="#E5E5E5"> of white</font><font color="#CCCCCC"> space we can</font>

688
00:23:16,289 --> 00:23:19,499
then add in all those comments<font color="#E5E5E5"> and</font>

689
00:23:17,460 --> 00:23:21,179
semicolons<font color="#E5E5E5"> wherever a white space is a</font>

690
00:23:19,499 --> 00:23:25,979
delimiter<font color="#CCCCCC"> we can add as many of</font><font color="#E5E5E5"> those as</font>

691
00:23:21,179 --> 00:23:28,589
<font color="#CCCCCC">we want we can</font><font color="#E5E5E5"> then add</font><font color="#CCCCCC"> carrots</font><font color="#E5E5E5"> of</font>

692
00:23:25,979 --> 00:23:31,019
several different<font color="#CCCCCC"> layers now if we run</font>

693
00:23:28,589 --> 00:23:32,609
this the process<font color="#E5E5E5"> execution goes from</font>

694
00:23:31,019 --> 00:23:33,839
<font color="#E5E5E5">bottom to top</font><font color="#CCCCCC"> you'll see all the carrots</font>

695
00:23:32,609 --> 00:23:35,489
are highlighted but in the second

696
00:23:33,839 --> 00:23:36,629
command<font color="#E5E5E5"> where there were</font><font color="#CCCCCC"> two carrots in</font>

697
00:23:35,489 --> 00:23:39,869
the original command there's only one

698
00:23:36,629 --> 00:23:41,279
because<font color="#E5E5E5"> it's escaping itself that's when</font>

699
00:23:39,869 --> 00:23:43,320
you have<font color="#E5E5E5"> many child processes you</font><font color="#CCCCCC"> have</font>

700
00:23:41,279 --> 00:23:46,169
to<font color="#E5E5E5"> factor in every layer of escaping and</font>

701
00:23:43,320 --> 00:23:47,639
double the number<font color="#CCCCCC"> of carrots but you'll</font>

702
00:23:46,169 --> 00:23:49,559
<font color="#E5E5E5">notice this highlighted blue portion</font>

703
00:23:47,639 --> 00:23:54,389
whenever you see command followed<font color="#E5E5E5"> by</font><font color="#CCCCCC"> two</font>

704
00:23:49,559 --> 00:23:56,489
white spaces<font color="#CCCCCC"> / s space</font><font color="#E5E5E5"> / D space /</font><font color="#CCCCCC"> c0</font>

705
00:23:54,389 --> 00:23:58,559
space double quote<font color="#CCCCCC"> thinner</font><font color="#E5E5E5"> space and</font>

706
00:23:56,489 --> 00:23:59,909
then something<font color="#E5E5E5"> this is actually</font><font color="#CCCCCC"> an</font>

707
00:23:58,559 --> 00:24:01,649
artifact of the operating<font color="#E5E5E5"> system when</font>

708
00:23:59,909 --> 00:24:03,479
you run sub commands or pipe content

709
00:24:01,649 --> 00:24:05,248
into other binaries why is this matter

710
00:24:03,479 --> 00:24:07,109
because<font color="#E5E5E5"> you can</font><font color="#CCCCCC"> write really specific</font>

711
00:24:05,249 --> 00:24:09,210
detection<font color="#CCCCCC"> based</font><font color="#E5E5E5"> off of those leading</font>

712
00:24:07,109 --> 00:24:10,408
arguments<font color="#E5E5E5"> and then something else well</font>

713
00:24:09,210 --> 00:24:11,700
touch on<font color="#E5E5E5"> this towards the detection</font>

714
00:24:10,409 --> 00:24:13,080
section at the<font color="#CCCCCC"> end of this talk but</font>

715
00:24:11,700 --> 00:24:14,909
there's a lot<font color="#E5E5E5"> of</font><font color="#CCCCCC"> in the white paper as</font>

716
00:24:13,080 --> 00:24:17,939
well<font color="#E5E5E5"> but</font><font color="#CCCCCC"> just something</font><font color="#E5E5E5"> to keep an eye</font>

717
00:24:14,909 --> 00:24:20,039
on now I'm stringing<font color="#E5E5E5"> that stat or our</font>

718
00:24:17,940 --> 00:24:21,719
final processes that run<font color="#E5E5E5"> but what</font>

719
00:24:20,039 --> 00:24:23,099
happened to all the operation yeah the

720
00:24:21,719 --> 00:24:25,080
casing<font color="#E5E5E5"> in the white space is there but</font>

721
00:24:23,099 --> 00:24:27,210
<font color="#E5E5E5">what about the carrots what about the</font>

722
00:24:25,080 --> 00:24:29,249
semicolons and commas<font color="#CCCCCC"> well none of</font><font color="#E5E5E5"> those</font>

723
00:24:27,210 --> 00:24:30,239
characters<font color="#CCCCCC"> actually work with netstat or</font>

724
00:24:29,249 --> 00:24:34,049
fine string they don't know how to

725
00:24:30,239 --> 00:24:36,539
interpret those characters<font color="#E5E5E5"> so is there a</font>

726
00:24:34,049 --> 00:24:38,009
character<font color="#E5E5E5"> that it doesn't matter what</font>

727
00:24:36,539 --> 00:24:39,950
binary<font color="#E5E5E5"> we're running that it will still</font>

728
00:24:38,009 --> 00:24:41,780
persist<font color="#E5E5E5"> into its arguments</font>

729
00:24:39,950 --> 00:24:43,190
the answer is the double quote<font color="#CCCCCC"> and</font>

730
00:24:41,780 --> 00:24:45,290
another<font color="#E5E5E5"> reason why I love it</font><font color="#CCCCCC"> so</font><font color="#E5E5E5"> much</font>

731
00:24:43,190 --> 00:24:47,330
is<font color="#E5E5E5"> that it works</font><font color="#CCCCCC"> in places that none of</font>

732
00:24:45,290 --> 00:24:48,740
<font color="#E5E5E5">the other characters work so we put our</font>

733
00:24:47,330 --> 00:24:50,300
<font color="#E5E5E5">paired double quotes into the original</font>

734
00:24:48,740 --> 00:24:53,740
command and you'll see they follow all

735
00:24:50,300 --> 00:24:57,230
<font color="#E5E5E5">the way up into</font><font color="#CCCCCC"> all the child</font><font color="#E5E5E5"> processes</font>

736
00:24:53,740 --> 00:24:59,780
so in in writing<font color="#CCCCCC"> this it was insanely</font>

737
00:24:57,230 --> 00:25:00,980
frustrating<font color="#E5E5E5"> and complicated</font><font color="#CCCCCC"> because in</font>

738
00:24:59,780 --> 00:25:02,690
doing the<font color="#CCCCCC"> powershell obfuscation</font>

739
00:25:00,980 --> 00:25:04,940
development<font color="#E5E5E5"> i had access to the language</font>

740
00:25:02,690 --> 00:25:07,100
tokenizer so<font color="#CCCCCC"> i could</font><font color="#E5E5E5"> basically say hey</font>

741
00:25:04,940 --> 00:25:08,540
in<font color="#E5E5E5"> this whole script</font><font color="#CCCCCC"> you're these are</font>

742
00:25:07,100 --> 00:25:10,129
the commands these are the<font color="#E5E5E5"> strings these</font>

743
00:25:08,540 --> 00:25:12,170
<font color="#CCCCCC">are the arguments</font><font color="#E5E5E5"> with command actually</font>

744
00:25:10,130 --> 00:25:13,310
<font color="#CCCCCC">there's none of that</font><font color="#E5E5E5"> so it was really</font>

745
00:25:12,170 --> 00:25:15,110
<font color="#E5E5E5">really</font><font color="#CCCCCC"> frustrating</font><font color="#E5E5E5"> and I call this my</font>

746
00:25:13,310 --> 00:25:16,909
<font color="#E5E5E5">tiniest violin slide because I'm trying</font>

747
00:25:15,110 --> 00:25:18,260
<font color="#E5E5E5">to seek a</font><font color="#CCCCCC"> little bit of sympathy but not</font>

748
00:25:16,910 --> 00:25:19,640
<font color="#E5E5E5">really but it was</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> very interesting</font>

749
00:25:18,260 --> 00:25:21,110
challenge<font color="#E5E5E5"> to try to</font><font color="#CCCCCC"> figure out how to</font>

750
00:25:19,640 --> 00:25:22,760
piece all<font color="#E5E5E5"> this stuff</font><font color="#CCCCCC"> together with all</font>

751
00:25:21,110 --> 00:25:25,490
<font color="#E5E5E5">the layers and have it</font><font color="#CCCCCC"> escape properly</font>

752
00:25:22,760 --> 00:25:29,990
<font color="#E5E5E5">and it definitely is a product of a</font><font color="#CCCCCC"> lot</font>

753
00:25:25,490 --> 00:25:32,480
<font color="#CCCCCC">of late nights</font><font color="#E5E5E5"> and tears in coffee um</font><font color="#CCCCCC"> so</font>

754
00:25:29,990 --> 00:25:34,070
I kind of go<font color="#E5E5E5"> back</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> the question of</font>

755
00:25:32,480 --> 00:25:35,660
some defense<font color="#E5E5E5"> and I say well why</font><font color="#CCCCCC"> is why</font>

756
00:25:34,070 --> 00:25:37,220
does this matter<font color="#CCCCCC"> okay so if</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> only</font>

757
00:25:35,660 --> 00:25:38,810
special characters<font color="#CCCCCC"> that can persist in</font>

758
00:25:37,220 --> 00:25:41,090
the child<font color="#E5E5E5"> processes are double quotes as</font>

759
00:25:38,810 --> 00:25:43,520
a defender<font color="#E5E5E5"> let's say you remove double</font>

760
00:25:41,090 --> 00:25:47,179
quotes before<font color="#CCCCCC"> I apply my detection zhh</font>

761
00:25:43,520 --> 00:25:49,340
<font color="#E5E5E5">well I would argue it's important to</font>

762
00:25:47,180 --> 00:25:52,040
detect<font color="#CCCCCC"> opposition in and of itself</font>

763
00:25:49,340 --> 00:25:53,419
<font color="#E5E5E5">because</font><font color="#CCCCCC"> that tells you something that</font>

764
00:25:52,040 --> 00:25:55,639
tells you I don't<font color="#E5E5E5"> have to care</font><font color="#CCCCCC"> about the</font>

765
00:25:53,420 --> 00:25:57,320
intent of<font color="#E5E5E5"> what this</font><font color="#CCCCCC"> command was</font><font color="#E5E5E5"> it's</font>

766
00:25:55,640 --> 00:25:58,790
obfuscated so someone didn't want<font color="#CCCCCC"> me to</font>

767
00:25:57,320 --> 00:26:00,379
<font color="#E5E5E5">know</font><font color="#CCCCCC"> about it it immediately becomes</font>

768
00:25:58,790 --> 00:26:02,330
interesting but there's a lot<font color="#E5E5E5"> of</font>

769
00:26:00,380 --> 00:26:04,880
commands<font color="#E5E5E5"> an attacker could do that never</font>

770
00:26:02,330 --> 00:26:08,600
create a child process<font color="#CCCCCC"> out</font><font color="#E5E5E5"> of command</font><font color="#CCCCCC"> XE</font>

771
00:26:04,880 --> 00:26:10,550
how about some of these if they if they

772
00:26:08,600 --> 00:26:12,740
have<font color="#CCCCCC"> of</font><font color="#E5E5E5"> their spawning commands that</font>

773
00:26:10,550 --> 00:26:14,840
that are running<font color="#CCCCCC"> this content</font><font color="#E5E5E5"> but never</font>

774
00:26:12,740 --> 00:26:16,910
actually<font color="#E5E5E5"> but it's all obfuscated I would</font>

775
00:26:14,840 --> 00:26:18,919
want<font color="#E5E5E5"> to know if an attacker is sink</font>

776
00:26:16,910 --> 00:26:20,210
calling my security<font color="#CCCCCC"> cloud product by</font>

777
00:26:18,920 --> 00:26:21,710
dropping something<font color="#E5E5E5"> in my</font><font color="#CCCCCC"> hosts file</font>

778
00:26:20,210 --> 00:26:23,150
that's<font color="#E5E5E5"> never</font><font color="#CCCCCC"> going</font><font color="#E5E5E5"> to spawn a child</font>

779
00:26:21,710 --> 00:26:25,700
<font color="#E5E5E5">process you wanna see one blurred</font>

780
00:26:23,150 --> 00:26:27,230
obfuscated command<font color="#E5E5E5"> so I still</font><font color="#CCCCCC"> think it's</font>

781
00:26:25,700 --> 00:26:29,240
important to detect obfuscation in and

782
00:26:27,230 --> 00:26:30,590
of itself<font color="#E5E5E5"> and the added benefit is is</font>

783
00:26:29,240 --> 00:26:32,240
that<font color="#E5E5E5"> all that time you put into the</font>

784
00:26:30,590 --> 00:26:33,919
<font color="#CCCCCC">Teknik it on your endpoints you can then</font>

785
00:26:32,240 --> 00:26:35,300
<font color="#E5E5E5">apply</font><font color="#CCCCCC"> that in your rules</font><font color="#E5E5E5"> snort</font>

786
00:26:33,920 --> 00:26:37,220
signatures<font color="#E5E5E5"> and start to find more</font>

787
00:26:35,300 --> 00:26:38,600
samples in the wild and<font color="#E5E5E5"> static sources</font>

788
00:26:37,220 --> 00:26:43,280
<font color="#E5E5E5">without ever having to run it</font>

789
00:26:38,600 --> 00:26:45,199
dynamically so the<font color="#CCCCCC"> very last</font><font color="#E5E5E5"> part here</font>

790
00:26:43,280 --> 00:26:46,280
again<font color="#E5E5E5"> if we're in</font><font color="#CCCCCC"> it's hacker and our</font>

791
00:26:45,200 --> 00:26:47,480
defenders are looking for all these

792
00:26:46,280 --> 00:26:49,370
<font color="#E5E5E5">characters and we don't want to put all</font>

793
00:26:47,480 --> 00:26:51,200
<font color="#E5E5E5">these crazy characters in our command</font><font color="#CCCCCC"> is</font>

794
00:26:49,370 --> 00:26:53,209
<font color="#CCCCCC">there a way that</font><font color="#E5E5E5"> we can obfuscate</font><font color="#CCCCCC"> the</font>

795
00:26:51,200 --> 00:26:56,450
entire payload without using<font color="#CCCCCC"> beasts</font>

796
00:26:53,210 --> 00:26:58,309
characters<font color="#CCCCCC"> and in all my research I</font>

797
00:26:56,450 --> 00:27:00,500
basically kind<font color="#CCCCCC"> of boiled it down to</font><font color="#E5E5E5"> four</font>

798
00:26:58,309 --> 00:27:02,120
different<font color="#E5E5E5"> categories of doing this the</font>

799
00:27:00,500 --> 00:27:03,200
very first<font color="#CCCCCC"> one is concatenation and</font><font color="#E5E5E5"> this</font>

800
00:27:02,120 --> 00:27:05,059
seemed to make the<font color="#CCCCCC"> most sense</font><font color="#E5E5E5"> because</font>

801
00:27:03,200 --> 00:27:06,140
<font color="#E5E5E5">it's kind of kind</font><font color="#CCCCCC"> of one of</font><font color="#E5E5E5"> the easier</font>

802
00:27:05,059 --> 00:27:09,190
things<font color="#CCCCCC"> to start</font><font color="#E5E5E5"> doing</font>

803
00:27:06,140 --> 00:27:13,250
so if we have commands<font color="#E5E5E5"> /c netstat ano</font>

804
00:27:09,190 --> 00:27:17,390
fun fact<font color="#E5E5E5"> you can change that tack ano to</font>

805
00:27:13,250 --> 00:27:19,130
<font color="#CCCCCC">/a no it's</font><font color="#E5E5E5"> not just with netstat as a</font>

806
00:27:17,390 --> 00:27:21,860
defender<font color="#CCCCCC"> you have rules</font><font color="#E5E5E5"> that are looking</font>

807
00:27:19,130 --> 00:27:24,260
<font color="#E5E5E5">for</font><font color="#CCCCCC"> w script with slash</font><font color="#E5E5E5"> no logo because</font>

808
00:27:21,860 --> 00:27:26,330
that<font color="#E5E5E5"> could also be - no logo or could be</font>

809
00:27:24,260 --> 00:27:28,399
slash<font color="#E5E5E5"> slash no logo</font><font color="#CCCCCC"> PowerShell if you're</font>

810
00:27:26,330 --> 00:27:29,658
looking<font color="#E5E5E5"> for -</font><font color="#CCCCCC"> EEE or - ec2 actually in</font>

811
00:27:28,399 --> 00:27:31,610
the<font color="#CCCCCC"> sixteen different</font><font color="#E5E5E5"> ways you can write</font>

812
00:27:29,659 --> 00:27:33,860
in coded command an attacker could just

813
00:27:31,610 --> 00:27:36,199
use a slash<font color="#E5E5E5"> encoded</font><font color="#CCCCCC"> with that get by</font>

814
00:27:33,860 --> 00:27:37,789
your detection<font color="#E5E5E5"> or with register 32 all</font>

815
00:27:36,200 --> 00:27:39,260
those slashes can be dashes<font color="#E5E5E5"> and on top</font>

816
00:27:37,789 --> 00:27:39,679
<font color="#CCCCCC">of</font><font color="#E5E5E5"> that the URL instead of forward</font>

817
00:27:39,260 --> 00:27:42,020
slashes

818
00:27:39,679 --> 00:27:43,100
can be backward slashes some things<font color="#E5E5E5"> like</font>

819
00:27:42,020 --> 00:27:45,110
PowerShell can actually take for

820
00:27:43,100 --> 00:27:47,178
backward slashes in right beside each

821
00:27:45,110 --> 00:27:48,408
<font color="#E5E5E5">other when you're doing URLs</font><font color="#CCCCCC"> so are we</font>

822
00:27:47,179 --> 00:27:50,559
taking those<font color="#E5E5E5"> little things into account</font>

823
00:27:48,409 --> 00:27:52,850
<font color="#CCCCCC">because those will burn us as defenders</font>

824
00:27:50,559 --> 00:27:54,789
anyways that was just on the side so

825
00:27:52,850 --> 00:27:57,620
let's<font color="#CCCCCC"> Center net sac command into a</font>

826
00:27:54,789 --> 00:28:00,260
custom variable<font color="#E5E5E5"> called comm for command</font>

827
00:27:57,620 --> 00:28:02,299
<font color="#E5E5E5">and then was echo % comm percentage just</font>

828
00:28:00,260 --> 00:28:03,649
<font color="#E5E5E5">to make sure the value looks right well</font>

829
00:28:02,299 --> 00:28:05,450
we<font color="#E5E5E5"> just echo that</font><font color="#CCCCCC"> it actually doesn't</font>

830
00:28:03,649 --> 00:28:07,039
<font color="#CCCCCC">show us the value at all</font><font color="#E5E5E5"> in the first</font>

831
00:28:05,450 --> 00:28:09,320
<font color="#E5E5E5">one it just shows percent comm percent</font>

832
00:28:07,039 --> 00:28:10,850
that's because a custom environment

833
00:28:09,320 --> 00:28:13,399
variable created in a command session

834
00:28:10,850 --> 00:28:15,230
<font color="#E5E5E5">doesn't automatically expand so two ways</font>

835
00:28:13,399 --> 00:28:16,908
we<font color="#E5E5E5"> can expand it are the very bottom we</font>

836
00:28:15,230 --> 00:28:18,980
<font color="#CCCCCC">can</font><font color="#E5E5E5"> just create a new child process and</font>

837
00:28:16,909 --> 00:28:21,049
then echo it or we could use the call

838
00:28:18,980 --> 00:28:23,059
internal command<font color="#E5E5E5"> which will expand this</font>

839
00:28:21,049 --> 00:28:24,080
environment variable in this session<font color="#E5E5E5"> so</font>

840
00:28:23,059 --> 00:28:25,850
that's one we're gonna<font color="#E5E5E5"> go</font><font color="#CCCCCC"> with we're</font>

841
00:28:24,080 --> 00:28:27,649
<font color="#E5E5E5">gonna put that call in our command and</font>

842
00:28:25,850 --> 00:28:30,289
now when<font color="#E5E5E5"> we run it it</font><font color="#CCCCCC"> actually executes</font>

843
00:28:27,649 --> 00:28:33,289
<font color="#E5E5E5">the expanded environment variable</font>

844
00:28:30,289 --> 00:28:34,879
contents so now instead of<font color="#E5E5E5"> just</font><font color="#CCCCCC"> putting</font>

845
00:28:33,289 --> 00:28:36,350
it<font color="#E5E5E5"> in a calm let's put it in three</font>

846
00:28:34,880 --> 00:28:38,149
<font color="#E5E5E5">variables comm one two and three and</font>

847
00:28:36,350 --> 00:28:40,309
<font color="#CCCCCC">then let's call the concatenation</font><font color="#E5E5E5"> of</font>

848
00:28:38,149 --> 00:28:41,360
<font color="#CCCCCC">comma one two and three now an</font>

849
00:28:40,309 --> 00:28:42,950
<font color="#E5E5E5">interesting thing here these are</font>

850
00:28:41,360 --> 00:28:44,449
screenshots from system on if you're

851
00:28:42,950 --> 00:28:46,429
<font color="#E5E5E5">using system on for any of your data you</font>

852
00:28:44,450 --> 00:28:49,279
may want to look out<font color="#E5E5E5"> for some updates</font>

853
00:28:46,429 --> 00:28:51,950
because if you'll<font color="#CCCCCC"> notice the parent</font>

854
00:28:49,279 --> 00:28:53,630
image<font color="#E5E5E5"> command line makes sense but the</font>

855
00:28:51,950 --> 00:28:55,460
command line one it doubles up<font color="#E5E5E5"> the</font>

856
00:28:53,630 --> 00:28:56,539
percents anywhere where there's<font color="#E5E5E5"> one</font>

857
00:28:55,460 --> 00:28:58,039
percent in the<font color="#E5E5E5"> original command they</font>

858
00:28:56,539 --> 00:28:59,809
have<font color="#E5E5E5"> two here and this is actually a</font>

859
00:28:58,039 --> 00:29:03,559
really big<font color="#E5E5E5"> problem because there's an</font>

860
00:28:59,809 --> 00:29:05,539
escaping bug<font color="#E5E5E5"> in percent in system on and</font>

861
00:29:03,559 --> 00:29:07,039
so I first<font color="#E5E5E5"> came across this about a year</font>

862
00:29:05,539 --> 00:29:09,200
<font color="#CCCCCC">and almost</font><font color="#E5E5E5"> two years</font>

863
00:29:07,039 --> 00:29:10,879
and reach<font color="#E5E5E5"> out</font><font color="#CCCCCC"> for Microsoft twice about</font>

864
00:29:09,200 --> 00:29:12,830
<font color="#CCCCCC">this and so</font><font color="#E5E5E5"> hopefully they'll be</font><font color="#CCCCCC"> getting</font>

865
00:29:10,880 --> 00:29:14,030
it fixed<font color="#E5E5E5"> at some point but basically if</font>

866
00:29:12,830 --> 00:29:17,090
you're using event viewer<font color="#E5E5E5"> or power</font>

867
00:29:14,030 --> 00:29:18,500
shells get<font color="#E5E5E5"> one event</font><font color="#CCCCCC"> this miss escaping</font>

868
00:29:17,090 --> 00:29:20,570
of<font color="#CCCCCC"> percents can actually result</font><font color="#E5E5E5"> in some</font>

869
00:29:18,500 --> 00:29:23,059
pretty erroneous data as well as hiding

870
00:29:20,570 --> 00:29:24,620
<font color="#E5E5E5">certain events</font><font color="#CCCCCC"> but regardless the raw</font>

871
00:29:23,059 --> 00:29:26,120
data actually has<font color="#E5E5E5"> two percents forever</font>

872
00:29:24,620 --> 00:29:27,678
there's one so if you're using<font color="#E5E5E5"> it as</font><font color="#CCCCCC"> a</font>

873
00:29:26,120 --> 00:29:29,120
data source you're gonna have to make

874
00:29:27,679 --> 00:29:31,880
<font color="#CCCCCC">sure</font><font color="#E5E5E5"> all of your logic is looking for</font>

875
00:29:29,120 --> 00:29:33,979
one or twice as many<font color="#CCCCCC"> percent characters</font>

876
00:29:31,880 --> 00:29:36,169
and that's<font color="#E5E5E5"> just a blog post I wrote on</font>

877
00:29:33,980 --> 00:29:38,570
on this bug and<font color="#CCCCCC"> kind</font><font color="#E5E5E5"> of some of</font><font color="#CCCCCC"> its</font>

878
00:29:36,169 --> 00:29:41,780
implications<font color="#E5E5E5"> so know your sources test</font>

879
00:29:38,570 --> 00:29:43,309
your tools<font color="#E5E5E5"> so we</font><font color="#CCCCCC"> can also set our</font><font color="#E5E5E5"> sub</font>

880
00:29:41,780 --> 00:29:45,530
<font color="#E5E5E5">strings into a final variable just</font>

881
00:29:43,309 --> 00:29:46,700
called final and this is our payload<font color="#CCCCCC"> now</font>

882
00:29:45,530 --> 00:29:48,289
<font color="#E5E5E5">there are five different kind</font><font color="#CCCCCC"> of</font>

883
00:29:46,700 --> 00:29:50,870
<font color="#E5E5E5">categories built into the tool into</font>

884
00:29:48,289 --> 00:29:53,090
<font color="#E5E5E5">invoked ossification</font><font color="#CCCCCC"> to execute code the</font>

885
00:29:50,870 --> 00:29:54,320
first<font color="#E5E5E5"> one is this if possible let's just</font>

886
00:29:53,090 --> 00:29:56,059
use the call command because<font color="#E5E5E5"> we don't</font>

887
00:29:54,320 --> 00:29:58,070
have spawned a separate process<font color="#E5E5E5"> however</font>

888
00:29:56,059 --> 00:30:00,139
<font color="#E5E5E5">if some of the values in this and</font>

889
00:29:58,070 --> 00:30:01,490
variable are like the vertical pipe or

890
00:30:00,140 --> 00:30:02,960
some other<font color="#CCCCCC"> special characters the call</font>

891
00:30:01,490 --> 00:30:05,090
command action doesn't<font color="#E5E5E5"> properly resolve</font>

892
00:30:02,960 --> 00:30:07,250
it properly resolves it but in this

893
00:30:05,090 --> 00:30:08,449
context<font color="#E5E5E5"> that gets really</font><font color="#CCCCCC"> really weird</font><font color="#E5E5E5"> so</font>

894
00:30:07,250 --> 00:30:10,280
in that case we'll just spawn a new

895
00:30:08,450 --> 00:30:12,440
child process and either say command<font color="#E5E5E5"> C</font>

896
00:30:10,280 --> 00:30:14,178
environment variable or pipe environment

897
00:30:12,440 --> 00:30:15,679
variable to command and then options

898
00:30:14,179 --> 00:30:17,900
<font color="#E5E5E5">four and five are</font><font color="#CCCCCC"> the exact same</font><font color="#E5E5E5"> but</font>

899
00:30:15,679 --> 00:30:19,549
<font color="#CCCCCC">they're with</font><font color="#E5E5E5"> PowerShell so if you want</font>

900
00:30:17,900 --> 00:30:22,100
<font color="#CCCCCC">to use invoked authorization for command</font>

901
00:30:19,549 --> 00:30:23,690
<font color="#CCCCCC">XE stuff</font><font color="#E5E5E5"> it's all yours if you</font><font color="#CCCCCC"> want to</font>

902
00:30:22,100 --> 00:30:25,189
actually<font color="#CCCCCC"> run command that XE and put</font>

903
00:30:23,690 --> 00:30:27,049
<font color="#E5E5E5">PowerShell input and have it</font><font color="#CCCCCC"> eventually</font>

904
00:30:25,190 --> 00:30:28,880
run by PowerShell then invoked

905
00:30:27,049 --> 00:30:30,559
<font color="#E5E5E5">ossification will handle the layers of</font>

906
00:30:28,880 --> 00:30:32,059
<font color="#E5E5E5">PowerShell office</font><font color="#CCCCCC"> station wrapped</font><font color="#E5E5E5"> inside</font>

907
00:30:30,559 --> 00:30:36,260
the layers of the command actually

908
00:30:32,059 --> 00:30:38,149
obfuscation for the final execution so

909
00:30:36,260 --> 00:30:40,070
as an attacker we just accomplished our

910
00:30:38,150 --> 00:30:41,720
goal right<font color="#E5E5E5"> we are able to concatenate</font><font color="#CCCCCC"> a</font>

911
00:30:40,070 --> 00:30:43,700
command<font color="#E5E5E5"> and office get</font><font color="#CCCCCC"> out without using</font>

912
00:30:41,720 --> 00:30:45,530
any<font color="#CCCCCC"> special characters but if we wanted</font>

913
00:30:43,700 --> 00:30:47,510
to be really<font color="#CCCCCC"> evil and have fun we</font><font color="#E5E5E5"> could</font>

914
00:30:45,530 --> 00:30:49,668
add all those things<font color="#E5E5E5"> back in randomize</font>

915
00:30:47,510 --> 00:30:51,260
the case remove<font color="#E5E5E5"> whitespace at it let's</font>

916
00:30:49,669 --> 00:30:52,940
<font color="#CCCCCC">add some commas and semicolons carrots</font>

917
00:30:51,260 --> 00:30:55,010
and then<font color="#E5E5E5"> parentheses</font><font color="#CCCCCC"> and this</font><font color="#E5E5E5"> command</font>

918
00:30:52,940 --> 00:30:59,330
still works perfectly<font color="#CCCCCC"> fine</font><font color="#E5E5E5"> we stack all</font>

919
00:30:55,010 --> 00:31:00,860
those pieces together when we run this

920
00:30:59,330 --> 00:31:02,689
it's<font color="#CCCCCC"> just a single</font><font color="#E5E5E5"> child process of</font><font color="#CCCCCC"> net</font>

921
00:31:00,860 --> 00:31:04,070
<font color="#CCCCCC">stat ano which again some people may be</font>

922
00:31:02,690 --> 00:31:05,690
like<font color="#E5E5E5"> okay</font><font color="#CCCCCC"> well I'm still</font><font color="#E5E5E5"> going</font><font color="#CCCCCC"> to see</font>

923
00:31:04,070 --> 00:31:07,340
<font color="#CCCCCC">net stat I know</font><font color="#E5E5E5"> well true in this case</font>

924
00:31:05,690 --> 00:31:09,530
<font color="#E5E5E5">your actual payload is running another</font>

925
00:31:07,340 --> 00:31:11,000
<font color="#E5E5E5">process but you can use pair double</font>

926
00:31:09,530 --> 00:31:12,139
quotes and get around that and<font color="#CCCCCC"> so now</font>

927
00:31:11,000 --> 00:31:15,559
the arguments are gonna have those

928
00:31:12,140 --> 00:31:18,230
double quotes what if we want double

929
00:31:15,559 --> 00:31:19,668
quotes<font color="#CCCCCC"> to aren't</font><font color="#E5E5E5"> side by side what</font><font color="#CCCCCC"> about</font>

930
00:31:18,230 --> 00:31:20,550
when our<font color="#E5E5E5"> input</font><font color="#CCCCCC"> command has double quotes</font>

931
00:31:19,669 --> 00:31:22,980
<font color="#E5E5E5">around</font>

932
00:31:20,550 --> 00:31:24,389
this is actually insanely difficult with

933
00:31:22,980 --> 00:31:26,190
a huge<font color="#E5E5E5"> problem for me in this research</font>

934
00:31:24,390 --> 00:31:27,810
<font color="#E5E5E5">because</font><font color="#CCCCCC"> you can't put those double</font>

935
00:31:26,190 --> 00:31:30,810
quotes<font color="#E5E5E5"> non-adjacent in the original</font>

936
00:31:27,810 --> 00:31:32,220
command<font color="#CCCCCC"> that</font><font color="#E5E5E5"> actually doesn't</font><font color="#CCCCCC"> work</font><font color="#E5E5E5"> so</font>

937
00:31:30,810 --> 00:31:34,080
the way that<font color="#CCCCCC"> I came</font><font color="#E5E5E5"> up with to get</font>

938
00:31:32,220 --> 00:31:38,040
around this is a kind of a four<font color="#E5E5E5"> step</font>

939
00:31:34,080 --> 00:31:40,110
process first<font color="#E5E5E5"> wherever we want</font><font color="#CCCCCC"> a one set</font>

940
00:31:38,040 --> 00:31:42,930
of double<font color="#E5E5E5"> quotes non-adjacent</font><font color="#CCCCCC"> I'm gonna</font>

941
00:31:40,110 --> 00:31:44,939
change it to<font color="#E5E5E5"> two then I'm</font><font color="#CCCCCC"> gonna create a</font>

942
00:31:42,930 --> 00:31:46,410
variable and<font color="#CCCCCC"> I'm gonna set the value</font><font color="#E5E5E5"> of</font>

943
00:31:44,940 --> 00:31:50,430
that variable<font color="#CCCCCC"> to be double quote double</font>

944
00:31:46,410 --> 00:31:52,050
<font color="#E5E5E5">quote third for our final variable I'm</font>

945
00:31:50,430 --> 00:31:53,730
gonna be a<font color="#E5E5E5"> little thin seven here and</font>

946
00:31:52,050 --> 00:31:55,379
use<font color="#E5E5E5"> that string substitution</font><font color="#CCCCCC"> I'll say</font>

947
00:31:53,730 --> 00:31:57,060
<font color="#CCCCCC">alright</font><font color="#E5E5E5"> take that value but before you</font>

948
00:31:55,380 --> 00:31:58,800
<font color="#CCCCCC">execute it</font><font color="#E5E5E5"> take every double quote</font>

949
00:31:57,060 --> 00:32:00,659
double<font color="#E5E5E5"> quote and replace it with</font><font color="#CCCCCC"> just</font>

950
00:31:58,800 --> 00:32:01,889
one<font color="#E5E5E5"> double quote but I can't put one</font>

951
00:32:00,660 --> 00:32:04,230
<font color="#CCCCCC">double quote in</font><font color="#E5E5E5"> here because then I'm</font>

952
00:32:01,890 --> 00:32:06,900
off balance<font color="#E5E5E5"> on double quotes what to do</font>

953
00:32:04,230 --> 00:32:09,330
<font color="#E5E5E5">well since I have</font><font color="#CCCCCC"> this quotes variable</font><font color="#E5E5E5"> I</font>

954
00:32:06,900 --> 00:32:11,730
can<font color="#CCCCCC"> take</font><font color="#E5E5E5"> a substring of that in memory</font>

955
00:32:09,330 --> 00:32:13,409
<font color="#E5E5E5">which</font><font color="#CCCCCC"> is just</font><font color="#E5E5E5"> one double quote</font><font color="#CCCCCC"> so in the</font>

956
00:32:11,730 --> 00:32:16,560
command I've evenly paired double quotes

957
00:32:13,410 --> 00:32:18,780
<font color="#E5E5E5">but in memory I don't however this</font>

958
00:32:16,560 --> 00:32:20,790
doesn't<font color="#E5E5E5"> work because the percent signs</font>

959
00:32:18,780 --> 00:32:22,379
in the in quotes variable messes up with

960
00:32:20,790 --> 00:32:24,360
a percent signs and the other<font color="#E5E5E5"> variable</font>

961
00:32:22,380 --> 00:32:25,680
<font color="#E5E5E5">so this was really frustrating and it</font>

962
00:32:24,360 --> 00:32:28,709
got me thinking is there a way I can

963
00:32:25,680 --> 00:32:32,060
<font color="#E5E5E5">expand a variable in command without</font>

964
00:32:28,710 --> 00:32:35,550
<font color="#E5E5E5">using percents the answer is yes if</font>

965
00:32:32,060 --> 00:32:38,760
you're running<font color="#E5E5E5"> Vista or</font><font color="#CCCCCC"> later you can</font>

966
00:32:35,550 --> 00:32:41,010
<font color="#CCCCCC">use this Vista flag now when you use</font>

967
00:32:38,760 --> 00:32:42,690
this<font color="#CCCCCC"> you can</font><font color="#E5E5E5"> actually use exclamation</font>

968
00:32:41,010 --> 00:32:44,940
<font color="#E5E5E5">points instead of percents for your</font>

969
00:32:42,690 --> 00:32:46,170
variable so now<font color="#E5E5E5"> exclamation points</font>

970
00:32:44,940 --> 00:32:46,500
inside<font color="#CCCCCC"> a</font><font color="#E5E5E5"> percents don't collide with</font>

971
00:32:46,170 --> 00:32:48,360
each other

972
00:32:46,500 --> 00:32:51,090
<font color="#E5E5E5">and in memory two quotes resolve to one</font>

973
00:32:48,360 --> 00:32:53,780
boom our command works without adjacent

974
00:32:51,090 --> 00:32:56,220
double quotes<font color="#E5E5E5"> this got me really</font><font color="#CCCCCC"> excited</font>

975
00:32:53,780 --> 00:32:58,170
<font color="#CCCCCC">now I have to be honest that</font><font color="#E5E5E5"> was kind of</font>

976
00:32:56,220 --> 00:32:59,820
a troll it<font color="#E5E5E5"> actually doesn't work but</font>

977
00:32:58,170 --> 00:33:01,350
there's no such thing as<font color="#E5E5E5"> a</font><font color="#CCCCCC"> vista flag if</font>

978
00:32:59,820 --> 00:33:03,899
you look at commands help menu there<font color="#E5E5E5"> is</font>

979
00:33:01,350 --> 00:33:05,790
however a<font color="#CCCCCC"> /v colon on flag which is for</font>

980
00:33:03,900 --> 00:33:09,120
delayed environment variable expansion

981
00:33:05,790 --> 00:33:11,399
what I found though is<font color="#E5E5E5"> that V</font><font color="#CCCCCC"> colon on</font>

982
00:33:09,120 --> 00:33:13,949
works<font color="#E5E5E5"> as does any substring as long as</font>

983
00:33:11,400 --> 00:33:16,200
it's my<font color="#E5E5E5"> B colon off and then because I'm</font>

984
00:33:13,950 --> 00:33:18,780
<font color="#E5E5E5">really curious</font><font color="#CCCCCC"> I found out that</font><font color="#E5E5E5"> V</font>

985
00:33:16,200 --> 00:33:21,510
anything like literally almost anything

986
00:33:18,780 --> 00:33:23,129
will work as<font color="#E5E5E5"> well so</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> can put insane</font>

987
00:33:21,510 --> 00:33:24,690
amounts of information<font color="#CCCCCC"> as</font><font color="#E5E5E5"> long as it</font>

988
00:33:23,130 --> 00:33:27,840
<font color="#E5E5E5">starts with a slash</font><font color="#CCCCCC"> V it's just gonna be</font>

989
00:33:24,690 --> 00:33:29,520
slash<font color="#E5E5E5"> V in for environment variable</font>

990
00:33:27,840 --> 00:33:31,290
names instead of com 1 2<font color="#CCCCCC"> & 3 as an</font>

991
00:33:29,520 --> 00:33:32,670
attacker we could just use<font color="#E5E5E5"> 100% special</font>

992
00:33:31,290 --> 00:33:32,909
<font color="#E5E5E5">characters as the environment variable</font>

993
00:33:32,670 --> 00:33:34,650
name

994
00:33:32,910 --> 00:33:36,300
or we could<font color="#E5E5E5"> use</font><font color="#CCCCCC"> different amounts</font><font color="#E5E5E5"> of</font>

995
00:33:34,650 --> 00:33:38,160
<font color="#E5E5E5">white space starting with one</font><font color="#CCCCCC"> non-white</font>

996
00:33:36,300 --> 00:33:41,190
<font color="#E5E5E5">space character so you can get really</font>

997
00:33:38,160 --> 00:33:42,570
dirty<font color="#E5E5E5"> if you want to so dude</font>

998
00:33:41,190 --> 00:33:44,370
the defenders in the<font color="#E5E5E5"> house</font><font color="#CCCCCC"> they're like</font>

999
00:33:42,570 --> 00:33:46,230
you call yourself a defender what are

1000
00:33:44,370 --> 00:33:49,110
you doing this for man<font color="#E5E5E5"> making our jobs</font>

1001
00:33:46,230 --> 00:33:51,540
difficult<font color="#E5E5E5"> well I started here because</font>

1002
00:33:49,110 --> 00:33:53,399
we'd already<font color="#CCCCCC"> attack baby steps of this</font>

1003
00:33:51,540 --> 00:33:55,170
in the wild<font color="#CCCCCC"> and a lot of malicious link</font>

1004
00:33:53,400 --> 00:33:57,300
files<font color="#CCCCCC"> attackers will concatenate</font><font color="#E5E5E5"> the</font>

1005
00:33:55,170 --> 00:33:59,190
string<font color="#CCCCCC"> PowerShell</font><font color="#E5E5E5"> to kind of evade some</font>

1006
00:33:57,300 --> 00:34:01,379
static<font color="#E5E5E5"> analysis here's another example</font>

1007
00:33:59,190 --> 00:34:03,960
<font color="#E5E5E5">but then they have some garbage very</font>

1008
00:34:01,380 --> 00:34:06,030
highlighted in yellow<font color="#E5E5E5"> and the third one</font>

1009
00:34:03,960 --> 00:34:07,860
<font color="#E5E5E5">is</font><font color="#CCCCCC"> also similar but they basically</font><font color="#E5E5E5"> take</font>

1010
00:34:06,030 --> 00:34:09,360
the concatenated variables in blue and

1011
00:34:07,860 --> 00:34:11,339
then set that<font color="#E5E5E5"> into</font><font color="#CCCCCC"> another variable in</font>

1012
00:34:09,360 --> 00:34:13,440
green and then execute that<font color="#E5E5E5"> which is the</font>

1013
00:34:11,340 --> 00:34:14,760
path<font color="#CCCCCC"> to PowerShell so basically</font>

1014
00:34:13,440 --> 00:34:16,620
attackers have been taking small steps

1015
00:34:14,760 --> 00:34:18,870
<font color="#E5E5E5">in this just for one string and a</font>

1016
00:34:16,620 --> 00:34:20,969
command<font color="#E5E5E5"> but we had never seen a full</font>

1017
00:34:18,870 --> 00:34:22,500
encoding of<font color="#E5E5E5"> payloads like this in the</font>

1018
00:34:20,969 --> 00:34:26,939
wild<font color="#CCCCCC"> before this research was published</font>

1019
00:34:22,500 --> 00:34:28,530
<font color="#CCCCCC">so I would say that's the extent we'd</font>

1020
00:34:26,940 --> 00:34:29,909
<font color="#CCCCCC">seen concatenation in the wild was again</font>

1021
00:34:28,530 --> 00:34:31,740
like<font color="#E5E5E5"> in malicious</font><font color="#CCCCCC"> linked files and it</font>

1022
00:34:29,909 --> 00:34:33,330
was just for<font color="#CCCCCC"> the string powershell we'd</font>

1023
00:34:31,739 --> 00:34:34,379
never seen it on<font color="#CCCCCC"> the</font><font color="#E5E5E5"> full payload the</font>

1024
00:34:33,330 --> 00:34:35,730
next three techniques<font color="#CCCCCC"> I'll talk about</font>

1025
00:34:34,379 --> 00:34:37,918
<font color="#CCCCCC">are things we've never</font><font color="#E5E5E5"> seen in the wild</font>

1026
00:34:35,730 --> 00:34:40,020
<font color="#CCCCCC">before this research</font><font color="#E5E5E5"> and when I say that</font>

1027
00:34:37,918 --> 00:34:41,668
what<font color="#CCCCCC"> I mean</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> that for the nine</font><font color="#E5E5E5"> months</font>

1028
00:34:40,020 --> 00:34:43,379
<font color="#E5E5E5">of this research I was hunting across</font>

1029
00:34:41,668 --> 00:34:45,480
internal data sources public data

1030
00:34:43,379 --> 00:34:47,460
sources sandbox reports<font color="#E5E5E5"> fowl</font>

1031
00:34:45,480 --> 00:34:49,168
repositories and<font color="#CCCCCC"> end point detection 'aa</font>

1032
00:34:47,460 --> 00:34:50,730
cross over<font color="#E5E5E5"> 10 million</font><font color="#CCCCCC"> endpoints</font><font color="#E5E5E5"> that's</font>

1033
00:34:49,168 --> 00:34:53,609
part of<font color="#E5E5E5"> my day-to-day job of looking for</font>

1034
00:34:50,730 --> 00:34:57,120
<font color="#E5E5E5">this stuff and I found zero of it before</font>

1035
00:34:53,610 --> 00:34:58,920
<font color="#E5E5E5">we released this so concatenation was</font>

1036
00:34:57,120 --> 00:35:02,009
number one number two<font color="#E5E5E5"> we're gonna look</font>

1037
00:34:58,920 --> 00:35:03,570
at the power of the<font color="#E5E5E5"> for loop</font><font color="#CCCCCC"> so remember</font>

1038
00:35:02,010 --> 00:35:05,550
<font color="#E5E5E5">before we use the for loop for some of</font>

1039
00:35:03,570 --> 00:35:07,080
the the binary name stuff<font color="#E5E5E5"> well if you</font>

1040
00:35:05,550 --> 00:35:09,600
look at<font color="#E5E5E5"> the V on description and</font>

1041
00:35:07,080 --> 00:35:12,360
commands help menu it says<font color="#E5E5E5"> the variables</font>

1042
00:35:09,600 --> 00:35:13,920
expands<font color="#E5E5E5"> syntax expands at input time</font>

1043
00:35:12,360 --> 00:35:15,840
which is quite<font color="#CCCCCC"> a different thing when</font>

1044
00:35:13,920 --> 00:35:16,860
<font color="#CCCCCC">it's side of a for loop</font><font color="#E5E5E5"> quite a</font>

1045
00:35:15,840 --> 00:35:18,300
different<font color="#CCCCCC"> thing is</font><font color="#E5E5E5"> like the</font>

1046
00:35:16,860 --> 00:35:20,730
understatement<font color="#CCCCCC"> of a century</font><font color="#E5E5E5"> because you</font>

1047
00:35:18,300 --> 00:35:22,310
can do insane stuff with a for<font color="#E5E5E5"> loop</font><font color="#CCCCCC"> so</font>

1048
00:35:20,730 --> 00:35:24,900
<font color="#CCCCCC">let's go back to our</font><font color="#E5E5E5"> net stat example</font>

1049
00:35:22,310 --> 00:35:27,020
make<font color="#CCCCCC"> sure we add in our</font><font color="#E5E5E5"> slash V for</font>

1050
00:35:24,900 --> 00:35:30,180
delayed environment variable expansion

1051
00:35:27,020 --> 00:35:31,770
another fun fact since attackers<font color="#CCCCCC"> like to</font>

1052
00:35:30,180 --> 00:35:33,480
rename binaries<font color="#E5E5E5"> I don't like to have</font>

1053
00:35:31,770 --> 00:35:36,000
binary names in any of my detection<font color="#CCCCCC"> Ziff</font>

1054
00:35:33,480 --> 00:35:38,540
at all possible<font color="#E5E5E5"> so I like</font><font color="#CCCCCC"> to use /c</font><font color="#E5E5E5"> as</font>

1055
00:35:36,000 --> 00:35:41,070
kind of<font color="#E5E5E5"> an anchor for command or like /k</font>

1056
00:35:38,540 --> 00:35:43,110
some of the other ones there but when

1057
00:35:41,070 --> 00:35:45,460
you actually look<font color="#E5E5E5"> at commands</font><font color="#CCCCCC"> man page</font>

1058
00:35:43,110 --> 00:35:47,589
<font color="#CCCCCC">online they leave out one</font>

1059
00:35:45,460 --> 00:35:50,710
which is weird<font color="#E5E5E5"> because they'd have it</font>

1060
00:35:47,589 --> 00:35:53,920
further down in<font color="#CCCCCC"> the documentation</font><font color="#E5E5E5"> for</font>

1061
00:35:50,710 --> 00:35:57,670
compatibility reasons<font color="#CCCCCC"> /r is the same as</font>

1062
00:35:53,920 --> 00:35:59,619
/c<font color="#E5E5E5"> I've never seen</font><font color="#CCCCCC"> slash</font><font color="#E5E5E5"> are used but</font>

1063
00:35:57,670 --> 00:36:00,730
<font color="#CCCCCC">you best believe if I'm gonna read Timur</font>

1064
00:35:59,619 --> 00:36:02,200
<font color="#E5E5E5">I'm gonna start using this sucker all</font>

1065
00:36:00,730 --> 00:36:04,359
the time because<font color="#CCCCCC"> a lot of</font><font color="#E5E5E5"> defenders are</font>

1066
00:36:02,200 --> 00:36:07,419
looking for /c as the anchor<font color="#E5E5E5"> but you can</font>

1067
00:36:04,359 --> 00:36:10,359
totally<font color="#E5E5E5"> replace that /c with a /r now it</font>

1068
00:36:07,420 --> 00:36:11,740
works<font color="#E5E5E5"> the way I remember</font><font color="#CCCCCC"> that CRV</font><font color="#E5E5E5"> CNR</font>

1069
00:36:10,359 --> 00:36:14,500
the command-line<font color="#E5E5E5"> arguments and</font><font color="#CCCCCC"> v is for</font>

1070
00:36:11,740 --> 00:36:17,589
variable expansion<font color="#E5E5E5"> this is also a</font>

1071
00:36:14,500 --> 00:36:18,640
tremendous<font color="#E5E5E5"> troll opportunity because in</font>

1072
00:36:17,589 --> 00:36:20,650
addition<font color="#CCCCCC"> to</font><font color="#E5E5E5"> be able to put any</font>

1073
00:36:18,640 --> 00:36:22,359
characters after<font color="#CCCCCC"> the</font><font color="#E5E5E5"> V that you want it</font>

1074
00:36:20,650 --> 00:36:24,010
<font color="#E5E5E5">actually lets you do something like</font><font color="#CCCCCC"> this</font>

1075
00:36:22,359 --> 00:36:27,880
<font color="#CCCCCC">you can put</font><font color="#E5E5E5"> any characters you want</font>

1076
00:36:24,010 --> 00:36:29,980
before<font color="#E5E5E5"> a</font><font color="#CCCCCC"> slash R or</font><font color="#E5E5E5"> slash see what about</font>

1077
00:36:27,880 --> 00:36:31,809
this what about this command<font color="#CCCCCC"> C echo path</font>

1078
00:36:29,980 --> 00:36:33,670
if you're an analyst scrolling through

1079
00:36:31,809 --> 00:36:35,680
events and see this someone's trying<font color="#E5E5E5"> to</font>

1080
00:36:33,670 --> 00:36:36,849
find the path variable<font color="#E5E5E5"> right but what</font>

1081
00:36:35,680 --> 00:36:40,020
about<font color="#CCCCCC"> all this white</font><font color="#E5E5E5"> space in this</font>

1082
00:36:36,849 --> 00:36:43,300
netstat command<font color="#E5E5E5"> way way way</font><font color="#CCCCCC"> down there</font>

1083
00:36:40,020 --> 00:36:45,250
backslash<font color="#E5E5E5"> c has</font><font color="#CCCCCC"> zero meaning ford slash</font>

1084
00:36:43,300 --> 00:36:47,020
<font color="#E5E5E5">c or four slash r's what actually has</font>

1085
00:36:45,250 --> 00:36:48,520
<font color="#E5E5E5">meaning so when you run this it's</font>

1086
00:36:47,020 --> 00:36:50,500
<font color="#CCCCCC">actually running</font><font color="#E5E5E5"> this command way down</font>

1087
00:36:48,520 --> 00:36:52,569
at the<font color="#CCCCCC"> end</font><font color="#E5E5E5"> so pay attention to</font><font color="#CCCCCC"> your</font>

1088
00:36:50,500 --> 00:36:54,400
<font color="#E5E5E5">horizontal scroll bars if you're</font><font color="#CCCCCC"> four in</font>

1089
00:36:52,569 --> 00:36:57,270
secatur<font color="#E5E5E5"> because the actual payload could</font>

1090
00:36:54,400 --> 00:37:00,280
<font color="#E5E5E5">be way down at the end anyways I digress</font>

1091
00:36:57,270 --> 00:37:01,750
<font color="#E5E5E5">for coding for loop</font><font color="#CCCCCC"> encoding</font><font color="#E5E5E5"> let's set</font>

1092
00:37:00,280 --> 00:37:03,099
the unique characters so we have<font color="#E5E5E5"> net</font>

1093
00:37:01,750 --> 00:37:04,329
<font color="#E5E5E5">stat ano let's take the unique</font>

1094
00:37:03,099 --> 00:37:06,700
characters and set it in this variable

1095
00:37:04,329 --> 00:37:07,869
unique then let's<font color="#E5E5E5"> create a for loop and</font>

1096
00:37:06,700 --> 00:37:10,328
we're<font color="#CCCCCC"> going to build</font><font color="#E5E5E5"> out the indexes of</font>

1097
00:37:07,869 --> 00:37:12,160
every<font color="#E5E5E5"> single character</font><font color="#CCCCCC"> in</font><font color="#E5E5E5"> the for loop</font>

1098
00:37:10,329 --> 00:37:14,710
<font color="#CCCCCC">then we're going</font><font color="#E5E5E5"> to end with some other</font>

1099
00:37:12,160 --> 00:37:15,910
character<font color="#E5E5E5"> that's kind of our bookend so</font>

1100
00:37:14,710 --> 00:37:17,530
then for<font color="#CCCCCC"> every iteration of</font><font color="#E5E5E5"> the for loop</font>

1101
00:37:15,910 --> 00:37:20,379
we're<font color="#CCCCCC"> going to take the substring of the</font>

1102
00:37:17,530 --> 00:37:22,359
unique variable of the index value<font color="#CCCCCC"> and</font>

1103
00:37:20,380 --> 00:37:24,700
we're going to append it onto this new

1104
00:37:22,359 --> 00:37:26,799
final value and then if we hit<font color="#E5E5E5"> that</font>

1105
00:37:24,700 --> 00:37:28,058
<font color="#CCCCCC">bookend we're</font><font color="#E5E5E5"> gonna call and execute the</font>

1106
00:37:26,799 --> 00:37:31,450
payload we created in memory

1107
00:37:28,059 --> 00:37:33,130
reassembling character by character<font color="#CCCCCC"> and</font>

1108
00:37:31,450 --> 00:37:35,078
there's an example<font color="#CCCCCC"> of</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> working now</font>

1109
00:37:33,130 --> 00:37:36,250
this has a lot<font color="#CCCCCC"> of standard output</font><font color="#E5E5E5"> that</font>

1110
00:37:35,079 --> 00:37:37,599
never<font color="#CCCCCC"> actually hits the</font><font color="#E5E5E5"> command line</font>

1111
00:37:36,250 --> 00:37:39,099
<font color="#CCCCCC">well if you're capturing the standard</font>

1112
00:37:37,599 --> 00:37:41,799
output<font color="#E5E5E5"> it does have a lot for every</font>

1113
00:37:39,099 --> 00:37:43,210
single<font color="#CCCCCC"> iteration of that for loop now if</font>

1114
00:37:41,799 --> 00:37:44,200
you want to increase<font color="#E5E5E5"> the level of office</font>

1115
00:37:43,210 --> 00:37:45,790
keishon you can start to put extra

1116
00:37:44,200 --> 00:37:47,828
characters in<font color="#E5E5E5"> those unique characters</font>

1117
00:37:45,790 --> 00:37:50,920
and then update all the<font color="#CCCCCC"> indexes</font><font color="#E5E5E5"> in the</font>

1118
00:37:47,829 --> 00:37:52,299
for loop<font color="#CCCCCC"> and</font><font color="#E5E5E5"> invoke gasification well if</font>

1119
00:37:50,920 --> 00:37:53,829
this is option you choose it'll also let

1120
00:37:52,299 --> 00:37:54,970
<font color="#E5E5E5">you add in all</font><font color="#CCCCCC"> the characters we talked</font>

1121
00:37:53,829 --> 00:37:56,920
<font color="#CCCCCC">about before</font><font color="#E5E5E5"> so you</font><font color="#CCCCCC"> can take your</font>

1122
00:37:54,970 --> 00:37:58,709
command randomize the case remove

1123
00:37:56,920 --> 00:38:00,810
<font color="#E5E5E5">whitespace add whitespace Commons</font>

1124
00:37:58,710 --> 00:38:02,099
<font color="#CCCCCC">Colon's</font><font color="#E5E5E5"> carrots parentheses and you</font><font color="#CCCCCC"> can</font>

1125
00:38:00,810 --> 00:38:06,029
do explicit signing on all the integers

1126
00:38:02,099 --> 00:38:07,770
<font color="#E5E5E5">so it gets</font><font color="#CCCCCC"> pretty crazy another troll</font>

1127
00:38:06,030 --> 00:38:09,510
portunity is in the tool you<font color="#CCCCCC"> can</font>

1128
00:38:07,770 --> 00:38:11,820
<font color="#E5E5E5">actually set a custom message in the</font>

1129
00:38:09,510 --> 00:38:13,470
unique environment<font color="#E5E5E5"> variable and then any</font>

1130
00:38:11,820 --> 00:38:14,849
characters that<font color="#CCCCCC"> you still need in their</font>

1131
00:38:13,470 --> 00:38:16,529
payload you<font color="#E5E5E5"> actually want to run it was</font>

1132
00:38:14,849 --> 00:38:18,300
add those on to the end<font color="#CCCCCC"> so</font><font color="#E5E5E5"> I thought</font>

1133
00:38:16,530 --> 00:38:19,980
it'd be nice<font color="#E5E5E5"> you know as defenders we</font>

1134
00:38:18,300 --> 00:38:21,150
enjoy good<font color="#E5E5E5"> humor and so on attackers</font>

1135
00:38:19,980 --> 00:38:22,619
kind of kind<font color="#E5E5E5"> of brighten our day a</font>

1136
00:38:21,150 --> 00:38:24,060
little<font color="#E5E5E5"> bit like not</font><font color="#CCCCCC"> with anything</font><font color="#E5E5E5"> mean</font>

1137
00:38:22,619 --> 00:38:25,650
but<font color="#CCCCCC"> just kind of like lyrics of a song</font>

1138
00:38:24,060 --> 00:38:28,920
<font color="#CCCCCC">here's a great opportunity</font><font color="#E5E5E5"> right</font><font color="#CCCCCC"> here</font><font color="#E5E5E5"> on</font>

1139
00:38:25,650 --> 00:38:31,020
the<font color="#E5E5E5"> command line so for</font><font color="#CCCCCC"> coding was</font>

1140
00:38:28,920 --> 00:38:32,670
number two option<font color="#E5E5E5"> number three is</font>

1141
00:38:31,020 --> 00:38:34,980
reversal<font color="#E5E5E5"> and it's very very similar</font>

1142
00:38:32,670 --> 00:38:36,390
except it's using this<font color="#CCCCCC"> /l on the for</font>

1143
00:38:34,980 --> 00:38:39,060
loop<font color="#CCCCCC"> so instead of having</font><font color="#E5E5E5"> to have this</font>

1144
00:38:36,390 --> 00:38:41,190
massive array of all these indexes<font color="#E5E5E5"> you</font>

1145
00:38:39,060 --> 00:38:43,470
just have the in index the beginning

1146
00:38:41,190 --> 00:38:45,330
index and the the decrement or increment

1147
00:38:43,470 --> 00:38:46,919
<font color="#CCCCCC">are between</font><font color="#E5E5E5"> the two so this case we've</font>

1148
00:38:45,330 --> 00:38:48,990
reversed<font color="#E5E5E5"> netstat</font><font color="#CCCCCC"> a no and we're</font>

1149
00:38:46,920 --> 00:38:51,140
decrementing<font color="#E5E5E5"> each value and adding it in</font>

1150
00:38:48,990 --> 00:38:53,520
you<font color="#E5E5E5"> can also add garbage characters</font><font color="#CCCCCC"> etc</font>

1151
00:38:51,140 --> 00:38:55,080
<font color="#E5E5E5">for all</font><font color="#CCCCCC"> the for</font><font color="#E5E5E5"> loop stuff when we have</font>

1152
00:38:53,520 --> 00:38:56,910
equals equals that's<font color="#E5E5E5"> actually doing a</font>

1153
00:38:55,080 --> 00:38:58,200
literal string comparison of the string

1154
00:38:56,910 --> 00:38:59,910
of a number<font color="#CCCCCC"> to the string of another</font>

1155
00:38:58,200 --> 00:39:02,700
number<font color="#E5E5E5"> but you can also use the the</font>

1156
00:38:59,910 --> 00:39:04,470
integer<font color="#CCCCCC"> the</font><font color="#E5E5E5"> compare op operator is</font><font color="#CCCCCC"> equal</font>

1157
00:39:02,700 --> 00:39:06,089
less than equal less<font color="#E5E5E5"> than greater than</font>

1158
00:39:04,470 --> 00:39:07,439
<font color="#E5E5E5">equal greater than and all these</font><font color="#CCCCCC"> options</font>

1159
00:39:06,089 --> 00:39:10,080
are randomly<font color="#CCCCCC"> selected every time you run</font>

1160
00:39:07,440 --> 00:39:13,619
<font color="#CCCCCC">the tool now you may wonder why do we</font>

1161
00:39:10,080 --> 00:39:15,270
have this this weird substring<font color="#E5E5E5"> on our</font>

1162
00:39:13,619 --> 00:39:17,220
<font color="#E5E5E5">final variable well the reason is is</font>

1163
00:39:15,270 --> 00:39:19,050
<font color="#CCCCCC">because in the for loop</font><font color="#E5E5E5"> that's the first</font>

1164
00:39:17,220 --> 00:39:20,819
time we use the variable final<font color="#E5E5E5"> so the</font>

1165
00:39:19,050 --> 00:39:23,460
very first<font color="#E5E5E5"> time it actually</font><font color="#CCCCCC"> interprets</font>

1166
00:39:20,820 --> 00:39:24,720
that as exclamation final exclamations

1167
00:39:23,460 --> 00:39:26,580
that's actually part<font color="#E5E5E5"> of our value so we</font>

1168
00:39:24,720 --> 00:39:27,899
need to chop that off and we can the

1169
00:39:26,580 --> 00:39:29,580
tool will do that either by<font color="#CCCCCC"> doing a</font>

1170
00:39:27,900 --> 00:39:32,690
positive<font color="#E5E5E5"> index a negative index</font>

1171
00:39:29,580 --> 00:39:35,490
substring<font color="#E5E5E5"> or doing a</font><font color="#CCCCCC"> replacement a</font>

1172
00:39:32,690 --> 00:39:36,930
replacement<font color="#E5E5E5"> option which is actually</font>

1173
00:39:35,490 --> 00:39:38,310
using star<font color="#CCCCCC"> so when you do string</font>

1174
00:39:36,930 --> 00:39:40,169
substitution and<font color="#E5E5E5"> you start with a star</font>

1175
00:39:38,310 --> 00:39:41,790
that means find the first example<font color="#E5E5E5"> of</font>

1176
00:39:40,170 --> 00:39:43,770
this<font color="#E5E5E5"> string</font><font color="#CCCCCC"> and replace that</font><font color="#E5E5E5"> and</font>

1177
00:39:41,790 --> 00:39:44,849
everything leading<font color="#E5E5E5"> up</font><font color="#CCCCCC"> to that with</font>

1178
00:39:43,770 --> 00:39:46,009
<font color="#E5E5E5">whatever's on the right side of the</font>

1179
00:39:44,849 --> 00:39:48,480
equal sign

1180
00:39:46,010 --> 00:39:50,520
the last one is fin coding this<font color="#E5E5E5"> is spin</font>

1181
00:39:48,480 --> 00:39:52,260
style<font color="#E5E5E5"> encoding and basically were going</font>

1182
00:39:50,520 --> 00:39:53,790
to take every random would choose

1183
00:39:52,260 --> 00:39:56,490
letters to swap out<font color="#E5E5E5"> so let's take every</font>

1184
00:39:53,790 --> 00:39:59,070
<font color="#CCCCCC">T and replace it with a capital Z let's</font>

1185
00:39:56,490 --> 00:40:01,709
then replace the capital<font color="#E5E5E5"> Z in memory</font>

1186
00:39:59,070 --> 00:40:03,810
<font color="#E5E5E5">with lowercase T and put</font><font color="#CCCCCC"> that in sub 1</font>

1187
00:40:01,710 --> 00:40:07,320
in<font color="#CCCCCC"> the most call sub one</font><font color="#E5E5E5"> let's go back</font>

1188
00:40:03,810 --> 00:40:08,759
again<font color="#E5E5E5"> let's replace the a is with</font><font color="#CCCCCC"> seven</font>

1189
00:40:07,320 --> 00:40:10,500
we're gonna add<font color="#CCCCCC"> another commander to</font>

1190
00:40:08,760 --> 00:40:11,730
play<font color="#E5E5E5"> seven SAS and memory and then we're</font>

1191
00:40:10,500 --> 00:40:12,240
gonna put that in sub<font color="#E5E5E5"> two and</font><font color="#CCCCCC"> we're</font>

1192
00:40:11,730 --> 00:40:14,490
gonna call

1193
00:40:12,240 --> 00:40:16,740
- we go layer upon layer upon<font color="#CCCCCC"> layer and</font>

1194
00:40:14,490 --> 00:40:18,149
stack<font color="#E5E5E5"> these orderings and this is this</font>

1195
00:40:16,740 --> 00:40:22,109
<font color="#E5E5E5">is</font><font color="#CCCCCC"> essentially what</font><font color="#E5E5E5"> I wrote in that</font>

1196
00:40:18,150 --> 00:40:24,839
<font color="#E5E5E5">crappy little POC last June except in</font>

1197
00:40:22,109 --> 00:40:26,640
the POC<font color="#CCCCCC"> I didn't know the things I knew</font>

1198
00:40:24,839 --> 00:40:28,470
after<font color="#E5E5E5"> this research so for example I</font>

1199
00:40:26,640 --> 00:40:30,299
didn't know about /v<font color="#CCCCCC"> so I don't know how</font>

1200
00:40:28,470 --> 00:40:31,890
to expand variables in the session<font color="#E5E5E5"> so I</font>

1201
00:40:30,300 --> 00:40:33,330
created a new child process for every

1202
00:40:31,890 --> 00:40:34,799
substitution so that tree was like

1203
00:40:33,330 --> 00:40:38,009
command command command command command

1204
00:40:34,800 --> 00:40:40,740
<font color="#E5E5E5">pretty noisy so I had a lot</font><font color="#CCCCCC"> of commands</font>

1205
00:40:38,010 --> 00:40:42,390
<font color="#CCCCCC">I also had a lot of escaping of</font>

1206
00:40:40,740 --> 00:40:44,098
ampersands to be able<font color="#CCCCCC"> to make each</font>

1207
00:40:42,390 --> 00:40:46,069
ampersand<font color="#E5E5E5"> only resolved on that layer so</font>

1208
00:40:44,099 --> 00:40:52,339
he had<font color="#CCCCCC"> one layer two layer three layer</font>

1209
00:40:46,070 --> 00:40:52,339
<font color="#E5E5E5">there were a lot</font><font color="#CCCCCC"> of carrots</font><font color="#E5E5E5"> all right</font>

1210
00:40:52,580 --> 00:40:57,810
let us<font color="#E5E5E5"> do a demo so invoked ossification</font>

1211
00:40:56,580 --> 00:40:59,130
if you've ever<font color="#CCCCCC"> used any</font><font color="#E5E5E5"> of the other</font>

1212
00:40:57,810 --> 00:41:00,859
office<font color="#E5E5E5"> k shinto</font><font color="#CCCCCC"> 'ls i've worked on</font><font color="#E5E5E5"> you</font>

1213
00:40:59,130 --> 00:41:03,690
know<font color="#CCCCCC"> i'm a big fan of animated ASCII art</font>

1214
00:41:00,859 --> 00:41:05,640
and so this is<font color="#E5E5E5"> just a little fun da</font>

1215
00:41:03,690 --> 00:41:11,730
sophistication going on<font color="#E5E5E5"> of office</font>

1216
00:41:05,640 --> 00:41:13,500
<font color="#CCCCCC">skating this command and</font><font color="#E5E5E5"> the menus are</font>

1217
00:41:11,730 --> 00:41:15,330
very similar<font color="#CCCCCC"> to all the other tools</font><font color="#E5E5E5"> you</font>

1218
00:41:13,500 --> 00:41:17,520
<font color="#CCCCCC">just hit tutorial or help and kind of</font>

1219
00:41:15,330 --> 00:41:18,598
get some<font color="#CCCCCC"> help along the way but</font>

1220
00:41:17,520 --> 00:41:20,700
<font color="#E5E5E5">basically you're able</font><font color="#CCCCCC"> to set your</font>

1221
00:41:18,599 --> 00:41:22,020
command<font color="#E5E5E5"> or set the path to a command and</font>

1222
00:41:20,700 --> 00:41:24,750
then you can also set the final binary

1223
00:41:22,020 --> 00:41:27,270
to be command<font color="#CCCCCC"> powershell or nothing</font><font color="#E5E5E5"> and</font>

1224
00:41:24,750 --> 00:41:28,710
it'll be command by default<font color="#E5E5E5"> so the</font><font color="#CCCCCC"> first</font>

1225
00:41:27,270 --> 00:41:30,240
section<font color="#CCCCCC"> is binary and this is just</font>

1226
00:41:28,710 --> 00:41:31,880
producing an obfuscated syntax to

1227
00:41:30,240 --> 00:41:34,200
produce a string<font color="#CCCCCC"> PowerShell or command</font>

1228
00:41:31,880 --> 00:41:36,060
so in this case it's using<font color="#CCCCCC"> an</font>

1229
00:41:34,200 --> 00:41:37,169
concatenated<font color="#E5E5E5"> substrings this</font><font color="#CCCCCC"> one's using</font>

1230
00:41:36,060 --> 00:41:39,089
<font color="#E5E5E5">the for loop with all the extra stuff</font>

1231
00:41:37,170 --> 00:41:41,369
<font color="#E5E5E5">added</font><font color="#CCCCCC"> i</font><font color="#E5E5E5"> basically made all the</font>

1232
00:41:39,089 --> 00:41:43,500
<font color="#E5E5E5">obfuscated kind of simple like</font><font color="#CCCCCC"> 1 2 or 3</font>

1233
00:41:41,369 --> 00:41:44,880
<font color="#E5E5E5">low medium high because there's like</font>

1234
00:41:43,500 --> 00:41:46,349
over<font color="#CCCCCC"> 20 different options</font><font color="#E5E5E5"> of obfuscation</font>

1235
00:41:44,880 --> 00:41:49,320
<font color="#CCCCCC">and</font><font color="#E5E5E5"> every single function</font><font color="#CCCCCC"> in</font><font color="#E5E5E5"> this</font>

1236
00:41:46,349 --> 00:41:50,790
project<font color="#CCCCCC"> so as a defender though i wanted</font>

1237
00:41:49,320 --> 00:41:52,950
<font color="#CCCCCC">to make those</font><font color="#E5E5E5"> more</font><font color="#CCCCCC"> usable and i'll show</font>

1238
00:41:50,790 --> 00:41:54,390
you<font color="#E5E5E5"> how</font><font color="#CCCCCC"> I did that in a second</font><font color="#E5E5E5"> encoding</font>

1239
00:41:52,950 --> 00:41:55,770
is the environment<font color="#CCCCCC"> variable encoding so</font>

1240
00:41:54,390 --> 00:41:57,359
you can set whatever command or commands

1241
00:41:55,770 --> 00:41:59,790
you want in this<font color="#E5E5E5"> case you're doing ping</font>

1242
00:41:57,359 --> 00:42:01,170
<font color="#CCCCCC">8</font><font color="#E5E5E5"> at 8 8 and then</font><font color="#CCCCCC"> you can always do</font><font color="#E5E5E5"> show</font>

1243
00:41:59,790 --> 00:42:03,300
and see what command you have set what

1244
00:42:01,170 --> 00:42:04,940
options you've run then<font color="#CCCCCC"> you can do</font>

1245
00:42:03,300 --> 00:42:07,589
environment variable encoding like that

1246
00:42:04,940 --> 00:42:08,970
<font color="#E5E5E5">again 1 2</font><font color="#CCCCCC"> &</font><font color="#E5E5E5"> 3 is</font><font color="#CCCCCC"> gonna</font><font color="#E5E5E5"> be more or less</font>

1247
00:42:07,589 --> 00:42:10,290
environment variables as well<font color="#E5E5E5"> as</font>

1248
00:42:08,970 --> 00:42:11,910
<font color="#E5E5E5">additional whitespace and explicit</font>

1249
00:42:10,290 --> 00:42:13,859
signing and if we run it we<font color="#CCCCCC"> can</font><font color="#E5E5E5"> see a</font>

1250
00:42:11,910 --> 00:42:16,740
results correctly<font color="#E5E5E5"> to ping</font><font color="#CCCCCC"> 8888</font>

1251
00:42:13,859 --> 00:42:18,180
but the<font color="#CCCCCC"> real meat of</font><font color="#E5E5E5"> this are the last</font><font color="#CCCCCC"> 4</font>

1252
00:42:16,740 --> 00:42:19,410
payload encoding things we just<font color="#E5E5E5"> finished</font>

1253
00:42:18,180 --> 00:42:22,740
going<font color="#E5E5E5"> through and that's in the payload</font>

1254
00:42:19,410 --> 00:42:24,990
<font color="#CCCCCC">section</font><font color="#E5E5E5"> so for this list at a larger</font>

1255
00:42:22,740 --> 00:42:25,950
command<font color="#CCCCCC"> list set a PowerShell</font><font color="#E5E5E5"> command so</font>

1256
00:42:24,990 --> 00:42:27,750
set command

1257
00:42:25,950 --> 00:42:29,189
<font color="#CCCCCC">powershell command</font><font color="#E5E5E5"> and then set final</font>

1258
00:42:27,750 --> 00:42:31,200
binary to be<font color="#E5E5E5"> powershell so it handles</font>

1259
00:42:29,190 --> 00:42:32,550
<font color="#CCCCCC">both layers of escaping</font><font color="#E5E5E5"> and we can goes</font>

1260
00:42:31,200 --> 00:42:34,589
to show again and<font color="#CCCCCC"> see</font><font color="#E5E5E5"> we've successfully</font>

1261
00:42:32,550 --> 00:42:36,690
set our command and<font color="#E5E5E5"> our final binary is</font>

1262
00:42:34,589 --> 00:42:39,210
going to be<font color="#CCCCCC"> PowerShell</font><font color="#E5E5E5"> so let's do</font>

1263
00:42:36,690 --> 00:42:40,829
concatenation<font color="#E5E5E5"> and we'll do option</font><font color="#CCCCCC"> 1</font><font color="#E5E5E5"> and</font>

1264
00:42:39,210 --> 00:42:43,380
it<font color="#E5E5E5"> will do basic concatenation with no</font>

1265
00:42:40,829 --> 00:42:46,260
extra crazy characters and we can see

1266
00:42:43,380 --> 00:42:49,530
<font color="#E5E5E5">that it works options 2 & 3</font><font color="#CCCCCC"> won't</font>

1267
00:42:46,260 --> 00:42:54,060
introduce some more<font color="#E5E5E5"> crazy characters</font><font color="#CCCCCC"> so</font>

1268
00:42:49,530 --> 00:42:55,589
if we do 3<font color="#CCCCCC"> looking a little</font><font color="#E5E5E5"> crazy let me</font>

1269
00:42:54,060 --> 00:42:58,740
copy<font color="#CCCCCC"> that to the clipboard and see that</font>

1270
00:42:55,589 --> 00:43:01,440
it still<font color="#CCCCCC"> works</font><font color="#E5E5E5"> I'm</font><font color="#CCCCCC"> gonna fast forward</font>

1271
00:42:58,740 --> 00:43:08,819
<font color="#CCCCCC">just a little bit one thing I want</font><font color="#E5E5E5"> to do</font>

1272
00:43:01,440 --> 00:43:10,530
<font color="#E5E5E5">there kind of test myself so the the</font>

1273
00:43:08,820 --> 00:43:11,940
last<font color="#E5E5E5"> one was just basically stacking all</font>

1274
00:43:10,530 --> 00:43:14,280
the<font color="#CCCCCC"> powershell obfuscation layers and</font>

1275
00:43:11,940 --> 00:43:16,380
<font color="#E5E5E5">then da sophistication so anyways</font><font color="#CCCCCC"> I'll</font>

1276
00:43:14,280 --> 00:43:17,609
skip that don't use this for<font color="#E5E5E5"> evil</font><font color="#CCCCCC"> the</font>

1277
00:43:16,380 --> 00:43:18,900
<font color="#E5E5E5">technique</font><font color="#CCCCCC"> ossification</font><font color="#E5E5E5"> all these details</font>

1278
00:43:17,609 --> 00:43:20,339
<font color="#CCCCCC">are in</font><font color="#E5E5E5"> the white paper basically look at</font>

1279
00:43:18,900 --> 00:43:20,960
<font color="#E5E5E5">these special characters</font><font color="#CCCCCC"> on</font><font color="#E5E5E5"> different</font>

1280
00:43:20,339 --> 00:43:23,520
<font color="#E5E5E5">places</font>

1281
00:43:20,960 --> 00:43:26,099
<font color="#E5E5E5">looking for the</font><font color="#CCCCCC"> SDC</font><font color="#E5E5E5"> the standard input</font>

1282
00:43:23,520 --> 00:43:27,240
<font color="#E5E5E5">artifacts</font><font color="#CCCCCC"> I</font><font color="#E5E5E5"> FOMO the fear of missing out</font>

1283
00:43:26,099 --> 00:43:29,790
<font color="#CCCCCC">so if you're a defender this</font><font color="#E5E5E5"> is the last</font>

1284
00:43:27,240 --> 00:43:31,020
slide<font color="#CCCCCC"> I released the full test harness</font>

1285
00:43:29,790 --> 00:43:32,369
for<font color="#E5E5E5"> this framework that</font><font color="#CCCCCC"> I used</font><font color="#E5E5E5"> for</font>

1286
00:43:31,020 --> 00:43:34,530
developing all my detection and I have

1287
00:43:32,369 --> 00:43:36,270
over<font color="#CCCCCC"> 4000 test payloads the obfuscated</font>

1288
00:43:34,530 --> 00:43:39,300
versions in text<font color="#E5E5E5"> files as well system on</font>

1289
00:43:36,270 --> 00:43:40,560
Eid<font color="#CCCCCC"> 1</font><font color="#E5E5E5"> and Security Eid 46 88 so you can</font>

1290
00:43:39,300 --> 00:43:42,660
start<font color="#E5E5E5"> to basically build your detection</font>

1291
00:43:40,560 --> 00:43:44,190
<font color="#CCCCCC">without</font><font color="#E5E5E5"> having to run any code so main</font>

1292
00:43:42,660 --> 00:43:46,200
takeaways attackers love obfuscating

1293
00:43:44,190 --> 00:43:47,819
stuff<font color="#E5E5E5"> it's effective command has crazy</font>

1294
00:43:46,200 --> 00:43:49,319
obfuscation capabilities and defenders

1295
00:43:47,819 --> 00:43:50,880
have to match attacker creativity with

1296
00:43:49,319 --> 00:43:54,119
our own layer or level<font color="#E5E5E5"> of creativity</font>

1297
00:43:50,880 --> 00:43:55,470
<font color="#CCCCCC">it's not easy</font><font color="#E5E5E5"> it's</font><font color="#CCCCCC"> very hard</font><font color="#E5E5E5"> and that's</font>

1298
00:43:54,119 --> 00:43:57,630
why I'm always happy<font color="#E5E5E5"> to</font><font color="#CCCCCC"> help people</font><font color="#E5E5E5"> if</font>

1299
00:43:55,470 --> 00:44:00,020
they have questions<font color="#E5E5E5"> so thank you</font><font color="#CCCCCC"> so</font><font color="#E5E5E5"> much</font>

1300
00:43:57,630 --> 00:44:00,020
<font color="#E5E5E5">for your time</font>

1301
00:44:00,290 --> 00:44:05,340
[Applause]

