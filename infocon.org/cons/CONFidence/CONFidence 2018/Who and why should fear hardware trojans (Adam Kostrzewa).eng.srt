1
00:00:01,880 --> 00:00:09,590
thank you very<font color="#E5E5E5"> much so let me start</font>

2
00:00:07,000 --> 00:00:11,150
<font color="#E5E5E5">maybe before</font><font color="#CCCCCC"> we will go to the main</font><font color="#E5E5E5"> part</font>

3
00:00:09,590 --> 00:00:13,730
of the presentation<font color="#CCCCCC"> a small disclaimer</font>

4
00:00:11,150 --> 00:00:15,919
<font color="#CCCCCC">that presented work disseminates results</font>

5
00:00:13,730 --> 00:00:18,740
of my own activities which were done

6
00:00:15,919 --> 00:00:21,830
using<font color="#E5E5E5"> solely on private resources</font>

7
00:00:18,740 --> 00:00:24,080
therefore<font color="#E5E5E5"> the opinions views presented</font>

8
00:00:21,830 --> 00:00:26,209
<font color="#CCCCCC">in this talk may not necessarily express</font>

9
00:00:24,080 --> 00:00:29,778
the opinion<font color="#E5E5E5"> and views and policy</font><font color="#CCCCCC"> of my</font>

10
00:00:26,210 --> 00:00:31,429
<font color="#E5E5E5">employer and also examples which you'll</font>

11
00:00:29,779 --> 00:00:33,950
see<font color="#E5E5E5"> in this talk are</font><font color="#CCCCCC"> for demonstration</font>

12
00:00:31,429 --> 00:00:40,039
purposes and<font color="#E5E5E5"> do not necessarily reflect</font>

13
00:00:33,950 --> 00:00:42,770
the<font color="#CCCCCC"> real-world product okay so the main</font>

14
00:00:40,039 --> 00:00:45,379
<font color="#E5E5E5">question of today's talk is can we trust</font>

15
00:00:42,770 --> 00:00:47,600
integrated circuits<font color="#E5E5E5"> and silicon chips</font>

16
00:00:45,379 --> 00:00:49,460
<font color="#E5E5E5">and to answer this question</font><font color="#CCCCCC"> we must</font>

17
00:00:47,600 --> 00:00:50,960
<font color="#E5E5E5">answer another question namely do we</font>

18
00:00:49,460 --> 00:00:52,789
have a choice because<font color="#CCCCCC"> due to</font><font color="#E5E5E5"> the</font>

19
00:00:50,960 --> 00:00:56,000
technological<font color="#E5E5E5"> barriers high production</font>

20
00:00:52,789 --> 00:00:58,370
<font color="#E5E5E5">costs we must count on</font><font color="#CCCCCC"> manufacturers</font>

21
00:00:56,000 --> 00:01:00,350
honesty and popularity<font color="#E5E5E5"> and there are</font>

22
00:00:58,370 --> 00:01:03,980
whole countries which<font color="#CCCCCC"> now don't have own</font>

23
00:01:00,350 --> 00:01:05,840
silicon production so and also there are

24
00:01:03,980 --> 00:01:07,729
<font color="#E5E5E5">there</font><font color="#CCCCCC"> there are many organizations and</font>

25
00:01:05,840 --> 00:01:09,250
<font color="#E5E5E5">companies which must buy integrated</font>

26
00:01:07,729 --> 00:01:13,759
circuits<font color="#E5E5E5"> because they cannot afford</font>

27
00:01:09,250 --> 00:01:15,530
production<font color="#E5E5E5"> so what they are doing is</font>

28
00:01:13,759 --> 00:01:17,960
they commonly<font color="#CCCCCC"> buy use high-volume</font>

29
00:01:15,530 --> 00:01:20,930
<font color="#E5E5E5">products from leading manufacturers</font>

30
00:01:17,960 --> 00:01:23,679
<font color="#E5E5E5">counting on the honesty on the fact that</font>

31
00:01:20,930 --> 00:01:26,900
<font color="#E5E5E5">due</font><font color="#CCCCCC"> to the popularity of those circuits</font>

32
00:01:23,680 --> 00:01:29,390
<font color="#CCCCCC">it will be easier to detect threads</font><font color="#E5E5E5"> and</font>

33
00:01:26,900 --> 00:01:32,270
<font color="#E5E5E5">the consequences will be severe this is</font>

34
00:01:29,390 --> 00:01:34,280
possible in the mainframe computing in

35
00:01:32,270 --> 00:01:36,619
telecommunication is more difficult<font color="#CCCCCC"> and</font>

36
00:01:34,280 --> 00:01:38,840
it's very<font color="#E5E5E5"> difficult in the embedded</font>

37
00:01:36,619 --> 00:01:40,390
<font color="#E5E5E5">world especially Internet of Things</font>

38
00:01:38,840 --> 00:01:44,240
where<font color="#E5E5E5"> you have a lot of small</font>

39
00:01:40,390 --> 00:01:46,340
manufacturers so already<font color="#E5E5E5"> this approach</font>

40
00:01:44,240 --> 00:01:50,960
buying from<font color="#E5E5E5"> a big producer</font><font color="#CCCCCC"> is not</font>

41
00:01:46,340 --> 00:01:53,060
available<font color="#E5E5E5"> to</font><font color="#CCCCCC"> everyone</font><font color="#E5E5E5"> and then but comes</font>

42
00:01:50,960 --> 00:01:55,789
the question<font color="#CCCCCC"> is there a reason for a</font>

43
00:01:53,060 --> 00:01:58,159
concern is<font color="#E5E5E5"> is equipment from a large</font>

44
00:01:55,790 --> 00:02:01,009
supplier safe<font color="#CCCCCC"> and what is the</font><font color="#E5E5E5"> threat</font>

45
00:01:58,159 --> 00:02:04,460
<font color="#E5E5E5">what it can do actually</font><font color="#CCCCCC"> if we'll</font><font color="#E5E5E5"> have</font>

46
00:02:01,009 --> 00:02:06,170
such a hardware<font color="#E5E5E5"> Trojan so is it worth to</font>

47
00:02:04,460 --> 00:02:09,709
get a closer look<font color="#CCCCCC"> so this presentation</font>

48
00:02:06,170 --> 00:02:11,870
has fought as an<font color="#E5E5E5"> introduction to the</font>

49
00:02:09,710 --> 00:02:14,240
domain assuming<font color="#CCCCCC"> that you have mainly a</font>

50
00:02:11,870 --> 00:02:15,800
software background<font color="#E5E5E5"> so it will show</font><font color="#CCCCCC"> you</font>

51
00:02:14,240 --> 00:02:17,690
actually

52
00:02:15,800 --> 00:02:21,860
the topics the introduction what can be

53
00:02:17,690 --> 00:02:26,750
done<font color="#E5E5E5"> rather than how it precisely</font><font color="#CCCCCC"> is</font>

54
00:02:21,860 --> 00:02:30,980
done<font color="#E5E5E5"> to give you a broad</font><font color="#CCCCCC"> overview</font><font color="#E5E5E5"> okay</font>

55
00:02:26,750 --> 00:02:32,870
so before<font color="#E5E5E5"> we</font><font color="#CCCCCC"> start just</font><font color="#E5E5E5"> to check that we</font>

56
00:02:30,980 --> 00:02:34,579
are<font color="#E5E5E5"> on the same page what is the</font>

57
00:02:32,870 --> 00:02:37,220
hardware Trojan<font color="#E5E5E5"> Hardware Trojan is a</font>

58
00:02:34,580 --> 00:02:39,920
definitely it's a function<font color="#E5E5E5"> of a hardware</font>

59
00:02:37,220 --> 00:02:42,830
<font color="#E5E5E5">component hidden from the user which can</font>

60
00:02:39,920 --> 00:02:45,410
add remove<font color="#E5E5E5"> or modify the functionality</font>

61
00:02:42,830 --> 00:02:47,810
of hardware component and therefore read

62
00:02:45,410 --> 00:02:49,549
reduce its reliability<font color="#E5E5E5"> or create a</font>

63
00:02:47,810 --> 00:02:51,590
potential threat<font color="#E5E5E5"> so here we have a</font>

64
00:02:49,550 --> 00:02:54,170
simple signal which is an inverter<font color="#E5E5E5"> and</font>

65
00:02:51,590 --> 00:02:57,530
in order<font color="#CCCCCC"> to introduce</font><font color="#E5E5E5"> in this circuit</font>

66
00:02:54,170 --> 00:02:59,780
<font color="#E5E5E5">Hardware Trojan in integrated circuit</font>

67
00:02:57,530 --> 00:03:02,030
would have to<font color="#E5E5E5"> firstly do the payload</font>

68
00:02:59,780 --> 00:03:04,160
modification which means that we<font color="#E5E5E5"> are</font>

69
00:03:02,030 --> 00:03:08,540
modifying the circuit here<font color="#CCCCCC"> we are</font><font color="#E5E5E5"> adding</font>

70
00:03:04,160 --> 00:03:11,270
<font color="#E5E5E5">and gate and next we are adding a</font>

71
00:03:08,540 --> 00:03:13,910
trigger so it's a signal activating the

72
00:03:11,270 --> 00:03:18,230
payload<font color="#E5E5E5"> triggers can be combinational</font>

73
00:03:13,910 --> 00:03:20,359
sequential as as you want<font color="#E5E5E5"> but all</font><font color="#CCCCCC"> in all</font>

74
00:03:18,230 --> 00:03:21,950
<font color="#E5E5E5">it's modifying the signal which is going</font>

75
00:03:20,360 --> 00:03:26,060
to inverter and we can get different

76
00:03:21,950 --> 00:03:27,920
<font color="#E5E5E5">result</font><font color="#CCCCCC"> than</font><font color="#E5E5E5"> we thought</font><font color="#CCCCCC"> will get so what</font>

77
00:03:26,060 --> 00:03:29,750
<font color="#E5E5E5">are the similarities to software Trojans</font>

78
00:03:27,920 --> 00:03:32,059
first of all<font color="#E5E5E5"> its intention its</font>

79
00:03:29,750 --> 00:03:33,740
infiltration exfiltration so<font color="#E5E5E5"> either to</font>

80
00:03:32,060 --> 00:03:36,950
get the data out<font color="#CCCCCC"> of the company either</font>

81
00:03:33,740 --> 00:03:38,600
to<font color="#CCCCCC"> allow easier attack and also</font><font color="#E5E5E5"> their</font>

82
00:03:36,950 --> 00:03:41,089
designers would<font color="#E5E5E5"> like to hide this</font>

83
00:03:38,600 --> 00:03:43,940
<font color="#CCCCCC">functionality from from from</font><font color="#E5E5E5"> other users</font>

84
00:03:41,090 --> 00:03:46,130
<font color="#CCCCCC">so it's seldom activation</font><font color="#E5E5E5"> however there</font>

85
00:03:43,940 --> 00:03:48,650
are very strong differences

86
00:03:46,130 --> 00:03:50,900
first of all<font color="#CCCCCC"> Hardware</font><font color="#E5E5E5"> Trojans in</font>

87
00:03:48,650 --> 00:03:54,230
integrated circuits<font color="#E5E5E5"> cannot be removed</font>

88
00:03:50,900 --> 00:03:57,980
post deployment<font color="#E5E5E5"> so</font><font color="#CCCCCC"> then possibilities of</font>

89
00:03:54,230 --> 00:04:00,350
updates<font color="#E5E5E5"> of circuits are</font><font color="#CCCCCC"> very limited</font>

90
00:03:57,980 --> 00:04:02,660
you have<font color="#CCCCCC"> micro coded machines but but</font>

91
00:04:00,350 --> 00:04:07,880
<font color="#E5E5E5">this is definitely</font><font color="#CCCCCC"> very expensive having</font>

92
00:04:02,660 --> 00:04:09,320
very<font color="#CCCCCC"> limited approach</font><font color="#E5E5E5"> later on those</font>

93
00:04:07,880 --> 00:04:10,940
Trojans do not spread

94
00:04:09,320 --> 00:04:13,130
they must be<font color="#E5E5E5"> manufacture which means</font>

95
00:04:10,940 --> 00:04:15,910
either<font color="#E5E5E5"> you have an equipment which has</font><font color="#CCCCCC"> a</font>

96
00:04:13,130 --> 00:04:18,589
hardware Trojan<font color="#E5E5E5"> ID either you don't and</font>

97
00:04:15,910 --> 00:04:21,738
once you have<font color="#E5E5E5"> it one it's on and on on</font>

98
00:04:18,589 --> 00:04:23,479
<font color="#E5E5E5">the</font><font color="#CCCCCC"> market</font><font color="#E5E5E5"> it will</font><font color="#CCCCCC"> be always there you</font>

99
00:04:21,738 --> 00:04:26,659
cannot remove it with an update

100
00:04:23,480 --> 00:04:29,520
so manufacturer has a<font color="#E5E5E5"> problem and then</font>

101
00:04:26,660 --> 00:04:32,040
we have high production costs

102
00:04:29,520 --> 00:04:34,200
in terms of<font color="#CCCCCC"> equipment and then</font><font color="#E5E5E5"> a skilled</font>

103
00:04:32,040 --> 00:04:36,960
<font color="#CCCCCC">labor</font><font color="#E5E5E5"> but understood as an amount of</font>

104
00:04:34,200 --> 00:04:40,530
money<font color="#CCCCCC"> which you</font><font color="#E5E5E5"> need</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> do to train this</font>

105
00:04:36,960 --> 00:04:42,840
these<font color="#E5E5E5"> people so don't</font><font color="#CCCCCC"> forget also</font><font color="#E5E5E5"> about</font>

106
00:04:40,530 --> 00:04:46,140
the most popular option where<font color="#CCCCCC"> we have</font>

107
00:04:42,840 --> 00:04:48,659
which is it's still<font color="#E5E5E5"> the hardware</font>

108
00:04:46,140 --> 00:04:50,520
<font color="#E5E5E5">software</font><font color="#CCCCCC"> core design so some parts of</font>

109
00:04:48,660 --> 00:04:53,610
such a<font color="#E5E5E5"> Trojan are done in the hardware</font>

110
00:04:50,520 --> 00:04:55,349
some are done in software<font color="#E5E5E5"> so just a</font>

111
00:04:53,610 --> 00:04:57,750
<font color="#E5E5E5">brief review of the history</font><font color="#CCCCCC"> the history</font>

112
00:04:55,350 --> 00:04:59,850
of<font color="#CCCCCC"> hardware Trojan started in 2005</font><font color="#E5E5E5"> with</font>

113
00:04:57,750 --> 00:05:03,420
this famous report from Department<font color="#E5E5E5"> of</font>

114
00:04:59,850 --> 00:05:05,670
Defense<font color="#CCCCCC"> which claimed that there</font><font color="#E5E5E5"> is a</font>

115
00:05:03,420 --> 00:05:08,100
<font color="#E5E5E5">possibility of modification of</font>

116
00:05:05,670 --> 00:05:11,460
integrated circuit in the fab in the

117
00:05:08,100 --> 00:05:15,120
<font color="#E5E5E5">silicon fabrication unit so it's at the</font>

118
00:05:11,460 --> 00:05:17,130
very<font color="#E5E5E5"> end of the chain and here is the</font>

119
00:05:15,120 --> 00:05:19,260
<font color="#CCCCCC">number of publications</font><font color="#E5E5E5"> with towards</font>

120
00:05:17,130 --> 00:05:23,040
<font color="#CCCCCC">Hardware</font><font color="#E5E5E5"> Trojans in Google Scholar as</font>

121
00:05:19,260 --> 00:05:25,800
you may see it's skyrocketing<font color="#E5E5E5"> in between</font>

122
00:05:23,040 --> 00:05:27,450
we've got Snowden<font color="#CCCCCC"> offer</font><font color="#E5E5E5"> in 2014 which</font>

123
00:05:25,800 --> 00:05:30,540
showed that<font color="#E5E5E5"> actually there are big</font>

124
00:05:27,450 --> 00:05:33,240
organization<font color="#E5E5E5"> and institutions</font><font color="#CCCCCC"> like NSA</font>

125
00:05:30,540 --> 00:05:38,070
which are very interested in<font color="#E5E5E5"> this kind</font>

126
00:05:33,240 --> 00:05:41,880
<font color="#E5E5E5">of threats so we have last year more</font>

127
00:05:38,070 --> 00:05:43,980
than<font color="#CCCCCC"> two 2006 600</font><font color="#E5E5E5"> publications</font>

128
00:05:41,880 --> 00:05:46,770
concerning<font color="#CCCCCC"> hardware Trojan so it's a</font>

129
00:05:43,980 --> 00:05:49,820
definitely<font color="#E5E5E5"> hot topic so maybe this is</font>

130
00:05:46,770 --> 00:05:53,370
<font color="#CCCCCC">the first reason</font><font color="#E5E5E5"> to get a look on it</font>

131
00:05:49,820 --> 00:05:56,370
those<font color="#CCCCCC"> 2,500 publication has proven</font>

132
00:05:53,370 --> 00:05:59,220
actually that there is a wide<font color="#CCCCCC"> variety of</font>

133
00:05:56,370 --> 00:06:02,310
possible<font color="#CCCCCC"> Trojan deployments</font><font color="#E5E5E5"> so you may</font>

134
00:05:59,220 --> 00:06:04,980
have different<font color="#E5E5E5"> size you can modify</font>

135
00:06:02,310 --> 00:06:08,100
transistors wires<font color="#E5E5E5"> if they can be big you</font>

136
00:06:04,980 --> 00:06:10,440
can modify<font color="#E5E5E5"> whole</font><font color="#CCCCCC"> eyepiece gates they can</font>

137
00:06:08,100 --> 00:06:12,419
be tightly distributed on a chip so<font color="#CCCCCC"> in</font>

138
00:06:10,440 --> 00:06:15,210
the same<font color="#E5E5E5"> place they can be spread along</font>

139
00:06:12,419 --> 00:06:17,909
the<font color="#CCCCCC"> chip</font><font color="#E5E5E5"> in different places to</font><font color="#CCCCCC"> make it</font>

140
00:06:15,210 --> 00:06:19,950
harder to<font color="#E5E5E5"> find them they may modify the</font>

141
00:06:17,910 --> 00:06:23,010
<font color="#E5E5E5">layout but they do not necessarily have</font>

142
00:06:19,950 --> 00:06:24,810
<font color="#E5E5E5">to same width trigger so activation they</font>

143
00:06:23,010 --> 00:06:27,870
can be externally activated for some

144
00:06:24,810 --> 00:06:31,080
radio connection<font color="#CCCCCC"> or they can be</font>

145
00:06:27,870 --> 00:06:34,169
internally activated so<font color="#E5E5E5"> by set of</font>

146
00:06:31,080 --> 00:06:36,599
conditions it can be sensor data if a

147
00:06:34,169 --> 00:06:41,490
chip has sensors or logic internal state

148
00:06:36,600 --> 00:06:42,520
clock counter<font color="#E5E5E5"> some input</font><font color="#CCCCCC"> instruction so</font>

149
00:06:41,490 --> 00:06:45,819
<font color="#CCCCCC">where</font>

150
00:06:42,520 --> 00:06:47,680
<font color="#E5E5E5">go from here in order to</font><font color="#CCCCCC"> give you a</font>

151
00:06:45,819 --> 00:06:49,780
hands-on<font color="#CCCCCC"> experience to</font><font color="#E5E5E5"> see</font><font color="#CCCCCC"> how</font>

152
00:06:47,680 --> 00:06:51,849
complicated such a modification<font color="#E5E5E5"> of</font>

153
00:06:49,780 --> 00:06:54,239
integrated circuit can be<font color="#E5E5E5"> we'll start</font>

154
00:06:51,849 --> 00:06:58,120
with a<font color="#CCCCCC"> cpu example with a live demo</font><font color="#E5E5E5"> and</font>

155
00:06:54,240 --> 00:07:00,550
later on I will talk about<font color="#E5E5E5"> where and</font>

156
00:06:58,120 --> 00:07:01,960
when can such a modification be

157
00:07:00,550 --> 00:07:04,840
introduced in the process of the chip

158
00:07:01,960 --> 00:07:07,690
manufacturing<font color="#E5E5E5"> and finally</font><font color="#CCCCCC"> we'll</font><font color="#E5E5E5"> talk</font>

159
00:07:04,840 --> 00:07:11,919
briefly about methods and of<font color="#CCCCCC"> Defense of</font>

160
00:07:07,690 --> 00:07:13,539
detection<font color="#CCCCCC"> and their</font><font color="#E5E5E5"> costs so just a</font>

161
00:07:11,919 --> 00:07:15,880
brief<font color="#E5E5E5"> review I'm sure that you all</font><font color="#CCCCCC"> know</font>

162
00:07:13,539 --> 00:07:19,050
but all<font color="#CCCCCC"> our software security is based</font>

163
00:07:15,880 --> 00:07:21,610
<font color="#E5E5E5">on one basic assumption namely that the</font>

164
00:07:19,050 --> 00:07:24,759
operation<font color="#E5E5E5"> of an underlying processor and</font>

165
00:07:21,610 --> 00:07:26,889
<font color="#CCCCCC">its hardware is predefined and and it's</font>

166
00:07:24,759 --> 00:07:29,590
<font color="#E5E5E5">working according</font><font color="#CCCCCC"> to a strict</font>

167
00:07:26,889 --> 00:07:32,889
specification<font color="#E5E5E5"> and a set of predefined</font>

168
00:07:29,590 --> 00:07:35,109
rules<font color="#E5E5E5"> so commonly applied is prot</font>

169
00:07:32,889 --> 00:07:37,270
protection<font color="#E5E5E5"> or protection domains which</font>

170
00:07:35,110 --> 00:07:39,130
were introduced in 70s<font color="#E5E5E5"> already so it's</font>

171
00:07:37,270 --> 00:07:41,469
50 years<font color="#E5E5E5"> in in</font><font color="#CCCCCC"> multix which is</font>

172
00:07:39,130 --> 00:07:43,150
predecessor of<font color="#CCCCCC"> Unix</font><font color="#E5E5E5"> so we have at least</font>

173
00:07:41,469 --> 00:07:46,090
<font color="#E5E5E5">two modes of processor work its</font>

174
00:07:43,150 --> 00:07:48,789
hypervisor<font color="#CCCCCC"> and user or kernel kernel and</font>

175
00:07:46,090 --> 00:07:51,060
<font color="#E5E5E5">user mode in hypervisor mode kernel has</font>

176
00:07:48,789 --> 00:07:53,889
<font color="#E5E5E5">access to all</font><font color="#CCCCCC"> comments and addresses</font><font color="#E5E5E5"> in</font>

177
00:07:51,060 --> 00:07:55,630
user mode<font color="#CCCCCC"> it has only access</font><font color="#E5E5E5"> to a subset</font>

178
00:07:53,889 --> 00:07:59,199
<font color="#CCCCCC">of commands and addresses</font><font color="#E5E5E5"> and the</font>

179
00:07:55,630 --> 00:08:01,389
transition between<font color="#E5E5E5"> those modes</font><font color="#CCCCCC"> as can</font>

180
00:07:59,199 --> 00:08:02,830
happen<font color="#CCCCCC"> only</font><font color="#E5E5E5"> according to</font><font color="#CCCCCC"> a predefined</font>

181
00:08:01,389 --> 00:08:08,139
and strictly defined set<font color="#E5E5E5"> of rules</font>

182
00:08:02,830 --> 00:08:10,448
<font color="#E5E5E5">Siskel's interrupts and the holy grail</font>

183
00:08:08,139 --> 00:08:12,430
<font color="#CCCCCC">of the majority of exploits is to get</font>

184
00:08:10,449 --> 00:08:16,960
into the kernel<font color="#E5E5E5"> mode to have an access</font>

185
00:08:12,430 --> 00:08:19,210
<font color="#CCCCCC">to two whole space so I will</font><font color="#E5E5E5"> show you an</font>

186
00:08:16,960 --> 00:08:23,080
example of<font color="#E5E5E5"> SPARC architecture</font><font color="#CCCCCC"> how it is</font>

187
00:08:19,210 --> 00:08:25,239
defined<font color="#E5E5E5"> in the manuals so you've got</font>

188
00:08:23,080 --> 00:08:27,279
privileged commands which are<font color="#E5E5E5"> which can</font>

189
00:08:25,240 --> 00:08:29,979
<font color="#CCCCCC">be assembly comments which can be only</font>

190
00:08:27,279 --> 00:08:31,870
executed in the<font color="#E5E5E5"> in the hypervisor mode</font>

191
00:08:29,979 --> 00:08:34,838
when<font color="#CCCCCC"> the processor in hypervisor mode</font>

192
00:08:31,870 --> 00:08:37,599
<font color="#E5E5E5">you have</font><font color="#CCCCCC"> here in SPARC case</font><font color="#E5E5E5"> supervisor</font>

193
00:08:34,839 --> 00:08:40,120
mode and user mode<font color="#E5E5E5"> defined already in</font>

194
00:08:37,599 --> 00:08:43,959
the manual<font color="#E5E5E5"> and here you have an excerpt</font>

195
00:08:40,120 --> 00:08:46,149
from instruction set architecture<font color="#CCCCCC"> where</font>

196
00:08:43,958 --> 00:08:48,339
some commands<font color="#E5E5E5"> have a small cross next</font><font color="#CCCCCC"> to</font>

197
00:08:46,149 --> 00:08:50,290
<font color="#CCCCCC">it which means</font><font color="#E5E5E5"> they are privileged and I</font>

198
00:08:48,339 --> 00:08:52,420
selected two of you this<font color="#CCCCCC"> is a problem</font>

199
00:08:50,290 --> 00:08:54,189
<font color="#CCCCCC">maybe</font><font color="#E5E5E5"> you can see them but this is read</font>

200
00:08:52,420 --> 00:08:56,140
processor state register and the right

201
00:08:54,190 --> 00:08:58,150
processor state register this

202
00:08:56,140 --> 00:09:00,850
register contains the<font color="#CCCCCC"> information which</font>

203
00:08:58,150 --> 00:09:05,170
mode the processor<font color="#E5E5E5"> actually</font><font color="#CCCCCC"> is and both</font>

204
00:09:00,850 --> 00:09:07,270
comments<font color="#E5E5E5"> are available only in</font>

205
00:09:05,170 --> 00:09:09,550
supervisor mode<font color="#E5E5E5"> which means that the</font>

206
00:09:07,270 --> 00:09:11,470
<font color="#E5E5E5">user cannot change the value</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> this</font>

207
00:09:09,550 --> 00:09:13,329
<font color="#E5E5E5">register when he's in the user mode it</font>

208
00:09:11,470 --> 00:09:14,860
must go<font color="#E5E5E5"> through this</font><font color="#CCCCCC"> hardware software</font>

209
00:09:13,330 --> 00:09:16,380
<font color="#CCCCCC">co.design procedure of switching the</font>

210
00:09:14,860 --> 00:09:19,840
<font color="#E5E5E5">mode</font>

211
00:09:16,380 --> 00:09:22,030
so then how in order<font color="#E5E5E5"> to explain how</font><font color="#CCCCCC"> this</font>

212
00:09:19,840 --> 00:09:24,670
<font color="#CCCCCC">security mechanism which we would like</font>

213
00:09:22,030 --> 00:09:27,670
<font color="#CCCCCC">to elaborate</font><font color="#E5E5E5"> is implemented we have to</font>

214
00:09:24,670 --> 00:09:30,219
<font color="#E5E5E5">review very briefly the</font><font color="#CCCCCC"> how processor is</font>

215
00:09:27,670 --> 00:09:34,270
processing the comments<font color="#E5E5E5"> usually we have</font>

216
00:09:30,220 --> 00:09:36,070
this risk pipeline<font color="#E5E5E5"> a pipeline with five</font>

217
00:09:34,270 --> 00:09:37,689
stages<font color="#CCCCCC"> of</font><font color="#E5E5E5"> comment processing its</font>

218
00:09:36,070 --> 00:09:41,410
instruction fetch instruction<font color="#CCCCCC"> decode</font>

219
00:09:37,690 --> 00:09:44,560
execute memory<font color="#E5E5E5"> and</font><font color="#CCCCCC"> write</font><font color="#E5E5E5"> back they have</font>

220
00:09:41,410 --> 00:09:46,689
a counterparts in data path<font color="#E5E5E5"> it's they</font>

221
00:09:44,560 --> 00:09:49,510
are using instruction<font color="#E5E5E5"> memory register</font>

222
00:09:46,690 --> 00:09:52,810
<font color="#E5E5E5">although you need data memory and</font>

223
00:09:49,510 --> 00:09:54,700
registers once again<font color="#CCCCCC"> and moreover we</font>

224
00:09:52,810 --> 00:09:57,520
have<font color="#E5E5E5"> a pipeline which means that all the</font>

225
00:09:54,700 --> 00:10:01,000
stages<font color="#E5E5E5"> are executed at the same time but</font>

226
00:09:57,520 --> 00:10:02,680
<font color="#CCCCCC">for different instructions so then when</font>

227
00:10:01,000 --> 00:10:06,100
<font color="#CCCCCC">we are implementing</font><font color="#E5E5E5"> this</font><font color="#CCCCCC"> Hardware</font>

228
00:10:02,680 --> 00:10:06,729
<font color="#E5E5E5">security mechanism on each stage</font><font color="#CCCCCC"> what</font>

229
00:10:06,100 --> 00:10:08,410
happens

230
00:10:06,730 --> 00:10:10,600
so each stage has<font color="#CCCCCC"> a different</font>

231
00:10:08,410 --> 00:10:13,150
instruction<font color="#E5E5E5"> but what we are</font><font color="#CCCCCC"> doing is</font>

232
00:10:10,600 --> 00:10:16,780
actually<font color="#E5E5E5"> this is a big while loop done</font>

233
00:10:13,150 --> 00:10:19,150
in<font color="#E5E5E5"> Hardware where we are firstly trying</font>

234
00:10:16,780 --> 00:10:22,329
to decode<font color="#E5E5E5"> the address of instruction</font>

235
00:10:19,150 --> 00:10:24,819
from instruction memory<font color="#CCCCCC"> and</font><font color="#E5E5E5"> if we see</font>

236
00:10:22,330 --> 00:10:26,380
<font color="#E5E5E5">that processor is in the wrong</font><font color="#CCCCCC"> state we</font>

237
00:10:24,820 --> 00:10:29,080
have an exception we have a trap

238
00:10:26,380 --> 00:10:31,360
interrupt<font color="#E5E5E5"> the same if we are decoding</font>

239
00:10:29,080 --> 00:10:33,540
the opcode of the instruction<font color="#E5E5E5"> we are</font>

240
00:10:31,360 --> 00:10:36,520
<font color="#E5E5E5">checking in hardware this is a big if</font>

241
00:10:33,540 --> 00:10:38,349
realized<font color="#CCCCCC"> with transistors if this</font>

242
00:10:36,520 --> 00:10:40,000
instruction<font color="#E5E5E5"> is legal if this</font><font color="#CCCCCC"> instruction</font>

243
00:10:38,350 --> 00:10:44,020
is<font color="#CCCCCC"> available in this</font><font color="#E5E5E5"> mode</font><font color="#CCCCCC"> of the</font>

244
00:10:40,000 --> 00:10:46,390
processor<font color="#E5E5E5"> and so on and so forth</font><font color="#CCCCCC"> so here</font>

245
00:10:44,020 --> 00:10:48,340
you<font color="#CCCCCC"> see an example</font><font color="#E5E5E5"> from</font><font color="#CCCCCC"> LAN</font><font color="#E5E5E5"> free spark</font>

246
00:10:46,390 --> 00:10:52,569
processor open source VHDL

247
00:10:48,340 --> 00:10:54,370
implementation and and here you see<font color="#E5E5E5"> that</font>

248
00:10:52,570 --> 00:10:57,390
we have some<font color="#CCCCCC"> instructions which</font><font color="#E5E5E5"> are</font>

249
00:10:54,370 --> 00:11:00,160
available in user mode<font color="#CCCCCC"> and then you have</font>

250
00:10:57,390 --> 00:11:02,319
here they are decoding the opcode so

251
00:11:00,160 --> 00:11:04,089
when the instruction is in<font color="#E5E5E5"> the user mode</font>

252
00:11:02,320 --> 00:11:06,370
they are not doing<font color="#E5E5E5"> anything but when we</font>

253
00:11:04,090 --> 00:11:09,250
have instruction which is<font color="#E5E5E5"> privileged</font>

254
00:11:06,370 --> 00:11:09,640
they are checking if the processor is in

255
00:11:09,250 --> 00:11:11,260
the<font color="#CCCCCC"> core</font>

256
00:11:09,640 --> 00:11:15,970
mode and if it's<font color="#E5E5E5"> not in the correct mode</font>

257
00:11:11,260 --> 00:11:18,189
you have<font color="#E5E5E5"> Trump so when we would like to</font>

258
00:11:15,970 --> 00:11:20,410
<font color="#CCCCCC">implement the</font><font color="#E5E5E5"> Trojan what would be</font><font color="#CCCCCC"> our</font>

259
00:11:18,190 --> 00:11:22,000
payload in this case we would<font color="#E5E5E5"> like</font><font color="#CCCCCC"> to</font>

260
00:11:20,410 --> 00:11:24,310
change the value<font color="#E5E5E5"> of processor state</font>

261
00:11:22,000 --> 00:11:27,070
register and switch to<font color="#E5E5E5"> the hypervisor</font>

262
00:11:24,310 --> 00:11:29,709
mode<font color="#E5E5E5"> however the trigger should be</font>

263
00:11:27,070 --> 00:11:31,300
<font color="#E5E5E5">available in the user mode so this</font>

264
00:11:29,710 --> 00:11:33,300
should be<font color="#CCCCCC"> selected</font><font color="#E5E5E5"> assembly</font><font color="#CCCCCC"> command</font>

265
00:11:31,300 --> 00:11:35,680
which is<font color="#E5E5E5"> available in the user mode and</font>

266
00:11:33,300 --> 00:11:38,380
<font color="#E5E5E5">we'll select the topper</font><font color="#CCCCCC"> and so it can be</font>

267
00:11:35,680 --> 00:11:40,239
<font color="#CCCCCC">ad</font><font color="#E5E5E5"> which is giving us the result</font><font color="#CCCCCC"> 8</font><font color="#E5E5E5"> 7 8 7</font>

268
00:11:38,380 --> 00:11:44,710
<font color="#E5E5E5">8 7 this</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> for the sake of simplicity</font>

269
00:11:40,240 --> 00:11:46,060
of<font color="#CCCCCC"> this talk</font><font color="#E5E5E5"> so here we have example of</font>

270
00:11:44,710 --> 00:11:47,920
hardware software code design so there

271
00:11:46,060 --> 00:11:52,359
<font color="#E5E5E5">is a software code which is triggering a</font>

272
00:11:47,920 --> 00:11:55,180
<font color="#E5E5E5">payload done in hardware so this is a</font>

273
00:11:52,360 --> 00:11:58,210
payload which was published in my

274
00:11:55,180 --> 00:12:01,449
article<font color="#E5E5E5"> from the polling conference</font><font color="#CCCCCC"> it's</font>

275
00:11:58,210 --> 00:12:04,360
a fragment<font color="#E5E5E5"> of the other unit as you</font><font color="#CCCCCC"> see</font>

276
00:12:01,450 --> 00:12:06,430
<font color="#CCCCCC">a unit has an access to the special</font>

277
00:12:04,360 --> 00:12:09,730
register types so also<font color="#E5E5E5"> the control</font>

278
00:12:06,430 --> 00:12:11,589
register<font color="#E5E5E5"> it's very simple it's only free</font>

279
00:12:09,730 --> 00:12:13,510
liner<font color="#CCCCCC"> we are just</font><font color="#E5E5E5"> checking</font>

280
00:12:11,590 --> 00:12:15,730
what was the<font color="#E5E5E5"> result of the addition done</font>

281
00:12:13,510 --> 00:12:18,370
by the<font color="#CCCCCC"> hollow unit and we are changing</font>

282
00:12:15,730 --> 00:12:20,140
the state of the register<font color="#CCCCCC"> so as you see</font>

283
00:12:18,370 --> 00:12:21,970
those<font color="#CCCCCC"> are</font><font color="#E5E5E5"> three lines of the VHDL code</font>

284
00:12:20,140 --> 00:12:25,120
which will translate<font color="#CCCCCC"> to a very small</font>

285
00:12:21,970 --> 00:12:28,750
circuit it<font color="#E5E5E5"> will be it won't change</font><font color="#CCCCCC"> the</font>

286
00:12:25,120 --> 00:12:32,050
size of<font color="#E5E5E5"> the chip and only</font><font color="#CCCCCC"> now it's</font>

287
00:12:28,750 --> 00:12:35,080
leveraging<font color="#CCCCCC"> its switching</font><font color="#E5E5E5"> that the mode</font>

288
00:12:32,050 --> 00:12:38,500
<font color="#CCCCCC">of the processor work so now if you</font>

289
00:12:35,080 --> 00:12:41,170
would<font color="#E5E5E5"> like</font><font color="#CCCCCC"> to test for yourself how such</font>

290
00:12:38,500 --> 00:12:43,750
a<font color="#E5E5E5"> hardware Trojan is working what it can</font>

291
00:12:41,170 --> 00:12:45,430
do to<font color="#E5E5E5"> your to your</font><font color="#CCCCCC"> equipment</font><font color="#E5E5E5"> comes the</font>

292
00:12:43,750 --> 00:12:48,880
<font color="#CCCCCC">question do you need a silicon</font>

293
00:12:45,430 --> 00:12:51,910
fabrication unit no probably not

294
00:12:48,880 --> 00:12:54,310
<font color="#CCCCCC">actually if</font><font color="#E5E5E5"> you can emulate a processor</font>

295
00:12:51,910 --> 00:12:56,380
which is<font color="#E5E5E5"> working correctly you can also</font>

296
00:12:54,310 --> 00:12:58,510
emulate a processor<font color="#CCCCCC"> or integrated</font>

297
00:12:56,380 --> 00:13:00,820
circuit which which has a<font color="#CCCCCC"> backdoor</font>

298
00:12:58,510 --> 00:13:02,590
inside<font color="#E5E5E5"> so for the purpose of this</font>

299
00:13:00,820 --> 00:13:05,440
presentation<font color="#CCCCCC"> I</font><font color="#E5E5E5"> will use camera am elated</font>

300
00:13:02,590 --> 00:13:07,510
<font color="#E5E5E5">emulator for the SPARC architecture the</font>

301
00:13:05,440 --> 00:13:12,130
code is<font color="#E5E5E5"> compatible</font><font color="#CCCCCC"> with</font><font color="#E5E5E5"> the with the</font>

302
00:13:07,510 --> 00:13:14,439
VHDL code<font color="#E5E5E5"> from from the</font><font color="#CCCCCC"> Geisler I will</font>

303
00:13:12,130 --> 00:13:17,290
use a regular<font color="#E5E5E5"> Linux kernel in version</font>

304
00:13:14,440 --> 00:13:19,210
<font color="#E5E5E5">411 so it's fairly new</font><font color="#CCCCCC"> and the</font>

305
00:13:17,290 --> 00:13:20,860
implementation and details<font color="#E5E5E5"> of the</font>

306
00:13:19,210 --> 00:13:22,990
<font color="#E5E5E5">implementation sources you can find on</font>

307
00:13:20,860 --> 00:13:26,560
<font color="#CCCCCC">my github page</font>

308
00:13:22,990 --> 00:13:28,570
so in camel<font color="#CCCCCC"> the you have this</font><font color="#E5E5E5"> translate</font>

309
00:13:26,560 --> 00:13:30,910
file which is basically<font color="#E5E5E5"> going</font><font color="#CCCCCC"> through</font>

310
00:13:28,570 --> 00:13:32,530
all instructions from ISA which

311
00:13:30,910 --> 00:13:34,990
instructions that architecture which<font color="#E5E5E5"> you</font>

312
00:13:32,530 --> 00:13:38,110
are trying<font color="#CCCCCC"> to emulate</font><font color="#E5E5E5"> and it's</font>

313
00:13:34,990 --> 00:13:41,050
translated<font color="#E5E5E5"> them to</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> in this case x86</font>

314
00:13:38,110 --> 00:13:43,300
instructions<font color="#E5E5E5"> so here we have a read</font>

315
00:13:41,050 --> 00:13:46,420
processor state register instruction<font color="#CCCCCC"> and</font>

316
00:13:43,300 --> 00:13:48,400
we know that it's privileged<font color="#CCCCCC"> so here the</font>

317
00:13:46,420 --> 00:13:50,079
first thing<font color="#E5E5E5"> which which</font><font color="#CCCCCC"> camo is doing is</font>

318
00:13:48,400 --> 00:13:52,600
<font color="#CCCCCC">checking what's the mode of work of the</font>

319
00:13:50,080 --> 00:13:55,480
processor<font color="#E5E5E5"> and if not</font><font color="#CCCCCC"> it's we</font><font color="#E5E5E5"> have</font><font color="#CCCCCC"> it's</font>

320
00:13:52,600 --> 00:13:58,540
rising<font color="#E5E5E5"> a trap so then when</font><font color="#CCCCCC"> we will try</font>

321
00:13:55,480 --> 00:14:01,900
to add a<font color="#E5E5E5"> Trojan payload</font><font color="#CCCCCC"> we'll do this</font><font color="#E5E5E5"> in</font>

322
00:13:58,540 --> 00:14:04,420
<font color="#E5E5E5">the</font><font color="#CCCCCC"> signed divide assembly instruction</font>

323
00:14:01,900 --> 00:14:06,730
and<font color="#E5E5E5"> we'll simply put those couple of</font>

324
00:14:04,420 --> 00:14:08,589
lines it's also free liner<font color="#E5E5E5"> where we are</font>

325
00:14:06,730 --> 00:14:12,250
whenever we are doing<font color="#E5E5E5"> sign</font><font color="#CCCCCC"> divided with</font>

326
00:14:08,590 --> 00:14:16,600
this<font color="#CCCCCC"> operands</font><font color="#E5E5E5"> we are changing the style</font>

327
00:14:12,250 --> 00:14:18,880
of the processor register<font color="#E5E5E5"> so it's very</font>

328
00:14:16,600 --> 00:14:23,380
simple<font color="#E5E5E5"> that's that's that's the point</font><font color="#CCCCCC"> so</font>

329
00:14:18,880 --> 00:14:25,000
let<font color="#E5E5E5"> me show you how does it work so here</font>

330
00:14:23,380 --> 00:14:35,160
<font color="#E5E5E5">it's firstly we will just run this</font>

331
00:14:25,000 --> 00:14:35,160
routes let me<font color="#E5E5E5"> okay</font>

332
00:14:42,720 --> 00:14:51,280
okay now it's better so this<font color="#E5E5E5"> is a</font>

333
00:14:48,790 --> 00:14:54,459
regular application<font color="#CCCCCC"> what we are</font><font color="#E5E5E5"> doing</font>

334
00:14:51,280 --> 00:14:57,670
here is we<font color="#CCCCCC"> are</font><font color="#E5E5E5"> doing a regular we are</font>

335
00:14:54,460 --> 00:15:00,430
doing a<font color="#E5E5E5"> regular division 1024 is 63</font><font color="#CCCCCC"> so</font>

336
00:14:57,670 --> 00:15:03,790
we are not activating our<font color="#E5E5E5"> Trojan we have</font>

337
00:15:00,430 --> 00:15:05,380
an inline assembly<font color="#CCCCCC"> which</font><font color="#E5E5E5"> is right now</font>

338
00:15:03,790 --> 00:15:07,510
commented but<font color="#CCCCCC"> I will</font><font color="#E5E5E5"> uncomment it later</font>

339
00:15:05,380 --> 00:15:09,070
<font color="#E5E5E5">so we are printing</font><font color="#CCCCCC"> the result and we are</font>

340
00:15:07,510 --> 00:15:11,230
<font color="#E5E5E5">doing something</font><font color="#CCCCCC"> stupid we</font><font color="#E5E5E5"> are not very</font>

341
00:15:09,070 --> 00:15:18,280
good<font color="#CCCCCC"> programmers so we are doing the</font>

342
00:15:11,230 --> 00:15:31,450
<font color="#CCCCCC">null pointer the reference</font><font color="#E5E5E5"> so I have</font>

343
00:15:18,280 --> 00:15:33,970
here a running Linux kernel and then

344
00:15:31,450 --> 00:15:36,460
here's<font color="#E5E5E5"> the output so what we have here</font>

345
00:15:33,970 --> 00:15:40,360
<font color="#CCCCCC">we have a segmentation fault as it was</font>

346
00:15:36,460 --> 00:15:44,290
supposed<font color="#E5E5E5"> to be so later on what we'll do</font>

347
00:15:40,360 --> 00:15:46,870
is firstly<font color="#E5E5E5"> I will uncomment this line so</font>

348
00:15:44,290 --> 00:15:49,089
we<font color="#CCCCCC"> while being in</font><font color="#E5E5E5"> the user mode I will</font>

349
00:15:46,870 --> 00:15:53,640
<font color="#CCCCCC">try to execute</font><font color="#E5E5E5"> a</font><font color="#CCCCCC"> privileged instruction</font>

350
00:15:49,090 --> 00:15:53,640
<font color="#E5E5E5">I will recombine the code</font>

351
00:16:03,250 --> 00:16:14,770
<font color="#CCCCCC">I will copy</font><font color="#E5E5E5"> it to the unit to our</font>

352
00:16:12,310 --> 00:16:25,000
<font color="#CCCCCC">virtual machine and let this</font><font color="#E5E5E5"> run it once</font>

353
00:16:14,770 --> 00:16:27,760
again<font color="#E5E5E5"> so right</font><font color="#CCCCCC"> now we</font><font color="#E5E5E5"> have this trap</font>

354
00:16:25,000 --> 00:16:29,650
<font color="#E5E5E5">it's illegal instruction we are trying</font>

355
00:16:27,760 --> 00:16:32,830
<font color="#E5E5E5">to do something which</font><font color="#CCCCCC"> is which is</font>

356
00:16:29,650 --> 00:16:35,020
illegal<font color="#CCCCCC"> so right now we'll run</font><font color="#E5E5E5"> the same</font>

357
00:16:32,830 --> 00:16:37,480
code but<font color="#CCCCCC"> a bit different</font><font color="#E5E5E5"> what</font><font color="#CCCCCC"> we are</font>

358
00:16:35,020 --> 00:16:44,819
doing<font color="#E5E5E5"> here is</font><font color="#CCCCCC"> we are changing</font><font color="#E5E5E5"> the second</font>

359
00:16:37,480 --> 00:16:44,820
operand to 64 yes<font color="#E5E5E5"> yes</font>

360
00:16:54,639 --> 00:16:57,639
oops

361
00:17:06,329 --> 00:17:13,408
<font color="#E5E5E5">okay so the sources are available on</font><font color="#CCCCCC"> my</font>

362
00:17:10,839 --> 00:17:16,178
website let's maybe let's let's do<font color="#E5E5E5"> this</font>

363
00:17:13,409 --> 00:17:18,309
<font color="#CCCCCC">afterwards</font><font color="#E5E5E5"> but what you what you have</font>

364
00:17:16,179 --> 00:17:22,959
here<font color="#E5E5E5"> basically is what we'll do is we'll</font>

365
00:17:18,309 --> 00:17:25,240
just do this division<font color="#E5E5E5"> 1024 by 64 then</font>

366
00:17:22,959 --> 00:17:28,089
we'll just try<font color="#E5E5E5"> to read with this</font><font color="#CCCCCC"> Inland</font>

367
00:17:25,240 --> 00:17:30,340
assembly right try to read the<font color="#E5E5E5"> PSR then</font>

368
00:17:28,089 --> 00:17:32,200
we'll try to write<font color="#E5E5E5"> again something</font><font color="#CCCCCC"> to</font>

369
00:17:30,340 --> 00:17:34,029
<font color="#E5E5E5">PSR because if</font><font color="#CCCCCC"> we're</font><font color="#E5E5E5"> in kernel mode we</font>

370
00:17:32,200 --> 00:17:35,770
should be able to<font color="#E5E5E5"> do this then I will</font>

371
00:17:34,029 --> 00:17:39,220
check if<font color="#E5E5E5"> the result of this operation</font>

372
00:17:35,770 --> 00:17:44,110
<font color="#CCCCCC">stays the same and if it stays the same</font>

373
00:17:39,220 --> 00:17:46,120
<font color="#CCCCCC">then I will print</font><font color="#E5E5E5"> the PSR and finally</font>

374
00:17:44,110 --> 00:17:49,240
we'll switch once again<font color="#E5E5E5"> to the</font>

375
00:17:46,120 --> 00:17:53,010
supervisor mode and do<font color="#E5E5E5"> this dummy null</font>

376
00:17:49,240 --> 00:17:53,010
pointer there if there are reference

377
00:18:00,539 --> 00:18:06,640
<font color="#E5E5E5">okay so first of all what we see here is</font>

378
00:18:03,669 --> 00:18:08,320
that<font color="#E5E5E5"> the result of the division has not</font>

379
00:18:06,640 --> 00:18:13,120
changed<font color="#E5E5E5"> so the whole operation was</font>

380
00:18:08,320 --> 00:18:15,700
conducted<font color="#E5E5E5"> in the background secondly we</font>

381
00:18:13,120 --> 00:18:17,529
could read the value of the PSR<font color="#CCCCCC"> so it's</font>

382
00:18:15,700 --> 00:18:20,110
switched really to the hypervisor mode

383
00:18:17,529 --> 00:18:22,000
<font color="#E5E5E5">and went back so the</font><font color="#CCCCCC"> eighth bit of the</font>

384
00:18:20,110 --> 00:18:24,100
<font color="#E5E5E5">PSR register</font><font color="#CCCCCC"> PSI register has other</font>

385
00:18:22,000 --> 00:18:28,330
<font color="#CCCCCC">values they did change</font><font color="#E5E5E5"> to the supervisor</font>

386
00:18:24,100 --> 00:18:30,820
mode<font color="#E5E5E5"> and finally because we are in the</font>

387
00:18:28,330 --> 00:18:35,260
kernel mode<font color="#E5E5E5"> no pointer the reference</font>

388
00:18:30,820 --> 00:18:37,510
cannot be<font color="#E5E5E5"> handled properly</font><font color="#CCCCCC"> so it's it's</font>

389
00:18:35,260 --> 00:18:39,580
it has<font color="#E5E5E5"> crashed simply but it shows that</font>

390
00:18:37,510 --> 00:18:41,049
we are<font color="#E5E5E5"> we have denial of service and now</font>

391
00:18:39,580 --> 00:18:43,600
comes the<font color="#CCCCCC"> question</font><font color="#E5E5E5"> how would you look</font>

392
00:18:41,049 --> 00:18:46,059
<font color="#E5E5E5">and how</font><font color="#CCCCCC"> would you detect that the crash</font>

393
00:18:43,600 --> 00:18:47,918
disk crash at this moment of execution

394
00:18:46,059 --> 00:18:49,690
<font color="#E5E5E5">from the</font><font color="#CCCCCC"> logs</font><font color="#E5E5E5"> was caused by some</font>

395
00:18:47,919 --> 00:19:00,899
functionality which was realized in the

396
00:18:49,690 --> 00:19:00,899
background<font color="#E5E5E5"> and hardware</font><font color="#CCCCCC"> okay</font>

397
00:19:05,169 --> 00:19:14,090
good<font color="#E5E5E5"> so we've seen that it's not that</font>

398
00:19:11,419 --> 00:19:15,950
<font color="#CCCCCC">difficult it's</font><font color="#E5E5E5"> very simple</font><font color="#CCCCCC"> modification</font>

399
00:19:14,090 --> 00:19:18,559
<font color="#CCCCCC">of a circuit</font><font color="#E5E5E5"> so now comes the</font><font color="#CCCCCC"> question</font>

400
00:19:15,950 --> 00:19:21,500
<font color="#E5E5E5">where when where and</font><font color="#CCCCCC"> when it can</font><font color="#E5E5E5"> be</font>

401
00:19:18,559 --> 00:19:25,070
introduced<font color="#E5E5E5"> so I will discuss</font><font color="#CCCCCC"> it based on</font>

402
00:19:21,500 --> 00:19:27,470
the stages<font color="#CCCCCC"> of</font><font color="#E5E5E5"> a hardware of a chip</font>

403
00:19:25,070 --> 00:19:30,168
design<font color="#E5E5E5"> so first we have a logic design</font>

404
00:19:27,470 --> 00:19:32,330
<font color="#CCCCCC">so this is a very high level</font><font color="#E5E5E5"> when we are</font>

405
00:19:30,169 --> 00:19:35,240
deciding<font color="#E5E5E5"> what the functionality do and</font>

406
00:19:32,330 --> 00:19:36,830
we<font color="#E5E5E5"> are only giving</font><font color="#CCCCCC"> clues how it should</font>

407
00:19:35,240 --> 00:19:39,350
be<font color="#E5E5E5"> done</font><font color="#CCCCCC"> or how should it be translated</font>

408
00:19:36,830 --> 00:19:42,408
<font color="#CCCCCC">to real circuits with capacitors and</font>

409
00:19:39,350 --> 00:19:44,000
transistors<font color="#E5E5E5"> so it's usually done in a</font>

410
00:19:42,409 --> 00:19:45,889
<font color="#CCCCCC">hardware</font><font color="#E5E5E5"> description language it can be</font>

411
00:19:44,000 --> 00:19:49,340
very<font color="#E5E5E5"> long</font><font color="#CCCCCC"> it can be</font><font color="#E5E5E5"> system very</font><font color="#CCCCCC"> large it</font>

412
00:19:45,889 --> 00:19:52,008
can<font color="#E5E5E5"> be VHDL</font><font color="#CCCCCC"> as in the CPU example which</font>

413
00:19:49,340 --> 00:19:53,360
we've seen so the introduction<font color="#E5E5E5"> of Trojan</font>

414
00:19:52,009 --> 00:19:56,000
will be very similar<font color="#CCCCCC"> to introduction</font>

415
00:19:53,360 --> 00:19:57,860
<font color="#E5E5E5">Trojan in a software you're adding as</font>

416
00:19:56,000 --> 00:19:58,850
you've seen<font color="#CCCCCC"> couple of lines</font><font color="#E5E5E5"> this is</font>

417
00:19:57,860 --> 00:20:01,309
relatively cheap

418
00:19:58,850 --> 00:20:04,269
<font color="#CCCCCC">however because Hardware cannot be</font>

419
00:20:01,309 --> 00:20:08,480
changed<font color="#CCCCCC"> in post deployment</font><font color="#E5E5E5"> the hardware</font>

420
00:20:04,269 --> 00:20:11,750
the it's you have<font color="#CCCCCC"> a severe testing</font><font color="#E5E5E5"> 80%</font>

421
00:20:08,480 --> 00:20:14,269
of<font color="#CCCCCC"> that hardware</font><font color="#E5E5E5"> design is of cost of</font>

422
00:20:11,750 --> 00:20:16,250
<font color="#E5E5E5">hardware design is a cost by testing</font>

423
00:20:14,269 --> 00:20:18,470
which means that if<font color="#CCCCCC"> you are creating</font>

424
00:20:16,250 --> 00:20:20,659
<font color="#E5E5E5">this</font><font color="#CCCCCC"> Hardware Trojan in this stage</font><font color="#E5E5E5"> this</font>

425
00:20:18,470 --> 00:20:24,259
code will<font color="#CCCCCC"> be tested over and</font><font color="#E5E5E5"> over</font><font color="#CCCCCC"> that's</font>

426
00:20:20,659 --> 00:20:26,509
the<font color="#CCCCCC"> biggest amount of the workers the</font>

427
00:20:24,259 --> 00:20:29,450
the highest<font color="#E5E5E5"> number of workers which are</font>

428
00:20:26,509 --> 00:20:32,029
<font color="#E5E5E5">devoted</font><font color="#CCCCCC"> to this face and it's very hard</font>

429
00:20:29,450 --> 00:20:34,549
to keep it hidden<font color="#E5E5E5"> from from your own</font>

430
00:20:32,029 --> 00:20:36,500
corporation even<font color="#E5E5E5"> or organization so what</font>

431
00:20:34,549 --> 00:20:38,230
you could do is you could do obfuscation

432
00:20:36,500 --> 00:20:40,250
<font color="#E5E5E5">so we could create a code which is</font>

433
00:20:38,230 --> 00:20:43,730
semantically correct but difficult<font color="#E5E5E5"> to</font>

434
00:20:40,250 --> 00:20:45,529
understand or<font color="#E5E5E5"> you can</font><font color="#CCCCCC"> it's obviously</font>

435
00:20:43,730 --> 00:20:48,200
easier in bigger projects which<font color="#CCCCCC"> have a</font>

436
00:20:45,529 --> 00:20:50,299
severe backward compatibility like x86

437
00:20:48,200 --> 00:20:52,580
architecture which has<font color="#CCCCCC"> a features which</font>

438
00:20:50,299 --> 00:20:57,259
are<font color="#CCCCCC"> necessary just to</font><font color="#E5E5E5"> run code which is</font>

439
00:20:52,580 --> 00:20:59,689
50<font color="#E5E5E5"> years old at the second part second</font>

440
00:20:57,259 --> 00:21:01,759
stage we have synthesis<font color="#E5E5E5"> so from this</font>

441
00:20:59,690 --> 00:21:03,889
high level<font color="#CCCCCC"> description we are getting</font>

442
00:21:01,759 --> 00:21:06,710
the real circuits with capacitors and

443
00:21:03,889 --> 00:21:08,330
transistors<font color="#CCCCCC"> right now it can</font><font color="#E5E5E5"> be the</font>

444
00:21:06,710 --> 00:21:10,580
metaphor<font color="#E5E5E5"> the software metaphor would be</font>

445
00:21:08,330 --> 00:21:13,340
a code compilation process<font color="#CCCCCC"> so right now</font>

446
00:21:10,580 --> 00:21:15,210
<font color="#E5E5E5">in majority of projects the synthesis is</font>

447
00:21:13,340 --> 00:21:18,178
<font color="#CCCCCC">done automatically</font>

448
00:21:15,210 --> 00:21:20,250
using the tools so here the<font color="#CCCCCC"> Trojan would</font>

449
00:21:18,179 --> 00:21:22,169
be already introduced as a modification

450
00:21:20,250 --> 00:21:25,159
of electronic circuits<font color="#E5E5E5"> so you need new</font>

451
00:21:22,169 --> 00:21:27,840
wires new transistors new capacitors

452
00:21:25,159 --> 00:21:29,460
<font color="#E5E5E5">this is a</font><font color="#CCCCCC"> low-level</font><font color="#E5E5E5"> approach there are</font>

453
00:21:27,840 --> 00:21:31,439
<font color="#E5E5E5">reasons why people are compiling</font>

454
00:21:29,460 --> 00:21:35,159
<font color="#E5E5E5">electrical circuits because it's very</font>

455
00:21:31,440 --> 00:21:36,630
<font color="#E5E5E5">costly and very complicated and here you</font>

456
00:21:35,159 --> 00:21:38,580
have two possibilities<font color="#E5E5E5"> either you are</font>

457
00:21:36,630 --> 00:21:41,250
<font color="#E5E5E5">working with compiled code so with a</font>

458
00:21:38,580 --> 00:21:45,689
compiled circuits<font color="#E5E5E5"> generated circuits but</font>

459
00:21:41,250 --> 00:21:47,789
then these are<font color="#E5E5E5"> normally optimized and</font>

460
00:21:45,690 --> 00:21:51,630
and they are<font color="#E5E5E5"> not prepared or not</font>

461
00:21:47,789 --> 00:21:53,490
<font color="#E5E5E5">designed to</font><font color="#CCCCCC"> be read by</font><font color="#E5E5E5"> humans or your</font><font color="#CCCCCC"> or</font>

462
00:21:51,630 --> 00:21:56,460
modification can happen during the

463
00:21:53,490 --> 00:21:58,590
compilation<font color="#E5E5E5"> process so the so during the</font>

464
00:21:56,460 --> 00:22:00,179
synthesis process<font color="#CCCCCC"> so then comes the</font>

465
00:21:58,590 --> 00:22:04,049
<font color="#E5E5E5">question who is checking the</font><font color="#CCCCCC"> code which</font>

466
00:22:00,179 --> 00:22:05,789
compiler<font color="#CCCCCC"> produces at the output so here</font>

467
00:22:04,049 --> 00:22:07,799
it's easier<font color="#E5E5E5"> to hide because we have less</font>

468
00:22:05,789 --> 00:22:09,649
developers involved<font color="#CCCCCC"> and because we tend</font>

469
00:22:07,799 --> 00:22:13,070
to<font color="#E5E5E5"> trust our tools which we are using</font>

470
00:22:09,649 --> 00:22:15,418
<font color="#E5E5E5">but it requires qualified and</font>

471
00:22:13,070 --> 00:22:18,210
experienced personnel<font color="#E5E5E5"> and this is costly</font>

472
00:22:15,419 --> 00:22:20,070
<font color="#E5E5E5">so it's not not that easy and still we</font>

473
00:22:18,210 --> 00:22:22,289
can use the white box cryptography so

474
00:22:20,070 --> 00:22:25,230
<font color="#CCCCCC">produce complicated layouts</font><font color="#E5E5E5"> to hide the</font>

475
00:22:22,289 --> 00:22:27,899
the final functionality<font color="#E5E5E5"> and finally we</font>

476
00:22:25,230 --> 00:22:29,820
have mask design<font color="#E5E5E5"> so from the</font><font color="#CCCCCC"> lions who</font>

477
00:22:27,899 --> 00:22:31,379
are you we<font color="#CCCCCC"> are creating masks so we</font>

478
00:22:29,820 --> 00:22:35,158
should<font color="#E5E5E5"> be used during the production of</font>

479
00:22:31,380 --> 00:22:37,350
wafers<font color="#E5E5E5"> so we could obviously we could</font>

480
00:22:35,159 --> 00:22:39,419
modify those masks<font color="#CCCCCC"> but we are not doing</font>

481
00:22:37,350 --> 00:22:41,850
<font color="#E5E5E5">it by scratching with a scalpel that the</font>

482
00:22:39,419 --> 00:22:44,039
real masks we are using<font color="#E5E5E5"> it by creating</font><font color="#CCCCCC"> a</font>

483
00:22:41,850 --> 00:22:47,219
new<font color="#E5E5E5"> sets of masks this happens</font><font color="#CCCCCC"> on the</font>

484
00:22:44,039 --> 00:22:49,559
far end of the design<font color="#CCCCCC"> process so this</font><font color="#E5E5E5"> is</font>

485
00:22:47,220 --> 00:22:51,299
a very hard to detect<font color="#E5E5E5"> it's a low</font>

486
00:22:49,559 --> 00:22:54,149
abstraction level it's it's<font color="#CCCCCC"> extremely</font>

487
00:22:51,299 --> 00:22:55,918
hard<font color="#CCCCCC"> to detect</font><font color="#E5E5E5"> but you need very very</font>

488
00:22:54,149 --> 00:22:58,110
skilled personnel expensive tool

489
00:22:55,919 --> 00:22:59,760
know-how and preferably market position

490
00:22:58,110 --> 00:23:02,639
you have<font color="#CCCCCC"> to have your own fabrication</font>

491
00:22:59,760 --> 00:23:05,370
unit<font color="#CCCCCC"> and here is an important point and</font>

492
00:23:02,640 --> 00:23:06,809
<font color="#E5E5E5">each of those stages</font><font color="#CCCCCC"> is done usually by</font>

493
00:23:05,370 --> 00:23:08,729
a different entity<font color="#E5E5E5"> within the</font>

494
00:23:06,809 --> 00:23:10,289
<font color="#E5E5E5">organization by a different or by</font>

495
00:23:08,730 --> 00:23:13,409
different<font color="#E5E5E5"> subcontractor different</font>

496
00:23:10,289 --> 00:23:15,330
company which means whenever the layout

497
00:23:13,409 --> 00:23:18,149
is coming to the fab usually they are

498
00:23:15,330 --> 00:23:20,580
<font color="#E5E5E5">not testing the functionality if you</font>

499
00:23:18,149 --> 00:23:22,439
<font color="#E5E5E5">want to print something out people are</font>

500
00:23:20,580 --> 00:23:24,090
known are usually not asking what<font color="#E5E5E5"> you</font>

501
00:23:22,440 --> 00:23:25,889
<font color="#CCCCCC">want to print</font><font color="#E5E5E5"> they are just telling you</font>

502
00:23:24,090 --> 00:23:29,010
<font color="#CCCCCC">ok for printing that that will be the</font>

503
00:23:25,889 --> 00:23:32,580
<font color="#E5E5E5">price the same with integrated circuits</font>

504
00:23:29,010 --> 00:23:34,440
so and the lower you are in<font color="#CCCCCC"> this</font><font color="#E5E5E5"> phases</font>

505
00:23:32,580 --> 00:23:38,850
of the chip design<font color="#E5E5E5"> the harder it</font><font color="#CCCCCC"> is</font>

506
00:23:34,440 --> 00:23:40,429
actually to to detect this this

507
00:23:38,850 --> 00:23:42,510
malicious functionality that's what

508
00:23:40,429 --> 00:23:46,530
<font color="#E5E5E5">Department of Defense wrote in their</font>

509
00:23:42,510 --> 00:23:49,770
report so what<font color="#CCCCCC"> are methods of Defense</font>

510
00:23:46,530 --> 00:23:52,710
<font color="#E5E5E5">very briefly we are we are working with</font>

511
00:23:49,770 --> 00:23:54,600
the<font color="#CCCCCC"> majority of us it's it's</font><font color="#E5E5E5"> using post</font>

512
00:23:52,710 --> 00:23:57,270
manufacturing Trojan detection we are

513
00:23:54,600 --> 00:23:59,159
buying a chip<font color="#E5E5E5"> and</font><font color="#CCCCCC"> we have to do</font>

514
00:23:57,270 --> 00:24:00,960
<font color="#E5E5E5">something</font><font color="#CCCCCC"> with it we have</font><font color="#E5E5E5"> to check it so</font>

515
00:23:59,160 --> 00:24:04,200
<font color="#E5E5E5">first of</font><font color="#CCCCCC"> all it's very</font><font color="#E5E5E5"> difficult and</font>

516
00:24:00,960 --> 00:24:06,000
<font color="#CCCCCC">expensive</font><font color="#E5E5E5"> it's not an easy task the most</font>

517
00:24:04,200 --> 00:24:07,950
straightforward approach is based on<font color="#E5E5E5"> the</font>

518
00:24:06,000 --> 00:24:10,410
golden<font color="#CCCCCC"> ship principle</font><font color="#E5E5E5"> so we have to have</font>

519
00:24:07,950 --> 00:24:14,070
an idea how a circuit<font color="#E5E5E5"> should look like</font>

520
00:24:10,410 --> 00:24:19,590
<font color="#E5E5E5">without</font><font color="#CCCCCC"> the treasure if we have this</font>

521
00:24:14,070 --> 00:24:23,520
<font color="#E5E5E5">idea and I strongly as in I want to say</font>

522
00:24:19,590 --> 00:24:26,040
if we have this<font color="#CCCCCC"> possibility then we have</font>

523
00:24:23,520 --> 00:24:30,330
to<font color="#E5E5E5"> firstly get the chip here is a very</font>

524
00:24:26,040 --> 00:24:32,460
old<font color="#E5E5E5"> epoxy case from 80s from Intel there</font>

525
00:24:30,330 --> 00:24:34,230
are several methods to<font color="#E5E5E5"> achieve it</font><font color="#CCCCCC"> you</font>

526
00:24:32,460 --> 00:24:36,770
can do<font color="#CCCCCC"> it mechanically or you can do it</font>

527
00:24:34,230 --> 00:24:39,000
<font color="#E5E5E5">chemically or both</font>

528
00:24:36,770 --> 00:24:40,650
however it's<font color="#E5E5E5"> it's difficult because</font>

529
00:24:39,000 --> 00:24:45,450
preferably you<font color="#CCCCCC"> want to take out this</font>

530
00:24:40,650 --> 00:24:46,830
case<font color="#CCCCCC"> and do not touch the chip</font><font color="#E5E5E5"> even if</font>

531
00:24:45,450 --> 00:24:49,679
you're<font color="#E5E5E5"> doing it will face it you don't</font>

532
00:24:46,830 --> 00:24:52,470
<font color="#E5E5E5">want this this is it it's not every</font>

533
00:24:49,679 --> 00:24:56,850
substance<font color="#E5E5E5"> because you don't want to</font>

534
00:24:52,470 --> 00:25:00,780
modify<font color="#E5E5E5"> the functioning of a chip why let</font>

535
00:24:56,850 --> 00:25:03,120
me show you it here here we<font color="#CCCCCC"> have a photo</font>

536
00:25:00,780 --> 00:25:06,780
of<font color="#E5E5E5"> a z80 processor it's a very old one</font>

537
00:25:03,120 --> 00:25:09,030
<font color="#E5E5E5">but this this processors from 70s 80s</font>

538
00:25:06,780 --> 00:25:13,168
<font color="#E5E5E5">maybe early 90s or the one which you can</font>

539
00:25:09,030 --> 00:25:17,040
do in as a hobbyist<font color="#CCCCCC"> they are in a</font><font color="#E5E5E5"> very</font>

540
00:25:13,169 --> 00:25:19,679
high or<font color="#CCCCCC"> very old</font><font color="#E5E5E5"> ancient and silicon</font>

541
00:25:17,040 --> 00:25:23,610
production technology 1500 nanometers or

542
00:25:19,679 --> 00:25:27,059
so<font color="#CCCCCC"> so if you are trying to</font><font color="#E5E5E5"> read such a</font>

543
00:25:23,610 --> 00:25:29,699
silicon<font color="#E5E5E5"> it's firstly you</font><font color="#CCCCCC"> have</font><font color="#E5E5E5"> to realize</font>

544
00:25:27,059 --> 00:25:32,399
that<font color="#E5E5E5"> it's highly optimized due to</font>

545
00:25:29,700 --> 00:25:33,929
technical and economical reasons so not

546
00:25:32,400 --> 00:25:36,120
reason<font color="#E5E5E5"> not all the reasons are obvious</font>

547
00:25:33,929 --> 00:25:38,309
<font color="#CCCCCC">for instance in the Z T we have</font><font color="#E5E5E5"> this</font>

548
00:25:36,120 --> 00:25:40,168
register<font color="#CCCCCC"> Bank over there</font><font color="#E5E5E5"> and the</font>

549
00:25:38,309 --> 00:25:42,840
register<font color="#E5E5E5"> according to the documentation</font>

550
00:25:40,169 --> 00:25:44,700
<font color="#CCCCCC">Tsar</font><font color="#E5E5E5"> 8-bit however the implementation</font>

551
00:25:42,840 --> 00:25:48,540
<font color="#E5E5E5">is a</font><font color="#CCCCCC"> four-bit which</font><font color="#E5E5E5"> is working in two</font>

552
00:25:44,700 --> 00:25:50,520
cycles<font color="#CCCCCC"> why in modern computers</font><font color="#E5E5E5"> it makes</font>

553
00:25:48,540 --> 00:25:52,280
no sense<font color="#CCCCCC"> but at that time when this chip</font>

554
00:25:50,520 --> 00:25:54,120
was designed they made some other

555
00:25:52,280 --> 00:25:56,399
decisions and they said we<font color="#E5E5E5"> don't want</font>

556
00:25:54,120 --> 00:25:58,679
<font color="#E5E5E5">this ratio registers to be single cycle</font>

557
00:25:56,400 --> 00:26:01,140
access because other components of<font color="#E5E5E5"> this</font>

558
00:25:58,680 --> 00:26:04,260
chip are very slow it's an economical

559
00:26:01,140 --> 00:26:06,360
decision<font color="#CCCCCC"> then and</font><font color="#E5E5E5"> the chips works in</font>

560
00:26:04,260 --> 00:26:07,860
parallel<font color="#CCCCCC"> so we all know</font><font color="#E5E5E5"> that to the to</font>

561
00:26:06,360 --> 00:26:09,540
debauch the parallel code is<font color="#E5E5E5"> very</font>

562
00:26:07,860 --> 00:26:11,370
difficult<font color="#E5E5E5"> and here we would</font><font color="#CCCCCC"> have to</font>

563
00:26:09,540 --> 00:26:13,320
really<font color="#CCCCCC"> stimulate those inputs which you</font>

564
00:26:11,370 --> 00:26:15,239
have on the edges of the chip to see

565
00:26:13,320 --> 00:26:16,679
what's happening in the chip to see what

566
00:26:15,240 --> 00:26:20,640
parts of the chip are active during

567
00:26:16,680 --> 00:26:24,000
which operation and<font color="#E5E5E5"> finally we have</font>

568
00:26:20,640 --> 00:26:25,680
legacy functions so we<font color="#CCCCCC"> have some parts</font>

569
00:26:24,000 --> 00:26:27,330
of the chip which may not<font color="#E5E5E5"> necessarily be</font>

570
00:26:25,680 --> 00:26:30,000
directly<font color="#E5E5E5"> connected</font><font color="#CCCCCC"> with</font><font color="#E5E5E5"> the basic</font>

571
00:26:27,330 --> 00:26:32,010
functionality so what we<font color="#CCCCCC"> would do is we</font>

572
00:26:30,000 --> 00:26:35,520
would cut each layer because it's a 3d

573
00:26:32,010 --> 00:26:38,100
design<font color="#E5E5E5"> and we would make a photo scan it</font>

574
00:26:35,520 --> 00:26:39,930
with electron microscope<font color="#E5E5E5"> and compare it</font>

575
00:26:38,100 --> 00:26:43,740
<font color="#E5E5E5">to this</font><font color="#CCCCCC"> layout from the</font><font color="#E5E5E5"> golden chip</font>

576
00:26:39,930 --> 00:26:46,470
design so the<font color="#E5E5E5"> pro it's a very high</font>

577
00:26:43,740 --> 00:26:49,140
reliability<font color="#E5E5E5"> of detection</font><font color="#CCCCCC"> if you have a</font>

578
00:26:46,470 --> 00:26:51,810
golden chip the question is how you<font color="#E5E5E5"> get</font>

579
00:26:49,140 --> 00:26:53,250
a golden ship from leading manufacturers

580
00:26:51,810 --> 00:26:56,220
they are not showing<font color="#CCCCCC"> you your that their</font>

581
00:26:53,250 --> 00:26:58,950
layout you don't know how to how the i7

582
00:26:56,220 --> 00:27:00,240
should look like or<font color="#E5E5E5"> or that its main</font>

583
00:26:58,950 --> 00:27:03,990
<font color="#CCCCCC">functionality is same for for</font>

584
00:27:00,240 --> 00:27:07,080
telecommunication devices also<font color="#CCCCCC"> it's very</font>

585
00:27:03,990 --> 00:27:09,270
expensive time consuming<font color="#E5E5E5"> and destroys</font>

586
00:27:07,080 --> 00:27:10,949
the chip<font color="#CCCCCC"> under analysis so if you are</font>

587
00:27:09,270 --> 00:27:13,379
ordering<font color="#CCCCCC"> one hundred thousand for</font>

588
00:27:10,950 --> 00:27:16,290
instance<font color="#E5E5E5"> integrated circuits or chips</font>

589
00:27:13,380 --> 00:27:19,380
<font color="#E5E5E5">and you're</font><font color="#CCCCCC"> getting them how percentage</font>

590
00:27:16,290 --> 00:27:20,790
of them you<font color="#E5E5E5"> know what's the percentage</font>

591
00:27:19,380 --> 00:27:22,680
of them which<font color="#CCCCCC"> you would like</font><font color="#E5E5E5"> to</font>

592
00:27:20,790 --> 00:27:25,110
sacrifice to check if you if they have a

593
00:27:22,680 --> 00:27:27,810
<font color="#E5E5E5">Trojan if it's I don't know one two</font>

594
00:27:25,110 --> 00:27:29,790
<font color="#E5E5E5">percent firstly those are losses</font><font color="#CCCCCC"> for</font>

595
00:27:27,810 --> 00:27:31,560
your corporation<font color="#CCCCCC"> it will be very time</font>

596
00:27:29,790 --> 00:27:34,440
<font color="#CCCCCC">consuming because you have still a</font><font color="#E5E5E5"> lot</font>

597
00:27:31,560 --> 00:27:37,889
of<font color="#CCCCCC"> chips to test and finally what about</font>

598
00:27:34,440 --> 00:27:41,220
<font color="#CCCCCC">98% which are left</font><font color="#E5E5E5"> you haven't tested</font>

599
00:27:37,890 --> 00:27:43,020
them<font color="#E5E5E5"> and the last</font><font color="#CCCCCC"> question is is it</font>

600
00:27:41,220 --> 00:27:45,450
enough<font color="#CCCCCC"> is such an inspection which I</font>

601
00:27:43,020 --> 00:27:47,100
showed you<font color="#E5E5E5"> enough to answer this</font>

602
00:27:45,450 --> 00:27:49,200
<font color="#E5E5E5">question look at this simple</font><font color="#CCCCCC"> inverter</font>

603
00:27:47,100 --> 00:27:51,659
<font color="#E5E5E5">this is the example</font><font color="#CCCCCC"> from our from the</font>

604
00:27:49,200 --> 00:27:53,430
beginning of this talk<font color="#E5E5E5"> we have here it's</font>

605
00:27:51,660 --> 00:27:54,990
it's a very<font color="#CCCCCC"> simple circuit we have two</font>

606
00:27:53,430 --> 00:27:56,790
transistors<font color="#E5E5E5"> depending on the input</font>

607
00:27:54,990 --> 00:27:59,130
<font color="#E5E5E5">signal either one is open</font>

608
00:27:56,790 --> 00:28:00,860
<font color="#CCCCCC">Muhtar close or opposite way around so</font>

609
00:27:59,130 --> 00:28:03,270
this is giving you the<font color="#E5E5E5"> simple internal</font>

610
00:28:00,860 --> 00:28:04,979
inverter functionality and here is the

611
00:28:03,270 --> 00:28:09,120
<font color="#CCCCCC">trojan</font><font color="#E5E5E5"> every one of you can answer the</font>

612
00:28:04,980 --> 00:28:13,170
<font color="#E5E5E5">question in which of them is trojan the</font>

613
00:28:09,120 --> 00:28:16,500
answer is<font color="#CCCCCC"> actually you have to check</font>

614
00:28:13,170 --> 00:28:20,610
what<font color="#E5E5E5"> are the dopants inside of this of</font>

615
00:28:16,500 --> 00:28:22,200
this of<font color="#E5E5E5"> this</font><font color="#CCCCCC"> gate because this is how</font>

616
00:28:20,610 --> 00:28:23,610
the gate will look like on the

617
00:28:22,200 --> 00:28:27,140
integrated<font color="#E5E5E5"> circuit when you will make a</font>

618
00:28:23,610 --> 00:28:30,990
photo and then<font color="#CCCCCC"> will appear</font><font color="#E5E5E5"> then in the a</font>

619
00:28:27,140 --> 00:28:33,510
circuit you have<font color="#E5E5E5"> two different you</font><font color="#CCCCCC"> have</font>

620
00:28:30,990 --> 00:28:36,480
<font color="#E5E5E5">two different transistors but in the P</font>

621
00:28:33,510 --> 00:28:38,010
circuit you have<font color="#CCCCCC"> a Trojan because you</font>

622
00:28:36,480 --> 00:28:41,040
have twice<font color="#E5E5E5"> the same transistor the</font>

623
00:28:38,010 --> 00:28:44,610
circuit is always half open<font color="#E5E5E5"> and the</font>

624
00:28:41,040 --> 00:28:46,830
signal<font color="#E5E5E5"> is wrong so optical inspection in</font>

625
00:28:44,610 --> 00:28:48,600
this case is not enough<font color="#E5E5E5"> you have</font><font color="#CCCCCC"> to go</font>

626
00:28:46,830 --> 00:28:52,260
deeper<font color="#E5E5E5"> you have to check what's actually</font>

627
00:28:48,600 --> 00:28:56,340
inside<font color="#E5E5E5"> so</font><font color="#CCCCCC"> where it can be used</font><font color="#E5E5E5"> this is</font>

628
00:28:52,260 --> 00:28:59,730
actually proposed to be<font color="#CCCCCC"> used against</font>

629
00:28:56,340 --> 00:29:03,179
cryptography or crypto engines<font color="#E5E5E5"> security</font>

630
00:28:59,730 --> 00:29:04,980
units<font color="#CCCCCC"> here's example of</font><font color="#E5E5E5"> AES based on an</font>

631
00:29:03,180 --> 00:29:09,810
excellent<font color="#CCCCCC"> power presentation from the</font>

632
00:29:04,980 --> 00:29:12,300
last year 2017<font color="#E5E5E5"> from Germany in</font><font color="#CCCCCC"> AES and</font>

633
00:29:09,810 --> 00:29:14,820
<font color="#E5E5E5">Jean you need a random input</font><font color="#CCCCCC"> you have</font><font color="#E5E5E5"> to</font>

634
00:29:12,300 --> 00:29:17,970
register<font color="#CCCCCC"> first</font><font color="#E5E5E5"> is random register 32</font>

635
00:29:14,820 --> 00:29:19,860
bits<font color="#CCCCCC"> which should be random but due to</font>

636
00:29:17,970 --> 00:29:21,630
<font color="#E5E5E5">the</font><font color="#CCCCCC"> aging due to the temperature they</font>

637
00:29:19,860 --> 00:29:23,520
may<font color="#E5E5E5"> not be that random as you would like</font>

638
00:29:21,630 --> 00:29:25,320
<font color="#CCCCCC">them to be so you have also counter</font>

639
00:29:23,520 --> 00:29:27,210
<font color="#E5E5E5">register which is just incrementing</font>

640
00:29:25,320 --> 00:29:31,350
based on the number of<font color="#E5E5E5"> operations and</font>

641
00:29:27,210 --> 00:29:34,770
you're using it<font color="#E5E5E5"> to</font><font color="#CCCCCC"> get the AES input for</font>

642
00:29:31,350 --> 00:29:37,080
for crypto key<font color="#E5E5E5"> so with while doing the</font>

643
00:29:34,770 --> 00:29:41,720
dopant rogent you could fix the<font color="#CCCCCC"> number</font>

644
00:29:37,080 --> 00:29:46,439
of the of random<font color="#E5E5E5"> really numbed random</font>

645
00:29:41,720 --> 00:29:48,240
registers or a bit or you<font color="#CCCCCC"> could fix the</font>

646
00:29:46,440 --> 00:29:52,170
variation between<font color="#CCCCCC"> the bits in such a</font>

647
00:29:48,240 --> 00:29:55,350
cipher obviously the pro of this

648
00:29:52,170 --> 00:29:58,080
approach is you are not adding<font color="#E5E5E5"> any</font>

649
00:29:55,350 --> 00:29:59,820
additional<font color="#E5E5E5"> wires or transistors so</font>

650
00:29:58,080 --> 00:30:01,379
<font color="#E5E5E5">optical inspection is not enough the</font>

651
00:29:59,820 --> 00:30:04,139
chip will look<font color="#E5E5E5"> like a golden ship if you</font>

652
00:30:01,380 --> 00:30:07,430
<font color="#E5E5E5">just look it and and cut it into slice</font>

653
00:30:04,140 --> 00:30:09,690
it into pieces<font color="#CCCCCC"> however</font><font color="#E5E5E5"> obviously the the</font>

654
00:30:07,430 --> 00:30:10,410
<font color="#E5E5E5">functionality of the chip is limited so</font>

655
00:30:09,690 --> 00:30:14,250
<font color="#E5E5E5">you have</font><font color="#CCCCCC"> damn</font>

656
00:30:10,410 --> 00:30:15,930
<font color="#E5E5E5">cheap parts and you have and functional</font>

657
00:30:14,250 --> 00:30:19,980
testing if you<font color="#E5E5E5"> do the functional testing</font>

658
00:30:15,930 --> 00:30:22,200
it will find it<font color="#E5E5E5"> right</font><font color="#CCCCCC"> away</font><font color="#E5E5E5"> so</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> is a</font>

659
00:30:19,980 --> 00:30:24,690
<font color="#E5E5E5">problem what</font><font color="#CCCCCC"> the producer could</font><font color="#E5E5E5"> do is</font>

660
00:30:22,200 --> 00:30:26,520
they could<font color="#CCCCCC"> create an T test function as</font>

661
00:30:24,690 --> 00:30:29,190
false<font color="#CCCCCC"> wagon</font><font color="#E5E5E5"> did with their car</font>

662
00:30:26,520 --> 00:30:32,129
<font color="#E5E5E5">controllers if if someone is trying to</font>

663
00:30:29,190 --> 00:30:35,270
<font color="#E5E5E5">test the</font><font color="#CCCCCC"> krypter unit for</font><font color="#E5E5E5"> all inputs to</font>

664
00:30:32,130 --> 00:30:39,960
check if really<font color="#CCCCCC"> it's using the full</font>

665
00:30:35,270 --> 00:30:43,440
random space it could<font color="#E5E5E5"> just trick it and</font>

666
00:30:39,960 --> 00:30:46,530
cheat it<font color="#E5E5E5"> and then finally</font><font color="#CCCCCC"> here comes</font><font color="#E5E5E5"> the</font>

667
00:30:43,440 --> 00:30:48,420
interesting<font color="#E5E5E5"> question if hardware</font>

668
00:30:46,530 --> 00:30:50,220
components are so extensively tested

669
00:30:48,420 --> 00:30:53,100
<font color="#E5E5E5">because you cannot get rid of them once</font>

670
00:30:50,220 --> 00:30:55,110
<font color="#E5E5E5">they</font><font color="#CCCCCC"> are on the market then</font><font color="#E5E5E5"> what could</font>

671
00:30:53,100 --> 00:30:56,879
happen is you<font color="#CCCCCC"> could as a malicious</font>

672
00:30:55,110 --> 00:30:58,860
attacker look for a<font color="#E5E5E5"> very</font><font color="#CCCCCC"> bizarre</font><font color="#E5E5E5"> test</font>

673
00:30:56,880 --> 00:31:02,490
cases which<font color="#E5E5E5"> are which are very rare and</font>

674
00:30:58,860 --> 00:31:04,649
<font color="#CCCCCC">very</font><font color="#E5E5E5"> complicated and say</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> leave them</font>

675
00:31:02,490 --> 00:31:06,290
on<font color="#CCCCCC"> purpose so just to say later on we</font>

676
00:31:04,650 --> 00:31:08,640
all<font color="#CCCCCC"> know that in</font><font color="#E5E5E5"> software projects</font>

677
00:31:06,290 --> 00:31:10,740
<font color="#E5E5E5">people</font><font color="#CCCCCC"> are</font><font color="#E5E5E5"> saying it's</font><font color="#CCCCCC"> not a bug it's a</font>

678
00:31:08,640 --> 00:31:12,120
feature here<font color="#E5E5E5"> we would do this another</font>

679
00:31:10,740 --> 00:31:14,700
<font color="#E5E5E5">way</font><font color="#CCCCCC"> around we would say it's not a</font>

680
00:31:12,120 --> 00:31:16,709
feature<font color="#E5E5E5"> it's a back which is a very</font>

681
00:31:14,700 --> 00:31:18,720
convenient excuse for<font color="#CCCCCC"> a</font><font color="#E5E5E5"> manufacturers</font>

682
00:31:16,710 --> 00:31:20,700
<font color="#E5E5E5">I'm not saying</font><font color="#CCCCCC"> that it happened for</font>

683
00:31:18,720 --> 00:31:24,630
instance in case of Intel<font color="#CCCCCC"> bugs maybe</font>

684
00:31:20,700 --> 00:31:27,450
<font color="#E5E5E5">there are those are bugs but but such</font>

685
00:31:24,630 --> 00:31:30,060
such complex bugs could be used and and

686
00:31:27,450 --> 00:31:32,490
<font color="#CCCCCC">the</font><font color="#E5E5E5"> manufacturer can also later on say</font>

687
00:31:30,060 --> 00:31:35,310
<font color="#CCCCCC">ok this</font><font color="#E5E5E5"> is a back we haven't seen it we</font>

688
00:31:32,490 --> 00:31:37,590
haven't<font color="#E5E5E5"> tested it or it can say this</font>

689
00:31:35,310 --> 00:31:39,360
chip is damaged<font color="#E5E5E5"> so we couldn't do</font>

690
00:31:37,590 --> 00:31:41,610
anything in<font color="#E5E5E5"> case of the dopant Trojans</font>

691
00:31:39,360 --> 00:31:46,080
<font color="#E5E5E5">so we haven't see our our tests haven't</font>

692
00:31:41,610 --> 00:31:49,709
<font color="#E5E5E5">seen or reported the diamond shape</font><font color="#CCCCCC"> okay</font>

693
00:31:46,080 --> 00:31:52,320
so let<font color="#CCCCCC"> me wrap it up for you so who</font>

694
00:31:49,710 --> 00:31:54,120
should fear of her<font color="#CCCCCC"> Hardware Trojans I</font>

695
00:31:52,320 --> 00:31:57,149
think everyone<font color="#E5E5E5"> why because they are very</font>

696
00:31:54,120 --> 00:31:59,159
difficult<font color="#E5E5E5"> to detect and they can</font>

697
00:31:57,150 --> 00:32:00,900
leverage literally all software

698
00:31:59,160 --> 00:32:03,270
mechanism<font color="#CCCCCC"> because you cannot build a</font>

699
00:32:00,900 --> 00:32:06,840
trusted<font color="#CCCCCC"> software on and not trusted</font>

700
00:32:03,270 --> 00:32:09,120
<font color="#CCCCCC">hardware so what what can we do I think</font>

701
00:32:06,840 --> 00:32:11,580
<font color="#CCCCCC">we should build a skill</font><font color="#E5E5E5"> first</font><font color="#CCCCCC"> in</font>

702
00:32:09,120 --> 00:32:14,070
<font color="#E5E5E5">hardware domain so this is a person on</font>

703
00:32:11,580 --> 00:32:17,550
<font color="#E5E5E5">training so not having</font><font color="#CCCCCC"> an rusty branch</font>

704
00:32:14,070 --> 00:32:19,500
of hardware it's not a<font color="#CCCCCC"> solution we can</font>

705
00:32:17,550 --> 00:32:21,200
see this it's called balkanization of

706
00:32:19,500 --> 00:32:23,730
the of the electronic markets right now

707
00:32:21,200 --> 00:32:25,830
<font color="#E5E5E5">certain companies are</font>

708
00:32:23,730 --> 00:32:27,779
blocked in in countries<font color="#E5E5E5"> so they are</font>

709
00:32:25,830 --> 00:32:30,510
saying we are<font color="#CCCCCC"> using only</font><font color="#E5E5E5"> rooters from</font>

710
00:32:27,779 --> 00:32:32,010
our<font color="#E5E5E5"> national production this happened in</font>

711
00:32:30,510 --> 00:32:34,679
<font color="#CCCCCC">the United States this happened in</font>

712
00:32:32,010 --> 00:32:40,679
<font color="#CCCCCC">Australia this happened in in in</font><font color="#E5E5E5"> Germany</font>

713
00:32:34,679 --> 00:32:43,289
in<font color="#CCCCCC"> France so if we have some some kind</font>

714
00:32:40,679 --> 00:32:45,179
<font color="#E5E5E5">of the</font><font color="#CCCCCC"> low-level</font><font color="#E5E5E5"> know-how then we may</font>

715
00:32:43,289 --> 00:32:47,730
start testing<font color="#E5E5E5"> the first thing would</font><font color="#CCCCCC"> be</font>

716
00:32:45,179 --> 00:32:49,710
<font color="#E5E5E5">to test the products it won't prevent</font>

717
00:32:47,730 --> 00:32:54,000
<font color="#E5E5E5">the attacks but it will make them much</font>

718
00:32:49,710 --> 00:32:56,549
<font color="#CCCCCC">more difficult</font><font color="#E5E5E5"> so once again if you are</font>

719
00:32:54,000 --> 00:32:58,080
<font color="#E5E5E5">interested</font><font color="#CCCCCC"> in in in redoing or you want</font>

720
00:32:56,549 --> 00:33:00,299
to see the<font color="#E5E5E5"> sources because you couldn't</font>

721
00:32:58,080 --> 00:33:04,559
<font color="#E5E5E5">do to the small</font><font color="#CCCCCC"> phones you</font><font color="#E5E5E5"> can download</font>

722
00:33:00,299 --> 00:33:07,139
it them from from my github<font color="#CCCCCC"> or you can</font>

723
00:33:04,559 --> 00:33:10,080
check up my<font color="#E5E5E5"> website or if you're</font>

724
00:33:07,139 --> 00:33:12,510
interested in hardware<font color="#E5E5E5"> then you can</font>

725
00:33:10,080 --> 00:33:14,309
check<font color="#CCCCCC"> out my</font><font color="#E5E5E5"> Twitter I will</font><font color="#CCCCCC"> poster if</font>

726
00:33:12,510 --> 00:33:17,190
something new will<font color="#CCCCCC"> come on the website</font>

727
00:33:14,309 --> 00:33:18,809
<font color="#E5E5E5">its nonprofit</font><font color="#CCCCCC"> so thank you very much</font><font color="#E5E5E5"> for</font>

728
00:33:17,190 --> 00:33:20,820
<font color="#E5E5E5">your attention</font><font color="#CCCCCC"> I will be happy to answer</font>

729
00:33:18,809 --> 00:33:30,649
<font color="#E5E5E5">your questions</font>

730
00:33:20,820 --> 00:33:30,649
[Applause]

731
00:33:42,810 --> 00:33:48,610
yes they are<font color="#CCCCCC"> Huawei</font><font color="#E5E5E5"> it's a very good</font>

732
00:33:46,450 --> 00:33:51,370
example<font color="#CCCCCC"> here's a huawei</font><font color="#E5E5E5"> phone I'm naming</font>

733
00:33:48,610 --> 00:33:53,709
them because it's<font color="#E5E5E5"> not illegal to name</font>

734
00:33:51,370 --> 00:33:57,070
them you<font color="#E5E5E5"> can just look for press</font>

735
00:33:53,710 --> 00:33:59,440
articles about<font color="#CCCCCC"> it so you have Huawei is</font>

736
00:33:57,070 --> 00:34:01,929
blocked in Germany<font color="#CCCCCC"> Huawei is</font><font color="#E5E5E5"> blocked</font>

737
00:33:59,440 --> 00:34:04,060
<font color="#CCCCCC">they cannot participate in</font><font color="#E5E5E5"> the contracts</font>

738
00:34:01,930 --> 00:34:05,530
for<font color="#E5E5E5"> critical infrastructure there is a</font>

739
00:34:04,060 --> 00:34:08,529
list of<font color="#E5E5E5"> cons critical infrastructure</font>

740
00:34:05,530 --> 00:34:10,840
<font color="#E5E5E5">components telecommunication</font><font color="#CCCCCC"> so-so</font>

741
00:34:08,530 --> 00:34:13,090
Reuters and and selected switches<font color="#E5E5E5"> and</font>

742
00:34:10,840 --> 00:34:14,649
they cannot participate<font color="#E5E5E5"> due to the</font>

743
00:34:13,090 --> 00:34:19,270
<font color="#CCCCCC">security</font><font color="#E5E5E5"> reasons same happens with</font>

744
00:34:14,649 --> 00:34:20,889
<font color="#CCCCCC">huawei in the United States also</font><font color="#E5E5E5"> Germany</font>

745
00:34:19,270 --> 00:34:22,690
has this initiative email<font color="#E5E5E5"> made in</font>

746
00:34:20,889 --> 00:34:24,279
Germany where they want<font color="#CCCCCC"> their holding</font>

747
00:34:22,690 --> 00:34:26,500
<font color="#E5E5E5">that the email whenever there is</font>

748
00:34:24,280 --> 00:34:30,070
communication<font color="#E5E5E5"> sent within the country</font>

749
00:34:26,500 --> 00:34:32,800
<font color="#E5E5E5">that not even</font><font color="#CCCCCC"> one electron should across</font>

750
00:34:30,070 --> 00:34:33,700
the physical border of the country<font color="#E5E5E5"> so</font>

751
00:34:32,800 --> 00:34:36,610
they would like<font color="#CCCCCC"> to</font><font color="#E5E5E5"> have the</font>

752
00:34:33,699 --> 00:34:39,158
communication components<font color="#E5E5E5"> and within</font>

753
00:34:36,610 --> 00:34:40,659
their<font color="#E5E5E5"> their own country</font><font color="#CCCCCC"> I would give us</font>

754
00:34:39,159 --> 00:34:44,130
another example<font color="#E5E5E5"> even in Czech Republic</font>

755
00:34:40,659 --> 00:34:47,590
they are right now<font color="#E5E5E5"> producing own</font>

756
00:34:44,130 --> 00:34:51,070
switches<font color="#CCCCCC"> they are open source so you can</font>

757
00:34:47,590 --> 00:34:54,010
<font color="#E5E5E5">take a look on them</font><font color="#CCCCCC"> but and did you can</font>

758
00:34:51,070 --> 00:34:58,210
buy<font color="#E5E5E5"> them also on Amazon and they are</font>

759
00:34:54,010 --> 00:35:00,490
<font color="#E5E5E5">using some silicon chips from from</font><font color="#CCCCCC"> third</font>

760
00:34:58,210 --> 00:35:03,190
<font color="#CCCCCC">party manufacturers so</font><font color="#E5E5E5"> mainly from from</font>

761
00:35:00,490 --> 00:35:05,140
United States<font color="#E5E5E5"> and</font><font color="#CCCCCC"> from their fobs</font><font color="#E5E5E5"> but</font>

762
00:35:03,190 --> 00:35:06,760
once they created a switch they can

763
00:35:05,140 --> 00:35:08,259
easier the tech they know what's the

764
00:35:06,760 --> 00:35:10,300
functionality<font color="#CCCCCC"> of the switch</font><font color="#E5E5E5"> and they can</font>

765
00:35:08,260 --> 00:35:12,190
detect which which components can be

766
00:35:10,300 --> 00:35:14,530
<font color="#CCCCCC">substituted for instance or filtered</font>

767
00:35:12,190 --> 00:35:21,610
must be filtered so there are there are

768
00:35:14,530 --> 00:35:23,060
examples things<font color="#E5E5E5"> like this can happen yes</font>

769
00:35:21,610 --> 00:35:28,370
<font color="#E5E5E5">please</font>

770
00:35:23,060 --> 00:35:34,250
<font color="#CCCCCC">I I really don't know I</font><font color="#E5E5E5"> haven't heard</font>

771
00:35:28,370 --> 00:35:36,259
about<font color="#E5E5E5"> it</font><font color="#CCCCCC"> I hope it is</font><font color="#E5E5E5"> because as you've</font>

772
00:35:34,250 --> 00:35:38,030
seen it's it's it's<font color="#E5E5E5"> really it's</font><font color="#CCCCCC"> really</font>

773
00:35:36,260 --> 00:35:41,870
hard to detect if it's so small<font color="#E5E5E5"> like</font>

774
00:35:38,030 --> 00:35:43,250
three lines<font color="#E5E5E5"> of the VHDL code then you</font>

775
00:35:41,870 --> 00:35:46,910
could do for<font color="#E5E5E5"> instance if you would like</font>

776
00:35:43,250 --> 00:35:49,400
<font color="#CCCCCC">to find</font><font color="#E5E5E5"> out my if I have this</font><font color="#CCCCCC"> trojan</font>

777
00:35:46,910 --> 00:35:50,810
then you would what<font color="#E5E5E5"> let's say most</font>

778
00:35:49,400 --> 00:35:53,810
<font color="#E5E5E5">intuitive approach would be to do</font>

779
00:35:50,810 --> 00:35:56,000
fuzzing to go through call all<font color="#CCCCCC"> up codes</font>

780
00:35:53,810 --> 00:35:57,380
which you have in the spark<font color="#CCCCCC"> ISA</font><font color="#E5E5E5"> but then</font>

781
00:35:56,000 --> 00:36:00,890
<font color="#E5E5E5">you would have to run it with all</font>

782
00:35:57,380 --> 00:36:03,260
operands<font color="#CCCCCC"> so all operands and plus it</font>

783
00:36:00,890 --> 00:36:05,359
must not be that<font color="#E5E5E5"> easy because maybe it's</font>

784
00:36:03,260 --> 00:36:09,140
a<font color="#E5E5E5"> combination of of comments which</font><font color="#CCCCCC"> is</font>

785
00:36:05,360 --> 00:36:11,780
triggering such a<font color="#CCCCCC"> Trojan so so so I'm in</font>

786
00:36:09,140 --> 00:36:14,750
my opinion it it should<font color="#E5E5E5"> be available and</font>

787
00:36:11,780 --> 00:36:18,500
<font color="#E5E5E5">I am I</font><font color="#CCCCCC"> I would say</font><font color="#E5E5E5"> not having an</font>

788
00:36:14,750 --> 00:36:25,780
electronic industry has also<font color="#CCCCCC"> security</font>

789
00:36:18,500 --> 00:36:25,780
<font color="#E5E5E5">consequences yes please</font>

790
00:36:47,630 --> 00:36:52,050
so<font color="#E5E5E5"> we are saying we are reversing the</font>

791
00:36:50,460 --> 00:36:53,880
chip and then you<font color="#CCCCCC"> would like to the</font>

792
00:36:52,050 --> 00:36:55,680
problem is when you're reversing<font color="#CCCCCC"> you</font>

793
00:36:53,880 --> 00:37:00,500
have those layers<font color="#E5E5E5"> so you will cut the</font>

794
00:36:55,680 --> 00:37:03,629
layers the<font color="#E5E5E5"> chips are 3d right now so so</font>

795
00:37:00,500 --> 00:37:06,330
then it's already damaged<font color="#CCCCCC"> you cannot</font>

796
00:37:03,630 --> 00:37:09,060
make a photo<font color="#E5E5E5"> if if you are</font><font color="#CCCCCC"> if they are</font>

797
00:37:06,330 --> 00:37:12,029
actually modifying the doping<font color="#E5E5E5"> then the</font>

798
00:37:09,060 --> 00:37:13,950
point is the chip is damaged<font color="#E5E5E5"> because</font>

799
00:37:12,030 --> 00:37:16,110
this inverter gate is not<font color="#E5E5E5"> working</font>

800
00:37:13,950 --> 00:37:18,359
<font color="#CCCCCC">properly so you would probably detect</font><font color="#E5E5E5"> it</font>

801
00:37:16,110 --> 00:37:21,420
during the test<font color="#E5E5E5"> phase however</font><font color="#CCCCCC"> its first</font>

802
00:37:18,360 --> 00:37:23,310
of all convenient<font color="#E5E5E5"> for them to say</font><font color="#CCCCCC"> this</font>

803
00:37:21,420 --> 00:37:25,800
is a damaged chip it happened in the fab

804
00:37:23,310 --> 00:37:27,570
<font color="#E5E5E5">we don't know anything about it we</font>

805
00:37:25,800 --> 00:37:29,340
couldn't<font color="#CCCCCC"> do</font><font color="#E5E5E5"> anything because it happens</font>

806
00:37:27,570 --> 00:37:32,220
whenever your<font color="#CCCCCC"> manufacturer</font><font color="#E5E5E5"> silicon on a</font>

807
00:37:29,340 --> 00:37:33,990
wafer<font color="#CCCCCC"> does part of those wafers the</font>

808
00:37:32,220 --> 00:37:36,810
small chips integrated circuits will<font color="#CCCCCC"> be</font>

809
00:37:33,990 --> 00:37:39,209
damaged by design because<font color="#CCCCCC"> you need an</font>

810
00:37:36,810 --> 00:37:41,190
insane<font color="#CCCCCC"> cleanness you need clean rooms</font>

811
00:37:39,210 --> 00:37:42,810
and so on and because of this you<font color="#CCCCCC"> have</font>

812
00:37:41,190 --> 00:37:56,790
this problem<font color="#CCCCCC"> I</font><font color="#E5E5E5"> don't know if it answer</font>

813
00:37:42,810 --> 00:37:58,529
to your question yeah<font color="#CCCCCC"> it will</font><font color="#E5E5E5"> be</font>

814
00:37:56,790 --> 00:38:02,029
<font color="#CCCCCC">extremely</font><font color="#E5E5E5"> hard</font><font color="#CCCCCC"> III will say it's not</font>

815
00:37:58,530 --> 00:38:02,030
<font color="#E5E5E5">sure you would</font><font color="#CCCCCC"> destroy</font><font color="#E5E5E5"> the chip</font>

816
00:38:06,840 --> 00:38:16,140
<font color="#CCCCCC">I would say</font><font color="#E5E5E5"> extremely</font><font color="#CCCCCC"> difficult</font><font color="#E5E5E5"> it none</font>

817
00:38:12,990 --> 00:38:18,180
<font color="#E5E5E5">no I would say it's it I would rather it</font>

818
00:38:16,140 --> 00:38:20,520
would be cheaper simply to produce a

819
00:38:18,180 --> 00:38:22,759
small series<font color="#E5E5E5"> of chips as a manufacturer</font>

820
00:38:20,520 --> 00:38:25,710
<font color="#CCCCCC">a couple of wafers which are already</font>

821
00:38:22,760 --> 00:38:27,960
designed to be bad and then just put you

822
00:38:25,710 --> 00:38:30,000
if you ordered<font color="#CCCCCC"> 100,000</font><font color="#E5E5E5"> of some</font>

823
00:38:27,960 --> 00:38:32,640
controllers<font color="#CCCCCC"> then just put a small</font>

824
00:38:30,000 --> 00:38:34,860
percentage<font color="#E5E5E5"> 5% and then just count that</font>

825
00:38:32,640 --> 00:38:37,170
maybe<font color="#E5E5E5"> nobody will test it or if they</font>

826
00:38:34,860 --> 00:38:39,360
will test it then maybe they will<font color="#E5E5E5"> over</font>

827
00:38:37,170 --> 00:38:42,180
<font color="#E5E5E5">seen it and so on and then</font><font color="#CCCCCC"> you are</font>

828
00:38:39,360 --> 00:38:43,800
waiting<font color="#E5E5E5"> under those products</font><font color="#CCCCCC"> you're</font>

829
00:38:42,180 --> 00:38:45,270
waiting there on<font color="#CCCCCC"> the market people</font><font color="#E5E5E5"> are</font>

830
00:38:43,800 --> 00:38:46,860
changing<font color="#E5E5E5"> in the companies they</font><font color="#CCCCCC"> are</font>

831
00:38:45,270 --> 00:38:48,480
buying new keyboards they are buying new

832
00:38:46,860 --> 00:38:50,070
memories they are buying new processors

833
00:38:48,480 --> 00:38:53,520
then you are waiting waiting waiting

834
00:38:50,070 --> 00:38:56,040
<font color="#E5E5E5">until they get a</font><font color="#CCCCCC"> certain saturation</font>

835
00:38:53,520 --> 00:38:58,259
point<font color="#CCCCCC"> when when they are through natural</font>

836
00:38:56,040 --> 00:39:00,450
communication<font color="#CCCCCC"> let's say channels</font><font color="#E5E5E5"> within</font>

837
00:38:58,260 --> 00:39:04,910
<font color="#CCCCCC">that organization within</font><font color="#E5E5E5"> your company</font>

838
00:39:00,450 --> 00:39:04,910
<font color="#CCCCCC">and then you are</font><font color="#E5E5E5"> conducting the attack</font>

839
00:39:05,870 --> 00:39:09,140
yes please

840
00:39:23,750 --> 00:39:28,710
that's that's a<font color="#CCCCCC"> very good question so</font>

841
00:39:25,920 --> 00:39:30,779
<font color="#E5E5E5">firstly I have here for you</font><font color="#CCCCCC"> a small</font>

842
00:39:28,710 --> 00:39:33,630
summary<font color="#E5E5E5"> if you'd like to do it at home</font>

843
00:39:30,779 --> 00:39:36,720
<font color="#CCCCCC">you can do this but it will be for for</font>

844
00:39:33,630 --> 00:39:38,250
the chips which are from 70s or 80s<font color="#CCCCCC"> here</font>

845
00:39:36,720 --> 00:39:40,078
is the cost<font color="#CCCCCC"> of</font><font color="#E5E5E5"> the equipment you</font><font color="#CCCCCC"> see</font>

846
00:39:38,250 --> 00:39:42,930
like<font color="#E5E5E5"> three</font><font color="#CCCCCC"> hundred</font><font color="#E5E5E5"> four four basic</font>

847
00:39:40,079 --> 00:39:45,960
microscope used from<font color="#CCCCCC"> 50 it's it's not</font>

848
00:39:42,930 --> 00:39:47,759
<font color="#E5E5E5">that it's not</font><font color="#CCCCCC"> that expensive but as I</font>

849
00:39:45,960 --> 00:39:49,710
said it's it's<font color="#E5E5E5"> working</font><font color="#CCCCCC"> only</font><font color="#E5E5E5"> for</font><font color="#CCCCCC"> a very</font>

850
00:39:47,760 --> 00:39:51,569
<font color="#CCCCCC">small and very old chips</font><font color="#E5E5E5"> with a very</font>

851
00:39:49,710 --> 00:39:53,640
high a<font color="#E5E5E5"> production process but people are</font>

852
00:39:51,569 --> 00:39:57,538
<font color="#E5E5E5">doing it there's this excellent talk</font>

853
00:39:53,640 --> 00:40:01,920
from<font color="#CCCCCC"> Markos Janka</font><font color="#E5E5E5"> and</font><font color="#CCCCCC"> Pettit Luqman from</font>

854
00:39:57,539 --> 00:40:04,289
<font color="#CCCCCC">CCC</font><font color="#E5E5E5"> house</font><font color="#CCCCCC"> Computer Club</font><font color="#E5E5E5"> Congress about</font>

855
00:40:01,920 --> 00:40:07,890
it how to do this at<font color="#CCCCCC"> home</font><font color="#E5E5E5"> FPGAs</font><font color="#CCCCCC"> are</font>

856
00:40:04,289 --> 00:40:10,349
proven to<font color="#E5E5E5"> have</font><font color="#CCCCCC"> also their own Trojans</font><font color="#E5E5E5"> so</font>

857
00:40:07,890 --> 00:40:13,348
there<font color="#E5E5E5"> are articles how to put it if you</font>

858
00:40:10,349 --> 00:40:15,390
in order to<font color="#CCCCCC"> program</font><font color="#E5E5E5"> FPGA you need a</font>

859
00:40:13,349 --> 00:40:17,339
controller which is<font color="#E5E5E5"> setting the values</font>

860
00:40:15,390 --> 00:40:19,410
of the gates<font color="#E5E5E5"> which means that at this</font>

861
00:40:17,339 --> 00:40:21,990
time you can already program it is like

862
00:40:19,410 --> 00:40:23,970
in compilation and very late its

863
00:40:21,990 --> 00:40:27,029
<font color="#E5E5E5">deployment of the image</font><font color="#CCCCCC"> onto the</font><font color="#E5E5E5"> FPGA</font>

864
00:40:23,970 --> 00:40:29,250
<font color="#CCCCCC">and you can still do</font><font color="#E5E5E5"> this so I would say</font>

865
00:40:27,029 --> 00:40:33,630
<font color="#E5E5E5">that the easier thing</font><font color="#CCCCCC"> to do is actually</font>

866
00:40:29,250 --> 00:40:37,380
to to produce<font color="#E5E5E5"> own clean</font><font color="#CCCCCC"> chips than to</font>

867
00:40:33,630 --> 00:40:39,119
even even in<font color="#E5E5E5"> very low technology</font><font color="#CCCCCC"> 1500</font>

868
00:40:37,380 --> 00:40:41,819
<font color="#E5E5E5">for some simple purposes</font><font color="#CCCCCC"> then to try to</font>

869
00:40:39,119 --> 00:40:48,029
reverse the existing chips and<font color="#E5E5E5"> check so</font>

870
00:40:41,819 --> 00:40:50,269
<font color="#CCCCCC">and</font><font color="#E5E5E5"> to check what what's on them yes</font>

871
00:40:48,029 --> 00:40:50,269
<font color="#E5E5E5">please</font>

872
00:40:52,109 --> 00:41:14,440
yeah<font color="#CCCCCC"> you may try to</font><font color="#E5E5E5"> damage them but if</font>

873
00:41:07,960 --> 00:41:16,780
<font color="#CCCCCC">you're produced yes so so so just the</font>

874
00:41:14,440 --> 00:41:18,430
new chips are in<font color="#E5E5E5"> very low process</font><font color="#CCCCCC"> so</font>

875
00:41:16,780 --> 00:41:21,430
<font color="#CCCCCC">it's 7 nanometers right now they're</font>

876
00:41:18,430 --> 00:41:24,009
talking<font color="#CCCCCC"> about</font><font color="#E5E5E5"> it or I don't know</font><font color="#CCCCCC"> 11:17</font>

877
00:41:21,430 --> 00:41:25,808
<font color="#E5E5E5">they are they're</font><font color="#CCCCCC"> very small so even with</font>

878
00:41:24,010 --> 00:41:28,960
this advanced<font color="#E5E5E5"> here on microscope you</font>

879
00:41:25,809 --> 00:41:30,700
won't see much<font color="#CCCCCC"> I've seen</font><font color="#E5E5E5"> people which</font>

880
00:41:28,960 --> 00:41:33,190
are trying<font color="#E5E5E5"> to read from the SIM cards</font>

881
00:41:30,700 --> 00:41:37,049
which are we<font color="#CCCCCC"> her and modify the memory</font>

882
00:41:33,190 --> 00:41:40,089
<font color="#E5E5E5">values so they try to get as</font><font color="#CCCCCC"> MZ code</font>

883
00:41:37,049 --> 00:41:42,009
directly<font color="#E5E5E5"> with with a probe they are they</font>

884
00:41:40,089 --> 00:41:44,259
are putting the probe directly to the

885
00:41:42,010 --> 00:41:46,420
cell memories it's already very

886
00:41:44,260 --> 00:41:48,460
<font color="#CCCCCC">difficult and</font><font color="#E5E5E5"> very</font><font color="#CCCCCC"> expensive process and</font>

887
00:41:46,420 --> 00:41:52,540
<font color="#CCCCCC">it's very easy</font><font color="#E5E5E5"> to destroy the chip so I</font>

888
00:41:48,460 --> 00:41:54,579
would say it's<font color="#CCCCCC"> an hardly and probable</font>

889
00:41:52,540 --> 00:41:56,470
that people will try to<font color="#E5E5E5"> modify the chip</font>

890
00:41:54,579 --> 00:41:58,690
in post-production<font color="#CCCCCC"> I would say it's</font>

891
00:41:56,470 --> 00:42:01,808
rather produced with this with this

892
00:41:58,690 --> 00:42:03,609
<font color="#CCCCCC">backdoor</font><font color="#E5E5E5"> or a certain small amount of</font>

893
00:42:01,809 --> 00:42:07,230
the of the chips which you<font color="#CCCCCC"> order either</font>

894
00:42:03,609 --> 00:42:07,230
<font color="#CCCCCC">in either not I would</font>

895
00:42:35,940 --> 00:42:39,819
yes now I get your point

896
00:42:38,440 --> 00:42:41,319
yes so for instance there are chips

897
00:42:39,819 --> 00:42:43,750
which have<font color="#E5E5E5"> some update possibility a</font>

898
00:42:41,319 --> 00:42:46,359
very<font color="#CCCCCC"> famous example</font><font color="#E5E5E5"> was a proven example</font>

899
00:42:43,750 --> 00:42:48,339
<font color="#CCCCCC">MD have for some small updates a visa</font>

900
00:42:46,359 --> 00:42:50,680
when they when they see that<font color="#CCCCCC"> their chip</font>

901
00:42:48,339 --> 00:42:52,660
is not<font color="#E5E5E5"> working properly they left or</font>

902
00:42:50,680 --> 00:42:55,089
they made a<font color="#E5E5E5"> test when</font><font color="#CCCCCC"> there you have</font>

903
00:42:52,660 --> 00:42:58,000
<font color="#CCCCCC">Micro coded functionality</font><font color="#E5E5E5"> so in micro</font>

904
00:42:55,089 --> 00:43:00,369
<font color="#E5E5E5">code also your assembly instruction that</font>

905
00:42:58,000 --> 00:43:03,190
decoding is<font color="#CCCCCC"> done based on some memory</font>

906
00:43:00,369 --> 00:43:04,779
values<font color="#E5E5E5"> in micro coded processor so it's</font>

907
00:43:03,190 --> 00:43:07,000
proven there are publication<font color="#E5E5E5"> that</font>

908
00:43:04,779 --> 00:43:08,859
<font color="#E5E5E5">through those updates so you can design</font>

909
00:43:07,000 --> 00:43:11,650
<font color="#E5E5E5">you can really design the chip so that</font>

910
00:43:08,859 --> 00:43:15,279
<font color="#CCCCCC">you can modify it however it's very</font>

911
00:43:11,650 --> 00:43:17,680
costly<font color="#E5E5E5"> so so</font><font color="#CCCCCC"> it's a costly</font><font color="#E5E5E5"> it's it</font>

912
00:43:15,279 --> 00:43:20,140
decreases also the speed of the device<font color="#CCCCCC"> I</font>

913
00:43:17,680 --> 00:43:24,368
would say in very<font color="#E5E5E5"> sophisticated devices</font>

914
00:43:20,140 --> 00:43:26,500
<font color="#E5E5E5">you could try to do this but and and as</font>

915
00:43:24,369 --> 00:43:28,059
I say they are publication what they

916
00:43:26,500 --> 00:43:30,130
proven that<font color="#E5E5E5"> you they can put for the</font>

917
00:43:28,059 --> 00:43:31,839
microcode update they can put<font color="#E5E5E5"> that a</font>

918
00:43:30,130 --> 00:43:33,670
<font color="#E5E5E5">Trojan inside of it so this is</font><font color="#CCCCCC"> an</font>

919
00:43:31,839 --> 00:43:36,339
example<font color="#E5E5E5"> they don't have to put the</font>

920
00:43:33,670 --> 00:43:40,119
thermal<font color="#CCCCCC"> and other</font><font color="#E5E5E5"> in factors on it but</font>

921
00:43:36,339 --> 00:43:42,069
if your chip is small and simple<font color="#E5E5E5"> then it</font>

922
00:43:40,119 --> 00:43:44,710
makes no sense<font color="#E5E5E5"> I would say it's it's</font>

923
00:43:42,069 --> 00:43:46,210
it's<font color="#E5E5E5"> it's a lot</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> effort</font><font color="#CCCCCC"> it must be</font>

924
00:43:44,710 --> 00:43:48,460
really someone<font color="#CCCCCC"> who must really want to</font>

925
00:43:46,210 --> 00:43:50,140
<font color="#E5E5E5">do this and it I would say it's a</font>

926
00:43:48,460 --> 00:43:53,880
economical question rather than

927
00:43:50,140 --> 00:43:53,879
<font color="#CCCCCC">technical</font><font color="#E5E5E5"> but technically it's</font><font color="#CCCCCC"> possible</font>

928
00:44:00,550 --> 00:44:05,100
<font color="#E5E5E5">okay thank you very</font><font color="#CCCCCC"> much for the</font>

929
00:44:03,070 --> 00:44:05,100
attention

