1
00:00:01,820 --> 00:00:10,050
thank you<font color="#CCCCCC"> welcome to our lecture</font><font color="#E5E5E5"> we are</font>

2
00:00:06,680 --> 00:00:13,020
just<font color="#E5E5E5"> opening the conference and it's</font>

3
00:00:10,050 --> 00:00:18,300
proud for<font color="#CCCCCC"> us to be the first</font><font color="#E5E5E5"> speakers</font>

4
00:00:13,020 --> 00:00:21,060
today and we will talk about<font color="#E5E5E5"> management</font>

5
00:00:18,300 --> 00:00:24,480
engine and<font color="#E5E5E5"> actually this research was</font>

6
00:00:21,060 --> 00:00:26,759
performed<font color="#E5E5E5"> by</font><font color="#CCCCCC"> three-person Mead Mead</font><font color="#E5E5E5"> is</font>

7
00:00:24,480 --> 00:00:29,850
<font color="#E5E5E5">Claire of my colleague</font><font color="#CCCCCC"> Maxine Qureshi</font>

8
00:00:26,760 --> 00:00:31,260
<font color="#CCCCCC">and other cert colleague mark yermolov</font>

9
00:00:29,850 --> 00:00:34,230
who is not here right<font color="#CCCCCC"> now</font>

10
00:00:31,260 --> 00:00:37,290
and during last two years we<font color="#E5E5E5"> have</font>

11
00:00:34,230 --> 00:00:40,828
published<font color="#E5E5E5"> some presentation and papers</font>

12
00:00:37,290 --> 00:00:43,430
about management<font color="#E5E5E5"> engine and platform</font>

13
00:00:40,829 --> 00:00:46,620
<font color="#CCCCCC">security so if you're interested in</font>

14
00:00:43,430 --> 00:00:49,260
management<font color="#E5E5E5"> engine research we strongly</font>

15
00:00:46,620 --> 00:00:51,780
<font color="#CCCCCC">recommend you to</font><font color="#E5E5E5"> check all this</font>

16
00:00:49,260 --> 00:00:54,089
presentation<font color="#E5E5E5"> after this PDF will be</font>

17
00:00:51,780 --> 00:00:59,219
available so you will be<font color="#CCCCCC"> able</font><font color="#E5E5E5"> to just to</font>

18
00:00:54,090 --> 00:01:01,829
follow<font color="#E5E5E5"> the links</font><font color="#CCCCCC"> on the slide we will</font>

19
00:00:59,219 --> 00:01:05,430
<font color="#E5E5E5">talk about some hardware features</font>

20
00:01:01,829 --> 00:01:08,549
related<font color="#CCCCCC"> to security that</font><font color="#E5E5E5"> available</font>

21
00:01:05,430 --> 00:01:12,440
within into management<font color="#E5E5E5"> engine we will</font>

22
00:01:08,549 --> 00:01:16,260
<font color="#E5E5E5">talk about a very important part of</font>

23
00:01:12,440 --> 00:01:20,060
<font color="#E5E5E5">security mechanism called security fuses</font>

24
00:01:16,260 --> 00:01:23,939
and we will discuss<font color="#E5E5E5"> how Intel engineers</font>

25
00:01:20,060 --> 00:01:26,100
make<font color="#CCCCCC"> decisions about calculating</font><font color="#E5E5E5"> keys</font>

26
00:01:23,939 --> 00:01:28,919
<font color="#E5E5E5">that required for operating cost</font>

27
00:01:26,100 --> 00:01:32,630
<font color="#E5E5E5">management engine and some things that</font>

28
00:01:28,920 --> 00:01:37,380
<font color="#E5E5E5">we consider to be kind of magical some</font>

29
00:01:32,630 --> 00:01:40,170
make some<font color="#CCCCCC"> fun for us</font><font color="#E5E5E5"> if you are not</font>

30
00:01:37,380 --> 00:01:42,630
familiar with<font color="#E5E5E5"> management engine several</font>

31
00:01:40,170 --> 00:01:44,729
words from the very beginning<font color="#E5E5E5"> if you</font>

32
00:01:42,630 --> 00:01:47,250
look at picture at left<font color="#E5E5E5"> you could see</font>

33
00:01:44,729 --> 00:01:48,929
that<font color="#E5E5E5"> intro management engine in the</font>

34
00:01:47,250 --> 00:01:51,900
<font color="#CCCCCC">middle of the computer system it's</font>

35
00:01:48,930 --> 00:01:54,540
official documentation from<font color="#E5E5E5"> Intel so if</font>

36
00:01:51,900 --> 00:01:57,899
you have control<font color="#E5E5E5"> almost over any device</font>

37
00:01:54,540 --> 00:02:00,420
on your computer<font color="#E5E5E5"> if your computer not</font>

38
00:01:57,899 --> 00:02:04,619
older<font color="#CCCCCC"> than</font><font color="#E5E5E5"> 10 years that for sure it</font>

39
00:02:00,420 --> 00:02:07,439
have<font color="#E5E5E5"> management engine inside it story</font>

40
00:02:04,619 --> 00:02:11,099
of<font color="#E5E5E5"> men</font><font color="#CCCCCC"> in tow management engine goes</font>

41
00:02:07,439 --> 00:02:15,000
back to 2005 so<font color="#CCCCCC"> it's more</font><font color="#E5E5E5"> than 10</font><font color="#CCCCCC"> years</font>

42
00:02:11,099 --> 00:02:20,200
of<font color="#CCCCCC"> technology</font><font color="#E5E5E5"> and starting from</font>

43
00:02:15,000 --> 00:02:23,439
<font color="#E5E5E5">here I believe 2012</font><font color="#CCCCCC"> all modern computers</font>

44
00:02:20,200 --> 00:02:26,170
that<font color="#CCCCCC"> produce it on Intel chipsets</font><font color="#E5E5E5"> are</font>

45
00:02:23,439 --> 00:02:30,250
<font color="#CCCCCC">used in tow management engine version 11</font>

46
00:02:26,170 --> 00:02:33,540
<font color="#E5E5E5">or starting from this year</font><font color="#CCCCCC"> mercial</font><font color="#E5E5E5"> 12 in</font>

47
00:02:30,250 --> 00:02:37,900
this speech we will concentrate on

48
00:02:33,540 --> 00:02:41,500
management engine 11 and when we talk

49
00:02:37,900 --> 00:02:45,150
about<font color="#E5E5E5"> privileges and rights that could</font>

50
00:02:41,500 --> 00:02:49,209
be used to<font color="#CCCCCC"> access some data or some</font>

51
00:02:45,150 --> 00:02:51,849
equipment on<font color="#CCCCCC"> your computer system most</font>

52
00:02:49,209 --> 00:02:54,760
of us most<font color="#E5E5E5"> of you I believe use the</font>

53
00:02:51,849 --> 00:02:58,420
classic model user level and kernel

54
00:02:54,760 --> 00:03:02,048
level<font color="#CCCCCC"> zero and drink</font><font color="#E5E5E5"> three and under</font>

55
00:02:58,420 --> 00:03:04,599
that there could be<font color="#E5E5E5"> level that provided</font>

56
00:03:02,049 --> 00:03:06,670
by hypervisor and hypervisor could

57
00:03:04,599 --> 00:03:10,720
control everything conclude kernel mode

58
00:03:06,670 --> 00:03:12,339
but even from kernel administrative

59
00:03:10,720 --> 00:03:14,769
rights you<font color="#E5E5E5"> are unable</font><font color="#CCCCCC"> to control</font>

60
00:03:12,340 --> 00:03:17,530
hypervisor<font color="#E5E5E5"> and under the hypervisor</font>

61
00:03:14,769 --> 00:03:20,260
<font color="#E5E5E5">there is system management mode</font><font color="#CCCCCC"> it's</font>

62
00:03:17,530 --> 00:03:24,160
special mode for central processor that

63
00:03:20,260 --> 00:03:27,069
could operate<font color="#E5E5E5"> on some very important</font>

64
00:03:24,160 --> 00:03:29,379
tasks on the computer<font color="#CCCCCC"> and</font><font color="#E5E5E5"> even from</font>

65
00:03:27,069 --> 00:03:32,440
hypervisor you are you should be<font color="#CCCCCC"> not</font>

66
00:03:29,379 --> 00:03:35,470
able to to control that mode but from

67
00:03:32,440 --> 00:03:38,470
lower mode you're able to<font color="#E5E5E5"> control every</font>

68
00:03:35,470 --> 00:03:40,329
single upper and management engine it's

69
00:03:38,470 --> 00:03:42,478
not a part of central processor<font color="#E5E5E5"> it's</font>

70
00:03:40,329 --> 00:03:46,930
<font color="#E5E5E5">separate processor</font><font color="#CCCCCC"> it's on chipset</font>

71
00:03:42,479 --> 00:03:50,829
<font color="#E5E5E5">micros microchip and it could operate on</font>

72
00:03:46,930 --> 00:03:55,870
every device it could<font color="#E5E5E5"> have access to any</font>

73
00:03:50,829 --> 00:03:58,030
memory including<font color="#CCCCCC"> RAM</font><font color="#E5E5E5"> general memory of</font>

74
00:03:55,870 --> 00:04:02,169
the computer<font color="#CCCCCC"> it could for example</font>

75
00:03:58,030 --> 00:04:04,659
<font color="#E5E5E5">according to documentation on Mt active</font>

76
00:04:02,169 --> 00:04:07,180
management technology from Intel<font color="#CCCCCC"> using</font>

77
00:04:04,659 --> 00:04:11,679
management engine and<font color="#E5E5E5"> AMT you are able</font>

78
00:04:07,180 --> 00:04:14,739
<font color="#CCCCCC">to remotely turn</font><font color="#E5E5E5"> on the computer boot it</font>

79
00:04:11,680 --> 00:04:18,418
from remote<font color="#E5E5E5"> hard drive so it's just</font>

80
00:04:14,739 --> 00:04:22,630
realized that<font color="#E5E5E5"> USB device and relies it</font>

81
00:04:18,418 --> 00:04:25,539
<font color="#E5E5E5">SATA</font><font color="#CCCCCC"> drive and control it in</font><font color="#E5E5E5"> keyboard</font>

82
00:04:22,630 --> 00:04:27,820
video mouse mode<font color="#E5E5E5"> and shutdown</font><font color="#CCCCCC"> the system</font>

83
00:04:25,539 --> 00:04:30,159
<font color="#CCCCCC">and everything could be</font>

84
00:04:27,820 --> 00:04:33,760
<font color="#E5E5E5">not remotely so management engine</font>

85
00:04:30,160 --> 00:04:37,690
<font color="#CCCCCC">provide you you and and developers of</font>

86
00:04:33,760 --> 00:04:40,120
<font color="#CCCCCC">the platform provide a lot of ways to</font>

87
00:04:37,690 --> 00:04:43,000
control<font color="#E5E5E5"> your</font><font color="#CCCCCC"> system</font><font color="#E5E5E5"> so it's very</font>

88
00:04:40,120 --> 00:04:45,730
<font color="#E5E5E5">interesting object for research and</font>

89
00:04:43,000 --> 00:04:48,190
there are<font color="#CCCCCC"> almost no public information</font>

90
00:04:45,730 --> 00:04:50,130
<font color="#E5E5E5">from Intel so you could find very teeny</font>

91
00:04:48,190 --> 00:04:52,540
pieces<font color="#E5E5E5"> of information on</font><font color="#CCCCCC"> internet but</font>

92
00:04:50,130 --> 00:04:55,330
<font color="#E5E5E5">everything else you need to find by</font>

93
00:04:52,540 --> 00:04:59,610
yourself<font color="#E5E5E5"> and during</font><font color="#CCCCCC"> class last couple</font><font color="#E5E5E5"> of</font>

94
00:04:55,330 --> 00:05:04,479
years we made a lot<font color="#CCCCCC"> of efforts to make</font>

95
00:04:59,610 --> 00:05:08,170
<font color="#CCCCCC">our</font><font color="#E5E5E5"> knowledge about it deeper and now we</font>

96
00:05:04,480 --> 00:05:10,900
present next<font color="#E5E5E5"> piece</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> our research so</font>

97
00:05:08,170 --> 00:05:14,220
let's start from a review of security

98
00:05:10,900 --> 00:05:16,929
hardware that<font color="#E5E5E5"> available inside the</font>

99
00:05:14,220 --> 00:05:19,000
management engine again management

100
00:05:16,930 --> 00:05:21,400
engine it's not<font color="#E5E5E5"> a mode</font><font color="#CCCCCC"> of central</font>

101
00:05:19,000 --> 00:05:23,920
processor it's a separate processor and

102
00:05:21,400 --> 00:05:26,679
it's able<font color="#E5E5E5"> to work even when you central</font>

103
00:05:23,920 --> 00:05:29,410
processor is not<font color="#E5E5E5"> powered so when you</font>

104
00:05:26,680 --> 00:05:32,590
plug<font color="#CCCCCC"> your computer</font><font color="#E5E5E5"> in the out power</font>

105
00:05:29,410 --> 00:05:35,650
outlet or just when you<font color="#E5E5E5"> have notebook</font>

106
00:05:32,590 --> 00:05:38,890
<font color="#E5E5E5">with not detachable battery management</font>

107
00:05:35,650 --> 00:05:43,560
<font color="#CCCCCC">engine already works it's already able</font>

108
00:05:38,890 --> 00:05:46,960
<font color="#CCCCCC">to control your computer</font><font color="#E5E5E5"> and there is</font>

109
00:05:43,560 --> 00:05:49,320
some simplified picture<font color="#CCCCCC"> we have many</font>

110
00:05:46,960 --> 00:05:52,690
special<font color="#E5E5E5"> devices that required for</font>

111
00:05:49,320 --> 00:05:55,900
<font color="#E5E5E5">security and actively use it by a</font>

112
00:05:52,690 --> 00:05:58,180
management engine this part of random

113
00:05:55,900 --> 00:06:01,359
access memory is controlled<font color="#CCCCCC"> by</font>

114
00:05:58,180 --> 00:06:03,310
management<font color="#E5E5E5"> engine is not available not</font>

115
00:06:01,360 --> 00:06:05,770
accessible from<font color="#E5E5E5"> central processor its</font>

116
00:06:03,310 --> 00:06:09,520
internal<font color="#E5E5E5"> memory it's a little amount of</font>

117
00:06:05,770 --> 00:06:12,609
<font color="#E5E5E5">it about</font><font color="#CCCCCC"> 2 megabytes</font><font color="#E5E5E5"> but</font><font color="#CCCCCC"> it's</font><font color="#E5E5E5"> needed for</font>

118
00:06:09,520 --> 00:06:15,099
<font color="#E5E5E5">running management engine even when your</font>

119
00:06:12,610 --> 00:06:18,540
main memory<font color="#E5E5E5"> several gigabytes of memory</font>

120
00:06:15,100 --> 00:06:21,640
<font color="#E5E5E5">is not powered on not not available so</font>

121
00:06:18,540 --> 00:06:24,820
we have security fuses device we have

122
00:06:21,640 --> 00:06:27,219
<font color="#E5E5E5">several devices that handle some</font>

123
00:06:24,820 --> 00:06:30,670
cryptographic primitives we have<font color="#E5E5E5"> secure</font>

124
00:06:27,220 --> 00:06:33,760
<font color="#CCCCCC">K storage for storing</font><font color="#E5E5E5"> the keys</font><font color="#CCCCCC"> that use</font>

125
00:06:30,670 --> 00:06:36,640
it inside memory inside management

126
00:06:33,760 --> 00:06:39,700
engine and we have<font color="#E5E5E5"> external flash device</font>

127
00:06:36,640 --> 00:06:41,380
that holds<font color="#E5E5E5"> some data and some</font><font color="#CCCCCC"> code</font><font color="#E5E5E5"> and</font>

128
00:06:39,700 --> 00:06:44,289
so<font color="#E5E5E5"> on</font>

129
00:06:41,380 --> 00:06:47,350
let's start from flash controller<font color="#CCCCCC"> flash</font>

130
00:06:44,290 --> 00:06:49,960
<font color="#E5E5E5">memory holds</font><font color="#CCCCCC"> it's just cheap</font><font color="#E5E5E5"> that</font>

131
00:06:47,350 --> 00:06:52,150
standard ones that somewhere inside<font color="#CCCCCC"> your</font>

132
00:06:49,960 --> 00:06:58,719
computer<font color="#E5E5E5"> usually</font><font color="#CCCCCC"> it's soldered on the</font>

133
00:06:52,150 --> 00:07:01,780
<font color="#CCCCCC">mainboard and its third bias or efe code</font>

134
00:06:58,720 --> 00:07:05,200
also<font color="#CCCCCC"> its</font><font color="#E5E5E5"> third</font><font color="#CCCCCC"> m-e code Emme partitions</font>

135
00:07:01,780 --> 00:07:06,880
are actually big region<font color="#CCCCCC"> dedicated to</font>

136
00:07:05,200 --> 00:07:09,450
<font color="#E5E5E5">management engine and usually it's</font><font color="#CCCCCC"> not</font>

137
00:07:06,880 --> 00:07:13,180
<font color="#CCCCCC">available from operating system and</font>

138
00:07:09,450 --> 00:07:15,820
there<font color="#E5E5E5"> is some data related to Gigabit</font>

139
00:07:13,180 --> 00:07:20,500
Ethernet<font color="#E5E5E5"> and probably there</font><font color="#CCCCCC"> is some</font>

140
00:07:15,820 --> 00:07:23,770
other data<font color="#E5E5E5"> and this flash chip</font>

141
00:07:20,500 --> 00:07:27,520
controller could operate with DMA so you

142
00:07:23,770 --> 00:07:30,700
could just<font color="#CCCCCC"> you could map flash</font><font color="#E5E5E5"> memory</font><font color="#CCCCCC"> to</font>

143
00:07:27,520 --> 00:07:33,520
memory of management engine and also<font color="#CCCCCC"> you</font>

144
00:07:30,700 --> 00:07:36,490
<font color="#E5E5E5">could</font><font color="#CCCCCC"> use some so called</font><font color="#E5E5E5"> Huffman</font>

145
00:07:33,520 --> 00:07:39,430
<font color="#E5E5E5">decompressor some data actually some</font>

146
00:07:36,490 --> 00:07:42,250
code modules of<font color="#E5E5E5"> a management engine</font>

147
00:07:39,430 --> 00:07:45,490
<font color="#E5E5E5">field where compress it with Huffman</font>

148
00:07:42,250 --> 00:07:49,050
encoding<font color="#E5E5E5"> and there is was kind of</font>

149
00:07:45,490 --> 00:07:52,090
challenge to decode this data because

150
00:07:49,050 --> 00:07:53,440
<font color="#E5E5E5">tables are in hardware</font><font color="#CCCCCC"> and there is no</font>

151
00:07:52,090 --> 00:07:58,450
software<font color="#E5E5E5"> equivalents that</font>

152
00:07:53,440 --> 00:08:00,630
Blish it by Intel so to just to analyze

153
00:07:58,450 --> 00:08:03,580
that<font color="#E5E5E5"> code you need</font><font color="#CCCCCC"> to decompress it</font>

154
00:08:00,630 --> 00:08:06,520
<font color="#CCCCCC">someone did it for older version for</font>

155
00:08:03,580 --> 00:08:11,109
management<font color="#E5E5E5"> engine version from</font><font color="#CCCCCC"> 6</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> 10</font>

156
00:08:06,520 --> 00:08:14,859
and we and other guy called<font color="#E5E5E5"> legal</font>

157
00:08:11,110 --> 00:08:16,990
argument made efforts and discovery

158
00:08:14,860 --> 00:08:19,540
tables for<font color="#E5E5E5"> management engine 11 and</font>

159
00:08:16,990 --> 00:08:22,510
about months ago we published tables<font color="#E5E5E5"> for</font>

160
00:08:19,540 --> 00:08:25,990
management<font color="#E5E5E5"> engine 12 in our account at</font>

161
00:08:22,510 --> 00:08:28,480
github<font color="#CCCCCC"> so you</font><font color="#E5E5E5"> could use</font><font color="#CCCCCC"> that code to</font>

162
00:08:25,990 --> 00:08:30,270
decompress models and the compressor is

163
00:08:28,480 --> 00:08:33,250
embedded in

164
00:08:30,270 --> 00:08:35,020
flash controller so it's worked directly

165
00:08:33,250 --> 00:08:37,510
with<font color="#E5E5E5"> management engine without</font>

166
00:08:35,020 --> 00:08:39,669
<font color="#CCCCCC">additional efforts you just tell please</font>

167
00:08:37,510 --> 00:08:41,979
<font color="#E5E5E5">read data from that address to that</font>

168
00:08:39,669 --> 00:08:46,630
<font color="#E5E5E5">place</font><font color="#CCCCCC"> in memory with</font><font color="#E5E5E5"> decompression and</font>

169
00:08:41,979 --> 00:08:49,780
also this man this<font color="#E5E5E5"> flash controller</font>

170
00:08:46,630 --> 00:08:54,010
could operate in<font color="#CCCCCC"> conjunction with</font><font color="#E5E5E5"> ashmac</font>

171
00:08:49,780 --> 00:08:57,150
so data<font color="#E5E5E5"> that read the hash it just</font>

172
00:08:54,010 --> 00:09:00,400
during<font color="#E5E5E5"> the reading and decompression</font>

173
00:08:57,150 --> 00:09:05,230
<font color="#E5E5E5">secure</font><font color="#CCCCCC"> case</font><font color="#E5E5E5"> storage is very interesting</font>

174
00:09:00,400 --> 00:09:08,140
<font color="#E5E5E5">and very significant part of security</font>

175
00:09:05,230 --> 00:09:12,310
<font color="#CCCCCC">model using use it by</font><font color="#E5E5E5"> management engine</font>

176
00:09:08,140 --> 00:09:16,420
and<font color="#CCCCCC"> their storage</font><font color="#E5E5E5"> for multiple keys</font>

177
00:09:12,310 --> 00:09:20,050
some of them<font color="#CCCCCC"> 128 bits in length other</font>

178
00:09:16,420 --> 00:09:23,829
<font color="#E5E5E5">for 256 bit in length and you could put</font>

179
00:09:20,050 --> 00:09:25,510
key inside the man<font color="#E5E5E5"> in size</font><font color="#CCCCCC"> secure key</font>

180
00:09:23,830 --> 00:09:27,400
storage<font color="#E5E5E5"> but you</font><font color="#CCCCCC"> are</font><font color="#E5E5E5"> unable to get it</font>

181
00:09:25,510 --> 00:09:30,850
back<font color="#CCCCCC"> but</font><font color="#E5E5E5"> you could use it for</font>

182
00:09:27,400 --> 00:09:34,390
cryptographic operations like<font color="#E5E5E5"> encryption</font>

183
00:09:30,850 --> 00:09:37,990
or<font color="#E5E5E5"> ashmac calculation and very</font>

184
00:09:34,390 --> 00:09:41,199
interesting feature<font color="#E5E5E5"> that use it very in</font>

185
00:09:37,990 --> 00:09:44,040
very narrow cases but it's used in

186
00:09:41,200 --> 00:09:49,420
inside management engine<font color="#CCCCCC"> it's policies</font>

187
00:09:44,040 --> 00:09:53,050
<font color="#CCCCCC">so you could tell the system</font><font color="#E5E5E5"> that when a</font>

188
00:09:49,420 --> 00:09:55,660
key is put on the secure key<font color="#E5E5E5"> storage you</font>

189
00:09:53,050 --> 00:09:58,870
could use it for<font color="#CCCCCC"> example</font><font color="#E5E5E5"> for decryption</font>

190
00:09:55,660 --> 00:10:01,959
<font color="#E5E5E5">operation and result could be stored</font>

191
00:09:58,870 --> 00:10:04,630
<font color="#CCCCCC">only in</font><font color="#E5E5E5"> secure key storage again so you</font>

192
00:10:01,960 --> 00:10:07,650
could not extract<font color="#E5E5E5"> key and you could not</font>

193
00:10:04,630 --> 00:10:10,990
extract<font color="#CCCCCC"> a result of the key usage but</font>

194
00:10:07,650 --> 00:10:13,240
when you perform encryption of by

195
00:10:10,990 --> 00:10:15,460
advanced encryption standard algorithm

196
00:10:13,240 --> 00:10:19,480
<font color="#E5E5E5">on the same key you could get result in</font>

197
00:10:15,460 --> 00:10:22,810
<font color="#E5E5E5">memory so it's way they protect data</font>

198
00:10:19,480 --> 00:10:26,680
from recovering<font color="#E5E5E5"> to memory so it's very</font>

199
00:10:22,810 --> 00:10:30,069
it's<font color="#E5E5E5"> like TPM but for very specific</font>

200
00:10:26,680 --> 00:10:32,890
tasks they protects from attacks when

201
00:10:30,070 --> 00:10:34,870
attacker<font color="#E5E5E5"> have control inside management</font>

202
00:10:32,890 --> 00:10:36,460
engine because outside<font color="#E5E5E5"> of management</font>

203
00:10:34,870 --> 00:10:38,589
engine you<font color="#CCCCCC"> just unable to access this</font>

204
00:10:36,460 --> 00:10:41,860
<font color="#E5E5E5">device it's not available to central</font>

205
00:10:38,589 --> 00:10:43,960
processor at all<font color="#CCCCCC"> advanced the decryption</font>

206
00:10:41,860 --> 00:10:46,420
standard device<font color="#E5E5E5"> performed worries</font>

207
00:10:43,960 --> 00:10:49,930
simple operations<font color="#CCCCCC"> its perform accretion</font>

208
00:10:46,420 --> 00:10:51,819
encryption and decryption<font color="#CCCCCC"> its</font><font color="#E5E5E5"> have at</font>

209
00:10:49,930 --> 00:10:54,400
<font color="#E5E5E5">least</font><font color="#CCCCCC"> remotes that</font><font color="#E5E5E5"> support it in</font>

210
00:10:51,820 --> 00:10:56,800
<font color="#CCCCCC">Hardware block chaining</font><font color="#E5E5E5"> most electronic</font>

211
00:10:54,400 --> 00:11:04,680
code<font color="#E5E5E5"> books</font><font color="#CCCCCC"> cipher block and the counter</font>

212
00:10:56,800 --> 00:11:04,680
mode<font color="#CCCCCC"> also we could put keys inside</font>

213
00:11:05,310 --> 00:11:11,709
put keys for Advanced Encryption

214
00:11:07,390 --> 00:11:16,230
standard<font color="#E5E5E5"> directly or take it from secure</font>

215
00:11:11,710 --> 00:11:22,120
key storage<font color="#E5E5E5"> and for sure you could just</font>

216
00:11:16,230 --> 00:11:24,430
call DMA<font color="#E5E5E5"> initialization and after that</font>

217
00:11:22,120 --> 00:11:27,640
you<font color="#E5E5E5"> will be</font><font color="#CCCCCC"> able</font><font color="#E5E5E5"> to decrypt or encrypt</font>

218
00:11:24,430 --> 00:11:31,439
data<font color="#E5E5E5"> without using of direct comments</font>

219
00:11:27,640 --> 00:11:36,699
just in stream mode<font color="#CCCCCC"> and actually one of</font>

220
00:11:31,440 --> 00:11:40,540
ideas what<font color="#E5E5E5"> management</font><font color="#CCCCCC"> engine is used for</font>

221
00:11:36,700 --> 00:11:42,100
is protection of digital content<font color="#CCCCCC"> when</font>

222
00:11:40,540 --> 00:11:44,699
you buy<font color="#E5E5E5"> it from internet for example</font>

223
00:11:42,100 --> 00:11:48,400
<font color="#CCCCCC">when you watch video on Netflix</font>

224
00:11:44,700 --> 00:11:51,400
<font color="#CCCCCC">encrypted data pass to memory of your</font>

225
00:11:48,400 --> 00:11:54,670
<font color="#CCCCCC">computer</font><font color="#E5E5E5"> and some encrypted</font><font color="#CCCCCC"> blob this</font>

226
00:11:51,400 --> 00:11:56,439
<font color="#CCCCCC">key is</font><font color="#E5E5E5"> passed on your computers that</font>

227
00:11:54,670 --> 00:11:58,360
<font color="#CCCCCC">blob pass it inside the management</font>

228
00:11:56,440 --> 00:12:01,320
engine management<font color="#E5E5E5"> engine decreed that</font>

229
00:11:58,360 --> 00:12:05,410
<font color="#E5E5E5">blob with keys that not extractable and</font>

230
00:12:01,320 --> 00:12:08,800
decrypt<font color="#E5E5E5"> all the data that make content</font>

231
00:12:05,410 --> 00:12:12,880
of the<font color="#CCCCCC"> video you trying to see and put</font>

232
00:12:08,800 --> 00:12:16,689
it directly in video memory of graphics

233
00:12:12,880 --> 00:12:18,580
card so decrypted content just not shown

234
00:12:16,690 --> 00:12:21,900
in memory of<font color="#E5E5E5"> your</font><font color="#CCCCCC"> computer</font><font color="#E5E5E5"> so</font><font color="#CCCCCC"> you're</font>

235
00:12:18,580 --> 00:12:24,520
<font color="#E5E5E5">unable to steal it and this is one of</font>

236
00:12:21,900 --> 00:12:31,990
goals<font color="#E5E5E5"> that could be achieved by</font><font color="#CCCCCC"> using</font>

237
00:12:24,520 --> 00:12:35,560
this device<font color="#CCCCCC"> sha</font><font color="#E5E5E5"> edge margin used for</font>

238
00:12:31,990 --> 00:12:39,400
calculation hashes and<font color="#CCCCCC"> H Mac based on</font>

239
00:12:35,560 --> 00:12:41,800
sha family hashes<font color="#E5E5E5"> and almost the same it</font>

240
00:12:39,400 --> 00:12:45,970
have different lengths of key for a

241
00:12:41,800 --> 00:12:48,790
<font color="#E5E5E5">'shmock signature calculation you could</font>

242
00:12:45,970 --> 00:12:51,550
use key<font color="#E5E5E5"> directly or from secure key</font>

243
00:12:48,790 --> 00:12:55,540
storage<font color="#E5E5E5"> and you could link iose engine</font>

244
00:12:51,550 --> 00:12:57,699
with a 'shmock engine to make encryption

245
00:12:55,540 --> 00:13:01,390
with hashing or

246
00:12:57,700 --> 00:13:07,090
<font color="#E5E5E5">hache increase decryption in one in</font><font color="#CCCCCC"> one</font>

247
00:13:01,390 --> 00:13:10,540
request<font color="#CCCCCC"> very fast</font><font color="#E5E5E5"> res a engine is for</font>

248
00:13:07,090 --> 00:13:13,180
sure for<font color="#CCCCCC"> SI encryption</font><font color="#E5E5E5"> we see the code</font>

249
00:13:10,540 --> 00:13:16,030
that deals<font color="#E5E5E5"> with RSA signature</font>

250
00:13:13,180 --> 00:13:18,670
verification in<font color="#E5E5E5"> Rome in some</font><font color="#CCCCCC"> fix-it part</font>

251
00:13:16,030 --> 00:13:21,130
of<font color="#E5E5E5"> management engine that again not</font>

252
00:13:18,670 --> 00:13:24,719
available to central processor not

253
00:13:21,130 --> 00:13:27,340
<font color="#E5E5E5">changeable by firmware update but using</font>

254
00:13:24,720 --> 00:13:30,460
<font color="#E5E5E5">exploit that</font><font color="#CCCCCC"> was developed by maximum</font>

255
00:13:27,340 --> 00:13:33,100
<font color="#E5E5E5">mark we were able</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> dump that</font><font color="#CCCCCC"> roam and</font>

256
00:13:30,460 --> 00:13:37,000
<font color="#E5E5E5">analyze it content and</font><font color="#CCCCCC"> figure out</font><font color="#E5E5E5"> how it</font>

257
00:13:33,100 --> 00:13:41,220
<font color="#E5E5E5">works</font><font color="#CCCCCC"> and here is the picture from my</font>

258
00:13:37,000 --> 00:13:47,470
presentation<font color="#E5E5E5"> from troopers last year</font>

259
00:13:41,220 --> 00:13:50,500
<font color="#E5E5E5">here is generalized picture of layout of</font>

260
00:13:47,470 --> 00:13:53,470
secrecy in partition of<font color="#E5E5E5"> management</font>

261
00:13:50,500 --> 00:13:57,700
engine when you need<font color="#CCCCCC"> to run</font><font color="#E5E5E5"> code from</font>

262
00:13:53,470 --> 00:13:59,950
<font color="#E5E5E5">management engine from flesh management</font>

263
00:13:57,700 --> 00:14:05,590
engine make a lot of<font color="#E5E5E5"> verification that</font>

264
00:13:59,950 --> 00:14:08,710
code is<font color="#E5E5E5"> properly signed and this part is</font>

265
00:14:05,590 --> 00:14:10,510
signed with RSA key and hash of<font color="#CCCCCC"> that key</font>

266
00:14:08,710 --> 00:14:14,980
<font color="#CCCCCC">is stored in the ROM</font><font color="#E5E5E5"> there are eight</font>

267
00:14:10,510 --> 00:14:17,380
such keys and you need to use<font color="#E5E5E5"> private</font>

268
00:14:14,980 --> 00:14:19,930
key one of that<font color="#CCCCCC"> eight keys to be able to</font>

269
00:14:17,380 --> 00:14:23,170
sign the partition<font color="#E5E5E5"> that</font><font color="#CCCCCC"> could hold code</font>

270
00:14:19,930 --> 00:14:25,180
that will be<font color="#CCCCCC"> loaded and</font><font color="#E5E5E5"> rent by</font>

271
00:14:23,170 --> 00:14:28,479
management engine so it's almost

272
00:14:25,180 --> 00:14:33,430
impossible<font color="#CCCCCC"> to run your own code if you</font>

273
00:14:28,480 --> 00:14:36,390
don't have a recipe<font color="#E5E5E5"> secret key that</font><font color="#CCCCCC"> hold</font>

274
00:14:33,430 --> 00:14:40,870
it by<font color="#E5E5E5"> Intel or maybe some other parties</font>

275
00:14:36,390 --> 00:14:43,590
so here is the first<font color="#E5E5E5"> place where we see</font>

276
00:14:40,870 --> 00:14:47,020
our<font color="#CCCCCC"> say engine use it</font>

277
00:14:43,590 --> 00:14:49,330
<font color="#E5E5E5">rc4 engine actually</font><font color="#CCCCCC"> we were little bit</font>

278
00:14:47,020 --> 00:14:53,140
surprised it that we find references<font color="#E5E5E5"> to</font>

279
00:14:49,330 --> 00:14:55,210
<font color="#E5E5E5">that engine</font><font color="#CCCCCC"> because this algorithm</font><font color="#E5E5E5"> it's</font>

280
00:14:53,140 --> 00:14:57,040
it's<font color="#E5E5E5"> pretty good algorithm but it's not</font>

281
00:14:55,210 --> 00:15:00,310
<font color="#CCCCCC">considered to be really good right now</font>

282
00:14:57,040 --> 00:15:03,370
<font color="#CCCCCC">and most</font><font color="#E5E5E5"> probably it's used just</font><font color="#CCCCCC"> for</font>

283
00:15:00,310 --> 00:15:05,890
backward<font color="#CCCCCC"> compatibility with all</font><font color="#E5E5E5"> these</font>

284
00:15:03,370 --> 00:15:06,460
protocols to support for<font color="#E5E5E5"> example</font><font color="#CCCCCC"> by</font>

285
00:15:05,890 --> 00:15:10,790
<font color="#CCCCCC">firing</font>

286
00:15:06,460 --> 00:15:13,520
encryption<font color="#E5E5E5"> modes or SSL</font>

287
00:15:10,790 --> 00:15:15,730
and the<font color="#E5E5E5"> next important part is security</font>

288
00:15:13,520 --> 00:15:19,699
fuses and now<font color="#E5E5E5"> with the</font><font color="#CCCCCC"> word still</font><font color="#E5E5E5"> Maxim</font>

289
00:15:15,730 --> 00:15:22,280
hello everybody<font color="#CCCCCC"> I will talk</font><font color="#E5E5E5"> about</font>

290
00:15:19,700 --> 00:15:25,520
security fuses<font color="#E5E5E5"> security fuses plays a</font>

291
00:15:22,280 --> 00:15:32,140
key role in all cryptography operation

292
00:15:25,520 --> 00:15:35,480
in<font color="#CCCCCC"> Amim as well as we will see later</font><font color="#E5E5E5"> all</font>

293
00:15:32,140 --> 00:15:42,080
security key generated on the<font color="#E5E5E5"> base of</font>

294
00:15:35,480 --> 00:15:46,390
these security fuses<font color="#CCCCCC"> so it's value</font>

295
00:15:42,080 --> 00:15:54,850
initialized<font color="#E5E5E5"> on the some production phase</font>

296
00:15:46,390 --> 00:16:01,000
and this memory<font color="#E5E5E5"> is cannot be re-written</font>

297
00:15:54,850 --> 00:16:06,770
because if you attacker can be read or

298
00:16:01,000 --> 00:16:13,250
changing the key this key<font color="#CCCCCC"> then he can to</font>

299
00:16:06,770 --> 00:16:16,610
compromise<font color="#E5E5E5"> all platform and this really</font>

300
00:16:13,250 --> 00:16:22,070
unique<font color="#CCCCCC"> for each piece a chip it means</font>

301
00:16:16,610 --> 00:16:27,940
that it is main secret<font color="#E5E5E5"> for your</font><font color="#CCCCCC"> platform</font>

302
00:16:22,070 --> 00:16:32,230
<font color="#E5E5E5">and even interest engineers cannot</font>

303
00:16:27,940 --> 00:16:38,480
couldn't<font color="#CCCCCC"> act can't</font><font color="#E5E5E5"> access to this secret</font>

304
00:16:32,230 --> 00:16:41,360
<font color="#E5E5E5">for example when he used debugger for he</font>

305
00:16:38,480 --> 00:16:45,680
can use<font color="#CCCCCC"> JTAG for debugging</font><font color="#E5E5E5"> Emmy for</font>

306
00:16:41,360 --> 00:16:51,340
example on this slide<font color="#E5E5E5"> you can</font><font color="#CCCCCC"> see how</font>

307
00:16:45,680 --> 00:16:59,449
it's implemented in<font color="#E5E5E5"> wrong fuses</font>

308
00:16:51,340 --> 00:17:04,130
available only<font color="#E5E5E5"> same same short time in</font>

309
00:16:59,450 --> 00:17:11,110
in the ROM<font color="#CCCCCC"> phase after</font><font color="#E5E5E5"> that ROM close it</font>

310
00:17:04,130 --> 00:17:15,890
access to to this memory<font color="#CCCCCC"> and if you</font>

311
00:17:11,109 --> 00:17:21,438
platform<font color="#CCCCCC"> if you if on you platform</font>

312
00:17:15,890 --> 00:17:24,890
activated<font color="#CCCCCC"> JTAG</font><font color="#E5E5E5"> for example</font><font color="#CCCCCC"> vendor GTECH</font>

313
00:17:21,439 --> 00:17:28,250
type it called<font color="#CCCCCC"> orange</font><font color="#E5E5E5"> and</font>

314
00:17:24,890 --> 00:17:33,470
you cannot give any<font color="#CCCCCC"> information about</font>

315
00:17:28,250 --> 00:17:37,120
all keys<font color="#CCCCCC"> but if you have read unlock</font><font color="#E5E5E5"> its</font>

316
00:17:33,470 --> 00:17:40,549
<font color="#CCCCCC">Intel Sun lock</font><font color="#E5E5E5"> you can read some</font>

317
00:17:37,120 --> 00:17:47,809
<font color="#CCCCCC">information for</font><font color="#E5E5E5"> the bug</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> file system</font>

318
00:17:40,549 --> 00:17:57,470
<font color="#CCCCCC">you think ok</font><font color="#E5E5E5"> defuses we</font><font color="#CCCCCC"> divide into</font><font color="#E5E5E5"> four</font>

319
00:17:47,809 --> 00:18:01,760
<font color="#E5E5E5">parts</font><font color="#CCCCCC"> because some will because we don't</font>

320
00:17:57,470 --> 00:18:05,960
have<font color="#E5E5E5"> access</font><font color="#CCCCCC"> to fuses value but some</font>

321
00:18:01,760 --> 00:18:07,669
values can be obtained<font color="#E5E5E5"> for example we</font>

322
00:18:05,960 --> 00:18:11,720
can recovered

323
00:18:07,669 --> 00:18:17,270
<font color="#E5E5E5">we recovered</font><font color="#CCCCCC"> ft p.m. he Pete and non</font>

324
00:18:11,720 --> 00:18:25,130
<font color="#CCCCCC">Sookie</font><font color="#E5E5E5"> from our platform for for our</font>

325
00:18:17,270 --> 00:18:30,110
<font color="#E5E5E5">platform and we can also recover</font><font color="#CCCCCC"> rapid</font>

326
00:18:25,130 --> 00:18:36,710
key<font color="#CCCCCC"> we couldn't recover rapid key but we</font>

327
00:18:30,110 --> 00:18:40,820
we<font color="#E5E5E5"> can use some data which generated on</font>

328
00:18:36,710 --> 00:18:46,070
the<font color="#E5E5E5"> on this base for next calculation</font>

329
00:18:40,820 --> 00:18:50,658
and<font color="#E5E5E5"> we don't we didn't have rapid</font>

330
00:18:46,070 --> 00:18:54,020
schmucky<font color="#E5E5E5"> all right on this picture</font><font color="#CCCCCC"> each</font>

331
00:18:50,659 --> 00:18:57,110
<font color="#E5E5E5">it is main secret of your platform</font>

332
00:18:54,020 --> 00:19:04,549
if attacker have access to this

333
00:18:57,110 --> 00:19:07,158
information<font color="#CCCCCC"> he can generate all key for</font>

334
00:19:04,549 --> 00:19:12,200
<font color="#E5E5E5">your platform and for example he can try</font>

335
00:19:07,159 --> 00:19:17,510
to<font color="#CCCCCC"> execute</font><font color="#E5E5E5"> codes in in in how this key</font>

336
00:19:12,200 --> 00:19:25,700
is used in file system<font color="#CCCCCC"> Dimitri please</font>

337
00:19:17,510 --> 00:19:29,059
tell<font color="#CCCCCC"> about it so several</font><font color="#E5E5E5"> words about how</font>

338
00:19:25,700 --> 00:19:34,490
his<font color="#CCCCCC"> derive</font><font color="#E5E5E5"> it and store it inside</font>

339
00:19:29,059 --> 00:19:37,030
management engine again<font color="#CCCCCC"> last</font><font color="#E5E5E5"> year in</font>

340
00:19:34,490 --> 00:19:39,580
<font color="#E5E5E5">December in black Europe</font>

341
00:19:37,030 --> 00:19:41,680
<font color="#CCCCCC">I made a presentation about security of</font>

342
00:19:39,580 --> 00:19:43,960
<font color="#E5E5E5">file systems that use it internally by</font><font color="#CCCCCC"> a</font>

343
00:19:41,680 --> 00:19:47,500
management engine and here is picture

344
00:19:43,960 --> 00:19:50,620
<font color="#E5E5E5">from</font><font color="#CCCCCC"> that presentation and</font><font color="#E5E5E5"> actually</font>

345
00:19:47,500 --> 00:19:53,550
there<font color="#CCCCCC"> are up to ten keys are used to</font>

346
00:19:50,620 --> 00:19:56,290
<font color="#CCCCCC">protect secrecy and integrity of</font><font color="#E5E5E5"> data of</font>

347
00:19:53,550 --> 00:19:58,810
<font color="#CCCCCC">that store it on the flesh</font><font color="#E5E5E5"> system during</font>

348
00:19:56,290 --> 00:20:02,200
<font color="#E5E5E5">runtime</font><font color="#CCCCCC"> of management engine and there</font>

349
00:19:58,810 --> 00:20:07,379
are two sets of key called current keys

350
00:20:02,200 --> 00:20:11,350
and previous keys and the difference is

351
00:20:07,380 --> 00:20:15,730
with<font color="#E5E5E5"> the SVN secure version number</font><font color="#CCCCCC"> Intel</font>

352
00:20:11,350 --> 00:20:18,850
makes<font color="#E5E5E5"> decisions that in some situations</font>

353
00:20:15,730 --> 00:20:21,760
they need to upgrade version of

354
00:20:18,850 --> 00:20:24,149
management engine and prevent a<font color="#E5E5E5"> rollback</font>

355
00:20:21,760 --> 00:20:27,820
to previous version because<font color="#E5E5E5"> of serious</font>

356
00:20:24,150 --> 00:20:29,650
<font color="#E5E5E5">security</font><font color="#CCCCCC"> issue</font><font color="#E5E5E5"> and in documentation you</font>

357
00:20:27,820 --> 00:20:32,350
could find information<font color="#CCCCCC"> that</font><font color="#E5E5E5"> when such</font>

358
00:20:29,650 --> 00:20:35,290
situation happens<font color="#E5E5E5"> new firmware will have</font>

359
00:20:32,350 --> 00:20:40,360
a bigger<font color="#E5E5E5"> version of</font><font color="#CCCCCC"> SVN security version</font>

360
00:20:35,290 --> 00:20:42,790
<font color="#E5E5E5">number that earlier but encryption key</font>

361
00:20:40,360 --> 00:20:44,679
for file system<font color="#CCCCCC"> are depends on current</font>

362
00:20:42,790 --> 00:20:47,470
<font color="#CCCCCC">security where a security version number</font>

363
00:20:44,680 --> 00:20:50,260
<font color="#CCCCCC">souls they need to hold</font><font color="#E5E5E5"> a previous</font>

364
00:20:47,470 --> 00:20:53,080
<font color="#E5E5E5">version and the next version current</font>

365
00:20:50,260 --> 00:20:55,540
version in memory together<font color="#E5E5E5"> just to</font>

366
00:20:53,080 --> 00:20:58,360
decrypt all encryption encryption made

367
00:20:55,540 --> 00:21:02,670
on old keys and Riaan creep them so they

368
00:20:58,360 --> 00:21:06,729
need<font color="#CCCCCC"> to</font><font color="#E5E5E5"> calculate both keys and inside</font>

369
00:21:02,670 --> 00:21:10,230
<font color="#CCCCCC">one</font><font color="#E5E5E5"> version we have two types of key the</font>

370
00:21:06,730 --> 00:21:14,640
keys for<font color="#CCCCCC"> integrity checking and keys for</font>

371
00:21:10,230 --> 00:21:17,170
providing secrecy for is encryption<font color="#CCCCCC"> and</font>

372
00:21:14,640 --> 00:21:20,260
both keys could be a<font color="#CCCCCC"> so-called</font>

373
00:21:17,170 --> 00:21:23,050
<font color="#CCCCCC">intel</font><font color="#E5E5E5"> keys and non intel keys name of</font>

374
00:21:20,260 --> 00:21:27,340
keys actually it's our guessing but

375
00:21:23,050 --> 00:21:30,550
<font color="#E5E5E5">Intel engineers in most cases</font><font color="#CCCCCC"> just using</font>

376
00:21:27,340 --> 00:21:35,850
<font color="#E5E5E5">text string during calculation of keys</font>

377
00:21:30,550 --> 00:21:40,690
they use secret<font color="#E5E5E5"> base it from fuses and</font>

378
00:21:35,850 --> 00:21:44,230
just use<font color="#CCCCCC"> it</font><font color="#E5E5E5"> as a key for</font><font color="#CCCCCC"> ashmac and pass</font>

379
00:21:40,690 --> 00:21:46,090
the string to<font color="#E5E5E5"> ashmac function as a data</font>

380
00:21:44,230 --> 00:21:49,030
so we<font color="#E5E5E5"> name</font>

381
00:21:46,090 --> 00:21:50,709
keys<font color="#E5E5E5"> after that strings and also two</font>

382
00:21:49,030 --> 00:21:53,168
additional<font color="#E5E5E5"> keys</font>

383
00:21:50,710 --> 00:21:56,770
is for<font color="#CCCCCC"> replay protected monotonic</font>

384
00:21:53,169 --> 00:21:59,080
counter<font color="#E5E5E5"> it's some feature of a spy flash</font>

385
00:21:56,770 --> 00:22:02,408
controller we never see such controller

386
00:21:59,080 --> 00:22:04,570
in the wild<font color="#E5E5E5"> but when controller supports</font>

387
00:22:02,409 --> 00:22:07,690
this<font color="#CCCCCC"> feature you</font><font color="#E5E5E5"> will be unable to mate</font>

388
00:22:04,570 --> 00:22:11,580
<font color="#E5E5E5">rollback of data so when you write some</font>

389
00:22:07,690 --> 00:22:15,210
data<font color="#CCCCCC"> this number is increasing and you</font>

390
00:22:11,580 --> 00:22:18,010
cannot write<font color="#E5E5E5"> older data without</font>

391
00:22:15,210 --> 00:22:20,049
modifying this counter<font color="#E5E5E5"> but when this</font>

392
00:22:18,010 --> 00:22:23,620
counter not match the data that store it

393
00:22:20,049 --> 00:22:27,580
in some special file system considers

394
00:22:23,620 --> 00:22:33,189
that data was broken and<font color="#CCCCCC"> stop</font><font color="#E5E5E5"> operation</font>

395
00:22:27,580 --> 00:22:37,389
so<font color="#E5E5E5"> this keys are for rollback protection</font>

396
00:22:33,190 --> 00:22:39,700
but in our platform<font color="#E5E5E5"> this feature was</font>

397
00:22:37,390 --> 00:22:41,950
implemented in software<font color="#E5E5E5"> and we were able</font>

398
00:22:39,700 --> 00:22:43,539
<font color="#CCCCCC">to override</font><font color="#E5E5E5"> it completely because we</font>

399
00:22:41,950 --> 00:22:46,990
were able<font color="#CCCCCC"> to calculate all that keys</font>

400
00:22:43,539 --> 00:22:49,980
<font color="#E5E5E5">that shown</font><font color="#CCCCCC"> on this picture and here is</font>

401
00:22:46,990 --> 00:22:53,399
two slides about<font color="#E5E5E5"> calculation of the key</font>

402
00:22:49,980 --> 00:22:57,250
<font color="#E5E5E5">everything starts from</font><font color="#CCCCCC"> rapidash Maki</font><font color="#E5E5E5"> and</font>

403
00:22:53,399 --> 00:22:59,649
we use is decryption<font color="#CCCCCC"> using some key we</font>

404
00:22:57,250 --> 00:23:02,559
believe that key is completely filled<font color="#E5E5E5"> by</font>

405
00:22:59,649 --> 00:23:05,620
<font color="#CCCCCC">zeroes</font><font color="#E5E5E5"> but we are unable</font><font color="#CCCCCC"> to check it</font>

406
00:23:02,559 --> 00:23:11,230
<font color="#E5E5E5">because we have no access</font><font color="#CCCCCC"> at</font><font color="#E5E5E5"> that point</font>

407
00:23:05,620 --> 00:23:14,289
<font color="#CCCCCC">due</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> the device so keys are key stored</font>

408
00:23:11,230 --> 00:23:17,919
in fuses decrypted and stored in

409
00:23:14,289 --> 00:23:22,360
security key storage in slot<font color="#CCCCCC"> number</font><font color="#E5E5E5"> 12</font>

410
00:23:17,919 --> 00:23:25,270
then<font color="#E5E5E5"> this key is used to calculate H</font><font color="#CCCCCC"> Mak</font>

411
00:23:22,360 --> 00:23:27,549
for two strings<font color="#E5E5E5"> one of them CC wrapping</font>

412
00:23:25,270 --> 00:23:29,980
key and<font color="#E5E5E5"> another one CC internal root key</font>

413
00:23:27,549 --> 00:23:36,700
+ sv n numbers and number is<font color="#E5E5E5"> just one</font>

414
00:23:29,980 --> 00:23:38,919
byte number<font color="#E5E5E5"> so we get</font><font color="#CCCCCC"> wrap wrapping</font><font color="#E5E5E5"> keys</font>

415
00:23:36,700 --> 00:23:45,010
<font color="#E5E5E5">that's stored in slow and slow 21 and</font>

416
00:23:38,919 --> 00:23:48,730
then we wrap this data with this key and

417
00:23:45,010 --> 00:23:51,220
put it on memory<font color="#E5E5E5"> so this piece just line</font>

418
00:23:48,730 --> 00:23:53,529
<font color="#E5E5E5">memory between stages of execution of</font>

419
00:23:51,220 --> 00:23:56,980
<font color="#E5E5E5">management engine here is wrong stages</font>

420
00:23:53,529 --> 00:24:00,340
so another key is calculated from<font color="#E5E5E5"> nan</font>

421
00:23:56,980 --> 00:24:03,820
<font color="#E5E5E5">into root key and the finest things that</font>

422
00:24:00,340 --> 00:24:04,389
we find<font color="#CCCCCC"> that when you're activated JTAC</font>

423
00:24:03,820 --> 00:24:07,659
you

424
00:24:04,390 --> 00:24:12,430
<font color="#CCCCCC">were able to</font><font color="#E5E5E5"> read this key so all</font>

425
00:24:07,660 --> 00:24:17,110
secrecy<font color="#E5E5E5"> and integrity that</font><font color="#CCCCCC"> base</font><font color="#E5E5E5"> it on</font>

426
00:24:12,430 --> 00:24:20,260
this key could be<font color="#E5E5E5"> broken</font><font color="#CCCCCC"> if</font><font color="#E5E5E5"> you once</font>

427
00:24:17,110 --> 00:24:23,709
have ability to<font color="#CCCCCC"> run your coat on</font><font color="#E5E5E5"> the</font>

428
00:24:20,260 --> 00:24:26,379
platform<font color="#E5E5E5"> so</font><font color="#CCCCCC"> algorithm is almost the same</font>

429
00:24:23,710 --> 00:24:29,200
<font color="#E5E5E5">it's again</font><font color="#CCCCCC"> use it to calculate a schmuck</font>

430
00:24:26,380 --> 00:24:31,570
<font color="#E5E5E5">from some string plus a security version</font>

431
00:24:29,200 --> 00:24:34,650
<font color="#E5E5E5">number</font><font color="#CCCCCC"> and this key is</font><font color="#E5E5E5"> wrap</font><font color="#CCCCCC"> it and store</font>

432
00:24:31,570 --> 00:24:40,600
<font color="#E5E5E5">it in memory just under as a name and</font>

433
00:24:34,650 --> 00:24:43,840
later in<font color="#CCCCCC"> Bop stage</font><font color="#E5E5E5"> but it's a shortcut</font>

434
00:24:40,600 --> 00:24:48,959
<font color="#E5E5E5">for bringing up its main module that</font>

435
00:24:43,840 --> 00:24:51,610
runs on user level of execution so in

436
00:24:48,960 --> 00:24:53,590
management engines there is like central

437
00:24:51,610 --> 00:24:57,100
processor there is<font color="#CCCCCC"> root a kernel mode</font>

438
00:24:53,590 --> 00:25:01,389
and user mode<font color="#E5E5E5"> and in kernel</font><font color="#CCCCCC"> mode there</font>

439
00:24:57,100 --> 00:25:04,139
is<font color="#CCCCCC"> rome kernel and RB e module and in</font>

440
00:25:01,390 --> 00:25:07,120
user mode there are<font color="#E5E5E5"> everything else and</font>

441
00:25:04,140 --> 00:25:09,130
this<font color="#CCCCCC"> is first and</font><font color="#E5E5E5"> mind</font><font color="#CCCCCC"> modules that run</font>

442
00:25:07,120 --> 00:25:13,659
in user level<font color="#E5E5E5"> it's initialized</font>

443
00:25:09,130 --> 00:25:16,540
<font color="#E5E5E5">everything from user stage and this</font>

444
00:25:13,660 --> 00:25:20,500
module<font color="#E5E5E5"> just access</font><font color="#CCCCCC"> to the memory</font><font color="#E5E5E5"> storage</font>

445
00:25:16,540 --> 00:25:24,280
<font color="#CCCCCC">keys</font><font color="#E5E5E5"> use keys that holes in security</font>

446
00:25:20,500 --> 00:25:27,070
<font color="#E5E5E5">storage and one word back this key will</font>

447
00:25:24,280 --> 00:25:29,590
be raised from<font color="#E5E5E5"> memory from a secure key</font>

448
00:25:27,070 --> 00:25:33,909
storage<font color="#CCCCCC"> after a ROM</font><font color="#E5E5E5"> finished its work</font>

449
00:25:29,590 --> 00:25:36,010
before it<font color="#CCCCCC"> passed</font><font color="#E5E5E5"> control to</font><font color="#CCCCCC"> RBE</font><font color="#E5E5E5"> so you</font>

450
00:25:33,910 --> 00:25:38,800
will use this key because it's still

451
00:25:36,010 --> 00:25:41,620
reside in secure<font color="#E5E5E5"> key storage to unwrap</font>

452
00:25:38,800 --> 00:25:44,889
keys but<font color="#E5E5E5"> unwrap it value could not be</font>

453
00:25:41,620 --> 00:25:49,000
stored in memory so this<font color="#CCCCCC"> male this</font><font color="#E5E5E5"> value</font>

454
00:25:44,890 --> 00:25:52,210
is<font color="#CCCCCC"> used through secure K</font><font color="#E5E5E5"> storage to</font>

455
00:25:49,000 --> 00:25:54,940
calculate H mark for another<font color="#E5E5E5"> keys result</font>

456
00:25:52,210 --> 00:25:57,700
for short time stored in memory and then

457
00:25:54,940 --> 00:26:00,520
wrap it<font color="#E5E5E5"> with the same key and after that</font>

458
00:25:57,700 --> 00:26:02,680
<font color="#E5E5E5">store it in memory and this part are</font>

459
00:26:00,520 --> 00:26:05,920
resides in memory for a long<font color="#E5E5E5"> time and</font>

460
00:26:02,680 --> 00:26:10,510
later pass it to VFS module<font color="#E5E5E5"> that use it</font>

461
00:26:05,920 --> 00:26:13,060
<font color="#E5E5E5">for accessing to file system it's like a</font>

462
00:26:10,510 --> 00:26:15,670
service model for other modules<font color="#E5E5E5"> that</font>

463
00:26:13,060 --> 00:26:18,250
<font color="#E5E5E5">requires file storage so you could see</font>

464
00:26:15,670 --> 00:26:21,790
<font color="#E5E5E5">that these</font><font color="#CCCCCC"> four keys</font>

465
00:26:18,250 --> 00:26:27,070
that was shown on<font color="#E5E5E5"> these</font><font color="#CCCCCC"> slides these</font>

466
00:26:21,790 --> 00:26:29,139
four keys<font color="#CCCCCC"> they are stored in memory in</font>

467
00:26:27,070 --> 00:26:31,870
plain text for very<font color="#E5E5E5"> short time</font><font color="#CCCCCC"> just</font>

468
00:26:29,140 --> 00:26:34,150
after<font color="#E5E5E5"> calculation before they</font><font color="#CCCCCC"> are rapid</font>

469
00:26:31,870 --> 00:26:35,770
<font color="#E5E5E5">and they</font><font color="#CCCCCC"> after that</font><font color="#E5E5E5"> erases from memory</font>

470
00:26:34,150 --> 00:26:40,360
and you will<font color="#E5E5E5"> be unable to find</font><font color="#CCCCCC"> it in</font>

471
00:26:35,770 --> 00:26:43,510
memory<font color="#CCCCCC"> almost never</font><font color="#E5E5E5"> so the only way to</font>

472
00:26:40,360 --> 00:26:47,050
get<font color="#E5E5E5"> this key is just to get code</font>

473
00:26:43,510 --> 00:26:49,420
execution<font color="#E5E5E5"> ability</font><font color="#CCCCCC"> inside bring out</font>

474
00:26:47,050 --> 00:26:52,450
module<font color="#E5E5E5"> because from other modules</font><font color="#CCCCCC"> you</font>

475
00:26:49,420 --> 00:26:54,790
will<font color="#E5E5E5"> be unable to use hardware security</font>

476
00:26:52,450 --> 00:26:59,140
engines<font color="#E5E5E5"> there are only three modules</font>

477
00:26:54,790 --> 00:27:02,470
that<font color="#E5E5E5"> have permission</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> use</font><font color="#CCCCCC"> IES</font>

478
00:26:59,140 --> 00:27:06,070
<font color="#E5E5E5">encryption</font><font color="#CCCCCC"> as KS and so</font><font color="#E5E5E5"> on</font><font color="#CCCCCC"> it's wrong</font>

479
00:27:02,470 --> 00:27:09,100
<font color="#E5E5E5">it's bringing up and creep the module</font>

480
00:27:06,070 --> 00:27:12,879
<font color="#E5E5E5">but crypto module</font><font color="#CCCCCC"> didn't allows you to</font>

481
00:27:09,100 --> 00:27:15,429
make<font color="#CCCCCC"> some flexible access and you are</font>

482
00:27:12,880 --> 00:27:19,210
<font color="#E5E5E5">limited by using keys that already</font>

483
00:27:15,430 --> 00:27:22,870
available in in memory or<font color="#E5E5E5"> in a secure</font>

484
00:27:19,210 --> 00:27:26,580
key<font color="#E5E5E5"> storage so it's kind of paranoid</font>

485
00:27:22,870 --> 00:27:29,620
metal<font color="#E5E5E5"> model</font><font color="#CCCCCC"> a lot of security</font>

486
00:27:26,580 --> 00:27:32,710
calculations and the keys are stored in

487
00:27:29,620 --> 00:27:35,739
associated<font color="#CCCCCC"> forum</font><font color="#E5E5E5"> so I believe it's it's</font>

488
00:27:32,710 --> 00:27:38,920
great a great<font color="#E5E5E5"> idea to make such such</font>

489
00:27:35,740 --> 00:27:45,090
approach and now<font color="#E5E5E5"> again what the maximum</font>

490
00:27:38,920 --> 00:27:52,480
<font color="#CCCCCC">ok</font><font color="#E5E5E5"> we particularly recovered this key</font>

491
00:27:45,090 --> 00:27:56,139
what means particularly we can't give we

492
00:27:52,480 --> 00:28:00,550
can't get any<font color="#CCCCCC"> information about</font><font color="#E5E5E5"> wrapping</font>

493
00:27:56,140 --> 00:28:06,960
keep it key from fuses but we can give a

494
00:28:00,550 --> 00:28:13,950
get<font color="#CCCCCC"> a rapid value and unwrap it on key</font>

495
00:28:06,960 --> 00:28:17,050
unfortunately we we we haven't

496
00:28:13,950 --> 00:28:20,710
<font color="#CCCCCC">xviii</font><font color="#E5E5E5"> keys in this case because ROM</font>

497
00:28:17,050 --> 00:28:24,970
deleted it but we can recalculate it

498
00:28:20,710 --> 00:28:30,150
<font color="#E5E5E5">value</font><font color="#CCCCCC"> after that we can</font><font color="#E5E5E5"> rev up key in</font>

499
00:28:24,970 --> 00:28:37,740
memory<font color="#E5E5E5"> and get information</font>

500
00:28:30,150 --> 00:28:45,120
and get<font color="#CCCCCC"> key get value after is decreed</font>

501
00:28:37,740 --> 00:28:53,920
<font color="#E5E5E5">unfortunately we cannot check</font><font color="#CCCCCC"> probably</font>

502
00:28:45,120 --> 00:28:59,830
we cannot check admit were set that<font color="#CCCCCC"> SKS</font>

503
00:28:53,920 --> 00:29:04,210
<font color="#E5E5E5">one</font><font color="#CCCCCC"> initialized by zero</font><font color="#E5E5E5"> but we cannot</font>

504
00:28:59,830 --> 00:29:09,250
check it<font color="#CCCCCC"> because unfortunately we</font><font color="#E5E5E5"> get</font>

505
00:29:04,210 --> 00:29:14,010
this information<font color="#CCCCCC"> we are GE Tech and we</font>

506
00:29:09,250 --> 00:29:18,370
think that<font color="#CCCCCC"> maybe an e closed</font><font color="#E5E5E5"> access to</font>

507
00:29:14,010 --> 00:29:22,330
this<font color="#E5E5E5"> value when which jtech activated</font>

508
00:29:18,370 --> 00:29:24,060
and we we<font color="#E5E5E5"> couldn't encrypt this value on</font>

509
00:29:22,330 --> 00:29:26,919
this key

510
00:29:24,060 --> 00:29:34,889
okay the next keys

511
00:29:26,920 --> 00:29:40,030
it's<font color="#CCCCCC"> F</font><font color="#E5E5E5"> TPM keys they it generated likely</font>

512
00:29:34,890 --> 00:29:46,860
repeat and we can recover it<font color="#E5E5E5"> because we</font>

513
00:29:40,030 --> 00:29:54,310
can calculate 18 key and we can<font color="#CCCCCC"> reverb</font>

514
00:29:46,860 --> 00:29:59,429
some data from memory<font color="#E5E5E5"> saved in special</font>

515
00:29:54,310 --> 00:30:04,870
structure called ft<font color="#E5E5E5"> pinkies this value</font>

516
00:29:59,430 --> 00:30:11,910
using<font color="#E5E5E5"> in some drivers some models</font><font color="#CCCCCC"> in</font>

517
00:30:04,870 --> 00:30:20,350
<font color="#CCCCCC">tourney for example TPM module which</font>

518
00:30:11,910 --> 00:30:24,310
implemented TPM<font color="#E5E5E5"> 2 to 0 and</font><font color="#CCCCCC"> 6 small</font>

519
00:30:20,350 --> 00:30:28,750
<font color="#E5E5E5">summary security</font><font color="#CCCCCC"> keys</font><font color="#E5E5E5"> never holds in</font>

520
00:30:24,310 --> 00:30:31,550
memory in<font color="#E5E5E5"> plain</font><font color="#CCCCCC"> text and</font><font color="#E5E5E5"> unusually rapid</font>

521
00:30:28,750 --> 00:30:34,000
key<font color="#E5E5E5"> 21 and 18</font>

522
00:30:31,550 --> 00:30:39,530
[Music]

523
00:30:34,000 --> 00:30:44,150
removed 21 don't removed and<font color="#E5E5E5"> 18 removed</font>

524
00:30:39,530 --> 00:30:49,910
from the memory<font color="#E5E5E5"> but all keys make we can</font>

525
00:30:44,150 --> 00:30:53,530
use for developing data and almost all

526
00:30:49,910 --> 00:31:02,510
<font color="#CCCCCC">keys depends on</font><font color="#E5E5E5"> wrapping key which we</font>

527
00:30:53,530 --> 00:31:06,610
cannot<font color="#CCCCCC"> know and how</font><font color="#E5E5E5"> can I say how I said</font>

528
00:31:02,510 --> 00:31:09,260
even<font color="#CCCCCC"> Intel in general with</font><font color="#E5E5E5"> JTAC are</font>

529
00:31:06,610 --> 00:31:14,270
available to get schmucky because<font color="#E5E5E5"> its</font>

530
00:31:09,260 --> 00:31:19,210
main secret<font color="#E5E5E5"> of the platform and now I</font>

531
00:31:14,270 --> 00:31:25,610
will<font color="#E5E5E5"> start about small magic and funny</font>

532
00:31:19,210 --> 00:31:30,350
<font color="#CCCCCC">information</font><font color="#E5E5E5"> about in in</font><font color="#CCCCCC"> a me has special</font>

533
00:31:25,610 --> 00:31:36,919
partition called<font color="#CCCCCC"> IV BP this system</font>

534
00:31:30,350 --> 00:31:42,040
partition for hibernates<font color="#CCCCCC"> die</font><font color="#E5E5E5"> for warm</font>

535
00:31:36,920 --> 00:31:45,920
starting<font color="#E5E5E5"> it's like looks like he needs</font>

536
00:31:42,040 --> 00:31:50,030
<font color="#E5E5E5">on this partition in a kernel of any</font>

537
00:31:45,920 --> 00:31:56,480
saved information about page structure

538
00:31:50,030 --> 00:31:59,180
<font color="#E5E5E5">about some important data some kernel</font>

539
00:31:56,480 --> 00:32:06,010
important data<font color="#E5E5E5"> and if you can change</font>

540
00:31:59,180 --> 00:32:11,140
<font color="#CCCCCC">this partition</font><font color="#E5E5E5"> you can you have</font>

541
00:32:06,010 --> 00:32:15,040
arbitrary code execution interim year on

542
00:32:11,140 --> 00:32:20,480
in context of kernel

543
00:32:15,040 --> 00:32:23,240
unfortunately for attacker<font color="#CCCCCC"> this</font>

544
00:32:20,480 --> 00:32:31,540
partition encrypted and has integrity

545
00:32:23,240 --> 00:32:37,910
<font color="#E5E5E5">check by schmuck</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> it's partition has</font>

546
00:32:31,540 --> 00:32:42,200
special seat which unique for each boot

547
00:32:37,910 --> 00:32:45,160
of your<font color="#E5E5E5"> system</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> of course it's unique</font>

548
00:32:42,200 --> 00:32:51,290
for<font color="#E5E5E5"> each piece each platform</font>

549
00:32:45,160 --> 00:32:57,200
how<font color="#E5E5E5"> it's how is it key generated you can</font>

550
00:32:51,290 --> 00:33:02,889
<font color="#CCCCCC">use an e using rapping schmucky after</font>

551
00:32:57,200 --> 00:33:09,140
<font color="#E5E5E5">that by Sh'ma it used</font>

552
00:33:02,890 --> 00:33:14,960
<font color="#E5E5E5">eleven key for schmuck on date with this</font>

553
00:33:09,140 --> 00:33:19,940
drink<font color="#E5E5E5"> and</font><font color="#CCCCCC"> SVN SVN</font><font color="#E5E5E5"> it's a special field</font>

554
00:33:14,960 --> 00:33:24,560
which protects you system against<font color="#E5E5E5"> Don</font>

555
00:33:19,940 --> 00:33:28,010
great and after<font color="#CCCCCC"> that in a calculate this</font>

556
00:33:24,560 --> 00:33:34,690
key and<font color="#E5E5E5"> this key using for decryption of</font>

557
00:33:28,010 --> 00:33:39,640
<font color="#CCCCCC">IV BP partition</font><font color="#E5E5E5"> and verifying that</font><font color="#CCCCCC"> okay</font>

558
00:33:34,690 --> 00:33:42,740
<font color="#CCCCCC">okay I</font><font color="#E5E5E5"> don't meet ray talked about next</font>

559
00:33:39,640 --> 00:33:47,810
partition<font color="#E5E5E5"> but also in Rome we find very</font>

560
00:33:42,740 --> 00:33:50,930
interesting<font color="#CCCCCC"> code actually</font><font color="#E5E5E5"> Rome trying to</font>

561
00:33:47,810 --> 00:33:53,899
find a proper place<font color="#E5E5E5"> to start the</font><font color="#CCCCCC"> M e and</font>

562
00:33:50,930 --> 00:33:58,430
looks in three places<font color="#E5E5E5"> it looks in</font>

563
00:33:53,900 --> 00:34:00,950
partition named<font color="#CCCCCC"> D Ln P</font><font color="#E5E5E5"> FTP R and F tup</font>

564
00:33:58,430 --> 00:34:03,230
I believe that<font color="#CCCCCC"> F</font><font color="#E5E5E5"> tup</font><font color="#CCCCCC"> is upgrade</font>

565
00:34:00,950 --> 00:34:05,000
partition so it's created when<font color="#E5E5E5"> you need</font>

566
00:34:03,230 --> 00:34:08,510
<font color="#CCCCCC">to upgrade management engine during</font>

567
00:34:05,000 --> 00:34:11,810
restart<font color="#E5E5E5"> have</font><font color="#CCCCCC"> T PR it's normal partition</font>

568
00:34:08,510 --> 00:34:16,310
were all<font color="#E5E5E5"> codes that runs every</font><font color="#CCCCCC"> day is</font>

569
00:34:11,810 --> 00:34:18,320
recites and GL MP probably G mates<font color="#E5E5E5"> makes</font>

570
00:34:16,310 --> 00:34:22,489
debug probably something<font color="#CCCCCC"> cursor</font><font color="#E5E5E5"> nobody</font>

571
00:34:18,320 --> 00:34:27,080
knows<font color="#E5E5E5"> and in partition GL</font><font color="#CCCCCC"> MP it looks</font>

572
00:34:22,489 --> 00:34:31,250
for module named<font color="#E5E5E5"> ID LM it starts from</font>

573
00:34:27,080 --> 00:34:34,179
index 0 and just use index in

574
00:34:31,250 --> 00:34:36,800
incremental mode<font color="#CCCCCC"> trying</font><font color="#E5E5E5"> to find</font>

575
00:34:34,179 --> 00:34:39,830
<font color="#E5E5E5">partition it's check signature according</font>

576
00:34:36,800 --> 00:34:42,650
to pictures that I showed earlier<font color="#E5E5E5"> and if</font>

577
00:34:39,830 --> 00:34:47,150
everything is<font color="#E5E5E5"> a key it's trying to find</font>

578
00:34:42,650 --> 00:34:50,450
module with specific name and if module

579
00:34:47,150 --> 00:34:53,180
is<font color="#CCCCCC"> its proper one so it's not modified</font>

580
00:34:50,449 --> 00:34:57,470
by<font color="#CCCCCC"> a taker or sounds on somebody else is</font>

581
00:34:53,179 --> 00:34:59,160
check if it's<font color="#CCCCCC"> half index 0 then this</font>

582
00:34:57,470 --> 00:35:03,839
module is executed

583
00:34:59,160 --> 00:35:06,660
at this stage you<font color="#E5E5E5"> execute code</font><font color="#CCCCCC"> that</font>

584
00:35:03,840 --> 00:35:12,020
taken from<font color="#CCCCCC"> IDL M module from the LMP</font>

585
00:35:06,660 --> 00:35:15,240
partition if index is more than<font color="#CCCCCC"> zero</font><font color="#E5E5E5"> so</font>

586
00:35:12,020 --> 00:35:17,220
management engine<font color="#CCCCCC"> rome locks fuses so</font>

587
00:35:15,240 --> 00:35:20,450
made them unavailable<font color="#CCCCCC"> erase all data</font>

588
00:35:17,220 --> 00:35:23,430
<font color="#E5E5E5">that was read from fuses and derive all</font>

589
00:35:20,450 --> 00:35:26,910
keys that necessary for<font color="#E5E5E5"> following</font><font color="#CCCCCC"> stages</font>

590
00:35:23,430 --> 00:35:30,330
and execute running<font color="#E5E5E5"> modular</font><font color="#CCCCCC"> B and ants</font>

591
00:35:26,910 --> 00:35:33,240
the execution of<font color="#E5E5E5"> the</font><font color="#CCCCCC"> ROM code and the</font>

592
00:35:30,330 --> 00:35:36,360
main idea<font color="#CCCCCC"> of this picture</font><font color="#E5E5E5"> that during</font>

593
00:35:33,240 --> 00:35:39,990
this stage<font color="#E5E5E5"> of execution system still</font>

594
00:35:36,360 --> 00:35:42,480
have fuses in memory<font color="#E5E5E5"> so if you have</font>

595
00:35:39,990 --> 00:35:44,910
ability<font color="#CCCCCC"> to</font><font color="#E5E5E5"> run code as this place you</font>

596
00:35:42,480 --> 00:35:47,760
are<font color="#E5E5E5"> able to execute anything and</font>

597
00:35:44,910 --> 00:35:52,080
calculate<font color="#E5E5E5"> anything even things that are</font>

598
00:35:47,760 --> 00:35:55,490
<font color="#CCCCCC">not available using JTAG and here is</font>

599
00:35:52,080 --> 00:35:58,590
some info about ideal and partition

600
00:35:55,490 --> 00:36:00,990
actually it's the<font color="#CCCCCC"> only place where</font><font color="#E5E5E5"> you</font>

601
00:35:58,590 --> 00:36:03,720
<font color="#E5E5E5">could put</font><font color="#CCCCCC"> your own code because you're</font>

602
00:36:00,990 --> 00:36:07,259
unable to<font color="#E5E5E5"> put your code in Rome and if</font>

603
00:36:03,720 --> 00:36:10,319
you're<font color="#CCCCCC"> able to run your code inside IDL</font>

604
00:36:07,260 --> 00:36:12,420
<font color="#CCCCCC">M</font><font color="#E5E5E5"> you have ability</font><font color="#CCCCCC"> to do anything with</font>

605
00:36:10,320 --> 00:36:16,290
the<font color="#E5E5E5"> platform you could recover every</font>

606
00:36:12,420 --> 00:36:20,520
secrets<font color="#E5E5E5"> and calculate new values based</font>

607
00:36:16,290 --> 00:36:24,750
on<font color="#E5E5E5"> the secrets in any future for</font><font color="#CCCCCC"> SVN for</font>

608
00:36:20,520 --> 00:36:27,750
example for<font color="#CCCCCC"> filesystem</font><font color="#E5E5E5"> keys we were able</font>

609
00:36:24,750 --> 00:36:31,770
to make code execution on platform with

610
00:36:27,750 --> 00:36:35,130
<font color="#CCCCCC">sv n equal to</font><font color="#E5E5E5"> 1 and we are unable to get</font>

611
00:36:31,770 --> 00:36:37,170
values for keys with sv n 3 because all

612
00:36:35,130 --> 00:36:40,890
calculation of<font color="#E5E5E5"> that key is performed in</font>

613
00:36:37,170 --> 00:36:43,500
rome but<font color="#E5E5E5"> we don't have access on rome</font><font color="#CCCCCC"> we</font>

614
00:36:40,890 --> 00:36:47,009
have ability<font color="#E5E5E5"> to trace</font><font color="#CCCCCC"> rome but</font><font color="#E5E5E5"> if we</font>

615
00:36:43,500 --> 00:36:50,280
will start in trace mode using<font color="#CCCCCC"> JTAC</font><font color="#E5E5E5"> we</font>

616
00:36:47,010 --> 00:36:53,910
have no chance<font color="#CCCCCC"> to</font><font color="#E5E5E5"> access to fuses so</font>

617
00:36:50,280 --> 00:36:58,140
<font color="#CCCCCC">it's again it's</font><font color="#E5E5E5"> well designed system but</font>

618
00:36:53,910 --> 00:37:01,549
it's actually<font color="#CCCCCC"> decision that allows you</font><font color="#E5E5E5"> a</font>

619
00:36:58,140 --> 00:37:06,240
<font color="#E5E5E5">right all other security measures</font><font color="#CCCCCC"> and</font>

620
00:37:01,550 --> 00:37:10,020
find<font color="#E5E5E5"> everything you need so final words</font>

621
00:37:06,240 --> 00:37:12,368
about<font color="#CCCCCC"> our today's presentation we</font>

622
00:37:10,020 --> 00:37:15,839
believe that Intel engineers

623
00:37:12,369 --> 00:37:19,180
<font color="#CCCCCC">built</font><font color="#E5E5E5"> really really serious and good</font>

624
00:37:15,839 --> 00:37:22,630
model to<font color="#E5E5E5"> protect secrets</font><font color="#CCCCCC"> within</font>

625
00:37:19,180 --> 00:37:26,109
<font color="#E5E5E5">management engine</font><font color="#CCCCCC"> even if you have</font>

626
00:37:22,630 --> 00:37:29,079
<font color="#CCCCCC">ability to make code execution</font>

627
00:37:26,109 --> 00:37:31,269
you could compromise<font color="#CCCCCC"> current platform</font>

628
00:37:29,079 --> 00:37:34,029
current version but you<font color="#CCCCCC"> are unable to</font>

629
00:37:31,269 --> 00:37:39,970
extend your knowledge for<font color="#E5E5E5"> future version</font>

630
00:37:34,029 --> 00:37:43,539
of<font color="#CCCCCC"> SVN</font><font color="#E5E5E5"> or for other</font><font color="#CCCCCC"> platforms and we not</font>

631
00:37:39,970 --> 00:37:45,848
sure about content of fuses data

632
00:37:43,539 --> 00:37:48,369
<font color="#E5E5E5">probably they're just random values</font>

633
00:37:45,849 --> 00:37:50,440
because they could<font color="#E5E5E5"> be random values but</font>

634
00:37:48,369 --> 00:37:52,839
<font color="#E5E5E5">probably there is some algorithm that</font>

635
00:37:50,440 --> 00:37:55,809
<font color="#CCCCCC">used to generate them for some</font><font color="#E5E5E5"> specific</font>

636
00:37:52,839 --> 00:37:58,390
platform and someone in the<font color="#CCCCCC"> world</font><font color="#E5E5E5"> just</font>

637
00:37:55,809 --> 00:38:00,789
<font color="#CCCCCC">able to for example</font><font color="#E5E5E5"> get several</font><font color="#CCCCCC"> ID</font><font color="#E5E5E5"> of</font>

638
00:37:58,390 --> 00:38:02,890
<font color="#E5E5E5">your mass report and get all necessary</font>

639
00:38:00,789 --> 00:38:06,670
information<font color="#E5E5E5"> to calculate all</font><font color="#CCCCCC"> that key</font><font color="#E5E5E5"> we</font>

640
00:38:02,890 --> 00:38:09,129
could not prove or disprove<font color="#E5E5E5"> that but the</font>

641
00:38:06,670 --> 00:38:12,430
most<font color="#E5E5E5"> interesting things</font><font color="#CCCCCC"> that we find is</font>

642
00:38:09,130 --> 00:38:16,049
that ideal and Fisher<font color="#CCCCCC"> I am Not sure that</font>

643
00:38:12,430 --> 00:38:21,578
<font color="#CCCCCC">is backdoor</font><font color="#E5E5E5"> probably it's a kind of</font>

644
00:38:16,049 --> 00:38:23,920
ability<font color="#CCCCCC"> to mate</font><font color="#E5E5E5"> post</font><font color="#CCCCCC"> wrong decisions</font>

645
00:38:21,579 --> 00:38:26,589
that<font color="#E5E5E5"> actually should</font><font color="#CCCCCC"> be implemented at</font>

646
00:38:23,920 --> 00:38:29,230
Rome so Rome is not modifiable part of

647
00:38:26,589 --> 00:38:29,980
the of the system<font color="#E5E5E5"> until never able</font><font color="#CCCCCC"> to</font>

648
00:38:29,230 --> 00:38:32,079
<font color="#CCCCCC">abrade</font><font color="#E5E5E5"> it</font>

649
00:38:29,980 --> 00:38:35,559
for example<font color="#CCCCCC"> Apple was not able to</font>

650
00:38:32,079 --> 00:38:38,680
upgrade<font color="#E5E5E5"> boot</font><font color="#CCCCCC"> ROM so all mobile phones</font>

651
00:38:35,559 --> 00:38:40,869
prior to iPhone 4 were vulnerable to<font color="#E5E5E5"> ROM</font>

652
00:38:38,680 --> 00:38:43,149
boot attack<font color="#E5E5E5"> for for many years</font><font color="#CCCCCC"> because</font>

653
00:38:40,869 --> 00:38:48,220
it's impossible to page<font color="#E5E5E5"> and almost the</font>

654
00:38:43,150 --> 00:38:51,039
<font color="#E5E5E5">same here but Intel still have chance to</font>

655
00:38:48,220 --> 00:38:53,819
modify<font color="#E5E5E5"> something that what was not</font>

656
00:38:51,039 --> 00:38:56,650
performed to<font color="#E5E5E5"> Rome like in Rome but</font>

657
00:38:53,819 --> 00:39:01,420
nobody knows what<font color="#CCCCCC"> that partition was</font>

658
00:38:56,650 --> 00:39:03,700
designed for and who actually owns that

659
00:39:01,420 --> 00:39:06,880
<font color="#CCCCCC">Keys that use it for</font><font color="#E5E5E5"> signing that</font>

660
00:39:03,700 --> 00:39:08,680
<font color="#E5E5E5">partition</font><font color="#CCCCCC"> and now I believe we spent</font><font color="#E5E5E5"> all</font>

661
00:39:06,880 --> 00:39:11,849
our times and<font color="#E5E5E5"> if you have any question</font>

662
00:39:08,680 --> 00:39:11,848
we will answer them

663
00:39:18,170 --> 00:39:30,690
if<font color="#CCCCCC"> ya is a sky as vulnerable</font><font color="#E5E5E5"> to side</font>

664
00:39:28,170 --> 00:39:32,369
channel attacks have you tried<font color="#CCCCCC"> that we</font>

665
00:39:30,690 --> 00:39:36,059
not<font color="#E5E5E5"> tried that and actually it's very</font>

666
00:39:32,369 --> 00:39:39,449
<font color="#E5E5E5">hard to try because actually it's</font>

667
00:39:36,059 --> 00:39:42,749
physical device<font color="#CCCCCC"> and you could access it</font>

668
00:39:39,449 --> 00:39:47,099
only from management<font color="#E5E5E5"> engine so you could</font>

669
00:39:42,749 --> 00:39:50,848
not build every<font color="#E5E5E5"> simple simple device to</font>

670
00:39:47,099 --> 00:39:54,269
<font color="#CCCCCC">attacking it and measure time</font><font color="#E5E5E5"> so it's</font>

671
00:39:50,849 --> 00:39:55,769
physical problem to implement it<font color="#E5E5E5"> but</font>

672
00:39:54,269 --> 00:40:06,109
<font color="#CCCCCC">probably Maxim have something</font><font color="#E5E5E5"> to that</font>

673
00:39:55,769 --> 00:40:09,890
actually not on this case<font color="#CCCCCC"> used</font><font color="#E5E5E5"> for key</font>

674
00:40:06,109 --> 00:40:18,170
storage for<font color="#CCCCCC"> example you you have some</font>

675
00:40:09,890 --> 00:40:25,109
device<font color="#CCCCCC"> fuses polar which is recent</font>

676
00:40:18,170 --> 00:40:28,199
information<font color="#CCCCCC"> from some devices to ask us</font>

677
00:40:25,109 --> 00:40:32,219
<font color="#CCCCCC">for example or</font><font color="#E5E5E5"> maybe any</font><font color="#CCCCCC"> kernel</font>

678
00:40:28,199 --> 00:40:36,839
for example<font color="#E5E5E5"> many devices integrated</font><font color="#CCCCCC"> into</font>

679
00:40:32,219 --> 00:40:38,969
<font color="#CCCCCC">PC</font><font color="#E5E5E5"> and we it's</font><font color="#CCCCCC"> very difficult to to</font>

680
00:40:36,839 --> 00:40:43,369
check<font color="#E5E5E5"> anything without description on</font>

681
00:40:38,969 --> 00:40:48,930
this device<font color="#E5E5E5"> we we know about maybe</font><font color="#CCCCCC"> 10</font><font color="#E5E5E5"> or</font>

682
00:40:43,369 --> 00:40:51,660
<font color="#CCCCCC">11 register of this device</font><font color="#E5E5E5"> but on bonus</font>

683
00:40:48,930 --> 00:40:56,209
<font color="#CCCCCC">slide</font><font color="#E5E5E5"> after after</font><font color="#CCCCCC"> the slide</font><font color="#E5E5E5"> we have</font>

684
00:40:51,660 --> 00:41:01,368
bonus<font color="#CCCCCC"> slides for example we don't know</font>

685
00:40:56,209 --> 00:41:05,848
this<font color="#CCCCCC"> which means this value in is</font>

686
00:41:01,369 --> 00:41:09,299
devices and this data is<font color="#E5E5E5"> loaded in ROM</font>

687
00:41:05,849 --> 00:41:11,940
<font color="#E5E5E5">but we don't know for for what purpose</font>

688
00:41:09,299 --> 00:41:16,699
so we knew<font color="#CCCCCC"> that this data is</font><font color="#E5E5E5"> pasted</font>

689
00:41:11,940 --> 00:41:20,519
inside is device but no idea<font color="#E5E5E5"> why and</font>

690
00:41:16,699 --> 00:41:23,549
almost<font color="#E5E5E5"> codes that looks in the same</font>

691
00:41:20,519 --> 00:41:24,149
manner<font color="#E5E5E5"> it's again related with is</font>

692
00:41:23,549 --> 00:41:26,670
<font color="#E5E5E5">encryption</font>

693
00:41:24,150 --> 00:41:29,579
<font color="#E5E5E5">this code</font><font color="#CCCCCC"> is taken from crypto module</font>

694
00:41:26,670 --> 00:41:30,270
and again we don't know what this key

695
00:41:29,579 --> 00:41:32,910
<font color="#E5E5E5">means</font>

696
00:41:30,270 --> 00:41:35,100
what it's used for probably some tasting

697
00:41:32,910 --> 00:41:37,799
keys that just left in code<font color="#CCCCCC"> probably</font>

698
00:41:35,100 --> 00:41:40,740
<font color="#E5E5E5">would have some special meaning</font><font color="#CCCCCC"> we don't</font>

699
00:41:37,800 --> 00:41:45,620
know and it's an explorer space you have

700
00:41:40,740 --> 00:41:45,620
chance<font color="#CCCCCC"> to do</font><font color="#E5E5E5"> something in this area</font>

701
00:41:57,610 --> 00:42:05,680
I believe that management<font color="#CCCCCC"> engine</font><font color="#E5E5E5"> not</font>

702
00:42:01,530 --> 00:42:08,740
consider it to<font color="#CCCCCC"> be like</font><font color="#E5E5E5"> a tamper-proof</font><font color="#CCCCCC"> or</font>

703
00:42:05,680 --> 00:42:12,609
<font color="#E5E5E5">tamper-resistant device by itself but</font>

704
00:42:08,740 --> 00:42:16,569
it's developed with<font color="#E5E5E5"> a very good approach</font>

705
00:42:12,610 --> 00:42:19,750
and<font color="#E5E5E5"> just by comparing code that we see</font>

706
00:42:16,570 --> 00:42:22,300
inside<font color="#E5E5E5"> management engine and inside some</font>

707
00:42:19,750 --> 00:42:24,910
other Intel products<font color="#CCCCCC"> its have pretty</font>

708
00:42:22,300 --> 00:42:27,670
good<font color="#CCCCCC"> written code so it have a lot of</font>

709
00:42:24,910 --> 00:42:31,540
verification stages almost at every

710
00:42:27,670 --> 00:42:35,370
every place<font color="#CCCCCC"> it's just we find one place</font>

711
00:42:31,540 --> 00:42:37,480
<font color="#CCCCCC">with buffer overflow and we were</font><font color="#E5E5E5"> lucky</font>

712
00:42:35,370 --> 00:42:41,020
<font color="#E5E5E5">to exploit it</font>

713
00:42:37,480 --> 00:42:45,610
but in other<font color="#E5E5E5"> in other places it's</font>

714
00:42:41,020 --> 00:42:49,200
actually very<font color="#E5E5E5"> well designed and paranoid</font>

715
00:42:45,610 --> 00:42:52,030
I call it paranoid<font color="#CCCCCC"> key management model</font>

716
00:42:49,200 --> 00:42:54,939
<font color="#E5E5E5">it's not</font><font color="#CCCCCC"> prevents you from physical</font>

717
00:42:52,030 --> 00:42:58,390
attacks but I believe that<font color="#E5E5E5"> it's not too</font>

718
00:42:54,940 --> 00:43:01,570
<font color="#E5E5E5">easy to get inside the PC chip because</font>

719
00:42:58,390 --> 00:43:05,350
<font color="#CCCCCC">I'm a maybe</font><font color="#E5E5E5"> 10% of the chip you don't</font>

720
00:43:01,570 --> 00:43:07,060
<font color="#E5E5E5">have some special chip that dedicated</font><font color="#CCCCCC"> to</font>

721
00:43:05,350 --> 00:43:10,509
<font color="#E5E5E5">management engine you need to get inside</font>

722
00:43:07,060 --> 00:43:13,150
bigger device and it's very hard so I

723
00:43:10,510 --> 00:43:15,580
think that physical<font color="#E5E5E5"> attack on such</font>

724
00:43:13,150 --> 00:43:18,090
devices<font color="#E5E5E5"> will cost maybe hundreds of</font>

725
00:43:15,580 --> 00:43:18,090
thousands<font color="#E5E5E5"> dollars</font>

726
00:43:25,930 --> 00:43:32,580
if there is no more questions thanks for

727
00:43:28,300 --> 00:43:32,580
<font color="#CCCCCC">attending</font><font color="#E5E5E5"> thank you for attention</font>

