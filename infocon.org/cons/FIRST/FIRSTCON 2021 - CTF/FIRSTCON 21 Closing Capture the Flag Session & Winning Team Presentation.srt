1
00:00:04,400 --> 00:00:17,920
all right

2
00:01:50,479 --> 00:01:52,799
happy friday everybody we are going to

3
00:01:52,799 --> 00:01:54,560
get started in another minute just to

4
00:01:54,560 --> 00:01:55,920
give a few more folks

5
00:01:55,920 --> 00:01:59,759
some time to get logged into the webinar

6
00:01:59,759 --> 00:02:09,840
but thank you for joining us today

7
00:02:49,599 --> 00:02:51,599
all right i think we can go ahead and

8
00:02:51,599 --> 00:02:52,879
get started

9
00:02:52,879 --> 00:02:56,640
uh david renato aaron

10
00:02:56,640 --> 00:03:00,238
give you the floor so

11
00:03:00,480 --> 00:03:02,560
i hope this time i wish the proper

12
00:03:02,560 --> 00:03:04,400
screen let me know if you didn't get the

13
00:03:04,400 --> 00:03:06,239
right one

14
00:03:06,239 --> 00:03:08,800
good to go okay perfect thank you so

15
00:03:08,800 --> 00:03:09,760
hello everybody

16
00:03:09,760 --> 00:03:12,640
uh it's a pleasure to close so the 10th

17
00:03:12,640 --> 00:03:14,000
edition of the

18
00:03:14,000 --> 00:03:16,879
the ctf second virtual one and hopefully

19
00:03:16,879 --> 00:03:18,159
the last one

20
00:03:18,159 --> 00:03:21,599
um so a few points we would like to

21
00:03:21,599 --> 00:03:22,080
bring

22
00:03:22,080 --> 00:03:23,680
before passing the floor to the winning

23
00:03:23,680 --> 00:03:26,400
team it's uh

24
00:03:26,400 --> 00:03:28,720
maybe just recap a bit with behind the

25
00:03:28,720 --> 00:03:30,560
ctf this year

26
00:03:30,560 --> 00:03:33,440
some statistics

27
00:03:34,319 --> 00:03:37,440
sorry uh the winning team will give us

28
00:03:37,440 --> 00:03:39,519
presentations so

29
00:03:39,519 --> 00:03:42,720
nothing for me there

30
00:03:42,720 --> 00:03:44,840
and a few closing works after the

31
00:03:44,840 --> 00:03:46,640
presentation

32
00:03:46,640 --> 00:03:49,599
so as a small reminder for those that

33
00:03:49,599 --> 00:03:50,000
miss

34
00:03:50,000 --> 00:03:53,439
the intro call the ctf

35
00:03:53,439 --> 00:03:56,000
is organized as a special transcript of

36
00:03:56,000 --> 00:03:57,200
first for

37
00:03:57,200 --> 00:04:00,400
four years now if i'm correct

38
00:04:00,400 --> 00:04:02,720
uh we have a team which is mentioned

39
00:04:02,720 --> 00:04:03,760
there and so

40
00:04:03,760 --> 00:04:06,239
for the second edition this year we team

41
00:04:06,239 --> 00:04:08,239
up with dhs caesar

42
00:04:08,239 --> 00:04:10,080
so you can see that we have the support

43
00:04:10,080 --> 00:04:12,799
of first and many of our employer

44
00:04:12,799 --> 00:04:14,799
and click there to prepare those

45
00:04:14,799 --> 00:04:15,920
challenge

46
00:04:15,920 --> 00:04:17,918
and also keep infrastructure up so just

47
00:04:17,918 --> 00:04:19,680
to give an id we have a matter most up

48
00:04:19,680 --> 00:04:21,199
and running for the chat

49
00:04:21,199 --> 00:04:24,400
ctfd we collect all the logins blank

50
00:04:24,400 --> 00:04:26,000
and we also have an s3 packet for the

51
00:04:26,000 --> 00:04:27,919
big files and plus the docker server

52
00:04:27,919 --> 00:04:29,360
also so it was

53
00:04:29,360 --> 00:04:32,800
the infra behind in term of

54
00:04:32,800 --> 00:04:34,560
some figures so for this year we have

55
00:04:34,560 --> 00:04:36,720
prepare 50 challenge

56
00:04:36,720 --> 00:04:41,280
we had participants from 59 countries

57
00:04:41,360 --> 00:04:43,120
total number of challenges growing so

58
00:04:43,120 --> 00:04:44,479
that's typically interesting

59
00:04:44,479 --> 00:04:47,280
when we offer life challenge all year

60
00:04:47,280 --> 00:04:49,120
long

61
00:04:49,120 --> 00:04:52,320
uh on the 435 participant that

62
00:04:52,320 --> 00:04:53,120
registered

63
00:04:53,120 --> 00:04:55,840
via first we had 78 active so we count

64
00:04:55,840 --> 00:04:57,680
as active people that really play

65
00:04:57,680 --> 00:05:01,199
along the week for a total of 60 teams

66
00:05:01,199 --> 00:05:05,600
sorry 60 team register 42 active

67
00:05:06,240 --> 00:05:08,720
which led to this which was the top 10

68
00:05:08,720 --> 00:05:09,520
evolution

69
00:05:09,520 --> 00:05:11,440
over the week which was quite

70
00:05:11,440 --> 00:05:12,880
interesting so you can see that

71
00:05:12,880 --> 00:05:16,560
the the winning team hope you can see

72
00:05:16,560 --> 00:05:18,880
there was actually very very close to

73
00:05:18,880 --> 00:05:20,080
the second team

74
00:05:20,080 --> 00:05:22,000
very very close to the third and fourth

75
00:05:22,000 --> 00:05:24,080
team it was quite challenging

76
00:05:24,080 --> 00:05:26,160
up to the last minute to know who will

77
00:05:26,160 --> 00:05:27,360
be the winner

78
00:05:27,360 --> 00:05:30,000
of this edition so congratulations to

79
00:05:30,000 --> 00:05:31,199
all those teams

80
00:05:31,199 --> 00:05:34,720
uh i guess it was very well deserved for

81
00:05:34,720 --> 00:05:35,919
those that

82
00:05:35,919 --> 00:05:38,160
that reached a top three and that's also

83
00:05:38,160 --> 00:05:39,919
obvious when you look at the score

84
00:05:39,919 --> 00:05:42,639
which are very very close for the first

85
00:05:42,639 --> 00:05:44,320
five teams

86
00:05:44,320 --> 00:05:47,120
um and all the the team actually score

87
00:05:47,120 --> 00:05:49,039
quite well

88
00:05:49,039 --> 00:05:52,639
so our winners for this edition

89
00:05:52,639 --> 00:05:55,440
uh at the third position we have blue

90
00:05:55,440 --> 00:05:57,039
shells

91
00:05:57,039 --> 00:05:59,280
second position last of us last for

92
00:05:59,280 --> 00:06:00,080
reversery

93
00:06:00,080 --> 00:06:04,160
and a winner are ept

94
00:06:04,160 --> 00:06:08,400
which means that ept it's now your time

95
00:06:08,400 --> 00:06:12,000
to present uh and explain a bit

96
00:06:12,000 --> 00:06:15,120
are you are you in yeah

97
00:06:15,120 --> 00:06:18,160
all right let me see

98
00:06:18,160 --> 00:06:19,759
i need i guess you need to stop the

99
00:06:19,759 --> 00:06:21,680
sharing yeah

100
00:06:21,680 --> 00:06:25,039
i will i'm just searching

101
00:06:29,280 --> 00:06:32,880
and i hope my mac won't crash

102
00:06:33,360 --> 00:06:38,000
okay all right um

103
00:06:38,479 --> 00:06:41,680
i guess you can see my screen now yes

104
00:06:41,680 --> 00:06:45,280
yeah all right so we are uh i reckon

105
00:06:45,280 --> 00:06:46,240
open lukas

106
00:06:46,240 --> 00:06:49,280
piotrowski who will present to you

107
00:06:49,280 --> 00:06:51,199
we both work as security analysts and

108
00:06:51,199 --> 00:06:52,479
instant responders

109
00:06:52,479 --> 00:06:55,680
and penetration testers in ecuador

110
00:06:55,680 --> 00:06:57,759
we'll start off by talking a bit about

111
00:06:57,759 --> 00:06:59,280
our company and how we

112
00:06:59,280 --> 00:07:01,919
operate in regards to detection internet

113
00:07:01,919 --> 00:07:02,560
response

114
00:07:02,560 --> 00:07:05,199
and security testing then we'll talk a

115
00:07:05,199 --> 00:07:06,639
bit about the ctf and

116
00:07:06,639 --> 00:07:10,080
walk through a few challenges

117
00:07:10,720 --> 00:07:13,680
so first of all ecuanor is a global

118
00:07:13,680 --> 00:07:14,720
energy company

119
00:07:14,720 --> 00:07:16,479
with approximately twenty thousand

120
00:07:16,479 --> 00:07:18,479
employee plus contractors and

121
00:07:18,479 --> 00:07:19,280
consultants

122
00:07:19,280 --> 00:07:21,440
we are headquartered in slovenia in

123
00:07:21,440 --> 00:07:23,759
norway where we are sitting right now

124
00:07:23,759 --> 00:07:26,240
but we also have offices in more than 30

125
00:07:26,240 --> 00:07:28,479
countries

126
00:07:28,479 --> 00:07:31,360
uh the ecuador cyber defense center

127
00:07:31,360 --> 00:07:32,720
which we are a part of

128
00:07:32,720 --> 00:07:35,199
consists of two main teams we have a

129
00:07:35,199 --> 00:07:36,000
detection

130
00:07:36,000 --> 00:07:38,400
team which is the sock and the response

131
00:07:38,400 --> 00:07:40,080
team which is the c-cert

132
00:07:40,080 --> 00:07:42,880
where the two of us work and the rest of

133
00:07:42,880 --> 00:07:43,680
our two

134
00:07:43,680 --> 00:07:46,639
other team members work as well uh but

135
00:07:46,639 --> 00:07:48,560
what might be a bit different is that we

136
00:07:48,560 --> 00:07:49,199
also

137
00:07:49,199 --> 00:07:52,720
have a internal pen testing team that

138
00:07:52,720 --> 00:07:53,360
consists

139
00:07:53,360 --> 00:07:56,160
of a subset of the response team so me

140
00:07:56,160 --> 00:07:58,720
and lucas and two other colleagues

141
00:07:58,720 --> 00:08:02,160
are also i guess 50 of our work is

142
00:08:02,160 --> 00:08:03,280
actually

143
00:08:03,280 --> 00:08:06,319
offensive we do pen tests of

144
00:08:06,319 --> 00:08:08,400
both the application and also the larger

145
00:08:08,400 --> 00:08:11,120
infrastructure

146
00:08:11,120 --> 00:08:14,479
an ept is ecuador's own ctf team we

147
00:08:14,479 --> 00:08:17,520
created the team i guess we

148
00:08:17,520 --> 00:08:19,919
uh maybe two years ago we started out

149
00:08:19,919 --> 00:08:20,960
playing ctf's

150
00:08:20,960 --> 00:08:24,319
uh as colleagues uh and we play maybe

151
00:08:24,319 --> 00:08:26,319
from 10 to 30 ctfs a year

152
00:08:26,319 --> 00:08:29,039
both normal ctf time ctfs but also

153
00:08:29,039 --> 00:08:30,240
special events like

154
00:08:30,240 --> 00:08:32,320
first this was actually our first time

155
00:08:32,320 --> 00:08:35,039
attending the first ctf

156
00:08:35,039 --> 00:08:38,240
but two of us

157
00:08:38,240 --> 00:08:40,719
actually played the ics ctf i guess

158
00:08:40,719 --> 00:08:42,240
that's two years ago now

159
00:08:42,240 --> 00:08:43,760
when they were attending the conference

160
00:08:43,760 --> 00:08:46,480
in person uh most of the people in the

161
00:08:46,480 --> 00:08:47,440
team are from the

162
00:08:47,440 --> 00:08:49,519
certain sock but we also have people

163
00:08:49,519 --> 00:08:50,480
from other i.t

164
00:08:50,480 --> 00:08:53,600
disciplines joining in from time to time

165
00:08:53,600 --> 00:08:54,959
when we're playing

166
00:08:54,959 --> 00:08:58,240
and also we use ctfing as

167
00:08:58,240 --> 00:09:00,320
competence building which means that we

168
00:09:00,320 --> 00:09:02,880
are allowed to use

169
00:09:02,880 --> 00:09:06,240
our work hours some of it to play ctfs

170
00:09:06,240 --> 00:09:07,519
and we feel that we

171
00:09:07,519 --> 00:09:11,360
are benefiting a lot from doing that

172
00:09:11,360 --> 00:09:15,120
i'll get back to that yeah and

173
00:09:15,120 --> 00:09:18,480
uh when we kind of do

174
00:09:18,480 --> 00:09:20,880
security testing the kind of knowledge

175
00:09:20,880 --> 00:09:22,240
we gain through

176
00:09:22,240 --> 00:09:24,320
both ctfs and course and conferences of

177
00:09:24,320 --> 00:09:25,519
course

178
00:09:25,519 --> 00:09:29,360
are really valuable to us we learn a lot

179
00:09:29,360 --> 00:09:30,100
of

180
00:09:30,100 --> 00:09:31,680
[Music]

181
00:09:31,680 --> 00:09:34,320
nitty-gritty details doing ctfs and some

182
00:09:34,320 --> 00:09:35,440
of these

183
00:09:35,440 --> 00:09:36,959
and of course the war games like active

184
00:09:36,959 --> 00:09:39,519
box this competence is really useful

185
00:09:39,519 --> 00:09:41,360
for us when we are also doing actual

186
00:09:41,360 --> 00:09:43,440
work and doing security tests

187
00:09:43,440 --> 00:09:45,680
we also do a yearly purple team

188
00:09:45,680 --> 00:09:48,800
engagement of the infrastructure

189
00:09:48,800 --> 00:09:51,600
and we also uh that works kind of like

190
00:09:51,600 --> 00:09:52,480
we

191
00:09:52,480 --> 00:09:55,040
uh most of the search team are sitting

192
00:09:55,040 --> 00:09:56,080
together in a room

193
00:09:56,080 --> 00:09:57,839
uh we start from the inside to don't do

194
00:09:57,839 --> 00:09:59,440
the fishing and everything but then we

195
00:09:59,440 --> 00:10:01,360
just get a plug in the wall

196
00:10:01,360 --> 00:10:03,760
and we start hacking everything that's

197
00:10:03,760 --> 00:10:05,839
not industrial control systems are in

198
00:10:05,839 --> 00:10:06,480
scope

199
00:10:06,480 --> 00:10:08,079
and we are collaborating with the

200
00:10:08,079 --> 00:10:10,000
detection kind of like a

201
00:10:10,000 --> 00:10:12,800
purple team exercise to like they kind

202
00:10:12,800 --> 00:10:13,440
of we

203
00:10:13,440 --> 00:10:14,880
discuss what they see and don't see and

204
00:10:14,880 --> 00:10:16,720
so forth we don't so

205
00:10:16,720 --> 00:10:18,800
it's not a red team exercise where we

206
00:10:18,800 --> 00:10:21,120
actually try to hide

207
00:10:21,120 --> 00:10:23,040
and all of this offensive knowledge uh

208
00:10:23,040 --> 00:10:24,240
we gain is also

209
00:10:24,240 --> 00:10:27,200
super helpful for us as defenders

210
00:10:27,200 --> 00:10:27,600
because

211
00:10:27,600 --> 00:10:30,399
i think we get a better understanding of

212
00:10:30,399 --> 00:10:30,959
uh

213
00:10:30,959 --> 00:10:33,200
incidents and how attackers think and so

214
00:10:33,200 --> 00:10:34,959
forth and the techniques they are using

215
00:10:34,959 --> 00:10:36,000
are the same stuff

216
00:10:36,000 --> 00:10:39,440
as we know and we also

217
00:10:39,440 --> 00:10:42,079
improve our security posture a great bit

218
00:10:42,079 --> 00:10:43,360
by doing these yearly

219
00:10:43,360 --> 00:10:46,800
purple team engagements internally so

220
00:10:46,800 --> 00:10:48,320
we of course write finding lists and

221
00:10:48,320 --> 00:10:50,480
reports after the

222
00:10:50,480 --> 00:10:53,440
tests and we use that to improve for

223
00:10:53,440 --> 00:10:55,120
example active directory we have done

224
00:10:55,120 --> 00:10:57,920
tons of work to make sure that we

225
00:10:57,920 --> 00:10:59,360
can't get owned by someone getting

226
00:10:59,360 --> 00:11:01,200
answers to one server and there's one

227
00:11:01,200 --> 00:11:02,640
admin logged in there and then they get

228
00:11:02,640 --> 00:11:04,880
done credentials and on all our servers

229
00:11:04,880 --> 00:11:07,440
and we have created the bastion force

230
00:11:07,440 --> 00:11:09,839
and so forth to make sure that we have a

231
00:11:09,839 --> 00:11:10,240
good

232
00:11:10,240 --> 00:11:14,399
security posture in that sense

233
00:11:14,399 --> 00:11:18,160
yeah so for the ctf itself

234
00:11:18,160 --> 00:11:21,519
we had a lot of fun most of the time we

235
00:11:21,519 --> 00:11:23,120
sat together in the office and in the

236
00:11:23,120 --> 00:11:23,680
evenings

237
00:11:23,680 --> 00:11:27,200
and solved challenges some of them

238
00:11:27,200 --> 00:11:31,279
the wave ones we we had a hard time with

239
00:11:31,279 --> 00:11:31,600
so

240
00:11:31,600 --> 00:11:34,640
uh we used quite a lot of time

241
00:11:34,640 --> 00:11:36,399
trying especially the third one trying

242
00:11:36,399 --> 00:11:38,160
to solve it so we are really looking

243
00:11:38,160 --> 00:11:40,880
forward to the write-up of that one

244
00:11:40,880 --> 00:11:44,240
um we are gonna walk through

245
00:11:44,240 --> 00:11:46,560
hiding in the noise lucas will do that

246
00:11:46,560 --> 00:11:48,480
and then i'm gonna go through the five

247
00:11:48,480 --> 00:11:51,839
hdmi phone challenges or

248
00:11:51,839 --> 00:11:54,800
yeah so lucas i guess i will stop

249
00:11:54,800 --> 00:11:57,839
sharing and you can share

250
00:11:58,160 --> 00:12:01,760
if i find soon

251
00:12:01,760 --> 00:12:04,720
okay hello i will now start sharing this

252
00:12:04,720 --> 00:12:07,920
all just a second

253
00:12:08,959 --> 00:12:11,839
screen

254
00:12:19,600 --> 00:12:23,279
can you see okay perfect then

255
00:12:23,279 --> 00:12:26,320
let's start so this is the

256
00:12:26,320 --> 00:12:30,320
hiding in the noise first challenge and

257
00:12:30,320 --> 00:12:33,360
we find a peak up there and we are

258
00:12:33,360 --> 00:12:35,120
supposed to find the ip address of the

259
00:12:35,120 --> 00:12:36,240
rat

260
00:12:36,240 --> 00:12:39,120
so i have opened here in wireshark that

261
00:12:39,120 --> 00:12:41,040
file already

262
00:12:41,040 --> 00:12:45,040
and uh i guess our solution was a bit of

263
00:12:45,040 --> 00:12:45,680
uh

264
00:12:45,680 --> 00:12:47,920
a bit of a lack or i'm not sure what is

265
00:12:47,920 --> 00:12:50,000
the intended one but when we scroll

266
00:12:50,000 --> 00:12:52,880
through these packages we can notice at

267
00:12:52,880 --> 00:12:55,040
some point that there is quite a few

268
00:12:55,040 --> 00:12:58,800
malformed packets and this

269
00:12:58,800 --> 00:13:02,240
continues also here and here

270
00:13:02,240 --> 00:13:05,519
and here and so on and they are more

271
00:13:05,519 --> 00:13:09,120
like i think all of them they are

272
00:13:09,120 --> 00:13:12,240
originating from the 91

273
00:13:12,240 --> 00:13:15,680
ip so it's kind of like just

274
00:13:15,680 --> 00:13:18,320
try and then i guess we were lucky that

275
00:13:18,320 --> 00:13:21,320
we tried this one and that worked

276
00:13:21,320 --> 00:13:23,519
[Music]

277
00:13:23,519 --> 00:13:26,720
but also we can notice that most of that

278
00:13:26,720 --> 00:13:27,600
communication

279
00:13:27,600 --> 00:13:30,399
is also originating from this ip so

280
00:13:30,399 --> 00:13:30,880
since

281
00:13:30,880 --> 00:13:32,560
most of the traffic is there you can

282
00:13:32,560 --> 00:13:34,000
kind of assume that this is most

283
00:13:34,000 --> 00:13:34,560
probably

284
00:13:34,560 --> 00:13:38,399
the rat but that's the only

285
00:13:38,399 --> 00:13:40,160
less interesting part of this challenge

286
00:13:40,160 --> 00:13:42,560
the more interesting one is than a

287
00:13:42,560 --> 00:13:47,359
second one which follows after

288
00:13:47,440 --> 00:13:49,839
so then this is the interesting one

289
00:13:49,839 --> 00:13:51,440
which is hiding in the noise 2

290
00:13:51,440 --> 00:13:54,880
where we got the dll that we need to

291
00:13:54,880 --> 00:13:58,160
reverse and combine with

292
00:13:58,160 --> 00:14:01,279
the speak up to have an understanding so

293
00:14:01,279 --> 00:14:04,079
this i have done here

294
00:14:04,079 --> 00:14:07,600
if we open the dll in the dot peak

295
00:14:07,600 --> 00:14:11,199
that's a dotnet library so we can easily

296
00:14:11,199 --> 00:14:16,160
see the compiled code

297
00:14:16,160 --> 00:14:18,480
as you can see here we have the program

298
00:14:18,480 --> 00:14:19,519
which basically

299
00:14:19,519 --> 00:14:23,519
connects to the uh to the right

300
00:14:23,519 --> 00:14:26,880
and uh it supports a few

301
00:14:26,880 --> 00:14:28,560
comments like zipping files sending

302
00:14:28,560 --> 00:14:30,000
comments that's the live

303
00:14:30,000 --> 00:14:32,480
create person shut down and we are

304
00:14:32,480 --> 00:14:34,639
interested in finding the ap address so

305
00:14:34,639 --> 00:14:36,959
if we look again at this

306
00:14:36,959 --> 00:14:39,120
we want an ipad just off the connection

307
00:14:39,120 --> 00:14:41,199
that is successful

308
00:14:41,199 --> 00:14:44,959
so then we come back here now we can see

309
00:14:44,959 --> 00:14:48,000
the results section so if we go

310
00:14:48,000 --> 00:14:51,920
to commands here we have the compiled

311
00:14:51,920 --> 00:14:52,639
view

312
00:14:52,639 --> 00:14:55,279
and there is the result section and we

313
00:14:55,279 --> 00:14:56,240
can see that

314
00:14:56,240 --> 00:14:59,600
these two if result is true

315
00:14:59,600 --> 00:15:02,639
then we send this data

316
00:15:02,639 --> 00:15:06,399
if it's false then we send this data

317
00:15:06,399 --> 00:15:09,360
and the major difference between the two

318
00:15:09,360 --> 00:15:11,199
is this byte

319
00:15:11,199 --> 00:15:13,279
here when it's false so if the result

320
00:15:13,279 --> 00:15:15,680
was unsuccessful then in 16

321
00:15:15,680 --> 00:15:18,720
if it was successful then it's 17.

322
00:15:18,720 --> 00:15:20,959
so this is the interesting part we we

323
00:15:20,959 --> 00:15:23,040
know already that we are looking for a

324
00:15:23,040 --> 00:15:23,920
packet that

325
00:15:23,920 --> 00:15:26,160
has been successful so that that will be

326
00:15:26,160 --> 00:15:29,040
the first filter that we will use

327
00:15:29,040 --> 00:15:31,759
but then we also want to know which one

328
00:15:31,759 --> 00:15:33,360
contains the ap address that we are

329
00:15:33,360 --> 00:15:34,639
interested in

330
00:15:34,639 --> 00:15:38,880
if we scroll up here we can see that

331
00:15:38,880 --> 00:15:40,560
the only one that contains the ap

332
00:15:40,560 --> 00:15:42,000
address from these

333
00:15:42,000 --> 00:15:44,000
comments that were mentioned here we can

334
00:15:44,000 --> 00:15:45,440
see that

335
00:15:45,440 --> 00:15:48,560
this one takes an argument the others

336
00:15:48,560 --> 00:15:52,560
do not so we go here

337
00:15:52,959 --> 00:15:55,839
and then this one address and is

338
00:15:55,839 --> 00:15:57,120
combined with this

339
00:15:57,120 --> 00:16:00,480
id in order to create an ip address none

340
00:16:00,480 --> 00:16:01,600
of the others

341
00:16:01,600 --> 00:16:04,399
do that so then this becomes interesting

342
00:16:04,399 --> 00:16:05,680
for us

343
00:16:05,680 --> 00:16:08,800
so then we come back here so we are

344
00:16:08,800 --> 00:16:09,519
interested

345
00:16:09,519 --> 00:16:15,279
in byte here we want the value of 47

346
00:16:15,279 --> 00:16:18,560
so that uh send command is

347
00:16:18,560 --> 00:16:22,000
being executed and we want this to be

348
00:16:22,000 --> 00:16:23,839
the byte that i showed before in the

349
00:16:23,839 --> 00:16:26,880
result we want this to be successful

350
00:16:26,880 --> 00:16:30,160
so then we need to set up these filters

351
00:16:30,160 --> 00:16:30,959
correctly

352
00:16:30,959 --> 00:16:34,079
we will start with

353
00:16:34,880 --> 00:16:37,920
taking a note of this num array

354
00:16:37,920 --> 00:16:40,800
because this is sent to command so we

355
00:16:40,800 --> 00:16:43,759
know that this byte is the

356
00:16:43,759 --> 00:16:46,959
last one here so then we go to result

357
00:16:46,959 --> 00:16:50,560
and we know that this is being sent

358
00:16:50,560 --> 00:16:55,839
as part actually of the result comment

359
00:16:55,839 --> 00:16:59,920
so if we go here to result

360
00:16:59,920 --> 00:17:02,560
let's go back down here let's call the

361
00:17:02,560 --> 00:17:05,280
return invoke

362
00:17:05,280 --> 00:17:09,679
so we will be interested in this value

363
00:17:09,679 --> 00:17:12,880
so now we can using all of this

364
00:17:12,880 --> 00:17:15,359
information the other one is written

365
00:17:15,359 --> 00:17:17,039
property here

366
00:17:17,039 --> 00:17:21,119
and this as you can see num ra 16

367
00:17:21,119 --> 00:17:23,039
this is the one that is switched on here

368
00:17:23,039 --> 00:17:25,359
so we want the num ra16

369
00:17:25,359 --> 00:17:28,880
to be 47

370
00:17:28,880 --> 00:17:32,000
which in hex is 2f so now we can go

371
00:17:32,000 --> 00:17:36,799
to wireshark

372
00:17:36,960 --> 00:17:40,080
and the easiest will be to look

373
00:17:40,080 --> 00:17:42,160
at these values this will make it easier

374
00:17:42,160 --> 00:17:44,799
for us especially the zeros i think

375
00:17:44,799 --> 00:17:48,000
so if we go to wireshark we can scroll

376
00:17:48,000 --> 00:17:48,960
all the way

377
00:17:48,960 --> 00:17:52,480
maybe i'll sort on the source

378
00:17:52,480 --> 00:17:54,640
and we can go to this 91 which we

379
00:17:54,640 --> 00:17:56,559
established before

380
00:17:56,559 --> 00:17:59,760
and we can start comparing these values

381
00:17:59,760 --> 00:18:02,960
we can see there are these zeros here

382
00:18:02,960 --> 00:18:07,360
and this c is here we go back to

383
00:18:07,840 --> 00:18:11,840
our decompilation 12 is the c

384
00:18:11,840 --> 00:18:13,840
that this is the c and then we have

385
00:18:13,840 --> 00:18:14,880
three zeros

386
00:18:14,880 --> 00:18:17,120
so we can notice that this is that part

387
00:18:17,120 --> 00:18:18,640
of the packages

388
00:18:18,640 --> 00:18:21,039
and then we are interested in the second

389
00:18:21,039 --> 00:18:24,000
from the last one

390
00:18:24,720 --> 00:18:29,280
17 this one so we want that one

391
00:18:29,280 --> 00:18:32,320
17 in hex that will be 11. this one is

392
00:18:32,320 --> 00:18:32,720
10

393
00:18:32,720 --> 00:18:35,120
so this is not what we want we can start

394
00:18:35,120 --> 00:18:37,039
creating a filter then

395
00:18:37,039 --> 00:18:39,360
i already created it before so you can

396
00:18:39,360 --> 00:18:42,320
see it here in the history

397
00:18:42,320 --> 00:18:45,120
so if we search for this frame and then

398
00:18:45,120 --> 00:18:45,760
how we

399
00:18:45,760 --> 00:18:48,799
know these values so if we mark

400
00:18:48,799 --> 00:18:54,160
this one with our mouse then we can see

401
00:18:54,559 --> 00:18:56,720
i'm not sure how to show it but on the

402
00:18:56,720 --> 00:19:00,720
bottom left you can see bytes48 260.

403
00:19:00,720 --> 00:19:03,520
now now it's better visible so this is

404
00:19:03,520 --> 00:19:04,720
57

405
00:19:04,720 --> 00:19:08,160
that's the one where we want to have 2f

406
00:19:08,160 --> 00:19:11,280
this is 58 and this is 59

407
00:19:11,280 --> 00:19:15,200
so here we want 11 here we want to do f

408
00:19:15,200 --> 00:19:17,679
right that's if we come back to the the

409
00:19:17,679 --> 00:19:20,320
compilation

410
00:19:20,320 --> 00:19:23,600
this is this byte and then we're

411
00:19:23,600 --> 00:19:25,679
interested

412
00:19:25,679 --> 00:19:30,640
in this one these two so we come back

413
00:19:30,640 --> 00:19:33,280
here we apply the filter and then there

414
00:19:33,280 --> 00:19:36,320
is only one packet

415
00:19:36,320 --> 00:19:40,799
and then we come back to the compilation

416
00:19:40,799 --> 00:19:45,280
and we want to read this byte so this is

417
00:19:45,280 --> 00:19:49,120
before the zeros and these two c's

418
00:19:49,120 --> 00:19:53,520
we can go back we see the zeros

419
00:19:53,520 --> 00:19:57,760
these two c's and then there is 8c

420
00:19:57,760 --> 00:20:01,120
now we can go to python and we can

421
00:20:01,120 --> 00:20:04,880
get an int 0x

422
00:20:04,880 --> 00:20:08,799
let's see that's 140

423
00:20:08,799 --> 00:20:13,039
that means that if we go

424
00:20:13,039 --> 00:20:17,200
here and we add 140

425
00:20:17,200 --> 00:20:18,960
that's the ip that we have been looking

426
00:20:18,960 --> 00:20:22,080
for and that was the correct flag

427
00:20:22,080 --> 00:20:25,200
that was actually solving the challenge

428
00:20:25,200 --> 00:20:27,919
here so this was the interesting part of

429
00:20:27,919 --> 00:20:29,679
this challenge

430
00:20:29,679 --> 00:20:31,760
especially if you see that this couple

431
00:20:31,760 --> 00:20:33,039
of attempts we had

432
00:20:33,039 --> 00:20:34,799
at the beginning were failures because

433
00:20:34,799 --> 00:20:36,480
we fell for the fact that

434
00:20:36,480 --> 00:20:40,240
this interface that has been shown in

435
00:20:40,240 --> 00:20:42,480
here

436
00:20:42,960 --> 00:20:45,919
it's none of the traffic that goes

437
00:20:45,919 --> 00:20:48,000
towards that ip is in the pickup

438
00:20:48,000 --> 00:20:50,159
so we at the beginning we're thinking

439
00:20:50,159 --> 00:20:52,880
about those ips that show

440
00:20:52,880 --> 00:20:55,919
here in the pickup so that's what freud

441
00:20:55,919 --> 00:20:58,320
threw us off but fortunately we managed

442
00:20:58,320 --> 00:21:00,320
to figure it out before we run out of

443
00:21:00,320 --> 00:21:02,799
the attempts

444
00:21:02,799 --> 00:21:05,520
so i guess that's it and then thanks

445
00:21:05,520 --> 00:21:07,760
everyone and i will stop sharing so i

446
00:21:07,760 --> 00:21:11,280
can take over on the next challenge

447
00:21:12,320 --> 00:21:17,440
right then i will swiftly

448
00:21:17,440 --> 00:21:22,320
show you the hdmi phone challenges

449
00:21:22,720 --> 00:21:26,320
okay start sharing i guess i don't need

450
00:21:26,320 --> 00:21:29,360
the presentation anymore

451
00:21:29,360 --> 00:21:33,039
uh so the first this html

452
00:21:33,039 --> 00:21:36,559
each hdmi poning challenges you got on

453
00:21:36,559 --> 00:21:39,679
elf and the challenge the first

454
00:21:39,679 --> 00:21:40,559
challenge is

455
00:21:40,559 --> 00:21:42,960
you need to find the password that log

456
00:21:42,960 --> 00:21:44,799
in as the user engineer

457
00:21:44,799 --> 00:21:47,280
and you can also hmi coolant is a linux

458
00:21:47,280 --> 00:21:48,799
binary that is safe to run on your local

459
00:21:48,799 --> 00:21:49,280
machine

460
00:21:49,280 --> 00:21:52,720
when you start it it starts up a server

461
00:21:52,720 --> 00:21:54,720
that is listening on port 5050 so you

462
00:21:54,720 --> 00:21:56,880
can connect and interact with it

463
00:21:56,880 --> 00:21:58,799
but for the first one that is not

464
00:21:58,799 --> 00:22:00,320
necessary uh

465
00:22:00,320 --> 00:22:03,760
all we need to do is to look in either

466
00:22:03,760 --> 00:22:06,640
i obviously have a full ida license but

467
00:22:06,640 --> 00:22:07,520
uh also

468
00:22:07,520 --> 00:22:10,480
the free version now supports the

469
00:22:10,480 --> 00:22:11,280
compilation

470
00:22:11,280 --> 00:22:14,720
of x64

471
00:22:14,720 --> 00:22:16,240
binaries so you can actually grab this

472
00:22:16,240 --> 00:22:18,320
for free and be able to

473
00:22:18,320 --> 00:22:22,720
to disassemble and decompile this code

474
00:22:22,720 --> 00:22:25,120
if we look at the main function we see

475
00:22:25,120 --> 00:22:27,280
that there is a connection handler

476
00:22:27,280 --> 00:22:29,600
and if we go there we can see kind of

477
00:22:29,600 --> 00:22:31,280
how to

478
00:22:31,280 --> 00:22:34,799
what the it does when a new client

479
00:22:34,799 --> 00:22:35,600
connect

480
00:22:35,600 --> 00:22:37,919
and it first prints the menu i guess i

481
00:22:37,919 --> 00:22:39,440
can show you this first as well how it

482
00:22:39,440 --> 00:22:41,360
works i have it running

483
00:22:41,360 --> 00:22:44,400
locally unfortunately the remote

484
00:22:44,400 --> 00:22:46,880
server is taken down but i have it

485
00:22:46,880 --> 00:22:49,200
running here so i can do

486
00:22:49,200 --> 00:22:51,440
and see localhost and then you can see

487
00:22:51,440 --> 00:22:52,840
this is the

488
00:22:52,840 --> 00:22:56,159
menu you get and then you can kind of

489
00:22:56,159 --> 00:22:58,960
type status

490
00:22:59,280 --> 00:23:02,000
but now if you don't do anything else it

491
00:23:02,000 --> 00:23:02,480
will just

492
00:23:02,480 --> 00:23:05,440
yeah no response it will fail because if

493
00:23:05,440 --> 00:23:07,200
we look further here we can see that it

494
00:23:07,200 --> 00:23:08,000
actually tries to

495
00:23:08,000 --> 00:23:10,799
connect to a buscan interface but we're

496
00:23:10,799 --> 00:23:12,240
interested in the login

497
00:23:12,240 --> 00:23:15,520
so if you write login

498
00:23:15,520 --> 00:23:17,919
you get a prompt for a username and that

499
00:23:17,919 --> 00:23:18,880
should be engineer

500
00:23:18,880 --> 00:23:20,640
and then you need the password that was

501
00:23:20,640 --> 00:23:22,240
not correct

502
00:23:22,240 --> 00:23:24,960
so if we look through this code we can

503
00:23:24,960 --> 00:23:26,320
go

504
00:23:26,320 --> 00:23:28,240
and find where the login magic is

505
00:23:28,240 --> 00:23:30,320
happening and that is here

506
00:23:30,320 --> 00:23:33,760
first it writes to the file descriptor

507
00:23:33,760 --> 00:23:36,880
the username then it receives hex 10 16

508
00:23:36,880 --> 00:23:38,159
bytes back

509
00:23:38,159 --> 00:23:40,320
then it sends our password and wants to

510
00:23:40,320 --> 00:23:41,360
receive

511
00:23:41,360 --> 00:23:43,919
decimal 33 bytes back into the password

512
00:23:43,919 --> 00:23:45,360
buffer

513
00:23:45,360 --> 00:23:49,440
and then it sends a pointer to this

514
00:23:49,440 --> 00:23:52,000
which is a struct i haven't uh rebased

515
00:23:52,000 --> 00:23:55,039
it correctly but it should be abstract

516
00:23:55,039 --> 00:23:59,279
and then it sends that to this function

517
00:23:59,279 --> 00:24:01,039
and here you can see that first it

518
00:24:01,039 --> 00:24:02,400
checks

519
00:24:02,400 --> 00:24:05,840
if the first eight bytes is engineer

520
00:24:05,840 --> 00:24:09,039
and then if it is then it compares

521
00:24:09,039 --> 00:24:12,000
a1 plus 16 which is basically where the

522
00:24:12,000 --> 00:24:14,320
you entered the password in the buffer

523
00:24:14,320 --> 00:24:18,559
is stable battery correctors which

524
00:24:18,559 --> 00:24:21,840
is a reference to the uh password

525
00:24:21,840 --> 00:24:24,880
difficulty comic by x yeah

526
00:24:24,880 --> 00:24:26,159
something i don't remember the name of

527
00:24:26,159 --> 00:24:28,880
that comic and so then we know that the

528
00:24:28,880 --> 00:24:30,400
answer to the first challenge

529
00:24:30,400 --> 00:24:33,840
is this password

530
00:24:34,080 --> 00:24:36,880
so then the next part of this challenge

531
00:24:36,880 --> 00:24:37,760
is

532
00:24:37,760 --> 00:24:41,440
to determine the can id and the data

533
00:24:41,440 --> 00:24:43,520
this hmi software sends to pull the

534
00:24:43,520 --> 00:24:45,679
controllers for their status

535
00:24:45,679 --> 00:24:48,320
so i've never looked at the can protocol

536
00:24:48,320 --> 00:24:49,360
before

537
00:24:49,360 --> 00:24:52,400
but i started with reversing again i saw

538
00:24:52,400 --> 00:24:53,279
here that there's

539
00:24:53,279 --> 00:24:56,480
a function called print plc status

540
00:24:56,480 --> 00:25:00,000
that looks good to me and if we go in

541
00:25:00,000 --> 00:25:01,760
to the function we can kind of see that

542
00:25:01,760 --> 00:25:04,320
it prints out something about the status

543
00:25:04,320 --> 00:25:07,760
and it uses this a1 as

544
00:25:07,760 --> 00:25:12,159
uh as the data input to if it's

545
00:25:12,159 --> 00:25:15,840
running or not

546
00:25:16,480 --> 00:25:19,440
and we can also see that both read and

547
00:25:19,440 --> 00:25:20,000
write

548
00:25:20,000 --> 00:25:22,400
or do can write and do can read it test

549
00:25:22,400 --> 00:25:23,919
if it can

550
00:25:23,919 --> 00:25:25,919
can read oh sorry this is not correct

551
00:25:25,919 --> 00:25:27,440
this a1

552
00:25:27,440 --> 00:25:30,000
is actually an argument in what it uses

553
00:25:30,000 --> 00:25:30,720
here is like

554
00:25:30,720 --> 00:25:34,240
this v13 if that is two then it runs

555
00:25:34,240 --> 00:25:34,559
right

556
00:25:34,559 --> 00:25:36,480
is running if it's one it says it's

557
00:25:36,480 --> 00:25:39,039
crashed and else it's just stopped

558
00:25:39,039 --> 00:25:40,640
so if we go and have a look what this

559
00:25:40,640 --> 00:25:42,880
v13 is we can see that it's set here to

560
00:25:42,880 --> 00:25:44,480
hex 64.

561
00:25:44,480 --> 00:25:48,480
and it's part of this

562
00:25:48,480 --> 00:25:52,000
and also to this can

563
00:25:52,000 --> 00:25:55,120
write and read functions a pointer to v9

564
00:25:55,120 --> 00:25:56,159
is passed

565
00:25:56,159 --> 00:25:58,720
and this is i could have fixed this up

566
00:25:58,720 --> 00:25:59,520
as well

567
00:25:59,520 --> 00:26:03,679
but uh basically these are 16 bytes

568
00:26:03,679 --> 00:26:06,159
that contains different val values the

569
00:26:06,159 --> 00:26:07,600
first one here

570
00:26:07,600 --> 00:26:10,720
being an in and it's the actual

571
00:26:10,720 --> 00:26:12,799
can id and then there's it's kind of

572
00:26:12,799 --> 00:26:14,720
weird because then it just says

573
00:26:14,720 --> 00:26:17,200
this v10 is four bytes but it says the

574
00:26:17,200 --> 00:26:18,080
one of the bytes

575
00:26:18,080 --> 00:26:20,320
to six the lowest one and then it's like

576
00:26:20,320 --> 00:26:22,799
sets uh six additional bytes

577
00:26:22,799 --> 00:26:25,200
so we go in here we can see that that's

578
00:26:25,200 --> 00:26:26,640
passed in

579
00:26:26,640 --> 00:26:28,799
the pointer to this structure these 16

580
00:26:28,799 --> 00:26:30,640
bytes and then

581
00:26:30,640 --> 00:26:32,559
we can see that it uses an interface

582
00:26:32,559 --> 00:26:33,919
called vcan0

583
00:26:33,919 --> 00:26:36,960
and it tries to send these 16 hex

584
00:26:36,960 --> 00:26:40,080
10 bytes to the socket so then kind of

585
00:26:40,080 --> 00:26:41,279
that's your answer

586
00:26:41,279 --> 00:26:44,720
right there that's the the bus id

587
00:26:44,720 --> 00:26:46,480
and the message being sent but then

588
00:26:46,480 --> 00:26:48,640
again there's a protocol in place there

589
00:26:48,640 --> 00:26:50,559
so i what i tried to do

590
00:26:50,559 --> 00:26:54,559
when i saw this i went here and i did

591
00:26:54,559 --> 00:26:58,320
i disassembled the this do

592
00:26:58,320 --> 00:27:02,000
can write function and i found the right

593
00:27:02,000 --> 00:27:02,640
here so

594
00:27:02,640 --> 00:27:05,760
i set the breakpoint that you can

595
00:27:05,760 --> 00:27:09,039
right plus

596
00:27:09,440 --> 00:27:13,039
286 then i continue running

597
00:27:13,039 --> 00:27:15,919
and then i do a status here and then it

598
00:27:15,919 --> 00:27:17,840
breaks for me at that exact point when

599
00:27:17,840 --> 00:27:19,440
it wants to call it

600
00:27:19,440 --> 00:27:23,200
and then rsi is the first parameter

601
00:27:23,200 --> 00:27:25,440
and then if we do we can look at those

602
00:27:25,440 --> 00:27:27,600
16 bytes

603
00:27:27,600 --> 00:27:30,960
that are present in that

604
00:27:30,960 --> 00:27:32,399
buffer we can see that it's

605
00:27:32,399 --> 00:27:34,399
corresponding to what we saw in iota the

606
00:27:34,399 --> 00:27:37,039
first two bytes are d903

607
00:27:37,039 --> 00:27:39,919
and this is a 32-bit integer so that

608
00:27:39,919 --> 00:27:41,120
makes sense

609
00:27:41,120 --> 00:27:43,200
and then the 6 is there also as a 32

610
00:27:43,200 --> 00:27:44,960
byte integer and then there's some more

611
00:27:44,960 --> 00:27:46,000
data

612
00:27:46,000 --> 00:27:47,600
but then i was really confused how i

613
00:27:47,600 --> 00:27:49,200
should submit this data like

614
00:27:49,200 --> 00:27:51,120
i understood that these three bytes were

615
00:27:51,120 --> 00:27:52,559
the id but

616
00:27:52,559 --> 00:27:55,679
what is this sixth thing and uh

617
00:27:55,679 --> 00:27:58,159
what are the like the data what is

618
00:27:58,159 --> 00:27:59,440
padding and so on

619
00:27:59,440 --> 00:28:01,440
so what i did in the end to figure this

620
00:28:01,440 --> 00:28:04,080
out i created a vcan 0 interface you can

621
00:28:04,080 --> 00:28:05,760
just

622
00:28:05,760 --> 00:28:08,799
google how to do it but basically yeah

623
00:28:08,799 --> 00:28:10,240
just set it up and then

624
00:28:10,240 --> 00:28:12,159
you can start listening for traffic

625
00:28:12,159 --> 00:28:16,399
there and then if i just continue this

626
00:28:16,399 --> 00:28:18,960
it would try to send data to it as you

627
00:28:18,960 --> 00:28:22,799
can see here i should make this smaller

628
00:28:22,960 --> 00:28:25,039
and then we can go in the data and see

629
00:28:25,039 --> 00:28:26,080
and this

630
00:28:26,080 --> 00:28:27,679
wireshark is great of course because it

631
00:28:27,679 --> 00:28:29,760
knows the protocol the cam protocol and

632
00:28:29,760 --> 00:28:30,480
it

633
00:28:30,480 --> 00:28:33,159
kind of tells me that the identifier is

634
00:28:33,159 --> 00:28:34,559
0x3d9

635
00:28:34,559 --> 00:28:36,799
and the data are these six bytes so then

636
00:28:36,799 --> 00:28:38,000
i know my flag is

637
00:28:38,000 --> 00:28:42,000
this colon the data

638
00:28:42,000 --> 00:28:44,880
so that was the second challenge um the

639
00:28:44,880 --> 00:28:47,520
third one

640
00:28:47,840 --> 00:28:50,960
uh is that they want those to send a

641
00:28:50,960 --> 00:28:52,000
close to valve

642
00:28:52,000 --> 00:28:55,760
109 but the issue is that

643
00:28:55,760 --> 00:28:59,120
alphone allows us to interact with valve

644
00:28:59,120 --> 00:29:02,799
100 to 105 so then again we go back

645
00:29:02,799 --> 00:29:06,480
to the disassembly and we can

646
00:29:06,480 --> 00:29:08,480
look at the functions this binary is not

647
00:29:08,480 --> 00:29:09,600
stripped so that's

648
00:29:09,600 --> 00:29:12,240
kind of nice and then we see there's a

649
00:29:12,240 --> 00:29:12,720
function

650
00:29:12,720 --> 00:29:15,360
called change value so this is of course

651
00:29:15,360 --> 00:29:17,679
interesting because this is kind of

652
00:29:17,679 --> 00:29:20,240
creating the data again i haven't kind

653
00:29:20,240 --> 00:29:21,840
of cleaned up either here so it looked

654
00:29:21,840 --> 00:29:24,559
kind of gibberish

655
00:29:24,559 --> 00:29:26,320
but we can see there is some xoring

656
00:29:26,320 --> 00:29:28,799
going on with a plc code an hmi code and

657
00:29:28,799 --> 00:29:30,159
then there's also a

658
00:29:30,159 --> 00:29:33,679
crc calculation of the data so

659
00:29:33,679 --> 00:29:37,200
an option here could be to actually just

660
00:29:37,200 --> 00:29:38,880
do these calculations and create the

661
00:29:38,880 --> 00:29:40,320
packet that way

662
00:29:40,320 --> 00:29:42,880
but i thought it was a better idea to

663
00:29:42,880 --> 00:29:45,279
see how

664
00:29:45,279 --> 00:29:48,720
the binary kind of tells you which

665
00:29:48,720 --> 00:29:50,320
valves you can open or not so then i

666
00:29:50,320 --> 00:29:52,559
went and checked from where is this

667
00:29:52,559 --> 00:29:53,279
function called

668
00:29:53,279 --> 00:29:54,720
because in the function itself there is

669
00:29:54,720 --> 00:29:56,559
no error checking

670
00:29:56,559 --> 00:29:58,720
so then we can see here we're back in

671
00:29:58,720 --> 00:29:59,679
the

672
00:29:59,679 --> 00:30:01,520
connection handler function and we can

673
00:30:01,520 --> 00:30:03,600
see that there is a if statement here

674
00:30:03,600 --> 00:30:07,440
this is to open the valve and there is

675
00:30:07,440 --> 00:30:09,760
one more to close the valve and then it

676
00:30:09,760 --> 00:30:11,760
checks like

677
00:30:11,760 --> 00:30:15,679
it reads in an integer

678
00:30:15,679 --> 00:30:18,080
and then it or it reads in a string and

679
00:30:18,080 --> 00:30:19,679
then parses it to an int

680
00:30:19,679 --> 00:30:21,039
and then it checks that the value of

681
00:30:21,039 --> 00:30:24,399
that integer is between 100 and 105

682
00:30:24,399 --> 00:30:26,880
so then what you can do is to find this

683
00:30:26,880 --> 00:30:29,039
in

684
00:30:29,200 --> 00:30:32,320
in here and if we go to

685
00:30:32,320 --> 00:30:36,640
change no we go to connection handler

686
00:30:36,640 --> 00:30:39,760
and we scroll to the code hopefully

687
00:30:39,760 --> 00:30:40,880
trying to find it

688
00:30:40,880 --> 00:30:42,960
of course i didn't remember what line

689
00:30:42,960 --> 00:30:44,240
it's on

690
00:30:44,240 --> 00:30:48,640
but we can look at the strings to cheat

691
00:30:49,039 --> 00:30:51,600
that's factory reset and then there is

692
00:30:51,600 --> 00:30:52,159
who am

693
00:30:52,159 --> 00:30:55,200
i not only command oh

694
00:30:55,200 --> 00:30:59,519
did i go too far now i'll open up

695
00:30:59,519 --> 00:31:02,080
here we go and then ask for which valve

696
00:31:02,080 --> 00:31:03,200
you want to open

697
00:31:03,200 --> 00:31:05,360
it reads it in converts it to an end and

698
00:31:05,360 --> 00:31:06,720
then we can see the comparison

699
00:31:06,720 --> 00:31:10,799
to hex 63 which we can

700
00:31:10,799 --> 00:31:12,880
switch this over to decimal for easy

701
00:31:12,880 --> 00:31:15,360
reading it does this compares right it

702
00:31:15,360 --> 00:31:18,480
checks that it's above 99 and it checks

703
00:31:18,480 --> 00:31:19,760
that it's below

704
00:31:19,760 --> 00:31:23,120
or equal to 105. so what i did then i

705
00:31:23,120 --> 00:31:24,480
found this byte

706
00:31:24,480 --> 00:31:27,039
and then we can go to the hex view and

707
00:31:27,039 --> 00:31:28,640
then this is kind of highlighting

708
00:31:28,640 --> 00:31:32,399
this exact line of code so this 69

709
00:31:32,399 --> 00:31:36,640
is the hex or hex 69 is 105

710
00:31:36,640 --> 00:31:38,480
and then i can click that by and then we

711
00:31:38,480 --> 00:31:40,159
can see down here

712
00:31:40,159 --> 00:31:43,279
uh the physical location in the binary

713
00:31:43,279 --> 00:31:45,360
where this byte is located so then you

714
00:31:45,360 --> 00:31:47,360
can open the binary in a hex editor

715
00:31:47,360 --> 00:31:49,120
just modify this byte set it to for

716
00:31:49,120 --> 00:31:50,960
example 79

717
00:31:50,960 --> 00:31:54,080
and then run the binary now i'm not sure

718
00:31:54,080 --> 00:31:55,679
if i have the modified version

719
00:31:55,679 --> 00:31:58,559
or the other one here but at least i

720
00:31:58,559 --> 00:32:00,559
need to log in now so i need to log in

721
00:32:00,559 --> 00:32:03,600
as engineer and then i need to grab the

722
00:32:03,600 --> 00:32:04,399
password

723
00:32:04,399 --> 00:32:07,679
and that is in here and then

724
00:32:07,679 --> 00:32:10,399
check login

725
00:32:11,360 --> 00:32:14,720
and then we take this

726
00:32:14,720 --> 00:32:17,919
password paste it in and then we can do

727
00:32:17,919 --> 00:32:20,080
help to see the commands and i was

728
00:32:20,080 --> 00:32:23,760
too close a valve i think

729
00:32:25,039 --> 00:32:28,480
and then i just write one online and

730
00:32:28,480 --> 00:32:30,720
because i modified my binary i changed

731
00:32:30,720 --> 00:32:32,399
that one byte and a hex editor i'm

732
00:32:32,399 --> 00:32:33,440
allowed to do it

733
00:32:33,440 --> 00:32:36,880
it doesn't stop me anymore and then also

734
00:32:36,880 --> 00:32:40,000
oh i'm breaking and then we can also see

735
00:32:40,000 --> 00:32:40,399
that

736
00:32:40,399 --> 00:32:42,559
the actual data is being sent here so

737
00:32:42,559 --> 00:32:45,039
now i have a new identifier it's 185

738
00:32:45,039 --> 00:32:47,440
and here is the actual data so this time

739
00:32:47,440 --> 00:32:49,200
these two are the flag

740
00:32:49,200 --> 00:32:50,720
there is of course a billion ways to

741
00:32:50,720 --> 00:32:53,360
solve this but i thought this was the

742
00:32:53,360 --> 00:32:56,320
fastest and easiest one for the fourth

743
00:32:56,320 --> 00:32:56,960
challenge

744
00:32:56,960 --> 00:33:00,080
that was the coolest one i think where

745
00:33:00,080 --> 00:33:01,039
are you

746
00:33:01,039 --> 00:33:04,960
there in this one we are

747
00:33:04,960 --> 00:33:07,039
we have to log in as the administrator

748
00:33:07,039 --> 00:33:08,720
to reset

749
00:33:08,720 --> 00:33:12,159
the hmi and we have to do it uh

750
00:33:12,159 --> 00:33:14,960
towards the this live instance running

751
00:33:14,960 --> 00:33:16,880
at first infrastructure

752
00:33:16,880 --> 00:33:18,720
so then it says we're not supposed to

753
00:33:18,720 --> 00:33:20,159
crack the password

754
00:33:20,159 --> 00:33:22,720
i haven't shown you but the the way it

755
00:33:22,720 --> 00:33:24,000
checks the admin password is

756
00:33:24,000 --> 00:33:26,799
actually it converts it to a sha 256 i

757
00:33:26,799 --> 00:33:27,200
think

758
00:33:27,200 --> 00:33:29,919
or sha-1 maybe and then it checks it

759
00:33:29,919 --> 00:33:31,200
towards the hash

760
00:33:31,200 --> 00:33:34,080
that is in memory or in the file uh and

761
00:33:34,080 --> 00:33:34,559
uh

762
00:33:34,559 --> 00:33:36,240
of course we looked at that hash and

763
00:33:36,240 --> 00:33:38,480
there was no kind of known

764
00:33:38,480 --> 00:33:41,519
reversed value of it so we didn't bother

765
00:33:41,519 --> 00:33:42,399
anymore but then

766
00:33:42,399 --> 00:33:44,720
the goal is to find kind of we actually

767
00:33:44,720 --> 00:33:45,519
have the pawn

768
00:33:45,519 --> 00:33:47,519
the binary find the way to bypass the

769
00:33:47,519 --> 00:33:48,640
restriction

770
00:33:48,640 --> 00:33:52,960
because if we look uh here what it does

771
00:33:52,960 --> 00:33:54,240
in this one i actually did some

772
00:33:54,240 --> 00:33:55,840
modification to the binary so i think

773
00:33:55,840 --> 00:33:57,600
i'm going to show you in this one first

774
00:33:57,600 --> 00:33:59,679
which is the kind of without doing

775
00:33:59,679 --> 00:34:01,279
anything in either so we go to

776
00:34:01,279 --> 00:34:03,279
connection handler

777
00:34:03,279 --> 00:34:05,760
we go and check here what it does this

778
00:34:05,760 --> 00:34:06,720
is what we looked at

779
00:34:06,720 --> 00:34:09,359
earlier it does a login and then it

780
00:34:09,359 --> 00:34:11,040
calls the jack login function it takes

781
00:34:11,040 --> 00:34:14,000
the return value and it compares it to

782
00:34:14,000 --> 00:34:16,719
if it's b8 hex then you're logged in as

783
00:34:16,719 --> 00:34:18,320
engineer which we can successfully can

784
00:34:18,320 --> 00:34:19,040
do

785
00:34:19,040 --> 00:34:21,440
and if it's uh you successfully log in

786
00:34:21,440 --> 00:34:22,960
as the admirer admin

787
00:34:22,960 --> 00:34:26,239
it's c4 and then we can note this that

788
00:34:26,239 --> 00:34:27,119
it also

789
00:34:27,119 --> 00:34:31,040
sets this v12 value to the same

790
00:34:31,040 --> 00:34:32,800
and if we scroll further down to see how

791
00:34:32,800 --> 00:34:35,440
the type reset is done

792
00:34:35,440 --> 00:34:38,079
it first checks that v12 the value set

793
00:34:38,079 --> 00:34:40,079
above there is c4 meaning that you're

794
00:34:40,079 --> 00:34:42,879
logged in as an admin

795
00:34:42,879 --> 00:34:45,040
so then like the first thing i thought

796
00:34:45,040 --> 00:34:46,159
this was about

797
00:34:46,159 --> 00:34:48,639
was of course the check login function

798
00:34:48,639 --> 00:34:49,440
but this is

799
00:34:49,440 --> 00:34:51,440
all sound in here it does everything

800
00:34:51,440 --> 00:34:53,599
correct when it checks and this

801
00:34:53,599 --> 00:34:57,040
is a sha-1 hash so this is all good

802
00:34:57,040 --> 00:34:59,440
no vulnerabilities here and it's also

803
00:34:59,440 --> 00:35:02,000
like when you look at it now that b12

804
00:35:02,000 --> 00:35:04,640
is here below the password so it doesn't

805
00:35:04,640 --> 00:35:06,480
like it's not super easy to see what the

806
00:35:06,480 --> 00:35:08,079
problem is

807
00:35:08,079 --> 00:35:10,160
and you can also see when it reads in

808
00:35:10,160 --> 00:35:12,320
the password it reads in

809
00:35:12,320 --> 00:35:17,119
31 bytes right hex 21 or 33 i believe

810
00:35:17,119 --> 00:35:20,400
which is a bit odd like i guess

811
00:35:20,400 --> 00:35:22,000
you can kind of know what this is 16

812
00:35:22,000 --> 00:35:23,680
maybe this should have been 32 why are

813
00:35:23,680 --> 00:35:24,720
we reading

814
00:35:24,720 --> 00:35:28,880
33 and uh from this

815
00:35:28,880 --> 00:35:30,880
you can kind of start looking at it and

816
00:35:30,880 --> 00:35:32,640
understand what's going on but what i

817
00:35:32,640 --> 00:35:35,280
did to make this easier for myself

818
00:35:35,280 --> 00:35:38,400
was that i saw it read in the connection

819
00:35:38,400 --> 00:35:39,599
handler

820
00:35:39,599 --> 00:35:42,480
i saw that i read 33 bytes so then i

821
00:35:42,480 --> 00:35:43,200
just went

822
00:35:43,200 --> 00:35:45,280
here and i changed this to the user buff

823
00:35:45,280 --> 00:35:46,240
which is

824
00:35:46,240 --> 00:35:48,160
which is the username that was 16 of

825
00:35:48,160 --> 00:35:51,119
redding so i changed it to a

826
00:35:51,119 --> 00:35:53,359
character array of length 16 and then i

827
00:35:53,359 --> 00:35:54,400
changed this to a

828
00:35:54,400 --> 00:35:58,480
password buffer of length 33. so then

829
00:35:58,480 --> 00:35:59,359
what happens

830
00:35:59,359 --> 00:36:02,640
is that you can see instead all of this

831
00:36:02,640 --> 00:36:05,599
initiates it to zero which is fine but

832
00:36:05,599 --> 00:36:07,040
then you can see it like when it does to

833
00:36:07,040 --> 00:36:08,720
compare here for example when you want

834
00:36:08,720 --> 00:36:09,920
to open the

835
00:36:09,920 --> 00:36:11,599
the valve you can see it's actually part

836
00:36:11,599 --> 00:36:13,200
of the password buffer it's checking the

837
00:36:13,200 --> 00:36:14,720
last byte of this

838
00:36:14,720 --> 00:36:16,560
which you then control of course because

839
00:36:16,560 --> 00:36:18,400
you can read in a password

840
00:36:18,400 --> 00:36:22,160
to the buffer which is 33 bytes long

841
00:36:22,160 --> 00:36:24,320
so then to solve this what you need to

842
00:36:24,320 --> 00:36:25,599
do

843
00:36:25,599 --> 00:36:28,000
if i just break out of them that one and

844
00:36:28,000 --> 00:36:29,520
i just want to

845
00:36:29,520 --> 00:36:32,960
disable my breakpoint and continue it

846
00:36:32,960 --> 00:36:35,680
what this is just all of this up here is

847
00:36:35,680 --> 00:36:36,640
boilerplate

848
00:36:36,640 --> 00:36:39,760
code maybe i should zoom in a bit and

849
00:36:39,760 --> 00:36:42,640
full screen it

850
00:36:43,440 --> 00:36:46,160
yeah this is pawn tools boilerplate and

851
00:36:46,160 --> 00:36:47,599
then what we basically do

852
00:36:47,599 --> 00:36:50,480
is you can receive until input you send

853
00:36:50,480 --> 00:36:51,599
a login command

854
00:36:51,599 --> 00:36:54,079
you send whatever username we want and

855
00:36:54,079 --> 00:36:55,440
then you also can send

856
00:36:55,440 --> 00:36:57,440
whatever 32 byte you want but the

857
00:36:57,440 --> 00:36:58,560
important is that the

858
00:36:58,560 --> 00:37:01,680
33rd byte is a c4 i just send them all a

859
00:37:01,680 --> 00:37:02,640
c4 just

860
00:37:02,640 --> 00:37:07,920
for fun uh this rest here is kind of

861
00:37:07,920 --> 00:37:09,359
messing up the

862
00:37:09,359 --> 00:37:12,320
or explaining the uh last challenge

863
00:37:12,320 --> 00:37:13,040
already but

864
00:37:13,040 --> 00:37:15,359
if i run my solved script let's just

865
00:37:15,359 --> 00:37:16,400
comment out

866
00:37:16,400 --> 00:37:20,480
this for now and we'll do interactive so

867
00:37:20,480 --> 00:37:20,960
if i

868
00:37:20,960 --> 00:37:25,119
run it oh

869
00:37:28,960 --> 00:37:31,200
you can now see that i'm logged in as an

870
00:37:31,200 --> 00:37:32,079
administrator

871
00:37:32,079 --> 00:37:34,160
because i can now reset that so if i

872
00:37:34,160 --> 00:37:35,520
reset it

873
00:37:35,520 --> 00:37:39,200
oh reset of course it asks if i want to

874
00:37:39,200 --> 00:37:39,920
and i say yes

875
00:37:39,920 --> 00:37:41,760
and then it sends the factory message

876
00:37:41,760 --> 00:37:43,839
now it's local so i won't get the flag

877
00:37:43,839 --> 00:37:44,720
back of course

878
00:37:44,720 --> 00:37:47,599
and the remote server is taken down so i

879
00:37:47,599 --> 00:37:48,800
can't really show you

880
00:37:48,800 --> 00:37:50,320
that you get the flag you have to trust

881
00:37:50,320 --> 00:37:52,320
me so that's how you

882
00:37:52,320 --> 00:37:55,359
bypass the the admin password

883
00:37:55,359 --> 00:37:59,040
and the last challenge is a command

884
00:37:59,040 --> 00:38:01,119
injection one

885
00:38:01,119 --> 00:38:04,560
it is here so this time uh

886
00:38:04,560 --> 00:38:07,520
it asks still going against the remote

887
00:38:07,520 --> 00:38:08,079
instance

888
00:38:08,079 --> 00:38:10,320
can you exclude remote commands on the

889
00:38:10,320 --> 00:38:13,599
system and find the flag

890
00:38:14,079 --> 00:38:16,880
yeah and you have to wait until you can

891
00:38:16,880 --> 00:38:18,000
successfully do it

892
00:38:18,000 --> 00:38:21,200
all right so for this one if we go back

893
00:38:21,200 --> 00:38:21,680
to the

894
00:38:21,680 --> 00:38:23,760
we can actually first there just type

895
00:38:23,760 --> 00:38:25,599
help because when you are on admin you

896
00:38:25,599 --> 00:38:27,920
have this option to run a command

897
00:38:27,920 --> 00:38:30,160
but then you can just run these four

898
00:38:30,160 --> 00:38:34,240
three commands and you get an input back

899
00:38:34,240 --> 00:38:37,119
but if you try something else it will

900
00:38:37,119 --> 00:38:39,280
just fail and say another command

901
00:38:39,280 --> 00:38:41,200
then we can go and look here again

902
00:38:41,200 --> 00:38:43,599
there's a check value command function

903
00:38:43,599 --> 00:38:45,119
and we can see that there's a blacklist

904
00:38:45,119 --> 00:38:47,280
of characters you can't use

905
00:38:47,280 --> 00:38:49,119
and then a string compares the string

906
00:38:49,119 --> 00:38:51,599
you sent in with one of three these

907
00:38:51,599 --> 00:38:54,160
three but this is like it only checks

908
00:38:54,160 --> 00:38:55,839
the beginning of the string so you can

909
00:38:55,839 --> 00:38:57,200
have more data after

910
00:38:57,200 --> 00:39:00,480
as long as it starts with one of these

911
00:39:00,480 --> 00:39:03,520
so then what we can do is to do who am i

912
00:39:03,520 --> 00:39:05,119
and the pipe character is not

913
00:39:05,119 --> 00:39:06,800
blacklisted so we can use that

914
00:39:06,800 --> 00:39:09,200
and we can do oh we need to do command

915
00:39:09,200 --> 00:39:10,320
sorry command

916
00:39:10,320 --> 00:39:13,440
and then i'll use your name

917
00:39:13,440 --> 00:39:15,920
you name ls and then i'll both run

918
00:39:15,920 --> 00:39:17,040
unname and

919
00:39:17,040 --> 00:39:20,640
ls and as you can see ls is successfully

920
00:39:20,640 --> 00:39:22,320
run and you can see the files i have in

921
00:39:22,320 --> 00:39:23,680
this folder

922
00:39:23,680 --> 00:39:25,440
and then you can see that there's a flag

923
00:39:25,440 --> 00:39:27,680
here which is my local fake flag

924
00:39:27,680 --> 00:39:30,240
and then i can kind of try to do you

925
00:39:30,240 --> 00:39:31,599
name

926
00:39:31,599 --> 00:39:34,000
pipe

927
00:39:34,720 --> 00:39:38,240
ls and then or i can try to cut it right

928
00:39:38,240 --> 00:39:41,440
flag txt but this won't work because the

929
00:39:41,440 --> 00:39:42,000
space

930
00:39:42,000 --> 00:39:44,320
is blacklisted so then we just tell me

931
00:39:44,320 --> 00:39:46,079
invalid command

932
00:39:46,079 --> 00:39:50,400
so then we need to bypass this

933
00:39:50,400 --> 00:39:52,079
white space being blacklisted and the

934
00:39:52,079 --> 00:39:53,920
way you can do that in

935
00:39:53,920 --> 00:39:56,160
unix this i guess i have to show you

936
00:39:56,160 --> 00:39:57,839
first as well

937
00:39:57,839 --> 00:40:01,200
the command is run using p open uh which

938
00:40:01,200 --> 00:40:01,680
again

939
00:40:01,680 --> 00:40:05,920
is using sh i believe or maybe it's uh

940
00:40:05,920 --> 00:40:08,160
yeah so here if it passed the check the

941
00:40:08,160 --> 00:40:09,760
command you set in it will use p

942
00:40:09,760 --> 00:40:13,280
open to run it on the system so then

943
00:40:13,280 --> 00:40:15,599
we know or some of us you can google for

944
00:40:15,599 --> 00:40:16,640
this

945
00:40:16,640 --> 00:40:18,800
like manage action whitelist whitespace

946
00:40:18,800 --> 00:40:20,400
bypass you can use

947
00:40:20,400 --> 00:40:24,000
this built-in variable oops

948
00:40:24,000 --> 00:40:28,480
called uh ifs so the trick is then to do

949
00:40:28,480 --> 00:40:31,920
command and then the you name

950
00:40:31,920 --> 00:40:35,119
pipe cat

951
00:40:35,119 --> 00:40:38,000
oops and then do that instead of a white

952
00:40:38,000 --> 00:40:40,240
space and then the flag txt

953
00:40:40,240 --> 00:40:42,880
and then my flag is just low and i can

954
00:40:42,880 --> 00:40:44,079
show you and verify that

955
00:40:44,079 --> 00:40:48,000
as well cad flag and as you see

956
00:40:48,000 --> 00:40:50,960
it's just lull so that's the fourth not

957
00:40:50,960 --> 00:40:53,119
the fifth uh

958
00:40:53,119 --> 00:40:54,960
challenge and how you solve it and also

959
00:40:54,960 --> 00:40:56,480
of course we

960
00:40:56,480 --> 00:41:01,119
are hackers so we had to try

961
00:41:01,119 --> 00:41:03,040
uh and also we can expect that there to

962
00:41:03,040 --> 00:41:04,720
be a sixth version of this because

963
00:41:04,720 --> 00:41:06,160
i can show you now because the server

964
00:41:06,160 --> 00:41:08,079
isn't up but in the home folder there

965
00:41:08,079 --> 00:41:11,760
were two users so there was the

966
00:41:11,760 --> 00:41:13,760
ctf user or whatever the name was and

967
00:41:13,760 --> 00:41:15,680
then there was a root home root folder

968
00:41:15,680 --> 00:41:17,280
which is not normal on the unix system

969
00:41:17,280 --> 00:41:19,040
so then we kind of had to

970
00:41:19,040 --> 00:41:20,960
how can we bypass the white list because

971
00:41:20,960 --> 00:41:22,400
we can do

972
00:41:22,400 --> 00:41:25,599
uh oops wrong window we can do ls and

973
00:41:25,599 --> 00:41:26,400
now i have

974
00:41:26,400 --> 00:41:28,640
actually implemented it so now it fixes

975
00:41:28,640 --> 00:41:30,000
the white spaces for me so i'm going to

976
00:41:30,000 --> 00:41:32,160
do ls dot dot

977
00:41:32,160 --> 00:41:34,000
and on the remote server we saw that

978
00:41:34,000 --> 00:41:35,680
there was a

979
00:41:35,680 --> 00:41:38,960
a root uh folder here and we knew

980
00:41:38,960 --> 00:41:40,640
this is also now wrong but that we

981
00:41:40,640 --> 00:41:43,520
weren't home ctf and then it was home

982
00:41:43,520 --> 00:41:45,280
roofed so we really wanted to see what

983
00:41:45,280 --> 00:41:47,040
was in there and

984
00:41:47,040 --> 00:41:48,960
in the end we were able to to bypass the

985
00:41:48,960 --> 00:41:51,119
filter using this

986
00:41:51,119 --> 00:41:55,280
uh expression so basically we could use

987
00:41:55,280 --> 00:41:57,520
uh

988
00:41:59,119 --> 00:42:02,560
expression like this and do a substring

989
00:42:02,560 --> 00:42:03,440
on the

990
00:42:03,440 --> 00:42:06,880
environment variable pwd and this gives

991
00:42:06,880 --> 00:42:07,359
you

992
00:42:07,359 --> 00:42:10,000
slash home slash and if we then pipe

993
00:42:10,000 --> 00:42:12,480
that x args and execute the find

994
00:42:12,480 --> 00:42:16,240
it would search for all all files in

995
00:42:16,240 --> 00:42:19,040
home and then we figured that we saw the

996
00:42:19,040 --> 00:42:20,960
home route but we couldn't see any files

997
00:42:20,960 --> 00:42:23,440
in there so then we realized that

998
00:42:23,440 --> 00:42:25,680
the this is not part of the challenge i

999
00:42:25,680 --> 00:42:27,520
don't know why that folder was there

1000
00:42:27,520 --> 00:42:29,520
we could also do the same for just if we

1001
00:42:29,520 --> 00:42:31,119
just use one one here we'll just

1002
00:42:31,119 --> 00:42:33,280
take the slash and then we could kind of

1003
00:42:33,280 --> 00:42:35,040
list the whole file system

1004
00:42:35,040 --> 00:42:36,640
and i guess we did but there wasn't

1005
00:42:36,640 --> 00:42:39,040
anything else interesting

1006
00:42:39,040 --> 00:42:42,160
so i guess uh that was uh

1007
00:42:42,160 --> 00:42:46,000
that was that kind of and i don't have

1008
00:42:46,000 --> 00:42:49,440
anything else if there isn't any

1009
00:42:49,440 --> 00:42:50,720
questions

1010
00:42:50,720 --> 00:42:59,839
thank you

1011
00:43:00,319 --> 00:43:04,640
okay thanks oh sh

1012
00:43:05,680 --> 00:43:08,560
nice night just i forgot to say thank

1013
00:43:08,560 --> 00:43:08,800
you

1014
00:43:08,800 --> 00:43:11,119
so much for hosting the ctf we had great

1015
00:43:11,119 --> 00:43:12,160
fun throughout the

1016
00:43:12,160 --> 00:43:14,480
island

1017
00:43:16,400 --> 00:43:19,680
welcome so now my screen is black

1018
00:43:19,680 --> 00:43:22,000
and we need few seconds to get back to

1019
00:43:22,000 --> 00:43:24,480
control

1020
00:43:24,839 --> 00:43:27,839
um

1021
00:43:35,680 --> 00:43:41,200
okay should work

1022
00:43:41,200 --> 00:43:44,000
so uh

1023
00:43:44,240 --> 00:43:46,160
that would be very short on my side now

1024
00:43:46,160 --> 00:43:47,520
um so

1025
00:43:47,520 --> 00:43:51,359
as a reminder uh but i guess you know so

1026
00:43:51,359 --> 00:43:53,839
the first team you hold so for the the

1027
00:43:53,839 --> 00:43:55,839
four participants of your team

1028
00:43:55,839 --> 00:43:58,720
you will receive an internet device uh

1029
00:43:58,720 --> 00:43:59,599
for the second

1030
00:43:59,599 --> 00:44:02,480
team that would be raspberry pi for

1031
00:44:02,480 --> 00:44:04,000
sorry for the third team that should be

1032
00:44:04,000 --> 00:44:05,680
a blue speaker

1033
00:44:05,680 --> 00:44:09,040
so for the three team that win

1034
00:44:09,040 --> 00:44:11,839
please don't forget sorry to send us all

1035
00:44:11,839 --> 00:44:12,960
your contact details so

1036
00:44:12,960 --> 00:44:17,040
that we can uh take care of it

1037
00:44:17,040 --> 00:44:20,160
and i guess that was all for me we

1038
00:44:20,160 --> 00:44:24,399
planned to keep thomas up and running

1039
00:44:24,560 --> 00:44:26,480
but not know if you have anything else

1040
00:44:26,480 --> 00:44:28,640
to add on that

1041
00:44:28,640 --> 00:44:30,960
but on my side that was all and

1042
00:44:30,960 --> 00:44:31,760
congratulations

1043
00:44:31,760 --> 00:44:36,240
hold and thanks for playing

1044
00:44:36,240 --> 00:44:38,400
thanks guys thanks to everybody who

1045
00:44:38,400 --> 00:44:40,960
played thanks to our sec lounge

1046
00:44:40,960 --> 00:44:43,200
uh chairs who put everything together

1047
00:44:43,200 --> 00:44:45,680
for us this year again virtually

1048
00:44:45,680 --> 00:44:48,720
um we'll have this recording posted

1049
00:44:48,720 --> 00:44:52,400
to the youtube uh for folks or for other

1050
00:44:52,400 --> 00:44:54,240
team members who weren't able to view it

1051
00:44:54,240 --> 00:44:55,440
today live

1052
00:44:55,440 --> 00:44:57,200
um other than that thanks again

1053
00:44:57,200 --> 00:44:59,760
everybody for joining us this week

1054
00:44:59,760 --> 00:45:01,839
and we hope everybody has a really

1055
00:45:01,839 --> 00:45:09,520
lovely weekend thank you

