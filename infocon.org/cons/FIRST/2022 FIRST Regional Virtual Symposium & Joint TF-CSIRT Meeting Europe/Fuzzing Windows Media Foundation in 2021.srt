1
00:00:00,350 --> 00:00:05,279
[Music]

2
00:00:05,279 --> 00:00:08,000
so okay so i will start with a

3
00:00:08,000 --> 00:00:10,400
with this presentation regarding uh our

4
00:00:10,400 --> 00:00:13,040
fuzzing carried in easterseg

5
00:00:13,040 --> 00:00:14,880
we have been doing some research in the

6
00:00:14,880 --> 00:00:17,199
windows media foundation platform in the

7
00:00:17,199 --> 00:00:19,039
last year

8
00:00:19,039 --> 00:00:21,520
and this presentation should be about

9
00:00:21,520 --> 00:00:23,920
why is fuzzing still really important to

10
00:00:23,920 --> 00:00:25,199
think to do

11
00:00:25,199 --> 00:00:27,039
and why it can

12
00:00:27,039 --> 00:00:29,920
lead to identifying some critical risk

13
00:00:29,920 --> 00:00:32,640
findings so

14
00:00:32,640 --> 00:00:35,200
some information regarding me

15
00:00:35,200 --> 00:00:36,719
i'm currently working as a penetration

16
00:00:36,719 --> 00:00:38,640
tester and a head of offensive security

17
00:00:38,640 --> 00:00:40,559
department in the company called

18
00:00:40,559 --> 00:00:42,719
estrosec

19
00:00:42,719 --> 00:00:44,399
i have experience with the web

20
00:00:44,399 --> 00:00:46,160
application infrastructure and cloud

21
00:00:46,160 --> 00:00:48,719
penetration testing also doing great

22
00:00:48,719 --> 00:00:50,320
teaming uh

23
00:00:50,320 --> 00:00:52,320
engagements with my colleagues

24
00:00:52,320 --> 00:00:55,680
and also social engineering

25
00:00:55,680 --> 00:00:57,760
simulation attacks and also attack

26
00:00:57,760 --> 00:00:59,440
simulation

27
00:00:59,440 --> 00:01:02,079
uh regarding the research in the

28
00:01:02,079 --> 00:01:04,080
in our team we are performing the web

29
00:01:04,080 --> 00:01:05,840
application security research focusing

30
00:01:05,840 --> 00:01:06,720
on the

31
00:01:06,720 --> 00:01:08,960
commonly used web applications

32
00:01:08,960 --> 00:01:12,479
and also the fuzzing projects which are

33
00:01:12,479 --> 00:01:14,159
focusing on the operating system

34
00:01:14,159 --> 00:01:17,280
components pdf readers browsers and also

35
00:01:17,280 --> 00:01:20,960
the v8 javascript engine

36
00:01:20,960 --> 00:01:24,000
i'm also a holder of some security

37
00:01:24,000 --> 00:01:27,520
reality certificates such as the gcpn

38
00:01:27,520 --> 00:01:30,320
and others

39
00:01:32,079 --> 00:01:35,040
so moving to the fuzzing

40
00:01:35,040 --> 00:01:37,600
i think pretty much all of you know

41
00:01:37,600 --> 00:01:39,520
something about fuzzing so

42
00:01:39,520 --> 00:01:41,920
i will just skip it to the point that uh

43
00:01:41,920 --> 00:01:44,560
why is it still relevant and

44
00:01:44,560 --> 00:01:45,520
how

45
00:01:45,520 --> 00:01:49,040
you can approach the fuzzing in uh

46
00:01:49,040 --> 00:01:51,439
in this year or in the last year

47
00:01:51,439 --> 00:01:54,640
so uh

48
00:01:54,640 --> 00:01:57,040
uh my current flow of fuzzing just

49
00:01:57,040 --> 00:01:58,799
really simplify is

50
00:01:58,799 --> 00:02:00,640
is it in a way that you have to create a

51
00:02:00,640 --> 00:02:02,079
corpus so

52
00:02:02,079 --> 00:02:05,040
uh in this case for example we are

53
00:02:05,040 --> 00:02:07,600
we will be performing the fuzzing of the

54
00:02:07,600 --> 00:02:08,720
some kind of

55
00:02:08,720 --> 00:02:12,000
player that will try to play media file

56
00:02:12,000 --> 00:02:14,800
formats so he needs to download as many

57
00:02:14,800 --> 00:02:17,440
cases as possible however they need to

58
00:02:17,440 --> 00:02:18,560
be

59
00:02:18,560 --> 00:02:20,720
different or partially different so you

60
00:02:20,720 --> 00:02:22,560
can reach the

61
00:02:22,560 --> 00:02:24,560
code coverage or the

62
00:02:24,560 --> 00:02:26,400
or all of the functions of the of the

63
00:02:26,400 --> 00:02:27,599
program

64
00:02:27,599 --> 00:02:28,560
uh

65
00:02:28,560 --> 00:02:29,680
secondly

66
00:02:29,680 --> 00:02:32,080
you will take the file from the corpus

67
00:02:32,080 --> 00:02:34,640
and try to modify it in some way

68
00:02:34,640 --> 00:02:36,879
to perform mutation

69
00:02:36,879 --> 00:02:37,680
and

70
00:02:37,680 --> 00:02:40,640
this file you will pass to the target

71
00:02:40,640 --> 00:02:42,959
program you have to fuss or you would

72
00:02:42,959 --> 00:02:44,720
like you would like to fast

73
00:02:44,720 --> 00:02:46,879
and this program should be attached to

74
00:02:46,879 --> 00:02:49,599
some kind of debugger so you can really

75
00:02:49,599 --> 00:02:51,200
monitor the

76
00:02:51,200 --> 00:02:52,080
uh

77
00:02:52,080 --> 00:02:54,239
the behavior of the program so you will

78
00:02:54,239 --> 00:02:56,959
see which kind of dlls are being loaded

79
00:02:56,959 --> 00:02:58,800
which kind of functions are being

80
00:02:58,800 --> 00:03:00,239
executed

81
00:03:00,239 --> 00:03:03,040
and you can see if the file is creating

82
00:03:03,040 --> 00:03:05,840
some kind of new behavior

83
00:03:05,840 --> 00:03:08,800
this is the just the simplified uh

84
00:03:08,800 --> 00:03:10,640
flow of the fuzzing

85
00:03:10,640 --> 00:03:12,319
however as you can see on the right

86
00:03:12,319 --> 00:03:13,360
picture

87
00:03:13,360 --> 00:03:16,159
uh is it important to say that that

88
00:03:16,159 --> 00:03:18,480
fuzzing the application as is it could

89
00:03:18,480 --> 00:03:21,599
be really simple but not so effective

90
00:03:21,599 --> 00:03:23,599
than fuzzing the application with a

91
00:03:23,599 --> 00:03:24,799
harness

92
00:03:24,799 --> 00:03:26,560
and if there is a question for example

93
00:03:26,560 --> 00:03:27,920
what is a harness

94
00:03:27,920 --> 00:03:30,080
i could i can simply answer it in a way

95
00:03:30,080 --> 00:03:31,120
that

96
00:03:31,120 --> 00:03:33,280
let's say that the program itself will

97
00:03:33,280 --> 00:03:34,319
load

98
00:03:34,319 --> 00:03:35,599
many

99
00:03:35,599 --> 00:03:38,159
many others stuff like dlls from the

100
00:03:38,159 --> 00:03:40,959
operating systems and it will slow down

101
00:03:40,959 --> 00:03:43,360
the execution of the file creating a

102
00:03:43,360 --> 00:03:46,000
harness you can simply just map a

103
00:03:46,000 --> 00:03:47,200
function

104
00:03:47,200 --> 00:03:51,280
to your memory and execute only the

105
00:03:51,280 --> 00:03:53,040
some part of the code you are really

106
00:03:53,040 --> 00:03:55,599
interested in so it will save a lot of

107
00:03:55,599 --> 00:03:57,519
time and you can perform much more

108
00:03:57,519 --> 00:03:59,200
faster execution

109
00:03:59,200 --> 00:04:00,560
of the

110
00:04:00,560 --> 00:04:02,799
mutated files than just fuzzing the

111
00:04:02,799 --> 00:04:05,760
application as is

112
00:04:05,840 --> 00:04:07,840
moving to the next slide

113
00:04:07,840 --> 00:04:11,200
we have chosen the windows media player

114
00:04:11,200 --> 00:04:13,760
as a target program in the windows media

115
00:04:13,760 --> 00:04:16,399
foundation platform however it's really

116
00:04:16,399 --> 00:04:19,040
important to say that

117
00:04:19,040 --> 00:04:20,399
this program

118
00:04:20,399 --> 00:04:22,320
is uh

119
00:04:22,320 --> 00:04:25,680
really really specific in in many ways

120
00:04:25,680 --> 00:04:28,960
uh it's default media player in many

121
00:04:28,960 --> 00:04:32,960
windows starting from the windows 3 to

122
00:04:32,960 --> 00:04:34,240
up to windows

123
00:04:34,240 --> 00:04:35,600
[Music]

124
00:04:35,600 --> 00:04:38,880
up to the latest windows also windows 10

125
00:04:38,880 --> 00:04:39,919
and

126
00:04:39,919 --> 00:04:42,080
it has a lot of features for example you

127
00:04:42,080 --> 00:04:44,240
can you can burn cds you can reap the

128
00:04:44,240 --> 00:04:48,320
cds you can create a really enhanced uh

129
00:04:48,320 --> 00:04:50,800
playlist and stuff like that and also

130
00:04:50,800 --> 00:04:52,720
without being without using the windows

131
00:04:52,720 --> 00:04:55,040
media player you are probably using some

132
00:04:55,040 --> 00:04:56,720
part of it

133
00:04:56,720 --> 00:04:59,680
in case you are using the explorer

134
00:04:59,680 --> 00:05:01,919
in the in the windows to explore the

135
00:05:01,919 --> 00:05:04,080
directories and files

136
00:05:04,080 --> 00:05:06,240
so you probably

137
00:05:06,240 --> 00:05:08,320
do not know about it but

138
00:05:08,320 --> 00:05:10,160
there are still components of the

139
00:05:10,160 --> 00:05:11,600
windows media player

140
00:05:11,600 --> 00:05:14,000
being used in the windows itself

141
00:05:14,000 --> 00:05:17,919
it can play a big range of file formats

142
00:05:17,919 --> 00:05:20,479
and it's also being distributed as a 32

143
00:05:20,479 --> 00:05:22,240
and 64 bit

144
00:05:22,240 --> 00:05:25,840
pre-installed on the windows

145
00:05:29,039 --> 00:05:31,360
what is really important to say

146
00:05:31,360 --> 00:05:34,080
when focusing on fuzzing this type of

147
00:05:34,080 --> 00:05:35,280
program

148
00:05:35,280 --> 00:05:37,440
you want to focus probably on a

149
00:05:37,440 --> 00:05:40,320
file format and find

150
00:05:40,320 --> 00:05:42,000
some specific

151
00:05:42,000 --> 00:05:44,560
probably undocumented file format so

152
00:05:44,560 --> 00:05:46,880
going through the list on the right side

153
00:05:46,880 --> 00:05:48,320
of the file types supported by the

154
00:05:48,320 --> 00:05:51,199
windows media player you can see that

155
00:05:51,199 --> 00:05:53,120
windows media player supports a large

156
00:05:53,120 --> 00:05:56,080
list of different file formats

157
00:05:56,080 --> 00:05:57,360
such as

158
00:05:57,360 --> 00:05:59,680
the windows media formats and also the

159
00:05:59,680 --> 00:06:01,759
probably the most used ones

160
00:06:01,759 --> 00:06:03,199
mp4 and

161
00:06:03,199 --> 00:06:04,800
others

162
00:06:04,800 --> 00:06:07,759
however there is a list of undocumented

163
00:06:07,759 --> 00:06:10,080
file formats that are not supported but

164
00:06:10,080 --> 00:06:13,039
playable uh using the windows media

165
00:06:13,039 --> 00:06:14,240
player

166
00:06:14,240 --> 00:06:15,759
and

167
00:06:15,759 --> 00:06:16,720
also

168
00:06:16,720 --> 00:06:18,080
it deletes to the

169
00:06:18,080 --> 00:06:20,479
discovery of the

170
00:06:20,479 --> 00:06:23,440
uh not uh the sub the probably support

171
00:06:23,440 --> 00:06:25,600
of the latest media files types that are

172
00:06:25,600 --> 00:06:27,440
supported for example by their browsers

173
00:06:27,440 --> 00:06:28,400
so

174
00:06:28,400 --> 00:06:30,240
in the next slides we will be talking

175
00:06:30,240 --> 00:06:31,440
about the

176
00:06:31,440 --> 00:06:32,960
uh

177
00:06:32,960 --> 00:06:36,240
file format which we have been uh

178
00:06:36,240 --> 00:06:38,800
performing the fuzzing on

179
00:06:38,800 --> 00:06:42,800
and why is it uh undocumented

180
00:06:42,800 --> 00:06:45,120
however to understand why it's important

181
00:06:45,120 --> 00:06:46,560
to choose a

182
00:06:46,560 --> 00:06:48,800
latest or the undocumented file format

183
00:06:48,800 --> 00:06:49,520
you

184
00:06:49,520 --> 00:06:51,520
probably need to know about the file

185
00:06:51,520 --> 00:06:53,680
type itself so

186
00:06:53,680 --> 00:06:55,440
perform quick research on the file

187
00:06:55,440 --> 00:06:58,080
structure and the complexity

188
00:06:58,080 --> 00:07:00,880
or there is another thing

189
00:07:00,880 --> 00:07:03,120
which is possible to do and is to carry

190
00:07:03,120 --> 00:07:04,479
out the

191
00:07:04,479 --> 00:07:06,479
errors engineering to

192
00:07:06,479 --> 00:07:08,400
reverse the platform or in this case the

193
00:07:08,400 --> 00:07:10,960
windows media player and to find out the

194
00:07:10,960 --> 00:07:13,520
functions and dlls that are being loaded

195
00:07:13,520 --> 00:07:15,120
when you are trying to play a file

196
00:07:15,120 --> 00:07:17,440
because each file

197
00:07:17,440 --> 00:07:18,960
is

198
00:07:18,960 --> 00:07:19,759
being

199
00:07:19,759 --> 00:07:22,560
being loaded under different codec

200
00:07:22,560 --> 00:07:25,520
and there is a possible to see the list

201
00:07:25,520 --> 00:07:27,919
of the all of the possible file file

202
00:07:27,919 --> 00:07:29,520
types

203
00:07:29,520 --> 00:07:30,880
maybe the last thing which is not

204
00:07:30,880 --> 00:07:33,520
mentioned here but it can be done

205
00:07:33,520 --> 00:07:36,800
is creating a corpus of the

206
00:07:36,800 --> 00:07:38,800
media file types

207
00:07:38,800 --> 00:07:40,400
downloading from the internet or some

208
00:07:40,400 --> 00:07:42,080
github repositories

209
00:07:42,080 --> 00:07:45,599
and you could try to play any kind of uh

210
00:07:45,599 --> 00:07:47,360
media file format

211
00:07:47,360 --> 00:07:49,280
and to see the behavior in the debugger

212
00:07:49,280 --> 00:07:52,000
itself without needed to reverse

213
00:07:52,000 --> 00:07:54,639
engineer it

214
00:07:54,800 --> 00:07:57,039
so we have looked more

215
00:07:57,039 --> 00:07:59,039
to the

216
00:07:59,039 --> 00:08:02,240
webma file format

217
00:08:02,479 --> 00:08:05,759
why why this type of file form because

218
00:08:05,759 --> 00:08:07,759
this type of file format was introduced

219
00:08:07,759 --> 00:08:09,520
to the windows

220
00:08:09,520 --> 00:08:10,879
as a

221
00:08:10,879 --> 00:08:13,280
specific kind of library only a few

222
00:08:13,280 --> 00:08:14,720
months ago

223
00:08:14,720 --> 00:08:16,160
and it was

224
00:08:16,160 --> 00:08:17,440
previously

225
00:08:17,440 --> 00:08:19,919
launched by google chrome or the google

226
00:08:19,919 --> 00:08:21,039
company

227
00:08:21,039 --> 00:08:25,360
and uh later than that uh it was the dll

228
00:08:25,360 --> 00:08:26,560
from the

229
00:08:26,560 --> 00:08:28,800
used by the chrome was also introduced

230
00:08:28,800 --> 00:08:31,199
in the operating system windows

231
00:08:31,199 --> 00:08:33,599
and the later then was used by the

232
00:08:33,599 --> 00:08:36,479
windows media player

233
00:08:36,479 --> 00:08:37,440
so

234
00:08:37,440 --> 00:08:39,599
this file format is the missing in the

235
00:08:39,599 --> 00:08:41,519
list of the separated file types

236
00:08:41,519 --> 00:08:44,080
it is using different types of codecs

237
00:08:44,080 --> 00:08:46,000
vp8 vp9

238
00:08:46,000 --> 00:08:47,200
um

239
00:08:47,200 --> 00:08:50,160
aoen vorvis and opus

240
00:08:50,160 --> 00:08:52,880
it's really important to understand the

241
00:08:52,880 --> 00:08:56,160
what is a valid uh or the functioning

242
00:08:56,160 --> 00:08:57,680
weapon file

243
00:08:57,680 --> 00:08:59,600
and

244
00:08:59,600 --> 00:09:02,240
to see that uh i really recommend you

245
00:09:02,240 --> 00:09:04,000
when you will be trying to let's say

246
00:09:04,000 --> 00:09:05,920
fuss some stuff in the

247
00:09:05,920 --> 00:09:07,680
some kind of media player you would like

248
00:09:07,680 --> 00:09:10,560
to attach a debugger and see

249
00:09:10,560 --> 00:09:13,360
the behavior of the

250
00:09:13,360 --> 00:09:15,200
of the program itself

251
00:09:15,200 --> 00:09:17,200
when trying to play this type of file

252
00:09:17,200 --> 00:09:19,519
because this type of file is

253
00:09:19,519 --> 00:09:20,839
mainly

254
00:09:20,839 --> 00:09:24,640
uh recommended to use in uh streaming

255
00:09:24,640 --> 00:09:27,360
platforms or for the web applications

256
00:09:27,360 --> 00:09:29,680
because of the size of the of the file

257
00:09:29,680 --> 00:09:32,240
and the optimalization being used there

258
00:09:32,240 --> 00:09:34,880
uh it's based on the

259
00:09:34,880 --> 00:09:36,959
matroshka type of

260
00:09:36,959 --> 00:09:38,399
file

261
00:09:38,399 --> 00:09:40,880
so basically

262
00:09:40,880 --> 00:09:43,920
it is it is using a well-known file

263
00:09:43,920 --> 00:09:45,040
structure

264
00:09:45,040 --> 00:09:46,720
or the mediafile type

265
00:09:46,720 --> 00:09:49,279
structure

266
00:09:49,279 --> 00:09:52,399
the questions here are which functions

267
00:09:52,399 --> 00:09:55,680
are being used or which dlls are being

268
00:09:55,680 --> 00:09:56,640
loaded

269
00:09:56,640 --> 00:09:59,440
since it is not supported by default

270
00:09:59,440 --> 00:10:01,519
uh

271
00:10:01,519 --> 00:10:03,360
if if it can

272
00:10:03,360 --> 00:10:05,120
increase the code coverage

273
00:10:05,120 --> 00:10:08,320
in the windows media player file

274
00:10:08,320 --> 00:10:09,680
and

275
00:10:09,680 --> 00:10:12,399
we we can move on to the uh to the slide

276
00:10:12,399 --> 00:10:14,240
when we are going to play the file or

277
00:10:14,240 --> 00:10:16,079
run the file in the

278
00:10:16,079 --> 00:10:19,760
in the in the fuzzing process

279
00:10:19,760 --> 00:10:21,760
so um

280
00:10:21,760 --> 00:10:23,600
another slide and we would like to move

281
00:10:23,600 --> 00:10:26,640
on to the fuzzing part or how you can

282
00:10:26,640 --> 00:10:29,200
fast this type of target

283
00:10:29,200 --> 00:10:32,160
so uh preferably i would suggest uh to

284
00:10:32,160 --> 00:10:33,360
build a

285
00:10:33,360 --> 00:10:36,000
virtual machine only for fuzzing with

286
00:10:36,000 --> 00:10:38,240
focus on performance so

287
00:10:38,240 --> 00:10:41,360
we are fuzzing currently the windows

288
00:10:41,360 --> 00:10:44,320
media platform so it should be windows

289
00:10:44,320 --> 00:10:47,279
and it should be strictly modified to

290
00:10:47,279 --> 00:10:49,279
only run

291
00:10:49,279 --> 00:10:50,320
uh

292
00:10:50,320 --> 00:10:52,320
this this type of application nothing

293
00:10:52,320 --> 00:10:53,200
else

294
00:10:53,200 --> 00:10:55,120
so you can for example kill the explorer

295
00:10:55,120 --> 00:10:57,279
and other processes itself

296
00:10:57,279 --> 00:10:59,600
secondly you you would like to prepare a

297
00:10:59,600 --> 00:11:00,640
corpus

298
00:11:00,640 --> 00:11:02,480
which will be

299
00:11:02,480 --> 00:11:04,000
based on this

300
00:11:04,000 --> 00:11:05,279
file type

301
00:11:05,279 --> 00:11:07,600
in this case the webinar file with

302
00:11:07,600 --> 00:11:09,519
different codecs

303
00:11:09,519 --> 00:11:12,640
different resolutions different sizes

304
00:11:12,640 --> 00:11:13,680
length

305
00:11:13,680 --> 00:11:16,560
colors and stuff like that

306
00:11:16,560 --> 00:11:19,199
preferably

307
00:11:19,360 --> 00:11:22,560
we are talking about uh 1000 of file

308
00:11:22,560 --> 00:11:25,920
files with a length about ranging from

309
00:11:25,920 --> 00:11:28,480
one kilobyte to one megabyte

310
00:11:28,480 --> 00:11:31,519
uh the the smaller the file the faster

311
00:11:31,519 --> 00:11:33,600
the execution

312
00:11:33,600 --> 00:11:36,320
so i would that keep that in mind that a

313
00:11:36,320 --> 00:11:37,519
file really

314
00:11:37,519 --> 00:11:39,839
uh differs on the performance

315
00:11:39,839 --> 00:11:41,600
the next thing is the file mutation

316
00:11:41,600 --> 00:11:43,760
setting

317
00:11:43,760 --> 00:11:44,800
there is

318
00:11:44,800 --> 00:11:47,200
there's the thing with the

319
00:11:47,200 --> 00:11:49,120
with the file structure itself you have

320
00:11:49,120 --> 00:11:52,000
to understand the the headers of the

321
00:11:52,000 --> 00:11:53,040
file

322
00:11:53,040 --> 00:11:53,760
so

323
00:11:53,760 --> 00:11:57,040
i would suggest to only modify

324
00:11:57,040 --> 00:11:59,760
part of the

325
00:11:59,760 --> 00:12:01,200
content of the file which can be

326
00:12:01,200 --> 00:12:04,639
modified so we are talking about the

327
00:12:04,639 --> 00:12:07,279
about the body of the file

328
00:12:07,279 --> 00:12:09,680
there are different ways you can you can

329
00:12:09,680 --> 00:12:12,000
mutate the file content

330
00:12:12,000 --> 00:12:14,480
for example you can uh swept the

331
00:12:14,480 --> 00:12:16,320
bytes

332
00:12:16,320 --> 00:12:17,600
or you can

333
00:12:17,600 --> 00:12:20,959
increment the values you can delete some

334
00:12:20,959 --> 00:12:23,440
parts of the file and stuff like that so

335
00:12:23,440 --> 00:12:25,600
there are many different approaches

336
00:12:25,600 --> 00:12:27,360
which could be carried on in the file

337
00:12:27,360 --> 00:12:29,440
mutation setting

338
00:12:29,440 --> 00:12:31,440
uh the next step would be

339
00:12:31,440 --> 00:12:34,079
you want to execute the target program

340
00:12:34,079 --> 00:12:35,920
with this modified input file to see the

341
00:12:35,920 --> 00:12:37,920
behavior

342
00:12:37,920 --> 00:12:38,880
running

343
00:12:38,880 --> 00:12:40,399
in the debugger

344
00:12:40,399 --> 00:12:42,880
and if everything works

345
00:12:42,880 --> 00:12:45,440
we will just try to automate it in a way

346
00:12:45,440 --> 00:12:47,920
that it will

347
00:12:47,920 --> 00:12:50,560
attach the program into the debugger it

348
00:12:50,560 --> 00:12:52,560
will load the file and

349
00:12:52,560 --> 00:12:55,600
you will just see if it crashed or not

350
00:12:55,600 --> 00:12:57,760
or hanged or freezed

351
00:12:57,760 --> 00:13:01,279
and you would like to save the

352
00:13:01,279 --> 00:13:03,440
input file if

353
00:13:03,440 --> 00:13:04,480
something

354
00:13:04,480 --> 00:13:06,959
for example brogues

355
00:13:06,959 --> 00:13:08,639
so that's the

356
00:13:08,639 --> 00:13:10,800
that's the fuzzing uh process

357
00:13:10,800 --> 00:13:11,760
in

358
00:13:11,760 --> 00:13:14,800
this specific case

359
00:13:17,839 --> 00:13:21,120
uh in the next slide uh we are going to

360
00:13:21,120 --> 00:13:24,720
talk about the crash triage so

361
00:13:24,720 --> 00:13:27,040
when you uh

362
00:13:27,040 --> 00:13:29,360
uh approach uh

363
00:13:29,360 --> 00:13:30,959
some kind of different behavior than

364
00:13:30,959 --> 00:13:32,079
expect it

365
00:13:32,079 --> 00:13:35,200
you would like to uh

366
00:13:35,200 --> 00:13:37,200
in in some way for example in a manual

367
00:13:37,200 --> 00:13:40,240
or automated way to uh create the uh

368
00:13:40,240 --> 00:13:42,240
triage the uh

369
00:13:42,240 --> 00:13:44,639
default discussing the the crash so in

370
00:13:44,639 --> 00:13:45,760
this case

371
00:13:45,760 --> 00:13:48,160
uh in the first hours uh when you are

372
00:13:48,160 --> 00:13:50,880
running the fuzzer itself uh

373
00:13:50,880 --> 00:13:53,279
it will probably not create so many

374
00:13:53,279 --> 00:13:54,959
crashes but

375
00:13:54,959 --> 00:13:57,279
if it will does create a lot of crisis

376
00:13:57,279 --> 00:13:59,600
crashes it uh there is a possibility

377
00:13:59,600 --> 00:14:02,800
that something is broken because

378
00:14:02,800 --> 00:14:06,079
we are talking about uh assessing a new

379
00:14:06,079 --> 00:14:07,760
part of the

380
00:14:07,760 --> 00:14:11,040
of the code or the our added is probably

381
00:14:11,040 --> 00:14:12,800
not well uh

382
00:14:12,800 --> 00:14:15,279
researched however it still does make

383
00:14:15,279 --> 00:14:17,680
sense that we are talking about the

384
00:14:17,680 --> 00:14:20,000
uh uh um really

385
00:14:20,000 --> 00:14:22,959
supported and tested uh program so

386
00:14:22,959 --> 00:14:25,040
you would not seen so many crashes in

387
00:14:25,040 --> 00:14:27,839
the in the first hours of the fuzzing

388
00:14:27,839 --> 00:14:28,639
but

389
00:14:28,639 --> 00:14:30,959
if there are some crushes i would prefer

390
00:14:30,959 --> 00:14:34,320
to use the manual crash triage to to see

391
00:14:34,320 --> 00:14:36,720
if everything works uh

392
00:14:36,720 --> 00:14:38,800
if everything works

393
00:14:38,800 --> 00:14:39,839
um

394
00:14:39,839 --> 00:14:42,240
to do the manual crash triage i would

395
00:14:42,240 --> 00:14:43,920
suggest you to use the window back

396
00:14:43,920 --> 00:14:46,880
preview or window back the default

397
00:14:46,880 --> 00:14:49,040
windows debugger which is really great

398
00:14:49,040 --> 00:14:51,279
for this type of applications or also

399
00:14:51,279 --> 00:14:53,680
you can use the back id

400
00:14:53,680 --> 00:14:56,000
or the exploitable

401
00:14:56,000 --> 00:14:58,399
with hand with a windy back

402
00:14:58,399 --> 00:14:59,680
so

403
00:14:59,680 --> 00:15:02,320
on the right you can see that

404
00:15:02,320 --> 00:15:04,079
there are folders with name such as

405
00:15:04,079 --> 00:15:05,600
exploitable probably exploitable

406
00:15:05,600 --> 00:15:09,279
probably not exploitable and unknown

407
00:15:09,279 --> 00:15:10,880
these types of

408
00:15:10,880 --> 00:15:14,000
directories are being

409
00:15:14,000 --> 00:15:17,440
loaded with the with the crashes

410
00:15:17,440 --> 00:15:19,199
in this case the exploitable is being

411
00:15:19,199 --> 00:15:21,120
used the exportable dialog

412
00:15:21,120 --> 00:15:22,240
to

413
00:15:22,240 --> 00:15:25,199
analyze the crashes and

414
00:15:25,199 --> 00:15:27,920
divide it into this type of directories

415
00:15:27,920 --> 00:15:28,959
and

416
00:15:28,959 --> 00:15:31,920
here is one crash

417
00:15:31,920 --> 00:15:33,519
uh

418
00:15:33,519 --> 00:15:36,240
here is the actual crash of the

419
00:15:36,240 --> 00:15:38,079
uh how how does it how does it look in

420
00:15:38,079 --> 00:15:40,320
the windows debugger platform when

421
00:15:40,320 --> 00:15:41,759
trying to

422
00:15:41,759 --> 00:15:43,680
play some

423
00:15:43,680 --> 00:15:48,560
modified file in this case is mp4

424
00:15:48,560 --> 00:15:50,880
as you can see it will crash on some

425
00:15:50,880 --> 00:15:52,079
functions

426
00:15:52,079 --> 00:15:53,120
and

427
00:15:53,120 --> 00:15:55,440
there is there is a name

428
00:15:55,440 --> 00:16:00,240
uh getsampletime which means that um

429
00:16:01,040 --> 00:16:03,680
specifically this file uh

430
00:16:03,680 --> 00:16:06,079
has modified the

431
00:16:06,079 --> 00:16:08,639
metadata in in a way that uh it can

432
00:16:08,639 --> 00:16:11,600
crash the whole program and also it can

433
00:16:11,600 --> 00:16:14,560
not only crash the windows media player

434
00:16:14,560 --> 00:16:17,120
but also the explorer when trying to

435
00:16:17,120 --> 00:16:19,759
open directory with this file

436
00:16:19,759 --> 00:16:21,759
so without

437
00:16:21,759 --> 00:16:23,839
trying to play this file you can easily

438
00:16:23,839 --> 00:16:26,560
crash the whole operating system which

439
00:16:26,560 --> 00:16:28,959
is really really bad

440
00:16:28,959 --> 00:16:32,800
and this type of this type of

441
00:16:32,800 --> 00:16:34,639
files or fuzzing

442
00:16:34,639 --> 00:16:36,240
uh

443
00:16:36,240 --> 00:16:40,240
uh can be can be seen just by uh

444
00:16:40,240 --> 00:16:41,600
creating uh

445
00:16:41,600 --> 00:16:43,519
this type of files

446
00:16:43,519 --> 00:16:45,440
running under the windows media

447
00:16:45,440 --> 00:16:47,120
foundation platform so

448
00:16:47,120 --> 00:16:50,320
uh this is really uh important to to see

449
00:16:50,320 --> 00:16:52,399
that when you create this type of file

450
00:16:52,399 --> 00:16:56,240
and you try to analyze where it crashes

451
00:16:56,240 --> 00:16:58,800
it's really important to see the to find

452
00:16:58,800 --> 00:17:01,519
the core issue because many times this

453
00:17:01,519 --> 00:17:02,639
file

454
00:17:02,639 --> 00:17:04,720
could crash also the browser because the

455
00:17:04,720 --> 00:17:06,799
browser will try to load

456
00:17:06,799 --> 00:17:09,919
the dll from the operating system or the

457
00:17:09,919 --> 00:17:12,720
explorer which is trying to

458
00:17:12,720 --> 00:17:14,959
load

459
00:17:14,959 --> 00:17:17,439
some kind of image from from the file or

460
00:17:17,439 --> 00:17:21,439
description regarding the file such as a

461
00:17:21,599 --> 00:17:25,039
file type or length of the video

462
00:17:25,039 --> 00:17:26,959
it will get to the point where it can

463
00:17:26,959 --> 00:17:28,880
crash

464
00:17:28,880 --> 00:17:33,760
so regarding this specific crash

465
00:17:33,760 --> 00:17:36,000
there is another thing uh which i would

466
00:17:36,000 --> 00:17:38,320
like to point out and

467
00:17:38,320 --> 00:17:39,200
after

468
00:17:39,200 --> 00:17:40,000
the

469
00:17:40,000 --> 00:17:42,320
after we have been carrying the

470
00:17:42,320 --> 00:17:44,320
um fuzzing

471
00:17:44,320 --> 00:17:47,600
i have seen this tweet regard regarding

472
00:17:47,600 --> 00:17:48,400
the

473
00:17:48,400 --> 00:17:51,120
webm file type or the

474
00:17:51,120 --> 00:17:52,160
newest

475
00:17:52,160 --> 00:17:54,400
a windows component

476
00:17:54,400 --> 00:17:56,320
this dll

477
00:17:56,320 --> 00:17:57,760
which is in

478
00:17:57,760 --> 00:17:59,520
by default in windows in the latest

479
00:17:59,520 --> 00:18:01,280
windows

480
00:18:01,280 --> 00:18:03,600
it is currently being used for example

481
00:18:03,600 --> 00:18:05,679
by the chrome itself

482
00:18:05,679 --> 00:18:08,330
and so there is the thing that

483
00:18:08,330 --> 00:18:10,000
[Music]

484
00:18:10,000 --> 00:18:11,760
another security researcher pointed out

485
00:18:11,760 --> 00:18:13,039
that

486
00:18:13,039 --> 00:18:15,039
he has been successfully

487
00:18:15,039 --> 00:18:18,320
fuzzing this uh component just by

488
00:18:18,320 --> 00:18:20,640
trying to load uh

489
00:18:20,640 --> 00:18:22,880
this type of uh media files in the

490
00:18:22,880 --> 00:18:26,400
chrome and crashing uh

491
00:18:26,400 --> 00:18:29,760
and crashing the chrome but uh the core

492
00:18:29,760 --> 00:18:32,320
issue was in the windows dll

493
00:18:32,320 --> 00:18:33,440
and

494
00:18:33,440 --> 00:18:37,120
he pointed he pointed out some um

495
00:18:37,120 --> 00:18:39,840
uh informations like like this one the

496
00:18:39,840 --> 00:18:41,679
stack trace from the windows debugger

497
00:18:41,679 --> 00:18:43,520
and as you can see that there is a

498
00:18:43,520 --> 00:18:45,520
there's a line that it's pointing out

499
00:18:45,520 --> 00:18:48,559
the mastering metadata so

500
00:18:48,559 --> 00:18:52,080
it's very similar to the our case but

501
00:18:52,080 --> 00:18:53,760
it's really important to

502
00:18:53,760 --> 00:18:55,039
not

503
00:18:55,039 --> 00:18:58,160
to not stop uh at this point

504
00:18:58,160 --> 00:18:59,120
so

505
00:18:59,120 --> 00:19:01,919
you would like to go further and

506
00:19:01,919 --> 00:19:03,120
to

507
00:19:03,120 --> 00:19:06,720
to focus on that which applications or

508
00:19:06,720 --> 00:19:09,039
or which programs are using this type of

509
00:19:09,039 --> 00:19:11,440
dll because it's not only about the

510
00:19:11,440 --> 00:19:13,919
browsers it's all about the stock

511
00:19:13,919 --> 00:19:15,760
default applications that are creating a

512
00:19:15,760 --> 00:19:17,520
new attack surface for

513
00:19:17,520 --> 00:19:18,960
attacker to

514
00:19:18,960 --> 00:19:20,320
possibly

515
00:19:20,320 --> 00:19:23,039
execute a malicious code or

516
00:19:23,039 --> 00:19:25,200
perform a privilege escalation so

517
00:19:25,200 --> 00:19:27,760
that's why i am focusing mostly on the

518
00:19:27,760 --> 00:19:29,600
operating system and the functions from

519
00:19:29,600 --> 00:19:32,240
the operating system

520
00:19:32,240 --> 00:19:35,120
and this particular uh

521
00:19:35,120 --> 00:19:37,440
back or vulnerability can

522
00:19:37,440 --> 00:19:38,720
create

523
00:19:38,720 --> 00:19:40,559
a whole new problems in the operating

524
00:19:40,559 --> 00:19:43,679
system not just only in the application

525
00:19:43,679 --> 00:19:44,960
so

526
00:19:44,960 --> 00:19:47,200
moving to the results

527
00:19:47,200 --> 00:19:49,679
of our housing fuzzing process

528
00:19:49,679 --> 00:19:51,919
we have been running the

529
00:19:51,919 --> 00:19:54,320
fuzzer for six months

530
00:19:54,320 --> 00:19:57,360
24 7 on multiple vms

531
00:19:57,360 --> 00:19:59,280
we have been we have identified more

532
00:19:59,280 --> 00:20:02,799
than 10 000 of crashes

533
00:20:03,440 --> 00:20:05,360
most of them were not exploitable

534
00:20:05,360 --> 00:20:07,039
because

535
00:20:07,039 --> 00:20:08,400
they were just

536
00:20:08,400 --> 00:20:11,360
licking some part of data or

537
00:20:11,360 --> 00:20:14,720
being category get categorized as a read

538
00:20:14,720 --> 00:20:16,640
access violations or nulled the

539
00:20:16,640 --> 00:20:21,760
reference but 23 of them were unique

540
00:20:21,760 --> 00:20:23,840
two of them were critical remote code

541
00:20:23,840 --> 00:20:26,400
execution vulnerabilities

542
00:20:26,400 --> 00:20:28,720
and they made it to the page tuesday

543
00:20:28,720 --> 00:20:30,480
with the following

544
00:20:30,480 --> 00:20:32,640
cv identifiers

545
00:20:32,640 --> 00:20:34,000
it's really important to say one thing

546
00:20:34,000 --> 00:20:35,280
that uh

547
00:20:35,280 --> 00:20:37,679
the most important vulnerability the

548
00:20:37,679 --> 00:20:39,600
first one the critical one

549
00:20:39,600 --> 00:20:41,840
uh was found uh

550
00:20:41,840 --> 00:20:43,679
in the

551
00:20:43,679 --> 00:20:45,840
in the in the first weeks of the of the

552
00:20:45,840 --> 00:20:50,000
fuzzing process so uh it still does make

553
00:20:50,000 --> 00:20:51,919
sense to really

554
00:20:51,919 --> 00:20:53,360
not maybe

555
00:20:53,360 --> 00:20:55,120
do the optimalization of the fuzzing

556
00:20:55,120 --> 00:20:57,120
platform but it's really important to

557
00:20:57,120 --> 00:20:58,799
start as soon as possible when you

558
00:20:58,799 --> 00:21:00,720
discover a new

559
00:21:00,720 --> 00:21:02,880
for example dll that is being loaded or

560
00:21:02,880 --> 00:21:05,840
used by windows

561
00:21:05,919 --> 00:21:07,520
um

562
00:21:07,520 --> 00:21:10,320
moving to the to the bounty and stuff

563
00:21:10,320 --> 00:21:11,520
with the

564
00:21:11,520 --> 00:21:13,360
microsoft communication

565
00:21:13,360 --> 00:21:16,240
so basically when you are reporting the

566
00:21:16,240 --> 00:21:19,360
vulnerability to the microsoft uh

567
00:21:19,360 --> 00:21:22,640
researcher center or platform

568
00:21:22,640 --> 00:21:24,970
uh there are many things you need to

569
00:21:24,970 --> 00:21:27,440
[Music]

570
00:21:27,440 --> 00:21:30,799
submit for example you have to

571
00:21:30,799 --> 00:21:32,880
be aware that you are submitting

572
00:21:32,880 --> 00:21:34,640
proof of concept or

573
00:21:34,640 --> 00:21:35,520
uh

574
00:21:35,520 --> 00:21:36,400
really

575
00:21:36,400 --> 00:21:39,280
uh researched data about the

576
00:21:39,280 --> 00:21:41,200
crash itself so

577
00:21:41,200 --> 00:21:42,799
in this case we we have been talking

578
00:21:42,799 --> 00:21:45,760
about the windows insider preview

579
00:21:45,760 --> 00:21:47,520
because we have been fuzzing on the

580
00:21:47,520 --> 00:21:50,320
latest operating system versions

581
00:21:50,320 --> 00:21:52,559
and

582
00:21:53,039 --> 00:21:55,520
these two bugs were pointed out as a

583
00:21:55,520 --> 00:21:58,159
remote code executions because

584
00:21:58,159 --> 00:22:00,880
we could modify

585
00:22:00,880 --> 00:22:03,039
some part of data

586
00:22:03,039 --> 00:22:05,840
in the memory and we had the writable

587
00:22:05,840 --> 00:22:07,840
access to the memory

588
00:22:07,840 --> 00:22:10,840
and in a case you will write an

589
00:22:10,840 --> 00:22:13,600
exploit and it will finally functionally

590
00:22:13,600 --> 00:22:15,919
fully functional exploit on the latest

591
00:22:15,919 --> 00:22:17,919
version of operating system by passing

592
00:22:17,919 --> 00:22:20,159
the security protections

593
00:22:20,159 --> 00:22:23,679
the bounty will double

594
00:22:25,760 --> 00:22:29,120
lessons learned from

595
00:22:29,120 --> 00:22:33,120
this type of uh fuzzing process or

596
00:22:33,200 --> 00:22:36,880
what you can possibly learn from this

597
00:22:36,880 --> 00:22:39,520
you have to be fast otherwise

598
00:22:39,520 --> 00:22:42,799
uh the the fuzzing will be or or the

599
00:22:42,799 --> 00:22:45,520
issues uh generated by the fuzzings uh

600
00:22:45,520 --> 00:22:46,640
could be

601
00:22:46,640 --> 00:22:48,880
uh duplicates

602
00:22:48,880 --> 00:22:51,039
it's from our experience that is really

603
00:22:51,039 --> 00:22:53,440
important to start as soon as possible

604
00:22:53,440 --> 00:22:54,799
and the later

605
00:22:54,799 --> 00:22:56,880
performance optimization of the of the

606
00:22:56,880 --> 00:22:58,640
code or the fuzzing process that you

607
00:22:58,640 --> 00:23:00,720
have to start is the most important

608
00:23:00,720 --> 00:23:02,799
thing here because

609
00:23:02,799 --> 00:23:04,880
it's all about the the first initial

610
00:23:04,880 --> 00:23:06,640
idea to to see

611
00:23:06,640 --> 00:23:09,919
there is new function there is new dll

612
00:23:09,919 --> 00:23:10,640
so

613
00:23:10,640 --> 00:23:12,720
let's start

614
00:23:12,720 --> 00:23:14,960
uh secondly it still does make sense to

615
00:23:14,960 --> 00:23:18,880
us it's maybe not the best way to

616
00:23:18,880 --> 00:23:22,159
to assess the all of the possible risks

617
00:23:22,159 --> 00:23:24,640
or identifying the all vulnerabilities

618
00:23:24,640 --> 00:23:26,720
in the code of the application

619
00:23:26,720 --> 00:23:27,520
but

620
00:23:27,520 --> 00:23:30,000
it's much faster than performing static

621
00:23:30,000 --> 00:23:31,679
code analysis

622
00:23:31,679 --> 00:23:32,559
and

623
00:23:32,559 --> 00:23:36,080
there are many ways where you can find

624
00:23:36,080 --> 00:23:38,720
the bug possibly sooner

625
00:23:38,720 --> 00:23:41,919
because many people are performing

626
00:23:41,919 --> 00:23:44,240
fuzzing on

627
00:23:44,240 --> 00:23:45,360
using

628
00:23:45,360 --> 00:23:46,320
really

629
00:23:46,320 --> 00:23:48,559
big infrastructure for example google

630
00:23:48,559 --> 00:23:51,200
google or microsoft is doing uh is

631
00:23:51,200 --> 00:23:53,360
performing a really uh

632
00:23:53,360 --> 00:23:55,520
big uh

633
00:23:55,520 --> 00:23:58,880
fuzzing on their uh cloud environment

634
00:23:58,880 --> 00:24:02,000
they are using this power to

635
00:24:02,000 --> 00:24:02,720
to

636
00:24:02,720 --> 00:24:07,120
test or access the open source projects

637
00:24:08,720 --> 00:24:10,559
one of the most important things here is

638
00:24:10,559 --> 00:24:13,120
to be creative and to create your own

639
00:24:13,120 --> 00:24:14,799
tools and environment because when you

640
00:24:14,799 --> 00:24:16,880
will be using

641
00:24:16,880 --> 00:24:19,840
tools provided in the tutorials and uh

642
00:24:19,840 --> 00:24:20,880
maybe

643
00:24:20,880 --> 00:24:23,039
just publicly available info on the

644
00:24:23,039 --> 00:24:26,400
internet uh there is uh

645
00:24:26,400 --> 00:24:28,000
less chance to

646
00:24:28,000 --> 00:24:30,640
maybe find new new vulnerabilities in

647
00:24:30,640 --> 00:24:32,960
the software because it's all

648
00:24:32,960 --> 00:24:35,279
it's all about being

649
00:24:35,279 --> 00:24:36,480
really

650
00:24:36,480 --> 00:24:39,279
you have to know what you are doing

651
00:24:39,279 --> 00:24:43,039
and be able to maybe adapt to the

652
00:24:43,039 --> 00:24:46,240
latest trends in the in the applications

653
00:24:46,240 --> 00:24:48,559
and application security

654
00:24:48,559 --> 00:24:50,080
uh

655
00:24:50,080 --> 00:24:51,279
in the in the

656
00:24:51,279 --> 00:24:52,720
when you are starting with the fuzzing

657
00:24:52,720 --> 00:24:55,679
yes it still does make sense to use

658
00:24:55,679 --> 00:24:59,279
the typical programs such as ifl

659
00:24:59,279 --> 00:25:03,120
or bufas and and uh c scalar however

660
00:25:03,120 --> 00:25:04,799
later you would like to switch to your

661
00:25:04,799 --> 00:25:06,559
own tools to perform

662
00:25:06,559 --> 00:25:08,559
a research on uh

663
00:25:08,559 --> 00:25:11,039
uh the way how you can speed it up

664
00:25:11,039 --> 00:25:14,720
and what can be performed maybe better

665
00:25:14,720 --> 00:25:17,200
and you would like to know

666
00:25:17,200 --> 00:25:20,159
each component in detail

667
00:25:20,159 --> 00:25:21,840
there is also always a place for

668
00:25:21,840 --> 00:25:23,440
optimization

669
00:25:23,440 --> 00:25:24,400
so

670
00:25:24,400 --> 00:25:26,240
starting from the software part you

671
00:25:26,240 --> 00:25:28,159
would like to perform program patching

672
00:25:28,159 --> 00:25:30,799
and create a harness for the

673
00:25:30,799 --> 00:25:33,279
for the program itself in this case when

674
00:25:33,279 --> 00:25:34,240
talking

675
00:25:34,240 --> 00:25:35,919
about the windows media

676
00:25:35,919 --> 00:25:38,320
foundation or the player you would like

677
00:25:38,320 --> 00:25:40,159
to focus on the

678
00:25:40,159 --> 00:25:42,240
different part of the functionality for

679
00:25:42,240 --> 00:25:44,240
example we have been only focusing on

680
00:25:44,240 --> 00:25:46,320
the playing of the file

681
00:25:46,320 --> 00:25:49,360
but there is a option to

682
00:25:49,360 --> 00:25:52,240
to transfer the file to create a

683
00:25:52,240 --> 00:25:54,240
enhanced uh

684
00:25:54,240 --> 00:25:57,039
playlist and other other things

685
00:25:57,039 --> 00:25:58,000
so

686
00:25:58,000 --> 00:25:59,919
you would like just to copy the the

687
00:25:59,919 --> 00:26:01,360
function

688
00:26:01,360 --> 00:26:04,559
uh wrote write a small script to perform

689
00:26:04,559 --> 00:26:06,559
this execution only in the memory and

690
00:26:06,559 --> 00:26:09,360
save a lot of time

691
00:26:09,440 --> 00:26:12,480
and from the hardware point of view

692
00:26:12,480 --> 00:26:15,200
i would suggest to

693
00:26:15,200 --> 00:26:17,679
focus on the fastest ram

694
00:26:17,679 --> 00:26:21,440
possible and also the ssds

695
00:26:21,440 --> 00:26:23,919
and last but not least be patient it

696
00:26:23,919 --> 00:26:25,840
takes a lot of time

697
00:26:25,840 --> 00:26:27,440
to find

698
00:26:27,440 --> 00:26:28,960
really impactful and critical

699
00:26:28,960 --> 00:26:31,600
vulnerabilities

700
00:26:31,600 --> 00:26:34,000
you have to be prepared to perform the

701
00:26:34,000 --> 00:26:36,080
homework on the

702
00:26:36,080 --> 00:26:37,520
on the maybe

703
00:26:37,520 --> 00:26:38,400
not so

704
00:26:38,400 --> 00:26:40,000
uh

705
00:26:40,000 --> 00:26:41,919
important stuff as as it could be seen

706
00:26:41,919 --> 00:26:43,200
in this case

707
00:26:43,200 --> 00:26:45,840
uh regarding for example the web file

708
00:26:45,840 --> 00:26:48,480
but it's still important to

709
00:26:48,480 --> 00:26:49,760
learn

710
00:26:49,760 --> 00:26:53,600
educate about the possibilities of the

711
00:26:53,600 --> 00:26:56,080
of the in this case of the file types

712
00:26:56,080 --> 00:26:57,360
and

713
00:26:57,360 --> 00:26:59,679
later execute the the fuzzing with with

714
00:26:59,679 --> 00:27:01,679
the results

715
00:27:01,679 --> 00:27:02,559
so

716
00:27:02,559 --> 00:27:05,120
thank you for the watching

717
00:27:05,120 --> 00:27:06,640
and if you have any questions please

718
00:27:06,640 --> 00:27:09,960
write it down

