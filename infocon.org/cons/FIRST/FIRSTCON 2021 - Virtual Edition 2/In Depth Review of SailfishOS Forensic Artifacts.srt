1
00:00:01,599 --> 00:00:06,240
welcome to our talk selfish os forensics

2
00:00:06,560 --> 00:00:08,160
my name is christmas sitanov and i'm a

3
00:00:08,160 --> 00:00:10,480
graduate student at purdue university

4
00:00:10,480 --> 00:00:12,320
i'm a dual degree student focusing on

5
00:00:12,320 --> 00:00:14,320
digital forensics in my phd

6
00:00:14,320 --> 00:00:17,119
and homeland security for my master's

7
00:00:17,119 --> 00:00:18,880
i'm also a research assistant at the

8
00:00:18,880 --> 00:00:19,760
cyber tap

9
00:00:19,760 --> 00:00:23,119
program cybertap is a program

10
00:00:23,119 --> 00:00:25,279
designed to assist local businesses in

11
00:00:25,279 --> 00:00:27,199
the state of indiana with their i.t

12
00:00:27,199 --> 00:00:31,519
and cybersecurity needs

13
00:00:31,519 --> 00:00:33,920
on the agenda today we have a quick

14
00:00:33,920 --> 00:00:35,920
introduction to selfish os

15
00:00:35,920 --> 00:00:39,920
and its evolution methods of acquisition

16
00:00:39,920 --> 00:00:43,040
analysis and forensics artifacts which

17
00:00:43,040 --> 00:00:44,000
will be grouped in

18
00:00:44,000 --> 00:00:47,280
four major categories telephony wireless

19
00:00:47,280 --> 00:00:48,160
interfaces

20
00:00:48,160 --> 00:00:51,360
system applications and we're also going

21
00:00:51,360 --> 00:00:51,920
to look at

22
00:00:51,920 --> 00:00:55,840
future work we intend to conduct in this

23
00:00:56,840 --> 00:00:58,480
space

24
00:00:58,480 --> 00:01:01,760
introduction to selfish os

25
00:01:01,760 --> 00:01:05,280
selfish is a relatively new linux based

26
00:01:05,280 --> 00:01:08,640
operating system for mobile devices

27
00:01:08,640 --> 00:01:12,400
originally it was developed by joao oi

28
00:01:12,400 --> 00:01:15,520
which was founded by ex-nokia and police

29
00:01:15,520 --> 00:01:18,240
its primary target is embedded devices

30
00:01:18,240 --> 00:01:20,240
such as smartphones smartwatches tablets

31
00:01:20,240 --> 00:01:22,159
and iot devices

32
00:01:22,159 --> 00:01:23,759
the company has gone through several

33
00:01:23,759 --> 00:01:26,080
rounds of funding latest being

34
00:01:26,080 --> 00:01:30,079
round c in 2016. it also operates

35
00:01:30,079 --> 00:01:34,798
using regional oem licensing scheme

36
00:01:36,720 --> 00:01:39,119
the product is adopted in russia under

37
00:01:39,119 --> 00:01:40,400
the name of

38
00:01:40,400 --> 00:01:43,439
aurora os the main driver for

39
00:01:43,439 --> 00:01:45,360
development and adoption of the

40
00:01:45,360 --> 00:01:46,880
operating system is the need for

41
00:01:46,880 --> 00:01:48,000
independence from

42
00:01:48,000 --> 00:01:51,920
the us-based android and ios

43
00:01:51,920 --> 00:01:54,079
this is also the only approved mobile

44
00:01:54,079 --> 00:01:56,159
devices for government use

45
00:01:56,159 --> 00:01:58,000
the russian government intends to deploy

46
00:01:58,000 --> 00:02:01,840
8 million units by the end of 2021.

47
00:02:01,840 --> 00:02:04,079
in addition in the past the ministry of

48
00:02:04,079 --> 00:02:05,840
communication of russia

49
00:02:05,840 --> 00:02:08,720
has provided grants for developers who

50
00:02:08,720 --> 00:02:09,119
port

51
00:02:09,119 --> 00:02:10,720
their applications to the operating

52
00:02:10,720 --> 00:02:14,239
system the principal developer

53
00:02:14,239 --> 00:02:16,480
at this point in russia is open mobile

54
00:02:16,480 --> 00:02:17,280
platform

55
00:02:17,280 --> 00:02:22,560
which is currently owned by ros telecom

56
00:02:22,560 --> 00:02:24,879
selfish comes from long lineage of

57
00:02:24,879 --> 00:02:27,040
operating systems for mobile devices

58
00:02:27,040 --> 00:02:30,879
starting back in 2005 with os 2005

59
00:02:30,879 --> 00:02:34,319
designed for the nokia tablet 770.

60
00:02:34,319 --> 00:02:37,599
later it evolved into memo which was

61
00:02:37,599 --> 00:02:39,840
used on the nokia n900

62
00:02:39,840 --> 00:02:42,720
and later it was merged with moblin for

63
00:02:42,720 --> 00:02:43,760
the nokia

64
00:02:43,760 --> 00:02:47,200
n9 and was named migo

65
00:02:47,200 --> 00:02:49,840
when nokia sold to microsoft the project

66
00:02:49,840 --> 00:02:51,599
was spun off as an open source project

67
00:02:51,599 --> 00:02:53,680
called the more project

68
00:02:53,680 --> 00:02:57,040
selfish os is the open source umar

69
00:02:57,040 --> 00:02:58,319
project code base

70
00:02:58,319 --> 00:03:01,040
combined with proprietary user interface

71
00:03:01,040 --> 00:03:02,840
developed by joe

72
00:03:02,840 --> 00:03:05,200
oi

73
00:03:05,200 --> 00:03:07,040
there has not been a lot of forensic

74
00:03:07,040 --> 00:03:09,200
work done in this space

75
00:03:09,200 --> 00:03:12,319
the only word pertinent to selfish os

76
00:03:12,319 --> 00:03:16,319
was posted back in 2016 to forensic

77
00:03:16,319 --> 00:03:17,280
focus

78
00:03:17,280 --> 00:03:20,000
there's also so much work some work done

79
00:03:20,000 --> 00:03:21,519
on the other platforms but

80
00:03:21,519 --> 00:03:24,480
most of it is not pertinent to the new

81
00:03:24,480 --> 00:03:27,359
selfish os

82
00:03:28,319 --> 00:03:30,959
in this talk we're going to outline the

83
00:03:30,959 --> 00:03:33,120
different discoveries we made

84
00:03:33,120 --> 00:03:36,400
when investigating selfish os

85
00:03:36,400 --> 00:03:38,159
first we'll start with acquisition and

86
00:03:38,159 --> 00:03:40,000
analysis with commercial tools

87
00:03:40,000 --> 00:03:42,000
then we'll look at the partition schema

88
00:03:42,000 --> 00:03:43,360
and then we're going to show the

89
00:03:43,360 --> 00:03:43,920
different

90
00:03:43,920 --> 00:03:46,799
artifacts discovered in several major

91
00:03:46,799 --> 00:03:49,440
categories

92
00:03:49,519 --> 00:03:51,840
this section covers acquisition with

93
00:03:51,840 --> 00:03:53,280
template bot

94
00:03:53,280 --> 00:03:55,200
acquisition with commercial tools and

95
00:03:55,200 --> 00:03:58,000
open source tools

96
00:03:58,000 --> 00:04:00,000
the commercial tools used for

97
00:04:00,000 --> 00:04:01,439
acquisition were magnet

98
00:04:01,439 --> 00:04:04,959
action process celebrate your fade and

99
00:04:04,959 --> 00:04:08,239
mobile edit none of those tools was able

100
00:04:08,239 --> 00:04:11,439
to extract image successfully just for

101
00:04:11,439 --> 00:04:12,720
completeness

102
00:04:12,720 --> 00:04:16,079
we decided to test those tools in

103
00:04:16,079 --> 00:04:18,798
analysis after the image was acquired

104
00:04:18,798 --> 00:04:20,160
using twerp

105
00:04:20,160 --> 00:04:23,040
none of those was able to analyze the

106
00:04:23,040 --> 00:04:25,280
content properly

107
00:04:25,280 --> 00:04:28,400
and only autopsy was able to

108
00:04:28,400 --> 00:04:30,479
extract individual files but it was

109
00:04:30,479 --> 00:04:31,840
unable to

110
00:04:31,840 --> 00:04:35,440
read any of the schema and

111
00:04:35,440 --> 00:04:37,360
make any meaningful assertions and

112
00:04:37,360 --> 00:04:41,440
conclusions about call logs and so on

113
00:04:41,759 --> 00:04:44,000
acquisition with poor was performed not

114
00:04:44,000 --> 00:04:46,400
without a problem

115
00:04:46,400 --> 00:04:48,479
initially we attempted to use the backup

116
00:04:48,479 --> 00:04:50,560
and adb interfaces and both of those

117
00:04:50,560 --> 00:04:52,960
failed

118
00:04:53,120 --> 00:04:56,400
however we were able to use the adb

119
00:04:56,400 --> 00:04:59,600
shell and then the dd tool to make a

120
00:04:59,600 --> 00:05:00,240
complete

121
00:05:00,240 --> 00:05:03,840
image of the phone later this image was

122
00:05:03,840 --> 00:05:06,160
analyzed using slotkit

123
00:05:06,160 --> 00:05:08,400
and we were able to extract individual

124
00:05:08,400 --> 00:05:11,840
partitions and files

125
00:05:12,320 --> 00:05:15,039
as all transfers were conducted through

126
00:05:15,039 --> 00:05:17,199
usb

127
00:05:17,199 --> 00:05:19,919
here is a summary of the time it took to

128
00:05:19,919 --> 00:05:24,960
perform some of those operations

129
00:05:24,960 --> 00:05:27,360
the usb interface itself is interesting

130
00:05:27,360 --> 00:05:28,240
as it presents

131
00:05:28,240 --> 00:05:30,160
with different miner number depending on

132
00:05:30,160 --> 00:05:31,759
the state of the phone

133
00:05:31,759 --> 00:05:33,680
for example when it is in bootloader

134
00:05:33,680 --> 00:05:35,800
mode the minor number will be

135
00:05:35,800 --> 00:05:39,520
0de and when the operating system is

136
00:05:39,520 --> 00:05:41,199
running or the phone is charging it will

137
00:05:41,199 --> 00:05:42,000
be 0

138
00:05:42,000 --> 00:05:46,000
a f e in developer mode this changes to

139
00:05:46,000 --> 00:05:46,400
0

140
00:05:46,400 --> 00:05:50,240
8 0 2 because the device is also going

141
00:05:50,240 --> 00:05:51,280
to expose

142
00:05:51,280 --> 00:05:55,440
a network over usb interface

143
00:05:55,440 --> 00:05:59,360
which will be seen as rndis interface

144
00:05:59,360 --> 00:06:02,560
on the operating within selfish itself

145
00:06:02,560 --> 00:06:05,680
the configuration for the usb

146
00:06:05,680 --> 00:06:09,680
port are stored in var lib usb mode

147
00:06:09,680 --> 00:06:13,039
usb mode ini and have the following

148
00:06:13,039 --> 00:06:14,160
structure

149
00:06:14,160 --> 00:06:17,120
you can observe the local ip address of

150
00:06:17,120 --> 00:06:18,000
the device

151
00:06:18,000 --> 00:06:21,840
in this file

152
00:06:22,160 --> 00:06:25,680
the partition schema is a bit particular

153
00:06:25,680 --> 00:06:28,000
it has over 80 partitions and most of

154
00:06:28,000 --> 00:06:30,560
them are organized in a b schema which

155
00:06:30,560 --> 00:06:31,520
allows

156
00:06:31,520 --> 00:06:35,440
for one of the sites to be upgraded

157
00:06:35,440 --> 00:06:37,520
while the other isn't touched so if

158
00:06:37,520 --> 00:06:39,759
there's a failure during the upgrade

159
00:06:39,759 --> 00:06:41,520
the phone will still be able to put with

160
00:06:41,520 --> 00:06:48,960
the alternate side

161
00:06:48,960 --> 00:06:52,160
this section outlines the methodology we

162
00:06:52,160 --> 00:06:55,840
use to analyze the device

163
00:06:55,840 --> 00:06:57,199
the methodology is pretty

164
00:06:57,199 --> 00:06:59,520
straightforward

165
00:06:59,520 --> 00:07:01,919
we acquire a baseline image of the

166
00:07:01,919 --> 00:07:02,880
device

167
00:07:02,880 --> 00:07:06,000
then introduce targeted changes

168
00:07:06,000 --> 00:07:08,240
to particular subsystems and record the

169
00:07:08,240 --> 00:07:09,680
time at which those were

170
00:07:09,680 --> 00:07:12,960
introduced then acquire another image of

171
00:07:12,960 --> 00:07:15,680
the phone and compare it to the baseline

172
00:07:15,680 --> 00:07:19,039
the differences will show how the

173
00:07:19,039 --> 00:07:21,199
changes that were introduced changed the

174
00:07:21,199 --> 00:07:24,160
file system and the state of the device

175
00:07:24,160 --> 00:07:25,680
this process will repeat at the number

176
00:07:25,680 --> 00:07:27,840
of times and

177
00:07:27,840 --> 00:07:30,880
in later stages we also used a shortcut

178
00:07:30,880 --> 00:07:33,599
by secure shelling into the phone and

179
00:07:33,599 --> 00:07:34,800
observing the

180
00:07:34,800 --> 00:07:37,680
files changed as we were introducing the

181
00:07:37,680 --> 00:07:41,199
changes to the user interface

182
00:07:41,840 --> 00:07:44,720
the test hardware platform used was a

183
00:07:44,720 --> 00:07:47,039
sony xperia xa2

184
00:07:47,039 --> 00:07:49,360
this is a single sim device running the

185
00:07:49,360 --> 00:07:52,639
qualcomm snapdragon 630 chipset

186
00:07:52,639 --> 00:07:55,840
the selfish os version itself

187
00:07:55,840 --> 00:07:59,840
was d2120

188
00:08:00,800 --> 00:08:02,960
this section outlines the forensic

189
00:08:02,960 --> 00:08:06,400
artifacts pertaining to telephony

190
00:08:06,400 --> 00:08:08,240
sim card information is stored in the

191
00:08:08,240 --> 00:08:11,199
telephony db sqlite database

192
00:08:11,199 --> 00:08:12,879
you will notice that most of the data

193
00:08:12,879 --> 00:08:15,039
and settings in this operating system

194
00:08:15,039 --> 00:08:18,639
are stored in sqlite databases sim card

195
00:08:18,639 --> 00:08:20,560
and carrier properties are in different

196
00:08:20,560 --> 00:08:21,680
tables

197
00:08:21,680 --> 00:08:25,199
as shown below you can reserve the icc

198
00:08:25,199 --> 00:08:25,680
id

199
00:08:25,680 --> 00:08:29,520
in the sim info table as well as the mcc

200
00:08:29,520 --> 00:08:32,719
and mnc similarly

201
00:08:32,719 --> 00:08:35,519
in the carriers table you can see a list

202
00:08:35,519 --> 00:08:38,240
of carriers

203
00:08:39,519 --> 00:08:41,679
calls and text messages are stored in

204
00:08:41,679 --> 00:08:42,719
the com history

205
00:08:42,719 --> 00:08:45,519
db file

206
00:08:46,399 --> 00:08:49,120
one of the fields designates the type of

207
00:08:49,120 --> 00:08:50,000
the event

208
00:08:50,000 --> 00:08:52,839
whether it's a phone call or an sms

209
00:08:52,839 --> 00:08:54,959
message

210
00:08:54,959 --> 00:08:56,800
the table also contains information

211
00:08:56,800 --> 00:08:58,640
about the start and end time of the

212
00:08:58,640 --> 00:09:00,240
event

213
00:09:00,240 --> 00:09:03,360
and the direction one for incoming two

214
00:09:03,360 --> 00:09:05,920
for outgoing

215
00:09:05,920 --> 00:09:08,080
last but not least text messages have

216
00:09:08,080 --> 00:09:09,839
content which is recorded

217
00:09:09,839 --> 00:09:14,240
and stored in the free text field

218
00:09:16,959 --> 00:09:18,959
during a forensics investigation it is

219
00:09:18,959 --> 00:09:20,720
extremely important to understand

220
00:09:20,720 --> 00:09:23,920
if multiple sim cards have been used

221
00:09:23,920 --> 00:09:27,120
within the same device even more

222
00:09:27,120 --> 00:09:29,360
it is important to understand when

223
00:09:29,360 --> 00:09:31,839
certain messages were received

224
00:09:31,839 --> 00:09:35,600
and what sim card they were sent to

225
00:09:35,600 --> 00:09:38,800
within selfish os we can

226
00:09:38,800 --> 00:09:42,480
find this information into tables

227
00:09:42,480 --> 00:09:44,399
the first one is the table events which

228
00:09:44,399 --> 00:09:45,680
records the

229
00:09:45,680 --> 00:09:47,920
incoming events like calls and text

230
00:09:47,920 --> 00:09:49,440
messages

231
00:09:49,440 --> 00:09:52,560
and the table event properties

232
00:09:52,560 --> 00:09:56,000
which would give us the icc id

233
00:09:56,000 --> 00:09:58,720
of the sim card being in operation at

234
00:09:58,720 --> 00:10:00,560
that point

235
00:10:00,560 --> 00:10:04,640
those two tables bind based on the

236
00:10:04,640 --> 00:10:07,680
id field in the events table and the

237
00:10:07,680 --> 00:10:10,320
event id field in the event properties

238
00:10:10,320 --> 00:10:12,640
table

239
00:10:14,320 --> 00:10:16,320
furthermore when using multiple sim

240
00:10:16,320 --> 00:10:18,880
cards it is good to understand

241
00:10:18,880 --> 00:10:21,040
when a sim card was first introduced to

242
00:10:21,040 --> 00:10:22,320
the device and

243
00:10:22,320 --> 00:10:23,760
when the user stopped using that

244
00:10:23,760 --> 00:10:25,920
particular sim card

245
00:10:25,920 --> 00:10:28,480
the old phono package manages all sim

246
00:10:28,480 --> 00:10:30,959
card functions

247
00:10:30,959 --> 00:10:33,360
its settings are stored in the var lib

248
00:10:33,360 --> 00:10:35,360
or phono directory

249
00:10:35,360 --> 00:10:38,640
within that directory we will observe

250
00:10:38,640 --> 00:10:41,519
directories subdirectories for each sim

251
00:10:41,519 --> 00:10:42,240
card

252
00:10:42,240 --> 00:10:45,360
inserted for each one you will find

253
00:10:45,360 --> 00:10:47,920
two the first one will give us the

254
00:10:47,920 --> 00:10:48,720
timestamp

255
00:10:48,720 --> 00:10:50,160
of when the card was initially

256
00:10:50,160 --> 00:10:52,000
introduced to the device and the second

257
00:10:52,000 --> 00:10:54,480
one will give us a timestamp of when

258
00:10:54,480 --> 00:10:58,839
the card was last used within that

259
00:10:58,839 --> 00:11:00,240
device

260
00:11:00,240 --> 00:11:03,680
furthermore the

261
00:11:03,680 --> 00:11:06,079
directories will contain a gprs file

262
00:11:06,079 --> 00:11:08,160
which will hold the settings that came

263
00:11:08,160 --> 00:11:09,839
with this particular card

264
00:11:09,839 --> 00:11:13,279
like the apn for example they will have

265
00:11:13,279 --> 00:11:16,000
multiple contexts in this particular

266
00:11:16,000 --> 00:11:17,279
case context 1

267
00:11:17,279 --> 00:11:20,560
is used for internet access and context

268
00:11:20,560 --> 00:11:23,839
2 is used for mms

269
00:11:23,839 --> 00:11:26,079
as already mentioned the opponent

270
00:11:26,079 --> 00:11:26,880
package

271
00:11:26,880 --> 00:11:28,800
manages all telephony subsystem

272
00:11:28,800 --> 00:11:31,519
functions i.e the data link layer

273
00:11:31,519 --> 00:11:33,279
the network layer is managed by the

274
00:11:33,279 --> 00:11:34,720
connection manager

275
00:11:34,720 --> 00:11:37,600
which settings can be found in home

276
00:11:37,600 --> 00:11:38,320
system

277
00:11:38,320 --> 00:11:42,000
var lab content once a new data context

278
00:11:42,000 --> 00:11:44,959
is activated on the device connection

279
00:11:44,959 --> 00:11:46,000
manager will create

280
00:11:46,000 --> 00:11:50,800
a subdirectory named cellular icc id

281
00:11:50,800 --> 00:11:53,519
context number in this particular case

282
00:11:53,519 --> 00:11:54,240
we observe

283
00:11:54,240 --> 00:11:57,519
cellular 310 to 60 context

284
00:11:57,519 --> 00:12:00,560
1. in this configuration file we can

285
00:12:00,560 --> 00:12:01,120
also

286
00:12:01,120 --> 00:12:04,240
observe the name of the cell phone

287
00:12:04,240 --> 00:12:05,360
provider

288
00:12:05,360 --> 00:12:07,600
the time when those settings were last

289
00:12:07,600 --> 00:12:08,560
changed

290
00:12:08,560 --> 00:12:12,240
as well as the ipv4 and ipv6 addresses

291
00:12:12,240 --> 00:12:14,720
of the device

292
00:12:14,720 --> 00:12:17,279
based on the timestamp of this directory

293
00:12:17,279 --> 00:12:18,959
we can also make

294
00:12:18,959 --> 00:12:23,279
another couple of reference inferences

295
00:12:23,279 --> 00:12:26,160
we can see when data was last enabled on

296
00:12:26,160 --> 00:12:26,959
this device

297
00:12:26,959 --> 00:12:30,000
which means that the user if the user

298
00:12:30,000 --> 00:12:31,279
has disabled data

299
00:12:31,279 --> 00:12:33,200
and then enables data without swapping

300
00:12:33,200 --> 00:12:34,480
the sim card we can

301
00:12:34,480 --> 00:12:38,320
register that change as well as we can

302
00:12:38,320 --> 00:12:41,760
see when the data was

303
00:12:41,760 --> 00:12:44,720
shut off by the timestamp on the history

304
00:12:44,720 --> 00:12:45,360
home

305
00:12:45,360 --> 00:12:52,079
our file

306
00:12:52,079 --> 00:12:54,480
section covers the artifacts pertaining

307
00:12:54,480 --> 00:12:57,839
to wireless interfaces

308
00:12:58,959 --> 00:13:01,200
as previously mentioned all network

309
00:13:01,200 --> 00:13:02,800
layer connectivity is managed by the

310
00:13:02,800 --> 00:13:04,160
connection manager

311
00:13:04,160 --> 00:13:06,000
and its settings are stored in home

312
00:13:06,000 --> 00:13:08,160
system var lab conman

313
00:13:08,160 --> 00:13:10,399
within this directory the settings file

314
00:13:10,399 --> 00:13:12,160
represents the

315
00:13:12,160 --> 00:13:15,360
state of the different subsystems

316
00:13:15,360 --> 00:13:17,920
if the phone is switched to airplane

317
00:13:17,920 --> 00:13:19,120
mode

318
00:13:19,120 --> 00:13:21,120
the offline mode variable within the

319
00:13:21,120 --> 00:13:22,880
global section will be turned

320
00:13:22,880 --> 00:13:26,320
will be switched to true similarly with

321
00:13:26,320 --> 00:13:30,079
gps wifi server and bluetooth

322
00:13:30,079 --> 00:13:32,560
sections

323
00:13:33,519 --> 00:13:36,800
the wi-fi mac address can be found in

324
00:13:36,800 --> 00:13:38,959
the data vendor wi-fi

325
00:13:38,959 --> 00:13:43,119
wlan mac bin file

326
00:13:43,519 --> 00:13:45,279
all configuration pertaining to the

327
00:13:45,279 --> 00:13:47,279
device will be stored in the connection

328
00:13:47,279 --> 00:13:50,560
manager directory in a subdirectory

329
00:13:50,560 --> 00:13:54,399
named after that mac address

330
00:13:54,399 --> 00:13:56,639
to be more precise the name will be

331
00:13:56,639 --> 00:13:57,920
wi-fi underscore

332
00:13:57,920 --> 00:14:00,079
mac address and then some additional

333
00:14:00,079 --> 00:14:00,959
data

334
00:14:00,959 --> 00:14:03,600
which is specific to the network that

335
00:14:03,600 --> 00:14:05,760
the device is connected to

336
00:14:05,760 --> 00:14:07,760
within that directory there will be a

337
00:14:07,760 --> 00:14:09,040
stats home

338
00:14:09,040 --> 00:14:12,240
file which will contain additional data

339
00:14:12,240 --> 00:14:14,480
pertinent to that connection in this

340
00:14:14,480 --> 00:14:16,959
particular case you can see the ssid

341
00:14:16,959 --> 00:14:19,040
the name of the network and the ip

342
00:14:19,040 --> 00:14:20,720
address that was assigned

343
00:14:20,720 --> 00:14:23,360
to the device you can also see the

344
00:14:23,360 --> 00:14:24,079
timestamp

345
00:14:24,079 --> 00:14:26,480
of when this configuration file was last

346
00:14:26,480 --> 00:14:28,720
modified

347
00:14:28,720 --> 00:14:30,959
the bluetooth interface similarly has

348
00:14:30,959 --> 00:14:33,440
its mac address located in

349
00:14:33,440 --> 00:14:36,560
data vendor bluetooth however it

350
00:14:36,560 --> 00:14:39,760
also has this value in var lib bluetooth

351
00:14:39,760 --> 00:14:41,680
where the rest of the bluetooth settings

352
00:14:41,680 --> 00:14:44,480
are stored

353
00:14:44,480 --> 00:14:47,519
in this particular case our device has a

354
00:14:47,519 --> 00:14:47,839
mac

355
00:14:47,839 --> 00:14:50,399
address that starts with d4 so the

356
00:14:50,399 --> 00:14:51,600
configuration settings

357
00:14:51,600 --> 00:14:54,000
are stored in directory variable

358
00:14:54,000 --> 00:14:56,240
bluetooth d4 and so on

359
00:14:56,240 --> 00:14:59,760
settings the settings file will

360
00:14:59,760 --> 00:15:01,839
tell us if the device is currently set

361
00:15:01,839 --> 00:15:03,519
to discoverable

362
00:15:03,519 --> 00:15:05,519
if there is a timeout for it being

363
00:15:05,519 --> 00:15:06,560
discoverable

364
00:15:06,560 --> 00:15:10,639
and also what is the name of the device

365
00:15:10,639 --> 00:15:13,360
for all paired devices there will be a

366
00:15:13,360 --> 00:15:14,880
subdirectory

367
00:15:14,880 --> 00:15:18,240
based on the mac address

368
00:15:18,240 --> 00:15:21,839
of the paired device

369
00:15:22,240 --> 00:15:23,839
in each of those directories there will

370
00:15:23,839 --> 00:15:25,839
be an info file which will contain

371
00:15:25,839 --> 00:15:27,519
additional information

372
00:15:27,519 --> 00:15:29,680
about the paired device in this

373
00:15:29,680 --> 00:15:31,600
particular case we see

374
00:15:31,600 --> 00:15:35,040
that this is a headset

375
00:15:35,040 --> 00:15:38,320
we can see that it is trusted so it can

376
00:15:38,320 --> 00:15:40,959
read the address book from the device

377
00:15:40,959 --> 00:15:42,240
and we also see

378
00:15:42,240 --> 00:15:45,199
the link key

379
00:15:46,959 --> 00:15:49,120
this section covers forensics artifacts

380
00:15:49,120 --> 00:15:52,160
pertaining to the system

381
00:15:52,160 --> 00:15:54,240
during a forensic investigation it is

382
00:15:54,240 --> 00:15:55,759
important to understand

383
00:15:55,759 --> 00:15:58,079
when a particular device's timeline

384
00:15:58,079 --> 00:15:59,040
starts

385
00:15:59,040 --> 00:16:00,720
in other words when the device was set

386
00:16:00,720 --> 00:16:03,600
up and firstly used

387
00:16:03,600 --> 00:16:06,880
upon initial boot selfish os will

388
00:16:06,880 --> 00:16:09,040
prompt the user to go through a setup

389
00:16:09,040 --> 00:16:10,240
wizard

390
00:16:10,240 --> 00:16:13,040
as a result a couple of files will be

391
00:16:13,040 --> 00:16:13,519
created

392
00:16:13,519 --> 00:16:16,079
on the file system which can help an

393
00:16:16,079 --> 00:16:17,279
investigator

394
00:16:17,279 --> 00:16:22,000
infer when the device was first set up

395
00:16:22,000 --> 00:16:25,279
in addition the last boot time is stored

396
00:16:25,279 --> 00:16:27,920
in the last boot time udc file

397
00:16:27,920 --> 00:16:31,759
and based on its timestamp and contents

398
00:16:31,759 --> 00:16:35,440
this time can be determined

399
00:16:35,519 --> 00:16:37,839
last but not least every time the system

400
00:16:37,839 --> 00:16:38,800
boots

401
00:16:38,800 --> 00:16:41,360
it creates a file called system

402
00:16:41,360 --> 00:16:42,959
underscore boot

403
00:16:42,959 --> 00:16:46,399
timestamp and this file contains

404
00:16:46,399 --> 00:16:49,680
information on the kernel and other

405
00:16:49,680 --> 00:16:53,680
important information used during boot

406
00:16:53,680 --> 00:16:56,079
unfortunately only the last two copies

407
00:16:56,079 --> 00:16:58,240
of this file are preserved

408
00:16:58,240 --> 00:17:02,000
however it is possible to carve

409
00:17:02,000 --> 00:17:04,400
those files from the file system and

410
00:17:04,400 --> 00:17:05,039
recover

411
00:17:05,039 --> 00:17:06,799
other times when the file system has

412
00:17:06,799 --> 00:17:09,039
been booted and maybe discovered that

413
00:17:09,039 --> 00:17:11,199
one of those times an alternative kernel

414
00:17:11,199 --> 00:17:12,799
was used

415
00:17:12,799 --> 00:17:15,199
and as a result of a malware infection

416
00:17:15,199 --> 00:17:17,039
or some other kind of intrusion on the

417
00:17:17,039 --> 00:17:19,839
device

418
00:17:19,919 --> 00:17:21,599
all user accounts are stored in the

419
00:17:21,599 --> 00:17:23,919
accounts database file

420
00:17:23,919 --> 00:17:26,880
this file contains a number of tables

421
00:17:26,880 --> 00:17:27,359
and

422
00:17:27,359 --> 00:17:28,960
some of them will contain the account

423
00:17:28,960 --> 00:17:31,120
names some of them contain

424
00:17:31,120 --> 00:17:34,160
services that are

425
00:17:34,160 --> 00:17:36,880
that those accounts are bound to and

426
00:17:36,880 --> 00:17:38,559
some of those tables contain

427
00:17:38,559 --> 00:17:41,039
settings

428
00:17:42,320 --> 00:17:44,320
all credentials are stored in the sign

429
00:17:44,320 --> 00:17:46,720
on secrets db file

430
00:17:46,720 --> 00:17:50,400
this file contains unencrypted

431
00:17:50,400 --> 00:17:54,640
plain text passwords and tokens

432
00:17:57,200 --> 00:17:59,760
during forensics investigation it may be

433
00:17:59,760 --> 00:18:01,360
necessary to establish

434
00:18:01,360 --> 00:18:03,280
if other people had access to a

435
00:18:03,280 --> 00:18:05,039
particular cell phone

436
00:18:05,039 --> 00:18:08,480
and if it was protected a factor

437
00:18:08,480 --> 00:18:10,559
in this establishing this proof may be

438
00:18:10,559 --> 00:18:12,840
the state of the device lock of the

439
00:18:12,840 --> 00:18:14,480
phone

440
00:18:14,480 --> 00:18:17,840
sailfish os allows for the user to set a

441
00:18:17,840 --> 00:18:18,240
pin

442
00:18:18,240 --> 00:18:21,840
or use fingerprint to unlock the device

443
00:18:21,840 --> 00:18:25,760
if a pin is set it its hash will be

444
00:18:25,760 --> 00:18:29,280
stored in the device lock enc file

445
00:18:29,280 --> 00:18:32,559
furthermore the device lock settings

446
00:18:32,559 --> 00:18:34,320
configuration file

447
00:18:34,320 --> 00:18:37,440
will store a timestamp of when the pin

448
00:18:37,440 --> 00:18:39,120
was set

449
00:18:39,120 --> 00:18:42,640
if a pin is not set then the device lock

450
00:18:42,640 --> 00:18:46,880
ink file will have length of 0.

451
00:18:47,679 --> 00:18:50,480
if fingerprints are set they will be

452
00:18:50,480 --> 00:18:52,880
stored

453
00:18:52,880 --> 00:18:56,320
in the selfish fpd templates

454
00:18:56,320 --> 00:18:58,799
user db file this will be the content of

455
00:18:58,799 --> 00:19:00,240
the actual fingerprint

456
00:19:00,240 --> 00:19:02,000
however the existence of configured

457
00:19:02,000 --> 00:19:04,440
fingerprints will be reflected in the

458
00:19:04,440 --> 00:19:07,120
fingers.json file which will also

459
00:19:07,120 --> 00:19:07,760
contain

460
00:19:07,760 --> 00:19:09,120
the time of enrollment of the

461
00:19:09,120 --> 00:19:12,640
fingerprint and it will also

462
00:19:12,640 --> 00:19:18,240
be reflected in the index csv file

463
00:19:21,360 --> 00:19:24,080
the system maintains contacts and

464
00:19:24,080 --> 00:19:25,039
address book

465
00:19:25,039 --> 00:19:27,679
which are both stored in the context db

466
00:19:27,679 --> 00:19:28,559
file

467
00:19:28,559 --> 00:19:31,520
this file has a large number of tables

468
00:19:31,520 --> 00:19:31,919
that

469
00:19:31,919 --> 00:19:36,480
reflect different properties of a person

470
00:19:36,480 --> 00:19:38,720
some of them are email addresses some of

471
00:19:38,720 --> 00:19:40,480
them addresses

472
00:19:40,480 --> 00:19:43,520
and contact information now

473
00:19:43,520 --> 00:19:45,679
there is a table called deleted context

474
00:19:45,679 --> 00:19:46,720
which

475
00:19:46,720 --> 00:19:48,559
unfortunately doesn't seem to be

476
00:19:48,559 --> 00:19:50,880
containing any deleted context

477
00:19:50,880 --> 00:19:53,280
so currently it is under investigation

478
00:19:53,280 --> 00:19:56,399
if this table is

479
00:19:56,720 --> 00:19:59,840
an artifact left from past functionality

480
00:19:59,840 --> 00:20:03,039
or if it is a future development

481
00:20:03,039 --> 00:20:07,840
this will be covered in our future work

482
00:20:10,400 --> 00:20:12,400
since there are multiple tables that

483
00:20:12,400 --> 00:20:14,559
split a record

484
00:20:14,559 --> 00:20:18,559
in different areas all of them are tied

485
00:20:18,559 --> 00:20:22,720
using the connect contact id field

486
00:20:22,720 --> 00:20:24,799
so all records pertaining to the same

487
00:20:24,799 --> 00:20:26,880
contact will have the same contact id

488
00:20:26,880 --> 00:20:28,400
field

489
00:20:28,400 --> 00:20:30,480
this section covers forensics artifacts

490
00:20:30,480 --> 00:20:34,720
pertinent to different applications

491
00:20:34,720 --> 00:20:36,720
the first application we cover is the

492
00:20:36,720 --> 00:20:37,840
web browser

493
00:20:37,840 --> 00:20:40,799
which is a version of mozilla its

494
00:20:40,799 --> 00:20:43,440
settings are stored in home nemo mozilla

495
00:20:43,440 --> 00:20:46,960
mozembed the cache

496
00:20:46,960 --> 00:20:50,240
of this browser is stored under cache2

497
00:20:50,240 --> 00:20:52,480
all certificates are stored in the key

498
00:20:52,480 --> 00:20:53,840
four database

499
00:20:53,840 --> 00:20:57,360
and some of the logging information is

500
00:20:57,360 --> 00:20:58,320
also stored in

501
00:20:58,320 --> 00:21:02,000
logins json this can help us assert that

502
00:21:02,000 --> 00:21:04,320
particular user has access to particular

503
00:21:04,320 --> 00:21:06,559
website

504
00:21:06,559 --> 00:21:08,640
what because we have the authentication

505
00:21:08,640 --> 00:21:11,840
credentials to that website

506
00:21:11,840 --> 00:21:14,799
in addition uh the trusted certificate

507
00:21:14,799 --> 00:21:15,280
store

508
00:21:15,280 --> 00:21:18,400
is stored in the certain idb file it is

509
00:21:18,400 --> 00:21:19,679
important to note

510
00:21:19,679 --> 00:21:22,080
that unlike the desktop version of

511
00:21:22,080 --> 00:21:22,960
mozilla

512
00:21:22,960 --> 00:21:26,400
this one has a fairly limited set of

513
00:21:26,400 --> 00:21:28,640
root certificates which overall

514
00:21:28,640 --> 00:21:32,400
increases the security of the device

515
00:21:32,400 --> 00:21:35,520
last but not least the cookies file is

516
00:21:35,520 --> 00:21:37,039
called cookies sqlite

517
00:21:37,039 --> 00:21:41,120
and stores cookies and browsing history

518
00:21:41,120 --> 00:21:44,640
in addition the hsts sites

519
00:21:44,640 --> 00:21:47,200
visited by the user will leave a trace

520
00:21:47,200 --> 00:21:48,960
in the site security service

521
00:21:48,960 --> 00:21:52,480
state txt file

522
00:21:53,120 --> 00:21:56,000
the email application is a derivative of

523
00:21:56,000 --> 00:21:57,039
qmail

524
00:21:57,039 --> 00:21:59,280
and all with settings are stored in home

525
00:21:59,280 --> 00:22:02,240
nemo qmf

526
00:22:02,480 --> 00:22:05,600
the email bodies are stored in qmf and

527
00:22:05,600 --> 00:22:09,440
slash mail and each message

528
00:22:09,440 --> 00:22:12,640
is stored in a separate file in the case

529
00:22:12,640 --> 00:22:14,159
of multi-part

530
00:22:14,159 --> 00:22:16,559
email messages there is also a

531
00:22:16,559 --> 00:22:18,480
subdirectory with the suffix

532
00:22:18,480 --> 00:22:22,000
parts created in this particular example

533
00:22:22,000 --> 00:22:23,679
we can see this message

534
00:22:23,679 --> 00:22:25,840
has multiple parts you can see the

535
00:22:25,840 --> 00:22:27,600
content type

536
00:22:27,600 --> 00:22:30,799
there and then this message will have

537
00:22:30,799 --> 00:22:33,200
a subdirectory with the same message

538
00:22:33,200 --> 00:22:34,799
name dash parts

539
00:22:34,799 --> 00:22:37,679
created and within that directory you

540
00:22:37,679 --> 00:22:38,799
will see the different

541
00:22:38,799 --> 00:22:42,240
parts of that my message

542
00:22:42,880 --> 00:22:45,039
the rest of the settings are stored in

543
00:22:45,039 --> 00:22:46,559
the qmail store

544
00:22:46,559 --> 00:22:49,360
db file and there is a number of tables

545
00:22:49,360 --> 00:22:52,159
there that contain this

546
00:22:52,159 --> 00:22:55,039
the calendar application stores its data

547
00:22:55,039 --> 00:22:55,919
and settings

548
00:22:55,919 --> 00:22:59,360
in the mk caldb file

549
00:22:59,360 --> 00:23:02,559
this file has a number of tables and

550
00:23:02,559 --> 00:23:06,159
all of them connect using the component

551
00:23:06,159 --> 00:23:09,840
id field

552
00:23:10,080 --> 00:23:12,080
last but not least is the gallery

553
00:23:12,080 --> 00:23:13,200
application

554
00:23:13,200 --> 00:23:15,280
all of the images on the phone are

555
00:23:15,280 --> 00:23:18,799
stored in three particular directories

556
00:23:18,799 --> 00:23:21,760
home new pictures and then camera

557
00:23:21,760 --> 00:23:24,879
default and screenshots

558
00:23:26,320 --> 00:23:28,240
this section covers future work and

559
00:23:28,240 --> 00:23:30,799
conclusions

560
00:23:31,520 --> 00:23:33,600
while this research answered a lot of

561
00:23:33,600 --> 00:23:36,240
questions pertinent to selfish ios

562
00:23:36,240 --> 00:23:38,400
there are still few artifacts that we

563
00:23:38,400 --> 00:23:40,559
would like to export or explore

564
00:23:40,559 --> 00:23:42,240
in addition we would like to do a

565
00:23:42,240 --> 00:23:44,720
comparative analysis between aurora os

566
00:23:44,720 --> 00:23:48,559
and selfish in addition

567
00:23:48,559 --> 00:23:51,200
selfish can run android applications

568
00:23:51,200 --> 00:23:51,919
using the

569
00:23:51,919 --> 00:23:54,720
dalvik engine

570
00:23:54,960 --> 00:23:56,720
in one of our future works we're going

571
00:23:56,720 --> 00:23:58,320
to look at

572
00:23:58,320 --> 00:24:01,279
how different applications installed

573
00:24:01,279 --> 00:24:03,360
within that engine

574
00:24:03,360 --> 00:24:05,840
leave fingerprints on the system that

575
00:24:05,840 --> 00:24:06,640
can be used

576
00:24:06,640 --> 00:24:09,760
for later analysis

577
00:24:09,760 --> 00:24:12,720
last but not least all of this work can

578
00:24:12,720 --> 00:24:14,000
be automated and

579
00:24:14,000 --> 00:24:17,360
work on automating the extraction of

580
00:24:17,360 --> 00:24:20,720
forensics data from the uh

581
00:24:20,720 --> 00:24:23,840
from the selfish os device

582
00:24:23,840 --> 00:24:25,760
if you have any questions or if you

583
00:24:25,760 --> 00:24:27,440
would like us to conduct specific type

584
00:24:27,440 --> 00:24:28,240
of research

585
00:24:28,240 --> 00:24:30,720
feel free to contact me at krasi at

586
00:24:30,720 --> 00:24:31,360
purdue

587
00:24:31,360 --> 00:24:33,840
edu

588
00:24:36,000 --> 00:24:38,880
if you would like to get further details

589
00:24:38,880 --> 00:24:40,240
on some of the

590
00:24:40,240 --> 00:24:43,279
work presented today you can also

591
00:24:43,279 --> 00:24:46,320
look at our

592
00:24:46,320 --> 00:24:48,960
article in computers and security named

593
00:24:48,960 --> 00:24:51,360
a first look at forensics analysis of

594
00:24:51,360 --> 00:24:54,158
selfish os

595
00:24:55,279 --> 00:24:57,039
we would like to thank everyone for

596
00:24:57,039 --> 00:24:58,559
attending this talk

597
00:24:58,559 --> 00:25:01,200
we briefly introduced selfish os and why

598
00:25:01,200 --> 00:25:02,880
it is important for forensic

599
00:25:02,880 --> 00:25:04,720
investigations

600
00:25:04,720 --> 00:25:06,559
we looked at the software evolution of

601
00:25:06,559 --> 00:25:07,760
the platform and

602
00:25:07,760 --> 00:25:11,360
previous forensics work done on it

603
00:25:11,360 --> 00:25:13,840
we presented a number of findings

604
00:25:13,840 --> 00:25:14,400
grouped

605
00:25:14,400 --> 00:25:18,880
in several larger categories

606
00:25:18,880 --> 00:25:21,600
at the end we presented our plans for

607
00:25:21,600 --> 00:25:22,320
future work

608
00:25:22,320 --> 00:25:24,960
in this space

609
00:25:26,960 --> 00:25:29,840
thank you

