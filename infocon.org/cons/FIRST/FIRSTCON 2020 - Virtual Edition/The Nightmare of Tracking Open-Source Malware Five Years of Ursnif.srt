1
00:00:00,080 --> 00:00:02,720
dna in the q a section at the bottom and

2
00:00:02,720 --> 00:00:04,319
the questions will be cued in the order

3
00:00:04,319 --> 00:00:05,120
received

4
00:00:05,120 --> 00:00:08,639
and please uh if you uh don't wait until

5
00:00:08,639 --> 00:00:11,040
there's 30 seconds left to ask the

6
00:00:11,040 --> 00:00:13,360
question

7
00:00:13,440 --> 00:00:17,039
so i'd like to welcome tamash botsam

8
00:00:17,039 --> 00:00:20,560
he is a senior threat analyst at vmray

9
00:00:20,560 --> 00:00:22,240
he's responsible for finding and

10
00:00:22,240 --> 00:00:24,160
analyzing relevant

11
00:00:24,160 --> 00:00:27,599
malware samples and very interested in

12
00:00:27,599 --> 00:00:29,599
invasive in the world samples and

13
00:00:29,599 --> 00:00:31,119
exploitation

14
00:00:31,119 --> 00:00:33,280
he regularly writes on the vmray

15
00:00:33,280 --> 00:00:35,360
technical blog

16
00:00:35,360 --> 00:00:37,200
and he is going to talk about open

17
00:00:37,200 --> 00:00:39,680
source malware um

18
00:00:39,680 --> 00:00:43,040
burstnif or you are sniff it's

19
00:00:43,040 --> 00:00:45,200
a relatively complex full-featured

20
00:00:45,200 --> 00:00:47,200
malware um

21
00:00:47,200 --> 00:00:51,199
that was which

22
00:00:51,199 --> 00:00:54,559
code was was leaked

23
00:00:54,559 --> 00:00:56,719
and different criminal groups have

24
00:00:56,719 --> 00:00:59,280
created a swarm of variants

25
00:00:59,280 --> 00:01:02,800
from the leaked code and hence

26
00:01:02,800 --> 00:01:07,200
the nightmare take it away

27
00:01:07,200 --> 00:01:10,400
thank you so i'm thomas busan

28
00:01:10,400 --> 00:01:13,840
and my topic is league is my weekly

29
00:01:13,840 --> 00:01:16,320
the source code and specifically

30
00:01:16,320 --> 00:01:18,640
yourself

31
00:01:18,640 --> 00:01:21,200
so when discussing mobile tracking we

32
00:01:21,200 --> 00:01:22,400
mostly mean

33
00:01:22,400 --> 00:01:25,040
the development and the distribution of

34
00:01:25,040 --> 00:01:27,200
mobile as a service or samples created

35
00:01:27,200 --> 00:01:29,119
by mobile service

36
00:01:29,119 --> 00:01:33,280
and normally these were the service

37
00:01:33,280 --> 00:01:36,400
type types of malware operate closed

38
00:01:36,400 --> 00:01:37,040
source

39
00:01:37,040 --> 00:01:39,439
so the main components the builder and

40
00:01:39,439 --> 00:01:41,920
the panels are closed source

41
00:01:41,920 --> 00:01:43,759
and of course they also have some open

42
00:01:43,759 --> 00:01:45,200
source components

43
00:01:45,200 --> 00:01:47,920
such as a stage that is used during

44
00:01:47,920 --> 00:01:49,680
during a manual attack might be used to

45
00:01:49,680 --> 00:01:51,520
deliver the motor

46
00:01:51,520 --> 00:01:53,600
or it's possible that the component of

47
00:01:53,600 --> 00:01:55,200
the marvel itself

48
00:01:55,200 --> 00:01:57,439
is open source such as a component for

49
00:01:57,439 --> 00:02:00,479
privilege escalation

50
00:02:00,479 --> 00:02:03,680
what we normally do is that we track the

51
00:02:03,680 --> 00:02:05,520
closed source components

52
00:02:05,520 --> 00:02:08,080
and we do not track at all the open

53
00:02:08,080 --> 00:02:09,919
source tools which are used in attacks

54
00:02:09,919 --> 00:02:11,440
because

55
00:02:11,440 --> 00:02:15,120
they are so they are so common that they

56
00:02:15,120 --> 00:02:15,440
would

57
00:02:15,440 --> 00:02:18,319
give us no data but it so it might be

58
00:02:18,319 --> 00:02:19,599
worthwhile

59
00:02:19,599 --> 00:02:22,560
uh sometimes to track the components

60
00:02:22,560 --> 00:02:23,520
which are used

61
00:02:23,520 --> 00:02:25,360
inside the monitor even though they are

62
00:02:25,360 --> 00:02:27,920
open source

63
00:02:28,080 --> 00:02:31,120
so checking closed source mower gives us

64
00:02:31,120 --> 00:02:33,360
usually a very clear classification so

65
00:02:33,360 --> 00:02:34,480
if we we can

66
00:02:34,480 --> 00:02:37,599
often we can usually classify

67
00:02:37,599 --> 00:02:40,879
the unpacked payload into one of the

68
00:02:40,879 --> 00:02:42,560
common malware families

69
00:02:42,560 --> 00:02:44,560
and we can identify its variant and

70
00:02:44,560 --> 00:02:46,640
version

71
00:02:46,640 --> 00:02:48,959
and this gives us a clear list of

72
00:02:48,959 --> 00:02:50,560
malware capabilities

73
00:02:50,560 --> 00:02:53,599
which allows allows to measure detection

74
00:02:53,599 --> 00:02:56,560
so if we know what types of mobile are

75
00:02:56,560 --> 00:02:57,360
in the wild

76
00:02:57,360 --> 00:03:00,800
we can clearly measure our own defenses

77
00:03:00,800 --> 00:03:02,640
we can measure the effectiveness of

78
00:03:02,640 --> 00:03:04,000
security products

79
00:03:04,000 --> 00:03:07,120
and we can improve our defense

80
00:03:07,120 --> 00:03:10,000
this also gives us for a single family

81
00:03:10,000 --> 00:03:11,519
usually a linear

82
00:03:11,519 --> 00:03:14,640
version history so we know what variant

83
00:03:14,640 --> 00:03:16,560
of what version of the marker added

84
00:03:16,560 --> 00:03:18,800
which feature

85
00:03:18,800 --> 00:03:21,760
and we can also track the modules which

86
00:03:21,760 --> 00:03:23,840
are used by the mower so we know when a

87
00:03:23,840 --> 00:03:25,680
new module has appeared

88
00:03:25,680 --> 00:03:28,000
and how the new module is being

89
00:03:28,000 --> 00:03:30,000
developed

90
00:03:30,000 --> 00:03:33,840
but then what sometimes happens is that

91
00:03:33,840 --> 00:03:36,640
criminals have a breach and their source

92
00:03:36,640 --> 00:03:37,440
called leaks

93
00:03:37,440 --> 00:03:40,720
first it usually leaks to some forum

94
00:03:40,720 --> 00:03:42,879
and then it sometimes leaks to the open

95
00:03:42,879 --> 00:03:44,000
web

96
00:03:44,000 --> 00:03:46,400
and then a nice clear understanding of

97
00:03:46,400 --> 00:03:50,159
the thread goes out the window basically

98
00:03:50,799 --> 00:03:54,159
so this gives us many problems even

99
00:03:54,159 --> 00:03:55,680
besides tracking

100
00:03:55,680 --> 00:03:59,040
so the here the service that leaked the

101
00:03:59,040 --> 00:04:00,319
source code that leaked

102
00:04:00,319 --> 00:04:02,560
it's not just a tool or a component that

103
00:04:02,560 --> 00:04:03,599
can be used

104
00:04:03,599 --> 00:04:06,799
within an existing mobile service but

105
00:04:06,799 --> 00:04:07,280
it's an

106
00:04:07,280 --> 00:04:10,720
entirely new service so

107
00:04:10,720 --> 00:04:14,239
the malware author can just

108
00:04:14,239 --> 00:04:16,478
start a new criminal enterprise based on

109
00:04:16,478 --> 00:04:19,120
the league service

110
00:04:19,120 --> 00:04:20,720
also attackers were paying for this

111
00:04:20,720 --> 00:04:22,160
service before so it's obviously

112
00:04:22,160 --> 00:04:23,199
valuable

113
00:04:23,199 --> 00:04:25,680
it's not something that is available

114
00:04:25,680 --> 00:04:26,960
from for free

115
00:04:26,960 --> 00:04:29,840
from open source

116
00:04:30,720 --> 00:04:33,360
also it's the biggest problem probably

117
00:04:33,360 --> 00:04:34,960
is that a bunch of works

118
00:04:34,960 --> 00:04:36,880
are created based on this open source

119
00:04:36,880 --> 00:04:38,639
code

120
00:04:38,639 --> 00:04:41,280
for criminals this means that creating a

121
00:04:41,280 --> 00:04:42,720
new malware service is

122
00:04:42,720 --> 00:04:45,360
basically free as for the code they just

123
00:04:45,360 --> 00:04:46,960
need the infrastructure

124
00:04:46,960 --> 00:04:49,360
so the cost of entry to create a new

125
00:04:49,360 --> 00:04:50,560
mobile service is

126
00:04:50,560 --> 00:04:53,600
dangerously reduced and

127
00:04:53,600 --> 00:04:56,320
for defenders it means that detection is

128
00:04:56,320 --> 00:04:58,160
somewhat more difficult

129
00:04:58,160 --> 00:05:01,520
because the

130
00:05:01,759 --> 00:05:05,360
the hardware became more diverse

131
00:05:05,360 --> 00:05:08,639
and the biggest impact is that tracking

132
00:05:08,639 --> 00:05:09,039
it

133
00:05:09,039 --> 00:05:12,160
gets extremely challenging now

134
00:05:12,160 --> 00:05:13,919
the reason is challenging is that the

135
00:05:13,919 --> 00:05:15,360
leaked code

136
00:05:15,360 --> 00:05:18,000
is that the forks have in almost

137
00:05:18,000 --> 00:05:19,520
entirely the same source code

138
00:05:19,520 --> 00:05:22,000
sometimes the client side might even be

139
00:05:22,000 --> 00:05:23,919
completely identical and it's possible

140
00:05:23,919 --> 00:05:25,440
that the forks

141
00:05:25,440 --> 00:05:27,600
only change the server side of the

142
00:05:27,600 --> 00:05:29,520
mobile or the panel that is visible to

143
00:05:29,520 --> 00:05:32,159
the attacker

144
00:05:32,400 --> 00:05:35,440
it also happens that the information

145
00:05:35,440 --> 00:05:37,520
that is available from open sources is

146
00:05:37,520 --> 00:05:38,400
inconsistent

147
00:05:38,400 --> 00:05:40,720
which is very understandable so tracking

148
00:05:40,720 --> 00:05:42,000
these

149
00:05:42,000 --> 00:05:44,639
different variants of linked league

150
00:05:44,639 --> 00:05:45,199
malware

151
00:05:45,199 --> 00:05:49,919
is very challenging so it happens that

152
00:05:49,919 --> 00:05:53,199
blogs and papers and

153
00:05:53,199 --> 00:05:55,840
especially twitter calls these samples

154
00:05:55,840 --> 00:05:57,520
by different names and

155
00:05:57,520 --> 00:06:00,960
groups them very differently

156
00:06:01,520 --> 00:06:03,680
all in all that tracking this leaked

157
00:06:03,680 --> 00:06:05,039
source motor

158
00:06:05,039 --> 00:06:07,600
needs a very different methodology from

159
00:06:07,600 --> 00:06:08,240
tracking

160
00:06:08,240 --> 00:06:11,120
closed or smaller

161
00:06:11,440 --> 00:06:14,560
so to establish our methodology

162
00:06:14,560 --> 00:06:18,960
or at least to present it we will be

163
00:06:19,039 --> 00:06:20,880
presenting a case study that we

164
00:06:20,880 --> 00:06:23,280
conducted over your sniff

165
00:06:23,280 --> 00:06:26,560
this is also known as isfp or cosi

166
00:06:26,560 --> 00:06:29,600
or many of its variants are known by

167
00:06:29,600 --> 00:06:32,479
different names from different sources

168
00:06:32,479 --> 00:06:34,240
probably the most technically correct

169
00:06:34,240 --> 00:06:36,240
name was could be isfp

170
00:06:36,240 --> 00:06:38,800
because that's how the developers called

171
00:06:38,800 --> 00:06:40,400
the originally code

172
00:06:40,400 --> 00:06:43,440
but the most accepted uh industry

173
00:06:43,440 --> 00:06:45,039
standard name for it is your sniff so

174
00:06:45,039 --> 00:06:46,639
i'll be calling it your sniff

175
00:06:46,639 --> 00:06:49,280
really the naming doesn't matter as much

176
00:06:49,280 --> 00:06:49,680
as

177
00:06:49,680 --> 00:06:52,720
the grouping so however

178
00:06:52,720 --> 00:06:56,080
how we label each group is probably not

179
00:06:56,080 --> 00:06:56,960
that important

180
00:06:56,960 --> 00:07:00,720
as what each group contains

181
00:07:00,720 --> 00:07:02,560
so why we picked this malware is that

182
00:07:02,560 --> 00:07:04,479
it's been on github since

183
00:07:04,479 --> 00:07:08,319
at least 2015 which means that if we

184
00:07:08,319 --> 00:07:09,280
observe

185
00:07:09,280 --> 00:07:12,240
how the model looks now we can observe

186
00:07:12,240 --> 00:07:14,160
the long-term effect of the leak

187
00:07:14,160 --> 00:07:16,160
so we can see how it changed in five

188
00:07:16,160 --> 00:07:18,400
years

189
00:07:19,039 --> 00:07:23,120
the most important takeaway is that uh

190
00:07:23,120 --> 00:07:25,199
is that when tracking tomorrow we're

191
00:07:25,199 --> 00:07:27,360
looking for divergences from the leaked

192
00:07:27,360 --> 00:07:28,800
source code

193
00:07:28,800 --> 00:07:31,919
and these divergences are implemented by

194
00:07:31,919 --> 00:07:34,160
the attacker to please their customers

195
00:07:34,160 --> 00:07:36,160
so they implement customer facing

196
00:07:36,160 --> 00:07:38,400
changes the customer being

197
00:07:38,400 --> 00:07:40,479
the attacker who they sell their malware

198
00:07:40,479 --> 00:07:41,840
services

199
00:07:41,840 --> 00:07:44,639
so they are either some new feature or

200
00:07:44,639 --> 00:07:47,199
some way to

201
00:07:47,199 --> 00:07:49,680
to bypass security software and

202
00:07:49,680 --> 00:07:52,319
researchers

203
00:07:52,400 --> 00:07:55,199
the first logical idea would be to track

204
00:07:55,199 --> 00:07:56,879
the changes in the payload

205
00:07:56,879 --> 00:07:59,680
yeah so the original payload of the

206
00:07:59,680 --> 00:08:00,639
malware

207
00:08:00,639 --> 00:08:04,240
was mostly focused on attacking browsers

208
00:08:04,240 --> 00:08:06,400
and so it's conducted many browser

209
00:08:06,400 --> 00:08:08,800
attacks where it

210
00:08:08,800 --> 00:08:13,120
hooked certain api calls of browsers

211
00:08:13,120 --> 00:08:17,199
and then modified html or injected html

212
00:08:17,199 --> 00:08:17,520
and

213
00:08:17,520 --> 00:08:21,199
javascript into web pages of banks or

214
00:08:21,199 --> 00:08:21,759
other

215
00:08:21,759 --> 00:08:24,080
other websites which contain credentials

216
00:08:24,080 --> 00:08:26,080
and it also did a

217
00:08:26,080 --> 00:08:29,840
cookie grabbing but besides this it was

218
00:08:29,840 --> 00:08:30,639
also a very

219
00:08:30,639 --> 00:08:34,559
versatile uh and quite generic

220
00:08:34,559 --> 00:08:37,120
boat uh it implemented a bunch of other

221
00:08:37,120 --> 00:08:38,000
features

222
00:08:38,000 --> 00:08:40,958
such as it provided a socks proxy to the

223
00:08:40,958 --> 00:08:42,240
victim service

224
00:08:42,240 --> 00:08:44,720
which is also which was at the time also

225
00:08:44,720 --> 00:08:46,640
very useful for

226
00:08:46,640 --> 00:08:48,959
making making it more difficult for the

227
00:08:48,959 --> 00:08:50,320
bank to detect

228
00:08:50,320 --> 00:08:54,000
that that even though it's

229
00:08:54,000 --> 00:08:56,000
uh the client is using the correct

230
00:08:56,000 --> 00:08:57,680
credentials and the correct two-factor

231
00:08:57,680 --> 00:08:58,880
authentication keys

232
00:08:58,880 --> 00:09:01,040
is still not the same client so at least

233
00:09:01,040 --> 00:09:02,640
the ip address was the same

234
00:09:02,640 --> 00:09:06,399
today this is probably not enough

235
00:09:06,720 --> 00:09:09,040
it also implemented key logging and

236
00:09:09,040 --> 00:09:10,959
screen recording features and it could

237
00:09:10,959 --> 00:09:13,279
also grab other data such as emails

238
00:09:13,279 --> 00:09:16,560
or passwords from ftp or instant

239
00:09:16,560 --> 00:09:17,519
messages

240
00:09:17,519 --> 00:09:20,640
and it gets could grab files based on

241
00:09:20,640 --> 00:09:21,279
their

242
00:09:21,279 --> 00:09:26,640
file path since then

243
00:09:27,279 --> 00:09:30,000
there was mostly necessary maintenance

244
00:09:30,000 --> 00:09:30,880
for the new

245
00:09:30,880 --> 00:09:33,440
new browser versions so to still

246
00:09:33,440 --> 00:09:34,959
successfully add hooks

247
00:09:34,959 --> 00:09:37,519
to new browsers they need it to conduct

248
00:09:37,519 --> 00:09:38,320
maintenance

249
00:09:38,320 --> 00:09:42,080
to the browser stealing module

250
00:09:42,160 --> 00:09:44,480
there's also a bunch of new web inject

251
00:09:44,480 --> 00:09:47,440
kits so the

252
00:09:47,440 --> 00:09:49,600
the javascript which is injected into

253
00:09:49,600 --> 00:09:51,519
the browser

254
00:09:51,519 --> 00:09:53,680
this webin jack kits were always

255
00:09:53,680 --> 00:09:55,279
separate from the malware itself these

256
00:09:55,279 --> 00:09:56,720
are separate projects

257
00:09:56,720 --> 00:09:59,120
they just have developed separately from

258
00:09:59,120 --> 00:10:00,480
the malware since then and

259
00:10:00,480 --> 00:10:04,240
they are now their own separate industry

260
00:10:04,240 --> 00:10:06,800
there is also vnc compatibility so when

261
00:10:06,800 --> 00:10:07,839
the

262
00:10:07,839 --> 00:10:10,560
attacker is trying to steal trying to

263
00:10:10,560 --> 00:10:11,040
access

264
00:10:11,040 --> 00:10:13,760
somebody's banking information then they

265
00:10:13,760 --> 00:10:15,440
often need to

266
00:10:15,440 --> 00:10:17,360
access it from their computer their

267
00:10:17,360 --> 00:10:18,800
browser so they

268
00:10:18,800 --> 00:10:22,000
vnc in and they conduct their

269
00:10:22,000 --> 00:10:24,880
attack from the victim browser try to

270
00:10:24,880 --> 00:10:25,680
trick

271
00:10:25,680 --> 00:10:28,399
try to trick them into giving them their

272
00:10:28,399 --> 00:10:29,839
two-factor authentication

273
00:10:29,839 --> 00:10:32,000
or just doing something once they are

274
00:10:32,000 --> 00:10:34,720
already logged in

275
00:10:35,440 --> 00:10:38,959
and and they also added stealing from

276
00:10:38,959 --> 00:10:42,079
additional applications

277
00:10:42,480 --> 00:10:44,959
so what's good about tracking by payload

278
00:10:44,959 --> 00:10:46,160
is that they are

279
00:10:46,160 --> 00:10:47,839
diverse especially in their

280
00:10:47,839 --> 00:10:50,240
configuration

281
00:10:50,240 --> 00:10:53,440
but what makes it not so good

282
00:10:53,440 --> 00:10:55,760
is that all of this data is stored on

283
00:10:55,760 --> 00:10:56,720
the server side

284
00:10:56,720 --> 00:10:59,839
and it's not easy to get this data and

285
00:10:59,839 --> 00:11:00,959
it's especially not

286
00:11:00,959 --> 00:11:04,399
quick to get this data the servers try

287
00:11:04,399 --> 00:11:05,519
to filter

288
00:11:05,519 --> 00:11:08,079
connections which they consider

289
00:11:08,079 --> 00:11:09,279
legitimate

290
00:11:09,279 --> 00:11:11,040
and so they try to filter out

291
00:11:11,040 --> 00:11:14,240
researchers and automations

292
00:11:14,240 --> 00:11:16,399
and there's also a manual element to it

293
00:11:16,399 --> 00:11:17,279
so sometimes

294
00:11:17,279 --> 00:11:20,399
to observe the full attack the attacker

295
00:11:20,399 --> 00:11:21,680
needs manual

296
00:11:21,680 --> 00:11:24,240
interaction so we would actually need to

297
00:11:24,240 --> 00:11:25,040
fool a

298
00:11:25,040 --> 00:11:28,640
human to get the data that we need

299
00:11:28,640 --> 00:11:30,079
the biggest problem with it is still

300
00:11:30,079 --> 00:11:32,399
that it's very slow and we

301
00:11:32,399 --> 00:11:34,480
need need an active server for it so we

302
00:11:34,480 --> 00:11:35,519
can't do this

303
00:11:35,519 --> 00:11:38,240
retroactively for thousands of samples

304
00:11:38,240 --> 00:11:40,640
quickly

305
00:11:40,959 --> 00:11:44,320
uh so a probably better idea is to do it

306
00:11:44,320 --> 00:11:45,279
based on

307
00:11:45,279 --> 00:11:47,920
the changes inside in the panel that are

308
00:11:47,920 --> 00:11:50,000
shown to the attacker for

309
00:11:50,000 --> 00:11:52,399
uh controlling and configuring their

310
00:11:52,399 --> 00:11:54,079
bots

311
00:11:54,079 --> 00:11:56,399
the reason it's good is that it's very

312
00:11:56,399 --> 00:11:58,639
user-facing so this is

313
00:11:58,639 --> 00:12:01,360
the most likely thing for the dev

314
00:12:01,360 --> 00:12:02,959
malware developers to develop

315
00:12:02,959 --> 00:12:06,719
to change uh compared to the leaks

316
00:12:06,800 --> 00:12:10,160
and what's even better is that a panel

317
00:12:10,160 --> 00:12:11,600
change

318
00:12:11,600 --> 00:12:13,680
translates to a communication protocol

319
00:12:13,680 --> 00:12:14,639
change

320
00:12:14,639 --> 00:12:17,120
so we can observe it on the client side

321
00:12:17,120 --> 00:12:17,920
without

322
00:12:17,920 --> 00:12:19,920
interacting with the panel at all or

323
00:12:19,920 --> 00:12:21,760
even the panel being online

324
00:12:21,760 --> 00:12:24,160
we can just observe this communication

325
00:12:24,160 --> 00:12:24,880
protocol

326
00:12:24,880 --> 00:12:29,279
on the client side so at first

327
00:12:29,279 --> 00:12:31,440
the network beacon looks completely

328
00:12:31,440 --> 00:12:32,320
useless

329
00:12:32,320 --> 00:12:35,440
it's just a bunch of encrypted and

330
00:12:35,440 --> 00:12:39,680
encoded data and it's also using a

331
00:12:39,680 --> 00:12:42,160
user agent which is runtime generated

332
00:12:42,160 --> 00:12:44,560
but luckily if we dive deeper

333
00:12:44,560 --> 00:12:48,240
we find that before the encryption these

334
00:12:48,240 --> 00:12:50,320
network beacons were generated from

335
00:12:50,320 --> 00:12:51,680
format

336
00:12:51,680 --> 00:12:54,959
strings inside the model and these

337
00:12:54,959 --> 00:12:55,920
format strings

338
00:12:55,920 --> 00:12:58,399
have minor differences compared to the

339
00:12:58,399 --> 00:13:01,040
leaked code

340
00:13:01,839 --> 00:13:05,040
so let's get those format strings

341
00:13:05,040 --> 00:13:07,680
we can either decrypt them from the bss

342
00:13:07,680 --> 00:13:09,519
section where the model stores them

343
00:13:09,519 --> 00:13:11,760
but it's easier to just observe them at

344
00:13:11,760 --> 00:13:12,880
runtime

345
00:13:12,880 --> 00:13:16,160
so these small format strings

346
00:13:16,160 --> 00:13:19,120
are all new compared to the original

347
00:13:19,120 --> 00:13:20,959
source code and there's many many more

348
00:13:20,959 --> 00:13:24,000
depending on the malware variant

349
00:13:24,000 --> 00:13:26,880
so what we do is that we extract all of

350
00:13:26,880 --> 00:13:28,000
these format strings

351
00:13:28,000 --> 00:13:31,360
for the thousands of samples we

352
00:13:31,360 --> 00:13:33,920
clean it up then cluster it and then we

353
00:13:33,920 --> 00:13:37,279
can generate error rules from it

354
00:13:37,440 --> 00:13:39,600
and these jira rules look somewhat

355
00:13:39,600 --> 00:13:41,120
different from the errors that we're

356
00:13:41,120 --> 00:13:42,480
used to

357
00:13:42,480 --> 00:13:45,760
so most error rules are used for

358
00:13:45,760 --> 00:13:49,279
detection so they only contain positive

359
00:13:49,279 --> 00:13:50,800
parameters that should match

360
00:13:50,800 --> 00:13:54,000
or very few negative parameters that are

361
00:13:54,000 --> 00:13:54,639
used

362
00:13:54,639 --> 00:13:58,000
to mitigate fbs but here

363
00:13:58,000 --> 00:14:02,399
they are mostly negative checks so uh

364
00:14:02,399 --> 00:14:04,880
format strings that should not be in

365
00:14:04,880 --> 00:14:06,160
this variant

366
00:14:06,160 --> 00:14:08,800
and there are also a few format strings

367
00:14:08,800 --> 00:14:10,320
that should be in this variant

368
00:14:10,320 --> 00:14:12,639
and this gives us some initial

369
00:14:12,639 --> 00:14:13,839
clustering

370
00:14:13,839 --> 00:14:15,760
for some variants this is all that is

371
00:14:15,760 --> 00:14:17,440
needed for them it's excellent

372
00:14:17,440 --> 00:14:20,320
such as because we see some parameters

373
00:14:20,320 --> 00:14:23,920
that are only used by one variant

374
00:14:23,920 --> 00:14:27,360
but it also happens that

375
00:14:27,440 --> 00:14:29,440
that something such as the uptime gets

376
00:14:29,440 --> 00:14:30,480
adapted

377
00:14:30,480 --> 00:14:33,920
by an adder variant or or more

378
00:14:33,920 --> 00:14:36,320
probably a better example would be tor

379
00:14:36,320 --> 00:14:37,279
tor was

380
00:14:37,279 --> 00:14:40,880
used by one variant called dreambot but

381
00:14:40,880 --> 00:14:42,480
it was later adopted

382
00:14:42,480 --> 00:14:45,519
by other variants too so just using the

383
00:14:45,519 --> 00:14:46,480
format strings

384
00:14:46,480 --> 00:14:49,680
is not not always enough

385
00:14:49,680 --> 00:14:52,079
to detect the differences between the

386
00:14:52,079 --> 00:14:54,560
variants

387
00:14:54,720 --> 00:14:56,399
so if we go deeper we arrive at

388
00:14:56,399 --> 00:14:58,079
configuration instruction

389
00:14:58,079 --> 00:15:00,240
which is what we need it's the most work

390
00:15:00,240 --> 00:15:01,920
but it gives the most

391
00:15:01,920 --> 00:15:05,680
best results so there's a bunch of good

392
00:15:05,680 --> 00:15:07,120
data that we can get from

393
00:15:07,120 --> 00:15:10,240
configuration extraction we can get the

394
00:15:10,240 --> 00:15:13,760
encryption keys so

395
00:15:13,760 --> 00:15:17,680
it uses two types of encryptions

396
00:15:17,680 --> 00:15:20,959
rsa and serpent rsa

397
00:15:20,959 --> 00:15:24,800
is used for signing signing requests and

398
00:15:24,800 --> 00:15:27,920
signing files inside embedded inside the

399
00:15:27,920 --> 00:15:28,800
mower

400
00:15:28,800 --> 00:15:32,160
and serpent is used for

401
00:15:32,160 --> 00:15:35,279
symmetric encryption this is the

402
00:15:35,279 --> 00:15:38,839
only time i've ever seen serpent serpent

403
00:15:38,839 --> 00:15:41,920
is an encryption protocol that is not

404
00:15:41,920 --> 00:15:43,839
really used anymore it was

405
00:15:43,839 --> 00:15:46,959
considered to be the encryption

406
00:15:46,959 --> 00:15:50,480
algorithm for aes but it got second

407
00:15:50,480 --> 00:15:51,360
place

408
00:15:51,360 --> 00:15:54,639
so basically it's never used except for

409
00:15:54,639 --> 00:15:57,040
yourself

410
00:15:57,360 --> 00:16:00,000
a very valuable is in the clustering is

411
00:16:00,000 --> 00:16:01,759
the type of configuration

412
00:16:01,759 --> 00:16:03,839
so as we will see there's a bunch of

413
00:16:03,839 --> 00:16:05,600
types of configurations

414
00:16:05,600 --> 00:16:07,199
that we need to handle when extracting

415
00:16:07,199 --> 00:16:10,959
the mother extracting from the model

416
00:16:11,120 --> 00:16:13,680
there are also domains for commenting

417
00:16:13,680 --> 00:16:14,480
control

418
00:16:14,480 --> 00:16:17,600
which are sometimes useful sometimes not

419
00:16:17,600 --> 00:16:20,079
so useful

420
00:16:20,079 --> 00:16:23,040
and also sometimes useful are

421
00:16:23,040 --> 00:16:25,519
identifiers in the configuration

422
00:16:25,519 --> 00:16:28,000
the configuration contains key value

423
00:16:28,000 --> 00:16:29,680
pairs

424
00:16:29,680 --> 00:16:32,959
where the key is a random id

425
00:16:32,959 --> 00:16:36,000
or sometimes an id generated from

426
00:16:36,000 --> 00:16:39,920
a string with crc

427
00:16:39,920 --> 00:16:44,079
and the value is a string so

428
00:16:44,079 --> 00:16:46,639
it could be something like a domain to

429
00:16:46,639 --> 00:16:47,279
con

430
00:16:47,279 --> 00:16:50,079
to connect or configurations for the key

431
00:16:50,079 --> 00:16:52,800
logging module

432
00:16:54,240 --> 00:16:57,199
so your sniff stores its configuration

433
00:16:57,199 --> 00:16:57,680
in

434
00:16:57,680 --> 00:17:01,040
custom data structures which is named

435
00:17:01,040 --> 00:17:03,839
joined files so there are two of these

436
00:17:03,839 --> 00:17:05,520
embedded files that we actually care

437
00:17:05,520 --> 00:17:06,240
about

438
00:17:06,240 --> 00:17:08,959
one of them one of them is the embedded

439
00:17:08,959 --> 00:17:11,119
public key

440
00:17:11,119 --> 00:17:14,000
and the other one is the base

441
00:17:14,000 --> 00:17:15,520
configuration for the model that

442
00:17:15,520 --> 00:17:16,959
contains every other

443
00:17:16,959 --> 00:17:19,919
data that we care about including the

444
00:17:19,919 --> 00:17:22,160
serpent key

445
00:17:22,160 --> 00:17:25,599
so each of these files is represented

446
00:17:25,599 --> 00:17:27,679
with a metadata structure that we see on

447
00:17:27,679 --> 00:17:30,000
screen

448
00:17:31,120 --> 00:17:34,799
and over the years these have sometimes

449
00:17:34,799 --> 00:17:38,640
changed and different variants now have

450
00:17:38,640 --> 00:17:41,520
different metadata structures and even

451
00:17:41,520 --> 00:17:43,520
completely different ways of storing the

452
00:17:43,520 --> 00:17:44,799
configuration

453
00:17:44,799 --> 00:17:48,160
and mostly just uh reorganization and

454
00:17:48,160 --> 00:17:50,799
adding additional encryption on top of

455
00:17:50,799 --> 00:17:53,440
the original

456
00:17:53,679 --> 00:17:56,480
so if we start digging more into it we

457
00:17:56,480 --> 00:17:57,280
will find

458
00:17:57,280 --> 00:17:59,600
that we have to follow a bunch of either

459
00:17:59,600 --> 00:18:00,720
in the

460
00:18:00,720 --> 00:18:03,280
bunch of pointers to get to other

461
00:18:03,280 --> 00:18:04,320
structures

462
00:18:04,320 --> 00:18:06,640
then get to even more structures and

463
00:18:06,640 --> 00:18:08,160
then finally get to the

464
00:18:08,160 --> 00:18:11,520
strings that we want and we need to do

465
00:18:11,520 --> 00:18:11,919
the

466
00:18:11,919 --> 00:18:15,200
same for rsa keys for public keys

467
00:18:15,200 --> 00:18:18,160
when there is just a single xor for

468
00:18:18,160 --> 00:18:19,280
obfuscation

469
00:18:19,280 --> 00:18:22,799
so this base configuration

470
00:18:22,799 --> 00:18:26,840
is actually very simple to extract and

471
00:18:26,840 --> 00:18:29,280
understand but

472
00:18:29,280 --> 00:18:32,960
later it got much more complicated

473
00:18:32,960 --> 00:18:35,440
so first there was some a new type of

474
00:18:35,440 --> 00:18:37,200
obfuscation i did but that's not really

475
00:18:37,200 --> 00:18:38,080
the problem

476
00:18:38,080 --> 00:18:40,320
the possible problem is that there is

477
00:18:40,320 --> 00:18:41,360
now a proper

478
00:18:41,360 --> 00:18:44,320
encryption inside with a runtime

479
00:18:44,320 --> 00:18:45,919
generated key

480
00:18:45,919 --> 00:18:49,280
so extracting this runtime generated key

481
00:18:49,280 --> 00:18:53,679
could be tricky but to get this

482
00:18:53,679 --> 00:18:55,600
but if we have the random generated key

483
00:18:55,600 --> 00:18:57,120
we also

484
00:18:57,120 --> 00:18:59,760
got the rsa key just like before and for

485
00:18:59,760 --> 00:19:01,440
extracting the configuration

486
00:19:01,440 --> 00:19:03,440
for this variant we didn't need anything

487
00:19:03,440 --> 00:19:07,200
else just this runtime generated key

488
00:19:07,200 --> 00:19:11,039
this gets uh different

489
00:19:11,039 --> 00:19:13,440
for the last type of configuration that

490
00:19:13,440 --> 00:19:14,799
is commonly used

491
00:19:14,799 --> 00:19:17,520
here the structure has been moved around

492
00:19:17,520 --> 00:19:19,440
much more

493
00:19:19,440 --> 00:19:22,640
but the biggest change is that we

494
00:19:22,640 --> 00:19:24,559
it's still one of the biggest changes is

495
00:19:24,559 --> 00:19:25,760
that we need

496
00:19:25,760 --> 00:19:27,360
a different random generative serpent

497
00:19:27,360 --> 00:19:30,000
key so it's generated in a more complex

498
00:19:30,000 --> 00:19:30,400
way

499
00:19:30,400 --> 00:19:33,679
that is harder to extract

500
00:19:33,679 --> 00:19:35,840
but the biggest difference is that we

501
00:19:35,840 --> 00:19:38,240
actually need this rsa key

502
00:19:38,240 --> 00:19:40,720
to extract the rest of the data because

503
00:19:40,720 --> 00:19:42,960
the rsa key

504
00:19:42,960 --> 00:19:46,480
encrypts another yet another

505
00:19:46,480 --> 00:19:49,200
internal key which is used to decrypt

506
00:19:49,200 --> 00:19:50,720
the configuration

507
00:19:50,720 --> 00:19:53,440
the point here is just that since the

508
00:19:53,440 --> 00:19:54,080
original

509
00:19:54,080 --> 00:19:56,640
uh original structure it got way more

510
00:19:56,640 --> 00:19:57,360
complex

511
00:19:57,360 --> 00:20:00,080
but in the same way so there's no major

512
00:20:00,080 --> 00:20:00,799
uh

513
00:20:00,799 --> 00:20:03,440
changes in a way that they reorganize

514
00:20:03,440 --> 00:20:04,240
everything

515
00:20:04,240 --> 00:20:07,280
they just moved things around and

516
00:20:07,280 --> 00:20:10,480
added even more questionable

517
00:20:10,480 --> 00:20:13,840
encryption on top of the already

518
00:20:13,840 --> 00:20:17,039
questionable encryptions

519
00:20:17,039 --> 00:20:20,080
so all of these configuration types have

520
00:20:20,080 --> 00:20:20,720
further

521
00:20:20,720 --> 00:20:24,080
sub-variants where sometimes

522
00:20:24,080 --> 00:20:26,960
some parameters are moved around even

523
00:20:26,960 --> 00:20:27,360
more

524
00:20:27,360 --> 00:20:30,559
or some key lengths are different but

525
00:20:30,559 --> 00:20:33,679
otherwise they are the same so after a

526
00:20:33,679 --> 00:20:34,720
lot of reversing

527
00:20:34,720 --> 00:20:37,919
uh i can now automatically extract and

528
00:20:37,919 --> 00:20:39,360
parse the configuration for the

529
00:20:39,360 --> 00:20:41,679
thousands of samples that i have

530
00:20:41,679 --> 00:20:44,559
and we finally have all the data that we

531
00:20:44,559 --> 00:20:45,120
need

532
00:20:45,120 --> 00:20:49,840
to provide the correct classification

533
00:20:49,919 --> 00:20:51,919
now the problem that i'm facing is that

534
00:20:51,919 --> 00:20:53,360
i have too much

535
00:20:53,360 --> 00:20:56,559
data to to establish correct

536
00:20:56,559 --> 00:20:58,559
classification so i need to pick

537
00:20:58,559 --> 00:21:01,679
the ones that i want to use and i need

538
00:21:01,679 --> 00:21:02,159
to

539
00:21:02,159 --> 00:21:04,880
cluster these samples in a way that they

540
00:21:04,880 --> 00:21:07,120
actually represent real-world clusters

541
00:21:07,120 --> 00:21:09,039
real-world variants and not just

542
00:21:09,039 --> 00:21:12,240
arbitrarily defined clusters

543
00:21:12,240 --> 00:21:14,159
so to validate if my clustering is

544
00:21:14,159 --> 00:21:15,280
correct i

545
00:21:15,280 --> 00:21:18,720
like to use graphs so

546
00:21:18,720 --> 00:21:22,000
here we see 4000 samples

547
00:21:22,000 --> 00:21:25,440
each one is a node on the graph and

548
00:21:25,440 --> 00:21:27,840
each sample is connected to its

549
00:21:27,840 --> 00:21:29,440
configuration type

550
00:21:29,440 --> 00:21:31,679
and all of these cryptographic keys that

551
00:21:31,679 --> 00:21:34,159
i extracted from them

552
00:21:34,159 --> 00:21:36,000
so the first thing that we notice on

553
00:21:36,000 --> 00:21:37,200
this graph is

554
00:21:37,200 --> 00:21:38,720
well it's probably that it looks very

555
00:21:38,720 --> 00:21:40,559
nice but the

556
00:21:40,559 --> 00:21:44,559
second thing that we notice is that

557
00:21:44,559 --> 00:21:47,200
there are two completely different

558
00:21:47,200 --> 00:21:49,440
distinct clusters that are not connected

559
00:21:49,440 --> 00:21:50,400
to each other

560
00:21:50,400 --> 00:21:54,559
in any way so that means that the two

561
00:21:54,559 --> 00:21:55,280
clusters

562
00:21:55,280 --> 00:21:57,520
do not share any cryptographic keys at

563
00:21:57,520 --> 00:21:58,400
all

564
00:21:58,400 --> 00:22:01,919
not even the internal ones

565
00:22:01,919 --> 00:22:03,600
this is interesting because on the

566
00:22:03,600 --> 00:22:05,280
surface these samples are

567
00:22:05,280 --> 00:22:08,080
extremely similar but based on the

568
00:22:08,080 --> 00:22:09,200
extracted data

569
00:22:09,200 --> 00:22:12,480
they it's trivial to draw the lines

570
00:22:12,480 --> 00:22:14,640
they look like completely different

571
00:22:14,640 --> 00:22:17,360
molar families

572
00:22:17,360 --> 00:22:20,640
the left the left cluster is what's

573
00:22:20,640 --> 00:22:23,120
centered around one of the major

574
00:22:23,120 --> 00:22:24,240
configuration types

575
00:22:24,240 --> 00:22:27,520
the most complex one this currently has

576
00:22:27,520 --> 00:22:29,039
the most samples in the past

577
00:22:29,039 --> 00:22:33,919
six months and it's often referred to as

578
00:22:33,919 --> 00:22:36,640
to by the industry as either version

579
00:22:36,640 --> 00:22:38,000
three of isfp

580
00:22:38,000 --> 00:22:42,320
or rm3 of isfp

581
00:22:42,320 --> 00:22:45,760
so it's perhaps different it's perhaps

582
00:22:45,760 --> 00:22:48,960
difficult to see the samples themselves

583
00:22:48,960 --> 00:22:51,840
on this graph so let's remove everything

584
00:22:51,840 --> 00:22:53,600
by the samples

585
00:22:53,600 --> 00:22:57,440
and here and here we can see only the

586
00:22:57,440 --> 00:22:58,400
samples

587
00:22:58,400 --> 00:23:00,720
and

588
00:23:01,440 --> 00:23:03,520
if two samples are close to each other

589
00:23:03,520 --> 00:23:04,799
on this graph

590
00:23:04,799 --> 00:23:07,760
that means that they share at least some

591
00:23:07,760 --> 00:23:10,640
of the cryptographic keys

592
00:23:10,640 --> 00:23:14,320
and we can also zoom into

593
00:23:14,320 --> 00:23:17,520
the graph to to see

594
00:23:17,520 --> 00:23:19,360
why they are so close to each other so

595
00:23:19,360 --> 00:23:21,039
what makes them similar

596
00:23:21,039 --> 00:23:24,240
and here i found that the most reliable

597
00:23:24,240 --> 00:23:24,720
way

598
00:23:24,720 --> 00:23:26,960
to find variants within this version

599
00:23:26,960 --> 00:23:29,360
three is by the key that is used

600
00:23:29,360 --> 00:23:31,760
internally within the model

601
00:23:31,760 --> 00:23:34,000
so that that allows me to find different

602
00:23:34,000 --> 00:23:35,440
software versions

603
00:23:35,440 --> 00:23:38,159
and the other keys which are which can

604
00:23:38,159 --> 00:23:40,880
actually be configured by the user

605
00:23:40,880 --> 00:23:43,200
can be used sometimes to find different

606
00:23:43,200 --> 00:23:45,279
attackers

607
00:23:45,279 --> 00:23:47,200
or different users of this malware

608
00:23:47,200 --> 00:23:49,600
service

609
00:23:49,600 --> 00:23:52,880
uh this works also somewhat for this

610
00:23:52,880 --> 00:23:55,919
right cluster uh but it's still too

611
00:23:55,919 --> 00:23:56,480
messy

612
00:23:56,480 --> 00:23:58,559
it needs more parameters to define the

613
00:23:58,559 --> 00:24:01,120
clusters more clearly

614
00:24:01,120 --> 00:24:03,840
so here that's what i did i added even

615
00:24:03,840 --> 00:24:06,080
more parameters

616
00:24:06,080 --> 00:24:09,200
i added the top-level domains of the

617
00:24:09,200 --> 00:24:10,159
connected

618
00:24:10,159 --> 00:24:13,200
servers and i also added the

619
00:24:13,200 --> 00:24:16,640
configuration ids so

620
00:24:16,640 --> 00:24:19,760
the configuration ids roughly give give

621
00:24:19,760 --> 00:24:21,919
me the

622
00:24:21,919 --> 00:24:24,080
possible features of the malware that

623
00:24:24,080 --> 00:24:25,919
the attacker can configure for

624
00:24:25,919 --> 00:24:26,640
themselves

625
00:24:26,640 --> 00:24:29,279
and because these configuration ids also

626
00:24:29,279 --> 00:24:30,240
change

627
00:24:30,240 --> 00:24:33,840
it also separates the variants somewhat

628
00:24:33,840 --> 00:24:36,240
so at first glance this graph looks even

629
00:24:36,240 --> 00:24:37,039
messier

630
00:24:37,039 --> 00:24:38,640
but if we remove everything by the

631
00:24:38,640 --> 00:24:41,200
samples then we see that now we have two

632
00:24:41,200 --> 00:24:44,799
nice and separate uh clusters and the

633
00:24:44,799 --> 00:24:47,520
top one is often referred to by the

634
00:24:47,520 --> 00:24:48,960
industry as iap

635
00:24:48,960 --> 00:24:52,320
for the panel that it uses and the

636
00:24:52,320 --> 00:24:54,320
lower one is sometimes referred to as

637
00:24:54,320 --> 00:24:56,720
goes yet

638
00:24:56,720 --> 00:24:59,520
because it's they are all centered

639
00:24:59,520 --> 00:25:00,080
around

640
00:25:00,080 --> 00:25:03,120
the either the dot at

641
00:25:03,120 --> 00:25:06,159
domain so they are connecting to the dot

642
00:25:06,159 --> 00:25:06,559
add

643
00:25:06,559 --> 00:25:10,480
domains or they are using

644
00:25:10,480 --> 00:25:14,320
encryption keys which which were

645
00:25:14,320 --> 00:25:16,480
used by samples which connected to this

646
00:25:16,480 --> 00:25:17,760
domain

647
00:25:17,760 --> 00:25:22,080
we have five minutes okay thank you

648
00:25:22,080 --> 00:25:25,039
so if we go further back in time and we

649
00:25:25,039 --> 00:25:26,320
add samples from

650
00:25:26,320 --> 00:25:28,880
the past which happened before six

651
00:25:28,880 --> 00:25:29,919
months

652
00:25:29,919 --> 00:25:32,240
then we see that there used to be

653
00:25:32,240 --> 00:25:34,080
another cluster which now completely

654
00:25:34,080 --> 00:25:35,120
disappeared

655
00:25:35,120 --> 00:25:38,400
it was uh around the dot

656
00:25:38,400 --> 00:25:42,000
only on tld so it used tor this cluster

657
00:25:42,000 --> 00:25:44,159
of samples was called dreambot

658
00:25:44,159 --> 00:25:46,720
and it disappeared a couple of months

659
00:25:46,720 --> 00:25:48,960
ago

660
00:25:49,600 --> 00:25:52,320
so now we can observe the some of the

661
00:25:52,320 --> 00:25:53,440
long-term effects of

662
00:25:53,440 --> 00:25:56,159
mobile source source code leak through

663
00:25:56,159 --> 00:25:56,559
this

664
00:25:56,559 --> 00:25:59,760
uh through this case study

665
00:25:59,760 --> 00:26:02,320
so what you observed is that there are

666
00:26:02,320 --> 00:26:02,799
still

667
00:26:02,799 --> 00:26:05,600
multiple active services that are using

668
00:26:05,600 --> 00:26:07,679
variants of the leak source code

669
00:26:07,679 --> 00:26:10,159
but these variants are slowly getting

670
00:26:10,159 --> 00:26:10,880
replaced

671
00:26:10,880 --> 00:26:14,640
by uh more modern marvel such as at the

672
00:26:14,640 --> 00:26:17,679
as the case was with dreambot but even

673
00:26:17,679 --> 00:26:18,799
after five years

674
00:26:18,799 --> 00:26:21,679
uh multiple variants of the malware are

675
00:26:21,679 --> 00:26:25,760
still going strong as separate services

676
00:26:25,760 --> 00:26:28,320
so when looking for changes since the

677
00:26:28,320 --> 00:26:29,440
original version

678
00:26:29,440 --> 00:26:31,600
we see that the defining properties have

679
00:26:31,600 --> 00:26:32,720
amplified

680
00:26:32,720 --> 00:26:35,120
so the core feature has remained it's

681
00:26:35,120 --> 00:26:36,480
still

682
00:26:36,480 --> 00:26:38,960
it's still mostly used for steaming

683
00:26:38,960 --> 00:26:40,960
banking data

684
00:26:40,960 --> 00:26:44,000
but we also observe a generalization so

685
00:26:44,000 --> 00:26:47,440
now it's used in a more generic way

686
00:26:47,440 --> 00:26:51,600
to deliver secondary pieces of malware

687
00:26:51,600 --> 00:26:56,080
and we also observed that internally

688
00:26:56,080 --> 00:26:58,720
but internally just more of the same so

689
00:26:58,720 --> 00:26:59,440
in the

690
00:26:59,440 --> 00:27:02,000
league source code the configuration was

691
00:27:02,000 --> 00:27:02,559
stored

692
00:27:02,559 --> 00:27:05,600
in a complex and hard to parse way

693
00:27:05,600 --> 00:27:08,159
and since then it got even more complex

694
00:27:08,159 --> 00:27:10,000
and even more difficult to parse but

695
00:27:10,000 --> 00:27:10,559
still not

696
00:27:10,559 --> 00:27:14,159
impossible so if you want to detect it

697
00:27:14,159 --> 00:27:16,640
we should detect it wide so we should

698
00:27:16,640 --> 00:27:17,760
target

699
00:27:17,760 --> 00:27:20,080
by the data detection the core behavior

700
00:27:20,080 --> 00:27:21,760
with your sniff these are browser

701
00:27:21,760 --> 00:27:22,320
attacks

702
00:27:22,320 --> 00:27:25,840
and fire stealing and if you want to

703
00:27:25,840 --> 00:27:28,159
track this mother then we should do the

704
00:27:28,159 --> 00:27:30,000
opposite we should not focus on the core

705
00:27:30,000 --> 00:27:30,880
behavior

706
00:27:30,880 --> 00:27:33,520
but instead focus on everything else so

707
00:27:33,520 --> 00:27:34,000
focus

708
00:27:34,000 --> 00:27:37,120
on the changes which are introduced

709
00:27:37,120 --> 00:27:40,720
by the mobile developers for their users

710
00:27:40,720 --> 00:27:43,120
and have this translate into minor code

711
00:27:43,120 --> 00:27:43,840
changes

712
00:27:43,840 --> 00:27:46,840
or even better minor configuration

713
00:27:46,840 --> 00:27:48,799
changes

714
00:27:48,799 --> 00:27:51,679
so there has already been a lot of good

715
00:27:51,679 --> 00:27:53,279
quality research about this topic this

716
00:27:53,279 --> 00:27:55,279
is a well researched piece of mother so

717
00:27:55,279 --> 00:27:57,919
there's a lot of

718
00:27:57,919 --> 00:28:01,760
a lot of work that i can recommend

719
00:28:01,760 --> 00:28:04,080
slides will be online and i recommend

720
00:28:04,080 --> 00:28:05,760
you check out

721
00:28:05,760 --> 00:28:07,360
these pieces of research if you are

722
00:28:07,360 --> 00:28:09,360
interested in it more

723
00:28:09,360 --> 00:28:12,159
so thank you for listening and i hope

724
00:28:12,159 --> 00:28:12,720
you have

725
00:28:12,720 --> 00:28:16,240
time for some questions yes we have a

726
00:28:16,240 --> 00:28:16,960
little time

727
00:28:16,960 --> 00:28:20,559
um we have a question what about those

728
00:28:20,559 --> 00:28:22,480
samples that are not sharing any

729
00:28:22,480 --> 00:28:24,799
similarities with the others

730
00:28:24,799 --> 00:28:28,320
uh and they are separated in the graph

731
00:28:28,320 --> 00:28:32,000
are they crafted by someone who has

732
00:28:32,000 --> 00:28:35,919
completely rewritten the original

733
00:28:35,919 --> 00:28:37,919
okay that's a good question so even on

734
00:28:37,919 --> 00:28:40,240
this final graph there are some separate

735
00:28:40,240 --> 00:28:40,799
samples

736
00:28:40,799 --> 00:28:43,200
that didn't fit any of these big

737
00:28:43,200 --> 00:28:45,440
classifications that i meant

738
00:28:45,440 --> 00:28:50,720
so these

739
00:28:50,960 --> 00:28:54,960
cannot really cannot use any of the

740
00:28:54,960 --> 00:28:57,200
public keys because they would need the

741
00:28:57,200 --> 00:28:59,039
private key for it

742
00:28:59,039 --> 00:29:02,559
so on this graph they appear as

743
00:29:02,559 --> 00:29:06,240
outliers on the on the lower sections

744
00:29:06,240 --> 00:29:09,520
on this graph or in the outskirts

745
00:29:09,520 --> 00:29:12,880
of the lower one these are the ones

746
00:29:12,880 --> 00:29:14,000
which are using

747
00:29:14,000 --> 00:29:16,559
one of the old config structures but are

748
00:29:16,559 --> 00:29:17,279
not

749
00:29:17,279 --> 00:29:20,480
sharing uh enough

750
00:29:20,480 --> 00:29:23,200
uh cryptographic keys with the others to

751
00:29:23,200 --> 00:29:24,840
make them

752
00:29:24,840 --> 00:29:27,440
similar

753
00:29:27,440 --> 00:29:29,039
these are very rare though so if

754
00:29:29,039 --> 00:29:31,279
somebody starts a new project

755
00:29:31,279 --> 00:29:34,480
it's likely that they turn to some newer

756
00:29:34,480 --> 00:29:35,919
leaked code not something that's five

757
00:29:35,919 --> 00:29:40,799
years old

758
00:29:40,799 --> 00:29:44,080
all right um i think we're exactly on

759
00:29:44,080 --> 00:29:44,640
time

760
00:29:44,640 --> 00:29:48,320
and um so i'd like to

761
00:29:48,320 --> 00:29:50,720
thank you very much for an interesting

762
00:29:50,720 --> 00:29:52,159
talk

763
00:29:52,159 --> 00:29:54,960
and i think there's a short break before

764
00:29:54,960 --> 00:29:56,000
uh keynote

765
00:29:56,000 --> 00:29:59,120
if that's correct josh

766
00:29:59,120 --> 00:30:00,399
that is correct there'll be about a

767
00:30:00,399 --> 00:30:02,240
20-minute break and then you can

768
00:30:02,240 --> 00:30:06,360
log back in for the final keynote today

769
00:30:06,360 --> 00:30:09,360
right

