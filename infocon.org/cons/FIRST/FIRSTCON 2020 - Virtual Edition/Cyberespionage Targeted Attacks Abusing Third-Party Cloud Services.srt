1
00:00:01,120 --> 00:00:03,280
hi i'm daniel i work at trend micro

2
00:00:03,280 --> 00:00:05,120
and with my colleague jerome we are

3
00:00:05,120 --> 00:00:06,560
going to show you the result of our

4
00:00:06,560 --> 00:00:08,720
investigation related to cloud services

5
00:00:08,720 --> 00:00:11,519
being abused in targeted attacks so this

6
00:00:11,519 --> 00:00:12,719
is the outline of our talk

7
00:00:12,719 --> 00:00:14,799
after a quick introduction we will

8
00:00:14,799 --> 00:00:16,160
discuss two different approach

9
00:00:16,160 --> 00:00:17,920
of malware infrastructure one being

10
00:00:17,920 --> 00:00:19,279
custom and the other one being

11
00:00:19,279 --> 00:00:20,880
cloud-based

12
00:00:20,880 --> 00:00:23,600
and then we will show you different apt

13
00:00:23,600 --> 00:00:24,720
cases

14
00:00:24,720 --> 00:00:27,359
that use the second approach and for

15
00:00:27,359 --> 00:00:28,320
each of these

16
00:00:28,320 --> 00:00:31,119
cases we will discuss first how the

17
00:00:31,119 --> 00:00:31,760
malware

18
00:00:31,760 --> 00:00:34,960
works and then the advantages and

19
00:00:34,960 --> 00:00:35,840
disadvantages

20
00:00:35,840 --> 00:00:38,079
from a tackle perspective then we'll

21
00:00:38,079 --> 00:00:40,239
conclude this talk

22
00:00:40,239 --> 00:00:42,160
so cloud services abuse is not something

23
00:00:42,160 --> 00:00:43,920
new it has already been researched in

24
00:00:43,920 --> 00:00:44,800
the past

25
00:00:44,800 --> 00:00:47,200
but in our case we will focus on cloud

26
00:00:47,200 --> 00:00:49,440
abuse in the context of targeted attacks

27
00:00:49,440 --> 00:00:51,360
and all of these examples are cases that

28
00:00:51,360 --> 00:00:53,199
we investigated ourselves

29
00:00:53,199 --> 00:00:56,399
the goal of this talk is to show in the

30
00:00:56,399 --> 00:00:57,120
wild

31
00:00:57,120 --> 00:00:59,680
cases of cloud abuser but more

32
00:00:59,680 --> 00:01:00,640
importantly

33
00:01:00,640 --> 00:01:02,960
how we as defender can leverage this

34
00:01:02,960 --> 00:01:04,559
setup to our advantage so

35
00:01:04,559 --> 00:01:06,640
multiple approaches that will allow us

36
00:01:06,640 --> 00:01:10,000
to get more information

37
00:01:10,400 --> 00:01:12,640
but let's first discuss the different

38
00:01:12,640 --> 00:01:14,799
kinds of malware infrastructure

39
00:01:14,799 --> 00:01:17,040
the more common one is the custom

40
00:01:17,040 --> 00:01:17,840
approach

41
00:01:17,840 --> 00:01:20,240
where the protector will do all by

42
00:01:20,240 --> 00:01:20,880
himself

43
00:01:20,880 --> 00:01:24,400
which means develop and maintain all

44
00:01:24,400 --> 00:01:27,600
the servers on the code

45
00:01:27,600 --> 00:01:30,720
so this has a lot of financial costs the

46
00:01:30,720 --> 00:01:33,439
tradactor needs to rent a web server pay

47
00:01:33,439 --> 00:01:35,040
for domain name data storage and

48
00:01:35,040 --> 00:01:36,400
bandwidth

49
00:01:36,400 --> 00:01:39,600
and it's a very time consuming because

50
00:01:39,600 --> 00:01:41,759
the malware developer needs to think

51
00:01:41,759 --> 00:01:43,520
about the communication protocol so

52
00:01:43,520 --> 00:01:45,119
design it

53
00:01:45,119 --> 00:01:47,840
write the actual code and test it to

54
00:01:47,840 --> 00:01:48,799
make it work

55
00:01:48,799 --> 00:01:51,200
on the other side administrate install

56
00:01:51,200 --> 00:01:53,119
and administrate a

57
00:01:53,119 --> 00:01:56,159
command control server

58
00:01:56,399 --> 00:01:59,600
it has also many disadvantages because

59
00:01:59,600 --> 00:02:00,399
uh

60
00:02:00,399 --> 00:02:02,640
from our perspective i mean it's easier

61
00:02:02,640 --> 00:02:04,799
to monitor on block

62
00:02:04,799 --> 00:02:07,840
domain name which is used only by a

63
00:02:07,840 --> 00:02:08,959
malware

64
00:02:08,959 --> 00:02:12,319
so which has no legitimate use it can

65
00:02:12,319 --> 00:02:13,920
also be sinkholed

66
00:02:13,920 --> 00:02:17,440
or seized by law enforcement as the

67
00:02:17,440 --> 00:02:20,480
protocol has been designed by the

68
00:02:20,480 --> 00:02:23,280
malware developer himself there is a

69
00:02:23,280 --> 00:02:25,520
higher probability of flows

70
00:02:25,520 --> 00:02:27,040
and it's also difficult to assess the

71
00:02:27,040 --> 00:02:29,200
reliability in real conditions before

72
00:02:29,200 --> 00:02:32,720
actually running the malware

73
00:02:32,720 --> 00:02:34,720
the advantage of this approach is that

74
00:02:34,720 --> 00:02:36,560
you actually can

75
00:02:36,560 --> 00:02:38,080
implement whatever you want you are not

76
00:02:38,080 --> 00:02:40,319
limited by any anything as you are

77
00:02:40,319 --> 00:02:42,560
the one designing and writing all the

78
00:02:42,560 --> 00:02:44,640
code

79
00:02:44,640 --> 00:02:46,239
the other approach which is the one

80
00:02:46,239 --> 00:02:47,760
which will

81
00:02:47,760 --> 00:02:49,760
interest us more today is the cloud

82
00:02:49,760 --> 00:02:51,920
malware infrastructure approach

83
00:02:51,920 --> 00:02:54,000
so the advantages are that it's

84
00:02:54,000 --> 00:02:56,000
developed maintained by a third party

85
00:02:56,000 --> 00:02:56,480
that

86
00:02:56,480 --> 00:02:59,440
actually know this domain because it's

87
00:02:59,440 --> 00:03:00,319
their

88
00:03:00,319 --> 00:03:04,480
work it's cheaper even sometimes it's

89
00:03:04,480 --> 00:03:05,840
free

90
00:03:05,840 --> 00:03:07,760
and those services will usually provide

91
00:03:07,760 --> 00:03:09,040
an api which is

92
00:03:09,040 --> 00:03:11,760
convenient to use it's very reliable

93
00:03:11,760 --> 00:03:12,640
because it's

94
00:03:12,640 --> 00:03:16,080
operated by people that need variability

95
00:03:16,080 --> 00:03:18,239
and it's harder to block or monitor or

96
00:03:18,239 --> 00:03:19,680
seize because

97
00:03:19,680 --> 00:03:22,800
uh it has many legitimate uses actually

98
00:03:22,800 --> 00:03:23,840
most of the usage

99
00:03:23,840 --> 00:03:26,640
of this cloud services are are

100
00:03:26,640 --> 00:03:28,720
legitimate

101
00:03:28,720 --> 00:03:30,480
the the disadvantage that you have is

102
00:03:30,480 --> 00:03:33,040
that you are constrained by the features

103
00:03:33,040 --> 00:03:35,120
that the api for example will allow you

104
00:03:35,120 --> 00:03:36,080
to do

105
00:03:36,080 --> 00:03:39,440
but we will see that later

106
00:03:39,440 --> 00:03:41,360
so let's discuss now some apt cases that

107
00:03:41,360 --> 00:03:42,480
we investigated

108
00:03:42,480 --> 00:03:45,360
that use this approach the first one is

109
00:03:45,360 --> 00:03:46,720
named patchwork the group is in

110
00:03:46,720 --> 00:03:48,000
patchwork and this is the

111
00:03:48,000 --> 00:03:50,000
countries that are targeted by this

112
00:03:50,000 --> 00:03:51,519
group

113
00:03:51,519 --> 00:03:54,799
so the the but there's a backdoor named

114
00:03:54,799 --> 00:03:57,439
news which actually makes both of these

115
00:03:57,439 --> 00:03:59,280
approaches

116
00:03:59,280 --> 00:04:01,680
first the the malware will connect to a

117
00:04:01,680 --> 00:04:03,120
cloud provider

118
00:04:03,120 --> 00:04:06,400
issuing a get request to retrieve

119
00:04:06,400 --> 00:04:09,120
actually uh the command control server

120
00:04:09,120 --> 00:04:09,599
in an

121
00:04:09,599 --> 00:04:13,760
encrypted form so the malware will then

122
00:04:13,760 --> 00:04:15,599
connect to the

123
00:04:15,599 --> 00:04:18,160
cnc so this is like the standard

124
00:04:18,160 --> 00:04:20,560
approach

125
00:04:20,639 --> 00:04:23,280
this is how it works on the back end so

126
00:04:23,280 --> 00:04:23,680
the

127
00:04:23,680 --> 00:04:27,680
on the malware side you can see that the

128
00:04:27,680 --> 00:04:29,199
the address of the cloud service

129
00:04:29,199 --> 00:04:31,360
provider is

130
00:04:31,360 --> 00:04:34,560
obfuscated and

131
00:04:34,560 --> 00:04:36,960
if you go to this cloud service provider

132
00:04:36,960 --> 00:04:38,160
you will see that

133
00:04:38,160 --> 00:04:42,080
the the cnc is is also obfuscated

134
00:04:42,080 --> 00:04:45,199
so you can see this kind of base64

135
00:04:45,199 --> 00:04:49,280
string in all these cases

136
00:04:49,280 --> 00:04:53,759
and we reverse the the algorithm

137
00:04:53,759 --> 00:04:58,080
and it's very simple actually

138
00:04:58,080 --> 00:05:00,880
some some versions more recent versions

139
00:05:00,880 --> 00:05:02,080
under the

140
00:05:02,080 --> 00:05:05,280
blowfish encryption layer

141
00:05:05,280 --> 00:05:07,600
but still once you decode it you get the

142
00:05:07,600 --> 00:05:09,280
the address of the command control

143
00:05:09,280 --> 00:05:10,479
server

144
00:05:10,479 --> 00:05:14,160
which is usually a php script so

145
00:05:14,160 --> 00:05:16,240
this approach actually on the attacker

146
00:05:16,240 --> 00:05:18,240
side or defender site sorry what we can

147
00:05:18,240 --> 00:05:19,360
do is go

148
00:05:19,360 --> 00:05:22,000
to this github that hosts the encrypted

149
00:05:22,000 --> 00:05:23,120
cnc

150
00:05:23,120 --> 00:05:26,560
and you can find the history of the

151
00:05:26,560 --> 00:05:30,400
github repository and that's what we did

152
00:05:30,400 --> 00:05:31,919
so for one sample

153
00:05:31,919 --> 00:05:35,199
we actually found we we found multiple

154
00:05:35,199 --> 00:05:37,919
command control servers so we can see

155
00:05:37,919 --> 00:05:38,720
here that

156
00:05:38,720 --> 00:05:42,240
on the march 6 the cnc server was this

157
00:05:42,240 --> 00:05:43,440
one this domain name

158
00:05:43,440 --> 00:05:46,160
but then two days later it changed i

159
00:05:46,160 --> 00:05:47,759
don't know why twice but it changed to

160
00:05:47,759 --> 00:05:48,080
this

161
00:05:48,080 --> 00:05:51,199
ip address so with one single sample you

162
00:05:51,199 --> 00:05:52,960
can get multiple

163
00:05:52,960 --> 00:05:56,479
common control servers but it's even

164
00:05:56,479 --> 00:05:58,479
better than that you can actually go and

165
00:05:58,479 --> 00:06:00,800
use the github search features

166
00:06:00,800 --> 00:06:03,039
which is what we did and we found with

167
00:06:03,039 --> 00:06:06,000
only one sample 64 different

168
00:06:06,000 --> 00:06:08,800
common control servers so this is very

169
00:06:08,800 --> 00:06:11,440
interesting because

170
00:06:11,440 --> 00:06:13,440
from a defender perspective with only

171
00:06:13,440 --> 00:06:14,560
one sample you get

172
00:06:14,560 --> 00:06:17,919
all the attacker infrastructure

173
00:06:18,000 --> 00:06:20,639
another example uh name operation drb

174
00:06:20,639 --> 00:06:21,600
control

175
00:06:21,600 --> 00:06:24,960
targeted southeast asia and so

176
00:06:24,960 --> 00:06:26,720
there is a muller family we named type

177
00:06:26,720 --> 00:06:28,880
one so in this case

178
00:06:28,880 --> 00:06:32,960
there is again a standard cnc channel

179
00:06:32,960 --> 00:06:34,960
where the malware operator will send its

180
00:06:34,960 --> 00:06:36,880
commands but there is a secondary

181
00:06:36,880 --> 00:06:38,240
actually channel

182
00:06:38,240 --> 00:06:41,680
where the malware will send information

183
00:06:41,680 --> 00:06:42,800
about the computer

184
00:06:42,800 --> 00:06:47,440
in fact computer to dropbox and then

185
00:06:47,440 --> 00:06:50,160
it will look for a file named bin dot

186
00:06:50,160 --> 00:06:52,160
asc

187
00:06:52,160 --> 00:06:55,199
on if that file is found it will load it

188
00:06:55,199 --> 00:06:56,080
in memory

189
00:06:56,080 --> 00:06:58,960
and run it so it's like another backdoor

190
00:06:58,960 --> 00:07:01,120
so what that the protector does

191
00:07:01,120 --> 00:07:04,400
is that it will look at the different uh

192
00:07:04,400 --> 00:07:06,639
infected victims and if one of them

193
00:07:06,639 --> 00:07:07,840
looks interesting

194
00:07:07,840 --> 00:07:10,800
then it will drop this file for only for

195
00:07:10,800 --> 00:07:12,800
the selected targets

196
00:07:12,800 --> 00:07:15,840
so how does this second

197
00:07:15,840 --> 00:07:18,400
file works so this is a backdoor using

198
00:07:18,400 --> 00:07:20,160
only dropbox actually

199
00:07:20,160 --> 00:07:22,720
so first from time to time it will write

200
00:07:22,720 --> 00:07:24,000
a single file

201
00:07:24,000 --> 00:07:26,560
like a heartbeat file and then the

202
00:07:26,560 --> 00:07:27,440
attacker can

203
00:07:27,440 --> 00:07:31,280
put commands in a specific file name

204
00:07:31,280 --> 00:07:34,400
the malware will read that file execute

205
00:07:34,400 --> 00:07:35,919
the commands and write the results

206
00:07:35,919 --> 00:07:38,880
in another file name that the tradactor

207
00:07:38,880 --> 00:07:39,680
can retrieve

208
00:07:39,680 --> 00:07:43,680
on read so as you can see in this case

209
00:07:43,680 --> 00:07:46,960
the only common control is

210
00:07:46,960 --> 00:07:51,120
dropbox there is no standard cnc channel

211
00:07:51,120 --> 00:07:53,039
this is how it looks like on the code

212
00:07:53,039 --> 00:07:55,199
side so you can see there is an

213
00:07:55,199 --> 00:07:58,879
api key which is then used to

214
00:07:58,879 --> 00:08:03,520
upload and download some some stuff

215
00:08:04,319 --> 00:08:06,879
so what we did is that with the dropbox

216
00:08:06,879 --> 00:08:07,840
api

217
00:08:07,840 --> 00:08:11,440
we were able to list the different

218
00:08:11,440 --> 00:08:14,479
folders that were in that repository and

219
00:08:14,479 --> 00:08:16,639
download them

220
00:08:16,639 --> 00:08:18,639
just by looking at these are features

221
00:08:18,639 --> 00:08:19,759
that are

222
00:08:19,759 --> 00:08:22,800
taken from the dropbox api so you can

223
00:08:22,800 --> 00:08:24,240
see you can configure

224
00:08:24,240 --> 00:08:27,919
multiple stuff there so it's very

225
00:08:27,919 --> 00:08:30,560
um easy and convenient to write write

226
00:08:30,560 --> 00:08:33,519
this kind of script

227
00:08:33,519 --> 00:08:35,839
and what we found in that dropbox

228
00:08:35,839 --> 00:08:38,479
repository are post exploitation tools

229
00:08:38,479 --> 00:08:40,719
what were the commands executed by the

230
00:08:40,719 --> 00:08:42,080
attacker

231
00:08:42,080 --> 00:08:45,839
some victims so this allowed also to

232
00:08:45,839 --> 00:08:47,839
know more about the attacker's interest

233
00:08:47,839 --> 00:08:49,519
because we could see what kind of files

234
00:08:49,519 --> 00:08:51,600
the attacker

235
00:08:51,600 --> 00:08:55,279
exfiltrated and also we could find some

236
00:08:55,279 --> 00:08:56,959
new commander control servers

237
00:08:56,959 --> 00:09:00,240
in on the the dropbox repository so this

238
00:09:00,240 --> 00:09:00,800
was

239
00:09:00,800 --> 00:09:02,959
very interesting and those are findings

240
00:09:02,959 --> 00:09:06,080
that we could have not made otherwise

241
00:09:06,080 --> 00:09:08,800
this for example is a summary of our

242
00:09:08,800 --> 00:09:10,800
findings on the left you can see

243
00:09:10,800 --> 00:09:12,880
the commands that were more most used by

244
00:09:12,880 --> 00:09:14,240
the attacker

245
00:09:14,240 --> 00:09:17,040
and on the right the the top 10 commands

246
00:09:17,040 --> 00:09:17,680
that were

247
00:09:17,680 --> 00:09:20,959
issued through cmd.exe so you can see

248
00:09:20,959 --> 00:09:22,480
that the protector

249
00:09:22,480 --> 00:09:24,560
first wants to know where he is actually

250
00:09:24,560 --> 00:09:25,760
so it will

251
00:09:25,760 --> 00:09:27,839
gather information about the the target

252
00:09:27,839 --> 00:09:30,240
hosts

253
00:09:30,240 --> 00:09:32,959
let's discuss now uh another attacker

254
00:09:32,959 --> 00:09:34,839
targeting mainly pakistan a name

255
00:09:34,839 --> 00:09:36,399
confucius

256
00:09:36,399 --> 00:09:38,959
so in this case there is a file stealer

257
00:09:38,959 --> 00:09:40,320
that's named pcloud

258
00:09:40,320 --> 00:09:43,519
it uses the picloud is a also a

259
00:09:43,519 --> 00:09:46,320
cloud service provider which provides an

260
00:09:46,320 --> 00:09:48,080
api so this stealer

261
00:09:48,080 --> 00:09:50,240
actually looks for different file

262
00:09:50,240 --> 00:09:52,160
extensions on the

263
00:09:52,160 --> 00:09:55,440
victim workstation and it will

264
00:09:55,440 --> 00:10:00,160
uh send them to the the cloud repository

265
00:10:00,160 --> 00:10:02,079
so in this case you can see there is

266
00:10:02,079 --> 00:10:04,240
also an api

267
00:10:04,240 --> 00:10:06,560
but the the in this case there is not an

268
00:10:06,560 --> 00:10:07,440
api key

269
00:10:07,440 --> 00:10:10,720
to connect to to the cloud but you need

270
00:10:10,720 --> 00:10:14,240
credentials so an email and password

271
00:10:14,240 --> 00:10:18,160
and when we reverse the malware sample

272
00:10:18,160 --> 00:10:19,680
we could find actually those credentials

273
00:10:19,680 --> 00:10:22,000
hardcoded there

274
00:10:22,000 --> 00:10:25,360
so what we did was we went to the

275
00:10:25,360 --> 00:10:28,959
cloud service we connect to it and here

276
00:10:28,959 --> 00:10:31,600
uh difference here is a an interesting

277
00:10:31,600 --> 00:10:32,160
feature

278
00:10:32,160 --> 00:10:34,320
is the restore function so even if the

279
00:10:34,320 --> 00:10:35,600
attacker deletes

280
00:10:35,600 --> 00:10:38,880
the files you can restore them and

281
00:10:38,880 --> 00:10:41,600
something interesting here and that some

282
00:10:41,600 --> 00:10:43,200
attackers do

283
00:10:43,200 --> 00:10:46,079
that they actually infected their own

284
00:10:46,079 --> 00:10:47,120
machine so they

285
00:10:47,120 --> 00:10:49,519
they tried their malware in their own

286
00:10:49,519 --> 00:10:50,320
machine

287
00:10:50,320 --> 00:10:53,600
and so some files were actuated to pick

288
00:10:53,600 --> 00:10:55,760
cloud from the attacker's machine

289
00:10:55,760 --> 00:10:58,320
and we found this kind of information so

290
00:10:58,320 --> 00:10:59,760
this is we can see here that the

291
00:10:59,760 --> 00:11:00,560
attacker

292
00:11:00,560 --> 00:11:02,399
on the left column you will see the

293
00:11:02,399 --> 00:11:04,240
names that the attacker himself

294
00:11:04,240 --> 00:11:07,200
gives to the his own tools and you can

295
00:11:07,200 --> 00:11:07,680
see that

296
00:11:07,680 --> 00:11:09,760
the attacker will try them against

297
00:11:09,760 --> 00:11:10,800
multiple

298
00:11:10,800 --> 00:11:14,000
heavy vendors and this is another

299
00:11:14,000 --> 00:11:16,640
interesting file that we found which is

300
00:11:16,640 --> 00:11:17,040
like

301
00:11:17,040 --> 00:11:20,320
uh shows some victims that connected to

302
00:11:20,320 --> 00:11:23,519
a cnc server and here you can see that

303
00:11:23,519 --> 00:11:24,720
the protector will

304
00:11:24,720 --> 00:11:27,120
actually closely look at those

305
00:11:27,120 --> 00:11:28,160
connections

306
00:11:28,160 --> 00:11:30,800
and based on the ip address the attacker

307
00:11:30,800 --> 00:11:31,360
noted

308
00:11:31,360 --> 00:11:33,200
there is one indian here among all of

309
00:11:33,200 --> 00:11:35,600
these pakistanis victims

310
00:11:35,600 --> 00:11:37,519
so also this gives information that the

311
00:11:37,519 --> 00:11:39,120
transactor

312
00:11:39,120 --> 00:11:43,760
carefully looks at the the victims

313
00:11:43,760 --> 00:11:45,600
now i will let jeremiah talk to you

314
00:11:45,600 --> 00:11:47,200
about another

315
00:11:47,200 --> 00:11:51,279
backdoor also from confucius we will

316
00:11:51,279 --> 00:11:52,240
talk about

317
00:11:52,240 --> 00:11:55,040
twitty chat which is in this case

318
00:11:55,040 --> 00:11:56,079
android

319
00:11:56,079 --> 00:11:58,880
chat application it's back door and

320
00:11:58,880 --> 00:11:59,600
again

321
00:11:59,600 --> 00:12:02,800
it uses mixed approach so first it

322
00:12:02,800 --> 00:12:03,920
registers

323
00:12:03,920 --> 00:12:07,040
to standard cnc server

324
00:12:07,040 --> 00:12:09,600
it sends commands and one of these

325
00:12:09,600 --> 00:12:10,560
commands is

326
00:12:10,560 --> 00:12:13,839
updating aws credentials

327
00:12:13,839 --> 00:12:15,519
and these credentials are used for

328
00:12:15,519 --> 00:12:19,200
uploading storm files to aws

329
00:12:19,200 --> 00:12:22,399
smaller pieces of information like sms

330
00:12:22,399 --> 00:12:23,200
contacts or

331
00:12:23,200 --> 00:12:25,040
call logs are uploaded to the

332
00:12:25,040 --> 00:12:28,399
traditional cnc server

333
00:12:28,399 --> 00:12:31,360
so for this purpose we need two keys aws

334
00:12:31,360 --> 00:12:33,120
key

335
00:12:33,120 --> 00:12:37,760
and access key and secret key

336
00:12:37,760 --> 00:12:40,720
and they are uploaded through google

337
00:12:40,720 --> 00:12:41,920
cloud messaging or

338
00:12:41,920 --> 00:12:45,519
firebase cloud messaging so by simply

339
00:12:45,519 --> 00:12:47,360
reverse engineering the malware

340
00:12:47,360 --> 00:12:51,279
we cannot discover these keys

341
00:12:51,279 --> 00:12:54,800
and we didn't have them well when

342
00:12:54,800 --> 00:12:58,160
analyzing this malware this piece of

343
00:12:58,160 --> 00:12:59,600
code shows

344
00:12:59,600 --> 00:13:03,200
the message receiver from google cloud

345
00:13:03,200 --> 00:13:05,120
or firebase

346
00:13:05,120 --> 00:13:08,399
and code below is the piece of code for

347
00:13:08,399 --> 00:13:11,519
putting object request which uploads the

348
00:13:11,519 --> 00:13:12,639
new object

349
00:13:12,639 --> 00:13:16,399
to amazon s3 bucket

350
00:13:17,120 --> 00:13:20,160
even though we did not have

351
00:13:20,160 --> 00:13:23,120
access to the cloud service we still

352
00:13:23,120 --> 00:13:24,720
found access

353
00:13:24,720 --> 00:13:27,040
to the server itself to the traditional

354
00:13:27,040 --> 00:13:28,480
cnc server itself

355
00:13:28,480 --> 00:13:32,079
and in this in this server we have seen

356
00:13:32,079 --> 00:13:33,680
running several services

357
00:13:33,680 --> 00:13:36,320
so you can see the service for file

358
00:13:36,320 --> 00:13:37,360
structured backup

359
00:13:37,360 --> 00:13:41,600
audio service sms call logs

360
00:13:41,600 --> 00:13:45,120
call log requests and so on

361
00:13:45,120 --> 00:13:47,519
and again in this case operators were

362
00:13:47,519 --> 00:13:51,279
testing malware on their own devices

363
00:13:51,279 --> 00:13:54,639
and we have seen this kind of screenshot

364
00:13:54,639 --> 00:13:57,120
there was like mobile number and this

365
00:13:57,120 --> 00:13:57,839
mobile

366
00:13:57,839 --> 00:14:02,079
number helped us to find some person in

367
00:14:02,079 --> 00:14:04,240
social media

368
00:14:04,240 --> 00:14:07,440
so at least we can see that in this case

369
00:14:07,440 --> 00:14:09,760
the threat actor is interested in

370
00:14:09,760 --> 00:14:10,880
someone

371
00:14:10,880 --> 00:14:13,680
working in army or army related because

372
00:14:13,680 --> 00:14:16,480
you can see that this person

373
00:14:16,480 --> 00:14:21,360
works ex works at pakistan air force

374
00:14:21,360 --> 00:14:23,120
let's continue with another very

375
00:14:23,120 --> 00:14:24,720
interesting trajectory

376
00:14:24,720 --> 00:14:27,600
it's called muddy water it's based in

377
00:14:27,600 --> 00:14:28,480
middle east

378
00:14:28,480 --> 00:14:30,079
and it mainly targets countries in

379
00:14:30,079 --> 00:14:32,079
middle east

380
00:14:32,079 --> 00:14:35,199
first malware we analyzed

381
00:14:35,199 --> 00:14:38,880
was a mobile application which uses

382
00:14:38,880 --> 00:14:42,079
telegram for exfiltration so again

383
00:14:42,079 --> 00:14:44,320
the beginning is similar to the previous

384
00:14:44,320 --> 00:14:46,720
cases the registration and

385
00:14:46,720 --> 00:14:48,880
receiving commands from traditional cnc

386
00:14:48,880 --> 00:14:50,079
server

387
00:14:50,079 --> 00:14:53,040
however storm files are uploaded to

388
00:14:53,040 --> 00:14:55,839
telegram channel

389
00:14:55,839 --> 00:14:58,880
in the screenshot app there is the code

390
00:14:58,880 --> 00:15:02,800
responsible for for creating the request

391
00:15:02,800 --> 00:15:05,720
to the telegram channel so you can see

392
00:15:05,720 --> 00:15:07,199
api.telegram.org

393
00:15:07,199 --> 00:15:10,240
followed by token followed by method

394
00:15:10,240 --> 00:15:10,800
name

395
00:15:10,800 --> 00:15:13,440
method name in this case is called send

396
00:15:13,440 --> 00:15:15,839
message

397
00:15:16,160 --> 00:15:17,839
this piece of code is called process

398
00:15:17,839 --> 00:15:19,600
command and you can see there are

399
00:15:19,600 --> 00:15:21,040
several cases

400
00:15:21,040 --> 00:15:23,839
in each case

401
00:15:24,240 --> 00:15:26,800
when it is run it does different

402
00:15:26,800 --> 00:15:29,360
functions you can see get system info

403
00:15:29,360 --> 00:15:33,040
get smart call log taking screenshots

404
00:15:33,040 --> 00:15:35,920
sending sms

405
00:15:37,279 --> 00:15:41,040
if mother operator for some reason

406
00:15:41,040 --> 00:15:43,120
loses the access to the traditional cnc

407
00:15:43,120 --> 00:15:45,120
server there is still

408
00:15:45,120 --> 00:15:48,560
one feature that once a day all data are

409
00:15:48,560 --> 00:15:50,079
collected

410
00:15:50,079 --> 00:15:52,800
from the infected mobile device and sent

411
00:15:52,800 --> 00:15:54,160
to telegram channel

412
00:15:54,160 --> 00:15:56,959
so you can see the screenshot above is

413
00:15:56,959 --> 00:15:57,759
the function

414
00:15:57,759 --> 00:16:00,480
which is activated once a day and code

415
00:16:00,480 --> 00:16:03,360
below is the list of all information

416
00:16:03,360 --> 00:16:05,759
the function name is sent all data so

417
00:16:05,759 --> 00:16:06,720
you can see which

418
00:16:06,720 --> 00:16:08,399
information is collected so there is

419
00:16:08,399 --> 00:16:09,839
system info

420
00:16:09,839 --> 00:16:12,639
contacts installed applications call

421
00:16:12,639 --> 00:16:15,759
logs and smss

422
00:16:16,320 --> 00:16:17,839
for telegram channel we then we can

423
00:16:17,839 --> 00:16:19,519
display some

424
00:16:19,519 --> 00:16:24,000
metadata about creator the username

425
00:16:24,000 --> 00:16:26,800
and also language used so in this case

426
00:16:26,800 --> 00:16:28,240
you can see language called

427
00:16:28,240 --> 00:16:32,320
fa which stands for farsi

428
00:16:32,320 --> 00:16:34,959
so this can give us a hint where the

429
00:16:34,959 --> 00:16:36,079
threat actor

430
00:16:36,079 --> 00:16:38,399
might be based but of course this

431
00:16:38,399 --> 00:16:41,519
information can be fake

432
00:16:41,519 --> 00:16:44,720
now let's move to the last and probably

433
00:16:44,720 --> 00:16:46,480
the most interesting

434
00:16:46,480 --> 00:16:49,279
threat actors we have recently analyzed

435
00:16:49,279 --> 00:16:51,360
it's called slap

436
00:16:51,360 --> 00:16:55,279
and it's targeting some victims

437
00:16:55,279 --> 00:16:58,800
with interests in north korean issues or

438
00:16:58,800 --> 00:17:00,480
in north korea

439
00:17:00,480 --> 00:17:03,279
so for slab we observed few versions so

440
00:17:03,279 --> 00:17:06,079
we start with version number one

441
00:17:06,079 --> 00:17:09,280
the name slap was given by

442
00:17:09,280 --> 00:17:12,640
by letters sl and ub so in the first

443
00:17:12,640 --> 00:17:13,199
version

444
00:17:13,199 --> 00:17:16,640
it used slack that's why sl and github

445
00:17:16,640 --> 00:17:20,079
it's like ub letter so first

446
00:17:20,079 --> 00:17:23,119
the malware sends request

447
00:17:23,119 --> 00:17:26,880
to gist github to get command

448
00:17:26,880 --> 00:17:29,600
command is then processed executed and

449
00:17:29,600 --> 00:17:32,000
the result is uploaded to slack

450
00:17:32,000 --> 00:17:35,360
and bigger files are exfiltrated

451
00:17:35,360 --> 00:17:38,480
to file that io service

452
00:17:38,480 --> 00:17:41,600
so we know that this version one

453
00:17:41,600 --> 00:17:44,720
is delivered via waterholing

454
00:17:44,720 --> 00:17:47,919
on websites related to north korea

455
00:17:47,919 --> 00:17:51,440
then when it reads to gist snippet

456
00:17:51,440 --> 00:17:53,559
it looks like this so there is list of

457
00:17:53,559 --> 00:17:55,440
self-explanatory commands

458
00:17:55,440 --> 00:17:59,600
like exec task list is listing

459
00:17:59,600 --> 00:18:02,080
currently running processes capture is

460
00:18:02,080 --> 00:18:04,000
for taking screenshot

461
00:18:04,000 --> 00:18:07,200
drive list is a list of disks

462
00:18:07,200 --> 00:18:09,679
and file lists this list of files in

463
00:18:09,679 --> 00:18:12,080
given directory

464
00:18:12,080 --> 00:18:13,520
you can see that there are like two

465
00:18:13,520 --> 00:18:15,440
symbols like carrot symbol

466
00:18:15,440 --> 00:18:18,320
and dollar symbol and they decide which

467
00:18:18,320 --> 00:18:18,960
commands

468
00:18:18,960 --> 00:18:21,440
are activated which are not so in this

469
00:18:21,440 --> 00:18:23,120
case only capture command

470
00:18:23,120 --> 00:18:25,918
is activated

471
00:18:26,400 --> 00:18:30,240
for slack we need a token and this token

472
00:18:30,240 --> 00:18:33,200
was split into several small strings

473
00:18:33,200 --> 00:18:33,919
which have been

474
00:18:33,919 --> 00:18:37,440
concatenated together

475
00:18:37,679 --> 00:18:40,480
as you can see in this screenshot taken

476
00:18:40,480 --> 00:18:42,080
directly from

477
00:18:42,080 --> 00:18:45,280
c-pass plus binary

478
00:18:45,520 --> 00:18:49,039
exfiltration to file io is

479
00:18:49,039 --> 00:18:51,440
also very useful for thread actors

480
00:18:51,440 --> 00:18:54,559
because the file gets uploaded

481
00:18:54,559 --> 00:18:57,600
then the link gets generated and they

482
00:18:57,600 --> 00:19:02,000
send the link to the select channel

483
00:19:02,000 --> 00:19:04,400
file io has like one feature when file

484
00:19:04,400 --> 00:19:05,520
is downloaded

485
00:19:05,520 --> 00:19:07,679
just once then it gets automatically

486
00:19:07,679 --> 00:19:09,120
deleted

487
00:19:09,120 --> 00:19:11,840
so

488
00:19:12,960 --> 00:19:15,919
this was version one but version one had

489
00:19:15,919 --> 00:19:17,360
some disadvantages

490
00:19:17,360 --> 00:19:20,480
and the biggest disadvantage was that

491
00:19:20,480 --> 00:19:23,600
the gist github

492
00:19:23,600 --> 00:19:27,600
file was shared between different

493
00:19:27,600 --> 00:19:28,480
victims

494
00:19:28,480 --> 00:19:30,799
so the list of commands have been

495
00:19:30,799 --> 00:19:32,240
executed

496
00:19:32,240 --> 00:19:35,360
by all the victims which is not very

497
00:19:35,360 --> 00:19:38,640
very practical solution so in version 2

498
00:19:38,640 --> 00:19:41,600
github was not used anymore instead of

499
00:19:41,600 --> 00:19:42,000
that

500
00:19:42,000 --> 00:19:45,280
they relied only on slack so they

501
00:19:45,280 --> 00:19:46,080
created

502
00:19:46,080 --> 00:19:48,880
select workspace in this workspace there

503
00:19:48,880 --> 00:19:49,440
was

504
00:19:49,440 --> 00:19:53,039
channel for each user named username

505
00:19:53,039 --> 00:19:56,320
minus computer name

506
00:19:56,320 --> 00:19:59,440
and then when a command needed to be

507
00:19:59,440 --> 00:20:00,240
executed

508
00:20:00,240 --> 00:20:02,400
it was created a message this message

509
00:20:02,400 --> 00:20:03,520
was pinned

510
00:20:03,520 --> 00:20:06,240
in the channel then infected machine

511
00:20:06,240 --> 00:20:07,360
reads the spin

512
00:20:07,360 --> 00:20:10,559
message executes it and

513
00:20:10,559 --> 00:20:14,320
writes the result of the of the

514
00:20:14,320 --> 00:20:17,520
executed command into their specific

515
00:20:17,520 --> 00:20:19,200
channel

516
00:20:19,200 --> 00:20:22,799
so again in schematics slack is for cnc

517
00:20:22,799 --> 00:20:24,400
communication

518
00:20:24,400 --> 00:20:27,919
for sending commands and

519
00:20:27,919 --> 00:20:31,039
sending results of executed commands

520
00:20:31,039 --> 00:20:35,200
file i o is used for exfiltrating

521
00:20:35,200 --> 00:20:37,679
bigger storm files and there is also

522
00:20:37,679 --> 00:20:38,640
like one more

523
00:20:38,640 --> 00:20:42,559
thing one more feature it's like

524
00:20:42,559 --> 00:20:44,799
pen dot io which is micro blogging

525
00:20:44,799 --> 00:20:45,760
service

526
00:20:45,760 --> 00:20:48,960
and this service is used for updating

527
00:20:48,960 --> 00:20:50,480
select tokens

528
00:20:50,480 --> 00:20:53,679
so if select accounts are reported

529
00:20:53,679 --> 00:20:57,760
and disabled then thread actor

530
00:20:57,760 --> 00:21:00,320
might publish new tokens here on this

531
00:21:00,320 --> 00:21:01,360
website

532
00:21:01,360 --> 00:21:03,600
and if this happens the malware finds

533
00:21:03,600 --> 00:21:04,960
these keywords like

534
00:21:04,960 --> 00:21:09,120
hello what and three exclamation marks

535
00:21:09,120 --> 00:21:11,600
parses the new tokens and update new

536
00:21:11,600 --> 00:21:14,080
tokens

537
00:21:14,840 --> 00:21:17,840
so in gist

538
00:21:17,840 --> 00:21:20,480
when we when we come back to version one

539
00:21:20,480 --> 00:21:22,960
so in gist we can see

540
00:21:22,960 --> 00:21:25,760
this history and history tells us which

541
00:21:25,760 --> 00:21:26,320
commands

542
00:21:26,320 --> 00:21:28,960
have been have been activated and when

543
00:21:28,960 --> 00:21:30,480
and also it gives us

544
00:21:30,480 --> 00:21:34,559
some overview like which files

545
00:21:34,559 --> 00:21:37,919
the operator might be interesting

546
00:21:37,919 --> 00:21:39,440
so in this case you can see that there

547
00:21:39,440 --> 00:21:41,919
is a software called

548
00:21:41,919 --> 00:21:45,840
plus board which is bbs bulletin

549
00:21:45,840 --> 00:21:49,520
board system used in korea

550
00:21:49,760 --> 00:21:52,640
again we have select api we have python

551
00:21:52,640 --> 00:21:53,679
libraries

552
00:21:53,679 --> 00:21:57,039
so we can import select client and if we

553
00:21:57,039 --> 00:21:58,320
know token

554
00:21:58,320 --> 00:22:01,520
we can call we can call functions like

555
00:22:01,520 --> 00:22:05,200
list list users list team information

556
00:22:05,200 --> 00:22:08,320
list channels show channels info show

557
00:22:08,320 --> 00:22:09,520
channels history

558
00:22:09,520 --> 00:22:12,080
which is the most interesting for us the

559
00:22:12,080 --> 00:22:13,280
channel's history

560
00:22:13,280 --> 00:22:17,120
is in json format and you can see

561
00:22:17,120 --> 00:22:19,440
the text attribute containing the

562
00:22:19,440 --> 00:22:21,679
commands executed by the

563
00:22:21,679 --> 00:22:24,720
mother operators

564
00:22:25,120 --> 00:22:29,039
also we can get links to screenshots

565
00:22:29,039 --> 00:22:31,919
which we can later download we can also

566
00:22:31,919 --> 00:22:32,559
display

567
00:22:32,559 --> 00:22:34,159
so this is like one example of the

568
00:22:34,159 --> 00:22:38,400
screenshot which we found

569
00:22:39,360 --> 00:22:42,960
you can see that there is some some text

570
00:22:42,960 --> 00:22:45,280
in in korean language so likely this

571
00:22:45,280 --> 00:22:46,960
victim

572
00:22:46,960 --> 00:22:50,400
was based in korea

573
00:22:52,559 --> 00:22:54,880
so after seeing all this after

574
00:22:54,880 --> 00:22:56,559
publishing our

575
00:22:56,559 --> 00:22:58,080
research what happens what's the

576
00:22:58,080 --> 00:23:00,159
attacker's reaction

577
00:23:00,159 --> 00:23:03,039
so in case of operation drb control we

578
00:23:03,039 --> 00:23:04,640
published the report

579
00:23:04,640 --> 00:23:08,960
in february 18th in march

580
00:23:08,960 --> 00:23:12,080
we found that type 1 payload

581
00:23:12,080 --> 00:23:15,440
had a new api key and also attacker

582
00:23:15,440 --> 00:23:17,919
changed the privilege

583
00:23:17,919 --> 00:23:20,400
to remove read permission so we couldn't

584
00:23:20,400 --> 00:23:22,159
read the content

585
00:23:22,159 --> 00:23:25,520
of the directory anymore therefore slap

586
00:23:25,520 --> 00:23:27,919
few weeks after publishing a report the

587
00:23:27,919 --> 00:23:29,280
attacker changed

588
00:23:29,280 --> 00:23:32,320
from slack to matromos which is

589
00:23:32,320 --> 00:23:35,679
similar but self-hosted slack

590
00:23:35,679 --> 00:23:38,960
alternative so they had no more problem

591
00:23:38,960 --> 00:23:43,840
with disabling slag tokens

592
00:23:43,840 --> 00:23:47,600
so now we are coming to the conclusion

593
00:23:47,600 --> 00:23:50,559
so the abusing cloud service providers

594
00:23:50,559 --> 00:23:51,600
is a worldwide

595
00:23:51,600 --> 00:23:54,320
trend as we have shown that there being

596
00:23:54,320 --> 00:23:54,799
different

597
00:23:54,799 --> 00:23:58,880
threat actors from all around the world

598
00:23:58,880 --> 00:24:00,559
these services can be used for different

599
00:24:00,559 --> 00:24:02,960
purposes they can

600
00:24:02,960 --> 00:24:06,159
be used for stalling stone data

601
00:24:06,159 --> 00:24:08,080
they can be used for sending and

602
00:24:08,080 --> 00:24:09,520
receiving commands

603
00:24:09,520 --> 00:24:12,320
they can be used for storing

604
00:24:12,320 --> 00:24:15,120
configuration

605
00:24:16,080 --> 00:24:18,559
it has many benefits not only for

606
00:24:18,559 --> 00:24:19,440
attackers

607
00:24:19,440 --> 00:24:22,720
but also for us defenders so we don't

608
00:24:22,720 --> 00:24:24,799
need to hack back

609
00:24:24,799 --> 00:24:27,760
we can just collect some information we

610
00:24:27,760 --> 00:24:28,240
can

611
00:24:28,240 --> 00:24:32,480
track attackers in a different way

612
00:24:32,480 --> 00:24:36,720
and in some cases a little bit easier

613
00:24:39,600 --> 00:24:41,919
so if you are interested in more about

614
00:24:41,919 --> 00:24:42,960
our research

615
00:24:42,960 --> 00:24:46,159
you can check some of these references

616
00:24:46,159 --> 00:24:47,919
these are the references of the white

617
00:24:47,919 --> 00:24:49,760
papers and blog posts

618
00:24:49,760 --> 00:24:52,960
we have done in the past

619
00:24:53,200 --> 00:24:56,559
thank you

