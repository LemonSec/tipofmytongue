1
00:00:10,719 --> 00:00:12,000
all right hi everybody

2
00:00:12,000 --> 00:00:14,719
welcome back last session before the

3
00:00:14,719 --> 00:00:17,600
closing remarks today so we made it

4
00:00:17,600 --> 00:00:19,760
a couple of quick reminders before we

5
00:00:19,760 --> 00:00:21,359
get started

6
00:00:21,359 --> 00:00:24,240
everybody is on mute if you are using

7
00:00:24,240 --> 00:00:26,160
the event app we encourage you to check

8
00:00:26,160 --> 00:00:27,519
into the sessions

9
00:00:27,519 --> 00:00:29,039
update your activities and be sure to

10
00:00:29,039 --> 00:00:31,840
complete the sessions survey at the end

11
00:00:31,840 --> 00:00:34,000
this session is tlp white and is being

12
00:00:34,000 --> 00:00:36,079
recorded recordings will be available

13
00:00:36,079 --> 00:00:38,480
within 24 hours via the app

14
00:00:38,480 --> 00:00:41,280
or the desktop mobile site i'd like to

15
00:00:41,280 --> 00:00:43,600
introduce you to your session moderator

16
00:00:43,600 --> 00:00:44,160
dr

17
00:00:44,160 --> 00:00:47,839
serge draws search

18
00:00:48,079 --> 00:00:50,640
thank you tracy and uh well welcome to

19
00:00:50,640 --> 00:00:51,360
this

20
00:00:51,360 --> 00:00:53,120
last session of today and of the

21
00:00:53,120 --> 00:00:54,879
conference in fact and and we all know

22
00:00:54,879 --> 00:00:55,520
it was a

23
00:00:55,520 --> 00:00:58,000
good dinner the best the dessert is

24
00:00:58,000 --> 00:00:59,760
always at the end so uh

25
00:00:59,760 --> 00:01:02,320
that's uh no reason to get out of it

26
00:01:02,320 --> 00:01:03,039
it's actually

27
00:01:03,039 --> 00:01:04,879
something we're looking forward it's my

28
00:01:04,879 --> 00:01:06,799
pleasure to introduce

29
00:01:06,799 --> 00:01:10,159
jose hernandez and patrick baris from

30
00:01:10,159 --> 00:01:11,600
splunk talking about

31
00:01:11,600 --> 00:01:13,520
how to improve and accelerate detection

32
00:01:13,520 --> 00:01:15,360
rule developments using continuous

33
00:01:15,360 --> 00:01:16,240
integration and

34
00:01:16,240 --> 00:01:18,799
continuous delivery delivery and before

35
00:01:18,799 --> 00:01:20,560
i hand over the floor

36
00:01:20,560 --> 00:01:23,520
i really ask you to add any questions

37
00:01:23,520 --> 00:01:25,439
you have to do q a

38
00:01:25,439 --> 00:01:28,080
we will have time for q a please use

39
00:01:28,080 --> 00:01:29,360
this opportunity

40
00:01:29,360 --> 00:01:32,320
i miss having said that the birth floor

41
00:01:32,320 --> 00:01:35,360
is yours thanks a lot

42
00:01:35,360 --> 00:01:38,159
thank you very much

43
00:01:38,720 --> 00:01:40,880
my name is patrick barres i'm a senior

44
00:01:40,880 --> 00:01:44,000
threat research engineer in splunk

45
00:01:44,000 --> 00:01:46,799
and i like to contribute to open source

46
00:01:46,799 --> 00:01:47,680
projects

47
00:01:47,680 --> 00:01:50,079
i'm the author of attack range i'm

48
00:01:50,079 --> 00:01:52,560
contributed to security content

49
00:01:52,560 --> 00:01:55,439
and even before i joined splunk uh one

50
00:01:55,439 --> 00:01:56,399
year ago

51
00:01:56,399 --> 00:01:59,840
i could i had i have uh other couples of

52
00:01:59,840 --> 00:02:02,000
open source projects if you want to

53
00:02:02,000 --> 00:02:03,200
follow me uh

54
00:02:03,200 --> 00:02:08,160
twitter at barrist underscore patrick

55
00:02:08,160 --> 00:02:10,399
and i'm jose hernandez uh senior manager

56
00:02:10,399 --> 00:02:12,480
here at threat research also splunk

57
00:02:12,480 --> 00:02:14,800
um co-founder of xanage which is now

58
00:02:14,800 --> 00:02:15,920
oracle's wife

59
00:02:15,920 --> 00:02:18,800
uh also ex-architect at uh prolexic

60
00:02:18,800 --> 00:02:20,480
which is now akamai

61
00:02:20,480 --> 00:02:23,280
long time splunker and also contributor

62
00:02:23,280 --> 00:02:25,040
you know open source projects

63
00:02:25,040 --> 00:02:28,000
uh and super excited to share with

64
00:02:28,000 --> 00:02:28,879
patrick uh

65
00:02:28,879 --> 00:02:29,840
some of the stuff we've been doing at

66
00:02:29,840 --> 00:02:32,160
splunk

67
00:02:33,599 --> 00:02:35,599
so before we jump in and just give you a

68
00:02:35,599 --> 00:02:37,519
little bit of a background of

69
00:02:37,519 --> 00:02:39,760
what our team does at splunk and again

70
00:02:39,760 --> 00:02:41,280
just a tldr

71
00:02:41,280 --> 00:02:44,160
is we focus on studying vulnerabilities

72
00:02:44,160 --> 00:02:46,319
actors and threats out there

73
00:02:46,319 --> 00:02:49,519
we then attempt to emulate that

74
00:02:49,519 --> 00:02:52,239
attack or whatever technique that an

75
00:02:52,239 --> 00:02:52,720
actor's

76
00:02:52,720 --> 00:02:55,440
invoking and generating data sets out of

77
00:02:55,440 --> 00:02:55,920
that

78
00:02:55,920 --> 00:02:58,400
to then build detections and as part of

79
00:02:58,400 --> 00:03:00,159
this process we tend to build tools to

80
00:03:00,159 --> 00:03:00,720
make our

81
00:03:00,720 --> 00:03:03,519
work a lot easier eg the attack range

82
00:03:03,519 --> 00:03:05,040
it's one of those tools that we built

83
00:03:05,040 --> 00:03:06,959
and we like to share these tools and our

84
00:03:06,959 --> 00:03:08,640
findings with the community that's this

85
00:03:08,640 --> 00:03:10,080
these are kind of one of the primary

86
00:03:10,080 --> 00:03:11,760
drivers or these are the primary drivers

87
00:03:11,760 --> 00:03:12,720
of our team

88
00:03:12,720 --> 00:03:18,319
and what we try to focus on um yeah

89
00:03:18,319 --> 00:03:20,080
i will focus on the first part and the

90
00:03:20,080 --> 00:03:21,440
first part will

91
00:03:21,440 --> 00:03:24,640
will focus on why detection

92
00:03:24,640 --> 00:03:27,440
development is hard i try to lay out all

93
00:03:27,440 --> 00:03:28,879
the challenges what we

94
00:03:28,879 --> 00:03:30,840
blue team have when we develop

95
00:03:30,840 --> 00:03:32,640
detections and

96
00:03:32,640 --> 00:03:35,599
sometimes also related to things with

97
00:03:35,599 --> 00:03:37,599
the tools

98
00:03:37,599 --> 00:03:40,080
let's get it started in order to

99
00:03:40,080 --> 00:03:41,920
understand it

100
00:03:41,920 --> 00:03:44,080
or to give a little bit more practical

101
00:03:44,080 --> 00:03:45,920
example i want to start with a very

102
00:03:45,920 --> 00:03:47,360
simple technique

103
00:03:47,360 --> 00:03:50,400
a very simple attack you can see here a

104
00:03:50,400 --> 00:03:51,760
credential dumping

105
00:03:51,760 --> 00:03:55,680
technique credential don't be focusing

106
00:03:55,680 --> 00:03:58,159
on dumping credentials to obtain

107
00:03:58,159 --> 00:04:01,200
logging and credential material

108
00:04:01,200 --> 00:04:04,000
which they can which they can use in the

109
00:04:04,000 --> 00:04:05,760
next stages of the attack

110
00:04:05,760 --> 00:04:08,720
for example for lateral movement can be

111
00:04:08,720 --> 00:04:11,439
either clear tags credentials or hashes

112
00:04:11,439 --> 00:04:13,360
in this example the attacker used a

113
00:04:13,360 --> 00:04:15,599
built-in tool called direct.exe

114
00:04:15,599 --> 00:04:18,160
to dump the security hive the security

115
00:04:18,160 --> 00:04:18,798
hive

116
00:04:18,798 --> 00:04:22,000
contains sensitive information when the

117
00:04:22,000 --> 00:04:23,199
attacker is doing it

118
00:04:23,199 --> 00:04:25,440
that will create a log file in this case

119
00:04:25,440 --> 00:04:26,240
you see a

120
00:04:26,240 --> 00:04:29,600
system log file suseman is an additional

121
00:04:29,600 --> 00:04:31,840
tool from sysinternals which you can

122
00:04:31,840 --> 00:04:32,720
install

123
00:04:32,720 --> 00:04:35,120
and it brings you better visibilities in

124
00:04:35,120 --> 00:04:37,759
your windows logs

125
00:04:37,759 --> 00:04:41,440
it contains like fields like image

126
00:04:41,440 --> 00:04:44,639
use command line and so on in this case

127
00:04:44,639 --> 00:04:46,080
we directly see what

128
00:04:46,080 --> 00:04:50,080
what was executed on the command line

129
00:04:50,160 --> 00:04:53,360
when we then have a theme uh deployed

130
00:04:53,360 --> 00:04:54,800
these kind of locks are getting

131
00:04:54,800 --> 00:04:57,520
forwarded to a scene

132
00:04:57,520 --> 00:04:59,360
it doesn't matter if you splunk or not

133
00:04:59,360 --> 00:05:01,280
all the tools are working the same

134
00:05:01,280 --> 00:05:04,400
in in this terms you see here the

135
00:05:04,400 --> 00:05:08,960
forwarded lock into the splunk system

136
00:05:09,120 --> 00:05:12,160
and then the next step is

137
00:05:12,160 --> 00:05:15,440
that the lock is getting passed

138
00:05:15,440 --> 00:05:18,400
that we have key value pairs in order

139
00:05:18,400 --> 00:05:19,600
that we can

140
00:05:19,600 --> 00:05:22,720
we can work um with the locks that we

141
00:05:22,720 --> 00:05:25,360
can write our detections

142
00:05:25,360 --> 00:05:27,759
this is in splunk it calls technical

143
00:05:27,759 --> 00:05:29,120
add-ons

144
00:05:29,120 --> 00:05:31,520
and this is normally not enough because

145
00:05:31,520 --> 00:05:33,199
when you would have like

146
00:05:33,199 --> 00:05:36,240
different logs you would have different

147
00:05:36,240 --> 00:05:39,759
naming of fields that's why

148
00:05:39,759 --> 00:05:42,639
scene vendors try to implement their own

149
00:05:42,639 --> 00:05:44,960
common information schema

150
00:05:44,960 --> 00:05:48,080
in splunk it's called common information

151
00:05:48,080 --> 00:05:49,039
model

152
00:05:49,039 --> 00:05:52,479
and that will then normalize

153
00:05:52,479 --> 00:05:56,400
the data here in this example

154
00:05:56,400 --> 00:05:58,880
you see like that command lies command

155
00:05:58,880 --> 00:06:01,039
line is mapped to process

156
00:06:01,039 --> 00:06:03,199
image is mapped to process name process

157
00:06:03,199 --> 00:06:04,800
id to process id

158
00:06:04,800 --> 00:06:07,280
from the data model processes and by

159
00:06:07,280 --> 00:06:08,000
doing that

160
00:06:08,000 --> 00:06:10,800
we can write detections for multiple

161
00:06:10,800 --> 00:06:12,400
products

162
00:06:12,400 --> 00:06:15,919
based on that normalized data format

163
00:06:15,919 --> 00:06:18,160
otherwise you would have a lot of issues

164
00:06:18,160 --> 00:06:20,240
for example network logs

165
00:06:20,240 --> 00:06:23,199
one one time the the name of the field

166
00:06:23,199 --> 00:06:24,080
would be

167
00:06:24,080 --> 00:06:27,280
soc underscore ipv sometimes it would be

168
00:06:27,280 --> 00:06:29,199
source ip uppercase

169
00:06:29,199 --> 00:06:31,520
without underscore and so on that's why

170
00:06:31,520 --> 00:06:33,199
a normalized

171
00:06:33,199 --> 00:06:37,680
normalized key value pairs are needed

172
00:06:37,680 --> 00:06:40,319
and then the next step is we can then

173
00:06:40,319 --> 00:06:42,400
use that normalized fields to write

174
00:06:42,400 --> 00:06:43,759
detections

175
00:06:43,759 --> 00:06:45,520
in this case it's not important that you

176
00:06:45,520 --> 00:06:47,120
know this

177
00:06:47,120 --> 00:06:49,680
query language or splunk or not in this

178
00:06:49,680 --> 00:06:50,960
case we have then

179
00:06:50,960 --> 00:06:54,319
using this data models and you see like

180
00:06:54,319 --> 00:06:57,120
the the part which is highlighted in red

181
00:06:57,120 --> 00:06:59,039
to make key value pairs to map

182
00:06:59,039 --> 00:07:01,599
on certain behaviors what the attacker

183
00:07:01,599 --> 00:07:02,080
did

184
00:07:02,080 --> 00:07:04,000
in this case we were able to detect the

185
00:07:04,000 --> 00:07:06,319
attack

186
00:07:08,720 --> 00:07:11,840
there and i also want to write talk a

187
00:07:11,840 --> 00:07:13,280
little bit about different types of

188
00:07:13,280 --> 00:07:14,479
detections

189
00:07:14,479 --> 00:07:16,560
because we often had a lot of have a lot

190
00:07:16,560 --> 00:07:18,639
of discussions about that

191
00:07:18,639 --> 00:07:20,560
and that's why uh i want to talk a

192
00:07:20,560 --> 00:07:22,319
little bit about it there exists

193
00:07:22,319 --> 00:07:23,520
two type of detection there are

194
00:07:23,520 --> 00:07:24,960
signature-based detections and

195
00:07:24,960 --> 00:07:26,880
anomaly-based detections

196
00:07:26,880 --> 00:07:28,960
the previous example was a typical

197
00:07:28,960 --> 00:07:31,280
example of a signature-based detections

198
00:07:31,280 --> 00:07:33,440
often and they signature-based

199
00:07:33,440 --> 00:07:35,599
detections are focusing on known

200
00:07:35,599 --> 00:07:38,639
threats another type of detections

201
00:07:38,639 --> 00:07:40,880
are normally based detections for

202
00:07:40,880 --> 00:07:42,720
example if your standard outgoing

203
00:07:42,720 --> 00:07:44,160
network traffic

204
00:07:44,160 --> 00:07:47,599
produces 100 megabyte a day and you have

205
00:07:47,599 --> 00:07:50,240
now a spike to 2 gigabytes a day

206
00:07:50,240 --> 00:07:52,240
then this can be catched by anomaly

207
00:07:52,240 --> 00:07:54,720
based detection

208
00:07:54,720 --> 00:07:56,319
in order to understand what is the

209
00:07:56,319 --> 00:07:58,000
advantage and disadvantages

210
00:07:58,000 --> 00:08:01,039
of both types of detections i have here

211
00:08:01,039 --> 00:08:01,680
done

212
00:08:01,680 --> 00:08:04,720
a detection accuracy diagram

213
00:08:04,720 --> 00:08:08,960
and this is called roc diagram

214
00:08:09,280 --> 00:08:11,599
the goal of our detection is um to be in

215
00:08:11,599 --> 00:08:13,120
the left top corner

216
00:08:13,120 --> 00:08:15,759
which means high true positive rate and

217
00:08:15,759 --> 00:08:19,280
low false positive rate

218
00:08:19,360 --> 00:08:21,440
when we now have a look to anomaly based

219
00:08:21,440 --> 00:08:23,280
attention signature based detection we

220
00:08:23,280 --> 00:08:24,479
can see that

221
00:08:24,479 --> 00:08:27,039
we can when we probably tune our

222
00:08:27,039 --> 00:08:29,039
detection signature based detections can

223
00:08:29,039 --> 00:08:30,000
have a very

224
00:08:30,000 --> 00:08:33,200
high true positive rate with a very low

225
00:08:33,200 --> 00:08:36,719
false positive rate for anomaly based

226
00:08:36,719 --> 00:08:37,839
detection

227
00:08:37,839 --> 00:08:41,919
this could be um also we can also reach

228
00:08:41,919 --> 00:08:45,040
a huge troop a big two positive rate

229
00:08:45,040 --> 00:08:48,240
but often there's also a certain

230
00:08:48,240 --> 00:08:50,720
amount of false pos false process in

231
00:08:50,720 --> 00:08:51,600
there

232
00:08:51,600 --> 00:08:54,000
for example in this case when with my

233
00:08:54,000 --> 00:08:55,680
previous example when

234
00:08:55,680 --> 00:08:58,640
one of a team lead uploaded two

235
00:08:58,640 --> 00:09:00,640
gigabytes of data because of the last

236
00:09:00,640 --> 00:09:02,320
christmas party

237
00:09:02,320 --> 00:09:04,160
this will raise alert in the stock

238
00:09:04,160 --> 00:09:06,240
because the average is like 100

239
00:09:06,240 --> 00:09:07,279
megabytes

240
00:09:07,279 --> 00:09:10,800
it's an anomaly but it's not a malicious

241
00:09:10,800 --> 00:09:14,399
uh behavior when we only see that

242
00:09:14,399 --> 00:09:16,320
diagram we would say yeah let's only go

243
00:09:16,320 --> 00:09:18,800
for signature-based detections

244
00:09:18,800 --> 00:09:21,760
but that is that is not true i want to

245
00:09:21,760 --> 00:09:23,360
show you now another diagram

246
00:09:23,360 --> 00:09:25,519
because why both detection types are

247
00:09:25,519 --> 00:09:28,080
necessary

248
00:09:28,080 --> 00:09:31,360
anomaly based detections can focus with

249
00:09:31,360 --> 00:09:33,920
some anomaly based attacks and can cover

250
00:09:33,920 --> 00:09:36,240
a lot of different malware

251
00:09:36,240 --> 00:09:38,880
they can cover a complete mario families

252
00:09:38,880 --> 00:09:40,640
with similar behavior

253
00:09:40,640 --> 00:09:43,760
with lower number of anomaly

254
00:09:43,760 --> 00:09:47,440
detections whereby signature-based

255
00:09:47,440 --> 00:09:48,640
attacks are normally

256
00:09:48,640 --> 00:09:50,399
very targeted when you saw a

257
00:09:50,399 --> 00:09:51,920
credentialed dumping attack

258
00:09:51,920 --> 00:09:55,279
that was one out of 20 30

259
00:09:55,279 --> 00:09:57,279
40 different ways of doing credential

260
00:09:57,279 --> 00:09:59,040
dumping and this was

261
00:09:59,040 --> 00:10:01,200
already very specialized and can only

262
00:10:01,200 --> 00:10:02,160
detect this

263
00:10:02,160 --> 00:10:04,959
certain way of doing potential jumping

264
00:10:04,959 --> 00:10:06,560
which means

265
00:10:06,560 --> 00:10:10,000
in terms of uh general

266
00:10:10,000 --> 00:10:12,640
in terms of availability or enabled

267
00:10:12,640 --> 00:10:14,880
capability of detecting

268
00:10:14,880 --> 00:10:17,200
more different kind of malware and

269
00:10:17,200 --> 00:10:19,200
normally based detections has advantage

270
00:10:19,200 --> 00:10:21,279
that's why we need both kind of

271
00:10:21,279 --> 00:10:25,120
detections in order to be successful

272
00:10:25,120 --> 00:10:27,200
i now want to talk about another topic

273
00:10:27,200 --> 00:10:29,519
detection depend dependencies

274
00:10:29,519 --> 00:10:31,519
often people think yeah we only write a

275
00:10:31,519 --> 00:10:33,600
detection everything is fine

276
00:10:33,600 --> 00:10:36,720
but we are depending on a lot of

277
00:10:36,720 --> 00:10:37,760
different other things

278
00:10:37,760 --> 00:10:40,399
are working correct for example if the

279
00:10:40,399 --> 00:10:43,120
windows settings are configured properly

280
00:10:43,120 --> 00:10:45,839
if there is changes that could break the

281
00:10:45,839 --> 00:10:46,480
logging

282
00:10:46,480 --> 00:10:48,880
could break our detection same with the

283
00:10:48,880 --> 00:10:50,240
system and config

284
00:10:50,240 --> 00:10:53,600
when we have an um good detection

285
00:10:53,600 --> 00:10:55,600
but the system on config is not tuned

286
00:10:55,600 --> 00:10:56,720
for the detection

287
00:10:56,720 --> 00:11:00,399
and the event is not generated

288
00:11:00,399 --> 00:11:02,320
because it's in a in a white list of the

289
00:11:02,320 --> 00:11:04,320
system config then our detection will

290
00:11:04,320 --> 00:11:05,360
not work

291
00:11:05,360 --> 00:11:07,839
when the theme changes the version

292
00:11:07,839 --> 00:11:09,360
changes and some

293
00:11:09,360 --> 00:11:12,240
important features change our detection

294
00:11:12,240 --> 00:11:14,079
could be not working anymore

295
00:11:14,079 --> 00:11:15,760
and the same for the technical add-ons

296
00:11:15,760 --> 00:11:17,680
which are the the

297
00:11:17,680 --> 00:11:19,760
the apps which are responsible for

298
00:11:19,760 --> 00:11:21,200
passing the

299
00:11:21,200 --> 00:11:23,680
key value pairs out of the locks this is

300
00:11:23,680 --> 00:11:24,640
also often

301
00:11:24,640 --> 00:11:27,360
uh changing and we need to make sure

302
00:11:27,360 --> 00:11:29,120
that um

303
00:11:29,120 --> 00:11:31,040
that our detection is working all the

304
00:11:31,040 --> 00:11:34,959
time and of course also data bonds

305
00:11:34,959 --> 00:11:37,279
let let me give you an example to to

306
00:11:37,279 --> 00:11:38,320
highlight that

307
00:11:38,320 --> 00:11:41,440
why we need to then test so often our

308
00:11:41,440 --> 00:11:42,320
detection

309
00:11:42,320 --> 00:11:44,720
to make it work for example we have 30

310
00:11:44,720 --> 00:11:46,320
detections for system

311
00:11:46,320 --> 00:11:48,800
when we have changes in windows we

312
00:11:48,800 --> 00:11:50,800
should test the detections

313
00:11:50,800 --> 00:11:53,440
if we've changed the assessment version

314
00:11:53,440 --> 00:11:55,279
system and configuration

315
00:11:55,279 --> 00:11:57,279
we need to change the detections and so

316
00:11:57,279 --> 00:11:58,800
on which means

317
00:11:58,800 --> 00:12:00,720
in the worst case when not everything

318
00:12:00,720 --> 00:12:02,399
happened here the changes at the same

319
00:12:02,399 --> 00:12:03,279
time

320
00:12:03,279 --> 00:12:07,040
we need to do a lot of testing

321
00:12:07,440 --> 00:12:09,920
and that's why we are here and talking

322
00:12:09,920 --> 00:12:11,360
about how to use ci

323
00:12:11,360 --> 00:12:14,560
cd a4 detection engineering because this

324
00:12:14,560 --> 00:12:16,480
process needs to be automated

325
00:12:16,480 --> 00:12:18,480
we need to be able to test the detection

326
00:12:18,480 --> 00:12:19,839
automatically

327
00:12:19,839 --> 00:12:21,760
all the time in order to ensure that

328
00:12:21,760 --> 00:12:24,079
they are still working

329
00:12:24,079 --> 00:12:26,560
but there's also different points like

330
00:12:26,560 --> 00:12:28,240
threat landscape

331
00:12:28,240 --> 00:12:32,000
the our our the different atp groups

332
00:12:32,000 --> 00:12:34,720
uh apt groups they are getting better

333
00:12:34,720 --> 00:12:35,600
and better

334
00:12:35,600 --> 00:12:38,639
they are using probably ci cd to to

335
00:12:38,639 --> 00:12:40,160
develop their tools

336
00:12:40,160 --> 00:12:42,000
which means we need to keep up with

337
00:12:42,000 --> 00:12:43,360
their speed

338
00:12:43,360 --> 00:12:44,800
and we need to have shortened

339
00:12:44,800 --> 00:12:46,800
development life cycles for detection

340
00:12:46,800 --> 00:12:48,800
when there's a new exploit out there

341
00:12:48,800 --> 00:12:51,200
for example zero log on it could it

342
00:12:51,200 --> 00:12:53,120
can't that

343
00:12:53,120 --> 00:12:55,760
take for us like two three months until

344
00:12:55,760 --> 00:12:58,959
we have a proper detection

345
00:12:59,519 --> 00:13:01,120
in that whole presentation we show you

346
00:13:01,120 --> 00:13:03,519
some examples these examples are from

347
00:13:03,519 --> 00:13:06,160
our splunk security content repository

348
00:13:06,160 --> 00:13:08,000
and it contains a lot of open source

349
00:13:08,000 --> 00:13:09,360
detection rules

350
00:13:09,360 --> 00:13:12,399
and they are all they are available in

351
00:13:12,399 --> 00:13:16,880
in github but also on this blog website

352
00:13:16,880 --> 00:13:20,800
in order to to show the cicd workflow we

353
00:13:20,800 --> 00:13:21,200
took

354
00:13:21,200 --> 00:13:24,160
a workflow from software engineering

355
00:13:24,160 --> 00:13:24,720
which

356
00:13:24,720 --> 00:13:26,639
consists of committing changes

357
00:13:26,639 --> 00:13:28,959
triggering a build

358
00:13:28,959 --> 00:13:32,079
then create a build notify build outcome

359
00:13:32,079 --> 00:13:35,200
run test 95 test outcap and then at the

360
00:13:35,200 --> 00:13:36,480
end deploying

361
00:13:36,480 --> 00:13:40,240
and we turn that well-known workflow

362
00:13:40,240 --> 00:13:42,880
to blight to apply it on for detection

363
00:13:42,880 --> 00:13:43,680
engineering

364
00:13:43,680 --> 00:13:46,399
and of course it will guide you through

365
00:13:46,399 --> 00:13:49,199
the process

366
00:13:49,199 --> 00:13:50,800
thank you so much patrick for that

367
00:13:50,800 --> 00:13:52,240
background and and

368
00:13:52,240 --> 00:13:53,920
why is it so challenging for us to

369
00:13:53,920 --> 00:13:56,000
develop detections in the first place

370
00:13:56,000 --> 00:13:59,279
as practitioners is dig really uh

371
00:13:59,279 --> 00:14:01,279
let's let's dig into the actual process

372
00:14:01,279 --> 00:14:02,720
of detection engineering and what we try

373
00:14:02,720 --> 00:14:03,680
to follow

374
00:14:03,680 --> 00:14:06,560
so the first step here that we when we

375
00:14:06,560 --> 00:14:08,000
start building a detection is we first

376
00:14:08,000 --> 00:14:09,680
commit a detection into some codebase

377
00:14:09,680 --> 00:14:10,399
right

378
00:14:10,399 --> 00:14:12,399
um let's look at what a detection looks

379
00:14:12,399 --> 00:14:13,920
like in the first place for us so

380
00:14:13,920 --> 00:14:15,839
detection essentially contains a name

381
00:14:15,839 --> 00:14:18,240
for us there's a description behind it

382
00:14:18,240 --> 00:14:19,600
the most important part here is

383
00:14:19,600 --> 00:14:21,120
essentially there's a search right or

384
00:14:21,120 --> 00:14:22,560
some way to like query for what you're

385
00:14:22,560 --> 00:14:23,440
looking for

386
00:14:23,440 --> 00:14:25,839
um as well as in the bottom if you

387
00:14:25,839 --> 00:14:27,760
notice there's a set of tags which gives

388
00:14:27,760 --> 00:14:28,800
us the

389
00:14:28,800 --> 00:14:30,320
metadata around this detection like the

390
00:14:30,320 --> 00:14:32,880
matter id what use case this belongs to

391
00:14:32,880 --> 00:14:35,680
so on and so forth

392
00:14:36,079 --> 00:14:38,800
now when we commit this detection we're

393
00:14:38,800 --> 00:14:40,240
following in our in our current

394
00:14:40,240 --> 00:14:42,399
processes a branching workflow

395
00:14:42,399 --> 00:14:45,279
for um for development and what that

396
00:14:45,279 --> 00:14:46,000
means is we

397
00:14:46,000 --> 00:14:48,399
we usually work off of uh develop branch

398
00:14:48,399 --> 00:14:50,160
and if we're developing you know

399
00:14:50,160 --> 00:14:51,839
developer a is working on the section

400
00:14:51,839 --> 00:14:53,600
one he'll create a branch off of that

401
00:14:53,600 --> 00:14:54,959
and eventually he'll create a pull

402
00:14:54,959 --> 00:14:56,480
request to be merged into the develop

403
00:14:56,480 --> 00:14:57,279
branch

404
00:14:57,279 --> 00:14:59,360
developer 2 we'll create another branch

405
00:14:59,360 --> 00:15:00,959
subsequent to that and also we'll be

406
00:15:00,959 --> 00:15:02,079
merging to develop

407
00:15:02,079 --> 00:15:03,519
and eventually once we have everything

408
00:15:03,519 --> 00:15:05,440
we needed to develop and we're happy

409
00:15:05,440 --> 00:15:06,480
with what we have

410
00:15:06,480 --> 00:15:09,040
to create a release or create a tag and

411
00:15:09,040 --> 00:15:10,800
that tag is a release version

412
00:15:10,800 --> 00:15:12,800
for our detections and this is how we

413
00:15:12,800 --> 00:15:14,480
really do our releases and security

414
00:15:14,480 --> 00:15:15,519
content

415
00:15:15,519 --> 00:15:17,680
now since we're following this process

416
00:15:17,680 --> 00:15:19,120
the next immediate step is

417
00:15:19,120 --> 00:15:20,800
for us to convert these detections and

418
00:15:20,800 --> 00:15:22,160
package it into something that the

419
00:15:22,160 --> 00:15:23,040
system can

420
00:15:23,040 --> 00:15:25,040
can leverage right any system any sim

421
00:15:25,040 --> 00:15:26,079
out there can leverage

422
00:15:26,079 --> 00:15:27,680
in our case we're developing the

423
00:15:27,680 --> 00:15:29,759
detections in security content using

424
00:15:29,759 --> 00:15:30,639
yaml

425
00:15:30,639 --> 00:15:33,040
and we built a script called generate.py

426
00:15:33,040 --> 00:15:34,079
that converts

427
00:15:34,079 --> 00:15:36,560
this yaml into safesections.com which is

428
00:15:36,560 --> 00:15:38,240
the configuration file

429
00:15:38,240 --> 00:15:41,279
that splunk uh basically reads in

430
00:15:41,279 --> 00:15:44,320
for the actual searches

431
00:15:44,639 --> 00:15:46,880
now this is what our again what a yaml

432
00:15:46,880 --> 00:15:47,759
looks like

433
00:15:47,759 --> 00:15:49,279
and once we run it through generate the

434
00:15:49,279 --> 00:15:51,279
py this is what generate the

435
00:15:51,279 --> 00:15:53,519
uh generate provides for us basically

436
00:15:53,519 --> 00:15:54,880
this is the

437
00:15:54,880 --> 00:15:57,199
dot-com version for splunk and you can

438
00:15:57,199 --> 00:15:58,800
see that it has the same

439
00:15:58,800 --> 00:16:01,120
information somewhat the yama contains

440
00:16:01,120 --> 00:16:02,000
just

441
00:16:02,000 --> 00:16:04,560
putting it in fields that splunk can

442
00:16:04,560 --> 00:16:06,079
read and understand essentially and take

443
00:16:06,079 --> 00:16:09,839
advantage of them

444
00:16:10,079 --> 00:16:13,920
now as part of packaging we also have uh

445
00:16:13,920 --> 00:16:17,120
in cicd a job that not only

446
00:16:17,120 --> 00:16:19,600
takes these yam or this savestation.com

447
00:16:19,600 --> 00:16:23,440
but also creates a splunk package for us

448
00:16:23,440 --> 00:16:25,440
in this case it's a splunk app called

449
00:16:25,440 --> 00:16:27,120
the seu which is what we should

450
00:16:27,120 --> 00:16:28,639
and this is part of again the cicd

451
00:16:28,639 --> 00:16:30,720
process we first validate the content

452
00:16:30,720 --> 00:16:32,720
we build we call those sources basically

453
00:16:32,720 --> 00:16:34,800
generating the safe searches.conf

454
00:16:34,800 --> 00:16:38,320
and then we build a spl file and we run

455
00:16:38,320 --> 00:16:40,240
app inspect on that file app inspect is

456
00:16:40,240 --> 00:16:42,160
an api provided by splunk that

457
00:16:42,160 --> 00:16:44,320
verifies that you've you're you have a

458
00:16:44,320 --> 00:16:45,279
app

459
00:16:45,279 --> 00:16:47,120
built per their specifications and

460
00:16:47,120 --> 00:16:48,480
you're not doing something funky

461
00:16:48,480 --> 00:16:51,839
on this app essentially

462
00:16:52,079 --> 00:16:54,560
now once a package once the detections

463
00:16:54,560 --> 00:16:55,759
have been converted to the appropriate

464
00:16:55,759 --> 00:16:57,600
system is going to get shipped into

465
00:16:57,600 --> 00:16:59,279
and it's been packed with chipotle and

466
00:16:59,279 --> 00:17:00,800
we tested this package

467
00:17:00,800 --> 00:17:02,320
we then get a notification of this

468
00:17:02,320 --> 00:17:05,039
build.com now what this looks like is

469
00:17:05,039 --> 00:17:06,959
again typically we'll start off with a

470
00:17:06,959 --> 00:17:08,240
developer creating a

471
00:17:08,240 --> 00:17:11,439
pr a pull request in this case and that

472
00:17:11,439 --> 00:17:11,839
pr

473
00:17:11,839 --> 00:17:14,240
has any number of uh tests that it runs

474
00:17:14,240 --> 00:17:16,079
automatically and this again this is ci

475
00:17:16,079 --> 00:17:17,839
that runs these tests automatically

476
00:17:17,839 --> 00:17:19,599
developer is doing nothing in in this

477
00:17:19,599 --> 00:17:21,439
case and saves a lot of time for us

478
00:17:21,439 --> 00:17:22,319
right but um

479
00:17:22,319 --> 00:17:23,679
in this case there's a bunch of tests

480
00:17:23,679 --> 00:17:25,039
around automatically like i mentioned

481
00:17:25,039 --> 00:17:26,559
earlier building the package

482
00:17:26,559 --> 00:17:28,640
validating that the yam was correct

483
00:17:28,640 --> 00:17:31,039
validating the fact that there's no

484
00:17:31,039 --> 00:17:32,880
misspelling or you're you're you're

485
00:17:32,880 --> 00:17:34,720
you're using a field incorrectly on the

486
00:17:34,720 --> 00:17:36,640
yaml since we have a specification

487
00:17:36,640 --> 00:17:38,400
behind it and then essentially

488
00:17:38,400 --> 00:17:39,679
validating that the package is built

489
00:17:39,679 --> 00:17:40,559
correctly

490
00:17:40,559 --> 00:17:43,039
this happens under the hood on every on

491
00:17:43,039 --> 00:17:43,679
a vpn

492
00:17:43,679 --> 00:17:47,200
right now this doesn't necessarily

493
00:17:47,200 --> 00:17:48,720
test the detection which is our next

494
00:17:48,720 --> 00:17:50,720
immediate test uh a next immediate task

495
00:17:50,720 --> 00:17:52,160
which is actually testing the detection

496
00:17:52,160 --> 00:17:53,520
that the developer is

497
00:17:53,520 --> 00:17:56,559
committing there to test detection we

498
00:17:56,559 --> 00:17:57,200
should

499
00:17:57,200 --> 00:17:59,280
quickly review the detection development

500
00:17:59,280 --> 00:18:01,039
process again from a high level

501
00:18:01,039 --> 00:18:04,160
we first start with let's say an act an

502
00:18:04,160 --> 00:18:05,600
attack technique

503
00:18:05,600 --> 00:18:06,960
and then from that technique we generate

504
00:18:06,960 --> 00:18:09,840
a data set and from that data set we all

505
00:18:09,840 --> 00:18:12,400
develop a detection as well as a set of

506
00:18:12,400 --> 00:18:14,000
what we call detection test

507
00:18:14,000 --> 00:18:16,000
we'll go into that in a second and then

508
00:18:16,000 --> 00:18:17,679
that detection test

509
00:18:17,679 --> 00:18:20,240
goes into a testing pipeline from a

510
00:18:20,240 --> 00:18:21,360
service that we develop

511
00:18:21,360 --> 00:18:23,840
that actually runs those tests and

512
00:18:23,840 --> 00:18:24,640
finally

513
00:18:24,640 --> 00:18:27,280
we we ship the detection to all

514
00:18:27,280 --> 00:18:29,440
compatible splunk products

515
00:18:29,440 --> 00:18:31,679
after that's been tested properly now

516
00:18:31,679 --> 00:18:33,120
these steps are usually

517
00:18:33,120 --> 00:18:35,360
broken down in our team by different

518
00:18:35,360 --> 00:18:36,160
roles

519
00:18:36,160 --> 00:18:38,559
doesn't mean that not one of us wears

520
00:18:38,559 --> 00:18:40,000
multiple roles is just

521
00:18:40,000 --> 00:18:42,240
typically just have that we break this

522
00:18:42,240 --> 00:18:43,280
into different roles

523
00:18:43,280 --> 00:18:46,080
typically the uh engineer generated data

524
00:18:46,080 --> 00:18:47,520
set is doing

525
00:18:47,520 --> 00:18:50,640
as the adversary emulation engineer the

526
00:18:50,640 --> 00:18:52,640
engineer developing the detection as a

527
00:18:52,640 --> 00:18:53,919
detection developer

528
00:18:53,919 --> 00:18:57,120
we have one for actual uh uh the say

529
00:18:57,120 --> 00:18:58,480
sometimes the detection developer is

530
00:18:58,480 --> 00:19:00,640
just doing the actual uh testing

531
00:19:00,640 --> 00:19:01,760
although there's an engineer that

532
00:19:01,760 --> 00:19:04,160
manages the testing platform and

533
00:19:04,160 --> 00:19:06,960
the release to the community and to the

534
00:19:06,960 --> 00:19:07,840
products is

535
00:19:07,840 --> 00:19:09,760
managed by a community community

536
00:19:09,760 --> 00:19:11,520
developer all will end up

537
00:19:11,520 --> 00:19:13,679
writing some sort of blog as a result of

538
00:19:13,679 --> 00:19:15,440
uh very important detection like for

539
00:19:15,440 --> 00:19:18,400
example we just recently wrote on ryuk

540
00:19:18,400 --> 00:19:22,320
ransomware now these individual roles

541
00:19:22,320 --> 00:19:22,799
have

542
00:19:22,799 --> 00:19:24,480
tools that we developed again and we've

543
00:19:24,480 --> 00:19:25,919
open source some of these

544
00:19:25,919 --> 00:19:27,919
actually most of these are mistaken

545
00:19:27,919 --> 00:19:28,960
under the hood

546
00:19:28,960 --> 00:19:32,320
the the dataset generation which is done

547
00:19:32,320 --> 00:19:33,120
by the officer

548
00:19:33,120 --> 00:19:37,280
uh uh adversarial emulation engineer

549
00:19:37,280 --> 00:19:39,679
is it's leveraging under the hood the

550
00:19:39,679 --> 00:19:41,760
attack data repository project we've

551
00:19:41,760 --> 00:19:43,440
recently open source in splunk

552
00:19:43,440 --> 00:19:44,960
conference in october

553
00:19:44,960 --> 00:19:46,960
which is a repository of attack data

554
00:19:46,960 --> 00:19:48,960
essentially we collect

555
00:19:48,960 --> 00:19:51,280
and this is done by uh automatically

556
00:19:51,280 --> 00:19:53,440
also buy the data set generation service

557
00:19:53,440 --> 00:19:55,039
that's on that project

558
00:19:55,039 --> 00:19:56,720
given some sort of a miter technique it

559
00:19:56,720 --> 00:19:58,720
generates a data set for you

560
00:19:58,720 --> 00:20:00,320
the next tool that comes into play is

561
00:20:00,320 --> 00:20:02,080
the attack range or the cloud attackers

562
00:20:02,080 --> 00:20:03,120
depending on what kind of detection

563
00:20:03,120 --> 00:20:04,080
you're developing which is the

564
00:20:04,080 --> 00:20:05,200
environment

565
00:20:05,200 --> 00:20:07,200
well it's a tool that allows us to build

566
00:20:07,200 --> 00:20:08,960
an environment

567
00:20:08,960 --> 00:20:12,480
replicably that has a splunk server plus

568
00:20:12,480 --> 00:20:14,799
some sort of endpoint or some sort of a

569
00:20:14,799 --> 00:20:17,120
machine that we can attack or service

570
00:20:17,120 --> 00:20:19,919
then those two those two uh pieces are

571
00:20:19,919 --> 00:20:21,200
connected and they talk to each other

572
00:20:21,200 --> 00:20:23,280
right that the service or the endpoint

573
00:20:23,280 --> 00:20:25,440
is logged into splunk and then from

574
00:20:25,440 --> 00:20:26,559
there we can

575
00:20:26,559 --> 00:20:29,679
uh uh either guide data sets or closely

576
00:20:29,679 --> 00:20:31,760
study what that attack did

577
00:20:31,760 --> 00:20:34,559
now from the attack range and and the

578
00:20:34,559 --> 00:20:36,000
detection developer while he's working

579
00:20:36,000 --> 00:20:36,960
on the attack range will

580
00:20:36,960 --> 00:20:39,360
will have a data set that he he's

581
00:20:39,360 --> 00:20:40,720
working with as well as

582
00:20:40,720 --> 00:20:42,799
simulations is emulating then when he's

583
00:20:42,799 --> 00:20:45,120
done there he'll produce a test file

584
00:20:45,120 --> 00:20:47,520
with from that data set and using uh and

585
00:20:47,520 --> 00:20:48,400
and

586
00:20:48,400 --> 00:20:50,480
using the detection he's developed and

587
00:20:50,480 --> 00:20:52,320
that test file essentially is put into

588
00:20:52,320 --> 00:20:53,840
this detection testing service

589
00:20:53,840 --> 00:20:56,480
that automatically verifies whether that

590
00:20:56,480 --> 00:20:58,559
that detection is passing or not

591
00:20:58,559 --> 00:21:00,080
and then this is all ultimately

592
00:21:00,080 --> 00:21:01,520
committed back into security counting

593
00:21:01,520 --> 00:21:03,520
which is a repository where we keep

594
00:21:03,520 --> 00:21:06,720
all of our uh all of our detections

595
00:21:06,720 --> 00:21:08,000
i'm gonna speed through this since we

596
00:21:08,000 --> 00:21:09,679
only have five minutes on the clock so

597
00:21:09,679 --> 00:21:10,240
again

598
00:21:10,240 --> 00:21:11,760
a really high level this is the uh

599
00:21:11,760 --> 00:21:13,679
attack range architecture

600
00:21:13,679 --> 00:21:16,400
it builds a tap that builds and attacks

601
00:21:16,400 --> 00:21:16,880
and

602
00:21:16,880 --> 00:21:19,280
is doing this on the hood using ansible

603
00:21:19,280 --> 00:21:20,880
and terraform essentially and it builds

604
00:21:20,880 --> 00:21:23,039
it on an aws cloud environment

605
00:21:23,039 --> 00:21:24,240
i'm not going to go into the details

606
00:21:24,240 --> 00:21:26,320
it's really well documented highly check

607
00:21:26,320 --> 00:21:27,679
how you're going to check out the

608
00:21:27,679 --> 00:21:30,480
project but again detection testing a

609
00:21:30,480 --> 00:21:32,080
little bit more in details here

610
00:21:32,080 --> 00:21:34,480
we start from a uh miter attack

611
00:21:34,480 --> 00:21:36,400
technique like elsa's memory

612
00:21:36,400 --> 00:21:39,280
and and under the hood uh using a timer

613
00:21:39,280 --> 00:21:40,640
a team there's any number

614
00:21:40,640 --> 00:21:43,280
any number of attacks that relates to

615
00:21:43,280 --> 00:21:44,720
this technique

616
00:21:44,720 --> 00:21:46,720
the the detection testing service will

617
00:21:46,720 --> 00:21:48,559
launch at these attacks right

618
00:21:48,559 --> 00:21:50,159
and then we'll develop any number of

619
00:21:50,159 --> 00:21:51,679
detections associated

620
00:21:51,679 --> 00:21:54,000
with these attacks and and again these

621
00:21:54,000 --> 00:21:54,720
detections

622
00:21:54,720 --> 00:21:56,960
are written by the detection developer

623
00:21:56,960 --> 00:21:58,640
and both of these themes are put

624
00:21:58,640 --> 00:22:00,799
together in a test file

625
00:22:00,799 --> 00:22:04,320
now the test file looks something like

626
00:22:04,320 --> 00:22:04,640
this

627
00:22:04,640 --> 00:22:06,720
where you have the name of the detection

628
00:22:06,720 --> 00:22:08,480
some sort of pass condition

629
00:22:08,480 --> 00:22:11,760
and the actual attack data set related

630
00:22:11,760 --> 00:22:13,200
to detection and again the attack data

631
00:22:13,200 --> 00:22:13,600
set is

632
00:22:13,600 --> 00:22:16,480
grabbed from a tamara team execution and

633
00:22:16,480 --> 00:22:17,679
then this is run through

634
00:22:17,679 --> 00:22:20,640
uh the attack range which has a a test

635
00:22:20,640 --> 00:22:21,520
action

636
00:22:21,520 --> 00:22:23,200
and the attack again builds an

637
00:22:23,200 --> 00:22:25,120
environment replays that attack data

638
00:22:25,120 --> 00:22:26,559
runs detection and then evaluates

639
00:22:26,559 --> 00:22:28,640
whether that passed perfect

640
00:22:28,640 --> 00:22:32,159
that then uh it's how we we evaluate our

641
00:22:32,159 --> 00:22:33,440
test outcome

642
00:22:33,440 --> 00:22:37,360
and that then automatically updates the

643
00:22:37,360 --> 00:22:37,840
pr

644
00:22:37,840 --> 00:22:40,720
saying hey this detection was passed and

645
00:22:40,720 --> 00:22:42,240
here are some you know here's some

646
00:22:42,240 --> 00:22:43,520
statistics on

647
00:22:43,520 --> 00:22:45,360
the fact of how i passed or it failed

648
00:22:45,360 --> 00:22:47,360
and mr developer you got to go check out

649
00:22:47,360 --> 00:22:48,640
why it failed

650
00:22:48,640 --> 00:22:51,919
also as part of that uh the service

651
00:22:51,919 --> 00:22:55,760
it adds a meta a tag a metadata tag to

652
00:22:55,760 --> 00:22:56,000
the

653
00:22:56,000 --> 00:22:57,760
session called automatic detection

654
00:22:57,760 --> 00:22:59,280
testing passed ascension

655
00:22:59,280 --> 00:23:01,039
letting the any future developers or

656
00:23:01,039 --> 00:23:02,880
users know hey this detection

657
00:23:02,880 --> 00:23:08,080
passed with this data set a test

658
00:23:08,080 --> 00:23:10,400
and finally the last step of workflow is

659
00:23:10,400 --> 00:23:11,520
essentially deploying the detection

660
00:23:11,520 --> 00:23:13,360
there's three ways today that we

661
00:23:13,360 --> 00:23:15,280
deploy our detections in splunk we

662
00:23:15,280 --> 00:23:16,960
package it as a splunk app

663
00:23:16,960 --> 00:23:19,039
we also allow users especially for

664
00:23:19,039 --> 00:23:20,400
larger shops to

665
00:23:20,400 --> 00:23:22,240
fork the git repository and generating

666
00:23:22,240 --> 00:23:24,240
their own app using the code that we

667
00:23:24,240 --> 00:23:24,799
have in there

668
00:23:24,799 --> 00:23:27,440
but we also provide a completely open uh

669
00:23:27,440 --> 00:23:29,440
and free restful api that any

670
00:23:29,440 --> 00:23:31,919
any third party system can download the

671
00:23:31,919 --> 00:23:34,240
detections from and implement it

672
00:23:34,240 --> 00:23:37,840
uh local

673
00:23:38,720 --> 00:23:40,240
so how do you apply what you learned

674
00:23:40,240 --> 00:23:41,840
today and uh

675
00:23:41,840 --> 00:23:43,440
first highly recommend you again check

676
00:23:43,440 --> 00:23:45,120
out the attack range if if you're

677
00:23:45,120 --> 00:23:46,880
if you want to uh give it a hand at

678
00:23:46,880 --> 00:23:48,559
developing your own detections

679
00:23:48,559 --> 00:23:50,400
in the next few weeks uh in the next

680
00:23:50,400 --> 00:23:51,760
three months or so

681
00:23:51,760 --> 00:23:53,440
i hope this presentation helps you

682
00:23:53,440 --> 00:23:55,520
establish some sort of cicd work for

683
00:23:55,520 --> 00:23:56,480
your sim

684
00:23:56,480 --> 00:23:58,960
to test your detections and and

685
00:23:58,960 --> 00:23:59,840
encourage you to

686
00:23:59,840 --> 00:24:02,720
put some tests in there to run uh to run

687
00:24:02,720 --> 00:24:04,480
again to to consistently you can

688
00:24:04,480 --> 00:24:05,840
continuously validate your detections

689
00:24:05,840 --> 00:24:06,880
with these tests

690
00:24:06,880 --> 00:24:08,960
and within the next six months i i hope

691
00:24:08,960 --> 00:24:10,159
you share those detections with the

692
00:24:10,159 --> 00:24:11,279
community overall

693
00:24:11,279 --> 00:24:12,720
again security content for us is

694
00:24:12,720 --> 00:24:14,080
completely open source feel free to make

695
00:24:14,080 --> 00:24:15,039
a pull request

696
00:24:15,039 --> 00:24:16,720
also sigma project that's a great place

697
00:24:16,720 --> 00:24:18,320
to share detections in

698
00:24:18,320 --> 00:24:21,279
we love it and and again i hope within

699
00:24:21,279 --> 00:24:22,799
six months this helps you establish an

700
00:24:22,799 --> 00:24:24,480
automated automatic detection testing in

701
00:24:24,480 --> 00:24:27,039
your environment

702
00:24:27,200 --> 00:24:29,520
thank you

703
00:24:31,520 --> 00:24:34,559
okay so thanks a lot um this is kind of

704
00:24:34,559 --> 00:24:35,120
a

705
00:24:35,120 --> 00:24:38,000
it was a really interesting talk and i

706
00:24:38,000 --> 00:24:38,799
think uh

707
00:24:38,799 --> 00:24:41,520
everybody that actually is managing sim

708
00:24:41,520 --> 00:24:43,360
rules uh

709
00:24:43,360 --> 00:24:45,279
should should really spend some time on

710
00:24:45,279 --> 00:24:47,039
that rather than kind of continue

711
00:24:47,039 --> 00:24:49,600
suffering uh from all the manual work we

712
00:24:49,600 --> 00:24:50,159
do

713
00:24:50,159 --> 00:24:53,840
um there's no questions right now in

714
00:24:53,840 --> 00:24:56,960
in in the q a uh so maybe

715
00:24:56,960 --> 00:24:59,039
one question if if you operate an

716
00:24:59,039 --> 00:25:00,159
existing

717
00:25:00,159 --> 00:25:01,840
seam and stuff like that what what do

718
00:25:01,840 --> 00:25:04,159
you think is the best way to actually

719
00:25:04,159 --> 00:25:05,919
get into that i mean there's a lot of

720
00:25:05,919 --> 00:25:07,679
tools you have to get familiar with with

721
00:25:07,679 --> 00:25:08,880
manager you have to get

722
00:25:08,880 --> 00:25:11,919
familiar with with atomic

723
00:25:11,919 --> 00:25:14,960
any like any of you pain points or

724
00:25:14,960 --> 00:25:16,320
things that you can share

725
00:25:16,320 --> 00:25:18,400
how you you got into that and got up to

726
00:25:18,400 --> 00:25:20,720
speed

727
00:25:25,840 --> 00:25:28,320
patrick you're gonna take this one i can

728
00:25:28,320 --> 00:25:29,670
take it there

729
00:25:29,670 --> 00:25:31,200
[Music]

730
00:25:31,200 --> 00:25:33,760
i think it's important that that that

731
00:25:33,760 --> 00:25:35,520
you already have a set of rules which

732
00:25:35,520 --> 00:25:36,480
you can use

733
00:25:36,480 --> 00:25:38,240
for example that that's not only us

734
00:25:38,240 --> 00:25:40,000
there's also other windows to ship

735
00:25:40,000 --> 00:25:42,159
rules and you can start with the

736
00:25:42,159 --> 00:25:43,360
existing rules

737
00:25:43,360 --> 00:25:45,520
think about it what they cover how the

738
00:25:45,520 --> 00:25:46,799
attack works

739
00:25:46,799 --> 00:25:49,120
and that already helps you to to

740
00:25:49,120 --> 00:25:50,720
understand how it works

741
00:25:50,720 --> 00:25:53,120
and then i would focus and that's always

742
00:25:53,120 --> 00:25:53,840
needed

743
00:25:53,840 --> 00:25:57,600
to some dedicated rules based on your

744
00:25:57,600 --> 00:26:00,080
apt groups which targets your your

745
00:26:00,080 --> 00:26:00,960
vertical

746
00:26:00,960 --> 00:26:03,360
you can then focus some efforts which

747
00:26:03,360 --> 00:26:04,080
which you have

748
00:26:04,080 --> 00:26:06,480
then into writing dedicated rules for

749
00:26:06,480 --> 00:26:10,720
your environment

750
00:26:10,720 --> 00:26:13,440
okay so we actually do have a question

751
00:26:13,440 --> 00:26:13,919
uh

752
00:26:13,919 --> 00:26:18,080
by mark matkins how would this help

753
00:26:18,080 --> 00:26:21,039
in the writing playbooks was within

754
00:26:21,039 --> 00:26:22,840
phantom

755
00:26:22,840 --> 00:26:25,679
soar i'll take this one patrick if it's

756
00:26:25,679 --> 00:26:26,960
okay with you

757
00:26:26,960 --> 00:26:29,840
yeah so so this presentation

758
00:26:29,840 --> 00:26:31,679
specifically was all about detections

759
00:26:31,679 --> 00:26:34,159
um but we do our team also develops with

760
00:26:34,159 --> 00:26:35,600
playbooks and responses

761
00:26:35,600 --> 00:26:38,720
for splunk today how

762
00:26:38,720 --> 00:26:40,480
this process for us helps us develop

763
00:26:40,480 --> 00:26:42,240
those responses is specifically on the

764
00:26:42,240 --> 00:26:43,440
attack range

765
00:26:43,440 --> 00:26:45,840
tool we can bring up a phantom a full

766
00:26:45,840 --> 00:26:46,799
phantom server

767
00:26:46,799 --> 00:26:49,760
and test whether a detection is

768
00:26:49,760 --> 00:26:51,440
addressed or mitigated by a phantom

769
00:26:51,440 --> 00:26:52,880
playbook in there

770
00:26:52,880 --> 00:26:56,960
now um we're still working really hard

771
00:26:56,960 --> 00:26:59,360
to make an out-of-the-box experience for

772
00:26:59,360 --> 00:27:00,960
security content for phantom

773
00:27:00,960 --> 00:27:03,279
it's not there yet to be completely

774
00:27:03,279 --> 00:27:04,559
honest but but they are

775
00:27:04,559 --> 00:27:07,120
phantom actions uh we call them response

776
00:27:07,120 --> 00:27:08,400
tasks and playbooks

777
00:27:08,400 --> 00:27:13,440
available in security content um today

778
00:27:14,799 --> 00:27:17,919
okay any more questions

779
00:27:17,919 --> 00:27:19,760
doesn't seem to be the case so i hope to

780
00:27:19,760 --> 00:27:21,679
see you in five minutes in uh

781
00:27:21,679 --> 00:27:24,559
for the closing remarks and uh thank you

782
00:27:24,559 --> 00:27:25,360
very much

783
00:27:25,360 --> 00:27:27,760
uh for the talk i thought this was

784
00:27:27,760 --> 00:27:29,360
really interesting i already recommended

785
00:27:29,360 --> 00:27:30,480
this to my team

786
00:27:30,480 --> 00:27:32,960
and that they should download this and

787
00:27:32,960 --> 00:27:33,679
uh

788
00:27:33,679 --> 00:27:37,039
so thanks again and talk to you

789
00:27:37,039 --> 00:27:39,600
hopefully at some stage in person

790
00:27:39,600 --> 00:27:41,120
thank you serge and thank you for saving

791
00:27:41,120 --> 00:27:43,440
the best for last have a good day

792
00:27:43,440 --> 00:27:48,640
take care thanks guys

