1
00:00:05,870 --> 00:00:07,919
[Music]

2
00:00:07,919 --> 00:00:09,840
welcome everyone

3
00:00:09,840 --> 00:00:11,599
please have a seat and

4
00:00:11,599 --> 00:00:13,120
we'll start the

5
00:00:13,120 --> 00:00:15,280
11 20 session

6
00:00:15,280 --> 00:00:17,680
uh for this session

7
00:00:17,680 --> 00:00:20,560
uh we have uh ryan and nicole with us

8
00:00:20,560 --> 00:00:22,240
here from integer

9
00:00:22,240 --> 00:00:24,480
and they're going to take us into the

10
00:00:24,480 --> 00:00:26,400
world of

11
00:00:26,400 --> 00:00:28,560
the unknown unknowns and misconfigured

12
00:00:28,560 --> 00:00:30,560
devices

13
00:00:30,560 --> 00:00:33,840
i'll leave the world to you thank you

14
00:00:33,840 --> 00:00:35,840
hello everybody

15
00:00:35,840 --> 00:00:38,000
welcome to our session about going with

16
00:00:38,000 --> 00:00:39,200
the workflow

17
00:00:39,200 --> 00:00:40,879
and how dangerous it could be when you

18
00:00:40,879 --> 00:00:45,039
misconfigure a workflow instance

19
00:00:45,039 --> 00:00:46,719
my name is nicole fishbein i'm a

20
00:00:46,719 --> 00:00:48,879
security researcher at intesar

21
00:00:48,879 --> 00:00:50,480
and previous to that i was in the

22
00:00:50,480 --> 00:00:54,000
embedded r d department in the idf

23
00:00:54,000 --> 00:00:55,600
i'm ryan robinson

24
00:00:55,600 --> 00:00:58,719
i'm also a researcher with intelzer

25
00:00:58,719 --> 00:01:00,559
in previous shows i was a security

26
00:01:00,559 --> 00:01:02,559
engineer and securing a cloud

27
00:01:02,559 --> 00:01:04,799
applications and all and i was also a

28
00:01:04,799 --> 00:01:07,200
researcher in anomalies fred research

29
00:01:07,200 --> 00:01:08,640
team

30
00:01:08,640 --> 00:01:10,799
that's made

31
00:01:10,799 --> 00:01:12,720
so today we're going to introduce you

32
00:01:12,720 --> 00:01:15,360
the word of workflows uh we will explain

33
00:01:15,360 --> 00:01:17,200
a bit what is a workflow

34
00:01:17,200 --> 00:01:20,560
and we we will dive in into two case

35
00:01:20,560 --> 00:01:23,600
studies of workflows open sourced uh

36
00:01:23,600 --> 00:01:24,799
platforms

37
00:01:24,799 --> 00:01:27,840
uh and how their different features and

38
00:01:27,840 --> 00:01:30,799
the misconfiguration of them led to an

39
00:01:30,799 --> 00:01:33,680
extensive credential exposure

40
00:01:33,680 --> 00:01:36,400
and we're going to cover some protection

41
00:01:36,400 --> 00:01:39,759
methods and tools that you can use to

42
00:01:39,759 --> 00:01:41,119
first of all verify that your

43
00:01:41,119 --> 00:01:43,600
organization is not compromised and

44
00:01:43,600 --> 00:01:45,520
second of all how to protect your

45
00:01:45,520 --> 00:01:48,240
organization

46
00:01:49,200 --> 00:01:52,479
so first of all what is a workflow

47
00:01:52,479 --> 00:01:54,640
let's say you have data in a source

48
00:01:54,640 --> 00:01:56,479
database and you want to move it to

49
00:01:56,479 --> 00:01:58,560
another database so you will need to

50
00:01:58,560 --> 00:02:01,600
extract it analyze it and store it

51
00:02:01,600 --> 00:02:02,960
each

52
00:02:02,960 --> 00:02:06,799
task can be broken into smaller parts so

53
00:02:06,799 --> 00:02:08,639
one task will pipe in the relevant

54
00:02:08,639 --> 00:02:11,440
information to the next task

55
00:02:11,440 --> 00:02:13,920
and that's how you create a flow

56
00:02:13,920 --> 00:02:17,360
a workflow platform allows you to create

57
00:02:17,360 --> 00:02:21,040
schedule and monitor these workflows

58
00:02:21,040 --> 00:02:22,879
and there are different types of

59
00:02:22,879 --> 00:02:25,840
workflow platforms some cost money some

60
00:02:25,840 --> 00:02:29,280
are free or open sourced

61
00:02:29,680 --> 00:02:32,400
our research we focused mainly on open

62
00:02:32,400 --> 00:02:35,040
source workflow platforms

63
00:02:35,040 --> 00:02:39,040
and we wanted to know can we find a

64
00:02:39,040 --> 00:02:41,840
instance or servers that has a certain

65
00:02:41,840 --> 00:02:44,640
workflow maybe an exposed dashboard by

66
00:02:44,640 --> 00:02:45,680
mistake

67
00:02:45,680 --> 00:02:48,000
without breaking in without

68
00:02:48,000 --> 00:02:51,120
taking advantage of vulnerabilities

69
00:02:51,120 --> 00:02:53,760
uh just an exposed dashboard and if we

70
00:02:53,760 --> 00:02:55,920
do see something like that

71
00:02:55,920 --> 00:02:58,400
what information can we find there what

72
00:02:58,400 --> 00:03:00,879
type of information is exposed and

73
00:03:00,879 --> 00:03:04,959
lastly can we execute code simply by

74
00:03:04,959 --> 00:03:07,920
having access to a dashboard

75
00:03:07,920 --> 00:03:09,519
so we will start from the first case

76
00:03:09,519 --> 00:03:11,840
study

77
00:03:12,319 --> 00:03:13,599
thank you very much

78
00:03:13,599 --> 00:03:16,319
so our first case study is argo

79
00:03:16,319 --> 00:03:18,720
workflows um in my opinion that's the

80
00:03:18,720 --> 00:03:20,720
one with the best logo

81
00:03:20,720 --> 00:03:23,840
so it is and so a little bit about uh

82
00:03:23,840 --> 00:03:26,080
hargo it's a container native workflow

83
00:03:26,080 --> 00:03:27,680
engine uh

84
00:03:27,680 --> 00:03:29,200
what container native sort of means it

85
00:03:29,200 --> 00:03:30,720
means it's the base level of

86
00:03:30,720 --> 00:03:32,640
infrastructure in simple terms if you

87
00:03:32,640 --> 00:03:34,159
can run containers

88
00:03:34,159 --> 00:03:37,120
you can run argo workflows

89
00:03:37,120 --> 00:03:39,440
it's open source we really like open

90
00:03:39,440 --> 00:03:40,480
source it

91
00:03:40,480 --> 00:03:42,560
makes it a lot easier for us to conduct

92
00:03:42,560 --> 00:03:44,560
research we don't have to hand over any

93
00:03:44,560 --> 00:03:46,480
money and stuff it also means it's very

94
00:03:46,480 --> 00:03:48,720
uh widely adopted for the most part you

95
00:03:48,720 --> 00:03:49,920
know

96
00:03:49,920 --> 00:03:52,799
people like uh open source and it can

97
00:03:52,799 --> 00:03:54,319
kind of be a blessing in the curse if a

98
00:03:54,319 --> 00:03:55,920
lot of people are using it it might also

99
00:03:55,920 --> 00:03:57,200
become quite a

100
00:03:57,200 --> 00:03:59,599
nice sort of target for people

101
00:03:59,599 --> 00:04:01,680
it's designed for kubernetes

102
00:04:01,680 --> 00:04:04,720
assembly and it's incubated by the cloud

103
00:04:04,720 --> 00:04:06,239
the the cloud native computing

104
00:04:06,239 --> 00:04:09,280
foundation uh the cncf

105
00:04:09,280 --> 00:04:11,599
the cncf are also the main theaters for

106
00:04:11,599 --> 00:04:13,599
kubernetes itself so

107
00:04:13,599 --> 00:04:16,000
argo is probably as official as you'll

108
00:04:16,000 --> 00:04:17,440
get for

109
00:04:17,440 --> 00:04:21,199
um a workflow engine for kubernetes and

110
00:04:21,199 --> 00:04:22,720
i'd like to say it's great for computing

111
00:04:22,720 --> 00:04:25,840
tons of jobs with a winky fiesta um

112
00:04:25,840 --> 00:04:28,240
you can probably gather already what you

113
00:04:28,240 --> 00:04:31,600
can do with a lot of computing power

114
00:04:31,600 --> 00:04:34,720
so um you know what is a workflow

115
00:04:34,720 --> 00:04:37,600
in argo it's defined in yaml

116
00:04:37,600 --> 00:04:39,199
if you don't know what yaml is just

117
00:04:39,199 --> 00:04:40,720
think of json just

118
00:04:40,720 --> 00:04:42,880
another markup language as it's in the

119
00:04:42,880 --> 00:04:43,759
name

120
00:04:43,759 --> 00:04:45,199
a workflow will

121
00:04:45,199 --> 00:04:47,919
consist of one or more steps sort of as

122
00:04:47,919 --> 00:04:49,120
uh

123
00:04:49,120 --> 00:04:50,320
as

124
00:04:50,320 --> 00:04:52,800
nicole was talking about

125
00:04:52,800 --> 00:04:55,680
typically these steps are a container

126
00:04:55,680 --> 00:04:57,759
within argo there are a few other types

127
00:04:57,759 --> 00:05:00,400
you can have a script or a kubernetes

128
00:05:00,400 --> 00:05:01,680
resource

129
00:05:01,680 --> 00:05:03,680
there's a few things but

130
00:05:03,680 --> 00:05:06,160
for the most part it's a container

131
00:05:06,160 --> 00:05:08,560
and very simply a step you run with an

132
00:05:08,560 --> 00:05:10,960
input you capture the output and then

133
00:05:10,960 --> 00:05:12,880
you'll use that output probably as the

134
00:05:12,880 --> 00:05:14,800
input for the next step and so on until

135
00:05:14,800 --> 00:05:17,440
you complete the task at hand

136
00:05:17,440 --> 00:05:19,360
so this is what

137
00:05:19,360 --> 00:05:21,440
a sort of template a hello world looks

138
00:05:21,440 --> 00:05:22,639
like

139
00:05:22,639 --> 00:05:24,880
within argo it's just a container just

140
00:05:24,880 --> 00:05:27,120
prints out the hello world

141
00:05:27,120 --> 00:05:29,199
and this is what it's like whenever you

142
00:05:29,199 --> 00:05:31,840
submit it through the argo server

143
00:05:31,840 --> 00:05:32,639
um

144
00:05:32,639 --> 00:05:35,039
you just submit like a yaml file or you

145
00:05:35,039 --> 00:05:37,039
can upload something it's a pretty

146
00:05:37,039 --> 00:05:38,800
simple so it is

147
00:05:38,800 --> 00:05:40,560
another really important concept is

148
00:05:40,560 --> 00:05:43,520
called uh off mode and there are three

149
00:05:43,520 --> 00:05:47,039
types of off modes within argo there is

150
00:05:47,039 --> 00:05:48,000
server

151
00:05:48,000 --> 00:05:51,039
client and sso

152
00:05:51,039 --> 00:05:53,759
so the one that we mainly want to focus

153
00:05:53,759 --> 00:05:54,720
on

154
00:05:54,720 --> 00:05:56,880
is server

155
00:05:56,880 --> 00:05:58,240
and

156
00:05:58,240 --> 00:05:59,280
by the time we actually done the

157
00:05:59,280 --> 00:06:02,560
research the default within argo is

158
00:06:02,560 --> 00:06:03,520
server

159
00:06:03,520 --> 00:06:06,000
since version 3.0 they've made the

160
00:06:06,000 --> 00:06:07,680
default the client

161
00:06:07,680 --> 00:06:10,319
and there are sort of reasons behind

162
00:06:10,319 --> 00:06:11,600
that

163
00:06:11,600 --> 00:06:14,960
for security as we'll sort of dive into

164
00:06:14,960 --> 00:06:15,919
um

165
00:06:15,919 --> 00:06:18,000
what the the

166
00:06:18,000 --> 00:06:20,160
off mode server looks like is you'll see

167
00:06:20,160 --> 00:06:22,319
the definition there in hosted mode use

168
00:06:22,319 --> 00:06:24,080
the cube config of the service account

169
00:06:24,080 --> 00:06:27,280
in local mode use your local cube config

170
00:06:27,280 --> 00:06:29,280
what that sort of means in lay terms

171
00:06:29,280 --> 00:06:32,080
it's if you can access the argo server

172
00:06:32,080 --> 00:06:34,240
you inherit the permissions that that

173
00:06:34,240 --> 00:06:36,160
deployment has been given

174
00:06:36,160 --> 00:06:37,440
so oh

175
00:06:37,440 --> 00:06:41,120
so i want to go back one uh further i'll

176
00:06:41,120 --> 00:06:42,800
use my pointer instead if you take a

177
00:06:42,800 --> 00:06:46,720
look at these verbs on the bottom left i

178
00:06:46,720 --> 00:06:49,520
got this from a quick start yaml file so

179
00:06:49,520 --> 00:06:51,520
um if

180
00:06:51,520 --> 00:06:53,520
basically if you can reach the server

181
00:06:53,520 --> 00:06:54,800
these are the permissions you get you

182
00:06:54,800 --> 00:06:56,720
see things like create get list watch

183
00:06:56,720 --> 00:06:58,000
update patch

184
00:06:58,000 --> 00:07:00,240
you know so usually the quick start it

185
00:07:00,240 --> 00:07:01,520
kind of gives you the full amount of

186
00:07:01,520 --> 00:07:03,039
permissions

187
00:07:03,039 --> 00:07:06,479
so anyways how can this be exploited

188
00:07:06,479 --> 00:07:09,199
i made them spin too many times so

189
00:07:09,199 --> 00:07:11,280
um and i basically boil it down to a

190
00:07:11,280 --> 00:07:12,960
simple equation

191
00:07:12,960 --> 00:07:14,880
if you go for server off plus

192
00:07:14,880 --> 00:07:17,520
permissions and if you're allowed to get

193
00:07:17,520 --> 00:07:19,280
external access to it

194
00:07:19,280 --> 00:07:20,479
profit

195
00:07:20,479 --> 00:07:21,440
so

196
00:07:21,440 --> 00:07:22,400
um

197
00:07:22,400 --> 00:07:24,160
what we wanted to do is we wanted to

198
00:07:24,160 --> 00:07:27,199
find exposed uh argo workflow instances

199
00:07:27,199 --> 00:07:28,240
out there

200
00:07:28,240 --> 00:07:30,960
and there's sort of many techniques that

201
00:07:30,960 --> 00:07:32,960
you can use we used internet census

202
00:07:32,960 --> 00:07:36,240
tools such as like showdown census

203
00:07:36,240 --> 00:07:38,720
rapid7 have open data set i'll give the

204
00:07:38,720 --> 00:07:40,080
link for that later

205
00:07:40,080 --> 00:07:42,880
um honestly if it's exposed online

206
00:07:42,880 --> 00:07:45,120
sometimes it's even been indexed by the

207
00:07:45,120 --> 00:07:47,280
google spiders so you can make a simple

208
00:07:47,280 --> 00:07:48,960
uh sort of google search and you'll be

209
00:07:48,960 --> 00:07:51,280
able to find them um

210
00:07:51,280 --> 00:07:52,720
you can use uh

211
00:07:52,720 --> 00:07:55,440
the uh the

212
00:07:55,440 --> 00:07:56,879
dnsdb

213
00:07:56,879 --> 00:07:58,400
so um

214
00:07:58,400 --> 00:07:59,759
usually what you can sort of do with

215
00:07:59,759 --> 00:08:02,000
that is you can look for sub domains

216
00:08:02,000 --> 00:08:04,000
that have argo in them maybe sort of

217
00:08:04,000 --> 00:08:05,520
argo dot

218
00:08:05,520 --> 00:08:07,680
company.com and quite a lot of times

219
00:08:07,680 --> 00:08:10,080
they all created a certificate um you

220
00:08:10,080 --> 00:08:11,759
know for their uh

221
00:08:11,759 --> 00:08:15,360
like their production uh argo server and

222
00:08:15,360 --> 00:08:17,039
you're able to find that way and also

223
00:08:17,039 --> 00:08:18,720
just a classic sort of brute force and

224
00:08:18,720 --> 00:08:20,080
permutation

225
00:08:20,080 --> 00:08:20,960
um

226
00:08:20,960 --> 00:08:22,720
sort of things known for is you grab the

227
00:08:22,720 --> 00:08:25,120
rsa vendor list and you just

228
00:08:25,120 --> 00:08:27,280
you just put that company.com just put

229
00:08:27,280 --> 00:08:28,720
argo in front of them and just kind of

230
00:08:28,720 --> 00:08:30,240
brute force that and honestly you'll be

231
00:08:30,240 --> 00:08:32,159
surprised how many that you can

232
00:08:32,159 --> 00:08:34,240
actually find so

233
00:08:34,240 --> 00:08:36,640
when we were looking for that um

234
00:08:36,640 --> 00:08:38,240
we found

235
00:08:38,240 --> 00:08:40,719
something that really uh interests us

236
00:08:40,719 --> 00:08:43,760
uh in one particular cluster we found a

237
00:08:43,760 --> 00:08:45,600
monero minor that had been running for

238
00:08:45,600 --> 00:08:46,880
eight months

239
00:08:46,880 --> 00:08:47,680
um

240
00:08:47,680 --> 00:08:50,959
so it had and uh the mineral minor in

241
00:08:50,959 --> 00:08:52,000
question

242
00:08:52,000 --> 00:08:52,800
uh

243
00:08:52,800 --> 00:08:54,320
this

244
00:08:54,320 --> 00:08:55,390
comics

245
00:08:55,390 --> 00:08:56,720
[Music]

246
00:08:56,720 --> 00:09:00,560
minor it was very very famous

247
00:09:01,360 --> 00:09:02,880
container like it had been downloaded

248
00:09:02,880 --> 00:09:04,399
millions of times so

249
00:09:04,399 --> 00:09:06,720
it's used by a lot of people and

250
00:09:06,720 --> 00:09:08,320
actually the same container it had been

251
00:09:08,320 --> 00:09:10,240
used in wide scale attacks against

252
00:09:10,240 --> 00:09:12,880
kubernetes clusters and have been

253
00:09:12,880 --> 00:09:14,880
featured in microsoft blogs and

254
00:09:14,880 --> 00:09:16,880
everything before so really popular and

255
00:09:16,880 --> 00:09:18,720
it sort of shocked us to find because

256
00:09:18,720 --> 00:09:20,080
initially we were actually looking for

257
00:09:20,080 --> 00:09:21,519
something else we were looking for

258
00:09:21,519 --> 00:09:23,440
exposed credentials within the scripts

259
00:09:23,440 --> 00:09:25,040
some will get into more with the second

260
00:09:25,040 --> 00:09:27,120
case study but we found that sort of

261
00:09:27,120 --> 00:09:29,760
malware was running on these things

262
00:09:29,760 --> 00:09:32,399
um and with that you know we sort of

263
00:09:32,399 --> 00:09:33,920
found our malware and now we're going to

264
00:09:33,920 --> 00:09:36,000
get into more compromised credentials

265
00:09:36,000 --> 00:09:38,080
with nicole on airflow

266
00:09:38,080 --> 00:09:41,040
so the next case study is airflow

267
00:09:41,040 --> 00:09:43,760
and airflow is the most popular open

268
00:09:43,760 --> 00:09:46,480
source workflow platform based on stars

269
00:09:46,480 --> 00:09:47,839
on github

270
00:09:47,839 --> 00:09:50,080
and it allows you to run your tasks

271
00:09:50,080 --> 00:09:52,800
using python and it supports many

272
00:09:52,800 --> 00:09:56,320
plugins different sorts of plugins

273
00:09:56,320 --> 00:10:00,080
and the core of airflow is a directed

274
00:10:00,080 --> 00:10:02,320
acicli graph similar to what we saw

275
00:10:02,320 --> 00:10:04,480
before when you have one task that calls

276
00:10:04,480 --> 00:10:05,760
another one

277
00:10:05,760 --> 00:10:08,800
and the basic unit is a task

278
00:10:08,800 --> 00:10:10,640
and there are different structures in

279
00:10:10,640 --> 00:10:13,680
airflow that supports your workflow so

280
00:10:13,680 --> 00:10:15,839
for example if you're writing a task

281
00:10:15,839 --> 00:10:18,079
you're probably going to have some

282
00:10:18,079 --> 00:10:20,560
global variables so you can store them

283
00:10:20,560 --> 00:10:24,320
in a dedicated variable structure

284
00:10:24,320 --> 00:10:27,360
your workflow probably going to connect

285
00:10:27,360 --> 00:10:30,160
to different databases and services so

286
00:10:30,160 --> 00:10:31,839
to secure the connection and the

287
00:10:31,839 --> 00:10:34,320
credentials you have a dedicated

288
00:10:34,320 --> 00:10:37,360
connection structure

289
00:10:37,519 --> 00:10:40,399
and also there is a logging mechanism in

290
00:10:40,399 --> 00:10:42,640
airflow that supports

291
00:10:42,640 --> 00:10:45,120
that provides you logging information

292
00:10:45,120 --> 00:10:48,160
and visibility over the workflows

293
00:10:48,160 --> 00:10:49,120
but

294
00:10:49,120 --> 00:10:52,160
as ryan said we were able to find lots

295
00:10:52,160 --> 00:10:53,760
of credentials

296
00:10:53,760 --> 00:10:56,560
all over the exposed dashboards

297
00:10:56,560 --> 00:11:00,399
so we were able to find api keys to aws

298
00:11:00,399 --> 00:11:02,959
azure gcp

299
00:11:02,959 --> 00:11:05,680
paypal wallet ids and so on

300
00:11:05,680 --> 00:11:07,839
and just to make clear

301
00:11:07,839 --> 00:11:09,519
the logos that you're seeing here we're

302
00:11:09,519 --> 00:11:10,880
not saying that these companies are

303
00:11:10,880 --> 00:11:13,519
compromised we mean that we were able to

304
00:11:13,519 --> 00:11:14,560
find

305
00:11:14,560 --> 00:11:19,119
credentials of users to these services

306
00:11:19,760 --> 00:11:22,240
and the credentials were all over the

307
00:11:22,240 --> 00:11:24,399
dashboards all over the features that we

308
00:11:24,399 --> 00:11:26,240
just covered

309
00:11:26,240 --> 00:11:28,800
so let's dive in and see how it looks

310
00:11:28,800 --> 00:11:32,640
like in the in the dashboard

311
00:11:33,040 --> 00:11:35,680
the first place and the most common

312
00:11:35,680 --> 00:11:38,160
place where we saw the most of the

313
00:11:38,160 --> 00:11:41,279
credentials was actually in the code

314
00:11:41,279 --> 00:11:43,279
because in the dashboard you can see the

315
00:11:43,279 --> 00:11:44,800
code of each task

316
00:11:44,800 --> 00:11:47,519
and insecure coding practices when you

317
00:11:47,519 --> 00:11:50,880
hard code your passwords and api keys in

318
00:11:50,880 --> 00:11:53,120
the code thinking that no one will see

319
00:11:53,120 --> 00:11:53,760
it

320
00:11:53,760 --> 00:11:56,560
but if the dashboard is exposed or the

321
00:11:56,560 --> 00:11:58,480
code is uploaded

322
00:11:58,480 --> 00:12:01,519
anyone can see that

323
00:12:02,240 --> 00:12:04,639
one level of obstruction is when you

324
00:12:04,639 --> 00:12:05,920
take your

325
00:12:05,920 --> 00:12:08,240
credentials and put them in the variable

326
00:12:08,240 --> 00:12:09,519
structure

327
00:12:09,519 --> 00:12:10,959
instead of

328
00:12:10,959 --> 00:12:13,279
saving them in the code you just put it

329
00:12:13,279 --> 00:12:16,079
in the structure and yet it's visible

330
00:12:16,079 --> 00:12:19,040
it's in plain text

331
00:12:20,720 --> 00:12:22,480
the connection structure

332
00:12:22,480 --> 00:12:25,600
is the one and correct way inner flow to

333
00:12:25,600 --> 00:12:27,680
store your credentials for connections

334
00:12:27,680 --> 00:12:31,120
to different servers and services

335
00:12:31,120 --> 00:12:33,279
and the way to do that is to store the

336
00:12:33,279 --> 00:12:36,000
password or the api key in the password

337
00:12:36,000 --> 00:12:37,040
field

338
00:12:37,040 --> 00:12:39,440
where it will get encrypted and it will

339
00:12:39,440 --> 00:12:42,079
not be visible in plain text

340
00:12:42,079 --> 00:12:43,120
however

341
00:12:43,120 --> 00:12:44,240
many

342
00:12:44,240 --> 00:12:46,959
instances that we found the user just

343
00:12:46,959 --> 00:12:49,519
puts the information in the extra field

344
00:12:49,519 --> 00:12:51,839
where it's not getting encrypted and as

345
00:12:51,839 --> 00:12:55,519
you can see it's in plain sight

346
00:12:56,800 --> 00:12:59,279
the logging mechanism in airflow has a

347
00:12:59,279 --> 00:13:02,079
vulnerability that was fixed for airflow

348
00:13:02,079 --> 00:13:03,920
however

349
00:13:03,920 --> 00:13:05,760
the vulnerable versions

350
00:13:05,760 --> 00:13:08,480
had this vulnerability where when you

351
00:13:08,480 --> 00:13:11,120
log in using the cli or input your

352
00:13:11,120 --> 00:13:13,440
credentials in the cli

353
00:13:13,440 --> 00:13:16,560
the data will be stored in plain text in

354
00:13:16,560 --> 00:13:19,200
the dashboard so it's visible

355
00:13:19,200 --> 00:13:21,519
and the same would happen if you use the

356
00:13:21,519 --> 00:13:23,040
password field in the connection

357
00:13:23,040 --> 00:13:25,599
structure

358
00:13:28,320 --> 00:13:30,720
a configuration file file in airflow is

359
00:13:30,720 --> 00:13:32,560
created as soon as you set up your

360
00:13:32,560 --> 00:13:35,279
airflow instance it's one of the first

361
00:13:35,279 --> 00:13:37,360
files that you're probably going to

362
00:13:37,360 --> 00:13:38,959
um to touch

363
00:13:38,959 --> 00:13:40,959
and it contains different settings and

364
00:13:40,959 --> 00:13:43,360
configuration and in previous version

365
00:13:43,360 --> 00:13:46,839
overflow it was actually quite long

366
00:13:46,839 --> 00:13:51,440
um many users they just put the api keys

367
00:13:51,440 --> 00:13:52,800
in this file

368
00:13:52,800 --> 00:13:53,920
which

369
00:13:53,920 --> 00:13:56,399
could be fine however there is a

370
00:13:56,399 --> 00:13:58,720
specific flag that when it's set to true

371
00:13:58,720 --> 00:14:01,040
the configuration file is visible in the

372
00:14:01,040 --> 00:14:03,680
dashboard so back to

373
00:14:03,680 --> 00:14:06,000
if your dashboard is exposed and your

374
00:14:06,000 --> 00:14:08,639
configuration file is exposed your data

375
00:14:08,639 --> 00:14:11,279
is exposed

376
00:14:12,639 --> 00:14:14,320
an ad hoc query

377
00:14:14,320 --> 00:14:16,880
allows you to query your databases that

378
00:14:16,880 --> 00:14:19,120
are connected to the workflow

379
00:14:19,120 --> 00:14:20,959
and it's a very dangerous feature

380
00:14:20,959 --> 00:14:22,399
because

381
00:14:22,399 --> 00:14:23,680
leaving aside the fact that the

382
00:14:23,680 --> 00:14:25,519
dashboard is exposed maybe it's not

383
00:14:25,519 --> 00:14:28,480
exposed but there is no verification of

384
00:14:28,480 --> 00:14:30,480
permissions or authentication so

385
00:14:30,480 --> 00:14:32,880
basically anyone can access and query

386
00:14:32,880 --> 00:14:35,519
the database and on top of that if your

387
00:14:35,519 --> 00:14:38,399
airflow instance is exposed anyone

388
00:14:38,399 --> 00:14:40,560
including the attackers can steal

389
00:14:40,560 --> 00:14:44,920
information using this feature

390
00:14:45,360 --> 00:14:47,680
and now we're left with one question can

391
00:14:47,680 --> 00:14:49,360
we run malware

392
00:14:49,360 --> 00:14:51,680
and the answer is yes

393
00:14:51,680 --> 00:14:54,160
during our research we found lots of

394
00:14:54,160 --> 00:14:58,240
specific and public images of containers

395
00:14:58,240 --> 00:15:00,399
so an attacker could swap the legitimate

396
00:15:00,399 --> 00:15:02,560
image with a malicious image once the

397
00:15:02,560 --> 00:15:04,959
workflow is executed the malicious image

398
00:15:04,959 --> 00:15:06,880
will be pulled and malware will be

399
00:15:06,880 --> 00:15:09,040
executed

400
00:15:09,040 --> 00:15:11,920
another way is using the plugins one of

401
00:15:11,920 --> 00:15:14,160
the plugins in our flow is called code

402
00:15:14,160 --> 00:15:16,720
editor which allows you to

403
00:15:16,720 --> 00:15:19,600
write your code python code and execute

404
00:15:19,600 --> 00:15:21,360
it through the dashboard

405
00:15:21,360 --> 00:15:24,480
so we tested in our own test lab

406
00:15:24,480 --> 00:15:27,120
and we were able to create a crypto

407
00:15:27,120 --> 00:15:31,360
mining container using this code editor

408
00:15:31,360 --> 00:15:34,480
and in the bottom line in airflow case

409
00:15:34,480 --> 00:15:36,639
we were able to find lots of information

410
00:15:36,639 --> 00:15:37,600
that

411
00:15:37,600 --> 00:15:40,160
wasn't supposed to be exposed to anyone

412
00:15:40,160 --> 00:15:42,560
and we could say that airflow is not a

413
00:15:42,560 --> 00:15:45,600
very secure platform but i strongly

414
00:15:45,600 --> 00:15:46,560
believe

415
00:15:46,560 --> 00:15:47,920
that they do

416
00:15:47,920 --> 00:15:49,759
they do it right i mean it's an open

417
00:15:49,759 --> 00:15:51,120
source platform

418
00:15:51,120 --> 00:15:53,040
and they improve they release new

419
00:15:53,040 --> 00:15:55,279
versions they fix their vulnerabilities

420
00:15:55,279 --> 00:15:56,480
they remove

421
00:15:56,480 --> 00:15:59,040
the dangerous features and now it's up

422
00:15:59,040 --> 00:16:01,920
to the users to keep updating their

423
00:16:01,920 --> 00:16:04,920
versions

424
00:16:08,000 --> 00:16:09,759
you very much so

425
00:16:09,759 --> 00:16:11,440
um those case studies were actually

426
00:16:11,440 --> 00:16:13,519
quite spooky i really laugh when we show

427
00:16:13,519 --> 00:16:16,000
those uh airflow slides because

428
00:16:16,000 --> 00:16:18,560
like 90 of it has to be censored because

429
00:16:18,560 --> 00:16:20,399
the amount of passwords and sensitive

430
00:16:20,399 --> 00:16:22,320
information it's what i described as

431
00:16:22,320 --> 00:16:24,639
absurd absolutely absurd just what is

432
00:16:24,639 --> 00:16:26,959
sitting out there on the open and you

433
00:16:26,959 --> 00:16:29,519
know very very big organizations and the

434
00:16:29,519 --> 00:16:31,199
information that you could use the

435
00:16:31,199 --> 00:16:32,240
passwords

436
00:16:32,240 --> 00:16:33,600
you could absolutely ruin an

437
00:16:33,600 --> 00:16:35,279
organization within seconds you know we

438
00:16:35,279 --> 00:16:37,360
we sell stuff like payment information

439
00:16:37,360 --> 00:16:39,279
and everything like you could even steal

440
00:16:39,279 --> 00:16:42,320
money from these organizations it was

441
00:16:42,320 --> 00:16:44,320
honestly really really crazy to see so

442
00:16:44,320 --> 00:16:46,320
i'm thinking okay how do i protect

443
00:16:46,320 --> 00:16:48,839
myself against that

444
00:16:48,839 --> 00:16:51,519
and honestly you may all know this but

445
00:16:51,519 --> 00:16:54,160
the simple term is just the basics

446
00:16:54,160 --> 00:16:56,240
it's really that simple

447
00:16:56,240 --> 00:16:58,240
so you know think about core security

448
00:16:58,240 --> 00:17:01,120
concepts each of these issues on their

449
00:17:01,120 --> 00:17:02,160
own

450
00:17:02,160 --> 00:17:04,319
they might actually be that bad but when

451
00:17:04,319 --> 00:17:06,959
you chain each one of them together it

452
00:17:06,959 --> 00:17:09,520
can lead to some absolutely catastrophic

453
00:17:09,520 --> 00:17:11,839
so if you take the example say you have

454
00:17:11,839 --> 00:17:13,119
a

455
00:17:13,119 --> 00:17:14,799
airflow instance and you've

456
00:17:14,799 --> 00:17:16,880
misconfigured your firewall or your

457
00:17:16,880 --> 00:17:20,160
security group rules within aws so that

458
00:17:20,160 --> 00:17:22,160
means someone can then access your

459
00:17:22,160 --> 00:17:24,959
airflow instance from the outside from

460
00:17:24,959 --> 00:17:26,559
the wider internet

461
00:17:26,559 --> 00:17:28,480
okay problem number one

462
00:17:28,480 --> 00:17:30,960
then maybe you have

463
00:17:30,960 --> 00:17:32,400
uh an

464
00:17:32,400 --> 00:17:35,440
unpatched or you know a lesser version

465
00:17:35,440 --> 00:17:36,559
number of it

466
00:17:36,559 --> 00:17:38,559
it means okay there's no authentication

467
00:17:38,559 --> 00:17:40,000
they are flown eyes so

468
00:17:40,000 --> 00:17:41,200
you know there's nothing stopping you

469
00:17:41,200 --> 00:17:44,160
from just going into the admin dashboard

470
00:17:44,160 --> 00:17:47,039
go there okay problem number two

471
00:17:47,039 --> 00:17:48,960
then you get the look at the code with

472
00:17:48,960 --> 00:17:50,799
something like that there's insecure

473
00:17:50,799 --> 00:17:52,799
coding practices there's passwords

474
00:17:52,799 --> 00:17:54,799
chucked in there sensitive information

475
00:17:54,799 --> 00:17:57,200
links to documents uh we've seen all

476
00:17:57,200 --> 00:17:59,039
sorts the link the

477
00:17:59,039 --> 00:18:01,360
google drive documents and

478
00:18:01,360 --> 00:18:04,320
so say you find some passwords in there

479
00:18:04,320 --> 00:18:07,039
aws keys um perhaps

480
00:18:07,039 --> 00:18:09,520
so you grab some aws keys

481
00:18:09,520 --> 00:18:12,320
then those aws keys they have too many

482
00:18:12,320 --> 00:18:14,000
permissions

483
00:18:14,000 --> 00:18:16,320
you know you fill in sort of your json

484
00:18:16,320 --> 00:18:18,559
file within aws just start

485
00:18:18,559 --> 00:18:20,240
giving yeah whatever you want called

486
00:18:20,240 --> 00:18:23,360
mode go for it so then that has too many

487
00:18:23,360 --> 00:18:27,679
permissions you know admin within aws

488
00:18:27,679 --> 00:18:28,799
you can sort of draw the rest of the

489
00:18:28,799 --> 00:18:30,799
story and think what you can actually do

490
00:18:30,799 --> 00:18:32,880
with it so you know again multiple

491
00:18:32,880 --> 00:18:34,640
points along that chain that you really

492
00:18:34,640 --> 00:18:36,400
could have stopped something but

493
00:18:36,400 --> 00:18:39,679
sadly and when sally was like hundreds

494
00:18:39,679 --> 00:18:42,480
even in some cases thousands that many

495
00:18:42,480 --> 00:18:44,160
people are doing this it's just you can

496
00:18:44,160 --> 00:18:46,080
glide through the whole way so that's

497
00:18:46,080 --> 00:18:48,320
why the basics matter secure coding

498
00:18:48,320 --> 00:18:49,360
practices

499
00:18:49,360 --> 00:18:50,799
even if you think that someone is not

500
00:18:50,799 --> 00:18:52,559
going to see the code you know it's just

501
00:18:52,559 --> 00:18:55,360
internal it's just a test

502
00:18:55,360 --> 00:18:58,960
um you know code is if you assume that

503
00:18:58,960 --> 00:19:00,880
someone that maybe you don't want to

504
00:19:00,880 --> 00:19:03,039
look at it is going to look at it so you

505
00:19:03,039 --> 00:19:06,480
know don't hardcode passwords don't uh

506
00:19:06,480 --> 00:19:08,480
um sort of

507
00:19:08,480 --> 00:19:10,240
add the strings that are going to be

508
00:19:10,240 --> 00:19:12,960
executed as commands afterwards um sort

509
00:19:12,960 --> 00:19:14,960
of really think about that

510
00:19:14,960 --> 00:19:17,120
the code that you're putting out

511
00:19:17,120 --> 00:19:20,160
um obviously patch update

512
00:19:20,160 --> 00:19:21,919
it's maybe you know

513
00:19:21,919 --> 00:19:23,760
too many people said at this point but

514
00:19:23,760 --> 00:19:26,640
it does matter as you saw for airflow

515
00:19:26,640 --> 00:19:29,760
there were cvas that were patched and

516
00:19:29,760 --> 00:19:31,600
you know so you know you want those cves

517
00:19:31,600 --> 00:19:33,600
to be fixed you know vulnerabilities are

518
00:19:33,600 --> 00:19:35,520
exploded all the time

519
00:19:35,520 --> 00:19:37,520
uh and also no there are security

520
00:19:37,520 --> 00:19:39,679
updates hot on that you know these these

521
00:19:39,679 --> 00:19:41,600
the people that maintain and develop

522
00:19:41,600 --> 00:19:42,960
these projects they do care about

523
00:19:42,960 --> 00:19:44,799
security they'll add more security

524
00:19:44,799 --> 00:19:47,120
features over time and so please do

525
00:19:47,120 --> 00:19:48,000
patch

526
00:19:48,000 --> 00:19:49,600
secure configuration

527
00:19:49,600 --> 00:19:51,760
you know don't think that just

528
00:19:51,760 --> 00:19:53,200
like the most basic configuration that

529
00:19:53,200 --> 00:19:56,160
you give is secure you know really do

530
00:19:56,160 --> 00:19:58,559
your reading behind and you know

531
00:19:58,559 --> 00:20:00,400
consider what

532
00:20:00,400 --> 00:20:02,799
the configuration of your application

533
00:20:02,799 --> 00:20:04,000
looks like

534
00:20:04,000 --> 00:20:05,919
to people from the outside and you know

535
00:20:05,919 --> 00:20:07,760
can they exploit that

536
00:20:07,760 --> 00:20:10,400
without permissions you know follow the

537
00:20:10,400 --> 00:20:13,039
principle of least privilege

538
00:20:13,039 --> 00:20:15,440
it's sometimes kind of painful to define

539
00:20:15,440 --> 00:20:17,520
and sometimes you might have

540
00:20:17,520 --> 00:20:20,880
arguments with your engineers but

541
00:20:20,880 --> 00:20:22,720
sadly we've seen a lot of times where

542
00:20:22,720 --> 00:20:24,640
the convenient thing to do is also the

543
00:20:24,640 --> 00:20:26,960
thing that is really going to sting you

544
00:20:26,960 --> 00:20:30,320
uh so later on and with that a

545
00:20:30,320 --> 00:20:31,280
a

546
00:20:31,280 --> 00:20:33,679
defense and death strategy you know as i

547
00:20:33,679 --> 00:20:35,679
sort of said with the chain of issues at

548
00:20:35,679 --> 00:20:37,360
the top you know

549
00:20:37,360 --> 00:20:39,440
sometimes you know it's inevitable that

550
00:20:39,440 --> 00:20:40,640
uh

551
00:20:40,640 --> 00:20:42,240
there are you know new vulnerabilities

552
00:20:42,240 --> 00:20:43,520
all the time you know people make

553
00:20:43,520 --> 00:20:46,240
mistakes engineers are even stressed

554
00:20:46,240 --> 00:20:47,760
sometimes you know they've sort of got

555
00:20:47,760 --> 00:20:50,000
deadlines and you know they'll never get

556
00:20:50,000 --> 00:20:51,360
stuff done quick

557
00:20:51,360 --> 00:20:54,159
and you kind of have to take account for

558
00:20:54,159 --> 00:20:55,600
that you know a bit like having backups

559
00:20:55,600 --> 00:20:57,600
around somewhere you know you've got the

560
00:20:57,600 --> 00:20:59,360
plan for the eventual holiday that some

561
00:20:59,360 --> 00:21:01,600
of your layers of defense will feel so

562
00:21:01,600 --> 00:21:03,200
that's why you must have a defense and

563
00:21:03,200 --> 00:21:04,480
death strategy

564
00:21:04,480 --> 00:21:05,760
um one thing that i really like to

565
00:21:05,760 --> 00:21:08,480
highlight i'll even point it the default

566
00:21:08,480 --> 00:21:10,400
configuration is not the same as the

567
00:21:10,400 --> 00:21:12,480
secure configuration so if you're using

568
00:21:12,480 --> 00:21:14,880
something like you know say cube cuddle

569
00:21:14,880 --> 00:21:18,640
apply uh quickstart.yaml thing

570
00:21:18,640 --> 00:21:21,280
don't use that in production you know um

571
00:21:21,280 --> 00:21:22,960
usually the quickstart is just something

572
00:21:22,960 --> 00:21:25,039
to get you up and running to really sort

573
00:21:25,039 --> 00:21:27,679
of you know sort of kind of

574
00:21:27,679 --> 00:21:28,799
test the waters you know of the

575
00:21:28,799 --> 00:21:30,400
application that you're using

576
00:21:30,400 --> 00:21:31,919
understand that it's really not the

577
00:21:31,919 --> 00:21:33,679
secure configuration

578
00:21:33,679 --> 00:21:35,600
again so something that's nice over time

579
00:21:35,600 --> 00:21:37,760
we do see things get kind of more secure

580
00:21:37,760 --> 00:21:39,760
especially with like kubernetes now it's

581
00:21:39,760 --> 00:21:41,440
actually out of the box

582
00:21:41,440 --> 00:21:43,600
cooper now this is kind of hard to

583
00:21:43,600 --> 00:21:45,520
misconfigure now

584
00:21:45,520 --> 00:21:47,440
the documentation is your friend each

585
00:21:47,440 --> 00:21:49,840
one of these products that we have shown

586
00:21:49,840 --> 00:21:51,760
there is a dedicated security page for

587
00:21:51,760 --> 00:21:52,400
it

588
00:21:52,400 --> 00:21:54,559
read it genuinely there's some very good

589
00:21:54,559 --> 00:21:56,159
information and it'll explain the

590
00:21:56,159 --> 00:21:57,440
concepts

591
00:21:57,440 --> 00:21:59,840
within there

592
00:22:01,280 --> 00:22:03,440
so the positive chance as i've sort of

593
00:22:03,440 --> 00:22:06,000
hinted to him uh fiore many open source

594
00:22:06,000 --> 00:22:07,600
projects take security seriously you

595
00:22:07,600 --> 00:22:09,840
know they're being actively maintained

596
00:22:09,840 --> 00:22:12,720
in the case of airflow there are

597
00:22:12,720 --> 00:22:15,280
i think thousands of contributors so

598
00:22:15,280 --> 00:22:16,799
there's a lot of eyes on it there's a

599
00:22:16,799 --> 00:22:19,120
lot of people using it and you know the

600
00:22:19,120 --> 00:22:20,480
feedback for security gets in these

601
00:22:20,480 --> 00:22:22,400
products they take it seriously

602
00:22:22,400 --> 00:22:23,280
um

603
00:22:23,280 --> 00:22:25,520
i said they're the dedicated security

604
00:22:25,520 --> 00:22:26,400
pages

605
00:22:26,400 --> 00:22:28,480
genuinely read them you know this here

606
00:22:28,480 --> 00:22:30,880
talks about you know permissions and you

607
00:22:30,880 --> 00:22:33,280
know controller security and really

608
00:22:33,280 --> 00:22:34,960
really helpful information helps

609
00:22:34,960 --> 00:22:36,240
understand you know if you don't

610
00:22:36,240 --> 00:22:37,840
understand some of the terminology on

611
00:22:37,840 --> 00:22:40,240
the website you know it'll it'll help

612
00:22:40,240 --> 00:22:41,679
these sort of things

613
00:22:41,679 --> 00:22:44,559
also um there are patches released you

614
00:22:44,559 --> 00:22:46,159
know um

615
00:22:46,159 --> 00:22:47,679
it might not be the most fun thing to

616
00:22:47,679 --> 00:22:49,520
read in the world sort of change logs

617
00:22:49,520 --> 00:22:50,320
and

618
00:22:50,320 --> 00:22:52,000
sort of bug fixes but

619
00:22:52,000 --> 00:22:53,440
you know maybe you could open up

620
00:22:53,440 --> 00:22:55,440
something like this to control f and

621
00:22:55,440 --> 00:22:57,600
look for like security you know like

622
00:22:57,600 --> 00:22:59,039
they're pretty open when something is

623
00:22:59,039 --> 00:23:01,600
patched for security reasons

624
00:23:01,600 --> 00:23:04,240
uh and also what's nice is that um

625
00:23:04,240 --> 00:23:07,039
it's being covered in the media whenever

626
00:23:07,039 --> 00:23:08,640
a big attack happens against like open

627
00:23:08,640 --> 00:23:10,480
source software you know whether it be

628
00:23:10,480 --> 00:23:13,039
wordpress or you know argo workflows in

629
00:23:13,039 --> 00:23:15,120
this case airflow it is covered by the

630
00:23:15,120 --> 00:23:16,240
media so

631
00:23:16,240 --> 00:23:18,559
you know even if you have sort of like

632
00:23:18,559 --> 00:23:20,799
your google news set up like

633
00:23:20,799 --> 00:23:21,840
you'll get these stories straight

634
00:23:21,840 --> 00:23:23,520
through your phone and you know

635
00:23:23,520 --> 00:23:25,039
it's it's almost like a sort of

636
00:23:25,039 --> 00:23:26,880
intelligence thing like genuinely keep

637
00:23:26,880 --> 00:23:28,320
an eye out on the products that you're

638
00:23:28,320 --> 00:23:30,720
using and it'll be in the news

639
00:23:30,720 --> 00:23:32,799
and what's nice is that there are many

640
00:23:32,799 --> 00:23:34,559
many open source tools and many

641
00:23:34,559 --> 00:23:35,840
developers

642
00:23:35,840 --> 00:23:37,440
it's i think it's awesome intact there's

643
00:23:37,440 --> 00:23:39,760
so much open source and openness about

644
00:23:39,760 --> 00:23:41,760
uh you know about security and there are

645
00:23:41,760 --> 00:23:43,760
tools to help with that so

646
00:23:43,760 --> 00:23:46,799
a list of uh

647
00:23:47,919 --> 00:23:49,840
a list of my favorite open source tools

648
00:23:49,840 --> 00:23:51,360
i'll not go through every single one of

649
00:23:51,360 --> 00:23:53,919
these but i want to highlight

650
00:23:53,919 --> 00:23:55,440
i really like

651
00:23:55,440 --> 00:23:58,000
get secrets um what git secrets will do

652
00:23:58,000 --> 00:23:59,120
is um

653
00:23:59,120 --> 00:24:00,640
it will stop you from committing

654
00:24:00,640 --> 00:24:03,120
passwords and keys if you go to commit

655
00:24:03,120 --> 00:24:05,279
it it'll sort of stop you from doing go

656
00:24:05,279 --> 00:24:07,279
hey do you want to commit that hardcore

657
00:24:07,279 --> 00:24:10,080
password then yeah maybe not uh

658
00:24:10,080 --> 00:24:12,720
custodian is great you define uh sort of

659
00:24:12,720 --> 00:24:14,720
security policies in yaml you can use

660
00:24:14,720 --> 00:24:17,520
like cloud functions or things like

661
00:24:17,520 --> 00:24:20,960
aws lambda and you can uh

662
00:24:20,960 --> 00:24:22,400
sort of run that defined policy

663
00:24:22,400 --> 00:24:24,159
violations within your cloud environment

664
00:24:24,159 --> 00:24:26,880
and i like magpie as well i've had sort

665
00:24:26,880 --> 00:24:28,720
of ceases coming and go you know around

666
00:24:28,720 --> 00:24:30,400
what are we running that's exposed to

667
00:24:30,400 --> 00:24:32,720
the wider internet so

668
00:24:32,720 --> 00:24:35,039
oh i don't even know what we have um

669
00:24:35,039 --> 00:24:36,799
that'll help you basically do asset

670
00:24:36,799 --> 00:24:38,799
discovery and figure out you know how

671
00:24:38,799 --> 00:24:40,960
can you sort of defend something if you

672
00:24:40,960 --> 00:24:43,039
don't even know if it exists

673
00:24:43,039 --> 00:24:44,080
um

674
00:24:44,080 --> 00:24:46,880
and sort of with that

675
00:24:46,880 --> 00:24:49,760
these are the uh qr codes to the blogs

676
00:24:49,760 --> 00:24:52,480
um one for airflow one for argo uh

677
00:24:52,480 --> 00:24:53,840
really really interesting please take a

678
00:24:53,840 --> 00:24:55,279
look at it and

679
00:24:55,279 --> 00:24:56,960
thank you very much do you have any

680
00:24:56,960 --> 00:24:58,710
questions

681
00:24:58,710 --> 00:25:07,559
[Applause]

682
00:25:13,440 --> 00:25:16,159
possibly not

683
00:25:18,080 --> 00:25:18,960
all right

684
00:25:18,960 --> 00:25:21,279
uh thank you so much uh

685
00:25:21,279 --> 00:25:23,279
as there are no questions i'm

686
00:25:23,279 --> 00:25:26,000
sure that everything is crystal clear so

687
00:25:26,000 --> 00:25:27,279
yeah okay

688
00:25:27,279 --> 00:25:28,799
so uh

689
00:25:28,799 --> 00:25:30,400
ryan will be with this for the next talk

690
00:25:30,400 --> 00:25:33,760
as well and i'm sure you also can uh

691
00:25:33,760 --> 00:25:35,679
talk to them uh after the presentation

692
00:25:35,679 --> 00:25:38,000
if there are anything uh

693
00:25:38,000 --> 00:25:40,320
else you'd like to ask about uh this is

694
00:25:40,320 --> 00:25:43,520
a sensible matter so might uh might not

695
00:25:43,520 --> 00:25:45,120
everybody want to ask him for an open

696
00:25:45,120 --> 00:25:46,480
mic uh

697
00:25:46,480 --> 00:25:48,159
and i'm sure some of us are going to go

698
00:25:48,159 --> 00:25:49,919
back and check

699
00:25:49,919 --> 00:25:52,559
our configurations now

700
00:25:52,559 --> 00:25:53,520
um

701
00:25:53,520 --> 00:25:56,400
so uh with that said uh

702
00:25:56,400 --> 00:25:59,200
thank you very much uh to interester and

703
00:25:59,200 --> 00:26:01,840
uh ryan nicole and um

704
00:26:01,840 --> 00:26:03,039
we'll have a short break and we're back

705
00:26:03,039 --> 00:26:07,158
soon thank you very much

