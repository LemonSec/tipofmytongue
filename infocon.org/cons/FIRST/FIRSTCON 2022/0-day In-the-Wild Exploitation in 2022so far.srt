1
00:00:05,870 --> 00:00:08,480
[Music]

2
00:00:08,480 --> 00:00:12,240
good afternoon or morning yeah

3
00:00:12,240 --> 00:00:14,480
good time of day

4
00:00:14,480 --> 00:00:16,480
i'm leonel ferret working for the

5
00:00:16,480 --> 00:00:18,720
belgian national site and i'm i'm your

6
00:00:18,720 --> 00:00:21,439
session chair for this morning

7
00:00:21,439 --> 00:00:24,080
uh or next and last presentation of the

8
00:00:24,080 --> 00:00:27,199
morning standing between you and lunch

9
00:00:27,199 --> 00:00:28,560
is uh

10
00:00:28,560 --> 00:00:31,199
maddie stone from researcher and the

11
00:00:31,199 --> 00:00:32,880
google

12
00:00:32,880 --> 00:00:34,800
project zero

13
00:00:34,800 --> 00:00:37,920
she's got a presentation about zero day

14
00:00:37,920 --> 00:00:40,079
uh exploits

15
00:00:40,079 --> 00:00:41,760
uh seen this year

16
00:00:41,760 --> 00:00:43,520
so this is going to be

17
00:00:43,520 --> 00:00:46,160
quite entertaining i believe please

18
00:00:46,160 --> 00:00:48,079
remember to

19
00:00:48,079 --> 00:00:50,800
turn off your noisy devices please

20
00:00:50,800 --> 00:00:54,399
remember also to

21
00:00:55,120 --> 00:00:56,640
fill in the

22
00:00:56,640 --> 00:00:59,199
surveys in your mobile applications

23
00:00:59,199 --> 00:01:00,480
there will be

24
00:01:00,480 --> 00:01:02,320
four questions there are mike's carton

25
00:01:02,320 --> 00:01:04,799
in the room you've seen them so without

26
00:01:04,799 --> 00:01:08,960
further ado let's give a warm welcome

27
00:01:09,360 --> 00:01:11,680
good morning or afternoon

28
00:01:11,680 --> 00:01:13,280
he stole my joke about standing in

29
00:01:13,280 --> 00:01:17,520
between y'all and lunchtime but you know

30
00:01:17,520 --> 00:01:19,439
so yes we're going to talk about the

31
00:01:19,439 --> 00:01:22,240
zero day exploits that we've seen

32
00:01:22,240 --> 00:01:24,799
actively exploited in the wild so far in

33
00:01:24,799 --> 00:01:28,400
2022 my name is matty stone and i am a

34
00:01:28,400 --> 00:01:30,640
security researcher on google project

35
00:01:30,640 --> 00:01:32,560
zero

36
00:01:32,560 --> 00:01:34,720
so before we dive further into this

37
00:01:34,720 --> 00:01:36,240
let's make sure we're all working from

38
00:01:36,240 --> 00:01:38,799
the same definition what is a zero

39
00:01:38,799 --> 00:01:41,119
zero-day exploit so the definition that

40
00:01:41,119 --> 00:01:43,040
i'm using is one where

41
00:01:43,040 --> 00:01:45,439
it is an exploit that is exploiting the

42
00:01:45,439 --> 00:01:47,439
vulnerabilities that defenders don't yet

43
00:01:47,439 --> 00:01:50,079
know about so these are the ones that we

44
00:01:50,079 --> 00:01:51,520
don't realize there's a hole there

45
00:01:51,520 --> 00:01:53,360
there's no patch available there's no

46
00:01:53,360 --> 00:01:55,439
specific signatures or detections to

47
00:01:55,439 --> 00:01:56,479
find it

48
00:01:56,479 --> 00:01:58,399
so you're basically trying to protect

49
00:01:58,399 --> 00:02:00,079
people from vulnerabilities you don't

50
00:02:00,079 --> 00:02:01,920
know actually exist and that's why i

51
00:02:01,920 --> 00:02:03,840
think it's fun

52
00:02:03,840 --> 00:02:06,799
and it matters a lot it feels like every

53
00:02:06,799 --> 00:02:09,280
single week we're seeing new headlines

54
00:02:09,280 --> 00:02:11,680
about zero day exploitation

55
00:02:11,680 --> 00:02:14,239
and while zero day exploitation as an

56
00:02:14,239 --> 00:02:17,360
absolute number of tax might not be all

57
00:02:17,360 --> 00:02:18,560
that large

58
00:02:18,560 --> 00:02:20,959
we believe they have an outsized impact

59
00:02:20,959 --> 00:02:22,480
on society

60
00:02:22,480 --> 00:02:25,920
so even though me you

61
00:02:25,920 --> 00:02:27,920
certain organizations may not need to

62
00:02:27,920 --> 00:02:31,920
individually worry about these zero days

63
00:02:31,920 --> 00:02:34,800
it affects us when they're targeting our

64
00:02:34,800 --> 00:02:36,640
journalists our government officials our

65
00:02:36,640 --> 00:02:38,239
human rights defenders critical

66
00:02:38,239 --> 00:02:39,440
companies

67
00:02:39,440 --> 00:02:41,680
all of that those attacks still come

68
00:02:41,680 --> 00:02:44,080
back and change the way influence our

69
00:02:44,080 --> 00:02:46,160
lives

70
00:02:46,160 --> 00:02:48,239
and so yep

71
00:02:48,239 --> 00:02:50,640
i walk too far away

72
00:02:50,640 --> 00:02:53,519
so that leads me to my team google

73
00:02:53,519 --> 00:02:54,800
project zero

74
00:02:54,800 --> 00:02:58,159
our mission is make zero day hard we

75
00:02:58,159 --> 00:03:00,239
want to protect users from the harm that

76
00:03:00,239 --> 00:03:03,280
comes with being exploited by zero days

77
00:03:03,280 --> 00:03:05,599
prime project zero has primarily worked

78
00:03:05,599 --> 00:03:07,040
towards that mission through offensive

79
00:03:07,040 --> 00:03:08,800
security work

80
00:03:08,800 --> 00:03:11,599
we our team finds new vulnerabilities

81
00:03:11,599 --> 00:03:13,680
hoping to collide with the attackers

82
00:03:13,680 --> 00:03:15,680
meaning find the same bugs but instead

83
00:03:15,680 --> 00:03:18,000
of exploiting them against people we go

84
00:03:18,000 --> 00:03:20,400
ahead and report them and get them fixed

85
00:03:20,400 --> 00:03:22,080
and this is not just for google products

86
00:03:22,080 --> 00:03:23,920
we do it for basically any products that

87
00:03:23,920 --> 00:03:25,760
have a large global

88
00:03:25,760 --> 00:03:28,879
consumer customer base so we do this for

89
00:03:28,879 --> 00:03:29,760
apple

90
00:03:29,760 --> 00:03:33,440
android chrome firefox etc etc

91
00:03:33,440 --> 00:03:34,319
and

92
00:03:34,319 --> 00:03:36,640
while that's what most my team does

93
00:03:36,640 --> 00:03:39,120
i work a little bit differently for the

94
00:03:39,120 --> 00:03:41,760
last three years i've led a program that

95
00:03:41,760 --> 00:03:43,519
is focused on the zero days that are

96
00:03:43,519 --> 00:03:46,720
actively exploited in the wild so not

97
00:03:46,720 --> 00:03:49,040
the zero days that could be exploited

98
00:03:49,040 --> 00:03:51,120
and were found by security researchers

99
00:03:51,120 --> 00:03:54,560
the ones actually used against people

100
00:03:54,560 --> 00:03:57,040
and the goal is to then learn as much as

101
00:03:57,040 --> 00:03:58,720
we possibly can

102
00:03:58,720 --> 00:04:01,680
from those zero days to then

103
00:04:01,680 --> 00:04:03,599
influence new

104
00:04:03,599 --> 00:04:05,360
structural improvements

105
00:04:05,360 --> 00:04:06,480
or

106
00:04:06,480 --> 00:04:08,640
exploit mitigations or things like that

107
00:04:08,640 --> 00:04:11,280
and make zero day hard

108
00:04:11,280 --> 00:04:13,519
so i always want all the data and my

109
00:04:13,519 --> 00:04:15,920
conclusions to be peer reviewable or for

110
00:04:15,920 --> 00:04:18,000
you all to be able to contribute or use

111
00:04:18,000 --> 00:04:20,238
it however you want so all of the zero

112
00:04:20,238 --> 00:04:22,479
days i'm talking about today we track in

113
00:04:22,479 --> 00:04:24,479
a public spreadsheet going back to

114
00:04:24,479 --> 00:04:26,960
mid-2014

115
00:04:26,960 --> 00:04:29,840
and we also have a public github

116
00:04:29,840 --> 00:04:32,639
repository that we try to have

117
00:04:32,639 --> 00:04:35,919
be a central repository to find anything

118
00:04:35,919 --> 00:04:37,919
or all the details about zero days that

119
00:04:37,919 --> 00:04:40,320
are actively exploited in the wild and

120
00:04:40,320 --> 00:04:41,440
so

121
00:04:41,440 --> 00:04:42,720
since i started this there's been a

122
00:04:42,720 --> 00:04:44,880
whole lot more zero days detected and

123
00:04:44,880 --> 00:04:47,520
discovered so i do take pull requests

124
00:04:47,520 --> 00:04:49,680
too if you would like to perform some of

125
00:04:49,680 --> 00:04:52,240
these analyses

126
00:04:52,240 --> 00:04:55,520
so getting back to make zero day hard

127
00:04:55,520 --> 00:04:57,919
what does that actually mean

128
00:04:57,919 --> 00:05:00,400
we want to or we can sort of break it

129
00:05:00,400 --> 00:05:02,639
into two different things first we want

130
00:05:02,639 --> 00:05:06,080
to increase the cost per exploit

131
00:05:06,080 --> 00:05:09,520
cost not meaning price cost meaning

132
00:05:09,520 --> 00:05:10,560
money

133
00:05:10,560 --> 00:05:13,360
sure but also the time and the expertise

134
00:05:13,360 --> 00:05:15,440
required to build these zero-day

135
00:05:15,440 --> 00:05:16,800
capabilities

136
00:05:16,800 --> 00:05:19,520
are you able to you know have a new grad

137
00:05:19,520 --> 00:05:21,919
come never looked at the attack surface

138
00:05:21,919 --> 00:05:24,080
before but train up for spin up for

139
00:05:24,080 --> 00:05:26,960
maybe three months and have an active

140
00:05:26,960 --> 00:05:28,560
zero day exploit

141
00:05:28,560 --> 00:05:30,479
or does this require someone who has

142
00:05:30,479 --> 00:05:32,560
been focused solely on that attack

143
00:05:32,560 --> 00:05:34,560
surface for years and years and years

144
00:05:34,560 --> 00:05:35,600
for them to be able to build that

145
00:05:35,600 --> 00:05:37,919
capability that's what we mean by

146
00:05:37,919 --> 00:05:40,320
increasing the cost per exploit and the

147
00:05:40,320 --> 00:05:42,479
second part is then increasing the

148
00:05:42,479 --> 00:05:45,039
number of exploits required to maintain

149
00:05:45,039 --> 00:05:47,199
the same capability

150
00:05:47,199 --> 00:05:49,039
so currently today

151
00:05:49,039 --> 00:05:50,720
if an attacker wants to have a

152
00:05:50,720 --> 00:05:52,560
capability where

153
00:05:52,560 --> 00:05:55,680
they want to remotely infect a phone

154
00:05:55,680 --> 00:05:58,240
where the user clicks a url or a link

155
00:05:58,240 --> 00:06:00,000
and it opens in their browser they

156
00:06:00,000 --> 00:06:02,960
largely need three zero days each of

157
00:06:02,960 --> 00:06:04,720
them exploited and then chained together

158
00:06:04,720 --> 00:06:06,720
to get that capability you have your

159
00:06:06,720 --> 00:06:08,960
renderer from the browser rce remote

160
00:06:08,960 --> 00:06:10,720
code execution then you need your

161
00:06:10,720 --> 00:06:13,120
browser sandbox escape and finally the

162
00:06:13,120 --> 00:06:16,160
local privilege escalation

163
00:06:16,160 --> 00:06:18,160
what harder will look like is that we've

164
00:06:18,160 --> 00:06:20,319
added so many more security boundaries

165
00:06:20,319 --> 00:06:22,560
within there that now to maintain that

166
00:06:22,560 --> 00:06:24,960
same capability of

167
00:06:24,960 --> 00:06:26,960
you you have a user click a link and

168
00:06:26,960 --> 00:06:29,199
then can remotely own their phone

169
00:06:29,199 --> 00:06:31,360
we now require five is to have that

170
00:06:31,360 --> 00:06:33,520
capability so that's an example of

171
00:06:33,520 --> 00:06:36,400
making it harder

172
00:06:36,800 --> 00:06:38,639
this is also some more descriptions of

173
00:06:38,639 --> 00:06:40,800
what it will look like when zero day is

174
00:06:40,800 --> 00:06:42,240
harder

175
00:06:42,240 --> 00:06:44,000
attackers to have their capabilities

176
00:06:44,000 --> 00:06:45,759
will have to discover whole new bug

177
00:06:45,759 --> 00:06:47,520
classes they're not going to be able to

178
00:06:47,520 --> 00:06:49,360
use the use after freeze and the buffer

179
00:06:49,360 --> 00:06:51,440
overflows and all these patterns and

180
00:06:51,440 --> 00:06:53,280
shapes that we've been seeing for years

181
00:06:53,280 --> 00:06:54,720
and years and years they're going to

182
00:06:54,720 --> 00:06:57,199
have to do something really novel to be

183
00:06:57,199 --> 00:06:59,280
able to find a vulnerability

184
00:06:59,280 --> 00:07:00,560
they're going to have to work on attack

185
00:07:00,560 --> 00:07:02,560
surfaces that don't have documentation

186
00:07:02,560 --> 00:07:05,360
yet that there is not um previous

187
00:07:05,360 --> 00:07:07,440
research on that they can just build

188
00:07:07,440 --> 00:07:09,039
upon they're going to have to find

189
00:07:09,039 --> 00:07:10,479
something new that no one's thought of

190
00:07:10,479 --> 00:07:12,639
as an attack surface yet

191
00:07:12,639 --> 00:07:13,759
they're not going to be able to use

192
00:07:13,759 --> 00:07:15,520
their previous or others previous

193
00:07:15,520 --> 00:07:17,520
exploitation techniques because to have

194
00:07:17,520 --> 00:07:19,280
a zero day exploit it's not just having

195
00:07:19,280 --> 00:07:21,199
that zero day vulnerability you also

196
00:07:21,199 --> 00:07:22,639
have to come up with a way to exploit it

197
00:07:22,639 --> 00:07:24,479
and make it useful

198
00:07:24,479 --> 00:07:26,800
and so coming up with ways that they

199
00:07:26,800 --> 00:07:30,160
can't just plug and play a new

200
00:07:30,160 --> 00:07:31,919
vulnerability into their existing

201
00:07:31,919 --> 00:07:33,360
exploit framework

202
00:07:33,360 --> 00:07:36,000
because it's generally accepted that

203
00:07:36,000 --> 00:07:37,840
vendors should fix vulnerabilities when

204
00:07:37,840 --> 00:07:39,440
they're reported to them

205
00:07:39,440 --> 00:07:42,560
it is not yet standard that

206
00:07:42,560 --> 00:07:45,680
vendors will mitigate exploit techniques

207
00:07:45,680 --> 00:07:48,160
that are used

208
00:07:48,160 --> 00:07:50,720
and last sort of example of what it will

209
00:07:50,720 --> 00:07:51,680
look like

210
00:07:51,680 --> 00:07:53,919
when zero day is hard is that exploits

211
00:07:53,919 --> 00:07:56,879
will only be used very selectively in

212
00:07:56,879 --> 00:07:59,520
the most highly targeted attacks

213
00:07:59,520 --> 00:08:00,879
some of y'all might think this is the

214
00:08:00,879 --> 00:08:03,440
case now and while yes zero days are

215
00:08:03,440 --> 00:08:06,800
used and more targeted more selectively

216
00:08:06,800 --> 00:08:09,919
than say in days or fishing

217
00:08:09,919 --> 00:08:11,840
we don't think that it's selective

218
00:08:11,840 --> 00:08:13,039
enough

219
00:08:13,039 --> 00:08:15,440
it shows us when attackers are willing

220
00:08:15,440 --> 00:08:17,120
to use these zero days and things like

221
00:08:17,120 --> 00:08:19,599
watering hole attacks where they will

222
00:08:19,599 --> 00:08:22,560
infect every user who goes to a certain

223
00:08:22,560 --> 00:08:24,639
website because they want to attack a

224
00:08:24,639 --> 00:08:26,960
whole population of people

225
00:08:26,960 --> 00:08:29,039
if they're willing to burn it by

226
00:08:29,039 --> 00:08:31,039
spreading it that widely then that means

227
00:08:31,039 --> 00:08:32,719
it's not valuable enough to them it

228
00:08:32,719 --> 00:08:34,880
means they have too many options in the

229
00:08:34,880 --> 00:08:37,039
background to replace with it and so

230
00:08:37,039 --> 00:08:39,360
that's why we need to see it used more

231
00:08:39,360 --> 00:08:41,839
selectively

232
00:08:42,559 --> 00:08:44,640
so if that's what zero day looks like

233
00:08:44,640 --> 00:08:46,320
when it's hard

234
00:08:46,320 --> 00:08:48,480
spoiler currently i don't think zero day

235
00:08:48,480 --> 00:08:50,000
is hard

236
00:08:50,000 --> 00:08:52,000
and the reason being when we look at

237
00:08:52,000 --> 00:08:54,959
these zero days from 2022 thus far there

238
00:08:54,959 --> 00:08:57,040
have been 18

239
00:08:57,040 --> 00:08:59,360
9 of those 18s

240
00:08:59,360 --> 00:09:03,519
are variants of previously patched bugs

241
00:09:03,519 --> 00:09:05,920
they look very close to bugs we've seen

242
00:09:05,920 --> 00:09:07,600
before and that have been reported to

243
00:09:07,600 --> 00:09:09,839
vendors

244
00:09:09,839 --> 00:09:11,279
on top of that

245
00:09:11,279 --> 00:09:14,240
four of these 18 are variants of in the

246
00:09:14,240 --> 00:09:16,959
wild zero days from 2021

247
00:09:16,959 --> 00:09:19,440
so we detected them the industry knows

248
00:09:19,440 --> 00:09:21,760
about them they were disclosed

249
00:09:21,760 --> 00:09:23,360
and yet the attackers were able to come

250
00:09:23,360 --> 00:09:25,839
back generally less than 12 months later

251
00:09:25,839 --> 00:09:27,839
and have a whole new zero day capability

252
00:09:27,839 --> 00:09:31,200
because that was not patched completely

253
00:09:31,200 --> 00:09:32,959
and comprehensively

254
00:09:32,959 --> 00:09:35,839
this stat hurts it hurts me a lot

255
00:09:35,839 --> 00:09:37,279
and you know maybe it's because i've

256
00:09:37,279 --> 00:09:39,839
been studying zero days in the wild for

257
00:09:39,839 --> 00:09:41,279
the last three years and i'd love to be

258
00:09:41,279 --> 00:09:42,880
able to say you know it's making this

259
00:09:42,880 --> 00:09:45,200
difference which the stat

260
00:09:45,200 --> 00:09:47,440
makes it harder to say i'll still hope

261
00:09:47,440 --> 00:09:49,760
i'm making a difference any manager who

262
00:09:49,760 --> 00:09:51,680
may watch this and is in charge of my

263
00:09:51,680 --> 00:09:54,000
perf

264
00:09:54,320 --> 00:09:56,399
but

265
00:09:56,399 --> 00:09:59,519
it is the failure case for attackers if

266
00:09:59,519 --> 00:10:02,560
we find and detect their zero days and

267
00:10:02,560 --> 00:10:04,880
so as defenders we want to capitalize as

268
00:10:04,880 --> 00:10:07,040
much as possible on that

269
00:10:07,040 --> 00:10:08,640
it's highlighted with a yellow thing

270
00:10:08,640 --> 00:10:10,480
saying someone's able to exploit this

271
00:10:10,480 --> 00:10:13,279
and did so let's use that information to

272
00:10:13,279 --> 00:10:15,360
block all the others but that wasn't the

273
00:10:15,360 --> 00:10:18,320
case for four of these

274
00:10:18,320 --> 00:10:19,760
and i think it's also hard because this

275
00:10:19,760 --> 00:10:22,240
is not the first time we're talking

276
00:10:22,240 --> 00:10:24,720
about how variants are able to be used

277
00:10:24,720 --> 00:10:27,040
successfully as zero day exploits

278
00:10:27,040 --> 00:10:29,040
we actually wrote in our project zero

279
00:10:29,040 --> 00:10:31,360
2020 year in review of actively

280
00:10:31,360 --> 00:10:35,120
exploited zero days that then 25

281
00:10:35,120 --> 00:10:37,519
of the zero days detected in 2020 were

282
00:10:37,519 --> 00:10:40,079
variants of previously patched bugs so

283
00:10:40,079 --> 00:10:44,479
this is seeming to be a long-term trend

284
00:10:45,040 --> 00:10:46,399
so before

285
00:10:46,399 --> 00:10:49,519
i get into how can we possibly address

286
00:10:49,519 --> 00:10:50,800
this problem

287
00:10:50,800 --> 00:10:52,800
i first want to show you what does it

288
00:10:52,800 --> 00:10:55,040
mean how close are these when i'm saying

289
00:10:55,040 --> 00:10:57,279
their variants what went wrong that

290
00:10:57,279 --> 00:10:59,440
allowed them to be exploited again

291
00:10:59,440 --> 00:11:01,519
i know we have a mixed audience here so

292
00:11:01,519 --> 00:11:03,440
if vulnerability research is not your

293
00:11:03,440 --> 00:11:05,760
thing just bear with me i promise the

294
00:11:05,760 --> 00:11:07,839
slides of code will end before you know

295
00:11:07,839 --> 00:11:10,000
it

296
00:11:10,079 --> 00:11:11,760
so the first up the first one we're

297
00:11:11,760 --> 00:11:13,680
going to talk about is actually the

298
00:11:13,680 --> 00:11:15,440
first zero day that was disclosed this

299
00:11:15,440 --> 00:11:18,480
year it was patched in january and it is

300
00:11:18,480 --> 00:11:20,640
a bug in windows or

301
00:11:20,640 --> 00:11:22,560
win32k

302
00:11:22,560 --> 00:11:25,120
so this 2022 in the wild was patched in

303
00:11:25,120 --> 00:11:27,760
january as i said and it is a very close

304
00:11:27,760 --> 00:11:29,360
variant to

305
00:11:29,360 --> 00:11:30,240
a

306
00:11:30,240 --> 00:11:31,760
in the wild that was patched last

307
00:11:31,760 --> 00:11:34,000
february in 2021

308
00:11:34,000 --> 00:11:36,560
turns out it's the exact same bug

309
00:11:36,560 --> 00:11:39,040
just triggered in different ways so the

310
00:11:39,040 --> 00:11:41,600
bug is is that it's in win32k which is a

311
00:11:41,600 --> 00:11:43,040
kernel driver in windows that's

312
00:11:43,040 --> 00:11:45,279
responsible for managing the graphics

313
00:11:45,279 --> 00:11:47,839
and the windows you see on the screen

314
00:11:47,839 --> 00:11:50,079
and because win32k has to manage that

315
00:11:50,079 --> 00:11:52,000
there's a lot of transfer of information

316
00:11:52,000 --> 00:11:54,560
back between kernel space and user space

317
00:11:54,560 --> 00:11:58,399
and so 132k manages that this bug class

318
00:11:58,399 --> 00:12:00,639
that this bug is is called the user mode

319
00:12:00,639 --> 00:12:03,279
callback bug it's actually super common

320
00:12:03,279 --> 00:12:05,839
one of the best resources i think on it

321
00:12:05,839 --> 00:12:08,959
is a 2011 black hat talk so this this

322
00:12:08,959 --> 00:12:11,600
has been talked about quite a bit

323
00:12:11,600 --> 00:12:14,880
so in particular for this bug in win32k

324
00:12:14,880 --> 00:12:17,440
we need to start with the tag wnd or

325
00:12:17,440 --> 00:12:19,040
tagwin struct

326
00:12:19,040 --> 00:12:20,959
and so

327
00:12:20,959 --> 00:12:23,760
the field that we care most about is the

328
00:12:23,760 --> 00:12:25,279
cbwnd

329
00:12:25,279 --> 00:12:26,480
extra field

330
00:12:26,480 --> 00:12:29,200
because taiwan can have a flexible size

331
00:12:29,200 --> 00:12:30,880
it's not always the same size it can

332
00:12:30,880 --> 00:12:33,120
have extra bytes based on the type of

333
00:12:33,120 --> 00:12:35,200
window that it's representing oh yeah

334
00:12:35,200 --> 00:12:37,200
because the tag wind struct is the

335
00:12:37,200 --> 00:12:39,279
kernel structure representing any

336
00:12:39,279 --> 00:12:42,399
windows within the operating system

337
00:12:42,399 --> 00:12:44,639
so we have this field that tells us how

338
00:12:44,639 --> 00:12:46,639
many extra bytes should be

339
00:12:46,639 --> 00:12:48,880
in this structure

340
00:12:48,880 --> 00:12:52,560
now this function xxx client alec window

341
00:12:52,560 --> 00:12:54,639
class extra bytes

342
00:12:54,639 --> 00:12:56,320
is responsible for allocating the extra

343
00:12:56,320 --> 00:12:57,600
bytes

344
00:12:57,600 --> 00:12:59,200
that really rolls off the tongue so

345
00:12:59,200 --> 00:13:00,639
instead of repeating it a whole bunch

346
00:13:00,639 --> 00:13:02,880
i'm just going to call it jerry

347
00:13:02,880 --> 00:13:06,160
jerry has two different functionalities

348
00:13:06,160 --> 00:13:08,880
one when it's a regular window and one

349
00:13:08,880 --> 00:13:10,800
when it's console window

350
00:13:10,800 --> 00:13:12,240
we're going to talk about the regular

351
00:13:12,240 --> 00:13:15,680
version of jerry's behavior first

352
00:13:15,680 --> 00:13:18,959
so jerry will allocate the number of cb

353
00:13:18,959 --> 00:13:20,560
wind extra bytes

354
00:13:20,560 --> 00:13:22,399
in user space

355
00:13:22,399 --> 00:13:24,639
jerry will then return

356
00:13:24,639 --> 00:13:27,440
a pointer to that user space allocation

357
00:13:27,440 --> 00:13:29,040
and that is stored in the tag

358
00:13:29,040 --> 00:13:31,120
instruction

359
00:13:31,120 --> 00:13:32,959
but there's other types of windows

360
00:13:32,959 --> 00:13:35,600
besides this regular default one of them

361
00:13:35,600 --> 00:13:37,600
is a console window and you can make a

362
00:13:37,600 --> 00:13:38,720
regular

363
00:13:38,720 --> 00:13:40,480
window a console window by using this

364
00:13:40,480 --> 00:13:42,959
function in t user console control it

365
00:13:42,959 --> 00:13:46,399
just sets a flag in the tag when struct

366
00:13:46,399 --> 00:13:48,720
that tells them yes this is a console

367
00:13:48,720 --> 00:13:50,399
window

368
00:13:50,399 --> 00:13:52,560
so when it's a console window instead of

369
00:13:52,560 --> 00:13:54,800
being allocated on the user space the

370
00:13:54,800 --> 00:13:58,000
bytes are allocated on the kernel heap

371
00:13:58,000 --> 00:14:00,000
and not only that but instead of

372
00:14:00,000 --> 00:14:02,160
returning a pointer they return an

373
00:14:02,160 --> 00:14:05,120
offset from the base of the heap

374
00:14:05,120 --> 00:14:06,800
and this is where the type confusion

375
00:14:06,800 --> 00:14:08,480
comes in

376
00:14:08,480 --> 00:14:10,639
so to trigger the bug you create your

377
00:14:10,639 --> 00:14:13,120
regular window and you set this cb wind

378
00:14:13,120 --> 00:14:15,040
extra field to a custom value number of

379
00:14:15,040 --> 00:14:17,199
bytes jerry

380
00:14:17,199 --> 00:14:19,760
then allocates that number of bytes on

381
00:14:19,760 --> 00:14:21,440
the user mode heap because we're still a

382
00:14:21,440 --> 00:14:23,440
regular window at this point

383
00:14:23,440 --> 00:14:25,760
but then jerry has a user call back

384
00:14:25,760 --> 00:14:29,760
that's what the xxx before

385
00:14:29,760 --> 00:14:31,920
function names in the windows kernel

386
00:14:31,920 --> 00:14:34,320
mean is that there is user code

387
00:14:34,320 --> 00:14:36,800
execution sometime during this

388
00:14:36,800 --> 00:14:38,639
so during that callback

389
00:14:38,639 --> 00:14:40,800
jre is allocated by some user mode but

390
00:14:40,800 --> 00:14:42,560
we're going to call into user console

391
00:14:42,560 --> 00:14:44,240
control and change it to a console

392
00:14:44,240 --> 00:14:46,160
window

393
00:14:46,160 --> 00:14:48,639
when we return from our code execution

394
00:14:48,639 --> 00:14:50,639
in that callback jerry doesn't check the

395
00:14:50,639 --> 00:14:52,959
status it just will go ahead and still

396
00:14:52,959 --> 00:14:55,680
return our user mode pointer that it

397
00:14:55,680 --> 00:14:57,040
allocated

398
00:14:57,040 --> 00:14:58,959
but the kernel doesn't see that the

399
00:14:58,959 --> 00:15:00,800
kernel checks the flag

400
00:15:00,800 --> 00:15:03,519
on in the tag when struct is like hey

401
00:15:03,519 --> 00:15:06,079
this is a console window so this is an

402
00:15:06,079 --> 00:15:08,560
offset from the base of the kernel heap

403
00:15:08,560 --> 00:15:09,839
and then we have an out of bounds

404
00:15:09,839 --> 00:15:11,839
reading

405
00:15:11,839 --> 00:15:13,519
which was the out of bounds read write

406
00:15:13,519 --> 00:15:14,959
was then used for a local privilege

407
00:15:14,959 --> 00:15:16,320
escalation

408
00:15:16,320 --> 00:15:18,079
so what the heck happened here

409
00:15:18,079 --> 00:15:19,120
the first

410
00:15:19,120 --> 00:15:21,839
2021 in the wild triggered the bug

411
00:15:21,839 --> 00:15:24,000
through a function called create window

412
00:15:24,000 --> 00:15:25,279
that was the path that followed and

413
00:15:25,279 --> 00:15:27,199
ultimately called jerry

414
00:15:27,199 --> 00:15:30,160
the patch only modified create window to

415
00:15:30,160 --> 00:15:32,320
protect against this bug

416
00:15:32,320 --> 00:15:34,399
but jerry has lots of friends and jerry

417
00:15:34,399 --> 00:15:35,839
can be called a whole bunch of different

418
00:15:35,839 --> 00:15:39,120
ways so the 2022 in the wild exploit

419
00:15:39,120 --> 00:15:41,440
came back triggering the same bug just

420
00:15:41,440 --> 00:15:43,440
calling it through a bunch of different

421
00:15:43,440 --> 00:15:45,040
other methods

422
00:15:45,040 --> 00:15:47,839
so the new patch for 2022 seems to get

423
00:15:47,839 --> 00:15:50,639
to better to that root cause of the

424
00:15:50,639 --> 00:15:53,199
issue being within client alec window

425
00:15:53,199 --> 00:15:55,920
class extra bytes our good friend jerry

426
00:15:55,920 --> 00:15:58,320
and checking the flag and seeing if it

427
00:15:58,320 --> 00:16:02,720
changed after the user's code execution

428
00:16:02,880 --> 00:16:05,839
our next case study is i o mobile frame

429
00:16:05,839 --> 00:16:09,759
buffer which is an ios attack surface

430
00:16:09,759 --> 00:16:11,920
and so this bug was also patched in

431
00:16:11,920 --> 00:16:14,880
january in ios 15.3

432
00:16:14,880 --> 00:16:16,240
and it is

433
00:16:16,240 --> 00:16:18,399
a very close variant to it in the wild

434
00:16:18,399 --> 00:16:21,199
that was patched in 2021

435
00:16:21,199 --> 00:16:23,519
even though apple did not originally

436
00:16:23,519 --> 00:16:25,199
flag this as in the wild in their

437
00:16:25,199 --> 00:16:27,279
release notes it had still already

438
00:16:27,279 --> 00:16:29,440
gotten quite a bit of attention because

439
00:16:29,440 --> 00:16:31,279
it was used by the pangu team at the

440
00:16:31,279 --> 00:16:33,360
tianfu cup which is the chinese hacking

441
00:16:33,360 --> 00:16:36,720
competition to hack the iphone 13. so

442
00:16:36,720 --> 00:16:38,480
it's still been in a lot of

443
00:16:38,480 --> 00:16:41,040
vulnerability conversations

444
00:16:41,040 --> 00:16:43,040
my team project zero as well as google

445
00:16:43,040 --> 00:16:45,279
tag threat analysis group actually just

446
00:16:45,279 --> 00:16:47,680
published um blog posts on this exploit

447
00:16:47,680 --> 00:16:49,519
and how it was used

448
00:16:49,519 --> 00:16:52,160
last week so if you're interested

449
00:16:52,160 --> 00:16:54,800
so what is i o mobile frame buffer it is

450
00:16:54,800 --> 00:16:57,040
responsible for managing the screen

451
00:16:57,040 --> 00:17:00,240
frame buffer on ios and mac os devices

452
00:17:00,240 --> 00:17:02,240
and it's been a target of interest there

453
00:17:02,240 --> 00:17:04,880
were also two other vulnerab in the wild

454
00:17:04,880 --> 00:17:07,520
vulnerabilities in 2021 in this

455
00:17:07,520 --> 00:17:09,199
because it's generally accessible from

456
00:17:09,199 --> 00:17:11,039
the app sandbox which makes it

457
00:17:11,039 --> 00:17:13,119
interesting to target

458
00:17:13,119 --> 00:17:14,640
the other sort of interesting thing

459
00:17:14,640 --> 00:17:16,640
about it is that it lives in different

460
00:17:16,640 --> 00:17:19,119
places depending on the device

461
00:17:19,119 --> 00:17:21,919
on iphone 11s and earlier as well as

462
00:17:21,919 --> 00:17:24,640
intel max it's a kernel extension

463
00:17:24,640 --> 00:17:27,439
whereas on iphones 12 and 13 in m1 max

464
00:17:27,439 --> 00:17:30,000
it lives on the digital co-processor so

465
00:17:30,000 --> 00:17:32,559
the exploits we saw in the wild

466
00:17:32,559 --> 00:17:36,000
targeted it in the dcp

467
00:17:36,000 --> 00:17:37,039
so

468
00:17:37,039 --> 00:17:39,520
the issue is in this function uniformity

469
00:17:39,520 --> 00:17:41,200
compensator set

470
00:17:41,200 --> 00:17:43,840
in which uniformity compensation is

471
00:17:43,840 --> 00:17:45,440
responsible for addressing

472
00:17:45,440 --> 00:17:48,240
inconsistencies and like the display

473
00:17:48,240 --> 00:17:49,679
but we don't really need to know about

474
00:17:49,679 --> 00:17:50,960
that because that's basically all i know

475
00:17:50,960 --> 00:17:53,120
about it

476
00:17:53,120 --> 00:17:55,280
and the issue is it's a standard buffer

477
00:17:55,280 --> 00:17:56,799
overflow the same things you saw in your

478
00:17:56,799 --> 00:17:59,360
class a decade ago about security or

479
00:17:59,360 --> 00:18:02,400
more than a decade ago as the issue here

480
00:18:02,400 --> 00:18:04,880
we have the controlled size user

481
00:18:04,880 --> 00:18:06,640
controlled attacker controlled size that

482
00:18:06,640 --> 00:18:08,480
is passed directly to mem copy with no

483
00:18:08,480 --> 00:18:09,840
bounce checking

484
00:18:09,840 --> 00:18:13,200
pretty standard vulnerability

485
00:18:13,200 --> 00:18:15,520
and the fix that apple published for

486
00:18:15,520 --> 00:18:18,400
this was to add a bounce check they make

487
00:18:18,400 --> 00:18:20,320
sure that controlled size will never be

488
00:18:20,320 --> 00:18:22,960
greater than hex 41 preventing the bus

489
00:18:22,960 --> 00:18:25,760
for overflow

490
00:18:25,760 --> 00:18:28,240
however that's just an upper bound there

491
00:18:28,240 --> 00:18:30,320
was no lower bound

492
00:18:30,320 --> 00:18:33,039
also added there and it turns out the

493
00:18:33,039 --> 00:18:36,320
next block down in this function is

494
00:18:36,320 --> 00:18:38,640
still using controlled size

495
00:18:38,640 --> 00:18:40,799
but they're first doing some subtraction

496
00:18:40,799 --> 00:18:42,960
from the controlled size and then using

497
00:18:42,960 --> 00:18:46,320
that difference from the subtraction

498
00:18:46,320 --> 00:18:48,720
to access memory and write memory which

499
00:18:48,720 --> 00:18:51,360
then leads to another buffer overflow if

500
00:18:51,360 --> 00:18:53,440
say your controlled size is zero and you

501
00:18:53,440 --> 00:18:55,760
subtract one from that and now you have

502
00:18:55,760 --> 00:18:59,200
x ffff and controlled size is treated as

503
00:18:59,200 --> 00:19:01,360
an unsigned int then to access your

504
00:19:01,360 --> 00:19:02,960
memory um

505
00:19:02,960 --> 00:19:04,960
once again you're out of buying out of

506
00:19:04,960 --> 00:19:07,280
bounds read and write

507
00:19:07,280 --> 00:19:09,120
so to fix this they added the lower

508
00:19:09,120 --> 00:19:10,720
bound which seems

509
00:19:10,720 --> 00:19:13,280
sufficient

510
00:19:14,559 --> 00:19:16,640
so our last case study you're almost

511
00:19:16,640 --> 00:19:17,440
there

512
00:19:17,440 --> 00:19:18,320
is

513
00:19:18,320 --> 00:19:20,320
a chromium bug

514
00:19:20,320 --> 00:19:22,400
so this one actually has quite the saga

515
00:19:22,400 --> 00:19:25,280
to go going all the way back to 2016

516
00:19:25,280 --> 00:19:27,919
when a researcher who is now my teammate

517
00:19:27,919 --> 00:19:29,600
sergey glozenov

518
00:19:29,600 --> 00:19:32,640
reported just normal bugs

519
00:19:32,640 --> 00:19:34,080
in chrome then

520
00:19:34,080 --> 00:19:37,280
then we had the 2021 in the wild patched

521
00:19:37,280 --> 00:19:40,559
in june and then we had a 2022 in the

522
00:19:40,559 --> 00:19:43,039
wild patched in march

523
00:19:43,039 --> 00:19:45,280
and that wasn't the end of it sergei was

524
00:19:45,280 --> 00:19:46,559
looking at the bug because he thought it

525
00:19:46,559 --> 00:19:48,320
was an interesting one and noticed that

526
00:19:48,320 --> 00:19:49,520
the patch was

527
00:19:49,520 --> 00:19:51,120
not complete

528
00:19:51,120 --> 00:19:53,039
there was a way to still trigger the bug

529
00:19:53,039 --> 00:19:56,880
and thus there was a fourth patch issued

530
00:19:56,880 --> 00:19:58,799
so these are all property access

531
00:19:58,799 --> 00:20:00,880
interceptor bugs what those are is

532
00:20:00,880 --> 00:20:03,840
basically a method that is run every

533
00:20:03,840 --> 00:20:06,320
time a user tries to access a property

534
00:20:06,320 --> 00:20:08,720
of the object in javascript so we're

535
00:20:08,720 --> 00:20:11,760
here in javascript land right now and

536
00:20:11,760 --> 00:20:13,280
where the issue comes in is that this

537
00:20:13,280 --> 00:20:16,559
can lead to user javascript execution

538
00:20:16,559 --> 00:20:18,960
during property assignment not before

539
00:20:18,960 --> 00:20:20,720
not after but actually during when

540
00:20:20,720 --> 00:20:22,240
you're trying to assign a value to a

541
00:20:22,240 --> 00:20:23,440
property

542
00:20:23,440 --> 00:20:25,440
which if you if the code then doesn't

543
00:20:25,440 --> 00:20:26,240
check

544
00:20:26,240 --> 00:20:28,559
the state of that object and property

545
00:20:28,559 --> 00:20:30,880
after the user's javascript runs then

546
00:20:30,880 --> 00:20:32,799
that means that the object can be left

547
00:20:32,799 --> 00:20:34,720
in a corrupted state which could then be

548
00:20:34,720 --> 00:20:36,960
used for universal cross-site scripting

549
00:20:36,960 --> 00:20:39,520
or type confusion for remote code

550
00:20:39,520 --> 00:20:41,280
execution

551
00:20:41,280 --> 00:20:44,320
so the first 2016 bug was the property

552
00:20:44,320 --> 00:20:46,880
access interceptor for this html embed

553
00:20:46,880 --> 00:20:49,760
element and basically it allowed access

554
00:20:49,760 --> 00:20:51,679
to properties belonging to a different

555
00:20:51,679 --> 00:20:53,360
website which

556
00:20:53,360 --> 00:20:55,039
that was then used for universal

557
00:20:55,039 --> 00:20:57,200
cross-site scripting

558
00:20:57,200 --> 00:21:00,480
the 2021 in the wild was also in the

559
00:21:00,480 --> 00:21:03,600
interceptor for html embed element

560
00:21:03,600 --> 00:21:06,080
but in this case if the object didn't

561
00:21:06,080 --> 00:21:08,400
already have the property

562
00:21:08,400 --> 00:21:09,360
um

563
00:21:09,360 --> 00:21:10,480
within it

564
00:21:10,480 --> 00:21:11,440
then

565
00:21:11,440 --> 00:21:13,360
the the

566
00:21:13,360 --> 00:21:16,799
user's javascript code was executed

567
00:21:16,799 --> 00:21:19,600
the user's javascript code could say hey

568
00:21:19,600 --> 00:21:21,360
i'm going to add this property since it

569
00:21:21,360 --> 00:21:23,120
doesn't exist

570
00:21:23,120 --> 00:21:25,520
but because once that returns

571
00:21:25,520 --> 00:21:27,840
the chromium code did not check hey

572
00:21:27,840 --> 00:21:30,559
what's the status now of this object and

573
00:21:30,559 --> 00:21:32,720
still assumed that that property didn't

574
00:21:32,720 --> 00:21:33,679
exist

575
00:21:33,679 --> 00:21:35,600
it would then add the property a second

576
00:21:35,600 --> 00:21:37,200
time which then left the object in a

577
00:21:37,200 --> 00:21:39,200
crop its corrupted state which could be

578
00:21:39,200 --> 00:21:42,000
used for rce

579
00:21:42,000 --> 00:21:44,960
and the 2022 in the wild was very

580
00:21:44,960 --> 00:21:49,200
similar but for css style declaration

581
00:21:49,200 --> 00:21:50,880
and the main difference when it comes

582
00:21:50,880 --> 00:21:51,919
down to

583
00:21:51,919 --> 00:21:54,960
is that the first one triggered this

584
00:21:54,960 --> 00:21:57,760
when the property was in the javascript

585
00:21:57,760 --> 00:22:00,000
object's prototype chain

586
00:22:00,000 --> 00:22:00,960
so

587
00:22:00,960 --> 00:22:02,640
javascript experts wouldn't want me to

588
00:22:02,640 --> 00:22:04,400
say this but sort of think inheritance

589
00:22:04,400 --> 00:22:06,480
if you're not javascript person

590
00:22:06,480 --> 00:22:08,640
whereas in this case it was a different

591
00:22:08,640 --> 00:22:10,720
flow because they triggered it the

592
00:22:10,720 --> 00:22:13,440
property belonged directly to the object

593
00:22:13,440 --> 00:22:16,159
which turns out is a different execution

594
00:22:16,159 --> 00:22:17,280
flow

595
00:22:17,280 --> 00:22:18,720
and this is much more obvious when we

596
00:22:18,720 --> 00:22:20,400
look at the patch so this is the

597
00:22:20,400 --> 00:22:22,159
function where all of these patches were

598
00:22:22,159 --> 00:22:23,360
happening

599
00:22:23,360 --> 00:22:25,360
and this is the interceptor block of

600
00:22:25,360 --> 00:22:27,840
that

601
00:22:28,000 --> 00:22:30,400
so the first if or fix

602
00:22:30,400 --> 00:22:32,080
is down here and the part we care about

603
00:22:32,080 --> 00:22:34,320
is that bottom line that says sep super

604
00:22:34,320 --> 00:22:35,919
property because that's the function

605
00:22:35,919 --> 00:22:38,159
that knows how to handle if the object

606
00:22:38,159 --> 00:22:40,240
state change it does all the checks and

607
00:22:40,240 --> 00:22:41,760
knows

608
00:22:41,760 --> 00:22:42,720
there

609
00:22:42,720 --> 00:22:44,799
but the issue was is that if you see

610
00:22:44,799 --> 00:22:46,880
here that set super property call is

611
00:22:46,880 --> 00:22:49,280
only in this else block

612
00:22:49,280 --> 00:22:52,640
so it turns out if the property is owned

613
00:22:52,640 --> 00:22:54,880
directly by the object then we're in

614
00:22:54,880 --> 00:22:57,760
that block and won't hit that set super

615
00:22:57,760 --> 00:22:59,440
property

616
00:22:59,440 --> 00:23:02,400
so the next fix was to move the set

617
00:23:02,400 --> 00:23:04,480
super property down one level so it

618
00:23:04,480 --> 00:23:06,960
would be hit by both the f and the else

619
00:23:06,960 --> 00:23:08,480
blocks

620
00:23:08,480 --> 00:23:10,960
but that wasn't the end of the story

621
00:23:10,960 --> 00:23:13,280
then sergey noticed that there was still

622
00:23:13,280 --> 00:23:15,440
a way to hit the bug this time just

623
00:23:15,440 --> 00:23:18,240
instead of saying property equals value

624
00:23:18,240 --> 00:23:20,960
you use the object.define property call

625
00:23:20,960 --> 00:23:22,400
because it turns out

626
00:23:22,400 --> 00:23:24,159
set property internal where they put the

627
00:23:24,159 --> 00:23:26,400
patches was only used if you were doing

628
00:23:26,400 --> 00:23:28,799
property equals

629
00:23:28,799 --> 00:23:30,240
so this is what you had to change to

630
00:23:30,240 --> 00:23:32,320
have a working proof of concept again no

631
00:23:32,320 --> 00:23:34,400
longer style that prop equals just

632
00:23:34,400 --> 00:23:36,400
object that define property

633
00:23:36,400 --> 00:23:38,640
instead

634
00:23:38,640 --> 00:23:39,600
so

635
00:23:39,600 --> 00:23:41,919
those were three case studies and hope

636
00:23:41,919 --> 00:23:43,919
my hope is that you see

637
00:23:43,919 --> 00:23:46,400
just how close these variants are

638
00:23:46,400 --> 00:23:48,799
this is not what makes zero day hard

639
00:23:48,799 --> 00:23:50,880
this is not talking about zero day hard

640
00:23:50,880 --> 00:23:53,120
because it's really just looking at

641
00:23:53,120 --> 00:23:54,960
what changed what was the fix and

642
00:23:54,960 --> 00:23:57,919
identifying oh hey i can still hit that

643
00:23:57,919 --> 00:24:00,000
and exploit it and then they have a zero

644
00:24:00,000 --> 00:24:00,960
day

645
00:24:00,960 --> 00:24:02,480
capability again

646
00:24:02,480 --> 00:24:03,679
and as i said at the beginning there

647
00:24:03,679 --> 00:24:06,080
were nine total variants

648
00:24:06,080 --> 00:24:08,240
so these were the other six that we

649
00:24:08,240 --> 00:24:09,520
didn't cover

650
00:24:09,520 --> 00:24:10,720
and

651
00:24:10,720 --> 00:24:12,480
i think what's most stark about this is

652
00:24:12,480 --> 00:24:15,120
it shows it is not an individual vendor

653
00:24:15,120 --> 00:24:17,520
or an individual product issue

654
00:24:17,520 --> 00:24:20,640
across the industry we're having trouble

655
00:24:20,640 --> 00:24:22,240
making the most of the vulnerability

656
00:24:22,240 --> 00:24:24,240
reports that are coming in

657
00:24:24,240 --> 00:24:26,640
we're not correctly or comp

658
00:24:26,640 --> 00:24:29,120
correctly or comprehensively getting all

659
00:24:29,120 --> 00:24:31,760
these patched in some cases the the

660
00:24:31,760 --> 00:24:34,240
patches are just being regressed so it's

661
00:24:34,240 --> 00:24:37,039
the exact same bug again in other cases

662
00:24:37,039 --> 00:24:40,400
the bug is um exists in one subsystem

663
00:24:40,400 --> 00:24:42,640
and it's only patched in the other or

664
00:24:42,640 --> 00:24:44,840
they don't see it in another

665
00:24:44,840 --> 00:24:46,799
etc

666
00:24:46,799 --> 00:24:50,000
so what do we do about it

667
00:24:50,000 --> 00:24:52,159
correct and comprehensive patches and

668
00:24:52,159 --> 00:24:54,080
they don't say this to be glib or to

669
00:24:54,080 --> 00:24:56,640
minimize the very real challenges that

670
00:24:56,640 --> 00:24:58,799
vendor security teams are facing

671
00:24:58,799 --> 00:25:00,159
they would love to have all the

672
00:25:00,159 --> 00:25:03,279
resources time incentive structures to

673
00:25:03,279 --> 00:25:05,840
be able to spend large amounts of time

674
00:25:05,840 --> 00:25:07,840
diving into each individual

675
00:25:07,840 --> 00:25:09,520
vulnerability

676
00:25:09,520 --> 00:25:10,799
but that's not what they're currently

677
00:25:10,799 --> 00:25:13,679
given right now triage has to be quick

678
00:25:13,679 --> 00:25:14,480
and

679
00:25:14,480 --> 00:25:16,559
there is a very real tension also

680
00:25:16,559 --> 00:25:19,279
between protecting users quickly

681
00:25:19,279 --> 00:25:21,200
and

682
00:25:21,200 --> 00:25:23,679
getting a full understanding of the bug

683
00:25:23,679 --> 00:25:27,520
and complete solution to mitigating it

684
00:25:27,520 --> 00:25:30,960
but that's where i hope we can

685
00:25:30,960 --> 00:25:33,120
all see that

686
00:25:33,120 --> 00:25:35,840
patching or releasing a patch really

687
00:25:35,840 --> 00:25:39,039
shouldn't be the end of our

688
00:25:39,039 --> 00:25:41,600
vulnerability triaging our vulnerability

689
00:25:41,600 --> 00:25:43,760
response or exploit response because

690
00:25:43,760 --> 00:25:45,679
there's so much more we can learn from

691
00:25:45,679 --> 00:25:47,440
each of those

692
00:25:47,440 --> 00:25:50,000
but on the hopeful side at least i think

693
00:25:50,000 --> 00:25:52,080
it's hopeful is that this doesn't have

694
00:25:52,080 --> 00:25:53,039
to be

695
00:25:53,039 --> 00:25:55,440
a situation where you have to do every

696
00:25:55,440 --> 00:25:57,440
single thing to get any return on

697
00:25:57,440 --> 00:26:00,080
investment because any incremental

698
00:26:00,080 --> 00:26:01,600
progress we make

699
00:26:01,600 --> 00:26:04,480
on better patching these walls

700
00:26:04,480 --> 00:26:06,320
we will see that return on investment in

701
00:26:06,320 --> 00:26:09,279
making zero day hard so each individual

702
00:26:09,279 --> 00:26:12,960
step matters a lot

703
00:26:12,960 --> 00:26:14,000
so like

704
00:26:14,000 --> 00:26:15,679
correct and comprehensive patches is

705
00:26:15,679 --> 00:26:17,279
really amorphous it's easy for me to

706
00:26:17,279 --> 00:26:19,440
talk about here on the stage and say hey

707
00:26:19,440 --> 00:26:21,120
just here's what's wrong

708
00:26:21,120 --> 00:26:22,960
so here are some of the suggestions i

709
00:26:22,960 --> 00:26:24,799
have for actual steps

710
00:26:24,799 --> 00:26:26,320
that might make sure

711
00:26:26,320 --> 00:26:27,200
um

712
00:26:27,200 --> 00:26:29,039
a patch is the right fit or we're making

713
00:26:29,039 --> 00:26:31,679
the most out of each volume report so

714
00:26:31,679 --> 00:26:33,760
the first hopefully it's obvious is

715
00:26:33,760 --> 00:26:36,000
doing a root cause analysis

716
00:26:36,000 --> 00:26:37,840
the root cause analysis is really

717
00:26:37,840 --> 00:26:40,320
digging in to make sure we understand

718
00:26:40,320 --> 00:26:42,080
what is the bug

719
00:26:42,080 --> 00:26:44,000
at the end of this what was the mistake

720
00:26:44,000 --> 00:26:46,240
that was made not just the execution

721
00:26:46,240 --> 00:26:48,799
flow that the exploit does but where is

722
00:26:48,799 --> 00:26:51,039
the mistake because then that leads us

723
00:26:51,039 --> 00:26:54,960
into variant analysis that says huh okay

724
00:26:54,960 --> 00:26:57,360
so where else might this mistake exist

725
00:26:57,360 --> 00:26:58,720
then

726
00:26:58,720 --> 00:27:00,159
could it

727
00:27:00,159 --> 00:27:01,840
do we need to change our automated

728
00:27:01,840 --> 00:27:03,279
systems like our fuzzers that they

729
00:27:03,279 --> 00:27:06,400
didn't find this do we add in new code

730
00:27:06,400 --> 00:27:09,120
so it will find bugs like this or is

731
00:27:09,120 --> 00:27:11,520
this actually highlighting there's real

732
00:27:11,520 --> 00:27:14,240
underlying design flaws in this attack

733
00:27:14,240 --> 00:27:16,880
surface that we need to prioritize code

734
00:27:16,880 --> 00:27:18,240
auditing on it

735
00:27:18,240 --> 00:27:21,120
that's where variant analysis comes in

736
00:27:21,120 --> 00:27:23,679
patch analysis is also requires root

737
00:27:23,679 --> 00:27:26,080
cause analysis done at the end and it's

738
00:27:26,080 --> 00:27:28,799
looking at okay is this patch actually

739
00:27:28,799 --> 00:27:31,200
addressing the underlying vulnerability

740
00:27:31,200 --> 00:27:32,080
here

741
00:27:32,080 --> 00:27:34,320
versus a band-aid to just block the

742
00:27:34,320 --> 00:27:36,559
exploit we know about

743
00:27:36,559 --> 00:27:39,039
one thing here is most vulnerability

744
00:27:39,039 --> 00:27:42,080
reporters to any vendor security teams

745
00:27:42,080 --> 00:27:45,039
would really also like to have

746
00:27:45,039 --> 00:27:46,640
the vulnerability fixed on the first

747
00:27:46,640 --> 00:27:47,679
time

748
00:27:47,679 --> 00:27:49,919
that's our preference and so

749
00:27:49,919 --> 00:27:51,600
sharing and reaching out to your

750
00:27:51,600 --> 00:27:52,880
reporters

751
00:27:52,880 --> 00:27:54,000
and saying

752
00:27:54,000 --> 00:27:56,159
hey this is what my plan is to patch

753
00:27:56,159 --> 00:27:58,480
this we would love to have that

754
00:27:58,480 --> 00:28:01,120
conversation early and prior to you

755
00:28:01,120 --> 00:28:02,799
doing all of the cycles to spin a

756
00:28:02,799 --> 00:28:05,360
release testing and stuff like that so

757
00:28:05,360 --> 00:28:07,760
that might be way one way to help

758
00:28:07,760 --> 00:28:09,600
it's also nice because these three

759
00:28:09,600 --> 00:28:10,480
things

760
00:28:10,480 --> 00:28:12,720
as long as there's transparency from the

761
00:28:12,720 --> 00:28:14,799
vendors that we're leaning on

762
00:28:14,799 --> 00:28:17,120
are things that project zero does or any

763
00:28:17,120 --> 00:28:19,679
other external security teams can take

764
00:28:19,679 --> 00:28:21,760
part in as well and especially with

765
00:28:21,760 --> 00:28:24,559
these in the wild zera days more eyes

766
00:28:24,559 --> 00:28:26,640
with more ideas for how to confront

767
00:28:26,640 --> 00:28:30,240
these problems is only that much better

768
00:28:30,240 --> 00:28:32,640
and if you are say a customer of one of

769
00:28:32,640 --> 00:28:34,720
these security vendors but are not in

770
00:28:34,720 --> 00:28:36,880
the place to perform these analysis we

771
00:28:36,880 --> 00:28:39,200
could also really use you

772
00:28:39,200 --> 00:28:41,440
asking the vendors of hey can you

773
00:28:41,440 --> 00:28:43,840
explain to me how what your triage

774
00:28:43,840 --> 00:28:45,279
process looks like

775
00:28:45,279 --> 00:28:47,919
are you transparently disclosing if you

776
00:28:47,919 --> 00:28:49,840
know that is zero day is exploited in

777
00:28:49,840 --> 00:28:51,200
the wild

778
00:28:51,200 --> 00:28:52,799
what type of variants

779
00:28:52,799 --> 00:28:54,480
are the

780
00:28:54,480 --> 00:28:56,399
variant analysis are you doing or if you

781
00:28:56,399 --> 00:28:58,480
see in the press you know

782
00:28:58,480 --> 00:29:01,600
because someone posted stuff talking

783
00:29:01,600 --> 00:29:03,840
about variants for one of the products

784
00:29:03,840 --> 00:29:06,240
you use ask them you know just how did

785
00:29:06,240 --> 00:29:07,360
this happen

786
00:29:07,360 --> 00:29:09,360
what are you going to do differently

787
00:29:09,360 --> 00:29:11,039
because i think what it really comes

788
00:29:11,039 --> 00:29:12,720
down to is we need to show a lot of

789
00:29:12,720 --> 00:29:15,360
these software vendors that this is an

790
00:29:15,360 --> 00:29:19,039
expectation and a minimal step

791
00:29:19,039 --> 00:29:22,240
and thus incentivize your security teams

792
00:29:22,240 --> 00:29:25,279
and give them space to be able to really

793
00:29:25,279 --> 00:29:28,240
dig in and do a lot of these

794
00:29:28,240 --> 00:29:29,279
steps

795
00:29:29,279 --> 00:29:30,960
the last are

796
00:29:30,960 --> 00:29:33,440
three other ways to really make the most

797
00:29:33,440 --> 00:29:35,760
of any zero day in the wild or

798
00:29:35,760 --> 00:29:37,919
vulnerability report of not just

799
00:29:37,919 --> 00:29:40,240
stopping at okay we patched it let's

800
00:29:40,240 --> 00:29:41,840
move on to the next one

801
00:29:41,840 --> 00:29:43,600
what are detection techniques but not

802
00:29:43,600 --> 00:29:46,320
detection techniques for this one what

803
00:29:46,320 --> 00:29:48,640
can this teach us about detecting other

804
00:29:48,640 --> 00:29:49,919
zero days

805
00:29:49,919 --> 00:29:51,919
does it turn out there's a step that

806
00:29:51,919 --> 00:29:54,000
will likely be required for any of them

807
00:29:54,000 --> 00:29:55,919
a certain heap grooming required in the

808
00:29:55,919 --> 00:29:57,919
product or something like that

809
00:29:57,919 --> 00:30:00,799
how can we block the exploit mitigation

810
00:30:00,799 --> 00:30:02,640
and lastly overall

811
00:30:02,640 --> 00:30:04,159
what could be some hardening and

812
00:30:04,159 --> 00:30:06,480
systemic improvements that would make

813
00:30:06,480 --> 00:30:10,399
this much more difficult in the future

814
00:30:10,399 --> 00:30:12,640
and the last step and things that will

815
00:30:12,640 --> 00:30:15,360
really help is transparency there has

816
00:30:15,360 --> 00:30:16,799
been distinct

817
00:30:16,799 --> 00:30:18,080
improvement

818
00:30:18,080 --> 00:30:20,320
um in this in the last couple of years

819
00:30:20,320 --> 00:30:22,880
for example last year 2021 was the first

820
00:30:22,880 --> 00:30:24,880
time that apple and android would

821
00:30:24,880 --> 00:30:27,039
actually actually label in their release

822
00:30:27,039 --> 00:30:29,919
notes if they had evidence to know that

823
00:30:29,919 --> 00:30:31,840
something was in the wild

824
00:30:31,840 --> 00:30:33,440
but there's still a lot of progress to

825
00:30:33,440 --> 00:30:36,480
go and that is still not an accepted

826
00:30:36,480 --> 00:30:39,200
industry standard so talking to your

827
00:30:39,200 --> 00:30:40,720
customers asking what type of

828
00:30:40,720 --> 00:30:42,080
information they're publishing are they

829
00:30:42,080 --> 00:30:43,679
letting you know if something's in the

830
00:30:43,679 --> 00:30:46,559
wild and known to be actively exploited

831
00:30:46,559 --> 00:30:49,120
what type of technical technical details

832
00:30:49,120 --> 00:30:51,919
are being shared so that other security

833
00:30:51,919 --> 00:30:54,480
researchers can try and help and analyze

834
00:30:54,480 --> 00:30:56,559
the patch figure out the bug come up

835
00:30:56,559 --> 00:31:00,320
with buzzers or automated solutions

836
00:31:00,320 --> 00:31:03,120
so ultimately hopefully we can continue

837
00:31:03,120 --> 00:31:05,679
making zero day hard i'm hoping to see

838
00:31:05,679 --> 00:31:07,600
changes in the trends for the second

839
00:31:07,600 --> 00:31:10,960
half of 2022 maybe a few less variants

840
00:31:10,960 --> 00:31:12,640
and a lot more fun things that are brand

841
00:31:12,640 --> 00:31:14,960
new to tear apart um but yeah it's going

842
00:31:14,960 --> 00:31:17,960
to take us all to get there so thank you

843
00:31:17,960 --> 00:31:25,519
[Applause]

844
00:31:25,519 --> 00:31:28,840
any questions

845
00:31:34,880 --> 00:31:36,399
thanks for your talk i like your

846
00:31:36,399 --> 00:31:39,279
aspiration to have zero days but i guess

847
00:31:39,279 --> 00:31:41,200
my concern is around legacy software

848
00:31:41,200 --> 00:31:42,640
products which aren't

849
00:31:42,640 --> 00:31:44,720
maintained and so what's your view of

850
00:31:44,720 --> 00:31:46,960
that from the legacy perspective please

851
00:31:46,960 --> 00:31:48,320
yeah so

852
00:31:48,320 --> 00:31:50,159
legacy software is a really large

853
00:31:50,159 --> 00:31:51,120
problem

854
00:31:51,120 --> 00:31:53,840
and it just doesn't tend to be where

855
00:31:53,840 --> 00:31:55,919
we're focusing because there are a lot

856
00:31:55,919 --> 00:31:58,159
of folks focusing on that as well

857
00:31:58,159 --> 00:32:00,640
because this is that case of

858
00:32:00,640 --> 00:32:02,640
we don't use zero days as an absolute

859
00:32:02,640 --> 00:32:04,480
metric for security because if you can

860
00:32:04,480 --> 00:32:07,120
use in days or phishing or malware to

861
00:32:07,120 --> 00:32:10,240
get in then sure you have zero zero days

862
00:32:10,240 --> 00:32:12,240
on that are being put in the press or

863
00:32:12,240 --> 00:32:14,399
are labeled for you but it's because

864
00:32:14,399 --> 00:32:16,320
folks were able to get in

865
00:32:16,320 --> 00:32:19,200
with much less

866
00:32:19,200 --> 00:32:21,919
sophisticated solutions as well so yeah

867
00:32:21,919 --> 00:32:23,279
it's a huge

868
00:32:23,279 --> 00:32:25,840
issue you know things like the internet

869
00:32:25,840 --> 00:32:27,919
explorer deprecation we still saw four

870
00:32:27,919 --> 00:32:31,279
internet explorer zero days last year

871
00:32:31,279 --> 00:32:34,799
and so it's finding ways to be robust

872
00:32:34,799 --> 00:32:35,679
enough

873
00:32:35,679 --> 00:32:38,240
against it

874
00:32:39,120 --> 00:32:41,840
i actually have another question

875
00:32:41,840 --> 00:32:45,200
i like that you said that we could

876
00:32:45,200 --> 00:32:48,640
try and ask vendors for

877
00:32:48,640 --> 00:32:51,679
what is their triage processes uh what

878
00:32:51,679 --> 00:32:52,960
is the

879
00:32:52,960 --> 00:32:56,960
how do they look for variants and so on

880
00:32:56,960 --> 00:32:59,279
my question is do you really think that

881
00:32:59,279 --> 00:33:02,880
if i ask apple microsoft

882
00:33:02,880 --> 00:33:05,679
metal google they will answer

883
00:33:05,679 --> 00:33:08,080
so i think it largely depends on how

884
00:33:08,080 --> 00:33:09,600
much money are you spending with each of

885
00:33:09,600 --> 00:33:11,600
these vendors and that's where i sort of

886
00:33:11,600 --> 00:33:14,399
say i know some of y'all are really our

887
00:33:14,399 --> 00:33:17,039
enterprise customers i am not so as a

888
00:33:17,039 --> 00:33:19,519
user if i just went up and said hey

889
00:33:19,519 --> 00:33:21,200
share these all these things

890
00:33:21,200 --> 00:33:22,559
with me

891
00:33:22,559 --> 00:33:24,559
what benefit is there to them

892
00:33:24,559 --> 00:33:26,880
but if you're a customer and saying hey

893
00:33:26,880 --> 00:33:28,559
this is what i expect

894
00:33:28,559 --> 00:33:30,240
from if you're going to get my money

895
00:33:30,240 --> 00:33:31,679
then i think that's where some of this

896
00:33:31,679 --> 00:33:33,919
change can happen and trying to just get

897
00:33:33,919 --> 00:33:36,720
this industry momentum to make some of

898
00:33:36,720 --> 00:33:39,840
these as more standards

899
00:33:39,840 --> 00:33:42,158
okay

900
00:33:42,240 --> 00:33:44,320
uh thank you for very interesting talk

901
00:33:44,320 --> 00:33:46,399
almost unthinkable i would say

902
00:33:46,399 --> 00:33:48,640
uh i'm asking devil's advocates

903
00:33:48,640 --> 00:33:50,640
prospective questions so don't don't

904
00:33:50,640 --> 00:33:54,720
kill me for the question but if cve's

905
00:33:54,720 --> 00:33:57,200
and zero day reports are all it takes

906
00:33:57,200 --> 00:34:00,720
for inspiration for an attacker

907
00:34:00,720 --> 00:34:02,960
how good is the transparency about this

908
00:34:02,960 --> 00:34:04,159
wouldn't

909
00:34:04,159 --> 00:34:06,880
hiding the patch and keeping silent

910
00:34:06,880 --> 00:34:08,560
about patching

911
00:34:08,560 --> 00:34:10,560
also improved the situation

912
00:34:10,560 --> 00:34:13,359
so no and my answer is very clearly no

913
00:34:13,359 --> 00:34:16,079
and the reason being is that these shops

914
00:34:16,079 --> 00:34:17,440
that are building these zero-day

915
00:34:17,440 --> 00:34:18,960
capabilities

916
00:34:18,960 --> 00:34:20,960
they have tons and tons of people whose

917
00:34:20,960 --> 00:34:22,879
whole job is is every time there's a

918
00:34:22,879 --> 00:34:24,960
security update they binary different

919
00:34:24,960 --> 00:34:27,520
patched if it so the attackers already

920
00:34:27,520 --> 00:34:29,760
have all this information it's just then

921
00:34:29,760 --> 00:34:31,359
on defenders

922
00:34:31,359 --> 00:34:33,199
i don't have that same purview to be

923
00:34:33,199 --> 00:34:35,119
able to do that every single month for

924
00:34:35,119 --> 00:34:36,399
every single product because there's

925
00:34:36,399 --> 00:34:38,879
just not resources as defenders there's

926
00:34:38,879 --> 00:34:41,280
not the same return on investment as it

927
00:34:41,280 --> 00:34:43,199
is for these commercial surveillance

928
00:34:43,199 --> 00:34:44,639
shops and others who are building the

929
00:34:44,639 --> 00:34:47,918
zero day exploits so by making it public

930
00:34:47,918 --> 00:34:49,918
we're making it so defenders just have

931
00:34:49,918 --> 00:34:51,679
that information in

932
00:34:51,679 --> 00:34:54,079
um in addition to what the attackers

933
00:34:54,079 --> 00:34:56,560
already have

934
00:34:57,920 --> 00:35:00,160
okay so thank you you've been a great

935
00:35:00,160 --> 00:35:02,800
audience uh maddie thanks again for the

936
00:35:02,800 --> 00:35:04,640
presentation

937
00:35:04,640 --> 00:35:05,680
please

938
00:35:05,680 --> 00:35:08,720
thank maddie last night

939
00:35:08,720 --> 00:35:11,959
thank you

