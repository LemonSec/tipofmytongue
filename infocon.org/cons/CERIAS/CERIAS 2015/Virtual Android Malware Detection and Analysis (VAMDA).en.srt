1
00:00:00,000 --> 00:00:15,990
hold on wants it okay hold on here I go

2
00:00:03,179 --> 00:00:17,939
get my notes okay okay well good

3
00:00:15,990 --> 00:00:19,529
afternoon welcome to Purdue University

4
00:00:17,940 --> 00:00:22,680
for another session of the serious

5
00:00:19,529 --> 00:00:25,560
security seminar if you are viewing this

6
00:00:22,680 --> 00:00:28,320
live or sometimes freshly f it was after

7
00:00:25,560 --> 00:00:30,509
it was recorded in March of 2015 please

8
00:00:28,320 --> 00:00:32,730
take some time and visit the serious

9
00:00:30,510 --> 00:00:34,649
website register get some information

10
00:00:32,729 --> 00:00:38,160
for the serious security symposium

11
00:00:34,649 --> 00:00:40,739
coming up in a few weeks so our guest

12
00:00:38,160 --> 00:00:43,769
today is from mitre corporation a proud

13
00:00:40,739 --> 00:00:48,000
sponsor and partner with serious and our

14
00:00:43,770 --> 00:00:50,460
visitor is dr. Andy piles Andy is a

15
00:00:48,000 --> 00:00:58,469
senior cyber security researcher Andy

16
00:00:50,460 --> 00:01:00,719
welcome thank you so the actual talk

17
00:00:58,469 --> 00:01:01,949
today is going to be called it is part

18
00:01:00,719 --> 00:01:03,449
of the research I've been leading over

19
00:01:01,949 --> 00:01:06,450
the last year and a half over at mitre

20
00:01:03,449 --> 00:01:08,670
it's called the van de or virtual

21
00:01:06,450 --> 00:01:11,909
Android malware detection and analysis

22
00:01:08,670 --> 00:01:13,710
and so let's go ahead and get started

23
00:01:11,909 --> 00:01:16,560
here so that the problem that we're

24
00:01:13,710 --> 00:01:19,860
trying to really address here is more

25
00:01:16,560 --> 00:01:21,439
generally the app vetting problem so the

26
00:01:19,860 --> 00:01:24,479
app betting problem in general is

27
00:01:21,439 --> 00:01:27,059
basically trying to figure out you know

28
00:01:24,479 --> 00:01:29,340
if you've got an application a mobile

29
00:01:27,060 --> 00:01:30,750
application how do you actually vet it

30
00:01:29,340 --> 00:01:33,060
or you know how do you verify that

31
00:01:30,750 --> 00:01:34,500
there's no malware on there so so just

32
00:01:33,060 --> 00:01:36,509
to give just to kind of set this problem

33
00:01:34,500 --> 00:01:40,829
a little bit there's there's basically

34
00:01:36,509 --> 00:01:43,680
you've got the google play store that

35
00:01:40,829 --> 00:01:46,350
has over a million applications actually

36
00:01:43,680 --> 00:01:49,860
i think it's like 1.2 1.2 million right

37
00:01:46,350 --> 00:01:51,509
now there's also the Apple Apple Store

38
00:01:49,860 --> 00:01:53,460
which has over again over a million

39
00:01:51,509 --> 00:01:55,500
applications then you also have like the

40
00:01:53,460 --> 00:01:58,199
third party applications as well like

41
00:01:55,500 --> 00:02:02,009
the Amazon and you know a couple other

42
00:01:58,200 --> 00:02:03,930
ones like that so so all of those all

43
00:02:02,009 --> 00:02:05,909
those app stores really have this

44
00:02:03,930 --> 00:02:07,710
problem of like how do you if you've got

45
00:02:05,909 --> 00:02:09,090
this huge quantity of applications you

46
00:02:07,710 --> 00:02:11,879
like over a million how do you process

47
00:02:09,090 --> 00:02:14,000
it these things very quickly so really

48
00:02:11,879 --> 00:02:17,130
what you want to look at is

49
00:02:14,000 --> 00:02:18,690
you know Dashiell insurance level so is

50
00:02:17,130 --> 00:02:20,730
this you know if they're looking at a

51
00:02:18,690 --> 00:02:22,260
very low assurance level then it's

52
00:02:20,730 --> 00:02:24,359
probably okay that actually take this

53
00:02:22,260 --> 00:02:26,790
application that it fairly quickly and

54
00:02:24,360 --> 00:02:30,780
throw it on it on the app market so you

55
00:02:26,790 --> 00:02:33,600
can download it and so forth however if

56
00:02:30,780 --> 00:02:35,280
it's if the actual height the assurance

57
00:02:33,600 --> 00:02:37,350
level is a little bit higher than then

58
00:02:35,280 --> 00:02:40,770
you may need to spend more time on that

59
00:02:37,350 --> 00:02:42,570
so so that so the way I look at that is

60
00:02:40,770 --> 00:02:43,950
there's there's basically the

61
00:02:42,570 --> 00:02:45,299
environment were like that you know

62
00:02:43,950 --> 00:02:47,549
there's Google Play there's a third

63
00:02:45,300 --> 00:02:49,500
party app app stores there's but then

64
00:02:47,550 --> 00:02:52,350
there's also there's enterprise app

65
00:02:49,500 --> 00:02:54,300
markets out there and these are these

66
00:02:52,350 --> 00:02:57,420
are basically enterprise or government

67
00:02:54,300 --> 00:02:59,160
entities where they've got where the

68
00:02:57,420 --> 00:03:00,750
actual assurance level is very high they

69
00:02:59,160 --> 00:03:02,780
want to they want to verify which

70
00:03:00,750 --> 00:03:07,230
applications are actually going on there

71
00:03:02,780 --> 00:03:09,840
so that being said so so what we really

72
00:03:07,230 --> 00:03:13,140
want to understand for more the advanced

73
00:03:09,840 --> 00:03:14,910
network analysis problem is we want to

74
00:03:13,140 --> 00:03:17,820
understand what is this app actually

75
00:03:14,910 --> 00:03:20,190
doing now again at the low you know that

76
00:03:17,820 --> 00:03:22,170
the googles and apples of the world dirt

77
00:03:20,190 --> 00:03:24,960
they're obviously concerned about this

78
00:03:22,170 --> 00:03:27,049
as well but not at the same level as a

79
00:03:24,960 --> 00:03:31,620
government entity or you know enterprise

80
00:03:27,050 --> 00:03:33,150
and so if you go so in both cases it's a

81
00:03:31,620 --> 00:03:34,800
very you know significant investment in

82
00:03:33,150 --> 00:03:39,210
time you guys spent a lot of time in

83
00:03:34,800 --> 00:03:41,280
this stuff yep the other thing that we

84
00:03:39,210 --> 00:03:42,660
won't look at is okay so so then if you

85
00:03:41,280 --> 00:03:44,370
start looking at sophisticated malware

86
00:03:42,660 --> 00:03:49,049
sophisticated malware may actually be

87
00:03:44,370 --> 00:03:51,450
hidden within applications and so some

88
00:03:49,050 --> 00:03:53,430
challenges with that is you know some in

89
00:03:51,450 --> 00:03:54,958
some cases malicious payloads can

90
00:03:53,430 --> 00:03:58,470
actually beat that dynamically

91
00:03:54,959 --> 00:04:01,440
downloaded so so just by doing static

92
00:03:58,470 --> 00:04:05,010
analysis by itself you may not actually

93
00:04:01,440 --> 00:04:06,510
capture this so the other challenges you

94
00:04:05,010 --> 00:04:08,459
know what actually triggers malware so

95
00:04:06,510 --> 00:04:11,310
we want to figure out like okay is there

96
00:04:08,459 --> 00:04:15,120
some sort of external event for example

97
00:04:11,310 --> 00:04:17,459
there is a talk from 2012 by this hacker

98
00:04:15,120 --> 00:04:20,160
by name in Charlotte Charlie Miller and

99
00:04:17,459 --> 00:04:23,850
he did a talk where he basically you're

100
00:04:20,160 --> 00:04:25,710
out a way of getting this I wouldn't

101
00:04:23,850 --> 00:04:26,830
call it malware but he got this

102
00:04:25,710 --> 00:04:29,438
application to actually

103
00:04:26,830 --> 00:04:30,969
run within the app store that was not

104
00:04:29,439 --> 00:04:33,520
supposed to be run and he actually got

105
00:04:30,970 --> 00:04:38,229
it through he got his his account banned

106
00:04:33,520 --> 00:04:42,520
apparently but so he did that but what

107
00:04:38,229 --> 00:04:44,050
this shows is that the existing you know

108
00:04:42,520 --> 00:04:46,060
AB vetting environments are not really

109
00:04:44,050 --> 00:04:49,960
suitable for some this advanced malware

110
00:04:46,060 --> 00:04:52,060
was seeing out there so the objective of

111
00:04:49,960 --> 00:04:54,969
Banda is to basically provide a platform

112
00:04:52,060 --> 00:04:58,689
for mobile malware app mobile malware

113
00:04:54,969 --> 00:05:00,969
analysis and abetting so we want to look

114
00:04:58,689 --> 00:05:05,379
at both the general use case and more

115
00:05:00,969 --> 00:05:08,020
the advanced use case as well and so it

116
00:05:05,379 --> 00:05:11,770
really the idea is to reduce costs by it

117
00:05:08,020 --> 00:05:14,139
by automating the by automating certain

118
00:05:11,770 --> 00:05:16,180
you know manual work so so so one of the

119
00:05:14,139 --> 00:05:18,310
things with with with enterprise where

120
00:05:16,180 --> 00:05:20,860
there is a lot of manual at betting

121
00:05:18,310 --> 00:05:22,150
involved there's a lot of labor it can

122
00:05:20,860 --> 00:05:24,190
be very expensive because you have the

123
00:05:22,150 --> 00:05:25,750
specialists that are really looking

124
00:05:24,190 --> 00:05:28,180
through these these applications one at

125
00:05:25,750 --> 00:05:29,409
a time which obviously doesn't scale if

126
00:05:28,180 --> 00:05:32,440
you got you know millions of

127
00:05:29,409 --> 00:05:34,090
applications so the other the other

128
00:05:32,440 --> 00:05:36,219
objective here is designed the platform

129
00:05:34,090 --> 00:05:39,340
for scalability we want to be able to

130
00:05:36,219 --> 00:05:41,229
handle if we want to scale up you know

131
00:05:39,340 --> 00:05:43,960
handle handle multiple applications we

132
00:05:41,229 --> 00:05:45,969
want to have that ability so we've got

133
00:05:43,960 --> 00:05:46,960
this multi-tier architecture which which

134
00:05:45,969 --> 00:05:50,349
I'm going to explain a little bit later

135
00:05:46,960 --> 00:05:53,068
we also want to accurately log observe

136
00:05:50,349 --> 00:05:56,409
and analyze mobile application behavior

137
00:05:53,069 --> 00:05:58,949
and we want to so the goal is to really

138
00:05:56,409 --> 00:06:02,379
record all relevant interactions we will

139
00:05:58,949 --> 00:06:04,029
record all that information and finally

140
00:06:02,379 --> 00:06:08,650
we actually want to provide the raw logs

141
00:06:04,029 --> 00:06:10,539
for further analysis so some of the

142
00:06:08,650 --> 00:06:11,948
challenges here as I've kind of

143
00:06:10,539 --> 00:06:15,039
mentioned some of these but you know how

144
00:06:11,949 --> 00:06:18,789
do you trigger malicious behavior so in

145
00:06:15,039 --> 00:06:21,210
that case with what the of the example I

146
00:06:18,789 --> 00:06:23,979
just gave with with that pic it's called

147
00:06:21,210 --> 00:06:26,849
the bouncer paper I've had the reference

148
00:06:23,979 --> 00:06:29,318
here somewhere I day you guys later but

149
00:06:26,849 --> 00:06:32,319
if you look at that that paper it's

150
00:06:29,319 --> 00:06:34,870
basically what they did is they just

151
00:06:32,319 --> 00:06:36,339
they just check to see okay I'm running

152
00:06:34,870 --> 00:06:39,399
within a virtualized environment I'm not

153
00:06:36,339 --> 00:06:40,409
going to do anything so so again so how

154
00:06:39,399 --> 00:06:42,089
do you actually trigger this

155
00:06:40,409 --> 00:06:44,909
must be arrest it's a big challenge and

156
00:06:42,089 --> 00:06:47,219
all that stuff and con testing this site

157
00:06:44,909 --> 00:06:49,279
ago but you know how do you counter

158
00:06:47,219 --> 00:06:52,199
sophisticate am i being monitored

159
00:06:49,279 --> 00:06:56,489
detection there's another another paper

160
00:06:52,199 --> 00:06:58,409
that came out recently added you know to

161
00:06:56,489 --> 00:07:00,599
basically show to step by step here's

162
00:06:58,409 --> 00:07:02,099
here's how you do here's how you detect

163
00:07:00,599 --> 00:07:03,899
that you're running within an emulator

164
00:07:02,099 --> 00:07:06,449
as you're running with it an emulator

165
00:07:03,899 --> 00:07:09,479
just don't do anything so it's it's it's

166
00:07:06,449 --> 00:07:10,619
fairly trivial for for malware DS to

167
00:07:09,479 --> 00:07:13,889
simply say okay I'm just not going to do

168
00:07:10,619 --> 00:07:15,479
anything so kind of the issue the other

169
00:07:13,889 --> 00:07:17,729
thing is realistic user input if you're

170
00:07:15,479 --> 00:07:24,869
trying to automate this how do you get

171
00:07:17,729 --> 00:07:28,558
realistic user input and then you know

172
00:07:24,869 --> 00:07:29,729
how do you i miss Gabor a couple these

173
00:07:28,559 --> 00:07:31,439
things but you know how do you

174
00:07:29,729 --> 00:07:32,878
efficiently capture all interactions

175
00:07:31,439 --> 00:07:34,199
with the system so that's another

176
00:07:32,879 --> 00:07:36,719
challenge like how do you actually

177
00:07:34,199 --> 00:07:38,639
capture what's happening so and then

178
00:07:36,719 --> 00:07:40,079
finally you know once you have all this

179
00:07:38,639 --> 00:07:43,559
all this flow today how what do you do

180
00:07:40,079 --> 00:07:46,139
with it how do you analyze it so if

181
00:07:43,559 --> 00:07:48,479
you're to Google you know Android system

182
00:07:46,139 --> 00:07:50,939
architecture and you go to Wikipedia

183
00:07:48,479 --> 00:07:54,479
this is this is the image you would see

184
00:07:50,939 --> 00:07:56,069
so this is just basically this is

185
00:07:54,479 --> 00:07:58,438
actually getting someone data now but

186
00:07:56,069 --> 00:08:01,679
it's still so relevant if you look at

187
00:07:58,439 --> 00:08:02,879
this if you look up here at the top to

188
00:08:01,679 --> 00:08:03,989
your here these are the different

189
00:08:02,879 --> 00:08:06,209
applications so if you write an

190
00:08:03,990 --> 00:08:09,089
application on Android it's going to be

191
00:08:06,209 --> 00:08:10,769
up in this higher tier and if you want

192
00:08:09,089 --> 00:08:12,509
to do anything interesting with it if

193
00:08:10,769 --> 00:08:14,999
you want to you know make a phone call

194
00:08:12,509 --> 00:08:16,619
or you want to use a camera or whatever

195
00:08:14,999 --> 00:08:19,319
you need to interact with the

196
00:08:16,619 --> 00:08:21,509
application framework which in turn

197
00:08:19,319 --> 00:08:24,629
interacts with these the lower lower

198
00:08:21,509 --> 00:08:27,809
libraries and and then ultimately all on

199
00:08:24,629 --> 00:08:29,899
top the linux kernel so if we want to

200
00:08:27,809 --> 00:08:32,459
record all this stuff somehow we need to

201
00:08:29,899 --> 00:08:33,630
get in the middle of this stuff right so

202
00:08:32,458 --> 00:08:35,698
we need to figure out like what is this

203
00:08:33,630 --> 00:08:37,769
this phone doing well you know what is

204
00:08:35,698 --> 00:08:39,478
this application like the phone being an

205
00:08:37,769 --> 00:08:42,779
application right tool what exactly is

206
00:08:39,479 --> 00:08:45,899
doing so that's that's the idea here so

207
00:08:42,779 --> 00:08:47,399
let's so the idea here of the just

208
00:08:45,899 --> 00:08:49,680
trying to update the idea behind this is

209
00:08:47,399 --> 00:08:51,480
so you know we made the observation that

210
00:08:49,680 --> 00:08:53,370
in order for any malicious behavior to

211
00:08:51,480 --> 00:08:54,180
occur like if you want to do any sort of

212
00:08:53,370 --> 00:08:56,760
network at you know

213
00:08:54,180 --> 00:08:58,709
network connection or write something a

214
00:08:56,760 --> 00:09:00,689
file or something like that you

215
00:08:58,710 --> 00:09:02,370
basically have to use a system call

216
00:09:00,690 --> 00:09:04,380
alright so it's kind of kind of kind of

217
00:09:02,370 --> 00:09:07,440
common sense but that's how you got to

218
00:09:04,380 --> 00:09:09,689
do it so the idea is if if if we were to

219
00:09:07,440 --> 00:09:15,450
somehow be able to record you know

220
00:09:09,690 --> 00:09:17,610
network file and binder which which I'll

221
00:09:15,450 --> 00:09:19,860
talk about this more in detail and

222
00:09:17,610 --> 00:09:22,020
second but also you know process related

223
00:09:19,860 --> 00:09:24,209
system calls it and so if we were able

224
00:09:22,020 --> 00:09:25,649
to record record all this stuff

225
00:09:24,209 --> 00:09:27,689
theoretically we should be able to

226
00:09:25,649 --> 00:09:30,149
really see what's happening with you

227
00:09:27,690 --> 00:09:33,570
know all the full interaction with this

228
00:09:30,149 --> 00:09:34,920
application is doing and so you see the

229
00:09:33,570 --> 00:09:37,620
idea is you know we want to be able to

230
00:09:34,920 --> 00:09:39,180
observe and and compare the application

231
00:09:37,620 --> 00:09:42,990
behavior and with into multiple

232
00:09:39,180 --> 00:09:44,819
environments instrument platforms and

233
00:09:42,990 --> 00:09:47,190
then we also want to have some some way

234
00:09:44,820 --> 00:09:49,110
of you know semi automating the the UI

235
00:09:47,190 --> 00:09:50,880
interaction so that you're not actually

236
00:09:49,110 --> 00:09:53,370
having to click through this stuff to

237
00:09:50,880 --> 00:09:55,830
the application manually and then

238
00:09:53,370 --> 00:09:57,480
finally we have a you know an automated

239
00:09:55,830 --> 00:10:00,900
report from the post processing of the

240
00:09:57,480 --> 00:10:03,000
raw logs so so some of the system call

241
00:10:00,900 --> 00:10:04,770
grips that we look at our you know

242
00:10:03,000 --> 00:10:06,810
nothing too exciting here but just you

243
00:10:04,770 --> 00:10:08,670
know it all the network related system

244
00:10:06,810 --> 00:10:12,329
calls we want to basically hook these

245
00:10:08,670 --> 00:10:14,610
look at what exam was happening so you

246
00:10:12,330 --> 00:10:16,860
know what socket connects send receive

247
00:10:14,610 --> 00:10:19,410
connect is is obviously useful because

248
00:10:16,860 --> 00:10:21,089
you can tell which IP addresses you this

249
00:10:19,410 --> 00:10:23,400
this applications i should actually

250
00:10:21,089 --> 00:10:25,200
connected to now obviously you can get

251
00:10:23,400 --> 00:10:27,870
all this stuff with something like TCP

252
00:10:25,200 --> 00:10:30,089
dump or you know key cap analysis but

253
00:10:27,870 --> 00:10:32,610
what you can at least is very difficult

254
00:10:30,089 --> 00:10:34,589
to do is actually figure out which

255
00:10:32,610 --> 00:10:36,240
traffic clothes are assigned to that

256
00:10:34,589 --> 00:10:38,279
specific application right so you can

257
00:10:36,240 --> 00:10:40,709
say yeah you know something on this

258
00:10:38,279 --> 00:10:42,689
phone was connecting to this IP this IP

259
00:10:40,709 --> 00:10:44,969
address over here and doing stuff but

260
00:10:42,690 --> 00:10:46,620
trying to actually bridge that gap there

261
00:10:44,970 --> 00:10:50,100
that's that's the whole idea with this

262
00:10:46,620 --> 00:10:51,660
and the file is useful because we can

263
00:10:50,100 --> 00:10:53,190
track all the files and our file

264
00:10:51,660 --> 00:10:55,529
interactions of the applications doing

265
00:10:53,190 --> 00:10:58,890
every file that opens reads and writes

266
00:10:55,529 --> 00:11:00,420
and so forth and the binder I'll

267
00:10:58,890 --> 00:11:03,660
describe this more in a second but

268
00:11:00,420 --> 00:11:07,050
that's the that does the it basically

269
00:11:03,660 --> 00:11:08,040
hooked the I octal system call and by

270
00:11:07,050 --> 00:11:09,508
doing that we can actually

271
00:11:08,040 --> 00:11:12,750
this is very interesting we actually

272
00:11:09,509 --> 00:11:16,110
track all the interactions between the

273
00:11:12,750 --> 00:11:19,470
application and all the Android services

274
00:11:16,110 --> 00:11:21,240
and then profs process we just we also

275
00:11:19,470 --> 00:11:24,720
look like every time it you know it runs

276
00:11:21,240 --> 00:11:27,149
exec like let's say that some malware

277
00:11:24,720 --> 00:11:30,029
that we've seen was the older ones it

278
00:11:27,149 --> 00:11:32,519
will actually include a you know arm

279
00:11:30,029 --> 00:11:34,860
binary so it'll actually try to actually

280
00:11:32,519 --> 00:11:36,569
keep that and sometimes you know with

281
00:11:34,860 --> 00:11:39,089
with the whole concept of rooted phones

282
00:11:36,569 --> 00:11:42,149
you'll have the su binary on there so

283
00:11:39,089 --> 00:11:43,380
you'll see you know exec su and its

284
00:11:42,149 --> 00:11:48,060
trying to knows what's trying to do

285
00:11:43,380 --> 00:11:50,610
right so zoom in on the Android system

286
00:11:48,060 --> 00:11:54,029
interaction the way that way this works

287
00:11:50,610 --> 00:11:56,009
is so for the binder module turns out

288
00:11:54,029 --> 00:11:59,490
that every time that the application

289
00:11:56,009 --> 00:12:01,500
wants to interact so that it's again I'm

290
00:11:59,490 --> 00:12:03,779
up here where you guys can see that okay

291
00:12:01,500 --> 00:12:06,420
so in any time the application wants to

292
00:12:03,779 --> 00:12:08,970
interact with the framework this the

293
00:12:06,420 --> 00:12:13,319
system services it actually goes through

294
00:12:08,970 --> 00:12:15,240
a through the colonel loot or not so

295
00:12:13,319 --> 00:12:16,920
attack what it's doing is it going it

296
00:12:15,240 --> 00:12:19,319
ultimately through a long path that

297
00:12:16,920 --> 00:12:22,800
actually goes through here the binder

298
00:12:19,319 --> 00:12:23,939
driver and then from there it's able to

299
00:12:22,800 --> 00:12:26,399
interact with it with the different

300
00:12:23,940 --> 00:12:28,470
applications so bye bye bye sitting at

301
00:12:26,399 --> 00:12:31,889
that layer we can actually get a whole

302
00:12:28,470 --> 00:12:33,029
lot of very useful information so some

303
00:12:31,889 --> 00:12:36,149
examples that we can do we can actually

304
00:12:33,029 --> 00:12:38,670
track you know sensitive transactions

305
00:12:36,149 --> 00:12:40,709
every time it tries to treat the imei or

306
00:12:38,670 --> 00:12:43,219
the phone number some of that we can

307
00:12:40,709 --> 00:12:46,109
actually track all that information also

308
00:12:43,220 --> 00:12:47,760
interestingly nothing until I get you

309
00:12:46,110 --> 00:12:49,980
know SMS messages sent out we can

310
00:12:47,760 --> 00:12:55,949
actually sent or received we can

311
00:12:49,980 --> 00:12:57,300
actually go retrieve that as well so so

312
00:12:55,949 --> 00:12:58,769
now that we have this kind of this

313
00:12:57,300 --> 00:13:01,500
concept of how to do how did we actually

314
00:12:58,769 --> 00:13:03,779
build how do we design this okay so so

315
00:13:01,500 --> 00:13:08,430
the first first idea here is more you

316
00:13:03,779 --> 00:13:11,279
know more intuition is that so the first

317
00:13:08,430 --> 00:13:14,550
one up here this this guy here is as an

318
00:13:11,279 --> 00:13:16,990
emulator right so so the emulator is is

319
00:13:14,550 --> 00:13:19,870
typically something based off of

320
00:13:16,990 --> 00:13:23,140
of cute cute in you if you guys are

321
00:13:19,870 --> 00:13:25,110
familiar with that so um this this is

322
00:13:23,140 --> 00:13:28,029
obviously a very well-known

323
00:13:25,110 --> 00:13:30,520
virtualization software out there and

324
00:13:28,029 --> 00:13:32,800
it's very easy to scale right you can

325
00:13:30,520 --> 00:13:34,270
just you just have a server out there

326
00:13:32,800 --> 00:13:36,520
and have a whole bunch of instances and

327
00:13:34,270 --> 00:13:37,990
it's very easy to scale there's the

328
00:13:36,520 --> 00:13:40,270
problem with that though although it's

329
00:13:37,990 --> 00:13:42,730
easy it's also very easy to detect

330
00:13:40,270 --> 00:13:45,040
unfortunately so even though this seems

331
00:13:42,730 --> 00:13:48,610
like the easiest solution it's not the

332
00:13:45,040 --> 00:13:50,529
perfect solution so so what we did is we

333
00:13:48,610 --> 00:13:52,390
actually use a combination of all three

334
00:13:50,529 --> 00:13:55,270
of these so to the other approach here

335
00:13:52,390 --> 00:13:56,620
the second one here the a arch is this

336
00:13:55,270 --> 00:13:59,290
is this is kind of interesting with the

337
00:13:56,620 --> 00:14:02,250
last last year really we're seeing a lot

338
00:13:59,290 --> 00:14:04,810
a lot more of these on 64-bit ARM server

339
00:14:02,250 --> 00:14:07,000
environments so with these things you

340
00:14:04,810 --> 00:14:09,640
can actually have it's very similar to

341
00:14:07,000 --> 00:14:11,940
like x86 based platform where you've got

342
00:14:09,640 --> 00:14:14,560
you know full hardware virtualization

343
00:14:11,940 --> 00:14:16,570
capabilities and it's actually got like

344
00:14:14,560 --> 00:14:19,119
you know a lot of memory can throw out

345
00:14:16,570 --> 00:14:20,230
so you have like 128 gigs or a memory or

346
00:14:19,120 --> 00:14:23,529
some like that so with that you can have

347
00:14:20,230 --> 00:14:25,779
full hardware virtualization so you can

348
00:14:23,529 --> 00:14:27,939
you can actually have a you know a

349
00:14:25,779 --> 00:14:29,950
virtual Android instance and it's also

350
00:14:27,940 --> 00:14:32,670
very it's much much more difficult to

351
00:14:29,950 --> 00:14:37,120
detect although it's still so possible

352
00:14:32,670 --> 00:14:40,930
and then finally obviously the D phone

353
00:14:37,120 --> 00:14:42,610
this is a nexus 5 I believe and so so

354
00:14:40,930 --> 00:14:44,620
with this one this one is actually the

355
00:14:42,610 --> 00:14:47,579
best environment because it's an actual

356
00:14:44,620 --> 00:14:50,230
phone it's very easy to instrument it

357
00:14:47,579 --> 00:14:52,149
problem with that though is it doesn't

358
00:14:50,230 --> 00:14:53,380
scale very well right so if you're

359
00:14:52,149 --> 00:14:55,000
trying that if you're trying to you know

360
00:14:53,380 --> 00:14:57,370
go to the level you got a million

361
00:14:55,000 --> 00:14:58,839
applications you're trying to it's very

362
00:14:57,370 --> 00:15:02,170
difficult to have a visualize data

363
00:14:58,839 --> 00:15:03,240
center with a million phone just stacked

364
00:15:02,170 --> 00:15:07,719
up in there right I mean it's just

365
00:15:03,240 --> 00:15:09,130
doesn't work too well so okay so once we

366
00:15:07,720 --> 00:15:12,550
have all this stuff all the stuff set up

367
00:15:09,130 --> 00:15:14,950
the big picture here is ultimately we

368
00:15:12,550 --> 00:15:17,410
upload an apk and a BK is basically just

369
00:15:14,950 --> 00:15:21,310
an application it's a it's a zip file

370
00:15:17,410 --> 00:15:22,750
essentially we would take that do some

371
00:15:21,310 --> 00:15:25,839
initial static analysis on the

372
00:15:22,750 --> 00:15:30,070
application we would then drive the user

373
00:15:25,839 --> 00:15:34,120
input and then all that's

374
00:15:30,070 --> 00:15:36,010
then we basically would do that on each

375
00:15:34,120 --> 00:15:38,320
each one of these platforms so we would

376
00:15:36,010 --> 00:15:40,060
do like you know like on the previous

377
00:15:38,320 --> 00:15:43,120
slide we would have the you know arm

378
00:15:40,060 --> 00:15:45,219
server the modified emulator and also

379
00:15:43,120 --> 00:15:47,650
the physical phone and then once we once

380
00:15:45,220 --> 00:15:49,270
we've done that we basically take all

381
00:15:47,650 --> 00:15:54,930
the results combine them together and

382
00:15:49,270 --> 00:15:57,370
then we can generate the final report so

383
00:15:54,930 --> 00:16:00,459
jumping to the implementation part what

384
00:15:57,370 --> 00:16:02,650
we did so we decided on the phone and

385
00:16:00,460 --> 00:16:05,800
the arm server we decide to go with a a

386
00:16:02,650 --> 00:16:07,660
a kernel module where we just basically

387
00:16:05,800 --> 00:16:09,819
hook all the all the system calls which

388
00:16:07,660 --> 00:16:12,760
is nothing new I mean there's mean this

389
00:16:09,820 --> 00:16:14,590
has been done for a while but but we

390
00:16:12,760 --> 00:16:17,439
decided to do it on an actual you know

391
00:16:14,590 --> 00:16:20,020
android phone and on the emulator we

392
00:16:17,440 --> 00:16:22,090
used a qm you plug in so we're really

393
00:16:20,020 --> 00:16:24,819
doing so so essentially we're using a

394
00:16:22,090 --> 00:16:27,400
virtual machine introspection techniques

395
00:16:24,820 --> 00:16:29,860
so by doing all these things with that's

396
00:16:27,400 --> 00:16:40,770
that's the whole whole idea of how it

397
00:16:29,860 --> 00:16:43,360
works so so the way they have work plus

398
00:16:40,770 --> 00:16:45,460
we can jump in here that this is how we

399
00:16:43,360 --> 00:16:48,970
would actually actually implemented on

400
00:16:45,460 --> 00:16:52,120
the the kernel module part so if you

401
00:16:48,970 --> 00:16:55,720
look at the Linux kernel today you'd see

402
00:16:52,120 --> 00:16:58,150
the the system call table which is

403
00:16:55,720 --> 00:17:01,960
interestingly it's not an exported

404
00:16:58,150 --> 00:17:03,970
symbol so if you it gives if you guys

405
00:17:01,960 --> 00:17:05,459
have done any colonel program is anyone

406
00:17:03,970 --> 00:17:07,930
here done in your kernel program before

407
00:17:05,459 --> 00:17:10,150
one guy one went a couple got a couple

408
00:17:07,930 --> 00:17:12,220
people okay so yeah so if you're doing

409
00:17:10,150 --> 00:17:15,400
some kernel programming basically you've

410
00:17:12,220 --> 00:17:17,350
got an issue where for security reasons

411
00:17:15,400 --> 00:17:19,000
they've invaded so certain symbols are

412
00:17:17,349 --> 00:17:21,458
are not exported so if they're not

413
00:17:19,000 --> 00:17:23,920
exported it's kind of contracting so

414
00:17:21,459 --> 00:17:27,430
anyway we it's it took a little work but

415
00:17:23,920 --> 00:17:30,070
we were able to you know finally find

416
00:17:27,430 --> 00:17:33,940
that the system call table and then from

417
00:17:30,070 --> 00:17:36,490
there we will too redirector the way you

418
00:17:33,940 --> 00:17:39,130
read this is basically the system call

419
00:17:36,490 --> 00:17:41,170
table has the addresses of these various

420
00:17:39,130 --> 00:17:42,710
functions out here like it for example

421
00:17:41,170 --> 00:17:44,809
sis close or sis open

422
00:17:42,710 --> 00:17:46,610
so that would that actually store the

423
00:17:44,809 --> 00:17:48,908
address sir so all we do is we just

424
00:17:46,610 --> 00:17:52,340
basically figure out what that is and

425
00:17:48,909 --> 00:17:55,549
replace that with this one right here

426
00:17:52,340 --> 00:17:58,549
and then and then what what we can do we

427
00:17:55,549 --> 00:18:01,039
can actually process that before the

428
00:17:58,549 --> 00:18:03,168
actual calls actually actually run and

429
00:18:01,039 --> 00:18:06,049
then once once it's done then we send

430
00:18:03,169 --> 00:18:07,850
simply send the response back so you

431
00:18:06,049 --> 00:18:11,360
can't really tell this it's there's

432
00:18:07,850 --> 00:18:19,789
enough that's running okay so that's

433
00:18:11,360 --> 00:18:23,389
that's the kernel module idea and the

434
00:18:19,789 --> 00:18:26,720
next one here is the the you know BMI up

435
00:18:23,390 --> 00:18:29,120
based architecture so this is this is

436
00:18:26,720 --> 00:18:33,320
the part that's run on the emulator so

437
00:18:29,120 --> 00:18:35,539
the way this works is you've got the

438
00:18:33,320 --> 00:18:38,270
witan way to read this is to up here a

439
00:18:35,539 --> 00:18:40,460
user process somehow executing system

440
00:18:38,270 --> 00:18:45,950
call right as soon as it executes the

441
00:18:40,460 --> 00:18:48,559
system call what happens is that it at

442
00:18:45,950 --> 00:18:52,460
some point through the flow it generates

443
00:18:48,559 --> 00:18:55,190
a software interrupt okay so a software

444
00:18:52,460 --> 00:18:59,029
interrupt is then we can then pick this

445
00:18:55,190 --> 00:19:01,760
thing up within our plug-in and then

446
00:18:59,029 --> 00:19:06,380
then we can actually process that the

447
00:19:01,760 --> 00:19:09,049
actual system call basically and and

448
00:19:06,380 --> 00:19:11,029
then then what once once we're done

449
00:19:09,049 --> 00:19:13,129
processing it we then pass it off to the

450
00:19:11,029 --> 00:19:15,230
colonel so then the colonel process that

451
00:19:13,130 --> 00:19:17,480
normally and then we get the return from

452
00:19:15,230 --> 00:19:19,850
it and then goes back up to here so this

453
00:19:17,480 --> 00:19:22,159
is nice in that we we really don't have

454
00:19:19,850 --> 00:19:23,719
to modify anything in user space or in

455
00:19:22,159 --> 00:19:28,149
the kernel space so it's actually gives

456
00:19:23,720 --> 00:19:28,149
you a little bit higher assurance level

457
00:19:28,720 --> 00:19:33,279
so moving on to the analysis part

458
00:19:38,020 --> 00:19:43,760
so basically we have several different

459
00:19:41,720 --> 00:19:46,490
different approaches here so the first

460
00:19:43,760 --> 00:19:50,600
approach is the static analysis this is

461
00:19:46,490 --> 00:19:52,790
where we package and basically parse an

462
00:19:50,600 --> 00:19:55,669
apk we look at the what's called the

463
00:19:52,790 --> 00:19:57,350
manifest the way have you have you guys

464
00:19:55,670 --> 00:19:59,570
have ever done any Android app

465
00:19:57,350 --> 00:20:01,340
development here anybody somewhat

466
00:19:59,570 --> 00:20:03,439
familiar this ok ok i just want to see

467
00:20:01,340 --> 00:20:05,929
you know if you guys are russian one

468
00:20:03,440 --> 00:20:07,250
time I all right so yes so basically if

469
00:20:05,930 --> 00:20:08,570
you if you know what the manifest is

470
00:20:07,250 --> 00:20:11,120
that's where you set all the different

471
00:20:08,570 --> 00:20:13,580
you know permissions requested and all

472
00:20:11,120 --> 00:20:15,260
and you also say ok these are the

473
00:20:13,580 --> 00:20:16,760
services that are starting and some of

474
00:20:15,260 --> 00:20:21,230
that so you declare all that within the

475
00:20:16,760 --> 00:20:23,540
manifest so so the idea is we just kind

476
00:20:21,230 --> 00:20:24,740
of just a very lightweight parsing of

477
00:20:23,540 --> 00:20:26,899
that we just kind of say ok these are

478
00:20:24,740 --> 00:20:28,820
the different applications and we also

479
00:20:26,900 --> 00:20:30,890
look look to see if there's any native

480
00:20:28,820 --> 00:20:33,740
libraries out there so there's there's

481
00:20:30,890 --> 00:20:36,320
another interesting gap with with mobile

482
00:20:33,740 --> 00:20:39,560
mobile space right now work yeah it

483
00:20:36,320 --> 00:20:42,080
turns out that most least from the last

484
00:20:39,560 --> 00:20:44,810
lesser years mostly in the malware that

485
00:20:42,080 --> 00:20:46,610
we've seen all the all the ones that

486
00:20:44,810 --> 00:20:48,770
really do anything particularly

487
00:20:46,610 --> 00:20:50,540
delicious it's all done within native

488
00:20:48,770 --> 00:20:52,910
libraries so we don't ever see anything

489
00:20:50,540 --> 00:20:54,620
like an in Java level oh yeah you know

490
00:20:52,910 --> 00:20:56,300
let's do something really malicious it's

491
00:20:54,620 --> 00:20:59,060
you typically done within a native

492
00:20:56,300 --> 00:21:02,000
library so we've done some work on this

493
00:20:59,060 --> 00:21:03,530
to to try to try to look at this a

494
00:21:02,000 --> 00:21:05,180
little bit and so the way that we do

495
00:21:03,530 --> 00:21:08,180
that right now it's it's very

496
00:21:05,180 --> 00:21:10,760
rudimentary but but we actually track

497
00:21:08,180 --> 00:21:12,140
all the possible assistant calls that

498
00:21:10,760 --> 00:21:16,550
could be done on this on this particular

499
00:21:12,140 --> 00:21:19,070
library then then once we know once we

500
00:21:16,550 --> 00:21:21,860
once we know that total list we can then

501
00:21:19,070 --> 00:21:26,360
use that to you know help with with the

502
00:21:21,860 --> 00:21:27,889
actual analysis later and then then the

503
00:21:26,360 --> 00:21:29,600
next part is obviously the Android API

504
00:21:27,890 --> 00:21:35,510
call inspection this is really more the

505
00:21:29,600 --> 00:21:40,580
binder inspection ok so we can basically

506
00:21:35,510 --> 00:21:44,480
track to track data leaks look at look

507
00:21:40,580 --> 00:21:45,949
at privacy issues and some of the things

508
00:21:44,480 --> 00:21:47,240
we can we can look at is you know from

509
00:21:45,950 --> 00:21:49,130
that from the previous slide this kind

510
00:21:47,240 --> 00:21:49,910
of explains a little bit but we can look

511
00:21:49,130 --> 00:21:52,990
at every time

512
00:21:49,910 --> 00:21:56,030
application tries to access the camera

513
00:21:52,990 --> 00:21:57,320
you know retrieve imei or contacts or

514
00:21:56,030 --> 00:22:01,550
whatever we can actually track all that

515
00:21:57,320 --> 00:22:05,810
information also SMS traffic now for the

516
00:22:01,550 --> 00:22:07,580
network part we I think I touched on

517
00:22:05,810 --> 00:22:14,179
this a little bit briefly but we also

518
00:22:07,580 --> 00:22:16,490
use like it an SSL mitm or TMR man the

519
00:22:14,180 --> 00:22:18,590
middle proxy to actually record all the

520
00:22:16,490 --> 00:22:21,740
traffic so a lot of times you'll see

521
00:22:18,590 --> 00:22:23,870
that you know traffic will actually be

522
00:22:21,740 --> 00:22:25,760
encrypted over SSL so you can't really

523
00:22:23,870 --> 00:22:27,139
it so you just you were only some I TCP

524
00:22:25,760 --> 00:22:29,900
dump you're not you're able to capture

525
00:22:27,140 --> 00:22:33,130
that so we just use that to help the

526
00:22:29,900 --> 00:22:35,350
course on the data and then we also

527
00:22:33,130 --> 00:22:37,880
utilize tools where we can actually

528
00:22:35,350 --> 00:22:39,830
record all that all that all the actual

529
00:22:37,880 --> 00:22:44,390
data that was transmitted to see if

530
00:22:39,830 --> 00:22:46,639
there's any data leakage see the other

531
00:22:44,390 --> 00:22:51,050
thing that we look at some file system

532
00:22:46,640 --> 00:22:53,600
stuff this is just again just just just

533
00:22:51,050 --> 00:22:55,100
basically parsing all the the logs that

534
00:22:53,600 --> 00:22:58,370
were that were previously previously

535
00:22:55,100 --> 00:23:01,580
generated so we will look at the file

536
00:22:58,370 --> 00:23:03,949
system to see what sort of what sort of

537
00:23:01,580 --> 00:23:06,919
files were opened what's what sort of

538
00:23:03,950 --> 00:23:10,550
files were you know read and written to

539
00:23:06,920 --> 00:23:15,410
and so forth and the process one we're

540
00:23:10,550 --> 00:23:17,270
looking at some malware from like 2012 i

541
00:23:15,410 --> 00:23:18,890
think in this this is one that was

542
00:23:17,270 --> 00:23:21,020
called rage against the cage and let

543
00:23:18,890 --> 00:23:23,390
guys know that one it was kind of this

544
00:23:21,020 --> 00:23:26,900
fans won't him out but basically it was

545
00:23:23,390 --> 00:23:29,150
running a a fork bomb as what i was

546
00:23:26,900 --> 00:23:30,410
doing so so with that basically what

547
00:23:29,150 --> 00:23:32,510
that means yes it's a couple people

548
00:23:30,410 --> 00:23:34,820
checking from down there basically what

549
00:23:32,510 --> 00:23:36,580
that means is that you just run for over

550
00:23:34,820 --> 00:23:40,419
and over again and then it finally

551
00:23:36,580 --> 00:23:43,720
exhaust the system and and it you know

552
00:23:40,420 --> 00:23:46,040
from that you're able to get a privilege

553
00:23:43,720 --> 00:23:48,920
escalation and then do all kinds of

554
00:23:46,040 --> 00:23:50,629
nasty stuff so we were we add that in

555
00:23:48,920 --> 00:23:52,490
there as well to you know to kind of

556
00:23:50,630 --> 00:23:54,680
track that that kind of stuff so it

557
00:23:52,490 --> 00:23:56,930
turns out though that you know we have

558
00:23:54,680 --> 00:23:59,540
that in there and the other option is

559
00:23:56,930 --> 00:24:01,280
the automated screenshot capability so

560
00:23:59,540 --> 00:24:03,540
anytime that we

561
00:24:01,280 --> 00:24:04,980
find anything we can we take a

562
00:24:03,540 --> 00:24:07,678
screenshot of that which is which is

563
00:24:04,980 --> 00:24:13,320
useful in the in the final final report

564
00:24:07,679 --> 00:24:15,150
that we generate okay so just to get a

565
00:24:13,320 --> 00:24:16,169
little bit more detail on the mat and

566
00:24:15,150 --> 00:24:20,400
the metrics that we are currently

567
00:24:16,170 --> 00:24:23,750
looking at we can any time that an

568
00:24:20,400 --> 00:24:27,420
application tends to read an SMS message

569
00:24:23,750 --> 00:24:30,120
or you know retreat retrieve a phone

570
00:24:27,420 --> 00:24:34,190
number get the sim card serial number

571
00:24:30,120 --> 00:24:38,428
and so on or you know take a picture

572
00:24:34,190 --> 00:24:40,110
anytime it it it it basically tries to

573
00:24:38,429 --> 00:24:42,750
get any of this stuff it will basically

574
00:24:40,110 --> 00:24:51,449
log all that stuff so we can we can see

575
00:24:42,750 --> 00:24:53,040
what's happening so the next slide here

576
00:24:51,450 --> 00:24:59,520
just kind of type out the van de

577
00:24:53,040 --> 00:25:01,980
workflow so the way this is work is so

578
00:24:59,520 --> 00:25:05,100
first an application is uploaded to the

579
00:25:01,980 --> 00:25:06,780
van the platform and we you know we

580
00:25:05,100 --> 00:25:09,870
basically analyze the application with

581
00:25:06,780 --> 00:25:12,389
the emulator environment using the you

582
00:25:09,870 --> 00:25:14,280
know the actual BMI approach so that we

583
00:25:12,390 --> 00:25:16,230
talked about earlier and we find that

584
00:25:14,280 --> 00:25:18,270
you know this is the cheapest to deploy

585
00:25:16,230 --> 00:25:20,040
so we want to be able to this is easy to

586
00:25:18,270 --> 00:25:23,520
scale out we can have you know have as

587
00:25:20,040 --> 00:25:27,149
many of these as we want we want to we

588
00:25:23,520 --> 00:25:29,340
can basically this this is useful for

589
00:25:27,150 --> 00:25:31,320
the less sophisticated malware out there

590
00:25:29,340 --> 00:25:34,500
so anything that's doing anything any

591
00:25:31,320 --> 00:25:37,139
advanced network capabilities this this

592
00:25:34,500 --> 00:25:38,610
is the best approach and then we we then

593
00:25:37,140 --> 00:25:40,890
you know analyze the applications on

594
00:25:38,610 --> 00:25:43,020
these to these other platforms and then

595
00:25:40,890 --> 00:25:45,630
we can basically analyze and then

596
00:25:43,020 --> 00:25:51,030
compare the results and then finally

597
00:25:45,630 --> 00:25:54,720
generate the report and so this next

598
00:25:51,030 --> 00:25:56,760
slide here is an actual screen shot at

599
00:25:54,720 --> 00:26:01,050
putting you this to work of an

600
00:25:56,760 --> 00:26:02,850
application of a malware sample that we

601
00:26:01,050 --> 00:26:05,129
were actual with that so this this shows

602
00:26:02,850 --> 00:26:07,260
you this is kind of what we do with the

603
00:26:05,130 --> 00:26:10,590
on the emulator modified emulator and

604
00:26:07,260 --> 00:26:12,720
this this is going to show you how with

605
00:26:10,590 --> 00:26:14,370
interaction just to let you know this is

606
00:26:12,720 --> 00:26:16,530
this extra takes a long time

607
00:26:14,370 --> 00:26:18,419
to analyze an application it usually

608
00:26:16,530 --> 00:26:20,610
takes about 45 minutes to an hour just

609
00:26:18,420 --> 00:26:22,440
for each instance so it takes a long

610
00:26:20,610 --> 00:26:23,429
time so this is the video here i'm going

611
00:26:22,440 --> 00:26:26,610
to show you i'm not going to bore you

612
00:26:23,430 --> 00:26:29,190
with a 45 minute video here is actually

613
00:26:26,610 --> 00:26:31,709
it's sped up like I think by eight times

614
00:26:29,190 --> 00:26:33,360
eight to ten times but even then it's

615
00:26:31,710 --> 00:26:35,070
still kind of tedious you're in kind of

616
00:26:33,360 --> 00:26:38,129
like alright so I'll try to walk it

617
00:26:35,070 --> 00:26:40,439
through walk us through it ok guys see

618
00:26:38,130 --> 00:26:47,130
that okay alright so here it is it

619
00:26:40,440 --> 00:26:50,160
starting it up this is the semi

620
00:26:47,130 --> 00:26:52,350
automated you I up UI automation script

621
00:26:50,160 --> 00:26:55,190
that we have what is doing right now is

622
00:26:52,350 --> 00:27:00,000
it's actually installing the application

623
00:26:55,190 --> 00:27:01,860
our application which and again this is

624
00:27:00,000 --> 00:27:04,070
this is eight times speedup so this is

625
00:27:01,860 --> 00:27:06,090
just takes a long time to do it but

626
00:27:04,070 --> 00:27:12,629
alright so here it is they actually

627
00:27:06,090 --> 00:27:16,350
installed the application and this this

628
00:27:12,630 --> 00:27:18,210
this malware here is called locker and

629
00:27:16,350 --> 00:27:19,949
basically it's really not that

630
00:27:18,210 --> 00:27:23,220
sophisticated but what it tries to do is

631
00:27:19,950 --> 00:27:26,580
it installs we pause that for a second

632
00:27:23,220 --> 00:27:28,290
so we can see what's happening so what

633
00:27:26,580 --> 00:27:32,610
what it does is it basically installs

634
00:27:28,290 --> 00:27:35,909
itself and it and it tries to did it

635
00:27:32,610 --> 00:27:39,120
basically keeps itself running in the

636
00:27:35,910 --> 00:27:40,770
front so it so if you if you press and

637
00:27:39,120 --> 00:27:42,629
like like the home button or something

638
00:27:40,770 --> 00:27:44,850
that nothing will work because it's all

639
00:27:42,630 --> 00:27:46,590
it just always thinks to that's in the

640
00:27:44,850 --> 00:27:48,120
front so it doesn't really actually do

641
00:27:46,590 --> 00:27:50,669
anything really malicious it just it

642
00:27:48,120 --> 00:27:52,649
just always runs in the front so so you

643
00:27:50,670 --> 00:27:55,170
get this pop up and says to unlock your

644
00:27:52,650 --> 00:27:58,380
device you know send us three hundred

645
00:27:55,170 --> 00:28:01,500
dollars okay so so this you know they're

646
00:27:58,380 --> 00:28:05,010
trying to get some information here so

647
00:28:01,500 --> 00:28:06,480
our our our system really just kind of

648
00:28:05,010 --> 00:28:10,080
goes through this autumn at you know in

649
00:28:06,480 --> 00:28:12,150
an automated fashion obviously if

650
00:28:10,080 --> 00:28:14,309
someone wanted to go go through here and

651
00:28:12,150 --> 00:28:16,260
actually do it automatically or you know

652
00:28:14,309 --> 00:28:18,570
actually a manual intervention you could

653
00:28:16,260 --> 00:28:21,290
do that as well it just kind of shows

654
00:28:18,570 --> 00:28:21,290
you how it works

655
00:28:23,570 --> 00:28:29,090
so it's interesting to just you know

656
00:28:25,710 --> 00:28:31,730
into three hundred dollars and then

657
00:28:29,090 --> 00:28:34,439
attend once you have that 300 Allah's

658
00:28:31,730 --> 00:28:36,840
you get it generate generates a special

659
00:28:34,440 --> 00:28:39,029
code and then then by doing that it will

660
00:28:36,840 --> 00:28:40,019
actually send an email address i want to

661
00:28:39,029 --> 00:28:43,529
show that you should don't show your

662
00:28:40,019 --> 00:28:48,230
screenshot it I'm sorry but it's going

663
00:28:43,529 --> 00:28:51,240
to go it's goes through here and so are

664
00:28:48,230 --> 00:28:52,980
you I automation is not perfect it's it

665
00:28:51,240 --> 00:28:54,450
I mean it works but it's not really

666
00:28:52,980 --> 00:28:59,309
think they can use a lot more

667
00:28:54,450 --> 00:29:00,840
sophistication okay so just going to go

668
00:28:59,309 --> 00:29:02,010
through here and then eventually it's

669
00:29:00,840 --> 00:29:03,779
going to work its way down and it done

670
00:29:02,010 --> 00:29:10,679
lock device so I'm just going to skip

671
00:29:03,779 --> 00:29:14,899
ahead a little bit okay all right so too

672
00:29:10,679 --> 00:29:17,279
but by doing that what we were able to

673
00:29:14,899 --> 00:29:20,908
we looked at the logs here and this is

674
00:29:17,279 --> 00:29:22,380
what we found out so it turns out that

675
00:29:20,909 --> 00:29:26,450
is actually connecting to an IP address

676
00:29:22,380 --> 00:29:29,909
over in the Ukraine and what it's doing

677
00:29:26,450 --> 00:29:33,419
we found out that it's this is actual s

678
00:29:29,909 --> 00:29:38,429
messages sent out so in this case it's

679
00:29:33,419 --> 00:29:40,049
it retrieved the imei information and in

680
00:29:38,429 --> 00:29:41,820
this case this was on emulator so it

681
00:29:40,049 --> 00:29:43,080
wasn't really that interesting but you

682
00:29:41,820 --> 00:29:45,510
know if it's running on a real phone

683
00:29:43,080 --> 00:29:47,899
this is what you can see also grab

684
00:29:45,510 --> 00:29:50,220
though it's called the app key so

685
00:29:47,899 --> 00:29:52,049
grabbed all the information and it

686
00:29:50,220 --> 00:29:58,409
connected to this server in Ukraine and

687
00:29:52,049 --> 00:30:00,960
that's what what it's doing so so we

688
00:29:58,409 --> 00:30:02,970
also looked at I mentioned earlier with

689
00:30:00,960 --> 00:30:04,980
it with the application running in the

690
00:30:02,970 --> 00:30:07,200
foreground all all the time and you're

691
00:30:04,980 --> 00:30:09,779
trying to stop it you just couldn't do

692
00:30:07,200 --> 00:30:12,149
it well it turns out that buy it by

693
00:30:09,779 --> 00:30:14,880
analyzing the binder activity this way

694
00:30:12,149 --> 00:30:16,320
we're able to see and so there's this

695
00:30:14,880 --> 00:30:19,200
mouton so looks like he's got some kind

696
00:30:16,320 --> 00:30:20,730
of a for loop running just you know

697
00:30:19,200 --> 00:30:23,880
constantly move to ask Allah to the

698
00:30:20,730 --> 00:30:26,669
front during that time 281 thousand

699
00:30:23,880 --> 00:30:27,840
times so just constantly doing that so

700
00:30:26,669 --> 00:30:29,730
that's really all they're doing in this

701
00:30:27,840 --> 00:30:31,110
case is really not that interesting but

702
00:30:29,730 --> 00:30:34,429
it just kind of shows you the

703
00:30:31,110 --> 00:30:34,428
capabilities what we can do

704
00:30:37,909 --> 00:30:48,390
alright so this is actually going doing

705
00:30:45,299 --> 00:30:51,270
a lot faster than I was planning but so

706
00:30:48,390 --> 00:30:52,470
what this is where we're at so far with

707
00:30:51,270 --> 00:30:54,450
this project we've been working on for

708
00:30:52,470 --> 00:30:56,700
about a year and a half so far and we've

709
00:30:54,450 --> 00:31:00,240
got some I think we've got some really a

710
00:30:56,700 --> 00:31:02,220
really good start so some of the things

711
00:31:00,240 --> 00:31:04,590
that we want to work on going forward is

712
00:31:02,220 --> 00:31:06,840
we want to look at some advanced pattern

713
00:31:04,590 --> 00:31:10,080
recognition so we want to look at you

714
00:31:06,840 --> 00:31:12,840
know so we've got a secret a sequence of

715
00:31:10,080 --> 00:31:14,879
discrete events that we can observe and

716
00:31:12,840 --> 00:31:16,830
we want to be able to say okay let's can

717
00:31:14,880 --> 00:31:19,830
we actually make some you know

718
00:31:16,830 --> 00:31:21,840
high-level events out of this so so that

719
00:31:19,830 --> 00:31:23,789
so that that's a big it's big thing that

720
00:31:21,840 --> 00:31:25,980
we're looking at here for the next year

721
00:31:23,789 --> 00:31:27,480
or so and then we just want to analyze

722
00:31:25,980 --> 00:31:30,630
all this stuff to see what we can find

723
00:31:27,480 --> 00:31:33,120
find some additional information we also

724
00:31:30,630 --> 00:31:37,919
want to work at some some advanced

725
00:31:33,120 --> 00:31:39,209
static analysis as well and the last

726
00:31:37,919 --> 00:31:40,919
category i think is kind of interesting

727
00:31:39,210 --> 00:31:42,750
it's a little bit vague but just

728
00:31:40,919 --> 00:31:45,630
advanced analytics I mean so we've got

729
00:31:42,750 --> 00:31:47,340
all kinds of data here and we're looking

730
00:31:45,630 --> 00:31:49,080
at some advanced ways of really making

731
00:31:47,340 --> 00:31:50,340
sense of all this stuff so that's that's

732
00:31:49,080 --> 00:31:55,740
currently currently what we're working

733
00:31:50,340 --> 00:31:57,510
on and so I what I like to do at this

734
00:31:55,740 --> 00:32:00,020
point is just kind of open it up for

735
00:31:57,510 --> 00:32:03,929
four questions if you guys having any

736
00:32:00,020 --> 00:32:06,350
questions on over over what we've been

737
00:32:03,929 --> 00:32:06,350
talking about

738
00:32:17,750 --> 00:32:25,500
Carrie Michael John thirds how easy is

739
00:32:23,400 --> 00:32:28,560
it affected it's in an emulator like did

740
00:32:25,500 --> 00:32:30,810
is it just a couple calls or I mean is

741
00:32:28,560 --> 00:32:32,460
it more complicated than that so right

742
00:32:30,810 --> 00:32:34,409
so those there's a paper out there that

743
00:32:32,460 --> 00:32:38,790
you might wanna look up it's called rage

744
00:32:34,410 --> 00:32:40,920
against a virtual machine yeah that's a

745
00:32:38,790 --> 00:32:43,830
it's interesting paper so if you look to

746
00:32:40,920 --> 00:32:47,940
that it is it's it's actually fairly

747
00:32:43,830 --> 00:32:51,419
straightforward to detect especially if

748
00:32:47,940 --> 00:32:54,270
you're running something like qm you

749
00:32:51,420 --> 00:32:55,980
that's that's doing arm arm emulation

750
00:32:54,270 --> 00:32:58,650
it's fairly simple brother

751
00:32:55,980 --> 00:33:04,280
straightforward but yeah that's a good

752
00:32:58,650 --> 00:33:04,280
question so

753
00:33:07,389 --> 00:33:10,408
all right any other questions

754
00:33:12,590 --> 00:33:22,299
okay well I guess we'll just go crash

755
00:33:15,020 --> 00:33:22,299
early all right thank you

