1
00:00:00,300 --> 00:00:15,870
press that little button until the green

2
00:00:02,340 --> 00:00:21,539
light comes on okay thank you three two

3
00:00:15,870 --> 00:00:23,788
one good afternoon welcome to serious

4
00:00:21,539 --> 00:00:25,859
security seminar and today it's my

5
00:00:23,789 --> 00:00:30,179
pleasure to introduce the Omar or

6
00:00:25,859 --> 00:00:32,879
Chidori he's currently a postdoc in my

7
00:00:30,179 --> 00:00:36,300
group before joining to do he was a

8
00:00:32,879 --> 00:00:38,789
postdoc at the CMU and before that he

9
00:00:36,300 --> 00:00:42,288
received his PhD in computer science

10
00:00:38,789 --> 00:00:45,780
from University of Texas in San Antonio

11
00:00:42,289 --> 00:00:48,059
working under the supervision of the

12
00:00:45,780 --> 00:00:49,920
late Professor will whisper Oh with a

13
00:00:48,059 --> 00:00:53,608
very good friend with me and we

14
00:00:49,920 --> 00:00:56,789
collaborated on many papers before and

15
00:00:53,609 --> 00:00:59,249
Omar work on a large range of areas

16
00:00:56,789 --> 00:01:02,129
today he will talk about regulatory

17
00:00:59,249 --> 00:01:04,470
compliance okay thank you for the

18
00:01:02,129 --> 00:01:07,110
introduction anyways so hello everybody

19
00:01:04,470 --> 00:01:08,910
so I am going to talk a little bit about

20
00:01:07,110 --> 00:01:12,660
regulatory compliance checking over

21
00:01:08,910 --> 00:01:16,860
encrypted audit logs and this is a joint

22
00:01:12,660 --> 00:01:18,690
work with my colleague at Carnegie

23
00:01:16,860 --> 00:01:21,930
Mellon University uh no conductor Lehman

24
00:01:18,690 --> 00:01:23,899
gia and my another colleague from max

25
00:01:21,930 --> 00:01:27,800
black Institute of software systems

26
00:01:23,900 --> 00:01:29,940
default guard okay so before I start

27
00:01:27,800 --> 00:01:32,070
talking about what I'm going to talk

28
00:01:29,940 --> 00:01:35,370
today I want to put a little bit of this

29
00:01:32,070 --> 00:01:38,220
flavor so when I use the word regulatory

30
00:01:35,370 --> 00:01:41,100
compliance I use it in a kind of more

31
00:01:38,220 --> 00:01:42,630
relaxed fashion so regularly compliant

32
00:01:41,100 --> 00:01:48,119
in the at least in the US federal

33
00:01:42,630 --> 00:01:51,720
judiciary system if the final say is by

34
00:01:48,120 --> 00:01:53,850
the judge so a lawyer or like normal guy

35
00:01:51,720 --> 00:01:56,070
like me do not know what the

36
00:01:53,850 --> 00:01:59,669
interpretation of the law should be so

37
00:01:56,070 --> 00:02:03,320
when I so take this work with a grain of

38
00:01:59,670 --> 00:02:06,210
salt so and other thing is this is our

39
00:02:03,320 --> 00:02:07,979
interpretation of the regulation and we

40
00:02:06,210 --> 00:02:11,160
have actually verified with a lot of

41
00:02:07,980 --> 00:02:12,870
other computer scientists interpretation

42
00:02:11,160 --> 00:02:13,490
of the regulation and they tend to match

43
00:02:12,870 --> 00:02:18,050
up

44
00:02:13,490 --> 00:02:19,880
okay so that being said so I'm talking

45
00:02:18,050 --> 00:02:23,050
I'm going to talk about actually privacy

46
00:02:19,880 --> 00:02:26,780
regulations or say now we have

47
00:02:23,050 --> 00:02:28,490
human-like users of internet right we

48
00:02:26,780 --> 00:02:31,010
hear our information with a lot of

49
00:02:28,490 --> 00:02:33,830
organization and they in turn give us

50
00:02:31,010 --> 00:02:37,850
some services for example organizations

51
00:02:33,830 --> 00:02:42,290
are like hospitals your university banks

52
00:02:37,850 --> 00:02:44,210
or even Google right and let's take one

53
00:02:42,290 --> 00:02:47,390
representative organisations say

54
00:02:44,210 --> 00:02:50,620
hospital now assume Homer Simpson goes

55
00:02:47,390 --> 00:02:53,890
to the hospital for treatment right and

56
00:02:50,620 --> 00:02:58,160
he gives his personal information like

57
00:02:53,890 --> 00:03:00,589
date of birth name social security blood

58
00:02:58,160 --> 00:03:05,210
group so on and so forth and medical

59
00:03:00,590 --> 00:03:06,860
records now during treatment right the

60
00:03:05,210 --> 00:03:08,960
hospital can send this information to

61
00:03:06,860 --> 00:03:12,680
the lot of other parties for instance

62
00:03:08,960 --> 00:03:14,330
the Homer Simpson each our x-ray so all

63
00:03:12,680 --> 00:03:17,450
these medical records have to be sent to

64
00:03:14,330 --> 00:03:20,780
the lab now Homer Simpson needs to be

65
00:03:17,450 --> 00:03:22,910
built for that visit so all the records

66
00:03:20,780 --> 00:03:25,880
should be sent to the health insurance

67
00:03:22,910 --> 00:03:27,710
so that they can verify whether the

68
00:03:25,880 --> 00:03:29,240
visit and the test they have done is

69
00:03:27,710 --> 00:03:32,960
legitimate and whether they were

70
00:03:29,240 --> 00:03:35,240
necessary and finally for medication

71
00:03:32,960 --> 00:03:37,280
they should be sent to the pharmacy so

72
00:03:35,240 --> 00:03:40,160
that they can figure out drug

73
00:03:37,280 --> 00:03:42,410
interaction and so on and so forth now

74
00:03:40,160 --> 00:03:44,150
now the obvious question is what is

75
00:03:42,410 --> 00:03:47,720
stopping the hospital from selling it in

76
00:03:44,150 --> 00:03:49,610
a black market so our medical records go

77
00:03:47,720 --> 00:03:52,190
price for a black market we study two

78
00:03:49,610 --> 00:03:54,320
dollars right so it's not very small but

79
00:03:52,190 --> 00:03:57,470
and there is a lot of patients in the

80
00:03:54,320 --> 00:03:59,540
hospital if they sell all of them they

81
00:03:57,470 --> 00:04:01,580
can make a lot of money but thank God

82
00:03:59,540 --> 00:04:04,250
government has kept them so they have

83
00:04:01,580 --> 00:04:06,830
our privacy regulation which they call

84
00:04:04,250 --> 00:04:09,500
HIPAA h h stand for health insurance

85
00:04:06,830 --> 00:04:13,030
portability and accountability act so

86
00:04:09,500 --> 00:04:15,890
all these interaction are under HIPAA

87
00:04:13,030 --> 00:04:17,988
like it's regulated by you so HIPAA

88
00:04:15,890 --> 00:04:20,750
basically regulates how healthcare

89
00:04:17,988 --> 00:04:23,090
organizations can share the collected

90
00:04:20,750 --> 00:04:26,750
personal information from the patient

91
00:04:23,090 --> 00:04:29,090
that's basically how what it meant it

92
00:04:26,750 --> 00:04:30,950
as you have figured out the first three

93
00:04:29,090 --> 00:04:32,960
according to HIPAA are allowed because

94
00:04:30,950 --> 00:04:35,690
they're for treatment and billion

95
00:04:32,960 --> 00:04:38,330
operations and the last one is not

96
00:04:35,690 --> 00:04:41,390
allowed okay so they're good now the

97
00:04:38,330 --> 00:04:45,109
question is what if we have be violative

98
00:04:41,390 --> 00:04:47,180
an organization violates HIPAA now like

99
00:04:45,110 --> 00:04:49,490
any regulation violating HIPAA has

100
00:04:47,180 --> 00:04:52,100
serious implications you can be

101
00:04:49,490 --> 00:04:55,070
prosecuted you could pay a lot of fine

102
00:04:52,100 --> 00:04:58,490
okay now I'll show you two examples

103
00:04:55,070 --> 00:05:01,930
scenarios right when organization or

104
00:04:58,490 --> 00:05:04,550
individual violated HIPAA and they were

105
00:05:01,930 --> 00:05:07,669
penalized with a civil money penalties

106
00:05:04,550 --> 00:05:10,250
now the thing to look out for is the

107
00:05:07,669 --> 00:05:13,039
staggering amount of sight right it's

108
00:05:10,250 --> 00:05:16,240
one in one case it 4.3 million dollars

109
00:05:13,040 --> 00:05:18,440
other is 1.4 million dollars so

110
00:05:16,240 --> 00:05:21,260
violating HIPAA can have serious

111
00:05:18,440 --> 00:05:24,740
implication for your reputation or even

112
00:05:21,260 --> 00:05:27,140
financially actually in the HHA changed

113
00:05:24,740 --> 00:05:29,870
website they have the wall of shame it

114
00:05:27,140 --> 00:05:31,729
basically captures all the like a

115
00:05:29,870 --> 00:05:34,550
violated organization where they

116
00:05:31,729 --> 00:05:36,620
violated like more than 500 types of a

117
00:05:34,550 --> 00:05:40,940
HIPAA regulation so it's bad for your

118
00:05:36,620 --> 00:05:44,150
reputation too now to circumvent this

119
00:05:40,940 --> 00:05:46,460
situation what does the organization's

120
00:05:44,150 --> 00:05:48,830
to digitally like capture all the

121
00:05:46,460 --> 00:05:52,719
privacy sensitive avenging papercraft

122
00:05:48,830 --> 00:05:54,560
right and they bring in an auditor

123
00:05:52,720 --> 00:05:58,160
periodically it depends on the

124
00:05:54,560 --> 00:06:01,370
organization and who actually look goes

125
00:05:58,160 --> 00:06:03,320
through these records and analyzes the

126
00:06:01,370 --> 00:06:05,510
privacy policy to make a judgment call

127
00:06:03,320 --> 00:06:08,870
whether something is a violation or not

128
00:06:05,510 --> 00:06:11,900
right now as you might have imagined

129
00:06:08,870 --> 00:06:15,800
this is largely a manual effort so and

130
00:06:11,900 --> 00:06:20,179
the privacy laws can be huge like HIPAA

131
00:06:15,800 --> 00:06:23,090
is like hundred pages right and as this

132
00:06:20,180 --> 00:06:24,919
is the human effort the it could be

133
00:06:23,090 --> 00:06:27,500
error-prone like you could miss our

134
00:06:24,919 --> 00:06:30,400
violation or you could report something

135
00:06:27,500 --> 00:06:32,840
as dilation and it's time-consuming like

136
00:06:30,400 --> 00:06:37,070
generally 45 people comes in and does

137
00:06:32,840 --> 00:06:39,469
this audit so my research agenda so far

138
00:06:37,070 --> 00:06:42,200
has been to improve this situation

139
00:06:39,470 --> 00:06:44,840
trying to autumn open like make this

140
00:06:42,200 --> 00:06:47,450
automatic a little bit at least even not

141
00:06:44,840 --> 00:06:49,760
fully possible a little bit so one

142
00:06:47,450 --> 00:06:52,190
possibility is like let go of the paper

143
00:06:49,760 --> 00:06:55,880
trail put it on the database so that we

144
00:06:52,190 --> 00:06:59,930
can search now what about this

145
00:06:55,880 --> 00:07:03,200
regulation we we change it to a logic it

146
00:06:59,930 --> 00:07:06,410
basically so that a human can read it

147
00:07:03,200 --> 00:07:08,510
and analyze it and finally let go of the

148
00:07:06,410 --> 00:07:10,700
human auditor and put in an automatic

149
00:07:08,510 --> 00:07:13,190
complies checker there would take this

150
00:07:10,700 --> 00:07:15,020
audit ricotta electronic disclosure

151
00:07:13,190 --> 00:07:17,719
records and the computer-readable policy

152
00:07:15,020 --> 00:07:23,330
and will tell you okay violation on

153
00:07:17,720 --> 00:07:25,610
policy ok so my existing work and my

154
00:07:23,330 --> 00:07:29,390
previous work has focused mainly on the

155
00:07:25,610 --> 00:07:31,340
policy analysis part and trying to

156
00:07:29,390 --> 00:07:34,039
improve the state of the art of the

157
00:07:31,340 --> 00:07:36,489
automatic compliance checker so the

158
00:07:34,040 --> 00:07:40,100
current context is a little different ok

159
00:07:36,490 --> 00:07:41,660
so let's say a hospital right and it has

160
00:07:40,100 --> 00:07:46,940
these disclosure records in a database

161
00:07:41,660 --> 00:07:49,880
now this audit logs can be very large

162
00:07:46,940 --> 00:07:52,880
like from gigabytes terabytes now em

163
00:07:49,880 --> 00:07:55,040
with the cost-effectiveness of a cloud

164
00:07:52,880 --> 00:07:57,530
it's a viable option to actually put it

165
00:07:55,040 --> 00:08:00,380
in the cloud like use the cloud storage

166
00:07:57,530 --> 00:08:03,520
infrastructure for storing the audit

167
00:08:00,380 --> 00:08:06,760
logs right now but the thing is like

168
00:08:03,520 --> 00:08:09,710
what if the clouds gets broken into

169
00:08:06,760 --> 00:08:12,710
these things are in plain text then

170
00:08:09,710 --> 00:08:16,250
everybody can look through it and it's

171
00:08:12,710 --> 00:08:18,140
bad actually so one possibility and the

172
00:08:16,250 --> 00:08:20,750
other thing is like this audit records

173
00:08:18,140 --> 00:08:22,070
actually stores personal information or

174
00:08:20,750 --> 00:08:24,020
proprietary information of the

175
00:08:22,070 --> 00:08:27,409
organization so you can't just put it on

176
00:08:24,020 --> 00:08:31,849
the cloud with plain text so one

177
00:08:27,410 --> 00:08:34,039
possibility is encrypted now as you

178
00:08:31,850 --> 00:08:37,849
might have no that might have known that

179
00:08:34,039 --> 00:08:40,159
if you do semantically secure encryption

180
00:08:37,849 --> 00:08:43,880
it does not leak any additional

181
00:08:40,159 --> 00:08:46,310
information now if that is the case how

182
00:08:43,880 --> 00:08:48,740
can we perform at it it's not clear I

183
00:08:46,310 --> 00:08:51,739
mean if the encrypted audit log does not

184
00:08:48,740 --> 00:08:52,910
leak any information how can you perform

185
00:08:51,740 --> 00:08:55,670
audit so

186
00:08:52,910 --> 00:08:57,949
one possibility is used homomorphic

187
00:08:55,670 --> 00:08:59,930
fully homomorphic encryption now but

188
00:08:57,950 --> 00:09:02,420
that's lighter light years away from

189
00:08:59,930 --> 00:09:06,620
being practical it's it has very very

190
00:09:02,420 --> 00:09:09,729
high overhead so what we propose at this

191
00:09:06,620 --> 00:09:12,260
work a ongoing work is basically a

192
00:09:09,730 --> 00:09:14,690
specialized encryption schemes just for

193
00:09:12,260 --> 00:09:16,250
auditing that's it it doesn't give you

194
00:09:14,690 --> 00:09:20,420
any other function we just for auditing

195
00:09:16,250 --> 00:09:23,600
and so and chase and existing audit

196
00:09:20,420 --> 00:09:27,800
algorithm very small amount so that it

197
00:09:23,600 --> 00:09:29,600
can handle encrypted audit logs now so

198
00:09:27,800 --> 00:09:32,150
what it basically takes the algorithm is

199
00:09:29,600 --> 00:09:34,610
an encrypted audit log and a constant

200
00:09:32,150 --> 00:09:37,459
encrypted policy I'll introduce what

201
00:09:34,610 --> 00:09:39,380
that is and it responds yes and no

202
00:09:37,460 --> 00:09:41,960
whether there are violations are there

203
00:09:39,380 --> 00:09:45,439
are no violations okay so interesting

204
00:09:41,960 --> 00:09:48,890
research questions in this arena would

205
00:09:45,440 --> 00:09:50,780
be what operations over encrypted data

206
00:09:48,890 --> 00:09:52,580
required to perform or it I mean like if

207
00:09:50,780 --> 00:09:54,260
you are to perform audit we need some

208
00:09:52,580 --> 00:09:57,800
operational encrypted data we can't just

209
00:09:54,260 --> 00:09:59,990
like do nothing and the other option

210
00:09:57,800 --> 00:10:01,969
other question is what kind of security

211
00:09:59,990 --> 00:10:07,130
as students we can give I mean can we

212
00:10:01,970 --> 00:10:09,110
give like any any assurance so I'll try

213
00:10:07,130 --> 00:10:12,320
to answer the first question with a

214
00:10:09,110 --> 00:10:14,510
couple of examples so a very simple

215
00:10:12,320 --> 00:10:17,180
example policy which basically says

216
00:10:14,510 --> 00:10:19,250
every individual accessing sensitive

217
00:10:17,180 --> 00:10:21,530
patient information even the role of a

218
00:10:19,250 --> 00:10:24,200
doctor that's basically that what the

219
00:10:21,530 --> 00:10:26,060
policy says that anybody who is

220
00:10:24,200 --> 00:10:28,640
accessing the patient's information

221
00:10:26,060 --> 00:10:31,339
should be allowed to it's unrealistic

222
00:10:28,640 --> 00:10:34,640
policy but that is that is like for the

223
00:10:31,340 --> 00:10:36,530
sake of example say we our log is

224
00:10:34,640 --> 00:10:38,540
something like this like you'd have a

225
00:10:36,530 --> 00:10:40,579
sensitive access table which will tell

226
00:10:38,540 --> 00:10:43,849
you who accessed sensitive information

227
00:10:40,580 --> 00:10:45,920
at what time and the other relevant

228
00:10:43,850 --> 00:10:48,290
table would be a role table which

229
00:10:45,920 --> 00:10:52,339
basically tell which employee is in what

230
00:10:48,290 --> 00:10:54,530
role right now to check actually

231
00:10:52,340 --> 00:10:56,750
compliance what we would need to do is

232
00:10:54,530 --> 00:10:59,930
basically go through the sensitive

233
00:10:56,750 --> 00:11:02,990
access table one row at a time and get

234
00:10:59,930 --> 00:11:04,839
that employee name and try to figure out

235
00:11:02,990 --> 00:11:06,800
what his role is so it's basically

236
00:11:04,840 --> 00:11:09,560
taking a joint of these two

237
00:11:06,800 --> 00:11:13,699
tables so it's basically taking a joint

238
00:11:09,560 --> 00:11:15,290
of these two database tables so so we

239
00:11:13,700 --> 00:11:17,330
would need join that's what we figured

240
00:11:15,290 --> 00:11:19,640
out from the first example the second

241
00:11:17,330 --> 00:11:22,459
example basically says if a patient's

242
00:11:19,640 --> 00:11:24,560
medical record is accessed by building

243
00:11:22,459 --> 00:11:26,239
department employee it means that a

244
00:11:24,560 --> 00:11:29,268
patient might have visited the facility

245
00:11:26,240 --> 00:11:32,839
in password map that's that's basically

246
00:11:29,269 --> 00:11:34,850
what it says and in this case we'll have

247
00:11:32,839 --> 00:11:37,130
this failed relevant tables in the audit

248
00:11:34,850 --> 00:11:39,970
log which basically said we should one

249
00:11:37,130 --> 00:11:42,920
table would keep the patient visit

250
00:11:39,970 --> 00:11:46,519
situations where it chase L is visited

251
00:11:42,920 --> 00:11:48,079
at time t1 is visited at time t2 and the

252
00:11:46,519 --> 00:11:51,140
medical record access time which

253
00:11:48,079 --> 00:11:55,040
basically says that Alice's record was

254
00:11:51,140 --> 00:11:56,660
accessed by John F time DJ and that

255
00:11:55,040 --> 00:11:59,000
there is an other relevant table its

256
00:11:56,660 --> 00:12:01,430
face employee department table which

257
00:11:59,000 --> 00:12:06,140
basically says John's department is

258
00:12:01,430 --> 00:12:09,079
billing ok so the what we have to do

259
00:12:06,140 --> 00:12:10,579
basically is go through one row at a

260
00:12:09,079 --> 00:12:14,390
time from the medical record access

261
00:12:10,579 --> 00:12:18,880
table figure out what is Alice's visit

262
00:12:14,390 --> 00:12:22,130
time and what is the Jones Department

263
00:12:18,880 --> 00:12:25,939
right so what we do is like take two

264
00:12:22,130 --> 00:12:29,180
joints right of these three tables now

265
00:12:25,940 --> 00:12:32,029
say we got this this one this grow will

266
00:12:29,180 --> 00:12:34,729
satisfy the condition of the joint now

267
00:12:32,029 --> 00:12:37,430
what we want to additionally check is

268
00:12:34,730 --> 00:12:40,250
this these two times difference is less

269
00:12:37,430 --> 00:12:42,079
than 31 days right so that's basically

270
00:12:40,250 --> 00:12:47,120
the additional information we have to be

271
00:12:42,079 --> 00:12:49,339
able to compare two times so to

272
00:12:47,120 --> 00:12:53,930
summarize what operations we basically

273
00:12:49,339 --> 00:12:55,550
need are okay you join operation which

274
00:12:53,930 --> 00:12:59,329
is of specialized kind of equality

275
00:12:55,550 --> 00:13:01,579
checking and I'm step for tourism it's

276
00:12:59,329 --> 00:13:04,310
basically checking that if you have an

277
00:13:01,579 --> 00:13:06,769
encrypted time and a encrypted time

278
00:13:04,310 --> 00:13:12,589
offset it's less than equals to another

279
00:13:06,769 --> 00:13:14,360
encrypted time and another of them so so

280
00:13:12,589 --> 00:13:16,490
before I jump into the edge entice

281
00:13:14,360 --> 00:13:18,350
anybody has any questions something more

282
00:13:16,490 --> 00:13:20,060
than happy to take a bitch it doesn't

283
00:13:18,350 --> 00:13:20,529
have to be at the end of the talk it

284
00:13:20,060 --> 00:13:23,560
could be

285
00:13:20,529 --> 00:13:26,829
in the middle so there is a lot of logic

286
00:13:23,560 --> 00:13:29,680
stuff in this work so I like if anybody

287
00:13:26,829 --> 00:13:32,859
have any specific questions feel free to

288
00:13:29,680 --> 00:13:35,459
stop me in the middle okay so if any

289
00:13:32,860 --> 00:13:38,350
seems nobody has any questions so far so

290
00:13:35,459 --> 00:13:40,779
for the agenda to add today's talk so

291
00:13:38,350 --> 00:13:43,180
I'm first going to talk about what is

292
00:13:40,779 --> 00:13:45,100
our policy language right how would we

293
00:13:43,180 --> 00:13:48,300
represent the pollak the natural

294
00:13:45,100 --> 00:13:50,800
language policies so we talked about a

295
00:13:48,300 --> 00:13:52,449
computer-readable policy for what that

296
00:13:50,800 --> 00:13:56,170
means so what is the syntax and

297
00:13:52,449 --> 00:13:58,240
semantics of that and talk about the two

298
00:13:56,170 --> 00:14:02,110
log encryption schemes we're going to

299
00:13:58,240 --> 00:14:05,189
introduce and an enhanced auditing

300
00:14:02,110 --> 00:14:08,379
algorithm it's basically enhanced for

301
00:14:05,189 --> 00:14:10,870
handling encrypted audit logs so this

302
00:14:08,379 --> 00:14:13,629
this audit the main algorithm was out

303
00:14:10,870 --> 00:14:15,879
for a plain tex lock we picked a little

304
00:14:13,629 --> 00:14:20,170
bit not too much a little bit to handle

305
00:14:15,879 --> 00:14:22,059
encrypted or o'clock okay and the next

306
00:14:20,170 --> 00:14:24,610
thing we are going to discuss is

307
00:14:22,059 --> 00:14:29,019
security guarantees what guarantees can

308
00:14:24,610 --> 00:14:31,660
it give and we're gonna then talk about

309
00:14:29,019 --> 00:14:33,819
some experimental results so we ran some

310
00:14:31,660 --> 00:14:36,040
experimental results to figure out what

311
00:14:33,819 --> 00:14:39,009
is that computational overhead over

312
00:14:36,040 --> 00:14:41,800
plain text version I mean if you had to

313
00:14:39,009 --> 00:14:44,230
run the algorithm the encrypted lock

314
00:14:41,800 --> 00:14:46,750
what is the over additional overhead we

315
00:14:44,230 --> 00:14:51,490
have to incur and finally we'll

316
00:14:46,750 --> 00:14:53,889
summarize so our policy specification

317
00:14:51,490 --> 00:14:56,620
logic looks like this okay so I know

318
00:14:53,889 --> 00:15:00,430
this is scary but i'll run it through

319
00:14:56,620 --> 00:15:04,329
i'll run run through each of them so the

320
00:15:00,430 --> 00:15:07,209
first is what we call atoms and the next

321
00:15:04,329 --> 00:15:10,979
part is guard these are building blocks

322
00:15:07,209 --> 00:15:10,979
so the main policies length

323
00:15:11,009 --> 00:15:16,059
specification is on the formula that's

324
00:15:13,540 --> 00:15:17,379
how you represent policies and the first

325
00:15:16,059 --> 00:15:21,059
two are building blocks that are

326
00:15:17,379 --> 00:15:26,139
necessary for this one so atoms are

327
00:15:21,059 --> 00:15:27,579
either predicate or a table so it should

328
00:15:26,139 --> 00:15:29,319
predicate so we looked at the sensitive

329
00:15:27,579 --> 00:15:30,790
access tables these are table names

330
00:15:29,319 --> 00:15:34,610
actually you can view them as table

331
00:15:30,790 --> 00:15:36,740
names right then we have this other page

332
00:15:34,610 --> 00:15:40,579
which basically is checking for time

333
00:15:36,740 --> 00:15:43,190
right we wanted to check time and there

334
00:15:40,579 --> 00:15:45,279
is then there is equal equality you can

335
00:15:43,190 --> 00:15:49,010
check whether two things are equal and

336
00:15:45,279 --> 00:15:52,790
the next section is guard guard is a

337
00:15:49,010 --> 00:15:55,819
specific kind of formula will explain

338
00:15:52,790 --> 00:15:57,589
this in a bit okay so let's look at the

339
00:15:55,820 --> 00:15:59,660
formula which is basically how you

340
00:15:57,589 --> 00:16:01,399
represent your policies it could be a

341
00:15:59,660 --> 00:16:04,969
table name it could just be a table name

342
00:16:01,399 --> 00:16:08,089
or it could be true or false right or it

343
00:16:04,970 --> 00:16:12,019
could be a conjunction of two policies

344
00:16:08,089 --> 00:16:14,180
or a disjunction of two policies or you

345
00:16:12,019 --> 00:16:15,980
have quantified formula so quantified

346
00:16:14,180 --> 00:16:20,420
formula the first one what you have to

347
00:16:15,980 --> 00:16:23,230
read is for all X that satisfies G also

348
00:16:20,420 --> 00:16:27,229
satisfy this fight that's how it's read

349
00:16:23,230 --> 00:16:31,940
the second formula basically rich there

350
00:16:27,230 --> 00:16:34,940
exists X for which if it satisfies G it

351
00:16:31,940 --> 00:16:37,040
also satisfies fine so the first one is

352
00:16:34,940 --> 00:16:38,329
called Universal quantification the

353
00:16:37,040 --> 00:16:40,610
second one is called existential

354
00:16:38,329 --> 00:16:43,219
quantification so you can see the

355
00:16:40,610 --> 00:16:46,339
relation that Universal basically says

356
00:16:43,220 --> 00:16:48,620
for all X something has to be satisfied

357
00:16:46,339 --> 00:16:50,990
for existence she'll it basically says

358
00:16:48,620 --> 00:16:52,550
there should be at least one one

359
00:16:50,990 --> 00:16:55,760
instance for which the formula should be

360
00:16:52,550 --> 00:16:58,459
satisfied ok now let's look at some

361
00:16:55,760 --> 00:17:02,390
example policies so we'll take a example

362
00:16:58,459 --> 00:17:04,730
policy from GLBA which is the full form

363
00:17:02,390 --> 00:17:08,319
is ground leach bliley act it's for

364
00:17:04,730 --> 00:17:11,179
financial organizations ok say the

365
00:17:08,319 --> 00:17:13,780
regulation basically says is a financial

366
00:17:11,179 --> 00:17:16,579
organization can share our customers

367
00:17:13,780 --> 00:17:18,470
non-public information one public

368
00:17:16,579 --> 00:17:20,178
information means your account number

369
00:17:18,470 --> 00:17:24,319
your social security number your credit

370
00:17:20,179 --> 00:17:27,169
score possibly we turn off affiliate if

371
00:17:24,319 --> 00:17:29,500
either a privacy notice has been sent to

372
00:17:27,169 --> 00:17:32,299
the customer within the last 30 days or

373
00:17:29,500 --> 00:17:34,100
our privacy notice will be sent within

374
00:17:32,299 --> 00:17:35,929
the next 30 days of the disclosure

375
00:17:34,100 --> 00:17:39,559
that's basically what the regulation

376
00:17:35,929 --> 00:17:41,210
says now let's look at the scary part ok

377
00:17:39,559 --> 00:17:45,040
so this is how it's really represented

378
00:17:41,210 --> 00:17:47,600
in the logic ok so basic I'll try to

379
00:17:45,040 --> 00:17:48,570
like go through each of them it's not

380
00:17:47,600 --> 00:17:50,549
very difficult

381
00:17:48,570 --> 00:17:55,470
want to explain to you so it basically

382
00:17:50,549 --> 00:17:59,580
says if p1 is sending me to a message m

383
00:17:55,470 --> 00:18:02,190
at time T so that's the first part right

384
00:17:59,580 --> 00:18:05,309
it's basically said p1 is sending p to a

385
00:18:02,190 --> 00:18:11,250
message m at time T and the message is

386
00:18:05,309 --> 00:18:14,820
tagged as cues attribute PA implies that

387
00:18:11,250 --> 00:18:18,389
p 1 is an organization financial

388
00:18:14,820 --> 00:18:22,289
organization p 2 is not an affiliate of

389
00:18:18,389 --> 00:18:25,949
p1 according to time t q is a customer

390
00:18:22,289 --> 00:18:29,639
and the attribute is a non-public

391
00:18:25,950 --> 00:18:31,950
information right and the next part

392
00:18:29,639 --> 00:18:35,899
basically says our privacy notice has

393
00:18:31,950 --> 00:18:38,429
been sent within the last 30 days or a

394
00:18:35,899 --> 00:18:40,979
privacy notice will be sent within the

395
00:18:38,429 --> 00:18:44,070
next 30 days so in future so that's

396
00:18:40,980 --> 00:18:47,490
basically what the regulation looks like

397
00:18:44,070 --> 00:18:49,259
in the logic okay so hopefully that's

398
00:18:47,490 --> 00:18:52,230
the end of the logic part you're not

399
00:18:49,259 --> 00:18:56,029
gonna see a lot about this anymore okay

400
00:18:52,230 --> 00:18:59,789
so our audit log encryption schemes are

401
00:18:56,029 --> 00:19:03,059
there are true so we call them anemia

402
00:18:59,789 --> 00:19:05,460
debt and KH so you knew me as a Greek

403
00:19:03,059 --> 00:19:07,320
goddess of laws and regulation for human

404
00:19:05,460 --> 00:19:11,429
society so that's how the name came came

405
00:19:07,320 --> 00:19:15,090
to life so right so we're going to talk

406
00:19:11,429 --> 00:19:16,799
so each of them have each of the encrypt

407
00:19:15,090 --> 00:19:19,620
encryption schemes have their relative

408
00:19:16,799 --> 00:19:23,070
advantage and these advantages okay so

409
00:19:19,620 --> 00:19:26,189
now let's walk through them the first

410
00:19:23,070 --> 00:19:27,928
one says the deterministic known uses

411
00:19:26,190 --> 00:19:30,059
enemy a debt uses deterministic

412
00:19:27,929 --> 00:19:32,039
encryption for deterministic encryption

413
00:19:30,059 --> 00:19:35,039
is basically an encryption schemes that

414
00:19:32,039 --> 00:19:36,929
if you take the same key and the same

415
00:19:35,039 --> 00:19:42,509
message you can always generate the same

416
00:19:36,929 --> 00:19:45,960
ciphertext that's H for a new via k uses

417
00:19:42,509 --> 00:19:48,029
keyed hash that that's how the name get

418
00:19:45,960 --> 00:19:53,360
has so it's basically a hash function

419
00:19:48,029 --> 00:19:56,960
that additionally takes a key H the

420
00:19:53,360 --> 00:19:59,428
enemy a debt is less flexible so you

421
00:19:56,960 --> 00:20:01,950
encrypt the log for a six policy after

422
00:19:59,429 --> 00:20:04,769
that you can change the policy that

423
00:20:01,950 --> 00:20:08,159
that's fixed so it's left flexible for

424
00:20:04,769 --> 00:20:09,870
KH however it's more flexible once you

425
00:20:08,159 --> 00:20:15,179
encrypt it you can check any policy it

426
00:20:09,870 --> 00:20:18,000
doesn't matter ok for anemia dead you

427
00:20:15,179 --> 00:20:21,720
have less computational overhead over

428
00:20:18,000 --> 00:20:26,510
plain text whereas for KH you have more

429
00:20:21,720 --> 00:20:29,370
overhead like it takes more time ok and

430
00:20:26,510 --> 00:20:32,179
for the enemy a dead the lock sides have

431
00:20:29,370 --> 00:20:37,408
moderate space overhead not too much

432
00:20:32,179 --> 00:20:39,179
whereas the enemy a cage have huge space

433
00:20:37,409 --> 00:20:41,809
over I'll tell you why it's very simple

434
00:20:39,179 --> 00:20:45,600
it's not rocket science back to me and

435
00:20:41,809 --> 00:20:48,450
the anemia dead have less secure right

436
00:20:45,600 --> 00:20:51,870
and its security speed on a random

437
00:20:48,450 --> 00:20:55,350
Oracle model and it sometimes called a

438
00:20:51,870 --> 00:20:58,709
heuristic all models and for enemy a

439
00:20:55,350 --> 00:21:01,500
cage is more secure h the security is

440
00:20:58,710 --> 00:21:03,510
proved on the standard model so as you

441
00:21:01,500 --> 00:21:06,120
can see each of them have the trade-offs

442
00:21:03,510 --> 00:21:07,980
if you want more efficiency you'll go

443
00:21:06,120 --> 00:21:10,620
for it anu me a bit if you want more

444
00:21:07,980 --> 00:21:12,510
security you go for in your cage so it

445
00:21:10,620 --> 00:21:15,120
depends on your application scenario

446
00:21:12,510 --> 00:21:17,309
there is no like like last word that you

447
00:21:15,120 --> 00:21:19,860
have to choose this or that it depends

448
00:21:17,309 --> 00:21:23,039
on your application scenario now let's

449
00:21:19,860 --> 00:21:25,080
look at how we would encrypt using a new

450
00:21:23,039 --> 00:21:27,330
me Annette it's very as I mentioned if

451
00:21:25,080 --> 00:21:29,158
it's very simple I mean there is no like

452
00:21:27,330 --> 00:21:32,070
rocket science in you so let's say we

453
00:21:29,159 --> 00:21:34,500
have these two tables in the or o'clock

454
00:21:32,070 --> 00:21:37,970
right the sensitive access table and the

455
00:21:34,500 --> 00:21:40,860
role table so basically what it says is

456
00:21:37,970 --> 00:21:43,710
every column would be deterministic Lee

457
00:21:40,860 --> 00:21:46,529
encrypt it with a different key except

458
00:21:43,710 --> 00:21:49,230
we have to restriction the first

459
00:21:46,529 --> 00:21:52,200
restriction is any two columns that are

460
00:21:49,230 --> 00:21:54,000
going to be joined together they're

461
00:21:52,200 --> 00:21:56,039
going to share the thinking that's

462
00:21:54,000 --> 00:22:00,090
that's one thing that's how you check

463
00:21:56,039 --> 00:22:03,960
equality or just take a joint and the

464
00:22:00,090 --> 00:22:05,879
time any column that has time you will

465
00:22:03,960 --> 00:22:09,149
encrypt with a special key it's called

466
00:22:05,880 --> 00:22:10,320
kate i right it's just best if every

467
00:22:09,149 --> 00:22:13,830
time would be in keeping with the same

468
00:22:10,320 --> 00:22:15,840
key k time and all the other columns

469
00:22:13,830 --> 00:22:18,830
would be encrypted with any

470
00:22:15,840 --> 00:22:22,559
so it can be encrypted with a unique

471
00:22:18,830 --> 00:22:26,189
okay so that's basically that's how you

472
00:22:22,559 --> 00:22:27,840
do it with anemia dead right so if you

473
00:22:26,190 --> 00:22:32,130
have noticed I these actually not

474
00:22:27,840 --> 00:22:35,610
enabled you to check join I did not

475
00:22:32,130 --> 00:22:38,159
mention about ordering checking order of

476
00:22:35,610 --> 00:22:40,379
the time so that's I I'm going to leave

477
00:22:38,159 --> 00:22:44,340
it for a little bit later it's a little

478
00:22:40,380 --> 00:22:47,760
tricky but it's not very difficult so

479
00:22:44,340 --> 00:22:49,289
anemia KH is a special like user special

480
00:22:47,760 --> 00:22:51,240
keyed hash so it's not like a

481
00:22:49,289 --> 00:22:54,480
traditional kid has you'd renew

482
00:22:51,240 --> 00:22:56,760
literature right so it has a special

483
00:22:54,480 --> 00:22:58,620
property I'm going to talk about it so

484
00:22:56,760 --> 00:23:01,020
it's a like any other kid has the

485
00:22:58,620 --> 00:23:03,479
deterministic encryption it takes a

486
00:23:01,020 --> 00:23:06,240
value it takes a key it outputs are

487
00:23:03,480 --> 00:23:11,220
keyed hash value right that's basically

488
00:23:06,240 --> 00:23:16,289
what it does say you have two values U

489
00:23:11,220 --> 00:23:19,860
and V and they are taken a keyed hash

490
00:23:16,289 --> 00:23:22,679
with respect to keys k 1 and k 2

491
00:23:19,860 --> 00:23:28,110
respectively and you'd get like h1 and

492
00:23:22,679 --> 00:23:31,140
h2 right now if the keys are equal you

493
00:23:28,110 --> 00:23:33,080
can actually check equality of UV just

494
00:23:31,140 --> 00:23:36,899
by checking whether H 1 equal to h2

495
00:23:33,080 --> 00:23:38,580
right that's basically it but that's not

496
00:23:36,899 --> 00:23:41,279
the interesting case the interesting

497
00:23:38,580 --> 00:23:43,649
case the other case where this case k 1

498
00:23:41,279 --> 00:23:48,289
is not equal to k2 then how can you

499
00:23:43,649 --> 00:23:52,110
check equality between two elements so

500
00:23:48,289 --> 00:23:55,500
so basically how this kid has works is

501
00:23:52,110 --> 00:24:00,270
anybody who has k1 and k2 access to the

502
00:23:55,500 --> 00:24:03,690
two keys can generate a token Delta K 12

503
00:24:00,270 --> 00:24:07,260
k 2 right so what it basically allows

504
00:24:03,690 --> 00:24:10,679
you to do is like if you have keyed hash

505
00:24:07,260 --> 00:24:12,830
of you with k1 and this transfer key you

506
00:24:10,679 --> 00:24:17,820
can actually generate the keyed hash of

507
00:24:12,830 --> 00:24:21,029
you with just k 2 right then you can

508
00:24:17,820 --> 00:24:23,250
basically check whether it's equal to

509
00:24:21,029 --> 00:24:25,380
the keyed hash of VK too that's

510
00:24:23,250 --> 00:24:28,639
basically it so that's that's the

511
00:24:25,380 --> 00:24:30,990
special property now

512
00:24:28,639 --> 00:24:34,529
so this is more simpler this is

513
00:24:30,990 --> 00:24:37,259
basically for each of these columns you

514
00:24:34,529 --> 00:24:39,840
would have a unique key every column of

515
00:24:37,259 --> 00:24:45,059
the tape of each table unique key len

516
00:24:39,840 --> 00:24:46,649
using unique key but whenever you're

517
00:24:45,059 --> 00:24:48,440
going to take a joints between two

518
00:24:46,649 --> 00:24:52,860
columns you're going to generate this

519
00:24:48,440 --> 00:24:56,669
craft for keys right it's trafficky so

520
00:24:52,860 --> 00:25:00,869
that lets you transfer from one column

521
00:24:56,669 --> 00:25:02,519
to another now we're going to talk a

522
00:25:00,869 --> 00:25:06,090
little bit about how we're going to

523
00:25:02,519 --> 00:25:09,299
encrypt each individual value right so

524
00:25:06,090 --> 00:25:13,439
say we are trying to encrypt the value V

525
00:25:09,299 --> 00:25:15,960
with key K right that's our goal so the

526
00:25:13,440 --> 00:25:17,899
ciphertext would be up here the first

527
00:25:15,960 --> 00:25:21,119
part would be the keyed hash version

528
00:25:17,899 --> 00:25:23,340
with that key and the second part is a

529
00:25:21,119 --> 00:25:26,220
probabilistic encryption it could be any

530
00:25:23,340 --> 00:25:28,199
encryption aes whatever as long as I

531
00:25:26,220 --> 00:25:31,759
matically secure you can use it so

532
00:25:28,200 --> 00:25:36,360
that's so one value becomes up here

533
00:25:31,759 --> 00:25:38,129
right hence the high overhead high space

534
00:25:36,360 --> 00:25:40,610
overhead we talked about that KH has

535
00:25:38,129 --> 00:25:43,439
high space overhead right and

536
00:25:40,610 --> 00:25:45,600
additionally this keyed hash is a lot

537
00:25:43,440 --> 00:25:47,549
longer than the normal plain text value

538
00:25:45,600 --> 00:25:52,649
so that's that's how the overhead comes

539
00:25:47,549 --> 00:25:55,320
and for in 15 timestamps are we we have

540
00:25:52,649 --> 00:25:58,979
been talking about time stamps right and

541
00:25:55,320 --> 00:26:01,649
we're going to somehow check their order

542
00:25:58,980 --> 00:26:05,700
because that's what's necessary for our

543
00:26:01,649 --> 00:26:10,350
policies so what we're gonna do

544
00:26:05,700 --> 00:26:13,169
basically is go through the log pick out

545
00:26:10,350 --> 00:26:16,769
all the unique time steps all the unique

546
00:26:13,169 --> 00:26:18,679
time stamps and encrypt it with the

547
00:26:16,769 --> 00:26:23,669
special key we talked about Kate I'm

548
00:26:18,679 --> 00:26:26,249
right and add it to the specific data

549
00:26:23,669 --> 00:26:27,960
structure I'll talk talk about this data

550
00:26:26,249 --> 00:26:30,539
structure in a bit so it's this data

551
00:26:27,960 --> 00:26:32,940
structure will let you throw if you take

552
00:26:30,539 --> 00:26:34,470
two encrypted Paxton's it will tell you

553
00:26:32,940 --> 00:26:36,299
whether what is the order of them

554
00:26:34,470 --> 00:26:40,009
because that's basically what we need

555
00:26:36,299 --> 00:26:40,009
for our policy checking

556
00:26:40,290 --> 00:26:46,409
so we have I have been talking about

557
00:26:44,010 --> 00:26:48,629
this constant encrypted policies right

558
00:26:46,410 --> 00:26:51,060
so I told you guys that I'll gonna

559
00:26:48,630 --> 00:26:53,250
introduce that so that's let's see an

560
00:26:51,060 --> 00:26:55,470
example so this is the example policy

561
00:26:53,250 --> 00:26:57,830
right so don't worry I'm gonna run it to

562
00:26:55,470 --> 00:27:01,590
it if you see there are actually

563
00:26:57,830 --> 00:27:06,350
constant in this policy right now so

564
00:27:01,590 --> 00:27:09,419
this institution this NP i get 0 30 now

565
00:27:06,350 --> 00:27:13,020
all my information in the log are

566
00:27:09,420 --> 00:27:16,020
encrypted but i have here explained x so

567
00:27:13,020 --> 00:27:18,150
i can't actually check plain text with

568
00:27:16,020 --> 00:27:21,690
an encryption I can't just search them

569
00:27:18,150 --> 00:27:25,800
like that so what I do this is just play

570
00:27:21,690 --> 00:27:28,470
just for functional reasons if encrypt

571
00:27:25,800 --> 00:27:30,629
this constant to so instead of giving

572
00:27:28,470 --> 00:27:33,600
this policy I'll give this constant

573
00:27:30,630 --> 00:27:36,320
encrypted policy when these encryptions

574
00:27:33,600 --> 00:27:40,169
are like constants are all encrypted and

575
00:27:36,320 --> 00:27:43,230
this the only difference is this time of

576
00:27:40,170 --> 00:27:46,110
set constant well it appears in the time

577
00:27:43,230 --> 00:27:49,350
order are encrypted with that Kate I'm

578
00:27:46,110 --> 00:27:55,169
key that's basically what we have so far

579
00:27:49,350 --> 00:27:59,189
okay questions questions so far okay

580
00:27:55,170 --> 00:28:01,590
well and good so now we're going to talk

581
00:27:59,190 --> 00:28:02,640
about this like magical data structure

582
00:28:01,590 --> 00:28:05,070
that we have been talking about for

583
00:28:02,640 --> 00:28:08,490
comparing timestamp okay which called a

584
00:28:05,070 --> 00:28:10,649
moped data structure okay so what are

585
00:28:08,490 --> 00:28:15,000
the functionalities so the functionality

586
00:28:10,650 --> 00:28:18,870
is you can pick any to encrypt the time

587
00:28:15,000 --> 00:28:23,550
stamps from the log and pick any two

588
00:28:18,870 --> 00:28:26,610
constants distance constant offset from

589
00:28:23,550 --> 00:28:29,010
the policy and what you basically want

590
00:28:26,610 --> 00:28:32,250
to check is the value of this time order

591
00:28:29,010 --> 00:28:35,070
whether this this thing holds that is t

592
00:28:32,250 --> 00:28:38,580
1 plus d 1 is less than equal to t2 + b2

593
00:28:35,070 --> 00:28:42,030
now t 1 and d 1 at this plain text

594
00:28:38,580 --> 00:28:44,070
version of et-1 and 81 it's basically

595
00:28:42,030 --> 00:28:46,649
the plain text value okay so what do you

596
00:28:44,070 --> 00:28:50,189
basically want to do is check this to

597
00:28:46,650 --> 00:28:51,960
check this t1 plus v1 is less than equal

598
00:28:50,190 --> 00:28:52,500
to t2 plus d2 that's basically what you

599
00:28:51,960 --> 00:28:57,540
want to do

600
00:28:52,500 --> 00:29:00,210
now so what we basically do is you take

601
00:28:57,540 --> 00:29:04,800
all the unique tank stems from the law

602
00:29:00,210 --> 00:29:10,230
and you take all the unique time of the

603
00:29:04,800 --> 00:29:12,149
constants so you add T and P plus di in

604
00:29:10,230 --> 00:29:14,700
that beta structure that's what you do

605
00:29:12,150 --> 00:29:18,390
for all time you do that for all unique

606
00:29:14,700 --> 00:29:22,110
time you do that once that is done now

607
00:29:18,390 --> 00:29:24,480
we can be ready to query so the data

608
00:29:22,110 --> 00:29:27,449
structure looks something like this it's

609
00:29:24,480 --> 00:29:30,360
not very like it's not very difficult to

610
00:29:27,450 --> 00:29:32,340
understand what it does okay so there

611
00:29:30,360 --> 00:29:34,919
are other data supporting data structure

612
00:29:32,340 --> 00:29:38,330
but these two data structures are very

613
00:29:34,920 --> 00:29:42,450
simple so the first one basically safe

614
00:29:38,330 --> 00:29:45,659
so it chase et 17 so ET one is a

615
00:29:42,450 --> 00:29:47,850
encrypted time right and you can view

616
00:29:45,660 --> 00:29:51,870
this as a hash table where the key is

617
00:29:47,850 --> 00:29:55,649
this encrypted time steps now the value

618
00:29:51,870 --> 00:29:58,889
seven what that does that mean so what

619
00:29:55,650 --> 00:30:01,830
it means is if you were to use like

620
00:29:58,890 --> 00:30:05,700
decrypt all these encrypted timestamps

621
00:30:01,830 --> 00:30:09,510
right you put it in a array and you sort

622
00:30:05,700 --> 00:30:11,850
them right instead of this encrypt the

623
00:30:09,510 --> 00:30:14,670
time stamps you just take the plaintext

624
00:30:11,850 --> 00:30:18,780
time steps you put it in an array you

625
00:30:14,670 --> 00:30:20,850
sort them right for each time it will

626
00:30:18,780 --> 00:30:23,930
have a position in the array likes a

627
00:30:20,850 --> 00:30:26,580
like number two number 37 something and

628
00:30:23,930 --> 00:30:29,940
then what you do is like do a reverse

629
00:30:26,580 --> 00:30:32,760
map now you keep that et-1 is the

630
00:30:29,940 --> 00:30:35,430
encrypted time and seven is the position

631
00:30:32,760 --> 00:30:38,850
of the plaintext time that's that's what

632
00:30:35,430 --> 00:30:42,600
you keep keep a map of its each and a

633
00:30:38,850 --> 00:30:46,620
hash table the next thing basically says

634
00:30:42,600 --> 00:30:50,909
is ET for ED one so these are the two

635
00:30:46,620 --> 00:30:54,929
keys and the vet and the value is the 83

636
00:30:50,910 --> 00:30:57,810
dd1 so what it basically means is if you

637
00:30:54,930 --> 00:31:02,220
add this e t4 and ed one you'll get a

638
00:30:57,810 --> 00:31:04,620
time 83 d 1 so because we don't like our

639
00:31:02,220 --> 00:31:06,049
encryption does not allow us to add so

640
00:31:04,620 --> 00:31:09,149
we have to keep this

641
00:31:06,049 --> 00:31:12,509
mapping explicitly there is no way we

642
00:31:09,149 --> 00:31:16,199
could calculate addition now okay so

643
00:31:12,509 --> 00:31:19,350
let's say we have a query say e t1 e1 e2

644
00:31:16,200 --> 00:31:21,419
to Ed do and we want to know whether 81

645
00:31:19,350 --> 00:31:24,269
plus ed 1 is less than equal to e t2

646
00:31:21,419 --> 00:31:27,989
plus VD 2 now the first thing we are

647
00:31:24,269 --> 00:31:32,639
going to do is like use this guy this

648
00:31:27,989 --> 00:31:36,330
pair et1 anyone as a key and we are

649
00:31:32,639 --> 00:31:39,199
going to search it in the second data

650
00:31:36,330 --> 00:31:42,899
structure the one on your right right

651
00:31:39,200 --> 00:31:46,619
say we found it so we found this entry

652
00:31:42,899 --> 00:31:48,899
and we have this value et 1d one that

653
00:31:46,619 --> 00:31:50,759
basically means is if I add this

654
00:31:48,899 --> 00:31:53,820
encrypted time t1 and encrypted

655
00:31:50,759 --> 00:31:57,809
encrypted offset d1 the time I will that

656
00:31:53,820 --> 00:32:01,529
is key encryption would be 81 and d1 now

657
00:31:57,809 --> 00:32:03,899
what I would look use that as the key to

658
00:32:01,529 --> 00:32:07,259
look for the left data structure and

659
00:32:03,899 --> 00:32:09,869
we'll get the position 30 that means is

660
00:32:07,259 --> 00:32:16,519
like in the sorted array CH in position

661
00:32:09,869 --> 00:32:21,959
13 I do the same for et tu and ed to and

662
00:32:16,519 --> 00:32:24,869
get the position 57 now that the 13 is

663
00:32:21,960 --> 00:32:27,739
less than equal to 57 I can safely say

664
00:32:24,869 --> 00:32:31,139
that my response to this query is true

665
00:32:27,739 --> 00:32:34,830
any questions this can be a little

666
00:32:31,139 --> 00:32:36,869
tricky so so the tricky part is the

667
00:32:34,830 --> 00:32:40,978
first part is the data structure on the

668
00:32:36,869 --> 00:32:46,619
left it basically keeps a mapping of so

669
00:32:40,979 --> 00:32:48,720
think of this array positions as you

670
00:32:46,619 --> 00:32:51,629
take all the times encrypted times in

671
00:32:48,720 --> 00:32:54,659
the in your data structure you decrypt

672
00:32:51,629 --> 00:33:01,199
them right you put in an array and you

673
00:32:54,659 --> 00:33:04,169
sort them right now replace each plain

674
00:33:01,200 --> 00:33:07,139
text value with this encryption then the

675
00:33:04,169 --> 00:33:09,690
mapping you will get that is basically

676
00:33:07,139 --> 00:33:12,370
this ET one and seven right that's

677
00:33:09,690 --> 00:33:15,430
basically it

678
00:33:12,370 --> 00:33:17,500
okay because like this is the plane tech

679
00:33:15,430 --> 00:33:20,890
underlying plain text our order it's not

680
00:33:17,500 --> 00:33:23,770
the encrypted x order and the second

681
00:33:20,890 --> 00:33:26,980
part is basically saying if I were to

682
00:33:23,770 --> 00:33:30,639
add ET 1 plus ed one what would be the

683
00:33:26,980 --> 00:33:32,140
result so rather rather than because my

684
00:33:30,640 --> 00:33:34,690
encryption scheme does not allow me to

685
00:33:32,140 --> 00:33:37,809
add so i have to explicitly give it to

686
00:33:34,690 --> 00:33:39,820
you that's basically this other table

687
00:33:37,809 --> 00:33:43,270
the one on the right so once you have

688
00:33:39,820 --> 00:33:48,460
that you just like figure out this

689
00:33:43,270 --> 00:33:51,070
ordering the sorted array if like if the

690
00:33:48,460 --> 00:33:53,730
first one is smaller then you know that

691
00:33:51,070 --> 00:33:56,860
it's good I mean the result is true

692
00:33:53,730 --> 00:33:59,440
responses to which is the case in our

693
00:33:56,860 --> 00:34:04,000
case because 13 is less than equal to 57

694
00:33:59,440 --> 00:34:07,179
okay now now what we have for what we

695
00:34:04,000 --> 00:34:10,290
have seen so far is basically how would

696
00:34:07,179 --> 00:34:14,560
we encrypt the audit log to do join and

697
00:34:10,290 --> 00:34:16,779
how would we check time comparison if I

698
00:34:14,560 --> 00:34:19,629
take two times how would I compare them

699
00:34:16,780 --> 00:34:21,580
so now we are ready to actually look at

700
00:34:19,629 --> 00:34:23,409
the how the compliance checking works

701
00:34:21,580 --> 00:34:26,980
I'm not going to go into too much

702
00:34:23,409 --> 00:34:30,120
details I'm just gonna like like gloss

703
00:34:26,980 --> 00:34:35,110
over it a little bit and show an example

704
00:34:30,120 --> 00:34:37,418
so what we have seen so far right so the

705
00:34:35,110 --> 00:34:39,490
hospital the audit log is in that cloud

706
00:34:37,418 --> 00:34:43,270
our algorithm is gonna run in the club

707
00:34:39,489 --> 00:34:45,819
right so hospital would time to time add

708
00:34:43,270 --> 00:34:49,540
new events to the lock like it in bulk

709
00:34:45,820 --> 00:34:51,520
like say it will gather seven days of

710
00:34:49,540 --> 00:34:55,449
log and keep them and ship it to the

711
00:34:51,520 --> 00:34:58,150
club right and when it times it comes

712
00:34:55,449 --> 00:35:00,819
time to audit what we are gonna like the

713
00:34:58,150 --> 00:35:04,240
what the hospital is gonna do is give a

714
00:35:00,820 --> 00:35:06,190
constant encrypted policy some tokens

715
00:35:04,240 --> 00:35:09,000
the tokens we talked about for checking

716
00:35:06,190 --> 00:35:12,460
taking joints that's the token right and

717
00:35:09,000 --> 00:35:14,200
the algorithm would get or also the

718
00:35:12,460 --> 00:35:17,950
audit log which is the encrypted and

719
00:35:14,200 --> 00:35:22,529
it's gonna tell you either there is a

720
00:35:17,950 --> 00:35:24,899
violation or there is no violation okay

721
00:35:22,530 --> 00:35:29,210
yeah so it will give you the auditing

722
00:35:24,900 --> 00:35:31,350
result so our auditing algorithms

723
00:35:29,210 --> 00:35:34,830
function main function name is called

724
00:35:31,350 --> 00:35:36,660
Erie deuce so it takes for argument the

725
00:35:34,830 --> 00:35:38,370
first is the encrypted or the job

726
00:35:36,660 --> 00:35:40,379
because that's that's the compliance

727
00:35:38,370 --> 00:35:44,400
you're checking and the constant

728
00:35:40,380 --> 00:35:46,230
encrypted policy so that tokens because

729
00:35:44,400 --> 00:35:50,250
those are the wants you need for

730
00:35:46,230 --> 00:35:52,740
checking a taking jet join and a

731
00:35:50,250 --> 00:35:54,830
substitution for substitutions are

732
00:35:52,740 --> 00:35:58,770
basically you can think of them as maps

733
00:35:54,830 --> 00:36:01,860
it's a map of variables to their values

734
00:35:58,770 --> 00:36:04,680
so i'll tell you like this will become

735
00:36:01,860 --> 00:36:07,800
more clear in a couple of flights ok and

736
00:36:04,680 --> 00:36:10,980
it returns either true or false it

737
00:36:07,800 --> 00:36:14,340
returns true if the log satisfies the

738
00:36:10,980 --> 00:36:16,280
policy or it returns false when it the

739
00:36:14,340 --> 00:36:22,680
log does not satisfy the policy that's

740
00:36:16,280 --> 00:36:25,020
basically what it does questions ok for

741
00:36:22,680 --> 00:36:27,600
formal specification not difficult I'm

742
00:36:25,020 --> 00:36:29,160
gonna run it too it's very easy so if

743
00:36:27,600 --> 00:36:31,799
your policy it's basically I'll

744
00:36:29,160 --> 00:36:35,700
basically say that true what will be the

745
00:36:31,800 --> 00:36:39,120
result it's a true right right and the

746
00:36:35,700 --> 00:36:41,970
thing is like if you char predicate or

747
00:36:39,120 --> 00:36:44,400
our table name what do you want to do is

748
00:36:41,970 --> 00:36:47,220
like first get concrete values for the

749
00:36:44,400 --> 00:36:48,990
column names like and check whether it's

750
00:36:47,220 --> 00:36:52,410
in the log basically what you want to

751
00:36:48,990 --> 00:36:54,720
check what it does is but remember the

752
00:36:52,410 --> 00:36:57,509
one of the examples we check whether bob

753
00:36:54,720 --> 00:36:59,160
is a doctor that's that's basically what

754
00:36:57,510 --> 00:37:00,750
is happening here it's written in little

755
00:36:59,160 --> 00:37:06,359
weirdly but that's basically what is

756
00:37:00,750 --> 00:37:08,610
trying to say the mix next one says if

757
00:37:06,360 --> 00:37:11,310
you have a conjunction of two policies

758
00:37:08,610 --> 00:37:14,430
what we are going to do is like check

759
00:37:11,310 --> 00:37:16,920
the first one I check the first one and

760
00:37:14,430 --> 00:37:20,399
then check the second one if both of

761
00:37:16,920 --> 00:37:22,290
them are true then we'll return true so

762
00:37:20,400 --> 00:37:24,390
I don't know whether you can see that

763
00:37:22,290 --> 00:37:27,750
can you see that mouse pointer in the

764
00:37:24,390 --> 00:37:29,850
screen so that's basically an end right

765
00:37:27,750 --> 00:37:31,710
so it's basically saying Phi 1 is a

766
00:37:29,850 --> 00:37:33,630
policy phi 2 is the policy and this is

767
00:37:31,710 --> 00:37:35,710
an end of a policy so what do you do

768
00:37:33,630 --> 00:37:38,560
basically is recursively check

769
00:37:35,710 --> 00:37:40,510
the first policy and recursively check

770
00:37:38,560 --> 00:37:42,580
the second policy if both of them are

771
00:37:40,510 --> 00:37:46,780
true then you satisfied yeah it's true

772
00:37:42,580 --> 00:37:50,980
elseif a false the most interesting part

773
00:37:46,780 --> 00:37:53,859
is does this guy this so this guy

774
00:37:50,980 --> 00:37:59,470
basically says for all X that satisfies

775
00:37:53,859 --> 00:38:03,598
G it also satisfies five right so the

776
00:37:59,470 --> 00:38:07,149
first step is basically what you do is

777
00:38:03,599 --> 00:38:09,520
find out what satisfies G like off all

778
00:38:07,150 --> 00:38:13,349
substitutions for X that satisfies G

779
00:38:09,520 --> 00:38:17,970
right and you basically plug it into the

780
00:38:13,349 --> 00:38:23,080
Phi and see whether sigh is satisfied ok

781
00:38:17,970 --> 00:38:24,819
so now let's look an example so which so

782
00:38:23,080 --> 00:38:27,880
we're going to start off very simple

783
00:38:24,820 --> 00:38:29,380
example so it basically says every

784
00:38:27,880 --> 00:38:31,780
individual accessing the sensitive

785
00:38:29,380 --> 00:38:36,280
patient information is in the role of a

786
00:38:31,780 --> 00:38:39,210
doctor so this is the represented policy

787
00:38:36,280 --> 00:38:42,780
in the logic it's basically says for all

788
00:38:39,210 --> 00:38:46,839
principles p and all times t if

789
00:38:42,780 --> 00:38:50,859
principal p does a sensitive action at

790
00:38:46,839 --> 00:38:54,580
time T implies that p the doctor that's

791
00:38:50,859 --> 00:38:57,940
basically what the policy says say we

792
00:38:54,580 --> 00:39:02,440
have this log right so the sensitive

793
00:38:57,940 --> 00:39:04,660
access table and the role table for ease

794
00:39:02,440 --> 00:39:07,540
of exposition i'm just showing here the

795
00:39:04,660 --> 00:39:09,700
plain text value because if i show then

796
00:39:07,540 --> 00:39:13,060
click the delete it would make it would

797
00:39:09,700 --> 00:39:15,430
make no sense here so but believe me

798
00:39:13,060 --> 00:39:17,470
when i say these are encrypted when

799
00:39:15,430 --> 00:39:21,009
they're handled by the algorithm these

800
00:39:17,470 --> 00:39:23,700
are encrypted each of the values so this

801
00:39:21,010 --> 00:39:27,760
basically means that the employee j1

802
00:39:23,700 --> 00:39:30,779
does the sensitive access at august two

803
00:39:27,760 --> 00:39:34,000
thousand seven and employee is a doctor

804
00:39:30,780 --> 00:39:37,660
okay so that this is so the first thing

805
00:39:34,000 --> 00:39:40,270
what it does is it checks and remember

806
00:39:37,660 --> 00:39:42,399
this each of them are encrypted with a

807
00:39:40,270 --> 00:39:44,830
separate key so each column is encrypted

808
00:39:42,400 --> 00:39:47,800
with a separately so it's k 1 so let's

809
00:39:44,830 --> 00:39:49,990
say it's k1 k2 k3 k4

810
00:39:47,800 --> 00:39:53,320
okay so the first thing we are going to

811
00:39:49,990 --> 00:39:55,149
do is figure out who has done since Envy

812
00:39:53,320 --> 00:39:57,190
access so that's basically what you have

813
00:39:55,150 --> 00:40:00,640
to figure out so in our case there are

814
00:39:57,190 --> 00:40:03,100
two guys J 1 and B 1 and they access

815
00:40:00,640 --> 00:40:06,040
except on one on august two thousand

816
00:40:03,100 --> 00:40:07,750
seven another 1 sep tember 2007 so that

817
00:40:06,040 --> 00:40:12,910
would be our substitution so it

818
00:40:07,750 --> 00:40:18,310
basically says it basically says 4 p-4

819
00:40:12,910 --> 00:40:20,920
when pj1 and the time is august two

820
00:40:18,310 --> 00:40:25,299
thousand seven there is a sensitive axis

821
00:40:20,920 --> 00:40:29,250
that's basically our variable it's the

822
00:40:25,300 --> 00:40:32,560
whole thing is a substitution okay the

823
00:40:29,250 --> 00:40:35,200
next one basically says there is another

824
00:40:32,560 --> 00:40:38,230
substitution basically says by the way

825
00:40:35,200 --> 00:40:41,080
v1 data access to at august two thousand

826
00:40:38,230 --> 00:40:45,010
seven so now we what you have to say

827
00:40:41,080 --> 00:40:48,819
Jake is that both j1 and b1 and doctors

828
00:40:45,010 --> 00:40:51,670
so basically what we have to say is

829
00:40:48,820 --> 00:40:54,730
whether this thing actually appears in

830
00:40:51,670 --> 00:40:58,270
the row table right amines encryption

831
00:40:54,730 --> 00:41:01,330
key is the key right now here is the

832
00:40:58,270 --> 00:41:03,040
interesting part remember how we said

833
00:41:01,330 --> 00:41:05,650
that the employee column in the role

834
00:41:03,040 --> 00:41:10,300
table is encrypted with k3 but this guy

835
00:41:05,650 --> 00:41:13,120
is k to write the value we got our k2

836
00:41:10,300 --> 00:41:16,270
how can we search this so this is where

837
00:41:13,120 --> 00:41:21,310
the token comes in so we can use the

838
00:41:16,270 --> 00:41:23,230
token to change this with TK 3 right if

839
00:41:21,310 --> 00:41:26,440
we are given that token we can change it

840
00:41:23,230 --> 00:41:29,170
right that's then we can search whether

841
00:41:26,440 --> 00:41:34,330
this entry actually appears in the in

842
00:41:29,170 --> 00:41:36,400
roath table okay that's that's basically

843
00:41:34,330 --> 00:41:40,569
how the algorithm box works in as very

844
00:41:36,400 --> 00:41:42,250
simplistic session okay so let's say

845
00:41:40,570 --> 00:41:45,190
we're going to talk a little bit about

846
00:41:42,250 --> 00:41:47,770
the security assurance so in our

847
00:41:45,190 --> 00:41:50,290
security definition we assume the

848
00:41:47,770 --> 00:41:52,870
policies that publicly known because

849
00:41:50,290 --> 00:41:55,509
everybody anybody can go up and look up

850
00:41:52,870 --> 00:41:57,790
HIPAA or glba right they can such a

851
00:41:55,510 --> 00:42:00,740
little bit online and figure out all

852
00:41:57,790 --> 00:42:03,050
these constants like doctors is

853
00:42:00,740 --> 00:42:06,049
tuition for 30 days they can figure this

854
00:42:03,050 --> 00:42:09,350
out so we assume that even the adversary

855
00:42:06,050 --> 00:42:11,710
knows this so that's our security

856
00:42:09,350 --> 00:42:14,450
definition takes care of this and

857
00:42:11,710 --> 00:42:15,860
additionally we say that this table

858
00:42:14,450 --> 00:42:17,720
means we talked about and their

859
00:42:15,860 --> 00:42:20,750
corresponding column means they're

860
00:42:17,720 --> 00:42:26,720
publicly not do okay so they are

861
00:42:20,750 --> 00:42:31,450
publicly known and the only requirement

862
00:42:26,720 --> 00:42:33,950
we have is that adversary do not know

863
00:42:31,450 --> 00:42:35,779
encryption of a single value so it

864
00:42:33,950 --> 00:42:38,629
should not know what should be the

865
00:42:35,780 --> 00:42:41,060
encryption of Omar with k1 so it should

866
00:42:38,630 --> 00:42:44,180
not know that value as long as that

867
00:42:41,060 --> 00:42:47,810
value Omar is non constant it's not a

868
00:42:44,180 --> 00:42:50,890
constant okay constant it's it's okay to

869
00:42:47,810 --> 00:42:55,790
know but non constant it should not work

870
00:42:50,890 --> 00:42:59,000
okay and our definition is based on a

871
00:42:55,790 --> 00:43:01,279
novel form of audit log equivalent but

872
00:42:59,000 --> 00:43:03,860
so we have a definition which basically

873
00:43:01,280 --> 00:43:06,770
says that these two logs are equivalent

874
00:43:03,860 --> 00:43:08,950
in some thumb notion let's not worry

875
00:43:06,770 --> 00:43:11,990
about that for the time being okay and

876
00:43:08,950 --> 00:43:14,029
its security definition is basically an

877
00:43:11,990 --> 00:43:17,200
indistinguishable the kind of result

878
00:43:14,030 --> 00:43:19,460
it's basically you cannot be the

879
00:43:17,200 --> 00:43:24,669
adversary cannot distinguish between two

880
00:43:19,460 --> 00:43:27,260
things so in our cave its logs say say

881
00:43:24,670 --> 00:43:30,560
what we have is a log equivalence class

882
00:43:27,260 --> 00:43:34,280
basically what it means is each log in

883
00:43:30,560 --> 00:43:36,980
this class arequipa there is like the in

884
00:43:34,280 --> 00:43:39,410
our definition of log equivalence all of

885
00:43:36,980 --> 00:43:41,750
all of the logs in this equivalence

886
00:43:39,410 --> 00:43:44,029
class are equivalent now the security

887
00:43:41,750 --> 00:43:46,630
definition basically says that if you

888
00:43:44,030 --> 00:43:49,580
pick any anyone randomly right and

889
00:43:46,630 --> 00:43:52,250
encrypt it and give it to the adversary

890
00:43:49,580 --> 00:43:56,210
and he can run any polynomial time

891
00:43:52,250 --> 00:43:58,670
algorithm he cannot tell which which one

892
00:43:56,210 --> 00:44:01,040
of the log I gave gave him he can just

893
00:43:58,670 --> 00:44:03,290
he can just figure out like oh this is

894
00:44:01,040 --> 00:44:05,450
one of the logs from this equivalent

895
00:44:03,290 --> 00:44:08,359
class so what makes this more

896
00:44:05,450 --> 00:44:11,029
interesting is for any plain text log

897
00:44:08,359 --> 00:44:12,770
for any arbitrary plain text log the

898
00:44:11,030 --> 00:44:14,390
number of elements in the equivalence

899
00:44:12,770 --> 00:44:18,349
class is infinity

900
00:44:14,390 --> 00:44:20,660
to this side is infinity so that's

901
00:44:18,349 --> 00:44:22,579
that's that's so the thing like he can

902
00:44:20,660 --> 00:44:25,868
just say this is one of them infinite

903
00:44:22,579 --> 00:44:28,069
things doesn't know which one with like

904
00:44:25,869 --> 00:44:29,569
significant probability so this is these

905
00:44:28,069 --> 00:44:31,430
are all probably figured out these are

906
00:44:29,569 --> 00:44:32,900
not absolute results so with high

907
00:44:31,430 --> 00:44:37,549
probability cannot computational

908
00:44:32,900 --> 00:44:41,410
differentiate between this thing okay so

909
00:44:37,549 --> 00:44:43,819
now that we have finished talking about

910
00:44:41,410 --> 00:44:46,069
the security assurance let's talk a

911
00:44:43,819 --> 00:44:51,500
little bit about the implementation so

912
00:44:46,069 --> 00:44:55,400
we actually converted majority of HIPAA

913
00:44:51,500 --> 00:44:57,380
and GLBA in our language right so we

914
00:44:55,400 --> 00:45:01,309
converted them in our line the logic use

915
00:44:57,380 --> 00:45:04,279
of the scary one so and we implemented

916
00:45:01,309 --> 00:45:08,059
two algorithms one for that works with

917
00:45:04,279 --> 00:45:11,000
logs encrypted with anemia death the

918
00:45:08,059 --> 00:45:12,680
other one encrypted with anemia KH the

919
00:45:11,000 --> 00:45:17,440
keyed hash version so we implemented

920
00:45:12,680 --> 00:45:20,058
both of them with C++ and test it with

921
00:45:17,440 --> 00:45:24,529
synthetically generated traces we stored

922
00:45:20,059 --> 00:45:27,349
them in SQLite database so synthetic

923
00:45:24,529 --> 00:45:29,690
data is in us if the reason behind it

924
00:45:27,349 --> 00:45:31,339
the reason behind it is like no hospital

925
00:45:29,690 --> 00:45:33,049
would give us the log because they

926
00:45:31,339 --> 00:45:35,569
contain personal information right and

927
00:45:33,049 --> 00:45:38,180
the other thing I think so I'm not

928
00:45:35,569 --> 00:45:40,730
absolutely sure about this if I actually

929
00:45:38,180 --> 00:45:43,038
end up during the evaluation catching a

930
00:45:40,730 --> 00:45:46,430
violation I think I'm bound by law to

931
00:45:43,039 --> 00:45:49,130
report it so they they don't want to get

932
00:45:46,430 --> 00:45:52,009
into this legal mess so they it's very

933
00:45:49,130 --> 00:45:53,779
ambivalent about sharing this kind of

934
00:45:52,009 --> 00:45:57,529
audit log so I I have to test with

935
00:45:53,779 --> 00:46:00,200
synthetic trace audit logs so our

936
00:45:57,529 --> 00:46:01,640
baseline is the algorithm that works

937
00:46:00,200 --> 00:46:05,689
with plain text so no no encryption

938
00:46:01,640 --> 00:46:07,098
right that's how baseline and these are

939
00:46:05,690 --> 00:46:10,430
the computational overhead which

940
00:46:07,099 --> 00:46:13,730
basically says for anemia debt we have

941
00:46:10,430 --> 00:46:17,180
three to nine percent of overhead this

942
00:46:13,730 --> 00:46:19,549
is time overhead not space and for

943
00:46:17,180 --> 00:46:22,009
anemia cage we have sixty three to four

944
00:46:19,549 --> 00:46:23,599
hundred six percent so 406 is not a

945
00:46:22,009 --> 00:46:24,940
mistake it's which is actually which

946
00:46:23,599 --> 00:46:27,830
takes four times

947
00:46:24,940 --> 00:46:32,570
the reason it takes four times longer is

948
00:46:27,830 --> 00:46:35,000
due to this you do we do this star key

949
00:46:32,570 --> 00:46:37,910
changing operation like using the token

950
00:46:35,000 --> 00:46:42,490
we change the hash keys that's what the

951
00:46:37,910 --> 00:46:46,730
cost is incurred right now let's see the

952
00:46:42,490 --> 00:46:48,709
HIPAA results so the x-axis is number of

953
00:46:46,730 --> 00:46:52,700
privacy sensitive events in the audit

954
00:46:48,710 --> 00:46:55,910
log right and the y-axis is the average

955
00:46:52,700 --> 00:46:59,470
execution time in milliseconds to check

956
00:46:55,910 --> 00:47:02,899
one one guy one privacy sensitive event

957
00:46:59,470 --> 00:47:06,520
okay so as you can see that if the log

958
00:47:02,900 --> 00:47:09,980
grows the time works every time and the

959
00:47:06,520 --> 00:47:13,610
maroon one is the execution time of the

960
00:47:09,980 --> 00:47:16,730
plain text algorithm right and the blue

961
00:47:13,610 --> 00:47:19,190
one is the deterministic portion so if

962
00:47:16,730 --> 00:47:21,530
you see in the whole thing they are very

963
00:47:19,190 --> 00:47:24,619
close together so that that actually

964
00:47:21,530 --> 00:47:27,320
means very low overhead and the black

965
00:47:24,619 --> 00:47:29,600
one is the KH 1 which is more secured

966
00:47:27,320 --> 00:47:35,450
but as you can see they have a very high

967
00:47:29,600 --> 00:47:37,460
overhead if you see that now so this is

968
00:47:35,450 --> 00:47:41,060
the ground leach bliley act they have

969
00:47:37,460 --> 00:47:42,770
the similar trends so the plane and the

970
00:47:41,060 --> 00:47:46,430
deterministic one are very close

971
00:47:42,770 --> 00:47:49,670
together but the keyed hash approach has

972
00:47:46,430 --> 00:47:52,009
a few nungas overhead so like whatever

973
00:47:49,670 --> 00:47:53,960
you wanna like so whatever fits your

974
00:47:52,010 --> 00:47:57,109
application you choose that if you want

975
00:47:53,960 --> 00:47:59,330
more security q's KH if you want more

976
00:47:57,109 --> 00:48:04,580
efficiency look for the deterministic

977
00:47:59,330 --> 00:48:07,009
encryption to summarize so what we did

978
00:48:04,580 --> 00:48:11,150
was presented to sync people audit log

979
00:48:07,010 --> 00:48:14,540
encryption schemes and enhanced an

980
00:48:11,150 --> 00:48:18,050
existing auditing algorithm to handle

981
00:48:14,540 --> 00:48:20,680
encrypted audit logs talked a little bit

982
00:48:18,050 --> 00:48:24,200
about the security definition and

983
00:48:20,680 --> 00:48:27,529
finally empirically related that our

984
00:48:24,200 --> 00:48:31,939
approach is actually efficiently usable

985
00:48:27,530 --> 00:48:35,270
in practice okay so thank you for your

986
00:48:31,940 --> 00:48:37,480
attention I'll take any questions you

987
00:48:35,270 --> 00:48:37,480
might have

988
00:48:39,020 --> 00:48:51,299
no questions yes so what's so what's

989
00:48:44,730 --> 00:48:55,490
your storage / have a full do I have to

990
00:48:51,299 --> 00:48:59,640
push this guy and then go down okay so

991
00:48:55,490 --> 00:49:03,359
24 for the KH it's like around four

992
00:48:59,640 --> 00:49:07,558
times four times more space a little bit

993
00:49:03,359 --> 00:49:10,200
over four times on the deterministic

994
00:49:07,559 --> 00:49:13,619
encryption it's twice almost so that's

995
00:49:10,200 --> 00:49:19,288
basically the space overhead we have any

996
00:49:13,619 --> 00:49:23,789
other questions so the setting of you

997
00:49:19,289 --> 00:49:26,760
you are soon the data owners send the

998
00:49:23,789 --> 00:49:28,380
program to the cloud to execute yes so

999
00:49:26,760 --> 00:49:31,440
that the auditing algorithm also runs on

1000
00:49:28,380 --> 00:49:33,480
the clock which it's because other than

1001
00:49:31,440 --> 00:49:36,390
that you have to have this communication

1002
00:49:33,480 --> 00:49:46,760
overhead so that's that's basically the

1003
00:49:36,390 --> 00:49:46,759
fitting is any other questions okay okay

