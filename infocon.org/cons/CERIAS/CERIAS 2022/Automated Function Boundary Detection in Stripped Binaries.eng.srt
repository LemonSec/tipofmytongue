1
00:00:00,399 --> 00:00:03,600
uh we are once again here with the

2
00:00:03,600 --> 00:00:05,600
serious seminar

3
00:00:05,600 --> 00:00:07,919
uh held weekly

4
00:00:07,919 --> 00:00:09,840
and uh

5
00:00:09,840 --> 00:00:12,559
this week we have somebody that uh has

6
00:00:12,559 --> 00:00:14,240
been involved in

7
00:00:14,240 --> 00:00:17,039
cyber security uh for

8
00:00:17,039 --> 00:00:19,119
well really 30 years

9
00:00:19,119 --> 00:00:21,439
a long time

10
00:00:21,439 --> 00:00:22,880
been

11
00:00:22,880 --> 00:00:25,359
deeply involved in not only research but

12
00:00:25,359 --> 00:00:26,880
in education

13
00:00:26,880 --> 00:00:28,320
was uh

14
00:00:28,320 --> 00:00:29,519
one of the people involved with one of

15
00:00:29,519 --> 00:00:31,039
the very first centers of academic

16
00:00:31,039 --> 00:00:32,159
excellence

17
00:00:32,159 --> 00:00:35,440
where he continues to uh

18
00:00:35,440 --> 00:00:39,120
be director and this is at the uh as you

19
00:00:39,120 --> 00:00:41,600
can see the university of idaho

20
00:00:41,600 --> 00:00:43,600
so jim elvis foss

21
00:00:43,600 --> 00:00:44,559
um

22
00:00:44,559 --> 00:00:46,480
has

23
00:00:46,480 --> 00:00:48,160
just a long career you can read some of

24
00:00:48,160 --> 00:00:50,640
his bio here you can find him online

25
00:00:50,640 --> 00:00:53,280
he's worked in a number of areas um

26
00:00:53,280 --> 00:00:55,840
including as you see here in

27
00:00:55,840 --> 00:00:58,000
source code analysis he's worked in

28
00:00:58,000 --> 00:00:59,039
quantum

29
00:00:59,039 --> 00:01:00,879
he's worked in uh i think he did some

30
00:01:00,879 --> 00:01:03,280
work in ids as well

31
00:01:03,280 --> 00:01:05,519
um and so

32
00:01:05,519 --> 00:01:07,119
he's got a lot of experience he's going

33
00:01:07,119 --> 00:01:09,680
to share some of it with us today with

34
00:01:09,680 --> 00:01:11,439
some insights into function boundary

35
00:01:11,439 --> 00:01:15,119
detection in stripped binaries and so

36
00:01:15,119 --> 00:01:18,000
uh please welcome professor jim elvis

37
00:01:18,000 --> 00:01:18,960
foss

38
00:01:18,960 --> 00:01:20,720
all right thank you staff and i've known

39
00:01:20,720 --> 00:01:24,080
staff at least 25 years if not longer so

40
00:01:24,080 --> 00:01:26,400
this has been really exciting um to do

41
00:01:26,400 --> 00:01:27,200
this

42
00:01:27,200 --> 00:01:28,960
i'll just jump right in i've got a lot

43
00:01:28,960 --> 00:01:30,400
to share with you

44
00:01:30,400 --> 00:01:32,640
so the problem we're facing here is

45
00:01:32,640 --> 00:01:35,040
compilers translate source code into

46
00:01:35,040 --> 00:01:37,759
binary images you know executable code

47
00:01:37,759 --> 00:01:40,320
a strip binary does not have a symbol

48
00:01:40,320 --> 00:01:42,399
table doesn't have information to help

49
00:01:42,399 --> 00:01:44,000
the analyst

50
00:01:44,000 --> 00:01:45,680
figure out what portions of the code

51
00:01:45,680 --> 00:01:46,960
belong to which

52
00:01:46,960 --> 00:01:48,479
so it's not obvious where a function

53
00:01:48,479 --> 00:01:49,759
start

54
00:01:49,759 --> 00:01:51,520
where functions end

55
00:01:51,520 --> 00:01:53,200
the problem exasperated by if we use

56
00:01:53,200 --> 00:01:54,960
different compilers uh different

57
00:01:54,960 --> 00:01:56,960
architectures different compiler options

58
00:01:56,960 --> 00:01:59,840
like optimization options uh the common

59
00:01:59,840 --> 00:02:02,240
ones people look at are o0

60
00:02:02,240 --> 00:02:05,360
which is no optimization o10203 which do

61
00:02:05,360 --> 00:02:07,360
different levels of optimization

62
00:02:07,360 --> 00:02:08,720
even your programming language choice so

63
00:02:08,720 --> 00:02:11,280
you can find c c plus plus fortran

64
00:02:11,280 --> 00:02:13,040
some other language

65
00:02:13,040 --> 00:02:15,040
and so to have a general purpose tool

66
00:02:15,040 --> 00:02:17,040
that can do this analysis is a tricky

67
00:02:17,040 --> 00:02:18,560
thing

68
00:02:18,560 --> 00:02:20,400
if we can do this analysis it will help

69
00:02:20,400 --> 00:02:22,000
us when we do reverse engineering when

70
00:02:22,000 --> 00:02:24,239
we do decompilation when we look at that

71
00:02:24,239 --> 00:02:26,400
executable and

72
00:02:26,400 --> 00:02:28,480
want to figure out what's going on

73
00:02:28,480 --> 00:02:29,680
um

74
00:02:29,680 --> 00:02:31,360
can we do unit level testing of the

75
00:02:31,360 --> 00:02:33,519
binaries can we look at hey let's find a

76
00:02:33,519 --> 00:02:35,120
function and now analyze it for

77
00:02:35,120 --> 00:02:36,959
vulnerability well i have to find know

78
00:02:36,959 --> 00:02:38,480
where the function is first before i do

79
00:02:38,480 --> 00:02:40,720
that can i do binary patching so if you

80
00:02:40,720 --> 00:02:42,560
look at the darpa cybergrain challenge

81
00:02:42,560 --> 00:02:44,400
if you're not familiar with it i urge

82
00:02:44,400 --> 00:02:47,680
you to look at it it was back 2014-16

83
00:02:47,680 --> 00:02:50,879
was take a binary analyze it add

84
00:02:50,879 --> 00:02:52,640
security features to it

85
00:02:52,640 --> 00:02:54,160
without breaking functionality or

86
00:02:54,160 --> 00:02:55,680
performance

87
00:02:55,680 --> 00:02:57,360
all automated

88
00:02:57,360 --> 00:02:58,640
well to do that you need to know where

89
00:02:58,640 --> 00:03:01,518
the function starts are

90
00:03:01,680 --> 00:03:03,599
so an example of one this is this is all

91
00:03:03,599 --> 00:03:05,360
using att

92
00:03:05,360 --> 00:03:07,920
syntax from obj dump

93
00:03:07,920 --> 00:03:10,319
for the intel compiler uh this happens

94
00:03:10,319 --> 00:03:12,239
to be 32-bit intel

95
00:03:12,239 --> 00:03:15,040
compilers do weird things icc compiler

96
00:03:15,040 --> 00:03:16,720
for optimization

97
00:03:16,720 --> 00:03:19,040
in 32-bit

98
00:03:19,040 --> 00:03:20,800
executables

99
00:03:20,800 --> 00:03:22,319
normally

100
00:03:22,319 --> 00:03:24,239
data is pushed on the stack passed on

101
00:03:24,239 --> 00:03:25,680
the stack

102
00:03:25,680 --> 00:03:27,920
however

103
00:03:27,920 --> 00:03:29,760
in um

104
00:03:29,760 --> 00:03:31,680
64-bit

105
00:03:31,680 --> 00:03:34,560
executables the first several

106
00:03:34,560 --> 00:03:36,000
parameters are actually passed in

107
00:03:36,000 --> 00:03:37,599
registers

108
00:03:37,599 --> 00:03:39,920
intel in their compiler the icc compiler

109
00:03:39,920 --> 00:03:42,799
decided they liked internally within a

110
00:03:42,799 --> 00:03:45,519
function or within a program to pass the

111
00:03:45,519 --> 00:03:47,120
parameters

112
00:03:47,120 --> 00:03:48,560
in registers

113
00:03:48,560 --> 00:03:51,200
but to be compatible with

114
00:03:51,200 --> 00:03:53,920
external functions that would call that

115
00:03:53,920 --> 00:03:55,280
they would pass things on the stack so

116
00:03:55,280 --> 00:03:56,480
the first two lines here things are

117
00:03:56,480 --> 00:03:58,840
passed on the stack they copy them into

118
00:03:58,840 --> 00:04:01,760
registers then they fall through to a

119
00:04:01,760 --> 00:04:04,239
second part where they just deal use

120
00:04:04,239 --> 00:04:07,120
those registers so internally within the

121
00:04:07,120 --> 00:04:09,599
program it can call directly here

122
00:04:09,599 --> 00:04:11,680
passing everything as registers if an

123
00:04:11,680 --> 00:04:14,239
external program

124
00:04:14,239 --> 00:04:16,000
called it

125
00:04:16,000 --> 00:04:17,759
the external program would pass things

126
00:04:17,759 --> 00:04:19,040
through stacks so we have two different

127
00:04:19,040 --> 00:04:21,600
entry points for the same function

128
00:04:21,600 --> 00:04:24,240
which one's the function start

129
00:04:24,240 --> 00:04:27,360
um symbol tables icc actually here's an

130
00:04:27,360 --> 00:04:30,400
example they did they took one function

131
00:04:30,400 --> 00:04:31,919
which i'll show a little later broke it

132
00:04:31,919 --> 00:04:36,080
up into five constituent parts

133
00:04:36,880 --> 00:04:39,919
uh sometimes you'll have multiple uh

134
00:04:39,919 --> 00:04:41,440
symbols pointing to the exact same

135
00:04:41,440 --> 00:04:43,040
function

136
00:04:43,040 --> 00:04:45,120
so we have to look at that

137
00:04:45,120 --> 00:04:46,720
uh what happened here with the intel

138
00:04:46,720 --> 00:04:48,880
compiler they found a function that

139
00:04:48,880 --> 00:04:51,120
passed a parameter

140
00:04:51,120 --> 00:04:53,600
as a constant the parameter was a radix

141
00:04:53,600 --> 00:04:56,320
this was converting a string into an

142
00:04:56,320 --> 00:04:57,280
integer

143
00:04:57,280 --> 00:04:59,520
so is it a 16-bit string

144
00:04:59,520 --> 00:05:02,160
you know 60 um base 16 format base 2

145
00:05:02,160 --> 00:05:05,440
format base 4. so if a base 16 there was

146
00:05:05,440 --> 00:05:07,039
a switch statement at the beginning of

147
00:05:07,039 --> 00:05:07,759
the

148
00:05:07,759 --> 00:05:10,160
code that said oh if it's base 16 do

149
00:05:10,160 --> 00:05:12,639
this base 2 do this the compiler caught

150
00:05:12,639 --> 00:05:14,720
that figured that out and said hey let's

151
00:05:14,720 --> 00:05:16,880
create sub functions one for when it's

152
00:05:16,880 --> 00:05:18,720
base 16 one for its base two and only

153
00:05:18,720 --> 00:05:20,320
combine those together and optimize them

154
00:05:20,320 --> 00:05:21,680
together and pass everything as a

155
00:05:21,680 --> 00:05:25,360
constant and deal with it um so it

156
00:05:25,360 --> 00:05:27,039
compiled different code and actually

157
00:05:27,039 --> 00:05:28,479
notice the code here is a little

158
00:05:28,479 --> 00:05:30,000
different because here it knew was

159
00:05:30,000 --> 00:05:32,960
16-bit here news or base 16 here was

160
00:05:32,960 --> 00:05:35,199
base two so it did things differently

161
00:05:35,199 --> 00:05:38,479
but it took a single expression a single

162
00:05:38,479 --> 00:05:39,919
function integer constant and

163
00:05:39,919 --> 00:05:41,759
expression.c and broken up into five

164
00:05:41,759 --> 00:05:44,720
functions so what's the function

165
00:05:44,720 --> 00:05:46,639
um

166
00:05:46,639 --> 00:05:48,639
here's another example from source code

167
00:05:48,639 --> 00:05:50,880
we have a while loop here that keeps

168
00:05:50,880 --> 00:05:53,039
repeating until there's an error then it

169
00:05:53,039 --> 00:05:55,280
generates an error

170
00:05:55,280 --> 00:05:57,440
well some to it'll generate code like

171
00:05:57,440 --> 00:05:58,400
this

172
00:05:58,400 --> 00:06:00,720
no there's a jump here in that while

173
00:06:00,720 --> 00:06:02,639
loop

174
00:06:02,639 --> 00:06:05,440
um and a bunch of no ops

175
00:06:05,440 --> 00:06:06,720
and then the actual beginning of the

176
00:06:06,720 --> 00:06:08,800
while loop that's a an optimization

177
00:06:08,800 --> 00:06:10,560
option to allow

178
00:06:10,560 --> 00:06:11,360
uh

179
00:06:11,360 --> 00:06:13,919
to fit on an address boundary

180
00:06:13,919 --> 00:06:16,160
well so the jumps actually here but

181
00:06:16,160 --> 00:06:18,080
certain tools like idapro thinks oh this

182
00:06:18,080 --> 00:06:19,840
is the end of the function because

183
00:06:19,840 --> 00:06:21,919
there's a bunch of no ops after it

184
00:06:21,919 --> 00:06:23,680
because this looked like a typical

185
00:06:23,680 --> 00:06:26,400
pattern matching end of a function

186
00:06:26,400 --> 00:06:28,400
and i've seen tools where they do

187
00:06:28,400 --> 00:06:31,039
training with machine learning

188
00:06:31,039 --> 00:06:32,639
and they say oh yeah a bunch of no ops

189
00:06:32,639 --> 00:06:33,919
that's a pattern matching end of the

190
00:06:33,919 --> 00:06:36,080
function in this case it's not

191
00:06:36,080 --> 00:06:38,479
so we have to figure out how to fix that

192
00:06:38,479 --> 00:06:40,240
here's another example

193
00:06:40,240 --> 00:06:42,240
where we have a

194
00:06:42,240 --> 00:06:45,199
star rax is a jump pointer so this

195
00:06:45,199 --> 00:06:47,759
contains the address you dereference the

196
00:06:47,759 --> 00:06:49,199
contents in this address and jump to

197
00:06:49,199 --> 00:06:52,000
that commonly used and switch statements

198
00:06:52,000 --> 00:06:54,160
so you have switch case statements

199
00:06:54,160 --> 00:06:56,160
case 1 case 2 case 3

200
00:06:56,160 --> 00:06:58,800
compilers generate a lookup table

201
00:06:58,800 --> 00:07:00,240
calculate it

202
00:07:00,240 --> 00:07:02,160
and use the jump pointer and that lookup

203
00:07:02,160 --> 00:07:05,199
table figure out where to jump to

204
00:07:05,199 --> 00:07:06,800
ida pro couldn't figure that out so it

205
00:07:06,800 --> 00:07:09,280
must be the end of the function

206
00:07:09,280 --> 00:07:10,800
so these are things that we have to look

207
00:07:10,800 --> 00:07:12,400
at and figure out and there's a whole

208
00:07:12,400 --> 00:07:14,880
lot of other things um there's

209
00:07:14,880 --> 00:07:16,960
unreachable code there's other things so

210
00:07:16,960 --> 00:07:19,919
how do we do this

211
00:07:20,000 --> 00:07:21,759
well what we did

212
00:07:21,759 --> 00:07:23,440
and i know i'm talking fast and you can

213
00:07:23,440 --> 00:07:25,360
slow me down if you have to

214
00:07:25,360 --> 00:07:26,720
um

215
00:07:26,720 --> 00:07:28,400
we did what we call a static semantics

216
00:07:28,400 --> 00:07:29,680
based approach and there's some other

217
00:07:29,680 --> 00:07:32,000
approaches that have been done

218
00:07:32,000 --> 00:07:34,000
what we did

219
00:07:34,000 --> 00:07:36,880
is we used objdunk not the best way to

220
00:07:36,880 --> 00:07:38,080
do this but

221
00:07:38,080 --> 00:07:41,039
we started this as a tool and never

222
00:07:41,039 --> 00:07:43,199
experimental never fixed it so we took

223
00:07:43,199 --> 00:07:45,759
obj dump to generate actual source code

224
00:07:45,759 --> 00:07:46,960
like this

225
00:07:46,960 --> 00:07:49,919
in text and then we parse the text

226
00:07:49,919 --> 00:07:51,840
fed it into what we call our jill data

227
00:07:51,840 --> 00:07:55,120
structure for jim as our tool

228
00:07:55,120 --> 00:07:56,560
i should mention

229
00:07:56,560 --> 00:07:58,879
so i did this work with dr jia song her

230
00:07:58,879 --> 00:08:02,319
first name j i a my first name jim jim

231
00:08:02,319 --> 00:08:03,919
so we merged those two together to get

232
00:08:03,919 --> 00:08:05,120
jima

233
00:08:05,120 --> 00:08:06,240
um

234
00:08:06,240 --> 00:08:08,479
so our jima intermediate language data

235
00:08:08,479 --> 00:08:10,000
structure is where we maintain

236
00:08:10,000 --> 00:08:12,960
everything when we do the disassembly

237
00:08:12,960 --> 00:08:15,680
so we use obj dump to feed data into our

238
00:08:15,680 --> 00:08:17,759
jill data structure we also read the raw

239
00:08:17,759 --> 00:08:20,000
binary executable linking format file

240
00:08:20,000 --> 00:08:21,759
the elf file

241
00:08:21,759 --> 00:08:24,800
we track in the disassembled code all

242
00:08:24,800 --> 00:08:27,680
the jumps all the calls

243
00:08:27,680 --> 00:08:30,160
um all the returns to figure out hey

244
00:08:30,160 --> 00:08:33,039
these are addresses we know about

245
00:08:33,039 --> 00:08:35,120
we figured out where code was and where

246
00:08:35,120 --> 00:08:39,360
data was in general sections

247
00:08:39,360 --> 00:08:40,640
we found all instructions that

248
00:08:40,640 --> 00:08:43,039
explicitly referenced code and data

249
00:08:43,039 --> 00:08:45,040
addresses

250
00:08:45,040 --> 00:08:46,800
we uh looked at the information about

251
00:08:46,800 --> 00:08:48,560
dynamic libraries

252
00:08:48,560 --> 00:08:50,240
we determined if functions are actually

253
00:08:50,240 --> 00:08:52,000
aligned on specific byte boundaries like

254
00:08:52,000 --> 00:08:54,080
every 16 bytes every four bytes or

255
00:08:54,080 --> 00:08:56,160
they're just randomly through based on

256
00:08:56,160 --> 00:08:57,760
the ones where we have hard-coded

257
00:08:57,760 --> 00:08:59,360
addresses for because we can see if i

258
00:08:59,360 --> 00:09:00,880
can go

259
00:09:00,880 --> 00:09:02,000
here

260
00:09:02,000 --> 00:09:03,440
you often have hard you have the

261
00:09:03,440 --> 00:09:06,399
hard-coded addresses in a lot of code

262
00:09:06,399 --> 00:09:09,839
and that's where we started

263
00:09:10,240 --> 00:09:12,399
and then we said well there's exception

264
00:09:12,399 --> 00:09:14,800
handlers and exception handlers list a

265
00:09:14,800 --> 00:09:16,080
block of code that they have an

266
00:09:16,080 --> 00:09:17,360
exception on so we'll grab that

267
00:09:17,360 --> 00:09:19,440
information give us other

268
00:09:19,440 --> 00:09:21,200
other analysis of where the code is and

269
00:09:21,200 --> 00:09:22,399
we looked at also

270
00:09:22,399 --> 00:09:23,839
where the exceptional handlers are

271
00:09:23,839 --> 00:09:24,880
because they're part of the function

272
00:09:24,880 --> 00:09:26,800
where they're handling the exception for

273
00:09:26,800 --> 00:09:28,160
even though they're not directly

274
00:09:28,160 --> 00:09:29,360
reachable

275
00:09:29,360 --> 00:09:31,440
because if you did a uh

276
00:09:31,440 --> 00:09:33,040
control flow analysis of a program

277
00:09:33,040 --> 00:09:34,160
you're not going to find the exception

278
00:09:34,160 --> 00:09:36,560
handling code that's at the bottom

279
00:09:36,560 --> 00:09:38,800
so we looked for that

280
00:09:38,800 --> 00:09:40,720
we looked for the jump pointers

281
00:09:40,720 --> 00:09:42,399
uh and we did a

282
00:09:42,399 --> 00:09:44,880
pseudo symbolic execution where we took

283
00:09:44,880 --> 00:09:46,800
every jump pointer i'll go back here

284
00:09:46,800 --> 00:09:49,680
like this one we said oh it's rax well

285
00:09:49,680 --> 00:09:51,440
let's work backwards in the code to

286
00:09:51,440 --> 00:09:53,680
figure out where our ax is populated oh

287
00:09:53,680 --> 00:09:55,360
it was populated from the context of our

288
00:09:55,360 --> 00:09:56,800
dx here

289
00:09:56,800 --> 00:09:59,040
well rdx was populated from rax we work

290
00:09:59,040 --> 00:10:01,120
our way back to figure out if we can

291
00:10:01,120 --> 00:10:04,720
find out where in memory that

292
00:10:04,720 --> 00:10:06,320
jump pointer is

293
00:10:06,320 --> 00:10:08,560
where that table is calculate all those

294
00:10:08,560 --> 00:10:09,839
table addresses and say those are all

295
00:10:09,839 --> 00:10:11,519
part of the same function

296
00:10:11,519 --> 00:10:13,519
this works about 90 of the time in what

297
00:10:13,519 --> 00:10:15,920
we have

298
00:10:16,079 --> 00:10:17,760
then we go through the code and say okay

299
00:10:17,760 --> 00:10:19,360
we've got this we got this let's start

300
00:10:19,360 --> 00:10:21,200
going start with something we know is

301
00:10:21,200 --> 00:10:23,680
the start of functions target a call

302
00:10:23,680 --> 00:10:26,480
and work through it

303
00:10:26,480 --> 00:10:28,800
analyzing all the places where an

304
00:10:28,800 --> 00:10:31,360
instruction is a target of a jump

305
00:10:31,360 --> 00:10:33,040
or a call or something

306
00:10:33,040 --> 00:10:34,720
or instructions where the control flow

307
00:10:34,720 --> 00:10:37,200
leaves we call these inflection points

308
00:10:37,200 --> 00:10:38,720
places where the code diverges from our

309
00:10:38,720 --> 00:10:41,920
linear flow so calls jumps returns etc

310
00:10:41,920 --> 00:10:43,519
walk through all these inflections where

311
00:10:43,519 --> 00:10:45,279
we're leaving the code so we're stepping

312
00:10:45,279 --> 00:10:46,720
through the code

313
00:10:46,720 --> 00:10:49,680
uh beginning to end

314
00:10:49,680 --> 00:10:52,640
let's see where's my

315
00:10:54,000 --> 00:10:55,600
so we're going through the code

316
00:10:55,600 --> 00:10:56,880
beginning to end

317
00:10:56,880 --> 00:10:58,720
every instruction is executed when we

318
00:10:58,720 --> 00:11:00,959
get to a point where we say oh

319
00:11:00,959 --> 00:11:02,720
this could have been a jump or target

320
00:11:02,720 --> 00:11:04,399
out

321
00:11:04,399 --> 00:11:06,399
that's something to look at then we find

322
00:11:06,399 --> 00:11:08,079
the next one where it was a jump out and

323
00:11:08,079 --> 00:11:11,040
we look at and we decide

324
00:11:11,040 --> 00:11:12,959
when our analysis is this part of the

325
00:11:12,959 --> 00:11:15,120
same function or is this leaving the

326
00:11:15,120 --> 00:11:17,519
function

327
00:11:18,160 --> 00:11:19,920
that's ideally the goal so we're doing a

328
00:11:19,920 --> 00:11:21,839
control flow analysis saying

329
00:11:21,839 --> 00:11:23,200
are we in there or not now we got a lot

330
00:11:23,200 --> 00:11:24,880
of problems

331
00:11:24,880 --> 00:11:27,040
um

332
00:11:27,040 --> 00:11:29,920
some code does what it calls

333
00:11:29,920 --> 00:11:30,880
uh

334
00:11:30,880 --> 00:11:33,120
tail jumps or tail optimization if the

335
00:11:33,120 --> 00:11:36,959
very last instruction of a function is a

336
00:11:36,959 --> 00:11:39,279
call to another function

337
00:11:39,279 --> 00:11:41,360
there's no read to return no need to

338
00:11:41,360 --> 00:11:43,760
return back to the original

339
00:11:43,760 --> 00:11:45,040
because it's just going to return again

340
00:11:45,040 --> 00:11:46,480
you have nested returns optimizing the

341
00:11:46,480 --> 00:11:48,240
pilots throw that out so at the end of

342
00:11:48,240 --> 00:11:49,920
the function we may see a jump instead

343
00:11:49,920 --> 00:11:52,320
of a return or a jump instead of a call

344
00:11:52,320 --> 00:11:54,639
we have to be able to detect that

345
00:11:54,639 --> 00:11:57,040
sometimes we have uh a call to a

346
00:11:57,040 --> 00:12:00,000
function but it's an it's a um terminal

347
00:12:00,000 --> 00:12:01,440
function

348
00:12:01,440 --> 00:12:03,600
it's like exit or a board

349
00:12:03,600 --> 00:12:04,959
so the code after that's never gonna be

350
00:12:04,959 --> 00:12:06,560
executed so should it be part of your

351
00:12:06,560 --> 00:12:08,240
function so we went through and we did

352
00:12:08,240 --> 00:12:09,920
all this type of analysis and

353
00:12:09,920 --> 00:12:12,719
determination

354
00:12:13,279 --> 00:12:15,440
let's see what else

355
00:12:15,440 --> 00:12:17,120
can get to the next one

356
00:12:17,120 --> 00:12:20,240
come on okay

357
00:12:21,120 --> 00:12:23,680
my slides are not changing here we go

358
00:12:23,680 --> 00:12:24,720
and then

359
00:12:24,720 --> 00:12:26,480
we go through say we're at the end of a

360
00:12:26,480 --> 00:12:28,399
function

361
00:12:28,399 --> 00:12:29,600
now we look at

362
00:12:29,600 --> 00:12:30,720
the next

363
00:12:30,720 --> 00:12:32,320
several block

364
00:12:32,320 --> 00:12:33,920
instructions and say are they part of a

365
00:12:33,920 --> 00:12:35,680
function we already know about

366
00:12:35,680 --> 00:12:38,000
are they not if they're not we put the

367
00:12:38,000 --> 00:12:40,399
start address of that next block into a

368
00:12:40,399 --> 00:12:42,160
table we'll come back and look at it and

369
00:12:42,160 --> 00:12:44,399
we move forward so we go through find

370
00:12:44,399 --> 00:12:46,480
all the targets of calls calculate them

371
00:12:46,480 --> 00:12:47,600
as

372
00:12:47,600 --> 00:12:50,160
functions

373
00:12:50,880 --> 00:12:53,839
find any any code or instructions op

374
00:12:53,839 --> 00:12:55,519
codes we didn't know about assembly

375
00:12:55,519 --> 00:12:56,720
instruction we didn't know about we go

376
00:12:56,720 --> 00:12:59,279
back analyze those

377
00:12:59,279 --> 00:13:00,880
every time we find a function that's a

378
00:13:00,880 --> 00:13:02,959
terminal function we say wait

379
00:13:02,959 --> 00:13:05,120
you know i'm calling these non-returning

380
00:13:05,120 --> 00:13:07,600
functions i call exit well if all my

381
00:13:07,600 --> 00:13:09,360
program does is prints things out and

382
00:13:09,360 --> 00:13:10,959
then calls exit

383
00:13:10,959 --> 00:13:14,560
my my function is non-terminating

384
00:13:14,560 --> 00:13:16,320
or is is so

385
00:13:16,320 --> 00:13:17,600
um

386
00:13:17,600 --> 00:13:19,680
it's jimmy terminal so if i call a

387
00:13:19,680 --> 00:13:21,920
terminal function exit and that's all i

388
00:13:21,920 --> 00:13:22,639
do

389
00:13:22,639 --> 00:13:24,560
my calling functions terminal so we go

390
00:13:24,560 --> 00:13:27,120
back and say oh who calls that

391
00:13:27,120 --> 00:13:28,800
because since it's a terminal function

392
00:13:28,800 --> 00:13:30,240
anything after a call to that doesn't

393
00:13:30,240 --> 00:13:33,519
exist so we reapply this we apply this

394
00:13:33,519 --> 00:13:35,360
it's fun it's a lot of code and i'm

395
00:13:35,360 --> 00:13:38,800
going faster again i apologize

396
00:13:38,800 --> 00:13:42,160
we've done all this type of analysis

397
00:13:42,160 --> 00:13:43,760
how do we do the terminal function calls

398
00:13:43,760 --> 00:13:48,000
well we know certain system calls in

399
00:13:48,000 --> 00:13:50,800
the gcc standard library

400
00:13:50,800 --> 00:13:51,920
are

401
00:13:51,920 --> 00:13:53,040
terminal

402
00:13:53,040 --> 00:13:54,800
so we hard code those in and then

403
00:13:54,800 --> 00:13:56,800
everything else like i said if all

404
00:13:56,800 --> 00:13:58,880
execution paths of a function call call

405
00:13:58,880 --> 00:14:00,639
one of these terminals the calling

406
00:14:00,639 --> 00:14:02,399
function is marked as terminal

407
00:14:02,399 --> 00:14:04,160
we throw that whole function that we

408
00:14:04,160 --> 00:14:06,639
analyzed back into the unknown space and

409
00:14:06,639 --> 00:14:08,320
reanalyze it

410
00:14:08,320 --> 00:14:11,279
to maybe see

411
00:14:11,760 --> 00:14:14,160
if we had combined too much because

412
00:14:14,160 --> 00:14:16,160
without doing this we would sometimes

413
00:14:16,160 --> 00:14:18,160
combine multiple functions together into

414
00:14:18,160 --> 00:14:19,600
a single one thinking it was a single

415
00:14:19,600 --> 00:14:20,399
one

416
00:14:20,399 --> 00:14:21,680
because we didn't realize the control

417
00:14:21,680 --> 00:14:24,319
flow stopped

418
00:14:26,240 --> 00:14:28,320
and then we clean this up

419
00:14:28,320 --> 00:14:29,440
um

420
00:14:29,440 --> 00:14:31,600
sometimes at the end of a function and

421
00:14:31,600 --> 00:14:33,519
after your turn or a call to a terminal

422
00:14:33,519 --> 00:14:35,600
there's a jump over a bunch of no-ops

423
00:14:35,600 --> 00:14:38,000
and all it is is basically a noaa so we

424
00:14:38,000 --> 00:14:40,240
clean that out we uh clean out some

425
00:14:40,240 --> 00:14:41,440
padding

426
00:14:41,440 --> 00:14:44,079
um

427
00:14:44,079 --> 00:14:46,079
we look for other padding we uh look for

428
00:14:46,079 --> 00:14:48,079
embedded data and mark it as embedded

429
00:14:48,079 --> 00:14:49,760
data we do all this we clean it up we

430
00:14:49,760 --> 00:14:52,000
say now we've got the functions

431
00:14:52,000 --> 00:14:54,160
so

432
00:14:55,279 --> 00:14:56,320
quick

433
00:14:56,320 --> 00:14:58,320
that's kind of what we do now how does

434
00:14:58,320 --> 00:15:00,639
it work

435
00:15:01,920 --> 00:15:03,760
we've you know we're we're measuring

436
00:15:03,760 --> 00:15:05,120
this executable we're going through this

437
00:15:05,120 --> 00:15:06,320
code and we're trying to say oh this is

438
00:15:06,320 --> 00:15:08,160
the start of a function this is the end

439
00:15:08,160 --> 00:15:09,920
of the function

440
00:15:09,920 --> 00:15:12,800
how well does it work this is kind of

441
00:15:12,800 --> 00:15:14,079
what i kind of want to get to here

442
00:15:14,079 --> 00:15:16,560
because i think this is the fun part

443
00:15:16,560 --> 00:15:20,399
um so we measure our true positives

444
00:15:20,399 --> 00:15:22,880
if if i said this byte or this

445
00:15:22,880 --> 00:15:24,480
instructions to start a function i'm

446
00:15:24,480 --> 00:15:25,760
right

447
00:15:25,760 --> 00:15:27,279
it's a true positive if i'm wrong it's a

448
00:15:27,279 --> 00:15:29,920
false positive if i completely missed a

449
00:15:29,920 --> 00:15:32,000
function didn't say anything about it

450
00:15:32,000 --> 00:15:34,800
it's a false negative

451
00:15:34,800 --> 00:15:36,560
so if a function starts when did i get

452
00:15:36,560 --> 00:15:38,240
the right location is this truly the

453
00:15:38,240 --> 00:15:40,639
start of a function

454
00:15:40,639 --> 00:15:42,079
and i have to deal with you know what if

455
00:15:42,079 --> 00:15:43,680
the symbol table had aliases or other

456
00:15:43,680 --> 00:15:45,440
things so we've dealt with that

457
00:15:45,440 --> 00:15:46,880
and function boundaries did i get the

458
00:15:46,880 --> 00:15:48,639
right length

459
00:15:48,639 --> 00:15:51,040
is this the last instruction what if i'm

460
00:15:51,040 --> 00:15:52,160
short

461
00:15:52,160 --> 00:15:53,440
is that okay

462
00:15:53,440 --> 00:15:55,040
one of the papers we looked at actually

463
00:15:55,040 --> 00:15:57,040
said yes that was okay

464
00:15:57,040 --> 00:15:58,160
why

465
00:15:58,160 --> 00:16:00,000
because some compilers like the intel

466
00:16:00,000 --> 00:16:02,240
compiler counts the padding bytes

467
00:16:02,240 --> 00:16:05,120
between functions as part of the

468
00:16:05,120 --> 00:16:07,360
preceding function other compilers like

469
00:16:07,360 --> 00:16:09,680
gcc and client do not

470
00:16:09,680 --> 00:16:11,759
so they said well it was a hack on the

471
00:16:11,759 --> 00:16:14,160
student's report they said oh well

472
00:16:14,160 --> 00:16:15,920
because compilers do things differently

473
00:16:15,920 --> 00:16:18,639
we'll just say if it's short it's okay

474
00:16:18,639 --> 00:16:20,839
and i don't like that hack

475
00:16:20,839 --> 00:16:23,360
um what if the symbol table shows zero

476
00:16:23,360 --> 00:16:25,199
length built-in functions

477
00:16:25,199 --> 00:16:27,120
don't have a specified length

478
00:16:27,120 --> 00:16:29,680
so we've never matched the length

479
00:16:29,680 --> 00:16:31,600
um so we have to think all about that

480
00:16:31,600 --> 00:16:33,519
when we're doing our analysis we have to

481
00:16:33,519 --> 00:16:37,040
think what is the true ground truth

482
00:16:37,040 --> 00:16:39,519
and for my point of view if we're really

483
00:16:39,519 --> 00:16:41,279
good at this as long as you have the

484
00:16:41,279 --> 00:16:43,199
function starts correct

485
00:16:43,199 --> 00:16:45,600
everything after that function start

486
00:16:45,600 --> 00:16:47,199
to the next function start could be part

487
00:16:47,199 --> 00:16:48,639
of the same function and you're you're

488
00:16:48,639 --> 00:16:50,560
good because all i really need to know

489
00:16:50,560 --> 00:16:52,800
is the start of the function and assume

490
00:16:52,800 --> 00:16:54,959
all the bytes afterwards until the next

491
00:16:54,959 --> 00:16:57,199
function started part of the same

492
00:16:57,199 --> 00:16:58,480
um

493
00:16:58,480 --> 00:17:01,440
if you have

494
00:17:01,600 --> 00:17:05,199
code that is dealing with obsousation

495
00:17:05,199 --> 00:17:06,880
they try to mess up the binary make it

496
00:17:06,880 --> 00:17:08,959
harder to reverse engineer

497
00:17:08,959 --> 00:17:10,559
the code in a single function will not

498
00:17:10,559 --> 00:17:12,640
be contiguous and things will break

499
00:17:12,640 --> 00:17:14,720
we're assuming we're not dealing with

500
00:17:14,720 --> 00:17:17,959
that problem

501
00:17:18,480 --> 00:17:20,319
so prior work that people did in this

502
00:17:20,319 --> 00:17:21,599
area

503
00:17:21,599 --> 00:17:23,919
and i'll explain this in a minute

504
00:17:23,919 --> 00:17:27,520
used terms precision recall and the f1

505
00:17:27,520 --> 00:17:30,320
value to measure how good we are

506
00:17:30,320 --> 00:17:32,000
precision basically says how correct are

507
00:17:32,000 --> 00:17:35,200
answers we reported a bunch of things 2b

508
00:17:35,200 --> 00:17:36,960
function starts

509
00:17:36,960 --> 00:17:39,039
true positives were right false positive

510
00:17:39,039 --> 00:17:41,120
where we're wrong so true positive the

511
00:17:41,120 --> 00:17:43,440
percentage of things we reported so true

512
00:17:43,440 --> 00:17:45,919
positive that are right true positive

513
00:17:45,919 --> 00:17:47,440
divided by the sum of everything

514
00:17:47,440 --> 00:17:49,280
reported

515
00:17:49,280 --> 00:17:50,960
high precision means you have a low

516
00:17:50,960 --> 00:17:53,280
false positive rate

517
00:17:53,280 --> 00:17:55,520
recall how many of the functions did we

518
00:17:55,520 --> 00:17:57,520
actually even talk about

519
00:17:57,520 --> 00:17:59,280
so our true positive divided by sum of

520
00:17:59,280 --> 00:18:01,360
true positive and false negatives

521
00:18:01,360 --> 00:18:02,799
which is the total number this is the

522
00:18:02,799 --> 00:18:05,919
total number of functions n

523
00:18:05,919 --> 00:18:08,240
high recall means you have a low false

524
00:18:08,240 --> 00:18:11,120
negative rate and we want low pres high

525
00:18:11,120 --> 00:18:14,240
low false positive low false negatives

526
00:18:14,240 --> 00:18:16,320
f1 is now a weighted average of

527
00:18:16,320 --> 00:18:19,120
precision to recall

528
00:18:19,120 --> 00:18:21,120
so two times p times r divided by p plus

529
00:18:21,120 --> 00:18:22,320
r

530
00:18:22,320 --> 00:18:23,600
accuracy and i'm going to come to this

531
00:18:23,600 --> 00:18:24,720
in a minute

532
00:18:24,720 --> 00:18:25,840
is what a lot of people say well how

533
00:18:25,840 --> 00:18:28,160
accurate are you accuracy actually means

534
00:18:28,160 --> 00:18:30,240
something mathematically different than

535
00:18:30,240 --> 00:18:31,679
these and i'll come to like i said i'll

536
00:18:31,679 --> 00:18:34,080
come to that minute

537
00:18:34,080 --> 00:18:35,840
i'm also going to hint at this i'm going

538
00:18:35,840 --> 00:18:37,520
to come to better

539
00:18:37,520 --> 00:18:39,280
we're doing percentages we're talking

540
00:18:39,280 --> 00:18:41,039
about and a lot of the tools do this

541
00:18:41,039 --> 00:18:43,840
they say hey i've tested 5 000 binaries

542
00:18:43,840 --> 00:18:46,080
here's my i got 98

543
00:18:46,080 --> 00:18:47,600
f1

544
00:18:47,600 --> 00:18:49,360
that misses the big picture and so i

545
00:18:49,360 --> 00:18:52,000
want to talk about that

546
00:18:52,000 --> 00:18:53,919
so let's first

547
00:18:53,919 --> 00:18:55,600
how accurate is accuracy let's talk

548
00:18:55,600 --> 00:18:57,039
about this so we have something we call

549
00:18:57,039 --> 00:19:00,000
a confusion matrix

550
00:19:00,000 --> 00:19:03,760
the if these the columns specify reality

551
00:19:03,760 --> 00:19:06,960
so is something positive or negative

552
00:19:06,960 --> 00:19:11,480
so if i'm trying to detect something

553
00:19:11,760 --> 00:19:15,039
a vulnerability a an attack in network

554
00:19:15,039 --> 00:19:17,600
traffic a function boundary

555
00:19:17,600 --> 00:19:18,559
um

556
00:19:18,559 --> 00:19:20,559
true positive means that's really what

557
00:19:20,559 --> 00:19:22,640
that is that's one of these true

558
00:19:22,640 --> 00:19:25,679
negative means it's not one of these

559
00:19:25,679 --> 00:19:28,480
um so negatives here predictive positive

560
00:19:28,480 --> 00:19:30,720
is where i'm saying yes i think this is

561
00:19:30,720 --> 00:19:32,160
a function boundary i think this is an

562
00:19:32,160 --> 00:19:33,840
attack if i get it right that's the true

563
00:19:33,840 --> 00:19:35,200
positive i get it wrong it's a false

564
00:19:35,200 --> 00:19:36,880
positive i said this is a function

565
00:19:36,880 --> 00:19:38,799
boundary i was wrong type one error this

566
00:19:38,799 --> 00:19:40,640
is an attack it's not this is a

567
00:19:40,640 --> 00:19:43,280
vulnerability it's not you have covet if

568
00:19:43,280 --> 00:19:45,679
i'm right true if i'm wrong and i said

569
00:19:45,679 --> 00:19:47,679
judd covet false

570
00:19:47,679 --> 00:19:49,600
predicted negative i said

571
00:19:49,600 --> 00:19:50,799
no

572
00:19:50,799 --> 00:19:53,280
and it could be i said nothing

573
00:19:53,280 --> 00:19:55,600
in most of our detection tools you know

574
00:19:55,600 --> 00:19:56,960
if i'm looking at network packets i'll

575
00:19:56,960 --> 00:19:58,480
say here's the ones i think are attacks

576
00:19:58,480 --> 00:20:00,080
i'll ignore the others

577
00:20:00,080 --> 00:20:02,400
function boundary i list every address i

578
00:20:02,400 --> 00:20:04,559
think as a function start i don't say

579
00:20:04,559 --> 00:20:06,240
anything about the other ones so let's

580
00:20:06,240 --> 00:20:07,919
assume those are negatives

581
00:20:07,919 --> 00:20:10,559
if i'm right it's a true negative

582
00:20:10,559 --> 00:20:12,559
if i'm wrong i missed one a missed a

583
00:20:12,559 --> 00:20:14,159
function boundary it's false negative

584
00:20:14,159 --> 00:20:15,919
okay

585
00:20:15,919 --> 00:20:17,760
so consider this

586
00:20:17,760 --> 00:20:20,080
let's assume there are rare instances of

587
00:20:20,080 --> 00:20:21,280
what we're looking for function

588
00:20:21,280 --> 00:20:22,400
boundaries right

589
00:20:22,400 --> 00:20:23,919
i've got you know

590
00:20:23,919 --> 00:20:26,880
100 000 assembly instructions and 100

591
00:20:26,880 --> 00:20:28,000
functions

592
00:20:28,000 --> 00:20:30,640
most of them are going to be

593
00:20:30,640 --> 00:20:33,440
not function starts

594
00:20:33,440 --> 00:20:35,280
so maybe in this case i have 10 things

595
00:20:35,280 --> 00:20:37,200
i'm a thousand things i'm looking at so

596
00:20:37,200 --> 00:20:39,440
a thousand instructions 10 function

597
00:20:39,440 --> 00:20:45,039
starts and 999 starts so this is reality

598
00:20:45,039 --> 00:20:46,320
all right

599
00:20:46,320 --> 00:20:49,840
let's assume my tool

600
00:20:49,919 --> 00:20:51,840
misses every single thing i'm looking

601
00:20:51,840 --> 00:20:53,760
for it says there are no function

602
00:20:53,760 --> 00:20:55,039
boundaries

603
00:20:55,039 --> 00:20:57,120
so i say everything's at zero

604
00:20:57,120 --> 00:21:02,199
i've got ten the ten real ones wrong

605
00:21:02,400 --> 00:21:05,360
and i've got the 990 ones that weren't

606
00:21:05,360 --> 00:21:08,400
function boundaries correct

607
00:21:08,400 --> 00:21:11,120
accuracy says accuracy is basically

608
00:21:11,120 --> 00:21:12,400
saying

609
00:21:12,400 --> 00:21:15,039
how well did i do in

610
00:21:15,039 --> 00:21:17,760
this diagonal

611
00:21:17,760 --> 00:21:21,120
well in this diagonal

612
00:21:21,440 --> 00:21:22,400
um

613
00:21:22,400 --> 00:21:24,000
i did pretty well

614
00:21:24,000 --> 00:21:27,760
i got 990 out of a thousand i was 99

615
00:21:27,760 --> 00:21:29,679
active my tool that did absolutely

616
00:21:29,679 --> 00:21:33,039
nothing right was 99 accurate and 100

617
00:21:33,039 --> 00:21:35,120
useful useless

618
00:21:35,120 --> 00:21:36,960
or zero percent useful

619
00:21:36,960 --> 00:21:38,480
and this is i've seen on several papers

620
00:21:38,480 --> 00:21:40,400
people talk about oh i'm accurate well

621
00:21:40,400 --> 00:21:44,760
mathematically accuracy means

622
00:21:45,120 --> 00:21:47,520
true positives plus true negatives

623
00:21:47,520 --> 00:21:49,840
divided by totals and

624
00:21:49,840 --> 00:21:51,120
if you have a low prevalence of what

625
00:21:51,120 --> 00:21:52,720
you're searching for accuracy is the

626
00:21:52,720 --> 00:21:54,159
wrong thing to report and you should

627
00:21:54,159 --> 00:21:56,799
never have it in your papers

628
00:21:56,799 --> 00:21:58,080
and i've seen it in some of these papers

629
00:21:58,080 --> 00:22:00,000
function boundary by 98 actions well

630
00:22:00,000 --> 00:22:01,679
what's that mean

631
00:22:01,679 --> 00:22:04,000
let's look at another one

632
00:22:04,000 --> 00:22:06,559
if this is precision

633
00:22:06,559 --> 00:22:08,720
precision says how many of these are

634
00:22:08,720 --> 00:22:10,720
right how many predicted positive right

635
00:22:10,720 --> 00:22:12,159
well we predicted nothing positive so

636
00:22:12,159 --> 00:22:13,919
we're zero

637
00:22:13,919 --> 00:22:15,280
recall

638
00:22:15,280 --> 00:22:17,679
says how many

639
00:22:17,679 --> 00:22:19,440
of the actual function boundaries did we

640
00:22:19,440 --> 00:22:22,080
find we found zero of them

641
00:22:22,080 --> 00:22:23,520
so our f one the weighted average is

642
00:22:23,520 --> 00:22:25,760
zero and zero is zero so we're hot

643
00:22:25,760 --> 00:22:27,440
accurate but zero percent precision

644
00:22:27,440 --> 00:22:30,240
recall in f1

645
00:22:31,200 --> 00:22:32,640
here's a different one let's say hey we

646
00:22:32,640 --> 00:22:33,919
split it up three different ways we

647
00:22:33,919 --> 00:22:35,280
predicted some things we found some

648
00:22:35,280 --> 00:22:36,799
things we predict some things that were

649
00:22:36,799 --> 00:22:40,480
wrong and we missed some

650
00:22:40,480 --> 00:22:41,760
precision

651
00:22:41,760 --> 00:22:43,760
five out of the ten reported is fifty

652
00:22:43,760 --> 00:22:45,200
percent

653
00:22:45,200 --> 00:22:46,720
recall

654
00:22:46,720 --> 00:22:48,559
we found five out of the ten real ones

655
00:22:48,559 --> 00:22:50,320
that was fifty percent so f1 is fifty

656
00:22:50,320 --> 00:22:53,120
percent but i'm still 99 accurate i got

657
00:22:53,120 --> 00:22:56,799
990 out of a thousand right

658
00:22:57,039 --> 00:22:58,720
so what i don't want to see in these

659
00:22:58,720 --> 00:23:00,559
things is people reporting about the

660
00:23:00,559 --> 00:23:02,559
negatives if the negatives overwhelm the

661
00:23:02,559 --> 00:23:04,240
data set throw them out analyze the

662
00:23:04,240 --> 00:23:06,240
other three parts those are the errors

663
00:23:06,240 --> 00:23:08,080
that are relevant so when we look at

664
00:23:08,080 --> 00:23:09,760
this research that and the data i'm

665
00:23:09,760 --> 00:23:10,960
going to be showing you that's what i'm

666
00:23:10,960 --> 00:23:13,840
talking about this relevant part

667
00:23:13,840 --> 00:23:15,440
how much of these things i actually

668
00:23:15,440 --> 00:23:17,120
found

669
00:23:17,120 --> 00:23:19,039
and how much you know what i said i

670
00:23:19,039 --> 00:23:21,840
found how much of that was

671
00:23:21,840 --> 00:23:23,679
all right so how do we do this

672
00:23:23,679 --> 00:23:25,039
sorry that was my

673
00:23:25,039 --> 00:23:27,679
teacher aside there

674
00:23:27,679 --> 00:23:29,679
following models of prior work

675
00:23:29,679 --> 00:23:31,840
we took ben utils core utils and fine

676
00:23:31,840 --> 00:23:34,720
utils there's 129 unique programs

677
00:23:34,720 --> 00:23:37,440
we took spec cp oops this wasn't updated

678
00:23:37,440 --> 00:23:39,120
but there's basically

679
00:23:39,120 --> 00:23:41,679
60 so much unique programs

680
00:23:41,679 --> 00:23:43,520
in each of these data sets

681
00:23:43,520 --> 00:23:45,760
they include some fortran code include c

682
00:23:45,760 --> 00:23:48,640
and c plus with some exception handling

683
00:23:48,640 --> 00:23:50,640
um some require position independent

684
00:23:50,640 --> 00:23:52,400
code so that was interesting

685
00:23:52,400 --> 00:23:54,799
we compiled everything with the gcc or

686
00:23:54,799 --> 00:23:57,600
g4 train compiler clang

687
00:23:57,600 --> 00:23:58,559
and

688
00:23:58,559 --> 00:24:00,960
the intel compiler we compiled them

689
00:24:00,960 --> 00:24:03,679
using optimization options zero

690
00:24:03,679 --> 00:24:05,919
oh zero one two and three

691
00:24:05,919 --> 00:24:08,159
um we also compiled the chrome browser

692
00:24:08,159 --> 00:24:10,000
because it's big

693
00:24:10,000 --> 00:24:13,520
uh just using the default

694
00:24:14,320 --> 00:24:15,840
how do we know if we're right we looked

695
00:24:15,840 --> 00:24:17,279
at the symbol table of an unstripped

696
00:24:17,279 --> 00:24:19,520
binary so i should say we compiled these

697
00:24:19,520 --> 00:24:22,159
on strip we extracted out the symbol

698
00:24:22,159 --> 00:24:25,600
table got all the right data then

699
00:24:25,600 --> 00:24:27,679
we stripped all the data and ran our

700
00:24:27,679 --> 00:24:30,480
tools on the strip data

701
00:24:30,480 --> 00:24:31,919
are there some hidden symbols in the

702
00:24:31,919 --> 00:24:33,679
text section that we had to look for

703
00:24:33,679 --> 00:24:35,679
listed functions in text sections

704
00:24:35,679 --> 00:24:37,919
removed all duplicates

705
00:24:37,919 --> 00:24:39,679
we noticed some functions had multiple

706
00:24:39,679 --> 00:24:41,360
entries for now we count those as

707
00:24:41,360 --> 00:24:44,240
separate functions

708
00:24:44,320 --> 00:24:46,400
then we ran our results

709
00:24:46,400 --> 00:24:47,279
so

710
00:24:47,279 --> 00:24:49,120
summarizing what we did

711
00:24:49,120 --> 00:24:51,120
with jima

712
00:24:51,120 --> 00:24:52,720
using this

713
00:24:52,720 --> 00:24:57,279
with gcc we had an f1 value of 99.96

714
00:24:57,279 --> 00:24:59,760
so basically we looked at 1

715
00:24:59,760 --> 00:25:01,760
files

716
00:25:01,760 --> 00:25:04,799
they contained 1.66 million different

717
00:25:04,799 --> 00:25:07,760
functions across both 32 and 64-bit with

718
00:25:07,760 --> 00:25:10,240
all the optimization options

719
00:25:10,240 --> 00:25:14,240
out of the 1.66 million functions

720
00:25:14,240 --> 00:25:16,159
we had no false negatives we found every

721
00:25:16,159 --> 00:25:20,000
one and we reported 150 incorrect

722
00:25:20,000 --> 00:25:22,799
so 150 false positives this actually

723
00:25:22,799 --> 00:25:24,400
happened in some of the spec cpu

724
00:25:24,400 --> 00:25:26,480
benchmarks where

725
00:25:26,480 --> 00:25:29,120
in testing spec is for performance

726
00:25:29,120 --> 00:25:31,279
testing they take standard tools and

727
00:25:31,279 --> 00:25:33,600
modify them to do the test one thing

728
00:25:33,600 --> 00:25:35,840
they do is they

729
00:25:35,840 --> 00:25:37,679
jump out early out of functions or

730
00:25:37,679 --> 00:25:39,200
comment out code or jump out early

731
00:25:39,200 --> 00:25:41,360
inspect 2006 they jumped out early

732
00:25:41,360 --> 00:25:43,120
before it did things like printouts and

733
00:25:43,120 --> 00:25:44,400
other stuff that they didn't want to

734
00:25:44,400 --> 00:25:46,240
actually do so there was technically

735
00:25:46,240 --> 00:25:48,240
some unreachable code

736
00:25:48,240 --> 00:25:50,080
our tool actually detected

737
00:25:50,080 --> 00:25:52,240
and and said hey that function never

738
00:25:52,240 --> 00:25:53,600
calls this it must be part of another

739
00:25:53,600 --> 00:25:55,039
function when actually it was just

740
00:25:55,039 --> 00:25:56,960
unreachable code the compiler optimizer

741
00:25:56,960 --> 00:25:59,039
compiler didn't throw away

742
00:25:59,039 --> 00:26:00,159
um

743
00:26:00,159 --> 00:26:02,559
we also had uh

744
00:26:02,559 --> 00:26:04,559
some functions that were too long

745
00:26:04,559 --> 00:26:06,880
uh in several the compilations there was

746
00:26:06,880 --> 00:26:08,240
extra code

747
00:26:08,240 --> 00:26:10,400
uh after

748
00:26:10,400 --> 00:26:12,720
um

749
00:26:12,960 --> 00:26:15,039
the function actually terminated that we

750
00:26:15,039 --> 00:26:17,279
couldn't to tell if it was a

751
00:26:17,279 --> 00:26:18,799
it was just extraneous code but we

752
00:26:18,799 --> 00:26:20,320
detected it

753
00:26:20,320 --> 00:26:22,640
um but again half a percent so not too

754
00:26:22,640 --> 00:26:25,840
bad with clang we did a little worse

755
00:26:25,840 --> 00:26:28,799
um and with icc intel does such weird

756
00:26:28,799 --> 00:26:30,480
stuff we did a little worse but not too

757
00:26:30,480 --> 00:26:33,679
bad now these are the averages over the

758
00:26:33,679 --> 00:26:36,799
one thousand five hundred some odd files

759
00:26:36,799 --> 00:26:39,120
let's look at what other people did

760
00:26:39,120 --> 00:26:41,200
so tiffany balon all did a machine

761
00:26:41,200 --> 00:26:43,520
learning based approach shin it all did

762
00:26:43,520 --> 00:26:45,760
a neural network approach undressy at

763
00:26:45,760 --> 00:26:47,520
all did a graph theoretic approach with

764
00:26:47,520 --> 00:26:49,840
the tool called nucleus we compared ours

765
00:26:49,840 --> 00:26:51,840
to

766
00:26:51,840 --> 00:26:52,960
um

767
00:26:52,960 --> 00:26:56,640
ida pro well-known tool for doing this

768
00:26:56,640 --> 00:26:58,640
we did this actually the versions i'm

769
00:26:58,640 --> 00:27:00,320
showing today we didn't test with the

770
00:27:00,320 --> 00:27:01,520
free version we did the commercial

771
00:27:01,520 --> 00:27:04,400
version nsa's giger is a free tool that

772
00:27:04,400 --> 00:27:06,159
does a lot of things idapro did we test

773
00:27:06,159 --> 00:27:08,240
it with that

774
00:27:08,240 --> 00:27:10,240
but what did we find well if we look at

775
00:27:10,240 --> 00:27:12,480
things other people did like andressi or

776
00:27:12,480 --> 00:27:14,799
bao they report things this way

777
00:27:14,799 --> 00:27:16,480
they say oh here's the different tools

778
00:27:16,480 --> 00:27:19,039
we looked at ida probe bap dinens

779
00:27:19,039 --> 00:27:22,399
nuclear we looked at 32-bit or 64-bit

780
00:27:22,399 --> 00:27:24,320
different compilers and we gave our

781
00:27:24,320 --> 00:27:25,360
numbers

782
00:27:25,360 --> 00:27:28,159
a precision recall

783
00:27:28,159 --> 00:27:30,720
here precision recall

784
00:27:30,720 --> 00:27:32,799
so they gave their results using these

785
00:27:32,799 --> 00:27:34,880
raw numbers and this is what you

786
00:27:34,880 --> 00:27:37,120
normally see in a paper i don't like

787
00:27:37,120 --> 00:27:39,679
this yeah i can do this too and i can

788
00:27:39,679 --> 00:27:42,080
say hey here's the f1 values

789
00:27:42,080 --> 00:27:45,360
you know and 99.96 is better than 99.27

790
00:27:45,360 --> 00:27:47,840
we win right 98.81 is better than all

791
00:27:47,840 --> 00:27:49,840
these 70s we win okay that one we do win

792
00:27:49,840 --> 00:27:51,360
on

793
00:27:51,360 --> 00:27:54,719
but what does it really look like

794
00:27:54,880 --> 00:27:56,320
you know we're talking about the mean

795
00:27:56,320 --> 00:27:58,080
the average what does the mean mean i

796
00:27:58,080 --> 00:28:00,480
use the same data set for all tools and

797
00:28:00,480 --> 00:28:02,240
my numbers are bigger and better than

798
00:28:02,240 --> 00:28:04,559
their numbers i win right

799
00:28:04,559 --> 00:28:06,000
that's what i often see in a lot of

800
00:28:06,000 --> 00:28:07,919
these publications and this is one thing

801
00:28:07,919 --> 00:28:08,799
i'm

802
00:28:08,799 --> 00:28:11,919
i'm railing on just a little here

803
00:28:11,919 --> 00:28:14,080
because are you always better

804
00:28:14,080 --> 00:28:17,279
if not where and why right let's let's

805
00:28:17,279 --> 00:28:20,480
look at the average income

806
00:28:20,480 --> 00:28:22,240
in idaho

807
00:28:22,240 --> 00:28:23,600
compared to the average income in new

808
00:28:23,600 --> 00:28:25,919
york city

809
00:28:25,919 --> 00:28:27,840
or maybe let's pick universities average

810
00:28:27,840 --> 00:28:29,919
income university idaho a faculty versus

811
00:28:29,919 --> 00:28:32,240
average income of faculty at purdue

812
00:28:32,240 --> 00:28:34,399
purdue's gonna have a higher number

813
00:28:34,399 --> 00:28:36,720
but maybe we add as an adjunct to our

814
00:28:36,720 --> 00:28:39,039
university elon musk

815
00:28:39,039 --> 00:28:40,799
now when we look at the average suddenly

816
00:28:40,799 --> 00:28:42,240
we win

817
00:28:42,240 --> 00:28:44,559
because one person drives all the data

818
00:28:44,559 --> 00:28:45,520
up

819
00:28:45,520 --> 00:28:47,520
the average for all of us is much bigger

820
00:28:47,520 --> 00:28:48,640
than the average for purdue because he

821
00:28:48,640 --> 00:28:51,360
almost beats everybody

822
00:28:51,360 --> 00:28:53,679
i want to see the results so i say this

823
00:28:53,679 --> 00:28:56,320
when i'm talking to groups of students

824
00:28:56,320 --> 00:28:58,320
you have to do better than just show me

825
00:28:58,320 --> 00:29:00,080
these numbers you know are there a few

826
00:29:00,080 --> 00:29:02,000
instances where i'm a lot better do they

827
00:29:02,000 --> 00:29:04,000
skew the means

828
00:29:04,000 --> 00:29:06,480
so i we actually

829
00:29:06,480 --> 00:29:09,120
did a scatter plot of the data

830
00:29:09,120 --> 00:29:11,200
we we dealt three columns of data one

831
00:29:11,200 --> 00:29:14,080
for gcc one for icc one for el uh llvm

832
00:29:14,080 --> 00:29:16,159
is clan compiler and we looked at ida

833
00:29:16,159 --> 00:29:18,159
pro f1 for function starts and plotted

834
00:29:18,159 --> 00:29:20,399
that

835
00:29:20,399 --> 00:29:23,120
and they have a number right

836
00:29:23,120 --> 00:29:25,760
there let's go back to their number for

837
00:29:25,760 --> 00:29:27,320
gcc was

838
00:29:27,320 --> 00:29:29,039
92.73

839
00:29:29,039 --> 00:29:32,159
or here actually look at this icc 72.14

840
00:29:32,159 --> 00:29:36,399
nucleus was close giger was close

841
00:29:37,520 --> 00:29:40,320
but this is what the data looks like and

842
00:29:40,320 --> 00:29:42,000
those just from zero to 100 percent so

843
00:29:42,000 --> 00:29:43,840
they're all over the place

844
00:29:43,840 --> 00:29:45,919
with gcc the blue being much little

845
00:29:45,919 --> 00:29:46,880
higher

846
00:29:46,880 --> 00:29:49,600
we look at nucleus

847
00:29:49,600 --> 00:29:52,000
nucleus is struggling on icc

848
00:29:52,000 --> 00:29:53,919
in clusters of this we'll come back to

849
00:29:53,919 --> 00:29:55,919
that in a minute and doing pretty well

850
00:29:55,919 --> 00:29:57,440
on others but again some places they're

851
00:29:57,440 --> 00:30:00,240
having some issues

852
00:30:00,240 --> 00:30:01,919
ghidra now let's look at this versus

853
00:30:01,919 --> 00:30:04,080
this who's better

854
00:30:04,080 --> 00:30:06,399
or who's better here versus this one the

855
00:30:06,399 --> 00:30:07,679
data's all over the place and you can

856
00:30:07,679 --> 00:30:09,440
give me a raw number

857
00:30:09,440 --> 00:30:11,760
but i don't know who's really winning

858
00:30:11,760 --> 00:30:14,799
now i know who's really winning it's us

859
00:30:14,799 --> 00:30:16,880
because this is our uh

860
00:30:16,880 --> 00:30:18,320
oops this wasn't zoomed in here's our

861
00:30:18,320 --> 00:30:21,200
zoomed in one so this is um from zero to

862
00:30:21,200 --> 00:30:23,600
100 percent our tool all three there is

863
00:30:23,600 --> 00:30:25,200
blue underneath the green underneath the

864
00:30:25,200 --> 00:30:27,120
red so yeah we obviously win because

865
00:30:27,120 --> 00:30:30,399
we're not all scattered like this

866
00:30:30,399 --> 00:30:33,279
if i even zoom in from 70 up i notice a

867
00:30:33,279 --> 00:30:35,520
few places we have problems

868
00:30:35,520 --> 00:30:38,480
this was a decompilation error by obj

869
00:30:38,480 --> 00:30:40,640
dump

870
00:30:40,640 --> 00:30:41,919
i don't remember what this one was so

871
00:30:41,919 --> 00:30:44,960
some of these i can look at

872
00:30:46,720 --> 00:30:49,440
we can also look at it a different way

873
00:30:49,440 --> 00:30:52,080
i can say how well do we do overall so

874
00:30:52,080 --> 00:30:53,120
here

875
00:30:53,120 --> 00:30:56,399
this is a histogram i'm bending it

876
00:30:56,399 --> 00:30:57,840
what percentage of binary where the

877
00:30:57,840 --> 00:30:59,840
tool's f1 values for function starts

878
00:30:59,840 --> 00:31:02,399
fits the x-axis so how many of the

879
00:31:02,399 --> 00:31:04,960
f-1 values are zero to nine percent 10

880
00:31:04,960 --> 00:31:06,159
to 19

881
00:31:06,159 --> 00:31:09,600
up for each of the five 1 500 binaries

882
00:31:09,600 --> 00:31:11,519
this one actually is for a data set

883
00:31:11,519 --> 00:31:13,360
where we did it 97 000 different

884
00:31:13,360 --> 00:31:16,240
binaries it's one i'm still working on

885
00:31:16,240 --> 00:31:18,640
so 80 of our stuff is up in this hundred

886
00:31:18,640 --> 00:31:21,360
percent range for jima

887
00:31:21,360 --> 00:31:23,440
where ida pro has ten percent of their

888
00:31:23,440 --> 00:31:25,679
stuff in the hundred percent range

889
00:31:25,679 --> 00:31:28,080
guide nucleus have nothing

890
00:31:28,080 --> 00:31:29,760
in the hundred percent range but they're

891
00:31:29,760 --> 00:31:32,399
in the 90 to 99 range they're do that's

892
00:31:32,399 --> 00:31:34,159
where they're doing pretty well

893
00:31:34,159 --> 00:31:36,799
so if i zoom in on this a little

894
00:31:36,799 --> 00:31:38,799
from 96 to 100 percent again we're up

895
00:31:38,799 --> 00:31:40,960
here at 100

896
00:31:40,960 --> 00:31:42,799
then things where we're 99

897
00:31:42,799 --> 00:31:45,279
f1 value

898
00:31:45,279 --> 00:31:45,840
giger 98.97

899
00:31:45,840 --> 00:31:48,399
pretty well here and then drops down

900
00:31:48,399 --> 00:31:52,240
nucleus uh is a little slower

901
00:31:52,240 --> 00:31:54,480
um so it's another way of visualizing

902
00:31:54,480 --> 00:31:55,840
the data looking at our results and say

903
00:31:55,840 --> 00:31:56,880
hey

904
00:31:56,880 --> 00:32:00,720
did we do well did we win

905
00:32:00,720 --> 00:32:02,640
more results chrome

906
00:32:02,640 --> 00:32:05,679
default option there's 353 000 functions

907
00:32:05,679 --> 00:32:08,480
in chrome it's a 90 megabyte file

908
00:32:08,480 --> 00:32:10,159
we had eight false negative function

909
00:32:10,159 --> 00:32:12,080
starts one false positive function start

910
00:32:12,080 --> 00:32:14,000
no false function n so we did pretty

911
00:32:14,000 --> 00:32:16,000
well in that one

912
00:32:16,000 --> 00:32:18,320
um

913
00:32:18,399 --> 00:32:20,799
take this a little further

914
00:32:20,799 --> 00:32:21,679
again

915
00:32:21,679 --> 00:32:23,519
average we're talking average averages

916
00:32:23,519 --> 00:32:24,960
are just a single value you can do

917
00:32:24,960 --> 00:32:28,080
better than that i just showed you that

918
00:32:28,080 --> 00:32:30,080
i want people to visualize the data

919
00:32:30,080 --> 00:32:32,240
report in the graphs the visualization

920
00:32:32,240 --> 00:32:34,640
in the report papers visualization data

921
00:32:34,640 --> 00:32:37,039
again we normally see these tables

922
00:32:37,039 --> 00:32:38,880
i want to see charts

923
00:32:38,880 --> 00:32:40,399
you know here's histograms that combine

924
00:32:40,399 --> 00:32:42,880
data sets where things fit in

925
00:32:42,880 --> 00:32:44,960
or the scatter plots

926
00:32:44,960 --> 00:32:46,480
now here's one i want to talk about for

927
00:32:46,480 --> 00:32:47,919
a second because this

928
00:32:47,919 --> 00:32:49,519
when we were doing our research was

929
00:32:49,519 --> 00:32:51,919
really interesting

930
00:32:51,919 --> 00:32:53,440
so right away we saw there's some

931
00:32:53,440 --> 00:32:54,840
problems with the spec

932
00:32:54,840 --> 00:32:57,360
benchmarks the unix benchmarks were good

933
00:32:57,360 --> 00:32:58,960
except there was something weird here so

934
00:32:58,960 --> 00:33:02,640
we decided let's dig in

935
00:33:02,640 --> 00:33:04,960
these are interesting the places where

936
00:33:04,960 --> 00:33:07,679
we're not successful are interesting so

937
00:33:07,679 --> 00:33:10,480
we looked at those

938
00:33:10,480 --> 00:33:12,480
what we did is we grouped it by

939
00:33:12,480 --> 00:33:14,799
optimization level 0.10203 to see if

940
00:33:14,799 --> 00:33:15,840
there was something there and sure

941
00:33:15,840 --> 00:33:18,720
enough in the 01 optimization

942
00:33:18,720 --> 00:33:22,480
is where we're seeing some issues

943
00:33:23,440 --> 00:33:25,200
that is interesting and now notice this

944
00:33:25,200 --> 00:33:28,399
is 80 to 100 i'm zooming in

945
00:33:28,399 --> 00:33:30,880
so then i thought this was sorted by

946
00:33:30,880 --> 00:33:32,960
name then my optimization level name is

947
00:33:32,960 --> 00:33:35,120
not useful

948
00:33:35,120 --> 00:33:37,039
i actually in excel when you plot that

949
00:33:37,039 --> 00:33:38,640
you can click on this and it highlights

950
00:33:38,640 --> 00:33:40,480
and tells you hey this is the

951
00:33:40,480 --> 00:33:42,000
row that it is you can look at that and

952
00:33:42,000 --> 00:33:44,240
find out which binary i started noticing

953
00:33:44,240 --> 00:33:45,679
and looking at these some of these were

954
00:33:45,679 --> 00:33:47,519
smaller binaries

955
00:33:47,519 --> 00:33:49,840
so we sorted by size

956
00:33:49,840 --> 00:33:52,720
and notice the the

957
00:33:52,720 --> 00:33:54,880
loops here especially this one

958
00:33:54,880 --> 00:33:56,080
well what happens here is there's

959
00:33:56,080 --> 00:33:58,240
certain things we fail on

960
00:33:58,240 --> 00:34:00,240
and if this one if i'm failing on 20

961
00:34:00,240 --> 00:34:02,399
functions out of 100

962
00:34:02,399 --> 00:34:04,799
or you know out of 110 i'm down here in

963
00:34:04,799 --> 00:34:06,559
the 80 some odd percent

964
00:34:06,559 --> 00:34:08,000
f1 values

965
00:34:08,000 --> 00:34:10,719
if i'm failing on 20 out of 10 000 i'm

966
00:34:10,719 --> 00:34:12,239
up here in the 90s

967
00:34:12,239 --> 00:34:14,959
99s

968
00:34:15,119 --> 00:34:18,480
we looked at this data and found out

969
00:34:18,480 --> 00:34:20,719
all of this was from the unix utilities

970
00:34:20,719 --> 00:34:21,918
data set

971
00:34:21,918 --> 00:34:24,239
all of the utilities in that data set

972
00:34:24,239 --> 00:34:26,480
were using the same file that they were

973
00:34:26,480 --> 00:34:27,839
including

974
00:34:27,839 --> 00:34:30,320
so even though we had 129 files compiled

975
00:34:30,320 --> 00:34:33,040
16 different ways from sunday

976
00:34:33,040 --> 00:34:34,960
they actually had the same base code

977
00:34:34,960 --> 00:34:37,199
that was compiled the same way and in

978
00:34:37,199 --> 00:34:39,760
the l1 optimization option our tool was

979
00:34:39,760 --> 00:34:42,079
not recognizing that the function starts

980
00:34:42,079 --> 00:34:44,639
correctly for the way this was compiled

981
00:34:44,639 --> 00:34:47,119
and the fact that certain of these tools

982
00:34:47,119 --> 00:34:50,159
were really small it drove the data

983
00:34:50,159 --> 00:34:51,760
so we found out what the error was fixed

984
00:34:51,760 --> 00:34:54,480
this and ran this to the top

985
00:34:54,480 --> 00:34:56,000
but our numbers were still actually like

986
00:34:56,000 --> 00:34:57,839
98 we thought we were winning we were

987
00:34:57,839 --> 00:34:59,839
doing well until we visualized the date

988
00:34:59,839 --> 00:35:02,560
and realized we were winning some places

989
00:35:02,560 --> 00:35:04,320
and losing in others

990
00:35:04,320 --> 00:35:06,640
so we went we fixed we did the analysis

991
00:35:06,640 --> 00:35:08,320
we looked at it we visualized it we

992
00:35:08,320 --> 00:35:11,440
fixed it and now we're at 99.8 percent

993
00:35:11,440 --> 00:35:14,240
f1 values instead of 98

994
00:35:14,240 --> 00:35:17,200
98 still sounded good but i like 99.9 or

995
00:35:17,200 --> 00:35:18,560
eight better

996
00:35:18,560 --> 00:35:19,599
um

997
00:35:19,599 --> 00:35:22,960
so i'm just i i encourage my students

998
00:35:22,960 --> 00:35:24,720
encourage people and and when you're

999
00:35:24,720 --> 00:35:26,400
graphing this and showing them papers to

1000
00:35:26,400 --> 00:35:28,240
show this stuff

1001
00:35:28,240 --> 00:35:31,119
these are the interesting things

1002
00:35:31,119 --> 00:35:35,040
okay i went fast so questions

1003
00:35:40,240 --> 00:35:43,040
there's one there in the q a jim

1004
00:35:43,040 --> 00:35:45,280
yeah so have we been using any coverage

1005
00:35:45,280 --> 00:35:48,079
guided binary fuzzers not yet

1006
00:35:48,079 --> 00:35:50,000
uh we are looking at it

1007
00:35:50,000 --> 00:35:54,000
um jim is in python right now so um

1008
00:35:54,000 --> 00:35:55,760
it can be run on any platform but it's

1009
00:35:55,760 --> 00:35:58,480
currently only working on um linux

1010
00:35:58,480 --> 00:36:01,200
executables 32 and 64-bit linux we are

1011
00:36:01,200 --> 00:36:03,440
working on the uh i've got a student

1012
00:36:03,440 --> 00:36:06,480
right now working on the intel's things

1013
00:36:06,480 --> 00:36:08,240
uh originally gma was developed for the

1014
00:36:08,240 --> 00:36:10,240
cyber grant challenge so it was on a

1015
00:36:10,240 --> 00:36:12,960
specialized platform for just that we

1016
00:36:12,960 --> 00:36:14,800
ported it from that to the full 32 and

1017
00:36:14,800 --> 00:36:16,480
64-bit intel

1018
00:36:16,480 --> 00:36:17,760
um

1019
00:36:17,760 --> 00:36:20,000
and it was all written in java back then

1020
00:36:20,000 --> 00:36:21,920
with some c and we modified it moved it

1021
00:36:21,920 --> 00:36:23,119
all to python

1022
00:36:23,119 --> 00:36:24,480
probably a mistake it is definitely

1023
00:36:24,480 --> 00:36:26,720
slower in python but

1024
00:36:26,720 --> 00:36:28,240
it was easier for a lot of the students

1025
00:36:28,240 --> 00:36:30,799
to work with

1026
00:36:35,040 --> 00:36:37,119
so how did one result in lower accuracy

1027
00:36:37,119 --> 00:36:38,960
actually what happened

1028
00:36:38,960 --> 00:36:41,920
was just the way the optimizing compiler

1029
00:36:41,920 --> 00:36:43,200
worked it

1030
00:36:43,200 --> 00:36:45,599
set things up in a pattern

1031
00:36:45,599 --> 00:36:47,280
that our analysis tools did not

1032
00:36:47,280 --> 00:36:51,280
recognize and so we combined multiple uh

1033
00:36:51,280 --> 00:36:52,640
we were actually missing function by

1034
00:36:52,640 --> 00:36:54,000
entries we were merging multiple

1035
00:36:54,000 --> 00:36:56,240
functions together we were missing a

1036
00:36:56,240 --> 00:36:59,760
function end how did we find it

1037
00:36:59,760 --> 00:37:02,800
one figure out which binary it was

1038
00:37:02,800 --> 00:37:04,480
going through the raw data figuring out

1039
00:37:04,480 --> 00:37:06,160
where the errors occurred and then

1040
00:37:06,160 --> 00:37:07,760
looking at it and staring at it for a

1041
00:37:07,760 --> 00:37:10,880
while and then like huh

1042
00:37:10,880 --> 00:37:12,480
so one thing that we have here that's

1043
00:37:12,480 --> 00:37:14,000
really interesting like i said we're

1044
00:37:14,000 --> 00:37:15,440
still working on this to try and make it

1045
00:37:15,440 --> 00:37:17,440
better

1046
00:37:17,440 --> 00:37:20,240
we have these data sets and just have to

1047
00:37:20,240 --> 00:37:22,160
rerun things so my current data set uses

1048
00:37:22,160 --> 00:37:23,760
97 000

1049
00:37:23,760 --> 00:37:25,839
binaries but there are multiple

1050
00:37:25,839 --> 00:37:28,800
compilations of a lot of the same code

1051
00:37:28,800 --> 00:37:29,839
and so

1052
00:37:29,839 --> 00:37:31,200
an error in one thing may appear

1053
00:37:31,200 --> 00:37:32,480
multiple times

1054
00:37:32,480 --> 00:37:34,960
the current data set we're using from a

1055
00:37:34,960 --> 00:37:36,640
tool called bin kit

1056
00:37:36,640 --> 00:37:38,560
where they have like six versions of the

1057
00:37:38,560 --> 00:37:41,440
client compiler six versions of gcc

1058
00:37:41,440 --> 00:37:43,440
and they compile those using six

1059
00:37:43,440 --> 00:37:45,359
different optim uh command line

1060
00:37:45,359 --> 00:37:48,160
parameters so compile the same

1061
00:37:48,160 --> 00:37:49,760
executables into lots and lots of

1062
00:37:49,760 --> 00:37:51,520
different variants we're still having

1063
00:37:51,520 --> 00:37:52,640
some problems with link time

1064
00:37:52,640 --> 00:37:54,640
optimization as one of the options

1065
00:37:54,640 --> 00:37:56,079
because

1066
00:37:56,079 --> 00:37:58,000
it breaks um

1067
00:37:58,000 --> 00:38:00,640
obj dumps decompilation fails on some of

1068
00:38:00,640 --> 00:38:03,520
those it's misclassifying things as

1069
00:38:03,520 --> 00:38:04,720
instructions that aren't really

1070
00:38:04,720 --> 00:38:06,000
instructions

1071
00:38:06,000 --> 00:38:06,880
um

1072
00:38:06,880 --> 00:38:08,720
and they're we don't word sensory line

1073
00:38:08,720 --> 00:38:11,919
that we can't fix that

1074
00:38:12,320 --> 00:38:13,119
so

1075
00:38:13,119 --> 00:38:14,720
but a lot of this has been just looking

1076
00:38:14,720 --> 00:38:16,560
at it thinking about it visualizing it

1077
00:38:16,560 --> 00:38:18,800
playing with it

1078
00:38:18,800 --> 00:38:20,400
and

1079
00:38:20,400 --> 00:38:22,160
keeping track of the old versions of

1080
00:38:22,160 --> 00:38:24,240
code because too many times like oh this

1081
00:38:24,240 --> 00:38:26,320
is a problem i'll fix it i rerun it and

1082
00:38:26,320 --> 00:38:27,839
said yeah it fixed it for that one case

1083
00:38:27,839 --> 00:38:30,240
and broke thousand other cases so our

1084
00:38:30,240 --> 00:38:31,839
numbers actually went down so it's been

1085
00:38:31,839 --> 00:38:34,560
a lot of trial and error back and forth

1086
00:38:34,560 --> 00:38:36,079
for everybody working on this to make

1087
00:38:36,079 --> 00:38:37,200
sure that we're always making

1088
00:38:37,200 --> 00:38:39,760
incremental improvements

1089
00:38:39,760 --> 00:38:42,320
a lot of graphing a lot of spreadsheets

1090
00:38:42,320 --> 00:38:44,839
of the data a lot of version

1091
00:38:44,839 --> 00:38:47,440
control um and it's been you know we

1092
00:38:47,440 --> 00:38:49,200
started this like i said the java

1093
00:38:49,200 --> 00:38:51,839
version of this probably back in 2014

1094
00:38:51,839 --> 00:38:55,040
uh redid it into python probably in 2018

1095
00:38:55,040 --> 00:38:56,480
it sat for a couple years not being

1096
00:38:56,480 --> 00:38:58,720
touched and then this last year or two

1097
00:38:58,720 --> 00:39:00,240
we've been re-digging into it again

1098
00:39:00,240 --> 00:39:01,760
because we want to get it ready where we

1099
00:39:01,760 --> 00:39:04,160
can port to actually not only windows

1100
00:39:04,160 --> 00:39:05,839
but arm architecture and some other

1101
00:39:05,839 --> 00:39:08,079
architectures so we're trying to

1102
00:39:08,079 --> 00:39:10,880
modularize everything we were doing uh

1103
00:39:10,880 --> 00:39:12,400
to make sure that we can pull out and

1104
00:39:12,400 --> 00:39:13,839
say this is an intel specific module

1105
00:39:13,839 --> 00:39:17,119
replace it with an arm module

1106
00:39:19,920 --> 00:39:21,839
what else

1107
00:39:21,839 --> 00:39:23,599
well you got a comment thanking you for

1108
00:39:23,599 --> 00:39:25,520
the talk and another question just

1109
00:39:25,520 --> 00:39:26,720
posted

1110
00:39:26,720 --> 00:39:28,720
yeah how does symbolic execution stack

1111
00:39:28,720 --> 00:39:30,880
up against static analysis can they

1112
00:39:30,880 --> 00:39:32,800
evaluate functions 100 accuracy given

1113
00:39:32,800 --> 00:39:34,079
it's not vulnerable disassembly

1114
00:39:34,079 --> 00:39:36,800
inaccuracies for optimizations okay so

1115
00:39:36,800 --> 00:39:38,960
symbolic execution as you're going how

1116
00:39:38,960 --> 00:39:42,240
do you know you've entered a function

1117
00:39:42,240 --> 00:39:44,160
right so

1118
00:39:44,160 --> 00:39:46,720
some functions like i said if the last

1119
00:39:46,720 --> 00:39:48,480
instruction of your function is a call

1120
00:39:48,480 --> 00:39:50,079
to another function

1121
00:39:50,079 --> 00:39:51,839
the optimizing compiler could turn it

1122
00:39:51,839 --> 00:39:53,280
into a jump

1123
00:39:53,280 --> 00:39:55,280
you don't see the call

1124
00:39:55,280 --> 00:39:57,200
you don't know you're in the function

1125
00:39:57,200 --> 00:39:58,880
um second there

1126
00:39:58,880 --> 00:40:00,960
in a lot of programs that there are is

1127
00:40:00,960 --> 00:40:02,640
unreachable code

1128
00:40:02,640 --> 00:40:04,240
there are functions there that you'll

1129
00:40:04,240 --> 00:40:06,560
never execute

1130
00:40:06,560 --> 00:40:08,720
and if you're not executing with some

1131
00:40:08,720 --> 00:40:10,800
with any type of execution

1132
00:40:10,800 --> 00:40:13,359
um symbolic or otherwise because maybe

1133
00:40:13,359 --> 00:40:15,119
it's unreachable it's still part of the

1134
00:40:15,119 --> 00:40:16,800
binary it still exists it's still

1135
00:40:16,800 --> 00:40:20,800
something that an attacker can use in a

1136
00:40:20,800 --> 00:40:22,960
if they use any type of um

1137
00:40:22,960 --> 00:40:26,160
control flow attack

1138
00:40:26,240 --> 00:40:28,560
so the symbolic won't detect it

1139
00:40:28,560 --> 00:40:30,000
also we're faster than symbolic

1140
00:40:30,000 --> 00:40:31,680
execution would ever do

1141
00:40:31,680 --> 00:40:33,599
i can analyze most binaries in seconds

1142
00:40:33,599 --> 00:40:36,000
with this

1143
00:40:37,359 --> 00:40:38,800
of course i i haven't been paying

1144
00:40:38,800 --> 00:40:40,240
attention amount of time now because i

1145
00:40:40,240 --> 00:40:42,319
got a nice machine i'm running on so i

1146
00:40:42,319 --> 00:40:44,880
have a 60 processor course and i just

1147
00:40:44,880 --> 00:40:46,640
run it all you know 60 versions of this

1148
00:40:46,640 --> 00:40:49,359
simultaneously on my set of 97 000

1149
00:40:49,359 --> 00:40:51,359
binaries i go to lunch i come back get

1150
00:40:51,359 --> 00:40:53,839
the results

1151
00:40:55,200 --> 00:40:57,680
i should say 60 processing cores and 2

1152
00:40:57,680 --> 00:40:59,680
terabytes of ram so i don't have to

1153
00:40:59,680 --> 00:41:03,000
worry about swapping

1154
00:41:07,599 --> 00:41:09,440
what else

1155
00:41:09,440 --> 00:41:12,400
any other questions

1156
00:41:22,480 --> 00:41:24,560
so um

1157
00:41:24,560 --> 00:41:27,040
yeah you've gotten several very positive

1158
00:41:27,040 --> 00:41:29,680
uh yeah uh comments here

1159
00:41:29,680 --> 00:41:32,079
i wanted to uh ask you you sort of

1160
00:41:32,079 --> 00:41:33,520
alluded to this but

1161
00:41:33,520 --> 00:41:35,839
um

1162
00:41:36,160 --> 00:41:37,760
what are some further steps where are

1163
00:41:37,760 --> 00:41:38,880
you gonna

1164
00:41:38,880 --> 00:41:40,480
you had mentioned other architectures

1165
00:41:40,480 --> 00:41:41,760
pointing importing into something other

1166
00:41:41,760 --> 00:41:44,319
than windows

1167
00:41:44,400 --> 00:41:47,280
maybe taking it out of python

1168
00:41:47,280 --> 00:41:50,960
maybe including some uh

1169
00:41:50,960 --> 00:41:52,560
machine learning in it i mean what are

1170
00:41:52,560 --> 00:41:53,839
some what are some directions where

1171
00:41:53,839 --> 00:41:55,520
you're interested in taking this so so

1172
00:41:55,520 --> 00:41:57,040
one thing we're trying to do is beyond

1173
00:41:57,040 --> 00:41:58,480
just the function boundaries because

1174
00:41:58,480 --> 00:42:00,000
we're pretty close to being done with

1175
00:42:00,000 --> 00:42:02,319
that part what else can we analyze what

1176
00:42:02,319 --> 00:42:04,560
other properties about a function would

1177
00:42:04,560 --> 00:42:07,040
be useful for cyber security now

1178
00:42:07,040 --> 00:42:10,160
analysts so we're detecting um

1179
00:42:10,160 --> 00:42:11,359
you know is it

1180
00:42:11,359 --> 00:42:13,599
from the raw binary is it a variatic

1181
00:42:13,599 --> 00:42:15,280
function you know variable length

1182
00:42:15,280 --> 00:42:16,400
arguments

1183
00:42:16,400 --> 00:42:18,400
um once we can determine that then we

1184
00:42:18,400 --> 00:42:20,880
can look are there controls in place to

1185
00:42:20,880 --> 00:42:23,040
prevent you from overrunning

1186
00:42:23,040 --> 00:42:25,520
so maybe i can look at if it's a total

1187
00:42:25,520 --> 00:42:27,599
standalone binary

1188
00:42:27,599 --> 00:42:30,240
um and not a library can i look at the

1189
00:42:30,240 --> 00:42:31,760
maximum number of parameters that were

1190
00:42:31,760 --> 00:42:34,480
ever passed to that variatic function

1191
00:42:34,480 --> 00:42:36,560
and make sure there's a control in place

1192
00:42:36,560 --> 00:42:38,800
to make sure you don't overrun it

1193
00:42:38,800 --> 00:42:40,880
um

1194
00:42:40,880 --> 00:42:42,480
maybe we can do some type analysis and

1195
00:42:42,480 --> 00:42:44,640
say hey these are parameters or local

1196
00:42:44,640 --> 00:42:46,400
variables that are pointers i want to do

1197
00:42:46,400 --> 00:42:48,319
some extra controls on those

1198
00:42:48,319 --> 00:42:50,480
um because eventually what we want to be

1199
00:42:50,480 --> 00:42:52,160
able to do we did the cyber grant

1200
00:42:52,160 --> 00:42:53,200
challenge

1201
00:42:53,200 --> 00:42:55,440
partially we were able to use this

1202
00:42:55,440 --> 00:42:58,160
decompile the code add stack canaries

1203
00:42:58,160 --> 00:43:00,079
and some other features to the functions

1204
00:43:00,079 --> 00:43:02,319
recompile it and re-execute it we want

1205
00:43:02,319 --> 00:43:03,040
to

1206
00:43:03,040 --> 00:43:04,960
be able to do better on that because it

1207
00:43:04,960 --> 00:43:06,240
wasn't perfect when we did it with the

1208
00:43:06,240 --> 00:43:08,079
cybergram challenge we want to make it

1209
00:43:08,079 --> 00:43:10,480
so we don't break the code but we add

1210
00:43:10,480 --> 00:43:11,760
these features so those are some of the

1211
00:43:11,760 --> 00:43:13,599
things we're looking at right now

1212
00:43:13,599 --> 00:43:16,560
um our main focus has been in embedded

1213
00:43:16,560 --> 00:43:18,560
systems for some of the things we're

1214
00:43:18,560 --> 00:43:19,680
doing

1215
00:43:19,680 --> 00:43:21,839
so it is analyzing it for something

1216
00:43:21,839 --> 00:43:23,359
that's not a library but a standalone

1217
00:43:23,359 --> 00:43:25,760
piece full function but we do also want

1218
00:43:25,760 --> 00:43:28,319
to look what if we do this in a library

1219
00:43:28,319 --> 00:43:29,599
um

1220
00:43:29,599 --> 00:43:31,119
what if we do this when somebody's

1221
00:43:31,119 --> 00:43:32,720
calling dynamic library how does it how

1222
00:43:32,720 --> 00:43:36,000
do we deal with all that too

1223
00:43:36,079 --> 00:43:37,920
great one thing we want to be able to do

1224
00:43:37,920 --> 00:43:40,319
with this function analysis too is there

1225
00:43:40,319 --> 00:43:41,760
was a question about fuzzing we want to

1226
00:43:41,760 --> 00:43:45,440
deal with fuzzing can i can it help me

1227
00:43:45,440 --> 00:43:46,560
with uh

1228
00:43:46,560 --> 00:43:48,160
with fuzzing if i know more about what

1229
00:43:48,160 --> 00:43:50,960
these functions are

1230
00:43:53,119 --> 00:43:55,839
i heard a dog

1231
00:43:56,560 --> 00:43:59,759
that was at my end here

1232
00:44:00,079 --> 00:44:02,960
you have another question in the q and a

1233
00:44:02,960 --> 00:44:05,200
that was the same one

1234
00:44:05,200 --> 00:44:06,560
it was just a

1235
00:44:06,560 --> 00:44:08,960
typo

1236
00:44:08,960 --> 00:44:10,720
oh no that's different is there a way of

1237
00:44:10,720 --> 00:44:13,280
decompiling malware

1238
00:44:13,280 --> 00:44:16,240
from binaries well

1239
00:44:16,240 --> 00:44:17,920
depends how well it's hidden in the

1240
00:44:17,920 --> 00:44:19,520
binary

1241
00:44:19,520 --> 00:44:20,960
if they're using any officer station

1242
00:44:20,960 --> 00:44:23,280
techniques or stuff we're we're not i'm

1243
00:44:23,280 --> 00:44:26,079
assuming decompilation as an input to

1244
00:44:26,079 --> 00:44:27,680
what we're doing

1245
00:44:27,680 --> 00:44:30,960
so if the decompilation fails uh because

1246
00:44:30,960 --> 00:44:32,480
of observation techniques or other

1247
00:44:32,480 --> 00:44:34,160
things we're not going to do it

1248
00:44:34,160 --> 00:44:34,470
um

1249
00:44:34,470 --> 00:44:35,599
[Music]

1250
00:44:35,599 --> 00:44:36,400
and there's lots of different

1251
00:44:36,400 --> 00:44:38,160
opportunitation techniques out there in

1252
00:44:38,160 --> 00:44:39,599
terms of just you know changing the

1253
00:44:39,599 --> 00:44:43,119
binaries or uh encrypting

1254
00:44:43,119 --> 00:44:45,599
and have itself decrypting as it's going

1255
00:44:45,599 --> 00:44:47,280
um

1256
00:44:47,280 --> 00:44:51,560
we're not dealing with any of that

1257
00:44:58,319 --> 00:44:59,599
all right

1258
00:44:59,599 --> 00:45:01,119
well

1259
00:45:01,119 --> 00:45:03,599
we'll leave it open here for another

1260
00:45:03,599 --> 00:45:06,079
minute or two uh see if other questions

1261
00:45:06,079 --> 00:45:07,119
occur

1262
00:45:07,119 --> 00:45:09,119
i think this is a very interesting area

1263
00:45:09,119 --> 00:45:11,280
to be able to do this

1264
00:45:11,280 --> 00:45:13,040
there's there's a lot of application not

1265
00:45:13,040 --> 00:45:14,560
only in code analysis but in

1266
00:45:14,560 --> 00:45:17,279
re-engineering

1267
00:45:19,200 --> 00:45:21,520
one thing i'd like to in the long term

1268
00:45:21,520 --> 00:45:22,560
look at

1269
00:45:22,560 --> 00:45:24,160
is how do we protect the developers from

1270
00:45:24,160 --> 00:45:26,000
themselves

1271
00:45:26,000 --> 00:45:28,960
you know for years i have said

1272
00:45:28,960 --> 00:45:30,480
when you're looking it's dealing with

1273
00:45:30,480 --> 00:45:31,680
security you're dealing with the fact

1274
00:45:31,680 --> 00:45:34,079
that bad guys lie cheat and steal

1275
00:45:34,079 --> 00:45:35,520
so when i was doing crypto protocol

1276
00:45:35,520 --> 00:45:37,119
analysis for example people say oh just

1277
00:45:37,119 --> 00:45:38,240
assume somebody's sending the right

1278
00:45:38,240 --> 00:45:39,760
message i said no i'm gonna assume

1279
00:45:39,760 --> 00:45:40,960
they're sending me the wrong stuff

1280
00:45:40,960 --> 00:45:42,720
because bad guys like cheating steel

1281
00:45:42,720 --> 00:45:43,920
well i've been adding for the last

1282
00:45:43,920 --> 00:45:45,760
several years to that bad guys like

1283
00:45:45,760 --> 00:45:47,280
cheat and steal and good guys make

1284
00:45:47,280 --> 00:45:48,640
mistakes

1285
00:45:48,640 --> 00:45:52,400
so how do we help the good guys and stop

1286
00:45:52,400 --> 00:45:53,599
them from making mistakes when we're

1287
00:45:53,599 --> 00:45:55,520
looking at the code

1288
00:45:55,520 --> 00:45:56,880
how do we help the developer who's

1289
00:45:56,880 --> 00:45:59,200
downloaded a library from the internet

1290
00:45:59,200 --> 00:46:01,599
and doesn't know if it's secure or not

1291
00:46:01,599 --> 00:46:03,839
doesn't know this uh what the you know

1292
00:46:03,839 --> 00:46:05,200
security concerns if it has

1293
00:46:05,200 --> 00:46:07,280
vulnerabilities can we help them analyze

1294
00:46:07,280 --> 00:46:08,960
and fix that as they embed it into their

1295
00:46:08,960 --> 00:46:09,839
tools

1296
00:46:09,839 --> 00:46:11,680
because surprisingly a lot of people

1297
00:46:11,680 --> 00:46:13,359
download things from the internet and

1298
00:46:13,359 --> 00:46:16,799
put it into their commercial tools

1299
00:46:18,079 --> 00:46:19,839
i yeah that's

1300
00:46:19,839 --> 00:46:21,440
it's a surprising thing

1301
00:46:21,440 --> 00:46:23,200
we've actually i started saying that our

1302
00:46:23,200 --> 00:46:27,680
students nowadays program via google

1303
00:46:27,680 --> 00:46:29,680
yeah and stack overflow

1304
00:46:29,680 --> 00:46:32,800
uh and stack overflow yes exactly

1305
00:46:32,800 --> 00:46:35,440
nobody writes anything from scratch

1306
00:46:35,440 --> 00:46:37,839
and well you know it's the same thing as

1307
00:46:37,839 --> 00:46:40,240
a as a fellow academic

1308
00:46:40,240 --> 00:46:42,240
right we we have problems with students

1309
00:46:42,240 --> 00:46:44,160
trying to find ways to cheat and it's

1310
00:46:44,160 --> 00:46:45,680
always the case that they seem to copy

1311
00:46:45,680 --> 00:46:46,880
from the people who have the wrong

1312
00:46:46,880 --> 00:46:49,599
answers so they're easy to find

1313
00:46:49,599 --> 00:46:52,240
uh the people who reuse code who don't

1314
00:46:52,240 --> 00:46:53,440
know enough

1315
00:46:53,440 --> 00:46:54,880
to actually check it for boundary

1316
00:46:54,880 --> 00:46:57,359
conditions and failures that's a lot of

1317
00:46:57,359 --> 00:46:59,599
our problem right there

1318
00:46:59,599 --> 00:47:01,760
but um

1319
00:47:01,760 --> 00:47:03,359
yeah i can see a lot of interesting

1320
00:47:03,359 --> 00:47:05,440
applications for this yeah i know

1321
00:47:05,440 --> 00:47:07,839
somebody who has a um

1322
00:47:07,839 --> 00:47:10,160
a software vulnerability analysis tool

1323
00:47:10,160 --> 00:47:11,440
what he does is he goes through stack

1324
00:47:11,440 --> 00:47:14,000
overflow finds commonly used code with

1325
00:47:14,000 --> 00:47:15,440
vulnerabilities and it searches for

1326
00:47:15,440 --> 00:47:18,000
instances of that in other people's ex

1327
00:47:18,000 --> 00:47:20,160
uh

1328
00:47:20,480 --> 00:47:22,640
work

1329
00:47:22,640 --> 00:47:24,720
you know the commercial code he says oh

1330
00:47:24,720 --> 00:47:26,160
i know somebody's going to download this

1331
00:47:26,160 --> 00:47:28,400
embedded in their commercial code

1332
00:47:28,400 --> 00:47:29,920
it says i'm not going to look for you

1333
00:47:29,920 --> 00:47:31,119
know new things i'm going to look for

1334
00:47:31,119 --> 00:47:34,000
existing things so

1335
00:47:34,000 --> 00:47:36,400
well one of the things that i'll put you

1336
00:47:36,400 --> 00:47:37,760
before you get to this other question

1337
00:47:37,760 --> 00:47:39,040
that's in here

1338
00:47:39,040 --> 00:47:40,480
um

1339
00:47:40,480 --> 00:47:41,760
i i don't know if you've looked in

1340
00:47:41,760 --> 00:47:44,319
detail at what solar winds the hack and

1341
00:47:44,319 --> 00:47:46,319
the solar winds did

1342
00:47:46,319 --> 00:47:47,920
where they introduced something into the

1343
00:47:47,920 --> 00:47:49,839
compilation process

1344
00:47:49,839 --> 00:47:51,599
as it was being recompiled and then took

1345
00:47:51,599 --> 00:47:53,440
it out again so that the binary and the

1346
00:47:53,440 --> 00:47:55,440
source code didn't reflect each other at

1347
00:47:55,440 --> 00:47:56,720
all

1348
00:47:56,720 --> 00:47:58,000
um

1349
00:47:58,000 --> 00:48:00,000
it might be interesting to think about

1350
00:48:00,000 --> 00:48:02,000
how your work

1351
00:48:02,000 --> 00:48:05,359
could be used to find those kinds of

1352
00:48:05,359 --> 00:48:06,559
problems

1353
00:48:06,559 --> 00:48:07,920
um

1354
00:48:07,920 --> 00:48:09,760
dick clark who gave the talk last week

1355
00:48:09,760 --> 00:48:12,160
at our symposium actually mentioned this

1356
00:48:12,160 --> 00:48:13,920
as

1357
00:48:13,920 --> 00:48:15,440
i guess he

1358
00:48:15,440 --> 00:48:17,040
kind of called it a grand challenge i

1359
00:48:17,040 --> 00:48:18,640
don't think he used those words

1360
00:48:18,640 --> 00:48:20,319
is to be able to find things that are

1361
00:48:20,319 --> 00:48:21,920
introduced into the supply chain in a

1362
00:48:21,920 --> 00:48:23,599
way that doesn't really alter the source

1363
00:48:23,599 --> 00:48:25,760
code

1364
00:48:25,760 --> 00:48:26,559
so

1365
00:48:26,559 --> 00:48:28,079
you know i'll just leave that for you as

1366
00:48:28,079 --> 00:48:30,240
a thought

1367
00:48:30,240 --> 00:48:32,558
and

1368
00:48:33,520 --> 00:48:37,119
there's another question in the q a

1369
00:48:40,480 --> 00:48:41,920
so oops

1370
00:48:41,920 --> 00:48:43,440
i'm going to put in chat i put it in the

1371
00:48:43,440 --> 00:48:45,440
q a too a link

1372
00:48:45,440 --> 00:48:46,400
um

1373
00:48:46,400 --> 00:48:48,960
so an earlier version of this work uh

1374
00:48:48,960 --> 00:48:51,520
was in 2019 axac

1375
00:48:51,520 --> 00:48:53,200
um so there's a lot of citations and

1376
00:48:53,200 --> 00:48:55,920
references uh from that date related to

1377
00:48:55,920 --> 00:48:58,240
this area that are in that paper

1378
00:48:58,240 --> 00:48:59,359
um

1379
00:48:59,359 --> 00:49:00,800
i don't have a more recent version of

1380
00:49:00,800 --> 00:49:02,480
this paper yet

1381
00:49:02,480 --> 00:49:04,640
uh there have been if you do you know

1382
00:49:04,640 --> 00:49:06,160
some function boundary detection there's

1383
00:49:06,160 --> 00:49:07,520
been some more recent work that people

1384
00:49:07,520 --> 00:49:08,800
have looked at

1385
00:49:08,800 --> 00:49:11,119
um

1386
00:49:11,599 --> 00:49:12,880
but i don't have links to those right

1387
00:49:12,880 --> 00:49:16,359
away so

1388
00:49:19,280 --> 00:49:20,720
all right

1389
00:49:20,720 --> 00:49:23,280
well um

1390
00:49:23,280 --> 00:49:25,119
you've generated a lot of interesting uh

1391
00:49:25,119 --> 00:49:26,640
questions and thoughts here you've given

1392
00:49:26,640 --> 00:49:28,960
us some references to look at for future

1393
00:49:28,960 --> 00:49:34,079
work i would encourage people to look

1394
00:49:34,480 --> 00:49:37,839
you can also do searches on on

1395
00:49:37,839 --> 00:49:41,040
jim's name

1396
00:49:41,040 --> 00:49:42,319
currently

1397
00:49:42,319 --> 00:49:45,040
besides my wife having one paper

1398
00:49:45,040 --> 00:49:46,720
i'm the only als foss out there with

1399
00:49:46,720 --> 00:49:50,079
publications so that makes it easier yep

1400
00:49:50,079 --> 00:49:52,559
my son is a phd student now in english

1401
00:49:52,559 --> 00:49:53,839
so that's going to change but it should

1402
00:49:53,839 --> 00:49:54,880
be able

1403
00:49:54,880 --> 00:49:57,040
we should be able to differentiate our

1404
00:49:57,040 --> 00:49:59,280
publications at least yeah i would

1405
00:49:59,280 --> 00:50:01,760
expect they wouldn't overlap by much

1406
00:50:01,760 --> 00:50:03,119
but you might set that as a goal for

1407
00:50:03,119 --> 00:50:05,839
some day is to do a joint paper

1408
00:50:05,839 --> 00:50:08,480
uh but in the meantime um

1409
00:50:08,480 --> 00:50:11,119
thank you so much jim for

1410
00:50:11,119 --> 00:50:13,680
uh speaking it's it's been too long

1411
00:50:13,680 --> 00:50:15,599
since we've

1412
00:50:15,599 --> 00:50:18,559
seen you and um

1413
00:50:18,559 --> 00:50:21,280
continued uh good luck with what you're

1414
00:50:21,280 --> 00:50:22,480
doing

1415
00:50:22,480 --> 00:50:24,800
i hope see you in person before too long

1416
00:50:24,800 --> 00:50:26,960
yeah i'm just i'm going to my first

1417
00:50:26,960 --> 00:50:28,559
conference in a couple years i'm going

1418
00:50:28,559 --> 00:50:30,559
to ndss the end of this month oh

1419
00:50:30,559 --> 00:50:33,119
excellent excellent

1420
00:50:33,119 --> 00:50:34,160
um

1421
00:50:34,160 --> 00:50:37,680
so well as life as life resumes we'll

1422
00:50:37,680 --> 00:50:39,520
we'll see where it takes us all

1423
00:50:39,520 --> 00:50:42,240
uh for everybody who's listening in uh

1424
00:50:42,240 --> 00:50:44,400
please tune in next week we'll have

1425
00:50:44,400 --> 00:50:46,319
another seminar speaker

1426
00:50:46,319 --> 00:50:48,800
and

1427
00:50:49,200 --> 00:50:50,400
until then

1428
00:50:50,400 --> 00:50:54,200
everybody have a good week

1429
00:50:55,440 --> 00:50:57,520
you

