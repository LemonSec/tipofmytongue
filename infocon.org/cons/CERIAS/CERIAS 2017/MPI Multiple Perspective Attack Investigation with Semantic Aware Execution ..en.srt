1
00:00:10,799 --> 00:00:16,209
alright let's go ahead and get started

2
00:00:14,170 --> 00:00:19,689
alright so hello everyone and welcome to

3
00:00:16,209 --> 00:00:24,850
the very first Scilab security seminar

4
00:00:19,689 --> 00:00:27,910
of the semester so today were excited to

5
00:00:24,850 --> 00:00:30,430
have our very own graduate student she

6
00:00:27,910 --> 00:00:36,550
ching ma present to us about his work

7
00:00:30,430 --> 00:00:40,299
with his advisers dong-hyun and Zhang Yu

8
00:00:36,550 --> 00:00:44,019
so I was just at you snick security last

9
00:00:40,299 --> 00:00:46,030
week and so the slide title slide

10
00:00:44,019 --> 00:00:48,640
doesn't say it but this paper actually

11
00:00:46,030 --> 00:00:50,710
was the recipient of one of the

12
00:00:48,640 --> 00:00:54,269
distinguished papers Awards at usenix

13
00:00:50,710 --> 00:00:57,339
security so I'm excited to have you know

14
00:00:54,269 --> 00:01:00,479
here you know some of the very best work

15
00:00:57,339 --> 00:01:02,170
from you snick security so thank you and

16
00:01:00,479 --> 00:01:04,688
all that

17
00:01:02,170 --> 00:01:14,380
Sheikh ting tell us all about it Thanks

18
00:01:04,688 --> 00:01:15,940
Thank You Seema I'm here studying for

19
00:01:14,380 --> 00:01:19,289
studying in the computer science

20
00:01:15,940 --> 00:01:21,670
department this work is called MPI

21
00:01:19,290 --> 00:01:23,740
multiple perspective attacking

22
00:01:21,670 --> 00:01:26,530
investigation with Symantec aware

23
00:01:23,740 --> 00:01:29,169
execution petitioning this work is done

24
00:01:26,530 --> 00:01:31,780
is a joint work with Professor ginger

25
00:01:29,170 --> 00:01:34,420
from Nanjing University my colleague

26
00:01:31,780 --> 00:01:37,300
Faye Wong and professor ku hung me from

27
00:01:34,420 --> 00:01:39,990
University of Georgia and my advisors

28
00:01:37,300 --> 00:01:43,658
Xiang Yu Jiang and the dong geun's ooh

29
00:01:39,990 --> 00:01:47,199
so before we start I would like to first

30
00:01:43,659 --> 00:01:49,600
go through some backgrounds first the

31
00:01:47,200 --> 00:01:53,620
work is in the context of attack

32
00:01:49,600 --> 00:01:55,539
investigation so traditionally attacking

33
00:01:53,620 --> 00:01:58,900
investigation has two components the

34
00:01:55,540 --> 00:02:03,190
first one is a provenance system so what

35
00:01:58,900 --> 00:02:04,990
is prominence basically is a history so

36
00:02:03,190 --> 00:02:07,360
provenance tracking system basically

37
00:02:04,990 --> 00:02:09,758
well log all the activities on your

38
00:02:07,360 --> 00:02:13,360
system for like Windows or Linux

39
00:02:09,758 --> 00:02:15,458
annually or even Android platform they

40
00:02:13,360 --> 00:02:18,220
all have prominent systems logging the

41
00:02:15,459 --> 00:02:20,400
processes and objects ICO files and

42
00:02:18,220 --> 00:02:25,159
sockets activities

43
00:02:20,400 --> 00:02:27,720
and there are many ways to have to agree

44
00:02:25,159 --> 00:02:30,780
there are many existing provenance

45
00:02:27,720 --> 00:02:33,420
systems for us we use the links audio

46
00:02:30,780 --> 00:02:36,269
system is actually building in the links

47
00:02:33,420 --> 00:02:38,208
the mainstream kernel and some other

48
00:02:36,269 --> 00:02:41,909
researchers actually use others like

49
00:02:38,209 --> 00:02:46,920
Linux security module to monitor all the

50
00:02:41,909 --> 00:02:49,920
angles and log all the activities a very

51
00:02:46,920 --> 00:02:53,809
typical log will look like this no for

52
00:02:49,920 --> 00:02:57,268
each event you will have a process and

53
00:02:53,810 --> 00:03:01,590
operations and some system objects or

54
00:02:57,269 --> 00:03:05,730
subjects like a PID it represents one

55
00:03:01,590 --> 00:03:09,540
process the process is receiving packets

56
00:03:05,730 --> 00:03:13,649
from some sockets and process can write

57
00:03:09,540 --> 00:03:16,319
or read two files we do is by monitoring

58
00:03:13,650 --> 00:03:18,780
all the system calls as a links audio

59
00:03:16,319 --> 00:03:21,929
framework and we can log all the

60
00:03:18,780 --> 00:03:24,599
important activities for in video see

61
00:03:21,930 --> 00:03:28,950
some objects like file sockets and

62
00:03:24,599 --> 00:03:33,388
processes the second component is called

63
00:03:28,950 --> 00:03:35,910
the dependence analysis so basically it

64
00:03:33,389 --> 00:03:38,819
will analyze all the events happen in

65
00:03:35,910 --> 00:03:42,980
your system and try to build a cultural

66
00:03:38,819 --> 00:03:48,209
graph a quarter graphically represents

67
00:03:42,980 --> 00:03:50,340
all the dependence is a system and in

68
00:03:48,209 --> 00:03:52,829
well represents everything that happened

69
00:03:50,340 --> 00:03:55,769
in the system what dependencies there

70
00:03:52,829 --> 00:03:58,410
are many types for example process to

71
00:03:55,769 --> 00:04:00,840
process basically process creates and

72
00:03:58,410 --> 00:04:04,379
other process or terminates send a cue

73
00:04:00,840 --> 00:04:07,910
to another process or a process to

74
00:04:04,379 --> 00:04:12,988
socket or files create a band open or

75
00:04:07,910 --> 00:04:17,089
close delete and the choral graph will

76
00:04:12,989 --> 00:04:19,349
look like this so basically the edges

77
00:04:17,089 --> 00:04:22,489
represents the cultural relationships

78
00:04:19,349 --> 00:04:26,370
and as a nose here will represent the

79
00:04:22,490 --> 00:04:28,950
system objects also objects or subjects

80
00:04:26,370 --> 00:04:32,009
as we use different shapes to represent

81
00:04:28,950 --> 00:04:34,050
different types so case

82
00:04:32,009 --> 00:04:43,080
is attainment and process like a

83
00:04:34,050 --> 00:04:46,439
triangle and here is a overview so the

84
00:04:43,080 --> 00:04:48,378
left hand side shows two log entries and

85
00:04:46,439 --> 00:04:52,409
the right hand side will be the

86
00:04:48,379 --> 00:04:56,699
graduated from the two log entries so as

87
00:04:52,409 --> 00:04:59,039
we can see process 24 agree reads some

88
00:04:56,699 --> 00:05:02,039
information from socket and they write

89
00:04:59,039 --> 00:05:04,949
to a local file tascam and there is an

90
00:05:02,039 --> 00:05:09,539
information flow from the socket to the

91
00:05:04,949 --> 00:05:12,389
process and they read to the socket it's

92
00:05:09,539 --> 00:05:14,188
pretty clear after the two steps when

93
00:05:12,389 --> 00:05:16,199
you get a Korra graph it's pretty clear

94
00:05:14,189 --> 00:05:18,210
what happened what has happened in the

95
00:05:16,199 --> 00:05:20,849
system and this will help the

96
00:05:18,210 --> 00:05:23,818
investigators to understand the system

97
00:05:20,849 --> 00:05:25,099
activities and this is a traditional way

98
00:05:23,819 --> 00:05:27,809
of doing this

99
00:05:25,099 --> 00:05:28,909
this one actually shows a real-world

100
00:05:27,809 --> 00:05:33,599
example

101
00:05:28,909 --> 00:05:36,899
it's a I think I think it's just five

102
00:05:33,599 --> 00:05:42,300
minutes using a few programs as you can

103
00:05:36,899 --> 00:05:46,439
see the graph is a pretty big hand

104
00:05:42,300 --> 00:05:50,669
contains hundreds of nodes and thousands

105
00:05:46,439 --> 00:05:53,120
of edges this is because this is real

106
00:05:50,669 --> 00:05:55,769
life you know there are many many

107
00:05:53,120 --> 00:05:58,199
programs running on your system at the

108
00:05:55,769 --> 00:06:01,979
same time and they all have interactions

109
00:05:58,199 --> 00:06:04,680
with each other the coral graphically is

110
00:06:01,979 --> 00:06:07,469
good it's a you can easily understand it

111
00:06:04,680 --> 00:06:09,749
but it's the sizes too large account the

112
00:06:07,469 --> 00:06:13,620
complexity makes the medication pretty

113
00:06:09,749 --> 00:06:16,259
hard and the fundamental problem here is

114
00:06:13,620 --> 00:06:21,360
called a dependence explosion problem

115
00:06:16,259 --> 00:06:25,249
and I'm gonna introduce the problem and

116
00:06:21,360 --> 00:06:28,080
some related works so here I'll show a

117
00:06:25,249 --> 00:06:33,180
show a very simple example

118
00:06:28,080 --> 00:06:37,229
it's a phishing attack by email so this

119
00:06:33,180 --> 00:06:39,899
is one email it's a typical spam email

120
00:06:37,229 --> 00:06:42,810
but the yura have had like urgent or

121
00:06:39,899 --> 00:06:45,690
important and they fake the sender's

122
00:06:42,810 --> 00:06:48,960
like this one is a from Chase

123
00:06:45,690 --> 00:06:51,719
looks everything looks good and actually

124
00:06:48,960 --> 00:06:55,500
will click the link here it well

125
00:06:51,720 --> 00:06:59,069
director redirect you to a web page the

126
00:06:55,500 --> 00:07:02,120
URL and the page looks benign it's a

127
00:06:59,069 --> 00:07:05,039
song malicious but if you click the

128
00:07:02,120 --> 00:07:10,440
download activity exactly well download

129
00:07:05,039 --> 00:07:14,060
you a malware so this is a traditional

130
00:07:10,440 --> 00:07:18,479
attack traditional phishing attack and

131
00:07:14,060 --> 00:07:21,120
wherever you I mean I think I think most

132
00:07:18,479 --> 00:07:23,099
as well have and have a program running

133
00:07:21,120 --> 00:07:26,520
I'll see you soon if you don't please

134
00:07:23,099 --> 00:07:29,960
install and so whatever this happens

135
00:07:26,520 --> 00:07:33,870
this alert happens this is how the

136
00:07:29,960 --> 00:07:36,180
investigation happen so we the

137
00:07:33,870 --> 00:07:38,490
investigation actually happen after you

138
00:07:36,180 --> 00:07:41,039
actually know the attack or it happens

139
00:07:38,490 --> 00:07:45,870
because eventually malware will expose

140
00:07:41,039 --> 00:07:48,500
itself and this is a simplified graph

141
00:07:45,870 --> 00:07:52,229
generated from the previous example

142
00:07:48,500 --> 00:07:57,120
using the traditional approach I just

143
00:07:52,229 --> 00:07:59,460
introduced before as you can see there

144
00:07:57,120 --> 00:08:01,400
are many many notes here some of the

145
00:07:59,460 --> 00:08:04,500
notes are pretty important for example

146
00:08:01,400 --> 00:08:07,229
sending mail process and the email

147
00:08:04,500 --> 00:08:10,949
client process and the Firefox process

148
00:08:07,229 --> 00:08:14,099
as you can see those as a hotness they

149
00:08:10,949 --> 00:08:16,919
connected to other many thousands or

150
00:08:14,099 --> 00:08:22,889
hundreds or thousands sockets and other

151
00:08:16,919 --> 00:08:26,669
processes which makes the graph very

152
00:08:22,889 --> 00:08:28,680
complex and hard to understand the

153
00:08:26,669 --> 00:08:33,179
differences here are some simple numbers

154
00:08:28,680 --> 00:08:36,000
the previous graph has 51 processes 15

155
00:08:33,179 --> 00:08:41,789
files more than 250 Network addresses

156
00:08:36,000 --> 00:08:44,399
more than 350 edges but the attack is

157
00:08:41,789 --> 00:08:47,060
pretty simple typical is very simple

158
00:08:44,399 --> 00:08:49,290
attack but the graph looks very complex

159
00:08:47,060 --> 00:08:51,989
that's because of the dependency

160
00:08:49,290 --> 00:08:53,849
explosion problem because a graph

161
00:08:51,990 --> 00:08:57,480
actually have many many bogus

162
00:08:53,850 --> 00:08:59,160
dependencies here as a rata nodes in

163
00:08:57,480 --> 00:09:02,339
this graph actually shows

164
00:08:59,160 --> 00:09:06,839
Pass so one email basically it's just

165
00:09:02,339 --> 00:09:09,600
from one sender and the email was a

166
00:09:06,839 --> 00:09:11,879
download events as a click events from

167
00:09:09,600 --> 00:09:14,550
the email client and the turn of events

168
00:09:11,879 --> 00:09:17,279
from the fair folks there are pretty

169
00:09:14,550 --> 00:09:19,139
simple activities the source of the

170
00:09:17,279 --> 00:09:21,230
tunnel email where it has only one

171
00:09:19,139 --> 00:09:23,850
source right it's just from one socket

172
00:09:21,230 --> 00:09:26,399
in normal cases you don't really

173
00:09:23,850 --> 00:09:29,370
download one fell from like thousands of

174
00:09:26,399 --> 00:09:32,759
sockets but the graph view of the many

175
00:09:29,370 --> 00:09:36,540
knows why this is a dependency exposures

176
00:09:32,759 --> 00:09:38,329
our problem is because a traditional

177
00:09:36,540 --> 00:09:41,490
approach actually have one assumption

178
00:09:38,329 --> 00:09:47,310
every right depends on all the read

179
00:09:41,490 --> 00:09:49,319
events that happen before it so for

180
00:09:47,310 --> 00:09:51,899
example you are using wing to add it a

181
00:09:49,319 --> 00:09:54,060
one file you probably will open many

182
00:09:51,899 --> 00:09:56,550
many files at the same time you will

183
00:09:54,060 --> 00:09:59,008
have many read events but one write

184
00:09:56,550 --> 00:10:00,889
events actually you are editing given

185
00:09:59,009 --> 00:10:02,720
the files but from the province

186
00:10:00,889 --> 00:10:07,079
perspective you don't really know

187
00:10:02,720 --> 00:10:08,459
because you already lost the context you

188
00:10:07,079 --> 00:10:10,979
don't know the context of the

189
00:10:08,459 --> 00:10:13,920
application you just know the context of

190
00:10:10,980 --> 00:10:16,050
the season so the system tells you okay

191
00:10:13,920 --> 00:10:19,529
you've read many files and you write to

192
00:10:16,050 --> 00:10:21,959
another file the the dependents and

193
00:10:19,529 --> 00:10:24,810
nurses will have to assume all the read

194
00:10:21,959 --> 00:10:27,388
has a sources and is a well aware right

195
00:10:24,810 --> 00:10:31,609
event is writing to the destination

196
00:10:27,389 --> 00:10:35,550
these are something is clearly wrong but

197
00:10:31,610 --> 00:10:41,459
we can't really do anything if we use

198
00:10:35,550 --> 00:10:43,529
existing systems researchers actually

199
00:10:41,459 --> 00:10:45,630
have noticed this problem and the

200
00:10:43,529 --> 00:10:48,750
proposal solutions is called the

201
00:10:45,630 --> 00:10:51,089
execution partitioning you missed you

202
00:10:48,750 --> 00:10:54,300
recall my title I have the execution

203
00:10:51,089 --> 00:10:58,079
positioning keyword here the basic idea

204
00:10:54,300 --> 00:11:00,899
is actually those processes the those

205
00:10:58,079 --> 00:11:03,930
actually the hot nodes in the graph they

206
00:11:00,899 --> 00:11:06,329
actually the notes that cause the

207
00:11:03,930 --> 00:11:09,449
problems because those programs actually

208
00:11:06,329 --> 00:11:10,589
run a long time and all many many read

209
00:11:09,449 --> 00:11:14,640
events and relevant

210
00:11:10,590 --> 00:11:16,860
happen and the because I was assumption

211
00:11:14,640 --> 00:11:19,980
I create never introduced many progress

212
00:11:16,860 --> 00:11:22,550
dependencies the basic idea of execution

213
00:11:19,980 --> 00:11:25,560
partitioning is for partition the

214
00:11:22,550 --> 00:11:31,620
process into multiple processes as you

215
00:11:25,560 --> 00:11:34,709
can imagine so here is a example of the

216
00:11:31,620 --> 00:11:38,430
Firefox Firefox if you with many many

217
00:11:34,710 --> 00:11:41,220
sockets with it many websites and how it

218
00:11:38,430 --> 00:11:43,650
will have many socket reads and it

219
00:11:41,220 --> 00:11:45,930
writes to one felt has one only one file

220
00:11:43,650 --> 00:11:48,600
right but if you use traditional

221
00:11:45,930 --> 00:11:51,150
approach the right events well depends

222
00:11:48,600 --> 00:11:52,770
on all the previous talking reads and

223
00:11:51,150 --> 00:11:57,449
the graph looks like this

224
00:11:52,770 --> 00:11:59,430
so I mean only one socket is a true

225
00:11:57,450 --> 00:12:01,650
source and all the others will be

226
00:11:59,430 --> 00:12:03,390
bloggers the idea of exclusion

227
00:12:01,650 --> 00:12:08,610
partitioning were just the petition

228
00:12:03,390 --> 00:12:13,830
Firefox to individual units so each unit

229
00:12:08,610 --> 00:12:17,250
will just handle one socket so when you

230
00:12:13,830 --> 00:12:20,340
do the analysis from backward analysis

231
00:12:17,250 --> 00:12:24,270
from the file you only trace one socket

232
00:12:20,340 --> 00:12:29,120
and the dependence won't propagate to

233
00:12:24,270 --> 00:12:33,180
previous all case that's the basic idea

234
00:12:29,120 --> 00:12:36,330
obviously individual units can depend on

235
00:12:33,180 --> 00:12:39,780
each other so this called inter you need

236
00:12:36,330 --> 00:12:42,900
to dependence the Assumption in this

237
00:12:39,780 --> 00:12:45,569
model will be different so in this model

238
00:12:42,900 --> 00:12:48,770
everything all the events happen within

239
00:12:45,570 --> 00:12:51,710
one unit will have the causal dependence

240
00:12:48,770 --> 00:12:55,260
we were analyzed equality pendants and

241
00:12:51,710 --> 00:12:58,290
all the events that happen in different

242
00:12:55,260 --> 00:13:01,290
units by pair default we assume they

243
00:12:58,290 --> 00:13:03,599
don't have a dependence so that's how we

244
00:13:01,290 --> 00:13:08,400
stop the propagation of the dependence

245
00:13:03,600 --> 00:13:10,650
and by leveraging the interdependence

246
00:13:08,400 --> 00:13:13,949
accredits will complete a graph we

247
00:13:10,650 --> 00:13:20,180
actually won't lose any you know

248
00:13:13,950 --> 00:13:22,890
necessary dependence here so existing

249
00:13:20,180 --> 00:13:24,469
exclusion partitioning technique the

250
00:13:22,890 --> 00:13:28,040
state of art is called

251
00:13:24,470 --> 00:13:31,070
beep sir based is a based on even

252
00:13:28,040 --> 00:13:34,099
handling loop so I said as we all know

253
00:13:31,070 --> 00:13:35,810
the currently operating systems most of

254
00:13:34,100 --> 00:13:39,140
the program's actually event-driven

255
00:13:35,810 --> 00:13:42,439
programs when you know external even

256
00:13:39,140 --> 00:13:44,569
happen the program receives this event

257
00:13:42,440 --> 00:13:47,750
and the calls are corresponding even

258
00:13:44,570 --> 00:13:50,150
handle to process this event this is why

259
00:13:47,750 --> 00:13:53,480
I create well for a long time because of

260
00:13:50,150 --> 00:13:57,829
the because a very large number of

261
00:13:53,480 --> 00:14:01,430
external events so the idea of a beep is

262
00:13:57,830 --> 00:14:04,330
actually instrument one event before at

263
00:14:01,430 --> 00:14:08,599
the energy of the even handle loop and

264
00:14:04,330 --> 00:14:11,870
one unit accident at the end of the

265
00:14:08,600 --> 00:14:15,980
excursion unit and everything in between

266
00:14:11,870 --> 00:14:18,560
all the events happened after the unit

267
00:14:15,980 --> 00:14:21,890
enter and before the unit exit will be

268
00:14:18,560 --> 00:14:24,050
considered as one unit so the add all

269
00:14:21,890 --> 00:14:27,199
the events are here were belong to one

270
00:14:24,050 --> 00:14:29,569
is huge in unit and when we analyze the

271
00:14:27,200 --> 00:14:32,540
cultural dependencies we actually will

272
00:14:29,570 --> 00:14:36,170
just consider the events happen within

273
00:14:32,540 --> 00:14:42,980
this unit if there are no inter unit

274
00:14:36,170 --> 00:14:45,920
dependencies so basically know the name

275
00:14:42,980 --> 00:14:49,610
peopie's for binary based exclusion unit

276
00:14:45,920 --> 00:14:54,530
it's actually published in India as 2013

277
00:14:49,610 --> 00:14:57,740
it's a proposed a fine-grained subject

278
00:14:54,530 --> 00:15:00,860
basically the processes of individual

279
00:14:57,740 --> 00:15:07,520
units and they can be connected with by

280
00:15:00,860 --> 00:15:11,060
inter unit dependencies this is a people

281
00:15:07,520 --> 00:15:15,020
generated graph by applying on a

282
00:15:11,060 --> 00:15:18,319
previous example all the red nodes here

283
00:15:15,020 --> 00:15:20,660
as till the attack pass so all the

284
00:15:18,320 --> 00:15:26,240
Bluenose actually can be removed from

285
00:15:20,660 --> 00:15:29,240
this graph and this is a final result as

286
00:15:26,240 --> 00:15:32,000
you can see it's a pretty clear suggest

287
00:15:29,240 --> 00:15:35,000
a one-line and the attack pass and all

288
00:15:32,000 --> 00:15:38,610
the sources what happened in the system

289
00:15:35,000 --> 00:15:43,830
is now very clear

290
00:15:38,610 --> 00:15:47,140
this is a comparison so beep x-ray can

291
00:15:43,830 --> 00:15:53,560
reduce a lot of baggage dependence in

292
00:15:47,140 --> 00:15:59,290
the graph but this is no tower this is

293
00:15:53,560 --> 00:16:05,250
no time PR we like that yes now my

294
00:15:59,290 --> 00:16:05,250
question is do you get to this point

295
00:16:05,310 --> 00:16:10,449
because you're referencing someplace

296
00:16:08,529 --> 00:16:11,820
that it is noted this malware and

297
00:16:10,450 --> 00:16:15,130
therefore you kind of kind of reduce

298
00:16:11,820 --> 00:16:16,779
these different indicators and processes

299
00:16:15,130 --> 00:16:20,170
and files and network addresses and you

300
00:16:16,779 --> 00:16:21,490
can stop it before it happens how do you

301
00:16:20,170 --> 00:16:31,839
how do you collect this information to

302
00:16:21,490 --> 00:16:33,910
kind of make it down as you have so your

303
00:16:31,839 --> 00:16:37,560
process allows you to reduce what you

304
00:16:33,910 --> 00:16:41,560
have to watch correct and respond to yes

305
00:16:37,560 --> 00:16:42,939
how do you get how do you figure out do

306
00:16:41,560 --> 00:16:45,459
you have to actually get attacked by the

307
00:16:42,940 --> 00:16:48,010
malware to create this isolation or are

308
00:16:45,459 --> 00:16:51,479
you reaching out to us someplace in the

309
00:16:48,010 --> 00:16:51,480
cloud and getting these indicators

310
00:16:52,500 --> 00:17:01,540
because event handling loop it's a

311
00:16:56,670 --> 00:17:04,569
program right you act like an analyzer

312
00:17:01,540 --> 00:17:08,349
we perform we use or we use a pin tool

313
00:17:04,569 --> 00:17:11,199
to analyze the binary and perform the

314
00:17:08,349 --> 00:17:14,589
instrumentation basically people will

315
00:17:11,199 --> 00:17:17,770
need finally writing to instruments the

316
00:17:14,589 --> 00:17:20,438
special system calls at the enter and

317
00:17:17,770 --> 00:17:25,030
the at the exit point of the event

318
00:17:20,439 --> 00:17:28,089
handling loop even a new loop is not

319
00:17:25,030 --> 00:17:32,710
very hard to identify because it's a I

320
00:17:28,089 --> 00:17:35,649
mean more than 90 of the execution will

321
00:17:32,710 --> 00:17:39,130
be the even handling loop so you just

322
00:17:35,650 --> 00:17:41,380
need to monitor the hot paths during

323
00:17:39,130 --> 00:17:45,190
runtime use a pin tool and you can

324
00:17:41,380 --> 00:17:46,570
easily identify the this corrosion every

325
00:17:45,190 --> 00:17:48,550
phone is what I think you told me to

326
00:17:46,570 --> 00:17:50,070
make sure I have it correctly so what

327
00:17:48,550 --> 00:17:51,899
you're saying is this

328
00:17:50,070 --> 00:17:55,260
this loop that you've identified as an

329
00:17:51,900 --> 00:17:56,160
event is identifiable so that you can

330
00:17:55,260 --> 00:17:58,680
see it coming

331
00:17:56,160 --> 00:18:05,940
potentially before it happens yes thank

332
00:17:58,680 --> 00:18:09,360
you and well I create we have been using

333
00:18:05,940 --> 00:18:13,170
people for a long time it works pretty

334
00:18:09,360 --> 00:18:15,830
well to solve the dependency explosion

335
00:18:13,170 --> 00:18:18,660
problem but it has many limitations

336
00:18:15,830 --> 00:18:22,889
first of all it has many low-level

337
00:18:18,660 --> 00:18:25,940
events at the GUI programs all the most

338
00:18:22,890 --> 00:18:28,740
click keyboard strokes I created

339
00:18:25,940 --> 00:18:31,590
external events the even having a loop

340
00:18:28,740 --> 00:18:33,930
where I create have one even handler to

341
00:18:31,590 --> 00:18:36,840
process the event we've all generate

342
00:18:33,930 --> 00:18:39,870
many many low-level events those events

343
00:18:36,840 --> 00:18:42,780
cannot directly be mapped to the

344
00:18:39,870 --> 00:18:44,790
high-level events we actually we we

345
00:18:42,780 --> 00:18:48,180
general graph actually to understand

346
00:18:44,790 --> 00:18:51,690
user intentions like butter those

347
00:18:48,180 --> 00:18:53,880
low-level events actually is a makes the

348
00:18:51,690 --> 00:18:56,790
graph even harder actually for example

349
00:18:53,880 --> 00:19:00,870
you are typing you are typing a URL in

350
00:18:56,790 --> 00:19:03,870
Firefox although every keystroke will be

351
00:19:00,870 --> 00:19:06,840
one exclusion unit you have to change

352
00:19:03,870 --> 00:19:11,820
them to actually get who know you're

353
00:19:06,840 --> 00:19:14,540
actually typing here the second way is

354
00:19:11,820 --> 00:19:17,399
for the in her unit dependences in

355
00:19:14,540 --> 00:19:19,590
really dependency is very hard it's

356
00:19:17,400 --> 00:19:24,180
because the inter unity dependency has

357
00:19:19,590 --> 00:19:26,220
to has to be a memory location interview

358
00:19:24,180 --> 00:19:30,060
it you have to monitor all the memory

359
00:19:26,220 --> 00:19:33,500
accesses to to actually identify all the

360
00:19:30,060 --> 00:19:36,149
read and write events and the constantly

361
00:19:33,500 --> 00:19:39,090
finds a constant relationship between

362
00:19:36,150 --> 00:19:42,120
two different units and identify such in

363
00:19:39,090 --> 00:19:45,600
her unit dependence so one of us we have

364
00:19:42,120 --> 00:19:48,899
to actually have a hundreds to thousands

365
00:19:45,600 --> 00:19:51,780
test cases and the user option to to

366
00:19:48,900 --> 00:19:55,830
monitor all the memory accesses the

367
00:19:51,780 --> 00:19:57,970
printer is a pretty slow for people who

368
00:19:55,830 --> 00:20:01,178
haven't used the control I guess

369
00:19:57,970 --> 00:20:03,700
about ten times slower so imagine you're

370
00:20:01,179 --> 00:20:06,519
using Firefox like 10 times slower it's

371
00:20:03,700 --> 00:20:09,940
horrible it's not a very good experience

372
00:20:06,519 --> 00:20:12,090
so the process to identify the entire

373
00:20:09,940 --> 00:20:18,850
unit dependence is actually very heavy

374
00:20:12,090 --> 00:20:23,289
and as a people also generates many many

375
00:20:18,850 --> 00:20:26,678
useless units example movements those

376
00:20:23,289 --> 00:20:29,379
are signals from the hardware I also you

377
00:20:26,679 --> 00:20:34,690
know external inputs this will make a

378
00:20:29,379 --> 00:20:39,039
lot horrible unnecessary units so what

379
00:20:34,690 --> 00:20:41,830
is a very desired from the inspector is

380
00:20:39,039 --> 00:20:45,220
from the investigators a point of view

381
00:20:41,830 --> 00:20:48,039
so first of all we want to have a

382
00:20:45,220 --> 00:20:50,259
meaningful graph basically where you see

383
00:20:48,039 --> 00:20:52,539
the graph you know what happens that's

384
00:20:50,259 --> 00:20:53,409
what that work is a best gold like for

385
00:20:52,539 --> 00:20:55,629
Firefox

386
00:20:53,409 --> 00:20:58,029
if you see one not in the graph okay we

387
00:20:55,629 --> 00:21:00,789
know it's a it's one time over we know

388
00:20:58,029 --> 00:21:02,909
is one page you have better people just

389
00:21:00,789 --> 00:21:06,879
directly understand okay this socket is

390
00:21:02,909 --> 00:21:12,879
representing one page oh it's a one tab

391
00:21:06,879 --> 00:21:14,649
and the second is investigating a

392
00:21:12,879 --> 00:21:15,629
clearly requires many different

393
00:21:14,649 --> 00:21:18,489
perspectives

394
00:21:15,629 --> 00:21:21,299
sometimes fine-grain will be good

395
00:21:18,490 --> 00:21:24,700
sometimes that tab green

396
00:21:21,299 --> 00:21:26,350
world-conquering will be better so it

397
00:21:24,700 --> 00:21:29,889
totally depends on the different types

398
00:21:26,350 --> 00:21:33,610
of attacks and also I created this is

399
00:21:29,889 --> 00:21:36,729
related with a concert a model where you

400
00:21:33,610 --> 00:21:38,620
want to track the causality or not also

401
00:21:36,730 --> 00:21:41,259
for the course at here we also want to

402
00:21:38,620 --> 00:21:44,439
remove the training process for in her

403
00:21:41,259 --> 00:21:48,399
unit dependence and then we want to make

404
00:21:44,440 --> 00:21:51,909
the lock smaller this order removes all

405
00:21:48,399 --> 00:21:55,268
the unnecessary units this will not only

406
00:21:51,909 --> 00:21:57,879
remove the mean I mean entries from the

407
00:21:55,269 --> 00:21:59,639
lock to reduce the space overhead but

408
00:21:57,879 --> 00:22:02,860
also remove the unnecessary

409
00:21:59,639 --> 00:22:06,750
instrumentations this well save some of

410
00:22:02,860 --> 00:22:09,469
the random overhead I'm she is a

411
00:22:06,750 --> 00:22:11,780
proposed based on

412
00:22:09,470 --> 00:22:13,730
that these are the goals we want it's

413
00:22:11,780 --> 00:22:16,480
actually inspired by process isolation

414
00:22:13,730 --> 00:22:20,030
mechanism in current operating systems

415
00:22:16,480 --> 00:22:22,640
the basic idea is to let the

416
00:22:20,030 --> 00:22:25,820
investigator to define what you want to

417
00:22:22,640 --> 00:22:29,419
trace what is a execution unit you do

418
00:22:25,820 --> 00:22:32,418
that you want in his program so we call

419
00:22:29,419 --> 00:22:34,309
this a user define the task so we were

420
00:22:32,419 --> 00:22:39,320
petitioning the program based on the

421
00:22:34,309 --> 00:22:42,168
definition by if you define different

422
00:22:39,320 --> 00:22:44,770
tasks actually we can put in a program

423
00:22:42,169 --> 00:22:47,240
in different ways those well provides

424
00:22:44,770 --> 00:22:50,870
investigators different perspectives to

425
00:22:47,240 --> 00:22:53,030
look at the attack and the task is URI

426
00:22:50,870 --> 00:22:55,639
represented by different types of data

427
00:22:53,030 --> 00:23:01,100
structures like Firefox web page tab

428
00:22:55,640 --> 00:23:04,610
window or individual Dom elements the

429
00:23:01,100 --> 00:23:07,639
basic workflow is a programmers all the

430
00:23:04,610 --> 00:23:10,340
investigators first will have to analyze

431
00:23:07,640 --> 00:23:14,510
the program to tell us okay this is a

432
00:23:10,340 --> 00:23:19,789
perspective or the task I want and then

433
00:23:14,510 --> 00:23:23,600
we will use our LLVM chill with some

434
00:23:19,789 --> 00:23:26,179
customized passes to actually compile

435
00:23:23,600 --> 00:23:28,908
the program perform the analysis and the

436
00:23:26,179 --> 00:23:31,309
instrumentation and then generated our

437
00:23:28,909 --> 00:23:35,659
executables the executable we're

438
00:23:31,309 --> 00:23:38,450
actively exposes unit information to the

439
00:23:35,659 --> 00:23:41,270
provenance system so the problem system

440
00:23:38,450 --> 00:23:45,169
will attract those information and will

441
00:23:41,270 --> 00:23:50,570
perform the analysis you know the events

442
00:23:45,169 --> 00:23:53,840
within individual units we also provided

443
00:23:50,570 --> 00:23:56,629
another minor is called a annotation

444
00:23:53,840 --> 00:24:00,530
minor to help the programmers annotate

445
00:23:56,630 --> 00:24:03,740
the program because I think it's not

446
00:24:00,530 --> 00:24:07,899
very easy to understand like the source

447
00:24:03,740 --> 00:24:07,900
code or Firefox or we

448
00:24:09,950 --> 00:24:16,520
so the first of our technique annotation

449
00:24:13,610 --> 00:24:20,389
and notation exactly very is very

450
00:24:16,520 --> 00:24:23,629
popular I think including Linux Firefox

451
00:24:20,390 --> 00:24:25,790
we basically all the software's

452
00:24:23,630 --> 00:24:28,580
recanting are using the language

453
00:24:25,790 --> 00:24:32,180
extension is the supported by GCC and

454
00:24:28,580 --> 00:24:35,570
compatriot beta most of the compilers is

455
00:24:32,180 --> 00:24:38,470
widely used for Firefox we have observed

456
00:24:35,570 --> 00:24:42,590
the more than 900 different types of

457
00:24:38,470 --> 00:24:45,080
annotations and well just an Isis tag

458
00:24:42,590 --> 00:24:48,560
class this annotation is to make sure

459
00:24:45,080 --> 00:24:52,179
the class is in the stack not in the hip

460
00:24:48,560 --> 00:24:57,919
it has more than 400 annotated classes

461
00:24:52,180 --> 00:25:01,220
and the the last bullet area shows the

462
00:24:57,920 --> 00:25:05,240
format of the annotation you can define

463
00:25:01,220 --> 00:25:08,270
your own annotation screen and perform

464
00:25:05,240 --> 00:25:15,170
analysis in the higher level the well

465
00:25:08,270 --> 00:25:17,629
add metadata in the IR so first let's

466
00:25:15,170 --> 00:25:22,550
talk about the annotations we need for

467
00:25:17,630 --> 00:25:24,440
this task as we said before our MPI is

468
00:25:22,550 --> 00:25:28,010
inspired by the operating system

469
00:25:24,440 --> 00:25:33,260
isolation mechanism so firstly reviews

470
00:25:28,010 --> 00:25:37,720
OS process model one process has its own

471
00:25:33,260 --> 00:25:41,270
ID to identify the process and whatever

472
00:25:37,720 --> 00:25:43,490
the scheduler choose another picks up

473
00:25:41,270 --> 00:25:46,580
another process will run it will update

474
00:25:43,490 --> 00:25:50,090
the current value in Linux kernel and

475
00:25:46,580 --> 00:25:55,639
this currently represents currently

476
00:25:50,090 --> 00:25:59,449
running process also processes can have

477
00:25:55,640 --> 00:26:05,720
IP can have a data exchange by using I

478
00:25:59,450 --> 00:26:08,240
pieces for example like pipes and the

479
00:26:05,720 --> 00:26:11,990
apps it has a very similar model

480
00:26:08,240 --> 00:26:15,200
application programs basically it gives

481
00:26:11,990 --> 00:26:21,500
with individual tasks those tasks are

482
00:26:15,200 --> 00:26:23,710
annotated and to identify individual

483
00:26:21,500 --> 00:26:26,830
tasks we define one a notation

484
00:26:23,710 --> 00:26:29,830
called identifiers this it's just like

485
00:26:26,830 --> 00:26:32,529
the PID in the process model to identify

486
00:26:29,830 --> 00:26:35,830
the individual tasks and the one

487
00:26:32,529 --> 00:26:40,480
indicator to indicate the switch between

488
00:26:35,830 --> 00:26:43,510
tasks and similarly we have IPC's and we

489
00:26:40,480 --> 00:26:50,590
have the channel annotation representing

490
00:26:43,510 --> 00:26:52,779
the data exchanges channel indicator is

491
00:26:50,590 --> 00:26:55,029
just like indicator is just like the

492
00:26:52,779 --> 00:26:57,130
current variable you know s it basically

493
00:26:55,029 --> 00:26:59,830
told us the okay while switching in the

494
00:26:57,130 --> 00:27:01,480
contacts in the application so this is a

495
00:26:59,830 --> 00:27:04,049
place we actually perform our

496
00:27:01,480 --> 00:27:07,240
instrumentation when you tell the

497
00:27:04,049 --> 00:27:10,299
problems the system oh hey the contacts

498
00:27:07,240 --> 00:27:11,980
is changing and identifiers basically

499
00:27:10,299 --> 00:27:14,408
each other you know which task it

500
00:27:11,980 --> 00:27:16,090
belongs to so this is also some of the

501
00:27:14,409 --> 00:27:18,340
information when you tell the provenance

502
00:27:16,090 --> 00:27:20,590
system when you Cal hey

503
00:27:18,340 --> 00:27:24,459
I'm currently working on this task task

504
00:27:20,590 --> 00:27:27,539
of a or task B or task C and the third

505
00:27:24,460 --> 00:27:31,720
one is that channel is that like IPC's i

506
00:27:27,539 --> 00:27:35,350
think we are good here right so very

507
00:27:31,720 --> 00:27:40,779
easy to understand the annotations the

508
00:27:35,350 --> 00:27:43,389
example is a whim so you can have one

509
00:27:40,779 --> 00:27:45,640
you can have one window but opening

510
00:27:43,390 --> 00:27:47,350
different the buffers and the different

511
00:27:45,640 --> 00:27:50,860
power you can edit in different the

512
00:27:47,350 --> 00:27:52,959
files so if we perform each buffer is

513
00:27:50,860 --> 00:27:55,719
represented by the above T data

514
00:27:52,960 --> 00:27:57,970
structure and in the buff kid has its

515
00:27:55,720 --> 00:27:59,559
own ID basically you need something to

516
00:27:57,970 --> 00:28:03,100
identify that there's a structure

517
00:27:59,559 --> 00:28:07,899
instances so the path ID will be

518
00:28:03,100 --> 00:28:10,629
annotated as identifiers and there is

519
00:28:07,899 --> 00:28:14,350
one global variable in we call her path

520
00:28:10,630 --> 00:28:16,990
it solves a type of poverty so pointer

521
00:28:14,350 --> 00:28:20,799
is actually pointing to the current

522
00:28:16,990 --> 00:28:23,110
buffer the user is editing basically

523
00:28:20,799 --> 00:28:27,190
tells which which buffer the user is

524
00:28:23,110 --> 00:28:30,219
working on and you will have a channel

525
00:28:27,190 --> 00:28:32,860
annotation it's because of whims in

526
00:28:30,220 --> 00:28:37,440
building clipboard so you win if you

527
00:28:32,860 --> 00:28:39,330
have if you use a copy and paste

528
00:28:37,440 --> 00:28:41,730
you can actually use a clipboard the

529
00:28:39,330 --> 00:28:45,539
building wing to copy and paste the

530
00:28:41,730 --> 00:28:49,259
contents will change data between

531
00:28:45,539 --> 00:28:51,809
different patterns the pepper is a new

532
00:28:49,259 --> 00:28:53,940
whim is known as the register young

533
00:28:51,809 --> 00:28:56,370
register you know we annotate the

534
00:28:53,940 --> 00:29:00,960
current young young register as a

535
00:28:56,370 --> 00:29:05,070
channel variable so this is an example

536
00:29:00,960 --> 00:29:09,210
of the context switch so 2ee command Y

537
00:29:05,070 --> 00:29:11,220
means added will tablished manual switch

538
00:29:09,210 --> 00:29:14,059
or buffer so the cur path will be

539
00:29:11,220 --> 00:29:17,100
assigned a new value we were all

540
00:29:14,059 --> 00:29:20,009
instrument in some code after this

541
00:29:17,100 --> 00:29:22,199
statement so basically it well first the

542
00:29:20,009 --> 00:29:25,019
check if the buffer is really changing

543
00:29:22,200 --> 00:29:27,870
or not if you changes directly exposed

544
00:29:25,019 --> 00:29:31,769
to the current buffer ID basic the new

545
00:29:27,870 --> 00:29:33,658
buffer ID to the provenance system for

546
00:29:31,769 --> 00:29:36,000
different problems the system we

547
00:29:33,659 --> 00:29:39,269
actually use different functions the

548
00:29:36,000 --> 00:29:42,120
functions are different for links audits

549
00:29:39,269 --> 00:29:46,860
we use accuses MacColl with the legal

550
00:29:42,120 --> 00:29:50,039
parameters negative 100 is a I mean

551
00:29:46,860 --> 00:29:52,439
although she IDs will be larger than 100

552
00:29:50,039 --> 00:29:55,139
what we like than 0 so this value is

553
00:29:52,440 --> 00:29:57,750
illegal so whenever it calls to a kernel

554
00:29:55,139 --> 00:30:03,539
is what directly I create returns so to

555
00:29:57,750 --> 00:30:06,690
save some time to help the annotation we

556
00:30:03,539 --> 00:30:08,820
develop the annotation minder as we said

557
00:30:06,690 --> 00:30:11,639
before those tasks are usually

558
00:30:08,820 --> 00:30:14,009
represented by some application data

559
00:30:11,639 --> 00:30:17,610
structures like the bath T we shown

560
00:30:14,009 --> 00:30:20,580
before in wim our annotation minor is

561
00:30:17,610 --> 00:30:25,229
you to help developers find such data

562
00:30:20,580 --> 00:30:27,840
structures so we also use wim as an

563
00:30:25,230 --> 00:30:31,320
example here we are using the

564
00:30:27,840 --> 00:30:33,509
differential analysis first of all we

565
00:30:31,320 --> 00:30:36,210
generally the one test case testing is a

566
00:30:33,509 --> 00:30:39,330
we perform very traditional and very

567
00:30:36,210 --> 00:30:43,440
normal operations open edit and save the

568
00:30:39,330 --> 00:30:45,720
file and in the runtime we will monitor

569
00:30:43,440 --> 00:30:49,529
all the different types of data

570
00:30:45,720 --> 00:30:51,060
structures we will not we were lock the

571
00:30:49,529 --> 00:30:56,940
number of instances

572
00:30:51,060 --> 00:31:00,139
for this type and for type test B we

573
00:30:56,940 --> 00:31:03,780
actually basically duplicate the task

574
00:31:00,140 --> 00:31:06,990
twice we do the testing in a twice but

575
00:31:03,780 --> 00:31:08,580
in two different buffers so the Mirabeau

576
00:31:06,990 --> 00:31:11,100
here will be just remember all the

577
00:31:08,580 --> 00:31:14,850
offers and I ran at run time we also

578
00:31:11,100 --> 00:31:20,760
cracked such the number of instances for

579
00:31:14,850 --> 00:31:23,070
individual data structures and then we

580
00:31:20,760 --> 00:31:26,850
compare the two results and the merge is

581
00:31:23,070 --> 00:31:28,740
immune to one as you can see the only

582
00:31:26,850 --> 00:31:32,639
difference here is the number of buffers

583
00:31:28,740 --> 00:31:35,280
we basically double the number and many

584
00:31:32,640 --> 00:31:37,740
data structures where we will only have

585
00:31:35,280 --> 00:31:41,879
one instance it's not a related with the

586
00:31:37,740 --> 00:31:44,550
task if the data structure is related to

587
00:31:41,880 --> 00:31:47,430
the task the perspective you are using

588
00:31:44,550 --> 00:31:50,100
is actually the number in test case B

589
00:31:47,430 --> 00:31:53,340
will be the double of the number in test

590
00:31:50,100 --> 00:31:53,730
case a so I could you're adding in two

591
00:31:53,340 --> 00:31:56,300
wells

592
00:31:53,730 --> 00:32:00,810
obviously you will have two opens right

593
00:31:56,300 --> 00:32:03,330
so this is intuition well for like

594
00:32:00,810 --> 00:32:05,850
examples like logging you only have one

595
00:32:03,330 --> 00:32:08,730
log buffer in your application obviously

596
00:32:05,850 --> 00:32:11,990
no matter how many how many files you

597
00:32:08,730 --> 00:32:15,330
are editing is is going to be only one

598
00:32:11,990 --> 00:32:17,880
and we remove a Muslim and show some

599
00:32:15,330 --> 00:32:19,679
candidates in practice we found even

600
00:32:17,880 --> 00:32:23,790
though we remove some of them we still

601
00:32:19,680 --> 00:32:26,250
have many this is because uh this is

602
00:32:23,790 --> 00:32:29,909
actually because like the above T case

603
00:32:26,250 --> 00:32:33,330
it has the many fields like post he is

604
00:32:29,910 --> 00:32:36,780
representing the current editing place

605
00:32:33,330 --> 00:32:39,419
like none line it has two fields line

606
00:32:36,780 --> 00:32:41,340
and a collab number I mean if you have

607
00:32:39,420 --> 00:32:44,640
two above T you're definitely gonna have

608
00:32:41,340 --> 00:32:47,520
a to positive because it's one field so

609
00:32:44,640 --> 00:32:49,350
we perform analysis another analysis

610
00:32:47,520 --> 00:32:51,990
basically which has tried to identify

611
00:32:49,350 --> 00:32:55,919
the top level data structure and they

612
00:32:51,990 --> 00:32:58,530
report it to the user by doing this

613
00:32:55,920 --> 00:33:02,510
supporti those will be removed only at

614
00:32:58,530 --> 00:33:07,080
above T will be reported and

615
00:33:02,510 --> 00:33:11,100
now I'm gonna talk about a thread model

616
00:33:07,080 --> 00:33:13,740
in applications this is am using Firefox

617
00:33:11,100 --> 00:33:15,740
here because a woman's just a single

618
00:33:13,740 --> 00:33:21,870
process is too easy

619
00:33:15,740 --> 00:33:25,890
Firefox first let's review the page

620
00:33:21,870 --> 00:33:27,959
loading process first denied when you

621
00:33:25,890 --> 00:33:30,900
type the URL it well first the quarry

622
00:33:27,960 --> 00:33:33,870
the DNS is where I create since when

623
00:33:30,900 --> 00:33:36,330
inquiry to Adina's read the DNS read

624
00:33:33,870 --> 00:33:38,489
will perform the query and the retailer

625
00:33:36,330 --> 00:33:40,830
widows if you are using different

626
00:33:38,490 --> 00:33:44,670
attempts the different habit where all

627
00:33:40,830 --> 00:33:48,919
posts events to a DNS read and when they

628
00:33:44,670 --> 00:33:51,390
return universe start to load and

629
00:33:48,920 --> 00:33:55,380
firstly we will create a sockets and the

630
00:33:51,390 --> 00:33:58,620
folder communication and then send HTTP

631
00:33:55,380 --> 00:34:02,630
requests to the servers the socket is

632
00:33:58,620 --> 00:34:05,909
right here is accurate for creating and

633
00:34:02,630 --> 00:34:09,890
communicate with the remote servers the

634
00:34:05,910 --> 00:34:13,980
main thread is a urologist for rendering

635
00:34:09,889 --> 00:34:16,409
this is a for performance I mean we all

636
00:34:13,980 --> 00:34:18,929
you will use Firefox basically we open

637
00:34:16,409 --> 00:34:21,330
like 10 tabs at the same time I mean

638
00:34:18,929 --> 00:34:25,980
when it has a active

639
00:34:21,330 --> 00:34:29,130
you can't just depends on with only once

640
00:34:25,980 --> 00:34:33,918
ready to do this the response time will

641
00:34:29,130 --> 00:34:37,410
be too long it's basically I use both so

642
00:34:33,918 --> 00:34:39,330
but if you review the DNS read and the

643
00:34:37,409 --> 00:34:42,089
sockets read here

644
00:34:39,330 --> 00:34:44,610
we were found some problem in her crib

645
00:34:42,090 --> 00:34:46,669
it just received events and is then

646
00:34:44,610 --> 00:34:49,760
processing events and didn't return it

647
00:34:46,668 --> 00:34:53,069
actually doesn't know the global context

648
00:34:49,760 --> 00:34:55,410
like Satine has read the receive the

649
00:34:53,070 --> 00:34:58,230
individual events but frankly speaking

650
00:34:55,409 --> 00:35:03,509
it doesn't really know which tab is is

651
00:34:58,230 --> 00:35:05,340
requesting this DNS and we call those

652
00:35:03,510 --> 00:35:08,250
threads workers rest though the workers

653
00:35:05,340 --> 00:35:10,320
read the only work on one tab or a

654
00:35:08,250 --> 00:35:12,570
create a very limiting the number of

655
00:35:10,320 --> 00:35:13,380
what helps and those happen earlier very

656
00:35:12,570 --> 00:35:16,469
similar

657
00:35:13,380 --> 00:35:20,009
and those tasks we call them subtasks

658
00:35:16,469 --> 00:35:23,279
they are not like a top level tasks

659
00:35:20,009 --> 00:35:28,469
table what has well be like caps or

660
00:35:23,279 --> 00:35:31,199
pages but those are those the top level

661
00:35:28,469 --> 00:35:34,259
tasks will be divided into individual

662
00:35:31,199 --> 00:35:36,359
subtasks and the dispatch to individual

663
00:35:34,259 --> 00:35:38,759
stress and there's a main thread well

664
00:35:36,359 --> 00:35:43,799
gather the information and then render

665
00:35:38,759 --> 00:35:46,739
the page they don't really know the

666
00:35:43,799 --> 00:35:49,349
global context so when we attribute the

667
00:35:46,739 --> 00:35:50,999
events happen in the worker thread we

668
00:35:49,349 --> 00:35:53,759
actually don't know how to attribute

669
00:35:50,999 --> 00:35:55,288
them to the global task which we

670
00:35:53,759 --> 00:35:58,259
actually don't know the global context

671
00:35:55,289 --> 00:36:01,739
to solve this problem we introduce the

672
00:35:58,259 --> 00:36:03,809
delegator annotation delegate annotation

673
00:36:01,739 --> 00:36:06,930
basically we need to instrument is a

674
00:36:03,809 --> 00:36:09,180
data structure for the subtasks to

675
00:36:06,930 --> 00:36:13,348
actually inherit the task identifier

676
00:36:09,180 --> 00:36:16,198
from the top level data structure so

677
00:36:13,349 --> 00:36:19,650
this is an example the left hand side

678
00:36:16,199 --> 00:36:23,489
actually shows as connect events in

679
00:36:19,650 --> 00:36:27,779
Firefox is a connection event so HTTP

680
00:36:23,489 --> 00:36:31,289
FTP and wherever the main thread wants

681
00:36:27,779 --> 00:36:34,349
to connect to something the well stanza

682
00:36:31,289 --> 00:36:38,039
it well posts the connectors connect

683
00:36:34,349 --> 00:36:39,779
events to the socket is read previously

684
00:36:38,039 --> 00:36:46,140
we know the socket read then know the

685
00:36:39,779 --> 00:36:49,589
global context but with the rest

686
00:36:46,140 --> 00:36:52,410
connecting events is a I mean whenever

687
00:36:49,589 --> 00:36:57,328
we have a new instance of the delegator

688
00:36:52,410 --> 00:37:01,229
class we instrument another line to

689
00:36:57,329 --> 00:37:04,170
inherit the current ID inherent the

690
00:37:01,229 --> 00:37:06,328
current global context and the when this

691
00:37:04,170 --> 00:37:09,539
event is that this is eventually

692
00:37:06,329 --> 00:37:12,359
dispatched to the workers read the

693
00:37:09,539 --> 00:37:14,999
workers radically by nature it will know

694
00:37:12,359 --> 00:37:16,949
the global context and all the events

695
00:37:14,999 --> 00:37:19,410
happen in the workers read can be

696
00:37:16,949 --> 00:37:20,609
correctly attributed to the global

697
00:37:19,410 --> 00:37:23,520
identifier

698
00:37:20,609 --> 00:37:25,770
by doing so all the events

699
00:37:23,520 --> 00:37:29,070
even for multi-threaded programs all the

700
00:37:25,770 --> 00:37:33,900
events can be correctly attributed to

701
00:37:29,070 --> 00:37:39,930
the global context and those well form

702
00:37:33,900 --> 00:37:42,869
why you need and in the rest about you

703
00:37:39,930 --> 00:37:46,529
some evaluations first annotation

704
00:37:42,869 --> 00:37:50,310
efforts surprisingly another average is

705
00:37:46,530 --> 00:37:53,420
kind of pretty small the first column is

706
00:37:50,310 --> 00:37:58,850
a vacation the second column is the

707
00:37:53,420 --> 00:38:02,910
program size my read by Lionel code and

708
00:37:58,850 --> 00:38:05,730
those four column shows annotations for

709
00:38:02,910 --> 00:38:08,520
different types IDs identifiers and

710
00:38:05,730 --> 00:38:12,470
these indicator channel variable and

711
00:38:08,520 --> 00:38:15,360
delegate errs the last one shows

712
00:38:12,470 --> 00:38:20,730
instrumented code instrument in the

713
00:38:15,360 --> 00:38:23,640
places so our hair we amp as well

714
00:38:20,730 --> 00:38:27,090
automatically performs an ER analysis

715
00:38:23,640 --> 00:38:29,250
and perform the instrumentation this

716
00:38:27,090 --> 00:38:32,460
table is just to show the annotation

717
00:38:29,250 --> 00:38:35,580
efforts it's pretty small but the

718
00:38:32,460 --> 00:38:38,250
instrumentation as you can see surely a

719
00:38:35,580 --> 00:38:40,440
few hundred to a few thousand so

720
00:38:38,250 --> 00:38:45,119
basically you cannot really do it

721
00:38:40,440 --> 00:38:48,540
manually and Firefox has a maximum

722
00:38:45,119 --> 00:38:52,430
number over annotation and also the

723
00:38:48,540 --> 00:38:55,020
instrumentation this is because

724
00:38:52,430 --> 00:39:00,299
complexity as you can see the language

725
00:38:55,020 --> 00:39:04,020
code or Firefox is very large it's a

726
00:39:00,300 --> 00:39:07,650
very big and complex program so this

727
00:39:04,020 --> 00:39:14,070
table shows the space overhead my space

728
00:39:07,650 --> 00:39:16,200
overhead actually cause um so we perform

729
00:39:14,070 --> 00:39:18,470
the instrumentation to tell the

730
00:39:16,200 --> 00:39:21,750
identified who the provenance system

731
00:39:18,470 --> 00:39:24,060
like links audiences on where we use the

732
00:39:21,750 --> 00:39:27,210
cue system call those are actually

733
00:39:24,060 --> 00:39:29,460
additional system events those well

734
00:39:27,210 --> 00:39:32,369
helps the analysis but it will also

735
00:39:29,460 --> 00:39:35,760
consume some space because it generates

736
00:39:32,369 --> 00:39:36,480
additional system events and we don't

737
00:39:35,760 --> 00:39:42,019
really want

738
00:39:36,480 --> 00:39:45,930
to many additional system events this

739
00:39:42,019 --> 00:39:48,538
evaluation just is used just to show the

740
00:39:45,930 --> 00:39:51,720
number of additional system events

741
00:39:48,539 --> 00:39:54,900
caused by the instrumentation the first

742
00:39:51,720 --> 00:39:57,899
column is number of the application the

743
00:39:54,900 --> 00:40:01,549
second one is perspective we use for NPI

744
00:39:57,900 --> 00:40:04,049
and the next who column issues a

745
00:40:01,549 --> 00:40:07,170
comparison with beep we use two

746
00:40:04,049 --> 00:40:08,788
different problems of systems why is the

747
00:40:07,170 --> 00:40:13,740
links or data system

748
00:40:08,789 --> 00:40:15,930
the other one is hyper so another very

749
00:40:13,740 --> 00:40:21,029
popular provenance isn't just published

750
00:40:15,930 --> 00:40:24,328
in Excel 2013 and the last two columns

751
00:40:21,029 --> 00:40:28,650
user and the numbers for MCI two

752
00:40:24,329 --> 00:40:33,690
different problems systems as you can

753
00:40:28,650 --> 00:40:36,809
see for Firefox the switch over had cost

754
00:40:33,690 --> 00:40:39,390
by people is a very high and the

755
00:40:36,809 --> 00:40:42,539
comparing with beep and P I perform is

756
00:40:39,390 --> 00:40:45,420
better this is because the low level

757
00:40:42,539 --> 00:40:47,759
events in Firefox mannerism can be

758
00:40:45,420 --> 00:40:49,130
accurately moved so we actually can

759
00:40:47,759 --> 00:40:50,250
remove those unnecessary

760
00:40:49,130 --> 00:40:53,970
instrumentations

761
00:40:50,250 --> 00:41:00,690
and makes a instrumentation lightweight

762
00:40:53,970 --> 00:41:03,299
but for other programs like bash in bash

763
00:41:00,690 --> 00:41:08,579
basically one even handling new who have

764
00:41:03,299 --> 00:41:10,400
just be one user command I mean it's

765
00:41:08,579 --> 00:41:13,619
already a very high level

766
00:41:10,400 --> 00:41:15,720
so whatever so the MPI partition and

767
00:41:13,619 --> 00:41:19,710
people protection will be very similar

768
00:41:15,720 --> 00:41:24,269
because be but an early generator many

769
00:41:19,710 --> 00:41:26,549
redundant events this is an evaluation

770
00:41:24,269 --> 00:41:29,399
for the space overhead by using

771
00:41:26,549 --> 00:41:32,190
different perspective basically a node

772
00:41:29,400 --> 00:41:35,220
hitting different data structures the

773
00:41:32,190 --> 00:41:38,759
for Firefox we have a window and a tab

774
00:41:35,220 --> 00:41:41,788
and element window basically means a

775
00:41:38,759 --> 00:41:45,210
top-level big window using the system

776
00:41:41,789 --> 00:41:47,480
hiders and stuff and the animals

777
00:41:45,210 --> 00:41:51,349
actually individual Dom elements

778
00:41:47,480 --> 00:41:55,190
including iframes all the placeholders

779
00:41:51,349 --> 00:41:59,480
and also the TVs and the images the

780
00:41:55,190 --> 00:42:01,640
links everything very heavy and the

781
00:41:59,480 --> 00:42:07,970
Apache we use the connection and a

782
00:42:01,640 --> 00:42:11,180
request or since HTTP 1.1 a connection

783
00:42:07,970 --> 00:42:14,230
can be long living and have many many

784
00:42:11,180 --> 00:42:17,629
requests so those are the two

785
00:42:14,230 --> 00:42:20,510
perspectives using Apache as you can see

786
00:42:17,630 --> 00:42:23,510
it's a more fine-grained basically the

787
00:42:20,510 --> 00:42:28,390
overhead will be very high except Tom is

788
00:42:23,510 --> 00:42:30,980
basically for it's more than 40% and

789
00:42:28,390 --> 00:42:32,839
this is the evaluation for the runtime

790
00:42:30,980 --> 00:42:37,579
caused by a very caused by

791
00:42:32,839 --> 00:42:42,980
instrumentation in general is small less

792
00:42:37,579 --> 00:42:44,839
than 1% which means it's good and the

793
00:42:42,980 --> 00:42:48,019
last one will be just issuing a case

794
00:42:44,839 --> 00:42:51,288
study no just a very simplified example

795
00:42:48,019 --> 00:42:53,569
as before we use Firefox download a few

796
00:42:51,289 --> 00:42:56,599
files and the download some torrents use

797
00:42:53,569 --> 00:42:58,369
the transmission program this is a

798
00:42:56,599 --> 00:43:02,509
traditional program this is a

799
00:42:58,369 --> 00:43:06,769
traditional solution the 202 processes

800
00:43:02,509 --> 00:43:11,059
causes a lot of iboga dependencies this

801
00:43:06,769 --> 00:43:14,149
is a beep it's accurate pretty it's

802
00:43:11,059 --> 00:43:16,819
accurate pretty it's correct all the

803
00:43:14,150 --> 00:43:19,460
dependencies are correct it's just the

804
00:43:16,819 --> 00:43:23,509
number of internal events in Firefox

805
00:43:19,460 --> 00:43:28,009
causes this problem makes it looks even

806
00:43:23,509 --> 00:43:31,039
worse than traditional this is MPI MPI

807
00:43:28,009 --> 00:43:34,339
using tab perspective so we first use a

808
00:43:31,039 --> 00:43:38,599
being to open to search and open a few

809
00:43:34,339 --> 00:43:41,750
tabs and download the files and use a

810
00:43:38,599 --> 00:43:44,029
transparent program it's much more clear

811
00:43:41,750 --> 00:43:49,609
because we remove all the redundant

812
00:43:44,029 --> 00:43:53,539
events in the in peope and this one is

813
00:43:49,609 --> 00:43:55,880
another perspective using window using

814
00:43:53,539 --> 00:43:58,759
basically the websites you will it every

815
00:43:55,880 --> 00:44:00,440
we can merge different merge all the

816
00:43:58,759 --> 00:44:04,339
tabs visiting the

817
00:44:00,440 --> 00:44:08,150
websites into OneNote makes is a source

818
00:44:04,339 --> 00:44:10,700
of the downloaded files even clearer so

819
00:44:08,150 --> 00:44:13,750
this is just to show a power over using

820
00:44:10,700 --> 00:44:16,520
different perspectives

821
00:44:13,750 --> 00:44:19,210
there are many related works if your

822
00:44:16,520 --> 00:44:22,520
interest you can read some of them and

823
00:44:19,210 --> 00:44:24,740
of course we have limitations first of

824
00:44:22,520 --> 00:44:28,660
all we need a source code it's a pistol

825
00:44:24,740 --> 00:44:31,578
well again we have two and I think is

826
00:44:28,660 --> 00:44:36,170
necessary because the user have to

827
00:44:31,579 --> 00:44:38,210
provide the perspective it was the

828
00:44:36,170 --> 00:44:41,329
second wine sanitation is not a fully

829
00:44:38,210 --> 00:44:44,420
automated we have the minder but with

830
00:44:41,329 --> 00:44:46,520
you it's few we just identify the data

831
00:44:44,420 --> 00:44:49,010
structure actually we need to identify

832
00:44:46,520 --> 00:44:52,910
the indicator and identify our variables

833
00:44:49,010 --> 00:44:56,619
still one more step to go and as a

834
00:44:52,910 --> 00:44:58,910
conclusion we propose the MPI a

835
00:44:56,619 --> 00:45:02,240
execution partitioning technique based

836
00:44:58,910 --> 00:45:04,368
on high level data structures it allow

837
00:45:02,240 --> 00:45:06,979
the unit vector annotates the high level

838
00:45:04,369 --> 00:45:10,190
data structures and we will perform the

839
00:45:06,980 --> 00:45:13,310
instrumentation to capture the events

840
00:45:10,190 --> 00:45:16,760
including unit contact switch and its

841
00:45:13,310 --> 00:45:19,549
delegation we implemented the prototype

842
00:45:16,760 --> 00:45:24,260
and the evaluation shows we actually

843
00:45:19,550 --> 00:45:26,240
support pattern in better we have we

844
00:45:24,260 --> 00:45:29,030
have better investigation support by

845
00:45:26,240 --> 00:45:31,790
providing different perspectives and the

846
00:45:29,030 --> 00:45:34,190
overhead is a pretty low especially

847
00:45:31,790 --> 00:45:37,460
comparing with our state-of-the-art beep

848
00:45:34,190 --> 00:45:40,690
and thank you I'm going to take

849
00:45:37,460 --> 00:45:40,690
questions if you have

850
00:45:43,280 --> 00:45:46,669
[Applause]

851
00:45:56,970 --> 00:46:04,120
are you looking at other browsers

852
00:45:59,050 --> 00:46:06,820
besides Firefox yes we are in the paper

853
00:46:04,120 --> 00:46:09,339
we have many many more emotion results

854
00:46:06,820 --> 00:46:12,790
the slides initially only a small

855
00:46:09,340 --> 00:46:15,900
portion of it we we have a other browser

856
00:46:12,790 --> 00:46:20,320
like WM we didn't really look into

857
00:46:15,900 --> 00:46:24,100
Chrome it's because the execution mode

858
00:46:20,320 --> 00:46:26,560
of a chrome is well partition already so

859
00:46:24,100 --> 00:46:30,100
chrome area you can compel the

860
00:46:26,560 --> 00:46:32,560
open-source version by I clearly have

861
00:46:30,100 --> 00:46:35,350
different compared flags you can't

862
00:46:32,560 --> 00:46:39,490
really have an Indian one process just

863
00:46:35,350 --> 00:46:43,029
for one tab so it's a well position

864
00:46:39,490 --> 00:46:47,350
already also we see a sandbox I mean I

865
00:46:43,030 --> 00:46:52,600
like the design but it makes a life

866
00:46:47,350 --> 00:46:54,750
easier but yeah that up high here thank

867
00:46:52,600 --> 00:46:54,750
you

868
00:46:57,480 --> 00:47:04,020
alright so i all ask a few questions so

869
00:47:04,410 --> 00:47:10,930
you mentioned that you need the source

870
00:47:07,780 --> 00:47:13,660
code and you rely on programmers to kind

871
00:47:10,930 --> 00:47:17,319
of annotate the source code yeah I was

872
00:47:13,660 --> 00:47:20,440
curious if you've done any investigation

873
00:47:17,320 --> 00:47:24,070
into how accurate programmer

874
00:47:20,440 --> 00:47:25,720
investigations or programmer annotations

875
00:47:24,070 --> 00:47:28,060
are you know what happens when the

876
00:47:25,720 --> 00:47:31,089
programmer makes a mistake do you start

877
00:47:28,060 --> 00:47:37,900
to miss critical events in the log okay

878
00:47:31,090 --> 00:47:40,960
thank you question so the API is heavily

879
00:47:37,900 --> 00:47:43,990
depends on annotations we developed as a

880
00:47:40,960 --> 00:47:47,110
notation miner try to and who makes a

881
00:47:43,990 --> 00:47:51,040
try to mix up errands as less as

882
00:47:47,110 --> 00:47:56,530
possible but this too is unavoidable I

883
00:47:51,040 --> 00:47:59,470
have to say this but what I want to

884
00:47:56,530 --> 00:48:02,980
point at point out is I created a log is

885
00:47:59,470 --> 00:48:06,700
to complete but you are only affected

886
00:48:02,980 --> 00:48:08,950
analysis so maybe when one event is

887
00:48:06,700 --> 00:48:11,859
attributed to another different unit

888
00:48:08,950 --> 00:48:13,629
still the event is in the log if you

889
00:48:11,860 --> 00:48:16,060
want you can still generates the

890
00:48:13,630 --> 00:48:19,270
generate the coral graph using the

891
00:48:16,060 --> 00:48:21,700
traditional approach and the graph will

892
00:48:19,270 --> 00:48:23,920
be still complete so we don't really

893
00:48:21,700 --> 00:48:30,069
lose anything it's just as an accuracy

894
00:48:23,920 --> 00:48:32,950
of the analyze the results thank you

895
00:48:30,070 --> 00:48:35,500
alright any other questions all right

896
00:48:32,950 --> 00:48:40,960
let's think she change again okay

897
00:48:35,500 --> 00:48:40,960
[Applause]

898
00:48:47,220 --> 00:48:49,279
you

