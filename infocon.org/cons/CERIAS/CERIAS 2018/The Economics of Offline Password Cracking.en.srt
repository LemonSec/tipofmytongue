1
00:00:06,210 --> 00:00:10,680
all right we'll get started so I

2
00:00:08,639 --> 00:00:12,480
appreciate you guys coming in tonight I

3
00:00:10,680 --> 00:00:14,550
didn't introduce myself last week so my

4
00:00:12,480 --> 00:00:16,290
name is Jerry Hahn and I work for Sirius

5
00:00:14,550 --> 00:00:17,730
I work for the corporate relations or

6
00:00:16,290 --> 00:00:20,279
with the corporate relations group there

7
00:00:17,730 --> 00:00:21,779
so I do a lot of the work with the our

8
00:00:20,279 --> 00:00:25,020
corporate partners that help us support

9
00:00:21,779 --> 00:00:26,520
Sirius and do the things we do so it's

10
00:00:25,020 --> 00:00:27,840
my pleasure to introduce the speaker

11
00:00:26,520 --> 00:00:30,000
today this has been Harsha

12
00:00:27,840 --> 00:00:31,890
he's a computer science PhD student and

13
00:00:30,000 --> 00:00:34,530
he's advised by Professor Jeremiah

14
00:00:31,890 --> 00:00:36,000
blocky he's currently works on password

15
00:00:34,530 --> 00:00:37,890
security and cryptographic hash

16
00:00:36,000 --> 00:00:39,809
functions before coming to Purdue he

17
00:00:37,890 --> 00:00:42,149
worked as a distributed sensor networks

18
00:00:39,809 --> 00:00:44,309
at Argonne National Labs as well as

19
00:00:42,149 --> 00:00:46,769
neural network optimization computer

20
00:00:44,309 --> 00:00:48,358
science education methods at DePauw he

21
00:00:46,769 --> 00:00:50,339
received his master's from Purdue and a

22
00:00:48,359 --> 00:00:53,969
bachelors from what DePauw so I'll turn

23
00:00:50,339 --> 00:00:56,579
it over to Ben Harsha thank you very

24
00:00:53,969 --> 00:00:58,890
much for the introduction again my name

25
00:00:56,579 --> 00:01:01,260
is Ben Harsha and today I'm going to

26
00:00:58,890 --> 00:01:05,010
talk to you all about an upcoming paper

27
00:01:01,260 --> 00:01:06,509
that we have at I Tripoli S&P and a few

28
00:01:05,010 --> 00:01:08,820
months here called the economics of

29
00:01:06,510 --> 00:01:11,340
offline password hashing this is joint

30
00:01:08,820 --> 00:01:16,130
work with Professor Blackie myself and

31
00:01:11,340 --> 00:01:19,409
Samson so who is another Purdue student

32
00:01:16,130 --> 00:01:21,509
so to start off we're going to be

33
00:01:19,409 --> 00:01:23,969
dealing with offline password cracking

34
00:01:21,509 --> 00:01:25,799
here and I think it's important to at

35
00:01:23,969 --> 00:01:27,689
least do a quick review of kind of the

36
00:01:25,799 --> 00:01:29,310
basics and the background of what

37
00:01:27,689 --> 00:01:31,380
exactly we're dealing with and what sort

38
00:01:29,310 --> 00:01:36,090
of systems we are going to be handling

39
00:01:31,380 --> 00:01:38,189
today so first it's important to

40
00:01:36,090 --> 00:01:41,460
understand exactly what sort of password

41
00:01:38,189 --> 00:01:43,860
storage we are dealing with here so if

42
00:01:41,460 --> 00:01:45,390
you are registering an account any

43
00:01:43,860 --> 00:01:47,700
service in this case it looks like a

44
00:01:45,390 --> 00:01:50,539
Playstation you're going to send over a

45
00:01:47,700 --> 00:01:52,950
username and some password along with it

46
00:01:50,539 --> 00:01:54,509
now when the service receives it they

47
00:01:52,950 --> 00:01:56,939
are going to store a record that

48
00:01:54,509 --> 00:01:59,700
contains your username they are also

49
00:01:56,939 --> 00:02:02,520
going to have a randomly generated

50
00:01:59,700 --> 00:02:03,990
section called basalt and what they're

51
00:02:02,520 --> 00:02:06,390
going to do is they're going to take

52
00:02:03,990 --> 00:02:07,859
your password concatenate the salt in

53
00:02:06,390 --> 00:02:10,080
some fashion and then hash the

54
00:02:07,859 --> 00:02:13,200
combination of the two to get a final

55
00:02:10,080 --> 00:02:14,430
record that they store and the purpose

56
00:02:13,200 --> 00:02:16,019
of this is essentially that you never

57
00:02:14,430 --> 00:02:18,750
are going to store a plaintext password

58
00:02:16,020 --> 00:02:20,010
and you are salting to prevent what's

59
00:02:18,750 --> 00:02:21,840
called a rainbow table

60
00:02:20,010 --> 00:02:23,609
which is where you are able to just pre

61
00:02:21,840 --> 00:02:25,409
hash a bunch of common passwords and

62
00:02:23,610 --> 00:02:27,110
essentially look at the hash and do a

63
00:02:25,409 --> 00:02:29,609
quick look up to find people's passwords

64
00:02:27,110 --> 00:02:33,150
so this is the standard way that

65
00:02:29,610 --> 00:02:35,459
passwords are stored and unfortunately

66
00:02:33,150 --> 00:02:38,970
what inevitably tends to happen is that

67
00:02:35,459 --> 00:02:40,830
these companies make some mistake and an

68
00:02:38,970 --> 00:02:44,430
adversary manages to get all of these

69
00:02:40,830 --> 00:02:46,349
records and once you have these records

70
00:02:44,430 --> 00:02:47,849
what can then happen is an offline

71
00:02:46,349 --> 00:02:50,040
attack which is what we will be talking

72
00:02:47,849 --> 00:02:51,959
about today and in this case they have

73
00:02:50,040 --> 00:02:54,090
your username your salt and the hash of

74
00:02:51,959 --> 00:02:56,310
your salt and password and they can toss

75
00:02:54,090 --> 00:02:58,019
this into some local machine and run

76
00:02:56,310 --> 00:03:02,239
some program like John the Ripper and

77
00:02:58,019 --> 00:03:05,970
try to brute force attack your password

78
00:03:02,239 --> 00:03:07,440
so you'd like these to be like an

79
00:03:05,970 --> 00:03:09,780
uncommon and rare situation but

80
00:03:07,440 --> 00:03:11,069
unfortunately if you've been reading the

81
00:03:09,780 --> 00:03:13,049
news in the past few years these have

82
00:03:11,069 --> 00:03:16,440
become a common problem as you can see

83
00:03:13,049 --> 00:03:18,120
from our little wall of shame here and

84
00:03:16,440 --> 00:03:20,129
this is not just limited to you know

85
00:03:18,120 --> 00:03:21,209
smaller companies but even pretty big

86
00:03:20,129 --> 00:03:22,230
names like Yahoo or even

87
00:03:21,209 --> 00:03:24,510
security-related

88
00:03:22,230 --> 00:03:26,250
companies like LastPass have had

89
00:03:24,510 --> 00:03:30,840
breaches in the past few years that

90
00:03:26,250 --> 00:03:33,060
release records of this type so there

91
00:03:30,840 --> 00:03:35,280
are a few key questions that we are

92
00:03:33,060 --> 00:03:38,519
hoping to answer today and the first is

93
00:03:35,280 --> 00:03:40,349
can we predict how many users passwords

94
00:03:38,519 --> 00:03:42,299
a rational attacker will crack after a

95
00:03:40,349 --> 00:03:43,798
breach so what sort of number what sort

96
00:03:42,299 --> 00:03:46,739
of percentages are we looking at losing

97
00:03:43,799 --> 00:03:48,299
through this and there are a lot of

98
00:03:46,739 --> 00:03:50,700
factors that we need to handle to be

99
00:03:48,299 --> 00:03:52,700
able to answer this question so we need

100
00:03:50,700 --> 00:03:55,380
to know exactly what a password is worth

101
00:03:52,700 --> 00:03:57,450
to an attacker literally in terms of

102
00:03:55,380 --> 00:03:59,519
money in this case we need to know how

103
00:03:57,450 --> 00:04:01,798
much it is costing them to make every

104
00:03:59,519 --> 00:04:05,010
single guest they are going to perform

105
00:04:01,799 --> 00:04:06,930
to try to crack your password we need to

106
00:04:05,010 --> 00:04:08,790
know things about the markets such as

107
00:04:06,930 --> 00:04:11,250
diminishing returns and what I mean here

108
00:04:08,790 --> 00:04:12,720
is say that your an attack are trying to

109
00:04:11,250 --> 00:04:15,090
sell a lot of these passwords what

110
00:04:12,720 --> 00:04:16,738
happens if you were to say flood the

111
00:04:15,090 --> 00:04:19,289
market and release a million a million

112
00:04:16,738 --> 00:04:21,298
at once are you going to maybe reduce

113
00:04:19,289 --> 00:04:23,880
the the value of each one as you're

114
00:04:21,298 --> 00:04:26,669
releasing more and more and of course

115
00:04:23,880 --> 00:04:28,979
the strength of user passwords or how

116
00:04:26,669 --> 00:04:32,229
likely they are to be guest is also

117
00:04:28,979 --> 00:04:34,270
another one of the factors we care about

118
00:04:32,230 --> 00:04:37,810
giving these factors we also want to

119
00:04:34,270 --> 00:04:38,710
find or answer the question are the NIST

120
00:04:37,810 --> 00:04:41,110
the National Institute of Standards

121
00:04:38,710 --> 00:04:44,250
technology minimal guidelines sufficient

122
00:04:41,110 --> 00:04:46,690
to protect users so NIST releases

123
00:04:44,250 --> 00:04:49,480
releases a document that does lay out a

124
00:04:46,690 --> 00:04:51,070
few guidelines for what sort of hashing

125
00:04:49,480 --> 00:04:54,190
functions you should use what sort of

126
00:04:51,070 --> 00:04:55,900
parameters need to be done or put into

127
00:04:54,190 --> 00:04:58,290
these functions and we want to know are

128
00:04:55,900 --> 00:05:00,370
these current recommendations sufficient

129
00:04:58,290 --> 00:05:02,590
and we also want to look at something

130
00:05:00,370 --> 00:05:04,600
called memory hard functions to see if

131
00:05:02,590 --> 00:05:10,929
these help alleviate the problems

132
00:05:04,600 --> 00:05:12,040
somewhat so we know that these are

133
00:05:10,930 --> 00:05:14,320
getting leaked but how do you actually

134
00:05:12,040 --> 00:05:15,880
go about defending them we've already

135
00:05:14,320 --> 00:05:17,590
talked about these first two here which

136
00:05:15,880 --> 00:05:19,360
is hashing which is just essentially

137
00:05:17,590 --> 00:05:21,250
forcing some sort of brute force at some

138
00:05:19,360 --> 00:05:24,360
point and salting to prevent these

139
00:05:21,250 --> 00:05:27,640
rainbow table attacks there is a third

140
00:05:24,360 --> 00:05:29,320
method that is used as as a defense

141
00:05:27,640 --> 00:05:31,570
against these called key stretching and

142
00:05:29,320 --> 00:05:33,430
the idea of key stretching is just take

143
00:05:31,570 --> 00:05:35,260
these functions that they are trying

144
00:05:33,430 --> 00:05:37,900
computing again and again to do the

145
00:05:35,260 --> 00:05:44,440
brute force and artificially make them

146
00:05:37,900 --> 00:05:46,150
expensive to compute so this can be done

147
00:05:44,440 --> 00:05:49,719
in a few different ways this artificial

148
00:05:46,150 --> 00:05:51,460
difficulty increase but the basic idea

149
00:05:49,720 --> 00:05:53,230
and why you want to do this is you want

150
00:05:51,460 --> 00:05:56,049
to take the cost of this function here

151
00:05:53,230 --> 00:05:58,360
on the slide it's just H and if you

152
00:05:56,050 --> 00:06:00,070
assume that that costs some amount looks

153
00:05:58,360 --> 00:06:02,470
like one coin here to compute all we're

154
00:06:00,070 --> 00:06:04,719
going to do is try to raise that to some

155
00:06:02,470 --> 00:06:06,130
amount so that instead of paying one

156
00:06:04,720 --> 00:06:07,270
unit for every single time they're

157
00:06:06,130 --> 00:06:12,040
computing this they're going to be

158
00:06:07,270 --> 00:06:15,219
paying say K in this case units of cost

159
00:06:12,040 --> 00:06:18,550
or currency whatever you have to compute

160
00:06:15,220 --> 00:06:21,160
every single guess there are a few ways

161
00:06:18,550 --> 00:06:23,410
this is done hash iteration is a pretty

162
00:06:21,160 --> 00:06:25,840
common one this is used by bcrypt for

163
00:06:23,410 --> 00:06:28,780
example which is a a hash function that

164
00:06:25,840 --> 00:06:30,760
was used in several several breaches

165
00:06:28,780 --> 00:06:32,349
that have happened and there's another

166
00:06:30,760 --> 00:06:34,510
way to do this that works with memory

167
00:06:32,350 --> 00:06:38,890
hard functions but we will get a little

168
00:06:34,510 --> 00:06:40,810
bit more into that in a bit looking at

169
00:06:38,890 --> 00:06:43,360
hash iteration though as one of the

170
00:06:40,810 --> 00:06:45,409
methods of key stretching the idea is

171
00:06:43,360 --> 00:06:48,110
pretty simple all you're going to do is

172
00:06:45,409 --> 00:06:49,879
take this hash function that was used so

173
00:06:48,110 --> 00:06:52,550
for looking at bcrypt for example which

174
00:06:49,879 --> 00:06:53,989
is a pretty common one the base function

175
00:06:52,550 --> 00:06:57,169
would just be Blowfish is what it's

176
00:06:53,989 --> 00:06:59,119
called and you are just going to repeat

177
00:06:57,169 --> 00:07:01,039
this over and over again by instead of

178
00:06:59,119 --> 00:07:02,449
storing the hash of your information you

179
00:07:01,039 --> 00:07:04,489
store the hash of the hash of the hash

180
00:07:02,449 --> 00:07:06,830
of the hash of the hash and you just

181
00:07:04,489 --> 00:07:10,909
continue this on for some set number of

182
00:07:06,830 --> 00:07:14,479
time memory hardness the second version

183
00:07:10,909 --> 00:07:16,399
that we mentioned is a memory heart

184
00:07:14,479 --> 00:07:18,438
function is a function that requires not

185
00:07:16,399 --> 00:07:20,179
only a large amount of time to compute

186
00:07:18,439 --> 00:07:23,599
but it also requires a large amount of

187
00:07:20,179 --> 00:07:25,339
memory and it has a quadratic area time

188
00:07:23,599 --> 00:07:29,300
complexity which I'll get into a little

189
00:07:25,339 --> 00:07:31,339
bit more later on which provides several

190
00:07:29,300 --> 00:07:37,939
advantages when we are defending against

191
00:07:31,339 --> 00:07:39,860
these offline attacks so what we want to

192
00:07:37,939 --> 00:07:43,519
do is we want to develop an economic

193
00:07:39,860 --> 00:07:45,800
model for an adversary that is going and

194
00:07:43,519 --> 00:07:47,059
doing one of these offline attacks so

195
00:07:45,800 --> 00:07:49,219
what do we assume we assume that we have

196
00:07:47,059 --> 00:07:51,079
this adversary and that they are able to

197
00:07:49,219 --> 00:07:54,259
sell these passwords on the black market

198
00:07:51,079 --> 00:07:55,939
essentially for some value they really

199
00:07:54,259 --> 00:07:58,399
only care about one thing and one thing

200
00:07:55,939 --> 00:08:00,229
only and that is making a profit they

201
00:07:58,399 --> 00:08:02,839
don't care about the number they crack

202
00:08:00,229 --> 00:08:04,729
they don't care how long it takes how

203
00:08:02,839 --> 00:08:06,499
long it takes the only thing they want

204
00:08:04,729 --> 00:08:10,490
is a profit they are just interested in

205
00:08:06,499 --> 00:08:11,689
money so essentially what we're gonna

206
00:08:10,490 --> 00:08:14,479
see is that we're gonna have this

207
00:08:11,689 --> 00:08:16,249
rational economic adversary who's going

208
00:08:14,479 --> 00:08:18,919
to keep guessing and trying to crack a

209
00:08:16,249 --> 00:08:21,739
password as long as it is profitable for

210
00:08:18,919 --> 00:08:24,318
them to do so and what we want is we

211
00:08:21,739 --> 00:08:26,989
want our model to in the end let us

212
00:08:24,319 --> 00:08:34,130
predict what percentage of passwords are

213
00:08:26,989 --> 00:08:36,438
going to be cracked by this adversary so

214
00:08:34,130 --> 00:08:38,539
again reiterating they have this list of

215
00:08:36,438 --> 00:08:40,669
hash passwords this form of the record

216
00:08:38,539 --> 00:08:42,948
that we showed earlier they're able to

217
00:08:40,669 --> 00:08:44,480
sell them by a black market they do have

218
00:08:42,948 --> 00:08:46,180
some restrictions though so there's some

219
00:08:44,480 --> 00:08:48,620
operating costs associated with this

220
00:08:46,180 --> 00:08:49,939
every time they make a guess we're going

221
00:08:48,620 --> 00:08:52,790
to assume that they do have to pay some

222
00:08:49,939 --> 00:08:56,689
sort of cost even if it is very small to

223
00:08:52,790 --> 00:08:58,309
make that guessed and so at this point

224
00:08:56,689 --> 00:08:59,420
we've got a bunch of the we've got a

225
00:08:58,309 --> 00:09:01,520
situation in an adverse

226
00:08:59,420 --> 00:09:04,449
we're dealing with we've got a few more

227
00:09:01,520 --> 00:09:06,620
questions that we need to answer

228
00:09:04,450 --> 00:09:08,750
so things we need to answer to really

229
00:09:06,620 --> 00:09:10,970
come up with some sort of model and to

230
00:09:08,750 --> 00:09:12,320
be able to answer our questions are well

231
00:09:10,970 --> 00:09:14,210
how much does it cost to actually make

232
00:09:12,320 --> 00:09:17,540
these guesses what are their operating

233
00:09:14,210 --> 00:09:19,160
costs essentially how probable are

234
00:09:17,540 --> 00:09:20,750
certain passwords this is important

235
00:09:19,160 --> 00:09:22,189
because we need to know for each guess

236
00:09:20,750 --> 00:09:25,220
how likely is it that they are going to

237
00:09:22,190 --> 00:09:26,630
succeed and kind of an interesting

238
00:09:25,220 --> 00:09:28,160
question how much is your password worth

239
00:09:26,630 --> 00:09:30,470
what are people actually out there

240
00:09:28,160 --> 00:09:33,079
paying for these passwords after they

241
00:09:30,470 --> 00:09:35,540
have been cracked so we'll go through

242
00:09:33,080 --> 00:09:38,870
these and hopefully they'll give you

243
00:09:35,540 --> 00:09:42,319
guys an answer for all of them so the

244
00:09:38,870 --> 00:09:44,480
first problem we had is finding how much

245
00:09:42,320 --> 00:09:45,950
does it cost to make every single guess

246
00:09:44,480 --> 00:09:50,150
which is just a parameter we're going to

247
00:09:45,950 --> 00:09:53,270
call K here a lot of these functions

248
00:09:50,150 --> 00:09:56,390
such as bcrypt s krypter pbkdf2 have

249
00:09:53,270 --> 00:09:58,520
some sort of time parameter T that gets

250
00:09:56,390 --> 00:10:00,020
put in here essentially a parameter that

251
00:09:58,520 --> 00:10:01,670
says how long should you run this

252
00:10:00,020 --> 00:10:04,939
function or how expensive should it be

253
00:10:01,670 --> 00:10:06,740
to compute they are usually based on

254
00:10:04,940 --> 00:10:10,610
some sort of underlying function like

255
00:10:06,740 --> 00:10:14,660
sha-256 or Blowfish and in the case of

256
00:10:10,610 --> 00:10:16,280
bcrypt or BBK P pbkdf2 these are just

257
00:10:14,660 --> 00:10:20,420
being run again and again in this hash

258
00:10:16,280 --> 00:10:21,740
iteration method so we just have two

259
00:10:20,420 --> 00:10:24,410
steps here when we're dealing with these

260
00:10:21,740 --> 00:10:25,730
hash iteration methods which is first we

261
00:10:24,410 --> 00:10:27,680
just need the cost of the underlying

262
00:10:25,730 --> 00:10:30,470
function and then we're just going to

263
00:10:27,680 --> 00:10:32,750
multiply this by the time parameter T to

264
00:10:30,470 --> 00:10:35,240
get our final cost so how much does it

265
00:10:32,750 --> 00:10:37,100
cost to make a single guess it is just

266
00:10:35,240 --> 00:10:38,990
the cost of whatever the base function

267
00:10:37,100 --> 00:10:41,180
is times however many times you're

268
00:10:38,990 --> 00:10:43,340
calculating the base function and this

269
00:10:41,180 --> 00:10:47,689
will give us an idea of what it costs to

270
00:10:43,340 --> 00:10:50,990
make every single guess so how much did

271
00:10:47,690 --> 00:10:52,580
it cost we've got a few estimates here

272
00:10:50,990 --> 00:10:57,050
so back in 2014

273
00:10:52,580 --> 00:10:58,880
bono came to an estimate of 7 times 10

274
00:10:57,050 --> 00:11:03,170
to the negative 15th dollars that's US

275
00:10:58,880 --> 00:11:06,710
dollars per calculation of sha-256 he

276
00:11:03,170 --> 00:11:08,479
actually did this by analyzing the the

277
00:11:06,710 --> 00:11:11,610
amount of hashes that were performed for

278
00:11:08,480 --> 00:11:14,130
a while on the Bitcoin network

279
00:11:11,610 --> 00:11:16,050
and essentially compared that with the

280
00:11:14,130 --> 00:11:18,089
rewards that the miners were getting and

281
00:11:16,050 --> 00:11:20,189
used this as a way to estimate how much

282
00:11:18,089 --> 00:11:24,269
is it costing or how much is a single

283
00:11:20,190 --> 00:11:25,860
calculation worth so that's back in 2014

284
00:11:24,269 --> 00:11:27,450
we actually have one from a few months

285
00:11:25,860 --> 00:11:30,120
ago just kind of some back of the napkin

286
00:11:27,450 --> 00:11:32,430
calculations there is a piece of

287
00:11:30,120 --> 00:11:34,950
hardware called the amp minor s9 that's

288
00:11:32,430 --> 00:11:37,109
out for example and it is just a

289
00:11:34,950 --> 00:11:40,760
dedicated piece of hardware that does

290
00:11:37,110 --> 00:11:44,399
nothing but compute sha-256

291
00:11:40,760 --> 00:11:49,230
it can do 14 trillion calculations of

292
00:11:44,399 --> 00:11:51,300
this function per second and given this

293
00:11:49,230 --> 00:11:53,760
the amount that it costs how much

294
00:11:51,300 --> 00:11:56,849
electricity it uses which is well

295
00:11:53,760 --> 00:11:58,860
published and in their specs and based

296
00:11:56,850 --> 00:12:00,720
on how much electricity costs we can

297
00:11:58,860 --> 00:12:02,579
actually come up with an idea of what

298
00:12:00,720 --> 00:12:03,410
does it cost to run these functions on

299
00:12:02,579 --> 00:12:06,239
something like this

300
00:12:03,410 --> 00:12:09,089
in this case we are looking at about 10

301
00:12:06,240 --> 00:12:13,110
to the negative 18 dollars to compute

302
00:12:09,089 --> 00:12:15,420
every single base hash to base sha-256

303
00:12:13,110 --> 00:12:17,579
evaluation here's the big point right

304
00:12:15,420 --> 00:12:19,050
here these are cheap it is incredibly

305
00:12:17,579 --> 00:12:24,120
cheap to calculate these and you can do

306
00:12:19,050 --> 00:12:25,949
a lot with a single dollar even so next

307
00:12:24,120 --> 00:12:29,250
we've got our base function all we need

308
00:12:25,949 --> 00:12:31,560
to do is that final step here multiply

309
00:12:29,250 --> 00:12:34,440
this by whatever our time parameter T

310
00:12:31,560 --> 00:12:37,130
was and let's see what it would cost to

311
00:12:34,440 --> 00:12:40,860
make guesses given some certain breeches

312
00:12:37,130 --> 00:12:44,550
so here is a nice interesting table at

313
00:12:40,860 --> 00:12:45,899
least I think this is showing a lot of

314
00:12:44,550 --> 00:12:48,959
breaches that have happened in the past

315
00:12:45,899 --> 00:12:51,899
five or six years so from these we

316
00:12:48,959 --> 00:12:54,060
actually do know in many cases exactly

317
00:12:51,899 --> 00:12:56,000
which function they were using we know

318
00:12:54,060 --> 00:12:58,018
how many iterations they were doing

319
00:12:56,000 --> 00:13:01,199
seeing as all of these were using hash

320
00:12:58,019 --> 00:13:02,850
iteration well unless you're linked in

321
00:13:01,199 --> 00:13:05,390
which case they were just doing a single

322
00:13:02,850 --> 00:13:08,459
sha-1 and not doing any key stretching

323
00:13:05,390 --> 00:13:10,680
and from this we can actually look and

324
00:13:08,459 --> 00:13:13,290
figure out what these costs are so if

325
00:13:10,680 --> 00:13:15,089
you can look through here it ranges and

326
00:13:13,290 --> 00:13:16,890
varies wildly and it depends very much

327
00:13:15,089 --> 00:13:20,130
on what parameters they've picked if you

328
00:13:16,890 --> 00:13:23,390
are attacking the LinkedIn set right

329
00:13:20,130 --> 00:13:25,439
here you can imagine that every single

330
00:13:23,390 --> 00:13:27,990
every single guess that you're

331
00:13:25,440 --> 00:13:31,970
seven times 10 to the negative $15 which

332
00:13:27,990 --> 00:13:34,200
is I mean exceedingly cheap or we have

333
00:13:31,970 --> 00:13:35,910
breaches such as LastPass where they had

334
00:13:34,200 --> 00:13:38,610
much higher key stretching parameters

335
00:13:35,910 --> 00:13:41,069
which bumps up the cost per guess that

336
00:13:38,610 --> 00:13:43,310
you're making so so pretty small at

337
00:13:41,070 --> 00:13:46,170
seven times ten to the negative tenth

338
00:13:43,310 --> 00:13:51,630
but a lot better than if nothing had

339
00:13:46,170 --> 00:13:53,880
been done at all so given our little

340
00:13:51,630 --> 00:13:55,710
table here we can actually say that we

341
00:13:53,880 --> 00:13:57,390
know how much or we have estimates for

342
00:13:55,710 --> 00:14:00,630
how much it costs to make every single

343
00:13:57,390 --> 00:14:02,370
guess and so now we need to know for

344
00:14:00,630 --> 00:14:04,080
each of these guesses how likely is it

345
00:14:02,370 --> 00:14:06,000
that the guess is going to succeed and

346
00:14:04,080 --> 00:14:11,130
from this we need to know well how

347
00:14:06,000 --> 00:14:13,230
probable are certain passwords and to do

348
00:14:11,130 --> 00:14:15,720
this essentia to find out how likely

349
00:14:13,230 --> 00:14:18,120
each guess is to succeed we need the

350
00:14:15,720 --> 00:14:18,960
distribution of passwords so I don't

351
00:14:18,120 --> 00:14:20,850
know if you guys have seen anything like

352
00:14:18,960 --> 00:14:23,520
this before these are actually lists of

353
00:14:20,850 --> 00:14:24,900
the most common passwords this being a

354
00:14:23,520 --> 00:14:26,370
security group and the people watching

355
00:14:24,900 --> 00:14:28,319
it being a security group I hope yours

356
00:14:26,370 --> 00:14:30,060
is not up here if it is come talk to me

357
00:14:28,320 --> 00:14:35,040
afterwards please we need to have a

358
00:14:30,060 --> 00:14:38,300
little chat but we want to know how

359
00:14:35,040 --> 00:14:40,319
probable all are are all of these

360
00:14:38,300 --> 00:14:41,640
there's actually some previous work out

361
00:14:40,320 --> 00:14:44,430
here on this that gives us a nice

362
00:14:41,640 --> 00:14:48,650
starting point weighing at all published

363
00:14:44,430 --> 00:14:50,819
something a few years ago that was

364
00:14:48,650 --> 00:14:53,310
giving the idea that passwords follow

365
00:14:50,820 --> 00:14:54,900
something called zips law so this was

366
00:14:53,310 --> 00:14:56,520
originally a law that was found in

367
00:14:54,900 --> 00:14:59,340
natural languages and how come and

368
00:14:56,520 --> 00:15:01,170
certain words are it turns out that

369
00:14:59,340 --> 00:15:03,690
there's a lot of evidence that passwords

370
00:15:01,170 --> 00:15:06,150
are following this law as well what is

371
00:15:03,690 --> 00:15:08,010
zips law well essentially it's just this

372
00:15:06,150 --> 00:15:11,250
formula that you see on the board here

373
00:15:08,010 --> 00:15:15,000
the probability of a password P is just

374
00:15:11,250 --> 00:15:17,010
C divided by I or whatever ranked

375
00:15:15,000 --> 00:15:19,050
password we want to pick to the power of

376
00:15:17,010 --> 00:15:23,220
s CN s here are just some parameters

377
00:15:19,050 --> 00:15:26,699
that you can find and you just plug them

378
00:15:23,220 --> 00:15:28,589
in and so if I want say the most common

379
00:15:26,700 --> 00:15:30,570
password I'm just going to plug a equals

380
00:15:28,589 --> 00:15:32,700
one here I have C ns and you can just

381
00:15:30,570 --> 00:15:35,130
you know turn the crank and figure out

382
00:15:32,700 --> 00:15:37,240
how likely a password would be if this

383
00:15:35,130 --> 00:15:39,650
is what happens so

384
00:15:37,240 --> 00:15:42,170
and what it kind of looks like is just

385
00:15:39,650 --> 00:15:43,930
an image there of a general basic idea

386
00:15:42,170 --> 00:15:45,890
of what zips law distributions look like

387
00:15:43,930 --> 00:15:47,780
so we have a lot of very common

388
00:15:45,890 --> 00:15:51,800
passwords and then it starts to taper

389
00:15:47,780 --> 00:15:53,240
off towards the end why does this matter

390
00:15:51,800 --> 00:15:55,069
why does it matter that passwords follow

391
00:15:53,240 --> 00:15:56,300
zips law well first up it's actually

392
00:15:55,070 --> 00:15:58,010
pretty easy to check if something

393
00:15:56,300 --> 00:15:59,839
follows zips law and we can get these

394
00:15:58,010 --> 00:16:03,710
parameters pretty quickly as long as we

395
00:15:59,840 --> 00:16:05,150
have the right information available and

396
00:16:03,710 --> 00:16:07,190
we can use this to pretty quickly

397
00:16:05,150 --> 00:16:09,439
calculate how likely a certain password

398
00:16:07,190 --> 00:16:11,630
is again all I have to do is if I have

399
00:16:09,440 --> 00:16:13,460
these parameters I just take whatever

400
00:16:11,630 --> 00:16:15,500
password and once say I want the fifth

401
00:16:13,460 --> 00:16:17,980
most common password plug that five in I

402
00:16:15,500 --> 00:16:20,510
get an answer out very nice and cleanly

403
00:16:17,980 --> 00:16:22,850
so essentially by finding these

404
00:16:20,510 --> 00:16:24,560
parameters what we can do is we can use

405
00:16:22,850 --> 00:16:26,270
a zip distribution in place of the

406
00:16:24,560 --> 00:16:29,810
discrete distribution which is just the

407
00:16:26,270 --> 00:16:31,850
the actual list that we have and plug

408
00:16:29,810 --> 00:16:33,410
this in and essentially it makes math a

409
00:16:31,850 --> 00:16:35,020
lot nicer to work with and we can come

410
00:16:33,410 --> 00:16:38,660
up with some nice closed form

411
00:16:35,020 --> 00:16:43,370
expressions that we can give so now we

412
00:16:38,660 --> 00:16:45,949
need these parameters and to do that we

413
00:16:43,370 --> 00:16:47,360
are actually going to look at a password

414
00:16:45,950 --> 00:16:51,380
set that had not been looked at before

415
00:16:47,360 --> 00:16:52,850
in terms of zip Schloss so and 2016

416
00:16:51,380 --> 00:16:54,860
Yahoo allowed the release of some

417
00:16:52,850 --> 00:16:58,580
password data on purpose this time in

418
00:16:54,860 --> 00:17:00,860
differentially private form what does

419
00:16:58,580 --> 00:17:02,480
this mean essentially in a sentence or

420
00:17:00,860 --> 00:17:04,550
two it means that the way this was

421
00:17:02,480 --> 00:17:06,470
released is done in a way that's not

422
00:17:04,550 --> 00:17:08,510
going to endanger users their privacy is

423
00:17:06,470 --> 00:17:11,900
preserved you can't tell if a certain

424
00:17:08,510 --> 00:17:13,970
person is or isn't in this data set and

425
00:17:11,900 --> 00:17:15,560
when I say it's the release of password

426
00:17:13,970 --> 00:17:17,569
data I do not mean that they are

427
00:17:15,560 --> 00:17:19,510
releasing like you know the most common

428
00:17:17,569 --> 00:17:21,740
password was one two three four five six

429
00:17:19,510 --> 00:17:24,230
rather we're looking at something like

430
00:17:21,740 --> 00:17:25,880
the most common password was picked four

431
00:17:24,230 --> 00:17:28,010
hundred thousand times the second most

432
00:17:25,880 --> 00:17:29,570
common password was picked three hundred

433
00:17:28,010 --> 00:17:31,340
thousand times and so on down the list

434
00:17:29,570 --> 00:17:35,050
so this is the type of information we're

435
00:17:31,340 --> 00:17:38,090
looking at there about 70 million

436
00:17:35,050 --> 00:17:40,280
records in this password set that we

437
00:17:38,090 --> 00:17:42,110
have which is more than twice as much

438
00:17:40,280 --> 00:17:44,210
that has been analyzed in terms of zips

439
00:17:42,110 --> 00:17:47,360
law before so we're dealing with a lot

440
00:17:44,210 --> 00:17:49,670
more data in addition this data actually

441
00:17:47,360 --> 00:17:50,928
has several additional advantages that

442
00:17:49,670 --> 00:17:56,960
make it very nice

443
00:17:50,929 --> 00:17:59,059
to work with for our purposes so first

444
00:17:56,960 --> 00:18:00,559
off it is much larger than the

445
00:17:59,059 --> 00:18:03,080
previously analyzed sets we have about

446
00:18:00,559 --> 00:18:04,999
70 million records here the largest one

447
00:18:03,080 --> 00:18:09,230
that was looked at by Wang at all was

448
00:18:04,999 --> 00:18:12,649
RockYou which is about 33 million users

449
00:18:09,230 --> 00:18:13,940
so we've about doubled it and of course

450
00:18:12,649 --> 00:18:15,739
more data is always better it's going to

451
00:18:13,940 --> 00:18:21,950
give you hopefully better answers and

452
00:18:15,740 --> 00:18:24,289
more accurate ones this was also

453
00:18:21,950 --> 00:18:26,360
collected in a trusted fashion so in a

454
00:18:24,289 --> 00:18:28,600
lot of these breaches they were obtained

455
00:18:26,360 --> 00:18:31,969
through a less than scrupulous means

456
00:18:28,600 --> 00:18:34,039
when they were released so how much do

457
00:18:31,970 --> 00:18:36,529
you trust them that's one question how

458
00:18:34,039 --> 00:18:39,019
much do you trust the data in them well

459
00:18:36,529 --> 00:18:40,580
I guess you can't be absolutely sure but

460
00:18:39,019 --> 00:18:44,139
what we do know here is that this was

461
00:18:40,580 --> 00:18:47,869
collected by a well known researcher and

462
00:18:44,139 --> 00:18:49,939
it was done in a responsible manner so

463
00:18:47,869 --> 00:18:51,408
another benefit here is that these

464
00:18:49,940 --> 00:18:53,059
leaked sets often contains some

465
00:18:51,409 --> 00:18:55,580
suspiciously faked accounts so I

466
00:18:53,059 --> 00:18:57,320
mentioned RockYou a moment ago that was

467
00:18:55,580 --> 00:19:00,470
a breach a few years ago that was

468
00:18:57,320 --> 00:19:02,090
actually in plaintext and so if you

469
00:19:00,470 --> 00:19:03,649
actually look at a lot of the like that

470
00:19:02,090 --> 00:19:06,860
password word cloud earlier that's based

471
00:19:03,649 --> 00:19:08,239
on data taking from here but if you

472
00:19:06,860 --> 00:19:10,248
actually were to sit down and scroll

473
00:19:08,240 --> 00:19:13,850
through it you'd find that there are a

474
00:19:10,249 --> 00:19:16,159
lot of suspicious entries some passwords

475
00:19:13,850 --> 00:19:19,908
for example that are maybe just you know

476
00:19:16,159 --> 00:19:23,090
long HTML strings or a few sequel

477
00:19:19,909 --> 00:19:25,429
injection attack attempts rather than

478
00:19:23,090 --> 00:19:26,990
actual legitimate users so well these

479
00:19:25,429 --> 00:19:28,429
may be you know not exactly real

480
00:19:26,990 --> 00:19:29,740
accounts or real people that we're

481
00:19:28,429 --> 00:19:32,240
dealing with

482
00:19:29,740 --> 00:19:35,749
says collected in secure fashion is

483
00:19:32,240 --> 00:19:38,210
another benefit not actually releasing

484
00:19:35,749 --> 00:19:39,619
anyone's actual passwords as I said but

485
00:19:38,210 --> 00:19:41,869
just some some aggregate data

486
00:19:39,619 --> 00:19:44,209
essentially and here's a nice one is

487
00:19:41,869 --> 00:19:46,668
that the data is from active users

488
00:19:44,210 --> 00:19:48,200
not from throwaway accounts so we know

489
00:19:46,669 --> 00:19:50,029
that we're dealing with with real

490
00:19:48,200 --> 00:19:51,740
accounts not just you know one of

491
00:19:50,029 --> 00:19:55,249
accounts that people make to sign up for

492
00:19:51,740 --> 00:20:01,519
some spam thing online these are actual

493
00:19:55,249 --> 00:20:03,859
users so I mentioned that it was

494
00:20:01,519 --> 00:20:04,490
released in a instant in a difference

495
00:20:03,859 --> 00:20:06,678
where

496
00:20:04,490 --> 00:20:08,090
least with differential privacy what

497
00:20:06,679 --> 00:20:09,890
exactly does it mean it does mean that

498
00:20:08,090 --> 00:20:11,178
the data has been perturbed a bit some

499
00:20:09,890 --> 00:20:13,460
of the numbers have been changed

500
00:20:11,179 --> 00:20:14,900
slightly in a way that ensures that you

501
00:20:13,460 --> 00:20:17,059
can't really tell if somebody is or is

502
00:20:14,900 --> 00:20:19,130
not in this data set

503
00:20:17,059 --> 00:20:21,230
so there are perturbations and we want

504
00:20:19,130 --> 00:20:22,610
to double check and make sure are these

505
00:20:21,230 --> 00:20:24,380
perturbations going to cause any

506
00:20:22,610 --> 00:20:26,689
problems in our analysis will they throw

507
00:20:24,380 --> 00:20:28,970
our numbers off so I think now it's fine

508
00:20:26,690 --> 00:20:30,350
and it works anyways the perturbations

509
00:20:28,970 --> 00:20:34,450
are small enough that we can still come

510
00:20:30,350 --> 00:20:36,860
up with good answers and we show this by

511
00:20:34,450 --> 00:20:37,970
by giving some strong empirical evidence

512
00:20:36,860 --> 00:20:40,100
based on rock you

513
00:20:37,970 --> 00:20:42,290
so with rock you unlike the Yahoo we do

514
00:20:40,100 --> 00:20:44,600
actually have the list of everyone's

515
00:20:42,290 --> 00:20:46,850
records and we can go through and

516
00:20:44,600 --> 00:20:51,860
actually apply the same process that was

517
00:20:46,850 --> 00:20:53,449
applied to Yahoo and do this a bunch of

518
00:20:51,860 --> 00:20:55,070
times and then compare the outputs

519
00:20:53,450 --> 00:20:57,140
before and after this process has been

520
00:20:55,070 --> 00:21:00,080
done to see how much of a change we get

521
00:20:57,140 --> 00:21:03,080
so I will just toss up a table quickly

522
00:21:00,080 --> 00:21:05,389
sorry for the wall of numbers but what

523
00:21:03,080 --> 00:21:07,178
we're looking at essentially here on the

524
00:21:05,390 --> 00:21:10,250
left under Y&R

525
00:21:07,179 --> 00:21:12,470
these are some parameters that we're

526
00:21:10,250 --> 00:21:14,770
looking for I wouldn't say that they're

527
00:21:12,470 --> 00:21:19,220
not off by much maybe a few thousandths

528
00:21:14,770 --> 00:21:20,540
but nothing very significant and we have

529
00:21:19,220 --> 00:21:22,580
a standard deviation to the right all

530
00:21:20,540 --> 00:21:24,649
that's saying is that with that being

531
00:21:22,580 --> 00:21:25,850
very small it's not going to move around

532
00:21:24,650 --> 00:21:29,690
much we're going to get a pretty

533
00:21:25,850 --> 00:21:35,449
consistent answer when we are when we're

534
00:21:29,690 --> 00:21:38,390
using differential privacy so we know

535
00:21:35,450 --> 00:21:40,780
that it should work here and last step

536
00:21:38,390 --> 00:21:42,920
is actually to go ahead and fit the data

537
00:21:40,780 --> 00:21:45,800
so what you're looking at here is

538
00:21:42,920 --> 00:21:50,090
actually a plot of how likely certain

539
00:21:45,800 --> 00:21:53,270
passwords are in Yahoo and if you put it

540
00:21:50,090 --> 00:21:55,189
on on a log scale like this you actually

541
00:21:53,270 --> 00:21:58,250
can just use a nice simple linear

542
00:21:55,190 --> 00:21:59,540
regression and the nice thing here is

543
00:21:58,250 --> 00:22:02,300
that this is how you are going to grab

544
00:21:59,540 --> 00:22:05,420
your zip parameters so without going

545
00:22:02,300 --> 00:22:09,830
into too much detail in this case yn are

546
00:22:05,420 --> 00:22:12,830
our zip parameters and just using some

547
00:22:09,830 --> 00:22:14,840
method of linear regression you're going

548
00:22:12,830 --> 00:22:17,408
to grab those parameters and now we can

549
00:22:14,840 --> 00:22:19,908
plug those into our analysis

550
00:22:17,409 --> 00:22:23,989
and after looking at it we actually

551
00:22:19,909 --> 00:22:25,789
found that our parameters do fit in

552
00:22:23,989 --> 00:22:28,159
nicely with other sets nothing that

553
00:22:25,789 --> 00:22:29,839
nothing that we got out was unexpected

554
00:22:28,159 --> 00:22:32,509
or too different from other password

555
00:22:29,839 --> 00:22:35,329
sets it seems definitely well within the

556
00:22:32,509 --> 00:22:36,439
ranges that we can see so if you're just

557
00:22:35,329 --> 00:22:38,329
looking here you can see that the

558
00:22:36,439 --> 00:22:42,469
numbers are there well within the ranges

559
00:22:38,329 --> 00:22:45,109
that we're seeing for other sets here so

560
00:22:42,469 --> 00:22:47,149
this was the the end goal we actually do

561
00:22:45,109 --> 00:22:50,918
have our parameters here which gives us

562
00:22:47,149 --> 00:22:50,918
our distribution that we can work with

563
00:22:51,729 --> 00:22:58,279
so with that I believe we have two

564
00:22:55,189 --> 00:22:59,719
questions down so next the interesting

565
00:22:58,279 --> 00:23:02,929
question of how much are people going to

566
00:22:59,719 --> 00:23:05,089
pay for your password there's a few

567
00:23:02,929 --> 00:23:06,529
estimates that we have here so a few

568
00:23:05,089 --> 00:23:08,149
years ago Symantec released a report

569
00:23:06,529 --> 00:23:12,019
saying that passwords can range anywhere

570
00:23:08,149 --> 00:23:14,109
from $4 to $30 on the black market

571
00:23:12,019 --> 00:23:15,649
and we have some newer estimates from

572
00:23:14,109 --> 00:23:19,158
for more recent

573
00:23:15,649 --> 00:23:21,589
I'm some more recent articles saying

574
00:23:19,159 --> 00:23:23,959
that some of them will go from 70 cents

575
00:23:21,589 --> 00:23:26,839
to a dollar 20 and I believe these are

576
00:23:23,959 --> 00:23:28,579
actually from Yahoo specifically so

577
00:23:26,839 --> 00:23:30,499
definitely relevant for what we're

578
00:23:28,579 --> 00:23:32,389
looking at of course is just an average

579
00:23:30,499 --> 00:23:34,489
Bill Gates Bank passwords worth a little

580
00:23:32,389 --> 00:23:36,819
bit more grad student like mine Bank

581
00:23:34,489 --> 00:23:39,259
password is probably worth a little less

582
00:23:36,819 --> 00:23:41,259
but on average this is kind of what

583
00:23:39,259 --> 00:23:43,549
we're looking at 70 cents to a dollar 20

584
00:23:41,259 --> 00:23:47,239
that's roughly what you're gonna get for

585
00:23:43,549 --> 00:23:48,799
a password on the black market so we can

586
00:23:47,239 --> 00:23:59,689
now use this with the other breach data

587
00:23:48,799 --> 00:24:03,168
because we now know yes so help pro feed

588
00:23:59,689 --> 00:24:05,899
hope how probable is each password so

589
00:24:03,169 --> 00:24:08,649
you can see inside from here yes you

590
00:24:05,899 --> 00:24:11,629
gave the data so what does this tell us

591
00:24:08,649 --> 00:24:13,698
so what this is remember that when I

592
00:24:11,629 --> 00:24:15,678
mentioned zip slaw

593
00:24:13,699 --> 00:24:20,599
it's based on two parameters they've

594
00:24:15,679 --> 00:24:23,329
been renamed here actually so ynr so if

595
00:24:20,599 --> 00:24:25,849
you have these two parameters what you

596
00:24:23,329 --> 00:24:27,799
can do is we have a nice formula where

597
00:24:25,849 --> 00:24:29,539
these two parameters combined with

598
00:24:27,799 --> 00:24:30,440
whatever password you want so if you

599
00:24:29,539 --> 00:24:33,230
want the the mo

600
00:24:30,440 --> 00:24:35,899
common password for example you can plug

601
00:24:33,230 --> 00:24:38,870
in you basically just pass this all to a

602
00:24:35,899 --> 00:24:42,428
function so you pass yr and I which is

603
00:24:38,870 --> 00:24:45,100
the index of the password you want and

604
00:24:42,429 --> 00:24:47,450
essentially turn the crank and get the

605
00:24:45,100 --> 00:24:49,219
password that you want so if you're

606
00:24:47,450 --> 00:24:52,580
talking more about this I guess visually

607
00:24:49,220 --> 00:24:55,129
how probable are certain passwords this

608
00:24:52,580 --> 00:24:58,360
is actually showing not the probability

609
00:24:55,129 --> 00:25:00,799
of the if' password but the probability

610
00:24:58,360 --> 00:25:03,320
of the some are running some essentially

611
00:25:00,799 --> 00:25:06,049
of what we have so you can see in the

612
00:25:03,320 --> 00:25:10,009
bottom left right here that we have most

613
00:25:06,049 --> 00:25:13,899
common password looks like it's one

614
00:25:10,009 --> 00:25:17,570
point two percent of all passwords and

615
00:25:13,899 --> 00:25:25,039
kind of carries on for there so I don't

616
00:25:17,570 --> 00:25:27,470
know if I answered the question but we

617
00:25:25,039 --> 00:25:31,009
need a time right we need how much time

618
00:25:27,470 --> 00:25:33,169
like to solve we so we're not worrying

619
00:25:31,009 --> 00:25:36,110
about time right near our right here all

620
00:25:33,169 --> 00:25:38,450
we care about is how likely is it that

621
00:25:36,110 --> 00:25:40,639
this is the password that the user has

622
00:25:38,450 --> 00:25:42,409
picked so for example what's the

623
00:25:40,639 --> 00:25:44,149
probability that the password one two

624
00:25:42,409 --> 00:25:47,450
three four five six was picked by this

625
00:25:44,149 --> 00:25:49,850
user you're trying to crack right now in

626
00:25:47,450 --> 00:25:52,370
some ways I guess what you're getting at

627
00:25:49,850 --> 00:25:53,570
with time is you know how long are you

628
00:25:52,370 --> 00:25:55,219
going to go and what's the probability

629
00:25:53,570 --> 00:25:59,539
that you're going to get it within that

630
00:25:55,220 --> 00:26:01,850
time and I don't actually have slides on

631
00:25:59,539 --> 00:26:03,399
that but essentially it's something that

632
00:26:01,850 --> 00:26:07,759
we work with in our model which is

633
00:26:03,399 --> 00:26:08,689
figuring out essentially how many are

634
00:26:07,759 --> 00:26:14,620
going to be correct with certain numbers

635
00:26:08,690 --> 00:26:14,620
of guesses I guess okay

636
00:26:15,740 --> 00:26:21,690
all right so we have these three

637
00:26:20,309 --> 00:26:23,789
answered we know how much it costs to

638
00:26:21,690 --> 00:26:25,169
make a guess we know how probable

639
00:26:23,789 --> 00:26:27,320
certain passwords are and we know

640
00:26:25,169 --> 00:26:29,820
roughly what people are paying for these

641
00:26:27,320 --> 00:26:33,389
so we want to now put this all together

642
00:26:29,820 --> 00:26:35,309
so we have a rational adversary who's

643
00:26:33,389 --> 00:26:38,490
going to keep guessing as long as it is

644
00:26:35,309 --> 00:26:40,408
profitable and we develop a formula that

645
00:26:38,490 --> 00:26:43,139
takes these zip parameters that we found

646
00:26:40,409 --> 00:26:45,960
for our distributions alongside a

647
00:26:43,139 --> 00:26:47,610
diminishing returns factor a what this

648
00:26:45,960 --> 00:26:49,470
is as I briefly mentioned at the

649
00:26:47,610 --> 00:26:51,689
beginning this idea that as you're

650
00:26:49,470 --> 00:26:54,029
releasing more and more passwords onto

651
00:26:51,690 --> 00:26:55,889
the market supply and demand starts

652
00:26:54,029 --> 00:26:57,450
kicking in the prices gonna start

653
00:26:55,889 --> 00:27:01,049
dropping is the idea on this so we have

654
00:26:57,450 --> 00:27:03,210
some factor in here that not that models

655
00:27:01,049 --> 00:27:06,629
how quickly is the price going to drop

656
00:27:03,210 --> 00:27:08,429
as more and more released given these

657
00:27:06,629 --> 00:27:12,330
parameters we can come up with this this

658
00:27:08,429 --> 00:27:15,389
threshold of Doom essentially T and what

659
00:27:12,330 --> 00:27:18,269
this means is that if the ratio between

660
00:27:15,389 --> 00:27:20,370
the password value and the cost to make

661
00:27:18,269 --> 00:27:22,529
each guess is above some number that we

662
00:27:20,370 --> 00:27:25,168
can calculate then the adversary should

663
00:27:22,529 --> 00:27:27,360
try to crack 100% of passwords that is

664
00:27:25,169 --> 00:27:29,250
it is always profitable for them to keep

665
00:27:27,360 --> 00:27:31,709
guessing and they should keep going as

666
00:27:29,250 --> 00:27:35,610
long as they can to make as much money

667
00:27:31,710 --> 00:27:37,500
as they possibly can so I will just toss

668
00:27:35,610 --> 00:27:39,658
up a bunch of crazy formulas here on the

669
00:27:37,500 --> 00:27:42,210
board for just a second I know it's a

670
00:27:39,659 --> 00:27:44,309
little messy but here's the key takeaway

671
00:27:42,210 --> 00:27:47,850
from this we've got our five parameters

672
00:27:44,309 --> 00:27:49,590
here the password I'll going in order Y

673
00:27:47,850 --> 00:27:52,199
in our our zip parameters we have that

674
00:27:49,590 --> 00:27:53,908
we got it from the Yahoo data set we

675
00:27:52,200 --> 00:27:56,580
have a which is our diminishing returns

676
00:27:53,909 --> 00:27:57,809
which we can set to whatever we want to

677
00:27:56,580 --> 00:27:59,789
model in this case we're usually going

678
00:27:57,809 --> 00:28:02,850
to use about 0.8 it's a number between 0

679
00:27:59,789 --> 00:28:06,840
& 1 so 0.8 in the cases we're about to

680
00:28:02,850 --> 00:28:08,070
see the the password value we're going

681
00:28:06,840 --> 00:28:10,470
to be able to get that from the

682
00:28:08,070 --> 00:28:13,649
estimates I gave a few minutes ago and

683
00:28:10,470 --> 00:28:16,889
Kay cost compute each guess essentially

684
00:28:13,649 --> 00:28:18,928
yes so Ben when you use point a for a

685
00:28:16,889 --> 00:28:20,969
are you saying that basically the worst

686
00:28:18,929 --> 00:28:22,080
case is if they fled the market the

687
00:28:20,970 --> 00:28:25,350
value of the passwords will diminish

688
00:28:22,080 --> 00:28:27,990
down to 80% so it doesn't mean that

689
00:28:25,350 --> 00:28:30,750
exactly it works essentially as

690
00:28:27,990 --> 00:28:32,040
exponent you can think of so as it's

691
00:28:30,750 --> 00:28:34,080
decreasing you're going to get the value

692
00:28:32,040 --> 00:28:37,139
that's going to start to drop off over

693
00:28:34,080 --> 00:28:40,230
time it doesn't mean that a pet once the

694
00:28:37,140 --> 00:28:42,690
market is flooded 80% will happen it's

695
00:28:40,230 --> 00:28:47,250
just a factor of how fast is it

696
00:28:42,690 --> 00:28:49,770
decreasing okay so we do have this

697
00:28:47,250 --> 00:28:50,340
formula and while it may may look a bit

698
00:28:49,770 --> 00:28:52,830
complicated

699
00:28:50,340 --> 00:28:53,639
up here hopefully you all believe that

700
00:28:52,830 --> 00:28:56,428
you could go through and you could

701
00:28:53,640 --> 00:28:58,110
probably code this up and you'd be able

702
00:28:56,429 --> 00:29:02,429
to make a function plug in these numbers

703
00:28:58,110 --> 00:29:05,340
and get some answer out so let's

704
00:29:02,429 --> 00:29:07,590
actually take a look at where we stand

705
00:29:05,340 --> 00:29:11,840
with all of these previous breaches and

706
00:29:07,590 --> 00:29:11,840
where this threshold happens to land so

707
00:29:12,800 --> 00:29:17,070
we will show these for a few leaks

708
00:29:14,940 --> 00:29:19,440
actually for a few weeks at just Dropbox

709
00:29:17,070 --> 00:29:20,610
Ashley Madison LastPass the data was

710
00:29:19,440 --> 00:29:22,110
leaked in a way that doesn't let us

711
00:29:20,610 --> 00:29:24,449
calculate the zip parameters we just

712
00:29:22,110 --> 00:29:26,100
don't have enough information or the

713
00:29:24,450 --> 00:29:29,400
right kind of information but we do know

714
00:29:26,100 --> 00:29:31,409
for example what they're hashing

715
00:29:29,400 --> 00:29:32,340
parameters were so I showed on the table

716
00:29:31,410 --> 00:29:35,280
earlier Dropbox

717
00:29:32,340 --> 00:29:38,100
they run bluefish 256 times which is

718
00:29:35,280 --> 00:29:40,050
bcrypt we do know that and we should be

719
00:29:38,100 --> 00:29:42,389
able to use this to take a look at how

720
00:29:40,050 --> 00:29:47,100
much that would have protected our users

721
00:29:42,390 --> 00:29:49,590
so we have a chart here what you're

722
00:29:47,100 --> 00:29:52,110
looking at since a long the x-axis we

723
00:29:49,590 --> 00:29:53,850
will be increasing our cost as we go to

724
00:29:52,110 --> 00:29:56,490
the right the cost to make each guess

725
00:29:53,850 --> 00:29:58,370
and then on the y-axis we just have the

726
00:29:56,490 --> 00:30:00,750
value of a password once it's correct

727
00:29:58,370 --> 00:30:04,020
our curves that are kind of going off to

728
00:30:00,750 --> 00:30:05,760
the right here are are these thresholds

729
00:30:04,020 --> 00:30:06,780
essentially and remember if we are above

730
00:30:05,760 --> 00:30:11,610
that

731
00:30:06,780 --> 00:30:13,740
well we're doomed so if we land here we

732
00:30:11,610 --> 00:30:16,199
can say that an adversary should try to

733
00:30:13,740 --> 00:30:19,040
crack 100% of passwords because it is

734
00:30:16,200 --> 00:30:22,770
always worth their time to keep going

735
00:30:19,040 --> 00:30:27,330
now for the too depressing button clicks

736
00:30:22,770 --> 00:30:29,490
here we actually find that when you are

737
00:30:27,330 --> 00:30:30,990
going through all these breaches and

738
00:30:29,490 --> 00:30:32,850
given their key stretching parameters we

739
00:30:30,990 --> 00:30:36,419
are going to land well above this

740
00:30:32,850 --> 00:30:37,639
threshold so actually let's zoom in a

741
00:30:36,419 --> 00:30:40,620
little bit

742
00:30:37,640 --> 00:30:42,380
so essentially on the top here between

743
00:30:40,620 --> 00:30:44,760
0.3 point 5 that's

744
00:30:42,380 --> 00:30:50,610
roughly the password value estimates we

745
00:30:44,760 --> 00:30:52,080
had even if we are being pessimistic and

746
00:30:50,610 --> 00:30:54,979
assuming the passwords not really worth

747
00:30:52,080 --> 00:30:57,419
that much for them and that they are

748
00:30:54,980 --> 00:30:59,820
there working on the LastPass breach

749
00:30:57,420 --> 00:31:01,320
which of the the breaches we were

750
00:30:59,820 --> 00:31:04,139
looking at earlier had the highest

751
00:31:01,320 --> 00:31:06,510
parameters even in this most pessimistic

752
00:31:04,140 --> 00:31:08,760
for the attacker case it's still worth

753
00:31:06,510 --> 00:31:11,070
their time to do this and we do find

754
00:31:08,760 --> 00:31:12,950
that it is essentially always profitable

755
00:31:11,070 --> 00:31:20,610
for them to keep trying to crack

756
00:31:12,950 --> 00:31:21,780
passwords so given our current values

757
00:31:20,610 --> 00:31:23,490
for passwords and hash function

758
00:31:21,780 --> 00:31:25,379
parameters advertisers are going to keep

759
00:31:23,490 --> 00:31:28,440
working until they crack 100% of

760
00:31:25,380 --> 00:31:30,630
passwords that follow Zipz law and here

761
00:31:28,440 --> 00:31:32,340
is our first lesson that is the amount

762
00:31:30,630 --> 00:31:33,630
of key stretching that is being done by

763
00:31:32,340 --> 00:31:35,610
companies involved in these leaks is

764
00:31:33,630 --> 00:31:36,660
dramatically insufficient it's not

765
00:31:35,610 --> 00:31:40,320
really protecting anyone

766
00:31:36,660 --> 00:31:43,490
yes did you look at for example if you

767
00:31:40,320 --> 00:31:47,790
get all this equipment in configuration

768
00:31:43,490 --> 00:31:49,920
to just crack let's say 10 10 accounts

769
00:31:47,790 --> 00:31:53,820
or 10 passwords you're not gonna pay off

770
00:31:49,920 --> 00:31:56,160
all that investment is there some point

771
00:31:53,820 --> 00:31:58,139
above number of potential passwords you

772
00:31:56,160 --> 00:32:02,190
can crack that you say ok now we're into

773
00:31:58,140 --> 00:32:03,870
that worth it so that's going to here's

774
00:32:02,190 --> 00:32:07,200
how you would handle that and how we

775
00:32:03,870 --> 00:32:08,689
handle it essentially equipment cost is

776
00:32:07,200 --> 00:32:10,800
high that's what you're trying to

777
00:32:08,690 --> 00:32:12,750
there's like enough front capital

778
00:32:10,800 --> 00:32:15,120
there's the O&M and then there's a

779
00:32:12,750 --> 00:32:17,100
capital expense yes the startup cost

780
00:32:15,120 --> 00:32:18,750
right yeah so at what point in time do

781
00:32:17,100 --> 00:32:20,429
you cover your start-up costs the way

782
00:32:18,750 --> 00:32:22,320
you handle that is you actually do work

783
00:32:20,430 --> 00:32:25,740
that into the cost to compute each hash

784
00:32:22,320 --> 00:32:27,990
function so I've mentioned aunt minor s9

785
00:32:25,740 --> 00:32:31,440
earlier and we gave an estimate for how

786
00:32:27,990 --> 00:32:33,090
much it costs to to compute each base

787
00:32:31,440 --> 00:32:34,410
function with the a minor s9 that

788
00:32:33,090 --> 00:32:36,600
actually does factor in the cost of

789
00:32:34,410 --> 00:32:38,670
equipment so you can factor in the cost

790
00:32:36,600 --> 00:32:42,360
of these whatever Hardware you're using

791
00:32:38,670 --> 00:32:46,590
into whatever our cost parameter is down

792
00:32:42,360 --> 00:32:48,000
here or the cost to make each guess it's

793
00:32:46,590 --> 00:32:50,810
actually its factored into your guessing

794
00:32:48,000 --> 00:32:53,040
cost is is the way to put it

795
00:32:50,810 --> 00:32:55,370
okay so you can handle that and that's

796
00:32:53,040 --> 00:32:55,370
how you do it

797
00:32:55,700 --> 00:33:01,620
where were we okay so yes now two key

798
00:32:59,910 --> 00:33:04,530
stretching done by companies not

799
00:33:01,620 --> 00:33:08,010
sufficient to really protect people and

800
00:33:04,530 --> 00:33:12,810
even if good enough values are picked

801
00:33:08,010 --> 00:33:15,360
and I sort of say good enough in some

802
00:33:12,810 --> 00:33:16,770
way even if you are say not in this red

803
00:33:15,360 --> 00:33:18,810
zone right here and you're just a little

804
00:33:16,770 --> 00:33:21,540
bit to the right all that's saying is

805
00:33:18,810 --> 00:33:23,700
that only 99 percent of people lost

806
00:33:21,540 --> 00:33:25,379
their accounts so that still maybe not

807
00:33:23,700 --> 00:33:28,050
good if we really want to get to some

808
00:33:25,380 --> 00:33:30,210
good levels the delay or the cost that

809
00:33:28,050 --> 00:33:33,330
you have to pay or charge for each guess

810
00:33:30,210 --> 00:33:34,500
it starts to become intolerable not to

811
00:33:33,330 --> 00:33:37,980
just to the attackers but also

812
00:33:34,500 --> 00:33:39,660
intolerable for the users and we'll see

813
00:33:37,980 --> 00:33:43,590
a more dramatic case of that in a moment

814
00:33:39,660 --> 00:33:48,030
here I do want to say this with a grain

815
00:33:43,590 --> 00:33:49,350
of salt we are assuming this the the

816
00:33:48,030 --> 00:33:52,730
distribution is truly following what's

817
00:33:49,350 --> 00:33:55,740
called cdf zips law which is just the

818
00:33:52,730 --> 00:33:57,240
the cumulative density function version

819
00:33:55,740 --> 00:33:59,400
of it basically a running sum of

820
00:33:57,240 --> 00:34:03,540
probability rather than the probability

821
00:33:59,400 --> 00:34:04,590
of the is password but it is hard to say

822
00:34:03,540 --> 00:34:07,530
that the tail of the distribution

823
00:34:04,590 --> 00:34:09,150
actually follows zips law the reason for

824
00:34:07,530 --> 00:34:11,250
this is once you get towards the end of

825
00:34:09,150 --> 00:34:12,450
these lists you have the users who have

826
00:34:11,250 --> 00:34:13,980
actually gone through and picked

827
00:34:12,449 --> 00:34:17,009
passwords that nobody else has picked

828
00:34:13,980 --> 00:34:19,770
and seeing as we only have it showing up

829
00:34:17,010 --> 00:34:21,690
once it is it's essentially not enough

830
00:34:19,770 --> 00:34:24,239
data to really go through and say for

831
00:34:21,690 --> 00:34:25,980
sure that this tail the the infrequent

832
00:34:24,239 --> 00:34:27,959
passwords are really following zips law

833
00:34:25,980 --> 00:34:29,310
so it's just a case of there's not

834
00:34:27,960 --> 00:34:32,010
enough password so there's not enough

835
00:34:29,310 --> 00:34:33,570
data to make strong claims for the

836
00:34:32,010 --> 00:34:37,620
people who have picked say a unique

837
00:34:33,570 --> 00:34:40,320
password but it does hold as long as

838
00:34:37,620 --> 00:34:42,029
passwords do follow this pattern and

839
00:34:40,320 --> 00:34:43,860
from the church earlier hopefully I've

840
00:34:42,030 --> 00:34:46,440
convinced you that a lot of them really

841
00:34:43,860 --> 00:34:48,360
do so as long as this pattern is being

842
00:34:46,440 --> 00:34:50,010
followed by passwords it's worth an

843
00:34:48,360 --> 00:34:51,690
adversary's time to go after them it is

844
00:34:50,010 --> 00:34:57,360
going to profit them to continue

845
00:34:51,690 --> 00:34:59,730
attacking so hopefully we can find a way

846
00:34:57,360 --> 00:35:02,850
to stop this and get ourselves into a

847
00:34:59,730 --> 00:35:05,070
better situation so next we will take a

848
00:35:02,850 --> 00:35:07,650
look at the question of of memory hard

849
00:35:05,070 --> 00:35:10,019
functions and candies actually help

850
00:35:07,650 --> 00:35:11,579
so everything we've talked about now and

851
00:35:10,019 --> 00:35:12,990
all the functions were hash iteration

852
00:35:11,579 --> 00:35:17,039
that's again just the hash of hash of

853
00:35:12,990 --> 00:35:17,999
hash method why are these so cheap and

854
00:35:17,039 --> 00:35:20,609
why is this working

855
00:35:17,999 --> 00:35:22,640
well it's possible to use custom hardway

856
00:35:20,609 --> 00:35:27,630
hardware to calculate these very quickly

857
00:35:22,640 --> 00:35:29,400
whereas say if you are if you're I don't

858
00:35:27,630 --> 00:35:31,670
know Facebook or something you have

859
00:35:29,400 --> 00:35:34,109
basically standard servers that are

860
00:35:31,670 --> 00:35:36,210
they're going to be running here they're

861
00:35:34,109 --> 00:35:37,619
using general purpose equipment and not

862
00:35:36,210 --> 00:35:40,019
the same equipment that's being used by

863
00:35:37,619 --> 00:35:42,150
an attacker

864
00:35:40,019 --> 00:35:45,209
so can we actually stop them from doing

865
00:35:42,150 --> 00:35:46,920
this can we force them to basically be

866
00:35:45,210 --> 00:35:50,220
on the same playing field that everyone

867
00:35:46,920 --> 00:35:53,190
is and the answer is yeah we can use

868
00:35:50,220 --> 00:35:55,709
memory hard functions to do this what

869
00:35:53,190 --> 00:35:58,079
are they they are functions that take a

870
00:35:55,710 --> 00:36:00,329
large amount of memory to compute by a

871
00:35:58,079 --> 00:36:02,819
large amount we can talk hundreds of

872
00:36:00,329 --> 00:36:05,789
megabytes or gigabytes in this case to

873
00:36:02,819 --> 00:36:07,410
compute these functions any amount of

874
00:36:05,789 --> 00:36:11,339
memory used as a parameter just like

875
00:36:07,410 --> 00:36:13,950
time tends to be so while computation

876
00:36:11,339 --> 00:36:17,910
time is faster with specialized hardware

877
00:36:13,950 --> 00:36:20,339
memory accessing is not that especially

878
00:36:17,910 --> 00:36:22,078
when you're dealing with gigabytes the

879
00:36:20,339 --> 00:36:24,058
amount of time it's going to take an

880
00:36:22,079 --> 00:36:26,700
attacker to access some location is ran

881
00:36:24,059 --> 00:36:27,839
in RAM is going to be the same amount of

882
00:36:26,700 --> 00:36:29,640
time that it's going to take you to go

883
00:36:27,839 --> 00:36:30,799
and access and so what you're gonna do

884
00:36:29,640 --> 00:36:36,749
is you're gonna make that the bottleneck

885
00:36:30,799 --> 00:36:38,819
rather than computation time yes is this

886
00:36:36,749 --> 00:36:40,499
memory hard phone are these memory fire

887
00:36:38,819 --> 00:36:42,630
hard functions will make the

888
00:36:40,499 --> 00:36:45,930
authentication process much more

889
00:36:42,630 --> 00:36:48,660
expensive for the regular server let's

890
00:36:45,930 --> 00:36:50,578
say to authenticate a regular user in

891
00:36:48,660 --> 00:36:52,319
terms of memory yes it is going to be

892
00:36:50,579 --> 00:36:53,819
more expensive as I said these could use

893
00:36:52,319 --> 00:36:58,859
maybe hundreds of megabytes in a

894
00:36:53,819 --> 00:37:01,410
gigabyte to compute which of course is

895
00:36:58,859 --> 00:37:02,910
more than is currently used so that I

896
00:37:01,410 --> 00:37:04,109
mean if an adversary has to pay it you

897
00:37:02,910 --> 00:37:06,180
also have to pay it when you're

898
00:37:04,109 --> 00:37:09,480
calculating it so in terms of memory yes

899
00:37:06,180 --> 00:37:11,519
and with these functions much like with

900
00:37:09,480 --> 00:37:14,190
hash iteration the amount that you're

901
00:37:11,519 --> 00:37:15,930
using is not just a fixed amount it's a

902
00:37:14,190 --> 00:37:17,970
parameter that you give you can say I

903
00:37:15,930 --> 00:37:20,680
want you to use this memory hard

904
00:37:17,970 --> 00:37:23,828
function use two gigabytes of RAM to do

905
00:37:20,680 --> 00:37:25,808
this that's just something you put in so

906
00:37:23,829 --> 00:37:27,940
it varies a bit you can adjust the cost

907
00:37:25,809 --> 00:37:29,619
according to what you have but in terms

908
00:37:27,940 --> 00:37:31,450
of memory yes it does anything an

909
00:37:29,619 --> 00:37:35,859
adversary has to pay you have to pay as

910
00:37:31,450 --> 00:37:36,819
well when you are doing this but

911
00:37:35,859 --> 00:37:42,250
hopefully I'll convince you it's worth

912
00:37:36,819 --> 00:37:44,170
it why are we going to use them so while

913
00:37:42,250 --> 00:37:46,390
it does increase computation cost in

914
00:37:44,170 --> 00:37:47,349
terms of memory it doesn't necessarily

915
00:37:46,390 --> 00:37:51,490
mean that we're going to pay a large

916
00:37:47,349 --> 00:37:53,410
penalty in terms of computation time so

917
00:37:51,490 --> 00:37:56,200
we're gonna rework our model a little

918
00:37:53,410 --> 00:37:57,730
bit earlier I think the cost K is just T

919
00:37:56,200 --> 00:38:01,029
times whatever the hash function costs

920
00:37:57,730 --> 00:38:03,609
I'm going to add in one more factor now

921
00:38:01,030 --> 00:38:06,490
which is T squared times whatever the

922
00:38:03,609 --> 00:38:07,960
cost of memory is so it turns out that

923
00:38:06,490 --> 00:38:10,359
memory is going to be a it's going to

924
00:38:07,960 --> 00:38:14,619
scale quadratically for cost in this

925
00:38:10,359 --> 00:38:17,828
case and this is an area time so area

926
00:38:14,619 --> 00:38:19,390
complexity times time complexity very

927
00:38:17,829 --> 00:38:21,670
roughly there's a few nuances in there

928
00:38:19,390 --> 00:38:23,529
but that's the general gist of it we're

929
00:38:21,670 --> 00:38:27,040
gonna make that a quadratic it's a

930
00:38:23,530 --> 00:38:28,809
quadratic case we're gonna plug in our

931
00:38:27,040 --> 00:38:31,230
same cost that we were just using for

932
00:38:28,809 --> 00:38:34,839
hash functions so this is the the more

933
00:38:31,230 --> 00:38:36,220
pessimistic for the attacker case of 7

934
00:38:34,839 --> 00:38:38,558
times 10 to the negative 15th to

935
00:38:36,220 --> 00:38:40,240
evaluate the base function and memory

936
00:38:38,559 --> 00:38:43,119
we're going to say is about 1/3

937
00:38:40,240 --> 00:38:47,290
thousandth of that yes wisey are you so

938
00:38:43,119 --> 00:38:49,569
square or is it square so it's a little

939
00:38:47,290 --> 00:38:50,710
bit of detail on how these work when you

940
00:38:49,569 --> 00:38:53,109
are doing a memory hard function it

941
00:38:50,710 --> 00:38:56,680
tends to be filling an array essentially

942
00:38:53,109 --> 00:39:02,710
and for on each cycle you're gonna fill

943
00:38:56,680 --> 00:39:04,210
in one cell using up T array units for T

944
00:39:02,710 --> 00:39:08,380
time essentially and this ends up being

945
00:39:04,210 --> 00:39:09,880
quadratic is where this comes from this

946
00:39:08,380 --> 00:39:11,380
is area time complexity not time

947
00:39:09,880 --> 00:39:14,170
complexity we're using both right here

948
00:39:11,380 --> 00:39:18,150
so two units of memory 40 units of time

949
00:39:14,170 --> 00:39:18,150
gives us our squared factor right here

950
00:39:18,270 --> 00:39:23,380
all right so we can actually plot this

951
00:39:21,369 --> 00:39:27,280
and try to see what sort of advantages

952
00:39:23,380 --> 00:39:29,890
we have going so what you're looking at

953
00:39:27,280 --> 00:39:31,240
right here are the effects of what we

954
00:39:29,890 --> 00:39:32,170
have and this is not not looking at

955
00:39:31,240 --> 00:39:34,240
value right here what we have on the

956
00:39:32,170 --> 00:39:35,290
y-axis is the estimated number

957
00:39:34,240 --> 00:39:37,779
of passwords that are going to be

958
00:39:35,290 --> 00:39:39,880
cracked versus on the bottom just how

959
00:39:37,780 --> 00:39:43,090
difficult we're making it what's our t

960
00:39:39,880 --> 00:39:47,860
parameter and what you can see so on the

961
00:39:43,090 --> 00:39:49,360
right we have our our non memory hard

962
00:39:47,860 --> 00:39:53,200
function versions and on the left we do

963
00:39:49,360 --> 00:39:56,140
have the memory hard functions and in

964
00:39:53,200 --> 00:39:58,509
this case left is good right as bad and

965
00:39:56,140 --> 00:40:01,810
we can get essentially we can save a lot

966
00:39:58,510 --> 00:40:03,340
more people with a lot less work I mean

967
00:40:01,810 --> 00:40:04,660
we're not going to hit zero here because

968
00:40:03,340 --> 00:40:06,340
no amount of security is going to

969
00:40:04,660 --> 00:40:08,460
protect the person who picks one two

970
00:40:06,340 --> 00:40:11,500
three four five six as their password

971
00:40:08,460 --> 00:40:14,110
but we actually can really start saving

972
00:40:11,500 --> 00:40:17,890
a good number of people here so just to

973
00:40:14,110 --> 00:40:20,530
give an example of just how much less

974
00:40:17,890 --> 00:40:21,730
work you need to do to protect the same

975
00:40:20,530 --> 00:40:23,920
number of people let's just say that we

976
00:40:21,730 --> 00:40:25,330
are we're trying to protect eighty

977
00:40:23,920 --> 00:40:29,440
percent of people so we're only going to

978
00:40:25,330 --> 00:40:30,759
allow 20 percent to be cracked if we're

979
00:40:29,440 --> 00:40:32,110
looking on a memory hard function we

980
00:40:30,760 --> 00:40:34,780
need to run this for about 250

981
00:40:32,110 --> 00:40:36,810
milliseconds which isn't too much time

982
00:40:34,780 --> 00:40:39,520
you can imagine a server handling this

983
00:40:36,810 --> 00:40:40,600
and you're probably not going to blink

984
00:40:39,520 --> 00:40:43,359
an eye you're not going to care too much

985
00:40:40,600 --> 00:40:45,880
if you have to wait a quarter seconds to

986
00:40:43,359 --> 00:40:48,340
log in if we want the same level of

987
00:40:45,880 --> 00:40:50,619
protection without this it's going to

988
00:40:48,340 --> 00:40:51,730
take two minutes and while you are

989
00:40:50,619 --> 00:40:53,320
willing to wait for the memory hard

990
00:40:51,730 --> 00:40:54,670
function I don't think that you're

991
00:40:53,320 --> 00:40:56,400
willing to sit there and wait two

992
00:40:54,670 --> 00:40:58,690
minutes to log in to every single thing

993
00:40:56,400 --> 00:41:00,790
you can you're just going to run away

994
00:40:58,690 --> 00:41:02,830
and you're going to start using whatever

995
00:41:00,790 --> 00:41:05,109
service is actually going to be fast and

996
00:41:02,830 --> 00:41:06,900
usable and accessible to you so in some

997
00:41:05,109 --> 00:41:09,850
ways we do actually need to worry about

998
00:41:06,900 --> 00:41:12,220
our users even willing to tolerate these

999
00:41:09,850 --> 00:41:14,140
delays so if you want to keep them safe

1000
00:41:12,220 --> 00:41:15,580
with hash iteration no they're not

1001
00:41:14,140 --> 00:41:17,319
really going to tolerate that delay it's

1002
00:41:15,580 --> 00:41:18,880
way too much but with memory hard

1003
00:41:17,320 --> 00:41:21,430
functions we're really looking at pretty

1004
00:41:18,880 --> 00:41:27,850
reasonable computation times here for

1005
00:41:21,430 --> 00:41:30,399
for protection so to kind of sum it all

1006
00:41:27,850 --> 00:41:32,319
up what have we done today I've

1007
00:41:30,400 --> 00:41:34,510
described basically this this adversary

1008
00:41:32,320 --> 00:41:36,040
who is interested in making a profit and

1009
00:41:34,510 --> 00:41:38,770
economic adversary who's doing an

1010
00:41:36,040 --> 00:41:40,509
offline password attack we actually

1011
00:41:38,770 --> 00:41:42,460
presented this is the strongest evidence

1012
00:41:40,510 --> 00:41:46,000
to date that passwords actually do

1013
00:41:42,460 --> 00:41:47,680
follow zip slaw the depressing thing is

1014
00:41:46,000 --> 00:41:47,859
that the amount of key stretching used

1015
00:41:47,680 --> 00:41:50,379
in

1016
00:41:47,859 --> 00:41:51,788
practice right now is often insufficient

1017
00:41:50,380 --> 00:41:55,180
to actually protect users from these

1018
00:41:51,789 --> 00:41:56,440
offline attacks so recommendations we

1019
00:41:55,180 --> 00:41:59,440
give as a result of this we actually

1020
00:41:56,440 --> 00:42:02,170
recommend that NIST standards be updated

1021
00:41:59,440 --> 00:42:04,390
we want to disallow pbkdf2 which is one

1022
00:42:02,170 --> 00:42:07,150
of those hash iteration functions and we

1023
00:42:04,390 --> 00:42:09,249
want it to be required to use memory

1024
00:42:07,150 --> 00:42:10,779
hardness at the moment they actually

1025
00:42:09,249 --> 00:42:13,660
offer two options they do say that you

1026
00:42:10,779 --> 00:42:16,269
could use pbkdf2 or another memory hard

1027
00:42:13,660 --> 00:42:19,359
function but we would prefer I recommend

1028
00:42:16,269 --> 00:42:22,118
that the hash iteration be xed and you

1029
00:42:19,359 --> 00:42:24,279
you require this memory hardness and we

1030
00:42:22,119 --> 00:42:26,440
also do recommend that that NIST

1031
00:42:24,279 --> 00:42:27,759
standards also be updated to recommence

1032
00:42:26,440 --> 00:42:29,920
and they called distributed hashing

1033
00:42:27,759 --> 00:42:30,999
which is just another method of

1034
00:42:29,920 --> 00:42:35,140
preventing this whole mess from

1035
00:42:30,999 --> 00:42:36,519
happening in the first place yeah all

1036
00:42:35,140 --> 00:42:40,450
right let me try to summarize the last

1037
00:42:36,519 --> 00:42:42,339
few slides so what you're saying is with

1038
00:42:40,450 --> 00:42:46,538
memory hard function which will put a

1039
00:42:42,339 --> 00:42:50,230
memory cost on both the user as well as

1040
00:42:46,539 --> 00:42:51,489
the attacker what will happen is the

1041
00:42:50,230 --> 00:42:54,339
amount of time that it requires the

1042
00:42:51,489 --> 00:42:56,619
attacker to check out each password will

1043
00:42:54,339 --> 00:42:59,440
take that much longer because of the

1044
00:42:56,619 --> 00:43:02,049
memory requirements yeah so if I jump

1045
00:42:59,440 --> 00:43:04,299
back to here but isn't it previously

1046
00:43:02,049 --> 00:43:05,710
exist I'm sorry isn't it just an

1047
00:43:04,299 --> 00:43:10,420
economic cost of buying more memory for

1048
00:43:05,710 --> 00:43:18,249
the attacker I it's a time cost

1049
00:43:10,420 --> 00:43:20,859
essentially so because we have this this

1050
00:43:18,249 --> 00:43:23,259
cost essentially for for using memory

1051
00:43:20,859 --> 00:43:27,220
essentially which is scaling

1052
00:43:23,259 --> 00:43:29,160
quadratically it's a it is essentially

1053
00:43:27,220 --> 00:43:31,209
just making it more expensive to them

1054
00:43:29,160 --> 00:43:33,430
sorry can you rephrase that that

1055
00:43:31,210 --> 00:43:37,109
question okay I think I got it so what

1056
00:43:33,430 --> 00:43:41,109
you're saying is the memory hardening

1057
00:43:37,109 --> 00:43:43,359
increases the time cost to the attack

1058
00:43:41,109 --> 00:43:46,420
time and monetary cost a lot of track

1059
00:43:43,359 --> 00:43:51,700
loss which in turn just makes him yeah

1060
00:43:46,420 --> 00:43:56,019
less profitable yes and so yeah it makes

1061
00:43:51,700 --> 00:43:58,509
it more expensive to them simply due to

1062
00:43:56,019 --> 00:44:00,520
that that extra memory cost and you know

1063
00:43:58,509 --> 00:44:04,580
on what scale does it do it

1064
00:44:00,520 --> 00:44:06,410
what do you mean on on what's go see had

1065
00:44:04,580 --> 00:44:06,740
the memory heart function curve on the

1066
00:44:06,410 --> 00:44:10,609
left

1067
00:44:06,740 --> 00:44:12,080
mm-hmm if if it was a memory heart

1068
00:44:10,609 --> 00:44:13,520
function and it was just whatever

1069
00:44:12,080 --> 00:44:16,490
they're using now in terms of multiple

1070
00:44:13,520 --> 00:44:19,759
hashing how much time does it multiply

1071
00:44:16,490 --> 00:44:21,439
with the memory heart function okay what

1072
00:44:19,760 --> 00:44:24,740
it curly takes over what it currently

1073
00:44:21,440 --> 00:44:26,210
takes um we can see it's 200 T

1074
00:44:24,740 --> 00:44:28,129
milliseconds for a memory heart function

1075
00:44:26,210 --> 00:44:30,350
and normal crack would take how long

1076
00:44:28,130 --> 00:44:32,690
sorry was the last bit the normal

1077
00:44:30,350 --> 00:44:36,109
cracking of a typical hashing function

1078
00:44:32,690 --> 00:44:38,210
today how long does that take for just

1079
00:44:36,109 --> 00:44:44,240
the standard wants to do it so aunt

1080
00:44:38,210 --> 00:44:46,520
miner can do 14 trillion per second so

1081
00:44:44,240 --> 00:44:47,959
114 trillionth of a second for one so

1082
00:44:46,520 --> 00:44:51,680
multiply that by whatever parameter

1083
00:44:47,960 --> 00:44:53,150
they're using for the time however the

1084
00:44:51,680 --> 00:44:54,950
key with memory heart function is we

1085
00:44:53,150 --> 00:44:57,770
don't let them essentially cheat and get

1086
00:44:54,950 --> 00:45:00,020
away with 114 trillionth of a second we

1087
00:44:57,770 --> 00:45:05,930
do bump them up to the same cost that

1088
00:45:00,020 --> 00:45:08,600
you are hopefully playing paying right

1089
00:45:05,930 --> 00:45:10,520
mm-hmm what is the modern type

1090
00:45:08,600 --> 00:45:12,940
techniques used in second factor

1091
00:45:10,520 --> 00:45:14,480
authentication like a hardware backed

1092
00:45:12,940 --> 00:45:17,869
authentication scheme

1093
00:45:14,480 --> 00:45:20,780
well well password cracking be still so

1094
00:45:17,869 --> 00:45:22,369
profitable or is it just based on

1095
00:45:20,780 --> 00:45:24,410
assumption that user doesn't use second

1096
00:45:22,369 --> 00:45:26,060
so everything we've talked about today

1097
00:45:24,410 --> 00:45:29,299
isn't looking at second factor

1098
00:45:26,060 --> 00:45:30,080
authentication that's an interesting

1099
00:45:29,300 --> 00:45:31,220
question I don't know it may be

1100
00:45:30,080 --> 00:45:32,690
something that we can look at in the

1101
00:45:31,220 --> 00:45:33,980
future but yeah today we're we're

1102
00:45:32,690 --> 00:45:36,560
thinking about users who are not using

1103
00:45:33,980 --> 00:45:40,130
that right it's just a straight-up

1104
00:45:36,560 --> 00:45:41,840
attack I mean the most the most

1105
00:45:40,130 --> 00:45:43,910
straightforward thing that I can think

1106
00:45:41,840 --> 00:45:48,200
of for deploying such a defense

1107
00:45:43,910 --> 00:45:50,180
mechanism in a service is to first to

1108
00:45:48,200 --> 00:45:53,480
begin ways to disallow those easy

1109
00:45:50,180 --> 00:45:55,819
password right before the user even have

1110
00:45:53,480 --> 00:45:59,060
the chance to set it up the second there

1111
00:45:55,820 --> 00:46:02,560
will be having some other factor of

1112
00:45:59,060 --> 00:46:05,750
authentication like using either

1113
00:46:02,560 --> 00:46:08,540
dedicated hardware or dynamically

1114
00:46:05,750 --> 00:46:12,760
generated code being sent via another

1115
00:46:08,540 --> 00:46:15,259
source another channel and

1116
00:46:12,760 --> 00:46:17,030
see I mean yeah there are other defenses

1117
00:46:15,260 --> 00:46:19,490
you can employ against offline attacks

1118
00:46:17,030 --> 00:46:20,930
that's right so um I mean you mentioned

1119
00:46:19,490 --> 00:46:22,729
disallowing certain passwords how

1120
00:46:20,930 --> 00:46:24,919
exactly you do that is a whole other can

1121
00:46:22,730 --> 00:46:28,250
of worms and could probably be another

1122
00:46:24,920 --> 00:46:30,800
hour-long presentation yeah I mean but

1123
00:46:28,250 --> 00:46:33,620
turns a second factor is it another way

1124
00:46:30,800 --> 00:46:35,270
to to prevent these yes but if you

1125
00:46:33,620 --> 00:46:37,069
really do look at all of these breaches

1126
00:46:35,270 --> 00:46:39,530
that we're looking at none of these

1127
00:46:37,070 --> 00:46:41,360
actually had that in there and a lot of

1128
00:46:39,530 --> 00:46:42,470
these breaches actually are situations

1129
00:46:41,360 --> 00:46:45,530
where we are not dealing with second

1130
00:46:42,470 --> 00:46:46,819
factor authentication so it's a case

1131
00:46:45,530 --> 00:46:48,380
that happens essentially it's what we

1132
00:46:46,820 --> 00:46:49,970
want to say well these are offline

1133
00:46:48,380 --> 00:46:52,970
yes it's off to a factory would be

1134
00:46:49,970 --> 00:46:54,439
online no I mean even even if you've

1135
00:46:52,970 --> 00:46:56,390
cracked the past where you know that

1136
00:46:54,440 --> 00:46:58,490
what the correct password is you can't

1137
00:46:56,390 --> 00:47:00,710
access the account that's the point

1138
00:46:58,490 --> 00:47:04,149
yeah so you need a second factor to

1139
00:47:00,710 --> 00:47:06,110
prevent that from happening mm-hmm

1140
00:47:04,150 --> 00:47:08,450
second factor it's it's just another

1141
00:47:06,110 --> 00:47:13,850
defense essentially uh but one that we

1142
00:47:08,450 --> 00:47:16,210
are not looking at here any other

1143
00:47:13,850 --> 00:47:16,210
questions

1144
00:47:16,750 --> 00:47:21,880
okay thank you very much for listening

1145
00:47:23,160 --> 00:47:26,509
[Applause]

1146
00:47:32,980 --> 00:47:35,040
you

