1
00:00:00,160 --> 00:00:03,840
uh and up next is our final technical

2
00:00:03,840 --> 00:00:06,240
talk for the uh 22nd continual serious

3
00:00:06,240 --> 00:00:07,839
security symposium

4
00:00:07,839 --> 00:00:10,000
uh david tien assistant professor in

5
00:00:10,000 --> 00:00:12,480
computer science whose work is primarily

6
00:00:12,480 --> 00:00:14,960
in system security member system

7
00:00:14,960 --> 00:00:17,039
security and is a member of the persec

8
00:00:17,039 --> 00:00:19,279
laboratory here at purdue his research

9
00:00:19,279 --> 00:00:21,439
involves embedded systems operating

10
00:00:21,439 --> 00:00:23,760
systems and trusted confidential

11
00:00:23,760 --> 00:00:26,160
computing professor tien

12
00:00:26,160 --> 00:00:29,480
it's all yours

13
00:00:31,840 --> 00:00:34,960
hello can you guys hear me

14
00:00:37,200 --> 00:00:38,879
okay hello

15
00:00:38,879 --> 00:00:39,920
a lot of you

16
00:00:39,920 --> 00:00:41,040
good

17
00:00:41,040 --> 00:00:42,719
yes we can hear you

18
00:00:42,719 --> 00:00:44,719
okay uh somehow i could not start my

19
00:00:44,719 --> 00:00:47,520
video okay

20
00:00:47,520 --> 00:00:49,360
there's a very good access control here

21
00:00:49,360 --> 00:00:51,600
i cannot start my video by myself

22
00:00:51,600 --> 00:00:52,640
very good

23
00:00:52,640 --> 00:00:54,000
um

24
00:00:54,000 --> 00:00:58,840
okay let me try to share screen

25
00:00:58,879 --> 00:01:01,120
oh

26
00:01:01,760 --> 00:01:03,680
this uh

27
00:01:03,680 --> 00:01:04,959
it's not good

28
00:01:04,959 --> 00:01:07,280
because i need to authorize zoom to

29
00:01:07,280 --> 00:01:10,080
share the screen

30
00:01:10,720 --> 00:01:12,720
all right

31
00:01:12,720 --> 00:01:15,200
let's see if i can do this very quick

32
00:01:15,200 --> 00:01:17,680
uh dave david don't don't feel pressed

33
00:01:17,680 --> 00:01:20,000
uh we we have a a few minutes uh built

34
00:01:20,000 --> 00:01:21,280
in here we're actually a couple of

35
00:01:21,280 --> 00:01:24,240
minutes okay well okay

36
00:01:24,240 --> 00:01:25,840
yeah no no so while you're working on

37
00:01:25,840 --> 00:01:26,880
that i'm going to use it as an

38
00:01:26,880 --> 00:01:29,119
opportunity to make some announcements

39
00:01:29,119 --> 00:01:31,200
so we have this technical talk and then

40
00:01:31,200 --> 00:01:34,240
following let me turn my video on

41
00:01:34,240 --> 00:01:35,680
this technical talk and then following

42
00:01:35,680 --> 00:01:38,000
this technical talk will conclude the uh

43
00:01:38,000 --> 00:01:41,119
this uh the symposium with uh the

44
00:01:41,119 --> 00:01:43,360
closing keynote address

45
00:01:43,360 --> 00:01:44,560
which

46
00:01:44,560 --> 00:01:47,759
uh also serves as this week's

47
00:01:47,759 --> 00:01:49,840
serious security seminar

48
00:01:49,840 --> 00:01:52,240
so here's your commercial for that so

49
00:01:52,240 --> 00:01:55,360
weekly throughout the academic year uh

50
00:01:55,360 --> 00:01:59,360
on wednesdays at 4 30 eastern we host

51
00:01:59,360 --> 00:02:01,600
the uh serious security seminar so

52
00:02:01,600 --> 00:02:03,119
weekly we have somebody from industry

53
00:02:03,119 --> 00:02:04,320
give a talk

54
00:02:04,320 --> 00:02:05,280
uh

55
00:02:05,280 --> 00:02:07,200
and it is actually a four credit class

56
00:02:07,200 --> 00:02:08,720
here at purdue so there is a number of

57
00:02:08,720 --> 00:02:10,720
students who are enrolled it's a

58
00:02:10,720 --> 00:02:13,680
graduate level lecture class

59
00:02:13,680 --> 00:02:15,200
uh then during the summer we've been

60
00:02:15,200 --> 00:02:17,280
hosting these as well but just not at 4

61
00:02:17,280 --> 00:02:18,480
30. so

62
00:02:18,480 --> 00:02:20,080
while i know that we're going to very

63
00:02:20,080 --> 00:02:23,120
much enjoy uh ahmed yorn from uh i mean

64
00:02:23,120 --> 00:02:25,200
yorn from uh tenable who's gonna give

65
00:02:25,200 --> 00:02:28,319
the talk here in about 20 minutes or so

66
00:02:28,319 --> 00:02:30,000
about a half hour from now

67
00:02:30,000 --> 00:02:32,080
i would encourage you to

68
00:02:32,080 --> 00:02:35,519
take a look every wednesday at our uh

69
00:02:35,519 --> 00:02:36,480
website

70
00:02:36,480 --> 00:02:38,959
for the zoom login for the weekly

71
00:02:38,959 --> 00:02:41,360
security seminar dave are you in a good

72
00:02:41,360 --> 00:02:42,800
position now

73
00:02:42,800 --> 00:02:44,800
yeah i think so uh can everyone see my

74
00:02:44,800 --> 00:02:46,000
screen

75
00:02:46,000 --> 00:02:48,160
we can and your slides great it is all

76
00:02:48,160 --> 00:02:49,599
yours dave

77
00:02:49,599 --> 00:02:52,000
awesome uh sorry about uh about this

78
00:02:52,000 --> 00:02:53,760
somehow like every time when i update my

79
00:02:53,760 --> 00:02:56,560
mac i have to you know authorize zoom to

80
00:02:56,560 --> 00:02:58,560
share the screen all right with further

81
00:02:58,560 --> 00:03:01,840
ado let's get started um so all credits

82
00:03:01,840 --> 00:03:04,400
goes to students and as usual you know

83
00:03:04,400 --> 00:03:06,640
professors just talk like what i'm doing

84
00:03:06,640 --> 00:03:07,840
right now

85
00:03:07,840 --> 00:03:10,480
um so my topic today is about building

86
00:03:10,480 --> 00:03:13,360
um an mm-i o based secure reference

87
00:03:13,360 --> 00:03:15,519
monitor for unmanned vehicles for

88
00:03:15,519 --> 00:03:16,840
example such as

89
00:03:16,840 --> 00:03:20,239
drones and

90
00:03:20,720 --> 00:03:22,800
and if you look at typical embedded

91
00:03:22,800 --> 00:03:25,200
systems or cyber physical system we

92
00:03:25,200 --> 00:03:26,720
pretty much can abstract the whole

93
00:03:26,720 --> 00:03:28,959
system in two parts

94
00:03:28,959 --> 00:03:31,280
on the top we have the whole software

95
00:03:31,280 --> 00:03:33,760
stack for example you could have

96
00:03:33,760 --> 00:03:36,480
a user space a task you could have a

97
00:03:36,480 --> 00:03:39,040
real-time operating system and in the

98
00:03:39,040 --> 00:03:40,400
bottom you could have different

99
00:03:40,400 --> 00:03:42,959
peripherals attached to the system to

100
00:03:42,959 --> 00:03:43,920
achieve

101
00:03:43,920 --> 00:03:44,799
some

102
00:03:44,799 --> 00:03:47,040
goals for example you could have spi

103
00:03:47,040 --> 00:03:49,120
square c you could have can bus connect

104
00:03:49,120 --> 00:03:51,440
ecu's you could have wi-fi you could

105
00:03:51,440 --> 00:03:53,920
have timers as well and if you look at

106
00:03:53,920 --> 00:03:55,599
the attack surface

107
00:03:55,599 --> 00:03:57,599
um pretty much you know attackers could

108
00:03:57,599 --> 00:03:59,840
attack the whole system from two

109
00:03:59,840 --> 00:04:02,239
perspectives for example attackers could

110
00:04:02,239 --> 00:04:04,239
try to compromise

111
00:04:04,239 --> 00:04:05,840
a task

112
00:04:05,840 --> 00:04:08,400
and then from that task attackers is

113
00:04:08,400 --> 00:04:09,680
able to

114
00:04:09,680 --> 00:04:11,439
compromise the whole real-time operating

115
00:04:11,439 --> 00:04:13,519
system or attackers could launch

116
00:04:13,519 --> 00:04:15,920
physical attacks from uh peripherals for

117
00:04:15,920 --> 00:04:18,238
example attackers could try to do

118
00:04:18,238 --> 00:04:21,519
um can bus uh masquerading or attackers

119
00:04:21,519 --> 00:04:22,720
could just do

120
00:04:22,720 --> 00:04:26,560
a spooky attacks against certain uh

121
00:04:26,560 --> 00:04:28,880
bus within the system

122
00:04:28,880 --> 00:04:30,160
and

123
00:04:30,160 --> 00:04:33,360
if we look at um the mmi layer which is

124
00:04:33,360 --> 00:04:35,759
short for memory mapped io

125
00:04:35,759 --> 00:04:38,639
in a typical embedded system we realize

126
00:04:38,639 --> 00:04:41,680
all communications go through mmo this

127
00:04:41,680 --> 00:04:44,560
is especially true for cyborg for cyber

128
00:04:44,560 --> 00:04:47,040
physical system because in the end the

129
00:04:47,040 --> 00:04:49,120
purpose of a system is to impact the

130
00:04:49,120 --> 00:04:51,680
physical world and to do that you really

131
00:04:51,680 --> 00:04:54,800
need to do some io operations

132
00:04:54,800 --> 00:04:57,199
and we also realized you know in this

133
00:04:57,199 --> 00:04:59,919
system it's common to have real-time

134
00:04:59,919 --> 00:05:02,320
operating system or real-time operations

135
00:05:02,320 --> 00:05:04,400
and this operations exhibits

136
00:05:04,400 --> 00:05:06,960
deterministic patterns again if we think

137
00:05:06,960 --> 00:05:09,120
about you know typical embedded systems

138
00:05:09,120 --> 00:05:11,120
or cyber physical systems they are

139
00:05:11,120 --> 00:05:13,039
fairly simple they are power constrained

140
00:05:13,039 --> 00:05:14,560
they do not have like super crazy

141
00:05:14,560 --> 00:05:16,639
computation power like you know typical

142
00:05:16,639 --> 00:05:19,600
laptops we are using nowadays they are

143
00:05:19,600 --> 00:05:21,919
programmed to do probably just a few

144
00:05:21,919 --> 00:05:24,800
things but they do it very well and they

145
00:05:24,800 --> 00:05:26,800
are deterministic and that's the reason

146
00:05:26,800 --> 00:05:28,479
why you know we're able to see this you

147
00:05:28,479 --> 00:05:31,840
know deterministic patent weaving system

148
00:05:31,840 --> 00:05:34,639
and based on this you know intuition we

149
00:05:34,639 --> 00:05:37,520
realized maybe we're able to attack

150
00:05:37,520 --> 00:05:39,759
malicious activities within the system

151
00:05:39,759 --> 00:05:42,880
by looking at anomalies happened at the

152
00:05:42,880 --> 00:05:45,680
mmo layer which is a memory mapped i o

153
00:05:45,680 --> 00:05:48,000
level

154
00:05:48,000 --> 00:05:50,000
for example you know

155
00:05:50,000 --> 00:05:52,720
this figure shows the difference between

156
00:05:52,720 --> 00:05:56,160
typical or normal gps operation and

157
00:05:56,160 --> 00:05:57,120
uh

158
00:05:57,120 --> 00:05:59,919
gps spoofing attack so as you can see

159
00:05:59,919 --> 00:06:03,039
like you know when gps is under attack

160
00:06:03,039 --> 00:06:04,880
you are able to see a higher account of

161
00:06:04,880 --> 00:06:08,080
the infamous message in case of spooking

162
00:06:08,080 --> 00:06:10,160
um again this is also intuitive right

163
00:06:10,160 --> 00:06:12,400
because if you really want to launch gps

164
00:06:12,400 --> 00:06:14,400
booth attack you cannot use just one

165
00:06:14,400 --> 00:06:17,520
message to redirect your drone to a

166
00:06:17,520 --> 00:06:19,759
destination you have to keep sending

167
00:06:19,759 --> 00:06:22,319
messages until you're able to

168
00:06:22,319 --> 00:06:24,960
continually redirect the drone to the

169
00:06:24,960 --> 00:06:26,400
destination i mean this is the reason

170
00:06:26,400 --> 00:06:29,120
why you are able to see higher accounts

171
00:06:29,120 --> 00:06:31,840
of gps messages

172
00:06:31,840 --> 00:06:34,319
and essentially we look at a number of

173
00:06:34,319 --> 00:06:36,080
attacks within the demand of cyber

174
00:06:36,080 --> 00:06:38,400
physical system for example we look at a

175
00:06:38,400 --> 00:06:41,280
timer attack raq variety can bus a mass

176
00:06:41,280 --> 00:06:45,198
rating and we try to

177
00:06:45,440 --> 00:06:47,080
put them into a different

178
00:06:47,080 --> 00:06:50,240
categorizations for example um you know

179
00:06:50,240 --> 00:06:52,080
for different attacks we might have

180
00:06:52,080 --> 00:06:53,759
different defenses which can depend

181
00:06:53,759 --> 00:06:56,319
against these attacks we have crypto we

182
00:06:56,319 --> 00:06:58,080
have compartmentalization we have

183
00:06:58,080 --> 00:06:59,599
fingerprinting and we have visual

184
00:06:59,599 --> 00:07:02,479
modeling approaches and we also try to

185
00:07:02,479 --> 00:07:05,280
record the i o level anomalies for each

186
00:07:05,280 --> 00:07:06,400
attack

187
00:07:06,400 --> 00:07:08,240
as showing in this figure

188
00:07:08,240 --> 00:07:10,000
we have different attacks we have

189
00:07:10,000 --> 00:07:12,240
different defenses but if you look at

190
00:07:12,240 --> 00:07:14,240
all these defenses none of them can

191
00:07:14,240 --> 00:07:16,400
defend all these attacks but meanwhile

192
00:07:16,400 --> 00:07:18,319
if you look at all these attacks all of

193
00:07:18,319 --> 00:07:21,039
them reflect some anomaly at the higher

194
00:07:21,039 --> 00:07:23,599
level so which gives off uh the

195
00:07:23,599 --> 00:07:25,520
motivation to build

196
00:07:25,520 --> 00:07:27,680
an io reference monitor for online

197
00:07:27,680 --> 00:07:30,080
vehicles

198
00:07:30,080 --> 00:07:32,720
and essentially this is what we did uh

199
00:07:32,720 --> 00:07:35,759
we built a m2 mall which is a mio-based

200
00:07:35,759 --> 00:07:38,000
secure reference monitor

201
00:07:38,000 --> 00:07:40,240
to call it a secure security reference

202
00:07:40,240 --> 00:07:41,840
monitor you have to set by three

203
00:07:41,840 --> 00:07:44,240
properties so first

204
00:07:44,240 --> 00:07:46,400
the reference model has to be

205
00:07:46,400 --> 00:07:49,039
tamper-proof for example if you deploy

206
00:07:49,039 --> 00:07:51,440
the security solution in your drones

207
00:07:51,440 --> 00:07:54,319
then you know attackers cannot

208
00:07:54,319 --> 00:07:56,720
compromise the system this means

209
00:07:56,720 --> 00:07:58,960
whenever a text happens

210
00:07:58,960 --> 00:08:01,120
our reference monitor is able to capture

211
00:08:01,120 --> 00:08:01,919
that

212
00:08:01,919 --> 00:08:04,400
the second property is called uh

213
00:08:04,400 --> 00:08:06,800
complete mediation right we want to make

214
00:08:06,800 --> 00:08:09,360
sure like we are able to capture each

215
00:08:09,360 --> 00:08:11,599
attack and no one can bypass our

216
00:08:11,599 --> 00:08:13,919
reference monitor and the last one would

217
00:08:13,919 --> 00:08:17,440
be verifiable um ideally you know for

218
00:08:17,440 --> 00:08:19,520
any security solutions we want a formal

219
00:08:19,520 --> 00:08:21,840
verification but even if that is hard to

220
00:08:21,840 --> 00:08:23,039
achieve

221
00:08:23,039 --> 00:08:24,560
we want to make sure

222
00:08:24,560 --> 00:08:27,199
the whole code base is smart enough so

223
00:08:27,199 --> 00:08:29,919
that we're able to even manually verify

224
00:08:29,919 --> 00:08:33,039
what's going on with the system

225
00:08:33,039 --> 00:08:35,360
um so if we look at the design

226
00:08:35,360 --> 00:08:37,679
challenges within a typical embedded

227
00:08:37,679 --> 00:08:41,360
system again this is a very sad

228
00:08:41,360 --> 00:08:43,519
story because if you look at embedded

229
00:08:43,519 --> 00:08:45,600
system and comparing to

230
00:08:45,600 --> 00:08:47,760
um the typical system we're using from

231
00:08:47,760 --> 00:08:50,240
laptops and desktops embedded systems

232
00:08:50,240 --> 00:08:53,279
are doomed in certain way so for example

233
00:08:53,279 --> 00:08:55,120
this is a typical figure of an embedded

234
00:08:55,120 --> 00:08:56,720
system um

235
00:08:56,720 --> 00:08:59,519
again cpu probably could have multiple

236
00:08:59,519 --> 00:09:01,200
privilege range for example you could

237
00:09:01,200 --> 00:09:03,519
have on privilege mode you could have

238
00:09:03,519 --> 00:09:04,880
privileged mode

239
00:09:04,880 --> 00:09:07,440
but unlike you know typical system

240
00:09:07,440 --> 00:09:09,360
embedded system developers would try to

241
00:09:09,360 --> 00:09:12,080
put everything into privilegeable again

242
00:09:12,080 --> 00:09:13,920
for performance because you know no one

243
00:09:13,920 --> 00:09:16,959
can afford uh the overhead of a contact

244
00:09:16,959 --> 00:09:20,399
switching between user mode and kernel

245
00:09:20,399 --> 00:09:23,440
and even worse you know things or the

246
00:09:23,440 --> 00:09:25,839
typical security hardware pictures we

247
00:09:25,839 --> 00:09:27,519
take for granted like a memory

248
00:09:27,519 --> 00:09:29,040
management unit

249
00:09:29,040 --> 00:09:30,880
um are not available with the embedded

250
00:09:30,880 --> 00:09:33,040
system the best you could have probably

251
00:09:33,040 --> 00:09:35,440
is just a memory protection unit rather

252
00:09:35,440 --> 00:09:37,839
than a full-fledged

253
00:09:37,839 --> 00:09:39,920
all right so if you look at this figure

254
00:09:39,920 --> 00:09:43,040
we have everything um

255
00:09:43,040 --> 00:09:44,640
grouped together within the privilege

256
00:09:44,640 --> 00:09:45,600
mode

257
00:09:45,600 --> 00:09:47,600
tasks libraries real-time operating

258
00:09:47,600 --> 00:09:49,760
system drivers

259
00:09:49,760 --> 00:09:51,440
service routines

260
00:09:51,440 --> 00:09:54,080
this means any player

261
00:09:54,080 --> 00:09:56,800
compromise the whole system compromise

262
00:09:56,800 --> 00:09:59,279
now the the recent challenge is how

263
00:09:59,279 --> 00:10:00,880
could we design a security reference

264
00:10:00,880 --> 00:10:02,560
monitor

265
00:10:02,560 --> 00:10:04,959
and put it somewhere so that we're able

266
00:10:04,959 --> 00:10:07,040
to first of all

267
00:10:07,040 --> 00:10:09,440
tamper proof from different attacks

268
00:10:09,440 --> 00:10:11,360
um second of all provide complete

269
00:10:11,360 --> 00:10:15,360
mediation and hopefully verify

270
00:10:15,360 --> 00:10:17,040
um

271
00:10:17,040 --> 00:10:20,000
and even worse if you dive into these

272
00:10:20,000 --> 00:10:23,120
different peripherals like gps or

273
00:10:23,120 --> 00:10:25,360
different sensors they are essentially

274
00:10:25,360 --> 00:10:26,320
another

275
00:10:26,320 --> 00:10:28,560
embedded system with their own software

276
00:10:28,560 --> 00:10:31,760
stacks running inside

277
00:10:31,760 --> 00:10:33,920
so let's take a look at our

278
00:10:33,920 --> 00:10:36,480
naive approach because if you look at

279
00:10:36,480 --> 00:10:38,320
the second property of reference monitor

280
00:10:38,320 --> 00:10:40,240
which is the tamper proof

281
00:10:40,240 --> 00:10:43,680
i'm sorry the complete mediation

282
00:10:43,680 --> 00:10:45,680
intuitively we want to put our reference

283
00:10:45,680 --> 00:10:48,640
monitor as low as possible so that it is

284
00:10:48,640 --> 00:10:51,360
able to capture all the access to

285
00:10:51,360 --> 00:10:53,920
peripherals and that is what we did in

286
00:10:53,920 --> 00:10:56,160
our first design where we just put the

287
00:10:56,160 --> 00:10:59,360
uh m2mo microkernel at the very bottom

288
00:10:59,360 --> 00:11:01,920
of the software stack so that all the

289
00:11:01,920 --> 00:11:04,880
upper layers have to go through

290
00:11:04,880 --> 00:11:06,880
this micro kernel to access different

291
00:11:06,880 --> 00:11:09,519
peripherals

292
00:11:09,760 --> 00:11:11,200
but what about

293
00:11:11,200 --> 00:11:13,200
complete mediation

294
00:11:13,200 --> 00:11:15,600
because or sorry what about tamper

295
00:11:15,600 --> 00:11:18,079
proofing because if any of the layer

296
00:11:18,079 --> 00:11:20,880
above compromised then you know our m2

297
00:11:20,880 --> 00:11:23,040
mount kernel would be compromised then

298
00:11:23,040 --> 00:11:25,360
this is not a secured reference monitor

299
00:11:25,360 --> 00:11:28,800
um so we could try something like a

300
00:11:28,800 --> 00:11:31,200
software fault isolation techniques for

301
00:11:31,200 --> 00:11:34,240
example applying data flow integrity or

302
00:11:34,240 --> 00:11:36,720
controlful integrity uh within the

303
00:11:36,720 --> 00:11:38,240
runtime to

304
00:11:38,240 --> 00:11:40,720
isolate all these

305
00:11:40,720 --> 00:11:43,360
upper layers within the system but the

306
00:11:43,360 --> 00:11:46,480
problem is also um obvious because i'm

307
00:11:46,480 --> 00:11:49,040
sorry there's lagging the problem of

308
00:11:49,040 --> 00:11:51,279
this solution is also obvious

309
00:11:51,279 --> 00:11:54,079
because all these ffi approaches

310
00:11:54,079 --> 00:11:56,880
introduce a lot of runtime overhead

311
00:11:56,880 --> 00:11:59,680
which is forbidden for real time and

312
00:11:59,680 --> 00:12:02,399
most embedded systems

313
00:12:02,399 --> 00:12:05,200
so can we do better to realize okay if

314
00:12:05,200 --> 00:12:07,839
we cannot do software approach then we

315
00:12:07,839 --> 00:12:10,639
need to resort to hardware in this

316
00:12:10,639 --> 00:12:12,880
design again we still have the m2

317
00:12:12,880 --> 00:12:15,360
microkernel with privileged mode but

318
00:12:15,360 --> 00:12:18,079
instead of trying to uh leverage

319
00:12:18,079 --> 00:12:20,160
software-based solution

320
00:12:20,160 --> 00:12:21,680
to confine

321
00:12:21,680 --> 00:12:24,000
past libraries within the same privilege

322
00:12:24,000 --> 00:12:27,279
mode we try to push all of them outside

323
00:12:27,279 --> 00:12:29,440
the privilege mode so including the

324
00:12:29,440 --> 00:12:31,839
real-time operating system

325
00:12:31,839 --> 00:12:34,399
right so here in this solution we

326
00:12:34,399 --> 00:12:36,639
reserved the privilege mode for our

327
00:12:36,639 --> 00:12:38,800
micro kernel and push everything out

328
00:12:38,800 --> 00:12:42,800
outside the privilege mode

329
00:12:42,800 --> 00:12:44,880
this solution is very good because now

330
00:12:44,880 --> 00:12:48,320
we have hardware guarantee that

331
00:12:48,399 --> 00:12:49,600
none of the

332
00:12:49,600 --> 00:12:51,920
of software stack within our privilege

333
00:12:51,920 --> 00:12:54,000
mode is able to compromise the micro

334
00:12:54,000 --> 00:12:56,639
kernel within the prism privilege mode

335
00:12:56,639 --> 00:12:58,480
this is pretty much what we have

336
00:12:58,480 --> 00:13:00,800
nowadays within a typical

337
00:13:00,800 --> 00:13:03,200
laptop or desktop where you have kernel

338
00:13:03,200 --> 00:13:05,519
code running in rainzero and you have

339
00:13:05,519 --> 00:13:09,040
all user space stops running in ram 3.

340
00:13:09,040 --> 00:13:10,880
all right

341
00:13:10,880 --> 00:13:12,240
and again

342
00:13:12,240 --> 00:13:14,880
this approach still satisfy the complete

343
00:13:14,880 --> 00:13:16,480
mediation because

344
00:13:16,480 --> 00:13:18,240
for drivers if they want to access

345
00:13:18,240 --> 00:13:19,760
different peripherals

346
00:13:19,760 --> 00:13:21,760
they have to go through the m2mo

347
00:13:21,760 --> 00:13:24,160
microkernel and the way we enforce the

348
00:13:24,160 --> 00:13:26,480
access control is to use the

349
00:13:26,480 --> 00:13:28,560
memory protection unit available within

350
00:13:28,560 --> 00:13:30,480
methods

351
00:13:30,480 --> 00:13:33,040
but about what about interrupt because

352
00:13:33,040 --> 00:13:35,839
one thing we realize is if we push our

353
00:13:35,839 --> 00:13:37,519
interrupt within the user space we need

354
00:13:37,519 --> 00:13:39,680
the unprivileged mode um

355
00:13:39,680 --> 00:13:41,440
we gonna we're gonna introduce a lot of

356
00:13:41,440 --> 00:13:43,120
overhead because whenever interrupt

357
00:13:43,120 --> 00:13:45,120
happens we have to go back to the user

358
00:13:45,120 --> 00:13:46,959
base and then do something there and get

359
00:13:46,959 --> 00:13:48,639
back to the kernel space

360
00:13:48,639 --> 00:13:50,959
um so again even though like we're using

361
00:13:50,959 --> 00:13:54,000
hardware features to protect m21 but we

362
00:13:54,000 --> 00:13:55,839
inevitably introduced a lot of runtime

363
00:13:55,839 --> 00:13:58,160
overhead so to deal with that we

364
00:13:58,160 --> 00:14:00,959
realized okay let's brain interrupt the

365
00:14:00,959 --> 00:14:02,639
service routine back to the previous

366
00:14:02,639 --> 00:14:03,920
mode

367
00:14:03,920 --> 00:14:05,920
all right so this is our solution but

368
00:14:05,920 --> 00:14:07,760
then the problem is how could we trust

369
00:14:07,760 --> 00:14:10,800
the interrupt service routine what if we

370
00:14:10,800 --> 00:14:13,120
got compromised because these routines

371
00:14:13,120 --> 00:14:14,560
are not written by ourselves these

372
00:14:14,560 --> 00:14:16,800
routines are provided by let's see

373
00:14:16,800 --> 00:14:18,240
real-time operating systems or eva

374
00:14:18,240 --> 00:14:20,639
application developers

375
00:14:20,639 --> 00:14:22,959
our solution is simple we apply

376
00:14:22,959 --> 00:14:24,639
ss5

377
00:14:24,639 --> 00:14:27,600
to isr here so the difference here is

378
00:14:27,600 --> 00:14:30,079
instead of applying this software false

379
00:14:30,079 --> 00:14:32,079
isolation techniques to all the

380
00:14:32,079 --> 00:14:35,040
use-based software stacks we only apply

381
00:14:35,040 --> 00:14:38,160
this technique to the interrupt handler

382
00:14:38,160 --> 00:14:40,160
so that we're able to minimize the

383
00:14:40,160 --> 00:14:42,399
overhead introduced by software

384
00:14:42,399 --> 00:14:45,839
fault isolation techniques

385
00:14:45,920 --> 00:14:48,560
now with this design we're able to

386
00:14:48,560 --> 00:14:51,360
achieve non-pipeful non-bias possible

387
00:14:51,360 --> 00:14:52,480
which means

388
00:14:52,480 --> 00:14:55,360
there's no attack that can bypass the

389
00:14:55,360 --> 00:14:58,079
monitoring of m21 microkernel and this

390
00:14:58,079 --> 00:15:00,079
is temper-proof because we have a

391
00:15:00,079 --> 00:15:01,519
dedicated

392
00:15:01,519 --> 00:15:04,959
cpu range reserved for m2mo microkernel

393
00:15:04,959 --> 00:15:07,360
and hopefully it's verifiable and in the

394
00:15:07,360 --> 00:15:08,480
end

395
00:15:08,480 --> 00:15:11,360
m2mo has only hundreds of lines of code

396
00:15:11,360 --> 00:15:13,600
comparing to like in much more for a

397
00:15:13,600 --> 00:15:14,560
typical

398
00:15:14,560 --> 00:15:15,920
real-time operating system

399
00:15:15,920 --> 00:15:18,639
implementation

400
00:15:19,040 --> 00:15:22,160
um and once we have m2mo microkernel and

401
00:15:22,160 --> 00:15:23,920
you can imagine we're able to build the

402
00:15:23,920 --> 00:15:26,079
different applications using that to

403
00:15:26,079 --> 00:15:28,639
achieve or to defend all those attacks

404
00:15:28,639 --> 00:15:31,440
we have seen earlier so for example we

405
00:15:31,440 --> 00:15:33,600
could um

406
00:15:33,600 --> 00:15:36,639
implement common filter within m mtomo

407
00:15:36,639 --> 00:15:38,480
microkernel so that

408
00:15:38,480 --> 00:15:40,320
even if the real-time operating system

409
00:15:40,320 --> 00:15:43,360
is compromised by attackers um the

410
00:15:43,360 --> 00:15:45,600
common filter still works which means

411
00:15:45,600 --> 00:15:47,839
the system is able to get the correct

412
00:15:47,839 --> 00:15:50,160
sensor values no matter what

413
00:15:50,160 --> 00:15:52,240
um or we could use

414
00:15:52,240 --> 00:15:55,199
m2 mod to build a um mm i o access

415
00:15:55,199 --> 00:15:58,800
pattern um firewall and um you know we

416
00:15:58,800 --> 00:16:01,279
could use access frequency access chan

417
00:16:01,279 --> 00:16:04,320
or access list to regulate the mmo

418
00:16:04,320 --> 00:16:06,560
access pattern within the system and if

419
00:16:06,560 --> 00:16:09,040
we see any anomalies we're able to fire

420
00:16:09,040 --> 00:16:12,240
an alarm accordingly

421
00:16:12,240 --> 00:16:15,120
so we evaluate our system on uh two

422
00:16:15,120 --> 00:16:16,240
popular

423
00:16:16,240 --> 00:16:19,279
uh drone platforms and we consider both

424
00:16:19,279 --> 00:16:20,959
performance evaluation and security

425
00:16:20,959 --> 00:16:22,399
evaluation

426
00:16:22,399 --> 00:16:23,600
now if you look at the performance

427
00:16:23,600 --> 00:16:26,240
evaluation we just run the benchmarks

428
00:16:26,240 --> 00:16:27,199
available

429
00:16:27,199 --> 00:16:28,320
uh

430
00:16:28,320 --> 00:16:31,279
within this drone platform

431
00:16:31,279 --> 00:16:33,600
and we look at the deadline because

432
00:16:33,600 --> 00:16:35,440
we're dealing with real-time just uh

433
00:16:35,440 --> 00:16:38,240
real-time systems and in most cases you

434
00:16:38,240 --> 00:16:41,279
know if if we look at the red half of m2

435
00:16:41,279 --> 00:16:42,240
mall

436
00:16:42,240 --> 00:16:45,040
it's minimum and we do not violate any

437
00:16:45,040 --> 00:16:47,759
deadline except one

438
00:16:47,759 --> 00:16:49,680
application which is called one

439
00:16:49,680 --> 00:16:52,720
hc loop but if you look at the violation

440
00:16:52,720 --> 00:16:56,160
there even the baseline which is the um

441
00:16:56,160 --> 00:16:59,680
not modified uh drone system violates

442
00:16:59,680 --> 00:17:02,240
that deadline but the good news is you

443
00:17:02,240 --> 00:17:04,000
know other than that you know m2 mod

444
00:17:04,000 --> 00:17:07,839
does not violate any real-time deadline

445
00:17:07,839 --> 00:17:10,240
and the average runtime overhead is less

446
00:17:10,240 --> 00:17:12,640
than 10

447
00:17:12,799 --> 00:17:14,160
and if you look at the security

448
00:17:14,160 --> 00:17:16,720
evaluation if you recall all those cyber

449
00:17:16,720 --> 00:17:18,400
physical attacks we have surveyed

450
00:17:18,400 --> 00:17:21,280
earlier now we're able to defend against

451
00:17:21,280 --> 00:17:24,640
all of them using a typical uh firewall

452
00:17:24,640 --> 00:17:25,839
to

453
00:17:25,839 --> 00:17:28,880
regulate the nmr access patent we could

454
00:17:28,880 --> 00:17:32,080
use access list for example like what an

455
00:17:32,080 --> 00:17:35,360
mmo addresses the system would regularly

456
00:17:35,360 --> 00:17:38,240
read or we could use access frequency

457
00:17:38,240 --> 00:17:40,160
for example if we were able to observe

458
00:17:40,160 --> 00:17:41,039
more

459
00:17:41,039 --> 00:17:44,480
uh messages like gps um infamous

460
00:17:44,480 --> 00:17:47,120
messages then we could fire up an alarm

461
00:17:47,120 --> 00:17:49,600
or we could use common theory to to do a

462
00:17:49,600 --> 00:17:51,280
sensor value fusion to make sure the

463
00:17:51,280 --> 00:17:53,520
system can receive a correct sensor

464
00:17:53,520 --> 00:17:55,840
value

465
00:17:56,400 --> 00:17:58,559
all right and one

466
00:17:58,559 --> 00:18:01,360
example is this timer attack so for

467
00:18:01,360 --> 00:18:02,880
example um

468
00:18:02,880 --> 00:18:05,360
attackers could try to

469
00:18:05,360 --> 00:18:08,160
change the system timer um to do

470
00:18:08,160 --> 00:18:09,840
something for example to change the

471
00:18:09,840 --> 00:18:13,120
schedule of a certain task or just to

472
00:18:13,120 --> 00:18:16,320
delay some real-time uh tasks

473
00:18:16,320 --> 00:18:18,720
and if we look at this attack if we look

474
00:18:18,720 --> 00:18:21,440
at the system realize this timer is only

475
00:18:21,440 --> 00:18:24,240
set up uh when the system is boot and

476
00:18:24,240 --> 00:18:26,240
after that you know this timer should

477
00:18:26,240 --> 00:18:28,799
not be accessed by anything and to

478
00:18:28,799 --> 00:18:31,200
defend against this timer tax is is

479
00:18:31,200 --> 00:18:34,240
trivial and all we need is to

480
00:18:34,240 --> 00:18:37,440
write a policy within m2 microkernel

481
00:18:37,440 --> 00:18:39,520
saying that you know after system vote

482
00:18:39,520 --> 00:18:41,360
we won't allow anyone to access this

483
00:18:41,360 --> 00:18:43,360
timer that's it then we're able to

484
00:18:43,360 --> 00:18:45,440
defend against this you know typical

485
00:18:45,440 --> 00:18:46,880
timer attack

486
00:18:46,880 --> 00:18:49,440
um for sure this system also has some

487
00:18:49,440 --> 00:18:53,280
limitations and one thing we realize is

488
00:18:53,280 --> 00:18:55,280
especially if you look at this firewall

489
00:18:55,280 --> 00:18:57,840
implementation we allow users to load

490
00:18:57,840 --> 00:18:59,039
the different

491
00:18:59,039 --> 00:19:02,559
policies to regulate mmo access patterns

492
00:19:02,559 --> 00:19:04,960
and one

493
00:19:04,960 --> 00:19:06,720
intuitive question we would like to ask

494
00:19:06,720 --> 00:19:08,960
is you know how skill

495
00:19:08,960 --> 00:19:11,760
this system would be if we allow users

496
00:19:11,760 --> 00:19:14,320
to load a number of policies right and

497
00:19:14,320 --> 00:19:16,559
turns out this is application uh

498
00:19:16,559 --> 00:19:18,799
dependent so for example if you look at

499
00:19:18,799 --> 00:19:21,120
this ultra trim application

500
00:19:21,120 --> 00:19:22,480
on this

501
00:19:22,480 --> 00:19:24,480
audio pilot drone platform

502
00:19:24,480 --> 00:19:27,200
um the the overhead is is kind of a

503
00:19:27,200 --> 00:19:28,160
linear

504
00:19:28,160 --> 00:19:30,000
right but if you look at it like the

505
00:19:30,000 --> 00:19:31,919
other two like for example themselves

506
00:19:31,919 --> 00:19:34,080
sorry for example this update battery

507
00:19:34,080 --> 00:19:35,440
come pass

508
00:19:35,440 --> 00:19:36,880
it look like

509
00:19:36,880 --> 00:19:40,240
exponential especially after we have

510
00:19:40,240 --> 00:19:43,360
around 100 rules with the system the

511
00:19:43,360 --> 00:19:45,520
overhead is huge

512
00:19:45,520 --> 00:19:47,440
all right so this is like something we

513
00:19:47,440 --> 00:19:49,039
really need to solve in the future

514
00:19:49,039 --> 00:19:51,120
because in the end if you really want to

515
00:19:51,120 --> 00:19:53,360
scale the whole system

516
00:19:53,360 --> 00:19:56,240
we really need to find a more efficient

517
00:19:56,240 --> 00:19:57,520
way to do

518
00:19:57,520 --> 00:20:00,000
this this kind of like mmo access

519
00:20:00,000 --> 00:20:02,960
pattern filtering

520
00:20:03,440 --> 00:20:05,679
anyway here's the conclusion

521
00:20:05,679 --> 00:20:07,919
we realize a lot of attacks happen

522
00:20:07,919 --> 00:20:10,000
within this yemeni system or cyber

523
00:20:10,000 --> 00:20:11,280
physical system

524
00:20:11,280 --> 00:20:14,480
would require certain access of mmo

525
00:20:14,480 --> 00:20:17,039
access patent and

526
00:20:17,039 --> 00:20:18,960
this pattern would reflect some

527
00:20:18,960 --> 00:20:21,039
anomalies when the system is under

528
00:20:21,039 --> 00:20:23,600
attack and we built a secure reference

529
00:20:23,600 --> 00:20:24,640
monitor

530
00:20:24,640 --> 00:20:26,559
for the anonymous layer so that we're

531
00:20:26,559 --> 00:20:28,960
able to capture all these attacks

532
00:20:28,960 --> 00:20:30,799
and we evaluate

533
00:20:30,799 --> 00:20:33,360
our two popular drone platforms we

534
00:20:33,360 --> 00:20:35,039
showed that we're able to defend against

535
00:20:35,039 --> 00:20:39,360
all these attacks um and

536
00:20:39,360 --> 00:20:42,880
with a reasonable runtime overhead

537
00:20:42,880 --> 00:20:44,320
all right thank you

538
00:20:44,320 --> 00:20:47,600
this is the email address of my student

539
00:20:47,600 --> 00:20:50,159
i'm here to take questions i'm not sure

540
00:20:50,159 --> 00:20:52,400
if i run out of time or we have more

541
00:20:52,400 --> 00:20:54,240
time

542
00:20:54,240 --> 00:20:56,080
we do have some time so if there are

543
00:20:56,080 --> 00:20:58,880
some questions please drop them in the q

544
00:20:58,880 --> 00:21:01,880
a

545
00:21:05,919 --> 00:21:08,320
there was a request that did come in uh

546
00:21:08,320 --> 00:21:11,200
to the moderators or to the panelists uh

547
00:21:11,200 --> 00:21:13,280
asking if your slides and some of the

548
00:21:13,280 --> 00:21:15,200
slides of the other present presenters

549
00:21:15,200 --> 00:21:16,400
would be available

550
00:21:16,400 --> 00:21:18,799
i did drop that information in the in

551
00:21:18,799 --> 00:21:21,120
the chat side but i will share here

552
00:21:21,120 --> 00:21:23,440
that all of these sessions all of the

553
00:21:23,440 --> 00:21:25,679
proceedings for the from this

554
00:21:25,679 --> 00:21:28,240
symposium are being recorded and those

555
00:21:28,240 --> 00:21:30,080
recordings will be available from both

556
00:21:30,080 --> 00:21:32,559
the sirius website as well as our

557
00:21:32,559 --> 00:21:34,400
youtube channel

558
00:21:34,400 --> 00:21:36,720
and those at least on our website will

559
00:21:36,720 --> 00:21:39,440
have the accompanying slides with them

560
00:21:39,440 --> 00:21:41,120
interestingly

561
00:21:41,120 --> 00:21:42,720
you can view

562
00:21:42,720 --> 00:21:44,640
the symposium proceedings for i think

563
00:21:44,640 --> 00:21:46,799
all 22

564
00:21:46,799 --> 00:21:49,200
of our individual symposiums on our

565
00:21:49,200 --> 00:21:51,280
website as well

566
00:21:51,280 --> 00:21:53,679
as our weekly security seminars dating

567
00:21:53,679 --> 00:21:56,640
back to at least 1999.

568
00:21:56,640 --> 00:21:58,880
i've often pointed out that the list of

569
00:21:58,880 --> 00:22:00,559
speakers at the weekly securities

570
00:22:00,559 --> 00:22:03,039
seminar as well as their symposium reads

571
00:22:03,039 --> 00:22:04,960
like a who's who in the cyber security

572
00:22:04,960 --> 00:22:07,360
industry both people who are huge names

573
00:22:07,360 --> 00:22:08,880
within the industry at the time of their

574
00:22:08,880 --> 00:22:10,799
speaking but also those who are very

575
00:22:10,799 --> 00:22:12,080
young in their career who have gone on

576
00:22:12,080 --> 00:22:13,120
to have

577
00:22:13,120 --> 00:22:15,919
extremely established

578
00:22:15,919 --> 00:22:18,159
and groundbreaking careers within cyber

579
00:22:18,159 --> 00:22:20,720
security

580
00:22:22,400 --> 00:22:24,640
dave i think you are off the hook no q a

581
00:22:24,640 --> 00:22:27,039
come in i appreciate your mission this

582
00:22:27,039 --> 00:22:29,520
afternoon and all that you and your uh

583
00:22:29,520 --> 00:22:32,000
your lab mates are doing in the per sec

584
00:22:32,000 --> 00:22:35,000
laboratory

585
00:22:46,559 --> 00:22:48,639
you

