1
00:00:00,160 --> 00:00:02,560
good afternoon today we're happy to

2
00:00:02,560 --> 00:00:05,040
welcome jeremiah blocky to our seminar

3
00:00:05,040 --> 00:00:07,200
series um jeremiah is an assistant

4
00:00:07,200 --> 00:00:09,120
professor in computer science here at

5
00:00:09,120 --> 00:00:11,759
purdue university his research interests

6
00:00:11,759 --> 00:00:14,480
are in cryptography data privacy and

7
00:00:14,480 --> 00:00:16,480
security prior to joining purdue

8
00:00:16,480 --> 00:00:19,439
jeremiah completed his phd at carnegie

9
00:00:19,439 --> 00:00:21,920
mellon he also spent a year at microsoft

10
00:00:21,920 --> 00:00:24,720
research lab new england as a postdoc

11
00:00:24,720 --> 00:00:26,720
jeremiah thank you so much for uh

12
00:00:26,720 --> 00:00:28,320
joining us today go ahead and take it

13
00:00:28,320 --> 00:00:29,359
away

14
00:00:29,359 --> 00:00:32,640
all right uh thanks uh so i'm excited to

15
00:00:32,640 --> 00:00:34,719
talk to you today about uh a

16
00:00:34,719 --> 00:00:36,640
counter-intuitive defense against

17
00:00:36,640 --> 00:00:38,399
password cracking which we call password

18
00:00:38,399 --> 00:00:39,760
strength signaling

19
00:00:39,760 --> 00:00:42,719
uh so this is joint work with my uh phd

20
00:00:42,719 --> 00:00:46,320
students wenji bai and ben harsha

21
00:00:46,320 --> 00:00:48,160
ben harsha has actually

22
00:00:48,160 --> 00:00:50,640
just defended this this past summer and

23
00:00:50,640 --> 00:00:51,920
he'll

24
00:00:51,920 --> 00:00:56,000
he'll be joining amazon's security team

25
00:00:57,600 --> 00:01:00,000
all right uh so it's motivation uh let's

26
00:01:00,000 --> 00:01:02,640
just uh um review how passwords are

27
00:01:02,640 --> 00:01:05,760
scored on uh uh traditionally

28
00:01:05,760 --> 00:01:08,560
um so uh here's alice registering for an

29
00:01:08,560 --> 00:01:10,720
account at playstation.com

30
00:01:10,720 --> 00:01:13,040
uh so she uh sends over her favorite

31
00:01:13,040 --> 00:01:15,280
password one two three four five six

32
00:01:15,280 --> 00:01:17,920
uh playstation uh the authentication

33
00:01:17,920 --> 00:01:20,720
server will pick uh a random value

34
00:01:20,720 --> 00:01:22,159
called the salt

35
00:01:22,159 --> 00:01:24,240
uh and then they will

36
00:01:24,240 --> 00:01:26,400
append the salt value to the

37
00:01:26,400 --> 00:01:29,759
uh to alice's password uh hash it and

38
00:01:29,759 --> 00:01:31,520
store the resulting hash value on their

39
00:01:31,520 --> 00:01:33,040
server

40
00:01:33,040 --> 00:01:35,119
and they'll later later uh if alice

41
00:01:35,119 --> 00:01:36,560
tries to authenticate uh they'll

42
00:01:36,560 --> 00:01:38,479
recompute this hash value

43
00:01:38,479 --> 00:01:40,479
and check to see if it matches the the

44
00:01:40,479 --> 00:01:42,560
file on their server

45
00:01:42,560 --> 00:01:47,119
now what can unfortunately happen uh is

46
00:01:47,119 --> 00:01:49,360
hackers may be able to break into a

47
00:01:49,360 --> 00:01:51,920
playstation server and steal the

48
00:01:51,920 --> 00:01:53,759
password hash

49
00:01:53,759 --> 00:01:54,720
file

50
00:01:54,720 --> 00:01:56,719
this might be because uh playstation

51
00:01:56,719 --> 00:01:58,159
didn't download the latest security

52
00:01:58,159 --> 00:02:00,320
patch maybe they didn't protect against

53
00:02:00,320 --> 00:02:03,040
sql injection attacks whatever it is

54
00:02:03,040 --> 00:02:04,479
once an attacker breaks into their

55
00:02:04,479 --> 00:02:06,000
server

56
00:02:06,000 --> 00:02:08,399
they have these hash values and at this

57
00:02:08,399 --> 00:02:10,639
point the attacker can mount a fully

58
00:02:10,639 --> 00:02:12,640
automated brute force attack to try to

59
00:02:12,640 --> 00:02:15,200
recover alice's password uh she can

60
00:02:15,200 --> 00:02:16,319
simply

61
00:02:16,319 --> 00:02:18,080
the attacker can simply loop through a

62
00:02:18,080 --> 00:02:21,120
dictionary of likely password guesses uh

63
00:02:21,120 --> 00:02:23,760
recompute the hash of each password in

64
00:02:23,760 --> 00:02:25,440
the dictionary and compare it with a

65
00:02:25,440 --> 00:02:27,440
hash on file and as soon as they find a

66
00:02:27,440 --> 00:02:29,599
match the attacker has cracked alice's

67
00:02:29,599 --> 00:02:32,079
password

68
00:02:32,560 --> 00:02:34,640
so offline attacks

69
00:02:34,640 --> 00:02:37,599
are unfortunately a common problem uh

70
00:02:37,599 --> 00:02:39,680
password breaches at major company have

71
00:02:39,680 --> 00:02:41,280
actually affected billions of user

72
00:02:41,280 --> 00:02:42,239
accounts

73
00:02:42,239 --> 00:02:44,959
uh so shown on this slide is uh actually

74
00:02:44,959 --> 00:02:47,519
a very incomplete uh wall of shame uh

75
00:02:47,519 --> 00:02:49,599
these are a number of uh organizations

76
00:02:49,599 --> 00:02:51,200
that have had

77
00:02:51,200 --> 00:02:54,799
large-scale password breaches

78
00:02:56,080 --> 00:02:57,440
okay

79
00:02:57,440 --> 00:02:59,120
offline attacks are also a very

80
00:02:59,120 --> 00:03:01,040
dangerous problem

81
00:03:01,040 --> 00:03:02,159
so

82
00:03:02,159 --> 00:03:03,200
we've got

83
00:03:03,200 --> 00:03:05,599
machines here like the antminer s9 which

84
00:03:05,599 --> 00:03:08,480
are capable of evaluating the sha2 hash

85
00:03:08,480 --> 00:03:11,680
function 14 trillion times per second

86
00:03:11,680 --> 00:03:14,800
uh this machine is not super expensive

87
00:03:14,800 --> 00:03:16,720
you can buy it for around you know a

88
00:03:16,720 --> 00:03:18,879
thousand to two thousand dollars on

89
00:03:18,879 --> 00:03:21,120
online

90
00:03:21,120 --> 00:03:23,840
and uh to make matters worse uh people

91
00:03:23,840 --> 00:03:26,319
are still uh picking predictable

92
00:03:26,319 --> 00:03:28,480
passwords uh so shown here is a word

93
00:03:28,480 --> 00:03:31,200
cloud of some of the most popular uh

94
00:03:31,200 --> 00:03:34,399
passwords that people pick

95
00:03:34,640 --> 00:03:37,519
um so this leads to a natural question

96
00:03:37,519 --> 00:03:40,480
can we deter the password attacker

97
00:03:40,480 --> 00:03:42,720
can we do something to uh

98
00:03:42,720 --> 00:03:44,239
to ensure that the

99
00:03:44,239 --> 00:03:46,560
password offline attacker cracks as few

100
00:03:46,560 --> 00:03:49,599
passwords as possible

101
00:03:50,239 --> 00:03:51,840
so um

102
00:03:51,840 --> 00:03:55,280
in in previous work we've introduced a

103
00:03:55,280 --> 00:03:57,439
decision theoretical model which allows

104
00:03:57,439 --> 00:03:59,439
us to predict how a

105
00:03:59,439 --> 00:04:02,159
rational password attacker would behave

106
00:04:02,159 --> 00:04:03,920
so in particular we're assuming that the

107
00:04:03,920 --> 00:04:06,000
attacker knows the distribution over

108
00:04:06,000 --> 00:04:08,159
user chosen passwords but he doesn't

109
00:04:08,159 --> 00:04:10,799
know which particular password a user

110
00:04:10,799 --> 00:04:12,319
picked

111
00:04:12,319 --> 00:04:14,959
so this attacker is going to uh select a

112
00:04:14,959 --> 00:04:17,040
strategy and the strategy is basically

113
00:04:17,040 --> 00:04:18,560
going to be

114
00:04:18,560 --> 00:04:20,880
guess the top b passwords and then give

115
00:04:20,880 --> 00:04:21,600
up

116
00:04:21,600 --> 00:04:24,000
where b is a parameter that the attacker

117
00:04:24,000 --> 00:04:27,440
can pick to maximize his expected profit

118
00:04:27,440 --> 00:04:29,680
so the attacker's expected profit is

119
00:04:29,680 --> 00:04:31,280
going to be given by

120
00:04:31,280 --> 00:04:33,360
the expected reward for the attacker

121
00:04:33,360 --> 00:04:35,280
minus the attacker's expected guessing

122
00:04:35,280 --> 00:04:36,400
costs

123
00:04:36,400 --> 00:04:39,440
um so here the reward depends on the

124
00:04:39,440 --> 00:04:41,360
value of a correct password which will

125
00:04:41,360 --> 00:04:43,280
denote v

126
00:04:43,280 --> 00:04:45,600
the number of guesses that

127
00:04:45,600 --> 00:04:47,440
the attacker attempts

128
00:04:47,440 --> 00:04:50,000
and the user password distribution

129
00:04:50,000 --> 00:04:51,680
so once we know

130
00:04:51,680 --> 00:04:53,759
the user password distribution

131
00:04:53,759 --> 00:04:55,440
we can go ahead and compute the

132
00:04:55,440 --> 00:04:56,960
probability that the attacker actually

133
00:04:56,960 --> 00:04:59,120
cracks the password this is just the sum

134
00:04:59,120 --> 00:05:01,199
of the probability of the top e

135
00:05:01,199 --> 00:05:03,520
passwords in the distribution

136
00:05:03,520 --> 00:05:05,039
multiply that with the value of the

137
00:05:05,039 --> 00:05:06,880
cracked password value of correct

138
00:05:06,880 --> 00:05:08,320
password and we get the attacker's

139
00:05:08,320 --> 00:05:11,039
expected reward

140
00:05:11,039 --> 00:05:12,000
now

141
00:05:12,000 --> 00:05:13,600
there's another component in this

142
00:05:13,600 --> 00:05:15,840
addition this is decision theoretic

143
00:05:15,840 --> 00:05:17,840
model which is the attacker's expected

144
00:05:17,840 --> 00:05:20,080
guessing costs

145
00:05:20,080 --> 00:05:22,479
so here the expected guessing cost

146
00:05:22,479 --> 00:05:24,400
depends on several factors

147
00:05:24,400 --> 00:05:26,320
once again it'll depend on the user's

148
00:05:26,320 --> 00:05:28,080
password distribution

149
00:05:28,080 --> 00:05:30,960
uh it'll depend on the cost k uh per

150
00:05:30,960 --> 00:05:32,400
password guest

151
00:05:32,400 --> 00:05:34,320
so in other words the cost of evaluating

152
00:05:34,320 --> 00:05:36,800
this password hash function

153
00:05:36,800 --> 00:05:38,639
and uh there's a technique called key

154
00:05:38,639 --> 00:05:40,080
stretching which uh deliberately

155
00:05:40,080 --> 00:05:42,320
increases password hashing costs but as

156
00:05:42,320 --> 00:05:44,639
we'll see in a second uh um key

157
00:05:44,639 --> 00:05:46,240
stretching is limited by the server

158
00:05:46,240 --> 00:05:48,160
workload

159
00:05:48,160 --> 00:05:50,320
okay uh so let's suppose that it costs

160
00:05:50,320 --> 00:05:51,840
the attacker k

161
00:05:51,840 --> 00:05:53,680
per per password guess

162
00:05:53,680 --> 00:05:56,160
what's the attacker's expected guessing

163
00:05:56,160 --> 00:05:57,199
costs

164
00:05:57,199 --> 00:05:58,639
well um

165
00:05:58,639 --> 00:06:00,240
if the attacker happens to crack the

166
00:06:00,240 --> 00:06:02,080
user's password on

167
00:06:02,080 --> 00:06:04,800
on the i guess then their total

168
00:06:04,800 --> 00:06:07,680
cost would be k times i

169
00:06:07,680 --> 00:06:10,400
and then we'll multiply that by p i the

170
00:06:10,400 --> 00:06:12,479
probability that the case that the if

171
00:06:12,479 --> 00:06:14,400
guess is correct

172
00:06:14,400 --> 00:06:17,840
um similarly if

173
00:06:18,560 --> 00:06:21,280
if they fail to uh to crack the user's

174
00:06:21,280 --> 00:06:24,319
password uh then they'll pay cost kb

175
00:06:24,319 --> 00:06:25,759
and we'll multiply that by the

176
00:06:25,759 --> 00:06:28,160
probability that they um

177
00:06:28,160 --> 00:06:30,000
that the attacker fails to crack the

178
00:06:30,000 --> 00:06:31,520
password

179
00:06:31,520 --> 00:06:33,680
okay so this uh this formula gives us

180
00:06:33,680 --> 00:06:36,080
the attacker's

181
00:06:36,080 --> 00:06:37,280
expected

182
00:06:37,280 --> 00:06:40,479
expected guessing costs

183
00:06:41,600 --> 00:06:42,960
okay

184
00:06:42,960 --> 00:06:45,280
so now how do we deter a rational

185
00:06:45,280 --> 00:06:47,600
attacker well one approach is uh

186
00:06:47,600 --> 00:06:49,599
something called key stretching

187
00:06:49,599 --> 00:06:51,919
so key stretching the idea is basically

188
00:06:51,919 --> 00:06:53,759
make this hash function as expensive as

189
00:06:53,759 --> 00:06:57,520
possible uh to increase the cost k

190
00:06:57,520 --> 00:07:00,319
in hopes that the attacker will give up

191
00:07:00,319 --> 00:07:01,599
earlier

192
00:07:01,599 --> 00:07:03,120
now there's a number of ways to make

193
00:07:03,120 --> 00:07:04,639
this hash function more expensive to

194
00:07:04,639 --> 00:07:06,000
compute

195
00:07:06,000 --> 00:07:08,639
one method is just a simple hash

196
00:07:08,639 --> 00:07:10,720
iteration so instead of computing the

197
00:07:10,720 --> 00:07:12,560
hash of the password compute the hash of

198
00:07:12,560 --> 00:07:14,160
the hash of the hash

199
00:07:14,160 --> 00:07:16,319
in general we could iterate this hash

200
00:07:16,319 --> 00:07:18,080
function tau times and this will make

201
00:07:18,080 --> 00:07:21,039
the function tau times more expensive

202
00:07:21,039 --> 00:07:23,360
there's also a more modern uh

203
00:07:23,360 --> 00:07:25,840
way to perform key stretching which is

204
00:07:25,840 --> 00:07:26,880
called

205
00:07:26,880 --> 00:07:28,160
memory hard

206
00:07:28,160 --> 00:07:30,880
memory hard functions uh so s crypts or

207
00:07:30,880 --> 00:07:33,039
argon 2 these are examples of memory

208
00:07:33,039 --> 00:07:35,039
hard functions and they have a number of

209
00:07:35,039 --> 00:07:37,280
advantage over advantages over hash

210
00:07:37,280 --> 00:07:39,919
iteration uh but the distinction is not

211
00:07:39,919 --> 00:07:42,160
uh not super important for the purposes

212
00:07:42,160 --> 00:07:45,479
of this talk

213
00:07:45,680 --> 00:07:46,960
now

214
00:07:46,960 --> 00:07:49,120
there is a limitation to key stretching

215
00:07:49,120 --> 00:07:50,720
uh the limitation here is that the

216
00:07:50,720 --> 00:07:52,960
honest party must evaluate the password

217
00:07:52,960 --> 00:07:54,879
hash function as well

218
00:07:54,879 --> 00:07:57,039
and of course uh the honest party has to

219
00:07:57,039 --> 00:07:59,280
evaluate this hash function quickly

220
00:07:59,280 --> 00:08:00,160
right

221
00:08:00,160 --> 00:08:02,479
so we can't uh we can't perform too much

222
00:08:02,479 --> 00:08:05,520
computation because users expect to uh

223
00:08:05,520 --> 00:08:07,039
to hear back from the authentication

224
00:08:07,039 --> 00:08:09,360
server within let's say almost half a

225
00:08:09,360 --> 00:08:10,240
second

226
00:08:10,240 --> 00:08:13,280
right if we take longer than that uh say

227
00:08:13,280 --> 00:08:15,520
a minute or two minutes users will get

228
00:08:15,520 --> 00:08:17,680
impatient waiting to hear back from the

229
00:08:17,680 --> 00:08:19,759
authentication server whether or not

230
00:08:19,759 --> 00:08:21,280
their uh

231
00:08:21,280 --> 00:08:24,719
their password was correct or not

232
00:08:25,599 --> 00:08:27,520
so in this uh in this talk we're going

233
00:08:27,520 --> 00:08:30,800
to propose uh a somewhat crazy idea uh

234
00:08:30,800 --> 00:08:32,958
called password strength signaling and

235
00:08:32,958 --> 00:08:35,120
password strength signaling involves no

236
00:08:35,120 --> 00:08:36,799
changes to the password hashing

237
00:08:36,799 --> 00:08:38,320
algorithm

238
00:08:38,320 --> 00:08:40,880
uh so the idea is as follows um instead

239
00:08:40,880 --> 00:08:43,519
of simply storing the username salt and

240
00:08:43,519 --> 00:08:46,160
password cache like we normally would

241
00:08:46,160 --> 00:08:48,399
what we're going to do is is we're going

242
00:08:48,399 --> 00:08:51,360
to additionally store a strength signal

243
00:08:51,360 --> 00:08:53,519
so the strength signal might indicate

244
00:08:53,519 --> 00:08:56,399
whether the password is weak strong or

245
00:08:56,399 --> 00:08:58,480
moderate strength

246
00:08:58,480 --> 00:08:59,279
now

247
00:08:59,279 --> 00:09:01,279
this seems like a crazy idea right after

248
00:09:01,279 --> 00:09:03,040
all if the attacker breaks into the

249
00:09:03,040 --> 00:09:04,320
server

250
00:09:04,320 --> 00:09:05,519
they will see

251
00:09:05,519 --> 00:09:07,440
the signal

252
00:09:07,440 --> 00:09:10,160
and uh you know the the thought is won't

253
00:09:10,160 --> 00:09:11,920
that just uh give the attacker more

254
00:09:11,920 --> 00:09:13,519
information and make it easier for the

255
00:09:13,519 --> 00:09:14,640
attackers

256
00:09:14,640 --> 00:09:17,279
uh attacker to crack the user's password

257
00:09:17,279 --> 00:09:19,120
and the answer is yes if the attacker

258
00:09:19,120 --> 00:09:20,480
breaks into the server they will see

259
00:09:20,480 --> 00:09:22,399
this uh strength signal and that's

260
00:09:22,399 --> 00:09:24,800
actually exactly what we want we want

261
00:09:24,800 --> 00:09:26,880
them to observe this uh the signal and

262
00:09:26,880 --> 00:09:30,800
to modify their strategy accordingly

263
00:09:30,800 --> 00:09:33,519
now lest you think i'm completely crazy

264
00:09:33,519 --> 00:09:35,920
i should add the caveats

265
00:09:35,920 --> 00:09:39,519
that this signal that we that we publish

266
00:09:39,519 --> 00:09:41,200
on the on the authentication server is

267
00:09:41,200 --> 00:09:42,560
actually noisy

268
00:09:42,560 --> 00:09:44,320
so sometimes the signal strength will be

269
00:09:44,320 --> 00:09:45,440
accurate

270
00:09:45,440 --> 00:09:46,959
and sometimes the signal strength will

271
00:09:46,959 --> 00:09:49,360
be a lot

272
00:09:49,360 --> 00:09:52,000
and the question now is uh can we

273
00:09:52,000 --> 00:09:54,800
tune or uh can we tune this noisy signal

274
00:09:54,800 --> 00:09:56,640
in an appropriate way so that we

275
00:09:56,640 --> 00:09:58,399
actually reduce the number of uh

276
00:09:58,399 --> 00:10:00,320
passwords that a rational adversary will

277
00:10:00,320 --> 00:10:02,640
crack

278
00:10:03,760 --> 00:10:04,480
now

279
00:10:04,480 --> 00:10:07,200
an intuitive answer uh and this is the

280
00:10:07,200 --> 00:10:09,440
answer we first uh thought was the case

281
00:10:09,440 --> 00:10:12,240
uh is no way right uh a rational

282
00:10:12,240 --> 00:10:14,560
attacker will only use the signal if it

283
00:10:14,560 --> 00:10:17,120
benefits him uh so it seems like in the

284
00:10:17,120 --> 00:10:18,800
best case the attacker will simply

285
00:10:18,800 --> 00:10:20,720
ignore the signal in the worst case the

286
00:10:20,720 --> 00:10:23,440
signal will actually help the help the

287
00:10:23,440 --> 00:10:24,800
attacker

288
00:10:24,800 --> 00:10:26,399
so it seems like there's no way this

289
00:10:26,399 --> 00:10:28,079
could actually reduce the

290
00:10:28,079 --> 00:10:29,440
the number of passwords that the

291
00:10:29,440 --> 00:10:32,880
rational attacker is going to crack

292
00:10:32,880 --> 00:10:35,040
but this reasoning actually turns out to

293
00:10:35,040 --> 00:10:36,560
be a fallacy

294
00:10:36,560 --> 00:10:38,320
and the reason is that password cracking

295
00:10:38,320 --> 00:10:40,480
is not a zero-sum game

296
00:10:40,480 --> 00:10:43,200
so recall that the attacker's profit

297
00:10:43,200 --> 00:10:45,680
isn't just his expected reward is this

298
00:10:45,680 --> 00:10:48,079
it's the expected reward minus the

299
00:10:48,079 --> 00:10:50,880
expected guessing cost

300
00:10:50,880 --> 00:10:53,519
so in this case uh you know for example

301
00:10:53,519 --> 00:10:56,640
when the uh signaled strength is strong

302
00:10:56,640 --> 00:10:58,079
it may be in the attacker's best

303
00:10:58,079 --> 00:11:00,240
interest to simply

304
00:11:00,240 --> 00:11:01,920
reduce guessing costs and give up

305
00:11:01,920 --> 00:11:04,079
quickly in other words set his guessing

306
00:11:04,079 --> 00:11:06,399
budget to be zero and don't even bother

307
00:11:06,399 --> 00:11:08,880
trying to crack the password

308
00:11:08,880 --> 00:11:11,839
now if we tune the signal appropriately

309
00:11:11,839 --> 00:11:14,000
the attacker may continue to do this

310
00:11:14,000 --> 00:11:16,560
even when the signal strong is

311
00:11:16,560 --> 00:11:18,959
inaccurate right so even if the actual

312
00:11:18,959 --> 00:11:20,079
password

313
00:11:20,079 --> 00:11:21,839
you know maybe occasionally when we see

314
00:11:21,839 --> 00:11:23,600
a signal strung maybe sometimes the

315
00:11:23,600 --> 00:11:25,600
password is actually weak

316
00:11:25,600 --> 00:11:27,680
and in this case uh if the adversaries

317
00:11:27,680 --> 00:11:30,480
just gives up anytime anytime he sees a

318
00:11:30,480 --> 00:11:32,160
strong signal

319
00:11:32,160 --> 00:11:33,760
then we're saving some of these weak

320
00:11:33,760 --> 00:11:37,279
passwords from from being cracked

321
00:11:37,279 --> 00:11:38,240
okay

322
00:11:38,240 --> 00:11:40,079
uh so

323
00:11:40,079 --> 00:11:41,120
at least

324
00:11:41,120 --> 00:11:42,880
at least in theory there may be a hope

325
00:11:42,880 --> 00:11:45,760
that uh that this could could work

326
00:11:45,760 --> 00:11:48,320
let's see um actually a concrete example

327
00:11:48,320 --> 00:11:49,040
now

328
00:11:49,040 --> 00:11:51,120
oh uh i guess before the concrete

329
00:11:51,120 --> 00:11:53,920
example i should note that uh this idea

330
00:11:53,920 --> 00:11:55,600
of password strength signaling is

331
00:11:55,600 --> 00:11:58,480
actually motivated by the area of uh

332
00:11:58,480 --> 00:11:59,360
uh

333
00:11:59,360 --> 00:12:01,120
by the theory of bayesian persuasion

334
00:12:01,120 --> 00:12:03,279
which has been uh well studied in in

335
00:12:03,279 --> 00:12:05,920
game theory and economics

336
00:12:05,920 --> 00:12:07,680
but it's uh it's somewhat surprising

337
00:12:07,680 --> 00:12:10,000
here that it would actually work in the

338
00:12:10,000 --> 00:12:13,519
in the context of password hashing

339
00:12:14,079 --> 00:12:16,240
so let's uh let's look at a motivating

340
00:12:16,240 --> 00:12:18,880
example here uh let's suppose that the

341
00:12:18,880 --> 00:12:21,519
user password distribution is as follows

342
00:12:21,519 --> 00:12:23,200
so let's suppose that the most popular

343
00:12:23,200 --> 00:12:26,399
password uh is chosen with probability

344
00:12:26,399 --> 00:12:27,360
one half

345
00:12:27,360 --> 00:12:28,959
the second most popular password is

346
00:12:28,959 --> 00:12:31,040
chosen with probability one fourth and

347
00:12:31,040 --> 00:12:33,040
so on and so forth in general the eighth

348
00:12:33,040 --> 00:12:34,240
most popular password in the

349
00:12:34,240 --> 00:12:36,720
distribution is chosen with probability

350
00:12:36,720 --> 00:12:39,279
two to the minus i

351
00:12:39,279 --> 00:12:41,360
okay uh so this is the distribution over

352
00:12:41,360 --> 00:12:43,519
user passwords um the user will sample

353
00:12:43,519 --> 00:12:45,519
their password from this distribution

354
00:12:45,519 --> 00:12:47,279
and of course the attacker doesn't know

355
00:12:47,279 --> 00:12:48,959
which password was sampled but they know

356
00:12:48,959 --> 00:12:51,600
the they know the distribution

357
00:12:51,600 --> 00:12:53,360
so let's suppose that the hashing costs

358
00:12:53,360 --> 00:12:55,680
for each password yes is k uh so every

359
00:12:55,680 --> 00:12:57,440
time the attacker wants to

360
00:12:57,440 --> 00:12:59,600
uh verify or check a password it's going

361
00:12:59,600 --> 00:13:00,880
to cost them k

362
00:13:00,880 --> 00:13:02,560
and let's suppose the value of a cracked

363
00:13:02,560 --> 00:13:04,480
password is v

364
00:13:04,480 --> 00:13:06,480
and here let's assume that v is just

365
00:13:06,480 --> 00:13:09,279
slightly larger than 2 times k

366
00:13:09,279 --> 00:13:11,120
so it's almost 2 times k but it's

367
00:13:11,120 --> 00:13:13,760
slightly larger

368
00:13:13,760 --> 00:13:14,800
all right

369
00:13:14,800 --> 00:13:16,000
so

370
00:13:16,000 --> 00:13:17,360
um let's first

371
00:13:17,360 --> 00:13:19,200
imagine or let's first consider what the

372
00:13:19,200 --> 00:13:22,000
attacker would do if we don't use uh if

373
00:13:22,000 --> 00:13:24,880
we don't use password strength signal

374
00:13:24,880 --> 00:13:26,720
so in this case i claim that the

375
00:13:26,720 --> 00:13:28,399
rational attacker's

376
00:13:28,399 --> 00:13:31,040
utility optimizing strategy is to set b

377
00:13:31,040 --> 00:13:33,600
star equal to infinity in other words

378
00:13:33,600 --> 00:13:35,200
the attacker is just going to continue

379
00:13:35,200 --> 00:13:36,639
guessing and guessing and guessing until

380
00:13:36,639 --> 00:13:39,120
the password's cracked

381
00:13:39,120 --> 00:13:40,959
let's see why that's uh let's see why

382
00:13:40,959 --> 00:13:42,560
that's the case

383
00:13:42,560 --> 00:13:44,079
well let's suppose that the attackers

384
00:13:44,079 --> 00:13:46,320
made b guesses so far

385
00:13:46,320 --> 00:13:47,920
and the attacker is trying to decide

386
00:13:47,920 --> 00:13:50,000
whether or not to make an additional

387
00:13:50,000 --> 00:13:51,600
guess

388
00:13:51,600 --> 00:13:53,440
so notice first of all that the

389
00:13:53,440 --> 00:13:55,600
conditional probability that the next

390
00:13:55,600 --> 00:13:57,120
guess is correct

391
00:13:57,120 --> 00:13:58,639
is the probability that the actual

392
00:13:58,639 --> 00:14:01,360
password is password b plus one

393
00:14:01,360 --> 00:14:02,639
conditioned on the events that the

394
00:14:02,639 --> 00:14:04,880
password wasn't uh you know password one

395
00:14:04,880 --> 00:14:07,279
through password b

396
00:14:07,279 --> 00:14:10,480
now what is this uh what is this uh

397
00:14:10,480 --> 00:14:12,160
conditional probability

398
00:14:12,160 --> 00:14:14,880
well we can just uh use the law of

399
00:14:14,880 --> 00:14:16,320
conditional probability and compute it

400
00:14:16,320 --> 00:14:18,720
directly so it's 2 to the minus b

401
00:14:18,720 --> 00:14:19,760
plus 1

402
00:14:19,760 --> 00:14:21,040
divided by

403
00:14:21,040 --> 00:14:23,920
1 minus the probability of

404
00:14:23,920 --> 00:14:26,399
of all these events and if we evaluate

405
00:14:26,399 --> 00:14:27,839
this this gives us

406
00:14:27,839 --> 00:14:30,720
actually one half as our answer

407
00:14:30,720 --> 00:14:32,639
so the conditional probability that the

408
00:14:32,639 --> 00:14:35,519
next guess is correct is always one half

409
00:14:35,519 --> 00:14:36,560
um

410
00:14:36,560 --> 00:14:38,480
and this means that the expected reward

411
00:14:38,480 --> 00:14:40,240
for the next guess is

412
00:14:40,240 --> 00:14:44,720
uh v times one half or just v over 2.

413
00:14:44,720 --> 00:14:47,040
now notice that we picked the parameter

414
00:14:47,040 --> 00:14:47,839
v

415
00:14:47,839 --> 00:14:50,720
so that v over 2 is strictly larger than

416
00:14:50,720 --> 00:14:52,079
k

417
00:14:52,079 --> 00:14:54,720
which means that the expected reward

418
00:14:54,720 --> 00:14:56,880
is always larger than the guessing cost

419
00:14:56,880 --> 00:14:58,880
for checking the next password

420
00:14:58,880 --> 00:15:00,399
so in other words the attacker is never

421
00:15:00,399 --> 00:15:01,920
going to reach a situation where the

422
00:15:01,920 --> 00:15:04,000
attacker wants to give up

423
00:15:04,000 --> 00:15:05,440
he's always going to want to continue

424
00:15:05,440 --> 00:15:07,600
checking one more password until he

425
00:15:07,600 --> 00:15:11,199
actually has tracked the password

426
00:15:11,680 --> 00:15:13,360
so in this case a rational attacker will

427
00:15:13,360 --> 00:15:15,839
crack 100 of uh passwords from this

428
00:15:15,839 --> 00:15:18,480
distribution and the question is can we

429
00:15:18,480 --> 00:15:20,000
prevent the attacker from cracking

430
00:15:20,000 --> 00:15:23,680
passwords with probability 100

431
00:15:23,839 --> 00:15:24,800
okay

432
00:15:24,800 --> 00:15:27,680
well um in this uh in this case uh and

433
00:15:27,680 --> 00:15:29,120
obviously uh

434
00:15:29,120 --> 00:15:31,759
we admit that this is a contrived uh um

435
00:15:31,759 --> 00:15:33,600
user password distribution for the sake

436
00:15:33,600 --> 00:15:36,160
of uh for the sake of example but in

437
00:15:36,160 --> 00:15:38,240
this case the example is yes

438
00:15:38,240 --> 00:15:40,320
so let's uh let's uh consider the

439
00:15:40,320 --> 00:15:42,480
following signaling scheme

440
00:15:42,480 --> 00:15:44,240
uh so let's imagine that the user picks

441
00:15:44,240 --> 00:15:46,720
a password uh pw

442
00:15:46,720 --> 00:15:49,360
now if pw is equal to password1 the

443
00:15:49,360 --> 00:15:51,680
weakest password in the distribution

444
00:15:51,680 --> 00:15:53,600
then we're going to flip a coin and if

445
00:15:53,600 --> 00:15:55,920
the coin comes up we'll set uh our

446
00:15:55,920 --> 00:15:57,759
signal to be equal to zero

447
00:15:57,759 --> 00:15:59,360
otherwise we'll set the signal to be

448
00:15:59,360 --> 00:16:00,480
equal to one

449
00:16:00,480 --> 00:16:02,399
intuitively you can think signal zero

450
00:16:02,399 --> 00:16:03,519
indicates that the password is the

451
00:16:03,519 --> 00:16:05,839
weakest password signal one indicates

452
00:16:05,839 --> 00:16:07,839
that the password is strong or at least

453
00:16:07,839 --> 00:16:11,040
not the weakest password

454
00:16:11,040 --> 00:16:11,759
now

455
00:16:11,759 --> 00:16:14,000
if the user's password was not uh

456
00:16:14,000 --> 00:16:15,920
password one if it was not the weakest

457
00:16:15,920 --> 00:16:17,680
password then we're just gonna set

458
00:16:17,680 --> 00:16:21,279
signal uh equal to one always

459
00:16:21,279 --> 00:16:23,680
okay so now uh

460
00:16:23,680 --> 00:16:25,440
what the attacker observes is he

461
00:16:25,440 --> 00:16:27,680
observes the signal and now the attacker

462
00:16:27,680 --> 00:16:30,160
can perform a bayesian update

463
00:16:30,160 --> 00:16:33,440
so if the attacker sees the signal zero

464
00:16:33,440 --> 00:16:35,440
uh well the only way to ever observe a

465
00:16:35,440 --> 00:16:37,680
signal zero is if the password is

466
00:16:37,680 --> 00:16:38,959
password one

467
00:16:38,959 --> 00:16:40,560
so in this case the conditional

468
00:16:40,560 --> 00:16:42,880
probability of uh

469
00:16:42,880 --> 00:16:43,759
uh

470
00:16:43,759 --> 00:16:45,279
of the past user's password being

471
00:16:45,279 --> 00:16:47,680
password one given signal equals to zero

472
00:16:47,680 --> 00:16:50,320
is just one right we just know know the

473
00:16:50,320 --> 00:16:52,880
user's password in this case

474
00:16:52,880 --> 00:16:54,800
okay now that sounds uh

475
00:16:54,800 --> 00:16:56,639
that sounds menacing

476
00:16:56,639 --> 00:16:58,320
but let's suppose on the other hand that

477
00:16:58,320 --> 00:17:00,560
the signal was one

478
00:17:00,560 --> 00:17:03,040
well in this case we have turn obtain a

479
00:17:03,040 --> 00:17:05,199
new conditional probability distribution

480
00:17:05,199 --> 00:17:07,439
after the attacker performs a bayesian

481
00:17:07,439 --> 00:17:08,480
update

482
00:17:08,480 --> 00:17:09,839
so in this case the conditional

483
00:17:09,839 --> 00:17:12,079
probability uh that the user's password

484
00:17:12,079 --> 00:17:15,039
is uh password one given that we observe

485
00:17:15,039 --> 00:17:18,640
signal uh one it's just one third and in

486
00:17:18,640 --> 00:17:20,720
general uh the conditional probability

487
00:17:20,720 --> 00:17:22,160
that the user's password was actually

488
00:17:22,160 --> 00:17:23,359
password i

489
00:17:23,359 --> 00:17:26,720
given that we observe signal one is uh

490
00:17:26,720 --> 00:17:28,079
as follows

491
00:17:28,079 --> 00:17:30,480
it's four thirds times uh

492
00:17:30,480 --> 00:17:31,679
uh

493
00:17:31,679 --> 00:17:34,160
two to the minus i

494
00:17:34,160 --> 00:17:35,120
okay

495
00:17:35,120 --> 00:17:36,559
uh

496
00:17:36,559 --> 00:17:36,940
so

497
00:17:36,940 --> 00:17:38,240
[Music]

498
00:17:38,240 --> 00:17:39,760
uh now the attacker performs this

499
00:17:39,760 --> 00:17:41,039
patient update

500
00:17:41,039 --> 00:17:43,760
and we wanna know uh how a rational how

501
00:17:43,760 --> 00:17:48,080
a rational attacker would respond to uh

502
00:17:48,080 --> 00:17:50,960
would respond to this uh these updated

503
00:17:50,960 --> 00:17:54,000
posterior probabilities

504
00:17:54,000 --> 00:17:57,039
okay uh well

505
00:17:57,039 --> 00:17:58,880
certainly if the attacker sees the

506
00:17:58,880 --> 00:18:00,640
signal zero he's going to crack the

507
00:18:00,640 --> 00:18:02,799
password but when the attacker sees the

508
00:18:02,799 --> 00:18:04,160
signal one

509
00:18:04,160 --> 00:18:05,760
uh then we observe this conditional

510
00:18:05,760 --> 00:18:07,840
probability distribution and i claim

511
00:18:07,840 --> 00:18:09,760
that the attacker's

512
00:18:09,760 --> 00:18:11,520
rational attacker's utility optimizing

513
00:18:11,520 --> 00:18:13,600
strategy is actually to set b star equal

514
00:18:13,600 --> 00:18:15,600
to zero in other words

515
00:18:15,600 --> 00:18:17,520
give up immediately don't try to crack

516
00:18:17,520 --> 00:18:19,039
the password

517
00:18:19,039 --> 00:18:20,640
now i'm not going to prove this uh but

518
00:18:20,640 --> 00:18:22,559
you can uh plug into the formulas we

519
00:18:22,559 --> 00:18:24,400
showed you in previous slides and you

520
00:18:24,400 --> 00:18:25,760
can uh

521
00:18:25,760 --> 00:18:28,320
you can verify that yes this actually is

522
00:18:28,320 --> 00:18:30,320
the attacker's utility optimizing

523
00:18:30,320 --> 00:18:32,240
strategy

524
00:18:32,240 --> 00:18:34,960
the consequence then is that

525
00:18:34,960 --> 00:18:36,880
the rational attacker is going to crack

526
00:18:36,880 --> 00:18:39,600
the user's password if and only if the

527
00:18:39,600 --> 00:18:41,600
signal is zero

528
00:18:41,600 --> 00:18:43,760
so in other words the rational attacker

529
00:18:43,760 --> 00:18:45,679
will fail to crack the user's password

530
00:18:45,679 --> 00:18:47,600
with probability at least

531
00:18:47,600 --> 00:18:50,000
probability sig equals one right so

532
00:18:50,000 --> 00:18:52,000
probability of observing sigma equals

533
00:18:52,000 --> 00:18:55,120
one that's the probability that the

534
00:18:55,120 --> 00:18:56,799
attacker is going to fail to practice

535
00:18:56,799 --> 00:18:58,240
this password

536
00:18:58,240 --> 00:19:00,240
now what is the probability of observing

537
00:19:00,240 --> 00:19:01,520
signal one

538
00:19:01,520 --> 00:19:04,720
uh well it's the probability that the um

539
00:19:04,720 --> 00:19:07,039
that the user picks a

540
00:19:07,039 --> 00:19:09,200
password other than password one

541
00:19:09,200 --> 00:19:10,960
times the probability of observing

542
00:19:10,960 --> 00:19:13,840
signal one given that uh we don't pick

543
00:19:13,840 --> 00:19:15,600
the weakest password and that problem

544
00:19:15,600 --> 00:19:18,400
conditional probability is just one

545
00:19:18,400 --> 00:19:21,360
uh plus the probability of observing

546
00:19:21,360 --> 00:19:22,720
signal one

547
00:19:22,720 --> 00:19:25,360
given that our password is uh password

548
00:19:25,360 --> 00:19:27,440
one times the probability of picking

549
00:19:27,440 --> 00:19:28,799
password one

550
00:19:28,799 --> 00:19:31,840
and this is just one half times one half

551
00:19:31,840 --> 00:19:35,280
so we get uh one half times one our one

552
00:19:35,280 --> 00:19:37,360
half plus one fourth which gives us a

553
00:19:37,360 --> 00:19:40,000
total probability three-fourths

554
00:19:40,000 --> 00:19:41,360
so three-fourths would be the

555
00:19:41,360 --> 00:19:42,960
probability of

556
00:19:42,960 --> 00:19:45,200
of observing signal one

557
00:19:45,200 --> 00:19:47,760
and uh whenever the attacker observes uh

558
00:19:47,760 --> 00:19:50,640
signal one he doesn't crack the password

559
00:19:50,640 --> 00:19:53,280
so in this case uh the attacker is only

560
00:19:53,280 --> 00:19:55,200
going to crack 25 percent of user

561
00:19:55,200 --> 00:19:56,720
passwords after

562
00:19:56,720 --> 00:19:59,039
uh after signaling

563
00:19:59,039 --> 00:20:00,960
um so this is uh quite impressive we

564
00:20:00,960 --> 00:20:03,600
went from an attacker who cracked 100 of

565
00:20:03,600 --> 00:20:04,799
passwords

566
00:20:04,799 --> 00:20:07,039
uh we changed nothing about the password

567
00:20:07,039 --> 00:20:09,440
hashing algorithm all we did is adopted

568
00:20:09,440 --> 00:20:11,919
a uh signaling scheme

569
00:20:11,919 --> 00:20:13,919
and suddenly the rational attacker is

570
00:20:13,919 --> 00:20:16,080
only cracking 25 percent of user

571
00:20:16,080 --> 00:20:18,159
passwords

572
00:20:18,159 --> 00:20:20,400
now okay admittedly

573
00:20:20,400 --> 00:20:22,080
admittedly this is kind of a contrived

574
00:20:22,080 --> 00:20:23,679
password distribution for the sake of

575
00:20:23,679 --> 00:20:24,960
example

576
00:20:24,960 --> 00:20:27,280
but as we'll see later

577
00:20:27,280 --> 00:20:29,039
signaling can actually work in practice

578
00:20:29,039 --> 00:20:32,559
for real password distributions

579
00:20:33,039 --> 00:20:35,760
so our contributions in this uh paper uh

580
00:20:35,760 --> 00:20:37,679
first we introduce uh password strength

581
00:20:37,679 --> 00:20:39,120
signaling uh

582
00:20:39,120 --> 00:20:40,480
as a

583
00:20:40,480 --> 00:20:42,720
novel yet uh counter-intuitive defense

584
00:20:42,720 --> 00:20:44,799
against uh rational password-tracking

585
00:20:44,799 --> 00:20:46,400
attackers

586
00:20:46,400 --> 00:20:48,799
uh next uh we'll introduce a stackelberg

587
00:20:48,799 --> 00:20:50,720
game model uh for a password strength

588
00:20:50,720 --> 00:20:51,760
signaling

589
00:20:51,760 --> 00:20:54,159
uh intuitively the defender is going to

590
00:20:54,159 --> 00:20:56,559
commit to a signaling strategy with the

591
00:20:56,559 --> 00:20:58,240
goal of minimizing the percentage of

592
00:20:58,240 --> 00:20:59,919
passwords uh cracked by a rational

593
00:20:59,919 --> 00:21:01,120
attacker

594
00:21:01,120 --> 00:21:02,799
and the attack rational attacker is

595
00:21:02,799 --> 00:21:04,240
going to follow

596
00:21:04,240 --> 00:21:04,960
by

597
00:21:04,960 --> 00:21:06,799
playing whatever

598
00:21:06,799 --> 00:21:11,120
attack maximizes its utility or profit

599
00:21:11,120 --> 00:21:13,039
and finally once we've introduced our

600
00:21:13,039 --> 00:21:15,200
stackleberg game model

601
00:21:15,200 --> 00:21:17,200
we will use this game model to conduct

602
00:21:17,200 --> 00:21:19,200
an empirical analysis on real password

603
00:21:19,200 --> 00:21:21,280
data sets uh to see whether our

604
00:21:21,280 --> 00:21:23,360
signaling actually reduces the

605
00:21:23,360 --> 00:21:25,360
uh the percentage of passwords that a

606
00:21:25,360 --> 00:21:28,479
rational attacker would crack

607
00:21:28,880 --> 00:21:31,760
okay um so just to review the the basic

608
00:21:31,760 --> 00:21:33,840
strength signaling mechanism uh let's

609
00:21:33,840 --> 00:21:35,919
look at how account creation might look

610
00:21:35,919 --> 00:21:36,720
uh

611
00:21:36,720 --> 00:21:38,640
so here um

612
00:21:38,640 --> 00:21:41,520
uh the user registers their accounts uh

613
00:21:41,520 --> 00:21:44,240
with their favorite password um in this

614
00:21:44,240 --> 00:21:46,320
case the server is going to pick a

615
00:21:46,320 --> 00:21:47,840
random salt value

616
00:21:47,840 --> 00:21:50,159
and uh hash the password with the salt

617
00:21:50,159 --> 00:21:52,480
value as normal

618
00:21:52,480 --> 00:21:54,320
and now what we're going to do is we're

619
00:21:54,320 --> 00:21:55,840
just going to

620
00:21:55,840 --> 00:21:57,760
compute the strength of the user's

621
00:21:57,760 --> 00:21:59,039
password

622
00:21:59,039 --> 00:22:01,440
we can either do this directly if we

623
00:22:01,440 --> 00:22:03,440
know the password distribution or we

624
00:22:03,440 --> 00:22:04,960
could use this password strength meter

625
00:22:04,960 --> 00:22:06,400
to estimate the strength of the user's

626
00:22:06,400 --> 00:22:08,320
password

627
00:22:08,320 --> 00:22:10,480
then we're going to

628
00:22:10,480 --> 00:22:13,760
run a randomized algorithm getsignal uh

629
00:22:13,760 --> 00:22:15,520
and this takes this as input the

630
00:22:15,520 --> 00:22:17,120
strength of the user's password and

631
00:22:17,120 --> 00:22:19,120
outputs a signaled strength where the

632
00:22:19,120 --> 00:22:21,039
signal strength may or may not be equal

633
00:22:21,039 --> 00:22:24,640
to the actual uh strength

634
00:22:24,640 --> 00:22:27,120
um okay and uh then what we're going to

635
00:22:27,120 --> 00:22:30,320
store uh is just the username the salt

636
00:22:30,320 --> 00:22:31,360
the hash

637
00:22:31,360 --> 00:22:33,039
and uh the signal

638
00:22:33,039 --> 00:22:34,880
of course we're not going to store the

639
00:22:34,880 --> 00:22:36,320
actual strength of the user's password

640
00:22:36,320 --> 00:22:40,400
so we're going to just just discard this

641
00:22:40,400 --> 00:22:42,640
now authentication actually works in

642
00:22:42,640 --> 00:22:44,720
exactly the same way

643
00:22:44,720 --> 00:22:46,799
right authentication is

644
00:22:46,799 --> 00:22:48,720
going to do exactly the same thing

645
00:22:48,720 --> 00:22:50,880
recompute the hash check to see if it

646
00:22:50,880 --> 00:22:51,679
makes

647
00:22:51,679 --> 00:22:53,760
if it matches the hash on file if it

648
00:22:53,760 --> 00:22:55,520
doesn't then authentication fails

649
00:22:55,520 --> 00:22:58,000
otherwise authentication succeeds

650
00:22:58,000 --> 00:23:00,080
in fact authentication doesn't even need

651
00:23:00,080 --> 00:23:01,840
to

652
00:23:01,840 --> 00:23:04,320
reference this signaled string

653
00:23:04,320 --> 00:23:09,000
so this process is completely unchanged

654
00:23:09,679 --> 00:23:10,720
okay

655
00:23:10,720 --> 00:23:12,880
so now what we want to do is we want to

656
00:23:12,880 --> 00:23:15,360
introduce a stackleberg game model

657
00:23:15,360 --> 00:23:17,520
and we model want to model the

658
00:23:17,520 --> 00:23:19,440
defender the authentication server and

659
00:23:19,440 --> 00:23:21,280
the attacker

660
00:23:21,280 --> 00:23:23,600
so a stackelberg game model is simply a

661
00:23:23,600 --> 00:23:25,840
leader follow-up follower game

662
00:23:25,840 --> 00:23:28,320
so basically the leader uh plays an

663
00:23:28,320 --> 00:23:30,320
action first uh in this case the

664
00:23:30,320 --> 00:23:31,679
leader's action is going to be

665
00:23:31,679 --> 00:23:35,120
committing to a signaling matrix

666
00:23:35,120 --> 00:23:38,080
and here the signaling matrix is just uh

667
00:23:38,080 --> 00:23:39,520
um

668
00:23:39,520 --> 00:23:40,400
uh

669
00:23:40,400 --> 00:23:42,159
a bunch of real numbers

670
00:23:42,159 --> 00:23:45,279
uh between zero and one intuitively s i

671
00:23:45,279 --> 00:23:47,760
j uh the i h i j th entry in the

672
00:23:47,760 --> 00:23:49,440
signaling matrix

673
00:23:49,440 --> 00:23:51,760
is going to give us the probability of

674
00:23:51,760 --> 00:23:52,559
uh

675
00:23:52,559 --> 00:23:54,640
signaling that the password strength is

676
00:23:54,640 --> 00:23:55,679
j

677
00:23:55,679 --> 00:23:57,840
when the user's actual password strength

678
00:23:57,840 --> 00:23:59,120
is i

679
00:23:59,120 --> 00:24:00,799
right so uh

680
00:24:00,799 --> 00:24:02,880
basically the signaling matrix just

681
00:24:02,880 --> 00:24:04,559
gives us uh

682
00:24:04,559 --> 00:24:06,799
a way of uh

683
00:24:06,799 --> 00:24:08,960
a way of sampling or

684
00:24:08,960 --> 00:24:09,919
yeah

685
00:24:09,919 --> 00:24:12,000
it gives us a way of sampling the signal

686
00:24:12,000 --> 00:24:14,080
right so once we get the user's actual

687
00:24:14,080 --> 00:24:14,960
strength

688
00:24:14,960 --> 00:24:18,000
uh right now we can just uh

689
00:24:18,000 --> 00:24:20,080
infer the probability distribution over

690
00:24:20,080 --> 00:24:22,400
our signals from this matrix and that

691
00:24:22,400 --> 00:24:25,360
gives us a way to to sample a strength

692
00:24:25,360 --> 00:24:27,678
signal

693
00:24:28,240 --> 00:24:30,240
and of course our goal when picking the

694
00:24:30,240 --> 00:24:31,840
signaling matrix is going to be to

695
00:24:31,840 --> 00:24:34,080
minimize the percentage of passwords

696
00:24:34,080 --> 00:24:35,840
that a rational attacker would would

697
00:24:35,840 --> 00:24:36,799
crack

698
00:24:36,799 --> 00:24:38,159
so of course we want to minimize the

699
00:24:38,159 --> 00:24:40,320
percentage of cracked passwords again

700
00:24:40,320 --> 00:24:41,919
under the assumption that the rational

701
00:24:41,919 --> 00:24:43,440
attacker is going to respond with a

702
00:24:43,440 --> 00:24:46,720
utility optimizing strategy

703
00:24:46,720 --> 00:24:47,679
okay

704
00:24:47,679 --> 00:24:51,279
so the next component of our model is

705
00:24:51,279 --> 00:24:54,000
going to model the rational attacker

706
00:24:54,000 --> 00:24:56,400
so after observing signal y

707
00:24:56,400 --> 00:24:58,080
the attacker can perform a bayesian

708
00:24:58,080 --> 00:24:59,840
update

709
00:24:59,840 --> 00:25:01,919
in particular the posterior probability

710
00:25:01,919 --> 00:25:03,600
of a password uh

711
00:25:03,600 --> 00:25:06,320
pw condition on signal y is just given

712
00:25:06,320 --> 00:25:08,880
by the following formula

713
00:25:08,880 --> 00:25:10,159
okay

714
00:25:10,159 --> 00:25:12,240
so we perform a bayesian update and now

715
00:25:12,240 --> 00:25:13,919
we can sort all the passwords in

716
00:25:13,919 --> 00:25:15,840
descending order of their posterior

717
00:25:15,840 --> 00:25:18,480
probability

718
00:25:18,480 --> 00:25:20,480
and now what the attacker is going to do

719
00:25:20,480 --> 00:25:23,279
is uh he's going to pick

720
00:25:23,279 --> 00:25:25,200
some budget v y

721
00:25:25,200 --> 00:25:27,200
and what this budget tells us is that

722
00:25:27,200 --> 00:25:28,400
when the attacker

723
00:25:28,400 --> 00:25:29,919
observes signal y

724
00:25:29,919 --> 00:25:31,360
what he's going to do is he's going to

725
00:25:31,360 --> 00:25:33,600
talk guess the top by passwords in the

726
00:25:33,600 --> 00:25:37,360
posterior distribution and then give up

727
00:25:37,360 --> 00:25:39,039
okay and of course the attacker is going

728
00:25:39,039 --> 00:25:40,159
to

729
00:25:40,159 --> 00:25:43,039
may pick a different value b y uh based

730
00:25:43,039 --> 00:25:46,159
on uh the signal he he observes uh so in

731
00:25:46,159 --> 00:25:48,000
general his strategy or his action is

732
00:25:48,000 --> 00:25:51,520
going to be to pick a uh a vector of uh

733
00:25:51,520 --> 00:25:54,559
v y b y values one for each uh possible

734
00:25:54,559 --> 00:25:57,840
signal that you might observe

735
00:25:58,240 --> 00:26:01,520
and uh here uh we'll let lambda be

736
00:26:01,520 --> 00:26:04,000
y uh be the probability

737
00:26:04,000 --> 00:26:05,919
of uh the top b passwords in the

738
00:26:05,919 --> 00:26:08,480
posterior distribution uh so lambda b y

739
00:26:08,480 --> 00:26:10,880
is just gonna be the sum of the top

740
00:26:10,880 --> 00:26:12,799
probabilities of the top b passwords in

741
00:26:12,799 --> 00:26:16,240
this posterior distribution

742
00:26:16,720 --> 00:26:19,200
so the utility of the attacker uh when

743
00:26:19,200 --> 00:26:21,679
playing an action profile

744
00:26:21,679 --> 00:26:23,760
is going to be given by the following

745
00:26:23,760 --> 00:26:25,760
formula so it's going to be the sum over

746
00:26:25,760 --> 00:26:27,919
possible signals y

747
00:26:27,919 --> 00:26:31,440
of probability of observing the signal

748
00:26:31,440 --> 00:26:33,360
times the utility of the attacker when

749
00:26:33,360 --> 00:26:35,520
we observe this signal

750
00:26:35,520 --> 00:26:37,440
right and to compute the utility of the

751
00:26:37,440 --> 00:26:39,360
attacker when observing a particular

752
00:26:39,360 --> 00:26:42,080
signal y we can actually just use the

753
00:26:42,080 --> 00:26:43,600
the same formula

754
00:26:43,600 --> 00:26:45,840
from uh from the last uh

755
00:26:45,840 --> 00:26:47,760
from the beginning of the talk and plug

756
00:26:47,760 --> 00:26:49,279
it in

757
00:26:49,279 --> 00:26:50,799
okay

758
00:26:50,799 --> 00:26:52,880
so now we have a formula for the

759
00:26:52,880 --> 00:26:54,480
attacker's uh

760
00:26:54,480 --> 00:26:55,600
utility

761
00:26:55,600 --> 00:26:57,919
and of course uh the attacker is uh

762
00:26:57,919 --> 00:27:00,159
going to pick a strategy profile which

763
00:27:00,159 --> 00:27:03,360
maximizes its uh expected utility

764
00:27:03,360 --> 00:27:05,520
so the attacker is just going to play

765
00:27:05,520 --> 00:27:06,480
utility

766
00:27:06,480 --> 00:27:10,159
uh action b y star where b y star is

767
00:27:10,159 --> 00:27:13,360
given by uh the arg max of uh

768
00:27:13,360 --> 00:27:16,639
of this function u a d v

769
00:27:17,120 --> 00:27:18,960
and in this case uh

770
00:27:18,960 --> 00:27:21,760
once we know uh how many

771
00:27:21,760 --> 00:27:23,600
once we know the attacker's budget for

772
00:27:23,600 --> 00:27:26,640
each uh for each signal uh we can

773
00:27:26,640 --> 00:27:29,760
compute the percentage of cracked costs

774
00:27:29,760 --> 00:27:33,440
so in particular uh we'll let f of v ks

775
00:27:33,440 --> 00:27:35,279
be the percentage of uh the expected

776
00:27:35,279 --> 00:27:36,960
number of passwords that get tracked by

777
00:27:36,960 --> 00:27:39,760
a rational attacker uh given value v for

778
00:27:39,760 --> 00:27:41,679
cracked password and cost k per for

779
00:27:41,679 --> 00:27:43,120
password guess

780
00:27:43,120 --> 00:27:44,960
um so in this case uh

781
00:27:44,960 --> 00:27:46,880
the percentage of passwords again we're

782
00:27:46,880 --> 00:27:49,039
going to sum over signals y

783
00:27:49,039 --> 00:27:50,399
we're going to look at the probability

784
00:27:50,399 --> 00:27:52,720
that the signal for a users for a random

785
00:27:52,720 --> 00:27:54,720
user's password is equal to y

786
00:27:54,720 --> 00:27:58,320
and then multiply it by lambda v y star

787
00:27:58,320 --> 00:28:00,880
this is the attacker's budget

788
00:28:00,880 --> 00:28:03,600
when uh the signal is y um

789
00:28:03,600 --> 00:28:05,679
and uh this yeah b y star is the

790
00:28:05,679 --> 00:28:08,240
attacker's budget lambda b y star uh

791
00:28:08,240 --> 00:28:11,360
comma y just gives us the uh

792
00:28:11,360 --> 00:28:14,320
uh the probability that a a password is

793
00:28:14,320 --> 00:28:17,120
actually in the top by star passwords in

794
00:28:17,120 --> 00:28:19,840
the posterior distribution

795
00:28:19,840 --> 00:28:21,679
so this formula gives us the expected

796
00:28:21,679 --> 00:28:24,480
number of cracked passwords

797
00:28:24,480 --> 00:28:25,520
and

798
00:28:25,520 --> 00:28:27,520
now we can go back and look at the

799
00:28:27,520 --> 00:28:28,799
defender

800
00:28:28,799 --> 00:28:31,039
the defender's goal is to minimize the

801
00:28:31,039 --> 00:28:33,200
the percentage of track passwords so in

802
00:28:33,200 --> 00:28:35,120
other words find a signaling matrix

803
00:28:35,120 --> 00:28:37,279
matrix s star which minimizes this

804
00:28:37,279 --> 00:28:39,200
quantity

805
00:28:39,200 --> 00:28:41,360
okay uh so this is the defender's

806
00:28:41,360 --> 00:28:43,360
optimization problem uh

807
00:28:43,360 --> 00:28:45,360
and uh this is a typical type of

808
00:28:45,360 --> 00:28:47,120
optimization problem that one would

809
00:28:47,120 --> 00:28:49,120
encounter encounter in stackleberg game

810
00:28:49,120 --> 00:28:50,799
theory

811
00:28:50,799 --> 00:28:52,399
uh so in this case uh what we're going

812
00:28:52,399 --> 00:28:53,600
to do is we're going to use the

813
00:28:53,600 --> 00:28:56,480
heuristic box optimization tool to solve

814
00:28:56,480 --> 00:28:58,559
our optimization problem it may not

815
00:28:58,559 --> 00:29:01,279
actually give us the optimal uh s-star

816
00:29:01,279 --> 00:29:03,360
but it'll come close and in practice it

817
00:29:03,360 --> 00:29:05,120
works quite well

818
00:29:05,120 --> 00:29:06,640
so we're going to use an evolutionary

819
00:29:06,640 --> 00:29:08,320
algorithm called bite opt in our

820
00:29:08,320 --> 00:29:10,399
empirical experiments to actually solve

821
00:29:10,399 --> 00:29:13,840
this optimization problem

822
00:29:14,559 --> 00:29:15,760
okay

823
00:29:15,760 --> 00:29:17,679
so now

824
00:29:17,679 --> 00:29:19,679
now we've introduced password string

825
00:29:19,679 --> 00:29:21,200
signaling we've introduced our

826
00:29:21,200 --> 00:29:23,200
stackleberg game model

827
00:29:23,200 --> 00:29:25,200
now we can actually apply our model to

828
00:29:25,200 --> 00:29:26,720
analyze

829
00:29:26,720 --> 00:29:28,480
the performance of password strength

830
00:29:28,480 --> 00:29:30,720
signaling on real-world password

831
00:29:30,720 --> 00:29:32,159
distributions

832
00:29:32,159 --> 00:29:34,480
so we're going to use nine uh

833
00:29:34,480 --> 00:29:36,480
nine leaked data sets from a variety of

834
00:29:36,480 --> 00:29:37,679
companies

835
00:29:37,679 --> 00:29:41,840
um like uh rock u linkedin web host et

836
00:29:41,840 --> 00:29:42,960
cetera

837
00:29:42,960 --> 00:29:45,200
uh the defender's uh going to take his

838
00:29:45,200 --> 00:29:46,399
input to

839
00:29:46,399 --> 00:29:49,279
a value and cost parameter uh use bite

840
00:29:49,279 --> 00:29:51,200
opt to find the optimal signaling

841
00:29:51,200 --> 00:29:52,960
strategy and then we're just gonna

842
00:29:52,960 --> 00:29:54,480
compute uh

843
00:29:54,480 --> 00:29:56,399
how many passwords the rational attacker

844
00:29:56,399 --> 00:29:57,919
would crack

845
00:29:57,919 --> 00:30:00,880
to use this uh um to repeat this uh

846
00:30:00,880 --> 00:30:03,919
process we need to um have uh work with

847
00:30:03,919 --> 00:30:05,600
a password distribution

848
00:30:05,600 --> 00:30:07,840
uh one way to define a a password

849
00:30:07,840 --> 00:30:10,000
distribution given a breach data set is

850
00:30:10,000 --> 00:30:11,840
just to use the empirical distribution

851
00:30:11,840 --> 00:30:13,279
so in other words we can set the

852
00:30:13,279 --> 00:30:16,240
password of probability of password i

853
00:30:16,240 --> 00:30:19,120
to be fi the frequency of password i in

854
00:30:19,120 --> 00:30:21,039
the data set divided by n the number of

855
00:30:21,039 --> 00:30:22,960
passwords in the data set

856
00:30:22,960 --> 00:30:25,279
um and this uh this approach works

857
00:30:25,279 --> 00:30:27,440
pretty well except uh

858
00:30:27,440 --> 00:30:29,440
when the frequencies start to get small

859
00:30:29,440 --> 00:30:32,000
in the tail of the distribution uh the

860
00:30:32,000 --> 00:30:33,760
empirical distribution may not actually

861
00:30:33,760 --> 00:30:36,240
match the the real distribution uh so

862
00:30:36,240 --> 00:30:38,399
we'll use a statistical tool called good

863
00:30:38,399 --> 00:30:40,559
turning frequency estimation to actually

864
00:30:40,559 --> 00:30:42,799
bound the uncertainty and highlight when

865
00:30:42,799 --> 00:30:44,960
the empirical distribution might diverge

866
00:30:44,960 --> 00:30:46,480
from the real one

867
00:30:46,480 --> 00:30:48,880
uh we'll also derive another

868
00:30:48,880 --> 00:30:51,360
distribution uh from uh

869
00:30:51,360 --> 00:30:53,919
uh from sophisticated state-of-the-art

870
00:30:53,919 --> 00:30:56,080
uh for cracking models so we'll just

871
00:30:56,080 --> 00:30:57,360
basically run

872
00:30:57,360 --> 00:30:58,799
these state-of-the-art password tracking

873
00:30:58,799 --> 00:31:01,440
models uh on the passwords in the data

874
00:31:01,440 --> 00:31:03,679
set and that'll give us

875
00:31:03,679 --> 00:31:05,120
that will give us a

876
00:31:05,120 --> 00:31:07,840
a distribution which is just fit to the

877
00:31:07,840 --> 00:31:09,679
to the cracking curve

878
00:31:09,679 --> 00:31:12,960
so we can derive distributions in both

879
00:31:12,960 --> 00:31:15,679
both of these ways

880
00:31:15,679 --> 00:31:19,039
okay so let's uh first look at

881
00:31:19,039 --> 00:31:20,880
the empirical password distribution

882
00:31:20,880 --> 00:31:22,799
using the neopets

883
00:31:22,799 --> 00:31:24,480
data set

884
00:31:24,480 --> 00:31:25,600
so here

885
00:31:25,600 --> 00:31:27,679
again we have the empirical

886
00:31:27,679 --> 00:31:29,600
password distribution

887
00:31:29,600 --> 00:31:31,679
and we can see that

888
00:31:31,679 --> 00:31:34,480
when uh v over k in this case i guess

889
00:31:34,480 --> 00:31:36,240
it's about four times ten to the sixth

890
00:31:36,240 --> 00:31:37,919
uh so in other words the value of the

891
00:31:37,919 --> 00:31:39,279
password is about

892
00:31:39,279 --> 00:31:40,320
uh

893
00:31:40,320 --> 00:31:44,640
four million times the um the cost of uh

894
00:31:44,640 --> 00:31:46,960
of a password guess um in this case uh

895
00:31:46,960 --> 00:31:48,559
we can see about an eight percent

896
00:31:48,559 --> 00:31:51,360
improvement um so in other words uh by

897
00:31:51,360 --> 00:31:53,279
signaling we reduce the percentage of

898
00:31:53,279 --> 00:31:56,240
passwords by about eight percent

899
00:31:56,240 --> 00:31:58,559
uh here uh we've highlighted uncertain

900
00:31:58,559 --> 00:32:00,480
regions so this is just the

901
00:32:00,480 --> 00:32:02,799
region of the cracking curve where the

902
00:32:02,799 --> 00:32:04,960
empirical distribution may diverge from

903
00:32:04,960 --> 00:32:07,039
the real password distribution so you'll

904
00:32:07,039 --> 00:32:09,600
notice here that uh our 8 improvement

905
00:32:09,600 --> 00:32:12,559
lies outside the uncertain region

906
00:32:12,559 --> 00:32:14,080
so in this case we actually are getting

907
00:32:14,080 --> 00:32:16,159
the improvement it's uh it's not because

908
00:32:16,159 --> 00:32:17,120
our

909
00:32:17,120 --> 00:32:20,559
model distribution is inaccurate

910
00:32:20,559 --> 00:32:22,960
uh we can also evaluate the robustness

911
00:32:22,960 --> 00:32:25,279
of uh information signaling or password

912
00:32:25,279 --> 00:32:27,600
strength signaling uh so here we can

913
00:32:27,600 --> 00:32:29,760
look at uh what if we take the signaling

914
00:32:29,760 --> 00:32:31,200
matrix by

915
00:32:31,200 --> 00:32:33,600
uh optimizing assuming that uh v is

916
00:32:33,600 --> 00:32:34,720
equal to

917
00:32:34,720 --> 00:32:38,480
uh 10 million or sorry a million times k

918
00:32:38,480 --> 00:32:41,519
and in this case uh if

919
00:32:41,519 --> 00:32:43,360
um if our estimate for the attacker's

920
00:32:43,360 --> 00:32:45,440
value is reasonably close uh

921
00:32:45,440 --> 00:32:48,720
we improve on uh um we improve on the

922
00:32:48,720 --> 00:32:50,880
status quo uh no signaling

923
00:32:50,880 --> 00:32:52,640
but if uh if our estimate for the

924
00:32:52,640 --> 00:32:55,200
attacker's value is widely inaccurate uh

925
00:32:55,200 --> 00:32:57,279
then uh in this case uh you're better

926
00:32:57,279 --> 00:33:00,000
off not using uh information signaling

927
00:33:00,000 --> 00:33:02,559
uh you're better off just uh you know

928
00:33:02,559 --> 00:33:05,360
not not signaling at all

929
00:33:05,360 --> 00:33:07,519
um so basically what this is showing is

930
00:33:07,519 --> 00:33:10,559
that as long as we can get our

931
00:33:10,559 --> 00:33:12,080
estimate of the attacker's value to be

932
00:33:12,080 --> 00:33:14,720
reasonably close um it benefit it's

933
00:33:14,720 --> 00:33:16,399
beneficial to use

934
00:33:16,399 --> 00:33:19,600
use information signaling

935
00:33:19,600 --> 00:33:21,760
um now we can repeat the

936
00:33:21,760 --> 00:33:24,399
same experiments using distributions

937
00:33:24,399 --> 00:33:26,399
derived from sophisticated password

938
00:33:26,399 --> 00:33:28,320
tracking models

939
00:33:28,320 --> 00:33:31,679
and here once again we can see

940
00:33:31,679 --> 00:33:32,480
that

941
00:33:32,480 --> 00:33:34,399
by adopting information signaling we can

942
00:33:34,399 --> 00:33:36,080
reduce the percentage of cracked

943
00:33:36,080 --> 00:33:38,399
passwords substantially in this case by

944
00:33:38,399 --> 00:33:40,799
about 10

945
00:33:42,240 --> 00:33:43,760
now um

946
00:33:43,760 --> 00:33:46,480
we can also uh apply information

947
00:33:46,480 --> 00:33:49,600
signaling in in a context where

948
00:33:49,600 --> 00:33:51,840
the attacker is an offline attacker so

949
00:33:51,840 --> 00:33:54,880
for example many companies use captchas

950
00:33:54,880 --> 00:33:57,279
to throttle online attackers

951
00:33:57,279 --> 00:33:59,039
in this case the guessing cost is given

952
00:33:59,039 --> 00:34:01,360
by the cost of solving the captcha

953
00:34:01,360 --> 00:34:03,360
so for example captcha might just be

954
00:34:03,360 --> 00:34:06,399
garbled text and you have to un-garble

955
00:34:06,399 --> 00:34:08,159
the text and type it in

956
00:34:08,159 --> 00:34:11,040
uh in this case the cost of solving a

957
00:34:11,040 --> 00:34:13,760
captcha tends to be much larger than the

958
00:34:13,760 --> 00:34:16,239
cost of evaluating a password hash

959
00:34:16,239 --> 00:34:18,879
so in this case the ratio v over k tends

960
00:34:18,879 --> 00:34:20,960
to be much smaller than in an offline

961
00:34:20,960 --> 00:34:22,159
attack

962
00:34:22,159 --> 00:34:24,159
uh but we can still

963
00:34:24,159 --> 00:34:27,040
evaluate the performance of uh v over k

964
00:34:27,040 --> 00:34:29,199
when uh sorry of information signaling

965
00:34:29,199 --> 00:34:30,960
when v over k is small

966
00:34:30,960 --> 00:34:33,599
uh in this case we still see substantial

967
00:34:33,599 --> 00:34:36,079
improvement we see a reduction of about

968
00:34:36,079 --> 00:34:38,800
3.4 in the in the fraction of cracked

969
00:34:38,800 --> 00:34:41,440
passwords uh so it still works uh even

970
00:34:41,440 --> 00:34:45,119
in uh even in this context

971
00:34:45,199 --> 00:34:46,399
okay

972
00:34:46,399 --> 00:34:49,199
now uh those are the positives uh

973
00:34:49,199 --> 00:34:51,839
i wanted to before i uh wrap up i wanted

974
00:34:51,839 --> 00:34:54,560
to raise an important ethical question

975
00:34:54,560 --> 00:34:55,520
um

976
00:34:55,520 --> 00:34:56,719
so

977
00:34:56,719 --> 00:35:00,160
let's say that a user is unlucky

978
00:35:00,160 --> 00:35:01,680
if their password

979
00:35:01,680 --> 00:35:03,839
was not going to be cracked uh before

980
00:35:03,839 --> 00:35:05,040
signaling

981
00:35:05,040 --> 00:35:07,280
uh but after signaling the password is

982
00:35:07,280 --> 00:35:08,480
cracked

983
00:35:08,480 --> 00:35:10,800
uh similarly uh we'll call it a user

984
00:35:10,800 --> 00:35:12,960
lucky if their password was going to be

985
00:35:12,960 --> 00:35:15,119
cracked before we signaled string and

986
00:35:15,119 --> 00:35:17,280
after we signal strength it uh it wasn't

987
00:35:17,280 --> 00:35:18,880
cracked

988
00:35:18,880 --> 00:35:21,280
so obviously uh because password

989
00:35:21,280 --> 00:35:23,280
strength signaling is reducing the the

990
00:35:23,280 --> 00:35:25,280
number of cracked passwords we have more

991
00:35:25,280 --> 00:35:27,680
lucky users than unlucky users

992
00:35:27,680 --> 00:35:30,400
uh but one of the things we looked at is

993
00:35:30,400 --> 00:35:32,000
this question of do we actually have any

994
00:35:32,000 --> 00:35:35,200
unlucky users and the answer is yes so

995
00:35:35,200 --> 00:35:36,400
there may be

996
00:35:36,400 --> 00:35:38,800
unlucky users in the optimal signaling

997
00:35:38,800 --> 00:35:40,560
strategy

998
00:35:40,560 --> 00:35:41,280
so

999
00:35:41,280 --> 00:35:44,400
sometimes there are unlucky users and uh

1000
00:35:44,400 --> 00:35:47,520
right this may be uh maybe uh an ethical

1001
00:35:47,520 --> 00:35:50,320
concern right uh because we do have you

1002
00:35:50,320 --> 00:35:51,440
know while we're

1003
00:35:51,440 --> 00:35:53,200
on a net we're reducing the percentage

1004
00:35:53,200 --> 00:35:55,200
of cracked passwords there are some

1005
00:35:55,200 --> 00:35:57,280
users whose passwords are being cracked

1006
00:35:57,280 --> 00:36:00,480
because of uh information signaling

1007
00:36:00,480 --> 00:36:01,359
uh

1008
00:36:01,359 --> 00:36:03,200
so uh

1009
00:36:03,200 --> 00:36:06,480
right there's a couple um uh you know a

1010
00:36:06,480 --> 00:36:08,640
couple proposals one could consider

1011
00:36:08,640 --> 00:36:10,320
one proposal would be just to make

1012
00:36:10,320 --> 00:36:12,160
adoption of information signaling

1013
00:36:12,160 --> 00:36:14,079
voluntary so we could allow

1014
00:36:14,079 --> 00:36:16,079
users to opt-in

1015
00:36:16,079 --> 00:36:17,599
opt-in to information signaling or

1016
00:36:17,599 --> 00:36:20,160
opt-out of information signaling

1017
00:36:20,160 --> 00:36:22,320
so that would be one potential solution

1018
00:36:22,320 --> 00:36:24,240
of course if we allowed users to opt in

1019
00:36:24,240 --> 00:36:26,079
or out after observing their signals and

1020
00:36:26,079 --> 00:36:27,200
that

1021
00:36:27,200 --> 00:36:28,160
um

1022
00:36:28,160 --> 00:36:30,480
that that might introduce another uh

1023
00:36:30,480 --> 00:36:32,320
source of bias now the attacker might be

1024
00:36:32,320 --> 00:36:33,280
able to

1025
00:36:33,280 --> 00:36:36,000
run uh you know a bayesian update just

1026
00:36:36,000 --> 00:36:37,760
based on the decision of whether or not

1027
00:36:37,760 --> 00:36:41,119
the user opted in or out um

1028
00:36:41,119 --> 00:36:43,839
so in this case

1029
00:36:43,839 --> 00:36:45,839
opt-in opt-out would have decisions

1030
00:36:45,839 --> 00:36:47,599
would need to be made without actually

1031
00:36:47,599 --> 00:36:48,880
observing the

1032
00:36:48,880 --> 00:36:50,960
actual signal

1033
00:36:50,960 --> 00:36:52,720
another potential approach would be to

1034
00:36:52,720 --> 00:36:55,520
modify the optimization function or the

1035
00:36:55,520 --> 00:36:57,200
objective function that the

1036
00:36:57,200 --> 00:36:59,119
uh defender is trying to optimize to

1037
00:36:59,119 --> 00:37:01,359
penalize uh solutions with uh with

1038
00:37:01,359 --> 00:37:02,880
unlucky users

1039
00:37:02,880 --> 00:37:05,200
uh so we haven't uh we haven't tried

1040
00:37:05,200 --> 00:37:08,879
this but that might be one way to

1041
00:37:09,040 --> 00:37:12,310
use information signaling without

1042
00:37:12,310 --> 00:37:13,920
[Music]

1043
00:37:13,920 --> 00:37:16,640
without having unlucky users

1044
00:37:16,640 --> 00:37:18,800
so ideally we'd only have lucky users

1045
00:37:18,800 --> 00:37:22,960
and no no unlucky users

1046
00:37:22,960 --> 00:37:25,200
all right so in conclusion uh we

1047
00:37:25,200 --> 00:37:27,520
introduced password strength signaling

1048
00:37:27,520 --> 00:37:29,520
uh the basic idea is to use bayesian

1049
00:37:29,520 --> 00:37:31,040
persuasion to convince a rational

1050
00:37:31,040 --> 00:37:34,079
attacker to crack fewer passwords

1051
00:37:34,079 --> 00:37:37,760
and as we saw um it uh in practice it

1052
00:37:37,760 --> 00:37:39,040
can actually reduce the fraction of

1053
00:37:39,040 --> 00:37:40,720
passwords that would be cracked in an

1054
00:37:40,720 --> 00:37:43,520
untargeted offline attack or even in an

1055
00:37:43,520 --> 00:37:45,359
online attack

1056
00:37:45,359 --> 00:37:47,599
uh password strength signaling is

1057
00:37:47,599 --> 00:37:49,040
actually very easy to integrate with

1058
00:37:49,040 --> 00:37:51,280
current authentication procedures

1059
00:37:51,280 --> 00:37:53,119
in fact it doesn't require any change

1060
00:37:53,119 --> 00:37:56,079
the password hashing algorithm

1061
00:37:56,079 --> 00:37:58,000
so these are all positives

1062
00:37:58,000 --> 00:38:00,720
but of course there are still important

1063
00:38:00,720 --> 00:38:03,520
ethical and societal questions which we

1064
00:38:03,520 --> 00:38:05,680
think would need to be addressed before

1065
00:38:05,680 --> 00:38:08,160
we would want to see

1066
00:38:08,160 --> 00:38:10,480
password strength signaling adopted

1067
00:38:10,480 --> 00:38:12,320
so for for the time being we just see

1068
00:38:12,320 --> 00:38:15,119
this as a proof of concept idea

1069
00:38:15,119 --> 00:38:16,400
hopefully

1070
00:38:16,400 --> 00:38:18,640
future work uh we'll explore these uh

1071
00:38:18,640 --> 00:38:20,400
you know ethical and societal questions

1072
00:38:20,400 --> 00:38:22,480
and uh perhaps in the future we can

1073
00:38:22,480 --> 00:38:24,079
actually start using information

1074
00:38:24,079 --> 00:38:26,640
signaling uh to reduce the

1075
00:38:26,640 --> 00:38:28,560
uh the percentage of passwords that a

1076
00:38:28,560 --> 00:38:30,960
rational attacker will crack

1077
00:38:30,960 --> 00:38:32,720
all right uh so

1078
00:38:32,720 --> 00:38:34,480
that's all i wanted to say uh thanks

1079
00:38:34,480 --> 00:38:36,400
everyone for listening and uh i'll stick

1080
00:38:36,400 --> 00:38:38,320
around for a little bit to answer any

1081
00:38:38,320 --> 00:38:40,720
questions

1082
00:38:43,040 --> 00:38:44,960
hey jeremiah thanks a lot uh looks like

1083
00:38:44,960 --> 00:38:47,680
we have a question in the chat um

1084
00:38:47,680 --> 00:38:50,560
i'm gonna read it off here

1085
00:38:50,560 --> 00:38:52,800
is there an implicit assumption that

1086
00:38:52,800 --> 00:38:56,400
users are using bad passwords i.e ones

1087
00:38:56,400 --> 00:38:58,400
that appear in dictionaries and breach

1088
00:38:58,400 --> 00:39:01,119
lists as opposed to large randomly

1089
00:39:01,119 --> 00:39:03,040
generated passwords from a password

1090
00:39:03,040 --> 00:39:04,880
manager

1091
00:39:04,880 --> 00:39:06,640
okay so um that's a that's a great

1092
00:39:06,640 --> 00:39:08,560
question uh so no there's not an

1093
00:39:08,560 --> 00:39:10,320
implicit assumption that

1094
00:39:10,320 --> 00:39:13,359
the user is picking weak passwords

1095
00:39:13,359 --> 00:39:15,040
information signaling is an idea that

1096
00:39:15,040 --> 00:39:17,280
could be applied uh you know for any

1097
00:39:17,280 --> 00:39:19,040
password distribution uh so we're not

1098
00:39:19,040 --> 00:39:20,720
making any particular assumptions about

1099
00:39:20,720 --> 00:39:23,040
the the password distribution

1100
00:39:23,040 --> 00:39:25,680
however i will say that uh in practice

1101
00:39:25,680 --> 00:39:27,920
whenever we see a password disk you know

1102
00:39:27,920 --> 00:39:30,320
a breach password data set we see an

1103
00:39:30,320 --> 00:39:32,240
awful lot of weak passwords in that data

1104
00:39:32,240 --> 00:39:35,520
set uh so for example uh when rocky was

1105
00:39:35,520 --> 00:39:36,480
breached

1106
00:39:36,480 --> 00:39:39,359
uh there's 32.6 million user accounts

1107
00:39:39,359 --> 00:39:41,520
represented in that data set

1108
00:39:41,520 --> 00:39:43,440
and nearly one percent of those users

1109
00:39:43,440 --> 00:39:44,880
picked one two three four five six as

1110
00:39:44,880 --> 00:39:46,320
their password

1111
00:39:46,320 --> 00:39:47,200
um

1112
00:39:47,200 --> 00:39:50,640
so um yes uh you could use password

1113
00:39:50,640 --> 00:39:52,400
strength signaling uh even if the

1114
00:39:52,400 --> 00:39:55,440
distribution is stronger

1115
00:39:55,440 --> 00:39:56,960
but

1116
00:39:56,960 --> 00:39:59,520
in practice the distribution is

1117
00:39:59,520 --> 00:40:00,800
oftentimes

1118
00:40:00,800 --> 00:40:04,760
oftentimes somewhat weak

1119
00:40:11,520 --> 00:40:13,599
great um looks like we have a

1120
00:40:13,599 --> 00:40:15,280
follow-up question our

1121
00:40:15,280 --> 00:40:17,680
comment just that the rock you

1122
00:40:17,680 --> 00:40:20,240
uh list i guess has some pretty awful

1123
00:40:20,240 --> 00:40:21,920
passwords in it

1124
00:40:21,920 --> 00:40:23,040
yeah

1125
00:40:23,040 --> 00:40:24,560
yeah so i mean there's a there's a

1126
00:40:24,560 --> 00:40:27,760
separate line of research uh exploring

1127
00:40:27,760 --> 00:40:29,839
you know can we encourage or nudge

1128
00:40:29,839 --> 00:40:32,079
people to pick stronger

1129
00:40:32,079 --> 00:40:35,119
uh stronger passwords um

1130
00:40:35,119 --> 00:40:36,240
but uh

1131
00:40:36,240 --> 00:40:38,400
you know what we find is that uh

1132
00:40:38,400 --> 00:40:40,400
oftentimes when you require people to

1133
00:40:40,400 --> 00:40:43,040
pick uh stronger you know to add numbers

1134
00:40:43,040 --> 00:40:45,040
or special symbols to their passwords

1135
00:40:45,040 --> 00:40:47,359
oftentimes these policies can be even be

1136
00:40:47,359 --> 00:40:50,000
counterproductive and sometimes people

1137
00:40:50,000 --> 00:40:51,440
respond to these passwords in

1138
00:40:51,440 --> 00:40:53,440
predictable ways and the resulting

1139
00:40:53,440 --> 00:40:55,359
password distribution is oftentimes not

1140
00:40:55,359 --> 00:40:57,359
any stronger than it was uh in the first

1141
00:40:57,359 --> 00:40:58,319
place

1142
00:40:58,319 --> 00:40:59,280
um

1143
00:40:59,280 --> 00:41:02,000
so yes uh encouraging people to pick

1144
00:41:02,000 --> 00:41:05,040
stronger passwords is certainly a very

1145
00:41:05,040 --> 00:41:07,440
interesting and important research

1146
00:41:07,440 --> 00:41:08,880
area but

1147
00:41:08,880 --> 00:41:10,880
one of the strengths of password

1148
00:41:10,880 --> 00:41:12,240
strength signaling

1149
00:41:12,240 --> 00:41:14,720
is that you can deploy it

1150
00:41:14,720 --> 00:41:16,640
without requiring users to change the

1151
00:41:16,640 --> 00:41:18,560
way in which they pick passwords right

1152
00:41:18,560 --> 00:41:20,720
it's compatible with uh

1153
00:41:20,720 --> 00:41:22,400
you know whatever whatever people are

1154
00:41:22,400 --> 00:41:24,319
doing to pick uh pick their passwords

1155
00:41:24,319 --> 00:41:26,079
it's compatible with uh

1156
00:41:26,079 --> 00:41:27,280
uh with what they're doing whether

1157
00:41:27,280 --> 00:41:28,880
that's uh you know picking good

1158
00:41:28,880 --> 00:41:30,960
passwords or bad passwords or

1159
00:41:30,960 --> 00:41:32,960
as is usually the case a mix of you know

1160
00:41:32,960 --> 00:41:34,800
some users picking good passwords and

1161
00:41:34,800 --> 00:41:37,119
some users picking strong paths or weak

1162
00:41:37,119 --> 00:41:39,680
passwords

1163
00:41:41,760 --> 00:41:43,680
if anybody uh has any questions go ahead

1164
00:41:43,680 --> 00:41:48,040
and post them in the q a

1165
00:41:54,560 --> 00:41:55,839
okay it looks like we got another one

1166
00:41:55,839 --> 00:41:58,560
here um

1167
00:41:58,560 --> 00:42:02,599
it's a multi-part question

1168
00:42:03,040 --> 00:42:05,520
so from the previous concrete small

1169
00:42:05,520 --> 00:42:08,319
example it feels that we are lowering

1170
00:42:08,319 --> 00:42:09,920
the cost of weak passwords for the

1171
00:42:09,920 --> 00:42:12,880
attacker which increases the cost of the

1172
00:42:12,880 --> 00:42:15,359
remaining stronger passwords

1173
00:42:15,359 --> 00:42:17,839
and try to make the attacker only attack

1174
00:42:17,839 --> 00:42:19,760
the weaker passwords is the average

1175
00:42:19,760 --> 00:42:22,480
server is that observation correct

1176
00:42:22,480 --> 00:42:24,720
if this is the case do we have the

1177
00:42:24,720 --> 00:42:27,359
observation that the unlucky users are

1178
00:42:27,359 --> 00:42:30,560
mostly users with weak passwords and if

1179
00:42:30,560 --> 00:42:33,359
so can this solve the ethical problem

1180
00:42:33,359 --> 00:42:35,920
since we are also indirectly encouraging

1181
00:42:35,920 --> 00:42:39,200
users to pick stronger passwords

1182
00:42:39,200 --> 00:42:41,280
yeah no that's a that's a great question

1183
00:42:41,280 --> 00:42:42,079
um

1184
00:42:42,079 --> 00:42:43,040
so

1185
00:42:43,040 --> 00:42:45,119
i guess uh yeah there's multiple parts

1186
00:42:45,119 --> 00:42:47,200
i'll try to kind of address it uh

1187
00:42:47,200 --> 00:42:48,960
address it point by point

1188
00:42:48,960 --> 00:42:49,760
um

1189
00:42:49,760 --> 00:42:53,200
so i guess uh um the first observation

1190
00:42:53,200 --> 00:42:54,720
is that uh

1191
00:42:54,720 --> 00:42:57,200
um the attacker actually does benefit

1192
00:42:57,200 --> 00:42:58,640
from this signal

1193
00:42:58,640 --> 00:42:59,520
right

1194
00:42:59,520 --> 00:43:00,720
that doesn't mean that the attacker

1195
00:43:00,720 --> 00:43:02,480
cracks more passwords

1196
00:43:02,480 --> 00:43:04,240
but the attacker's profit is actually

1197
00:43:04,240 --> 00:43:08,000
larger because they observe this signal

1198
00:43:08,319 --> 00:43:09,200
now

1199
00:43:09,200 --> 00:43:10,960
in this case

1200
00:43:10,960 --> 00:43:12,640
when the attacker observes the signal

1201
00:43:12,640 --> 00:43:13,599
zero

1202
00:43:13,599 --> 00:43:16,560
uh they crack the password pw1 right and

1203
00:43:16,560 --> 00:43:17,599
they

1204
00:43:17,599 --> 00:43:19,119
only have to check one guess they just

1205
00:43:19,119 --> 00:43:21,280
know that password immediately

1206
00:43:21,280 --> 00:43:24,079
uh when the attacker sees signal one uh

1207
00:43:24,079 --> 00:43:26,240
then they're going to give up so in this

1208
00:43:26,240 --> 00:43:28,000
case the attackers dramatically reduce

1209
00:43:28,000 --> 00:43:29,520
their guessing costs

1210
00:43:29,520 --> 00:43:32,640
their expected profit is higher

1211
00:43:32,640 --> 00:43:34,720
uh but they're actually cracking fewer

1212
00:43:34,720 --> 00:43:37,040
passwords than they were before

1213
00:43:37,040 --> 00:43:39,760
um so actually in this example there are

1214
00:43:39,760 --> 00:43:42,400
no unlucky users right because recall

1215
00:43:42,400 --> 00:43:44,880
that before we started signaling

1216
00:43:44,880 --> 00:43:46,560
uh the rational attacker was going to

1217
00:43:46,560 --> 00:43:49,599
crack a hundred percent of passwords

1218
00:43:49,599 --> 00:43:52,839
right so an unlucky user is a user whose

1219
00:43:52,839 --> 00:43:55,280
password was not tracked before

1220
00:43:55,280 --> 00:43:57,359
signaling whose password is cracked

1221
00:43:57,359 --> 00:43:58,880
after signaling

1222
00:43:58,880 --> 00:44:00,800
right so in this case there are no

1223
00:44:00,800 --> 00:44:02,560
unlucky users because everyone's

1224
00:44:02,560 --> 00:44:05,200
password was cracked before uh

1225
00:44:05,200 --> 00:44:06,720
before the password was signaled no

1226
00:44:06,720 --> 00:44:09,839
one's password is cracked after

1227
00:44:09,839 --> 00:44:13,119
after the password is signaled

1228
00:44:13,280 --> 00:44:14,640
so

1229
00:44:14,640 --> 00:44:17,200
okay i guess

1230
00:44:17,520 --> 00:44:19,839
the question is

1231
00:44:19,839 --> 00:44:21,520
is it the case that unlucky users are

1232
00:44:21,520 --> 00:44:23,760
mostly users with weak passwords um

1233
00:44:23,760 --> 00:44:25,359
actually uh

1234
00:44:25,359 --> 00:44:27,520
um actually that's not necessarily the

1235
00:44:27,520 --> 00:44:29,119
case um

1236
00:44:29,119 --> 00:44:31,760
actually users with weak passwords

1237
00:44:31,760 --> 00:44:33,359
will often times

1238
00:44:33,359 --> 00:44:35,680
sometimes get lucky right because if

1239
00:44:35,680 --> 00:44:38,160
they had their if their password is weak

1240
00:44:38,160 --> 00:44:39,599
almost certainly the attacker was going

1241
00:44:39,599 --> 00:44:42,000
to crack that password before we did any

1242
00:44:42,000 --> 00:44:43,200
signaling

1243
00:44:43,200 --> 00:44:46,000
right uh now after signaling there might

1244
00:44:46,000 --> 00:44:47,839
be a they might get lucky and get a

1245
00:44:47,839 --> 00:44:50,160
signal that the password is strong uh

1246
00:44:50,160 --> 00:44:51,920
even though the password's actually weak

1247
00:44:51,920 --> 00:44:53,200
and in this case

1248
00:44:53,200 --> 00:44:54,720
you know they might get lucky and the

1249
00:44:54,720 --> 00:44:58,160
attacker overlooks their password

1250
00:44:58,160 --> 00:45:01,760
so yes it's possible that unlucky users

1251
00:45:01,760 --> 00:45:05,119
unlucky users uh their passwords may be

1252
00:45:05,119 --> 00:45:07,920
uh maybe weak but uh most likely if

1253
00:45:07,920 --> 00:45:09,760
you're unlucky that means your password

1254
00:45:09,760 --> 00:45:12,800
was uh was moderate to strong

1255
00:45:12,800 --> 00:45:14,880
uh right and uh

1256
00:45:14,880 --> 00:45:16,079
um

1257
00:45:16,079 --> 00:45:18,240
right it may just be that after bayesian

1258
00:45:18,240 --> 00:45:21,200
update uh that the attacker is going to

1259
00:45:21,200 --> 00:45:23,119
going to crack your password

1260
00:45:23,119 --> 00:45:23,920
um

1261
00:45:23,920 --> 00:45:26,640
and so to be unlucky

1262
00:45:26,640 --> 00:45:28,480
um your password at least has to be

1263
00:45:28,480 --> 00:45:31,119
strong enough to resist the cracker the

1264
00:45:31,119 --> 00:45:33,119
password cracker before

1265
00:45:33,119 --> 00:45:35,760
um before we did any signaling

1266
00:45:35,760 --> 00:45:36,640
um

1267
00:45:36,640 --> 00:45:39,359
okay and then there's the question about

1268
00:45:39,359 --> 00:45:40,960
can we solve the ethical problem since

1269
00:45:40,960 --> 00:45:42,960
we're indirectly encouraging

1270
00:45:42,960 --> 00:45:45,280
users to pick stronger passwords

1271
00:45:45,280 --> 00:45:46,560
um

1272
00:45:46,560 --> 00:45:49,200
i mean that that would be uh you know

1273
00:45:49,200 --> 00:45:53,359
one potential solution is just to

1274
00:45:53,520 --> 00:45:56,400
design the signaling uh method in which

1275
00:45:56,400 --> 00:45:59,839
uh you know weak password week passwords

1276
00:45:59,839 --> 00:46:02,240
are always going to get

1277
00:46:02,240 --> 00:46:03,920
advantageous signals with lower

1278
00:46:03,920 --> 00:46:06,720
probability than stronger passwords

1279
00:46:06,720 --> 00:46:08,960
but that may be one way to uh to address

1280
00:46:08,960 --> 00:46:10,079
it say

1281
00:46:10,079 --> 00:46:11,119
um

1282
00:46:11,119 --> 00:46:13,119
you know certainly in this example uh

1283
00:46:13,119 --> 00:46:14,800
that is the case

1284
00:46:14,800 --> 00:46:16,720
right if your password's not the weakest

1285
00:46:16,720 --> 00:46:18,160
password you're always going to get the

1286
00:46:18,160 --> 00:46:19,359
signal one

1287
00:46:19,359 --> 00:46:21,119
if your password is the weakest password

1288
00:46:21,119 --> 00:46:22,079
then

1289
00:46:22,079 --> 00:46:23,520
sometimes you're going to get single one

1290
00:46:23,520 --> 00:46:25,839
sometimes you're gonna get signal zero

1291
00:46:25,839 --> 00:46:26,640
um

1292
00:46:26,640 --> 00:46:29,119
so yeah that would be one way to try to

1293
00:46:29,119 --> 00:46:32,560
solve it another way would uh

1294
00:46:32,560 --> 00:46:33,359
so

1295
00:46:33,359 --> 00:46:36,640
um jumping ahead

1296
00:46:39,760 --> 00:46:41,359
yeah here the defender's goal is

1297
00:46:41,359 --> 00:46:43,359
basically to find a signaling matrix

1298
00:46:43,359 --> 00:46:44,960
which minimizes

1299
00:46:44,960 --> 00:46:46,960
the objective function here the

1300
00:46:46,960 --> 00:46:49,599
objective function is simply uh you know

1301
00:46:49,599 --> 00:46:51,440
the percentage of passwords that a

1302
00:46:51,440 --> 00:46:54,160
rational attacker would crack

1303
00:46:54,160 --> 00:46:55,280
but i could

1304
00:46:55,280 --> 00:46:57,599
modify this objective function to

1305
00:46:57,599 --> 00:47:00,560
inherently penalize solutions uh in

1306
00:47:00,560 --> 00:47:01,839
which there are

1307
00:47:01,839 --> 00:47:04,720
a large number of unlucky users

1308
00:47:04,720 --> 00:47:06,160
right so i could say not only do i want

1309
00:47:06,160 --> 00:47:08,000
to minimize the percentage of passwords

1310
00:47:08,000 --> 00:47:09,440
that are correct but there's going to

1311
00:47:09,440 --> 00:47:11,520
also be some penalty that i pay if

1312
00:47:11,520 --> 00:47:13,760
there's unlucky users

1313
00:47:13,760 --> 00:47:14,880
and uh

1314
00:47:14,880 --> 00:47:17,200
that would when we're solving the

1315
00:47:17,200 --> 00:47:19,440
optimization problem that would steer us

1316
00:47:19,440 --> 00:47:22,160
towards signaling matrix matrices which

1317
00:47:22,160 --> 00:47:26,640
have zero or few unlucky users

1318
00:47:27,760 --> 00:47:28,960
okay

1319
00:47:28,960 --> 00:47:30,810
um yeah all right

1320
00:47:30,810 --> 00:47:32,559
[Music]

1321
00:47:32,559 --> 00:47:36,040
any other questions

1322
00:47:45,760 --> 00:47:47,359
okay i don't see any other questions

1323
00:47:47,359 --> 00:47:50,160
here but jeremiah thanks a lot

1324
00:47:50,160 --> 00:47:52,160
thanks again i really appreciate it all

1325
00:47:52,160 --> 00:47:53,599
right well yeah thanks everyone for

1326
00:47:53,599 --> 00:47:56,160
listening uh all right thanks a lot take

1327
00:47:56,160 --> 00:47:57,280
care

1328
00:47:57,280 --> 00:48:00,280
bye

1329
00:48:07,599 --> 00:48:09,680
you

