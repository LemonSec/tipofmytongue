1
00:00:00,480 --> 00:00:03,040
all right i think it's time to start

2
00:00:03,040 --> 00:00:05,839
we have two really fun participants and

3
00:00:05,839 --> 00:00:06,799
i believe that

4
00:00:06,799 --> 00:00:09,760
uh some other participants will join us

5
00:00:09,760 --> 00:00:12,320
very soon

6
00:00:12,960 --> 00:00:16,160
okay so hi everyone uh welcome to

7
00:00:16,160 --> 00:00:19,119
another series security seminar today

8
00:00:19,119 --> 00:00:22,880
so today's speaker is levi lloyd

9
00:00:22,880 --> 00:00:25,760
uh levi thank you so much for joining us

10
00:00:25,760 --> 00:00:26,320
it's really

11
00:00:26,320 --> 00:00:28,080
nice to see you and i'm looking forward

12
00:00:28,080 --> 00:00:29,599
to to be honest with to your

13
00:00:29,599 --> 00:00:31,439
presentation today

14
00:00:31,439 --> 00:00:33,760
so i would like to briefly introduce uh

15
00:00:33,760 --> 00:00:35,120
levi

16
00:00:35,120 --> 00:00:38,640
um so leeway lloyd is a cyber security

17
00:00:38,640 --> 00:00:40,640
researcher at lawrence

18
00:00:40,640 --> 00:00:43,200
limour national laboratory where he

19
00:00:43,200 --> 00:00:44,000
works in the

20
00:00:44,000 --> 00:00:46,879
cyber and infrastructure resilience

21
00:00:46,879 --> 00:00:48,879
program

22
00:00:48,879 --> 00:00:52,000
his interests include software assurance

23
00:00:52,000 --> 00:00:55,120
binary analysis reverse engineering

24
00:00:55,120 --> 00:00:57,360
malware analysis and network traffic

25
00:00:57,360 --> 00:00:59,680
analysis and defense

26
00:00:59,680 --> 00:01:01,840
he has been involved in the creation of

27
00:01:01,840 --> 00:01:03,039
several frameworks

28
00:01:03,039 --> 00:01:05,280
aimed at doing cyber security analysis

29
00:01:05,280 --> 00:01:07,119
at scale

30
00:01:07,119 --> 00:01:09,920
um so today his talk will be on securing

31
00:01:09,920 --> 00:01:10,799
this software

32
00:01:10,799 --> 00:01:13,840
supply chain

33
00:01:14,400 --> 00:01:16,720
all right well thank you i appreciate

34
00:01:16,720 --> 00:01:18,400
that introduction it's great to be here

35
00:01:18,400 --> 00:01:19,520
with you all

36
00:01:19,520 --> 00:01:22,000
today um you know when i when i first

37
00:01:22,000 --> 00:01:23,200
got the invitation

38
00:01:23,200 --> 00:01:26,320
uh to give this seminar maybe six months

39
00:01:26,320 --> 00:01:27,920
ago or so i was envisioning myself

40
00:01:27,920 --> 00:01:29,119
coming to

41
00:01:29,119 --> 00:01:31,600
to purdue and being there with you in

42
00:01:31,600 --> 00:01:32,640
person

43
00:01:32,640 --> 00:01:36,240
um which as we know the the pandemic has

44
00:01:36,240 --> 00:01:37,600
made it so that we can't do that as much

45
00:01:37,600 --> 00:01:40,479
anymore but um i was looking at the

46
00:01:40,479 --> 00:01:42,159
weather report today for

47
00:01:42,159 --> 00:01:44,479
lafayette and um i'm actually kind of

48
00:01:44,479 --> 00:01:46,079
glad i'm i'm still here in sunny

49
00:01:46,079 --> 00:01:47,119
california

50
00:01:47,119 --> 00:01:49,759
i'll let you guys uh endure the the cold

51
00:01:49,759 --> 00:01:50,960
weather

52
00:01:50,960 --> 00:01:53,119
but uh still very happy to be here and

53
00:01:53,119 --> 00:01:54,320
hopefully someday i'll get a chance to

54
00:01:54,320 --> 00:01:56,640
visit purdue campus

55
00:01:56,640 --> 00:01:58,880
so um as was as was said i'm going to

56
00:01:58,880 --> 00:02:00,399
talk to you today about securing the

57
00:02:00,399 --> 00:02:01,920
software supply chain

58
00:02:01,920 --> 00:02:03,520
and i'll talk about some of the software

59
00:02:03,520 --> 00:02:04,799
assurance solutions that we've been

60
00:02:04,799 --> 00:02:07,280
developing here at lawrence livermore

61
00:02:07,280 --> 00:02:10,399
so to start with um i just want to give

62
00:02:10,399 --> 00:02:12,000
a little bit of background

63
00:02:12,000 --> 00:02:15,120
and information about my organization so

64
00:02:15,120 --> 00:02:16,959
lawrence livermore national laboratory

65
00:02:16,959 --> 00:02:19,360
is one of 17 department of energy

66
00:02:19,360 --> 00:02:20,800
national laboratories

67
00:02:20,800 --> 00:02:23,920
throughout the country and um

68
00:02:23,920 --> 00:02:26,720
it's located kind of on the outskirts of

69
00:02:26,720 --> 00:02:27,280
the

70
00:02:27,280 --> 00:02:30,560
san francisco bay area in california

71
00:02:30,560 --> 00:02:32,959
it was established in the 50s you know

72
00:02:32,959 --> 00:02:34,959
at the beginning of the cold war

73
00:02:34,959 --> 00:02:38,080
and was instrumental

74
00:02:38,080 --> 00:02:40,640
in in developing capabilities that

75
00:02:40,640 --> 00:02:41,200
helped us

76
00:02:41,200 --> 00:02:45,040
emerge from the cold war you can see

77
00:02:45,040 --> 00:02:47,280
on this slide here some other details

78
00:02:47,280 --> 00:02:49,440
which i'll just let you read

79
00:02:49,440 --> 00:02:51,200
but i want to i want to bring up our

80
00:02:51,200 --> 00:02:52,879
mission because i think it's really

81
00:02:52,879 --> 00:02:53,599
important

82
00:02:53,599 --> 00:02:55,280
and helps to kind of set the stage for

83
00:02:55,280 --> 00:02:57,200
what i'll be talking about today

84
00:02:57,200 --> 00:02:59,120
and the mission of the laboratory is to

85
00:02:59,120 --> 00:03:00,959
strengthen our national security through

86
00:03:00,959 --> 00:03:02,239
world-class science

87
00:03:02,239 --> 00:03:05,280
technology and engineering and

88
00:03:05,280 --> 00:03:06,560
if you think about you know where the

89
00:03:06,560 --> 00:03:08,400
world was in the 50s it was a very

90
00:03:08,400 --> 00:03:09,760
different place

91
00:03:09,760 --> 00:03:12,239
it was during the cold war and you know

92
00:03:12,239 --> 00:03:13,760
there was there was a need

93
00:03:13,760 --> 00:03:17,519
to develop this this nuclear deterrence

94
00:03:17,519 --> 00:03:20,720
and essentially you know protect our

95
00:03:20,720 --> 00:03:21,280
nation

96
00:03:21,280 --> 00:03:23,440
uh through those means but over time

97
00:03:23,440 --> 00:03:24,480
things have evolved

98
00:03:24,480 --> 00:03:27,200
and there are you know lots of different

99
00:03:27,200 --> 00:03:29,599
threats now to our national security

100
00:03:29,599 --> 00:03:31,200
and because of that lawrence livermore

101
00:03:31,200 --> 00:03:33,680
has kind of emerged and developed into

102
00:03:33,680 --> 00:03:37,040
a multi-program laboratory and

103
00:03:37,040 --> 00:03:38,799
we're a multi-disciplinary multi-program

104
00:03:38,799 --> 00:03:40,159
laboratory

105
00:03:40,159 --> 00:03:42,239
and so over here on the side you can see

106
00:03:42,239 --> 00:03:45,120
you know some of the the disciplines

107
00:03:45,120 --> 00:03:47,280
that you know for the the scientists and

108
00:03:47,280 --> 00:03:49,599
engineers that come to the lab

109
00:03:49,599 --> 00:03:53,040
we're known for our computing so

110
00:03:53,040 --> 00:03:54,799
high performance computing is a big part

111
00:03:54,799 --> 00:03:56,640
of what we do at lawrence livermore

112
00:03:56,640 --> 00:03:58,879
in fact the the photo you can see behind

113
00:03:58,879 --> 00:04:00,159
me in the virtual background here

114
00:04:00,159 --> 00:04:03,200
is uh one of our super computers uh

115
00:04:03,200 --> 00:04:05,680
sierra that is currently the third

116
00:04:05,680 --> 00:04:07,599
fastest supercomputer in the world

117
00:04:07,599 --> 00:04:11,280
at 125 teraflops so um

118
00:04:11,280 --> 00:04:13,040
pretty big scale high performance

119
00:04:13,040 --> 00:04:14,959
computing and something that we're all

120
00:04:14,959 --> 00:04:17,199
proud of here

121
00:04:17,199 --> 00:04:18,720
as was mentioned i work in the area of

122
00:04:18,720 --> 00:04:21,199
cyber security and so

123
00:04:21,199 --> 00:04:23,759
my particular area is focused uh kind of

124
00:04:23,759 --> 00:04:24,400
has

125
00:04:24,400 --> 00:04:26,479
kind of a dual nature so we're

126
00:04:26,479 --> 00:04:27,680
interested in

127
00:04:27,680 --> 00:04:30,800
making sure that our energy sources are

128
00:04:30,800 --> 00:04:33,440
you know renewable and not influenced by

129
00:04:33,440 --> 00:04:34,960
foreign powers

130
00:04:34,960 --> 00:04:36,400
and then also we want to make sure that

131
00:04:36,400 --> 00:04:38,479
the the infrastructure that

132
00:04:38,479 --> 00:04:42,080
provides our energy is free from

133
00:04:42,080 --> 00:04:44,080
vulnerabilities and is resilient to

134
00:04:44,080 --> 00:04:46,000
cyber attack

135
00:04:46,000 --> 00:04:47,360
so that is the cyber infrastructure

136
00:04:47,360 --> 00:04:50,880
resilience program that i work with

137
00:04:51,040 --> 00:04:54,080
so let's talk about software you know

138
00:04:54,080 --> 00:04:55,680
software is all around us

139
00:04:55,680 --> 00:04:58,080
we all use it all the time and quite

140
00:04:58,080 --> 00:04:59,600
often we don't even think about

141
00:04:59,600 --> 00:05:02,240
the software that we're using it tends

142
00:05:02,240 --> 00:05:03,680
to fade into the background

143
00:05:03,680 --> 00:05:06,639
unless you are a computer scientist or

144
00:05:06,639 --> 00:05:08,320
somebody that develops code

145
00:05:08,320 --> 00:05:11,919
but we all use it and it it's really

146
00:05:11,919 --> 00:05:12,639
kind of a

147
00:05:12,639 --> 00:05:15,919
a key part of our modern lives

148
00:05:15,919 --> 00:05:18,160
and so if you think about um some of

149
00:05:18,160 --> 00:05:19,440
these things that we interact with on a

150
00:05:19,440 --> 00:05:20,560
daily basis

151
00:05:20,560 --> 00:05:23,440
um sometimes we don't we don't realize

152
00:05:23,440 --> 00:05:24,880
how much code is actually running in

153
00:05:24,880 --> 00:05:25,919
these

154
00:05:25,919 --> 00:05:27,840
so let's let's play a little game here

155
00:05:27,840 --> 00:05:29,600
and if this was in person i would do it

156
00:05:29,600 --> 00:05:30,639
interactive but

157
00:05:30,639 --> 00:05:32,240
we'll just pretend like you're you're

158
00:05:32,240 --> 00:05:34,400
answering um

159
00:05:34,400 --> 00:05:36,479
so how many lines of code do you think

160
00:05:36,479 --> 00:05:40,560
are running on a boeing 747

161
00:05:41,280 --> 00:05:42,479
so there's actually six and a half

162
00:05:42,479 --> 00:05:45,199
million lines of code there

163
00:05:45,199 --> 00:05:48,560
and we all have smartphones we

164
00:05:48,560 --> 00:05:51,919
love them we use them all the time so i

165
00:05:51,919 --> 00:05:53,120
think these numbers may be a little

166
00:05:53,120 --> 00:05:55,759
dated but the android operating system

167
00:05:55,759 --> 00:05:58,800
is running about 15 million lines of

168
00:05:58,800 --> 00:06:01,120
code

169
00:06:01,440 --> 00:06:03,919
another example healthcare.gov you may

170
00:06:03,919 --> 00:06:06,080
remember this came out several years ago

171
00:06:06,080 --> 00:06:08,319
and it's kind of this portal for

172
00:06:08,319 --> 00:06:10,080
allowing americans to find

173
00:06:10,080 --> 00:06:12,240
health care coverage and it was a big

174
00:06:12,240 --> 00:06:13,840
deal when it came out because there were

175
00:06:13,840 --> 00:06:15,120
lots of problems

176
00:06:15,120 --> 00:06:18,000
so it's actually 500 million lines of

177
00:06:18,000 --> 00:06:18,479
code

178
00:06:18,479 --> 00:06:21,520
to run that thing and when

179
00:06:21,520 --> 00:06:23,280
when they had all those problems on the

180
00:06:23,280 --> 00:06:25,919
initial release they had to patch it

181
00:06:25,919 --> 00:06:27,360
and it required another 100 million

182
00:06:27,360 --> 00:06:30,720
lines of code to do that

183
00:06:30,720 --> 00:06:33,280
so the car down here this audi i'm not

184
00:06:33,280 --> 00:06:34,000
sure which model

185
00:06:34,000 --> 00:06:37,120
but pretty fancy car it's running 100

186
00:06:37,120 --> 00:06:38,240
million different

187
00:06:38,240 --> 00:06:43,199
lines of code in that automobile

188
00:06:43,199 --> 00:06:44,639
and then down in the center we have the

189
00:06:44,639 --> 00:06:46,400
mars curiosity rover which

190
00:06:46,400 --> 00:06:48,639
only takes 5 million lines of code so it

191
00:06:48,639 --> 00:06:50,080
just tells you it's easier to drive on

192
00:06:50,080 --> 00:06:52,560
mars than it is to drive on earth

193
00:06:52,560 --> 00:06:53,440
probably because they don't have any

194
00:06:53,440 --> 00:06:57,199
crazy drivers on mars yet

195
00:06:57,360 --> 00:06:59,280
and finally a nuclear power plant how

196
00:06:59,280 --> 00:07:00,880
many lines of code do you think would be

197
00:07:00,880 --> 00:07:03,840
in a nuclear power plant

198
00:07:04,080 --> 00:07:06,960
well i actually don't know but if you do

199
00:07:06,960 --> 00:07:08,319
know please let me know because i would

200
00:07:08,319 --> 00:07:09,440
love to add that here

201
00:07:09,440 --> 00:07:11,120
but it's a lot you know i'm sure there's

202
00:07:11,120 --> 00:07:12,639
millions of lines of code

203
00:07:12,639 --> 00:07:15,680
running in the different control systems

204
00:07:15,680 --> 00:07:19,120
that work in our nuclear power plants

205
00:07:19,120 --> 00:07:21,360
so this brings to mind a few questions

206
00:07:21,360 --> 00:07:22,560
and if you think about

207
00:07:22,560 --> 00:07:23,919
you know kind of my background and where

208
00:07:23,919 --> 00:07:26,000
i'm working you might see why

209
00:07:26,000 --> 00:07:28,800
i would have these questions so let's

210
00:07:28,800 --> 00:07:30,000
think about it what

211
00:07:30,000 --> 00:07:32,400
which components are used in these these

212
00:07:32,400 --> 00:07:34,080
devices or these things that we're

213
00:07:34,080 --> 00:07:36,720
interacting with and where do these

214
00:07:36,720 --> 00:07:38,960
software components come from

215
00:07:38,960 --> 00:07:43,440
how was it built and is it safe to use

216
00:07:43,440 --> 00:07:45,440
are there any vulnerabilities in the

217
00:07:45,440 --> 00:07:47,360
software

218
00:07:47,360 --> 00:07:49,280
and when you're thinking of national

219
00:07:49,280 --> 00:07:50,879
security this next question

220
00:07:50,879 --> 00:07:52,720
is particularly relevant did my

221
00:07:52,720 --> 00:07:54,080
adversaries play a part in the

222
00:07:54,080 --> 00:07:54,879
development

223
00:07:54,879 --> 00:07:58,000
or the packaging of the software and

224
00:07:58,000 --> 00:08:00,479
finally we're coding best practices used

225
00:08:00,479 --> 00:08:03,759
in its development so you know these are

226
00:08:03,759 --> 00:08:05,759
all interesting questions and and super

227
00:08:05,759 --> 00:08:07,120
relevant to our

228
00:08:07,120 --> 00:08:10,240
daily modern lives but when you think

229
00:08:10,240 --> 00:08:11,199
about our

230
00:08:11,199 --> 00:08:13,919
nation's critical infrastructure the

231
00:08:13,919 --> 00:08:15,680
things that are providing our energy

232
00:08:15,680 --> 00:08:18,080
and the things that we rely on for our

233
00:08:18,080 --> 00:08:19,199
safety and our health

234
00:08:19,199 --> 00:08:21,280
and things like that these questions

235
00:08:21,280 --> 00:08:24,479
become even more important

236
00:08:24,800 --> 00:08:27,039
which is why statements like these are

237
00:08:27,039 --> 00:08:28,479
kind of concerning

238
00:08:28,479 --> 00:08:31,120
so this is some testimony from dan coats

239
00:08:31,120 --> 00:08:32,000
um

240
00:08:32,000 --> 00:08:33,360
a former director of national

241
00:08:33,360 --> 00:08:35,440
intelligence that he gave in testimony

242
00:08:35,440 --> 00:08:36,080
to

243
00:08:36,080 --> 00:08:37,240
the senate select committee on

244
00:08:37,240 --> 00:08:40,320
intelligence and he basically said

245
00:08:40,320 --> 00:08:42,958
that there are foreign countries that

246
00:08:42,958 --> 00:08:44,480
are actively

247
00:08:44,480 --> 00:08:48,160
um investigating and uh trying out

248
00:08:48,160 --> 00:08:49,920
technologies to be able to disrupt

249
00:08:49,920 --> 00:08:53,360
our critical infrastructure and

250
00:08:53,360 --> 00:08:56,080
um you know this has been going on for

251
00:08:56,080 --> 00:08:56,800
years

252
00:08:56,800 --> 00:08:59,920
and it's it's not a secret anymore it's

253
00:08:59,920 --> 00:09:02,160
something that we talk openly about

254
00:09:02,160 --> 00:09:04,320
and you can look up newspaper articles

255
00:09:04,320 --> 00:09:05,839
as well that talk about what the united

256
00:09:05,839 --> 00:09:06,560
states

257
00:09:06,560 --> 00:09:08,640
is doing uh in this regard to other

258
00:09:08,640 --> 00:09:09,760
countries

259
00:09:09,760 --> 00:09:11,680
and so you know these type of things

260
00:09:11,680 --> 00:09:13,680
have have moved to the forefront of

261
00:09:13,680 --> 00:09:17,519
of the dialogue the national dialogue

262
00:09:17,519 --> 00:09:20,240
and frankly it's it's kind of concerning

263
00:09:20,240 --> 00:09:21,600
so how do we secure

264
00:09:21,600 --> 00:09:26,240
our critical infrastructure well

265
00:09:26,240 --> 00:09:28,000
um obviously the the federal government

266
00:09:28,000 --> 00:09:29,600
has been thinking about that

267
00:09:29,600 --> 00:09:32,880
and this is a chart that came from

268
00:09:32,880 --> 00:09:36,640
a report that was developed by the

269
00:09:36,640 --> 00:09:38,240
cyber security and information security

270
00:09:38,240 --> 00:09:40,880
agency part of dhs

271
00:09:40,880 --> 00:09:43,839
that talks about uh supply chain risks

272
00:09:43,839 --> 00:09:45,360
and it kind of breaks up the supply

273
00:09:45,360 --> 00:09:47,760
chain into these different phases

274
00:09:47,760 --> 00:09:49,920
and you know i apologize for the small

275
00:09:49,920 --> 00:09:51,360
font you probably can't read it all

276
00:09:51,360 --> 00:09:53,440
but just know that at each stage of the

277
00:09:53,440 --> 00:09:54,640
supply chain

278
00:09:54,640 --> 00:09:57,440
there are opportunities for malicious

279
00:09:57,440 --> 00:09:58,080
actors

280
00:09:58,080 --> 00:10:01,440
to insert functionality

281
00:10:01,440 --> 00:10:03,519
that you may not want there and there's

282
00:10:03,519 --> 00:10:05,200
also opportunities for

283
00:10:05,200 --> 00:10:06,720
vulnerabilities to creep in you know

284
00:10:06,720 --> 00:10:09,360
maybe maybe unwittingly

285
00:10:09,360 --> 00:10:11,200
and so these are things that we need to

286
00:10:11,200 --> 00:10:12,800
think about as we think about the

287
00:10:12,800 --> 00:10:14,079
software that's running

288
00:10:14,079 --> 00:10:18,000
in our critical infrastructure

289
00:10:18,000 --> 00:10:20,320
so let me give a few examples of why

290
00:10:20,320 --> 00:10:22,399
this is a concern or

291
00:10:22,399 --> 00:10:23,839
you know how this has been manifested

292
00:10:23,839 --> 00:10:25,440
recently

293
00:10:25,440 --> 00:10:28,320
so the first is uh the ripple 20 set of

294
00:10:28,320 --> 00:10:30,720
vulnerabilities that were disclosed

295
00:10:30,720 --> 00:10:34,399
um last year last september

296
00:10:34,399 --> 00:10:36,640
or sorry no last june they were

297
00:10:36,640 --> 00:10:39,360
initially discovered in september 2019.

298
00:10:39,360 --> 00:10:41,040
so these are a set of vulnerabilities

299
00:10:41,040 --> 00:10:42,640
that were disclosed for

300
00:10:42,640 --> 00:10:45,920
a bit of software called the trek tcp ip

301
00:10:45,920 --> 00:10:47,040
stack

302
00:10:47,040 --> 00:10:49,440
and this is a software stack that runs

303
00:10:49,440 --> 00:10:50,959
in a lot of embedded

304
00:10:50,959 --> 00:10:53,839
control systems so industrial control

305
00:10:53,839 --> 00:10:54,959
systems and

306
00:10:54,959 --> 00:10:58,000
medical devices and things like that and

307
00:10:58,000 --> 00:11:00,640
what's interesting about about trek is

308
00:11:00,640 --> 00:11:02,399
they don't do a lot of direct sales

309
00:11:02,399 --> 00:11:03,920
to customer you know to the end

310
00:11:03,920 --> 00:11:05,920
customers so they develop this

311
00:11:05,920 --> 00:11:09,839
uh tcp ip stack and then other vendors

312
00:11:09,839 --> 00:11:13,279
incorporate that into their products and

313
00:11:13,279 --> 00:11:15,360
um the researchers that discovered these

314
00:11:15,360 --> 00:11:16,399
vulnerabilities

315
00:11:16,399 --> 00:11:19,920
um from jsof uh in israel

316
00:11:19,920 --> 00:11:23,200
found that uh you know there's there's

317
00:11:23,200 --> 00:11:24,320
lots of different things that they could

318
00:11:24,320 --> 00:11:26,079
do to these devices that are running

319
00:11:26,079 --> 00:11:26,640
this

320
00:11:26,640 --> 00:11:29,680
tcp stack they demonstrated some remote

321
00:11:29,680 --> 00:11:33,519
code execution vulnerabilities and

322
00:11:33,519 --> 00:11:35,360
were able to basically take full control

323
00:11:35,360 --> 00:11:37,519
of these devices

324
00:11:37,519 --> 00:11:40,399
and so if you are an asset owner

325
00:11:40,399 --> 00:11:42,079
somebody that owns one of these

326
00:11:42,079 --> 00:11:44,640
industrial control systems or devices

327
00:11:44,640 --> 00:11:45,760
and use that

328
00:11:45,760 --> 00:11:48,800
for you know deploying your system or

329
00:11:48,800 --> 00:11:51,920
deployed in your system then you would

330
00:11:51,920 --> 00:11:53,440
probably want to know if

331
00:11:53,440 --> 00:11:55,200
these vulnerabilities were present and

332
00:11:55,200 --> 00:11:58,160
what to do about them

333
00:11:58,560 --> 00:12:00,320
if we look at the affected vendors this

334
00:12:00,320 --> 00:12:02,320
is from their from the website

335
00:12:02,320 --> 00:12:05,040
where the disclosure was made there's a

336
00:12:05,040 --> 00:12:05,920
whole bunch of

337
00:12:05,920 --> 00:12:07,440
systems that are listed here you know

338
00:12:07,440 --> 00:12:09,040
these ones are confirmed these ones are

339
00:12:09,040 --> 00:12:09,519
still

340
00:12:09,519 --> 00:12:11,839
investigating i should mention the

341
00:12:11,839 --> 00:12:12,800
researchers

342
00:12:12,800 --> 00:12:15,920
did follow pretty um you know strict

343
00:12:15,920 --> 00:12:18,240
and responsible disclosure practices

344
00:12:18,240 --> 00:12:20,320
they worked with the vendor

345
00:12:20,320 --> 00:12:23,040
for i think more than a standard 120

346
00:12:23,040 --> 00:12:24,240
days

347
00:12:24,240 --> 00:12:26,800
before they disclosed it publicly but

348
00:12:26,800 --> 00:12:29,200
anyway when i look at these lists

349
00:12:29,200 --> 00:12:31,440
what i see are are some of them you know

350
00:12:31,440 --> 00:12:32,320
they're all

351
00:12:32,320 --> 00:12:34,560
obviously big names and and probably

352
00:12:34,560 --> 00:12:35,360
important

353
00:12:35,360 --> 00:12:37,279
things but based on my background and

354
00:12:37,279 --> 00:12:38,399
what i've been looking at

355
00:12:38,399 --> 00:12:40,399
over the last couple years these ones

356
00:12:40,399 --> 00:12:43,440
kind of jump out at me because these are

357
00:12:43,440 --> 00:12:46,480
vendors that sell equipment that go into

358
00:12:46,480 --> 00:12:49,600
the power grid and uh other critical

359
00:12:49,600 --> 00:12:53,839
infrastructure systems

360
00:12:55,040 --> 00:12:57,440
all right so that's what can happen if

361
00:12:57,440 --> 00:12:58,399
um

362
00:12:58,399 --> 00:13:00,320
you know vulnerabilities make it through

363
00:13:00,320 --> 00:13:01,519
all the q a process

364
00:13:01,519 --> 00:13:04,320
at these vendors and and end up in our

365
00:13:04,320 --> 00:13:06,240
devices that we rely on

366
00:13:06,240 --> 00:13:08,880
now there's another type of of concern

367
00:13:08,880 --> 00:13:09,680
and that is

368
00:13:09,680 --> 00:13:12,560
you know supply chain compromise where

369
00:13:12,560 --> 00:13:13,519
where somebody

370
00:13:13,519 --> 00:13:16,720
an attacker is able to insert their

371
00:13:16,720 --> 00:13:18,000
malicious code

372
00:13:18,000 --> 00:13:19,600
into the supply chain into the products

373
00:13:19,600 --> 00:13:21,760
that are that are

374
00:13:21,760 --> 00:13:25,519
being produced and the example i wanted

375
00:13:25,519 --> 00:13:27,040
to share with that is is a recent one

376
00:13:27,040 --> 00:13:29,760
the solarwinds supply chain compromise

377
00:13:29,760 --> 00:13:31,839
so this has been in the news quite a bit

378
00:13:31,839 --> 00:13:33,360
lately it was

379
00:13:33,360 --> 00:13:36,800
first discovered back in december

380
00:13:36,800 --> 00:13:39,680
by fireeye and they were investigating

381
00:13:39,680 --> 00:13:40,399
some

382
00:13:40,399 --> 00:13:42,880
some strange behavior on their network

383
00:13:42,880 --> 00:13:43,440
and

384
00:13:43,440 --> 00:13:45,120
started to kind of unravel this whole

385
00:13:45,120 --> 00:13:47,519
thing and from there it has just spider

386
00:13:47,519 --> 00:13:49,519
webbed out and there's all sorts of

387
00:13:49,519 --> 00:13:51,279
companies that are being affected and

388
00:13:51,279 --> 00:13:52,880
you know it's not just solar winds

389
00:13:52,880 --> 00:13:56,160
that was just one kind of vector uh

390
00:13:56,160 --> 00:13:58,320
into all these companies but it's really

391
00:13:58,320 --> 00:13:59,519
interesting too

392
00:13:59,519 --> 00:14:01,920
to read about and see how they were able

393
00:14:01,920 --> 00:14:02,639
to

394
00:14:02,639 --> 00:14:04,399
make use of the software that many

395
00:14:04,399 --> 00:14:06,000
companies rely on

396
00:14:06,000 --> 00:14:08,160
um one of the things that makes this so

397
00:14:08,160 --> 00:14:09,440
interesting is

398
00:14:09,440 --> 00:14:12,079
the target that they chose so the

399
00:14:12,079 --> 00:14:13,920
solarwinds orion network management

400
00:14:13,920 --> 00:14:14,959
system

401
00:14:14,959 --> 00:14:18,160
provides enterprise it monitoring so

402
00:14:18,160 --> 00:14:20,639
they actually sell a product that is

403
00:14:20,639 --> 00:14:21,680
supposed to help you with your cyber

404
00:14:21,680 --> 00:14:23,040
security

405
00:14:23,040 --> 00:14:24,959
and um you know depending on the

406
00:14:24,959 --> 00:14:26,560
configuration of this device

407
00:14:26,560 --> 00:14:29,600
it generally has pretty broad access

408
00:14:29,600 --> 00:14:32,160
uh to your infrastructure to your it

409
00:14:32,160 --> 00:14:33,839
infrastructure

410
00:14:33,839 --> 00:14:35,760
and it also has a very high level of

411
00:14:35,760 --> 00:14:36,880
access so

412
00:14:36,880 --> 00:14:39,680
often admin type privileges and so it's

413
00:14:39,680 --> 00:14:40,800
a juicy target if

414
00:14:40,800 --> 00:14:42,639
if you can compromise those systems

415
00:14:42,639 --> 00:14:44,399
because you kind of get the keys to the

416
00:14:44,399 --> 00:14:45,440
kingdom

417
00:14:45,440 --> 00:14:49,120
through those devices now the

418
00:14:49,120 --> 00:14:52,880
the um the malware

419
00:14:52,880 --> 00:14:55,760
got to these organizations um you know

420
00:14:55,760 --> 00:14:56,160
over

421
00:14:56,160 --> 00:14:58,959
a few months period through legitimate

422
00:14:58,959 --> 00:15:01,040
uh software distribution channels

423
00:15:01,040 --> 00:15:03,600
so the sarian update server you know

424
00:15:03,600 --> 00:15:05,440
automatically pushes out updates

425
00:15:05,440 --> 00:15:07,760
and the customers receive those updates

426
00:15:07,760 --> 00:15:08,800
and uh

427
00:15:08,800 --> 00:15:11,839
install them and so you know the very

428
00:15:11,839 --> 00:15:12,720
thing that

429
00:15:12,720 --> 00:15:15,120
uh security experts will tell you you

430
00:15:15,120 --> 00:15:17,279
need to patch for vulnerabilities

431
00:15:17,279 --> 00:15:19,120
is actually kind of what what these

432
00:15:19,120 --> 00:15:21,440
attackers leveraged uh to get

433
00:15:21,440 --> 00:15:23,519
in through the back door to these

434
00:15:23,519 --> 00:15:24,880
companies

435
00:15:24,880 --> 00:15:26,880
and if you look at it if you read the

436
00:15:26,880 --> 00:15:28,160
reports

437
00:15:28,160 --> 00:15:30,079
all of those updates were were signed by

438
00:15:30,079 --> 00:15:31,199
solarwinds

439
00:15:31,199 --> 00:15:34,320
so they looked legitimate and um

440
00:15:34,320 --> 00:15:37,839
no real reason not to trust them

441
00:15:38,240 --> 00:15:41,279
once installed the the trojan

442
00:15:41,279 --> 00:15:43,839
software actually connects out to http

443
00:15:43,839 --> 00:15:44,720
servers

444
00:15:44,720 --> 00:15:47,120
and uh does command and control and then

445
00:15:47,120 --> 00:15:48,800
receive eventually receives

446
00:15:48,800 --> 00:15:51,839
if if the attackers want to proceed with

447
00:15:51,839 --> 00:15:52,880
the attack

448
00:15:52,880 --> 00:15:55,360
um it'll receive additional stages of

449
00:15:55,360 --> 00:15:57,920
the malware

450
00:15:59,040 --> 00:16:00,399
all right so who was affected in this

451
00:16:00,399 --> 00:16:02,480
one well you know it's it's all the big

452
00:16:02,480 --> 00:16:03,519
names

453
00:16:03,519 --> 00:16:06,800
and uh you can look at this list they

454
00:16:06,800 --> 00:16:08,000
they took down this list from their

455
00:16:08,000 --> 00:16:10,480
website um after the fact because they

456
00:16:10,480 --> 00:16:12,959
decided maybe it wasn't a good idea to

457
00:16:12,959 --> 00:16:14,480
to point out who all was running their

458
00:16:14,480 --> 00:16:15,199
software

459
00:16:15,199 --> 00:16:18,079
but um it's all the big companies a lot

460
00:16:18,079 --> 00:16:18,399
of

461
00:16:18,399 --> 00:16:20,639
government organizations all five

462
00:16:20,639 --> 00:16:22,079
branches of the military

463
00:16:22,079 --> 00:16:25,920
so these are these are big targets

464
00:16:25,920 --> 00:16:27,680
but what i wanted to point out is that

465
00:16:27,680 --> 00:16:29,040
you know if anybody is going to have the

466
00:16:29,040 --> 00:16:30,079
budget and the

467
00:16:30,079 --> 00:16:32,480
resources and the time and the talent to

468
00:16:32,480 --> 00:16:33,839
be able to do

469
00:16:33,839 --> 00:16:38,000
software supply chain assurance

470
00:16:38,000 --> 00:16:40,800
it would be these guys and yet for many

471
00:16:40,800 --> 00:16:41,759
months

472
00:16:41,759 --> 00:16:44,959
this went unnoticed and the attackers

473
00:16:44,959 --> 00:16:45,839
were able to

474
00:16:45,839 --> 00:16:51,360
walk through their systems pretty easily

475
00:16:51,360 --> 00:16:54,880
all right now the software assurance

476
00:16:54,880 --> 00:16:55,440
field is

477
00:16:55,440 --> 00:16:58,240
is not new um it's been around for quite

478
00:16:58,240 --> 00:16:58,959
a while

479
00:16:58,959 --> 00:17:01,839
and there are lots of tools out there to

480
00:17:01,839 --> 00:17:03,839
help you

481
00:17:03,839 --> 00:17:08,000
analyze and understand your software

482
00:17:08,000 --> 00:17:11,520
so we took a chance to

483
00:17:11,520 --> 00:17:13,919
survey the the marketplace for these

484
00:17:13,919 --> 00:17:14,880
tools

485
00:17:14,880 --> 00:17:16,480
and this is kind of what we found so if

486
00:17:16,480 --> 00:17:18,000
you look at that you know those six

487
00:17:18,000 --> 00:17:21,199
stages of the software supply chain

488
00:17:21,199 --> 00:17:23,839
um the tool space we looked at over 200

489
00:17:23,839 --> 00:17:24,640
tools

490
00:17:24,640 --> 00:17:26,640
and it breaks down kind of by these

491
00:17:26,640 --> 00:17:28,079
numbers some tools fit into multiple

492
00:17:28,079 --> 00:17:30,480
categories that's why it doesn't add up

493
00:17:30,480 --> 00:17:33,120
but you can see here that you know the

494
00:17:33,120 --> 00:17:34,480
vast majority of these tools

495
00:17:34,480 --> 00:17:36,880
are focused in this phase here for the

496
00:17:36,880 --> 00:17:39,039
development and production of software

497
00:17:39,039 --> 00:17:41,679
so developers you know when they build

498
00:17:41,679 --> 00:17:42,480
their

499
00:17:42,480 --> 00:17:44,880
their code when they're developing they

500
00:17:44,880 --> 00:17:46,559
have these tools and

501
00:17:46,559 --> 00:17:50,480
they look for bugs in their code and

502
00:17:50,480 --> 00:17:53,520
a lot of that can be automated

503
00:17:53,679 --> 00:17:55,600
the second highest is is in acquisition

504
00:17:55,600 --> 00:17:58,080
and deployment so if you are a customer

505
00:17:58,080 --> 00:18:00,480
and you are purchasing software and you

506
00:18:00,480 --> 00:18:02,480
want to do some due diligence and see if

507
00:18:02,480 --> 00:18:04,160
it's got any malicious functionality

508
00:18:04,160 --> 00:18:06,320
or vulnerabilities perhaps then there

509
00:18:06,320 --> 00:18:07,520
are tools that you can

510
00:18:07,520 --> 00:18:10,400
uh use to do that and so those are kind

511
00:18:10,400 --> 00:18:11,039
of the

512
00:18:11,039 --> 00:18:13,679
the big categories um we didn't look a

513
00:18:13,679 --> 00:18:14,400
lot at this

514
00:18:14,400 --> 00:18:16,000
you know disposal category there are

515
00:18:16,000 --> 00:18:17,919
tools for that but it wasn't really

516
00:18:17,919 --> 00:18:19,520
relevant to what we were doing in the

517
00:18:19,520 --> 00:18:21,200
survey

518
00:18:21,200 --> 00:18:23,600
so what i want to point out here is that

519
00:18:23,600 --> 00:18:24,720
um

520
00:18:24,720 --> 00:18:26,880
you know there's really kind of two

521
00:18:26,880 --> 00:18:29,039
divisions of these tools

522
00:18:29,039 --> 00:18:30,559
there's stuff that's that's meant to be

523
00:18:30,559 --> 00:18:32,320
used kind of at the beginning

524
00:18:32,320 --> 00:18:35,039
of the supply chain during development

525
00:18:35,039 --> 00:18:36,880
and then there's stuff to be used

526
00:18:36,880 --> 00:18:38,960
um kind of on the receiving end so when

527
00:18:38,960 --> 00:18:40,720
you receive software

528
00:18:40,720 --> 00:18:42,160
but there's not a lot that kind of

529
00:18:42,160 --> 00:18:44,160
crosses between those

530
00:18:44,160 --> 00:18:46,960
um there's not a lot that correlates the

531
00:18:46,960 --> 00:18:48,799
two different areas

532
00:18:48,799 --> 00:18:51,840
and so we found that as to be a gap

533
00:18:51,840 --> 00:18:54,799
in this in this marketplace and

534
00:18:54,799 --> 00:18:56,559
interestingly enough the solarwinds

535
00:18:56,559 --> 00:18:58,480
compromise kind of targeted that gap

536
00:18:58,480 --> 00:19:01,039
right because they targeted the build

537
00:19:01,039 --> 00:19:02,240
server

538
00:19:02,240 --> 00:19:04,720
running at solarwinds and were able to

539
00:19:04,720 --> 00:19:07,280
insert their malicious code

540
00:19:07,280 --> 00:19:09,200
after the development took place so no

541
00:19:09,200 --> 00:19:10,880
matter what you did to the source code

542
00:19:10,880 --> 00:19:11,280
to

543
00:19:11,280 --> 00:19:13,280
look for those bugs you wouldn't have

544
00:19:13,280 --> 00:19:14,480
seen it

545
00:19:14,480 --> 00:19:16,799
because it was inserted after the fact

546
00:19:16,799 --> 00:19:18,160
and then you know use

547
00:19:18,160 --> 00:19:20,080
legitimate uh distribution channels to

548
00:19:20,080 --> 00:19:21,360
get to the customers where it was

549
00:19:21,360 --> 00:19:23,520
deployed

550
00:19:23,520 --> 00:19:26,000
so what we can take from that is that

551
00:19:26,000 --> 00:19:27,039
there is a gap

552
00:19:27,039 --> 00:19:31,440
and we need better tools in that space

553
00:19:31,440 --> 00:19:33,360
uh there's a comment or a question

554
00:19:33,360 --> 00:19:34,480
saying doesn't

555
00:19:34,480 --> 00:19:37,120
uh ci cd so continuous integration

556
00:19:37,120 --> 00:19:38,480
continuous deployment

557
00:19:38,480 --> 00:19:42,160
bridge that gap and yes it does um

558
00:19:42,160 --> 00:19:45,360
it can but if you're not looking

559
00:19:45,360 --> 00:19:48,000
at you know the code going in and the

560
00:19:48,000 --> 00:19:50,240
code coming out and comparing those two

561
00:19:50,240 --> 00:19:52,080
you may not be able to catch something

562
00:19:52,080 --> 00:19:55,039
that was inserted there

563
00:19:56,320 --> 00:19:59,360
all right so let me paint the picture of

564
00:19:59,360 --> 00:20:01,039
our strategy here at lawrence livermore

565
00:20:01,039 --> 00:20:02,799
for doing software assurance

566
00:20:02,799 --> 00:20:04,799
and you know this is the the long-term

567
00:20:04,799 --> 00:20:07,280
vision um it's a journey we're on

568
00:20:07,280 --> 00:20:08,960
it's not something that we've fully

569
00:20:08,960 --> 00:20:11,520
solved by any means

570
00:20:11,520 --> 00:20:13,039
but you know we've been doing software

571
00:20:13,039 --> 00:20:15,200
assurance for for quite a while

572
00:20:15,200 --> 00:20:17,039
and you know just based on our on our

573
00:20:17,039 --> 00:20:19,440
mission you can understand why we have

574
00:20:19,440 --> 00:20:20,799
you know

575
00:20:20,799 --> 00:20:23,360
very critical functions that need to be

576
00:20:23,360 --> 00:20:24,559
uh examined

577
00:20:24,559 --> 00:20:27,120
and we need to assure that those things

578
00:20:27,120 --> 00:20:28,640
are done securely

579
00:20:28,640 --> 00:20:32,320
and so um you know if you take a really

580
00:20:32,320 --> 00:20:33,360
good

581
00:20:33,360 --> 00:20:35,679
like reverse engineer or somebody that

582
00:20:35,679 --> 00:20:36,799
understands

583
00:20:36,799 --> 00:20:38,720
you know program analysis and what makes

584
00:20:38,720 --> 00:20:40,159
software work

585
00:20:40,159 --> 00:20:42,320
they can they can pretty much tell you

586
00:20:42,320 --> 00:20:43,840
if your software is secure

587
00:20:43,840 --> 00:20:47,600
but it takes a lot of time and a lot of

588
00:20:47,600 --> 00:20:50,720
man hours to to do that and

589
00:20:50,720 --> 00:20:53,360
unfortunately the world that we live in

590
00:20:53,360 --> 00:20:54,640
you know there's just not enough of

591
00:20:54,640 --> 00:20:56,080
those type of people in that skill set

592
00:20:56,080 --> 00:20:57,280
to go around

593
00:20:57,280 --> 00:20:59,679
so we can't rely on manual approaches to

594
00:20:59,679 --> 00:21:01,360
doing

595
00:21:01,360 --> 00:21:04,320
this type of this type of analysis and

596
00:21:04,320 --> 00:21:05,520
so we've got to have some sort of

597
00:21:05,520 --> 00:21:06,480
automation

598
00:21:06,480 --> 00:21:09,039
so we've developed a set of tools that

599
00:21:09,039 --> 00:21:09,840
uh help

600
00:21:09,840 --> 00:21:12,880
with that process and there's you know

601
00:21:12,880 --> 00:21:15,039
it's kind of an iterative process where

602
00:21:15,039 --> 00:21:17,600
somebody looks at the code and is able

603
00:21:17,600 --> 00:21:18,880
to understand

604
00:21:18,880 --> 00:21:20,640
or is able to do that analysis that

605
00:21:20,640 --> 00:21:23,440
reverse engineering and understand

606
00:21:23,440 --> 00:21:25,280
certain certain things within the code

607
00:21:25,280 --> 00:21:26,880
and we build a tool that helps to

608
00:21:26,880 --> 00:21:28,240
automate that

609
00:21:28,240 --> 00:21:30,080
and you know we try to continually

610
00:21:30,080 --> 00:21:31,919
improve those

611
00:21:31,919 --> 00:21:34,320
over time we hope to do that in a more

612
00:21:34,320 --> 00:21:35,440
automated fashion

613
00:21:35,440 --> 00:21:37,440
and so one of the areas that i'll talk

614
00:21:37,440 --> 00:21:38,799
about here in a minute is

615
00:21:38,799 --> 00:21:40,960
just enumerating the components that

616
00:21:40,960 --> 00:21:42,559
make up your software

617
00:21:42,559 --> 00:21:44,400
so we'd like to be able to do that fully

618
00:21:44,400 --> 00:21:46,880
automated and not require a

619
00:21:46,880 --> 00:21:51,840
person to to do that for us

620
00:21:51,840 --> 00:21:54,480
over time we hope that we can more fully

621
00:21:54,480 --> 00:21:55,360
automate the

622
00:21:55,360 --> 00:21:57,840
the various types of analyses that we do

623
00:21:57,840 --> 00:21:59,760
so discovering vulnerabilities

624
00:21:59,760 --> 00:22:02,240
and looking at software throughout the

625
00:22:02,240 --> 00:22:03,919
supply chain

626
00:22:03,919 --> 00:22:05,360
and we've made some progress in in that

627
00:22:05,360 --> 00:22:07,280
regard as well

628
00:22:07,280 --> 00:22:09,280
with the eventual goal being that you

629
00:22:09,280 --> 00:22:12,080
know maybe someday we can have devices

630
00:22:12,080 --> 00:22:14,640
that are able to receive their updates

631
00:22:14,640 --> 00:22:16,559
and before they install them

632
00:22:16,559 --> 00:22:19,200
they have a way to automatically analyze

633
00:22:19,200 --> 00:22:21,360
and verify that that

634
00:22:21,360 --> 00:22:23,919
software is trustworthy and secure

635
00:22:23,919 --> 00:22:26,720
before deploying so we have projects

636
00:22:26,720 --> 00:22:27,520
kind of running in

637
00:22:27,520 --> 00:22:29,679
in all these different areas um

638
00:22:29,679 --> 00:22:30,799
obviously the stuff

639
00:22:30,799 --> 00:22:33,280
more to the right is more long-term and

640
00:22:33,280 --> 00:22:34,720
kind of still at the basic research

641
00:22:34,720 --> 00:22:35,440
stage

642
00:22:35,440 --> 00:22:39,039
but we are working in this space

643
00:22:39,039 --> 00:22:41,760
so one of the tools um that we've we've

644
00:22:41,760 --> 00:22:43,600
spent a lot of time on

645
00:22:43,600 --> 00:22:45,440
at lawrence livermore is the rose

646
00:22:45,440 --> 00:22:47,679
framework and

647
00:22:47,679 --> 00:22:50,559
maybe you've heard of it maybe not but

648
00:22:50,559 --> 00:22:53,120
rose is a

649
00:22:53,120 --> 00:22:55,200
it's a compiler framework that was

650
00:22:55,200 --> 00:22:56,400
initially developed

651
00:22:56,400 --> 00:22:58,559
uh with kind of a single purpose in mind

652
00:22:58,559 --> 00:22:59,600
and that was

653
00:22:59,600 --> 00:23:01,360
i mentioned our you know our high

654
00:23:01,360 --> 00:23:02,640
performance computing our super

655
00:23:02,640 --> 00:23:03,280
computing

656
00:23:03,280 --> 00:23:06,000
capability at the lab and so every few

657
00:23:06,000 --> 00:23:06,720
years

658
00:23:06,720 --> 00:23:09,520
um doe invests a lot of money in

659
00:23:09,520 --> 00:23:11,679
upgrading or purchasing a new

660
00:23:11,679 --> 00:23:15,280
supercomputer and the code

661
00:23:15,280 --> 00:23:16,640
that is developed for those super

662
00:23:16,640 --> 00:23:18,720
computers needs to be ported

663
00:23:18,720 --> 00:23:20,080
so that it can run on on the new

664
00:23:20,080 --> 00:23:21,679
architecture because backwards

665
00:23:21,679 --> 00:23:23,520
compatibility isn't always the first

666
00:23:23,520 --> 00:23:26,000
consideration in fact i think it's still

667
00:23:26,000 --> 00:23:27,360
in the first consideration

668
00:23:27,360 --> 00:23:30,480
for those for those machines and so rose

669
00:23:30,480 --> 00:23:31,840
was developed as a way to do

670
00:23:31,840 --> 00:23:33,919
source to source transformations so that

671
00:23:33,919 --> 00:23:36,320
you could automate that process so you

672
00:23:36,320 --> 00:23:37,600
didn't have to have somebody go through

673
00:23:37,600 --> 00:23:38,640
and port the code

674
00:23:38,640 --> 00:23:40,080
it could just automatically take one

675
00:23:40,080 --> 00:23:42,000
code base and port it to the

676
00:23:42,000 --> 00:23:45,679
the new system well over the years

677
00:23:45,679 --> 00:23:47,279
the the framework that they developed

678
00:23:47,279 --> 00:23:49,520
for doing that the researchers

679
00:23:49,520 --> 00:23:51,679
realized was was also good for doing

680
00:23:51,679 --> 00:23:53,440
other types of analysis

681
00:23:53,440 --> 00:23:56,480
so if you can um abstract

682
00:23:56,480 --> 00:23:58,799
the source code to this intermediate

683
00:23:58,799 --> 00:24:00,080
representation

684
00:24:00,080 --> 00:24:02,400
such as an abstract syntax tree then you

685
00:24:02,400 --> 00:24:04,400
can run all sorts of um static and

686
00:24:04,400 --> 00:24:05,919
dynamic analyses

687
00:24:05,919 --> 00:24:09,200
uh and produce results from that

688
00:24:09,200 --> 00:24:11,279
and then over time they realize well you

689
00:24:11,279 --> 00:24:14,240
know compiled software software binaries

690
00:24:14,240 --> 00:24:15,840
aren't really that much different i mean

691
00:24:15,840 --> 00:24:17,679
they're harder for humans to understand

692
00:24:17,679 --> 00:24:20,400
but they can also be represented in this

693
00:24:20,400 --> 00:24:22,240
abstract syntax tree

694
00:24:22,240 --> 00:24:24,559
and the same types of analyses can be

695
00:24:24,559 --> 00:24:26,880
done on binaries

696
00:24:26,880 --> 00:24:29,600
so this is rose it's been around for a

697
00:24:29,600 --> 00:24:30,960
while feel free to check it out

698
00:24:30,960 --> 00:24:32,400
there's an open source version that you

699
00:24:32,400 --> 00:24:35,919
can download here at rosecompiler.org

700
00:24:35,919 --> 00:24:37,039
so this is one of the tools that we've

701
00:24:37,039 --> 00:24:38,960
developed for for doing this

702
00:24:38,960 --> 00:24:42,320
and rose is really powerful you can do

703
00:24:42,320 --> 00:24:43,679
pretty much anything

704
00:24:43,679 --> 00:24:46,799
in the space of binary analysis but it's

705
00:24:46,799 --> 00:24:48,880
pretty complex and complicated it's hard

706
00:24:48,880 --> 00:24:49,679
for

707
00:24:49,679 --> 00:24:51,600
hard for somebody to get started using

708
00:24:51,600 --> 00:24:53,039
it and so

709
00:24:53,039 --> 00:24:55,919
we wanted to build kind of a wrapper

710
00:24:55,919 --> 00:24:57,120
around rows

711
00:24:57,120 --> 00:24:58,720
to make some of the common tasks a

712
00:24:58,720 --> 00:25:00,640
little easier to do

713
00:25:00,640 --> 00:25:01,919
and so we built this tool called

714
00:25:01,919 --> 00:25:04,960
longclaw and longclaw is an analysis

715
00:25:04,960 --> 00:25:05,840
framework

716
00:25:05,840 --> 00:25:08,240
for doing automatic automated

717
00:25:08,240 --> 00:25:10,000
vulnerability discovery

718
00:25:10,000 --> 00:25:13,679
within software so it's based on rows

719
00:25:13,679 --> 00:25:15,039
but we've also integrated other

720
00:25:15,039 --> 00:25:17,600
third-party tools into the framework

721
00:25:17,600 --> 00:25:20,240
and we kind of developed it from the

722
00:25:20,240 --> 00:25:21,039
very beginning

723
00:25:21,039 --> 00:25:24,400
with this idea of being highly scalable

724
00:25:24,400 --> 00:25:26,960
because one of the things we've realized

725
00:25:26,960 --> 00:25:28,240
is you know if we're ever going to make

726
00:25:28,240 --> 00:25:29,840
any traction on this

727
00:25:29,840 --> 00:25:32,240
this problem of securing the supply

728
00:25:32,240 --> 00:25:33,039
chain

729
00:25:33,039 --> 00:25:34,880
we have to look at a lot of software you

730
00:25:34,880 --> 00:25:36,240
know you can't just look at

731
00:25:36,240 --> 00:25:39,360
one binary every six months you need to

732
00:25:39,360 --> 00:25:40,320
be able to do this

733
00:25:40,320 --> 00:25:44,559
fast and and do a lot of it

734
00:25:44,559 --> 00:25:46,480
and so we built that we built long claw

735
00:25:46,480 --> 00:25:48,640
with that in mind

736
00:25:48,640 --> 00:25:50,240
and we also built it very modular so

737
00:25:50,240 --> 00:25:51,679
it's easy to integrate

738
00:25:51,679 --> 00:25:55,360
new uh analysis uh modules into the the

739
00:25:55,360 --> 00:25:56,960
framework we use docker

740
00:25:56,960 --> 00:26:00,000
to do that so it's pretty nice to work

741
00:26:00,000 --> 00:26:01,520
with

742
00:26:01,520 --> 00:26:02,720
and so i'm going to talk a little bit

743
00:26:02,720 --> 00:26:05,200
today about one of the use cases for

744
00:26:05,200 --> 00:26:07,840
this framework that we've developed and

745
00:26:07,840 --> 00:26:08,799
that is

746
00:26:08,799 --> 00:26:11,039
developing and generating a software

747
00:26:11,039 --> 00:26:12,799
bill of materials

748
00:26:12,799 --> 00:26:16,480
so that's abbreviated s-bom

749
00:26:16,480 --> 00:26:18,559
so we've already talked about how

750
00:26:18,559 --> 00:26:19,679
software is

751
00:26:19,679 --> 00:26:22,320
is pretty complex and there's a lot of

752
00:26:22,320 --> 00:26:23,600
it

753
00:26:23,600 --> 00:26:27,360
in all applications these days

754
00:26:27,360 --> 00:26:31,520
so one of the things that that is

755
00:26:31,520 --> 00:26:34,080
kind of coming to the forefront of

756
00:26:34,080 --> 00:26:35,520
software insurance communities

757
00:26:35,520 --> 00:26:38,000
is this need to make our software a

758
00:26:38,000 --> 00:26:39,360
little more transparent

759
00:26:39,360 --> 00:26:41,039
and understand a little bit more what's

760
00:26:41,039 --> 00:26:43,039
going into that software

761
00:26:43,039 --> 00:26:45,600
so you know obviously that's that's not

762
00:26:45,600 --> 00:26:46,960
the ant that's not the silver bullet

763
00:26:46,960 --> 00:26:48,640
that will solve all problems

764
00:26:48,640 --> 00:26:51,120
but if we can at least take that step

765
00:26:51,120 --> 00:26:51,679
then it

766
00:26:51,679 --> 00:26:54,799
opens up new possibilities for doing new

767
00:26:54,799 --> 00:26:56,640
types of analysis

768
00:26:56,640 --> 00:26:59,200
and so you can look at this diagram over

769
00:26:59,200 --> 00:27:00,559
here but this kind of shows the

770
00:27:00,559 --> 00:27:01,520
different

771
00:27:01,520 --> 00:27:06,559
use cases of software bill of materials

772
00:27:06,559 --> 00:27:08,640
and i listed a few of them here too but

773
00:27:08,640 --> 00:27:09,679
one of the ones that we're most

774
00:27:09,679 --> 00:27:11,600
interested in

775
00:27:11,600 --> 00:27:13,919
from our perspective is vulnerability

776
00:27:13,919 --> 00:27:14,720
management

777
00:27:14,720 --> 00:27:18,840
so understanding vulnerabilities in in

778
00:27:18,840 --> 00:27:20,399
software

779
00:27:20,399 --> 00:27:22,880
and one way to think about an s-bomb is

780
00:27:22,880 --> 00:27:23,840
like a

781
00:27:23,840 --> 00:27:26,799
nutrition label for food so you know

782
00:27:26,799 --> 00:27:28,480
we're all pretty familiar with these

783
00:27:28,480 --> 00:27:32,640
because we all uh eat food

784
00:27:32,640 --> 00:27:35,760
and uh you know food is not something

785
00:27:35,760 --> 00:27:37,200
that you can just look at and know what

786
00:27:37,200 --> 00:27:38,320
goes into it

787
00:27:38,320 --> 00:27:41,279
and so the some some smart person a long

788
00:27:41,279 --> 00:27:43,200
time ago came up with this idea of a

789
00:27:43,200 --> 00:27:44,880
nutrition label to break down

790
00:27:44,880 --> 00:27:47,760
a complex product into its components

791
00:27:47,760 --> 00:27:48,000
and

792
00:27:48,000 --> 00:27:50,000
tell you what what percentage of your

793
00:27:50,000 --> 00:27:51,039
daily intake

794
00:27:51,039 --> 00:27:53,600
it includes so could we do this for

795
00:27:53,600 --> 00:27:54,559
software

796
00:27:54,559 --> 00:27:58,080
and here's my attempt at a software bill

797
00:27:58,080 --> 00:27:59,520
of materials

798
00:27:59,520 --> 00:28:02,559
that looks like a nutrition label this

799
00:28:02,559 --> 00:28:03,600
by the way isn't what they really look

800
00:28:03,600 --> 00:28:03,919
like

801
00:28:03,919 --> 00:28:04,880
i'll show you a real one here in a

802
00:28:04,880 --> 00:28:07,200
minute

803
00:28:08,320 --> 00:28:10,880
all right so how does one get a software

804
00:28:10,880 --> 00:28:13,360
bill of materials

805
00:28:13,360 --> 00:28:16,880
there's kind of two ways one is that

806
00:28:16,880 --> 00:28:18,080
you know whoever's supplying the

807
00:28:18,080 --> 00:28:20,320
software whoever's making the software

808
00:28:20,320 --> 00:28:22,799
could just produce that for you and

809
00:28:22,799 --> 00:28:24,799
distribute it with their software

810
00:28:24,799 --> 00:28:27,120
and you know there's a grassroots effort

811
00:28:27,120 --> 00:28:27,840
right now

812
00:28:27,840 --> 00:28:30,240
a growing community of of people that

813
00:28:30,240 --> 00:28:32,000
think this is a really good idea

814
00:28:32,000 --> 00:28:34,799
and they're they're working with

815
00:28:34,799 --> 00:28:36,559
different software vendors to

816
00:28:36,559 --> 00:28:40,480
incorporate these ideas into their

817
00:28:40,480 --> 00:28:43,039
development pipeline and their release

818
00:28:43,039 --> 00:28:44,080
systems so that

819
00:28:44,080 --> 00:28:46,000
we can just get the s-bomb with the

820
00:28:46,000 --> 00:28:47,200
software

821
00:28:47,200 --> 00:28:48,399
but that's you know that's going to take

822
00:28:48,399 --> 00:28:50,799
a long time for that to kind of catch on

823
00:28:50,799 --> 00:28:53,440
some people are all going hoe to do that

824
00:28:53,440 --> 00:28:55,039
but a lot of vendors need some

825
00:28:55,039 --> 00:28:58,240
some convincing but there are tools that

826
00:28:58,240 --> 00:28:58,559
can

827
00:28:58,559 --> 00:29:00,480
automate that for you and make that

828
00:29:00,480 --> 00:29:02,000
pretty easy if you do it

829
00:29:02,000 --> 00:29:03,440
as part of the build process for your

830
00:29:03,440 --> 00:29:05,120
software

831
00:29:05,120 --> 00:29:07,840
but until that time until we get kind of

832
00:29:07,840 --> 00:29:08,320
uh

833
00:29:08,320 --> 00:29:11,200
mass adoption it would be nice to be

834
00:29:11,200 --> 00:29:12,640
able to have an s-bomb

835
00:29:12,640 --> 00:29:14,960
for software where it's not provided by

836
00:29:14,960 --> 00:29:15,919
the vendor

837
00:29:15,919 --> 00:29:17,520
and that's what we call an

838
00:29:17,520 --> 00:29:19,120
archaeological s-bomb

839
00:29:19,120 --> 00:29:22,559
so you get the binary software

840
00:29:22,559 --> 00:29:25,919
package or whatever and you do some

841
00:29:25,919 --> 00:29:26,559
analysis

842
00:29:26,559 --> 00:29:29,600
and produce your own s-bomb for it

843
00:29:29,600 --> 00:29:32,399
so that's the the use case that we've

844
00:29:32,399 --> 00:29:35,039
been working on

845
00:29:35,520 --> 00:29:37,120
all right so just a reminder on the

846
00:29:37,120 --> 00:29:38,960
software build process i'm sure you guys

847
00:29:38,960 --> 00:29:41,200
are all pretty familiar with this but

848
00:29:41,200 --> 00:29:44,240
basically you start with source code

849
00:29:44,240 --> 00:29:45,919
there's all these kind of transformation

850
00:29:45,919 --> 00:29:47,760
steps that eventually

851
00:29:47,760 --> 00:29:51,039
get you to a binary executable

852
00:29:51,039 --> 00:29:54,480
or a library or package software

853
00:29:54,480 --> 00:29:58,480
and at each one of these steps um

854
00:29:58,480 --> 00:30:00,000
you know these are these are lossy steps

855
00:30:00,000 --> 00:30:02,159
so you lose some of that information

856
00:30:02,159 --> 00:30:04,480
that was in the original source code but

857
00:30:04,480 --> 00:30:06,000
the end result is you have software that

858
00:30:06,000 --> 00:30:06,799
will run

859
00:30:06,799 --> 00:30:10,480
on on your target system

860
00:30:10,480 --> 00:30:13,120
and hopefully it works well so i want to

861
00:30:13,120 --> 00:30:15,120
point out here

862
00:30:15,120 --> 00:30:18,320
there's this option to include libraries

863
00:30:18,320 --> 00:30:20,880
and you know hardly anybody these days

864
00:30:20,880 --> 00:30:22,000
just sits down

865
00:30:22,000 --> 00:30:25,120
at their machine opens up a text editor

866
00:30:25,120 --> 00:30:26,640
and starts cranking out code all from

867
00:30:26,640 --> 00:30:28,320
scratch

868
00:30:28,320 --> 00:30:30,399
modern software development you know

869
00:30:30,399 --> 00:30:32,080
agile software development

870
00:30:32,080 --> 00:30:33,919
leverages work that's already been done

871
00:30:33,919 --> 00:30:35,279
by others because

872
00:30:35,279 --> 00:30:37,279
why reinvent the wheel if somebody's

873
00:30:37,279 --> 00:30:38,799
made a nice library available

874
00:30:38,799 --> 00:30:40,799
you can just include that and so there's

875
00:30:40,799 --> 00:30:42,880
lots of open source libraries

876
00:30:42,880 --> 00:30:46,159
there's also commercial libraries that

877
00:30:46,159 --> 00:30:48,399
are available for purchase that make

878
00:30:48,399 --> 00:30:50,480
some of those standard functions

879
00:30:50,480 --> 00:30:52,960
widely available and so if you're

880
00:30:52,960 --> 00:30:54,559
developing something

881
00:30:54,559 --> 00:30:58,320
specific to your use case but you have

882
00:30:58,320 --> 00:31:01,600
components or or libraries

883
00:31:01,600 --> 00:31:04,000
that have been developed by others you

884
00:31:04,000 --> 00:31:05,440
can include those right in

885
00:31:05,440 --> 00:31:08,799
through the build process and so we've

886
00:31:08,799 --> 00:31:09,519
developed this

887
00:31:09,519 --> 00:31:12,880
this model for software and

888
00:31:12,880 --> 00:31:14,799
it really kind of breaks down into these

889
00:31:14,799 --> 00:31:16,799
four areas so

890
00:31:16,799 --> 00:31:19,840
there's products this is kind of your

891
00:31:19,840 --> 00:31:23,039
you know your general idea of of

892
00:31:23,039 --> 00:31:24,399
functionality that you have in your

893
00:31:24,399 --> 00:31:26,399
software um

894
00:31:26,399 --> 00:31:29,600
there's packages that are specific um

895
00:31:29,600 --> 00:31:32,799
bundles of software that uh

896
00:31:32,799 --> 00:31:36,080
you know one instance of that product

897
00:31:36,080 --> 00:31:38,320
and within that package it contains

898
00:31:38,320 --> 00:31:39,840
multiple components so these are like

899
00:31:39,840 --> 00:31:41,600
the individual files

900
00:31:41,600 --> 00:31:43,919
that make up your software package and

901
00:31:43,919 --> 00:31:46,159
then each of those files

902
00:31:46,159 --> 00:31:48,559
in particular the binaries or libraries

903
00:31:48,559 --> 00:31:49,360
contains

904
00:31:49,360 --> 00:31:52,479
one or more functions

905
00:31:52,960 --> 00:31:55,519
and so if we want to do you know that

906
00:31:55,519 --> 00:31:56,880
archaeological

907
00:31:56,880 --> 00:31:59,840
generation of an s-bom we kind of have

908
00:31:59,840 --> 00:32:00,320
to go

909
00:32:00,320 --> 00:32:02,799
backwards right so we start with a

910
00:32:02,799 --> 00:32:03,919
software package

911
00:32:03,919 --> 00:32:06,720
that's a representation of a product and

912
00:32:06,720 --> 00:32:07,279
we do

913
00:32:07,279 --> 00:32:09,039
some work to unpackage it usually this

914
00:32:09,039 --> 00:32:10,559
is pretty straightforward

915
00:32:10,559 --> 00:32:13,039
um because a lot of the packaging tools

916
00:32:13,039 --> 00:32:14,640
have an

917
00:32:14,640 --> 00:32:17,679
unpackaged kind of equivalent

918
00:32:17,679 --> 00:32:20,480
and then you know based on the binary

919
00:32:20,480 --> 00:32:21,039
file

920
00:32:21,039 --> 00:32:24,080
we can disassemble that so there's tools

921
00:32:24,080 --> 00:32:25,039
that make that

922
00:32:25,039 --> 00:32:27,440
pretty easy to do probably a lot of you

923
00:32:27,440 --> 00:32:30,000
are familiar with ida pro or guidra

924
00:32:30,000 --> 00:32:31,760
rose also has a disassembler that can do

925
00:32:31,760 --> 00:32:33,440
that and that's what we use

926
00:32:33,440 --> 00:32:37,519
but it produces um this assembly code

927
00:32:37,519 --> 00:32:38,880
and you can actually take this a step

928
00:32:38,880 --> 00:32:40,320
further you could run it through a

929
00:32:40,320 --> 00:32:42,240
decompiler and attempt to get

930
00:32:42,240 --> 00:32:44,799
source code out but a lot of times that

931
00:32:44,799 --> 00:32:46,399
doesn't work super well

932
00:32:46,399 --> 00:32:47,919
because as i mentioned it's you know

933
00:32:47,919 --> 00:32:50,320
this this lossy process

934
00:32:50,320 --> 00:32:52,240
so a lot of reverse engineers you know

935
00:32:52,240 --> 00:32:53,360
people that are analyzing

936
00:32:53,360 --> 00:32:55,279
software at this level kind of spend

937
00:32:55,279 --> 00:32:56,640
their time in here

938
00:32:56,640 --> 00:33:00,320
looking at the the disassembly

939
00:33:00,320 --> 00:33:02,960
all right so if we're able to get those

940
00:33:02,960 --> 00:33:03,679
um

941
00:33:03,679 --> 00:33:04,880
you know if we're able to get to the

942
00:33:04,880 --> 00:33:07,200
point where we've disassembled the file

943
00:33:07,200 --> 00:33:09,200
then we have tools that can kind of look

944
00:33:09,200 --> 00:33:11,440
at you know those functions

945
00:33:11,440 --> 00:33:13,600
and so as i mentioned in our our

946
00:33:13,600 --> 00:33:14,720
software data model

947
00:33:14,720 --> 00:33:17,600
before we have products packages

948
00:33:17,600 --> 00:33:19,760
components and functions

949
00:33:19,760 --> 00:33:21,679
and another way to think about these is

950
00:33:21,679 --> 00:33:24,399
is kind of this multi-part type graph

951
00:33:24,399 --> 00:33:27,600
so products have packages

952
00:33:27,600 --> 00:33:29,120
you know maybe different versions of

953
00:33:29,120 --> 00:33:31,840
that product are

954
00:33:31,840 --> 00:33:34,880
produced in these different packages

955
00:33:34,880 --> 00:33:36,320
and then within a package you have

956
00:33:36,320 --> 00:33:39,200
various components and the component has

957
00:33:39,200 --> 00:33:42,480
various functions so this is nice

958
00:33:42,480 --> 00:33:44,799
if you can if you can get this

959
00:33:44,799 --> 00:33:45,519
understanding

960
00:33:45,519 --> 00:33:48,720
of software the problem is there's some

961
00:33:48,720 --> 00:33:50,720
ambiguity in this graph

962
00:33:50,720 --> 00:33:55,120
because at least the bottom two levels

963
00:33:55,120 --> 00:33:56,960
there might be overlap right there might

964
00:33:56,960 --> 00:33:58,240
be collisions

965
00:33:58,240 --> 00:34:01,519
where a single function

966
00:34:01,519 --> 00:34:05,279
exists in multiple components

967
00:34:05,279 --> 00:34:08,879
and there's various reasons for this um

968
00:34:08,879 --> 00:34:10,480
so i probably won't get into all those

969
00:34:10,480 --> 00:34:11,918
right now but but

970
00:34:11,918 --> 00:34:13,520
one reason this happens is because

971
00:34:13,520 --> 00:34:15,199
you've got multiple versions of a

972
00:34:15,199 --> 00:34:16,719
library let's say

973
00:34:16,719 --> 00:34:18,560
and if code doesn't change between

974
00:34:18,560 --> 00:34:20,159
versions for a particular

975
00:34:20,159 --> 00:34:22,000
function then it's going to stay the

976
00:34:22,000 --> 00:34:23,679
same and so you'll have that same

977
00:34:23,679 --> 00:34:25,918
um you'll have that same function in

978
00:34:25,918 --> 00:34:27,599
multiple versions

979
00:34:27,599 --> 00:34:29,119
another reason it might happen is if

980
00:34:29,119 --> 00:34:31,359
there's kind of this

981
00:34:31,359 --> 00:34:33,918
like almost inheritance or dependency

982
00:34:33,918 --> 00:34:35,918
within your component so if component a

983
00:34:35,918 --> 00:34:38,719
relies on component b and the

984
00:34:38,719 --> 00:34:40,480
functionality or the function is coming

985
00:34:40,480 --> 00:34:41,599
from

986
00:34:41,599 --> 00:34:45,119
that library at the kind of at the top

987
00:34:45,119 --> 00:34:47,119
then that might show up in multiple

988
00:34:47,119 --> 00:34:48,560
places

989
00:34:48,560 --> 00:34:50,159
so these are some of the problems you

990
00:34:50,159 --> 00:34:51,760
have to deal with when you're looking at

991
00:34:51,760 --> 00:34:52,560
software

992
00:34:52,560 --> 00:34:56,079
kind of from this bottom-up approach

993
00:34:56,079 --> 00:34:57,440
and this is what we've been working on

994
00:34:57,440 --> 00:35:00,079
in our tool

995
00:35:00,560 --> 00:35:03,839
all right so

996
00:35:03,920 --> 00:35:06,880
let's let's kind of fast forward a

997
00:35:06,880 --> 00:35:07,839
little bit here

998
00:35:07,839 --> 00:35:09,359
um since i know we're getting low on

999
00:35:09,359 --> 00:35:11,520
time but um

1000
00:35:11,520 --> 00:35:15,200
our tool long claw is is

1001
00:35:15,200 --> 00:35:17,119
functional and we can generate a

1002
00:35:17,119 --> 00:35:18,720
software bill of materials

1003
00:35:18,720 --> 00:35:20,160
so over here on the right i promised i

1004
00:35:20,160 --> 00:35:21,680
would show you what what an s bomb looks

1005
00:35:21,680 --> 00:35:22,240
like

1006
00:35:22,240 --> 00:35:25,920
but this is one that we

1007
00:35:25,920 --> 00:35:28,960
we generated for wget and this is in

1008
00:35:28,960 --> 00:35:30,720
spdx format

1009
00:35:30,720 --> 00:35:32,320
one of the popular formats for doing

1010
00:35:32,320 --> 00:35:34,640
s-bombs um

1011
00:35:34,640 --> 00:35:36,560
our tool has a series of uh like

1012
00:35:36,560 --> 00:35:38,800
analytics so these kind of heuristic

1013
00:35:38,800 --> 00:35:42,400
algorithms that kind of deconflict

1014
00:35:42,400 --> 00:35:44,880
these ambiguities in the graph and try

1015
00:35:44,880 --> 00:35:46,160
to make um

1016
00:35:46,160 --> 00:35:49,359
a good uh approximation of which

1017
00:35:49,359 --> 00:35:51,200
uh specific version or specific

1018
00:35:51,200 --> 00:35:52,720
component is

1019
00:35:52,720 --> 00:35:54,880
included in that software it's not

1020
00:35:54,880 --> 00:35:58,000
perfect it doesn't always work

1021
00:35:58,000 --> 00:36:00,079
quite often we aren't able to

1022
00:36:00,079 --> 00:36:01,280
distinguish between two

1023
00:36:01,280 --> 00:36:02,880
versions so we have to just leave that

1024
00:36:02,880 --> 00:36:05,200
out for now so

1025
00:36:05,200 --> 00:36:07,119
we're working on on better methods and

1026
00:36:07,119 --> 00:36:09,119
better tools that can

1027
00:36:09,119 --> 00:36:14,640
help to disambiguate those relationships

1028
00:36:15,359 --> 00:36:16,880
uh another thing that we're looking at

1029
00:36:16,880 --> 00:36:18,800
currently is there's this wealth of

1030
00:36:18,800 --> 00:36:19,520
information

1031
00:36:19,520 --> 00:36:23,280
for open source um packages

1032
00:36:23,280 --> 00:36:25,359
from many of the popular package

1033
00:36:25,359 --> 00:36:26,480
managers so

1034
00:36:26,480 --> 00:36:28,480
if you're familiar with debian

1035
00:36:28,480 --> 00:36:30,480
distributions they have the apt

1036
00:36:30,480 --> 00:36:33,520
uh package manager and

1037
00:36:33,520 --> 00:36:36,240
they make very clear you know how all

1038
00:36:36,240 --> 00:36:37,680
those relationships

1039
00:36:37,680 --> 00:36:40,960
um are are structured in

1040
00:36:40,960 --> 00:36:44,240
in this uh system so we think that we

1041
00:36:44,240 --> 00:36:44,720
can

1042
00:36:44,720 --> 00:36:46,480
leverage that information to help enrich

1043
00:36:46,480 --> 00:36:47,839
our database and

1044
00:36:47,839 --> 00:36:49,359
map out some of those dependencies so

1045
00:36:49,359 --> 00:36:50,320
that's one of the things we're working

1046
00:36:50,320 --> 00:36:54,000
on currently

1047
00:36:54,000 --> 00:36:55,839
all right oh i see a question popped up

1048
00:36:55,839 --> 00:36:57,599
are there methods or metrics for

1049
00:36:57,599 --> 00:36:59,359
characterizing any uncertainty in the

1050
00:36:59,359 --> 00:37:01,599
component estimation matching

1051
00:37:01,599 --> 00:37:04,720
and like for example which version

1052
00:37:04,720 --> 00:37:06,880
um we don't currently have that but it's

1053
00:37:06,880 --> 00:37:08,079
certainly something we've we've

1054
00:37:08,079 --> 00:37:09,680
talked about like it would be really

1055
00:37:09,680 --> 00:37:12,000
nice to be able to say

1056
00:37:12,000 --> 00:37:14,800
you know how confident are we that this

1057
00:37:14,800 --> 00:37:15,440
uh

1058
00:37:15,440 --> 00:37:17,680
component is the one that's showing up

1059
00:37:17,680 --> 00:37:19,280
in this software

1060
00:37:19,280 --> 00:37:21,760
so i agree that that would be beneficial

1061
00:37:21,760 --> 00:37:22,960
and we will definitely

1062
00:37:22,960 --> 00:37:26,000
continue to work on that

1063
00:37:26,000 --> 00:37:28,560
okay so let's say we have an s-bomb well

1064
00:37:28,560 --> 00:37:29,440
now what

1065
00:37:29,440 --> 00:37:32,160
um you know an s-bomb in and of itself

1066
00:37:32,160 --> 00:37:33,920
like i said isn't a silver bullet

1067
00:37:33,920 --> 00:37:35,760
it's not going to solve all our problems

1068
00:37:35,760 --> 00:37:36,960
um

1069
00:37:36,960 --> 00:37:38,800
it's you know it may have helped a

1070
00:37:38,800 --> 00:37:39,839
little bit with the solarwinds

1071
00:37:39,839 --> 00:37:41,440
compromise

1072
00:37:41,440 --> 00:37:45,359
depending on how the s-bomb was produced

1073
00:37:45,359 --> 00:37:47,599
but if the bad guys have access to the

1074
00:37:47,599 --> 00:37:48,560
build system

1075
00:37:48,560 --> 00:37:50,800
then they could probably just as easily

1076
00:37:50,800 --> 00:37:52,240
uh

1077
00:37:52,240 --> 00:37:54,560
you know affect the s-bomb that you're

1078
00:37:54,560 --> 00:37:56,079
getting from the company

1079
00:37:56,079 --> 00:37:58,560
so it's it's debatable whether or not

1080
00:37:58,560 --> 00:37:59,839
that would help there

1081
00:37:59,839 --> 00:38:01,200
but some of the other problems uh

1082
00:38:01,200 --> 00:38:03,040
definitely could be helped uh

1083
00:38:03,040 --> 00:38:04,480
by this one of the things we're looking

1084
00:38:04,480 --> 00:38:06,640
at is you know how can we identify

1085
00:38:06,640 --> 00:38:08,240
known vulnerabilities that have been

1086
00:38:08,240 --> 00:38:09,839
disclosed like those

1087
00:38:09,839 --> 00:38:12,480
vulnerabilities in software that we're

1088
00:38:12,480 --> 00:38:12,880
running

1089
00:38:12,880 --> 00:38:15,119
in our environment so we'd like to be

1090
00:38:15,119 --> 00:38:16,160
able to just

1091
00:38:16,160 --> 00:38:18,640
um you know submit that those software

1092
00:38:18,640 --> 00:38:20,320
binaries or firmware

1093
00:38:20,320 --> 00:38:21,760
and determine if any known

1094
00:38:21,760 --> 00:38:23,680
vulnerabilities uh exist

1095
00:38:23,680 --> 00:38:26,880
for them so an sbom can help with that

1096
00:38:26,880 --> 00:38:27,920
but one of the things that we've

1097
00:38:27,920 --> 00:38:30,480
realized uh is that

1098
00:38:30,480 --> 00:38:34,079
while it might help um you know kind of

1099
00:38:34,079 --> 00:38:37,119
point a finger at a component that could

1100
00:38:37,119 --> 00:38:38,560
have a vulnerability

1101
00:38:38,560 --> 00:38:41,280
uh with just that very high level view

1102
00:38:41,280 --> 00:38:41,920
of

1103
00:38:41,920 --> 00:38:44,400
the software components you can't really

1104
00:38:44,400 --> 00:38:46,160
pinpoint whether or not

1105
00:38:46,160 --> 00:38:48,800
that vulnerability is present and um

1106
00:38:48,800 --> 00:38:49,680
affects

1107
00:38:49,680 --> 00:38:52,640
that software and so to do that we need

1108
00:38:52,640 --> 00:38:53,440
to go kind of

1109
00:38:53,440 --> 00:38:56,800
uh to a more granular view and the

1110
00:38:56,800 --> 00:38:57,920
example here on the right is just

1111
00:38:57,920 --> 00:38:59,040
showing how we do that

1112
00:38:59,040 --> 00:39:00,640
so we can actually look at those

1113
00:39:00,640 --> 00:39:02,560
functions

1114
00:39:02,560 --> 00:39:04,560
within the component and determine if

1115
00:39:04,560 --> 00:39:05,599
they're present in

1116
00:39:05,599 --> 00:39:08,880
our binary there's a lot of other work

1117
00:39:08,880 --> 00:39:10,000
that we're doing

1118
00:39:10,000 --> 00:39:11,359
i didn't have time to talk about it all

1119
00:39:11,359 --> 00:39:13,520
today but

1120
00:39:13,520 --> 00:39:16,560
certainly you know we need tools and

1121
00:39:16,560 --> 00:39:18,400
capabilities to be able to

1122
00:39:18,400 --> 00:39:21,359
discover unknown vulnerabilities because

1123
00:39:21,359 --> 00:39:21,839
that's

1124
00:39:21,839 --> 00:39:23,440
kind of the whole point if if you know

1125
00:39:23,440 --> 00:39:24,880
about them they're easy to find if you

1126
00:39:24,880 --> 00:39:25,760
don't

1127
00:39:25,760 --> 00:39:27,839
then those are the ones that can really

1128
00:39:27,839 --> 00:39:28,880
bite you

1129
00:39:28,880 --> 00:39:30,640
so we're working on tools that can do

1130
00:39:30,640 --> 00:39:32,000
that um

1131
00:39:32,000 --> 00:39:34,000
we're also looking on at ways to kind of

1132
00:39:34,000 --> 00:39:35,839
track the evolution of software

1133
00:39:35,839 --> 00:39:38,240
so if you know we're ingesting libraries

1134
00:39:38,240 --> 00:39:39,520
into our database

1135
00:39:39,520 --> 00:39:42,000
how do they change between versions and

1136
00:39:42,000 --> 00:39:43,440
are they fixing

1137
00:39:43,440 --> 00:39:44,880
vulnerabilities is the software getting

1138
00:39:44,880 --> 00:39:47,839
better over time

1139
00:39:47,839 --> 00:39:50,160
binary attestation is really interesting

1140
00:39:50,160 --> 00:39:51,359
area to look at

1141
00:39:51,359 --> 00:39:56,480
it's basically you know can you

1142
00:39:56,480 --> 00:39:59,200
describe your software that you've built

1143
00:39:59,200 --> 00:40:00,960
you know in your source code

1144
00:40:00,960 --> 00:40:03,760
and certify that that functionality

1145
00:40:03,760 --> 00:40:05,200
makes it through to the binary that no

1146
00:40:05,200 --> 00:40:06,720
additional functionality

1147
00:40:06,720 --> 00:40:09,040
is included so we're working on some

1148
00:40:09,040 --> 00:40:11,119
tools for that uh concolic testing is

1149
00:40:11,119 --> 00:40:11,760
another

1150
00:40:11,760 --> 00:40:14,880
approach to look at you know how inputs

1151
00:40:14,880 --> 00:40:15,760
affect

1152
00:40:15,760 --> 00:40:18,240
uh kind of the code flow through your

1153
00:40:18,240 --> 00:40:19,040
program

1154
00:40:19,040 --> 00:40:22,720
and we want to basically be able to

1155
00:40:22,720 --> 00:40:24,880
show which inputs cause certain

1156
00:40:24,880 --> 00:40:27,440
behaviors

1157
00:40:29,040 --> 00:40:31,040
and then the last one is something that

1158
00:40:31,040 --> 00:40:32,240
some of my colleagues are working on

1159
00:40:32,240 --> 00:40:33,119
which is

1160
00:40:33,119 --> 00:40:35,200
even if you know that this you know a

1161
00:40:35,200 --> 00:40:37,040
particular software binary

1162
00:40:37,040 --> 00:40:39,440
has vulnerabilities in it well that's

1163
00:40:39,440 --> 00:40:40,960
not the end of the story right like how

1164
00:40:40,960 --> 00:40:42,560
does that affect the bigger picture what

1165
00:40:42,560 --> 00:40:43,280
is the actual

1166
00:40:43,280 --> 00:40:45,520
impact of that because maybe it's

1167
00:40:45,520 --> 00:40:47,119
running in such a way that

1168
00:40:47,119 --> 00:40:48,880
that vulnerability doesn't really matter

1169
00:40:48,880 --> 00:40:50,319
it's mitigated by

1170
00:40:50,319 --> 00:40:51,760
you know the network settings or

1171
00:40:51,760 --> 00:40:53,839
something and so how do we take what we

1172
00:40:53,839 --> 00:40:54,640
know about a

1173
00:40:54,640 --> 00:40:57,280
a particular piece of software and then

1174
00:40:57,280 --> 00:40:58,880
apply that to this bigger systems

1175
00:40:58,880 --> 00:40:59,760
problem

1176
00:40:59,760 --> 00:41:02,880
and figure out that impact oh i see

1177
00:41:02,880 --> 00:41:04,319
another question has popped up

1178
00:41:04,319 --> 00:41:08,319
has s bombed integrated into your

1179
00:41:08,319 --> 00:41:10,960
sex cm controls if so where did you

1180
00:41:10,960 --> 00:41:13,599
integrate s bomb in the cm program

1181
00:41:13,599 --> 00:41:17,200
um so i don't think that has

1182
00:41:17,200 --> 00:41:20,240
happened yet for us so i don't

1183
00:41:20,240 --> 00:41:22,079
work directly for the organization

1184
00:41:22,079 --> 00:41:23,359
that's responsible for the nist

1185
00:41:23,359 --> 00:41:27,280
uh 853 controls in our organization

1186
00:41:27,280 --> 00:41:28,880
so the tools we're developing certainly

1187
00:41:28,880 --> 00:41:31,040
could be applied there

1188
00:41:31,040 --> 00:41:34,079
but they haven't yet so um

1189
00:41:34,079 --> 00:41:35,839
future future work i guess future

1190
00:41:35,839 --> 00:41:38,720
progress for us

1191
00:41:41,200 --> 00:41:43,280
all right so i just want to wrap up and

1192
00:41:43,280 --> 00:41:45,839
leave a little bit of time for questions

1193
00:41:45,839 --> 00:41:48,400
in conclusion software is is very

1194
00:41:48,400 --> 00:41:49,280
complex

1195
00:41:49,280 --> 00:41:51,359
and it's full of risks to organizations

1196
00:41:51,359 --> 00:41:54,079
that are that are using it

1197
00:41:54,079 --> 00:41:56,560
in some cases even our security best

1198
00:41:56,560 --> 00:41:57,680
practices make this

1199
00:41:57,680 --> 00:42:00,319
a more challenging problem because we

1200
00:42:00,319 --> 00:42:02,319
have this constant update process

1201
00:42:02,319 --> 00:42:05,280
and lots of new software coming in that

1202
00:42:05,280 --> 00:42:07,280
really should be evaluated before it's

1203
00:42:07,280 --> 00:42:08,560
deployed

1204
00:42:08,560 --> 00:42:10,240
uh there are many tools available but

1205
00:42:10,240 --> 00:42:11,920
there's still gaps that exist

1206
00:42:11,920 --> 00:42:14,839
in kind of this bigger picture broader

1207
00:42:14,839 --> 00:42:17,440
ecosystem and we think that

1208
00:42:17,440 --> 00:42:19,599
automation is key to solving these

1209
00:42:19,599 --> 00:42:20,960
problems because

1210
00:42:20,960 --> 00:42:24,400
just because of the scale of the problem

1211
00:42:24,400 --> 00:42:26,960
so i talked about s-bombs and how they

1212
00:42:26,960 --> 00:42:29,280
might help to identify vulnerabilities

1213
00:42:29,280 --> 00:42:32,240
in our supply chain but definitely

1214
00:42:32,240 --> 00:42:33,359
further work is needed

1215
00:42:33,359 --> 00:42:35,839
to build new tools and address some of

1216
00:42:35,839 --> 00:42:36,800
those gaps

1217
00:42:36,800 --> 00:42:38,880
and find unknown vulnerabilities and

1218
00:42:38,880 --> 00:42:41,920
what their impact is on our devices

1219
00:42:41,920 --> 00:42:43,359
so with that i will open it up to

1220
00:42:43,359 --> 00:42:45,839
questions

1221
00:42:50,000 --> 00:42:52,400
and thank you all for for sitting

1222
00:42:52,400 --> 00:42:55,440
through that and listening to me

1223
00:42:56,880 --> 00:42:59,359
all right thank you so much it was an

1224
00:42:59,359 --> 00:43:01,599
interesting talk

1225
00:43:01,599 --> 00:43:05,280
okay i think we have one question

1226
00:43:11,680 --> 00:43:14,480
so crazy mirror you say you have a

1227
00:43:14,480 --> 00:43:15,119
comment

1228
00:43:15,119 --> 00:43:18,640
i guess not question

1229
00:43:20,480 --> 00:43:27,599
let me see very quick here

1230
00:43:27,599 --> 00:43:29,920
okay

1231
00:43:31,680 --> 00:43:34,079
so um i have a quick question actually

1232
00:43:34,079 --> 00:43:35,359
so in your slides

1233
00:43:35,359 --> 00:43:38,400
um i didn't see any fuzzing

1234
00:43:38,400 --> 00:43:40,400
so in recent years as you might see you

1235
00:43:40,400 --> 00:43:42,400
know like in research community

1236
00:43:42,400 --> 00:43:45,920
there are uh diverse fuzzing frameworks

1237
00:43:45,920 --> 00:43:50,160
um so like uh do they help you find the

1238
00:43:50,160 --> 00:43:51,680
vulnerabilities or did you

1239
00:43:51,680 --> 00:43:54,800
integrate any fuzzing tool to enter your

1240
00:43:54,800 --> 00:43:57,119
uh like the the life cycle of your

1241
00:43:57,119 --> 00:43:59,280
software analysis

1242
00:43:59,280 --> 00:44:02,319
yeah so we haven't done that yet um that

1243
00:44:02,319 --> 00:44:03,920
that survey that i talked about some of

1244
00:44:03,920 --> 00:44:05,839
those 200 tools there were a number of

1245
00:44:05,839 --> 00:44:06,560
fuzzers

1246
00:44:06,560 --> 00:44:09,839
that we looked at and it's definitely a

1247
00:44:09,839 --> 00:44:11,520
useful tool for discovering

1248
00:44:11,520 --> 00:44:12,960
vulnerabilities like you said

1249
00:44:12,960 --> 00:44:16,160
so yeah absolutely you should do that um

1250
00:44:16,160 --> 00:44:17,760
our tools have mostly been focused kind

1251
00:44:17,760 --> 00:44:19,599
of on a on static

1252
00:44:19,599 --> 00:44:21,760
analysis so not actually executing the

1253
00:44:21,760 --> 00:44:22,800
code

1254
00:44:22,800 --> 00:44:24,400
whereas fuzzers generally want to

1255
00:44:24,400 --> 00:44:25,839
execute the code

1256
00:44:25,839 --> 00:44:28,160
to be able to find those vulnerabilities

1257
00:44:28,160 --> 00:44:29,359
yes yes

1258
00:44:29,359 --> 00:44:32,240
makes sense right so yeah yeah this idea

1259
00:44:32,240 --> 00:44:32,800
of

1260
00:44:32,800 --> 00:44:35,040
testing that i talked about also is is

1261
00:44:35,040 --> 00:44:36,079
pretty powerful

1262
00:44:36,079 --> 00:44:38,960
um in that regard as well because one of

1263
00:44:38,960 --> 00:44:40,079
the challenges in in

1264
00:44:40,079 --> 00:44:42,720
fuzzing is getting inputs that will kind

1265
00:44:42,720 --> 00:44:43,119
of

1266
00:44:43,119 --> 00:44:45,359
exercise the functionality in your code

1267
00:44:45,359 --> 00:44:46,880
yes and there's lots of smart ways of

1268
00:44:46,880 --> 00:44:48,000
doing that people have

1269
00:44:48,000 --> 00:44:50,240
been working on that for quite a while

1270
00:44:50,240 --> 00:44:52,000
but i think concolic testing

1271
00:44:52,000 --> 00:44:55,200
is one way to approach that yes i think

1272
00:44:55,200 --> 00:44:56,720
there are some works um

1273
00:44:56,720 --> 00:44:59,040
integrated fuzzing and concolic testing

1274
00:44:59,040 --> 00:45:00,079
together

1275
00:45:00,079 --> 00:45:02,400
there are still open problems i see in

1276
00:45:02,400 --> 00:45:04,240
top tier security conferences

1277
00:45:04,240 --> 00:45:07,920
lots of works in um fuzzing actually so

1278
00:45:07,920 --> 00:45:12,079
the idea is i mean it just finds um

1279
00:45:12,079 --> 00:45:14,720
you know undiscovered box zero day backs

1280
00:45:14,720 --> 00:45:15,440
so

1281
00:45:15,440 --> 00:45:17,359
i think which makes them kind of

1282
00:45:17,359 --> 00:45:19,190
interesting

1283
00:45:19,190 --> 00:45:21,440
[Music]

1284
00:45:21,440 --> 00:45:23,119
sorry i'm actually with two devices

1285
00:45:23,119 --> 00:45:24,640
because one of them doesn't have audio

1286
00:45:24,640 --> 00:45:26,560
so i apologize so it was misleading to

1287
00:45:26,560 --> 00:45:27,040
ask you to

1288
00:45:27,040 --> 00:45:29,599
mute me on the other one so a couple of

1289
00:45:29,599 --> 00:45:30,640
comments here uh

1290
00:45:30,640 --> 00:45:34,000
the first one is that uh solar winds was

1291
00:45:34,000 --> 00:45:37,280
not so much an s-bomb failure um

1292
00:45:37,280 --> 00:45:40,400
as it is an architecture failure

1293
00:45:40,400 --> 00:45:42,480
because why would you give full

1294
00:45:42,480 --> 00:45:44,319
permission to everything for software

1295
00:45:44,319 --> 00:45:46,240
that needs to read some counters

1296
00:45:46,240 --> 00:45:48,880
there are far better ways to to do that

1297
00:45:48,880 --> 00:45:49,520
and

1298
00:45:49,520 --> 00:45:51,040
this is where a lot of the problems are

1299
00:45:51,040 --> 00:45:53,280
coming because a lot of other security

1300
00:45:53,280 --> 00:45:56,400
principles like minimum privilege or

1301
00:45:56,400 --> 00:45:57,920
are just violated in terms of

1302
00:45:57,920 --> 00:46:00,400
architecture the reason i'm saying this

1303
00:46:00,400 --> 00:46:01,839
is because um

1304
00:46:01,839 --> 00:46:04,880
there i have i have observed a number

1305
00:46:04,880 --> 00:46:07,119
of nation state introduced

1306
00:46:07,119 --> 00:46:09,520
vulnerabilities which are pure

1307
00:46:09,520 --> 00:46:12,640
pure uh possible deniability

1308
00:46:12,640 --> 00:46:15,280
what i mean is that we have a foreign

1309
00:46:15,280 --> 00:46:16,720
agent working for a company

1310
00:46:16,720 --> 00:46:18,560
inserting particular piece of code that

1311
00:46:18,560 --> 00:46:20,319
intentionally doesn't do

1312
00:46:20,319 --> 00:46:24,319
a buffer overflow check and then we see

1313
00:46:24,319 --> 00:46:26,800
the same nation state do exploitation of

1314
00:46:26,800 --> 00:46:28,880
this very bug

1315
00:46:28,880 --> 00:46:32,720
using that particular uh buffer so

1316
00:46:32,720 --> 00:46:35,200
you can't catch this with s-bomb because

1317
00:46:35,200 --> 00:46:36,800
for all intensive purposes

1318
00:46:36,800 --> 00:46:40,560
this code was meant to be there

1319
00:46:40,560 --> 00:46:43,839
so i think s-bomb is really good but we

1320
00:46:43,839 --> 00:46:45,680
also need to pay attention to properly

1321
00:46:45,680 --> 00:46:46,720
training people

1322
00:46:46,720 --> 00:46:49,200
to uh not only develop software properly

1323
00:46:49,200 --> 00:46:53,040
but also to deploy it properly

1324
00:46:53,040 --> 00:46:55,520
yeah i absolutely agree that was my

1325
00:46:55,520 --> 00:46:56,160
first question

1326
00:46:56,160 --> 00:46:58,880
is like why do you have this uh

1327
00:46:58,880 --> 00:47:00,000
management system

1328
00:47:00,000 --> 00:47:01,440
that can talk to all your infrastructure

1329
00:47:01,440 --> 00:47:03,680
but can also call out to random

1330
00:47:03,680 --> 00:47:07,119
you know ip addresses yeah i personally

1331
00:47:07,119 --> 00:47:09,119
stopped using solarwinds some 15 years

1332
00:47:09,119 --> 00:47:09,680
ago

1333
00:47:09,680 --> 00:47:11,520
at the time was much more software but i

1334
00:47:11,520 --> 00:47:13,040
remember that i rewrote all the

1335
00:47:13,040 --> 00:47:14,720
capability that i needed

1336
00:47:14,720 --> 00:47:17,680
in under two weeks uh in peru and it was

1337
00:47:17,680 --> 00:47:18,880
like why do i even

1338
00:47:18,880 --> 00:47:22,800
need this thing but anyway um

1339
00:47:22,800 --> 00:47:24,800
the rest of my case uh just another note

1340
00:47:24,800 --> 00:47:26,400
also could they know me on before they

1341
00:47:26,400 --> 00:47:27,760
were acquired by

1342
00:47:27,760 --> 00:47:30,640
uh uh

1343
00:47:30,800 --> 00:47:32,800
but anyway they had a piece of software

1344
00:47:32,800 --> 00:47:34,160
that did exactly what you're trying to

1345
00:47:34,160 --> 00:47:34,880
do

1346
00:47:34,880 --> 00:47:37,520
the i remember about six years ago they

1347
00:47:37,520 --> 00:47:39,760
had a huge library

1348
00:47:39,760 --> 00:47:43,599
of uh of binary objects and functions

1349
00:47:43,599 --> 00:47:46,640
so you could even feed them an iso they

1350
00:47:46,640 --> 00:47:47,040
would

1351
00:47:47,040 --> 00:47:48,880
read the file system extract the

1352
00:47:48,880 --> 00:47:50,480
different components

1353
00:47:50,480 --> 00:47:53,119
and then dissect it uh basically they

1354
00:47:53,119 --> 00:47:54,880
would be looking for the function calls

1355
00:47:54,880 --> 00:47:56,640
um and they would take those they had

1356
00:47:56,640 --> 00:47:57,920
smart hashing

1357
00:47:57,920 --> 00:48:00,160
and they would match functions to known

1358
00:48:00,160 --> 00:48:01,839
functions from particular particular

1359
00:48:01,839 --> 00:48:03,119
versions of software

1360
00:48:03,119 --> 00:48:05,119
so i forgot the name of the product

1361
00:48:05,119 --> 00:48:07,119
they're currently um

1362
00:48:07,119 --> 00:48:10,240
owned by uh synopsis so

1363
00:48:10,240 --> 00:48:12,880
you may look at that as well i think uh

1364
00:48:12,880 --> 00:48:14,880
black duck

1365
00:48:14,880 --> 00:48:16,640
is that the one yeah it sounds premier

1366
00:48:16,640 --> 00:48:18,480
yeah yeah yeah there's a

1367
00:48:18,480 --> 00:48:21,040
few tools out there that can uh generate

1368
00:48:21,040 --> 00:48:23,119
s-bombs this way

1369
00:48:23,119 --> 00:48:26,079
um yeah anyway so definitely commercial

1370
00:48:26,079 --> 00:48:27,599
products available

1371
00:48:27,599 --> 00:48:29,760
yeah yeah because i mean let's face it

1372
00:48:29,760 --> 00:48:31,040
um

1373
00:48:31,040 --> 00:48:33,760
most companies are so uh final budget

1374
00:48:33,760 --> 00:48:34,800
they would not

1375
00:48:34,800 --> 00:48:36,720
wan they would not want to deploy

1376
00:48:36,720 --> 00:48:39,200
additional screening of their software

1377
00:48:39,200 --> 00:48:40,800
and their software build

1378
00:48:40,800 --> 00:48:43,680
um when they do that when they when they

1379
00:48:43,680 --> 00:48:45,040
release software

1380
00:48:45,040 --> 00:48:49,839
yeah just the reality yeah

1381
00:48:50,880 --> 00:48:53,839
thank you for the presentation all right

1382
00:48:53,839 --> 00:48:54,559
so

1383
00:48:54,559 --> 00:48:56,720
we are going to i i think we have some

1384
00:48:56,720 --> 00:48:58,079
questions in the chat

1385
00:48:58,079 --> 00:49:01,440
also um one question kevin is do you

1386
00:49:01,440 --> 00:49:02,000
expect

1387
00:49:02,000 --> 00:49:05,599
long claw to be commercialized someday

1388
00:49:05,599 --> 00:49:07,760
um yeah we would really like to

1389
00:49:07,760 --> 00:49:09,440
commercialize it so we've actually been

1390
00:49:09,440 --> 00:49:10,000
talking

1391
00:49:10,000 --> 00:49:13,440
um to our sponsor about that

1392
00:49:13,440 --> 00:49:15,680
and trying to understand if if that's

1393
00:49:15,680 --> 00:49:17,280
something we can do so

1394
00:49:17,280 --> 00:49:19,680
all the stuff that we've built to do the

1395
00:49:19,680 --> 00:49:20,800
um

1396
00:49:20,800 --> 00:49:23,520
s bomb generation right now is you know

1397
00:49:23,520 --> 00:49:24,960
our open source tools so it shouldn't

1398
00:49:24,960 --> 00:49:26,400
really be a problem to

1399
00:49:26,400 --> 00:49:27,680
open source that we just have to kind of

1400
00:49:27,680 --> 00:49:29,839
get the sponsor buy-in before we can do

1401
00:49:29,839 --> 00:49:31,920
that

1402
00:49:35,839 --> 00:49:37,040
sorry i didn't even see the chat i was

1403
00:49:37,040 --> 00:49:40,960
looking at the q a yeah

1404
00:49:41,119 --> 00:49:44,400
anything else from there yeah another

1405
00:49:44,400 --> 00:49:45,440
question from paul

1406
00:49:45,440 --> 00:49:48,480
um how is s-bomb different from

1407
00:49:48,480 --> 00:49:53,680
uh capabilities that github uh has

1408
00:49:53,760 --> 00:49:57,200
um i guess i'm not sure what specific

1409
00:49:57,200 --> 00:49:59,280
capabilities

1410
00:49:59,280 --> 00:50:02,960
but you know if you have the source code

1411
00:50:02,960 --> 00:50:05,119
it's generally pretty easy to

1412
00:50:05,119 --> 00:50:08,319
uh to produce the s-bomb code linting

1413
00:50:08,319 --> 00:50:08,960
okay

1414
00:50:08,960 --> 00:50:10,880
so yeah so that's kind of the separate

1415
00:50:10,880 --> 00:50:12,000
area so

1416
00:50:12,000 --> 00:50:14,240
looking at source code for bugs and

1417
00:50:14,240 --> 00:50:15,040
stuff

1418
00:50:15,040 --> 00:50:16,800
um so yeah s-bomb doesn't really address

1419
00:50:16,800 --> 00:50:18,160
that but

1420
00:50:18,160 --> 00:50:20,319
we do have some other tools in longclaw

1421
00:50:20,319 --> 00:50:22,400
that do kind of source code

1422
00:50:22,400 --> 00:50:24,960
analysis and so you know probably pretty

1423
00:50:24,960 --> 00:50:26,640
similar to what's in github

1424
00:50:26,640 --> 00:50:28,720
and there's a lot of tools as i showed

1425
00:50:28,720 --> 00:50:31,839
that kind of fit in that space

1426
00:50:35,119 --> 00:50:37,680
all right i think we are out of time and

1427
00:50:37,680 --> 00:50:39,440
these are the old questions

1428
00:50:39,440 --> 00:50:42,319
uh leah thank you so much it was uh nice

1429
00:50:42,319 --> 00:50:43,760
to you know like

1430
00:50:43,760 --> 00:50:45,760
listen all these interesting topics and

1431
00:50:45,760 --> 00:50:47,280
i hope that sometimes

1432
00:50:47,280 --> 00:50:50,240
when it's warmer you visit purdue the

1433
00:50:50,240 --> 00:50:50,800
best of

1434
00:50:50,800 --> 00:50:54,079
it yeah absolutely would be very happy

1435
00:50:54,079 --> 00:50:55,760
to host you here

1436
00:50:55,760 --> 00:50:58,240
okay sounds good well thank you so much

1437
00:50:58,240 --> 00:51:00,079
have a good day everyone

1438
00:51:00,079 --> 00:51:09,839
thanks levi take care

1439
00:51:16,640 --> 00:51:18,720
you

