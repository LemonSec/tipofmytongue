1
00:00:00,160 --> 00:00:02,639
hello everyone uh welcome to this

2
00:00:02,639 --> 00:00:03,360
afternoon

3
00:00:03,360 --> 00:00:06,480
serious security seminar thank you all

4
00:00:06,480 --> 00:00:08,160
for being here

5
00:00:08,160 --> 00:00:10,880
so we are really pleased to have dr

6
00:00:10,880 --> 00:00:13,440
santiago torres arya speaking virtually

7
00:00:13,440 --> 00:00:14,880
today

8
00:00:14,880 --> 00:00:17,440
he will talk about practical software

9
00:00:17,440 --> 00:00:18,320
supply chain

10
00:00:18,320 --> 00:00:21,359
security and transparency so

11
00:00:21,359 --> 00:00:23,760
santiago's current research focuses on

12
00:00:23,760 --> 00:00:25,519
securing the software development

13
00:00:25,519 --> 00:00:26,400
lifecycle

14
00:00:26,400 --> 00:00:28,400
previously his research focused on

15
00:00:28,400 --> 00:00:30,480
secure password storage mechanisms

16
00:00:30,480 --> 00:00:33,440
and update systems he is the team need

17
00:00:33,440 --> 00:00:33,680
of

18
00:00:33,680 --> 00:00:35,840
in total a framework to secure the

19
00:00:35,840 --> 00:00:37,600
software development lifecycle

20
00:00:37,600 --> 00:00:40,559
as well as poly password hasher a

21
00:00:40,559 --> 00:00:42,480
password storage mechanism

22
00:00:42,480 --> 00:00:44,239
that's incredibly resilient to the

23
00:00:44,239 --> 00:00:46,559
offline password cracking

24
00:00:46,559 --> 00:00:48,719
so he also contributes to the update

25
00:00:48,719 --> 00:00:50,719
framework which is the software update

26
00:00:50,719 --> 00:00:51,520
system being

27
00:00:51,520 --> 00:00:54,399
integrated on variety of projects such

28
00:00:54,399 --> 00:00:56,559
as ducker and others

29
00:00:56,559 --> 00:00:58,320
so santiago thank you so much for

30
00:00:58,320 --> 00:00:59,840
joining joining us today

31
00:00:59,840 --> 00:01:03,440
please take it away great thank you um

32
00:01:03,440 --> 00:01:05,519
it's my pleasure to be here and uh as

33
00:01:05,519 --> 00:01:07,760
raquel was talking about uh i mostly

34
00:01:07,760 --> 00:01:08,960
care

35
00:01:08,960 --> 00:01:11,040
about how can we purdue software

36
00:01:11,040 --> 00:01:13,119
securely and how can we consume software

37
00:01:13,119 --> 00:01:14,240
securely

38
00:01:14,240 --> 00:01:17,200
um on the like global notion we call

39
00:01:17,200 --> 00:01:19,600
this software supply chain security

40
00:01:19,600 --> 00:01:21,920
today i'm going to be talking about

41
00:01:21,920 --> 00:01:23,360
exactly how can we do this in a

42
00:01:23,360 --> 00:01:25,040
practical sense

43
00:01:25,040 --> 00:01:29,040
um just to to quickly uh

44
00:01:29,040 --> 00:01:30,240
wrap what we're going to be talking

45
00:01:30,240 --> 00:01:32,240
about i am going to talk about what

46
00:01:32,240 --> 00:01:34,000
exactly is a software supply chain and

47
00:01:34,000 --> 00:01:36,000
how can they get compromised

48
00:01:36,000 --> 00:01:38,799
uh then we're going to go uh on a like

49
00:01:38,799 --> 00:01:39,680
button

50
00:01:39,680 --> 00:01:41,280
approach and we're going to see how we

51
00:01:41,280 --> 00:01:43,600
can protect critical software that's

52
00:01:43,600 --> 00:01:44,799
used in the software development

53
00:01:44,799 --> 00:01:46,159
lifecycle

54
00:01:46,159 --> 00:01:48,240
then how can we tie all of these

55
00:01:48,240 --> 00:01:49,840
security policies and all the security

56
00:01:49,840 --> 00:01:51,520
mechanisms together using a framework

57
00:01:51,520 --> 00:01:53,680
that i built called in toto

58
00:01:53,680 --> 00:01:55,520
and then we're going to see how we can

59
00:01:55,520 --> 00:01:57,200
use all of this information to create a

60
00:01:57,200 --> 00:01:57,759
global

61
00:01:57,759 --> 00:01:59,840
ledger of software supply chain meta

62
00:01:59,840 --> 00:02:01,119
information

63
00:02:01,119 --> 00:02:03,280
um and finally we're going to talk about

64
00:02:03,280 --> 00:02:04,640
uh

65
00:02:04,640 --> 00:02:06,399
essentially what you can do when you

66
00:02:06,399 --> 00:02:08,080
know all of what's happening in the

67
00:02:08,080 --> 00:02:09,758
software supply chain which is called uh

68
00:02:09,758 --> 00:02:11,599
software supply chain intelligence

69
00:02:11,599 --> 00:02:15,200
um you may have seen a lot of work on uh

70
00:02:15,200 --> 00:02:18,319
uh dependency computing and uh maybe

71
00:02:18,319 --> 00:02:20,239
typos quoting that's the type of uh

72
00:02:20,239 --> 00:02:21,760
work that relates to software supply

73
00:02:21,760 --> 00:02:24,160
chain intelligence

74
00:02:24,160 --> 00:02:26,720
so to kick up the talk i'm going to

75
00:02:26,720 --> 00:02:27,200
actually

76
00:02:27,200 --> 00:02:30,239
derail a little bit uh let's talk about

77
00:02:30,239 --> 00:02:32,560
mass loss perimeter of needs in this

78
00:02:32,560 --> 00:02:33,840
case i'm going to call it maslow's

79
00:02:33,840 --> 00:02:35,360
parameter supply chain security

80
00:02:35,360 --> 00:02:37,200
the reason why i talk about it in this

81
00:02:37,200 --> 00:02:39,680
way is because

82
00:02:39,680 --> 00:02:42,959
it really conveys very well what exactly

83
00:02:42,959 --> 00:02:44,480
we're getting at when we're trying to

84
00:02:44,480 --> 00:02:45,920
practically protect the software supply

85
00:02:45,920 --> 00:02:46,480
chain

86
00:02:46,480 --> 00:02:48,879
in maslow's regional pyramid of needs we

87
00:02:48,879 --> 00:02:50,400
would have the fundamental needs the

88
00:02:50,400 --> 00:02:51,360
physical

89
00:02:51,360 --> 00:02:53,120
things like being having shelter and

90
00:02:53,120 --> 00:02:54,800
having food and then

91
00:02:54,800 --> 00:02:57,599
the more uh like humanistic notions like

92
00:02:57,599 --> 00:02:58,879
uh self-utilization

93
00:02:58,879 --> 00:03:01,280
learning philosophy were at the top but

94
00:03:01,280 --> 00:03:02,879
you couldn't take care of the top ones

95
00:03:02,879 --> 00:03:04,239
if you didn't take care of the bottom

96
00:03:04,239 --> 00:03:05,200
ones

97
00:03:05,200 --> 00:03:07,120
so to bring this back into the software

98
00:03:07,120 --> 00:03:09,280
supply chain security world

99
00:03:09,280 --> 00:03:11,760
this is exactly how a pyramid of supply

100
00:03:11,760 --> 00:03:13,360
chain security looks in the math login

101
00:03:13,360 --> 00:03:14,239
terms

102
00:03:14,239 --> 00:03:15,760
you would start with something called

103
00:03:15,760 --> 00:03:17,599
step security which is each individual

104
00:03:17,599 --> 00:03:18,159
step

105
00:03:18,159 --> 00:03:19,840
in the development life cycle and the

106
00:03:19,840 --> 00:03:21,360
supply chain needs to be individually

107
00:03:21,360 --> 00:03:22,560
secured

108
00:03:22,560 --> 00:03:24,799
then you will take care about what we

109
00:03:24,799 --> 00:03:26,400
call inter-step security how can you

110
00:03:26,400 --> 00:03:27,920
connect two steps and make sure that

111
00:03:27,920 --> 00:03:28,640
both

112
00:03:28,640 --> 00:03:30,159
both are aware of each other's security

113
00:03:30,159 --> 00:03:31,680
policies so that you they can be

114
00:03:31,680 --> 00:03:34,159
protected

115
00:03:34,159 --> 00:03:38,000
of artifact transfer or artifact flow

116
00:03:38,000 --> 00:03:39,040
then we're going to talk about

117
00:03:39,040 --> 00:03:40,959
interchange security which is

118
00:03:40,959 --> 00:03:42,560
essentially the dependency question how

119
00:03:42,560 --> 00:03:43,519
can you

120
00:03:43,519 --> 00:03:45,360
consume software from somebody else and

121
00:03:45,360 --> 00:03:47,040
make sure that they're actually

122
00:03:47,040 --> 00:03:49,840
uh their supply chain is actually uh not

123
00:03:49,840 --> 00:03:51,280
malicious

124
00:03:51,280 --> 00:03:53,840
and at the end uh once we build all of

125
00:03:53,840 --> 00:03:56,000
this information we can start entering

126
00:03:56,000 --> 00:03:58,400
uh in a trustworthy fashion uh supply

127
00:03:58,400 --> 00:03:59,920
chain intelligence questions again can

128
00:03:59,920 --> 00:04:02,159
we actually trust this dependency can we

129
00:04:02,159 --> 00:04:04,640
actually create policies about the

130
00:04:04,640 --> 00:04:06,319
consumption of uh

131
00:04:06,319 --> 00:04:09,680
software based on legal precedence uh

132
00:04:09,680 --> 00:04:12,640
and so on and so forth but before i go

133
00:04:12,640 --> 00:04:14,319
into the software world i also wanted to

134
00:04:14,319 --> 00:04:14,959
talk

135
00:04:14,959 --> 00:04:17,120
about uh supply chains in general just

136
00:04:17,120 --> 00:04:18,079
to uh

137
00:04:18,079 --> 00:04:21,199
set the tone of the conversation so

138
00:04:21,199 --> 00:04:24,639
a supply chain uh is mostly centered

139
00:04:24,639 --> 00:04:26,240
about how can we create a product in

140
00:04:26,240 --> 00:04:28,639
this case i have a bottle of diagonal

141
00:04:28,639 --> 00:04:32,240
and this model of diagonal was produced

142
00:04:32,240 --> 00:04:34,479
by following a series of steps we had a

143
00:04:34,479 --> 00:04:36,080
bunch of suppliers that created raw

144
00:04:36,080 --> 00:04:37,280
materials

145
00:04:37,280 --> 00:04:39,280
they eventually gave this materials to a

146
00:04:39,280 --> 00:04:40,720
manufacturer

147
00:04:40,720 --> 00:04:43,120
that either sent their materials to a

148
00:04:43,120 --> 00:04:44,880
repackager or a distributor

149
00:04:44,880 --> 00:04:46,960
and then eventually after going through

150
00:04:46,960 --> 00:04:48,160
all these pipes

151
00:04:48,160 --> 00:04:50,880
it ends up in a pharmacy or hospital in

152
00:04:50,880 --> 00:04:52,240
which you can walk in

153
00:04:52,240 --> 00:04:54,479
you can ask for your titanal bottle and

154
00:04:54,479 --> 00:04:55,360
then you get

155
00:04:55,360 --> 00:04:57,680
your bottle of tidal that you can

156
00:04:57,680 --> 00:04:59,360
consume to

157
00:04:59,360 --> 00:05:02,960
fix your headache now this is a security

158
00:05:02,960 --> 00:05:04,160
talk

159
00:05:04,160 --> 00:05:06,080
so you wouldn't be surprised if i told

160
00:05:06,080 --> 00:05:07,759
you that supply chain compromises

161
00:05:07,759 --> 00:05:08,560
actually happen

162
00:05:08,560 --> 00:05:10,080
not only the software world but in the

163
00:05:10,080 --> 00:05:12,160
real world as well

164
00:05:12,160 --> 00:05:14,000
it's anyone familiar with the chicago

165
00:05:14,000 --> 00:05:15,840
telnet murders

166
00:05:15,840 --> 00:05:17,680
it's going to be hard to do a raise of

167
00:05:17,680 --> 00:05:19,280
hands

168
00:05:19,280 --> 00:05:22,160
uh so i'm assuming there is no raise of

169
00:05:22,160 --> 00:05:23,199
hands

170
00:05:23,199 --> 00:05:25,520
well this was something that happened in

171
00:05:25,520 --> 00:05:27,120
1992

172
00:05:27,120 --> 00:05:28,960
in which somebody broke into a pharmacy

173
00:05:28,960 --> 00:05:30,240
who actually just walked into the

174
00:05:30,240 --> 00:05:31,120
pharmacy

175
00:05:31,120 --> 00:05:32,639
opened the bottle of tylenol and then

176
00:05:32,639 --> 00:05:34,320
sneaked a little bit of cyanide on the

177
00:05:34,320 --> 00:05:35,280
bottle

178
00:05:35,280 --> 00:05:37,680
and then just put it back in the counter

179
00:05:37,680 --> 00:05:38,960
what ended up happening is

180
00:05:38,960 --> 00:05:40,240
all our customers walked into the

181
00:05:40,240 --> 00:05:41,919
pharmacy they opened the bottle they

182
00:05:41,919 --> 00:05:43,440
consumed the title

183
00:05:43,440 --> 00:05:45,840
and some of them died this was a very

184
00:05:45,840 --> 00:05:46,800
gruesome

185
00:05:46,800 --> 00:05:48,639
event and something that actually shaped

186
00:05:48,639 --> 00:05:49,919
the way that we produce and consume

187
00:05:49,919 --> 00:05:51,120
pharmaceutical

188
00:05:51,120 --> 00:05:54,880
products to this day nowadays you see a

189
00:05:54,880 --> 00:05:56,479
tidal bottle and you know that there is

190
00:05:56,479 --> 00:05:57,520
a lot number

191
00:05:57,520 --> 00:05:59,280
that's used to manage recalls in case

192
00:05:59,280 --> 00:06:00,800
there's something wrong with the

193
00:06:00,800 --> 00:06:01,919
ingredients

194
00:06:01,919 --> 00:06:03,360
you will find things such as expiration

195
00:06:03,360 --> 00:06:05,120
date at the bottom of the bottle oh

196
00:06:05,120 --> 00:06:07,199
so you know if something is expired not

197
00:06:07,199 --> 00:06:08,880
to consume it anymore because it may be

198
00:06:08,880 --> 00:06:11,199
dangerous or it may be not effective and

199
00:06:11,199 --> 00:06:12,240
you have things such as

200
00:06:12,240 --> 00:06:13,840
tamper proof seal which is exactly what

201
00:06:13,840 --> 00:06:15,520
happened after the title no murders

202
00:06:15,520 --> 00:06:16,080
which is

203
00:06:16,080 --> 00:06:19,039
so we now we need to know that nobody

204
00:06:19,039 --> 00:06:20,240
tampered with the product

205
00:06:20,240 --> 00:06:22,240
between the manufacturer and the

206
00:06:22,240 --> 00:06:23,759
consumer

207
00:06:23,759 --> 00:06:25,840
the pharmacy was just a transfer

208
00:06:25,840 --> 00:06:27,440
mechanism

209
00:06:27,440 --> 00:06:29,680
so now having settled this and

210
00:06:29,680 --> 00:06:31,039
understanding a little bit about

211
00:06:31,039 --> 00:06:33,440
what we're talking about let's uh let's

212
00:06:33,440 --> 00:06:34,319
think about

213
00:06:34,319 --> 00:06:36,800
how would it happen on a software supply

214
00:06:36,800 --> 00:06:37,840
chain so

215
00:06:37,840 --> 00:06:39,840
a software supply chain is something

216
00:06:39,840 --> 00:06:41,680
like this this is a very simple software

217
00:06:41,680 --> 00:06:43,840
supply chain that it's

218
00:06:43,840 --> 00:06:45,280
what i call the github generation

219
00:06:45,280 --> 00:06:47,120
software supply chain if you're using

220
00:06:47,120 --> 00:06:48,960
github you're probably pushing your code

221
00:06:48,960 --> 00:06:49,599
using git

222
00:06:49,599 --> 00:06:52,319
to some git hosting platform uh then you

223
00:06:52,319 --> 00:06:52,960
probably have

224
00:06:52,960 --> 00:06:55,360
uh some build system somewhere it could

225
00:06:55,360 --> 00:06:57,919
be your laptop it could be a build farm

226
00:06:57,919 --> 00:06:59,280
then eventually you run it through a

227
00:06:59,280 --> 00:07:01,199
packaging process again it could go from

228
00:07:01,199 --> 00:07:02,240
your laptop

229
00:07:02,240 --> 00:07:04,880
to a big packaging pipeline if you're

230
00:07:04,880 --> 00:07:07,360
feeling fancy you're probably running a

231
00:07:07,360 --> 00:07:09,680
ci mechanism over your code to make sure

232
00:07:09,680 --> 00:07:11,199
that everything is correct

233
00:07:11,199 --> 00:07:14,400
um and in the same way that

234
00:07:14,400 --> 00:07:16,800
supply chains work uh we will eventually

235
00:07:16,800 --> 00:07:17,919
end up with a package

236
00:07:17,919 --> 00:07:21,360
a bottle of diagonal or debian package a

237
00:07:21,360 --> 00:07:24,639
microsoft office installer that is

238
00:07:24,639 --> 00:07:26,880
essentially our final product

239
00:07:26,880 --> 00:07:29,680
now you wouldn't be surprised that uh

240
00:07:29,680 --> 00:07:31,120
software supply chains also

241
00:07:31,120 --> 00:07:32,400
get hacked in the same way that the

242
00:07:32,400 --> 00:07:35,360
title of murders happened

243
00:07:35,360 --> 00:07:37,919
there was a very big incident like a

244
00:07:37,919 --> 00:07:40,080
juniper security

245
00:07:40,080 --> 00:07:41,759
compromise which somebody broke into

246
00:07:41,759 --> 00:07:43,440
their version control system and they

247
00:07:43,440 --> 00:07:44,240
flipped a

248
00:07:44,240 --> 00:07:46,080
sort of random c generation of code so

249
00:07:46,080 --> 00:07:48,240
that every single connection

250
00:07:48,240 --> 00:07:51,599
of uh of certain products of juniper

251
00:07:51,599 --> 00:07:54,000
was easily managementable somebody could

252
00:07:54,000 --> 00:07:55,520
actually just decrypt all of the

253
00:07:55,520 --> 00:07:57,759
conversations and even pretend to be

254
00:07:57,759 --> 00:07:59,919
different endpoints on this particular

255
00:07:59,919 --> 00:08:01,120
firewall

256
00:08:01,120 --> 00:08:02,720
and well this is not the only time that

257
00:08:02,720 --> 00:08:04,160
somebody has actually broken into a

258
00:08:04,160 --> 00:08:06,000
version control system to do all sorts

259
00:08:06,000 --> 00:08:06,319
of

260
00:08:06,319 --> 00:08:09,599
malicious and scary things and this is

261
00:08:09,599 --> 00:08:11,199
not exclusive to the

262
00:08:11,199 --> 00:08:12,800
to the version control system or to a

263
00:08:12,800 --> 00:08:14,400
code infrastructure this can happen to a

264
00:08:14,400 --> 00:08:15,120
build

265
00:08:15,120 --> 00:08:18,479
server one example that i like a lot is

266
00:08:18,479 --> 00:08:19,440
xcode ghost

267
00:08:19,440 --> 00:08:21,680
in which somebody essentially

268
00:08:21,680 --> 00:08:22,639
distributed a

269
00:08:22,639 --> 00:08:24,720
factoring version of xcode that

270
00:08:24,720 --> 00:08:26,319
eventually ended up

271
00:08:26,319 --> 00:08:28,400
being on angry birds so if you were

272
00:08:28,400 --> 00:08:30,879
playing angry birds around 2015

273
00:08:30,879 --> 00:08:34,320
you probably were part of a compromise

274
00:08:34,320 --> 00:08:35,760
that was trying to steal everybody's

275
00:08:35,760 --> 00:08:37,360
credit card information

276
00:08:37,360 --> 00:08:40,320
that's how scary things get of course as

277
00:08:40,320 --> 00:08:41,599
i was saying before this is

278
00:08:41,599 --> 00:08:43,279
not an isolated dance event this is not

279
00:08:43,279 --> 00:08:44,720
only exclusive to version control

280
00:08:44,720 --> 00:08:46,320
systems or build systems

281
00:08:46,320 --> 00:08:48,399
this actually also happens in packaging

282
00:08:48,399 --> 00:08:49,519
infrastructure

283
00:08:49,519 --> 00:08:51,920
um here i like another example that's

284
00:08:51,920 --> 00:08:52,800
related to

285
00:08:52,800 --> 00:08:55,120
uh how can you be clever how attackers

286
00:08:55,120 --> 00:08:56,800
are actually clever

287
00:08:56,800 --> 00:08:58,399
and the way that they compromise

288
00:08:58,399 --> 00:09:00,320
individual aspects of the infrastructure

289
00:09:00,320 --> 00:09:01,920
to target individual

290
00:09:01,920 --> 00:09:05,200
people out there in the wild these cases

291
00:09:05,200 --> 00:09:07,839
somebody broke into a mirror server in

292
00:09:07,839 --> 00:09:09,920
korea and south korea

293
00:09:09,920 --> 00:09:11,680
and distributed a malicious version of

294
00:09:11,680 --> 00:09:14,080
phpmyadmin which is a

295
00:09:14,080 --> 00:09:17,440
it's a tool to manage php

296
00:09:17,440 --> 00:09:20,560
installations now the interesting bit of

297
00:09:20,560 --> 00:09:20,880
this

298
00:09:20,880 --> 00:09:22,800
is that it can it sheds some light and

299
00:09:22,800 --> 00:09:25,440
how a state actor can

300
00:09:25,440 --> 00:09:27,920
possibly do a software supply chain

301
00:09:27,920 --> 00:09:30,080
compromise to attack a political enemy

302
00:09:30,080 --> 00:09:30,720
uh

303
00:09:30,720 --> 00:09:32,959
in fact in this one case people claim

304
00:09:32,959 --> 00:09:34,640
that it was a north korea that was

305
00:09:34,640 --> 00:09:36,000
causing this uh

306
00:09:36,000 --> 00:09:38,640
this particular attack we actually i

307
00:09:38,640 --> 00:09:39,680
don't think we ever knew

308
00:09:39,680 --> 00:09:41,120
and this is also part of why supply

309
00:09:41,120 --> 00:09:43,279
chain compromises are so uh

310
00:09:43,279 --> 00:09:45,279
so scary because it's very hard to know

311
00:09:45,279 --> 00:09:47,040
who exactly did these things

312
00:09:47,040 --> 00:09:49,040
i'm sure you've had some uh

313
00:09:49,040 --> 00:09:50,720
conversations about cyber attribution

314
00:09:50,720 --> 00:09:51,920
especially when you cover the legal

315
00:09:51,920 --> 00:09:53,920
aspects of

316
00:09:53,920 --> 00:09:55,920
of cyber security but it really is a

317
00:09:55,920 --> 00:09:58,160
challenge

318
00:09:58,160 --> 00:10:00,000
uh again this is not an isolated

319
00:10:00,000 --> 00:10:02,000
incident this has been happening

320
00:10:02,000 --> 00:10:04,959
for years and years and years ever since

321
00:10:04,959 --> 00:10:05,920
i started my

322
00:10:05,920 --> 00:10:08,480
graduate studies finally there's also

323
00:10:08,480 --> 00:10:11,360
questions about compliance

324
00:10:11,360 --> 00:10:14,560
you can have a ci system like you or you

325
00:10:14,560 --> 00:10:16,240
can have things such as a

326
00:10:16,240 --> 00:10:19,120
qa uh individual not doing their actual

327
00:10:19,120 --> 00:10:19,680
qa

328
00:10:19,680 --> 00:10:22,079
uh this is another example windows 7 was

329
00:10:22,079 --> 00:10:24,240
uh published an update in which if you

330
00:10:24,240 --> 00:10:25,760
did install it it would break your

331
00:10:25,760 --> 00:10:27,839
computer fully break the computer

332
00:10:27,839 --> 00:10:29,519
um everybody thought that this was

333
00:10:29,519 --> 00:10:30,880
originally software supply chain

334
00:10:30,880 --> 00:10:32,480
compromise and after an internal

335
00:10:32,480 --> 00:10:33,760
investigation

336
00:10:33,760 --> 00:10:36,320
windows well microsoft realized that

337
00:10:36,320 --> 00:10:37,360
somebody just

338
00:10:37,360 --> 00:10:38,959
took a test update and published it

339
00:10:38,959 --> 00:10:39,920
without going through all of the

340
00:10:39,920 --> 00:10:41,360
controls that are usually

341
00:10:41,360 --> 00:10:44,079
necessary to publish an update of

342
00:10:44,079 --> 00:10:45,760
microsoft windows

343
00:10:45,760 --> 00:10:47,600
again this is not an isolated incident i

344
00:10:47,600 --> 00:10:49,440
am not trying to point fingers

345
00:10:49,440 --> 00:10:51,040
this happened in a very very similar way

346
00:10:51,040 --> 00:10:52,959
to the linux kernel

347
00:10:52,959 --> 00:10:56,320
uh but just to stop uh after the first

348
00:10:56,320 --> 00:10:56,720
uh

349
00:10:56,720 --> 00:10:59,760
12 minutes of this class i took the

350
00:10:59,760 --> 00:11:01,279
liberty of taking

351
00:11:01,279 --> 00:11:04,320
our very silly software supply chain and

352
00:11:04,320 --> 00:11:06,480
i added a bunch of little devils to

353
00:11:06,480 --> 00:11:08,720
pretty much label where points of

354
00:11:08,720 --> 00:11:10,399
compromise could happen

355
00:11:10,399 --> 00:11:12,720
and even in a very very simplistic again

356
00:11:12,720 --> 00:11:16,880
the github generation we saved mockingly

357
00:11:16,880 --> 00:11:18,959
there is many points in which a single

358
00:11:18,959 --> 00:11:20,399
compromise can

359
00:11:20,399 --> 00:11:24,079
completely subvert the final product

360
00:11:24,079 --> 00:11:25,839
and that is exactly what we're trying to

361
00:11:25,839 --> 00:11:27,920
face uh when we're

362
00:11:27,920 --> 00:11:30,240
when we're trying to tackle the software

363
00:11:30,240 --> 00:11:31,680
supply chain security problem in a

364
00:11:31,680 --> 00:11:33,120
practical way

365
00:11:33,120 --> 00:11:37,200
so oh and just to put the sticks higher

366
00:11:37,200 --> 00:11:39,760
there was a

367
00:11:40,839 --> 00:11:43,360
uh i'm going to get to this question

368
00:11:43,360 --> 00:11:45,040
just wanted to acknowledge it jay

369
00:11:45,040 --> 00:11:47,120
but yeah uh just to put the stakes

370
00:11:47,120 --> 00:11:48,880
higher there was a hearing last year

371
00:11:48,880 --> 00:11:49,519
about how

372
00:11:49,519 --> 00:11:51,519
uh software supply chain information

373
00:11:51,519 --> 00:11:53,040
could be uh relevant to

374
00:11:53,040 --> 00:11:57,360
uh to election integrity well

375
00:11:57,360 --> 00:11:59,040
and it is uh the software that's on the

376
00:11:59,040 --> 00:12:01,600
voter machines needs to be sourced from

377
00:12:01,600 --> 00:12:05,680
proper uh sources and uh well

378
00:12:05,680 --> 00:12:07,760
i don't need to say this but uh because

379
00:12:07,760 --> 00:12:09,040
it's starting to get tiring but

380
00:12:09,040 --> 00:12:10,000
everybody's talking

381
00:12:10,000 --> 00:12:13,200
about about solar winds and

382
00:12:13,200 --> 00:12:14,399
it really is it really is a very

383
00:12:14,399 --> 00:12:16,320
devastating attack that made it into the

384
00:12:16,320 --> 00:12:19,600
kitchen of every single

385
00:12:19,920 --> 00:12:22,720
every single agency and high highly

386
00:12:22,720 --> 00:12:24,000
ranked corporation

387
00:12:24,000 --> 00:12:28,079
in this country now

388
00:12:28,079 --> 00:12:30,560
the image is the scream as like people

389
00:12:30,560 --> 00:12:32,079
are thinking that this is inevitable and

390
00:12:32,079 --> 00:12:33,440
we cannot fix this problem in a

391
00:12:33,440 --> 00:12:34,880
meaningful way so let's just get

392
00:12:34,880 --> 00:12:37,519
insurance and forget about the problem

393
00:12:37,519 --> 00:12:40,320
now i am thinking that we can do

394
00:12:40,320 --> 00:12:41,360
something else

395
00:12:41,360 --> 00:12:43,920
we can try to build again maslow's

396
00:12:43,920 --> 00:12:45,279
hierarchy of needs

397
00:12:45,279 --> 00:12:46,880
on the software supply chain by

398
00:12:46,880 --> 00:12:49,279
essentially building a

399
00:12:49,279 --> 00:12:52,079
all-encompassing notion of software as

400
00:12:52,079 --> 00:12:53,920
it is produces and how

401
00:12:53,920 --> 00:12:56,800
as it is consumed so to do this we

402
00:12:56,800 --> 00:12:58,560
essentially need to build strong links

403
00:12:58,560 --> 00:13:01,120
and build a chain of strong links again

404
00:13:01,120 --> 00:13:03,920
a supply chain is just a chain

405
00:13:03,920 --> 00:13:06,000
so starting from the bottom again i was

406
00:13:06,000 --> 00:13:08,000
talking about step security

407
00:13:08,000 --> 00:13:11,200
uh step security is a very

408
00:13:11,200 --> 00:13:13,040
very foundational element of software

409
00:13:13,040 --> 00:13:14,480
supply chain security which is how can

410
00:13:14,480 --> 00:13:16,399
we make these strong links as i was

411
00:13:16,399 --> 00:13:19,200
just mentioning now there is many good

412
00:13:19,200 --> 00:13:20,320
point solutions

413
00:13:20,320 --> 00:13:22,480
and uh the goal is not to replace them

414
00:13:22,480 --> 00:13:23,360
but rather

415
00:13:23,360 --> 00:13:25,440
be able to communicate this to each

416
00:13:25,440 --> 00:13:26,959
individual party in the chain

417
00:13:26,959 --> 00:13:30,079
um to give some example there's uh at

418
00:13:30,079 --> 00:13:30,720
the end

419
00:13:30,720 --> 00:13:33,040
ces and get signing there's uh things

420
00:13:33,040 --> 00:13:35,040
such as push certificates i actually did

421
00:13:35,040 --> 00:13:36,000
some work on

422
00:13:36,000 --> 00:13:38,800
with the git community to try to to

423
00:13:38,800 --> 00:13:40,079
prevent certain types of that

424
00:13:40,079 --> 00:13:43,360
on git on the build system

425
00:13:43,360 --> 00:13:45,199
level you have things such as tpms you

426
00:13:45,199 --> 00:13:46,720
can use measure boot to check the

427
00:13:46,720 --> 00:13:48,639
integrity of the

428
00:13:48,639 --> 00:13:51,120
host or hsms to actually uh control

429
00:13:51,120 --> 00:13:52,800
sign-in keys we saw that this was not

430
00:13:52,800 --> 00:13:55,760
enough on uh on the solarwinds case so

431
00:13:55,760 --> 00:13:56,880
we needed we need something like

432
00:13:56,880 --> 00:13:58,639
verifiable compilers or reproducible

433
00:13:58,639 --> 00:14:00,639
builds so that we can

434
00:14:00,639 --> 00:14:03,279
make sure or make at least a a

435
00:14:03,279 --> 00:14:04,639
probabilistic uh

436
00:14:04,639 --> 00:14:06,800
argument that uh not every single host

437
00:14:06,800 --> 00:14:08,079
that's building uh

438
00:14:08,079 --> 00:14:11,279
this particular version of uh of the

439
00:14:11,279 --> 00:14:14,160
solarwinds agent is compromised and for

440
00:14:14,160 --> 00:14:15,440
packaging there's very well known

441
00:14:15,440 --> 00:14:18,000
solutions like tls for the distribution

442
00:14:18,000 --> 00:14:20,720
gpg for signing long-term releases or

443
00:14:20,720 --> 00:14:22,000
even tough which is a little bit more

444
00:14:22,000 --> 00:14:22,959
elaborate

445
00:14:22,959 --> 00:14:24,959
i am very happy to be working on top for

446
00:14:24,959 --> 00:14:26,800
many many years now i am happy that it's

447
00:14:26,800 --> 00:14:28,880
part of the pie pie

448
00:14:28,880 --> 00:14:30,800
working group right now i am very happy

449
00:14:30,800 --> 00:14:32,240
that it graduated from the cloud native

450
00:14:32,240 --> 00:14:33,680
computing foundation

451
00:14:33,680 --> 00:14:37,199
uh two years ago now

452
00:14:37,279 --> 00:14:41,199
so taking it from the previous uh

453
00:14:41,199 --> 00:14:42,959
from the previous image that had a bunch

454
00:14:42,959 --> 00:14:44,720
of little devils if we

455
00:14:44,720 --> 00:14:47,279
implement all of this all of these

456
00:14:47,279 --> 00:14:49,839
solutions we can take away some of the

457
00:14:49,839 --> 00:14:52,240
some of the problems but there's still a

458
00:14:52,240 --> 00:14:53,199
question of

459
00:14:53,199 --> 00:14:55,279
how do i know each individual step is

460
00:14:55,279 --> 00:14:57,440
performing their operations properly

461
00:14:57,440 --> 00:14:59,920
again how do i know that git signing is

462
00:14:59,920 --> 00:15:01,600
used in this particular fashion or who

463
00:15:01,600 --> 00:15:03,360
do i

464
00:15:03,360 --> 00:15:05,040
or who do i trust to sign this commits

465
00:15:05,040 --> 00:15:07,360
in this particular organization

466
00:15:07,360 --> 00:15:09,120
and when i'm about to build this code do

467
00:15:09,120 --> 00:15:10,560
i know that this is the latest tag that

468
00:15:10,560 --> 00:15:11,680
i should be building

469
00:15:11,680 --> 00:15:14,480
and the same uh goes for packaging is

470
00:15:14,480 --> 00:15:15,680
the result of this build or the one that

471
00:15:15,680 --> 00:15:17,680
i should be inputting into my package or

472
00:15:17,680 --> 00:15:19,760
if this any of any other

473
00:15:19,760 --> 00:15:21,199
and so on and so forth so there's gaps

474
00:15:21,199 --> 00:15:22,560
between steps there's a way that we need

475
00:15:22,560 --> 00:15:23,680
to connect all of these

476
00:15:23,680 --> 00:15:25,199
policies together and then there's a

477
00:15:25,199 --> 00:15:26,560
question of compliance how can we

478
00:15:26,560 --> 00:15:28,480
enforce that the security policies are

479
00:15:28,480 --> 00:15:30,320
actually followed

480
00:15:30,320 --> 00:15:32,240
so this takes us to the second uh

481
00:15:32,240 --> 00:15:34,720
element of the muslim pyramid uh

482
00:15:34,720 --> 00:15:36,160
pyramid of supply chain security which

483
00:15:36,160 --> 00:15:37,920
is this interstep security and that's

484
00:15:37,920 --> 00:15:41,279
exactly why building toco

485
00:15:41,279 --> 00:15:44,639
now before moving forward

486
00:15:44,639 --> 00:15:46,880
i want to stop and answer jay's question

487
00:15:46,880 --> 00:15:48,079
i'm going to read it to

488
00:15:48,079 --> 00:15:52,160
everybody could the argument

489
00:15:53,199 --> 00:15:56,320
uh uh could the argument be made that

490
00:15:56,320 --> 00:15:58,240
xcode ghost actually demonstrated the

491
00:15:58,240 --> 00:16:00,399
correct function of apple's app store

492
00:16:00,399 --> 00:16:01,440
yes it demonstrated

493
00:16:01,440 --> 00:16:02,959
relatively low bar for entering to the

494
00:16:02,959 --> 00:16:04,560
store but once the thing was discovered

495
00:16:04,560 --> 00:16:06,639
it was immediately made and available

496
00:16:06,639 --> 00:16:08,240
in practice apple's approach has

497
00:16:08,240 --> 00:16:09,839
provided very high level integrity while

498
00:16:09,839 --> 00:16:11,040
still supporting thousands of

499
00:16:11,040 --> 00:16:14,079
super metal labs yes uh that is

500
00:16:14,079 --> 00:16:16,880
the question is how can we prevent this

501
00:16:16,880 --> 00:16:17,279
from

502
00:16:17,279 --> 00:16:20,800
happening uh and

503
00:16:20,800 --> 00:16:22,880
yes definitely i i'm not i'm not trying

504
00:16:22,880 --> 00:16:24,800
to point fingers at any single

505
00:16:24,800 --> 00:16:27,839
customer or vendor for that matter

506
00:16:27,839 --> 00:16:31,120
but rather point the challenges and how

507
00:16:31,120 --> 00:16:32,480
all of these individual software

508
00:16:32,480 --> 00:16:34,720
components come to play into producing

509
00:16:34,720 --> 00:16:38,079
a app or any sort of product and how

510
00:16:38,079 --> 00:16:39,440
apple cannot uh

511
00:16:39,440 --> 00:16:41,040
individually take care of all of these

512
00:16:41,040 --> 00:16:43,360
problems i am going to talk a little bit

513
00:16:43,360 --> 00:16:44,959
more about this when we can get into the

514
00:16:44,959 --> 00:16:48,320
interchange security aspect but

515
00:16:48,320 --> 00:16:50,000
that's essentially the challenge that if

516
00:16:50,000 --> 00:16:51,839
apple is tasked with

517
00:16:51,839 --> 00:16:54,000
keeping all of that comes in they don't

518
00:16:54,000 --> 00:16:55,279
have a lot of visibility on what

519
00:16:55,279 --> 00:16:56,079
happened

520
00:16:56,079 --> 00:16:58,959
before it actually was built into uh

521
00:16:58,959 --> 00:17:00,880
into an individual package but rather

522
00:17:00,880 --> 00:17:03,600
just the last mile as they it was

523
00:17:03,600 --> 00:17:04,000
produced

524
00:17:04,000 --> 00:17:05,760
and signed with developer certificates

525
00:17:05,760 --> 00:17:08,000
that were given by the people who built

526
00:17:08,000 --> 00:17:10,959
the individual apps

527
00:17:12,640 --> 00:17:17,280
so going back so

528
00:17:17,280 --> 00:17:18,720
within total what we're trying to do

529
00:17:18,720 --> 00:17:20,400
again is then provide a way to

530
00:17:20,400 --> 00:17:22,559
communicate the software supply chain uh

531
00:17:22,559 --> 00:17:26,079
elements so that we can know

532
00:17:26,079 --> 00:17:29,280
exactly uh exactly who's

533
00:17:29,280 --> 00:17:31,200
doing what in the supply chain and that

534
00:17:31,200 --> 00:17:32,720
we can create a policy

535
00:17:32,720 --> 00:17:34,720
so that we can enforce all these uh

536
00:17:34,720 --> 00:17:36,000
individual

537
00:17:36,000 --> 00:17:39,039
per-step policies so so

538
00:17:39,039 --> 00:17:40,960
going back to our software supply chain

539
00:17:40,960 --> 00:17:44,400
basically what we need to do is

540
00:17:44,480 --> 00:17:47,600
um indicate the

541
00:17:47,600 --> 00:17:49,280
individual actors within the chain so

542
00:17:49,280 --> 00:17:51,600
that if say dave is compromised we can

543
00:17:51,600 --> 00:17:53,200
still follow a trusted path

544
00:17:53,200 --> 00:17:56,480
from bob's uh code to carol's build to

545
00:17:56,480 --> 00:17:58,799
wearing packaging

546
00:17:58,799 --> 00:18:01,200
this principle is a very uh all this

547
00:18:01,200 --> 00:18:03,120
time security principle which is role

548
00:18:03,120 --> 00:18:04,960
separation and the consequence of this

549
00:18:04,960 --> 00:18:06,559
is that the system is compromised

550
00:18:06,559 --> 00:18:09,120
resilient

551
00:18:09,600 --> 00:18:12,160
the other principle that is also again

552
00:18:12,160 --> 00:18:13,600
fundamental on

553
00:18:13,600 --> 00:18:16,880
security is also a

554
00:18:16,880 --> 00:18:20,160
key revocation and uh

555
00:18:20,160 --> 00:18:22,000
yeah key relocation and uh enrolling

556
00:18:22,000 --> 00:18:23,280
using the system in

557
00:18:23,280 --> 00:18:26,400
an in that way so we also want to

558
00:18:26,400 --> 00:18:28,000
when we don't trust dave anymore we want

559
00:18:28,000 --> 00:18:29,679
to replace david data

560
00:18:29,679 --> 00:18:32,320
so that we know that ara now is running

561
00:18:32,320 --> 00:18:34,080
tests properly and they're not lying

562
00:18:34,080 --> 00:18:35,120
about the

563
00:18:35,120 --> 00:18:36,799
about what they're actually doing so we

564
00:18:36,799 --> 00:18:38,320
are bootstrapping from a compromised

565
00:18:38,320 --> 00:18:39,840
state that's compromised resilient into

566
00:18:39,840 --> 00:18:41,679
one that's actually able to recover into

567
00:18:41,679 --> 00:18:44,640
a fully trusted state

568
00:18:44,640 --> 00:18:46,000
we also want to build a system that's

569
00:18:46,000 --> 00:18:47,760
too agnostic

570
00:18:47,760 --> 00:18:50,240
i frequent many open source developer

571
00:18:50,240 --> 00:18:51,919
circles and i know that for example

572
00:18:51,919 --> 00:18:55,200
in the neobot community well actually

573
00:18:55,200 --> 00:18:56,320
the old mod community

574
00:18:56,320 --> 00:18:58,000
they used to use mercurial which is a

575
00:18:58,000 --> 00:18:59,919
different version control system and if

576
00:18:59,919 --> 00:19:01,600
you look into the intrinsics

577
00:19:01,600 --> 00:19:04,160
um they actually don't share a lot of

578
00:19:04,160 --> 00:19:06,080
the concepts they they measure tags

579
00:19:06,080 --> 00:19:07,440
they measure branches but there are

580
00:19:07,440 --> 00:19:09,200
small nuances between them

581
00:19:09,200 --> 00:19:11,120
so what we're trying to build is a tool

582
00:19:11,120 --> 00:19:12,799
that can let you represent

583
00:19:12,799 --> 00:19:15,039
all of the different steps that can be

584
00:19:15,039 --> 00:19:18,559
taken in software supply chain

585
00:19:18,559 --> 00:19:20,080
uh when you do this you can build a

586
00:19:20,080 --> 00:19:22,480
system that's all encompassing

587
00:19:22,480 --> 00:19:24,640
when i say all-encompassing i'm going to

588
00:19:24,640 --> 00:19:26,480
do a little thought exercise uh

589
00:19:26,480 --> 00:19:29,120
is this is what the software supply

590
00:19:29,120 --> 00:19:29,520
chain

591
00:19:29,520 --> 00:19:31,120
it looks like today but we don't know

592
00:19:31,120 --> 00:19:32,799
what's going to come afterwards we don't

593
00:19:32,799 --> 00:19:33,919
know if there's steps that are going to

594
00:19:33,919 --> 00:19:34,240
be

595
00:19:34,240 --> 00:19:35,760
are going to be happening before the

596
00:19:35,760 --> 00:19:37,039
version control system and we don't know

597
00:19:37,039 --> 00:19:38,240
if there's going to be other things that

598
00:19:38,240 --> 00:19:38,480
are

599
00:19:38,480 --> 00:19:41,200
going to be branching off of a typical

600
00:19:41,200 --> 00:19:42,720
supply chain

601
00:19:42,720 --> 00:19:44,880
to take things into a little bit uh

602
00:19:44,880 --> 00:19:46,880
crazy i have a collaborator

603
00:19:46,880 --> 00:19:49,200
um gada she she's at the university of

604
00:19:49,200 --> 00:19:51,120
connecticut she could be publishing a

605
00:19:51,120 --> 00:19:52,960
paper and using security to authenticate

606
00:19:52,960 --> 00:19:54,640
every single keystroke

607
00:19:54,640 --> 00:19:56,400
and somebody could come up with a

608
00:19:56,400 --> 00:19:58,240
hypnotizing attack

609
00:19:58,240 --> 00:20:00,880
that makes people actually type

610
00:20:00,880 --> 00:20:02,400
malicious code into their version

611
00:20:02,400 --> 00:20:03,440
control system

612
00:20:03,440 --> 00:20:07,039
we also want to protect this so

613
00:20:07,039 --> 00:20:09,520
we could have somebody create a alpha

614
00:20:09,520 --> 00:20:10,880
wave reader to detect people's

615
00:20:10,880 --> 00:20:11,919
intentions

616
00:20:11,919 --> 00:20:13,440
so that we know that they're actually

617
00:20:13,440 --> 00:20:14,960
intending to write that code

618
00:20:14,960 --> 00:20:16,559
we also want to protect that part of the

619
00:20:16,559 --> 00:20:18,640
software supply chain again

620
00:20:18,640 --> 00:20:19,600
we're trying to build an

621
00:20:19,600 --> 00:20:22,000
all-encompassing system

622
00:20:22,000 --> 00:20:23,679
uh by doing this we end up with a very

623
00:20:23,679 --> 00:20:25,120
expressive system that allows us to

624
00:20:25,120 --> 00:20:26,799
represent every single software supply

625
00:20:26,799 --> 00:20:27,520
chain out there

626
00:20:27,520 --> 00:20:30,799
i haven't found a single one that is not

627
00:20:30,799 --> 00:20:32,400
representable using internal intrinsics

628
00:20:32,400 --> 00:20:34,880
intrinsics

629
00:20:34,880 --> 00:20:36,960
i've been working with italian packaging

630
00:20:36,960 --> 00:20:38,880
teams

631
00:20:38,880 --> 00:20:41,120
working with tails and kievsos into

632
00:20:41,120 --> 00:20:42,799
building a secure iso

633
00:20:42,799 --> 00:20:47,280
using build semantics i'm part of a arts

634
00:20:47,280 --> 00:20:49,039
uh security team and i also work with

635
00:20:49,039 --> 00:20:51,360
the release engineering team

636
00:20:51,360 --> 00:20:54,000
uh and one uh example that i'm going to

637
00:20:54,000 --> 00:20:55,520
talk about is the datadog integration

638
00:20:55,520 --> 00:20:57,039
which is uh one that i'm very excited

639
00:20:57,039 --> 00:20:57,520
about

640
00:20:57,520 --> 00:20:59,520
it's been a couple years now but i think

641
00:20:59,520 --> 00:21:01,200
they're doing a fantastic job securing

642
00:21:01,200 --> 00:21:03,360
their supply chain

643
00:21:03,360 --> 00:21:06,480
so by having this uh expressive system

644
00:21:06,480 --> 00:21:07,840
and i'm going to explain how it actually

645
00:21:07,840 --> 00:21:09,919
works we're actually able to

646
00:21:09,919 --> 00:21:11,600
represent all of the operations that are

647
00:21:11,600 --> 00:21:13,600
related to producing software

648
00:21:13,600 --> 00:21:16,720
in the wild to do this it's actually not

649
00:21:16,720 --> 00:21:18,720
really that hard

650
00:21:18,720 --> 00:21:20,799
we need to essentially tackle three

651
00:21:20,799 --> 00:21:23,600
problems how can we verifiably describe

652
00:21:23,600 --> 00:21:25,039
all of these steps the ones that i was

653
00:21:25,039 --> 00:21:26,240
just drawing

654
00:21:26,240 --> 00:21:29,280
how can we assign actors to each

655
00:21:29,280 --> 00:21:31,679
individual

656
00:21:31,679 --> 00:21:33,840
step in the chain and finally provide a

657
00:21:33,840 --> 00:21:35,200
way to tightly bind this

658
00:21:35,200 --> 00:21:37,120
uh this element so there's no tampering

659
00:21:37,120 --> 00:21:39,360
on the way

660
00:21:39,360 --> 00:21:42,559
so to do this we essentially created a

661
00:21:42,559 --> 00:21:44,720
dsl a domain specific language that

662
00:21:44,720 --> 00:21:46,720
allows you to describe exactly this in a

663
00:21:46,720 --> 00:21:48,400
policy language

664
00:21:48,400 --> 00:21:52,880
you describe the steps you assign

665
00:21:52,880 --> 00:21:56,159
individual actors to uh to the steps by

666
00:21:56,159 --> 00:21:59,600
by means of their policies

667
00:21:59,600 --> 00:22:00,960
and then you register what you're

668
00:22:00,960 --> 00:22:02,400
expecting each individual step to

669
00:22:02,400 --> 00:22:03,360
produce

670
00:22:03,360 --> 00:22:04,880
some of them may produce source codes

671
00:22:04,880 --> 00:22:07,520
some of them may produce a binary

672
00:22:07,520 --> 00:22:09,200
some of them may produce assets like an

673
00:22:09,200 --> 00:22:11,440
image or a

674
00:22:11,440 --> 00:22:13,600
script or a localization file it could

675
00:22:13,600 --> 00:22:15,280
be anything in the world

676
00:22:15,280 --> 00:22:17,600
finally using this dsl we're able to tie

677
00:22:17,600 --> 00:22:18,960
all of these things together and

678
00:22:18,960 --> 00:22:20,559
essentially draw what we call artifact

679
00:22:20,559 --> 00:22:22,080
flow interview which is a property that

680
00:22:22,080 --> 00:22:23,919
we're trying to preserve

681
00:22:23,919 --> 00:22:27,039
as as we're producing software

682
00:22:27,039 --> 00:22:29,360
finally in order to give a rubber stamp

683
00:22:29,360 --> 00:22:30,400
over this policy

684
00:22:30,400 --> 00:22:32,400
the project owner of a project will sign

685
00:22:32,400 --> 00:22:34,640
this so we have a root of trust

686
00:22:34,640 --> 00:22:36,960
over this individual subset of a

687
00:22:36,960 --> 00:22:40,320
project's supply chain

688
00:22:40,320 --> 00:22:43,039
now once we know what needs to happen we

689
00:22:43,039 --> 00:22:44,880
created a bunch of tools to let people

690
00:22:44,880 --> 00:22:46,960
uh essentially report what happened so

691
00:22:46,960 --> 00:22:48,320
uh we created this

692
00:22:48,320 --> 00:22:50,799
uh wrapper and a bunch of plugins for

693
00:22:50,799 --> 00:22:54,799
kubernetes for check games for tech tone

694
00:22:54,799 --> 00:22:57,280
a bunch of community created stuff that

695
00:22:57,280 --> 00:23:00,159
essentially lets you create a

696
00:23:00,159 --> 00:23:02,400
an attestation of what you did so if you

697
00:23:02,400 --> 00:23:04,320
are checking in code you can say well i

698
00:23:04,320 --> 00:23:05,520
created this commit

699
00:23:05,520 --> 00:23:06,960
if you are building something you can

700
00:23:06,960 --> 00:23:08,799
say i took this commit in

701
00:23:08,799 --> 00:23:12,000
and this is what i produced so

702
00:23:12,000 --> 00:23:14,720
then to check what uh that software

703
00:23:14,720 --> 00:23:16,320
supply chain hasn't been compromised we

704
00:23:16,320 --> 00:23:18,320
essentially allow people to

705
00:23:18,320 --> 00:23:20,080
take a bunch of ad stations and this

706
00:23:20,080 --> 00:23:21,360
policy

707
00:23:21,360 --> 00:23:23,440
build a graph of hardware flow and then

708
00:23:23,440 --> 00:23:24,559
compare it to

709
00:23:24,559 --> 00:23:27,600
the policy as it was described and we

710
00:23:27,600 --> 00:23:29,039
turned the whole question into

711
00:23:29,039 --> 00:23:32,000
a graphisomorphism problem this is just

712
00:23:32,000 --> 00:23:33,440
like the academic

713
00:23:33,440 --> 00:23:37,120
side side note

714
00:23:37,120 --> 00:23:40,559
so now just to quickly go over how

715
00:23:40,559 --> 00:23:43,039
this would work again we know that an

716
00:23:43,039 --> 00:23:44,159
attacker

717
00:23:44,159 --> 00:23:47,120
cannot steal a assigned layout unless

718
00:23:47,120 --> 00:23:48,960
they compromise the key

719
00:23:48,960 --> 00:23:51,600
of the of whoever publishes the policy

720
00:23:51,600 --> 00:23:53,279
that's essentially being able to get

721
00:23:53,279 --> 00:23:56,880
access to say a root ca

722
00:23:57,679 --> 00:23:59,919
we know that in the policy we indicate

723
00:23:59,919 --> 00:24:01,120
that all steps into

724
00:24:01,120 --> 00:24:03,360
need to happen we also know who needs to

725
00:24:03,360 --> 00:24:05,279
perform them so

726
00:24:05,279 --> 00:24:07,520
uh they can authenticate each individual

727
00:24:07,520 --> 00:24:08,320
action

728
00:24:08,320 --> 00:24:10,159
uh if you're interested in hearing a

729
00:24:10,159 --> 00:24:11,520
little bit more about the

730
00:24:11,520 --> 00:24:13,279
security degradation of disputed

731
00:24:13,279 --> 00:24:14,880
properties that's uh

732
00:24:14,880 --> 00:24:17,039
that's spoken about in the paper but i i

733
00:24:17,039 --> 00:24:19,919
want to get to the rest of the content

734
00:24:19,919 --> 00:24:22,400
finally by using artifact hash chaining

735
00:24:22,400 --> 00:24:24,880
which is essentially how we

736
00:24:24,880 --> 00:24:26,400
knit things together we're able to make

737
00:24:26,400 --> 00:24:28,000
sure that things are not

738
00:24:28,000 --> 00:24:31,360
tampered on the way now

739
00:24:31,360 --> 00:24:33,279
this is a system that i am very excited

740
00:24:33,279 --> 00:24:34,640
to know that it's being deployed in a

741
00:24:34,640 --> 00:24:36,320
bunch of different places

742
00:24:36,320 --> 00:24:37,919
the one that i'm the most excited about

743
00:24:37,919 --> 00:24:39,760
is datadog which is in turn used by a

744
00:24:39,760 --> 00:24:40,400
bunch of different

745
00:24:40,400 --> 00:24:43,440
paper companies uh and datadog really

746
00:24:43,440 --> 00:24:44,559
wants to protect the way that they're

747
00:24:44,559 --> 00:24:46,080
producing software that's installed as

748
00:24:46,080 --> 00:24:46,799
root

749
00:24:46,799 --> 00:24:49,279
in the clouds of all of these uh of all

750
00:24:49,279 --> 00:24:50,320
of these companies

751
00:24:50,320 --> 00:24:53,200
so to do this they are essentially

752
00:24:53,200 --> 00:24:54,320
creating the

753
00:24:54,320 --> 00:24:57,840
creating what they call a

754
00:24:58,400 --> 00:25:02,159
a trustless ci cd uh what they do is

755
00:25:02,159 --> 00:25:03,679
they gave every single developer a

756
00:25:03,679 --> 00:25:05,360
hardware token in which they can sign

757
00:25:05,360 --> 00:25:06,799
every single line of code that they

758
00:25:06,799 --> 00:25:07,279
write

759
00:25:07,279 --> 00:25:08,400
and this creates a series of

760
00:25:08,400 --> 00:25:11,039
applications that can be used to track

761
00:25:11,039 --> 00:25:13,440
the code all the way into the agent so

762
00:25:13,440 --> 00:25:15,360
the agent needs to know

763
00:25:15,360 --> 00:25:17,120
each line of code as it was written by

764
00:25:17,120 --> 00:25:18,400
somebody known

765
00:25:18,400 --> 00:25:21,039
on the on the datadog building in the

766
00:25:21,039 --> 00:25:22,400
new york times uh

767
00:25:22,400 --> 00:25:23,919
well the new york times building in the

768
00:25:23,919 --> 00:25:25,760
datadog offices

769
00:25:25,760 --> 00:25:28,559
you can read more about it on this blog

770
00:25:28,559 --> 00:25:30,159
post that they wrote

771
00:25:30,159 --> 00:25:33,200
now we checked this against a bunch of

772
00:25:33,200 --> 00:25:34,320
the compromises that i was showing

773
00:25:34,320 --> 00:25:36,000
earlier and different integrations that

774
00:25:36,000 --> 00:25:36,480
we have

775
00:25:36,480 --> 00:25:38,400
within toto and well it turns out that

776
00:25:38,400 --> 00:25:41,120
you can actually protect against uh

777
00:25:41,120 --> 00:25:43,200
many many of the software supply chain

778
00:25:43,200 --> 00:25:44,559
compromises out there

779
00:25:44,559 --> 00:25:46,000
depending on your configuration on this

780
00:25:46,000 --> 00:25:48,960
policy you may or may not be protected

781
00:25:48,960 --> 00:25:51,760
against all of them we also checked uh

782
00:25:51,760 --> 00:25:53,600
how efficient that is well nothing in

783
00:25:53,600 --> 00:25:55,360
the world is free but generally you get

784
00:25:55,360 --> 00:25:58,960
a 20 to 30 percent uh

785
00:25:58,960 --> 00:26:00,880
increase in the metadata cost which is

786
00:26:00,880 --> 00:26:03,679
just storage of this uh

787
00:26:03,679 --> 00:26:05,840
site information that relates to how the

788
00:26:05,840 --> 00:26:08,400
supply chain practices were carried out

789
00:26:08,400 --> 00:26:10,000
we also found a bunch of interesting

790
00:26:10,000 --> 00:26:12,240
factoids like uh if you are packaging

791
00:26:12,240 --> 00:26:12,960
cisco

792
00:26:12,960 --> 00:26:14,240
code you need to keep a bunch of

793
00:26:14,240 --> 00:26:16,400
different uh binary images for

794
00:26:16,400 --> 00:26:18,799
uh test assets which makes the metadata

795
00:26:18,799 --> 00:26:20,880
very bloated

796
00:26:20,880 --> 00:26:23,600
so now we essentially got to the second

797
00:26:23,600 --> 00:26:24,000
level

798
00:26:24,000 --> 00:26:26,720
of the pyramid now we're trying to get

799
00:26:26,720 --> 00:26:28,559
to the third level the more like uh

800
00:26:28,559 --> 00:26:30,080
interesting bits which is how can we

801
00:26:30,080 --> 00:26:31,360
actually secure

802
00:26:31,360 --> 00:26:33,039
all of this world of different chains

803
00:26:33,039 --> 00:26:34,799
that are related to each other again

804
00:26:34,799 --> 00:26:36,640
talking about the x code problem

805
00:26:36,640 --> 00:26:38,559
how do we how are we able to ensure that

806
00:26:38,559 --> 00:26:39,919
the xcode

807
00:26:39,919 --> 00:26:42,320
is actually xcode and it was the one

808
00:26:42,320 --> 00:26:43,200
that was

809
00:26:43,200 --> 00:26:44,960
given to me and how can i report that

810
00:26:44,960 --> 00:26:48,159
information forward down the line

811
00:26:48,159 --> 00:26:51,440
so what we're doing here is uh building

812
00:26:51,440 --> 00:26:53,120
an auditable data structure for software

813
00:26:53,120 --> 00:26:54,640
supply chain security

814
00:26:54,640 --> 00:26:56,720
uh for those that are familiar with it

815
00:26:56,720 --> 00:26:58,640
uh we're using a transparency log

816
00:26:58,640 --> 00:27:00,240
for those that are not really familiar

817
00:27:00,240 --> 00:27:03,200
with it it's a essentially a blockchain

818
00:27:03,200 --> 00:27:05,279
without the consensus algorithm but more

819
00:27:05,279 --> 00:27:08,480
of a different trust assumption using

820
00:27:08,480 --> 00:27:10,080
delegating the trust to a series of

821
00:27:10,080 --> 00:27:11,919
auditors that are almost like minors but

822
00:27:11,919 --> 00:27:12,480
a little

823
00:27:12,480 --> 00:27:15,520
bit more cheaper and the idea is to

824
00:27:15,520 --> 00:27:16,480
essentially

825
00:27:16,480 --> 00:27:18,159
allow you to replace this rule of trust

826
00:27:18,159 --> 00:27:21,120
so you can over time publish who's

827
00:27:21,120 --> 00:27:22,799
publishing what

828
00:27:22,799 --> 00:27:24,480
you can also update policies for

829
00:27:24,480 --> 00:27:26,480
individual runs of the software supply

830
00:27:26,480 --> 00:27:27,520
chain so you can say

831
00:27:27,520 --> 00:27:29,279
version one was done this way version

832
00:27:29,279 --> 00:27:30,880
two is on this other way

833
00:27:30,880 --> 00:27:33,520
and finally to uh to answer the most

834
00:27:33,520 --> 00:27:34,000
interesting

835
00:27:34,000 --> 00:27:35,919
bits which is to identify this software

836
00:27:35,919 --> 00:27:37,520
interdependency problem

837
00:27:37,520 --> 00:27:39,039
uh this is work that i'm doing with a

838
00:27:39,039 --> 00:27:41,600
red hat google and microsoft

839
00:27:41,600 --> 00:27:43,760
uh if you're interested in seeing how

840
00:27:43,760 --> 00:27:46,000
the microsoft uh

841
00:27:46,000 --> 00:27:47,360
people are working on it there's an

842
00:27:47,360 --> 00:27:49,120
artistic half of last year that

843
00:27:49,120 --> 00:27:51,600
uh showcased how total is used i

844
00:27:51,600 --> 00:27:53,440
recommend you take a look at that

845
00:27:53,440 --> 00:27:56,399
uh but the more interesting bit is a

846
00:27:56,399 --> 00:27:58,640
project that we just announced

847
00:27:58,640 --> 00:28:01,679
on march 11 which is six door

848
00:28:01,679 --> 00:28:03,200
this transparency log that i was talking

849
00:28:03,200 --> 00:28:05,200
about

850
00:28:05,200 --> 00:28:07,200
the basic idea is that in six store you

851
00:28:07,200 --> 00:28:09,200
are trying to create this

852
00:28:09,200 --> 00:28:10,880
global notion of different software

853
00:28:10,880 --> 00:28:12,640
supply chains now

854
00:28:12,640 --> 00:28:14,159
we know that many pieces of software are

855
00:28:14,159 --> 00:28:15,760
built differently and they are connected

856
00:28:15,760 --> 00:28:17,120
to each other in different ways you may

857
00:28:17,120 --> 00:28:18,399
be building software that's actually

858
00:28:18,399 --> 00:28:19,679
used to build something else

859
00:28:19,679 --> 00:28:21,679
later down the line just to simplify the

860
00:28:21,679 --> 00:28:23,760
image imagine you have gcc

861
00:28:23,760 --> 00:28:25,200
and i think that this is a logo for

862
00:28:25,200 --> 00:28:27,440
automate or ninja i forget

863
00:28:27,440 --> 00:28:30,640
and then you have git and and now tpkg

864
00:28:30,640 --> 00:28:31,600
for building a

865
00:28:31,600 --> 00:28:32,960
package that eventually becomes the

866
00:28:32,960 --> 00:28:35,679
linux kernel running in your machine

867
00:28:35,679 --> 00:28:38,080
so the basic idea is that as a software

868
00:28:38,080 --> 00:28:39,279
supply chain is happening

869
00:28:39,279 --> 00:28:41,600
you are putting these entries on the log

870
00:28:41,600 --> 00:28:44,080
and think of it as a blockchain and

871
00:28:44,080 --> 00:28:45,600
linking them together to say well i

872
00:28:45,600 --> 00:28:46,559
built gcc

873
00:28:46,559 --> 00:28:49,679
now i am building uh git and by

874
00:28:49,679 --> 00:28:52,720
you see when building it i am actually

875
00:28:52,720 --> 00:28:54,240
using this version of gcc that was

876
00:28:54,240 --> 00:28:56,480
downloaded

877
00:28:56,480 --> 00:28:58,720
when you do this you can essentially

878
00:28:58,720 --> 00:29:00,480
allow customers to say download this

879
00:29:00,480 --> 00:29:01,840
package

880
00:29:01,840 --> 00:29:04,640
uh go into the log and then start

881
00:29:04,640 --> 00:29:06,159
walking down

882
00:29:06,159 --> 00:29:08,000
and verifying individual supply chains

883
00:29:08,000 --> 00:29:09,520
as they are connected to each other to

884
00:29:09,520 --> 00:29:10,720
eventually

885
00:29:10,720 --> 00:29:13,200
get this very strong assurance that

886
00:29:13,200 --> 00:29:16,320
everything was followed properly

887
00:29:16,320 --> 00:29:18,880
um i just wanted to acknowledge two

888
00:29:18,880 --> 00:29:20,880
questions

889
00:29:20,880 --> 00:29:23,919
and uh yeah i think we'll get to that in

890
00:29:23,919 --> 00:29:26,159
a couple of minutes

891
00:29:26,159 --> 00:29:28,000
the other cool thing that uh you can do

892
00:29:28,000 --> 00:29:29,840
when you have this global notion is that

893
00:29:29,840 --> 00:29:30,960
you can do things such as

894
00:29:30,960 --> 00:29:33,520
propagate defects uh there's this very

895
00:29:33,520 --> 00:29:35,039
cool example that uh

896
00:29:35,039 --> 00:29:36,640
very recently blocked me on a saturday

897
00:29:36,640 --> 00:29:38,240
evening uh i am also working on the

898
00:29:38,240 --> 00:29:40,159
excellent security team as i was uh

899
00:29:40,159 --> 00:29:43,120
mentioning and uh essentially there was

900
00:29:43,120 --> 00:29:43,679
a

901
00:29:43,679 --> 00:29:45,279
critical vulnerability that effect that

902
00:29:45,279 --> 00:29:47,360
may have destroyed a bunch of different

903
00:29:47,360 --> 00:29:47,760
uh

904
00:29:47,760 --> 00:29:50,799
projects out there so

905
00:29:50,799 --> 00:29:53,840
the interesting bit of this

906
00:29:53,840 --> 00:29:55,120
find that it's related to being new

907
00:29:55,120 --> 00:29:57,440
tales is that it actually affects one

908
00:29:57,440 --> 00:29:58,559
particular uh

909
00:29:58,559 --> 00:30:01,919
project in case in this case was uh bing

910
00:30:01,919 --> 00:30:03,000
utils

911
00:30:03,000 --> 00:30:06,080
2.36 but actually

912
00:30:06,080 --> 00:30:09,200
maybe it was a fake root issue as

913
00:30:09,200 --> 00:30:11,120
dependent on being details so maybe it

914
00:30:11,120 --> 00:30:12,080
applies to somebody

915
00:30:12,080 --> 00:30:15,600
something else down the line actually

916
00:30:15,600 --> 00:30:18,559
by doing some local testing well you may

917
00:30:18,559 --> 00:30:19,120
actually

918
00:30:19,120 --> 00:30:22,159
be also interested in knowing how glfc

919
00:30:22,159 --> 00:30:25,360
becomes part of a problem and uh wait

920
00:30:25,360 --> 00:30:28,000
it's actually not about glxt it's an

921
00:30:28,000 --> 00:30:28,480
issue

922
00:30:28,480 --> 00:30:31,039
with a kernel that is running using a

923
00:30:31,039 --> 00:30:31,919
new version

924
00:30:31,919 --> 00:30:34,799
of the style a stat system called called

925
00:30:34,799 --> 00:30:36,880
new fs that at

926
00:30:36,880 --> 00:30:39,120
uh so just to recap uh this

927
00:30:39,120 --> 00:30:40,320
vulnerability

928
00:30:40,320 --> 00:30:42,320
causes a bunch of different problems

929
00:30:42,320 --> 00:30:43,840
glfc may be involved

930
00:30:43,840 --> 00:30:46,080
in utils definitely involved fake root

931
00:30:46,080 --> 00:30:47,600
that's compiled with these two libraries

932
00:30:47,600 --> 00:30:49,279
maybe buggy

933
00:30:49,279 --> 00:30:51,120
and the result of this is that any build

934
00:30:51,120 --> 00:30:52,799
system that is using fake roots to build

935
00:30:52,799 --> 00:30:53,919
packages which is

936
00:30:53,919 --> 00:30:56,640
basically all of them in terms of the

937
00:30:56,640 --> 00:30:58,080
linux ecosystem

938
00:30:58,080 --> 00:30:59,519
may produce binaries with the wrong

939
00:30:59,519 --> 00:31:01,840
permissions so anybody that was using

940
00:31:01,840 --> 00:31:03,600
this tool chain

941
00:31:03,600 --> 00:31:05,840
that compiled anything for anybody

942
00:31:05,840 --> 00:31:06,720
compiled this

943
00:31:06,720 --> 00:31:08,880
uh compiled packages that had uh

944
00:31:08,880 --> 00:31:10,880
essentially

945
00:31:10,880 --> 00:31:12,559
things that were owned by everybody

946
00:31:12,559 --> 00:31:15,679
things with permissions pretty much 777

947
00:31:15,679 --> 00:31:18,960
so with uh with something like a six

948
00:31:18,960 --> 00:31:20,240
store you could do this

949
00:31:20,240 --> 00:31:22,240
uh third-party app station in which you

950
00:31:22,240 --> 00:31:24,320
can attach this vulnerability

951
00:31:24,320 --> 00:31:26,399
to bin utils and then start following

952
00:31:26,399 --> 00:31:27,519
this uh

953
00:31:27,519 --> 00:31:29,440
this chain of consequences so you can

954
00:31:29,440 --> 00:31:31,519
say well when you tails

955
00:31:31,519 --> 00:31:33,120
vendi tills is really the problem but

956
00:31:33,120 --> 00:31:34,559
really really the problem

957
00:31:34,559 --> 00:31:36,240
is all of the things that were built

958
00:31:36,240 --> 00:31:38,080
with being utils

959
00:31:38,080 --> 00:31:39,279
and we need to convey this sort of

960
00:31:39,279 --> 00:31:42,640
information in a meaningful way

961
00:31:42,640 --> 00:31:44,559
and this is of course not only related

962
00:31:44,559 --> 00:31:46,320
to cds but it's actually just to

963
00:31:46,320 --> 00:31:47,760
communicate meta information

964
00:31:47,760 --> 00:31:50,159
to to anybody that's a consumer this can

965
00:31:50,159 --> 00:31:50,960
be a

966
00:31:50,960 --> 00:31:52,960
a legal takedown nowadays or this can be

967
00:31:52,960 --> 00:31:54,720
a security review by a third party

968
00:31:54,720 --> 00:31:56,559
uh auditor or this can be a flips

969
00:31:56,559 --> 00:31:58,399
compliance team walking and taking a

970
00:31:58,399 --> 00:32:00,159
look at your code and eventually

971
00:32:00,159 --> 00:32:02,159
creating an app station saying this

972
00:32:02,159 --> 00:32:04,080
particular piece of code is tips

973
00:32:04,080 --> 00:32:05,760
compliant

974
00:32:05,760 --> 00:32:08,960
it can be anything else really so

975
00:32:08,960 --> 00:32:09,519
finally

976
00:32:09,519 --> 00:32:12,240
once you have this uh essential global

977
00:32:12,240 --> 00:32:13,919
notion of all of the software that is

978
00:32:13,919 --> 00:32:15,039
produced out there

979
00:32:15,039 --> 00:32:17,120
and you are able to connect each

980
00:32:17,120 --> 00:32:18,159
connected hall

981
00:32:18,159 --> 00:32:19,600
you can start asking the more

982
00:32:19,600 --> 00:32:21,519
philosophical questions again going back

983
00:32:21,519 --> 00:32:22,720
to the supply chain intelligence

984
00:32:22,720 --> 00:32:25,039
question

985
00:32:26,320 --> 00:32:29,200
one one question that i uh or one

986
00:32:29,200 --> 00:32:30,080
example that i use

987
00:32:30,080 --> 00:32:31,360
to convey this software supply chain

988
00:32:31,360 --> 00:32:33,519
intelligence problem is the left path

989
00:32:33,519 --> 00:32:35,760
index or well left back incident which

990
00:32:35,760 --> 00:32:37,360
is um

991
00:32:37,360 --> 00:32:40,399
essentially somebody on uh the

992
00:32:40,399 --> 00:32:43,919
npm ecosystem just took down a package

993
00:32:43,919 --> 00:32:46,159
was a bunch of a couple of lines of code

994
00:32:46,159 --> 00:32:48,640
to add things to the left of a

995
00:32:48,640 --> 00:32:51,279
uh to the left of a string and that

996
00:32:51,279 --> 00:32:52,640
broke everybody's package because

997
00:32:52,640 --> 00:32:55,039
everybody was depending on it

998
00:32:55,039 --> 00:32:56,480
so to put it graphically this is the

999
00:32:56,480 --> 00:32:58,480
arch linux uh

1000
00:32:58,480 --> 00:33:00,480
repositories and i think this is just

1001
00:33:00,480 --> 00:33:02,240
extra and core not the

1002
00:33:02,240 --> 00:33:06,000
not all of the community stuff uh

1003
00:33:06,000 --> 00:33:09,679
it is a very very hard to navigate

1004
00:33:09,679 --> 00:33:11,679
very very highly connected dependency

1005
00:33:11,679 --> 00:33:14,080
graph and what we're trying to answer

1006
00:33:14,080 --> 00:33:16,640
uh with something in building the supply

1007
00:33:16,640 --> 00:33:18,159
chain monitor is well

1008
00:33:18,159 --> 00:33:19,919
can we identify things such as the left

1009
00:33:19,919 --> 00:33:21,360
pad

1010
00:33:21,360 --> 00:33:25,039
package and this very very highly

1011
00:33:25,039 --> 00:33:27,519
connected graph and can we detect them

1012
00:33:27,519 --> 00:33:30,000
uh before they happen can we actually

1013
00:33:30,000 --> 00:33:32,640
stop these compromises from taking place

1014
00:33:32,640 --> 00:33:35,039
uh before they actually take place by

1015
00:33:35,039 --> 00:33:36,960
taking a look at this global notion of

1016
00:33:36,960 --> 00:33:38,640
artifacts that start flowing through the

1017
00:33:38,640 --> 00:33:40,559
chain

1018
00:33:40,559 --> 00:33:42,080
uh this is something again that we're

1019
00:33:42,080 --> 00:33:43,919
working with six store i am building the

1020
00:33:43,919 --> 00:33:45,279
first uh

1021
00:33:45,279 --> 00:33:47,039
the first monitor of many that we hope

1022
00:33:47,039 --> 00:33:48,799
that are deployed related to the six

1023
00:33:48,799 --> 00:33:49,279
door

1024
00:33:49,279 --> 00:33:52,080
ecosystem uh this is by the way a vip

1025
00:33:52,080 --> 00:33:53,200
project for those of

1026
00:33:53,200 --> 00:33:55,519
you that are trying to look for vip

1027
00:33:55,519 --> 00:33:56,559
projects that's

1028
00:33:56,559 --> 00:33:59,360
exactly what we're trying to answer here

1029
00:33:59,360 --> 00:34:00,399
and with this

1030
00:34:00,399 --> 00:34:03,840
i am thanking you and i am open for

1031
00:34:03,840 --> 00:34:04,640
questions

1032
00:34:04,640 --> 00:34:06,960
i'm also giving some contact information

1033
00:34:06,960 --> 00:34:08,719
for the

1034
00:34:08,719 --> 00:34:10,879
different communities you can always

1035
00:34:10,879 --> 00:34:13,599
reach out to me with an email or

1036
00:34:13,599 --> 00:34:16,000
or yeah or on twitter you can really

1037
00:34:16,000 --> 00:34:17,359
reach out to me in many many ways i'm

1038
00:34:17,359 --> 00:34:18,320
also an irc

1039
00:34:18,320 --> 00:34:21,839
and a bunch of slacks

1040
00:34:22,879 --> 00:34:26,320
so crazy near

1041
00:34:26,320 --> 00:34:30,079
uh svet sanof i hope i pronounced it

1042
00:34:30,079 --> 00:34:31,760
properly

1043
00:34:31,760 --> 00:34:33,040
what do you think about the centurion

1044
00:34:33,040 --> 00:34:35,440
backdoors i don't actually know what

1045
00:34:35,440 --> 00:34:36,639
they are

1046
00:34:36,639 --> 00:34:40,399
um sabri asks me does there need to be

1047
00:34:40,399 --> 00:34:41,520
any is some more vision between the

1048
00:34:41,520 --> 00:34:43,839
build result graph and policy

1049
00:34:43,839 --> 00:34:46,159
if we need if that build result graph

1050
00:34:46,159 --> 00:34:47,280
could carry additional tested

1051
00:34:47,280 --> 00:34:48,560
information and branches that can be

1052
00:34:48,560 --> 00:34:50,000
analyzed by other tools

1053
00:34:50,000 --> 00:34:53,359
yes that would be super neat

1054
00:34:53,359 --> 00:34:55,440
so i oversimplify the problem a little

1055
00:34:55,440 --> 00:34:56,560
bit but yes

1056
00:34:56,560 --> 00:34:58,240
essentially you could have a subgraph

1057
00:34:58,240 --> 00:35:00,400
that's the core information and then you

1058
00:35:00,400 --> 00:35:01,359
can

1059
00:35:01,359 --> 00:35:04,800
wrap that around a bigger graph which is

1060
00:35:04,800 --> 00:35:06,000
kind of what we're trying to do with sex

1061
00:35:06,000 --> 00:35:07,200
store right you have this core

1062
00:35:07,200 --> 00:35:08,480
information that's essentially what the

1063
00:35:08,480 --> 00:35:10,160
vendor is telling you they're doing

1064
00:35:10,160 --> 00:35:11,520
and then there's other ad stations that

1065
00:35:11,520 --> 00:35:13,040
you were talking about and like branches

1066
00:35:13,040 --> 00:35:14,079
off

1067
00:35:14,079 --> 00:35:16,079
but that is produced by the community to

1068
00:35:16,079 --> 00:35:18,160
tell you and convey you information that

1069
00:35:18,160 --> 00:35:19,119
the

1070
00:35:19,119 --> 00:35:21,040
the regional producer is either not

1071
00:35:21,040 --> 00:35:23,119
motivated to tell you or is either

1072
00:35:23,119 --> 00:35:26,160
not able to answer

1073
00:35:27,520 --> 00:35:29,839
and i hope i'm asked certain questions

1074
00:35:29,839 --> 00:35:31,359
how do i know if i actually answer the

1075
00:35:31,359 --> 00:35:33,680
question

1076
00:35:37,920 --> 00:35:39,440
okay it's the first time i use this

1077
00:35:39,440 --> 00:35:42,400
platform so i'm just

1078
00:35:42,400 --> 00:35:45,839
clicking on zone and uh if not you can

1079
00:35:45,839 --> 00:35:59,839
ask again i guess

1080
00:36:00,960 --> 00:36:03,839
am i still here

1081
00:36:04,800 --> 00:36:07,520
yep you're still here uh i see in the

1082
00:36:07,520 --> 00:36:09,520
chat crazy um

1083
00:36:09,520 --> 00:36:12,640
said that the uh centrion hack

1084
00:36:12,640 --> 00:36:16,000
is pretty much the exact same thing as

1085
00:36:16,000 --> 00:36:20,480
solar winds okay

1086
00:36:20,720 --> 00:36:24,480
so something that i will say and

1087
00:36:25,440 --> 00:36:27,680
if you have found something i maintain

1088
00:36:27,680 --> 00:36:29,359
this catalog

1089
00:36:29,359 --> 00:36:31,520
of software supply chain compromises

1090
00:36:31,520 --> 00:36:33,280
like when i started

1091
00:36:33,280 --> 00:36:35,520
nobody was doing this uh so we

1092
00:36:35,520 --> 00:36:36,640
essentially are trying to give a

1093
00:36:36,640 --> 00:36:39,839
one-stop shop to people

1094
00:36:39,839 --> 00:36:43,040
to go and visit uh and understand how

1095
00:36:43,040 --> 00:36:44,560
these different compromises

1096
00:36:44,560 --> 00:36:46,880
uh are happening and to essentially

1097
00:36:46,880 --> 00:36:49,520
build their like related work type of

1098
00:36:49,520 --> 00:36:51,359
uh of research if you want to submit a

1099
00:36:51,359 --> 00:36:52,720
full request here i think

1100
00:36:52,720 --> 00:36:56,240
would be more than thrilled to to add it

1101
00:36:56,240 --> 00:36:57,119
and

1102
00:36:57,119 --> 00:36:59,280
to recognize you for your contribution

1103
00:36:59,280 --> 00:37:01,680
this is a part of a cnc f6 security

1104
00:37:01,680 --> 00:37:04,880
working group and uh yes

1105
00:37:04,880 --> 00:37:09,839
we should do this

1106
00:37:19,040 --> 00:37:22,240
i think that uh

1107
00:37:22,240 --> 00:37:25,839
haven't seen any other questions

1108
00:37:26,240 --> 00:37:37,839
back here

1109
00:37:40,240 --> 00:37:44,000
is there a way that i can uh

1110
00:37:44,000 --> 00:37:50,079
no okay

1111
00:37:50,079 --> 00:37:51,760
with any compiler teams for integration

1112
00:37:51,760 --> 00:37:54,480
of in toto

1113
00:37:55,440 --> 00:37:58,560
not really so a lot of the work that we

1114
00:37:58,560 --> 00:37:59,200
did on the

1115
00:37:59,200 --> 00:38:01,119
compilation stage was collaborating with

1116
00:38:01,119 --> 00:38:03,280
the principal's

1117
00:38:03,280 --> 00:38:06,480
community and there was a lot of uh

1118
00:38:06,480 --> 00:38:07,680
heavy lifting down there

1119
00:38:07,680 --> 00:38:09,520
uh i know that there was some connection

1120
00:38:09,520 --> 00:38:10,960
with the gcc teams

1121
00:38:10,960 --> 00:38:14,720
uh and i know that there's some

1122
00:38:14,720 --> 00:38:17,200
uh like there's there's a possibility of

1123
00:38:17,200 --> 00:38:18,160
going that way

1124
00:38:18,160 --> 00:38:21,200
uh i know that other companies that i

1125
00:38:21,200 --> 00:38:22,000
can't mention

1126
00:38:22,000 --> 00:38:23,520
are also interested in doing something

1127
00:38:23,520 --> 00:38:25,119
of that nature

1128
00:38:25,119 --> 00:38:28,880
um but i actually

1129
00:38:28,880 --> 00:38:30,880
i don't think i've had the cycles to

1130
00:38:30,880 --> 00:38:32,560
work on that

1131
00:38:32,560 --> 00:38:34,640
if you're interested in investigating

1132
00:38:34,640 --> 00:38:36,079
that i think i'd be more than

1133
00:38:36,079 --> 00:38:37,839
interested in having a conversation

1134
00:38:37,839 --> 00:38:40,720
maybe sharing some emails

1135
00:38:40,720 --> 00:38:47,839
and see where that takes us

1136
00:39:16,960 --> 00:39:19,520
all right i believe uh are there any

1137
00:39:19,520 --> 00:39:22,400
questions left

1138
00:39:25,760 --> 00:39:28,000
i think that's all for today uh so

1139
00:39:28,000 --> 00:39:29,520
santiago thank you so much

1140
00:39:29,520 --> 00:39:31,839
it was a super interesting talk i

1141
00:39:31,839 --> 00:39:34,240
enjoyed a lot

1142
00:39:34,240 --> 00:39:37,040
um yeah hopefully you know like after

1143
00:39:37,040 --> 00:39:37,440
this

1144
00:39:37,440 --> 00:39:40,480
pandemic uh maybe you can give some

1145
00:39:40,480 --> 00:39:44,880
you know in person presentation

1146
00:39:46,480 --> 00:39:50,000
all right okay i would love to uh

1147
00:39:50,000 --> 00:39:52,079
yeah and uh i think there's a lot of

1148
00:39:52,079 --> 00:39:54,640
work out there to be done so uh

1149
00:39:54,640 --> 00:39:56,880
so yeah i'm looking for anytime any

1150
00:39:56,880 --> 00:39:58,480
hands that can help me try to answer

1151
00:39:58,480 --> 00:40:01,119
this problem

1152
00:40:01,119 --> 00:40:03,359
okay all right thank you so much

1153
00:40:03,359 --> 00:40:05,200
everyone uh joining for today's

1154
00:40:05,200 --> 00:40:11,839
seminar and hope to see you next week

1155
00:40:25,280 --> 00:40:27,359
you

