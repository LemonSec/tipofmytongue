1
00:00:00,160 --> 00:00:03,600
uh our next speaker is professor antonio

2
00:00:03,600 --> 00:00:04,799
bianchi

3
00:00:04,799 --> 00:00:06,480
antonio's an assistant professor of

4
00:00:06,480 --> 00:00:08,800
computer science his research focus

5
00:00:08,800 --> 00:00:11,440
areas include iot and mobile device

6
00:00:11,440 --> 00:00:15,120
security and novel approaches to analyze

7
00:00:15,120 --> 00:00:18,080
compiled binary code he also serves as

8
00:00:18,080 --> 00:00:20,480
the academic advisor to the boilers that

9
00:00:20,480 --> 00:00:22,560
would be zero one

10
00:00:22,560 --> 00:00:26,320
zero sorry b zero one l e r s uh the

11
00:00:26,320 --> 00:00:28,800
cyber ctf competition team at near

12
00:00:28,800 --> 00:00:31,439
purdue that has maintained a top 10

13
00:00:31,439 --> 00:00:33,840
global ranking for the last several

14
00:00:33,840 --> 00:00:36,320
years uh was the defending national

15
00:00:36,320 --> 00:00:38,879
champion of the raymond james collegiate

16
00:00:38,879 --> 00:00:41,680
national championship this last year

17
00:00:41,680 --> 00:00:45,440
and members of that team competed in the

18
00:00:45,440 --> 00:00:48,160
sandia national labs kisser fire cyber

19
00:00:48,160 --> 00:00:49,280
defense

20
00:00:49,280 --> 00:00:52,160
competition this last week that won that

21
00:00:52,160 --> 00:00:54,320
championship so uh

22
00:00:54,320 --> 00:00:56,000
in addition to being an unbelievable

23
00:00:56,000 --> 00:00:58,160
great researcher an educator you're

24
00:00:58,160 --> 00:01:00,160
obviously an unbelievably great coach as

25
00:01:00,160 --> 00:01:02,719
well antonio so uh it's it's all yours

26
00:01:02,719 --> 00:01:04,319
we're excited to hear the very first

27
00:01:04,319 --> 00:01:08,360
technical talk of the symposium

28
00:01:19,360 --> 00:01:21,759
hello

29
00:01:22,240 --> 00:01:24,320
hi antonio we can see your slides and we

30
00:01:24,320 --> 00:01:26,880
can hear you can you hear me now

31
00:01:26,880 --> 00:01:27,680
yes

32
00:01:27,680 --> 00:01:29,920
okay good very good okay it's a little

33
00:01:29,920 --> 00:01:32,560
quiet though

34
00:01:32,640 --> 00:01:35,360
is it okay now

35
00:01:36,960 --> 00:01:41,479
i think i think we can hear you yes

36
00:01:44,960 --> 00:01:47,520
okay

37
00:01:47,759 --> 00:01:50,880
much better perfect thank you antonio

38
00:01:50,880 --> 00:01:52,479
okay so

39
00:01:52,479 --> 00:01:54,960
uh

40
00:01:54,960 --> 00:01:56,880
so today i'm going to present so first

41
00:01:56,880 --> 00:01:58,000
of all thank you for for the

42
00:01:58,000 --> 00:01:59,360
introduction

43
00:01:59,360 --> 00:02:01,280
and uh yeah and i'm just going to

44
00:02:01,280 --> 00:02:04,960
present a work we have done uh recently

45
00:02:04,960 --> 00:02:05,840
uh

46
00:02:05,840 --> 00:02:08,160
together with uh of course uh students

47
00:02:08,160 --> 00:02:11,038
at purdue ginger and royal and also

48
00:02:11,038 --> 00:02:12,720
professors and students at other

49
00:02:12,720 --> 00:02:16,080
universities specifically at etfl and

50
00:02:16,080 --> 00:02:18,080
cisco in europe

51
00:02:18,080 --> 00:02:20,319
and so this work is called light blue

52
00:02:20,319 --> 00:02:22,800
and the general idea is that

53
00:02:22,800 --> 00:02:25,280
we want to

54
00:02:25,280 --> 00:02:27,840
prevent attacks we want to make the the

55
00:02:27,840 --> 00:02:28,800
code

56
00:02:28,800 --> 00:02:31,280
safe specifically the code dealing with

57
00:02:31,280 --> 00:02:33,200
bluetooth stacks

58
00:02:33,200 --> 00:02:36,800
and i guess everyone knows blue suit and

59
00:02:36,800 --> 00:02:38,160
everyone has

60
00:02:38,160 --> 00:02:42,640
at least a few bluetooth devices that

61
00:02:42,640 --> 00:02:45,200
are probably used every day and and the

62
00:02:45,200 --> 00:02:46,879
the amount of

63
00:02:46,879 --> 00:02:49,440
bluetooth devices are is definitely

64
00:02:49,440 --> 00:02:50,560
increasing

65
00:02:50,560 --> 00:02:52,160
over the years

66
00:02:52,160 --> 00:02:53,599
and uh

67
00:02:53,599 --> 00:02:55,680
one one less obvious thing is that these

68
00:02:55,680 --> 00:02:58,239
bluetooth devices they support a lot of

69
00:02:58,239 --> 00:03:01,120
very different uh applications

70
00:03:01,120 --> 00:03:03,519
going from the standard you know you

71
00:03:03,519 --> 00:03:04,720
bluetooth

72
00:03:04,720 --> 00:03:05,920
headphones

73
00:03:05,920 --> 00:03:06,959
to

74
00:03:06,959 --> 00:03:10,080
more specific things like

75
00:03:10,080 --> 00:03:12,480
health devices that are connected to

76
00:03:12,480 --> 00:03:14,239
bluetooth or

77
00:03:14,239 --> 00:03:16,480
i don't know printing or

78
00:03:16,480 --> 00:03:18,959
sharing connections and things like that

79
00:03:18,959 --> 00:03:20,159
so there are a lot of different

80
00:03:20,159 --> 00:03:23,620
applications that you can

81
00:03:23,620 --> 00:03:24,959
[Music]

82
00:03:24,959 --> 00:03:26,480
use through

83
00:03:26,480 --> 00:03:28,080
bluetooth

84
00:03:28,080 --> 00:03:29,280
and

85
00:03:29,280 --> 00:03:30,879
so

86
00:03:30,879 --> 00:03:32,799
in general

87
00:03:32,799 --> 00:03:34,480
especially due to all these different

88
00:03:34,480 --> 00:03:35,440
bluetooth

89
00:03:35,440 --> 00:03:37,440
applications of functionality the

90
00:03:37,440 --> 00:03:39,920
bluetooth code is bloated so there is a

91
00:03:39,920 --> 00:03:43,440
lot of code that is typically unneeded

92
00:03:43,440 --> 00:03:44,239
and

93
00:03:44,239 --> 00:03:46,000
going a little bit more technical we can

94
00:03:46,000 --> 00:03:48,400
say that bluetooth supports multiple

95
00:03:48,400 --> 00:03:51,120
profiles and more or less each profile

96
00:03:51,120 --> 00:03:54,159
corresponds to one functionality so here

97
00:03:54,159 --> 00:03:56,319
we have this one on top row there's our

98
00:03:56,319 --> 00:03:58,319
profile so we have git

99
00:03:58,319 --> 00:04:00,959
we have hid we have pen different

100
00:04:00,959 --> 00:04:03,680
profiles every profile then is using

101
00:04:03,680 --> 00:04:05,280
different protocols

102
00:04:05,280 --> 00:04:07,680
of different uh

103
00:04:07,680 --> 00:04:09,120
different protocols

104
00:04:09,120 --> 00:04:11,040
sdp l2 cap

105
00:04:11,040 --> 00:04:13,599
and then all these protocols they

106
00:04:13,599 --> 00:04:16,000
generate um

107
00:04:16,000 --> 00:04:18,560
what is called hid commands and they use

108
00:04:18,560 --> 00:04:20,399
and they send these commands to the to

109
00:04:20,399 --> 00:04:22,240
the firmware that is running on the

110
00:04:22,240 --> 00:04:25,360
controller so to add complexity to this

111
00:04:25,360 --> 00:04:27,040
is the fact that

112
00:04:27,040 --> 00:04:29,840
the thing here you see on the top those

113
00:04:29,840 --> 00:04:31,520
run on

114
00:04:31,520 --> 00:04:34,240
a standard cpu typically typically i

115
00:04:34,240 --> 00:04:36,479
don't know your laptop cpu or your phone

116
00:04:36,479 --> 00:04:38,800
cpu whereas

117
00:04:38,800 --> 00:04:41,280
the firmware here at the bottom runs on

118
00:04:41,280 --> 00:04:43,759
a separate cpu that is the cpu running

119
00:04:43,759 --> 00:04:47,120
the dedicated bluetooth controller

120
00:04:47,120 --> 00:04:49,840
and all of this code is a lot of code is

121
00:04:49,840 --> 00:04:51,520
is a probably

122
00:04:51,520 --> 00:04:54,000
hundreds of thousands lines of code and

123
00:04:54,000 --> 00:04:56,400
of course it's um

124
00:04:56,400 --> 00:04:58,240
in the in the in

125
00:04:58,240 --> 00:04:59,759
towards the years people have found a

126
00:04:59,759 --> 00:05:01,360
lot of bugs into

127
00:05:01,360 --> 00:05:02,800
this code

128
00:05:02,800 --> 00:05:03,840
and

129
00:05:03,840 --> 00:05:05,600
so here i'm just highlighting the host

130
00:05:05,600 --> 00:05:07,680
code and the firmware code

131
00:05:07,680 --> 00:05:10,160
and but in a lot of cases we are not

132
00:05:10,160 --> 00:05:11,680
really interested in all of this code

133
00:05:11,680 --> 00:05:13,120
there are a lot of bluetooth

134
00:05:13,120 --> 00:05:15,199
applications and use cases they only

135
00:05:15,199 --> 00:05:17,360
require a subset of this code for

136
00:05:17,360 --> 00:05:19,280
instance this is a

137
00:05:19,280 --> 00:05:21,280
in the picture these are kind of

138
00:05:21,280 --> 00:05:24,000
standard and also security sensitive

139
00:05:24,000 --> 00:05:26,080
application of bluetooth in which

140
00:05:26,080 --> 00:05:28,000
you can think in a restaurant for

141
00:05:28,000 --> 00:05:30,639
instance where you have a credit card

142
00:05:30,639 --> 00:05:31,919
reader

143
00:05:31,919 --> 00:05:33,759
and this is from square so you have a

144
00:05:33,759 --> 00:05:35,199
square credit card reader you have of

145
00:05:35,199 --> 00:05:37,680
course a credit card that is you insert

146
00:05:37,680 --> 00:05:39,120
into the reader and then the reader

147
00:05:39,120 --> 00:05:41,759
communicates through bluetooth

148
00:05:41,759 --> 00:05:43,840
with an android phone

149
00:05:43,840 --> 00:05:45,759
and with the android app the square

150
00:05:45,759 --> 00:05:48,400
android app running on that phone so and

151
00:05:48,400 --> 00:05:51,039
and this is used to do payments like in

152
00:05:51,039 --> 00:05:53,280
restaurants or bars

153
00:05:53,280 --> 00:05:55,600
and

154
00:05:55,600 --> 00:05:57,440
these sort of applications it only

155
00:05:57,440 --> 00:05:59,840
requires a subset of the bluetooth

156
00:05:59,840 --> 00:06:01,919
protocol

157
00:06:01,919 --> 00:06:03,680
particularly in this case we just need

158
00:06:03,680 --> 00:06:06,400
the gut profile and we just need a few

159
00:06:06,400 --> 00:06:07,680
protocols

160
00:06:07,680 --> 00:06:09,840
and we and all of this is only going to

161
00:06:09,840 --> 00:06:10,880
generate

162
00:06:10,880 --> 00:06:13,120
a few hci commands that are only

163
00:06:13,120 --> 00:06:15,759
triggering some specific parts of the

164
00:06:15,759 --> 00:06:18,639
code running in the bluetooth controller

165
00:06:18,639 --> 00:06:19,440
so

166
00:06:19,440 --> 00:06:21,840
it's obvious that what we can do here is

167
00:06:21,840 --> 00:06:23,120
to

168
00:06:23,120 --> 00:06:25,759
identify these areas of the code that we

169
00:06:25,759 --> 00:06:26,800
need

170
00:06:26,800 --> 00:06:27,840
and

171
00:06:27,840 --> 00:06:29,919
remove everything that we don't need and

172
00:06:29,919 --> 00:06:31,520
why do we want to do this we want to do

173
00:06:31,520 --> 00:06:33,440
this because by removing the unneeded

174
00:06:33,440 --> 00:06:37,039
code we can be we can make these

175
00:06:37,039 --> 00:06:40,319
bluetooth stacks in a way immune to

176
00:06:40,319 --> 00:06:43,759
attacks affecting other components so

177
00:06:43,759 --> 00:06:49,000
we are maybe there are bugs in these uh

178
00:06:49,039 --> 00:06:52,479
profile on in this bnap protocol but if

179
00:06:52,479 --> 00:06:54,400
we remove all this code and we only

180
00:06:54,400 --> 00:06:57,280
focus on the code that we need to run

181
00:06:57,280 --> 00:06:58,160
our

182
00:06:58,160 --> 00:07:00,639
square credit card readers that device

183
00:07:00,639 --> 00:07:02,240
that is doing something sensitive that

184
00:07:02,240 --> 00:07:04,080
is reading credit card so could

185
00:07:04,080 --> 00:07:05,840
potentially be attacked to c credit

186
00:07:05,840 --> 00:07:08,240
cards at that point that device becomes

187
00:07:08,240 --> 00:07:09,919
immune because it does it just simply

188
00:07:09,919 --> 00:07:12,800
doesn't have the vulnerable code so this

189
00:07:12,800 --> 00:07:15,599
is the gen idea of the bloating code

190
00:07:15,599 --> 00:07:17,840
that is applied to the bluetooth

191
00:07:17,840 --> 00:07:20,319
protocol

192
00:07:20,319 --> 00:07:22,000
so uh

193
00:07:22,000 --> 00:07:25,520
starting from all these observations we

194
00:07:25,520 --> 00:07:28,400
wanted to uh create an automated system

195
00:07:28,400 --> 00:07:32,000
to deploy the code and

196
00:07:32,000 --> 00:07:33,840
so the system that we designed that is

197
00:07:33,840 --> 00:07:37,840
called light blue needs to be automated

198
00:07:37,840 --> 00:07:39,919
needs to be flexible because many

199
00:07:39,919 --> 00:07:42,319
different devices

200
00:07:42,319 --> 00:07:45,199
many different devices they

201
00:07:45,199 --> 00:07:47,599
have they use different implementations

202
00:07:47,599 --> 00:07:49,840
of bluetooth different operating system

203
00:07:49,840 --> 00:07:51,440
they use different implementations of

204
00:07:51,440 --> 00:07:52,479
bluetooth

205
00:07:52,479 --> 00:07:54,879
and we want to deploy both the code

206
00:07:54,879 --> 00:07:57,360
running in your operating system what we

207
00:07:57,360 --> 00:07:58,960
call the horse code

208
00:07:58,960 --> 00:08:00,720
and the firmware the code running on

209
00:08:00,720 --> 00:08:03,039
your dedicated

210
00:08:03,039 --> 00:08:04,639
bluetooth

211
00:08:04,639 --> 00:08:07,120
cpu

212
00:08:07,840 --> 00:08:09,440
so

213
00:08:09,440 --> 00:08:12,240
in in summary light blue works in three

214
00:08:12,240 --> 00:08:15,120
steps so first of all we start from an

215
00:08:15,120 --> 00:08:17,440
android applications and we identify the

216
00:08:17,440 --> 00:08:19,120
profiles

217
00:08:19,120 --> 00:08:21,440
that are needed by these applications

218
00:08:21,440 --> 00:08:24,000
then starting from this profile we

219
00:08:24,000 --> 00:08:25,599
identify

220
00:08:25,599 --> 00:08:27,440
the protocols

221
00:08:27,440 --> 00:08:29,280
and the pieces of code within the host

222
00:08:29,280 --> 00:08:31,680
code that are needed by this profile

223
00:08:31,680 --> 00:08:34,958
then we com we identify the commands

224
00:08:34,958 --> 00:08:37,440
that are used by the host code to

225
00:08:37,440 --> 00:08:39,679
communicate with the firmware

226
00:08:39,679 --> 00:08:41,760
and by identifying these commands only

227
00:08:41,760 --> 00:08:43,760
the subset of commands that we need then

228
00:08:43,760 --> 00:08:46,399
we can go into the firmware and remove

229
00:08:46,399 --> 00:08:49,120
all the handlers that are dealing with

230
00:08:49,120 --> 00:08:51,920
commands that we don't need

231
00:08:51,920 --> 00:08:54,959
and and so we can also deploy the film

232
00:08:54,959 --> 00:08:59,040
that is the third step

233
00:09:00,480 --> 00:09:02,880
okay so

234
00:09:02,880 --> 00:09:05,200
just going a little bit more technical

235
00:09:05,200 --> 00:09:08,480
here so to identify which profile a

236
00:09:08,480 --> 00:09:11,760
specific app is using we can uh check

237
00:09:11,760 --> 00:09:12,800
how

238
00:09:12,800 --> 00:09:13,839
some

239
00:09:13,839 --> 00:09:16,720
specific apis are are called

240
00:09:16,720 --> 00:09:17,519
so

241
00:09:17,519 --> 00:09:19,920
for instance this is a get proxy

242
00:09:19,920 --> 00:09:22,160
get profile proxy api on android apps so

243
00:09:22,160 --> 00:09:23,519
we can scan

244
00:09:23,519 --> 00:09:26,880
the android market finding apps that are

245
00:09:26,880 --> 00:09:30,160
using the specific api and identify how

246
00:09:30,160 --> 00:09:31,839
they are using this api and which

247
00:09:31,839 --> 00:09:35,120
profile they need

248
00:09:35,200 --> 00:09:37,440
then we need to go into the house code

249
00:09:37,440 --> 00:09:39,440
and starting from a profile we want to

250
00:09:39,440 --> 00:09:42,800
understand what is the

251
00:09:42,800 --> 00:09:45,200
code that is triggered

252
00:09:45,200 --> 00:09:47,839
so to do this we need to do a kind of

253
00:09:47,839 --> 00:09:51,519
pair profile analysis

254
00:09:51,519 --> 00:09:54,080
and to do these analysis we need to

255
00:09:54,080 --> 00:09:56,880
basically do a reachability analysis and

256
00:09:56,880 --> 00:09:59,680
we in which we start from a

257
00:09:59,680 --> 00:10:02,880
we start from a profile and we want to

258
00:10:02,880 --> 00:10:04,800
understand all the code the code that is

259
00:10:04,800 --> 00:10:07,279
potentially reachable by that profile

260
00:10:07,279 --> 00:10:09,360
so that we can remove the other code so

261
00:10:09,360 --> 00:10:12,240
to do this this is um

262
00:10:12,240 --> 00:10:14,240
we kind of use a mix of two techniques

263
00:10:14,240 --> 00:10:16,240
one is a control flow analysis in which

264
00:10:16,240 --> 00:10:18,480
we see how the execution flows within

265
00:10:18,480 --> 00:10:19,839
the code and the other is data flow

266
00:10:19,839 --> 00:10:22,160
analysis in which we see how

267
00:10:22,160 --> 00:10:25,200
the data flows within the code and one

268
00:10:25,200 --> 00:10:27,040
particular there are basically two

269
00:10:27,040 --> 00:10:29,200
challenges in doing in applying these

270
00:10:29,200 --> 00:10:32,240
techniques to bluetooth host code one is

271
00:10:32,240 --> 00:10:33,200
that

272
00:10:33,200 --> 00:10:34,000
we

273
00:10:34,000 --> 00:10:36,640
sometimes we need to be able what given

274
00:10:36,640 --> 00:10:39,040
a specific profile that we want to keep

275
00:10:39,040 --> 00:10:42,800
what are the values that specific

276
00:10:42,800 --> 00:10:45,600
variables can take because the code that

277
00:10:45,600 --> 00:10:47,279
contains a lot of this

278
00:10:47,279 --> 00:10:49,920
which cases in which given the service

279
00:10:49,920 --> 00:10:51,760
id that is the profile

280
00:10:51,760 --> 00:10:53,839
different code is execute so we need to

281
00:10:53,839 --> 00:10:56,399
know that since we want to preserve a

282
00:10:56,399 --> 00:10:58,839
specific profile

283
00:10:58,839 --> 00:11:01,600
then service idea will have a specific

284
00:11:01,600 --> 00:11:05,279
value and so this case will be executed

285
00:11:05,279 --> 00:11:07,440
and this function will be executed so we

286
00:11:07,440 --> 00:11:09,120
need to

287
00:11:09,120 --> 00:11:11,279
understand these automatically

288
00:11:11,279 --> 00:11:12,880
and also

289
00:11:12,880 --> 00:11:16,800
the the host code is it works kind of in

290
00:11:16,800 --> 00:11:17,839
a in a

291
00:11:17,839 --> 00:11:20,079
callback way in which

292
00:11:20,079 --> 00:11:23,200
it contains it contains multiple uh

293
00:11:23,200 --> 00:11:25,440
functions multiple entry points some for

294
00:11:25,440 --> 00:11:26,800
initializing

295
00:11:26,800 --> 00:11:28,399
the protocol some from using the

296
00:11:28,399 --> 00:11:32,560
protocols so we need to uh

297
00:11:32,560 --> 00:11:34,000
we need to

298
00:11:34,000 --> 00:11:36,640
simulate

299
00:11:36,800 --> 00:11:39,600
in our analysis the how the execution

300
00:11:39,600 --> 00:11:43,040
flows from initializing functions usage

301
00:11:43,040 --> 00:11:45,519
function and termination functions

302
00:11:45,519 --> 00:11:47,360
so after we do this we'll be able to

303
00:11:47,360 --> 00:11:49,040
identify all the pieces of code that we

304
00:11:49,040 --> 00:11:51,440
want to preserve giving a specific

305
00:11:51,440 --> 00:11:52,880
functionality of bluetooth that we are

306
00:11:52,880 --> 00:11:54,160
interested in

307
00:11:54,160 --> 00:11:57,680
but we are also able to identify the

308
00:11:57,680 --> 00:11:59,040
commands

309
00:11:59,040 --> 00:12:01,680
that we call the hci commands that these

310
00:12:01,680 --> 00:12:04,720
functionality sends to the field so now

311
00:12:04,720 --> 00:12:07,279
we also know the commands that we need

312
00:12:07,279 --> 00:12:09,440
that these functionality sends to the to

313
00:12:09,440 --> 00:12:11,279
the firmware and so we need we know the

314
00:12:11,279 --> 00:12:13,680
the commands that we want to preserve

315
00:12:13,680 --> 00:12:15,680
into the firmware and we can remove the

316
00:12:15,680 --> 00:12:19,600
others so to remove the others

317
00:12:19,600 --> 00:12:21,920
we need to understand where the commands

318
00:12:21,920 --> 00:12:24,560
that we want to remove are

319
00:12:24,560 --> 00:12:26,560
implemented specifically these are

320
00:12:26,560 --> 00:12:27,920
implemented to

321
00:12:27,920 --> 00:12:30,560
handlers so what we want to do is to

322
00:12:30,560 --> 00:12:35,120
identify in the humor code automatically

323
00:12:35,120 --> 00:12:37,519
where specific

324
00:12:37,519 --> 00:12:40,480
what is the code parsing these commands

325
00:12:40,480 --> 00:12:42,720
either and and determining which type of

326
00:12:42,720 --> 00:12:45,200
commands they are and then dispatching

327
00:12:45,200 --> 00:12:47,839
them to the different command type

328
00:12:47,839 --> 00:12:49,200
handlers

329
00:12:49,200 --> 00:12:51,360
so

330
00:12:51,360 --> 00:12:52,639
these analysis

331
00:12:52,639 --> 00:12:54,240
we design a way to identify

332
00:12:54,240 --> 00:12:56,320
automatically in firmware where this

333
00:12:56,320 --> 00:12:58,800
sort of dispatching functions

334
00:12:58,800 --> 00:12:59,760
are

335
00:12:59,760 --> 00:13:01,519
and this is particularly challenging

336
00:13:01,519 --> 00:13:03,680
because firmware is not open source so

337
00:13:03,680 --> 00:13:07,760
we need to do a binary level analysis

338
00:13:07,760 --> 00:13:10,000
and

339
00:13:10,639 --> 00:13:12,079
without going to the details basically

340
00:13:12,079 --> 00:13:15,519
the analysis is based on the fact that

341
00:13:15,519 --> 00:13:16,639
since

342
00:13:16,639 --> 00:13:19,440
a command has a specific structure the

343
00:13:19,440 --> 00:13:21,839
code that is parsing it needs to have a

344
00:13:21,839 --> 00:13:23,839
specific structure so by doing binary

345
00:13:23,839 --> 00:13:26,560
analysis we are able to identify code

346
00:13:26,560 --> 00:13:28,160
that is parsing

347
00:13:28,160 --> 00:13:30,720
data with that specific

348
00:13:30,720 --> 00:13:32,720
structure

349
00:13:32,720 --> 00:13:33,600
and

350
00:13:33,600 --> 00:13:36,399
so we implemented all of these uh

351
00:13:36,399 --> 00:13:39,199
in uh using lvm for the os code analysis

352
00:13:39,199 --> 00:13:40,560
because we have

353
00:13:40,560 --> 00:13:42,800
source code of the host code whereas for

354
00:13:42,800 --> 00:13:45,040
the firmware we use anger and that is a

355
00:13:45,040 --> 00:13:47,600
binary analysis tool because we don't

356
00:13:47,600 --> 00:13:49,600
have a source code for the field

357
00:13:49,600 --> 00:13:52,320
we try all this um

358
00:13:52,320 --> 00:13:55,199
approach on on four different uh

359
00:13:55,199 --> 00:13:57,199
host codes running on different android

360
00:13:57,199 --> 00:13:58,720
devices that are running on different

361
00:13:58,720 --> 00:14:00,160
embedded systems

362
00:14:00,160 --> 00:14:03,839
and on different femur samples

363
00:14:03,839 --> 00:14:06,959
so what we can see is that uh

364
00:14:06,959 --> 00:14:09,760
on average by keeping one profile and

365
00:14:09,760 --> 00:14:12,399
removing all the others so by while

366
00:14:12,399 --> 00:14:14,160
keeping one functionality and removing

367
00:14:14,160 --> 00:14:16,160
all the other code we were able to

368
00:14:16,160 --> 00:14:17,920
reduce

369
00:14:17,920 --> 00:14:19,519
the code by about

370
00:14:19,519 --> 00:14:21,279
40 percent

371
00:14:21,279 --> 00:14:23,279
uh

372
00:14:23,279 --> 00:14:25,920
and in the firmware we were able to

373
00:14:25,920 --> 00:14:27,199
remove

374
00:14:27,199 --> 00:14:30,079
most of the hci command handlers because

375
00:14:30,079 --> 00:14:33,839
these firmware implement a lot of

376
00:14:34,000 --> 00:14:35,199
a lot of

377
00:14:35,199 --> 00:14:37,279
what we call vendor-specific commands a

378
00:14:37,279 --> 00:14:38,800
lot of commands that are only used for

379
00:14:38,800 --> 00:14:41,199
debug or for development

380
00:14:41,199 --> 00:14:43,760
that are potentially vulnerable

381
00:14:43,760 --> 00:14:46,720
but they are typically not used used in

382
00:14:46,720 --> 00:14:48,800
normal

383
00:14:48,800 --> 00:14:51,600
bluetooth operations so we also remove a

384
00:14:51,600 --> 00:14:53,199
lot of them

385
00:14:53,199 --> 00:14:55,760
and after doing this

386
00:14:55,760 --> 00:14:59,600
we were able to significantly make the

387
00:14:59,600 --> 00:15:01,760
the femur and the horse code safer now

388
00:15:01,760 --> 00:15:03,360
so this is a list of

389
00:15:03,360 --> 00:15:06,800
cve a list of known attacks that

390
00:15:06,800 --> 00:15:09,440
in our deploted femur and in our

391
00:15:09,440 --> 00:15:12,320
deployed host code an attacker cannot do

392
00:15:12,320 --> 00:15:14,480
anymore because we just removed the code

393
00:15:14,480 --> 00:15:16,720
that was vulnerable to these attacks so

394
00:15:16,720 --> 00:15:18,560
this is at least and some of these kudos

395
00:15:18,560 --> 00:15:21,519
could even be triggered over the air so

396
00:15:21,519 --> 00:15:23,199
without requiring the user doing

397
00:15:23,199 --> 00:15:25,600
anything just by getting near to a

398
00:15:25,600 --> 00:15:27,199
bluetooth enabled device you could

399
00:15:27,199 --> 00:15:29,120
trigger these attached

400
00:15:29,120 --> 00:15:31,040
if you don't

401
00:15:31,040 --> 00:15:33,519
but you cannot trigger them anymore in

402
00:15:33,519 --> 00:15:35,680
our uh deployed

403
00:15:35,680 --> 00:15:36,639
code

404
00:15:36,639 --> 00:15:38,519
so i'm just going to show you

405
00:15:38,519 --> 00:15:42,000
a demo here

406
00:15:42,000 --> 00:15:44,480
just to to show

407
00:15:44,480 --> 00:15:46,639
a little bit more concretely so here we

408
00:15:46,639 --> 00:15:48,399
are running a as you can see on the

409
00:15:48,399 --> 00:15:49,440
bottom

410
00:15:49,440 --> 00:15:52,079
left you can see a

411
00:15:52,079 --> 00:15:55,600
nexus 5 phone and in this phone and on

412
00:15:55,600 --> 00:15:59,040
and here on the on the right

413
00:15:59,040 --> 00:16:01,279
uh we are running a

414
00:16:01,279 --> 00:16:02,639
script that is

415
00:16:02,639 --> 00:16:03,920
triggering

416
00:16:03,920 --> 00:16:06,079
an exploit against the phone

417
00:16:06,079 --> 00:16:07,279
so

418
00:16:07,279 --> 00:16:11,279
now we run the exploit

419
00:16:11,279 --> 00:16:12,320
and

420
00:16:12,320 --> 00:16:17,120
we will see that the bluetooth crashes

421
00:16:18,880 --> 00:16:21,600
should be now

422
00:16:21,680 --> 00:16:24,560
okay so we see that bluetooth crash

423
00:16:24,560 --> 00:16:29,199
so then what we can do is that we can uh

424
00:16:29,199 --> 00:16:31,600
run our devoting code i'm gonna skip

425
00:16:31,600 --> 00:16:33,040
some part but

426
00:16:33,040 --> 00:16:35,759
first of all we analyze the square up we

427
00:16:35,759 --> 00:16:37,360
identified that the square app only

428
00:16:37,360 --> 00:16:39,279
needs the gut profile

429
00:16:39,279 --> 00:16:43,440
then we analyze we run our llcm analysis

430
00:16:43,440 --> 00:16:46,079
and our lfdm analysis

431
00:16:46,079 --> 00:16:49,360
we generate two things one is the the

432
00:16:49,360 --> 00:16:52,000
bloated host code

433
00:16:52,000 --> 00:16:54,399
and one is the um

434
00:16:54,399 --> 00:16:56,880
and one is the list of hci commands that

435
00:16:56,880 --> 00:16:58,240
are needed

436
00:16:58,240 --> 00:17:00,000
so after this

437
00:17:00,000 --> 00:17:03,360
we take this this information and

438
00:17:03,360 --> 00:17:04,880
we

439
00:17:04,880 --> 00:17:06,400
first of all

440
00:17:06,400 --> 00:17:07,679
we

441
00:17:07,679 --> 00:17:09,280
we need to flash

442
00:17:09,280 --> 00:17:13,678
the new host code into the device

443
00:17:13,760 --> 00:17:15,520
because the deployed host code we need

444
00:17:15,520 --> 00:17:17,520
to put it into the device

445
00:17:17,520 --> 00:17:18,799
and

446
00:17:18,799 --> 00:17:20,640
that we are doing it right now and then

447
00:17:20,640 --> 00:17:22,400
we also need to

448
00:17:22,400 --> 00:17:24,319
deploy the firmware so to deploy the

449
00:17:24,319 --> 00:17:26,640
film we start from the list of hci

450
00:17:26,640 --> 00:17:29,440
commands that we want to preserve

451
00:17:29,440 --> 00:17:32,240
and then we just run the script to

452
00:17:32,240 --> 00:17:34,240
rewrite uh

453
00:17:34,240 --> 00:17:36,640
to rewrite the code

454
00:17:36,640 --> 00:17:38,480
uh in the firmware

455
00:17:38,480 --> 00:17:40,559
and after we do all of that

456
00:17:40,559 --> 00:17:42,480
we can see two things so we want to

457
00:17:42,480 --> 00:17:45,200
verify two things one is that the phone

458
00:17:45,200 --> 00:17:47,600
is not vulnerable anymore to the

459
00:17:47,600 --> 00:17:50,320
exploits that we run before and here you

460
00:17:50,320 --> 00:17:52,000
can see that the script

461
00:17:52,000 --> 00:17:53,760
is unable to trigger

462
00:17:53,760 --> 00:17:54,720
the

463
00:17:54,720 --> 00:17:57,280
the expert now so this shows that the

464
00:17:57,280 --> 00:17:59,280
phone is not vulnerable anymore to that

465
00:17:59,280 --> 00:18:02,160
attack but in a sense but in parallel we

466
00:18:02,160 --> 00:18:04,640
can also show that even if we remove a

467
00:18:04,640 --> 00:18:06,400
lot of the bluetooth code we can still

468
00:18:06,400 --> 00:18:07,840
use the functionality that we are

469
00:18:07,840 --> 00:18:10,400
interested in specifically we can still

470
00:18:10,400 --> 00:18:11,440
uh

471
00:18:11,440 --> 00:18:14,080
interact with our with these square

472
00:18:14,080 --> 00:18:15,840
credit card reader we can still connect

473
00:18:15,840 --> 00:18:18,720
to it and potentially use it to

474
00:18:18,720 --> 00:18:19,919
accept

475
00:18:19,919 --> 00:18:22,880
payments so again even if we

476
00:18:22,880 --> 00:18:25,679
uh deployed the bluetooth

477
00:18:25,679 --> 00:18:27,360
stack

478
00:18:27,360 --> 00:18:29,520
before the device that we are interested

479
00:18:29,520 --> 00:18:32,480
in this credit card reader is still it

480
00:18:32,480 --> 00:18:35,120
is still working as intended

481
00:18:35,120 --> 00:18:38,080
and so we have a safer device a safer

482
00:18:38,080 --> 00:18:40,799
phone itself a safer connection that is

483
00:18:40,799 --> 00:18:44,080
still uh working for what we want uh to

484
00:18:44,080 --> 00:18:45,360
do

485
00:18:45,360 --> 00:18:46,799
and uh

486
00:18:46,799 --> 00:18:49,440
this is the end of the demo and in

487
00:18:49,440 --> 00:18:50,559
summary

488
00:18:50,559 --> 00:18:52,400
we developed a technique to

489
00:18:52,400 --> 00:18:54,320
identify another code in the bluetooth

490
00:18:54,320 --> 00:18:57,039
stack and remove it through a automated

491
00:18:57,039 --> 00:18:59,360
the bloater the bloating approach

492
00:18:59,360 --> 00:19:02,480
we were able to remove about 40 percent

493
00:19:02,480 --> 00:19:04,480
of the house code and about 60 of the

494
00:19:04,480 --> 00:19:05,760
firmware

495
00:19:05,760 --> 00:19:07,760
but most importantly by deploying the

496
00:19:07,760 --> 00:19:11,440
code we were able to make the

497
00:19:11,440 --> 00:19:14,240
bluetooth stacks immune to 20

498
00:19:14,240 --> 00:19:15,760
known attacks

499
00:19:15,760 --> 00:19:17,360
and of course and this has been

500
00:19:17,360 --> 00:19:19,679
published in a recent paper

501
00:19:19,679 --> 00:19:24,720
and also the code is all public on vita

502
00:19:24,720 --> 00:19:27,039
okay

503
00:19:27,360 --> 00:19:29,360
maybe i have

504
00:19:29,360 --> 00:19:31,600
a few minutes for questions or or i'm

505
00:19:31,600 --> 00:19:32,799
not sure

506
00:19:32,799 --> 00:19:34,799
wonderful uh antonio thank you very much

507
00:19:34,799 --> 00:19:36,559
for printing for presenting your

508
00:19:36,559 --> 00:19:38,000
research

509
00:19:38,000 --> 00:19:40,160
to everyone i have

510
00:19:40,160 --> 00:19:41,360
linked

511
00:19:41,360 --> 00:19:43,520
to antonio's homepage

512
00:19:43,520 --> 00:19:45,360
in the chat

513
00:19:45,360 --> 00:19:47,600
please feel free to follow up directly

514
00:19:47,600 --> 00:19:48,880
also take a look at some of the white

515
00:19:48,880 --> 00:19:51,440
papers for some of his other research

516
00:19:51,440 --> 00:19:52,960
again antonio thank you very much for

517
00:19:52,960 --> 00:19:55,960
presenting

