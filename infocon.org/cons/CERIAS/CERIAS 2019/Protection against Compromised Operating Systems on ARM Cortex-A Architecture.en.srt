1
00:00:00,790 --> 00:00:05,090
good afternoon and welcome to this

2
00:00:03,379 --> 00:00:07,880
week's episode of the serious security

3
00:00:05,090 --> 00:00:10,129
seminar today we have a guest speaker

4
00:00:07,880 --> 00:00:11,870
who's had a wonderful I think a number

5
00:00:10,129 --> 00:00:13,669
of meetings with some of our faculty on

6
00:00:11,870 --> 00:00:15,168
on campus and excited about the

7
00:00:13,669 --> 00:00:18,190
collaborations that could come out of

8
00:00:15,169 --> 00:00:20,150
that for those who are watching on video

9
00:00:18,190 --> 00:00:22,820
please take a look at the serious

10
00:00:20,150 --> 00:00:25,640
website as the 20th annual serious

11
00:00:22,820 --> 00:00:30,620
security symposium will be coming up but

12
00:00:25,640 --> 00:00:31,790
April 9th and 10th of this year and if

13
00:00:30,620 --> 00:00:33,170
you happen to be viewing this in the

14
00:00:31,790 --> 00:00:36,109
future take a look at our website

15
00:00:33,170 --> 00:00:38,269
because annually we hold this event that

16
00:00:36,109 --> 00:00:41,030
it is open to the public so our speaker

17
00:00:38,269 --> 00:00:43,998
today is Professor menu from Roosevelt

18
00:00:41,030 --> 00:00:49,249
University welcome professor okay thank

19
00:00:43,999 --> 00:00:52,940
you okay thanks for coming everyone and

20
00:00:49,249 --> 00:00:56,600
it's my great honor to report on my

21
00:00:52,940 --> 00:00:59,420
recent research work to professors

22
00:00:56,600 --> 00:01:01,399
students here so hopefully I can get

23
00:00:59,420 --> 00:01:06,469
some feedback from you and further

24
00:01:01,399 --> 00:01:08,990
improve our research work so I invested

25
00:01:06,469 --> 00:01:13,699
in years and Malay or our research group

26
00:01:08,990 --> 00:01:19,158
Malay worked on ARM processors and also

27
00:01:13,700 --> 00:01:25,759
security problems arm-based devices so

28
00:01:19,159 --> 00:01:30,289
the major reason is the popular IOT

29
00:01:25,759 --> 00:01:34,759
devices and i2 computing Internet of

30
00:01:30,289 --> 00:01:36,770
Things cloud computing so the rest of

31
00:01:34,759 --> 00:01:38,869
the computing trend those major trend

32
00:01:36,770 --> 00:01:41,869
that will bring in more and more

33
00:01:38,869 --> 00:01:44,259
arm-based devices so the security

34
00:01:41,869 --> 00:01:49,729
problems are becoming a very important

35
00:01:44,259 --> 00:01:52,130
issue on those devices so we have worked

36
00:01:49,729 --> 00:01:55,700
on several security problems one of them

37
00:01:52,130 --> 00:01:59,298
we think is very challenging is how to

38
00:01:55,700 --> 00:02:02,630
protect the applications when the

39
00:01:59,299 --> 00:02:04,009
operating system is compromised so

40
00:02:02,630 --> 00:02:08,210
basically we can think about the

41
00:02:04,009 --> 00:02:10,848
challenging problem I think I'm thinking

42
00:02:08,210 --> 00:02:13,610
my career so I think more than ten years

43
00:02:10,848 --> 00:02:15,290
ago when I first heard of

44
00:02:13,610 --> 00:02:19,460
of challenging security problems well

45
00:02:15,290 --> 00:02:21,950
the problem is how to run our programs

46
00:02:19,460 --> 00:02:23,480
in a malicious environment we're in a

47
00:02:21,950 --> 00:02:27,530
hostile environment how can you

48
00:02:23,480 --> 00:02:29,359
guarantee your program your app is ok in

49
00:02:27,530 --> 00:02:31,970
that hostile environment so this

50
00:02:29,360 --> 00:02:34,940
question where this problem has not been

51
00:02:31,970 --> 00:02:37,160
changed in the past decades we proposed

52
00:02:34,940 --> 00:02:38,060
a lot of solutions but it's the hotel a

53
00:02:37,160 --> 00:02:40,850
new problem

54
00:02:38,060 --> 00:02:43,070
so today we just pick this problem

55
00:02:40,850 --> 00:02:47,269
particular problem we talk about one

56
00:02:43,070 --> 00:02:53,720
possible solution ARM processors ok so

57
00:02:47,270 --> 00:02:56,330
that's the whole background so for so

58
00:02:53,720 --> 00:02:58,850
why we pick ARM processors it basically

59
00:02:56,330 --> 00:03:00,739
is mainly about the the recent trends

60
00:02:58,850 --> 00:03:05,690
especially if you go to Home Depot

61
00:03:00,739 --> 00:03:08,630
Walmart or Lowe's so Best Buy those

62
00:03:05,690 --> 00:03:11,750
popular stores you will see smart home

63
00:03:08,630 --> 00:03:15,049
demo area to go to that area you see a

64
00:03:11,750 --> 00:03:18,140
lot of smart things like the Arlo or

65
00:03:15,050 --> 00:03:20,930
smart doorbell Smart Switches

66
00:03:18,140 --> 00:03:23,000
so those are all Internet of Things I

67
00:03:20,930 --> 00:03:25,070
think every one of us already learned a

68
00:03:23,000 --> 00:03:27,320
lot of it and they are becoming more and

69
00:03:25,070 --> 00:03:30,680
more popular in our daily life like it

70
00:03:27,320 --> 00:03:34,670
or not when I look at my home routers I

71
00:03:30,680 --> 00:03:38,330
see 30 or more devices connected

72
00:03:34,670 --> 00:03:41,510
including the Chromebook issued by my

73
00:03:38,330 --> 00:03:43,760
kids like elementary school and the

74
00:03:41,510 --> 00:03:45,980
middle school so we have everyone has

75
00:03:43,760 --> 00:03:50,048
more and more devices those devices are

76
00:03:45,980 --> 00:03:52,880
mainly based on ARM processors ok so

77
00:03:50,049 --> 00:03:55,010
this is the major trend so if we look at

78
00:03:52,880 --> 00:03:57,440
this picture also this picture is

79
00:03:55,010 --> 00:03:59,630
probably in tonight so I didn't make it

80
00:03:57,440 --> 00:04:03,950
so I poured this picture this picture

81
00:03:59,630 --> 00:04:06,620
shows the family of Internet of Things

82
00:04:03,950 --> 00:04:09,619
or smart devices and you see how many

83
00:04:06,620 --> 00:04:12,079
categories how many different Internet

84
00:04:09,620 --> 00:04:15,290
of Things or smart devices we are having

85
00:04:12,079 --> 00:04:18,978
now and we are having more and more of

86
00:04:15,290 --> 00:04:20,630
the daily life ok so this picture see

87
00:04:18,978 --> 00:04:21,289
you can see a lot of movies recently

88
00:04:20,630 --> 00:04:24,890
right

89
00:04:21,290 --> 00:04:26,970
so sci-fi movies so the robots are

90
00:04:24,890 --> 00:04:29,460
becoming smarter and smile

91
00:04:26,970 --> 00:04:31,620
we have fighting with them so a lot of

92
00:04:29,460 --> 00:04:33,870
people are really worrying about what

93
00:04:31,620 --> 00:04:34,920
our future will be if they are getting

94
00:04:33,870 --> 00:04:40,190
smarter and smarter

95
00:04:34,920 --> 00:04:42,960
especially security plus the recent the

96
00:04:40,190 --> 00:04:46,050
advance or development of AI technology

97
00:04:42,960 --> 00:04:48,330
right so someday probably the robot may

98
00:04:46,050 --> 00:04:54,120
beat us so if we took the act quickly

99
00:04:48,330 --> 00:04:55,969
so that that's the one view of Internet

100
00:04:54,120 --> 00:04:58,530
of Things or smart devices but this

101
00:04:55,970 --> 00:05:01,650
picture is more realistic this is

102
00:04:58,530 --> 00:05:04,650
nothing like movie so this is real thing

103
00:05:01,650 --> 00:05:08,849
so many many years of not many so lot

104
00:05:04,650 --> 00:05:12,150
like five or six years ago the vehicle

105
00:05:08,850 --> 00:05:15,180
the first vehicle was hacked is cheap so

106
00:05:12,150 --> 00:05:16,830
the Jeep was hacked is by researcher

107
00:05:15,180 --> 00:05:18,990
unfortunately noted by the real hacker

108
00:05:16,830 --> 00:05:21,270
the researcher hacked the Jeep and the

109
00:05:18,990 --> 00:05:23,220
steering the Jeep into like off the road

110
00:05:21,270 --> 00:05:27,000
and also the researchers demonstrated

111
00:05:23,220 --> 00:05:28,590
how to shut off the engine when the trip

112
00:05:27,000 --> 00:05:31,020
is running on the highway so it's very

113
00:05:28,590 --> 00:05:34,619
dangerous so those are real threats

114
00:05:31,020 --> 00:05:37,409
through our real life and recently and

115
00:05:34,620 --> 00:05:39,900
Tesla this is very popular name right a

116
00:05:37,410 --> 00:05:43,740
lot of young people they are considering

117
00:05:39,900 --> 00:05:46,380
Tesla as their first car ever so that's

118
00:05:43,740 --> 00:05:49,560
a big trend so Tesla was also hacked

119
00:05:46,380 --> 00:05:53,600
okay so because the whole vehicle has a

120
00:05:49,560 --> 00:05:55,890
lot of smart devices and the more

121
00:05:53,600 --> 00:05:57,660
computer or the more processors or

122
00:05:55,890 --> 00:06:00,120
bringing into the system then more

123
00:05:57,660 --> 00:06:02,640
vulnerable is worth more threats we have

124
00:06:00,120 --> 00:06:08,580
to face so that's very realistic

125
00:06:02,640 --> 00:06:11,900
problems so if we look at the Platinum

126
00:06:08,580 --> 00:06:16,740
platform so what are supporting those

127
00:06:11,900 --> 00:06:19,109
IOT devices or smart vehicles or smarter

128
00:06:16,740 --> 00:06:20,880
things the most of them

129
00:06:19,110 --> 00:06:24,419
I'm not saying everything but most of

130
00:06:20,880 --> 00:06:26,969
them are using arm plus Linux platform

131
00:06:24,419 --> 00:06:30,060
or even if they're not Linux in some

132
00:06:26,970 --> 00:06:32,970
kind of Linux or customized Linux so

133
00:06:30,060 --> 00:06:35,250
that's the major platform supporting the

134
00:06:32,970 --> 00:06:37,650
Internet of Things were supporting the

135
00:06:35,250 --> 00:06:40,770
smart devices for smart vehicles that's

136
00:06:37,650 --> 00:06:43,140
why we pay great

137
00:06:40,770 --> 00:06:46,530
to the security problems of these

138
00:06:43,140 --> 00:06:49,800
devices so this platform look at the

139
00:06:46,530 --> 00:06:52,169
list here this platform are supporting

140
00:06:49,800 --> 00:06:55,680
so many devices like digital video

141
00:06:52,170 --> 00:06:59,430
recorders IP cameras like RO system a

142
00:06:55,680 --> 00:07:03,750
lot of Motor Assist and Chromebooks so

143
00:06:59,430 --> 00:07:05,670
my kids bring home Chromebooks issued by

144
00:07:03,750 --> 00:07:08,070
their schools I didn't buy them but they

145
00:07:05,670 --> 00:07:11,970
are bringing Chromebooks home and also

146
00:07:08,070 --> 00:07:14,400
smartphone Android systems even iPhone

147
00:07:11,970 --> 00:07:16,590
so I have phones daughter using Linux

148
00:07:14,400 --> 00:07:19,250
but iPhone is using like similar

149
00:07:16,590 --> 00:07:22,020
technology sharing the similar

150
00:07:19,250 --> 00:07:27,150
vulnerabilities I'm talking about here

151
00:07:22,020 --> 00:07:29,940
so those are that platform being used

152
00:07:27,150 --> 00:07:33,210
being used by many IOT devices smart

153
00:07:29,940 --> 00:07:36,719
devices and we are looking at those

154
00:07:33,210 --> 00:07:39,599
platform and see what we can do to

155
00:07:36,720 --> 00:07:42,870
improve the security so this figure

156
00:07:39,600 --> 00:07:50,150
shows basically how many problems are

157
00:07:42,870 --> 00:07:54,330
being discovered in each year and the

158
00:07:50,150 --> 00:07:54,960
trend of those one our beliefs and next

159
00:07:54,330 --> 00:08:00,060
figure

160
00:07:54,960 --> 00:08:03,870
next slides summarize the major problems

161
00:08:00,060 --> 00:08:06,840
so if we have security breach on those

162
00:08:03,870 --> 00:08:11,670
platform because they are serving like

163
00:08:06,840 --> 00:08:13,679
mission-critical or life supporting

164
00:08:11,670 --> 00:08:16,020
devices like medical devices if the

165
00:08:13,680 --> 00:08:18,510
medical devices is using arm plus Linux

166
00:08:16,020 --> 00:08:19,950
platform they're compromised then that's

167
00:08:18,510 --> 00:08:23,940
life supporting system

168
00:08:19,950 --> 00:08:25,650
so let's life-threatening problems so

169
00:08:23,940 --> 00:08:31,080
for smart vehicle either Chi also be

170
00:08:25,650 --> 00:08:33,510
life-threatening problems so so the

171
00:08:31,080 --> 00:08:35,400
major threats we're talking about here

172
00:08:33,510 --> 00:08:37,620
will be once the system is compromised

173
00:08:35,400 --> 00:08:38,760
the sensitive data is gone then once the

174
00:08:37,620 --> 00:08:40,560
kernel is a compromised

175
00:08:38,760 --> 00:08:42,539
oh the data on device is gone so think

176
00:08:40,559 --> 00:08:44,849
about the smartphone as example I'm

177
00:08:42,539 --> 00:08:47,520
using my smart phone for like a half

178
00:08:44,850 --> 00:08:50,339
theta sensor data and also my bank

179
00:08:47,520 --> 00:08:54,660
accounts so a lot of like sensitive data

180
00:08:50,339 --> 00:09:00,320
and the critical applications in my life

181
00:08:54,660 --> 00:09:03,390
the the solutions so now we think about

182
00:09:00,320 --> 00:09:07,260
smartphones example I think was very

183
00:09:03,390 --> 00:09:10,350
funny simple if I worry about the app

184
00:09:07,260 --> 00:09:14,490
I'm using for example chase bank account

185
00:09:10,350 --> 00:09:17,100
so transponder app or you a app so I'm

186
00:09:14,490 --> 00:09:19,170
using you a app to purchase our tickets

187
00:09:17,100 --> 00:09:22,490
so it will be connected to my credit

188
00:09:19,170 --> 00:09:27,959
card anyway so if I'm using this app

189
00:09:22,490 --> 00:09:31,740
under platform monitors so automatic so

190
00:09:27,960 --> 00:09:34,530
are on the platform compromised that

191
00:09:31,740 --> 00:09:36,810
there is no way I can protect the

192
00:09:34,530 --> 00:09:39,030
sensitive data okay because think about

193
00:09:36,810 --> 00:09:40,829
orbiting system if the operating system

194
00:09:39,030 --> 00:09:43,500
is can romance that then there is no

195
00:09:40,830 --> 00:09:45,990
security for apps there is no privacy

196
00:09:43,500 --> 00:09:48,630
for apps operating system is serving as

197
00:09:45,990 --> 00:09:50,850
the manager or serving as the god of the

198
00:09:48,630 --> 00:09:54,030
whole Condor system once the kernel is

199
00:09:50,850 --> 00:09:58,110
chrome resin no secret is hidden right

200
00:09:54,030 --> 00:10:00,120
so all users privacy exposed then Oh

201
00:09:58,110 --> 00:10:02,060
control flows can be modified so that's

202
00:10:00,120 --> 00:10:04,980
a huge problem

203
00:10:02,060 --> 00:10:09,329
so there are existing solutions so if

204
00:10:04,980 --> 00:10:11,700
you're working in security area probably

205
00:10:09,330 --> 00:10:15,480
you have heard the overshadow in attack

206
00:10:11,700 --> 00:10:17,370
those are the popular solutions I mean

207
00:10:15,480 --> 00:10:19,080
there are two examples of the popular

208
00:10:17,370 --> 00:10:22,980
standard like it more than 10 solutions

209
00:10:19,080 --> 00:10:26,220
okay so these solutions proposed if you

210
00:10:22,980 --> 00:10:32,400
look at the right top red top the figure

211
00:10:26,220 --> 00:10:36,570
shows the major ideas how to protect the

212
00:10:32,400 --> 00:10:39,300
compromised operating system so I select

213
00:10:36,570 --> 00:10:40,710
the damage from the compromised the

214
00:10:39,300 --> 00:10:43,290
operating system I mean to the

215
00:10:40,710 --> 00:10:45,420
applications because we want to protect

216
00:10:43,290 --> 00:10:47,430
the applications in the situation when

217
00:10:45,420 --> 00:10:49,589
the operation kernel is compromised

218
00:10:47,430 --> 00:10:54,750
that's the goal okay so basically you

219
00:10:49,590 --> 00:11:00,390
can see here we have here some solutions

220
00:10:54,750 --> 00:11:02,250
you see the right top of the slides so

221
00:11:00,390 --> 00:11:05,990
we can think about the motorisation

222
00:11:02,250 --> 00:11:08,280
motorisation so the water ization idea

223
00:11:05,990 --> 00:11:08,649
runs a hypervisor

224
00:11:08,280 --> 00:11:11,439
whereas

225
00:11:08,649 --> 00:11:15,009
whether below the operating system okay

226
00:11:11,439 --> 00:11:18,849
so that's how we use cloud services so

227
00:11:15,009 --> 00:11:21,100
if you rent if your rent Amazon ec2

228
00:11:18,850 --> 00:11:23,529
services you rent a virtual machine but

229
00:11:21,100 --> 00:11:26,800
your virtual machine is running on top

230
00:11:23,529 --> 00:11:29,379
of a hypervisor okay so that's the cloud

231
00:11:26,800 --> 00:11:32,170
structure or recorder ization structure

232
00:11:29,379 --> 00:11:34,209
so that's great so basically if you

233
00:11:32,170 --> 00:11:38,110
think about that structure now we have

234
00:11:34,209 --> 00:11:40,209
layered software stacks so even if the

235
00:11:38,110 --> 00:11:42,579
operating system a kernel is premised

236
00:11:40,209 --> 00:11:45,040
it's still good we still have a

237
00:11:42,579 --> 00:11:47,979
hypervisor below the operating system

238
00:11:45,040 --> 00:11:51,969
okay so as long as the hypervisor is not

239
00:11:47,980 --> 00:11:54,220
compromised we have something ok with

240
00:11:51,970 --> 00:11:56,230
the higher privilege level then the

241
00:11:54,220 --> 00:11:58,720
operation is the kernel to manage

242
00:11:56,230 --> 00:12:00,730
everything okay we're still good so

243
00:11:58,720 --> 00:12:03,730
that's the goal or that's the main idea

244
00:12:00,730 --> 00:12:07,269
of protection so as writes we have

245
00:12:03,730 --> 00:12:10,569
something with higher privilege level

246
00:12:07,269 --> 00:12:13,809
than the operating system kernel we're

247
00:12:10,569 --> 00:12:19,110
good ok so basically that's the key idea

248
00:12:13,809 --> 00:12:23,559
of oh let's go back of resident proposed

249
00:12:19,110 --> 00:12:25,839
technology so what relized running

250
00:12:23,559 --> 00:12:28,870
environment we run the guest operating

251
00:12:25,839 --> 00:12:30,040
system if the gas turbine system is

252
00:12:28,870 --> 00:12:33,009
compromised

253
00:12:30,040 --> 00:12:34,899
we have hypervisor so the hypervisor can

254
00:12:33,009 --> 00:12:36,790
protect the application in the

255
00:12:34,899 --> 00:12:42,819
compromised operating system that's the

256
00:12:36,790 --> 00:12:46,329
key idea ok so any questions ok so the

257
00:12:42,819 --> 00:12:48,339
idea is very simple and many approaches

258
00:12:46,329 --> 00:12:51,910
are sharing exactly the same idea but

259
00:12:48,339 --> 00:12:54,670
using different implementations or using

260
00:12:51,910 --> 00:12:59,620
different implementation details ok so

261
00:12:54,670 --> 00:13:03,490
that's the major work in recent years

262
00:12:59,620 --> 00:13:06,249
for example overshadow is one of the

263
00:13:03,490 --> 00:13:10,540
very popular solution using hypervisor

264
00:13:06,249 --> 00:13:13,449
to protect the applications against

265
00:13:10,540 --> 00:13:16,569
compromised the kernel so even better

266
00:13:13,449 --> 00:13:19,870
even better so if you look at here Intel

267
00:13:16,569 --> 00:13:21,069
SGX this is a very hot term in recent

268
00:13:19,870 --> 00:13:24,230
years as yeah

269
00:13:21,070 --> 00:13:27,650
provide hardware protection so the

270
00:13:24,230 --> 00:13:34,760
processor has included additional

271
00:13:27,650 --> 00:13:37,610
hardware okay so building a link called

272
00:13:34,760 --> 00:13:40,850
isolated hardware area in the memory so

273
00:13:37,610 --> 00:13:43,660
even if other part of memory is

274
00:13:40,850 --> 00:13:47,930
compromised the isolated part will be

275
00:13:43,660 --> 00:13:50,420
untouched ok so that's the idea of xgx

276
00:13:47,930 --> 00:13:53,120
basically we don't use hypervisor but we

277
00:13:50,420 --> 00:13:56,900
use Hardware additional hardware so

278
00:13:53,120 --> 00:14:00,830
basically the earliest paper of icx was

279
00:13:56,900 --> 00:14:04,790
published as we title have it it was in

280
00:14:00,830 --> 00:14:06,589
OSD i/o 2014 so that's the earliest idea

281
00:14:04,790 --> 00:14:10,520
using as Jack said SJ has become very

282
00:14:06,589 --> 00:14:12,950
popular but the requirement will be the

283
00:14:10,520 --> 00:14:15,860
processor has to support us GX and

284
00:14:12,950 --> 00:14:19,400
another problem we don't talk about too

285
00:14:15,860 --> 00:14:21,589
much about that problem today but just

286
00:14:19,400 --> 00:14:24,050
remember we still have the citation or

287
00:14:21,589 --> 00:14:26,779
problem for us GX so basically when you

288
00:14:24,050 --> 00:14:30,620
interest reacts you leave something in

289
00:14:26,779 --> 00:14:34,070
the cache when you get out the menu try

290
00:14:30,620 --> 00:14:38,029
to utilize the information left in the

291
00:14:34,070 --> 00:14:39,680
cache so it can create a set channel for

292
00:14:38,029 --> 00:14:42,200
the attackers so it is still not a

293
00:14:39,680 --> 00:14:43,790
perfect solution but it is much better

294
00:14:42,200 --> 00:14:46,070
so basically I'm talking about

295
00:14:43,790 --> 00:14:48,949
okay hypervisor based in solution or

296
00:14:46,070 --> 00:14:53,630
hardware based the solution and the

297
00:14:48,950 --> 00:14:57,110
third category is split split okay so if

298
00:14:53,630 --> 00:15:01,100
I want to protect application the hub

299
00:14:57,110 --> 00:15:04,430
but we build the application differently

300
00:15:01,100 --> 00:15:07,070
or in different ways from other regular

301
00:15:04,430 --> 00:15:10,189
applications so like you're building

302
00:15:07,070 --> 00:15:12,500
additional shell additional protection

303
00:15:10,190 --> 00:15:15,050
mechanism into the application that's

304
00:15:12,500 --> 00:15:18,310
the third way and so basically these are

305
00:15:15,050 --> 00:15:21,290
the three major categories to support

306
00:15:18,310 --> 00:15:23,569
the protection okay of application

307
00:15:21,290 --> 00:15:28,870
against compromised operating systems

308
00:15:23,570 --> 00:15:28,870
that's the existing solutions so

309
00:15:29,380 --> 00:15:39,470
the problem of existing solution is most

310
00:15:34,430 --> 00:15:42,649
of them are based on Intel platform or

311
00:15:39,470 --> 00:15:46,730
Intel Architecture so Intel Architecture

312
00:15:42,649 --> 00:15:49,790
is being used by Intel AMD and many

313
00:15:46,730 --> 00:15:52,250
other like server manufacturer they use

314
00:15:49,790 --> 00:15:55,010
this platform okay but for mobile

315
00:15:52,250 --> 00:15:58,640
devices like I said is ARM arm doesn't

316
00:15:55,010 --> 00:16:00,830
have a CG X well arm was built it

317
00:15:58,640 --> 00:16:04,130
doesn't support hypervisor okay so now

318
00:16:00,830 --> 00:16:07,160
it supports but we have to port a

319
00:16:04,130 --> 00:16:10,220
hypervisor idea in unto the arm platform

320
00:16:07,160 --> 00:16:14,540
so we don't know whether we can do that

321
00:16:10,220 --> 00:16:16,850
and is also a very high V solution

322
00:16:14,540 --> 00:16:20,240
running on an arm think about hypervisor

323
00:16:16,850 --> 00:16:22,339
if you are installing a authorization

324
00:16:20,240 --> 00:16:25,250
class were like waterboxx okay when

325
00:16:22,339 --> 00:16:28,190
we're on your laptop running water

326
00:16:25,250 --> 00:16:30,830
machine it will be much slower okay so

327
00:16:28,190 --> 00:16:33,170
it will significantly affect the

328
00:16:30,830 --> 00:16:37,810
performance of your personal computer so

329
00:16:33,170 --> 00:16:41,540
it's not a solution for high performance

330
00:16:37,810 --> 00:16:43,819
computing or basically if we bring in

331
00:16:41,540 --> 00:16:47,209
the hypervisor idea onto mobile devices

332
00:16:43,820 --> 00:16:50,089
then it may be too slow too so for smart

333
00:16:47,209 --> 00:16:52,040
phones or for smart devices okay you

334
00:16:50,089 --> 00:16:55,279
specially think about the Smart Switch

335
00:16:52,040 --> 00:16:57,500
how can we have a hypervisor smart

336
00:16:55,279 --> 00:17:03,260
switch that's too heavy so not a good

337
00:16:57,500 --> 00:17:05,660
solution so basically here the proposed

338
00:17:03,260 --> 00:17:11,000
the solution is like we called trust the

339
00:17:05,660 --> 00:17:14,780
shadow we build a protected application

340
00:17:11,000 --> 00:17:17,510
area on the ARM processor so it's called

341
00:17:14,780 --> 00:17:19,730
a shadowed area shadow area so we trust

342
00:17:17,510 --> 00:17:22,910
that area so we protect that I really

343
00:17:19,730 --> 00:17:24,980
guest the normal operating system so

344
00:17:22,910 --> 00:17:27,140
this project is collaboration efforts

345
00:17:24,980 --> 00:17:29,030
between Microsoft Research UTSA I was

346
00:17:27,140 --> 00:17:33,260
from you can see I just the

347
00:17:29,030 --> 00:17:35,300
muros built last fall so this work was

348
00:17:33,260 --> 00:17:38,540
done when I was at UTSA and also Penn

349
00:17:35,300 --> 00:17:41,629
State Florida Institute of Technology we

350
00:17:38,540 --> 00:17:44,480
worked together to develop this idea

351
00:17:41,630 --> 00:17:48,940
and they implement the system ARM

352
00:17:44,480 --> 00:17:52,340
processors so we want to support the

353
00:17:48,940 --> 00:17:55,250
applications without and the changes

354
00:17:52,340 --> 00:17:57,110
modifications because that's important

355
00:17:55,250 --> 00:17:59,600
if we want to change the applications

356
00:17:57,110 --> 00:18:02,299
the our production will have very

357
00:17:59,600 --> 00:18:05,240
limited applications so then the vendors

358
00:18:02,299 --> 00:18:08,650
were the software developer they need to

359
00:18:05,240 --> 00:18:12,770
change their application to adopt our

360
00:18:08,650 --> 00:18:14,659
structure or technology so that's that's

361
00:18:12,770 --> 00:18:17,000
a lot of efforts so basically we are

362
00:18:14,659 --> 00:18:20,470
saying okay our protection should not

363
00:18:17,000 --> 00:18:26,690
require any changes to the existing

364
00:18:20,470 --> 00:18:29,809
application and also we want to use we

365
00:18:26,690 --> 00:18:31,850
want to use existing operating system we

366
00:18:29,809 --> 00:18:34,220
don't want to change anything to the

367
00:18:31,850 --> 00:18:36,110
average system okay so we want to use

368
00:18:34,220 --> 00:18:39,350
the existing application existing open

369
00:18:36,110 --> 00:18:43,510
system so basically it's easy it's very

370
00:18:39,350 --> 00:18:47,330
easy to be adopted on the existing

371
00:18:43,510 --> 00:18:50,179
mobile platforms so before we go to the

372
00:18:47,330 --> 00:18:52,090
full technical details or complete

373
00:18:50,179 --> 00:18:55,190
solutions we let's look at the

374
00:18:52,090 --> 00:18:56,899
background of ARM processors so in case

375
00:18:55,190 --> 00:18:58,909
you don't to work on these areas so

376
00:18:56,900 --> 00:19:01,250
probably you are working on AI so this

377
00:18:58,909 --> 00:19:05,240
picture will give you some DeGraaf ok so

378
00:19:01,250 --> 00:19:07,970
how the ARM processor looks like and how

379
00:19:05,240 --> 00:19:11,600
much difference it is from the Intel

380
00:19:07,970 --> 00:19:14,620
processors okay so here the ARM

381
00:19:11,600 --> 00:19:19,428
processor so this figure is mainly for

382
00:19:14,620 --> 00:19:22,010
ARM Cortex a series so our arm has two

383
00:19:19,429 --> 00:19:25,700
series so cortex a is for mobile devices

384
00:19:22,010 --> 00:19:30,289
cortex-m has last computing function

385
00:19:25,700 --> 00:19:35,900
less powerful computing power then

386
00:19:30,289 --> 00:19:39,890
cortex-m is really for devices like note

387
00:19:35,900 --> 00:19:41,330
that smart so cortex a easy early for

388
00:19:39,890 --> 00:19:42,830
mobile devices still doing some

389
00:19:41,330 --> 00:19:46,879
computing and doing some a graphical

390
00:19:42,830 --> 00:19:50,870
things so here this figure shows this is

391
00:19:46,880 --> 00:19:56,029
the structure for both cortex a and

392
00:19:50,870 --> 00:19:58,939
cortex am but if you look at the details

393
00:19:56,029 --> 00:20:02,029
we mainly use this structure for cortex

394
00:19:58,940 --> 00:20:06,080
a cortex a because cortex a has more

395
00:20:02,029 --> 00:20:08,450
powerful processor than cortex-m so

396
00:20:06,080 --> 00:20:11,139
basically we if you look at the red

397
00:20:08,450 --> 00:20:15,950
color here the red colored red line here

398
00:20:11,139 --> 00:20:19,639
be white the processor mode into two

399
00:20:15,950 --> 00:20:21,379
separate world we call word so the red

400
00:20:19,639 --> 00:20:25,969
part in green color you see that's a

401
00:20:21,379 --> 00:20:29,809
secure word okay so insecure word the

402
00:20:25,970 --> 00:20:34,009
change of memory can be anywhere can be

403
00:20:29,809 --> 00:20:36,619
anywhere of the processor connecting the

404
00:20:34,009 --> 00:20:39,679
memory space but in the normal world in

405
00:20:36,619 --> 00:20:42,678
a normal world the access to the memory

406
00:20:39,679 --> 00:20:44,539
is limited he's removed so now let's

407
00:20:42,679 --> 00:20:46,970
think about a computer using ARM

408
00:20:44,539 --> 00:20:50,840
processor electron book okay so for the

409
00:20:46,970 --> 00:20:55,009
whole memory space some space can only

410
00:20:50,840 --> 00:21:01,809
be accessed by the secure world okay but

411
00:20:55,009 --> 00:21:05,950
oh space all memory space if if if the

412
00:21:01,809 --> 00:21:09,350
secure word secure word configure allows

413
00:21:05,950 --> 00:21:12,799
all space can be accessed by the

414
00:21:09,350 --> 00:21:15,949
processor from the secure word but a

415
00:21:12,799 --> 00:21:18,259
normal word normal word can have very

416
00:21:15,950 --> 00:21:21,470
limited access okay they are not allowed

417
00:21:18,259 --> 00:21:24,919
if the processor is in normal world the

418
00:21:21,470 --> 00:21:27,350
processor cannot have access permissions

419
00:21:24,919 --> 00:21:31,399
to all the locations of memory so

420
00:21:27,350 --> 00:21:35,139
limited access so that's the permission

421
00:21:31,399 --> 00:21:38,959
design by the ARM processor so basically

422
00:21:35,139 --> 00:21:41,178
when we entered the secure word when we

423
00:21:38,960 --> 00:21:44,989
entered a secure word we can do

424
00:21:41,179 --> 00:21:47,570
everything we want if we go back to the

425
00:21:44,989 --> 00:21:48,980
normal world we have very limited

426
00:21:47,570 --> 00:21:52,369
functions okay

427
00:21:48,980 --> 00:21:53,450
so that's the short summary just our

428
00:21:52,369 --> 00:21:59,649
summary of it

429
00:21:53,450 --> 00:22:02,989
so given this security design in a

430
00:21:59,649 --> 00:22:07,330
normal word if you look at the table in

431
00:22:02,989 --> 00:22:09,320
red color here this level means okay the

432
00:22:07,330 --> 00:22:11,929
operating system kernel

433
00:22:09,320 --> 00:22:15,730
is compromised okay so in the normal

434
00:22:11,930 --> 00:22:18,290
word we have operating system kernel

435
00:22:15,730 --> 00:22:20,840
compromised by the attacker already okay

436
00:22:18,290 --> 00:22:23,090
so basically if the attacker is here in

437
00:22:20,840 --> 00:22:26,919
the normal world like I said before the

438
00:22:23,090 --> 00:22:31,870
attacker can not access the secure word

439
00:22:26,920 --> 00:22:36,830
okay so the damage will be restricted to

440
00:22:31,870 --> 00:22:41,179
the normal word only okay so that's the

441
00:22:36,830 --> 00:22:46,060
hardware design by the ARM processor so

442
00:22:41,180 --> 00:22:49,820
here on the right side if we have a

443
00:22:46,060 --> 00:22:52,580
trusted component like trusted OS here

444
00:22:49,820 --> 00:22:54,530
I'm writing trusted OS here but later on

445
00:22:52,580 --> 00:22:58,850
I will explain is really not a complete

446
00:22:54,530 --> 00:23:02,300
OS we don't run two operating systems

447
00:22:58,850 --> 00:23:05,360
here so these trusted always just show

448
00:23:02,300 --> 00:23:07,669
it serves the operation is no function

449
00:23:05,360 --> 00:23:10,250
but we really don't have to operate

450
00:23:07,670 --> 00:23:14,750
systems here okay so think about the

451
00:23:10,250 --> 00:23:16,100
right side so if in the secure world the

452
00:23:14,750 --> 00:23:18,830
attacker compromised

453
00:23:16,100 --> 00:23:22,570
any component then the whole platform is

454
00:23:18,830 --> 00:23:27,260
gone okay that's the situation we do not

455
00:23:22,570 --> 00:23:29,899
want it happened okay so basically here

456
00:23:27,260 --> 00:23:33,730
given this figure I'm saying the

457
00:23:29,900 --> 00:23:36,110
hardware supports secure isolation

458
00:23:33,730 --> 00:23:40,280
between the secure with a normal world

459
00:23:36,110 --> 00:23:42,439
if any thing bad happens to the system

460
00:23:40,280 --> 00:23:45,560
we wanted apply this thing to be

461
00:23:42,440 --> 00:23:48,830
isolated to be contained to the left

462
00:23:45,560 --> 00:23:52,159
part to the blue part okay so that's it

463
00:23:48,830 --> 00:23:54,470
let's the go so given this hardware

464
00:23:52,160 --> 00:23:57,140
support given this hardware support now

465
00:23:54,470 --> 00:24:00,860
we can think about some possible

466
00:23:57,140 --> 00:24:02,210
solutions so if so where is

467
00:24:00,860 --> 00:24:05,870
straightforward very straightforward

468
00:24:02,210 --> 00:24:06,650
okay so okay so the secure word sounds

469
00:24:05,870 --> 00:24:09,350
really good

470
00:24:06,650 --> 00:24:11,660
okay so anything we put in the secure

471
00:24:09,350 --> 00:24:14,659
word it will know to be touched or

472
00:24:11,660 --> 00:24:18,670
accessed by the attacker okay that's

473
00:24:14,660 --> 00:24:21,440
really really good so why don't we put

474
00:24:18,670 --> 00:24:23,120
the operating system and applications

475
00:24:21,440 --> 00:24:26,029
everything into the secure world

476
00:24:23,120 --> 00:24:32,239
then nobody can touch it all of them are

477
00:24:26,029 --> 00:24:35,779
protected okay anyone tell me why don't

478
00:24:32,240 --> 00:24:38,600
we let so does that sound a very

479
00:24:35,779 --> 00:24:49,909
straightforward solution and then the

480
00:24:38,600 --> 00:24:54,009
problem all south why not yes okay like

481
00:24:49,909 --> 00:24:57,080
I repeat so so basically he is saying if

482
00:24:54,009 --> 00:24:58,909
we install the application to the secure

483
00:24:57,080 --> 00:25:00,439
world we're going to change the

484
00:24:58,909 --> 00:25:09,740
application design right that's her

485
00:25:00,440 --> 00:25:11,419
point okay so basically the installation

486
00:25:09,740 --> 00:25:16,549
of application will also change the

487
00:25:11,419 --> 00:25:18,350
operating system right yeah okay when we

488
00:25:16,549 --> 00:25:20,629
try to bring everything to the secure

489
00:25:18,350 --> 00:25:22,369
word actually we already changed the

490
00:25:20,629 --> 00:25:23,860
application the operating system there

491
00:25:22,369 --> 00:25:27,199
right

492
00:25:23,860 --> 00:25:31,248
very good point so basically he's

493
00:25:27,200 --> 00:25:33,710
absolutely correct and think about if we

494
00:25:31,249 --> 00:25:36,710
are moving everything to the secure

495
00:25:33,710 --> 00:25:38,720
world well in other words secure room

496
00:25:36,710 --> 00:25:40,999
secure room we think this room is

497
00:25:38,720 --> 00:25:43,279
isolated this is trusted the room then

498
00:25:40,999 --> 00:25:46,429
we bring over here then this room will

499
00:25:43,279 --> 00:25:48,350
be secure actually not probably bringing

500
00:25:46,429 --> 00:25:50,480
some bad people here all right I'm not

501
00:25:48,350 --> 00:25:53,059
saying you're a bad people but when we

502
00:25:50,480 --> 00:25:54,320
bring in everything here everything to

503
00:25:53,059 --> 00:25:57,529
the secure world we are bringing in

504
00:25:54,320 --> 00:25:59,720
risks problems everything we are

505
00:25:57,529 --> 00:26:02,450
bringing to the secure world ok so that

506
00:25:59,720 --> 00:26:06,259
it's a guest our initial goal we cannot

507
00:26:02,450 --> 00:26:09,080
do that so we must leave untrusted

508
00:26:06,259 --> 00:26:10,879
component to the normal world we only

509
00:26:09,080 --> 00:26:13,039
bring in trust the component to the

510
00:26:10,879 --> 00:26:16,879
secure that's what we can do about it ok

511
00:26:13,039 --> 00:26:20,869
so another comments for operating system

512
00:26:16,879 --> 00:26:23,360
we absolutely don't want to move any

513
00:26:20,869 --> 00:26:27,559
oberon system the Horace's me into the

514
00:26:23,360 --> 00:26:30,769
secure what's the reason of that so for

515
00:26:27,559 --> 00:26:33,799
software engineering perspective for

516
00:26:30,769 --> 00:26:37,130
security perspective and the orbiting

517
00:26:33,799 --> 00:26:39,620
system I mean except except the

518
00:26:37,130 --> 00:26:43,179
the the customized I rinsed them more

519
00:26:39,620 --> 00:26:47,090
especially the bad properties like ice

520
00:26:43,179 --> 00:26:48,259
for most operating system they are too

521
00:26:47,090 --> 00:26:51,649
large to secure

522
00:26:48,259 --> 00:26:53,450
we have several millions lines of code

523
00:26:51,649 --> 00:26:55,879
there is nobody to make sure they are

524
00:26:53,450 --> 00:26:56,870
won or ability frayed absolutely secure

525
00:26:55,880 --> 00:27:00,080
no way to do that

526
00:26:56,870 --> 00:27:01,729
so so we cannot move with a whole

527
00:27:00,080 --> 00:27:04,399
operating system into the secure world

528
00:27:01,730 --> 00:27:08,509
because we are bringing all the problems

529
00:27:04,399 --> 00:27:11,689
to secure world ok so that's why is not

530
00:27:08,509 --> 00:27:13,340
a simple or straightforward solution so

531
00:27:11,690 --> 00:27:17,240
we cannot move everything there we can

532
00:27:13,340 --> 00:27:24,340
only move what we want to protect there

533
00:27:17,240 --> 00:27:24,340
so only trusted applications ok so here

534
00:27:25,149 --> 00:27:32,389
these solution erosion basically ok so

535
00:27:29,110 --> 00:27:34,399
you bring the first point so can't

536
00:27:32,389 --> 00:27:36,740
protect the legacy code ok

537
00:27:34,399 --> 00:27:39,080
so if we want to move operating system

538
00:27:36,740 --> 00:27:40,759
their application there there must be

539
00:27:39,080 --> 00:27:42,620
some changes either to the operating

540
00:27:40,759 --> 00:27:44,919
system or to the application right very

541
00:27:42,620 --> 00:27:47,418
good point so that's the first thing we

542
00:27:44,919 --> 00:27:49,220
cannot move everything in the secure

543
00:27:47,419 --> 00:27:52,159
world and also additionally like I said

544
00:27:49,220 --> 00:27:55,129
too large to secure and also doesn't

545
00:27:52,159 --> 00:27:57,529
support memory encryption so I expand

546
00:27:55,129 --> 00:28:02,090
this later because so so currently we

547
00:27:57,529 --> 00:28:07,429
can think about was the when we access

548
00:28:02,090 --> 00:28:11,418
was the kernel is compromised and the

549
00:28:07,429 --> 00:28:14,899
kernel can access anywhere it can access

550
00:28:11,419 --> 00:28:18,350
okay so like the normal word kernel can

551
00:28:14,899 --> 00:28:20,899
access all space in the no more so if we

552
00:28:18,350 --> 00:28:24,019
have trusted data in normal it will be

553
00:28:20,899 --> 00:28:25,699
disclosed to the attacker okay so if we

554
00:28:24,019 --> 00:28:28,580
have commenced kernel in the security

555
00:28:25,700 --> 00:28:31,070
that is close to the whole computer

556
00:28:28,580 --> 00:28:35,299
platform so that's the problem so let's

557
00:28:31,070 --> 00:28:38,779
see let's look at these figure first

558
00:28:35,299 --> 00:28:42,620
then we go back to the summary okay so

559
00:28:38,779 --> 00:28:48,649
this figure shows you can see here okay

560
00:28:42,620 --> 00:28:49,729
so we only move trusted application to

561
00:28:48,649 --> 00:28:53,510
the secure world

562
00:28:49,730 --> 00:28:56,510
okay then you see here at the bottom of

563
00:28:53,510 --> 00:28:58,040
the transit the application the previous

564
00:28:56,510 --> 00:28:59,840
figure shows the complete operating

565
00:28:58,040 --> 00:29:02,030
system to carbonate but here

566
00:28:59,840 --> 00:29:05,959
like I said complete operating system is

567
00:29:02,030 --> 00:29:08,750
too large to be brought in here okay we

568
00:29:05,960 --> 00:29:13,430
only have a random system so nothing but

569
00:29:08,750 --> 00:29:16,910
a rental system as very small component

570
00:29:13,430 --> 00:29:19,910
is a proxy is proxy it's just the

571
00:29:16,910 --> 00:29:22,040
forward so okay so if we were making a

572
00:29:19,910 --> 00:29:24,020
system call let's say ivory so as a

573
00:29:22,040 --> 00:29:26,960
computer science major or a major as

574
00:29:24,020 --> 00:29:29,450
long as you do programming a system call

575
00:29:26,960 --> 00:29:32,420
even though here so applications will

576
00:29:29,450 --> 00:29:35,000
make season come right open file close

577
00:29:32,420 --> 00:29:37,700
file or send message here season call

578
00:29:35,000 --> 00:29:40,370
then this random system will serve as

579
00:29:37,700 --> 00:29:43,100
proxy okay is not a complete operating

580
00:29:40,370 --> 00:29:46,610
system but it serves that proxy you see

581
00:29:43,100 --> 00:29:49,730
here forward the request that would the

582
00:29:46,610 --> 00:29:52,100
colonel outside the secure word so

583
00:29:49,730 --> 00:29:53,810
basically I don't trust the kernel but I

584
00:29:52,100 --> 00:29:57,530
trust the random system so please

585
00:29:53,810 --> 00:29:59,870
forward my service request then the

586
00:29:57,530 --> 00:30:02,030
service will be done by the kernel

587
00:29:59,870 --> 00:30:06,770
outside the secure world so in the

588
00:30:02,030 --> 00:30:10,520
normal world okay so this is the key

589
00:30:06,770 --> 00:30:11,720
idea how we solve the problem but now I

590
00:30:10,520 --> 00:30:15,260
have a question for you

591
00:30:11,720 --> 00:30:19,510
so note that simple so looks like

592
00:30:15,260 --> 00:30:22,879
purpose out so my question will be okay

593
00:30:19,510 --> 00:30:26,900
so every application will make a lot of

594
00:30:22,880 --> 00:30:29,240
system cost right so anyway I'm not

595
00:30:26,900 --> 00:30:32,420
saying we do all system comes here

596
00:30:29,240 --> 00:30:33,860
because I said already we don't have a

597
00:30:32,420 --> 00:30:37,520
complete abilities to me in the secure

598
00:30:33,860 --> 00:30:41,419
world so now all the work what most of

599
00:30:37,520 --> 00:30:42,320
work will still be done outside secure

600
00:30:41,420 --> 00:30:45,320
order so here

601
00:30:42,320 --> 00:30:48,710
Liam's kernel but I'm marking the kernel

602
00:30:45,320 --> 00:30:51,679
has compromised so we may ask what I'm

603
00:30:48,710 --> 00:30:53,770
saying there you're still standing the

604
00:30:51,680 --> 00:30:57,359
worker to a compromise the kernel

605
00:30:53,770 --> 00:31:00,658
how the job can be done

606
00:30:57,359 --> 00:31:00,658
what do you think

607
00:31:00,729 --> 00:31:05,799
so I'm sending a Java to a person I

608
00:31:03,729 --> 00:31:09,129
don't trust okay

609
00:31:05,799 --> 00:31:11,349
so it's possible like I said open the

610
00:31:09,129 --> 00:31:12,549
file then these compromise the kernel

611
00:31:11,349 --> 00:31:16,149
will not open file

612
00:31:12,549 --> 00:31:22,869
okay but the he tells me I open the file

613
00:31:16,149 --> 00:31:25,168
for you but actually not okay what if it

614
00:31:22,869 --> 00:31:30,099
happens

615
00:31:25,169 --> 00:31:32,919
let's okay okay so I don't care so the

616
00:31:30,099 --> 00:31:35,889
protection go here is I don't want to

617
00:31:32,919 --> 00:31:38,950
guarantee compromised the kernel still

618
00:31:35,889 --> 00:31:44,258
do the job I don't care whether it does

619
00:31:38,950 --> 00:31:47,109
his job I only care my application here

620
00:31:44,259 --> 00:31:50,499
my application is protected so in the

621
00:31:47,109 --> 00:31:53,080
case of compromised the kernel my

622
00:31:50,499 --> 00:31:55,629
information is not disclosed that's it

623
00:31:53,080 --> 00:31:58,418
let's make oh I don't guarantee the

624
00:31:55,629 --> 00:32:01,059
functionality of the kernel but in the

625
00:31:58,419 --> 00:32:01,869
case of a compromised kernel I want

626
00:32:01,059 --> 00:32:04,210
security

627
00:32:01,869 --> 00:32:07,238
I want the confidentiality I want

628
00:32:04,210 --> 00:32:09,849
integrating ok so that's my security go

629
00:32:07,239 --> 00:32:12,309
so basically this is the protection

630
00:32:09,849 --> 00:32:14,590
structure so basically ok I want to do

631
00:32:12,309 --> 00:32:18,009
some system call i standard a SIM card

632
00:32:14,590 --> 00:32:20,259
to random system then these proxy will

633
00:32:18,009 --> 00:32:23,859
forward my request to the kernel okay

634
00:32:20,259 --> 00:32:25,629
so regardless the kernel is compromised

635
00:32:23,859 --> 00:32:28,658
or not is doing the job or not I don't

636
00:32:25,629 --> 00:32:32,738
care ok you need to do the job do it or

637
00:32:28,659 --> 00:32:36,039
not reply that's it okay so that's the

638
00:32:32,739 --> 00:32:38,739
protection but in the case now we look

639
00:32:36,039 --> 00:32:41,529
at the figure again so in the case that

640
00:32:38,739 --> 00:32:44,139
the kernel is compromised you see here

641
00:32:41,529 --> 00:32:47,229
the current comrades it's different from

642
00:32:44,139 --> 00:32:51,070
existing system it different from any

643
00:32:47,229 --> 00:32:54,519
existing platform this kernel can only

644
00:32:51,070 --> 00:32:57,879
access normal world okay so this kernel

645
00:32:54,519 --> 00:33:00,729
cannot access anything inside the secure

646
00:32:57,879 --> 00:33:04,629
world that's it that's our code that's

647
00:33:00,729 --> 00:33:08,080
the goal of our editor okay so it cannot

648
00:33:04,629 --> 00:33:10,759
steal anything from our app it cannot do

649
00:33:08,080 --> 00:33:13,428
anything to harm the integrity

650
00:33:10,759 --> 00:33:15,199
of our application that's it my super

651
00:33:13,429 --> 00:33:17,119
secret number is protected my bank

652
00:33:15,199 --> 00:33:20,409
account is protected my transaction is

653
00:33:17,119 --> 00:33:23,119
protected that's the goal so in case of

654
00:33:20,409 --> 00:33:27,820
compromise the operating system my app

655
00:33:23,119 --> 00:33:32,529
is protected that's it okay any

656
00:33:27,820 --> 00:33:35,689
questions yes

657
00:33:32,529 --> 00:33:37,639
so does it so where is the runtime

658
00:33:35,690 --> 00:33:40,489
system actually is it running in like a

659
00:33:37,639 --> 00:33:43,728
kernel mode state like where it has like

660
00:33:40,489 --> 00:33:46,459
Sapir like a lot of power to it like

661
00:33:43,729 --> 00:33:48,889
operating power what how does that work

662
00:33:46,459 --> 00:33:51,639
okay let me repeat your question so he

663
00:33:48,889 --> 00:33:55,149
asked where is the runtime system

664
00:33:51,639 --> 00:33:58,069
I mean running here and how the

665
00:33:55,149 --> 00:34:00,619
basically you're also asking how the

666
00:33:58,069 --> 00:34:03,559
services are done like the addition to

667
00:34:00,619 --> 00:34:06,589
the kernel functions what are the

668
00:34:03,559 --> 00:34:08,449
processor mode and the water privilege

669
00:34:06,589 --> 00:34:09,828
levels right mm-hmm your very good

670
00:34:08,449 --> 00:34:12,500
question so I'm sure going to show you

671
00:34:09,829 --> 00:34:14,599
hit you next okay very good very good

672
00:34:12,500 --> 00:34:18,500
question so you must be in this field

673
00:34:14,599 --> 00:34:20,629
okay very good so let's go back to look

674
00:34:18,500 --> 00:34:24,079
at the quick summary so we have limited

675
00:34:20,629 --> 00:34:26,480
time so a quick summary of our design

676
00:34:24,079 --> 00:34:29,029
goals so basically we want the isolation

677
00:34:26,480 --> 00:34:31,099
we want isolation okay so we want a

678
00:34:29,029 --> 00:34:34,309
strong isolation using the hardware

679
00:34:31,099 --> 00:34:36,440
facility to isolate our applications

680
00:34:34,309 --> 00:34:39,169
from the compromised operating system

681
00:34:36,440 --> 00:34:41,990
secondly we want to reduce the trusted

682
00:34:39,168 --> 00:34:44,058
computing base so this is important like

683
00:34:41,989 --> 00:34:45,799
I said there is no way to secure the

684
00:34:44,059 --> 00:34:48,349
whole operation that's too large several

685
00:34:45,799 --> 00:34:51,788
billion lines of code so now we want to

686
00:34:48,349 --> 00:34:54,470
reduce the TCP will only guarantee renta

687
00:34:51,789 --> 00:34:56,839
supported the protein if we secure it

688
00:34:54,469 --> 00:34:57,348
proxy proxy has only five thousand lines

689
00:34:56,839 --> 00:34:59,480
of code

690
00:34:57,349 --> 00:35:01,910
so in our vertebral development so

691
00:34:59,480 --> 00:35:05,930
that's a small amount of code we can

692
00:35:01,910 --> 00:35:09,078
secure okay so it's lightweight so I'm

693
00:35:05,930 --> 00:35:13,038
sure if you know ih0 attack io2 attack

694
00:35:09,079 --> 00:35:17,230
so these are famous attack compromised

695
00:35:13,039 --> 00:35:20,450
operating system kernel can use

696
00:35:17,230 --> 00:35:22,670
manipulated return values return values

697
00:35:20,450 --> 00:35:23,500
from the system call to compromised

698
00:35:22,670 --> 00:35:26,740
application

699
00:35:23,500 --> 00:35:30,820
so this is very smart so I do attack is

700
00:35:26,740 --> 00:35:32,348
like serious threats made to

701
00:35:30,820 --> 00:35:36,490
applications if the kernel is

702
00:35:32,349 --> 00:35:39,040
compromised so our design can defend

703
00:35:36,490 --> 00:35:42,060
against this type of attack because in

704
00:35:39,040 --> 00:35:45,430
our workflow we can add additional

705
00:35:42,060 --> 00:35:47,590
integrity check before we return the

706
00:35:45,430 --> 00:35:51,220
values to the application so additional

707
00:35:47,590 --> 00:35:54,550
security is added so not back to your

708
00:35:51,220 --> 00:35:58,480
question so let's go to see okay so this

709
00:35:54,550 --> 00:36:00,760
workflow hopefully I can answer title

710
00:35:58,480 --> 00:36:03,760
our most of your questions so basically

711
00:36:00,760 --> 00:36:07,960
you can see here now we have more

712
00:36:03,760 --> 00:36:10,990
detailed view to both words okay so for

713
00:36:07,960 --> 00:36:14,890
every processor design our acts 86 I

714
00:36:10,990 --> 00:36:18,368
think most of us can remember the ring

715
00:36:14,890 --> 00:36:20,740
levels right ring zero ring why ring two

716
00:36:18,369 --> 00:36:23,680
and three those are four different

717
00:36:20,740 --> 00:36:27,009
privilege levels or we can also say

718
00:36:23,680 --> 00:36:30,879
those are different processor modes okay

719
00:36:27,010 --> 00:36:33,310
so if you look at it here so we have SVC

720
00:36:30,880 --> 00:36:36,760
that service both so you make a system

721
00:36:33,310 --> 00:36:39,130
call ARM processor goes here apt that's

722
00:36:36,760 --> 00:36:42,640
a port so basically if you're accessing

723
00:36:39,130 --> 00:36:46,869
page note in the memory where invalid

724
00:36:42,640 --> 00:36:49,598
page access that's abort mode so irq is

725
00:36:46,869 --> 00:36:53,170
the interrupt processing mode here so

726
00:36:49,599 --> 00:36:55,750
that's interrupt so that's the user mode

727
00:36:53,170 --> 00:36:58,750
if you look at the dash line here above

728
00:36:55,750 --> 00:37:01,390
dash lines user mode below that line is

729
00:36:58,750 --> 00:37:04,030
privileged mode so actually if you look

730
00:37:01,390 --> 00:37:06,460
at the arm reference manual so it goes

731
00:37:04,030 --> 00:37:10,000
so fast if you look at the arm reference

732
00:37:06,460 --> 00:37:13,119
value depending on the model of the

733
00:37:10,000 --> 00:37:16,780
processor it may have more processor

734
00:37:13,119 --> 00:37:18,580
modes here but here I'm just using busy

735
00:37:16,780 --> 00:37:20,650
example to show for differing the

736
00:37:18,580 --> 00:37:23,470
presence or most of a different

737
00:37:20,650 --> 00:37:26,410
functions of processor how we arrange

738
00:37:23,470 --> 00:37:30,310
how we arrange the privilege levels here

739
00:37:26,410 --> 00:37:35,490
in our design okay so basically here you

740
00:37:30,310 --> 00:37:40,290
see normal word if we

741
00:37:35,490 --> 00:37:43,259
sir if we serve the application in the

742
00:37:40,290 --> 00:37:47,390
normal word using the serious mode of

743
00:37:43,260 --> 00:37:50,520
processor here we are going to have a

744
00:37:47,390 --> 00:37:52,379
problem because like I said if the

745
00:37:50,520 --> 00:37:57,570
kernel is compromised then everything is

746
00:37:52,380 --> 00:38:00,540
compromised so instead here once we move

747
00:37:57,570 --> 00:38:02,520
our trusted application to the secure

748
00:38:00,540 --> 00:38:06,240
where you see here that's the monitor

749
00:38:02,520 --> 00:38:09,450
here we have in the secure word then you

750
00:38:06,240 --> 00:38:12,779
see the service we will be done in the

751
00:38:09,450 --> 00:38:15,930
secure world so once we have a service

752
00:38:12,780 --> 00:38:18,840
request or a system call it will be done

753
00:38:15,930 --> 00:38:20,370
in the secure world using this path in

754
00:38:18,840 --> 00:38:22,860
this path but the accurate service like

755
00:38:20,370 --> 00:38:27,330
I said we'll go back proxy wheel forward

756
00:38:22,860 --> 00:38:30,810
okay so you see here the secure does

757
00:38:27,330 --> 00:38:33,799
have all the presenter mode like the

758
00:38:30,810 --> 00:38:36,900
secure world will handle paging

759
00:38:33,800 --> 00:38:39,930
separately from the normal world so

760
00:38:36,900 --> 00:38:42,000
paging is about virtual memory

761
00:38:39,930 --> 00:38:44,879
management basically you access a memory

762
00:38:42,000 --> 00:38:48,420
page if he is not in the memory we need

763
00:38:44,880 --> 00:38:52,440
to map with whom map or loads the memory

764
00:38:48,420 --> 00:38:55,020
contents and update the page table after

765
00:38:52,440 --> 00:39:02,070
the page table so basically here you see

766
00:38:55,020 --> 00:39:04,259
here so in the secure world we manage

767
00:39:02,070 --> 00:39:07,890
the page table you see the abort abort

768
00:39:04,260 --> 00:39:11,610
mode handled and the normal word abort

769
00:39:07,890 --> 00:39:14,430
so these two page table management are

770
00:39:11,610 --> 00:39:16,830
separate they are separate so in case we

771
00:39:14,430 --> 00:39:19,980
have compromised the kernel in the

772
00:39:16,830 --> 00:39:22,680
normal world that secure the paging will

773
00:39:19,980 --> 00:39:24,960
not be affected so the memory management

774
00:39:22,680 --> 00:39:26,569
will not be compromised okay so this is

775
00:39:24,960 --> 00:39:29,910
very important so yeah and even to the

776
00:39:26,570 --> 00:39:32,130
presence remote isolation we also need

777
00:39:29,910 --> 00:39:35,609
to think what a memory memory how memory

778
00:39:32,130 --> 00:39:37,800
is protected in the case of compromised

779
00:39:35,610 --> 00:39:40,770
the kernel so here this figure shows

780
00:39:37,800 --> 00:39:45,570
better like I said these are secure this

781
00:39:40,770 --> 00:39:47,300
normal world and like the manage the

782
00:39:45,570 --> 00:39:51,860
memory management unit and

783
00:39:47,300 --> 00:39:54,500
you am mu is for paging right so M mu we

784
00:39:51,860 --> 00:39:58,010
have a two side of paging so once that

785
00:39:54,500 --> 00:40:00,470
is for secure word one side is for

786
00:39:58,010 --> 00:40:03,290
normal work so you see the different

787
00:40:00,470 --> 00:40:09,080
color here as these four secur secur

788
00:40:03,290 --> 00:40:12,560
word and in shadow so so you see here

789
00:40:09,080 --> 00:40:18,350
that some isolation we can say they're

790
00:40:12,560 --> 00:40:20,420
like no more area PZ is for trusted zone

791
00:40:18,350 --> 00:40:22,910
they secure secure word is called the

792
00:40:20,420 --> 00:40:26,120
trusted zone so trust the zone runtime

793
00:40:22,910 --> 00:40:29,629
trust the zoom app so basically you see

794
00:40:26,120 --> 00:40:33,109
that's how we map how we map the memory

795
00:40:29,630 --> 00:40:35,870
space in the secure word and in the

796
00:40:33,110 --> 00:40:38,420
normal world how they are overlapped how

797
00:40:35,870 --> 00:40:41,990
they are divided you see we don't

798
00:40:38,420 --> 00:40:44,390
overlap the secured and normal world but

799
00:40:41,990 --> 00:40:47,149
we will need we need a somehow overlap

800
00:40:44,390 --> 00:40:51,230
so I will explain what so the reason is

801
00:40:47,150 --> 00:40:53,570
we we don't want to absolutely clean

802
00:40:51,230 --> 00:40:56,870
isolation the reason is think about

803
00:40:53,570 --> 00:40:59,210
system code what do we need forces of

804
00:40:56,870 --> 00:41:01,370
God we need the parameters in the

805
00:40:59,210 --> 00:41:03,650
parameters if you have this open a file

806
00:41:01,370 --> 00:41:05,509
you have to tell which file you're going

807
00:41:03,650 --> 00:41:12,460
to open right that's part of parameter

808
00:41:05,510 --> 00:41:16,550
so basically so let's so let's play that

809
00:41:12,460 --> 00:41:24,290
size here but oh so attached it starts

810
00:41:16,550 --> 00:41:31,620
that's keyboard here so

811
00:41:24,290 --> 00:41:41,850
so basically when the try tool let's

812
00:41:31,620 --> 00:41:44,700
let's let's go to here here okay so from

813
00:41:41,850 --> 00:41:48,000
here from this figure we showed we

814
00:41:44,700 --> 00:41:50,970
isolated the secure water number work

815
00:41:48,000 --> 00:41:53,850
but like I said if we consider system

816
00:41:50,970 --> 00:41:57,060
across we have to transfer some contents

817
00:41:53,850 --> 00:41:59,910
as the parameter and we have to accept

818
00:41:57,060 --> 00:42:03,500
the result of system cost the result

819
00:41:59,910 --> 00:42:06,810
sometimes is not only a single like

820
00:42:03,500 --> 00:42:09,720
number sometimes is the contents in the

821
00:42:06,810 --> 00:42:14,759
buffer okay so it's not easy there is no

822
00:42:09,720 --> 00:42:19,230
easy way to just encrypt decrypt or know

823
00:42:14,760 --> 00:42:22,190
to share the parameters using like

824
00:42:19,230 --> 00:42:24,480
registers use you know fixed like a

825
00:42:22,190 --> 00:42:28,440
restructure or something like that so

826
00:42:24,480 --> 00:42:31,260
basically we have to overlap overlap

827
00:42:28,440 --> 00:42:33,360
only a little bit a specific area of

828
00:42:31,260 --> 00:42:36,900
memory between the normal warden secured

829
00:42:33,360 --> 00:42:39,870
to transfer the system cop rameters and

830
00:42:36,900 --> 00:42:42,030
the result okay so that's necessary so

831
00:42:39,870 --> 00:42:45,450
here what you look at the figure is not

832
00:42:42,030 --> 00:42:46,620
that I was truly isolated between the

833
00:42:45,450 --> 00:42:49,529
secure with at normal world we still

834
00:42:46,620 --> 00:42:51,359
have something okay so some area will be

835
00:42:49,530 --> 00:42:55,110
used to transfer parameter and dirt

836
00:42:51,360 --> 00:42:59,700
replies okay so remember that the next

837
00:42:55,110 --> 00:43:02,580
step next step because we are having

838
00:42:59,700 --> 00:43:04,649
trusted applications we are protecting

839
00:43:02,580 --> 00:43:07,830
the parameters protecting the replies

840
00:43:04,650 --> 00:43:11,790
now we need to have additional

841
00:43:07,830 --> 00:43:15,390
protection about the application so

842
00:43:11,790 --> 00:43:18,630
think about vacation because when we

843
00:43:15,390 --> 00:43:21,450
double-click application the operating

844
00:43:18,630 --> 00:43:25,500
system the operating system is the guy

845
00:43:21,450 --> 00:43:29,160
who loaded the application but I'm

846
00:43:25,500 --> 00:43:32,670
saying something something like paradox

847
00:43:29,160 --> 00:43:33,270
or contradictory we don't trust our

848
00:43:32,670 --> 00:43:36,000
buddy system

849
00:43:33,270 --> 00:43:37,500
now I'm asking everything to load the my

850
00:43:36,000 --> 00:43:39,420
trust did the application

851
00:43:37,500 --> 00:43:42,590
how can we do that what a year for the

852
00:43:39,420 --> 00:43:45,330
operating system changes my application

853
00:43:42,590 --> 00:43:48,210
during the loading process that's

854
00:43:45,330 --> 00:43:51,359
disaster right so we want the integrity

855
00:43:48,210 --> 00:43:55,440
of the trusted process so here you see

856
00:43:51,359 --> 00:43:57,420
here so we create a problem for each

857
00:43:55,440 --> 00:43:59,970
trusted process okay

858
00:43:57,420 --> 00:44:03,290
you see here that's the example so this

859
00:43:59,970 --> 00:44:06,660
is example so this is the date structure

860
00:44:03,290 --> 00:44:09,720
so if a programmer you probably want to

861
00:44:06,660 --> 00:44:12,480
see it right the bottom part that's this

862
00:44:09,720 --> 00:44:15,230
structure but the general idea is here

863
00:44:12,480 --> 00:44:19,160
so basically we generate the hash value

864
00:44:15,230 --> 00:44:22,470
we add a signature to the application so

865
00:44:19,160 --> 00:44:25,920
one application is loaded we check the

866
00:44:22,470 --> 00:44:29,459
signature to make sure the integrity of

867
00:44:25,920 --> 00:44:33,119
the application is fine it's good okay

868
00:44:29,460 --> 00:44:36,450
so no changes okay no two compromised so

869
00:44:33,119 --> 00:44:39,720
at least but of course IDing the

870
00:44:36,450 --> 00:44:41,730
signature adding hash value will require

871
00:44:39,720 --> 00:44:45,390
additional verification in the

872
00:44:41,730 --> 00:44:48,660
calculation when the when the program's

873
00:44:45,390 --> 00:44:50,940
wrote it okay so that's the key idea of

874
00:44:48,660 --> 00:44:56,240
how we protect the application of course

875
00:44:50,940 --> 00:44:57,839
there are other issues so memory devices

876
00:44:56,240 --> 00:45:02,160
interrupt handling

877
00:44:57,839 --> 00:45:04,470
Paigey but we don't forever have very

878
00:45:02,160 --> 00:45:06,210
limited time so I can let you know to

879
00:45:04,470 --> 00:45:08,368
give you the references you can read the

880
00:45:06,210 --> 00:45:25,920
further details there but that's the key

881
00:45:08,369 --> 00:45:29,480
idea okay any questions yes so you said

882
00:45:25,920 --> 00:45:34,609
like you load the entire app into the

883
00:45:29,480 --> 00:45:37,890
secure world or which means it's a

884
00:45:34,609 --> 00:45:40,650
memory slot which is like not accessible

885
00:45:37,890 --> 00:45:45,960
to the user space basically sort of

886
00:45:40,650 --> 00:45:50,099
right right so so like - you load like

887
00:45:45,960 --> 00:45:51,119
the entire app like the app memory into

888
00:45:50,099 --> 00:45:53,490
your earth

889
00:45:51,119 --> 00:45:56,609
take your world memory or like only some

890
00:45:53,490 --> 00:45:58,799
pointers or like some information of the

891
00:45:56,609 --> 00:46:01,828
app into the secure world or for example

892
00:45:58,799 --> 00:46:03,538
like some important files or like the

893
00:46:01,829 --> 00:46:07,289
password file or you load like the

894
00:46:03,539 --> 00:46:09,150
entire memory into the secure world how

895
00:46:07,289 --> 00:46:11,190
that's very cool fashion so there are

896
00:46:09,150 --> 00:46:13,559
lots of issues involved here so first we

897
00:46:11,190 --> 00:46:16,440
still follow paging we don't load the

898
00:46:13,559 --> 00:46:19,920
whole I said the whole application I'm

899
00:46:16,440 --> 00:46:21,660
saying one never any part of the

900
00:46:19,920 --> 00:46:23,970
application is needed it will be loaded

901
00:46:21,660 --> 00:46:26,368
so we still searching when I go to

902
00:46:23,970 --> 00:46:27,899
memory man I'm not like the entire

903
00:46:26,369 --> 00:46:28,499
memory oh yes that's right that's right

904
00:46:27,900 --> 00:46:30,900
that's right

905
00:46:28,499 --> 00:46:33,118
correct and also you asked a very good

906
00:46:30,900 --> 00:46:35,779
question because you mentioned the

907
00:46:33,119 --> 00:46:38,400
keyword function function so for

908
00:46:35,779 --> 00:46:41,609
security purposes there are some

909
00:46:38,400 --> 00:46:46,319
critical things or critical functions

910
00:46:41,609 --> 00:46:50,299
that cannot rely on an a untrusted

911
00:46:46,319 --> 00:46:54,960
sources like random number generator

912
00:46:50,299 --> 00:46:58,410
random number generator so if you want

913
00:46:54,960 --> 00:47:00,390
this function we don't even think about

914
00:46:58,410 --> 00:47:04,348
a compromise the kernel forget about

915
00:47:00,390 --> 00:47:07,499
that so some functions so well I explain

916
00:47:04,349 --> 00:47:10,499
the basic ideas I said oh the system

917
00:47:07,499 --> 00:47:12,839
costs go to the outside let's go to the

918
00:47:10,499 --> 00:47:16,019
normal world okay we don't trust I don't

919
00:47:12,839 --> 00:47:18,328
care but actually we care we have

920
00:47:16,019 --> 00:47:19,919
several identify the secure functions

921
00:47:18,329 --> 00:47:22,769
say good not many

922
00:47:19,920 --> 00:47:27,299
so only several we rely on them for

923
00:47:22,769 --> 00:47:31,200
security work were for secure computing

924
00:47:27,299 --> 00:47:35,460
so like I said random number generator

925
00:47:31,200 --> 00:47:38,430
so we don't rely on the outside world we

926
00:47:35,460 --> 00:47:41,579
rely on the secure word so we included

927
00:47:38,430 --> 00:47:44,009
that function is that secure word so

928
00:47:41,579 --> 00:47:46,470
that's very good point so we do consider

929
00:47:44,009 --> 00:47:48,660
those functions so they are separated

930
00:47:46,470 --> 00:47:54,029
from the operation kernel then they're

931
00:47:48,660 --> 00:47:59,549
in their protected very good very good

932
00:47:54,029 --> 00:48:01,589
question and thank you where is the

933
00:47:59,549 --> 00:48:03,330
process actually verified is that in

934
00:48:01,589 --> 00:48:06,540
like the runtime or

935
00:48:03,330 --> 00:48:09,450
is it in the actual oh okay that's so

936
00:48:06,540 --> 00:48:11,940
Papa to Wes Wes when we load the

937
00:48:09,450 --> 00:48:13,890
application we were if I was but after

938
00:48:11,940 --> 00:48:16,260
below that is already in the secured we

939
00:48:13,890 --> 00:48:19,230
don't right so because due to

940
00:48:16,260 --> 00:48:21,630
performance issues if we keep running it

941
00:48:19,230 --> 00:48:26,850
so we're wasting our time right yeah

942
00:48:21,630 --> 00:48:29,640
any other questions yes you made a great

943
00:48:26,850 --> 00:48:32,549
point that it's highly desirable not to

944
00:48:29,640 --> 00:48:37,589
force applications to be changed in

945
00:48:32,550 --> 00:48:40,970
order to be ported what language should

946
00:48:37,590 --> 00:48:43,050
I use for application for your platform

947
00:48:40,970 --> 00:48:45,060
obviously whatever language you are

948
00:48:43,050 --> 00:48:47,790
using now to develop applications

949
00:48:45,060 --> 00:48:49,620
because like I said these platform is

950
00:48:47,790 --> 00:48:51,810
supported like say applications no

951
00:48:49,620 --> 00:48:52,650
modification is needed so keep whatever

952
00:48:51,810 --> 00:48:56,279
you're using

953
00:48:52,650 --> 00:48:59,310
so it's language agnostic that's really

954
00:48:56,280 --> 00:49:01,260
great because this this is only platform

955
00:48:59,310 --> 00:49:03,120
that adds it the enforce I mean

956
00:49:01,260 --> 00:49:08,250
introduce a digital requirement to the

957
00:49:03,120 --> 00:49:08,730
application that's really great okay

958
00:49:08,250 --> 00:49:12,720
very good

959
00:49:08,730 --> 00:49:16,710
so just quickly show you the evaluation

960
00:49:12,720 --> 00:49:18,629
so this is the very popular benchmark to

961
00:49:16,710 --> 00:49:20,790
see the performance we really need other

962
00:49:18,630 --> 00:49:23,960
experiments but it's just through this

963
00:49:20,790 --> 00:49:27,450
is the major major experiments to see

964
00:49:23,960 --> 00:49:29,460
there is some other popular protection

965
00:49:27,450 --> 00:49:33,240
mechanisms like link tag there were

966
00:49:29,460 --> 00:49:36,510
popular were to coast so you see the

967
00:49:33,240 --> 00:49:42,810
overhead here 2.0 and and you see other

968
00:49:36,510 --> 00:49:44,370
numbers so our system has like you can

969
00:49:42,810 --> 00:49:46,860
see the overhead here but the compared

970
00:49:44,370 --> 00:49:51,359
with other system is is lower is much

971
00:49:46,860 --> 00:49:54,240
lower and these figures shows for web

972
00:49:51,360 --> 00:49:58,890
servers that's the overhead HTTP server

973
00:49:54,240 --> 00:50:01,259
overhead and this the HTTP in red color

974
00:49:58,890 --> 00:50:05,040
so basically the highest overhead you

975
00:50:01,260 --> 00:50:07,140
can see one point one zero so that's

976
00:50:05,040 --> 00:50:10,410
pretty much acceptable I mean

977
00:50:07,140 --> 00:50:13,230
considering all the security benefits we

978
00:50:10,410 --> 00:50:15,339
have right and actually even better if

979
00:50:13,230 --> 00:50:18,160
you think this episode

980
00:50:15,340 --> 00:50:21,490
who is going to read my super arm fried

981
00:50:18,160 --> 00:50:25,839
worms so basically I mean look to me

982
00:50:21,490 --> 00:50:28,720
it's pretty acceptable to me so so

983
00:50:25,840 --> 00:50:32,800
basically our experiment is showing so

984
00:50:28,720 --> 00:50:36,220
for those popular benchmark programs or

985
00:50:32,800 --> 00:50:40,210
applications we are proposing or

986
00:50:36,220 --> 00:50:47,620
implemented very practical security

987
00:50:40,210 --> 00:50:50,770
mechanism on the ARM processors so okay

988
00:50:47,620 --> 00:50:58,060
I think we have all right just I think

989
00:50:50,770 --> 00:51:05,460
several minutes left right so okay any

990
00:50:58,060 --> 00:51:09,970
other questions okay so just as a quick

991
00:51:05,460 --> 00:51:12,400
me just gives them information so what

992
00:51:09,970 --> 00:51:16,000
we are continuing on this project so

993
00:51:12,400 --> 00:51:18,550
like I said before it's never be a

994
00:51:16,000 --> 00:51:22,900
perfect solution so because trusted zone

995
00:51:18,550 --> 00:51:24,490
is still isolation between two words so

996
00:51:22,900 --> 00:51:26,860
when you're inter tries to access the

997
00:51:24,490 --> 00:51:29,830
tribes own you are going to left some me

998
00:51:26,860 --> 00:51:31,830
leave some information in the cache

999
00:51:29,830 --> 00:51:35,259
somewhere else in the memory those

1000
00:51:31,830 --> 00:51:37,900
information left when you interacts it's

1001
00:51:35,260 --> 00:51:38,290
the I mean transiting between the two

1002
00:51:37,900 --> 00:51:42,180
words

1003
00:51:38,290 --> 00:51:45,790
will create set channels so attackers

1004
00:51:42,180 --> 00:51:49,020
may utilize those information left by

1005
00:51:45,790 --> 00:51:51,880
the application then to get some like

1006
00:51:49,020 --> 00:51:55,960
information from the application so he's

1007
00:51:51,880 --> 00:51:57,880
never absolutely secure so our solution

1008
00:51:55,960 --> 00:52:00,940
is only about the straw isolation it's

1009
00:51:57,880 --> 00:52:02,860
memory isolation but is not a solution

1010
00:52:00,940 --> 00:52:05,620
for set channels so we are working on

1011
00:52:02,860 --> 00:52:09,580
some channels basically we look at what

1012
00:52:05,620 --> 00:52:12,940
information are left after we inter

1013
00:52:09,580 --> 00:52:15,730
TransAm then how they can be utilized so

1014
00:52:12,940 --> 00:52:18,570
that's problem probably you are also

1015
00:52:15,730 --> 00:52:22,950
interested in so that's what possible

1016
00:52:18,570 --> 00:52:29,100
research problems okay so any other

1017
00:52:22,950 --> 00:52:29,100
questions okay thank you for coming

1018
00:52:36,820 --> 00:52:38,880
you

