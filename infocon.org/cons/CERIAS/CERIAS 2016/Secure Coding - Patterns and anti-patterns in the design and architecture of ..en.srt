1
00:00:09,059 --> 00:00:19,840
good afternoon and welcome to the first

2
00:00:13,889 --> 00:00:24,160
CS 526 seminar serious seminar of the

3
00:00:19,840 --> 00:00:25,680
semester I'm Jane spafford and I'm doing

4
00:00:24,160 --> 00:00:27,610
the intro to the course today the

5
00:00:25,680 --> 00:00:31,450
instructor for this course for this

6
00:00:27,610 --> 00:00:33,219
semester professor maji of cs is out of

7
00:00:31,450 --> 00:00:36,850
the country so he can't do it today i'm

8
00:00:33,219 --> 00:00:39,010
standing in for him if you haven't

9
00:00:36,850 --> 00:00:40,510
participated in these before let me just

10
00:00:39,010 --> 00:00:42,519
give you for those of you in the room

11
00:00:40,510 --> 00:00:45,489
who are enrolled in the class a little

12
00:00:42,519 --> 00:00:47,498
bit of background this is a 4 credit

13
00:00:45,489 --> 00:00:50,260
course that you can sign up for if you

14
00:00:47,499 --> 00:00:52,300
have signed up for this course each week

15
00:00:50,260 --> 00:00:55,949
you need to sign in on the sign-in sheet

16
00:00:52,300 --> 00:00:59,620
which is circulating in the room and

17
00:00:55,949 --> 00:01:02,260
record that you're here the class is a

18
00:00:59,620 --> 00:01:05,560
pass/fail class it's based on your

19
00:01:02,260 --> 00:01:09,789
attendance if you miss more than two of

20
00:01:05,560 --> 00:01:12,850
the presentations then you will need to

21
00:01:09,790 --> 00:01:16,600
do a makeup and professor maji is the

22
00:01:12,850 --> 00:01:18,070
one who will provide that for the course

23
00:01:16,600 --> 00:01:20,440
itself we're going to have a variety of

24
00:01:18,070 --> 00:01:24,250
speakers this semester as with every

25
00:01:20,440 --> 00:01:26,890
semester and you get to listen to their

26
00:01:24,250 --> 00:01:29,050
presentation at the end of the

27
00:01:26,890 --> 00:01:31,090
presentation if they're willing to take

28
00:01:29,050 --> 00:01:34,120
questions or during the presentation

29
00:01:31,090 --> 00:01:35,650
take questions you need to turn on the

30
00:01:34,120 --> 00:01:37,480
microphone in front of you at the table

31
00:01:35,650 --> 00:01:39,450
and you do that by pressing the little

32
00:01:37,480 --> 00:01:41,950
button until the green light goes on

33
00:01:39,450 --> 00:01:44,380
that's not so that the presenter can

34
00:01:41,950 --> 00:01:48,970
hear you but so that we can capture your

35
00:01:44,380 --> 00:01:50,619
question on the video these are recorded

36
00:01:48,970 --> 00:01:52,870
and then made available through itunes

37
00:01:50,620 --> 00:01:54,910
through youtube and on the serious

38
00:01:52,870 --> 00:01:57,340
website so you can go back and look at

39
00:01:54,910 --> 00:01:58,899
these later should you wish and there

40
00:01:57,340 --> 00:02:01,420
are many people who view the seminar

41
00:01:58,900 --> 00:02:03,870
remotely and to those people welcome

42
00:02:01,420 --> 00:02:06,130
also we're glad to have you listening in

43
00:02:03,870 --> 00:02:08,440
let me ask that if you're in the room

44
00:02:06,130 --> 00:02:11,140
please turn your cell phones off or mute

45
00:02:08,440 --> 00:02:14,769
the ringer during the presentation as a

46
00:02:11,140 --> 00:02:19,569
courtesy to the guests and I'll use that

47
00:02:14,769 --> 00:02:20,560
as a segue our guest today is Michael

48
00:02:19,569 --> 00:02:22,899
Taylor he

49
00:02:20,560 --> 00:02:27,400
is the chief software developer at rook

50
00:02:22,900 --> 00:02:31,090
consulting rook is a major software and

51
00:02:27,400 --> 00:02:33,940
security vendor here in Indiana is a

52
00:02:31,090 --> 00:02:35,500
partner with serious and does a lot of

53
00:02:33,940 --> 00:02:38,260
work well not just in Indiana actually

54
00:02:35,500 --> 00:02:40,540
it's throughout the country and beyond

55
00:02:38,260 --> 00:02:43,359
but they're based here in Indiana and

56
00:02:40,540 --> 00:02:46,569
Indianapolis and they do a lot of work

57
00:02:43,360 --> 00:02:49,060
in development of software in response

58
00:02:46,569 --> 00:02:50,440
and consulting and michael has been

59
00:02:49,060 --> 00:02:51,819
their lead developer for a number of

60
00:02:50,440 --> 00:02:56,079
years and he's going to talk to us today

61
00:02:51,819 --> 00:03:00,280
about methods for developing secure and

62
00:02:56,080 --> 00:03:02,170
perhaps insecure software so Michael

63
00:03:00,280 --> 00:03:07,150
thank you very much for joining us thank

64
00:03:02,170 --> 00:03:10,660
you hello Michael Taylor so just a

65
00:03:07,150 --> 00:03:12,670
little bit of background on me and what

66
00:03:10,660 --> 00:03:15,540
we do at work security so we're a

67
00:03:12,670 --> 00:03:18,250
managed security service provider so we

68
00:03:15,540 --> 00:03:20,500
basically monitor and walk the perimeter

69
00:03:18,250 --> 00:03:24,670
of our clients networks looking for

70
00:03:20,500 --> 00:03:28,600
intrusions and the signs of compromise

71
00:03:24,670 --> 00:03:31,328
within the clients environments I was

72
00:03:28,600 --> 00:03:35,280
brought in about three years ago because

73
00:03:31,329 --> 00:03:37,989
as we were growing it was the need was

74
00:03:35,280 --> 00:03:40,630
identified that we needed to better

75
00:03:37,989 --> 00:03:42,970
integrate with the various deployments

76
00:03:40,630 --> 00:03:46,060
within our clients environment so some

77
00:03:42,970 --> 00:03:48,160
clients would have say Palo Alto

78
00:03:46,060 --> 00:03:51,250
firewalls other ones would have

79
00:03:48,160 --> 00:03:54,579
sonicwall other ones would have one set

80
00:03:51,250 --> 00:03:57,130
of sim solution and we needed a way to

81
00:03:54,579 --> 00:03:59,920
better integrate and automate that

82
00:03:57,130 --> 00:04:01,959
process and so we started the

83
00:03:59,920 --> 00:04:06,660
development team about three years ago

84
00:04:01,959 --> 00:04:10,239
and we've since deployed our tools and

85
00:04:06,660 --> 00:04:13,810
fortune 100 fortune 500 clients

86
00:04:10,239 --> 00:04:21,728
everywhere from China to India as well

87
00:04:13,810 --> 00:04:25,660
as locally so I did my undergrad at wgu

88
00:04:21,728 --> 00:04:27,659
I also teach secure code at the 1150

89
00:04:25,660 --> 00:04:30,180
Academy that's a

90
00:04:27,660 --> 00:04:34,860
down in Indianapolis I focus on app

91
00:04:30,180 --> 00:04:39,210
development and kind of job transition

92
00:04:34,860 --> 00:04:44,030
seekers to get people from zero to being

93
00:04:39,210 --> 00:04:47,820
able to program fairly quickly enjoy D&D

94
00:04:44,030 --> 00:04:53,190
other board games online video games as

95
00:04:47,820 --> 00:04:56,159
I'm sure many of you do so the the

96
00:04:53,190 --> 00:05:00,330
general focus for this is going to be

97
00:04:56,160 --> 00:05:03,240
the the patterns that we see and secure

98
00:05:00,330 --> 00:05:06,270
development and the practices that we've

99
00:05:03,240 --> 00:05:09,360
seen to be successful and development

100
00:05:06,270 --> 00:05:14,060
environments the the things that we've

101
00:05:09,360 --> 00:05:18,740
identified as yielding net positives for

102
00:05:14,060 --> 00:05:22,320
those teams and then the things that are

103
00:05:18,740 --> 00:05:25,490
seen to be net negatives the things that

104
00:05:22,320 --> 00:05:28,230
the anti-pattern so the things that

105
00:05:25,490 --> 00:05:30,900
companies repeatedly do thinking that

106
00:05:28,230 --> 00:05:34,290
they're going to have a good outcome but

107
00:05:30,900 --> 00:05:38,630
in fact they have a terrible outcome in

108
00:05:34,290 --> 00:05:41,640
many cases so the just from the top the

109
00:05:38,630 --> 00:05:44,100
security by design is often something

110
00:05:41,640 --> 00:05:47,580
that is neglected at the beginning of

111
00:05:44,100 --> 00:05:50,850
the the requirements gathering not

112
00:05:47,580 --> 00:05:55,289
planning your your project in a secure

113
00:05:50,850 --> 00:05:57,450
manner not i spending the cycles at the

114
00:05:55,290 --> 00:05:59,760
beginning to ensure that the way you're

115
00:05:57,450 --> 00:06:02,150
going to implement your solution it from

116
00:05:59,760 --> 00:06:05,159
the you know the bare wire to the

117
00:06:02,150 --> 00:06:08,570
graphical user interface is designed

118
00:06:05,160 --> 00:06:11,520
securely and then looking at those

119
00:06:08,570 --> 00:06:13,830
aspects both in the development of the

120
00:06:11,520 --> 00:06:16,140
code as well as in the deployment of

121
00:06:13,830 --> 00:06:18,690
that code whether it's you know on a

122
00:06:16,140 --> 00:06:21,570
mobile device or you know up in the

123
00:06:18,690 --> 00:06:25,440
cloud security training is another

124
00:06:21,570 --> 00:06:28,669
aspect that we like to focus on one of

125
00:06:25,440 --> 00:06:31,919
the issues that we see with a lot of the

126
00:06:28,669 --> 00:06:34,799
interviewees that we look at is that

127
00:06:31,919 --> 00:06:38,190
they often haven't either had security

128
00:06:34,800 --> 00:06:41,020
training within their undergrad or that

129
00:06:38,190 --> 00:06:43,509
it came so late in their career

130
00:06:41,020 --> 00:06:45,190
they've developed bad habits and the way

131
00:06:43,509 --> 00:06:47,940
they approach code and the way they

132
00:06:45,190 --> 00:06:52,330
think about code and so whether its

133
00:06:47,940 --> 00:06:55,780
failure to address input sanitization as

134
00:06:52,330 --> 00:07:00,128
a you know as a default kind of practice

135
00:06:55,780 --> 00:07:02,948
or whether it's looking at the the way

136
00:07:00,129 --> 00:07:05,979
that they designed their their classes

137
00:07:02,949 --> 00:07:08,919
and their architecture that that's

138
00:07:05,979 --> 00:07:10,289
something that is kind of a bad habit

139
00:07:08,919 --> 00:07:14,430
that we like to try to break with the

140
00:07:10,289 --> 00:07:17,770
secure training that we provide and then

141
00:07:14,430 --> 00:07:20,680
employee awareness most of the breaches

142
00:07:17,770 --> 00:07:24,159
that you've heard about everywhere from

143
00:07:20,680 --> 00:07:26,080
target to home depot and jimmy johns are

144
00:07:24,159 --> 00:07:30,009
often have a social engineering

145
00:07:26,080 --> 00:07:32,198
component so looking at how to ensure

146
00:07:30,009 --> 00:07:36,870
that your end users and your employees

147
00:07:32,199 --> 00:07:40,000
are being trained and the way to

148
00:07:36,870 --> 00:07:42,069
approach security is just as important

149
00:07:40,000 --> 00:07:46,270
as ensuring that your code is secured

150
00:07:42,069 --> 00:07:48,610
and then just to revisit the solid

151
00:07:46,270 --> 00:07:51,330
principles of development they for

152
00:07:48,610 --> 00:07:55,240
object-oriented development is usually a

153
00:07:51,330 --> 00:08:00,669
good refresher since you know just like

154
00:07:55,240 --> 00:08:02,590
with the revisiting that the best

155
00:08:00,669 --> 00:08:03,940
practices to ensure that your kind of

156
00:08:02,590 --> 00:08:10,090
truing up with what you're currently

157
00:08:03,940 --> 00:08:13,930
doing and how we've seen the the best

158
00:08:10,090 --> 00:08:16,900
way to to do that oops and then the

159
00:08:13,930 --> 00:08:19,270
anti-patterns you know the these are

160
00:08:16,900 --> 00:08:23,349
certainly not all encompassing these are

161
00:08:19,270 --> 00:08:25,029
just a few that I chose to address these

162
00:08:23,349 --> 00:08:28,300
are things that we've seen and

163
00:08:25,029 --> 00:08:33,250
deployments when we do our pin testing

164
00:08:28,300 --> 00:08:36,190
as well as our code review that we've

165
00:08:33,250 --> 00:08:38,589
seen and companies everywhere from you

166
00:08:36,190 --> 00:08:42,219
know the the startups to fourteen

167
00:08:38,589 --> 00:08:45,100
hundred companies where they are have

168
00:08:42,219 --> 00:08:47,490
not invested to pay off the technical

169
00:08:45,100 --> 00:08:51,550
debt and to ensuring that they have

170
00:08:47,490 --> 00:08:53,940
followed the best practices and so they

171
00:08:51,550 --> 00:08:56,490
they can be called anti-patterns

172
00:08:53,940 --> 00:09:03,060
also code smells like your fish has gone

173
00:08:56,490 --> 00:09:05,370
bad your code smells so so it's not a

174
00:09:03,060 --> 00:09:07,199
matter of if your application is going

175
00:09:05,370 --> 00:09:10,890
to be attacked it's really a matter of

176
00:09:07,200 --> 00:09:13,260
when these days whether you are just

177
00:09:10,890 --> 00:09:15,510
getting you know a drive-by from

178
00:09:13,260 --> 00:09:16,920
somebody who sees your application out

179
00:09:15,510 --> 00:09:20,670
on the web and they decide to try and

180
00:09:16,920 --> 00:09:26,819
pop it or you're a victim of a targeted

181
00:09:20,670 --> 00:09:28,760
attack it really is if the case where if

182
00:09:26,820 --> 00:09:30,780
you have a service out on the internet

183
00:09:28,760 --> 00:09:33,510
somebody is going to see it and

184
00:09:30,780 --> 00:09:37,319
somebody's going to attempt to pop it

185
00:09:33,510 --> 00:09:40,230
either through the programmatic methods

186
00:09:37,320 --> 00:09:42,320
using like metasploit nessus or

187
00:09:40,230 --> 00:09:44,370
something along those lines or if they

188
00:09:42,320 --> 00:09:47,490
perceive that you have something high

189
00:09:44,370 --> 00:09:51,360
value and then really investing the time

190
00:09:47,490 --> 00:09:53,760
to go after it some of the trends and

191
00:09:51,360 --> 00:09:55,860
that space is the transition from

192
00:09:53,760 --> 00:09:58,020
attacking credit card companies or

193
00:09:55,860 --> 00:10:02,250
companies who hold credit card data to

194
00:09:58,020 --> 00:10:04,530
the health care industry because the

195
00:10:02,250 --> 00:10:07,020
healthcare records are much more rich

196
00:10:04,530 --> 00:10:09,120
and the information about the individual

197
00:10:07,020 --> 00:10:13,740
that they have and so instead of just

198
00:10:09,120 --> 00:10:17,910
having a crack hard entry they can do

199
00:10:13,740 --> 00:10:20,880
loan applications and a variety of other

200
00:10:17,910 --> 00:10:22,740
financial instruments that based on that

201
00:10:20,880 --> 00:10:26,130
data that you wouldn't otherwise be able

202
00:10:22,740 --> 00:10:30,810
to do just from getting the credit card

203
00:10:26,130 --> 00:10:32,850
information so security by design you

204
00:10:30,810 --> 00:10:35,760
want to make sure that the way you're

205
00:10:32,850 --> 00:10:39,900
designing your system is not just

206
00:10:35,760 --> 00:10:41,610
accidentally preventing an attacker from

207
00:10:39,900 --> 00:10:43,500
being able to get into your system but

208
00:10:41,610 --> 00:10:46,380
that you are intentionally designing

209
00:10:43,500 --> 00:10:50,580
your system securely in a manner that

210
00:10:46,380 --> 00:10:54,810
will not only address the the current

211
00:10:50,580 --> 00:10:58,770
known attacks that you have identified

212
00:10:54,810 --> 00:11:01,319
but allow you to address future ones and

213
00:10:58,770 --> 00:11:03,089
be flexible enough that you can do that

214
00:11:01,320 --> 00:11:07,470
without incurring a significant amount

215
00:11:03,089 --> 00:11:10,590
of resources being spent to

216
00:11:07,470 --> 00:11:13,080
that so when when you're selecting your

217
00:11:10,590 --> 00:11:16,170
the way you're going to architect your

218
00:11:13,080 --> 00:11:17,580
system now looking at what whether you

219
00:11:16,170 --> 00:11:20,160
want to use an open-source operating

220
00:11:17,580 --> 00:11:21,300
system versus a close source operating

221
00:11:20,160 --> 00:11:27,120
system whether you want to use something

222
00:11:21,300 --> 00:11:29,189
like Amazon's lambda processing stream

223
00:11:27,120 --> 00:11:31,650
processing and so of having to host your

224
00:11:29,190 --> 00:11:35,240
own operating systems to to run your

225
00:11:31,650 --> 00:11:39,270
code those are considerations to take

226
00:11:35,240 --> 00:11:43,550
into account one of the things that we

227
00:11:39,270 --> 00:11:48,360
see as well during our code analysis is

228
00:11:43,550 --> 00:11:50,849
that not the the considerations and the

229
00:11:48,360 --> 00:11:54,180
libraries that are used and imported

230
00:11:50,850 --> 00:11:57,750
whether they're a third party or built

231
00:11:54,180 --> 00:11:59,130
in-house or open source they're making

232
00:11:57,750 --> 00:12:01,200
sure that you're going to be able to

233
00:11:59,130 --> 00:12:04,860
rely on those libraries now and in the

234
00:12:01,200 --> 00:12:07,550
future to be supported as important and

235
00:12:04,860 --> 00:12:11,100
what making the decision as to whether

236
00:12:07,550 --> 00:12:14,270
for your use case is it appropriate to

237
00:12:11,100 --> 00:12:18,270
use an open source library or is it the

238
00:12:14,270 --> 00:12:21,300
the better choice to use to redevelop it

239
00:12:18,270 --> 00:12:23,610
in-house so that you can ensure the

240
00:12:21,300 --> 00:12:27,420
appropriate maintenance of that library

241
00:12:23,610 --> 00:12:30,120
and you know within the development

242
00:12:27,420 --> 00:12:31,680
world as I mentioned it's not always a

243
00:12:30,120 --> 00:12:34,260
code that's being attacked a lot of

244
00:12:31,680 --> 00:12:36,030
times it can be other components from

245
00:12:34,260 --> 00:12:38,340
social engineering to your network and

246
00:12:36,030 --> 00:12:42,240
so your code may be secure but if your

247
00:12:38,340 --> 00:12:44,400
network is not then all the sanitization

248
00:12:42,240 --> 00:12:45,600
and error checking is not going to

249
00:12:44,400 --> 00:12:49,439
prevent your system from being

250
00:12:45,600 --> 00:12:51,150
compromised so it's we found that it's

251
00:12:49,440 --> 00:12:54,270
been beneficial for developers to have

252
00:12:51,150 --> 00:12:55,620
some basic understandings of the

253
00:12:54,270 --> 00:12:58,890
operating system and the networks and

254
00:12:55,620 --> 00:13:03,000
things like that so that they can be a

255
00:12:58,890 --> 00:13:05,240
more that contribute more to the team at

256
00:13:03,000 --> 00:13:07,370
during the design decisions and

257
00:13:05,240 --> 00:13:10,080
troubleshoot their own problems and

258
00:13:07,370 --> 00:13:13,890
understand how their application is

259
00:13:10,080 --> 00:13:17,280
actually being built and and deployed

260
00:13:13,890 --> 00:13:19,980
without being kind of constrained to

261
00:13:17,280 --> 00:13:20,449
their IDE where they're siloed off and

262
00:13:19,980 --> 00:13:24,470
just

263
00:13:20,450 --> 00:13:27,860
code it's been it's better in our

264
00:13:24,470 --> 00:13:30,020
opinion that they have a more

265
00:13:27,860 --> 00:13:35,990
well-rounded knowledge of of how the

266
00:13:30,020 --> 00:13:39,670
system is put together mm-hmm so excuse

267
00:13:35,990 --> 00:13:43,210
me so Carney Carnegie Mellon's

268
00:13:39,670 --> 00:13:45,920
capability maturity model integration

269
00:13:43,210 --> 00:13:48,650
defines a series of security regions

270
00:13:45,920 --> 00:13:51,229
where you can make these decisions so

271
00:13:48,650 --> 00:13:53,840
from the security process area to the

272
00:13:51,230 --> 00:13:56,360
development process the products and

273
00:13:53,840 --> 00:14:01,070
solutions in process assets this

274
00:13:56,360 --> 00:14:02,450
workflow helps to ensure that you're at

275
00:14:01,070 --> 00:14:06,260
each stage of your decision making

276
00:14:02,450 --> 00:14:11,270
process that you are preparing yourself

277
00:14:06,260 --> 00:14:13,960
for a secure solution so the and this

278
00:14:11,270 --> 00:14:18,520
also ensures that you're able to

279
00:14:13,960 --> 00:14:23,060
continue to follow the the various

280
00:14:18,520 --> 00:14:26,060
regulatory bodies guidelines so

281
00:14:23,060 --> 00:14:31,849
everything from the sarbanes-oxley Act

282
00:14:26,060 --> 00:14:37,280
to the PCI DSS for your credit cards to

283
00:14:31,850 --> 00:14:40,630
HIPAA designing your system to to have

284
00:14:37,280 --> 00:14:45,620
these decision-making gates in place

285
00:14:40,630 --> 00:14:51,800
allows your team to continue to develop

286
00:14:45,620 --> 00:14:54,860
securely so here's the workflow from

287
00:14:51,800 --> 00:14:57,530
Carnegie Mellon and so it from the top

288
00:14:54,860 --> 00:14:59,660
down you can see you're you're looking

289
00:14:57,530 --> 00:15:02,750
at your organizational preparedness for

290
00:14:59,660 --> 00:15:05,990
your software development so how well is

291
00:15:02,750 --> 00:15:08,720
your current Network and up

292
00:15:05,990 --> 00:15:12,500
infrastructure designed do you have your

293
00:15:08,720 --> 00:15:14,300
your virtual private cloud implemented

294
00:15:12,500 --> 00:15:17,150
and in such a manner that you can

295
00:15:14,300 --> 00:15:19,479
segment off from your publicly facing to

296
00:15:17,150 --> 00:15:23,360
your development environment to your

297
00:15:19,480 --> 00:15:25,970
staging in QA your security management

298
00:15:23,360 --> 00:15:27,880
and project so are you investing the

299
00:15:25,970 --> 00:15:32,720
appropriate amount of resources and

300
00:15:27,880 --> 00:15:34,080
designing and testing your systems your

301
00:15:32,720 --> 00:15:37,410
requirements and

302
00:15:34,080 --> 00:15:40,740
technical solutions ensuring that your

303
00:15:37,410 --> 00:15:44,219
system is there your design processes

304
00:15:40,740 --> 00:15:47,070
including security as a component one of

305
00:15:44,220 --> 00:15:50,490
the major downfalls we see is security

306
00:15:47,070 --> 00:15:52,590
being not a value add to a system

307
00:15:50,490 --> 00:15:55,680
security can often be dropped as

308
00:15:52,590 --> 00:15:58,470
unnecessary in favor of focusing on

309
00:15:55,680 --> 00:16:01,290
features and if your management team is

310
00:15:58,470 --> 00:16:04,100
not buying into security and they say

311
00:16:01,290 --> 00:16:07,230
you know give me two features instead of

312
00:16:04,100 --> 00:16:10,410
implementing security appropriately that

313
00:16:07,230 --> 00:16:13,140
can be a problem I'm not going to focus

314
00:16:10,410 --> 00:16:15,780
too much more on this but this is you

315
00:16:13,140 --> 00:16:19,380
know an example of how organizationally

316
00:16:15,780 --> 00:16:24,240
it's important to establish security as

317
00:16:19,380 --> 00:16:26,220
a an integral part of the way your

318
00:16:24,240 --> 00:16:28,830
development team and your network team

319
00:16:26,220 --> 00:16:33,120
and your operations team plan to

320
00:16:28,830 --> 00:16:36,030
implement security within your platform

321
00:16:33,120 --> 00:16:41,280
and in the future as you deploy it to

322
00:16:36,030 --> 00:16:43,410
your clients so some of the other

323
00:16:41,280 --> 00:16:46,350
criteria that you need to look at is how

324
00:16:43,410 --> 00:16:49,050
are you managing your source now to do

325
00:16:46,350 --> 00:16:51,050
all your developers have you know read

326
00:16:49,050 --> 00:16:54,530
right to your repositories do you have

327
00:16:51,050 --> 00:16:58,079
appropriate segmentation within your

328
00:16:54,530 --> 00:17:00,150
projects the risk being you have a

329
00:16:58,080 --> 00:17:02,250
developer leave your organization they

330
00:17:00,150 --> 00:17:07,139
had read to all of your repositories now

331
00:17:02,250 --> 00:17:10,440
perhaps you're your information and your

332
00:17:07,140 --> 00:17:12,870
code is out in the wild what deployment

333
00:17:10,440 --> 00:17:16,500
tools are using so how are you getting

334
00:17:12,869 --> 00:17:20,329
your code from github bitbucket or svn

335
00:17:16,500 --> 00:17:22,589
and out and onto your servers are you

336
00:17:20,329 --> 00:17:24,599
storing keys out in your servers that

337
00:17:22,589 --> 00:17:27,540
might be compromised to later access

338
00:17:24,599 --> 00:17:31,139
your code those types of design

339
00:17:27,540 --> 00:17:33,600
decisions have to be made at a higher

340
00:17:31,140 --> 00:17:35,580
level than just within your code base

341
00:17:33,600 --> 00:17:38,219
you have to choose the tools that allow

342
00:17:35,580 --> 00:17:40,320
you to do that type of process you have

343
00:17:38,220 --> 00:17:41,550
to make sure that those tools integrate

344
00:17:40,320 --> 00:17:46,399
with the environment that you're

345
00:17:41,550 --> 00:17:48,060
planning to deploy on to your continuous

346
00:17:46,400 --> 00:17:51,600
integration

347
00:17:48,060 --> 00:17:53,940
is also important being able to identify

348
00:17:51,600 --> 00:17:58,320
bugs within your system and quickly

349
00:17:53,940 --> 00:18:02,070
address them and push patches is highly

350
00:17:58,320 --> 00:18:04,139
important if you remember the heartbleed

351
00:18:02,070 --> 00:18:07,290
or shell shock bugs that we've seen in

352
00:18:04,140 --> 00:18:12,180
the past being able to identify that

353
00:18:07,290 --> 00:18:15,899
you're vulnerable to to that to that

354
00:18:12,180 --> 00:18:19,580
library and then quickly mitigate and

355
00:18:15,900 --> 00:18:23,520
then patch as the those become available

356
00:18:19,580 --> 00:18:26,610
was an important step for many companies

357
00:18:23,520 --> 00:18:30,300
who are vulnerable vulnerable to that to

358
00:18:26,610 --> 00:18:32,909
not being compromised and because you

359
00:18:30,300 --> 00:18:34,710
know it's very easily easy to identify

360
00:18:32,910 --> 00:18:38,700
somebody's running Apache the running

361
00:18:34,710 --> 00:18:41,940
Apache on a linux server and therefore

362
00:18:38,700 --> 00:18:46,320
they're vulnerable to to this and an

363
00:18:41,940 --> 00:18:49,170
attacker try to pop them your unit tests

364
00:18:46,320 --> 00:18:51,090
and code coverage that's another thing

365
00:18:49,170 --> 00:18:54,780
that can often be dropped by the wayside

366
00:18:51,090 --> 00:18:57,780
during your application development the

367
00:18:54,780 --> 00:18:59,850
with the reasoning being management once

368
00:18:57,780 --> 00:19:03,060
more features management management will

369
00:18:59,850 --> 00:19:05,909
want you know the next revision to be

370
00:19:03,060 --> 00:19:08,490
released and the things like code

371
00:19:05,910 --> 00:19:11,930
coverage or unit testing are often seen

372
00:19:08,490 --> 00:19:16,550
as extraneous and if you don't enforce

373
00:19:11,930 --> 00:19:21,240
strong compliance to your your company's

374
00:19:16,550 --> 00:19:24,210
security policies and processes then

375
00:19:21,240 --> 00:19:26,060
those can be neglected and then you have

376
00:19:24,210 --> 00:19:28,740
a greater and greater technical debt

377
00:19:26,060 --> 00:19:35,370
that you'll eventually have to either

378
00:19:28,740 --> 00:19:38,040
address or pay off in some manner when

379
00:19:35,370 --> 00:19:42,090
when you get to it penetration testing

380
00:19:38,040 --> 00:19:45,360
and and the static code analysis is

381
00:19:42,090 --> 00:19:48,300
another component getting third party

382
00:19:45,360 --> 00:19:51,469
eyes on your code out from outside

383
00:19:48,300 --> 00:19:56,100
developers as a really useful thing to

384
00:19:51,470 --> 00:19:58,920
finding and identifying the ways in

385
00:19:56,100 --> 00:20:00,580
which your your code is potentially

386
00:19:58,920 --> 00:20:03,760
vulnerable

387
00:20:00,580 --> 00:20:06,100
you know never trust your users you know

388
00:20:03,760 --> 00:20:09,399
whether it's a cat walking across your

389
00:20:06,100 --> 00:20:12,699
keyboard or somebody maliciously trying

390
00:20:09,399 --> 00:20:16,029
to attack your system that can often

391
00:20:12,700 --> 00:20:18,250
take somebody from he wasn't deep in the

392
00:20:16,029 --> 00:20:21,549
design to identify the way that your

393
00:20:18,250 --> 00:20:24,580
system might be broken network

394
00:20:21,549 --> 00:20:26,408
segmentation you know is also a key

395
00:20:24,580 --> 00:20:30,309
component you don't your developers

396
00:20:26,409 --> 00:20:33,190
working in production that always ends

397
00:20:30,309 --> 00:20:35,620
in tears and so you know as much as your

398
00:20:33,190 --> 00:20:37,120
developers might want to be able to say

399
00:20:35,620 --> 00:20:38,799
well there's just a problem out in

400
00:20:37,120 --> 00:20:43,830
production I'll do a quick you know

401
00:20:38,799 --> 00:20:47,139
bugfix following your appropriate code

402
00:20:43,830 --> 00:20:50,519
deployment procedures will ensure that

403
00:20:47,139 --> 00:20:53,979
your production environment doesn't

404
00:20:50,519 --> 00:20:56,409
stray out of alignment with the

405
00:20:53,980 --> 00:20:59,260
appropriate configuration that you've

406
00:20:56,409 --> 00:21:02,230
established for that environment and

407
00:20:59,260 --> 00:21:04,299
then having your your staging and

408
00:21:02,230 --> 00:21:07,120
quality assurance environments also

409
00:21:04,299 --> 00:21:10,059
segmented so that your development data

410
00:21:07,120 --> 00:21:12,699
and staging data you know testing data

411
00:21:10,059 --> 00:21:15,250
doesn't get pushed into production and

412
00:21:12,700 --> 00:21:17,350
that those systems aren't a vector of

413
00:21:15,250 --> 00:21:18,639
attack against your client and

414
00:21:17,350 --> 00:21:21,490
production data you don't want somebody

415
00:21:18,639 --> 00:21:23,889
coming into a potentially insecure

416
00:21:21,490 --> 00:21:27,130
development box and being able to use

417
00:21:23,889 --> 00:21:34,479
that as a jump host into your production

418
00:21:27,130 --> 00:21:36,610
environment so employee training is the

419
00:21:34,480 --> 00:21:39,039
in my mind almost as important as

420
00:21:36,610 --> 00:21:42,010
development training your you know

421
00:21:39,039 --> 00:21:46,629
secretary or HR resource that has access

422
00:21:42,010 --> 00:21:51,700
to everybody's records especially the

423
00:21:46,630 --> 00:21:54,039
financial sweet we've seen CFOs and vice

424
00:21:51,700 --> 00:21:57,279
presidents of finance be targeted for

425
00:21:54,039 --> 00:22:01,480
wire fraud transfers fairly frequently

426
00:21:57,279 --> 00:22:04,029
and that's because executives are you

427
00:22:01,480 --> 00:22:05,919
know a target-rich environment from an

428
00:22:04,029 --> 00:22:08,889
attackers perspective it takes a

429
00:22:05,919 --> 00:22:11,830
relatively low level of effort to attack

430
00:22:08,889 --> 00:22:13,539
them because it typically it's a spear

431
00:22:11,830 --> 00:22:14,409
phishing campaign where they I didn't

432
00:22:13,539 --> 00:22:18,730
fight the bank

433
00:22:14,410 --> 00:22:24,310
that a company may use they create a

434
00:22:18,730 --> 00:22:27,040
fraudulent email to address a CFO or SVP

435
00:22:24,310 --> 00:22:29,860
of finance they say you know wire

436
00:22:27,040 --> 00:22:33,159
transfer me you know $20,000 it's a

437
00:22:29,860 --> 00:22:35,500
Tuesday thus the executive expecting a

438
00:22:33,160 --> 00:22:36,970
series of wire transfer requests they

439
00:22:35,500 --> 00:22:39,880
click the button and the money's gone

440
00:22:36,970 --> 00:22:43,480
and this is because the executives don't

441
00:22:39,880 --> 00:22:47,080
have typically have the same expertise

442
00:22:43,480 --> 00:22:49,300
with security as other members of the

443
00:22:47,080 --> 00:22:51,399
company and they're also more prone to

444
00:22:49,300 --> 00:22:53,830
break the rules because they are

445
00:22:51,400 --> 00:22:57,850
executives and they have fewer people to

446
00:22:53,830 --> 00:23:01,510
report to so they're particularly prone

447
00:22:57,850 --> 00:23:04,419
to to that type of attack password

448
00:23:01,510 --> 00:23:05,860
management policies you know nobody

449
00:23:04,420 --> 00:23:08,290
likes changing their password nobody

450
00:23:05,860 --> 00:23:12,520
likes having to remember highly complex

451
00:23:08,290 --> 00:23:14,830
passwords but their tools these days

452
00:23:12,520 --> 00:23:20,040
that can make that much easier things

453
00:23:14,830 --> 00:23:22,060
like LastPass or keepass allow you to

454
00:23:20,040 --> 00:23:25,240
programmatically change your passwords

455
00:23:22,060 --> 00:23:30,159
generate highly complex and excuse me

456
00:23:25,240 --> 00:23:33,130
secure passwords as well as being able

457
00:23:30,160 --> 00:23:35,530
to access them remotely so you're not

458
00:23:33,130 --> 00:23:38,020
having to keep a password database with

459
00:23:35,530 --> 00:23:43,139
you and then applying those policies

460
00:23:38,020 --> 00:23:45,610
from a corporate level is one way to

461
00:23:43,140 --> 00:23:47,500
ensure that you know you're not having

462
00:23:45,610 --> 00:23:49,689
people you know have a post-it note with

463
00:23:47,500 --> 00:23:52,870
their master password right on their

464
00:23:49,690 --> 00:23:55,810
their laptop other things like ubi keys

465
00:23:52,870 --> 00:23:58,179
to add a salt to your password so you

466
00:23:55,810 --> 00:24:01,360
might have a relatively simple password

467
00:23:58,180 --> 00:24:03,910
like you know baseball horses but then

468
00:24:01,360 --> 00:24:06,490
you're Vicki allows you to inject a

469
00:24:03,910 --> 00:24:09,580
complex series of additional characters

470
00:24:06,490 --> 00:24:14,320
to that password each time you need to

471
00:24:09,580 --> 00:24:16,949
enter it can allow you to heighten your

472
00:24:14,320 --> 00:24:19,750
password complexity without having to

473
00:24:16,950 --> 00:24:24,220
increase the difficulty remembering it

474
00:24:19,750 --> 00:24:25,940
now the social engineering awareness one

475
00:24:24,220 --> 00:24:30,169
of the things that we do

476
00:24:25,940 --> 00:24:34,360
is physical testing this is where we go

477
00:24:30,169 --> 00:24:38,539
on site and we see how far into a

478
00:24:34,360 --> 00:24:40,490
corporate environment can we get before

479
00:24:38,539 --> 00:24:43,129
somebody stops us and what can we do

480
00:24:40,490 --> 00:24:45,860
there so you know it's usually just a

481
00:24:43,129 --> 00:24:49,939
polo in a clipboard and we you know it

482
00:24:45,860 --> 00:24:52,189
I'm Michael from your IT servicing

483
00:24:49,940 --> 00:24:56,120
company I need to go check your network

484
00:24:52,190 --> 00:24:58,190
closet and many times they will let us

485
00:24:56,120 --> 00:25:01,250
right in without having any kind of

486
00:24:58,190 --> 00:25:03,529
scheduled appointment and then it's a

487
00:25:01,250 --> 00:25:06,799
well I'm in your network closet and it

488
00:25:03,529 --> 00:25:10,759
looks like i need a password to reset

489
00:25:06,799 --> 00:25:12,049
your your email access okay well I've

490
00:25:10,759 --> 00:25:15,950
already let you in the door you already

491
00:25:12,049 --> 00:25:17,779
in the network closet go for it and so

492
00:25:15,950 --> 00:25:19,820
having your employees have the

493
00:25:17,779 --> 00:25:21,889
appropriate amount of training is really

494
00:25:19,820 --> 00:25:23,269
important because like I said it doesn't

495
00:25:21,889 --> 00:25:24,979
matter if you deployed your code

496
00:25:23,269 --> 00:25:26,600
securely it doesn't matter if you wrote

497
00:25:24,980 --> 00:25:28,669
your code securely if you have an

498
00:25:26,600 --> 00:25:31,789
attacker physically present and your

499
00:25:28,669 --> 00:25:33,950
network closet it's essentially game

500
00:25:31,789 --> 00:25:36,830
over at that point that can install pony

501
00:25:33,950 --> 00:25:40,240
boxes they can install network sniffers

502
00:25:36,830 --> 00:25:42,830
they can hard reset your firewalls that

503
00:25:40,240 --> 00:25:44,450
the number of vectors of attack that

504
00:25:42,830 --> 00:25:45,860
they have once they have a physical

505
00:25:44,450 --> 00:25:49,519
presence in your environment is

506
00:25:45,860 --> 00:25:51,139
essentially unlimited and so that that

507
00:25:49,519 --> 00:25:54,980
first person at the door whether it's a

508
00:25:51,139 --> 00:25:58,729
secretary or you know the whoever's

509
00:25:54,980 --> 00:26:01,759
controlling entry is just as important

510
00:25:58,730 --> 00:26:05,750
as your application developer network

511
00:26:01,759 --> 00:26:09,580
architect and that kind of transitions

512
00:26:05,750 --> 00:26:11,649
to the bring your own your own device

513
00:26:09,580 --> 00:26:13,850
situation where people are bringing in

514
00:26:11,649 --> 00:26:17,600
their own cell phones bringing in their

515
00:26:13,850 --> 00:26:20,120
own laptops to work well as I'm sure

516
00:26:17,600 --> 00:26:22,549
you've seen cell phones are a great

517
00:26:20,120 --> 00:26:25,279
vector to get at personally identifiable

518
00:26:22,549 --> 00:26:28,850
information and passwords you install

519
00:26:25,279 --> 00:26:32,090
candy crush saga two point oh and they

520
00:26:28,850 --> 00:26:35,869
decide to release at into malware there

521
00:26:32,090 --> 00:26:38,699
have been now libraries allowing you to

522
00:26:35,869 --> 00:26:41,790
root a phone but through

523
00:26:38,700 --> 00:26:43,800
updates and so now candy crush has

524
00:26:41,790 --> 00:26:45,899
rooted your phone and it's listening to

525
00:26:43,800 --> 00:26:50,159
the passwords that your phone sending to

526
00:26:45,900 --> 00:26:51,570
gmail or whatever other services that

527
00:26:50,160 --> 00:26:55,260
you're connected to on the corporate

528
00:26:51,570 --> 00:27:00,929
network and that's a you yet another

529
00:26:55,260 --> 00:27:02,879
vector of attack and if you're using

530
00:27:00,930 --> 00:27:05,010
your corporate laptop for example in

531
00:27:02,880 --> 00:27:08,820
your home network if your home networks

532
00:27:05,010 --> 00:27:11,720
and secure that that can also be away

533
00:27:08,820 --> 00:27:15,240
attackers can target you so if you're

534
00:27:11,720 --> 00:27:19,860
bringing your corporate laptop logging

535
00:27:15,240 --> 00:27:22,380
into your corporate email and your you

536
00:27:19,860 --> 00:27:25,439
know your public your advertising your

537
00:27:22,380 --> 00:27:28,830
your home Wi-Fi with default passwords

538
00:27:25,440 --> 00:27:32,310
and default SSIDs it's relatively easy

539
00:27:28,830 --> 00:27:36,120
to attack you from from that vector so

540
00:27:32,310 --> 00:27:38,639
some relatively easy training from an

541
00:27:36,120 --> 00:27:43,919
employee standpoint can go a long way

542
00:27:38,640 --> 00:27:48,660
into protecting your your pii and PII

543
00:27:43,920 --> 00:27:56,030
data so any questions thus far about

544
00:27:48,660 --> 00:27:59,040
anything that I've covered no alright so

545
00:27:56,030 --> 00:28:06,389
solid principles so salt design

546
00:27:59,040 --> 00:28:12,840
principles are object oriented ideas

547
00:28:06,390 --> 00:28:15,540
that we have found it's important to to

548
00:28:12,840 --> 00:28:17,909
include when you're writing your code as

549
00:28:15,540 --> 00:28:20,340
well as when you're designing it and so

550
00:28:17,910 --> 00:28:24,240
just briefly single responsibility

551
00:28:20,340 --> 00:28:27,449
principle the open/close principle of

552
00:28:24,240 --> 00:28:29,670
liskov substitution an interface

553
00:28:27,450 --> 00:28:32,400
segregation and dependency inversion and

554
00:28:29,670 --> 00:28:34,800
so the the reason these are importance

555
00:28:32,400 --> 00:28:37,230
of security and not just design is it

556
00:28:34,800 --> 00:28:38,909
allows you to ensure that when you're

557
00:28:37,230 --> 00:28:41,010
developing in an object oriented

558
00:28:38,910 --> 00:28:42,990
environment that if you follow these

559
00:28:41,010 --> 00:28:45,390
principles that you're not exposing

560
00:28:42,990 --> 00:28:47,700
yourself and advertently two vectors of

561
00:28:45,390 --> 00:28:50,880
attack and each of these principles

562
00:28:47,700 --> 00:28:52,150
helps to encourage you to develop

563
00:28:50,880 --> 00:28:55,770
securely weather

564
00:28:52,150 --> 00:28:59,020
they're it's intentionally secure or not

565
00:28:55,770 --> 00:29:02,500
it makes your code more modular it

566
00:28:59,020 --> 00:29:05,139
allows you to have a lower technical

567
00:29:02,500 --> 00:29:10,510
debt when you're extending your code it

568
00:29:05,140 --> 00:29:14,410
also allows you to extend and your

569
00:29:10,510 --> 00:29:16,150
development process more quickly like I

570
00:29:14,410 --> 00:29:18,430
mentioned having some network

571
00:29:16,150 --> 00:29:21,100
fundamentals within your development

572
00:29:18,430 --> 00:29:23,650
team so that as you're developing if a

573
00:29:21,100 --> 00:29:27,399
service is unavailable your developers

574
00:29:23,650 --> 00:29:29,740
not at the not beholden to the network

575
00:29:27,400 --> 00:29:32,230
team to tell you well that servers down

576
00:29:29,740 --> 00:29:35,110
you know having some you know basic

577
00:29:32,230 --> 00:29:37,540
understanding of how to get to how to

578
00:29:35,110 --> 00:29:39,449
identify what ports as an external

579
00:29:37,540 --> 00:29:47,290
servers listening to how to identify

580
00:29:39,450 --> 00:29:48,460
whether you're your SSL keys are valid

581
00:29:47,290 --> 00:29:50,260
or not for the service that you're

582
00:29:48,460 --> 00:29:55,480
trying to get to and things like that

583
00:29:50,260 --> 00:29:57,670
can limit the the downtime of developer

584
00:29:55,480 --> 00:30:00,280
as they're working because they can be

585
00:29:57,670 --> 00:30:04,570
their own helpdesk rather than relying

586
00:30:00,280 --> 00:30:07,090
on an external team and then following

587
00:30:04,570 --> 00:30:10,480
the the least privileged model so if we

588
00:30:07,090 --> 00:30:13,510
go back to the heartbleed attack if

589
00:30:10,480 --> 00:30:16,510
you're if you're patchy servers running

590
00:30:13,510 --> 00:30:18,610
as root or shell shock rather if your

591
00:30:16,510 --> 00:30:21,610
Apache servers running his route if you

592
00:30:18,610 --> 00:30:23,800
pop Apache all of a sudden you have root

593
00:30:21,610 --> 00:30:26,340
on that box rather than if you were

594
00:30:23,800 --> 00:30:32,830
running us a limited service account

595
00:30:26,340 --> 00:30:36,449
then you're exposed much less than then

596
00:30:32,830 --> 00:30:39,790
you might otherwise be then you know

597
00:30:36,450 --> 00:30:41,610
there are many other different design

598
00:30:39,790 --> 00:30:45,940
principles you know everything from

599
00:30:41,610 --> 00:30:47,770
continuing education to stress testing

600
00:30:45,940 --> 00:30:49,930
and load balancing one of the

601
00:30:47,770 --> 00:30:51,760
interesting things that we've seen as

602
00:30:49,930 --> 00:30:56,140
cloud deployments have become more

603
00:30:51,760 --> 00:30:57,970
popular is stress testing system to the

604
00:30:56,140 --> 00:31:02,230
point where it starts to fail over or

605
00:30:57,970 --> 00:31:05,140
add resources can change the topology

606
00:31:02,230 --> 00:31:06,040
and attack surface of a system and so if

607
00:31:05,140 --> 00:31:10,600
you can force it to

608
00:31:06,040 --> 00:31:13,690
failover to its to its non-standard

609
00:31:10,600 --> 00:31:16,750
state you can expose systems that are

610
00:31:13,690 --> 00:31:23,590
more vulnerable than the one that you

611
00:31:16,750 --> 00:31:27,790
were attacking initially so the single

612
00:31:23,590 --> 00:31:31,240
responsibility principle classes should

613
00:31:27,790 --> 00:31:33,760
have only one reason to change now this

614
00:31:31,240 --> 00:31:38,910
is important because a class should have

615
00:31:33,760 --> 00:31:42,850
only a business principle behind it for

616
00:31:38,910 --> 00:31:48,280
fords change it shouldn't be changing at

617
00:31:42,850 --> 00:31:52,510
the behest of anything outside of that

618
00:31:48,280 --> 00:31:57,730
single principle so a great example is

619
00:31:52,510 --> 00:31:59,470
the engineer car so to to most of us

620
00:31:57,730 --> 00:32:01,990
when we turn on our car we don't care

621
00:31:59,470 --> 00:32:04,150
whether it's a v8 or it's an electric

622
00:32:01,990 --> 00:32:06,130
engine or whatever we just scared that

623
00:32:04,150 --> 00:32:08,110
it's powering our wheels but to a

624
00:32:06,130 --> 00:32:09,970
mechanic who's trying to service your

625
00:32:08,110 --> 00:32:12,790
engine it's going to be greatly

626
00:32:09,970 --> 00:32:16,750
important as to whether it's a Nissan v6

627
00:32:12,790 --> 00:32:20,250
or a Toyota v8 and what the individual

628
00:32:16,750 --> 00:32:25,360
components are and so understanding that

629
00:32:20,250 --> 00:32:27,850
the only reason that you're from the

630
00:32:25,360 --> 00:32:33,669
users perspective that that engine

631
00:32:27,850 --> 00:32:35,409
should change is for four-year

632
00:32:33,670 --> 00:32:37,420
perspective so the mechanic has a

633
00:32:35,410 --> 00:32:41,320
different use case than than the end

634
00:32:37,420 --> 00:32:43,810
user and so you know why not have just a

635
00:32:41,320 --> 00:32:46,780
single purpose for your objects would be

636
00:32:43,810 --> 00:32:48,850
you would end up with not a one-to-one

637
00:32:46,780 --> 00:32:53,399
relationship between objects and methods

638
00:32:48,850 --> 00:32:56,520
and that would be not an ideal situation

639
00:32:53,400 --> 00:33:01,750
because of you know code overhead and

640
00:32:56,520 --> 00:33:04,690
design cumbersome pneus so the

641
00:33:01,750 --> 00:33:07,930
open/close principle so objects should

642
00:33:04,690 --> 00:33:11,770
be open for extension but closed for

643
00:33:07,930 --> 00:33:14,950
modification and so if I like the shape

644
00:33:11,770 --> 00:33:17,889
example here so if i had a shape object

645
00:33:14,950 --> 00:33:19,929
and i needed to calculate the area of a

646
00:33:17,890 --> 00:33:23,769
shape it would be better for me too

647
00:33:19,929 --> 00:33:26,440
within the shape a method to return the

648
00:33:23,769 --> 00:33:29,700
area and so me inferring that those

649
00:33:26,440 --> 00:33:33,309
shapes of square so then I will get the

650
00:33:29,700 --> 00:33:35,499
area by multiplying the shape side by

651
00:33:33,309 --> 00:33:38,860
the shape side and this area is a circle

652
00:33:35,499 --> 00:33:41,350
and i'll multiply it by pi times the

653
00:33:38,860 --> 00:33:44,678
radius squared it would be it this

654
00:33:41,350 --> 00:33:49,649
allows you to extend that class much

655
00:33:44,679 --> 00:33:54,210
more easily than you might otherwise do

656
00:33:49,649 --> 00:33:57,100
let's go of substitution principle so

657
00:33:54,210 --> 00:33:58,600
return to the shape example you know all

658
00:33:57,100 --> 00:34:02,289
squares or rectangles but not all

659
00:33:58,600 --> 00:34:04,658
rectangles or squares so if you had a

660
00:34:02,289 --> 00:34:06,429
the rectangle be the parent of the

661
00:34:04,659 --> 00:34:09,220
square object you can run into issues

662
00:34:06,429 --> 00:34:11,470
when you're trying to set the side of a

663
00:34:09,219 --> 00:34:15,219
square object and you're having to

664
00:34:11,469 --> 00:34:17,589
overwrite to overwrite your methods to

665
00:34:15,219 --> 00:34:20,049
ensure that for the square object both

666
00:34:17,589 --> 00:34:23,020
sides are being set rather than setting

667
00:34:20,050 --> 00:34:25,510
the you know say width and height

668
00:34:23,020 --> 00:34:27,668
individually and so if you do that

669
00:34:25,510 --> 00:34:29,530
you'll violate the this particular

670
00:34:27,668 --> 00:34:32,230
principle and so it's better to

671
00:34:29,530 --> 00:34:36,179
implement the generalized shaped object

672
00:34:32,230 --> 00:34:41,109
with its own area method rather than

673
00:34:36,179 --> 00:34:47,309
using the that inheritance for the

674
00:34:41,109 --> 00:34:49,929
rectangle and so interface segregation

675
00:34:47,309 --> 00:34:51,970
client should not be forced to create

676
00:34:49,929 --> 00:34:54,730
methods that they don't use we see this

677
00:34:51,969 --> 00:34:57,098
in a lot of our front-end development

678
00:34:54,730 --> 00:35:00,819
where if you're trying to use a login

679
00:34:57,099 --> 00:35:02,799
method sometimes certain frameworks will

680
00:35:00,819 --> 00:35:05,890
make you follow a series of steps that

681
00:35:02,799 --> 00:35:10,869
aren't necessary to say just the display

682
00:35:05,890 --> 00:35:15,220
a web portal rather than allowing you to

683
00:35:10,869 --> 00:35:19,089
segment a login page to a table of

684
00:35:15,220 --> 00:35:21,939
contents etc so you shouldn't force an

685
00:35:19,089 --> 00:35:24,400
object to implement methods that aren't

686
00:35:21,940 --> 00:35:26,380
necessary and you know the shape book

687
00:35:24,400 --> 00:35:29,530
the shape and algae you know it comes

688
00:35:26,380 --> 00:35:31,510
back to haunt us where if we have a

689
00:35:29,530 --> 00:35:33,410
square object we shouldn't force it to

690
00:35:31,510 --> 00:35:36,680
have a volume method

691
00:35:33,410 --> 00:35:40,549
we're because you know it's a 2d 2d

692
00:35:36,680 --> 00:35:43,910
shape there's no concept of volume to

693
00:35:40,550 --> 00:35:46,370
that so implementing a solid shape

694
00:35:43,910 --> 00:35:48,529
object which could then have the volume

695
00:35:46,370 --> 00:35:53,839
contract as a component would make more

696
00:35:48,530 --> 00:35:58,400
sense in this scenario dependency

697
00:35:53,840 --> 00:36:01,280
inversion so enjoy this quote from Derek

698
00:35:58,400 --> 00:36:03,110
so high level modules should not depend

699
00:36:01,280 --> 00:36:05,780
on lower level modules suppose should

700
00:36:03,110 --> 00:36:07,760
depend on abstractions abstraction

701
00:36:05,780 --> 00:36:10,160
should not depend on details details

702
00:36:07,760 --> 00:36:13,550
should depend on abstractions and so

703
00:36:10,160 --> 00:36:16,359
essentially what he's saying is to

704
00:36:13,550 --> 00:36:19,460
correctly bind your system together it's

705
00:36:16,360 --> 00:36:22,280
important to not depend on the the

706
00:36:19,460 --> 00:36:27,260
details of the higher level abstractions

707
00:36:22,280 --> 00:36:29,950
and not the other way around so the this

708
00:36:27,260 --> 00:36:32,750
has to do with the idea of coupling and

709
00:36:29,950 --> 00:36:36,980
how tightly coupled your system is

710
00:36:32,750 --> 00:36:39,230
together so an example here if you have

711
00:36:36,980 --> 00:36:41,240
an API that's implemented for a web

712
00:36:39,230 --> 00:36:44,000
application the consumer shouldn't know

713
00:36:41,240 --> 00:36:46,609
if I decide to change it entirely from

714
00:36:44,000 --> 00:36:50,150
being written in net to written in

715
00:36:46,610 --> 00:36:52,420
Python you know I should be able to as

716
00:36:50,150 --> 00:36:55,910
long as what you're receiving from me

717
00:36:52,420 --> 00:36:57,800
from a API perspective remains the same

718
00:36:55,910 --> 00:37:00,170
as long as you're receiving the Dame the

719
00:36:57,800 --> 00:37:06,320
same data structure it shouldn't matter

720
00:37:00,170 --> 00:37:09,220
to the consumer network fundamentals

721
00:37:06,320 --> 00:37:12,200
have mentioned a little bit and helping

722
00:37:09,220 --> 00:37:16,310
the developers not only troubleshoot

723
00:37:12,200 --> 00:37:22,399
their their own code but to to allow

724
00:37:16,310 --> 00:37:25,880
them to contribute more to the design

725
00:37:22,400 --> 00:37:28,360
and architecture of the the projects

726
00:37:25,880 --> 00:37:33,020
that they're working on and having that

727
00:37:28,360 --> 00:37:36,530
more generalized knowledge of the way

728
00:37:33,020 --> 00:37:38,180
systems work and ensuring that they they

729
00:37:36,530 --> 00:37:42,290
understand how the components tied

730
00:37:38,180 --> 00:37:46,669
together can you know not only give them

731
00:37:42,290 --> 00:37:50,330
a better ability to contribute but

732
00:37:46,670 --> 00:37:54,560
ability to to troubleshoot their their

733
00:37:50,330 --> 00:37:57,700
own problems so you know problems that

734
00:37:54,560 --> 00:38:00,560
I've seen where we we've managed

735
00:37:57,700 --> 00:38:04,370
external development teams like in the

736
00:38:00,560 --> 00:38:08,509
asia-pacific region where they're less

737
00:38:04,370 --> 00:38:12,400
well rounded the pace at which they can

738
00:38:08,510 --> 00:38:15,350
develop code is limited because they

739
00:38:12,400 --> 00:38:18,440
they've been they don't have the network

740
00:38:15,350 --> 00:38:20,779
understanding that the that they need to

741
00:38:18,440 --> 00:38:22,250
be able to understand why they they

742
00:38:20,780 --> 00:38:23,900
can't reach the services that they're

743
00:38:22,250 --> 00:38:26,630
trying to get to or why they aren't

744
00:38:23,900 --> 00:38:29,920
crafting their ssl certificates

745
00:38:26,630 --> 00:38:31,790
appropriately to be validated within the

746
00:38:29,920 --> 00:38:34,430
environment that they're working with

747
00:38:31,790 --> 00:38:37,250
and so ensuring that your developers

748
00:38:34,430 --> 00:38:39,859
have a general understanding of how to

749
00:38:37,250 --> 00:38:47,930
do these things really improves the

750
00:38:39,860 --> 00:38:51,020
productivity least privileged design you

751
00:38:47,930 --> 00:38:53,779
know this is a scenario where the the

752
00:38:51,020 --> 00:38:58,190
level of access and the the privileges

753
00:38:53,780 --> 00:39:00,950
that a user service has can you know

754
00:38:58,190 --> 00:39:04,700
either increase or decrease the risk at

755
00:39:00,950 --> 00:39:07,430
which you are presented as you're

756
00:39:04,700 --> 00:39:10,009
offering your service so making sure

757
00:39:07,430 --> 00:39:12,109
that you're you know everywhere from

758
00:39:10,010 --> 00:39:15,070
your code repositories where users

759
00:39:12,110 --> 00:39:17,300
should be limited and the number of

760
00:39:15,070 --> 00:39:19,550
repositories that they can see to your

761
00:39:17,300 --> 00:39:22,190
service level accounts where your

762
00:39:19,550 --> 00:39:24,770
services should have a limited account

763
00:39:22,190 --> 00:39:28,250
running the service so that if you know

764
00:39:24,770 --> 00:39:32,110
it's exposed or compromised it's not

765
00:39:28,250 --> 00:39:32,110
able to compromise the entire system

766
00:39:32,350 --> 00:39:39,740
this also goes into the way you write

767
00:39:36,890 --> 00:39:42,799
your code your procedures and your

768
00:39:39,740 --> 00:39:45,950
methods should have a limited scope at

769
00:39:42,800 --> 00:39:48,230
which they can modify an access data you

770
00:39:45,950 --> 00:39:52,480
know we see this with private there are

771
00:39:48,230 --> 00:39:55,070
protected methods as well as with the

772
00:39:52,480 --> 00:39:58,610
inheritance policy certain methods and

773
00:39:55,070 --> 00:39:59,810
this you know helps improve system

774
00:39:58,610 --> 00:40:02,450
stability

775
00:39:59,810 --> 00:40:05,120
and you know allows you to deploy more

776
00:40:02,450 --> 00:40:07,730
easily if you have to run your

777
00:40:05,120 --> 00:40:10,339
deployment code is root every time

778
00:40:07,730 --> 00:40:14,000
that's often a sign that you're not

779
00:40:10,340 --> 00:40:16,790
deploying things as as well as you might

780
00:40:14,000 --> 00:40:22,580
otherwise and clearly it will help

781
00:40:16,790 --> 00:40:25,460
improve your system security so we get

782
00:40:22,580 --> 00:40:27,650
on into the anti patterns and the code

783
00:40:25,460 --> 00:40:31,670
smells so these are the things that we

784
00:40:27,650 --> 00:40:37,520
see that people continue to implement

785
00:40:31,670 --> 00:40:40,730
even though it is it causes them a pain

786
00:40:37,520 --> 00:40:43,580
and and heartache and so Henry Spencer

787
00:40:40,730 --> 00:40:46,090
has stated those who do not understand

788
00:40:43,580 --> 00:40:50,900
the UNIX platform are condemned to

789
00:40:46,090 --> 00:40:53,180
reinvent it albeit poorly and we see

790
00:40:50,900 --> 00:40:56,000
this a lot people need a scheduler

791
00:40:53,180 --> 00:40:58,069
instead of using cron d they invent

792
00:40:56,000 --> 00:41:01,790
their own people need an email systems

793
00:40:58,070 --> 00:41:03,650
of using the you know SMTP processes

794
00:41:01,790 --> 00:41:06,320
that are services that are built into

795
00:41:03,650 --> 00:41:10,220
UNIX they write their own to to

796
00:41:06,320 --> 00:41:12,110
interface with that and not only is that

797
00:41:10,220 --> 00:41:14,959
bad practice because there's already a

798
00:41:12,110 --> 00:41:16,310
service available for them to use but

799
00:41:14,960 --> 00:41:18,530
now they have the additional technical

800
00:41:16,310 --> 00:41:20,480
debt of having to support the code that

801
00:41:18,530 --> 00:41:21,860
they wrote and now they're responsible

802
00:41:20,480 --> 00:41:23,930
for any bugs that are in that code

803
00:41:21,860 --> 00:41:26,180
they're responsible for updates and

804
00:41:23,930 --> 00:41:29,210
additional features instead of relying

805
00:41:26,180 --> 00:41:32,839
on the people who came before them and

806
00:41:29,210 --> 00:41:34,580
have been you know likely working on

807
00:41:32,840 --> 00:41:37,940
that particular problems that much

808
00:41:34,580 --> 00:41:41,000
longer than then they have we see this

809
00:41:37,940 --> 00:41:45,350
in relatively inexperienced development

810
00:41:41,000 --> 00:41:48,730
teams as as the team grows in maturity

811
00:41:45,350 --> 00:41:51,560
the these mistakes typically lesson but

812
00:41:48,730 --> 00:41:54,260
they can often carry on throughout a

813
00:41:51,560 --> 00:41:58,759
project where a design mistake early on

814
00:41:54,260 --> 00:42:01,820
as the team was relatively young can be

815
00:41:58,760 --> 00:42:05,840
persistent with in that code base and so

816
00:42:01,820 --> 00:42:09,170
you know additional scope and reliance

817
00:42:05,840 --> 00:42:11,279
on that redundant system that that they

818
00:42:09,170 --> 00:42:15,479
designed can

819
00:42:11,279 --> 00:42:19,619
often be pushed forward through multiple

820
00:42:15,479 --> 00:42:21,928
releases and this is you know

821
00:42:19,619 --> 00:42:23,459
particularly bad practice because it's

822
00:42:21,929 --> 00:42:25,229
not productive you're not you're not

823
00:42:23,459 --> 00:42:27,749
getting any more features into your

824
00:42:25,229 --> 00:42:29,578
product your your development team is

825
00:42:27,749 --> 00:42:32,999
often working outside of their field of

826
00:42:29,579 --> 00:42:38,329
expertise you know and so the year

827
00:42:32,999 --> 00:42:42,988
you're making increasingly expensive

828
00:42:38,329 --> 00:42:45,689
mistakes but in certain circumstances it

829
00:42:42,989 --> 00:42:48,689
is important to do it yourself if

830
00:42:45,689 --> 00:42:53,578
there's a library that's open source but

831
00:42:48,689 --> 00:42:56,178
has a particularly restrictive license

832
00:42:53,579 --> 00:42:59,279
you might need to rewrite that library

833
00:42:56,179 --> 00:43:02,489
for your own internal development if

834
00:42:59,279 --> 00:43:04,909
you're not allowed to then resell the

835
00:43:02,489 --> 00:43:10,319
code or if you have to follow certain

836
00:43:04,909 --> 00:43:13,349
attribution or release code that might

837
00:43:10,319 --> 00:43:16,739
be one reason why you might rewrite an

838
00:43:13,349 --> 00:43:21,929
entire system but it's a very fine line

839
00:43:16,739 --> 00:43:25,159
and making that decision the the god

840
00:43:21,929 --> 00:43:28,769
object so often this starts off as a

841
00:43:25,159 --> 00:43:30,419
relatively naive object you write a

842
00:43:28,769 --> 00:43:32,698
manager object that's going to do a

843
00:43:30,419 --> 00:43:36,449
couple things and all of a sudden that

844
00:43:32,699 --> 00:43:37,829
object is responsible for the the rising

845
00:43:36,449 --> 00:43:41,249
of the Sun and the setting of the moon

846
00:43:37,829 --> 00:43:43,499
and you can't get away from calling it

847
00:43:41,249 --> 00:43:46,558
in one way or another to do everything

848
00:43:43,499 --> 00:43:50,038
within your system and so you know

849
00:43:46,559 --> 00:43:52,769
whether it's getting inherited by

850
00:43:50,039 --> 00:43:55,409
everything or it's carrying out more

851
00:43:52,769 --> 00:43:58,379
responsibilities that's violating the

852
00:43:55,409 --> 00:44:01,140
single responsibility principle and we

853
00:43:58,380 --> 00:44:05,729
see this sometimes with front ends where

854
00:44:01,140 --> 00:44:09,359
your API server is you know running just

855
00:44:05,729 --> 00:44:11,848
one massive behemoth of a code stack to

856
00:44:09,359 --> 00:44:13,919
return you know a database interface

857
00:44:11,849 --> 00:44:16,349
that might otherwise be able to be

858
00:44:13,919 --> 00:44:20,808
implemented you know elegantly with a

859
00:44:16,349 --> 00:44:23,040
different platform or you're running an

860
00:44:20,809 --> 00:44:25,800
engine that is

861
00:44:23,040 --> 00:44:30,240
managing all the the starting and

862
00:44:25,800 --> 00:44:31,950
stopping of your processes here for back

863
00:44:30,240 --> 00:44:33,839
to our email example it's you know

864
00:44:31,950 --> 00:44:38,359
reading every base inbox and tagging it

865
00:44:33,840 --> 00:44:48,860
and filtering it and instead of having a

866
00:44:38,360 --> 00:44:52,110
set of more module modular code so it's

867
00:44:48,860 --> 00:44:55,760
another example the the ghost object or

868
00:44:52,110 --> 00:44:59,310
the poltergeist object we see this where

869
00:44:55,760 --> 00:45:01,790
more procedurally experienced developers

870
00:44:59,310 --> 00:45:06,630
become object-oriented developers and

871
00:45:01,790 --> 00:45:10,290
they perhaps aren't as knowledgeable

872
00:45:06,630 --> 00:45:12,000
about how to to work with in

873
00:45:10,290 --> 00:45:16,470
object-oriented design so they might

874
00:45:12,000 --> 00:45:19,470
create an object that is a shim in their

875
00:45:16,470 --> 00:45:21,899
code to to start start up a class and

876
00:45:19,470 --> 00:45:25,379
set some things then that object goes

877
00:45:21,900 --> 00:45:27,930
away and the this is the problem because

878
00:45:25,380 --> 00:45:32,070
it introduces artificial complexity in

879
00:45:27,930 --> 00:45:34,589
the system and it's cumbersome to to

880
00:45:32,070 --> 00:45:39,510
maintain as well as share the knowledge

881
00:45:34,590 --> 00:45:41,550
within your development team you that

882
00:45:39,510 --> 00:45:44,160
knowledge transfer gov you know I need

883
00:45:41,550 --> 00:45:46,770
to to call you know server object and at

884
00:45:44,160 --> 00:45:51,379
zero and then wait and then serve it or

885
00:45:46,770 --> 00:45:55,230
object in it 10 later is not at all

886
00:45:51,380 --> 00:46:02,460
object-oriented it's it follows a more

887
00:45:55,230 --> 00:46:06,090
procedural design pattern and that it's

888
00:46:02,460 --> 00:46:08,190
not only inefficient but it's it makes

889
00:46:06,090 --> 00:46:11,850
it difficult for the onboarding indie

890
00:46:08,190 --> 00:46:15,860
developers and the documentation of your

891
00:46:11,850 --> 00:46:15,860
code as you'd move forward

892
00:46:18,290 --> 00:46:28,380
another one missing abstraction so you

893
00:46:22,140 --> 00:46:31,319
know if you have say hard-coded user

894
00:46:28,380 --> 00:46:34,560
account information or network

895
00:46:31,320 --> 00:46:38,730
information at the as an inheritable

896
00:46:34,560 --> 00:46:41,910
file that can instead of having that in

897
00:46:38,730 --> 00:46:44,220
an object or a configuration method the

898
00:46:41,910 --> 00:46:46,680
this can break your deployment you know

899
00:46:44,220 --> 00:46:49,319
say I I deployed out in Amazon and I had

900
00:46:46,680 --> 00:46:52,620
a public IP and I hard-coded that public

901
00:46:49,320 --> 00:46:55,680
IP instead of obtaining that either from

902
00:46:52,620 --> 00:46:57,089
an if config or some other statement now

903
00:46:55,680 --> 00:47:00,629
my service isn't going to work because

904
00:46:57,090 --> 00:47:03,420
it's expecting one IP when I'm my server

905
00:47:00,630 --> 00:47:06,900
is currently existing at another

906
00:47:03,420 --> 00:47:12,270
location this can you know happen

907
00:47:06,900 --> 00:47:18,840
anywhere from global variables to to

908
00:47:12,270 --> 00:47:21,030
user names and and things like that so

909
00:47:18,840 --> 00:47:25,260
this is an interesting one so the

910
00:47:21,030 --> 00:47:27,990
over/under emphasis on on security so

911
00:47:25,260 --> 00:47:31,130
like I mentioned before security isn't a

912
00:47:27,990 --> 00:47:34,680
value add to to most products it's

913
00:47:31,130 --> 00:47:36,720
assumed that if I'm using an email app

914
00:47:34,680 --> 00:47:38,910
that it's going to be secure if I'm

915
00:47:36,720 --> 00:47:41,640
using you know Pokemon go it's not going

916
00:47:38,910 --> 00:47:45,149
to compromise my gmail account but in

917
00:47:41,640 --> 00:47:46,620
reality you know security is adding

918
00:47:45,150 --> 00:47:49,530
value because if you don't have security

919
00:47:46,620 --> 00:47:52,290
and you become compromised your company

920
00:47:49,530 --> 00:47:57,240
very well may go under but it's an

921
00:47:52,290 --> 00:47:59,370
inferred value so if you push it off

922
00:47:57,240 --> 00:48:02,040
until you know later and later and later

923
00:47:59,370 --> 00:48:04,020
and never address it you have an almost

924
00:48:02,040 --> 00:48:06,060
insurmountable amount of technical debt

925
00:48:04,020 --> 00:48:09,960
that you have to you know an all in one

926
00:48:06,060 --> 00:48:13,560
big bite address or if you focus on it

927
00:48:09,960 --> 00:48:16,800
all too much before your application is

928
00:48:13,560 --> 00:48:19,650
mature you can really limit the growth

929
00:48:16,800 --> 00:48:21,930
of your application and so it's

930
00:48:19,650 --> 00:48:24,690
important to be able to identify at what

931
00:48:21,930 --> 00:48:28,290
level of maturity is your application

932
00:48:24,690 --> 00:48:30,670
you are you obtaining client data or are

933
00:48:28,290 --> 00:48:34,029
you just working with your test data

934
00:48:30,670 --> 00:48:36,580
and you know are you preparing to begin

935
00:48:34,030 --> 00:48:39,250
ingesting client data at which point you

936
00:48:36,580 --> 00:48:42,970
really do need to be prepared to protect

937
00:48:39,250 --> 00:48:44,560
that and so you understanding when to

938
00:48:42,970 --> 00:48:47,049
emphasize it and having the appropriate

939
00:48:44,560 --> 00:48:50,700
decision gates within your development

940
00:48:47,050 --> 00:48:54,510
process will ensure that you're not

941
00:48:50,700 --> 00:48:58,600
hampering your overall development

942
00:48:54,510 --> 00:49:00,940
progress and you know often it's under

943
00:48:58,600 --> 00:49:04,750
emphasis as I mentioned before because

944
00:49:00,940 --> 00:49:10,810
you know features are often seen as more

945
00:49:04,750 --> 00:49:13,630
valuable than security security silos we

946
00:49:10,810 --> 00:49:17,460
see this often in and large larger

947
00:49:13,630 --> 00:49:21,250
organizations where instead of a smaller

948
00:49:17,460 --> 00:49:24,250
development or dev ops team you have IT

949
00:49:21,250 --> 00:49:26,470
offs and helped us in the networking

950
00:49:24,250 --> 00:49:31,570
team and then the developers and so

951
00:49:26,470 --> 00:49:34,270
having an unclear delegation of duties

952
00:49:31,570 --> 00:49:35,950
you know as to who's responsible for the

953
00:49:34,270 --> 00:49:37,990
network security and who's responsible

954
00:49:35,950 --> 00:49:40,330
for the network architecture and then

955
00:49:37,990 --> 00:49:44,620
who's responsible for the code security

956
00:49:40,330 --> 00:49:46,860
if that is all somewhat muddled and each

957
00:49:44,620 --> 00:49:49,990
of those teams reports to different

958
00:49:46,860 --> 00:49:53,290
managers then there can be in fighting

959
00:49:49,990 --> 00:49:55,629
and other friction within the

960
00:49:53,290 --> 00:50:01,150
organization that creates inefficiencies

961
00:49:55,630 --> 00:50:03,070
and that type of friction can lead to

962
00:50:01,150 --> 00:50:08,530
power plays and you know people getting

963
00:50:03,070 --> 00:50:13,180
pushed out another scenario that we see

964
00:50:08,530 --> 00:50:16,480
is and seesaws and CIOs who frequently

965
00:50:13,180 --> 00:50:18,490
don't last more than two years in an

966
00:50:16,480 --> 00:50:20,500
organization they get golden parachutes

967
00:50:18,490 --> 00:50:24,160
and they move on to the you know the

968
00:50:20,500 --> 00:50:26,800
next stepping stone and a common pattern

969
00:50:24,160 --> 00:50:29,109
is they enter an organization they say

970
00:50:26,800 --> 00:50:32,080
oh I see you've got this finite set of

971
00:50:29,110 --> 00:50:35,410
problems I'm going to fix it with by

972
00:50:32,080 --> 00:50:37,270
purchasing XYZ piece of software by the

973
00:50:35,410 --> 00:50:40,240
time that talker is getting installed

974
00:50:37,270 --> 00:50:42,490
and implemented corporate-wide they're

975
00:50:40,240 --> 00:50:44,470
exiting before they even see whether

976
00:50:42,490 --> 00:50:46,720
that solution was the

977
00:50:44,470 --> 00:50:48,160
solution or address any of the initial

978
00:50:46,720 --> 00:50:51,959
problems that they were brought in for

979
00:50:48,160 --> 00:50:55,290
and if you have your team's be being

980
00:50:51,960 --> 00:50:57,700
segmented that creates even more

981
00:50:55,290 --> 00:50:59,830
confusion as to you know who is

982
00:50:57,700 --> 00:51:04,029
ultimately responsible for that decision

983
00:50:59,830 --> 00:51:07,859
who's going to now carry on that that

984
00:51:04,030 --> 00:51:16,770
process that the now exiting c-level

985
00:51:07,859 --> 00:51:16,770
executive is has created and that is all

986
00:51:20,369 --> 00:51:33,940
can I answer any questions or oh yeah

987
00:51:27,340 --> 00:51:36,880
push your button so this may be too hard

988
00:51:33,940 --> 00:51:40,410
to do block question but when you take a

989
00:51:36,880 --> 00:51:43,599
look at most of the clients that you see

990
00:51:40,410 --> 00:51:47,250
where would you find most would you how

991
00:51:43,599 --> 00:51:52,300
would you allocate between training

992
00:51:47,250 --> 00:51:55,390
development and just the normal staff in

993
00:51:52,300 --> 00:51:58,000
terms of vulnerabilities where do the

994
00:51:55,390 --> 00:51:59,529
vole nur abilities arise the most you

995
00:51:58,000 --> 00:52:01,690
had to suddenly see I'm going to try to

996
00:51:59,530 --> 00:52:04,150
fix them the worst thing first where

997
00:52:01,690 --> 00:52:07,320
does it most likely happen I would say

998
00:52:04,150 --> 00:52:11,160
it almost has to be in training the

999
00:52:07,320 --> 00:52:13,660
we're just looking at a response where

1000
00:52:11,160 --> 00:52:16,569
some some of the pen testing

1001
00:52:13,660 --> 00:52:21,460
organizations will say if I have a

1002
00:52:16,570 --> 00:52:23,800
eighty percent success rate with fishing

1003
00:52:21,460 --> 00:52:28,089
campaign that means you know a two out

1004
00:52:23,800 --> 00:52:30,550
of my 10 employees failed mice to follow

1005
00:52:28,089 --> 00:52:32,049
the best practices when reacting to a

1006
00:52:30,550 --> 00:52:35,740
spearfishing campaign that's a

1007
00:52:32,050 --> 00:52:40,119
successful set of training to me that

1008
00:52:35,740 --> 00:52:43,410
that's a highly problematic metric to

1009
00:52:40,119 --> 00:52:46,660
follow you know if you know the if

1010
00:52:43,410 --> 00:52:50,290
especially given that you know any you

1011
00:52:46,660 --> 00:52:53,740
know if you have like a shared set of

1012
00:52:50,290 --> 00:52:56,109
network drives that's BitLocker on those

1013
00:52:53,740 --> 00:52:57,609
network drives if one of those two

1014
00:52:56,109 --> 00:53:00,788
people who failed

1015
00:52:57,609 --> 00:53:03,269
was a HR secretary that's you know your

1016
00:53:00,789 --> 00:53:08,220
entire employee set of records now gone

1017
00:53:03,269 --> 00:53:12,368
I think that the the training there in

1018
00:53:08,220 --> 00:53:16,808
many organizations is where the the

1019
00:53:12,369 --> 00:53:19,779
softest component is because it it's not

1020
00:53:16,809 --> 00:53:21,910
requiring the attackers to to find a

1021
00:53:19,779 --> 00:53:24,640
break in your code it's they don't have

1022
00:53:21,910 --> 00:53:27,609
to understand your your database schema

1023
00:53:24,640 --> 00:53:29,319
or the vulnerabilities and your API all

1024
00:53:27,609 --> 00:53:33,519
they have to do is manipulate the person

1025
00:53:29,319 --> 00:53:36,009
and I think that that is ultimately the

1026
00:53:33,519 --> 00:53:38,828
the most cost effective way for an

1027
00:53:36,009 --> 00:53:43,089
attacker to gain access to your system

1028
00:53:38,829 --> 00:53:44,829
and you know it attackers that those

1029
00:53:43,089 --> 00:53:47,828
groups are run like businesses they

1030
00:53:44,829 --> 00:53:50,079
follow the SCLC they have managers they

1031
00:53:47,829 --> 00:53:53,079
have features that they have you know

1032
00:53:50,079 --> 00:53:56,549
deployment strategies so that they are

1033
00:53:53,079 --> 00:53:59,799
in the same way the the privately-run

1034
00:53:56,549 --> 00:54:02,739
organizations are operated they have you

1035
00:53:59,799 --> 00:54:04,779
know revenue goals and the the cheapest

1036
00:54:02,739 --> 00:54:06,700
way to get money is going to be the way

1037
00:54:04,779 --> 00:54:16,690
that they're often going to try to

1038
00:54:06,700 --> 00:54:20,259
achieve that goal I'm sorry nobody else

1039
00:54:16,690 --> 00:54:26,710
I have one question do you find you get

1040
00:54:20,259 --> 00:54:30,039
to do kind of repeat inspections into

1041
00:54:26,710 --> 00:54:34,029
into things and do you find is is

1042
00:54:30,039 --> 00:54:36,099
training effective is it or are there

1043
00:54:34,029 --> 00:54:39,220
things that seem to make a big impact

1044
00:54:36,099 --> 00:54:42,400
are there things that don't seem to have

1045
00:54:39,220 --> 00:54:46,078
an impact yeah sure so what will

1046
00:54:42,400 --> 00:54:49,150
frequently reap organizations will have

1047
00:54:46,079 --> 00:54:53,319
periodic testing that that's required

1048
00:54:49,150 --> 00:54:56,859
from you know other pci or HIPAA or one

1049
00:54:53,319 --> 00:55:00,489
of the other regulatory bodies requires

1050
00:54:56,859 --> 00:55:03,970
them to to on a certain time frame do

1051
00:55:00,489 --> 00:55:07,150
this either training or testing and what

1052
00:55:03,970 --> 00:55:09,788
we've seen is you might do spearfishing

1053
00:55:07,150 --> 00:55:11,010
training and say you know look at the

1054
00:55:09,789 --> 00:55:12,630
URL from

1055
00:55:11,010 --> 00:55:14,730
from which your email is coming before

1056
00:55:12,630 --> 00:55:16,560
and before you click a download and

1057
00:55:14,730 --> 00:55:18,570
ensure that you're expecting an

1058
00:55:16,560 --> 00:55:22,500
attachment before you download it and

1059
00:55:18,570 --> 00:55:26,010
things like that and you know kind of

1060
00:55:22,500 --> 00:55:27,660
like a an immunization you see an

1061
00:55:26,010 --> 00:55:32,510
improvement and then you see a fall off

1062
00:55:27,660 --> 00:55:34,859
and so will will do the the kind of and

1063
00:55:32,510 --> 00:55:36,540
testing where you know it immediately

1064
00:55:34,860 --> 00:55:39,240
after the training we see how well

1065
00:55:36,540 --> 00:55:41,009
people are doing and then a lot of times

1066
00:55:39,240 --> 00:55:44,009
that's announced testing where we'll say

1067
00:55:41,010 --> 00:55:46,320
okay you guys just all did the training

1068
00:55:44,010 --> 00:55:48,810
now we're going to do a spearfishing

1069
00:55:46,320 --> 00:55:50,820
campaign and so they're they're aware of

1070
00:55:48,810 --> 00:55:53,580
it and then maybe a month later do an

1071
00:55:50,820 --> 00:55:58,860
unannounced campaign and that's

1072
00:55:53,580 --> 00:56:01,529
typically much less the success rate of

1073
00:55:58,860 --> 00:56:11,460
the campaign is much higher for the it

1074
00:56:01,530 --> 00:56:14,730
from the attackers perspective so there

1075
00:56:11,460 --> 00:56:22,410
is it's incremental though it's you know

1076
00:56:14,730 --> 00:56:26,550
it the non technically adept individuals

1077
00:56:22,410 --> 00:56:28,020
it's you know about repetition and you

1078
00:56:26,550 --> 00:56:30,930
know in the same way that you know

1079
00:56:28,020 --> 00:56:32,670
everybody learns a repetition and you

1080
00:56:30,930 --> 00:56:36,810
know encouragement and showing them how

1081
00:56:32,670 --> 00:56:38,490
this improvement is going is protecting

1082
00:56:36,810 --> 00:56:41,549
you know not only their jobs with the

1083
00:56:38,490 --> 00:56:44,759
organization's you know profitability is

1084
00:56:41,550 --> 00:56:47,180
how we often see that that improvement

1085
00:56:44,760 --> 00:56:50,010
go through but you know there's no

1086
00:56:47,180 --> 00:56:52,290
silver bullet to you know say you know

1087
00:56:50,010 --> 00:56:55,320
one magical training solution gets

1088
00:56:52,290 --> 00:56:57,180
everybody on board or one network pin

1089
00:56:55,320 --> 00:56:59,130
test you know all the sudden has

1090
00:56:57,180 --> 00:57:01,169
captured all the vulnerabilities in your

1091
00:56:59,130 --> 00:57:02,550
environment and you do a round of fixing

1092
00:57:01,170 --> 00:57:05,790
and then the next time we come in and

1093
00:57:02,550 --> 00:57:09,270
nothing's there that it because there's

1094
00:57:05,790 --> 00:57:11,850
only so many hours and excuse me that an

1095
00:57:09,270 --> 00:57:16,230
organization can invest and so you know

1096
00:57:11,850 --> 00:57:17,940
we like for the network pin test will do

1097
00:57:16,230 --> 00:57:19,590
one series and they fix you know maybe

1098
00:57:17,940 --> 00:57:22,080
they fix all the criticals but then we

1099
00:57:19,590 --> 00:57:24,060
still have you know all the highest and

1100
00:57:22,080 --> 00:57:24,509
mediums and lows that they have to

1101
00:57:24,060 --> 00:57:28,259
address

1102
00:57:24,510 --> 00:57:32,130
and the those are often a value judgment

1103
00:57:28,260 --> 00:57:34,920
versus you know it's not a like saying

1104
00:57:32,130 --> 00:57:38,370
you know a critical vulnerability is 32

1105
00:57:34,920 --> 00:57:42,660
degrees Celsius and high vulnerabilities

1106
00:57:38,370 --> 00:57:46,170
you know 40 degrees Celsius it's there a

1107
00:57:42,660 --> 00:57:49,290
lot of times it's about what what is the

1108
00:57:46,170 --> 00:57:51,930
value on that asset is it a development

1109
00:57:49,290 --> 00:57:54,840
machine or is that you know a in

1110
00:57:51,930 --> 00:57:57,270
production is it holding PII data or is

1111
00:57:54,840 --> 00:57:58,880
it not and so making sure that as you're

1112
00:57:57,270 --> 00:58:02,910
running those tests you're aware of

1113
00:57:58,880 --> 00:58:08,840
what's at risk allows us to increase or

1114
00:58:02,910 --> 00:58:15,330
decrease those thresholds have neither

1115
00:58:08,840 --> 00:58:17,460
questions yeah when you when you look at

1116
00:58:15,330 --> 00:58:20,180
some of the software development that's

1117
00:58:17,460 --> 00:58:23,910
going out there art are you seeing

1118
00:58:20,180 --> 00:58:27,000
software developers starting to utilize

1119
00:58:23,910 --> 00:58:28,500
some of the api's that are out there for

1120
00:58:27,000 --> 00:58:31,560
like operating systems and we've seen a

1121
00:58:28,500 --> 00:58:33,870
lot of improvement with like in trusted

1122
00:58:31,560 --> 00:58:36,509
platforms hardware security you know

1123
00:58:33,870 --> 00:58:39,720
enclaves but these seem to be separate

1124
00:58:36,510 --> 00:58:41,040
ap is that you have to use so you know

1125
00:58:39,720 --> 00:58:42,720
I'm sure people are doing better with

1126
00:58:41,040 --> 00:58:46,020
web application development in terms of

1127
00:58:42,720 --> 00:58:48,779
using you know ap is for ssl/tls but

1128
00:58:46,020 --> 00:58:51,360
there's a lot of the underlining api's

1129
00:58:48,780 --> 00:58:53,700
you know the right are you seeing a lot

1130
00:58:51,360 --> 00:58:56,150
of that or I mean how's the training

1131
00:58:53,700 --> 00:58:59,460
with that and hat is that a part of the

1132
00:58:56,150 --> 00:59:01,620
do you see that being adopted or so so

1133
00:58:59,460 --> 00:59:05,430
it really depends on the organization's

1134
00:59:01,620 --> 00:59:07,859
you know core business model and how as

1135
00:59:05,430 --> 00:59:11,759
to how much that's being emphasized in

1136
00:59:07,860 --> 00:59:14,370
their development process geez CEO just

1137
00:59:11,760 --> 00:59:16,320
said that every new hire that they have

1138
00:59:14,370 --> 00:59:20,730
moving forward is going to learn how to

1139
00:59:16,320 --> 00:59:24,060
program in in one way shape or form and

1140
00:59:20,730 --> 00:59:25,770
we see this frequently with amateur

1141
00:59:24,060 --> 00:59:28,200
developers who are you know really you

1142
00:59:25,770 --> 00:59:30,509
know wanting to teach themselves how to

1143
00:59:28,200 --> 00:59:32,640
code and so they're writing a web app

1144
00:59:30,510 --> 00:59:35,760
and releasing it out into the store and

1145
00:59:32,640 --> 00:59:37,580
then that's on your phone that you know

1146
00:59:35,760 --> 00:59:43,310
it's with you everywhere that you go

1147
00:59:37,580 --> 00:59:45,740
and so this kind of that there's today

1148
00:59:43,310 --> 00:59:47,360
there's a much wider range and the

1149
00:59:45,740 --> 00:59:49,700
experience level and expertise of

1150
00:59:47,360 --> 00:59:52,610
developers then I think there has ever

1151
00:59:49,700 --> 00:59:55,640
been you know that when you know even a

1152
00:59:52,610 --> 00:59:58,370
decade ago it most code was written more

1153
00:59:55,640 --> 01:00:03,379
predominantly by professionals than it

1154
00:59:58,370 --> 01:00:06,410
is now and so those security api's and

1155
01:00:03,380 --> 01:00:08,570
and the operating system components that

1156
01:00:06,410 --> 01:00:11,330
are available now are not necessarily

1157
01:00:08,570 --> 01:00:14,120
being adopted by those amateurs who have

1158
01:00:11,330 --> 01:00:14,990
not been exposed to security from from

1159
01:00:14,120 --> 01:00:18,140
the beginning of their development

1160
01:00:14,990 --> 01:00:21,319
careers they've been hobbyists or you

1161
01:00:18,140 --> 01:00:22,759
know tangentially exposed to the

1162
01:00:21,320 --> 01:00:26,210
programming and enter you know

1163
01:00:22,760 --> 01:00:28,220
self-taught rather than getting that

1164
01:00:26,210 --> 01:00:33,130
understanding of how to develop securely

1165
01:00:28,220 --> 01:00:33,129
from there the beginning of their career

1166
01:00:35,770 --> 01:00:40,630
mr. Taylor for presentation and

1167
01:01:20,510 --> 01:01:22,570
you

