1
00:00:01,460 --> 00:00:07,549
good how are you going i hope good good now comes a very talk

2
00:00:07,549 --> 00:00:12,980
 very interesting by engineer alfredo pardo is called defense in depth

3
00:00:12,980 --> 00:00:19,099
 for container-based applications alfredo is from córdoba he is cloud

4
00:00:19,099 --> 00:00:25,430
 security architect from cops and is also python from belo but he is passionate about

5
00:00:25,430 --> 00:00:28,939
 cybersecurity automation and emerging technologies the bus that

6
00:00:28,939 --> 00:00:33,769
 evangelize in best practices the environments based on accountants and environments

7
00:00:33,769 --> 00:00:38,539
 cloud so his talk is basically based on making the

8
00:00:38,539 --> 00:00:42,739
 software development cycle is more secure in those infrastructures

9
00:00:42,739 --> 00:00:46,070
 container-based so we're going to hear that it's only very

10
00:00:46,070 --> 00:00:51,060
 interesting and well thank you very much if you look for a second

11
00:00:51,060 --> 00:00:55,220
 I'm going to share my screen with you

12
00:00:57,030 --> 00:01:02,719
 let's check that everything looks good a vision from that side

13
00:01:03,860 --> 00:01:09,070
 excellent good first I want to thank you

14
00:01:09,070 --> 00:01:13,240
 share to the cordoba hacker space and to the ute n which is where I received from

15
00:01:13,240 --> 00:01:19,298
 engineer for giving me this opportunity to bring you this talk today.

16
00:01:19,299 --> 00:01:24,460
 talk about defense in depth for container-based applications and

17
00:01:24,460 --> 00:01:29,169
 I am interested in taking some important issues for those who want

18
00:01:29,170 --> 00:01:34,259
 get started as ds cops let's see some concepts and best practices

19
00:01:34,259 --> 00:01:40,000
 that if they deepen them they will have a very interesting profile for the market

20
00:01:40,000 --> 00:01:43,060
 current second I want to share

21
00:01:43,060 --> 00:01:48,100
 some tools that I was researching to save you that too

22
00:01:48,100 --> 00:01:54,490
 path that can be used by those who can test them and finally who can think

23
00:01:54,490 --> 00:01:59,199
 on how to apply this to corporate environments today power when they go to

24
00:01:59,200 --> 00:02:04,630
 an interview they will ask them how to solve problems then while

25
00:02:04,630 --> 00:02:10,380
 the more they can apply this to what a business is the easier it is going to be

26
00:02:10,380 --> 00:02:15,120
 and get a job successfully pass some interviews a little more

27
00:02:15,120 --> 00:02:19,620
 information about my work as cloud security are cyst that in 3 x in my

28
00:02:19,620 --> 00:02:26,100
 I am also a professor of computer security and auditing in the fourth year of

29
00:02:26,100 --> 00:02:30,239
 systems engineering degree at the catholic university of cordoba and

30
00:02:30,240 --> 00:02:34,320
 I'm also a student I'm still studying the master's degree in cyber defense

31
00:02:34,320 --> 00:02:38,670
 at the university of national defense for now we are studying it in a

32
00:02:38,670 --> 00:02:43,230
 Remote Buenos Aires and Cordoba too

33
00:02:43,230 --> 00:02:50,399
 and good to align a little what the knowledge that the audience has

34
00:02:50,400 --> 00:02:54,780
 I want to tell you for those who do not know that it is a container, basically it is a

35
00:02:54,780 --> 00:03:00,510
 way to package applications and their dependencies so that they can

36
00:03:00,510 --> 00:03:05,010
 move between environments without suffering too much disturbance at the time of

37
00:03:05,010 --> 00:03:09,298
 execution what is sought is everything that makes an application unique

38
00:03:09,299 --> 00:03:14,250
 inside the container so that everything on the outside can

39
00:03:14,250 --> 00:03:20,099
 be standardized as are the ports that allow network connections between

40
00:03:20,099 --> 00:03:24,238
 the different containers what is to share volumes or systems of

41
00:03:24,239 --> 00:03:29,480
 file etc. it is also important to incorporate this

42
00:03:29,480 --> 00:03:35,690
 concept of ciro trust this framework invites organizations to distrust

43
00:03:35,690 --> 00:03:41,450
 at all times of everything that happens both inside and outside the perimeter of

44
00:03:41,450 --> 00:03:48,560
 organizations and before granting any type of access encourages

45
00:03:48,560 --> 00:03:55,100
 both the origin or who is requesting that

46
00:03:55,100 --> 00:03:57,579
 access

47
00:03:58,170 --> 00:04:04,738
 Well containers must be analyzed in context both applications

48
00:04:04,739 --> 00:04:10,349
 that run internally like everything that is around that is why I propose this

49
00:04:10,349 --> 00:04:15,929
 layered model where internally we have the application with everything

50
00:04:15,930 --> 00:04:20,269
 that implies and externally we have the host which is where it is running

51
00:04:20,269 --> 00:04:25,500
 effectively the container we have a cluster that manages each of those

52
00:04:25,500 --> 00:04:30,900
 containers and in turn that cluster is supported by an infrastructure that

53
00:04:30,900 --> 00:04:35,940
 it can be cloud or it can be a prize for the case of companies that have the

54
00:04:35,940 --> 00:04:41,190
 servers within their own building to each of these layers I have

55
00:04:41,190 --> 00:04:45,360
 identified with a number so that they can follow them throughout the

56
00:04:45,360 --> 00:04:51,430
 presentation I will mention some some actions

57
00:04:51,430 --> 00:04:54,610
 and controls that can be done on the applications and then I will

58
00:04:54,610 --> 00:05:00,009
 describe in a little more detail we have different stages of modeling

59
00:05:00,009 --> 00:05:04,539
 threats or fred modeling the analysis of software or software compositions

60
00:05:04,539 --> 00:05:09,128
 composition analysis static or static safety tests

61
00:05:09,129 --> 00:05:13,479
 application security testing and dynamic or dynamic security tests

62
00:05:13,479 --> 00:05:19,000
 application security testing these are just some actions or controls that are

63
00:05:19,000 --> 00:05:23,979
 that run on applications there are many more of course but the idea is

64
00:05:23,979 --> 00:05:30,180
 give them something introductory so they can continue to deepen what

65
00:05:30,180 --> 00:05:36,210
 Threat modeling is specifically identifying, understanding and communicating both

66
00:05:36,210 --> 00:05:41,789
 threats as mitigation is something of value we want to protect this so

67
00:05:41,789 --> 00:05:46,530
 In general, it is preferably intended that it be carried out in the initial stages of

68
00:05:46,530 --> 00:05:51,270
 development in the stage where the architecture of the

69
00:05:51,270 --> 00:05:56,070
 application and one of the challenges that they will find when they want to

70
00:05:56,070 --> 00:06:00,479
 this is that generally the teams of architects of architecture or of

71
00:06:00,479 --> 00:06:05,070
 development do not have sufficient documentation on the architecture of the

72
00:06:05,070 --> 00:06:10,259
 application with which it will first be difficult to identify the components and

73
00:06:10,259 --> 00:06:15,780
 then grab each component and be able to identify the threats surrounding

74
00:06:15,780 --> 00:06:22,210
 that component specifically then we have the composition analysis

75
00:06:22,210 --> 00:06:28,810
 software that basically consists of analyzing the dependencies that make up

76
00:06:28,810 --> 00:06:33,250
 both a third-party and open source app and see if those

77
00:06:33,250 --> 00:06:37,750
 Dependencies have known vulnerabilities or are outdated by

78
00:06:37,750 --> 00:06:42,760
 example to update the an example of this can be the

79
00:06:42,760 --> 00:06:49,180
 sheet-based backend applications have for example a file and it is called

80
00:06:49,180 --> 00:06:53,800
 pacas points jason who names the dependencies and the versions of each one

81
00:06:53,800 --> 00:06:58,750
 of these and in turn these dependencies have others building a tree of

82
00:06:58,750 --> 00:07:03,310
 dependency and this can be very complex because while the package

83
00:07:03,310 --> 00:07:06,580
 principal may not have vulnerabilities if their

84
00:07:06,580 --> 00:07:09,060
 dependencies

85
00:07:09,240 --> 00:07:14,580
 then we have the sas or static code analysis tools that

86
00:07:14,580 --> 00:07:20,400
 they basically seek in the code to identify exploitable functions to

87
00:07:20,400 --> 00:07:25,258
 find security breaches generally these tools today tend to

88
00:07:25,259 --> 00:07:30,270
 go to the video to the development environment some examples of this

89
00:07:30,270 --> 00:07:35,280
 it may be what I have seen are visual studio that has some extensions

90
00:07:35,280 --> 00:07:41,190
 that not only suggest recommendations about the code but also about the

91
00:07:41,190 --> 00:07:45,509
 packages and versions packages that is, they go a little further and are also

92
00:07:45,509 --> 00:07:49,820
 they get into what is software composition analysis

93
00:07:49,820 --> 00:07:54,409
 then the dynamic security tests or tools of those are

94
00:07:54,410 --> 00:07:59,330
 basically the web application analyzers that are usually used

95
00:07:59,330 --> 00:08:04,070
 from outside the application to see what vulnerabilities we find

96
00:08:04,070 --> 00:08:09,620
 from outside houas has a project called web benchmark that seeks

97
00:08:09,620 --> 00:08:13,700
 promptly analyze scientifically the results of the different

98
00:08:13,700 --> 00:08:19,240
 tools and compare the accuracy of these

99
00:08:19,680 --> 00:08:24,810
 some documentation that can be used to support each of these

100
00:08:24,810 --> 00:08:30,240
 stages we have, for example, for what is static analysis the practices of

101
00:08:30,240 --> 00:08:35,729
 safe code proposed by Aguas for what is dynamic analysis we have the

102
00:08:35,729 --> 00:08:41,240
 waters 'top ten' of web applications and the road network is an interesting piece of information

103
00:08:41,240 --> 00:08:47,880
 proposed by gartner is that by 2022 it is expected, but it is expected that 80 percent

104
00:08:47,880 --> 00:08:52,560
 percent of security breaches occur in eyed peas networks with the

105
00:08:52,560 --> 00:08:57,209
 What if they specialize in this if they specialize in this area are they going to have a

106
00:08:57,209 --> 00:09:03,390
 promising future and then we have the security verification standard of

107
00:09:03,390 --> 00:09:07,920
 applications that will help us to deepen to go beyond this' top

108
00:09:07,920 --> 00:09:12,459
 have 'that includes the most common but it will not

109
00:09:12,459 --> 00:09:18,739
 background in this standard will allow you to delve a little more into that topic

110
00:09:18,740 --> 00:09:24,950
 we have some vulnerability analysis tools the most common today

111
00:09:24,950 --> 00:09:30,350
 in the market they are or whatsapp that a differential characteristic that it has is

112
00:09:30,350 --> 00:09:36,200
 which has a docker image that you can easily integrate into environments

113
00:09:36,200 --> 00:09:40,700
 Continuous integration and can be extended is a free tool

114
00:09:40,700 --> 00:09:45,709
 bert suite also has its community edition that can help us make a

115
00:09:45,709 --> 00:09:50,510
 more in-depth analysis maybe a little more manual in this edition but

116
00:09:50,510 --> 00:09:55,760
 it also has corporate versions that can be integrated into pipelines and then

117
00:09:55,760 --> 00:10:00,980
 if we want to avoid exposing credentials or secrets within the code of our

118
00:10:00,980 --> 00:10:08,709
 of our application we can rely on tools such as hash bold and corp

119
00:10:08,769 --> 00:10:13,899
 the center for internet security is a site of their sites and security dot org

120
00:10:13,899 --> 00:10:19,839
 that offers solutions products services and tools and has something

121
00:10:19,839 --> 00:10:24,730
 very interesting that they are documents for different components of the

122
00:10:24,730 --> 00:10:29,379
 architecture such as cloud providers web servers base servers

123
00:10:29,379 --> 00:10:35,170
 data virtualization software etc. is undoubtedly the main place

124
00:10:35,170 --> 00:10:41,110
 to visit when we want to start finding best practices to apply in

125
00:10:41,110 --> 00:10:44,739
 each of the components of our environment and it is something that I use

126
00:10:44,739 --> 00:10:48,069
 usually in my classes also to bring the best to the best

127
00:10:48,069 --> 00:10:53,910
 practices well habitually when we begin to

128
00:10:53,910 --> 00:10:59,459
 develop an application the number of containers is small this so

129
00:10:59,460 --> 00:11:04,140
 can usually be run on one team and is fairly easy to

130
00:11:04,140 --> 00:11:09,470
 administrate do care is a software that allows the

131
00:11:09,470 --> 00:11:14,720
 creation, deployment, and execution of container-based applications a

132
00:11:14,720 --> 00:11:18,830
 fundamental feature of docker is that it makes use of the system kernel

133
00:11:18,830 --> 00:11:23,510
 operational which makes your images light and have very good

134
00:11:23,510 --> 00:11:25,750
 performance

135
00:11:25,830 --> 00:11:31,020
 and I think it is important to understand the architecture of each of the

136
00:11:31,020 --> 00:11:36,079
 components that we are going to see to know where the attacks can come from

137
00:11:36,080 --> 00:11:41,010
 docker has its engine which is called docker engine which has three components

138
00:11:41,010 --> 00:11:46,800
 the main one is the server or doctor damon who is in charge of managing

139
00:11:46,800 --> 00:11:52,800
 the images the containers the network and the volumes of information then has

140
00:11:52,800 --> 00:11:55,469
 a pillai network used to interact with

141
00:11:55,470 --> 00:12:01,440
 this dimon and expose outward interfaces either for commands or for

142
00:12:01,440 --> 00:12:06,810
 scripts specifically and then you have the client or the dockers and the eye that is the

143
00:12:06,810 --> 00:12:13,469
 oker command that through the network is responsible for managing this dimon

144
00:12:13,470 --> 00:12:18,960
 from a higher level point of view the docker client can be

145
00:12:18,960 --> 00:12:23,070
 communicate if it is on the same host directly with the network shape and if there is

146
00:12:23,070 --> 00:12:29,250
 the if the host or doctor damon is on another machine uses unique sockets to

147
00:12:29,250 --> 00:12:34,640
 communicate and have some components like images that are templates

148
00:12:34,640 --> 00:12:39,569
 definition templates that will have a container where they define what

149
00:12:39,570 --> 00:12:44,360
 packages will have which user will be the one with whom it was going to run and so on

150
00:12:44,360 --> 00:12:49,250
 then the container becomes an instance of the image basically se

151
00:12:49,250 --> 00:12:53,690
 takes the image and the container is the execution of what is defined in that

152
00:12:53,690 --> 00:12:58,370
 image and on the other hand the other important component is the registry that

153
00:12:58,370 --> 00:13:02,959
 is where these images are stored to be downloaded and then

154
00:13:02,959 --> 00:13:07,489
 transformed into containers at the time of execution we have records both

155
00:13:07,490 --> 00:13:12,769
 public as private a public one is docker hub which is the link listed in

156
00:13:12,769 --> 00:13:15,550
 the bottom

157
00:13:16,050 --> 00:13:21,660
 and when we think about common docker attacks we can think about what they are

158
00:13:21,660 --> 00:13:26,610
 common attacks to an operating system for what are the containers in the

159
00:13:26,610 --> 00:13:32,610
 that an attacker seeks to gain access or execute remote code in the container

160
00:13:32,610 --> 00:13:38,430
 this can be finding faults in the application for example buffer overflow

161
00:13:38,430 --> 00:13:43,310
 Sícoli injection and once the attacker manages to enter this container

162
00:13:43,310 --> 00:13:48,510
 if the settings are bad, you will have the possibility to jump to others

163
00:13:48,510 --> 00:13:53,819
 containers or even access doctor damon to persist this attack

164
00:13:53,820 --> 00:14:00,810
 remembering that containers generally have a short useful life for

165
00:14:00,810 --> 00:14:05,219
 generally, in the best of cases, they know how to spend more time running and with

166
00:14:05,220 --> 00:14:10,820
 Regarding the registry, one can think of individual man-type attacks where

167
00:14:10,820 --> 00:14:14,940
 we try to download an image and we receive a different image than the one

168
00:14:14,940 --> 00:14:20,760
 we try to unload with which here it is important to incorporate the concept of

169
00:14:20,760 --> 00:14:26,670
 docker content after you go involves verifying the integrity of the

170
00:14:26,670 --> 00:14:32,880
 image through signatures or signatures and of course verify who is the one who

171
00:14:32,880 --> 00:14:38,170
 he posted that image fine when we go to the see site

172
00:14:38,170 --> 00:14:43,329
 security that we mentioned a while ago we find many versions of

173
00:14:43,329 --> 00:14:48,368
 benchmark for different versions of docker we are occasionally interested in delving

174
00:14:48,369 --> 00:14:53,350
 a little bit about the community edition, which is the free version that

175
00:14:53,350 --> 00:14:59,030
 is the one that is being used the most and among its best practices we have

176
00:14:59,030 --> 00:15:04,130
 all these host configuration refers specifically to partitions to

177
00:15:04,130 --> 00:15:08,750
 how the service is configured doctor damon configuration sets

178
00:15:08,750 --> 00:15:13,940
 some restrictions at the network level speak specifically about what they are name

179
00:15:13,940 --> 00:15:19,310
 space is that are allows to group groups of contestable

180
00:15:19,310 --> 00:15:23,319
 of container groups running a given application so that

181
00:15:23,320 --> 00:15:29,710
 other application pools cannot access these containers and vice versa

182
00:15:29,710 --> 00:15:36,590
 then doctor damon configuration files that allow us to set

183
00:15:36,590 --> 00:15:42,530
 some limitations at the network level weak images and files have

184
00:15:42,530 --> 00:15:47,390
 best practices for eg downloading images from repositories

185
00:15:47,390 --> 00:15:53,030
 correct do not use the root account when running images make sure that

186
00:15:53,030 --> 00:15:58,610
 the image has the minimum number of packages it needs to run the

187
00:15:58,610 --> 00:16:03,079
 application etc. container ranking refers to

188
00:16:03,079 --> 00:16:09,649
 secure linux configurations limit memory and cpu resources among others

189
00:16:09,649 --> 00:16:15,709
 things and security operations does little punctually in limiting the

190
00:16:15,709 --> 00:16:20,959
 number of containers we can run on a host in order to again

191
00:16:20,959 --> 00:16:26,809
 home your resources and touch your soul is an orchestration option of

192
00:16:26,809 --> 00:16:33,160
 containers in this case we are not going to see it because we are going to see an alternative

193
00:16:33,339 --> 00:16:39,080
 fortunately all these controls that in this document are tried

194
00:16:39,080 --> 00:16:43,630
 to [ __ ] manually are automated with some tools

195
00:16:43,630 --> 00:16:48,820
 docker itself provides this tool called docker bench for security

196
00:16:48,820 --> 00:16:55,520
 where we can see basically if it seems to him that the cabins are safe that

197
00:16:55,520 --> 00:17:02,199
 you are in the proper fine there they are updated well

198
00:17:02,980 --> 00:17:10,809
 in a few minutes two minutes or less but it was also understood the same ok perfect

199
00:17:11,400 --> 00:17:17,579
 well then here we have each of the controls that were listed in

200
00:17:17,579 --> 00:17:22,199
 this document are executed in an automated way

201
00:17:22,200 --> 00:17:28,560
 and this luckily allows us to go to a jason format that we can later later

202
00:17:28,560 --> 00:17:32,510
 analyze with other tools

203
00:17:33,700 --> 00:17:37,630
 and then we proceed to what is the static analysis of images already

204
00:17:37,630 --> 00:17:42,549
 we get through everything that is the docker setup stage itself now

205
00:17:42,549 --> 00:17:47,870
 let's see how are the images we are using within docker

206
00:17:47,870 --> 00:17:55,629
 in this case I did a small study taking a post on the docker blog

207
00:17:55,630 --> 00:18:02,120
 where were the most popular images of 2019 and the most searched build a

208
00:18:02,120 --> 00:18:07,030
 list of these images and I was running three tools

209
00:18:07,030 --> 00:18:13,379
 mainly dedicated to this purpose on the one hand we have the Quran Ying

210
00:18:13,379 --> 00:18:18,839
 we have to read and we have tribe as you can see in the graphs trevi could

211
00:18:18,839 --> 00:18:25,080
 get results where the other two failed to do so in some cases

212
00:18:25,080 --> 00:18:30,179
 with claire the results were quite similar in other types of images

213
00:18:30,180 --> 00:18:36,330
 and they made quite a difference with ancor engine this can be seen a little more

214
00:18:36,330 --> 00:18:42,610
 in detail in the other graphs analyze if I remember correctly about 15 images

215
00:18:42,610 --> 00:18:49,419
 and that led me to say well tribi is much easier to install than run

216
00:18:49,420 --> 00:18:53,830
 and it gets better result with which if I have to do static analysis of

217
00:18:53,830 --> 00:18:58,059
 images I stay with this tool additionally as in the other cases

218
00:18:58,059 --> 00:19:05,230
 allows us to export to jason to later be able to analyze with some tool

219
00:19:05,230 --> 00:19:10,360
 as was the case that I did for this research and something interesting that

220
00:19:10,360 --> 00:19:15,600
 It happened to my surprise I did an article with this analysis and it ended up being

221
00:19:15,600 --> 00:19:21,250
 shared by the official aqua security account which made me very happy like this

222
00:19:21,250 --> 00:19:25,929
 how interesting out there to do these analyzes and not stay the ones and not

223
00:19:25,929 --> 00:19:32,270
 to be able to share them well we have a good time we leave what is the

224
00:19:32,270 --> 00:19:38,180
 container layer and we move on to what is the host layer in the same place

225
00:19:38,180 --> 00:19:44,750
 you say security if for example we want to use ubuntu to run our host

226
00:19:44,750 --> 00:19:49,880
 our virtual machine in the cloud we have the possibility to first choose

227
00:19:49,880 --> 00:19:56,059
 between different different versions of ubuntu and then we have options for those

228
00:19:56,059 --> 00:20:00,170
 different cloud providers for the main ones for separate w south and for

229
00:20:00,170 --> 00:20:05,580
 google cloud this facilitates the launch of machines

230
00:20:05,580 --> 00:20:10,560
 virtual machines with this configuration already ready and by default and of course it has

231
00:20:10,560 --> 00:20:15,480
 an additional cost to what it would be to create our own virtual machine with

232
00:20:15,480 --> 00:20:19,920
 our own ubuntu distribution for all the maintenance you are

233
00:20:19,920 --> 00:20:24,649
 images leads we also have best practices for

234
00:20:24,649 --> 00:20:31,908
 different versions of ubuntu that if it is considered that they are still supported or that

235
00:20:31,909 --> 00:20:36,769
 some features of these best are still running

236
00:20:36,769 --> 00:20:41,779
 practices are the initial configuration where the file system is defined

237
00:20:41,779 --> 00:20:46,809
 updates using sudo to avoid indiscriminate use

238
00:20:46,809 --> 00:20:53,870
 from the account rut, some startup configurations and others at the service level are

239
00:20:53,870 --> 00:20:58,399
 look for critical services such as time synchronization

240
00:20:58,399 --> 00:21:03,649
 are running and those common services that are not required to be

241
00:21:03,649 --> 00:21:09,889
 disable at the network configuration level we look for the host files to

242
00:21:09,889 --> 00:21:15,740
 dina children side and who are responsible for allowing and rejecting access are

243
00:21:15,740 --> 00:21:20,360
 configured that the firewall is configured and that those services or

244
00:21:20,360 --> 00:21:26,000
 those network protocols unknown sites enable at the login level and

245
00:21:26,000 --> 00:21:30,600
 audit that login is enabled and protected that retention

246
00:21:30,600 --> 00:21:35,539
 data is appropriate at the level of access authentication and

247
00:21:35,539 --> 00:21:39,860
 authorization we verify for example the ssh configurations of users and

248
00:21:39,860 --> 00:21:44,719
 groups and task scheduling with chrome and maintenance level

249
00:21:44,720 --> 00:21:49,399
 systems we verify both files that have execution privileges

250
00:21:49,399 --> 00:21:54,199
 excessive such as critical file settings in management

251
00:21:54,200 --> 00:22:02,520
 of users as they are for w and shadows we have a tool that although not

252
00:22:02,520 --> 00:22:08,220
 is specific or does not refer specifically to the 6 benchmark it serves us

253
00:22:08,220 --> 00:22:13,170
 to audit and is very aligned with what is the benchmark called lines

254
00:22:13,170 --> 00:22:18,050
 of this tool gives us very good results on the screen

255
00:22:18,050 --> 00:22:22,889
 unfortunately as output it produces a file that which at the time of

256
00:22:22,890 --> 00:22:29,040
 analyzing it is quite complex and not very useful but luckily there is someone who

257
00:22:29,040 --> 00:22:35,159
 developed a tool that converts that file to either jason format

258
00:22:35,160 --> 00:22:42,190
 or html to be analyzed well so far we have talked about a

259
00:22:42,190 --> 00:22:47,110
 small number of containers that were running maybe on a single host

260
00:22:47,110 --> 00:22:53,020
 and that they were easily manageable what happens when we scale this to a level

261
00:22:53,020 --> 00:22:58,389
 business when the containers become hundreds or thousands it becomes very

262
00:22:58,390 --> 00:23:02,799
 difficult the orchestration becomes very difficult for the administration then

263
00:23:02,799 --> 00:23:07,929
 we must go to an orchestration tool the tool of

264
00:23:07,929 --> 00:23:13,809
 orchestration par excellence today is gubern & es that allows you to automate

265
00:23:13,809 --> 00:23:17,230
 implementation of scaling and management of these applications

266
00:23:17,230 --> 00:23:23,200
 based on containers that vernet uses logical units that are

267
00:23:23,200 --> 00:23:29,140
 they call posts where they group one or more containers and this allows you for a

268
00:23:29,140 --> 00:23:35,070
 side standardize the way of deployment and make it simple

269
00:23:35,070 --> 00:23:40,230
 As we did with do care, it is convenient that we see a little of the

270
00:23:40,230 --> 00:23:44,840
 cv vernet architecture is to understand where the

271
00:23:44,840 --> 00:23:51,480
 attacks we have two major components to say in some way on the one hand

272
00:23:51,480 --> 00:23:55,289
 we have control plane that what is on the left and on the other side

273
00:23:55,289 --> 00:24:01,320
 we nobles have that what is in the bottom right, the 'notes are the ones that

274
00:24:01,320 --> 00:24:07,830
 worker none are those that actually execute the workload have two

275
00:24:07,830 --> 00:24:12,330
 main components the proxy club that is mainly used for

276
00:24:12,330 --> 00:24:17,039
 establish network connections with the master and the led club which is the one that makes

277
00:24:17,039 --> 00:24:22,830
 monitoring for the node itself and for the spots or for the containers that

278
00:24:22,830 --> 00:24:27,539
 they are running in the pods if they have any problem you can destroy them

279
00:24:27,539 --> 00:24:33,570
 and re-initialize them on the other hand in the control plane

280
00:24:33,570 --> 00:24:39,879
 we have the club server which is the one that communicates with the workouts

281
00:24:39,880 --> 00:24:45,760
 and what does the handling of posts do together with the one that looks for the blend and the cid and

282
00:24:45,760 --> 00:24:50,560
 which is a key-value base that basically has the entire state of the

283
00:24:50,560 --> 00:24:54,740
 cluster then attacks usually

284
00:24:54,740 --> 00:25:00,990
 rulers are given due to misconfiguration issues, for example if the

285
00:25:00,990 --> 00:25:05,880
 city ​​has no authentication and has write permissions can allow you

286
00:25:05,880 --> 00:25:11,790
 the attacker modify the complete state of our cluster and be able to access what

287
00:25:11,790 --> 00:25:18,540
 that you want on the other hand if we will access a container inside a pot and the token

288
00:25:18,540 --> 00:25:24,659
 that is exposed within that contain has no controls has no roles

289
00:25:24,660 --> 00:25:30,150
 assigned correctly in the ipad server can allow us to jump to others

290
00:25:30,150 --> 00:25:34,410
 posts or control the piai server itself and have absolute control of the

291
00:25:34,410 --> 00:25:38,940
 cluster also on site 10 and security as well

292
00:25:38,940 --> 00:25:42,960
 we found benchmark for different versions of cv verne test and

293
00:25:42,960 --> 00:25:49,980
 additionally we can find for google it is important to clarify what to play

294
00:25:49,980 --> 00:25:54,300
 mind was initially developed by google and google is the one that contributes the most to

295
00:25:54,300 --> 00:26:00,060
 its development and has many facilities in google cloud for what it is to lift

296
00:26:00,060 --> 00:26:04,470
 a cluster and another interesting thing to mention is that the controls that

297
00:26:04,470 --> 00:26:09,630
 We mention for the master naut in the case of cloud providers so

298
00:26:09,630 --> 00:26:12,900
 Generally, it is managed by them, so there is not much that we are going to

299
00:26:12,900 --> 00:26:19,860
 be able to control or modify in that case the best practices of cubanet are

300
00:26:19,860 --> 00:26:23,668
 basically towards the components of the control plane as we configure the

301
00:26:23,669 --> 00:26:29,940
 nou master clean and server the controller and the skyler for the cid and

302
00:26:29,940 --> 00:26:34,320
 specifically, it is intended that it has authentication and that it uses certificates

303
00:26:34,320 --> 00:26:39,750
 that we just said that not that public and that somehow requires that no

304
00:26:39,750 --> 00:26:45,840
 It remains that it does not allow anonymous bass to obtain information the configuration of the

305
00:26:45,840 --> 00:26:50,610
 control plane is related to role file configurations and

306
00:26:50,610 --> 00:26:55,500
 audit mainly in the worker 'notes we also verify

307
00:26:55,500 --> 00:26:59,520
 node-specific configuration files and the club is not exposed

308
00:26:59,520 --> 00:27:05,158
 led who was the one who handled the posts and at the political level we have a wide

309
00:27:05,159 --> 00:27:09,570
 varied variety of policies we have airbag which is access control

310
00:27:09,570 --> 00:27:15,480
 based on roles that governors use we have service accounts we have post

311
00:27:15,480 --> 00:27:20,460
 security policies that allow restricting the execution of given pods

312
00:27:20,460 --> 00:27:23,730
 certain conditions the same may apply

313
00:27:23,730 --> 00:27:27,710
 at the network level with the network policies and we also have what is

314
00:27:27,710 --> 00:27:31,580
 secrets management

315
00:27:31,750 --> 00:27:36,550
 luckily we also have an interesting tool developed by

316
00:27:36,550 --> 00:27:41,980
 acro security that runs this benchmark for us both on master none

317
00:27:41,980 --> 00:27:46,780
 as in walker nou as I just said this as long as we are in a

318
00:27:46,780 --> 00:27:52,270
 environment that we fully control in the event that

319
00:27:52,270 --> 00:27:55,870
 we are running this in the cloud we could only run this analysis on the

320
00:27:55,870 --> 00:27:59,709
 worker now to get these results and this

321
00:27:59,710 --> 00:28:05,149
 also fortunately can be exported to jason to be analyzed

322
00:28:05,149 --> 00:28:10,399
 then we have tools like keep hunter that helps us see those

323
00:28:10,399 --> 00:28:14,330
 services that are exposed that we just mentioned that we are interested in

324
00:28:14,330 --> 00:28:18,949
 particularly the led club see if it is exposed if we can get information

325
00:28:18,950 --> 00:28:24,290
 sensitive to initially access a container

326
00:28:24,290 --> 00:28:29,000
 can also be contributed to jason as most tools are

327
00:28:29,000 --> 00:28:32,600
 Specifically that we are going to see, it cannot be exported but it is very useful.

328
00:28:32,600 --> 00:28:37,699
 tool that allows you to work on a fairly complex issue that is the

329
00:28:37,700 --> 00:28:42,140
 role management allows us to identify those who have

330
00:28:42,140 --> 00:28:48,710
 excessive privileges and adjusting according to the needs we have

331
00:28:48,710 --> 00:28:52,580
 then we have some tools that go beyond what is configuration

332
00:28:52,580 --> 00:28:57,320
 and that they already work at the runtime level, falco is one of them

333
00:28:57,320 --> 00:29:03,770
 allows to write policies to djamel files and these policies are controlled in

334
00:29:03,770 --> 00:29:08,020
 runtime if we see that there is any violation of the policy we can

335
00:29:08,020 --> 00:29:13,020
 take some actions for example destroy the pod

336
00:29:13,020 --> 00:29:18,000
 and there are other tools that allow us to thoroughly monitor

337
00:29:18,000 --> 00:29:23,940
 comprehensively what are system calls and other events

338
00:29:23,940 --> 00:29:30,299
 Well, up to now we have worked a lot on what is in better configurations

339
00:29:30,299 --> 00:29:35,460
 practices we take all the necessary measures to take care of our cluster

340
00:29:35,460 --> 00:29:40,019
 but sometimes this is not enough sometimes there may still be issues that

341
00:29:40,019 --> 00:29:44,730
 can make our containers end down

342
00:29:44,730 --> 00:29:49,860
 What can we do so that this plan does not fail? Well, we can go a little more

343
00:29:49,860 --> 00:29:56,340
 there on the official microsoft site there is a post that proposes a matrix of

344
00:29:56,340 --> 00:30:04,559
 attack for q vernet is based on maitre's attack matrix where he proposes

345
00:30:04,559 --> 00:30:10,060
 different techniques and tactics so that we can discover

346
00:30:10,060 --> 00:30:14,679
 and let's have a better view on the surface of attack vectors

347
00:30:14,680 --> 00:30:20,050
 that may have to see net is on the other hand what is the

348
00:30:20,050 --> 00:30:24,850
 management of network connections at the governing level secure connections

349
00:30:24,850 --> 00:30:31,719
 between potts is quite a complex issue and that is where the service comes to me

350
00:30:31,720 --> 00:30:36,610
 rescue basically the month service is an infrastructure layer that is

351
00:30:36,610 --> 00:30:40,479
 dedicates to making secure communications fast and reliable and gives us

352
00:30:40,480 --> 00:30:46,390
 understand us about such a complex task and the site is a project

353
00:30:46,390 --> 00:30:51,250
 opensource that makes an implementation of a service month uses the concept of

354
00:30:51,250 --> 00:30:56,800
 site car that basically within the pod itself runs a container that acts

355
00:30:56,800 --> 00:31:01,840
 as proxy the tool that makes the proxy is called dem boy and

356
00:31:01,840 --> 00:31:06,340
 This is administered from a control tower or control plane and is what

357
00:31:06,340 --> 00:31:12,570
 constitutes the service month then we have another interesting concept

358
00:31:12,570 --> 00:31:18,658
 what is open policy agent is an open source policy engine that

359
00:31:18,659 --> 00:31:23,999
 basically seeks to take off what is the definition of policies of each of

360
00:31:23,999 --> 00:31:29,009
 the components of our infrastructure is developed with a

361
00:31:29,009 --> 00:31:33,090
 declarative language called irrigation and can be applied to different

362
00:31:33,090 --> 00:31:37,320
 environment components such as microservices gubern etc after

363
00:31:37,320 --> 00:31:43,259
 ipiales even pipelines on their official site we have this image that we

364
00:31:43,259 --> 00:31:47,879
 can give an overview of each of the components where obvious and can

365
00:31:47,879 --> 00:31:55,168
 apply and the link you see at the bottom is a place where it is a play

366
00:31:55,169 --> 00:31:59,429
 ground where we can go playing with the different policies to understand how

367
00:31:59,429 --> 00:32:02,789
 works and integrates it with each of the

368
00:32:02,789 --> 00:32:06,529
 tools from our environment

369
00:32:06,559 --> 00:32:11,418
 We move on to the other layer, which is the infrastructure that supports our

370
00:32:11,419 --> 00:32:17,620
 cluster level cloud best practices each of the major

371
00:32:17,620 --> 00:32:24,199
 providers has its benchmark let's see let's compare details of some

372
00:32:24,200 --> 00:32:30,409
 of them in principle the one that more complete proposes its initial benchmark

373
00:32:30,409 --> 00:32:34,999
 asur covers not only the services in common that it has with the rest of the

374
00:32:34,999 --> 00:32:39,379
 cloud providers but is more specific in special considerations

375
00:32:39,379 --> 00:32:45,570
 security in platform as a service and for example if we see the google

376
00:32:45,570 --> 00:32:51,750
 cloud has what identifies the three plus some specific services of what

377
00:32:51,750 --> 00:32:59,430
 which is management companies and databases on ws although it seems that it is medium scarce

378
00:32:59,430 --> 00:33:06,270
 the initial benchmark has a secondary benchmark in which it works with

379
00:33:06,270 --> 00:33:11,660
 three-layer applications and goes deeper into what they are

380
00:33:11,660 --> 00:33:16,260
 doubles specific resource settings for each of

381
00:33:16,260 --> 00:33:20,550
 these tools for each of these of these tested ready some

382
00:33:20,550 --> 00:33:24,840
 tools are at the bottom so you can see later what

383
00:33:24,840 --> 00:33:29,990
 automations can be done on that and I would like to tell you a bit what

384
00:33:29,990 --> 00:33:34,380
 controls apply mainly what they have in common on

385
00:33:34,380 --> 00:33:40,110
 everything that is identity and access management talks mainly about

386
00:33:40,110 --> 00:33:44,310
 define the roles of the users who will use our cloud

387
00:33:44,310 --> 00:33:50,280
 to assign these users to groups to do a proper separation of duties

388
00:33:50,280 --> 00:33:56,700
 minimum privileges we have password policies we have the requirement of

389
00:33:56,700 --> 00:34:02,280
 use of multi-factor authentication that today many accounts are attacked

390
00:34:02,280 --> 00:34:07,560
 precisely because of weak passwords and the mf greatly reduces this area of

391
00:34:07,560 --> 00:34:12,810
 attack then we have at the networking level some differences between the cloud

392
00:34:12,810 --> 00:34:18,540
 providers for example asur uses a firewall concept that is unique in its

393
00:34:18,540 --> 00:34:25,259
 environment that is, it applies both to virtual machines and at the subnet level instead

394
00:34:25,260 --> 00:34:30,989
 aw is handled by one side of what are security groups to protect a group

395
00:34:30,989 --> 00:34:36,589
 of instances for example and the networks jesse els that are applied at the subnet level

396
00:34:36,590 --> 00:34:43,280
 then at the loving level and the different cloisters have different tools

397
00:34:43,369 --> 00:34:47,599
 give the possibility of sending blogs of applications blogs of the same

398
00:34:47,599 --> 00:34:53,029
 resources to be able to define alerts and even events that can with some

399
00:34:53,029 --> 00:34:58,910
 server tools will help you update configurations and lock

400
00:34:58,910 --> 00:35:04,190
 some attacks and also have action monitoring tools

401
00:35:04,190 --> 00:35:09,799
 specific about the cloud on the account for example making sure that

402
00:35:09,799 --> 00:35:14,538
 someone is not setting up an instance in a region that we do not want

403
00:35:14,539 --> 00:35:19,009
 that they are doing it or that they are not mining bitcoins in a machine

404
00:35:19,009 --> 00:35:25,799
 virtual etc. then for what is a premium

405
00:35:25,799 --> 00:35:31,619
 word is a provider that has the largest market share in what is servers

406
00:35:31,619 --> 00:35:37,440
 that are handled internally in the companies this is not exactly my area

407
00:35:37,440 --> 00:35:41,970
 of expertise but I did want to share with you some groups of controls that are

408
00:35:41,970 --> 00:35:47,939
 about this type of infrastructure that basically goes into how it is installed in

409
00:35:47,940 --> 00:35:52,260
 how virtual machines are managed from the console how to

410
00:35:52,260 --> 00:35:56,599
 configures each of the virtual machines how the

411
00:35:56,599 --> 00:36:02,099
 storage how loving etcetera is configured

412
00:36:02,099 --> 00:36:08,009
 well so far we have seen many many practical concepts

413
00:36:08,009 --> 00:36:14,640
 tools exits jason but what about this as like

414
00:36:14,640 --> 00:36:19,769
 we organize it how we give value to a company to a client or a manager to

415
00:36:19,769 --> 00:36:23,519
 tell him look we are doing this that seeing it this way it can be

416
00:36:23,519 --> 00:36:29,058
 really useful for making decisions good mayors

417
00:36:30,789 --> 00:36:33,479
 if it can be

418
00:36:36,590 --> 00:36:41,310
 they are seeing well there

419
00:36:43,170 --> 00:36:45,829
 cs

420
00:36:46,240 --> 00:36:52,569
 well then an alternative that I propose to solve this problem

421
00:36:52,570 --> 00:36:57,490
 is to centralize the information there is a tool that is free called

422
00:36:57,490 --> 00:37:02,500
 apache super being a smart business tool that works with

423
00:37:02,500 --> 00:37:07,060
 different relational database providers integrates with some

424
00:37:07,060 --> 00:37:11,259
 authentication providers like open haití and eldad and has a lot of power

425
00:37:11,260 --> 00:37:16,619
 for what is development of graphics and dashboards here you can see a screenshot

426
00:37:16,619 --> 00:37:24,190
 which shows a little the potential of this tool and in the case of

427
00:37:24,190 --> 00:37:28,570
 work it what I did in time was with some payton scripts to take

428
00:37:28,570 --> 00:37:36,070
 all these outputs from jason and feed his database which is a

429
00:37:36,070 --> 00:37:41,410
 sql dessert if you allow me, I'll take a second out of the presentation and

430
00:37:41,410 --> 00:37:48,770
 I show a little about this tool mainly what we most like

431
00:37:48,770 --> 00:37:56,600
 It would be interesting to see is this part of source is that it is where we are pulling each one

432
00:37:56,600 --> 00:38:00,319
 of the tables we can create our own tables or import from

433
00:38:00,320 --> 00:38:04,559
 other sources like files and esb and for example

434
00:38:04,559 --> 00:38:08,810
 in these tables we can in addition to what is coming

435
00:38:08,810 --> 00:38:13,460
 by default of the database make some definitions of how we want

436
00:38:13,460 --> 00:38:20,840
 that those fields are visualized well here punctually opening a table I can

437
00:38:20,840 --> 00:38:29,110
 for example make a graph by selecting

438
00:38:29,110 --> 00:38:32,520
 some metrics

439
00:38:32,829 --> 00:38:36,509
 node type for example

440
00:38:37,640 --> 00:38:45,480
 and I very quickly put together a graph, these graphs are recorded and then at the

441
00:38:45,480 --> 00:38:48,960
 time to record they can be sent to a damage and I want to show you

442
00:38:48,960 --> 00:38:54,780
 directly how is a dashboard armed and working in this case

443
00:38:54,780 --> 00:39:00,810
 we have the information of docker bench with each of the details of the

444
00:39:00,810 --> 00:39:04,500
 controls down here I am going to expand a little so that you can see it well by

445
00:39:04,500 --> 00:39:09,609
 What do I understand that it does not look good there

446
00:39:09,609 --> 00:39:14,499
 then we have what is the status of each of the controls and below the

447
00:39:14,499 --> 00:39:22,049
 detail of each of those controls then for what is static analysis

448
00:39:22,049 --> 00:39:28,020
 if you remember we ran a lot of tools on different

449
00:39:28,020 --> 00:39:32,920
 images I'm going to refresh it because when I zoomed in

450
00:39:32,920 --> 00:39:36,390
 I lost the images here

451
00:39:43,010 --> 00:39:48,800
 Well then here we have a graph in which we have the detail of the

452
00:39:48,800 --> 00:39:53,500
 vulnerabilities for each of the images we analyze

453
00:39:55,210 --> 00:39:59,970
 On the one hand we have a severity filter for example if you wanted to see

454
00:39:59,970 --> 00:40:05,970
 only the high severities of each of these images cool

455
00:40:05,970 --> 00:40:09,790
 automatically graph and detail below

456
00:40:09,790 --> 00:40:17,230
 and the same if you wanted to see something specific of an image that is filtered

457
00:40:17,230 --> 00:40:21,700
 automatically and in this way very easily we can play with that

458
00:40:21,700 --> 00:40:27,399
 information and finally I have this bng club which is the recurring ones if you remember

459
00:40:27,400 --> 00:40:33,820
 we have the master not and the worker nou the same we can filter by node type

460
00:40:33,820 --> 00:40:38,860
 to see below how the controls turned out and by type of severity or how

461
00:40:38,860 --> 00:40:46,440
 they gave us each of those controls we go back a little bit to the presentation

462
00:40:53,020 --> 00:40:58,840
 in these are the graphs that we were seeing and to summarize I want to leave you

463
00:40:58,840 --> 00:41:05,160
 some key ideas first important that when we have an architecture

464
00:41:05,160 --> 00:41:12,190
 complex we can define layers to be able together with the concept to say other

465
00:41:12,190 --> 00:41:17,980
 and make a defense-in-depth model where we distrust how

466
00:41:17,980 --> 00:41:22,330
 each of those layers is configured and we can not only rely on better

467
00:41:22,330 --> 00:41:26,290
 practices but out there to evaluate these configurations with some tools

468
00:41:26,290 --> 00:41:30,640
 external we can use sites like 620 to

469
00:41:30,640 --> 00:41:35,859
 take as a basis for these best practices we can take advantage of

470
00:41:35,860 --> 00:41:41,110
 these free tools to take care of the budget there are many tools that

471
00:41:41,110 --> 00:41:45,340
 applying the executing the already give us a security posture quite

472
00:41:45,340 --> 00:41:50,800
 complete without investing too much money and finally the fact of centralizing the

473
00:41:50,800 --> 00:41:56,230
 information can first provide you with the information and on the other hand help us to

474
00:41:56,230 --> 00:41:59,490
 convince our client or our manager so that he can

475
00:41:59,490 --> 00:42:04,979
 and finish making the appropriate decisions to take action on each

476
00:42:04,980 --> 00:42:09,690
 one of these findings that we made about our environment so good up to here

477
00:42:09,690 --> 00:42:14,369
 We arrived with the presentation, thank you very much for your attention and it was

478
00:42:14,369 --> 00:42:19,920
 available for questions thank you very much to the truth that it was

479
00:42:19,920 --> 00:42:25,380
 very good especially this last part of the centralization of information i

480
00:42:25,380 --> 00:42:31,500
 It seemed very interesting so let's move on to the questions section before

481
00:42:31,500 --> 00:42:36,810
 of that while they are sending questions I wanted to remind you that until 15

482
00:42:36,810 --> 00:42:43,470
 hours there is time to register in the draw in the drive and also at

483
00:42:43,470 --> 00:42:50,609
 end the echo the echo there is an audiovisual surprise right there in tweets stay

484
00:42:50,610 --> 00:42:53,940
 because it's going to be very good, that is, it's really going to be very good because

485
00:42:53,940 --> 00:42:58,860
 there are a lot of expectations about that so stay cool let's move on with

486
00:42:58,860 --> 00:43:04,580
 Let's see the questions we have here, no houses

487
00:43:04,580 --> 00:43:10,360
 between aw and google cloud which one are you commenting on

488
00:43:10,850 --> 00:43:16,100
 what good question good depends on the business needs they have a

489
00:43:16,100 --> 00:43:21,140
 An important item to consider as I was saying a while ago is that Google is the

490
00:43:21,140 --> 00:43:25,549
 cuber net developer is with which all that is to play minds is more

491
00:43:25,550 --> 00:43:30,320
 easy to manage from my point of view on google cloud and maybe

492
00:43:30,320 --> 00:43:35,210
 find that google cloud is simpler when you see twice the

493
00:43:35,210 --> 00:43:40,460
 number of services is overwhelming google cloud initially has less

494
00:43:40,460 --> 00:43:44,870
 services and a little easier to administer but it depends a lot on the

495
00:43:44,870 --> 00:43:48,259
 business needs double times also has very good services that

496
00:43:48,260 --> 00:43:54,440
 They cover other use cases and depends on what the specific needs are

497
00:43:54,440 --> 00:44:01,280
 Well another question can I know if what was installed uses an architecture of

498
00:44:01,280 --> 00:44:05,660
 container I calculate that this is an attack perspective seems to me what

499
00:44:05,660 --> 00:44:10,799
 are asking if what was installed let's assume on a host

500
00:44:10,800 --> 00:44:15,270
 a good container architecture as we mentioned docker there are some

501
00:44:15,270 --> 00:44:21,030
 other technologies, what should be done is basically go to the process level

502
00:44:21,030 --> 00:44:25,470
 and see if we identify any process that indicates that there is a technology of

503
00:44:25,470 --> 00:44:32,890
 containers running on that team well well well another question already

504
00:44:32,890 --> 00:44:36,940
 It is advisable to have two car containers deployed for applications

505
00:44:36,940 --> 00:44:44,110
 production or it would be better to use that vernet is good that depends a lot on the scale

506
00:44:44,110 --> 00:44:50,920
 as I was just saying, there are some organizations that run with a locker

507
00:44:50,920 --> 00:44:54,820
 compost that basically lifts two or three bins on a host and voila

508
00:44:54,820 --> 00:45:00,550
 then there are others that using car swan which is an intermediate is easy to

509
00:45:00,550 --> 00:45:06,880
 manage and is very attached to ado care and on a larger scale it does seem to me that it is

510
00:45:06,880 --> 00:45:12,880
 very important to think about that vernet is well well well another question we have

511
00:45:12,880 --> 00:45:17,290
 around here it is convenient to have an environment in

512
00:45:17,290 --> 00:45:24,690
 personal cloud is better to have it playmates or put it locally

513
00:45:25,770 --> 00:45:31,560
 good if it is personal it depends a lot if you have infrastructure to have something

514
00:45:31,560 --> 00:45:36,980
 local out there is better because it is not exposed to the world if you have it in the cloud

515
00:45:36,980 --> 00:45:41,490
 minimally you have to use a benchmark to ensure your account put

516
00:45:41,490 --> 00:45:47,419
 multifactor or make sure you don't expose credentials in your code a problem

517
00:45:47,420 --> 00:45:52,050
 common that you see out there is that there are people who write code and share it git

518
00:45:52,050 --> 00:45:56,750
 javi has the access keys twice and that can kill you

519
00:45:56,750 --> 00:46:00,660
 economically because they can run machines to mine bitcoins at

520
00:46:00,660 --> 00:46:05,250
 lifting hundreds of machines and then creating that account is priceless so

521
00:46:05,250 --> 00:46:10,470
 It also depends on the use case and how willing you are to apply controls

522
00:46:10,470 --> 00:46:15,470
 security for example if you are going to take something to the cloud

523
00:46:15,530 --> 00:46:21,510
 well another question which is how is the cycle

524
00:46:21,510 --> 00:46:29,550
 security development applies having des eaux to s & p rd

525
00:46:29,550 --> 00:46:36,750
 I do not know what are acronyms the truth maybe not acquisition of certain things solar

526
00:46:36,750 --> 00:46:42,770
 What did I mention but good to give shape to the question a bit

527
00:46:42,770 --> 00:46:47,850
 usually what is done is the tools of those that is analysis

528
00:46:47,850 --> 00:46:52,890
 Static software composition analysis ideally should be the

529
00:46:52,890 --> 00:46:57,440
 development of your life in case that does not happen when

530
00:46:57,440 --> 00:47:02,670
 send code to a repository and trigger actions that do

531
00:47:02,670 --> 00:47:07,620
 these checks and perhaps run some automated tool also from

532
00:47:07,620 --> 00:47:13,740
 dynamic analysis of applications that allows at least to identify the lou

533
00:47:13,740 --> 00:47:19,560
 hanging fruit which is called the most palpable risks by an attacker and then if

534
00:47:19,560 --> 00:47:24,420
 do a deeper analysis now with a pen test team maybe a tool

535
00:47:24,420 --> 00:47:28,230
 do an analysis and a little more detailed

536
00:47:28,230 --> 00:47:32,850
 ask a question that happened to me is this useful for cloud and on platforms

537
00:47:32,850 --> 00:47:35,240
 if you

538
00:47:35,620 --> 00:47:40,660
 to the point of infrastructure and there is the difference in the last

539
00:47:40,660 --> 00:47:45,879
 point that was the infrastructure layer between claudio premises in a prize perhaps

540
00:47:45,880 --> 00:47:51,040
 have something like good word then everything that is above that layer serves them

541
00:47:51,040 --> 00:47:54,810
 ruler can run perfectly on what is a prize

542
00:47:54,810 --> 00:48:00,410
 well how vulnerable are the

543
00:48:00,410 --> 00:48:03,399
 contents with respect to others require textures

544
00:48:03,400 --> 00:48:07,779
 It basically depends on the container configuration and it is one of the issues that

545
00:48:07,779 --> 00:48:12,229
 we just mentioned out there and you are running a container as root

546
00:48:12,229 --> 00:48:17,328
 and someone manages to access that contain because your application had many faults

547
00:48:17,329 --> 00:48:23,359
 Security is likely to be able to escalate access privileges by touching

548
00:48:23,359 --> 00:48:27,140
 tell us or agree that the governing lands and others then the security

549
00:48:27,140 --> 00:48:31,910
 It is given in principle from the image from the template of how

550
00:48:31,910 --> 00:48:37,129
 we configure that image of the application that runs that image and then if I'll go

551
00:48:37,130 --> 00:48:41,829
 more in detail to the settings at the docker level and at the governing level is

552
00:48:41,829 --> 00:48:47,140
 perfect well we have one more there are several more appears in your experience

553
00:48:47,140 --> 00:48:53,890
 which do you consider more secure voice than the cipher to implement rp a

554
00:48:54,130 --> 00:48:59,160
 rp let's see what i guess

555
00:49:00,180 --> 00:49:05,910
 no no I don't know what he refers to that tells us that we are going to wait for him so that

556
00:49:05,910 --> 00:49:09,710
 tell us we have another

557
00:49:09,720 --> 00:49:14,180
 What do I do to you? Let's say that the doubt arose

558
00:49:14,180 --> 00:49:19,819
 when you download, for example, an educate image from the dow, I think you have

559
00:49:19,820 --> 00:49:26,450
 happened that you have found that I had more security and that image

560
00:49:26,450 --> 00:49:30,140
 it was deployed for example in a lot of places it already had containers

561
00:49:30,140 --> 00:49:35,990
 And how did you do to solve it? Let's say well, well, yes, it happens and it happens

562
00:49:35,990 --> 00:49:41,209
 a lot for example when when we download some knut images

563
00:49:41,210 --> 00:49:46,280
 to run a back in those that were based on debian if it ran to some

564
00:49:46,280 --> 00:49:50,140
 tool like tribe and found a lot of vulnerabilities in that image

565
00:49:50,140 --> 00:49:55,730
 and then you had some alternative like the same image again based on 'the

566
00:49:55,730 --> 00:49:59,960
 paint and that perhaps did not have vulnerabilities so it is important

567
00:49:59,960 --> 00:50:07,310
 that when choosing which image to use as the basis for our application to be able to

568
00:50:07,310 --> 00:50:10,640
 compare different versions that maybe we can run the same and without

569
00:50:10,640 --> 00:50:16,420
 vulnerabilities well well well here they are not saying that rapping would be

570
00:50:16,420 --> 00:50:22,450
 process automation can be ok yes

571
00:50:22,450 --> 00:50:27,098
 well I do not have the knowledge of the acronym but well basically all this

572
00:50:27,099 --> 00:50:32,170
 that we describe can be integrated into a continuous integration pipeline there

573
00:50:32,170 --> 00:50:36,250
 lots of tools this island sucks jenkins

574
00:50:36,250 --> 00:50:41,650
 they cover different stages islands out there is more complete if that is the question

575
00:50:41,650 --> 00:50:45,160
 I think the answer is out there and we will try to integrate with those

576
00:50:45,160 --> 00:50:50,509
 tools and include controls and automate on those tools

577
00:50:50,510 --> 00:50:56,450
 fine fine yes yes I think that points to what automated security tests

578
00:50:56,450 --> 00:50:59,890
 you run in your container architecture

579
00:50:59,890 --> 00:51:04,089
 Well, all these tools that we were looking at, we started with the

580
00:51:04,089 --> 00:51:08,769
 doctor bench in him then we go to what is vernet is the static analysis

581
00:51:08,769 --> 00:51:17,019
 of club ruling images in the hunter club where they search for the

582
00:51:17,019 --> 00:51:20,859
 issue of controlling the roles and well after the host configurations

583
00:51:20,859 --> 00:51:24,490
 It is also important the issue is not less, for example in the machines

584
00:51:24,490 --> 00:51:28,538
 virtual ones that run in amazon a provider club to see that the ones that are not

585
00:51:28,539 --> 00:51:34,750
 exposed credentials in environment variables that when entering that host

586
00:51:34,750 --> 00:51:38,230
 we have full access to the cloud practically through the queue and

587
00:51:38,230 --> 00:51:42,410
 we can take full control of an account from

588
00:51:42,410 --> 00:51:48,200
 w is then a bit of everything, let's say there are many tools and even for

589
00:51:48,200 --> 00:51:52,210
 The cloud benchmarks we saw that there are also some so I recommend that you

590
00:51:52,210 --> 00:51:56,540
 run as many as you can and take out your doubts to see if there are false

591
00:51:56,540 --> 00:52:01,370
 positive or not and if they can do manual tests of things that are not

592
00:52:01,370 --> 00:52:07,790
 in those tools they are also asked another question

593
00:52:07,790 --> 00:52:12,290
 you can have double environments and help in the same application coexist

594
00:52:12,290 --> 00:52:15,400
 controls of the two platforms

595
00:52:15,470 --> 00:52:20,598
 The question is rare but you can have a cluster of cuber minds in asur

596
00:52:20,599 --> 00:52:27,710
 and a recurring cluster in the WS and that there is external communication through

597
00:52:27,710 --> 00:52:33,920
 Those applications that you can and well later within each account

598
00:52:33,920 --> 00:52:39,500
 you can have my pool isolated that in turn communicate internally and not

599
00:52:39,500 --> 00:52:44,000
 go abroad there are many options to make those configurations

600
00:52:44,000 --> 00:52:49,650
 it would be necessary to see which is the one that best suits the use case

601
00:52:49,650 --> 00:52:54,930
 good good good in your experience because you think there are more attacks in the registry

602
00:52:54,930 --> 00:52:57,440
 from docker

603
00:52:58,130 --> 00:53:03,559
 and good because touching hub is a place where images are downloaded

604
00:53:03,559 --> 00:53:08,900
 there are millions of image downloads continuously and we can find people

605
00:53:08,900 --> 00:53:13,700
 that you even put malicious images in there so that's why it's

606
00:53:13,700 --> 00:53:18,890
 important is the concept of finger that you concentrate that when one develops

607
00:53:18,890 --> 00:53:23,569
 of images for your company try to sign the and when at the time of

608
00:53:23,569 --> 00:53:27,529
 download them also check that signature to validate the integrity of

609
00:53:27,529 --> 00:53:32,240
 those images make sure that we are always using the image that actually

610
00:53:32,240 --> 00:53:38,910
 we intend to use well here a user tells us

611
00:53:38,910 --> 00:53:46,290
 brawn of ex management regarding the management of secrets if in the end the instance of the

612
00:53:46,290 --> 00:53:51,470
 doctor can see the secrets are safe to use tools like bowls

613
00:53:51,900 --> 00:53:56,460
 the tool can take them at execution time which is not the same as

614
00:53:56,460 --> 00:53:59,970
 are exposed as environment variables then if it is safe to use

615
00:53:59,970 --> 00:54:03,020
 tools as good

616
00:54:04,410 --> 00:54:10,589
 j some experiences with openshift not in my case I have no experience with it

617
00:54:10,590 --> 00:54:15,280
 principle because you think there is no

618
00:54:15,280 --> 00:54:20,790
 more secure settings by default

619
00:54:20,869 --> 00:54:26,140
 good happens for example when we want to build a server in the cloud

620
00:54:26,140 --> 00:54:30,848
 a double times for example facilitates with default configurations that

621
00:54:30,849 --> 00:54:35,589
 quickly we have it working but that also has a negative impact on the

622
00:54:35,589 --> 00:54:39,970
 security of our application then it is important not to stay with the

623
00:54:39,970 --> 00:54:43,959
 default settings that usually both cloud providers

624
00:54:43,960 --> 00:54:49,119
 or the manufacturer of a certain product what you are looking for is that your product

625
00:54:49,119 --> 00:54:53,170
 starts to use quickly but this does not necessarily mean that it is

626
00:54:53,170 --> 00:54:57,910
 you are using safely then it is important to apply our controls and

627
00:54:57,910 --> 00:55:06,180
 harden hoist her up somehow very well very good any more questions

628
00:55:06,230 --> 00:55:10,430
 I think we are good, thank you very much Alfredo, it is true that he was dead

629
00:55:10,430 --> 00:55:16,368
 before I loved it properly I liked it very much so good I know why

630
00:55:16,369 --> 00:55:20,950
 because this continues thank you very much

