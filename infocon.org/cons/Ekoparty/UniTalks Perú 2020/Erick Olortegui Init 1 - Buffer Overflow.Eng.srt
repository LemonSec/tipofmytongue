1
00:00:00,310 --> 00:00:06,699
How about here again I hope you are having a good time I hope you are

2
00:00:06,700 --> 00:00:10,210
 The talk is very interesting because of the comments we are seeing there

3
00:00:10,210 --> 00:00:15,580
 in eight of them, I say yes and now I want to give the agricultural pass, art and

4
00:00:15,580 --> 00:00:20,499
 color you have another person already with a time of experience doing tests

5
00:00:20,499 --> 00:00:24,698
 security of different types doing malware analysis also of

6
00:00:24,699 --> 00:00:29,949
 fact was mainly by way of malware analysis at startup and after

7
00:00:29,949 --> 00:00:34,570
 went on to the part of penetration testing in mobile infrastructures

8
00:00:34,570 --> 00:00:39,640
 and what he is going to show us is health, also a little of what we talked about in the

9
00:00:39,640 --> 00:00:44,380
 introduction to the stadium or talks about some things that normally

10
00:00:44,380 --> 00:00:48,190
 it seems that they are extremely complex and that they will be able to learn us in a

11
00:00:48,190 --> 00:00:53,290
 simple but he is going to show us, for example, how the development of

12
00:00:53,290 --> 00:00:57,400
 a step-by-step exploit explaining each of the stages with a case

13
00:00:57,400 --> 00:01:02,800
 concrete and thus be able to understand that if it is

14
00:01:02,800 --> 00:01:09,009
 feasible to learn this type of tests that are done within all this

15
00:01:09,009 --> 00:01:16,229
 safe environment then it's eric what we give with you

16
00:01:16,560 --> 00:01:22,890
 and walter how are you all greetings to each of you thanks for the

17
00:01:22,890 --> 00:01:26,700
 step walter you are having a good afternoon and thanks to the organization for

18
00:01:26,700 --> 00:01:31,530
 allow each of us to share the experience or the

19
00:01:31,530 --> 00:01:35,399
 things that come museum that we are learning along the way well in this

20
00:01:35,399 --> 00:01:41,830
 I already have part in the exhibition, I very much want to present it

21
00:01:41,830 --> 00:01:48,900
 the peace ordering part but see flow knowing a little easier

22
00:01:49,030 --> 00:01:54,790
 and here the direct wizard as a name to as a mini for a start of a buffer

23
00:01:54,790 --> 00:02:02,440
 overflow and we are going to pass it on windows x86 that is 32 bits and well, we are going to

24
00:02:02,440 --> 00:02:09,280
 start well and walter was doing a bit of my summary of what I have been doing

25
00:02:09,280 --> 00:02:14,290
 For years, as Walter says, it has not started as what is analysis of

26
00:02:14,290 --> 00:02:17,700
 malware I like cybersecurity and

27
00:02:17,700 --> 00:02:21,880
 passionately moved away from penetration in favor of penetration and

28
00:02:21,880 --> 00:02:26,859
 technological festivals and a part of mobile phones, there are my social networks and

29
00:02:26,860 --> 00:02:31,370
 some of you like to follow we can share information

30
00:02:31,370 --> 00:02:36,739
 I like to be researching the issues that exist about malware

31
00:02:36,739 --> 00:02:40,849
 new attacks that exist and we can share when a little bit of me is the

32
00:02:40,849 --> 00:02:47,459
 2016 I was doing a talk in tongues he speaks so

33
00:02:47,460 --> 00:02:51,540
 a part gutting this ransomware too

34
00:02:51,540 --> 00:02:57,750
 this in peru ja in 2017 presenting what is a badu sb as a result of still

35
00:02:57,750 --> 00:03:02,879
 There were models that allowed the introduction of codes in the framework to

36
00:03:02,879 --> 00:03:08,899
 be able to automate the attacks and in 2019 I was also in peru hack

37
00:03:08,900 --> 00:03:17,290
 the part supporting the organization with part of the ctf and we continue to start

38
00:03:17,290 --> 00:03:24,319
 This whole topic of the talk is necessary to know the types of data that it has

39
00:03:24,319 --> 00:03:32,988
 a program we have the beatle bites the world the word the beep as the text says

40
00:03:32,989 --> 00:03:36,829
 The concept is of minimum information security that its values ​​move from

41
00:03:36,829 --> 00:03:41,389
 0 to 1 the dance from 0 to 205 who are the bay from

42
00:03:41,389 --> 00:03:49,050
 8 yogurt is 2 vice are 16 bits and sorry for the word and the edges

43
00:03:49,050 --> 00:03:54,480
 of 2 words of 32 bits no, we are not going to touch on each of the

44
00:03:54,480 --> 00:04:01,019
 records because the purpose is to know if it is important but this time the

45
00:04:01,020 --> 00:04:06,390
 extension of the topic or the time that we are going to have we are not going to develop

46
00:04:06,390 --> 00:04:11,959
 each of them but it is important to know the records know a little about

47
00:04:11,960 --> 00:04:16,410
 assembler code to be able to develop your own later

48
00:04:16,410 --> 00:04:21,070
 exploit I like the records that we are going to see

49
00:04:21,070 --> 00:04:27,490
 svp lcp each one is conceptualized there

50
00:04:28,170 --> 00:04:31,040
 on the slides

51
00:04:31,830 --> 00:04:38,229
 here the veil is going to be very important because we are going to know how

52
00:04:38,230 --> 00:04:43,760
 we are going to move or put our him inside an already vulnerable program

53
00:04:43,760 --> 00:04:49,849
 to gain access to a reverse as the concept says is the

54
00:04:49,850 --> 00:04:54,350
 segment center offset is an index to access the space of

55
00:04:54,350 --> 00:04:58,670
 memory we are going to pray it reserve the memory space to get behind the

56
00:04:58,670 --> 00:05:03,200
 reverse let's see what a buffer is the buffer is a memory space that

57
00:05:03,200 --> 00:05:08,599
 stores our data means for example if we have a buffer of

58
00:05:08,600 --> 00:05:13,030
 8 bits that only our user enters in

59
00:05:13,030 --> 00:05:17,859
 that's what it will store and a buffer overflow would be the overwrite on

60
00:05:17,860 --> 00:05:22,500
 that data or the length we have in the 8 bytes

61
00:05:22,500 --> 00:05:28,830
 and we go over that the program is going to undertake a bar in the area of

62
00:05:28,830 --> 00:05:36,390
 memory and it will overwrite adjacent memory and give us an error like

63
00:05:36,390 --> 00:05:40,469
 as we know him as a crack thanks to the program and we are going to

64
00:05:40,470 --> 00:05:45,870
 we are going to have to identify the point to be able to insert the code

65
00:05:45,870 --> 00:05:51,180
 malicious xxi what happens in memory is although we know that the

66
00:05:51,180 --> 00:05:55,930
 memory you have low memory and jaime morón from high and

67
00:05:55,930 --> 00:05:58,659
 we go down in the text as we see there in

68
00:05:58,659 --> 00:06:03,389
 the slide starts the program as a text where

69
00:06:03,389 --> 00:06:09,209
 is the code the executable or the binary code worked well the data is a part

70
00:06:09,209 --> 00:06:12,389
 from the directions of space well then heap comes we are going to do

71
00:06:12,389 --> 00:06:16,249
 a the buffer in the stack does not

72
00:06:16,490 --> 00:06:21,530
 more or less to understand how it works we know the program we have

73
00:06:21,530 --> 00:06:27,020
 some local variables that make calls to the warehouse to the data warehouse

74
00:06:27,020 --> 00:06:33,840
 is the buffer and on the other side of legitimacy or legitimate treats us

75
00:06:33,840 --> 00:06:38,400
 we are going to insert codes to validate this, do not receive in a way

76
00:06:38,400 --> 00:06:42,270
 correct so that later in the next part we can put a

77
00:06:42,270 --> 00:06:47,490
 path and pointing in another direction that we are going to use we are going to

78
00:06:47,490 --> 00:06:53,520
 use the web server application we can find it in the one we have in

79
00:06:53,520 --> 00:06:57,180
 the description and well, this tool is

80
00:06:57,180 --> 00:07:01,020
 intended for learning and understanding the process of the flotation process of

81
00:07:01,020 --> 00:07:06,000
 a software and also test new techniques that may exist although

82
00:07:06,000 --> 00:07:10,990
 we know what this is directed for a 1012 x86

83
00:07:10,990 --> 00:07:17,860
 and in 64-bit versions of windows it is another method

84
00:07:17,860 --> 00:07:21,639
 the tools that we are going to use is for our attacking side we are going to have

85
00:07:21,639 --> 00:07:27,039
 Cali with our victim side we are going to have this windows 7 86 running on

86
00:07:27,039 --> 00:07:31,180
 our good server and at the same time we are going to use a baghar that is unity

87
00:07:31,180 --> 00:07:37,090
 to be able to analyze each of the steps that we are going to follow also as

88
00:07:37,090 --> 00:07:41,859
 tool we are going to have this and developed a couple of payton codes

89
00:07:41,860 --> 00:07:47,949
 basic simple to understand we will not use as I mentioned the limit of

90
00:07:47,949 --> 00:07:54,069
 bagger and a plugin is a cute time to determine the breakpoints for

91
00:07:54,069 --> 00:07:58,270
 to be able to insert the code that gives you exploit to do our in reverse and

92
00:07:58,270 --> 00:08:03,789
 which launcher to be able to find it

93
00:08:03,790 --> 00:08:11,080
 the points in it what warns you is that this type of software I do not know no

94
00:08:11,080 --> 00:08:17,320
 should be tested in a production environment because it could affect the

95
00:08:17,320 --> 00:08:20,599
 ok sign

96
00:08:20,600 --> 00:08:25,380
 for the demo it would be we are going to divide it into three parts

97
00:08:25,380 --> 00:08:29,889
 we are going to start with the numbering we are going to make a rifle

98
00:08:29,889 --> 00:08:36,760
 and then we are going to get the community lock valley and then we are going to have

99
00:08:36,760 --> 00:08:43,439
 the location of law we are going to generate a pattern we know what meta exploit has a

100
00:08:43,440 --> 00:08:48,070
 charity pattern and to create patterns but we are going to create a and we have

101
00:08:48,070 --> 00:08:53,760
 developed a write in python to be able to generate those patterns

102
00:08:53,760 --> 00:09:00,810
 if it is necessary to know the exa table to be able to determine each of

103
00:09:00,810 --> 00:09:05,849
 the values ​​and identify the vouchers and then we will identify the module

104
00:09:05,850 --> 00:09:09,390
 vulnerable commune and at the end we will have our play method and we will

105
00:09:09,390 --> 00:09:15,870
 insert in our payton code to be able to have a shell an exploit

106
00:09:15,870 --> 00:09:20,400
 asia to be able to attack towards the application and get the headquarters in reverse

107
00:09:20,400 --> 00:09:22,520
 not

108
00:09:41,480 --> 00:09:46,100
 and in what I know, first of all we are going to validate that our side

109
00:09:46,100 --> 00:09:51,980
 attacker is a chalice we will be able to obtain the ip address

110
00:09:51,980 --> 00:10:00,089
 and we have ours windows does not validate our ip address

111
00:10:00,780 --> 00:10:07,260
 We validate that it is windows with 101 and the name no later than finishing the

112
00:10:07,260 --> 00:10:12,020
 attack and then

113
00:10:13,560 --> 00:10:17,130
 we have the software there is the software the server

114
00:10:17,130 --> 00:10:22,860
 we are not going to execute it and today it is running to the side of

115
00:10:22,860 --> 00:10:26,860
 our client side let's run an enema

116
00:10:26,860 --> 00:10:31,440
 to determine the services it has in this case we are going to execute it

117
00:10:31,440 --> 00:10:38,890
 person to the management and we will see all the services that

118
00:10:38,890 --> 00:10:41,890
 we serve

119
00:10:45,740 --> 00:10:54,020
 and there we can get that wilshere is running on port 99 99 and we validate

120
00:10:54,020 --> 00:10:56,770
 the connection

121
00:10:57,139 --> 00:11:00,879
 to the ip with the nectar

122
00:11:02,230 --> 00:11:06,760
 there we are inside the application and we are going to see the humans that it has

123
00:11:06,760 --> 00:11:10,430
 internally the application in this case we

124
00:11:10,430 --> 00:11:15,979
 we are going to do the trump and validate that it works correctly is the parameter

125
00:11:15,980 --> 00:11:18,410
 trap we can do in nasal affection

126
00:11:18,410 --> 00:11:24,889
 we are going to test the buffer we put the parameter that truncated a note because

127
00:11:24,889 --> 00:11:27,399
 jockey

128
00:11:31,089 --> 00:11:37,610
 now what we have left is here I already have the scripts prepared why

129
00:11:37,610 --> 00:11:42,720
 the time if it is not na and to see all that there are more or less 8

130
00:11:42,720 --> 00:11:47,429
 scripts that I have prepared well here what I have is let's first validate the

131
00:11:47,429 --> 00:11:52,279
 connection to our server is with windows

132
00:11:52,850 --> 00:11:56,889
 okay 39

133
00:11:56,970 --> 00:12:02,689
 on port 999 and what we are going to tell you is to launch a quantity of data

134
00:12:02,689 --> 00:12:08,370
 entered upon request in this case of language make the amount

135
00:12:08,370 --> 00:12:13,760
 from ace to world trunk parameter

136
00:12:14,440 --> 00:12:20,430
 so we say python 1 and enter it

137
00:12:20,430 --> 00:12:27,000
 we all sent the first data of 1008 and the program continued to function

138
00:12:27,000 --> 00:12:36,080
 correct is receiving us the data is like a thousand times

139
00:12:41,089 --> 00:12:45,069
 now we test with 3000

140
00:12:45,580 --> 00:12:50,560
 and we are left sending data and on the other side we can verify and validate that

141
00:12:50,560 --> 00:12:55,780
 our program has crashed has stopped working the way

142
00:12:55,780 --> 00:13:01,839
 correct as it had been working in the same parameters then for that

143
00:13:01,840 --> 00:13:05,700
 let's install our immunity

144
00:13:06,110 --> 00:13:09,310
 to be able to validate

145
00:13:09,430 --> 00:13:14,469
 the parameters that we are sending installed our immunity we accept to

146
00:13:14,470 --> 00:13:19,680
 all this uses python

147
00:13:21,290 --> 00:13:25,180
 we run as administrator

148
00:13:27,300 --> 00:13:33,839
 that is the window and unity for those who did not see it for those who know it in

149
00:13:33,839 --> 00:13:41,250
 this and we give it a route or we cross it out our our bribery in this

150
00:13:41,250 --> 00:13:45,230
 case he used

151
00:13:48,470 --> 00:13:53,389
 we are going to say a small configuration here to be able to appreciate

152
00:13:53,389 --> 00:14:00,300
 correctly and if we can see from this side too

153
00:14:04,529 --> 00:14:07,529
 16

154
00:14:09,080 --> 00:14:12,830
 and ready in the left part we have all the codes that are

155
00:14:12,830 --> 00:14:19,100
 assembly with registers hexa stack and forward not us in this

156
00:14:19,100 --> 00:14:25,550
 In case we can see that the lower part is where the house indicates them and right now

157
00:14:25,550 --> 00:14:29,810
 we run it and our goal runs normally

158
00:14:29,810 --> 00:14:35,119
 on the side of our calyx but we go again with the length data

159
00:14:35,120 --> 00:14:42,590
 3000 that had already previously traced then we have the lesions xxxvii

160
00:14:42,590 --> 00:14:48,650
 m 41 41 41 then it is at that point that he is giving us

161
00:14:48,650 --> 00:14:54,189
 If we validate our table, which is 41, we will have to

162
00:14:55,520 --> 00:15:04,880
 is the one that is sending many towards the privative

163
00:15:06,270 --> 00:15:12,000
 We see that in the s & p it is of the book and the scj and if we give it let's see all the

164
00:15:12,000 --> 00:15:16,770
 amount that has been entering according to our write python that

165
00:15:16,770 --> 00:15:19,250
 have

166
00:15:26,140 --> 00:15:33,730
 and now what we can do is in our script

167
00:15:33,730 --> 00:15:38,920
 in order to correctly determine the characters we know that I temple and

168
00:15:38,920 --> 00:15:42,069
 it also has its parts but we are going to use our own clip

169
00:15:42,070 --> 00:15:49,540
 to determine or to make our string of characters and power

170
00:15:49,540 --> 00:15:56,490
 insert in our code to see how we manipulate it correctly

171
00:15:57,459 --> 00:16:05,518
 and be able to create our explore way improve function

172
00:16:13,459 --> 00:16:20,998
 now what we will proceed to order them in order to determine that the

173
00:16:20,999 --> 00:16:24,790
 amount of this and parameters that we are going to send from

174
00:16:24,790 --> 00:16:27,630
 right way

175
00:16:30,329 --> 00:16:34,849
 we are going to determine the ip we are going to call as 0

176
00:16:34,850 --> 00:16:39,980
 and here we the prefix and we put 1000 characters and we give our

177
00:16:39,980 --> 00:16:43,790
 chat that gives us 2000 characters as a result

178
00:16:43,790 --> 00:16:49,099
 and this reveals that we are going to add the profile without accepting that it is that

179
00:16:49,100 --> 00:16:56,529
 we have as a result above and it will go with a length for the application

180
00:16:56,720 --> 00:17:01,880
 and then we run

181
00:17:03,220 --> 00:17:08,669
 to lift on the other side I am going to join the application

182
00:17:13,970 --> 00:17:19,569
 we start our program is running correctly we are

183
00:17:19,569 --> 00:17:24,260
 parameter goes with 3000 or again we see that the ip gives us as results a

184
00:17:24,260 --> 00:17:30,100
 new pointer then what we are going to do is

185
00:17:32,910 --> 00:17:39,210
 order the characters and we will see that our chat will be able to determine

186
00:17:39,210 --> 00:17:44,270
 that what characters is sending again

187
00:17:48,559 --> 00:17:53,610
 and if we realize their characters we already have it in our chat

188
00:17:53,610 --> 00:17:59,908
 developed from payton and we will be able to determine how many values ​​we can

189
00:17:59,909 --> 00:18:04,159
 enter from that point

190
00:18:12,300 --> 00:18:16,820
 there it is, we order it correctly

191
00:18:23,440 --> 00:18:28,889
 let's run our program again to be able to do this

192
00:18:31,830 --> 00:18:34,428
 go

193
00:18:34,870 --> 00:18:40,020
 we are going to determine now with our new value

194
00:18:42,070 --> 00:18:46,840
 Now what we are going to do is the profile and we are going to add it to the amount of

195
00:18:46,840 --> 00:18:53,049
 values ​​that we have on the other side plus see that our ip we can handle it to

196
00:18:53,049 --> 00:18:57,730
 our whim we are going to give you a sponsor and in order to determine and insert the

197
00:18:57,730 --> 00:19:05,120
 cel a space bosses and

198
00:19:09,110 --> 00:19:12,459
 they send him 29

199
00:19:14,490 --> 00:19:20,970
 not these results are better for the spaces reserving space to be able to

200
00:19:20,970 --> 00:19:23,809
 enter our codes

201
00:19:25,280 --> 00:19:28,600
 and if you accept us

202
00:19:33,090 --> 00:19:37,600
 we battle our software again to continue validating and now in this

203
00:19:37,600 --> 00:19:41,340
 case we would see 2

204
00:19:42,809 --> 00:19:52,158
 the badgers stain them on the pointer that we want to put our being

205
00:19:52,630 --> 00:19:58,000
 our code and it is validated that now we are going to call as test we are going to

206
00:19:58,000 --> 00:20:01,800
 start from scratch at 256

207
00:20:01,920 --> 00:20:08,070
 a pechar range that we have in the system and we will validate the padding

208
00:20:08,070 --> 00:20:13,139
 of 3,206 which are the characters in four characters that we had

209
00:20:13,140 --> 00:20:16,100
 found previously

210
00:20:17,350 --> 00:20:21,120
 and now we are going to send mind

211
00:20:30,150 --> 00:20:34,290
 well in the s & p we can see and if we expand we can see that we can

212
00:20:34,290 --> 00:20:40,159
 insert charts and allows us to insert charts

213
00:20:40,160 --> 00:20:45,520
 the software does not then we validate again and we go

214
00:20:45,530 --> 00:20:48,220
 we cross it out

215
00:20:50,230 --> 00:20:56,610
 let's insert from 1 to 22 56

216
00:20:58,750 --> 00:21:03,280
 I have the script so our test our charles room is going to

217
00:21:03,280 --> 00:21:07,920
 start from the web let's see how it turns out

218
00:21:18,900 --> 00:21:27,650
 and there is our pointer and we will see Carlos already is

219
00:21:28,210 --> 00:21:34,409
 we can now insert our el on that point

220
00:21:37,280 --> 00:21:42,350
 to determine is also taking advantage of what

221
00:21:42,350 --> 00:21:51,309
 at the point we are using we are going to put mona to determine

222
00:21:51,309 --> 00:21:57,790
 exactly the amount exactly where we can put the butt

223
00:22:01,220 --> 00:22:04,679
 has a minister, we cross out our software again

224
00:22:04,679 --> 00:22:09,029
 we validate that the modules we run the program we validate that the software is

225
00:22:09,029 --> 00:22:15,710
 running or the script is running varying the modules

226
00:22:16,559 --> 00:22:22,279
 a small configuration to be able to appreciate it correctly

227
00:22:22,700 --> 00:22:27,470
 what is going to matter to us in this case is the acceleration of the east river

228
00:22:27,470 --> 00:22:34,230
 no false mode in this case we see that there is a library is a point of ll

229
00:22:34,230 --> 00:22:42,490
 16 25 08 and the other good being see the other we cannot use it because this one

230
00:22:42,490 --> 00:22:48,890
 there are 10 x that would be like batzar than not entering it

231
00:22:48,890 --> 00:22:56,520
 now we calculate a shilling exact the jump that makes

232
00:23:01,320 --> 00:23:03,980
 for this

233
00:23:06,320 --> 00:23:12,250
 jump and return

234
00:23:16,169 --> 00:23:23,279
 at this value what we are going to do is only ff 3 and we are going to put it in

235
00:23:23,279 --> 00:23:28,519
 on the little board as we put the others on the side

236
00:23:29,539 --> 00:23:32,080
 let's see

237
00:23:38,520 --> 00:23:42,470
 and let's just leave that

238
00:23:47,149 --> 00:23:52,389
 to help us determine the jump the library is making

239
00:23:54,480 --> 00:23:58,250
 in the mono parameter

240
00:24:00,390 --> 00:24:03,710
 let's look

241
00:24:31,450 --> 00:24:37,960
 the nexus that helps us

242
00:24:39,240 --> 00:24:44,870
 in jump what the library is doing is a point to read

243
00:24:53,700 --> 00:24:57,840
 they found nine points and we would be using the first point

244
00:24:57,840 --> 00:25:03,379
 which shows we are not going to take the first point

245
00:25:10,730 --> 00:25:16,549
 there it is, we also make it mixed, we know we have to take it into

246
00:25:16,549 --> 00:25:19,150
 reverse

247
00:25:20,180 --> 00:25:24,740
 indian east and we have

248
00:25:26,320 --> 00:25:34,000
 and that code that is inverted because he only knows the architecture he knows it

249
00:25:34,000 --> 00:25:38,100
 it's always a lot of fun

250
00:25:41,490 --> 00:25:46,600
 and we put it in the hair we put the code that we have we have generated to

251
00:25:46,600 --> 00:25:54,330
 other side let's fill it clouds in 90

252
00:25:57,590 --> 00:26:04,010
 and in the values ​​in x to be x are separated supported

253
00:26:04,010 --> 00:26:08,710
 Today we quickly find the attack, we add them

254
00:26:09,370 --> 00:26:13,290
 and again we send our script

255
00:26:24,850 --> 00:26:27,850
 not

256
00:26:29,130 --> 00:26:31,610
 i

257
00:26:35,210 --> 00:26:39,130
 cheering up our berlin reach

258
00:26:40,720 --> 00:26:45,460
 there is the space that we are generating to be able to enter our

259
00:26:45,460 --> 00:26:48,450
 shell properly

260
00:26:58,509 --> 00:27:06,239
 this then we do trail and for here we are going to verify the code

261
00:27:06,300 --> 00:27:12,899
 and there I have the sail so what we are going to do is to get the bar that

262
00:27:12,900 --> 00:27:18,810
 It will serve us how to obtain that bass we need to put play in this case msf

263
00:27:18,810 --> 00:27:22,620
 see although it will not generate all that code and we will reuse the code

264
00:27:22,620 --> 00:27:27,510
 that we have had previously not with him is not that he gives us a space to

265
00:27:27,510 --> 00:27:32,210
 be able to insert code the pointer

266
00:27:32,240 --> 00:27:39,219
 It is the space that we are working with and all the code of metro peta

267
00:27:40,780 --> 00:27:45,540
 in the end we got the godfather in the attack

268
00:28:00,450 --> 00:28:06,660
 to generate our after him we would have to use this following command but

269
00:28:06,660 --> 00:28:10,820
 as we are going to use payton there is no this art is seen not with the pivot

270
00:28:10,820 --> 00:28:15,970
 windows and reverse tcp

271
00:28:15,970 --> 00:28:20,360
 to the ip where is our our warm

272
00:28:20,360 --> 00:28:23,409
 local ponce

273
00:28:28,360 --> 00:28:35,550
 on port 443 in a code of ethics is values ​​at 0

274
00:28:35,550 --> 00:28:39,560
 2000 pork cover properly

275
00:28:40,500 --> 00:28:46,650
 and generate our code to be able to our python that would work as a

276
00:28:46,650 --> 00:28:49,730
 exploit for

277
00:28:50,390 --> 00:28:54,430
 to access the windows

278
00:28:57,830 --> 00:29:01,750
 that's all the code I genre

279
00:29:09,929 --> 00:29:14,999
 we started the exploit to use a multi handler to listen to our

280
00:29:14,999 --> 00:29:18,409
 stand reverse

281
00:29:20,290 --> 00:29:23,820
 shown under

282
00:29:25,360 --> 00:29:29,909
 and we are going to use the windows prior

283
00:29:33,370 --> 00:29:36,370
 interpreter

284
00:29:36,550 --> 00:29:40,740
 let's review spp

285
00:29:46,830 --> 00:29:53,399
 we make our than our machine cali

286
00:29:55,740 --> 00:30:03,120
 and the port there are, we validate the pp and the port that we are going to use is the

287
00:30:03,120 --> 00:30:06,229
 port 443

288
00:30:07,900 --> 00:30:11,400
 and we send them to listen

289
00:30:11,700 --> 00:30:16,500
 and on the other side we are going to execute our reverse the one that we have already

290
00:30:16,500 --> 00:30:23,470
 made in python with the codes generated in msf see

291
00:30:32,490 --> 00:30:37,600
 and ready egypt we have obtained in our shell

292
00:30:37,600 --> 00:30:43,620
 reverse and this we have accessed windows 7

293
00:30:44,110 --> 00:30:49,260
 and we have

294
00:30:54,559 --> 00:30:57,908
 bacán was the same

295
00:30:59,700 --> 00:31:03,719
 ready walter thanks to him and when we did

296
00:31:03,719 --> 00:31:08,190
 interesting of the whole process some variants of the classic things let's say

297
00:31:08,190 --> 00:31:13,499
 of manual things we are a little tight on time but there was a

298
00:31:13,499 --> 00:31:17,009
 question that seemed to me like it always says that in the air when they explain

299
00:31:17,009 --> 00:31:21,239
 these things do not or normally it seems that everyone puts the

300
00:31:21,239 --> 00:31:25,320
 Vista explain it with windows how much this process varies if the objective of the

301
00:31:25,320 --> 00:31:33,090
 attack is a linux in general terms if the variation goes

302
00:31:33,090 --> 00:31:42,389
 to be it is not that wide but if there is a similar variation that uses elements

303
00:31:42,390 --> 00:31:47,690
 ok and in terms of tools and they would be the same kind of tools

304
00:31:47,690 --> 00:31:54,470
 the linux has a gbb axis that is specific to the one of the operating system that is

305
00:31:54,470 --> 00:31:58,909
 can do and the field and good if that is the script to have the spice written

306
00:31:58,909 --> 00:32:06,390
 with this already embedded in the system and bakambu edition and then be and

307
00:32:06,390 --> 00:32:13,020
 thanks again and well I take the step for the next space of talks

308
00:32:13,020 --> 00:32:17,300
 thank you thank you all

