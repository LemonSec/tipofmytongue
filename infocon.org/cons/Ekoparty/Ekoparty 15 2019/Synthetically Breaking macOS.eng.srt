1
00:00:00,030 --> 00:00:05,549
Patrick who are synthetically working my

2
00:00:02,939 --> 00:00:07,589
cows Mikawa suffers from a subtle

3
00:00:05,549 --> 00:00:09,059
signal flag the teller owes and British

4
00:00:07,589 --> 00:00:11,700
attackers to programmatically

5
00:00:09,059 --> 00:00:13,559
interacting with the UI such it's a

6
00:00:11,700 --> 00:00:15,690
tribute to sidestep absentee click

7
00:00:13,559 --> 00:00:17,698
protection to genetically bypass Mary

8
00:00:15,690 --> 00:00:29,039
McAleese for national security Megan in

9
00:00:17,699 --> 00:00:30,900
sweet a single synthetic click alright

10
00:00:29,039 --> 00:00:33,170
Aloha and welcome to my presentation

11
00:00:30,900 --> 00:00:36,960
today I'm stoked to be talking about

12
00:00:33,170 --> 00:00:39,210
synthetically breaking mac OS so my name

13
00:00:36,960 --> 00:00:42,239
is Patrick Wardle I'm the creator of

14
00:00:39,210 --> 00:00:45,180
objective-c and previously a co-founder

15
00:00:42,239 --> 00:00:47,489
of digital security as digital was

16
00:00:45,180 --> 00:00:52,260
recently acquired by Jeff I now work at

17
00:00:47,489 --> 00:00:54,570
gem alright so first up let's get to

18
00:00:52,260 --> 00:00:56,879
know our target that is what we'll be

19
00:00:54,570 --> 00:01:00,329
targeting what we'll be breaking today

20
00:00:56,879 --> 00:01:03,449
now Apple does an amazing job of both

21
00:01:00,329 --> 00:01:08,869
explaining and touting this so let's

22
00:01:03,449 --> 00:01:08,869
watch a recent clip from their keynote

23
00:01:20,110 --> 00:01:23,159
[Music]

24
00:01:28,010 --> 00:01:33,049
[Music]

25
00:01:37,290 --> 00:01:41,769
[Music]

26
00:01:43,280 --> 00:01:47,580
basically they're explaining their new

27
00:01:45,810 --> 00:01:49,740
security and privacy features so I'll

28
00:01:47,580 --> 00:01:54,780
kind of because the audio isn't coming

29
00:01:49,740 --> 00:01:56,520
through we'll talk through it we're

30
00:01:54,780 --> 00:01:58,380
talking about how apps now have extra

31
00:01:56,520 --> 00:02:01,080
layers of security before they can

32
00:01:58,380 --> 00:02:03,179
access for example if the terminal wants

33
00:02:01,080 --> 00:02:05,730
to access your contacts that is now an

34
00:02:03,180 --> 00:02:09,840
alert or a pop up that the user has to

35
00:02:05,730 --> 00:02:12,090
approve he's saying there's API level

36
00:02:09,840 --> 00:02:13,980
protections for example when an

37
00:02:12,090 --> 00:02:16,620
application or a piece of software wants

38
00:02:13,980 --> 00:02:18,780
to access the user's location for

39
00:02:16,620 --> 00:02:20,940
example your contacts your photos or

40
00:02:18,780 --> 00:02:24,630
calendars he's now saying it's also been

41
00:02:20,940 --> 00:02:26,609
expanded or extended to other sensitive

42
00:02:24,630 --> 00:02:29,760
parts of the operating system so these

43
00:02:26,610 --> 00:02:32,100
are the lists now of access prompts that

44
00:02:29,760 --> 00:02:34,200
will be displayed when an app or perhaps

45
00:02:32,100 --> 00:02:37,530
a piece of malware tries to access these

46
00:02:34,200 --> 00:02:41,730
sensitive pieces of information this is

47
00:02:37,530 --> 00:02:43,770
all new to mohani all right so no more

48
00:02:41,730 --> 00:02:45,238
audio in the talk so now we're not here

49
00:02:43,770 --> 00:02:47,100
just to watch clips from Apple's

50
00:02:45,239 --> 00:02:50,250
presentations instead we're gonna talk

51
00:02:47,100 --> 00:02:53,850
about how to break mac OS via synthetic

52
00:02:50,250 --> 00:02:56,430
or programmatic clicks so first we'll

53
00:02:53,850 --> 00:02:59,310
look at specific parts of the operating

54
00:02:56,430 --> 00:03:01,800
system that we can target and ideally

55
00:02:59,310 --> 00:03:04,290
bypass with a sense that it click for

56
00:03:01,800 --> 00:03:07,050
example many of the examples we just saw

57
00:03:04,290 --> 00:03:09,780
in the keynote presentation then we'll

58
00:03:07,050 --> 00:03:12,150
highlight previous bypasses that abuse

59
00:03:09,780 --> 00:03:15,080
synthetic clicks on older versions of

60
00:03:12,150 --> 00:03:18,239
Mac OS and then also look at Apple's

61
00:03:15,080 --> 00:03:21,180
responses and their defenses against

62
00:03:18,239 --> 00:03:22,650
these older attacks finally we'll talk

63
00:03:21,180 --> 00:03:25,170
about a flaw that affected the most

64
00:03:22,650 --> 00:03:26,760
recent version of Mac OS that allowed

65
00:03:25,170 --> 00:03:31,470
for the generation of

66
00:03:26,760 --> 00:03:33,720
synthetic clicks so now let's first look

67
00:03:31,470 --> 00:03:38,159
at what we can break via synthetic or

68
00:03:33,720 --> 00:03:41,220
programmatically generated clicks so on

69
00:03:38,159 --> 00:03:44,190
Mojave many if not most sensitive

70
00:03:41,220 --> 00:03:47,010
actions now require explicit user

71
00:03:44,190 --> 00:03:48,090
approval this is what Craig was talking

72
00:03:47,010 --> 00:03:51,060
about in the keynote

73
00:03:48,090 --> 00:03:53,760
so imagine a hacker has gained remote

74
00:03:51,060 --> 00:03:55,349
access to a Mac system or perhaps the

75
00:03:53,760 --> 00:03:57,268
user has inadvertently infected

76
00:03:55,349 --> 00:03:59,190
themselves with some Mac no way

77
00:03:57,269 --> 00:04:01,590
now this malware or the attacker

78
00:03:59,190 --> 00:04:04,049
probably wants to do things like load a

79
00:04:01,590 --> 00:04:06,720
kernel extension run an Apple script

80
00:04:04,049 --> 00:04:08,879
grab the users photos determine the

81
00:04:06,720 --> 00:04:11,909
users location or perhaps turn on the

82
00:04:08,879 --> 00:04:15,358
mic or the webcam on Mojave these will

83
00:04:11,909 --> 00:04:17,219
all now generate alerts specifically the

84
00:04:15,359 --> 00:04:20,070
operating system will actually intercept

85
00:04:17,220 --> 00:04:22,889
and block that action display an alert

86
00:04:20,070 --> 00:04:25,949
to the user and then will only allow the

87
00:04:22,889 --> 00:04:29,490
action to proceed if the user clicks ok

88
00:04:25,949 --> 00:04:31,229
or allow obviously this is very good for

89
00:04:29,490 --> 00:04:33,510
the user right the security of the

90
00:04:31,229 --> 00:04:37,370
system is increased for the hackers or

91
00:04:33,510 --> 00:04:37,370
for the malware this can pose a problem

92
00:04:39,380 --> 00:04:44,250
so now let's look a little bit closer at

93
00:04:42,270 --> 00:04:46,590
some of these security or privacy

94
00:04:44,250 --> 00:04:49,289
actions that will generate such alerts

95
00:04:46,590 --> 00:04:52,489
so first up we have kernel extension

96
00:04:49,289 --> 00:04:56,699
loading now on recent versions of Mac OS

97
00:04:52,490 --> 00:04:59,039
users now have to explicitly allow the

98
00:04:56,699 --> 00:05:01,229
loading of kernel extensions or texts

99
00:04:59,039 --> 00:05:04,139
this is designed to thwart an attack

100
00:05:01,229 --> 00:05:07,110
where in a sophisticated adversary can

101
00:05:04,139 --> 00:05:09,630
bring a signed a validly signed but

102
00:05:07,110 --> 00:05:12,539
vulnerable third-party kernel extension

103
00:05:09,630 --> 00:05:14,370
to a system that they control then load

104
00:05:12,539 --> 00:05:16,650
this kernel extension it'll be allowed

105
00:05:14,370 --> 00:05:18,780
to load because it's valentín then the

106
00:05:16,650 --> 00:05:20,969
attacker or the malware can exploit this

107
00:05:18,780 --> 00:05:23,130
known vulnerability in that buggy kernel

108
00:05:20,970 --> 00:05:25,199
extension to gain arbitrary code

109
00:05:23,130 --> 00:05:28,139
execution in ring 0 effectively

110
00:05:25,199 --> 00:05:30,479
bypassing Mac OS is kernel code signing

111
00:05:28,139 --> 00:05:32,250
requirement now I talked about this

112
00:05:30,479 --> 00:05:35,099
attack a few years ago at Def Con and

113
00:05:32,250 --> 00:05:37,590
interestingly this was also used albeit

114
00:05:35,099 --> 00:05:40,370
on the Windows platform by the slingshot

115
00:05:37,590 --> 00:05:40,369
apt group

116
00:05:40,850 --> 00:05:46,410
next up is mic and webcam access

117
00:05:43,650 --> 00:05:48,390
starting with Mojave if any program

118
00:05:46,410 --> 00:05:50,940
wants to access the microphone or the

119
00:05:48,390 --> 00:05:53,190
webcam this action will be blocked by

120
00:05:50,940 --> 00:05:56,070
the operating system until the user

121
00:05:53,190 --> 00:05:58,800
explicitly approves this via and alert

122
00:05:56,070 --> 00:06:00,510
which we can see on the slide this again

123
00:05:58,800 --> 00:06:03,720
is a great idea from a security point of

124
00:06:00,510 --> 00:06:06,599
view as lots of Mac malware has targeted

125
00:06:03,720 --> 00:06:08,280
the mic or the webcam some recent

126
00:06:06,600 --> 00:06:11,970
versions or recent examples include

127
00:06:08,280 --> 00:06:13,590
hacking teams RCS implant and also fruit

128
00:06:11,970 --> 00:06:15,810
fly which unfortunately spied on

129
00:06:13,590 --> 00:06:19,830
children for over a decade via the

130
00:06:15,810 --> 00:06:21,330
webcam on their Mac computers as

131
00:06:19,830 --> 00:06:23,430
highlighted in the Apple keynote which

132
00:06:21,330 --> 00:06:26,070
we saw at the beginning of this talk Mac

133
00:06:23,430 --> 00:06:29,550
OS also attempts to protect the user's

134
00:06:26,070 --> 00:06:31,680
privacy by blocking unauthorized actions

135
00:06:29,550 --> 00:06:34,620
and alerting the user and then

136
00:06:31,680 --> 00:06:36,660
requesting approval via Apapa the goal

137
00:06:34,620 --> 00:06:39,810
of course is to block malware hackers or

138
00:06:36,660 --> 00:06:43,170
even shady or surreptitious applications

139
00:06:39,810 --> 00:06:46,920
from gaining access to the users call

140
00:06:43,170 --> 00:06:48,360
records messaging and geolocation it's

141
00:06:46,920 --> 00:06:50,940
important to note on older versions of

142
00:06:48,360 --> 00:06:52,290
Mac OS this access was allowed with no

143
00:06:50,940 --> 00:06:55,340
alert so again this is a new feature

144
00:06:52,290 --> 00:06:58,440
that Apple has recently introduced

145
00:06:55,340 --> 00:07:00,750
another new security feature in Mojave

146
00:06:58,440 --> 00:07:03,240
is that it blocks various administrative

147
00:07:00,750 --> 00:07:05,310
actions when they are performed via the

148
00:07:03,240 --> 00:07:08,190
terminal so for example if you now try

149
00:07:05,310 --> 00:07:10,410
to add a cron job and you can imagine a

150
00:07:08,190 --> 00:07:13,230
hacker trying to do this perhaps to

151
00:07:10,410 --> 00:07:15,270
persist a piece of malware this will be

152
00:07:13,230 --> 00:07:17,550
blocked again as we can see on the slide

153
00:07:15,270 --> 00:07:20,039
and alert will be shown to the user that

154
00:07:17,550 --> 00:07:25,110
the user must explicitly approve before

155
00:07:20,040 --> 00:07:27,060
the action is allowed also new to Mojave

156
00:07:25,110 --> 00:07:29,730
the operating system will now alert

157
00:07:27,060 --> 00:07:32,040
anytime an apple script command is

158
00:07:29,730 --> 00:07:34,710
executed if that Apple script command

159
00:07:32,040 --> 00:07:36,930
tries to interact with a remote process

160
00:07:34,710 --> 00:07:39,570
from a security point of view again this

161
00:07:36,930 --> 00:07:42,030
is a great idea for example as we can

162
00:07:39,570 --> 00:07:44,070
see on the slide here is a snippet of

163
00:07:42,030 --> 00:07:47,010
Apple script from a rather prolific

164
00:07:44,070 --> 00:07:49,950
piece of adware that attempted to

165
00:07:47,010 --> 00:07:52,200
locally inject JavaScript via Apple

166
00:07:49,950 --> 00:07:54,210
script into the users browser session

167
00:07:52,200 --> 00:07:56,370
once the JavaScript was

168
00:07:54,210 --> 00:07:58,080
executing in the context of the users

169
00:07:56,370 --> 00:08:00,150
browser session it would obviously have

170
00:07:58,080 --> 00:08:00,919
access to passwords and their browsing

171
00:08:00,150 --> 00:08:04,258
data

172
00:08:00,919 --> 00:08:06,599
luckily for users now on Mojave this

173
00:08:04,259 --> 00:08:08,400
injection will be blocked because again

174
00:08:06,600 --> 00:08:12,270
it doesn't allow AppleScript to now

175
00:08:08,400 --> 00:08:14,370
interact with remote processes now we

176
00:08:12,270 --> 00:08:16,919
also need to talk about third party

177
00:08:14,370 --> 00:08:19,259
security tools because such tools are

178
00:08:16,919 --> 00:08:21,210
very common with a lot of Mac users as

179
00:08:19,259 --> 00:08:23,430
they provide an additional layer of

180
00:08:21,210 --> 00:08:25,979
security and those are actually quite

181
00:08:23,430 --> 00:08:28,349
likely to detect a hacker or a piece of

182
00:08:25,979 --> 00:08:29,729
malware on the system some examples of

183
00:08:28,349 --> 00:08:31,889
these tools include detecting

184
00:08:29,729 --> 00:08:34,348
persistence or a firewall that will

185
00:08:31,889 --> 00:08:37,440
alert anytime it detects unauthorized

186
00:08:34,349 --> 00:08:40,050
network access now these security tools

187
00:08:37,440 --> 00:08:42,330
when they detect an unauthorized action

188
00:08:40,049 --> 00:08:44,550
generally display an alert to the user

189
00:08:42,330 --> 00:08:46,500
saying hey I blocked this outgoing

190
00:08:44,550 --> 00:08:48,569
Network attempt or I blocked this

191
00:08:46,500 --> 00:08:51,450
perhaps piece of malware persisting on

192
00:08:48,570 --> 00:08:53,399
the file system from the hackers point

193
00:08:51,450 --> 00:08:55,440
of view wouldn't it be great if they

194
00:08:53,399 --> 00:08:57,630
could programmatically interact with

195
00:08:55,440 --> 00:09:00,570
these alerts and simply click allow to

196
00:08:57,630 --> 00:09:01,520
authorize the action of course that'll

197
00:09:00,570 --> 00:09:05,100
be great

198
00:09:01,520 --> 00:09:08,010
so we've Illustrated that basically

199
00:09:05,100 --> 00:09:10,529
everything worthwhile on Mojave will now

200
00:09:08,010 --> 00:09:14,310
be blocked and generate an alert that

201
00:09:10,529 --> 00:09:16,110
the user must explicitly approve so if

202
00:09:14,310 --> 00:09:19,319
we put on our black hats and think like

203
00:09:16,110 --> 00:09:21,630
a hacker our goal now is to locally

204
00:09:19,320 --> 00:09:25,140
bypass all of these with a single click

205
00:09:21,630 --> 00:09:27,439
and the beauty of this approach is if we

206
00:09:25,140 --> 00:09:30,060
find a way to synthetically or

207
00:09:27,440 --> 00:09:33,690
programmatically interact with these

208
00:09:30,060 --> 00:09:35,430
alert boxes we can generically bypass

209
00:09:33,690 --> 00:09:37,980
all of these security and privacy

210
00:09:35,430 --> 00:09:39,930
mechanisms that is to say the UI is the

211
00:09:37,980 --> 00:09:41,940
common element that joins them all

212
00:09:39,930 --> 00:09:46,140
together so in a way it's perhaps the

213
00:09:41,940 --> 00:09:48,300
weakest link so the power of these

214
00:09:46,140 --> 00:09:50,370
synthetic clicks the ability to interact

215
00:09:48,300 --> 00:09:53,609
with security and privacy alerts has

216
00:09:50,370 --> 00:09:57,209
long been realized so now we're going to

217
00:09:53,610 --> 00:09:59,850
briefly look at attacks that leverage

218
00:09:57,209 --> 00:10:01,800
such synthetic clicks on older versions

219
00:09:59,850 --> 00:10:05,370
of Mac OS so these are previous attacks

220
00:10:01,800 --> 00:10:09,099
as well as also highlight apples patches

221
00:10:05,370 --> 00:10:11,840
and defenses against these attacks

222
00:10:09,100 --> 00:10:14,720
first up let's look at Apple scripts and

223
00:10:11,840 --> 00:10:17,570
synthetic events so all the way back in

224
00:10:14,720 --> 00:10:20,270
2011 there was a neat piece of Mac

225
00:10:17,570 --> 00:10:22,880
malware named devil robber that dumped

226
00:10:20,270 --> 00:10:24,890
keychains to steal passwords so once it

227
00:10:22,880 --> 00:10:26,750
infected the system what it would do it

228
00:10:24,890 --> 00:10:29,030
was access to the keychain and try to

229
00:10:26,750 --> 00:10:31,370
gain all the information in the keychain

230
00:10:29,030 --> 00:10:33,860
passwords private code signing

231
00:10:31,370 --> 00:10:35,330
certificates everything so the way it

232
00:10:33,860 --> 00:10:37,280
did this is pretty straightforward it

233
00:10:35,330 --> 00:10:39,110
invoked the built-in security command

234
00:10:37,280 --> 00:10:41,180
and passed the dump keychain command

235
00:10:39,110 --> 00:10:43,550
line flag now this would generate a

236
00:10:41,180 --> 00:10:45,829
keychain access prompt even all the way

237
00:10:43,550 --> 00:10:48,410
back then Apple said ok we're gonna

238
00:10:45,830 --> 00:10:50,240
really double check that the user is ok

239
00:10:48,410 --> 00:10:52,819
with this new program accessing

240
00:10:50,240 --> 00:10:54,530
everything in the keychain so what the

241
00:10:52,820 --> 00:10:56,990
malware would do though is once this

242
00:10:54,530 --> 00:10:59,540
this alert had been generated and was

243
00:10:56,990 --> 00:11:01,640
displayed on the screen it would simply

244
00:10:59,540 --> 00:11:04,550
send a programmatic mouse click a

245
00:11:01,640 --> 00:11:07,550
synthetic click via Apple script to

246
00:11:04,550 --> 00:11:09,530
click on the always allow button this

247
00:11:07,550 --> 00:11:12,290
would obviously then approve the malware

248
00:11:09,530 --> 00:11:14,750
to access the keychain and this required

249
00:11:12,290 --> 00:11:17,150
no special privileges no password and

250
00:11:14,750 --> 00:11:18,710
gave them our access to everything in

251
00:11:17,150 --> 00:11:20,390
the keychain because again it could

252
00:11:18,710 --> 00:11:24,650
generate a synthetic click to always

253
00:11:20,390 --> 00:11:27,410
click allow another piece of Mac malware

254
00:11:24,650 --> 00:11:31,069
that abused synthetic clicks was fruit

255
00:11:27,410 --> 00:11:34,760
fly specifically via various Apple api's

256
00:11:31,070 --> 00:11:37,460
it provided a way for a remote attacker

257
00:11:34,760 --> 00:11:40,160
to interact with the UI of an already

258
00:11:37,460 --> 00:11:42,380
infected system for example to move the

259
00:11:40,160 --> 00:11:45,380
mouse and of course to generate clicks

260
00:11:42,380 --> 00:11:47,510
so as as we can see on the slide

261
00:11:45,380 --> 00:11:51,050
this means the remote attacker the

262
00:11:47,510 --> 00:11:53,720
hacker can for example dismiss security

263
00:11:51,050 --> 00:11:55,099
alerts remotely that's really great not

264
00:11:53,720 --> 00:11:56,570
something we've seen a lot in malware

265
00:11:55,100 --> 00:11:58,820
but it's kind of a neat capability

266
00:11:56,570 --> 00:12:02,960
that's built directly into this piece of

267
00:11:58,820 --> 00:12:06,080
code adware which is becoming ever more

268
00:12:02,960 --> 00:12:09,380
common ever more prolific on Mac OS also

269
00:12:06,080 --> 00:12:12,190
has a history of abusing synthetic

270
00:12:09,380 --> 00:12:15,140
events so here for example we have GDL

271
00:12:12,190 --> 00:12:17,690
Ingenio attempts to install itself as a

272
00:12:15,140 --> 00:12:19,910
malicious browser extension so it can

273
00:12:17,690 --> 00:12:21,230
gain access to the users browser session

274
00:12:19,910 --> 00:12:24,800
cookies passwords

275
00:12:21,230 --> 00:12:26,900
rentals etc if we reverse engineer its

276
00:12:24,800 --> 00:12:30,290
binary code we can discover or uncover

277
00:12:26,900 --> 00:12:32,720
methods such as get pop up position or

278
00:12:30,290 --> 00:12:35,540
click on install button wonder what

279
00:12:32,720 --> 00:12:37,310
these do right so we take a closer look

280
00:12:35,540 --> 00:12:40,069
and I've dumped some of the disassembly

281
00:12:37,310 --> 00:12:42,050
on the slide we can see that these

282
00:12:40,070 --> 00:12:45,080
methods will get the location of a

283
00:12:42,050 --> 00:12:47,510
pop-up and then send a synthetic mouse

284
00:12:45,080 --> 00:12:50,090
click to the pop-up to click on the

285
00:12:47,510 --> 00:12:52,520
allow button this effectively allows it

286
00:12:50,090 --> 00:12:55,550
to be installed Mac OS will now block

287
00:12:52,520 --> 00:12:58,130
and alert if someone tries to install a

288
00:12:55,550 --> 00:13:00,199
browser extension so the malware is says

289
00:12:58,130 --> 00:13:02,150
ok I'm going to allow this alert but I'm

290
00:13:00,200 --> 00:13:04,790
gonna programmatically just click allow

291
00:13:02,150 --> 00:13:07,370
so I basically am approving myself

292
00:13:04,790 --> 00:13:11,510
effectively bypassing Apple's security

293
00:13:07,370 --> 00:13:13,880
posture at that time now Apple obviously

294
00:13:11,510 --> 00:13:17,480
had to do something about these attacks

295
00:13:13,880 --> 00:13:20,270
and good news they did so their first

296
00:13:17,480 --> 00:13:23,450
attempt was to instruct the system to

297
00:13:20,270 --> 00:13:26,780
filter out or to ignore unauthorized

298
00:13:23,450 --> 00:13:29,630
synthetic clicks so now if a random

299
00:13:26,780 --> 00:13:32,420
program tries to generate a synthetic or

300
00:13:29,630 --> 00:13:34,880
programmatic mouse click say to a

301
00:13:32,420 --> 00:13:37,189
keychain access prompt Mac OS will

302
00:13:34,880 --> 00:13:39,470
detect that this mouse click is not

303
00:13:37,190 --> 00:13:41,720
coming from the user instead it's been

304
00:13:39,470 --> 00:13:44,600
programmatically generated and we'll

305
00:13:41,720 --> 00:13:46,760
ignore this so from a technical point of

306
00:13:44,600 --> 00:13:49,460
view this is done by checking amongst

307
00:13:46,760 --> 00:13:52,760
other things the pit of the process if

308
00:13:49,460 --> 00:13:54,740
the pit is pit zero this means the event

309
00:13:52,760 --> 00:13:56,120
is coming from the kernel and if you

310
00:13:54,740 --> 00:13:58,100
think about it in the kernel that's

311
00:13:56,120 --> 00:14:00,350
where the mouse drivers the kernel

312
00:13:58,100 --> 00:14:02,180
extensions live so this likely means

313
00:14:00,350 --> 00:14:04,730
that this is coming in from the user of

314
00:14:02,180 --> 00:14:06,920
the physically clicking the mouse of

315
00:14:04,730 --> 00:14:09,320
course though if a random piece of

316
00:14:06,920 --> 00:14:12,020
software and application or malware

317
00:14:09,320 --> 00:14:14,150
generates a synthetic click the pit will

318
00:14:12,020 --> 00:14:18,260
belong to that process and won't be paid

319
00:14:14,150 --> 00:14:20,390
0 and thus will be ignored besides a

320
00:14:18,260 --> 00:14:23,900
simple pit check there's also some other

321
00:14:20,390 --> 00:14:25,850
checks going on first we notice if we

322
00:14:23,900 --> 00:14:28,220
try to now generate a synthetic click

323
00:14:25,850 --> 00:14:29,630
via our own application we can see that

324
00:14:28,220 --> 00:14:32,600
there is an error message that's

325
00:14:29,630 --> 00:14:34,790
displayed in the log files what I did

326
00:14:32,600 --> 00:14:37,280
was I grep the file system look

327
00:14:34,790 --> 00:14:39,709
for the binary that would generate this

328
00:14:37,280 --> 00:14:41,449
error message and I found this and then

329
00:14:39,710 --> 00:14:44,390
this allowed me to figure out exactly

330
00:14:41,450 --> 00:14:47,180
what the system was checking so in short

331
00:14:44,390 --> 00:14:50,000
as we can see on the slide in this

332
00:14:47,180 --> 00:14:53,420
assembly Mac OS will invoke a function

333
00:14:50,000 --> 00:14:56,630
called cgx sender can synthesize events

334
00:14:53,420 --> 00:14:59,180
which calls into the kernel to check if

335
00:14:56,630 --> 00:15:02,030
that process has been approved or has

336
00:14:59,180 --> 00:15:04,489
specifically an entitlement that allows

337
00:15:02,030 --> 00:15:05,959
it to generate synthetic events if it

338
00:15:04,490 --> 00:15:08,450
doesn't for example it's a new

339
00:15:05,960 --> 00:15:10,190
application or a piece of malware the

340
00:15:08,450 --> 00:15:12,740
kernel will come back and say no this

341
00:15:10,190 --> 00:15:14,960
application does not have the authority

342
00:15:12,740 --> 00:15:16,700
to generate these events and this will

343
00:15:14,960 --> 00:15:19,520
either be blocked or generate and alert

344
00:15:16,700 --> 00:15:22,580
that the user has to approve now

345
00:15:19,520 --> 00:15:25,160
unfortunately for Apple and for users

346
00:15:22,580 --> 00:15:28,490
it was rather trivial to bypass this by

347
00:15:25,160 --> 00:15:31,100
simply finding a way for the system to

348
00:15:28,490 --> 00:15:33,470
generate the event or they click on our

349
00:15:31,100 --> 00:15:35,570
behalf because recall Apple was not yet

350
00:15:33,470 --> 00:15:36,560
fully blocking synthetic events they

351
00:15:35,570 --> 00:15:38,870
were basically saying we're only

352
00:15:36,560 --> 00:15:41,150
allowing clicks that come from the

353
00:15:38,870 --> 00:15:43,190
system so if we can figure out a way to

354
00:15:41,150 --> 00:15:45,740
coerce the system to generate these

355
00:15:43,190 --> 00:15:47,420
arbitrary programmatic mouse clicks for

356
00:15:45,740 --> 00:15:50,030
us instead of doing it directly

357
00:15:47,420 --> 00:15:52,670
ourselves these would still be allowed

358
00:15:50,030 --> 00:15:55,160
so one example or way we could do this

359
00:15:52,670 --> 00:15:58,250
was something via something called mouse

360
00:15:55,160 --> 00:16:00,439
keys so in Mac OS there's something

361
00:15:58,250 --> 00:16:02,720
called Mouse keys which allows one to

362
00:16:00,440 --> 00:16:05,570
generate synthetic mouse clicks via

363
00:16:02,720 --> 00:16:07,910
synthetic keyboard events effectively it

364
00:16:05,570 --> 00:16:09,620
turns the keyboard into the mouse so

365
00:16:07,910 --> 00:16:11,360
when this is enabled for example when

366
00:16:09,620 --> 00:16:14,960
you press the i key this will be

367
00:16:11,360 --> 00:16:16,880
translated into a left mouse click so it

368
00:16:14,960 --> 00:16:19,760
turns out the system still allows us to

369
00:16:16,880 --> 00:16:22,520
generate synthetic keyboard clicks with

370
00:16:19,760 --> 00:16:25,040
mouse keys being turned on these would

371
00:16:22,520 --> 00:16:27,380
be translated by the system to a mouse

372
00:16:25,040 --> 00:16:29,839
click and then when the system went to

373
00:16:27,380 --> 00:16:31,820
examine these mouse clicks it would

374
00:16:29,840 --> 00:16:33,710
appear that they came from the system

375
00:16:31,820 --> 00:16:35,780
because the system was the one doing the

376
00:16:33,710 --> 00:16:37,880
translation of the clicks from the mouse

377
00:16:35,780 --> 00:16:40,069
to sorry from the keyboard to the mouse

378
00:16:37,880 --> 00:16:42,320
so they would be allowed so this meant

379
00:16:40,070 --> 00:16:44,360
even with Apple's previous security

380
00:16:42,320 --> 00:16:46,610
defenses we could still generate

381
00:16:44,360 --> 00:16:48,230
arbitrary synthetic clicks that would

382
00:16:46,610 --> 00:16:51,530
allow us to click on for example

383
00:16:48,230 --> 00:16:53,780
all security prompts Apple patched that

384
00:16:51,530 --> 00:16:56,089
which is good turns out though there was

385
00:16:53,780 --> 00:16:58,400
another way to bypass Apple's protection

386
00:16:56,090 --> 00:17:01,100
and this was even easier all you had to

387
00:16:58,400 --> 00:17:03,920
do was send to synthetic mousedown

388
00:17:01,100 --> 00:17:05,390
events so think about it

389
00:17:03,920 --> 00:17:07,099
programmatically when you want to

390
00:17:05,390 --> 00:17:09,020
generate a mouse click you send a mouse

391
00:17:07,099 --> 00:17:10,730
down event and then you send a mouse up

392
00:17:09,020 --> 00:17:12,680
event and this mimics the user clicking

393
00:17:10,730 --> 00:17:15,430
the mouse down and then the mouse up and

394
00:17:12,680 --> 00:17:18,230
this bug was discovered by myself rather

395
00:17:15,430 --> 00:17:20,360
hilariously accidentally I was copying

396
00:17:18,230 --> 00:17:23,329
and pasting some code and I forgot to

397
00:17:20,359 --> 00:17:25,579
update the flag in the second event to

398
00:17:23,329 --> 00:17:27,230
say this is an up event so when I

399
00:17:25,579 --> 00:17:29,510
compiled and ran this code I hadn't

400
00:17:27,230 --> 00:17:32,330
realized what I had done and I sent two

401
00:17:29,510 --> 00:17:33,920
mouse down events to the system now

402
00:17:32,330 --> 00:17:36,409
obviously this doesn't make any sense

403
00:17:33,920 --> 00:17:38,090
the system says you've just given me two

404
00:17:36,410 --> 00:17:40,490
mouse down events this should be

405
00:17:38,090 --> 00:17:43,669
essentially illegal unfortunately

406
00:17:40,490 --> 00:17:46,160
instead of discarding that what it

407
00:17:43,670 --> 00:17:48,530
kindly did was translated that second

408
00:17:46,160 --> 00:17:50,870
mouse down event to a mouse up event and

409
00:17:48,530 --> 00:17:52,879
then delivered it and again the system

410
00:17:50,870 --> 00:17:55,159
would then examine that mouse click and

411
00:17:52,880 --> 00:17:57,320
say oh yeah it came from the system

412
00:17:55,160 --> 00:17:59,300
because the system was the one doing the

413
00:17:57,320 --> 00:18:01,790
translation from that mouse down event

414
00:17:59,300 --> 00:18:03,500
to a mouse up event so again this would

415
00:18:01,790 --> 00:18:05,420
be allowed this would be approved and

416
00:18:03,500 --> 00:18:09,790
this would allow us to click arbitrarily

417
00:18:05,420 --> 00:18:11,990
on security and privacy alerts now Apple

418
00:18:09,790 --> 00:18:13,730
understandably so got rather annoyed

419
00:18:11,990 --> 00:18:17,060
with me continually breaking this

420
00:18:13,730 --> 00:18:19,730
mechanism and so they said okay screw

421
00:18:17,060 --> 00:18:21,500
this let's simply block all synthetic

422
00:18:19,730 --> 00:18:23,150
clicks let's not try to filter out

423
00:18:21,500 --> 00:18:25,700
because Patrick keeps breaking this

424
00:18:23,150 --> 00:18:26,930
let's just say no there's not a lot of

425
00:18:25,700 --> 00:18:29,170
good reasons to generate synthetic

426
00:18:26,930 --> 00:18:32,030
clicks so let's just block all of them

427
00:18:29,170 --> 00:18:34,460
so now for example on Mojave if you run

428
00:18:32,030 --> 00:18:36,470
a piece of Apple script that tries to

429
00:18:34,460 --> 00:18:39,080
generate a click this will just be

430
00:18:36,470 --> 00:18:40,880
flat-out blocked similarly if you use

431
00:18:39,080 --> 00:18:42,439
some of the api's to generate synthetic

432
00:18:40,880 --> 00:18:45,110
clicks Apple doesn't filter these

433
00:18:42,440 --> 00:18:46,940
anymore it just says no and it displays

434
00:18:45,110 --> 00:18:49,399
an alert that says hey we've blocked

435
00:18:46,940 --> 00:18:51,200
this and if the user wants to explicitly

436
00:18:49,400 --> 00:18:53,540
allow that application they have to now

437
00:18:51,200 --> 00:18:56,060
enter that password and explicitly

438
00:18:53,540 --> 00:18:57,860
approve it so when I first saw this I

439
00:18:56,060 --> 00:18:59,570
said okay game over this is the right

440
00:18:57,860 --> 00:19:01,429
approach this is Apple taking a very

441
00:18:59,570 --> 00:19:03,500
draconian but good approach the

442
00:19:01,430 --> 00:19:06,950
that seems to say game over for these

443
00:19:03,500 --> 00:19:08,780
synthetic cliques unfortunately that was

444
00:19:06,950 --> 00:19:10,790
not the case not to pick on Apple too

445
00:19:08,780 --> 00:19:12,860
much but if history has shown me

446
00:19:10,790 --> 00:19:16,159
anything it's often their initial

447
00:19:12,860 --> 00:19:19,189
attempts to get things right fail so now

448
00:19:16,160 --> 00:19:21,260
let's talk about a flaw in mac OS that

449
00:19:19,190 --> 00:19:24,200
allowed us to generate synthetic mouse

450
00:19:21,260 --> 00:19:26,510
clicks as a normal user in an invisible

451
00:19:24,200 --> 00:19:29,440
manner that could bypass the majority of

452
00:19:26,510 --> 00:19:32,120
Apple's security and privacy mechanisms

453
00:19:29,440 --> 00:19:35,690
first we need to understand some

454
00:19:32,120 --> 00:19:38,389
operating system internals so behind the

455
00:19:35,690 --> 00:19:41,540
scenes there is an apple Damon called T

456
00:19:38,390 --> 00:19:43,820
CCD which is largely responsible for

457
00:19:41,540 --> 00:19:47,240
handling consent and control this is

458
00:19:43,820 --> 00:19:49,790
what the CC in T CCD stands for so for

459
00:19:47,240 --> 00:19:51,800
example when you launch an application

460
00:19:49,790 --> 00:19:54,020
or an application attempts to perform an

461
00:19:51,800 --> 00:19:56,480
action like accessing the mic or the

462
00:19:54,020 --> 00:20:01,460
webcam or yes generating a synthetic

463
00:19:56,480 --> 00:20:02,960
event T CCD we'll go and check a system

464
00:20:01,460 --> 00:20:05,210
database to see if that application has

465
00:20:02,960 --> 00:20:09,500
been approved and this database is

466
00:20:05,210 --> 00:20:11,000
called TCC dB so the other day I was

467
00:20:09,500 --> 00:20:13,010
poking around on the internet and I

468
00:20:11,000 --> 00:20:16,190
stumbled across a blog written by Howard

469
00:20:13,010 --> 00:20:19,310
Oakley and in one of his posts he noted

470
00:20:16,190 --> 00:20:21,890
that this daemon has an undocumented

471
00:20:19,310 --> 00:20:25,220
secondary check and in his blog post he

472
00:20:21,890 --> 00:20:28,330
said it also goes and checks approved

473
00:20:25,220 --> 00:20:31,190
list of applications and this is now

474
00:20:28,330 --> 00:20:33,379
conceptually illustrated on the slide so

475
00:20:31,190 --> 00:20:34,910
basically what actually goes on behind

476
00:20:33,380 --> 00:20:37,520
the scenes is when an application is

477
00:20:34,910 --> 00:20:39,290
launched and wants to approve perform

478
00:20:37,520 --> 00:20:41,810
some action for example accessing the

479
00:20:39,290 --> 00:20:43,220
webcam which is blocked the operating

480
00:20:41,810 --> 00:20:45,679
system will first check

481
00:20:43,220 --> 00:20:48,320
TCC DB to see if the user has previously

482
00:20:45,680 --> 00:20:50,330
approved that if not it goes and

483
00:20:48,320 --> 00:20:51,679
apparently according to Howard check

484
00:20:50,330 --> 00:20:53,750
some other database which is

485
00:20:51,680 --> 00:20:55,820
undocumented to see perhaps if there is

486
00:20:53,750 --> 00:20:58,250
a rule in that database that gives that

487
00:20:55,820 --> 00:21:00,020
application access this to me was

488
00:20:58,250 --> 00:21:01,460
intriguing right anytime there's

489
00:21:00,020 --> 00:21:04,520
undocumented functionality

490
00:21:01,460 --> 00:21:05,900
dig deeper so the first thing we want to

491
00:21:04,520 --> 00:21:08,090
do is we need to figure out where this

492
00:21:05,900 --> 00:21:09,350
second database lies because I want to

493
00:21:08,090 --> 00:21:10,939
know what's in this database

494
00:21:09,350 --> 00:21:13,490
can we subvert it you know is there

495
00:21:10,940 --> 00:21:15,420
something we can abuse here turns out

496
00:21:13,490 --> 00:21:18,060
it's pretty easy to find this database

497
00:21:15,420 --> 00:21:21,240
if we look at the property list or pee

498
00:21:18,060 --> 00:21:23,610
list for the TC CD the TCC daemon we can

499
00:21:21,240 --> 00:21:27,330
see there is an entry to watch a file

500
00:21:23,610 --> 00:21:31,439
named aloud application list this file

501
00:21:27,330 --> 00:21:33,780
is also exclusively opened by TC CD this

502
00:21:31,440 --> 00:21:36,870
seems likely to be the actual database

503
00:21:33,780 --> 00:21:39,540
so if we take a peek at this file we can

504
00:21:36,870 --> 00:21:42,899
see that it's a property list containing

505
00:21:39,540 --> 00:21:46,520
popular applications such as the VLC

506
00:21:42,900 --> 00:21:48,810
video player that are afforded or rather

507
00:21:46,520 --> 00:21:51,480
pre-approved the ability to perform

508
00:21:48,810 --> 00:21:54,240
actions that would otherwise be blocked

509
00:21:51,480 --> 00:21:55,800
or generate and alert looking at this

510
00:21:54,240 --> 00:21:58,320
property list we can see that Apple

511
00:21:55,800 --> 00:22:00,780
defines two types of allowed actions

512
00:21:58,320 --> 00:22:03,840
those first one is Apple scripts and the

513
00:22:00,780 --> 00:22:06,870
second one is post event this means you

514
00:22:03,840 --> 00:22:09,600
can post an events so for each entry

515
00:22:06,870 --> 00:22:11,489
Apple has included the applications code

516
00:22:09,600 --> 00:22:14,040
signing information and as we'll see

517
00:22:11,490 --> 00:22:16,230
this is so that Apple can validate that

518
00:22:14,040 --> 00:22:19,470
the application has not been subverted

519
00:22:16,230 --> 00:22:22,080
or is in a pristine state so again the

520
00:22:19,470 --> 00:22:24,450
idea of this list is a way to kind of

521
00:22:22,080 --> 00:22:26,340
whitelist or pre-approve popular

522
00:22:24,450 --> 00:22:28,140
applications that have legitimate

523
00:22:26,340 --> 00:22:31,050
reasons to for example generate

524
00:22:28,140 --> 00:22:33,030
synthetic clicks so here for example VLC

525
00:22:31,050 --> 00:22:35,159
is one of those applications I have no

526
00:22:33,030 --> 00:22:38,129
idea why but Apple in their infinite

527
00:22:35,160 --> 00:22:40,200
wisdom said VLC has the ability to

528
00:22:38,130 --> 00:22:42,320
generate synthetic clicks we don't want

529
00:22:40,200 --> 00:22:44,700
to annoy the users or break this

530
00:22:42,320 --> 00:22:46,530
application because it's so popular and

531
00:22:44,700 --> 00:22:48,690
so widespread so we're just going to

532
00:22:46,530 --> 00:22:50,970
pre-approve it so even if we have a new

533
00:22:48,690 --> 00:22:53,520
rule that says you cannot generate

534
00:22:50,970 --> 00:22:59,880
synthetic events VLC will still be able

535
00:22:53,520 --> 00:23:02,550
to so our goal then is to put on my

536
00:22:59,880 --> 00:23:04,650
hacker hat and wonder could I subvert

537
00:23:02,550 --> 00:23:06,780
any of these applications in this

538
00:23:04,650 --> 00:23:09,570
pre-approved allowed application list

539
00:23:06,780 --> 00:23:11,790
because if we can subvert one of these

540
00:23:09,570 --> 00:23:14,850
pre-approved trusted applications in

541
00:23:11,790 --> 00:23:17,159
theory we should now still be able to

542
00:23:14,850 --> 00:23:19,199
generate synthetic cliques in a way that

543
00:23:17,160 --> 00:23:24,690
will always be loud because they are

544
00:23:19,200 --> 00:23:27,000
pre-approved okay so time to take a

545
00:23:24,690 --> 00:23:29,310
closer look at the TCC Damon's

546
00:23:27,000 --> 00:23:32,130
validation logic of those pre-approved

547
00:23:29,310 --> 00:23:34,320
applications so I dove into the daemon

548
00:23:32,130 --> 00:23:36,420
and start reverse engineering and after

549
00:23:34,320 --> 00:23:40,080
a while I came across a method named

550
00:23:36,420 --> 00:23:43,020
matches code requirement data this takes

551
00:23:40,080 --> 00:23:45,120
an access identity object and the code

552
00:23:43,020 --> 00:23:47,760
signing information or in Apple's

553
00:23:45,120 --> 00:23:50,280
parlance the code signing requirement of

554
00:23:47,760 --> 00:23:52,620
the app from the allowed application

555
00:23:50,280 --> 00:23:55,139
list and if we look at strings in the

556
00:23:52,620 --> 00:23:57,419
code which I've included on the slide we

557
00:23:55,140 --> 00:24:00,570
can see that it appears to ensure that

558
00:23:57,420 --> 00:24:03,330
the code signing information matches and

559
00:24:00,570 --> 00:24:05,220
verifies what it's there so in other

560
00:24:03,330 --> 00:24:07,830
words Apple is saying ok you might claim

561
00:24:05,220 --> 00:24:11,100
to be VLC but we're gonna make really

562
00:24:07,830 --> 00:24:13,290
sure that this is VLC signed by the VLC

563
00:24:11,100 --> 00:24:14,310
developer and that it has not been

564
00:24:13,290 --> 00:24:16,409
tampered with

565
00:24:14,310 --> 00:24:19,770
which makes sense this is what they

566
00:24:16,410 --> 00:24:22,710
should be doing so we take a closer look

567
00:24:19,770 --> 00:24:25,080
at this access identity class we can see

568
00:24:22,710 --> 00:24:26,670
that when it's instantiating it contains

569
00:24:25,080 --> 00:24:28,800
information about the application

570
00:24:26,670 --> 00:24:30,510
attempting the action no surprise here

571
00:24:28,800 --> 00:24:32,790
right they basically create an object

572
00:24:30,510 --> 00:24:33,780
that represents the application and then

573
00:24:32,790 --> 00:24:35,129
what they're going to do is they're

574
00:24:33,780 --> 00:24:37,500
going to check to make sure that that's

575
00:24:35,130 --> 00:24:40,110
in the list and everything matches so

576
00:24:37,500 --> 00:24:42,060
for example we take a look at VLC app

577
00:24:40,110 --> 00:24:44,610
which recall is one of those trusted

578
00:24:42,060 --> 00:24:47,190
pre-approved applications and if we

579
00:24:44,610 --> 00:24:49,979
attach a runtime debugger to the TCC

580
00:24:47,190 --> 00:24:53,340
daemon we can debug and step through and

581
00:24:49,980 --> 00:24:56,550
if we dump the access identity object we

582
00:24:53,340 --> 00:25:00,689
can see as expected is VLC's name path

583
00:24:56,550 --> 00:25:03,720
and other information so if we dive into

584
00:25:00,690 --> 00:25:06,210
the matches code requirement method we

585
00:25:03,720 --> 00:25:09,420
can see it invokes a standard apple

586
00:25:06,210 --> 00:25:11,850
code-signing api that attempts to verify

587
00:25:09,420 --> 00:25:14,760
that the application is still signed and

588
00:25:11,850 --> 00:25:16,860
as I noted signed by the specified code

589
00:25:14,760 --> 00:25:19,050
signing requirement which is also stored

590
00:25:16,860 --> 00:25:21,719
in that allowed application database

591
00:25:19,050 --> 00:25:23,580
property list so far everything looks

592
00:25:21,720 --> 00:25:25,350
great I mean if I designed this I would

593
00:25:23,580 --> 00:25:27,360
do it in a similar way it looks that

594
00:25:25,350 --> 00:25:30,510
Apple is trying to cryptographically

595
00:25:27,360 --> 00:25:32,370
verify that only the applications in

596
00:25:30,510 --> 00:25:34,500
this pre-approved list can be

597
00:25:32,370 --> 00:25:36,379
pre-approved to generate for example

598
00:25:34,500 --> 00:25:38,470
synthetic cliques

599
00:25:36,380 --> 00:25:41,650
unfortunately though is is often the

600
00:25:38,470 --> 00:25:44,500
case the devil is in the details so as

601
00:25:41,650 --> 00:25:47,440
Apple's documentation states these

602
00:25:44,500 --> 00:25:51,340
code-signing api's can be controlled or

603
00:25:47,440 --> 00:25:52,870
influenced by the flag parameter so if

604
00:25:51,340 --> 00:25:55,510
we look at the disassembly and take a

605
00:25:52,870 --> 00:25:57,668
close look at the flag we can see that

606
00:25:55,510 --> 00:26:02,049
the application verification is

607
00:25:57,669 --> 00:26:04,419
performed with a flag set to 7 this is a

608
00:26:02,049 --> 00:26:06,668
bitwise or of various values which we

609
00:26:04,419 --> 00:26:08,980
can break out so if we do that and we

610
00:26:06,669 --> 00:26:11,530
can see those values on the slide we can

611
00:26:08,980 --> 00:26:13,750
see that this is destructed into three

612
00:26:11,530 --> 00:26:15,820
separate values the first is check all

613
00:26:13,750 --> 00:26:18,250
architectures that's good you can have a

614
00:26:15,820 --> 00:26:20,408
fat binary with 32-bit code in 64-bit

615
00:26:18,250 --> 00:26:23,200
code so this says please validate all

616
00:26:20,409 --> 00:26:25,510
those architectures the second - left me

617
00:26:23,200 --> 00:26:28,179
scratching my head the first one is do

618
00:26:25,510 --> 00:26:30,520
not validate the executable and then the

619
00:26:28,179 --> 00:26:33,580
third one is do not validate the

620
00:26:30,520 --> 00:26:36,190
resources this is kind of problematic

621
00:26:33,580 --> 00:26:38,289
because since Apple is effectively

622
00:26:36,190 --> 00:26:41,440
saying I don't worry about validating

623
00:26:38,289 --> 00:26:43,330
the executable nor its resources we can

624
00:26:41,440 --> 00:26:46,059
basically confirm by looking at apples

625
00:26:43,330 --> 00:26:48,879
code signing logic that yes indeed

626
00:26:46,059 --> 00:26:51,668
neither the executable code of these

627
00:26:48,880 --> 00:26:54,070
pre-approved applications nor their

628
00:26:51,669 --> 00:26:57,880
resources are going to be validated this

629
00:26:54,070 --> 00:26:59,980
is kind of a problem those neither the

630
00:26:57,880 --> 00:27:02,470
application is executable or its

631
00:26:59,980 --> 00:27:05,080
resources are validated it's actually

632
00:27:02,470 --> 00:27:07,270
incredibly trivial to support to subvert

633
00:27:05,080 --> 00:27:10,149
any of these pre-approved or allowed

634
00:27:07,270 --> 00:27:12,760
applications and add code that will

635
00:27:10,150 --> 00:27:15,789
generate synthetic clicks on our behalf

636
00:27:12,760 --> 00:27:19,419
as we can see on the slide we can do

637
00:27:15,789 --> 00:27:21,100
this in a few very simple steps so

638
00:27:19,419 --> 00:27:22,270
here's an example what we're now going

639
00:27:21,100 --> 00:27:25,418
to do is we're gonna step through

640
00:27:22,270 --> 00:27:26,830
showing how to subvert VLC one of the

641
00:27:25,419 --> 00:27:28,390
pre-approved applications

642
00:27:26,830 --> 00:27:30,309
we're going to show that it's still

643
00:27:28,390 --> 00:27:31,720
approved it still validates even though

644
00:27:30,309 --> 00:27:33,100
we've injected malicious code and

645
00:27:31,720 --> 00:27:35,110
ultimately allows us to generate

646
00:27:33,100 --> 00:27:38,439
arbitrary synthetic events that are

647
00:27:35,110 --> 00:27:41,049
still allowed by Mac OS so first we need

648
00:27:38,440 --> 00:27:43,539
to find a way for VLC to execute and

649
00:27:41,049 --> 00:27:45,789
load code for us so it turns out the VLC

650
00:27:43,539 --> 00:27:48,399
supports the ability to load arbitrary

651
00:27:45,789 --> 00:27:51,720
plugins so we say ok let's just create a

652
00:27:48,399 --> 00:27:53,370
plugin and see if VLC loads it

653
00:27:51,720 --> 00:27:55,230
so as we can see on the slide there's

654
00:27:53,370 --> 00:27:57,750
some code from VLC and there's a

655
00:27:55,230 --> 00:28:01,200
debugger screenshot of us debugging VLC

656
00:27:57,750 --> 00:28:03,299
we can see yes indeed VLC will load our

657
00:28:01,200 --> 00:28:06,419
plugin this is not too surprising this

658
00:28:03,299 --> 00:28:09,179
is how plug-in architectures work now

659
00:28:06,419 --> 00:28:12,269
the real test is can be malicious

660
00:28:09,179 --> 00:28:15,659
plug-in generate a synthetic clique that

661
00:28:12,269 --> 00:28:19,320
is allowed by Mac OS more specifically

662
00:28:15,659 --> 00:28:22,500
does VLC as a process even with this

663
00:28:19,320 --> 00:28:25,678
malicious plug-in now loaded past the

664
00:28:22,500 --> 00:28:28,500
match code requirement data check the

665
00:28:25,679 --> 00:28:30,840
answer as shown on the slide is yes and

666
00:28:28,500 --> 00:28:33,179
again this is due to the fact that the

667
00:28:30,840 --> 00:28:36,658
flags Apple passed to the code signing

668
00:28:33,179 --> 00:28:39,450
api's said don't validate the executable

669
00:28:36,659 --> 00:28:41,789
or resources resources include plugins

670
00:28:39,450 --> 00:28:44,159
so basically they don't validate any of

671
00:28:41,789 --> 00:28:47,309
the plugins all right so now we're gonna

672
00:28:44,159 --> 00:28:48,960
show a brief demo in this demo we'll see

673
00:28:47,309 --> 00:28:51,570
that system integrity protection has

674
00:28:48,960 --> 00:28:52,049
been disabled we're gonna try to load a

675
00:28:51,570 --> 00:28:54,059
rootkit

676
00:28:52,049 --> 00:28:55,259
this is going to be blocked because as

677
00:28:54,059 --> 00:28:58,139
we mentioned at the beginning of the

678
00:28:55,259 --> 00:28:59,940
talk Mac OS now blocks the loading of

679
00:28:58,139 --> 00:29:03,508
kernel extensions until the user

680
00:28:59,940 --> 00:29:06,629
explicitly clicks allow however using

681
00:29:03,509 --> 00:29:09,029
the bypass we just described we can send

682
00:29:06,629 --> 00:29:11,370
a synthetic mouse click to the allow

683
00:29:09,029 --> 00:29:13,830
button and click allow which basically

684
00:29:11,370 --> 00:29:18,299
tells the operating system yeah sure go

685
00:29:13,830 --> 00:29:20,939
ahead and allow this rootkit to load so

686
00:29:18,299 --> 00:29:23,309
we can see this is 10 dot 14.3 this was

687
00:29:20,940 --> 00:29:25,139
the version of Mac OS at the time we can

688
00:29:23,309 --> 00:29:27,720
see that system integrity protection has

689
00:29:25,139 --> 00:29:29,340
been disabled we're gonna do a kick

690
00:29:27,720 --> 00:29:32,519
stack command to show that the rootkit

691
00:29:29,340 --> 00:29:34,500
know has not been loaded already we then

692
00:29:32,519 --> 00:29:36,210
try to load this and you have to again

693
00:29:34,500 --> 00:29:38,460
be root as a ways to load a kernel

694
00:29:36,210 --> 00:29:40,889
extension we can see this failed and it

695
00:29:38,460 --> 00:29:42,750
says the user has not approved this we

696
00:29:40,889 --> 00:29:45,120
now generate or execute our attack

697
00:29:42,750 --> 00:29:47,639
behind the scenes this is launching VLC

698
00:29:45,120 --> 00:29:50,340
and generating a synthetic click on the

699
00:29:47,639 --> 00:29:52,469
allow button we now run the kick stack

700
00:29:50,340 --> 00:29:54,840
command again and we can see that the

701
00:29:52,470 --> 00:29:57,840
rootkit has been a look been allowed to

702
00:29:54,840 --> 00:29:59,668
load because the system has been faked

703
00:29:57,840 --> 00:30:03,449
out because we it masquerade it as the

704
00:29:59,669 --> 00:30:05,340
user alright now we need to talk about

705
00:30:03,450 --> 00:30:06,870
something because in all honesty

706
00:30:05,340 --> 00:30:09,059
that demo didn't actually show the whole

707
00:30:06,870 --> 00:30:11,908
picture if we had captured the entire

708
00:30:09,059 --> 00:30:13,980
screen we would have seen a pop-up being

709
00:30:11,909 --> 00:30:15,600
generated basically saying hey a kernel

710
00:30:13,980 --> 00:30:17,149
extension is trying to load we would

711
00:30:15,600 --> 00:30:19,590
have seen the mouse moving by itself

712
00:30:17,149 --> 00:30:22,049
clicking the allow button and then the

713
00:30:19,590 --> 00:30:23,189
kernel extension being loaded so think

714
00:30:22,049 --> 00:30:24,720
about this for a second

715
00:30:23,190 --> 00:30:26,190
imagine you're sitting at your computer

716
00:30:24,720 --> 00:30:27,720
or working hard or perhaps you're

717
00:30:26,190 --> 00:30:31,470
browsing Instagram looking at pictures

718
00:30:27,720 --> 00:30:34,440
of Hawaii and E all of a sudden a pop-up

719
00:30:31,470 --> 00:30:36,450
appears the mouse moves and there's a

720
00:30:34,440 --> 00:30:39,869
click like toss that computer you're

721
00:30:36,450 --> 00:30:41,490
clearly clearly hacked so this is kind

722
00:30:39,869 --> 00:30:43,649
of problematic we've been talking about

723
00:30:41,490 --> 00:30:45,539
all these synthetic clicks and bypassing

724
00:30:43,649 --> 00:30:47,580
all these pop-ups but if we think about

725
00:30:45,539 --> 00:30:50,340
it in reality if we perform this action

726
00:30:47,580 --> 00:30:52,439
as is the user is going to clearly see

727
00:30:50,340 --> 00:30:54,990
that their computer is act so the

728
00:30:52,440 --> 00:30:57,299
question therefore is how can we perform

729
00:30:54,990 --> 00:30:58,950
these attacks in an invisible manner so

730
00:30:57,299 --> 00:31:04,249
that the user is not aware that this is

731
00:30:58,950 --> 00:31:06,360
actually going on turns out really easy

732
00:31:04,249 --> 00:31:08,940
basically we can just dim the screen

733
00:31:06,360 --> 00:31:11,758
this works because when the screen is

734
00:31:08,940 --> 00:31:14,100
dimmed the UI is still fully interactive

735
00:31:11,759 --> 00:31:16,740
you can't see it now if the screen is

736
00:31:14,100 --> 00:31:18,418
fully asleep it's not interactive so you

737
00:31:16,740 --> 00:31:20,820
can't send programmatic for example

738
00:31:18,419 --> 00:31:22,860
mouse clicks but as long as it's dimmed

739
00:31:20,820 --> 00:31:25,230
and not off you can interact with

740
00:31:22,860 --> 00:31:26,729
pop-ups show alerts click buttons and

741
00:31:25,230 --> 00:31:29,220
obviously the users not going to be able

742
00:31:26,730 --> 00:31:31,440
to see that so all the attacker has to

743
00:31:29,220 --> 00:31:32,639
do is first dim the screen then perform

744
00:31:31,440 --> 00:31:34,769
the action which will generate the

745
00:31:32,639 --> 00:31:37,619
pop-up then send the synthetic click to

746
00:31:34,769 --> 00:31:39,210
approve and allow the the action now we

747
00:31:37,619 --> 00:31:41,879
can see on the slide it's pretty trivial

748
00:31:39,210 --> 00:31:45,360
to dim the screen it's about 10 lines of

749
00:31:41,879 --> 00:31:46,590
code however we still have a problem so

750
00:31:45,360 --> 00:31:47,939
again imagine you're working on your

751
00:31:46,590 --> 00:31:50,279
computer and all of a sudden the screen

752
00:31:47,940 --> 00:31:52,860
randomly dims and then five seconds

753
00:31:50,279 --> 00:31:54,330
later UNM's you might not think you're

754
00:31:52,860 --> 00:31:56,549
hacked but you'll probably dig around

755
00:31:54,330 --> 00:31:58,439
this is still something odd right and as

756
00:31:56,549 --> 00:31:59,700
attackers or malware we really want to

757
00:31:58,440 --> 00:32:03,419
be a little more elegant we want to be a

758
00:31:59,700 --> 00:32:05,399
little more sophisticated so again let's

759
00:32:03,419 --> 00:32:07,499
address this so there's two things we

760
00:32:05,399 --> 00:32:10,350
can do first we can simply wait until

761
00:32:07,499 --> 00:32:11,879
the user is inactive and then we can dim

762
00:32:10,350 --> 00:32:14,039
the screen and perform the full attack

763
00:32:11,879 --> 00:32:17,039
turns out there's a beautiful API you

764
00:32:14,039 --> 00:32:18,390
can call CG event source second since

765
00:32:17,039 --> 00:32:20,040
last event and

766
00:32:18,390 --> 00:32:22,620
we'll give you the number of seconds

767
00:32:20,040 --> 00:32:24,149
since the user has interacted with the

768
00:32:22,620 --> 00:32:25,919
computer for example moving the mouse

769
00:32:24,150 --> 00:32:28,020
typing on the keyboard or using the

770
00:32:25,920 --> 00:32:30,140
computer in any other way so what you

771
00:32:28,020 --> 00:32:33,420
can do is you can just sit in a loop and

772
00:32:30,140 --> 00:32:34,800
call this API and then it will give you

773
00:32:33,420 --> 00:32:37,860
again the number of seconds that have

774
00:32:34,800 --> 00:32:39,300
elapsed since the last user activity and

775
00:32:37,860 --> 00:32:41,189
you can set whatever threshold you want

776
00:32:39,300 --> 00:32:43,980
this can be ten seconds thirty seconds

777
00:32:41,190 --> 00:32:45,840
five minutes an hour and basically then

778
00:32:43,980 --> 00:32:47,610
what you can do is you can wait until

779
00:32:45,840 --> 00:32:49,949
that threshold is hit and you can say

780
00:32:47,610 --> 00:32:52,290
okay it's been 60 seconds user is likely

781
00:32:49,950 --> 00:32:54,360
not using their keyboard and then you

782
00:32:52,290 --> 00:32:56,670
can dim the screen and perform the

783
00:32:54,360 --> 00:32:58,020
attack in this case even if the user is

784
00:32:56,670 --> 00:33:00,750
sitting in front of the computer but not

785
00:32:58,020 --> 00:33:02,580
using their computer if after say five

786
00:33:00,750 --> 00:33:04,470
minutes the screen dims they'll probably

787
00:33:02,580 --> 00:33:07,350
just assume that their display is going

788
00:33:04,470 --> 00:33:11,280
to sleep but turns out we can actually

789
00:33:07,350 --> 00:33:13,500
do even better so when the display

790
00:33:11,280 --> 00:33:16,320
legitimately is going to sleep for

791
00:33:13,500 --> 00:33:18,630
example when the system has determined

792
00:33:16,320 --> 00:33:20,580
the user has been inactive depending on

793
00:33:18,630 --> 00:33:23,550
their settings this actually is a

794
00:33:20,580 --> 00:33:25,530
process that we can hijack so when the

795
00:33:23,550 --> 00:33:27,870
system decides the display should go to

796
00:33:25,530 --> 00:33:31,139
sleep it does a few actions prior to

797
00:33:27,870 --> 00:33:34,919
that so first it broadcasts a message

798
00:33:31,140 --> 00:33:37,770
dims the screen to 50% then waits a few

799
00:33:34,920 --> 00:33:40,650
seconds before broadcasting another

800
00:33:37,770 --> 00:33:43,190
method fully dimming the screen then and

801
00:33:40,650 --> 00:33:45,540
only then it puts the display to sleep

802
00:33:43,190 --> 00:33:47,610
so what we can do is we can register for

803
00:33:45,540 --> 00:33:49,950
this first message that's broadcast the

804
00:33:47,610 --> 00:33:52,350
ki o message can device power off

805
00:33:49,950 --> 00:33:54,240
message and when we see this we know we

806
00:33:52,350 --> 00:33:56,010
have a few seconds before the display is

807
00:33:54,240 --> 00:33:58,170
going to sleep and that the system is

808
00:33:56,010 --> 00:33:59,640
already dimming the screen so what we

809
00:33:58,170 --> 00:34:02,400
can do is we can just hop into this

810
00:33:59,640 --> 00:34:04,680
process slightly speed it up and dim it

811
00:34:02,400 --> 00:34:08,010
fully to a hundred percent in that first

812
00:34:04,680 --> 00:34:10,500
step now the screen is fully black so we

813
00:34:08,010 --> 00:34:12,450
can perform our own action for example

814
00:34:10,500 --> 00:34:14,370
trying to load the kernel extension

815
00:34:12,449 --> 00:34:16,230
generating the synthetic click to click

816
00:34:14,370 --> 00:34:18,359
allow and then we can allow the screen

817
00:34:16,230 --> 00:34:20,040
to go fully asleep since we're

818
00:34:18,360 --> 00:34:21,960
essentially hijacking the legitimate

819
00:34:20,040 --> 00:34:25,168
screen going to sleep process already

820
00:34:21,960 --> 00:34:26,550
the user is nuf is not going to detect

821
00:34:25,168 --> 00:34:30,049
anything is a mess

822
00:34:26,550 --> 00:34:31,369
so we've achieved full invincibility

823
00:34:30,050 --> 00:34:34,159
okay

824
00:34:31,369 --> 00:34:36,679
let's wrap some of this up first I

825
00:34:34,159 --> 00:34:39,349
really want to stress or rather Rees

826
00:34:36,679 --> 00:34:42,319
tres the power of synthetic events if

827
00:34:39,349 --> 00:34:44,649
once you gain access to a system if you

828
00:34:42,319 --> 00:34:47,899
have the ability to programmatically or

829
00:34:44,649 --> 00:34:50,868
synthetically interact with a UI you can

830
00:34:47,899 --> 00:34:53,719
bypass a myriad of largely unrelated

831
00:34:50,869 --> 00:34:55,339
security and privacy mechanisms with a

832
00:34:53,719 --> 00:34:58,519
single click that's an incredibly

833
00:34:55,339 --> 00:35:00,619
powerful capability also why not to pick

834
00:34:58,519 --> 00:35:03,379
on Apple too much because I am somewhat

835
00:35:00,619 --> 00:35:06,170
fond of them the truth is their track

836
00:35:03,380 --> 00:35:08,559
record against protecting against some

837
00:35:06,170 --> 00:35:11,119
of these attacks is not all it could be

838
00:35:08,559 --> 00:35:13,880
but to be fair this is rather a

839
00:35:11,119 --> 00:35:16,190
difficult problem as they always have to

840
00:35:13,880 --> 00:35:18,470
balance usability and security and

841
00:35:16,190 --> 00:35:19,940
that's never an easy thing to do so

842
00:35:18,470 --> 00:35:22,549
Apple can't just go out and say we're

843
00:35:19,940 --> 00:35:24,349
gonna block all synthetic events because

844
00:35:22,549 --> 00:35:25,670
there's a lot of popular applications

845
00:35:24,349 --> 00:35:28,099
that perhaps have been written rather

846
00:35:25,670 --> 00:35:30,190
poorly or legitimately need to use

847
00:35:28,099 --> 00:35:32,450
synthetic cliques and Apple is

848
00:35:30,190 --> 00:35:34,730
understandably so not going to break all

849
00:35:32,450 --> 00:35:36,919
these popular apps it's good news for us

850
00:35:34,730 --> 00:35:39,349
as hackers or attackers because often we

851
00:35:36,920 --> 00:35:41,960
can exploit and leverage this kind of

852
00:35:39,349 --> 00:35:43,690
miss balance between usability and

853
00:35:41,960 --> 00:35:47,539
security to continue to perform

854
00:35:43,690 --> 00:35:49,309
previously disallowed actions now also

855
00:35:47,539 --> 00:35:50,869
and again not to pick on Apple too much

856
00:35:49,309 --> 00:35:52,940
Apple likes to spend a lot of time

857
00:35:50,869 --> 00:35:55,609
marketing right they get up on stage and

858
00:35:52,940 --> 00:35:59,150
in a keynote basically say we have a fix

859
00:35:55,609 --> 00:36:01,069
and that's great but if we actually look

860
00:35:59,150 --> 00:36:04,009
as we showed in this presentation how

861
00:36:01,069 --> 00:36:05,480
this fix was implemented it really

862
00:36:04,009 --> 00:36:07,489
should have never made it to production

863
00:36:05,480 --> 00:36:09,140
code I mean it's a neat bug but if

864
00:36:07,489 --> 00:36:11,329
anyone at Apple had actually looked at

865
00:36:09,140 --> 00:36:12,348
this code and looked at it from a

866
00:36:11,329 --> 00:36:14,359
security point of view

867
00:36:12,349 --> 00:36:16,880
they'd have very quickly discovered that

868
00:36:14,359 --> 00:36:18,529
this was a problem and I always like to

869
00:36:16,880 --> 00:36:21,069
think that you know if I can find this

870
00:36:18,529 --> 00:36:23,539
bug there's bad people out there there's

871
00:36:21,069 --> 00:36:24,829
apt groups nation-state hackers that are

872
00:36:23,539 --> 00:36:26,749
way more sophisticated way more

873
00:36:24,829 --> 00:36:29,539
resourced and likely are going to find

874
00:36:26,749 --> 00:36:31,220
these bugs as well but there is some

875
00:36:29,539 --> 00:36:34,190
good news Apple has already mitigated

876
00:36:31,220 --> 00:36:36,470
this bug so kudos Apple and also even

877
00:36:34,190 --> 00:36:38,720
more news Apple has recently announced

878
00:36:36,470 --> 00:36:40,939
the launching of a Mac OS bug bounty

879
00:36:38,720 --> 00:36:42,348
program that's coming soon I'm really

880
00:36:40,940 --> 00:36:43,940
excited about this because I

881
00:36:42,349 --> 00:36:45,290
passionately believe that this is a

882
00:36:43,940 --> 00:36:47,150
great step in the

883
00:36:45,290 --> 00:36:49,670
right direction that will bring more

884
00:36:47,150 --> 00:36:52,280
security research researchers to look

885
00:36:49,670 --> 00:36:53,570
for these bugs on the platform because

886
00:36:52,280 --> 00:36:55,490
if we really think about it we're kind

887
00:36:53,570 --> 00:36:57,950
of all in this together and end result

888
00:36:55,490 --> 00:37:01,430
is Mac OS will be more secure which will

889
00:36:57,950 --> 00:37:03,830
benefit users throughout the world now

890
00:37:01,430 --> 00:37:06,200
in the meantime if there's still other

891
00:37:03,830 --> 00:37:08,270
ways to bypass this or you know perhaps

892
00:37:06,200 --> 00:37:09,649
your extra concerned about these

893
00:37:08,270 --> 00:37:11,840
synthetic cliques or you're running on

894
00:37:09,650 --> 00:37:15,230
an older version of Mac OS because your

895
00:37:11,840 --> 00:37:17,420
users are not updating you might want to

896
00:37:15,230 --> 00:37:20,320
figure out how to either prevent or

897
00:37:17,420 --> 00:37:23,690
detect these synthetic cliques yourself

898
00:37:20,320 --> 00:37:26,300
so the first thing let's talk about kind

899
00:37:23,690 --> 00:37:28,580
of inclusion is how to programmatically

900
00:37:26,300 --> 00:37:30,440
prevent these synthetic cliques in your

901
00:37:28,580 --> 00:37:32,420
own application so imagine you're

902
00:37:30,440 --> 00:37:34,730
writing a firewall application that will

903
00:37:32,420 --> 00:37:37,370
detect on other unauthorized Network

904
00:37:34,730 --> 00:37:38,360
action obviously if you detect the piece

905
00:37:37,370 --> 00:37:40,310
of malware making an unauthorized

906
00:37:38,360 --> 00:37:42,170
connection you really don't want that

907
00:37:40,310 --> 00:37:44,029
malware to be able to send a synthetic

908
00:37:42,170 --> 00:37:46,100
click to your alert to just allow the

909
00:37:44,030 --> 00:37:48,320
allow the action right you want to be

910
00:37:46,100 --> 00:37:50,270
able to prevent that turns out that's

911
00:37:48,320 --> 00:37:52,940
actually pretty easy to do again in your

912
00:37:50,270 --> 00:37:55,910
own application code what you can do is

913
00:37:52,940 --> 00:37:58,700
you can subclass the Mouse down event

914
00:37:55,910 --> 00:38:00,950
method and this will be invoked anytime

915
00:37:58,700 --> 00:38:03,529
a click is delivered to your application

916
00:38:00,950 --> 00:38:06,140
this gives you the ability to examine

917
00:38:03,530 --> 00:38:09,410
this click and tell the system if you

918
00:38:06,140 --> 00:38:11,779
want to handle it or not so what you can

919
00:38:09,410 --> 00:38:14,629
do is when this message is delivered to

920
00:38:11,780 --> 00:38:17,330
you part of the information about the

921
00:38:14,630 --> 00:38:18,830
mouse click is whether or not it was

922
00:38:17,330 --> 00:38:20,720
synthetically generated so Apple

923
00:38:18,830 --> 00:38:23,240
actually tells you there's a flag in the

924
00:38:20,720 --> 00:38:25,279
click event that is going to be set to

925
00:38:23,240 --> 00:38:27,080
zero if it's programmatically or

926
00:38:25,280 --> 00:38:28,700
synthetically generated if it's

927
00:38:27,080 --> 00:38:31,340
generated via the user it's going to be

928
00:38:28,700 --> 00:38:34,040
set to one so as you can see on the

929
00:38:31,340 --> 00:38:36,740
slide in our custom Mouse down event we

930
00:38:34,040 --> 00:38:38,390
examine the process ID and we basically

931
00:38:36,740 --> 00:38:42,830
say if this process is running as root

932
00:38:38,390 --> 00:38:44,660
or it belongs to Apple we will allow it

933
00:38:42,830 --> 00:38:46,730
the logic is actually inverted so in

934
00:38:44,660 --> 00:38:48,710
this case we say if it's not from Apple

935
00:38:46,730 --> 00:38:50,510
or not running as root we are going to

936
00:38:48,710 --> 00:38:52,580
block it and the way you block it is you

937
00:38:50,510 --> 00:38:54,890
just return from this function and that

938
00:38:52,580 --> 00:38:57,860
will effectively discard or ignore the

939
00:38:54,890 --> 00:38:58,700
event if you decide that this event is

940
00:38:57,860 --> 00:39:00,530
ok you

941
00:38:58,700 --> 00:39:03,049
simply call the superclass's mousedown

942
00:39:00,530 --> 00:39:05,329
method and this will call back up into

943
00:39:03,050 --> 00:39:07,250
the objective-c runtime and let the

944
00:39:05,329 --> 00:39:09,079
click proceed so again this gives you

945
00:39:07,250 --> 00:39:14,390
your own ability to filter and mouse

946
00:39:09,079 --> 00:39:17,359
clicks now you might want to generically

947
00:39:14,390 --> 00:39:20,180
detect since that it clicks globally on

948
00:39:17,359 --> 00:39:22,670
the system turns out this is pretty easy

949
00:39:20,180 --> 00:39:25,609
to do as well so what you can do is you

950
00:39:22,670 --> 00:39:28,460
register something called an event tap

951
00:39:25,609 --> 00:39:31,490
and once you have registered an event

952
00:39:28,460 --> 00:39:33,890
tap anytime a mouse click is generated

953
00:39:31,490 --> 00:39:36,200
either by the user or synthetically in

954
00:39:33,890 --> 00:39:38,690
any capacity any of the attacks or

955
00:39:36,200 --> 00:39:41,060
techniques we described your event tap

956
00:39:38,690 --> 00:39:43,579
will be invoked with all the information

957
00:39:41,060 --> 00:39:45,859
about the click what process generated

958
00:39:43,579 --> 00:39:47,810
it the XY coordinates and most

959
00:39:45,859 --> 00:39:50,000
importantly whether or not it was

960
00:39:47,810 --> 00:39:52,250
synthetically generated so here we have

961
00:39:50,000 --> 00:39:55,040
code again to do this we can see in our

962
00:39:52,250 --> 00:39:58,010
event callback we call the get integer

963
00:39:55,040 --> 00:40:01,369
value field method and this will return

964
00:39:58,010 --> 00:40:03,980
a zero or a one if it's set to zero this

965
00:40:01,369 --> 00:40:07,310
means this event has been synthetically

966
00:40:03,980 --> 00:40:09,500
generated one of the tools we've created

967
00:40:07,310 --> 00:40:11,900
at digital was an enterprise security

968
00:40:09,500 --> 00:40:13,970
product and we included this exact code

969
00:40:11,900 --> 00:40:16,040
because we decided that it would

970
00:40:13,970 --> 00:40:18,589
probably be interesting to log and

971
00:40:16,040 --> 00:40:20,420
perhaps alert anytime we detected a

972
00:40:18,589 --> 00:40:22,220
synthetic event because if you think

973
00:40:20,420 --> 00:40:24,500
about it especially perhaps in the

974
00:40:22,220 --> 00:40:26,598
enterprise there's really not a lot of

975
00:40:24,500 --> 00:40:28,130
reason why synthetic clicks or

976
00:40:26,599 --> 00:40:31,940
programmatic mouse clicks should be

977
00:40:28,130 --> 00:40:33,170
generated so this meant that with no a

978
00:40:31,940 --> 00:40:35,690
priori knowledge we could actually

979
00:40:33,170 --> 00:40:37,339
detect the attack I described today

980
00:40:35,690 --> 00:40:39,470
because we almost didn't care how you

981
00:40:37,339 --> 00:40:41,390
generated synthetic click if you trick

982
00:40:39,470 --> 00:40:43,549
the system into doing it if you subvert

983
00:40:41,390 --> 00:40:45,140
VLC basically said hey we're just going

984
00:40:43,550 --> 00:40:46,520
to log an alert on the fact that a

985
00:40:45,140 --> 00:40:49,839
synthetic click was generated and

986
00:40:46,520 --> 00:40:52,310
actually that's not that difficult to do

987
00:40:49,839 --> 00:40:54,710
all right great so that's a wrap

988
00:40:52,310 --> 00:40:56,869
hopefully today I've Illustrated the

989
00:40:54,710 --> 00:40:59,869
power of synthetic clicks and showed

990
00:40:56,869 --> 00:41:02,960
that if you find a way to generate or

991
00:40:59,869 --> 00:41:05,150
these clicks you can often undermine a

992
00:41:02,960 --> 00:41:07,550
ton of local security and privacy

993
00:41:05,150 --> 00:41:09,500
mechanisms on a personal note I want to

994
00:41:07,550 --> 00:41:11,900
thank the Friends of Objective C which

995
00:41:09,500 --> 00:41:13,670
sponsor a lot of my research

996
00:41:11,900 --> 00:41:16,549
and of course I want to thank you and

997
00:41:13,670 --> 00:41:18,020
the echo party organization and

998
00:41:16,549 --> 00:41:19,849
conference for putting on what I think

999
00:41:18,020 --> 00:41:21,440
is the best security conference in the

1000
00:41:19,849 --> 00:41:32,240
world so let's give everyone a round of

1001
00:41:21,440 --> 00:41:34,579
applause so I think we have a minute or

1002
00:41:32,240 --> 00:41:36,410
two for questions if not if I get kicked

1003
00:41:34,579 --> 00:41:38,539
off the stage I will be around I love to

1004
00:41:36,410 --> 00:41:40,009
nerd out and talk about this so feel

1005
00:41:38,539 --> 00:41:41,779
free to come and chat with me and I

1006
00:41:40,010 --> 00:41:43,670
speak a little bit of Spanish Spanish as

1007
00:41:41,779 --> 00:41:44,990
well so you know you spoke Spanish we

1008
00:41:43,670 --> 00:41:50,060
can we can figure something out so again

1009
00:41:44,990 --> 00:41:53,848
thank you know pretty bus

1010
00:41:50,060 --> 00:41:53,849
[Applause]

