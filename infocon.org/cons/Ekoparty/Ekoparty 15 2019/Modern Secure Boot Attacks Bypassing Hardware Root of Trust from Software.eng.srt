1
00:00:00,030 --> 00:00:05,970
Alex mattress over modern saguru attacks

2
00:00:03,449 --> 00:00:08,490
many hardware vendors are and morning

3
00:00:05,970 --> 00:00:10,649
modern security booth by maureen root of

4
00:00:08,490 --> 00:00:13,290
trust of the hardware in this

5
00:00:10,650 --> 00:00:15,030
presentation I explain new security

6
00:00:13,290 --> 00:00:17,400
issues to bypass a specific

7
00:00:15,030 --> 00:00:19,560
implementation of indelible who are

8
00:00:17,400 --> 00:00:23,970
technology in one of the most common

9
00:00:19,560 --> 00:00:26,729
enterprise vendors because I wake up a

10
00:00:23,970 --> 00:00:29,549
tear and I'm glad to be on this stage

11
00:00:26,730 --> 00:00:32,099
second time on this conference and my

12
00:00:29,550 --> 00:00:34,050
talk it's about like a talking hardware

13
00:00:32,098 --> 00:00:37,529
root of trust in common implementation

14
00:00:34,050 --> 00:00:40,260
and u5 firmware so just a reminder I'm

15
00:00:37,530 --> 00:00:42,059
Alex Morozov I'm working for Nvidia

16
00:00:40,260 --> 00:00:45,089
leading offensive security research

17
00:00:42,059 --> 00:00:48,780
there and I did a lot of stuff regarding

18
00:00:45,090 --> 00:00:51,510
u5 firmware security research so just a

19
00:00:48,780 --> 00:00:55,920
small disclaimer I'm not talking from my

20
00:00:51,510 --> 00:00:58,800
employee point of view I just described

21
00:00:55,920 --> 00:00:59,460
in my own research and all bad jokes and

22
00:00:58,800 --> 00:01:02,149
mistakes

23
00:00:59,460 --> 00:01:06,390
it's on me and of course zero days too

24
00:01:02,149 --> 00:01:13,080
so for the target of this research I

25
00:01:06,390 --> 00:01:15,840
take lean over P 50 lap top and before I

26
00:01:13,080 --> 00:01:18,658
was mostly targeting gigabyte a stack

27
00:01:15,840 --> 00:01:21,990
and a massage so no more webby targets

28
00:01:18,659 --> 00:01:25,950
I took a serious enterprise laptop to

29
00:01:21,990 --> 00:01:31,259
basically prove it has a lot of issues

30
00:01:25,950 --> 00:01:33,960
too so in this talk we will be talk

31
00:01:31,259 --> 00:01:39,259
about what is a hardware root of trust

32
00:01:33,960 --> 00:01:42,479
is and also will be touch some

33
00:01:39,259 --> 00:01:45,540
architectural mistakes not architectural

34
00:01:42,479 --> 00:01:47,640
mistake but let's see in reference

35
00:01:45,540 --> 00:01:50,880
implementation Intel provide a lot of

36
00:01:47,640 --> 00:01:53,820
freedom to OMS who basically make

37
00:01:50,880 --> 00:01:56,899
mistakes in their implementations also

38
00:01:53,820 --> 00:01:59,429
we will talk about the compute race and

39
00:01:56,899 --> 00:02:03,950
implementation of compute racing lenovo

40
00:01:59,430 --> 00:02:07,590
laptops nor days laptops and interesting

41
00:02:03,950 --> 00:02:09,780
thing I found recently over windows

42
00:02:07,590 --> 00:02:12,180
management interface you can actually

43
00:02:09,780 --> 00:02:13,860
call with my handlers and

44
00:02:12,180 --> 00:02:16,470
probably as you remember from my

45
00:02:13,860 --> 00:02:17,909
previous talk yesterday assume I can

46
00:02:16,470 --> 00:02:20,430
list it's kind of like a callback

47
00:02:17,909 --> 00:02:22,679
function from the operating system level

48
00:02:20,430 --> 00:02:25,920
directly to the buyers and sometimes

49
00:02:22,680 --> 00:02:28,859
it's directly called code inside in the

50
00:02:25,920 --> 00:02:35,760
most privileged mode system management

51
00:02:28,859 --> 00:02:38,129
mode on x86 systems so let's start about

52
00:02:35,760 --> 00:02:39,899
what is the hardware root of trust and

53
00:02:38,129 --> 00:02:42,798
what is a problem sexually

54
00:02:39,900 --> 00:02:46,920
implementation of hardware root of trust

55
00:02:42,799 --> 00:02:49,590
in most of the cases hardware root of

56
00:02:46,920 --> 00:02:51,450
trust should be implemented in our tails

57
00:02:49,590 --> 00:02:55,680
that's mean directly in the hardware in

58
00:02:51,450 --> 00:02:57,540
silicon but silicon RTL level it's hard

59
00:02:55,680 --> 00:02:59,400
to modify actually it's no way how you

60
00:02:57,540 --> 00:03:02,909
can modify it after releasing the

61
00:02:59,400 --> 00:03:05,639
product and of course it's create a lot

62
00:03:02,909 --> 00:03:09,000
of limitation for the companies to

63
00:03:05,639 --> 00:03:12,120
implement their route of trust that way

64
00:03:09,000 --> 00:03:18,209
because if something happens they can

65
00:03:12,120 --> 00:03:21,989
patch it and because of that hardware

66
00:03:18,209 --> 00:03:25,489
root of trust is kind of mix between the

67
00:03:21,989 --> 00:03:30,030
firmware level and the hardware also

68
00:03:25,489 --> 00:03:33,180
common marketing tool even if one bit

69
00:03:30,030 --> 00:03:35,970
inside the hardware lock something the

70
00:03:33,180 --> 00:03:38,129
vendors say it's a hardware implemented

71
00:03:35,970 --> 00:03:40,739
root of trust or harder implemented

72
00:03:38,129 --> 00:03:43,078
technology for protecting something but

73
00:03:40,739 --> 00:03:47,790
it's not exactly true because one bit

74
00:03:43,079 --> 00:03:52,409
it's not really a security feature it

75
00:03:47,790 --> 00:03:58,858
just lock mechanism which is in reality

76
00:03:52,409 --> 00:04:01,470
have many ways codes can be bypass it I

77
00:03:58,859 --> 00:04:03,299
will be back on this white and actually

78
00:04:01,470 --> 00:04:06,569
probably you remember from my previous

79
00:04:03,299 --> 00:04:09,569
presentation yesterday it's because as

80
00:04:06,569 --> 00:04:12,418
example boot guard as a technology for

81
00:04:09,569 --> 00:04:17,548
the macerate boot has root of trust

82
00:04:12,419 --> 00:04:20,519
based on TPM and TPM already have a

83
00:04:17,548 --> 00:04:23,370
proven research from Jeremy Boone and

84
00:04:20,519 --> 00:04:26,450
trommel Hudson how they basically can

85
00:04:23,370 --> 00:04:29,480
attack the TPM or attack

86
00:04:26,450 --> 00:04:34,760
the TPM communication between the actual

87
00:04:29,480 --> 00:04:39,530
former bias and the TPM and fake the

88
00:04:34,760 --> 00:04:42,950
responses from TPM to the bias it's a

89
00:04:39,530 --> 00:04:45,200
good flow for the boot guard and let's

90
00:04:42,950 --> 00:04:48,620
see how it should be work in the perfect

91
00:04:45,200 --> 00:04:51,140
world we have a CPU reset and the

92
00:04:48,620 --> 00:04:53,860
microcode make attestation for boot

93
00:04:51,140 --> 00:04:56,440
guard identification code model and

94
00:04:53,860 --> 00:04:59,750
authenticated code model make

95
00:04:56,440 --> 00:05:05,600
attestation before even before the reset

96
00:04:59,750 --> 00:05:09,590
vector for IBB hash which is kind of

97
00:05:05,600 --> 00:05:12,860
like hash for first stage of the boot

98
00:05:09,590 --> 00:05:16,700
guard technology and it's mikage station

99
00:05:12,860 --> 00:05:19,580
for for transition from the ACM to the

100
00:05:16,700 --> 00:05:23,780
starting loading the bias on the actual

101
00:05:19,580 --> 00:05:27,950
boot process so looks perfect all the

102
00:05:23,780 --> 00:05:33,140
transitions secure and how's what it can

103
00:05:27,950 --> 00:05:35,479
be wrong right so first of all boot

104
00:05:33,140 --> 00:05:40,120
guard doesn't cover the microcode and

105
00:05:35,480 --> 00:05:43,850
ACM so basically if we have any

106
00:05:40,120 --> 00:05:47,000
vulnerable versions of a cm and micro

107
00:05:43,850 --> 00:05:51,470
code we can downgrade them and we can

108
00:05:47,000 --> 00:05:58,970
basically use one-day issues to attack

109
00:05:51,470 --> 00:06:01,580
this technology so if boot guard ACM is

110
00:05:58,970 --> 00:06:04,910
compromised and if we downgrade the

111
00:06:01,580 --> 00:06:08,659
microcode with known issues it doesn't

112
00:06:04,910 --> 00:06:11,750
make sense on or all the checks which is

113
00:06:08,660 --> 00:06:13,910
exist on upper level boot process inside

114
00:06:11,750 --> 00:06:17,660
the BIOS firmware because it's already

115
00:06:13,910 --> 00:06:24,050
done it's compromised right so it's how

116
00:06:17,660 --> 00:06:27,080
the reality are but why we don't lock

117
00:06:24,050 --> 00:06:30,170
everything inside the hardware and let

118
00:06:27,080 --> 00:06:34,340
the firmware just boot boot a trusted so

119
00:06:30,170 --> 00:06:37,300
first of all oh my clock secrets because

120
00:06:34,340 --> 00:06:38,719
of supply chain he'll support process

121
00:06:37,300 --> 00:06:43,040
the cost

122
00:06:38,720 --> 00:06:45,470
vulnerabilities is very high and I mean

123
00:06:43,040 --> 00:06:47,300
cost for the vendor because you can't

124
00:06:45,470 --> 00:06:49,580
release patch for the card we're and

125
00:06:47,300 --> 00:06:53,360
basically you need to recall your

126
00:06:49,580 --> 00:06:57,640
hardware to replace it as example google

127
00:06:53,360 --> 00:07:01,360
recently make a recall for their dangles

128
00:06:57,640 --> 00:07:04,300
for visit it on cheap first version and

129
00:07:01,360 --> 00:07:09,950
probably it cost a lot of money for them

130
00:07:04,300 --> 00:07:12,350
so the cost for the updates it's really

131
00:07:09,950 --> 00:07:15,530
high and all the vendors try to

132
00:07:12,350 --> 00:07:17,900
basically reduce the secrets which is

133
00:07:15,530 --> 00:07:20,809
locked inside the hardware because of

134
00:07:17,900 --> 00:07:23,299
that because the price for these issues

135
00:07:20,810 --> 00:07:27,170
for basically fixing them it's very high

136
00:07:23,300 --> 00:07:30,560
and in the most of the cases we can see

137
00:07:27,170 --> 00:07:34,370
the mix of the hardware and firmware and

138
00:07:30,560 --> 00:07:38,060
it's how the reality looks like but

139
00:07:34,370 --> 00:07:41,870
let's talk about connection of operating

140
00:07:38,060 --> 00:07:47,690
system level firmware and some of the

141
00:07:41,870 --> 00:07:49,790
hardware related secrets so probably you

142
00:07:47,690 --> 00:07:52,669
remember from my talk or you know what

143
00:07:49,790 --> 00:07:57,140
is a system management interface is

144
00:07:52,669 --> 00:08:00,680
summize so and it is a powershell script

145
00:07:57,140 --> 00:08:03,469
which is basically get some information

146
00:08:00,680 --> 00:08:05,690
from a CPI table about what version of

147
00:08:03,470 --> 00:08:09,850
the laptop what version of the buyers

148
00:08:05,690 --> 00:08:12,610
and etc it's basically the information

149
00:08:09,850 --> 00:08:15,530
enough for the attacker to create

150
00:08:12,610 --> 00:08:17,120
payload for specific version of the

151
00:08:15,530 --> 00:08:21,619
laptop and you can get this

152
00:08:17,120 --> 00:08:24,500
automatically also the same way with the

153
00:08:21,620 --> 00:08:27,140
powershell can disable the boot guard in

154
00:08:24,500 --> 00:08:29,180
enterprise laptops but i will not talk

155
00:08:27,140 --> 00:08:32,960
much about that because I cover

156
00:08:29,180 --> 00:08:37,400
yesterday let's go to windows management

157
00:08:32,960 --> 00:08:39,110
interface directly and this picture

158
00:08:37,400 --> 00:08:41,539
actually is still from Lenovo

159
00:08:39,110 --> 00:08:45,220
Lenovo official documentation you can

160
00:08:41,539 --> 00:08:48,500
see the links here and you basically can

161
00:08:45,220 --> 00:08:52,010
look so basically we have this venom

162
00:08:48,500 --> 00:08:52,620
windows management interface from Lenovo

163
00:08:52,010 --> 00:08:54,870
which

164
00:08:52,620 --> 00:08:58,260
which is basically communicating

165
00:08:54,870 --> 00:09:00,720
directly with the BIOS settings and as

166
00:08:58,260 --> 00:09:04,189
the researchers we will think what we

167
00:09:00,720 --> 00:09:08,850
can basically change from that right and

168
00:09:04,190 --> 00:09:13,530
actually we can change a lot but most

169
00:09:08,850 --> 00:09:20,160
interesting ones I would say it is this

170
00:09:13,530 --> 00:09:23,280
one's oh so it is this one's because we

171
00:09:20,160 --> 00:09:26,699
can enable disable secure boot we can

172
00:09:23,280 --> 00:09:29,459
enable disable txt we can enable disable

173
00:09:26,700 --> 00:09:31,620
virtualization and even with the D for

174
00:09:29,460 --> 00:09:32,520
protection of the may attacks direct

175
00:09:31,620 --> 00:09:36,560
memory access

176
00:09:32,520 --> 00:09:40,410
so think about basically if we have

177
00:09:36,560 --> 00:09:43,319
privilege privilege it access to the

178
00:09:40,410 --> 00:09:45,329
laptop we can do whatever we want even

179
00:09:43,320 --> 00:09:47,610
from a P rating system level we don't

180
00:09:45,330 --> 00:09:50,550
need actual physical access or BIOS

181
00:09:47,610 --> 00:09:55,380
exploit because we have everything and

182
00:09:50,550 --> 00:09:57,390
windows management interface so and also

183
00:09:55,380 --> 00:10:00,870
of course you can find all these

184
00:09:57,390 --> 00:10:05,400
structures for basically when we define

185
00:10:00,870 --> 00:10:08,940
it in a CPI directly if you go to Deere

186
00:10:05,400 --> 00:10:11,189
dsdt table a supply table you can found

187
00:10:08,940 --> 00:10:16,110
everything related to this management

188
00:10:11,190 --> 00:10:21,060
interface and it's a sample script which

189
00:10:16,110 --> 00:10:25,230
is basically change password for the

190
00:10:21,060 --> 00:10:32,040
BIOS administration from the operating

191
00:10:25,230 --> 00:10:34,260
system level it's scary right so and

192
00:10:32,040 --> 00:10:36,209
it's actually how this research get

193
00:10:34,260 --> 00:10:37,890
started because it was thinking ok what

194
00:10:36,210 --> 00:10:39,750
I can do more from this system

195
00:10:37,890 --> 00:10:43,380
management of windows management

196
00:10:39,750 --> 00:10:46,230
interface and actually I can do a lot

197
00:10:43,380 --> 00:10:49,770
because Lenovo have a Dixie driver with

198
00:10:46,230 --> 00:10:52,200
remote configuration it's the name of

199
00:10:49,770 --> 00:10:56,270
the driver interesting it has a little

200
00:10:52,200 --> 00:11:00,090
set up automation and set up under OS

201
00:10:56,270 --> 00:11:02,850
SMM and it's get me a super super

202
00:11:00,090 --> 00:11:05,700
interested what is inside especially

203
00:11:02,850 --> 00:11:11,510
this ones

204
00:11:05,700 --> 00:11:14,520
so Lenova set up under OS dixie driver

205
00:11:11,510 --> 00:11:17,120
mostly communicated with Lenovo password

206
00:11:14,520 --> 00:11:20,310
manager settings inside the firmware and

207
00:11:17,120 --> 00:11:23,310
Lenovo under OS it's basically

208
00:11:20,310 --> 00:11:28,020
responsible for wires passwords and bios

209
00:11:23,310 --> 00:11:31,040
settings and it has a 12 is my handlers

210
00:11:28,020 --> 00:11:34,470
which is actually huge attacks your face

211
00:11:31,040 --> 00:11:37,079
Lenovo hidden Satan it's already kind of

212
00:11:34,470 --> 00:11:40,710
interesting name right for for the

213
00:11:37,080 --> 00:11:43,680
driver and it's has a two functions for

214
00:11:40,710 --> 00:11:47,070
computer ace enable and disable and

215
00:11:43,680 --> 00:11:49,680
compute race for you if you not remember

216
00:11:47,070 --> 00:11:55,650
it's kind of a rootkit for basically

217
00:11:49,680 --> 00:11:57,660
tracking your laptop and this technology

218
00:11:55,650 --> 00:12:00,569
had been developed for anti-theft

219
00:11:57,660 --> 00:12:02,850
purposes but honestly it's been already

220
00:12:00,570 --> 00:12:07,200
in use for the malicious purposes by

221
00:12:02,850 --> 00:12:10,770
some of the apt attackers and setup

222
00:12:07,200 --> 00:12:13,590
automation have a four is my handlers

223
00:12:10,770 --> 00:12:15,210
for configuration password and boot

224
00:12:13,590 --> 00:12:18,150
order but boot order actually it's

225
00:12:15,210 --> 00:12:20,430
important because it can as example

226
00:12:18,150 --> 00:12:23,069
change the order of the boot boot

227
00:12:20,430 --> 00:12:25,439
devices and if you connect physically

228
00:12:23,070 --> 00:12:28,020
USB flash drive with something malicious

229
00:12:25,440 --> 00:12:30,690
you can basically put on the first place

230
00:12:28,020 --> 00:12:34,319
your drive before the operating system

231
00:12:30,690 --> 00:12:36,090
boots also secure boot configuration has

232
00:12:34,320 --> 00:12:38,930
a lot of other options I will talk about

233
00:12:36,090 --> 00:12:41,400
a bit later on the next slide and

234
00:12:38,930 --> 00:12:46,469
specifically automation for assume I

235
00:12:41,400 --> 00:12:49,620
have a 12 other is my handlers and which

236
00:12:46,470 --> 00:12:51,870
is I all this information it's under

237
00:12:49,620 --> 00:12:54,870
command that I basically recover based

238
00:12:51,870 --> 00:12:58,290
on reverse engineering and this one's I

239
00:12:54,870 --> 00:13:01,710
not recovery yet it's books well very

240
00:12:58,290 --> 00:13:04,110
interesting and promising to so but

241
00:13:01,710 --> 00:13:07,350
let's back to compute race why compute

242
00:13:04,110 --> 00:13:09,510
race is interesting first of all last

243
00:13:07,350 --> 00:13:12,390
year is cert being discovered the

244
00:13:09,510 --> 00:13:15,750
rootkit law Jack's which is based on

245
00:13:12,390 --> 00:13:19,900
this technology to resist inside the

246
00:13:15,750 --> 00:13:24,490
system and in Lenovo by

247
00:13:19,900 --> 00:13:26,800
we do have a six Dixey drivers mostly in

248
00:13:24,490 --> 00:13:29,830
the samam which is basically responsible

249
00:13:26,800 --> 00:13:33,120
for arcus trade this technology inside

250
00:13:29,830 --> 00:13:35,620
your machine and we have like

251
00:13:33,120 --> 00:13:39,190
computerized instyler which is basically

252
00:13:35,620 --> 00:13:41,950
installed operating system component on

253
00:13:39,190 --> 00:13:45,400
your system automatically we do have a

254
00:13:41,950 --> 00:13:49,240
computer ace enable which is basically

255
00:13:45,400 --> 00:13:51,850
enables the technology and disabled but

256
00:13:49,240 --> 00:13:54,910
I was thinking okay if we disable

257
00:13:51,850 --> 00:13:57,730
compute race on your wireless settings

258
00:13:54,910 --> 00:14:01,660
it will be really disable it or it will

259
00:13:57,730 --> 00:14:04,150
be still persist on your system and also

260
00:14:01,660 --> 00:14:06,219
the more remote configuration is

261
00:14:04,150 --> 00:14:08,800
actually most interesting ones that mean

262
00:14:06,220 --> 00:14:11,680
maybe you can remotely activate

263
00:14:08,800 --> 00:14:18,609
computation your system if it's really

264
00:14:11,680 --> 00:14:22,420
not a deactivated right so back to back

265
00:14:18,610 --> 00:14:25,990
to research in 2017 what I did for

266
00:14:22,420 --> 00:14:28,240
recover compute trace is my handler it

267
00:14:25,990 --> 00:14:30,400
is actually a lot of interesting

268
00:14:28,240 --> 00:14:33,250
information I will talk about on the

269
00:14:30,400 --> 00:14:35,949
next slide but what I get from that

270
00:14:33,250 --> 00:14:39,460
research we have this option current

271
00:14:35,950 --> 00:14:45,070
setting disabled permanently compute

272
00:14:39,460 --> 00:14:48,490
race you can see here so and honestly

273
00:14:45,070 --> 00:14:51,490
it's a option computer is still

274
00:14:48,490 --> 00:14:54,670
active on your system but basically it's

275
00:14:51,490 --> 00:14:56,800
not doing something bad but it's still

276
00:14:54,670 --> 00:15:00,610
active that's mean

277
00:14:56,800 --> 00:15:03,010
the attacker can activate it you can

278
00:15:00,610 --> 00:15:09,490
actually find my slice or previous

279
00:15:03,010 --> 00:15:13,750
presentation by this link so honestly

280
00:15:09,490 --> 00:15:15,640
it's no permanent disabled feature for

281
00:15:13,750 --> 00:15:20,590
compute race if it's exists on your

282
00:15:15,640 --> 00:15:22,689
laptop let's talk a bit about their

283
00:15:20,590 --> 00:15:25,180
collector of compute race so we have

284
00:15:22,690 --> 00:15:27,550
only know a security config and lanova

285
00:15:25,180 --> 00:15:30,010
hidden satan which as i mentioned both

286
00:15:27,550 --> 00:15:33,400
these configuration storages communicate

287
00:15:30,010 --> 00:15:36,069
not communicate but dependent by Lenovo

288
00:15:33,400 --> 00:15:38,740
trade services and computerized services

289
00:15:36,070 --> 00:15:41,130
actually use the knowledge security semi

290
00:15:38,740 --> 00:15:44,220
dispatcher and Lenovo mailbox for

291
00:15:41,130 --> 00:15:50,380
orchestrate activation deactivation and

292
00:15:44,220 --> 00:15:52,270
activity so I was looking on lanova

293
00:15:50,380 --> 00:15:56,110
security config to recover this

294
00:15:52,270 --> 00:15:57,819
structure and some of the fields it's

295
00:15:56,110 --> 00:16:01,570
still unknown because I don't know what

296
00:15:57,820 --> 00:16:03,970
they related with this but you can see

297
00:16:01,570 --> 00:16:06,460
also a lot of things like access to the

298
00:16:03,970 --> 00:16:11,430
chimera access to the microphone compute

299
00:16:06,460 --> 00:16:14,890
race Intel VTD secure boot a rollback

300
00:16:11,430 --> 00:16:19,209
prevention and many others even device

301
00:16:14,890 --> 00:16:22,090
guard is there so it's kind of like very

302
00:16:19,210 --> 00:16:27,400
interesting place to look v4 and I was

303
00:16:22,090 --> 00:16:29,650
thinking ok what we can do it's compute

304
00:16:27,400 --> 00:16:33,490
it's disassemble that computerized

305
00:16:29,650 --> 00:16:36,640
services Dixie driver and actually it's

306
00:16:33,490 --> 00:16:42,550
directly tried to modify values in this

307
00:16:36,640 --> 00:16:46,600
configuration table so and of course

308
00:16:42,550 --> 00:16:48,550
here is some services which is basically

309
00:16:46,600 --> 00:16:52,300
orchestrate this activity from a

310
00:16:48,550 --> 00:16:54,189
parading system level and the name of

311
00:16:52,300 --> 00:16:58,560
this is my handlers its compute race

312
00:16:54,190 --> 00:16:58,560
enable disable and computer a state

313
00:16:59,760 --> 00:17:05,290
that's kind of scary because you can

314
00:17:02,800 --> 00:17:10,349
just call one of them to do something

315
00:17:05,290 --> 00:17:13,599
with Lenovo security configure it and

316
00:17:10,349 --> 00:17:18,458
compute races my services actually it's

317
00:17:13,599 --> 00:17:22,030
kind of registered callbacks in Windows

318
00:17:18,459 --> 00:17:25,410
management interface that's mean you can

319
00:17:22,030 --> 00:17:32,680
over windows management interface call

320
00:17:25,410 --> 00:17:36,160
this object so and you can see basically

321
00:17:32,680 --> 00:17:40,720
how this structure present inside the

322
00:17:36,160 --> 00:17:43,030
ACPI table on your machine and where the

323
00:17:40,720 --> 00:17:46,550
beats is zero sometimes it's just

324
00:17:43,030 --> 00:17:50,030
orchestrate ok secure boot is on or

325
00:17:46,550 --> 00:17:54,080
of secured booties Oh other option off

326
00:17:50,030 --> 00:17:56,000
on off to end-user flash update which is

327
00:17:54,080 --> 00:18:01,520
basically allow you from a parading

328
00:17:56,000 --> 00:18:03,560
system level update your bias and I was

329
00:18:01,520 --> 00:18:07,910
thinking okay but let's back to

330
00:18:03,560 --> 00:18:11,169
permanent disable option because I want

331
00:18:07,910 --> 00:18:14,930
to understand how it works and basically

332
00:18:11,170 --> 00:18:18,560
after reconstruction this assembly

333
00:18:14,930 --> 00:18:21,110
called it's just if secure config

334
00:18:18,560 --> 00:18:24,710
compute raise true then compute race

335
00:18:21,110 --> 00:18:30,169
enable is active if not then it's

336
00:18:24,710 --> 00:18:37,600
disabled at false kind of like funny for

337
00:18:30,170 --> 00:18:40,640
permanent disable option rate also for

338
00:18:37,600 --> 00:18:43,520
disabling enabling you need to

339
00:18:40,640 --> 00:18:47,750
communicate with computer a state which

340
00:18:43,520 --> 00:18:50,150
is basically have kind of like specific

341
00:18:47,750 --> 00:18:54,130
canary value but it's canary value is

342
00:18:50,150 --> 00:18:59,990
hard-coded and you can see the defined

343
00:18:54,130 --> 00:19:03,230
so back here it's about computer a state

344
00:18:59,990 --> 00:19:06,530
so we have a four options basically

345
00:19:03,230 --> 00:19:08,720
enable active disable in disabled secret

346
00:19:06,530 --> 00:19:11,389
key which is basically deactivate

347
00:19:08,720 --> 00:19:14,540
permanently compute race on your machine

348
00:19:11,390 --> 00:19:17,780
and secret key is just four bytes so

349
00:19:14,540 --> 00:19:20,889
it's at world value I was okayed world

350
00:19:17,780 --> 00:19:25,870
value it's not very easy to brute-force

351
00:19:20,890 --> 00:19:30,230
but when I was reverse engineering

352
00:19:25,870 --> 00:19:34,340
deviation algorithm for key I can see it

353
00:19:30,230 --> 00:19:37,130
clearly here is no four bytes it's

354
00:19:34,340 --> 00:19:40,310
actually one bite because other whites

355
00:19:37,130 --> 00:19:47,710
don't have any sense in this decryption

356
00:19:40,310 --> 00:19:54,139
algorithm so then I was working on this

357
00:19:47,710 --> 00:19:58,390
comparison key check function and it was

358
00:19:54,140 --> 00:19:59,960
a constant time if it is a constant time

359
00:19:58,390 --> 00:20:02,420
it's good for

360
00:19:59,960 --> 00:20:05,960
of all because you basically can

361
00:20:02,420 --> 00:20:08,840
understand when the key is different and

362
00:20:05,960 --> 00:20:13,460
when key when key is good so you can

363
00:20:08,840 --> 00:20:16,010
basically brute force fast to get your

364
00:20:13,460 --> 00:20:17,630
correct value so basically it's side

365
00:20:16,010 --> 00:20:22,210
channel attack possible on this

366
00:20:17,630 --> 00:20:25,400
algorithm okay so we have one bite

367
00:20:22,210 --> 00:20:29,600
secret key stir it and spy flash in vrm

368
00:20:25,400 --> 00:20:32,300
we have different laptops of course some

369
00:20:29,600 --> 00:20:34,790
of them have a different keys but I use

370
00:20:32,300 --> 00:20:37,490
the chip sack it's open source framework

371
00:20:34,790 --> 00:20:42,050
on github for basically causes a my

372
00:20:37,490 --> 00:20:46,370
handler and just check specific value so

373
00:20:42,050 --> 00:20:54,110
and in my case disable value been 57 in

374
00:20:46,370 --> 00:20:57,620
hex not difficult and also kind of scary

375
00:20:54,110 --> 00:21:01,429
for me because this option for permanent

376
00:20:57,620 --> 00:21:04,280
disable and also after you use permanent

377
00:21:01,430 --> 00:21:12,140
disable for compute race it's still

378
00:21:04,280 --> 00:21:15,139
active on your system if we switch our

379
00:21:12,140 --> 00:21:18,400
focus a bit further what else actually

380
00:21:15,140 --> 00:21:22,400
we have in our laptops which is has

381
00:21:18,400 --> 00:21:24,950
additional vulnerability landscape it's

382
00:21:22,400 --> 00:21:27,620
embedded controller and the modern

383
00:21:24,950 --> 00:21:29,720
controller in many cases it's not a

384
00:21:27,620 --> 00:21:33,340
security boundary for the vendors who

385
00:21:29,720 --> 00:21:37,180
develop the hardware so but it's quite

386
00:21:33,340 --> 00:21:43,189
complex actually nowadays

387
00:21:37,180 --> 00:21:45,500
microcontroller and in blackhat research

388
00:21:43,190 --> 00:21:48,740
with Alex Gazette this year we've been

389
00:21:45,500 --> 00:21:50,750
presented how we break this

390
00:21:48,740 --> 00:21:53,450
microcontroller you can find the slides

391
00:21:50,750 --> 00:21:56,270
on the blackhat website but let's

392
00:21:53,450 --> 00:21:59,000
actually talk about other vendors

393
00:21:56,270 --> 00:22:01,400
because we was breaking microcontroller

394
00:21:59,000 --> 00:22:04,610
which is has a notification and we break

395
00:22:01,400 --> 00:22:09,230
out enta fication but if you look on

396
00:22:04,610 --> 00:22:11,659
this update here for gigabyte laptop it

397
00:22:09,230 --> 00:22:13,670
doesn't have any identification you just

398
00:22:11,660 --> 00:22:16,130
basically flash the

399
00:22:13,670 --> 00:22:20,000
from a P rating system levels of binary

400
00:22:16,130 --> 00:22:23,300
blob on your microcontroller and micro

401
00:22:20,000 --> 00:22:27,920
control Ike embedded controller have

402
00:22:23,300 --> 00:22:31,340
some callbacks to the bias and basically

403
00:22:27,920 --> 00:22:34,010
this attack surface is not very known

404
00:22:31,340 --> 00:22:37,490
and well-documented and never consider

405
00:22:34,010 --> 00:22:41,180
it as serious problems so basically what

406
00:22:37,490 --> 00:22:44,330
happens you change your security

407
00:22:41,180 --> 00:22:46,370
boundary because architects was thinking

408
00:22:44,330 --> 00:22:48,949
a case the attacker will come from the

409
00:22:46,370 --> 00:22:52,030
operating system level but what happens

410
00:22:48,950 --> 00:22:55,150
the tiger attack embedded controller and

411
00:22:52,030 --> 00:22:59,300
attack from other side of the boundary

412
00:22:55,150 --> 00:23:04,280
that's interesting different point of

413
00:22:59,300 --> 00:23:08,320
view okay into a boot guard and let's

414
00:23:04,280 --> 00:23:08,320
discuss some ways how we can bypass it

415
00:23:10,120 --> 00:23:20,780
so how Hardware root of trust actually

416
00:23:16,490 --> 00:23:24,760
became a software first of all recovery

417
00:23:20,780 --> 00:23:28,430
mode is evil and it's hard to implement

418
00:23:24,760 --> 00:23:32,960
security in hardware related to recovery

419
00:23:28,430 --> 00:23:36,110
mod correctly security transition chain

420
00:23:32,960 --> 00:23:39,950
of trust on different boot stages is is

421
00:23:36,110 --> 00:23:43,939
very actually slow and it's why it's

422
00:23:39,950 --> 00:23:45,920
hard to implement securely because if

423
00:23:43,940 --> 00:23:48,290
you will be verify everything on each

424
00:23:45,920 --> 00:23:50,960
stage your computer will be boots

425
00:23:48,290 --> 00:23:54,440
probably minutes but all the vendors

426
00:23:50,960 --> 00:23:58,150
won't blink your screen like in a second

427
00:23:54,440 --> 00:24:00,200
so this means they should optimize

428
00:23:58,150 --> 00:24:01,640
verification chain of trust and

429
00:24:00,200 --> 00:24:04,640
specially the transition between

430
00:24:01,640 --> 00:24:09,050
different boot stages in most of the

431
00:24:04,640 --> 00:24:11,150
cases without hard reset of trust moves

432
00:24:09,050 --> 00:24:16,610
purely from software for performance

433
00:24:11,150 --> 00:24:20,420
proper purposes what that mean when you

434
00:24:16,610 --> 00:24:22,610
go to the sleep and hibernate all the

435
00:24:20,420 --> 00:24:24,860
transitions not verified from the

436
00:24:22,610 --> 00:24:27,469
beginning basically from the root of

437
00:24:24,860 --> 00:24:30,428
trust inside the hardware it's very fine

438
00:24:27,470 --> 00:24:34,730
from the some state which has been

439
00:24:30,429 --> 00:24:39,260
safely store it inside the buyers in

440
00:24:34,730 --> 00:24:42,710
software enterprise hardware also need a

441
00:24:39,260 --> 00:24:45,650
remote update tools and nobody use in

442
00:24:42,710 --> 00:24:48,230
Tobias guard and mostly all the vendors

443
00:24:45,650 --> 00:24:57,490
try to avoid this technology because it

444
00:24:48,230 --> 00:25:01,970
makes recovery very hard so basically

445
00:24:57,490 --> 00:25:08,419
it's flow for flush and bios image on

446
00:25:01,970 --> 00:25:10,850
the NOC machine and we can see here

447
00:25:08,419 --> 00:25:13,580
flush an image for recovery block

448
00:25:10,850 --> 00:25:17,750
firmware image done and it was me

449
00:25:13,580 --> 00:25:22,090
curious about what inside the V recovery

450
00:25:17,750 --> 00:25:26,059
mode and we look on verification result

451
00:25:22,090 --> 00:25:30,860
for this check it's stored inside the

452
00:25:26,059 --> 00:25:33,320
bias in software so what does it mean we

453
00:25:30,860 --> 00:25:35,120
have a hash which is kind of like make a

454
00:25:33,320 --> 00:25:37,970
transition the route of trust from

455
00:25:35,120 --> 00:25:40,580
hardware to this hash and if we make

456
00:25:37,970 --> 00:25:47,900
recovery it will be rely on the Hessian

457
00:25:40,580 --> 00:25:51,590
software so crashes like

458
00:25:47,900 --> 00:25:54,100
shall 256 it's not good first of all

459
00:25:51,590 --> 00:25:57,980
here is about we can change this hair

460
00:25:54,100 --> 00:26:01,309
then when verification happens it will

461
00:25:57,980 --> 00:26:06,100
be verified with our cache but for that

462
00:26:01,309 --> 00:26:06,100
we need a vulnerability inside azzaman

463
00:26:07,150 --> 00:26:17,990
so also I was thinking okay what else

464
00:26:14,059 --> 00:26:18,710
but for recovery specifically on Knox

465
00:26:17,990 --> 00:26:23,539
systems

466
00:26:18,710 --> 00:26:27,710
it was just ignore this cache and make a

467
00:26:23,539 --> 00:26:31,370
recovery started so this vulnerability

468
00:26:27,710 --> 00:26:37,400
actually been presented by Alex your

469
00:26:31,370 --> 00:26:39,559
model phone zero nights last year and

470
00:26:37,400 --> 00:26:43,430
he found this one durability inside the

471
00:26:39,559 --> 00:26:45,980
hope driver inside the bias so yeah here

472
00:26:43,430 --> 00:26:49,790
is a flow reconstructed flow and you can

473
00:26:45,980 --> 00:26:55,640
clearly see here is basically starting

474
00:26:49,790 --> 00:27:02,870
the recovery process if - but what's its

475
00:26:55,640 --> 00:27:05,059
mean we have two sides of the boot guard

476
00:27:02,870 --> 00:27:07,429
technology both side is breaking it

477
00:27:05,059 --> 00:27:11,450
inside the hardware and basically lock

478
00:27:07,430 --> 00:27:15,200
it by the fuse and this fuse have a cash

479
00:27:11,450 --> 00:27:19,880
value which is try to protect early

480
00:27:15,200 --> 00:27:22,940
stages of the boot but we also have a

481
00:27:19,880 --> 00:27:25,850
lot of components relies on the thermal

482
00:27:22,940 --> 00:27:28,280
only K manifest and initial boot block

483
00:27:25,850 --> 00:27:31,969
manifest all of them present only on the

484
00:27:28,280 --> 00:27:35,210
firmware and if we don't need the

485
00:27:31,970 --> 00:27:38,390
hardware part as in recovery mode spoken

486
00:27:35,210 --> 00:27:44,240
before so we have only the firmer side

487
00:27:38,390 --> 00:27:46,880
and all this can be modified to be to

488
00:27:44,240 --> 00:27:52,330
present correct boot for the malicious

489
00:27:46,880 --> 00:27:55,940
components or modified components so

490
00:27:52,330 --> 00:28:03,678
basically back to this picture why it

491
00:27:55,940 --> 00:28:08,110
happens also one more interesting thing

492
00:28:03,679 --> 00:28:11,809
I found its boot guard Lenovo PCD need

493
00:28:08,110 --> 00:28:16,370
option so basically in lenovo laptops

494
00:28:11,809 --> 00:28:19,760
some of them they have a pc d platform

495
00:28:16,370 --> 00:28:23,739
configuration value it stored inside the

496
00:28:19,760 --> 00:28:26,330
BIOS inside the padding and when I was

497
00:28:23,740 --> 00:28:29,920
reverse engineered Lenovo PC d need

498
00:28:26,330 --> 00:28:35,750
driver I was found this check and

499
00:28:29,920 --> 00:28:39,950
actually this check verify this value if

500
00:28:35,750 --> 00:28:42,559
this value true then is disabled the

501
00:28:39,950 --> 00:28:45,130
boot guard even if it's enabled on your

502
00:28:42,559 --> 00:28:48,290
system and actually it sounds like

503
00:28:45,130 --> 00:28:52,210
clearly as a backdoor or maybe recovery

504
00:28:48,290 --> 00:29:01,820
or support mechanism I

505
00:28:52,210 --> 00:29:05,269
so basically we can jig inside the

506
00:29:01,820 --> 00:29:08,049
system and found a lot of things which

507
00:29:05,269 --> 00:29:14,419
is sounds differently as a vendors claim

508
00:29:08,049 --> 00:29:18,769
and my opinion actually this particular

509
00:29:14,419 --> 00:29:21,350
check been created probably not and

510
00:29:18,769 --> 00:29:24,110
backdoor purposes because when you have

511
00:29:21,350 --> 00:29:26,209
your laptop and you came to support say

512
00:29:24,110 --> 00:29:29,330
oh my laptop doesn't boots correctly

513
00:29:26,210 --> 00:29:34,789
what they can do because if your laptop

514
00:29:29,330 --> 00:29:37,129
is locked by hardware root of trust they

515
00:29:34,789 --> 00:29:40,519
can't change anything even like access

516
00:29:37,129 --> 00:29:42,980
to the bus and they create this kind of

517
00:29:40,519 --> 00:29:45,590
mechanism it was hidden but as we all

518
00:29:42,980 --> 00:29:49,460
know security by obscurity doesn't work

519
00:29:45,590 --> 00:29:53,809
right so and of course it's easy to

520
00:29:49,460 --> 00:29:57,619
discover so I don't know somehow this

521
00:29:53,809 --> 00:30:00,379
driver get my attention and then I

522
00:29:57,619 --> 00:30:02,658
figure it out we have this spreading and

523
00:30:00,379 --> 00:30:06,469
this wedding doesn't protected by BIOS

524
00:30:02,659 --> 00:30:09,950
boot guard so basically you can modify

525
00:30:06,470 --> 00:30:12,740
it so also I want to pay attention on

526
00:30:09,950 --> 00:30:13,610
this tool it's you vital in the two

527
00:30:12,740 --> 00:30:19,759
years ago

528
00:30:13,610 --> 00:30:21,918
I developed a mechanism to verify IBB

529
00:30:19,759 --> 00:30:25,789
for the boot guard and these colors as

530
00:30:21,919 --> 00:30:28,190
example red colors mean something it's

531
00:30:25,789 --> 00:30:34,549
not protected fully on on the boot guard

532
00:30:28,190 --> 00:30:37,549
here so and not colored values it's just

533
00:30:34,549 --> 00:30:39,259
not covered for from wood guard at all

534
00:30:37,549 --> 00:30:41,240
so when you can see the spread in

535
00:30:39,259 --> 00:30:43,970
highlighted by blue just because I put

536
00:30:41,240 --> 00:30:48,169
my cursor there so and it's not

537
00:30:43,970 --> 00:30:53,210
protected at all and yeah you can just

538
00:30:48,169 --> 00:30:55,580
modify it fresh bias back and actually

539
00:30:53,210 --> 00:31:01,789
it's not affect integrity because it's

540
00:30:55,580 --> 00:31:02,928
not protected by boot guard right in

541
00:31:01,789 --> 00:31:05,570
when

542
00:31:02,929 --> 00:31:09,350
so for usability purposes Enterprise

543
00:31:05,570 --> 00:31:13,820
Warworld need some some mechanism for

544
00:31:09,350 --> 00:31:19,070
recovery right and this many cases its

545
00:31:13,820 --> 00:31:23,750
enemy of security the vendors understand

546
00:31:19,070 --> 00:31:27,230
permanent disable differently as we are

547
00:31:23,750 --> 00:31:31,669
so for my opinion permanent disable mean

548
00:31:27,230 --> 00:31:36,250
I should burn the fuse which is will be

549
00:31:31,669 --> 00:31:39,700
not allow this court runs again never

550
00:31:36,250 --> 00:31:44,840
when the hardware waste root of trust

551
00:31:39,700 --> 00:31:47,750
transfer the state of chain of trust to

552
00:31:44,840 --> 00:31:50,780
software that's done because it's no

553
00:31:47,750 --> 00:31:55,520
more hardware root of trust is exists

554
00:31:50,780 --> 00:31:58,370
it's only software right and our system

555
00:31:55,520 --> 00:32:01,940
specially x86 system it's very complex

556
00:31:58,370 --> 00:32:03,559
it's has a lot of boot States as example

557
00:32:01,940 --> 00:32:05,990
you have a sleep mode you have a

558
00:32:03,559 --> 00:32:08,809
hibernate mode and it's a different boot

559
00:32:05,990 --> 00:32:11,750
stage when you close the lid of your

560
00:32:08,809 --> 00:32:15,020
laptop it doesn't mean your machine

561
00:32:11,750 --> 00:32:18,950
switch off actually it's safe all the

562
00:32:15,020 --> 00:32:22,000
states and it's why it's recover it very

563
00:32:18,950 --> 00:32:24,799
fast when you open the lid again and

564
00:32:22,000 --> 00:32:27,309
only when you make a hard reset and

565
00:32:24,799 --> 00:32:34,240
reboot machine then all the states

566
00:32:27,309 --> 00:32:37,790
basically started from scratch it's why

567
00:32:34,240 --> 00:32:40,549
attacks your face it's very complex and

568
00:32:37,790 --> 00:32:43,370
sometimes vendors they make it secure

569
00:32:40,549 --> 00:32:46,280
from the heart reset but it's hard to

570
00:32:43,370 --> 00:32:48,799
know like where it can be failed in

571
00:32:46,280 --> 00:32:51,320
recovery in sleep or the hibernate

572
00:32:48,799 --> 00:32:58,460
because they want the performance and

573
00:32:51,320 --> 00:33:01,100
your system boot fast it's pretty much

574
00:32:58,460 --> 00:33:03,340
it for today and thank you very much I

575
00:33:01,100 --> 00:33:07,399
cope idea

576
00:33:03,340 --> 00:33:07,399
[Applause]

577
00:33:09,740 --> 00:33:27,060
so I would help you to answer the

578
00:33:12,570 --> 00:33:30,840
questions yes please it's fused for the

579
00:33:27,060 --> 00:33:33,960
hash for IBB yeah it's yeah but it's

580
00:33:30,840 --> 00:33:48,199
it's not a fuse for the public/private

581
00:33:33,960 --> 00:34:01,770
key yes exactly it's because a as format

582
00:33:48,200 --> 00:34:03,990
yeah yeah nothing so I was used to work

583
00:34:01,770 --> 00:34:06,000
for Intel before and I found a lot of

584
00:34:03,990 --> 00:34:12,360
issues there but it's fixed internally

585
00:34:06,000 --> 00:34:18,630
so okay I can't speak about that but I

586
00:34:12,360 --> 00:34:20,669
like the way of how you're thinking it's

587
00:34:18,630 --> 00:34:23,490
a right really right vector yeah

588
00:34:20,668 --> 00:34:25,020
actually the complex parsers inside the

589
00:34:23,489 --> 00:34:28,439
firmware it's really sweet vector

590
00:34:25,020 --> 00:34:30,150
because it's no mitigations any memory

591
00:34:28,440 --> 00:34:36,360
corruptions will be lead record

592
00:34:30,150 --> 00:34:39,810
execution right hey a question so you

593
00:34:36,360 --> 00:34:43,100
talked about how CPU microcode is not

594
00:34:39,810 --> 00:34:46,500
being protected and can be altered so

595
00:34:43,100 --> 00:34:48,569
yeah but my question is is this

596
00:34:46,500 --> 00:34:51,000
certificate or the private key stored in

597
00:34:48,570 --> 00:34:53,520
the TPM altered if I change the

598
00:34:51,000 --> 00:34:56,780
microcode in this oh no no microcode

599
00:34:53,520 --> 00:35:00,600
actually doesn't rely on any TPM

600
00:34:56,780 --> 00:35:03,810
verification it has a some other

601
00:35:00,600 --> 00:35:06,299
verification routine from CPU but

602
00:35:03,810 --> 00:35:08,370
problem is if you have as example

603
00:35:06,300 --> 00:35:10,800
microcode you do not modify microcode

604
00:35:08,370 --> 00:35:13,529
you just downgrade the microcode with

605
00:35:10,800 --> 00:35:15,810
known issues it's a bit different story

606
00:35:13,530 --> 00:35:18,480
so basically the reef occation if the

607
00:35:15,810 --> 00:35:20,850
keys or like this micro cut version not

608
00:35:18,480 --> 00:35:22,810
been blacklisted it will be still able

609
00:35:20,850 --> 00:35:25,600
to boot it

610
00:35:22,810 --> 00:35:29,830
and yeah so it's kind of open

611
00:35:25,600 --> 00:35:32,770
interesting room and especially as we

612
00:35:29,830 --> 00:35:36,730
know it was a lot of speculative

613
00:35:32,770 --> 00:35:39,600
execution issues past two years found on

614
00:35:36,730 --> 00:35:44,530
intel architecture and especially

615
00:35:39,600 --> 00:35:47,589
microcode downgrade can allow you to use

616
00:35:44,530 --> 00:35:49,900
these known issues even if it will be

617
00:35:47,590 --> 00:35:53,620
budget on new versions of micro code and

618
00:35:49,900 --> 00:35:57,040
it's kind of like scary but new I would

619
00:35:53,620 --> 00:35:59,380
say newest generation of Intel CPUs they

620
00:35:57,040 --> 00:36:10,150
have some protection from that but back

621
00:35:59,380 --> 00:36:16,540
to the skylark not thanks ok let's do a

622
00:36:10,150 --> 00:36:17,550
question no questions thank you very

623
00:36:16,540 --> 00:36:27,839
much guys

624
00:36:17,550 --> 00:36:27,839
[Applause]

