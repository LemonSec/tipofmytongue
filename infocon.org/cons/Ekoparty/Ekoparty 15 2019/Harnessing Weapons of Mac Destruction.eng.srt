1
00:00:00,030 --> 00:00:06,000
rick warren harnessing weapons of mass

2
00:00:03,240 --> 00:00:07,880
destruction why write your own malware

3
00:00:06,000 --> 00:00:10,889
when you can simply repurpose existing

4
00:00:07,880 --> 00:00:13,440
specimens Willis trait the process of

5
00:00:10,889 --> 00:00:16,439
weapons in existing Macau's malware such

6
00:00:13,440 --> 00:00:21,080
as Romans were script miners and back

7
00:00:16,440 --> 00:00:21,080
doors for unsuited niches purpose

8
00:00:22,250 --> 00:00:25,679
[Applause]

9
00:00:27,260 --> 00:00:31,590
alright good morning and welcome to my

10
00:00:29,490 --> 00:00:32,780
talk about harnessing weapons of mass

11
00:00:31,590 --> 00:00:36,840
destruction

12
00:00:32,780 --> 00:00:38,760
so I'm Patrick critter of objective-c

13
00:00:36,840 --> 00:00:42,360
also a former co-founder of digital

14
00:00:38,760 --> 00:00:44,089
security currently I work at jams so

15
00:00:42,360 --> 00:00:47,070
today we're gonna be talking about

16
00:00:44,090 --> 00:00:51,149
repurposing other people's Mac malware

17
00:00:47,070 --> 00:00:52,770
for our own surreptitious purposes we'll

18
00:00:51,149 --> 00:00:55,920
start by showing why this is rather an

19
00:00:52,770 --> 00:00:59,789
excellent idea and then show exactly how

20
00:00:55,920 --> 00:01:02,520
to repurpose various Mac specimens now

21
00:00:59,789 --> 00:01:05,250
of course we want our repurpose malware

22
00:01:02,520 --> 00:01:06,930
to remain undetected by both Apple's

23
00:01:05,250 --> 00:01:09,600
built-in malware mitigations and

24
00:01:06,930 --> 00:01:12,930
third-party antivirus products so we'll

25
00:01:09,600 --> 00:01:16,080
address that as well finally we'll end

26
00:01:12,930 --> 00:01:18,210
by covering some methods that can

27
00:01:16,080 --> 00:01:20,670
generically detect Mac OS threats

28
00:01:18,210 --> 00:01:22,289
including these repurpose samples

29
00:01:20,670 --> 00:01:26,549
because ultimately we want to make sure

30
00:01:22,290 --> 00:01:30,780
that Mac users remain secure so let's

31
00:01:26,549 --> 00:01:34,079
dive in so here we have a diagrammatic

32
00:01:30,780 --> 00:01:37,979
overview that conceptually explains the

33
00:01:34,079 --> 00:01:41,100
repurposing process so imagine spy a has

34
00:01:37,979 --> 00:01:43,649
developed some neat sophisticated fully

35
00:01:41,100 --> 00:01:46,158
featured Mac malware and has deployed it

36
00:01:43,649 --> 00:01:49,710
to various computers around the world

37
00:01:46,159 --> 00:01:50,490
somehow spy B is able to capture this

38
00:01:49,710 --> 00:01:53,490
malware

39
00:01:50,490 --> 00:01:56,939
perhaps in transit or even off an

40
00:01:53,490 --> 00:01:59,100
infected system spy B then we'll take

41
00:01:56,939 --> 00:02:03,210
this malware that was created by spy a

42
00:01:59,100 --> 00:02:05,399
into her lab and then repurposes it so

43
00:02:03,210 --> 00:02:08,068
what does repurposing a piece of malware

44
00:02:05,399 --> 00:02:10,470
actually mean well we'll get into this

45
00:02:08,068 --> 00:02:13,649
more shortly but essentially you can

46
00:02:10,470 --> 00:02:16,500
think of it as reconfiguring the malware

47
00:02:13,650 --> 00:02:18,840
at the binary level so that you can use

48
00:02:16,500 --> 00:02:21,870
it for your own purpose your own perhaps

49
00:02:18,840 --> 00:02:23,849
offensive cyber espionage operations so

50
00:02:21,870 --> 00:02:27,030
for example as we can see on the slide

51
00:02:23,849 --> 00:02:29,189
when spy B now goes to redeploy this

52
00:02:27,030 --> 00:02:31,620
repurpose malware it'll now connect to

53
00:02:29,189 --> 00:02:35,790
her command and control servers for

54
00:02:31,620 --> 00:02:37,859
tasking instead of a course spy ace now

55
00:02:35,790 --> 00:02:38,760
you might be thinking alright this is

56
00:02:37,859 --> 00:02:41,459
neat

57
00:02:38,760 --> 00:02:43,078
but why would you do this and actually

58
00:02:41,459 --> 00:02:45,120
there's two reasons which will hopefully

59
00:02:43,079 --> 00:02:48,389
show us that we really should be asking

60
00:02:45,120 --> 00:02:51,060
why not so first that we think about it

61
00:02:48,389 --> 00:02:54,450
there are incredibly well-funded well

62
00:02:51,060 --> 00:02:56,790
resourced very motivated hackers apt

63
00:02:54,450 --> 00:03:00,480
groups and even three-letter agencies

64
00:02:56,790 --> 00:03:03,239
that are in creating very amazing very

65
00:03:00,480 --> 00:03:05,040
comprehensive very fully tested malware

66
00:03:03,239 --> 00:03:08,609
that they're already deploying and

67
00:03:05,040 --> 00:03:10,769
utilizing in the wild honestly I'm so

68
00:03:08,609 --> 00:03:12,840
much lazy I'd rather be sleeping or

69
00:03:10,769 --> 00:03:13,439
surfing as opposed to writing my own

70
00:03:12,840 --> 00:03:16,260
Bower

71
00:03:13,439 --> 00:03:18,599
so I figured why not let these groups

72
00:03:16,260 --> 00:03:20,489
these agencies create these very

73
00:03:18,599 --> 00:03:22,709
complicated sophisticated pieces of

74
00:03:20,489 --> 00:03:25,169
malware and then we can just repurpose

75
00:03:22,709 --> 00:03:26,910
them for our own mission the idea is

76
00:03:25,169 --> 00:03:29,069
basically let those would taught more

77
00:03:26,910 --> 00:03:30,659
time and more money do all the hard work

78
00:03:29,069 --> 00:03:34,108
and then we can kind of just piggyback

79
00:03:30,659 --> 00:03:36,959
off that second if our repurpose malware

80
00:03:34,109 --> 00:03:38,730
creations are ever detected ever get

81
00:03:36,959 --> 00:03:41,280
caught it's likely they will be miss

82
00:03:38,730 --> 00:03:43,078
attributed to the original authors which

83
00:03:41,280 --> 00:03:47,310
for us is really good will likely never

84
00:03:43,079 --> 00:03:49,199
get blamed okay say Patrick this seems

85
00:03:47,310 --> 00:03:50,970
like a reasonably good idea but if it's

86
00:03:49,199 --> 00:03:53,099
such a good idea why aren't others

87
00:03:50,970 --> 00:03:55,889
already doing it well the answer is they

88
00:03:53,099 --> 00:03:58,409
are we just have to look closely so I

89
00:03:55,889 --> 00:04:01,049
can't really comment on this but leak

90
00:03:58,409 --> 00:04:03,690
slides appear to show that the NSA has

91
00:04:01,049 --> 00:04:05,849
such capabilities and recent reporting

92
00:04:03,690 --> 00:04:08,220
from the New York Times also confirms

93
00:04:05,849 --> 00:04:10,638
that the Chinese abt or government

94
00:04:08,220 --> 00:04:14,430
hacking groups are doing this as well

95
00:04:10,639 --> 00:04:16,440
now to these well resourced agencies the

96
00:04:14,430 --> 00:04:19,139
benefit of using repurposed malware is

97
00:04:16,440 --> 00:04:21,839
twofold first it allows them to deploy

98
00:04:19,139 --> 00:04:23,969
malware other countries malware that

99
00:04:21,839 --> 00:04:26,099
they've repurposed into risky

100
00:04:23,969 --> 00:04:27,630
environments so imagine you're the NSA

101
00:04:26,099 --> 00:04:28,800
you've hacked a high-value target

102
00:04:27,630 --> 00:04:31,140
you find the Russians or the Chinese

103
00:04:28,800 --> 00:04:33,090
have also hacked that right you're not

104
00:04:31,140 --> 00:04:34,890
gonna put your primary your own custom

105
00:04:33,090 --> 00:04:36,989
implant on that box it's just too risky

106
00:04:34,890 --> 00:04:38,400
because the other adversaries might

107
00:04:36,990 --> 00:04:40,680
detect what you've installed and

108
00:04:38,400 --> 00:04:42,179
captured however if you used a repurpose

109
00:04:40,680 --> 00:04:44,220
piece of malware that was written by

110
00:04:42,180 --> 00:04:45,870
another country there's really no risk

111
00:04:44,220 --> 00:04:48,450
there there's nothing really lost if you

112
00:04:45,870 --> 00:04:51,180
get detected also we mentioned

113
00:04:48,450 --> 00:04:52,950
attribution right so for example again

114
00:04:51,180 --> 00:04:54,720
if the NSA or the Chinese are using

115
00:04:52,950 --> 00:04:57,539
repurposed malware and it's eventually

116
00:04:54,720 --> 00:04:59,280
detected by an antivirus company or the

117
00:04:57,540 --> 00:05:01,320
target themselves it's gonna be very

118
00:04:59,280 --> 00:05:03,359
difficult to actually attribute back

119
00:05:01,320 --> 00:05:05,159
it's likely gonna be miss attributed to

120
00:05:03,360 --> 00:05:08,430
the original authors not those that

121
00:05:05,160 --> 00:05:11,190
repurposed it now of course there's

122
00:05:08,430 --> 00:05:13,020
challenges to repurposing Maur if it was

123
00:05:11,190 --> 00:05:14,820
trivial we wouldn't be talking about

124
00:05:13,020 --> 00:05:17,359
this today but I'm gonna show you these

125
00:05:14,820 --> 00:05:20,880
challenges are really not insurmountable

126
00:05:17,360 --> 00:05:22,560
so first generally speaking source code

127
00:05:20,880 --> 00:05:24,570
for the malware samples that you are

128
00:05:22,560 --> 00:05:26,610
going to repurpose is not going to be

129
00:05:24,570 --> 00:05:28,140
available meaning we're gonna have to

130
00:05:26,610 --> 00:05:30,770
reverse engineer the malware and then

131
00:05:28,140 --> 00:05:33,240
patch or modify it at the binary level

132
00:05:30,770 --> 00:05:34,740
now when we're studying them our this is

133
00:05:33,240 --> 00:05:36,420
what I like to call the analysis stage

134
00:05:34,740 --> 00:05:38,490
and the goal here is trying to

135
00:05:36,420 --> 00:05:40,290
understand the malware fairly

136
00:05:38,490 --> 00:05:43,170
comprehensively to answer two questions

137
00:05:40,290 --> 00:05:45,830
such as how does it persist how does it

138
00:05:43,170 --> 00:05:48,420
communicate then once we have this

139
00:05:45,830 --> 00:05:50,729
understanding what we can do is we can

140
00:05:48,420 --> 00:05:52,050
generally go ahead and for example start

141
00:05:50,730 --> 00:05:54,390
building a custom command and control

142
00:05:52,050 --> 00:05:57,390
server if the malware connects out and

143
00:05:54,390 --> 00:05:58,469
expects tasking now as I mentioned we

144
00:05:57,390 --> 00:06:00,390
don't have source code so we're gonna

145
00:05:58,470 --> 00:06:02,970
have to do the patching at the binary

146
00:06:00,390 --> 00:06:04,620
level this is not the easiest thing to

147
00:06:02,970 --> 00:06:07,140
do but we'll show it's also not that

148
00:06:04,620 --> 00:06:08,310
difficult and then finally and we'll

149
00:06:07,140 --> 00:06:10,830
talk about this later

150
00:06:08,310 --> 00:06:12,660
as we're generally repurposing known

151
00:06:10,830 --> 00:06:14,909
malware or malware that has been

152
00:06:12,660 --> 00:06:17,100
publicly captured and perhaps analyzed

153
00:06:14,910 --> 00:06:19,740
already it's likely there are

154
00:06:17,100 --> 00:06:21,810
third-party AV signatures or Apple

155
00:06:19,740 --> 00:06:23,550
signatures for it as well so we need to

156
00:06:21,810 --> 00:06:25,650
make sure that our repurpose samples

157
00:06:23,550 --> 00:06:27,900
aren't detected because it would be very

158
00:06:25,650 --> 00:06:29,969
unfortunate if we went to deploy a

159
00:06:27,900 --> 00:06:34,500
nicely repurposed piece of malware and

160
00:06:29,970 --> 00:06:36,660
Apple or an AV product flagged it now I

161
00:06:34,500 --> 00:06:38,550
want to reiterate it's fairly important

162
00:06:36,660 --> 00:06:40,620
to get these challenges correct because

163
00:06:38,550 --> 00:06:41,319
if you don't maybe bad things will

164
00:06:40,620 --> 00:06:43,569
happen

165
00:06:41,319 --> 00:06:46,149
so here for example perhaps we've

166
00:06:43,569 --> 00:06:46,749
attempted to repurpose a piece of mac

167
00:06:46,149 --> 00:06:49,779
malware

168
00:06:46,749 --> 00:06:52,330
turns out though we forgot to modify to

169
00:06:49,779 --> 00:06:54,339
repurpose to patch out the addresses of

170
00:06:52,330 --> 00:06:56,680
the backup command and control server

171
00:06:54,339 --> 00:06:58,809
this means the hackers original CNC

172
00:06:56,680 --> 00:07:01,270
adders are still embedded in them our

173
00:06:58,809 --> 00:07:03,610
this is less than ideal because if it

174
00:07:01,270 --> 00:07:06,389
means we deploy what we believe to be a

175
00:07:03,610 --> 00:07:08,919
fully repurposed malware specimen in

176
00:07:06,389 --> 00:07:10,599
some scenarios perhaps if our servers go

177
00:07:08,919 --> 00:07:12,609
offline for a short amount of time

178
00:07:10,599 --> 00:07:16,808
this repurpose sample will still be

179
00:07:12,610 --> 00:07:20,099
connected giving him her or her access

180
00:07:16,809 --> 00:07:23,529
to all our new targets this is not ideal

181
00:07:20,099 --> 00:07:25,748
here we have another real-world example

182
00:07:23,529 --> 00:07:28,629
now in this case the hacker didn't

183
00:07:25,749 --> 00:07:30,939
actually fully repurpose the malware but

184
00:07:28,629 --> 00:07:33,490
rather simply planted it to fake

185
00:07:30,939 --> 00:07:35,379
attribution so a student that was

186
00:07:33,490 --> 00:07:37,809
actually caught changing her grades

187
00:07:35,379 --> 00:07:39,869
could claim there was no way she did it

188
00:07:37,809 --> 00:07:42,759
because her computer was hacked

189
00:07:39,869 --> 00:07:45,039
however the samples that this student or

190
00:07:42,759 --> 00:07:47,709
the hacker she was working in working

191
00:07:45,039 --> 00:07:49,479
with together planted some rather

192
00:07:47,709 --> 00:07:52,539
implausible samples that they actually

193
00:07:49,479 --> 00:07:54,490
downloaded from my website so the

194
00:07:52,539 --> 00:07:56,680
student said no this couldn't have been

195
00:07:54,490 --> 00:07:58,899
me I couldn't have done this because my

196
00:07:56,680 --> 00:08:00,580
computer is infected and specifically

197
00:07:58,899 --> 00:08:02,559
look there's two pieces of malware on

198
00:08:00,580 --> 00:08:04,808
here one called cold root and another

199
00:08:02,559 --> 00:08:06,849
called cross rat and a lot of people

200
00:08:04,809 --> 00:08:08,889
said okay this is somewhat plausible but

201
00:08:06,849 --> 00:08:10,628
if we stop to think about this this is

202
00:08:08,889 --> 00:08:13,569
completely not realistic

203
00:08:10,629 --> 00:08:15,369
first and foremost cold root is a proof

204
00:08:13,569 --> 00:08:17,139
of concept Mac malware sample that

205
00:08:15,369 --> 00:08:19,300
doesn't even run on recent versions of

206
00:08:17,139 --> 00:08:20,979
Mac OS so again the students said oh I'm

207
00:08:19,300 --> 00:08:22,990
infected with cold root like no this

208
00:08:20,979 --> 00:08:25,149
malware doesn't even run the second

209
00:08:22,990 --> 00:08:26,949
instance that was planted on her system

210
00:08:25,149 --> 00:08:29,589
that she claimed proved her innocence

211
00:08:26,949 --> 00:08:31,659
was something called cross rat this was

212
00:08:29,589 --> 00:08:33,880
developed by the Lebanese government to

213
00:08:31,659 --> 00:08:35,769
spy and to be utilized in cyber

214
00:08:33,880 --> 00:08:37,870
espionage campaigns it's never going to

215
00:08:35,769 --> 00:08:38,948
end up in a student's computer in the US

216
00:08:37,870 --> 00:08:41,198
who's studying to be a vet

217
00:08:38,948 --> 00:08:43,120
so again if you're repurposing malware

218
00:08:41,198 --> 00:08:47,560
you gotta take into account some level

219
00:08:43,120 --> 00:08:50,019
of plausibility all right so now let's

220
00:08:47,560 --> 00:08:52,569
talk about exactly how we're going to

221
00:08:50,019 --> 00:08:56,579
repurpose Mac power with the goal of

222
00:08:52,569 --> 00:08:56,579
making other people's malware our own

223
00:08:58,380 --> 00:09:04,060
so the first step to repurpose a piece

224
00:09:01,210 --> 00:09:07,180
of Mauer is to select the specimen that

225
00:09:04,060 --> 00:09:10,030
you want to repurpose basically there is

226
00:09:07,180 --> 00:09:12,459
two criteria the first is you need to

227
00:09:10,030 --> 00:09:14,589
decide what you want the malware to do

228
00:09:12,460 --> 00:09:17,260
are you looking for an interactive

229
00:09:14,590 --> 00:09:19,240
backdoor a piece of ransomware or

230
00:09:17,260 --> 00:09:22,750
perhaps a persistent cryptocurrency

231
00:09:19,240 --> 00:09:24,910
minor second perhaps attribution is

232
00:09:22,750 --> 00:09:26,470
important to you are you looking for a

233
00:09:24,910 --> 00:09:28,900
sample that will likely be miss

234
00:09:26,470 --> 00:09:31,600
attributed back to a US intelligence

235
00:09:28,900 --> 00:09:34,449
agency or perhaps a Russian hacking

236
00:09:31,600 --> 00:09:36,520
group so on my website objective-c comm

237
00:09:34,450 --> 00:09:38,800
I have a very comprehensive collection

238
00:09:36,520 --> 00:09:39,579
of Mac malware so that's a great place

239
00:09:38,800 --> 00:09:41,709
to start

240
00:09:39,580 --> 00:09:43,900
I want to note that all these samples we

241
00:09:41,710 --> 00:09:46,240
will be repurposing today the original

242
00:09:43,900 --> 00:09:47,740
specimens are available for download so

243
00:09:46,240 --> 00:09:49,570
if you want to go and play and kind of

244
00:09:47,740 --> 00:09:53,530
walk through some of these examples you

245
00:09:49,570 --> 00:09:56,080
can get the malware from my site okay so

246
00:09:53,530 --> 00:09:58,780
now you've selected a piece of malware

247
00:09:56,080 --> 00:10:01,570
it's time to analyze it as we mentioned

248
00:09:58,780 --> 00:10:04,420
in terms of repurposing or reconfiguring

249
00:10:01,570 --> 00:10:07,420
a sample the main goals of this analysis

250
00:10:04,420 --> 00:10:10,329
include things like uncovering any logic

251
00:10:07,420 --> 00:10:11,920
that involves remote interaction right

252
00:10:10,330 --> 00:10:14,620
you'll want to figure out if the malware

253
00:10:11,920 --> 00:10:16,870
is talking to a command control server

254
00:10:14,620 --> 00:10:18,640
and where it's getting the address of

255
00:10:16,870 --> 00:10:19,930
that command and control server because

256
00:10:18,640 --> 00:10:22,120
likely that's something you will want to

257
00:10:19,930 --> 00:10:25,420
patch out and modify so now instead

258
00:10:22,120 --> 00:10:26,740
talks to your servers if the malware

259
00:10:25,420 --> 00:10:28,990
does talk to a command and control

260
00:10:26,740 --> 00:10:31,120
server for tasking you'll want to

261
00:10:28,990 --> 00:10:33,700
understand that logic for example that

262
00:10:31,120 --> 00:10:35,860
protocol so again you can remotely task

263
00:10:33,700 --> 00:10:38,530
it once you redeploy it to new systems

264
00:10:35,860 --> 00:10:40,510
and of course you'll fully want to

265
00:10:38,530 --> 00:10:43,449
understand the malware's capabilities

266
00:10:40,510 --> 00:10:45,610
both the local ones how it persists how

267
00:10:43,450 --> 00:10:47,920
it interacts with the system and then

268
00:10:45,610 --> 00:10:50,080
also the remote capabilities that is

269
00:10:47,920 --> 00:10:51,520
what commands it can support so when you

270
00:10:50,080 --> 00:10:54,700
task it you know what the malware is

271
00:10:51,520 --> 00:10:56,470
able to do so once you have a

272
00:10:54,700 --> 00:10:58,560
comprehensive understanding of the

273
00:10:56,470 --> 00:11:01,600
malware it's actually time to now

274
00:10:58,560 --> 00:11:03,400
repurpose or reconfigure it generally

275
00:11:01,600 --> 00:11:06,310
this means we're going to patch the

276
00:11:03,400 --> 00:11:07,870
malware often at the binary level so

277
00:11:06,310 --> 00:11:08,619
here for example we're looking at a

278
00:11:07,870 --> 00:11:10,630
piece of malware

279
00:11:08,620 --> 00:11:13,210
that we want to reconfigure and we've

280
00:11:10,630 --> 00:11:15,820
located the addresses of the command and

281
00:11:13,210 --> 00:11:17,710
control server directly in the malware's

282
00:11:15,820 --> 00:11:20,230
binary so what we can do is we can

283
00:11:17,710 --> 00:11:22,870
simply modify these bytes to change the

284
00:11:20,230 --> 00:11:25,270
address to our own server which means

285
00:11:22,870 --> 00:11:27,850
when we redeploy this now repurpose

286
00:11:25,270 --> 00:11:29,710
malware when it infects the system and

287
00:11:27,850 --> 00:11:31,890
connects out it'll now connect to our

288
00:11:29,710 --> 00:11:36,580
command and control address for tasking

289
00:11:31,890 --> 00:11:40,030
as we mentioned if the Maur or backdoor

290
00:11:36,580 --> 00:11:41,800
or implant expects to talk to a command

291
00:11:40,030 --> 00:11:43,510
and control server we're gonna have to

292
00:11:41,800 --> 00:11:45,339
write a custom one unless we've somehow

293
00:11:43,510 --> 00:11:47,560
captured the original commanding control

294
00:11:45,340 --> 00:11:50,260
server as well but that's generally less

295
00:11:47,560 --> 00:11:51,880
likely so we need to do this so that we

296
00:11:50,260 --> 00:11:53,590
can ensure that when our repurpose

297
00:11:51,880 --> 00:11:56,470
malware which connects to our command

298
00:11:53,590 --> 00:11:58,000
and control server we can have a custom

299
00:11:56,470 --> 00:11:59,770
command and control server that speaks

300
00:11:58,000 --> 00:12:02,410
the protocol that the malware is

301
00:11:59,770 --> 00:12:05,170
expecting now this doesn't have to be

302
00:12:02,410 --> 00:12:07,810
anything fancy I generally just create a

303
00:12:05,170 --> 00:12:10,209
Python script but if you're planning to

304
00:12:07,810 --> 00:12:11,920
deploy this repurpose malware to a large

305
00:12:10,210 --> 00:12:14,800
number of systems you might need

306
00:12:11,920 --> 00:12:16,990
something more comprehensive DEFCON a

307
00:12:14,800 --> 00:12:18,939
few years ago I talked about creating a

308
00:12:16,990 --> 00:12:20,650
custom command and control server for

309
00:12:18,940 --> 00:12:23,680
the purpose of analyzing a malware

310
00:12:20,650 --> 00:12:25,959
sample versus redeploying it but that is

311
00:12:23,680 --> 00:12:27,849
a good talk that shows exactly how to go

312
00:12:25,960 --> 00:12:29,980
into creating a fully-featured command

313
00:12:27,850 --> 00:12:33,730
control server that can talk to someone

314
00:12:29,980 --> 00:12:35,950
else's malware okay so now let's look

315
00:12:33,730 --> 00:12:39,430
through walk through some actual

316
00:12:35,950 --> 00:12:41,680
examples of repurposing some Mac malware

317
00:12:39,430 --> 00:12:43,540
we're going to start with fruit fly it's

318
00:12:41,680 --> 00:12:46,660
a very good one to kind of introduce

319
00:12:43,540 --> 00:12:49,959
this topic to fruit fly is rather unique

320
00:12:46,660 --> 00:12:52,540
it was initially developed over 15 years

321
00:12:49,960 --> 00:12:55,150
ago but remained undetected and fully

322
00:12:52,540 --> 00:12:58,000
functional until quite recently it's a

323
00:12:55,150 --> 00:13:00,490
fully featured backdoor that supports a

324
00:12:58,000 --> 00:13:03,100
myriad of capabilities which makes it a

325
00:13:00,490 --> 00:13:05,560
perfect candidate for us to reconfigure

326
00:13:03,100 --> 00:13:08,320
as we'll see it's very easy for us to

327
00:13:05,560 --> 00:13:11,619
reconfigure this malware and that gives

328
00:13:08,320 --> 00:13:13,600
us a proven fully featured backdoor that

329
00:13:11,620 --> 00:13:16,000
we can utilize in our own offensive

330
00:13:13,600 --> 00:13:19,270
cyber operations way way simpler than

331
00:13:16,000 --> 00:13:22,180
writing our own from scratch fruit flies

332
00:13:19,270 --> 00:13:24,699
actually written in Perl it's a Perl

333
00:13:22,180 --> 00:13:27,489
though it's rather highly obfuscated if

334
00:13:24,700 --> 00:13:29,500
we take a peek at the back door to kind

335
00:13:27,490 --> 00:13:32,740
of reverse engineer and understand how

336
00:13:29,500 --> 00:13:34,630
it works we can see that the the Perl

337
00:13:32,740 --> 00:13:36,700
script the malware is actually looking

338
00:13:34,630 --> 00:13:38,980
for various command-line arguments and

339
00:13:36,700 --> 00:13:40,660
then will ingest and process those and

340
00:13:38,980 --> 00:13:44,530
it turns out what it's looking for is

341
00:13:40,660 --> 00:13:46,719
either a port or an IP port combo of a

342
00:13:44,530 --> 00:13:48,970
command-and-control server this means we

343
00:13:46,720 --> 00:13:51,700
can simply pass in our own command and

344
00:13:48,970 --> 00:13:53,650
control server address and port via the

345
00:13:51,700 --> 00:13:54,880
command line without actually having to

346
00:13:53,650 --> 00:13:56,970
modify the Maur

347
00:13:54,880 --> 00:13:59,260
this is great this is incredibly trivial

348
00:13:56,970 --> 00:14:01,120
so for example as we can see on the

349
00:13:59,260 --> 00:14:03,280
slide when we now go to persist this

350
00:14:01,120 --> 00:14:05,890
malware sample on new targets that we've

351
00:14:03,280 --> 00:14:07,839
compromised we can simply specify our

352
00:14:05,890 --> 00:14:09,850
own address our own command and control

353
00:14:07,840 --> 00:14:13,290
server and the malware whenever it

354
00:14:09,850 --> 00:14:16,360
executes will now connect and talk to us

355
00:14:13,290 --> 00:14:18,400
so we can tribute repurpose fruit-fly

356
00:14:16,360 --> 00:14:20,920
now and have it connect to our custom

357
00:14:18,400 --> 00:14:22,840
command and control server but to deploy

358
00:14:20,920 --> 00:14:24,969
this we need an installer because the

359
00:14:22,840 --> 00:14:27,670
original mauers installer was never

360
00:14:24,970 --> 00:14:30,040
actually recovered good news I wrote one

361
00:14:27,670 --> 00:14:32,050
it's available on pastebin and as we can

362
00:14:30,040 --> 00:14:33,699
see it's a few lines of Python code

363
00:14:32,050 --> 00:14:36,250
really nothing fancy we don't have to

364
00:14:33,700 --> 00:14:38,500
overthink this basically it persists

365
00:14:36,250 --> 00:14:40,330
them our in a manner as it was detected

366
00:14:38,500 --> 00:14:42,820
in the wild so if anyone comes across

367
00:14:40,330 --> 00:14:45,840
this new infection it'll look exactly

368
00:14:42,820 --> 00:14:48,310
like it did on the other scenarios

369
00:14:45,840 --> 00:14:49,810
finally I had previously written a

370
00:14:48,310 --> 00:14:51,400
custom command and control server as I

371
00:14:49,810 --> 00:14:53,410
mentioned so I just went ahead and

372
00:14:51,400 --> 00:14:56,170
reused this and we're gonna see a brief

373
00:14:53,410 --> 00:14:57,819
demo on the right of the screen rather

374
00:14:56,170 --> 00:15:00,550
on the left we'll see the fruit fly

375
00:14:57,820 --> 00:15:02,530
installer and we'll see a connection

376
00:15:00,550 --> 00:15:04,209
that when it's installed connect out to

377
00:15:02,530 --> 00:15:06,250
our command and control server on the

378
00:15:04,210 --> 00:15:09,190
right so we first start the command and

379
00:15:06,250 --> 00:15:11,920
control server we then run the installer

380
00:15:09,190 --> 00:15:14,530
which is going to install the repurposed

381
00:15:11,920 --> 00:15:16,420
malware it's got a beacon out and these

382
00:15:14,530 --> 00:15:18,730
are the available commands we can task

383
00:15:16,420 --> 00:15:20,860
we're gonna say please take a screen

384
00:15:18,730 --> 00:15:22,720
capture this is one of the commands that

385
00:15:20,860 --> 00:15:24,550
the malware supports and the malware is

386
00:15:22,720 --> 00:15:26,830
then going to take a screen capture and

387
00:15:24,550 --> 00:15:28,420
send it back to us we then on the

388
00:15:26,830 --> 00:15:30,010
command and control server which is also

389
00:15:28,420 --> 00:15:31,870
running on the same test box as the

390
00:15:30,010 --> 00:15:33,550
Malheur infection we then open the

391
00:15:31,870 --> 00:15:37,150
screen shot so we can see now we have

392
00:15:33,550 --> 00:15:39,430
generated a screenshot by simply sending

393
00:15:37,150 --> 00:15:40,900
the command to the repurposed malware we

394
00:15:39,430 --> 00:15:42,239
didn't have to write any code this is

395
00:15:40,900 --> 00:15:44,740
great

396
00:15:42,240 --> 00:15:46,990
so now let's repurpose a cryptocurrency

397
00:15:44,740 --> 00:15:48,760
miner is perhaps you're more interested

398
00:15:46,990 --> 00:15:50,590
in making millions of dollars but don't

399
00:15:48,760 --> 00:15:52,300
want to spend all your time and effort

400
00:15:50,590 --> 00:15:56,530
actually writing your own sample from

401
00:15:52,300 --> 00:15:59,650
scratch so our target is creative update

402
00:15:56,530 --> 00:16:02,890
this is a cryptocurrency miner that was

403
00:15:59,650 --> 00:16:09,250
spread via Trojan applications from the

404
00:16:02,890 --> 00:16:11,560
popular website Mac update com if we

405
00:16:09,250 --> 00:16:13,090
mount the malicious disk image that

406
00:16:11,560 --> 00:16:15,880
contains one of these Trojan

407
00:16:13,090 --> 00:16:18,520
applications and reverse engineer the

408
00:16:15,880 --> 00:16:19,090
malware we can see it invoking a method

409
00:16:18,520 --> 00:16:22,210
named

410
00:16:19,090 --> 00:16:24,280
execute script with privileges and what

411
00:16:22,210 --> 00:16:26,560
this method does is simply execute a

412
00:16:24,280 --> 00:16:29,620
file named script out of the

413
00:16:26,560 --> 00:16:31,449
applications resource directory so let's

414
00:16:29,620 --> 00:16:33,760
take a peek at this script to see what

415
00:16:31,450 --> 00:16:36,880
it's doing we can see what it does is it

416
00:16:33,760 --> 00:16:39,189
first launches a pristine copy of the

417
00:16:36,880 --> 00:16:41,439
application it Trojans here for example

418
00:16:39,190 --> 00:16:43,780
Firefox and it does this so that the

419
00:16:41,440 --> 00:16:45,640
user doesn't see anything is amiss right

420
00:16:43,780 --> 00:16:47,260
they're expecting this to be Firefox so

421
00:16:45,640 --> 00:16:50,140
it makes sense when the malware runs it

422
00:16:47,260 --> 00:16:52,600
launches Firefox right and then connects

423
00:16:50,140 --> 00:16:55,620
out to a server downloads a zip archive

424
00:16:52,600 --> 00:16:58,300
named MD worker zip and then

425
00:16:55,620 --> 00:17:00,960
persistently install something named MD

426
00:16:58,300 --> 00:17:04,209
worker out of this downloaded zip file

427
00:17:00,960 --> 00:17:06,610
looking at the launch agent p list or a

428
00:17:04,209 --> 00:17:08,920
property list that's persisted by the

429
00:17:06,609 --> 00:17:11,589
malware we can see the path to the

430
00:17:08,920 --> 00:17:13,840
persistent binary which is this MB

431
00:17:11,589 --> 00:17:16,139
worker file as well as some command-line

432
00:17:13,839 --> 00:17:19,869
arguments that are passed to this binary

433
00:17:16,140 --> 00:17:22,150
so if we execute this MD worker binary

434
00:17:19,869 --> 00:17:24,339
perhaps in a VM to analyze it we can see

435
00:17:22,150 --> 00:17:26,470
it's actually a legitimate crypto miner

436
00:17:24,339 --> 00:17:29,409
that belongs to a company named miner

437
00:17:26,470 --> 00:17:31,900
gate the args therefore specify the

438
00:17:29,410 --> 00:17:33,340
miner account that is where to send the

439
00:17:31,900 --> 00:17:34,240
mining results and the type of

440
00:17:33,340 --> 00:17:36,040
cryptocurrency

441
00:17:34,240 --> 00:17:38,530
so again what the hackers did is they

442
00:17:36,040 --> 00:17:41,260
took an application like Firefox they

443
00:17:38,530 --> 00:17:43,300
trojan eyes that to add this persistent

444
00:17:41,260 --> 00:17:45,460
cryptocurrency miner and then uploaded

445
00:17:43,300 --> 00:17:47,139
it to a popular website this means any

446
00:17:45,460 --> 00:17:48,340
time a user went to this website to

447
00:17:47,140 --> 00:17:50,830
download

448
00:17:48,340 --> 00:17:52,959
firefox they would get firefox but then

449
00:17:50,830 --> 00:17:56,320
a persistent cryptocurrency miner would

450
00:17:52,960 --> 00:17:58,059
also be installed in the background so

451
00:17:56,320 --> 00:18:00,428
similar to fruit fly

452
00:17:58,059 --> 00:18:03,158
since the relevant parameters are passed

453
00:18:00,429 --> 00:18:04,990
in via the command line as say opposed

454
00:18:03,159 --> 00:18:07,600
to being directly embedded into the

455
00:18:04,990 --> 00:18:09,730
binary it's very trivial for us to

456
00:18:07,600 --> 00:18:11,770
repurpose this malware to turn it into

457
00:18:09,730 --> 00:18:15,309
something that will crypto current mine

458
00:18:11,770 --> 00:18:17,710
for us so first we modify the property

459
00:18:15,309 --> 00:18:19,960
list file and we specify our own miner

460
00:18:17,710 --> 00:18:22,779
account we then zip up the malware's

461
00:18:19,960 --> 00:18:24,250
contents into an archive now instead of

462
00:18:22,779 --> 00:18:26,320
having the malware reach out to a

463
00:18:24,250 --> 00:18:28,720
download server to download that archive

464
00:18:26,320 --> 00:18:31,629
we just embed it directly into the

465
00:18:28,720 --> 00:18:33,220
Trojan Apps resourcebundle this just

466
00:18:31,630 --> 00:18:36,490
simplifies everything we don't have to

467
00:18:33,220 --> 00:18:38,529
stand up a download server we then tweak

468
00:18:36,490 --> 00:18:40,380
the script so instead it utilizes the

469
00:18:38,529 --> 00:18:43,299
zip archive we've just added

470
00:18:40,380 --> 00:18:46,120
finally we repackage everything up into

471
00:18:43,299 --> 00:18:49,299
a dmg and we're ready now to redeploy

472
00:18:46,120 --> 00:18:51,549
this to infect new systems and now

473
00:18:49,299 --> 00:18:54,039
install the repurposed reconfigured

474
00:18:51,549 --> 00:18:56,440
cryptocurrency miner so again here's a

475
00:18:54,039 --> 00:18:59,289
brief demo we're basically gonna see us

476
00:18:56,440 --> 00:19:02,230
opening or executing the repurpose

477
00:18:59,289 --> 00:19:04,710
cryptocurrency miner so first nothing

478
00:19:02,230 --> 00:19:07,510
seems amiss we execute Firefox tap

479
00:19:04,710 --> 00:19:09,940
Firefox pops up this is cool this is

480
00:19:07,510 --> 00:19:11,890
expected but in the background if we go

481
00:19:09,940 --> 00:19:14,830
and look we can see that there has been

482
00:19:11,890 --> 00:19:17,110
a persistent launch agent that is

483
00:19:14,830 --> 00:19:19,059
installed that will execute this MD

484
00:19:17,110 --> 00:19:21,729
worker which again recall is the actual

485
00:19:19,059 --> 00:19:23,080
cryptocurrency miner binary and if we

486
00:19:21,730 --> 00:19:25,390
look closely at the command-line

487
00:19:23,080 --> 00:19:27,699
arguments since we've reconfigured it

488
00:19:25,390 --> 00:19:30,850
it'll now send all the cryptocurrency

489
00:19:27,700 --> 00:19:32,529
mining results to my account so if I

490
00:19:30,850 --> 00:19:34,149
deployed this to a variety of systems

491
00:19:32,529 --> 00:19:36,250
I would now start raking in the money

492
00:19:34,149 --> 00:19:39,729
with again not having to write a single

493
00:19:36,250 --> 00:19:41,529
line of code all right let's keep on

494
00:19:39,730 --> 00:19:43,690
with the idea of making money I think we

495
00:19:41,529 --> 00:19:46,059
all like to do that so perhaps you want

496
00:19:43,690 --> 00:19:47,980
to deploy some ransomware without again

497
00:19:46,059 --> 00:19:50,860
spending spending any time running your

498
00:19:47,980 --> 00:19:54,220
own so here we'll talk through how to

499
00:19:50,860 --> 00:19:56,649
repurpose key ranger key ranger was the

500
00:19:54,220 --> 00:19:58,809
first fully functional in the wild piece

501
00:19:56,649 --> 00:20:01,899
of read somewhere that targeted Mac OS

502
00:19:58,809 --> 00:20:04,360
what hackers did again they infect

503
00:20:01,900 --> 00:20:06,760
a popular website specifically the

504
00:20:04,360 --> 00:20:09,580
developers website for the transmission

505
00:20:06,760 --> 00:20:11,680
BitTorrent client which means that when

506
00:20:09,580 --> 00:20:13,899
users went to the developer's website to

507
00:20:11,680 --> 00:20:15,790
download transmission instead of getting

508
00:20:13,900 --> 00:20:18,250
a pristine copy they would get an

509
00:20:15,790 --> 00:20:20,050
infected trojan eyes copy that would

510
00:20:18,250 --> 00:20:23,020
contain this piece of ransomware

511
00:20:20,050 --> 00:20:25,270
if we look at the malware's binary code

512
00:20:23,020 --> 00:20:28,270
we can see it executing something named

513
00:20:25,270 --> 00:20:30,760
general dot RTF out of the application

514
00:20:28,270 --> 00:20:32,650
bundle now general general dot RTF is

515
00:20:30,760 --> 00:20:34,570
generally a document but in this

516
00:20:32,650 --> 00:20:38,290
scenario it's actually a malicious mock

517
00:20:34,570 --> 00:20:40,870
Oh executable so what this binary does

518
00:20:38,290 --> 00:20:43,480
this general dot RTF binary it first

519
00:20:40,870 --> 00:20:45,280
sleeps for a few days and then connects

520
00:20:43,480 --> 00:20:48,970
out to a remote command and control

521
00:20:45,280 --> 00:20:51,700
server expecting a response consisting

522
00:20:48,970 --> 00:20:54,610
of a public RSA encryption key and

523
00:20:51,700 --> 00:20:57,580
decryption instructions it then uses

524
00:20:54,610 --> 00:21:00,100
that public RSA key to encrypt all the

525
00:20:57,580 --> 00:21:03,760
users files and once that is completed

526
00:21:00,100 --> 00:21:05,560
displays the decryption instructions to

527
00:21:03,760 --> 00:21:09,220
the users demanding a ransom

528
00:21:05,560 --> 00:21:11,590
let's ransomware so now let's talk about

529
00:21:09,220 --> 00:21:13,570
repurposing this ransomware so we can

530
00:21:11,590 --> 00:21:16,090
use it for our own surreptitious

531
00:21:13,570 --> 00:21:17,740
purposes first and foremost we don't

532
00:21:16,090 --> 00:21:19,270
want to wait three days we're kind of

533
00:21:17,740 --> 00:21:21,490
greedy we want the money to ransomware

534
00:21:19,270 --> 00:21:23,710
to happen right away so what we can do

535
00:21:21,490 --> 00:21:25,510
is we can simply patch out or knock out

536
00:21:23,710 --> 00:21:27,400
the sleep function and we can see that

537
00:21:25,510 --> 00:21:29,200
on the slide we basically just replaced

538
00:21:27,400 --> 00:21:31,120
the binary instructions with not

539
00:21:29,200 --> 00:21:33,160
instructions this means now the malware

540
00:21:31,120 --> 00:21:35,379
won't sleep it'll immediately connect

541
00:21:33,160 --> 00:21:37,930
out to the command-and-control server

542
00:21:35,380 --> 00:21:39,970
for the encryption key and the

543
00:21:37,930 --> 00:21:41,980
decryption instructions so now we have

544
00:21:39,970 --> 00:21:43,840
to find the address of that embedded

545
00:21:41,980 --> 00:21:45,850
command-and-control server and change it

546
00:21:43,840 --> 00:21:48,070
to point to our server as obviously we

547
00:21:45,850 --> 00:21:50,020
want this malware to connect to us so we

548
00:21:48,070 --> 00:21:53,679
can give it our encryption key and our

549
00:21:50,020 --> 00:21:56,110
decryption instructions as we can see on

550
00:21:53,680 --> 00:21:57,670
the slides the address of this

551
00:21:56,110 --> 00:22:00,490
command-control server is directly

552
00:21:57,670 --> 00:22:02,740
embedded within the binary so we simply

553
00:22:00,490 --> 00:22:05,130
go in in a hex editor and change those

554
00:22:02,740 --> 00:22:08,770
bytes here we change them to localhost

555
00:22:05,130 --> 00:22:12,340
127 dot 0 dot 0 dot 1 for testing

556
00:22:08,770 --> 00:22:13,990
purposes now we need a server because

557
00:22:12,340 --> 00:22:15,379
again recall the ransomware when it

558
00:22:13,990 --> 00:22:18,290
connects out expects

559
00:22:15,380 --> 00:22:20,450
a public RSA encryption key and also

560
00:22:18,290 --> 00:22:23,450
decryption instructions this turns out

561
00:22:20,450 --> 00:22:26,540
very very simple to do we basically put

562
00:22:23,450 --> 00:22:28,880
the expected response the public RSA key

563
00:22:26,540 --> 00:22:31,580
our public RSA key and the decryption

564
00:22:28,880 --> 00:22:33,110
instructions in a text file and then we

565
00:22:31,580 --> 00:22:35,810
can actually just serve this up via

566
00:22:33,110 --> 00:22:38,000
netcat this now means anytime any of

567
00:22:35,810 --> 00:22:40,190
these repurposed ransomware samples

568
00:22:38,000 --> 00:22:42,320
connect to our server which is really

569
00:22:40,190 --> 00:22:44,090
just a netcat listener the correct

570
00:22:42,320 --> 00:22:47,240
response will be sent down to the

571
00:22:44,090 --> 00:22:49,340
malware so again here's a demo of key

572
00:22:47,240 --> 00:22:51,140
ranger fully repurposed we'll see it

573
00:22:49,340 --> 00:22:52,909
connect out to our command and control

574
00:22:51,140 --> 00:22:55,130
servers because we've patched the binary

575
00:22:52,910 --> 00:22:57,800
to talk to us and we're gonna provide it

576
00:22:55,130 --> 00:23:01,730
with our public RSA key and the

577
00:22:57,800 --> 00:23:04,460
decryption instructions to launch the

578
00:23:01,730 --> 00:23:06,140
malware just runs it connects out and we

579
00:23:04,460 --> 00:23:07,910
can see it starting to encrypt all the

580
00:23:06,140 --> 00:23:10,010
files for example all the slides I have

581
00:23:07,910 --> 00:23:11,240
on the desktop and you can imagine on

582
00:23:10,010 --> 00:23:13,670
the user system this would be their

583
00:23:11,240 --> 00:23:15,140
photos their tax returns perhaps you

584
00:23:13,670 --> 00:23:16,670
know their research things that they're

585
00:23:15,140 --> 00:23:19,400
really bummed about if they get

586
00:23:16,670 --> 00:23:21,860
encrypted we can then see that when the

587
00:23:19,400 --> 00:23:22,940
malware is fully complete when it's

588
00:23:21,860 --> 00:23:25,100
encrypted all the files

589
00:23:22,940 --> 00:23:28,640
it displays the decryption instructions

590
00:23:25,100 --> 00:23:30,919
again these are sent by us to the system

591
00:23:28,640 --> 00:23:32,690
so we can pop up and as we can see here

592
00:23:30,920 --> 00:23:34,700
we say please send all your money to

593
00:23:32,690 --> 00:23:36,980
Patrick you obviously probably should

594
00:23:34,700 --> 00:23:38,210
use an anonymized email address but the

595
00:23:36,980 --> 00:23:40,850
point is we can now provide our own

596
00:23:38,210 --> 00:23:42,800
decryption instructions and tell the

597
00:23:40,850 --> 00:23:46,310
user where to send the money so that we

598
00:23:42,800 --> 00:23:47,659
will decrypt the files alright finally

599
00:23:46,310 --> 00:23:49,490
we have win tale

600
00:23:47,660 --> 00:23:50,750
this is the last mac malware sample

601
00:23:49,490 --> 00:23:53,210
we're going to talk about repurposing

602
00:23:50,750 --> 00:23:56,180
Wintel is lovely it was written by a

603
00:23:53,210 --> 00:23:58,340
rather sophisticated apt group that was

604
00:23:56,180 --> 00:23:59,870
targeting individuals of a Middle

605
00:23:58,340 --> 00:24:02,149
Eastern government so fairly

606
00:23:59,870 --> 00:24:04,189
sophisticated backdoor used in cyber

607
00:24:02,150 --> 00:24:05,660
espionage operations we're gonna see

608
00:24:04,190 --> 00:24:07,580
that we're gonna be able to repurpose

609
00:24:05,660 --> 00:24:09,620
both their exploit and their backdoor

610
00:24:07,580 --> 00:24:11,240
again this is great this gives us this

611
00:24:09,620 --> 00:24:13,820
really comprehensive advanced

612
00:24:11,240 --> 00:24:16,010
sophisticated Mac implant and exploit

613
00:24:13,820 --> 00:24:17,389
that we can utilize for our own purposes

614
00:24:16,010 --> 00:24:20,629
without actually having to write

615
00:24:17,390 --> 00:24:22,730
anything from scratch now one of the

616
00:24:20,630 --> 00:24:25,310
most interesting aspects of this bower

617
00:24:22,730 --> 00:24:28,040
was its infection vector and the way it

618
00:24:25,310 --> 00:24:29,030
got on to Mac systems was by abusing a

619
00:24:28,040 --> 00:24:32,450
legitimate feature

620
00:24:29,030 --> 00:24:34,040
of Mac OS called custom URL schemes now

621
00:24:32,450 --> 00:24:35,480
I've written a very detailed blog if

622
00:24:34,040 --> 00:24:38,690
you're interested in all the low-level

623
00:24:35,480 --> 00:24:41,570
technical details but suffice to say on

624
00:24:38,690 --> 00:24:44,690
Mac OS anytime an application hits the

625
00:24:41,570 --> 00:24:47,240
file system if it registers or if it

626
00:24:44,690 --> 00:24:49,880
contains any handlers for custom URL

627
00:24:47,240 --> 00:24:52,820
schemes Mac OS will automatically

628
00:24:49,880 --> 00:24:55,010
registered those and then once the URL

629
00:24:52,820 --> 00:24:57,200
scheme has been registered to the file

630
00:24:55,010 --> 00:24:59,360
system you can now launch the

631
00:24:57,200 --> 00:25:01,640
application by making a request to that

632
00:24:59,360 --> 00:25:06,050
custom URL scheme for example via the

633
00:25:01,640 --> 00:25:08,720
browser in terms of the backdoor it

634
00:25:06,050 --> 00:25:11,240
persists as a login item and supports

635
00:25:08,720 --> 00:25:13,580
capabilities such as file collection and

636
00:25:11,240 --> 00:25:16,190
file exfiltration we run a process

637
00:25:13,580 --> 00:25:18,290
monitor we can see as we show on the

638
00:25:16,190 --> 00:25:20,990
slide that we can see the malware

639
00:25:18,290 --> 00:25:23,750
utilizing Mac OS is built in zip utility

640
00:25:20,990 --> 00:25:26,480
to compress collected files and then it

641
00:25:23,750 --> 00:25:30,260
uploads them to the apt group server via

642
00:25:26,480 --> 00:25:33,530
the curl command the backdoor also

643
00:25:30,260 --> 00:25:35,090
supports a file download capability if

644
00:25:33,530 --> 00:25:37,790
we reverse engineer the malware and we

645
00:25:35,090 --> 00:25:39,740
look at its SDF method we can see it

646
00:25:37,790 --> 00:25:41,960
decrypts the address of an embedded

647
00:25:39,740 --> 00:25:44,900
command control server and then makes a

648
00:25:41,960 --> 00:25:46,820
initial request to get a name of the

649
00:25:44,900 --> 00:25:48,770
file that it's about to download and

650
00:25:46,820 --> 00:25:51,260
then makes a second request to get the

651
00:25:48,770 --> 00:25:54,320
actual contents of the file to save to

652
00:25:51,260 --> 00:25:56,810
the system we fire up a network monitor

653
00:25:54,320 --> 00:25:58,340
we can see it making these two requests

654
00:25:56,810 --> 00:26:00,679
and if you look on the slide you can see

655
00:25:58,340 --> 00:26:03,350
the address of the decrypted command and

656
00:26:00,680 --> 00:26:04,850
control server flux to key comm this

657
00:26:03,350 --> 00:26:06,740
will come up again shortly because

658
00:26:04,850 --> 00:26:08,330
obviously we will want to change this so

659
00:26:06,740 --> 00:26:12,050
the malware will talk to our servers

660
00:26:08,330 --> 00:26:14,090
instead the backdoor will also execute

661
00:26:12,050 --> 00:26:17,300
then this downloaded file if we look at

662
00:26:14,090 --> 00:26:19,429
more disassembly in this SDF method we

663
00:26:17,300 --> 00:26:21,740
can see that it'll ends if it to the

664
00:26:19,430 --> 00:26:24,320
library directory and then execute it

665
00:26:21,740 --> 00:26:25,790
via NS task API so again this malware

666
00:26:24,320 --> 00:26:29,179
supports a download and execute

667
00:26:25,790 --> 00:26:31,310
capability finally the backdoor also

668
00:26:29,180 --> 00:26:33,020
contains some self delete logic that can

669
00:26:31,310 --> 00:26:35,240
be remotely triggered this is actually

670
00:26:33,020 --> 00:26:36,680
kind of a cool capability what happens

671
00:26:35,240 --> 00:26:38,870
is every them every time the malware

672
00:26:36,680 --> 00:26:40,130
starts up it spawns a background thread

673
00:26:38,870 --> 00:26:42,750
that connects to the command and control

674
00:26:40,130 --> 00:26:45,480
server to a certain API endpoint

675
00:26:42,750 --> 00:26:47,820
and if that API endpoint returns a 1

676
00:26:45,480 --> 00:26:49,680
this is the self-destruct command for

677
00:26:47,820 --> 00:26:51,870
the malware and what the malware will do

678
00:26:49,680 --> 00:26:54,990
it'll first uninstall itself and then

679
00:26:51,870 --> 00:26:56,219
terminate alright so now we have a

680
00:26:54,990 --> 00:26:57,840
pretty good understanding of the

681
00:26:56,220 --> 00:26:59,370
backdoor both how it works how it gets

682
00:26:57,840 --> 00:27:02,159
on the system and what its capabilities

683
00:26:59,370 --> 00:27:03,689
are so let's go ahead and repurpose it

684
00:27:02,160 --> 00:27:06,690
so we can utilize it in our own

685
00:27:03,690 --> 00:27:08,640
offensive cyber operations so first

686
00:27:06,690 --> 00:27:11,370
thing let's talk about repurposing the

687
00:27:08,640 --> 00:27:13,560
exploit what we know it's pretty simple

688
00:27:11,370 --> 00:27:15,300
to create a malicious web page that will

689
00:27:13,560 --> 00:27:18,960
auto download something when the user

690
00:27:15,300 --> 00:27:22,080
visits and Safari kindly will Auto

691
00:27:18,960 --> 00:27:24,450
extract any zip file recall as we

692
00:27:22,080 --> 00:27:26,429
mentioned if the item we're downloading

693
00:27:24,450 --> 00:27:29,460
in the zip file that's Auto extracted by

694
00:27:26,430 --> 00:27:31,980
Safari again that's a feature contains a

695
00:27:29,460 --> 00:27:34,200
custom URL handler Mac OS will

696
00:27:31,980 --> 00:27:37,200
automatically register that handler for

697
00:27:34,200 --> 00:27:39,750
us we can then trigger the launch of

698
00:27:37,200 --> 00:27:42,390
that malware via request to that custom

699
00:27:39,750 --> 00:27:44,190
URL and if the user clicks allow this

700
00:27:42,390 --> 00:27:46,770
will launch the malware and the system

701
00:27:44,190 --> 00:27:49,350
will now be fully infected so here's a

702
00:27:46,770 --> 00:27:51,330
brief demo we're gonna see the repurpose

703
00:27:49,350 --> 00:27:53,939
exploit the user has gone to this

704
00:27:51,330 --> 00:27:57,120
website this is a pop-up from Safari and

705
00:27:53,940 --> 00:27:59,220
if the user clicks on open here we can

706
00:27:57,120 --> 00:28:01,260
now see that the system is fully

707
00:27:59,220 --> 00:28:02,640
infected and for example we can go in

708
00:28:01,260 --> 00:28:07,590
and we can see that the malware has

709
00:28:02,640 --> 00:28:09,420
persisted as a login item so now we have

710
00:28:07,590 --> 00:28:12,149
the ability to redeploy this using this

711
00:28:09,420 --> 00:28:14,190
apt groups exploit again very trivial to

712
00:28:12,150 --> 00:28:15,900
repurpose to install our own payload

713
00:28:14,190 --> 00:28:17,730
we're gonna use the same implant

714
00:28:15,900 --> 00:28:19,680
backdoor as they do but it's going to be

715
00:28:17,730 --> 00:28:22,680
reconfigured and repurpose so it'll

716
00:28:19,680 --> 00:28:25,020
connect to us for tasking so step one we

717
00:28:22,680 --> 00:28:28,290
must modify the addresses of the

718
00:28:25,020 --> 00:28:29,910
command-and-control server so it

719
00:28:28,290 --> 00:28:31,200
connects to us so that we can task it

720
00:28:29,910 --> 00:28:32,490
right we don't wanna connecting back to

721
00:28:31,200 --> 00:28:34,860
the original attackers that would just

722
00:28:32,490 --> 00:28:36,780
be lame however there's a problem and

723
00:28:34,860 --> 00:28:39,149
this is that the embedded addresses are

724
00:28:36,780 --> 00:28:41,040
encrypted so we can't just open up a

725
00:28:39,150 --> 00:28:44,100
text editor and change them to our own

726
00:28:41,040 --> 00:28:45,420
addresses but not to worry what we can

727
00:28:44,100 --> 00:28:47,969
do is we can utilize some runtime

728
00:28:45,420 --> 00:28:50,070
decryption to decrypt the command and

729
00:28:47,970 --> 00:28:52,650
control servers before the malware

730
00:28:50,070 --> 00:28:54,720
actually uses them so what we can do is

731
00:28:52,650 --> 00:28:56,429
we can coerce them our to load an

732
00:28:54,720 --> 00:28:58,619
external library that we package up

733
00:28:56,429 --> 00:29:00,899
into the malware and we can see on the

734
00:28:58,619 --> 00:29:03,029
slide that yes indeed our dynamic

735
00:29:00,899 --> 00:29:06,119
library has been loaded anytime the

736
00:29:03,029 --> 00:29:08,519
malware executes so now what we want to

737
00:29:06,119 --> 00:29:10,350
do is I mentioned is we want to decrypt

738
00:29:08,519 --> 00:29:11,879
or allow the malware to decrypt the

739
00:29:10,350 --> 00:29:13,949
command-and-control addresses and then

740
00:29:11,879 --> 00:29:16,049
swap them out before the malware

741
00:29:13,950 --> 00:29:18,749
actually utilizes them to determine

742
00:29:16,049 --> 00:29:21,990
where to connect out so what our dynamic

743
00:29:18,749 --> 00:29:24,809
library does is swap out the malware

744
00:29:21,990 --> 00:29:26,820
address the malware's a decryption

745
00:29:24,809 --> 00:29:28,590
function so that we can swap out these

746
00:29:26,820 --> 00:29:30,509
command and control servers and we do

747
00:29:28,590 --> 00:29:33,779
this via something called Swizzle

748
00:29:30,509 --> 00:29:35,850
is accomplished via a powerful Apple API

749
00:29:33,779 --> 00:29:38,429
method underscore exchange

750
00:29:35,850 --> 00:29:40,230
implementation so we can see on the

751
00:29:38,429 --> 00:29:43,710
slide once we've swapped out the

752
00:29:40,230 --> 00:29:45,720
decription routine anytime any piece of

753
00:29:43,710 --> 00:29:47,700
code in the malware calls into the

754
00:29:45,720 --> 00:29:48,929
decryption routine for example to

755
00:29:47,700 --> 00:29:50,879
decrypt the address of the command

756
00:29:48,929 --> 00:29:52,679
control server our code and our

757
00:29:50,879 --> 00:29:55,769
dynamically dynamic library

758
00:29:52,679 --> 00:29:57,929
transparently gets invoked so what we do

759
00:29:55,769 --> 00:29:59,759
is we call back into the malware's

760
00:29:57,929 --> 00:30:01,259
original decryption routine I don't know

761
00:29:59,759 --> 00:30:04,049
how its decrypting the strings and

762
00:30:01,259 --> 00:30:06,539
frankly I don't care but then we get to

763
00:30:04,049 --> 00:30:08,340
see the response of that and we can see

764
00:30:06,539 --> 00:30:10,259
if it's the command and control server

765
00:30:08,340 --> 00:30:11,999
addresses we don't return those back to

766
00:30:10,259 --> 00:30:13,889
the malware we simply swap those out

767
00:30:11,999 --> 00:30:18,059
with our own so we can see that on the

768
00:30:13,889 --> 00:30:20,820
slide so I added some debugging messages

769
00:30:18,059 --> 00:30:23,639
to the library so now if we execute the

770
00:30:20,820 --> 00:30:26,189
repurpose backdoor it's going to load in

771
00:30:23,639 --> 00:30:28,439
our additional dynamic library that

772
00:30:26,190 --> 00:30:30,450
dynamic library is going to replace or

773
00:30:28,440 --> 00:30:32,429
swap out the malware's decryption

774
00:30:30,450 --> 00:30:34,379
function when the malware then goes to

775
00:30:32,429 --> 00:30:36,149
invoke the decryption routine for

776
00:30:34,379 --> 00:30:38,369
example to decrypt strings or the

777
00:30:36,149 --> 00:30:40,739
command and control addresses our code

778
00:30:38,369 --> 00:30:41,759
will intercept that we check to see if

779
00:30:40,740 --> 00:30:44,039
it's a command-and-control server

780
00:30:41,759 --> 00:30:46,019
address and if it is we just return our

781
00:30:44,039 --> 00:30:48,629
own and we can see that at the very

782
00:30:46,019 --> 00:30:50,700
bottom in the terminal output instead of

783
00:30:48,629 --> 00:30:53,939
returning the flux to key which is the

784
00:30:50,700 --> 00:30:55,860
addresses the original hackers used we

785
00:30:53,940 --> 00:30:57,389
returned our server comm of course this

786
00:30:55,860 --> 00:30:59,668
would be any server this is where your

787
00:30:57,389 --> 00:31:01,678
command and control server this means

788
00:30:59,669 --> 00:31:01,980
now when you go to deploy this repurpose

789
00:31:01,679 --> 00:31:03,509
Malheur

790
00:31:01,980 --> 00:31:05,399
it'll connect to your command and

791
00:31:03,509 --> 00:31:08,759
control server instead of the hackers

792
00:31:05,399 --> 00:31:09,689
original one now we still have to write

793
00:31:08,759 --> 00:31:11,070
a custom command

794
00:31:09,690 --> 00:31:13,620
and control server because this

795
00:31:11,070 --> 00:31:15,418
repurposed bowers now connects to us and

796
00:31:13,620 --> 00:31:18,120
asked for tasking so we have to

797
00:31:15,419 --> 00:31:21,570
understand how to respond to it so it'll

798
00:31:18,120 --> 00:31:23,518
do our own bidding now the main feature

799
00:31:21,570 --> 00:31:24,389
of wind tail as I mentioned is file

800
00:31:23,519 --> 00:31:26,190
exfiltration

801
00:31:24,389 --> 00:31:28,590
so that's the first capability we're

802
00:31:26,190 --> 00:31:30,179
going to add to our server if we analyze

803
00:31:28,590 --> 00:31:32,279
them out where we can see that when it

804
00:31:30,179 --> 00:31:35,399
attempts to exit rate these files it

805
00:31:32,279 --> 00:31:37,740
simply does this via a post request so

806
00:31:35,399 --> 00:31:40,469
this is very easy for us to report on

807
00:31:37,740 --> 00:31:43,289
the back end in our Python command and

808
00:31:40,470 --> 00:31:46,710
control server we simply save any post

809
00:31:43,289 --> 00:31:48,809
results that the malware sends to us so

810
00:31:46,710 --> 00:31:50,940
here's a demo this is our custom command

811
00:31:48,809 --> 00:31:53,220
and control server and we can see these

812
00:31:50,940 --> 00:31:55,620
repurposed malware when when apt

813
00:31:53,220 --> 00:31:59,429
backdoors are now connecting to us and

814
00:31:55,620 --> 00:32:01,709
our exfiltrating files via post requests

815
00:31:59,429 --> 00:32:03,419
so on the other side of the screen in

816
00:32:01,710 --> 00:32:05,519
the smaller Finder window we can see

817
00:32:03,419 --> 00:32:07,860
that our Python script is just saving

818
00:32:05,519 --> 00:32:10,080
the XML traded files out to a directory

819
00:32:07,860 --> 00:32:12,629
so now we support the ability and now

820
00:32:10,080 --> 00:32:14,519
all the exfiltrated files from infected

821
00:32:12,629 --> 00:32:17,009
systems all over the world where we've

822
00:32:14,519 --> 00:32:19,049
redeployed this malware to are going to

823
00:32:17,009 --> 00:32:23,120
be sending files to us and we're saving

824
00:32:19,049 --> 00:32:23,120
them off to our own server for analysis

825
00:32:23,870 --> 00:32:28,739
we also want to extend our custom

826
00:32:26,850 --> 00:32:31,080
command control server to support the

827
00:32:28,740 --> 00:32:33,570
ability to download and execute new

828
00:32:31,080 --> 00:32:35,879
files on the system so we noted the

829
00:32:33,570 --> 00:32:37,470
Malheur makes two requests first it

830
00:32:35,879 --> 00:32:39,570
connects to the server to get the name

831
00:32:37,470 --> 00:32:43,080
of the file and then makes a second

832
00:32:39,570 --> 00:32:45,269
request to download that actual file so

833
00:32:43,080 --> 00:32:48,059
again the malware will then download

834
00:32:45,269 --> 00:32:49,769
whatever we specify and execute it turns

835
00:32:48,059 --> 00:32:51,658
out we only need about ten lines of code

836
00:32:49,769 --> 00:32:55,679
to add to our custom command and control

837
00:32:51,659 --> 00:32:57,149
server to support this functionality so

838
00:32:55,679 --> 00:32:59,129
again here's a demo let's watch in

839
00:32:57,149 --> 00:33:01,229
action will see the repurpose bower

840
00:32:59,129 --> 00:33:03,178
connect out to our custom command and

841
00:33:01,230 --> 00:33:07,919
control server and then it will download

842
00:33:03,179 --> 00:33:10,169
and execute the calculator so first

843
00:33:07,919 --> 00:33:12,090
there's the initial connection connects

844
00:33:10,169 --> 00:33:15,870
out we say please download and execute

845
00:33:12,090 --> 00:33:18,330
calculator bower does that so now we

846
00:33:15,870 --> 00:33:21,119
have the ability to remotely download

847
00:33:18,330 --> 00:33:23,090
and execute any file to any of these

848
00:33:21,119 --> 00:33:24,560
repurposed malware systems

849
00:33:23,090 --> 00:33:26,360
which is great because this allows us to

850
00:33:24,560 --> 00:33:28,070
install other tools or perhaps even

851
00:33:26,360 --> 00:33:32,120
another piece of malware so very

852
00:33:28,070 --> 00:33:34,580
powerful capability to support finally

853
00:33:32,120 --> 00:33:37,879
let's also make the malware support the

854
00:33:34,580 --> 00:33:39,560
remote self delete command because at

855
00:33:37,880 --> 00:33:40,790
some point you know maybe the FBI will

856
00:33:39,560 --> 00:33:43,159
show up on your door and start knocking

857
00:33:40,790 --> 00:33:45,440
so be really great to simply press a

858
00:33:43,160 --> 00:33:47,300
button and have all these repurposed

859
00:33:45,440 --> 00:33:48,920
malware infections all over the world

860
00:33:47,300 --> 00:33:50,690
simply self delete and then you can say

861
00:33:48,920 --> 00:33:52,880
ah I didn't do anything right

862
00:33:50,690 --> 00:33:54,680
turns out it's pretty easy to support

863
00:33:52,880 --> 00:33:56,210
this functionality as we mentioned in

864
00:33:54,680 --> 00:33:58,970
the malware every time it starts up

865
00:33:56,210 --> 00:34:02,030
connects out and looks for a response

866
00:33:58,970 --> 00:34:04,370
basically should I self delete so if we

867
00:34:02,030 --> 00:34:06,740
respond to this and say yes returning a

868
00:34:04,370 --> 00:34:09,739
one the malware will uninstall and

869
00:34:06,740 --> 00:34:11,870
terminate so here we have another demo

870
00:34:09,739 --> 00:34:14,389
of that again this is a repurposed

871
00:34:11,870 --> 00:34:16,370
sample that we've redeployed you look on

872
00:34:14,389 --> 00:34:17,989
the screen you can see that orange final

873
00:34:16,370 --> 00:34:20,359
presentation icon that is how the

874
00:34:17,989 --> 00:34:21,799
malware installs itself it's not the

875
00:34:20,360 --> 00:34:23,929
stealthiest but this is in a hidden

876
00:34:21,800 --> 00:34:26,090
system directory so the average user is

877
00:34:23,929 --> 00:34:27,710
not going to be poking around well see

878
00:34:26,090 --> 00:34:29,600
though that when it connects out and at

879
00:34:27,710 --> 00:34:31,429
the bottom we have our custom command

880
00:34:29,600 --> 00:34:33,770
and control server we are gonna give it

881
00:34:31,429 --> 00:34:35,840
the self delete command that file will

882
00:34:33,770 --> 00:34:38,120
be removed and then the malware will

883
00:34:35,840 --> 00:34:43,190
stop beaconing because obviously we've

884
00:34:38,120 --> 00:34:46,149
told it just to exit so we start our

885
00:34:43,190 --> 00:34:48,980
command and control server beacons out

886
00:34:46,149 --> 00:34:50,839
we say yes please self delete the

887
00:34:48,980 --> 00:34:53,090
malware I guess that deletes itself and

888
00:34:50,840 --> 00:34:57,770
then exits so now this remote system is

889
00:34:53,090 --> 00:34:59,810
fully clean fully unex evidence to prove

890
00:34:57,770 --> 00:35:01,390
that we either ever actually infected

891
00:34:59,810 --> 00:35:03,890
that system

892
00:35:01,390 --> 00:35:07,129
okay so we've showed exactly how to

893
00:35:03,890 --> 00:35:09,650
repurpose a myriad of Mac malware from

894
00:35:07,130 --> 00:35:13,070
backdoors - ransomware - cryptocurrency

895
00:35:09,650 --> 00:35:15,320
miners however we need to talk about

896
00:35:13,070 --> 00:35:17,450
remaining undetected as generally

897
00:35:15,320 --> 00:35:20,060
speaking we are repurposing known

898
00:35:17,450 --> 00:35:23,149
malware samples which means both Mac OS

899
00:35:20,060 --> 00:35:25,850
Apple and 30 third-party AV products

900
00:35:23,150 --> 00:35:29,960
will likely block or detect these

901
00:35:25,850 --> 00:35:32,509
samples which would suck so first up we

902
00:35:29,960 --> 00:35:35,120
have Mac OS is built-in malware

903
00:35:32,510 --> 00:35:36,510
mitigation such as X protect the malware

904
00:35:35,120 --> 00:35:37,980
removal tool

905
00:35:36,510 --> 00:35:40,530
and code signing certificate challenge

906
00:35:37,980 --> 00:35:42,660
at first glance glance these all appear

907
00:35:40,530 --> 00:35:46,230
to be rather problematic for us if we're

908
00:35:42,660 --> 00:35:48,180
redeploying reconfigured malware because

909
00:35:46,230 --> 00:35:50,010
these exist on all Mac computers these

910
00:35:48,180 --> 00:35:51,720
are built-in so if they're blocking our

911
00:35:50,010 --> 00:35:54,450
malware samples this means we can't

912
00:35:51,720 --> 00:35:57,330
infect any Mac's so let's talk about how

913
00:35:54,450 --> 00:36:00,419
to bypass these because if we want to

914
00:35:57,330 --> 00:36:02,819
redeploy a reconfigured or repurpose

915
00:36:00,420 --> 00:36:06,000
piece of malware it really suck if it

916
00:36:02,820 --> 00:36:08,550
was blocked by Apple so first up we have

917
00:36:06,000 --> 00:36:10,350
X protect this is a simple signature

918
00:36:08,550 --> 00:36:12,870
based AV scanner that's actually built

919
00:36:10,350 --> 00:36:15,210
into all versions of Mac OS so yes Mac

920
00:36:12,870 --> 00:36:17,250
OS has a built-in antivirus of the

921
00:36:15,210 --> 00:36:19,890
scanner it's rather limited it only

922
00:36:17,250 --> 00:36:22,710
scans files downloaded by the user the

923
00:36:19,890 --> 00:36:24,900
first time it's executed the detection

924
00:36:22,710 --> 00:36:27,300
signatures that X protect uses are

925
00:36:24,900 --> 00:36:30,420
located in a system file called X

926
00:36:27,300 --> 00:36:33,300
protect Yara and we can see if we dump

927
00:36:30,420 --> 00:36:35,250
these signatures there is 140 Ranger

928
00:36:33,300 --> 00:36:39,510
again this is the repurpose ransomware

929
00:36:35,250 --> 00:36:41,790
sample we are going to deploy since X

930
00:36:39,510 --> 00:36:45,000
protect though is purely signature based

931
00:36:41,790 --> 00:36:46,680
turns out it's trivial to bypass so if

932
00:36:45,000 --> 00:36:48,780
we take a closer look for that key

933
00:36:46,680 --> 00:36:51,060
ranger sample which would detect even

934
00:36:48,780 --> 00:36:53,060
our repurpose binary and block it

935
00:36:51,060 --> 00:36:55,950
meaning we can't actually repurpose it

936
00:36:53,060 --> 00:36:58,770
we can see that it's simply matching on

937
00:36:55,950 --> 00:37:01,290
a certain sequence of instructions so

938
00:36:58,770 --> 00:37:04,230
knowing this to bypass the signature we

939
00:37:01,290 --> 00:37:07,020
can simply reorder or modify any of

940
00:37:04,230 --> 00:37:09,120
these instructions by changing various

941
00:37:07,020 --> 00:37:11,670
bytes this will of course cause the

942
00:37:09,120 --> 00:37:12,960
signature to no longer match which will

943
00:37:11,670 --> 00:37:16,020
mean the malware will be allowed to

944
00:37:12,960 --> 00:37:17,730
execute so here for example we change

945
00:37:16,020 --> 00:37:21,810
the number of bytes that may be written

946
00:37:17,730 --> 00:37:23,820
to a buffer from Oh X 400 200 X 300 this

947
00:37:21,810 --> 00:37:26,009
won't impact the malware functionality

948
00:37:23,820 --> 00:37:27,960
at all but will change

949
00:37:26,010 --> 00:37:30,570
the malware just enough that one byte

950
00:37:27,960 --> 00:37:32,460
chains to ensure that the signature no

951
00:37:30,570 --> 00:37:34,470
longer hits and that the malware will

952
00:37:32,460 --> 00:37:36,840
now no longer be detected by X protect

953
00:37:34,470 --> 00:37:39,419
so again another demo we have two

954
00:37:36,840 --> 00:37:41,340
instances of key ranger on the Left

955
00:37:39,420 --> 00:37:43,410
we're gonna have the original sample on

956
00:37:41,340 --> 00:37:46,830
the right is our repurpose sample that

957
00:37:43,410 --> 00:37:48,270
also has this one byte modification so

958
00:37:46,830 --> 00:37:50,100
we're gonna see the user execute the

959
00:37:48,270 --> 00:37:52,320
first sample and it's blocked

960
00:37:50,100 --> 00:37:54,150
Mac OS says this is infected and the

961
00:37:52,320 --> 00:37:56,850
only option you have is move to trash or

962
00:37:54,150 --> 00:37:58,020
cancel however if we execute the second

963
00:37:56,850 --> 00:37:59,220
one it's going to say this is an

964
00:37:58,020 --> 00:38:01,350
application from the Internet are you

965
00:37:59,220 --> 00:38:03,089
sure you want to execute and if you do

966
00:38:01,350 --> 00:38:05,450
it'll be allowed to run and will

967
00:38:03,090 --> 00:38:10,650
persistently install the ransomware

968
00:38:05,450 --> 00:38:12,899
great now on to code signing checks most

969
00:38:10,650 --> 00:38:14,760
binaries on Mac OS our code signed

970
00:38:12,900 --> 00:38:15,480
signed binaries are not blocked by

971
00:38:14,760 --> 00:38:17,760
gatekeeper

972
00:38:15,480 --> 00:38:20,490
thus a lot of Mac malware is now code

973
00:38:17,760 --> 00:38:22,860
signed a downside from the attacker or

974
00:38:20,490 --> 00:38:26,009
from the malware's point of view is once

975
00:38:22,860 --> 00:38:28,170
the malware has been detected Apple can

976
00:38:26,010 --> 00:38:30,270
revoke the cert which means that the

977
00:38:28,170 --> 00:38:32,850
malware will now not run on any new

978
00:38:30,270 --> 00:38:35,670
systems here for example we can see the

979
00:38:32,850 --> 00:38:37,950
wind tail backdoor it's code signed

980
00:38:35,670 --> 00:38:39,630
certificate has been revoked from Apple

981
00:38:37,950 --> 00:38:41,910
which means if you take wind tail and

982
00:38:39,630 --> 00:38:43,380
try to run it on a new system even if

983
00:38:41,910 --> 00:38:44,879
you've tricked the user into visiting

984
00:38:43,380 --> 00:38:47,790
your web page and your exploit has

985
00:38:44,880 --> 00:38:49,680
successfully fired Mac OS will actually

986
00:38:47,790 --> 00:38:51,900
block it saying hey this code signing

987
00:38:49,680 --> 00:38:54,419
certificate has been revoked that's

988
00:38:51,900 --> 00:38:57,300
problematic for us of course we want our

989
00:38:54,420 --> 00:38:59,670
repurpose sample to run now the problem

990
00:38:57,300 --> 00:39:02,070
though is just that revoked code signing

991
00:38:59,670 --> 00:39:03,840
certificate not the malware per se so

992
00:39:02,070 --> 00:39:06,390
what we can do is we can simply remove

993
00:39:03,840 --> 00:39:08,520
that code signing certificate and then

994
00:39:06,390 --> 00:39:11,339
either distribute the repurpose malware

995
00:39:08,520 --> 00:39:13,470
unsigned or resign it with another

996
00:39:11,340 --> 00:39:16,500
legitimate developer code signing

997
00:39:13,470 --> 00:39:17,879
certificate pretty easy to get so first

998
00:39:16,500 --> 00:39:19,410
thing we need to do is unsign the

999
00:39:17,880 --> 00:39:21,180
malware to get rid of that revoked code

1000
00:39:19,410 --> 00:39:23,730
signing certificate turns out you can

1001
00:39:21,180 --> 00:39:26,549
use apple's code sign utility there's an

1002
00:39:23,730 --> 00:39:28,380
undocumented flag - - remove signature

1003
00:39:26,550 --> 00:39:30,150
this will then remove that revoked

1004
00:39:28,380 --> 00:39:32,250
signature the malware will now be able

1005
00:39:30,150 --> 00:39:34,290
to run although it's still unsigned to

1006
00:39:32,250 --> 00:39:36,810
blend in and bypass gatekeeper we want

1007
00:39:34,290 --> 00:39:40,220
to re-sign it and again we can use the

1008
00:39:36,810 --> 00:39:42,960
code sign utility passing the - s flag

1009
00:39:40,220 --> 00:39:45,890
so now our repurposed re-signed wind

1010
00:39:42,960 --> 00:39:49,350
tail will no longer be blocked by Mac OS

1011
00:39:45,890 --> 00:39:51,750
finally we have Mr T this is the malware

1012
00:39:49,350 --> 00:39:54,390
removal tool this is another AV like

1013
00:39:51,750 --> 00:39:58,890
tool that's built into Mac OS it's

1014
00:39:54,390 --> 00:40:00,750
similar to X protect scans form our but

1015
00:39:58,890 --> 00:40:02,609
will scan your entire system and if any

1016
00:40:00,750 --> 00:40:03,460
of its signatures match it'll delete

1017
00:40:02,610 --> 00:40:05,710
that

1018
00:40:03,460 --> 00:40:07,690
so again we don't want to run into that

1019
00:40:05,710 --> 00:40:09,760
we don't want MRT to detect our

1020
00:40:07,690 --> 00:40:11,349
repurpose malware because otherwise

1021
00:40:09,760 --> 00:40:13,900
Apple will go ahead and delete it from

1022
00:40:11,349 --> 00:40:17,050
all the systems that we've infected now

1023
00:40:13,900 --> 00:40:19,510
unlike XProtect MRT signatures are

1024
00:40:17,050 --> 00:40:21,190
directly embedded into the MRT binary

1025
00:40:19,510 --> 00:40:24,819
they're not in some external property

1026
00:40:21,190 --> 00:40:27,130
list or yarra file you can also see as

1027
00:40:24,819 --> 00:40:29,230
an interesting aside that Apple also

1028
00:40:27,130 --> 00:40:31,059
uses MRT from time to time to remove

1029
00:40:29,230 --> 00:40:33,790
vulnerable third party code for example

1030
00:40:31,059 --> 00:40:35,650
the popular video chat application zoom

1031
00:40:33,790 --> 00:40:37,869
had a remotely exploitable vulnerability

1032
00:40:35,650 --> 00:40:41,010
Apple decide to basically remove that

1033
00:40:37,869 --> 00:40:44,109
from max around the world by using MRT

1034
00:40:41,010 --> 00:40:46,030
now since MRT like X protects uses

1035
00:40:44,109 --> 00:40:48,190
signatures albeit it's signatures are

1036
00:40:46,030 --> 00:40:50,740
embedded into the binary it's very

1037
00:40:48,190 --> 00:40:53,260
trivial to bypass MRT so that it doesn't

1038
00:40:50,740 --> 00:40:56,470
in doesn't detect our repurposes samples

1039
00:40:53,260 --> 00:40:58,569
so if we dump the MRT binary we can for

1040
00:40:56,470 --> 00:41:00,609
example see there's a signature for

1041
00:40:58,569 --> 00:41:02,710
fruit-fly which is one of the samples we

1042
00:41:00,609 --> 00:41:05,799
talked about earlier how to repurpose

1043
00:41:02,710 --> 00:41:08,109
and redeployed so if we examine the

1044
00:41:05,800 --> 00:41:10,660
signature we can see it's looking for

1045
00:41:08,109 --> 00:41:13,869
and detecting fruit fly based on both

1046
00:41:10,660 --> 00:41:14,410
the path of the malware and the name of

1047
00:41:13,869 --> 00:41:17,319
its launch

1048
00:41:14,410 --> 00:41:19,420
Agent P list this means when we redeploy

1049
00:41:17,319 --> 00:41:21,579
the malware as long as we change either

1050
00:41:19,420 --> 00:41:24,369
the path or the name of the property

1051
00:41:21,579 --> 00:41:26,770
list MRT will no longer detect that so

1052
00:41:24,369 --> 00:41:28,710
this is very trivial to do all right you

1053
00:41:26,770 --> 00:41:31,599
just rename the map won't be detected I

1054
00:41:28,710 --> 00:41:33,819
also briefly want to mention bypassing

1055
00:41:31,599 --> 00:41:35,530
third-party AV products because there

1056
00:41:33,819 --> 00:41:37,240
are a decent number of users that are

1057
00:41:35,530 --> 00:41:38,980
now running third-party antivirus

1058
00:41:37,240 --> 00:41:40,959
products on your Mac again it would

1059
00:41:38,980 --> 00:41:43,720
rather suck if you're repurpose malware

1060
00:41:40,960 --> 00:41:44,859
made it onto a new system and then the

1061
00:41:43,720 --> 00:41:47,189
antivirus product that was there

1062
00:41:44,859 --> 00:41:49,210
detective that that would be unfortunate

1063
00:41:47,190 --> 00:41:51,940
now there's been a lot of talk about

1064
00:41:49,210 --> 00:41:53,770
that how to bypass AV products so we're

1065
00:41:51,940 --> 00:41:56,920
not gonna really dive into it here but

1066
00:41:53,770 --> 00:41:58,869
suffice to say especially on Mac most

1067
00:41:56,920 --> 00:42:00,220
third-party AV products are signature

1068
00:41:58,869 --> 00:42:02,619
based which means they're trivial to

1069
00:42:00,220 --> 00:42:05,348
bypass so for example I took fruit fly

1070
00:42:02,619 --> 00:42:07,530
which recall is written in Perl I ran it

1071
00:42:05,349 --> 00:42:10,089
through a free online Perl diab

1072
00:42:07,530 --> 00:42:12,549
obfuscator and then re-uploaded

1073
00:42:10,089 --> 00:42:15,308
virustotal and none of the AV engines on

1074
00:42:12,549 --> 00:42:16,839
virustotal detected it anymore now

1075
00:42:15,309 --> 00:42:17,140
that's a very basic example there's

1076
00:42:16,839 --> 00:42:19,058
other

1077
00:42:17,140 --> 00:42:20,980
more sophisticated ways to bypass AV

1078
00:42:19,059 --> 00:42:23,680
products for example you could use a

1079
00:42:20,980 --> 00:42:25,900
packer custom encrypter or even execute

1080
00:42:23,680 --> 00:42:27,848
it directly out of memory I gave a talk

1081
00:42:25,900 --> 00:42:29,769
about this at blackhat a few years ago

1082
00:42:27,849 --> 00:42:31,779
so if you're interested in bypassing

1083
00:42:29,769 --> 00:42:36,069
third-party AV products check out that

1084
00:42:31,779 --> 00:42:37,839
talk alright so for Mac users this all

1085
00:42:36,069 --> 00:42:40,058
kind of sucks right I mean we showed

1086
00:42:37,839 --> 00:42:42,640
advanced adversaries are already

1087
00:42:40,059 --> 00:42:44,710
utilizing repurposed mauer and actually

1088
00:42:42,640 --> 00:42:46,569
it's pretty straightforward to do that

1089
00:42:44,710 --> 00:42:48,460
right we just talked about how anybody

1090
00:42:46,569 --> 00:42:50,950
can take these existing Mac malware and

1091
00:42:48,460 --> 00:42:53,250
repurpose them and then utilize them for

1092
00:42:50,950 --> 00:42:55,480
your own subversive purposes and

1093
00:42:53,250 --> 00:42:57,400
unfortunately the majority of existing

1094
00:42:55,480 --> 00:43:00,910
detections and protection mechanisms

1095
00:42:57,400 --> 00:43:03,940
both on Mac OS and the third-party ones

1096
00:43:00,910 --> 00:43:06,339
are generally going to fail they're not

1097
00:43:03,940 --> 00:43:08,049
going to detect this threats and in my

1098
00:43:06,339 --> 00:43:09,519
opinion this is this is kind of lame

1099
00:43:08,049 --> 00:43:12,099
because if you think about it these

1100
00:43:09,519 --> 00:43:14,439
repurpose samples are functionally

1101
00:43:12,099 --> 00:43:16,299
exactly the same as the original they

1102
00:43:14,440 --> 00:43:17,980
have the same behavior right if we're

1103
00:43:16,299 --> 00:43:19,450
deploying a piece of ransomware even if

1104
00:43:17,980 --> 00:43:21,190
we've reconfigured it it's still going

1105
00:43:19,450 --> 00:43:22,750
to encrypt files so even though some

1106
00:43:21,190 --> 00:43:24,519
bytes are the same it's essentially

1107
00:43:22,750 --> 00:43:26,019
exactly the same piece of malware so

1108
00:43:24,519 --> 00:43:28,750
there's really no reason why tools

1109
00:43:26,019 --> 00:43:29,950
should not be able to detect that so

1110
00:43:28,750 --> 00:43:33,160
let's briefly talk about how to

1111
00:43:29,950 --> 00:43:35,410
generically detect such threats first

1112
00:43:33,160 --> 00:43:37,990
and this is a well-known fact detecting

1113
00:43:35,410 --> 00:43:40,899
malware based on signatures is bound to

1114
00:43:37,990 --> 00:43:42,879
fail so by definition what we should do

1115
00:43:40,900 --> 00:43:45,730
instead is look for the malicious

1116
00:43:42,880 --> 00:43:48,430
behaviors because by definition malware

1117
00:43:45,730 --> 00:43:51,130
does anomalous things so let's leverage

1118
00:43:48,430 --> 00:43:53,890
this fact with the goal of generically

1119
00:43:51,130 --> 00:43:56,799
detecting even repurposed Mac malware

1120
00:43:53,890 --> 00:43:59,650
threats because again as we said when we

1121
00:43:56,799 --> 00:44:01,089
or an attacker repurposes any malware

1122
00:43:59,650 --> 00:44:02,829
we're really not changing its

1123
00:44:01,089 --> 00:44:06,549
capabilities or its functionalities

1124
00:44:02,829 --> 00:44:08,650
maybe just some bytes all right so let's

1125
00:44:06,549 --> 00:44:11,109
start with persistence detecting that

1126
00:44:08,650 --> 00:44:12,940
the majority of Mac Maur including these

1127
00:44:11,109 --> 00:44:16,000
samples we talked about repurposing

1128
00:44:12,940 --> 00:44:18,220
today are going to persist so that when

1129
00:44:16,000 --> 00:44:20,589
the system is rebooted they get

1130
00:44:18,220 --> 00:44:22,839
automatically re executed so it's

1131
00:44:20,589 --> 00:44:24,839
actually very easy to detect persistence

1132
00:44:22,839 --> 00:44:27,849
you just monitor to the file system

1133
00:44:24,839 --> 00:44:30,220
observing known locations of persistence

1134
00:44:27,849 --> 00:44:31,599
and then when something writes to that

1135
00:44:30,220 --> 00:44:33,609
you can detect that it's just persistent

1136
00:44:31,599 --> 00:44:36,460
so here for example we can now

1137
00:44:33,609 --> 00:44:38,710
generically detect when wind tale either

1138
00:44:36,460 --> 00:44:42,700
the original or the repurpose sample

1139
00:44:38,710 --> 00:44:44,950
goes to persist we can also detect when

1140
00:44:42,700 --> 00:44:47,379
malware for example accesses the mic or

1141
00:44:44,950 --> 00:44:49,359
the webcam a lot of Mac malware does

1142
00:44:47,380 --> 00:44:51,190
this including the fruit flies fruit

1143
00:44:49,359 --> 00:44:51,700
flies sample we talked about repurposing

1144
00:44:51,190 --> 00:44:53,830
today

1145
00:44:51,700 --> 00:44:56,830
turns out again it's pretty easy to

1146
00:44:53,830 --> 00:44:59,109
detect this Mac OS will broadcast a

1147
00:44:56,830 --> 00:45:01,450
notification any time an application

1148
00:44:59,109 --> 00:45:02,920
accesses the mic or the webcam so if

1149
00:45:01,450 --> 00:45:04,598
you're writing a security tool you can

1150
00:45:02,920 --> 00:45:07,240
simply register for that notification

1151
00:45:04,599 --> 00:45:09,550
and then when anything accesses the

1152
00:45:07,240 --> 00:45:11,979
webcam for example fruit fly either the

1153
00:45:09,550 --> 00:45:13,720
original or the repurpose version you

1154
00:45:11,980 --> 00:45:18,550
will get a notification and you can then

1155
00:45:13,720 --> 00:45:20,859
detect that activity we also want to be

1156
00:45:18,550 --> 00:45:24,160
able to detect key loggers because a lot

1157
00:45:20,859 --> 00:45:26,470
of malware will try to capture your key

1158
00:45:24,160 --> 00:45:30,040
presses to get passwords credit card

1159
00:45:26,470 --> 00:45:32,890
information etc etc similar to a webcam

1160
00:45:30,040 --> 00:45:35,650
and mic Mac OS will broadcast a

1161
00:45:32,890 --> 00:45:37,980
notification anytime a new piece of

1162
00:45:35,650 --> 00:45:40,900
software tries to start capturing keys

1163
00:45:37,980 --> 00:45:43,720
so what we can do is we can monitor for

1164
00:45:40,900 --> 00:45:46,140
this notification and then even if a

1165
00:45:43,720 --> 00:45:48,819
Maur sample that has been repurposed

1166
00:45:46,140 --> 00:45:50,890
starts capturing Kree keystrokes

1167
00:45:48,820 --> 00:45:52,240
we will get this notification and then

1168
00:45:50,890 --> 00:45:56,098
say ok hey this is something strange

1169
00:45:52,240 --> 00:45:58,629
this is looks like a piece of malware

1170
00:45:56,099 --> 00:46:00,910
malware and I talked about this

1171
00:45:58,630 --> 00:46:04,210
yesterday when I talked about synthetic

1172
00:46:00,910 --> 00:46:06,279
clicks often has the ability to generate

1173
00:46:04,210 --> 00:46:08,910
programmatic mouse clicks to interact

1174
00:46:06,280 --> 00:46:10,720
with the UI of an infected system

1175
00:46:08,910 --> 00:46:12,730
luckily and we kind of covered this

1176
00:46:10,720 --> 00:46:15,399
briefly yesterday as well we can

1177
00:46:12,730 --> 00:46:18,310
generically detect synthetic events as

1178
00:46:15,400 --> 00:46:20,260
well what we can do on the system for

1179
00:46:18,310 --> 00:46:23,710
example in a security tool we can

1180
00:46:20,260 --> 00:46:26,080
register for our own event tap then any

1181
00:46:23,710 --> 00:46:27,490
time a mouse click is generated we can

1182
00:46:26,080 --> 00:46:30,520
check to see if it's synthetically

1183
00:46:27,490 --> 00:46:32,439
generated so now this means if fruit fly

1184
00:46:30,520 --> 00:46:35,349
has somehow gotten onto a system that's

1185
00:46:32,440 --> 00:46:37,210
running our tool and is generating these

1186
00:46:35,349 --> 00:46:39,580
synthetic clicks for example to click on

1187
00:46:37,210 --> 00:46:41,349
access and security prompts our tool

1188
00:46:39,580 --> 00:46:42,759
will now detect that and we don't care

1189
00:46:41,349 --> 00:46:43,930
if it's the original sample or the

1190
00:46:42,760 --> 00:46:45,970
repurpose sample

1191
00:46:43,930 --> 00:46:49,899
because we're focusing on behaviors we

1192
00:46:45,970 --> 00:46:51,279
will detect either so at the start of

1193
00:46:49,900 --> 00:46:53,920
the talk I mentioned I'm the creator of

1194
00:46:51,279 --> 00:46:56,289
Objective C Objective C has a wide range

1195
00:46:53,920 --> 00:46:58,960
of free open-source Mac security

1196
00:46:56,289 --> 00:47:00,849
products including ones that implement

1197
00:46:58,960 --> 00:47:02,980
these detection x' we talked about today

1198
00:47:00,849 --> 00:47:05,200
so if you're interested in kind of

1199
00:47:02,980 --> 00:47:06,069
security tools and detecting Mac OS

1200
00:47:05,200 --> 00:47:09,250
threats

1201
00:47:06,069 --> 00:47:11,980
check out Objective C comm now a

1202
00:47:09,250 --> 00:47:14,109
downside quote quote to these Objective

1203
00:47:11,980 --> 00:47:15,190
C tools is that they are all separate

1204
00:47:14,109 --> 00:47:16,598
they each do their own thing right

1205
00:47:15,190 --> 00:47:18,339
there's one four key logger detection

1206
00:47:16,599 --> 00:47:20,710
there's one that detects firewalls

1207
00:47:18,339 --> 00:47:23,078
there's one that does mic and webcam

1208
00:47:20,710 --> 00:47:25,210
modification so when I started working

1209
00:47:23,079 --> 00:47:27,039
at digit up said hey let's create an

1210
00:47:25,210 --> 00:47:29,380
all-in-one version of the tool that

1211
00:47:27,039 --> 00:47:31,299
implements these behavior detection so

1212
00:47:29,380 --> 00:47:34,119
that we can ideally generically detect

1213
00:47:31,299 --> 00:47:36,250
even repurposed Mac malware and the idea

1214
00:47:34,119 --> 00:47:37,900
was pretty simple we first monitored the

1215
00:47:36,250 --> 00:47:40,510
system for example watching for

1216
00:47:37,900 --> 00:47:43,329
persistence events keylogger events mic

1217
00:47:40,510 --> 00:47:46,450
webcam access and then what we do is we

1218
00:47:43,329 --> 00:47:48,760
create rules to detect unusual logic and

1219
00:47:46,450 --> 00:47:51,009
we feed both of those into Apple's

1220
00:47:48,760 --> 00:47:54,430
built-in game engine which very

1221
00:47:51,010 --> 00:47:57,339
efficiently and very quickly can

1222
00:47:54,430 --> 00:47:59,669
evaluate the rules on to our input and

1223
00:47:57,339 --> 00:48:02,170
monitor data and then output the result

1224
00:47:59,670 --> 00:48:04,569
so now I want to briefly talk about some

1225
00:48:02,170 --> 00:48:06,190
of these behavior based detection rules

1226
00:48:04,569 --> 00:48:08,140
and it's important to note it's not

1227
00:48:06,190 --> 00:48:12,549
specific to our tool you can utilize

1228
00:48:08,140 --> 00:48:14,379
these in other tools as well so using

1229
00:48:12,549 --> 00:48:16,690
the system for example we can

1230
00:48:14,380 --> 00:48:19,750
generically and rather trivially detect

1231
00:48:16,690 --> 00:48:21,640
even repurposed malware so for example

1232
00:48:19,750 --> 00:48:24,640
for wind tail we can now generically

1233
00:48:21,640 --> 00:48:27,129
detect its exploitation vector by simply

1234
00:48:24,640 --> 00:48:28,900
observing the fact that Safari has

1235
00:48:27,130 --> 00:48:31,359
downloaded and Auto extracted an

1236
00:48:28,900 --> 00:48:33,400
application this same application has

1237
00:48:31,359 --> 00:48:36,308
triggered the registration of a custom

1238
00:48:33,400 --> 00:48:38,470
URL and then finally the application is

1239
00:48:36,309 --> 00:48:41,049
then automatically started to handle

1240
00:48:38,470 --> 00:48:43,029
that custom URL so what we can do is we

1241
00:48:41,049 --> 00:48:45,130
can detect the combination of these

1242
00:48:43,029 --> 00:48:47,890
three events and this gives us a

1243
00:48:45,130 --> 00:48:49,869
powerful detection capability that again

1244
00:48:47,890 --> 00:48:52,598
allows us to detect either win tails

1245
00:48:49,869 --> 00:48:56,529
original exploit or even a repurpose

1246
00:48:52,599 --> 00:48:57,910
version similarly we can also now detect

1247
00:48:56,529 --> 00:49:00,280
fruit fly again the original

1248
00:48:57,910 --> 00:49:03,308
or the repurpose version or similar

1249
00:49:00,280 --> 00:49:06,849
malware by cummulative Lee observing the

1250
00:49:03,309 --> 00:49:09,730
fact that a hidden launch item was

1251
00:49:06,849 --> 00:49:11,619
created that generates a that executes a

1252
00:49:09,730 --> 00:49:13,960
non-apple binary right this is something

1253
00:49:11,619 --> 00:49:16,109
very unusual very anomalous that's

1254
00:49:13,960 --> 00:49:18,940
likely indicative of malware

1255
00:49:16,109 --> 00:49:21,549
now imagine fruit fry has already been

1256
00:49:18,940 --> 00:49:23,770
installed we can detect fruit fly either

1257
00:49:21,549 --> 00:49:26,410
the original sample or the repurposed

1258
00:49:23,770 --> 00:49:29,020
one by simply monitoring for and

1259
00:49:26,410 --> 00:49:32,230
detecting various runtime behaviors so

1260
00:49:29,020 --> 00:49:34,270
fruit fly does odd things like running a

1261
00:49:32,230 --> 00:49:36,670
hidden process that's not normal

1262
00:49:34,270 --> 00:49:38,859
dropping an unsigned binary and then

1263
00:49:36,670 --> 00:49:40,780
executing that at a temp again that's

1264
00:49:38,859 --> 00:49:42,700
rather unusual and then as we mentioned

1265
00:49:40,780 --> 00:49:43,960
also generate synthetic cliques which

1266
00:49:42,700 --> 00:49:45,578
again that's not something that's

1267
00:49:43,960 --> 00:49:48,490
normally gonna happen on an uninfected

1268
00:49:45,579 --> 00:49:50,530
system so we can either detect and

1269
00:49:48,490 --> 00:49:52,808
cumulatively trigger on all of these or

1270
00:49:50,530 --> 00:49:54,460
we can individually look for these we

1271
00:49:52,809 --> 00:49:56,500
can say okay perhaps I'm interested

1272
00:49:54,460 --> 00:49:58,440
anytime something is executed at a temp

1273
00:49:56,500 --> 00:50:00,880
that's fine

1274
00:49:58,440 --> 00:50:02,980
so that is kind of how we can

1275
00:50:00,880 --> 00:50:05,230
generically detect those repurposed

1276
00:50:02,980 --> 00:50:07,690
threats so this wraps up the talk

1277
00:50:05,230 --> 00:50:10,690
hopefully I've Illustrated why

1278
00:50:07,690 --> 00:50:11,109
repurposing Mack bower is an excellent

1279
00:50:10,690 --> 00:50:13,839
idea

1280
00:50:11,109 --> 00:50:16,270
if you are a black at hacker or work for

1281
00:50:13,839 --> 00:50:18,549
a group that's doing offensive cyber

1282
00:50:16,270 --> 00:50:21,099
operations in my opinion it's way better

1283
00:50:18,549 --> 00:50:23,049
to simply let someone do all the hard

1284
00:50:21,099 --> 00:50:25,180
work and then repurpose it for yourself

1285
00:50:23,049 --> 00:50:27,640
we mentioned the other benefit of this

1286
00:50:25,180 --> 00:50:29,890
it's going to kind of muddy attribution

1287
00:50:27,640 --> 00:50:31,839
if it does get caught you know it's

1288
00:50:29,890 --> 00:50:34,660
probably gonna be someone else that gets

1289
00:50:31,839 --> 00:50:36,849
the blame not you and then finally we

1290
00:50:34,660 --> 00:50:39,520
ended by showing that you know we really

1291
00:50:36,849 --> 00:50:41,289
need to focus instead of signature based

1292
00:50:39,520 --> 00:50:44,500
detection approaches using these

1293
00:50:41,289 --> 00:50:46,569
heuristic behavior base because this

1294
00:50:44,500 --> 00:50:49,119
will allow us to generically detect

1295
00:50:46,569 --> 00:50:52,000
either the original malware samples or

1296
00:50:49,119 --> 00:50:53,710
the repurpose ones so again thank you

1297
00:50:52,000 --> 00:50:56,319
for attending my talk and again I want

1298
00:50:53,710 --> 00:50:58,480
to extend a thank you to the echo party

1299
00:50:56,319 --> 00:51:00,308
crew for organizing this amazing

1300
00:50:58,480 --> 00:51:02,819
conference so let's give them again a

1301
00:51:00,309 --> 00:51:02,819
round of applause

1302
00:51:03,380 --> 00:51:06,590
yes yes

