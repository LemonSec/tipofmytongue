1
00:00:00,030 --> 00:00:06,150
Alex mattress over the advanced rust

2
00:00:02,909 --> 00:00:08,849
revolution research arm race this talk

3
00:00:06,150 --> 00:00:11,130
will cover the brains of the evolution

4
00:00:08,849 --> 00:00:13,980
of advanced trust to evolution of lack

5
00:00:11,130 --> 00:00:19,050
of evolution of the tools for forensics

6
00:00:13,980 --> 00:00:21,300
our reverse engineering okay

7
00:00:19,050 --> 00:00:24,210
now it's better good morning everyone

8
00:00:21,300 --> 00:00:27,210
I'm super - super happy to be here and

9
00:00:24,210 --> 00:00:29,880
present my research for the first

10
00:00:27,210 --> 00:00:31,710
presentation on eco 15 its anniversary

11
00:00:29,880 --> 00:00:33,989
of the conference and last time I've

12
00:00:31,710 --> 00:00:37,739
been on this stage and a curtain so

13
00:00:33,989 --> 00:00:39,930
super happy to be again on the stage

14
00:00:37,739 --> 00:00:42,419
with the Eco biter so good morning a

15
00:00:39,930 --> 00:00:44,309
capital and today we will be talking

16
00:00:42,420 --> 00:00:47,129
about it wants to try to volution

17
00:00:44,309 --> 00:00:49,110
specially on researchers on race housing

18
00:00:47,129 --> 00:00:51,239
basically companies develop the

19
00:00:49,110 --> 00:00:56,610
mitigations and how mitigation reflect

20
00:00:51,239 --> 00:00:58,530
on modern trends I'm Alex matrosov I'm

21
00:00:56,610 --> 00:01:01,010
chief offensive security researcher with

22
00:00:58,530 --> 00:01:04,920
Nvidia and I'm doing security research

23
00:01:01,010 --> 00:01:06,990
almost 20 years from 1997 on different

24
00:01:04,920 --> 00:01:08,340
things including mobile research then I

25
00:01:06,990 --> 00:01:13,649
switch to hardware and firmware

26
00:01:08,340 --> 00:01:16,770
researcher and let's focus more on what

27
00:01:13,650 --> 00:01:21,500
I prepare today so our goal idea about

28
00:01:16,770 --> 00:01:24,270
this research basically I was working on

29
00:01:21,500 --> 00:01:26,280
reverse engineering route kids and good

30
00:01:24,270 --> 00:01:30,060
kids in the past with my previous

31
00:01:26,280 --> 00:01:32,729
employee he said and I did a lot of

32
00:01:30,060 --> 00:01:35,520
research on the route kids and good kids

33
00:01:32,729 --> 00:01:37,860
and now I'm actually working mostly on

34
00:01:35,520 --> 00:01:39,929
the firmware side and I can see how the

35
00:01:37,860 --> 00:01:42,420
trends actually going deeper and deeper

36
00:01:39,930 --> 00:01:44,899
closer closer to the firmware and

37
00:01:42,420 --> 00:01:47,270
hardware stuff and it's not

38
00:01:44,899 --> 00:01:52,610
accidentially actually it's a reason

39
00:01:47,270 --> 00:01:56,640
because you can see this iceberg and

40
00:01:52,610 --> 00:01:58,590
actually if we look on the industry we

41
00:01:56,640 --> 00:02:02,060
can have kind of like the security

42
00:01:58,590 --> 00:02:04,530
industry visibility point but a lot of

43
00:02:02,060 --> 00:02:06,960
persistent technique based on the

44
00:02:04,530 --> 00:02:09,179
hardware and firmware it's out of scope

45
00:02:06,960 --> 00:02:12,870
of the modern security solutions and

46
00:02:09,179 --> 00:02:13,730
it's kind of like a point where the

47
00:02:12,870 --> 00:02:20,030
industry

48
00:02:13,730 --> 00:02:23,109
anything unfortunately and if we talk

49
00:02:20,030 --> 00:02:26,750
about evolution of persistent techniques

50
00:02:23,110 --> 00:02:30,019
we can always think about the

51
00:02:26,750 --> 00:02:34,700
mitigations mitigations which is vendors

52
00:02:30,019 --> 00:02:37,700
of the operating system develop and also

53
00:02:34,700 --> 00:02:41,420
what is actually modern endpoints

54
00:02:37,700 --> 00:02:44,659
prepare for detect the complex stress

55
00:02:41,420 --> 00:02:46,940
and mitigations against malware

56
00:02:44,659 --> 00:02:51,200
persistent techniques are raising the

57
00:02:46,940 --> 00:02:55,099
bar of complexity but this bar is always

58
00:02:51,200 --> 00:02:57,768
only for the most common threat it's not

59
00:02:55,099 --> 00:03:00,890
like they develop something to detect

60
00:02:57,769 --> 00:03:04,930
everything or solve the problem they

61
00:03:00,890 --> 00:03:09,649
usually find some example of the tread

62
00:03:04,930 --> 00:03:12,680
which is needed some development for the

63
00:03:09,650 --> 00:03:15,920
solution think about the rich kids root

64
00:03:12,680 --> 00:03:17,959
kids actually drive end point solution

65
00:03:15,920 --> 00:03:21,410
to develop cost intrusion prevention

66
00:03:17,959 --> 00:03:25,489
systems and the boot kids was totally

67
00:03:21,410 --> 00:03:27,709
bypass everything and then and point

68
00:03:25,489 --> 00:03:31,700
solution vendors developed something to

69
00:03:27,709 --> 00:03:35,269
detect them and you can see on this

70
00:03:31,700 --> 00:03:38,810
picture where we look on the mitigations

71
00:03:35,269 --> 00:03:42,069
and how the persistence complexity is

72
00:03:38,810 --> 00:03:46,430
shaved from the operating system

73
00:03:42,069 --> 00:03:49,790
downside the stack root kids actually

74
00:03:46,430 --> 00:03:53,329
been gone by code signing policies for

75
00:03:49,790 --> 00:03:57,370
the drivers in kernel Pudge guards and

76
00:03:53,329 --> 00:04:04,430
other things and then the boot kids

77
00:03:57,370 --> 00:04:07,790
mostly been gone from visibility because

78
00:04:04,430 --> 00:04:13,160
of secure boot right Microsoft start

79
00:04:07,790 --> 00:04:17,329
secure boot switch on by default from

80
00:04:13,160 --> 00:04:21,139
Windows 8 and it's changed a lot the

81
00:04:17,329 --> 00:04:25,070
attack surface and now we can see how

82
00:04:21,139 --> 00:04:25,760
the BIOS implants actually coming up on

83
00:04:25,070 --> 00:04:27,050
the radars

84
00:04:25,760 --> 00:04:29,479
but it's not new

85
00:04:27,050 --> 00:04:37,129
Fred's right because it was here for

86
00:04:29,479 --> 00:04:41,750
years but nobody see it if we think

87
00:04:37,129 --> 00:04:44,690
about stack of the solutions which we

88
00:04:41,750 --> 00:04:47,599
have and what is covered by antivirus

89
00:04:44,690 --> 00:04:50,120
and endpoint solutions we can say okay

90
00:04:47,599 --> 00:04:51,050
they pretty much controls operating

91
00:04:50,120 --> 00:04:53,090
system-level

92
00:04:51,050 --> 00:04:55,370
but what about the firmware and hardware

93
00:04:53,090 --> 00:04:58,219
because actually it's hard to develop

94
00:04:55,370 --> 00:05:01,069
something on that level firmware doesn't

95
00:04:58,220 --> 00:05:02,930
provide any interface to the vendors to

96
00:05:01,069 --> 00:05:05,530
basically develop any solutions and

97
00:05:02,930 --> 00:05:09,830
visibility's their hardware either

98
00:05:05,530 --> 00:05:11,690
because it's very hard to go and see

99
00:05:09,830 --> 00:05:17,719
what is going on on the hardware and

100
00:05:11,690 --> 00:05:20,750
silicon level I wrote this book but it's

101
00:05:17,719 --> 00:05:23,870
not about that so we actually specially

102
00:05:20,750 --> 00:05:28,610
have the art on the cover Kraken and

103
00:05:23,870 --> 00:05:32,389
some person try to actually escape from

104
00:05:28,610 --> 00:05:34,250
the Kraken and it was because of we was

105
00:05:32,389 --> 00:05:36,440
thinking okay so while we research her

106
00:05:34,250 --> 00:05:38,900
and it is some very complex thread and

107
00:05:36,440 --> 00:05:45,770
he's carried because he didn't know what

108
00:05:38,900 --> 00:05:50,960
to do and Golden Age of fruit kiss

109
00:05:45,770 --> 00:05:53,270
actually happens in 2016 to 2012 after

110
00:05:50,960 --> 00:05:58,489
that actually it's not a lot of treads

111
00:05:53,270 --> 00:06:02,180
being feasible based on the complexity

112
00:05:58,490 --> 00:06:05,840
of the route kids before and mostly it's

113
00:06:02,180 --> 00:06:08,659
been driven by cyber cyber crime actors

114
00:06:05,840 --> 00:06:11,900
which is was focusing on the persistence

115
00:06:08,659 --> 00:06:16,029
for the spam and DDoS boss because both

116
00:06:11,900 --> 00:06:19,520
of this malicious activities need to be

117
00:06:16,029 --> 00:06:26,029
persistent for a long time inside the

118
00:06:19,520 --> 00:06:29,750
machine and in 2011 to 2015 it was a

119
00:06:26,029 --> 00:06:32,779
golden age of the boot kids because the

120
00:06:29,750 --> 00:06:35,750
same things need cybercrime needed

121
00:06:32,779 --> 00:06:38,599
persistence for spam bots and DDoS and

122
00:06:35,750 --> 00:06:39,930
also we can see how the state-sponsored

123
00:06:38,599 --> 00:06:42,990
act

124
00:06:39,930 --> 00:06:45,870
actually start adopting this kind of

125
00:06:42,990 --> 00:06:48,800
techniques for long-term corporate

126
00:06:45,870 --> 00:06:53,730
operations or espionage gathering data

127
00:06:48,800 --> 00:07:00,300
attack specific targeted attacks on

128
00:06:53,730 --> 00:07:03,780
specific targets and cetera so but what

129
00:07:00,300 --> 00:07:06,600
about the golden age of the firmware and

130
00:07:03,780 --> 00:07:09,900
hardware plans yes it's happening right

131
00:07:06,600 --> 00:07:13,880
now because first of all we don't have a

132
00:07:09,900 --> 00:07:18,570
good solutions for the tags distress and

133
00:07:13,880 --> 00:07:23,430
also the vendors who develop as example

134
00:07:18,570 --> 00:07:27,570
u5 bias doesn't wide any interfaces to

135
00:07:23,430 --> 00:07:33,630
basically make a forensics or develop

136
00:07:27,570 --> 00:07:37,440
some detection techniques this timeline

137
00:07:33,630 --> 00:07:42,120
actually shows the evolution of route

138
00:07:37,440 --> 00:07:45,020
kids than boot kids and showing some

139
00:07:42,120 --> 00:07:51,570
activities especially on the space

140
00:07:45,020 --> 00:07:55,500
state-sponsored samples for BIOS

141
00:07:51,570 --> 00:07:58,250
implants and this figure actually cover

142
00:07:55,500 --> 00:08:03,030
two parts first part it's about

143
00:07:58,250 --> 00:08:06,000
researchers it show research which has

144
00:08:03,030 --> 00:08:08,909
been driven by many conferences and many

145
00:08:06,000 --> 00:08:11,610
researchers before and on the top is

146
00:08:08,910 --> 00:08:14,729
showing the samples based on these

147
00:08:11,610 --> 00:08:16,800
techniques show up after that and we

148
00:08:14,729 --> 00:08:20,490
really can see the trend when the

149
00:08:16,800 --> 00:08:22,800
researchers go more on the research on

150
00:08:20,490 --> 00:08:25,880
the firmware after that we can see if

151
00:08:22,800 --> 00:08:33,240
something happens on the real threat

152
00:08:25,880 --> 00:08:36,088
landscape and actually number of threads

153
00:08:33,240 --> 00:08:40,979
is just growing every year I just

154
00:08:36,089 --> 00:08:43,560
collect most of interesting media covers

155
00:08:40,979 --> 00:08:49,230
on this slide but it's actually much

156
00:08:43,559 --> 00:08:49,719
more interesting stuff going on if we

157
00:08:49,230 --> 00:08:52,269
talk

158
00:08:49,720 --> 00:08:54,730
about the mitigations and what we have

159
00:08:52,269 --> 00:08:57,699
of course we have like a patch guard

160
00:08:54,730 --> 00:08:59,949
code signing policies and some endpoint

161
00:08:57,699 --> 00:09:02,500
Prevention's operating system-level and

162
00:08:59,949 --> 00:09:04,628
even more we have mitigations for the

163
00:09:02,500 --> 00:09:09,939
boot code like a secure boot measureit

164
00:09:04,629 --> 00:09:13,660
boot and boot and bias guards but we

165
00:09:09,939 --> 00:09:16,839
don't have anything what is going on for

166
00:09:13,660 --> 00:09:23,160
prevention as I told on the firmware and

167
00:09:16,839 --> 00:09:26,529
BIOS level and hardware even worst but

168
00:09:23,160 --> 00:09:31,719
what what we can see actually apple

169
00:09:26,529 --> 00:09:36,040
recently in the last year released if I

170
00:09:31,720 --> 00:09:38,949
check with operating system their

171
00:09:36,040 --> 00:09:43,209
operating system because they want to

172
00:09:38,949 --> 00:09:47,339
collect not correct biases or damage it

173
00:09:43,209 --> 00:09:50,258
biases or malicious biases from the max

174
00:09:47,339 --> 00:09:53,170
it's very interesting because this

175
00:09:50,259 --> 00:09:55,389
specific tool actually exists on any

176
00:09:53,170 --> 00:10:00,750
operating system if you update for the

177
00:09:55,389 --> 00:10:03,959
recent version on a6 and they basically

178
00:10:00,750 --> 00:10:09,040
check the integrity in large scale and

179
00:10:03,959 --> 00:10:11,888
can see some supply chain problems but

180
00:10:09,040 --> 00:10:14,529
of course it's not the ideal solution

181
00:10:11,889 --> 00:10:16,600
but at least they try to do something

182
00:10:14,529 --> 00:10:18,699
and I'm very interested actually about

183
00:10:16,600 --> 00:10:25,319
their statistics result but it was never

184
00:10:18,699 --> 00:10:28,660
public rated another good example its

185
00:10:25,319 --> 00:10:32,439
insert antivirus which is actually start

186
00:10:28,660 --> 00:10:35,379
detecting some treads but also what they

187
00:10:32,439 --> 00:10:38,800
doing they mostly just dump the firmware

188
00:10:35,379 --> 00:10:41,170
images from OS but it's no guarantee the

189
00:10:38,800 --> 00:10:44,290
firmware image from OS will be correctly

190
00:10:41,170 --> 00:10:51,959
provided and not modified by the tread

191
00:10:44,290 --> 00:10:56,019
to trick the antivirus ocean so most of

192
00:10:51,959 --> 00:10:59,138
endpoints just detect known ufi threat

193
00:10:56,019 --> 00:11:02,880
and not developed for basically detect

194
00:10:59,139 --> 00:11:02,880
new tricks or new attacks

195
00:11:03,220 --> 00:11:08,019
it's a lot of limitations for them

196
00:11:04,959 --> 00:11:10,719
actually because the gathering

197
00:11:08,019 --> 00:11:14,560
information from the operating system

198
00:11:10,720 --> 00:11:17,550
level and everything can be fake think

199
00:11:14,560 --> 00:11:20,500
about if you have firmware implant an

200
00:11:17,550 --> 00:11:24,969
operating system requested to dump some

201
00:11:20,500 --> 00:11:27,399
memory region which is biased so you can

202
00:11:24,970 --> 00:11:32,829
basically modify anything on this

203
00:11:27,399 --> 00:11:36,189
request and then still persist on the

204
00:11:32,829 --> 00:11:38,949
firmer side right so everything can be

205
00:11:36,189 --> 00:11:42,399
fade BIOS updates can be blocked and

206
00:11:38,949 --> 00:11:46,769
even more it's consigue has been updated

207
00:11:42,399 --> 00:11:50,170
but it was not no trust path between

208
00:11:46,769 --> 00:11:52,689
endpoint solution and u5 firmware

209
00:11:50,170 --> 00:11:56,529
because on the operation between

210
00:11:52,689 --> 00:11:59,610
firmware and endpoint can help to detect

211
00:11:56,529 --> 00:12:03,670
something if it's totally disconnected

212
00:11:59,610 --> 00:12:07,060
how basically happens right now it's not

213
00:12:03,670 --> 00:12:08,740
very useful it is something it's of

214
00:12:07,060 --> 00:12:11,949
course accidentially can detect

215
00:12:08,740 --> 00:12:15,819
something but in the most cases it can

216
00:12:11,949 --> 00:12:18,339
be tricked and if we're talking about

217
00:12:15,819 --> 00:12:20,949
the firmware implants it's very complex

218
00:12:18,339 --> 00:12:24,129
piece of software and it's very hard to

219
00:12:20,949 --> 00:12:26,920
debug and I think people who have

220
00:12:24,129 --> 00:12:29,740
capabilities to develop it have also

221
00:12:26,920 --> 00:12:36,839
some opinion how they can trick endpoint

222
00:12:29,740 --> 00:12:39,699
solutions to another problem and

223
00:12:36,839 --> 00:12:42,550
actually big problem is blind spot and

224
00:12:39,699 --> 00:12:45,609
supply chain attacks supply chain it's

225
00:12:42,550 --> 00:12:50,680
actually about like you buy the server

226
00:12:45,610 --> 00:12:52,930
from some shop or market or like company

227
00:12:50,680 --> 00:12:55,719
who basically sells the shoulders but on

228
00:12:52,930 --> 00:12:57,638
the way to your data center you don't

229
00:12:55,720 --> 00:13:01,050
know what happens with your server and

230
00:12:57,639 --> 00:13:05,559
as example if you just get the server

231
00:13:01,050 --> 00:13:08,649
after you buy and immediately connect to

232
00:13:05,559 --> 00:13:12,370
your network infrastructure that will be

233
00:13:08,649 --> 00:13:14,319
not really a good path to deploy in your

234
00:13:12,370 --> 00:13:15,930
server because you don't know what kind

235
00:13:14,319 --> 00:13:19,199
of firmware runs there

236
00:13:15,930 --> 00:13:23,010
and what kind of firmware version is

237
00:13:19,200 --> 00:13:25,770
there and maybe somebody just physically

238
00:13:23,010 --> 00:13:30,930
modifies the firmware to bypass some of

239
00:13:25,770 --> 00:13:33,329
the security things and it's it's

240
00:13:30,930 --> 00:13:36,239
actually a huge problem also for end

241
00:13:33,330 --> 00:13:39,959
users because you buy your laptop from

242
00:13:36,240 --> 00:13:43,279
Amazon whatever service and then you

243
00:13:39,959 --> 00:13:47,729
also don't know what is coming there and

244
00:13:43,279 --> 00:13:50,490
if you doesn't check your bias is

245
00:13:47,730 --> 00:13:52,800
correct or physically modified to the

246
00:13:50,490 --> 00:13:56,640
recent version yourself you can never

247
00:13:52,800 --> 00:14:01,050
trust to your system to because who

248
00:13:56,640 --> 00:14:03,000
knows who deliver your system it's kind

249
00:14:01,050 --> 00:14:05,819
of problems which is bothering me for a

250
00:14:03,000 --> 00:14:18,470
year and I don't have a clear solution

251
00:14:05,820 --> 00:14:18,470
for that pink mice whites doesn't switch

252
00:14:21,860 --> 00:14:30,000
and who watch the Watchers it's actually

253
00:14:26,640 --> 00:14:33,240
okay we have endpoint solution but we

254
00:14:30,000 --> 00:14:36,180
know actually modern and point solutions

255
00:14:33,240 --> 00:14:38,250
it's too complex and in many cases it's

256
00:14:36,180 --> 00:14:41,370
actually extend attacks your face on

257
00:14:38,250 --> 00:14:43,709
your systems too because it's contain a

258
00:14:41,370 --> 00:14:47,610
lot of complex parsers it's contain a

259
00:14:43,709 --> 00:14:50,310
lot of detection algorithms which is

260
00:14:47,610 --> 00:14:53,330
sometimes even block security for

261
00:14:50,310 --> 00:14:55,790
detecting the dress we also have an

262
00:14:53,330 --> 00:15:00,529
microarchitecture of attacks which is

263
00:14:55,790 --> 00:15:03,300
hardware level attacks and silicon and

264
00:15:00,529 --> 00:15:06,810
harder is new software because we have a

265
00:15:03,300 --> 00:15:13,109
lot of layers of abstraction and for

266
00:15:06,810 --> 00:15:15,829
basically simplify development solution

267
00:15:13,110 --> 00:15:19,440
for the hardware in many cases they

268
00:15:15,829 --> 00:15:22,609
provide some high-level logic which is

269
00:15:19,440 --> 00:15:26,430
basically happens on software wealth

270
00:15:22,610 --> 00:15:28,709
think about micro code into micro card

271
00:15:26,430 --> 00:15:29,739
it's also piece of software it's not

272
00:15:28,709 --> 00:15:31,510
really cardboard

273
00:15:29,740 --> 00:15:36,280
it's very very tied to the house

274
00:15:31,510 --> 00:15:40,540
hardware thermal is everywhere even in

275
00:15:36,280 --> 00:15:44,920
my wash and who cares about security for

276
00:15:40,540 --> 00:15:49,420
the firmware actually many vendors who

277
00:15:44,920 --> 00:15:52,589
sell piece of hardware they even don't

278
00:15:49,420 --> 00:15:58,870
have security teams to provide you

279
00:15:52,590 --> 00:16:02,050
doesn't level of security and became

280
00:15:58,870 --> 00:16:07,540
bias became a kind of like foundation

281
00:16:02,050 --> 00:16:11,709
for the cloud security and because if

282
00:16:07,540 --> 00:16:13,750
you inside the firmware you can actually

283
00:16:11,710 --> 00:16:16,420
get access to the physical memory and

284
00:16:13,750 --> 00:16:21,520
you can discover all the virtual machine

285
00:16:16,420 --> 00:16:25,390
instances and basically invade in these

286
00:16:21,520 --> 00:16:30,270
memory regions and supply chain became a

287
00:16:25,390 --> 00:16:30,270
mainstream as we just discussed before

288
00:16:32,760 --> 00:16:39,910
actually it's a PCI screamer it's kind

289
00:16:37,840 --> 00:16:44,950
of like a prototype of a hardware

290
00:16:39,910 --> 00:16:50,199
implant you can buy it online this small

291
00:16:44,950 --> 00:16:53,500
stuff it's microcontroller inside USB

292
00:16:50,200 --> 00:16:55,390
which is very small went in and even you

293
00:16:53,500 --> 00:16:59,080
can not not notice when it will be

294
00:16:55,390 --> 00:17:01,540
connected on your laptop right one more

295
00:16:59,080 --> 00:17:03,510
thing and actually it's more about the

296
00:17:01,540 --> 00:17:08,109
supply chain

297
00:17:03,510 --> 00:17:12,490
demetria Aleksic find very cool the

298
00:17:08,109 --> 00:17:17,530
madhok years ago actually and it was a

299
00:17:12,490 --> 00:17:20,650
design issue where in GDK it was a

300
00:17:17,530 --> 00:17:23,349
problem which is allow him to have a

301
00:17:20,650 --> 00:17:26,380
small window when Vitti deeds doesn't

302
00:17:23,349 --> 00:17:30,250
configure yet it's vtd is a protection

303
00:17:26,380 --> 00:17:32,650
from DMA development by Intel and a way

304
00:17:30,250 --> 00:17:35,080
to system management mode but he need

305
00:17:32,650 --> 00:17:37,330
basically connected PCI device inside

306
00:17:35,080 --> 00:17:40,530
the machine and this issue actually

307
00:17:37,330 --> 00:17:40,530
doesn't fix and

308
00:17:40,740 --> 00:17:51,760
that's interesting and it still exists

309
00:17:45,310 --> 00:17:54,850
and but you need a physical access let's

310
00:17:51,760 --> 00:17:56,980
talk about Windows 10 changes windows

311
00:17:54,850 --> 00:18:00,429
change Windows 10 actually provide a lot

312
00:17:56,980 --> 00:18:04,450
of good things especially on armor in

313
00:18:00,430 --> 00:18:07,180
the secure boot with txt and also kind

314
00:18:04,450 --> 00:18:07,960
of device security stuff but what's

315
00:18:07,180 --> 00:18:13,660
changed

316
00:18:07,960 --> 00:18:16,180
they actually have even like some of HTI

317
00:18:13,660 --> 00:18:18,400
drivers which is developed by Microsoft

318
00:18:16,180 --> 00:18:21,790
to test on the firmware level secure

319
00:18:18,400 --> 00:18:24,930
boot is correctly configured Gmail is

320
00:18:21,790 --> 00:18:28,540
blocked robot protection and other stuff

321
00:18:24,930 --> 00:18:33,670
but problem are even if it will be

322
00:18:28,540 --> 00:18:37,720
everything work correctly is to have a

323
00:18:33,670 --> 00:18:40,150
in memory is mmm plans think about how

324
00:18:37,720 --> 00:18:42,360
frequently you reboot the servers how

325
00:18:40,150 --> 00:18:45,580
frequently you reboot your machine

326
00:18:42,360 --> 00:18:48,580
because maybe monthly when the updates

327
00:18:45,580 --> 00:18:52,540
coming right so if you just go to the

328
00:18:48,580 --> 00:18:55,780
hibernate that doesn't change the memory

329
00:18:52,540 --> 00:18:57,940
for your firmware so when you open its

330
00:18:55,780 --> 00:18:59,649
restores the state of the your firmware

331
00:18:57,940 --> 00:19:03,640
it's not really reboot the firmware

332
00:18:59,650 --> 00:19:10,420
that's mean in memory threads can live

333
00:19:03,640 --> 00:19:12,880
there for once sometimes what is

334
00:19:10,420 --> 00:19:16,540
interesting also maybe you not notice

335
00:19:12,880 --> 00:19:18,610
but your firmware if you buy laptop last

336
00:19:16,540 --> 00:19:22,330
three years you have a device guard

337
00:19:18,610 --> 00:19:24,550
Dixie it's a SMM driver which is have a

338
00:19:22,330 --> 00:19:27,780
runtime checks for security features and

339
00:19:24,550 --> 00:19:31,210
depend dependencies for the firmware and

340
00:19:27,780 --> 00:19:35,340
actually you can see it clearly it's for

341
00:19:31,210 --> 00:19:38,170
more drivers exist on your firmware and

342
00:19:35,340 --> 00:19:44,908
definitely it's somehow can be extend

343
00:19:38,170 --> 00:19:50,190
your attack surface the vendor

344
00:19:44,909 --> 00:19:52,229
like gigabyte msi ass rock and actually

345
00:19:50,190 --> 00:19:56,609
are some others they really don't care

346
00:19:52,229 --> 00:19:59,869
about the security it's a small check

347
00:19:56,609 --> 00:20:07,139
for the bios lock and you can see

348
00:19:59,869 --> 00:20:08,939
actually any blocks for the buyers to dr

349
00:20:07,139 --> 00:20:13,039
not to be written from the operating

350
00:20:08,940 --> 00:20:15,629
system level not configured and just to

351
00:20:13,039 --> 00:20:19,320
simplify understanding what is going on

352
00:20:15,629 --> 00:20:22,259
for configure this logs it just one

353
00:20:19,320 --> 00:20:30,418
defined one string in the code and they

354
00:20:22,259 --> 00:20:33,299
know they not doing it also for the

355
00:20:30,419 --> 00:20:35,279
forensics and analysis perspective we

356
00:20:33,299 --> 00:20:37,559
have a lot of limitation for basically

357
00:20:35,279 --> 00:20:43,139
mike reverse engineering on the firmer

358
00:20:37,559 --> 00:20:47,330
side first of all we don't have debugger

359
00:20:43,139 --> 00:20:50,699
or like any solution publicly available

360
00:20:47,330 --> 00:20:53,999
for debugging is ma'am of course some of

361
00:20:50,700 --> 00:20:57,960
the buggers can lick on the market when

362
00:20:53,999 --> 00:21:00,539
you can buy but intel or AMD it doesn't

363
00:20:57,960 --> 00:21:01,320
sell anything broadly you need to sign

364
00:21:00,539 --> 00:21:04,109
NDA

365
00:21:01,320 --> 00:21:06,689
you need to be a partner and then you

366
00:21:04,109 --> 00:21:10,759
can get some solutions and this create a

367
00:21:06,690 --> 00:21:14,879
lot of barriers to basically start some

368
00:21:10,759 --> 00:21:18,059
reverse engineering on forensics on your

369
00:21:14,879 --> 00:21:22,619
system or on the system usually think

370
00:21:18,059 --> 00:21:25,678
can be infected on other side even if

371
00:21:22,619 --> 00:21:27,840
you extract the firmware it's not a lot

372
00:21:25,679 --> 00:21:30,479
of tools available to basically reverse

373
00:21:27,840 --> 00:21:33,418
engineer this firmware you have some

374
00:21:30,479 --> 00:21:35,999
capabilities on qmo but qmo doesn't

375
00:21:33,419 --> 00:21:38,129
provide you all the interfaces which is

376
00:21:35,999 --> 00:21:41,039
exist on your firmware so you need to

377
00:21:38,129 --> 00:21:45,719
develop a lot of stuff to basically run

378
00:21:41,039 --> 00:21:48,658
your firmware on qmo hardware level

379
00:21:45,720 --> 00:21:51,269
debugging it's usually locked on the

380
00:21:48,659 --> 00:21:55,589
system and some system it's easy to a

381
00:21:51,269 --> 00:21:58,049
sycamore DCI it's kind of huge b3

382
00:21:55,589 --> 00:21:58,740
debugging technology which is intel

383
00:21:58,049 --> 00:22:04,139
created

384
00:21:58,740 --> 00:22:09,409
recent years but it's also basically not

385
00:22:04,140 --> 00:22:09,409
available on the most enterprises system

386
00:22:11,450 --> 00:22:20,039
- it's another example of the tool its

387
00:22:17,010 --> 00:22:25,740
commercial tool to train so with cost

388
00:22:20,039 --> 00:22:31,049
sheet tons of money and Hector is also

389
00:22:25,740 --> 00:22:33,090
not cheap it's provide some some good

390
00:22:31,049 --> 00:22:36,899
static analysis for you fight drivers

391
00:22:33,090 --> 00:22:40,350
they developed so in welcome to brave

392
00:22:36,899 --> 00:22:42,629
new world so we don't have reverse

393
00:22:40,350 --> 00:22:45,209
engineering solutions we don't have

394
00:22:42,630 --> 00:22:47,580
opportunity to do runtime checks on the

395
00:22:45,210 --> 00:22:50,370
firmware we don't trust the hardware

396
00:22:47,580 --> 00:22:53,340
which is coming to us it's kind of

397
00:22:50,370 --> 00:22:57,029
interesting time but let's talk more

398
00:22:53,340 --> 00:23:00,360
about how basically you fire update

399
00:22:57,029 --> 00:23:06,029
process can be screwed up for installs

400
00:23:00,360 --> 00:23:09,270
implant so we usually when updates for

401
00:23:06,029 --> 00:23:11,880
your firmware come you have some app

402
00:23:09,270 --> 00:23:13,980
running the operating system level this

403
00:23:11,880 --> 00:23:18,419
app communicate with the driver and

404
00:23:13,980 --> 00:23:20,940
driver basically map new bias image to

405
00:23:18,419 --> 00:23:26,159
specific memory region which is triggers

406
00:23:20,940 --> 00:23:30,510
a event for ISA mam to write something

407
00:23:26,159 --> 00:23:35,899
and intellectually develops a boot guard

408
00:23:30,510 --> 00:23:39,000
for armor integrity of boot process and

409
00:23:35,899 --> 00:23:42,270
develop the BIOS guard to armor the spy

410
00:23:39,000 --> 00:23:45,779
flash integrity but you can see on this

411
00:23:42,270 --> 00:23:48,059
links and actually in this year with

412
00:23:45,779 --> 00:23:52,110
Alex Gazette we presented on blackhat

413
00:23:48,059 --> 00:23:54,720
about how we can bypass Vice guard and

414
00:23:52,110 --> 00:23:56,459
many years I'm already talking about the

415
00:23:54,720 --> 00:24:00,990
different vulnerabilities and the boot

416
00:23:56,460 --> 00:24:04,289
guard implementations so even if we have

417
00:24:00,990 --> 00:24:06,630
some solutions it's not ideal and it's

418
00:24:04,289 --> 00:24:10,980
by possible and nobody developed or

419
00:24:06,630 --> 00:24:12,950
tested properly or it's just so actually

420
00:24:10,980 --> 00:24:15,540
it's more interesting because

421
00:24:12,950 --> 00:24:17,340
hardware companies like Quinto indeed

422
00:24:15,540 --> 00:24:19,620
they usually develop some reference

423
00:24:17,340 --> 00:24:23,639
technology and this reference technology

424
00:24:19,620 --> 00:24:26,760
comes to om om like Asustek gigabyte and

425
00:24:23,640 --> 00:24:30,870
others and they decide how they

426
00:24:26,760 --> 00:24:33,030
basically implemented and in many cases

427
00:24:30,870 --> 00:24:35,100
this company's not really focusing on

428
00:24:33,030 --> 00:24:37,139
security and of course they basically

429
00:24:35,100 --> 00:24:39,149
have a lot of mistakes on configurations

430
00:24:37,140 --> 00:24:44,040
is technology and when it's easy to

431
00:24:39,150 --> 00:24:46,200
bypass and for enterprise security when

432
00:24:44,040 --> 00:24:50,520
you basically need to update the

433
00:24:46,200 --> 00:24:53,490
firmware on 5000 machines in your

434
00:24:50,520 --> 00:24:56,370
company you have interesting situation

435
00:24:53,490 --> 00:25:00,720
you can't go and disable boot guard

436
00:24:56,370 --> 00:25:02,580
manually right so it's some backdoors

437
00:25:00,720 --> 00:25:05,670
sometimes exist on the enterprise

438
00:25:02,580 --> 00:25:07,710
laptops and I will not tell the vendors

439
00:25:05,670 --> 00:25:10,370
this vulnerability not fixed yet but

440
00:25:07,710 --> 00:25:10,370
that's funny

441
00:25:13,070 --> 00:25:20,909
other problem actually we don't have the

442
00:25:16,170 --> 00:25:24,830
technology for deliver firmware to your

443
00:25:20,910 --> 00:25:29,760
machine hope date firmware frequently

444
00:25:24,830 --> 00:25:33,360
whoever update your firmware from after

445
00:25:29,760 --> 00:25:35,400
it came from the market so you need to

446
00:25:33,360 --> 00:25:38,510
manually go to the website of the vendor

447
00:25:35,400 --> 00:25:42,110
you need to check if update was released

448
00:25:38,510 --> 00:25:44,190
then install update on your system right

449
00:25:42,110 --> 00:25:47,219
Microsoft develop actually some

450
00:25:44,190 --> 00:25:53,460
Microsoft component firmware update but

451
00:25:47,220 --> 00:25:58,830
also you can see it dynein check rely on

452
00:25:53,460 --> 00:26:01,170
the vendor so that's mean the firmware

453
00:25:58,830 --> 00:26:04,169
can be unsigned and came under your

454
00:26:01,170 --> 00:26:06,750
computer this minutes can do we define

455
00:26:04,170 --> 00:26:12,330
even like when it's just stored on your

456
00:26:06,750 --> 00:26:15,690
file system poorly no

457
00:26:12,330 --> 00:26:19,320
actually I really like initiative from

458
00:26:15,690 --> 00:26:25,920
Google and Nam where Linux vendor

459
00:26:19,320 --> 00:26:28,500
firmware update l VFS project started so

460
00:26:25,920 --> 00:26:32,309
it's actually try to develop the same

461
00:26:28,500 --> 00:26:36,330
thing and just delivers the updates in

462
00:26:32,309 --> 00:26:38,610
the generic way but problem is these

463
00:26:36,330 --> 00:26:40,800
guys need to basically contact to the

464
00:26:38,610 --> 00:26:44,669
vendors and vendors should basically

465
00:26:40,800 --> 00:26:47,850
configure and provide them use images

466
00:26:44,670 --> 00:26:51,540
for the buyers and then they can deploy

467
00:26:47,850 --> 00:26:57,149
and not all the vendors help them to

468
00:26:51,540 --> 00:27:01,200
deliver updates based on lvf s so it's

469
00:26:57,150 --> 00:27:05,010
so same problem but let's think about

470
00:27:01,200 --> 00:27:06,030
how many steps you need to persist on

471
00:27:05,010 --> 00:27:09,300
your bias

472
00:27:06,030 --> 00:27:12,540
how many vulnerabilities in the chain

473
00:27:09,300 --> 00:27:15,960
you need to get the persistence inside

474
00:27:12,540 --> 00:27:18,090
the firmware first of all of course you

475
00:27:15,960 --> 00:27:22,400
need to get to operating system level

476
00:27:18,090 --> 00:27:25,889
and this part I will not cover because

477
00:27:22,400 --> 00:27:28,710
it's out of scope for this picture but

478
00:27:25,890 --> 00:27:31,080
after that actually you need elevate the

479
00:27:28,710 --> 00:27:33,000
privileges for the kernel mode from the

480
00:27:31,080 --> 00:27:38,909
kernel mode you need basically to

481
00:27:33,000 --> 00:27:43,679
exploit you Phi services to attack

482
00:27:38,910 --> 00:27:46,470
system management mode and if you have

483
00:27:43,679 --> 00:27:49,110
actually system management mode problem

484
00:27:46,470 --> 00:27:51,890
and just to clarify system management

485
00:27:49,110 --> 00:27:55,459
mode it's one of the most privileges

486
00:27:51,890 --> 00:28:01,440
privileged mode on your system based on

487
00:27:55,460 --> 00:28:04,370
excessive architectures so basically if

488
00:28:01,440 --> 00:28:10,760
you have remote remote code execution

489
00:28:04,370 --> 00:28:13,949
inside the SMM in many cases you can get

490
00:28:10,760 --> 00:28:16,140
readwrite to spy flash spy flash it's a

491
00:28:13,950 --> 00:28:21,059
chip which is store your firmware on

492
00:28:16,140 --> 00:28:24,900
your motherboard so basically it's about

493
00:28:21,059 --> 00:28:26,190
five six steps to get a persistence on

494
00:28:24,900 --> 00:28:28,679
your machine

495
00:28:26,190 --> 00:28:35,370
and we're talking about the remote

496
00:28:28,679 --> 00:28:38,039
vectors in 2017 I presented that way how

497
00:28:35,370 --> 00:28:40,830
we can get persistent for kind of like a

498
00:28:38,039 --> 00:28:43,769
proof-of-concept of ransomware for UEFI

499
00:28:40,830 --> 00:28:55,590
on blackhat Asia and you can find this

500
00:28:43,769 --> 00:28:57,929
video on YouTube why the golden age of

501
00:28:55,590 --> 00:28:59,309
firmware and hardware implants it's

502
00:28:57,929 --> 00:29:02,700
happening right now

503
00:28:59,309 --> 00:29:05,580
now you actually can see it after all

504
00:29:02,700 --> 00:29:11,029
the previous slides we describe the

505
00:29:05,580 --> 00:29:14,908
problems right and this problems

506
00:29:11,029 --> 00:29:21,149
actually became even even worse just

507
00:29:14,909 --> 00:29:24,960
because we have clouds extending and in

508
00:29:21,149 --> 00:29:28,500
other days everything goes to the cloud

509
00:29:24,960 --> 00:29:31,529
and think about Viertel instance of

510
00:29:28,500 --> 00:29:37,169
vertol machine have their oven Viertel

511
00:29:31,529 --> 00:29:40,500
bias this mean mostly vertol server it's

512
00:29:37,169 --> 00:29:46,940
equal to real server in kind of a

513
00:29:40,500 --> 00:29:51,570
logical way right also in many cases

514
00:29:46,940 --> 00:29:56,240
firmware was not considered of critical

515
00:29:51,570 --> 00:29:59,070
security asset for a long time and now

516
00:29:56,240 --> 00:30:02,039
because actually when vendors think

517
00:29:59,070 --> 00:30:04,980
firmware is possible we don't need to

518
00:30:02,039 --> 00:30:07,620
care about because hardware is hard to

519
00:30:04,980 --> 00:30:12,269
fix in the field after release but

520
00:30:07,620 --> 00:30:15,178
firmly we can fix it and because we have

521
00:30:12,269 --> 00:30:16,440
a really low visibility on the firmware

522
00:30:15,179 --> 00:30:19,500
and hardware threads

523
00:30:16,440 --> 00:30:23,340
it's not became a real problem for the

524
00:30:19,500 --> 00:30:25,500
vendors nowadays researchers discover a

525
00:30:23,340 --> 00:30:28,678
lot of things and nowadays they care

526
00:30:25,500 --> 00:30:32,100
more but because they curly as previous

527
00:30:28,679 --> 00:30:34,789
years it still has a lot of legacy stuff

528
00:30:32,100 --> 00:30:38,178
which is actually affects the security

529
00:30:34,789 --> 00:30:44,330
really seriously

530
00:30:38,179 --> 00:30:47,509
and bring up its when before production

531
00:30:44,330 --> 00:30:50,629
before system goes to the market vendor

532
00:30:47,509 --> 00:30:56,809
need to configure the system and in many

533
00:30:50,629 --> 00:31:00,350
cases people and companies who configure

534
00:30:56,809 --> 00:31:02,240
the systems they not about security they

535
00:31:00,350 --> 00:31:04,998
about like the functional thing the

536
00:31:02,240 --> 00:31:08,179
hardware should run after you push the

537
00:31:04,999 --> 00:31:10,730
power button how long it will be take to

538
00:31:08,179 --> 00:31:14,059
the Bootsie system and they not focus on

539
00:31:10,730 --> 00:31:17,330
security because of that in many cases

540
00:31:14,059 --> 00:31:20,360
if they not check security beats but

541
00:31:17,330 --> 00:31:27,080
what we discussed before it can became a

542
00:31:20,360 --> 00:31:30,019
problem I was trying to develop kind of

543
00:31:27,080 --> 00:31:34,309
classification for different trades

544
00:31:30,019 --> 00:31:37,700
which can lead some rootkit installation

545
00:31:34,309 --> 00:31:40,759
on your system and I group on the to

546
00:31:37,700 --> 00:31:43,340
split on the two groups result of

547
00:31:40,759 --> 00:31:49,809
exploitation and compromised supply

548
00:31:43,340 --> 00:31:54,980
chain and they can see a lot of

549
00:31:49,809 --> 00:31:56,869
different problems and all these problem

550
00:31:54,980 --> 00:32:01,149
sets actual vulnerabilities classes

551
00:31:56,869 --> 00:32:03,740
which is can lead rootkit installation

552
00:32:01,149 --> 00:32:07,820
most interesting of course its result of

553
00:32:03,740 --> 00:32:12,190
exploitation and I think very

554
00:32:07,820 --> 00:32:17,360
interesting class which is I clarify

555
00:32:12,190 --> 00:32:19,820
year ago its persistent in memory to use

556
00:32:17,360 --> 00:32:24,490
acute just a shell code inside system

557
00:32:19,820 --> 00:32:28,820
management mode without any malicious

558
00:32:24,490 --> 00:32:31,119
file stored on the file system like spy

559
00:32:28,820 --> 00:32:31,119
flash

560
00:32:35,080 --> 00:32:41,449
it's create actually interesting

561
00:32:37,700 --> 00:32:45,110
question how fast the vendors purge

562
00:32:41,450 --> 00:32:49,159
their vulnerabilities average time it's

563
00:32:45,110 --> 00:32:53,059
six nine months so basically if you have

564
00:32:49,159 --> 00:32:59,740
one day vulnerability it will be a month

565
00:32:53,059 --> 00:33:07,399
to exploit that and some of the vendors

566
00:32:59,740 --> 00:33:10,570
take even longer to purge this also it

567
00:33:07,400 --> 00:33:12,950
is a challenge of understanding attacker

568
00:33:10,570 --> 00:33:15,559
tactics or creating the right

569
00:33:12,950 --> 00:33:19,450
mitigations because I really believe

570
00:33:15,559 --> 00:33:22,428
people who don't actually understand

571
00:33:19,450 --> 00:33:25,610
vulnerability research and did some

572
00:33:22,429 --> 00:33:32,600
proof of concepts their self they can't

573
00:33:25,610 --> 00:33:35,000
propose meaningful mitigations but it's

574
00:33:32,600 --> 00:33:37,370
really rare type of people and not all

575
00:33:35,000 --> 00:33:42,830
the companies can hire them and it's

576
00:33:37,370 --> 00:33:45,949
create some not meaningful mitigations

577
00:33:42,830 --> 00:33:48,889
let's say this way an offensive research

578
00:33:45,950 --> 00:33:55,100
actually it's not equal to security

579
00:33:48,890 --> 00:33:59,179
research mitigations designs it's not

580
00:33:55,100 --> 00:34:01,610
equal to security architecture what

581
00:33:59,179 --> 00:34:04,820
that's mean when we're doing the

582
00:34:01,610 --> 00:34:08,839
offensive research we not only finding

583
00:34:04,820 --> 00:34:12,369
the problem most cases we show how this

584
00:34:08,839 --> 00:34:15,949
problem can be triggered and executed

585
00:34:12,369 --> 00:34:19,280
when we doom the mitigations it's not we

586
00:34:15,949 --> 00:34:22,129
just say oh we will be put this logical

587
00:34:19,280 --> 00:34:24,349
component here or create this barrier

588
00:34:22,129 --> 00:34:27,199
and it will be block all exploits right

589
00:34:24,349 --> 00:34:31,220
and it's really a way how security

590
00:34:27,199 --> 00:34:35,689
architect things and it's why in many

591
00:34:31,219 --> 00:34:38,509
cases after mitigations implemented

592
00:34:35,690 --> 00:34:42,830
implemented in bypassed really

593
00:34:38,510 --> 00:34:46,760
frequently like usually not take a lot

594
00:34:42,830 --> 00:34:48,049
of time to bypass any it's why it's

595
00:34:46,760 --> 00:34:50,390
important to happen

596
00:34:48,050 --> 00:34:55,040
offensive research team and uncovers the

597
00:34:50,389 --> 00:34:58,310
reality also internal offensive research

598
00:34:55,040 --> 00:35:02,660
team can help you to develop the

599
00:34:58,310 --> 00:35:05,090
mitigations inside the company and also

600
00:35:02,660 --> 00:35:08,720
it can provide kind of like a feedback

601
00:35:05,090 --> 00:35:13,910
to architects for basically develop

602
00:35:08,720 --> 00:35:19,660
meaningful mitigations Rodrigo Branca

603
00:35:13,910 --> 00:35:22,700
actually create create a que not about

604
00:35:19,660 --> 00:35:25,339
offensive security on the of zone it's a

605
00:35:22,700 --> 00:35:29,899
conference in Moscow happens in this

606
00:35:25,340 --> 00:35:33,620
June and it was very interesting when he

607
00:35:29,900 --> 00:35:36,020
was basically discuss how the offensive

608
00:35:33,620 --> 00:35:39,100
research reflects on modern enterprises

609
00:35:36,020 --> 00:35:42,110
I really recommend to check the stock

610
00:35:39,100 --> 00:35:45,710
let's go back to the cloud actually and

611
00:35:42,110 --> 00:35:47,720
talk about the cloud problems what can

612
00:35:45,710 --> 00:35:50,000
be wrong with a cloud right so we have

613
00:35:47,720 --> 00:35:52,069
the firmware security we have hypervisor

614
00:35:50,000 --> 00:35:53,870
security we have operating system

615
00:35:52,070 --> 00:36:00,080
security we have built on machine

616
00:35:53,870 --> 00:36:02,540
security but if we only focus on

617
00:36:00,080 --> 00:36:05,660
attacking virtual machines and not go

618
00:36:02,540 --> 00:36:09,740
down to the stack or if we start from

619
00:36:05,660 --> 00:36:13,160
the hardware look on it if you have the

620
00:36:09,740 --> 00:36:17,410
problem inside the hardware we basically

621
00:36:13,160 --> 00:36:20,509
on the bottom level and we can get

622
00:36:17,410 --> 00:36:24,250
attacks on the firmware and any other

623
00:36:20,510 --> 00:36:27,760
components on top of the stack

624
00:36:24,250 --> 00:36:32,990
but even if we have this foundation

625
00:36:27,760 --> 00:36:36,920
secure we still have a guest bias and in

626
00:36:32,990 --> 00:36:39,350
many cases actually I notice companies

627
00:36:36,920 --> 00:36:42,740
doesn't configure guest biased properly

628
00:36:39,350 --> 00:36:47,750
if they use in the key VM beasts qmo

629
00:36:42,740 --> 00:36:50,720
instance qmo provide and configured for

630
00:36:47,750 --> 00:36:55,820
security logs bias by default and if the

631
00:36:50,720 --> 00:36:57,830
cloud provider doesn't have security

632
00:36:55,820 --> 00:36:59,140
team or not understand attic landscape

633
00:36:57,830 --> 00:37:02,470
there

634
00:36:59,140 --> 00:37:05,589
it can cause them your assistance in the

635
00:37:02,470 --> 00:37:07,598
bias on the viertel machine and nobody

636
00:37:05,589 --> 00:37:09,160
checks the virtual machine introspection

637
00:37:07,599 --> 00:37:11,190
Oh bias introspection

638
00:37:09,160 --> 00:37:14,319
everybody check virtual machine memory

639
00:37:11,190 --> 00:37:18,599
operating system applications but not by

640
00:37:14,319 --> 00:37:20,859
us but the buyers have actually the same

641
00:37:18,599 --> 00:37:24,029
privileges to attack the operating

642
00:37:20,859 --> 00:37:28,499
system level as in a real machine and

643
00:37:24,029 --> 00:37:32,200
actually this picture show unconfigured

644
00:37:28,499 --> 00:37:34,868
see bias flourish descriptor and see

645
00:37:32,200 --> 00:37:38,529
bias part of the coreboot came as a

646
00:37:34,869 --> 00:37:41,920
default bias on qmo and this issue

647
00:37:38,529 --> 00:37:45,400
actually by default there and i actually

648
00:37:41,920 --> 00:37:48,759
write email to the c bias coreboot team

649
00:37:45,400 --> 00:37:52,390
and they say oh we not configure this is

650
00:37:48,759 --> 00:37:55,299
just because we live on shoulders of the

651
00:37:52,390 --> 00:37:57,549
vendor to create it themselves and so

652
00:37:55,299 --> 00:38:01,390
kay but the vendors just don't do it

653
00:37:57,549 --> 00:38:03,940
many vendors not all of them it's

654
00:38:01,390 --> 00:38:05,558
another issue with just not configured

655
00:38:03,940 --> 00:38:08,650
correctly locks which we discussed

656
00:38:05,559 --> 00:38:14,920
before but it's also by default on the C

657
00:38:08,650 --> 00:38:20,829
bias coreboot bias it's five flesh

658
00:38:14,920 --> 00:38:29,999
region in more detailed so what can be

659
00:38:20,829 --> 00:38:32,739
wrong actually to be honest google have

660
00:38:29,999 --> 00:38:34,558
showed that video machines just because

661
00:38:32,739 --> 00:38:37,749
of that they recently developed

662
00:38:34,559 --> 00:38:40,539
technology for Google cloud for shooting

663
00:38:37,749 --> 00:38:43,779
VMs that means they care about integrity

664
00:38:40,539 --> 00:38:46,029
on virtual machines instances and also

665
00:38:43,779 --> 00:38:52,809
Amazon have another technology for that

666
00:38:46,029 --> 00:38:59,200
but Microsoft don't have that in agile

667
00:38:52,809 --> 00:39:01,839
yet the youngest bias persistence out of

668
00:38:59,200 --> 00:39:07,230
Oscorp of any existence security

669
00:39:01,839 --> 00:39:10,410
solutions another interesting case

670
00:39:07,230 --> 00:39:12,010
actually it's about BMC birth management

671
00:39:10,410 --> 00:39:15,580
system

672
00:39:12,010 --> 00:39:19,690
so it's about like data centers mostly

673
00:39:15,580 --> 00:39:23,410
but BMC have external interface which is

674
00:39:19,690 --> 00:39:26,619
usually can be misconfigured and look on

675
00:39:23,410 --> 00:39:29,109
internet directly and another site of

676
00:39:26,619 --> 00:39:33,040
being see looking in the internal

677
00:39:29,109 --> 00:39:36,160
network I would highlight a few research

678
00:39:33,040 --> 00:39:40,810
which has been presented last year

679
00:39:36,160 --> 00:39:43,509
especially on zero night about BMC inter

680
00:39:40,810 --> 00:39:46,840
revolving door so the guys from Airbus

681
00:39:43,510 --> 00:39:49,270
basically attacked BMC and from BMC

682
00:39:46,840 --> 00:39:56,109
attack the buyers because BMC is

683
00:39:49,270 --> 00:39:58,420
connected to the bias to updated let's

684
00:39:56,109 --> 00:40:01,690
talk a bit more about the supply chain

685
00:39:58,420 --> 00:40:04,740
problem and I really like this

686
00:40:01,690 --> 00:40:10,240
presentation from Bonnie

687
00:40:04,740 --> 00:40:13,390
James Huang which is basically present

688
00:40:10,240 --> 00:40:17,379
attacks your face in really meaningful

689
00:40:13,390 --> 00:40:20,410
way he discussed how many steps you need

690
00:40:17,380 --> 00:40:25,770
to get the machine in your hands and you

691
00:40:20,410 --> 00:40:28,540
can see it's multiple multiple steps and

692
00:40:25,770 --> 00:40:30,790
sometimes company who develop the

693
00:40:28,540 --> 00:40:33,130
hardware design they not really

694
00:40:30,790 --> 00:40:35,500
responsible for the hardware production

695
00:40:33,130 --> 00:40:38,320
what that's mean they develop some

696
00:40:35,500 --> 00:40:41,350
design of the hardware then contact with

697
00:40:38,320 --> 00:40:46,260
a partner who have manufacturing and

698
00:40:41,350 --> 00:40:49,450
manufacturing happens by external people

699
00:40:46,260 --> 00:40:52,330
that's mean it's not under control of

700
00:40:49,450 --> 00:40:56,279
the hardware vendor and it's create some

701
00:40:52,330 --> 00:40:59,590
interesting thoughts about how it can be

702
00:40:56,280 --> 00:41:03,790
misconfigured on the manufacturing level

703
00:40:59,590 --> 00:41:06,940
or nobody really know if the

704
00:41:03,790 --> 00:41:11,290
manufacturer had some component on your

705
00:41:06,940 --> 00:41:19,030
motherboard for the server and it was

706
00:41:11,290 --> 00:41:21,640
not a part of design I really like this

707
00:41:19,030 --> 00:41:25,660
phrase from Hal were flakes keynote

708
00:41:21,640 --> 00:41:28,328
about nobody has a good way to assure

709
00:41:25,660 --> 00:41:32,700
the given device is reset into known

710
00:41:28,329 --> 00:41:35,380
good state so you can't guarantee that

711
00:41:32,700 --> 00:41:40,839
especially a flick hardware was under

712
00:41:35,380 --> 00:41:42,940
the physical attacker control we can't

713
00:41:40,839 --> 00:41:45,849
check the original the firmware and

714
00:41:42,940 --> 00:41:48,519
that's true and as I mentioned

715
00:41:45,849 --> 00:41:51,759
researchers talking about that for years

716
00:41:48,519 --> 00:41:58,839
but not a lot of changes happens in

717
00:41:51,759 --> 00:42:00,700
reality why actually for hardware

718
00:41:58,839 --> 00:42:02,940
vendors security is not on the first

719
00:42:00,700 --> 00:42:02,939
place

720
00:42:03,390 --> 00:42:13,180
it is the many points because first of

721
00:42:07,480 --> 00:42:18,700
all security is the sale tool for the

722
00:42:13,180 --> 00:42:21,160
vendor because actually vendor don't

723
00:42:18,700 --> 00:42:26,799
really care about security they care

724
00:42:21,160 --> 00:42:29,859
about the sales process and if we go to

725
00:42:26,799 --> 00:42:33,900
the technical part of this question root

726
00:42:29,859 --> 00:42:38,170
of trust it's basically some piece of

727
00:42:33,900 --> 00:42:42,130
trust on your system which is as example

728
00:42:38,170 --> 00:42:45,430
for secure boot it's usually bias or

729
00:42:42,130 --> 00:42:48,970
some fuse inside your machine and it's

730
00:42:45,430 --> 00:42:54,399
have some key or hash which is verified

731
00:42:48,970 --> 00:42:57,009
first instance on the boot chain root of

732
00:42:54,400 --> 00:42:57,700
trust break it and pure hardware but not

733
00:42:57,009 --> 00:43:02,430
really

734
00:42:57,700 --> 00:43:06,339
usually it's complicated support and

735
00:43:02,430 --> 00:43:09,730
it's complicated sales process it's

736
00:43:06,339 --> 00:43:13,328
complicated what of others steps and

737
00:43:09,730 --> 00:43:16,029
it's basically vendors usually leave

738
00:43:13,329 --> 00:43:19,740
system infused before it comes as

739
00:43:16,029 --> 00:43:26,140
example to big partner or vendors leave

740
00:43:19,740 --> 00:43:29,109
some components open and can just

741
00:43:26,140 --> 00:43:31,900
misconfigured that it's a lot of open

742
00:43:29,109 --> 00:43:38,369
questions and support in the field it's

743
00:43:31,900 --> 00:43:42,849
very hard to as example in many cases if

744
00:43:38,369 --> 00:43:46,930
you break your machine not on by your

745
00:43:42,849 --> 00:43:49,119
fault as example it was delivered damage

746
00:43:46,930 --> 00:43:51,490
it bias update so you go to the

747
00:43:49,119 --> 00:43:53,619
technical support to the hardware vendor

748
00:43:51,490 --> 00:43:55,629
and say so my system doesn't boot after

749
00:43:53,619 --> 00:43:58,480
last update and of course they need a

750
00:43:55,630 --> 00:44:00,400
tool for fix your system because they

751
00:43:58,480 --> 00:44:06,579
don't want let you new system

752
00:44:00,400 --> 00:44:09,519
immediately right and also the big

753
00:44:06,579 --> 00:44:13,180
problem it's secure transition between

754
00:44:09,519 --> 00:44:16,240
hardware and firmware think about in

755
00:44:13,180 --> 00:44:19,808
many cases fervor developed by one

756
00:44:16,240 --> 00:44:24,008
company and hardware can be developed by

757
00:44:19,809 --> 00:44:27,490
another company or you have the firmware

758
00:44:24,009 --> 00:44:30,849
but you need a USBC you need the

759
00:44:27,490 --> 00:44:34,118
Thunderbolt you needed something else as

760
00:44:30,849 --> 00:44:36,569
an Ethernet controller or Wi-Fi all

761
00:44:34,119 --> 00:44:39,130
these components not developed by

762
00:44:36,569 --> 00:44:42,759
hardware vendor it's developed by third

763
00:44:39,130 --> 00:44:45,099
party hardware vendor and of course who

764
00:44:42,759 --> 00:44:47,349
basically designs the motherboard don't

765
00:44:45,099 --> 00:44:50,559
want pay extra to access to source code

766
00:44:47,349 --> 00:44:53,890
and in many cases this firm verse come

767
00:44:50,559 --> 00:44:55,900
as a binary blobs and it's sign that

768
00:44:53,890 --> 00:44:59,230
binary blobs but who really knows what

769
00:44:55,900 --> 00:45:03,000
the inside rate and it's create

770
00:44:59,230 --> 00:45:05,769
additional supply chain problems

771
00:45:03,000 --> 00:45:10,740
interesting research by trauma Hudson

772
00:45:05,769 --> 00:45:15,508
will was represented earlier this year

773
00:45:10,740 --> 00:45:19,779
where he basically physically analyzed

774
00:45:15,509 --> 00:45:29,190
spiteful written rights to bypass a boot

775
00:45:19,779 --> 00:45:33,009
guard interesting thoughts on that if we

776
00:45:29,190 --> 00:45:35,279
trust something on the beginning it

777
00:45:33,009 --> 00:45:40,359
doesn't mean it will be not changed

778
00:45:35,279 --> 00:45:42,519
because the vulnerability was and the

779
00:45:40,359 --> 00:45:44,410
link actually on the talk of trommel

780
00:45:42,519 --> 00:45:49,899
Hudson on Hawkins the box whereas more

781
00:45:44,410 --> 00:45:52,330
details boot guard check the spy flash

782
00:45:49,900 --> 00:45:55,810
ones and

783
00:45:52,330 --> 00:45:58,569
of a time which is doesn't check and

784
00:45:55,810 --> 00:46:02,080
then check again on the only on right

785
00:45:58,570 --> 00:46:04,390
boot boot state so it's a huge window

786
00:46:02,080 --> 00:46:06,520
for the physical attacker to modify it

787
00:46:04,390 --> 00:46:11,830
and trauma actually highlight this

788
00:46:06,520 --> 00:46:14,830
design issue on his dog in tow ACMs

789
00:46:11,830 --> 00:46:17,259
it's authenticated code models it is a

790
00:46:14,830 --> 00:46:20,980
binary blobs which is on your system -

791
00:46:17,260 --> 00:46:23,980
in any BIOS update so and it's signed by

792
00:46:20,980 --> 00:46:27,220
Intel but you can't basically modify it

793
00:46:23,980 --> 00:46:30,790
on your side also in other days we can

794
00:46:27,220 --> 00:46:33,310
notice a CMS from Microsoft oh and these

795
00:46:30,790 --> 00:46:35,890
binary blobs is of course out of scope

796
00:46:33,310 --> 00:46:38,350
for security solutions and we not

797
00:46:35,890 --> 00:46:43,690
understand what is inside some of them

798
00:46:38,350 --> 00:46:45,819
actually encrypted even worse rate we

799
00:46:43,690 --> 00:46:46,600
had this discussion with Alex yermolov

800
00:46:45,820 --> 00:46:49,930
on Twitter

801
00:46:46,600 --> 00:46:55,750
and about a cm Microsoft microcode

802
00:46:49,930 --> 00:46:59,740
downgrades and think about ACM verified

803
00:46:55,750 --> 00:47:02,710
by micro code and you can downgrade a cm

804
00:46:59,740 --> 00:47:07,779
if you update your micro code but what

805
00:47:02,710 --> 00:47:09,490
if you downgrade both in one time it's

806
00:47:07,780 --> 00:47:11,920
create actually interesting attack

807
00:47:09,490 --> 00:47:14,080
vector and it works Alex will be

808
00:47:11,920 --> 00:47:19,210
presented this research on the h2

809
00:47:14,080 --> 00:47:23,200
conference in the next month another

810
00:47:19,210 --> 00:47:26,770
interesting wisdom from the Hal were

811
00:47:23,200 --> 00:47:29,549
Flag K not its current a promise

812
00:47:26,770 --> 00:47:32,740
approach for the firmware based on

813
00:47:29,550 --> 00:47:36,040
basically ensuring nobody can get in

814
00:47:32,740 --> 00:47:37,990
your signing key but they not care about

815
00:47:36,040 --> 00:47:43,779
other stuff and it's create a huge

816
00:47:37,990 --> 00:47:47,069
problem third party components which we

817
00:47:43,780 --> 00:47:51,370
just discuss is supply chain hell and

818
00:47:47,070 --> 00:47:56,800
it's like nobody cares for that time but

819
00:47:51,370 --> 00:47:58,630
it will be bite us in the future and of

820
00:47:56,800 --> 00:48:01,330
course all this supply chain attack

821
00:47:58,630 --> 00:48:04,560
vectors it just extend attack surface

822
00:48:01,330 --> 00:48:04,560
for firmware and hardware

823
00:48:05,670 --> 00:48:12,640
so 2 p.m. root of trust problems we have

824
00:48:09,760 --> 00:48:14,800
a trusted platform model TPM on your

825
00:48:12,640 --> 00:48:17,440
machine right but nobody was thinking

826
00:48:14,800 --> 00:48:21,400
you can physically basically intercept

827
00:48:17,440 --> 00:48:26,170
requests from bias to TPM and fake it

828
00:48:21,400 --> 00:48:28,180
and both trommel and Jeremy Boone was

829
00:48:26,170 --> 00:48:32,440
showing this problem and actually it is

830
00:48:28,180 --> 00:48:36,730
POC TPM genic system on github as an

831
00:48:32,440 --> 00:48:39,220
interposer for tibia major vendors

832
00:48:36,730 --> 00:48:41,560
trying to fix the root of trust with

833
00:48:39,220 --> 00:48:45,339
additional chips like a google tighten

834
00:48:41,560 --> 00:48:51,040
or appetito we also have Microsoft

835
00:48:45,340 --> 00:48:54,970
Cerberus and Amazon green case but these

836
00:48:51,040 --> 00:48:57,970
chips actually also have a firmware

837
00:48:54,970 --> 00:49:04,060
inside and if you can attack this ship

838
00:48:57,970 --> 00:49:06,330
you can attack all other steps so it's

839
00:49:04,060 --> 00:49:10,120
make actually things much more difficult

840
00:49:06,330 --> 00:49:16,630
but that doesn't mean the system

841
00:49:10,120 --> 00:49:19,270
unhackable now and any hardware vendor

842
00:49:16,630 --> 00:49:22,540
actually doesn't have a full control on

843
00:49:19,270 --> 00:49:24,790
their supply chains as I mentioned

844
00:49:22,540 --> 00:49:27,759
before a lot of stuff come in as a

845
00:49:24,790 --> 00:49:32,680
binary blobs even authenticated code

846
00:49:27,760 --> 00:49:36,850
models and microcode earlier this year

847
00:49:32,680 --> 00:49:41,440
we also see in operation shadow hammer

848
00:49:36,850 --> 00:49:43,810
when it was attack on a so stack update

849
00:49:41,440 --> 00:49:47,860
process and of course this update

850
00:49:43,810 --> 00:49:50,170
process also include fervor so basically

851
00:49:47,860 --> 00:49:52,690
if you attack the vendor website and

852
00:49:50,170 --> 00:49:54,910
modify the firmware image it will be

853
00:49:52,690 --> 00:49:57,070
immediately reflect on all the users who

854
00:49:54,910 --> 00:49:59,470
download this image right or if you have

855
00:49:57,070 --> 00:50:01,780
tool automatically update the firmware

856
00:49:59,470 --> 00:50:04,750
if somebody attack your infrastructure

857
00:50:01,780 --> 00:50:07,300
and can deliver malicious firmware over

858
00:50:04,750 --> 00:50:11,640
the tool that's brilliant right way to

859
00:50:07,300 --> 00:50:11,640
develop deploy something malicious

860
00:50:12,210 --> 00:50:17,110
researchers arm race actually never

861
00:50:14,650 --> 00:50:20,950
stopped researchers discovered used

862
00:50:17,110 --> 00:50:25,900
and vendors fix it not immediately it's

863
00:50:20,950 --> 00:50:28,600
taken years sometimes to understand for

864
00:50:25,900 --> 00:50:31,480
the vendor the problem really exists and

865
00:50:28,600 --> 00:50:34,299
then basically developed the solution

866
00:50:31,480 --> 00:50:36,960
and also it's taking years to deploy on

867
00:50:34,300 --> 00:50:36,960
your machines

868
00:50:38,430 --> 00:50:46,578
thank you very much echo if you have

869
00:50:41,590 --> 00:50:46,579
[Applause]

870
00:50:50,240 --> 00:50:56,118
if you have any questions for the best

871
00:50:53,330 --> 00:50:59,480
question I will be signed this book it's

872
00:50:56,119 --> 00:51:03,940
my book so I will be happy to sign for

873
00:50:59,480 --> 00:51:03,940
the best question you will be asked now

874
00:51:06,070 --> 00:51:10,720
it's a good question but I don't like it

875
00:51:19,060 --> 00:51:25,310
build of materials is probably one of

876
00:51:21,950 --> 00:51:29,270
the hardest things to trace because even

877
00:51:25,310 --> 00:51:31,009
if you get a product in state that

878
00:51:29,270 --> 00:51:34,190
product can change over a lifetime

879
00:51:31,010 --> 00:51:37,490
vendors choo-choo us and differentiate

880
00:51:34,190 --> 00:51:39,320
hardware now in my job I tear apart

881
00:51:37,490 --> 00:51:43,910
these hardware and I look at firmwares

882
00:51:39,320 --> 00:51:45,619
but have you found a methodology like I

883
00:51:43,910 --> 00:51:48,859
love your framework by the way and I'd

884
00:51:45,619 --> 00:51:51,790
love I love that framework by the way

885
00:51:48,859 --> 00:51:57,049
I'm stumbles the drunk nicely yeah but

886
00:51:51,790 --> 00:52:00,529
have you found a way to make it more

887
00:51:57,050 --> 00:52:02,750
efficient to track changes in build of

888
00:52:00,530 --> 00:52:05,089
materials because that's the biggest

889
00:52:02,750 --> 00:52:07,880
problem is that I don't know materials

890
00:52:05,089 --> 00:52:10,640
just keeps changing and it's so hard to

891
00:52:07,880 --> 00:52:13,339
keep track of it you can you can pull

892
00:52:10,640 --> 00:52:16,670
firmwares off you can make sure they're

893
00:52:13,339 --> 00:52:20,089
signed you can try and do a base trend

894
00:52:16,670 --> 00:52:21,859
analysis and in systems but building

895
00:52:20,089 --> 00:52:24,470
materials is the things thank you it's

896
00:52:21,859 --> 00:52:26,839
very good question and actually in my in

897
00:52:24,470 --> 00:52:29,029
my research usually I try to track the

898
00:52:26,839 --> 00:52:31,460
previous research and make a references

899
00:52:29,030 --> 00:52:33,650
to basically keep people following the

900
00:52:31,460 --> 00:52:36,650
full path how I basically became on the

901
00:52:33,650 --> 00:52:44,210
new issues and I think knowledge base

902
00:52:36,650 --> 00:52:47,450
actually really suck yeah and I will try

903
00:52:44,210 --> 00:52:49,760
my best to build knowledge base but I

904
00:52:47,450 --> 00:52:55,210
think it should be collaborative like

905
00:52:49,760 --> 00:52:55,210
initiative for the researchers right I

906
00:52:56,290 --> 00:52:59,290
will

907
00:52:59,910 --> 00:53:03,328
Tigger's recuerde en el hijo de tienda

908
00:53:02,250 --> 00:53:07,039
en el coffee break

909
00:53:03,329 --> 00:53:07,039
hace que pasa

910
00:53:07,740 --> 00:53:10,830
[Applause]

