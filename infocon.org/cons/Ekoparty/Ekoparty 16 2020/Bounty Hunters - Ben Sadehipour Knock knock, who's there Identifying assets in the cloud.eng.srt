1
00:00:09,920 --> 00:00:15,200
welcome to knock knock who's there

2
00:00:11,920 --> 00:00:16,880
identifying assets in the cloud my name

3
00:00:15,200 --> 00:00:18,640
is ben sadigapoor but most people know

4
00:00:16,880 --> 00:00:20,400
me online as the hamsek

5
00:00:18,640 --> 00:00:22,400
i am currently the head of hacker

6
00:00:20,400 --> 00:00:24,880
education at hacker one

7
00:00:22,400 --> 00:00:27,519
i also on my free time create content

8
00:00:24,880 --> 00:00:29,198
and stream hacking on youtube and twitch

9
00:00:27,519 --> 00:00:31,919
you can follow me on all social media

10
00:00:29,199 --> 00:00:33,440
platforms under at nahamsik

11
00:00:31,920 --> 00:00:34,800
i also have tanner barnes here with me

12
00:00:33,440 --> 00:00:36,239
i'll let him introduce himself real

13
00:00:34,800 --> 00:00:38,239
quick

14
00:00:36,239 --> 00:00:40,879
hi thanks ben yes my name is tanner

15
00:00:38,239 --> 00:00:44,320
barnes i am a developer a pen tester

16
00:00:40,879 --> 00:00:46,640
and an occasional bug hunter my day job

17
00:00:44,320 --> 00:00:47,680
i'm a cyber consultant for aeon cyber

18
00:00:46,640 --> 00:00:50,800
solutions

19
00:00:47,680 --> 00:00:52,480
and the tools that i build for the cyber

20
00:00:50,800 --> 00:00:54,879
security community you can find at my

21
00:00:52,480 --> 00:00:59,599
github there and i do some occasional

22
00:00:54,879 --> 00:01:01,599
live development at that twitching

23
00:00:59,600 --> 00:01:03,520
so what's our agenda like today uh we're

24
00:01:01,600 --> 00:01:04,640
going to talk about why the cloud is so

25
00:01:03,520 --> 00:01:06,560
important

26
00:01:04,640 --> 00:01:08,320
we're going to show you all our solution

27
00:01:06,560 --> 00:01:10,159
and how we accomplish all of our scans

28
00:01:08,320 --> 00:01:11,279
and the things that we did with it

29
00:01:10,159 --> 00:01:12,640
then we're going to talk about mass

30
00:01:11,280 --> 00:01:14,080
exploitation and how we found

31
00:01:12,640 --> 00:01:15,840
vulnerabilities

32
00:01:14,080 --> 00:01:17,200
after scanning hundreds of millions of

33
00:01:15,840 --> 00:01:18,960
ip addresses

34
00:01:17,200 --> 00:01:20,640
and of course we're going to have some

35
00:01:18,960 --> 00:01:23,280
really really cool examples to share

36
00:01:20,640 --> 00:01:23,280
with everybody

37
00:01:24,320 --> 00:01:27,360
awesome right so the first question

38
00:01:26,240 --> 00:01:28,720
really

39
00:01:27,360 --> 00:01:30,479
when starting something like this is why

40
00:01:28,720 --> 00:01:33,280
scan the cloud well

41
00:01:30,479 --> 00:01:35,119
for one it was still cheaper for

42
00:01:33,280 --> 00:01:37,759
ourselves to do than buying something

43
00:01:35,119 --> 00:01:39,759
like a census or showdown license

44
00:01:37,759 --> 00:01:42,079
and then secondly it's a really target

45
00:01:39,759 --> 00:01:44,079
rich environment you know nowadays

46
00:01:42,079 --> 00:01:45,360
everyone's in the cloud any type of your

47
00:01:44,079 --> 00:01:47,919
large

48
00:01:45,360 --> 00:01:49,119
you know fortune 100 fortune 500

49
00:01:47,920 --> 00:01:51,520
companies are going to have

50
00:01:49,119 --> 00:01:52,240
assets out in the cloud if you're

51
00:01:51,520 --> 00:01:55,840
looking at

52
00:01:52,240 --> 00:01:56,719
just cloud specific compute ranges

53
00:01:55,840 --> 00:02:00,079
you're looking at

54
00:01:56,719 --> 00:02:00,559
88 million to 100 million ip addresses

55
00:02:00,079 --> 00:02:03,199
out there

56
00:02:00,560 --> 00:02:05,520
available for clients of theirs to spin

57
00:02:03,200 --> 00:02:07,119
up instances on

58
00:02:05,520 --> 00:02:08,799
and the nice thing is we found with

59
00:02:07,119 --> 00:02:11,200
looking at this data that

60
00:02:08,800 --> 00:02:13,040
a lot of the space is used for these

61
00:02:11,200 --> 00:02:14,799
companies to spin up development

62
00:02:13,040 --> 00:02:15,200
instances or things that they're working

63
00:02:14,800 --> 00:02:17,760
on

64
00:02:15,200 --> 00:02:18,958
live so if you're able to get really

65
00:02:17,760 --> 00:02:22,319
high fidelity

66
00:02:18,959 --> 00:02:24,560
and really constant data on what's

67
00:02:22,319 --> 00:02:26,319
out there on those ip ranges you can

68
00:02:24,560 --> 00:02:28,000
actually end up finding a lot of really

69
00:02:26,319 --> 00:02:29,760
exciting targets as they're being

70
00:02:28,000 --> 00:02:31,760
deployed

71
00:02:29,760 --> 00:02:34,079
so to give an example of that we took a

72
00:02:31,760 --> 00:02:35,599
look at some of the dns names we are

73
00:02:34,080 --> 00:02:36,879
finding in these certificates to get a

74
00:02:35,599 --> 00:02:39,040
sense of what is kind of

75
00:02:36,879 --> 00:02:41,280
out there so you're looking at some

76
00:02:39,040 --> 00:02:43,359
corpse some internal which we found

77
00:02:41,280 --> 00:02:45,680
fascinating a lot of

78
00:02:43,360 --> 00:02:46,800
dns names with the name internalism even

79
00:02:45,680 --> 00:02:48,160
though they're out there

80
00:02:46,800 --> 00:02:50,560
on the public internet was very

81
00:02:48,160 --> 00:02:52,079
fascinating dev like we were saying

82
00:02:50,560 --> 00:02:54,640
earlier a lot of companies like to put

83
00:02:52,080 --> 00:02:56,720
their development instances

84
00:02:54,640 --> 00:02:58,399
for new products they're building out

85
00:02:56,720 --> 00:03:00,720
there on the cloud

86
00:02:58,400 --> 00:03:03,280
lots and lots of apis especially as

87
00:03:00,720 --> 00:03:04,000
people look at scaling up their apis for

88
00:03:03,280 --> 00:03:06,000
access to

89
00:03:04,000 --> 00:03:07,920
worldwide audiences and there's an

90
00:03:06,000 --> 00:03:12,000
example of two different

91
00:03:07,920 --> 00:03:15,200
companies out there um oath

92
00:03:12,000 --> 00:03:18,080
for verizon with about five thousand

93
00:03:15,200 --> 00:03:21,200
and yahoo with quite a staggering amount

94
00:03:18,080 --> 00:03:21,200
of 108 000.

95
00:03:22,319 --> 00:03:25,518
so this is the fun part we we're going

96
00:03:24,000 --> 00:03:27,360
to talk a little bit about how we

97
00:03:25,519 --> 00:03:30,799
actually accomplished

98
00:03:27,360 --> 00:03:33,920
covering such a large space like that

99
00:03:30,799 --> 00:03:37,440
so quickly so

100
00:03:33,920 --> 00:03:39,119
as far as the code goes it's building go

101
00:03:37,440 --> 00:03:40,560
i'm a huge fan of that language i

102
00:03:39,120 --> 00:03:43,599
learned it last year

103
00:03:40,560 --> 00:03:45,680
and its go routines

104
00:03:43,599 --> 00:03:46,640
is really built for this type of

105
00:03:45,680 --> 00:03:49,599
distributed

106
00:03:46,640 --> 00:03:51,359
parallel work as far as how it works

107
00:03:49,599 --> 00:03:52,560
it's very simple we're looking at ip

108
00:03:51,360 --> 00:03:55,360
addresses

109
00:03:52,560 --> 00:03:58,480
and pulling out the cname and dns name

110
00:03:55,360 --> 00:04:00,319
records from those certificates

111
00:03:58,480 --> 00:04:01,840
there's not really a lot of magic in the

112
00:04:00,319 --> 00:04:04,640
code it's a very simple

113
00:04:01,840 --> 00:04:06,720
piece of software but the real magic

114
00:04:04,640 --> 00:04:09,760
comes in being able to scale it up

115
00:04:06,720 --> 00:04:11,439
to cover such a large space right so

116
00:04:09,760 --> 00:04:12,798
this is a really fun slide when i showed

117
00:04:11,439 --> 00:04:14,239
this to ben

118
00:04:12,799 --> 00:04:16,560
he was really excited as well as some

119
00:04:14,239 --> 00:04:20,160
other people we're looking at about

120
00:04:16,560 --> 00:04:22,240
1.4 billion unique targets in the space

121
00:04:20,160 --> 00:04:25,440
of about 15 minutes

122
00:04:22,240 --> 00:04:28,639
which comes out to a rate of 1.6 million

123
00:04:25,440 --> 00:04:29,919
a second ends up being about 28 million

124
00:04:28,639 --> 00:04:32,639
identified targets

125
00:04:29,919 --> 00:04:33,919
across 11 different ports that we

126
00:04:32,639 --> 00:04:37,280
identified as kind of

127
00:04:33,919 --> 00:04:39,280
high trafficked ports and the other

128
00:04:37,280 --> 00:04:40,719
magic part is that all this is done for

129
00:04:39,280 --> 00:04:44,479
about 25

130
00:04:40,720 --> 00:04:46,240
in aws charges so with every good side

131
00:04:44,479 --> 00:04:46,800
there's also a bad we learned a lot of

132
00:04:46,240 --> 00:04:48,880
lessons

133
00:04:46,800 --> 00:04:50,639
on our way to that kind of mythical 25

134
00:04:48,880 --> 00:04:52,880
dollars in aws charges

135
00:04:50,639 --> 00:04:55,199
one don't try this with lambda or an

136
00:04:52,880 --> 00:04:57,680
initial try with being able to

137
00:04:55,199 --> 00:04:59,680
spread it out over lambda workers is

138
00:04:57,680 --> 00:05:00,400
impossible they won't let you spin up

139
00:04:59,680 --> 00:05:02,320
that many

140
00:05:00,400 --> 00:05:03,520
and once you start them there is no

141
00:05:02,320 --> 00:05:06,240
stopping them

142
00:05:03,520 --> 00:05:06,799
so we had a handful of aws bills that

143
00:05:06,240 --> 00:05:10,800
were

144
00:05:06,800 --> 00:05:13,520
quite exciting to receive

145
00:05:10,800 --> 00:05:16,000
and on the code side every little bit of

146
00:05:13,520 --> 00:05:18,000
memory and cpu cycle matters especially

147
00:05:16,000 --> 00:05:19,600
when you're trying to cover this work as

148
00:05:18,000 --> 00:05:22,560
quickly as possible

149
00:05:19,600 --> 00:05:23,759
with aws billing you per second the

150
00:05:22,560 --> 00:05:26,240
quicker you can do it

151
00:05:23,759 --> 00:05:28,160
obviously the lower your bill becomes so

152
00:05:26,240 --> 00:05:29,120
once the code was written it was a lot

153
00:05:28,160 --> 00:05:32,240
of work

154
00:05:29,120 --> 00:05:33,759
to kind of profile it with memory and

155
00:05:32,240 --> 00:05:35,600
cpu profilers to get

156
00:05:33,759 --> 00:05:37,759
every little bit of performance out of

157
00:05:35,600 --> 00:05:38,560
it as kind of a final note it was

158
00:05:37,759 --> 00:05:41,759
important

159
00:05:38,560 --> 00:05:43,199
um after we had these resources that we

160
00:05:41,759 --> 00:05:45,759
found from the scanner to make sure

161
00:05:43,199 --> 00:05:46,320
before delving into any of them that

162
00:05:45,759 --> 00:05:48,240
they were

163
00:05:46,320 --> 00:05:50,320
specifically bounty targets we got some

164
00:05:48,240 --> 00:05:53,600
very exciting

165
00:05:50,320 --> 00:05:56,719
angry notes on linkedin and our

166
00:05:53,600 --> 00:05:58,319
email accounts from csos who were not at

167
00:05:56,720 --> 00:06:01,120
all pleased we were taking a look at

168
00:05:58,319 --> 00:06:01,120
their resources

169
00:06:01,680 --> 00:06:05,759
right so once you have the data that's

170
00:06:04,240 --> 00:06:09,199
all well and good but

171
00:06:05,759 --> 00:06:10,880
it's important to you know enrich it in

172
00:06:09,199 --> 00:06:14,080
ways that makes it easier to

173
00:06:10,880 --> 00:06:17,840
process so some of the ways

174
00:06:14,080 --> 00:06:19,359
we identified to enrich this data are

175
00:06:17,840 --> 00:06:22,560
here kind of below so

176
00:06:19,360 --> 00:06:24,880
one thing we did was initially was to

177
00:06:22,560 --> 00:06:26,560
take a list of curated bounty targets

178
00:06:24,880 --> 00:06:29,199
that we were familiar with and that were

179
00:06:26,560 --> 00:06:33,520
out there and known about

180
00:06:29,199 --> 00:06:35,520
and pulled out from our large list of

181
00:06:33,520 --> 00:06:37,120
mappings all those targets which were

182
00:06:35,520 --> 00:06:37,520
bounty targets so that will give you a

183
00:06:37,120 --> 00:06:40,880
quick

184
00:06:37,520 --> 00:06:42,799
one-off way at the start to really

185
00:06:40,880 --> 00:06:45,600
filter your list down to targets that

186
00:06:42,800 --> 00:06:47,199
are for sure in a bounty scope

187
00:06:45,600 --> 00:06:48,639
once we had that data as we started

188
00:06:47,199 --> 00:06:51,759
doing the scans more often

189
00:06:48,639 --> 00:06:52,960
we started doing a diffing of scan to

190
00:06:51,759 --> 00:06:54,880
previous scan

191
00:06:52,960 --> 00:06:56,080
this allowed us to really quickly from

192
00:06:54,880 --> 00:06:59,199
those bounty targets

193
00:06:56,080 --> 00:07:01,359
realize what was most recently

194
00:06:59,199 --> 00:07:02,240
spun up since our previous scan and that

195
00:07:01,360 --> 00:07:05,440
was really

196
00:07:02,240 --> 00:07:06,960
more fresher of the targets which is

197
00:07:05,440 --> 00:07:10,000
more of a ripe

198
00:07:06,960 --> 00:07:12,000
area for finding bounties

199
00:07:10,000 --> 00:07:14,400
another thing that had a lot of really

200
00:07:12,000 --> 00:07:17,599
great benefits for us was doing some v

201
00:07:14,400 --> 00:07:20,880
host discrepancies so taking a host and

202
00:07:17,599 --> 00:07:21,680
accessing it by its ip address accessing

203
00:07:20,880 --> 00:07:23,919
it by

204
00:07:21,680 --> 00:07:26,000
its dns name and then accessing with the

205
00:07:23,919 --> 00:07:29,039
host header of localhost

206
00:07:26,000 --> 00:07:30,000
and checking the response links and

207
00:07:29,039 --> 00:07:32,479
response codes to

208
00:07:30,000 --> 00:07:34,240
seeing hosts that maybe weren't

209
00:07:32,479 --> 00:07:37,360
answering on their dns name

210
00:07:34,240 --> 00:07:41,120
but were accessible with a ip address or

211
00:07:37,360 --> 00:07:42,960
a hostname of localhost

212
00:07:41,120 --> 00:07:44,400
kind of two final things we're pulling

213
00:07:42,960 --> 00:07:46,318
the just the raw

214
00:07:44,400 --> 00:07:48,318
titles of the pages that came back the

215
00:07:46,319 --> 00:07:49,120
response links and status codes to get a

216
00:07:48,319 --> 00:07:51,280
sense of

217
00:07:49,120 --> 00:07:53,039
you know which targets might be more

218
00:07:51,280 --> 00:07:56,080
interesting to go after

219
00:07:53,039 --> 00:07:58,400
and then some general fingerprinting of

220
00:07:56,080 --> 00:08:01,919
services that were live in products

221
00:07:58,400 --> 00:08:02,638
so if for some reason a cve was to

222
00:08:01,919 --> 00:08:04,799
appear

223
00:08:02,639 --> 00:08:06,479
in a product which we'll get to later

224
00:08:04,800 --> 00:08:09,599
something a specific example

225
00:08:06,479 --> 00:08:12,719
we were able to quickly zone in on

226
00:08:09,599 --> 00:08:13,039
or zoom in pardon me on those targets

227
00:08:12,720 --> 00:08:14,720
that

228
00:08:13,039 --> 00:08:17,599
match that service and start looking at

229
00:08:14,720 --> 00:08:17,599
those immediately

230
00:08:18,960 --> 00:08:21,758
right so

231
00:08:22,000 --> 00:08:25,120
1.4 billion targets creates a lot of

232
00:08:24,080 --> 00:08:28,318
noise

233
00:08:25,120 --> 00:08:30,160
uh we found this great

234
00:08:28,319 --> 00:08:31,440
list on github it's a little hard to

235
00:08:30,160 --> 00:08:32,959
pronounce that name so i'm not gonna

236
00:08:31,440 --> 00:08:33,279
butcher it for them i'd hate to say it

237
00:08:32,958 --> 00:08:35,679
wrong

238
00:08:33,279 --> 00:08:36,320
so that list was a great jumping off

239
00:08:35,679 --> 00:08:38,319
point for

240
00:08:36,320 --> 00:08:39,440
finding bounty targets that we could

241
00:08:38,320 --> 00:08:41,760
start filtering

242
00:08:39,440 --> 00:08:43,120
so that filtering was done is done for

243
00:08:41,760 --> 00:08:46,560
us at scan time

244
00:08:43,120 --> 00:08:48,320
and puts it into two separate buckets of

245
00:08:46,560 --> 00:08:50,160
targets that we can start looking at

246
00:08:48,320 --> 00:08:55,839
immediately and processing for

247
00:08:50,160 --> 00:08:55,839
further tooling

248
00:08:56,240 --> 00:09:00,000
right so back to the scan diving so

249
00:08:58,640 --> 00:09:00,319
multiple scans are obviously going to

250
00:09:00,000 --> 00:09:03,760
have

251
00:09:00,320 --> 00:09:06,959
overlap right if somebody like tesla

252
00:09:03,760 --> 00:09:08,720
has their home page out on the cloud

253
00:09:06,959 --> 00:09:10,880
we can pretty reasonably assume that

254
00:09:08,720 --> 00:09:13,040
that is always going to be in a scan

255
00:09:10,880 --> 00:09:14,640
every time until their company goes

256
00:09:13,040 --> 00:09:16,959
under hopefully not

257
00:09:14,640 --> 00:09:19,120
but things like that can really fill up

258
00:09:16,959 --> 00:09:19,920
the scans with noise so it's helpful to

259
00:09:19,120 --> 00:09:22,160
do

260
00:09:19,920 --> 00:09:23,760
a diff scan to scan to kind of weed out

261
00:09:22,160 --> 00:09:25,360
the things that are always there and

262
00:09:23,760 --> 00:09:28,640
look at

263
00:09:25,360 --> 00:09:30,640
what might be new another thing that

264
00:09:28,640 --> 00:09:32,160
diffing has helped us with is it allows

265
00:09:30,640 --> 00:09:35,199
us to learn

266
00:09:32,160 --> 00:09:36,880
how targets over time name their host so

267
00:09:35,200 --> 00:09:38,480
some of these targets we were looking at

268
00:09:36,880 --> 00:09:39,600
some of these bug bounty scopes we were

269
00:09:38,480 --> 00:09:40,800
starting to get a really good

270
00:09:39,600 --> 00:09:44,080
understanding

271
00:09:40,800 --> 00:09:45,760
week over week how these

272
00:09:44,080 --> 00:09:47,600
companies were naming their cloud

273
00:09:45,760 --> 00:09:48,319
resources and in some cases we were able

274
00:09:47,600 --> 00:09:50,880
to already

275
00:09:48,320 --> 00:09:51,680
know what a host's dns name was going to

276
00:09:50,880 --> 00:09:53,760
be before

277
00:09:51,680 --> 00:09:55,760
it was even live which was really

278
00:09:53,760 --> 00:10:00,560
exciting to see

279
00:09:55,760 --> 00:10:02,640
well yes so

280
00:10:00,560 --> 00:10:04,000
after that another fun thing that we

281
00:10:02,640 --> 00:10:05,839
decided to do that would really give

282
00:10:04,000 --> 00:10:08,160
us a deep insight into some of these

283
00:10:05,839 --> 00:10:12,399
hosts was virtual host discrepancies

284
00:10:08,160 --> 00:10:15,120
so you take an ip address and you

285
00:10:12,399 --> 00:10:16,240
send it a request of three different

286
00:10:15,120 --> 00:10:18,640
types so

287
00:10:16,240 --> 00:10:20,320
you send it as a request to the ip

288
00:10:18,640 --> 00:10:21,199
address with a host header of the ip

289
00:10:20,320 --> 00:10:22,880
address

290
00:10:21,200 --> 00:10:24,399
you send it with the ip address and a

291
00:10:22,880 --> 00:10:25,600
host name of the dns name you're

292
00:10:24,399 --> 00:10:28,320
interested in

293
00:10:25,600 --> 00:10:30,240
and then finally the ip address with a

294
00:10:28,320 --> 00:10:32,480
hostname of localhost

295
00:10:30,240 --> 00:10:33,839
and then you look at the response length

296
00:10:32,480 --> 00:10:35,440
and the status codes

297
00:10:33,839 --> 00:10:37,680
of all three of those to look for

298
00:10:35,440 --> 00:10:40,640
discrepancies as an example

299
00:10:37,680 --> 00:10:42,000
on a bounty target this was an aem

300
00:10:40,640 --> 00:10:44,640
instance that was vulnerable

301
00:10:42,000 --> 00:10:45,600
that was only accessible by ip address

302
00:10:44,640 --> 00:10:48,399
so

303
00:10:45,600 --> 00:10:49,760
knowing the host name was helpful but

304
00:10:48,399 --> 00:10:51,040
you wouldn't be able to access it that

305
00:10:49,760 --> 00:10:53,200
way but if you hit it

306
00:10:51,040 --> 00:10:56,560
directly by a p address you were able to

307
00:10:53,200 --> 00:10:56,560
get access to the instance

308
00:10:57,279 --> 00:11:01,839
cool awesome so kicking off the bin to

309
00:11:00,160 --> 00:11:04,240
do some talking about some of the

310
00:11:01,839 --> 00:11:05,440
expectation we were able to do with

311
00:11:04,240 --> 00:11:07,040
these hosts

312
00:11:05,440 --> 00:11:09,120
so when it comes down to mass

313
00:11:07,040 --> 00:11:11,040
exploitation you have two options you

314
00:11:09,120 --> 00:11:13,279
can either go after a single target

315
00:11:11,040 --> 00:11:14,719
or you can just go after every single

316
00:11:13,279 --> 00:11:15,360
one of your targets that you're hacking

317
00:11:14,720 --> 00:11:18,079
on

318
00:11:15,360 --> 00:11:19,760
and look for the same pattern but if you

319
00:11:18,079 --> 00:11:21,599
decide to do a single target this is how

320
00:11:19,760 --> 00:11:23,279
we approached it so first of all

321
00:11:21,600 --> 00:11:25,200
we want to understand how this target

322
00:11:23,279 --> 00:11:27,279
works are there any specific deployment

323
00:11:25,200 --> 00:11:29,360
process they follow what are the apis

324
00:11:27,279 --> 00:11:31,360
being

325
00:11:29,360 --> 00:11:33,120
deployed where are the documentation for

326
00:11:31,360 --> 00:11:33,760
those apis being stored is it going to

327
00:11:33,120 --> 00:11:35,680
be

328
00:11:33,760 --> 00:11:36,920
in a particular folder is it always

329
00:11:35,680 --> 00:11:38,239
swagger is it always an

330
00:11:36,920 --> 00:11:40,079
application.waddle

331
00:11:38,240 --> 00:11:41,680
who knows we want to figure those out

332
00:11:40,079 --> 00:11:43,599
and they want to also understand where

333
00:11:41,680 --> 00:11:46,479
are the internal and corporate sites

334
00:11:43,600 --> 00:11:46,880
so is it corporate.site.com or do they

335
00:11:46,480 --> 00:11:49,279
have an

336
00:11:46,880 --> 00:11:51,600
actual corporate domain where they host

337
00:11:49,279 --> 00:11:54,959
all these things

338
00:11:51,600 --> 00:11:56,880
well as an example with verizon media

339
00:11:54,959 --> 00:11:59,119
we came across a bunch of application

340
00:11:56,880 --> 00:12:00,880
models a bunch of swagger uis

341
00:11:59,120 --> 00:12:02,399
and we noticed that a lot of the

342
00:12:00,880 --> 00:12:05,839
internal targets

343
00:12:02,399 --> 00:12:07,760
were having the port 4443 open

344
00:12:05,839 --> 00:12:10,160
and it was very very interesting so we

345
00:12:07,760 --> 00:12:12,959
decided to keep analyzing this pattern

346
00:12:10,160 --> 00:12:14,319
on every target we went to

347
00:12:12,959 --> 00:12:16,000
but on the other hand when you're doing

348
00:12:14,320 --> 00:12:16,399
multiple targets where you're spraying

349
00:12:16,000 --> 00:12:18,160
four

350
00:12:16,399 --> 00:12:20,000
phones and praying that it comes back as

351
00:12:18,160 --> 00:12:21,839
a valid vulnerability

352
00:12:20,000 --> 00:12:23,920
it's a different approach the first

353
00:12:21,839 --> 00:12:25,279
thing is you look for cves things that

354
00:12:23,920 --> 00:12:28,800
you know are already vulnerable

355
00:12:25,279 --> 00:12:29,839
you look for uh other development

356
00:12:28,800 --> 00:12:32,079
processes like

357
00:12:29,839 --> 00:12:33,680
a back end that companies may use like

358
00:12:32,079 --> 00:12:34,560
spring boot or jolokia where you know

359
00:12:33,680 --> 00:12:36,079
there's going to be potential

360
00:12:34,560 --> 00:12:38,160
vulnerabilities there

361
00:12:36,079 --> 00:12:39,199
of course the api documentation works on

362
00:12:38,160 --> 00:12:41,839
both approaches of

363
00:12:39,200 --> 00:12:42,240
single target and multiple target and

364
00:12:41,839 --> 00:12:44,000
then

365
00:12:42,240 --> 00:12:45,440
last but not least this is my favorite

366
00:12:44,000 --> 00:12:48,639
thing to look for is

367
00:12:45,440 --> 00:12:50,079
looking for sensitive or internal tools

368
00:12:48,639 --> 00:12:52,160
that are not supposed to be exposed

369
00:12:50,079 --> 00:12:54,959
these are things like jenkins gitlab

370
00:12:52,160 --> 00:12:56,719
github jira and of course all of these

371
00:12:54,959 --> 00:12:59,518
are approached differently but it's very

372
00:12:56,720 --> 00:12:59,519
very good to have

373
00:13:00,160 --> 00:13:03,839
now let's talk about when mass

374
00:13:02,639 --> 00:13:06,399
exploitation

375
00:13:03,839 --> 00:13:08,560
and avoiding false positive because if

376
00:13:06,399 --> 00:13:11,040
you want to avoid false positive

377
00:13:08,560 --> 00:13:12,880
identification becomes a very very

378
00:13:11,040 --> 00:13:14,959
important part of this

379
00:13:12,880 --> 00:13:16,720
so how does it look well you have to

380
00:13:14,959 --> 00:13:18,000
understand what you want to go after you

381
00:13:16,720 --> 00:13:19,519
can't just say i want to look for all

382
00:13:18,000 --> 00:13:20,160
these things you have to understand how

383
00:13:19,519 --> 00:13:22,880
graphql

384
00:13:20,160 --> 00:13:23,760
works what apis look like what graphona

385
00:13:22,880 --> 00:13:26,079
looks like

386
00:13:23,760 --> 00:13:26,800
what makes these things unique so for

387
00:13:26,079 --> 00:13:29,279
example

388
00:13:26,800 --> 00:13:30,079
in some in most cases you want to look

389
00:13:29,279 --> 00:13:31,839
for three things

390
00:13:30,079 --> 00:13:33,519
the response header because in the

391
00:13:31,839 --> 00:13:34,000
header sometimes i have a signature that

392
00:13:33,519 --> 00:13:35,680
defines

393
00:13:34,000 --> 00:13:38,240
what this program is or what this

394
00:13:35,680 --> 00:13:40,000
application is the response body because

395
00:13:38,240 --> 00:13:40,959
it could have a signature in the body

396
00:13:40,000 --> 00:13:43,600
that says

397
00:13:40,959 --> 00:13:45,518
powered by so and so company and of

398
00:13:43,600 --> 00:13:46,480
course a specific endpoint that endpoint

399
00:13:45,519 --> 00:13:48,800
could be a logo

400
00:13:46,480 --> 00:13:49,680
it could be an api endpoint it could be

401
00:13:48,800 --> 00:13:51,519
an error page

402
00:13:49,680 --> 00:13:54,079
whatever you're looking for you have to

403
00:13:51,519 --> 00:13:55,440
really understand what that means

404
00:13:54,079 --> 00:13:56,959
so for example we were looking for

405
00:13:55,440 --> 00:13:58,000
swagger i've talked about this up a

406
00:13:56,959 --> 00:13:59,680
bunch of times

407
00:13:58,000 --> 00:14:02,000
if you're looking for swagger 9 out of

408
00:13:59,680 --> 00:14:05,040
10 times you can come across this

409
00:14:02,000 --> 00:14:06,800
endpoint called swagger resources

410
00:14:05,040 --> 00:14:08,399
where it tells you where the location of

411
00:14:06,800 --> 00:14:10,240
the documentation is

412
00:14:08,399 --> 00:14:11,920
and of course there's a keyword swagger

413
00:14:10,240 --> 00:14:14,079
version that you can use

414
00:14:11,920 --> 00:14:15,360
as a part of the fingerprint and we'll

415
00:14:14,079 --> 00:14:16,000
talk about that in a little bit again

416
00:14:15,360 --> 00:14:18,000
and we'll talk

417
00:14:16,000 --> 00:14:20,880
we'll put it together to understand how

418
00:14:18,000 --> 00:14:22,560
to actually look for these in mass

419
00:14:20,880 --> 00:14:24,639
so of course if you don't want to if you

420
00:14:22,560 --> 00:14:28,160
don't look if you don't find the

421
00:14:24,639 --> 00:14:30,079
swagger resources as this one

422
00:14:28,160 --> 00:14:32,399
you can always just spray for swagger

423
00:14:30,079 --> 00:14:34,479
api docs and other

424
00:14:32,399 --> 00:14:36,000
paths that you know of that api

425
00:14:34,480 --> 00:14:38,720
documentation could be stored

426
00:14:36,000 --> 00:14:39,760
within swagger and look for the keyword

427
00:14:38,720 --> 00:14:41,680
base path

428
00:14:39,760 --> 00:14:44,160
the base path is something that every

429
00:14:41,680 --> 00:14:45,760
single documentation will have and

430
00:14:44,160 --> 00:14:47,920
they have to tell you where the api

431
00:14:45,760 --> 00:14:49,040
exists how to access it where to access

432
00:14:47,920 --> 00:14:50,399
it and so on

433
00:14:49,040 --> 00:14:52,079
and before i move on i want to make a

434
00:14:50,399 --> 00:14:54,079
note that just finding this api

435
00:14:52,079 --> 00:14:54,959
documentation is not a vulnerability by

436
00:14:54,079 --> 00:14:56,638
itself

437
00:14:54,959 --> 00:14:58,319
it just helps you not have to play hide

438
00:14:56,639 --> 00:14:59,519
and seek with the api it tells you where

439
00:14:58,320 --> 00:15:02,720
the endpoints are

440
00:14:59,519 --> 00:15:04,399
how they work what to expect and so on

441
00:15:02,720 --> 00:15:05,920
so please don't report you know swagger

442
00:15:04,399 --> 00:15:07,519
documentation on its own

443
00:15:05,920 --> 00:15:09,040
spend some time to understand how the

444
00:15:07,519 --> 00:15:13,839
api works and look for

445
00:15:09,040 --> 00:15:13,839
vulnerabilities within those apis

446
00:15:14,320 --> 00:15:17,360
the next one is graphql what makes

447
00:15:16,160 --> 00:15:20,639
graphql important

448
00:15:17,360 --> 00:15:22,160
or unique is if you hit a slash graphql

449
00:15:20,639 --> 00:15:23,760
endpoint in most cases you're going to

450
00:15:22,160 --> 00:15:26,319
get a 400 error

451
00:15:23,760 --> 00:15:26,800
and it's going to return an error that

452
00:15:26,320 --> 00:15:29,600
says

453
00:15:26,800 --> 00:15:31,040
hey the get query is missing so knowing

454
00:15:29,600 --> 00:15:32,160
that query missing is going to be in

455
00:15:31,040 --> 00:15:34,160
your response

456
00:15:32,160 --> 00:15:36,480
when we hit graphql and we're expanding

457
00:15:34,160 --> 00:15:38,160
expecting a 400 baht request

458
00:15:36,480 --> 00:15:40,560
we can use it for the fingerprint to

459
00:15:38,160 --> 00:15:43,920
always look for graphql instances

460
00:15:40,560 --> 00:15:46,160
across all of our bug bounty programs

461
00:15:43,920 --> 00:15:47,920
another example is one of my favorites

462
00:15:46,160 --> 00:15:49,360
big shout outs to rodonator for doing

463
00:15:47,920 --> 00:15:51,439
this justin gardner

464
00:15:49,360 --> 00:15:52,560
he found a cv in grafana we're looking

465
00:15:51,440 --> 00:15:53,759
at this data

466
00:15:52,560 --> 00:15:55,599
and we'll talk about a little bit but

467
00:15:53,759 --> 00:15:58,399
grafana it's really easy

468
00:15:55,600 --> 00:15:59,440
if you go to the web route it 302 is to

469
00:15:58,399 --> 00:16:01,759
login

470
00:15:59,440 --> 00:16:03,600
and within that response you will see

471
00:16:01,759 --> 00:16:06,320
grafana in the title and you can also

472
00:16:03,600 --> 00:16:08,399
see the public image grafana mask icon

473
00:16:06,320 --> 00:16:11,360
that makes it very very obvious it says

474
00:16:08,399 --> 00:16:12,959
grafana so if you see these three things

475
00:16:11,360 --> 00:16:15,199
there is a high chance that this cannot

476
00:16:12,959 --> 00:16:18,880
be a false positive and grafana instance

477
00:16:15,199 --> 00:16:21,199
actually exists on that ip address

478
00:16:18,880 --> 00:16:22,560
all right well we knew all this but now

479
00:16:21,199 --> 00:16:24,719
that we know how these things

480
00:16:22,560 --> 00:16:25,599
look and how to look for them what do we

481
00:16:24,720 --> 00:16:27,360
do

482
00:16:25,600 --> 00:16:29,120
well while we're developing the scanner

483
00:16:27,360 --> 00:16:30,880
we didn't have a lot of tools of our own

484
00:16:29,120 --> 00:16:32,720
we're still figuring out how to do it

485
00:16:30,880 --> 00:16:34,000
so we decided to use tools that are

486
00:16:32,720 --> 00:16:36,320
already out there

487
00:16:34,000 --> 00:16:37,920
i personally love using meg huge house

488
00:16:36,320 --> 00:16:38,959
of tom nom nom if you're not familiar

489
00:16:37,920 --> 00:16:41,439
with tom

490
00:16:38,959 --> 00:16:42,880
i definitely uh recommend following him

491
00:16:41,440 --> 00:16:44,160
on twitter and checking out all his

492
00:16:42,880 --> 00:16:46,399
awesome tools that he has put out for

493
00:16:44,160 --> 00:16:48,959
bug bounty hunters on his github

494
00:16:46,399 --> 00:16:50,160
but meg allows you to spray a number of

495
00:16:48,959 --> 00:16:52,638
endpoints

496
00:16:50,160 --> 00:16:53,519
against a ton of hosts and it goes a

497
00:16:52,639 --> 00:16:56,160
step further

498
00:16:53,519 --> 00:16:57,519
and it saves the response code in a

499
00:16:56,160 --> 00:16:59,680
folder called out

500
00:16:57,519 --> 00:17:01,120
and it indexes them so as you can see

501
00:16:59,680 --> 00:17:03,758
each line is

502
00:17:01,120 --> 00:17:04,160
a host that i've hit it on the left hand

503
00:17:03,759 --> 00:17:07,280
side

504
00:17:04,160 --> 00:17:08,799
it's where it stored the response

505
00:17:07,280 --> 00:17:10,319
the response code and response headers

506
00:17:08,799 --> 00:17:12,639
and everything that came back

507
00:17:10,319 --> 00:17:14,720
on the right hand side it gives you the

508
00:17:12,640 --> 00:17:16,720
response code and it gives the url of

509
00:17:14,720 --> 00:17:18,160
whatever we hit

510
00:17:16,720 --> 00:17:20,959
so if you go for example i'm looking at

511
00:17:18,160 --> 00:17:22,799
netflix if i go to ls and do ls out on

512
00:17:20,959 --> 00:17:25,520
netflix you can see every ip i just i

513
00:17:22,799 --> 00:17:27,679
have hit it has it organized for me and

514
00:17:25,520 --> 00:17:30,080
within that folder the response

515
00:17:27,679 --> 00:17:31,200
body is fully saved this is all very

516
00:17:30,080 --> 00:17:32,639
very useful

517
00:17:31,200 --> 00:17:34,960
and we'll talk about it a little bit as

518
00:17:32,640 --> 00:17:35,760
well so now that we know all this

519
00:17:34,960 --> 00:17:37,919
information

520
00:17:35,760 --> 00:17:39,440
we want to put a one-liner you can use

521
00:17:37,919 --> 00:17:41,440
whatever language you like

522
00:17:39,440 --> 00:17:42,640
i like doing things with grep and i

523
00:17:41,440 --> 00:17:44,080
promise you this is probably not the

524
00:17:42,640 --> 00:17:46,720
best way to do it

525
00:17:44,080 --> 00:17:48,799
but it worked i made this thing up i

526
00:17:46,720 --> 00:17:52,080
will explain what it does in a sec

527
00:17:48,799 --> 00:17:52,799
but i saved this as a bash alias called

528
00:17:52,080 --> 00:17:54,639
search

529
00:17:52,799 --> 00:17:56,480
and every time i would get done scanning

530
00:17:54,640 --> 00:17:58,720
with meg i would type in search

531
00:17:56,480 --> 00:17:59,520
and look for whatever i was looking for

532
00:17:58,720 --> 00:18:00,640
so

533
00:17:59,520 --> 00:18:02,720
the first thing we're doing in that

534
00:18:00,640 --> 00:18:04,559
command that i just showed earlier is

535
00:18:02,720 --> 00:18:06,240
we're gripping for a response code so if

536
00:18:04,559 --> 00:18:08,000
i'm looking for swagger

537
00:18:06,240 --> 00:18:10,320
if the swagger documentation is there

538
00:18:08,000 --> 00:18:12,160
i'm looking for a status code of 200.

539
00:18:10,320 --> 00:18:13,439
here i'm looking for metrics that

540
00:18:12,160 --> 00:18:15,520
doesn't matter what we're looking for

541
00:18:13,440 --> 00:18:18,640
but we want to make sure the status code

542
00:18:15,520 --> 00:18:20,240
the response code matches first next

543
00:18:18,640 --> 00:18:21,600
we're telling it hey i want you to cut

544
00:18:20,240 --> 00:18:24,559
the output

545
00:18:21,600 --> 00:18:25,760
and tell me where the path for the

546
00:18:24,559 --> 00:18:28,639
response body is

547
00:18:25,760 --> 00:18:29,520
so if you match the 200 tell me where

548
00:18:28,640 --> 00:18:32,240
the file is

549
00:18:29,520 --> 00:18:34,400
where the response body is saved for

550
00:18:32,240 --> 00:18:36,240
that ip or domain address and then we do

551
00:18:34,400 --> 00:18:37,120
a sort you it's a bad habit of mine it's

552
00:18:36,240 --> 00:18:38,720
just to make sure there are no

553
00:18:37,120 --> 00:18:40,799
duplicates

554
00:18:38,720 --> 00:18:42,320
and right after that we're going to pass

555
00:18:40,799 --> 00:18:44,240
it to x-args and we're going to say hey

556
00:18:42,320 --> 00:18:46,639
i want you to loop through all of these

557
00:18:44,240 --> 00:18:48,400
and i want you to grip um for the

558
00:18:46,640 --> 00:18:49,919
fingerprint that we came up with so if

559
00:18:48,400 --> 00:18:51,120
i'm looking for swagger i'm looking for

560
00:18:49,919 --> 00:18:52,559
swagger version

561
00:18:51,120 --> 00:18:54,320
i want you to open every one of those

562
00:18:52,559 --> 00:18:56,399
files in those folders

563
00:18:54,320 --> 00:18:57,840
look for that fingerprint and then after

564
00:18:56,400 --> 00:19:00,960
that i want you to cut it up

565
00:18:57,840 --> 00:19:03,918
and give me the ip address or the domain

566
00:19:00,960 --> 00:19:05,440
where this thing was identified so we've

567
00:19:03,919 --> 00:19:08,480
saved it we ran it and now we're going

568
00:19:05,440 --> 00:19:08,480
to look at some examples

569
00:19:09,679 --> 00:19:13,520
so i like i said i have called this

570
00:19:11,919 --> 00:19:15,120
thing search it's just an easy thing you

571
00:19:13,520 --> 00:19:18,400
can call it whatever you want

572
00:19:15,120 --> 00:19:20,799
i'm looking for 200 the status quo being

573
00:19:18,400 --> 00:19:23,520
200 and again as we mentioned earlier

574
00:19:20,799 --> 00:19:24,000
swagger version is our benchmark or our

575
00:19:23,520 --> 00:19:26,160
fingerprint

576
00:19:24,000 --> 00:19:27,679
whatever you want to call it and then we

577
00:19:26,160 --> 00:19:29,360
ask you know we cut up a little bit more

578
00:19:27,679 --> 00:19:30,000
and on the left side right here all

579
00:19:29,360 --> 00:19:32,559
these

580
00:19:30,000 --> 00:19:34,559
uh the white box right here is pretty

581
00:19:32,559 --> 00:19:36,480
much every ip address that came back

582
00:19:34,559 --> 00:19:39,360
within netflix's infrastructure

583
00:19:36,480 --> 00:19:42,320
that had swagger version uh in that

584
00:19:39,360 --> 00:19:44,320
endpoint that we hit swagger resources

585
00:19:42,320 --> 00:19:45,840
same thing for graphql we did the same

586
00:19:44,320 --> 00:19:48,799
exact thing we said search for

587
00:19:45,840 --> 00:19:50,799
400 and if there is a 400 status code

588
00:19:48,799 --> 00:19:52,559
read the body from that folder

589
00:19:50,799 --> 00:19:54,080
tell us where the keyword missing comes

590
00:19:52,559 --> 00:19:56,080
up and then spin out

591
00:19:54,080 --> 00:19:58,399
all the ipa changes for us so all these

592
00:19:56,080 --> 00:20:00,000
ip addresses had a working

593
00:19:58,400 --> 00:20:01,360
graphql instance that we could have

594
00:20:00,000 --> 00:20:03,600
played with and see if we can find

595
00:20:01,360 --> 00:20:06,000
vulnerabilities in

596
00:20:03,600 --> 00:20:07,039
but all of that is fine but i don't

597
00:20:06,000 --> 00:20:08,400
think it scales

598
00:20:07,039 --> 00:20:10,080
especially when you're going after

599
00:20:08,400 --> 00:20:11,520
millions of ip addresses

600
00:20:10,080 --> 00:20:13,678
and you're mass gaining almost the

601
00:20:11,520 --> 00:20:15,280
entire internet so i'll let tanner

602
00:20:13,679 --> 00:20:16,000
really quickly explain how we approach

603
00:20:15,280 --> 00:20:20,960
this on our own

604
00:20:16,000 --> 00:20:23,840
and how this tool works

605
00:20:20,960 --> 00:20:24,559
right so one of the things we wanted to

606
00:20:23,840 --> 00:20:26,480
do

607
00:20:24,559 --> 00:20:28,879
with all these hosts was get a good

608
00:20:26,480 --> 00:20:30,799
sense of what was running on them

609
00:20:28,880 --> 00:20:32,880
so the easiest way to do that is find

610
00:20:30,799 --> 00:20:36,960
something that is

611
00:20:32,880 --> 00:20:40,320
identifiable in the https response

612
00:20:36,960 --> 00:20:44,000
of these hosts and key off on that and

613
00:20:40,320 --> 00:20:45,678
build yourself a list of those

614
00:20:44,000 --> 00:20:47,600
identifiers that's exactly what we did

615
00:20:45,679 --> 00:20:50,320
it's very simple tools very similar to a

616
00:20:47,600 --> 00:20:52,480
lot of the other fingerprinting tools

617
00:20:50,320 --> 00:20:53,840
we built one kind of ourselves just to

618
00:20:52,480 --> 00:20:57,200
have an easy way to tie

619
00:20:53,840 --> 00:20:59,039
in to our scans

620
00:20:57,200 --> 00:21:00,799
that we run ourselves and this is

621
00:20:59,039 --> 00:21:01,520
triggered automatically after our new

622
00:21:00,799 --> 00:21:05,600
scans come

623
00:21:01,520 --> 00:21:08,559
in so you can see an example over there

624
00:21:05,600 --> 00:21:10,080
sorry to the right where you just have

625
00:21:08,559 --> 00:21:10,879
the name of the service you're

626
00:21:10,080 --> 00:21:13,039
interested in

627
00:21:10,880 --> 00:21:14,880
and the fingerprint or fingerprints that

628
00:21:13,039 --> 00:21:17,760
it's going to be looking for in either

629
00:21:14,880 --> 00:21:19,280
the response body the response headers

630
00:21:17,760 --> 00:21:21,440
or really anywhere in any of that

631
00:21:19,280 --> 00:21:22,720
response data that comes back

632
00:21:21,440 --> 00:21:24,960
and the good thing about this tool is

633
00:21:22,720 --> 00:21:25,679
that you can also add you know this json

634
00:21:24,960 --> 00:21:27,200
body and

635
00:21:25,679 --> 00:21:29,120
add whatever fingerprints you want and

636
00:21:27,200 --> 00:21:30,640
customize it to your needs

637
00:21:29,120 --> 00:21:33,280
we've released this and we'll talk about

638
00:21:30,640 --> 00:21:34,480
it later on during this talk

639
00:21:33,280 --> 00:21:36,480
now let's talk about some bug bounty

640
00:21:34,480 --> 00:21:39,200
examples i think this is where

641
00:21:36,480 --> 00:21:40,400
the fun happens a little bit for us so

642
00:21:39,200 --> 00:21:42,400
we wanted to talk about

643
00:21:40,400 --> 00:21:44,480
asset monitoring as tanner mentioned

644
00:21:42,400 --> 00:21:46,080
earlier we caught on to how this company

645
00:21:44,480 --> 00:21:47,440
was deploying things

646
00:21:46,080 --> 00:21:49,678
what they were deploying and how they

647
00:21:47,440 --> 00:21:50,480
were doing it and it ended up giving us

648
00:21:49,679 --> 00:21:52,480
some really cool

649
00:21:50,480 --> 00:21:53,520
phones unfortunately because it's a

650
00:21:52,480 --> 00:21:55,120
private program

651
00:21:53,520 --> 00:21:56,720
we couldn't do any screenshots but what

652
00:21:55,120 --> 00:21:58,559
i can do is give you a high level

653
00:21:56,720 --> 00:22:01,039
overview of what happened

654
00:21:58,559 --> 00:22:02,399
so about a year ago i discovered xss in

655
00:22:01,039 --> 00:22:04,400
this application

656
00:22:02,400 --> 00:22:07,280
what it was every time that uh you would

657
00:22:04,400 --> 00:22:09,919
go to this website you go to slash demo

658
00:22:07,280 --> 00:22:11,520
demo app it would take you to this

659
00:22:09,919 --> 00:22:14,480
folder in this file where that

660
00:22:11,520 --> 00:22:15,120
parameter had an xss in it we reported

661
00:22:14,480 --> 00:22:17,840
it

662
00:22:15,120 --> 00:22:19,199
never thought of this ever again but i

663
00:22:17,840 --> 00:22:21,918
beat me being me

664
00:22:19,200 --> 00:22:23,679
i saved that path of demo app slash demo

665
00:22:21,919 --> 00:22:26,559
underscore app.html

666
00:22:23,679 --> 00:22:28,400
i put it in my keywords or my word list

667
00:22:26,559 --> 00:22:32,240
if it comes up it comes up

668
00:22:28,400 --> 00:22:34,960
well a year later almost i come across

669
00:22:32,240 --> 00:22:36,080
the same website the same company and i

670
00:22:34,960 --> 00:22:38,840
realized that

671
00:22:36,080 --> 00:22:41,199
this thing came up in a development

672
00:22:38,840 --> 00:22:43,439
environment well that's interesting

673
00:22:41,200 --> 00:22:45,120
i have this in my word list for a reason

674
00:22:43,440 --> 00:22:46,960
i've came across it before

675
00:22:45,120 --> 00:22:48,559
and i've seen this already well let's

676
00:22:46,960 --> 00:22:50,240
create a fingerprint the fingerprint

677
00:22:48,559 --> 00:22:51,280
that we created was a javascript file

678
00:22:50,240 --> 00:22:53,360
that would be called

679
00:22:51,280 --> 00:22:56,240
within the body of this file in the html

680
00:22:53,360 --> 00:22:59,280
file that they relied on on their cdn

681
00:22:56,240 --> 00:23:02,240
so all we had to do was use meg

682
00:22:59,280 --> 00:23:03,600
or use our tool either one and look for

683
00:23:02,240 --> 00:23:05,360
this path right here

684
00:23:03,600 --> 00:23:07,280
and make sure the fingerprint of our

685
00:23:05,360 --> 00:23:09,918
javascript file that we have found was

686
00:23:07,280 --> 00:23:11,840
in there and within our scan we found

687
00:23:09,919 --> 00:23:13,679
six different instances of this where it

688
00:23:11,840 --> 00:23:15,199
was vulnerable to an xss

689
00:23:13,679 --> 00:23:16,960
and that's an easy win so every time a

690
00:23:15,200 --> 00:23:19,760
new asset comes up for this company

691
00:23:16,960 --> 00:23:21,600
we hit this endpoint is it there awesome

692
00:23:19,760 --> 00:23:23,200
that's export for xss and let's report

693
00:23:21,600 --> 00:23:26,959
it

694
00:23:23,200 --> 00:23:32,320
the next one is hunting for cves this is

695
00:23:26,960 --> 00:23:33,360
elite c cve as you can see cv2020 13379

696
00:23:32,320 --> 00:23:35,520
i'm not going to talk about the

697
00:23:33,360 --> 00:23:36,000
technical aspects of this talk if you're

698
00:23:35,520 --> 00:23:38,559
interested

699
00:23:36,000 --> 00:23:40,640
in this please go look up ryan raiders

700
00:23:38,559 --> 00:23:41,600
ssrf and grafana on youtube i think he

701
00:23:40,640 --> 00:23:44,080
did a talk at

702
00:23:41,600 --> 00:23:45,439
activitycon with hacker1 i highly

703
00:23:44,080 --> 00:23:47,039
recommend that it's a very very good

704
00:23:45,440 --> 00:23:48,400
talk on ssrf

705
00:23:47,039 --> 00:23:50,799
and it helped us identify some

706
00:23:48,400 --> 00:23:53,279
vulnerabilities using this bug

707
00:23:50,799 --> 00:23:54,240
so we talked about how to look for

708
00:23:53,279 --> 00:23:56,000
grafana

709
00:23:54,240 --> 00:23:57,760
obviously grafana goes to login when you

710
00:23:56,000 --> 00:23:58,480
hit the web route the keyword grafana's

711
00:23:57,760 --> 00:24:00,158
in there

712
00:23:58,480 --> 00:24:03,679
but then we later on learned that

713
00:24:00,159 --> 00:24:06,159
grafana is also hosted on the port 3000

714
00:24:03,679 --> 00:24:07,919
great let's scan for port 3000 and look

715
00:24:06,159 --> 00:24:10,240
for everything that has grafana in it in

716
00:24:07,919 --> 00:24:12,080
our bug bounty table

717
00:24:10,240 --> 00:24:14,000
so we pulled everything from port 3000

718
00:24:12,080 --> 00:24:15,600
from bug binding table as i mentioned

719
00:24:14,000 --> 00:24:17,120
we also looked for everything that has a

720
00:24:15,600 --> 00:24:19,600
keyword grafana in it

721
00:24:17,120 --> 00:24:20,399
from the bounty table we hit slash login

722
00:24:19,600 --> 00:24:23,678
with meg

723
00:24:20,400 --> 00:24:26,559
we fingerprinted for it all and

724
00:24:23,679 --> 00:24:28,559
we again we use our search thing and we

725
00:24:26,559 --> 00:24:31,840
found all the possible instances

726
00:24:28,559 --> 00:24:34,720
of grafana that were existing in our

727
00:24:31,840 --> 00:24:36,399
database but we could have skipped the

728
00:24:34,720 --> 00:24:38,159
login part and instead of looking for

729
00:24:36,400 --> 00:24:39,360
login since we know the poc for this

730
00:24:38,159 --> 00:24:40,559
thing we could have literally just used

731
00:24:39,360 --> 00:24:43,039
the ssrf

732
00:24:40,559 --> 00:24:44,720
have the ssrf hit the one six nine two

733
00:24:43,039 --> 00:24:45,679
five four one six nine two five four i p

734
00:24:44,720 --> 00:24:48,640
address

735
00:24:45,679 --> 00:24:50,480
where it's the aws metadata instance and

736
00:24:48,640 --> 00:24:51,440
look for the keyword metadata and if

737
00:24:50,480 --> 00:24:53,039
that comes up

738
00:24:51,440 --> 00:24:55,200
then that means it's vulnerable because

739
00:24:53,039 --> 00:24:57,360
it's giving us the

740
00:24:55,200 --> 00:24:58,480
cloud cloud instance or cloud metadata

741
00:24:57,360 --> 00:24:59,840
instance

742
00:24:58,480 --> 00:25:02,480
because it's vulnerable and we can

743
00:24:59,840 --> 00:25:04,639
identify it using meg

744
00:25:02,480 --> 00:25:05,520
so as an example here is what we have

745
00:25:04,640 --> 00:25:07,120
found with

746
00:25:05,520 --> 00:25:08,639
some of the bug bounty programs that we

747
00:25:07,120 --> 00:25:10,639
have hit

748
00:25:08,640 --> 00:25:12,159
one of these companies we identified

749
00:25:10,640 --> 00:25:14,720
several number of

750
00:25:12,159 --> 00:25:16,480
vulnerable instances they were kind of

751
00:25:14,720 --> 00:25:18,640
impressed with how we found it

752
00:25:16,480 --> 00:25:20,000
um and this is kind of how we did it was

753
00:25:18,640 --> 00:25:22,960
with the scan that we're doing

754
00:25:20,000 --> 00:25:23,279
continuously with tanner and there was

755
00:25:22,960 --> 00:25:24,640
not

756
00:25:23,279 --> 00:25:26,320
just that company there were other

757
00:25:24,640 --> 00:25:26,880
companies that were also vulnerable to

758
00:25:26,320 --> 00:25:28,960
this

759
00:25:26,880 --> 00:25:30,400
that we came across so it was really

760
00:25:28,960 --> 00:25:31,039
really fun to be able to find these

761
00:25:30,400 --> 00:25:33,039
things

762
00:25:31,039 --> 00:25:34,879
because of the research that rhino has

763
00:25:33,039 --> 00:25:35,760
done and the research that we were doing

764
00:25:34,880 --> 00:25:37,760
in parallel

765
00:25:35,760 --> 00:25:40,480
between me and tanner and we got to get

766
00:25:37,760 --> 00:25:42,640
some really cool boundaries out of it

767
00:25:40,480 --> 00:25:44,400
takeaways from this is just because a

768
00:25:42,640 --> 00:25:45,279
company has multiple instances of the

769
00:25:44,400 --> 00:25:46,240
same app

770
00:25:45,279 --> 00:25:48,799
it doesn't mean that you're going to get

771
00:25:46,240 --> 00:25:51,120
multiple bounties but multiple instances

772
00:25:48,799 --> 00:25:52,799
sometimes means a higher reward or maybe

773
00:25:51,120 --> 00:25:54,639
a bonus on top

774
00:25:52,799 --> 00:25:56,639
also if you're going to hunt for cves

775
00:25:54,640 --> 00:25:58,320
and o days give them some time to patch

776
00:25:56,640 --> 00:26:00,000
don't do it the same day gets dropped

777
00:25:58,320 --> 00:26:01,279
you're going to piss people off

778
00:26:00,000 --> 00:26:03,279
you may get upset because they're not

779
00:26:01,279 --> 00:26:04,400
going to pay you but just give them

780
00:26:03,279 --> 00:26:06,400
enough time give them

781
00:26:04,400 --> 00:26:07,840
30 days 60 days whatever that is it's

782
00:26:06,400 --> 00:26:08,960
appropriate time whatever you think it's

783
00:26:07,840 --> 00:26:10,559
appropriate

784
00:26:08,960 --> 00:26:12,400
and then if you report it too early you

785
00:26:10,559 --> 00:26:14,320
don't get any money don't get upset

786
00:26:12,400 --> 00:26:15,760
it's just a part of the game that's what

787
00:26:14,320 --> 00:26:17,439
happens when you go and hunt for old

788
00:26:15,760 --> 00:26:20,559
days

789
00:26:17,440 --> 00:26:23,039
the next one is a classic admin we

790
00:26:20,559 --> 00:26:25,120
sprayed admin across our entire bounty

791
00:26:23,039 --> 00:26:25,840
table but we didn't find anything

792
00:26:25,120 --> 00:26:29,520
interesting

793
00:26:25,840 --> 00:26:30,480
except this one instance where we would

794
00:26:29,520 --> 00:26:32,720
hit

795
00:26:30,480 --> 00:26:35,760
admin and we were looking for login but

796
00:26:32,720 --> 00:26:38,640
we realized the login was pretty much

797
00:26:35,760 --> 00:26:39,120
sending us to another path called mgmt

798
00:26:38,640 --> 00:26:42,159
which

799
00:26:39,120 --> 00:26:44,479
we assumed it was management some path

800
00:26:42,159 --> 00:26:46,799
and then login.jsp

801
00:26:44,480 --> 00:26:47,840
and of course mgmt had a login page that

802
00:26:46,799 --> 00:26:49,520
was admin

803
00:26:47,840 --> 00:26:52,639
as you can see on the right this is what

804
00:26:49,520 --> 00:26:55,120
it looked like

805
00:26:52,640 --> 00:26:56,400
and of course if you use the credentials

806
00:26:55,120 --> 00:26:59,279
admin admin

807
00:26:56,400 --> 00:27:00,799
it led us into this website's backend

808
00:26:59,279 --> 00:27:02,960
and it gave us some

809
00:27:00,799 --> 00:27:04,639
user data but that wasn't enough that's

810
00:27:02,960 --> 00:27:07,039
not fun because

811
00:27:04,640 --> 00:27:09,520
we have access to this one back-end so

812
00:27:07,039 --> 00:27:12,000
what the thing that i'm interested in is

813
00:27:09,520 --> 00:27:12,720
is this company reusing this management

814
00:27:12,000 --> 00:27:15,440
backend

815
00:27:12,720 --> 00:27:17,679
over and over on other websites and can

816
00:27:15,440 --> 00:27:20,000
i log into those using the same

817
00:27:17,679 --> 00:27:21,120
admin admin credentials so let's break

818
00:27:20,000 --> 00:27:24,240
the sound apart

819
00:27:21,120 --> 00:27:24,639
the wxyz that we have is the application

820
00:27:24,240 --> 00:27:26,399
name

821
00:27:24,640 --> 00:27:27,679
that always stays the same so if this

822
00:27:26,399 --> 00:27:29,678
was some

823
00:27:27,679 --> 00:27:31,919
weird name that we knew about that's

824
00:27:29,679 --> 00:27:33,760
always going to be there the permutation

825
00:27:31,919 --> 00:27:35,120
was a little bit weird because it wasn't

826
00:27:33,760 --> 00:27:37,200
the traditional

827
00:27:35,120 --> 00:27:38,639
dev internal corporate these

828
00:27:37,200 --> 00:27:40,640
permutations i think were different

829
00:27:38,640 --> 00:27:43,440
platforms where this thing

830
00:27:40,640 --> 00:27:46,000
was being used and then obviously the i

831
00:27:43,440 --> 00:27:48,320
wish i could disclose this target.com

832
00:27:46,000 --> 00:27:49,679
is the domain that we're going after and

833
00:27:48,320 --> 00:27:51,678
the core app is

834
00:27:49,679 --> 00:27:53,840
where you would get logged in so once

835
00:27:51,679 --> 00:27:56,080
you log in to the website

836
00:27:53,840 --> 00:27:57,918
it would center this core application

837
00:27:56,080 --> 00:27:59,199
and that was very interesting because it

838
00:27:57,919 --> 00:28:00,840
was very very unique

839
00:27:59,200 --> 00:28:02,240
so it made it really easy for us to

840
00:28:00,840 --> 00:28:04,959
fingerprint

841
00:28:02,240 --> 00:28:06,399
so i go back to our database we look for

842
00:28:04,960 --> 00:28:07,760
everything that had the app name let me

843
00:28:06,399 --> 00:28:08,959
go back to it so anything that had the

844
00:28:07,760 --> 00:28:10,960
wxyz

845
00:28:08,960 --> 00:28:12,320
we want that and we want to make sure

846
00:28:10,960 --> 00:28:12,960
it's within that domain that we're

847
00:28:12,320 --> 00:28:16,158
hacking on

848
00:28:12,960 --> 00:28:18,320
on i wish i could disclose as we fed

849
00:28:16,159 --> 00:28:20,320
that to meg and our search tool

850
00:28:18,320 --> 00:28:22,480
and then we see how many more came up

851
00:28:20,320 --> 00:28:23,678
and i think we roughly found about 15 i

852
00:28:22,480 --> 00:28:24,799
know it says exact but i think there

853
00:28:23,679 --> 00:28:26,720
were some other

854
00:28:24,799 --> 00:28:28,000
issues with some of the ip addresses but

855
00:28:26,720 --> 00:28:30,159
out of those 15

856
00:28:28,000 --> 00:28:32,559
12 of them were vulnerable and we can

857
00:28:30,159 --> 00:28:34,240
log into 12 of those with admin admin

858
00:28:32,559 --> 00:28:36,240
each of those had access to different

859
00:28:34,240 --> 00:28:38,240
platforms this thing was being used on

860
00:28:36,240 --> 00:28:39,440
and each of those have different users

861
00:28:38,240 --> 00:28:40,720
with pii

862
00:28:39,440 --> 00:28:43,840
and i think it was roughly about a

863
00:28:40,720 --> 00:28:46,159
million users data that was accessible

864
00:28:43,840 --> 00:28:47,760
and also i think the website had rc by

865
00:28:46,159 --> 00:28:49,919
design i think had some really weird

866
00:28:47,760 --> 00:28:50,879
file uploads some stuff to control

867
00:28:49,919 --> 00:28:53,039
servers

868
00:28:50,880 --> 00:28:53,919
so by default we could have probably rc

869
00:28:53,039 --> 00:28:55,679
this thing

870
00:28:53,919 --> 00:28:57,600
but you know when you're inside an

871
00:28:55,679 --> 00:28:58,960
internal website from a

872
00:28:57,600 --> 00:29:00,158
corporate standpoint you don't want to

873
00:28:58,960 --> 00:29:01,039
push those limits without their

874
00:29:00,159 --> 00:29:03,120
permissions

875
00:29:01,039 --> 00:29:04,879
so we reported them pointed out that hey

876
00:29:03,120 --> 00:29:08,559
there could be rce in here and we let

877
00:29:04,880 --> 00:29:08,559
that team take care of the rest of it

878
00:29:08,640 --> 00:29:13,440
and this one is i think our one of our

879
00:29:10,960 --> 00:29:16,240
last examples and one of my favorites

880
00:29:13,440 --> 00:29:17,520
is where we got to fish for employee

881
00:29:16,240 --> 00:29:19,600
sessions by

882
00:29:17,520 --> 00:29:20,960
looking into hip dumps or heaped i'm

883
00:29:19,600 --> 00:29:22,879
sorry of

884
00:29:20,960 --> 00:29:24,799
this particular company and let me

885
00:29:22,880 --> 00:29:26,320
explain

886
00:29:24,799 --> 00:29:28,240
so let's before we get into that let's

887
00:29:26,320 --> 00:29:30,480
talk about what a heap dump

888
00:29:28,240 --> 00:29:32,240
example looks like how we identify it

889
00:29:30,480 --> 00:29:33,600
and so on so if you go on spring boots

890
00:29:32,240 --> 00:29:34,640
documentation

891
00:29:33,600 --> 00:29:36,399
there are a few things that we

892
00:29:34,640 --> 00:29:37,360
understand there are a few really

893
00:29:36,399 --> 00:29:39,840
interesting endpoints

894
00:29:37,360 --> 00:29:40,879
one is the http trace which provides

895
00:29:39,840 --> 00:29:43,039
information about the

896
00:29:40,880 --> 00:29:44,960
request response exchange so if you send

897
00:29:43,039 --> 00:29:46,960
a request to that website

898
00:29:44,960 --> 00:29:48,000
it pretty much stores it on that

899
00:29:46,960 --> 00:29:50,960
endpoint

900
00:29:48,000 --> 00:29:52,799
both your request and the response and

901
00:29:50,960 --> 00:29:54,960
also you know captures the headers

902
00:29:52,799 --> 00:29:56,399
including the cookies and so on the heap

903
00:29:54,960 --> 00:29:58,399
dump obviously just

904
00:29:56,399 --> 00:29:59,600
it's a heap jump from that applications

905
00:29:58,399 --> 00:30:02,399
jvm

906
00:29:59,600 --> 00:30:04,240
and in the response headers there is a

907
00:30:02,399 --> 00:30:07,600
content type that says

908
00:30:04,240 --> 00:30:10,720
application vnd spring brute

909
00:30:07,600 --> 00:30:13,120
actuator whatever version plus json

910
00:30:10,720 --> 00:30:15,279
so three things that we cared about does

911
00:30:13,120 --> 00:30:17,760
the content type return this

912
00:30:15,279 --> 00:30:18,559
is there a 200 for http trace or heap

913
00:30:17,760 --> 00:30:20,799
dump

914
00:30:18,559 --> 00:30:22,480
if there is we need to export this and

915
00:30:20,799 --> 00:30:24,879
we did so

916
00:30:22,480 --> 00:30:26,880
a big shout out to zlz and zayat these

917
00:30:24,880 --> 00:30:29,440
guys really wanted to own

918
00:30:26,880 --> 00:30:31,200
this megacorp this is one of the biggest

919
00:30:29,440 --> 00:30:32,080
companies i've ever had the pleasure to

920
00:30:31,200 --> 00:30:34,559
hack

921
00:30:32,080 --> 00:30:35,600
and unfortunately i can't disclose who

922
00:30:34,559 --> 00:30:37,200
they are but let's just call them

923
00:30:35,600 --> 00:30:40,080
megacorp for this instance

924
00:30:37,200 --> 00:30:42,480
so we went back we dumped every asset we

925
00:30:40,080 --> 00:30:42,480
could find

926
00:30:42,720 --> 00:30:46,480
and we sprayed http trains against all

927
00:30:45,760 --> 00:30:49,360
domains

928
00:30:46,480 --> 00:30:50,960
we discovered and came across a bunch of

929
00:30:49,360 --> 00:30:54,000
different http traces

930
00:30:50,960 --> 00:30:57,679
and the pattern look like x y z

931
00:30:54,000 --> 00:30:58,960
internal proxide actuator http trace

932
00:30:57,679 --> 00:31:01,039
that was the first one we got to

933
00:30:58,960 --> 00:31:02,880
identify

934
00:31:01,039 --> 00:31:04,399
and this is what the response looked

935
00:31:02,880 --> 00:31:06,559
like so if you can see

936
00:31:04,399 --> 00:31:08,559
you can see that the url there it says

937
00:31:06,559 --> 00:31:09,760
what kind of uh request it was it was a

938
00:31:08,559 --> 00:31:11,678
get request

939
00:31:09,760 --> 00:31:12,879
there was a cookie for the the header

940
00:31:11,679 --> 00:31:14,720
for the cookie

941
00:31:12,880 --> 00:31:16,240
and some other information and you can

942
00:31:14,720 --> 00:31:19,679
see at the bottom right there it says

943
00:31:16,240 --> 00:31:21,519
internal prod mega corp and it was weird

944
00:31:19,679 --> 00:31:24,640
why is it both internal and prod

945
00:31:21,519 --> 00:31:26,480
i want to know more so what can we do

946
00:31:24,640 --> 00:31:28,000
we'll go look for x y z whatever the

947
00:31:26,480 --> 00:31:29,919
application name is

948
00:31:28,000 --> 00:31:31,200
and we want to identify different

949
00:31:29,919 --> 00:31:34,000
permutations

950
00:31:31,200 --> 00:31:34,799
so we identified four other instances

951
00:31:34,000 --> 00:31:36,159
one being

952
00:31:34,799 --> 00:31:38,000
the last one being the one that we

953
00:31:36,159 --> 00:31:39,840
already knew about internal prod

954
00:31:38,000 --> 00:31:41,360
then we realized there's also internal

955
00:31:39,840 --> 00:31:44,000
and there's also prod

956
00:31:41,360 --> 00:31:45,678
and there's also just the app.site.com

957
00:31:44,000 --> 00:31:48,000
without any permutations

958
00:31:45,679 --> 00:31:50,399
so we started brute forcing for actuator

959
00:31:48,000 --> 00:31:51,679
http trace and so on and we came across

960
00:31:50,399 --> 00:31:53,760
these last four

961
00:31:51,679 --> 00:31:56,000
which gave us some credentials and

962
00:31:53,760 --> 00:31:57,360
cookies that we could potentially use

963
00:31:56,000 --> 00:31:59,279
and as i mentioned as you can see on the

964
00:31:57,360 --> 00:32:01,199
screen these were a little bit useless

965
00:31:59,279 --> 00:32:04,240
because we couldn't use this

966
00:32:01,200 --> 00:32:06,399
the set of cookies that was given to us

967
00:32:04,240 --> 00:32:08,080
initially but there was something there

968
00:32:06,399 --> 00:32:09,439
we can't just let this go by itself

969
00:32:08,080 --> 00:32:12,879
there's got to be more

970
00:32:09,440 --> 00:32:14,559
stuff coming in so we decided

971
00:32:12,880 --> 00:32:16,240
to look for other endpoints let's forget

972
00:32:14,559 --> 00:32:16,960
about actuator let's forget about heap

973
00:32:16,240 --> 00:32:18,640
dump

974
00:32:16,960 --> 00:32:20,799
are there other things being hosted on

975
00:32:18,640 --> 00:32:22,320
this site and we we found that so the

976
00:32:20,799 --> 00:32:23,840
first one was we found this thing a

977
00:32:22,320 --> 00:32:25,678
folder called core app

978
00:32:23,840 --> 00:32:27,360
we found a folder called application we

979
00:32:25,679 --> 00:32:29,679
found a folder called viewer

980
00:32:27,360 --> 00:32:31,840
and then we found a folder called xyz

981
00:32:29,679 --> 00:32:32,880
services where xyz is this name on the

982
00:32:31,840 --> 00:32:35,279
subdomain

983
00:32:32,880 --> 00:32:36,320
that we had and it just had its own

984
00:32:35,279 --> 00:32:38,080
folder

985
00:32:36,320 --> 00:32:40,158
within it and within all of those

986
00:32:38,080 --> 00:32:42,080
folders we came across more actuators

987
00:32:40,159 --> 00:32:45,039
more heap dumps and more http traces

988
00:32:42,080 --> 00:32:47,678
that had more data in it

989
00:32:45,039 --> 00:32:48,480
so once we were able to collect all that

990
00:32:47,679 --> 00:32:51,120
data we

991
00:32:48,480 --> 00:32:53,039
queried for every single heap dump we

992
00:32:51,120 --> 00:32:54,399
collected every single http trace

993
00:32:53,039 --> 00:32:56,559
we collected everything that had the

994
00:32:54,399 --> 00:32:58,559
keyword cookie in it then we started to

995
00:32:56,559 --> 00:33:00,320
load these cookies into our burp

996
00:32:58,559 --> 00:33:02,240
and started to match and replace and

997
00:33:00,320 --> 00:33:04,000
we're actually able to

998
00:33:02,240 --> 00:33:06,880
eventually log into an externally

999
00:33:04,000 --> 00:33:08,480
exposed internal asset owned by this

1000
00:33:06,880 --> 00:33:10,320
megacorp

1001
00:33:08,480 --> 00:33:11,919
as you can see here we will log into

1002
00:33:10,320 --> 00:33:13,360
some internal site where they had almost

1003
00:33:11,919 --> 00:33:16,399
all the employees data

1004
00:33:13,360 --> 00:33:19,039
we were able to edit the activate delete

1005
00:33:16,399 --> 00:33:19,518
uh this one was some sales website i

1006
00:33:19,039 --> 00:33:20,960
believe

1007
00:33:19,519 --> 00:33:22,880
we didn't want to dig into it too much

1008
00:33:20,960 --> 00:33:25,200
we left it alone as it was

1009
00:33:22,880 --> 00:33:26,399
um this is another one i can't explain

1010
00:33:25,200 --> 00:33:28,320
really what this one was

1011
00:33:26,399 --> 00:33:30,000
unfortunately but these were all

1012
00:33:28,320 --> 00:33:32,000
internal tools that we had got

1013
00:33:30,000 --> 00:33:34,000
access to but there's a lot of lesson

1014
00:33:32,000 --> 00:33:37,360
learned here if you come across

1015
00:33:34,000 --> 00:33:38,960
a heap dump for example or an http trace

1016
00:33:37,360 --> 00:33:40,479
stop brute forcing so you can monitor

1017
00:33:38,960 --> 00:33:42,559
for cookies take a break

1018
00:33:40,480 --> 00:33:43,919
come back the next morning hoping that

1019
00:33:42,559 --> 00:33:46,559
it's still there

1020
00:33:43,919 --> 00:33:48,080
and make sure you monitor for it as you

1021
00:33:46,559 --> 00:33:50,000
can see here zlz is like hey

1022
00:33:48,080 --> 00:33:51,600
is anyone directory brute forcing yup

1023
00:33:50,000 --> 00:33:53,440
it's ben i can see all his

1024
00:33:51,600 --> 00:33:55,279
requests going in live can you stop so

1025
00:33:53,440 --> 00:33:57,360
we can uh wait for these

1026
00:33:55,279 --> 00:33:59,519
companies uh employees to log in and

1027
00:33:57,360 --> 00:34:01,760
capture a set of credentials

1028
00:33:59,519 --> 00:34:03,519
and then we also realized this isn't the

1029
00:34:01,760 --> 00:34:05,200
only place that uses this i've seen this

1030
00:34:03,519 --> 00:34:07,279
a number of time on other places

1031
00:34:05,200 --> 00:34:08,639
so let's go back and scan a few other

1032
00:34:07,279 --> 00:34:11,760
organizations

1033
00:34:08,639 --> 00:34:13,440
and see if we can find more results and

1034
00:34:11,760 --> 00:34:14,399
of course we were able to find a few

1035
00:34:13,440 --> 00:34:16,560
other ones

1036
00:34:14,399 --> 00:34:18,638
as you can see on the screen that gave

1037
00:34:16,560 --> 00:34:20,000
us some really good vulnerabilities

1038
00:34:18,639 --> 00:34:21,359
i'm going to switch over to tanner and

1039
00:34:20,000 --> 00:34:22,719
let him talk about some of the cool

1040
00:34:21,359 --> 00:34:24,319
stuff that came out of this research

1041
00:34:22,719 --> 00:34:25,589
some of the tools and releases that we

1042
00:34:24,320 --> 00:34:28,560
have done

1043
00:34:25,590 --> 00:34:31,520
[Music]

1044
00:34:28,560 --> 00:34:31,520
awesome yeah thanks

1045
00:34:32,239 --> 00:34:38,560
so we are going to release two

1046
00:34:35,520 --> 00:34:40,000
tools that we use internally with our

1047
00:34:38,560 --> 00:34:42,320
scans that we talked about previously

1048
00:34:40,000 --> 00:34:45,520
right so we have go fingerprint which

1049
00:34:42,320 --> 00:34:47,280
allows you to supply a json file with

1050
00:34:45,520 --> 00:34:50,079
your fingerprints

1051
00:34:47,280 --> 00:34:51,919
and then a list of urls to test them

1052
00:34:50,079 --> 00:34:54,079
against and you see in that top right

1053
00:34:51,918 --> 00:34:56,158
what the output looks like you'll get

1054
00:34:54,079 --> 00:34:57,839
the url that matched a fingerprint a

1055
00:34:56,159 --> 00:34:59,839
colon and then the fingerprint that it

1056
00:34:57,839 --> 00:35:02,078
matched

1057
00:34:59,839 --> 00:35:03,359
the second one is v host scan so it

1058
00:35:02,079 --> 00:35:06,960
takes a

1059
00:35:03,359 --> 00:35:08,000
common delimited file a comma delineated

1060
00:35:06,960 --> 00:35:11,359
file excuse me

1061
00:35:08,000 --> 00:35:14,800
of the host name the ip address

1062
00:35:11,359 --> 00:35:16,000
and the port and then for those lines it

1063
00:35:14,800 --> 00:35:18,800
will test for those

1064
00:35:16,000 --> 00:35:21,599
three different access variations with

1065
00:35:18,800 --> 00:35:24,960
the host name with the ip address

1066
00:35:21,599 --> 00:35:25,920
and a localhost host header and then it

1067
00:35:24,960 --> 00:35:28,960
will turn you

1068
00:35:25,920 --> 00:35:32,560
a json file containing all of those

1069
00:35:28,960 --> 00:35:35,599
targets with the host

1070
00:35:32,560 --> 00:35:37,839
the uh excuse me the

1071
00:35:35,599 --> 00:35:39,280
status code and the response length for

1072
00:35:37,839 --> 00:35:41,680
those three checks

1073
00:35:39,280 --> 00:35:43,280
that you can use to diff the the

1074
00:35:41,680 --> 00:35:46,160
differences of to try to find some

1075
00:35:43,280 --> 00:35:46,160
vulnerable targets

1076
00:35:48,000 --> 00:35:54,480
as well as those two tools we have also

1077
00:35:51,440 --> 00:35:58,000
this is going on month two of

1078
00:35:54,480 --> 00:35:59,040
recon dev our site for being able to

1079
00:35:58,000 --> 00:36:02,800
access the scan

1080
00:35:59,040 --> 00:36:04,320
data so we're up to 300 million plus ip

1081
00:36:02,800 --> 00:36:06,400
addresses that we're targeting again

1082
00:36:04,320 --> 00:36:08,960
across those 12 ports

1083
00:36:06,400 --> 00:36:10,720
we update the data weekly we also have

1084
00:36:08,960 --> 00:36:12,000
plans as we kind of move along to

1085
00:36:10,720 --> 00:36:13,919
possibly updating this data

1086
00:36:12,000 --> 00:36:16,240
more frequent frequently but for now

1087
00:36:13,920 --> 00:36:19,040
these targets are updated weekly

1088
00:36:16,240 --> 00:36:21,359
allows you to query one domain at a time

1089
00:36:19,040 --> 00:36:24,320
and you'll return

1090
00:36:21,359 --> 00:36:25,119
the data in the json array with the ip

1091
00:36:24,320 --> 00:36:28,000
address

1092
00:36:25,119 --> 00:36:29,520
the port that it was found on any domain

1093
00:36:28,000 --> 00:36:30,079
names from the certificates that were

1094
00:36:29,520 --> 00:36:32,160
scanned

1095
00:36:30,079 --> 00:36:33,440
along with some other data that we might

1096
00:36:32,160 --> 00:36:37,200
be making live here

1097
00:36:33,440 --> 00:36:37,760
shortly this is accessible through the

1098
00:36:37,200 --> 00:36:39,680
site

1099
00:36:37,760 --> 00:36:40,880
sorry about that it is accessible by the

1100
00:36:39,680 --> 00:36:44,720
site or through

1101
00:36:40,880 --> 00:36:46,480
a cli api off of

1102
00:36:44,720 --> 00:36:48,078
just through curling or through python

1103
00:36:46,480 --> 00:36:48,800
or however you want to actually access

1104
00:36:48,079 --> 00:36:50,160
the data

1105
00:36:48,800 --> 00:36:52,640
using it through the site is not

1106
00:36:50,160 --> 00:36:52,640
required

1107
00:36:53,680 --> 00:36:56,879
awesome thank you tanner let's stop this

1108
00:36:55,440 --> 00:36:58,640
up really quickly there are some things

1109
00:36:56,880 --> 00:37:01,599
i want to address before

1110
00:36:58,640 --> 00:37:03,118
we uh end this talk first of all if

1111
00:37:01,599 --> 00:37:04,320
you're getting into bug bounties please

1112
00:37:03,119 --> 00:37:05,359
please please take the time to

1113
00:37:04,320 --> 00:37:07,520
understand your target

1114
00:37:05,359 --> 00:37:09,440
understand how to deploy things where

1115
00:37:07,520 --> 00:37:11,119
they do them how they do it

1116
00:37:09,440 --> 00:37:13,040
look for patterns look for patterns of

1117
00:37:11,119 --> 00:37:14,720
mistakes and abuse those as much as you

1118
00:37:13,040 --> 00:37:16,480
can

1119
00:37:14,720 --> 00:37:17,919
familiarize yourself with all these

1120
00:37:16,480 --> 00:37:19,200
things that you see frequently it could

1121
00:37:17,920 --> 00:37:20,560
be a particular app it could be a

1122
00:37:19,200 --> 00:37:22,560
particular backend

1123
00:37:20,560 --> 00:37:24,078
whatever that is insert locally mess

1124
00:37:22,560 --> 00:37:25,599
with it understand it

1125
00:37:24,079 --> 00:37:27,359
get really good at fingerprinting if you

1126
00:37:25,599 --> 00:37:28,800
want to get into the recon thing

1127
00:37:27,359 --> 00:37:30,640
understand how to fingerprint things so

1128
00:37:28,800 --> 00:37:32,000
you can identify him on the fly as

1129
00:37:30,640 --> 00:37:33,920
you're scanning things

1130
00:37:32,000 --> 00:37:35,760
and of course last but not least create

1131
00:37:33,920 --> 00:37:37,280
a good database of acid you can hack on

1132
00:37:35,760 --> 00:37:39,760
it doesn't have to be

1133
00:37:37,280 --> 00:37:40,320
um you have to overdo it like this like

1134
00:37:39,760 --> 00:37:42,160
we have

1135
00:37:40,320 --> 00:37:43,680
but have a text file have somewhere

1136
00:37:42,160 --> 00:37:46,078
where you store all your data

1137
00:37:43,680 --> 00:37:48,399
your historic data and always go back to

1138
00:37:46,079 --> 00:37:50,160
it and look for differences between your

1139
00:37:48,400 --> 00:37:51,760
last scan your current scan

1140
00:37:50,160 --> 00:37:54,879
that could be very very helpful if you

1141
00:37:51,760 --> 00:37:56,240
want to become successful in bug hunting

1142
00:37:54,880 --> 00:37:58,240
a lot of the things that i've mentioned

1143
00:37:56,240 --> 00:38:00,560
during the examples retainer

1144
00:37:58,240 --> 00:38:02,799
um aren't things that are super new

1145
00:38:00,560 --> 00:38:04,640
again when we were doing this research

1146
00:38:02,800 --> 00:38:05,839
we did this research in three months we

1147
00:38:04,640 --> 00:38:07,520
were going to do it for a year

1148
00:38:05,839 --> 00:38:08,799
we cut it down to three months because

1149
00:38:07,520 --> 00:38:09,359
we wanted to get ahead of it a little

1150
00:38:08,800 --> 00:38:10,960
bit

1151
00:38:09,359 --> 00:38:12,799
so we wanted to look for low-hanging

1152
00:38:10,960 --> 00:38:15,280
fruits and we did

1153
00:38:12,800 --> 00:38:16,079
but think about it from a adversary's

1154
00:38:15,280 --> 00:38:17,599
point of view

1155
00:38:16,079 --> 00:38:19,119
for example when we had access to those

1156
00:38:17,599 --> 00:38:20,960
internal assets from the mega

1157
00:38:19,119 --> 00:38:22,320
corp we could have just started our own

1158
00:38:20,960 --> 00:38:24,320
campaign within

1159
00:38:22,320 --> 00:38:25,920
uh being internal on that company's

1160
00:38:24,320 --> 00:38:27,440
internal network on their internal

1161
00:38:25,920 --> 00:38:30,160
assets and applications

1162
00:38:27,440 --> 00:38:30,640
and see how far that could go the second

1163
00:38:30,160 --> 00:38:32,399
thing is

1164
00:38:30,640 --> 00:38:34,560
don't just collect assets and data and

1165
00:38:32,400 --> 00:38:35,280
pay them spray them with generic word

1166
00:38:34,560 --> 00:38:37,359
list

1167
00:38:35,280 --> 00:38:38,560
there's a lot of times where you can go

1168
00:38:37,359 --> 00:38:40,000
into an application

1169
00:38:38,560 --> 00:38:42,320
you need to be logged in before you can

1170
00:38:40,000 --> 00:38:45,920
do anything to it so dig deep

1171
00:38:42,320 --> 00:38:47,760
go into there log in sign up log in and

1172
00:38:45,920 --> 00:38:49,839
do your recon within

1173
00:38:47,760 --> 00:38:51,359
your session and not just automate it

1174
00:38:49,839 --> 00:38:52,960
where you just throw things at it and

1175
00:38:51,359 --> 00:38:56,640
hope something comes back

1176
00:38:52,960 --> 00:38:58,160
now a lot of times again you want to

1177
00:38:56,640 --> 00:38:59,920
understand your application and you want

1178
00:38:58,160 --> 00:39:03,440
to understand that site and that's going

1179
00:38:59,920 --> 00:39:05,119
to take you the longest way possible

1180
00:39:03,440 --> 00:39:06,960
and there's a lot of hate and there's a

1181
00:39:05,119 --> 00:39:08,160
lot of criticism for bug bounties

1182
00:39:06,960 --> 00:39:09,440
but i'm going to tell you this from

1183
00:39:08,160 --> 00:39:10,480
someone who's been doing bug boundaries

1184
00:39:09,440 --> 00:39:12,400
for years

1185
00:39:10,480 --> 00:39:14,720
you're only going to get back what you

1186
00:39:12,400 --> 00:39:17,119
put in so if you want to

1187
00:39:14,720 --> 00:39:18,399
become good at bug hunting find bugs

1188
00:39:17,119 --> 00:39:20,720
with actual impact

1189
00:39:18,400 --> 00:39:22,160
forget about best practices forget about

1190
00:39:20,720 --> 00:39:22,959
missing headers forget about all that

1191
00:39:22,160 --> 00:39:25,680
stuff

1192
00:39:22,960 --> 00:39:27,680
find ways you can either own a customer

1193
00:39:25,680 --> 00:39:30,319
on a user on that side

1194
00:39:27,680 --> 00:39:32,240
or own that company's infrastructure and

1195
00:39:30,320 --> 00:39:34,000
again i've said this a million times

1196
00:39:32,240 --> 00:39:36,078
spend time learning your targets

1197
00:39:34,000 --> 00:39:37,200
behaviors and make sure you understand

1198
00:39:36,079 --> 00:39:38,640
how they operate

1199
00:39:37,200 --> 00:39:41,279
and this is just a meme i wanted to

1200
00:39:38,640 --> 00:39:43,040
throw out there there was a lot of

1201
00:39:41,280 --> 00:39:44,640
really good vulnerabilities i've talked

1202
00:39:43,040 --> 00:39:46,480
about patterns a lot

1203
00:39:44,640 --> 00:39:47,839
you see the semicolon pattern there's a

1204
00:39:46,480 --> 00:39:48,880
lot of good tips about it there was a

1205
00:39:47,839 --> 00:39:50,960
lot of good

1206
00:39:48,880 --> 00:39:52,560
uh research that came out because of it

1207
00:39:50,960 --> 00:39:54,640
path normalization is really really good

1208
00:39:52,560 --> 00:39:56,240
i highly recommend watching orange size

1209
00:39:54,640 --> 00:39:58,400
talk on this from a few years ago at

1210
00:39:56,240 --> 00:39:59,200
defcon but i wanted to throw that out

1211
00:39:58,400 --> 00:40:01,440
there because

1212
00:39:59,200 --> 00:40:03,040
we did some stuff with it at uh in mass

1213
00:40:01,440 --> 00:40:05,200
with all the data we had

1214
00:40:03,040 --> 00:40:07,599
and there was a lot to be done with this

1215
00:40:05,200 --> 00:40:09,759
kind of vulnerabilities

1216
00:40:07,599 --> 00:40:11,200
and last but not least i want to say a

1217
00:40:09,760 --> 00:40:14,240
huge thank you to zayat

1218
00:40:11,200 --> 00:40:15,839
zlz donut pointer tom nom nom erb sam

1219
00:40:14,240 --> 00:40:16,560
ryan raider and of course tanner for

1220
00:40:15,839 --> 00:40:19,119
being a

1221
00:40:16,560 --> 00:40:20,960
great partner in crime and thank you all

1222
00:40:19,119 --> 00:40:21,920
for watching this talk and we appreciate

1223
00:40:20,960 --> 00:40:25,839
you

1224
00:40:21,920 --> 00:40:25,839
thanks guys

