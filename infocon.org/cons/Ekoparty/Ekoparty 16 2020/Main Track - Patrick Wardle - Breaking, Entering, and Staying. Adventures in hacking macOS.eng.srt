1
00:00:05,759 --> 00:00:11,040
patrick world presents

2
00:00:07,759 --> 00:00:14,639
wrecking and running and staying

3
00:00:11,040 --> 00:00:17,198
adventures in hacking mac os

4
00:00:14,639 --> 00:00:19,919
attackers have been taggering mac user

5
00:00:17,199 --> 00:00:23,760
with malice's office documents

6
00:00:19,920 --> 00:00:26,560
but things call have been a lot worse

7
00:00:23,760 --> 00:00:26,880
once they have access to a mac what can

8
00:00:26,560 --> 00:00:30,320
they

9
00:00:26,880 --> 00:00:31,919
install 2020 sold the first two computer

10
00:00:30,320 --> 00:00:36,480
gurus infecting max

11
00:00:31,920 --> 00:00:36,480
intrigue let's tear it apart

12
00:00:40,719 --> 00:00:44,000
all right aloha and welcome to my talk

13
00:00:43,200 --> 00:00:47,039
breaking

14
00:00:44,000 --> 00:00:50,000
entering and then staying my name

15
00:00:47,039 --> 00:00:52,320
is patrick wardle i am a principal

16
00:00:50,000 --> 00:00:55,120
security researcher at jamf

17
00:00:52,320 --> 00:00:56,840
and also the creator of the mac security

18
00:00:55,120 --> 00:01:01,519
website and tool suite

19
00:00:56,840 --> 00:01:04,080
objective-c so today's talk is kind of

20
00:01:01,520 --> 00:01:04,960
broken up into three parts or three

21
00:01:04,080 --> 00:01:06,960
chapters

22
00:01:04,959 --> 00:01:08,559
so we're gonna start with chapter one

23
00:01:06,960 --> 00:01:11,439
and we're going to detail

24
00:01:08,560 --> 00:01:13,119
recent attacks targeting mac users we'll

25
00:01:11,439 --> 00:01:15,839
see that these attacks

26
00:01:13,119 --> 00:01:17,439
leverage macro laced documents and we're

27
00:01:15,840 --> 00:01:19,520
also then going to discuss

28
00:01:17,439 --> 00:01:21,360
how we can go about analyzing these

29
00:01:19,520 --> 00:01:23,600
malicious documents

30
00:01:21,360 --> 00:01:26,479
we're then going to discuss a document

31
00:01:23,600 --> 00:01:29,520
based exploit chain that i created

32
00:01:26,479 --> 00:01:32,320
that combines what was at the time a few

33
00:01:29,520 --> 00:01:33,679
zero-day vulnerabilities to bypass the

34
00:01:32,320 --> 00:01:36,960
sandbox and apple's

35
00:01:33,680 --> 00:01:38,799
latest security mechanisms so now we

36
00:01:36,960 --> 00:01:42,000
have the ability to hack max

37
00:01:38,799 --> 00:01:42,479
the question is what can we or attackers

38
00:01:42,000 --> 00:01:45,360
do

39
00:01:42,479 --> 00:01:46,079
to maintain persistent access so in

40
00:01:45,360 --> 00:01:48,399
chapter two

41
00:01:46,079 --> 00:01:49,119
we're going to talk about an intriguing

42
00:01:48,399 --> 00:01:51,119
piece of

43
00:01:49,119 --> 00:01:53,600
malware that was recently captured in

44
00:01:51,119 --> 00:01:56,799
the wild that is perhaps the first

45
00:01:53,600 --> 00:01:58,798
true computer virus targeting mac os

46
00:01:56,799 --> 00:02:00,240
and honestly it would make a rather

47
00:01:58,799 --> 00:02:03,600
excellent payload for

48
00:02:00,240 --> 00:02:04,960
our document based attack finally

49
00:02:03,600 --> 00:02:06,839
we're gonna wrap everything up in

50
00:02:04,960 --> 00:02:09,840
chapter three and we're gonna talk about

51
00:02:06,840 --> 00:02:11,840
defense discussing generic methods for

52
00:02:09,840 --> 00:02:15,120
detecting and thwarting both

53
00:02:11,840 --> 00:02:18,160
exploits and malware so

54
00:02:15,120 --> 00:02:18,879
let's dive in starting by looking at how

55
00:02:18,160 --> 00:02:22,079
we could hack

56
00:02:18,879 --> 00:02:23,200
mac os via malicious macro laced office

57
00:02:22,080 --> 00:02:25,200
documents

58
00:02:23,200 --> 00:02:27,200
i'm going to note some trends talk about

59
00:02:25,200 --> 00:02:29,359
some in the wild attacks

60
00:02:27,200 --> 00:02:31,440
targeting mac users and then discuss a

61
00:02:29,360 --> 00:02:34,879
neat exploit chain that was

62
00:02:31,440 --> 00:02:35,599
able to fully uh infect a fully patched

63
00:02:34,879 --> 00:02:38,959
mac os

64
00:02:35,599 --> 00:02:39,440
system all right before we dive in

65
00:02:38,959 --> 00:02:43,040
though

66
00:02:39,440 --> 00:02:46,079
what is a macro so i've added the

67
00:02:43,040 --> 00:02:47,040
official definition from microsoft on

68
00:02:46,080 --> 00:02:50,080
the slide

69
00:02:47,040 --> 00:02:52,879
but in short a macro is embedded

70
00:02:50,080 --> 00:02:54,160
executable code in microsoft office

71
00:02:52,879 --> 00:02:57,120
documents

72
00:02:54,160 --> 00:02:58,720
in other words it allows one to add code

73
00:02:57,120 --> 00:03:00,959
to a document

74
00:02:58,720 --> 00:03:01,920
so here for example as we can see on the

75
00:03:00,959 --> 00:03:04,800
slide

76
00:03:01,920 --> 00:03:05,518
we've inserted a macro into a word

77
00:03:04,800 --> 00:03:08,159
document

78
00:03:05,519 --> 00:03:09,680
that will display a pop-up that says

79
00:03:08,159 --> 00:03:12,159
hello world

80
00:03:09,680 --> 00:03:15,040
and we'll talk about this more but as

81
00:03:12,159 --> 00:03:18,239
we've placed this macro within the auto

82
00:03:15,040 --> 00:03:19,040
open subroutine if the user has macros

83
00:03:18,239 --> 00:03:21,200
enabled

84
00:03:19,040 --> 00:03:22,640
this will be automatically executed when

85
00:03:21,200 --> 00:03:25,679
the document is opened

86
00:03:22,640 --> 00:03:25,679
as we can see on the slide

87
00:03:25,760 --> 00:03:28,959
now from a security point of view

88
00:03:28,319 --> 00:03:31,119
allowing

89
00:03:28,959 --> 00:03:33,040
executable code to be placed in

90
00:03:31,120 --> 00:03:36,080
microsoft office documents

91
00:03:33,040 --> 00:03:38,560
has proved to be a terrible idea

92
00:03:36,080 --> 00:03:39,680
which attackers have unfortunately

93
00:03:38,560 --> 00:03:42,720
abused for

94
00:03:39,680 --> 00:03:45,440
years for decades in fact the

95
00:03:42,720 --> 00:03:46,480
infamous melissa virus that targeted

96
00:03:45,440 --> 00:03:50,159
windows systems

97
00:03:46,480 --> 00:03:53,280
all the way back in 1999 was yes

98
00:03:50,159 --> 00:03:56,319
you guessed it a macro virus

99
00:03:53,280 --> 00:03:59,920
now microsoft since then has added some

100
00:03:56,319 --> 00:04:00,879
mitigation such as alerts in sandboxing

101
00:03:59,920 --> 00:04:03,599
but as we'll see

102
00:04:00,879 --> 00:04:04,079
this really hasn't fully mitigated macro

103
00:04:03,599 --> 00:04:07,679
based

104
00:04:04,080 --> 00:04:09,360
threats now if you're familiar with

105
00:04:07,680 --> 00:04:11,360
macro based attacks

106
00:04:09,360 --> 00:04:12,400
you probably are familiar with them in

107
00:04:11,360 --> 00:04:14,640
the context of

108
00:04:12,400 --> 00:04:15,439
windows based computers and this is

109
00:04:14,640 --> 00:04:17,759
definitely true

110
00:04:15,439 --> 00:04:18,560
traditionally macro based attacks have

111
00:04:17,759 --> 00:04:22,079
targeted

112
00:04:18,560 --> 00:04:25,120
windows systems due to two main reasons

113
00:04:22,079 --> 00:04:26,000
first macros are essentially a microsoft

114
00:04:25,120 --> 00:04:27,919
creation

115
00:04:26,000 --> 00:04:29,280
and thus generally only work in

116
00:04:27,919 --> 00:04:32,400
microsoft products

117
00:04:29,280 --> 00:04:33,198
that is to say apple office applications

118
00:04:32,400 --> 00:04:36,719
such as

119
00:04:33,199 --> 00:04:39,600
pages or numbers don't run macro code

120
00:04:36,720 --> 00:04:40,479
also windows computers at least in the

121
00:04:39,600 --> 00:04:42,960
past were

122
00:04:40,479 --> 00:04:44,159
far more common far more prevalent

123
00:04:42,960 --> 00:04:46,960
especially in the

124
00:04:44,160 --> 00:04:48,160
enterprise however this is all changing

125
00:04:46,960 --> 00:04:50,159
especially in the

126
00:04:48,160 --> 00:04:51,440
commercial and startup space mac

127
00:04:50,160 --> 00:04:54,240
computers are

128
00:04:51,440 --> 00:04:55,520
everywhere so in short there are now

129
00:04:54,240 --> 00:04:58,000
more mac computers

130
00:04:55,520 --> 00:04:59,520
running microsoft office which makes a

131
00:04:58,000 --> 00:05:03,039
lot more targets for

132
00:04:59,520 --> 00:05:05,280
opportunistic hackers

133
00:05:03,039 --> 00:05:07,520
so now let's look at some recent attacks

134
00:05:05,280 --> 00:05:10,000
targeting mac users

135
00:05:07,520 --> 00:05:10,639
focusing on attacks that leveraged macro

136
00:05:10,000 --> 00:05:13,600
laced

137
00:05:10,639 --> 00:05:14,320
documents so first we'll kind of give a

138
00:05:13,600 --> 00:05:16,320
high level

139
00:05:14,320 --> 00:05:18,240
overview of each attack and then we'll

140
00:05:16,320 --> 00:05:20,639
dive into discussing how to

141
00:05:18,240 --> 00:05:21,360
extract and analyze their malicious

142
00:05:20,639 --> 00:05:23,039
payloads

143
00:05:21,360 --> 00:05:24,880
the idea is really to gain a deeper

144
00:05:23,039 --> 00:05:26,960
understanding of these attacks

145
00:05:24,880 --> 00:05:28,719
and also to talk about the tools and

146
00:05:26,960 --> 00:05:30,638
techniques so if you come across

147
00:05:28,720 --> 00:05:33,360
such a document you now have the ability

148
00:05:30,639 --> 00:05:36,240
to analyze these yourself

149
00:05:33,360 --> 00:05:37,039
so we're gonna start in 2017 we have a

150
00:05:36,240 --> 00:05:39,360
document

151
00:05:37,039 --> 00:05:40,400
whose title makes it appear to be about

152
00:05:39,360 --> 00:05:43,360
trump's rather

153
00:05:40,400 --> 00:05:44,400
well unfortunate election victory and if

154
00:05:43,360 --> 00:05:47,680
the document is

155
00:05:44,400 --> 00:05:49,599
open it's really not about the election

156
00:05:47,680 --> 00:05:52,000
but rather something malicious

157
00:05:49,600 --> 00:05:54,080
and so if the users click enable macros

158
00:05:52,000 --> 00:05:56,880
the system will actually become infected

159
00:05:54,080 --> 00:05:58,880
because this is a malicious document

160
00:05:56,880 --> 00:06:00,479
moving on to 2018 we have another

161
00:05:58,880 --> 00:06:01,520
malicious document this one though

162
00:06:00,479 --> 00:06:03,919
appears to be about

163
00:06:01,520 --> 00:06:05,280
bitcoin which was a very hot topic at a

164
00:06:03,919 --> 00:06:07,440
time you can imagine

165
00:06:05,280 --> 00:06:09,039
if someone sends this document to you

166
00:06:07,440 --> 00:06:11,120
perhaps you might open it

167
00:06:09,039 --> 00:06:13,599
and unfortunately if you opened this

168
00:06:11,120 --> 00:06:16,720
document and allowed the macros to run

169
00:06:13,600 --> 00:06:17,520
your system would be infected now we'll

170
00:06:16,720 --> 00:06:19,600
dig into this

171
00:06:17,520 --> 00:06:20,799
document a little more but the most

172
00:06:19,600 --> 00:06:24,160
interesting aspect

173
00:06:20,800 --> 00:06:26,560
of this attack was embedded exploit code

174
00:06:24,160 --> 00:06:27,600
that was designed to bypass office

175
00:06:26,560 --> 00:06:29,120
sandbox so this is

176
00:06:27,600 --> 00:06:31,039
one of the more sophisticated attacks

177
00:06:29,120 --> 00:06:33,360
we've seen

178
00:06:31,039 --> 00:06:35,120
next up if we move to 2019 we have a

179
00:06:33,360 --> 00:06:38,319
malicious document from the

180
00:06:35,120 --> 00:06:39,199
prolific lazarus apt group lazarus group

181
00:06:38,319 --> 00:06:41,919
is generally

182
00:06:39,199 --> 00:06:43,120
associated with the north koreans so

183
00:06:41,919 --> 00:06:46,000
this is kind of interesting

184
00:06:43,120 --> 00:06:48,400
mostly because it shows the fact that

185
00:06:46,000 --> 00:06:51,440
apt groups are jumping on the

186
00:06:48,400 --> 00:06:54,000
hey let's target mac os via these macros

187
00:06:51,440 --> 00:06:55,120
bandwagon again if the user opens this

188
00:06:54,000 --> 00:06:58,000
malicious document

189
00:06:55,120 --> 00:06:58,720
clicks allow to enable macros the system

190
00:06:58,000 --> 00:07:02,720
will be

191
00:06:58,720 --> 00:07:05,520
infected so now let's discuss methods of

192
00:07:02,720 --> 00:07:06,160
analyzing such documents showing exactly

193
00:07:05,520 --> 00:07:09,359
how to

194
00:07:06,160 --> 00:07:12,319
extract the embedded macros and analog

195
00:07:09,360 --> 00:07:14,400
analyze them this macro code and any

196
00:07:12,319 --> 00:07:16,560
payloads

197
00:07:14,400 --> 00:07:18,400
so the first thing is we obviously have

198
00:07:16,560 --> 00:07:20,960
to have the ability to

199
00:07:18,400 --> 00:07:22,318
extract the embedded macro code now due

200
00:07:20,960 --> 00:07:24,638
to time constraints we're not really

201
00:07:22,319 --> 00:07:27,039
going to get into the low-level details

202
00:07:24,639 --> 00:07:28,880
of microsoft office documents

203
00:07:27,039 --> 00:07:30,960
specifically their file format

204
00:07:28,880 --> 00:07:32,240
it's really beyond the scope of the talk

205
00:07:30,960 --> 00:07:33,840
but the good news is

206
00:07:32,240 --> 00:07:35,440
you don't really have to worry about

207
00:07:33,840 --> 00:07:37,119
them anyways

208
00:07:35,440 --> 00:07:38,639
turns out there's several great tools

209
00:07:37,120 --> 00:07:41,599
available to extract

210
00:07:38,639 --> 00:07:42,319
embedded macros for you awesome my

211
00:07:41,599 --> 00:07:45,120
favorite is

212
00:07:42,319 --> 00:07:46,720
a python package called ole tools that's

213
00:07:45,120 --> 00:07:49,120
available on github

214
00:07:46,720 --> 00:07:50,000
we can see on the slide if you download

215
00:07:49,120 --> 00:07:53,039
the package

216
00:07:50,000 --> 00:07:53,520
and execute the ole vba command with the

217
00:07:53,039 --> 00:07:56,159
dash

218
00:07:53,520 --> 00:07:58,080
c parameter and then give it the path to

219
00:07:56,160 --> 00:07:58,960
the document that you think has embedded

220
00:07:58,080 --> 00:08:01,199
macros

221
00:07:58,960 --> 00:08:03,039
the tool will parse the document and

222
00:08:01,199 --> 00:08:06,479
extract and dump any

223
00:08:03,039 --> 00:08:08,240
embedded macros for us this is great

224
00:08:06,479 --> 00:08:10,400
also there are various online websites

225
00:08:08,240 --> 00:08:11,840
that you can upload a document to and if

226
00:08:10,400 --> 00:08:14,159
it's malicious and has this

227
00:08:11,840 --> 00:08:15,679
embedded code the website will extract

228
00:08:14,160 --> 00:08:19,120
that

229
00:08:15,680 --> 00:08:20,400
macro code for you so now we understand

230
00:08:19,120 --> 00:08:23,440
how to extract

231
00:08:20,400 --> 00:08:25,198
embedded macro code let's return to some

232
00:08:23,440 --> 00:08:26,560
of the malicious documents we talked

233
00:08:25,199 --> 00:08:29,120
about earlier

234
00:08:26,560 --> 00:08:30,240
and briefly discussed discuss and look

235
00:08:29,120 --> 00:08:33,679
at their malicious

236
00:08:30,240 --> 00:08:37,360
payloads so starting a document from

237
00:08:33,679 --> 00:08:37,919
believers 2017 we can use the ole vba

238
00:08:37,360 --> 00:08:39,919
command

239
00:08:37,919 --> 00:08:41,519
and as we mentioned we can extract any

240
00:08:39,919 --> 00:08:43,598
embedded macros

241
00:08:41,519 --> 00:08:44,640
as we can see on the slide we now have

242
00:08:43,599 --> 00:08:48,720
the output

243
00:08:44,640 --> 00:08:51,680
from this and we can see a subroutine

244
00:08:48,720 --> 00:08:53,440
in the macro call code called fischer

245
00:08:51,680 --> 00:08:56,160
and this is invoked via the auto

246
00:08:53,440 --> 00:08:57,839
open method the auto open method is a

247
00:08:56,160 --> 00:09:01,120
microsoft api

248
00:08:57,839 --> 00:09:02,800
and as its name implies code within the

249
00:09:01,120 --> 00:09:04,959
auto open subroutine will be

250
00:09:02,800 --> 00:09:07,839
automatically executed

251
00:09:04,959 --> 00:09:09,518
anytime the document is opened if and

252
00:09:07,839 --> 00:09:12,880
only if though the user has

253
00:09:09,519 --> 00:09:15,600
clicked enabled macros so what does this

254
00:09:12,880 --> 00:09:16,640
fisher subroutine do well basically does

255
00:09:15,600 --> 00:09:20,240
two things

256
00:09:16,640 --> 00:09:22,560
it first builds a base64 encoded string

257
00:09:20,240 --> 00:09:23,440
and then decodes and executes this

258
00:09:22,560 --> 00:09:27,518
string via

259
00:09:23,440 --> 00:09:28,959
python so if we manually decode the

260
00:09:27,519 --> 00:09:30,880
string we can see that it's

261
00:09:28,959 --> 00:09:32,640
python code which is unsurprising

262
00:09:30,880 --> 00:09:33,600
because it's being passed to python to

263
00:09:32,640 --> 00:09:36,399
be executed so

264
00:09:33,600 --> 00:09:36,880
yeah of course so what does this python

265
00:09:36,399 --> 00:09:40,160
code

266
00:09:36,880 --> 00:09:42,560
do well basically four main things

267
00:09:40,160 --> 00:09:43,439
so first it checks to make sure the

268
00:09:42,560 --> 00:09:45,439
popular

269
00:09:43,440 --> 00:09:48,480
mac os firewall little snitch is not

270
00:09:45,440 --> 00:09:51,760
running then it downloads a second stage

271
00:09:48,480 --> 00:09:54,640
payload from securitychecking.org

272
00:09:51,760 --> 00:09:55,600
three it decrypts this payload and then

273
00:09:54,640 --> 00:09:58,240
finally in step

274
00:09:55,600 --> 00:09:59,680
four it executes this now decrypted

275
00:09:58,240 --> 00:10:01,920
payload

276
00:09:59,680 --> 00:10:03,920
you've analyzed a lot of these documents

277
00:10:01,920 --> 00:10:05,199
you might think that this code looks

278
00:10:03,920 --> 00:10:08,160
familiar and in fact

279
00:10:05,200 --> 00:10:08,959
it does because it is empire which is a

280
00:10:08,160 --> 00:10:12,160
well-known

281
00:10:08,959 --> 00:10:13,680
open source python backdoor

282
00:10:12,160 --> 00:10:15,680
and what about second stage payload what

283
00:10:13,680 --> 00:10:18,319
is it downloading and running well

284
00:10:15,680 --> 00:10:20,479
unfortunately at time of this uh at the

285
00:10:18,320 --> 00:10:23,120
time of analyzing this document

286
00:10:20,480 --> 00:10:24,560
that second stage payload was no longer

287
00:10:23,120 --> 00:10:26,160
available because the command and

288
00:10:24,560 --> 00:10:28,399
control server was offline

289
00:10:26,160 --> 00:10:30,480
but it's likely empire's second stage

290
00:10:28,399 --> 00:10:34,320
payload which gives attackers

291
00:10:30,480 --> 00:10:36,720
full access over the infected system

292
00:10:34,320 --> 00:10:38,079
if we move on to the bitcoin document

293
00:10:36,720 --> 00:10:41,200
from 2018

294
00:10:38,079 --> 00:10:42,160
again we can use the ole vba tool to

295
00:10:41,200 --> 00:10:44,720
extract the

296
00:10:42,160 --> 00:10:45,519
embedded macros which we have on the

297
00:10:44,720 --> 00:10:47,920
screen

298
00:10:45,519 --> 00:10:49,760
again it contains encoded python which

299
00:10:47,920 --> 00:10:52,479
just seems to be a popular technique

300
00:10:49,760 --> 00:10:54,319
used by unrelated adversaries but it

301
00:10:52,480 --> 00:10:56,480
also appears to contain an

302
00:10:54,320 --> 00:10:59,360
embedded property list this is

303
00:10:56,480 --> 00:11:01,760
interesting why is it there

304
00:10:59,360 --> 00:11:02,800
we take a closer look we'll first look

305
00:11:01,760 --> 00:11:05,839
at the

306
00:11:02,800 --> 00:11:08,560
python curve as i mentioned it's encoded

307
00:11:05,839 --> 00:11:08,880
base64 encoded which is luckily trivial

308
00:11:08,560 --> 00:11:10,719
to

309
00:11:08,880 --> 00:11:12,000
decode on the slide you can see we

310
00:11:10,720 --> 00:11:15,279
decode this via the

311
00:11:12,000 --> 00:11:18,240
base64 library module in python

312
00:11:15,279 --> 00:11:19,360
which then outputs the unencoded decoded

313
00:11:18,240 --> 00:11:20,800
python code

314
00:11:19,360 --> 00:11:22,480
i've kind of cleaned that up and put it

315
00:11:20,800 --> 00:11:24,240
put that on the bottom of the slide

316
00:11:22,480 --> 00:11:25,920
you can see it's super simple just

317
00:11:24,240 --> 00:11:28,160
connects out to a server

318
00:11:25,920 --> 00:11:28,959
then downloads and executes a second

319
00:11:28,160 --> 00:11:31,279
stage

320
00:11:28,959 --> 00:11:32,880
payload this turned out to be

321
00:11:31,279 --> 00:11:35,279
metasploits interpreter

322
00:11:32,880 --> 00:11:37,040
which again gives remote access to an

323
00:11:35,279 --> 00:11:39,120
infected system

324
00:11:37,040 --> 00:11:40,240
though this attack was unrelated to the

325
00:11:39,120 --> 00:11:42,560
previous one

326
00:11:40,240 --> 00:11:45,360
we do see a lot of kind of overlap in

327
00:11:42,560 --> 00:11:47,199
the sense that attackers appear to be

328
00:11:45,360 --> 00:11:49,360
somewhat lazy and are simply using

329
00:11:47,200 --> 00:11:53,120
existing open source payloads

330
00:11:49,360 --> 00:11:54,959
to embed in these malicious documents

331
00:11:53,120 --> 00:11:56,480
now i mentioned the most interesting

332
00:11:54,959 --> 00:11:58,800
part of this

333
00:11:56,480 --> 00:12:00,079
document this attack was its ability to

334
00:11:58,800 --> 00:12:03,040
escape outside

335
00:12:00,079 --> 00:12:04,000
the sandbox so what is the sandbox right

336
00:12:03,040 --> 00:12:07,279
we've mentioned this

337
00:12:04,000 --> 00:12:08,560
a few times so recent versions of office

338
00:12:07,279 --> 00:12:11,360
run in a sandbox

339
00:12:08,560 --> 00:12:13,680
which means that even if code such as

340
00:12:11,360 --> 00:12:14,560
macro code malicious macro code is

341
00:12:13,680 --> 00:12:17,519
executed

342
00:12:14,560 --> 00:12:18,160
it will be constrained it'll be kind of

343
00:12:17,519 --> 00:12:21,120
contained

344
00:12:18,160 --> 00:12:22,719
limited by what it can do so the sandbox

345
00:12:21,120 --> 00:12:25,120
prevents it from doing things like

346
00:12:22,720 --> 00:12:26,399
persisting a backdoor accessing the

347
00:12:25,120 --> 00:12:29,200
user's passwords

348
00:12:26,399 --> 00:12:30,240
or doing other nefarious things from a

349
00:12:29,200 --> 00:12:33,440
security point of view

350
00:12:30,240 --> 00:12:35,519
such a sandbox is a great idea

351
00:12:33,440 --> 00:12:36,480
unfortunately though security researcher

352
00:12:35,519 --> 00:12:39,279
adam chester

353
00:12:36,480 --> 00:12:40,160
found a neat way to escape out of this

354
00:12:39,279 --> 00:12:43,040
sandbox

355
00:12:40,160 --> 00:12:45,600
and posted a great blog post an article

356
00:12:43,040 --> 00:12:48,560
on my website uh objective c

357
00:12:45,600 --> 00:12:49,600
in short he found a sandbox exception

358
00:12:48,560 --> 00:12:52,638
based on a

359
00:12:49,600 --> 00:12:55,360
faulty regular expression regx

360
00:12:52,639 --> 00:12:56,720
that allowed sandbox code to create

361
00:12:55,360 --> 00:12:58,959
specifically named files

362
00:12:56,720 --> 00:13:00,320
anywhere on the system normally if

363
00:12:58,959 --> 00:13:01,279
you're running within the sandbox you

364
00:13:00,320 --> 00:13:03,120
can't create

365
00:13:01,279 --> 00:13:04,839
files in arbitrary locations that would

366
00:13:03,120 --> 00:13:06,000
kind of defeat the purpose of the

367
00:13:04,839 --> 00:13:07,519
sandbox

368
00:13:06,000 --> 00:13:09,040
however he found that via this faulty

369
00:13:07,519 --> 00:13:10,000
regular expression he could create

370
00:13:09,040 --> 00:13:12,160
something called a

371
00:13:10,000 --> 00:13:13,040
launch agent that exists outside the

372
00:13:12,160 --> 00:13:14,959
sandbox

373
00:13:13,040 --> 00:13:16,240
the next time the system was rebooted or

374
00:13:14,959 --> 00:13:18,319
the user logs in

375
00:13:16,240 --> 00:13:19,920
this launch agent would run outside the

376
00:13:18,320 --> 00:13:21,760
context of the sandbox in other words it

377
00:13:19,920 --> 00:13:23,279
was a sandbox escape

378
00:13:21,760 --> 00:13:26,079
now it was interesting because looking

379
00:13:23,279 --> 00:13:27,760
at the malicious code of this attack

380
00:13:26,079 --> 00:13:29,120
we can see the attackers simply went to

381
00:13:27,760 --> 00:13:31,920
my website and actually

382
00:13:29,120 --> 00:13:33,920
copied and pasted this sandbox escape

383
00:13:31,920 --> 00:13:36,000
verbatim they didn't even change

384
00:13:33,920 --> 00:13:37,920
anything from the proof of concept

385
00:13:36,000 --> 00:13:40,000
embedded it directly in their malicious

386
00:13:37,920 --> 00:13:41,920
documents and then sent it out

387
00:13:40,000 --> 00:13:43,519
on unpatched systems this means if the

388
00:13:41,920 --> 00:13:45,599
user opened the document

389
00:13:43,519 --> 00:13:48,079
not only would the malicious macro code

390
00:13:45,600 --> 00:13:49,279
run the sandbox escape would allow the

391
00:13:48,079 --> 00:13:51,279
malware to escape

392
00:13:49,279 --> 00:13:54,880
out of the constraints of the sandbox

393
00:13:51,279 --> 00:13:56,399
and cause more damage to the system

394
00:13:54,880 --> 00:13:58,800
finally the last document we talked

395
00:13:56,399 --> 00:14:00,959
about if we extract the embedded macro

396
00:13:58,800 --> 00:14:02,800
code we can see it's fairly

397
00:14:00,959 --> 00:14:04,719
straightforward in this case it's

398
00:14:02,800 --> 00:14:06,319
unencoded there's no there's no python

399
00:14:04,720 --> 00:14:08,000
there's no basics before i'm coding

400
00:14:06,320 --> 00:14:10,000
so it's very easy to understand what it

401
00:14:08,000 --> 00:14:12,560
does three basic things

402
00:14:10,000 --> 00:14:13,040
simply downloads and executes a second

403
00:14:12,560 --> 00:14:16,239
stage

404
00:14:13,040 --> 00:14:19,519
persistent implant we grab this implant

405
00:14:16,240 --> 00:14:21,519
it is a binary called mt.dat

406
00:14:19,519 --> 00:14:23,440
which turns out to be a pretty standard

407
00:14:21,519 --> 00:14:25,839
backdoor created by the

408
00:14:23,440 --> 00:14:28,839
lazarus group adversaries to give them

409
00:14:25,839 --> 00:14:32,399
remote continuing access to the infected

410
00:14:28,839 --> 00:14:34,720
system so that's an overview of the

411
00:14:32,399 --> 00:14:35,920
recent macro based attacks against mac

412
00:14:34,720 --> 00:14:38,399
os which gives us

413
00:14:35,920 --> 00:14:38,959
a pretty thorough understanding of the

414
00:14:38,399 --> 00:14:41,279
current

415
00:14:38,959 --> 00:14:42,638
status quo so now let's talk about a

416
00:14:41,279 --> 00:14:46,160
more sophisticated

417
00:14:42,639 --> 00:14:47,199
macro based exploit chain and the reason

418
00:14:46,160 --> 00:14:49,920
we're going to do this

419
00:14:47,199 --> 00:14:50,719
is because current macro based attacks

420
00:14:49,920 --> 00:14:53,199
are

421
00:14:50,720 --> 00:14:54,160
super lame almost ineffective almost

422
00:14:53,199 --> 00:14:56,240
useless

423
00:14:54,160 --> 00:14:57,680
let's list the ways why this statement

424
00:14:56,240 --> 00:14:59,920
is true

425
00:14:57,680 --> 00:15:00,880
so first any of the attacks that we just

426
00:14:59,920 --> 00:15:03,120
described

427
00:15:00,880 --> 00:15:04,639
when the user goes to open the document

428
00:15:03,120 --> 00:15:07,360
microsoft office will

429
00:15:04,639 --> 00:15:08,320
generate a big alert basically telling

430
00:15:07,360 --> 00:15:10,560
the user

431
00:15:08,320 --> 00:15:12,320
that this document contains macros and

432
00:15:10,560 --> 00:15:13,599
that these macros are likely

433
00:15:12,320 --> 00:15:16,000
malicious and that they probably

434
00:15:13,600 --> 00:15:17,120
shouldn't run them

435
00:15:16,000 --> 00:15:18,720
so the only way these attacks are

436
00:15:17,120 --> 00:15:20,000
actually going to work is if the user

437
00:15:18,720 --> 00:15:22,320
ignores this prompt

438
00:15:20,000 --> 00:15:24,079
and clicks enable macros and luckily

439
00:15:22,320 --> 00:15:25,519
most users won't so this means most of

440
00:15:24,079 --> 00:15:27,599
those attacks are going to fail

441
00:15:25,519 --> 00:15:30,079
out of the box they're not even gonna

442
00:15:27,600 --> 00:15:33,519
they're not even going to be able to run

443
00:15:30,079 --> 00:15:34,079
also microsoft patched adam's sandbox

444
00:15:33,519 --> 00:15:36,079
bug

445
00:15:34,079 --> 00:15:38,239
meaning all current attacks remain

446
00:15:36,079 --> 00:15:40,479
sandbox so even if the user clicks on

447
00:15:38,240 --> 00:15:42,399
enable macros the macro code will be

448
00:15:40,480 --> 00:15:44,000
constricted again by the sandbox so

449
00:15:42,399 --> 00:15:46,160
won't be able to do things like

450
00:15:44,000 --> 00:15:48,639
persist a backdoor or access the

451
00:15:46,160 --> 00:15:51,040
majority of the user's files

452
00:15:48,639 --> 00:15:52,959
finally at least on catalina which is

453
00:15:51,040 --> 00:15:54,800
the most recent version of apple's

454
00:15:52,959 --> 00:15:56,560
desktop operating system

455
00:15:54,800 --> 00:15:57,920
due to something called quarantine and

456
00:15:56,560 --> 00:16:00,638
notarization

457
00:15:57,920 --> 00:16:01,279
payloads even those executed in the

458
00:16:00,639 --> 00:16:03,839
sandbox

459
00:16:01,279 --> 00:16:04,800
may be blocked basically what apple does

460
00:16:03,839 --> 00:16:07,440
now is say

461
00:16:04,800 --> 00:16:08,880
apple has to bless or validate the code

462
00:16:07,440 --> 00:16:10,880
before it's allowed to run

463
00:16:08,880 --> 00:16:12,800
obviously they're not going to approve

464
00:16:10,880 --> 00:16:15,199
backdoors from running

465
00:16:12,800 --> 00:16:16,079
so this means the current attacks are as

466
00:16:15,199 --> 00:16:19,199
i mentioned

467
00:16:16,079 --> 00:16:21,040
basically useless

468
00:16:19,199 --> 00:16:22,479
so i kind of wanted to see if the

469
00:16:21,040 --> 00:16:24,560
problem could be worse

470
00:16:22,480 --> 00:16:26,880
so what we're going to do now is walk

471
00:16:24,560 --> 00:16:27,599
through an exploit chain that suffers

472
00:16:26,880 --> 00:16:30,959
from

473
00:16:27,600 --> 00:16:31,360
none of these limitations so the exploit

474
00:16:30,959 --> 00:16:34,479
chain

475
00:16:31,360 --> 00:16:36,560
starts with a neat bug found a while ago

476
00:16:34,480 --> 00:16:39,120
by two other security researchers

477
00:16:36,560 --> 00:16:40,479
and some researchers at cert so i didn't

478
00:16:39,120 --> 00:16:41,839
find this initial bug

479
00:16:40,480 --> 00:16:43,519
just kind of the first bug we're going

480
00:16:41,839 --> 00:16:45,360
to use in the exploit chain

481
00:16:43,519 --> 00:16:47,199
and the vulnerability they found was

482
00:16:45,360 --> 00:16:49,600
that even if macros are

483
00:16:47,199 --> 00:16:50,800
turned off these researchers could

484
00:16:49,600 --> 00:16:52,720
create a document

485
00:16:50,800 --> 00:16:54,800
that contained macros that would be

486
00:16:52,720 --> 00:16:58,000
automatically executed with no

487
00:16:54,800 --> 00:16:58,000
alerts no prompts

488
00:16:58,160 --> 00:17:02,000
so how are they able to do this well it

489
00:17:00,160 --> 00:17:02,880
turns out they were able to abuse a

490
00:17:02,000 --> 00:17:05,839
really old

491
00:17:02,880 --> 00:17:06,559
file format from the 1980s called sylk

492
00:17:05,839 --> 00:17:08,799
files

493
00:17:06,559 --> 00:17:10,240
and using actually an ancient macro

494
00:17:08,799 --> 00:17:14,319
languages

495
00:17:10,240 --> 00:17:14,959
called xlm now microsoft loves to

496
00:17:14,319 --> 00:17:17,599
support

497
00:17:14,959 --> 00:17:18,400
old file formats for compatibility

498
00:17:17,599 --> 00:17:20,719
reasons

499
00:17:18,400 --> 00:17:22,400
so yes these ancient file formats in

500
00:17:20,720 --> 00:17:22,720
this ancient macro programming language

501
00:17:22,400 --> 00:17:25,039
will

502
00:17:22,720 --> 00:17:26,799
actually still work even today still

503
00:17:25,039 --> 00:17:29,840
supported by microsoft's

504
00:17:26,799 --> 00:17:31,280
documents specifically by excel

505
00:17:29,840 --> 00:17:33,039
so what the researchers found is they

506
00:17:31,280 --> 00:17:34,960
could write this xlm

507
00:17:33,039 --> 00:17:36,799
macro code and again and this is very

508
00:17:34,960 --> 00:17:37,600
important it would be automatically

509
00:17:36,799 --> 00:17:39,918
executed

510
00:17:37,600 --> 00:17:40,639
ironically if the user headset never run

511
00:17:39,919 --> 00:17:43,200
macros

512
00:17:40,640 --> 00:17:44,960
which is the most secure settings the

513
00:17:43,200 --> 00:17:48,160
researchers published a great write-up

514
00:17:44,960 --> 00:17:49,919
kind of included a link on the slide so

515
00:17:48,160 --> 00:17:53,120
if you're more interested in that

516
00:17:49,919 --> 00:17:54,799
check out their great research so

517
00:17:53,120 --> 00:17:56,479
i wrote a simple proof of concept based

518
00:17:54,799 --> 00:17:58,080
off their bug

519
00:17:56,480 --> 00:17:59,840
and in this little video we're going to

520
00:17:58,080 --> 00:18:01,280
see a malicious document that is

521
00:17:59,840 --> 00:18:02,480
downloaded from the internet

522
00:18:01,280 --> 00:18:04,879
we're going to see that when the user

523
00:18:02,480 --> 00:18:06,799
goes to open this document calculator is

524
00:18:04,880 --> 00:18:07,919
automatically launched via malicious

525
00:18:06,799 --> 00:18:09,520
macro code

526
00:18:07,919 --> 00:18:11,760
and the main takeaway here again is

527
00:18:09,520 --> 00:18:16,480
there's no alert no warnings

528
00:18:11,760 --> 00:18:16,480
document is opened calculator is popped

529
00:18:16,559 --> 00:18:24,000
so download the file open it

530
00:18:21,280 --> 00:18:25,840
there's calculator right kind of neat

531
00:18:24,000 --> 00:18:26,480
again no alerts no prompts nothing about

532
00:18:25,840 --> 00:18:29,918
macros

533
00:18:26,480 --> 00:18:31,840
just pop and calc

534
00:18:29,919 --> 00:18:33,280
now we noted though that microsoft

535
00:18:31,840 --> 00:18:35,678
office is sandbox

536
00:18:33,280 --> 00:18:36,399
which means sure we can spawn calculator

537
00:18:35,679 --> 00:18:38,080
but that's

538
00:18:36,400 --> 00:18:40,559
really about it we can't persist the

539
00:18:38,080 --> 00:18:42,080
backdoor we can't access user's files

540
00:18:40,559 --> 00:18:43,678
right that's the point of a sandbox to

541
00:18:42,080 --> 00:18:46,799
block malicious code

542
00:18:43,679 --> 00:18:48,000
so in short we need a sandbox escape in

543
00:18:46,799 --> 00:18:51,440
order to do any

544
00:18:48,000 --> 00:18:52,400
real damage so i started for i started

545
00:18:51,440 --> 00:18:54,960
by looking at

546
00:18:52,400 --> 00:18:56,160
microsoft's patch for adam's bug and i

547
00:18:54,960 --> 00:18:58,640
found that they actually didn't

548
00:18:56,160 --> 00:18:59,440
fix or address the faulty regular

549
00:18:58,640 --> 00:19:01,440
expression

550
00:18:59,440 --> 00:19:03,840
they simply blocked certain locations

551
00:19:01,440 --> 00:19:06,480
such as the launch agent directory

552
00:19:03,840 --> 00:19:08,000
meaning we can still create arbitrary

553
00:19:06,480 --> 00:19:10,240
files as long as they start with

554
00:19:08,000 --> 00:19:11,600
tilde dollar sign so they conform to the

555
00:19:10,240 --> 00:19:14,080
faulty reg x

556
00:19:11,600 --> 00:19:16,080
almost anywhere now we can't create a

557
00:19:14,080 --> 00:19:18,000
file in the launch agents directory

558
00:19:16,080 --> 00:19:20,879
but pretty much anywhere else we're

559
00:19:18,000 --> 00:19:22,799
going to see that's very important

560
00:19:20,880 --> 00:19:24,160
now our goal of course is to execute

561
00:19:22,799 --> 00:19:26,879
something a binary

562
00:19:24,160 --> 00:19:27,600
outside the sandbox so we can persist

563
00:19:26,880 --> 00:19:30,720
and do

564
00:19:27,600 --> 00:19:32,080
more problematic more evil things we

565
00:19:30,720 --> 00:19:34,480
just noted we can still

566
00:19:32,080 --> 00:19:36,480
write specially named files to

567
00:19:34,480 --> 00:19:39,280
essentially arbitrary locations

568
00:19:36,480 --> 00:19:41,760
as microsoft didn't fully patch them

569
00:19:39,280 --> 00:19:42,240
turns out also in the sandbox via macro

570
00:19:41,760 --> 00:19:43,840
code

571
00:19:42,240 --> 00:19:45,280
which is automatically executed with no

572
00:19:43,840 --> 00:19:47,760
alerts no prompts

573
00:19:45,280 --> 00:19:49,840
we can download and execute scripts we

574
00:19:47,760 --> 00:19:50,559
can see this on the slide in our process

575
00:19:49,840 --> 00:19:52,080
monitor

576
00:19:50,559 --> 00:19:54,240
now these scripts will still be

577
00:19:52,080 --> 00:19:57,678
sandboxes sandboxed as they are

578
00:19:54,240 --> 00:19:59,360
children of a sandbox process but still

579
00:19:57,679 --> 00:20:00,640
it's the start right we can run python

580
00:19:59,360 --> 00:20:03,199
code that gives us a lot more

581
00:20:00,640 --> 00:20:05,840
extensibility

582
00:20:03,200 --> 00:20:08,080
so what i found was via a python script

583
00:20:05,840 --> 00:20:09,678
that we can execute via the sandbox we

584
00:20:08,080 --> 00:20:12,960
can create something called

585
00:20:09,679 --> 00:20:14,960
a login item now although we can't

586
00:20:12,960 --> 00:20:17,760
specify any arguments

587
00:20:14,960 --> 00:20:18,080
in this login item this login item will

588
00:20:17,760 --> 00:20:20,400
be

589
00:20:18,080 --> 00:20:21,840
automatically started the next time the

590
00:20:20,400 --> 00:20:24,400
user logs in

591
00:20:21,840 --> 00:20:25,520
and and since login items are started by

592
00:20:24,400 --> 00:20:28,320
mac os

593
00:20:25,520 --> 00:20:29,679
versus by us in the sandbox it turns out

594
00:20:28,320 --> 00:20:30,960
that when they're launched they're not

595
00:20:29,679 --> 00:20:34,799
running in the sandbox

596
00:20:30,960 --> 00:20:36,720
so gray we now have a sandbox escape

597
00:20:34,799 --> 00:20:38,480
we can confirm this by persisting

598
00:20:36,720 --> 00:20:41,520
apple's terminal.app

599
00:20:38,480 --> 00:20:43,760
from the sandbox and then on the next

600
00:20:41,520 --> 00:20:45,440
login as we can see on the slide at the

601
00:20:43,760 --> 00:20:47,520
bottom terminal that app

602
00:20:45,440 --> 00:20:49,919
is automatically running and if we look

603
00:20:47,520 --> 00:20:51,520
at the sandbox field in

604
00:20:49,919 --> 00:20:53,039
activity monitor we can see that it's

605
00:20:51,520 --> 00:20:54,320
set to no meaning that terminal is

606
00:20:53,039 --> 00:20:57,360
running outside

607
00:20:54,320 --> 00:20:57,360
outside the sandbox

608
00:20:57,440 --> 00:21:01,039
now we immediately run into catalina's

609
00:20:59,520 --> 00:21:02,879
more stringent quarantine and

610
00:21:01,039 --> 00:21:05,280
notarization requirements

611
00:21:02,880 --> 00:21:06,480
so if we persist an arbitrary backdoor

612
00:21:05,280 --> 00:21:09,520
as a login item

613
00:21:06,480 --> 00:21:12,640
say backdoor or something we create

614
00:21:09,520 --> 00:21:14,480
when macos goes to launch that it

615
00:21:12,640 --> 00:21:17,600
actually sees that it's not notarized

616
00:21:14,480 --> 00:21:20,559
or not approved by apple and blocks it

617
00:21:17,600 --> 00:21:21,120
so this sucks right another obstacle we

618
00:21:20,559 --> 00:21:24,480
have to

619
00:21:21,120 --> 00:21:25,199
address well good thing is hope is not

620
00:21:24,480 --> 00:21:27,919
lost

621
00:21:25,200 --> 00:21:30,080
if and this is a big if if we can create

622
00:21:27,919 --> 00:21:31,360
something called a launch agent this

623
00:21:30,080 --> 00:21:33,918
allows us to specify

624
00:21:31,360 --> 00:21:34,559
program arguments which allow us then to

625
00:21:33,919 --> 00:21:37,360
create

626
00:21:34,559 --> 00:21:38,960
a interactive non-sandboxed reverse

627
00:21:37,360 --> 00:21:40,559
shell via bash

628
00:21:38,960 --> 00:21:42,080
this is important because this

629
00:21:40,559 --> 00:21:43,600
interactive reverse shell is running

630
00:21:42,080 --> 00:21:46,559
outside the sandbox

631
00:21:43,600 --> 00:21:48,320
we can download additional items that

632
00:21:46,559 --> 00:21:50,559
are not constrained by apple's

633
00:21:48,320 --> 00:21:53,840
notarization requirements

634
00:21:50,559 --> 00:21:56,399
but recall microsoft's patch

635
00:21:53,840 --> 00:21:57,678
specifically prevents the creation of

636
00:21:56,400 --> 00:22:00,559
launch agents

637
00:21:57,679 --> 00:22:01,200
bummer so we have all the potential

638
00:22:00,559 --> 00:22:03,039
pieces

639
00:22:01,200 --> 00:22:04,240
but we just can't quite put them

640
00:22:03,039 --> 00:22:06,640
together right

641
00:22:04,240 --> 00:22:07,360
so we can escape the sandbox via a login

642
00:22:06,640 --> 00:22:10,240
item

643
00:22:07,360 --> 00:22:11,678
but login items don't take arguments

644
00:22:10,240 --> 00:22:13,600
also they can't be

645
00:22:11,679 --> 00:22:15,679
random binaries because due to apple's

646
00:22:13,600 --> 00:22:17,360
notarization apple will block that

647
00:22:15,679 --> 00:22:20,080
so in other words the only thing we can

648
00:22:17,360 --> 00:22:23,280
persist are apple approved items

649
00:22:20,080 --> 00:22:24,960
again with no arguments and sure we

650
00:22:23,280 --> 00:22:26,639
could potentially bypass the

651
00:22:24,960 --> 00:22:29,120
notarization requirements via

652
00:22:26,640 --> 00:22:31,679
a launch agent but we can't directly

653
00:22:29,120 --> 00:22:34,799
create a launch agent from the sandbox

654
00:22:31,679 --> 00:22:36,000
due to microsoft's partial patch

655
00:22:34,799 --> 00:22:38,000
so what we have to do is we have to

656
00:22:36,000 --> 00:22:40,559
figure out a way for the system

657
00:22:38,000 --> 00:22:41,679
or for an apple binary again with no

658
00:22:40,559 --> 00:22:45,840
process arguments

659
00:22:41,679 --> 00:22:48,640
to create a launch agent for us

660
00:22:45,840 --> 00:22:49,280
so i had a random idea what happens if

661
00:22:48,640 --> 00:22:52,320
you create

662
00:22:49,280 --> 00:22:53,280
a login item that is not a binary or an

663
00:22:52,320 --> 00:22:54,639
application

664
00:22:53,280 --> 00:22:55,840
this is kind of strange i didn't know

665
00:22:54,640 --> 00:22:57,760
what was going to happen because

666
00:22:55,840 --> 00:22:59,199
normally you create a login item

667
00:22:57,760 --> 00:23:01,520
and you set it to an application that

668
00:22:59,200 --> 00:23:01,840
you'd like the system to automatically

669
00:23:01,520 --> 00:23:04,080
start

670
00:23:01,840 --> 00:23:05,360
each time the user logs in this is what

671
00:23:04,080 --> 00:23:07,439
login items do

672
00:23:05,360 --> 00:23:08,399
but what happens if you create a login

673
00:23:07,440 --> 00:23:11,600
item that points to

674
00:23:08,400 --> 00:23:12,320
a pdf document or a zip file well it

675
00:23:11,600 --> 00:23:15,918
turns out

676
00:23:12,320 --> 00:23:18,559
on login mac os will invoke the default

677
00:23:15,919 --> 00:23:20,480
file handler for that file type

678
00:23:18,559 --> 00:23:22,799
thus for a pdf it will open it in

679
00:23:20,480 --> 00:23:25,440
preview for a zip file

680
00:23:22,799 --> 00:23:27,039
macos will automatically invoke apple's

681
00:23:25,440 --> 00:23:30,799
archive utility to

682
00:23:27,039 --> 00:23:32,480
unzip the file now remember we want to

683
00:23:30,799 --> 00:23:35,200
create a launch agent

684
00:23:32,480 --> 00:23:36,799
but due to office's custom sandbox rule

685
00:23:35,200 --> 00:23:38,240
we can't directly

686
00:23:36,799 --> 00:23:40,559
write to the user's launch agent

687
00:23:38,240 --> 00:23:41,039
directory but if that directory doesn't

688
00:23:40,559 --> 00:23:42,799
exist

689
00:23:41,039 --> 00:23:45,200
which it does not on a default install

690
00:23:42,799 --> 00:23:47,120
of mac os what we can do is we can drop

691
00:23:45,200 --> 00:23:49,760
that zip file one directory

692
00:23:47,120 --> 00:23:51,439
up in the user's library directory this

693
00:23:49,760 --> 00:23:52,879
is allowed from the sandbox right we're

694
00:23:51,440 --> 00:23:54,720
not writing to the directory we're

695
00:23:52,880 --> 00:23:57,360
writing one directory up

696
00:23:54,720 --> 00:23:58,000
and what do we put in this zip file well

697
00:23:57,360 --> 00:24:00,959
we put

698
00:23:58,000 --> 00:24:02,559
a directory called launch agents and

699
00:24:00,960 --> 00:24:04,799
then within that we put our

700
00:24:02,559 --> 00:24:05,918
launch agent property list that contains

701
00:24:04,799 --> 00:24:07,840
our program

702
00:24:05,919 --> 00:24:09,840
arguments that will create an

703
00:24:07,840 --> 00:24:11,918
interactive backdoor

704
00:24:09,840 --> 00:24:13,760
shell out to us that allows us to

705
00:24:11,919 --> 00:24:16,159
download additional code

706
00:24:13,760 --> 00:24:17,440
so once we've done this when the user

707
00:24:16,159 --> 00:24:19,360
logs in

708
00:24:17,440 --> 00:24:21,440
the zip file will be automatically

709
00:24:19,360 --> 00:24:24,240
unzipped and the launch agent will

710
00:24:21,440 --> 00:24:25,840
be created forks so here's kind of a

711
00:24:24,240 --> 00:24:29,440
walk through then of the entire

712
00:24:25,840 --> 00:24:30,799
exploit chain step one the user opens

713
00:24:29,440 --> 00:24:34,080
our malicious office

714
00:24:30,799 --> 00:24:34,720
document again using the initial bug we

715
00:24:34,080 --> 00:24:38,559
get

716
00:24:34,720 --> 00:24:40,720
macro code execution automatic no alerts

717
00:24:38,559 --> 00:24:42,720
no prompt now this code is running

718
00:24:40,720 --> 00:24:43,679
within the sandbox so we have to escape

719
00:24:42,720 --> 00:24:46,159
the sandbox

720
00:24:43,679 --> 00:24:47,200
so what we do is we create a login item

721
00:24:46,159 --> 00:24:50,640
which is allowed

722
00:24:47,200 --> 00:24:53,440
that points to a zip file on the

723
00:24:50,640 --> 00:24:54,559
next login the archive utility is

724
00:24:53,440 --> 00:24:56,880
automatically run

725
00:24:54,559 --> 00:24:58,399
this is run outside the sandbox and also

726
00:24:56,880 --> 00:24:59,200
it is allowed to run because it's an

727
00:24:58,400 --> 00:25:02,640
apple sign

728
00:24:59,200 --> 00:25:04,320
process this extracts our zip file

729
00:25:02,640 --> 00:25:05,679
and since our zip file has a directory

730
00:25:04,320 --> 00:25:08,480
called launch agent

731
00:25:05,679 --> 00:25:10,000
it is allowed to create the launch agent

732
00:25:08,480 --> 00:25:12,880
directory

733
00:25:10,000 --> 00:25:14,080
on next login mac os will process any

734
00:25:12,880 --> 00:25:16,400
launch agents it

735
00:25:14,080 --> 00:25:17,520
finds which includes our malicious

736
00:25:16,400 --> 00:25:20,080
launch agent

737
00:25:17,520 --> 00:25:21,440
runs it and launches our bash based

738
00:25:20,080 --> 00:25:23,039
interactive back door

739
00:25:21,440 --> 00:25:24,480
again we're using bash because that's an

740
00:25:23,039 --> 00:25:26,559
apple sign process

741
00:25:24,480 --> 00:25:27,760
so the system allows it to run it

742
00:25:26,559 --> 00:25:30,399
doesn't have to be notarized because

743
00:25:27,760 --> 00:25:33,039
it's part of the operating system

744
00:25:30,400 --> 00:25:34,880
to mention this bash backdoor is running

745
00:25:33,039 --> 00:25:36,480
outside the sandbox means it can

746
00:25:34,880 --> 00:25:38,400
download files

747
00:25:36,480 --> 00:25:40,240
and one of the things it can do because

748
00:25:38,400 --> 00:25:41,039
it's outside the sandbox it can do

749
00:25:40,240 --> 00:25:43,600
something called

750
00:25:41,039 --> 00:25:45,039
unquarantined files this is important

751
00:25:43,600 --> 00:25:47,760
because once a file is

752
00:25:45,039 --> 00:25:50,640
unquarantined it is not constrained by

753
00:25:47,760 --> 00:25:52,000
apple's notarization requirements

754
00:25:50,640 --> 00:25:54,159
this is great so this means we can run

755
00:25:52,000 --> 00:25:56,080
our own code we can run matlab so

756
00:25:54,159 --> 00:25:58,159
what did we decide to do we decided

757
00:25:56,080 --> 00:26:00,639
let's run some mac malware

758
00:25:58,159 --> 00:26:02,000
awesome we can see on the slides once i

759
00:26:00,640 --> 00:26:05,760
finally got this all working

760
00:26:02,000 --> 00:26:08,880
i was pretty stoked all right

761
00:26:05,760 --> 00:26:10,080
so now we have the ability to hack max

762
00:26:08,880 --> 00:26:11,679
by simply open

763
00:26:10,080 --> 00:26:13,520
opening an office document right if you

764
00:26:11,679 --> 00:26:14,480
get a user who has microsoft office

765
00:26:13,520 --> 00:26:16,960
installed to open

766
00:26:14,480 --> 00:26:18,000
a document their system is toast we're

767
00:26:16,960 --> 00:26:20,799
stoked

768
00:26:18,000 --> 00:26:24,080
so what could we or what could attackers

769
00:26:20,799 --> 00:26:24,799
do then to maintain persistent access oh

770
00:26:24,080 --> 00:26:26,399
really

771
00:26:24,799 --> 00:26:28,960
they could do anything but i thought it

772
00:26:26,400 --> 00:26:29,360
would be neat to focus on some brand new

773
00:26:28,960 --> 00:26:32,000
mac

774
00:26:29,360 --> 00:26:33,199
malware so in this next part of the talk

775
00:26:32,000 --> 00:26:34,559
we're going to kind of transition a

776
00:26:33,200 --> 00:26:37,679
little bit and talk about

777
00:26:34,559 --> 00:26:40,240
an intriguing piece of mac malware named

778
00:26:37,679 --> 00:26:42,320
evil quest we're going to talk about how

779
00:26:40,240 --> 00:26:45,039
to analyze its code to uncover

780
00:26:42,320 --> 00:26:45,678
its rather insidious capabilities and

781
00:26:45,039 --> 00:26:47,919
also show

782
00:26:45,679 --> 00:26:48,880
how it was perhaps the first true

783
00:26:47,919 --> 00:26:51,520
computer virus

784
00:26:48,880 --> 00:26:52,000
targeting mac os again this malware

785
00:26:51,520 --> 00:26:53,918
could

786
00:26:52,000 --> 00:26:56,000
very easily be packaged up with our

787
00:26:53,919 --> 00:26:58,880
macro based exploit chain

788
00:26:56,000 --> 00:26:59,440
to you know be used in very damaging

789
00:26:58,880 --> 00:27:02,000
very

790
00:26:59,440 --> 00:27:02,000
evil ways

791
00:27:02,559 --> 00:27:06,240
now i first want to give kudos to dinesh

792
00:27:05,440 --> 00:27:09,520
on twitter

793
00:27:06,240 --> 00:27:11,360
for uncovering this malware in the wild

794
00:27:09,520 --> 00:27:12,879
his tweet definitely intrigued me to

795
00:27:11,360 --> 00:27:15,039
fully dig into

796
00:27:12,880 --> 00:27:17,679
evil quest specifically it didn't have

797
00:27:15,039 --> 00:27:18,000
any antivirus detections which indicated

798
00:27:17,679 --> 00:27:20,480
it

799
00:27:18,000 --> 00:27:21,360
likely was a brand new sample brand new

800
00:27:20,480 --> 00:27:23,679
specimen

801
00:27:21,360 --> 00:27:24,879
and also he noted it had some ransomware

802
00:27:23,679 --> 00:27:26,559
capabilities which is

803
00:27:24,880 --> 00:27:30,320
intriguing we don't run into a lot of

804
00:27:26,559 --> 00:27:30,320
ransomware targeting mac os

805
00:27:30,880 --> 00:27:35,679
now before we dive into the malware to

806
00:27:33,919 --> 00:27:37,919
talk about how it persists

807
00:27:35,679 --> 00:27:39,279
and what its capabilities are that

808
00:27:37,919 --> 00:27:41,679
perhaps we could leverage

809
00:27:39,279 --> 00:27:43,279
as a payload for our macro based attack

810
00:27:41,679 --> 00:27:45,600
we need to do some initial

811
00:27:43,279 --> 00:27:47,679
triage because we need to show how to

812
00:27:45,600 --> 00:27:50,399
decrypt embedded strings within

813
00:27:47,679 --> 00:27:52,559
the within the malware and also thwart

814
00:27:50,399 --> 00:27:53,840
its anti-analysis logic

815
00:27:52,559 --> 00:27:56,080
so that we can analyze it

816
00:27:53,840 --> 00:27:59,120
comprehensively before we utilize it for

817
00:27:56,080 --> 00:28:02,000
our own purposes so the malware

818
00:27:59,120 --> 00:28:02,639
was discovered uh in a disk image a dmg

819
00:28:02,000 --> 00:28:04,640
file

820
00:28:02,640 --> 00:28:05,919
so the first thing we can do is we can

821
00:28:04,640 --> 00:28:08,559
mount that dmg

822
00:28:05,919 --> 00:28:09,840
file and we can do that with the hdi

823
00:28:08,559 --> 00:28:11,520
utility command

824
00:28:09,840 --> 00:28:14,840
and we can see it contains a single

825
00:28:11,520 --> 00:28:16,720
package called mixed in key

826
00:28:14,840 --> 00:28:19,520
8.pkg

827
00:28:16,720 --> 00:28:20,320
now my favorite tool for analyzing

828
00:28:19,520 --> 00:28:23,760
packages

829
00:28:20,320 --> 00:28:26,320
is aptly called suspicious packages

830
00:28:23,760 --> 00:28:27,760
and what we can do is via this this this

831
00:28:26,320 --> 00:28:31,360
great utility this free tool

832
00:28:27,760 --> 00:28:34,080
is we can analyze the packages contents

833
00:28:31,360 --> 00:28:35,600
so we can see that within this pqg file

834
00:28:34,080 --> 00:28:37,520
there's basically two main

835
00:28:35,600 --> 00:28:39,279
pieces there's an application called

836
00:28:37,520 --> 00:28:41,279
mixed in key dot app

837
00:28:39,279 --> 00:28:43,360
and if we validate the code signing

838
00:28:41,279 --> 00:28:45,520
certificate of this we can see that it's

839
00:28:43,360 --> 00:28:46,399
validly signed by the original

840
00:28:45,520 --> 00:28:48,480
developers

841
00:28:46,399 --> 00:28:50,399
so we can likely assume that this is

842
00:28:48,480 --> 00:28:52,480
pristine this hasn't been tampered with

843
00:28:50,399 --> 00:28:53,520
however there's a second item which is a

844
00:28:52,480 --> 00:28:56,240
lot more interesting

845
00:28:53,520 --> 00:28:57,360
it's a mock o binary called patch which

846
00:28:56,240 --> 00:29:00,640
is unsigned

847
00:28:57,360 --> 00:29:00,639
that's interesting let's start there

848
00:29:01,039 --> 00:29:04,879
so if we look closer at the pkg we can

849
00:29:03,200 --> 00:29:07,120
see that part of the

850
00:29:04,880 --> 00:29:08,880
installation process it'll ask the user

851
00:29:07,120 --> 00:29:11,120
for their credentials and then i'll

852
00:29:08,880 --> 00:29:13,440
execute something called a post install

853
00:29:11,120 --> 00:29:15,120
script this is executed after the

854
00:29:13,440 --> 00:29:17,679
installer is basically completed and

855
00:29:15,120 --> 00:29:19,360
moved all the files into place

856
00:29:17,679 --> 00:29:21,840
so we can see and we've included the

857
00:29:19,360 --> 00:29:24,639
post install script on the slide

858
00:29:21,840 --> 00:29:25,600
the script moves the patch binary into a

859
00:29:24,640 --> 00:29:29,039
directory called

860
00:29:25,600 --> 00:29:32,559
mixed in key renaming the binary to tool

861
00:29:29,039 --> 00:29:35,279
room d so let's take

862
00:29:32,559 --> 00:29:37,600
a closer look at this patch binary or as

863
00:29:35,279 --> 00:29:39,520
it was renamed tool room d

864
00:29:37,600 --> 00:29:41,918
and one of the first things is i often

865
00:29:39,520 --> 00:29:45,120
run the strings utility to

866
00:29:41,919 --> 00:29:46,799
extract any embedded strings this can

867
00:29:45,120 --> 00:29:48,320
give us a lot of insight into perhaps

868
00:29:46,799 --> 00:29:50,320
the capabilities of

869
00:29:48,320 --> 00:29:52,240
the malware and we can see some

870
00:29:50,320 --> 00:29:54,399
interesting things based on the embedded

871
00:29:52,240 --> 00:29:55,760
strings in this patch binary we can see

872
00:29:54,399 --> 00:29:57,120
something that looks like command line

873
00:29:55,760 --> 00:29:59,440
arguments

874
00:29:57,120 --> 00:30:00,879
perhaps and strings related to a command

875
00:29:59,440 --> 00:30:03,039
control server

876
00:30:00,880 --> 00:30:04,480
perhaps something related to file

877
00:30:03,039 --> 00:30:06,559
encryption key logging

878
00:30:04,480 --> 00:30:08,000
and probably most interestingly we have

879
00:30:06,559 --> 00:30:11,279
a path that if

880
00:30:08,000 --> 00:30:13,760
we swap turns out to be a path

881
00:30:11,279 --> 00:30:14,399
that that turns into the english word or

882
00:30:13,760 --> 00:30:17,440
phrase

883
00:30:14,399 --> 00:30:19,600
effective idiot or e.i and and

884
00:30:17,440 --> 00:30:21,679
we'll see as we analyze the restless

885
00:30:19,600 --> 00:30:22,799
malware they use this ei string a lot so

886
00:30:21,679 --> 00:30:24,720
this is likely the

887
00:30:22,799 --> 00:30:26,000
internal name that the malware author

888
00:30:24,720 --> 00:30:29,200
gave their creation

889
00:30:26,000 --> 00:30:31,520
effective idiot kind of humorous

890
00:30:29,200 --> 00:30:33,279
we can also run the nm utility this is

891
00:30:31,520 --> 00:30:35,918
another utility that mac os

892
00:30:33,279 --> 00:30:36,720
ships with and this can extract embedded

893
00:30:35,919 --> 00:30:39,840
symbols

894
00:30:36,720 --> 00:30:40,399
and apis that the malware imports these

895
00:30:39,840 --> 00:30:43,039
api

896
00:30:40,399 --> 00:30:44,080
imports can reveal the malware's likely

897
00:30:43,039 --> 00:30:46,720
capability

898
00:30:44,080 --> 00:30:48,000
for example we can see apis related to

899
00:30:46,720 --> 00:30:49,679
capturing keystrokes

900
00:30:48,000 --> 00:30:51,840
so we can assume that the malware has

901
00:30:49,679 --> 00:30:53,919
key logging capabilities

902
00:30:51,840 --> 00:30:56,000
but even more insightful we can see the

903
00:30:53,919 --> 00:30:58,000
actual names of the malware's

904
00:30:56,000 --> 00:30:59,440
functions and methods which is

905
00:30:58,000 --> 00:31:00,720
interesting this is what the malware

906
00:30:59,440 --> 00:31:02,080
author has named their code

907
00:31:00,720 --> 00:31:04,720
again this gives us a lot of insight

908
00:31:02,080 --> 00:31:06,799
into malware

909
00:31:04,720 --> 00:31:08,480
now when i ran the strings command i i

910
00:31:06,799 --> 00:31:10,000
did notice what appeared to be a lot of

911
00:31:08,480 --> 00:31:11,600
encrypted strings

912
00:31:10,000 --> 00:31:13,679
and this is common malware authors will

913
00:31:11,600 --> 00:31:14,240
often encrypt sensitive strings because

914
00:31:13,679 --> 00:31:16,080
they know

915
00:31:14,240 --> 00:31:17,440
analysts such as myself are going to run

916
00:31:16,080 --> 00:31:18,559
the strings command and try to look at

917
00:31:17,440 --> 00:31:20,559
what the malware does

918
00:31:18,559 --> 00:31:21,678
so it's kind of just an extra layer of

919
00:31:20,559 --> 00:31:24,480
obfuscation to

920
00:31:21,679 --> 00:31:26,480
hinder analysis what we can do though is

921
00:31:24,480 --> 00:31:28,399
we can pop into a disassembler

922
00:31:26,480 --> 00:31:30,080
and we can see that these encrypted

923
00:31:28,399 --> 00:31:32,719
strings are passed to a

924
00:31:30,080 --> 00:31:33,199
function called ei underscore stir again

925
00:31:32,720 --> 00:31:36,240
ei

926
00:31:33,200 --> 00:31:37,200
likely standing for effective idiot i'm

927
00:31:36,240 --> 00:31:40,080
kind of lazy

928
00:31:37,200 --> 00:31:40,480
so instead of trying to understand the

929
00:31:40,080 --> 00:31:43,039
string

930
00:31:40,480 --> 00:31:44,880
decryption routine i just created an

931
00:31:43,039 --> 00:31:47,200
injectable dynamic library

932
00:31:44,880 --> 00:31:47,919
that once loaded into the context of the

933
00:31:47,200 --> 00:31:50,240
malware

934
00:31:47,919 --> 00:31:52,000
would resolve this decryption function

935
00:31:50,240 --> 00:31:53,279
and then just invoke it on all of the

936
00:31:52,000 --> 00:31:54,880
encrypted strings

937
00:31:53,279 --> 00:31:57,039
so in other words i let the malware

938
00:31:54,880 --> 00:31:58,960
decrypt the strings for me

939
00:31:57,039 --> 00:32:00,320
and we can see these decrypted strings

940
00:31:58,960 --> 00:32:02,880
are rather revealing

941
00:32:00,320 --> 00:32:03,678
we can see what appear to be urls and ip

942
00:32:02,880 --> 00:32:06,799
addresses

943
00:32:03,679 --> 00:32:07,360
likely of command and control servers we

944
00:32:06,799 --> 00:32:10,000
also see

945
00:32:07,360 --> 00:32:12,240
a launch item property list a list of

946
00:32:10,000 --> 00:32:14,399
security applications and perhaps

947
00:32:12,240 --> 00:32:17,039
ransom instructions again very

948
00:32:14,399 --> 00:32:19,760
interesting very insightful

949
00:32:17,039 --> 00:32:20,399
finally during this initial triage we

950
00:32:19,760 --> 00:32:23,440
encounter

951
00:32:20,399 --> 00:32:24,399
various anti-analysis logic we see a

952
00:32:23,440 --> 00:32:27,279
function named

953
00:32:24,399 --> 00:32:29,279
is virtual machine that attempts to

954
00:32:27,279 --> 00:32:30,080
detect if the malware is running within

955
00:32:29,279 --> 00:32:32,320
a sandbox

956
00:32:30,080 --> 00:32:33,519
and if so we'll exit and we also see a

957
00:32:32,320 --> 00:32:36,879
function named

958
00:32:33,519 --> 00:32:39,679
is debugging and prevent trace which

959
00:32:36,880 --> 00:32:40,640
seek to prevent successful debugging of

960
00:32:39,679 --> 00:32:42,159
malware

961
00:32:40,640 --> 00:32:44,240
now it's important for us to identify

962
00:32:42,159 --> 00:32:44,880
these because if we don't and we try to

963
00:32:44,240 --> 00:32:46,559
debug

964
00:32:44,880 --> 00:32:48,640
the malware the malware would detect

965
00:32:46,559 --> 00:32:51,840
that it's being debugged and exit or

966
00:32:48,640 --> 00:32:53,440
kick us out luckily though once we have

967
00:32:51,840 --> 00:32:56,080
identified these functions

968
00:32:53,440 --> 00:32:58,399
turns out really easy to bypass them we

969
00:32:56,080 --> 00:32:59,840
simply set a breakpoint on the function

970
00:32:58,399 --> 00:33:01,600
and then when the malware is about to

971
00:32:59,840 --> 00:33:03,519
execute them we can change the

972
00:33:01,600 --> 00:33:06,399
instruction pointer and skip over them

973
00:33:03,519 --> 00:33:09,279
so this anti-analysis logic is never

974
00:33:06,399 --> 00:33:09,279
actually executed

975
00:33:09,360 --> 00:33:13,439
so once we've bypassed the anti-analysis

976
00:33:12,159 --> 00:33:15,760
logic of this malware

977
00:33:13,440 --> 00:33:16,960
and also decrypted all the encrypted

978
00:33:15,760 --> 00:33:20,000
strings

979
00:33:16,960 --> 00:33:21,519
our full analysis can commence so let's

980
00:33:20,000 --> 00:33:24,559
start by discussing

981
00:33:21,519 --> 00:33:27,120
and analyzing its persistence mechanism

982
00:33:24,559 --> 00:33:28,240
so persistence in the context of this

983
00:33:27,120 --> 00:33:30,879
presentation

984
00:33:28,240 --> 00:33:33,440
is the mechanism the malware uses to

985
00:33:30,880 --> 00:33:35,840
ensure that every time the user is

986
00:33:33,440 --> 00:33:36,640
the system is restarted the malware is

987
00:33:35,840 --> 00:33:38,399
automatically

988
00:33:36,640 --> 00:33:40,320
relaunched or re-executed by the

989
00:33:38,399 --> 00:33:42,479
operating system

990
00:33:40,320 --> 00:33:44,080
so if we look at the malware we find a

991
00:33:42,480 --> 00:33:46,880
function named ei

992
00:33:44,080 --> 00:33:47,519
persistence main and we can see them our

993
00:33:46,880 --> 00:33:49,919
first

994
00:33:47,519 --> 00:33:50,799
executing this anti-debugging logic we

995
00:33:49,919 --> 00:33:52,559
talked about

996
00:33:50,799 --> 00:33:54,399
which will simply skip over we don't

997
00:33:52,559 --> 00:33:56,559
want it to execute

998
00:33:54,399 --> 00:33:58,559
it also then enumerates all running

999
00:33:56,559 --> 00:33:59,039
processes looking for popular security

1000
00:33:58,559 --> 00:34:00,559
tools

1001
00:33:59,039 --> 00:34:02,080
and if these security tools are found

1002
00:34:00,559 --> 00:34:03,840
the malware will kill them

1003
00:34:02,080 --> 00:34:06,000
this is likely because some of these

1004
00:34:03,840 --> 00:34:08,239
tools may detect the malware subsequent

1005
00:34:06,000 --> 00:34:09,520
actions so the malware will proactively

1006
00:34:08,239 --> 00:34:10,319
kill them to make sure they don't get in

1007
00:34:09,520 --> 00:34:13,520
the way

1008
00:34:10,320 --> 00:34:16,800
interesting it then invokes a function

1009
00:34:13,520 --> 00:34:18,399
named persist executable and via a file

1010
00:34:16,800 --> 00:34:20,240
monitor we can

1011
00:34:18,399 --> 00:34:22,560
observe the malware making a copy of

1012
00:34:20,239 --> 00:34:25,118
itself

1013
00:34:22,560 --> 00:34:26,239
malware then invokes a method called

1014
00:34:25,119 --> 00:34:28,639
install daemon

1015
00:34:26,239 --> 00:34:29,678
to persist itself both as a launch agent

1016
00:34:28,639 --> 00:34:33,359
and a launch standard

1017
00:34:29,679 --> 00:34:35,119
so it persists itself twice if we recall

1018
00:34:33,359 --> 00:34:36,480
we talked about this before but the

1019
00:34:35,119 --> 00:34:38,320
property list for these

1020
00:34:36,480 --> 00:34:39,520
launch items was stored embedded

1021
00:34:38,320 --> 00:34:42,320
encrypted when

1022
00:34:39,520 --> 00:34:43,679
within the malware what we can do though

1023
00:34:42,320 --> 00:34:46,000
is we can allow the malware to

1024
00:34:43,679 --> 00:34:47,280
execute this this function and then we

1025
00:34:46,000 --> 00:34:49,679
can simply uh

1026
00:34:47,280 --> 00:34:51,919
hop into the file system and look at the

1027
00:34:49,679 --> 00:34:54,399
property list that was created on disk

1028
00:34:51,918 --> 00:34:55,118
obviously in a virtual machine we can

1029
00:34:54,399 --> 00:34:57,040
see that the

1030
00:34:55,119 --> 00:34:59,440
run at load key is set to true which

1031
00:34:57,040 --> 00:35:01,520
tells mac os please automatically start

1032
00:34:59,440 --> 00:35:03,680
the malware every time the system is

1033
00:35:01,520 --> 00:35:04,960
launched and then the malware kicks off

1034
00:35:03,680 --> 00:35:07,440
itself the first time

1035
00:35:04,960 --> 00:35:09,359
via applescript so now the malware is

1036
00:35:07,440 --> 00:35:11,440
off and running

1037
00:35:09,359 --> 00:35:12,560
so since we understand how the malware

1038
00:35:11,440 --> 00:35:15,119
persists

1039
00:35:12,560 --> 00:35:17,040
let's talk about its capabilities it's

1040
00:35:15,119 --> 00:35:19,119
goals

1041
00:35:17,040 --> 00:35:20,400
the first thing it does is it connects

1042
00:35:19,119 --> 00:35:22,240
out to

1043
00:35:20,400 --> 00:35:24,480
look for a command and control server to

1044
00:35:22,240 --> 00:35:27,680
check in and ask if the attacker has

1045
00:35:24,480 --> 00:35:28,720
any tasking for this so what the malware

1046
00:35:27,680 --> 00:35:31,440
does is decrypt

1047
00:35:28,720 --> 00:35:33,839
a hard-coded address of a url that's

1048
00:35:31,440 --> 00:35:36,320
hosted on pythonanywhere.com

1049
00:35:33,839 --> 00:35:37,599
and then connects out to this url to

1050
00:35:36,320 --> 00:35:40,880
look for a file num

1051
00:35:37,599 --> 00:35:42,320
named rec.text this file contains the

1052
00:35:40,880 --> 00:35:43,520
address of the attacker's command

1053
00:35:42,320 --> 00:35:44,880
control server

1054
00:35:43,520 --> 00:35:46,320
this means the attacker can change

1055
00:35:44,880 --> 00:35:48,160
obviously their command control server

1056
00:35:46,320 --> 00:35:51,599
by editing this rec.text

1057
00:35:48,160 --> 00:35:52,319
file now if either of these urls are

1058
00:35:51,599 --> 00:35:55,280
offline

1059
00:35:52,320 --> 00:35:58,720
malware also has a hard-coded backup

1060
00:35:55,280 --> 00:36:00,560
command control store one of the first

1061
00:35:58,720 --> 00:36:01,520
actions the malware takes once it's

1062
00:36:00,560 --> 00:36:03,920
checked in

1063
00:36:01,520 --> 00:36:05,839
is to generate and exfiltrate a

1064
00:36:03,920 --> 00:36:08,320
recursive directory listing of

1065
00:36:05,839 --> 00:36:09,040
an infected system in a debugger we can

1066
00:36:08,320 --> 00:36:11,200
watch this

1067
00:36:09,040 --> 00:36:12,079
in action we can note that the root

1068
00:36:11,200 --> 00:36:14,640
directory

1069
00:36:12,079 --> 00:36:16,320
begins at slash users so i'll enumerate

1070
00:36:14,640 --> 00:36:19,759
the user's directory listing

1071
00:36:16,320 --> 00:36:22,000
upload that to the attackers server

1072
00:36:19,760 --> 00:36:22,800
the malware also searches for various

1073
00:36:22,000 --> 00:36:25,040
files that

1074
00:36:22,800 --> 00:36:26,160
match a list of embedded regular

1075
00:36:25,040 --> 00:36:29,040
expressions

1076
00:36:26,160 --> 00:36:31,520
that we can see on the slide from these

1077
00:36:29,040 --> 00:36:32,800
reg x's we can see that the malware has

1078
00:36:31,520 --> 00:36:35,119
a propensity for

1079
00:36:32,800 --> 00:36:36,000
certificates and cryptocurrency keys and

1080
00:36:35,119 --> 00:36:37,680
wallets

1081
00:36:36,000 --> 00:36:39,119
attacker is obviously very interested in

1082
00:36:37,680 --> 00:36:41,520
those files

1083
00:36:39,119 --> 00:36:42,880
so what we can do is we can test this by

1084
00:36:41,520 --> 00:36:45,759
creating a file named

1085
00:36:42,880 --> 00:36:46,960
key.png for example on the desktop of an

1086
00:36:45,760 --> 00:36:48,960
infected system

1087
00:36:46,960 --> 00:36:51,119
and then in a debugger we can observe

1088
00:36:48,960 --> 00:36:51,839
the malware detecting this file because

1089
00:36:51,119 --> 00:36:53,760
it matches

1090
00:36:51,839 --> 00:36:55,839
one of those regular expressions

1091
00:36:53,760 --> 00:36:56,320
scooping it up and exfiltrating it to

1092
00:36:55,839 --> 00:36:58,320
the

1093
00:36:56,320 --> 00:37:00,160
attacker so if your system is infected

1094
00:36:58,320 --> 00:37:01,599
with this it's likely the attacker has

1095
00:37:00,160 --> 00:37:02,879
access to all your cryptocurrency

1096
00:37:01,599 --> 00:37:06,320
wallets and keys

1097
00:37:02,880 --> 00:37:07,280
bummer the malware also supports a

1098
00:37:06,320 --> 00:37:10,560
handful of

1099
00:37:07,280 --> 00:37:13,599
commands to allow the attacker

1100
00:37:10,560 --> 00:37:15,440
complete and continuing access we can

1101
00:37:13,599 --> 00:37:17,200
see on the slide some of the logic in

1102
00:37:15,440 --> 00:37:20,000
the malware that

1103
00:37:17,200 --> 00:37:20,560
handles this specifically once it gets a

1104
00:37:20,000 --> 00:37:22,400
command

1105
00:37:20,560 --> 00:37:24,000
from the command control server it

1106
00:37:22,400 --> 00:37:27,119
invokes a method named

1107
00:37:24,000 --> 00:37:28,880
dispatch and i've mentioned or put the

1108
00:37:27,119 --> 00:37:30,000
commands that the malware supports on

1109
00:37:28,880 --> 00:37:31,760
the slide

1110
00:37:30,000 --> 00:37:33,280
but we can see it's basic things like

1111
00:37:31,760 --> 00:37:36,000
download execute

1112
00:37:33,280 --> 00:37:37,520
kicking off a keylogger now i do want to

1113
00:37:36,000 --> 00:37:38,560
briefly mention one of the commands

1114
00:37:37,520 --> 00:37:41,359
command number one

1115
00:37:38,560 --> 00:37:42,078
which is named react exec and this

1116
00:37:41,359 --> 00:37:44,480
executes

1117
00:37:42,079 --> 00:37:45,359
a function which the malware author has

1118
00:37:44,480 --> 00:37:47,920
named ei

1119
00:37:45,359 --> 00:37:48,640
underscore run underscore memory which

1120
00:37:47,920 --> 00:37:51,200
executes

1121
00:37:48,640 --> 00:37:52,720
a decrypted payload downloaded from the

1122
00:37:51,200 --> 00:37:56,078
command control server

1123
00:37:52,720 --> 00:37:58,319
directly from memory now i talked about

1124
00:37:56,079 --> 00:38:00,000
this technique at black hat a while back

1125
00:37:58,320 --> 00:38:01,920
in 2015 or so

1126
00:38:00,000 --> 00:38:04,320
clearly though the benefit is the

1127
00:38:01,920 --> 00:38:06,240
decrypted payloads never hit the disk

1128
00:38:04,320 --> 00:38:08,400
this means they can't be scanned by an

1129
00:38:06,240 --> 00:38:10,160
antivirus engine or grabbed for

1130
00:38:08,400 --> 00:38:12,320
forensics analysis it's a rather

1131
00:38:10,160 --> 00:38:15,279
sophisticated elegant technique

1132
00:38:12,320 --> 00:38:16,400
from the malware point of view the

1133
00:38:15,280 --> 00:38:19,760
malware author

1134
00:38:16,400 --> 00:38:22,000
also supports ransomware logic

1135
00:38:19,760 --> 00:38:23,520
logic is pretty standard pretty standard

1136
00:38:22,000 --> 00:38:26,240
ransomware logic

1137
00:38:23,520 --> 00:38:27,839
what it does is it enumerates all files

1138
00:38:26,240 --> 00:38:30,479
on the system that match

1139
00:38:27,839 --> 00:38:32,240
a list of file extensions file

1140
00:38:30,480 --> 00:38:35,520
extensions such as documents

1141
00:38:32,240 --> 00:38:38,640
html documents uh music essentially

1142
00:38:35,520 --> 00:38:39,680
the user's files right then invokes a

1143
00:38:38,640 --> 00:38:42,799
method named

1144
00:38:39,680 --> 00:38:43,200
carve target for each of these files and

1145
00:38:42,800 --> 00:38:45,839
what

1146
00:38:43,200 --> 00:38:47,680
this does is it reads the contents of

1147
00:38:45,839 --> 00:38:50,480
the file into memory

1148
00:38:47,680 --> 00:38:52,078
encrypts it writes the encrypted content

1149
00:38:50,480 --> 00:38:53,839
out to a temporary file

1150
00:38:52,079 --> 00:38:55,760
deletes the original file and then

1151
00:38:53,839 --> 00:38:59,119
renames the temporary file

1152
00:38:55,760 --> 00:39:02,480
end result is the original file is

1153
00:38:59,119 --> 00:39:04,800
encrypted once the

1154
00:39:02,480 --> 00:39:05,839
files have all been encrypted the

1155
00:39:04,800 --> 00:39:07,680
ransomware

1156
00:39:05,839 --> 00:39:08,880
or the malware logic the ransomware

1157
00:39:07,680 --> 00:39:11,919
logic in the malware

1158
00:39:08,880 --> 00:39:14,160
creates a readme text document and also

1159
00:39:11,920 --> 00:39:15,760
displays an alert to the user and it's

1160
00:39:14,160 --> 00:39:16,240
kind of funny because the malware then

1161
00:39:15,760 --> 00:39:19,280
also

1162
00:39:16,240 --> 00:39:20,879
reads this out loud so use mac os's

1163
00:39:19,280 --> 00:39:22,560
built-in speech capabilities

1164
00:39:20,880 --> 00:39:24,400
so all of a sudden your computer will

1165
00:39:22,560 --> 00:39:26,240
start talking to you telling you that

1166
00:39:24,400 --> 00:39:28,320
all your files are encrypted

1167
00:39:26,240 --> 00:39:29,839
good news is some research figured out

1168
00:39:28,320 --> 00:39:32,240
that the keying material

1169
00:39:29,839 --> 00:39:33,759
that's stored within the encrypted files

1170
00:39:32,240 --> 00:39:35,598
is actually enough to decrypt

1171
00:39:33,760 --> 00:39:36,880
the files so you really don't actually

1172
00:39:35,599 --> 00:39:41,119
even have to pay for

1173
00:39:36,880 --> 00:39:42,320
the ransomware decryption

1174
00:39:41,119 --> 00:39:44,000
now i wanted to save the best of the

1175
00:39:42,320 --> 00:39:44,800
last which i what i think is the best of

1176
00:39:44,000 --> 00:39:46,960
the last

1177
00:39:44,800 --> 00:39:48,320
and this is that even quest this smaller

1178
00:39:46,960 --> 00:39:49,920
sample we've been analyzing

1179
00:39:48,320 --> 00:39:51,839
appears to be the first or perhaps the

1180
00:39:49,920 --> 00:39:53,839
first in the wild computer virus

1181
00:39:51,839 --> 00:39:56,000
targeting mac os so i have the

1182
00:39:53,839 --> 00:39:56,640
definition of a computer virus on the

1183
00:39:56,000 --> 00:40:00,000
slide

1184
00:39:56,640 --> 00:40:02,240
and basically it says that once a virus

1185
00:40:00,000 --> 00:40:03,599
gains access to a system it will infect

1186
00:40:02,240 --> 00:40:06,319
other files

1187
00:40:03,599 --> 00:40:07,839
on the system replicating itself most

1188
00:40:06,319 --> 00:40:08,640
malware if not all malware that affects

1189
00:40:07,839 --> 00:40:11,920
mac os

1190
00:40:08,640 --> 00:40:12,799
does not do this so specifically in a

1191
00:40:11,920 --> 00:40:15,440
background thread

1192
00:40:12,800 --> 00:40:16,160
the malware invokes a function named get

1193
00:40:15,440 --> 00:40:18,319
targets

1194
00:40:16,160 --> 00:40:19,598
to get a list of executables on the

1195
00:40:18,319 --> 00:40:21,920
infected system

1196
00:40:19,599 --> 00:40:24,000
and then for each of these executables

1197
00:40:21,920 --> 00:40:27,440
it invokes a function named append

1198
00:40:24,000 --> 00:40:31,440
e i e i again being effective idiot

1199
00:40:27,440 --> 00:40:34,400
as its name implies append ei

1200
00:40:31,440 --> 00:40:35,920
appends itself into each of these

1201
00:40:34,400 --> 00:40:37,760
executables

1202
00:40:35,920 --> 00:40:39,119
more specifically it inserts itself into

1203
00:40:37,760 --> 00:40:40,880
the start

1204
00:40:39,119 --> 00:40:44,319
of the executable and then adds a

1205
00:40:40,880 --> 00:40:46,560
trailer that points to the original code

1206
00:40:44,319 --> 00:40:47,680
this means that whenever these infected

1207
00:40:46,560 --> 00:40:49,920
binaries are run

1208
00:40:47,680 --> 00:40:52,078
either by the user or by the operating

1209
00:40:49,920 --> 00:40:55,280
system the viral code at the start

1210
00:40:52,079 --> 00:40:57,680
will execute first now to ensure

1211
00:40:55,280 --> 00:40:59,520
nothing appears amiss the virus then

1212
00:40:57,680 --> 00:41:02,319
writes out the original code

1213
00:40:59,520 --> 00:41:03,040
and executes this this is not super

1214
00:41:02,319 --> 00:41:05,680
stealthy

1215
00:41:03,040 --> 00:41:06,640
but it has the benefit of restoring the

1216
00:41:05,680 --> 00:41:09,200
code signing

1217
00:41:06,640 --> 00:41:10,240
signature of the original file which

1218
00:41:09,200 --> 00:41:12,319
must be intact

1219
00:41:10,240 --> 00:41:13,439
if that original binary contains code

1220
00:41:12,319 --> 00:41:17,359
signing entitlements

1221
00:41:13,440 --> 00:41:17,359
so this ensures that nothing is broken

1222
00:41:17,440 --> 00:41:20,480
interestingly the malware continues to

1223
00:41:19,040 --> 00:41:22,720
evolve

1224
00:41:20,480 --> 00:41:23,520
trend micro recently published a great

1225
00:41:22,720 --> 00:41:26,000
report

1226
00:41:23,520 --> 00:41:26,800
on the updates of evil quest showing

1227
00:41:26,000 --> 00:41:30,000
that it

1228
00:41:26,800 --> 00:41:31,680
has now improved anti-analysis logic new

1229
00:41:30,000 --> 00:41:32,800
capabilities and interestingly the

1230
00:41:31,680 --> 00:41:35,759
ransomware logic

1231
00:41:32,800 --> 00:41:36,560
is gone however the coolest part about

1232
00:41:35,760 --> 00:41:38,960
this update

1233
00:41:36,560 --> 00:41:39,839
is in the ping command which now says

1234
00:41:38,960 --> 00:41:43,119
hello

1235
00:41:39,839 --> 00:41:46,319
patrick apparently the malware authors

1236
00:41:43,119 --> 00:41:47,599
read some of my initial work honestly

1237
00:41:46,319 --> 00:41:48,960
i've always kind of wanted a shout out

1238
00:41:47,599 --> 00:41:50,560
in a computer virus

1239
00:41:48,960 --> 00:41:53,280
i don't know if that's wrong but i think

1240
00:41:50,560 --> 00:41:53,279
this is pretty awesome

1241
00:41:53,680 --> 00:41:57,200
all right so we've talked about hacking

1242
00:41:56,000 --> 00:41:58,720
macs

1243
00:41:57,200 --> 00:42:00,560
and a new computer virus that could

1244
00:41:58,720 --> 00:42:02,160
easily be installed as the payload of

1245
00:42:00,560 --> 00:42:04,160
this attack

1246
00:42:02,160 --> 00:42:06,240
let's end by talking about defending

1247
00:42:04,160 --> 00:42:07,118
against these attacks and some generic

1248
00:42:06,240 --> 00:42:10,319
methods of

1249
00:42:07,119 --> 00:42:10,960
detections first up the vulnerabilities

1250
00:42:10,319 --> 00:42:13,440
i found

1251
00:42:10,960 --> 00:42:15,200
i responsibly reported these to both

1252
00:42:13,440 --> 00:42:17,280
microsoft and apple

1253
00:42:15,200 --> 00:42:18,720
good news is they're now fully patched

1254
00:42:17,280 --> 00:42:20,079
so as always it's really important to

1255
00:42:18,720 --> 00:42:23,279
always keep your mac os

1256
00:42:20,079 --> 00:42:25,200
system up to date

1257
00:42:23,280 --> 00:42:26,640
so now how do we defend against these

1258
00:42:25,200 --> 00:42:29,759
attacks in malware

1259
00:42:26,640 --> 00:42:30,560
well the short answer is by monitoring

1260
00:42:29,760 --> 00:42:33,440
and detecting

1261
00:42:30,560 --> 00:42:34,240
anomalous system activity and to do such

1262
00:42:33,440 --> 00:42:36,480
monitoring

1263
00:42:34,240 --> 00:42:37,759
we can use apple's new endpoint security

1264
00:42:36,480 --> 00:42:39,760
framework

1265
00:42:37,760 --> 00:42:41,920
and as apple states this is an api a

1266
00:42:39,760 --> 00:42:44,079
framework for monitoring system vents to

1267
00:42:41,920 --> 00:42:46,319
detect malicious activities

1268
00:42:44,079 --> 00:42:47,119
i've also written some tutorials about

1269
00:42:46,319 --> 00:42:50,079
this topic

1270
00:42:47,119 --> 00:42:51,680
as well so first up we want to be able

1271
00:42:50,079 --> 00:42:54,480
to detect

1272
00:42:51,680 --> 00:42:54,799
suspicious process events and we can do

1273
00:42:54,480 --> 00:42:56,480
that

1274
00:42:54,800 --> 00:42:58,480
again using apple's new endpoint

1275
00:42:56,480 --> 00:43:00,720
security framework it's really easy to

1276
00:42:58,480 --> 00:43:03,520
create a process monitor that can detect

1277
00:43:00,720 --> 00:43:05,439
suspicious children we can see on the

1278
00:43:03,520 --> 00:43:08,319
slide we can now detect when an

1279
00:43:05,440 --> 00:43:09,520
office application for example excel

1280
00:43:08,319 --> 00:43:12,480
spawns a child

1281
00:43:09,520 --> 00:43:13,839
process that is well suspicious

1282
00:43:12,480 --> 00:43:16,560
regardless of the reason

1283
00:43:13,839 --> 00:43:17,119
if you see excel spawning curl or python

1284
00:43:16,560 --> 00:43:19,920
like

1285
00:43:17,119 --> 00:43:20,480
that's bad news something is a miss

1286
00:43:19,920 --> 00:43:23,520
patrick

1287
00:43:20,480 --> 00:43:25,760
might be trying to hack your mac

1288
00:43:23,520 --> 00:43:28,000
we can also detect a wide range of

1289
00:43:25,760 --> 00:43:30,160
attacks including the exploit chain we

1290
00:43:28,000 --> 00:43:31,280
described by monitoring the file system

1291
00:43:30,160 --> 00:43:32,960
for persistence

1292
00:43:31,280 --> 00:43:34,720
again using apple's new endpoint

1293
00:43:32,960 --> 00:43:35,599
security framework we can monitor for

1294
00:43:34,720 --> 00:43:37,200
file events

1295
00:43:35,599 --> 00:43:39,200
specifically ones that relate to

1296
00:43:37,200 --> 00:43:40,319
persistence such as the creation of a

1297
00:43:39,200 --> 00:43:42,000
login item

1298
00:43:40,319 --> 00:43:43,599
so here for example we can see the

1299
00:43:42,000 --> 00:43:45,680
creation of a login item

1300
00:43:43,599 --> 00:43:46,720
that is not in fact an application but a

1301
00:43:45,680 --> 00:43:48,399
zip file

1302
00:43:46,720 --> 00:43:50,720
again this is very suspicious and in

1303
00:43:48,400 --> 00:43:53,839
this case is indicative of the sandbox

1304
00:43:50,720 --> 00:43:56,879
escape we talked about earlier

1305
00:43:53,839 --> 00:44:00,240
on to detecting malware even now

1306
00:43:56,880 --> 00:44:02,560
malware such as evil quest is really not

1307
00:44:00,240 --> 00:44:04,479
that hard to detect if we focus on

1308
00:44:02,560 --> 00:44:07,520
behavior-based detections versus

1309
00:44:04,480 --> 00:44:08,000
static signatures first it's pretty

1310
00:44:07,520 --> 00:44:10,720
trivial

1311
00:44:08,000 --> 00:44:12,000
to detect the malware's persistence it's

1312
00:44:10,720 --> 00:44:14,480
an unsigned launch

1313
00:44:12,000 --> 00:44:15,599
item masquerading as an apple binary

1314
00:44:14,480 --> 00:44:17,599
this is really shady

1315
00:44:15,599 --> 00:44:19,359
all apple binaries are signed so this is

1316
00:44:17,599 --> 00:44:21,839
a huge red flag

1317
00:44:19,359 --> 00:44:23,040
we can also detect its ransomware logic

1318
00:44:21,839 --> 00:44:25,920
by detecting the

1319
00:44:23,040 --> 00:44:26,720
rapid creation of encrypted files by an

1320
00:44:25,920 --> 00:44:29,040
unprocessed

1321
00:44:26,720 --> 00:44:29,759
untrusted process again this is a very

1322
00:44:29,040 --> 00:44:32,720
suspicious

1323
00:44:29,760 --> 00:44:33,599
shady action finally if we're monitoring

1324
00:44:32,720 --> 00:44:35,598
network traffic

1325
00:44:33,599 --> 00:44:37,599
for example via the firewall we can

1326
00:44:35,599 --> 00:44:39,760
detect unauthorized network

1327
00:44:37,599 --> 00:44:40,720
connections so either individually or

1328
00:44:39,760 --> 00:44:43,200
cumulatively

1329
00:44:40,720 --> 00:44:44,799
we can use these malicious the

1330
00:44:43,200 --> 00:44:46,000
observations of these malicious

1331
00:44:44,800 --> 00:44:47,520
activities to detect

1332
00:44:46,000 --> 00:44:49,200
something is amiss and uncover the

1333
00:44:47,520 --> 00:44:51,920
malware even if we've never seen this

1334
00:44:49,200 --> 00:44:55,279
specific malware specimen before

1335
00:44:51,920 --> 00:44:57,680
all right let's wrap this up so today

1336
00:44:55,280 --> 00:44:59,839
we illustrated that attackers are now

1337
00:44:57,680 --> 00:45:00,480
more than ever targeting mac os users

1338
00:44:59,839 --> 00:45:02,960
often with

1339
00:45:00,480 --> 00:45:04,880
malicious office documents and while

1340
00:45:02,960 --> 00:45:07,599
their attacks are rather lame

1341
00:45:04,880 --> 00:45:08,800
we created a lovely exploit chain that

1342
00:45:07,599 --> 00:45:12,160
allowed us to infect

1343
00:45:08,800 --> 00:45:13,839
fully patched macos systems attackers

1344
00:45:12,160 --> 00:45:16,399
are also improving their malware

1345
00:45:13,839 --> 00:45:18,078
today we looked at evil quest a new

1346
00:45:16,400 --> 00:45:21,119
sophisticated computer virus

1347
00:45:18,079 --> 00:45:23,280
capable of infecting mac os systems

1348
00:45:21,119 --> 00:45:24,480
however we end by showing that by

1349
00:45:23,280 --> 00:45:26,319
leveraging apple's new

1350
00:45:24,480 --> 00:45:28,079
endpoint security framework we can

1351
00:45:26,319 --> 00:45:31,119
generically detect these and other

1352
00:45:28,079 --> 00:45:32,560
attacks now one more thing i'm excited

1353
00:45:31,119 --> 00:45:35,680
to announce a new book

1354
00:45:32,560 --> 00:45:36,640
the art of mac malware this is a free

1355
00:45:35,680 --> 00:45:39,440
online book

1356
00:45:36,640 --> 00:45:40,319
dedicated to all things about mcmahon so

1357
00:45:39,440 --> 00:45:44,319
if you're interested

1358
00:45:40,319 --> 00:45:46,960
pop over to taomm.org to check it out

1359
00:45:44,319 --> 00:45:48,240
i want to end by thanking you all for

1360
00:45:46,960 --> 00:45:50,000
attending my talk hope you're all

1361
00:45:48,240 --> 00:45:51,279
staying safe and hope to see you all in

1362
00:45:50,000 --> 00:45:53,520
2021

1363
00:45:51,280 --> 00:45:54,400
i also want to thank jam for putting up

1364
00:45:53,520 --> 00:45:56,880
with my

1365
00:45:54,400 --> 00:45:57,839
shenanigans and also all the amazing

1366
00:45:56,880 --> 00:46:00,319
companies who

1367
00:45:57,839 --> 00:46:01,759
support objective-c so again thank you

1368
00:46:00,319 --> 00:46:15,759
so much for attending my talk

1369
00:46:01,760 --> 00:46:17,839
and hope to see you all next year aloha

1370
00:46:15,760 --> 00:46:17,839
you

