1
00:00:00,060 --> 00:00:06,270
have you seen insecure<font color="#CCCCCC"> CF and points</font>

2
00:00:03,319 --> 00:00:08,820
values are<font color="#CCCCCC"> real</font><font color="#E5E5E5"> no more travel it in</font>

3
00:00:06,270 --> 00:00:10,290
<font color="#CCCCCC">tercera Marisa Technica very difficult</font>

4
00:00:08,820 --> 00:00:13,469
<font color="#E5E5E5">since agarose</font><font color="#CCCCCC"> and windows communication</font>

5
00:00:10,290 --> 00:00:15,570
foundation<font color="#E5E5E5"> come explore</font><font color="#CCCCCC"> our los</font><font color="#E5E5E5"> ecomo</font>

6
00:00:13,469 --> 00:00:26,220
<font color="#E5E5E5">aratake</font><font color="#CCCCCC"> cerritos effect la salida this</font>

7
00:00:15,570 --> 00:00:30,990
software<font color="#CCCCCC"> really ok can you</font><font color="#E5E5E5"> guys hear me</font>

8
00:00:26,220 --> 00:00:32,759
<font color="#E5E5E5">fun see</font><font color="#CCCCCC"> alright hello</font><font color="#E5E5E5"> party and thank</font>

9
00:00:30,990 --> 00:00:37,170
<font color="#E5E5E5">you for coming</font><font color="#CCCCCC"> to our presentation on</font>

10
00:00:32,759 --> 00:00:39,960
abusing<font color="#CCCCCC"> unsecure</font><font color="#E5E5E5"> WCF endpoints so my</font>

11
00:00:37,170 --> 00:00:42,750
name is Fabius<font color="#CCCCCC"> watson I</font><font color="#E5E5E5"> worked for this</font>

12
00:00:39,960 --> 00:00:44,700
security<font color="#CCCCCC"> firm out of Atlanta in the u.s.</font>

13
00:00:42,750 --> 00:00:46,739
called<font color="#CCCCCC"> vert</font><font color="#E5E5E5"> spray as the security</font>

14
00:00:44,700 --> 00:00:49,140
research manager my interests include

15
00:00:46,739 --> 00:00:52,070
<font color="#E5E5E5">reverse engineering exploit</font><font color="#CCCCCC"> Devlin</font>

16
00:00:49,140 --> 00:00:54,480
research and<font color="#E5E5E5"> poise post exploitation</font>

17
00:00:52,070 --> 00:00:57,180
<font color="#CCCCCC">before</font><font color="#E5E5E5"> working as a security</font><font color="#CCCCCC"> researcher</font>

18
00:00:54,480 --> 00:00:59,398
I worked as a stock analyst<font color="#CCCCCC"> and I have a</font>

19
00:00:57,180 --> 00:01:04,830
handful<font color="#E5E5E5"> of certifications as you can see</font>

20
00:00:59,399 --> 00:01:06,720
that certify me<font color="#E5E5E5"> as a hacker</font><font color="#CCCCCC"> so an agenda</font>

21
00:01:04,830 --> 00:01:09,658
of<font color="#E5E5E5"> this presentation first I'm gonna go</font>

22
00:01:06,720 --> 00:01:12,420
<font color="#E5E5E5">over a</font><font color="#CCCCCC"> high-level</font><font color="#E5E5E5"> overview of</font><font color="#CCCCCC"> wucf</font>

23
00:01:09,659 --> 00:01:14,369
primarily what relates to attacking<font color="#E5E5E5"> it</font>

24
00:01:12,420 --> 00:01:17,549
none of<font color="#E5E5E5"> the really low-level underlying</font>

25
00:01:14,369 --> 00:01:20,939
stuff<font color="#CCCCCC"> after that</font><font color="#E5E5E5"> I'm</font><font color="#CCCCCC"> going to explore</font>

26
00:01:17,549 --> 00:01:25,140
<font color="#CCCCCC">WCF target enumeration how to find which</font>

27
00:01:20,939 --> 00:01:27,899
applications<font color="#CCCCCC"> use this</font><font color="#E5E5E5"> technology they</font>

28
00:01:25,140 --> 00:01:30,119
now go<font color="#CCCCCC"> over analyzing WCF applications</font>

29
00:01:27,900 --> 00:01:33,030
in order<font color="#E5E5E5"> to identify potentially</font>

30
00:01:30,119 --> 00:01:35,009
vulnerable endpoints<font color="#CCCCCC"> I'll go over abuse</font>

31
00:01:33,030 --> 00:01:36,950
cases and<font color="#E5E5E5"> real world software</font><font color="#CCCCCC"> so that</font>

32
00:01:35,009 --> 00:01:39,869
<font color="#E5E5E5">you can see it's not just</font><font color="#CCCCCC"> an</font>

33
00:01:36,950 --> 00:01:42,450
<font color="#E5E5E5">experimental vulnerability class and</font>

34
00:01:39,869 --> 00:01:44,369
then associated<font color="#CCCCCC"> with those real-world</font>

35
00:01:42,450 --> 00:01:49,950
vulnerabilities I'll go over<font color="#E5E5E5"> some demos</font>

36
00:01:44,369 --> 00:01:52,610
<font color="#CCCCCC">of exploiting</font><font color="#E5E5E5"> unsecure WCF services so</font>

37
00:01:49,950 --> 00:01:56,280
<font color="#E5E5E5">the motivation behind this research</font>

38
00:01:52,610 --> 00:01:59,009
<font color="#CCCCCC">verse sprite was doing some Windows VPN</font>

39
00:01:56,280 --> 00:02:02,159
software auditing<font color="#E5E5E5"> and we noticed that a</font>

40
00:01:59,009 --> 00:02:04,770
lot<font color="#E5E5E5"> of the windows weekend software had</font>

41
00:02:02,159 --> 00:02:06,689
dotnet services we also noticed the

42
00:02:04,770 --> 00:02:12,030
trend<font color="#E5E5E5"> that tons of these services were</font>

43
00:02:06,689 --> 00:02:13,810
exposing<font color="#E5E5E5"> methods using</font><font color="#CCCCCC"> WCF and most of</font>

44
00:02:12,030 --> 00:02:15,760
these<font color="#E5E5E5"> services were</font><font color="#CCCCCC"> also running</font><font color="#E5E5E5"> as low</font>

45
00:02:13,810 --> 00:02:19,239
system which is the highest<font color="#E5E5E5"> privilege</font>

46
00:02:15,760 --> 00:02:21,130
level on Windows operating system so we

47
00:02:19,239 --> 00:02:23,860
investigated<font color="#CCCCCC"> the possibility of abusing</font>

48
00:02:21,130 --> 00:02:27,670
these<font color="#E5E5E5"> end points</font><font color="#CCCCCC"> in</font><font color="#E5E5E5"> order to execute the</font>

49
00:02:23,860 --> 00:02:30,970
<font color="#E5E5E5">privilege</font><font color="#CCCCCC"> methods</font><font color="#E5E5E5"> that were exposed so</font>

50
00:02:27,670 --> 00:02:32,859
what is w CF so WC f stands for windows

51
00:02:30,970 --> 00:02:35,290
communication foundation<font color="#E5E5E5"> it was</font>

52
00:02:32,860 --> 00:02:39,160
originally called<font color="#E5E5E5"> project indigo by</font>

53
00:02:35,290 --> 00:02:41,049
Microsoft<font color="#E5E5E5"> in</font><font color="#CCCCCC"> the 2000 2000</font><font color="#E5E5E5"> which shows</font>

54
00:02:39,160 --> 00:02:44,920
that it's been around<font color="#E5E5E5"> for</font><font color="#CCCCCC"> quite a long</font>

55
00:02:41,050 --> 00:02:47,319
<font color="#CCCCCC">time</font><font color="#E5E5E5"> and it's basically a set of</font><font color="#CCCCCC"> API s</font>

56
00:02:44,920 --> 00:02:50,890
that allow the communication from a

57
00:02:47,319 --> 00:02:54,040
client<font color="#CCCCCC"> to service to be very simple</font><font color="#E5E5E5"> it</font>

58
00:02:50,890 --> 00:02:56,649
supports a handful of protocols TCP HTTP

59
00:02:54,040 --> 00:02:59,650
and you can also build your<font color="#CCCCCC"> own custom</font>

60
00:02:56,650 --> 00:03:03,640
protocol<font color="#E5E5E5"> to work with</font><font color="#CCCCCC"> WCF so Microsoft</font>

61
00:02:59,650 --> 00:03:05,799
<font color="#CCCCCC">tries to make it</font><font color="#E5E5E5"> very inclusive and to</font>

62
00:03:03,640 --> 00:03:09,760
make it simple<font color="#CCCCCC"> WCF clients connect</font><font color="#E5E5E5"> to</font>

63
00:03:05,799 --> 00:03:13,560
WCF services and<font color="#CCCCCC"> WS WCF services perform</font>

64
00:03:09,760 --> 00:03:15,399
operations on behalf of the clients so

65
00:03:13,560 --> 00:03:18,090
right now<font color="#E5E5E5"> I'm going to talk</font><font color="#CCCCCC"> about the</font>

66
00:03:15,400 --> 00:03:21,280
ABC<font color="#CCCCCC"> of</font><font color="#E5E5E5"> wucf this is the core of</font>

67
00:03:18,090 --> 00:03:22,900
communicating<font color="#E5E5E5"> to an</font><font color="#CCCCCC"> endpoint</font><font color="#E5E5E5"> so make</font>

68
00:03:21,280 --> 00:03:24,070
sure to<font color="#E5E5E5"> keep this in</font><font color="#CCCCCC"> mind and</font><font color="#E5E5E5"> I'll go</font>

69
00:03:22,900 --> 00:03:26,769
over<font color="#E5E5E5"> it again throughout this</font>

70
00:03:24,070 --> 00:03:30,910
presentation<font color="#E5E5E5"> so the</font><font color="#CCCCCC"> a of the ABC is</font>

71
00:03:26,769 --> 00:03:33,609
address<font color="#E5E5E5"> the B is binding in the C is</font>

72
00:03:30,910 --> 00:03:36,340
contract<font color="#E5E5E5"> the address is just the</font>

73
00:03:33,609 --> 00:03:38,049
endpoints<font color="#E5E5E5"> URI that represents the</font>

74
00:03:36,340 --> 00:03:40,350
<font color="#E5E5E5">location</font><font color="#CCCCCC"> of the</font><font color="#E5E5E5"> endpoint here's an</font>

75
00:03:38,049 --> 00:03:43,440
example that<font color="#E5E5E5"> I got from Microsoft and</font>

76
00:03:40,350 --> 00:03:47,530
address has four parts<font color="#CCCCCC"> it</font><font color="#E5E5E5"> has a scheme</font>

77
00:03:43,440 --> 00:03:49,660
the<font color="#E5E5E5"> machine name the port number and the</font>

78
00:03:47,530 --> 00:03:51,760
port number<font color="#CCCCCC"> is</font><font color="#E5E5E5"> optional depending if the</font>

79
00:03:49,660 --> 00:03:54,519
<font color="#E5E5E5">binding that</font><font color="#CCCCCC"> you</font><font color="#E5E5E5"> choose that supports</font>

80
00:03:51,760 --> 00:03:56,798
port numbers and finally the path in

81
00:03:54,519 --> 00:03:59,590
this<font color="#E5E5E5"> case it's math service that SVC</font>

82
00:03:56,799 --> 00:04:01,569
because the Microsoft example was a WCF

83
00:03:59,590 --> 00:04:05,230
service that supported a math

84
00:04:01,569 --> 00:04:08,108
functionality the<font color="#E5E5E5"> B of ABC is</font><font color="#CCCCCC"> the</font>

85
00:04:05,230 --> 00:04:10,149
binding the binding determines which

86
00:04:08,109 --> 00:04:11,889
protocol you're using the encoding

87
00:04:10,150 --> 00:04:14,380
scheme as well<font color="#CCCCCC"> as any Transport Security</font>

88
00:04:11,889 --> 00:04:16,510
<font color="#E5E5E5">that you enable here's a list of the</font>

89
00:04:14,380 --> 00:04:18,070
system provided<font color="#E5E5E5"> bindings as you can see</font>

90
00:04:16,510 --> 00:04:20,079
there's a lot of different bindings and

91
00:04:18,070 --> 00:04:23,349
<font color="#E5E5E5">as I mentioned before you</font><font color="#CCCCCC"> can create</font>

92
00:04:20,079 --> 00:04:25,210
your own binding and finally<font color="#CCCCCC"> the C which</font>

93
00:04:23,349 --> 00:04:27,139
is probably the<font color="#CCCCCC"> most important from</font><font color="#E5E5E5"> the</font>

94
00:04:25,210 --> 00:04:28,849
perspective<font color="#E5E5E5"> analysis</font>

95
00:04:27,139 --> 00:04:33,229
<font color="#E5E5E5">tract which defines the service and</font>

96
00:04:28,849 --> 00:04:34,520
operations<font color="#E5E5E5"> exposed by an</font><font color="#CCCCCC"> endpoint so the</font>

97
00:04:33,229 --> 00:04:36,729
service<font color="#CCCCCC"> contract and the code is</font>

98
00:04:34,520 --> 00:04:39,289
identifiable<font color="#E5E5E5"> by the service contract</font>

99
00:04:36,729 --> 00:04:42,020
<font color="#CCCCCC">attribute and the operations by the</font>

100
00:04:39,289 --> 00:04:43,460
operation contract attribute<font color="#CCCCCC"> and here</font>

101
00:04:42,020 --> 00:04:45,378
you<font color="#E5E5E5"> can see that the service name is my</font>

102
00:04:43,460 --> 00:04:48,739
contract<font color="#E5E5E5"> and operation exposed is</font>

103
00:04:45,379 --> 00:04:53,150
populate<font color="#CCCCCC"> data so now they have talked</font>

104
00:04:48,740 --> 00:04:55,939
<font color="#E5E5E5">about the high levels of the ABC of</font><font color="#CCCCCC"> wucf</font>

105
00:04:53,150 --> 00:04:58,878
I'll talk about enumerated argit's for

106
00:04:55,939 --> 00:05:01,969
<font color="#CCCCCC">analysis</font><font color="#E5E5E5"> so whenever you're</font><font color="#CCCCCC"> looking for</font>

107
00:04:58,879 --> 00:05:04,279
a local<font color="#CCCCCC"> WCF target you want</font><font color="#E5E5E5"> to find a</font>

108
00:05:01,969 --> 00:05:05,389
dotnet service that<font color="#E5E5E5"> runs a local system</font>

109
00:05:04,279 --> 00:05:08,270
<font color="#E5E5E5">because</font><font color="#CCCCCC"> that would gain you the most</font>

110
00:05:05,389 --> 00:05:11,000
privileges if<font color="#CCCCCC"> exploited the first way</font>

111
00:05:08,270 --> 00:05:12,438
<font color="#CCCCCC">that we went</font><font color="#E5E5E5"> about finding dotnet</font>

112
00:05:11,000 --> 00:05:15,830
services that were in its<font color="#E5E5E5"> local system</font>

113
00:05:12,439 --> 00:05:19,189
<font color="#E5E5E5">is using SC</font><font color="#CCCCCC"> exe</font><font color="#E5E5E5"> which is used to gain</font>

114
00:05:15,830 --> 00:05:21,409
information<font color="#E5E5E5"> about services so we ran a</font>

115
00:05:19,189 --> 00:05:23,659
SC query which gives a list of<font color="#E5E5E5"> all the</font>

116
00:05:21,409 --> 00:05:25,639
services<font color="#CCCCCC"> and</font><font color="#E5E5E5"> after we got a list of</font>

117
00:05:23,659 --> 00:05:29,710
services we chose a service name and ran

118
00:05:25,639 --> 00:05:32,210
SC QC plus a service name to get<font color="#E5E5E5"> the</font>

119
00:05:29,710 --> 00:05:36,378
user that the services started us as

120
00:05:32,210 --> 00:05:39,229
well as the binary path name as you saw

121
00:05:36,379 --> 00:05:41,300
this this way doesn't always work well

122
00:05:39,229 --> 00:05:44,029
it takes a long time<font color="#CCCCCC"> to guess which</font>

123
00:05:41,300 --> 00:05:46,909
service you<font color="#CCCCCC"> want</font><font color="#E5E5E5"> to look at so</font><font color="#CCCCCC"> we found</font>

124
00:05:44,029 --> 00:05:48,979
a<font color="#E5E5E5"> more efficient</font><font color="#CCCCCC"> way using wmic</font>

125
00:05:46,909 --> 00:05:51,729
we're able<font color="#E5E5E5"> to query for all running</font>

126
00:05:48,979 --> 00:05:54,469
services that run as local system and

127
00:05:51,729 --> 00:05:56,419
we're also able<font color="#CCCCCC"> to filter</font><font color="#E5E5E5"> out service</font>

128
00:05:54,469 --> 00:05:58,669
<font color="#E5E5E5">host exe because we know that</font><font color="#CCCCCC"> this isn't</font>

129
00:05:56,419 --> 00:06:01,909
<font color="#E5E5E5">built with</font><font color="#CCCCCC"> dinah dotnet so it's</font><font color="#E5E5E5"> not</font>

130
00:05:58,669 --> 00:06:03,979
within our scope of targets<font color="#E5E5E5"> and this</font>

131
00:06:01,909 --> 00:06:06,649
returned<font color="#E5E5E5"> only</font><font color="#CCCCCC"> six services it returns</font>

132
00:06:03,979 --> 00:06:09,289
them very<font color="#CCCCCC"> quickly which speeds up</font><font color="#E5E5E5"> the</font>

133
00:06:06,649 --> 00:06:11,360
<font color="#CCCCCC">process of identifying target service</font>

134
00:06:09,289 --> 00:06:12,710
however this still doesn't confirm that

135
00:06:11,360 --> 00:06:17,899
they're built with dotnet only that

136
00:06:12,710 --> 00:06:20,779
they're running as local system next<font color="#E5E5E5"> we</font>

137
00:06:17,899 --> 00:06:24,500
took the fact that dotnet applications

138
00:06:20,779 --> 00:06:27,169
have the dependency of<font color="#CCCCCC"> MS</font><font color="#E5E5E5"> cor e dot</font><font color="#CCCCCC"> DL L</font>

139
00:06:24,500 --> 00:06:28,819
so our approach was<font color="#E5E5E5"> to search for</font><font color="#CCCCCC"> this</font>

140
00:06:27,169 --> 00:06:31,789
<font color="#E5E5E5">string within the binary application</font>

141
00:06:28,819 --> 00:06:34,759
using wmic<font color="#CCCCCC"> fine string in the for loop</font>

142
00:06:31,789 --> 00:06:37,399
<font color="#CCCCCC">all native to</font><font color="#E5E5E5"> the Windows command prompt</font>

143
00:06:34,759 --> 00:06:38,959
in order to only find<font color="#E5E5E5"> the services that</font>

144
00:06:37,399 --> 00:06:39,169
are<font color="#E5E5E5"> running as local system and include</font>

145
00:06:38,959 --> 00:06:42,379
<font color="#E5E5E5">this</font>

146
00:06:39,169 --> 00:06:45,109
string this returned<font color="#E5E5E5"> only the this</font><font color="#CCCCCC"> value</font>

147
00:06:42,379 --> 00:06:46,490
<font color="#CCCCCC">Volm WCF service</font><font color="#E5E5E5"> which will be our</font>

148
00:06:45,110 --> 00:06:49,389
target<font color="#CCCCCC"> upcoming throughout this</font>

149
00:06:46,490 --> 00:06:52,939
presentation<font color="#E5E5E5"> however this is still</font>

150
00:06:49,389 --> 00:06:55,219
liable<font color="#E5E5E5"> to return false positives because</font>

151
00:06:52,939 --> 00:06:57,340
<font color="#CCCCCC">it's</font><font color="#E5E5E5"> just a string search it doesn't</font>

152
00:06:55,219 --> 00:06:59,900
really check to see that it's imported

153
00:06:57,340 --> 00:07:01,969
finally we wrote a<font color="#CCCCCC"> Python script they</font>

154
00:06:59,900 --> 00:07:04,039
use PE<font color="#E5E5E5"> file which is an open source</font>

155
00:07:01,969 --> 00:07:08,150
<font color="#E5E5E5">library for Python that allows you to</font>

156
00:07:04,039 --> 00:07:12,349
gain information about<font color="#E5E5E5"> PE executable</font><font color="#CCCCCC"> and</font>

157
00:07:08,150 --> 00:07:15,498
we<font color="#E5E5E5"> check the import table for MSU</font><font color="#CCCCCC"> o R</font><font color="#E5E5E5"> ie</font>

158
00:07:12,349 --> 00:07:17,419
<font color="#CCCCCC">dll here's a snippet of the</font><font color="#E5E5E5"> code that</font>

159
00:07:15,499 --> 00:07:19,400
<font color="#CCCCCC">actually</font><font color="#E5E5E5"> does this it just iterates</font>

160
00:07:17,419 --> 00:07:20,839
through the list of imports and matches

161
00:07:19,400 --> 00:07:23,419
<font color="#CCCCCC">it and prints out the binary path name</font>

162
00:07:20,839 --> 00:07:25,069
and this way was the most reliable<font color="#E5E5E5"> way</font>

163
00:07:23,419 --> 00:07:27,948
that we found in order to find dotnet

164
00:07:25,069 --> 00:07:30,710
services that start<font color="#E5E5E5"> as local system now</font>

165
00:07:27,949 --> 00:07:32,539
<font color="#E5E5E5">outside of that you can also use a</font>

166
00:07:30,710 --> 00:07:34,549
graphical tool process<font color="#E5E5E5"> Explorer from</font>

167
00:07:32,539 --> 00:07:37,568
sysinternals<font color="#CCCCCC"> and there's an option</font>

168
00:07:34,550 --> 00:07:39,979
<font color="#CCCCCC">called configure color</font><font color="#E5E5E5"> you can configure</font>

169
00:07:37,569 --> 00:07:41,900
<font color="#E5E5E5">process Explorer to show dotnet</font>

170
00:07:39,979 --> 00:07:44,659
applications and services with<font color="#CCCCCC"> the</font>

171
00:07:41,900 --> 00:07:47,359
yellow<font color="#CCCCCC"> background so as you</font><font color="#E5E5E5"> can</font><font color="#CCCCCC"> see here</font>

172
00:07:44,659 --> 00:07:49,819
<font color="#E5E5E5">we ran it and boned up</font><font color="#CCCCCC"> CF service has a</font>

173
00:07:47,360 --> 00:07:51,800
yellow background<font color="#CCCCCC"> we</font><font color="#E5E5E5"> can also see</font><font color="#CCCCCC"> that</font>

174
00:07:49,819 --> 00:07:54,979
it's<font color="#E5E5E5"> running as NC Authority system</font><font color="#CCCCCC"> and</font>

175
00:07:51,800 --> 00:07:58,129
<font color="#E5E5E5">usually if done an application is</font>

176
00:07:54,979 --> 00:08:00,589
running<font color="#CCCCCC"> this</font><font color="#E5E5E5"> system then it's a dotnet</font>

177
00:07:58,129 --> 00:08:04,149
<font color="#E5E5E5">or it's a dotnet service rather than</font>

178
00:08:00,589 --> 00:08:07,189
just a<font color="#E5E5E5"> normal application outside of</font>

179
00:08:04,149 --> 00:08:10,879
searching locally of course<font color="#E5E5E5"> most people</font>

180
00:08:07,189 --> 00:08:13,460
<font color="#E5E5E5">want to find other targets online that</font>

181
00:08:10,879 --> 00:08:15,199
they can<font color="#E5E5E5"> potentially attack I'm</font><font color="#CCCCCC"> going to</font>

182
00:08:13,460 --> 00:08:18,138
go through a few<font color="#CCCCCC"> the</font><font color="#E5E5E5"> methods that we use</font>

183
00:08:15,199 --> 00:08:20,839
<font color="#E5E5E5">they start off pretty bad iteratively</font>

184
00:08:18,139 --> 00:08:22,339
they get a<font color="#E5E5E5"> little bit better</font><font color="#CCCCCC"> not saying</font>

185
00:08:20,839 --> 00:08:23,419
any<font color="#E5E5E5"> of these are the best ways but these</font>

186
00:08:22,339 --> 00:08:26,629
are the<font color="#E5E5E5"> ways</font><font color="#CCCCCC"> that we've gone about</font>

187
00:08:23,419 --> 00:08:28,818
finding remote targets first one is to

188
00:08:26,629 --> 00:08:30,740
search for<font color="#CCCCCC"> applications that are similar</font>

189
00:08:28,819 --> 00:08:33,229
to<font color="#CCCCCC"> ones you know used up CF</font><font color="#E5E5E5"> when we did</font>

190
00:08:30,740 --> 00:08:35,299
our audit of VPN applications<font color="#E5E5E5"> we found</font>

191
00:08:33,229 --> 00:08:37,339
one that<font color="#CCCCCC"> have evolved</font><font color="#E5E5E5"> owner ability in</font>

192
00:08:35,299 --> 00:08:39,019
<font color="#E5E5E5">WCF then we looked at other VPN</font>

193
00:08:37,339 --> 00:08:40,669
applications as<font color="#E5E5E5"> they</font><font color="#CCCCCC"> were</font><font color="#E5E5E5"> doing the same</font>

194
00:08:39,019 --> 00:08:43,250
<font color="#CCCCCC">thing</font><font color="#E5E5E5"> so if you look at similar</font>

195
00:08:40,669 --> 00:08:47,000
applications<font color="#E5E5E5"> then you're likely to find</font>

196
00:08:43,250 --> 00:08:49,190
similar vulnerabilities the next thing

197
00:08:47,000 --> 00:08:51,410
we<font color="#E5E5E5"> did</font><font color="#CCCCCC"> was search for dotnet service or</font>

198
00:08:49,190 --> 00:08:52,550
dotnet agent on<font color="#CCCCCC"> Google we also looked</font>

199
00:08:51,410 --> 00:08:55,040
<font color="#CCCCCC">for dotnet install</font>

200
00:08:52,550 --> 00:08:58,099
installed the<font color="#CCCCCC"> application and saw if any</font>

201
00:08:55,040 --> 00:09:00,140
of the services existed<font color="#E5E5E5"> that used</font><font color="#CCCCCC"> WCF</font>

202
00:08:58,100 --> 00:09:02,360
this approach<font color="#E5E5E5"> wasn't great but it</font><font color="#CCCCCC"> was</font>

203
00:09:00,140 --> 00:09:06,350
fruitful and finding at least<font color="#E5E5E5"> one</font>

204
00:09:02,360 --> 00:09:08,899
<font color="#E5E5E5">horrible application finally the most</font>

205
00:09:06,350 --> 00:09:11,120
recent approach is to look<font color="#E5E5E5"> at</font><font color="#CCCCCC"> WCF</font><font color="#E5E5E5"> error</font>

206
00:09:08,899 --> 00:09:14,420
messages<font color="#E5E5E5"> and finding online people</font>

207
00:09:11,120 --> 00:09:16,370
referencing the error message in an

208
00:09:14,420 --> 00:09:17,540
application<font color="#CCCCCC"> name</font><font color="#E5E5E5"> and that would give you</font>

209
00:09:16,370 --> 00:09:20,450
<font color="#CCCCCC">the information that</font><font color="#E5E5E5"> hey this</font>

210
00:09:17,540 --> 00:09:22,899
application uses<font color="#CCCCCC"> WCF let me take a look</font>

211
00:09:20,450 --> 00:09:25,790
<font color="#E5E5E5">at it as you can see here there's a</font>

212
00:09:22,899 --> 00:09:28,519
error message called<font color="#CCCCCC"> endpoint not found</font>

213
00:09:25,790 --> 00:09:31,430
which<font color="#CCCCCC"> is associated to an application</font>

214
00:09:28,519 --> 00:09:33,410
<font color="#E5E5E5">being unable to reach a WCF service we</font>

215
00:09:31,430 --> 00:09:36,010
<font color="#CCCCCC">search for this particular error message</font>

216
00:09:33,410 --> 00:09:38,240
we filtered out<font color="#E5E5E5"> Stack Overflow and</font>

217
00:09:36,010 --> 00:09:41,029
Microsoft comm because those were

218
00:09:38,240 --> 00:09:42,709
primarily<font color="#E5E5E5"> showing examples of people</font>

219
00:09:41,029 --> 00:09:46,339
trying to develop<font color="#E5E5E5"> using this technology</font>

220
00:09:42,709 --> 00:09:48,680
and the<font color="#CCCCCC"> results are 222</font><font color="#E5E5E5"> thousand results</font>

221
00:09:46,339 --> 00:09:50,810
<font color="#E5E5E5">and using this technique</font><font color="#CCCCCC"> we were able</font><font color="#E5E5E5"> to</font>

222
00:09:48,680 --> 00:09:56,510
find quickly<font color="#E5E5E5"> several applications that</font>

223
00:09:50,810 --> 00:09:58,160
use vulnerable<font color="#CCCCCC"> WCF endpoints</font><font color="#E5E5E5"> so now that</font>

224
00:09:56,510 --> 00:10:00,529
<font color="#E5E5E5">we've talked about how to find the</font>

225
00:09:58,160 --> 00:10:03,380
target<font color="#CCCCCC"> I'm going to talk</font><font color="#E5E5E5"> about how to</font>

226
00:10:00,529 --> 00:10:06,980
analyze<font color="#CCCCCC"> bone WCF service which is</font><font color="#E5E5E5"> the</font>

227
00:10:03,380 --> 00:10:08,870
service<font color="#CCCCCC"> that we found so vulnerable UCF</font>

228
00:10:06,980 --> 00:10:10,490
service is a service<font color="#CCCCCC"> that we</font><font color="#E5E5E5"> developed</font>

229
00:10:08,870 --> 00:10:15,050
to demonstrate<font color="#E5E5E5"> the analysis and</font>

230
00:10:10,490 --> 00:10:17,360
<font color="#CCCCCC">exploitation of abusing WCF endpoints</font><font color="#E5E5E5"> it</font>

231
00:10:15,050 --> 00:10:20,390
can be<font color="#E5E5E5"> found here on github</font><font color="#CCCCCC"> at ver</font>

232
00:10:17,360 --> 00:10:22,490
sprites<font color="#E5E5E5"> github repository</font><font color="#CCCCCC"> and its</font>

233
00:10:20,390 --> 00:10:25,699
implementation<font color="#E5E5E5"> is modeled after the</font>

234
00:10:22,490 --> 00:10:29,839
different code code bases that we

235
00:10:25,700 --> 00:10:32,029
<font color="#E5E5E5">analyzed that</font><font color="#CCCCCC"> use WCF technology so we</font>

236
00:10:29,839 --> 00:10:34,520
begin<font color="#CCCCCC"> our analysis with decompiling</font><font color="#E5E5E5"> of</font>

237
00:10:32,029 --> 00:10:37,189
own WCF service we<font color="#E5E5E5"> use</font><font color="#CCCCCC"> d</font><font color="#E5E5E5"> inspire to do</font>

238
00:10:34,520 --> 00:10:41,000
<font color="#E5E5E5">this and</font><font color="#CCCCCC"> D in Spy is</font><font color="#E5E5E5"> an</font><font color="#CCCCCC"> open source</font>

239
00:10:37,190 --> 00:10:43,220
debugger assembly editor and B compiler

240
00:10:41,000 --> 00:10:46,370
for dotnet<font color="#E5E5E5"> that makes things super</font>

241
00:10:43,220 --> 00:10:49,430
simple first we want<font color="#CCCCCC"> to look at the</font>

242
00:10:46,370 --> 00:10:51,410
references node the references are

243
00:10:49,430 --> 00:10:53,300
basically dependencies within dotnet

244
00:10:51,410 --> 00:10:55,730
applications<font color="#E5E5E5"> the most important</font>

245
00:10:53,300 --> 00:10:57,589
reference for the sake of<font color="#E5E5E5"> wucf is system</font>

246
00:10:55,730 --> 00:11:00,019
that service model because<font color="#CCCCCC"> that</font><font color="#E5E5E5"> contains</font>

247
00:10:57,589 --> 00:11:03,529
all the<font color="#E5E5E5"> types and all of the classes</font>

248
00:11:00,019 --> 00:11:05,300
necessary to use<font color="#CCCCCC"> WCF</font><font color="#E5E5E5"> if a dotnet service</font>

249
00:11:03,529 --> 00:11:06,410
does include this reference<font color="#E5E5E5"> and none</font><font color="#CCCCCC"> of</font>

250
00:11:05,300 --> 00:11:08,240
its references include

251
00:11:06,410 --> 00:11:10,819
<font color="#E5E5E5">a reference</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> system that service model</font>

252
00:11:08,240 --> 00:11:13,540
<font color="#CCCCCC">it doesn't use WCF so you can save</font><font color="#E5E5E5"> time</font>

253
00:11:10,819 --> 00:11:16,040
<font color="#CCCCCC">by moving</font><font color="#E5E5E5"> on to the next application</font>

254
00:11:13,540 --> 00:11:17,569
next<font color="#E5E5E5"> we're going to talk about the other</font>

255
00:11:16,040 --> 00:11:19,639
<font color="#E5E5E5">notes the first one is the namespace</font>

256
00:11:17,569 --> 00:11:22,459
<font color="#E5E5E5">note it's yellow and on the left hand</font>

257
00:11:19,639 --> 00:11:24,649
side you have curly braces<font color="#E5E5E5"> following</font>

258
00:11:22,459 --> 00:11:27,170
that<font color="#E5E5E5"> you have the interface</font><font color="#CCCCCC"> I've on</font>

259
00:11:24,649 --> 00:11:29,360
service<font color="#E5E5E5"> all of the interfaces</font><font color="#CCCCCC"> and dotnet</font>

260
00:11:27,170 --> 00:11:30,410
start with the<font color="#E5E5E5"> capital letter</font><font color="#CCCCCC"> I which</font><font color="#E5E5E5"> is</font>

261
00:11:29,360 --> 00:11:32,449
<font color="#E5E5E5">something look out for if you're looking</font>

262
00:11:30,410 --> 00:11:36,350
<font color="#CCCCCC">for a service contract because they're</font>

263
00:11:32,449 --> 00:11:38,660
often<font color="#E5E5E5"> implemented as interfaces we have</font>

264
00:11:36,350 --> 00:11:40,610
<font color="#E5E5E5">loan service which actually implements</font>

265
00:11:38,660 --> 00:11:42,889
<font color="#E5E5E5">I've owned service and then we have the</font>

266
00:11:40,610 --> 00:11:45,379
main method which is a volunteer service

267
00:11:42,889 --> 00:11:49,670
<font color="#E5E5E5">which will include all of the service</font>

268
00:11:45,379 --> 00:11:51,379
creation<font color="#CCCCCC"> code</font><font color="#E5E5E5"> so the service contract is</font>

269
00:11:49,670 --> 00:11:53,959
defined in<font color="#CCCCCC"> I've owned service the</font>

270
00:11:51,379 --> 00:11:55,670
interface<font color="#E5E5E5"> that we just mentioned you can</font>

271
00:11:53,959 --> 00:11:58,550
see it has a service<font color="#E5E5E5"> contract attribute</font>

272
00:11:55,670 --> 00:12:01,160
and you can see it also<font color="#E5E5E5"> has a operation</font>

273
00:11:58,550 --> 00:12:04,849
contract<font color="#E5E5E5"> attribute over the method named</font>

274
00:12:01,160 --> 00:12:07,819
<font color="#E5E5E5">run me so</font><font color="#CCCCCC"> bond service actually</font>

275
00:12:04,850 --> 00:12:09,079
implements that interface you can see

276
00:12:07,819 --> 00:12:11,089
that<font color="#CCCCCC"> running me is</font><font color="#E5E5E5"> just defined as a</font>

277
00:12:09,079 --> 00:12:12,800
<font color="#E5E5E5">function that takes in a string</font><font color="#CCCCCC"> rights</font>

278
00:12:11,089 --> 00:12:15,170
the strings to the command<font color="#CCCCCC"> line</font><font color="#E5E5E5"> and then</font>

279
00:12:12,800 --> 00:12:19,790
starts a<font color="#CCCCCC"> process using</font><font color="#E5E5E5"> that string as</font>

280
00:12:15,170 --> 00:12:23,300
part of the command<font color="#E5E5E5"> line argument and it</font>

281
00:12:19,790 --> 00:12:26,110
runs it using process that start this is

282
00:12:23,300 --> 00:12:29,420
<font color="#E5E5E5">a simple run me as it clearly defined in</font>

283
00:12:26,110 --> 00:12:31,310
<font color="#E5E5E5">although it's a contrived example we saw</font>

284
00:12:29,420 --> 00:12:35,920
things<font color="#E5E5E5"> like</font><font color="#CCCCCC"> this and</font><font color="#E5E5E5"> the software that</font>

285
00:12:31,310 --> 00:12:38,508
we audited the main class starts off by

286
00:12:35,920 --> 00:12:40,670
using<font color="#CCCCCC"> system at service model system</font>

287
00:12:38,509 --> 00:12:43,149
that service process<font color="#E5E5E5"> soon as</font><font color="#CCCCCC"> that</font>

288
00:12:40,670 --> 00:12:47,899
service process is used to create

289
00:12:43,149 --> 00:12:49,699
services in dotnet the service is

290
00:12:47,899 --> 00:12:51,199
defined<font color="#E5E5E5"> as well and WCF service as we</font>

291
00:12:49,699 --> 00:12:53,990
saw<font color="#E5E5E5"> whenever we were enumerated the</font>

292
00:12:51,199 --> 00:12:56,930
target and the on start<font color="#CCCCCC"> method is what's</font>

293
00:12:53,990 --> 00:12:58,880
called<font color="#E5E5E5"> whenever</font><font color="#CCCCCC"> a services started so</font>

294
00:12:56,930 --> 00:13:00,888
within the on start<font color="#CCCCCC"> method</font><font color="#E5E5E5"> we have the</font>

295
00:12:58,880 --> 00:13:03,949
base address this is the address of<font color="#E5E5E5"> the</font>

296
00:13:00,889 --> 00:13:06,379
ABC<font color="#CCCCCC"> of</font><font color="#E5E5E5"> wucf you can see that it has a</font>

297
00:13:03,949 --> 00:13:08,660
scheme of net pipe the<font color="#E5E5E5"> machine name of</font>

298
00:13:06,379 --> 00:13:11,839
<font color="#E5E5E5">localhost</font><font color="#CCCCCC"> has no port number because a</font>

299
00:13:08,660 --> 00:13:15,219
<font color="#E5E5E5">Pipestone have port numbers and it has a</font>

300
00:13:11,839 --> 00:13:17,750
path of own service forward slash run me

301
00:13:15,220 --> 00:13:20,270
we can also see<font color="#E5E5E5"> that a service host</font>

302
00:13:17,750 --> 00:13:22,130
instance is<font color="#CCCCCC"> created using the contract</font>

303
00:13:20,270 --> 00:13:24,470
and the<font color="#E5E5E5"> address associated with this</font>

304
00:13:22,130 --> 00:13:28,090
<font color="#E5E5E5">service the contract is a phone service</font>

305
00:13:24,470 --> 00:13:34,130
<font color="#E5E5E5">and the address is defined with by the</font>

306
00:13:28,090 --> 00:13:36,620
base address and the binding<font color="#CCCCCC"> is defined</font>

307
00:13:34,130 --> 00:13:40,580
as a net named pipe that's an

308
00:13:36,620 --> 00:13:44,300
abstraction of<font color="#CCCCCC"> name pipes used for WCF</font>

309
00:13:40,580 --> 00:13:45,650
services<font color="#CCCCCC"> it's really quick</font><font color="#E5E5E5"> which is why</font>

310
00:13:44,300 --> 00:13:49,719
a lot<font color="#CCCCCC"> of people use it because it's</font>

311
00:13:45,650 --> 00:13:52,189
<font color="#E5E5E5">local to the system</font><font color="#CCCCCC"> versus</font><font color="#E5E5E5"> TCP or HTTP</font>

312
00:13:49,720 --> 00:13:54,950
next<font color="#E5E5E5"> within the on start</font><font color="#CCCCCC"> method we have</font>

313
00:13:52,190 --> 00:13:58,070
a call to<font color="#CCCCCC"> add service in point</font><font color="#E5E5E5"> this is</font>

314
00:13:54,950 --> 00:13:59,930
<font color="#E5E5E5">the one of</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> most important methods</font>

315
00:13:58,070 --> 00:14:03,890
<font color="#E5E5E5">that you want to look for whenever</font>

316
00:13:59,930 --> 00:14:06,979
<font color="#E5E5E5">you're analyzing WCF services because it</font>

317
00:14:03,890 --> 00:14:09,790
consumes<font color="#E5E5E5"> the address binding in contract</font>

318
00:14:06,980 --> 00:14:12,200
to ABC in order to deploy the<font color="#E5E5E5"> endpoint</font>

319
00:14:09,790 --> 00:14:14,449
<font color="#CCCCCC">now following</font><font color="#E5E5E5"> the</font><font color="#CCCCCC"> call</font><font color="#E5E5E5"> to add servers in</font>

320
00:14:12,200 --> 00:14:18,560
point it calls open to actually start

321
00:14:14,450 --> 00:14:20,060
<font color="#E5E5E5">the WCF service as I mentioned make sure</font>

322
00:14:18,560 --> 00:14:21,709
to look for<font color="#E5E5E5"> this if you're analyzing</font><font color="#CCCCCC"> any</font>

323
00:14:20,060 --> 00:14:23,209
WCF services because it's going<font color="#E5E5E5"> to give</font>

324
00:14:21,710 --> 00:14:25,480
you<font color="#CCCCCC"> all the pieces you need</font><font color="#E5E5E5"> to write a</font>

325
00:14:23,210 --> 00:14:27,650
<font color="#E5E5E5">client for the service</font>

326
00:14:25,480 --> 00:14:29,060
speaking of clients<font color="#CCCCCC"> I'm going to start</font>

327
00:14:27,650 --> 00:14:32,090
<font color="#CCCCCC">talking about building a dossier if</font>

328
00:14:29,060 --> 00:14:34,459
clients<font color="#E5E5E5"> connect to volume WH service</font>

329
00:14:32,090 --> 00:14:38,150
there are<font color="#CCCCCC"> a handful of</font><font color="#E5E5E5"> ways to create a</font>

330
00:14:34,460 --> 00:14:39,740
<font color="#E5E5E5">client but the biggest point is that you</font>

331
00:14:38,150 --> 00:14:41,750
<font color="#E5E5E5">don't have</font><font color="#CCCCCC"> to know a lot</font><font color="#E5E5E5"> of</font><font color="#CCCCCC"> c-sharp in</font>

332
00:14:39,740 --> 00:14:44,540
order to build a client<font color="#E5E5E5"> because</font><font color="#CCCCCC"> a lot of</font>

333
00:14:41,750 --> 00:14:45,710
<font color="#E5E5E5">the code</font><font color="#CCCCCC"> can be auto-generated so the</font>

334
00:14:44,540 --> 00:14:47,990
first thing I want to<font color="#E5E5E5"> talk about is</font>

335
00:14:45,710 --> 00:14:51,380
leveraging proxy<font color="#CCCCCC"> libraries legitimate</font>

336
00:14:47,990 --> 00:14:53,300
<font color="#CCCCCC">WCF applications have a</font><font color="#E5E5E5"> library</font><font color="#CCCCCC"> that</font>

337
00:14:51,380 --> 00:14:55,550
contains<font color="#E5E5E5"> all of the service contracts</font>

338
00:14:53,300 --> 00:14:58,880
<font color="#E5E5E5">and types necessary to connect to the</font>

339
00:14:55,550 --> 00:15:00,770
service so we can<font color="#CCCCCC"> possibly with our</font>

340
00:14:58,880 --> 00:15:02,480
client reference<font color="#E5E5E5"> these pre-existing</font>

341
00:15:00,770 --> 00:15:04,790
<font color="#E5E5E5">libraries in order to connect to the</font>

342
00:15:02,480 --> 00:15:07,520
service<font color="#CCCCCC"> without writing any new code</font><font color="#E5E5E5"> so</font>

343
00:15:04,790 --> 00:15:10,099
basically the developers of<font color="#E5E5E5"> the Target</font>

344
00:15:07,520 --> 00:15:12,110
are giving us<font color="#E5E5E5"> the code to use to connect</font>

345
00:15:10,100 --> 00:15:13,520
to their service and this greatly

346
00:15:12,110 --> 00:15:15,050
<font color="#CCCCCC">reduces amount of time necessary to</font>

347
00:15:13,520 --> 00:15:17,600
<font color="#E5E5E5">build a client</font><font color="#CCCCCC"> because you're just</font><font color="#E5E5E5"> using</font>

348
00:15:15,050 --> 00:15:20,359
<font color="#E5E5E5">pre-existing</font><font color="#CCCCCC"> types and functions as you</font>

349
00:15:17,600 --> 00:15:23,480
can see here<font color="#E5E5E5"> there's a service proxy DLL</font>

350
00:15:20,360 --> 00:15:25,430
<font color="#E5E5E5">load it</font><font color="#CCCCCC"> into D and spy and one of its</font>

351
00:15:23,480 --> 00:15:28,070
references our system<font color="#CCCCCC"> dot service model</font>

352
00:15:25,430 --> 00:15:30,680
which indicates that it's a service

353
00:15:28,070 --> 00:15:33,950
proxy library

354
00:15:30,680 --> 00:15:37,370
there's also tool from Microsoft called

355
00:15:33,950 --> 00:15:38,779
SVC<font color="#CCCCCC"> u tilde Exe</font><font color="#E5E5E5"> it consumes metadata in</font>

356
00:15:37,370 --> 00:15:41,750
order to<font color="#CCCCCC"> auto-generate</font>

357
00:15:38,779 --> 00:15:46,189
the proxy code for it used to connect to

358
00:15:41,750 --> 00:15:48,290
a service<font color="#E5E5E5"> the metadata comes from the</font>

359
00:15:46,190 --> 00:15:51,079
WCF service if it's exposed<font color="#E5E5E5"> but that's</font>

360
00:15:48,290 --> 00:15:54,439
not enabled by<font color="#CCCCCC"> default however you can</font>

361
00:15:51,079 --> 00:15:56,599
also use<font color="#CCCCCC"> SVC</font><font color="#E5E5E5"> u tilde</font><font color="#CCCCCC"> exe on the service</font>

362
00:15:54,440 --> 00:15:58,550
binary in order to generate the metadata

363
00:15:56,600 --> 00:16:00,620
<font color="#CCCCCC">and then use</font><font color="#E5E5E5"> it again on that</font><font color="#CCCCCC"> generator</font>

364
00:15:58,550 --> 00:16:04,300
<font color="#E5E5E5">metadata in order to auto generate the</font>

365
00:16:00,620 --> 00:16:07,250
code necessary<font color="#E5E5E5"> to connect to the target</font>

366
00:16:04,300 --> 00:16:09,819
<font color="#E5E5E5">so let's talk about building evil</font><font color="#CCCCCC"> WCF</font>

367
00:16:07,250 --> 00:16:11,540
client which is<font color="#E5E5E5"> what</font><font color="#CCCCCC"> i've named the</font>

368
00:16:09,820 --> 00:16:14,240
exploit client that we're<font color="#E5E5E5"> going to</font>

369
00:16:11,540 --> 00:16:16,040
<font color="#CCCCCC">develop so it remains possible</font><font color="#E5E5E5"> to build</font>

370
00:16:14,240 --> 00:16:18,290
a client without proxy library or

371
00:16:16,040 --> 00:16:19,639
metadata<font color="#E5E5E5"> all you need to do is use the</font>

372
00:16:18,290 --> 00:16:22,910
<font color="#CCCCCC">information gained through static</font>

373
00:16:19,639 --> 00:16:25,070
<font color="#E5E5E5">analysis in order to communicate to the</font>

374
00:16:22,910 --> 00:16:27,110
target service as I mentioned very

375
00:16:25,070 --> 00:16:28,670
<font color="#E5E5E5">little</font><font color="#CCCCCC"> c-sharp</font><font color="#E5E5E5"> is required as</font><font color="#CCCCCC"> you see</font>

376
00:16:27,110 --> 00:16:31,310
building a client<font color="#CCCCCC"> will go by very</font>

377
00:16:28,670 --> 00:16:35,269
<font color="#E5E5E5">quickly</font><font color="#CCCCCC"> because microsoft made</font><font color="#E5E5E5"> it very</font>

378
00:16:31,310 --> 00:16:36,500
simple<font color="#CCCCCC"> to use their</font><font color="#E5E5E5"> technology so</font>

379
00:16:35,269 --> 00:16:38,089
there's a few requirements<font color="#E5E5E5"> in order to</font>

380
00:16:36,500 --> 00:16:41,029
build a client first just like with the

381
00:16:38,089 --> 00:16:43,040
service we have<font color="#E5E5E5"> to use system dot</font>

382
00:16:41,029 --> 00:16:47,930
service model in order<font color="#CCCCCC"> to use any of the</font>

383
00:16:43,040 --> 00:16:49,969
WCF functions or methods also<font color="#CCCCCC"> of no</font>

384
00:16:47,930 --> 00:16:52,310
proxy libraries<font color="#CCCCCC"> available we have to</font>

385
00:16:49,970 --> 00:16:54,079
include the service contract<font color="#CCCCCC"> inside</font><font color="#E5E5E5"> of</font>

386
00:16:52,310 --> 00:16:56,810
<font color="#E5E5E5">our code ourselves</font><font color="#CCCCCC"> so you can see that</font>

387
00:16:54,079 --> 00:16:59,029
we<font color="#CCCCCC"> took the service</font><font color="#E5E5E5"> contract from the</font><font color="#CCCCCC"> D</font>

388
00:16:56,810 --> 00:17:02,029
compilation Indian spy<font color="#E5E5E5"> with copy and</font>

389
00:16:59,029 --> 00:17:03,470
pasted it<font color="#E5E5E5"> into</font><font color="#CCCCCC"> our client</font><font color="#E5E5E5"> and now we can</font>

390
00:17:02,029 --> 00:17:05,869
reference that<font color="#E5E5E5"> service contract within</font>

391
00:17:03,470 --> 00:17:09,559
<font color="#E5E5E5">our code and from my experience copying</font>

392
00:17:05,869 --> 00:17:11,149
and pasting from<font color="#E5E5E5"> D in spy is it works</font>

393
00:17:09,559 --> 00:17:13,220
pretty much<font color="#CCCCCC"> all of the time there hasn't</font>

394
00:17:11,150 --> 00:17:17,059
been any errors when I've<font color="#CCCCCC"> used it so</font>

395
00:17:13,220 --> 00:17:19,429
that's<font color="#E5E5E5"> let's cool</font><font color="#CCCCCC"> alright next</font><font color="#E5E5E5"> we want</font>

396
00:17:17,059 --> 00:17:21,319
<font color="#E5E5E5">to talk about</font><font color="#CCCCCC"> WTF channels channels are</font>

397
00:17:19,429 --> 00:17:22,819
how the client communicates to the

398
00:17:21,319 --> 00:17:25,879
service and<font color="#CCCCCC"> it does this through message</font>

399
00:17:22,819 --> 00:17:27,889
objects<font color="#CCCCCC"> through the</font><font color="#E5E5E5"> channel stack which</font>

400
00:17:25,880 --> 00:17:30,559
<font color="#CCCCCC">is the pipeline for communication</font><font color="#E5E5E5"> in</font>

401
00:17:27,890 --> 00:17:33,140
order to<font color="#E5E5E5"> communicate over the channel</font>

402
00:17:30,559 --> 00:17:36,799
stack<font color="#E5E5E5"> we have to use a channel</font><font color="#CCCCCC"> Factory</font>

403
00:17:33,140 --> 00:17:38,540
<font color="#CCCCCC">in order</font><font color="#E5E5E5"> to generate clients communicate</font>

404
00:17:36,799 --> 00:17:40,429
to the target and the channel factory

405
00:17:38,540 --> 00:17:41,480
<font color="#E5E5E5">also consumes the address the binding in</font>

406
00:17:40,429 --> 00:17:43,760
the contract<font color="#E5E5E5"> this</font><font color="#CCCCCC"> is why it's</font><font color="#E5E5E5"> so</font>

407
00:17:41,480 --> 00:17:45,590
important<font color="#CCCCCC"> to find the reference to add</font>

408
00:17:43,760 --> 00:17:46,890
service endpoint<font color="#CCCCCC"> or just get that</font>

409
00:17:45,590 --> 00:17:48,629
information<font color="#E5E5E5"> so that we can</font><font color="#CCCCCC"> build</font>

410
00:17:46,890 --> 00:17:52,200
<font color="#CCCCCC">kennel Factory in order to communicate</font>

411
00:17:48,630 --> 00:17:54,420
<font color="#CCCCCC">to it as you can</font><font color="#E5E5E5"> see here we have a</font>

412
00:17:52,200 --> 00:17:56,910
channel<font color="#E5E5E5"> Factory it's using the type I've</font>

413
00:17:54,420 --> 00:17:59,940
<font color="#CCCCCC">owned it has the address that</font><font color="#E5E5E5"> we</font>

414
00:17:56,910 --> 00:18:02,100
retrieved from<font color="#CCCCCC"> DM spy</font><font color="#E5E5E5"> and it also is</font>

415
00:17:59,940 --> 00:18:03,780
using a net native pipe binding whenever

416
00:18:02,100 --> 00:18:06,030
we call create channel on<font color="#E5E5E5"> this</font><font color="#CCCCCC"> channel</font>

417
00:18:03,780 --> 00:18:08,520
<font color="#E5E5E5">factory it returns a service channel</font>

418
00:18:06,030 --> 00:18:11,930
proxy which we can<font color="#CCCCCC"> then</font><font color="#E5E5E5"> use</font><font color="#CCCCCC"> to call the</font>

419
00:18:08,520 --> 00:18:15,570
methods<font color="#CCCCCC"> that</font><font color="#E5E5E5"> are exposed by the service</font>

420
00:18:11,930 --> 00:18:18,660
so here we simply<font color="#E5E5E5"> call channel factory</font>

421
00:18:15,570 --> 00:18:20,580
that great<font color="#CCCCCC"> Channel and it</font><font color="#E5E5E5"> returns client</font>

422
00:18:18,660 --> 00:18:22,890
which is<font color="#E5E5E5"> our service channel proxy then</font>

423
00:18:20,580 --> 00:18:26,040
<font color="#E5E5E5">we call client running me plus a string</font>

424
00:18:22,890 --> 00:18:30,120
that gets appended<font color="#CCCCCC"> to command</font><font color="#E5E5E5"> that exe</font>

425
00:18:26,040 --> 00:18:32,850
<font color="#CCCCCC">and as a result we look at the</font><font color="#E5E5E5"> volume</font>

426
00:18:30,120 --> 00:18:35,429
WCF service and it has sub<font color="#E5E5E5"> processes of</font>

427
00:18:32,850 --> 00:18:37,439
<font color="#E5E5E5">CMD and</font><font color="#CCCCCC"> cockt</font><font color="#E5E5E5"> ax</font><font color="#CCCCCC"> EA both</font><font color="#E5E5E5"> of which are</font>

428
00:18:35,430 --> 00:18:41,550
<font color="#E5E5E5">running as</font><font color="#CCCCCC"> mt authority</font><font color="#E5E5E5"> system and</font>

429
00:18:37,440 --> 00:18:43,230
that's it<font color="#E5E5E5"> it's very simple Microsoft I</font>

430
00:18:41,550 --> 00:18:44,669
made it very<font color="#CCCCCC"> simple</font><font color="#E5E5E5"> so that people that</font>

431
00:18:43,230 --> 00:18:46,500
have a lot<font color="#CCCCCC"> of problems and use their</font>

432
00:18:44,670 --> 00:18:48,780
<font color="#CCCCCC">technology and we can also use their</font>

433
00:18:46,500 --> 00:18:50,700
<font color="#CCCCCC">technology to exploit</font><font color="#E5E5E5"> and secure</font>

434
00:18:48,780 --> 00:18:55,550
endpoints<font color="#CCCCCC"> so now let's look</font><font color="#E5E5E5"> at real</font>

435
00:18:50,700 --> 00:18:57,420
software real world vulnerabilities

436
00:18:55,550 --> 00:19:01,500
<font color="#CCCCCC">alright so the first</font><font color="#E5E5E5"> thing we're going</font>

437
00:18:57,420 --> 00:19:03,090
<font color="#E5E5E5">to look at is</font><font color="#CCCCCC"> CBE 2018 1 0 169 which is</font>

438
00:19:01,500 --> 00:19:04,650
<font color="#E5E5E5">a vulnerability</font><font color="#CCCCCC"> and proton VPN that</font>

439
00:19:03,090 --> 00:19:07,409
<font color="#E5E5E5">allowed for privileges escalation to</font>

440
00:19:04,650 --> 00:19:09,600
system it is established<font color="#E5E5E5"> a service that</font>

441
00:19:07,410 --> 00:19:12,270
<font color="#E5E5E5">communicated over a net</font><font color="#CCCCCC"> name pipe and</font>

442
00:19:09,600 --> 00:19:15,000
they<font color="#E5E5E5"> exposed the connect method which</font>

443
00:19:12,270 --> 00:19:20,040
allowed an attacker to<font color="#E5E5E5"> control the</font><font color="#CCCCCC"> Open</font>

444
00:19:15,000 --> 00:19:21,390
<font color="#CCCCCC">VPN</font><font color="#E5E5E5"> config and with Open VPN</font><font color="#CCCCCC"> it there</font>

445
00:19:20,040 --> 00:19:23,670
are a handful of<font color="#E5E5E5"> options you can include</font>

446
00:19:21,390 --> 00:19:26,190
in a configuration<font color="#E5E5E5"> file one of those</font>

447
00:19:23,670 --> 00:19:30,030
options<font color="#E5E5E5"> are</font><font color="#CCCCCC"> plugin and with the plug-in</font>

448
00:19:26,190 --> 00:19:34,170
<font color="#CCCCCC">option you can define a</font><font color="#E5E5E5"> DLL for Open VPN</font>

449
00:19:30,030 --> 00:19:37,320
<font color="#E5E5E5">to load whenever it's executed and by</font>

450
00:19:34,170 --> 00:19:39,330
abusing<font color="#E5E5E5"> this feature and Open VPN</font><font color="#CCCCCC"> we're</font>

451
00:19:37,320 --> 00:19:42,120
able to create<font color="#E5E5E5"> a client</font><font color="#CCCCCC"> that allowed us</font>

452
00:19:39,330 --> 00:19:44,850
<font color="#CCCCCC">to escalate privileges through the WCF</font>

453
00:19:42,120 --> 00:19:48,479
service so first let's talk about

454
00:19:44,850 --> 00:19:49,980
discovery of this<font color="#E5E5E5"> vulnerability</font><font color="#CCCCCC"> so as I</font>

455
00:19:48,480 --> 00:19:52,350
<font color="#E5E5E5">mentioned that we audited several</font>

456
00:19:49,980 --> 00:19:54,450
<font color="#E5E5E5">windows VPN clients and we saw</font><font color="#CCCCCC"> that</font>

457
00:19:52,350 --> 00:19:56,850
proton VPN offered a free limited

458
00:19:54,450 --> 00:19:59,220
subscription primarily we're interested

459
00:19:56,850 --> 00:20:00,419
in starting<font color="#E5E5E5"> off with free VPN clients</font>

460
00:19:59,220 --> 00:20:03,510
because we didn't<font color="#E5E5E5"> want to</font>

461
00:20:00,420 --> 00:20:05,910
pay someone<font color="#E5E5E5"> to audit their software</font><font color="#CCCCCC"> so</font>

462
00:20:03,510 --> 00:20:08,820
after downloading<font color="#CCCCCC"> this application in</font>

463
00:20:05,910 --> 00:20:11,160
the<font color="#E5E5E5"> Stalin gate we ran SC query which</font>

464
00:20:08,820 --> 00:20:13,350
lists<font color="#CCCCCC"> all of</font><font color="#E5E5E5"> the services installed and</font>

465
00:20:11,160 --> 00:20:15,180
we filtered it down to only the<font color="#E5E5E5"> ones</font>

466
00:20:13,350 --> 00:20:18,209
<font color="#E5E5E5">that included proton which revealed</font>

467
00:20:15,180 --> 00:20:20,400
<font color="#CCCCCC">proton VPN service</font><font color="#E5E5E5"> we then ran SC</font><font color="#CCCCCC"> QC a</font>

468
00:20:18,210 --> 00:20:22,560
proton VPN service which revealed the

469
00:20:20,400 --> 00:20:25,520
<font color="#E5E5E5">binary path name and</font><font color="#CCCCCC"> also that it starts</font>

470
00:20:22,560 --> 00:20:28,440
as<font color="#E5E5E5"> a local system</font><font color="#CCCCCC"> so we proceeded with</font>

471
00:20:25,520 --> 00:20:32,370
<font color="#E5E5E5">analyzing the application named proton</font>

472
00:20:28,440 --> 00:20:34,020
VPN service that<font color="#CCCCCC"> exe a so we started</font><font color="#E5E5E5"> off</font>

473
00:20:32,370 --> 00:20:36,780
<font color="#E5E5E5">that D compiling it and looking at the</font>

474
00:20:34,020 --> 00:20:39,389
references we see here that it has<font color="#CCCCCC"> a</font>

475
00:20:36,780 --> 00:20:40,770
service proxy reference which<font color="#CCCCCC"> is a big</font>

476
00:20:39,390 --> 00:20:43,230
indicator<font color="#CCCCCC"> that's probably using a</font>

477
00:20:40,770 --> 00:20:44,700
service<font color="#E5E5E5"> proxy library we also see that</font>

478
00:20:43,230 --> 00:20:48,750
<font color="#CCCCCC">it's using system</font><font color="#E5E5E5"> a service model which</font>

479
00:20:44,700 --> 00:20:50,250
indicates<font color="#CCCCCC"> that it is</font><font color="#E5E5E5"> using</font><font color="#CCCCCC"> WCF so using</font>

480
00:20:48,750 --> 00:20:52,860
the feature Indian<font color="#E5E5E5"> spy called the</font>

481
00:20:50,250 --> 00:20:55,170
<font color="#E5E5E5">analyzer we were able to just find</font>

482
00:20:52,860 --> 00:20:58,050
usages<font color="#CCCCCC"> of our target function which is</font>

483
00:20:55,170 --> 00:21:01,710
AB service<font color="#CCCCCC"> endpoint we find two</font>

484
00:20:58,050 --> 00:21:04,560
instances of<font color="#E5E5E5"> this method being used one</font>

485
00:21:01,710 --> 00:21:06,030
in service host service settings the

486
00:21:04,560 --> 00:21:09,810
other one in service hosts that VPN

487
00:21:06,030 --> 00:21:11,670
connection manager in the<font color="#E5E5E5"> VPN connection</font>

488
00:21:09,810 --> 00:21:13,800
manager proxy host factory and<font color="#E5E5E5"> it's</font>

489
00:21:11,670 --> 00:21:16,710
<font color="#CCCCCC">create function we can analyze the call</font>

490
00:21:13,800 --> 00:21:19,710
to<font color="#E5E5E5"> app servers in point we instantly get</font>

491
00:21:16,710 --> 00:21:22,890
the ABCs<font color="#CCCCCC"> of this particular service</font>

492
00:21:19,710 --> 00:21:25,500
<font color="#CCCCCC">the address is</font><font color="#E5E5E5"> net pipe localhost proton</font>

493
00:21:22,890 --> 00:21:27,900
VPN service connection manager<font color="#E5E5E5"> the</font>

494
00:21:25,500 --> 00:21:30,870
binding is a net<font color="#E5E5E5"> name pipe binding as is</font>

495
00:21:27,900 --> 00:21:32,910
returned by<font color="#E5E5E5"> built</font><font color="#CCCCCC"> named pipe in the</font>

496
00:21:30,870 --> 00:21:35,310
<font color="#E5E5E5">contractors</font><font color="#CCCCCC"> I VPN connection manager</font>

497
00:21:32,910 --> 00:21:37,260
proxy<font color="#E5E5E5"> given this</font><font color="#CCCCCC"> information we have</font>

498
00:21:35,310 --> 00:21:38,700
enough to connect to the service<font color="#CCCCCC"> but we</font>

499
00:21:37,260 --> 00:21:41,879
want to know what<font color="#E5E5E5"> that connection will</font>

500
00:21:38,700 --> 00:21:44,280
provide us<font color="#E5E5E5"> so if we analyze a VPN</font>

501
00:21:41,880 --> 00:21:46,200
<font color="#CCCCCC">connection manager proxy we can see that</font>

502
00:21:44,280 --> 00:21:48,030
<font color="#E5E5E5">it's defined</font><font color="#CCCCCC"> within</font><font color="#E5E5E5"> the service proxy</font>

503
00:21:46,200 --> 00:21:50,420
library that<font color="#E5E5E5"> we saw earlier and these</font>

504
00:21:48,030 --> 00:21:54,810
are all<font color="#E5E5E5"> the methods</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> are exposed</font>

505
00:21:50,420 --> 00:21:57,030
<font color="#CCCCCC">there is there's a</font><font color="#E5E5E5"> callback contract in</font>

506
00:21:54,810 --> 00:21:58,649
the service contract field<font color="#E5E5E5"> what this</font>

507
00:21:57,030 --> 00:22:00,540
means is<font color="#CCCCCC"> that there's a two-way</font>

508
00:21:58,650 --> 00:22:02,790
<font color="#E5E5E5">communication</font><font color="#CCCCCC"> that's expected so we have</font>

509
00:22:00,540 --> 00:22:06,510
to<font color="#CCCCCC"> establish a duplex</font><font color="#E5E5E5"> channel instead</font><font color="#CCCCCC"> of</font>

510
00:22:02,790 --> 00:22:10,050
a normal<font color="#CCCCCC"> Channel</font><font color="#E5E5E5"> factory we also see</font>

511
00:22:06,510 --> 00:22:13,320
that<font color="#E5E5E5"> the connect method takes in a</font>

512
00:22:10,050 --> 00:22:14,250
service connection proxy argument this

513
00:22:13,320 --> 00:22:16,620
makes it the<font color="#CCCCCC"> most</font>

514
00:22:14,250 --> 00:22:18,570
<font color="#CCCCCC">method because only the disconnect</font>

515
00:22:16,620 --> 00:22:20,550
method<font color="#E5E5E5"> takes a boolean value and the</font>

516
00:22:18,570 --> 00:22:22,950
other<font color="#E5E5E5"> methods are void methods so we</font>

517
00:22:20,550 --> 00:22:28,710
investigated<font color="#CCCCCC"> how the connect method was</font>

518
00:22:22,950 --> 00:22:31,110
implemented more closely<font color="#E5E5E5"> so the service</font>

519
00:22:28,710 --> 00:22:33,150
connection<font color="#E5E5E5"> proxy class is basically used</font>

520
00:22:31,110 --> 00:22:35,340
to store information about<font color="#E5E5E5"> the service</font>

521
00:22:33,150 --> 00:22:39,510
connection<font color="#CCCCCC"> as you can see here</font><font color="#E5E5E5"> one of</font>

522
00:22:35,340 --> 00:22:42,990
<font color="#E5E5E5">those values</font><font color="#CCCCCC"> is a VPN config which we</font>

523
00:22:39,510 --> 00:22:45,990
control<font color="#E5E5E5"> if we control the object of type</font>

524
00:22:42,990 --> 00:22:47,760
service connection proxy and using as I

525
00:22:45,990 --> 00:22:50,400
mentioned before using this<font color="#CCCCCC"> ovp and</font>

526
00:22:47,760 --> 00:22:52,650
config path we<font color="#CCCCCC"> can create a new config</font>

527
00:22:50,400 --> 00:22:55,350
file reference it and include the

528
00:22:52,650 --> 00:22:58,590
plug-in option<font color="#E5E5E5"> which holds our malicious</font>

529
00:22:55,350 --> 00:23:00,929
DLL<font color="#CCCCCC"> that will do whatever we like</font>

530
00:22:58,590 --> 00:23:03,840
because in dll's<font color="#E5E5E5"> on</font><font color="#CCCCCC"> Windows there's a</font>

531
00:23:00,930 --> 00:23:05,610
DLL main section which will execute

532
00:23:03,840 --> 00:23:07,350
whatever codes in that section whenever

533
00:23:05,610 --> 00:23:09,899
it's loaded<font color="#E5E5E5"> even if it doesn't</font>

534
00:23:07,350 --> 00:23:11,969
successfully reach the function that<font color="#E5E5E5"> is</font>

535
00:23:09,900 --> 00:23:15,630
targeted it will execute whatever<font color="#E5E5E5"> code</font>

536
00:23:11,970 --> 00:23:18,210
we want whenever it's loaded so to begin

537
00:23:15,630 --> 00:23:20,790
<font color="#E5E5E5">writing our export first what we want</font><font color="#CCCCCC"> to</font>

538
00:23:18,210 --> 00:23:23,520
do is reference<font color="#E5E5E5"> the proxy libraries that</font>

539
00:23:20,790 --> 00:23:26,670
are existent<font color="#CCCCCC"> within the pro Sun VPN</font>

540
00:23:23,520 --> 00:23:29,460
service<font color="#E5E5E5"> so we</font><font color="#CCCCCC"> add the reference in</font>

541
00:23:26,670 --> 00:23:32,490
<font color="#E5E5E5">Visual Studio and then we add using</font>

542
00:23:29,460 --> 00:23:34,130
<font color="#E5E5E5">proton VPN service proxy a VPN this</font>

543
00:23:32,490 --> 00:23:37,290
gives us<font color="#E5E5E5"> all</font><font color="#CCCCCC"> of the types of classes</font>

544
00:23:34,130 --> 00:23:42,900
<font color="#E5E5E5">necessary in</font><font color="#CCCCCC"> order</font><font color="#E5E5E5"> to connect to the</font>

545
00:23:37,290 --> 00:23:45,030
service next<font color="#CCCCCC"> we create</font><font color="#E5E5E5"> the duplex</font>

546
00:23:42,900 --> 00:23:47,490
<font color="#E5E5E5">channel</font><font color="#CCCCCC"> factory it's similar</font><font color="#E5E5E5"> to the</font>

547
00:23:45,030 --> 00:23:50,760
example I<font color="#CCCCCC"> showed before however</font><font color="#E5E5E5"> it also</font>

548
00:23:47,490 --> 00:23:53,490
includes an instance<font color="#E5E5E5"> context to the to</font>

549
00:23:50,760 --> 00:23:56,520
the type that it needs to<font color="#CCCCCC"> communicate</font>

550
00:23:53,490 --> 00:23:59,160
the callback type however you don't<font color="#E5E5E5"> have</font>

551
00:23:56,520 --> 00:24:00,990
<font color="#E5E5E5">to write a true callback function what I</font>

552
00:23:59,160 --> 00:24:03,180
did was a use Visual Studio<font color="#E5E5E5"> to auto</font>

553
00:24:00,990 --> 00:24:06,530
generate<font color="#CCCCCC"> a callback function that throws</font>

554
00:24:03,180 --> 00:24:09,210
exceptions<font color="#E5E5E5"> on each of the callbacks</font>

555
00:24:06,530 --> 00:24:10,710
values and methods<font color="#E5E5E5"> so I didn't really</font>

556
00:24:09,210 --> 00:24:12,480
<font color="#E5E5E5">have to</font><font color="#CCCCCC"> write it I just use Visual</font>

557
00:24:10,710 --> 00:24:15,810
Studio to auto<font color="#CCCCCC"> generate a filler</font>

558
00:24:12,480 --> 00:24:17,220
callback method and the duplex<font color="#CCCCCC"> Channel</font>

559
00:24:15,810 --> 00:24:21,540
<font color="#E5E5E5">factory as I mentioned it consumes the</font>

560
00:24:17,220 --> 00:24:24,150
<font color="#E5E5E5">address the binding of the contract and</font>

561
00:24:21,540 --> 00:24:26,100
<font color="#CCCCCC">as</font><font color="#E5E5E5"> also mentioned it uses a dummy</font>

562
00:24:24,150 --> 00:24:28,020
implementation of<font color="#CCCCCC"> EPM</font><font color="#E5E5E5"> variants callback</font>

563
00:24:26,100 --> 00:24:29,520
but as you can<font color="#CCCCCC"> see the ABC are all</font>

564
00:24:28,020 --> 00:24:33,030
we really need in order<font color="#E5E5E5"> to establish a</font>

565
00:24:29,520 --> 00:24:35,100
connection<font color="#CCCCCC"> to the target service we call</font>

566
00:24:33,030 --> 00:24:37,920
create<font color="#E5E5E5"> channel it returns the service</font>

567
00:24:35,100 --> 00:24:43,649
<font color="#CCCCCC">channel proxy that we named VP and</font>

568
00:24:37,920 --> 00:24:47,130
client so the<font color="#E5E5E5"> DLL pillow that I chose to</font>

569
00:24:43,650 --> 00:24:49,680
<font color="#CCCCCC">use is</font><font color="#E5E5E5"> called</font><font color="#CCCCCC"> Open VPN PLC DLL and DLL</font>

570
00:24:47,130 --> 00:24:51,720
main<font color="#E5E5E5"> it just starts a bind shell on the</font>

571
00:24:49,680 --> 00:24:54,300
system listening on port<font color="#CCCCCC"> four four four</font>

572
00:24:51,720 --> 00:24:57,120
<font color="#CCCCCC">four whenever anyone connects to it by a</font>

573
00:24:54,300 --> 00:24:59,340
<font color="#CCCCCC">net cat or some other terminal service</font>

574
00:24:57,120 --> 00:25:04,080
they are provided<font color="#CCCCCC"> with</font><font color="#E5E5E5"> a command prompt</font>

575
00:24:59,340 --> 00:25:05,580
<font color="#E5E5E5">shell so after</font><font color="#CCCCCC"> adding the plug-in option</font>

576
00:25:04,080 --> 00:25:09,899
to the config file

577
00:25:05,580 --> 00:25:13,139
I set the path of our DLL<font color="#E5E5E5"> or sorry the</font>

578
00:25:09,900 --> 00:25:15,240
path of the config file to the<font color="#E5E5E5"> O VPN</font>

579
00:25:13,140 --> 00:25:17,360
config files area within our service

580
00:25:15,240 --> 00:25:20,790
<font color="#E5E5E5">connection proxy that we created and</font>

581
00:25:17,360 --> 00:25:22,350
then I call connect on our server

582
00:25:20,790 --> 00:25:27,149
connection proxy to trigger the

583
00:25:22,350 --> 00:25:29,909
vulnerability<font color="#CCCCCC"> and instead</font><font color="#E5E5E5"> of using</font>

584
00:25:27,150 --> 00:25:31,920
netcat<font color="#CCCCCC"> i</font><font color="#E5E5E5"> use the dotnet tcp client class</font>

585
00:25:29,910 --> 00:25:35,210
in<font color="#CCCCCC"> order to actually connect back to</font><font color="#E5E5E5"> the</font>

586
00:25:31,920 --> 00:25:39,240
buying shell<font color="#E5E5E5"> and gain our system shell</font>

587
00:25:35,210 --> 00:25:41,280
so here is video<font color="#E5E5E5"> demo of this in</font><font color="#CCCCCC"> action</font>

588
00:25:39,240 --> 00:25:44,910
as you can see in the folder<font color="#CCCCCC"> I</font><font color="#E5E5E5"> have a</font>

589
00:25:41,280 --> 00:25:46,830
VPN<font color="#E5E5E5"> dot underscore</font><font color="#CCCCCC"> key OC</font><font color="#E5E5E5"> DLL also have</font>

590
00:25:44,910 --> 00:25:50,160
service proxy which came from protons

591
00:25:46,830 --> 00:25:54,360
VPN installation folder<font color="#CCCCCC"> then I have the</font>

592
00:25:50,160 --> 00:25:56,160
<font color="#E5E5E5">PLC file so first I run Who am I</font>

593
00:25:54,360 --> 00:25:59,969
it returns<font color="#CCCCCC"> ie user showing that</font><font color="#E5E5E5"> I'm</font>

594
00:25:56,160 --> 00:26:02,970
unprivileged<font color="#CCCCCC"> then I run the exploit it</font>

595
00:25:59,970 --> 00:26:05,760
runs and creates<font color="#CCCCCC"> a config that ovp n</font>

596
00:26:02,970 --> 00:26:07,230
which contains a<font color="#CCCCCC"> plug-in value I run Who</font>

597
00:26:05,760 --> 00:26:09,450
am I again<font color="#E5E5E5"> after I</font><font color="#CCCCCC"> drop</font><font color="#E5E5E5"> into the shell</font>

598
00:26:07,230 --> 00:26:11,790
<font color="#E5E5E5">and I have a system shell quickly</font>

599
00:26:09,450 --> 00:26:13,980
because it's over a named pipe<font color="#E5E5E5"> which</font>

600
00:26:11,790 --> 00:26:19,670
means that it'll be<font color="#E5E5E5"> near instant and</font>

601
00:26:13,980 --> 00:26:19,670
execution thank you

602
00:26:22,070 --> 00:26:27,960
so the<font color="#E5E5E5"> next target</font><font color="#CCCCCC"> or actually the next</font>

603
00:26:26,009 --> 00:26:29,249
<font color="#E5E5E5">targets we looked at were other VPN</font>

604
00:26:27,960 --> 00:26:33,570
<font color="#E5E5E5">services we found similar</font>

605
00:26:29,249 --> 00:26:36,690
vulnerabilities in<font color="#CCCCCC"> north VPN VIPRE VPN</font>

606
00:26:33,570 --> 00:26:38,549
tunnel bear<font color="#E5E5E5"> and cyber go six all of</font>

607
00:26:36,690 --> 00:26:40,679
these have similar<font color="#CCCCCC"> WCF vulnerabilities</font>

608
00:26:38,549 --> 00:26:42,239
because they were calling Open VPN in

609
00:26:40,679 --> 00:26:45,840
different ways through an exposed

610
00:26:42,239 --> 00:26:48,359
<font color="#E5E5E5">insecure endpoint the next target we're</font>

611
00:26:45,840 --> 00:26:50,820
going to look at is kiosk simple<font color="#E5E5E5"> this is</font>

612
00:26:48,359 --> 00:26:52,859
a vulnerability<font color="#E5E5E5"> that an</font><font color="#CCCCCC"> internet ver</font>

613
00:26:50,820 --> 00:26:55,049
<font color="#CCCCCC">spray</font><font color="#E5E5E5"> actually found this past summer so</font>

614
00:26:52,859 --> 00:26:56,999
<font color="#CCCCCC">kiya</font><font color="#E5E5E5"> simple is a kiosk software they</font>

615
00:26:55,049 --> 00:27:01,109
<font color="#E5E5E5">install on</font><font color="#CCCCCC"> Windows to turn it into a</font>

616
00:26:56,999 --> 00:27:03,049
secure kiosk environment so we<font color="#E5E5E5"> found a</font>

617
00:27:01,109 --> 00:27:06,359
privileged escalation vulnerability

618
00:27:03,049 --> 00:27:08,249
through<font color="#E5E5E5"> WCF and</font><font color="#CCCCCC"> kiosk simple because</font>

619
00:27:06,359 --> 00:27:10,439
exposed methods allow you to read and

620
00:27:08,249 --> 00:27:14,190
<font color="#E5E5E5">write to</font><font color="#CCCCCC"> the registry as well as control</font>

621
00:27:10,440 --> 00:27:15,989
services and abuses methods in order<font color="#E5E5E5"> to</font>

622
00:27:14,190 --> 00:27:19,710
escalate the system and I'll show<font color="#E5E5E5"> you</font>

623
00:27:15,989 --> 00:27:22,379
how so first we started with analysis<font color="#CCCCCC"> we</font>

624
00:27:19,710 --> 00:27:24,119
put it<font color="#E5E5E5"> in</font><font color="#CCCCCC"> 2d inspire D compiled</font><font color="#E5E5E5"> it and</font>

625
00:27:22,379 --> 00:27:26,998
we saw<font color="#CCCCCC"> that it was obvious skated like</font>

626
00:27:24,119 --> 00:27:29,340
<font color="#E5E5E5">nothing had a proper name one two three</font>

627
00:27:26,999 --> 00:27:31,559
four that<font color="#CCCCCC"> wasn't valuable to us luckily</font>

628
00:27:29,340 --> 00:27:34,139
the metadata included a hint<font color="#E5E5E5"> it's at</font>

629
00:27:31,559 --> 00:27:36,899
powered by smart assembly 6.11 point one

630
00:27:34,139 --> 00:27:39,988
<font color="#E5E5E5">point three five four so by googling</font>

631
00:27:36,899 --> 00:27:42,478
smart assembly<font color="#CCCCCC"> D</font><font color="#E5E5E5"> off you skater quickly</font>

632
00:27:39,989 --> 00:27:44,940
revealed or<font color="#CCCCCC"> open-source cool</font><font color="#E5E5E5"> open-source</font>

633
00:27:42,479 --> 00:27:47,729
tool called de<font color="#CCCCCC"> for dot which we used to</font>

634
00:27:44,940 --> 00:27:50,279
decompile<font color="#CCCCCC"> the</font><font color="#E5E5E5"> application as you can see</font>

635
00:27:47,729 --> 00:27:54,359
here it saves the output<font color="#E5E5E5"> to key</font><font color="#CCCCCC"> AA</font>

636
00:27:50,279 --> 00:27:56,909
simple service - clean<font color="#E5E5E5"> exe so after</font>

637
00:27:54,359 --> 00:27:59,340
loading the<font color="#E5E5E5"> clean binary</font><font color="#CCCCCC"> in 2d inspire</font>

638
00:27:56,909 --> 00:28:01,409
<font color="#E5E5E5">it's a little bit more friendly we use</font>

639
00:27:59,340 --> 00:28:03,269
the analyzer again to look for<font color="#CCCCCC"> add</font>

640
00:28:01,409 --> 00:28:05,849
service endpoint<font color="#E5E5E5"> and revealed that the</font>

641
00:28:03,269 --> 00:28:08,999
method<font color="#E5E5E5"> and namespace</font><font color="#CCCCCC"> 0 class</font><font color="#E5E5E5"> zero method</font>

642
00:28:05,849 --> 00:28:11,759
<font color="#CCCCCC">zero</font><font color="#E5E5E5"> of key</font><font color="#CCCCCC"> ah simple service calls add</font>

643
00:28:08,999 --> 00:28:13,619
service in point so analyzing<font color="#CCCCCC"> the</font><font color="#E5E5E5"> call</font>

644
00:28:11,759 --> 00:28:16,080
to<font color="#E5E5E5"> this again revealed the address</font>

645
00:28:13,619 --> 00:28:18,509
binding<font color="#CCCCCC"> and service contract the</font>

646
00:28:16,080 --> 00:28:20,309
contract here is<font color="#CCCCCC"> I registry service the</font>

647
00:28:18,509 --> 00:28:23,609
binding is a net named pipe binding and

648
00:28:20,309 --> 00:28:26,070
the contract<font color="#CCCCCC"> are sorry the address is</font>

649
00:28:23,609 --> 00:28:29,689
net<font color="#E5E5E5"> dot pipe</font><font color="#CCCCCC"> localhost key</font><font color="#E5E5E5"> ah simple</font>

650
00:28:26,070 --> 00:28:29,689
plus<font color="#E5E5E5"> the pipe registry</font>

651
00:28:33,070 --> 00:28:38,330
so within the registry service contract

652
00:28:36,560 --> 00:28:40,070
there are<font color="#E5E5E5"> several methods and some of</font>

653
00:28:38,330 --> 00:28:40,669
them are<font color="#E5E5E5"> particularly more interesting</font>

654
00:28:40,070 --> 00:28:42,740
than<font color="#CCCCCC"> others</font>

655
00:28:40,670 --> 00:28:44,570
those are<font color="#CCCCCC"> changed local machine registry</font>

656
00:28:42,740 --> 00:28:49,480
value which<font color="#E5E5E5"> immediately caught our</font>

657
00:28:44,570 --> 00:28:53,770
attention<font color="#CCCCCC"> start service and stop service</font>

658
00:28:49,480 --> 00:28:55,940
<font color="#CCCCCC">and knowing the functionality of these</font>

659
00:28:53,770 --> 00:28:58,580
different methods based on their names

660
00:28:55,940 --> 00:29:00,380
<font color="#E5E5E5">prior to even analyzing them we got an</font>

661
00:28:58,580 --> 00:29:02,960
idea<font color="#E5E5E5"> of how we would exploit this</font>

662
00:29:00,380 --> 00:29:06,080
particular<font color="#CCCCCC"> service</font><font color="#E5E5E5"> so here's our attack</font>

663
00:29:02,960 --> 00:29:08,510
plan<font color="#E5E5E5"> first we want to populate the image</font>

664
00:29:06,080 --> 00:29:10,100
path key of the target<font color="#CCCCCC"> application using</font>

665
00:29:08,510 --> 00:29:13,580
<font color="#CCCCCC">the change local</font><font color="#E5E5E5"> machine registry value</font>

666
00:29:10,100 --> 00:29:15,230
method<font color="#CCCCCC"> services</font><font color="#E5E5E5"> and windows have a value</font>

667
00:29:13,580 --> 00:29:17,600
<font color="#E5E5E5">in the registry called image path which</font>

668
00:29:15,230 --> 00:29:19,550
points to<font color="#CCCCCC"> the application or the binary</font>

669
00:29:17,600 --> 00:29:21,889
that<font color="#E5E5E5"> will start</font><font color="#CCCCCC"> whenever the services</font>

670
00:29:19,550 --> 00:29:23,950
started so if we change<font color="#E5E5E5"> this</font><font color="#CCCCCC"> value</font><font color="#E5E5E5"> when</font>

671
00:29:21,890 --> 00:29:27,260
the<font color="#E5E5E5"> service</font><font color="#CCCCCC"> has started</font><font color="#E5E5E5"> or run whatever</font>

672
00:29:23,950 --> 00:29:29,120
executable<font color="#E5E5E5"> we define after we change</font>

673
00:29:27,260 --> 00:29:31,040
this value<font color="#E5E5E5"> we want to call stop service</font>

674
00:29:29,120 --> 00:29:33,320
<font color="#E5E5E5">in case the service is already running</font>

675
00:29:31,040 --> 00:29:37,040
<font color="#E5E5E5">they want to call start service in order</font>

676
00:29:33,320 --> 00:29:41,090
<font color="#E5E5E5">to cause</font><font color="#CCCCCC"> the application</font><font color="#E5E5E5"> that we chose</font>

677
00:29:37,040 --> 00:29:43,700
<font color="#E5E5E5">to execute as system what we noticed was</font>

678
00:29:41,090 --> 00:29:45,949
<font color="#E5E5E5">the parameters to these methods it was</font>

679
00:29:43,700 --> 00:29:47,750
required at<font color="#CCCCCC"> that they</font><font color="#E5E5E5"> were</font><font color="#CCCCCC"> Triple DES</font>

680
00:29:45,950 --> 00:29:50,930
encrypted with<font color="#E5E5E5"> a password</font><font color="#CCCCCC"> and the basics</font>

681
00:29:47,750 --> 00:29:52,610
<font color="#CCCCCC">for encoded which at first</font><font color="#E5E5E5"> we thought it</font>

682
00:29:50,930 --> 00:29:54,140
<font color="#CCCCCC">was we were doomed that</font><font color="#E5E5E5"> we couldn't</font>

683
00:29:52,610 --> 00:29:56,959
exploit<font color="#E5E5E5"> this because we don't</font><font color="#CCCCCC"> have the</font>

684
00:29:54,140 --> 00:29:58,490
password<font color="#E5E5E5"> however the password is</font>

685
00:29:56,960 --> 00:30:01,790
actually hard-coded to<font color="#CCCCCC"> the application</font>

686
00:29:58,490 --> 00:30:06,110
so it wasn't truly<font color="#E5E5E5"> secure it was like I</font>

687
00:30:01,790 --> 00:30:08,750
don't know security<font color="#CCCCCC"> theater I suppose so</font>

688
00:30:06,110 --> 00:30:10,520
after referencing<font color="#CCCCCC"> key AA simple script a</font>

689
00:30:08,750 --> 00:30:12,430
graphic library<font color="#E5E5E5"> just as we did with the</font>

690
00:30:10,520 --> 00:30:14,600
service proxy library they had a

691
00:30:12,430 --> 00:30:16,370
cryptographic library<font color="#E5E5E5"> that we just chose</font>

692
00:30:14,600 --> 00:30:18,439
<font color="#E5E5E5">to use instead</font><font color="#CCCCCC"> of implementing our own</font>

693
00:30:16,370 --> 00:30:20,389
Triple DES encrypter<font color="#CCCCCC"> we just used the</font>

694
00:30:18,440 --> 00:30:22,610
encrypted<font color="#E5E5E5"> class in order to encrypt our</font>

695
00:30:20,390 --> 00:30:24,080
argument values as<font color="#E5E5E5"> you can see the</font>

696
00:30:22,610 --> 00:30:27,080
service<font color="#CCCCCC"> name is Rasmus that's the</font>

697
00:30:24,080 --> 00:30:29,510
<font color="#E5E5E5">service we target because it's it starts</font>

698
00:30:27,080 --> 00:30:31,490
as local system and it's not<font color="#E5E5E5"> super</font>

699
00:30:29,510 --> 00:30:34,000
<font color="#CCCCCC">critical if it goes down</font><font color="#E5E5E5"> or comes up</font>

700
00:30:31,490 --> 00:30:37,190
however<font color="#CCCCCC"> through this particular</font>

701
00:30:34,000 --> 00:30:39,170
<font color="#E5E5E5">technique we could also change the start</font>

702
00:30:37,190 --> 00:30:40,340
name of any<font color="#E5E5E5"> service to local system</font>

703
00:30:39,170 --> 00:30:44,030
because we can change<font color="#E5E5E5"> the registry</font>

704
00:30:40,340 --> 00:30:44,600
values<font color="#E5E5E5"> the target key is</font><font color="#CCCCCC"> our sorry the</font>

705
00:30:44,030 --> 00:30:47,450
target name

706
00:30:44,600 --> 00:30:50,659
<font color="#CCCCCC">is image path and the value that we want</font>

707
00:30:47,450 --> 00:30:54,290
to change<font color="#E5E5E5"> it to is netcat listener on</font>

708
00:30:50,660 --> 00:30:55,880
port<font color="#CCCCCC"> 4 4 4 4</font><font color="#E5E5E5"> that starts seeing the exe</font>

709
00:30:54,290 --> 00:30:57,740
in order to keep it<font color="#E5E5E5"> simple we encrypt</font>

710
00:30:55,880 --> 00:31:00,440
all of<font color="#E5E5E5"> these strings using the super</font>

711
00:30:57,740 --> 00:31:03,950
secure password of KS simple<font color="#CCCCCC"> emc pass</font>

712
00:31:00,440 --> 00:31:06,980
and encoded using the encrypter and then

713
00:31:03,950 --> 00:31:08,600
we use<font color="#E5E5E5"> our service channel proxy</font><font color="#CCCCCC"> called</font>

714
00:31:06,980 --> 00:31:10,640
client<font color="#CCCCCC"> in order</font><font color="#E5E5E5"> to call change local</font>

715
00:31:08,600 --> 00:31:13,010
machine<font color="#CCCCCC"> a registry value using some of</font>

716
00:31:10,640 --> 00:31:14,690
these keys<font color="#E5E5E5"> after this will stop the</font>

717
00:31:13,010 --> 00:31:18,560
<font color="#E5E5E5">service and then start the</font><font color="#CCCCCC"> service in</font>

718
00:31:14,690 --> 00:31:21,770
order to execute<font color="#E5E5E5"> our command as local</font>

719
00:31:18,560 --> 00:31:25,220
system and here's a demonstration<font color="#CCCCCC"> of</font>

720
00:31:21,770 --> 00:31:27,920
<font color="#E5E5E5">this so as before I'll run Who am I</font>

721
00:31:25,220 --> 00:31:30,080
in order<font color="#CCCCCC"> to demonstrate</font><font color="#E5E5E5"> that I am just</font>

722
00:31:27,920 --> 00:31:31,520
<font color="#CCCCCC">AI user</font><font color="#E5E5E5"> low</font><font color="#CCCCCC"> privilege user</font><font color="#E5E5E5"> we can see</font>

723
00:31:30,080 --> 00:31:35,090
that the image<font color="#CCCCCC"> paths</font><font color="#E5E5E5"> are now call</font>

724
00:31:31,520 --> 00:31:39,410
service host a<font color="#CCCCCC"> exe after we run the</font>

725
00:31:35,090 --> 00:31:42,080
exploit we get a shell<font color="#E5E5E5"> inside of windows</font>

726
00:31:39,410 --> 00:31:43,790
system32<font color="#CCCCCC"> running Who am</font><font color="#E5E5E5"> I and we're in</font><font color="#CCCCCC"> C</font>

727
00:31:42,080 --> 00:31:45,770
<font color="#CCCCCC">authority</font><font color="#E5E5E5"> system if we refresh the</font>

728
00:31:43,790 --> 00:31:47,389
registry editor<font color="#CCCCCC"> we check the image path</font>

729
00:31:45,770 --> 00:31:50,810
again we see that<font color="#CCCCCC"> it contains</font><font color="#E5E5E5"> our</font><font color="#CCCCCC"> net</font>

730
00:31:47,390 --> 00:31:54,200
<font color="#CCCCCC">cat string and if we go</font><font color="#E5E5E5"> to a process</font>

731
00:31:50,810 --> 00:31:56,750
<font color="#CCCCCC">explorer we can see our net cat client</font>

732
00:31:54,200 --> 00:32:00,470
<font color="#E5E5E5">is connecting on 4 4 4 4 as</font><font color="#CCCCCC"> I user and</font>

733
00:31:56,750 --> 00:32:02,360
our net cat service is listening on 4 4

734
00:32:00,470 --> 00:32:03,740
4 4 and it's running as<font color="#CCCCCC"> empty Authority</font>

735
00:32:02,360 --> 00:32:06,889
system<font color="#CCCCCC"> and that's</font><font color="#E5E5E5"> how we got our system</font>

736
00:32:03,740 --> 00:32:15,649
shell<font color="#E5E5E5"> through this particular exploit</font>

737
00:32:06,890 --> 00:32:15,649
[Applause]

738
00:32:18,690 --> 00:32:25,090
so the next<font color="#E5E5E5"> thing we want to</font><font color="#CCCCCC"> look at is</font>

739
00:32:21,660 --> 00:32:26,710
<font color="#CCCCCC">RCE variants of these particular attacks</font>

740
00:32:25,090 --> 00:32:28,449
because so far we've<font color="#E5E5E5"> only looked at low</font>

741
00:32:26,710 --> 00:32:30,190
local privilege escalation everyone

742
00:32:28,450 --> 00:32:33,880
knows<font color="#CCCCCC"> that</font><font color="#E5E5E5"> remote exploits are a lot</font>

743
00:32:30,190 --> 00:32:35,590
sexier<font color="#E5E5E5"> so what we did was using</font><font color="#CCCCCC"> the</font>

744
00:32:33,880 --> 00:32:38,140
techniques<font color="#CCCCCC"> that we discussed previously</font>

745
00:32:35,590 --> 00:32:40,689
and finding a remote target<font color="#CCCCCC"> we</font>

746
00:32:38,140 --> 00:32:43,440
<font color="#E5E5E5">discovered a service particularly</font>

747
00:32:40,690 --> 00:32:45,340
<font color="#E5E5E5">looking for the error messages</font>

748
00:32:43,440 --> 00:32:47,890
<font color="#CCCCCC">associated</font><font color="#E5E5E5"> with</font><font color="#CCCCCC"> CC F</font><font color="#E5E5E5"> we quickly</font>

749
00:32:45,340 --> 00:32:50,500
<font color="#E5E5E5">discovered a service that uses</font><font color="#CCCCCC"> an</font>

750
00:32:47,890 --> 00:32:53,560
<font color="#E5E5E5">established as a remote</font><font color="#CCCCCC"> WCF endpoint</font><font color="#E5E5E5"> and</font>

751
00:32:50,500 --> 00:32:55,780
listens<font color="#CCCCCC"> on</font><font color="#E5E5E5"> the not just</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> local</font>

752
00:32:53,560 --> 00:32:58,320
<font color="#CCCCCC">network but on</font><font color="#E5E5E5"> whatever</font><font color="#CCCCCC"> our system is</font>

753
00:32:55,780 --> 00:33:00,700
<font color="#CCCCCC">able to access that target</font><font color="#E5E5E5"> and it's</font><font color="#CCCCCC"> a</font>

754
00:32:58,320 --> 00:33:01,929
application<font color="#E5E5E5"> popular commercial bandwidth</font>

755
00:33:00,700 --> 00:33:04,270
performance<font color="#CCCCCC"> and fault management</font>

756
00:33:01,930 --> 00:33:05,680
application<font color="#CCCCCC"> some of you guys might</font><font color="#E5E5E5"> be</font>

757
00:33:04,270 --> 00:33:08,080
<font color="#E5E5E5">able to guess that</font><font color="#CCCCCC"> this application</font><font color="#E5E5E5"> is</font>

758
00:33:05,680 --> 00:33:10,930
but<font color="#E5E5E5"> will release more information later</font>

759
00:33:08,080 --> 00:33:13,899
on<font color="#CCCCCC"> verify its website as well</font><font color="#E5E5E5"> as their</font>

760
00:33:10,930 --> 00:33:15,790
<font color="#CCCCCC">Twitter the service exposes an insecure</font>

761
00:33:13,900 --> 00:33:18,490
remote endpoint through net TCP binding

762
00:33:15,790 --> 00:33:19,930
which is a<font color="#E5E5E5"> change up from our net name</font>

763
00:33:18,490 --> 00:33:21,670
pipe<font color="#CCCCCC"> button that we've been using</font><font color="#E5E5E5"> thus</font>

764
00:33:19,930 --> 00:33:23,740
far<font color="#E5E5E5"> and</font><font color="#CCCCCC"> actually</font><font color="#E5E5E5"> found this while</font>

765
00:33:21,670 --> 00:33:25,180
preparing for<font color="#CCCCCC"> echo party I was building</font>

766
00:33:23,740 --> 00:33:27,070
the slide deck I was like man<font color="#E5E5E5"> this is</font>

767
00:33:25,180 --> 00:33:28,480
<font color="#CCCCCC">lame i only have local privilege</font>

768
00:33:27,070 --> 00:33:30,250
escalation vulnerabilities<font color="#CCCCCC"> i need to</font>

769
00:33:28,480 --> 00:33:32,320
find<font color="#E5E5E5"> something remote so I applied the</font>

770
00:33:30,250 --> 00:33:34,360
techniques<font color="#E5E5E5"> that I showed</font><font color="#CCCCCC"> you guys and I</font>

771
00:33:32,320 --> 00:33:35,860
was<font color="#CCCCCC"> able to find</font><font color="#E5E5E5"> this vulnerability as I</font>

772
00:33:34,360 --> 00:33:40,629
mentioned you<font color="#CCCCCC"> can follow</font><font color="#E5E5E5"> at</font><font color="#CCCCCC"> ver sprite</font>

773
00:33:35,860 --> 00:33:43,959
for release<font color="#CCCCCC"> details so</font><font color="#E5E5E5"> analysis of this</font>

774
00:33:40,630 --> 00:33:46,300
particular<font color="#E5E5E5"> service it exposes many</font><font color="#CCCCCC"> WCF</font>

775
00:33:43,960 --> 00:33:48,280
endpoints probably the most I've seen<font color="#E5E5E5"> in</font>

776
00:33:46,300 --> 00:33:50,409
<font color="#E5E5E5">any of the services that have</font><font color="#CCCCCC"> analyzed</font>

777
00:33:48,280 --> 00:33:52,330
<font color="#E5E5E5">there are tons of endpoints</font><font color="#CCCCCC"> the one that</font>

778
00:33:50,410 --> 00:33:54,520
caught my attention<font color="#CCCCCC"> was</font><font color="#E5E5E5"> invoke action</font>

779
00:33:52,330 --> 00:33:58,710
method<font color="#E5E5E5"> it</font><font color="#CCCCCC"> takes an action</font><font color="#E5E5E5"> ID a method</font>

780
00:33:54,520 --> 00:34:01,780
name<font color="#E5E5E5"> and arguments in order to actually</font>

781
00:33:58,710 --> 00:34:03,760
execute a<font color="#E5E5E5"> particular command one</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> the</font>

782
00:34:01,780 --> 00:34:05,920
action type IDs that I noticed was

783
00:34:03,760 --> 00:34:08,530
<font color="#CCCCCC">executed external program which</font><font color="#E5E5E5"> again</font>

784
00:34:05,920 --> 00:34:10,750
<font color="#E5E5E5">caught my attention because surely this</font>

785
00:34:08,530 --> 00:34:14,580
wasn't an endpoint<font color="#E5E5E5"> that executed</font>

786
00:34:10,750 --> 00:34:17,940
whatever program I told it<font color="#E5E5E5"> to however</font>

787
00:34:14,580 --> 00:34:20,440
analysis revealed that that<font color="#CCCCCC"> was the case</font>

788
00:34:17,940 --> 00:34:23,050
however<font color="#CCCCCC"> we also noticed that</font><font color="#E5E5E5"> it was a</font>

789
00:34:20,440 --> 00:34:24,339
secure endpoint<font color="#E5E5E5"> supposedly because</font><font color="#CCCCCC"> they</font>

790
00:34:23,050 --> 00:34:26,469
required a password

791
00:34:24,339 --> 00:34:28,478
and I didn't have<font color="#CCCCCC"> a password however the</font>

792
00:34:26,469 --> 00:34:31,418
password<font color="#CCCCCC"> wasn't real password it was a</font>

793
00:34:28,478 --> 00:34:34,058
hash of<font color="#E5E5E5"> the username so again almost</font>

794
00:34:31,418 --> 00:34:36,279
security theater<font color="#E5E5E5"> and that's</font><font color="#CCCCCC"> a trend that</font>

795
00:34:34,059 --> 00:34:38,889
I've also noticed<font color="#E5E5E5"> people attempting to</font>

796
00:34:36,279 --> 00:34:43,539
secure<font color="#E5E5E5"> WCF services but doing so and</font>

797
00:34:38,889 --> 00:34:45,489
properly<font color="#CCCCCC"> and so in order to exploit this</font>

798
00:34:43,539 --> 00:34:48,339
it was<font color="#E5E5E5"> very simple it was essentially</font>

799
00:34:45,489 --> 00:34:52,059
<font color="#E5E5E5">the</font><font color="#CCCCCC"> volunteer</font><font color="#E5E5E5"> service run me example</font>

800
00:34:48,339 --> 00:34:54,549
<font color="#E5E5E5">except a remote variant so I decided to</font>

801
00:34:52,059 --> 00:34:57,339
<font color="#CCCCCC">use a</font><font color="#E5E5E5"> PowerShell</font><font color="#CCCCCC"> a one-liner that gives</font>

802
00:34:54,549 --> 00:34:59,979
a reverse<font color="#CCCCCC"> shell adapted from the nice</font>

803
00:34:57,339 --> 00:35:02,799
<font color="#CCCCCC">Shang PowerShell library that you might</font>

804
00:34:59,979 --> 00:35:05,649
be able<font color="#CCCCCC"> to</font><font color="#E5E5E5"> find on github and set up a</font>

805
00:35:02,799 --> 00:35:09,329
listener<font color="#CCCCCC"> that</font><font color="#E5E5E5"> receives this reverse</font>

806
00:35:05,650 --> 00:35:11,999
shell<font color="#E5E5E5"> and gain a remote system</font><font color="#CCCCCC"> shell</font><font color="#E5E5E5"> and</font>

807
00:35:09,329 --> 00:35:14,710
here's a<font color="#CCCCCC"> demonstration of that</font><font color="#E5E5E5"> this is</font><font color="#CCCCCC"> a</font>

808
00:35:11,999 --> 00:35:18,968
power shell prompt<font color="#E5E5E5"> on the attacker</font>

809
00:35:14,710 --> 00:35:21,969
machine and I run<font color="#CCCCCC"> hostname you can see</font>

810
00:35:18,969 --> 00:35:25,479
that it's a laptop<font color="#E5E5E5"> around Who am I I'm</font>

811
00:35:21,969 --> 00:35:28,329
at laptop<font color="#CCCCCC"> backslash fabious I run the</font>

812
00:35:25,479 --> 00:35:32,799
<font color="#CCCCCC">plc against the IP address</font><font color="#E5E5E5"> of the</font><font color="#CCCCCC"> VM</font>

813
00:35:28,329 --> 00:35:35,559
that<font color="#E5E5E5"> I tested this in</font><font color="#CCCCCC"> South as a</font>

814
00:35:32,799 --> 00:35:37,719
<font color="#E5E5E5">connection gets identity hashes the</font>

815
00:35:35,559 --> 00:35:39,579
password creates the channel since<font color="#E5E5E5"> the</font>

816
00:35:37,719 --> 00:35:44,170
command waits for the connection<font color="#E5E5E5"> it</font>

817
00:35:39,579 --> 00:35:45,880
takes a little bit but it's worth it

818
00:35:44,170 --> 00:35:47,769
<font color="#E5E5E5">because whatever it actually does her</font>

819
00:35:45,880 --> 00:35:50,529
<font color="#CCCCCC">turn represent it with</font><font color="#E5E5E5"> a PowerShell</font>

820
00:35:47,769 --> 00:35:52,508
system shell<font color="#CCCCCC"> I'll run a hostname you can</font>

821
00:35:50,529 --> 00:35:54,190
see that the host name is<font color="#CCCCCC"> MS edge Winton</font>

822
00:35:52,509 --> 00:35:57,869
which<font color="#E5E5E5"> is our expected identity name</font>

823
00:35:54,190 --> 00:35:57,869
around<font color="#CCCCCC"> who in line</font><font color="#E5E5E5"> I'm system</font>

824
00:36:03,690 --> 00:36:08,730
as I mentioned using<font color="#E5E5E5"> the techniques</font>

825
00:36:06,250 --> 00:36:12,220
described here like analysis is quick

826
00:36:08,730 --> 00:36:14,140
<font color="#E5E5E5">because it all you have to do is D</font>

827
00:36:12,220 --> 00:36:19,899
<font color="#E5E5E5">compile it search</font><font color="#CCCCCC"> for a</font><font color="#E5E5E5"> service endpoint</font>

828
00:36:14,140 --> 00:36:22,868
<font color="#CCCCCC">and identify the these the identify the</font>

829
00:36:19,900 --> 00:36:24,849
service the implementation find all the

830
00:36:22,869 --> 00:36:28,349
methods that<font color="#E5E5E5"> are revealed</font><font color="#CCCCCC"> see if they're</font>

831
00:36:24,849 --> 00:36:32,829
useful<font color="#E5E5E5"> and if they are exploit them</font>

832
00:36:28,349 --> 00:36:35,140
so mitigations<font color="#E5E5E5"> it's important so number</font>

833
00:36:32,829 --> 00:36:36,849
<font color="#E5E5E5">one avoid exposing any potentially</font>

834
00:36:35,140 --> 00:36:39,190
<font color="#CCCCCC">dangerous operations don't</font><font color="#E5E5E5"> expose</font>

835
00:36:36,849 --> 00:36:41,650
operations that run code<font color="#E5E5E5"> don't expose</font>

836
00:36:39,190 --> 00:36:43,510
operations that modify critical system

837
00:36:41,650 --> 00:36:45,940
variables don't do any of<font color="#E5E5E5"> those things</font>

838
00:36:43,510 --> 00:36:47,349
<font color="#CCCCCC">because without doing that even if you</font>

839
00:36:45,940 --> 00:36:50,980
have the<font color="#E5E5E5"> most insecure endpoint they</font>

840
00:36:47,349 --> 00:36:52,599
can't be abused<font color="#E5E5E5"> next make sure that you</font>

841
00:36:50,980 --> 00:36:54,460
securely program<font color="#E5E5E5"> any operations that you</font>

842
00:36:52,599 --> 00:36:56,800
do expose for instance<font color="#E5E5E5"> some</font><font color="#CCCCCC"> of the</font>

843
00:36:54,460 --> 00:36:58,210
<font color="#E5E5E5">exposed operations seems benign but the</font>

844
00:36:56,800 --> 00:36:59,319
way that<font color="#E5E5E5"> they were implemented they</font><font color="#CCCCCC"> had</font>

845
00:36:58,210 --> 00:37:00,579
<font color="#CCCCCC">vulnerabilities in the actual</font>

846
00:36:59,319 --> 00:37:05,440
<font color="#CCCCCC">implementations</font><font color="#E5E5E5"> such as command</font>

847
00:37:00,579 --> 00:37:09,210
injection also require proper

848
00:37:05,440 --> 00:37:11,680
<font color="#E5E5E5">authentication</font><font color="#CCCCCC"> for instance we saw</font><font color="#E5E5E5"> twice</font>

849
00:37:09,210 --> 00:37:14,530
<font color="#CCCCCC">authentication was required but it</font>

850
00:37:11,680 --> 00:37:16,450
wasn't truly validated<font color="#CCCCCC"> Microsoft</font><font color="#E5E5E5"> has</font>

851
00:37:14,530 --> 00:37:18,910
tons of documentation on setting up a

852
00:37:16,450 --> 00:37:22,089
secure<font color="#CCCCCC"> channel I know</font><font color="#E5E5E5"> an auditing</font><font color="#CCCCCC"> OAM</font>

853
00:37:18,910 --> 00:37:23,828
WCF services they properly<font color="#E5E5E5"> secure</font>

854
00:37:22,089 --> 00:37:26,319
authentication through tokens and keys

855
00:37:23,829 --> 00:37:28,060
so it's<font color="#E5E5E5"> possible it's just that many</font>

856
00:37:26,319 --> 00:37:30,790
developers<font color="#CCCCCC"> don't</font><font color="#E5E5E5"> do what it takes to</font>

857
00:37:28,060 --> 00:37:34,000
securely authenticate<font color="#E5E5E5"> connection to</font>

858
00:37:30,790 --> 00:37:35,890
services<font color="#E5E5E5"> and now</font><font color="#CCCCCC"> lastly try running is</font>

859
00:37:34,000 --> 00:37:37,660
local service instead of local system

860
00:37:35,890 --> 00:37:39,790
local service<font color="#E5E5E5"> as much for your</font>

861
00:37:37,660 --> 00:37:41,950
vulnerabilities or much fewer

862
00:37:39,790 --> 00:37:43,990
permissions<font color="#E5E5E5"> than local system there are</font>

863
00:37:41,950 --> 00:37:46,240
a<font color="#E5E5E5"> few ways</font><font color="#CCCCCC"> to elevate from local service</font>

864
00:37:43,990 --> 00:37:48,459
to local<font color="#E5E5E5"> system but this is a step</font>

865
00:37:46,240 --> 00:37:52,450
<font color="#CCCCCC">forward</font><font color="#E5E5E5"> if you don't require system</font>

866
00:37:48,460 --> 00:37:56,260
privileges<font color="#E5E5E5"> through your service and in</font>

867
00:37:52,450 --> 00:37:59,439
conclusion<font color="#E5E5E5"> so</font><font color="#CCCCCC"> WCF</font><font color="#E5E5E5"> endpoint abuse is very</font>

868
00:37:56,260 --> 00:38:01,390
right vulnerability<font color="#CCCCCC"> class as far as I</font>

869
00:37:59,440 --> 00:38:04,810
know the only<font color="#E5E5E5"> vulnerabilities that</font><font color="#CCCCCC"> are</font>

870
00:38:01,390 --> 00:38:06,819
public in regards to exploiting<font color="#CCCCCC"> WCF</font>

871
00:38:04,810 --> 00:38:09,339
endpoints are the one<font color="#E5E5E5"> that</font><font color="#CCCCCC"> I've</font><font color="#E5E5E5"> reported</font>

872
00:38:06,819 --> 00:38:11,349
as well as those<font color="#CCCCCC"> that are based on other</font>

873
00:38:09,339 --> 00:38:15,040
vulnerabilities<font color="#E5E5E5"> that I've</font><font color="#CCCCCC"> reported such</font>

874
00:38:11,349 --> 00:38:16,970
as those found in<font color="#E5E5E5"> a VPN services it's</font>

875
00:38:15,040 --> 00:38:20,119
<font color="#E5E5E5">easy to analyze you don't have to</font>

876
00:38:16,970 --> 00:38:21,980
<font color="#CCCCCC">engineer</font><font color="#E5E5E5"> any assembly you can just</font>

877
00:38:20,119 --> 00:38:23,480
decompile it look at the managed code

878
00:38:21,980 --> 00:38:25,609
and understand what's going on

879
00:38:23,480 --> 00:38:27,349
<font color="#CCCCCC">cease the exploit</font><font color="#E5E5E5"> there's no memory</font>

880
00:38:25,609 --> 00:38:28,750
corruption<font color="#CCCCCC"> it's all like logic</font>

881
00:38:27,349 --> 00:38:31,970
vulnerabilities that<font color="#E5E5E5"> you're exploiting</font>

882
00:38:28,750 --> 00:38:34,849
<font color="#E5E5E5">so it's very simple for even if you're</font>

883
00:38:31,970 --> 00:38:39,919
new to attacking software<font color="#CCCCCC"> free</font><font color="#E5E5E5"> to pick</font>

884
00:38:34,849 --> 00:38:42,859
<font color="#CCCCCC">up and take away some vulnerabilities</font>

885
00:38:39,920 --> 00:38:44,810
with<font color="#E5E5E5"> and I advise you guys to hunt for</font>

886
00:38:42,859 --> 00:38:50,990
more<font color="#CCCCCC"> WCF end</font><font color="#E5E5E5"> point of use</font><font color="#CCCCCC"> of</font>

887
00:38:44,810 --> 00:38:55,580
vulnerabilities<font color="#E5E5E5"> any questions I probably</font>

888
00:38:50,990 --> 00:38:57,410
couldn't understand you guys anyway that

889
00:38:55,580 --> 00:39:02,330
<font color="#E5E5E5">concludes my talk I suppose</font>

890
00:38:57,410 --> 00:39:02,330
[Applause]

891
00:39:07,710 --> 00:39:09,770
you

