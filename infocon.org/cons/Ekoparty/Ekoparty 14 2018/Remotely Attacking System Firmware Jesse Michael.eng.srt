1
00:00:00,030 --> 00:00:05,430
remotely attacking system<font color="#CCCCCC"> failure Jessie</font>

2
00:00:03,720 --> 00:00:06,960
Michael the most<font color="#E5E5E5"> aruna bullied I believe</font>

3
00:00:05,430 --> 00:00:09,510
that in<font color="#CCCCCC"> la characteristic attack Teresa</font>

4
00:00:06,960 --> 00:00:12,360
<font color="#CCCCCC">soon appear</font><font color="#E5E5E5"> Internet closet</font><font color="#CCCCCC"> Emma's u e</font><font color="#E5E5E5"> a</font>

5
00:00:09,510 --> 00:00:15,000
<font color="#CCCCCC">high-capacity lazada Petra so</font><font color="#E5E5E5"> firmly</font><font color="#CCCCCC"> Co</font>

6
00:00:12,360 --> 00:00:17,279
so acute indiscernible<font color="#E5E5E5"> de privilegio más</font>

7
00:00:15,000 --> 00:00:19,948
<font color="#CCCCCC">Alto a body in velocity Mazda detection</font>

8
00:00:17,279 --> 00:00:22,350
su edad<font color="#E5E5E5"> inclusive sobrevivir at</font><font color="#CCCCCC"> places</font>

9
00:00:19,949 --> 00:00:25,590
<font color="#CCCCCC">in eliciting aperitivo we want to</font>

10
00:00:22,350 --> 00:00:27,510
present<font color="#E5E5E5"> something really new</font><font color="#CCCCCC"> i remote</font>

11
00:00:25,590 --> 00:00:30,779
attacking system from a<font color="#CCCCCC"> samsung really</font>

12
00:00:27,510 --> 00:00:33,870
special<font color="#E5E5E5"> for us because we have reliable</font>

13
00:00:30,779 --> 00:00:36,800
<font color="#E5E5E5">exploit for for this research which</font><font color="#CCCCCC"> is</font>

14
00:00:33,870 --> 00:00:41,149
<font color="#CCCCCC">we're really proud to have the work done</font>

15
00:00:36,800 --> 00:00:43,559
<font color="#E5E5E5">by three</font><font color="#CCCCCC"> people myself jesse and mickey</font>

16
00:00:41,149 --> 00:00:47,309
<font color="#CCCCCC">mickey couldn't make it here because</font><font color="#E5E5E5"> he</font>

17
00:00:43,559 --> 00:00:51,419
<font color="#E5E5E5">is now in in blue head</font><font color="#CCCCCC"> trying</font><font color="#E5E5E5"> to</font>

18
00:00:47,309 --> 00:00:54,989
<font color="#E5E5E5">understand what this new apt 28</font><font color="#CCCCCC"> ufi</font>

19
00:00:51,420 --> 00:00:56,910
<font color="#E5E5E5">implant is doing and and and how</font>

20
00:00:54,989 --> 00:00:58,739
interesting<font color="#E5E5E5"> it could be for</font><font color="#CCCCCC"> us as</font><font color="#E5E5E5"> a</font>

21
00:00:56,910 --> 00:01:00,870
<font color="#E5E5E5">community</font><font color="#CCCCCC"> as an industry to the dag this</font>

22
00:00:58,739 --> 00:01:02,519
type of<font color="#E5E5E5"> threats to</font><font color="#CCCCCC"> understand this type</font>

23
00:01:00,870 --> 00:01:05,820
of<font color="#E5E5E5"> threats and</font><font color="#CCCCCC"> so and I do a little bit</font>

24
00:01:02,520 --> 00:01:08,760
<font color="#CCCCCC">mention</font><font color="#E5E5E5"> this</font><font color="#CCCCCC"> during the talk so</font><font color="#E5E5E5"> over the</font>

25
00:01:05,820 --> 00:01:11,369
talk<font color="#CCCCCC"> we'll go over</font><font color="#E5E5E5"> some</font><font color="#CCCCCC"> of the basic</font>

26
00:01:08,760 --> 00:01:13,080
things<font color="#E5E5E5"> some of</font><font color="#CCCCCC"> the fundamentals</font><font color="#E5E5E5"> we'll</font>

27
00:01:11,369 --> 00:01:14,970
talk a little<font color="#CCCCCC"> bit about how</font><font color="#E5E5E5"> much</font>

28
00:01:13,080 --> 00:01:16,920
<font color="#E5E5E5">different remote interfaces we have in</font>

29
00:01:14,970 --> 00:01:18,840
nowadays<font color="#E5E5E5"> in a</font><font color="#CCCCCC"> low-level components like</font>

30
00:01:16,920 --> 00:01:21,330
from<font color="#CCCCCC"> our system</font><font color="#E5E5E5"> from</font><font color="#CCCCCC"> my</font><font color="#E5E5E5"> being seen</font><font color="#CCCCCC"> so on</font>

31
00:01:18,840 --> 00:01:23,340
<font color="#E5E5E5">then we will go over</font><font color="#CCCCCC"> their remote</font>

32
00:01:21,330 --> 00:01:25,789
attacks on specific component and

33
00:01:23,340 --> 00:01:28,259
specific feature<font color="#CCCCCC"> and some of the vendors</font>

34
00:01:25,790 --> 00:01:30,810
<font color="#E5E5E5">which will find vulnerabilities which</font>

35
00:01:28,259 --> 00:01:32,400
was<font color="#CCCCCC"> find reliability</font><font color="#E5E5E5"> and then we'll walk</font>

36
00:01:30,810 --> 00:01:34,380
<font color="#E5E5E5">through the exploit and we'll talk a</font>

37
00:01:32,400 --> 00:01:37,560
<font color="#CCCCCC">little</font><font color="#E5E5E5"> bit about why it is important to</font>

38
00:01:34,380 --> 00:01:40,589
<font color="#E5E5E5">care</font><font color="#CCCCCC"> about that</font><font color="#E5E5E5"> so if</font><font color="#CCCCCC"> we're talking</font>

39
00:01:37,560 --> 00:01:42,689
<font color="#E5E5E5">about any technology stack</font><font color="#CCCCCC"> we're</font><font color="#E5E5E5"> always</font>

40
00:01:40,590 --> 00:01:44,939
<font color="#E5E5E5">thinking about like user mode</font>

41
00:01:42,689 --> 00:01:46,758
applications<font color="#E5E5E5"> like browse their office</font>

42
00:01:44,939 --> 00:01:49,169
<font color="#E5E5E5">and we want to make</font><font color="#CCCCCC"> sure that it is</font>

43
00:01:46,759 --> 00:01:50,939
updated and we know there<font color="#E5E5E5"> is a bunch of</font>

44
00:01:49,170 --> 00:01:53,399
good security done in these two<font color="#CCCCCC"> layers</font>

45
00:01:50,939 --> 00:01:55,350
in a user mode in the kernel<font color="#CCCCCC"> so we know</font>

46
00:01:53,399 --> 00:01:57,659
<font color="#CCCCCC">that there is about</font><font color="#E5E5E5"> a</font><font color="#CCCCCC"> lot of</font><font color="#E5E5E5"> a lot</font><font color="#CCCCCC"> of</font>

47
00:01:55,350 --> 00:01:59,640
exploit mitigations was implemented

48
00:01:57,659 --> 00:02:01,469
there was like<font color="#CCCCCC"> internal steam doing</font>

49
00:01:59,640 --> 00:02:04,320
validation there's bug bounty programs

50
00:02:01,469 --> 00:02:06,089
and we think there's like industry make

51
00:02:04,320 --> 00:02:09,000
a really<font color="#E5E5E5"> great job here for</font><font color="#CCCCCC"> the last</font><font color="#E5E5E5"> 10</font>

52
00:02:06,090 --> 00:02:10,649
years to<font color="#CCCCCC"> create the attack from the</font><font color="#E5E5E5"> from</font>

53
00:02:09,000 --> 00:02:12,340
the browser to the kernel

54
00:02:10,649 --> 00:02:15,310
you need to chain a bunch of

55
00:02:12,340 --> 00:02:18,430
when a bunch of bugs<font color="#CCCCCC"> - the vulnerability</font>

56
00:02:15,310 --> 00:02:21,340
<font color="#E5E5E5">to the exploit chain to compromise it so</font>

57
00:02:18,430 --> 00:02:24,880
but<font color="#E5E5E5"> in every technology stack there is a</font>

58
00:02:21,340 --> 00:02:27,010
second<font color="#E5E5E5"> part which is hardware</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> from</font>

59
00:02:24,880 --> 00:02:29,170
the server<font color="#CCCCCC"> to the desktop</font><font color="#E5E5E5"> to the</font><font color="#CCCCCC"> laptop</font>

60
00:02:27,010 --> 00:02:32,440
<font color="#CCCCCC">to</font><font color="#E5E5E5"> ATM machines</font><font color="#CCCCCC"> to a guide system in the</font>

61
00:02:29,170 --> 00:02:34,720
car and so<font color="#E5E5E5"> on</font><font color="#CCCCCC"> and usually we think about</font>

62
00:02:32,440 --> 00:02:37,150
hardware as a monolithic trusted block

63
00:02:34,720 --> 00:02:39,430
<font color="#E5E5E5">so we</font><font color="#CCCCCC"> don't think that's supposed to</font>

64
00:02:37,150 --> 00:02:41,230
make<font color="#E5E5E5"> any security problem for us</font><font color="#CCCCCC"> because</font>

65
00:02:39,430 --> 00:02:43,780
we buy the<font color="#CCCCCC"> Carver from vendors may</font>

66
00:02:41,230 --> 00:02:47,590
believe the vendors great<font color="#CCCCCC"> menu great did</font>

67
00:02:43,780 --> 00:02:48,940
great job<font color="#E5E5E5"> to protect our</font><font color="#CCCCCC"> hardware</font><font color="#E5E5E5"> same</font>

68
00:02:47,590 --> 00:02:51,610
as<font color="#E5E5E5"> for the user mode we assume that</font>

69
00:02:48,940 --> 00:02:53,709
security<font color="#E5E5E5"> of the hardware is very well</font>

70
00:02:51,610 --> 00:02:56,019
done<font color="#E5E5E5"> as security for</font><font color="#CCCCCC"> example in the</font>

71
00:02:53,709 --> 00:02:58,180
browser but what happened in<font color="#E5E5E5"> the last</font>

72
00:02:56,019 --> 00:03:00,580
decades<font color="#E5E5E5"> is the</font><font color="#CCCCCC"> hardly become much more</font>

73
00:02:58,180 --> 00:03:03,040
complicated and the vendors is trying to

74
00:03:00,580 --> 00:03:06,910
do some job but they still have a bunch

75
00:03:03,040 --> 00:03:08,769
<font color="#E5E5E5">of things to</font><font color="#CCCCCC"> do</font><font color="#E5E5E5"> so this</font><font color="#CCCCCC"> is the this is</font>

76
00:03:06,910 --> 00:03:12,099
<font color="#E5E5E5">the</font><font color="#CCCCCC"> example of the low-end server</font>

77
00:03:08,769 --> 00:03:14,440
motherboard<font color="#E5E5E5"> and if you think about that</font>

78
00:03:12,099 --> 00:03:17,350
<font color="#E5E5E5">every server nowadays has</font><font color="#CCCCCC"> a bunch of</font>

79
00:03:14,440 --> 00:03:19,150
components like it could be<font color="#E5E5E5"> between like</font>

80
00:03:17,350 --> 00:03:20,880
10 and<font color="#E5E5E5"> 15 different components from</font>

81
00:03:19,150 --> 00:03:23,170
different vendor<font color="#E5E5E5"> or from different</font>

82
00:03:20,880 --> 00:03:25,180
<font color="#CCCCCC">timestamp collected to</font><font color="#E5E5E5"> the Builder</font>

83
00:03:23,170 --> 00:03:26,738
motherboard<font color="#E5E5E5"> and these components in many</font>

84
00:03:25,180 --> 00:03:29,980
cases may run a software<font color="#CCCCCC"> called</font><font color="#E5E5E5"> the</font>

85
00:03:26,739 --> 00:03:31,810
framer<font color="#E5E5E5"> and this</font><font color="#CCCCCC"> firma can be outdated it</font>

86
00:03:29,980 --> 00:03:34,569
can be<font color="#CCCCCC"> compile it without security</font>

87
00:03:31,810 --> 00:03:36,609
mitigations<font color="#E5E5E5"> it could be in some cases</font>

88
00:03:34,569 --> 00:03:39,310
<font color="#E5E5E5">vendor you may not have a source code of</font>

89
00:03:36,609 --> 00:03:42,010
<font color="#E5E5E5">that because it was just too old in some</font>

90
00:03:39,310 --> 00:03:44,290
cases the signature<font color="#CCCCCC"> the update may not</font>

91
00:03:42,010 --> 00:03:46,328
be signed so attacker may use legitimate

92
00:03:44,290 --> 00:03:48,250
interface to update the firm and

93
00:03:46,329 --> 00:03:50,500
compromise assist and compromise<font color="#CCCCCC"> this</font>

94
00:03:48,250 --> 00:03:53,530
specific component in many<font color="#E5E5E5"> cases that</font>

95
00:03:50,500 --> 00:03:55,870
<font color="#E5E5E5">component doesn't have read interface so</font>

96
00:03:53,530 --> 00:03:58,239
<font color="#E5E5E5">you cannot like run integrity on</font><font color="#CCCCCC"> under</font>

97
00:03:55,870 --> 00:03:59,859
components and in many cases<font color="#CCCCCC"> that</font>

98
00:03:58,239 --> 00:04:01,480
components has the interfaces to

99
00:03:59,859 --> 00:04:03,970
compromise the other components and

100
00:04:01,480 --> 00:04:06,280
entire system for<font color="#E5E5E5"> example there is a</font><font color="#CCCCCC"> DMA</font>

101
00:04:03,970 --> 00:04:07,630
<font color="#CCCCCC">cop ability which will allow components</font>

102
00:04:06,280 --> 00:04:09,940
which has this capability could

103
00:04:07,630 --> 00:04:13,780
compromise the host the host<font color="#CCCCCC"> of the</font>

104
00:04:09,940 --> 00:04:16,029
system like a victim operation system

105
00:04:13,780 --> 00:04:18,820
like<font color="#E5E5E5"> extract the secrets from</font><font color="#CCCCCC"> the memory</font>

106
00:04:16,029 --> 00:04:22,239
<font color="#E5E5E5">and so on so forth</font><font color="#CCCCCC"> so this is</font><font color="#E5E5E5"> telling us</font>

107
00:04:18,820 --> 00:04:24,280
the the the<font color="#CCCCCC"> serious blind-spot</font><font color="#E5E5E5"> which</font>

108
00:04:22,240 --> 00:04:25,280
which we have right<font color="#CCCCCC"> now in a technology</font>

109
00:04:24,280 --> 00:04:27,440
<font color="#CCCCCC">stack</font>

110
00:04:25,280 --> 00:04:30,020
and if you think<font color="#CCCCCC"> about there is a two</font>

111
00:04:27,440 --> 00:04:33,320
type<font color="#CCCCCC"> of a type which usually</font><font color="#E5E5E5"> we</font><font color="#CCCCCC"> consider</font>

112
00:04:30,020 --> 00:04:35,240
<font color="#CCCCCC">into low level components</font><font color="#E5E5E5"> one is their</font>

113
00:04:33,320 --> 00:04:37,430
attack with physical<font color="#E5E5E5"> access so if</font>

114
00:04:35,240 --> 00:04:40,130
someone has their physical access to<font color="#E5E5E5"> the</font>

115
00:04:37,430 --> 00:04:42,050
<font color="#CCCCCC">laptop</font><font color="#E5E5E5"> desktop or server</font><font color="#CCCCCC"> they can do</font>

116
00:04:40,130 --> 00:04:43,760
<font color="#E5E5E5">something they could attach programmer</font>

117
00:04:42,050 --> 00:04:46,160
to some of the components reprogram the

118
00:04:43,760 --> 00:04:48,080
elements and you think<font color="#CCCCCC"> about this it</font>

119
00:04:46,160 --> 00:04:49,220
sounds<font color="#E5E5E5"> like complicated</font><font color="#CCCCCC"> we need to do</font>

120
00:04:48,080 --> 00:04:51,440
and<font color="#E5E5E5"> you need to have a bunch of</font>

121
00:04:49,220 --> 00:04:54,340
knowledge we demonstrated<font color="#E5E5E5"> this year that</font>

122
00:04:51,440 --> 00:04:57,320
it<font color="#E5E5E5"> is taken less than five minutes to</font>

123
00:04:54,340 --> 00:05:00,320
infect any<font color="#E5E5E5"> enterprise laptop with the</font>

124
00:04:57,320 --> 00:05:02,840
<font color="#E5E5E5">physical presence with open source but</font>

125
00:05:00,320 --> 00:05:04,700
<font color="#E5E5E5">implant which makes</font><font color="#CCCCCC"> it this attack even</font>

126
00:05:02,840 --> 00:05:07,190
<font color="#E5E5E5">more simpler we did it for research</font>

127
00:05:04,700 --> 00:05:09,590
<font color="#E5E5E5">purpose to demonstrate just how easy it</font>

128
00:05:07,190 --> 00:05:12,320
<font color="#E5E5E5">is to compromise</font><font color="#CCCCCC"> systems</font><font color="#E5E5E5"> physical access</font>

129
00:05:09,590 --> 00:05:14,750
<font color="#E5E5E5">and multiple technology doesn't</font><font color="#CCCCCC"> make</font><font color="#E5E5E5"> any</font>

130
00:05:12,320 --> 00:05:16,669
prevention from the physical access<font color="#E5E5E5"> but</font>

131
00:05:14,750 --> 00:05:18,470
there is not<font color="#CCCCCC"> just only</font><font color="#E5E5E5"> physical access</font>

132
00:05:16,669 --> 00:05:23,780
there a second part and there are second

133
00:05:18,470 --> 00:05:25,669
sets of second area for the attacker is

134
00:05:23,780 --> 00:05:27,200
software attacks attacks which<font color="#CCCCCC"> we</font>

135
00:05:25,669 --> 00:05:29,450
<font color="#E5E5E5">initiated from the software perspective</font>

136
00:05:27,200 --> 00:05:31,280
<font color="#E5E5E5">so</font><font color="#CCCCCC"> neither someone running already in</font>

137
00:05:29,450 --> 00:05:33,110
the system from<font color="#CCCCCC"> the operation system and</font>

138
00:05:31,280 --> 00:05:35,210
it tried<font color="#CCCCCC"> to compromise</font><font color="#E5E5E5"> more</font><font color="#CCCCCC"> low-level</font>

139
00:05:33,110 --> 00:05:37,700
components to get a persistence<font color="#CCCCCC"> yes</font>

140
00:05:35,210 --> 00:05:39,620
<font color="#E5E5E5">stealthy to make it invisible</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> make it</font>

141
00:05:37,700 --> 00:05:40,969
in a level of privileges<font color="#E5E5E5"> that will</font>

142
00:05:39,620 --> 00:05:44,210
survive for<font color="#E5E5E5"> installation</font><font color="#CCCCCC"> operation</font>

143
00:05:40,970 --> 00:05:46,340
system reimaging a high drive a hard

144
00:05:44,210 --> 00:05:48,500
drive replacement hard drive and<font color="#E5E5E5"> even</font>

145
00:05:46,340 --> 00:05:51,729
update<font color="#CCCCCC"> you bias there is type of</font><font color="#E5E5E5"> there</font>

146
00:05:48,500 --> 00:05:54,350
is type of<font color="#E5E5E5"> malicious there is there is</font>

147
00:05:51,729 --> 00:05:57,110
malicious<font color="#E5E5E5"> samples which could survive</font>

148
00:05:54,350 --> 00:05:59,180
<font color="#E5E5E5">even update of the</font><font color="#CCCCCC"> BIOS and if you think</font>

149
00:05:57,110 --> 00:06:01,280
about<font color="#E5E5E5"> the software threads there is a</font>

150
00:05:59,180 --> 00:06:03,530
two categories<font color="#E5E5E5"> in</font><font color="#CCCCCC"> it software test one</font>

151
00:06:01,280 --> 00:06:05,330
with the local privileges<font color="#E5E5E5"> which is like</font>

152
00:06:03,530 --> 00:06:07,070
you can say yeah I would assume if

153
00:06:05,330 --> 00:06:09,320
someone compromised it<font color="#E5E5E5"> already my system</font>

154
00:06:07,070 --> 00:06:09,950
then I don't need<font color="#CCCCCC"> to</font><font color="#E5E5E5"> this is game over</font>

155
00:06:09,320 --> 00:06:12,860
<font color="#CCCCCC">already</font>

156
00:06:09,950 --> 00:06:15,349
but there's second type of them of the

157
00:06:12,860 --> 00:06:16,820
software<font color="#E5E5E5"> tags remote attacks and you you</font>

158
00:06:15,350 --> 00:06:18,530
may you<font color="#CCCCCC"> may think about</font><font color="#E5E5E5"> yeah but</font><font color="#CCCCCC"> the</font>

159
00:06:16,820 --> 00:06:21,919
<font color="#CCCCCC">Fermin not supposed to have any remote</font>

160
00:06:18,530 --> 00:06:23,900
interface<font color="#CCCCCC"> so in theory firmly supposed</font>

161
00:06:21,919 --> 00:06:26,419
to be like something insulated which

162
00:06:23,900 --> 00:06:28,849
doesn't need to have<font color="#E5E5E5"> that</font><font color="#CCCCCC"> its</font><font color="#E5E5E5"> entire</font>

163
00:06:26,419 --> 00:06:30,650
<font color="#E5E5E5">network status but in reality it is</font>

164
00:06:28,850 --> 00:06:33,349
different and we know multiple<font color="#E5E5E5"> examples</font>

165
00:06:30,650 --> 00:06:35,179
when the from and in the some<font color="#CCCCCC"> of the</font>

166
00:06:33,349 --> 00:06:36,770
hardware<font color="#CCCCCC"> components</font><font color="#E5E5E5"> has in time</font>

167
00:06:35,180 --> 00:06:38,060
limitation of the network stack which is

168
00:06:36,770 --> 00:06:40,010
<font color="#E5E5E5">fully in the</font>

169
00:06:38,060 --> 00:06:41,960
from the OS which could be compromised

170
00:06:40,010 --> 00:06:45,110
<font color="#CCCCCC">it's separately which is</font><font color="#E5E5E5"> working</font>

171
00:06:41,960 --> 00:06:47,479
separately<font color="#CCCCCC"> and there is there is there</font>

172
00:06:45,110 --> 00:06:50,240
<font color="#CCCCCC">is couple of them one</font><font color="#E5E5E5"> example is the BMC</font>

173
00:06:47,480 --> 00:06:52,190
one so BMC is a<font color="#CCCCCC"> baseball management</font>

174
00:06:50,240 --> 00:06:54,770
controller is the<font color="#E5E5E5"> part of the management</font>

175
00:06:52,190 --> 00:06:57,320
capabilities in any<font color="#CCCCCC"> model server</font><font color="#E5E5E5"> so any</font>

176
00:06:54,770 --> 00:06:59,090
server has it<font color="#CCCCCC"> and even before</font><font color="#E5E5E5"> you press</font>

177
00:06:57,320 --> 00:07:00,740
the button<font color="#E5E5E5"> but after you plug the power</font>

178
00:06:59,090 --> 00:07:03,109
to the server this components<font color="#CCCCCC"> already is</font>

179
00:07:00,740 --> 00:07:05,780
<font color="#E5E5E5">Iranian and this components has already</font>

180
00:07:03,110 --> 00:07:08,120
its own<font color="#E5E5E5"> network stack which has its own</font>

181
00:07:05,780 --> 00:07:10,520
MAC address and<font color="#E5E5E5"> already</font><font color="#CCCCCC"> send the traffic</font>

182
00:07:08,120 --> 00:07:12,740
<font color="#CCCCCC">even before you press the button on your</font>

183
00:07:10,520 --> 00:07:14,570
server<font color="#CCCCCC"> this technology even work if you</font>

184
00:07:12,740 --> 00:07:16,880
don't<font color="#CCCCCC"> have</font><font color="#E5E5E5"> CPU if you don't have memory</font>

185
00:07:14,570 --> 00:07:19,430
<font color="#CCCCCC">you still can boot BMC and</font><font color="#E5E5E5"> you still can</font>

186
00:07:16,880 --> 00:07:21,830
use BMC capabilities in your server<font color="#E5E5E5"> and</font>

187
00:07:19,430 --> 00:07:24,110
it has its own<font color="#CCCCCC"> cpu it has</font><font color="#E5E5E5"> odds-on</font><font color="#CCCCCC"> ram it</font>

188
00:07:21,830 --> 00:07:26,330
has own<font color="#E5E5E5"> storage so it's fully dedicated</font>

189
00:07:24,110 --> 00:07:29,660
small computer inside<font color="#E5E5E5"> the server which</font>

190
00:07:26,330 --> 00:07:32,150
is<font color="#E5E5E5"> running even before the mains in the</font>

191
00:07:29,660 --> 00:07:33,800
main<font color="#E5E5E5"> CPU</font><font color="#CCCCCC"> it starts up</font><font color="#E5E5E5"> why we need these</font>

192
00:07:32,150 --> 00:07:36,229
capabilities<font color="#CCCCCC"> first of all it is</font>

193
00:07:33,800 --> 00:07:38,510
<font color="#E5E5E5">management capability so in many cases</font>

194
00:07:36,229 --> 00:07:40,370
you<font color="#CCCCCC"> want to have a remote qvm</font><font color="#E5E5E5"> you want</font>

195
00:07:38,510 --> 00:07:42,500
to remotely<font color="#E5E5E5"> install a person system you</font>

196
00:07:40,370 --> 00:07:43,880
want<font color="#E5E5E5"> to be remotely update</font><font color="#CCCCCC"> eubiose you</font>

197
00:07:42,500 --> 00:07:46,370
want to do a bunch of<font color="#E5E5E5"> things remotely</font>

198
00:07:43,880 --> 00:07:48,530
<font color="#E5E5E5">and how you can do it if you have a data</font>

199
00:07:46,370 --> 00:07:50,539
center with thousands<font color="#E5E5E5"> of servers you use</font>

200
00:07:48,530 --> 00:07:52,309
this key<font color="#CCCCCC"> vm capabilities</font><font color="#E5E5E5"> your provision</font>

201
00:07:50,539 --> 00:07:54,260
<font color="#CCCCCC">KPM automatic ok</font>

202
00:07:52,310 --> 00:07:57,770
<font color="#E5E5E5">BMC it automatically and then you use</font>

203
00:07:54,260 --> 00:08:00,830
all<font color="#E5E5E5"> of these capabilities</font><font color="#CCCCCC"> but</font><font color="#E5E5E5"> also</font><font color="#CCCCCC"> its</font>

204
00:07:57,770 --> 00:08:04,700
it<font color="#CCCCCC"> may be it makes</font><font color="#E5E5E5"> the huge blind spot</font>

205
00:08:00,830 --> 00:08:07,280
<font color="#E5E5E5">for the attacker and it has it</font><font color="#CCCCCC"> has its</font>

206
00:08:04,700 --> 00:08:09,440
own it may have it own implement<font color="#CCCCCC"> runner</font>

207
00:08:07,280 --> 00:08:11,719
abilities an implementation so if you

208
00:08:09,440 --> 00:08:13,400
just run a like scanning<font color="#E5E5E5"> of the BMC port</font>

209
00:08:11,720 --> 00:08:15,680
on the beams interface you will see that

210
00:08:13,400 --> 00:08:19,010
<font color="#CCCCCC">there the BMC has its own web server</font>

211
00:08:15,680 --> 00:08:21,169
<font color="#CCCCCC">like fully fully implemented web server</font>

212
00:08:19,010 --> 00:08:23,030
running<font color="#E5E5E5"> separately from</font><font color="#CCCCCC"> your computer</font>

213
00:08:21,169 --> 00:08:25,340
even<font color="#E5E5E5"> before your computer starts so</font>

214
00:08:23,030 --> 00:08:26,840
anywhere near<font color="#E5E5E5"> abilities there</font><font color="#CCCCCC"> may allow</font>

215
00:08:25,340 --> 00:08:29,090
you<font color="#E5E5E5"> to have an access before your</font>

216
00:08:26,840 --> 00:08:32,478
computer starts and because BMC is

217
00:08:29,090 --> 00:08:35,360
staying in a really sensitive<font color="#E5E5E5"> buses it</font>

218
00:08:32,479 --> 00:08:37,849
also has the DMA capability it could it

219
00:08:35,360 --> 00:08:39,979
has the<font color="#E5E5E5"> spy access so it could fully</font>

220
00:08:37,849 --> 00:08:42,800
control the<font color="#CCCCCC"> system from that point of</font>

221
00:08:39,979 --> 00:08:44,959
<font color="#CCCCCC">view and</font><font color="#E5E5E5"> we have a separate talk about</font>

222
00:08:42,799 --> 00:08:46,219
this tomorrow<font color="#E5E5E5"> if someone want</font><font color="#CCCCCC"> to get</font>

223
00:08:44,959 --> 00:08:48,589
more<font color="#E5E5E5"> details we will explain more</font>

224
00:08:46,220 --> 00:08:50,180
<font color="#CCCCCC">details tomorrow I don't know I</font><font color="#E5E5E5"> don't</font>

225
00:08:48,589 --> 00:08:52,520
need<font color="#E5E5E5"> to stop it today</font><font color="#CCCCCC"> from</font>

226
00:08:50,180 --> 00:08:55,370
for long<font color="#E5E5E5"> so and if you think</font><font color="#CCCCCC"> about the</font>

227
00:08:52,520 --> 00:08:57,410
<font color="#E5E5E5">BMC</font><font color="#CCCCCC"> it's not just only</font><font color="#E5E5E5"> alternate</font>

228
00:08:55,370 --> 00:08:58,970
interface<font color="#E5E5E5"> they also have a bunch of</font>

229
00:08:57,410 --> 00:09:01,310
<font color="#CCCCCC">other interface is supported by a</font>

230
00:08:58,970 --> 00:09:03,380
standard<font color="#E5E5E5"> which</font><font color="#CCCCCC"> is also they're opening</font>

231
00:09:01,310 --> 00:09:05,479
another attack vectors for<font color="#CCCCCC"> the attacker</font>

232
00:09:03,380 --> 00:09:10,640
so they can reuse<font color="#E5E5E5"> different capabilities</font>

233
00:09:05,480 --> 00:09:13,580
<font color="#CCCCCC">like</font><font color="#E5E5E5"> as serial over serial capabilities</font>

234
00:09:10,640 --> 00:09:16,430
with and other capabilities<font color="#E5E5E5"> accessible</font>

235
00:09:13,580 --> 00:09:19,280
for the<font color="#E5E5E5"> beams team</font><font color="#CCCCCC"> the this is</font>

236
00:09:16,430 --> 00:09:21,319
<font color="#CCCCCC">implementation-dependent</font><font color="#E5E5E5"> so if you not</font>

237
00:09:19,280 --> 00:09:23,600
every typical server may have multiple

238
00:09:21,320 --> 00:09:25,460
capabilities<font color="#CCCCCC"> but usually the basic</font>

239
00:09:23,600 --> 00:09:28,280
<font color="#CCCCCC">capabilities over</font><font color="#E5E5E5"> the net is accessible</font>

240
00:09:25,460 --> 00:09:30,650
is available<font color="#E5E5E5"> for any server so if you'll</font>

241
00:09:28,280 --> 00:09:34,400
<font color="#E5E5E5">take a look</font><font color="#CCCCCC"> a little bit in</font><font color="#E5E5E5"> history so</font>

242
00:09:30,650 --> 00:09:36,140
the the first<font color="#E5E5E5"> BMC standard BMC</font><font color="#CCCCCC"> ipmi</font>

243
00:09:34,400 --> 00:09:39,340
standard IP<font color="#E5E5E5"> mind sort of protocol to</font>

244
00:09:36,140 --> 00:09:42,860
communicate<font color="#CCCCCC"> to the BMC was released in</font>

245
00:09:39,340 --> 00:09:46,010
1998 and<font color="#CCCCCC"> that one didn't have any</font>

246
00:09:42,860 --> 00:09:48,520
network<font color="#E5E5E5"> capabilities so they releases</font>

247
00:09:46,010 --> 00:09:51,020
the standard for management<font color="#E5E5E5"> but without</font>

248
00:09:48,520 --> 00:09:52,790
<font color="#CCCCCC">network and it was pretty</font><font color="#E5E5E5"> good in</font>

249
00:09:51,020 --> 00:09:54,800
security perspective<font color="#E5E5E5"> but really bad for</font>

250
00:09:52,790 --> 00:09:56,510
<font color="#CCCCCC">usability perspective</font><font color="#E5E5E5"> because people</font>

251
00:09:54,800 --> 00:09:59,089
couldn't<font color="#E5E5E5"> use</font><font color="#CCCCCC"> it and then they start</font>

252
00:09:56,510 --> 00:10:01,189
granular<font color="#CCCCCC"> edge in</font><font color="#E5E5E5"> runner granular I did</font>

253
00:09:59,090 --> 00:10:03,140
<font color="#E5E5E5">different new capabilities</font><font color="#CCCCCC"> inclusion</font>

254
00:10:01,190 --> 00:10:07,520
<font color="#E5E5E5">network management capabilities</font>

255
00:10:03,140 --> 00:10:09,380
inclusion different protocols ipv6 Appa

256
00:10:07,520 --> 00:10:13,610
Appa and so on

257
00:10:09,380 --> 00:10:16,070
and then until 2013 everyone didn't care

258
00:10:13,610 --> 00:10:18,290
<font color="#CCCCCC">about security of that components but</font>

259
00:10:16,070 --> 00:10:21,770
<font color="#CCCCCC">there was</font><font color="#E5E5E5"> really good initiative started</font>

260
00:10:18,290 --> 00:10:26,120
from 2013<font color="#E5E5E5"> and up to these days and even</font>

261
00:10:21,770 --> 00:10:27,829
<font color="#CCCCCC">today there was immunity an eco immune</font>

262
00:10:26,120 --> 00:10:30,050
from immunity<font color="#E5E5E5"> presented their attacks</font>

263
00:10:27,830 --> 00:10:33,350
for the<font color="#E5E5E5"> for the BMC for the Dell system</font>

264
00:10:30,050 --> 00:10:36,319
so from 2013 until until now there is

265
00:10:33,350 --> 00:10:39,620
like at least five<font color="#E5E5E5"> major research was</font>

266
00:10:36,320 --> 00:10:41,540
presented<font color="#E5E5E5"> which was compromising BMC</font>

267
00:10:39,620 --> 00:10:43,460
over<font color="#E5E5E5"> different interfaces including</font>

268
00:10:41,540 --> 00:10:47,240
remote one and including the mode

269
00:10:43,460 --> 00:10:48,710
without<font color="#E5E5E5"> identification at all</font><font color="#CCCCCC"> we will</font>

270
00:10:47,240 --> 00:10:51,800
<font color="#E5E5E5">talk about that tomorrow</font><font color="#CCCCCC"> a little</font><font color="#E5E5E5"> as</font>

271
00:10:48,710 --> 00:10:53,810
well<font color="#E5E5E5"> so another component which</font><font color="#CCCCCC"> has its</font>

272
00:10:51,800 --> 00:10:56,719
own<font color="#CCCCCC"> network stack and also the part of</font>

273
00:10:53,810 --> 00:10:58,849
the attack surface is<font color="#CCCCCC"> Amy I'm team</font><font color="#E5E5E5"> this</font>

274
00:10:56,720 --> 00:11:00,470
<font color="#E5E5E5">is sort of similar to BMC but for</font>

275
00:10:58,850 --> 00:11:02,450
<font color="#E5E5E5">desktop so for desktop management</font>

276
00:11:00,470 --> 00:11:04,190
capabilities Intel released<font color="#E5E5E5"> that nice</font>

277
00:11:02,450 --> 00:11:06,709
technology

278
00:11:04,190 --> 00:11:08,360
this technology<font color="#E5E5E5"> is it's all here this</font>

279
00:11:06,709 --> 00:11:11,660
technology was implemented<font color="#E5E5E5"> in a chipset</font>

280
00:11:08,360 --> 00:11:14,120
<font color="#E5E5E5">and it is also has its own CPU its own</font>

281
00:11:11,660 --> 00:11:15,740
memory<font color="#E5E5E5"> its own storage so it is the</font>

282
00:11:14,120 --> 00:11:19,569
small computer which is running<font color="#E5E5E5"> in any</font>

283
00:11:15,740 --> 00:11:22,670
desktop<font color="#E5E5E5"> we</font><font color="#CCCCCC"> pro skew which is could be</font>

284
00:11:19,569 --> 00:11:24,829
good provide the remote capability for

285
00:11:22,670 --> 00:11:27,709
<font color="#CCCCCC">the</font><font color="#E5E5E5"> for the management for the IT</font>

286
00:11:24,829 --> 00:11:29,870
management and also<font color="#CCCCCC"> is the part of the</font>

287
00:11:27,709 --> 00:11:32,779
attack surface for the attacker<font color="#E5E5E5"> if you</font>

288
00:11:29,870 --> 00:11:34,670
scan the port for<font color="#E5E5E5"> the Intel for the</font>

289
00:11:32,779 --> 00:11:37,100
interim tme technology you will see that

290
00:11:34,670 --> 00:11:40,550
it also<font color="#E5E5E5"> has HTTP</font><font color="#CCCCCC"> HTTPS and</font><font color="#E5E5E5"> all of that</font>

291
00:11:37,100 --> 00:11:42,529
<font color="#E5E5E5">interestingly that in BMC in enemy if we</font>

292
00:11:40,550 --> 00:11:45,109
would connect<font color="#CCCCCC"> to http</font><font color="#E5E5E5"> it will not</font>

293
00:11:42,529 --> 00:11:47,420
redirected to HTTPS<font color="#E5E5E5"> so that's only your</font>

294
00:11:45,110 --> 00:11:49,130
choice to<font color="#CCCCCC"> pickins</font><font color="#E5E5E5"> and secure protocol to</font>

295
00:11:47,420 --> 00:11:51,279
communicate<font color="#E5E5E5"> to this technology</font>

296
00:11:49,130 --> 00:11:54,410
<font color="#E5E5E5">and if you take a look in the history</font>

297
00:11:51,279 --> 00:11:56,689
<font color="#E5E5E5">there's was similarly similar dynamics</font>

298
00:11:54,410 --> 00:11:58,880
so first they release technology<font color="#CCCCCC"> without</font>

299
00:11:56,690 --> 00:12:00,589
much network capability there was<font color="#E5E5E5"> some</font>

300
00:11:58,880 --> 00:12:04,069
network capability<font color="#E5E5E5"> but not much network</font>

301
00:12:00,589 --> 00:12:06,940
capability<font color="#E5E5E5"> in 2012 2010</font>

302
00:12:04,069 --> 00:12:09,889
<font color="#E5E5E5">Intel added</font><font color="#CCCCCC"> KVM as a part of the</font>

303
00:12:06,940 --> 00:12:12,620
functionality<font color="#CCCCCC"> to the IMT technology and</font>

304
00:12:09,889 --> 00:12:15,230
then some seven years<font color="#CCCCCC"> later</font><font color="#E5E5E5"> there was</font>

305
00:12:12,620 --> 00:12:17,660
real<font color="#CCCCCC"> interest of research initiated from</font>

306
00:12:15,230 --> 00:12:19,730
<font color="#E5E5E5">a multiple different companies showing</font>

307
00:12:17,660 --> 00:12:22,600
<font color="#E5E5E5">multiple different vulnerabilities</font><font color="#CCCCCC"> in</font>

308
00:12:19,730 --> 00:12:24,610
IBM in technology<font color="#E5E5E5"> inclusion bypass</font>

309
00:12:22,600 --> 00:12:27,310
<font color="#E5E5E5">identification with empty password</font>

310
00:12:24,610 --> 00:12:30,980
<font color="#E5E5E5">inclusion memory corruption</font><font color="#CCCCCC"> over</font>

311
00:12:27,310 --> 00:12:33,589
<font color="#E5E5E5">overages buffer overflow in in some of</font>

312
00:12:30,980 --> 00:12:38,120
the<font color="#E5E5E5"> Amir emiram code including even</font>

313
00:12:33,589 --> 00:12:39,860
<font color="#E5E5E5">debug</font><font color="#CCCCCC"> any empty chip set</font><font color="#E5E5E5"> over some of</font>

314
00:12:38,120 --> 00:12:41,870
the<font color="#CCCCCC"> G</font><font color="#E5E5E5"> backup ability which is Intel</font>

315
00:12:39,860 --> 00:12:44,000
<font color="#E5E5E5">provide for</font><font color="#CCCCCC"> pre-production</font><font color="#E5E5E5"> system was a</font>

316
00:12:41,870 --> 00:12:46,279
lot<font color="#E5E5E5"> of interesting research and showing</font>

317
00:12:44,000 --> 00:12:50,269
us that this is<font color="#E5E5E5"> really practical attacks</font>

318
00:12:46,279 --> 00:12:52,699
also<font color="#E5E5E5"> in 2016 there was a platinum</font>

319
00:12:50,269 --> 00:12:54,290
campaign there was in a wild attack

320
00:12:52,699 --> 00:12:56,839
which<font color="#CCCCCC"> is heavily used at any energy</font>

321
00:12:54,290 --> 00:13:01,300
technology<font color="#E5E5E5"> so a couple words about</font><font color="#CCCCCC"> that</font>

322
00:12:56,839 --> 00:13:04,009
<font color="#E5E5E5">Amy</font><font color="#CCCCCC"> I</font><font color="#E5E5E5"> mean amid a me MT technology has</font>

323
00:13:01,300 --> 00:13:05,839
consumption witches<font color="#E5E5E5"> has a state and that</font>

324
00:13:04,009 --> 00:13:07,970
<font color="#CCCCCC">state</font><font color="#E5E5E5"> could be disabled or enabled but</font>

325
00:13:05,839 --> 00:13:09,980
when the state is<font color="#E5E5E5"> enable it also has</font><font color="#CCCCCC"> two</font>

326
00:13:07,970 --> 00:13:12,170
another options it could be provisioned

327
00:13:09,980 --> 00:13:13,880
<font color="#CCCCCC">or not provision so if it is not</font>

328
00:13:12,170 --> 00:13:14,459
provisioned<font color="#CCCCCC"> it's ready to be provisioned</font>

329
00:13:13,880 --> 00:13:16,560
<font color="#CCCCCC">any</font>

330
00:13:14,460 --> 00:13:19,020
moment<font color="#E5E5E5"> and anyone this physical access</font>

331
00:13:16,560 --> 00:13:21,750
can provision<font color="#CCCCCC"> it over USB</font><font color="#E5E5E5"> or from</font><font color="#CCCCCC"> during</font>

332
00:13:19,020 --> 00:13:23,640
<font color="#CCCCCC">zero over</font><font color="#E5E5E5"> admin privileges if</font><font color="#CCCCCC"> it is</font>

333
00:13:21,750 --> 00:13:25,350
provision<font color="#CCCCCC"> it's locked down</font><font color="#E5E5E5"> so meaning</font>

334
00:13:23,640 --> 00:13:27,750
that<font color="#CCCCCC"> someone set up the password</font><font color="#E5E5E5"> for the</font>

335
00:13:25,350 --> 00:13:29,430
web from the web interface<font color="#CCCCCC"> someone said</font>

336
00:13:27,750 --> 00:13:31,770
the configuration<font color="#CCCCCC"> no one else could do</font>

337
00:13:29,430 --> 00:13:34,410
<font color="#CCCCCC">it</font><font color="#E5E5E5"> so if the</font><font color="#CCCCCC"> system is not</font><font color="#E5E5E5"> provisioned</font>

338
00:13:31,770 --> 00:13:36,930
<font color="#CCCCCC">it basically</font><font color="#E5E5E5"> allows an attacker reuse</font>

339
00:13:34,410 --> 00:13:39,329
this capabilities to provision itself so

340
00:13:36,930 --> 00:13:41,640
attacker know that<font color="#E5E5E5"> okay this system now</font>

341
00:13:39,330 --> 00:13:42,960
is<font color="#E5E5E5"> enabled and it is not provision I</font>

342
00:13:41,640 --> 00:13:45,090
will provision it it and<font color="#E5E5E5"> will use this</font>

343
00:13:42,960 --> 00:13:47,220
capability<font color="#CCCCCC"> this</font><font color="#E5E5E5"> is how does the Platinum</font>

344
00:13:45,090 --> 00:13:48,750
<font color="#E5E5E5">will use it</font><font color="#CCCCCC"> to build a really</font><font color="#E5E5E5"> stealthy</font>

345
00:13:47,220 --> 00:13:51,630
communication channel to the<font color="#E5E5E5"> census</font>

346
00:13:48,750 --> 00:13:53,850
server<font color="#E5E5E5"> over the provision</font><font color="#CCCCCC"> mg AMT</font><font color="#E5E5E5"> which</font>

347
00:13:51,630 --> 00:13:56,460
the attacker provision itself<font color="#CCCCCC"> and use</font>

348
00:13:53,850 --> 00:13:58,080
the serial over<font color="#E5E5E5"> the net capability to</font>

349
00:13:56,460 --> 00:14:02,070
send<font color="#E5E5E5"> traffic fully bypass of the</font>

350
00:13:58,080 --> 00:14:03,990
firewall in the systems so<font color="#CCCCCC"> and then also</font>

351
00:14:02,070 --> 00:14:06,450
we know<font color="#CCCCCC"> that there is a system</font><font color="#E5E5E5"> from</font>

352
00:14:03,990 --> 00:14:09,360
<font color="#E5E5E5">which we know that system need</font><font color="#CCCCCC"> to boot</font>

353
00:14:06,450 --> 00:14:11,670
somehow so and there was<font color="#CCCCCC"> a bias and then</font>

354
00:14:09,360 --> 00:14:14,820
as a<font color="#E5E5E5"> word system from is responsible to</font>

355
00:14:11,670 --> 00:14:16,199
boot this<font color="#E5E5E5"> system the by the system</font>

356
00:14:14,820 --> 00:14:19,080
<font color="#CCCCCC">framework has two</font><font color="#E5E5E5"> components runtime</font>

357
00:14:16,200 --> 00:14:21,630
component and runtime component and boot

358
00:14:19,080 --> 00:14:23,670
time component<font color="#E5E5E5"> we know that the system</font>

359
00:14:21,630 --> 00:14:26,189
<font color="#E5E5E5">from running from running</font><font color="#CCCCCC"> from the spine</font>

360
00:14:23,670 --> 00:14:28,130
and<font color="#E5E5E5"> it's</font><font color="#CCCCCC"> stored in a spy</font><font color="#E5E5E5"> and we know</font>

361
00:14:26,190 --> 00:14:30,320
it's<font color="#CCCCCC"> running in a main</font><font color="#E5E5E5"> platform and</font>

362
00:14:28,130 --> 00:14:33,540
typically if<font color="#CCCCCC"> we take a look in history</font>

363
00:14:30,320 --> 00:14:35,880
<font color="#E5E5E5">it we don't think too much about network</font>

364
00:14:33,540 --> 00:14:38,760
about<font color="#E5E5E5"> networking interfaces to</font><font color="#CCCCCC"> the</font>

365
00:14:35,880 --> 00:14:42,420
system<font color="#E5E5E5"> framer because we believe it it</font>

366
00:14:38,760 --> 00:14:45,210
doesn't<font color="#E5E5E5"> need</font><font color="#CCCCCC"> to have it but if we take a</font>

367
00:14:42,420 --> 00:14:46,920
look more deeply<font color="#E5E5E5"> in 2007 they start</font>

368
00:14:45,210 --> 00:14:48,900
adding<font color="#E5E5E5"> some of the network capability if</font>

369
00:14:46,920 --> 00:14:50,310
you remember there was like<font color="#E5E5E5"> a</font><font color="#CCCCCC"> pixie</font><font color="#E5E5E5"> boot</font>

370
00:14:48,900 --> 00:14:52,230
when you tried to boot over<font color="#E5E5E5"> the network</font>

371
00:14:50,310 --> 00:14:53,579
<font color="#CCCCCC">so that is a little bit network</font>

372
00:14:52,230 --> 00:14:55,440
capability and then they added<font color="#CCCCCC"> more</font>

373
00:14:53,580 --> 00:14:57,870
capabilities which<font color="#CCCCCC"> we'll</font><font color="#E5E5E5"> talk a little</font>

374
00:14:55,440 --> 00:15:00,660
<font color="#E5E5E5">bit</font><font color="#CCCCCC"> later like Wi-Fi Bluetooth</font><font color="#E5E5E5"> and so on</font>

375
00:14:57,870 --> 00:15:02,340
<font color="#E5E5E5">and you may ask why we need network</font>

376
00:15:00,660 --> 00:15:05,010
capabilities in<font color="#E5E5E5"> our system from in our</font>

377
00:15:02,340 --> 00:15:05,730
BIOS<font color="#E5E5E5"> like in the most trusted code in</font><font color="#CCCCCC"> a</font>

378
00:15:05,010 --> 00:15:07,830
<font color="#E5E5E5">platform</font>

379
00:15:05,730 --> 00:15:10,230
why we need<font color="#E5E5E5"> the</font><font color="#CCCCCC"> network capability again</font>

380
00:15:07,830 --> 00:15:11,970
because of<font color="#E5E5E5"> the</font><font color="#CCCCCC"> management that the</font>

381
00:15:10,230 --> 00:15:13,770
vendors want<font color="#E5E5E5"> to increase the management</font>

382
00:15:11,970 --> 00:15:15,510
capabilities and this require them<font color="#CCCCCC"> to</font>

383
00:15:13,770 --> 00:15:17,340
implement<font color="#E5E5E5"> entire network stack we</font>

384
00:15:15,510 --> 00:15:22,339
include in some<font color="#E5E5E5"> of the features like</font>

385
00:15:17,340 --> 00:15:24,350
update<font color="#E5E5E5"> over</font><font color="#CCCCCC"> the Internet inclusion like</font>

386
00:15:22,339 --> 00:15:28,519
<font color="#E5E5E5">Bluetooth Bluetooth keyboard and mouse</font>

387
00:15:24,350 --> 00:15:31,759
and<font color="#CCCCCC"> so on so from the standard from</font><font color="#E5E5E5"> the</font>

388
00:15:28,519 --> 00:15:33,319
standard 2.4<font color="#E5E5E5"> the entire reference</font>

389
00:15:31,759 --> 00:15:34,970
implementation<font color="#E5E5E5"> of the network stack was</font>

390
00:15:33,319 --> 00:15:37,160
done to you if I base it<font color="#E5E5E5"> bias</font><font color="#CCCCCC"> meaning</font>

391
00:15:34,970 --> 00:15:38,870
<font color="#E5E5E5">and that from that</font><font color="#CCCCCC"> point of</font><font color="#E5E5E5"> view any</font>

392
00:15:37,160 --> 00:15:41,180
bias which was bacon in<font color="#E5E5E5"> in the</font>

393
00:15:38,870 --> 00:15:45,819
<font color="#CCCCCC">platform's has the network stack from</font>

394
00:15:41,180 --> 00:15:49,998
the ITP<font color="#E5E5E5"> IP from</font><font color="#CCCCCC"> the IP IP</font><font color="#E5E5E5"> well for ipv6</font>

395
00:15:45,819 --> 00:15:51,769
<font color="#CCCCCC">TCP HTTP</font><font color="#E5E5E5"> HTTP</font><font color="#CCCCCC"> DHCP @cp and all of that</font>

396
00:15:49,999 --> 00:15:54,050
<font color="#CCCCCC">protocols and all of them was</font>

397
00:15:51,769 --> 00:15:56,149
implemented from scratch so minion at

398
00:15:54,050 --> 00:15:58,339
any vulnerability and death in that

399
00:15:56,149 --> 00:16:00,769
protocols will allow attacker to run the

400
00:15:58,339 --> 00:16:03,079
code even before the<font color="#E5E5E5"> West will boot and</font>

401
00:16:00,769 --> 00:16:05,149
then vendors start building more

402
00:16:03,079 --> 00:16:06,888
technology on top<font color="#CCCCCC"> of it</font><font color="#E5E5E5"> because</font><font color="#CCCCCC"> they</font>

403
00:16:05,149 --> 00:16:08,959
want to<font color="#E5E5E5"> extend this</font><font color="#CCCCCC"> text so some of them</font>

404
00:16:06,889 --> 00:16:09,680
built entire restful api or<font color="#CCCCCC"> not already</font>

405
00:16:08,959 --> 00:16:11,809
<font color="#E5E5E5">existent</font>

406
00:16:09,680 --> 00:16:13,819
<font color="#E5E5E5">network stack which is was builded</font>

407
00:16:11,809 --> 00:16:15,949
before them<font color="#E5E5E5"> by</font><font color="#CCCCCC"> intel in a reference</font>

408
00:16:13,819 --> 00:16:18,079
<font color="#E5E5E5">implementation so the stack is is</font>

409
00:16:15,949 --> 00:16:21,378
<font color="#CCCCCC">growing and then it's it's growing</font>

410
00:16:18,079 --> 00:16:24,050
hugely vendors like<font color="#E5E5E5"> i am i implement</font>

411
00:16:21,379 --> 00:16:26,120
Bluetooth stack so if you if you play

412
00:16:24,050 --> 00:16:28,040
with<font color="#E5E5E5"> your setup screen from</font><font color="#CCCCCC"> the</font>

413
00:16:26,120 --> 00:16:30,439
<font color="#CCCCCC">Bluetooth keyboard and mouse that</font>

414
00:16:28,040 --> 00:16:32,360
Bluetooth stack is working<font color="#CCCCCC"> only because</font>

415
00:16:30,439 --> 00:16:34,160
the system from implement is Bluetooth

416
00:16:32,360 --> 00:16:35,749
stack<font color="#E5E5E5"> and the interesting one that is</font>

417
00:16:34,160 --> 00:16:38,029
<font color="#E5E5E5">supposed to enable by default and</font>

418
00:16:35,749 --> 00:16:39,589
supposed<font color="#E5E5E5"> to enable and scan</font><font color="#CCCCCC"> it the net</font>

419
00:16:38,029 --> 00:16:41,929
<font color="#CCCCCC">with the</font><font color="#E5E5E5"> devices in the</font><font color="#CCCCCC"> boutots</font>

420
00:16:39,589 --> 00:16:44,480
capability so any vulnerability<font color="#E5E5E5"> remote</font>

421
00:16:41,929 --> 00:16:46,519
vulnerabilities<font color="#CCCCCC"> there</font><font color="#E5E5E5"> make make a game</font>

422
00:16:44,480 --> 00:16:49,579
over<font color="#E5E5E5"> for</font><font color="#CCCCCC"> an entire compromised</font><font color="#E5E5E5"> of the</font>

423
00:16:46,519 --> 00:16:52,279
system<font color="#CCCCCC"> and we found</font><font color="#E5E5E5"> that there that</font><font color="#CCCCCC"> this</font>

424
00:16:49,579 --> 00:16:53,929
that<font color="#E5E5E5"> stack also has asanam components so</font>

425
00:16:52,279 --> 00:16:55,910
the the components which is running<font color="#E5E5E5"> in</font>

426
00:16:53,929 --> 00:16:58,129
<font color="#CCCCCC">the most privileged mode in the system</font>

427
00:16:55,910 --> 00:17:01,309
then we<font color="#CCCCCC"> also figure</font><font color="#E5E5E5"> out that there</font><font color="#CCCCCC"> is a</font>

428
00:16:58,129 --> 00:17:03,230
Wi-Fi<font color="#E5E5E5"> stack there so some again</font><font color="#CCCCCC"> I'm I</font>

429
00:17:01,309 --> 00:17:05,470
implemented the Wi-Fi stack so even

430
00:17:03,230 --> 00:17:07,760
before<font color="#CCCCCC"> person system is starts</font><font color="#E5E5E5"> already</font>

431
00:17:05,470 --> 00:17:09,589
customized<font color="#CCCCCC"> that Wi-Fi stack is Iranian</font>

432
00:17:07,760 --> 00:17:13,069
<font color="#E5E5E5">and scanning and looking for the</font>

433
00:17:09,589 --> 00:17:15,408
networks and as we know that<font color="#E5E5E5"> I already</font>

434
00:17:13,069 --> 00:17:17,178
<font color="#CCCCCC">mention</font><font color="#E5E5E5"> a little</font><font color="#CCCCCC"> bit</font><font color="#E5E5E5"> some</font><font color="#CCCCCC"> of them some</font>

435
00:17:15,409 --> 00:17:18,500
<font color="#CCCCCC">of the BIOS implement</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> pixie</font>

436
00:17:17,179 --> 00:17:20,240
functionality which could be done

437
00:17:18,500 --> 00:17:22,279
<font color="#CCCCCC">differently</font><font color="#E5E5E5"> depends on the architecture</font>

438
00:17:20,240 --> 00:17:23,959
<font color="#E5E5E5">if</font><font color="#CCCCCC"> it's running</font><font color="#E5E5E5"> from external device it</font>

439
00:17:22,279 --> 00:17:27,319
could<font color="#E5E5E5"> be done from option ROM</font><font color="#CCCCCC"> it could</font>

440
00:17:23,959 --> 00:17:29,179
be known as an internal<font color="#E5E5E5"> Dixie driver but</font>

441
00:17:27,319 --> 00:17:31,730
these<font color="#E5E5E5"> capabilities exist basically you</font>

442
00:17:29,179 --> 00:17:34,399
can boot the system<font color="#CCCCCC"> from HTTP</font><font color="#E5E5E5"> or from a</font>

443
00:17:31,730 --> 00:17:34,760
<font color="#CCCCCC">TFTP you can put your person system from</font>

444
00:17:34,399 --> 00:17:37,129
there

445
00:17:34,760 --> 00:17:41,450
which is also<font color="#CCCCCC"> given</font><font color="#E5E5E5"> the attacker good</font>

446
00:17:37,130 --> 00:17:42,860
level of privileges and base it<font color="#E5E5E5"> on all</font>

447
00:17:41,450 --> 00:17:44,809
<font color="#E5E5E5">that nice</font><font color="#CCCCCC"> technology</font><font color="#E5E5E5"> when they start</font>

448
00:17:42,860 --> 00:17:47,750
<font color="#CCCCCC">building and as it features for example</font>

449
00:17:44,809 --> 00:17:50,809
<font color="#E5E5E5">this HP intelligent</font><font color="#CCCCCC"> provisioning</font><font color="#E5E5E5"> system</font>

450
00:17:47,750 --> 00:17:54,950
is the<font color="#E5E5E5"> system which</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> allowing to</font>

451
00:17:50,809 --> 00:17:56,899
download and<font color="#CCCCCC"> Iran</font><font color="#E5E5E5"> different software in</font>

452
00:17:54,950 --> 00:17:59,059
the context of<font color="#E5E5E5"> your buyers from</font><font color="#CCCCCC"> the HP</font>

453
00:17:56,900 --> 00:18:02,210
side so<font color="#E5E5E5"> meaning that if you enterprise</font>

454
00:17:59,059 --> 00:18:03,980
you have the<font color="#E5E5E5"> route of</font><font color="#CCCCCC"> trust fully</font><font color="#E5E5E5"> to the</font>

455
00:18:02,210 --> 00:18:05,570
vendors<font color="#CCCCCC"> website</font><font color="#E5E5E5"> so if someone</font>

456
00:18:03,980 --> 00:18:07,400
<font color="#E5E5E5">compromised the vendor infrastructure</font>

457
00:18:05,570 --> 00:18:08,750
then they could<font color="#E5E5E5"> compromise all of the</font>

458
00:18:07,400 --> 00:18:11,390
system which is<font color="#E5E5E5"> unions</font><font color="#CCCCCC"> and this</font>

459
00:18:08,750 --> 00:18:13,580
technology<font color="#E5E5E5"> so meaning if if you in</font>

460
00:18:11,390 --> 00:18:15,140
enterprise<font color="#E5E5E5"> and if you have HP server and</font>

461
00:18:13,580 --> 00:18:16,939
you didn't disable<font color="#CCCCCC"> this technology</font>

462
00:18:15,140 --> 00:18:19,220
<font color="#E5E5E5">inside your trusted</font><font color="#CCCCCC"> bundle</font><font color="#E5E5E5"> you have</font>

463
00:18:16,940 --> 00:18:21,110
<font color="#CCCCCC">entire infrastructure</font><font color="#E5E5E5"> of the HP plus if</font>

464
00:18:19,220 --> 00:18:23,260
the HP for some reason deliver some

465
00:18:21,110 --> 00:18:26,330
vulnerable binaries<font color="#CCCCCC"> it's also could be</font>

466
00:18:23,260 --> 00:18:28,580
<font color="#CCCCCC">running in your</font><font color="#E5E5E5"> in your BIOS in the BIOS</font>

467
00:18:26,330 --> 00:18:31,520
of the enterprise<font color="#E5E5E5"> another interesting</font>

468
00:18:28,580 --> 00:18:33,799
feature was<font color="#E5E5E5"> a sent</font><font color="#CCCCCC"> SMTP so you can send</font>

469
00:18:31,520 --> 00:18:36,020
emails from<font color="#E5E5E5"> your</font><font color="#CCCCCC"> buyers so even</font><font color="#E5E5E5"> before</font>

470
00:18:33,799 --> 00:18:38,360
the operation<font color="#CCCCCC"> system boots there's a</font>

471
00:18:36,020 --> 00:18:41,840
capabilities which you basically<font color="#E5E5E5"> can use</font>

472
00:18:38,360 --> 00:18:44,449
to send email<font color="#E5E5E5"> and you may ask why why</font>

473
00:18:41,840 --> 00:18:47,330
they<font color="#CCCCCC"> needed because</font><font color="#E5E5E5"> of the Diagnostics</font>

474
00:18:44,450 --> 00:18:49,700
<font color="#E5E5E5">there was a nice example how to how to</font>

475
00:18:47,330 --> 00:18:52,159
<font color="#E5E5E5">build the agnostic over sent EP so you</font>

476
00:18:49,700 --> 00:18:53,870
can attach any file and send it<font color="#CCCCCC"> to some</font>

477
00:18:52,160 --> 00:18:55,850
random<font color="#E5E5E5"> email from</font><font color="#CCCCCC"> your buyers before</font>

478
00:18:53,870 --> 00:18:58,040
<font color="#E5E5E5">purchasing system boots it has entire</font>

479
00:18:55,850 --> 00:19:02,719
access to the file system because it's

480
00:18:58,040 --> 00:19:04,610
<font color="#CCCCCC">loaded its own in TFS driver and then</font>

481
00:19:02,720 --> 00:19:06,530
remote diagnostics<font color="#E5E5E5"> there is another</font>

482
00:19:04,610 --> 00:19:09,049
feature<font color="#E5E5E5"> which is</font><font color="#CCCCCC"> accessible for the HP</font>

483
00:19:06,530 --> 00:19:10,820
<font color="#CCCCCC">foreign</font><font color="#E5E5E5"> Diagnostics on</font><font color="#CCCCCC"> the system</font><font color="#E5E5E5"> for</font>

484
00:19:09,049 --> 00:19:12,500
the desktop<font color="#CCCCCC"> and laptop this</font><font color="#E5E5E5"> one is</font>

485
00:19:10,820 --> 00:19:14,480
pretty interesting<font color="#E5E5E5"> because it you can</font>

486
00:19:12,500 --> 00:19:17,960
schedule this time to time and then it

487
00:19:14,480 --> 00:19:20,540
<font color="#E5E5E5">will scan the remote server and if it</font>

488
00:19:17,960 --> 00:19:22,250
will find that that<font color="#CCCCCC"> arel</font><font color="#E5E5E5"> that you'll try</font>

489
00:19:20,540 --> 00:19:24,049
<font color="#CCCCCC">to download</font><font color="#E5E5E5"> the agnostic stew and run it</font>

490
00:19:22,250 --> 00:19:26,570
<font color="#E5E5E5">so pretty dangerous functionality as</font>

491
00:19:24,049 --> 00:19:29,059
<font color="#CCCCCC">well and</font><font color="#E5E5E5"> the finally</font><font color="#CCCCCC"> we</font><font color="#E5E5E5"> arrived at a</font>

492
00:19:26,570 --> 00:19:31,100
really<font color="#CCCCCC"> interesting area when the vendor</font>

493
00:19:29,059 --> 00:19:33,740
start implementing the<font color="#CCCCCC"> technology which</font>

494
00:19:31,100 --> 00:19:35,600
they call it update<font color="#E5E5E5"> or</font><font color="#CCCCCC"> Internet so</font>

495
00:19:33,740 --> 00:19:38,600
basically they try to<font color="#CCCCCC"> update the bias</font>

496
00:19:35,600 --> 00:19:41,080
<font color="#E5E5E5">from the</font><font color="#CCCCCC"> internet how does it</font><font color="#E5E5E5"> work in</font>

497
00:19:38,600 --> 00:19:43,850
the<font color="#E5E5E5"> most privileged level of the system</font>

498
00:19:41,080 --> 00:19:46,360
you are connecting<font color="#CCCCCC"> to the remote web</font>

499
00:19:43,850 --> 00:19:48,580
server you download the<font color="#CCCCCC"> binary you</font>

500
00:19:46,360 --> 00:19:50,620
abdominal binder in the system you

501
00:19:48,580 --> 00:19:52,779
unlock fully your system because you

502
00:19:50,620 --> 00:19:55,149
only can deliver the<font color="#E5E5E5"> bios of that is the</font>

503
00:19:52,779 --> 00:19:57,850
system fully unlocked<font color="#E5E5E5"> and then when you</font>

504
00:19:55,149 --> 00:20:00,668
when you unlock entire system you<font color="#CCCCCC"> run</font>

505
00:19:57,850 --> 00:20:02,439
this update<font color="#E5E5E5"> so imagine this in the most</font>

506
00:20:00,669 --> 00:20:04,419
privileged level in the<font color="#E5E5E5"> system you</font>

507
00:20:02,440 --> 00:20:06,100
connected to<font color="#CCCCCC"> the web</font><font color="#E5E5E5"> server downloading</font>

508
00:20:04,419 --> 00:20:08,590
some binaries<font color="#E5E5E5"> and running the binaries</font>

509
00:20:06,100 --> 00:20:10,779
and that's that's<font color="#E5E5E5"> pretty interesting and</font>

510
00:20:08,590 --> 00:20:13,750
what could go wrong with<font color="#E5E5E5"> this with this</font>

511
00:20:10,779 --> 00:20:15,789
technology<font color="#E5E5E5"> Jesse will continue and</font><font color="#CCCCCC"> we'll</font>

512
00:20:13,750 --> 00:20:19,269
show<font color="#E5E5E5"> you a couple of interesting</font><font color="#CCCCCC"> things</font>

513
00:20:15,789 --> 00:20:22,029
<font color="#E5E5E5">here thanks Alex</font>

514
00:20:19,269 --> 00:20:23,649
so as Alex mentioned the system is fully

515
00:20:22,029 --> 00:20:27,760
unlocked at this point there's no spy

516
00:20:23,649 --> 00:20:29,080
<font color="#E5E5E5">right</font><font color="#CCCCCC"> protection</font><font color="#E5E5E5"> because as part of the</font>

517
00:20:27,760 --> 00:20:31,179
update<font color="#CCCCCC"> process it needs to be able to</font>

518
00:20:29,080 --> 00:20:32,799
<font color="#E5E5E5">write that</font><font color="#CCCCCC"> firmer image back to to the</font>

519
00:20:31,179 --> 00:20:36,549
<font color="#E5E5E5">spy and none of those locks have been</font>

520
00:20:32,799 --> 00:20:38,590
<font color="#CCCCCC">set in the</font><font color="#E5E5E5"> system yet and here's here's</font>

521
00:20:36,549 --> 00:20:42,240
<font color="#E5E5E5">an example of this one of</font><font color="#CCCCCC"> these</font>

522
00:20:38,590 --> 00:20:44,889
functionality is in and<font color="#CCCCCC"> asrock bios</font>

523
00:20:42,240 --> 00:20:46,720
<font color="#CCCCCC">here's one and a soos it's essentially</font>

524
00:20:44,889 --> 00:20:48,580
<font color="#E5E5E5">the same thing</font><font color="#CCCCCC"> they just completely</font>

525
00:20:46,720 --> 00:20:50,769
<font color="#CCCCCC">rewrote</font><font color="#E5E5E5"> their own implementation because</font>

526
00:20:48,580 --> 00:20:52,809
there there's there's a reference

527
00:20:50,769 --> 00:20:55,539
<font color="#CCCCCC">implementation for</font><font color="#E5E5E5"> UEFI</font><font color="#CCCCCC"> bios called</font>

528
00:20:52,809 --> 00:20:57,549
<font color="#CCCCCC">tiana corer</font><font color="#E5E5E5"> that they basically create a</font>

529
00:20:55,539 --> 00:21:00,940
complete implementation<font color="#E5E5E5"> of the</font>

530
00:20:57,549 --> 00:21:02,019
specification as it stands<font color="#E5E5E5"> but vendors</font>

531
00:21:00,940 --> 00:21:05,169
basically want<font color="#E5E5E5"> to create their</font><font color="#CCCCCC"> own</font>

532
00:21:02,019 --> 00:21:06,429
functionality<font color="#E5E5E5"> on</font><font color="#CCCCCC"> top of it</font><font color="#E5E5E5"> so all of</font>

533
00:21:05,169 --> 00:21:07,929
these update<font color="#E5E5E5"> over the internet</font><font color="#CCCCCC"> all the</font>

534
00:21:06,429 --> 00:21:11,679
<font color="#E5E5E5">features that Alex was just showing you</font>

535
00:21:07,929 --> 00:21:14,470
<font color="#CCCCCC">are all created by vendors and don't</font>

536
00:21:11,679 --> 00:21:17,740
have<font color="#E5E5E5"> that same level</font><font color="#CCCCCC"> of review</font><font color="#E5E5E5"> that</font><font color="#CCCCCC"> the</font>

537
00:21:14,470 --> 00:21:19,090
reference implementation has HP has

538
00:21:17,740 --> 00:21:20,559
their own functionality<font color="#E5E5E5"> to do the same</font>

539
00:21:19,090 --> 00:21:22,360
thing this could be scheduled where

540
00:21:20,559 --> 00:21:25,510
every reboot it'll go out<font color="#CCCCCC"> and</font>

541
00:21:22,360 --> 00:21:27,879
<font color="#E5E5E5">automatically check</font><font color="#CCCCCC"> you can set your</font>

542
00:21:25,510 --> 00:21:31,299
<font color="#CCCCCC">bios</font><font color="#E5E5E5"> or so it doesn't go directly to HP</font>

543
00:21:27,880 --> 00:21:33,399
<font color="#E5E5E5">calm you can have a custom URL that it</font>

544
00:21:31,299 --> 00:21:38,799
will go out<font color="#E5E5E5"> and grab its configuration</font>

545
00:21:33,399 --> 00:21:40,239
file and<font color="#E5E5E5"> bios images from and we did as</font>

546
00:21:38,799 --> 00:21:41,980
part<font color="#CCCCCC"> of</font><font color="#E5E5E5"> our analysis we discovered that</font>

547
00:21:40,240 --> 00:21:44,200
both as<font color="#CCCCCC"> rock and hey-zeus are both</font>

548
00:21:41,980 --> 00:21:46,990
vulnerable<font color="#E5E5E5"> to just basic stack overflows</font>

549
00:21:44,200 --> 00:21:48,760
as part<font color="#E5E5E5"> of this</font><font color="#CCCCCC"> update mechanism they</font>

550
00:21:46,990 --> 00:21:50,529
both use just plain HTTP when they're

551
00:21:48,760 --> 00:21:53,370
<font color="#E5E5E5">going out to</font><font color="#CCCCCC"> the internet</font><font color="#E5E5E5"> there's no</font>

552
00:21:50,529 --> 00:21:55,570
encryption<font color="#CCCCCC"> no</font><font color="#E5E5E5"> certificate checking it's</font>

553
00:21:53,370 --> 00:21:57,340
<font color="#E5E5E5">easily exploitable by</font><font color="#CCCCCC"> man-in-the-middle</font>

554
00:21:55,570 --> 00:22:00,010
<font color="#E5E5E5">or poisoning</font>

555
00:21:57,340 --> 00:22:03,659
doing DNS poisoning<font color="#CCCCCC"> route poisoning</font>

556
00:22:00,010 --> 00:22:06,930
other mechanisms to interfere with<font color="#E5E5E5"> that</font>

557
00:22:03,660 --> 00:22:09,580
<font color="#E5E5E5">communication with the remote server</font><font color="#CCCCCC"> so</font>

558
00:22:06,930 --> 00:22:12,480
<font color="#CCCCCC">here's what asrock did once we reported</font>

559
00:22:09,580 --> 00:22:15,639
<font color="#CCCCCC">their disability to them</font><font color="#E5E5E5"> they basically</font>

560
00:22:12,480 --> 00:22:17,230
<font color="#CCCCCC">realize that essentially all of</font><font color="#E5E5E5"> their</font>

561
00:22:15,640 --> 00:22:19,360
<font color="#E5E5E5">models from</font><font color="#CCCCCC"> Haswell onward were</font>

562
00:22:17,230 --> 00:22:22,320
vulnerable<font color="#E5E5E5"> to this which was around 300</font>

563
00:22:19,360 --> 00:22:26,260
<font color="#CCCCCC">different motherboard models and they</font>

564
00:22:22,320 --> 00:22:28,270
basically<font color="#E5E5E5"> created new updates to disable</font>

565
00:22:26,260 --> 00:22:30,250
<font color="#E5E5E5">this functionality</font><font color="#CCCCCC"> they didn't remove it</font>

566
00:22:28,270 --> 00:22:34,240
they just<font color="#E5E5E5"> disabled the the ability</font><font color="#CCCCCC"> to</font>

567
00:22:30,250 --> 00:22:37,480
<font color="#E5E5E5">actually trigger this when we told as a</font>

568
00:22:34,240 --> 00:22:39,190
<font color="#CCCCCC">sous they basically just didn't really</font>

569
00:22:37,480 --> 00:22:41,050
<font color="#E5E5E5">understand why it was a problem</font><font color="#CCCCCC"> and why</font>

570
00:22:39,190 --> 00:22:44,290
they should<font color="#E5E5E5"> fix it so</font><font color="#CCCCCC"> Asus did not</font>

571
00:22:41,050 --> 00:22:46,600
actually<font color="#E5E5E5"> fix this problem</font><font color="#CCCCCC"> and as you can</font>

572
00:22:44,290 --> 00:22:48,700
<font color="#E5E5E5">see</font><font color="#CCCCCC"> it's a they say it's only an</font><font color="#E5E5E5"> issue</font>

573
00:22:46,600 --> 00:22:52,330
before the OS load so it's not<font color="#E5E5E5"> a problem</font>

574
00:22:48,700 --> 00:22:54,400
<font color="#CCCCCC">and we went back and</font><font color="#E5E5E5"> forth</font><font color="#CCCCCC"> with them a</font>

575
00:22:52,330 --> 00:22:55,899
little<font color="#CCCCCC"> bit and</font><font color="#E5E5E5"> tried to</font><font color="#CCCCCC"> explain and you</font>

576
00:22:54,400 --> 00:22:57,820
<font color="#E5E5E5">know this really is a problem</font><font color="#CCCCCC"> you guys</font>

577
00:22:55,900 --> 00:23:01,750
should<font color="#E5E5E5"> fix this but they they didn't</font>

578
00:22:57,820 --> 00:23:04,060
understand<font color="#E5E5E5"> so here's an</font><font color="#CCCCCC"> example of</font><font color="#E5E5E5"> what</font>

579
00:23:01,750 --> 00:23:05,290
the<font color="#CCCCCC"> asrock update mechanism request</font>

580
00:23:04,060 --> 00:23:10,480
looks<font color="#CCCCCC"> like as you can see it's just</font>

581
00:23:05,290 --> 00:23:12,639
<font color="#E5E5E5">plain HTTP web</font><font color="#CCCCCC"> request to Ezra comm it</font>

582
00:23:10,480 --> 00:23:15,880
doesn't it's a just an<font color="#E5E5E5"> ASP page that</font>

583
00:23:12,640 --> 00:23:19,090
includes<font color="#CCCCCC"> the the model of the particular</font>

584
00:23:15,880 --> 00:23:20,560
<font color="#CCCCCC">motherboard so if you do do a</font>

585
00:23:19,090 --> 00:23:22,389
<font color="#E5E5E5">man-in-the-middle and get the</font>

586
00:23:20,560 --> 00:23:24,510
motherboard you can deliver a specific

587
00:23:22,390 --> 00:23:28,120
<font color="#E5E5E5">targeted exploit for that particular</font>

588
00:23:24,510 --> 00:23:29,980
motherboard<font color="#E5E5E5"> here's what the response</font>

589
00:23:28,120 --> 00:23:33,250
<font color="#E5E5E5">looks like it's</font><font color="#CCCCCC"> basically just</font><font color="#E5E5E5"> an XML</font>

590
00:23:29,980 --> 00:23:34,960
document<font color="#CCCCCC"> with some URLs and description</font>

591
00:23:33,250 --> 00:23:40,570
of<font color="#E5E5E5"> what different biases are available</font>

592
00:23:34,960 --> 00:23:44,080
description of the<font color="#E5E5E5"> BIOS version date</font><font color="#CCCCCC"> so</font>

593
00:23:40,570 --> 00:23:45,370
if you replace so<font color="#E5E5E5"> those fields it</font>

594
00:23:44,080 --> 00:23:47,860
<font color="#E5E5E5">basically shows up like this in the</font>

595
00:23:45,370 --> 00:23:50,469
interface<font color="#E5E5E5"> and we discovered that if you</font>

596
00:23:47,860 --> 00:23:53,979
just have a really<font color="#E5E5E5"> long string in some</font>

597
00:23:50,470 --> 00:23:58,120
of these URL fields<font color="#CCCCCC"> there's there's a</font>

598
00:23:53,980 --> 00:23:58,660
buffer overflow<font color="#E5E5E5"> here's what the ACS</font>

599
00:23:58,120 --> 00:24:00,820
respond

600
00:23:58,660 --> 00:24:03,990
looks like it's basically<font color="#CCCCCC"> a</font><font color="#E5E5E5"> very</font><font color="#CCCCCC"> similar</font>

601
00:24:00,820 --> 00:24:06,908
process where it's also<font color="#E5E5E5"> plain HTTP and</font>

602
00:24:03,990 --> 00:24:08,799
instead<font color="#CCCCCC"> of having</font><font color="#E5E5E5"> like</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> specific</font>

603
00:24:06,909 --> 00:24:11,200
page where they passed the model as a

604
00:24:08,799 --> 00:24:12,879
parameter<font color="#CCCCCC"> they have a path to a</font>

605
00:24:11,200 --> 00:24:14,979
particular<font color="#E5E5E5"> index file to get that's</font>

606
00:24:12,879 --> 00:24:18,369
based on<font color="#E5E5E5"> the model instead instead so</font>

607
00:24:14,979 --> 00:24:21,820
it's a very similar<font color="#E5E5E5"> mechanism it's not</font>

608
00:24:18,369 --> 00:24:24,399
quite XML<font color="#E5E5E5"> it's similar but a little</font><font color="#CCCCCC"> bit</font>

609
00:24:21,820 --> 00:24:28,200
different<font color="#CCCCCC"> and they have overflows here</font>

610
00:24:24,399 --> 00:24:31,928
also<font color="#E5E5E5"> where you basically if</font><font color="#CCCCCC"> you</font>

611
00:24:28,200 --> 00:24:34,840
man-in-the-middle<font color="#CCCCCC"> this and modify those</font>

612
00:24:31,929 --> 00:24:39,309
fields<font color="#CCCCCC"> when</font><font color="#E5E5E5"> you do the update it just</font>

613
00:24:34,840 --> 00:24:40,689
hangs and that's pretty suspicious<font color="#CCCCCC"> so in</font>

614
00:24:39,309 --> 00:24:42,940
order to<font color="#E5E5E5"> figure out what actually is</font>

615
00:24:40,690 --> 00:24:43,989
<font color="#CCCCCC">happening underneath</font><font color="#E5E5E5"> the hood you you're</font>

616
00:24:42,940 --> 00:24:46,599
<font color="#CCCCCC">gonna need a hardware debug interface</font>

617
00:24:43,989 --> 00:24:48,609
like one of<font color="#E5E5E5"> these so the the old</font>

618
00:24:46,599 --> 00:24:52,418
hardware debug interface is<font color="#E5E5E5"> the</font><font color="#CCCCCC"> X DP</font>

619
00:24:48,609 --> 00:24:53,978
which costs around<font color="#CCCCCC"> $3,000 from Intel</font><font color="#E5E5E5"> you</font>

620
00:24:52,419 --> 00:24:56,229
could only get that<font color="#CCCCCC"> if you</font><font color="#E5E5E5"> have an NDA</font>

621
00:24:53,979 --> 00:24:58,840
with them and it also required you<font color="#CCCCCC"> to</font>

622
00:24:56,229 --> 00:25:01,989
open the open<font color="#E5E5E5"> the</font><font color="#CCCCCC"> case and there's a</font>

623
00:24:58,840 --> 00:25:04,418
physical header<font color="#E5E5E5"> that you'd plug it into</font>

624
00:25:01,989 --> 00:25:06,669
it's a<font color="#E5E5E5"> 60 pin header it basically has a</font>

625
00:25:04,419 --> 00:25:09,479
J tag on it and<font color="#E5E5E5"> a bunch of other signals</font>

626
00:25:06,669 --> 00:25:11,710
<font color="#E5E5E5">and you can even find this header on</font>

627
00:25:09,479 --> 00:25:14,019
production motherboards and sometimes

628
00:25:11,710 --> 00:25:17,529
it's even labeled like CPU<font color="#E5E5E5"> XD p or</font><font color="#CCCCCC"> p CH</font>

629
00:25:14,019 --> 00:25:19,320
<font color="#CCCCCC">XD p this is</font><font color="#E5E5E5"> basically like these</font>

630
00:25:17,529 --> 00:25:21,970
<font color="#E5E5E5">hardware debug interfaces are used to</font>

631
00:25:19,320 --> 00:25:24,639
<font color="#E5E5E5">even bring up the the chips when they</font>

632
00:25:21,970 --> 00:25:27,940
<font color="#E5E5E5">originally manufactured them as well as</font>

633
00:25:24,639 --> 00:25:30,399
once they're shipped<font color="#E5E5E5"> to</font><font color="#CCCCCC"> oMG OEMs will</font>

634
00:25:27,940 --> 00:25:32,139
use this to develop<font color="#E5E5E5"> system firmware like</font>

635
00:25:30,399 --> 00:25:34,389
<font color="#E5E5E5">BIOS and get their code to</font><font color="#CCCCCC"> work in the</font>

636
00:25:32,139 --> 00:25:37,059
first<font color="#E5E5E5"> place</font><font color="#CCCCCC"> and it's kind of a pain to</font>

637
00:25:34,389 --> 00:25:42,369
always have<font color="#E5E5E5"> to open the case</font><font color="#CCCCCC"> plug</font><font color="#E5E5E5"> in</font>

638
00:25:37,059 --> 00:25:44,320
this this connector to this this header

639
00:25:42,369 --> 00:25:45,728
on the motherboard<font color="#CCCCCC"> and</font><font color="#E5E5E5"> a lot of times</font>

640
00:25:44,320 --> 00:25:47,799
once they actually<font color="#CCCCCC"> move to</font><font color="#E5E5E5"> production</font>

641
00:25:45,729 --> 00:25:49,629
<font color="#E5E5E5">they want to remove the header not have</font>

642
00:25:47,799 --> 00:25:52,149
that functionality<font color="#E5E5E5"> there so they've</font>

643
00:25:49,629 --> 00:25:53,590
moved this newer technology that the the

644
00:25:52,149 --> 00:25:55,238
<font color="#E5E5E5">kind</font><font color="#CCCCCC"> of stopgap in the middle was this</font>

645
00:25:53,590 --> 00:25:57,759
<font color="#E5E5E5">close chassis adapter in the center</font>

646
00:25:55,239 --> 00:26:00,549
where they basically<font color="#E5E5E5"> have the capability</font>

647
00:25:57,759 --> 00:26:03,820
to<font color="#E5E5E5"> debug</font><font color="#CCCCCC"> Hardware debug</font><font color="#E5E5E5"> over a USB port</font>

648
00:26:00,549 --> 00:26:06,009
<font color="#CCCCCC">so they don't need to open the case they</font>

649
00:26:03,820 --> 00:26:08,439
can<font color="#CCCCCC"> just plug in</font><font color="#E5E5E5"> from USB and use this</font>

650
00:26:06,009 --> 00:26:11,559
<font color="#E5E5E5">close chassis adapter to send those</font>

651
00:26:08,440 --> 00:26:13,929
special debug signals over<font color="#E5E5E5"> USB</font><font color="#CCCCCC"> which is</font>

652
00:26:11,559 --> 00:26:17,259
pretty cool these ones you can<font color="#E5E5E5"> buy for</font>

653
00:26:13,929 --> 00:26:19,200
about<font color="#E5E5E5"> 300 bucks 390 from Intel but in</font>

654
00:26:17,259 --> 00:26:23,220
this<font color="#E5E5E5"> case also you need a</font>

655
00:26:19,200 --> 00:26:25,409
<font color="#E5E5E5">and</font><font color="#CCCCCC"> da with Intel the the center one is</font>

656
00:26:23,220 --> 00:26:28,320
is really only needed<font color="#E5E5E5"> if you're using an</font>

657
00:26:25,409 --> 00:26:31,500
old platform<font color="#CCCCCC"> to dig to debug a new</font>

658
00:26:28,320 --> 00:26:34,918
target<font color="#CCCCCC"> that supports this new debug</font>

659
00:26:31,500 --> 00:26:37,049
capability and debug over<font color="#CCCCCC"> USB</font><font color="#E5E5E5"> if you're</font>

660
00:26:34,919 --> 00:26:40,169
using a system<font color="#E5E5E5"> that's skylake or newer</font>

661
00:26:37,049 --> 00:26:42,330
for both your debug<font color="#CCCCCC"> host and your debug</font>

662
00:26:40,169 --> 00:26:44,519
target<font color="#E5E5E5"> you can just use this cable on</font>

663
00:26:42,330 --> 00:26:49,590
<font color="#E5E5E5">the far right which is it's essentially</font>

664
00:26:44,519 --> 00:26:51,360
a USB<font color="#CCCCCC"> 3 a 2</font><font color="#E5E5E5"> a</font><font color="#CCCCCC"> 2 a</font><font color="#E5E5E5"> cable that has the the</font>

665
00:26:49,590 --> 00:26:53,730
<font color="#E5E5E5">voltage line removed and you</font><font color="#CCCCCC"> can buy it</font>

666
00:26:51,360 --> 00:26:57,209
<font color="#CCCCCC">you</font><font color="#E5E5E5"> don't need</font><font color="#CCCCCC"> to buy it from Intel data</font>

667
00:26:53,730 --> 00:27:00,269
Pro has it for<font color="#CCCCCC"> $15 I</font><font color="#E5E5E5"> think and it's it's</font>

668
00:26:57,210 --> 00:27:03,269
<font color="#E5E5E5">pretty nice but once you have the the</font>

669
00:27:00,269 --> 00:27:05,399
hardware interface to talk to these

670
00:27:03,269 --> 00:27:07,139
debug interfaces you'll also need the

671
00:27:05,399 --> 00:27:09,479
Intel system debugger which is it's

672
00:27:07,139 --> 00:27:11,158
essentially like gdb except over

673
00:27:09,480 --> 00:27:12,779
<font color="#CCCCCC">hardware and you've got some kind of</font>

674
00:27:11,159 --> 00:27:14,220
similar functionality or they<font color="#CCCCCC"> could you</font>

675
00:27:12,779 --> 00:27:16,529
<font color="#E5E5E5">could halt all of the processors in the</font>

676
00:27:14,220 --> 00:27:20,159
system examine the internal state<font color="#E5E5E5"> of the</font>

677
00:27:16,529 --> 00:27:21,600
<font color="#E5E5E5">machine</font><font color="#CCCCCC"> read memory if if you build your</font>

678
00:27:20,159 --> 00:27:26,730
<font color="#E5E5E5">own BIOS you can even do source level</font>

679
00:27:21,600 --> 00:27:28,260
debugging through<font color="#E5E5E5"> this over hardware so</font>

680
00:27:26,730 --> 00:27:30,210
there's also something called<font color="#E5E5E5"> the the</font>

681
00:27:28,260 --> 00:27:33,720
Intel debug abstraction layer<font color="#E5E5E5"> which</font>

682
00:27:30,210 --> 00:27:36,779
essentially there's a you can<font color="#E5E5E5"> write</font>

683
00:27:33,720 --> 00:27:40,279
scripts in Python<font color="#E5E5E5"> to do debugging</font><font color="#CCCCCC"> this</font>

684
00:27:36,779 --> 00:27:43,080
is an example<font color="#E5E5E5"> of using functionality in</font>

685
00:27:40,279 --> 00:27:45,630
<font color="#E5E5E5">these debug interfaces to break on</font><font color="#CCCCCC"> SMM</font>

686
00:27:43,080 --> 00:27:47,879
entry so if you want<font color="#E5E5E5"> to debug a system</font>

687
00:27:45,630 --> 00:27:49,830
management interrupt<font color="#CCCCCC"> this</font><font color="#E5E5E5"> is the only</font>

688
00:27:47,880 --> 00:27:52,440
way that<font color="#CCCCCC"> you'll be able</font><font color="#E5E5E5"> to do that you</font>

689
00:27:49,830 --> 00:27:53,970
can also break on a<font color="#E5E5E5"> VM exit so if you're</font>

690
00:27:52,440 --> 00:27:55,679
<font color="#E5E5E5">debugging a hypervisor you'll want to</font>

691
00:27:53,970 --> 00:27:58,620
use a hardware debug interface like this

692
00:27:55,679 --> 00:28:03,779
<font color="#CCCCCC">it makes</font><font color="#E5E5E5"> it much much</font><font color="#CCCCCC"> easier</font><font color="#E5E5E5"> to</font><font color="#CCCCCC"> figure</font>

693
00:27:58,620 --> 00:28:07,049
<font color="#E5E5E5">out what's going on so for actually once</font>

694
00:28:03,779 --> 00:28:10,169
we discovered that<font color="#E5E5E5"> feeding some data to</font>

695
00:28:07,049 --> 00:28:11,399
our<font color="#E5E5E5"> system will cause it to hang in</font>

696
00:28:10,169 --> 00:28:12,750
order to<font color="#CCCCCC"> figure</font><font color="#E5E5E5"> out what happened what's</font>

697
00:28:11,399 --> 00:28:15,268
actually happening the first<font color="#CCCCCC"> step we'll</font>

698
00:28:12,750 --> 00:28:17,399
we'll do is basically<font color="#CCCCCC"> just set a</font>

699
00:28:15,269 --> 00:28:19,860
breakpoint on the the general<font color="#E5E5E5"> protection</font>

700
00:28:17,399 --> 00:28:21,449
fault handler in order<font color="#E5E5E5"> to do that we can</font>

701
00:28:19,860 --> 00:28:23,309
<font color="#E5E5E5">use this</font><font color="#CCCCCC"> Hardware debug interface to</font>

702
00:28:21,450 --> 00:28:24,809
view some of<font color="#E5E5E5"> the different CPU</font>

703
00:28:23,309 --> 00:28:26,730
structures you can<font color="#E5E5E5"> look at like model</font>

704
00:28:24,809 --> 00:28:28,470
specific registers and all all<font color="#E5E5E5"> that but</font>

705
00:28:26,730 --> 00:28:30,929
<font color="#E5E5E5">for our case we</font><font color="#CCCCCC"> just</font><font color="#E5E5E5"> want to look at the</font>

706
00:28:28,470 --> 00:28:32,550
<font color="#E5E5E5">the IDT and we can see our general</font>

707
00:28:30,929 --> 00:28:35,490
<font color="#E5E5E5">protection fault those</font>

708
00:28:32,550 --> 00:28:38,070
those registers and then we can use the

709
00:28:35,490 --> 00:28:39,570
same tool to<font color="#CCCCCC"> basically add a breakpoint</font>

710
00:28:38,070 --> 00:28:42,840
<font color="#CCCCCC">and we can have it have a hardware</font>

711
00:28:39,570 --> 00:28:44,820
breakpoint that accesses on instead<font color="#CCCCCC"> of</font>

712
00:28:42,840 --> 00:28:46,080
<font color="#E5E5E5">just once code</font><font color="#CCCCCC"> executes here we</font><font color="#E5E5E5"> could</font>

713
00:28:44,820 --> 00:28:48,659
actually have a hardware breakpoints on

714
00:28:46,080 --> 00:28:52,470
read and writes to specific addresses or

715
00:28:48,660 --> 00:28:54,120
read and writes to i/o ports<font color="#CCCCCC"> there's</font>

716
00:28:52,470 --> 00:28:57,870
also the<font color="#E5E5E5"> ability to add breakpoints on</font>

717
00:28:54,120 --> 00:29:00,689
specific system events like<font color="#CCCCCC"> SMA and the</font>

718
00:28:57,870 --> 00:29:02,520
entry<font color="#E5E5E5"> vm exit like I</font><font color="#CCCCCC"> just</font><font color="#E5E5E5"> mentioned but</font>

719
00:29:00,690 --> 00:29:04,790
for<font color="#E5E5E5"> this case we'll set a breakpoint on</font>

720
00:29:02,520 --> 00:29:07,440
the general protection fault handler<font color="#E5E5E5"> and</font>

721
00:29:04,790 --> 00:29:09,540
when we pass<font color="#E5E5E5"> our code to</font><font color="#CCCCCC"> it</font><font color="#E5E5E5"> we get a</font>

722
00:29:07,440 --> 00:29:12,540
fault<font color="#E5E5E5"> and our breakpoint is triggered</font>

723
00:29:09,540 --> 00:29:14,010
and<font color="#CCCCCC"> you can see that</font><font color="#E5E5E5"> there's a</font><font color="#CCCCCC"> sum</font><font color="#E5E5E5"> 41's</font>

724
00:29:12,540 --> 00:29:16,710
and some registers over at the right<font color="#CCCCCC"> so</font>

725
00:29:14,010 --> 00:29:19,350
that's<font color="#E5E5E5"> a that's a good sign and in order</font>

726
00:29:16,710 --> 00:29:22,080
to figure<font color="#E5E5E5"> out where exactly we crashed</font>

727
00:29:19,350 --> 00:29:23,909
<font color="#E5E5E5">will basically look at the stack pointer</font>

728
00:29:22,080 --> 00:29:26,699
to find the exception record that's<font color="#E5E5E5"> been</font>

729
00:29:23,910 --> 00:29:30,120
put put on the stack and find like the

730
00:29:26,700 --> 00:29:32,400
the very top<font color="#E5E5E5"> D word or quad word is</font>

731
00:29:30,120 --> 00:29:35,520
going<font color="#E5E5E5"> to</font><font color="#CCCCCC"> be a status value and then that</font>

732
00:29:32,400 --> 00:29:37,440
next<font color="#E5E5E5"> the the</font><font color="#CCCCCC"> next pointer is our actual</font>

733
00:29:35,520 --> 00:29:40,730
crashing stack address so we can look<font color="#E5E5E5"> at</font>

734
00:29:37,440 --> 00:29:43,260
that and figure out where we crashed and

735
00:29:40,730 --> 00:29:44,940
basically<font color="#CCCCCC"> be able to load that into iota</font>

736
00:29:43,260 --> 00:29:48,720
or<font color="#E5E5E5"> some other tool and take a closer</font>

737
00:29:44,940 --> 00:29:52,980
look<font color="#E5E5E5"> at that particular code so because</font>

738
00:29:48,720 --> 00:29:55,170
our our exploit is a<font color="#E5E5E5"> web page it's</font>

739
00:29:52,980 --> 00:29:57,510
there's some constraints about what kind

740
00:29:55,170 --> 00:30:00,630
of characters we have one thing<font color="#E5E5E5"> is the</font>

741
00:29:57,510 --> 00:30:02,700
the<font color="#E5E5E5"> architecture is it is</font><font color="#CCCCCC"> 64-bit so we</font>

742
00:30:00,630 --> 00:30:04,320
need to provide a 64-bit exploit we

743
00:30:02,700 --> 00:30:06,120
can't have null characters we can't have

744
00:30:04,320 --> 00:30:09,840
like greater than or less than<font color="#E5E5E5"> otherwise</font>

745
00:30:06,120 --> 00:30:11,969
we'll break the<font color="#CCCCCC"> the page and</font><font color="#E5E5E5"> also we</font>

746
00:30:09,840 --> 00:30:16,560
have a really<font color="#E5E5E5"> strict size limit if we</font>

747
00:30:11,970 --> 00:30:18,900
have one byte<font color="#CCCCCC"> two</font><font color="#E5E5E5"> more</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> two large</font><font color="#CCCCCC"> past</font>

748
00:30:16,560 --> 00:30:20,820
the return address<font color="#E5E5E5"> we actually will</font>

749
00:30:18,900 --> 00:30:23,400
cause it to crash<font color="#E5E5E5"> before we even get to</font>

750
00:30:20,820 --> 00:30:25,679
returning<font color="#E5E5E5"> like jumping back</font><font color="#CCCCCC"> to our</font>

751
00:30:23,400 --> 00:30:27,510
<font color="#E5E5E5">overflow return address so we have some</font>

752
00:30:25,680 --> 00:30:29,760
constraints<font color="#CCCCCC"> that</font><font color="#E5E5E5"> we're playing with but</font>

753
00:30:27,510 --> 00:30:31,350
in order<font color="#E5E5E5"> to verify that we</font><font color="#CCCCCC"> actually have</font>

754
00:30:29,760 --> 00:30:33,960
code execution in the<font color="#E5E5E5"> first place well</font>

755
00:30:31,350 --> 00:30:36,000
<font color="#E5E5E5">just do a simple payload that's just an</font>

756
00:30:33,960 --> 00:30:37,200
<font color="#E5E5E5">ops</font><font color="#CCCCCC"> LED</font><font color="#E5E5E5"> infinite loop and then our</font>

757
00:30:36,000 --> 00:30:41,880
return address we're going to jump to

758
00:30:37,200 --> 00:30:45,030
<font color="#E5E5E5">and that works we basically verified</font>

759
00:30:41,880 --> 00:30:46,169
that yes we can<font color="#E5E5E5"> land in our you know or</font>

760
00:30:45,030 --> 00:30:47,820
not<font color="#CCCCCC"> sled and we</font>

761
00:30:46,169 --> 00:30:49,980
are actually<font color="#E5E5E5"> really executing</font>

762
00:30:47,820 --> 00:30:51,749
instructions on the stack<font color="#CCCCCC"> so we have an</font>

763
00:30:49,980 --> 00:30:53,879
executable stack which is<font color="#E5E5E5"> which</font><font color="#CCCCCC"> is</font>

764
00:30:51,749 --> 00:30:57,809
<font color="#E5E5E5">pretty cool and we could jump to</font><font color="#CCCCCC"> our</font>

765
00:30:53,879 --> 00:30:59,279
payload<font color="#E5E5E5"> so we control the return address</font>

766
00:30:57,809 --> 00:31:03,509
but<font color="#CCCCCC"> we have a really limited amount of</font>

767
00:30:59,279 --> 00:31:05,159
room and in in this exploit<font color="#E5E5E5"> so one thing</font>

768
00:31:03,509 --> 00:31:07,730
<font color="#E5E5E5">we want to take think about is like what</font>

769
00:31:05,159 --> 00:31:09,269
kind of protections exist in the UEFI

770
00:31:07,730 --> 00:31:11,879
environment when we're exploiting

771
00:31:09,269 --> 00:31:12,989
<font color="#CCCCCC">something in UEFI and</font><font color="#E5E5E5"> there's some</font>

772
00:31:11,879 --> 00:31:14,699
actually some<font color="#E5E5E5"> pretty nice</font><font color="#CCCCCC"> things about</font>

773
00:31:12,989 --> 00:31:17,639
this<font color="#E5E5E5"> from an attacker point of view</font>

774
00:31:14,700 --> 00:31:19,590
<font color="#E5E5E5">defense not so good</font><font color="#CCCCCC"> you're essentially</font>

775
00:31:17,639 --> 00:31:21,330
<font color="#E5E5E5">running as ring</font><font color="#CCCCCC"> zero</font><font color="#E5E5E5"> there's no address</font>

776
00:31:19,590 --> 00:31:23,639
randomization

777
00:31:21,330 --> 00:31:25,470
there's no stack Canaries<font color="#CCCCCC"> there's an</font>

778
00:31:23,639 --> 00:31:27,959
executable stack there's no memory

779
00:31:25,470 --> 00:31:29,999
protection at all so Alex<font color="#CCCCCC"> mentioned a</font>

780
00:31:27,960 --> 00:31:31,799
number of Dixie drivers and when the

781
00:31:29,999 --> 00:31:34,169
<font color="#E5E5E5">system is booting up you could have like</font>

782
00:31:31,799 --> 00:31:36,450
500<font color="#CCCCCC"> different Dixie executables</font><font color="#E5E5E5"> and</font>

783
00:31:34,169 --> 00:31:38,580
these these<font color="#CCCCCC"> are</font><font color="#E5E5E5"> loaded into the address</font>

784
00:31:36,450 --> 00:31:42,869
<font color="#E5E5E5">space but there's no memory protection</font>

785
00:31:38,580 --> 00:31:45,090
between<font color="#E5E5E5"> them so one thing we were</font>

786
00:31:42,869 --> 00:31:46,889
<font color="#CCCCCC">thinking about</font><font color="#E5E5E5"> is we have a limited</font>

787
00:31:45,090 --> 00:31:51,600
amount<font color="#E5E5E5"> of space</font><font color="#CCCCCC"> in</font><font color="#E5E5E5"> our specific overflow</font>

788
00:31:46,889 --> 00:31:52,949
but what happens if we have the rest of

789
00:31:51,600 --> 00:31:54,389
<font color="#E5E5E5">the document can we just add</font><font color="#CCCCCC"> our payload</font>

790
00:31:52,950 --> 00:31:57,090
somewhere else in the document<font color="#E5E5E5"> and have</font>

791
00:31:54,389 --> 00:31:59,309
it show<font color="#CCCCCC"> up so it turns out</font><font color="#E5E5E5"> that if you</font>

792
00:31:57,090 --> 00:32:01,830
start<font color="#E5E5E5"> looking at</font><font color="#CCCCCC"> each of the</font><font color="#E5E5E5"> different</font>

793
00:31:59,309 --> 00:32:05,428
registers<font color="#E5E5E5"> showing memory seeing what's</font>

794
00:32:01,830 --> 00:32:08,249
around<font color="#E5E5E5"> them near near the</font><font color="#CCCCCC"> ar-10 register</font>

795
00:32:05,429 --> 00:32:10,379
we find a complete copy<font color="#CCCCCC"> of the of the</font>

796
00:32:08,249 --> 00:32:12,899
the<font color="#CCCCCC"> payload that</font><font color="#E5E5E5"> whatever that document</font>

797
00:32:10,379 --> 00:32:14,850
<font color="#E5E5E5">that we returned is is also</font><font color="#CCCCCC"> in memory</font>

798
00:32:12,899 --> 00:32:18,080
near one of<font color="#E5E5E5"> the registers which makes</font>

799
00:32:14,850 --> 00:32:20,189
<font color="#E5E5E5">things a little bit</font><font color="#CCCCCC"> easier for us</font><font color="#E5E5E5"> and so</font>

800
00:32:18,080 --> 00:32:22,799
essentially we end up having our

801
00:32:20,190 --> 00:32:25,769
specific pay our little payload with

802
00:32:22,799 --> 00:32:28,080
this specific overflow<font color="#E5E5E5"> just has a little</font>

803
00:32:25,769 --> 00:32:30,539
<font color="#E5E5E5">egg</font><font color="#CCCCCC"> hunter bit of shellcode to go find</font>

804
00:32:28,080 --> 00:32:32,340
our other payload by starting at our<font color="#CCCCCC"> 10</font>

805
00:32:30,539 --> 00:32:34,889
decrementing backwards looking for a

806
00:32:32,340 --> 00:32:36,418
specific<font color="#CCCCCC"> tag it's a pretty traditional</font>

807
00:32:34,889 --> 00:32:38,758
<font color="#E5E5E5">approach</font><font color="#CCCCCC"> to go find the</font><font color="#E5E5E5"> rest of your</font>

808
00:32:36,419 --> 00:32:40,169
code and if we<font color="#E5E5E5"> just append the rest of</font>

809
00:32:38,759 --> 00:32:42,869
our<font color="#E5E5E5"> payload to the end of the XML</font>

810
00:32:40,169 --> 00:32:44,789
document<font color="#CCCCCC"> we</font><font color="#E5E5E5"> can find that on</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> heap</font><font color="#CCCCCC"> so</font>

811
00:32:42,869 --> 00:32:46,529
we have part of<font color="#E5E5E5"> our code running in the</font>

812
00:32:44,789 --> 00:32:50,759
stack part<font color="#E5E5E5"> of our code running in the</font>

813
00:32:46,529 --> 00:32:52,859
heap and we can<font color="#E5E5E5"> basically have</font><font color="#CCCCCC"> our</font>

814
00:32:50,759 --> 00:32:54,090
little<font color="#E5E5E5"> egg hunter in order to debug it</font>

815
00:32:52,859 --> 00:32:55,859
we still<font color="#E5E5E5"> have our infinite loop there</font>

816
00:32:54,090 --> 00:32:57,809
and you can<font color="#E5E5E5"> use this functionality to</font>

817
00:32:55,859 --> 00:32:58,179
<font color="#E5E5E5">basically skip over the</font><font color="#CCCCCC"> infinite</font><font color="#E5E5E5"> loop</font>

818
00:32:57,809 --> 00:33:01,840
<font color="#E5E5E5">use</font>

819
00:32:58,180 --> 00:33:02,740
move<font color="#E5E5E5"> PC</font><font color="#CCCCCC"> to line</font><font color="#E5E5E5"> and then</font><font color="#CCCCCC"> because we</font>

820
00:33:01,840 --> 00:33:05,230
don't want to<font color="#E5E5E5"> step through the entire</font>

821
00:33:02,740 --> 00:33:06,550
<font color="#E5E5E5">search we can</font><font color="#CCCCCC"> just use the run to line</font>

822
00:33:05,230 --> 00:33:10,030
functionality like these are all really

823
00:33:06,550 --> 00:33:11,500
common operations that<font color="#CCCCCC"> you use when</font>

824
00:33:10,030 --> 00:33:14,860
you're<font color="#E5E5E5"> debugging this kind of payload</font>

825
00:33:11,500 --> 00:33:18,820
<font color="#E5E5E5">and we</font><font color="#CCCCCC"> could</font><font color="#E5E5E5"> basically find our payload</font>

826
00:33:14,860 --> 00:33:21,399
<font color="#E5E5E5">and jump to it so now we have a lot more</font>

827
00:33:18,820 --> 00:33:25,270
<font color="#E5E5E5">room but what can we actually do at this</font>

828
00:33:21,400 --> 00:33:26,770
point<font color="#E5E5E5"> because like traditional shell</font>

829
00:33:25,270 --> 00:33:27,970
code<font color="#E5E5E5"> work won't work because there's no</font>

830
00:33:26,770 --> 00:33:30,610
<font color="#E5E5E5">operating system</font><font color="#CCCCCC"> running there's no</font>

831
00:33:27,970 --> 00:33:33,310
<font color="#CCCCCC">Lipsy</font><font color="#E5E5E5"> there's no kernel none of this</font>

832
00:33:30,610 --> 00:33:36,070
exists yet but<font color="#E5E5E5"> there there is actually a</font>

833
00:33:33,310 --> 00:33:39,280
<font color="#E5E5E5">pretty rich UEFI execution environment</font>

834
00:33:36,070 --> 00:33:41,919
and there's<font color="#E5E5E5"> the there's something</font><font color="#CCCCCC"> called</font>

835
00:33:39,280 --> 00:33:43,300
a boot services which is a pretty<font color="#CCCCCC"> useful</font>

836
00:33:41,920 --> 00:33:45,310
and<font color="#E5E5E5"> there's a some functionality there</font>

837
00:33:43,300 --> 00:33:46,690
that we can<font color="#CCCCCC"> use but in order to actually</font>

838
00:33:45,310 --> 00:33:48,879
<font color="#E5E5E5">take advantage of that and build a</font>

839
00:33:46,690 --> 00:33:51,730
payload we need to know how UEFI

840
00:33:48,880 --> 00:33:54,220
actually works internally<font color="#E5E5E5"> and so there's</font>

841
00:33:51,730 --> 00:33:57,580
a concept<font color="#E5E5E5"> of the UEFI applications</font>

842
00:33:54,220 --> 00:34:00,010
<font color="#CCCCCC">ua5 protocols</font><font color="#E5E5E5"> there's the system table</font>

843
00:33:57,580 --> 00:34:01,449
which<font color="#CCCCCC"> is a pretty key component</font><font color="#E5E5E5"> and then</font>

844
00:34:00,010 --> 00:34:05,520
there's also boot services and runtime

845
00:34:01,450 --> 00:34:10,360
services<font color="#E5E5E5"> boot service is only available</font>

846
00:34:05,520 --> 00:34:11,770
before<font color="#E5E5E5"> the system while it's setting up</font>

847
00:34:10,360 --> 00:34:13,720
<font color="#CCCCCC">the system</font><font color="#E5E5E5"> and before it loads the</font>

848
00:34:11,770 --> 00:34:15,880
operating system boot services is

849
00:34:13,719 --> 00:34:20,049
<font color="#CCCCCC">available but</font><font color="#E5E5E5"> once it calls this exit</font>

850
00:34:15,880 --> 00:34:22,750
boot services call<font color="#CCCCCC"> 2 to signify this is</font>

851
00:34:20,050 --> 00:34:24,010
the end of of the<font color="#E5E5E5"> Dixie phase and now</font>

852
00:34:22,750 --> 00:34:26,260
we're gonna start<font color="#E5E5E5"> loading the</font><font color="#CCCCCC"> operating</font>

853
00:34:24,010 --> 00:34:27,640
system boot<font color="#E5E5E5"> services goes away and then</font>

854
00:34:26,260 --> 00:34:30,940
you only<font color="#E5E5E5"> have runtime services available</font>

855
00:34:27,639 --> 00:34:32,379
<font color="#E5E5E5">after that but</font><font color="#CCCCCC"> unify applications</font>

856
00:34:30,940 --> 00:34:34,899
<font color="#CCCCCC">they're they're essentially formatted</font>

857
00:34:32,380 --> 00:34:36,490
just<font color="#E5E5E5"> as Windows PE binaries so it's</font>

858
00:34:34,899 --> 00:34:38,440
really<font color="#CCCCCC"> easy to just</font><font color="#E5E5E5"> drop it</font><font color="#CCCCCC"> into</font><font color="#E5E5E5"> ayodhya</font>

859
00:34:36,489 --> 00:34:42,939
take a look at it and<font color="#E5E5E5"> figure out what's</font>

860
00:34:38,440 --> 00:34:46,060
going<font color="#CCCCCC"> on instead of having a like UNIX</font>

861
00:34:42,940 --> 00:34:49,600
would have a main application or main

862
00:34:46,060 --> 00:34:51,429
function with<font color="#CCCCCC"> our V and Argosy the this</font>

863
00:34:49,600 --> 00:34:54,940
the<font color="#E5E5E5"> the initial</font><font color="#CCCCCC"> entry point to</font><font color="#E5E5E5"> all these</font>

864
00:34:51,429 --> 00:34:56,950
UEFI executables<font color="#E5E5E5"> is you basically get a</font>

865
00:34:54,940 --> 00:34:59,290
pointer to the loaded image<font color="#E5E5E5"> that you're</font>

866
00:34:56,949 --> 00:35:00,850
running<font color="#E5E5E5"> and the UEFI system table and</font>

867
00:34:59,290 --> 00:35:04,200
from<font color="#E5E5E5"> the system table we can find</font>

868
00:35:00,850 --> 00:35:06,130
<font color="#E5E5E5">pointers to the boot services</font><font color="#CCCCCC"> table and</font>

869
00:35:04,200 --> 00:35:08,620
runtime services<font color="#CCCCCC"> table</font>

870
00:35:06,130 --> 00:35:09,820
so those as when you're loading<font color="#CCCCCC"> in</font><font color="#E5E5E5"> an</font>

871
00:35:08,620 --> 00:35:11,410
idea it<font color="#CCCCCC"> could</font><font color="#E5E5E5"> be really</font><font color="#CCCCCC"> nice because</font><font color="#E5E5E5"> you</font>

872
00:35:09,820 --> 00:35:13,210
you know<font color="#E5E5E5"> specifically what the</font>

873
00:35:11,410 --> 00:35:15,279
particular structures<font color="#E5E5E5"> are Ida even</font><font color="#CCCCCC"> has</font>

874
00:35:13,210 --> 00:35:18,040
structure definitions for these so it

875
00:35:15,280 --> 00:35:20,050
makes a<font color="#E5E5E5"> lot</font><font color="#CCCCCC"> easier these are boot</font>

876
00:35:18,040 --> 00:35:22,810
services and runtime services<font color="#E5E5E5"> are</font>

877
00:35:20,050 --> 00:35:24,490
essentially objects with a lot of

878
00:35:22,810 --> 00:35:26,830
<font color="#E5E5E5">function</font><font color="#CCCCCC"> pointers and different</font>

879
00:35:24,490 --> 00:35:29,709
<font color="#E5E5E5">functions that you</font><font color="#CCCCCC"> can</font><font color="#E5E5E5"> call essentially</font>

880
00:35:26,830 --> 00:35:33,009
<font color="#CCCCCC">they're they're basically</font><font color="#E5E5E5"> UEFI protocols</font>

881
00:35:29,710 --> 00:35:34,900
where the the core<font color="#CCCCCC"> mechanism within UEFI</font>

882
00:35:33,010 --> 00:35:37,330
is this<font color="#E5E5E5"> concept of the protocol where</font>

883
00:35:34,900 --> 00:35:41,220
it's essentially an object-oriented

884
00:35:37,330 --> 00:35:44,049
programming mechanism where you you

885
00:35:41,220 --> 00:35:47,049
identify it by a<font color="#CCCCCC"> Guha</font><font color="#E5E5E5"> to globally unique</font>

886
00:35:44,050 --> 00:35:50,230
identifier and there's a<font color="#E5E5E5"> boot services</font>

887
00:35:47,050 --> 00:35:52,960
call to to locate a protocol<font color="#E5E5E5"> so if I</font>

888
00:35:50,230 --> 00:35:57,300
want a<font color="#E5E5E5"> particular named or if I want a</font>

889
00:35:52,960 --> 00:36:00,910
<font color="#CCCCCC">particular protocol like the the DHCP</font>

890
00:35:57,300 --> 00:36:02,740
<font color="#CCCCCC">Dixie driver or some some different</font>

891
00:36:00,910 --> 00:36:05,470
functionality I can say locate protocol

892
00:36:02,740 --> 00:36:06,939
<font color="#CCCCCC">and</font><font color="#E5E5E5"> basically get a pointer to to that</font>

893
00:36:05,470 --> 00:36:10,450
particular protocol that<font color="#E5E5E5"> I can then just</font>

894
00:36:06,940 --> 00:36:12,910
<font color="#E5E5E5">call functions in and it's it's a really</font>

895
00:36:10,450 --> 00:36:15,189
<font color="#CCCCCC">powerful mechanism but like I</font><font color="#E5E5E5"> mentioned</font>

896
00:36:12,910 --> 00:36:17,080
there's no address<font color="#E5E5E5"> protection or memory</font>

897
00:36:15,190 --> 00:36:19,570
protection<font color="#E5E5E5"> between</font><font color="#CCCCCC"> these Dixie drivers</font>

898
00:36:17,080 --> 00:36:21,009
so there there can be some<font color="#E5E5E5"> problems</font><font color="#CCCCCC"> with</font>

899
00:36:19,570 --> 00:36:23,590
that<font color="#CCCCCC"> to make things easier from an</font>

900
00:36:21,010 --> 00:36:25,090
exploitation standpoint<font color="#E5E5E5"> so the the</font>

901
00:36:23,590 --> 00:36:27,490
system<font color="#E5E5E5"> table contains boot services</font>

902
00:36:25,090 --> 00:36:30,100
runtime services<font color="#CCCCCC"> some it's a basic</font>

903
00:36:27,490 --> 00:36:32,379
console<font color="#CCCCCC"> endpoint</font><font color="#E5E5E5"> input and output</font>

904
00:36:30,100 --> 00:36:34,420
functions and then a configuration table

905
00:36:32,380 --> 00:36:35,890
<font color="#E5E5E5">and the configuration table basically</font>

906
00:36:34,420 --> 00:36:38,890
has a little bit<font color="#E5E5E5"> more information about</font>

907
00:36:35,890 --> 00:36:40,509
<font color="#E5E5E5">the state</font><font color="#CCCCCC"> of the system and boot</font>

908
00:36:38,890 --> 00:36:43,089
services<font color="#CCCCCC"> have some some</font><font color="#E5E5E5"> pretty useful</font>

909
00:36:40,510 --> 00:36:44,500
functions for<font color="#CCCCCC"> us like memory handling</font>

910
00:36:43,090 --> 00:36:47,590
setting up<font color="#E5E5E5"> events you could hook on a</font>

911
00:36:44,500 --> 00:36:49,030
particular event<font color="#E5E5E5"> so maybe maybe there's</font>

912
00:36:47,590 --> 00:36:50,440
a particular or a bit of<font color="#E5E5E5"> functionality</font>

913
00:36:49,030 --> 00:36:52,450
<font color="#E5E5E5">that hasn't been</font><font color="#CCCCCC"> loaded</font><font color="#E5E5E5"> yet and you want</font>

914
00:36:50,440 --> 00:36:54,460
<font color="#CCCCCC">to make sure</font><font color="#E5E5E5"> that your code runs after</font>

915
00:36:52,450 --> 00:36:57,160
that happens<font color="#E5E5E5"> and you can hook on a</font>

916
00:36:54,460 --> 00:36:58,690
particular event<font color="#CCCCCC"> protocol B</font><font color="#E5E5E5"> operation is</font>

917
00:36:57,160 --> 00:37:00,339
like<font color="#E5E5E5"> you can register and say I want to</font>

918
00:36:58,690 --> 00:37:02,290
<font color="#E5E5E5">provide this particular protocol and</font>

919
00:37:00,340 --> 00:37:04,030
someone else can call you but then

920
00:37:02,290 --> 00:37:06,640
there's also<font color="#E5E5E5"> the</font><font color="#CCCCCC"> ability to load and</font>

921
00:37:04,030 --> 00:37:08,890
start a UEFI application and that's

922
00:37:06,640 --> 00:37:11,650
<font color="#E5E5E5">that's a pretty key thing for for our</font>

923
00:37:08,890 --> 00:37:13,750
needs and also exit boot services which

924
00:37:11,650 --> 00:37:15,790
is just basically tears down the<font color="#E5E5E5"> bits of</font>

925
00:37:13,750 --> 00:37:18,660
services functionality and only leaves

926
00:37:15,790 --> 00:37:20,800
the runtime services functionality

927
00:37:18,660 --> 00:37:22,540
runtime<font color="#CCCCCC"> services includes</font><font color="#E5E5E5"> things like</font>

928
00:37:20,800 --> 00:37:24,880
variable operations if you have UEFI

929
00:37:22,540 --> 00:37:25,080
variables<font color="#CCCCCC"> you you would use this in</font>

930
00:37:24,880 --> 00:37:29,450
<font color="#E5E5E5">order</font>

931
00:37:25,080 --> 00:37:33,509
to read them write them make<font color="#E5E5E5"> changes</font>

932
00:37:29,450 --> 00:37:35,879
<font color="#CCCCCC">maybe</font><font color="#E5E5E5"> you can add a variable it it's a</font>

933
00:37:33,510 --> 00:37:38,580
pretty powerful<font color="#E5E5E5"> functionality and</font>

934
00:37:35,880 --> 00:37:41,430
capsule operations<font color="#E5E5E5"> the the intended</font>

935
00:37:38,580 --> 00:37:43,980
mechanism for doing updates in UEFI is

936
00:37:41,430 --> 00:37:45,779
to use a capsule and not everybody does

937
00:37:43,980 --> 00:37:47,220
that<font color="#CCCCCC"> yet which is</font><font color="#E5E5E5"> kind of why we're here</font>

938
00:37:45,780 --> 00:37:49,350
<font color="#E5E5E5">today</font>

939
00:37:47,220 --> 00:37:50,759
but capsule is basically a<font color="#CCCCCC"> mechanism</font>

940
00:37:49,350 --> 00:37:55,290
where you<font color="#E5E5E5"> can you could have a</font>

941
00:37:50,760 --> 00:37:57,600
particular signed<font color="#E5E5E5"> blob and trigger this</font>

942
00:37:55,290 --> 00:38:01,560
capsule update<font color="#E5E5E5"> it will go into</font><font color="#CCCCCC"> SMM</font>

943
00:37:57,600 --> 00:38:03,690
verify the verify the capsule and reboot

944
00:38:01,560 --> 00:38:05,009
or set the<font color="#E5E5E5"> system to sleep and when it</font>

945
00:38:03,690 --> 00:38:06,150
comes<font color="#E5E5E5"> out</font><font color="#CCCCCC"> of sleep it actually applies</font>

946
00:38:05,010 --> 00:38:07,680
the update what<font color="#CCCCCC"> thickets are still</font>

947
00:38:06,150 --> 00:38:10,230
<font color="#E5E5E5">unlocked</font><font color="#CCCCCC"> but that's the way things</font><font color="#E5E5E5"> are</font>

948
00:38:07,680 --> 00:38:13,259
<font color="#E5E5E5">supposed to work</font><font color="#CCCCCC"> but</font><font color="#E5E5E5"> not everybody is</font>

949
00:38:10,230 --> 00:38:15,770
<font color="#E5E5E5">using that some some of the useful boot</font>

950
00:38:13,260 --> 00:38:17,940
<font color="#E5E5E5">services functions are locate protocol</font>

951
00:38:15,770 --> 00:38:22,500
<font color="#E5E5E5">load image we have the ability to</font>

952
00:38:17,940 --> 00:38:25,110
<font color="#E5E5E5">basically load any Dixie formatted UEFI</font>

953
00:38:22,500 --> 00:38:27,510
application and any UEFI application

954
00:38:25,110 --> 00:38:30,030
into memory and load image actually<font color="#E5E5E5"> has</font>

955
00:38:27,510 --> 00:38:31,590
the<font color="#E5E5E5"> functionality of where you can you</font>

956
00:38:30,030 --> 00:38:32,850
can either say<font color="#E5E5E5"> I want to load it from a</font>

957
00:38:31,590 --> 00:38:35,190
particular path<font color="#E5E5E5"> within a particular</font>

958
00:38:32,850 --> 00:38:37,230
<font color="#E5E5E5">firmware volume or you can just pass it</font>

959
00:38:35,190 --> 00:38:40,440
a buffer<font color="#CCCCCC"> to memory and say I want</font><font color="#E5E5E5"> to</font>

960
00:38:37,230 --> 00:38:43,440
load<font color="#CCCCCC"> a UEFI application from this buffer</font>

961
00:38:40,440 --> 00:38:46,080
with this size and that's that's<font color="#E5E5E5"> really</font>

962
00:38:43,440 --> 00:38:48,390
<font color="#CCCCCC">useful</font><font color="#E5E5E5"> so we'll want to</font><font color="#CCCCCC"> have a load</font>

963
00:38:46,080 --> 00:38:50,460
image from a buffer and then start image

964
00:38:48,390 --> 00:38:53,100
<font color="#CCCCCC">we'll take a handle that</font><font color="#E5E5E5"> we've gotten</font>

965
00:38:50,460 --> 00:38:55,500
from<font color="#CCCCCC"> load image and just just back the</font>

966
00:38:53,100 --> 00:39:00,569
<font color="#E5E5E5">dispatcher</font><font color="#CCCCCC"> we'll start executing that</font>

967
00:38:55,500 --> 00:39:02,520
code for<font color="#CCCCCC"> us so the problem is</font><font color="#E5E5E5"> we</font><font color="#CCCCCC"> need to</font>

968
00:39:00,570 --> 00:39:06,510
<font color="#E5E5E5">find the the pointer to boot services in</font>

969
00:39:02,520 --> 00:39:08,220
the first place<font color="#CCCCCC"> I mentioned that every</font>

970
00:39:06,510 --> 00:39:10,380
UEFI application gets a copy of the

971
00:39:08,220 --> 00:39:13,740
system<font color="#CCCCCC"> cable when it's initially</font>

972
00:39:10,380 --> 00:39:15,960
starting but that was before we<font color="#CCCCCC"> ran into</font>

973
00:39:13,740 --> 00:39:18,899
<font color="#CCCCCC">our vulnerable code path but one thing</font>

974
00:39:15,960 --> 00:39:21,240
<font color="#E5E5E5">that's really useful for</font><font color="#CCCCCC"> us</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> that the</font>

975
00:39:18,900 --> 00:39:23,940
<font color="#E5E5E5">the standard UEFI application startup</font>

976
00:39:21,240 --> 00:39:26,250
code<font color="#E5E5E5"> will take a copy of the boot</font>

977
00:39:23,940 --> 00:39:28,350
services<font color="#E5E5E5"> pointer the runtime services</font>

978
00:39:26,250 --> 00:39:30,570
pointer and write those<font color="#CCCCCC"> two</font><font color="#E5E5E5"> global</font>

979
00:39:28,350 --> 00:39:32,759
<font color="#E5E5E5">variables</font><font color="#CCCCCC"> within its application</font><font color="#E5E5E5"> and</font>

980
00:39:30,570 --> 00:39:35,340
because there's<font color="#E5E5E5"> no address randomization</font>

981
00:39:32,760 --> 00:39:36,900
<font color="#E5E5E5">we can figure</font><font color="#CCCCCC"> out what those what those</font>

982
00:39:35,340 --> 00:39:37,550
addresses are so we<font color="#E5E5E5"> can even just hard</font>

983
00:39:36,900 --> 00:39:40,460
code

984
00:39:37,550 --> 00:39:43,070
<font color="#E5E5E5">hard-code those pointers and it just</font>

985
00:39:40,460 --> 00:39:44,150
works<font color="#CCCCCC"> so</font><font color="#E5E5E5"> essentially we're gonna end up</font>

986
00:39:43,070 --> 00:39:46,070
<font color="#E5E5E5">with a payload that looks kind of like</font>

987
00:39:44,150 --> 00:39:48,410
this where we've got<font color="#E5E5E5"> our</font><font color="#CCCCCC"> knop sled or</font>

988
00:39:46,070 --> 00:39:50,990
egg hunter and return address in the

989
00:39:48,410 --> 00:39:52,460
actual overflow on the stack<font color="#CCCCCC"> and</font><font color="#E5E5E5"> then in</font>

990
00:39:50,990 --> 00:39:55,729
our rest of the<font color="#E5E5E5"> payload that ends up on</font>

991
00:39:52,460 --> 00:39:58,700
the heap<font color="#E5E5E5"> we've got a little copy and</font>

992
00:39:55,730 --> 00:40:01,310
decode stub and loaded start image

993
00:39:58,700 --> 00:40:03,379
<font color="#E5E5E5">shellcode</font><font color="#CCCCCC"> and then we'll just</font><font color="#E5E5E5"> tack some</font>

994
00:40:01,310 --> 00:40:06,890
arbitrary UEFI application on the end of

995
00:40:03,380 --> 00:40:09,080
it<font color="#E5E5E5"> and basically load and run an</font>

996
00:40:06,890 --> 00:40:12,190
<font color="#CCCCCC">application that we provide through our</font>

997
00:40:09,080 --> 00:40:15,290
<font color="#E5E5E5">web page that we return to the request</font>

998
00:40:12,190 --> 00:40:20,600
<font color="#CCCCCC">but there was a problem</font><font color="#E5E5E5"> we we ran</font><font color="#CCCCCC"> into</font>

999
00:40:15,290 --> 00:40:22,340
is that when right when the return

1000
00:40:20,600 --> 00:40:24,140
address when we when we overflow the

1001
00:40:22,340 --> 00:40:27,890
return address<font color="#CCCCCC"> and</font><font color="#E5E5E5"> that function returns</font>

1002
00:40:24,140 --> 00:40:30,740
<font color="#E5E5E5">it has just called free on our buffer</font><font color="#CCCCCC"> in</font>

1003
00:40:27,890 --> 00:40:32,390
<font color="#E5E5E5">the heap</font><font color="#CCCCCC"> so if we call any functions</font>

1004
00:40:30,740 --> 00:40:34,520
that will trigger memory allocations

1005
00:40:32,390 --> 00:40:36,379
<font color="#CCCCCC">it's gonna</font><font color="#E5E5E5"> corrupt our payload and stop</font>

1006
00:40:34,520 --> 00:40:40,180
all over that<font color="#E5E5E5"> so that's not what</font><font color="#CCCCCC"> you</font>

1007
00:40:36,380 --> 00:40:43,790
want<font color="#E5E5E5"> but it turns out that we can just</font>

1008
00:40:40,180 --> 00:40:45,859
copy our second payload<font color="#E5E5E5"> on the heap</font>

1009
00:40:43,790 --> 00:40:49,790
<font color="#E5E5E5">somewhere else</font><font color="#CCCCCC"> that we've determined</font><font color="#E5E5E5"> is</font>

1010
00:40:45,859 --> 00:40:53,090
safe<font color="#E5E5E5"> and then that just</font><font color="#CCCCCC"> works so let me</font>

1011
00:40:49,790 --> 00:40:56,320
run<font color="#E5E5E5"> a quick demo of actually a payload</font>

1012
00:40:53,090 --> 00:40:56,320
<font color="#E5E5E5">we put together</font>

1013
00:41:02,240 --> 00:41:14,229
so here's the as<font color="#CCCCCC"> raka bios running</font>

1014
00:41:07,690 --> 00:41:21,320
<font color="#E5E5E5">standard so as it's</font><font color="#CCCCCC"> running it'll go out</font>

1015
00:41:14,230 --> 00:41:23,240
retrieve<font color="#E5E5E5"> our payload and we've got</font>

1016
00:41:21,320 --> 00:41:32,570
arbitrary code execution in<font color="#E5E5E5"> BIOS and</font>

1017
00:41:23,240 --> 00:41:33,799
this is at a point<font color="#E5E5E5"> where this is at a</font>

1018
00:41:32,570 --> 00:41:34,310
point where<font color="#CCCCCC"> the system is</font><font color="#E5E5E5"> completely</font>

1019
00:41:33,800 --> 00:41:36,380
unlocked

1020
00:41:34,310 --> 00:41:38,420
none of<font color="#E5E5E5"> those</font><font color="#CCCCCC"> spy</font><font color="#E5E5E5"> productions that I</font>

1021
00:41:36,380 --> 00:41:40,580
that I mentioned have been<font color="#E5E5E5"> enabled yet</font>

1022
00:41:38,420 --> 00:41:50,150
so we can essentially do whatever we

1023
00:41:40,580 --> 00:41:54,920
want at this point<font color="#CCCCCC"> and so</font><font color="#E5E5E5"> we can also do</font>

1024
00:41:50,150 --> 00:41:58,220
a<font color="#E5E5E5"> more complex exploit</font><font color="#CCCCCC"> that that example</font>

1025
00:41:54,920 --> 00:42:00,520
<font color="#E5E5E5">was pretty small and this this one</font><font color="#CCCCCC"> is</font>

1026
00:41:58,220 --> 00:42:04,990
<font color="#E5E5E5">essentially running</font><font color="#CCCCCC"> a full UEFI shell</font>

1027
00:42:00,520 --> 00:42:08,330
<font color="#E5E5E5">executable</font><font color="#CCCCCC"> that is about a megabyte and</font>

1028
00:42:04,990 --> 00:42:09,439
we we did have some encoding issues

1029
00:42:08,330 --> 00:42:13,819
because we needed<font color="#E5E5E5"> to avoid bad</font>

1030
00:42:09,440 --> 00:42:15,500
characters<font color="#CCCCCC"> it turns out the</font><font color="#E5E5E5"> using MSF</font>

1031
00:42:13,820 --> 00:42:17,480
venom to encode<font color="#CCCCCC"> your payload</font><font color="#E5E5E5"> when it's a</font>

1032
00:42:15,500 --> 00:42:21,020
megabyte really doesn't<font color="#E5E5E5"> work so we had</font>

1033
00:42:17,480 --> 00:42:22,880
to create create<font color="#CCCCCC"> our own</font><font color="#E5E5E5"> debug stub so</font>

1034
00:42:21,020 --> 00:42:25,849
our payload is actually about<font color="#E5E5E5"> two Meg's</font>

1035
00:42:22,880 --> 00:42:29,480
<font color="#E5E5E5">and we're running a complete UEFI</font>

1036
00:42:25,849 --> 00:42:32,480
interactive shell and this<font color="#E5E5E5"> is just</font>

1037
00:42:29,480 --> 00:42:34,160
demonstrating we have arbitrary size we

1038
00:42:32,480 --> 00:42:36,290
<font color="#E5E5E5">can put essentially whatever size</font>

1039
00:42:34,160 --> 00:42:39,549
application we<font color="#E5E5E5"> want in here</font><font color="#CCCCCC"> and we can</font>

1040
00:42:36,290 --> 00:42:47,560
<font color="#E5E5E5">use all</font><font color="#CCCCCC"> of the the existing UEFI</font>

1041
00:42:39,550 --> 00:42:50,450
functionality that exists<font color="#CCCCCC"> so</font>

1042
00:42:47,560 --> 00:42:52,970
ramifications for this it runs before

1043
00:42:50,450 --> 00:42:54,950
<font color="#E5E5E5">the spy protections are enabled you can</font>

1044
00:42:52,970 --> 00:42:59,118
<font color="#CCCCCC">even write an implant to the</font><font color="#E5E5E5"> spy and</font>

1045
00:42:54,950 --> 00:43:01,609
it'll survive reboots the the one key

1046
00:42:59,119 --> 00:43:04,220
<font color="#E5E5E5">point about this is that because</font><font color="#CCCCCC"> we're</font>

1047
00:43:01,609 --> 00:43:07,310
at exploiting code in BIOS at this early

1048
00:43:04,220 --> 00:43:09,919
point<font color="#CCCCCC"> and like a</font><font color="#E5E5E5"> lot</font><font color="#CCCCCC"> of people think</font>

1049
00:43:07,310 --> 00:43:11,570
that TPM will save you or like the

1050
00:43:09,920 --> 00:43:13,790
measurements<font color="#CCCCCC"> there secure boot will save</font>

1051
00:43:11,570 --> 00:43:14,319
you but it really<font color="#CCCCCC"> doesn't because this</font>

1052
00:43:13,790 --> 00:43:15,249
does<font color="#E5E5E5"> not</font>

1053
00:43:14,319 --> 00:43:18,209
change the measurements that<font color="#CCCCCC"> are</font>

1054
00:43:15,249 --> 00:43:21,430
actually happening<font color="#CCCCCC"> the the</font><font color="#E5E5E5"> the TPM and</font>

1055
00:43:18,209 --> 00:43:23,348
<font color="#CCCCCC">measure boot is only recording</font><font color="#E5E5E5"> what the</font>

1056
00:43:21,430 --> 00:43:26,229
<font color="#E5E5E5">what the code is</font><font color="#CCCCCC"> supposed to be running</font>

1057
00:43:23,349 --> 00:43:28,449
this the the code<font color="#E5E5E5"> that's in spy but</font>

1058
00:43:26,229 --> 00:43:30,009
because<font color="#E5E5E5"> we're we are getting arbitrary</font>

1059
00:43:28,449 --> 00:43:31,660
code execution at this point<font color="#E5E5E5"> this</font>

1060
00:43:30,009 --> 00:43:33,759
doesn't change<font color="#E5E5E5"> the measurements we can</font>

1061
00:43:31,660 --> 00:43:35,589
<font color="#E5E5E5">provide around fake measurements from</font>

1062
00:43:33,759 --> 00:43:37,739
<font color="#E5E5E5">beyond to this point to get up to the</font>

1063
00:43:35,589 --> 00:43:40,449
point where we where<font color="#CCCCCC"> we can unlock</font>

1064
00:43:37,739 --> 00:43:45,059
unlock<font color="#CCCCCC"> BitLocker Keys unseal them</font><font color="#E5E5E5"> from</font>

1065
00:43:40,449 --> 00:43:47,890
the TPM<font color="#E5E5E5"> one interesting point is that</font>

1066
00:43:45,059 --> 00:43:51,279
<font color="#E5E5E5">there we do have the ability so this</font>

1067
00:43:47,890 --> 00:43:53,920
particular<font color="#CCCCCC"> bios does have a NTFS</font><font color="#E5E5E5"> EFI</font>

1068
00:43:51,279 --> 00:43:56,979
driver built into it<font color="#CCCCCC"> we could use that</font>

1069
00:43:53,920 --> 00:43:59,079
to<font color="#E5E5E5"> mount the hard drive</font><font color="#CCCCCC"> drop implants</font>

1070
00:43:56,979 --> 00:44:02,078
into it<font color="#E5E5E5"> like hacking deem rootkit did we</font>

1071
00:43:59,079 --> 00:44:04,449
could also read secrets off of your hard

1072
00:44:02,079 --> 00:44:06,069
drive and email them somewhere<font color="#E5E5E5"> or we</font>

1073
00:44:04,449 --> 00:44:07,569
could use the<font color="#E5E5E5"> network</font><font color="#CCCCCC"> functionality to</font>

1074
00:44:06,069 --> 00:44:11,589
bring up<font color="#E5E5E5"> her own network connection and</font>

1075
00:44:07,569 --> 00:44:13,479
send those secrets<font color="#E5E5E5"> elsewhere</font><font color="#CCCCCC"> it does</font>

1076
00:44:11,589 --> 00:44:16,380
have a full network stack so we<font color="#CCCCCC"> can have</font>

1077
00:44:13,479 --> 00:44:19,569
a much<font color="#E5E5E5"> more complex</font><font color="#CCCCCC"> command control</font>

1078
00:44:16,380 --> 00:44:21,940
security hardening<font color="#E5E5E5"> like these are all</font>

1079
00:44:19,569 --> 00:44:23,650
features<font color="#CCCCCC"> that have</font><font color="#E5E5E5"> been talked about</font><font color="#CCCCCC"> but</font>

1080
00:44:21,940 --> 00:44:25,839
none<font color="#CCCCCC"> of this exists</font><font color="#E5E5E5"> in the reference</font>

1081
00:44:23,650 --> 00:44:27,930
implementation yet they have<font color="#E5E5E5"> been</font>

1082
00:44:25,839 --> 00:44:32,288
<font color="#CCCCCC">talking about having stack Canaries in</font>

1083
00:44:27,930 --> 00:44:34,899
UDK<font color="#CCCCCC"> 2019 I</font><font color="#E5E5E5"> think but none of that exists</font>

1084
00:44:32,289 --> 00:44:37,150
yet we did put together some simple<font color="#CCCCCC"> yara</font>

1085
00:44:34,900 --> 00:44:39,819
rules so that<font color="#E5E5E5"> you can detect this it's</font>

1086
00:44:37,150 --> 00:44:41,859
<font color="#E5E5E5">basically</font><font color="#CCCCCC"> just looking for those those</font>

1087
00:44:39,819 --> 00:44:47,170
<font color="#E5E5E5">uh</font><font color="#CCCCCC"> overflow fields and if they're</font><font color="#E5E5E5"> above</font>

1088
00:44:41,859 --> 00:44:50,848
a certain<font color="#E5E5E5"> length alert so</font><font color="#CCCCCC"> the this was</font>

1089
00:44:47,170 --> 00:44:53,680
the<font color="#CCCCCC"> asrock one this</font><font color="#E5E5E5"> is the asus one</font>

1090
00:44:50,849 --> 00:44:55,329
<font color="#E5E5E5">there there is an ability and chips</font><font color="#CCCCCC"> XX</font>

1091
00:44:53,680 --> 00:44:58,629
is a really great<font color="#E5E5E5"> tool for</font><font color="#CCCCCC"> exploring</font>

1092
00:44:55,329 --> 00:45:00,749
UEFI system and even<font color="#CCCCCC"> just exploring</font><font color="#E5E5E5"> the</font>

1093
00:44:58,630 --> 00:45:03,219
hardware<font color="#E5E5E5"> of your system exposes a</font><font color="#CCCCCC"> lot of</font>

1094
00:45:00,749 --> 00:45:05,859
hardware<font color="#E5E5E5"> debug it exposes a lot of</font>

1095
00:45:03,219 --> 00:45:07,029
hardware interfaces you<font color="#CCCCCC"> can do</font><font color="#E5E5E5"> arbitrary</font>

1096
00:45:05,859 --> 00:45:08,859
memory<font color="#E5E5E5"> reads and writes to physical</font>

1097
00:45:07,029 --> 00:45:11,380
<font color="#E5E5E5">addresses you can</font><font color="#CCCCCC"> read and write</font><font color="#E5E5E5"> to i/o</font>

1098
00:45:08,859 --> 00:45:13,420
ports you<font color="#CCCCCC"> could do</font><font color="#E5E5E5"> PCI access but there</font>

1099
00:45:11,380 --> 00:45:16,029
we've added<font color="#E5E5E5"> a additional functionality</font>

1100
00:45:13,420 --> 00:45:19,479
to<font color="#E5E5E5"> be a basically be able to do a white</font>

1101
00:45:16,029 --> 00:45:22,630
listing and blacklisting of<font color="#E5E5E5"> efi binaries</font>

1102
00:45:19,479 --> 00:45:25,029
within your system<font color="#E5E5E5"> so you</font><font color="#CCCCCC"> can use you</font>

1103
00:45:22,630 --> 00:45:27,670
can<font color="#CCCCCC"> use chipset to read the contents of</font>

1104
00:45:25,029 --> 00:45:29,260
<font color="#CCCCCC">your spy</font><font color="#E5E5E5"> generate a whitelist</font>

1105
00:45:27,670 --> 00:45:31,600
and then maybe after<font color="#CCCCCC"> you've traveled</font><font color="#E5E5E5"> to</font>

1106
00:45:29,260 --> 00:45:34,150
somewhere that<font color="#E5E5E5"> you think the</font><font color="#CCCCCC"> maid might</font>

1107
00:45:31,600 --> 00:45:36,130
do something<font color="#E5E5E5"> sketchy with your system</font>

1108
00:45:34,150 --> 00:45:38,080
<font color="#E5E5E5">you can then check check your system</font>

1109
00:45:36,130 --> 00:45:39,370
<font color="#E5E5E5">against that</font><font color="#CCCCCC"> whitelist and see if there</font>

1110
00:45:38,080 --> 00:45:41,500
have<font color="#CCCCCC"> been any changes</font><font color="#E5E5E5"> and if you have</font>

1111
00:45:39,370 --> 00:45:44,170
any new<font color="#E5E5E5"> efi modules that you didn't have</font>

1112
00:45:41,500 --> 00:45:46,690
<font color="#E5E5E5">before</font><font color="#CCCCCC"> so this</font><font color="#E5E5E5"> is a really great tool to</font>

1113
00:45:44,170 --> 00:45:48,160
<font color="#E5E5E5">take</font><font color="#CCCCCC"> a look at and</font><font color="#E5E5E5"> even beyond the the</font>

1114
00:45:46,690 --> 00:45:52,180
<font color="#E5E5E5">white listing and black listing</font>

1115
00:45:48,160 --> 00:45:55,089
functionality and so some<font color="#E5E5E5"> some</font>

1116
00:45:52,180 --> 00:45:57,850
<font color="#E5E5E5">conclusions firmware is already complex</font>

1117
00:45:55,090 --> 00:45:59,980
and<font color="#E5E5E5"> it's highly privileged and people</font>

1118
00:45:57,850 --> 00:46:02,560
keep adding more<font color="#CCCCCC"> network surface to it</font>

1119
00:45:59,980 --> 00:46:05,070
so the remote attack surface is<font color="#E5E5E5"> just</font>

1120
00:46:02,560 --> 00:46:08,230
getting bigger<font color="#E5E5E5"> and more complex and</font>

1121
00:46:05,070 --> 00:46:10,200
<font color="#E5E5E5">bios's is hard to</font><font color="#CCCCCC"> update</font><font color="#E5E5E5"> so a lot of</font>

1122
00:46:08,230 --> 00:46:13,990
<font color="#E5E5E5">people</font><font color="#CCCCCC"> don't update</font><font color="#E5E5E5"> the BIOS and</font>

1123
00:46:10,200 --> 00:46:16,660
ironically<font color="#E5E5E5"> making it easier</font><font color="#CCCCCC"> to update</font>

1124
00:46:13,990 --> 00:46:21,609
<font color="#E5E5E5">your BIOS adds vulnerabilities like this</font>

1125
00:46:16,660 --> 00:46:22,810
sometimes<font color="#E5E5E5"> so I think that's the end any</font>

1126
00:46:21,610 --> 00:46:28,570
questions

1127
00:46:22,810 --> 00:46:28,570
[Applause]

