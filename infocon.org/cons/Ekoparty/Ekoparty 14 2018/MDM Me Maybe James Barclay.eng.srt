1
00:00:00,000 --> 00:00:06,509
<font color="#E5E5E5">Mema me</font><font color="#CCCCCC"> maybe shanks</font><font color="#E5E5E5"> Marco with</font><font color="#CCCCCC"> Cupido</font>

2
00:00:04,339 --> 00:00:09,150
preliminary<font color="#CCCCCC"> data introduced of the</font>

3
00:00:06,509 --> 00:00:11,639
mobile<font color="#CCCCCC"> device in management the</font><font color="#E5E5E5"> Apple</font>

4
00:00:09,150 --> 00:00:14,219
device<font color="#E5E5E5"> enforcement program a severely</font>

5
00:00:11,639 --> 00:00:18,259
<font color="#E5E5E5">permit</font><font color="#CCCCCC"> eligibility system a significant</font>

6
00:00:14,219 --> 00:00:18,259
<font color="#CCCCCC">moochers Jasha double</font>

7
00:00:20,640 --> 00:00:24,449
[Music]

8
00:00:25,550 --> 00:00:32,430
<font color="#CCCCCC">hello everyone my name is</font><font color="#E5E5E5"> James Barclay</font>

9
00:00:28,769 --> 00:00:34,710
I'm a senior<font color="#E5E5E5"> R&D engineer at duo</font><font color="#CCCCCC"> labs</font>

10
00:00:32,430 --> 00:00:36,989
<font color="#E5E5E5">which is the research arm of duo</font>

11
00:00:34,710 --> 00:00:40,200
security<font color="#CCCCCC"> and today I'm going to be</font>

12
00:00:36,989 --> 00:00:44,849
<font color="#E5E5E5">talking about Apple's device</font><font color="#CCCCCC"> enrollment</font>

13
00:00:40,200 --> 00:00:49,079
program so I'm the only<font color="#E5E5E5"> one here</font><font color="#CCCCCC"> today</font>

14
00:00:44,850 --> 00:00:50,969
giving<font color="#E5E5E5"> this talk but the it goes without</font>

15
00:00:49,079 --> 00:00:53,670
<font color="#E5E5E5">saying</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> you</font><font color="#CCCCCC"> know this this research</font>

16
00:00:50,969 --> 00:00:55,789
was truly a team<font color="#CCCCCC"> effort Alaba day and</font>

17
00:00:53,670 --> 00:00:58,379
<font color="#E5E5E5">ishe the</font><font color="#CCCCCC"> pine Briana and Todd Manning</font>

18
00:00:55,789 --> 00:01:01,760
<font color="#E5E5E5">all contributed heavily to this research</font>

19
00:00:58,379 --> 00:01:04,018
so I wanted<font color="#E5E5E5"> to give them credit up front</font>

20
00:01:01,760 --> 00:01:07,439
so I'm just<font color="#E5E5E5"> gonna dive into the agenda</font>

21
00:01:04,019 --> 00:01:11,100
<font color="#CCCCCC">very</font><font color="#E5E5E5"> quickly I will go</font><font color="#CCCCCC"> over what MDM and</font>

22
00:01:07,439 --> 00:01:12,929
DEP are then I'll<font color="#E5E5E5"> move on to DEP</font>

23
00:01:11,100 --> 00:01:15,089
authentication and in some<font color="#E5E5E5"> of the</font>

24
00:01:12,930 --> 00:01:17,640
inherent weaknesses in it I'll talk

25
00:01:15,090 --> 00:01:20,850
about<font color="#E5E5E5"> our research methodology and</font>

26
00:01:17,640 --> 00:01:24,119
exploit<font color="#CCCCCC"> then I'll go into Apple's serial</font>

27
00:01:20,850 --> 00:01:26,130
numbers in their format<font color="#E5E5E5"> next I'll talk</font>

28
00:01:24,119 --> 00:01:28,409
<font color="#E5E5E5">about the impact of this research and</font>

29
00:01:26,130 --> 00:01:33,030
then mitigations and then finally I'll

30
00:01:28,409 --> 00:01:35,369
wrap<font color="#E5E5E5"> it up with a conclusion</font><font color="#CCCCCC"> so mobile</font>

31
00:01:33,030 --> 00:01:38,420
device management is a<font color="#CCCCCC"> technology</font><font color="#E5E5E5"> that's</font>

32
00:01:35,369 --> 00:01:40,950
<font color="#E5E5E5">used to centralize the management of</font>

33
00:01:38,420 --> 00:01:43,140
end-user<font color="#E5E5E5"> computing devices so these are</font>

34
00:01:40,950 --> 00:01:46,829
things<font color="#E5E5E5"> like laptops desktops mobile</font>

35
00:01:43,140 --> 00:01:48,630
phones<font color="#E5E5E5"> and so on on Apple Apple</font>

36
00:01:46,829 --> 00:01:51,000
<font color="#E5E5E5">platforms specifically it refers to</font>

37
00:01:48,630 --> 00:01:53,520
clients which are<font color="#CCCCCC"> Apple devices and</font>

38
00:01:51,000 --> 00:01:57,930
servers that implement support<font color="#E5E5E5"> for the</font>

39
00:01:53,520 --> 00:02:00,149
MDM protocol the MDM protocol leverages

40
00:01:57,930 --> 00:02:02,939
<font color="#CCCCCC">apples push notification service to wake</font>

41
00:02:00,149 --> 00:02:06,509
devices<font color="#E5E5E5"> and then communicates with the</font>

42
00:02:02,939 --> 00:02:08,429
MDM server to receive commands<font color="#CCCCCC"> the</font>

43
00:02:06,509 --> 00:02:12,319
client will perform the<font color="#E5E5E5"> command and</font>

44
00:02:08,429 --> 00:02:12,319
<font color="#CCCCCC">return the output to</font><font color="#E5E5E5"> the server</font>

45
00:02:12,790 --> 00:02:18,530
so what is the device<font color="#CCCCCC"> enrollment program</font>

46
00:02:15,800 --> 00:02:23,300
this<font color="#E5E5E5"> is a free service provided</font><font color="#CCCCCC"> by</font><font color="#E5E5E5"> Apple</font>

47
00:02:18,530 --> 00:02:26,870
<font color="#CCCCCC">to organizations that are using MDM to</font>

48
00:02:23,300 --> 00:02:30,019
manage their<font color="#CCCCCC"> endpoints it streamlines</font>

49
00:02:26,870 --> 00:02:32,959
<font color="#E5E5E5">the process</font><font color="#CCCCCC"> of MDM enrollment and</font><font color="#E5E5E5"> it</font>

50
00:02:30,019 --> 00:02:35,150
does this by<font color="#CCCCCC"> allowing iOS and Mac OS and</font>

51
00:02:32,959 --> 00:02:36,980
<font color="#CCCCCC">TV OS devices</font><font color="#E5E5E5"> that are directly</font>

52
00:02:35,150 --> 00:02:41,090
purchased<font color="#E5E5E5"> from Apple or an authorized</font>

53
00:02:36,980 --> 00:02:44,268
reseller<font color="#E5E5E5"> to enroll in MDM during the</font>

54
00:02:41,090 --> 00:02:46,130
initial<font color="#CCCCCC"> setup DEP also allows</font>

55
00:02:44,269 --> 00:02:48,709
administrators to configure which setup

56
00:02:46,130 --> 00:02:51,470
screens are displayed<font color="#CCCCCC"> to the end-user so</font>

57
00:02:48,709 --> 00:02:57,079
these are<font color="#E5E5E5"> things like the</font><font color="#CCCCCC"> Siri setup or</font>

58
00:02:51,470 --> 00:03:00,049
Apple ID setup so throughout this talk

59
00:02:57,079 --> 00:03:02,450
I'll be<font color="#CCCCCC"> referring</font><font color="#E5E5E5"> to the DEP API</font><font color="#CCCCCC"> I</font>

60
00:03:00,049 --> 00:03:05,660
wanted<font color="#CCCCCC"> to call out that</font><font color="#E5E5E5"> there are three</font>

61
00:03:02,450 --> 00:03:08,390
different DEP api's<font color="#E5E5E5"> there's the</font>

62
00:03:05,660 --> 00:03:11,180
<font color="#CCCCCC">so-called cloud service</font><font color="#E5E5E5"> API this is used</font>

63
00:03:08,390 --> 00:03:14,149
by<font color="#E5E5E5"> mobile device management servers to</font>

64
00:03:11,180 --> 00:03:17,540
associate<font color="#E5E5E5"> DEP profiles with specific</font>

65
00:03:14,150 --> 00:03:21,079
devices<font color="#E5E5E5"> next</font><font color="#CCCCCC"> we have the reseller API</font>

66
00:03:17,540 --> 00:03:23,959
which is used by resellers<font color="#CCCCCC"> and</font><font color="#E5E5E5"> Apple</font>

67
00:03:21,079 --> 00:03:27,620
<font color="#CCCCCC">Retail</font><font color="#E5E5E5"> to enroll devices and check</font>

68
00:03:23,959 --> 00:03:31,549
enrollment status and so on lastly we

69
00:03:27,620 --> 00:03:34,880
<font color="#E5E5E5">have the private DEP API</font><font color="#CCCCCC"> this</font><font color="#E5E5E5"> is an</font>

70
00:03:31,549 --> 00:03:36,470
undocumented API that is used by devices

71
00:03:34,880 --> 00:03:41,239
<font color="#E5E5E5">to</font><font color="#CCCCCC"> write to directly</font><font color="#E5E5E5"> communicate</font><font color="#CCCCCC"> with</font>

72
00:03:36,470 --> 00:03:43,250
<font color="#E5E5E5">Apple's DEP service so unless otherwise</font>

73
00:03:41,239 --> 00:03:44,870
noted<font color="#CCCCCC"> throughout this talk I'm only</font>

74
00:03:43,250 --> 00:03:47,420
going to<font color="#CCCCCC"> be</font><font color="#E5E5E5"> covering the private</font>

75
00:03:44,870 --> 00:03:52,579
undocumented<font color="#E5E5E5"> DEP API</font><font color="#CCCCCC"> that's used by</font>

76
00:03:47,420 --> 00:03:54,649
<font color="#E5E5E5">devices to communicate</font><font color="#CCCCCC"> with</font><font color="#E5E5E5"> Apple so</font>

77
00:03:52,579 --> 00:03:56,599
next<font color="#E5E5E5"> I'm going</font><font color="#CCCCCC"> to just go over the</font>

78
00:03:54,650 --> 00:03:58,730
enrollment process so what happens when

79
00:03:56,599 --> 00:04:02,929
<font color="#E5E5E5">a device boots up for the first time</font><font color="#CCCCCC"> and</font>

80
00:03:58,730 --> 00:04:04,670
checks in with DEP<font color="#CCCCCC"> so there</font><font color="#E5E5E5"> are several</font>

81
00:04:02,930 --> 00:04:08,150
asynchronous steps that need to<font color="#CCCCCC"> be</font>

82
00:04:04,670 --> 00:04:13,488
<font color="#CCCCCC">satisfied in order for a device to</font>

83
00:04:08,150 --> 00:04:14,959
enroll in MDM<font color="#E5E5E5"> via DEP initially a device</font>

84
00:04:13,489 --> 00:04:18,228
record needs to<font color="#E5E5E5"> be</font><font color="#CCCCCC"> created</font><font color="#E5E5E5"> by the</font>

85
00:04:14,959 --> 00:04:21,320
reseller or<font color="#E5E5E5"> by Apple</font><font color="#CCCCCC"> then the</font>

86
00:04:18,228 --> 00:04:23,570
<font color="#E5E5E5">organization needs</font><font color="#CCCCCC"> to assign the device</font>

87
00:04:21,320 --> 00:04:24,729
to an MDM server in the Apple<font color="#CCCCCC"> business</font>

88
00:04:23,570 --> 00:04:28,539
manager

89
00:04:24,729 --> 00:04:30,789
portal next the MDM server will retrieve

90
00:04:28,539 --> 00:04:33,580
<font color="#CCCCCC">the device record</font><font color="#E5E5E5"> through the cloud</font>

91
00:04:30,789 --> 00:04:37,000
service API which and then we'll create

92
00:04:33,580 --> 00:04:39,280
the<font color="#E5E5E5"> DEP profile then the device will</font>

93
00:04:37,000 --> 00:04:41,050
<font color="#E5E5E5">authenticate</font><font color="#CCCCCC"> to the DEP API and retrieve</font>

94
00:04:39,280 --> 00:04:42,489
what's called an activation record<font color="#CCCCCC"> now</font>

95
00:04:41,050 --> 00:04:46,960
<font color="#CCCCCC">I'll be talking</font><font color="#E5E5E5"> about activation records</font>

96
00:04:42,490 --> 00:04:49,229
quite a bit in<font color="#E5E5E5"> this talk next the device</font>

97
00:04:46,960 --> 00:04:52,210
will<font color="#CCCCCC"> authenticate to</font><font color="#E5E5E5"> the MDM server to</font>

98
00:04:49,229 --> 00:04:53,979
retrieve its enrollment profile so this

99
00:04:52,210 --> 00:04:56,258
<font color="#E5E5E5">contains things</font><font color="#CCCCCC"> like the MDM enrollment</font>

100
00:04:53,979 --> 00:04:57,940
payload a certificate payload<font color="#E5E5E5"> and a</font>

101
00:04:56,259 --> 00:05:00,550
simple certificate enrollment protic

102
00:04:57,940 --> 00:05:02,349
protocol payload the device will then

103
00:05:00,550 --> 00:05:04,060
request and retrieve a client

104
00:05:02,349 --> 00:05:06,430
certificate through<font color="#CCCCCC"> skep and then</font>

105
00:05:04,060 --> 00:05:12,310
finally it<font color="#E5E5E5"> will authenticate to the MDM</font>

106
00:05:06,430 --> 00:05:14,409
server<font color="#E5E5E5"> and begin receiving commands so</font>

107
00:05:12,310 --> 00:05:19,000
here's just<font color="#E5E5E5"> a more visual representation</font>

108
00:05:14,409 --> 00:05:21,430
of<font color="#CCCCCC"> that flow this</font><font color="#E5E5E5"> talk is focusing</font>

109
00:05:19,000 --> 00:05:23,560
mostly on step<font color="#CCCCCC"> four the dep check-in</font>

110
00:05:21,430 --> 00:05:26,319
process<font color="#E5E5E5"> so this is when the device is</font>

111
00:05:23,560 --> 00:05:32,860
first involved in communicating<font color="#E5E5E5"> with the</font>

112
00:05:26,319 --> 00:05:35,860
<font color="#CCCCCC">dep api so before i dive in just wanted</font>

113
00:05:32,860 --> 00:05:37,780
to define some of<font color="#E5E5E5"> the the binaries that</font>

114
00:05:35,860 --> 00:05:40,630
<font color="#CCCCCC">we'll be talking</font><font color="#E5E5E5"> about throughout this</font>

115
00:05:37,780 --> 00:05:43,840
talk<font color="#CCCCCC"> so first we have the MDM client</font><font color="#E5E5E5"> I</font>

116
00:05:40,630 --> 00:05:48,430
said earlier that when referring to

117
00:05:43,840 --> 00:05:50,198
<font color="#CCCCCC">Apple's</font><font color="#E5E5E5"> MDM it covers clients and</font>

118
00:05:48,430 --> 00:05:53,199
servers<font color="#E5E5E5"> that implement support</font><font color="#CCCCCC"> for the</font>

119
00:05:50,199 --> 00:05:56,740
MDM protocol the MDM client binary is

120
00:05:53,199 --> 00:05:59,349
the<font color="#CCCCCC"> client side of</font><font color="#E5E5E5"> that profile this is</font>

121
00:05:56,740 --> 00:06:01,389
just a<font color="#E5E5E5"> utility</font><font color="#CCCCCC"> that's used to manage</font>

122
00:05:59,349 --> 00:06:03,400
configuration<font color="#E5E5E5"> profiles on Mac OS and</font>

123
00:06:01,389 --> 00:06:06,930
then cloud configuration<font color="#E5E5E5"> D the</font><font color="#CCCCCC"> so-called</font>

124
00:06:03,400 --> 00:06:08,859
<font color="#E5E5E5">enrollment device enrollment daemon is</font>

125
00:06:06,930 --> 00:06:13,840
responsible for<font color="#E5E5E5"> communicating</font><font color="#CCCCCC"> with</font><font color="#E5E5E5"> the</font>

126
00:06:08,860 --> 00:06:16,300
DEP<font color="#E5E5E5"> API so I said I was going</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> talk</font>

127
00:06:13,840 --> 00:06:18,159
<font color="#E5E5E5">about activation records to give you an</font>

128
00:06:16,300 --> 00:06:21,190
<font color="#CCCCCC">idea of</font><font color="#E5E5E5"> what those look</font><font color="#CCCCCC"> like we you know</font>

129
00:06:18,159 --> 00:06:24,909
have a<font color="#CCCCCC"> screenshot here this is what is</font>

130
00:06:21,190 --> 00:06:28,659
returned by Apple as a JSON<font color="#E5E5E5"> blob</font><font color="#CCCCCC"> during</font>

131
00:06:24,909 --> 00:06:32,440
the DEP check-in process here shown in

132
00:06:28,659 --> 00:06:34,240
<font color="#E5E5E5">like a pretty printed format so you'll</font>

133
00:06:32,440 --> 00:06:37,100
notice one of<font color="#E5E5E5"> the things here is the</font><font color="#CCCCCC"> so</font>

134
00:06:34,240 --> 00:06:39,410
<font color="#CCCCCC">called configuration URL</font><font color="#E5E5E5"> this is the</font>

135
00:06:37,100 --> 00:06:42,110
URL of the MDM server<font color="#E5E5E5"> that's how the</font>

136
00:06:39,410 --> 00:06:44,330
device<font color="#CCCCCC"> is going</font><font color="#E5E5E5"> to know which MDM server</font>

137
00:06:42,110 --> 00:06:46,520
to communicate with in<font color="#E5E5E5"> addition to that</font>

138
00:06:44,330 --> 00:06:49,270
we've got<font color="#E5E5E5"> information about the</font>

139
00:06:46,520 --> 00:06:52,700
organization<font color="#CCCCCC"> that owns this device</font><font color="#E5E5E5"> so</font>

140
00:06:49,270 --> 00:06:58,190
the organization's<font color="#CCCCCC"> email support</font><font color="#E5E5E5"> phone</font>

141
00:06:52,700 --> 00:06:58,909
numbers<font color="#E5E5E5"> physical addresses and so on so</font>

142
00:06:58,190 --> 00:07:02,270
I'm going to<font color="#E5E5E5"> talk a little more about</font>

143
00:06:58,910 --> 00:07:04,370
<font color="#E5E5E5">activation records during this DEP</font>

144
00:07:02,270 --> 00:07:06,109
check-in process<font color="#E5E5E5"> the device is going</font><font color="#CCCCCC"> to</font>

145
00:07:04,370 --> 00:07:08,870
retrieve<font color="#E5E5E5"> this activation record from</font>

146
00:07:06,110 --> 00:07:11,600
<font color="#E5E5E5">this URL I</font><font color="#CCCCCC"> profile Apple</font><font color="#E5E5E5"> comm / Mac</font>

147
00:07:08,870 --> 00:07:14,840
profile the two functions that<font color="#E5E5E5"> are</font>

148
00:07:11,600 --> 00:07:17,120
<font color="#E5E5E5">responsible</font><font color="#CCCCCC"> for</font><font color="#E5E5E5"> this are CP fetch</font>

149
00:07:14,840 --> 00:07:20,030
activation record and CP get<font color="#E5E5E5"> activation</font>

150
00:07:17,120 --> 00:07:23,090
record<font color="#CCCCCC"> CP fetch activation record</font>

151
00:07:20,030 --> 00:07:24,799
actually retrieves the activation record

152
00:07:23,090 --> 00:07:27,260
<font color="#E5E5E5">over the</font><font color="#CCCCCC"> network and it delegates</font>

153
00:07:24,800 --> 00:07:29,150
<font color="#E5E5E5">control to cloud configuration D through</font>

154
00:07:27,260 --> 00:07:32,330
<font color="#CCCCCC">ex PC which</font><font color="#E5E5E5"> is an inter process</font>

155
00:07:29,150 --> 00:07:34,669
communication protocol defined by<font color="#E5E5E5"> Apple</font>

156
00:07:32,330 --> 00:07:37,010
and CP get<font color="#E5E5E5"> activation record just</font>

157
00:07:34,670 --> 00:07:38,630
retrieves it from the cache<font color="#E5E5E5"> both of</font>

158
00:07:37,010 --> 00:07:42,610
these functions<font color="#E5E5E5"> are present in the</font>

159
00:07:38,630 --> 00:07:45,469
private configuration profiles framework

160
00:07:42,610 --> 00:07:47,300
so I'm going<font color="#CCCCCC"> to talk about how devices</font>

161
00:07:45,470 --> 00:07:51,440
are authenticated<font color="#E5E5E5"> as part of this</font><font color="#CCCCCC"> DEP</font>

162
00:07:47,300 --> 00:07:53,420
check-in process<font color="#E5E5E5"> so the request payload</font>

163
00:07:51,440 --> 00:07:56,390
that<font color="#E5E5E5"> is sent to this Mac profile</font>

164
00:07:53,420 --> 00:07:59,630
<font color="#E5E5E5">endpoint is a</font><font color="#CCCCCC"> json dictionary containing</font>

165
00:07:56,390 --> 00:08:02,180
two key value pairs action which is<font color="#E5E5E5"> the</font>

166
00:07:59,630 --> 00:08:05,330
remote action to perform<font color="#CCCCCC"> and SN which is</font>

167
00:08:02,180 --> 00:08:07,100
the serial number this payload is

168
00:08:05,330 --> 00:08:09,130
<font color="#E5E5E5">encrypted using a scheme that's</font>

169
00:08:07,100 --> 00:08:11,810
internally referred to as absinthe<font color="#CCCCCC"> and</font>

170
00:08:09,130 --> 00:08:14,000
<font color="#CCCCCC">the serial number in this payload is</font>

171
00:08:11,810 --> 00:08:17,330
what determines which activation record

172
00:08:14,000 --> 00:08:19,610
<font color="#E5E5E5">is retrieved so I'll say that</font><font color="#CCCCCC"> again the</font>

173
00:08:17,330 --> 00:08:21,409
serial number in the payload is what

174
00:08:19,610 --> 00:08:23,390
determines which activation record is

175
00:08:21,410 --> 00:08:29,000
retrieved<font color="#E5E5E5"> not how the device was</font>

176
00:08:23,390 --> 00:08:31,250
authenticated so in this way<font color="#CCCCCC"> dep</font>

177
00:08:29,000 --> 00:08:32,809
effectively only<font color="#E5E5E5"> uses the system serial</font>

178
00:08:31,250 --> 00:08:35,690
number to authenticate prior<font color="#E5E5E5"> to</font>

179
00:08:32,809 --> 00:08:38,209
enrollment<font color="#E5E5E5"> so an attacker armed with</font>

180
00:08:35,690 --> 00:08:40,760
only a valid<font color="#E5E5E5"> dep registered serial</font>

181
00:08:38,210 --> 00:08:42,680
number<font color="#E5E5E5"> could potentially enroll a rogue</font>

182
00:08:40,760 --> 00:08:44,660
device in an<font color="#E5E5E5"> organisation's MDM server</font>

183
00:08:42,679 --> 00:08:48,829
<font color="#E5E5E5">or just glean</font><font color="#CCCCCC"> information from</font><font color="#E5E5E5"> that</font>

184
00:08:44,660 --> 00:08:50,959
activation record this can be easily

185
00:08:48,830 --> 00:08:54,560
verified by

186
00:08:50,960 --> 00:08:58,520
changing the<font color="#E5E5E5"> vmx file for example invert</font>

187
00:08:54,560 --> 00:09:00,130
<font color="#CCCCCC">VMware fusion to be that of a serial</font>

188
00:08:58,520 --> 00:09:03,680
number<font color="#E5E5E5"> that's</font><font color="#CCCCCC"> registered with DEP</font><font color="#E5E5E5"> this</font>

189
00:09:00,130 --> 00:09:05,380
<font color="#CCCCCC">was originally discovered by the pine</font>

190
00:09:03,680 --> 00:09:12,109
Brienne who I did<font color="#E5E5E5"> this research with</font>

191
00:09:05,380 --> 00:09:13,910
<font color="#E5E5E5">Victor of Ranchin and</font><font color="#CCCCCC"> Jesse Peterson so</font>

192
00:09:12,110 --> 00:09:15,650
I'm going to<font color="#CCCCCC"> talk about</font><font color="#E5E5E5"> our research</font>

193
00:09:13,910 --> 00:09:18,350
methodology so what were the<font color="#E5E5E5"> goals of</font>

194
00:09:15,650 --> 00:09:20,660
this<font color="#E5E5E5"> research so once we knew you know</font>

195
00:09:18,350 --> 00:09:25,190
<font color="#E5E5E5">that only the serial number is is</font>

196
00:09:20,660 --> 00:09:27,230
required or what is what is<font color="#E5E5E5"> used to</font>

197
00:09:25,190 --> 00:09:30,350
<font color="#E5E5E5">determine which activation profile or</font>

198
00:09:27,230 --> 00:09:32,810
activation<font color="#E5E5E5"> record we get back</font><font color="#CCCCCC"> we set out</font>

199
00:09:30,350 --> 00:09:35,210
a<font color="#CCCCCC"> weight you know wanted a way to</font><font color="#E5E5E5"> to</font>

200
00:09:32,810 --> 00:09:36,920
automate that so<font color="#E5E5E5"> our goals were to be</font>

201
00:09:35,210 --> 00:09:38,630
<font color="#CCCCCC">able</font><font color="#E5E5E5"> to insert any arbitrary serial</font>

202
00:09:36,920 --> 00:09:41,599
number during<font color="#E5E5E5"> the request for this</font>

203
00:09:38,630 --> 00:09:44,240
activation<font color="#E5E5E5"> record also</font><font color="#CCCCCC"> we wanted to</font>

204
00:09:41,600 --> 00:09:46,310
demonstrate<font color="#E5E5E5"> how it's possible to brute</font>

205
00:09:44,240 --> 00:09:49,660
force Apple serial numbers<font color="#E5E5E5"> which could</font>

206
00:09:46,310 --> 00:09:52,670
be checked against the DEP API in bulk

207
00:09:49,660 --> 00:09:54,199
we also wanted to<font color="#CCCCCC"> demonstrate how anyone</font>

208
00:09:52,670 --> 00:09:55,729
<font color="#E5E5E5">you know using these</font><font color="#CCCCCC"> methods can</font>

209
00:09:54,200 --> 00:09:58,430
determine which organizations<font color="#E5E5E5"> are using</font>

210
00:09:55,730 --> 00:10:00,170
<font color="#E5E5E5">DEP</font><font color="#CCCCCC"> and gleaned</font><font color="#E5E5E5"> information about them</font>

211
00:09:58,430 --> 00:10:04,040
<font color="#E5E5E5">like physical addresses phone numbers</font>

212
00:10:00,170 --> 00:10:06,349
<font color="#E5E5E5">and so on and lastly we wanted to</font>

213
00:10:04,040 --> 00:10:11,150
demonstrate<font color="#E5E5E5"> that rogue MDM enrollment is</font>

214
00:10:06,350 --> 00:10:13,670
possible using these<font color="#E5E5E5"> methods so as I</font>

215
00:10:11,150 --> 00:10:17,480
mentioned previously<font color="#CCCCCC"> changing the serial</font>

216
00:10:13,670 --> 00:10:20,390
number in VMware fusions vmx file<font color="#E5E5E5"> to be</font>

217
00:10:17,480 --> 00:10:24,680
that of a DEP registered serial number

218
00:10:20,390 --> 00:10:26,630
will<font color="#E5E5E5"> you know</font><font color="#CCCCCC"> confirm that that</font><font color="#E5E5E5"> is you</font>

219
00:10:24,680 --> 00:10:28,040
<font color="#E5E5E5">know the only the only piece</font><font color="#CCCCCC"> of</font>

220
00:10:26,630 --> 00:10:31,370
<font color="#E5E5E5">information that</font><font color="#CCCCCC"> determines what</font>

221
00:10:28,040 --> 00:10:34,520
activation profiles retrieved this<font color="#E5E5E5"> can</font>

222
00:10:31,370 --> 00:10:38,510
easily be<font color="#E5E5E5"> verified by using either the</font>

223
00:10:34,520 --> 00:10:41,689
<font color="#E5E5E5">MDM client or profiles binary to force a</font>

224
00:10:38,510 --> 00:10:43,700
<font color="#E5E5E5">DEP</font><font color="#CCCCCC"> check-in so on 10.13 dot through</font>

225
00:10:41,690 --> 00:10:47,060
your older you would use MDM client and

226
00:10:43,700 --> 00:10:50,330
<font color="#CCCCCC">unten dot 13.4 or later</font><font color="#E5E5E5"> you could use</font>

227
00:10:47,060 --> 00:10:51,949
profiles<font color="#E5E5E5"> it's worth noting that the</font>

228
00:10:50,330 --> 00:10:53,780
behavior<font color="#E5E5E5"> is a little different</font><font color="#CCCCCC"> here but</font>

229
00:10:51,950 --> 00:10:57,020
if you'd prefer<font color="#CCCCCC"> to use MDM client you</font>

230
00:10:53,780 --> 00:11:00,770
<font color="#CCCCCC">can simply copy that from a machine</font>

231
00:10:57,020 --> 00:11:01,930
<font color="#E5E5E5">running ten dot 13.3 or older and it's</font>

232
00:11:00,770 --> 00:11:03,400
you<font color="#CCCCCC"> know run it on</font>

233
00:11:01,930 --> 00:11:10,060
one of the newer machines<font color="#CCCCCC"> it works just</font>

234
00:11:03,400 --> 00:11:12,480
<font color="#E5E5E5">fine so the what MDM client will do when</font>

235
00:11:10,060 --> 00:11:15,430
<font color="#E5E5E5">you force a</font><font color="#CCCCCC"> DV check in</font><font color="#E5E5E5"> like this is</font>

236
00:11:12,480 --> 00:11:16,839
print a pretty printed activation record

237
00:11:15,430 --> 00:11:19,540
<font color="#CCCCCC">if the device</font><font color="#E5E5E5"> is serial number</font><font color="#CCCCCC"> is</font>

238
00:11:16,839 --> 00:11:22,779
registered<font color="#CCCCCC"> in</font><font color="#E5E5E5"> DEP or an empty activation</font>

239
00:11:19,540 --> 00:11:25,540
record if not<font color="#E5E5E5"> with profiles if you</font>

240
00:11:22,779 --> 00:11:27,460
enable MDM debug logging it'll write the

241
00:11:25,540 --> 00:11:30,730
activation record<font color="#E5E5E5"> to this log file at</font>

242
00:11:27,460 --> 00:11:33,640
manage client log additionally you'll

243
00:11:30,730 --> 00:11:35,920
see this<font color="#E5E5E5"> pop up on your on your Mac that</font>

244
00:11:33,640 --> 00:11:37,230
<font color="#E5E5E5">says this device can automatically</font>

245
00:11:35,920 --> 00:11:43,900
configure your Mac if it hasn't

246
00:11:37,230 --> 00:11:47,650
previously<font color="#E5E5E5"> completed so like I mentioned</font>

247
00:11:43,900 --> 00:11:50,110
<font color="#CCCCCC">earlier once once we knew that only the</font>

248
00:11:47,650 --> 00:11:51,010
serial number was<font color="#E5E5E5"> or the serial number</font>

249
00:11:50,110 --> 00:11:53,800
is all that's<font color="#E5E5E5"> required to</font><font color="#CCCCCC"> like</font>

250
00:11:51,010 --> 00:11:56,020
authenticate to<font color="#E5E5E5"> this DEP API we set out</font>

251
00:11:53,800 --> 00:11:59,229
to automate this process<font color="#CCCCCC"> and demonstrate</font>

252
00:11:56,020 --> 00:12:01,540
<font color="#CCCCCC">how an attacker</font><font color="#E5E5E5"> might you know use this</font>

253
00:11:59,230 --> 00:12:05,950
to retrieve<font color="#CCCCCC"> a activation records in bulk</font>

254
00:12:01,540 --> 00:12:07,990
<font color="#CCCCCC">so</font><font color="#E5E5E5"> we considered three approaches</font><font color="#CCCCCC"> we</font>

255
00:12:05,950 --> 00:12:10,240
could reverse<font color="#E5E5E5"> engineer the protocol</font>

256
00:12:07,990 --> 00:12:13,270
<font color="#E5E5E5">between cloud configure date cloud</font>

257
00:12:10,240 --> 00:12:15,940
configuration D and the DEP API which is

258
00:12:13,270 --> 00:12:17,380
internally referred to as Tesla<font color="#E5E5E5"> and</font><font color="#CCCCCC"> the</font>

259
00:12:15,940 --> 00:12:20,430
encryption<font color="#E5E5E5"> scheme which is internally</font>

260
00:12:17,380 --> 00:12:22,450
referred to as absinthe<font color="#CCCCCC"> we also</font>

261
00:12:20,430 --> 00:12:23,770
considered you know<font color="#E5E5E5"> if it was</font><font color="#CCCCCC"> possible</font>

262
00:12:22,450 --> 00:12:27,400
to<font color="#E5E5E5"> man in the middle</font><font color="#CCCCCC"> requests to I</font>

263
00:12:23,770 --> 00:12:29,020
<font color="#CCCCCC">profiles</font><font color="#E5E5E5"> Apple comm / Mac profile and</font>

264
00:12:27,400 --> 00:12:33,970
then finally instrument the binaries

265
00:12:29,020 --> 00:12:36,400
<font color="#CCCCCC">that directly interact with this API so</font>

266
00:12:33,970 --> 00:12:40,270
reverse engineering this Tesla protocol

267
00:12:36,400 --> 00:12:42,400
<font color="#E5E5E5">so you know the the cloud configuration</font>

268
00:12:40,270 --> 00:12:44,410
de binary will<font color="#E5E5E5"> request this activation</font>

269
00:12:42,400 --> 00:12:48,339
record which I mentioned previously

270
00:12:44,410 --> 00:12:52,360
contains these two<font color="#E5E5E5"> key value pairs the</font>

271
00:12:48,339 --> 00:12:54,580
action and serial number<font color="#E5E5E5"> the the payload</font>

272
00:12:52,360 --> 00:12:55,870
in this<font color="#E5E5E5"> request is encrypted</font><font color="#CCCCCC"> using a</font>

273
00:12:54,580 --> 00:12:59,680
scheme internally referred to as

274
00:12:55,870 --> 00:13:01,900
absinthe<font color="#E5E5E5"> and</font><font color="#CCCCCC"> as then base64 encoded and</font>

275
00:12:59,680 --> 00:13:06,069
<font color="#E5E5E5">used as</font><font color="#CCCCCC"> the request body</font><font color="#E5E5E5"> and an HTTP</font>

276
00:13:01,900 --> 00:13:07,839
POST<font color="#CCCCCC"> to that endpoint</font><font color="#E5E5E5"> in cloud</font>

277
00:13:06,070 --> 00:13:10,209
configuration<font color="#E5E5E5"> D fetching this activation</font>

278
00:13:07,839 --> 00:13:13,870
<font color="#E5E5E5">record is handled</font><font color="#CCCCCC"> by</font><font color="#E5E5E5"> the MC Tesla</font>

279
00:13:10,209 --> 00:13:17,859
configure configuration fetcher class

280
00:13:13,870 --> 00:13:20,080
so the general flow<font color="#CCCCCC"> of MC Tesla</font>

281
00:13:17,860 --> 00:13:25,000
configuration<font color="#E5E5E5"> fetcher and enter state is</font>

282
00:13:20,080 --> 00:13:28,270
listed here<font color="#CCCCCC"> we explored</font><font color="#E5E5E5"> each of these</font>

283
00:13:25,000 --> 00:13:30,880
you know methods<font color="#CCCCCC"> somewhat deeply but</font>

284
00:13:28,270 --> 00:13:32,350
ultimately it just led us further down

285
00:13:30,880 --> 00:13:34,090
<font color="#E5E5E5">the</font><font color="#CCCCCC"> rabbit hole</font><font color="#E5E5E5"> and we decided to</font>

286
00:13:32,350 --> 00:13:36,010
<font color="#E5E5E5">explore other methods of being able to</font>

287
00:13:34,090 --> 00:13:44,470
<font color="#E5E5E5">modify the serial number that</font><font color="#CCCCCC"> is</font>

288
00:13:36,010 --> 00:13:46,540
<font color="#E5E5E5">presented to</font><font color="#CCCCCC"> the DEP API so the</font><font color="#E5E5E5"> the next</font>

289
00:13:44,470 --> 00:13:51,250
<font color="#E5E5E5">approach that we considered was men in</font>

290
00:13:46,540 --> 00:13:53,500
the<font color="#E5E5E5"> middle requests to the DEP API</font><font color="#CCCCCC"> the</font>

291
00:13:51,250 --> 00:13:55,990
cloud configuration<font color="#CCCCCC"> d-does</font><font color="#E5E5E5"> certificate</font>

292
00:13:53,500 --> 00:13:59,950
pinning<font color="#E5E5E5"> but we</font><font color="#CCCCCC"> found</font><font color="#E5E5E5"> that this can you</font>

293
00:13:55,990 --> 00:14:02,470
<font color="#E5E5E5">know pretty</font><font color="#CCCCCC"> easily be</font><font color="#E5E5E5"> you know changed</font>

294
00:13:59,950 --> 00:14:10,060
by flipping the MC cloud config<font color="#CCCCCC"> except</font>

295
00:14:02,470 --> 00:14:11,680
any<font color="#E5E5E5"> HTTP certificate flag to true but</font>

296
00:14:10,060 --> 00:14:13,689
like<font color="#E5E5E5"> I mentioned earlier this this</font>

297
00:14:11,680 --> 00:14:17,560
payload is<font color="#CCCCCC"> encrypted</font><font color="#E5E5E5"> so it wasn't</font>

298
00:14:13,690 --> 00:14:19,660
feasible to to modify it<font color="#E5E5E5"> before it's</font>

299
00:14:17,560 --> 00:14:26,040
actually<font color="#E5E5E5"> sent to the API</font><font color="#CCCCCC"> without having</font>

300
00:14:19,660 --> 00:14:29,439
the keys<font color="#E5E5E5"> use required to to decrypt it</font>

301
00:14:26,040 --> 00:14:30,969
<font color="#E5E5E5">so lastly we looked</font><font color="#CCCCCC"> into instrumenting</font>

302
00:14:29,440 --> 00:14:34,690
<font color="#CCCCCC">the system binaries that</font><font color="#E5E5E5"> directly</font>

303
00:14:30,970 --> 00:14:36,340
interact with<font color="#CCCCCC"> dep api this has the</font>

304
00:14:34,690 --> 00:14:39,730
benefit of being<font color="#CCCCCC"> able to</font><font color="#E5E5E5"> leverage the</font>

305
00:14:36,340 --> 00:14:41,560
existing<font color="#E5E5E5"> flow or infrastructure and with</font>

306
00:14:39,730 --> 00:14:44,230
with<font color="#E5E5E5"> just adding</font><font color="#CCCCCC"> our own little bit of</font>

307
00:14:41,560 --> 00:14:48,550
<font color="#CCCCCC">functionality</font><font color="#E5E5E5"> right</font><font color="#CCCCCC"> before</font><font color="#E5E5E5"> that the</font>

308
00:14:44,230 --> 00:14:50,560
payload is signed<font color="#CCCCCC"> it's worth noting that</font>

309
00:14:48,550 --> 00:14:52,479
<font color="#CCCCCC">for this</font><font color="#E5E5E5"> to work because cloud</font>

310
00:14:50,560 --> 00:14:54,900
configuration<font color="#CCCCCC"> D is a protected binary</font>

311
00:14:52,480 --> 00:14:57,850
under system<font color="#CCCCCC"> integrity protection</font><font color="#E5E5E5"> or sip</font>

312
00:14:54,900 --> 00:15:00,370
that<font color="#E5E5E5"> it needs to be disabled we</font>

313
00:14:57,850 --> 00:15:02,320
recommend doing this on a non-critical

314
00:15:00,370 --> 00:15:07,780
virtual machine because<font color="#E5E5E5"> sip is actually</font>

315
00:15:02,320 --> 00:15:10,840
a pretty<font color="#CCCCCC"> useful security feature</font><font color="#E5E5E5"> so with</font>

316
00:15:07,780 --> 00:15:13,990
SIP disabled we can attach to<font color="#E5E5E5"> cloud</font>

317
00:15:10,840 --> 00:15:15,550
configuration D with<font color="#CCCCCC"> LL DB you'll</font><font color="#E5E5E5"> notice</font>

318
00:15:13,990 --> 00:15:17,260
<font color="#E5E5E5">that we need to use sudo because cloud</font>

319
00:15:15,550 --> 00:15:19,810
configuration D requires elevated

320
00:15:17,260 --> 00:15:23,640
privileges<font color="#E5E5E5"> then we can just wait for the</font>

321
00:15:19,810 --> 00:15:27,250
cloud configuration<font color="#E5E5E5"> D process</font><font color="#CCCCCC"> to attach</font>

322
00:15:23,640 --> 00:15:27,699
so while we're<font color="#CCCCCC"> waiting we can enforce</font>

323
00:15:27,250 --> 00:15:31,720
the

324
00:15:27,700 --> 00:15:33,790
<font color="#E5E5E5">DEP</font><font color="#CCCCCC"> check in in order to force odd</font>

325
00:15:31,720 --> 00:15:41,260
configuration<font color="#CCCCCC"> D to attach and then</font><font color="#E5E5E5"> begin</font>

326
00:15:33,790 --> 00:15:43,810
our debugging<font color="#E5E5E5"> session so one</font><font color="#CCCCCC"> of the you</font>

327
00:15:41,260 --> 00:15:45,310
know first things we wanted<font color="#E5E5E5"> to</font><font color="#CCCCCC"> do you</font>

328
00:15:43,810 --> 00:15:47,979
know<font color="#E5E5E5"> once we have this debugging</font>

329
00:15:45,310 --> 00:15:49,959
infrastructure<font color="#CCCCCC"> set up is</font><font color="#E5E5E5"> look into how</font>

330
00:15:47,980 --> 00:15:52,620
<font color="#E5E5E5">we could just</font><font color="#CCCCCC"> modify the serial number</font>

331
00:15:49,960 --> 00:15:55,510
that's<font color="#E5E5E5"> returned from the IO registry</font>

332
00:15:52,620 --> 00:15:57,460
<font color="#CCCCCC">this is you know</font><font color="#E5E5E5"> done in cloud</font>

333
00:15:55,510 --> 00:15:58,990
configuration D and as<font color="#E5E5E5"> far</font><font color="#CCCCCC"> as we know</font>

334
00:15:57,460 --> 00:16:01,510
that's the<font color="#CCCCCC"> serial number</font><font color="#E5E5E5"> that's sent</font><font color="#CCCCCC"> to</font>

335
00:15:58,990 --> 00:16:03,610
<font color="#E5E5E5">the DEP API</font><font color="#CCCCCC"> so we thought if we</font><font color="#E5E5E5"> could</font>

336
00:16:01,510 --> 00:16:09,069
modify that then it would change what is

337
00:16:03,610 --> 00:16:10,990
sent to in that payload so we were able

338
00:16:09,070 --> 00:16:13,360
<font color="#CCCCCC">to</font><font color="#E5E5E5"> modify the serial number retrieved</font>

339
00:16:10,990 --> 00:16:15,460
from the IO registry<font color="#E5E5E5"> by initially</font>

340
00:16:13,360 --> 00:16:18,280
setting<font color="#E5E5E5"> a breakpoint for IO service get</font>

341
00:16:15,460 --> 00:16:19,980
matching service<font color="#E5E5E5"> then we</font><font color="#CCCCCC"> then</font><font color="#E5E5E5"> created a</font>

342
00:16:18,280 --> 00:16:22,360
new string variable containing<font color="#E5E5E5"> an</font>

343
00:16:19,980 --> 00:16:24,130
arbitrary serial number and<font color="#E5E5E5"> then</font><font color="#CCCCCC"> just</font>

344
00:16:22,360 --> 00:16:28,840
modified the register to point to that

345
00:16:24,130 --> 00:16:30,610
<font color="#E5E5E5">variable recreated so this can</font><font color="#CCCCCC"> be seen</font>

346
00:16:28,840 --> 00:16:33,490
<font color="#CCCCCC">in this</font><font color="#E5E5E5"> listing here we set a</font><font color="#CCCCCC"> breakpoint</font>

347
00:16:30,610 --> 00:16:35,380
for IO service get matching service wait

348
00:16:33,490 --> 00:16:37,840
for the cloud configuration<font color="#E5E5E5"> D process to</font>

349
00:16:35,380 --> 00:16:38,950
attach continue and then just step

350
00:16:37,840 --> 00:16:42,090
through<font color="#E5E5E5"> the execution of the program</font>

351
00:16:38,950 --> 00:16:45,250
<font color="#E5E5E5">until we can see that the r14 register</font>

352
00:16:42,090 --> 00:16:47,380
<font color="#E5E5E5">you know contains our serial number then</font>

353
00:16:45,250 --> 00:16:50,140
we<font color="#E5E5E5"> just create a new serial number and</font>

354
00:16:47,380 --> 00:16:54,430
then<font color="#E5E5E5"> write the register to point to that</font>

355
00:16:50,140 --> 00:16:56,790
new variable<font color="#E5E5E5"> but unfortunately for</font>

356
00:16:54,430 --> 00:16:59,349
<font color="#CCCCCC">whatever reason this didn't actually</font>

357
00:16:56,790 --> 00:17:02,620
<font color="#E5E5E5">modify the payload that is sent to</font><font color="#CCCCCC"> that</font>

358
00:16:59,350 --> 00:17:06,640
back profile<font color="#CCCCCC"> endpoint but you</font><font color="#E5E5E5"> know</font>

359
00:17:02,620 --> 00:17:10,210
something did<font color="#E5E5E5"> so I'll talk</font><font color="#CCCCCC"> about what</font>

360
00:17:06,640 --> 00:17:12,760
what actually worked<font color="#E5E5E5"> so once you</font><font color="#CCCCCC"> know</font>

361
00:17:10,210 --> 00:17:15,520
that<font color="#E5E5E5"> initial process failed we</font><font color="#CCCCCC"> looked to</font>

362
00:17:12,760 --> 00:17:17,980
find the closest point where the serial

363
00:17:15,520 --> 00:17:20,500
number is still in plain text<font color="#E5E5E5"> before it</font>

364
00:17:17,980 --> 00:17:23,620
<font color="#E5E5E5">gets signed</font><font color="#CCCCCC"> it appeared that the best</font>

365
00:17:20,500 --> 00:17:25,300
<font color="#E5E5E5">place to look was this MC Tesla config</font>

366
00:17:23,619 --> 00:17:28,060
configuration<font color="#E5E5E5"> fetcher start</font>

367
00:17:25,300 --> 00:17:30,520
configuration fetch<font color="#E5E5E5"> method which does</font>

368
00:17:28,060 --> 00:17:33,370
the<font color="#CCCCCC"> following</font><font color="#E5E5E5"> and it creates a new NS</font>

369
00:17:30,520 --> 00:17:35,560
mutable data object<font color="#E5E5E5"> calls this set</font>

370
00:17:33,370 --> 00:17:39,459
<font color="#CCCCCC">configuration data method passing at the</font>

371
00:17:35,560 --> 00:17:40,360
new NS mutable data object<font color="#CCCCCC"> calls this</font>

372
00:17:39,460 --> 00:17:43,750
profile

373
00:17:40,360 --> 00:17:45,428
Qwest<font color="#E5E5E5"> dictionary which returns that that</font>

374
00:17:43,750 --> 00:17:48,220
<font color="#E5E5E5">dictionary that contains those two keys</font>

375
00:17:45,429 --> 00:17:51,669
<font color="#CCCCCC">that we've seen earlier it then</font>

376
00:17:48,220 --> 00:17:55,049
serializes this<font color="#E5E5E5"> dictionary to</font><font color="#CCCCCC"> JSON</font><font color="#E5E5E5"> signs</font>

377
00:17:51,669 --> 00:17:57,010
the JSON payload base64 encode zit and

378
00:17:55,049 --> 00:17:59,590
then does a bunch<font color="#E5E5E5"> of other stuff like</font>

379
00:17:57,010 --> 00:18:04,120
sets the HTTP header to<font color="#E5E5E5"> post sets the</font>

380
00:17:59,590 --> 00:18:07,029
body<font color="#E5E5E5"> to the base64 encoded payload sets</font>

381
00:18:04,120 --> 00:18:09,309
some<font color="#E5E5E5"> profile some HTTP headers</font><font color="#CCCCCC"> like</font><font color="#E5E5E5"> X</font>

382
00:18:07,029 --> 00:18:11,769
profile protocol<font color="#E5E5E5"> versions is set to 1</font>

383
00:18:09,309 --> 00:18:15,460
and<font color="#CCCCCC"> the user agent is set to config</font>

384
00:18:11,769 --> 00:18:19,330
client 1.0 finally it's going<font color="#CCCCCC"> to use</font>

385
00:18:15,460 --> 00:18:24,909
<font color="#CCCCCC">anis URL connection</font><font color="#E5E5E5"> to perform the HTTP</font>

386
00:18:19,330 --> 00:18:27,220
<font color="#E5E5E5">request so understanding this flow</font><font color="#CCCCCC"> of</font>

387
00:18:24,909 --> 00:18:29,470
the MCU<font color="#CCCCCC"> Tesla configuration fetcher</font>

388
00:18:27,220 --> 00:18:31,990
start configuration fetch this allowed

389
00:18:29,470 --> 00:18:33,909
us<font color="#E5E5E5"> to modify the dictionary containing</font>

390
00:18:31,990 --> 00:18:37,690
that profile request<font color="#E5E5E5"> before it's</font>

391
00:18:33,909 --> 00:18:39,370
ultimately converted<font color="#E5E5E5"> to JSON so to do</font>

392
00:18:37,690 --> 00:18:43,690
this we set a<font color="#E5E5E5"> breakpoint for data with</font>

393
00:18:39,370 --> 00:18:46,120
JSON object so as you'll see in<font color="#E5E5E5"> this</font>

394
00:18:43,690 --> 00:18:49,539
listing we set the break point for<font color="#E5E5E5"> the</font>

395
00:18:46,120 --> 00:18:52,268
regex data with JSON object<font color="#CCCCCC"> wait for</font>

396
00:18:49,539 --> 00:18:55,299
cloud configuration<font color="#CCCCCC"> D to attach</font><font color="#E5E5E5"> continue</font>

397
00:18:52,269 --> 00:18:58,110
the execution<font color="#CCCCCC"> and then we create a</font><font color="#E5E5E5"> new</font>

398
00:18:55,299 --> 00:19:00,519
<font color="#E5E5E5">NS dictionary object in memory</font>

399
00:18:58,110 --> 00:19:02,740
<font color="#E5E5E5">containing both the this you know it's</font>

400
00:19:00,519 --> 00:19:04,929
that it's<font color="#E5E5E5"> that payload that gets sent to</font>

401
00:19:02,740 --> 00:19:07,330
the<font color="#E5E5E5"> neck profile endpoint so an</font>

402
00:19:04,929 --> 00:19:08,769
<font color="#E5E5E5">arbitrary serial number and then we just</font>

403
00:19:07,330 --> 00:19:13,769
<font color="#E5E5E5">update</font><font color="#CCCCCC"> the register</font><font color="#E5E5E5"> to point to that</font>

404
00:19:08,769 --> 00:19:16,779
that NS dictionary<font color="#E5E5E5"> and that worked so</font>

405
00:19:13,769 --> 00:19:18,610
<font color="#E5E5E5">with just</font><font color="#CCCCCC"> a few l DB</font><font color="#E5E5E5"> commands we were</font>

406
00:19:16,779 --> 00:19:20,919
<font color="#CCCCCC">able to insert an arbitrary serial</font>

407
00:19:18,610 --> 00:19:22,809
number and get that<font color="#E5E5E5"> serial numbers'</font>

408
00:19:20,919 --> 00:19:25,720
activation record back not<font color="#CCCCCC"> the serial</font>

409
00:19:22,809 --> 00:19:27,460
number of<font color="#E5E5E5"> the</font><font color="#CCCCCC"> Mac we were using so as</font>

410
00:19:25,720 --> 00:19:33,309
you can<font color="#E5E5E5"> see here</font><font color="#CCCCCC"> the you know we have</font>

411
00:19:27,460 --> 00:19:36,130
someone else's activation record so one

412
00:19:33,309 --> 00:19:38,950
more<font color="#CCCCCC"> thing though you know I think Steve</font>

413
00:19:36,130 --> 00:19:42,490
<font color="#CCCCCC">Jobs said it best l DB</font><font color="#E5E5E5"> Python interface</font>

414
00:19:38,950 --> 00:19:45,000
<font color="#CCCCCC">these are</font><font color="#E5E5E5"> not three separate things</font><font color="#CCCCCC"> no</font>

415
00:19:42,490 --> 00:19:47,799
not really<font color="#E5E5E5"> but once we had the initial</font>

416
00:19:45,000 --> 00:19:49,600
<font color="#E5E5E5">proof of concept we wanted to show how</font>

417
00:19:47,799 --> 00:19:53,200
<font color="#CCCCCC">we could automate</font><font color="#E5E5E5"> this</font>

418
00:19:49,600 --> 00:19:55,719
fortunately the ll DB API is avail

419
00:19:53,200 --> 00:19:58,480
in<font color="#E5E5E5"> Python</font><font color="#CCCCCC"> through this</font><font color="#E5E5E5"> script original</font>

420
00:19:55,720 --> 00:20:00,610
<font color="#E5E5E5">interface which is installed by default</font>

421
00:19:58,480 --> 00:20:03,309
<font color="#E5E5E5">if you have the Xcode developer tools</font>

422
00:20:00,610 --> 00:20:04,928
installed so it<font color="#E5E5E5"> may</font><font color="#CCCCCC"> that made it</font>

423
00:20:03,309 --> 00:20:06,700
relatively easy to just<font color="#CCCCCC"> write a script</font>

424
00:20:04,929 --> 00:20:09,370
<font color="#CCCCCC">that takes</font><font color="#E5E5E5"> a list of serial numbers</font><font color="#CCCCCC"> and</font>

425
00:20:06,700 --> 00:20:12,820
then<font color="#E5E5E5"> in you know injects them into cloud</font>

426
00:20:09,370 --> 00:20:17,709
configuration<font color="#CCCCCC"> D</font><font color="#E5E5E5"> to check for the digit</font>

427
00:20:12,820 --> 00:20:19,539
DEP profile<font color="#E5E5E5"> or activation record so next</font>

428
00:20:17,710 --> 00:20:22,000
I'm going<font color="#E5E5E5"> to talk</font><font color="#CCCCCC"> about Apple serial</font>

429
00:20:19,539 --> 00:20:25,510
numbers because we<font color="#CCCCCC"> think you know it's</font>

430
00:20:22,000 --> 00:20:31,539
important to understand how how easily

431
00:20:25,510 --> 00:20:33,100
these can be<font color="#CCCCCC"> brute force so what</font><font color="#E5E5E5"> what</font>

432
00:20:31,539 --> 00:20:34,840
you<font color="#CCCCCC"> know</font><font color="#E5E5E5"> the this</font><font color="#CCCCCC"> is an example of an</font>

433
00:20:33,100 --> 00:20:37,059
<font color="#CCCCCC">Apple serial number it's you know just a</font>

434
00:20:34,840 --> 00:20:39,610
string of<font color="#E5E5E5"> letters and</font><font color="#CCCCCC"> numbers but</font>

435
00:20:37,059 --> 00:20:44,320
<font color="#CCCCCC">through this research we we were able to</font>

436
00:20:39,610 --> 00:20:45,639
demonstrate that the how easily Apple

437
00:20:44,320 --> 00:20:47,649
device serial<font color="#E5E5E5"> numbers can be brute</font>

438
00:20:45,639 --> 00:20:49,269
forced so there's<font color="#CCCCCC"> actually enough</font>

439
00:20:47,649 --> 00:20:50,620
information<font color="#E5E5E5"> in the serial number to</font>

440
00:20:49,269 --> 00:20:52,510
limit the search space<font color="#E5E5E5"> pretty</font>

441
00:20:50,620 --> 00:20:54,279
significantly<font color="#CCCCCC"> which would increase the</font>

442
00:20:52,510 --> 00:20:56,230
<font color="#CCCCCC">speed with which an attacker could</font>

443
00:20:54,279 --> 00:20:59,200
generate serial numbers and then check

444
00:20:56,230 --> 00:21:03,970
<font color="#E5E5E5">the DEP API</font><font color="#CCCCCC"> for the</font><font color="#E5E5E5"> activation records</font>

445
00:20:59,200 --> 00:21:05,740
in<font color="#E5E5E5"> bulk</font><font color="#CCCCCC"> so what would this allow an</font>

446
00:21:03,970 --> 00:21:07,299
attacker to do so if they're able to

447
00:21:05,740 --> 00:21:10,269
<font color="#E5E5E5">brute force these serial numbers</font><font color="#CCCCCC"> and</font>

448
00:21:07,299 --> 00:21:12,460
leveraging<font color="#E5E5E5"> this exploit it's feasible</font>

449
00:21:10,269 --> 00:21:14,919
<font color="#E5E5E5">that an attacker could determine exactly</font>

450
00:21:12,460 --> 00:21:17,470
which Apple customers are<font color="#E5E5E5"> using the</font>

451
00:21:14,919 --> 00:21:19,929
device<font color="#E5E5E5"> enrollment program</font><font color="#CCCCCC"> build the data</font>

452
00:21:17,470 --> 00:21:21,960
set mapping the serial number<font color="#E5E5E5"> to the</font>

453
00:21:19,929 --> 00:21:24,130
organization<font color="#E5E5E5"> that owns the device or</font>

454
00:21:21,960 --> 00:21:26,460
build a data set mapping the serial

455
00:21:24,130 --> 00:21:29,470
number<font color="#E5E5E5"> to the complete activation record</font>

456
00:21:26,460 --> 00:21:31,899
or you know we think it's feasible<font color="#CCCCCC"> that</font>

457
00:21:29,470 --> 00:21:36,490
an attacker could<font color="#E5E5E5"> use this information</font>

458
00:21:31,899 --> 00:21:37,779
to<font color="#CCCCCC"> further target organizations</font><font color="#E5E5E5"> so</font><font color="#CCCCCC"> let</font>

459
00:21:36,490 --> 00:21:40,600
<font color="#CCCCCC">me</font><font color="#E5E5E5"> talk a little</font><font color="#CCCCCC"> bit about the serial</font>

460
00:21:37,779 --> 00:21:42,519
number format that<font color="#E5E5E5"> Apple uses Apple</font>

461
00:21:40,600 --> 00:21:45,189
serial numbers use a<font color="#CCCCCC"> twelve character</font>

462
00:21:42,519 --> 00:21:46,659
format to have the following five

463
00:21:45,190 --> 00:21:49,120
components<font color="#E5E5E5"> it's it's worth noting that</font>

464
00:21:46,659 --> 00:21:51,700
<font color="#CCCCCC">11 character serial numbers also</font><font color="#E5E5E5"> exist</font>

465
00:21:49,120 --> 00:21:54,250
<font color="#E5E5E5">but these are used on older older</font><font color="#CCCCCC"> Apple</font>

466
00:21:51,700 --> 00:21:56,950
devices so with the 12 character serial

467
00:21:54,250 --> 00:21:58,750
numbers we have a plant code<font color="#E5E5E5"> the year it</font>

468
00:21:56,950 --> 00:22:02,049
was<font color="#E5E5E5"> manufactured the week it was</font>

469
00:21:58,750 --> 00:22:05,740
<font color="#CCCCCC">manufactured a unique unit code and then</font>

470
00:22:02,049 --> 00:22:08,260
the device model identifier so

471
00:22:05,740 --> 00:22:11,799
the plant code is the first part it's

472
00:22:08,260 --> 00:22:14,440
<font color="#CCCCCC">three bytes</font><font color="#E5E5E5"> at position zero</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> the</font>

473
00:22:11,799 --> 00:22:17,350
<font color="#E5E5E5">only known plant code on Mac devices is</font>

474
00:22:14,440 --> 00:22:19,360
<font color="#E5E5E5">c02</font><font color="#CCCCCC"> but we don't know how many plant</font>

475
00:22:17,350 --> 00:22:20,799
codes exist<font color="#E5E5E5"> for all their devices</font><font color="#CCCCCC"> on iOS</font>

476
00:22:19,360 --> 00:22:24,729
devices for example<font color="#CCCCCC"> there are many plant</font>

477
00:22:20,799 --> 00:22:27,908
codes<font color="#CCCCCC"> the year of manufacture is one</font>

478
00:22:24,730 --> 00:22:32,500
byte at position<font color="#CCCCCC"> three</font><font color="#E5E5E5"> and uses the</font>

479
00:22:27,909 --> 00:22:36,029
range listed below<font color="#CCCCCC"> bowels and</font><font color="#E5E5E5"> the</font>

480
00:22:32,500 --> 00:22:38,770
character<font color="#E5E5E5"> B are removed from that range</font>

481
00:22:36,029 --> 00:22:40,240
additionally each year has two possible

482
00:22:38,770 --> 00:22:43,270
characters<font color="#CCCCCC"> associated with it that</font>

483
00:22:40,240 --> 00:22:46,659
<font color="#E5E5E5">correspond to the early or late moniker</font>

484
00:22:43,270 --> 00:22:49,779
<font color="#E5E5E5">sometimes used in Apple product names so</font>

485
00:22:46,659 --> 00:22:52,210
the the epoch associated with<font color="#E5E5E5"> this</font>

486
00:22:49,779 --> 00:22:55,000
numbering scheme starts with C which

487
00:22:52,210 --> 00:22:59,260
represents<font color="#CCCCCC"> early 2010 all the way up to</font>

488
00:22:55,000 --> 00:23:02,529
<font color="#CCCCCC">Z representing late 2019 so we don't yet</font>

489
00:22:59,260 --> 00:23:04,270
<font color="#E5E5E5">know</font><font color="#CCCCCC"> what will</font><font color="#E5E5E5"> happen in</font><font color="#CCCCCC"> 28 20 if Apple</font>

490
00:23:02,529 --> 00:23:10,240
will roll that<font color="#E5E5E5"> over or just stop making</font>

491
00:23:04,270 --> 00:23:13,029
computers and iPhones<font color="#CCCCCC"> and we'll see next</font>

492
00:23:10,240 --> 00:23:15,370
we have the week of<font color="#E5E5E5"> manufacture the this</font>

493
00:23:13,029 --> 00:23:16,750
<font color="#E5E5E5">is denoted per half year if the code is</font>

494
00:23:15,370 --> 00:23:19,570
<font color="#CCCCCC">in the second half of the year</font><font color="#E5E5E5"> it</font>

495
00:23:16,750 --> 00:23:21,880
indicates an offset from<font color="#E5E5E5"> the 27th week</font>

496
00:23:19,570 --> 00:23:26,559
of the year and it<font color="#CCCCCC"> uses a single byte in</font>

497
00:23:21,880 --> 00:23:29,909
the<font color="#E5E5E5"> following range</font><font color="#CCCCCC"> similar to the year</font>

498
00:23:26,559 --> 00:23:33,940
<font color="#E5E5E5">of</font><font color="#CCCCCC"> manufacturer the week of manufacturer</font>

499
00:23:29,909 --> 00:23:35,830
removes or omits the<font color="#E5E5E5"> characters BS y&z</font>

500
00:23:33,940 --> 00:23:37,600
it's not documented<font color="#CCCCCC"> why but it makes</font>

501
00:23:35,830 --> 00:23:40,000
<font color="#CCCCCC">sense</font><font color="#E5E5E5"> or stands to reason that</font><font color="#CCCCCC"> you know</font>

502
00:23:37,600 --> 00:23:44,320
this is<font color="#E5E5E5"> because they're visually similar</font>

503
00:23:40,000 --> 00:23:46,899
<font color="#E5E5E5">to other characters next we have a unit</font>

504
00:23:44,320 --> 00:23:49,029
code this is<font color="#E5E5E5"> three bytes at position 5</font>

505
00:23:46,899 --> 00:23:52,270
and it's unique<font color="#CCCCCC"> to each</font><font color="#E5E5E5"> device within</font>

506
00:23:49,029 --> 00:23:56,350
<font color="#CCCCCC">its</font><font color="#E5E5E5"> model year week of manufacture and</font>

507
00:23:52,270 --> 00:23:59,230
<font color="#E5E5E5">plant code so this is the</font><font color="#CCCCCC"> biggest source</font>

508
00:23:56,350 --> 00:24:01,510
<font color="#E5E5E5">of entropy in Apple serial numbers it's</font>

509
00:23:59,230 --> 00:24:08,799
a base<font color="#E5E5E5"> 36 scheme and it uses the range</font>

510
00:24:01,510 --> 00:24:10,419
listed below<font color="#E5E5E5"> so there are six thousand</font>

511
00:24:08,799 --> 00:24:13,570
six<font color="#E5E5E5"> hundred and</font><font color="#CCCCCC"> fifty-six</font><font color="#E5E5E5"> possible</font>

512
00:24:10,419 --> 00:24:16,899
values<font color="#E5E5E5"> within that range that I</font>

513
00:24:13,570 --> 00:24:19,570
mentioned earlier<font color="#CCCCCC"> next we have the</font>

514
00:24:16,899 --> 00:24:23,830
device model identifier

515
00:24:19,570 --> 00:24:25,810
<font color="#CCCCCC">which</font><font color="#E5E5E5"> is a four byte</font><font color="#CCCCCC"> ID</font><font color="#E5E5E5"> that is created</font>

516
00:24:23,830 --> 00:24:28,030
from<font color="#CCCCCC"> a</font><font color="#E5E5E5"> finite set of codes that Apple</font>

517
00:24:25,810 --> 00:24:30,700
maintains for their further<font color="#E5E5E5"> hardware</font>

518
00:24:28,030 --> 00:24:33,670
models<font color="#CCCCCC"> they're the most comprehensive</font>

519
00:24:30,700 --> 00:24:37,090
source of these IDs that<font color="#CCCCCC"> we found is on</font>

520
00:24:33,670 --> 00:24:39,040
<font color="#CCCCCC">piker alphas github repository he has</font>

521
00:24:37,090 --> 00:24:42,790
those all listed there<font color="#CCCCCC"> or most of them</font>

522
00:24:39,040 --> 00:24:44,200
<font color="#E5E5E5">not all of</font><font color="#CCCCCC"> them so knowing that</font><font color="#E5E5E5"> we can</font>

523
00:24:42,790 --> 00:24:47,860
break<font color="#CCCCCC"> apart the serial number I showed</font>

524
00:24:44,200 --> 00:24:49,960
<font color="#CCCCCC">earlier we have the plant code</font><font color="#E5E5E5"> we can</font>

525
00:24:47,860 --> 00:24:54,570
<font color="#CCCCCC">see that it was manufactured</font><font color="#E5E5E5"> during the</font>

526
00:24:49,960 --> 00:24:57,370
second<font color="#CCCCCC"> half of 2016 the 48 week of 2016</font>

527
00:24:54,570 --> 00:24:59,770
<font color="#CCCCCC">we see this</font><font color="#E5E5E5"> unique unit code and then</font>

528
00:24:57,370 --> 00:25:02,679
the<font color="#E5E5E5"> model the model</font><font color="#CCCCCC"> associated with that</font>

529
00:24:59,770 --> 00:25:05,620
<font color="#CCCCCC">that ID which is</font><font color="#E5E5E5"> for the</font><font color="#CCCCCC"> MacBook</font><font color="#E5E5E5"> Pro 13</font>

530
00:25:02,680 --> 00:25:10,300
<font color="#CCCCCC">inch 2016 for Thunderbolt 3 ports</font><font color="#E5E5E5"> and</font>

531
00:25:05,620 --> 00:25:11,979
yes<font color="#E5E5E5"> that's the real product name so next</font>

532
00:25:10,300 --> 00:25:15,879
<font color="#CCCCCC">time to</font><font color="#E5E5E5"> talk</font><font color="#CCCCCC"> about the</font><font color="#E5E5E5"> impact of some of</font>

533
00:25:11,980 --> 00:25:17,950
this research so we basically see<font color="#E5E5E5"> two</font>

534
00:25:15,880 --> 00:25:19,570
you know two<font color="#CCCCCC"> scenarios where you</font><font color="#E5E5E5"> know</font>

535
00:25:17,950 --> 00:25:21,880
where this could be leveraged<font color="#CCCCCC"> by an</font>

536
00:25:19,570 --> 00:25:25,929
attacker<font color="#CCCCCC"> to expose sensitive information</font>

537
00:25:21,880 --> 00:25:28,620
about<font color="#E5E5E5"> an organization initially just</font>

538
00:25:25,930 --> 00:25:31,600
<font color="#E5E5E5">obtaining the DEP activation record</font>

539
00:25:28,620 --> 00:25:33,699
couldn't allow an attacker to to just

540
00:25:31,600 --> 00:25:35,139
<font color="#E5E5E5">build up a data set</font><font color="#CCCCCC"> or you know just</font>

541
00:25:33,700 --> 00:25:37,090
expose<font color="#CCCCCC"> information about the</font>

542
00:25:35,140 --> 00:25:42,010
organization that<font color="#CCCCCC"> owns a particular</font>

543
00:25:37,090 --> 00:25:43,840
device<font color="#CCCCCC"> next</font><font color="#E5E5E5"> it's it's you know it's</font>

544
00:25:42,010 --> 00:25:46,540
feasible depending on the<font color="#CCCCCC"> configuration</font>

545
00:25:43,840 --> 00:25:50,669
of the MDM server that an attacker could

546
00:25:46,540 --> 00:25:52,990
perform<font color="#E5E5E5"> a rogue MDM in enrollment so</font>

547
00:25:50,670 --> 00:25:57,550
basically like stealing<font color="#CCCCCC"> the</font><font color="#E5E5E5"> identity of</font>

548
00:25:52,990 --> 00:26:02,530
<font color="#E5E5E5">a corporate device so the information</font>

549
00:25:57,550 --> 00:26:04,570
disclosure issue is you know<font color="#E5E5E5"> we see that</font>

550
00:26:02,530 --> 00:26:07,480
you<font color="#E5E5E5"> know it's</font><font color="#CCCCCC"> possible that you know</font><font color="#E5E5E5"> an</font>

551
00:26:04,570 --> 00:26:08,860
attacker could use this<font color="#E5E5E5"> you know the</font>

552
00:26:07,480 --> 00:26:11,050
information<font color="#CCCCCC"> retrieved from the DEP</font>

553
00:26:08,860 --> 00:26:13,449
activation record in combination with

554
00:26:11,050 --> 00:26:15,419
the serial<font color="#E5E5E5"> number to aid in social</font>

555
00:26:13,450 --> 00:26:17,710
engineering attacks such<font color="#CCCCCC"> as like calling</font>

556
00:26:15,420 --> 00:26:21,100
the<font color="#E5E5E5"> helpdesk and asking for</font><font color="#CCCCCC"> password</font>

557
00:26:17,710 --> 00:26:25,420
resets<font color="#E5E5E5"> or you know help installing some</font>

558
00:26:21,100 --> 00:26:29,620
software or<font color="#CCCCCC"> you know who knows next the</font>

559
00:26:25,420 --> 00:26:31,900
rogue<font color="#E5E5E5"> DEP an MDM enrollment so the MDM</font>

560
00:26:29,620 --> 00:26:32,418
protocol provided by<font color="#CCCCCC"> Apple</font><font color="#E5E5E5"> supports but</font>

561
00:26:31,900 --> 00:26:34,399
<font color="#E5E5E5">it doesn't</font>

562
00:26:32,419 --> 00:26:36,619
<font color="#CCCCCC">acquire</font><font color="#E5E5E5"> authentication as part of the</font>

563
00:26:34,399 --> 00:26:39,889
enrollment<font color="#CCCCCC"> process so that means without</font>

564
00:26:36,619 --> 00:26:41,859
any<font color="#E5E5E5"> additional protections all that</font>

565
00:26:39,889 --> 00:26:44,600
would<font color="#E5E5E5"> be required</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> enroll a device in</font>

566
00:26:41,859 --> 00:26:46,730
you know<font color="#E5E5E5"> in a company's MDM server would</font>

567
00:26:44,600 --> 00:26:52,879
be this<font color="#E5E5E5"> you know the serial number of</font>

568
00:26:46,730 --> 00:26:55,100
the<font color="#CCCCCC"> device once enrolled you know a lot</font>

569
00:26:52,879 --> 00:26:56,299
of<font color="#E5E5E5"> a lot</font><font color="#CCCCCC"> of things could</font><font color="#E5E5E5"> be deployed by</font>

570
00:26:55,100 --> 00:26:58,340
<font color="#CCCCCC">the MDM server</font>

571
00:26:56,299 --> 00:27:01,720
you know the configuration profiles

572
00:26:58,340 --> 00:27:04,129
<font color="#E5E5E5">which are delivered</font><font color="#CCCCCC"> via</font><font color="#E5E5E5"> the MDM protocol</font>

573
00:27:01,720 --> 00:27:06,759
<font color="#CCCCCC">contains support for delivering VPN</font>

574
00:27:04,129 --> 00:27:13,189
configuration data Wi-Fi<font color="#E5E5E5"> passwords</font>

575
00:27:06,759 --> 00:27:15,559
certificates private keys<font color="#CCCCCC"> you name</font><font color="#E5E5E5"> it so</font>

576
00:27:13,190 --> 00:27:18,889
<font color="#E5E5E5">next I'm going to talk</font><font color="#CCCCCC"> about</font><font color="#E5E5E5"> mitigation</font>

577
00:27:15,559 --> 00:27:21,499
so we think<font color="#CCCCCC"> there you know a couple</font><font color="#E5E5E5"> of</font>

578
00:27:18,889 --> 00:27:25,820
<font color="#E5E5E5">things</font><font color="#CCCCCC"> that</font><font color="#E5E5E5"> Apple could do to mitigate</font>

579
00:27:21,499 --> 00:27:27,259
<font color="#E5E5E5">this this issue</font><font color="#CCCCCC"> one</font><font color="#E5E5E5"> of the you know one</font>

580
00:27:25,820 --> 00:27:29,480
thing<font color="#E5E5E5"> that we think would be possible is</font>

581
00:27:27,259 --> 00:27:32,359
leveraging<font color="#E5E5E5"> the unique ID that</font><font color="#CCCCCC"> is</font>

582
00:27:29,480 --> 00:27:34,730
generated in the secure Enclave<font color="#E5E5E5"> on the</font>

583
00:27:32,359 --> 00:27:39,139
t1 and t2 chips this<font color="#E5E5E5"> is</font><font color="#CCCCCC"> also present on</font>

584
00:27:34,730 --> 00:27:43,220
iOS devices<font color="#CCCCCC"> so it's worth noting though</font>

585
00:27:39,139 --> 00:27:45,799
<font color="#E5E5E5">that this may not be feasible until the</font>

586
00:27:43,220 --> 00:27:49,940
until every Mac device contains one of

587
00:27:45,799 --> 00:27:51,739
<font color="#E5E5E5">these coprocessors additionally we found</font>

588
00:27:49,940 --> 00:27:54,859
no evidence of strict rate limiting on

589
00:27:51,739 --> 00:27:57,529
this Mac profile<font color="#CCCCCC"> endpoint this could be</font>

590
00:27:54,859 --> 00:28:00,199
because it<font color="#CCCCCC"> might be difficult for</font><font color="#E5E5E5"> Apple</font>

591
00:27:57,529 --> 00:28:02,269
to distinguish between<font color="#CCCCCC"> let's</font><font color="#E5E5E5"> say you</font>

592
00:28:00,200 --> 00:28:04,879
know an attacker hammering the DEP API

593
00:28:02,269 --> 00:28:07,730
or an organization that<font color="#CCCCCC"> just</font><font color="#E5E5E5"> bought a</font>

594
00:28:04,879 --> 00:28:11,439
thousand<font color="#CCCCCC"> Macs and is enrolling them all</font>

595
00:28:07,730 --> 00:28:11,440
at once behind<font color="#E5E5E5"> the same NAT router</font>

596
00:28:12,409 --> 00:28:16,519
additionally we found that although this

597
00:28:14,600 --> 00:28:18,529
<font color="#CCCCCC">endpoint is called Mac profile it will</font>

598
00:28:16,519 --> 00:28:20,659
happily accept iOS serial numbers and

599
00:28:18,529 --> 00:28:24,409
retrieve the activation record of<font color="#E5E5E5"> iOS</font>

600
00:28:20,659 --> 00:28:27,169
devices that you submit<font color="#CCCCCC"> to it</font>

601
00:28:24,409 --> 00:28:29,629
lastly<font color="#E5E5E5"> we think requiring strong</font>

602
00:28:27,169 --> 00:28:31,909
authentication prior to the<font color="#E5E5E5"> DEP</font>

603
00:28:29,629 --> 00:28:36,139
enrollment happening would mitigate<font color="#E5E5E5"> this</font>

604
00:28:31,909 --> 00:28:38,389
as well<font color="#E5E5E5"> so there are also things that</font>

605
00:28:36,139 --> 00:28:41,539
<font color="#CCCCCC">customers can do that are</font><font color="#E5E5E5"> leveraging DEP</font>

606
00:28:38,389 --> 00:28:43,008
and MDM<font color="#CCCCCC"> you know regardless</font><font color="#E5E5E5"> of some of</font>

607
00:28:41,539 --> 00:28:46,160
these are<font color="#E5E5E5"> the risks outlined in this</font>

608
00:28:43,009 --> 00:28:48,380
talk<font color="#E5E5E5"> so like I said earlier the MD</font>

609
00:28:46,160 --> 00:28:52,400
protocol supports user authentication<font color="#E5E5E5"> so</font>

610
00:28:48,380 --> 00:28:56,780
if possible turn that on<font color="#CCCCCC"> um and in</font>

611
00:28:52,400 --> 00:28:59,210
<font color="#E5E5E5">addition we we think that just because</font><font color="#CCCCCC"> a</font>

612
00:28:56,780 --> 00:29:01,570
device is enrolled in MDM doesn't

613
00:28:59,210 --> 00:29:04,700
shouldn't afford it any additional

614
00:29:01,570 --> 00:29:06,860
<font color="#E5E5E5">privilege within your</font><font color="#CCCCCC"> network</font><font color="#E5E5E5"> so require</font>

615
00:29:04,700 --> 00:29:08,510
strong user authentication<font color="#CCCCCC"> post</font>

616
00:29:06,860 --> 00:29:11,870
<font color="#E5E5E5">deployment before sending down like any</font>

617
00:29:08,510 --> 00:29:13,790
sensitive<font color="#E5E5E5"> information</font><font color="#CCCCCC"> and also</font><font color="#E5E5E5"> Apple</font>

618
00:29:11,870 --> 00:29:14,989
documents these best practices in the

619
00:29:13,790 --> 00:29:21,620
Apple<font color="#E5E5E5"> business manager help</font>

620
00:29:14,990 --> 00:29:25,100
documentation so moving<font color="#E5E5E5"> under</font><font color="#CCCCCC"> the</font>

621
00:29:21,620 --> 00:29:27,469
conclusion so it's it's also worth

622
00:29:25,100 --> 00:29:28,760
noting that<font color="#E5E5E5"> DEP still provides value</font>

623
00:29:27,470 --> 00:29:32,660
we're not telling<font color="#CCCCCC"> people that you</font>

624
00:29:28,760 --> 00:29:35,240
shouldn't<font color="#CCCCCC"> use DEP or MDM because we</font>

625
00:29:32,660 --> 00:29:37,480
think that<font color="#E5E5E5"> the benefit of having</font>

626
00:29:35,240 --> 00:29:39,770
securely manage you<font color="#E5E5E5"> know manage devices</font>

627
00:29:37,480 --> 00:29:43,550
outweighs some of the inherent<font color="#E5E5E5"> risks in</font>

628
00:29:39,770 --> 00:29:44,870
how DEP authentication works<font color="#CCCCCC"> also Apple</font>

629
00:29:43,550 --> 00:29:47,659
could be doing<font color="#E5E5E5"> more</font><font color="#CCCCCC"> to strongly</font>

630
00:29:44,870 --> 00:29:49,399
authenticate devices but it might<font color="#CCCCCC"> take</font>

631
00:29:47,660 --> 00:29:51,080
time for<font color="#CCCCCC"> this to become fully realized</font>

632
00:29:49,400 --> 00:29:55,780
for example like with device attestation

633
00:29:51,080 --> 00:29:59,090
<font color="#CCCCCC">that that might require a new hardware</font>

634
00:29:55,780 --> 00:30:00,770
<font color="#E5E5E5">last</font><font color="#CCCCCC"> or next don't treat devices as</font>

635
00:29:59,090 --> 00:30:03,649
trusted just because they're enrolled in

636
00:30:00,770 --> 00:30:06,200
MDM<font color="#E5E5E5"> you know require strong</font>

637
00:30:03,650 --> 00:30:08,300
authentication<font color="#CCCCCC"> post</font><font color="#E5E5E5"> MDM enrollment</font>

638
00:30:06,200 --> 00:30:12,320
before sending a sensitive configuration

639
00:30:08,300 --> 00:30:14,720
data and then lastly<font color="#E5E5E5"> if possible you</font>

640
00:30:12,320 --> 00:30:20,379
know<font color="#E5E5E5"> enable a user authentication as</font>

641
00:30:14,720 --> 00:30:23,270
part of your MDM enrollment process so

642
00:30:20,380 --> 00:30:24,560
this is the disclosure<font color="#E5E5E5"> timeline starting</font>

643
00:30:23,270 --> 00:30:26,420
<font color="#E5E5E5">with when we initially discovered</font><font color="#CCCCCC"> this</font>

644
00:30:24,560 --> 00:30:28,940
<font color="#E5E5E5">authentication weakness and reported it</font>

645
00:30:26,420 --> 00:30:33,610
to<font color="#E5E5E5"> Apple</font><font color="#CCCCCC"> leading up to the research</font>

646
00:30:28,940 --> 00:30:36,890
being published I also want to thank

647
00:30:33,610 --> 00:30:39,530
Jesse and all<font color="#CCCCCC"> Mac's</font><font color="#E5E5E5"> Belanger</font><font color="#CCCCCC"> Victor</font>

648
00:30:36,890 --> 00:30:41,120
<font color="#E5E5E5">Ranchin Jesse Peters and Jesse Peterson</font>

649
00:30:39,530 --> 00:30:43,310
<font color="#E5E5E5">for their contributions to the Mac</font>

650
00:30:41,120 --> 00:30:46,129
<font color="#E5E5E5">security community and specifically</font>

651
00:30:43,310 --> 00:30:47,750
their DEP and MDM research as well as

652
00:30:46,130 --> 00:30:51,920
<font color="#E5E5E5">piker alpha for documenting so much</font>

653
00:30:47,750 --> 00:30:52,620
about the Apple serial number format and

654
00:30:51,920 --> 00:30:59,400
that's it

655
00:30:52,620 --> 00:30:59,399
[Applause]

