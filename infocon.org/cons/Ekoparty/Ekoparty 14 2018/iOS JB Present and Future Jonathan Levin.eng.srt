1
00:00:00,000 --> 00:00:06,210
<font color="#CCCCCC">I owe a s jb % and future</font>

2
00:00:03,959 --> 00:00:08,010
<font color="#CCCCCC">jonathan levine ponder a la carta sobre</font>

3
00:00:06,210 --> 00:00:10,710
la mesa sobre lo sistema de seguridad en

4
00:00:08,010 --> 00:00:12,269
el sistema<font color="#CCCCCC"> parity vios de Appel sobre</font>

5
00:00:10,710 --> 00:00:14,820
como<font color="#CCCCCC"> fueron evolution ando la who</font>

6
00:00:12,269 --> 00:00:17,130
<font color="#CCCCCC">maravilla dades para Laura Nancy J</font>

7
00:00:14,820 --> 00:00:22,250
working<font color="#E5E5E5"> he saw the</font><font color="#CCCCCC"> key perfect Eva's I</font>

8
00:00:17,130 --> 00:00:25,830
saw<font color="#CCCCCC"> AJ breaking massage</font><font color="#E5E5E5"> on Elias 12 okay</font>

9
00:00:22,250 --> 00:00:28,109
so what he said<font color="#CCCCCC"> okay people</font>

10
00:00:25,830 --> 00:00:31,169
<font color="#E5E5E5">thank you for coming I know it's early</font>

11
00:00:28,109 --> 00:00:32,520
on Thursday<font color="#E5E5E5"> morning just</font><font color="#CCCCCC"> before we start</font>

12
00:00:31,170 --> 00:00:34,680
I'm wondering how many<font color="#CCCCCC"> people here have</font>

13
00:00:32,520 --> 00:00:39,930
<font color="#E5E5E5">jailbroken their device at</font><font color="#CCCCCC"> any given</font>

14
00:00:34,680 --> 00:00:41,790
point so for those people<font color="#CCCCCC"> who have some</font>

15
00:00:39,930 --> 00:00:44,460
good news<font color="#CCCCCC"> and some bad news as we're</font>

16
00:00:41,790 --> 00:00:45,719
going<font color="#CCCCCC"> to be discussing</font><font color="#E5E5E5"> effectively what</font>

17
00:00:44,460 --> 00:00:48,480
jailbreaking is and more<font color="#E5E5E5"> importantly</font>

18
00:00:45,719 --> 00:00:51,000
<font color="#CCCCCC">what Apple is doing and trying really</font>

19
00:00:48,480 --> 00:00:53,459
really<font color="#E5E5E5"> really hard to</font><font color="#CCCCCC"> prevent this the</font>

20
00:00:51,000 --> 00:00:56,100
topic of this talk<font color="#CCCCCC"> is</font><font color="#E5E5E5"> basically a review</font>

21
00:00:53,460 --> 00:00:58,170
of jailbreaking up to the present point

22
00:00:56,100 --> 00:01:01,289
<font color="#E5E5E5">which is going to be very quick and then</font>

23
00:00:58,170 --> 00:01:02,699
primarily<font color="#E5E5E5"> focusing on the many defenses</font>

24
00:01:01,289 --> 00:01:05,909
and<font color="#E5E5E5"> the many changes that are coming</font>

25
00:01:02,699 --> 00:01:08,700
not just with iOS 12 but also the actual

26
00:01:05,909 --> 00:01:10,409
<font color="#CCCCCC">hardware changes that Apple</font><font color="#E5E5E5"> really don't</font>

27
00:01:08,700 --> 00:01:12,840
bother documenting or telling you about

28
00:01:10,409 --> 00:01:16,920
<font color="#E5E5E5">now as you all know jail breaks have</font>

29
00:01:12,840 --> 00:01:18,390
been pretty<font color="#E5E5E5"> much since iOS 1.0 people as</font>

30
00:01:16,920 --> 00:01:20,970
<font color="#E5E5E5">soon as they realized what an amazing</font>

31
00:01:18,390 --> 00:01:23,250
device an iPhone<font color="#E5E5E5"> is they realized</font>

32
00:01:20,970 --> 00:01:25,380
effectively that people like<font color="#CCCCCC"> to think</font><font color="#E5E5E5"> of</font>

33
00:01:23,250 --> 00:01:26,880
it as a mobile phone<font color="#CCCCCC"> but it's</font><font color="#E5E5E5"> not really</font>

34
00:01:25,380 --> 00:01:29,670
a mobile phone it's a mobile<font color="#E5E5E5"> computer</font>

35
00:01:26,880 --> 00:01:31,560
generally speaking<font color="#E5E5E5"> iOS or what they</font>

36
00:01:29,670 --> 00:01:34,170
called it back then iPhone OS and Mac OS

37
00:01:31,560 --> 00:01:36,390
are effectively<font color="#E5E5E5"> the</font><font color="#CCCCCC"> same system we're</font>

38
00:01:34,170 --> 00:01:37,799
looking at a full<font color="#E5E5E5"> operating system that</font>

39
00:01:36,390 --> 00:01:40,590
can do multitasking<font color="#CCCCCC"> that</font><font color="#E5E5E5"> can run</font>

40
00:01:37,799 --> 00:01:42,930
<font color="#CCCCCC">applications that can</font><font color="#E5E5E5"> of course run SSH</font>

41
00:01:40,590 --> 00:01:45,030
and people want<font color="#E5E5E5"> to</font><font color="#CCCCCC"> liberate the I</font>

42
00:01:42,930 --> 00:01:47,490
devices to<font color="#E5E5E5"> get all that functionality</font>

43
00:01:45,030 --> 00:01:50,310
<font color="#CCCCCC">and</font><font color="#E5E5E5"> of course over time it's not</font><font color="#CCCCCC"> just</font>

44
00:01:47,490 --> 00:01:52,679
been iOS there's now various flavors of

45
00:01:50,310 --> 00:01:54,930
<font color="#E5E5E5">iOS there's iOS on the iPhone and the</font>

46
00:01:52,680 --> 00:01:57,060
<font color="#E5E5E5">iPad</font><font color="#CCCCCC"> but</font><font color="#E5E5E5"> we also have the TV OS we also</font>

47
00:01:54,930 --> 00:01:59,640
have the watch OS we also have the home

48
00:01:57,060 --> 00:02:01,710
<font color="#CCCCCC">pada</font><font color="#E5E5E5"> West which actually runs on the</font>

49
00:01:59,640 --> 00:02:05,310
little speaker<font color="#E5E5E5"> that nobody buys they</font>

50
00:02:01,710 --> 00:02:07,949
have the actual iOS running and there's

51
00:02:05,310 --> 00:02:10,259
<font color="#CCCCCC">also surprisingly</font><font color="#E5E5E5"> in the Mac OS touch</font>

52
00:02:07,950 --> 00:02:11,569
bar and even in some<font color="#E5E5E5"> embedded devices</font>

53
00:02:10,258 --> 00:02:15,290
that Apple uses<font color="#CCCCCC"> the</font>

54
00:02:11,569 --> 00:02:18,798
the<font color="#E5E5E5"> HDMI</font><font color="#CCCCCC"> adapter</font><font color="#E5E5E5"> that they do if you</font>

55
00:02:15,290 --> 00:02:20,840
have a Mac or an iPhone<font color="#E5E5E5"> lightning to</font>

56
00:02:18,799 --> 00:02:23,450
HDMI that actually runs a<font color="#CCCCCC"> smalls new</font>

57
00:02:20,840 --> 00:02:25,670
kernel inside<font color="#E5E5E5"> now</font><font color="#CCCCCC"> originally jailbreaks</font>

58
00:02:23,450 --> 00:02:27,798
were very simple back in the day when

59
00:02:25,670 --> 00:02:29,689
<font color="#E5E5E5">iPhone was first developed nobody</font>

60
00:02:27,799 --> 00:02:32,180
actually<font color="#E5E5E5"> believed in Apple that would be</font>

61
00:02:29,689 --> 00:02:32,780
<font color="#CCCCCC">jailbroken</font><font color="#E5E5E5"> and then the first jailbreak</font>

62
00:02:32,180 --> 00:02:35,480
happened

63
00:02:32,780 --> 00:02:37,519
<font color="#E5E5E5">Apple learned from it</font><font color="#CCCCCC"> literally</font><font color="#E5E5E5"> learned</font>

64
00:02:35,480 --> 00:02:39,319
from it as<font color="#E5E5E5"> that probably helped them</font>

65
00:02:37,519 --> 00:02:41,209
<font color="#E5E5E5">with the idea</font><font color="#CCCCCC"> of the</font><font color="#E5E5E5"> App Store</font><font color="#CCCCCC"> the idea</font>

66
00:02:39,319 --> 00:02:44,060
of running third-party apps and then

67
00:02:41,209 --> 00:02:44,659
following that<font color="#E5E5E5"> tried to harden as much</font>

68
00:02:44,060 --> 00:02:47,389
as they could

69
00:02:44,659 --> 00:02:48,769
<font color="#CCCCCC">the jailbreaking process and since then</font>

70
00:02:47,389 --> 00:02:50,989
it's<font color="#E5E5E5"> been pretty much</font><font color="#CCCCCC"> a</font><font color="#E5E5E5"> cat and mouse</font>

71
00:02:48,769 --> 00:02:53,569
<font color="#E5E5E5">game</font><font color="#CCCCCC"> now if you look at the timeline</font>

72
00:02:50,989 --> 00:02:57,049
over<font color="#CCCCCC"> here you'll see that</font><font color="#E5E5E5"> really it goes</font>

73
00:02:53,569 --> 00:02:58,760
<font color="#E5E5E5">back</font><font color="#CCCCCC"> a long long time ago to actually</font>

74
00:02:57,049 --> 00:02:59,419
<font color="#E5E5E5">even</font><font color="#CCCCCC"> before I start but as far as</font><font color="#E5E5E5"> I'm</font>

75
00:02:58,760 --> 00:03:02,060
concerned

76
00:02:59,419 --> 00:03:04,519
iOS starts being manageable<font color="#E5E5E5"> and usable</font>

77
00:03:02,060 --> 00:03:06,590
around<font color="#E5E5E5"> iOS version 3 and so you have</font>

78
00:03:04,519 --> 00:03:08,480
here since<font color="#CCCCCC"> version 3.2</font><font color="#E5E5E5"> and if you</font>

79
00:03:06,590 --> 00:03:11,719
remember<font color="#E5E5E5"> back in the days it was as</font>

80
00:03:08,480 --> 00:03:13,129
simple as jailbreak me<font color="#E5E5E5"> where comics was</font>

81
00:03:11,719 --> 00:03:14,719
the first one to do<font color="#CCCCCC"> this they had a</font>

82
00:03:13,129 --> 00:03:16,578
little website<font color="#E5E5E5"> you'd</font><font color="#CCCCCC"> click</font><font color="#E5E5E5"> on the</font>

83
00:03:14,719 --> 00:03:18,590
<font color="#CCCCCC">website on a little</font><font color="#E5E5E5"> Lincoln</font><font color="#CCCCCC"> your your</font>

84
00:03:16,579 --> 00:03:20,449
jailbroken<font color="#CCCCCC"> it was</font><font color="#E5E5E5"> really that easy and</font>

85
00:03:18,590 --> 00:03:22,459
at that<font color="#E5E5E5"> point it was that easy because</font>

86
00:03:20,449 --> 00:03:24,949
really<font color="#E5E5E5"> there was no</font><font color="#CCCCCC"> need to touch the</font>

87
00:03:22,459 --> 00:03:26,629
<font color="#E5E5E5">kernel there was no need to actually do</font>

88
00:03:24,949 --> 00:03:29,209
anything<font color="#E5E5E5"> besides get a little bit of</font>

89
00:03:26,629 --> 00:03:31,548
root access<font color="#E5E5E5"> and the main defense that</font>

90
00:03:29,209 --> 00:03:33,349
<font color="#CCCCCC">jailbreakers are trying to get</font><font color="#E5E5E5"> by which</font>

91
00:03:31,549 --> 00:03:35,810
is<font color="#E5E5E5"> code signing which enables them to</font>

92
00:03:33,349 --> 00:03:38,238
<font color="#E5E5E5">run applications outside what Apple</font>

93
00:03:35,810 --> 00:03:40,549
allows was easy because<font color="#E5E5E5"> they could just</font>

94
00:03:38,239 --> 00:03:42,979
figure<font color="#CCCCCC"> out</font><font color="#E5E5E5"> what what they call a</font><font color="#CCCCCC"> Cisco</font>

95
00:03:40,549 --> 00:03:45,019
<font color="#E5E5E5">doll this is control and just</font><font color="#CCCCCC"> toggle a</font>

96
00:03:42,979 --> 00:03:47,389
variable in kernel mode<font color="#E5E5E5"> from user</font><font color="#CCCCCC"> space</font>

97
00:03:45,019 --> 00:03:49,879
<font color="#E5E5E5">without having</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> go into kernel the</font>

98
00:03:47,389 --> 00:03:53,030
first major change<font color="#CCCCCC"> was in iOS 5</font><font color="#E5E5E5"> where in</font>

99
00:03:49,879 --> 00:03:55,129
iOS<font color="#CCCCCC"> 5 obviously they started hardening</font>

100
00:03:53,030 --> 00:03:56,989
this stuff and that's when we saw

101
00:03:55,129 --> 00:03:58,969
<font color="#CCCCCC">jailbreaks going also</font><font color="#E5E5E5"> into kernel mode</font>

102
00:03:56,989 --> 00:04:01,009
and then of course Apple steps of the

103
00:03:58,969 --> 00:04:04,009
<font color="#E5E5E5">defenses and</font><font color="#CCCCCC"> the first defense was in</font>

104
00:04:01,009 --> 00:04:05,509
iOS 6 which is<font color="#E5E5E5"> called</font><font color="#CCCCCC"> ksl are now</font><font color="#E5E5E5"> a</font><font color="#CCCCCC"> SLR</font>

105
00:04:04,009 --> 00:04:07,779
in general is a concept<font color="#E5E5E5"> that now</font>

106
00:04:05,509 --> 00:04:10,069
everybody<font color="#E5E5E5"> uses in all operating systems</font>

107
00:04:07,780 --> 00:04:11,840
<font color="#CCCCCC">Apple</font><font color="#E5E5E5"> was actually one of the first to</font>

108
00:04:10,069 --> 00:04:14,298
use<font color="#CCCCCC"> it in kernel mode and that was the</font>

109
00:04:11,840 --> 00:04:17,120
<font color="#E5E5E5">so-called</font><font color="#CCCCCC"> KS LR kernel address space</font>

110
00:04:14,299 --> 00:04:19,400
<font color="#CCCCCC">layout randomization the basic idea you</font>

111
00:04:17,120 --> 00:04:21,019
take the kernel you just slide it by

112
00:04:19,399 --> 00:04:24,529
some type of<font color="#E5E5E5"> value which is usually</font>

113
00:04:21,019 --> 00:04:25,280
around<font color="#CCCCCC"> like 20 to 24 bits</font><font color="#E5E5E5"> so if you have</font>

114
00:04:24,529 --> 00:04:27,500
any

115
00:04:25,280 --> 00:04:29,869
type of exploitable situation<font color="#E5E5E5"> at least</font>

116
00:04:27,500 --> 00:04:32,210
<font color="#CCCCCC">in theory the attacker doesn't know</font>

117
00:04:29,870 --> 00:04:34,490
where they're<font color="#CCCCCC"> going to</font><font color="#E5E5E5"> get their robbed</font>

118
00:04:32,210 --> 00:04:36,770
or their code execution<font color="#CCCCCC"> in which case of</font>

119
00:04:34,490 --> 00:04:39,740
<font color="#CCCCCC">course the you</font><font color="#E5E5E5"> basically substitute</font>

120
00:04:36,770 --> 00:04:42,889
panic<font color="#E5E5E5"> for</font><font color="#CCCCCC"> a code execution now of</font><font color="#E5E5E5"> course</font>

121
00:04:39,740 --> 00:04:45,650
this was a welcome change<font color="#CCCCCC"> and also what</font>

122
00:04:42,889 --> 00:04:47,810
they tried to do in<font color="#E5E5E5"> 32-bit is use an arm</font>

123
00:04:45,650 --> 00:04:50,090
feature of snap which is secure mode

124
00:04:47,810 --> 00:04:52,490
access prevention which surprisingly

125
00:04:50,090 --> 00:04:55,190
<font color="#E5E5E5">didn't get</font><font color="#CCCCCC"> into</font><font color="#E5E5E5"> 64 bit until way way way</font>

126
00:04:52,490 --> 00:04:56,600
later<font color="#E5E5E5"> but then that of</font><font color="#CCCCCC"> course still was</font>

127
00:04:55,190 --> 00:04:58,880
not enough because<font color="#E5E5E5"> we could find</font>

128
00:04:56,600 --> 00:05:01,010
<font color="#CCCCCC">information leaks information</font><font color="#E5E5E5"> leaks or</font>

129
00:04:58,880 --> 00:05:03,440
cases where<font color="#CCCCCC"> a</font><font color="#E5E5E5"> system call or some type</font>

130
00:05:01,010 --> 00:05:06,289
of<font color="#E5E5E5"> driver call basically leaks</font>

131
00:05:03,440 --> 00:05:09,650
information<font color="#E5E5E5"> because it provides for you</font>

132
00:05:06,290 --> 00:05:12,290
some type of<font color="#E5E5E5"> data from the kernel which</font>

133
00:05:09,650 --> 00:05:14,090
is<font color="#E5E5E5"> supposed to be a proper data you know</font>

134
00:05:12,290 --> 00:05:16,640
some type<font color="#CCCCCC"> of system called return value</font>

135
00:05:14,090 --> 00:05:18,890
or system<font color="#E5E5E5"> call buffer but it copies too</font>

136
00:05:16,640 --> 00:05:21,469
much or it uses uninitialized memory and

137
00:05:18,890 --> 00:05:24,229
so that was used and is<font color="#E5E5E5"> still</font><font color="#CCCCCC"> used</font><font color="#E5E5E5"> today</font>

138
00:05:21,470 --> 00:05:27,979
<font color="#E5E5E5">to defeat case</font><font color="#CCCCCC"> lore in many many ways</font>

139
00:05:24,229 --> 00:05:29,630
<font color="#CCCCCC">then</font><font color="#E5E5E5"> Apple realized that they have to</font>

140
00:05:27,979 --> 00:05:32,990
<font color="#E5E5E5">change their entire model and the very</font>

141
00:05:29,630 --> 00:05:35,120
first<font color="#E5E5E5"> I guess fundamental landscape</font>

142
00:05:32,990 --> 00:05:36,950
shift that<font color="#E5E5E5"> they had was when they</font>

143
00:05:35,120 --> 00:05:39,520
introduced entitlements and if you're

144
00:05:36,950 --> 00:05:41,419
familiar with iOS and Mac OS

145
00:05:39,520 --> 00:05:43,430
entitlements are the basic like

146
00:05:41,419 --> 00:05:45,320
declarative security if you're more<font color="#E5E5E5"> of</font>

147
00:05:43,430 --> 00:05:47,630
an Android<font color="#E5E5E5"> person think that every</font>

148
00:05:45,320 --> 00:05:49,969
<font color="#E5E5E5">Android app has their own like manifest</font>

149
00:05:47,630 --> 00:05:51,940
and permissions<font color="#E5E5E5"> basically same idea</font><font color="#CCCCCC"> but</font>

150
00:05:49,970 --> 00:05:54,830
<font color="#CCCCCC">instead of putting it in some</font><font color="#E5E5E5"> type of</font>

151
00:05:51,940 --> 00:05:56,539
manifest XML<font color="#CCCCCC"> we put it</font><font color="#E5E5E5"> inside the code</font>

152
00:05:54,830 --> 00:05:59,270
signature and so they put in

153
00:05:56,539 --> 00:06:01,700
entitlements<font color="#E5E5E5"> and then following that</font>

154
00:05:59,270 --> 00:06:03,590
<font color="#CCCCCC">came</font><font color="#E5E5E5"> another landmark change which</font>

155
00:06:01,700 --> 00:06:05,599
affects us to this day which is<font color="#CCCCCC"> kpp</font>

156
00:06:03,590 --> 00:06:07,820
which we will<font color="#E5E5E5"> talk about</font><font color="#CCCCCC"> and this kpp is</font>

157
00:06:05,600 --> 00:06:10,640
<font color="#CCCCCC">a</font><font color="#E5E5E5"> so-called kernel patch protection and</font>

158
00:06:07,820 --> 00:06:13,099
if you have an iPhone device effectively

159
00:06:10,640 --> 00:06:15,260
<font color="#E5E5E5">from iOS 9 and later then you know that</font>

160
00:06:13,100 --> 00:06:15,919
<font color="#E5E5E5">this is one of the main hurdles to</font>

161
00:06:15,260 --> 00:06:17,900
jailbreaking

162
00:06:15,919 --> 00:06:20,150
however it's<font color="#E5E5E5"> only a hurdle and hurdles</font>

163
00:06:17,900 --> 00:06:23,960
can be bypassed<font color="#CCCCCC"> and this was repeatedly</font>

164
00:06:20,150 --> 00:06:25,549
bypassed<font color="#E5E5E5"> until around iOS 10 things</font>

165
00:06:23,960 --> 00:06:28,070
started to<font color="#E5E5E5"> really change as Apple</font>

166
00:06:25,550 --> 00:06:30,380
shifted towards what we now see<font color="#CCCCCC"> our</font>

167
00:06:28,070 --> 00:06:32,360
<font color="#E5E5E5">Hardware defenses the first major</font>

168
00:06:30,380 --> 00:06:33,530
hardware defenses<font color="#CCCCCC"> that they put is</font>

169
00:06:32,360 --> 00:06:36,710
something that they referred to

170
00:06:33,530 --> 00:06:38,489
<font color="#CCCCCC">internally as</font><font color="#E5E5E5"> a</font><font color="#CCCCCC"> MCC it's also</font><font color="#E5E5E5"> known as</font>

171
00:06:36,710 --> 00:06:40,680
<font color="#E5E5E5">the code as KT RR which is</font>

172
00:06:38,490 --> 00:06:43,319
<font color="#E5E5E5">texts read-only regions and now they</font>

173
00:06:40,680 --> 00:06:45,210
refer to it formally as<font color="#E5E5E5"> Kip which</font><font color="#CCCCCC"> is</font>

174
00:06:43,319 --> 00:06:47,729
Colonel integrity<font color="#CCCCCC"> protection and this</font><font color="#E5E5E5"> is</font>

175
00:06:45,210 --> 00:06:49,948
<font color="#CCCCCC">something that is from the iPhone 7</font><font color="#E5E5E5"> and</font>

176
00:06:47,729 --> 00:06:52,580
later<font color="#E5E5E5"> which is what we call a</font><font color="#CCCCCC"> 10 devices</font>

177
00:06:49,949 --> 00:06:54,449
<font color="#CCCCCC">and as you'll</font><font color="#E5E5E5"> see we're basically</font>

178
00:06:52,580 --> 00:06:56,940
<font color="#CCCCCC">fast-forwarding to</font><font color="#E5E5E5"> the present day</font>

179
00:06:54,449 --> 00:06:59,610
<font color="#E5E5E5">we're in iOS 12 there's some changes and</font>

180
00:06:56,940 --> 00:07:02,069
<font color="#E5E5E5">in the a 12 which</font><font color="#CCCCCC"> is what's otherwise</font>

181
00:06:59,610 --> 00:07:05,819
known as<font color="#E5E5E5"> internal is the iPhone 11 or</font>

182
00:07:02,069 --> 00:07:07,949
for us the iPhone<font color="#E5E5E5"> 10 s 10 art and s</font><font color="#CCCCCC"> max</font>

183
00:07:05,819 --> 00:07:09,569
whatever<font color="#E5E5E5"> they call</font><font color="#CCCCCC"> it that's</font><font color="#E5E5E5"> basically</font>

184
00:07:07,949 --> 00:07:12,300
even more<font color="#E5E5E5"> Hardware protections and will</font>

185
00:07:09,569 --> 00:07:15,389
of<font color="#E5E5E5"> course see all</font><font color="#CCCCCC"> of</font><font color="#E5E5E5"> that now just to</font>

186
00:07:12,300 --> 00:07:17,490
<font color="#E5E5E5">get some basic ideas because somebody at</font>

187
00:07:15,389 --> 00:07:18,870
Apple obviously<font color="#E5E5E5"> doesn't</font><font color="#CCCCCC"> know to tell the</font>

188
00:07:17,490 --> 00:07:21,659
<font color="#E5E5E5">difference between what a jailbreak is</font>

189
00:07:18,870 --> 00:07:23,849
and what an apt is so<font color="#E5E5E5"> apt that's</font>

190
00:07:21,659 --> 00:07:25,400
advanced persistent threat<font color="#E5E5E5"> you probably</font>

191
00:07:23,849 --> 00:07:28,229
all<font color="#CCCCCC"> know that that's basically</font><font color="#E5E5E5"> that</font>

192
00:07:25,400 --> 00:07:31,049
<font color="#E5E5E5">targeted malware and we've actually seen</font>

193
00:07:28,229 --> 00:07:33,120
a case of that in iOS if you recall or

194
00:07:31,050 --> 00:07:35,220
have heard<font color="#CCCCCC"> about Pegasus</font><font color="#E5E5E5"> which i</font><font color="#CCCCCC"> think</font>

195
00:07:33,120 --> 00:07:38,250
is super<font color="#E5E5E5"> popular</font><font color="#CCCCCC"> here in</font><font color="#E5E5E5"> like Central</font>

196
00:07:35,220 --> 00:07:40,139
and South America so basically if you

197
00:07:38,250 --> 00:07:42,389
<font color="#CCCCCC">look at the actual distinction between</font>

198
00:07:40,139 --> 00:07:44,460
an<font color="#E5E5E5"> apt and a jailbreak</font>

199
00:07:42,389 --> 00:07:46,409
it's easy to<font color="#E5E5E5"> confuse them because</font>

200
00:07:44,460 --> 00:07:48,419
<font color="#CCCCCC">effectively they use pretty</font><font color="#E5E5E5"> much the</font>

201
00:07:46,409 --> 00:07:50,360
<font color="#E5E5E5">same techniques in both cases what we</font>

202
00:07:48,419 --> 00:07:53,099
want is we<font color="#CCCCCC"> want to get some type of</font>

203
00:07:50,360 --> 00:07:55,830
effectively<font color="#E5E5E5"> break of the security model</font>

204
00:07:53,099 --> 00:07:57,690
<font color="#E5E5E5">the only question is do we</font><font color="#CCCCCC"> actually</font><font color="#E5E5E5"> use</font>

205
00:07:55,830 --> 00:07:59,820
it<font color="#CCCCCC"> for our own purposes which is</font>

206
00:07:57,690 --> 00:08:02,580
basically in order to infiltrate<font color="#E5E5E5"> and</font>

207
00:07:59,820 --> 00:08:04,320
then exfiltrate<font color="#E5E5E5"> data and take out all</font>

208
00:08:02,580 --> 00:08:06,719
<font color="#CCCCCC">the data</font><font color="#E5E5E5"> of the device compromised the</font>

209
00:08:04,320 --> 00:08:10,349
device or if we want to<font color="#E5E5E5"> do this in order</font>

210
00:08:06,719 --> 00:08:12,240
<font color="#CCCCCC">to</font><font color="#E5E5E5"> say be benevolent and beneficial and</font>

211
00:08:10,349 --> 00:08:13,620
allow other people to<font color="#E5E5E5"> use</font><font color="#CCCCCC"> that as</font><font color="#E5E5E5"> well</font>

212
00:08:12,240 --> 00:08:15,900
<font color="#E5E5E5">in other words that's what we call</font>

213
00:08:13,620 --> 00:08:18,240
jailbreaking<font color="#E5E5E5"> now the exploits required</font>

214
00:08:15,900 --> 00:08:21,060
are basically the<font color="#CCCCCC"> same however in</font>

215
00:08:18,240 --> 00:08:23,159
<font color="#E5E5E5">practice for an apt if I'm trying to get</font>

216
00:08:21,060 --> 00:08:24,630
on your<font color="#E5E5E5"> phone I don't</font><font color="#CCCCCC"> want to get rude</font>

217
00:08:23,159 --> 00:08:26,340
on your phone I<font color="#E5E5E5"> don't want to get kernel</font>

218
00:08:24,630 --> 00:08:28,020
access on<font color="#CCCCCC"> your phone I'd rather get</font>

219
00:08:26,340 --> 00:08:30,599
kernel access and root on some type of

220
00:08:28,020 --> 00:08:32,458
<font color="#E5E5E5">you know</font><font color="#CCCCCC"> a backbone server or</font><font color="#E5E5E5"> something</font>

221
00:08:30,599 --> 00:08:34,559
in AWS I don't need your stupid phone

222
00:08:32,458 --> 00:08:36,718
<font color="#E5E5E5">honestly I can get one myself</font><font color="#CCCCCC"> and if</font>

223
00:08:34,559 --> 00:08:39,328
it's really<font color="#E5E5E5"> too bad</font><font color="#CCCCCC"> I can just always go</font>

224
00:08:36,719 --> 00:08:41,039
to Android so really what people<font color="#E5E5E5"> are</font>

225
00:08:39,328 --> 00:08:42,838
interested<font color="#CCCCCC"> when they're looking at apts</font>

226
00:08:41,039 --> 00:08:44,640
they're<font color="#E5E5E5"> only looking for one single</font>

227
00:08:42,839 --> 00:08:46,770
thing which is the very<font color="#E5E5E5"> first step in</font>

228
00:08:44,640 --> 00:08:49,620
<font color="#E5E5E5">jailbreaking and that's a sandbox escape</font>

229
00:08:46,770 --> 00:08:51,380
sandbox<font color="#E5E5E5"> because all your</font><font color="#CCCCCC"> applications in</font>

230
00:08:49,620 --> 00:08:53,510
iOS<font color="#E5E5E5"> are a third party up</font>

231
00:08:51,380 --> 00:08:56,090
<font color="#E5E5E5">occasions are effectively quarantined</font>

232
00:08:53,510 --> 00:08:58,310
and<font color="#E5E5E5"> containerized</font><font color="#CCCCCC"> and therefore are very</font>

233
00:08:56,090 --> 00:09:00,980
restricted in<font color="#CCCCCC"> what they do people want</font>

234
00:08:58,310 --> 00:09:03,530
<font color="#CCCCCC">to unrestricted the other thing in iOS</font>

235
00:09:00,980 --> 00:09:08,030
because everything runs as mobile or

236
00:09:03,530 --> 00:09:09,890
<font color="#CCCCCC">root you only get to basic</font><font color="#E5E5E5"> you IDs</font><font color="#CCCCCC"> so if</font>

237
00:09:08,030 --> 00:09:11,600
you can break out of<font color="#CCCCCC"> your sandbox</font><font color="#E5E5E5"> in</font>

238
00:09:09,890 --> 00:09:13,610
your UID mobile you<font color="#E5E5E5"> can pretty much</font>

239
00:09:11,600 --> 00:09:15,920
<font color="#E5E5E5">access any other app</font><font color="#CCCCCC"> that you want so</font>

240
00:09:13,610 --> 00:09:19,220
all it takes is breaking<font color="#E5E5E5"> that and so if</font>

241
00:09:15,920 --> 00:09:21,439
an apt desires to do its thing and get

242
00:09:19,220 --> 00:09:23,570
all of<font color="#E5E5E5"> your contacts and get</font><font color="#CCCCCC"> access to</font>

243
00:09:21,440 --> 00:09:24,800
<font color="#E5E5E5">your camera and get</font><font color="#CCCCCC"> access to your audio</font>

244
00:09:23,570 --> 00:09:26,960
and so forth and<font color="#E5E5E5"> so forth</font>

245
00:09:24,800 --> 00:09:29,449
<font color="#E5E5E5">that's pretty much it however for a</font>

246
00:09:26,960 --> 00:09:31,940
jailbreak<font color="#CCCCCC"> at least a good jailbreak</font><font color="#E5E5E5"> the</font>

247
00:09:29,450 --> 00:09:33,920
journey will just begin<font color="#E5E5E5"> and then there's</font>

248
00:09:31,940 --> 00:09:36,320
<font color="#E5E5E5">additional steps that we need the major</font>

249
00:09:33,920 --> 00:09:38,750
step is a<font color="#CCCCCC"> privilege escalation to get</font>

250
00:09:36,320 --> 00:09:40,730
root access<font color="#E5E5E5"> in user mode because</font><font color="#CCCCCC"> this</font>

251
00:09:38,750 --> 00:09:43,010
<font color="#E5E5E5">root access you can</font><font color="#CCCCCC"> do a lot more than</font>

252
00:09:40,730 --> 00:09:44,840
just mobile and you can<font color="#CCCCCC"> basically</font><font color="#E5E5E5"> access</font>

253
00:09:43,010 --> 00:09:48,800
a lot<font color="#E5E5E5"> of hardware devices</font><font color="#CCCCCC"> and you don't</font>

254
00:09:44,840 --> 00:09:50,780
<font color="#E5E5E5">need any other specific workarounds</font><font color="#CCCCCC"> that</font>

255
00:09:48,800 --> 00:09:53,359
normally<font color="#CCCCCC"> as mobile you would</font><font color="#E5E5E5"> need then</font>

256
00:09:50,780 --> 00:09:55,490
most<font color="#CCCCCC"> jailbreaks go that extra</font><font color="#E5E5E5"> step and</font>

257
00:09:53,360 --> 00:09:57,650
that<font color="#E5E5E5"> extra step is to go to</font><font color="#CCCCCC"> kernel read</font>

258
00:09:55,490 --> 00:10:01,130
<font color="#CCCCCC">write</font><font color="#E5E5E5"> and once you have kernel read</font>

259
00:09:57,650 --> 00:10:02,870
write you want to extend<font color="#E5E5E5"> your benevolent</font>

260
00:10:01,130 --> 00:10:04,910
powers to everybody and effectively

261
00:10:02,870 --> 00:10:07,880
patch the kernel<font color="#E5E5E5"> or do some type</font><font color="#CCCCCC"> of</font>

262
00:10:04,910 --> 00:10:10,819
other type<font color="#CCCCCC"> of kernel code execution</font><font color="#E5E5E5"> in</font>

263
00:10:07,880 --> 00:10:14,390
order to enable<font color="#E5E5E5"> other applications to</font>

264
00:10:10,820 --> 00:10:15,920
also benefit from various bypasses now

265
00:10:14,390 --> 00:10:17,990
when it<font color="#E5E5E5"> comes to persistence</font>

266
00:10:15,920 --> 00:10:19,400
unfortunately now what we<font color="#E5E5E5"> have in the</font>

267
00:10:17,990 --> 00:10:22,430
jailbreak world is something<font color="#CCCCCC"> we call</font>

268
00:10:19,400 --> 00:10:24,230
semi tethered<font color="#E5E5E5"> we used to have untethered</font>

269
00:10:22,430 --> 00:10:26,060
jailbreak switch were that you could

270
00:10:24,230 --> 00:10:28,580
<font color="#E5E5E5">reboot your device into</font><font color="#CCCCCC"> an angel'</font>

271
00:10:26,060 --> 00:10:30,680
<font color="#CCCCCC">working</font><font color="#E5E5E5"> state then at some point we had</font>

272
00:10:28,580 --> 00:10:32,900
also<font color="#CCCCCC"> the</font><font color="#E5E5E5"> tethered jailbreak switch are</font>

273
00:10:30,680 --> 00:10:35,150
those that rely on some<font color="#CCCCCC"> iboot</font>

274
00:10:32,900 --> 00:10:37,040
vulnerability<font color="#E5E5E5"> if you remember back</font><font color="#CCCCCC"> in</font>

275
00:10:35,150 --> 00:10:38,900
<font color="#E5E5E5">the iPhone 4 we had that</font><font color="#CCCCCC"> lime rain and</font>

276
00:10:37,040 --> 00:10:40,670
stuff<font color="#CCCCCC"> and</font><font color="#E5E5E5"> unfortunately we don't have</font>

277
00:10:38,900 --> 00:10:43,220
<font color="#E5E5E5">those anymore</font><font color="#CCCCCC"> and so now we're stuck</font>

278
00:10:40,670 --> 00:10:46,160
with something<font color="#E5E5E5"> that as of 9 3 3 is</font>

279
00:10:43,220 --> 00:10:47,750
<font color="#E5E5E5">basically the new normal which would be</font>

280
00:10:46,160 --> 00:10:50,060
the semi tethered when that means that

281
00:10:47,750 --> 00:10:52,250
your device reboots<font color="#CCCCCC"> it reboots into</font><font color="#E5E5E5"> a</font>

282
00:10:50,060 --> 00:10:54,229
<font color="#E5E5E5">non</font><font color="#CCCCCC"> dual working</font><font color="#E5E5E5"> state you have to</font><font color="#CCCCCC"> click</font>

283
00:10:52,250 --> 00:10:56,390
<font color="#E5E5E5">on some jailbreak app and then you</font>

284
00:10:54,230 --> 00:10:58,580
<font color="#E5E5E5">basically get your jailbreak back it's a</font>

285
00:10:56,390 --> 00:11:00,380
<font color="#CCCCCC">little bit annoying</font><font color="#E5E5E5"> it's further</font>

286
00:10:58,580 --> 00:11:02,570
annoying<font color="#E5E5E5"> because Apple has this</font><font color="#CCCCCC"> thing</font>

287
00:11:00,380 --> 00:11:04,120
<font color="#CCCCCC">that they only allow apps that are not</font>

288
00:11:02,570 --> 00:11:05,860
<font color="#CCCCCC">app store apps to</font><font color="#E5E5E5"> run</font>

289
00:11:04,120 --> 00:11:08,800
for seven days<font color="#CCCCCC"> before you have to resign</font>

290
00:11:05,860 --> 00:11:10,570
them<font color="#E5E5E5"> but whatever that's what we do now</font>

291
00:11:08,800 --> 00:11:12,490
<font color="#CCCCCC">the main thing that we want in a</font>

292
00:11:10,570 --> 00:11:14,020
<font color="#E5E5E5">jailbreak and I guess this is basically</font>

293
00:11:12,490 --> 00:11:16,870
the<font color="#E5E5E5"> difference between</font><font color="#CCCCCC"> a jailbreak and a</font>

294
00:11:14,020 --> 00:11:19,300
PT is<font color="#E5E5E5"> the approach of unsigned</font><font color="#CCCCCC"> code</font>

295
00:11:16,870 --> 00:11:22,120
execution<font color="#E5E5E5"> in a jailbreak</font>

296
00:11:19,300 --> 00:11:24,189
you probably want your various apps your

297
00:11:22,120 --> 00:11:26,110
tweaks like<font color="#E5E5E5"> Cydia and all that jazz and</font>

298
00:11:24,190 --> 00:11:28,390
<font color="#E5E5E5">for that you have to bypass code signing</font>

299
00:11:26,110 --> 00:11:30,550
<font color="#E5E5E5">and bypassing code signing is really the</font>

300
00:11:28,390 --> 00:11:32,560
the most important step in some ways

301
00:11:30,550 --> 00:11:35,229
<font color="#E5E5E5">because</font><font color="#CCCCCC"> if you</font><font color="#E5E5E5"> get that and you'll see</font>

302
00:11:32,560 --> 00:11:36,550
that in a bit<font color="#E5E5E5"> everything</font><font color="#CCCCCC"> falls down all</font>

303
00:11:35,230 --> 00:11:38,260
of<font color="#E5E5E5"> the Apple security model is</font>

304
00:11:36,550 --> 00:11:40,089
<font color="#E5E5E5">effectively contingent on code signing</font>

305
00:11:38,260 --> 00:11:41,740
<font color="#CCCCCC">and then the other thing is those</font>

306
00:11:40,089 --> 00:11:44,290
entitlements declarative permissions

307
00:11:41,740 --> 00:11:46,029
<font color="#E5E5E5">which in a jailbreak would be required</font>

308
00:11:44,290 --> 00:11:47,680
but again if you're in an EPT we don't

309
00:11:46,029 --> 00:11:49,560
care<font color="#CCCCCC"> about these</font><font color="#E5E5E5"> things</font><font color="#CCCCCC"> so we</font><font color="#E5E5E5"> just</font>

310
00:11:47,680 --> 00:11:52,989
basically can bypass it<font color="#CCCCCC"> altogether so</font>

311
00:11:49,560 --> 00:11:54,489
<font color="#CCCCCC">that gives us the view of what a</font>

312
00:11:52,990 --> 00:11:56,350
jailbreak process<font color="#E5E5E5"> is and that's</font>

313
00:11:54,490 --> 00:11:58,029
<font color="#E5E5E5">basically this very very detailed</font>

314
00:11:56,350 --> 00:12:00,370
<font color="#E5E5E5">flowchart which I'm not</font><font color="#CCCCCC"> going</font><font color="#E5E5E5"> to go into</font>

315
00:11:58,029 --> 00:12:02,020
the<font color="#E5E5E5"> full steps but basically the idea</font><font color="#CCCCCC"> is</font>

316
00:12:00,370 --> 00:12:03,430
<font color="#CCCCCC">that in order to</font><font color="#E5E5E5"> get the initial</font>

317
00:12:02,020 --> 00:12:06,370
execution on<font color="#CCCCCC"> the device</font>

318
00:12:03,430 --> 00:12:08,410
we usually nowadays load the app and

319
00:12:06,370 --> 00:12:10,360
that would mean<font color="#E5E5E5"> site loading through</font>

320
00:12:08,410 --> 00:12:12,880
like Cydia<font color="#E5E5E5"> impactor and something</font><font color="#CCCCCC"> like</font>

321
00:12:10,360 --> 00:12:14,560
<font color="#E5E5E5">that then that's one</font><font color="#CCCCCC"> option another</font>

322
00:12:12,880 --> 00:12:16,750
option is to<font color="#E5E5E5"> exploit</font><font color="#CCCCCC"> one of Apple's</font>

323
00:12:14,560 --> 00:12:18,010
built-in applications and for<font color="#E5E5E5"> the</font>

324
00:12:16,750 --> 00:12:19,480
<font color="#E5E5E5">built-in application it doesn't</font>

325
00:12:18,010 --> 00:12:21,640
necessarily<font color="#CCCCCC"> have to</font><font color="#E5E5E5"> be an</font><font color="#CCCCCC"> application</font>

326
00:12:19,480 --> 00:12:23,860
that<font color="#E5E5E5"> you</font><font color="#CCCCCC"> can see there's a lot of</font><font color="#E5E5E5"> other</font>

327
00:12:21,640 --> 00:12:26,199
hidden applications and even<font color="#CCCCCC"> more than</font>

328
00:12:23,860 --> 00:12:28,390
that<font color="#E5E5E5"> there are non UI applications which</font>

329
00:12:26,200 --> 00:12:30,070
are generally demons or processes<font color="#E5E5E5"> and if</font>

330
00:12:28,390 --> 00:12:32,040
you can exploit one of those that of

331
00:12:30,070 --> 00:12:34,240
course gets you the ability<font color="#CCCCCC"> to</font>

332
00:12:32,040 --> 00:12:36,459
effectively break out<font color="#E5E5E5"> of</font><font color="#CCCCCC"> the sandbox and</font>

333
00:12:34,240 --> 00:12:38,980
the other thing that might<font color="#E5E5E5"> be</font><font color="#CCCCCC"> an option</font>

334
00:12:36,459 --> 00:12:41,529
is<font color="#CCCCCC"> lock down and lock down is the</font>

335
00:12:38,980 --> 00:12:44,350
collective<font color="#E5E5E5"> name that we use for when you</font>

336
00:12:41,529 --> 00:12:45,850
connect your<font color="#CCCCCC"> iDevice over</font><font color="#E5E5E5"> USB and then</font>

337
00:12:44,350 --> 00:12:47,350
if you're familiar you can run stuff

338
00:12:45,850 --> 00:12:50,110
through<font color="#CCCCCC"> Xcode or you can take</font>

339
00:12:47,350 --> 00:12:52,900
<font color="#CCCCCC">screenshots</font><font color="#E5E5E5"> or you can see in iTunes</font>

340
00:12:50,110 --> 00:12:55,300
your data and your applications<font color="#E5E5E5"> that's</font>

341
00:12:52,900 --> 00:12:58,150
<font color="#E5E5E5">all gone over lockdown services now as</font>

342
00:12:55,300 --> 00:13:00,760
you get<font color="#E5E5E5"> into one</font><font color="#CCCCCC"> of these</font><font color="#E5E5E5"> vectors your</font>

343
00:12:58,150 --> 00:13:02,589
first step is to<font color="#CCCCCC"> run</font><font color="#E5E5E5"> your code if you're</font>

344
00:13:00,760 --> 00:13:04,300
<font color="#CCCCCC">loading an app that's not an</font><font color="#E5E5E5"> issue</font><font color="#CCCCCC"> if</font>

345
00:13:02,589 --> 00:13:05,980
you're loading<font color="#CCCCCC"> an app you can basically</font>

346
00:13:04,300 --> 00:13:08,500
sign with<font color="#CCCCCC"> the developer certificate and</font>

347
00:13:05,980 --> 00:13:10,270
you got that<font color="#E5E5E5"> but at any point you're</font>

348
00:13:08,500 --> 00:13:12,579
<font color="#CCCCCC">going to</font><font color="#E5E5E5"> have to go and reach that first</font>

349
00:13:10,270 --> 00:13:14,260
step which is a sandbox escape and<font color="#CCCCCC"> that</font>

350
00:13:12,579 --> 00:13:17,890
sandbox<font color="#E5E5E5"> escape is basically allowing</font>

351
00:13:14,260 --> 00:13:20,500
<font color="#E5E5E5">your whatever app it was to get the full</font>

352
00:13:17,890 --> 00:13:22,689
effect of unfettered<font color="#E5E5E5"> filesystem access</font>

353
00:13:20,500 --> 00:13:24,550
at that point you're going<font color="#CCCCCC"> to have</font><font color="#E5E5E5"> to do</font>

354
00:13:22,690 --> 00:13:27,750
what we<font color="#E5E5E5"> call a profess or elevational</font>

355
00:13:24,550 --> 00:13:30,130
privileges and that's going<font color="#E5E5E5"> to be to get</font>

356
00:13:27,750 --> 00:13:31,860
normally the root permissions but in

357
00:13:30,130 --> 00:13:34,000
Apple's<font color="#CCCCCC"> case there's also</font><font color="#E5E5E5"> those pet</font>

358
00:13:31,860 --> 00:13:36,640
<font color="#E5E5E5">bothersome entitlements</font><font color="#CCCCCC"> that we need to</font>

359
00:13:34,000 --> 00:13:38,260
get at<font color="#CCCCCC"> that point you may or may not be</font>

360
00:13:36,640 --> 00:13:40,060
reading the kernel<font color="#CCCCCC"> memory and you may or</font>

361
00:13:38,260 --> 00:13:41,740
<font color="#CCCCCC">may not</font><font color="#E5E5E5"> be patching the kernel again</font>

362
00:13:40,060 --> 00:13:45,189
we'll see in a second that<font color="#E5E5E5"> patching the</font>

363
00:13:41,740 --> 00:13:47,529
kernel is pretty<font color="#E5E5E5"> much kind of like 2007</font>

364
00:13:45,190 --> 00:13:49,029
we don't do that anymore<font color="#E5E5E5"> but in some</font>

365
00:13:47,529 --> 00:13:50,560
cases what we do and<font color="#E5E5E5"> these are the</font>

366
00:13:49,029 --> 00:13:52,420
<font color="#E5E5E5">little back arrows that</font><font color="#CCCCCC"> you see here</font>

367
00:13:50,560 --> 00:13:54,640
there's a lot<font color="#E5E5E5"> of shortcuts and the</font>

368
00:13:52,420 --> 00:13:56,560
shortcut<font color="#CCCCCC"> is primarily</font><font color="#E5E5E5"> that most exploits</font>

369
00:13:54,640 --> 00:13:59,019
<font color="#E5E5E5">nowadays and if you've</font><font color="#CCCCCC"> been</font><font color="#E5E5E5"> following</font>

370
00:13:56,560 --> 00:14:02,229
<font color="#E5E5E5">you see a lot of</font><font color="#CCCCCC"> Ian beers exploits the</font>

371
00:13:59,019 --> 00:14:04,750
<font color="#CCCCCC">so-called T</font><font color="#E5E5E5"> fp0 kernel</font><font color="#CCCCCC"> task that gets</font>

372
00:14:02,230 --> 00:14:06,399
you automatic kernel<font color="#CCCCCC"> readwrite and then</font>

373
00:14:04,750 --> 00:14:08,709
from<font color="#CCCCCC"> that automatic kernel readwrite you</font>

374
00:14:06,399 --> 00:14:10,480
basically go directly no need to escape

375
00:14:08,709 --> 00:14:12,010
<font color="#E5E5E5">the sandbox because you can access the</font>

376
00:14:10,480 --> 00:14:14,410
kernel through a system call or some

377
00:14:12,010 --> 00:14:15,610
iokit method and then once you get<font color="#E5E5E5"> the</font>

378
00:14:14,410 --> 00:14:19,029
<font color="#E5E5E5">kernel readwrite you can just basically</font>

379
00:14:15,610 --> 00:14:20,500
go back<font color="#CCCCCC"> and then escape the sandbox and</font>

380
00:14:19,029 --> 00:14:22,300
elevate<font color="#CCCCCC"> your privileges and everything</font>

381
00:14:20,500 --> 00:14:24,730
because once you're in kernel<font color="#CCCCCC"> mode</font>

382
00:14:22,300 --> 00:14:26,260
you're effectively<font color="#E5E5E5"> done you control the</font>

383
00:14:24,730 --> 00:14:27,940
system and all the<font color="#E5E5E5"> checks and</font>

384
00:14:26,260 --> 00:14:31,029
enforcement's are done in kernel<font color="#CCCCCC"> mode</font>

385
00:14:27,940 --> 00:14:33,550
anyways<font color="#E5E5E5"> so the modern day jailbreak that</font>

386
00:14:31,029 --> 00:14:35,769
we have is primarily<font color="#E5E5E5"> in iOS</font><font color="#CCCCCC"> not</font><font color="#E5E5E5"> really</font>

387
00:14:33,550 --> 00:14:38,649
<font color="#CCCCCC">nine but nine</font><font color="#E5E5E5"> point</font><font color="#CCCCCC"> three three and</font>

388
00:14:35,769 --> 00:14:41,050
later<font color="#CCCCCC"> first</font><font color="#E5E5E5"> of all they'd be deployed as</font>

389
00:14:38,649 --> 00:14:43,480
a<font color="#E5E5E5"> third party app on the device with the</font>

390
00:14:41,050 --> 00:14:45,699
developer certificate you would find a

391
00:14:43,480 --> 00:14:47,560
vulnerable kernel attack surface which

392
00:14:45,699 --> 00:14:49,000
is accessible<font color="#E5E5E5"> from the</font><font color="#CCCCCC"> sandbox</font><font color="#E5E5E5"> which</font>

393
00:14:47,560 --> 00:14:50,890
means you do not<font color="#CCCCCC"> need</font><font color="#E5E5E5"> a sandbox escape</font>

394
00:14:49,000 --> 00:14:53,260
<font color="#E5E5E5">and then at that point you're</font><font color="#CCCCCC"> going to</font>

395
00:14:50,890 --> 00:14:55,240
get<font color="#E5E5E5"> kernel read</font><font color="#CCCCCC"> write</font><font color="#E5E5E5"> you're going to</font>

396
00:14:53,260 --> 00:14:57,490
get the immediate<font color="#E5E5E5"> profit which of</font><font color="#CCCCCC"> course</font>

397
00:14:55,240 --> 00:14:59,680
if you're an apt<font color="#E5E5E5"> you're pretty much done</font>

398
00:14:57,490 --> 00:15:01,089
here<font color="#E5E5E5"> otherwise</font><font color="#CCCCCC"> you're going back</font><font color="#E5E5E5"> and</font>

399
00:14:59,680 --> 00:15:03,279
you're doing<font color="#E5E5E5"> all the other steps of</font>

400
00:15:01,089 --> 00:15:04,899
entitling yourself breaking<font color="#E5E5E5"> the sandbox</font>

401
00:15:03,279 --> 00:15:07,060
blah blah blah but<font color="#E5E5E5"> this is just</font>

402
00:15:04,899 --> 00:15:08,649
basically<font color="#E5E5E5"> downhill from</font><font color="#CCCCCC"> that point on</font>

403
00:15:07,060 --> 00:15:10,000
because<font color="#E5E5E5"> there's really nothing more</font><font color="#CCCCCC"> to</font>

404
00:15:08,649 --> 00:15:12,430
consider<font color="#E5E5E5"> at that point that system has</font>

405
00:15:10,000 --> 00:15:14,290
<font color="#E5E5E5">been fully compromised</font><font color="#CCCCCC"> now if we look</font><font color="#E5E5E5"> at</font>

406
00:15:12,430 --> 00:15:16,269
this from<font color="#CCCCCC"> the</font><font color="#E5E5E5"> Apple</font><font color="#CCCCCC"> View which is the</font>

407
00:15:14,290 --> 00:15:18,849
defense mechanisms then you'll notice

408
00:15:16,269 --> 00:15:21,279
<font color="#CCCCCC">here I say star OS</font><font color="#E5E5E5"> I use that a lot</font>

409
00:15:18,850 --> 00:15:23,740
that's for iOS TV OS watch OS<font color="#E5E5E5"> they're</font>

410
00:15:21,279 --> 00:15:25,240
basically<font color="#E5E5E5"> all the same so we see that</font>

411
00:15:23,740 --> 00:15:27,850
there<font color="#CCCCCC"> is this</font><font color="#E5E5E5"> first line of defense</font>

412
00:15:25,240 --> 00:15:30,399
which is<font color="#CCCCCC"> of course unix permissions but</font>

413
00:15:27,850 --> 00:15:31,329
unlike<font color="#CCCCCC"> Android for example where every</font>

414
00:15:30,399 --> 00:15:33,459
app

415
00:15:31,329 --> 00:15:36,670
it's<font color="#CCCCCC"> on UID here</font><font color="#E5E5E5"> as I was saying</font><font color="#CCCCCC"> before</font>

416
00:15:33,459 --> 00:15:39,429
<font color="#E5E5E5">there's either mobile which is UID 501</font>

417
00:15:36,670 --> 00:15:42,099
or there's UID<font color="#CCCCCC"> root so that's your basic</font>

418
00:15:39,429 --> 00:15:44,738
<font color="#E5E5E5">first line of defense however and</font><font color="#CCCCCC"> this</font>

419
00:15:42,100 --> 00:15:47,769
<font color="#CCCCCC">is unlike Android</font><font color="#E5E5E5"> that's when we get</font>

420
00:15:44,739 --> 00:15:50,769
<font color="#CCCCCC">into a much deeper defense-in-depth</font><font color="#E5E5E5"> and</font>

421
00:15:47,769 --> 00:15:52,480
so the main focus<font color="#E5E5E5"> is</font><font color="#CCCCCC"> of course going to</font>

422
00:15:50,769 --> 00:15:54,610
<font color="#CCCCCC">be this sandbox that</font><font color="#E5E5E5"> I keep referring to</font>

423
00:15:52,480 --> 00:15:56,949
<font color="#E5E5E5">and if I can refer to the sandbox</font>

424
00:15:54,610 --> 00:15:58,720
something like you know<font color="#CCCCCC"> ten</font><font color="#E5E5E5"> times in</font><font color="#CCCCCC"> the</font>

425
00:15:56,949 --> 00:16:00,399
<font color="#E5E5E5">past five minutes it's obviously</font>

426
00:15:58,720 --> 00:16:01,779
something we have to deal with<font color="#E5E5E5"> the</font>

427
00:16:00,399 --> 00:16:03,369
sandbox is going to be far more

428
00:16:01,779 --> 00:16:06,100
<font color="#E5E5E5">restrictive</font><font color="#CCCCCC"> and it's going</font><font color="#E5E5E5"> to give us</font>

429
00:16:03,369 --> 00:16:07,749
<font color="#E5E5E5">finer granularity on restricting</font>

430
00:16:06,100 --> 00:16:10,119
operations as you'll see in a second

431
00:16:07,749 --> 00:16:12,459
<font color="#E5E5E5">then below that</font><font color="#CCCCCC"> we've got entitlements</font>

432
00:16:10,119 --> 00:16:15,189
which are actually tying<font color="#E5E5E5"> into the</font>

433
00:16:12,459 --> 00:16:17,979
sandbox<font color="#CCCCCC"> because think of the sandbox as</font>

434
00:16:15,189 --> 00:16:20,410
<font color="#E5E5E5">deny all and then think of entitlements</font>

435
00:16:17,980 --> 00:16:22,600
as yes but allow this or that and

436
00:16:20,410 --> 00:16:24,999
finally underneath that we've got code

437
00:16:22,600 --> 00:16:27,129
signing<font color="#CCCCCC"> which as I was saying</font><font color="#E5E5E5"> is the</font>

438
00:16:24,999 --> 00:16:29,049
main substrate if you break code signing

439
00:16:27,129 --> 00:16:32,049
<font color="#E5E5E5">you've effectively broken everything</font>

440
00:16:29,049 --> 00:16:34,449
<font color="#E5E5E5">from the kernel perspective how is this</font>

441
00:16:32,049 --> 00:16:37,209
all implemented<font color="#E5E5E5"> well with mandatory</font>

442
00:16:34,449 --> 00:16:39,998
<font color="#E5E5E5">access control mandatory access control</font>

443
00:16:37,209 --> 00:16:42,128
what we like to call Mac or Mac<font color="#E5E5E5"> F for</font>

444
00:16:39,999 --> 00:16:45,790
mandatory<font color="#E5E5E5"> access control framework it's</font>

445
00:16:42,129 --> 00:16:47,499
effectively<font color="#E5E5E5"> the basic glue that holds</font>

446
00:16:45,790 --> 00:16:50,319
everything<font color="#E5E5E5"> together again if you're</font>

447
00:16:47,499 --> 00:16:50,980
coming<font color="#E5E5E5"> from</font><font color="#CCCCCC"> Android my condolences but</font>

448
00:16:50,319 --> 00:16:53,559
if you are

449
00:16:50,980 --> 00:16:54,669
you've got<font color="#CCCCCC"> SELinux</font><font color="#E5E5E5"> or SC Android it's</font>

450
00:16:53,559 --> 00:16:57,009
basically the same idea

451
00:16:54,669 --> 00:16:59,589
<font color="#E5E5E5">unlike discretionary access control</font>

452
00:16:57,009 --> 00:17:01,569
which you can<font color="#E5E5E5"> show</font><font color="#CCCCCC"> nod to grep and</font>

453
00:16:59,589 --> 00:17:03,850
change your permissions<font color="#E5E5E5"> anytime you want</font>

454
00:17:01,569 --> 00:17:05,408
<font color="#CCCCCC">if you</font><font color="#E5E5E5"> route mandatory access control is</font>

455
00:17:03,850 --> 00:17:08,439
something<font color="#CCCCCC"> that even route cannot change</font>

456
00:17:05,409 --> 00:17:10,000
so we have a user<font color="#E5E5E5"> mode process trying to</font>

457
00:17:08,439 --> 00:17:11,139
do some type of system call trying<font color="#E5E5E5"> to do</font>

458
00:17:10,000 --> 00:17:13,630
some type<font color="#CCCCCC"> of operation</font>

459
00:17:11,138 --> 00:17:15,729
this then goes into the system<font color="#E5E5E5"> call</font>

460
00:17:13,630 --> 00:17:17,740
table or your<font color="#CCCCCC"> mock trap table for</font>

461
00:17:15,730 --> 00:17:20,319
argument's sake<font color="#E5E5E5"> this then goes to the</font>

462
00:17:17,740 --> 00:17:22,870
function this then goes to actually

463
00:17:20,319 --> 00:17:25,269
invoke that function but the function

464
00:17:22,869 --> 00:17:27,638
will<font color="#CCCCCC"> not do anything</font><font color="#E5E5E5"> until it calls out</font>

465
00:17:25,269 --> 00:17:31,179
to<font color="#E5E5E5"> this Mac framework now what does this</font>

466
00:17:27,638 --> 00:17:33,309
<font color="#E5E5E5">Mac framework do in is</font><font color="#CCCCCC"> no absolutely</font>

467
00:17:31,179 --> 00:17:34,990
<font color="#E5E5E5">nothing because the framework is just a</font>

468
00:17:33,309 --> 00:17:37,899
framework of<font color="#CCCCCC"> call-outs in</font><font color="#E5E5E5"> other words</font>

469
00:17:34,990 --> 00:17:40,270
the kernel proper<font color="#E5E5E5"> does not care about</font>

470
00:17:37,899 --> 00:17:42,908
<font color="#E5E5E5">whether you're allowing that operation</font>

471
00:17:40,270 --> 00:17:44,620
or<font color="#CCCCCC"> not allowing</font><font color="#E5E5E5"> an operation</font><font color="#CCCCCC"> that which</font>

472
00:17:42,909 --> 00:17:46,450
does care is

473
00:17:44,620 --> 00:17:49,330
a list of kernel extensions which are

474
00:17:46,450 --> 00:17:51,400
<font color="#CCCCCC">called security</font><font color="#E5E5E5"> modules these security</font>

475
00:17:49,330 --> 00:17:54,399
modules we've got basically two<font color="#CCCCCC"> of them</font>

476
00:17:51,400 --> 00:17:57,309
in the main line which<font color="#E5E5E5"> are Apple mobile</font>

477
00:17:54,400 --> 00:17:59,770
file integrity<font color="#CCCCCC"> which people like to not</font>

478
00:17:57,309 --> 00:18:02,490
so affectionately call<font color="#E5E5E5"> em</font><font color="#CCCCCC"> fee and so</font>

479
00:17:59,770 --> 00:18:05,170
this<font color="#E5E5E5"> an fee is going to do most of the</font>

480
00:18:02,490 --> 00:18:07,960
basic but important checks on code

481
00:18:05,170 --> 00:18:10,840
signatures<font color="#CCCCCC"> and on process execution and</font>

482
00:18:07,960 --> 00:18:14,110
on certain<font color="#CCCCCC"> types</font><font color="#E5E5E5"> of entitlements as well</font>

483
00:18:10,840 --> 00:18:16,809
as debugging<font color="#E5E5E5"> then if amphi says</font><font color="#CCCCCC"> okay</font>

484
00:18:14,110 --> 00:18:18,459
then<font color="#E5E5E5"> Mac F says okay then the system</font>

485
00:18:16,809 --> 00:18:20,139
call says<font color="#E5E5E5"> okay and</font><font color="#CCCCCC"> then the user mode</font>

486
00:18:18,460 --> 00:18:22,600
process gets a return<font color="#E5E5E5"> and everything is</font>

487
00:18:20,140 --> 00:18:24,010
fine otherwise if<font color="#CCCCCC"> an fee tends to</font>

488
00:18:22,600 --> 00:18:26,290
disagree without<font color="#CCCCCC"> you're trying</font><font color="#E5E5E5"> to do</font>

489
00:18:24,010 --> 00:18:28,300
<font color="#E5E5E5">you're getting a access denied and you</font>

490
00:18:26,290 --> 00:18:30,550
can't do it<font color="#E5E5E5"> however</font><font color="#CCCCCC"> an</font><font color="#E5E5E5"> fee is not the</font>

491
00:18:28,300 --> 00:18:32,590
only<font color="#E5E5E5"> one and there's actually a sequence</font>

492
00:18:30,550 --> 00:18:35,379
<font color="#E5E5E5">of chaining where you can register Mac</font>

493
00:18:32,590 --> 00:18:36,879
policy<font color="#E5E5E5"> on any number</font><font color="#CCCCCC"> of policies that</font>

494
00:18:35,380 --> 00:18:39,220
<font color="#CCCCCC">you want and in practice the</font><font color="#E5E5E5"> other</font>

495
00:18:36,880 --> 00:18:43,000
policy that<font color="#E5E5E5"> we have is the sandbox</font><font color="#CCCCCC"> and</font>

496
00:18:39,220 --> 00:18:44,770
the sandbox has basically<font color="#CCCCCC"> if AM fee is</font>

497
00:18:43,000 --> 00:18:46,960
<font color="#E5E5E5">only interested in about like 15 hooks</font>

498
00:18:44,770 --> 00:18:49,750
<font color="#CCCCCC">the</font><font color="#E5E5E5"> sandbox is interested in about a</font>

499
00:18:46,960 --> 00:18:51,940
<font color="#E5E5E5">hundred</font><font color="#CCCCCC"> and</font><font color="#E5E5E5"> fifty or so so</font><font color="#CCCCCC"> ten times</font><font color="#E5E5E5"> the</font>

500
00:18:49,750 --> 00:18:53,410
number<font color="#CCCCCC"> of</font><font color="#E5E5E5"> hooks and virtually every</font>

501
00:18:51,940 --> 00:18:55,360
little thing<font color="#CCCCCC"> you try to do in your</font>

502
00:18:53,410 --> 00:18:57,520
little app is<font color="#E5E5E5"> something that the sandbox</font>

503
00:18:55,360 --> 00:19:00,070
<font color="#E5E5E5">is going to inspect and decide whether</font>

504
00:18:57,520 --> 00:19:02,590
<font color="#CCCCCC">or</font><font color="#E5E5E5"> not</font><font color="#CCCCCC"> to allow</font><font color="#E5E5E5"> or to deny according to</font>

505
00:19:00,070 --> 00:19:04,240
some type<font color="#CCCCCC"> of profile</font><font color="#E5E5E5"> so overall what we</font>

506
00:19:02,590 --> 00:19:06,550
have here is<font color="#CCCCCC"> like the you</font><font color="#E5E5E5"> know</font>

507
00:19:04,240 --> 00:19:10,059
<font color="#CCCCCC">high-level view any questions by the</font><font color="#E5E5E5"> way</font>

508
00:19:06,550 --> 00:19:11,590
we all good<font color="#CCCCCC"> okay I mean you're all like</font>

509
00:19:10,059 --> 00:19:13,690
in the dark and<font color="#E5E5E5"> there's so much smoke I</font>

510
00:19:11,590 --> 00:19:16,330
can't really<font color="#E5E5E5"> see you but you know we'll</font>

511
00:19:13,690 --> 00:19:18,100
try so now we have the sandbox and we've

512
00:19:16,330 --> 00:19:20,678
ascertained that<font color="#CCCCCC"> the sandbox</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> our</font>

513
00:19:18,100 --> 00:19:22,689
basically number<font color="#E5E5E5"> one enemy so sandbox</font>

514
00:19:20,679 --> 00:19:24,550
<font color="#CCCCCC">escape how do we do that we've grabbed</font>

515
00:19:22,690 --> 00:19:27,820
the sandbox<font color="#CCCCCC"> and it's going</font><font color="#E5E5E5"> to contain us</font>

516
00:19:24,550 --> 00:19:29,139
the way it works<font color="#E5E5E5"> in iOS is a little bit</font>

517
00:19:27,820 --> 00:19:31,990
different from the<font color="#CCCCCC"> way it works in Mac</font>

518
00:19:29,140 --> 00:19:34,210
OS in Mac OS it's actually pretty<font color="#CCCCCC"> lacks</font>

519
00:19:31,990 --> 00:19:38,170
and allows you<font color="#CCCCCC"> to do quite a few</font><font color="#E5E5E5"> things</font>

520
00:19:34,210 --> 00:19:40,210
because<font color="#E5E5E5"> the idea</font><font color="#CCCCCC"> is that in Mac OS</font>

521
00:19:38,170 --> 00:19:42,910
you're like a power user<font color="#E5E5E5"> but in iOS</font>

522
00:19:40,210 --> 00:19:44,920
you're like<font color="#E5E5E5"> very restricted user and you</font>

523
00:19:42,910 --> 00:19:47,950
should be thankful<font color="#E5E5E5"> every</font><font color="#CCCCCC"> day for using</font>

524
00:19:44,920 --> 00:19:51,160
<font color="#CCCCCC">iOS</font><font color="#E5E5E5"> so you should not try to hack it</font><font color="#CCCCCC"> so</font>

525
00:19:47,950 --> 00:19:53,470
they<font color="#CCCCCC"> basically define a</font><font color="#E5E5E5"> built in profile</font>

526
00:19:51,160 --> 00:19:55,570
called container<font color="#E5E5E5"> and then when your app</font>

527
00:19:53,470 --> 00:19:58,179
is deployed it is deployed in slash var

528
00:19:55,570 --> 00:19:59,980
slash containers assuming iOS

529
00:19:58,179 --> 00:20:02,019
<font color="#CCCCCC">Tennant later</font><font color="#E5E5E5"> there's also of our mobile</font>

530
00:19:59,980 --> 00:20:02,649
containers but let's agree<font color="#E5E5E5"> that iOS 10</font>

531
00:20:02,019 --> 00:20:05,110
is our base

532
00:20:02,649 --> 00:20:06,209
so<font color="#E5E5E5"> in</font><font color="#CCCCCC"> var containers as soon as you try</font>

533
00:20:05,110 --> 00:20:09,070
<font color="#CCCCCC">to exit</font>

534
00:20:06,210 --> 00:20:12,340
from var containers<font color="#CCCCCC"> it automatically</font>

535
00:20:09,070 --> 00:20:14,049
because of the<font color="#CCCCCC"> pass</font><font color="#E5E5E5"> starts with</font><font color="#CCCCCC"> str cmp</font>

536
00:20:12,340 --> 00:20:15,279
it starts with that<font color="#CCCCCC"> pass</font><font color="#E5E5E5"> it</font>

537
00:20:14,049 --> 00:20:17,918
automatically<font color="#E5E5E5"> gets quarantined in</font>

538
00:20:15,279 --> 00:20:20,320
sandbox<font color="#CCCCCC"> further</font><font color="#E5E5E5"> to make sure that you're</font>

539
00:20:17,919 --> 00:20:22,690
<font color="#E5E5E5">not going to</font><font color="#CCCCCC"> escape</font><font color="#E5E5E5"> by like directory</font>

540
00:20:20,320 --> 00:20:24,668
traversal<font color="#CCCCCC"> you cannot execute from</font>

541
00:20:22,690 --> 00:20:26,830
anywhere in<font color="#CCCCCC"> var besides</font><font color="#E5E5E5"> of our</font>

542
00:20:24,669 --> 00:20:28,840
containers on<font color="#CCCCCC"> the root filesystem yes</font>

543
00:20:26,830 --> 00:20:31,840
but in var<font color="#E5E5E5"> no virus like your data</font>

544
00:20:28,840 --> 00:20:33,908
partition so you have automatic

545
00:20:31,840 --> 00:20:35,918
confinement<font color="#E5E5E5"> for all of your applications</font>

546
00:20:33,909 --> 00:20:38,499
whether or not you would like<font color="#E5E5E5"> it and</font>

547
00:20:35,919 --> 00:20:40,929
then some<font color="#E5E5E5"> Apple demons may or may</font><font color="#CCCCCC"> not</font>

548
00:20:38,499 --> 00:20:42,460
decide to confine themselves as well<font color="#E5E5E5"> and</font>

549
00:20:40,929 --> 00:20:45,220
<font color="#E5E5E5">that's done</font><font color="#CCCCCC"> by actually a</font><font color="#E5E5E5"> type of</font>

550
00:20:42,460 --> 00:20:46,899
entitlement called<font color="#CCCCCC"> seatbelt profiles</font><font color="#E5E5E5"> the</font>

551
00:20:45,220 --> 00:20:49,720
name seatbelt<font color="#E5E5E5"> is pretty much the</font>

552
00:20:46,899 --> 00:20:51,850
<font color="#CCCCCC">original name of sandbox</font><font color="#E5E5E5"> and the thing</font>

553
00:20:49,720 --> 00:20:54,669
<font color="#CCCCCC">that makes this so hard is</font><font color="#E5E5E5"> that Apple</font>

554
00:20:51,850 --> 00:20:56,469
keeps on modifying it adding profile

555
00:20:54,669 --> 00:20:58,779
actions in every single<font color="#CCCCCC"> version and</font>

556
00:20:56,470 --> 00:21:02,110
needless<font color="#CCCCCC"> to say they do not document</font><font color="#E5E5E5"> any</font>

557
00:20:58,779 --> 00:21:05,169
of this so we've got basically<font color="#CCCCCC"> the</font>

558
00:21:02,110 --> 00:21:07,959
<font color="#E5E5E5">problem that these profiles are</font><font color="#CCCCCC"> very</font>

559
00:21:05,169 --> 00:21:08,889
hard<font color="#E5E5E5"> to determine now in Mac OS they're</font>

560
00:21:07,960 --> 00:21:11,830
actually pretty<font color="#E5E5E5"> easy</font>

561
00:21:08,889 --> 00:21:13,508
they're called SB profiles<font color="#CCCCCC"> and if</font>

562
00:21:11,830 --> 00:21:14,860
they're just basically<font color="#E5E5E5"> in plain text</font><font color="#CCCCCC"> and</font>

563
00:21:13,509 --> 00:21:17,470
let me just<font color="#CCCCCC"> show you that there's two</font>

564
00:21:14,860 --> 00:21:20,498
main locations<font color="#E5E5E5"> for that the first is</font>

565
00:21:17,470 --> 00:21:22,029
system library sandbox<font color="#E5E5E5"> where if you look</font>

566
00:21:20,499 --> 00:21:25,090
<font color="#E5E5E5">at system library sandbox we've got</font>

567
00:21:22,029 --> 00:21:28,269
slash profiles here<font color="#E5E5E5"> that's one the other</font>

568
00:21:25,090 --> 00:21:29,769
<font color="#E5E5E5">is in user share sandbox and the user</font>

569
00:21:28,269 --> 00:21:32,769
share sandbox<font color="#CCCCCC"> there's</font><font color="#E5E5E5"> even more</font><font color="#CCCCCC"> of these</font>

570
00:21:29,769 --> 00:21:34,480
little SBS<font color="#E5E5E5"> now taking any particular SB</font>

571
00:21:32,769 --> 00:21:37,240
as I<font color="#E5E5E5"> don't know like this</font>

572
00:21:34,480 --> 00:21:40,809
KCM thing<font color="#CCCCCC"> so we</font><font color="#E5E5E5"> can just go and see that</font>

573
00:21:37,240 --> 00:21:43,049
<font color="#CCCCCC">there's a very</font><font color="#E5E5E5"> well</font><font color="#CCCCCC"> defined profile</font>

574
00:21:40,809 --> 00:21:45,668
language that profile language is<font color="#CCCCCC"> schema</font>

575
00:21:43,049 --> 00:21:48,369
<font color="#E5E5E5">which is the derivative of Lisp</font><font color="#CCCCCC"> both</font>

576
00:21:45,669 --> 00:21:51,249
languages are<font color="#E5E5E5"> absolutely terrible it's</font>

577
00:21:48,369 --> 00:21:53,168
of<font color="#E5E5E5"> course I had</font><font color="#CCCCCC"> to take again in when I</font>

578
00:21:51,249 --> 00:21:55,539
<font color="#CCCCCC">did my comps</font><font color="#E5E5E5"> I and I promised myself I'm</font>

579
00:21:53,169 --> 00:21:57,190
never touching this<font color="#E5E5E5"> again and oh the</font>

580
00:21:55,539 --> 00:21:59,139
<font color="#CCCCCC">irony that</font><font color="#E5E5E5"> now I have</font><font color="#CCCCCC"> to touch it all</font>

581
00:21:57,190 --> 00:22:00,789
the time but anyways you can see that

582
00:21:59,139 --> 00:22:02,439
this is effectively the language<font color="#E5E5E5"> if you</font>

583
00:22:00,789 --> 00:22:05,230
<font color="#E5E5E5">see a lot of like parentheses it's</font>

584
00:22:02,440 --> 00:22:06,820
always<font color="#E5E5E5"> Lisp</font><font color="#CCCCCC"> and it just by looking at it</font>

585
00:22:05,230 --> 00:22:08,799
you<font color="#CCCCCC"> can figure out just how very well</font>

586
00:22:06,820 --> 00:22:11,260
detailed<font color="#E5E5E5"> is which means it's got regular</font>

587
00:22:08,799 --> 00:22:13,270
expressions<font color="#E5E5E5"> it's got very select</font>

588
00:22:11,260 --> 00:22:14,950
restrictions on which ports which

589
00:22:13,270 --> 00:22:17,020
endpoints<font color="#E5E5E5"> you can look at and so forth</font>

590
00:22:14,950 --> 00:22:18,520
<font color="#CCCCCC">again if you're coming</font><font color="#E5E5E5"> from Android it's</font>

591
00:22:17,020 --> 00:22:20,500
nice to compare this to<font color="#CCCCCC"> the</font><font color="#E5E5E5"> other</font>

592
00:22:18,520 --> 00:22:23,770
operating system Android doesn't<font color="#E5E5E5"> have</font>

593
00:22:20,500 --> 00:22:26,320
anything<font color="#E5E5E5"> even remotely close to this</font><font color="#CCCCCC"> yes</font>

594
00:22:23,770 --> 00:22:28,540
we have SC<font color="#CCCCCC"> Linux and yes we have second</font>

595
00:22:26,320 --> 00:22:30,790
<font color="#CCCCCC">PPF but we don't have the detailed</font>

596
00:22:28,540 --> 00:22:33,490
argument inspection<font color="#E5E5E5"> that you see over</font>

597
00:22:30,790 --> 00:22:35,950
<font color="#CCCCCC">here</font><font color="#E5E5E5"> now the nice</font><font color="#CCCCCC"> thing about in Mac OS</font>

598
00:22:33,490 --> 00:22:38,260
is that these are you know<font color="#E5E5E5"> scheme but</font>

599
00:22:35,950 --> 00:22:40,600
<font color="#E5E5E5">you can at</font><font color="#CCCCCC"> least read it in iOS</font><font color="#E5E5E5"> that's</font>

600
00:22:38,260 --> 00:22:43,540
not the case<font color="#CCCCCC"> in</font><font color="#E5E5E5"> iOS they're all compiled</font>

601
00:22:40,600 --> 00:22:45,159
into<font color="#CCCCCC"> the actual sandbox kext</font><font color="#E5E5E5"> and in that</font>

602
00:22:43,540 --> 00:22:47,770
case you have<font color="#CCCCCC"> to decompile them</font><font color="#E5E5E5"> now</font>

603
00:22:45,160 --> 00:22:50,080
again because<font color="#E5E5E5"> profiles change in every</font>

604
00:22:47,770 --> 00:22:52,270
<font color="#E5E5E5">single version the</font><font color="#CCCCCC"> D compilers break in</font>

605
00:22:50,080 --> 00:22:54,250
every single<font color="#E5E5E5"> version there's one very</font>

606
00:22:52,270 --> 00:22:55,870
<font color="#CCCCCC">good</font><font color="#E5E5E5"> D compiler which is called</font>

607
00:22:54,250 --> 00:22:58,300
<font color="#CCCCCC">sandblaster and there's a bunch</font><font color="#E5E5E5"> of tools</font>

608
00:22:55,870 --> 00:23:00,520
<font color="#CCCCCC">that I wrote</font><font color="#E5E5E5"> that enable you to compile</font>

609
00:22:58,300 --> 00:23:02,350
and when you compile you can basically

610
00:23:00,520 --> 00:23:03,970
<font color="#E5E5E5">create</font><font color="#CCCCCC"> your own profiles and see what</font>

611
00:23:02,350 --> 00:23:05,889
they compile to so it's<font color="#E5E5E5"> kind of like a</font>

612
00:23:03,970 --> 00:23:08,700
chosen plaintext<font color="#E5E5E5"> type of attack in order</font>

613
00:23:05,890 --> 00:23:12,400
<font color="#E5E5E5">to figure out how to reverse this thing</font>

614
00:23:08,700 --> 00:23:13,930
<font color="#E5E5E5">so we have basically that sandbox we</font>

615
00:23:12,400 --> 00:23:15,970
have a profile but now we need<font color="#E5E5E5"> to escape</font>

616
00:23:13,930 --> 00:23:18,790
it so how do we<font color="#E5E5E5"> escape it we've got two</font>

617
00:23:15,970 --> 00:23:21,040
<font color="#E5E5E5">basic</font><font color="#CCCCCC"> methods</font><font color="#E5E5E5"> I was saying already that</font>

618
00:23:18,790 --> 00:23:23,649
the method that we<font color="#CCCCCC"> normally use that's</font>

619
00:23:21,040 --> 00:23:26,860
the<font color="#E5E5E5"> common method is to find some type</font>

620
00:23:23,650 --> 00:23:32,380
of service<font color="#CCCCCC"> or some type of</font><font color="#E5E5E5"> direct kernel</font>

621
00:23:26,860 --> 00:23:35,530
IO kit<font color="#E5E5E5"> or system call that can okay</font><font color="#CCCCCC"> that</font>

622
00:23:32,380 --> 00:23:38,350
can basically be attacked<font color="#E5E5E5"> through the</font>

623
00:23:35,530 --> 00:23:40,360
sandbox profile so if you can get direct

624
00:23:38,350 --> 00:23:42,310
kernel attack surface<font color="#E5E5E5"> then that's fine</font>

625
00:23:40,360 --> 00:23:44,590
<font color="#E5E5E5">but that really is something that</font>

626
00:23:42,310 --> 00:23:46,600
<font color="#CCCCCC">requires two things</font><font color="#E5E5E5"> it requires</font><font color="#CCCCCC"> a kernel</font>

627
00:23:44,590 --> 00:23:48,340
bug<font color="#E5E5E5"> which of</font><font color="#CCCCCC"> course for which you're</font>

628
00:23:46,600 --> 00:23:51,070
going<font color="#E5E5E5"> to have an exploit and it requires</font>

629
00:23:48,340 --> 00:23:54,070
the visibility of that<font color="#E5E5E5"> particular attack</font>

630
00:23:51,070 --> 00:23:55,990
surface from your sandbox<font color="#E5E5E5"> which may or</font>

631
00:23:54,070 --> 00:23:58,060
may not<font color="#E5E5E5"> be the case there's a lot more</font>

632
00:23:55,990 --> 00:24:00,220
kernel bugs<font color="#CCCCCC"> than there are sandbox</font>

633
00:23:58,060 --> 00:24:01,480
accessible bugs so method<font color="#CCCCCC"> number two</font>

634
00:24:00,220 --> 00:24:03,130
which is<font color="#CCCCCC"> actually number one</font><font color="#E5E5E5"> in this</font>

635
00:24:01,480 --> 00:24:05,590
slide is<font color="#E5E5E5"> to find some other type of</font>

636
00:24:03,130 --> 00:24:08,710
service<font color="#CCCCCC"> we find a</font><font color="#E5E5E5"> service</font><font color="#CCCCCC"> that we can</font>

637
00:24:05,590 --> 00:24:10,270
<font color="#CCCCCC">access over</font><font color="#E5E5E5"> mock messages or</font><font color="#CCCCCC"> X</font><font color="#E5E5E5"> PC which</font>

638
00:24:08,710 --> 00:24:13,270
<font color="#E5E5E5">is basically some type of remote</font>

639
00:24:10,270 --> 00:24:15,610
procedure call<font color="#E5E5E5"> and in doing</font><font color="#CCCCCC"> so we try to</font>

640
00:24:13,270 --> 00:24:17,830
gain<font color="#E5E5E5"> cone execution there and that's the</font>

641
00:24:15,610 --> 00:24:19,479
general<font color="#E5E5E5"> type of buffer overflow or</font>

642
00:24:17,830 --> 00:24:21,639
integer overflow that<font color="#E5E5E5"> you get in a</font>

643
00:24:19,480 --> 00:24:24,220
message<font color="#E5E5E5"> which in turn turns into code</font>

644
00:24:21,640 --> 00:24:26,259
execution<font color="#E5E5E5"> through stuff like job and</font>

645
00:24:24,220 --> 00:24:29,500
and you know your<font color="#E5E5E5"> favorite exploitation</font>

646
00:24:26,259 --> 00:24:31,269
technique<font color="#E5E5E5"> so there's one other thing to</font>

647
00:24:29,500 --> 00:24:35,440
<font color="#E5E5E5">consider and that's a hardening measure</font>

648
00:24:31,269 --> 00:24:37,330
they put in iOS around<font color="#CCCCCC"> ten some of you</font>

649
00:24:35,440 --> 00:24:39,580
<font color="#E5E5E5">in Mac OS may be familiar</font><font color="#CCCCCC"> with sip</font>

650
00:24:37,330 --> 00:24:41,470
system<font color="#CCCCCC"> integrity protection what they</font>

651
00:24:39,580 --> 00:24:43,840
also called ruthless<font color="#E5E5E5"> they have pretty</font>

652
00:24:41,470 --> 00:24:45,490
<font color="#CCCCCC">much the</font><font color="#E5E5E5"> same thing only</font><font color="#CCCCCC"> stronger in iOS</font>

653
00:24:43,840 --> 00:24:47,649
and they call it<font color="#E5E5E5"> the platform profile</font>

654
00:24:45,490 --> 00:24:50,259
the platform profile is<font color="#E5E5E5"> something that</font>

655
00:24:47,649 --> 00:24:52,840
<font color="#E5E5E5">effects everything in the system</font><font color="#CCCCCC"> every</font>

656
00:24:50,259 --> 00:24:54,399
<font color="#CCCCCC">single process including launched</font>

657
00:24:52,840 --> 00:24:56,168
including all the other processes

658
00:24:54,399 --> 00:24:59,289
including<font color="#E5E5E5"> Apple's own demons and that</font>

659
00:24:56,169 --> 00:25:01,840
<font color="#CCCCCC">platform profile is basically</font><font color="#E5E5E5"> fully</font>

660
00:24:59,289 --> 00:25:04,120
restrictive just like sip<font color="#CCCCCC"> but unlike sip</font>

661
00:25:01,840 --> 00:25:06,250
there's no<font color="#E5E5E5"> CSR util that you can undo it</font>

662
00:25:04,120 --> 00:25:08,350
<font color="#CCCCCC">and</font><font color="#E5E5E5"> so using this platform profile</font>

663
00:25:06,250 --> 00:25:10,659
you're basically doing the system policy

664
00:25:08,350 --> 00:25:12,399
which says that<font color="#CCCCCC"> you can only execute</font>

665
00:25:10,659 --> 00:25:15,279
from various locations

666
00:25:12,399 --> 00:25:17,158
I mentioned<font color="#E5E5E5"> var containers as one but</font>

667
00:25:15,279 --> 00:25:19,990
also there's a whitelist for s<font color="#E5E5E5"> bin</font>

668
00:25:17,159 --> 00:25:22,980
developer bin user bin<font color="#E5E5E5"> and so forth you</font>

669
00:25:19,990 --> 00:25:26,049
can't do anything<font color="#E5E5E5"> else</font><font color="#CCCCCC"> you can't execute</font>

670
00:25:22,980 --> 00:25:28,330
third-party binaries now in<font color="#E5E5E5"> iOS 11 and</font>

671
00:25:26,049 --> 00:25:31,269
let's launch D is the one executing<font color="#E5E5E5"> them</font>

672
00:25:28,330 --> 00:25:33,418
<font color="#E5E5E5">that's a royal pain and we've got system</font>

673
00:25:31,269 --> 00:25:36,309
calls<font color="#E5E5E5"> that you can't do unless you're</font>

674
00:25:33,419 --> 00:25:38,529
somehow escaping<font color="#E5E5E5"> this for example mount</font>

675
00:25:36,309 --> 00:25:40,299
<font color="#E5E5E5">and why would we need mount because one</font>

676
00:25:38,529 --> 00:25:42,970
of the basic<font color="#CCCCCC"> steps is to</font><font color="#E5E5E5"> remount the</font>

677
00:25:40,299 --> 00:25:45,070
<font color="#CCCCCC">filesystem and you can't do that</font><font color="#E5E5E5"> so the</font>

678
00:25:42,970 --> 00:25:47,710
<font color="#E5E5E5">only ways out of this would be the</font>

679
00:25:45,070 --> 00:25:50,500
<font color="#CCCCCC">common way which is</font><font color="#E5E5E5"> getting kernel</font>

680
00:25:47,710 --> 00:25:52,029
memory<font color="#CCCCCC"> readwrite and assigning yourself</font>

681
00:25:50,500 --> 00:25:53,980
the kernel credentials in other words

682
00:25:52,029 --> 00:25:55,389
even<font color="#E5E5E5"> though your user mode process</font>

683
00:25:53,980 --> 00:25:57,580
you're pretending<font color="#CCCCCC"> to</font><font color="#E5E5E5"> be the kernel and</font>

684
00:25:55,389 --> 00:25:59,500
the kernel is obviously exempt<font color="#CCCCCC"> because</font>

685
00:25:57,580 --> 00:26:01,330
the kernel cannot be checked<font color="#E5E5E5"> because</font><font color="#CCCCCC"> the</font>

686
00:25:59,500 --> 00:26:03,370
kernel is<font color="#E5E5E5"> the one doing</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> checking so</font>

687
00:26:01,330 --> 00:26:05,678
that's one number two is patching that

688
00:26:03,370 --> 00:26:07,928
platform profile if you can find it in

689
00:26:05,679 --> 00:26:10,539
memory<font color="#E5E5E5"> and if you can figure out that</font>

690
00:26:07,929 --> 00:26:13,179
<font color="#E5E5E5">Apple is not protecting it enough and</font>

691
00:26:10,539 --> 00:26:15,399
the last thing is to<font color="#E5E5E5"> get entitlements</font>

692
00:26:13,179 --> 00:26:17,620
<font color="#E5E5E5">because even though we've got this very</font>

693
00:26:15,399 --> 00:26:19,570
<font color="#E5E5E5">restrictive profile there are some</font>

694
00:26:17,620 --> 00:26:22,330
utilities that<font color="#CCCCCC"> still need to bypass that</font>

695
00:26:19,570 --> 00:26:24,399
for example<font color="#E5E5E5"> fsck needs to access</font><font color="#CCCCCC"> blocked</font>

696
00:26:22,330 --> 00:26:25,960
<font color="#E5E5E5">devices to do a filesystem check so that</font>

697
00:26:24,399 --> 00:26:27,969
<font color="#E5E5E5">means there's a set of entitlements</font>

698
00:26:25,960 --> 00:26:30,340
<font color="#E5E5E5">which are commonly called</font><font color="#CCCCCC"> com</font><font color="#E5E5E5"> Apple</font>

699
00:26:27,970 --> 00:26:33,009
<font color="#CCCCCC">ruthless something and they all enable</font>

700
00:26:30,340 --> 00:26:35,529
you to do the effective bypass of the

701
00:26:33,009 --> 00:26:37,520
system profile in this way now about

702
00:26:35,529 --> 00:26:39,380
these entitlements we've got so mad

703
00:26:37,520 --> 00:26:42,500
<font color="#CCCCCC">and I'm</font><font color="#E5E5E5"> just gonna give you some simple</font>

704
00:26:39,380 --> 00:26:45,080
examples<font color="#E5E5E5"> again going here I'm gonna use</font>

705
00:26:42,500 --> 00:26:46,460
<font color="#CCCCCC">some I don't know arbitrary binary for</font>

706
00:26:45,080 --> 00:26:49,030
example if you're looking<font color="#E5E5E5"> here I'm doing</font>

707
00:26:46,460 --> 00:26:53,210
this on Mac OS so if you're<font color="#CCCCCC"> looking at</font>

708
00:26:49,030 --> 00:26:55,820
user<font color="#CCCCCC"> Lebec SEC ext ext is your kernel</font>

709
00:26:53,210 --> 00:26:58,640
extension<font color="#CCCCCC"> daemon this has entitlements</font>

710
00:26:55,820 --> 00:27:01,730
<font color="#E5E5E5">yeah for some reason it's still a 386</font>

711
00:26:58,640 --> 00:27:04,730
slice<font color="#E5E5E5"> I don't know why but let's do x86</font>

712
00:27:01,730 --> 00:27:07,490
64<font color="#E5E5E5"> and so you see</font><font color="#CCCCCC"> here that there's the</font>

713
00:27:04,730 --> 00:27:09,170
<font color="#CCCCCC">com apple private get kicks to info that</font>

714
00:27:07,490 --> 00:27:11,390
enables you to read kernel information

715
00:27:09,170 --> 00:27:13,850
<font color="#E5E5E5">for Linux people that's like</font><font color="#CCCCCC"> LS</font><font color="#E5E5E5"> mod</font>

716
00:27:11,390 --> 00:27:15,380
we've got<font color="#CCCCCC"> com</font><font color="#E5E5E5"> Apple rootless text</font>

717
00:27:13,850 --> 00:27:18,709
management and that effectively does

718
00:27:15,380 --> 00:27:20,240
insmod<font color="#E5E5E5"> and</font><font color="#CCCCCC"> re mod which is KX load</font><font color="#E5E5E5"> and</font>

719
00:27:18,710 --> 00:27:21,920
we also have some file system

720
00:27:20,240 --> 00:27:23,720
permissions whenever you see<font color="#CCCCCC"> com Apple</font>

721
00:27:21,920 --> 00:27:26,120
rootless storage<font color="#E5E5E5"> that means there's some</font>

722
00:27:23,720 --> 00:27:28,580
<font color="#E5E5E5">file system locations and if you look at</font>

723
00:27:26,120 --> 00:27:30,350
the various iOS binaries and again

724
00:27:28,580 --> 00:27:33,110
there's just<font color="#E5E5E5"> so many here I've got the</font>

725
00:27:30,350 --> 00:27:36,709
file system open here<font color="#E5E5E5"> just some random</font>

726
00:27:33,110 --> 00:27:39,620
<font color="#CCCCCC">look at I don't know</font><font color="#E5E5E5"> s bin or you can</font>

727
00:27:36,710 --> 00:27:41,330
see for<font color="#E5E5E5"> example here in user Lib</font><font color="#CCCCCC"> x''k</font>

728
00:27:39,620 --> 00:27:43,129
where all the demons<font color="#CCCCCC"> are then you'll see</font>

729
00:27:41,330 --> 00:27:46,970
that virtually every single<font color="#E5E5E5"> one of those</font>

730
00:27:43,130 --> 00:27:49,070
is also<font color="#E5E5E5"> entitled for example NFC D which</font>

731
00:27:46,970 --> 00:27:51,230
<font color="#CCCCCC">is in</font><font color="#E5E5E5"> user</font><font color="#CCCCCC"> Lebec sec this is the one</font>

732
00:27:49,070 --> 00:27:52,970
that does your<font color="#CCCCCC"> near-field connectivity</font>

733
00:27:51,230 --> 00:27:55,070
<font color="#E5E5E5">for Apple pay and stuff so you can see</font>

734
00:27:52,970 --> 00:27:57,140
it's got all<font color="#E5E5E5"> these host of entitlements</font>

735
00:27:55,070 --> 00:27:58,970
now as you<font color="#E5E5E5"> can</font><font color="#CCCCCC"> see I'm using</font><font color="#E5E5E5"> a tool here</font>

736
00:27:57,140 --> 00:28:00,530
J tool which effectively looks at the

737
00:27:58,970 --> 00:28:01,940
<font color="#E5E5E5">binary and that means that these</font>

738
00:28:00,530 --> 00:28:03,170
endowments<font color="#E5E5E5"> are part</font><font color="#CCCCCC"> of the</font><font color="#E5E5E5"> binary</font>

739
00:28:01,940 --> 00:28:05,840
they're part<font color="#E5E5E5"> of the</font><font color="#CCCCCC"> so-called</font><font color="#E5E5E5"> code</font>

740
00:28:03,170 --> 00:28:08,780
signature<font color="#E5E5E5"> and</font><font color="#CCCCCC"> that in fact is something</font>

741
00:28:05,840 --> 00:28:11,270
<font color="#E5E5E5">that makes them strong because if we</font>

742
00:28:08,780 --> 00:28:14,020
take as a given that code signing works

743
00:28:11,270 --> 00:28:16,310
<font color="#E5E5E5">then we realize that it cannot be broken</font>

744
00:28:14,020 --> 00:28:17,840
<font color="#E5E5E5">axiomatically we believe it and</font><font color="#CCCCCC"> that</font>

745
00:28:16,310 --> 00:28:19,850
<font color="#E5E5E5">means that whatever we find in the</font>

746
00:28:17,840 --> 00:28:22,189
entitlements is automatically verified

747
00:28:19,850 --> 00:28:24,500
and vetted by Apple and so this is the

748
00:28:22,190 --> 00:28:26,650
main thing that<font color="#E5E5E5"> Apple now uses and the</font>

749
00:28:24,500 --> 00:28:30,080
number of entitlements have<font color="#E5E5E5"> like</font>

750
00:28:26,650 --> 00:28:31,970
exploded virtually exploded<font color="#E5E5E5"> and as I</font>

751
00:28:30,080 --> 00:28:34,610
point out in here in the next<font color="#CCCCCC"> slide also</font>

752
00:28:31,970 --> 00:28:37,400
<font color="#E5E5E5">I maintain what I call an entitlement</font>

753
00:28:34,610 --> 00:28:40,699
database let me<font color="#E5E5E5"> just fire up Safari here</font>

754
00:28:37,400 --> 00:28:43,130
for a second which<font color="#CCCCCC"> is something that I</font>

755
00:28:40,700 --> 00:28:45,370
do in<font color="#E5E5E5"> every</font><font color="#CCCCCC"> version that enables you to</font>

756
00:28:43,130 --> 00:28:47,600
look at the various entitlements

757
00:28:45,370 --> 00:28:49,550
<font color="#CCCCCC">possessing whatever entitlement or</font>

758
00:28:47,600 --> 00:28:51,020
whatever executable<font color="#E5E5E5"> and as you can see</font>

759
00:28:49,550 --> 00:28:53,960
<font color="#CCCCCC">here there's about</font><font color="#E5E5E5"> 11</font>

760
00:28:51,020 --> 00:28:55,910
93<font color="#CCCCCC"> and iOS 12</font><font color="#E5E5E5"> in now it's 11</font><font color="#CCCCCC"> if you look</font>

761
00:28:53,960 --> 00:28:58,460
at<font color="#E5E5E5"> at io s 12 the number</font><font color="#CCCCCC"> actually</font>

762
00:28:55,910 --> 00:29:02,390
increases to<font color="#CCCCCC"> 1359 there's just like so</font>

763
00:28:58,460 --> 00:29:04,010
many of those<font color="#E5E5E5"> and ironically the the IP</font>

764
00:29:02,390 --> 00:29:05,600
address range that gets the most<font color="#E5E5E5"> hits</font>

765
00:29:04,010 --> 00:29:08,510
for this is Apple itself

766
00:29:05,600 --> 00:29:09,919
so apparently Apple 17<font color="#CCCCCC"> xxx they don't</font>

767
00:29:08,510 --> 00:29:11,870
know their own<font color="#E5E5E5"> entitlements apparently</font>

768
00:29:09,920 --> 00:29:14,690
so we've got so<font color="#E5E5E5"> many of those and again</font>

769
00:29:11,870 --> 00:29:16,520
<font color="#CCCCCC">we have</font><font color="#E5E5E5"> to somehow defeat them if you</font>

770
00:29:14,690 --> 00:29:19,010
can defeat<font color="#CCCCCC"> code-signing you're done</font><font color="#E5E5E5"> if</font>

771
00:29:16,520 --> 00:29:21,560
you can't defeat code-signing<font color="#CCCCCC"> you've got</font>

772
00:29:19,010 --> 00:29:23,900
a problem<font color="#CCCCCC"> so mostly what</font><font color="#E5E5E5"> you would do is</font>

773
00:29:21,560 --> 00:29:26,300
you'd either get code execution<font color="#E5E5E5"> in some</font>

774
00:29:23,900 --> 00:29:28,310
daemon that has an<font color="#CCCCCC"> entitlement thereby</font>

775
00:29:26,300 --> 00:29:29,899
effectively resting the<font color="#E5E5E5"> in tellement</font>

776
00:29:28,310 --> 00:29:31,970
from it kind of<font color="#E5E5E5"> like what you used</font><font color="#CCCCCC"> to do</font>

777
00:29:29,900 --> 00:29:33,680
in old<font color="#CCCCCC"> unix with set UID</font>

778
00:29:31,970 --> 00:29:36,890
you can think of<font color="#E5E5E5"> it as an extension of</font>

779
00:29:33,680 --> 00:29:39,080
set UID<font color="#CCCCCC"> or if you have kernel readwrite</font>

780
00:29:36,890 --> 00:29:40,400
<font color="#E5E5E5">you can start patching</font><font color="#CCCCCC"> and what you</font>

781
00:29:39,080 --> 00:29:42,530
would<font color="#CCCCCC"> patches you'd patch not one</font>

782
00:29:40,400 --> 00:29:45,530
location<font color="#CCCCCC"> but two locations the first is</font>

783
00:29:42,530 --> 00:29:47,210
your own entitlement blob which is part

784
00:29:45,530 --> 00:29:49,760
of<font color="#E5E5E5"> your V node part of the file</font>

785
00:29:47,210 --> 00:29:51,680
representation of your executable so

786
00:29:49,760 --> 00:29:53,540
this gets<font color="#E5E5E5"> loaded into memory and that</font>

787
00:29:51,680 --> 00:29:55,730
turns into what we call a V node object

788
00:29:53,540 --> 00:29:58,159
<font color="#CCCCCC">which is like an inode in memory and</font>

789
00:29:55,730 --> 00:30:00,980
that V node points to what we call<font color="#E5E5E5"> the</font>

790
00:29:58,160 --> 00:30:02,420
UBC or unified buffer cache and that<font color="#CCCCCC"> in</font>

791
00:30:00,980 --> 00:30:04,430
the unified buffer cache is your little

792
00:30:02,420 --> 00:30:06,770
blob and if you can get to<font color="#E5E5E5"> that blob</font>

793
00:30:04,430 --> 00:30:09,140
<font color="#E5E5E5">after it's already</font><font color="#CCCCCC"> been parsed</font><font color="#E5E5E5"> and</font>

794
00:30:06,770 --> 00:30:11,240
vetted<font color="#E5E5E5"> you can just do any type of mem</font>

795
00:30:09,140 --> 00:30:13,010
copy over it and it's fine<font color="#E5E5E5"> but it turns</font>

796
00:30:11,240 --> 00:30:14,750
out it's<font color="#CCCCCC"> not enough because</font><font color="#E5E5E5"> there's</font>

797
00:30:13,010 --> 00:30:17,060
certain<font color="#CCCCCC"> entitlements and if you're</font>

798
00:30:14,750 --> 00:30:19,550
familiar<font color="#E5E5E5"> these are for example get tasks</font>

799
00:30:17,060 --> 00:30:21,530
allow tasks<font color="#CCCCCC"> forbid allow the ones that</font>

800
00:30:19,550 --> 00:30:24,139
really have far-reaching impact for

801
00:30:21,530 --> 00:30:26,360
debugging<font color="#E5E5E5"> and those are validated by</font><font color="#CCCCCC"> MP</font>

802
00:30:24,140 --> 00:30:28,250
<font color="#E5E5E5">by Apple mobile file integrity</font><font color="#CCCCCC"> and so</font>

803
00:30:26,360 --> 00:30:30,649
there's another cache of them that you

804
00:30:28,250 --> 00:30:32,600
would<font color="#E5E5E5"> have to defeat yourself</font><font color="#CCCCCC"> now</font>

805
00:30:30,650 --> 00:30:33,920
fortunately<font color="#E5E5E5"> this isn't data and this</font><font color="#CCCCCC"> is</font>

806
00:30:32,600 --> 00:30:34,490
still doable<font color="#E5E5E5"> so how does it actually</font>

807
00:30:33,920 --> 00:30:37,220
<font color="#E5E5E5">work</font>

808
00:30:34,490 --> 00:30:38,990
<font color="#E5E5E5">you've got the process</font><font color="#CCCCCC"> list</font><font color="#E5E5E5"> the process</font>

809
00:30:37,220 --> 00:30:42,620
<font color="#E5E5E5">list is always accessible through a</font>

810
00:30:38,990 --> 00:30:44,360
symbol which is either exported or in

811
00:30:42,620 --> 00:30:46,070
the new kernels<font color="#E5E5E5"> nothing's exported</font><font color="#CCCCCC"> but</font>

812
00:30:44,360 --> 00:30:47,659
<font color="#E5E5E5">you can find it with</font><font color="#CCCCCC"> another tool</font><font color="#E5E5E5"> I</font>

813
00:30:46,070 --> 00:30:49,669
wrote which is called<font color="#CCCCCC"> joker so we find</font>

814
00:30:47,660 --> 00:30:52,730
that<font color="#CCCCCC"> it starts</font><font color="#E5E5E5"> at this current proc</font>

815
00:30:49,670 --> 00:30:55,130
process<font color="#E5E5E5"> the Kern proc actually points</font><font color="#CCCCCC"> to</font>

816
00:30:52,730 --> 00:30:57,800
a fake process that's your PID<font color="#CCCCCC"> zero</font>

817
00:30:55,130 --> 00:30:59,960
which is also in task words that<font color="#E5E5E5"> would</font>

818
00:30:57,800 --> 00:31:02,360
<font color="#E5E5E5">be the kernel task but then this then</font>

819
00:30:59,960 --> 00:31:04,940
iterates<font color="#E5E5E5"> and you can go over</font><font color="#CCCCCC"> the</font><font color="#E5E5E5"> list</font>

820
00:31:02,360 --> 00:31:07,250
and you<font color="#CCCCCC"> can find PID</font><font color="#E5E5E5"> 1p</font><font color="#CCCCCC"> I</font>

821
00:31:04,940 --> 00:31:09,680
- and all the various<font color="#CCCCCC"> pids as a linked</font>

822
00:31:07,250 --> 00:31:11,780
list<font color="#E5E5E5"> every one of these processes is</font>

823
00:31:09,680 --> 00:31:14,240
this<font color="#CCCCCC"> humungous structure this</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> only</font>

824
00:31:11,780 --> 00:31:16,310
<font color="#CCCCCC">just a very small snippet of it</font><font color="#E5E5E5"> but you</font>

825
00:31:14,240 --> 00:31:19,310
<font color="#E5E5E5">can see that it</font><font color="#CCCCCC"> has for example your</font>

826
00:31:16,310 --> 00:31:21,290
<font color="#E5E5E5">cached UID and GID</font><font color="#CCCCCC"> this is familiar to</font>

827
00:31:19,310 --> 00:31:24,200
all<font color="#E5E5E5"> the UNIX</font><font color="#CCCCCC"> people and there's also</font>

828
00:31:21,290 --> 00:31:26,840
over here<font color="#CCCCCC"> in the bottom P you cred</font><font color="#E5E5E5"> which</font>

829
00:31:24,200 --> 00:31:28,430
used<font color="#E5E5E5"> to be at offset 256 but they keep</font>

830
00:31:26,840 --> 00:31:30,649
changing that because they keep

831
00:31:28,430 --> 00:31:33,230
<font color="#CCCCCC">modifying their fields of</font><font color="#E5E5E5"> course this</font>

832
00:31:30,650 --> 00:31:35,390
points to a you cred and<font color="#E5E5E5"> that you cred</font>

833
00:31:33,230 --> 00:31:37,640
has your actual<font color="#E5E5E5"> real UID and your real</font>

834
00:31:35,390 --> 00:31:40,720
<font color="#E5E5E5">GID</font><font color="#CCCCCC"> so this is basically where you have</font>

835
00:31:37,640 --> 00:31:43,220
501 501 you're gonna patch that to<font color="#CCCCCC"> 0</font><font color="#E5E5E5"> and</font>

836
00:31:40,720 --> 00:31:45,740
more importantly<font color="#E5E5E5"> than that</font><font color="#CCCCCC"> there's this</font>

837
00:31:43,220 --> 00:31:47,420
<font color="#E5E5E5">thing over</font><font color="#CCCCCC"> here which is a label and</font>

838
00:31:45,740 --> 00:31:50,270
what is that label<font color="#E5E5E5"> this</font><font color="#CCCCCC"> is the</font>

839
00:31:47,420 --> 00:31:53,150
credential label which then ties in to

840
00:31:50,270 --> 00:31:54,950
the various<font color="#CCCCCC"> Mac frameworks so this</font>

841
00:31:53,150 --> 00:31:57,230
<font color="#E5E5E5">couldn't all fit in one slide so</font><font color="#CCCCCC"> now</font>

842
00:31:54,950 --> 00:31:59,660
consider<font color="#CCCCCC"> that we've got the CR label now</font>

843
00:31:57,230 --> 00:32:02,540
this<font color="#E5E5E5"> goes to a</font><font color="#CCCCCC"> Strutt label and then</font>

844
00:31:59,660 --> 00:32:05,180
we've got<font color="#E5E5E5"> little slots slot</font><font color="#CCCCCC"> numbers 0 is</font>

845
00:32:02,540 --> 00:32:07,520
taken<font color="#E5E5E5"> by</font><font color="#CCCCCC"> an fie slot number 1 is taken</font>

846
00:32:05,180 --> 00:32:09,530
by the sandbox<font color="#E5E5E5"> now of course this means</font>

847
00:32:07,520 --> 00:32:13,220
that this<font color="#E5E5E5"> is somewhere in kernel</font><font color="#CCCCCC"> memory</font>

848
00:32:09,530 --> 00:32:15,620
and this<font color="#CCCCCC"> is</font><font color="#E5E5E5"> entirely patchable so if you</font>

849
00:32:13,220 --> 00:32:16,970
patch this<font color="#E5E5E5"> there is no thing that Apple</font>

850
00:32:15,620 --> 00:32:18,830
can do against this patching because

851
00:32:16,970 --> 00:32:20,750
this is impure data and therefore<font color="#CCCCCC"> you</font>

852
00:32:18,830 --> 00:32:23,360
basically get<font color="#CCCCCC"> everything you want</font>

853
00:32:20,750 --> 00:32:24,980
because you can automatically elevate

854
00:32:23,360 --> 00:32:26,959
your privileges and so forth<font color="#CCCCCC"> again a</font>

855
00:32:24,980 --> 00:32:31,520
<font color="#E5E5E5">simple</font><font color="#CCCCCC"> example which I'll show</font><font color="#E5E5E5"> you over</font>

856
00:32:26,960 --> 00:32:33,680
<font color="#CCCCCC">here</font><font color="#E5E5E5"> because</font><font color="#CCCCCC"> I have been in</font><font color="#E5E5E5"> Mac OS a</font>

857
00:32:31,520 --> 00:32:36,560
simple tool that<font color="#E5E5E5"> I wrote for</font><font color="#CCCCCC"> this so I'm</font>

858
00:32:33,680 --> 00:32:40,010
just<font color="#E5E5E5"> gonna be rude</font><font color="#CCCCCC"> and I'll just do</font>

859
00:32:36,560 --> 00:32:42,020
snoop<font color="#E5E5E5"> walk</font><font color="#CCCCCC"> proc this is all the process</font>

860
00:32:40,010 --> 00:32:44,150
list<font color="#CCCCCC"> okay so this is all the process</font>

861
00:32:42,020 --> 00:32:47,120
list and you can<font color="#CCCCCC"> see</font><font color="#E5E5E5"> every process here</font>

862
00:32:44,150 --> 00:32:49,910
has you know this is the view<font color="#E5E5E5"> in memory</font>

863
00:32:47,120 --> 00:32:51,409
so there's the UID the GID<font color="#CCCCCC"> the threads</font>

864
00:32:49,910 --> 00:32:53,810
what the thread is doing the file

865
00:32:51,410 --> 00:32:56,000
descriptors and over here we've<font color="#CCCCCC"> got</font><font color="#E5E5E5"> the</font>

866
00:32:53,810 --> 00:32:58,700
amphi slot of<font color="#E5E5E5"> the cached entitlements</font>

867
00:32:56,000 --> 00:33:01,550
and may or may not<font color="#CCCCCC"> have a sandbox slot</font>

868
00:32:58,700 --> 00:33:04,010
<font color="#E5E5E5">okay in iOS everything has a sandbox</font>

869
00:33:01,550 --> 00:33:06,050
slot in Mac OS not necessarily<font color="#E5E5E5"> because</font>

870
00:33:04,010 --> 00:33:07,760
you don't have full sandboxing and

871
00:33:06,050 --> 00:33:10,010
everything<font color="#E5E5E5"> and then if we just</font><font color="#CCCCCC"> look at a</font>

872
00:33:07,760 --> 00:33:12,710
particular<font color="#E5E5E5"> process for</font><font color="#CCCCCC"> example I don't</font>

873
00:33:10,010 --> 00:33:16,490
<font color="#CCCCCC">know</font><font color="#E5E5E5"> let's look at I don't know kekstee</font>

874
00:33:12,710 --> 00:33:18,759
so way where is<font color="#CCCCCC"> KX T</font><font color="#E5E5E5"> KX T is this guy so</font>

875
00:33:16,490 --> 00:33:21,519
snoop and<font color="#E5E5E5"> then dump the</font><font color="#CCCCCC"> PI</font>

876
00:33:18,759 --> 00:33:23,049
which is usually<font color="#CCCCCC"> 45</font><font color="#E5E5E5"> 46</font><font color="#CCCCCC"> and you can see</font>

877
00:33:21,519 --> 00:33:24,820
right<font color="#E5E5E5"> here that we've got</font><font color="#CCCCCC"> these</font><font color="#E5E5E5"> very</font>

878
00:33:23,049 --> 00:33:26,799
same entitlements<font color="#E5E5E5"> that we saw with</font><font color="#CCCCCC"> Jay</font>

879
00:33:24,820 --> 00:33:29,649
tool<font color="#E5E5E5"> but now they're</font><font color="#CCCCCC"> cashed</font><font color="#E5E5E5"> as a</font>

880
00:33:26,799 --> 00:33:31,089
<font color="#E5E5E5">dictionary and also again no sandbox lot</font>

881
00:33:29,649 --> 00:33:34,389
if I were to look at<font color="#CCCCCC"> something like</font>

882
00:33:31,089 --> 00:33:35,889
preview or some<font color="#E5E5E5"> third-party app from</font>

883
00:33:34,389 --> 00:33:39,129
applications<font color="#CCCCCC"> then most of</font><font color="#E5E5E5"> these are</font>

884
00:33:35,889 --> 00:33:40,928
actually<font color="#CCCCCC"> sandboxed Apple</font><font color="#E5E5E5"> sandboxes</font>

885
00:33:39,129 --> 00:33:42,458
themselves<font color="#CCCCCC"> voluntarily by means of an</font>

886
00:33:40,929 --> 00:33:44,139
<font color="#E5E5E5">entitlement and those third-party</font>

887
00:33:42,459 --> 00:33:46,690
<font color="#E5E5E5">applications if you get them from the</font>

888
00:33:44,139 --> 00:33:48,639
Mac store<font color="#E5E5E5"> they're also sandboxed in the</font>

889
00:33:46,690 --> 00:33:50,199
same way so as you can<font color="#E5E5E5"> see if I can</font>

890
00:33:48,639 --> 00:33:52,839
write<font color="#CCCCCC"> a simple</font><font color="#E5E5E5"> tool that can display</font>

891
00:33:50,199 --> 00:33:54,940
<font color="#E5E5E5">this thing</font><font color="#CCCCCC"> obviously this would be</font>

892
00:33:52,839 --> 00:33:56,948
<font color="#E5E5E5">Colonel</font><font color="#CCCCCC"> Reed if I had colonel</font><font color="#E5E5E5"> right I</font>

893
00:33:54,940 --> 00:33:58,799
could obviously patch these things just

894
00:33:56,949 --> 00:34:02,139
<font color="#E5E5E5">as simply and this is one thing that</font>

895
00:33:58,799 --> 00:34:03,908
<font color="#E5E5E5">thankfully there</font><font color="#CCCCCC"> is</font><font color="#E5E5E5"> no real solution for</font>

896
00:34:02,139 --> 00:34:05,708
so from the jailbreaking perspective

897
00:34:03,909 --> 00:34:09,029
<font color="#E5E5E5">this</font><font color="#CCCCCC"> is pretty much what we're getting</font>

898
00:34:05,709 --> 00:34:11,440
<font color="#E5E5E5">to be left with now about this MP MP</font>

899
00:34:09,029 --> 00:34:14,109
<font color="#CCCCCC">we've already encountered as the</font><font color="#E5E5E5"> Intel</font>

900
00:34:11,440 --> 00:34:17,109
<font color="#CCCCCC">mint enforcer but it's much much much</font>

901
00:34:14,109 --> 00:34:20,819
more potent as a<font color="#CCCCCC"> code-signing verifier</font>

902
00:34:17,109 --> 00:34:23,619
<font color="#E5E5E5">so</font><font color="#CCCCCC"> whenever you do some type of x''k or</font>

903
00:34:20,819 --> 00:34:26,319
plastic spawn or any type<font color="#CCCCCC"> of something</font>

904
00:34:23,619 --> 00:34:29,109
<font color="#E5E5E5">to start a</font><font color="#CCCCCC"> process then what happens is</font>

905
00:34:26,319 --> 00:34:30,940
we've got an fee and<font color="#E5E5E5"> a fee as I say here</font>

906
00:34:29,109 --> 00:34:33,339
the sworn nemesis of<font color="#E5E5E5"> all jailbreakers</font>

907
00:34:30,940 --> 00:34:35,529
<font color="#E5E5E5">it's constantly trying</font><font color="#CCCCCC"> to make</font><font color="#E5E5E5"> things</font>

908
00:34:33,339 --> 00:34:37,750
harder<font color="#E5E5E5"> and harder and</font><font color="#CCCCCC"> harder still so</font>

909
00:34:35,529 --> 00:34:40,359
how does<font color="#E5E5E5"> it do that there's a Mac F hook</font>

910
00:34:37,750 --> 00:34:42,069
<font color="#E5E5E5">a call out on exit via and there's also</font>

911
00:34:40,359 --> 00:34:45,549
another<font color="#E5E5E5"> one on check signature this goes</font>

912
00:34:42,069 --> 00:34:47,889
<font color="#E5E5E5">to MP MP will do the validation and the</font>

913
00:34:45,549 --> 00:34:50,619
<font color="#CCCCCC">kext is going</font><font color="#E5E5E5"> to look at two specific</font>

914
00:34:47,889 --> 00:34:53,589
<font color="#E5E5E5">cases one case is going to</font><font color="#CCCCCC"> be what we</font>

915
00:34:50,619 --> 00:34:56,500
<font color="#CCCCCC">call a an</font><font color="#E5E5E5"> ad hoc signature the other</font>

916
00:34:53,589 --> 00:34:58,839
case is going<font color="#E5E5E5"> to be called a third-party</font>

917
00:34:56,500 --> 00:35:01,089
signature for an ad hoc signature<font color="#E5E5E5"> again</font>

918
00:34:58,839 --> 00:35:03,970
<font color="#CCCCCC">you can easily see that documents</font><font color="#E5E5E5"> iOS</font>

919
00:35:01,089 --> 00:35:07,299
here will do I don't know<font color="#E5E5E5"> like launch D</font>

920
00:35:03,970 --> 00:35:09,339
so<font color="#E5E5E5"> -</font><font color="#CCCCCC"> -</font><font color="#E5E5E5"> sig on launch D any Apple binary</font>

921
00:35:07,299 --> 00:35:11,440
you<font color="#CCCCCC"> can see is</font><font color="#E5E5E5"> ad hoc</font><font color="#CCCCCC"> in that it's not</font>

922
00:35:09,339 --> 00:35:13,839
<font color="#E5E5E5">really signed is just a basic hash but</font>

923
00:35:11,440 --> 00:35:15,819
the hash rests somewhere in the<font color="#CCCCCC"> text for</font>

924
00:35:13,839 --> 00:35:17,619
a third party the<font color="#E5E5E5"> third party is going</font>

925
00:35:15,819 --> 00:35:19,359
<font color="#E5E5E5">to be with a full signature blob and</font>

926
00:35:17,619 --> 00:35:21,369
<font color="#CCCCCC">then you have to do the actual</font>

927
00:35:19,359 --> 00:35:24,160
validation<font color="#E5E5E5"> now is that going to work</font>

928
00:35:21,369 --> 00:35:26,200
we've<font color="#E5E5E5"> got the same general flow of</font><font color="#CCCCCC"> mac</font><font color="#E5E5E5"> F</font>

929
00:35:24,160 --> 00:35:29,500
which<font color="#E5E5E5"> means system call gets trapped and</font>

930
00:35:26,200 --> 00:35:30,879
so forth then<font color="#CCCCCC"> MP goes and looks at the</font>

931
00:35:29,500 --> 00:35:33,240
trust<font color="#CCCCCC"> cache</font>

932
00:35:30,880 --> 00:35:35,740
which is a region<font color="#E5E5E5"> of memory</font><font color="#CCCCCC"> that is</font>

933
00:35:33,240 --> 00:35:39,220
effectively signed as part of the text

934
00:35:35,740 --> 00:35:41,500
<font color="#E5E5E5">and shows you that those</font><font color="#CCCCCC"> particular list</font>

935
00:35:39,220 --> 00:35:43,089
of hashes<font color="#CCCCCC"> which are allowed now normally</font>

936
00:35:41,500 --> 00:35:44,799
if something is not found<font color="#CCCCCC"> in</font><font color="#E5E5E5"> the trust</font>

937
00:35:43,089 --> 00:35:47,529
cache which can only be<font color="#E5E5E5"> for</font><font color="#CCCCCC"> Apple's own</font>

938
00:35:44,799 --> 00:35:49,359
binaries<font color="#CCCCCC"> we have to go upwards to amphi</font>

939
00:35:47,529 --> 00:35:51,730
<font color="#CCCCCC">D and that was the weakness that was</font>

940
00:35:49,359 --> 00:35:53,589
exploited continuously<font color="#CCCCCC"> there is some</font>

941
00:35:51,730 --> 00:35:56,650
type<font color="#CCCCCC"> of code signature blob and you may</font>

942
00:35:53,589 --> 00:35:59,339
be familiar with<font color="#E5E5E5"> J</font><font color="#CCCCCC"> tool</font><font color="#E5E5E5"> minus sign or LD</font>

943
00:35:56,650 --> 00:36:02,740
<font color="#E5E5E5">ID - big s so you can self sign yourself</font>

944
00:35:59,339 --> 00:36:05,200
<font color="#CCCCCC">MPD is</font><font color="#E5E5E5"> supposed to check</font><font color="#CCCCCC"> lib</font><font color="#E5E5E5"> miss which</font>

945
00:36:02,740 --> 00:36:07,689
is<font color="#E5E5E5"> uh essentially</font><font color="#CCCCCC"> their provisioning</font>

946
00:36:05,200 --> 00:36:10,210
library and if you can hack this then

947
00:36:07,690 --> 00:36:11,859
you can<font color="#E5E5E5"> say okay this</font><font color="#CCCCCC"> says okay</font><font color="#E5E5E5"> and then</font>

948
00:36:10,210 --> 00:36:14,980
you can do whatever you want<font color="#E5E5E5"> and this</font>

949
00:36:11,859 --> 00:36:17,109
used<font color="#E5E5E5"> to be the case until iOS 12 which</font>

950
00:36:14,980 --> 00:36:19,329
was constantly exploited<font color="#CCCCCC"> no there was</font>

951
00:36:17,109 --> 00:36:21,250
two ways<font color="#E5E5E5"> of exploiting this one is to go</font>

952
00:36:19,329 --> 00:36:23,859
<font color="#E5E5E5">into the trust cache specifically the</font>

953
00:36:21,250 --> 00:36:26,200
dynamic trust cash from<font color="#E5E5E5"> Xcode and</font>

954
00:36:23,859 --> 00:36:29,259
<font color="#E5E5E5">essentially patch it in memory this</font><font color="#CCCCCC"> is</font>

955
00:36:26,200 --> 00:36:31,660
<font color="#E5E5E5">something that I kept saying must go</font>

956
00:36:29,259 --> 00:36:34,240
away<font color="#E5E5E5"> in iOS 12 must go away in iOS 12</font>

957
00:36:31,660 --> 00:36:37,299
especially after<font color="#E5E5E5"> a very noted iOS hacker</font>

958
00:36:34,240 --> 00:36:40,209
called Sarab<font color="#CCCCCC"> figured</font><font color="#E5E5E5"> out a way</font><font color="#CCCCCC"> and put</font>

959
00:36:37,299 --> 00:36:42,670
it in open source<font color="#E5E5E5"> and so it kind of went</font>

960
00:36:40,210 --> 00:36:44,740
<font color="#E5E5E5">away in the</font><font color="#CCCCCC"> a12 this is physically</font>

961
00:36:42,670 --> 00:36:46,599
locked<font color="#E5E5E5"> in memory and so that</font><font color="#CCCCCC"> doesn't</font>

962
00:36:44,740 --> 00:36:49,328
<font color="#E5E5E5">work but in anywhere before the a12</font>

963
00:36:46,599 --> 00:36:51,700
<font color="#E5E5E5">which means up to the iPhone 10 it</font>

964
00:36:49,329 --> 00:36:54,099
totally works still the second approach

965
00:36:51,700 --> 00:36:56,319
would be<font color="#E5E5E5"> to debilitate amphi and that</font>

966
00:36:54,099 --> 00:36:58,450
means to essentially hook<font color="#CCCCCC"> antfee</font><font color="#E5E5E5"> with</font>

967
00:36:56,319 --> 00:37:01,509
something that is basically a debugger

968
00:36:58,450 --> 00:37:04,058
<font color="#CCCCCC">and you just find</font><font color="#E5E5E5"> those call-outs to lib</font>

969
00:37:01,509 --> 00:37:06,160
miss and<font color="#E5E5E5"> you basically patch them you</font>

970
00:37:04,059 --> 00:37:08,440
patch them by generating an exception

971
00:37:06,160 --> 00:37:10,450
<font color="#E5E5E5">returning</font><font color="#CCCCCC"> zero and then everybody's</font>

972
00:37:08,440 --> 00:37:12,430
<font color="#CCCCCC">happy I mean Apple is not but you are</font>

973
00:37:10,450 --> 00:37:14,230
<font color="#E5E5E5">and so there's a very simple method of</font>

974
00:37:12,430 --> 00:37:16,419
doing<font color="#CCCCCC"> this and you can do a small daemon</font>

975
00:37:14,230 --> 00:37:18,640
which<font color="#E5E5E5"> I call</font><font color="#CCCCCC"> empty debilitate</font><font color="#E5E5E5"> it sits on</font>

976
00:37:16,420 --> 00:37:19,900
<font color="#E5E5E5">your device it also makes sure that if</font>

977
00:37:18,640 --> 00:37:21,578
<font color="#CCCCCC">an PD gets killed</font>

978
00:37:19,900 --> 00:37:24,220
<font color="#E5E5E5">because sometimes launch D kills</font>

979
00:37:21,579 --> 00:37:26,859
processes for saving memory<font color="#E5E5E5"> then as soon</font>

980
00:37:24,220 --> 00:37:29,200
as MTD restarts it'll also of course<font color="#E5E5E5"> do</font>

981
00:37:26,859 --> 00:37:30,848
the debilitation again<font color="#E5E5E5"> that part is a</font>

982
00:37:29,200 --> 00:37:34,720
major change that<font color="#CCCCCC"> will affect all</font>

983
00:37:30,849 --> 00:37:37,240
<font color="#E5E5E5">devices because iOS 12 introduces a by a</font>

984
00:37:34,720 --> 00:37:39,700
text<font color="#E5E5E5"> called core trust now what does</font>

985
00:37:37,240 --> 00:37:42,279
core<font color="#E5E5E5"> trust do it makes sure that you</font>

986
00:37:39,700 --> 00:37:44,259
can't fake sign anymore you still<font color="#E5E5E5"> sign</font>

987
00:37:42,279 --> 00:37:44,920
but now it<font color="#CCCCCC"> has to</font><font color="#E5E5E5"> be signed with</font><font color="#CCCCCC"> one of</font>

988
00:37:44,259 --> 00:37:47,440
<font color="#CCCCCC">two certified</font>

989
00:37:44,920 --> 00:37:49,660
<font color="#CCCCCC">it's which is either Apple root or Apple</font>

990
00:37:47,440 --> 00:37:51,640
developer CA which means you know for

991
00:37:49,660 --> 00:37:54,670
your<font color="#CCCCCC"> third-party apps and</font><font color="#E5E5E5"> only after a</font>

992
00:37:51,640 --> 00:37:56,620
core<font color="#E5E5E5"> trust actually says it's signed do</font>

993
00:37:54,670 --> 00:37:58,780
we go<font color="#CCCCCC"> up to anthe</font><font color="#E5E5E5"> now what does</font><font color="#CCCCCC"> it mean</font>

994
00:37:56,620 --> 00:38:01,089
you<font color="#CCCCCC"> can still do the debilitation but</font>

995
00:37:58,780 --> 00:38:03,490
it's going<font color="#E5E5E5"> to be only</font><font color="#CCCCCC"> after court</font>

996
00:38:01,090 --> 00:38:05,050
recessed<font color="#CCCCCC"> there's some type of love</font><font color="#E5E5E5"> and</font>

997
00:38:03,490 --> 00:38:06,910
some type of valid<font color="#E5E5E5"> signature so only</font>

998
00:38:05,050 --> 00:38:09,010
<font color="#E5E5E5">after this we</font><font color="#CCCCCC"> go and</font><font color="#E5E5E5"> that's where the</font>

999
00:38:06,910 --> 00:38:11,589
debilitation will happen<font color="#E5E5E5"> the impact of</font>

1000
00:38:09,010 --> 00:38:13,000
this unfortunately<font color="#E5E5E5"> is going</font><font color="#CCCCCC"> to be that</font>

1001
00:38:11,590 --> 00:38:15,280
in most case<font color="#E5E5E5"> it's going</font><font color="#CCCCCC"> to be too late</font>

1002
00:38:13,000 --> 00:38:17,830
<font color="#CCCCCC">if</font><font color="#E5E5E5"> you're developing a jailbreak</font><font color="#CCCCCC"> you</font>

1003
00:38:15,280 --> 00:38:19,780
can't just use a self-signed bin pack

1004
00:38:17,830 --> 00:38:22,120
like you get from my<font color="#E5E5E5"> site or otherwise</font>

1005
00:38:19,780 --> 00:38:25,030
<font color="#E5E5E5">you have to</font><font color="#CCCCCC"> do the signatures yourself</font>

1006
00:38:22,120 --> 00:38:27,069
and<font color="#E5E5E5"> it's really painful or you have to</font>

1007
00:38:25,030 --> 00:38:29,440
find<font color="#CCCCCC"> another way</font><font color="#E5E5E5"> now as for a kernel</font>

1008
00:38:27,070 --> 00:38:32,440
patching that's really where the battle

1009
00:38:29,440 --> 00:38:33,820
ranges because kernel patching<font color="#E5E5E5"> we can do</font>

1010
00:38:32,440 --> 00:38:36,340
and we can<font color="#CCCCCC"> either do it directly</font><font color="#E5E5E5"> or</font>

1011
00:38:33,820 --> 00:38:37,810
<font color="#E5E5E5">indirectly</font><font color="#CCCCCC"> usually when I</font><font color="#E5E5E5"> get to this</font>

1012
00:38:36,340 --> 00:38:38,740
part I'm a little bit<font color="#E5E5E5"> out of time so I'm</font>

1013
00:38:37,810 --> 00:38:41,770
not<font color="#CCCCCC"> going to go</font><font color="#E5E5E5"> into the actual</font>

1014
00:38:38,740 --> 00:38:43,450
<font color="#E5E5E5">techniques but basically the</font><font color="#CCCCCC"> idea is</font>

1015
00:38:41,770 --> 00:38:46,509
<font color="#E5E5E5">very simple</font><font color="#CCCCCC"> you either</font><font color="#E5E5E5"> find some mach</font>

1016
00:38:43,450 --> 00:38:48,850
<font color="#E5E5E5">port or IPC object that your mock object</font>

1017
00:38:46,510 --> 00:38:51,310
in general that<font color="#CCCCCC"> you can use or you find</font>

1018
00:38:48,850 --> 00:38:52,830
an<font color="#CCCCCC"> i/o kit</font><font color="#E5E5E5"> object and specifically the</font>

1019
00:38:51,310 --> 00:38:55,509
allocate objects is super popular

1020
00:38:52,830 --> 00:38:58,000
<font color="#E5E5E5">because</font><font color="#CCCCCC"> IO kit is object oriented and</font>

1021
00:38:55,510 --> 00:39:00,850
it's got V tables so you find a V table

1022
00:38:58,000 --> 00:39:02,650
you find<font color="#CCCCCC"> a way to like basically</font>

1023
00:39:00,850 --> 00:39:05,140
override a pointer in that V table boom

1024
00:39:02,650 --> 00:39:07,120
that's automatic<font color="#E5E5E5"> code execution because</font>

1025
00:39:05,140 --> 00:39:09,670
really what's a<font color="#E5E5E5"> V table it's only</font><font color="#CCCCCC"> an</font>

1026
00:39:07,120 --> 00:39:11,440
<font color="#E5E5E5">array of function pointers</font><font color="#CCCCCC"> so what you</font>

1027
00:39:09,670 --> 00:39:14,410
can do is you<font color="#E5E5E5"> can do and this is what we</font>

1028
00:39:11,440 --> 00:39:16,810
nowadays do we find memory we repurpose

1029
00:39:14,410 --> 00:39:18,879
it<font color="#E5E5E5"> to create a fake object and that's</font>

1030
00:39:16,810 --> 00:39:20,770
when you get effectively<font color="#CCCCCC"> codecs ik how</font>

1031
00:39:18,880 --> 00:39:21,910
much time do I<font color="#CCCCCC"> have here ooh not so much</font>

1032
00:39:20,770 --> 00:39:23,590
so we're<font color="#E5E5E5"> not going</font><font color="#CCCCCC"> to go through this</font>

1033
00:39:21,910 --> 00:39:25,540
<font color="#CCCCCC">okay which is a shame because that's</font>

1034
00:39:23,590 --> 00:39:27,580
like<font color="#CCCCCC"> my</font><font color="#E5E5E5"> best part but anyways</font><font color="#CCCCCC"> now let's</font>

1035
00:39:25,540 --> 00:39:30,700
conclude and talk<font color="#E5E5E5"> about that hardware</font>

1036
00:39:27,580 --> 00:39:33,340
protections<font color="#E5E5E5"> so we now have effectively</font>

1037
00:39:30,700 --> 00:39:36,939
three equivalence classes<font color="#E5E5E5"> we've got the</font>

1038
00:39:33,340 --> 00:39:39,220
a 7 to a 9<font color="#E5E5E5"> where you've got</font><font color="#CCCCCC"> K P P ok</font>

1039
00:39:36,940 --> 00:39:42,640
long story short kppa still by passable

1040
00:39:39,220 --> 00:39:44,799
<font color="#E5E5E5">a 10 and later that's your iPhone 7</font>

1041
00:39:42,640 --> 00:39:47,350
<font color="#E5E5E5">that's where you've got this</font><font color="#CCCCCC"> KT</font><font color="#E5E5E5"> RR which</font>

1042
00:39:44,800 --> 00:39:49,810
is unfortunately as far<font color="#CCCCCC"> as we know not</font>

1043
00:39:47,350 --> 00:39:52,569
something<font color="#CCCCCC"> that</font><font color="#E5E5E5"> can</font><font color="#CCCCCC"> be bypassed and this</font>

1044
00:39:49,810 --> 00:39:54,340
becomes even<font color="#CCCCCC"> worse</font><font color="#E5E5E5"> with a 12 devices</font>

1045
00:39:52,570 --> 00:39:56,710
which I would<font color="#E5E5E5"> like to focus on so I'm</font>

1046
00:39:54,340 --> 00:39:58,060
going to<font color="#CCCCCC"> just go briefly over</font><font color="#E5E5E5"> skip over</font>

1047
00:39:56,710 --> 00:40:00,070
the<font color="#CCCCCC"> k PP</font><font color="#E5E5E5"> and</font>

1048
00:39:58,060 --> 00:40:02,650
<font color="#CCCCCC">TRR because that's pretty much</font>

1049
00:40:00,070 --> 00:40:05,290
documented and<font color="#CCCCCC"> I will</font><font color="#E5E5E5"> talk</font><font color="#CCCCCC"> about those</font><font color="#E5E5E5"> a</font>

1050
00:40:02,650 --> 00:40:07,060
<font color="#CCCCCC">12</font><font color="#E5E5E5"> hardware changes Apple introduced</font>

1051
00:40:05,290 --> 00:40:09,700
<font color="#CCCCCC">their a</font><font color="#E5E5E5"> 12 chip they called it like</font>

1052
00:40:07,060 --> 00:40:12,910
neural<font color="#CCCCCC"> engine Bionic amazing blah blah</font>

1053
00:40:09,700 --> 00:40:14,680
blah<font color="#E5E5E5"> but they omitted</font><font color="#CCCCCC"> to talk about the</font>

1054
00:40:12,910 --> 00:40:17,350
main changes that they put in which are

1055
00:40:14,680 --> 00:40:19,569
memory changes and instruction<font color="#E5E5E5"> set</font>

1056
00:40:17,350 --> 00:40:23,529
changes<font color="#CCCCCC"> Apple is the</font><font color="#E5E5E5"> very first</font>

1057
00:40:19,570 --> 00:40:26,170
implementer<font color="#CCCCCC"> of arm</font><font color="#E5E5E5"> v8</font><font color="#CCCCCC"> 3 and that's not</font>

1058
00:40:23,530 --> 00:40:28,210
<font color="#CCCCCC">just arm 64</font><font color="#E5E5E5"> but</font><font color="#CCCCCC"> this is arm 64 with</font>

1059
00:40:26,170 --> 00:40:30,880
various enhancements<font color="#CCCCCC"> and a key</font>

1060
00:40:28,210 --> 00:40:32,080
enhancement is going to be this<font color="#E5E5E5"> thing</font>

1061
00:40:30,880 --> 00:40:35,380
<font color="#E5E5E5">that they're now using</font><font color="#CCCCCC"> which is</font><font color="#E5E5E5"> called</font>

1062
00:40:32,080 --> 00:40:38,590
<font color="#CCCCCC">pack</font><font color="#E5E5E5"> or pointer authentication codes now</font>

1063
00:40:35,380 --> 00:40:40,780
what this means is that<font color="#E5E5E5"> for the meantime</font>

1064
00:40:38,590 --> 00:40:41,950
<font color="#CCCCCC">at least Apple is like the</font><font color="#E5E5E5"> the first</font>

1065
00:40:40,780 --> 00:40:44,290
ones to<font color="#E5E5E5"> do</font><font color="#CCCCCC"> it just like they were the</font>

1066
00:40:41,950 --> 00:40:46,120
first in 64-bit it's going to come

1067
00:40:44,290 --> 00:40:48,190
eventually<font color="#E5E5E5"> because Qualcomm is one of</font>

1068
00:40:46,120 --> 00:40:50,259
the developers<font color="#CCCCCC"> of this so</font><font color="#E5E5E5"> you can expect</font>

1069
00:40:48,190 --> 00:40:52,270
it in<font color="#E5E5E5"> Android sometime by you know one</font>

1070
00:40:50,260 --> 00:40:54,670
year<font color="#E5E5E5"> or</font><font color="#CCCCCC"> two years from now</font><font color="#E5E5E5"> now what does</font>

1071
00:40:52,270 --> 00:40:57,580
it<font color="#E5E5E5"> actually do we have a pointer a</font>

1072
00:40:54,670 --> 00:40:59,680
pointer is a<font color="#E5E5E5"> 64-bit effectively integer</font>

1073
00:40:57,580 --> 00:41:01,509
but if you look at those 64 bits the

1074
00:40:59,680 --> 00:41:03,430
<font color="#CCCCCC">topmost bits are sign-extension</font>

1075
00:41:01,510 --> 00:41:05,650
we don't use<font color="#E5E5E5"> them they're always pretty</font>

1076
00:41:03,430 --> 00:41:07,779
<font color="#E5E5E5">much the same so what we do is we</font>

1077
00:41:05,650 --> 00:41:10,780
repurpose them and we generate an

1078
00:41:07,780 --> 00:41:12,730
<font color="#E5E5E5">authentication code from some type of on</font>

1079
00:41:10,780 --> 00:41:15,700
CPU key there's actually two of them

1080
00:41:12,730 --> 00:41:17,320
okay<font color="#E5E5E5"> so we take a context which</font><font color="#CCCCCC"> is</font>

1081
00:41:15,700 --> 00:41:19,870
usually the<font color="#E5E5E5"> stack pointer so you know</font>

1082
00:41:17,320 --> 00:41:22,030
which frame<font color="#CCCCCC"> you're in or some type of</font>

1083
00:41:19,870 --> 00:41:25,359
register that<font color="#E5E5E5"> the program can supply we</font>

1084
00:41:22,030 --> 00:41:27,130
do 128-bit keys and which are

1085
00:41:25,360 --> 00:41:29,200
effectively something you cannot read in

1086
00:41:27,130 --> 00:41:31,210
user<font color="#E5E5E5"> mode and there's an algorithm which</font>

1087
00:41:29,200 --> 00:41:32,740
may be implementation to find<font color="#E5E5E5"> or maybe</font>

1088
00:41:31,210 --> 00:41:34,690
something developed by Qualcomm<font color="#CCCCCC"> which is</font>

1089
00:41:32,740 --> 00:41:36,729
called<font color="#E5E5E5"> Karma</font><font color="#CCCCCC"> and so if you look here</font>

1090
00:41:34,690 --> 00:41:39,280
<font color="#E5E5E5">you'll see that what we do is we</font>

1091
00:41:36,730 --> 00:41:41,290
basically<font color="#E5E5E5"> generate these codes embed</font>

1092
00:41:39,280 --> 00:41:43,660
them in<font color="#E5E5E5"> this pointer and replace</font>

1093
00:41:41,290 --> 00:41:47,140
instructions<font color="#E5E5E5"> we add a few instructions</font>

1094
00:41:43,660 --> 00:41:49,120
<font color="#E5E5E5">like pack I or pack D and this should be</font>

1095
00:41:47,140 --> 00:41:50,950
<font color="#CCCCCC">a packet</font><font color="#E5E5E5"> e which is to do a pointer</font>

1096
00:41:49,120 --> 00:41:54,130
authentication code for instruction or

1097
00:41:50,950 --> 00:41:55,990
data as well as<font color="#E5E5E5"> auth I or D which are</font>

1098
00:41:54,130 --> 00:41:57,970
authenticated<font color="#E5E5E5"> that instruction code and</font>

1099
00:41:55,990 --> 00:42:00,279
we also have<font color="#E5E5E5"> X pack if we want to remove</font>

1100
00:41:57,970 --> 00:42:01,990
it<font color="#E5E5E5"> but the main thing is because</font>

1101
00:42:00,280 --> 00:42:03,940
compilers can't generate<font color="#E5E5E5"> all these</font>

1102
00:42:01,990 --> 00:42:06,100
instructions<font color="#E5E5E5"> we can basically replace</font>

1103
00:42:03,940 --> 00:42:08,230
<font color="#CCCCCC">existing ones</font><font color="#E5E5E5"> so instead of branch and</font>

1104
00:42:06,100 --> 00:42:10,839
link we have branch<font color="#E5E5E5"> a</font><font color="#CCCCCC"> link authenticated</font>

1105
00:42:08,230 --> 00:42:11,410
we have branch register authenticated

1106
00:42:10,840 --> 00:42:13,750
<font color="#E5E5E5">we've got</font>

1107
00:42:11,410 --> 00:42:16,118
load register authenticated<font color="#E5E5E5"> return</font>

1108
00:42:13,750 --> 00:42:17,920
authenticated etc and really what it

1109
00:42:16,119 --> 00:42:20,380
<font color="#CCCCCC">does is that</font><font color="#E5E5E5"> it automatically does your</font>

1110
00:42:17,920 --> 00:42:22,450
authentication<font color="#E5E5E5"> and if that register</font>

1111
00:42:20,380 --> 00:42:25,390
value which is a pointer cannot be

1112
00:42:22,450 --> 00:42:27,788
validated<font color="#CCCCCC"> you get effectively a fault</font>

1113
00:42:25,390 --> 00:42:30,430
<font color="#E5E5E5">and so that means that you cannot</font>

1114
00:42:27,789 --> 00:42:33,099
malformed pointers in this way so<font color="#E5E5E5"> just a</font>

1115
00:42:30,430 --> 00:42:35,890
simple<font color="#E5E5E5"> example this is from the iPhone</font>

1116
00:42:33,099 --> 00:42:37,990
<font color="#E5E5E5">10 like the little iPhone X and this is</font>

1117
00:42:35,890 --> 00:42:39,578
from the iPhone 11 which is<font color="#CCCCCC"> the XS</font><font color="#E5E5E5"> you</font>

1118
00:42:37,990 --> 00:42:41,140
can see that it's pretty<font color="#E5E5E5"> simple</font><font color="#CCCCCC"> the only</font>

1119
00:42:39,579 --> 00:42:43,809
thing that's changed<font color="#CCCCCC"> here is that you've</font>

1120
00:42:41,140 --> 00:42:45,970
got the<font color="#CCCCCC"> ret turning into a red a B now</font>

1121
00:42:43,809 --> 00:42:47,410
there's further changes but I think

1122
00:42:45,970 --> 00:42:48,459
they're gonna kick me<font color="#CCCCCC"> out soon so we're</font>

1123
00:42:47,410 --> 00:42:51,220
not going<font color="#CCCCCC"> to</font><font color="#E5E5E5"> talk</font><font color="#CCCCCC"> about these</font><font color="#E5E5E5"> further</font>

1124
00:42:48,460 --> 00:42:53,349
changes primarily<font color="#CCCCCC"> if I had to pick</font><font color="#E5E5E5"> one</font>

1125
00:42:51,220 --> 00:42:56,379
<font color="#E5E5E5">that's going to</font><font color="#CCCCCC"> have a far far reaching</font>

1126
00:42:53,349 --> 00:42:59,020
impact that would<font color="#E5E5E5"> be your arm v8 3 the</font>

1127
00:42:56,380 --> 00:43:00,549
key management<font color="#CCCCCC"> in the apple case is not</font>

1128
00:42:59,020 --> 00:43:03,069
<font color="#CCCCCC">that good from what I've seen</font>

1129
00:43:00,549 --> 00:43:06,700
instead of using<font color="#E5E5E5"> 128-bit they just use</font>

1130
00:43:03,069 --> 00:43:08,440
the<font color="#E5E5E5"> same</font><font color="#CCCCCC"> 64 bit key twice ok whatever</font>

1131
00:43:06,700 --> 00:43:10,240
if you're<font color="#CCCCCC"> actually looking at it if</font><font color="#E5E5E5"> you</font>

1132
00:43:08,440 --> 00:43:12,160
get your hands on<font color="#E5E5E5"> an iPhone 11 kernel</font>

1133
00:43:10,240 --> 00:43:14,529
cache which you can<font color="#E5E5E5"> easily get from the</font>

1134
00:43:12,160 --> 00:43:17,529
OTA or from the IPPS well you'll find

1135
00:43:14,530 --> 00:43:19,329
that<font color="#E5E5E5"> there is good interesting code it</font>

1136
00:43:17,529 --> 00:43:21,520
may come out in the sources<font color="#CCCCCC"> it may</font><font color="#E5E5E5"> not</font>

1137
00:43:19,329 --> 00:43:23,529
come out<font color="#E5E5E5"> in</font><font color="#CCCCCC"> the sources</font><font color="#E5E5E5"> because Apple</font>

1138
00:43:21,520 --> 00:43:25,089
might decide to if<font color="#E5E5E5"> def it out but even</font>

1139
00:43:23,529 --> 00:43:27,430
<font color="#CCCCCC">if it</font><font color="#E5E5E5"> doesn't come out nobody cares</font>

1140
00:43:25,089 --> 00:43:30,038
<font color="#CCCCCC">because it's all raw inline</font><font color="#E5E5E5"> assembly</font>

1141
00:43:27,430 --> 00:43:32,319
anyways<font color="#E5E5E5"> in the future there's something</font>

1142
00:43:30,039 --> 00:43:35,109
even worse which has<font color="#E5E5E5"> just</font><font color="#CCCCCC"> been approved</font>

1143
00:43:32,319 --> 00:43:37,450
by<font color="#E5E5E5"> arm</font><font color="#CCCCCC"> that's called arm v8 point 5</font>

1144
00:43:35,109 --> 00:43:38,288
<font color="#E5E5E5">there is</font><font color="#CCCCCC"> also an</font><font color="#E5E5E5"> 8.4 but nobody cares</font>

1145
00:43:37,450 --> 00:43:41,500
<font color="#CCCCCC">about</font><font color="#E5E5E5"> that that's</font><font color="#CCCCCC"> just from</font>

1146
00:43:38,289 --> 00:43:43,000
<font color="#E5E5E5">virtualization but in 8.5 this is</font>

1147
00:43:41,500 --> 00:43:45,549
something<font color="#E5E5E5"> that actually has memory</font>

1148
00:43:43,000 --> 00:43:47,740
tagging and has branch target<font color="#E5E5E5"> indicators</font>

1149
00:43:45,549 --> 00:43:49,359
branch target<font color="#CCCCCC"> indicators means that when</font>

1150
00:43:47,740 --> 00:43:51,250
you're<font color="#E5E5E5"> doing a switch you're going to</font>

1151
00:43:49,359 --> 00:43:53,950
have a closed list<font color="#E5E5E5"> of where to branch</font>

1152
00:43:51,250 --> 00:43:56,049
and that effectively<font color="#E5E5E5"> means that you</font>

1153
00:43:53,950 --> 00:43:58,750
won't<font color="#E5E5E5"> be able</font><font color="#CCCCCC"> to</font><font color="#E5E5E5"> override pointers</font><font color="#CCCCCC"> in</font>

1154
00:43:56,049 --> 00:44:00,609
any constellation whatsoever and then

1155
00:43:58,750 --> 00:44:02,619
coupled with memory tagging<font color="#E5E5E5"> which means</font>

1156
00:44:00,609 --> 00:44:04,328
that you can<font color="#E5E5E5"> only access memory for read</font>

1157
00:44:02,619 --> 00:44:06,970
<font color="#CCCCCC">and write</font><font color="#E5E5E5"> if you possess</font><font color="#CCCCCC"> the right tag</font>

1158
00:44:04,329 --> 00:44:09,849
<font color="#E5E5E5">that effectively could really really</font>

1159
00:44:06,970 --> 00:44:11,980
<font color="#E5E5E5">hinder exploits I'm going to skip over</font>

1160
00:44:09,849 --> 00:44:13,000
the jailbreak<font color="#E5E5E5"> tool kit that</font><font color="#CCCCCC"> I have some</font>

1161
00:44:11,980 --> 00:44:14,650
of you might already know it but

1162
00:44:13,000 --> 00:44:17,500
<font color="#CCCCCC">basically this</font><font color="#E5E5E5"> is</font><font color="#CCCCCC"> something of</font><font color="#E5E5E5"> recently</font>

1163
00:44:14,650 --> 00:44:19,569
updated<font color="#E5E5E5"> for iOS 12 and I'll just</font><font color="#CCCCCC"> going</font>

1164
00:44:17,500 --> 00:44:23,349
to conclude<font color="#CCCCCC"> with the main takeaways</font>

1165
00:44:19,569 --> 00:44:24,820
which are number<font color="#E5E5E5"> one iOS this core trust</font>

1166
00:44:23,349 --> 00:44:28,630
thing if you look and<font color="#E5E5E5"> analyze</font>

1167
00:44:24,820 --> 00:44:31,540
deeply the effect on apts<font color="#CCCCCC"> is zero</font><font color="#E5E5E5"> is</font>

1168
00:44:28,630 --> 00:44:33,190
negligible<font color="#CCCCCC"> as an apt</font><font color="#E5E5E5"> you already have</font>

1169
00:44:31,540 --> 00:44:34,779
<font color="#E5E5E5">code execution because you're running in</font>

1170
00:44:33,190 --> 00:44:37,120
through an app or you got in through

1171
00:44:34,780 --> 00:44:39,580
WebKit<font color="#E5E5E5"> it's not going to affect you the</font>

1172
00:44:37,120 --> 00:44:42,009
<font color="#E5E5E5">only target of this core</font><font color="#CCCCCC"> trust is for</font>

1173
00:44:39,580 --> 00:44:43,620
people<font color="#CCCCCC"> who want to jailbreak so</font><font color="#E5E5E5"> Apple is</font>

1174
00:44:42,010 --> 00:44:45,790
<font color="#E5E5E5">basically targeting the wrong people</font>

1175
00:44:43,620 --> 00:44:48,190
<font color="#E5E5E5">more importantly than</font><font color="#CCCCCC"> that the hardware</font>

1176
00:44:45,790 --> 00:44:50,140
changes in the<font color="#CCCCCC"> 812 processors</font><font color="#E5E5E5"> that's</font>

1177
00:44:48,190 --> 00:44:52,560
going to be the main<font color="#E5E5E5"> thing now over time</font>

1178
00:44:50,140 --> 00:44:55,509
<font color="#E5E5E5">Apple is going to phase out their old</font>

1179
00:44:52,560 --> 00:44:57,820
<font color="#E5E5E5">devices it's not happening yet iOS 12</font>

1180
00:44:55,510 --> 00:44:59,980
still supports 5s but over time it's

1181
00:44:57,820 --> 00:45:02,440
<font color="#CCCCCC">going to</font><font color="#E5E5E5"> get worse</font><font color="#CCCCCC"> for the world because</font>

1182
00:44:59,980 --> 00:45:04,150
<font color="#CCCCCC">that means that at some point</font><font color="#E5E5E5"> a 12 will</font>

1183
00:45:02,440 --> 00:45:06,460
become the<font color="#CCCCCC"> entry level maybe around like</font>

1184
00:45:04,150 --> 00:45:08,410
iOS 15 or<font color="#E5E5E5"> something and that will</font>

1185
00:45:06,460 --> 00:45:10,960
greatly greatly impact jailbreaking

1186
00:45:08,410 --> 00:45:12,700
specifically we're<font color="#E5E5E5"> going to see those</font>

1187
00:45:10,960 --> 00:45:15,580
<font color="#E5E5E5">three equivalent classes I've mentioned</font>

1188
00:45:12,700 --> 00:45:17,950
which is<font color="#E5E5E5"> a 7 to a 9 it's all the way up</font>

1189
00:45:15,580 --> 00:45:20,950
to the iPhone 6s that's going to be

1190
00:45:17,950 --> 00:45:22,870
fairly easy<font color="#E5E5E5"> from the iPhone 7 and later</font>

1191
00:45:20,950 --> 00:45:25,779
it's going<font color="#E5E5E5"> to be hard because of</font><font color="#CCCCCC"> that KT</font>

1192
00:45:22,870 --> 00:45:29,560
<font color="#E5E5E5">RR but kernel data patching still works</font>

1193
00:45:25,780 --> 00:45:31,480
from the<font color="#CCCCCC"> 812 and later yeah nobody</font><font color="#E5E5E5"> knows</font>

1194
00:45:29,560 --> 00:45:33,910
<font color="#CCCCCC">so</font><font color="#E5E5E5"> if you're looking</font><font color="#CCCCCC"> for the when</font><font color="#E5E5E5"> ETA</font>

1195
00:45:31,480 --> 00:45:36,610
over<font color="#E5E5E5"> the next jailbreak I can't promise</font>

1196
00:45:33,910 --> 00:45:38,770
you<font color="#CCCCCC"> anything here that's</font><font color="#E5E5E5"> pretty much it</font>

1197
00:45:36,610 --> 00:45:40,480
I<font color="#CCCCCC"> just want to agreed out the right</font>

1198
00:45:38,770 --> 00:45:42,820
people of the community so that's<font color="#E5E5E5"> you</font>

1199
00:45:40,480 --> 00:45:45,520
know<font color="#CCCCCC"> Pangu and</font><font color="#E5E5E5"> Luca Luca is amazing and</font>

1200
00:45:42,820 --> 00:45:48,040
<font color="#E5E5E5">Sarab who unfortunately tells Apple</font>

1201
00:45:45,520 --> 00:45:49,509
everything<font color="#E5E5E5"> that we do so</font><font color="#CCCCCC"> I'm puts it in</font>

1202
00:45:48,040 --> 00:45:52,660
open source<font color="#E5E5E5"> and of course</font>

1203
00:45:49,510 --> 00:45:54,340
<font color="#CCCCCC">Ian bier who</font><font color="#E5E5E5"> helped basically develop</font>

1204
00:45:52,660 --> 00:45:57,160
the last three<font color="#E5E5E5"> or so jail breaks by</font>

1205
00:45:54,340 --> 00:45:58,960
providing the actual patch and you can

1206
00:45:57,160 --> 00:46:00,850
find more<font color="#E5E5E5"> of this in the book</font><font color="#CCCCCC"> and if you</font>

1207
00:45:58,960 --> 00:46:03,640
have any questions<font color="#E5E5E5"> they think I still</font>

1208
00:46:00,850 --> 00:46:06,190
have a minute<font color="#CCCCCC"> or two</font><font color="#E5E5E5"> no I don't</font><font color="#CCCCCC"> you have</font>

1209
00:46:03,640 --> 00:46:07,779
<font color="#E5E5E5">to no questions do not ask me questions</font>

1210
00:46:06,190 --> 00:46:09,340
<font color="#E5E5E5">if you really want questions you can</font>

1211
00:46:07,780 --> 00:46:10,990
<font color="#E5E5E5">find me I'm</font><font color="#CCCCCC"> gonna be</font><font color="#E5E5E5"> around here for a</font>

1212
00:46:09,340 --> 00:46:11,680
<font color="#CCCCCC">couple unless they really throw me out</font>

1213
00:46:10,990 --> 00:46:17,459
exactly

1214
00:46:11,680 --> 00:46:17,460
<font color="#E5E5E5">people people coffee break</font><font color="#CCCCCC"> 20 minutes</font>

