1
00:00:01,360 --> 00:00:03,919
hi everyone this is extracting all the

2
00:00:03,919 --> 00:00:06,799
azure passwords and i'm carl fossen

3
00:00:06,799 --> 00:00:08,639
so a little bit of background on myself

4
00:00:08,639 --> 00:00:11,599
here uh practice director at netspy i've

5
00:00:11,599 --> 00:00:13,599
been with the company for about 10 years

6
00:00:13,599 --> 00:00:15,759
now during that time i've worn a number

7
00:00:15,759 --> 00:00:18,000
of different hats including pen tester

8
00:00:18,000 --> 00:00:20,960
social engineer password cracker uh

9
00:00:20,960 --> 00:00:23,680
currently cloud enthusiast i lead up our

10
00:00:23,680 --> 00:00:25,599
cloud pen testing team out of our

11
00:00:25,599 --> 00:00:28,400
portland oregon office along with being

12
00:00:28,400 --> 00:00:30,560
a cloud enthusiast who works in a number

13
00:00:30,560 --> 00:00:32,719
of different clouds primarily azure but

14
00:00:32,719 --> 00:00:35,600
also aws gcp and a handful of other

15
00:00:35,600 --> 00:00:36,960
different clouds that we end up running

16
00:00:36,960 --> 00:00:39,040
into i'm also a bit of a cloud

17
00:00:39,040 --> 00:00:41,440
enthusiast as a private pilot my wife

18
00:00:41,440 --> 00:00:43,440
and i like to spend time flying around

19
00:00:43,440 --> 00:00:44,879
the oregon area

20
00:00:44,879 --> 00:00:48,079
in 79 piper warrior which is kind of a

21
00:00:48,079 --> 00:00:49,680
fun plane to fly

22
00:00:49,680 --> 00:00:52,079
outside of that i've spent about the

23
00:00:52,079 --> 00:00:54,719
last year or so here working on

24
00:00:54,719 --> 00:00:56,719
penetration testing azure for ethical

25
00:00:56,719 --> 00:00:59,039
hackers with david okioti

26
00:00:59,039 --> 00:01:00,239
it's a book that's going to be published

27
00:01:00,239 --> 00:01:03,359
on pact publishing in october

28
00:01:03,359 --> 00:01:06,159
and uh it's a fun book to write and

29
00:01:06,159 --> 00:01:07,680
contains a lot of information that we're

30
00:01:07,680 --> 00:01:09,200
actually going to be talking about today

31
00:01:09,200 --> 00:01:10,640
in regards to

32
00:01:10,640 --> 00:01:13,119
extracting azure passwords

33
00:01:13,119 --> 00:01:15,680
you can find any code examples for tools

34
00:01:15,680 --> 00:01:18,320
that i work on out of the netspy github

35
00:01:18,320 --> 00:01:21,040
i also like to blog on the netspy blog

36
00:01:21,040 --> 00:01:22,720
and you can find me on twitter at

37
00:01:22,720 --> 00:01:24,960
kfossen

38
00:01:24,960 --> 00:01:26,880
so today we're going to learn about

39
00:01:26,880 --> 00:01:29,520
extracting credentials out of microsoft

40
00:01:29,520 --> 00:01:31,439
azure but before we get into that we

41
00:01:31,439 --> 00:01:33,840
should really baseline on

42
00:01:33,840 --> 00:01:36,320
what azure is just so that everybody's

43
00:01:36,320 --> 00:01:38,479
got common terminology to understand and

44
00:01:38,479 --> 00:01:40,799
understand how the platform itself works

45
00:01:40,799 --> 00:01:42,799
we'll just go over some basics here real

46
00:01:42,799 --> 00:01:43,759
quick

47
00:01:43,759 --> 00:01:46,640
so uh at its core azure is the cloud

48
00:01:46,640 --> 00:01:49,840
provider from microsoft so it's a lot of

49
00:01:49,840 --> 00:01:51,680
microsoft services that are integrated

50
00:01:51,680 --> 00:01:54,560
within the overall microsoft ecosystem

51
00:01:54,560 --> 00:01:56,240
and everything's being brought up into

52
00:01:56,240 --> 00:01:57,680
the cloud so things that you've

53
00:01:57,680 --> 00:01:59,280
traditionally seen on premise like

54
00:01:59,280 --> 00:02:02,079
virtual machines applications

55
00:02:02,079 --> 00:02:03,759
anything that you know hosts an

56
00:02:03,759 --> 00:02:06,079
application or interacts with data

57
00:02:06,079 --> 00:02:08,639
somehow is now being moved into the

58
00:02:08,639 --> 00:02:10,800
cloud so we're going to talk about a

59
00:02:10,800 --> 00:02:13,680
number of those services today

60
00:02:13,680 --> 00:02:15,680
during the talk but here's just a

61
00:02:15,680 --> 00:02:17,760
handful of kind of common services that

62
00:02:17,760 --> 00:02:20,640
we run into in the azure cloud

63
00:02:20,640 --> 00:02:22,640
so one thing to keep in mind with the

64
00:02:22,640 --> 00:02:24,959
azure cloud is that at certain role

65
00:02:24,959 --> 00:02:26,640
levels and we'll talk about how roles

66
00:02:26,640 --> 00:02:29,120
are applied in an azure tenant

67
00:02:29,120 --> 00:02:31,280
but at certain role levels passwords are

68
00:02:31,280 --> 00:02:33,440
everywhere there's clear text passwords

69
00:02:33,440 --> 00:02:35,040
that can be pulled out of individual

70
00:02:35,040 --> 00:02:37,280
services and today we're going to talk

71
00:02:37,280 --> 00:02:38,560
about different ways that we can pull

72
00:02:38,560 --> 00:02:42,000
those out of those services

73
00:02:44,160 --> 00:02:47,840
so uh to understand an azure tenant we

74
00:02:47,840 --> 00:02:50,800
need to kind of understand what items

75
00:02:50,800 --> 00:02:53,599
are comprising that tenant so the azure

76
00:02:53,599 --> 00:02:56,480
active directory tenant or azure ad

77
00:02:56,480 --> 00:02:59,680
tenant is the core of identity for azure

78
00:02:59,680 --> 00:03:01,360
cloud so

79
00:03:01,360 --> 00:03:03,360
as that core you have security

80
00:03:03,360 --> 00:03:05,440
principles which you can think of as

81
00:03:05,440 --> 00:03:08,640
users and those users are assigned roles

82
00:03:08,640 --> 00:03:10,959
so the principles themselves can be made

83
00:03:10,959 --> 00:03:13,840
up of your more traditional users

84
00:03:13,840 --> 00:03:16,560
carl netspy.com something like that or

85
00:03:16,560 --> 00:03:18,640
guest users where we could say carl

86
00:03:18,640 --> 00:03:21,680
gmail.com where that's an external user

87
00:03:21,680 --> 00:03:23,840
to that tenant that's been invited to be

88
00:03:23,840 --> 00:03:25,920
a part of that azure active directory

89
00:03:25,920 --> 00:03:27,120
tenant

90
00:03:27,120 --> 00:03:29,760
so uh those are more traditional users

91
00:03:29,760 --> 00:03:31,680
typically assigned to

92
00:03:31,680 --> 00:03:35,120
specific profiles and daily use accounts

93
00:03:35,120 --> 00:03:36,959
there's managed identities that can be

94
00:03:36,959 --> 00:03:38,959
either system assigned which means it's

95
00:03:38,959 --> 00:03:40,799
tied to a direct resource or user

96
00:03:40,799 --> 00:03:42,959
assigned meaning it's created within a

97
00:03:42,959 --> 00:03:44,720
subscription and can be assigned to

98
00:03:44,720 --> 00:03:48,239
multiple different resources if need be

99
00:03:48,239 --> 00:03:50,799
these manage identities are identities

100
00:03:50,799 --> 00:03:52,720
that are tied to a specific resource so

101
00:03:52,720 --> 00:03:55,280
let's say a virtual machine or an app

102
00:03:55,280 --> 00:03:58,080
services application where that specific

103
00:03:58,080 --> 00:04:00,400
resource needs to access something in

104
00:04:00,400 --> 00:04:03,599
the azure tenant and uses that managed

105
00:04:03,599 --> 00:04:05,599
identity to access that there's a number

106
00:04:05,599 --> 00:04:07,120
of different ways that we can get

107
00:04:07,120 --> 00:04:10,400
authentication for that managed identity

108
00:04:10,400 --> 00:04:13,200
primarily through uh requesting tokens

109
00:04:13,200 --> 00:04:16,000
but those identities are typically used

110
00:04:16,000 --> 00:04:18,079
within the azure active directory tenant

111
00:04:18,079 --> 00:04:20,478
to access other items within a

112
00:04:20,478 --> 00:04:21,680
subscription

113
00:04:21,680 --> 00:04:22,400
and

114
00:04:22,400 --> 00:04:24,560
that's a security principle that could

115
00:04:24,560 --> 00:04:25,600
have a role

116
00:04:25,600 --> 00:04:27,840
there are service principles that not to

117
00:04:27,840 --> 00:04:30,320
be confused with security principles but

118
00:04:30,320 --> 00:04:31,680
service principles are typically

119
00:04:31,680 --> 00:04:33,759
referred to as application accounts so

120
00:04:33,759 --> 00:04:35,280
you can see things like enterprise

121
00:04:35,280 --> 00:04:37,040
applications that may have what are

122
00:04:37,040 --> 00:04:39,440
called app registrations that are

123
00:04:39,440 --> 00:04:42,160
considered service principles these both

124
00:04:42,160 --> 00:04:44,560
can be assigned roles within the azure

125
00:04:44,560 --> 00:04:46,639
active directory tenant and we can use

126
00:04:46,639 --> 00:04:47,919
credentials from these service

127
00:04:47,919 --> 00:04:50,639
principles to authenticate to the tenant

128
00:04:50,639 --> 00:04:51,680
so

129
00:04:51,680 --> 00:04:53,280
a lot of different types of security

130
00:04:53,280 --> 00:04:55,440
principles here at the core we just need

131
00:04:55,440 --> 00:04:57,280
to understand that a security principle

132
00:04:57,280 --> 00:05:00,479
can have a specific role in a tenant and

133
00:05:00,479 --> 00:05:02,479
that role dictates what we're able to

134
00:05:02,479 --> 00:05:04,160
access

135
00:05:04,160 --> 00:05:05,520
so at

136
00:05:05,520 --> 00:05:06,479
the

137
00:05:06,479 --> 00:05:09,039
subscription management group type of

138
00:05:09,039 --> 00:05:11,360
level those roles that are being applied

139
00:05:11,360 --> 00:05:13,360
are typically owner contributor reader

140
00:05:13,360 --> 00:05:15,759
kind of as the three primary items that

141
00:05:15,759 --> 00:05:18,160
we're seeing owner being somebody that

142
00:05:18,160 --> 00:05:19,520
is able to

143
00:05:19,520 --> 00:05:21,759
assign resources

144
00:05:21,759 --> 00:05:23,440
specific

145
00:05:23,440 --> 00:05:25,680
applications of roles so as an owner i

146
00:05:25,680 --> 00:05:27,520
could assign somebody reader rights to a

147
00:05:27,520 --> 00:05:29,919
specific resource group or resource or

148
00:05:29,919 --> 00:05:32,000
subscription at contributor we have

149
00:05:32,000 --> 00:05:34,800
rights to modify individual resources

150
00:05:34,800 --> 00:05:37,120
that are in the platform

151
00:05:37,120 --> 00:05:40,320
the owner also has these rights as well

152
00:05:40,320 --> 00:05:42,560
and they're able to make changes to any

153
00:05:42,560 --> 00:05:44,160
of those resources

154
00:05:44,160 --> 00:05:46,320
the least interesting of these is reader

155
00:05:46,320 --> 00:05:47,520
which is something that we're actually

156
00:05:47,520 --> 00:05:49,840
granted quite often during an azure pen

157
00:05:49,840 --> 00:05:52,080
test where we have read-only access

158
00:05:52,080 --> 00:05:53,919
we're not allowed to make any changes to

159
00:05:53,919 --> 00:05:56,400
any resources we can't assign any rights

160
00:05:56,400 --> 00:05:58,800
to any resources to any of the security

161
00:05:58,800 --> 00:06:00,160
principles

162
00:06:00,160 --> 00:06:02,080
it's literally just you can read

163
00:06:02,080 --> 00:06:04,319
information about these resources so

164
00:06:04,319 --> 00:06:06,000
pretty straightforward on the reader

165
00:06:06,000 --> 00:06:07,919
there are additional kind of special

166
00:06:07,919 --> 00:06:09,600
roles that can be applied at multiple

167
00:06:09,600 --> 00:06:11,520
different levels here uh

168
00:06:11,520 --> 00:06:13,840
a lot of these are really service

169
00:06:13,840 --> 00:06:16,240
service specific or application specific

170
00:06:16,240 --> 00:06:18,580
uh depending on the needs of the

171
00:06:18,580 --> 00:06:19,680
[Music]

172
00:06:19,680 --> 00:06:21,600
service principle or security principle

173
00:06:21,600 --> 00:06:23,840
that needs access to something maybe

174
00:06:23,840 --> 00:06:26,160
it's log analytics contributor and that

175
00:06:26,160 --> 00:06:28,319
user needs specific access to log

176
00:06:28,319 --> 00:06:31,120
analytics resources that's more of a

177
00:06:31,120 --> 00:06:33,199
service application specific role that

178
00:06:33,199 --> 00:06:34,960
might be applied here

179
00:06:34,960 --> 00:06:37,199
and these roles can be applied at a

180
00:06:37,199 --> 00:06:39,039
number of different levels so at the

181
00:06:39,039 --> 00:06:41,440
highest level the management group where

182
00:06:41,440 --> 00:06:44,000
there are containers of individual

183
00:06:44,000 --> 00:06:45,520
subscriptions that might be under a

184
00:06:45,520 --> 00:06:47,280
management group all the way down to

185
00:06:47,280 --> 00:06:49,440
individual resources so somebody could

186
00:06:49,440 --> 00:06:52,080
technically have reader on an individual

187
00:06:52,080 --> 00:06:54,000
resource and it's the only resource in

188
00:06:54,000 --> 00:06:56,080
the overall subscription or management

189
00:06:56,080 --> 00:06:58,160
group that they have access to

190
00:06:58,160 --> 00:06:59,840
so a number of different ways that we

191
00:06:59,840 --> 00:07:01,919
can apply these one thing to note here

192
00:07:01,919 --> 00:07:04,080
is that these roles are at what we would

193
00:07:04,080 --> 00:07:06,479
say the subscription level as compared

194
00:07:06,479 --> 00:07:07,520
to

195
00:07:07,520 --> 00:07:09,759
the azure active directory tenant level

196
00:07:09,759 --> 00:07:11,599
so on the previous slide here we talked

197
00:07:11,599 --> 00:07:14,319
about the azure ad tenant being the core

198
00:07:14,319 --> 00:07:16,960
of the identity that has a whole set of

199
00:07:16,960 --> 00:07:18,400
different roles that are applied at the

200
00:07:18,400 --> 00:07:20,560
tenant level versus the individual

201
00:07:20,560 --> 00:07:22,960
subscriptions or management groups for

202
00:07:22,960 --> 00:07:24,319
today's talk we're actually just going

203
00:07:24,319 --> 00:07:26,960
to be focusing on we'll say subscription

204
00:07:26,960 --> 00:07:29,680
level contributor and we'll talk about

205
00:07:29,680 --> 00:07:31,360
that in the next slide here but we can

206
00:07:31,360 --> 00:07:34,639
assume that uh we as an attacker have

207
00:07:34,639 --> 00:07:35,840
contributor

208
00:07:35,840 --> 00:07:38,000
on the specific subscription that we're

209
00:07:38,000 --> 00:07:40,160
working with here now

210
00:07:40,160 --> 00:07:41,520
some people will say yeah but that's

211
00:07:41,520 --> 00:07:43,120
that's basically admin on the

212
00:07:43,120 --> 00:07:45,039
subscription in some ways people are

213
00:07:45,039 --> 00:07:46,960
correct in saying that a contributor

214
00:07:46,960 --> 00:07:48,960
does have rights to make modifications

215
00:07:48,960 --> 00:07:51,280
to any of the resources that are in that

216
00:07:51,280 --> 00:07:53,280
subscription but for the most part we're

217
00:07:53,280 --> 00:07:55,120
seeing developers engineers anybody

218
00:07:55,120 --> 00:07:57,199
that's doing anything on a day-to-day

219
00:07:57,199 --> 00:07:59,680
basis in the platform having the

220
00:07:59,680 --> 00:08:02,319
contributor role for the subscription

221
00:08:02,319 --> 00:08:04,800
so in a way yeah you are basically admin

222
00:08:04,800 --> 00:08:06,319
i think it's more on par with local

223
00:08:06,319 --> 00:08:08,720
admin on your own workstation or shared

224
00:08:08,720 --> 00:08:10,879
local admin across multiple workstations

225
00:08:10,879 --> 00:08:12,479
on a traditional active directory

226
00:08:12,479 --> 00:08:13,680
environment

227
00:08:13,680 --> 00:08:15,840
but you know with contributor we do have

228
00:08:15,840 --> 00:08:18,240
some power here and as i mentioned

229
00:08:18,240 --> 00:08:20,560
before we'll use that power to extract

230
00:08:20,560 --> 00:08:22,000
credentials out of here

231
00:08:22,000 --> 00:08:23,680
there are other roles that we could talk

232
00:08:23,680 --> 00:08:26,000
about today that do have access to some

233
00:08:26,000 --> 00:08:27,919
of these either application specific

234
00:08:27,919 --> 00:08:29,919
credentials or individual services that

235
00:08:29,919 --> 00:08:32,559
we can extract credentials from

236
00:08:32,559 --> 00:08:34,399
we don't really have time to dive into

237
00:08:34,399 --> 00:08:35,919
every single one of these uh we'll

238
00:08:35,919 --> 00:08:37,679
mention a couple of these as we go

239
00:08:37,679 --> 00:08:40,159
throughout here but just keep in mind

240
00:08:40,159 --> 00:08:40,880
that

241
00:08:40,880 --> 00:08:43,839
contributor by itself isn't the only

242
00:08:43,839 --> 00:08:46,240
credential or role that you might need

243
00:08:46,240 --> 00:08:48,000
or have access to that allows you to get

244
00:08:48,000 --> 00:08:49,920
access to credentials there are other

245
00:08:49,920 --> 00:08:52,880
options out there as well

246
00:08:53,519 --> 00:08:55,519
so first things first let's talk about

247
00:08:55,519 --> 00:08:57,839
how we manually access credentials we

248
00:08:57,839 --> 00:09:00,640
can go service by service and utilize

249
00:09:00,640 --> 00:09:02,800
either the portal cli powershell

250
00:09:02,800 --> 00:09:05,279
commandlets anything like that to do

251
00:09:05,279 --> 00:09:07,279
one-off collections so we could go to a

252
00:09:07,279 --> 00:09:08,480
storage account like we have in the

253
00:09:08,480 --> 00:09:09,839
screenshot here

254
00:09:09,839 --> 00:09:11,760
and take a look at the key that's

255
00:09:11,760 --> 00:09:14,160
associated with that storage account

256
00:09:14,160 --> 00:09:16,560
that's fine but as a pen tester i want

257
00:09:16,560 --> 00:09:18,000
to be efficient

258
00:09:18,000 --> 00:09:20,000
i really want to spend more of my time

259
00:09:20,000 --> 00:09:22,080
focusing on you know exploiting the

260
00:09:22,080 --> 00:09:23,760
vulnerabilities and diving deeper into

261
00:09:23,760 --> 00:09:25,760
the environment versus just manually

262
00:09:25,760 --> 00:09:27,839
going out and getting credentials so

263
00:09:27,839 --> 00:09:30,080
what we want to do is automate this

264
00:09:30,080 --> 00:09:31,200
process

265
00:09:31,200 --> 00:09:33,040
and conveniently that's what we've done

266
00:09:33,040 --> 00:09:35,760
with get ac passwords so get ac

267
00:09:35,760 --> 00:09:38,320
passwords is a powershell function

268
00:09:38,320 --> 00:09:40,240
that's used to automate the collection

269
00:09:40,240 --> 00:09:42,480
of any passwords that are stored within

270
00:09:42,480 --> 00:09:44,480
the azure cloud it's part of the

271
00:09:44,480 --> 00:09:46,720
microburst tool set and it's tool that i

272
00:09:46,720 --> 00:09:49,440
wrote to really just automate that whole

273
00:09:49,440 --> 00:09:51,440
process

274
00:09:51,440 --> 00:09:53,120
you know in the past we would more

275
00:09:53,120 --> 00:09:55,200
passively just gather credentials

276
00:09:55,200 --> 00:09:56,720
through configurations that we would go

277
00:09:56,720 --> 00:09:58,080
through the portal

278
00:09:58,080 --> 00:09:59,760
there are some active

279
00:09:59,760 --> 00:10:02,079
tasks that we'll talk about that the get

280
00:10:02,079 --> 00:10:03,839
a z passwords function actually

281
00:10:03,839 --> 00:10:05,680
automates for us so that we don't have

282
00:10:05,680 --> 00:10:07,360
to manually do these attacks every

283
00:10:07,360 --> 00:10:09,360
single time so it really helps automate

284
00:10:09,360 --> 00:10:11,360
this whole process and what would

285
00:10:11,360 --> 00:10:12,560
normally take

286
00:10:12,560 --> 00:10:14,720
we'll say about an hour to go through an

287
00:10:14,720 --> 00:10:16,240
entire subscription and get all of the

288
00:10:16,240 --> 00:10:18,320
credentials out service by service it

289
00:10:18,320 --> 00:10:20,560
can do that in a matter of minutes so

290
00:10:20,560 --> 00:10:22,399
very convenient for us from an attacking

291
00:10:22,399 --> 00:10:24,640
standpoint and allows us to audit any of

292
00:10:24,640 --> 00:10:26,560
the credentials we have access to

293
00:10:26,560 --> 00:10:28,640
so can be found on the netspy github

294
00:10:28,640 --> 00:10:30,959
under the microburst repo

295
00:10:30,959 --> 00:10:32,320
and we'll be talking about a little bit

296
00:10:32,320 --> 00:10:34,640
more today

297
00:10:34,640 --> 00:10:36,560
so the first of these services that

298
00:10:36,560 --> 00:10:38,000
we're going to talk about

299
00:10:38,000 --> 00:10:40,480
under the azure umbrella here is key

300
00:10:40,480 --> 00:10:43,760
vaults so pretty simply key vaults store

301
00:10:43,760 --> 00:10:44,720
keys

302
00:10:44,720 --> 00:10:46,560
it's a service for storing credentials

303
00:10:46,560 --> 00:10:49,040
be it keys secrets certificates we've

304
00:10:49,040 --> 00:10:50,800
seen all sorts of different things that

305
00:10:50,800 --> 00:10:53,519
get put into key vaults as a way to

306
00:10:53,519 --> 00:10:55,519
protect that within the azure

307
00:10:55,519 --> 00:10:57,279
infrastructure now

308
00:10:57,279 --> 00:10:59,360
there are additional protections that

309
00:10:59,360 --> 00:11:00,480
you can apply

310
00:11:00,480 --> 00:11:02,800
to the individual keys themselves we'll

311
00:11:02,800 --> 00:11:04,399
talk about that in the access policies

312
00:11:04,399 --> 00:11:06,000
but for the most part key vaults are

313
00:11:06,000 --> 00:11:07,920
really just used to store sensitive

314
00:11:07,920 --> 00:11:10,240
information and retrieve it

315
00:11:10,240 --> 00:11:12,800
as a specific

316
00:11:12,800 --> 00:11:15,360
service principle or security principle

317
00:11:15,360 --> 00:11:17,920
in the azure tenant

318
00:11:17,920 --> 00:11:19,680
so uh

319
00:11:19,680 --> 00:11:22,000
dumping the credentials from the key

320
00:11:22,000 --> 00:11:23,760
vault service manually we can just go

321
00:11:23,760 --> 00:11:26,000
through the portal or utilize

322
00:11:26,000 --> 00:11:27,760
cli or powershell command let's anything

323
00:11:27,760 --> 00:11:30,800
like that to query the individual

324
00:11:30,800 --> 00:11:32,560
secrets keys certificates anything like

325
00:11:32,560 --> 00:11:34,079
that from the key vaults themselves

326
00:11:34,079 --> 00:11:36,160
within the portal this is really simple

327
00:11:36,160 --> 00:11:37,519
we can see here that we were able to

328
00:11:37,519 --> 00:11:40,800
access the super secret password secret

329
00:11:40,800 --> 00:11:42,800
and if we hit the show secret value

330
00:11:42,800 --> 00:11:45,600
there it's a password value and we'd be

331
00:11:45,600 --> 00:11:47,760
able to return that directly in the

332
00:11:47,760 --> 00:11:51,120
portal like i said this is not the most

333
00:11:51,120 --> 00:11:52,639
convenient way to gather all of these

334
00:11:52,639 --> 00:11:54,399
credentials so we like to automate that

335
00:11:54,399 --> 00:11:56,399
with the get ac passwords

336
00:11:56,399 --> 00:11:57,839
but you know from the portal it's

337
00:11:57,839 --> 00:11:59,040
actually really easy to get these

338
00:11:59,040 --> 00:12:00,399
credentials out

339
00:12:00,399 --> 00:12:02,720
that is if you have rights to read those

340
00:12:02,720 --> 00:12:04,399
credentials so as i mentioned there are

341
00:12:04,399 --> 00:12:06,240
additional policies that you can apply

342
00:12:06,240 --> 00:12:09,200
to key vaults to restrict the access to

343
00:12:09,200 --> 00:12:10,880
the secret data that's being stored

344
00:12:10,880 --> 00:12:12,399
within the key vault

345
00:12:12,399 --> 00:12:14,240
this is done through something called an

346
00:12:14,240 --> 00:12:17,920
access policy and access policies are

347
00:12:17,920 --> 00:12:19,839
tied to individual

348
00:12:19,839 --> 00:12:22,079
principles as we can see here as the

349
00:12:22,079 --> 00:12:23,839
select principle we can select

350
00:12:23,839 --> 00:12:26,079
individual security principles that we

351
00:12:26,079 --> 00:12:27,279
apply

352
00:12:27,279 --> 00:12:29,200
the key vault permissions to so this

353
00:12:29,200 --> 00:12:32,560
could be list get create modify anything

354
00:12:32,560 --> 00:12:36,079
like that and that's per individual type

355
00:12:36,079 --> 00:12:37,440
of

356
00:12:37,440 --> 00:12:39,519
permissions so this is key secret

357
00:12:39,519 --> 00:12:41,839
certificate we can modify this

358
00:12:41,839 --> 00:12:44,000
individually to allow somebody to get

359
00:12:44,000 --> 00:12:47,040
and list these specific keys secrets and

360
00:12:47,040 --> 00:12:49,120
certificates as needed this is a really

361
00:12:49,120 --> 00:12:51,680
handy thing within azure to limit the

362
00:12:51,680 --> 00:12:54,320
scope of who has rights to access the

363
00:12:54,320 --> 00:12:56,639
key vault keys however

364
00:12:56,639 --> 00:12:59,440
anyone that has rights to modify

365
00:12:59,440 --> 00:13:01,440
be it contributor or

366
00:13:01,440 --> 00:13:03,519
key vault contributor permissions on the

367
00:13:03,519 --> 00:13:04,560
key vault

368
00:13:04,560 --> 00:13:06,240
they would have rights to modify these

369
00:13:06,240 --> 00:13:08,959
access policies so we as an attacker if

370
00:13:08,959 --> 00:13:11,279
we have contributor level rights on that

371
00:13:11,279 --> 00:13:13,600
key vault we are actually able to modify

372
00:13:13,600 --> 00:13:15,279
these access policies to give ourselves

373
00:13:15,279 --> 00:13:17,839
access we'll talk about that in a second

374
00:13:17,839 --> 00:13:20,000
there is one additional restriction i

375
00:13:20,000 --> 00:13:21,600
want to talk about here and it does

376
00:13:21,600 --> 00:13:23,040
apply to some of the other services but

377
00:13:23,040 --> 00:13:25,760
we don't really need to extend it is

378
00:13:25,760 --> 00:13:28,639
the private endpoint connections so what

379
00:13:28,639 --> 00:13:30,320
you can do with key vaults is you can

380
00:13:30,320 --> 00:13:32,560
restrict access to the key vault to a

381
00:13:32,560 --> 00:13:35,040
private endpoint or individual virtual

382
00:13:35,040 --> 00:13:36,880
networks or just selected networks that

383
00:13:36,880 --> 00:13:39,360
you want to restrict access to the vault

384
00:13:39,360 --> 00:13:41,440
for which is a great control to put in

385
00:13:41,440 --> 00:13:43,440
place i prevent somebody from the

386
00:13:43,440 --> 00:13:45,440
internet going and talking to your key

387
00:13:45,440 --> 00:13:48,480
vault to pull down keys and secrets

388
00:13:48,480 --> 00:13:50,480
if you're utilizing uh private endpoint

389
00:13:50,480 --> 00:13:52,160
connections that really gives you an

390
00:13:52,160 --> 00:13:54,639
extra step ahead against any attackers

391
00:13:54,639 --> 00:13:56,639
that get access to a principal that

392
00:13:56,639 --> 00:13:58,560
might have rights to read

393
00:13:58,560 --> 00:14:02,160
the actual credentials here now from a

394
00:14:02,160 --> 00:14:04,399
contributor level attacker's perspective

395
00:14:04,399 --> 00:14:06,240
here we could technically change this

396
00:14:06,240 --> 00:14:07,680
from private endpoints over to all

397
00:14:07,680 --> 00:14:09,839
networks but that would be a pretty

398
00:14:09,839 --> 00:14:11,839
major state change and you know if i'm

399
00:14:11,839 --> 00:14:13,440
working in a client environment i don't

400
00:14:13,440 --> 00:14:15,600
want to expose their key vault out to

401
00:14:15,600 --> 00:14:17,279
the internet and potentially allow

402
00:14:17,279 --> 00:14:19,279
somebody to gain access to that so not

403
00:14:19,279 --> 00:14:20,880
something that we would really recommend

404
00:14:20,880 --> 00:14:22,000
doing but

405
00:14:22,000 --> 00:14:23,440
from an attacker standpoint that is

406
00:14:23,440 --> 00:14:26,560
something that they might consider

407
00:14:26,560 --> 00:14:28,880
so from a get a z passwords perspective

408
00:14:28,880 --> 00:14:31,279
we're going to utilize the az powershell

409
00:14:31,279 --> 00:14:34,399
modules to automate the whole process of

410
00:14:34,399 --> 00:14:36,160
identifying all the key vaults and then

411
00:14:36,160 --> 00:14:38,480
gathering all of the key vault keys

412
00:14:38,480 --> 00:14:40,800
secrets certificates out of that

413
00:14:40,800 --> 00:14:42,959
and for each of the key vaults that are

414
00:14:42,959 --> 00:14:44,880
in a subscription we'll take a look at

415
00:14:44,880 --> 00:14:47,120
the current access policy that we talked

416
00:14:47,120 --> 00:14:48,560
about on the previous slide here to see

417
00:14:48,560 --> 00:14:51,120
if our current user has the ability to

418
00:14:51,120 --> 00:14:52,880
get or list

419
00:14:52,880 --> 00:14:55,440
the keys secrets anything like that out

420
00:14:55,440 --> 00:14:57,760
of the key vault if we don't have access

421
00:14:57,760 --> 00:15:00,079
to that what we'll do is snapshot that

422
00:15:00,079 --> 00:15:01,519
access policy

423
00:15:01,519 --> 00:15:04,079
modify it to add our specific user and

424
00:15:04,079 --> 00:15:05,600
then extract everything that we need to

425
00:15:05,600 --> 00:15:07,519
extract out of the key vault

426
00:15:07,519 --> 00:15:08,959
then once we've dumped everything out of

427
00:15:08,959 --> 00:15:10,480
there we'll go ahead and return that

428
00:15:10,480 --> 00:15:13,120
access policy back to its original state

429
00:15:13,120 --> 00:15:15,440
kind of a sneaky trick but it's actually

430
00:15:15,440 --> 00:15:17,279
really handy if we have contributor

431
00:15:17,279 --> 00:15:20,000
rights to modify these things as if

432
00:15:20,000 --> 00:15:21,920
we're trying to access keys that we

433
00:15:21,920 --> 00:15:24,000
don't have access to that might actually

434
00:15:24,000 --> 00:15:26,079
cause more alerts than just changing the

435
00:15:26,079 --> 00:15:28,399
access policy temporarily to give

436
00:15:28,399 --> 00:15:30,079
ourselves access to those keys and

437
00:15:30,079 --> 00:15:32,560
secrets

438
00:15:33,759 --> 00:15:36,880
so next up we'll talk about app services

439
00:15:36,880 --> 00:15:39,519
and app services is kind of a larger

440
00:15:39,519 --> 00:15:42,079
umbrella for the overall hosting of web

441
00:15:42,079 --> 00:15:44,720
applications apis function

442
00:15:44,720 --> 00:15:46,800
logic apps all of these kind of have

443
00:15:46,800 --> 00:15:48,240
their own little

444
00:15:48,240 --> 00:15:49,839
elements within them but overall they

445
00:15:49,839 --> 00:15:52,800
kind of work the same under app services

446
00:15:52,800 --> 00:15:55,279
the app services umbrella everything has

447
00:15:55,279 --> 00:15:58,000
configurations for the service itself

448
00:15:58,000 --> 00:16:00,560
these configurations include things like

449
00:16:00,560 --> 00:16:02,399
connection strings for connecting to

450
00:16:02,399 --> 00:16:04,720
databases uh

451
00:16:04,720 --> 00:16:05,839
any

452
00:16:05,839 --> 00:16:10,079
passwords used to upload uh code for the

453
00:16:10,079 --> 00:16:12,079
app service so you know if you think a

454
00:16:12,079 --> 00:16:14,000
traditional iis web application moving

455
00:16:14,000 --> 00:16:15,920
that up to the cloud

456
00:16:15,920 --> 00:16:18,720
you need to be able to access that app

457
00:16:18,720 --> 00:16:20,639
service up in the cloud in order to do

458
00:16:20,639 --> 00:16:22,399
that and upload files

459
00:16:22,399 --> 00:16:24,959
you can either use ftp

460
00:16:24,959 --> 00:16:26,720
there's a web management portal as well

461
00:16:26,720 --> 00:16:28,079
we're able to pull those credentials

462
00:16:28,079 --> 00:16:30,480
we'll see that on the next slide

463
00:16:30,480 --> 00:16:32,880
additionally there's access to just the

464
00:16:32,880 --> 00:16:35,360
source code itself

465
00:16:35,360 --> 00:16:36,639
function app files we're actually

466
00:16:36,639 --> 00:16:38,720
finding quite frequently people will

467
00:16:38,720 --> 00:16:40,959
hard code credentials into those

468
00:16:40,959 --> 00:16:42,560
likewise with logic apps we might be

469
00:16:42,560 --> 00:16:45,839
able to extract credentials out of those

470
00:16:45,839 --> 00:16:47,440
and then just the app services

471
00:16:47,440 --> 00:16:49,519
configuration service where we can apply

472
00:16:49,519 --> 00:16:52,000
the same configuration across multiple

473
00:16:52,000 --> 00:16:55,040
different app services and just maintain

474
00:16:55,040 --> 00:16:56,720
that same configuration that's going to

475
00:16:56,720 --> 00:16:59,120
store things like connection strings and

476
00:16:59,120 --> 00:17:00,560
potentially have stuff that we can pull

477
00:17:00,560 --> 00:17:02,160
out of there

478
00:17:02,160 --> 00:17:04,959
so from a get a z passwords perspective

479
00:17:04,959 --> 00:17:06,160
we're actually just going to be pulling

480
00:17:06,160 --> 00:17:08,079
out things from get published profile

481
00:17:08,079 --> 00:17:12,480
here but doing this manually within the

482
00:17:12,480 --> 00:17:14,319
portal we can see that there's a link

483
00:17:14,319 --> 00:17:16,160
within the app services application to

484
00:17:16,160 --> 00:17:18,400
get a published profile and while i've

485
00:17:18,400 --> 00:17:20,079
redacted all of the passwords that are

486
00:17:20,079 --> 00:17:22,160
in here we can see in the text file here

487
00:17:22,160 --> 00:17:24,319
that we've got usernames and passwords

488
00:17:24,319 --> 00:17:27,359
for web deployments for ftp deployments

489
00:17:27,359 --> 00:17:29,120
and database connection strings that

490
00:17:29,120 --> 00:17:31,039
might be in there

491
00:17:31,039 --> 00:17:33,760
this is a just a nice handy one-off if

492
00:17:33,760 --> 00:17:35,520
you happen to get access to the portal

493
00:17:35,520 --> 00:17:37,440
and want to quickly get credentials for

494
00:17:37,440 --> 00:17:39,600
app services the getting published

495
00:17:39,600 --> 00:17:41,600
profiles actually

496
00:17:41,600 --> 00:17:43,679
pretty straightforward and a quick way

497
00:17:43,679 --> 00:17:47,360
to get a couple of credentials there

498
00:17:47,360 --> 00:17:48,720
so to

499
00:17:48,720 --> 00:17:50,640
automate that we'll talk about how we're

500
00:17:50,640 --> 00:17:52,799
going to pull those out with get ac

501
00:17:52,799 --> 00:17:56,000
passwords did mention the ftp and web

502
00:17:56,000 --> 00:17:58,080
management credentials one thing i did

503
00:17:58,080 --> 00:18:01,919
want to note about this is that if you

504
00:18:01,919 --> 00:18:04,559
browse to the actual forward slash basic

505
00:18:04,559 --> 00:18:07,840
auth endpoint for the scm which is the

506
00:18:07,840 --> 00:18:09,760
kudu environment for managing these app

507
00:18:09,760 --> 00:18:12,320
services environments

508
00:18:12,320 --> 00:18:13,919
you can just use the username and

509
00:18:13,919 --> 00:18:16,240
password that was pulled out from the

510
00:18:16,240 --> 00:18:18,720
settings here on the previous page this

511
00:18:18,720 --> 00:18:21,840
is really handy for persistence as you

512
00:18:21,840 --> 00:18:24,240
can keep those credentials and i don't

513
00:18:24,240 --> 00:18:26,480
frequently see people rolling those

514
00:18:26,480 --> 00:18:29,760
credentials over so if we get access to

515
00:18:29,760 --> 00:18:31,840
those settings and those credentials we

516
00:18:31,840 --> 00:18:33,919
could potentially maintain access

517
00:18:33,919 --> 00:18:35,679
through this kudu environment through

518
00:18:35,679 --> 00:18:38,400
this basic auth endpoint here

519
00:18:38,400 --> 00:18:40,880
on the scm so you can see netspy.scm

520
00:18:40,880 --> 00:18:43,120
azure websites.net and if we

521
00:18:43,120 --> 00:18:44,720
authenticate against that basic auth

522
00:18:44,720 --> 00:18:46,880
endpoint that allows us to maintain

523
00:18:46,880 --> 00:18:49,039
access to kudu which is

524
00:18:49,039 --> 00:18:51,120
there's a web shell there there's file

525
00:18:51,120 --> 00:18:52,320
browsing there's all sorts of different

526
00:18:52,320 --> 00:18:54,640
ways that we can persist in that app

527
00:18:54,640 --> 00:18:57,679
services environment uh quick thanks to

528
00:18:57,679 --> 00:19:01,120
mcomi uh who does storm spotter he's the

529
00:19:01,120 --> 00:19:03,200
one who initially pointed me

530
00:19:03,200 --> 00:19:07,440
to this kind of interesting bypass here

531
00:19:07,440 --> 00:19:09,760
so uh one thing to note we talked about

532
00:19:09,760 --> 00:19:12,160
managed identities and you know how

533
00:19:12,160 --> 00:19:13,919
those are used in azure active directory

534
00:19:13,919 --> 00:19:15,039
tenant

535
00:19:15,039 --> 00:19:16,799
app services are frequently configured

536
00:19:16,799 --> 00:19:18,559
with managed identities and those

537
00:19:18,559 --> 00:19:20,960
managed identities are used to allow

538
00:19:20,960 --> 00:19:22,720
access to key vaults so we talked about

539
00:19:22,720 --> 00:19:24,960
key vault access policies

540
00:19:24,960 --> 00:19:26,960
these managed identities would be added

541
00:19:26,960 --> 00:19:29,360
to the access policy for the key vault

542
00:19:29,360 --> 00:19:31,520
in order to read keys secret

543
00:19:31,520 --> 00:19:32,960
certificates anything that you might

544
00:19:32,960 --> 00:19:35,840
need within an azure app services

545
00:19:35,840 --> 00:19:37,120
application

546
00:19:37,120 --> 00:19:38,880
so from

547
00:19:38,880 --> 00:19:40,880
an attacker's perspective if we're able

548
00:19:40,880 --> 00:19:42,720
to get control over an app services

549
00:19:42,720 --> 00:19:45,280
application we can generate a token for

550
00:19:45,280 --> 00:19:47,520
that managed identity and have that

551
00:19:47,520 --> 00:19:48,799
scope to

552
00:19:48,799 --> 00:19:51,120
the management apis and the key vault

553
00:19:51,120 --> 00:19:53,200
apis and use that

554
00:19:53,200 --> 00:19:55,280
to go ahead and

555
00:19:55,280 --> 00:19:57,600
take the rest apis to pull out all of

556
00:19:57,600 --> 00:19:59,679
the key vault contents we do have a

557
00:19:59,679 --> 00:20:01,919
couple of automation scripts within

558
00:20:01,919 --> 00:20:03,520
microburst to automate that whole

559
00:20:03,520 --> 00:20:06,480
process with the get a z key vault keys

560
00:20:06,480 --> 00:20:09,600
rest and secrets rest so that you can

561
00:20:09,600 --> 00:20:11,360
pull out all of those key vault contents

562
00:20:11,360 --> 00:20:12,960
that we talked about in the previous set

563
00:20:12,960 --> 00:20:14,720
of slides here

564
00:20:14,720 --> 00:20:16,320
so something to keep in mind if you get

565
00:20:16,320 --> 00:20:18,400
access to a managed identity in app

566
00:20:18,400 --> 00:20:20,480
services

567
00:20:20,480 --> 00:20:22,240
so now with that detour out of the way

568
00:20:22,240 --> 00:20:23,919
here let's talk about how we automate

569
00:20:23,919 --> 00:20:26,240
that uh really it's just getting each of

570
00:20:26,240 --> 00:20:29,760
the az web apps or app services apps and

571
00:20:29,760 --> 00:20:31,520
piping that into getting the published

572
00:20:31,520 --> 00:20:34,080
profile this is really straightforward

573
00:20:34,080 --> 00:20:35,840
it's just a couple of lines powershell

574
00:20:35,840 --> 00:20:38,080
and then we'll parse the json output

575
00:20:38,080 --> 00:20:39,520
that comes back with those publishing

576
00:20:39,520 --> 00:20:41,440
profiles to get those credentials out

577
00:20:41,440 --> 00:20:44,240
for the output

578
00:20:44,720 --> 00:20:46,720
next up we've got automation accounts

579
00:20:46,720 --> 00:20:49,120
and this is one of my favorite parts of

580
00:20:49,120 --> 00:20:51,520
the overall uh

581
00:20:51,520 --> 00:20:54,080
get a z passwords presentation here

582
00:20:54,080 --> 00:20:55,520
i'm a big fan of automation accounts

583
00:20:55,520 --> 00:20:56,559
there's a lot of different things that

584
00:20:56,559 --> 00:20:58,880
we can do with these and a lot of

585
00:20:58,880 --> 00:21:00,240
interesting things that end up getting

586
00:21:00,240 --> 00:21:01,360
stored here

587
00:21:01,360 --> 00:21:03,520
so from a service perspective automation

588
00:21:03,520 --> 00:21:05,440
accounts are meant to run serverless

589
00:21:05,440 --> 00:21:07,760
code up in azure to automate your

590
00:21:07,760 --> 00:21:09,760
day-to-day tasks so management of

591
00:21:09,760 --> 00:21:11,760
systems management of your active

592
00:21:11,760 --> 00:21:14,159
directory tenant just really managing

593
00:21:14,159 --> 00:21:15,280
all of the things that you need to

594
00:21:15,280 --> 00:21:16,960
manage without having that running on

595
00:21:16,960 --> 00:21:18,640
somebody's desktop you've got your

596
00:21:18,640 --> 00:21:20,480
serverless environment where you could

597
00:21:20,480 --> 00:21:23,679
schedule these runbook uh code books to

598
00:21:23,679 --> 00:21:25,840
just run whenever you need them so if

599
00:21:25,840 --> 00:21:27,360
you need to shut down all of the virtual

600
00:21:27,360 --> 00:21:29,039
machines you know during a certain

601
00:21:29,039 --> 00:21:30,480
window

602
00:21:30,480 --> 00:21:32,080
you can automate that with automation

603
00:21:32,080 --> 00:21:34,720
accounts it's super convenient uh run

604
00:21:34,720 --> 00:21:37,039
book codes typically in python or

605
00:21:37,039 --> 00:21:40,480
powershell and it's just a nice easy

606
00:21:40,480 --> 00:21:42,480
lightweight scripting environment to run

607
00:21:42,480 --> 00:21:45,200
serverless code so the platform itself

608
00:21:45,200 --> 00:21:47,120
stores credentials for the automation

609
00:21:47,120 --> 00:21:48,720
accounts

610
00:21:48,720 --> 00:21:51,200
in credential variables i can also

611
00:21:51,200 --> 00:21:54,000
accidentally have those included in the

612
00:21:54,000 --> 00:21:56,640
source code itself for the run books

613
00:21:56,640 --> 00:21:59,200
there's also run as accounts

614
00:21:59,200 --> 00:22:01,919
that can be used within the runbooks so

615
00:22:01,919 --> 00:22:02,960
you can think of that almost like a

616
00:22:02,960 --> 00:22:05,600
managed identity

617
00:22:05,600 --> 00:22:07,520
automation accounts are moving towards

618
00:22:07,520 --> 00:22:09,840
using managed identities it's kind of an

619
00:22:09,840 --> 00:22:11,280
in-progress thing i think it's still

620
00:22:11,280 --> 00:22:12,799
technically in preview

621
00:22:12,799 --> 00:22:15,200
but that's going to eventually replace

622
00:22:15,200 --> 00:22:17,039
these run as accounts and we'll talk

623
00:22:17,039 --> 00:22:18,320
about how we can use these run as

624
00:22:18,320 --> 00:22:19,280
accounts

625
00:22:19,280 --> 00:22:20,320
uh

626
00:22:20,320 --> 00:22:21,600
there is something important to note

627
00:22:21,600 --> 00:22:23,360
here with the run as accounts if you're

628
00:22:23,360 --> 00:22:25,440
going to use those in an automation

629
00:22:25,440 --> 00:22:26,559
account

630
00:22:26,559 --> 00:22:28,240
by default those are set as a

631
00:22:28,240 --> 00:22:30,799
contributor on the subscription so if

632
00:22:30,799 --> 00:22:32,320
we're able to extract the credentials

633
00:22:32,320 --> 00:22:34,080
for that run as account we'll have

634
00:22:34,080 --> 00:22:37,679
contributor rights in that subscription

635
00:22:37,679 --> 00:22:40,000
but typically you need contributor in

636
00:22:40,000 --> 00:22:42,159
order to extract those anyways so we'll

637
00:22:42,159 --> 00:22:43,919
talk about that a little bit more in a

638
00:22:43,919 --> 00:22:45,039
second here

639
00:22:45,039 --> 00:22:46,640
additionally you can also access key

640
00:22:46,640 --> 00:22:48,000
vaults from automation accounts kind of

641
00:22:48,000 --> 00:22:50,080
like how we talked about

642
00:22:50,080 --> 00:22:50,880
the

643
00:22:50,880 --> 00:22:53,440
app services accessing key vaults with

644
00:22:53,440 --> 00:22:55,200
tokens there's similar things that we

645
00:22:55,200 --> 00:22:57,200
can do with either run as accounts or

646
00:22:57,200 --> 00:22:58,880
additional credentials that are supplied

647
00:22:58,880 --> 00:23:00,799
to the automation account the bottom

648
00:23:00,799 --> 00:23:02,240
line is typically we see key vaults

649
00:23:02,240 --> 00:23:04,320
being accessed from automation accounts

650
00:23:04,320 --> 00:23:06,320
to pull in secret data let's say there's

651
00:23:06,320 --> 00:23:07,039
a

652
00:23:07,039 --> 00:23:09,440
shared password or a key that's being

653
00:23:09,440 --> 00:23:10,960
shared across things that need to be

654
00:23:10,960 --> 00:23:12,480
automated that might need to be pulled

655
00:23:12,480 --> 00:23:14,240
from a key vault first into the

656
00:23:14,240 --> 00:23:16,320
automation account run book and we might

657
00:23:16,320 --> 00:23:18,320
be able to abuse that run book to then

658
00:23:18,320 --> 00:23:22,280
get access to the key

659
00:23:22,720 --> 00:23:25,039
so uh for the clear text credentials

660
00:23:25,039 --> 00:23:27,520
themselves that get stored in a runbook

661
00:23:27,520 --> 00:23:29,600
this is really easy to audit if you've

662
00:23:29,600 --> 00:23:32,400
got portal access and just use the view

663
00:23:32,400 --> 00:23:34,720
within the portal here we can view the

664
00:23:34,720 --> 00:23:36,320
source code for the runbook and

665
00:23:36,320 --> 00:23:37,760
potentially pull out clear text

666
00:23:37,760 --> 00:23:39,120
credentials

667
00:23:39,120 --> 00:23:41,600
it's really simple you can read the code

668
00:23:41,600 --> 00:23:43,039
they're right there

669
00:23:43,039 --> 00:23:45,440
it happens more often than you'd like to

670
00:23:45,440 --> 00:23:46,880
admit but

671
00:23:46,880 --> 00:23:48,960
something to look out for there

672
00:23:48,960 --> 00:23:50,640
additionally if we want to pull out the

673
00:23:50,640 --> 00:23:53,440
platform level passwords or any of the

674
00:23:53,440 --> 00:23:55,760
run as credentials we need to run a

675
00:23:55,760 --> 00:23:58,320
custom run book to extract those so the

676
00:23:58,320 --> 00:24:00,080
run book being powershell code here that

677
00:24:00,080 --> 00:24:02,559
we're looking at and we won't go line by

678
00:24:02,559 --> 00:24:04,880
line here but essentially what we're

679
00:24:04,880 --> 00:24:07,360
doing is we're casting the available

680
00:24:07,360 --> 00:24:09,120
credentials in this case there's a test

681
00:24:09,120 --> 00:24:10,400
credential we can also see in the

682
00:24:10,400 --> 00:24:12,720
sidebar there's a carl credential stored

683
00:24:12,720 --> 00:24:13,840
there

684
00:24:13,840 --> 00:24:15,360
but what we can do is cast that

685
00:24:15,360 --> 00:24:17,279
credential out to a variable and write

686
00:24:17,279 --> 00:24:19,679
that out in the output additionally we

687
00:24:19,679 --> 00:24:22,080
can take the runes certificate by

688
00:24:22,080 --> 00:24:24,240
getting the individual certificate

689
00:24:24,240 --> 00:24:26,400
itself from the environment and then

690
00:24:26,400 --> 00:24:29,600
casting that out to a base64 string

691
00:24:29,600 --> 00:24:32,000
which we could then copy out and save

692
00:24:32,000 --> 00:24:34,559
elsewhere

693
00:24:34,799 --> 00:24:37,360
so in order to do that we would use

694
00:24:37,360 --> 00:24:39,440
what's called the test pane so we can

695
00:24:39,440 --> 00:24:41,600
see here just above the code there's a

696
00:24:41,600 --> 00:24:43,760
little box that says test pane and this

697
00:24:43,760 --> 00:24:44,880
is the view that we're going to look at

698
00:24:44,880 --> 00:24:48,799
here so in the test pane you can

699
00:24:48,799 --> 00:24:51,440
run your automation account run book and

700
00:24:51,440 --> 00:24:52,960
that will output any of those stored

701
00:24:52,960 --> 00:24:54,960
credentials output that run as

702
00:24:54,960 --> 00:24:57,039
certificate here that we can copy off of

703
00:24:57,039 --> 00:24:57,840
here

704
00:24:57,840 --> 00:25:00,720
and this does not get logged as the jobs

705
00:25:00,720 --> 00:25:02,320
within the automation account now you

706
00:25:02,320 --> 00:25:03,760
might be looking at this and going oh

707
00:25:03,760 --> 00:25:04,960
yeah there's there's clear text

708
00:25:04,960 --> 00:25:06,400
credentials that are being returned back

709
00:25:06,400 --> 00:25:07,760
to the screen i hope these aren't being

710
00:25:07,760 --> 00:25:09,600
logged anywhere

711
00:25:09,600 --> 00:25:11,760
if you're running this as an actual job

712
00:25:11,760 --> 00:25:13,360
yes that would happen but if you're

713
00:25:13,360 --> 00:25:16,240
running this in the test pane here this

714
00:25:16,240 --> 00:25:17,840
never ends up in any of the logs all

715
00:25:17,840 --> 00:25:20,640
that you see in the logs is that the

716
00:25:20,640 --> 00:25:22,559
run book was saved and that the test

717
00:25:22,559 --> 00:25:24,480
pane job was run but

718
00:25:24,480 --> 00:25:26,320
the actual output never comes back there

719
00:25:26,320 --> 00:25:28,240
so it is kind of a stealthier way to get

720
00:25:28,240 --> 00:25:30,559
these credentials manually but it's also

721
00:25:30,559 --> 00:25:32,880
not the most uh

722
00:25:32,880 --> 00:25:34,320
it's uh

723
00:25:34,320 --> 00:25:35,360
you know

724
00:25:35,360 --> 00:25:36,880
it's a little slow to go through all of

725
00:25:36,880 --> 00:25:38,240
this i've spent more time than i'd like

726
00:25:38,240 --> 00:25:41,120
to admit waiting for automation runbooks

727
00:25:41,120 --> 00:25:43,760
to complete so

728
00:25:43,760 --> 00:25:45,440
you know automating this through get ac

729
00:25:45,440 --> 00:25:47,600
passwords is much faster

730
00:25:47,600 --> 00:25:49,919
so speaking of when we do that we want

731
00:25:49,919 --> 00:25:52,400
to encrypt all of that output so

732
00:25:52,400 --> 00:25:54,320
when we're

733
00:25:54,320 --> 00:25:56,000
potentially outputting clear text

734
00:25:56,000 --> 00:25:58,880
credentials that might you know contain

735
00:25:58,880 --> 00:26:00,640
actual credential data here we don't

736
00:26:00,640 --> 00:26:02,799
want somebody with reader level access

737
00:26:02,799 --> 00:26:04,559
to be able to read the output of these

738
00:26:04,559 --> 00:26:07,120
jobs and potentially get access to data

739
00:26:07,120 --> 00:26:09,200
that they shouldn't have access to so we

740
00:26:09,200 --> 00:26:11,039
can see on the left here the before and

741
00:26:11,039 --> 00:26:12,640
on the right the after

742
00:26:12,640 --> 00:26:14,720
of what our encryption method looks like

743
00:26:14,720 --> 00:26:18,080
so what we utilize is a certificate that

744
00:26:18,080 --> 00:26:20,720
gets uploaded with the run book and we

745
00:26:20,720 --> 00:26:23,200
keep the private key on the get az

746
00:26:23,200 --> 00:26:25,200
password side so that we're able to

747
00:26:25,200 --> 00:26:27,919
decrypt everything on our end here but

748
00:26:27,919 --> 00:26:31,039
we'll encrypt all of that output

749
00:26:31,039 --> 00:26:33,440
in that output pane here and then clean

750
00:26:33,440 --> 00:26:34,799
up after ourselves after everything's

751
00:26:34,799 --> 00:26:36,799
done so that nobody can actually decrypt

752
00:26:36,799 --> 00:26:39,679
that output that is put out into the

753
00:26:39,679 --> 00:26:41,919
jobs output here this is just a much

754
00:26:41,919 --> 00:26:44,640
cleaner way of getting output back from

755
00:26:44,640 --> 00:26:46,240
the automation account itself and it

756
00:26:46,240 --> 00:26:48,000
protects everybody from accidentally

757
00:26:48,000 --> 00:26:49,520
exposing passwords

758
00:26:49,520 --> 00:26:51,039
so something to kind of keep in mind as

759
00:26:51,039 --> 00:26:53,840
we're utilizing automation accounts and

760
00:26:53,840 --> 00:26:57,120
getting credentials out of there

761
00:26:58,640 --> 00:27:01,760
so like we talked about with the app

762
00:27:01,760 --> 00:27:03,279
services and getting access to key

763
00:27:03,279 --> 00:27:04,240
vaults

764
00:27:04,240 --> 00:27:07,039
there were some issues with runes

765
00:27:07,039 --> 00:27:09,440
accounts being able to read key vaults

766
00:27:09,440 --> 00:27:11,919
and some permissions related items that

767
00:27:11,919 --> 00:27:14,000
microsoft addressed with the cve back in

768
00:27:14,000 --> 00:27:17,679
2019 but we put together a

769
00:27:17,679 --> 00:27:18,880
run book

770
00:27:18,880 --> 00:27:20,960
automation script called get a z key

771
00:27:20,960 --> 00:27:23,520
vaults automation within microburst to

772
00:27:23,520 --> 00:27:25,679
help automate that whole process of

773
00:27:25,679 --> 00:27:28,000
extracting credentials from a key vault

774
00:27:28,000 --> 00:27:31,279
utilizing automation account run books

775
00:27:31,279 --> 00:27:32,559
that could be a whole other talk in

776
00:27:32,559 --> 00:27:34,799
terms of kind of how all of that gets

777
00:27:34,799 --> 00:27:37,600
orchestrated within the runbook itself

778
00:27:37,600 --> 00:27:39,120
but just something to kind of keep in

779
00:27:39,120 --> 00:27:40,799
mind if you get access to an automation

780
00:27:40,799 --> 00:27:42,559
account and want to access

781
00:27:42,559 --> 00:27:44,880
an attached key vault there are tools in

782
00:27:44,880 --> 00:27:46,320
microburst that you might be able to use

783
00:27:46,320 --> 00:27:49,840
there to automate that process

784
00:27:50,720 --> 00:27:53,440
so uh getting all of these credentials

785
00:27:53,440 --> 00:27:55,279
out with get ac passwords we've talked

786
00:27:55,279 --> 00:27:57,520
about all of this kind of as a whole but

787
00:27:57,520 --> 00:27:59,760
for each automation account we basically

788
00:27:59,760 --> 00:28:01,840
list out any available credentials run

789
00:28:01,840 --> 00:28:03,520
as accounts we're going to upload a

790
00:28:03,520 --> 00:28:05,919
malicious run book i say it's malicious

791
00:28:05,919 --> 00:28:08,159
but we're the ones running it it's just

792
00:28:08,159 --> 00:28:10,000
going to be extracting credentials here

793
00:28:10,000 --> 00:28:11,679
would you randomly name these so if you

794
00:28:11,679 --> 00:28:14,480
happen to find evidence of a randomly

795
00:28:14,480 --> 00:28:17,440
named run book in your subscription

796
00:28:17,440 --> 00:28:19,600
something like 15 characters long upper

797
00:28:19,600 --> 00:28:21,360
and lower case letters

798
00:28:21,360 --> 00:28:23,760
that may indicate get a z passwords was

799
00:28:23,760 --> 00:28:27,039
run in that automation account

800
00:28:27,039 --> 00:28:29,200
but once we upload and run that run book

801
00:28:29,200 --> 00:28:31,039
that will extract those credentials

802
00:28:31,039 --> 00:28:33,279
encrypt everything on the fly and

803
00:28:33,279 --> 00:28:35,919
decrypt those credentials client-side

804
00:28:35,919 --> 00:28:38,080
once we pull the output from the

805
00:28:38,080 --> 00:28:39,840
automation account job

806
00:28:39,840 --> 00:28:41,919
then we'll go ahead and clean up those

807
00:28:41,919 --> 00:28:43,520
automation run books after we've

808
00:28:43,520 --> 00:28:45,520
completed everything

809
00:28:45,520 --> 00:28:46,960
one important to note

810
00:28:46,960 --> 00:28:49,039
thing to note here if you're going to

811
00:28:49,039 --> 00:28:52,080
run git ac passwords is do not use ctrl

812
00:28:52,080 --> 00:28:53,440
c while that function is running

813
00:28:53,440 --> 00:28:55,039
particularly

814
00:28:55,039 --> 00:28:57,360
during the automation account phase if

815
00:28:57,360 --> 00:28:58,880
you control c while an automation

816
00:28:58,880 --> 00:29:01,279
account runbook is still running that

817
00:29:01,279 --> 00:29:04,320
will leave that resident uh randomly

818
00:29:04,320 --> 00:29:06,399
named runbook up in

819
00:29:06,399 --> 00:29:08,720
the automation account and we don't want

820
00:29:08,720 --> 00:29:10,559
to leave anything behind and that may

821
00:29:10,559 --> 00:29:12,880
potentially uh you know just

822
00:29:12,880 --> 00:29:14,640
leave behind indicators of compromise

823
00:29:14,640 --> 00:29:15,679
anything like that so you want to make

824
00:29:15,679 --> 00:29:17,840
sure that you clean up any kind of

825
00:29:17,840 --> 00:29:20,240
orphaned run books that end up there if

826
00:29:20,240 --> 00:29:22,799
you control c while uh the function's

827
00:29:22,799 --> 00:29:27,080
running for get ac passwords

828
00:29:27,440 --> 00:29:30,960
so for storage accounts uh

829
00:29:30,960 --> 00:29:32,159
storage accounts are pretty

830
00:29:32,159 --> 00:29:34,080
straightforward they store things it's

831
00:29:34,080 --> 00:29:36,320
file storage in the azure cloud you can

832
00:29:36,320 --> 00:29:39,120
think of it as kind of like aws s3 for

833
00:29:39,120 --> 00:29:40,159
those that are a little bit more

834
00:29:40,159 --> 00:29:42,080
well-versed in aws

835
00:29:42,080 --> 00:29:44,880
but for the azure platform now unlike

836
00:29:44,880 --> 00:29:48,399
aws s3 the storage accounts in azure

837
00:29:48,399 --> 00:29:49,840
also have

838
00:29:49,840 --> 00:29:52,720
different file storage types so we have

839
00:29:52,720 --> 00:29:55,840
blob table queue file all of those are

840
00:29:55,840 --> 00:29:58,480
different ways of storing either data or

841
00:29:58,480 --> 00:30:01,600
just files flat files anything like that

842
00:30:01,600 --> 00:30:04,320
we're really going to be focusing on

843
00:30:04,320 --> 00:30:07,039
keys that can be used to access any of

844
00:30:07,039 --> 00:30:09,600
those different types of storage items

845
00:30:09,600 --> 00:30:10,480
here

846
00:30:10,480 --> 00:30:13,039
but in general storage accounts store

847
00:30:13,039 --> 00:30:13,919
files

848
00:30:13,919 --> 00:30:15,760
you can think of it that way and in

849
00:30:15,760 --> 00:30:17,600
order to access these we have keys we

850
00:30:17,600 --> 00:30:19,120
took a look at this earlier at the very

851
00:30:19,120 --> 00:30:20,960
beginning of how you would be able to

852
00:30:20,960 --> 00:30:24,159
extract keys out of a storage account on

853
00:30:24,159 --> 00:30:26,799
the very first couple of slides here

854
00:30:26,799 --> 00:30:28,159
talking about

855
00:30:28,159 --> 00:30:30,000
getting the keys for individual storage

856
00:30:30,000 --> 00:30:32,000
accounts from the portal

857
00:30:32,000 --> 00:30:33,679
additionally you could go through

858
00:30:33,679 --> 00:30:36,240
available files in things like file

859
00:30:36,240 --> 00:30:38,960
services or blob storage where there

860
00:30:38,960 --> 00:30:41,279
might be clear text credentials in

861
00:30:41,279 --> 00:30:43,520
a configuration file anything like that

862
00:30:43,520 --> 00:30:45,039
that's not really an easy thing to

863
00:30:45,039 --> 00:30:46,720
automate so we don't automate pulling

864
00:30:46,720 --> 00:30:48,320
down credential files or anything like

865
00:30:48,320 --> 00:30:50,880
that with get ac passwords but as a pen

866
00:30:50,880 --> 00:30:52,960
tester you might want to keep in mind

867
00:30:52,960 --> 00:30:55,200
reviewing individual files once you get

868
00:30:55,200 --> 00:30:57,200
to a point of contributor or storage

869
00:30:57,200 --> 00:30:58,960
account contributor in an azure

870
00:30:58,960 --> 00:31:00,159
subscription

871
00:31:00,159 --> 00:31:01,919
we do frequently find configuration

872
00:31:01,919 --> 00:31:03,760
files that are hanging out in storage

873
00:31:03,760 --> 00:31:06,720
accounts which lead to other credentials

874
00:31:06,720 --> 00:31:08,399
but for our purposes here we're really

875
00:31:08,399 --> 00:31:09,919
going to focus on getting these storage

876
00:31:09,919 --> 00:31:11,120
account keys

877
00:31:11,120 --> 00:31:13,039
these can be used with

878
00:31:13,039 --> 00:31:16,240
the storage account explorer

879
00:31:16,240 --> 00:31:17,279
there's a number of different ways that

880
00:31:17,279 --> 00:31:19,919
we can use these keys to get access to

881
00:31:19,919 --> 00:31:21,760
the actual uh storage accounts

882
00:31:21,760 --> 00:31:24,240
themselves and view some of those files

883
00:31:24,240 --> 00:31:25,919
and persist potentially in that storage

884
00:31:25,919 --> 00:31:27,200
account environment

885
00:31:27,200 --> 00:31:29,200
one of these ways is with cloud shell

886
00:31:29,200 --> 00:31:31,600
files so as i mentioned we can get

887
00:31:31,600 --> 00:31:34,159
access to those keys access the

888
00:31:34,159 --> 00:31:36,480
associated file shares for any cloud

889
00:31:36,480 --> 00:31:38,480
shell file shares

890
00:31:38,480 --> 00:31:39,760
typically these are going to start with

891
00:31:39,760 --> 00:31:42,480
the letter cs and then some random

892
00:31:42,480 --> 00:31:45,039
letters and numbers generated after that

893
00:31:45,039 --> 00:31:47,440
these are file shares that are created

894
00:31:47,440 --> 00:31:50,559
to run your cloud shell environment so

895
00:31:50,559 --> 00:31:52,080
if you've ever used the azure portal

896
00:31:52,080 --> 00:31:54,000
before and more specifically use the

897
00:31:54,000 --> 00:31:56,399
cloud shell environment underneath that

898
00:31:56,399 --> 00:31:58,000
you would have seen when you created the

899
00:31:58,000 --> 00:32:00,320
cloud shell environment an option to

900
00:32:00,320 --> 00:32:02,159
either select an existing storage

901
00:32:02,159 --> 00:32:04,640
account or create a new storage account

902
00:32:04,640 --> 00:32:05,919
typically when you create the new

903
00:32:05,919 --> 00:32:08,000
storage account it creates that cs

904
00:32:08,000 --> 00:32:10,960
prefixed file share storage account

905
00:32:10,960 --> 00:32:12,960
within your subscription to store all of

906
00:32:12,960 --> 00:32:16,080
these uh what i have seen in the past is

907
00:32:16,080 --> 00:32:17,840
that uh

908
00:32:17,840 --> 00:32:19,440
depending on the environment multiple

909
00:32:19,440 --> 00:32:22,159
people might share the same cloud

910
00:32:22,159 --> 00:32:25,200
cloud shell storage uh for each of their

911
00:32:25,200 --> 00:32:27,360
different cloud shells this is

912
00:32:27,360 --> 00:32:29,679
potentially really dangerous as anyone

913
00:32:29,679 --> 00:32:31,360
who has contributor rights on that

914
00:32:31,360 --> 00:32:34,000
storage account has rights to modify

915
00:32:34,000 --> 00:32:35,760
those file systems

916
00:32:35,760 --> 00:32:39,200
so if i as a user am using cloud shell

917
00:32:39,200 --> 00:32:41,120
that's going to store uh

918
00:32:41,120 --> 00:32:44,640
an img file which is an ext2 file system

919
00:32:44,640 --> 00:32:47,279
up in a cloud console folder up in the

920
00:32:47,279 --> 00:32:49,279
file shares what we can do as an

921
00:32:49,279 --> 00:32:52,399
attacker is pull that img file down

922
00:32:52,399 --> 00:32:54,559
mount that on a linux system

923
00:32:54,559 --> 00:32:56,640
and either review any files so let's say

924
00:32:56,640 --> 00:32:58,880
i store configuration scripts up in my

925
00:32:58,880 --> 00:33:00,240
cloud shell environment that have

926
00:33:00,240 --> 00:33:01,760
credentials in them

927
00:33:01,760 --> 00:33:03,360
an attacker could potentially get access

928
00:33:03,360 --> 00:33:06,399
to those additionally you can modify any

929
00:33:06,399 --> 00:33:08,080
of these startup files for things like

930
00:33:08,080 --> 00:33:10,240
bash or powershell to automatically run

931
00:33:10,240 --> 00:33:12,399
commands when somebody logs into cloud

932
00:33:12,399 --> 00:33:14,880
shell so as an attacker we download the

933
00:33:14,880 --> 00:33:17,279
file mount the file system modify the

934
00:33:17,279 --> 00:33:20,480
startup files to say add our user as an

935
00:33:20,480 --> 00:33:22,720
owner on a subscription or

936
00:33:22,720 --> 00:33:24,799
do some other types of malicious

937
00:33:24,799 --> 00:33:27,600
commands here we re-upload that img file

938
00:33:27,600 --> 00:33:29,120
up to the file share and the next time

939
00:33:29,120 --> 00:33:30,080
that

940
00:33:30,080 --> 00:33:32,320
victim user opens up their cloud shell

941
00:33:32,320 --> 00:33:35,440
environment that executes those commands

942
00:33:35,440 --> 00:33:38,399
in that victim's cloud shell this can be

943
00:33:38,399 --> 00:33:40,480
potentially pretty dangerous uh you know

944
00:33:40,480 --> 00:33:42,799
if i'm able to poison the cloud shell

945
00:33:42,799 --> 00:33:44,399
account of a global administrator

946
00:33:44,399 --> 00:33:46,399
account that would be an easy way for me

947
00:33:46,399 --> 00:33:48,240
to escalate privileges

948
00:33:48,240 --> 00:33:50,799
so uh we detailed all of this in a

949
00:33:50,799 --> 00:33:52,320
netspy blog here that i've linked down

950
00:33:52,320 --> 00:33:54,559
at the bottom but definitely something

951
00:33:54,559 --> 00:33:56,640
to keep in mind uh we typically just

952
00:33:56,640 --> 00:33:59,440
recommend don't use cloud shell

953
00:33:59,440 --> 00:34:00,559
if you're going to use cloud shell make

954
00:34:00,559 --> 00:34:01,840
sure you're locking down those file

955
00:34:01,840 --> 00:34:04,480
shares to limit any potential exposure

956
00:34:04,480 --> 00:34:07,480
there

957
00:34:08,399 --> 00:34:09,199
so

958
00:34:09,199 --> 00:34:11,359
dumping those storage accounts is really

959
00:34:11,359 --> 00:34:13,280
really simple we just get a list of the

960
00:34:13,280 --> 00:34:14,560
storage accounts and then for each

961
00:34:14,560 --> 00:34:16,000
storage account we get the storage

962
00:34:16,000 --> 00:34:18,079
account key i could probably cut this

963
00:34:18,079 --> 00:34:19,839
down to like a two

964
00:34:19,839 --> 00:34:22,560
maybe in powershell uh you could maybe

965
00:34:22,560 --> 00:34:24,800
even just do a one-liner of get that and

966
00:34:24,800 --> 00:34:26,960
pipeline it into the get storage account

967
00:34:26,960 --> 00:34:30,239
key but really really simple uh super

968
00:34:30,239 --> 00:34:32,320
easy to automate and it's really easy

969
00:34:32,320 --> 00:34:35,839
for us from a persistence perspective

970
00:34:36,320 --> 00:34:38,000
next up we've got azure container

971
00:34:38,000 --> 00:34:40,079
registries so for those that are not

972
00:34:40,079 --> 00:34:42,239
familiar with azure container registries

973
00:34:42,239 --> 00:34:44,320
or acrs as i'm going to refer to them

974
00:34:44,320 --> 00:34:45,839
going forward here

975
00:34:45,839 --> 00:34:47,280
they are a

976
00:34:47,280 --> 00:34:49,520
repository for any container images that

977
00:34:49,520 --> 00:34:51,679
you might want to use either in azure

978
00:34:51,679 --> 00:34:53,918
services like container instances or

979
00:34:53,918 --> 00:34:56,639
azure kubernetes or aks which we'll talk

980
00:34:56,639 --> 00:34:58,640
about next

981
00:34:58,640 --> 00:35:00,640
but it's a service for storing all of

982
00:35:00,640 --> 00:35:02,720
these images for any of those services

983
00:35:02,720 --> 00:35:05,599
or potentially publicly exposing azure

984
00:35:05,599 --> 00:35:07,440
registries so that

985
00:35:07,440 --> 00:35:10,000
other people can get access to images

986
00:35:10,000 --> 00:35:12,240
maybe intentionally you want to

987
00:35:12,240 --> 00:35:13,599
have a docker image available for

988
00:35:13,599 --> 00:35:14,960
somebody to use

989
00:35:14,960 --> 00:35:16,880
that's what that service is for

990
00:35:16,880 --> 00:35:18,480
so the passwords themselves can either

991
00:35:18,480 --> 00:35:20,960
be found in container images what we

992
00:35:20,960 --> 00:35:22,640
frequently see is service principle

993
00:35:22,640 --> 00:35:24,240
credentials like we talked about way

994
00:35:24,240 --> 00:35:26,720
back beginning might be stored in these

995
00:35:26,720 --> 00:35:28,880
container images themselves

996
00:35:28,880 --> 00:35:30,400
if you've got a kubernetes cluster and

997
00:35:30,400 --> 00:35:32,480
don't want to deal with pulling secrets

998
00:35:32,480 --> 00:35:34,560
down into these individual containers as

999
00:35:34,560 --> 00:35:36,800
they get spun up it may just be easier

1000
00:35:36,800 --> 00:35:38,560
to bake in those credentials into the

1001
00:35:38,560 --> 00:35:40,640
container images this is not a good

1002
00:35:40,640 --> 00:35:42,480
practice but we frequently see this

1003
00:35:42,480 --> 00:35:45,040
happening so as an attacker we

1004
00:35:45,040 --> 00:35:46,560
frequently pull down those container

1005
00:35:46,560 --> 00:35:48,560
images and extract credentials out of

1006
00:35:48,560 --> 00:35:50,400
them

1007
00:35:50,400 --> 00:35:52,400
really only requires reader level

1008
00:35:52,400 --> 00:35:53,599
credentials

1009
00:35:53,599 --> 00:35:55,520
in that azure subscription to pull those

1010
00:35:55,520 --> 00:35:57,760
images down but we'll talk about that in

1011
00:35:57,760 --> 00:35:59,280
the next slide here

1012
00:35:59,280 --> 00:36:01,520
additionally there's uh container

1013
00:36:01,520 --> 00:36:04,000
registry admin credentials that can be

1014
00:36:04,000 --> 00:36:05,440
exported for persistence it's not a

1015
00:36:05,440 --> 00:36:07,280
guarantee that those will be in the

1016
00:36:07,280 --> 00:36:09,359
subscription but we can see here in the

1017
00:36:09,359 --> 00:36:11,839
portal that these are enabled for the

1018
00:36:11,839 --> 00:36:14,160
netspy container registry which is now

1019
00:36:14,160 --> 00:36:16,880
since gone but for demo purposes we

1020
00:36:16,880 --> 00:36:18,640
created one here that we had an admin

1021
00:36:18,640 --> 00:36:20,560
user enabled for

1022
00:36:20,560 --> 00:36:21,920
additionally you know talked about the

1023
00:36:21,920 --> 00:36:25,280
container images and how those are

1024
00:36:25,280 --> 00:36:27,440
quite often storing credentials in the

1025
00:36:27,440 --> 00:36:28,880
images themselves

1026
00:36:28,880 --> 00:36:30,079
uh

1027
00:36:30,079 --> 00:36:31,760
from a attacker's standpoint we just

1028
00:36:31,760 --> 00:36:34,160
pull the images down run the images with

1029
00:36:34,160 --> 00:36:36,800
whatever their base shell is do a print

1030
00:36:36,800 --> 00:36:38,560
env see what their environmental

1031
00:36:38,560 --> 00:36:40,720
variables are see what local files are

1032
00:36:40,720 --> 00:36:42,320
available there we'll frequently find

1033
00:36:42,320 --> 00:36:44,640
application configuration files

1034
00:36:44,640 --> 00:36:47,280
uh web.config files anything like that

1035
00:36:47,280 --> 00:36:49,680
that frequently extort or store clear

1036
00:36:49,680 --> 00:36:51,680
text credentials so definitely something

1037
00:36:51,680 --> 00:36:54,079
to look out for if you're pen testing

1038
00:36:54,079 --> 00:36:56,480
azure container registries

1039
00:36:56,480 --> 00:36:59,280
from a get a z passwords perspective

1040
00:36:59,280 --> 00:37:01,040
we really just care about getting those

1041
00:37:01,040 --> 00:37:02,960
admin credentials that we showed at the

1042
00:37:02,960 --> 00:37:05,839
bottom of this slide right here so that

1043
00:37:05,839 --> 00:37:07,599
just gets a list of all of the container

1044
00:37:07,599 --> 00:37:09,599
registries and then pulls any available

1045
00:37:09,599 --> 00:37:11,680
admin credentials for the container

1046
00:37:11,680 --> 00:37:13,520
registry itself much like storage

1047
00:37:13,520 --> 00:37:16,240
accounts this is really really simple

1048
00:37:16,240 --> 00:37:17,760
potentially could be a one-liner if you

1049
00:37:17,760 --> 00:37:19,599
really wanted to cut the code down a

1050
00:37:19,599 --> 00:37:22,000
little bit but a very simple way to

1051
00:37:22,000 --> 00:37:24,400
potentially get credentials out of the

1052
00:37:24,400 --> 00:37:26,240
platform once you're at contributor

1053
00:37:26,240 --> 00:37:28,479
level

1054
00:37:29,040 --> 00:37:31,680
so uh as a

1055
00:37:31,680 --> 00:37:34,720
service that is supported by acr's azure

1056
00:37:34,720 --> 00:37:37,040
kubernetes service is

1057
00:37:37,040 --> 00:37:39,680
just kubernetes clusters in the cloud so

1058
00:37:39,680 --> 00:37:41,680
if you want to run kubernetes up in

1059
00:37:41,680 --> 00:37:43,920
azure azure kubernetes is probably your

1060
00:37:43,920 --> 00:37:45,760
best bet

1061
00:37:45,760 --> 00:37:47,359
there are multiple different ways that

1062
00:37:47,359 --> 00:37:48,640
you could potentially do that with

1063
00:37:48,640 --> 00:37:50,560
virtual machines and other things but we

1064
00:37:50,560 --> 00:37:52,240
don't need to get into that here what

1065
00:37:52,240 --> 00:37:54,000
i'm frequently seeing in azure

1066
00:37:54,000 --> 00:37:56,079
environments is the aks service being

1067
00:37:56,079 --> 00:37:58,320
used to run clusters

1068
00:37:58,320 --> 00:38:00,240
so the passwords themselves are

1069
00:38:00,240 --> 00:38:02,160
frequently found in

1070
00:38:02,160 --> 00:38:05,040
the cluster vms themselves we'll talk

1071
00:38:05,040 --> 00:38:06,880
about how service principal credentials

1072
00:38:06,880 --> 00:38:09,119
and managed identities are utilized

1073
00:38:09,119 --> 00:38:09,839
there

1074
00:38:09,839 --> 00:38:12,000
uh additionally there's admin

1075
00:38:12,000 --> 00:38:13,920
credentials that can be exported for

1076
00:38:13,920 --> 00:38:16,400
persistence for managing the cluster

1077
00:38:16,400 --> 00:38:19,119
itself so these are the cube config file

1078
00:38:19,119 --> 00:38:21,680
uh credentials that we can export to use

1079
00:38:21,680 --> 00:38:23,680
locally to

1080
00:38:23,680 --> 00:38:25,440
manage the kubernetes

1081
00:38:25,440 --> 00:38:27,520
cluster potentially remotely depending

1082
00:38:27,520 --> 00:38:29,520
on how things are configured

1083
00:38:29,520 --> 00:38:32,240
for the virtual machines themselves the

1084
00:38:32,240 --> 00:38:34,640
service principles or manage identity

1085
00:38:34,640 --> 00:38:36,800
tokens you have to choose one or the

1086
00:38:36,800 --> 00:38:39,440
other when you set up that aks cluster

1087
00:38:39,440 --> 00:38:41,680
and uh the service principal credentials

1088
00:38:41,680 --> 00:38:44,000
end up getting stored in clear text in

1089
00:38:44,000 --> 00:38:47,200
an azure.json file and manage identity

1090
00:38:47,200 --> 00:38:48,800
tokens we have to generate those every

1091
00:38:48,800 --> 00:38:50,560
time but we'll talk about how we do that

1092
00:38:50,560 --> 00:38:53,040
in a minute

1093
00:38:53,440 --> 00:38:55,839
so if we have portal access for

1094
00:38:55,839 --> 00:38:57,680
something and want to just quick

1095
00:38:57,680 --> 00:38:59,520
generate

1096
00:38:59,520 --> 00:39:02,240
the kube config files via cloud shell

1097
00:39:02,240 --> 00:39:05,440
you can just use the azcli uh within

1098
00:39:05,440 --> 00:39:09,200
cloud shell to add the aks cluster

1099
00:39:09,200 --> 00:39:12,480
credentials into your current system uh

1100
00:39:12,480 --> 00:39:13,920
one thing to look out for if you do get

1101
00:39:13,920 --> 00:39:16,240
access to cloud shell files like we

1102
00:39:16,240 --> 00:39:17,440
talked about earlier with storage

1103
00:39:17,440 --> 00:39:20,400
accounts is looking out for kube config

1104
00:39:20,400 --> 00:39:23,680
files in those img files those can get

1105
00:39:23,680 --> 00:39:26,640
stored there and they can last for a

1106
00:39:26,640 --> 00:39:28,560
while so you might be able to pull live

1107
00:39:28,560 --> 00:39:30,560
kubernetes credentials out of those

1108
00:39:30,560 --> 00:39:32,000
cloud shell files

1109
00:39:32,000 --> 00:39:33,440
super convenient from an attacker's

1110
00:39:33,440 --> 00:39:34,480
standpoint

1111
00:39:34,480 --> 00:39:37,359
but for more of a manual export here if

1112
00:39:37,359 --> 00:39:40,000
we add those kubernetes credentials here

1113
00:39:40,000 --> 00:39:41,839
and then just cat out the coop config

1114
00:39:41,839 --> 00:39:43,680
file here we can just copy that out of

1115
00:39:43,680 --> 00:39:47,440
cloud shell and grab that at that time

1116
00:39:47,440 --> 00:39:50,400
you can also use dash admin to specify

1117
00:39:50,400 --> 00:39:52,560
as a cluster admin versus a regular

1118
00:39:52,560 --> 00:39:54,240
cluster user

1119
00:39:54,240 --> 00:39:56,880
not a huge difference there are

1120
00:39:56,880 --> 00:39:58,400
minor differences there i'd recommend

1121
00:39:58,400 --> 00:40:00,240
using dash admin if you're going to go

1122
00:40:00,240 --> 00:40:01,920
this route but

1123
00:40:01,920 --> 00:40:03,680
besides point

1124
00:40:03,680 --> 00:40:06,640
we automate this with get ac passwords

1125
00:40:06,640 --> 00:40:09,599
by grabbing both the regular admin and

1126
00:40:09,599 --> 00:40:11,839
the regular user credentials as part of

1127
00:40:11,839 --> 00:40:13,920
this whole process but in general we get

1128
00:40:13,920 --> 00:40:15,680
a list of all of the clusters we

1129
00:40:15,680 --> 00:40:18,079
generate a token to use with the rest

1130
00:40:18,079 --> 00:40:21,680
apis this is the one spot where

1131
00:40:21,680 --> 00:40:24,079
excuse me where we typically differ a

1132
00:40:24,079 --> 00:40:25,040
little bit

1133
00:40:25,040 --> 00:40:28,240
from the standard powershell commandlets

1134
00:40:28,240 --> 00:40:29,440
here we're going to use some of the rest

1135
00:40:29,440 --> 00:40:31,680
apis which is just a little bit

1136
00:40:31,680 --> 00:40:34,319
different than kind of the standard

1137
00:40:34,319 --> 00:40:36,319
tools that we're going to use in get ac

1138
00:40:36,319 --> 00:40:37,520
passwords but

1139
00:40:37,520 --> 00:40:38,720
using that token we're going to pull

1140
00:40:38,720 --> 00:40:40,560
down the different cluster admin and

1141
00:40:40,560 --> 00:40:42,800
cluster user credentials in the kube

1142
00:40:42,800 --> 00:40:44,720
config format

1143
00:40:44,720 --> 00:40:47,440
if the cluster itself is set up with a

1144
00:40:47,440 --> 00:40:50,000
service principle we're going to

1145
00:40:50,000 --> 00:40:52,800
invoke the azvms s

1146
00:40:52,800 --> 00:40:55,280
vm run command oh it's a mouthful there

1147
00:40:55,280 --> 00:40:56,800
basically it's a virtual machine scale

1148
00:40:56,800 --> 00:40:59,040
set that's supporting that cluster and

1149
00:40:59,040 --> 00:41:01,520
that's able to expand and contract and

1150
00:41:01,520 --> 00:41:03,119
you know spin up different node pools

1151
00:41:03,119 --> 00:41:05,200
anything like that for aks

1152
00:41:05,200 --> 00:41:06,720
what we want to do with that virtual

1153
00:41:06,720 --> 00:41:08,520
machine scale set is cut out that

1154
00:41:08,520 --> 00:41:11,440
azure.json file that stores that service

1155
00:41:11,440 --> 00:41:13,520
principle credential alternatively if

1156
00:41:13,520 --> 00:41:15,359
it's managed identity instead of cutting

1157
00:41:15,359 --> 00:41:17,359
out that file we'll just make a request

1158
00:41:17,359 --> 00:41:19,119
out to the metadata service and pull

1159
00:41:19,119 --> 00:41:20,960
back that metadata token

1160
00:41:20,960 --> 00:41:23,119
and get access to any tokens that we

1161
00:41:23,119 --> 00:41:26,400
need there for the managed identity

1162
00:41:26,400 --> 00:41:28,560
so for the demo here i'm going to use a

1163
00:41:28,560 --> 00:41:30,640
video that i recorded from a sample

1164
00:41:30,640 --> 00:41:33,200
environment here but this is running get

1165
00:41:33,200 --> 00:41:35,599
a z passwords you can see here at the

1166
00:41:35,599 --> 00:41:37,040
top that i've imported the microburst

1167
00:41:37,040 --> 00:41:38,960
module we're going to run git az

1168
00:41:38,960 --> 00:41:41,760
passwords with modify policies as yes

1169
00:41:41,760 --> 00:41:44,400
and export certificates as yes meaning

1170
00:41:44,400 --> 00:41:45,760
we're going to

1171
00:41:45,760 --> 00:41:48,000
export any of the certificates that are

1172
00:41:48,000 --> 00:41:50,560
available in physical format into an

1173
00:41:50,560 --> 00:41:52,480
individual file so we can see we wrote

1174
00:41:52,480 --> 00:41:54,319
out democert.pfx

1175
00:41:54,319 --> 00:41:56,560
additionally for any access policies we

1176
00:41:56,560 --> 00:41:59,359
will modify those in line here to give

1177
00:41:59,359 --> 00:42:01,359
ourselves access to any of the key

1178
00:42:01,359 --> 00:42:04,000
vaults keys secrets certificates

1179
00:42:04,000 --> 00:42:06,800
anything like that as we need them

1180
00:42:06,800 --> 00:42:08,160
so i do have this

1181
00:42:08,160 --> 00:42:10,000
pretty sped up here we have a 10x speed

1182
00:42:10,000 --> 00:42:12,160
here but i'd say in general for an

1183
00:42:12,160 --> 00:42:14,480
average subscription usually just takes

1184
00:42:14,480 --> 00:42:16,400
a handful and say maybe five minutes at

1185
00:42:16,400 --> 00:42:18,720
the most to export all of those

1186
00:42:18,720 --> 00:42:19,760
credentials

1187
00:42:19,760 --> 00:42:21,920
so we can see here there was a pfx file

1188
00:42:21,920 --> 00:42:24,560
that was created and an authenticate as

1189
00:42:24,560 --> 00:42:27,119
ps1 file here which we can potentially

1190
00:42:27,119 --> 00:42:30,160
use to authenticate as a run as account

1191
00:42:30,160 --> 00:42:31,680
and we can see all of these credentials

1192
00:42:31,680 --> 00:42:34,240
that we outputted to out grid view

1193
00:42:34,240 --> 00:42:36,079
this is a handy way to export all of

1194
00:42:36,079 --> 00:42:38,000
these credentials i'd also recommend

1195
00:42:38,000 --> 00:42:40,880
just using export csv instead to have

1196
00:42:40,880 --> 00:42:43,200
everything out to a csv you could just

1197
00:42:43,200 --> 00:42:45,440
copy everything out of here instead

1198
00:42:45,440 --> 00:42:46,720
that's a little bit different but we can

1199
00:42:46,720 --> 00:42:49,359
see in the output here things like aks

1200
00:42:49,359 --> 00:42:50,800
service principle here we can see the

1201
00:42:50,800 --> 00:42:52,880
client secret that was attached to

1202
00:42:52,880 --> 00:42:55,760
that service principle along with access

1203
00:42:55,760 --> 00:42:58,079
keys cosmos db which didn't even talk

1204
00:42:58,079 --> 00:42:59,040
about

1205
00:42:59,040 --> 00:43:01,119
storage accounts all sorts of different

1206
00:43:01,119 --> 00:43:04,240
stuff that gets output there

1207
00:43:04,240 --> 00:43:06,000
so real quick here we'll just talk about

1208
00:43:06,000 --> 00:43:07,920
a privilege escalation that we were able

1209
00:43:07,920 --> 00:43:10,720
to identify in azure utilizing to get az

1210
00:43:10,720 --> 00:43:12,480
passwords

1211
00:43:12,480 --> 00:43:14,319
function here but basically what we were

1212
00:43:14,319 --> 00:43:17,040
able to do was use git az passwords to

1213
00:43:17,040 --> 00:43:19,280
get the run as

1214
00:43:19,280 --> 00:43:21,920
account for an automation account

1215
00:43:21,920 --> 00:43:24,400
via the log analytics contributor role

1216
00:43:24,400 --> 00:43:26,240
previously the log analytics contributor

1217
00:43:26,240 --> 00:43:28,800
role allowed star permissions on all

1218
00:43:28,800 --> 00:43:31,599
automation accounts which allowed us to

1219
00:43:31,599 --> 00:43:32,480
then

1220
00:43:32,480 --> 00:43:34,800
export any automation account run as

1221
00:43:34,800 --> 00:43:36,079
certificates

1222
00:43:36,079 --> 00:43:38,319
and go through that process of getting

1223
00:43:38,319 --> 00:43:41,040
the run as account which is a full

1224
00:43:41,040 --> 00:43:42,319
contributor

1225
00:43:42,319 --> 00:43:44,480
on the subscription by default and

1226
00:43:44,480 --> 00:43:47,440
having that run as account we're then

1227
00:43:47,440 --> 00:43:49,359
able to escalate our privileges it's a

1228
00:43:49,359 --> 00:43:51,520
mild privilege escalation

1229
00:43:51,520 --> 00:43:53,359
log analytics contributor did have a

1230
00:43:53,359 --> 00:43:54,560
fair number of

1231
00:43:54,560 --> 00:43:57,440
you know rights in that role itself and

1232
00:43:57,440 --> 00:43:59,440
escalating up to contributor was just a

1233
00:43:59,440 --> 00:44:01,920
small jump up to full contributor but it

1234
00:44:01,920 --> 00:44:03,760
was technically a privilege escalation

1235
00:44:03,760 --> 00:44:05,760
microsoft recently addressed this in

1236
00:44:05,760 --> 00:44:07,280
august they actually removed the

1237
00:44:07,280 --> 00:44:09,520
automation account star permissions they

1238
00:44:09,520 --> 00:44:11,760
temporarily had a disclaimer here saying

1239
00:44:11,760 --> 00:44:13,599
that it did allow for the privilege

1240
00:44:13,599 --> 00:44:15,599
escalation here but they recently

1241
00:44:15,599 --> 00:44:18,000
cleaned that up

1242
00:44:18,000 --> 00:44:20,160
so a quick thanks here uh for our

1243
00:44:20,160 --> 00:44:22,560
microburst contributors here jake josh

1244
00:44:22,560 --> 00:44:24,800
thomas uh they've all helped contribute

1245
00:44:24,800 --> 00:44:28,160
to microburst and add things to uh

1246
00:44:28,160 --> 00:44:29,920
the platform here

1247
00:44:29,920 --> 00:44:30,880
uh

1248
00:44:30,880 --> 00:44:33,599
the slide uh design assistance here from

1249
00:44:33,599 --> 00:44:35,920
sofia netspy she was responsible for the

1250
00:44:35,920 --> 00:44:38,319
microburst with the uh knife there for

1251
00:44:38,319 --> 00:44:41,119
attacking the cloud and mentioned mcomi

1252
00:44:41,119 --> 00:44:43,520
here already for the kind of basic auth

1253
00:44:43,520 --> 00:44:46,400
login hack so thanks for that

1254
00:44:46,400 --> 00:44:48,160
and our last slide here just a couple of

1255
00:44:48,160 --> 00:44:50,720
different links to include here

1256
00:44:50,720 --> 00:44:53,440
for netspy github the blog and some of

1257
00:44:53,440 --> 00:44:55,440
the specific blogs that we talked about

1258
00:44:55,440 --> 00:44:56,400
today

1259
00:44:56,400 --> 00:44:59,920
so you can find me on twitter at kfossen

1260
00:44:59,920 --> 00:45:01,839
and feel free to reach out with any

1261
00:45:01,839 --> 00:45:03,680
questions

1262
00:45:03,680 --> 00:45:05,119
let me know if there was anything i can

1263
00:45:05,119 --> 00:45:09,960
help clarify here otherwise thanks

