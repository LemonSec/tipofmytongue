1
00:00:02,159 --> 00:00:04,240
hi everyone and welcome along to this

2
00:00:04,240 --> 00:00:06,799
eco party talk an introduction to

3
00:00:06,799 --> 00:00:08,480
container hacking

4
00:00:08,480 --> 00:00:11,519
so containers have become an ever larger

5
00:00:11,519 --> 00:00:15,280
part of the i.t systems that we use

6
00:00:15,280 --> 00:00:16,880
and they've been growing in prominence

7
00:00:16,880 --> 00:00:19,039
and popularity for about the last five

8
00:00:19,039 --> 00:00:20,480
years now

9
00:00:20,480 --> 00:00:22,480
one of the things that as a security set

10
00:00:22,480 --> 00:00:24,560
of professionals we need to consider

11
00:00:24,560 --> 00:00:27,199
with any new technology is how do they

12
00:00:27,199 --> 00:00:29,199
work because when you're thinking about

13
00:00:29,199 --> 00:00:31,279
how to secure something the best way to

14
00:00:31,279 --> 00:00:33,440
do it is first understand how it works

15
00:00:33,440 --> 00:00:35,520
and then how do they get compromised

16
00:00:35,520 --> 00:00:36,880
what are the kind of things that

17
00:00:36,880 --> 00:00:38,399
attackers are doing

18
00:00:38,399 --> 00:00:40,320
and what kind of vulnerabilities and

19
00:00:40,320 --> 00:00:42,320
weaknesses that might be specific to

20
00:00:42,320 --> 00:00:44,960
that technology um that might you know

21
00:00:44,960 --> 00:00:47,360
lead to things being compromised

22
00:00:47,360 --> 00:00:48,960
and the goal of this talk is really to

23
00:00:48,960 --> 00:00:50,879
talk a bit about what containers really

24
00:00:50,879 --> 00:00:53,360
are to try and get below the buzzwords

25
00:00:53,360 --> 00:00:54,960
that are there are a lot of birds words

26
00:00:54,960 --> 00:00:56,399
around containers to try and get below

27
00:00:56,399 --> 00:00:57,680
that and talk about what these things

28
00:00:57,680 --> 00:00:58,800
actually are

29
00:00:58,800 --> 00:01:01,039
how they work and some of the main

30
00:01:01,039 --> 00:01:02,719
security considerations that we might

31
00:01:02,719 --> 00:01:05,119
have also look a little bit about how

32
00:01:05,119 --> 00:01:06,320
people attack them and we'll talk about

33
00:01:06,320 --> 00:01:07,760
some of the common attacks around

34
00:01:07,760 --> 00:01:10,720
containers as well

35
00:01:11,119 --> 00:01:13,680
so just before we get started just a

36
00:01:13,680 --> 00:01:15,840
quick bit about me uh so my background

37
00:01:15,840 --> 00:01:18,479
is as an information and i.t security

38
00:01:18,479 --> 00:01:20,560
person i've been doing that for around

39
00:01:20,560 --> 00:01:23,600
20 years now um uh my previous to the

40
00:01:23,600 --> 00:01:25,840
role i'm in currently i was a pen tester

41
00:01:25,840 --> 00:01:27,759
where i spent a lot of time focusing on

42
00:01:27,759 --> 00:01:30,400
cloud native and container systems

43
00:01:30,400 --> 00:01:32,479
these days i'm a cloud native security

44
00:01:32,479 --> 00:01:34,960
advocate for aqua which basically means

45
00:01:34,960 --> 00:01:37,759
that my job is to try and educate and

46
00:01:37,759 --> 00:01:39,840
inform around cloud native and

47
00:01:39,840 --> 00:01:42,320
kubernetes and docker that kind of thing

48
00:01:42,320 --> 00:01:44,000
one of the things i do

49
00:01:44,000 --> 00:01:46,320
in that arena is i'm the or one of the

50
00:01:46,320 --> 00:01:49,520
authors of the cis benchmarks for docker

51
00:01:49,520 --> 00:01:51,200
and kubernetes and those are good

52
00:01:51,200 --> 00:01:52,960
resources to look at if you're looking

53
00:01:52,960 --> 00:01:55,439
at how to harden those two platforms

54
00:01:55,439 --> 00:01:57,439
i'm also a member of a thing called sig

55
00:01:57,439 --> 00:02:00,479
hunk uh sitcom is the only kubernetes

56
00:02:00,479 --> 00:02:02,560
special interest group or sig

57
00:02:02,560 --> 00:02:04,000
which is an unofficial one which is

58
00:02:04,000 --> 00:02:06,320
presented at keynote at cubecon and

59
00:02:06,320 --> 00:02:08,080
essentially we focus on hacking and if

60
00:02:08,080 --> 00:02:09,280
you've seen any of our talks we kind of

61
00:02:09,280 --> 00:02:10,639
do stuff around

62
00:02:10,639 --> 00:02:13,040
general security and hacking stuff

63
00:02:13,040 --> 00:02:15,120
as you might have guessed uh from my

64
00:02:15,120 --> 00:02:18,080
accent uh i'm not from the americas at

65
00:02:18,080 --> 00:02:21,040
all uh i'm actually based in scotland uh

66
00:02:21,040 --> 00:02:22,800
and this is where it looks like where i

67
00:02:22,800 --> 00:02:25,840
am this is uh lock oil head in uh in the

68
00:02:25,840 --> 00:02:28,160
west scottish highlands uh and as you

69
00:02:28,160 --> 00:02:30,319
can see it looks very nice when it's not

70
00:02:30,319 --> 00:02:32,720
raining uh if ever if any of you ever

71
00:02:32,720 --> 00:02:34,239
get the chance to come to the west

72
00:02:34,239 --> 00:02:36,319
scottish highlands unfortunately it

73
00:02:36,319 --> 00:02:38,080
usually doesn't look like this it does

74
00:02:38,080 --> 00:02:40,319
i'm afraid usually rain however very

75
00:02:40,319 --> 00:02:41,760
nice but it's not

76
00:02:41,760 --> 00:02:44,400
anyway let's get on with the talk

77
00:02:44,400 --> 00:02:46,959
so the first thing to realize with linux

78
00:02:46,959 --> 00:02:48,879
containers or with containerization is

79
00:02:48,879 --> 00:02:51,360
this is not a new concept it's new in

80
00:02:51,360 --> 00:02:53,920
terms of its popularity relatively but

81
00:02:53,920 --> 00:02:56,000
it's not new as an idea

82
00:02:56,000 --> 00:02:59,040
we started out in about 1979 um with the

83
00:02:59,040 --> 00:03:01,360
chiru system call getting added to unix

84
00:03:01,360 --> 00:03:02,400
and that was the first thing that

85
00:03:02,400 --> 00:03:04,720
provided a kind of isolated application

86
00:03:04,720 --> 00:03:06,959
environment like containers

87
00:03:06,959 --> 00:03:10,000
then around 2000 um we had a freebsd

88
00:03:10,000 --> 00:03:12,879
jails linux v server and solar zones

89
00:03:12,879 --> 00:03:15,519
these all used containerization style

90
00:03:15,519 --> 00:03:18,159
ideas but once they gained some level of

91
00:03:18,159 --> 00:03:20,560
popularity they weren't super popular

92
00:03:20,560 --> 00:03:23,360
and they made lxc 2008 and it was then

93
00:03:23,360 --> 00:03:25,599
that docker came along in 2013 and

94
00:03:25,599 --> 00:03:27,519
suddenly from there things started to

95
00:03:27,519 --> 00:03:29,360
really kind of explode in terms of the

96
00:03:29,360 --> 00:03:32,000
popularity

97
00:03:32,000 --> 00:03:33,360
we can see now they've become pretty

98
00:03:33,360 --> 00:03:34,560
popular

99
00:03:34,560 --> 00:03:38,159
this graph here is from the 2021 stack

100
00:03:38,159 --> 00:03:39,760
overflow survey

101
00:03:39,760 --> 00:03:41,360
which looked which asked professional

102
00:03:41,360 --> 00:03:44,400
developers what tools do you make use of

103
00:03:44,400 --> 00:03:46,560
in addition to asking about things like

104
00:03:46,560 --> 00:03:48,080
programming languages and frameworks

105
00:03:48,080 --> 00:03:49,760
they made use of they also ask what

106
00:03:49,760 --> 00:03:52,159
other tools you use now git obviously

107
00:03:52,159 --> 00:03:54,400
came first because everybody uses git

108
00:03:54,400 --> 00:03:56,959
but number two right behind it is docker

109
00:03:56,959 --> 00:03:59,439
which for such a young project is pretty

110
00:03:59,439 --> 00:04:01,760
pretty impressive to got to that level

111
00:04:01,760 --> 00:04:03,439
um and you can see kubernetes on there

112
00:04:03,439 --> 00:04:04,959
as well we're going to talk a bit about

113
00:04:04,959 --> 00:04:06,640
docker a bit about kubernetes today

114
00:04:06,640 --> 00:04:09,200
kubernetes is also um pretty popular now

115
00:04:09,200 --> 00:04:10,720
and and you know if you go and look at

116
00:04:10,720 --> 00:04:12,000
how containers are used in the real

117
00:04:12,000 --> 00:04:13,920
world you'll find a lot of kubernetes so

118
00:04:13,920 --> 00:04:16,959
it's definitely worth looking at

119
00:04:17,040 --> 00:04:19,040
we do have one problem though with all

120
00:04:19,040 --> 00:04:21,120
of this new um technology with all this

121
00:04:21,120 --> 00:04:22,880
new containerization stuff that's coming

122
00:04:22,880 --> 00:04:24,000
along

123
00:04:24,000 --> 00:04:25,759
and that problem is there's a lot of

124
00:04:25,759 --> 00:04:28,320
terminology and it can be hard to think

125
00:04:28,320 --> 00:04:30,400
about how you secure something you know

126
00:04:30,400 --> 00:04:32,639
what what techniques do i apply what

127
00:04:32,639 --> 00:04:34,400
things that i already know about do i

128
00:04:34,400 --> 00:04:35,280
use

129
00:04:35,280 --> 00:04:36,960
as part of this because it can be

130
00:04:36,960 --> 00:04:39,440
obscured by the buzzwords in all these

131
00:04:39,440 --> 00:04:41,360
different terms this is just a small

132
00:04:41,360 --> 00:04:43,440
subset of the available terms you would

133
00:04:43,440 --> 00:04:45,440
use in containerization can make things

134
00:04:45,440 --> 00:04:47,120
a bit hard to understand

135
00:04:47,120 --> 00:04:48,960
so what i wanted to do next was just

136
00:04:48,960 --> 00:04:50,800
break down a little bit about what

137
00:04:50,800 --> 00:04:53,759
containers actually are because when you

138
00:04:53,759 --> 00:04:56,080
understand how containers are actually

139
00:04:56,080 --> 00:04:58,160
built you might realize that a lot of

140
00:04:58,160 --> 00:04:59,759
what you already know about for example

141
00:04:59,759 --> 00:05:02,240
linux applies pretty well to containers

142
00:05:02,240 --> 00:05:04,080
and you already know a lot of what you

143
00:05:04,080 --> 00:05:06,960
need to know about containerization

144
00:05:06,960 --> 00:05:09,280
so what is a linux container that's

145
00:05:09,280 --> 00:05:11,120
obviously the best place to start is

146
00:05:11,120 --> 00:05:12,639
what is a container

147
00:05:12,639 --> 00:05:14,720
and the first thing to recognize is it's

148
00:05:14,720 --> 00:05:18,000
not a virtual machine usually there are

149
00:05:18,000 --> 00:05:19,919
lots of different ways of deploying

150
00:05:19,919 --> 00:05:21,919
containers now some of them do use

151
00:05:21,919 --> 00:05:24,320
virtual machines but the default docker

152
00:05:24,320 --> 00:05:27,600
style container is not a virtual machine

153
00:05:27,600 --> 00:05:30,400
essentially it's a linux process so from

154
00:05:30,400 --> 00:05:32,400
a linux host's perspective it's just a

155
00:05:32,400 --> 00:05:34,880
process just like any other process

156
00:05:34,880 --> 00:05:36,479
the linux host has got no idea what

157
00:05:36,479 --> 00:05:37,840
containers are it doesn't know what

158
00:05:37,840 --> 00:05:39,520
docker is it just knows it's got some

159
00:05:39,520 --> 00:05:40,960
processes running

160
00:05:40,960 --> 00:05:43,280
what docker does is it applies a set of

161
00:05:43,280 --> 00:05:45,919
existing linux features to create this

162
00:05:45,919 --> 00:05:48,080
isolation that allows you to have these

163
00:05:48,080 --> 00:05:49,759
containers that essentially can't see

164
00:05:49,759 --> 00:05:51,280
each other or interact with each other

165
00:05:51,280 --> 00:05:52,400
usually

166
00:05:52,400 --> 00:05:55,199
it uses namespaces capabilities c groups

167
00:05:55,199 --> 00:05:58,080
app armor and second now you can use all

168
00:05:58,080 --> 00:06:00,319
of these features just using linux you

169
00:06:00,319 --> 00:06:02,720
don't have to use containers to actually

170
00:06:02,720 --> 00:06:05,039
do this what docker does however is

171
00:06:05,039 --> 00:06:06,960
makes it easy you know you can run a

172
00:06:06,960 --> 00:06:08,560
container which uses all of these things

173
00:06:08,560 --> 00:06:10,000
and you don't have to know really

174
00:06:10,000 --> 00:06:12,080
anything about them at a basic level to

175
00:06:12,080 --> 00:06:13,919
get your containers working which is one

176
00:06:13,919 --> 00:06:15,440
of the reasons why docker is so popular

177
00:06:15,440 --> 00:06:16,560
is because it does hide all of this

178
00:06:16,560 --> 00:06:19,360
complexity from you and keep it away but

179
00:06:19,360 --> 00:06:21,520
when we're talking about security and

180
00:06:21,520 --> 00:06:23,440
how we secure things we need to

181
00:06:23,440 --> 00:06:25,199
understand what's going on right because

182
00:06:25,199 --> 00:06:27,199
we need to understand what can go wrong

183
00:06:27,199 --> 00:06:28,080
so

184
00:06:28,080 --> 00:06:29,520
with docker it ends up looking a bit

185
00:06:29,520 --> 00:06:30,639
like this

186
00:06:30,639 --> 00:06:32,400
you have the process you have your

187
00:06:32,400 --> 00:06:34,800
application code in the middle uh and

188
00:06:34,800 --> 00:06:35,840
then what you do is you have your

189
00:06:35,840 --> 00:06:37,120
namespaces

190
00:06:37,120 --> 00:06:38,560
which provide this isolated view of

191
00:06:38,560 --> 00:06:41,199
resources you have your capabilities and

192
00:06:41,199 --> 00:06:43,360
these remove certain rights that a

193
00:06:43,360 --> 00:06:44,800
container running is root because a lot

194
00:06:44,800 --> 00:06:46,560
of containers runners root would have so

195
00:06:46,560 --> 00:06:48,560
these make it less dangerous to run as

196
00:06:48,560 --> 00:06:50,560
root still not a good idea but it's less

197
00:06:50,560 --> 00:06:51,680
dangerous

198
00:06:51,680 --> 00:06:53,759
we have c groups and c groups

199
00:06:53,759 --> 00:06:55,759
essentially restrict the resources on

200
00:06:55,759 --> 00:06:57,440
the machine because you don't want one

201
00:06:57,440 --> 00:06:59,440
container to use all of the cpu or all

202
00:06:59,440 --> 00:07:01,520
of the ram on a host so you need c

203
00:07:01,520 --> 00:07:03,599
groups to restrict that we then have a

204
00:07:03,599 --> 00:07:05,360
couple of layers which is apparently

205
00:07:05,360 --> 00:07:07,759
linux and secomp that essentially add

206
00:07:07,759 --> 00:07:10,000
more security restrictions on top of the

207
00:07:10,000 --> 00:07:11,680
ones we've already got

208
00:07:11,680 --> 00:07:12,960
none of these are really designed to

209
00:07:12,960 --> 00:07:14,880
work together as like a sandbox but

210
00:07:14,880 --> 00:07:16,560
that's essentially what docker's doing

211
00:07:16,560 --> 00:07:18,319
it's creating all these layer or reusing

212
00:07:18,319 --> 00:07:20,160
all these layers and building this kind

213
00:07:20,160 --> 00:07:21,520
of sandbox

214
00:07:21,520 --> 00:07:23,840
but ultimately when it comes down to it

215
00:07:23,840 --> 00:07:25,360
a linux container

216
00:07:25,360 --> 00:07:26,800
just a process

217
00:07:26,800 --> 00:07:28,000
so

218
00:07:28,000 --> 00:07:29,280
let's demo that and just demonstrate

219
00:07:29,280 --> 00:07:31,759
what i mean

220
00:07:31,759 --> 00:07:34,000
a little set of water

221
00:07:34,000 --> 00:07:35,759
and let's get the demo up we get the

222
00:07:35,759 --> 00:07:38,160
right terminal okay so here i have a

223
00:07:38,160 --> 00:07:39,840
machine which is running docker right

224
00:07:39,840 --> 00:07:41,039
other than that it's just a standard

225
00:07:41,039 --> 00:07:42,479
linux host

226
00:07:42,479 --> 00:07:46,319
um if i do psef and great for engine x

227
00:07:46,319 --> 00:07:47,680
i'm just looking for any engine x

228
00:07:47,680 --> 00:07:48,960
processors currently running on this

229
00:07:48,960 --> 00:07:50,160
machine

230
00:07:50,160 --> 00:07:52,319
i get told there aren't any right we

231
00:07:52,319 --> 00:07:54,319
just have a blank set just the grip

232
00:07:54,319 --> 00:07:55,599
command returned

233
00:07:55,599 --> 00:07:59,360
if i now do a docker run honesty

234
00:07:59,360 --> 00:08:00,479
and we're going to give it a name we're

235
00:08:00,479 --> 00:08:03,599
going to call this container web server

236
00:08:03,599 --> 00:08:05,680
uh engine x

237
00:08:05,680 --> 00:08:07,599
that'll run an instance of the nginx

238
00:08:07,599 --> 00:08:10,400
container image in the background on our

239
00:08:10,400 --> 00:08:13,199
machine and get a called engine x

240
00:08:13,199 --> 00:08:15,919
looking at that we can say uh docker ps

241
00:08:15,919 --> 00:08:17,680
which says yep we have now started our

242
00:08:17,680 --> 00:08:20,400
container but at a host level what does

243
00:08:20,400 --> 00:08:22,160
it see it doesn't say it doesn't do

244
00:08:22,160 --> 00:08:25,039
anything about docker so if we do yes

245
00:08:25,039 --> 00:08:29,039
yeah and then correct minus i engine x

246
00:08:29,039 --> 00:08:30,800
what you get back is a set of nginx

247
00:08:30,800 --> 00:08:32,958
processes because here the hosts level

248
00:08:32,958 --> 00:08:34,240
all it knows is you've started an

249
00:08:34,240 --> 00:08:36,240
instance of engine x and those three

250
00:08:36,240 --> 00:08:37,839
processes are what it would usually do

251
00:08:37,839 --> 00:08:39,599
when you launched nginx

252
00:08:39,599 --> 00:08:41,679
so as far as the host is concerned this

253
00:08:41,679 --> 00:08:44,000
docker container is just a process right

254
00:08:44,000 --> 00:08:45,040
i mean kind of demonstrate because

255
00:08:45,040 --> 00:08:46,000
that's got kind of a couple of

256
00:08:46,000 --> 00:08:47,680
interesting um

257
00:08:47,680 --> 00:08:50,480
consequences of this so if i do let me

258
00:08:50,480 --> 00:08:53,519
say for example this i do docker exec

259
00:08:53,519 --> 00:08:54,959
into our container

260
00:08:54,959 --> 00:08:56,959
and i touch so touch just creating a new

261
00:08:56,959 --> 00:08:58,000
file we're going to create a file called

262
00:08:58,000 --> 00:09:00,000
my new file

263
00:09:00,000 --> 00:09:01,680
so i just created a file inside the

264
00:09:01,680 --> 00:09:04,000
docker container called my new file

265
00:09:04,000 --> 00:09:06,320
i can actually get to that file

266
00:09:06,320 --> 00:09:07,120
just

267
00:09:07,120 --> 00:09:09,440
using uh existing linux tools i don't

268
00:09:09,440 --> 00:09:11,360
have to use docker what i need to do for

269
00:09:11,360 --> 00:09:13,839
that is i can just do ls i'll sudo ls

270
00:09:13,839 --> 00:09:17,200
actually let's do ls slash proc

271
00:09:17,200 --> 00:09:19,760
and then the pid of our

272
00:09:19,760 --> 00:09:21,839
um

273
00:09:21,839 --> 00:09:24,640
process which is two seven four

274
00:09:24,640 --> 00:09:26,320
two one three

275
00:09:26,320 --> 00:09:28,240
slash root

276
00:09:28,240 --> 00:09:30,560
and what you can see here is this is the

277
00:09:30,560 --> 00:09:33,279
containers view of its root file system

278
00:09:33,279 --> 00:09:36,080
and you can see my new file here so what

279
00:09:36,080 --> 00:09:37,600
i did there was i essentially go into

280
00:09:37,600 --> 00:09:39,360
the proc file system you've not come

281
00:09:39,360 --> 00:09:41,040
across that is a virtual file system

282
00:09:41,040 --> 00:09:43,200
that linux uses and essentially allows

283
00:09:43,200 --> 00:09:44,959
you to see information about each

284
00:09:44,959 --> 00:09:46,720
running process now because the

285
00:09:46,720 --> 00:09:48,800
container is just a process i could look

286
00:09:48,800 --> 00:09:51,360
inside its information and i can look at

287
00:09:51,360 --> 00:09:53,839
its root file system so that's what i

288
00:09:53,839 --> 00:09:55,760
say containers are just processes that's

289
00:09:55,760 --> 00:09:57,680
why i say that because

290
00:09:57,680 --> 00:09:59,440
that's what we've got now if you think

291
00:09:59,440 --> 00:10:01,120
about that from security standpoint it

292
00:10:01,120 --> 00:10:02,480
means that when you're trying to

293
00:10:02,480 --> 00:10:04,320
interact with containers or monitor

294
00:10:04,320 --> 00:10:06,000
containers you're really just monitoring

295
00:10:06,000 --> 00:10:09,519
linux processes that's all they are

296
00:10:09,519 --> 00:10:10,560
so

297
00:10:10,560 --> 00:10:11,600
anyway

298
00:10:11,600 --> 00:10:13,120
so that's that

299
00:10:13,120 --> 00:10:13,920
but

300
00:10:13,920 --> 00:10:15,839
what did i do there well i used a

301
00:10:15,839 --> 00:10:17,920
container image that was the other key

302
00:10:17,920 --> 00:10:19,920
element of the thing i just did because

303
00:10:19,920 --> 00:10:21,920
i created this running container i

304
00:10:21,920 --> 00:10:24,320
created it from a container image in

305
00:10:24,320 --> 00:10:26,320
this case the image engine x which came

306
00:10:26,320 --> 00:10:28,480
from docker hub if you don't tell docker

307
00:10:28,480 --> 00:10:29,920
where to get its image from it will

308
00:10:29,920 --> 00:10:32,640
always assume you mean docker hub now

309
00:10:32,640 --> 00:10:34,320
there are actually the screenshots

310
00:10:34,320 --> 00:10:35,839
slightly old because there are now over

311
00:10:35,839 --> 00:10:38,640
8 million different images on docker hub

312
00:10:38,640 --> 00:10:40,000
what are they though

313
00:10:40,000 --> 00:10:41,519
and the answer is really they're just

314
00:10:41,519 --> 00:10:43,600
tar balls so they're another existing

315
00:10:43,600 --> 00:10:45,519
linux thing that we already know about

316
00:10:45,519 --> 00:10:46,959
and they're tarbles with some json

317
00:10:46,959 --> 00:10:50,480
metadata and we can demonstrate this

318
00:10:50,480 --> 00:10:52,480
so let's just clear the screen here

319
00:10:52,480 --> 00:10:54,480
let's create a directory called nginx so

320
00:10:54,480 --> 00:10:56,320
that i don't make a mess of my root file

321
00:10:56,320 --> 00:10:57,360
system

322
00:10:57,360 --> 00:11:00,720
and let's go into that now

323
00:11:00,720 --> 00:11:01,839
so

324
00:11:01,839 --> 00:11:03,440
i can get a docker image and i can

325
00:11:03,440 --> 00:11:05,920
essentially save it off as a tar file

326
00:11:05,920 --> 00:11:08,160
what we can do is we can do docker save

327
00:11:08,160 --> 00:11:10,640
and your nx latest

328
00:11:10,640 --> 00:11:12,000
uh and we're going to give it call it

329
00:11:12,000 --> 00:11:15,200
engine x say doctor

330
00:11:15,200 --> 00:11:16,720
and that's just saving off a copy of the

331
00:11:16,720 --> 00:11:18,959
image we can then just extract that tar

332
00:11:18,959 --> 00:11:20,720
file just like any other tar file it's

333
00:11:20,720 --> 00:11:25,120
not zip top so just end x eff

334
00:11:25,760 --> 00:11:27,360
and then we'll do one

335
00:11:27,360 --> 00:11:29,360
top level so it goes into its own

336
00:11:29,360 --> 00:11:30,800
directory

337
00:11:30,800 --> 00:11:32,480
and there you can see that is what the

338
00:11:32,480 --> 00:11:35,440
nginx image is it's literally just

339
00:11:35,440 --> 00:11:38,000
a series of tar files so each layer in

340
00:11:38,000 --> 00:11:40,000
the dockerfile is a tar file and then a

341
00:11:40,000 --> 00:11:42,240
json metadata that says how was this

342
00:11:42,240 --> 00:11:43,920
created so you're thinking about

343
00:11:43,920 --> 00:11:46,560
securing or attacking container images

344
00:11:46,560 --> 00:11:48,079
they're just tar files

345
00:11:48,079 --> 00:11:49,839
these directories are essentially

346
00:11:49,839 --> 00:11:51,760
sha.256 hashes and that's designed so

347
00:11:51,760 --> 00:11:53,279
you don't get clashes

348
00:11:53,279 --> 00:11:54,639
but that's essentially what that's all

349
00:11:54,639 --> 00:11:57,440
that's all container images

350
00:11:57,440 --> 00:11:59,360
and we can actually um we can actually

351
00:11:59,360 --> 00:12:01,279
export running containers as well and

352
00:12:01,279 --> 00:12:03,040
they can be exported just as tar files

353
00:12:03,040 --> 00:12:04,560
just in the same way

354
00:12:04,560 --> 00:12:07,200
um so if i do uh docker export slightly

355
00:12:07,200 --> 00:12:08,399
different command

356
00:12:08,399 --> 00:12:10,880
and we'll call it and we'll export the

357
00:12:10,880 --> 00:12:12,639
web server that we just created

358
00:12:12,639 --> 00:12:15,200
and we'll give it we'll call it nginx

359
00:12:15,200 --> 00:12:16,800
export

360
00:12:16,800 --> 00:12:18,880
i'm just exporting the running container

361
00:12:18,880 --> 00:12:20,240
which is the web server i created

362
00:12:20,240 --> 00:12:22,800
earlier on

363
00:12:23,040 --> 00:12:24,560
and we can do the same thing we can

364
00:12:24,560 --> 00:12:27,359
until that too

365
00:12:34,399 --> 00:12:36,839
and if i go into the directory for

366
00:12:36,839 --> 00:12:39,519
that we can see again that's the file

367
00:12:39,519 --> 00:12:41,360
system that we had for our container so

368
00:12:41,360 --> 00:12:43,200
literally you can just turn any docker

369
00:12:43,200 --> 00:12:44,880
container or docker image back into its

370
00:12:44,880 --> 00:12:47,200
kind of terrible format and then extract

371
00:12:47,200 --> 00:12:48,959
or move it around you know moving place

372
00:12:48,959 --> 00:12:51,120
to place but really all limits

373
00:12:51,120 --> 00:12:53,279
container images are is tarballs and you

374
00:12:53,279 --> 00:12:55,440
can actually see there there is my new

375
00:12:55,440 --> 00:12:57,519
file which is the file that we created

376
00:12:57,519 --> 00:13:00,000
created in the previous exercise showing

377
00:13:00,000 --> 00:13:02,079
how that worked

378
00:13:02,079 --> 00:13:03,120
so

379
00:13:03,120 --> 00:13:06,160
as a container containers just processes

380
00:13:06,160 --> 00:13:07,920
the image is just tarballs

381
00:13:07,920 --> 00:13:09,839
what is docker then what's docker doing

382
00:13:09,839 --> 00:13:11,600
here what's docker adding to the mix how

383
00:13:11,600 --> 00:13:12,880
does it work

384
00:13:12,880 --> 00:13:14,079
because this is what we're trying to do

385
00:13:14,079 --> 00:13:15,279
here we're trying to understand how this

386
00:13:15,279 --> 00:13:16,639
works because it essentially will help

387
00:13:16,639 --> 00:13:19,440
us work out how to hack or secure things

388
00:13:19,440 --> 00:13:21,680
so the way it works is that the docker

389
00:13:21,680 --> 00:13:22,880
client

390
00:13:22,880 --> 00:13:24,560
is just a

391
00:13:24,560 --> 00:13:26,240
golan binary right

392
00:13:26,240 --> 00:13:28,480
and then it talks to the docker engine

393
00:13:28,480 --> 00:13:30,160
and the docker engine is just a rest

394
00:13:30,160 --> 00:13:32,880
http web service that's all it is

395
00:13:32,880 --> 00:13:34,959
um so essentially this client will issue

396
00:13:34,959 --> 00:13:38,000
http commands to this engine it doesn't

397
00:13:38,000 --> 00:13:39,920
usually listen on the network um but it

398
00:13:39,920 --> 00:13:41,920
can it usually stands on a unix socket

399
00:13:41,920 --> 00:13:44,399
file but essentially still http

400
00:13:44,399 --> 00:13:45,760
the docker engine will then if it needs

401
00:13:45,760 --> 00:13:48,000
to go and get images it can go up to the

402
00:13:48,000 --> 00:13:49,839
docker registry

403
00:13:49,839 --> 00:13:51,920
and that will essentially is another

404
00:13:51,920 --> 00:13:54,639
http rest uh interface so we're talking

405
00:13:54,639 --> 00:13:57,120
on the rest engine service web service

406
00:13:57,120 --> 00:13:58,320
and then it's launching these containers

407
00:13:58,320 --> 00:14:00,399
over here

408
00:14:00,399 --> 00:14:02,800
so essentially this is just a couple of

409
00:14:02,800 --> 00:14:06,000
rest apis uh creating processes that's

410
00:14:06,000 --> 00:14:07,440
what docker is

411
00:14:07,440 --> 00:14:09,040
just to demonstrate that last bit about

412
00:14:09,040 --> 00:14:10,480
the rest apis

413
00:14:10,480 --> 00:14:14,839
we can do that as well uh so if i

414
00:14:14,839 --> 00:14:17,760
do just so cat should still have this

415
00:14:17,760 --> 00:14:19,199
what i'm doing is going to use socat

416
00:14:19,199 --> 00:14:21,680
here to essentially create a fake docker

417
00:14:21,680 --> 00:14:23,440
socket and pass the traffic on to the

418
00:14:23,440 --> 00:14:25,360
real docker socket and i'm just doing

419
00:14:25,360 --> 00:14:27,600
that so that i can demonstrate um these

420
00:14:27,600 --> 00:14:29,440
http commands and show it to you that

421
00:14:29,440 --> 00:14:31,360
docker is literally just it's just a

422
00:14:31,360 --> 00:14:32,720
rest interface

423
00:14:32,720 --> 00:14:34,560
so we'll have this so count running in

424
00:14:34,560 --> 00:14:36,320
one terminal

425
00:14:36,320 --> 00:14:39,680
and then we'll uh

426
00:14:40,480 --> 00:14:42,639
we'll go and just list the images all

427
00:14:42,639 --> 00:14:44,800
i'm doing here is i'm talking to our our

428
00:14:44,800 --> 00:14:46,959
fake socket and i'm going to list the

429
00:14:46,959 --> 00:14:48,880
images for docker

430
00:14:48,880 --> 00:14:51,040
and on this machine

431
00:14:51,040 --> 00:14:53,519
we've got three images so so not a lot

432
00:14:53,519 --> 00:14:54,480
there

433
00:14:54,480 --> 00:14:55,839
but what actually happened what did

434
00:14:55,839 --> 00:14:57,680
docker actually you know the client tell

435
00:14:57,680 --> 00:14:59,199
the server to do here

436
00:14:59,199 --> 00:15:01,839
and you can see it's literally just

437
00:15:01,839 --> 00:15:04,079
a couple of rest commands

438
00:15:04,079 --> 00:15:05,839
head does pings a thing to make sure

439
00:15:05,839 --> 00:15:07,600
that it's alive and then when it gets

440
00:15:07,600 --> 00:15:09,199
response that the server is there it

441
00:15:09,199 --> 00:15:10,399
just says

442
00:15:10,399 --> 00:15:11,199
get

443
00:15:11,199 --> 00:15:12,800
api version

444
00:15:12,800 --> 00:15:15,360
the thing i want images and what format

445
00:15:15,360 --> 00:15:17,600
json it wants a jfon format of the

446
00:15:17,600 --> 00:15:19,120
images on the machine

447
00:15:19,120 --> 00:15:20,160
and that's essentially all docker's

448
00:15:20,160 --> 00:15:22,399
doing

449
00:15:22,800 --> 00:15:24,720
so that's what docker is now you

450
00:15:24,720 --> 00:15:26,000
understand it didn't already which you

451
00:15:26,000 --> 00:15:27,680
may well have done uh that's how docker

452
00:15:27,680 --> 00:15:29,199
works

453
00:15:29,199 --> 00:15:30,720
what does that mean from a security and

454
00:15:30,720 --> 00:15:32,160
kind of hacking perspective what does

455
00:15:32,160 --> 00:15:33,680
that mean for us

456
00:15:33,680 --> 00:15:36,560
well docker has got a flexible security

457
00:15:36,560 --> 00:15:38,800
model and what that means is it provides

458
00:15:38,800 --> 00:15:41,440
you with a reasonable set of defaults in

459
00:15:41,440 --> 00:15:43,040
terms of its isolation that it that it

460
00:15:43,040 --> 00:15:45,519
puts in place but it assumes that anyone

461
00:15:45,519 --> 00:15:47,759
who can run docker commands can remove

462
00:15:47,759 --> 00:15:49,680
those right so you know if you give

463
00:15:49,680 --> 00:15:52,480
someone docker access to a host they

464
00:15:52,480 --> 00:15:54,399
should generally be considered root on

465
00:15:54,399 --> 00:15:55,759
the host

466
00:15:55,759 --> 00:15:57,680
now with the latest version of docker or

467
00:15:57,680 --> 00:15:59,440
using tools like podman you can run

468
00:15:59,440 --> 00:16:01,120
these things without being root but the

469
00:16:01,120 --> 00:16:02,560
default docker that you're going to see

470
00:16:02,560 --> 00:16:05,680
installed in most places runs as root if

471
00:16:05,680 --> 00:16:07,759
you get let users run docker commands

472
00:16:07,759 --> 00:16:09,759
they're basically going to be rude

473
00:16:09,759 --> 00:16:12,000
we can demonstrate this using the most

474
00:16:12,000 --> 00:16:14,480
pointless docker command ever

475
00:16:14,480 --> 00:16:16,399
this is coming from a blog post by ian

476
00:16:16,399 --> 00:16:18,720
milner 2015

477
00:16:18,720 --> 00:16:20,560
and this command essentially he called

478
00:16:20,560 --> 00:16:23,040
it the most useless docker command ever

479
00:16:23,040 --> 00:16:24,800
from my perspective as a pen tester this

480
00:16:24,800 --> 00:16:26,800
was actually the most useful docker

481
00:16:26,800 --> 00:16:29,040
command ever and if you're pen testing

482
00:16:29,040 --> 00:16:31,440
or hacking uh docker trust me this is

483
00:16:31,440 --> 00:16:32,959
this is my this is this will be your

484
00:16:32,959 --> 00:16:34,720
favorite command

485
00:16:34,720 --> 00:16:37,120
so we can demonstrate how this one works

486
00:16:37,120 --> 00:16:39,120
uh let's

487
00:16:39,120 --> 00:16:42,800
clear that out and go back up to the top

488
00:16:42,800 --> 00:16:43,920
and

489
00:16:43,920 --> 00:16:45,839
let me go get this off my and copy paste

490
00:16:45,839 --> 00:16:46,959
it because i'm going to make a mistake

491
00:16:46,959 --> 00:16:49,519
if i try and type it out

492
00:16:49,519 --> 00:16:50,959
so what we can do here is

493
00:16:50,959 --> 00:16:54,079
docker as i said flexible security model

494
00:16:54,079 --> 00:16:55,839
we can run minus minus privileged which

495
00:16:55,839 --> 00:16:57,360
basically says remove all of the

496
00:16:57,360 --> 00:16:59,680
security we can then say instead of

497
00:16:59,680 --> 00:17:01,839
giving me these namespace resources give

498
00:17:01,839 --> 00:17:03,680
me the host resources

499
00:17:03,680 --> 00:17:06,720
we can also say map the root from the

500
00:17:06,720 --> 00:17:08,640
host the root file system into the

501
00:17:08,640 --> 00:17:10,799
container as slash host

502
00:17:10,799 --> 00:17:12,559
and then we're going to true into that

503
00:17:12,559 --> 00:17:14,319
now you see before i run this command

504
00:17:14,319 --> 00:17:16,839
that i am the rory m user on the host

505
00:17:16,839 --> 00:17:20,079
csf when i hit enter

506
00:17:20,079 --> 00:17:22,319
i'm the root user it's that simple i am

507
00:17:22,319 --> 00:17:24,160
the root user i can do anything root can

508
00:17:24,160 --> 00:17:26,319
do i can delete the entire system i can

509
00:17:26,319 --> 00:17:28,400
modify etc shadow

510
00:17:28,400 --> 00:17:31,120
i can install malware so from a a

511
00:17:31,120 --> 00:17:32,559
testing and security perspective that

512
00:17:32,559 --> 00:17:34,400
one's moderately important docker

513
00:17:34,400 --> 00:17:37,039
essentially is command execution as a

514
00:17:37,039 --> 00:17:38,799
service by design

515
00:17:38,799 --> 00:17:40,559
if someone puts docker onto the network

516
00:17:40,559 --> 00:17:42,559
and they have it listening there it's

517
00:17:42,559 --> 00:17:45,280
remote command execution as a service by

518
00:17:45,280 --> 00:17:47,440
design this isn't an elite hacking trick

519
00:17:47,440 --> 00:17:50,720
it's just how docker works

520
00:17:52,320 --> 00:17:53,919
so

521
00:17:53,919 --> 00:17:56,240
so that was essentially docker right and

522
00:17:56,240 --> 00:17:57,840
that is kind of the key point about

523
00:17:57,840 --> 00:17:59,919
docker is docker's command execution as

524
00:17:59,919 --> 00:18:01,679
a service that's what it does if you're

525
00:18:01,679 --> 00:18:03,760
wanting to attack docker as i said

526
00:18:03,760 --> 00:18:06,080
whilst it doesn't listen on the network

527
00:18:06,080 --> 00:18:08,480
by default you can make it uh and i have

528
00:18:08,480 --> 00:18:10,400
seen environments where it did and at

529
00:18:10,400 --> 00:18:11,760
that point you can basically just point

530
00:18:11,760 --> 00:18:13,200
docker at it and do what i just did and

531
00:18:13,200 --> 00:18:14,799
become real in the host

532
00:18:14,799 --> 00:18:17,120
but then we have kubernetes right

533
00:18:17,120 --> 00:18:19,039
because whilst docker is very

534
00:18:19,039 --> 00:18:20,320
interesting and reasonably

535
00:18:20,320 --> 00:18:22,799
straightforward the way that most people

536
00:18:22,799 --> 00:18:25,039
deploy containers now the way that most

537
00:18:25,039 --> 00:18:26,160
people you know essentially make the

538
00:18:26,160 --> 00:18:28,960
containers run is what they do is they

539
00:18:28,960 --> 00:18:31,120
use kubernetes and the reason for that

540
00:18:31,120 --> 00:18:33,200
is if i want to

541
00:18:33,200 --> 00:18:35,280
not have one machine with containers on

542
00:18:35,280 --> 00:18:38,000
it i want to have 10 or 100 or a

543
00:18:38,000 --> 00:18:39,280
thousand

544
00:18:39,280 --> 00:18:41,840
i need some way of orchestrating all of

545
00:18:41,840 --> 00:18:43,919
those containers that's where kubernetes

546
00:18:43,919 --> 00:18:44,799
comes in

547
00:18:44,799 --> 00:18:46,400
now there's lots of different ways of

548
00:18:46,400 --> 00:18:48,720
installing and deploying kubernetes um

549
00:18:48,720 --> 00:18:51,280
there's well over a hundred different

550
00:18:51,280 --> 00:18:52,559
authorized

551
00:18:52,559 --> 00:18:54,320
distributions or services that use

552
00:18:54,320 --> 00:18:56,480
kubernetes and each one of them will be

553
00:18:56,480 --> 00:18:58,240
different so when you're looking at

554
00:18:58,240 --> 00:19:00,480
secure kubernetes security that can make

555
00:19:00,480 --> 00:19:02,160
things complex

556
00:19:02,160 --> 00:19:04,080
now the thing i would say about that is

557
00:19:04,080 --> 00:19:06,000
that every single one of those has to

558
00:19:06,000 --> 00:19:08,320
have certain core functionality in order

559
00:19:08,320 --> 00:19:10,080
to be certified as a kubernetes

560
00:19:10,080 --> 00:19:11,919
distribution and what we see on the

561
00:19:11,919 --> 00:19:14,320
screen here essentially is that core

562
00:19:14,320 --> 00:19:16,080
functionality these are the things that

563
00:19:16,080 --> 00:19:18,480
kubernetes has to do in order for it to

564
00:19:18,480 --> 00:19:20,640
be a kubernetes distribution

565
00:19:20,640 --> 00:19:22,320
the way it works is this

566
00:19:22,320 --> 00:19:24,480
we have some groups of nodes we have

567
00:19:24,480 --> 00:19:26,400
groups of virtual machines or physical

568
00:19:26,400 --> 00:19:29,039
servers that make the control plane

569
00:19:29,039 --> 00:19:31,600
those control planes hosts run the

570
00:19:31,600 --> 00:19:33,679
services that manage the cluster you can

571
00:19:33,679 --> 00:19:35,840
have just one or you can have sets of

572
00:19:35,840 --> 00:19:37,360
them

573
00:19:37,360 --> 00:19:38,799
and then once we've got those we then

574
00:19:38,799 --> 00:19:41,200
need our worker nodes and our worker

575
00:19:41,200 --> 00:19:43,679
nodes are where our workloads run so

576
00:19:43,679 --> 00:19:45,360
before when i was running an nginx

577
00:19:45,360 --> 00:19:47,520
container if i wanted say 10 nginx

578
00:19:47,520 --> 00:19:49,679
containers or 100 enginex containers i

579
00:19:49,679 --> 00:19:51,440
could tell kubernetes tell the api

580
00:19:51,440 --> 00:19:53,919
server please create 100 nginx

581
00:19:53,919 --> 00:19:55,520
containers it would then go to the

582
00:19:55,520 --> 00:19:57,120
worker nodes and it would say to each

583
00:19:57,120 --> 00:19:59,840
worker node there is a portion of those

584
00:19:59,840 --> 00:20:02,640
100 for you to create and manage

585
00:20:02,640 --> 00:20:03,919
the key components for us from a

586
00:20:03,919 --> 00:20:06,000
security standpoint the first one we've

587
00:20:06,000 --> 00:20:07,919
got down here is our container engine

588
00:20:07,919 --> 00:20:09,679
and our container engine

589
00:20:09,679 --> 00:20:11,840
could be docker in in a lot of clusters

590
00:20:11,840 --> 00:20:14,080
at the moment it is docker in as time

591
00:20:14,080 --> 00:20:15,840
goes by it's likely to be there won't be

592
00:20:15,840 --> 00:20:18,400
so much docker more as container d or

593
00:20:18,400 --> 00:20:20,320
cryo which are two other projects which

594
00:20:20,320 --> 00:20:21,520
do the same thing

595
00:20:21,520 --> 00:20:22,720
pretty much

596
00:20:22,720 --> 00:20:23,679
um

597
00:20:23,679 --> 00:20:24,640
we then have this thing called the

598
00:20:24,640 --> 00:20:26,880
cubelet and the cubelet map essentially

599
00:20:26,880 --> 00:20:29,360
sits between the api server and the

600
00:20:29,360 --> 00:20:31,360
container engine and tells the container

601
00:20:31,360 --> 00:20:32,640
engine what to do

602
00:20:32,640 --> 00:20:34,400
so from a security perspective this is

603
00:20:34,400 --> 00:20:36,320
really important because if i can

604
00:20:36,320 --> 00:20:38,880
control the cubelet i can control the

605
00:20:38,880 --> 00:20:40,799
container engine if i control the

606
00:20:40,799 --> 00:20:43,200
container engine container engine we can

607
00:20:43,200 --> 00:20:44,880
be root on the host right that's the

608
00:20:44,880 --> 00:20:46,400
thing to think about this is all command

609
00:20:46,400 --> 00:20:48,320
execution as a service so if i control

610
00:20:48,320 --> 00:20:50,480
the qubit i control

611
00:20:50,480 --> 00:20:52,960
the container engine i get to be root

612
00:20:52,960 --> 00:20:54,960
we then have the api server

613
00:20:54,960 --> 00:20:58,559
now this is a rest api just a much

614
00:20:58,559 --> 00:21:00,480
bigger version kind of similar to docker

615
00:21:00,480 --> 00:21:02,640
and it is the heart of the cluster it is

616
00:21:02,640 --> 00:21:04,960
the thing that everything else talks to

617
00:21:04,960 --> 00:21:06,960
and from a security standpoint it's the

618
00:21:06,960 --> 00:21:08,960
most important component if i can

619
00:21:08,960 --> 00:21:10,880
control the api server i control

620
00:21:10,880 --> 00:21:13,600
everything else and i can essentially

621
00:21:13,600 --> 00:21:16,480
execute my commands wherever i want

622
00:21:16,480 --> 00:21:18,320
so that's that element's pretty

623
00:21:18,320 --> 00:21:19,360
important

624
00:21:19,360 --> 00:21:22,400
we then have above that we have xcd

625
00:21:22,400 --> 00:21:25,200
now kubernetes by default is stateless

626
00:21:25,200 --> 00:21:27,120
so it doesn't store any state within

627
00:21:27,120 --> 00:21:29,919
itself it needs an external data store

628
00:21:29,919 --> 00:21:32,159
and for most clusters that external data

629
00:21:32,159 --> 00:21:33,919
store will be xcd

630
00:21:33,919 --> 00:21:36,799
ncd is a fairly simple key value store

631
00:21:36,799 --> 00:21:37,919
database

632
00:21:37,919 --> 00:21:40,480
um and it has an external interface in

633
00:21:40,480 --> 00:21:42,799
http interface as well but it speaks

634
00:21:42,799 --> 00:21:44,400
grpc usually

635
00:21:44,400 --> 00:21:45,919
so that's slightly different from

636
00:21:45,919 --> 00:21:47,440
attacking's perspective it makes it

637
00:21:47,440 --> 00:21:48,960
slightly harder to attack because it's

638
00:21:48,960 --> 00:21:51,200
not as easy as the other two but still

639
00:21:51,200 --> 00:21:52,640
possible

640
00:21:52,640 --> 00:21:54,640
in terms of security each one of these

641
00:21:54,640 --> 00:21:57,039
three services in red are our key things

642
00:21:57,039 --> 00:21:58,559
to worry about or attack if we're

643
00:21:58,559 --> 00:22:00,640
attackers and each one of these has got

644
00:22:00,640 --> 00:22:02,080
its own port

645
00:22:02,080 --> 00:22:04,400
an external service unlike docker which

646
00:22:04,400 --> 00:22:06,320
doesn't listen on the network by default

647
00:22:06,320 --> 00:22:07,679
these all do

648
00:22:07,679 --> 00:22:08,880
and therefore there's a bigger attack

649
00:22:08,880 --> 00:22:10,480
surface with kubernetes there's more

650
00:22:10,480 --> 00:22:12,559
points of potential compromise either

651
00:22:12,559 --> 00:22:15,760
for your attacker or defender

652
00:22:15,760 --> 00:22:18,320
so we said that docker is command

653
00:22:18,320 --> 00:22:20,559
execution as a service that follows then

654
00:22:20,559 --> 00:22:22,559
that kubernetes is distributed remote

655
00:22:22,559 --> 00:22:25,280
command execution as a service

656
00:22:25,280 --> 00:22:27,200
it orchestrates docker or something

657
00:22:27,200 --> 00:22:29,120
which works like docker so essentially

658
00:22:29,120 --> 00:22:31,120
the same challenge we had with docker

659
00:22:31,120 --> 00:22:33,760
security applies which is that if i can

660
00:22:33,760 --> 00:22:36,400
control kubernetes i can control every

661
00:22:36,400 --> 00:22:39,039
single machine in the cluster

662
00:22:39,039 --> 00:22:41,280
just to demonstrate that

663
00:22:41,280 --> 00:22:42,880
let's let's go to a different machine

664
00:22:42,880 --> 00:22:45,039
here

665
00:22:46,640 --> 00:22:49,200
so i've got a kubernetes cluster here

666
00:22:49,200 --> 00:22:51,760
and at the moment

667
00:22:51,760 --> 00:22:53,600
i don't have any resources a little bit

668
00:22:53,600 --> 00:22:54,880
better

669
00:22:54,880 --> 00:22:56,799
i don't have any pods running odds just

670
00:22:56,799 --> 00:22:59,440
being how kubernetes groups containers

671
00:22:59,440 --> 00:23:04,919
what i can do is i can create a

672
00:23:08,559 --> 00:23:11,679
and create a pod onto our cluster

673
00:23:11,679 --> 00:23:13,520
and i've created a pod called node root

674
00:23:13,520 --> 00:23:15,520
now whilst i'm uh whilst that's spinning

675
00:23:15,520 --> 00:23:18,480
up let me just um let's listen quick

676
00:23:18,480 --> 00:23:20,480
look at the manifest all of kubernetes

677
00:23:20,480 --> 00:23:23,360
manifests are yaml um that's just how it

678
00:23:23,360 --> 00:23:24,640
works which stands for yet another

679
00:23:24,640 --> 00:23:27,120
markup language

680
00:23:27,120 --> 00:23:28,880
let me just actually again bring up the

681
00:23:28,880 --> 00:23:30,720
top now what we can see here this is a

682
00:23:30,720 --> 00:23:33,200
very simple kubernetes manifest but we

683
00:23:33,200 --> 00:23:34,880
can see in this particular manifest i've

684
00:23:34,880 --> 00:23:36,799
added these three lines here

685
00:23:36,799 --> 00:23:39,039
which give you the host resources i've

686
00:23:39,039 --> 00:23:41,600
also added this line here which makes it

687
00:23:41,600 --> 00:23:44,559
privileged now this will probably remind

688
00:23:44,559 --> 00:23:46,799
you of the docker command i ran earlier

689
00:23:46,799 --> 00:23:48,320
this essentially is the kubernetes

690
00:23:48,320 --> 00:23:50,400
version of the same thing

691
00:23:50,400 --> 00:23:52,799
the important bit to recognize is that

692
00:23:52,799 --> 00:23:55,200
without additional security controls

693
00:23:55,200 --> 00:23:57,679
with kubernetes you can always do this

694
00:23:57,679 --> 00:24:00,000
anyone who can create pods can create

695
00:24:00,000 --> 00:24:01,760
this kind of pod and can do what i'm

696
00:24:01,760 --> 00:24:03,279
about to do

697
00:24:03,279 --> 00:24:04,400
once we've got that running let's just

698
00:24:04,400 --> 00:24:06,720
check and make sure it's working okay

699
00:24:06,720 --> 00:24:09,279
and it is our pod is up and running we

700
00:24:09,279 --> 00:24:12,000
can now do this

701
00:24:15,360 --> 00:24:17,279
essentially we can just exec into our

702
00:24:17,279 --> 00:24:18,480
new pod

703
00:24:18,480 --> 00:24:20,240
and we can issue true host and i'll show

704
00:24:20,240 --> 00:24:22,080
you what happens in just a second

705
00:24:22,080 --> 00:24:24,480
the important thing to recognize here is

706
00:24:24,480 --> 00:24:25,600
that this essentially is going to be

707
00:24:25,600 --> 00:24:28,480
remote access onto a node in the cluster

708
00:24:28,480 --> 00:24:31,039
with no ssh or anything else this is all

709
00:24:31,039 --> 00:24:33,440
running over https over the kubernetes

710
00:24:33,440 --> 00:24:34,559
api

711
00:24:34,559 --> 00:24:36,000
in terms of like if you're security if

712
00:24:36,000 --> 00:24:37,600
you're a blue team um there won't

713
00:24:37,600 --> 00:24:39,679
necessarily be any ssh access if someone

714
00:24:39,679 --> 00:24:41,440
tries to attack your cluster or access

715
00:24:41,440 --> 00:24:43,360
to the nodes they can run everything via

716
00:24:43,360 --> 00:24:45,440
the kubernetes api and i'll show you how

717
00:24:45,440 --> 00:24:47,200
this works

718
00:24:47,200 --> 00:24:49,200
before i hit enter on this command i am

719
00:24:49,200 --> 00:24:51,039
the root user on a machine called

720
00:24:51,039 --> 00:24:53,120
sapling which is my actually a wsl

721
00:24:53,120 --> 00:24:54,480
instance

722
00:24:54,480 --> 00:24:56,400
when i hit enter

723
00:24:56,400 --> 00:24:59,039
i am now the root user on the cluster

724
00:24:59,039 --> 00:25:00,400
control plane

725
00:25:00,400 --> 00:25:02,400
so anyone who can create pods in a

726
00:25:02,400 --> 00:25:04,159
cluster without additional controls

727
00:25:04,159 --> 00:25:05,679
being there which aren't generally

728
00:25:05,679 --> 00:25:07,679
installed by default can do this and you

729
00:25:07,679 --> 00:25:09,279
get to be the root node root machine

730
00:25:09,279 --> 00:25:11,279
root user on all the nodes in the

731
00:25:11,279 --> 00:25:12,400
cluster which is very nice if you're an

732
00:25:12,400 --> 00:25:13,600
attacker

733
00:25:13,600 --> 00:25:15,120
and once you've done that you can do fun

734
00:25:15,120 --> 00:25:16,480
things

735
00:25:16,480 --> 00:25:19,919
like go to etc kubernetes pki

736
00:25:19,919 --> 00:25:22,559
kubernetes makes heavy use of

737
00:25:22,559 --> 00:25:24,559
x509 certificates as part of its

738
00:25:24,559 --> 00:25:26,559
security model and it stores the

739
00:25:26,559 --> 00:25:28,400
generally stores the files depending on

740
00:25:28,400 --> 00:25:29,679
the distribution

741
00:25:29,679 --> 00:25:32,400
on disk in the clear so we can see here

742
00:25:32,400 --> 00:25:34,080
we have got the certificate authority

743
00:25:34,080 --> 00:25:35,840
key that's the private key of the

744
00:25:35,840 --> 00:25:37,919
certificate authority for the cluster

745
00:25:37,919 --> 00:25:41,440
and i can cut that out if i want to

746
00:25:41,440 --> 00:25:43,039
there you go private key

747
00:25:43,039 --> 00:25:44,400
so

748
00:25:44,400 --> 00:25:46,480
you can see now why kubernetes security

749
00:25:46,480 --> 00:25:48,159
has a bit of a challenge because the

750
00:25:48,159 --> 00:25:50,080
default state is that people can do this

751
00:25:50,080 --> 00:25:51,360
you probably

752
00:25:51,360 --> 00:25:52,640
your defender you don't want this to

753
00:25:52,640 --> 00:25:54,799
happen

754
00:25:54,799 --> 00:25:57,039
but it also shows you that kubernetes is

755
00:25:57,039 --> 00:25:59,360
essentially remote commanded execution

756
00:25:59,360 --> 00:26:02,080
as a service

757
00:26:02,799 --> 00:26:04,320
so

758
00:26:04,320 --> 00:26:05,600
what about what's the what's the real

759
00:26:05,600 --> 00:26:08,080
world that's the theory um do people put

760
00:26:08,080 --> 00:26:09,679
these things on the internet is a good

761
00:26:09,679 --> 00:26:11,360
question you know are there clusters

762
00:26:11,360 --> 00:26:13,039
that are being exposed

763
00:26:13,039 --> 00:26:14,320
you know by the way that they're

764
00:26:14,320 --> 00:26:16,559
installed and configured the answer is

765
00:26:16,559 --> 00:26:18,559
yes

766
00:26:18,559 --> 00:26:21,200
i did these stats last week um

767
00:26:21,200 --> 00:26:24,400
and the there were about 880 000

768
00:26:24,400 --> 00:26:26,480
things that look like kubernetes api

769
00:26:26,480 --> 00:26:28,400
servers on the internet

770
00:26:28,400 --> 00:26:30,480
um i'm identifying that based on the

771
00:26:30,480 --> 00:26:31,919
certificates the issue have very

772
00:26:31,919 --> 00:26:34,640
distinct um names you can generally pick

773
00:26:34,640 --> 00:26:36,840
them out of search engines using

774
00:26:36,840 --> 00:26:42,000
that um of those 880 000 110 000 were

775
00:26:42,000 --> 00:26:43,600
returning a version

776
00:26:43,600 --> 00:26:45,520
so a lot of kubernetes distributions and

777
00:26:45,520 --> 00:26:47,919
this does depend on the distribution

778
00:26:47,919 --> 00:26:51,039
will expose an api endpoint called slash

779
00:26:51,039 --> 00:26:52,799
version by default without

780
00:26:52,799 --> 00:26:54,559
authentication that means that it's

781
00:26:54,559 --> 00:26:57,600
possible to index all the versions of

782
00:26:57,600 --> 00:26:59,200
that you can see you know available on

783
00:26:59,200 --> 00:27:01,360
the internet these stats i got from a

784
00:27:01,360 --> 00:27:03,760
search engine called census and senses

785
00:27:03,760 --> 00:27:05,279
essentially indexes kubernetes

786
00:27:05,279 --> 00:27:06,880
information which means you can query it

787
00:27:06,880 --> 00:27:08,159
and this is what i've done here there's

788
00:27:08,159 --> 00:27:11,840
110 000 clusters returning a version

789
00:27:11,840 --> 00:27:13,039
of those

790
00:27:13,039 --> 00:27:15,679
24 000 we're running an unsupported

791
00:27:15,679 --> 00:27:18,480
version so kubernetes um supports at

792
00:27:18,480 --> 00:27:21,760
about 12 to 18 month support life cycle

793
00:27:21,760 --> 00:27:23,600
depending on the distribution you're

794
00:27:23,600 --> 00:27:25,440
using but generally no more than about

795
00:27:25,440 --> 00:27:26,960
18 months

796
00:27:26,960 --> 00:27:29,520
so we're looking at about 24 00 25

797
00:27:29,520 --> 00:27:31,760
percent of people already remembering

798
00:27:31,760 --> 00:27:34,000
kubernetes is a reasonably new product

799
00:27:34,000 --> 00:27:35,360
for a lot of companies they're already

800
00:27:35,360 --> 00:27:37,200
running out of support versions so from

801
00:27:37,200 --> 00:27:38,960
an attacker's perspective that's kind of

802
00:27:38,960 --> 00:27:41,039
useful if there is ever a

803
00:27:41,039 --> 00:27:43,679
zero day or a issued cve in the api

804
00:27:43,679 --> 00:27:45,520
server which is reasonably likely you

805
00:27:45,520 --> 00:27:46,880
know these things happen

806
00:27:46,880 --> 00:27:48,960
there's a lot of potential targets there

807
00:27:48,960 --> 00:27:51,279
if you're a defender that's not great

808
00:27:51,279 --> 00:27:53,039
the reason why there are so many api

809
00:27:53,039 --> 00:27:55,120
servers visible by the way is that some

810
00:27:55,120 --> 00:27:56,880
kubernetes distribution some managed

811
00:27:56,880 --> 00:27:59,440
distributions will actually put the api

812
00:27:59,440 --> 00:28:01,520
server on the internet by default it's

813
00:28:01,520 --> 00:28:03,200
for you to go and turn it off an

814
00:28:03,200 --> 00:28:04,640
important one to do if you are using

815
00:28:04,640 --> 00:28:07,679
managed kubernetes to check the default

816
00:28:07,679 --> 00:28:09,679
there's also a hundred thousand cubelets

817
00:28:09,679 --> 00:28:10,480
ish

818
00:28:10,480 --> 00:28:12,159
harder to identify but that i reckon is

819
00:28:12,159 --> 00:28:14,559
100 000 cubelets on the internet this

820
00:28:14,559 --> 00:28:16,320
one's worse really because there's no

821
00:28:16,320 --> 00:28:17,919
reason the cubelet should ever be

822
00:28:17,919 --> 00:28:18,960
exposed to the internet without

823
00:28:18,960 --> 00:28:21,279
restriction api server potentially a

824
00:28:21,279 --> 00:28:22,640
debatable point

825
00:28:22,640 --> 00:28:26,000
a lot less so and about 5000 xcds so

826
00:28:26,000 --> 00:28:27,360
we're talking fairly decent numbers of

827
00:28:27,360 --> 00:28:28,480
these things are being placed on the

828
00:28:28,480 --> 00:28:29,600
internet so there is definitely an

829
00:28:29,600 --> 00:28:31,919
internet facing attack surface here

830
00:28:31,919 --> 00:28:33,600
actually i was doing some some some

831
00:28:33,600 --> 00:28:35,440
research on this very recently and

832
00:28:35,440 --> 00:28:37,440
there's about 140 of those have made a

833
00:28:37,440 --> 00:28:38,880
mess of their authentication and

834
00:28:38,880 --> 00:28:41,279
authorization and are currently mining

835
00:28:41,279 --> 00:28:44,000
monero or some other cryptocurrency so

836
00:28:44,000 --> 00:28:45,520
there's there's real world compromise

837
00:28:45,520 --> 00:28:47,360
too

838
00:28:47,360 --> 00:28:48,480
if you want to go and find these things

839
00:28:48,480 --> 00:28:50,000
yourselves there are some specific ports

840
00:28:50,000 --> 00:28:53,840
to look for um 2375 is the dock report

841
00:28:53,840 --> 00:28:56,000
that's the docker port the default with

842
00:28:56,000 --> 00:28:59,440
no security if you see 23.75 you can

843
00:28:59,440 --> 00:29:02,159
just point the docker cli at that port

844
00:29:02,159 --> 00:29:03,279
and you'll probably be able to get

845
00:29:03,279 --> 00:29:05,360
access root access to the host

846
00:29:05,360 --> 00:29:07,440
for kubernetes it's a bit more variable

847
00:29:07,440 --> 00:29:12,799
um 6443 is the api server 2379 is xcd

848
00:29:12,799 --> 00:29:15,360
and 10 250 is the cubelet those are the

849
00:29:15,360 --> 00:29:18,159
ports that i got from the previous slide

850
00:29:18,159 --> 00:29:19,760
you can also and i'm not slightly

851
00:29:19,760 --> 00:29:21,120
surprised that the search engines do

852
00:29:21,120 --> 00:29:23,520
this but they do these two searches here

853
00:29:23,520 --> 00:29:26,240
actually will return clusters which have

854
00:29:26,240 --> 00:29:28,720
are allowing unauthenticated access to

855
00:29:28,720 --> 00:29:30,799
their services which generally means

856
00:29:30,799 --> 00:29:32,159
that you've got remote command execution

857
00:29:32,159 --> 00:29:34,960
as a service both binary edge and census

858
00:29:34,960 --> 00:29:36,640
will actually index this particular

859
00:29:36,640 --> 00:29:38,159
thing like they'll actually try and

860
00:29:38,159 --> 00:29:39,679
authenticate to the api or pull

861
00:29:39,679 --> 00:29:41,520
information back without authentication

862
00:29:41,520 --> 00:29:43,279
so you can kind of look around those i'm

863
00:29:43,279 --> 00:29:45,279
sure some of those will be honeypots but

864
00:29:45,279 --> 00:29:46,720
i'm fairly sure that not all of them are

865
00:29:46,720 --> 00:29:48,159
honeypots i haven't touched any of the

866
00:29:48,159 --> 00:29:50,240
servers directly but but looking at the

867
00:29:50,240 --> 00:29:53,200
metadata looks fairly real to me

868
00:29:53,200 --> 00:29:55,840
so interesting one there

869
00:29:55,840 --> 00:29:57,840
so there are also some kubernetes

870
00:29:57,840 --> 00:30:00,000
security gotchas to consider

871
00:30:00,000 --> 00:30:01,120
um

872
00:30:01,120 --> 00:30:03,279
the first one of these is um is

873
00:30:03,279 --> 00:30:04,799
authentication

874
00:30:04,799 --> 00:30:07,679
when you're deploying kubernetes um none

875
00:30:07,679 --> 00:30:09,679
of the inbuilt kubernetes authentication

876
00:30:09,679 --> 00:30:12,559
mechanisms are suitable for production

877
00:30:12,559 --> 00:30:14,480
kubernetes ships with

878
00:30:14,480 --> 00:30:17,360
two mechanisms for authentication it has

879
00:30:17,360 --> 00:30:19,360
a tokens which essentially are put in

880
00:30:19,360 --> 00:30:22,000
clear text on the api servers on disk

881
00:30:22,000 --> 00:30:23,679
and every time you change one of them

882
00:30:23,679 --> 00:30:25,760
you have to reboot the api server that's

883
00:30:25,760 --> 00:30:27,440
fairly obviously not a production

884
00:30:27,440 --> 00:30:29,919
suitable authentication mechanism

885
00:30:29,919 --> 00:30:32,640
it also has this idea of client

886
00:30:32,640 --> 00:30:34,640
certificate authentication

887
00:30:34,640 --> 00:30:37,440
that sounds more suitable for production

888
00:30:37,440 --> 00:30:39,840
um but there is a problem which is that

889
00:30:39,840 --> 00:30:41,600
kubernetes client certificate

890
00:30:41,600 --> 00:30:42,960
authentication

891
00:30:42,960 --> 00:30:44,960
does not support revocation

892
00:30:44,960 --> 00:30:47,120
this means that if someone is issued a

893
00:30:47,120 --> 00:30:50,159
client certificate um you can and that

894
00:30:50,159 --> 00:30:52,159
certificate is lost or the person leads

895
00:30:52,159 --> 00:30:54,000
the company or the person loses their

896
00:30:54,000 --> 00:30:56,240
laptop or whatever else might happen to

897
00:30:56,240 --> 00:30:58,240
it there's no way to revoke that

898
00:30:58,240 --> 00:31:00,000
individual credential

899
00:31:00,000 --> 00:31:02,080
uh you have to essentially rotate the

900
00:31:02,080 --> 00:31:03,760
entire certificate authority almost

901
00:31:03,760 --> 00:31:06,399
rebuild the whole cluster effectively so

902
00:31:06,399 --> 00:31:07,840
client certificate authentication is

903
00:31:07,840 --> 00:31:10,880
very much not a in kubernetes is very

904
00:31:10,880 --> 00:31:12,559
much not a good idea for production for

905
00:31:12,559 --> 00:31:14,559
user authentication the thing about

906
00:31:14,559 --> 00:31:16,240
client certificate authentication is it

907
00:31:16,240 --> 00:31:18,480
has to be enabled by default because the

908
00:31:18,480 --> 00:31:21,919
components use it internally

909
00:31:22,799 --> 00:31:24,880
but it shouldn't be used in production

910
00:31:24,880 --> 00:31:27,360
for user authentication uh it is however

911
00:31:27,360 --> 00:31:28,960
the default one that a lot of clusters

912
00:31:28,960 --> 00:31:30,080
use

913
00:31:30,080 --> 00:31:31,440
the next thing which might come as a

914
00:31:31,440 --> 00:31:33,039
surprise to people if you're coming from

915
00:31:33,039 --> 00:31:34,880
other software other enterprise software

916
00:31:34,880 --> 00:31:38,000
or other enterprise multi-user software

917
00:31:38,000 --> 00:31:40,480
is that kubernetes does not have a user

918
00:31:40,480 --> 00:31:41,679
database

919
00:31:41,679 --> 00:31:44,000
if you say to a kubernetes administrator

920
00:31:44,000 --> 00:31:44,960
um

921
00:31:44,960 --> 00:31:47,440
give me a list of valid users who have

922
00:31:47,440 --> 00:31:49,519
used this cluster or who are able to use

923
00:31:49,519 --> 00:31:51,840
this cluster they can't tell you

924
00:31:51,840 --> 00:31:53,360
typically with production humanities

925
00:31:53,360 --> 00:31:55,200
clusters because the internal

926
00:31:55,200 --> 00:31:56,799
authentication mechanisms aren't good

927
00:31:56,799 --> 00:31:58,399
for production you have to use an

928
00:31:58,399 --> 00:32:00,399
external authentication service and

929
00:32:00,399 --> 00:32:02,159
essentially kubernetes just trusts

930
00:32:02,159 --> 00:32:04,000
whichever trusted external

931
00:32:04,000 --> 00:32:05,840
authentication service the information

932
00:32:05,840 --> 00:32:07,919
it passes to them about the usernames is

933
00:32:07,919 --> 00:32:09,440
then just matched up with its

934
00:32:09,440 --> 00:32:11,360
authorization database and it says okay

935
00:32:11,360 --> 00:32:14,000
that's what you have access to

936
00:32:14,000 --> 00:32:15,679
there's also another one which is a good

937
00:32:15,679 --> 00:32:17,440
lookout for both from attacker and

938
00:32:17,440 --> 00:32:18,960
defender perspective

939
00:32:18,960 --> 00:32:20,880
is that there is a hard-coded cluster

940
00:32:20,880 --> 00:32:22,799
admin group in kubernetes this is

941
00:32:22,799 --> 00:32:24,960
hard-coded into the api server source

942
00:32:24,960 --> 00:32:27,600
code which is system masters

943
00:32:27,600 --> 00:32:30,480
any user who is a member of the system

944
00:32:30,480 --> 00:32:31,760
masters group

945
00:32:31,760 --> 00:32:34,000
is always cluster admin

946
00:32:34,000 --> 00:32:36,080
even if you delete the entire

947
00:32:36,080 --> 00:32:38,320
authorization database from a cluster

948
00:32:38,320 --> 00:32:40,480
that user is still cluster admin

949
00:32:40,480 --> 00:32:42,399
the original purpose of this group

950
00:32:42,399 --> 00:32:45,279
was for essentially in disaster recovery

951
00:32:45,279 --> 00:32:47,440
if someone did delete the entire

952
00:32:47,440 --> 00:32:50,080
authorization database from the cluster

953
00:32:50,080 --> 00:32:51,679
you would be able to retrieve it by

954
00:32:51,679 --> 00:32:53,519
using a user who's a member of system

955
00:32:53,519 --> 00:32:54,960
masters

956
00:32:54,960 --> 00:32:56,720
what's unfortunate and one to watch out

957
00:32:56,720 --> 00:32:59,200
for very quite importantly is quite a

958
00:32:59,200 --> 00:33:01,519
few kubernetes distributions will when

959
00:33:01,519 --> 00:33:03,440
you start them up when you first install

960
00:33:03,440 --> 00:33:04,880
them they'll give you a client

961
00:33:04,880 --> 00:33:06,080
certificate

962
00:33:06,080 --> 00:33:07,600
and that client certificate will be a

963
00:33:07,600 --> 00:33:10,399
member of system masters and so that is

964
00:33:10,399 --> 00:33:12,399
essentially a backdoor user they

965
00:33:12,399 --> 00:33:14,000
typically have a life span measured in

966
00:33:14,000 --> 00:33:16,320
years being one or two years

967
00:33:16,320 --> 00:33:18,399
and they can't be revoked so that's its

968
00:33:18,399 --> 00:33:20,080
client certificate if you're a defender

969
00:33:20,080 --> 00:33:21,519
you should be taking very good care of

970
00:33:21,519 --> 00:33:23,440
that client certificate it should never

971
00:33:23,440 --> 00:33:25,919
be used for day-to-day administration

972
00:33:25,919 --> 00:33:26,960
duties

973
00:33:26,960 --> 00:33:28,720
if you're an attacker this is what

974
00:33:28,720 --> 00:33:30,480
you're looking for you want a copy of

975
00:33:30,480 --> 00:33:32,159
this certificate because once you have a

976
00:33:32,159 --> 00:33:34,000
copy of this certificate you can create

977
00:33:34,000 --> 00:33:35,840
your own new users if you want to

978
00:33:35,840 --> 00:33:37,120
because you can just mint new user

979
00:33:37,120 --> 00:33:38,640
requests and approve them

980
00:33:38,640 --> 00:33:40,240
or you essentially can just have cluster

981
00:33:40,240 --> 00:33:42,159
admin it's also a generic username

982
00:33:42,159 --> 00:33:43,760
pretty much every time so it's not

983
00:33:43,760 --> 00:33:45,279
really easy to track that down as to

984
00:33:45,279 --> 00:33:46,880
what's going on you just get told the

985
00:33:46,880 --> 00:33:49,200
generic kubernetes admin user did

986
00:33:49,200 --> 00:33:51,279
something to the api server

987
00:33:51,279 --> 00:33:52,960
so that one is very much to be careful

988
00:33:52,960 --> 00:33:54,320
of be careful with client certificates

989
00:33:54,320 --> 00:33:55,200
they're almost always around the

990
00:33:55,200 --> 00:33:57,440
kubernetes and they are quite dangerous

991
00:33:57,440 --> 00:33:58,480
the last one that's definitely worth

992
00:33:58,480 --> 00:34:00,000
knowing about for kubernetes and it kind

993
00:34:00,000 --> 00:34:02,080
of goes back to the point i made about

994
00:34:02,080 --> 00:34:04,159
um in the previous couple of slides ago

995
00:34:04,159 --> 00:34:06,159
about these exposed clusters is the

996
00:34:06,159 --> 00:34:08,079
support life cycle

997
00:34:08,079 --> 00:34:09,520
there is um essentially a support

998
00:34:09,520 --> 00:34:11,119
lifecycle i say name's 12 months it was

999
00:34:11,119 --> 00:34:13,040
nine months until last year then they

1000
00:34:13,040 --> 00:34:15,679
moved it to 12 months some distributions

1001
00:34:15,679 --> 00:34:17,839
provide you an extended level of support

1002
00:34:17,839 --> 00:34:20,399
but typically not much more than that

1003
00:34:20,399 --> 00:34:22,079
um so you're too looking at quite a

1004
00:34:22,079 --> 00:34:24,159
short life cycle if you're working in a

1005
00:34:24,159 --> 00:34:25,599
large enterprise if you're working for

1006
00:34:25,599 --> 00:34:27,119
the kind of company that moves quite

1007
00:34:27,119 --> 00:34:29,280
slowly it's a challenge to recognize

1008
00:34:29,280 --> 00:34:30,719
that you have to essentially be ready to

1009
00:34:30,719 --> 00:34:33,280
fully upgrade your cluster every year

1010
00:34:33,280 --> 00:34:36,320
and really to avoid big shocks of

1011
00:34:36,320 --> 00:34:38,079
jumping from like three versions at a

1012
00:34:38,079 --> 00:34:39,760
time you really should be upgrading

1013
00:34:39,760 --> 00:34:42,960
every four months which is the uh the

1014
00:34:42,960 --> 00:34:44,800
new version cadence so there's a new

1015
00:34:44,800 --> 00:34:46,159
version of kubernetes released every

1016
00:34:46,159 --> 00:34:48,480
four months or so i personally would

1017
00:34:48,480 --> 00:34:50,480
recommend trying to get into the habit

1018
00:34:50,480 --> 00:34:52,239
of upgrading your clusters every four

1019
00:34:52,239 --> 00:34:53,918
months or so so you're not trying to

1020
00:34:53,918 --> 00:34:57,359
jump multiple versions at the same time

1021
00:34:57,359 --> 00:34:59,200
the reason for that is that kubernetes

1022
00:34:59,200 --> 00:35:01,760
periodically will change things like the

1023
00:35:01,760 --> 00:35:03,920
api will change they'll remove old

1024
00:35:03,920 --> 00:35:06,079
versions and they'll they'll deprecate

1025
00:35:06,079 --> 00:35:07,920
things and if you leave it too long you

1026
00:35:07,920 --> 00:35:09,200
might find that you know you suddenly a

1027
00:35:09,200 --> 00:35:10,960
whole lot of your objects suddenly break

1028
00:35:10,960 --> 00:35:12,320
when you try to upgrade because you're

1029
00:35:12,320 --> 00:35:13,599
upgrading you know three or four

1030
00:35:13,599 --> 00:35:15,680
versions at once it was an important

1031
00:35:15,680 --> 00:35:16,880
point to keep an eye on when using

1032
00:35:16,880 --> 00:35:18,240
kubernetes

1033
00:35:18,240 --> 00:35:19,680
the other thing to note about that is

1034
00:35:19,680 --> 00:35:21,599
with managed distributions

1035
00:35:21,599 --> 00:35:24,000
whilst the managed distribution can

1036
00:35:24,000 --> 00:35:26,079
handle upgrades for you they won't

1037
00:35:26,079 --> 00:35:27,599
generally force your cluster to be

1038
00:35:27,599 --> 00:35:29,520
upgraded unless you choose that as an

1039
00:35:29,520 --> 00:35:32,079
option so gke which is google's managed

1040
00:35:32,079 --> 00:35:34,000
kubernetes provides that but not all of

1041
00:35:34,000 --> 00:35:35,760
them will but they don't force you to

1042
00:35:35,760 --> 00:35:37,680
upgrade so you can still be left behind

1043
00:35:37,680 --> 00:35:39,760
on an unsupported version with managed

1044
00:35:39,760 --> 00:35:41,760
kubernetes a lot of those clusters i

1045
00:35:41,760 --> 00:35:43,359
mentioned before that were unsupported

1046
00:35:43,359 --> 00:35:45,119
were managed kubernetes so it's

1047
00:35:45,119 --> 00:35:46,800
definitely a possible thing so not when

1048
00:35:46,800 --> 00:35:48,320
you you don't can't just like hand that

1049
00:35:48,320 --> 00:35:50,240
off to the cloud provider that's kind of

1050
00:35:50,240 --> 00:35:51,680
still your problem

1051
00:35:51,680 --> 00:35:52,960
that's another one to be very much aware

1052
00:35:52,960 --> 00:35:54,320
of

1053
00:35:54,320 --> 00:35:56,000
in terms of tools tooling that you can

1054
00:35:56,000 --> 00:35:58,079
use for container security assessments

1055
00:35:58,079 --> 00:36:00,079
there's quite a lot now but here's a

1056
00:36:00,079 --> 00:36:01,760
couple of potentially good ones

1057
00:36:01,760 --> 00:36:04,400
am i contained uh is a good tool for

1058
00:36:04,400 --> 00:36:06,160
potentially from running from within a

1059
00:36:06,160 --> 00:36:08,800
container and you can use that to say

1060
00:36:08,800 --> 00:36:10,880
is my container running as privileged

1061
00:36:10,880 --> 00:36:11,920
because mike and you know has the

1062
00:36:11,920 --> 00:36:14,240
security sandbox that flexible security

1063
00:36:14,240 --> 00:36:16,320
model has that been changed do i have

1064
00:36:16,320 --> 00:36:18,240
more rights than i might usually have

1065
00:36:18,240 --> 00:36:20,000
there's a good place to start

1066
00:36:20,000 --> 00:36:22,079
for kubernetes environments there's a

1067
00:36:22,079 --> 00:36:24,800
kind of uh the same similar kind of tool

1068
00:36:24,800 --> 00:36:26,480
it's quite new but very good

1069
00:36:26,480 --> 00:36:28,160
uh has a lot of information called

1070
00:36:28,160 --> 00:36:30,240
kdugger and kdigger essentially does the

1071
00:36:30,240 --> 00:36:33,520
same idea it will enumerate uh um your

1072
00:36:33,520 --> 00:36:34,800
entire environment it was written for

1073
00:36:34,800 --> 00:36:37,760
ctfs if you're doing any kubernetes ctfs

1074
00:36:37,760 --> 00:36:39,040
or you're trying to do a container

1075
00:36:39,040 --> 00:36:40,880
breakout assessment as a pen tester

1076
00:36:40,880 --> 00:36:42,320
running kdigger gives you a lot of

1077
00:36:42,320 --> 00:36:43,520
information about the running

1078
00:36:43,520 --> 00:36:45,040
environment about kubernetes and the

1079
00:36:45,040 --> 00:36:46,560
container environment

1080
00:36:46,560 --> 00:36:48,560
there's also cube hunter and this is a

1081
00:36:48,560 --> 00:36:49,839
tool that's kind of focused on pen

1082
00:36:49,839 --> 00:36:51,520
testing this is one of aqua's open

1083
00:36:51,520 --> 00:36:52,720
source tools

1084
00:36:52,720 --> 00:36:54,400
and queue hunter essentially will try to

1085
00:36:54,400 --> 00:36:57,200
exploit certain common misconfigurations

1086
00:36:57,200 --> 00:36:59,440
like unauthenticated access to those

1087
00:36:59,440 --> 00:37:01,680
apis that i talked about the api server

1088
00:37:01,680 --> 00:37:04,400
api the cubelet api that kind of thing

1089
00:37:04,400 --> 00:37:09,000
and it's a useful tool to use as well

1090
00:37:10,720 --> 00:37:12,320
then some additional resources which are

1091
00:37:12,320 --> 00:37:13,920
very useful there's a good container

1092
00:37:13,920 --> 00:37:15,200
security book

1093
00:37:15,200 --> 00:37:18,000
this is by liz rice you can actually get

1094
00:37:18,000 --> 00:37:19,200
a free copy

1095
00:37:19,200 --> 00:37:21,040
you do have to give up an email address

1096
00:37:21,040 --> 00:37:22,480
and a name doesn't necessarily have to

1097
00:37:22,480 --> 00:37:23,599
be a real one

1098
00:37:23,599 --> 00:37:25,200
um but you do have to give it up to get

1099
00:37:25,200 --> 00:37:26,720
a copy of it but you can get free that's

1100
00:37:26,720 --> 00:37:28,240
our free o'reilly book there good book

1101
00:37:28,240 --> 00:37:29,920
about container security

1102
00:37:29,920 --> 00:37:32,320
there are some good um simulators so if

1103
00:37:32,320 --> 00:37:34,480
you want to try out different attacks

1104
00:37:34,480 --> 00:37:35,680
you know you want to do this in a safe

1105
00:37:35,680 --> 00:37:37,040
environment where you're not going to

1106
00:37:37,040 --> 00:37:39,280
disrupt production um there's you know

1107
00:37:39,280 --> 00:37:41,599
here's three good web app test oh sorry

1108
00:37:41,599 --> 00:37:42,800
three good kubernetes testing

1109
00:37:42,800 --> 00:37:44,800
environments uh this one's one of mine

1110
00:37:44,800 --> 00:37:46,560
this just has a set of clusters with

1111
00:37:46,560 --> 00:37:48,560
known security vulnerabilities these two

1112
00:37:48,560 --> 00:37:50,160
here again do similar they do a rather

1113
00:37:50,160 --> 00:37:52,560
more uh complete version they need a

1114
00:37:52,560 --> 00:37:54,480
similar idea they essentially set you up

1115
00:37:54,480 --> 00:37:56,160
with a vulnerable cluster and give you

1116
00:37:56,160 --> 00:37:58,480
some challenges in in breaking out and

1117
00:37:58,480 --> 00:38:00,320
it's quite good for getting practice in

1118
00:38:00,320 --> 00:38:02,240
in using the tools and then like working

1119
00:38:02,240 --> 00:38:03,839
out exactly the details of how

1120
00:38:03,839 --> 00:38:05,280
kubernetes works

1121
00:38:05,280 --> 00:38:07,359
there's also a great free uh training

1122
00:38:07,359 --> 00:38:09,280
for maddu uh here there's a full

1123
00:38:09,280 --> 00:38:10,880
training course there a great place to

1124
00:38:10,880 --> 00:38:12,800
go and look uh a great resource that you

1125
00:38:12,800 --> 00:38:14,880
put online there

1126
00:38:14,880 --> 00:38:16,400
and that's another way of getting access

1127
00:38:16,400 --> 00:38:18,000
to sort of information about taking this

1128
00:38:18,000 --> 00:38:19,119
further you know if you've kind of

1129
00:38:19,119 --> 00:38:21,119
watched this presentation and thought i

1130
00:38:21,119 --> 00:38:22,720
think this is a great idea

1131
00:38:22,720 --> 00:38:24,480
that's a good place to go i've also got

1132
00:38:24,480 --> 00:38:26,480
a little site here which i run

1133
00:38:26,480 --> 00:38:27,920
this just has some container security

1134
00:38:27,920 --> 00:38:29,359
resources there's a reading list on

1135
00:38:29,359 --> 00:38:31,599
there with far more books and articles

1136
00:38:31,599 --> 00:38:33,520
and things you can read about i also

1137
00:38:33,520 --> 00:38:36,240
maintain the list of cves or

1138
00:38:36,240 --> 00:38:38,320
containerization tools uh so just try to

1139
00:38:38,320 --> 00:38:39,520
keep that up to date with a central

1140
00:38:39,520 --> 00:38:40,640
place where you can go and look and say

1141
00:38:40,640 --> 00:38:42,640
what are the cvs you know what versions

1142
00:38:42,640 --> 00:38:44,400
are affected that kind of thing so

1143
00:38:44,400 --> 00:38:45,760
there's some information hopefully

1144
00:38:45,760 --> 00:38:48,079
useful there as well

1145
00:38:48,079 --> 00:38:50,960
so um that is the presentation i hope

1146
00:38:50,960 --> 00:38:52,640
that's been useful and interesting for

1147
00:38:52,640 --> 00:38:54,079
you and giving you an idea that you know

1148
00:38:54,079 --> 00:38:56,160
these container things are a lot of

1149
00:38:56,160 --> 00:38:57,839
existing tech you know if you're a linux

1150
00:38:57,839 --> 00:39:00,000
person or you're a web app web services

1151
00:39:00,000 --> 00:39:01,760
person you realize that actually this is

1152
00:39:01,760 --> 00:39:03,359
just reusing a lot of the stuff you

1153
00:39:03,359 --> 00:39:05,760
already know in a slightly different way

1154
00:39:05,760 --> 00:39:07,440
but there's quite a lot of kind of fun

1155
00:39:07,440 --> 00:39:09,119
edges to poke at with kubernetes and

1156
00:39:09,119 --> 00:39:10,560
docker they're still fairly young

1157
00:39:10,560 --> 00:39:12,720
technologies and if you're into bug

1158
00:39:12,720 --> 00:39:15,040
bounties they've got bug bounties um and

1159
00:39:15,040 --> 00:39:16,320
there's quite a lot of kind of things to

1160
00:39:16,320 --> 00:39:17,920
poke at and things to find i think it

1161
00:39:17,920 --> 00:39:19,760
still is quite a new area and we'll

1162
00:39:19,760 --> 00:39:21,440
probably see some more interesting

1163
00:39:21,440 --> 00:39:23,599
security things coming along as time

1164
00:39:23,599 --> 00:39:24,960
goes by

1165
00:39:24,960 --> 00:39:27,200
if you've got any follow-up questions um

1166
00:39:27,200 --> 00:39:29,200
please do feel free to reach out to me

1167
00:39:29,200 --> 00:39:31,680
on twitter that's my handle there

1168
00:39:31,680 --> 00:39:33,359
and then that is my email address if you

1169
00:39:33,359 --> 00:39:34,960
want to drop me an email i'm always

1170
00:39:34,960 --> 00:39:36,880
happy to try and answer questions uh

1171
00:39:36,880 --> 00:39:38,640
about container security if i don't know

1172
00:39:38,640 --> 00:39:40,160
the answer i'll try and point you in the

1173
00:39:40,160 --> 00:39:42,720
right direction i'm assuming i know it

1174
00:39:42,720 --> 00:39:43,599
so hopefully that's been a great

1175
00:39:43,599 --> 00:39:46,320
presentation i'm hoping you enjoy the

1176
00:39:46,320 --> 00:39:48,000
rest of your conference and have a great

1177
00:39:48,000 --> 00:39:51,000
day

