1
00:00:00,480 --> 00:00:02,720
hello everyone and thank you for tuning

2
00:00:02,720 --> 00:00:05,600
in to my talk uh so today i'm going to

3
00:00:05,600 --> 00:00:07,279
talk to you about the multi-pass open

4
00:00:07,279 --> 00:00:09,760
source hardware authentication ecosystem

5
00:00:09,760 --> 00:00:12,559
uh so my name is matthew stefan i'm an

6
00:00:12,559 --> 00:00:15,519
embedded systems engineer i used to

7
00:00:15,519 --> 00:00:17,760
write for hackaday.com for three or four

8
00:00:17,760 --> 00:00:19,439
years something like that

9
00:00:19,439 --> 00:00:21,439
i also have a website full of open

10
00:00:21,439 --> 00:00:24,400
source projects uh different ideas funky

11
00:00:24,400 --> 00:00:25,920
projects that work on during my spare

12
00:00:25,920 --> 00:00:27,840
time that you may want to visit

13
00:00:27,840 --> 00:00:29,840
and obviously i'm the multi-pass project

14
00:00:29,840 --> 00:00:30,800
funder

15
00:00:30,800 --> 00:00:32,880
so what is the multi-pass ecosystem the

16
00:00:32,880 --> 00:00:34,960
multi-pass ecosystem

17
00:00:34,960 --> 00:00:36,079
is

18
00:00:36,079 --> 00:00:38,559
a complete ecosystem based around one or

19
00:00:38,559 --> 00:00:40,559
multiple hardware devices it allows you

20
00:00:40,559 --> 00:00:42,559
to store credentials logins and

21
00:00:42,559 --> 00:00:45,680
passwords nodes and small files

22
00:00:45,680 --> 00:00:47,520
it also allows to allows you to

23
00:00:47,520 --> 00:00:49,600
authenticate using ssh or web

24
00:00:49,600 --> 00:00:52,960
authentication also known as fido 2.

25
00:00:52,960 --> 00:00:55,039
it offers the device itself for first

26
00:00:55,039 --> 00:00:58,480
time-based one-time passwords

27
00:00:58,480 --> 00:01:01,039
it's the device supports multiple users

28
00:01:01,039 --> 00:01:03,600
so not only multiple users can use one

29
00:01:03,600 --> 00:01:06,320
device but also one the one user can use

30
00:01:06,320 --> 00:01:08,240
multiple devices

31
00:01:08,240 --> 00:01:10,640
we have a whole bunch of com

32
00:01:10,640 --> 00:01:13,680
completes open source cross-platform

33
00:01:13,680 --> 00:01:15,920
tools for windows linux

34
00:01:15,920 --> 00:01:18,880
mac os and we also offer native browser

35
00:01:18,880 --> 00:01:20,720
integration what i mean by this is that

36
00:01:20,720 --> 00:01:22,400
basically you can just

37
00:01:22,400 --> 00:01:24,400
go to any website and whenever you need

38
00:01:24,400 --> 00:01:26,000
to authenticate the device will prompt

39
00:01:26,000 --> 00:01:27,680
you you just need to approve on this on

40
00:01:27,680 --> 00:01:30,400
the clickable thumbwheel and you will be

41
00:01:30,400 --> 00:01:32,560
seamlessly logged in we are completely

42
00:01:32,560 --> 00:01:35,280
open source software and open source

43
00:01:35,280 --> 00:01:36,960
hardware

44
00:01:36,960 --> 00:01:38,079
so

45
00:01:38,079 --> 00:01:39,759
as i said open source hardware pencils

46
00:01:39,759 --> 00:01:41,200
hardware we have a whole bunch of

47
00:01:41,200 --> 00:01:43,040
contributors located all over all over

48
00:01:43,040 --> 00:01:45,759
the globe uh here you can see a map of

49
00:01:45,759 --> 00:01:48,640
the different contributors uh like i'm

50
00:01:48,640 --> 00:01:50,799
quite happy to see that evenly spread

51
00:01:50,799 --> 00:01:52,799
it's quite nice

52
00:01:52,799 --> 00:01:55,360
motivates ecosystem so here like i'm

53
00:01:55,360 --> 00:01:56,479
going to go

54
00:01:56,479 --> 00:01:58,719
through each uh issue of them so the

55
00:01:58,719 --> 00:02:01,360
device itself can communicate over usb

56
00:02:01,360 --> 00:02:04,240
or bluetooth on the usb and bluetooth

57
00:02:04,240 --> 00:02:06,799
communication channels we offer

58
00:02:06,799 --> 00:02:10,560
the hid protocol which is a big way to

59
00:02:10,560 --> 00:02:13,760
search we are just sending 64 bytes

60
00:02:13,760 --> 00:02:15,680
every millisecond

61
00:02:15,680 --> 00:02:18,080
that we are using to transfer data so

62
00:02:18,080 --> 00:02:20,800
the device itself can actually

63
00:02:20,800 --> 00:02:22,720
type plugins and password for you so

64
00:02:22,720 --> 00:02:25,599
it's detected as an external keyboard

65
00:02:25,599 --> 00:02:27,520
on like any

66
00:02:27,520 --> 00:02:30,080
computer smartphone ipad or whatever

67
00:02:30,080 --> 00:02:32,319
so it will type the different keys for

68
00:02:32,319 --> 00:02:34,000
in case you want to type a login or

69
00:02:34,000 --> 00:02:35,120
password

70
00:02:35,120 --> 00:02:36,640
it also has another another

71
00:02:36,640 --> 00:02:39,040
communication channel which is hid

72
00:02:39,040 --> 00:02:41,519
that we use to send the more complex

73
00:02:41,519 --> 00:02:43,280
data so typically if you want to manage

74
00:02:43,280 --> 00:02:45,920
your database or if you want to

75
00:02:45,920 --> 00:02:46,720
uh

76
00:02:46,720 --> 00:02:48,560
i don't know like

77
00:02:48,560 --> 00:02:50,720
perf change the device settings this

78
00:02:50,720 --> 00:02:52,720
goes through our proprietary hid

79
00:02:52,720 --> 00:02:54,560
communication channel

80
00:02:54,560 --> 00:02:57,120
so as i was mentioning before we have uh

81
00:02:57,120 --> 00:02:59,519
open source uh software open source

82
00:02:59,519 --> 00:03:00,879
applications

83
00:03:00,879 --> 00:03:02,959
that allows you to

84
00:03:02,959 --> 00:03:05,040
interface with the borders in case you

85
00:03:05,040 --> 00:03:08,239
want to authenticate on websites

86
00:03:08,239 --> 00:03:09,040
we

87
00:03:09,040 --> 00:03:11,120
ssh authentication through the demon as

88
00:03:11,120 --> 00:03:11,920
well

89
00:03:11,920 --> 00:03:13,920
and command line based tools we also

90
00:03:13,920 --> 00:03:16,239
have some software frameworks in case

91
00:03:16,239 --> 00:03:18,480
you want to script communication with

92
00:03:18,480 --> 00:03:19,760
the device

93
00:03:19,760 --> 00:03:21,840
and also we are currently working on

94
00:03:21,840 --> 00:03:23,760
some uh

95
00:03:23,760 --> 00:03:27,040
mobile applications for android and ios

96
00:03:27,040 --> 00:03:28,720
that allows you to

97
00:03:28,720 --> 00:03:31,440
make full use of the auto fill

98
00:03:31,440 --> 00:03:33,920
framework so that means that whenever

99
00:03:33,920 --> 00:03:36,720
you need to authenticate uh on your

100
00:03:36,720 --> 00:03:40,959
smartphone on an app or maybe on

101
00:03:40,959 --> 00:03:43,040
an app or on some

102
00:03:43,040 --> 00:03:44,560
application on the device itself then

103
00:03:44,560 --> 00:03:46,720
you can obviously see

104
00:03:46,720 --> 00:03:48,640
with this custom app you can actually

105
00:03:48,640 --> 00:03:50,799
directly use the device without having

106
00:03:50,799 --> 00:03:53,040
to use credential recall like by typing

107
00:03:53,040 --> 00:03:54,480
key presses

108
00:03:54,480 --> 00:03:57,439
so from pictures to blocks

109
00:03:57,439 --> 00:03:59,040
multi-pass hardware

110
00:03:59,040 --> 00:04:01,200
the the device that i mentioned the

111
00:04:01,200 --> 00:04:03,040
latest is the multi-pass minibili what

112
00:04:03,040 --> 00:04:04,879
is also very interesting to mention is

113
00:04:04,879 --> 00:04:08,000
that we have a device emulator so

114
00:04:08,000 --> 00:04:10,239
if you have windows or linux you can

115
00:04:10,239 --> 00:04:12,319
actually install our emulator and use

116
00:04:12,319 --> 00:04:14,640
our complete ecosystem without having a

117
00:04:14,640 --> 00:04:15,920
hardware device

118
00:04:15,920 --> 00:04:17,440
this is extremely neat because this

119
00:04:17,440 --> 00:04:19,839
allows you to test the the ecosystem

120
00:04:19,839 --> 00:04:22,479
without having the device all the

121
00:04:22,479 --> 00:04:24,639
we have some like a whole bunch of

122
00:04:24,639 --> 00:04:26,639
automated build scripts

123
00:04:26,639 --> 00:04:29,120
that takes the code from the device and

124
00:04:29,120 --> 00:04:30,960
bundles it into a software so actually

125
00:04:30,960 --> 00:04:32,800
on the on your computer you can have a

126
00:04:32,800 --> 00:04:34,800
multi-pass minibili up and running and

127
00:04:34,800 --> 00:04:36,560
already already tried to log into

128
00:04:36,560 --> 00:04:38,479
website using the hardware emulator it's

129
00:04:38,479 --> 00:04:40,400
extremely nice

130
00:04:40,400 --> 00:04:41,360
so

131
00:04:41,360 --> 00:04:43,040
multipass when you came to the demon to

132
00:04:43,040 --> 00:04:45,280
the command line tools companions ssh

133
00:04:45,280 --> 00:04:47,759
agents um so

134
00:04:47,759 --> 00:04:50,479
uh moving moving on i'm going to start

135
00:04:50,479 --> 00:04:52,400
talking about the multi-pass device the

136
00:04:52,400 --> 00:04:54,720
multi-pass hardware the multi-pass

137
00:04:54,720 --> 00:04:57,520
adventure started

138
00:04:57,520 --> 00:04:59,440
seven years ago

139
00:04:59,440 --> 00:05:02,320
it started on hacker days

140
00:05:02,320 --> 00:05:04,160
in 2014

141
00:05:04,160 --> 00:05:05,600
on the top left you can see the

142
00:05:05,600 --> 00:05:08,560
multipass standard which was mostly a

143
00:05:08,560 --> 00:05:11,360
bit big for for users but quite nice i'm

144
00:05:11,360 --> 00:05:14,479
still using one uh as a desktop solution

145
00:05:14,479 --> 00:05:16,479
multipass mini and on the bottom right

146
00:05:16,479 --> 00:05:18,320
the multipass mini ble

147
00:05:18,320 --> 00:05:22,320
as it stay as its name implies it offers

148
00:05:22,320 --> 00:05:23,360
bluetooth

149
00:05:23,360 --> 00:05:26,320
communications but also usb

150
00:05:26,320 --> 00:05:28,639
the devices are made in

151
00:05:28,639 --> 00:05:30,160
aluminium they're made to be tamper

152
00:05:30,160 --> 00:05:31,919
evidence so that means that our complete

153
00:05:31,919 --> 00:05:33,600
security model relies on the fact that

154
00:05:33,600 --> 00:05:35,680
if anyone wants to tamper with the

155
00:05:35,680 --> 00:05:37,840
device it will leave some trace of some

156
00:05:37,840 --> 00:05:40,000
sort so here you can see me trying to

157
00:05:40,000 --> 00:05:42,000
have fun at opening

158
00:05:42,000 --> 00:05:44,000
uh devices and see if actually this

159
00:05:44,000 --> 00:05:45,680
would leave a trace was actually quite

160
00:05:45,680 --> 00:05:47,280
fun

161
00:05:47,280 --> 00:05:51,199
and the latest model multibass mini bli

162
00:05:51,199 --> 00:05:53,360
we went a bit bananas we went a bit

163
00:05:53,360 --> 00:05:55,520
overboard in such what i mean by that is

164
00:05:55,520 --> 00:05:56,560
that we actually have two

165
00:05:56,560 --> 00:05:58,560
microcontrollers two physical

166
00:05:58,560 --> 00:05:59,919
microcontrollers

167
00:05:59,919 --> 00:06:03,199
on the device itself uh we have one that

168
00:06:03,199 --> 00:06:06,319
is solely dedicated to communicating

169
00:06:06,319 --> 00:06:08,080
with the outside world

170
00:06:08,080 --> 00:06:10,720
bottom part of the the screen here you

171
00:06:10,720 --> 00:06:11,680
have

172
00:06:11,680 --> 00:06:14,319
the auxiliary or unsafe microcontroller

173
00:06:14,319 --> 00:06:16,720
that is dedicated to communicating

174
00:06:16,720 --> 00:06:19,840
using usb or bluetooth

175
00:06:19,840 --> 00:06:22,319
as your as i'm sure you're aware like

176
00:06:22,319 --> 00:06:24,880
every two or three weeks there is a new

177
00:06:24,880 --> 00:06:26,639
flow that is discovered

178
00:06:26,639 --> 00:06:28,960
on some chipsets and stuff or stuff like

179
00:06:28,960 --> 00:06:31,440
that so basically here we went on the

180
00:06:31,440 --> 00:06:33,120
safeway and we decided that anything

181
00:06:33,120 --> 00:06:34,960
that deals with communication interfaces

182
00:06:34,960 --> 00:06:37,840
will we will reside in the unsafe

183
00:06:37,840 --> 00:06:40,000
microcontroller so like we went we

184
00:06:40,000 --> 00:06:41,199
really wanted to make sure that we were

185
00:06:41,199 --> 00:06:43,759
not taking any risks so the

186
00:06:43,759 --> 00:06:45,600
auxiliary microcontroller deals with the

187
00:06:45,600 --> 00:06:46,800
communication

188
00:06:46,800 --> 00:06:48,400
and then we have a main microcontroller

189
00:06:48,400 --> 00:06:50,080
secure microcontroller that deals with

190
00:06:50,080 --> 00:06:51,919
the rest with the file storage and

191
00:06:51,919 --> 00:06:54,240
device the graphics that you see here uh

192
00:06:54,240 --> 00:06:55,919
communication with the smart card we

193
00:06:55,919 --> 00:06:57,759
also have like a thumb wheel clickable

194
00:06:57,759 --> 00:07:00,639
thumbwheel interface uh for the user to

195
00:07:00,639 --> 00:07:02,639
interact with a device and an oled

196
00:07:02,639 --> 00:07:04,400
screen

197
00:07:04,400 --> 00:07:07,120
dual microcontroller

198
00:07:07,120 --> 00:07:08,960
the communication between the main

199
00:07:08,960 --> 00:07:10,400
microphone controller the main

200
00:07:10,400 --> 00:07:12,080
microcontroller and the auxiliary

201
00:07:12,080 --> 00:07:13,840
microcontroller is done using some

202
00:07:13,840 --> 00:07:17,199
old-school fixed frame uart link

203
00:07:17,199 --> 00:07:18,479
it's

204
00:07:18,479 --> 00:07:21,280
it's really simple to

205
00:07:21,280 --> 00:07:24,080
prevent adding unnecessary complexity

206
00:07:24,080 --> 00:07:26,240
all the complex libraries

207
00:07:26,240 --> 00:07:28,479
run on the auxiliary microcontroller and

208
00:07:28,479 --> 00:07:30,400
everything that runs on the main

209
00:07:30,400 --> 00:07:32,240
microcontroller is created from the

210
00:07:32,240 --> 00:07:35,120
ground up uh with us uh making sure also

211
00:07:35,120 --> 00:07:37,680
that with making sure there is no major

212
00:07:37,680 --> 00:07:38,639
flaws

213
00:07:38,639 --> 00:07:40,639
with different kinds of analysis and

214
00:07:40,639 --> 00:07:42,720
using open source to

215
00:07:42,720 --> 00:07:45,440
use uh the wisdom of the crowds

216
00:07:45,440 --> 00:07:48,720
uh data decryption uh flow so the second

217
00:07:48,720 --> 00:07:50,800
microcontroller basically is going to

218
00:07:50,800 --> 00:07:52,319
decrypt any

219
00:07:52,319 --> 00:07:54,639
data that is stored inside an external

220
00:07:54,639 --> 00:07:56,400
flash so the the

221
00:07:56,400 --> 00:08:00,000
to get the decryption key uh to perform

222
00:08:00,000 --> 00:08:02,400
the encryption function uh

223
00:08:02,400 --> 00:08:04,800
it is going to store that decryption key

224
00:08:04,800 --> 00:08:06,639
into a smart card so the smart card

225
00:08:06,639 --> 00:08:08,560
basically saw the ies encryption key the

226
00:08:08,560 --> 00:08:10,960
user enters the pin code uh using the

227
00:08:10,960 --> 00:08:12,879
thumb wheel to the second

228
00:08:12,879 --> 00:08:14,960
microcontroller the pin code is sent to

229
00:08:14,960 --> 00:08:16,800
the smart card

230
00:08:16,800 --> 00:08:17,599
if

231
00:08:17,599 --> 00:08:20,639
the pin is correct then the as key is

232
00:08:20,639 --> 00:08:22,720
retrieves from the smart card sent to

233
00:08:22,720 --> 00:08:24,720
the secure microcontroller and then

234
00:08:24,720 --> 00:08:27,039
whenever a credential some data needs to

235
00:08:27,039 --> 00:08:29,440
be accessed uh this goes through the

236
00:08:29,440 --> 00:08:32,080
auxiliary microcontroller

237
00:08:32,080 --> 00:08:34,640
microcontrollers are both microchip

238
00:08:34,640 --> 00:08:36,880
80 sandy 21

239
00:08:36,880 --> 00:08:39,039
they store the user profile data that

240
00:08:39,039 --> 00:08:40,399
means what i mean by that is that

241
00:08:40,399 --> 00:08:41,839
whenever you

242
00:08:41,839 --> 00:08:43,360
insert your own smart card that

243
00:08:43,360 --> 00:08:46,000
authenticates you uh the microcontroller

244
00:08:46,000 --> 00:08:47,519
needs to recognize it is used so there

245
00:08:47,519 --> 00:08:49,120
is some profile data that is stored

246
00:08:49,120 --> 00:08:50,480
internally inside the secure

247
00:08:50,480 --> 00:08:53,040
microcontroller and we also store unique

248
00:08:53,040 --> 00:08:55,040
encryption and signing keys

249
00:08:55,040 --> 00:08:58,720
so each device of each multiplex device

250
00:08:58,720 --> 00:09:01,760
has unique encryption keys this

251
00:09:01,760 --> 00:09:03,839
allows you

252
00:09:03,839 --> 00:09:07,120
this allows us to make sure that not one

253
00:09:07,120 --> 00:09:09,120
signing key

254
00:09:09,120 --> 00:09:11,760
can be used to compromise a complete

255
00:09:11,760 --> 00:09:14,160
fleet of devices

256
00:09:14,160 --> 00:09:17,200
so because so with that we guarantee

257
00:09:17,200 --> 00:09:18,560
that

258
00:09:18,560 --> 00:09:20,800
one not one critical

259
00:09:20,800 --> 00:09:22,480
point is going to affect the complete

260
00:09:22,480 --> 00:09:24,080
fleet of devices

261
00:09:24,080 --> 00:09:26,080
so that means that we need to generate

262
00:09:26,080 --> 00:09:28,959
unique uniquely signed firmware updates

263
00:09:28,959 --> 00:09:31,279
uh so you may wonder how are we

264
00:09:31,279 --> 00:09:33,040
generating all these encryption keys and

265
00:09:33,040 --> 00:09:35,200
storing them to each microcontroller

266
00:09:35,200 --> 00:09:37,519
well basically we are flashing the

267
00:09:37,519 --> 00:09:39,839
microcontrollers ourselves so we design

268
00:09:39,839 --> 00:09:42,720
a custom made programming jig

269
00:09:42,720 --> 00:09:44,399
and whenever we start a new mass

270
00:09:44,399 --> 00:09:47,120
production run we spent a few days doing

271
00:09:47,120 --> 00:09:48,880
a peak in place machine pressing buttons

272
00:09:48,880 --> 00:09:51,600
just to flash some uniquely generated

273
00:09:51,600 --> 00:09:54,399
encryption keys

274
00:09:54,720 --> 00:09:57,040
let's talk a bit more about the firmware

275
00:09:57,040 --> 00:09:59,839
features of our devices

276
00:09:59,839 --> 00:10:01,680
so everything is coded from the ground

277
00:10:01,680 --> 00:10:03,760
up except

278
00:10:03,760 --> 00:10:05,839
in cryptography routines you would never

279
00:10:05,839 --> 00:10:06,880
roll on

280
00:10:06,880 --> 00:10:08,000
you never

281
00:10:08,000 --> 00:10:10,800
create your own cryptography uh we're

282
00:10:10,800 --> 00:10:12,399
not pretending that we are good enough

283
00:10:12,399 --> 00:10:14,480
to to generate that so we are using the

284
00:10:14,480 --> 00:10:16,720
bears as a library uh we're using

285
00:10:16,720 --> 00:10:18,640
contour mode for encryption uh creator

286
00:10:18,640 --> 00:10:20,480
of the library is amazing provided

287
00:10:20,480 --> 00:10:21,920
amazing support to make sure that we

288
00:10:21,920 --> 00:10:23,839
didn't have like we were doing that we

289
00:10:23,839 --> 00:10:25,120
were supposed to

290
00:10:25,120 --> 00:10:28,959
we made sure that our routines used uh

291
00:10:28,959 --> 00:10:30,880
were correctly uh

292
00:10:30,880 --> 00:10:34,079
very correctly done using sc vector sets

293
00:10:34,079 --> 00:10:35,200
um

294
00:10:35,200 --> 00:10:36,560
all

295
00:10:36,560 --> 00:10:38,959
all the data you're storing all your

296
00:10:38,959 --> 00:10:42,320
logins password small files nodes uh

297
00:10:42,320 --> 00:10:44,560
they are stored in an external flash

298
00:10:44,560 --> 00:10:46,720
so there are two types of data some

299
00:10:46,720 --> 00:10:48,399
credentials web authentication and

300
00:10:48,399 --> 00:10:50,399
encrypted blobs which is small files and

301
00:10:50,399 --> 00:10:54,079
nodes uh for the device for them secure

302
00:10:54,079 --> 00:10:56,480
microcontroller uh to go through them we

303
00:10:56,480 --> 00:10:58,160
created our own linked list data

304
00:10:58,160 --> 00:11:00,800
structure we didn't want to

305
00:11:00,800 --> 00:11:03,200
use any library because of the overhead

306
00:11:03,200 --> 00:11:04,079
and

307
00:11:04,079 --> 00:11:05,279
we wanted to make sure we were as

308
00:11:05,279 --> 00:11:07,279
efficient as possible so basically we

309
00:11:07,279 --> 00:11:09,360
created our own

310
00:11:09,360 --> 00:11:10,560
read write

311
00:11:10,560 --> 00:11:14,000
linked list data structure

312
00:11:14,000 --> 00:11:16,399
that also means that we handle multiple

313
00:11:16,399 --> 00:11:17,760
devices uh

314
00:11:17,760 --> 00:11:20,880
multiple databases so one device can

315
00:11:20,880 --> 00:11:24,320
store up to uh one of the databases and

316
00:11:24,320 --> 00:11:26,480
uh so that means that 100 users can

317
00:11:26,480 --> 00:11:28,399
actually use one given device

318
00:11:28,399 --> 00:11:30,240
so your complete family

319
00:11:30,240 --> 00:11:31,600
press colleagues whatever could use one

320
00:11:31,600 --> 00:11:33,760
single device and use it to authenticate

321
00:11:33,760 --> 00:11:35,920
to different services

322
00:11:35,920 --> 00:11:38,320
uh smart card is just a read protecting

323
00:11:38,320 --> 00:11:40,000
memory we are currently in the process

324
00:11:40,000 --> 00:11:43,600
of migrating to a new to a newer model

325
00:11:43,600 --> 00:11:45,600
so basically you present the pin if the

326
00:11:45,600 --> 00:11:47,519
pin is correct then you can access the

327
00:11:47,519 --> 00:11:49,519
uh the secure storage

328
00:11:49,519 --> 00:11:53,360
uh if you present an erroneous pin four

329
00:11:53,360 --> 00:11:54,800
times in a row

330
00:11:54,800 --> 00:11:57,040
then the card locks itself

331
00:11:57,040 --> 00:11:58,399
so you may wonder what happens if you

332
00:11:58,399 --> 00:12:00,959
use a smart card uh well actually on the

333
00:12:00,959 --> 00:12:04,399
device itself we offer the possibility

334
00:12:04,399 --> 00:12:06,880
to clone your smart card so every device

335
00:12:06,880 --> 00:12:08,639
is shipped with two smart cards so in

336
00:12:08,639 --> 00:12:10,480
case you lose one smart card you can

337
00:12:10,480 --> 00:12:12,399
still use the other to authenticate and

338
00:12:12,399 --> 00:12:13,200
to

339
00:12:13,200 --> 00:12:14,639
decrypt your complete clearance from the

340
00:12:14,639 --> 00:12:16,320
database it's fairly cheap

341
00:12:16,320 --> 00:12:18,320
and it's very convenient

342
00:12:18,320 --> 00:12:20,639
uh random number generator we are using

343
00:12:20,639 --> 00:12:23,200
uh the on-board accelerometer

344
00:12:23,200 --> 00:12:25,519
so each the accelerometer provides three

345
00:12:25,519 --> 00:12:27,839
16 bits output words and basically the

346
00:12:27,839 --> 00:12:31,279
last four uh least significant bits are

347
00:12:31,279 --> 00:12:34,399
basically like uh can't be they do not

348
00:12:34,399 --> 00:12:36,320
represent anything so of the four we're

349
00:12:36,320 --> 00:12:37,360
using the

350
00:12:37,360 --> 00:12:40,240
the last two as a source of generating

351
00:12:40,240 --> 00:12:42,480
random numbers uh we checked that

352
00:12:42,480 --> 00:12:43,920
actually that was valid using the

353
00:12:43,920 --> 00:12:46,000
hardware test and all the other tests

354
00:12:46,000 --> 00:12:48,399
and it seems it's good enough so it's

355
00:12:48,399 --> 00:12:50,480
fairly happy with this

356
00:12:50,480 --> 00:12:53,760
uh usb uh so usb and bluetooth

357
00:12:53,760 --> 00:12:55,839
communication channels uh we are using

358
00:12:55,839 --> 00:12:58,800
hid protocol as i said it's basically 64

359
00:12:58,800 --> 00:13:01,120
bytes and every millisecond one is the

360
00:13:01,120 --> 00:13:03,839
keyboard so that means that uh as the

361
00:13:03,839 --> 00:13:05,519
device is detected as an external

362
00:13:05,519 --> 00:13:07,440
keyboard it will

363
00:13:07,440 --> 00:13:09,040
send bytes of data that represent

364
00:13:09,040 --> 00:13:10,880
characters i'll get back to this later

365
00:13:10,880 --> 00:13:13,760
so it can type anything to any device

366
00:13:13,760 --> 00:13:15,200
and any applications found in it and

367
00:13:15,200 --> 00:13:16,959
there is the property one which is

368
00:13:16,959 --> 00:13:19,360
basically the thing that allows us to

369
00:13:19,360 --> 00:13:21,920
provide native integration uh into

370
00:13:21,920 --> 00:13:23,760
websites native credential recall and

371
00:13:23,760 --> 00:13:25,279
stuff like that

372
00:13:25,279 --> 00:13:28,240
uh minor credential recall so here i'm

373
00:13:28,240 --> 00:13:30,079
going to go a bit deeper in the details

374
00:13:30,079 --> 00:13:31,920
of how the the keyboard protocol works

375
00:13:31,920 --> 00:13:33,279
so basically

376
00:13:33,279 --> 00:13:35,680
when you have when your your keyboard at

377
00:13:35,680 --> 00:13:38,240
home it doesn't send characters to your

378
00:13:38,240 --> 00:13:40,560
computer it sends some bytes

379
00:13:40,560 --> 00:13:42,959
these bytes so the bytes to character

380
00:13:42,959 --> 00:13:45,360
translation is done by operating system

381
00:13:45,360 --> 00:13:46,959
this is your layout so on your on your

382
00:13:46,959 --> 00:13:48,880
operating system you can select okay my

383
00:13:48,880 --> 00:13:51,440
keyboard is actually french or it is uh

384
00:13:51,440 --> 00:13:53,519
english or whatever so that means that

385
00:13:53,519 --> 00:13:56,160
the computer itself whenever it sees the

386
00:13:56,160 --> 00:13:58,079
byte i don't know 32

387
00:13:58,079 --> 00:14:01,199
it will translate it into a or b

388
00:14:01,199 --> 00:14:03,199
so that means the device itself needs to

389
00:14:03,199 --> 00:14:05,519
know which byte to send for each

390
00:14:05,519 --> 00:14:08,160
character based on each layout so that

391
00:14:08,160 --> 00:14:10,000
was quite fun to implement

392
00:14:10,000 --> 00:14:11,040
so we

393
00:14:11,040 --> 00:14:13,279
passed the unicode command local data

394
00:14:13,279 --> 00:14:16,079
repository as a big zip valve a big

395
00:14:16,079 --> 00:14:17,120
z-file

396
00:14:17,120 --> 00:14:18,639
full of files for each layout and all

397
00:14:18,639 --> 00:14:21,199
that and we are basically passing uh all

398
00:14:21,199 --> 00:14:23,120
of these files in order to

399
00:14:23,120 --> 00:14:24,720
know which byte we need to send to the

400
00:14:24,720 --> 00:14:27,040
computer to type any uh login or

401
00:14:27,040 --> 00:14:29,519
password is quite fun

402
00:14:29,519 --> 00:14:32,320
web authentication that was solely added

403
00:14:32,320 --> 00:14:35,040
by one single contributor

404
00:14:35,040 --> 00:14:37,040
this is fairly neat this is essentially

405
00:14:37,040 --> 00:14:39,440
a way to authenticate by generating a

406
00:14:39,440 --> 00:14:41,360
public private key

407
00:14:41,360 --> 00:14:43,600
partnership it's also called feeder 2

408
00:14:43,600 --> 00:14:45,920
successor fido u2f

409
00:14:45,920 --> 00:14:47,440
website up adoption is slowly in

410
00:14:47,440 --> 00:14:50,240
progress um so we implemented basic

411
00:14:50,240 --> 00:14:52,720
support so feed or two

412
00:14:52,720 --> 00:14:56,000
it also has a whole bunch of like

413
00:14:56,000 --> 00:14:59,440
optional services that we are developing

414
00:14:59,440 --> 00:15:01,920
so if you are interested in contributing

415
00:15:01,920 --> 00:15:04,240
to in contributing to this to our

416
00:15:04,240 --> 00:15:06,880
ecosystem we could use some some help on

417
00:15:06,880 --> 00:15:10,399
adding the optional features of fido

418
00:15:10,399 --> 00:15:12,160
graphics library we have on the

419
00:15:12,160 --> 00:15:14,240
multipass mini ble i think we have like

420
00:15:14,240 --> 00:15:17,600
a total of 1 000 uh graphical files on

421
00:15:17,600 --> 00:15:19,440
this on the flash

422
00:15:19,440 --> 00:15:21,680
these are used to make the smooth

423
00:15:21,680 --> 00:15:24,399
animations you see here on top

424
00:15:24,399 --> 00:15:26,160
we designed it we designed that graphics

425
00:15:26,160 --> 00:15:27,839
library from the ground up optimized for

426
00:15:27,839 --> 00:15:30,639
speed we use one run length encoding

427
00:15:30,639 --> 00:15:32,959
compression for the bitmaps we support

428
00:15:32,959 --> 00:15:35,440
we support multiple fonts for them for

429
00:15:35,440 --> 00:15:37,519
the different languages

430
00:15:37,519 --> 00:15:39,120
and non-contiguous character blocks i

431
00:15:39,120 --> 00:15:41,120
would need to go a bit in detail to

432
00:15:41,120 --> 00:15:42,639
explain a bit more about this but let's

433
00:15:42,639 --> 00:15:43,759
skip it

434
00:15:43,759 --> 00:15:46,320
so we have a dedicated data storage

435
00:15:46,320 --> 00:15:49,040
flash whose only purpose is to store all

436
00:15:49,040 --> 00:15:50,720
the different things that previous

437
00:15:50,720 --> 00:15:52,240
previously mentioned

438
00:15:52,240 --> 00:15:55,360
the different bitmaps the hid keypresses

439
00:15:55,360 --> 00:15:58,240
uh two character lookup tables uh the

440
00:15:58,240 --> 00:16:00,079
different strings like you can actually

441
00:16:00,079 --> 00:16:02,160
change the device language on the device

442
00:16:02,160 --> 00:16:04,480
itself if you need the phone updates and

443
00:16:04,480 --> 00:16:07,120
all of this bundle is crc and cbc mac

444
00:16:07,120 --> 00:16:09,920
checked using the unique encryption key

445
00:16:09,920 --> 00:16:12,160
of each device

446
00:16:12,160 --> 00:16:14,880
other noteworthy features

447
00:16:14,880 --> 00:16:16,880
oops so let's keep that

448
00:16:16,880 --> 00:16:18,639
we as previously mentioned you can

449
00:16:18,639 --> 00:16:21,279
change language on the device you can

450
00:16:21,279 --> 00:16:23,040
also change the device behavior so when

451
00:16:23,040 --> 00:16:25,199
it comes to security we all have our

452
00:16:25,199 --> 00:16:26,720
preferences some people prefer to be

453
00:16:26,720 --> 00:16:28,399
prompted whenever there is something

454
00:16:28,399 --> 00:16:30,399
that needs to be performed at the device

455
00:16:30,399 --> 00:16:32,079
uh whenever you need to log in whenever

456
00:16:32,079 --> 00:16:34,639
you want to change login passwords like

457
00:16:34,639 --> 00:16:37,199
you may want to check what's happening

458
00:16:37,199 --> 00:16:38,000
so

459
00:16:38,000 --> 00:16:40,000
here we are offering basically the the

460
00:16:40,000 --> 00:16:42,639
option for the user to select his

461
00:16:42,639 --> 00:16:45,839
ease of use and security trade-off so

462
00:16:45,839 --> 00:16:47,279
either you choose to be prompted for

463
00:16:47,279 --> 00:16:49,519
everything or you basically trust the

464
00:16:49,519 --> 00:16:51,120
device and you let the device do

465
00:16:51,120 --> 00:16:53,279
everything that you need it to you need

466
00:16:53,279 --> 00:16:55,759
it to do so like here on the device you

467
00:16:55,759 --> 00:16:57,279
can choose this behavior what is shown

468
00:16:57,279 --> 00:16:59,519
on the bottom right of the screen uh you

469
00:16:59,519 --> 00:17:01,440
can on the device you can delete your

470
00:17:01,440 --> 00:17:03,680
profile create new ones create clone

471
00:17:03,680 --> 00:17:05,679
smart cards we have a whole bunch of

472
00:17:05,679 --> 00:17:07,119
different features change the pin code

473
00:17:07,119 --> 00:17:08,160
as well

474
00:17:08,160 --> 00:17:10,880
also one new thing that we offer

475
00:17:10,880 --> 00:17:13,679
we allow the tagging of different

476
00:17:13,679 --> 00:17:15,919
credentials with categories so let's say

477
00:17:15,919 --> 00:17:17,439
that you have a whole bunch of

478
00:17:17,439 --> 00:17:19,039
credentials when you use it at home and

479
00:17:19,039 --> 00:17:20,240
a whole bunch of credentials when you

480
00:17:20,240 --> 00:17:23,119
use that work so you can tag each uh

481
00:17:23,119 --> 00:17:25,679
credential with the right category in

482
00:17:25,679 --> 00:17:28,240
such a way that when you go to work you

483
00:17:28,240 --> 00:17:29,600
tell the device okay i'm at work so

484
00:17:29,600 --> 00:17:33,200
please only offer a credential recall of

485
00:17:33,200 --> 00:17:35,280
credentials that are tagged as work so

486
00:17:35,280 --> 00:17:36,799
that's actually fairly convenient to

487
00:17:36,799 --> 00:17:38,480
have a reduced database whenever you go

488
00:17:38,480 --> 00:17:40,160
to different environments

489
00:17:40,160 --> 00:17:43,120
uh we are using uh nickel metal hydride

490
00:17:43,120 --> 00:17:44,720
batteries because they have more charge

491
00:17:44,720 --> 00:17:47,039
industrial circles also safer and that

492
00:17:47,039 --> 00:17:48,720
also meant we had to implement our own

493
00:17:48,720 --> 00:17:51,039
state of charge algorithm which was very

494
00:17:51,039 --> 00:17:52,559
nice to implement

495
00:17:52,559 --> 00:17:54,000
on the software set of things so we

496
00:17:54,000 --> 00:17:55,440
talked about the device now we're going

497
00:17:55,440 --> 00:17:57,520
to talk about the software

498
00:17:57,520 --> 00:17:59,200
we're going to talk about multitude

499
00:17:59,200 --> 00:18:01,440
multitude this is a course platform

500
00:18:01,440 --> 00:18:05,919
windows linux mac os

501
00:18:06,080 --> 00:18:07,200
software

502
00:18:07,200 --> 00:18:10,559
that is based on lemon and a gui

503
00:18:10,559 --> 00:18:12,640
this allows you to completely change the

504
00:18:12,640 --> 00:18:14,559
different settings of your device as you

505
00:18:14,559 --> 00:18:16,240
can see here like you can change the

506
00:18:16,240 --> 00:18:19,039
inactivity timers the different

507
00:18:19,039 --> 00:18:21,120
the language the layouts like a whole

508
00:18:21,120 --> 00:18:22,880
bunch of settings you can change all of

509
00:18:22,880 --> 00:18:24,640
these we're actually asked by our

510
00:18:24,640 --> 00:18:26,640
customers like my people say i would

511
00:18:26,640 --> 00:18:28,400
like the device to do this and

512
00:18:28,400 --> 00:18:30,000
some of them actually contribute make

513
00:18:30,000 --> 00:18:32,240
you put a request and offer that feature

514
00:18:32,240 --> 00:18:34,640
uh and some and if we see that it makes

515
00:18:34,640 --> 00:18:36,080
sense we also implement it like we're

516
00:18:36,080 --> 00:18:38,320
really listening to the the the people

517
00:18:38,320 --> 00:18:40,640
who uh who want that device

518
00:18:40,640 --> 00:18:43,760
uh we also have a credential uh

519
00:18:43,760 --> 00:18:45,600
management mode uh where you can

520
00:18:45,600 --> 00:18:47,600
visualize your device database here you

521
00:18:47,600 --> 00:18:50,160
can see so this is uh taken using our

522
00:18:50,160 --> 00:18:51,280
emulator

523
00:18:51,280 --> 00:18:52,640
like here you can visualize the

524
00:18:52,640 --> 00:18:53,520
different

525
00:18:53,520 --> 00:18:55,520
services on your website

526
00:18:55,520 --> 00:18:56,960
so different

527
00:18:56,960 --> 00:18:59,039
logins on each website

528
00:18:59,039 --> 00:19:00,320
here you can

529
00:19:00,320 --> 00:19:01,600
see the different categories the

530
00:19:01,600 --> 00:19:02,960
description against password and all

531
00:19:02,960 --> 00:19:04,480
that stuff so you can completely manage

532
00:19:04,480 --> 00:19:05,520
your

533
00:19:05,520 --> 00:19:08,720
device database with this one

534
00:19:08,720 --> 00:19:11,120
you can rename the categories

535
00:19:11,120 --> 00:19:14,400
uh we also note offer node storage so

536
00:19:14,400 --> 00:19:16,799
whenever you have like small

537
00:19:16,799 --> 00:19:19,760
sentences bitcoin recovery keys all the

538
00:19:19,760 --> 00:19:22,960
different like critical data you want to

539
00:19:22,960 --> 00:19:25,440
text base critical data you want to be

540
00:19:25,440 --> 00:19:27,919
stored and here on the on the multicast

541
00:19:27,919 --> 00:19:29,919
on the multi-grid software you can

542
00:19:29,919 --> 00:19:31,440
actually install you can actually store

543
00:19:31,440 --> 00:19:32,799
all of this

544
00:19:32,799 --> 00:19:35,200
we also offer storage of small files so

545
00:19:35,200 --> 00:19:36,960
small files what i mean by small files

546
00:19:36,960 --> 00:19:39,600
is like a few kilobytes of data uh it's

547
00:19:39,600 --> 00:19:42,160
not meant to store like large chunk of

548
00:19:42,160 --> 00:19:44,640
data it's simple stuff uh like we are

549
00:19:44,640 --> 00:19:45,919
renaming us

550
00:19:45,919 --> 00:19:49,440
at offering uh critical data storage not

551
00:19:49,440 --> 00:19:51,120
like for example also private keys we

552
00:19:51,120 --> 00:19:52,960
also offer this

553
00:19:52,960 --> 00:19:54,080
uh

554
00:19:54,080 --> 00:19:56,080
we also offer

555
00:19:56,080 --> 00:19:58,160
the software allows you to export and

556
00:19:58,160 --> 00:20:00,720
import databases from two uh different

557
00:20:00,720 --> 00:20:01,919
devices

558
00:20:01,919 --> 00:20:04,240
and also one neat thing is that it also

559
00:20:04,240 --> 00:20:06,320
allows you to monitor one given backup

560
00:20:06,320 --> 00:20:08,640
file so let's say that you have two

561
00:20:08,640 --> 00:20:11,120
devices uh one at home and one at work

562
00:20:11,120 --> 00:20:12,640
and you want to

563
00:20:12,640 --> 00:20:14,320
always maintain

564
00:20:14,320 --> 00:20:15,360
uh

565
00:20:15,360 --> 00:20:16,240
the

566
00:20:16,240 --> 00:20:18,159
uh you always always want to make sure

567
00:20:18,159 --> 00:20:20,000
that the database on each device is up

568
00:20:20,000 --> 00:20:21,360
to date so the way you would typically

569
00:20:21,360 --> 00:20:24,880
do this is that you would uh store your

570
00:20:24,880 --> 00:20:27,360
backup file into like a cloud storage

571
00:20:27,360 --> 00:20:28,559
service and all that so let's say

572
00:20:28,559 --> 00:20:30,640
dropbox whatever and you will tell

573
00:20:30,640 --> 00:20:32,559
multicute to monitor that file so that

574
00:20:32,559 --> 00:20:35,360
means whenever the whenever the

575
00:20:35,360 --> 00:20:38,559
database is contains more credentials

576
00:20:38,559 --> 00:20:41,520
then the the one on the device currently

577
00:20:41,520 --> 00:20:42,799
connected to your computer you will be

578
00:20:42,799 --> 00:20:45,840
prompted to update your device

579
00:20:45,840 --> 00:20:49,120
uh we also have an ssa agent

580
00:20:49,120 --> 00:20:51,200
command line interface and browser

581
00:20:51,200 --> 00:20:52,720
extension browser extensions we have

582
00:20:52,720 --> 00:20:55,360
chrome firefox opera edge safari

583
00:20:55,360 --> 00:20:58,480
uh this allows you to natively like to

584
00:20:58,480 --> 00:21:01,760
seamlessly log in into a new website you

585
00:21:01,760 --> 00:21:03,520
go to github.com

586
00:21:03,520 --> 00:21:06,080
the extension picks up the the

587
00:21:06,080 --> 00:21:07,679
credential request forwards it to

588
00:21:07,679 --> 00:21:10,720
multicute multi-cute as the device if it

589
00:21:10,720 --> 00:21:13,280
has any credentials and it will prompt

590
00:21:13,280 --> 00:21:14,000
you

591
00:21:14,000 --> 00:21:15,440
to approve the credential request and

592
00:21:15,440 --> 00:21:16,960
you will be seamlessly logged in just a

593
00:21:16,960 --> 00:21:19,840
click or if you choose uh the the device

594
00:21:19,840 --> 00:21:22,559
to be uh as in simple mode it will just

595
00:21:22,559 --> 00:21:24,320
notify you that you're currently being

596
00:21:24,320 --> 00:21:25,600
logged

597
00:21:25,600 --> 00:21:27,760
we have a command line tool

598
00:21:27,760 --> 00:21:29,919
returning go which also allows you to

599
00:21:29,919 --> 00:21:32,159
recall credentials

600
00:21:32,159 --> 00:21:34,559
we have an ssh agent written in go which

601
00:21:34,559 --> 00:21:36,400
is which retrieves the private keys from

602
00:21:36,400 --> 00:21:37,760
the device

603
00:21:37,760 --> 00:21:40,000
i would personally more recommend using

604
00:21:40,000 --> 00:21:41,840
fido 2 web authentication to

605
00:21:41,840 --> 00:21:44,559
authenticate to different servers

606
00:21:44,559 --> 00:21:46,559
since i don't know which version of opus

607
00:21:46,559 --> 00:21:49,520
open ssh is possible it's it works

608
00:21:49,520 --> 00:21:52,880
amazingly well i highly recommend it

609
00:21:52,880 --> 00:21:55,360
and we also have a python framework

610
00:21:55,360 --> 00:21:56,640
let's say you want to interface with

611
00:21:56,640 --> 00:21:58,640
other advice you want to script anything

612
00:21:58,640 --> 00:21:59,520
we

613
00:21:59,520 --> 00:22:00,400
have

614
00:22:00,400 --> 00:22:02,880
some files for you to get started in

615
00:22:02,880 --> 00:22:05,440
case you want to implement any anything

616
00:22:05,440 --> 00:22:07,520
uh usually typically when

617
00:22:07,520 --> 00:22:09,600
this also a good starting point for

618
00:22:09,600 --> 00:22:11,760
people who want to write

619
00:22:11,760 --> 00:22:14,080
i don't know some c based application

620
00:22:14,080 --> 00:22:15,120
because

621
00:22:15,120 --> 00:22:17,360
python is easy to read and you can

622
00:22:17,360 --> 00:22:20,080
understand from the source code what how

623
00:22:20,080 --> 00:22:22,240
it works we also have very nice wikis

624
00:22:22,240 --> 00:22:24,559
with the different details about the the

625
00:22:24,559 --> 00:22:26,880
protocol we selected

626
00:22:26,880 --> 00:22:29,760
uh we are looking for contributors uh we

627
00:22:29,760 --> 00:22:32,159
are spending quite a lot of time uh

628
00:22:32,159 --> 00:22:35,120
tagging the issues on github

629
00:22:35,120 --> 00:22:38,159
in order to make sure uh that alrighty

630
00:22:38,159 --> 00:22:40,159
flag for example we have enhancements

631
00:22:40,159 --> 00:22:42,159
requests we have new feature requests we

632
00:22:42,159 --> 00:22:43,360
have bugs and all that so basically we

633
00:22:43,360 --> 00:22:45,840
are tagging every issue uh to make sure

634
00:22:45,840 --> 00:22:47,919
that we have like a good uh like

635
00:22:47,919 --> 00:22:50,400
categorization of issues

636
00:22:50,400 --> 00:22:51,760
we are currently migrating to a new

637
00:22:51,760 --> 00:22:53,520
smart card as previously mentioned if

638
00:22:53,520 --> 00:22:54,880
you want to be part of this adventure

639
00:22:54,880 --> 00:22:56,559
please send me an email

640
00:22:56,559 --> 00:23:00,640
uh and we also uh making new apps for

641
00:23:00,640 --> 00:23:03,440
ios and android in order to offer native

642
00:23:03,440 --> 00:23:05,919
credential uh recalls and this is gonna

643
00:23:05,919 --> 00:23:07,520
be actually quite nice basically

644
00:23:07,520 --> 00:23:10,080
whenever we need to log in uh when you

645
00:23:10,080 --> 00:23:12,559
need to login into uh any app or any

646
00:23:12,559 --> 00:23:14,080
service on your phone

647
00:23:14,080 --> 00:23:16,400
the service will query the motivated

648
00:23:16,400 --> 00:23:18,640
device for credentials so we don't you

649
00:23:18,640 --> 00:23:21,600
will not need to use the device and tell

650
00:23:21,600 --> 00:23:23,520
it okay please type me my login and

651
00:23:23,520 --> 00:23:25,280
password for that service so this will

652
00:23:25,280 --> 00:23:26,240
be all

653
00:23:26,240 --> 00:23:28,080
all seamless i'm really looking forward

654
00:23:28,080 --> 00:23:30,399
to that

655
00:23:30,640 --> 00:23:32,480
so that's pretty much it for

656
00:23:32,480 --> 00:23:35,120
uh the talk if you have any question

657
00:23:35,120 --> 00:23:37,200
please you can contact me on rsc i'm

658
00:23:37,200 --> 00:23:39,440
always connected on rsc the library chat

659
00:23:39,440 --> 00:23:42,080
we also have an rsc channel which is

660
00:23:42,080 --> 00:23:43,679
multipass

661
00:23:43,679 --> 00:23:46,080
my email address can be seen here

662
00:23:46,080 --> 00:23:47,279
the main

663
00:23:47,279 --> 00:23:49,840
organization repository is github.com

664
00:23:49,840 --> 00:23:52,960
multipass in init you will find our

665
00:23:52,960 --> 00:23:56,159
application our firmwares uh a whole

666
00:23:56,159 --> 00:23:58,559
bunch of scripts uh really like we have

667
00:23:58,559 --> 00:24:00,960
a few uh things that you may be

668
00:24:00,960 --> 00:24:02,960
interested in checking out so if you

669
00:24:02,960 --> 00:24:04,880
have any question do not hesitate to ask

670
00:24:04,880 --> 00:24:07,120
me and also don't hesitate to reach me

671
00:24:07,120 --> 00:24:10,199
in private

