1
00:00:09,280 --> 00:00:10,800
hello everyone

2
00:00:10,800 --> 00:00:13,599
have you ever tried to reverse engineer

3
00:00:13,599 --> 00:00:15,759
an android application and then found

4
00:00:15,759 --> 00:00:18,160
only random letters for the classes

5
00:00:18,160 --> 00:00:20,640
variables and method names

6
00:00:20,640 --> 00:00:21,520
or

7
00:00:21,520 --> 00:00:22,880
try to put

8
00:00:22,880 --> 00:00:25,279
in the middle in an application but then

9
00:00:25,279 --> 00:00:28,560
your proxy didn't reach any request

10
00:00:28,560 --> 00:00:30,480
so that talk is for you

11
00:00:30,480 --> 00:00:34,719
let's talk about android pre-tests

12
00:00:35,200 --> 00:00:37,360
a brief introduction about me uh my name

13
00:00:37,360 --> 00:00:39,680
is anisio and i work as a infosec

14
00:00:39,680 --> 00:00:42,320
analyst at conviceus and you can also

15
00:00:42,320 --> 00:00:46,399
find me on twitter as xerox chips

16
00:00:46,399 --> 00:00:48,879
and i would like to start with a little

17
00:00:48,879 --> 00:00:50,960
story

18
00:00:50,960 --> 00:00:53,680
so long time ago i was starting to learn

19
00:00:53,680 --> 00:00:56,480
about mobile application security and

20
00:00:56,480 --> 00:00:58,480
trying to learn new thing every day

21
00:00:58,480 --> 00:01:01,359
trying to make some mobile ctfs but then

22
00:01:01,359 --> 00:01:03,760
i decided to play outside i decided that

23
00:01:03,760 --> 00:01:05,600
was the time to look at real

24
00:01:05,600 --> 00:01:07,760
applications and that's a problem

25
00:01:07,760 --> 00:01:10,000
because think about our application as a

26
00:01:10,000 --> 00:01:12,159
piece of code that a company delivers to

27
00:01:12,159 --> 00:01:14,320
the customer so they have to make sure

28
00:01:14,320 --> 00:01:16,479
that this piece of code have a kind of

29
00:01:16,479 --> 00:01:18,640
hardening so the life of anyone that

30
00:01:18,640 --> 00:01:20,799
tried to reverse engineer make static

31
00:01:20,799 --> 00:01:23,280
and dynamic analysis on it gonna be a

32
00:01:23,280 --> 00:01:25,040
little bit harder you know

33
00:01:25,040 --> 00:01:27,840
and that steps that we have to bypass

34
00:01:27,840 --> 00:01:29,920
before the real test

35
00:01:29,920 --> 00:01:32,240
is what we're gonna call here uh

36
00:01:32,240 --> 00:01:34,320
pre-test so

37
00:01:34,320 --> 00:01:36,960
let's do it

38
00:01:36,960 --> 00:01:39,680
and not so long ago

39
00:01:39,680 --> 00:01:42,000
decided to make a challenge

40
00:01:42,000 --> 00:01:44,799
so i will download a bunch of apps and

41
00:01:44,799 --> 00:01:46,560
see what kind of pre-tests that i can

42
00:01:46,560 --> 00:01:47,439
find

43
00:01:47,439 --> 00:01:48,399
so

44
00:01:48,399 --> 00:01:51,520
basically they go with that

45
00:01:51,520 --> 00:01:53,920
so just to be clear the goal isn't find

46
00:01:53,920 --> 00:01:57,040
vulnerabilities the goal here is uh try

47
00:01:57,040 --> 00:01:59,920
to set up the perfect lab so set the

48
00:01:59,920 --> 00:02:02,000
best lab that i can set on each

49
00:02:02,000 --> 00:02:04,560
application so

50
00:02:04,560 --> 00:02:07,119
be sure that i can read each request and

51
00:02:07,119 --> 00:02:09,758
response proper and read the code of the

52
00:02:09,758 --> 00:02:12,319
application and have a

53
00:02:12,319 --> 00:02:15,760
good environment for the test

54
00:02:17,680 --> 00:02:20,160
so starting to get my hands dirty i

55
00:02:20,160 --> 00:02:22,800
decided to download apps until the

56
00:02:22,800 --> 00:02:25,040
member of my device runs out

57
00:02:25,040 --> 00:02:25,840
and

58
00:02:25,840 --> 00:02:27,920
to analyze all of that application i

59
00:02:27,920 --> 00:02:30,640
made a script so i can get information

60
00:02:30,640 --> 00:02:33,519
like the technology and some other

61
00:02:33,519 --> 00:02:36,720
useful informations uh just looking of

62
00:02:36,720 --> 00:02:37,519
the

63
00:02:37,519 --> 00:02:40,879
just looking to the output of my script

64
00:02:40,879 --> 00:02:43,280
and don't have to open each uh

65
00:02:43,280 --> 00:02:46,560
decompiled application and see by myself

66
00:02:46,560 --> 00:02:49,120
and basically that's a part of this

67
00:02:49,120 --> 00:02:51,840
script i made it in python so here we

68
00:02:51,840 --> 00:02:53,760
have a

69
00:02:53,760 --> 00:02:54,720
a

70
00:02:54,720 --> 00:02:57,360
method that is reading the manifest file

71
00:02:57,360 --> 00:03:00,239
that's the one of the most important

72
00:03:00,239 --> 00:03:03,200
files in another application

73
00:03:03,200 --> 00:03:08,238
and here we can have we can see uh

74
00:03:08,319 --> 00:03:10,480
i'm checking the technology i'm checking

75
00:03:10,480 --> 00:03:12,720
for deep links and other strings on the

76
00:03:12,720 --> 00:03:14,879
android manifest file

77
00:03:14,879 --> 00:03:17,840
and the output of that script is

78
00:03:17,840 --> 00:03:19,440
something like this

79
00:03:19,440 --> 00:03:22,640
so in this file this output i have the

80
00:03:22,640 --> 00:03:25,200
package i have the technology that is

81
00:03:25,200 --> 00:03:27,920
really useful information for me uh at

82
00:03:27,920 --> 00:03:30,159
first sight and some other information

83
00:03:30,159 --> 00:03:33,200
like if the bug mode is available

84
00:03:33,200 --> 00:03:35,120
is enabled sorry

85
00:03:35,120 --> 00:03:37,680
and network configuration

86
00:03:37,680 --> 00:03:40,799
deep links and other stuffs so basically

87
00:03:40,799 --> 00:03:42,159
i i

88
00:03:42,159 --> 00:03:44,480
at first sight i don't have to look at

89
00:03:44,480 --> 00:03:46,959
each application the compiled i can

90
00:03:46,959 --> 00:03:48,000
choose

91
00:03:48,000 --> 00:03:50,319
from a technology sort the application

92
00:03:50,319 --> 00:03:52,560
and then start to look of each

93
00:03:52,560 --> 00:03:54,959
native application or each flutter

94
00:03:54,959 --> 00:03:57,439
application and

95
00:03:57,439 --> 00:03:59,280
before i

96
00:03:59,280 --> 00:04:01,680
really see the application i know what

97
00:04:01,680 --> 00:04:04,879
what kind of application it is

98
00:04:06,000 --> 00:04:08,720
so i decided to talk about 30 of the

99
00:04:08,720 --> 00:04:11,280
data applications that i downloaded and

100
00:04:11,280 --> 00:04:14,560
many of them was involving

101
00:04:14,560 --> 00:04:16,720
financial and ecommerce applications

102
00:04:16,720 --> 00:04:17,600
because

103
00:04:17,600 --> 00:04:20,160
uh these applications that

104
00:04:20,160 --> 00:04:23,280
that uses money usually have some kind

105
00:04:23,280 --> 00:04:25,520
of hardening to that you have to bypass

106
00:04:25,520 --> 00:04:26,800
before the test

107
00:04:26,800 --> 00:04:29,600
so and from the study applications

108
00:04:29,600 --> 00:04:32,720
uh 21 of them was native so it was a

109
00:04:32,720 --> 00:04:34,560
java or kotlin

110
00:04:34,560 --> 00:04:35,759
uh

111
00:04:35,759 --> 00:04:38,320
five of them was with filter that really

112
00:04:38,320 --> 00:04:39,919
was a surprise for me because i was

113
00:04:39,919 --> 00:04:41,680
expecting react to become the second

114
00:04:41,680 --> 00:04:44,479
place and then i saw and it was flutter

115
00:04:44,479 --> 00:04:46,960
and the in third with three applications

116
00:04:46,960 --> 00:04:49,199
we have react and

117
00:04:49,199 --> 00:04:51,280
at last we have cordova with only one

118
00:04:51,280 --> 00:04:53,840
application

119
00:04:54,880 --> 00:04:57,520
so start talking about uh

120
00:04:57,520 --> 00:04:59,680
the the real steps the real pre-test

121
00:04:59,680 --> 00:05:03,120
stuff uh we have obfuscation at first i

122
00:05:03,120 --> 00:05:05,120
have uh

123
00:05:05,120 --> 00:05:07,360
i have here a graph that so that says

124
00:05:07,360 --> 00:05:11,199
that 21 applications that was native uh

125
00:05:11,199 --> 00:05:14,320
14 of them also have a a kind of

126
00:05:14,320 --> 00:05:15,919
obfuscation

127
00:05:15,919 --> 00:05:20,080
so they was really prepared

128
00:05:20,080 --> 00:05:22,560
and just to make an example here i have

129
00:05:22,560 --> 00:05:25,600
a piece of code that i wrote so is the

130
00:05:25,600 --> 00:05:28,560
the real source code of that method and

131
00:05:28,560 --> 00:05:30,720
we can see that it's pretty readable you

132
00:05:30,720 --> 00:05:33,840
know the variables also have uh

133
00:05:33,840 --> 00:05:36,080
a long and name and

134
00:05:36,080 --> 00:05:39,039
we can easily read this code

135
00:05:39,039 --> 00:05:41,919
but if we pass this on proguard or any

136
00:05:41,919 --> 00:05:44,800
other tool to make an obfuscation we're

137
00:05:44,800 --> 00:05:47,039
gonna see that it is

138
00:05:47,039 --> 00:05:49,759
really hard to read now it's harder to

139
00:05:49,759 --> 00:05:52,800
read than it was before so

140
00:05:52,800 --> 00:05:55,520
now we have many variables that only

141
00:05:55,520 --> 00:05:57,360
have one letter and many methods they

142
00:05:57,360 --> 00:05:59,520
don't only have another two

143
00:05:59,520 --> 00:06:03,120
and we have like here the b dot a dot a

144
00:06:03,120 --> 00:06:06,560
dot a dot that's c method you know the

145
00:06:06,560 --> 00:06:10,160
looking just for that it's kind of crazy

146
00:06:10,160 --> 00:06:12,880
really at first sight you can

147
00:06:12,880 --> 00:06:14,639
make sure of of

148
00:06:14,639 --> 00:06:16,319
what kind it is

149
00:06:16,319 --> 00:06:19,520
what kind of of this method is doing

150
00:06:19,520 --> 00:06:20,720
so

151
00:06:20,720 --> 00:06:23,520
to help with that we have uh

152
00:06:23,520 --> 00:06:26,560
the jdx 2 with the well known 2 for the

153
00:06:26,560 --> 00:06:29,600
compile android applications and jdx

154
00:06:29,600 --> 00:06:32,479
also have a flag that call minus minus

155
00:06:32,479 --> 00:06:33,520
diop

156
00:06:33,520 --> 00:06:35,360
and with this flag

157
00:06:35,360 --> 00:06:37,039
we can

158
00:06:37,039 --> 00:06:38,800
have a minimum

159
00:06:38,800 --> 00:06:41,520
character for the variables classes and

160
00:06:41,520 --> 00:06:42,800
method names

161
00:06:42,800 --> 00:06:44,880
and each time the

162
00:06:44,880 --> 00:06:49,759
the the ddx c so sorry c

163
00:06:49,759 --> 00:06:53,360
variable method or class with less than

164
00:06:53,360 --> 00:06:56,319
x letters that in this case is three it

165
00:06:56,319 --> 00:06:59,199
will just

166
00:06:59,199 --> 00:07:03,039
make sure that it has a larger name so

167
00:07:03,039 --> 00:07:06,240
is way way way easier to read now

168
00:07:06,240 --> 00:07:09,440
because we don't have like b dot a dot a

169
00:07:09,440 --> 00:07:12,080
now we have a c something

170
00:07:12,080 --> 00:07:15,280
dot m something is kind of more readable

171
00:07:15,280 --> 00:07:17,759
now unfortunately with observation we

172
00:07:17,759 --> 00:07:20,000
don't have many many

173
00:07:20,000 --> 00:07:23,039
tools and and things to do

174
00:07:23,039 --> 00:07:26,720
the code is already compiled this way so

175
00:07:26,720 --> 00:07:27,599
we

176
00:07:27,599 --> 00:07:29,120
can only make

177
00:07:29,120 --> 00:07:31,039
some some like

178
00:07:31,039 --> 00:07:32,880
more easy to read

179
00:07:32,880 --> 00:07:35,599
and jdx usually helps with that with

180
00:07:35,599 --> 00:07:37,840
that

181
00:07:38,080 --> 00:07:43,120
so moving on to antihood detection is a

182
00:07:43,120 --> 00:07:44,479
well known

183
00:07:44,479 --> 00:07:45,440
uh

184
00:07:45,440 --> 00:07:47,039
feature two

185
00:07:47,039 --> 00:07:49,759
here we have uh uh application that only

186
00:07:49,759 --> 00:07:52,800
opens and then it detects that that is

187
00:07:52,800 --> 00:07:54,560
running on the rooted device and then

188
00:07:54,560 --> 00:07:57,599
just closes as you can see here

189
00:07:57,599 --> 00:08:01,039
these devices using magisk is a

190
00:08:01,039 --> 00:08:03,599
real device

191
00:08:03,599 --> 00:08:06,479
so talking about the 30 applications

192
00:08:06,479 --> 00:08:08,000
nine of them

193
00:08:08,000 --> 00:08:11,199
also have until detection and from those

194
00:08:11,199 --> 00:08:13,599
nine two of them was

195
00:08:13,599 --> 00:08:15,520
easily bypassable with

196
00:08:15,520 --> 00:08:17,199
uh well-known

197
00:08:17,199 --> 00:08:21,199
friday scripts and other tools

198
00:08:21,360 --> 00:08:24,319
so uh just to to put everybody in the

199
00:08:24,319 --> 00:08:27,280
same page i'm going to talk about

200
00:08:27,280 --> 00:08:29,520
many common ways to

201
00:08:29,520 --> 00:08:30,400
to

202
00:08:30,400 --> 00:08:31,360
see

203
00:08:31,360 --> 00:08:33,919
antihood detection on the wild and that

204
00:08:33,919 --> 00:08:36,080
first method is

205
00:08:36,080 --> 00:08:39,039
by seeing some files in the device so

206
00:08:39,039 --> 00:08:40,479
here is the

207
00:08:40,479 --> 00:08:42,399
uh is in the application the code of the

208
00:08:42,399 --> 00:08:43,519
application

209
00:08:43,519 --> 00:08:45,760
and we can see that this check for

210
00:08:45,760 --> 00:08:48,880
binary is checking for su machines q b z

211
00:08:48,880 --> 00:08:49,839
box

212
00:08:49,839 --> 00:08:51,920
so it is looking on the

213
00:08:51,920 --> 00:08:55,839
on the device and using these file.exist

214
00:08:55,839 --> 00:08:56,880
method

215
00:08:56,880 --> 00:09:00,240
to search for for each one of these uh

216
00:09:00,240 --> 00:09:01,680
binaries

217
00:09:01,680 --> 00:09:04,240
then login and returning true so

218
00:09:04,240 --> 00:09:06,480
through

219
00:09:06,480 --> 00:09:09,440
return to for the application that these

220
00:09:09,440 --> 00:09:10,320
uh

221
00:09:10,320 --> 00:09:14,320
this device have hood permission

222
00:09:14,320 --> 00:09:18,080
so to bypass it uh we have really good

223
00:09:18,080 --> 00:09:20,800
3d scripts on the wired so this is one

224
00:09:20,800 --> 00:09:22,640
of them well known

225
00:09:22,640 --> 00:09:25,440
so here we have a list of the

226
00:09:25,440 --> 00:09:26,800
[Music]

227
00:09:26,800 --> 00:09:29,839
binaries you can also add another if we

228
00:09:29,839 --> 00:09:30,880
want

229
00:09:30,880 --> 00:09:33,040
and we have an implementation of the

230
00:09:33,040 --> 00:09:36,640
axis function so it will detect when the

231
00:09:36,640 --> 00:09:38,560
application try to

232
00:09:38,560 --> 00:09:42,560
reach any of those binaries and if the

233
00:09:42,560 --> 00:09:44,880
application tries it will just

234
00:09:44,880 --> 00:09:46,720
uh console.log

235
00:09:46,720 --> 00:09:48,959
and then return files so

236
00:09:48,959 --> 00:09:51,040
this particular

237
00:09:51,040 --> 00:09:53,839
technique is bypassed by this way is a

238
00:09:53,839 --> 00:09:56,480
really good bypass

239
00:09:56,480 --> 00:09:59,600
and another technique that we can see

240
00:09:59,600 --> 00:10:01,600
with auntie hood is

241
00:10:01,600 --> 00:10:04,160
checking for commands so the application

242
00:10:04,160 --> 00:10:05,360
will try

243
00:10:05,360 --> 00:10:08,160
to execute some command in the device

244
00:10:08,160 --> 00:10:10,399
and it will do this

245
00:10:10,399 --> 00:10:12,480
with this method the runtime

246
00:10:12,480 --> 00:10:15,040
getruntime.accept

247
00:10:15,040 --> 00:10:16,079
and then

248
00:10:16,079 --> 00:10:16,880
what

249
00:10:16,880 --> 00:10:18,560
it is trying to

250
00:10:18,560 --> 00:10:19,760
execute

251
00:10:19,760 --> 00:10:23,360
so here you execute assu and rea

252
00:10:23,360 --> 00:10:26,000
here the which xu

253
00:10:26,000 --> 00:10:28,079
su sorry

254
00:10:28,079 --> 00:10:30,839
and the same 3d script that we saw

255
00:10:30,839 --> 00:10:34,959
earlier also help with that technique

256
00:10:34,959 --> 00:10:36,560
so

257
00:10:36,560 --> 00:10:38,640
if we can see here

258
00:10:38,640 --> 00:10:41,680
it over here description will load

259
00:10:41,680 --> 00:10:44,480
many runtime exact methods

260
00:10:44,480 --> 00:10:45,600
and

261
00:10:45,600 --> 00:10:46,560
trying to

262
00:10:46,560 --> 00:10:49,200
to look uh which command the application

263
00:10:49,200 --> 00:10:52,320
is trying to run and if it detects the

264
00:10:52,320 --> 00:10:54,640
su command

265
00:10:54,640 --> 00:10:55,839
it will just

266
00:10:55,839 --> 00:10:59,040
change for a

267
00:10:59,040 --> 00:11:01,839
common that will will not execute like

268
00:11:01,839 --> 00:11:03,760
this giant string

269
00:11:03,760 --> 00:11:06,160
and then the application will

270
00:11:06,160 --> 00:11:08,480
fail to detect that it is running on the

271
00:11:08,480 --> 00:11:10,640
hooter device because the command will

272
00:11:10,640 --> 00:11:13,440
fail and it will think that the the

273
00:11:13,440 --> 00:11:14,880
command

274
00:11:14,880 --> 00:11:18,079
don't exist in the device

275
00:11:18,959 --> 00:11:21,600
so another technique that is that is

276
00:11:21,600 --> 00:11:24,320
well known uh is trying to look at the

277
00:11:24,320 --> 00:11:26,320
package on the device that the other

278
00:11:26,320 --> 00:11:28,160
applications that the device have

279
00:11:28,160 --> 00:11:29,279
installed

280
00:11:29,279 --> 00:11:30,880
so

281
00:11:30,880 --> 00:11:33,200
is many similar is

282
00:11:33,200 --> 00:11:34,720
similar that

283
00:11:34,720 --> 00:11:36,880
with the others that we saw so here we

284
00:11:36,880 --> 00:11:39,120
have a list of with the

285
00:11:39,120 --> 00:11:40,480
some

286
00:11:40,480 --> 00:11:42,640
package names and the application is

287
00:11:42,640 --> 00:11:44,000
trying to

288
00:11:44,000 --> 00:11:44,800
see

289
00:11:44,800 --> 00:11:47,200
using the package manager if the the

290
00:11:47,200 --> 00:11:48,240
device

291
00:11:48,240 --> 00:11:51,200
have one of that

292
00:11:51,200 --> 00:11:52,959
packages

293
00:11:52,959 --> 00:11:55,519
and the same 3d script that we are

294
00:11:55,519 --> 00:11:58,240
seeing also have an implementation for

295
00:11:58,240 --> 00:12:00,720
that that bypass

296
00:12:00,720 --> 00:12:03,920
we also have a list with the packages

297
00:12:03,920 --> 00:12:07,279
and then it overload this

298
00:12:07,279 --> 00:12:09,519
gets package in full method

299
00:12:09,519 --> 00:12:11,760
and try to see if the application is

300
00:12:11,760 --> 00:12:13,839
trying to reach a package

301
00:12:13,839 --> 00:12:16,480
that is on the list and if it is

302
00:12:16,480 --> 00:12:19,839
just uh change the p name here and then

303
00:12:19,839 --> 00:12:22,320
call the function normals but the

304
00:12:22,320 --> 00:12:23,680
package gonna

305
00:12:23,680 --> 00:12:26,880
gonna see gonna be this set dot package

306
00:12:26,880 --> 00:12:29,760
so the command will fail also

307
00:12:29,760 --> 00:12:31,760
and that's a really good implementation

308
00:12:31,760 --> 00:12:35,680
for that kind of bypass

309
00:12:37,279 --> 00:12:39,680
so another common uh

310
00:12:39,680 --> 00:12:40,959
technique

311
00:12:40,959 --> 00:12:43,600
that we can use to bypass

312
00:12:43,600 --> 00:12:46,399
android detect and chihuahua detection

313
00:12:46,399 --> 00:12:48,720
is main applications

314
00:12:48,720 --> 00:12:49,680
will

315
00:12:49,680 --> 00:12:51,600
detect that the application is running

316
00:12:51,600 --> 00:12:54,800
on the hooded device and then closes

317
00:12:54,800 --> 00:12:57,279
so if we can

318
00:12:57,279 --> 00:12:59,680
prevent the application from close

319
00:12:59,680 --> 00:13:01,800
like hooking the

320
00:13:01,800 --> 00:13:04,480
system.exit method

321
00:13:04,480 --> 00:13:07,920
maybe the application will run proper

322
00:13:07,920 --> 00:13:10,800
but many times when the application

323
00:13:10,800 --> 00:13:12,040
calls this

324
00:13:12,040 --> 00:13:14,320
system.exit method

325
00:13:14,320 --> 00:13:17,200
it will also cause uh

326
00:13:17,200 --> 00:13:18,079
throw

327
00:13:18,079 --> 00:13:20,880
through a new error so if you look

328
00:13:20,880 --> 00:13:24,079
closer these uh methods

329
00:13:24,079 --> 00:13:27,040
don't have any try catch to handle this

330
00:13:27,040 --> 00:13:30,160
error so even when we

331
00:13:30,160 --> 00:13:31,120
uh

332
00:13:31,120 --> 00:13:33,440
prevent the application from for this

333
00:13:33,440 --> 00:13:37,040
system exit the air will be thrown and

334
00:13:37,040 --> 00:13:40,800
then the application will close normally

335
00:13:40,800 --> 00:13:43,920
but if we look at this second example

336
00:13:43,920 --> 00:13:45,360
right here

337
00:13:45,360 --> 00:13:47,519
we can see that the only thing that is

338
00:13:47,519 --> 00:13:49,360
changing is

339
00:13:49,360 --> 00:13:52,320
detecting that is valid wrap and then

340
00:13:52,320 --> 00:13:54,079
calling that method

341
00:13:54,079 --> 00:13:55,470
i try to

342
00:13:55,470 --> 00:13:57,040
[Music]

343
00:13:57,040 --> 00:13:59,760
hook this method but i fail many times

344
00:13:59,760 --> 00:14:02,430
then i decide to maybe i can just

345
00:14:02,430 --> 00:14:03,600
[Music]

346
00:14:03,600 --> 00:14:06,000
stop the application here with the

347
00:14:06,000 --> 00:14:09,440
system exit and then calling uh that

348
00:14:09,440 --> 00:14:10,800
method

349
00:14:10,800 --> 00:14:13,760
by hand by using another tool and that's

350
00:14:13,760 --> 00:14:15,839
what i try to make like we're gonna try

351
00:14:15,839 --> 00:14:17,120
to

352
00:14:17,120 --> 00:14:20,160
put a try catch to handle this error and

353
00:14:20,160 --> 00:14:23,600
then call this method

354
00:14:23,600 --> 00:14:26,160
so using a free descript for it as i

355
00:14:26,160 --> 00:14:27,600
said as i said

356
00:14:27,600 --> 00:14:30,079
uh here we have uh

357
00:14:30,079 --> 00:14:33,519
the prevent execute uh exit for the

358
00:14:33,519 --> 00:14:36,160
application so we are just hooking the

359
00:14:36,160 --> 00:14:38,000
exit call

360
00:14:38,000 --> 00:14:38,959
and

361
00:14:38,959 --> 00:14:40,880
here we have uh

362
00:14:40,880 --> 00:14:41,839
uh

363
00:14:41,839 --> 00:14:44,880
trying to reach the class and run

364
00:14:44,880 --> 00:14:46,160
implementation

365
00:14:46,160 --> 00:14:49,680
but we can also reach the java.lang dot

366
00:14:49,680 --> 00:14:51,199
thread class

367
00:14:51,199 --> 00:14:53,199
and that same

368
00:14:53,199 --> 00:14:54,240
method

369
00:14:54,240 --> 00:14:58,880
and it will run proper um anytime

370
00:14:58,880 --> 00:15:00,639
so we are just

371
00:15:00,639 --> 00:15:03,519
putting the try catch here and when the

372
00:15:03,519 --> 00:15:04,720
error

373
00:15:04,720 --> 00:15:07,519
uh will be thrown on the application

374
00:15:07,519 --> 00:15:09,680
here it will just

375
00:15:09,680 --> 00:15:13,839
be handled by this catch

376
00:15:15,440 --> 00:15:16,639
so

377
00:15:16,639 --> 00:15:17,519
to

378
00:15:17,519 --> 00:15:19,680
continue the flux of the application we

379
00:15:19,680 --> 00:15:21,839
can use objection

380
00:15:21,839 --> 00:15:22,639
so

381
00:15:22,639 --> 00:15:26,160
looking for hip stances of the of some

382
00:15:26,160 --> 00:15:28,560
class on the objection we can find

383
00:15:28,560 --> 00:15:29,440
uh

384
00:15:29,440 --> 00:15:32,000
the hashcode in the class and we can

385
00:15:32,000 --> 00:15:35,199
also use that hashcode to call a method

386
00:15:35,199 --> 00:15:36,560
from that class

387
00:15:36,560 --> 00:15:37,279
so

388
00:15:37,279 --> 00:15:38,880
it's basically what we are doing here

389
00:15:38,880 --> 00:15:40,639
just searching on the heap and then

390
00:15:40,639 --> 00:15:44,160
executed as executing sorry

391
00:15:44,160 --> 00:15:47,600
a method from that class

392
00:15:48,000 --> 00:15:51,440
so i have a video here

393
00:15:52,839 --> 00:15:54,480
okay

394
00:15:54,480 --> 00:15:56,720
so here we have we have the objection

395
00:15:56,720 --> 00:15:59,199
and here we you have frida and here i

396
00:15:59,199 --> 00:16:01,519
have the 3d script as you can see here

397
00:16:01,519 --> 00:16:04,160
i'm using java link thread so running

398
00:16:04,160 --> 00:16:06,240
objection then running frida the

399
00:16:06,240 --> 00:16:08,480
application starts to run

400
00:16:08,480 --> 00:16:11,759
and now the prevent exit was called the

401
00:16:11,759 --> 00:16:13,680
exception what sketch

402
00:16:13,680 --> 00:16:16,399
and now i'm looking at the heap

403
00:16:16,399 --> 00:16:19,279
with objection

404
00:16:19,519 --> 00:16:22,480
i found the class that i'm looking

405
00:16:22,480 --> 00:16:24,800
and i would just call the method that i

406
00:16:24,800 --> 00:16:28,519
need from that class

407
00:16:39,120 --> 00:16:41,680
okay oh and as you can see here

408
00:16:41,680 --> 00:16:43,920
even with the blur the application

409
00:16:43,920 --> 00:16:47,279
starts to run proper and the hooked

410
00:16:47,279 --> 00:16:49,759
implementation was properly bypassed

411
00:16:49,759 --> 00:16:51,040
after i

412
00:16:51,040 --> 00:16:52,560
i

413
00:16:52,560 --> 00:16:55,759
has over with that way i saw that it the

414
00:16:55,759 --> 00:16:57,839
application have another method that we

415
00:16:57,839 --> 00:17:00,639
can also use free that you bypass this

416
00:17:00,639 --> 00:17:02,959
detection but i found

417
00:17:02,959 --> 00:17:04,319
that this

418
00:17:04,319 --> 00:17:07,599
implementation was quite funny to to

419
00:17:07,599 --> 00:17:08,400
make

420
00:17:08,400 --> 00:17:12,079
and i decided to talk about it anyway

421
00:17:13,599 --> 00:17:17,319
so moving on

422
00:17:19,839 --> 00:17:20,720
okay

423
00:17:20,720 --> 00:17:24,720
now let's talk about ssl penny

424
00:17:24,959 --> 00:17:25,919
so

425
00:17:25,919 --> 00:17:29,520
from the 30 applications 30 of them had

426
00:17:29,520 --> 00:17:32,400
some ssl pen implementation

427
00:17:32,400 --> 00:17:36,640
and from those 30 27 of them was easily

428
00:17:36,640 --> 00:17:38,880
bypassable so

429
00:17:38,880 --> 00:17:41,120
many well-known 3d scripts

430
00:17:41,120 --> 00:17:44,880
can also bypass this kind of ssl penny

431
00:17:44,880 --> 00:17:46,640
and that's because

432
00:17:46,640 --> 00:17:48,320
many application

433
00:17:48,320 --> 00:17:52,559
usually uses the okay http 3

434
00:17:52,559 --> 00:17:56,559
for handle this certificate pinning

435
00:17:56,559 --> 00:17:57,600
function

436
00:17:57,600 --> 00:17:59,280
so

437
00:17:59,280 --> 00:18:02,799
and as you can see here on the ok http 3

438
00:18:02,799 --> 00:18:04,880
we have a class called

439
00:18:04,880 --> 00:18:06,559
certificate pinning

440
00:18:06,559 --> 00:18:09,280
and pinner sorry and that class have a

441
00:18:09,280 --> 00:18:12,400
method called check and that method

442
00:18:12,400 --> 00:18:14,799
is the method that checks as the name

443
00:18:14,799 --> 00:18:16,080
says if the

444
00:18:16,080 --> 00:18:17,120
uh

445
00:18:17,120 --> 00:18:20,240
certificate that is in the communication

446
00:18:20,240 --> 00:18:22,240
is the right one

447
00:18:22,240 --> 00:18:26,480
and what many 3d scripts do as uh that

448
00:18:26,480 --> 00:18:28,559
that we are seeing here you can also

449
00:18:28,559 --> 00:18:30,720
find on friday code chair

450
00:18:30,720 --> 00:18:34,880
is uh bypass the ok http free and main

451
00:18:34,880 --> 00:18:37,440
implementation of them so here we have

452
00:18:37,440 --> 00:18:39,440
uh implementation that

453
00:18:39,440 --> 00:18:41,840
doesn't return anything here we have a

454
00:18:41,840 --> 00:18:44,160
return through also i returned through

455
00:18:44,160 --> 00:18:46,000
here so

456
00:18:46,000 --> 00:18:48,320
by looking at many implementations of

457
00:18:48,320 --> 00:18:51,919
http 3 and by passing the check method

458
00:18:51,919 --> 00:18:54,720
we can easily bypass the ssl penny on

459
00:18:54,720 --> 00:18:57,840
main applications even in non-native

460
00:18:57,840 --> 00:18:59,520
applications

461
00:18:59,520 --> 00:19:00,240
i

462
00:19:00,240 --> 00:19:02,559
faced many flutter applications that

463
00:19:02,559 --> 00:19:06,639
uses ok http 3 also

464
00:19:07,679 --> 00:19:09,840
so with this check

465
00:19:09,840 --> 00:19:12,960
with this implementation we can bypass

466
00:19:12,960 --> 00:19:14,720
this ssl penny

467
00:19:14,720 --> 00:19:16,880
but talking more about float versus

468
00:19:16,880 --> 00:19:18,640
opening

469
00:19:18,640 --> 00:19:19,760
can be

470
00:19:19,760 --> 00:19:23,039
harder sometimes and that post helps a

471
00:19:23,039 --> 00:19:26,240
lot with that so

472
00:19:26,480 --> 00:19:30,080
talking more about filters as opening

473
00:19:30,080 --> 00:19:33,600
flutter is made with dart and dart have

474
00:19:33,600 --> 00:19:34,880
these

475
00:19:34,880 --> 00:19:38,080
library that's http client and these

476
00:19:38,080 --> 00:19:41,360
library also have a frame proxy method

477
00:19:41,360 --> 00:19:43,360
and that method

478
00:19:43,360 --> 00:19:45,180
make sure that the application

479
00:19:45,180 --> 00:19:46,480
[Music]

480
00:19:46,480 --> 00:19:47,280
see

481
00:19:47,280 --> 00:19:50,320
sees if the device have a proxy so if

482
00:19:50,320 --> 00:19:51,600
you use

483
00:19:51,600 --> 00:19:56,000
the http client without this find proxy

484
00:19:56,000 --> 00:19:58,559
method call the application will

485
00:19:58,559 --> 00:20:01,600
ignore the proxies even the proxies

486
00:20:01,600 --> 00:20:03,520
cited on the device

487
00:20:03,520 --> 00:20:06,559
the the network so it will communicate

488
00:20:06,559 --> 00:20:08,480
directly with the server

489
00:20:08,480 --> 00:20:10,320
so that's the first step that we have to

490
00:20:10,320 --> 00:20:11,160
bypass to

491
00:20:11,160 --> 00:20:12,799
[Music]

492
00:20:12,799 --> 00:20:16,240
to proper implement uh bypass the ssl

493
00:20:16,240 --> 00:20:18,640
painting within floater applications so

494
00:20:18,640 --> 00:20:21,280
we need to make the application not

495
00:20:21,280 --> 00:20:22,640
aware of the

496
00:20:22,640 --> 00:20:24,799
proxy

497
00:20:24,799 --> 00:20:27,840
so to make that we can use

498
00:20:27,840 --> 00:20:29,679
flux proxy droid

499
00:20:29,679 --> 00:20:32,159
so it's application that you can install

500
00:20:32,159 --> 00:20:35,039
on a real device it will

501
00:20:35,039 --> 00:20:36,240
make a

502
00:20:36,240 --> 00:20:38,640
in that interface and

503
00:20:38,640 --> 00:20:40,559
and

504
00:20:40,559 --> 00:20:43,280
intercept the request for you any

505
00:20:43,280 --> 00:20:46,080
requests from the device

506
00:20:46,080 --> 00:20:51,280
and we can also use ip tables uh by hand

507
00:20:51,280 --> 00:20:53,039
by just putting

508
00:20:53,039 --> 00:20:57,280
this now output and it will

509
00:20:57,280 --> 00:21:00,559
redirect to the our proxy but we have to

510
00:21:00,559 --> 00:21:04,559
remember to put the burp uh in this

511
00:21:04,559 --> 00:21:07,760
invisible proxy support so

512
00:21:07,760 --> 00:21:08,720
these

513
00:21:08,720 --> 00:21:13,039
fit these implementation can proper work

514
00:21:13,039 --> 00:21:16,720
and if you are using a emulator device

515
00:21:16,720 --> 00:21:18,799
the emulator will have

516
00:21:18,799 --> 00:21:21,600
outside the device menu when where you

517
00:21:21,600 --> 00:21:26,320
can set the proxy here we have the

518
00:21:26,320 --> 00:21:27,840
android

519
00:21:27,840 --> 00:21:32,000
virtual device the avd emulator so

520
00:21:32,000 --> 00:21:33,919
here outside the device we have this

521
00:21:33,919 --> 00:21:37,039
menu that you can manual set the proxy

522
00:21:37,039 --> 00:21:39,440
and it will works just as for roxy the

523
00:21:39,440 --> 00:21:42,400
writing just as iptables and it will

524
00:21:42,400 --> 00:21:43,200
work

525
00:21:43,200 --> 00:21:45,840
really nice

526
00:21:46,400 --> 00:21:49,120
so after we bypass

527
00:21:49,120 --> 00:21:51,200
we implement that

528
00:21:51,200 --> 00:21:53,360
aware for the application that we have a

529
00:21:53,360 --> 00:21:54,640
proxy

530
00:21:54,640 --> 00:21:58,159
we can also we have to also

531
00:21:58,159 --> 00:22:00,880
resolve another stuff that is as we can

532
00:22:00,880 --> 00:22:05,280
see here in the issue from dart

533
00:22:05,280 --> 00:22:07,600
the windows and also the

534
00:22:07,600 --> 00:22:09,440
other versions like the android and

535
00:22:09,440 --> 00:22:10,240
other

536
00:22:10,240 --> 00:22:13,360
flutter technologies use uses uh

537
00:22:13,360 --> 00:22:14,480
compiled

538
00:22:14,480 --> 00:22:16,880
uh hood certificates so

539
00:22:16,880 --> 00:22:18,960
if you ignore the certificates in the

540
00:22:18,960 --> 00:22:20,480
device

541
00:22:20,480 --> 00:22:22,559
the application have his own certificate

542
00:22:22,559 --> 00:22:24,400
that it is looking

543
00:22:24,400 --> 00:22:26,880
so we have to bypass this

544
00:22:26,880 --> 00:22:28,080
by hand

545
00:22:28,080 --> 00:22:29,760
and

546
00:22:29,760 --> 00:22:31,120
dart and

547
00:22:31,120 --> 00:22:34,320
and flutter are also open source and

548
00:22:34,320 --> 00:22:35,280
looking

549
00:22:35,280 --> 00:22:38,400
at this uh library that is boring ssl is

550
00:22:38,400 --> 00:22:42,400
what dart uses to handle all these uh

551
00:22:42,400 --> 00:22:43,360
stuff

552
00:22:43,360 --> 00:22:46,679
we have this file that is ssl

553
00:22:46,679 --> 00:22:48,320
x09

554
00:22:48,320 --> 00:22:50,799
that have this method

555
00:22:50,799 --> 00:22:52,320
that

556
00:22:52,320 --> 00:22:55,120
we can proper hook with reader that

557
00:22:55,120 --> 00:22:56,400
method and

558
00:22:56,400 --> 00:22:58,960
change the output and we will bypass the

559
00:22:58,960 --> 00:23:01,679
ssl opening is a really good

560
00:23:01,679 --> 00:23:04,240
way to do that that as you can see on

561
00:23:04,240 --> 00:23:06,000
the text that i

562
00:23:06,000 --> 00:23:07,280
said before

563
00:23:07,280 --> 00:23:10,320
and using github you can use any other

564
00:23:10,320 --> 00:23:11,919
reverse engineer to

565
00:23:11,919 --> 00:23:13,600
well using github

566
00:23:13,600 --> 00:23:16,000
we can see the

567
00:23:16,000 --> 00:23:19,120
the calls the the strings

568
00:23:19,120 --> 00:23:22,080
from that file and looking at the xf we

569
00:23:22,080 --> 00:23:24,240
can see the some

570
00:23:24,240 --> 00:23:25,360
classes

571
00:23:25,360 --> 00:23:26,880
and

572
00:23:26,880 --> 00:23:28,960
search for that specific class that i

573
00:23:28,960 --> 00:23:31,840
saw that i showed earlier and

574
00:23:31,840 --> 00:23:34,720
get some bytes and with that bytes

575
00:23:34,720 --> 00:23:37,840
we can put it on a friday script so

576
00:23:37,840 --> 00:23:41,039
right here we have the the ssl painting

577
00:23:41,039 --> 00:23:41,840
uh

578
00:23:41,840 --> 00:23:43,039
bypass

579
00:23:43,039 --> 00:23:46,240
and here we have a method just to

580
00:23:46,240 --> 00:23:48,799
search the address and then call the

581
00:23:48,799 --> 00:23:50,640
the proper method

582
00:23:50,640 --> 00:23:54,480
as you can see here if we are using a

583
00:23:54,480 --> 00:23:57,760
arm device a real device we have to

584
00:23:57,760 --> 00:24:01,440
put this ad this ad sorry and if you we

585
00:24:01,440 --> 00:24:05,120
use a emulator device like with x86

586
00:24:05,120 --> 00:24:08,000
we did don't need it but here you put

587
00:24:08,000 --> 00:24:08,799
the

588
00:24:08,799 --> 00:24:12,240
bytes that you get from gydra and then

589
00:24:12,240 --> 00:24:14,159
this

590
00:24:14,159 --> 00:24:16,720
implementation will work proper as you

591
00:24:16,720 --> 00:24:20,320
can see here on this video

592
00:24:24,159 --> 00:24:26,480
so here i have an application that

593
00:24:26,480 --> 00:24:29,600
uses flutter and this

594
00:24:29,600 --> 00:24:32,400
this implementation so i'm just putting

595
00:24:32,400 --> 00:24:35,360
login information and trying to see

596
00:24:35,360 --> 00:24:37,840
the request my verb that is setting

597
00:24:37,840 --> 00:24:39,520
right now

598
00:24:39,520 --> 00:24:42,559
so i'm just writing

599
00:24:42,559 --> 00:24:45,360
and the application runs normal nothing

600
00:24:45,360 --> 00:24:48,640
number nothing on on dashboard nothing

601
00:24:48,640 --> 00:24:51,039
nothing

602
00:24:51,440 --> 00:24:57,080
have you just put the proxy droid now

603
00:25:01,760 --> 00:25:03,279
i have to put the

604
00:25:03,279 --> 00:25:04,559
host

605
00:25:04,559 --> 00:25:05,760
give the

606
00:25:05,760 --> 00:25:08,240
super mission put the host and then the

607
00:25:08,240 --> 00:25:09,200
port

608
00:25:09,200 --> 00:25:13,880
and then start the proxy drive

609
00:25:33,279 --> 00:25:34,240
so

610
00:25:34,240 --> 00:25:36,480
now that i started the proxy droid as

611
00:25:36,480 --> 00:25:38,960
you can see if i try to make a request

612
00:25:38,960 --> 00:25:39,760
for

613
00:25:39,760 --> 00:25:43,200
from the application the dashboard menu

614
00:25:43,200 --> 00:25:45,360
on the verb will

615
00:25:45,360 --> 00:25:48,000
notify an another arrow

616
00:25:48,000 --> 00:25:49,840
the hemisphere terminated the handshake

617
00:25:49,840 --> 00:25:52,400
that's the error that we are trying to

618
00:25:52,400 --> 00:25:54,159
uh to have

619
00:25:54,159 --> 00:25:56,159
so now the application is reaching the

620
00:25:56,159 --> 00:25:57,039
perp

621
00:25:57,039 --> 00:25:59,360
and now using githu i will search for

622
00:25:59,360 --> 00:26:00,640
the

623
00:26:00,640 --> 00:26:02,720
for any uh

624
00:26:02,720 --> 00:26:04,159
string with the

625
00:26:04,159 --> 00:26:05,279
name of the

626
00:26:05,279 --> 00:26:07,039
file that we saw earlier

627
00:26:07,039 --> 00:26:08,400
that's x

628
00:26:08,400 --> 00:26:12,240
0 five zero nine

629
00:26:13,520 --> 00:26:15,600
and looking the strings we have these x

630
00:26:15,600 --> 00:26:18,000
haves now i will try to search the

631
00:26:18,000 --> 00:26:20,000
correct

632
00:26:20,000 --> 00:26:22,400
function

633
00:26:23,279 --> 00:26:25,840
that we saw

634
00:26:28,240 --> 00:26:29,840
so it's not that

635
00:26:29,840 --> 00:26:33,440
i just try more one more time and it's

636
00:26:33,440 --> 00:26:36,080
that function

637
00:26:36,240 --> 00:26:38,240
as you can see here like two wins and

638
00:26:38,240 --> 00:26:41,679
one undefined if it is x36 will be two

639
00:26:41,679 --> 00:26:43,840
longs and one and you find it

640
00:26:43,840 --> 00:26:46,400
and now you get the first bytes

641
00:26:46,400 --> 00:26:49,799
of that function

642
00:26:52,159 --> 00:26:54,720
just to have a

643
00:26:54,720 --> 00:26:56,240
a unique bytes

644
00:26:56,240 --> 00:26:59,200
and then you put this on 3d script here

645
00:26:59,200 --> 00:27:00,880
as i saw earlier

646
00:27:00,880 --> 00:27:03,360
i also have here the add

647
00:27:03,360 --> 00:27:05,039
to the address

648
00:27:05,039 --> 00:27:08,960
now i will run the 3d script

649
00:27:08,960 --> 00:27:11,039
and the application will be

650
00:27:11,039 --> 00:27:14,880
started again i found the address

651
00:27:14,880 --> 00:27:18,720
now you try to make a request

652
00:27:19,679 --> 00:27:22,640
here put on burp

653
00:27:22,640 --> 00:27:24,159
okay

654
00:27:24,159 --> 00:27:26,960
make a request

655
00:27:32,399 --> 00:27:35,279
and as you can see here now we have one

656
00:27:35,279 --> 00:27:38,000
request and also have a request in

657
00:27:38,000 --> 00:27:39,120
intercept

658
00:27:39,120 --> 00:27:40,000
so

659
00:27:40,000 --> 00:27:42,000
as you can see the

660
00:27:42,000 --> 00:27:44,960
ssl pinning from clutter was a proper

661
00:27:44,960 --> 00:27:48,919
bypassed oh sorry

662
00:28:00,960 --> 00:28:04,960
talking about body encoding now

663
00:28:07,440 --> 00:28:10,000
so from those study applications four of

664
00:28:10,000 --> 00:28:13,360
them had body encoding that was also a

665
00:28:13,360 --> 00:28:15,840
surprise for me i was expecting less to

666
00:28:15,840 --> 00:28:18,399
be honest

667
00:28:19,600 --> 00:28:21,360
so

668
00:28:21,360 --> 00:28:24,559
uh here we have an example like we can

669
00:28:24,559 --> 00:28:27,120
that that response is not human readable

670
00:28:27,120 --> 00:28:28,480
at first sight

671
00:28:28,480 --> 00:28:32,240
it it is kind of encrypted or something

672
00:28:32,240 --> 00:28:33,520
so

673
00:28:33,520 --> 00:28:34,799
sometimes

674
00:28:34,799 --> 00:28:37,520
we can use a well-known 3d scripts for

675
00:28:37,520 --> 00:28:38,640
that too

676
00:28:38,640 --> 00:28:42,000
uh that script for from secure f-secure

677
00:28:42,000 --> 00:28:45,360
labs that traces the cipher

678
00:28:45,360 --> 00:28:48,799
classes in the java crypto

679
00:28:48,799 --> 00:28:50,320
we

680
00:28:50,320 --> 00:28:53,279
will many times work with that problem

681
00:28:53,279 --> 00:28:57,600
as we can see here so i have a

682
00:28:57,600 --> 00:29:00,240
response that's not uh human readable

683
00:29:00,240 --> 00:29:01,039
too

684
00:29:01,039 --> 00:29:03,760
but i'm using that through the script

685
00:29:03,760 --> 00:29:06,880
for intercept the

686
00:29:06,880 --> 00:29:08,320
the

687
00:29:08,320 --> 00:29:10,640
java crypto calls java crypto cipher

688
00:29:10,640 --> 00:29:11,520
calls

689
00:29:11,520 --> 00:29:14,559
and it it's returning that on the other

690
00:29:14,559 --> 00:29:17,840
string and that string is in base64

691
00:29:17,840 --> 00:29:21,279
and now i can use that base64 string to

692
00:29:21,279 --> 00:29:25,200
see the real response for the server so

693
00:29:25,200 --> 00:29:28,559
it will it won't work anytime it will

694
00:29:28,559 --> 00:29:30,640
not work anytime but

695
00:29:30,640 --> 00:29:33,440
uh many cases you can resolve just with

696
00:29:33,440 --> 00:29:34,880
that uh

697
00:29:34,880 --> 00:29:37,360
java crypto java

698
00:29:37,360 --> 00:29:38,840
x crypto

699
00:29:38,840 --> 00:29:42,480
method sorry class

700
00:29:43,360 --> 00:29:46,399
and my last words

701
00:29:47,840 --> 00:29:52,000
so did i make in all the applications

702
00:29:52,000 --> 00:29:54,960
the short answer is no i'm i'm still

703
00:29:54,960 --> 00:29:57,279
have nightmares about some of them

704
00:29:57,279 --> 00:30:00,240
but that's kind of my new ctf you know

705
00:30:00,240 --> 00:30:03,039
i'm keeping track

706
00:30:03,039 --> 00:30:06,799
for each application and when i'm trying

707
00:30:06,799 --> 00:30:09,919
to study about more anti-hoot methods

708
00:30:09,919 --> 00:30:13,840
and more advanced stuff i just

709
00:30:13,840 --> 00:30:15,520
reach any of these applications that i'm

710
00:30:15,520 --> 00:30:18,559
keeping track and study more about it

711
00:30:18,559 --> 00:30:21,200
it's a really interesting field many

712
00:30:21,200 --> 00:30:23,840
applications have

713
00:30:24,080 --> 00:30:26,399
many for many different forms to

714
00:30:26,399 --> 00:30:27,840
implement that

715
00:30:27,840 --> 00:30:29,279
specific

716
00:30:29,279 --> 00:30:30,399
uh

717
00:30:30,399 --> 00:30:31,360
feature

718
00:30:31,360 --> 00:30:34,879
is very interesting

719
00:30:35,039 --> 00:30:38,000
and that's it thanks a lot thanks for

720
00:30:38,000 --> 00:30:39,840
uh the mobile hacking space for the

721
00:30:39,840 --> 00:30:42,240
opportunity thanks for my team back in

722
00:30:42,240 --> 00:30:44,399
confusion for all the help

723
00:30:44,399 --> 00:30:46,559
uh you can also find me on twitter as i

724
00:30:46,559 --> 00:30:49,440
said earlier as xerox chips

725
00:30:49,440 --> 00:30:54,039
and that's all thanks a lot

