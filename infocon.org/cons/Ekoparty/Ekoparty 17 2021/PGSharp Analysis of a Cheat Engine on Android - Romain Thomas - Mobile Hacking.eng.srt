1
00:00:09,599 --> 00:00:11,920
hello everyone thank you for attending

2
00:00:11,920 --> 00:00:14,480
this remote talk i'm roman thomas i'm

3
00:00:14,480 --> 00:00:16,320
security engineer at underwater

4
00:00:16,320 --> 00:00:18,960
laboratories why i where i perform

5
00:00:18,960 --> 00:00:21,840
security evaluation on banking app and

6
00:00:21,840 --> 00:00:24,720
previously i was at quarksab

7
00:00:24,720 --> 00:00:27,760
so this talk is about pg sharp which is

8
00:00:27,760 --> 00:00:30,400
a cheat for pokemon go and basically

9
00:00:30,400 --> 00:00:32,558
this cheat enable

10
00:00:32,558 --> 00:00:34,960
to spoof the user location but it also

11
00:00:34,960 --> 00:00:37,680
enabled for instance to quick catch

12
00:00:37,680 --> 00:00:40,719
pokemon it's enabled to move the user

13
00:00:40,719 --> 00:00:43,200
through joystick to auto work and things

14
00:00:43,200 --> 00:00:44,640
like that

15
00:00:44,640 --> 00:00:45,600
and

16
00:00:45,600 --> 00:00:48,239
we'll discuss about this cheat

17
00:00:48,239 --> 00:00:50,480
through three parts so the first part

18
00:00:50,480 --> 00:00:52,480
would be about protection that is used

19
00:00:52,480 --> 00:00:54,079
by pg sharp

20
00:00:54,079 --> 00:00:55,600
we'll see that there are different

21
00:00:55,600 --> 00:00:56,640
layers

22
00:00:56,640 --> 00:00:58,800
the second part is about the internal

23
00:00:58,800 --> 00:01:00,960
mechanism and internal architecture of

24
00:01:00,960 --> 00:01:02,640
the jet engine

25
00:01:02,640 --> 00:01:04,799
and we'll finish about some techniques

26
00:01:04,799 --> 00:01:06,799
to detect it

27
00:01:06,799 --> 00:01:09,760
so regarding the cut protection

28
00:01:09,760 --> 00:01:13,040
on one end we have pokemon go that is uh

29
00:01:13,040 --> 00:01:15,600
protected by a commercial solution i

30
00:01:15,600 --> 00:01:16,560
mean

31
00:01:16,560 --> 00:01:18,320
there is a native library that is

32
00:01:18,320 --> 00:01:20,159
obfuscated by

33
00:01:20,159 --> 00:01:22,320
the commercial solution and that contain

34
00:01:22,320 --> 00:01:25,520
the critical functionalities such as

35
00:01:25,520 --> 00:01:28,240
the user location

36
00:01:28,240 --> 00:01:32,000
we have no application in the java part

37
00:01:32,000 --> 00:01:34,079
there is no program application all the

38
00:01:34,079 --> 00:01:35,439
strings

39
00:01:35,439 --> 00:01:37,920
are in clear and things like that

40
00:01:37,920 --> 00:01:40,000
the native part is obfuscated by the

41
00:01:40,000 --> 00:01:42,320
commercial solution with control pro and

42
00:01:42,320 --> 00:01:44,159
data flow application

43
00:01:44,159 --> 00:01:46,240
and the native string are obviously

44
00:01:46,240 --> 00:01:48,079
encoded

45
00:01:48,079 --> 00:01:50,079
regarding the languages that is that are

46
00:01:50,079 --> 00:01:54,640
used by pokemon we find java c blues and

47
00:01:54,640 --> 00:01:57,920
most of the game is written in unity

48
00:01:57,920 --> 00:02:00,320
on the other end we have pg sharp which

49
00:02:00,320 --> 00:02:03,920
is also appreciated but this time with

50
00:02:03,920 --> 00:02:06,399
ollvm

51
00:02:06,399 --> 00:02:09,119
the java part of pg sharp

52
00:02:09,119 --> 00:02:10,160
is

53
00:02:10,160 --> 00:02:12,560
a bit appreciated with proguard i mean

54
00:02:12,560 --> 00:02:15,200
all the some class and some method have

55
00:02:15,200 --> 00:02:16,480
been renamed

56
00:02:16,480 --> 00:02:19,760
with program the strings are also

57
00:02:19,760 --> 00:02:21,120
encoded

58
00:02:21,120 --> 00:02:23,599
regarding the native

59
00:02:23,599 --> 00:02:25,280
part is

60
00:02:25,280 --> 00:02:27,920
protected by llvm with control flow

61
00:02:27,920 --> 00:02:29,360
obfuscation

62
00:02:29,360 --> 00:02:31,599
basically it's only controlled for

63
00:02:31,599 --> 00:02:33,360
flattening

64
00:02:33,360 --> 00:02:36,400
the native string are also encoded and

65
00:02:36,400 --> 00:02:39,040
pg sharp is written in three languages

66
00:02:39,040 --> 00:02:41,760
also so we have java in c space but we

67
00:02:41,760 --> 00:02:43,440
also have lua

68
00:02:43,440 --> 00:02:45,840
as we will see later

69
00:02:45,840 --> 00:02:47,280
so

70
00:02:47,280 --> 00:02:48,800
as i mentioned

71
00:02:48,800 --> 00:02:50,560
pg sharp use lua

72
00:02:50,560 --> 00:02:51,760
so some

73
00:02:51,760 --> 00:02:55,040
part of the cheat is are written in in

74
00:02:55,040 --> 00:02:57,920
lua with a custom vm

75
00:02:57,920 --> 00:03:01,280
and they use kind of gni to call some

76
00:03:01,280 --> 00:03:02,560
low level

77
00:03:02,560 --> 00:03:04,640
function and to perform low level

78
00:03:04,640 --> 00:03:08,159
functionality such as hooking

79
00:03:08,159 --> 00:03:10,400
the lua logic and the lua vm are

80
00:03:10,400 --> 00:03:13,120
self-contained in libman point so so

81
00:03:13,120 --> 00:03:16,480
basically the original lua script are

82
00:03:16,480 --> 00:03:18,560
compiled not really compiled but are

83
00:03:18,560 --> 00:03:21,360
transformed in into lua opcode

84
00:03:21,360 --> 00:03:24,400
bytecode that are interpreted by the lua

85
00:03:24,400 --> 00:03:26,080
vm

86
00:03:26,080 --> 00:03:29,920
and they modified the lua vm

87
00:03:29,920 --> 00:03:33,040
so they introduce a custom op code such

88
00:03:33,040 --> 00:03:35,519
as op run or pixar anything like that

89
00:03:35,519 --> 00:03:38,640
and they tried also to fake the version

90
00:03:38,640 --> 00:03:40,879
so that it makes reverse engineering a

91
00:03:40,879 --> 00:03:44,879
bit more complicated uh and especially

92
00:03:44,879 --> 00:03:47,040
you can't decompile

93
00:03:47,040 --> 00:03:48,080
the

94
00:03:48,080 --> 00:03:49,920
bytecode

95
00:03:49,920 --> 00:03:52,640
and on the top of that you have the old

96
00:03:52,640 --> 00:03:54,720
vm protection so

97
00:03:54,720 --> 00:03:57,120
here's an example of

98
00:03:57,120 --> 00:03:58,319
some

99
00:03:58,319 --> 00:04:01,519
function in libman.tso so

100
00:04:01,519 --> 00:04:03,040
here you can see that you have different

101
00:04:03,040 --> 00:04:05,280
function and using static reverse

102
00:04:05,280 --> 00:04:06,959
engineering and

103
00:04:06,959 --> 00:04:08,480
pattern matching

104
00:04:08,480 --> 00:04:12,480
you can recover a lua c api so here for

105
00:04:12,480 --> 00:04:15,360
instance you have a plush c closure that

106
00:04:15,360 --> 00:04:17,839
basically push a c function

107
00:04:17,839 --> 00:04:19,839
and here you have the functionality that

108
00:04:19,839 --> 00:04:21,199
will get

109
00:04:21,199 --> 00:04:24,320
the base address of unity

110
00:04:24,320 --> 00:04:28,160
i mean of el to cpp which is related to

111
00:04:28,160 --> 00:04:30,060
unity

112
00:04:30,060 --> 00:04:31,680
[Music]

113
00:04:31,680 --> 00:04:33,759
so pg sharp is

114
00:04:33,759 --> 00:04:35,919
also written in java i mean some

115
00:04:35,919 --> 00:04:38,400
functionality are in java

116
00:04:38,400 --> 00:04:40,880
and the java port

117
00:04:40,880 --> 00:04:43,280
is protected i mean not really protected

118
00:04:43,280 --> 00:04:45,440
but the name and the class has been

119
00:04:45,440 --> 00:04:46,960
renamed by program

120
00:04:46,960 --> 00:04:48,240
and they

121
00:04:48,240 --> 00:04:50,000
encoded the string

122
00:04:50,000 --> 00:04:51,600
the string

123
00:04:51,600 --> 00:04:53,600
are encoded in this way so here we can

124
00:04:53,600 --> 00:04:55,280
see that we have a function that will

125
00:04:55,280 --> 00:04:58,320
decode that but it turns out that the

126
00:04:58,320 --> 00:05:00,400
string accounting routine is really easy

127
00:05:00,400 --> 00:05:03,680
to reverse is a merely a xor with a hard

128
00:05:03,680 --> 00:05:06,479
coded key that doesn't charge across the

129
00:05:06,479 --> 00:05:08,639
version

130
00:05:08,639 --> 00:05:11,360
and since it's quite easy to reverse you

131
00:05:11,360 --> 00:05:12,639
can write

132
00:05:12,639 --> 00:05:16,639
a jdx plugin that will automatically

133
00:05:16,639 --> 00:05:18,160
decode the string

134
00:05:18,160 --> 00:05:19,840
so that at the end

135
00:05:19,840 --> 00:05:23,199
you get this kind of decompilation which

136
00:05:23,199 --> 00:05:26,880
is the reverse engineering

137
00:05:26,880 --> 00:05:28,639
so now let's move to the internal

138
00:05:28,639 --> 00:05:31,199
mechanism and the internal architecture

139
00:05:31,199 --> 00:05:33,280
of the cheat engine

140
00:05:33,280 --> 00:05:36,800
so the cheat engine works by repackaging

141
00:05:36,800 --> 00:05:40,000
the original pokemon go application

142
00:05:40,000 --> 00:05:43,759
and by repackaging they only change one

143
00:05:43,759 --> 00:05:45,800
single file which is

144
00:05:45,800 --> 00:05:50,160
libman.so and the main.tso is originally

145
00:05:50,160 --> 00:05:52,800
related to unity so basically it

146
00:05:52,800 --> 00:05:57,759
initialized some part of unity

147
00:05:57,759 --> 00:06:01,039
and in the main point so what they do

148
00:06:01,039 --> 00:06:04,479
is that they expose a general node

149
00:06:04,479 --> 00:06:07,199
which is a function that is

150
00:06:07,199 --> 00:06:09,680
automatically called when you load the

151
00:06:09,680 --> 00:06:12,000
library from java

152
00:06:12,000 --> 00:06:14,479
and in general nodes they

153
00:06:14,479 --> 00:06:17,840
load another apk that is

154
00:06:17,840 --> 00:06:20,720
embedded in libman.com

155
00:06:20,720 --> 00:06:23,360
at the end of the library

156
00:06:23,360 --> 00:06:26,479
this apk is actually encoded with

157
00:06:26,479 --> 00:06:30,639
some with a formula that is given here

158
00:06:30,639 --> 00:06:33,199
and they extract this part of the

159
00:06:33,199 --> 00:06:34,720
library on

160
00:06:34,720 --> 00:06:37,120
the data partition of the game using a

161
00:06:37,120 --> 00:06:40,639
random name and they dynamically load

162
00:06:40,639 --> 00:06:43,440
the apk through path class loader so if

163
00:06:43,440 --> 00:06:45,039
you want to access

164
00:06:45,039 --> 00:06:47,680
this file you can just dump

165
00:06:47,680 --> 00:06:49,039
this

166
00:06:49,039 --> 00:06:52,800
this file from the android device

167
00:06:52,800 --> 00:06:56,160
in jni unload they also initialized all

168
00:06:56,160 --> 00:06:59,360
the lua vm and they load all the

169
00:06:59,360 --> 00:07:01,440
lua bytecode

170
00:07:01,440 --> 00:07:04,720
where the lua bytecode will hook and

171
00:07:04,720 --> 00:07:05,840
will

172
00:07:05,840 --> 00:07:08,639
perform some internal stuff

173
00:07:08,639 --> 00:07:10,479
on libart

174
00:07:10,479 --> 00:07:11,759
as we will see

175
00:07:11,759 --> 00:07:13,599
they are also working

176
00:07:13,599 --> 00:07:14,639
lib

177
00:07:14,639 --> 00:07:17,440
unity and not actually not looking but

178
00:07:17,440 --> 00:07:19,440
they are accessing some symbol from lib

179
00:07:19,440 --> 00:07:22,080
unity and they are hooking some function

180
00:07:22,080 --> 00:07:24,479
from lib ear to cpp so for instance when

181
00:07:24,479 --> 00:07:28,720
they want to quick catch pokemon

182
00:07:28,720 --> 00:07:31,360
they will hook a special function from

183
00:07:31,360 --> 00:07:34,080
libel to cpp and they will also do some

184
00:07:34,080 --> 00:07:36,720
stuff on eliminating lapse plugin which

185
00:07:36,720 --> 00:07:38,400
is the library that is obfuscated by the

186
00:07:38,400 --> 00:07:41,440
commercial solution and on this library

187
00:07:41,440 --> 00:07:43,360
as well

188
00:07:43,360 --> 00:07:46,560
and the apk that is dynamically loaded

189
00:07:46,560 --> 00:07:49,199
uh will also um

190
00:07:49,199 --> 00:07:52,080
interact with native function

191
00:07:52,080 --> 00:07:53,520
that have

192
00:07:53,520 --> 00:07:56,479
wrought i mean some names that are not

193
00:07:56,479 --> 00:07:59,360
meaningful but using reverse engineering

194
00:07:59,360 --> 00:08:00,400
you can

195
00:08:00,400 --> 00:08:03,199
infer the purpose of this function so

196
00:08:03,199 --> 00:08:05,759
for example you have a native function

197
00:08:05,759 --> 00:08:09,199
that is used to call a lua

198
00:08:09,199 --> 00:08:11,680
function so basically the java part will

199
00:08:11,680 --> 00:08:13,919
call an active function that will then

200
00:08:13,919 --> 00:08:16,879
call uh some lua function

201
00:08:16,879 --> 00:08:20,240
uh you have also some part related to

202
00:08:20,240 --> 00:08:22,639
cryptography

203
00:08:22,639 --> 00:08:24,479
and related also to network

204
00:08:24,479 --> 00:08:27,199
communication

205
00:08:27,199 --> 00:08:29,759
so among the different tricks that are

206
00:08:29,759 --> 00:08:32,240
used by pg sharp

207
00:08:32,240 --> 00:08:34,240
we will see that we have a way to bypass

208
00:08:34,240 --> 00:08:35,919
the signature check

209
00:08:35,919 --> 00:08:37,839
we have also a way to

210
00:08:37,839 --> 00:08:40,320
to hook without cooking that will be

211
00:08:40,320 --> 00:08:41,919
discussed with

212
00:08:41,919 --> 00:08:44,640
the proclifying of jenny off

213
00:08:44,640 --> 00:08:45,839
it looks

214
00:08:45,839 --> 00:08:48,000
unity function and

215
00:08:48,000 --> 00:08:49,519
i didn't

216
00:08:49,519 --> 00:08:50,480
look

217
00:08:50,480 --> 00:08:53,519
really to this part but it seemed that

218
00:08:53,519 --> 00:08:55,279
they have a way to

219
00:08:55,279 --> 00:08:57,120
basically

220
00:08:57,120 --> 00:08:59,600
bypass a safety net implementation

221
00:08:59,600 --> 00:09:02,160
acceptance verification because it looks

222
00:09:02,160 --> 00:09:02,959
like

223
00:09:02,959 --> 00:09:05,839
pokemon go is verifying the safety net

224
00:09:05,839 --> 00:09:07,600
within the game

225
00:09:07,600 --> 00:09:09,760
but i'm not sure about this part so i

226
00:09:09,760 --> 00:09:11,040
want

227
00:09:11,040 --> 00:09:12,160
detail

228
00:09:12,160 --> 00:09:14,080
on that

229
00:09:14,080 --> 00:09:15,120
so

230
00:09:15,120 --> 00:09:15,839
as

231
00:09:15,839 --> 00:09:16,800
i said

232
00:09:16,800 --> 00:09:20,720
pg sharp works by repackaging

233
00:09:20,720 --> 00:09:23,360
pokemon go so it means that they have to

234
00:09:23,360 --> 00:09:24,880
resign

235
00:09:24,880 --> 00:09:26,959
the original application

236
00:09:26,959 --> 00:09:27,920
and

237
00:09:27,920 --> 00:09:31,519
it's very likely that niotik implements

238
00:09:31,519 --> 00:09:32,959
integrity check

239
00:09:32,959 --> 00:09:36,320
on the apk signature so it means that

240
00:09:36,320 --> 00:09:39,279
neotic will check that the signature of

241
00:09:39,279 --> 00:09:40,880
the apk so

242
00:09:40,880 --> 00:09:41,680
how

243
00:09:41,680 --> 00:09:44,240
did they manage to bypass this kind of

244
00:09:44,240 --> 00:09:45,839
check

245
00:09:45,839 --> 00:09:49,360
and the answer is with javanong reflect

246
00:09:49,360 --> 00:09:52,800
proxy so basically reflect proxy

247
00:09:52,800 --> 00:09:53,680
is

248
00:09:53,680 --> 00:09:56,080
kind of software hooking so it's

249
00:09:56,080 --> 00:09:58,160
basically a way to

250
00:09:58,160 --> 00:10:01,040
intercept and to hook a

251
00:10:01,040 --> 00:10:02,320
class

252
00:10:02,320 --> 00:10:05,040
and p sharp will hook

253
00:10:05,040 --> 00:10:08,560
the package manager with proxy

254
00:10:08,560 --> 00:10:11,519
and when pokemon will ask for the

255
00:10:11,519 --> 00:10:14,480
signature of the apk

256
00:10:14,480 --> 00:10:16,160
instead of

257
00:10:16,160 --> 00:10:19,040
asking to the real package manager

258
00:10:19,040 --> 00:10:22,320
it will be forwarded to pg sharp that

259
00:10:22,320 --> 00:10:25,519
will return a fake signature

260
00:10:25,519 --> 00:10:28,000
through the proxy

261
00:10:28,000 --> 00:10:31,519
interface so this is a way to

262
00:10:31,519 --> 00:10:34,320
that um pg sharp managed to bypass the

263
00:10:34,320 --> 00:10:36,880
signature

264
00:10:36,880 --> 00:10:37,680
so

265
00:10:37,680 --> 00:10:39,920
among the functionality we have the gps

266
00:10:39,920 --> 00:10:41,040
spoofing

267
00:10:41,040 --> 00:10:44,160
and to understand how gps proofing

268
00:10:44,160 --> 00:10:47,279
we need to understand first how

269
00:10:47,279 --> 00:10:49,680
pokemon go manage the user location so

270
00:10:49,680 --> 00:10:52,000
basically the user location is managed

271
00:10:52,000 --> 00:10:54,560
by free native function

272
00:10:54,560 --> 00:10:56,959
and these three native functions are

273
00:10:56,959 --> 00:11:00,480
implemented in lib multiglaps plugin

274
00:11:00,480 --> 00:11:02,640
that is obfuscated by

275
00:11:02,640 --> 00:11:04,640
the commercial solution because it's

276
00:11:04,640 --> 00:11:06,640
critical functionality basically in

277
00:11:06,640 --> 00:11:07,760
pokemon

278
00:11:07,760 --> 00:11:11,440
all the critical functionalities are

279
00:11:11,440 --> 00:11:14,000
are implemented in native code and this

280
00:11:14,000 --> 00:11:16,560
native code is applicated by the

281
00:11:16,560 --> 00:11:20,160
the commercial solution so

282
00:11:20,160 --> 00:11:22,880
basically when the the user

283
00:11:22,880 --> 00:11:26,959
move or when the gps location is updated

284
00:11:26,959 --> 00:11:29,600
this update is forwarded to native

285
00:11:29,600 --> 00:11:32,800
location update uh that perform

286
00:11:32,800 --> 00:11:34,000
low level

287
00:11:34,000 --> 00:11:37,440
stuff in libnautic labs plugin

288
00:11:37,440 --> 00:11:39,680
and pv sharps

289
00:11:39,680 --> 00:11:42,800
works by basically hooking

290
00:11:42,800 --> 00:11:45,200
two of these three function

291
00:11:45,200 --> 00:11:47,360
so the first is native add location

292
00:11:47,360 --> 00:11:48,880
provider but

293
00:11:48,880 --> 00:11:51,440
the last one is native location update

294
00:11:51,440 --> 00:11:53,440
and when

295
00:11:53,440 --> 00:11:55,279
the user moves

296
00:11:55,279 --> 00:11:57,200
basically you have a way to change the

297
00:11:57,200 --> 00:11:59,279
parameter of this

298
00:11:59,279 --> 00:12:00,639
this function

299
00:12:00,639 --> 00:12:03,120
and since the parameter of native

300
00:12:03,120 --> 00:12:06,079
location object is a native location

301
00:12:06,079 --> 00:12:07,920
update is

302
00:12:07,920 --> 00:12:10,880
is a location object which is

303
00:12:10,880 --> 00:12:14,399
a location from the java

304
00:12:14,399 --> 00:12:16,079
i mean it's a

305
00:12:16,079 --> 00:12:17,440
it's an object

306
00:12:17,440 --> 00:12:21,040
from uh android so you have all the

307
00:12:21,040 --> 00:12:22,959
interface and all the methods so it's

308
00:12:22,959 --> 00:12:23,680
quite

309
00:12:23,680 --> 00:12:26,880
easy to modify you can just set okay set

310
00:12:26,880 --> 00:12:29,200
latitude and set longitude

311
00:12:29,200 --> 00:12:31,920
and then we change the user

312
00:12:31,920 --> 00:12:35,440
location by okay

313
00:12:35,440 --> 00:12:36,880
but

314
00:12:36,880 --> 00:12:38,480
as i said

315
00:12:38,480 --> 00:12:41,519
leibniz that's plugin is obfuscated with

316
00:12:41,519 --> 00:12:43,600
a commercial solution and this

317
00:12:43,600 --> 00:12:46,639
commercial solution have a mechanism to

318
00:12:46,639 --> 00:12:49,279
prevent hooking and to detect hooking

319
00:12:49,279 --> 00:12:51,440
so now the question is how did they

320
00:12:51,440 --> 00:12:53,600
manage to bypass rookie

321
00:12:53,600 --> 00:12:56,320
and the answer will be with gn proxifier

322
00:12:56,320 --> 00:12:59,760
which is another nice trick

323
00:12:59,760 --> 00:13:02,959
so basically when you call a gni

324
00:13:02,959 --> 00:13:04,079
function

325
00:13:04,079 --> 00:13:06,800
you have the environment pointer

326
00:13:06,800 --> 00:13:10,320
which is an array of function pointer so

327
00:13:10,320 --> 00:13:12,800
basically here fine class

328
00:13:12,800 --> 00:13:16,480
is an entry within this array

329
00:13:16,480 --> 00:13:18,720
and when you look at

330
00:13:18,720 --> 00:13:19,600
the

331
00:13:19,600 --> 00:13:22,160
where this pointer point to

332
00:13:22,160 --> 00:13:26,000
uh you usually i mean all the time

333
00:13:26,000 --> 00:13:28,560
you have all the functions that point to

334
00:13:28,560 --> 00:13:30,399
libart.so

335
00:13:30,399 --> 00:13:33,519
which is android runtime and this

336
00:13:33,519 --> 00:13:37,360
part implement all the gvm basically

337
00:13:37,360 --> 00:13:40,399
among other things

338
00:13:40,399 --> 00:13:42,720
and especially uh you have registered

339
00:13:42,720 --> 00:13:46,560
native that points to library.

340
00:13:46,560 --> 00:13:49,519
and when uh we

341
00:13:49,519 --> 00:13:53,199
look at the general pointer

342
00:13:53,199 --> 00:13:54,399
on the

343
00:13:54,399 --> 00:13:56,399
native init part

344
00:13:56,399 --> 00:13:59,920
of a liberty labs plugin so if we iter

345
00:13:59,920 --> 00:14:02,880
iterate over all the pointer and we

346
00:14:02,880 --> 00:14:06,720
check the location of each pointer

347
00:14:06,720 --> 00:14:10,320
in pg sharp we notice that some

348
00:14:10,320 --> 00:14:12,000
functions

349
00:14:12,000 --> 00:14:15,880
are located not in libra.so but in

350
00:14:15,880 --> 00:14:18,639
libman.com which is a library that

351
00:14:18,639 --> 00:14:22,320
contains all the cheat functionalities

352
00:14:22,320 --> 00:14:24,160
and especially here

353
00:14:24,160 --> 00:14:26,480
we have four functions that point to

354
00:14:26,480 --> 00:14:31,839
libby the teso including register native

355
00:14:31,839 --> 00:14:32,720
and

356
00:14:32,720 --> 00:14:33,760
to

357
00:14:33,760 --> 00:14:34,880
hook

358
00:14:34,880 --> 00:14:38,160
the native location update and native ad

359
00:14:38,160 --> 00:14:39,839
location provider

360
00:14:39,839 --> 00:14:42,639
basically when

361
00:14:42,639 --> 00:14:45,199
when pokemon will register the native

362
00:14:45,199 --> 00:14:47,040
function

363
00:14:47,040 --> 00:14:49,519
they will use an overland pointer that

364
00:14:49,519 --> 00:14:52,959
has been modified by pg-sharp and when

365
00:14:52,959 --> 00:14:56,160
they will call register native on this

366
00:14:56,160 --> 00:14:57,760
function

367
00:14:57,760 --> 00:15:00,320
actually instead of calling the real

368
00:15:00,320 --> 00:15:03,440
register native from the android runtime

369
00:15:03,440 --> 00:15:05,360
they recall

370
00:15:05,360 --> 00:15:08,320
internal function of remote point so

371
00:15:08,320 --> 00:15:10,160
that will replace

372
00:15:10,160 --> 00:15:12,800
the original offset and the original

373
00:15:12,800 --> 00:15:16,399
pointer with their own implementation

374
00:15:16,399 --> 00:15:19,760
for that actually instead of pointing

375
00:15:19,760 --> 00:15:23,519
within libnautica plugin they will point

376
00:15:23,519 --> 00:15:24,839
into

377
00:15:24,839 --> 00:15:28,639
libman.teso and when

378
00:15:28,639 --> 00:15:30,880
pokemon go we'll call

379
00:15:30,880 --> 00:15:33,279
native location update actually they

380
00:15:33,279 --> 00:15:35,680
will call a function that is

381
00:15:35,680 --> 00:15:36,720
managed

382
00:15:36,720 --> 00:15:39,440
by libman.eso

383
00:15:39,440 --> 00:15:42,560
so here are the tricks to bypass hooking

384
00:15:42,560 --> 00:15:44,639
is to modify

385
00:15:44,639 --> 00:15:47,440
some function from the genius

386
00:15:47,440 --> 00:15:49,920
structure

387
00:15:51,440 --> 00:15:53,199
so how to prevent

388
00:15:53,199 --> 00:15:56,160
this kind of cheat so first of all

389
00:15:56,160 --> 00:15:58,720
it's a cat and mouse game and it's just

390
00:15:58,720 --> 00:16:00,959
some suggestion and

391
00:16:00,959 --> 00:16:03,120
it's a it's a matter of how do you

392
00:16:03,120 --> 00:16:06,160
implement this and how to how you

393
00:16:06,160 --> 00:16:08,399
you react when you detect

394
00:16:08,399 --> 00:16:10,560
this kind of

395
00:16:10,560 --> 00:16:13,119
detection

396
00:16:13,199 --> 00:16:16,880
so first for the signature bypass

397
00:16:16,880 --> 00:16:19,519
you can in this very specific case you

398
00:16:19,519 --> 00:16:21,680
can use uh his proxy class on the

399
00:16:21,680 --> 00:16:24,000
package manager but it's very

400
00:16:24,000 --> 00:16:26,399
limited to this case

401
00:16:26,399 --> 00:16:28,079
more generally

402
00:16:28,079 --> 00:16:31,279
it is worth to check the integrity of

403
00:16:31,279 --> 00:16:33,519
the native library as well as the dex

404
00:16:33,519 --> 00:16:36,480
file because basically checking the

405
00:16:36,480 --> 00:16:39,199
apk signature is not enough

406
00:16:39,199 --> 00:16:41,519
first because the native library are

407
00:16:41,519 --> 00:16:44,320
when you install the apk are usually

408
00:16:44,320 --> 00:16:47,360
extracted on the device which means that

409
00:16:47,360 --> 00:16:48,399
you can

410
00:16:48,399 --> 00:16:50,079
when you have a rooted device you can

411
00:16:50,079 --> 00:16:52,079
just replace the library and in this

412
00:16:52,079 --> 00:16:55,040
case we saw that basically with

413
00:16:55,040 --> 00:16:57,040
the proxy interface

414
00:16:57,040 --> 00:17:00,880
of the android stl you can you can do

415
00:17:00,880 --> 00:17:02,010
also hooking

416
00:17:02,010 --> 00:17:03,440
[Music]

417
00:17:03,440 --> 00:17:07,199
regarding jr proxifier one way to

418
00:17:07,199 --> 00:17:08,319
prevent

419
00:17:08,319 --> 00:17:09,599
this technique

420
00:17:09,599 --> 00:17:11,599
is to check the integrity of the

421
00:17:11,599 --> 00:17:14,400
environment pointer before executing the

422
00:17:14,400 --> 00:17:16,160
native function

423
00:17:16,160 --> 00:17:19,199
especially all the function

424
00:17:19,199 --> 00:17:20,640
from

425
00:17:20,640 --> 00:17:23,119
the function in the dna structure should

426
00:17:23,119 --> 00:17:24,000
point

427
00:17:24,000 --> 00:17:26,240
to libart.so

428
00:17:26,240 --> 00:17:27,520
and not

429
00:17:27,520 --> 00:17:29,679
in another library

430
00:17:29,679 --> 00:17:31,039
and but

431
00:17:31,039 --> 00:17:33,440
actually you can uh you could also

432
00:17:33,440 --> 00:17:36,559
bypass another word but for this case uh

433
00:17:36,559 --> 00:17:40,960
you should check this kind of value

434
00:17:40,960 --> 00:17:43,280
so to conclude

435
00:17:43,280 --> 00:17:45,679
so when i started to look at

436
00:17:45,679 --> 00:17:48,559
this jet engine i did not expect to find

437
00:17:48,559 --> 00:17:51,918
such a nice trick

438
00:17:52,240 --> 00:17:54,960
it's a 20 minute talk

439
00:17:54,960 --> 00:17:57,280
so i did not have enough time to cover

440
00:17:57,280 --> 00:17:59,360
other aspects but

441
00:17:59,360 --> 00:18:01,280
what took me most of the time is to we

442
00:18:01,280 --> 00:18:04,240
were the luau vm because

443
00:18:04,240 --> 00:18:06,080
actually you have to

444
00:18:06,080 --> 00:18:09,760
understand how the loo ibm works what

445
00:18:09,760 --> 00:18:11,679
are the cooling conventions and things

446
00:18:11,679 --> 00:18:14,720
like that and in this case

447
00:18:14,720 --> 00:18:18,160
lua vm plus lvl or llvm is not in a

448
00:18:18,160 --> 00:18:20,960
current reverse engineering

449
00:18:20,960 --> 00:18:26,080
mostly because well vm only provides

450
00:18:26,080 --> 00:18:28,320
control flow um

451
00:18:28,320 --> 00:18:31,120
obfuscation and no data obfuscation

452
00:18:31,120 --> 00:18:34,160
which means that okay you can't recover

453
00:18:34,160 --> 00:18:36,640
exactly the cfg of the function but

454
00:18:36,640 --> 00:18:38,320
using emulation

455
00:18:38,320 --> 00:18:41,520
you can figure out the behavior

456
00:18:41,520 --> 00:18:44,640
uh as we saw with the different tricks

457
00:18:44,640 --> 00:18:47,280
uh pg sharp authors seems to have very

458
00:18:47,280 --> 00:18:49,679
strong background in reverse engineering

459
00:18:49,679 --> 00:18:52,480
i mean using a lua vm with custom upcode

460
00:18:52,480 --> 00:18:53,840
and things like that

461
00:18:53,840 --> 00:18:57,520
they know what they are doing

462
00:18:57,520 --> 00:19:01,039
for the funny part here is an example

463
00:19:01,039 --> 00:19:03,679
of how they try to make believe it was

464
00:19:03,679 --> 00:19:07,679
based on ruby 5.1

465
00:19:07,679 --> 00:19:11,360
instead of who are 5.4

466
00:19:11,360 --> 00:19:14,240
so they try to make believe it was ruby

467
00:19:14,240 --> 00:19:17,200
we find the same thing here where

468
00:19:17,200 --> 00:19:20,880
they try they they change uh some some

469
00:19:20,880 --> 00:19:23,440
string but actually when you up on

470
00:19:23,440 --> 00:19:26,240
github atom to call global things like

471
00:19:26,240 --> 00:19:28,559
that you find

472
00:19:28,559 --> 00:19:31,200
interesting project

473
00:19:31,200 --> 00:19:33,919
and you can find the

474
00:19:33,919 --> 00:19:37,200
material of this talk on github

475
00:19:37,200 --> 00:19:40,880
and thank you for your attention and

476
00:19:40,880 --> 00:19:43,039
let me know if you have questions now

477
00:19:43,039 --> 00:19:46,280
thank you

