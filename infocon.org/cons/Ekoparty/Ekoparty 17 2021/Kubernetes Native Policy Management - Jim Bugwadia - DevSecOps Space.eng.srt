1
00:00:02,720 --> 00:00:04,960
hi everyone and welcome to this session

2
00:00:04,960 --> 00:00:07,440
on kubernetes native policy management

3
00:00:07,440 --> 00:00:08,960
with kiverno

4
00:00:08,960 --> 00:00:11,679
the topics we will cover today is why

5
00:00:11,679 --> 00:00:14,320
policies matter for kubernetes why

6
00:00:14,320 --> 00:00:16,800
kiverno is a native policy management

7
00:00:16,800 --> 00:00:19,039
solution that you should consider

8
00:00:19,039 --> 00:00:21,439
we'll also go deeper into how kiberno

9
00:00:21,439 --> 00:00:24,000
works for kubernetes what kimono

10
00:00:24,000 --> 00:00:26,240
policies look like and what features

11
00:00:26,240 --> 00:00:28,880
kevon offers and then we'll do a quick

12
00:00:28,880 --> 00:00:31,039
summary and we'll also do some demos

13
00:00:31,039 --> 00:00:32,719
along the way

14
00:00:32,719 --> 00:00:34,880
so just in terms of a quick introduction

15
00:00:34,880 --> 00:00:37,040
i'm jim beguardia i'm a co-founder and

16
00:00:37,040 --> 00:00:40,000
the ceo at nermata nirmata is a company

17
00:00:40,000 --> 00:00:41,920
that makes kubernetes management

18
00:00:41,920 --> 00:00:44,879
security and automation tools i'm also a

19
00:00:44,879 --> 00:00:47,840
kiverno maintainer iverno is a cncf

20
00:00:47,840 --> 00:00:50,480
sandbox project uh nirmata donated

21
00:00:50,480 --> 00:00:54,160
kivarno to cncf in november of 2020 and

22
00:00:54,160 --> 00:00:55,840
i'll talk about some of the you know

23
00:00:55,840 --> 00:00:57,520
growth and successes we're having with

24
00:00:57,520 --> 00:01:00,559
the community since then i also serve as

25
00:01:00,559 --> 00:01:02,640
a co-chair of the kubernetes policy

26
00:01:02,640 --> 00:01:04,640
working group and i'm a lead with the

27
00:01:04,640 --> 00:01:06,400
multi-tenancy working group in the

28
00:01:06,400 --> 00:01:08,720
kubernetes community

29
00:01:08,720 --> 00:01:11,119
all right so let's dive in

30
00:01:11,119 --> 00:01:13,439
the first topic i want to introduce is

31
00:01:13,439 --> 00:01:15,840
why policies matter to communities

32
00:01:15,840 --> 00:01:17,520
itself right

33
00:01:17,520 --> 00:01:20,000
kubernetes of course is a very powerful

34
00:01:20,000 --> 00:01:22,560
and complete system and as we know more

35
00:01:22,560 --> 00:01:24,560
and more enterprises are adopting

36
00:01:24,560 --> 00:01:26,880
kubernetes today for all sorts of

37
00:01:26,880 --> 00:01:29,360
applications whether it's on cloud data

38
00:01:29,360 --> 00:01:32,400
center or edge computing systems

39
00:01:32,400 --> 00:01:34,960
but in this recent survey from the

40
00:01:34,960 --> 00:01:37,280
technical advisory group as part of the

41
00:01:37,280 --> 00:01:39,520
kubernetes community

42
00:01:39,520 --> 00:01:41,600
there's some very interesting findings

43
00:01:41,600 --> 00:01:44,640
which also lead to our discussion on why

44
00:01:44,640 --> 00:01:48,159
policy management matters for kubernetes

45
00:01:48,159 --> 00:01:49,920
in this survey 80

46
00:01:49,920 --> 00:01:51,759
of the folks who answered and there were

47
00:01:51,759 --> 00:01:55,360
about 120 to 130 companies

48
00:01:55,360 --> 00:01:57,600
and different you know enterprises that

49
00:01:57,600 --> 00:01:58,960
took the survey

50
00:01:58,960 --> 00:02:01,920
all of them wanted a more modern open

51
00:02:01,920 --> 00:02:04,399
source based security system to

52
00:02:04,399 --> 00:02:07,119
complement what kubernetes provides

53
00:02:07,119 --> 00:02:09,840
so almost 60 percent of the

54
00:02:09,840 --> 00:02:12,959
you know the survey answers indicated a

55
00:02:12,959 --> 00:02:14,959
lack of expertise as one of the key

56
00:02:14,959 --> 00:02:16,080
concern

57
00:02:16,080 --> 00:02:18,640
mismatch with existing tooling as

58
00:02:18,640 --> 00:02:20,879
another hindrance to cloud native growth

59
00:02:20,879 --> 00:02:23,120
and adoption and then finally the

60
00:02:23,120 --> 00:02:25,760
complexity of management the complexity

61
00:02:25,760 --> 00:02:28,640
of kubernetes configuration continues to

62
00:02:28,640 --> 00:02:31,519
be a major source of pain within

63
00:02:31,519 --> 00:02:34,480
enterprises and any organization using

64
00:02:34,480 --> 00:02:36,480
kubernetes

65
00:02:36,480 --> 00:02:38,480
so what can policies do and how do they

66
00:02:38,480 --> 00:02:40,879
matter right so what i want to show you

67
00:02:40,879 --> 00:02:43,280
today is uh you know

68
00:02:43,280 --> 00:02:44,000
and

69
00:02:44,000 --> 00:02:46,480
demonstrate through kubernetes is that

70
00:02:46,480 --> 00:02:48,720
policy-based operations and management

71
00:02:48,720 --> 00:02:51,599
can solve each of these key concerns the

72
00:02:51,599 --> 00:02:54,959
lack of expertise the proper you know

73
00:02:54,959 --> 00:02:57,920
security by default and you know easing

74
00:02:57,920 --> 00:02:59,760
the complexity and some of the pain

75
00:02:59,760 --> 00:03:01,360
points that folks are seeing with

76
00:03:01,360 --> 00:03:02,560
kubernetes

77
00:03:02,560 --> 00:03:04,560
i love this tweet from an actual real

78
00:03:04,560 --> 00:03:07,120
world kubernetes admin where you know

79
00:03:07,120 --> 00:03:08,959
obviously somebody also shares this

80
00:03:08,959 --> 00:03:11,360
point of view who's talking about how

81
00:03:11,360 --> 00:03:13,760
without policy management in production

82
00:03:13,760 --> 00:03:14,959
clusters

83
00:03:14,959 --> 00:03:16,959
um you know there's disasters waiting to

84
00:03:16,959 --> 00:03:19,519
happen and you know hopefully by the end

85
00:03:19,519 --> 00:03:21,200
of the session you will share this to

86
00:03:21,200 --> 00:03:23,360
you as well

87
00:03:23,360 --> 00:03:25,200
all right so talking about you know what

88
00:03:25,200 --> 00:03:27,440
policies are and again

89
00:03:27,440 --> 00:03:29,519
how do we think about policy management

90
00:03:29,519 --> 00:03:32,799
in addition to kubernetes right so

91
00:03:32,799 --> 00:03:34,799
the way i think of it policies are

92
00:03:34,799 --> 00:03:37,040
really a contract between the different

93
00:03:37,040 --> 00:03:39,280
roles between the different type of

94
00:03:39,280 --> 00:03:41,680
folks who are using kubernetes and if

95
00:03:41,680 --> 00:03:43,519
you think about it in kubernetes as

96
00:03:43,519 --> 00:03:45,599
multiple roles there's developers who

97
00:03:45,599 --> 00:03:47,920
are trying to deploy applications

98
00:03:47,920 --> 00:03:49,760
there's the operations team that's

99
00:03:49,760 --> 00:03:52,239
trying to manage the clusters provide

100
00:03:52,239 --> 00:03:54,879
some of the shared class services and

101
00:03:54,879 --> 00:03:57,360
there's the security or the secops team

102
00:03:57,360 --> 00:03:58,799
that's trying to make sure that these

103
00:03:58,799 --> 00:04:01,120
clusters and the workloads are properly

104
00:04:01,120 --> 00:04:04,319
configured properly secured and are not

105
00:04:04,319 --> 00:04:05,920
going to be you know

106
00:04:05,920 --> 00:04:07,680
a major source of headlines for the

107
00:04:07,680 --> 00:04:09,200
wrong reasons

108
00:04:09,200 --> 00:04:12,480
for any any in any situation right

109
00:04:12,480 --> 00:04:14,560
so all three of these roles have to

110
00:04:14,560 --> 00:04:17,519
collaborate on kubernetes configurations

111
00:04:17,519 --> 00:04:19,600
and because of the way declarative

112
00:04:19,600 --> 00:04:22,079
configuration works in kubernetes very

113
00:04:22,079 --> 00:04:24,400
often it's the same yaml manifest it's

114
00:04:24,400 --> 00:04:25,759
the same

115
00:04:25,759 --> 00:04:28,639
declarations that have to be shared and

116
00:04:28,639 --> 00:04:30,960
you know managed across these roles

117
00:04:30,960 --> 00:04:32,880
the policies

118
00:04:32,880 --> 00:04:35,440
can serve as a contract really as a

119
00:04:35,440 --> 00:04:37,919
digital and automated contract across

120
00:04:37,919 --> 00:04:40,080
these roles to help with you know

121
00:04:40,080 --> 00:04:42,560
coordination of who should do what how

122
00:04:42,560 --> 00:04:44,320
things should be configured in various

123
00:04:44,320 --> 00:04:46,479
environments and what settings need to

124
00:04:46,479 --> 00:04:49,199
be defaulted and used right

125
00:04:49,199 --> 00:04:51,840
so some of the use cases that policies

126
00:04:51,840 --> 00:04:54,560
can help address are improve the overall

127
00:04:54,560 --> 00:04:57,440
default security eliminate many of the

128
00:04:57,440 --> 00:04:59,280
misconfigurations that are common in

129
00:04:59,280 --> 00:05:01,600
kubernetes environments provide

130
00:05:01,600 --> 00:05:04,000
separation of controls across different

131
00:05:04,000 --> 00:05:07,280
roles right so developers can focus on

132
00:05:07,280 --> 00:05:09,919
what their workload needs but then

133
00:05:09,919 --> 00:05:11,919
security teams can make sure that the

134
00:05:11,919 --> 00:05:14,080
proper security defaults

135
00:05:14,080 --> 00:05:17,280
best practices are enforced and overall

136
00:05:17,280 --> 00:05:19,759
the the idea is to reduce the overall

137
00:05:19,759 --> 00:05:21,280
complexity

138
00:05:21,280 --> 00:05:24,240
because each role that has expertise in

139
00:05:24,240 --> 00:05:26,479
different domains is going to be doing

140
00:05:26,479 --> 00:05:28,960
what it knows best and what they can

141
00:05:28,960 --> 00:05:30,320
provide best

142
00:05:30,320 --> 00:05:32,800
the other things policy can also do is

143
00:05:32,800 --> 00:05:35,840
help automate the various handoffs which

144
00:05:35,840 --> 00:05:38,479
we see with kubernetes for example when

145
00:05:38,479 --> 00:05:40,639
a namespace is created several

146
00:05:40,639 --> 00:05:42,960
configurations need to be populated by

147
00:05:42,960 --> 00:05:45,919
default policy management tools can like

148
00:05:45,919 --> 00:05:48,400
kiverno can help automate these so

149
00:05:48,400 --> 00:05:50,479
several use cases and several important

150
00:05:50,479 --> 00:05:53,440
concerns that policy management can help

151
00:05:53,440 --> 00:05:55,919
address to make kubernetes secure by

152
00:05:55,919 --> 00:05:58,880
default and production ready

153
00:05:58,880 --> 00:06:00,880
all right so let's talk about you know

154
00:06:00,880 --> 00:06:03,120
why kiverno matters and why we built

155
00:06:03,120 --> 00:06:05,600
giverno for kubernetes

156
00:06:05,600 --> 00:06:07,440
so first off in terms of what does

157
00:06:07,440 --> 00:06:10,080
qivernoid mean is a common question that

158
00:06:10,080 --> 00:06:13,120
we get right the kiverno is a greek word

159
00:06:13,120 --> 00:06:15,680
for govern and because it provides

160
00:06:15,680 --> 00:06:17,759
governance compliance security to

161
00:06:17,759 --> 00:06:20,160
kubernetes we thought it's a good word

162
00:06:20,160 --> 00:06:21,120
you know

163
00:06:21,120 --> 00:06:23,919
a term a good name or a kubernetes

164
00:06:23,919 --> 00:06:26,720
native policy management tool

165
00:06:26,720 --> 00:06:28,479
if you notice one of the things i've

166
00:06:28,479 --> 00:06:30,639
been saying is kubernetes native right

167
00:06:30,639 --> 00:06:32,639
and and this often comes across as a

168
00:06:32,639 --> 00:06:35,199
buzzword or sometimes as used you know

169
00:06:35,199 --> 00:06:37,199
in many marketing kind of terminologies

170
00:06:37,199 --> 00:06:39,919
to say um you know everybody wants to be

171
00:06:39,919 --> 00:06:42,960
kubernetes native right but for kiverno

172
00:06:42,960 --> 00:06:44,960
and for policy management it's important

173
00:06:44,960 --> 00:06:46,400
to understand

174
00:06:46,400 --> 00:06:48,880
what this really means and why being

175
00:06:48,880 --> 00:06:52,000
kubernetes native even matters right

176
00:06:52,000 --> 00:06:52,880
so

177
00:06:52,880 --> 00:06:54,800
the way you know to think about it is

178
00:06:54,800 --> 00:06:56,960
there's several levels in which tools

179
00:06:56,960 --> 00:06:59,280
can be kubernetes native so first off

180
00:06:59,280 --> 00:07:01,520
you know it's possible that any tool

181
00:07:01,520 --> 00:07:04,080
that works or is designed for kubernetes

182
00:07:04,080 --> 00:07:06,479
can claim to be kubernetes native but

183
00:07:06,479 --> 00:07:09,120
that's not enough right to be kubernetes

184
00:07:09,120 --> 00:07:10,560
native you really need to be able to

185
00:07:10,560 --> 00:07:13,280
talk to the kubernetes api server

186
00:07:13,280 --> 00:07:15,599
to be able to you know understand what

187
00:07:15,599 --> 00:07:18,080
some of the objects look like so that's

188
00:07:18,080 --> 00:07:19,360
level two

189
00:07:19,360 --> 00:07:21,759
beyond that you know kiverno also

190
00:07:21,759 --> 00:07:24,080
operates as part of the control plane as

191
00:07:24,080 --> 00:07:25,840
you'll see in the architecture when we

192
00:07:25,840 --> 00:07:28,639
talk about this ivernot becomes a native

193
00:07:28,639 --> 00:07:31,120
part of your kubernetes installation

194
00:07:31,120 --> 00:07:33,280
and interacts with other control plane

195
00:07:33,280 --> 00:07:34,639
components

196
00:07:34,639 --> 00:07:38,639
level four is where you know kiverno

197
00:07:38,639 --> 00:07:41,280
also understands standard kubernetes

198
00:07:41,280 --> 00:07:43,840
idioms patterns things like owner

199
00:07:43,840 --> 00:07:46,879
references pods and pod controllers and

200
00:07:46,879 --> 00:07:49,520
because of this kiverno can optimize how

201
00:07:49,520 --> 00:07:52,240
policies work and how they should behave

202
00:07:52,240 --> 00:07:54,400
in kubernetes environments

203
00:07:54,400 --> 00:07:57,120
and finally and this is really critical

204
00:07:57,120 --> 00:07:59,280
is everything in kubernetes because of

205
00:07:59,280 --> 00:08:02,800
its declarative configuration management

206
00:08:02,800 --> 00:08:06,400
all everything in kubernetes is all crs

207
00:08:06,400 --> 00:08:08,479
custom resources or even native

208
00:08:08,479 --> 00:08:12,240
resources are defined using open api v3

209
00:08:12,240 --> 00:08:15,440
structural schemas iverno is intelligent

210
00:08:15,440 --> 00:08:18,479
enough to read these schemas at runtime

211
00:08:18,479 --> 00:08:20,720
and then to make you know to be able to

212
00:08:20,720 --> 00:08:22,879
understand what the layout of a

213
00:08:22,879 --> 00:08:25,599
kubernetes object should look like as it

214
00:08:25,599 --> 00:08:27,840
applies policies to these objects and

215
00:08:27,840 --> 00:08:29,039
resources

216
00:08:29,039 --> 00:08:31,520
so this gives kivarno a very powerful

217
00:08:31,520 --> 00:08:34,159
advantage in being able to understand

218
00:08:34,159 --> 00:08:37,200
exactly how resources and kubernetes

219
00:08:37,200 --> 00:08:38,559
are structured

220
00:08:38,559 --> 00:08:40,719
what their you know and and by the way

221
00:08:40,719 --> 00:08:42,880
this can change from one api version to

222
00:08:42,880 --> 00:08:45,600
another so kiberno does this dynamically

223
00:08:45,600 --> 00:08:47,440
once it's installed and configured in a

224
00:08:47,440 --> 00:08:49,440
cluster so extremely powerful

225
00:08:49,440 --> 00:08:52,399
capabilities which help quite a lot in

226
00:08:52,399 --> 00:08:55,680
being able to define policies write

227
00:08:55,680 --> 00:08:58,800
policies and also kiberno when you see

228
00:08:58,800 --> 00:09:00,240
how it manages

229
00:09:00,240 --> 00:09:03,040
policy results those are you know being

230
00:09:03,040 --> 00:09:05,839
also managed as kubernetes resources

231
00:09:05,839 --> 00:09:08,000
which helps the overall experience be

232
00:09:08,000 --> 00:09:11,279
very smooth and seamless and also

233
00:09:11,279 --> 00:09:13,600
gives giverno the policies as well as

234
00:09:13,600 --> 00:09:16,959
results to work with any standard tools

235
00:09:16,959 --> 00:09:19,279
like coupe cuddle customize and other

236
00:09:19,279 --> 00:09:23,600
tools that work with kubernetes apis

237
00:09:23,600 --> 00:09:25,920
all right so just to kind of summarize

238
00:09:25,920 --> 00:09:28,160
you know and why ki verno and what the

239
00:09:28,160 --> 00:09:31,040
motivation for driving kiberno was

240
00:09:31,040 --> 00:09:34,000
is make kubernetes policies easy to

241
00:09:34,000 --> 00:09:36,399
write easy to manage at scale

242
00:09:36,399 --> 00:09:38,480
across a fleet of clusters

243
00:09:38,480 --> 00:09:41,519
making policy results easy to get not

244
00:09:41,519 --> 00:09:43,279
just for the administrators but the

245
00:09:43,279 --> 00:09:45,680
workload owners right so

246
00:09:45,680 --> 00:09:47,760
developers who want to interact with

247
00:09:47,760 --> 00:09:48,959
policies

248
00:09:48,959 --> 00:09:50,240
should be able to see what the

249
00:09:50,240 --> 00:09:52,720
violations in their workloads are and

250
00:09:52,720 --> 00:09:55,440
should be able to react to this as early

251
00:09:55,440 --> 00:09:58,880
as possible in their ci cd pipeline and

252
00:09:58,880 --> 00:10:01,360
in their dev test and deploy cycles

253
00:10:01,360 --> 00:10:02,240
right

254
00:10:02,240 --> 00:10:04,480
policy should be able to not just

255
00:10:04,480 --> 00:10:06,880
validate and enforce but policy should

256
00:10:06,880 --> 00:10:09,360
be able to promote best practices by

257
00:10:09,360 --> 00:10:10,640
mutating

258
00:10:10,640 --> 00:10:13,360
by generating resources as well and

259
00:10:13,360 --> 00:10:15,680
qiverno is very unique in this area in

260
00:10:15,680 --> 00:10:18,560
its ability to generate completely you

261
00:10:18,560 --> 00:10:22,079
know new resources based on triggers uh

262
00:10:22,079 --> 00:10:24,959
as things are happening in your cluster

263
00:10:24,959 --> 00:10:26,959
and then you know a policy engine

264
00:10:26,959 --> 00:10:28,880
designed for kubernetes should support

265
00:10:28,880 --> 00:10:31,600
all types of resources not just the

266
00:10:31,600 --> 00:10:33,440
standard resources but should have

267
00:10:33,440 --> 00:10:36,079
knowledge through the open api v3

268
00:10:36,079 --> 00:10:38,800
structural schema of all kubernetes

269
00:10:38,800 --> 00:10:40,079
resources

270
00:10:40,079 --> 00:10:43,519
and utilize the built-in part you know

271
00:10:43,519 --> 00:10:46,240
patterns practices that the way just

272
00:10:46,240 --> 00:10:49,120
kubernetes controllers work giverno and

273
00:10:49,120 --> 00:10:51,200
native policy engines should be able to

274
00:10:51,200 --> 00:10:53,120
mimic those behaviors

275
00:10:53,120 --> 00:10:54,720
as well

276
00:10:54,720 --> 00:10:56,480
so one of the things that also comes up

277
00:10:56,480 --> 00:10:58,880
is okay so kivarno sounds interesting

278
00:10:58,880 --> 00:11:00,800
but what are the alternatives right and

279
00:11:00,800 --> 00:11:03,279
how should you decide what to use so the

280
00:11:03,279 --> 00:11:06,000
two you know cncf projects today which

281
00:11:06,000 --> 00:11:08,320
are policy engines are kiverno and oppa

282
00:11:08,320 --> 00:11:09,519
gatekeeper

283
00:11:09,519 --> 00:11:11,680
there's also some other open source

284
00:11:11,680 --> 00:11:13,920
projects like coupe boarding

285
00:11:13,920 --> 00:11:16,480
js policy and then there's some other

286
00:11:16,480 --> 00:11:18,079
you know proprietary admission

287
00:11:18,079 --> 00:11:20,399
controllers pretty much most security

288
00:11:20,399 --> 00:11:22,079
vendors will provide you know some

289
00:11:22,079 --> 00:11:23,839
admission controllers

290
00:11:23,839 --> 00:11:27,440
if they are focused on kubernetes itself

291
00:11:27,440 --> 00:11:29,279
but the main two if you're looking at

292
00:11:29,279 --> 00:11:32,480
open flexible and community driven tools

293
00:11:32,480 --> 00:11:35,600
the main two that come about are kiverno

294
00:11:35,600 --> 00:11:37,920
and oppa gatekeeper and there's some you

295
00:11:37,920 --> 00:11:40,079
know good research good comparisons out

296
00:11:40,079 --> 00:11:43,200
there between these tools um which i

297
00:11:43,200 --> 00:11:44,720
would encourage you to kind of you know

298
00:11:44,720 --> 00:11:46,399
do something if you just do google

299
00:11:46,399 --> 00:11:48,800
research or um you know just some quick

300
00:11:48,800 --> 00:11:51,600
searches you will see this is one by the

301
00:11:51,600 --> 00:11:54,480
way this is a youtube video by victor

302
00:11:54,480 --> 00:11:55,920
parker

303
00:11:55,920 --> 00:11:59,600
in upbound he's a developer relations uh

304
00:11:59,600 --> 00:12:00,399
you know

305
00:12:00,399 --> 00:12:03,279
expert over there and he also helps you

306
00:12:03,279 --> 00:12:05,519
know he has a very popular youtube

307
00:12:05,519 --> 00:12:07,680
channel where he posts reviews

308
00:12:07,680 --> 00:12:11,360
comparisons updates on various tools

309
00:12:11,360 --> 00:12:14,079
within the open source community so he's

310
00:12:14,079 --> 00:12:16,639
got a great and detailed video comparing

311
00:12:16,639 --> 00:12:19,040
oppa gatekeeper and kiverno

312
00:12:19,040 --> 00:12:21,360
for kubernetes policy management which i

313
00:12:21,360 --> 00:12:22,880
highly encourage

314
00:12:22,880 --> 00:12:24,480
you to take a look at

315
00:12:24,480 --> 00:12:26,079
also if you you know search there's

316
00:12:26,079 --> 00:12:29,279
other blog posts from folks uh like chip

317
00:12:29,279 --> 00:12:30,720
zoller or dell

318
00:12:30,720 --> 00:12:32,720
which go into a detailed comparison of

319
00:12:32,720 --> 00:12:35,360
the two solutions as well

320
00:12:35,360 --> 00:12:37,040
which will help you decide on which

321
00:12:37,040 --> 00:12:39,360
would be the best solution to meet your

322
00:12:39,360 --> 00:12:41,360
needs

323
00:12:41,360 --> 00:12:43,760
all right so what are the use cases you

324
00:12:43,760 --> 00:12:46,240
want to solve and look at everything

325
00:12:46,240 --> 00:12:48,800
right so the first and most important

326
00:12:48,800 --> 00:12:51,040
use case is spot security and i'll

327
00:12:51,040 --> 00:12:52,880
demonstrate you know how that works in

328
00:12:52,880 --> 00:12:55,200
action what you will want to consider

329
00:12:55,200 --> 00:12:57,760
when you're looking at pod security

330
00:12:57,760 --> 00:13:00,399
for your clusters and for your workloads

331
00:13:00,399 --> 00:13:01,760
itself

332
00:13:01,760 --> 00:13:03,680
other is to make sure that best

333
00:13:03,680 --> 00:13:06,320
practices are followed for configuration

334
00:13:06,320 --> 00:13:07,920
even things like you know making sure

335
00:13:07,920 --> 00:13:10,240
that um probes

336
00:13:10,240 --> 00:13:12,240
for health checks

337
00:13:12,240 --> 00:13:14,639
for liveness checks all of that is

338
00:13:14,639 --> 00:13:17,040
properly configured for your pods

339
00:13:17,040 --> 00:13:19,600
and workloads as well as things like

340
00:13:19,600 --> 00:13:22,240
resource quarters um your role binding

341
00:13:22,240 --> 00:13:24,720
should be as granular as possible those

342
00:13:24,720 --> 00:13:27,120
kind of things can be managed using the

343
00:13:27,120 --> 00:13:30,639
fine grain policy our back policies um

344
00:13:30,639 --> 00:13:32,720
available or you know that are possible

345
00:13:32,720 --> 00:13:35,760
with giver no another common use case is

346
00:13:35,760 --> 00:13:37,920
you know to help with namespace-based

347
00:13:37,920 --> 00:13:40,639
multi-tenancy so making sure that when

348
00:13:40,639 --> 00:13:42,720
you configure namespaces

349
00:13:42,720 --> 00:13:44,880
all of the right multi-tenant defaults

350
00:13:44,880 --> 00:13:46,959
are configured now these could be in

351
00:13:46,959 --> 00:13:49,199
know fine-grained roles and permissions

352
00:13:49,199 --> 00:13:51,920
could be resource quotas limit ranges

353
00:13:51,920 --> 00:13:54,800
network policies several other objects

354
00:13:54,800 --> 00:13:57,600
that need to be configured per namespace

355
00:13:57,600 --> 00:13:59,839
another pattern which is very powerful

356
00:13:59,839 --> 00:14:01,040
is

357
00:14:01,040 --> 00:14:03,680
allowing based on namespace labels or

358
00:14:03,680 --> 00:14:06,880
based on some other trigger to allow you

359
00:14:06,880 --> 00:14:08,959
know cluster-wide configurations to be

360
00:14:08,959 --> 00:14:11,920
automatically created which

361
00:14:11,920 --> 00:14:14,000
you know this uh eliminates the need to

362
00:14:14,000 --> 00:14:16,639
give extra permissions to namespace

363
00:14:16,639 --> 00:14:20,000
owners or cluster-wide resources

364
00:14:20,000 --> 00:14:21,360
other best practices can be

365
00:14:21,360 --> 00:14:24,320
auto-labeling of resources automatically

366
00:14:24,320 --> 00:14:27,120
injecting site cars certificates

367
00:14:27,120 --> 00:14:29,440
of or sidecars for logging monitoring

368
00:14:29,440 --> 00:14:31,040
security

369
00:14:31,040 --> 00:14:33,279
taking advantage of the generate

370
00:14:33,279 --> 00:14:36,240
capabilities in kiverno to be able to do

371
00:14:36,240 --> 00:14:38,240
things like automatically generating new

372
00:14:38,240 --> 00:14:40,560
configurations on the fly and even

373
00:14:40,560 --> 00:14:43,199
validating image signatures

374
00:14:43,199 --> 00:14:44,959
that's a new use case we have introduced

375
00:14:44,959 --> 00:14:47,760
into caverno where you can now easily

376
00:14:47,760 --> 00:14:49,279
validate

377
00:14:49,279 --> 00:14:52,399
signatures container image signatures at

378
00:14:52,399 --> 00:14:54,240
admission controls

379
00:14:54,240 --> 00:14:57,040
using tools like cosign from the six

380
00:14:57,040 --> 00:14:59,120
store community which is another linux

381
00:14:59,120 --> 00:15:00,639
foundation tool

382
00:15:00,639 --> 00:15:02,800
so lots of use cases and constantly

383
00:15:02,800 --> 00:15:05,760
growing in terms of community uh and you

384
00:15:05,760 --> 00:15:08,240
know like the things that are coming up

385
00:15:08,240 --> 00:15:10,560
um you know with good folks are always

386
00:15:10,560 --> 00:15:12,959
bringing new ideas and new things which

387
00:15:12,959 --> 00:15:16,160
we can solve with kiberno

388
00:15:16,160 --> 00:15:18,800
all right so now let's talk you know we

389
00:15:18,800 --> 00:15:20,800
talked about why policies matter for

390
00:15:20,800 --> 00:15:23,839
kubernetes why kivono matters what kind

391
00:15:23,839 --> 00:15:26,639
of use cases it can address but let's

392
00:15:26,639 --> 00:15:29,120
dive a little bit deeper into cavernous

393
00:15:29,120 --> 00:15:31,519
architecture and what this looks like

394
00:15:31,519 --> 00:15:33,440
you know for your live cluster itself

395
00:15:33,440 --> 00:15:34,320
right

396
00:15:34,320 --> 00:15:35,040
so

397
00:15:35,040 --> 00:15:37,680
kiverno works as an admission controller

398
00:15:37,680 --> 00:15:40,160
in kubernetes and what this means is

399
00:15:40,160 --> 00:15:42,800
whenever there's you know and

400
00:15:42,800 --> 00:15:45,680
in kubernetes any request any api

401
00:15:45,680 --> 00:15:46,720
request

402
00:15:46,720 --> 00:15:49,040
goes through several phases of what's

403
00:15:49,040 --> 00:15:51,600
known as admission controls in fact let

404
00:15:51,600 --> 00:15:53,519
me do this i'm going to stop sharing the

405
00:15:53,519 --> 00:15:56,160
slides and i'm going to actually go to

406
00:15:56,160 --> 00:15:58,320
you know the kiverno docs and we'll take

407
00:15:58,320 --> 00:16:00,000
a look at the architecture there and

408
00:16:00,000 --> 00:16:01,920
we'll also kind of livestream you know

409
00:16:01,920 --> 00:16:02,959
install

410
00:16:02,959 --> 00:16:04,160
kiverno

411
00:16:04,160 --> 00:16:06,800
onto a test cluster that i have and see

412
00:16:06,800 --> 00:16:09,839
it live in

413
00:18:33,440 --> 00:18:36,799
these animals which are configured

414
00:18:36,799 --> 00:18:37,919
um

415
00:18:37,919 --> 00:18:39,919
which will then the

416
00:18:39,919 --> 00:18:42,640
defaults and also kind of install these

417
00:18:42,640 --> 00:18:44,400
on our cluster right so let's go to

418
00:18:44,400 --> 00:18:47,120
installation

419
00:18:51,039 --> 00:18:52,480
and

420
00:18:52,480 --> 00:18:54,240
here we go so the first part of the

421
00:18:54,240 --> 00:18:56,320
installation shows how you can install

422
00:18:56,320 --> 00:18:58,400
from the helm chart but like i said what

423
00:18:58,400 --> 00:19:00,640
we'll do just for simplicity here i just

424
00:19:00,640 --> 00:19:03,679
want to pull down everything uh from my

425
00:19:03,679 --> 00:19:05,840
ammos right so i'm going to go and say

426
00:19:05,840 --> 00:19:07,679
install keyboard now using yamls we'll

427
00:19:07,679 --> 00:19:10,080
copy this command and we'll run this on

428
00:19:10,080 --> 00:19:13,039
my cluster to see what happens

429
00:19:13,039 --> 00:19:14,960
so at this point it's gonna you know

430
00:19:14,960 --> 00:19:18,480
what this will take a few seconds and

431
00:19:18,480 --> 00:19:20,480
this command will actually go out you

432
00:19:20,480 --> 00:19:22,799
know pull down a bunch of yamls

433
00:19:22,799 --> 00:19:26,000
oops it says not able to read so

434
00:19:26,000 --> 00:19:28,000
actually maybe this command

435
00:19:28,000 --> 00:19:30,640
i believe has just changed in the recent

436
00:19:30,640 --> 00:19:32,880
release so let me go ahead and

437
00:19:32,880 --> 00:19:37,120
update this so this should be configs

438
00:19:37,520 --> 00:19:41,520
so we'll go ahead and try this again

439
00:19:43,679 --> 00:19:46,080
all right let's try one more thing which

440
00:19:46,080 --> 00:19:47,760
is this config

441
00:19:47,760 --> 00:19:50,000
which is uh what i believe this

442
00:19:50,000 --> 00:19:52,480
directory should be at and hopefully

443
00:19:52,480 --> 00:19:54,400
that works and we will pull down these

444
00:19:54,400 --> 00:19:56,880
yamls if not we'll try another way of

445
00:19:56,880 --> 00:19:59,360
installing there we go so now these you

446
00:19:59,360 --> 00:20:01,520
know the yamls are coming down and as

447
00:20:01,520 --> 00:20:03,200
you can see kiberno is going to you know

448
00:20:03,200 --> 00:20:04,559
kind of install

449
00:20:04,559 --> 00:20:05,440
some

450
00:20:05,440 --> 00:20:07,039
custom

451
00:20:07,039 --> 00:20:08,320
resources

452
00:20:08,320 --> 00:20:10,080
as well as you know it's going to create

453
00:20:10,080 --> 00:20:10,880
a

454
00:20:10,880 --> 00:20:13,440
number of default configurations

455
00:20:13,440 --> 00:20:16,000
for imos right so if you look at what

456
00:20:16,000 --> 00:20:18,480
the installation pulls down over here we

457
00:20:18,480 --> 00:20:19,600
can see

458
00:20:19,600 --> 00:20:21,520
let me make this a little bit bigger so

459
00:20:21,520 --> 00:20:22,880
it's visible

460
00:20:22,880 --> 00:20:23,679
um

461
00:20:23,679 --> 00:20:27,120
the installation will you know put down

462
00:20:27,120 --> 00:20:28,880
a bunch of you know

463
00:20:28,880 --> 00:20:30,320
resources

464
00:20:30,320 --> 00:20:32,480
uh in the cluster itself

465
00:20:32,480 --> 00:20:35,760
so let's uh go ahead and see

466
00:20:35,760 --> 00:20:39,679
i think there's a picture here somewhere

467
00:20:40,400 --> 00:20:41,919
let's go back to the installation

468
00:20:41,919 --> 00:20:44,919
section

469
00:20:51,120 --> 00:20:52,720
yeah so this is showing the different

470
00:20:52,720 --> 00:20:55,280
kinds of insulation and then

471
00:20:55,280 --> 00:20:57,520
um in here this is the picture i was

472
00:20:57,520 --> 00:21:00,159
looking for which shows how the caverno

473
00:21:00,159 --> 00:21:01,440
deployment

474
00:21:01,440 --> 00:21:04,000
the service the pod gets created and

475
00:21:04,000 --> 00:21:06,240
once caverno is up and running is it

476
00:21:06,240 --> 00:21:08,600
will automatically create you know other

477
00:21:08,600 --> 00:21:10,240
configurations

478
00:21:10,240 --> 00:21:12,320
like a validating and mutating webhook

479
00:21:12,320 --> 00:21:14,960
configuration some cluster roles role

480
00:21:14,960 --> 00:21:16,960
bindings things like that right so all

481
00:21:16,960 --> 00:21:18,559
of this and even the certificates

482
00:21:18,559 --> 00:21:21,440
necessary for kiverno are automatically

483
00:21:21,440 --> 00:21:22,960
managed

484
00:21:22,960 --> 00:21:24,480
all right so let's go ahead and you know

485
00:21:24,480 --> 00:21:26,240
now that this is done

486
00:21:26,240 --> 00:21:28,840
let's see what this you know looks like

487
00:21:28,840 --> 00:21:32,240
so if we do cuddle

488
00:21:32,240 --> 00:21:34,159
get namespace

489
00:21:34,159 --> 00:21:36,400
we will see that in you know our my

490
00:21:36,400 --> 00:21:38,480
cluster in my mini cube cluster now i

491
00:21:38,480 --> 00:21:41,679
have the kiverno namespace and if i do

492
00:21:41,679 --> 00:21:42,960
minus n

493
00:21:42,960 --> 00:21:46,320
iverno and do get you know pods i should

494
00:21:46,320 --> 00:21:48,640
see there's another there's an extra

495
00:21:48,640 --> 00:21:50,480
there's a pod running which is still

496
00:21:50,480 --> 00:21:52,159
initializing

497
00:21:52,159 --> 00:21:54,480
and if i also do you know we can kind of

498
00:21:54,480 --> 00:21:56,880
look at the logs for the pod of course

499
00:21:56,880 --> 00:21:59,360
so if we do logs you know deployment

500
00:21:59,360 --> 00:22:00,640
given

501
00:22:00,640 --> 00:22:02,640
once that pod is up and running we'll

502
00:22:02,640 --> 00:22:04,320
see you know some logs come out and

503
00:22:04,320 --> 00:22:06,320
kiberno should be ready right

504
00:22:06,320 --> 00:22:08,720
so we see here kiverno actually came up

505
00:22:08,720 --> 00:22:11,120
it does a leader election so leader

506
00:22:11,120 --> 00:22:12,880
election will make sure that if there's

507
00:22:12,880 --> 00:22:15,679
multiple instances of kevin running some

508
00:22:15,679 --> 00:22:17,520
of the responsibilities are shared so

509
00:22:17,520 --> 00:22:20,480
you can run ivano in an aha manner and

510
00:22:20,480 --> 00:22:22,720
now kiberno is up and running but at

511
00:22:22,720 --> 00:22:24,559
this point even though i have kiverno

512
00:22:24,559 --> 00:22:26,400
running i don't have any policies

513
00:22:26,400 --> 00:22:28,640
configured right so what i want to show

514
00:22:28,640 --> 00:22:31,840
you is what happens in kubernetes if

515
00:22:31,840 --> 00:22:34,880
you're running without pod security and

516
00:22:34,880 --> 00:22:36,559
this is a very important thing to

517
00:22:36,559 --> 00:22:39,760
understand in terms of how containers

518
00:22:39,760 --> 00:22:42,240
and pods work on kubernetes i'm going to

519
00:22:42,240 --> 00:22:44,159
run a command

520
00:22:44,159 --> 00:22:46,640
which is going to actually

521
00:22:46,640 --> 00:22:48,240
um you know

522
00:22:48,240 --> 00:22:49,280
run

523
00:22:49,280 --> 00:22:50,400
something

524
00:22:50,400 --> 00:22:53,039
which an attacker or somebody who's

525
00:22:53,039 --> 00:22:54,559
trying to you know

526
00:22:54,559 --> 00:22:57,200
let's say get access to your cluster can

527
00:22:57,200 --> 00:23:00,159
potentially do so in this case this this

528
00:23:00,159 --> 00:23:02,480
command and the person doing this

529
00:23:02,480 --> 00:23:04,960
only has privileges to

530
00:23:04,960 --> 00:23:07,679
uh run pods within the cluster itself

531
00:23:07,679 --> 00:23:09,679
right so they don't have you know

532
00:23:09,679 --> 00:23:12,640
permissions necessarily to run um other

533
00:23:12,640 --> 00:23:14,880
things but because we haven't set proper

534
00:23:14,880 --> 00:23:18,000
security kubernetes by default does not

535
00:23:18,000 --> 00:23:21,200
block pods from uh looking you know

536
00:23:21,200 --> 00:23:24,000
getting into the privilege mode they do

537
00:23:24,000 --> 00:23:26,960
not block pods from running as root user

538
00:23:26,960 --> 00:23:29,120
so things like that are allowed right so

539
00:23:29,120 --> 00:23:31,120
when i run this clock command in my

540
00:23:31,120 --> 00:23:33,360
cluster what i'm seeing is it's going to

541
00:23:33,360 --> 00:23:35,520
take a few seconds but it's actually

542
00:23:35,520 --> 00:23:37,039
going to bring up a cop

543
00:23:37,039 --> 00:23:39,440
pod it's going to you know replace its

544
00:23:39,440 --> 00:23:41,840
configuration to actually

545
00:23:41,840 --> 00:23:43,760
make sure that you know privileged is

546
00:23:43,760 --> 00:23:46,159
set to true in the configuration

547
00:23:46,159 --> 00:23:49,120
and then it's going to do an ns enter

548
00:23:49,120 --> 00:23:51,279
and actually you know mount you know

549
00:23:51,279 --> 00:23:54,159
proc one you know from there right so

550
00:23:54,159 --> 00:23:56,240
interestingly so now i see i have a bash

551
00:23:56,240 --> 00:23:59,440
shell which the spot gave me and if i do

552
00:23:59,440 --> 00:24:02,400
uh you know go to you know slash

553
00:24:02,400 --> 00:24:05,520
i do an ls i have access to pretty much

554
00:24:05,520 --> 00:24:07,440
all of my host file systems at this

555
00:24:07,440 --> 00:24:10,640
point if i go to proc um

556
00:24:10,640 --> 00:24:13,440
and let's see what we find over there

557
00:24:13,440 --> 00:24:15,440
and what we have visibility to if we're

558
00:24:15,440 --> 00:24:17,760
even allowed to do this so as you see by

559
00:24:17,760 --> 00:24:20,159
default now i'm in here i can kind of

560
00:24:20,159 --> 00:24:21,520
list everything

561
00:24:21,520 --> 00:24:23,840
and i have pretty much access to you

562
00:24:23,840 --> 00:24:25,760
know this cluster

563
00:24:25,760 --> 00:24:28,320
and just to make sure that we are root

564
00:24:28,320 --> 00:24:31,360
if i do who am i uh over here it's

565
00:24:31,360 --> 00:24:33,600
telling me i'm running as root right so

566
00:24:33,600 --> 00:24:36,000
certainly not good from a security point

567
00:24:36,000 --> 00:24:38,240
of view because anybody who can run a

568
00:24:38,240 --> 00:24:41,039
pod in this case is now able to

569
00:24:41,039 --> 00:24:44,400
um you know get to to run that pod get

570
00:24:44,400 --> 00:24:46,799
access to the host file system or run a

571
00:24:46,799 --> 00:24:48,880
pod with privileges which can get access

572
00:24:48,880 --> 00:24:51,360
to the host file system and from there

573
00:24:51,360 --> 00:24:53,520
you know even get to things like if i go

574
00:24:53,520 --> 00:24:56,799
to hc kubernetes uh this is where the

575
00:24:56,799 --> 00:24:59,360
kubernetes installation files are this

576
00:24:59,360 --> 00:25:01,520
is where i can get to the secrets for my

577
00:25:01,520 --> 00:25:04,000
cluster uh including the certificates

578
00:25:04,000 --> 00:25:06,320
the root ca and things like that used

579
00:25:06,320 --> 00:25:08,240
and of course i can get you know access

580
00:25:08,240 --> 00:25:11,600
to more advanced things from here right

581
00:25:11,600 --> 00:25:13,279
so what do we do and how do we prevent

582
00:25:13,279 --> 00:25:15,919
this so let's exit out of this pod

583
00:25:15,919 --> 00:25:18,320
and you know see what we can do with

584
00:25:18,320 --> 00:25:20,720
giver know itself so i'm going to go

585
00:25:20,720 --> 00:25:22,400
ahead and delete this part because we'll

586
00:25:22,400 --> 00:25:25,679
try to run this command again later so

587
00:25:25,679 --> 00:25:27,760
let's go ahead and

588
00:25:27,760 --> 00:25:30,240
clean up

589
00:25:32,000 --> 00:25:35,520
let me get that command right

590
00:25:38,000 --> 00:25:39,840
so we just want to delete this part

591
00:25:39,840 --> 00:25:43,360
which we ran which got root access and

592
00:25:43,360 --> 00:25:45,600
then what we're going to do is i'm going

593
00:25:45,600 --> 00:25:48,720
to install some pod security policies

594
00:25:48,720 --> 00:25:50,400
which should help us you know kind of

595
00:25:50,400 --> 00:25:53,919
promote again best practices and uh help

596
00:25:53,919 --> 00:25:56,159
prevent this from happening right so

597
00:25:56,159 --> 00:25:58,880
going back to the caverno in a website

598
00:25:58,880 --> 00:26:01,360
what i want to look for here is actually

599
00:26:01,360 --> 00:26:04,000
i'm going to go to the policies library

600
00:26:04,000 --> 00:26:07,679
and in this case we're going to see

601
00:26:07,679 --> 00:26:09,440
you know a bunch of default policies

602
00:26:09,440 --> 00:26:12,480
what i want to select is spot security

603
00:26:12,480 --> 00:26:14,240
um and in here

604
00:26:14,240 --> 00:26:16,960
so if i go to pod security just click on

605
00:26:16,960 --> 00:26:19,600
that it will show me my default pod

606
00:26:19,600 --> 00:26:21,600
security policies

607
00:26:21,600 --> 00:26:24,000
and by the way in kubernetes there's

608
00:26:24,000 --> 00:26:26,640
something called pod security standards

609
00:26:26,640 --> 00:26:28,960
which define the default set of policies

610
00:26:28,960 --> 00:26:31,360
which are recommended there's two levels

611
00:26:31,360 --> 00:26:33,600
there's baseline and privilege but what

612
00:26:33,600 --> 00:26:35,279
we're going to do in this case is we're

613
00:26:35,279 --> 00:26:37,840
just going to copy again this command

614
00:26:37,840 --> 00:26:40,240
which can install all pod security

615
00:26:40,240 --> 00:26:42,640
policies and which will also kind of put

616
00:26:42,640 --> 00:26:45,679
things in enforce mode um into our

617
00:26:45,679 --> 00:26:48,400
cluster right so let's copy that command

618
00:26:48,400 --> 00:26:50,880
and let's go back to our shell

619
00:26:50,880 --> 00:26:53,200
and we'll try and run this command

620
00:26:53,200 --> 00:26:55,760
which you know is going to pull down so

621
00:26:55,760 --> 00:26:57,440
what this is doing is it's first going

622
00:26:57,440 --> 00:27:00,400
to call customize on this repo

623
00:27:00,400 --> 00:27:02,480
which is grabbing some policies from the

624
00:27:02,480 --> 00:27:05,200
kiverno repo for pod security and then

625
00:27:05,200 --> 00:27:07,279
it's going to just do pipe them to coop

626
00:27:07,279 --> 00:27:10,480
cuddle and do an apply minus f right in

627
00:27:10,480 --> 00:27:13,279
a few seconds we will see that all 15 of

628
00:27:13,279 --> 00:27:15,360
these policies if we go back while this

629
00:27:15,360 --> 00:27:17,679
is happening we can go back to the web

630
00:27:17,679 --> 00:27:18,960
page and kind of

631
00:27:18,960 --> 00:27:21,360
browse both security policies

632
00:27:21,360 --> 00:27:24,399
um most of these policies uh will get

633
00:27:24,399 --> 00:27:26,399
installed or all of these will get

634
00:27:26,399 --> 00:27:28,240
installed and they will get in for

635
00:27:28,240 --> 00:27:30,320
installment enforce mode

636
00:27:30,320 --> 00:27:32,320
onto our cluster itself

637
00:27:32,320 --> 00:27:33,200
so

638
00:27:33,200 --> 00:27:35,039
we see now these are get getting

639
00:27:35,039 --> 00:27:36,159
installed

640
00:27:36,159 --> 00:27:38,480
and

641
00:27:38,640 --> 00:27:41,279
okay so let's now

642
00:27:41,279 --> 00:27:43,360
do a good cuddle

643
00:27:43,360 --> 00:27:44,480
um

644
00:27:44,480 --> 00:27:47,520
oops i keep misspelling this

645
00:27:47,520 --> 00:27:49,840
so

646
00:27:50,320 --> 00:27:52,640
i'm going to do a getc paul

647
00:27:52,640 --> 00:27:55,200
so which nc paul is just a short name

648
00:27:55,200 --> 00:27:57,679
for cluster policies which will show us

649
00:27:57,679 --> 00:27:59,120
you know the you know all of the

650
00:27:59,120 --> 00:28:00,720
policies which are installed in our

651
00:28:00,720 --> 00:28:03,279
cluster so we see that we have all of

652
00:28:03,279 --> 00:28:05,919
these pod security policies and all the

653
00:28:05,919 --> 00:28:07,600
other thing you can see is some of them

654
00:28:07,600 --> 00:28:09,600
are saying ready and the others are not

655
00:28:09,600 --> 00:28:11,679
saying ready right so what happens is

656
00:28:11,679 --> 00:28:14,880
when kiverno installs these policies

657
00:28:14,880 --> 00:28:16,720
it will automatically

658
00:28:16,720 --> 00:28:19,039
uh update your

659
00:28:19,039 --> 00:28:21,360
web book configurations with these

660
00:28:21,360 --> 00:28:23,600
policies and make sure that you know the

661
00:28:23,600 --> 00:28:26,480
web book is configured to allow all of

662
00:28:26,480 --> 00:28:28,399
the operations that these policies

663
00:28:28,399 --> 00:28:30,559
require so

664
00:28:30,559 --> 00:28:32,320
we'll give it a few seconds

665
00:28:32,320 --> 00:28:34,399
for and so now all of these policies are

666
00:28:34,399 --> 00:28:36,880
ready and we should be able to we should

667
00:28:36,880 --> 00:28:39,679
be good in terms of at least making sure

668
00:28:39,679 --> 00:28:41,600
that we have default pod security

669
00:28:41,600 --> 00:28:42,960
configured

670
00:28:42,960 --> 00:28:45,520
into our cluster right so what does this

671
00:28:45,520 --> 00:28:48,000
mean so let's go ahead and now again try

672
00:28:48,000 --> 00:28:49,840
that same command again

673
00:28:49,840 --> 00:28:51,039
um

674
00:28:51,039 --> 00:28:53,440
so we'll do group cuddle

675
00:28:53,440 --> 00:28:55,360
and we'll do run

676
00:28:55,360 --> 00:28:57,279
and this was you know the command which

677
00:28:57,279 --> 00:28:59,520
let us run as root so if i run this

678
00:28:59,520 --> 00:29:02,320
again in my cluster what i would expect

679
00:29:02,320 --> 00:29:04,559
at this point is that kiverno is going

680
00:29:04,559 --> 00:29:07,360
to block these and reject that part from

681
00:29:07,360 --> 00:29:09,440
running right and sure enough so now

682
00:29:09,440 --> 00:29:11,760
what we see is there's several you know

683
00:29:11,760 --> 00:29:14,640
policies which got violated it's saying

684
00:29:14,640 --> 00:29:17,200
hey you cannot run uh using the host

685
00:29:17,200 --> 00:29:19,840
namespace it's about that's of course

686
00:29:19,840 --> 00:29:21,440
one of the ways to get uh you know

687
00:29:21,440 --> 00:29:24,080
access to host resources you cannot run

688
00:29:24,080 --> 00:29:26,640
a part as privilege mode so you cannot

689
00:29:26,640 --> 00:29:28,480
mount you know certain privileged ports

690
00:29:28,480 --> 00:29:31,279
you cannot get to other file systems

691
00:29:31,279 --> 00:29:34,080
and you cannot run as root right so all

692
00:29:34,080 --> 00:29:36,399
of these things are now being prevented

693
00:29:36,399 --> 00:29:38,960
by default just you know by installing

694
00:29:38,960 --> 00:29:41,679
these basic setup policies so certainly

695
00:29:41,679 --> 00:29:43,840
pod security is a very important use

696
00:29:43,840 --> 00:29:46,080
case and if you don't have pod security

697
00:29:46,080 --> 00:29:49,039
configured i would highly recommend that

698
00:29:49,039 --> 00:29:52,159
you use you know either kiverno or other

699
00:29:52,159 --> 00:29:54,480
ways of configuring pod security

700
00:29:54,480 --> 00:29:56,640
and making sure this is properly

701
00:29:56,640 --> 00:29:58,640
enforced on your clusters right

702
00:29:58,640 --> 00:29:59,760
all right so let's go back to the

703
00:29:59,760 --> 00:30:01,520
presentation and we'll kind of you know

704
00:30:01,520 --> 00:30:03,679
we already covered some of this of how

705
00:30:03,679 --> 00:30:05,200
kiberno works

706
00:30:05,200 --> 00:30:07,760
what it can do within that but what else

707
00:30:07,760 --> 00:30:09,919
can we do with cavernou policies and

708
00:30:09,919 --> 00:30:12,960
we'll now go deeper uh into some of the

709
00:30:12,960 --> 00:30:15,600
policy definitions uh what those look

710
00:30:15,600 --> 00:30:17,360
like and what you can do

711
00:30:17,360 --> 00:30:19,840
so every policy in kiverno has this

712
00:30:19,840 --> 00:30:22,320
basic structure right so a policy is a

713
00:30:22,320 --> 00:30:24,559
set of rules and rules can match

714
00:30:24,559 --> 00:30:27,200
resources exclude resources

715
00:30:27,200 --> 00:30:28,399
and then

716
00:30:28,399 --> 00:30:30,480
you know once you select which resources

717
00:30:30,480 --> 00:30:32,880
you want the policy to operate on

718
00:30:32,880 --> 00:30:36,240
then you can mutate verify images

719
00:30:36,240 --> 00:30:39,360
validate resources or generate resources

720
00:30:39,360 --> 00:30:41,440
when you validate resources you know

721
00:30:41,440 --> 00:30:43,919
kiberno can either block and enforce

722
00:30:43,919 --> 00:30:46,640
that policy or it can allow that

723
00:30:46,640 --> 00:30:49,440
configuration based on your setting

724
00:30:49,440 --> 00:30:52,000
and later you know report a violation

725
00:30:52,000 --> 00:30:54,320
for that particular policy it's a lot of

726
00:30:54,320 --> 00:30:56,720
flexibility and this makes it easy to

727
00:30:56,720 --> 00:30:59,039
roll out kiverno into your production

728
00:30:59,039 --> 00:31:01,600
cluster without impacting any existing

729
00:31:01,600 --> 00:31:04,320
workload

730
00:31:04,320 --> 00:31:06,559
so this is an example of a very simple

731
00:31:06,559 --> 00:31:09,600
policy uh which is just checking and

732
00:31:09,600 --> 00:31:12,159
enforcing that a particular label in

733
00:31:12,159 --> 00:31:14,960
this case you know app kubernetes io

734
00:31:14,960 --> 00:31:17,679
slash name so best practice is to label

735
00:31:17,679 --> 00:31:19,919
all workloads and give them a name so

736
00:31:19,919 --> 00:31:22,960
it's enforcing that this policy is set

737
00:31:22,960 --> 00:31:26,559
um and all this label is set um on every

738
00:31:26,559 --> 00:31:28,480
pod now one interesting thing with

739
00:31:28,480 --> 00:31:31,279
kiverno is because again of it being

740
00:31:31,279 --> 00:31:33,760
kubernetes native you when you write a

741
00:31:33,760 --> 00:31:36,240
policy and a pod that policy is

742
00:31:36,240 --> 00:31:38,320
automatically applied to all pod

743
00:31:38,320 --> 00:31:40,720
controllers even non-standard even

744
00:31:40,720 --> 00:31:43,679
custom pod controllers um like you know

745
00:31:43,679 --> 00:31:45,600
if you have a argo deployment or other

746
00:31:45,600 --> 00:31:46,880
things

747
00:31:46,880 --> 00:31:49,120
you know those can also work with

748
00:31:49,120 --> 00:31:51,440
caverna policies very easily and you

749
00:31:51,440 --> 00:31:53,200
don't have to write policies on every

750
00:31:53,200 --> 00:31:55,360
pod controller but kivarno does all of

751
00:31:55,360 --> 00:31:58,000
that heavy lifting underneath the covers

752
00:31:58,000 --> 00:31:58,840
for

753
00:31:58,840 --> 00:32:01,919
you so this is another example of a

754
00:32:01,919 --> 00:32:04,559
policy and as you know in kubernetes you

755
00:32:04,559 --> 00:32:06,240
know several things get you know

756
00:32:06,240 --> 00:32:08,880
deprecated over different versions so

757
00:32:08,880 --> 00:32:11,039
one of the thing is that's happening is

758
00:32:11,039 --> 00:32:13,360
there have been several api objects mark

759
00:32:13,360 --> 00:32:14,799
for deprecation

760
00:32:14,799 --> 00:32:18,240
and with 1.25 these objects will

761
00:32:18,240 --> 00:32:20,399
actually be removed so how do you know

762
00:32:20,399 --> 00:32:22,559
in your clusters who's using those and

763
00:32:22,559 --> 00:32:24,880
how do you inform them right so kiverno

764
00:32:24,880 --> 00:32:26,960
can solve that problem for you

765
00:32:26,960 --> 00:32:29,440
using this very simple policy what it

766
00:32:29,440 --> 00:32:31,679
will do is and now it will be able to

767
00:32:31,679 --> 00:32:34,640
detect and see that you know if anyone's

768
00:32:34,640 --> 00:32:36,640
using these resources

769
00:32:36,640 --> 00:32:39,039
it can create a policy violation and

770
00:32:39,039 --> 00:32:41,200
those violations will you know show up

771
00:32:41,200 --> 00:32:43,120
even in the name space that that user

772
00:32:43,120 --> 00:32:45,200
has and through external management

773
00:32:45,200 --> 00:32:47,120
tools like what nirmata provides and

774
00:32:47,120 --> 00:32:49,200
other companies provide you can even

775
00:32:49,200 --> 00:32:52,080
send you know alerts notifications

776
00:32:52,080 --> 00:32:54,559
um you can kind of inform those

777
00:32:54,559 --> 00:32:57,519
in fact you know some features uh also

778
00:32:57,519 --> 00:32:59,519
allow you to create jira tickets and

779
00:32:59,519 --> 00:33:00,880
things like that

780
00:33:00,880 --> 00:33:04,159
for the appropriate owners right so very

781
00:33:04,159 --> 00:33:06,320
simple to write but very powerful in

782
00:33:06,320 --> 00:33:08,399
what it can do

783
00:33:08,399 --> 00:33:10,720
other policies can actually mutate

784
00:33:10,720 --> 00:33:13,200
configurations so this is a very a

785
00:33:13,200 --> 00:33:16,320
simple example of mutating um a pod

786
00:33:16,320 --> 00:33:18,000
configuration again and just you know

787
00:33:18,000 --> 00:33:20,080
based on the port of being able to

788
00:33:20,080 --> 00:33:23,360
default things to a port number um but

789
00:33:23,360 --> 00:33:25,919
you can even you know do very complex

790
00:33:25,919 --> 00:33:29,200
mutations turkey verno using you know

791
00:33:29,200 --> 00:33:32,399
either the json patch syntax uh which is

792
00:33:32,399 --> 00:33:35,760
based on an rfc uh or you can also use

793
00:33:35,760 --> 00:33:38,080
you know a patch strategic merge which

794
00:33:38,080 --> 00:33:40,799
again is very native to kubernetes the

795
00:33:40,799 --> 00:33:43,360
kubernetes api server supports a

796
00:33:43,360 --> 00:33:45,519
strategic merge patch and cavernous

797
00:33:45,519 --> 00:33:47,679
fully supports that as well

798
00:33:47,679 --> 00:33:49,679
to be able to merge

799
00:33:49,679 --> 00:33:52,080
various types of kubernetes objects

800
00:33:52,080 --> 00:33:55,840
based on their schema definitions

801
00:33:56,880 --> 00:33:59,279
the other type of policy in kiverno is a

802
00:33:59,279 --> 00:34:01,760
generate policy and what this is good

803
00:34:01,760 --> 00:34:04,840
for is to automatically create default

804
00:34:04,840 --> 00:34:07,760
resources or even you know to create

805
00:34:07,760 --> 00:34:10,639
cluster wide resources based on a change

806
00:34:10,639 --> 00:34:12,639
in the configuration or based on when

807
00:34:12,639 --> 00:34:15,199
some other resources are created the

808
00:34:15,199 --> 00:34:17,040
most common example again is when a

809
00:34:17,040 --> 00:34:19,280
namespace is created

810
00:34:19,280 --> 00:34:21,040
you can then trigger automatic

811
00:34:21,040 --> 00:34:23,280
configurations for that namespace

812
00:34:23,280 --> 00:34:25,599
another example is when you know someone

813
00:34:25,599 --> 00:34:28,719
creates a label on a service or a label

814
00:34:28,719 --> 00:34:31,520
on a namespace you can use that now to

815
00:34:31,520 --> 00:34:34,239
create some cluster-wide configuration

816
00:34:34,239 --> 00:34:36,159
for that you know maybe it's an aco

817
00:34:36,159 --> 00:34:39,280
policy things like that automatically

818
00:34:39,280 --> 00:34:41,119
within your cluster right so there's

819
00:34:41,119 --> 00:34:43,440
several you know very interesting use

820
00:34:43,440 --> 00:34:45,440
cases and ideas coming up in the

821
00:34:45,440 --> 00:34:46,560
community

822
00:34:46,560 --> 00:34:49,199
and certainly we expand the library that

823
00:34:49,199 --> 00:34:51,280
i showed with policies we're constantly

824
00:34:51,280 --> 00:34:53,520
adding you know best practice and now

825
00:34:53,520 --> 00:34:56,399
these type of examples there as well um

826
00:34:56,399 --> 00:34:59,760
for you know the community

827
00:34:59,760 --> 00:35:02,079
a new kind of policy we just introduced

828
00:35:02,079 --> 00:35:04,160
in kiverno 1.4

829
00:35:04,160 --> 00:35:07,359
is a image verification policy so today

830
00:35:07,359 --> 00:35:09,040
of course you know you may have heard a

831
00:35:09,040 --> 00:35:10,960
lot of these headlines and some of these

832
00:35:10,960 --> 00:35:13,839
stories about supply chain security and

833
00:35:13,839 --> 00:35:16,400
why that has become such an important uh

834
00:35:16,400 --> 00:35:19,680
you know thing to uh to pay attention to

835
00:35:19,680 --> 00:35:22,880
within your overall security you know um

836
00:35:22,880 --> 00:35:25,920
strategy as well as you know the posture

837
00:35:25,920 --> 00:35:28,640
of your overall systems right so more

838
00:35:28,640 --> 00:35:30,800
and more attackers are kind of you know

839
00:35:30,800 --> 00:35:33,920
using ci cd systems as the point of

840
00:35:33,920 --> 00:35:36,560
entry and it's really important to know

841
00:35:36,560 --> 00:35:37,920
that what you're deploying in your

842
00:35:37,920 --> 00:35:41,760
cluster is validated trusted uh and can

843
00:35:41,760 --> 00:35:44,480
be you know is actually the container

844
00:35:44,480 --> 00:35:47,359
or the image that you think it is so if

845
00:35:47,359 --> 00:35:49,280
today if you pull an image whether it's

846
00:35:49,280 --> 00:35:52,320
by tag or by digest really you don't

847
00:35:52,320 --> 00:35:54,320
know if somebody something can intercept

848
00:35:54,320 --> 00:35:56,720
that request and can you know

849
00:35:56,720 --> 00:35:59,520
maybe there's a different image

850
00:35:59,520 --> 00:36:01,520
that you know is trying to use the same

851
00:36:01,520 --> 00:36:04,079
tag or uses the same name and it can

852
00:36:04,079 --> 00:36:06,000
impersonate the image that you are

853
00:36:06,000 --> 00:36:08,640
expecting to get or even if it's a third

854
00:36:08,640 --> 00:36:10,960
party image you don't know if that was

855
00:36:10,960 --> 00:36:13,920
actually signed scanned validated

856
00:36:13,920 --> 00:36:15,839
and you know is ready to be deployed

857
00:36:15,839 --> 00:36:18,480
into a production cluster so by signing

858
00:36:18,480 --> 00:36:20,000
images

859
00:36:20,000 --> 00:36:22,640
you can get some basic security in place

860
00:36:22,640 --> 00:36:25,200
to be able to you know make sure that

861
00:36:25,200 --> 00:36:28,320
only images signed by your private keys

862
00:36:28,320 --> 00:36:30,400
are the ones that are defined and this

863
00:36:30,400 --> 00:36:33,680
policy again is a very simple example

864
00:36:33,680 --> 00:36:36,079
of how you can you know use a single key

865
00:36:36,079 --> 00:36:38,800
but cavernous supports multiple keys

866
00:36:38,800 --> 00:36:40,480
one of the new features we've added in

867
00:36:40,480 --> 00:36:43,200
1.5 is to support at the stations so

868
00:36:43,200 --> 00:36:45,760
attestations are signed metadata which

869
00:36:45,760 --> 00:36:47,280
can even do things like you know for

870
00:36:47,280 --> 00:36:49,680
your vulnerability scans

871
00:36:49,680 --> 00:36:51,839
for your code reviews other things that

872
00:36:51,839 --> 00:36:54,240
you want to enforce for production now

873
00:36:54,240 --> 00:36:56,560
you have the ability to make sure

874
00:36:56,560 --> 00:36:58,720
that those settings are in place before

875
00:36:58,720 --> 00:37:00,560
somebody deploys something in your

876
00:37:00,560 --> 00:37:03,359
production cluster

877
00:37:03,359 --> 00:37:05,440
all right so those are the types of

878
00:37:05,440 --> 00:37:08,480
policies that are available in given but

879
00:37:08,480 --> 00:37:10,720
let's kind of now you know switch to

880
00:37:10,720 --> 00:37:13,359
some more advanced features um because

881
00:37:13,359 --> 00:37:15,359
one of the things that comes up is you

882
00:37:15,359 --> 00:37:17,839
know like some other policy engines like

883
00:37:17,839 --> 00:37:19,920
oppa gatekeeper they they offer a full

884
00:37:19,920 --> 00:37:22,000
programming language right so are they

885
00:37:22,000 --> 00:37:23,920
things that are limited in kiberno what

886
00:37:23,920 --> 00:37:26,079
can kiverno not do and what i want to

887
00:37:26,079 --> 00:37:28,480
show is that kiverno is very capable of

888
00:37:28,480 --> 00:37:30,320
writing some complex and powerful

889
00:37:30,320 --> 00:37:32,560
policies and there are several samples

890
00:37:32,560 --> 00:37:35,040
that we have in our you know community

891
00:37:35,040 --> 00:37:37,040
library but you don't want to showcase

892
00:37:37,040 --> 00:37:39,119
the features that allow these complex

893
00:37:39,119 --> 00:37:41,280
policies to be written so the first

894
00:37:41,280 --> 00:37:43,760
thing that's required is variables right

895
00:37:43,760 --> 00:37:45,599
because you don't want to write policies

896
00:37:45,599 --> 00:37:48,640
from scratch for and you want to augment

897
00:37:48,640 --> 00:37:52,000
policies with data coming in real time

898
00:37:52,000 --> 00:37:54,480
from the cluster or other data sources

899
00:37:54,480 --> 00:37:57,440
right so in kiverno you can you know

900
00:37:57,440 --> 00:37:58,560
have

901
00:37:58,560 --> 00:38:00,560
variables can either reference other

902
00:38:00,560 --> 00:38:03,119
parts of a policy or you can use

903
00:38:03,119 --> 00:38:04,960
variables to

904
00:38:04,960 --> 00:38:08,640
extract data from your admission request

905
00:38:08,640 --> 00:38:10,960
which is sent by the api server so in

906
00:38:10,960 --> 00:38:13,119
this second example we are looking at

907
00:38:13,119 --> 00:38:16,000
request user info username so this can

908
00:38:16,000 --> 00:38:18,480
come from the api server and kiverno

909
00:38:18,480 --> 00:38:21,040
automatically you know builds a context

910
00:38:21,040 --> 00:38:23,119
which you can use with you know

911
00:38:23,119 --> 00:38:25,839
any of your policies with a rich set of

912
00:38:25,839 --> 00:38:28,640
data and built-in variables itself

913
00:38:28,640 --> 00:38:29,839
so

914
00:38:29,839 --> 00:38:31,760
the other thing that is very powerful in

915
00:38:31,760 --> 00:38:34,560
kiverno is these variables can be you

916
00:38:34,560 --> 00:38:38,480
know used james james path or jmes path

917
00:38:38,480 --> 00:38:40,079
type expressions

918
00:38:40,079 --> 00:38:42,320
which can make it very easy to you know

919
00:38:42,320 --> 00:38:46,480
run even certain functions other things

920
00:38:46,480 --> 00:38:48,640
you know for your

921
00:38:48,640 --> 00:38:51,280
you know on your variable data itself so

922
00:38:51,280 --> 00:38:53,040
if you want to do comparisons if you

923
00:38:53,040 --> 00:38:55,440
want to extract information even run

924
00:38:55,440 --> 00:38:58,079
regular expressions all of that is very

925
00:38:58,079 --> 00:38:59,760
easily available

926
00:38:59,760 --> 00:39:02,000
now what you can start doing is you can

927
00:39:02,000 --> 00:39:03,839
even now combine this

928
00:39:03,839 --> 00:39:06,400
with you know external data that qiverno

929
00:39:06,400 --> 00:39:08,720
allows and there's three data sources

930
00:39:08,720 --> 00:39:11,359
that give or no allows config maps which

931
00:39:11,359 --> 00:39:13,280
are supported natively again as being

932
00:39:13,280 --> 00:39:16,320
part of kubernetes api server lookups

933
00:39:16,320 --> 00:39:18,320
which can pull you know information from

934
00:39:18,320 --> 00:39:21,359
the api server and oci registry lookups

935
00:39:21,359 --> 00:39:23,680
which is how kimono does things like

936
00:39:23,680 --> 00:39:26,960
image signature and image attestation

937
00:39:26,960 --> 00:39:28,480
verification right

938
00:39:28,480 --> 00:39:30,880
so here's an example of a config map and

939
00:39:30,880 --> 00:39:32,960
as you can see it's very easy now to you

940
00:39:32,960 --> 00:39:35,200
know define a config map and once that

941
00:39:35,200 --> 00:39:37,200
config map is defined you can

942
00:39:37,200 --> 00:39:39,440
declaratively say you can pull data from

943
00:39:39,440 --> 00:39:41,839
that config map into your policy and

944
00:39:41,839 --> 00:39:44,160
make some policy decision one great

945
00:39:44,160 --> 00:39:46,720
example of this is restricting workload

946
00:39:46,720 --> 00:39:49,599
identities so once a you know image uses

947
00:39:49,599 --> 00:39:52,240
a particular secret making sure that no

948
00:39:52,240 --> 00:39:55,040
other image or no other pod can mount

949
00:39:55,040 --> 00:39:57,440
that secret and it's only assigned to

950
00:39:57,440 --> 00:39:59,760
that particular image right so things

951
00:39:59,760 --> 00:40:02,240
like that you can do with external data

952
00:40:02,240 --> 00:40:04,800
um beyond that you know also you can do

953
00:40:04,800 --> 00:40:07,440
api server lookups this is a you know

954
00:40:07,440 --> 00:40:08,800
maybe a little bit hard to read but

955
00:40:08,800 --> 00:40:11,119
there's again examples on our website

956
00:40:11,119 --> 00:40:14,319
where what this is doing is making sure

957
00:40:14,319 --> 00:40:16,000
that you know it's counting the number

958
00:40:16,000 --> 00:40:18,000
of load balancer services in the name

959
00:40:18,000 --> 00:40:20,720
space and it's restricting that to one

960
00:40:20,720 --> 00:40:23,359
so what that you know involves is making

961
00:40:23,359 --> 00:40:25,599
an api server call

962
00:40:25,599 --> 00:40:27,440
if somebody is trying to create a new

963
00:40:27,440 --> 00:40:29,680
service and if the type happens to be

964
00:40:29,680 --> 00:40:32,800
load balancer the api call that's made

965
00:40:32,800 --> 00:40:35,359
is to get other load balancer services

966
00:40:35,359 --> 00:40:38,000
in that namespace and then being able to

967
00:40:38,000 --> 00:40:40,240
make sure that the length of that is

968
00:40:40,240 --> 00:40:42,720
stored in a variable which can then be

969
00:40:42,720 --> 00:40:45,599
enforced to say that it has to be um you

970
00:40:45,599 --> 00:40:47,200
know it cannot if it's greater than or

971
00:40:47,200 --> 00:40:50,880
equal to um you know one already then

972
00:40:50,880 --> 00:40:53,839
you deny that request right so extremely

973
00:40:53,839 --> 00:40:56,400
powerful policy and you can see how easy

974
00:40:56,400 --> 00:40:59,040
it is to kind of read manage and write

975
00:40:59,040 --> 00:41:01,200
without getting into

976
00:41:01,200 --> 00:41:04,839
other complex programming kind of

977
00:41:04,839 --> 00:41:07,040
requirements uh but the following you

978
00:41:07,040 --> 00:41:09,280
know standard using standard tools and

979
00:41:09,280 --> 00:41:11,280
following kubernetes best practices

980
00:41:11,280 --> 00:41:12,319
itself

981
00:41:12,319 --> 00:41:13,520
um

982
00:41:13,520 --> 00:41:16,240
the other you know kind of example you

983
00:41:16,240 --> 00:41:18,720
know that uh again here i don't have a

984
00:41:18,720 --> 00:41:19,680
you know

985
00:41:19,680 --> 00:41:22,319
screenshot for a policy sample but this

986
00:41:22,319 --> 00:41:24,960
is again available in our library so

987
00:41:24,960 --> 00:41:27,760
before external oci registry lookup this

988
00:41:27,760 --> 00:41:30,079
is you know used for querying image

989
00:41:30,079 --> 00:41:32,240
signatures attestations completely

990
00:41:32,240 --> 00:41:34,640
supports private registries and you can

991
00:41:34,640 --> 00:41:36,079
even you know look up things from

992
00:41:36,079 --> 00:41:38,240
multiple registries based on your

993
00:41:38,240 --> 00:41:39,920
requirements or based on how you have

994
00:41:39,920 --> 00:41:42,079
things configured

995
00:41:42,079 --> 00:41:44,160
some other features in kiverno i want to

996
00:41:44,160 --> 00:41:45,359
quickly cover

997
00:41:45,359 --> 00:41:47,680
and then we'll wrap up and summarize is

998
00:41:47,680 --> 00:41:50,079
ivor now has native policy reports so

999
00:41:50,079 --> 00:41:52,000
reports themselves are kubernetes

1000
00:41:52,000 --> 00:41:54,880
resources uh here this is an example of

1001
00:41:54,880 --> 00:41:57,200
a namespace based report it's showing

1002
00:41:57,200 --> 00:41:59,359
the pass fail and you know things like

1003
00:41:59,359 --> 00:42:01,520
that and you can of course use scoop

1004
00:42:01,520 --> 00:42:03,680
cuddle to you know get this or you can

1005
00:42:03,680 --> 00:42:05,520
use external tools any of your

1006
00:42:05,520 --> 00:42:07,359
management tools that are getting

1007
00:42:07,359 --> 00:42:09,839
reports or can manage kubernetes

1008
00:42:09,839 --> 00:42:12,319
resources uh to be able to see this

1009
00:42:12,319 --> 00:42:14,800
right there's also a graphical tool

1010
00:42:14,800 --> 00:42:17,040
available called policy reporter this

1011
00:42:17,040 --> 00:42:18,720
was written by one of our community

1012
00:42:18,720 --> 00:42:21,599
members frank jojole and he has open

1013
00:42:21,599 --> 00:42:22,960
sources

1014
00:42:22,960 --> 00:42:25,520
and donated it to the kiverno project

1015
00:42:25,520 --> 00:42:27,520
where you know this gives you a

1016
00:42:27,520 --> 00:42:30,240
graphical view of all your violations

1017
00:42:30,240 --> 00:42:32,560
all of your policies and it can also

1018
00:42:32,560 --> 00:42:35,119
send notifications to different tools

1019
00:42:35,119 --> 00:42:38,880
like slack or teams or even discord and

1020
00:42:38,880 --> 00:42:40,480
you know things like

1021
00:42:40,480 --> 00:42:42,720
elasticsearch if needed

1022
00:42:42,720 --> 00:42:44,640
for your upstream monitoring and logging

1023
00:42:44,640 --> 00:42:45,839
tools

1024
00:42:45,839 --> 00:42:48,000
um there's also you know prometheus

1025
00:42:48,000 --> 00:42:50,800
metrics available by default so qiverno

1026
00:42:50,800 --> 00:42:52,960
uh will produce you know several metrics

1027
00:42:52,960 --> 00:42:55,760
for policy application policy rules

1028
00:42:55,760 --> 00:42:58,240
execution latency things like that and

1029
00:42:58,240 --> 00:43:00,240
there's a grafana dashboard which you

1030
00:43:00,240 --> 00:43:02,560
can leverage to be able to view all of

1031
00:43:02,560 --> 00:43:05,280
this for your clusters as well now of

1032
00:43:05,280 --> 00:43:07,200
course again external monitoring and

1033
00:43:07,200 --> 00:43:09,440
management tools like what nirmata

1034
00:43:09,440 --> 00:43:11,760
provides and others provide and provide

1035
00:43:11,760 --> 00:43:14,960
a multi-cluster view um leveraging some

1036
00:43:14,960 --> 00:43:17,200
of this information that kevorn is

1037
00:43:17,200 --> 00:43:18,560
producing

1038
00:43:18,560 --> 00:43:20,960
um finally one thing also to mention is

1039
00:43:20,960 --> 00:43:23,359
the caverno cli and this is a very

1040
00:43:23,359 --> 00:43:26,160
powerful tool for testing policies

1041
00:43:26,160 --> 00:43:28,800
writing test cases for policies and even

1042
00:43:28,800 --> 00:43:31,200
applying policies as part of your ci cd

1043
00:43:31,200 --> 00:43:33,359
pipeline so there's already github

1044
00:43:33,359 --> 00:43:34,960
actions available there's other things

1045
00:43:34,960 --> 00:43:37,760
available to easily apply multiple

1046
00:43:37,760 --> 00:43:39,280
policies

1047
00:43:39,280 --> 00:43:42,240
you know to your cluster or to locally

1048
00:43:42,240 --> 00:43:44,240
apply policies to a set of yaml

1049
00:43:44,240 --> 00:43:45,440
resources

1050
00:43:45,440 --> 00:43:47,680
and you know you generate policy reports

1051
00:43:47,680 --> 00:43:49,839
from it which you can use in your git

1052
00:43:49,839 --> 00:43:52,640
ops pipeline or your ci cd

1053
00:43:52,640 --> 00:43:55,520
actions to be able to you know come

1054
00:43:55,520 --> 00:43:57,040
immediately warn

1055
00:43:57,040 --> 00:43:59,359
users of any violations or anything that

1056
00:43:59,359 --> 00:44:01,760
they might face right so very powerful

1057
00:44:01,760 --> 00:44:04,240
set of tools available

1058
00:44:04,240 --> 00:44:05,680
all right so let's just quickly

1059
00:44:05,680 --> 00:44:07,680
summarize you know and see

1060
00:44:07,680 --> 00:44:09,760
you know um you know like i'll be

1061
00:44:09,760 --> 00:44:12,079
covered a lot of things and

1062
00:44:12,079 --> 00:44:13,520
you know just to kind of wrap up and

1063
00:44:13,520 --> 00:44:16,720
kind of see what uh kiberno provides why

1064
00:44:16,720 --> 00:44:19,760
it's interesting and i will talk about

1065
00:44:19,760 --> 00:44:21,040
how you can get involved in the

1066
00:44:21,040 --> 00:44:23,200
community and how you can also quickly

1067
00:44:23,200 --> 00:44:25,280
try this out in your clusters

1068
00:44:25,280 --> 00:44:28,319
so in summary kiverno is a policy engine

1069
00:44:28,319 --> 00:44:30,720
designed for kubernetes like we talked

1070
00:44:30,720 --> 00:44:32,960
about policies can help address some of

1071
00:44:32,960 --> 00:44:34,560
the key concerns

1072
00:44:34,560 --> 00:44:36,400
around you know the complexity of

1073
00:44:36,400 --> 00:44:39,599
kubernetes automating security um and

1074
00:44:39,599 --> 00:44:41,680
making security a shared you know

1075
00:44:41,680 --> 00:44:44,000
collaborative experience within these

1076
00:44:44,000 --> 00:44:46,880
clusters iverno not only can block and

1077
00:44:46,880 --> 00:44:48,800
enforce but is also useful for

1078
00:44:48,800 --> 00:44:50,400
generating resources

1079
00:44:50,400 --> 00:44:52,240
which makes it extremely powerful and

1080
00:44:52,240 --> 00:44:54,400
useful and it's simple to get started

1081
00:44:54,400 --> 00:44:55,760
with if you know

1082
00:44:55,760 --> 00:44:57,920
kubernetes if you've kind of invested in

1083
00:44:57,920 --> 00:45:00,560
kubernetes iverno is very easy to get

1084
00:45:00,560 --> 00:45:03,119
started with without any additional

1085
00:45:03,119 --> 00:45:04,560
learning curve

1086
00:45:04,560 --> 00:45:07,280
um we have a very active community

1087
00:45:07,280 --> 00:45:09,920
several you know we have about like 85

1088
00:45:09,920 --> 00:45:11,920
plus contributors and this is growing

1089
00:45:11,920 --> 00:45:14,319
fast uh we have multiple maintainers

1090
00:45:14,319 --> 00:45:16,319
from you know different companies

1091
00:45:16,319 --> 00:45:18,160
and there's a very good set of docs

1092
00:45:18,160 --> 00:45:20,000
sample policies things like that all

1093
00:45:20,000 --> 00:45:22,560
available at kiverner.io in the

1094
00:45:22,560 --> 00:45:24,800
kubernetes workspace we have a slack

1095
00:45:24,800 --> 00:45:27,119
channel uh which is just called kiverno

1096
00:45:27,119 --> 00:45:29,280
so feel free to stop by the slack

1097
00:45:29,280 --> 00:45:31,680
channel say hello i'm pretty active over

1098
00:45:31,680 --> 00:45:33,760
there so you can always look me up and

1099
00:45:33,760 --> 00:45:34,640
you know

1100
00:45:34,640 --> 00:45:36,720
reach out over there and then we also

1101
00:45:36,720 --> 00:45:38,560
have you know weekly contributor

1102
00:45:38,560 --> 00:45:41,119
meetings and monthly community meetings

1103
00:45:41,119 --> 00:45:43,599
for end users right so

1104
00:45:43,599 --> 00:45:45,119
everybody's welcome to join these

1105
00:45:45,119 --> 00:45:47,760
meetings just listen in or bring up your

1106
00:45:47,760 --> 00:45:50,480
use cases and questions right so we're

1107
00:45:50,480 --> 00:45:52,800
always looking for more use cases things

1108
00:45:52,800 --> 00:45:54,800
to solve and how we can help make

1109
00:45:54,800 --> 00:45:57,839
kubernetes a more secure and more

1110
00:45:57,839 --> 00:45:59,119
automated

1111
00:45:59,119 --> 00:46:01,119
as well as a smoother experience for new

1112
00:46:01,119 --> 00:46:02,480
users right

1113
00:46:02,480 --> 00:46:04,319
finally one quick thing to mention if

1114
00:46:04,319 --> 00:46:05,319
you go to

1115
00:46:05,319 --> 00:46:07,359
learn.nirmata.com there's a new kiverno

1116
00:46:07,359 --> 00:46:10,240
certification offered through nermata

1117
00:46:10,240 --> 00:46:12,480
so feel free to try that out it's a in a

1118
00:46:12,480 --> 00:46:14,560
fun way to kind of you know test your

1119
00:46:14,560 --> 00:46:16,720
knowledge of qiverno as well as get a

1120
00:46:16,720 --> 00:46:18,560
badge if it's when you once you get

1121
00:46:18,560 --> 00:46:20,800
certified this is something uh that you

1122
00:46:20,800 --> 00:46:23,760
can you know kind of um get and share

1123
00:46:23,760 --> 00:46:25,359
with your

1124
00:46:25,359 --> 00:46:27,440
community as well as on your social

1125
00:46:27,440 --> 00:46:29,920
media profiles

1126
00:46:29,920 --> 00:46:31,680
all right so those are all of the things

1127
00:46:31,680 --> 00:46:33,599
i wanted to cover i know we went through

1128
00:46:33,599 --> 00:46:35,760
quite a lot but um thank you again for

1129
00:46:35,760 --> 00:46:38,319
attending and hopefully uh you will give

1130
00:46:38,319 --> 00:46:40,720
kiverno a try for your kubernetes

1131
00:46:40,720 --> 00:46:42,960
clusters and certainly as i mentioned

1132
00:46:42,960 --> 00:46:45,359
before please reach out if you have any

1133
00:46:45,359 --> 00:46:48,000
uh thoughts questions feedback or just

1134
00:46:48,000 --> 00:46:49,599
want to say hello and you know kind of

1135
00:46:49,599 --> 00:46:51,920
share your experience with kibrano

1136
00:46:51,920 --> 00:46:52,960
thank you

1137
00:46:52,960 --> 00:46:55,760
bye-bye

