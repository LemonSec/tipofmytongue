1
00:00:08,320 --> 00:00:10,480
hi first of all i would like to thank

2
00:00:10,480 --> 00:00:13,519
the echo party 2021 organization for the

3
00:00:13,519 --> 00:00:15,599
opportunity to talk with this awesome

4
00:00:15,599 --> 00:00:17,039
event

5
00:00:17,039 --> 00:00:18,880
today we will talk about the well-known

6
00:00:18,880 --> 00:00:20,960
technique used in root kits form

7
00:00:20,960 --> 00:00:22,960
grabbers and other kind of nice team

8
00:00:22,960 --> 00:00:23,920
hours

9
00:00:23,920 --> 00:00:26,400
to collect credentials and change the

10
00:00:26,400 --> 00:00:29,279
application behavior

11
00:00:29,279 --> 00:00:31,840
i'm talking about api hooks

12
00:00:31,840 --> 00:00:35,280
specifically speaking about ring tree

13
00:00:35,280 --> 00:00:37,280
uh i will do my best to give a big

14
00:00:37,280 --> 00:00:40,000
picture of the techniques variation we

15
00:00:40,000 --> 00:00:41,840
developed to bypass

16
00:00:41,840 --> 00:00:44,559
forensics and analysis too

17
00:00:44,559 --> 00:00:45,840
okay

18
00:00:45,840 --> 00:00:47,680
so

19
00:00:47,680 --> 00:00:50,640
to guide our talk i will make use of

20
00:00:50,640 --> 00:00:52,320
this agenda guys

21
00:00:52,320 --> 00:00:55,199
firstly i will present myself

22
00:00:55,199 --> 00:00:57,680
then we will talk about the motivation

23
00:00:57,680 --> 00:01:00,239
and relevance of this subject next we

24
00:01:00,239 --> 00:01:02,559
will leave some background knowledge

25
00:01:02,559 --> 00:01:05,438
regarding api hooks

26
00:01:05,438 --> 00:01:08,080
we will do a fast review over the

27
00:01:08,080 --> 00:01:11,200
classic hooks and detection approaches

28
00:01:11,200 --> 00:01:13,280
then we present the idea behind our

29
00:01:13,280 --> 00:01:15,200
variation techniques

30
00:01:15,200 --> 00:01:18,240
the we call it egg hook and hollow hooks

31
00:01:18,240 --> 00:01:20,720
not big deal the names doesn't matter

32
00:01:20,720 --> 00:01:21,759
just to

33
00:01:21,759 --> 00:01:24,000
differentiate between them

34
00:01:24,000 --> 00:01:26,479
and next we'll present some proof of

35
00:01:26,479 --> 00:01:28,960
concept by passing the

36
00:01:28,960 --> 00:01:31,200
some detection

37
00:01:31,200 --> 00:01:32,400
and

38
00:01:32,400 --> 00:01:34,320
of a familial stew

39
00:01:34,320 --> 00:01:36,240
and we will finish the talk presenting

40
00:01:36,240 --> 00:01:39,600
some bypass results again other tools

41
00:01:39,600 --> 00:01:41,439
so

42
00:01:41,439 --> 00:01:44,320
let me introduce myself

43
00:01:44,320 --> 00:01:45,680
um

44
00:01:45,680 --> 00:01:48,240
my name is rafael solema marquez i also

45
00:01:48,240 --> 00:01:50,880
know as swank i consider myself a

46
00:01:50,880 --> 00:01:52,479
malware enthusiast

47
00:01:52,479 --> 00:01:54,880
i have been producing malicious code

48
00:01:54,880 --> 00:01:56,880
size late 90s

49
00:01:56,880 --> 00:02:00,240
but never destroy stuff or harm people

50
00:02:00,240 --> 00:02:02,320
i always coded malware

51
00:02:02,320 --> 00:02:04,880
bearing in mind fun and learning

52
00:02:04,880 --> 00:02:06,880
okay

53
00:02:06,880 --> 00:02:09,360
beside being an academic researcher

54
00:02:09,360 --> 00:02:11,760
focusing on detecting threat actors and

55
00:02:11,760 --> 00:02:13,520
malicious artifacts

56
00:02:13,520 --> 00:02:16,080
today i lead a red team with a bunch of

57
00:02:16,080 --> 00:02:17,680
nice nerds

58
00:02:17,680 --> 00:02:21,040
and additionally i purdue i'm proud of a

59
00:02:21,040 --> 00:02:25,280
node paper published at pet 9a vx groups

60
00:02:25,280 --> 00:02:26,160
in

61
00:02:26,160 --> 00:02:28,480
issue 7.

62
00:02:28,480 --> 00:02:30,640
my respect for the best marvel coders

63
00:02:30,640 --> 00:02:32,958
ever

64
00:02:33,519 --> 00:02:35,840
the the article was regarding a new

65
00:02:35,840 --> 00:02:38,239
persistence technique exploiting the

66
00:02:38,239 --> 00:02:41,200
screen saver installation which was new

67
00:02:41,200 --> 00:02:43,120
at the time and this

68
00:02:43,120 --> 00:02:46,160
this article for me worth more than

69
00:02:46,160 --> 00:02:48,480
a1 paper

70
00:02:48,480 --> 00:02:50,640
so this is kind of

71
00:02:50,640 --> 00:02:51,840
uh

72
00:02:51,840 --> 00:02:53,920
nostalgic stuff

73
00:02:53,920 --> 00:02:56,800
but it was nice at the time

74
00:02:56,800 --> 00:02:59,040
uh another exciting experience was

75
00:02:59,040 --> 00:03:01,280
developing a wrestler proof of concept

76
00:03:01,280 --> 00:03:06,800
targeting april os x uh operating system

77
00:03:06,800 --> 00:03:10,000
i call it mabuya wrestler at the time no

78
00:03:10,000 --> 00:03:12,800
real life campaigns has target

79
00:03:12,800 --> 00:03:14,159
uh

80
00:03:14,159 --> 00:03:17,040
mac operating system

81
00:03:17,040 --> 00:03:21,680
so in order to warn the users that no os

82
00:03:21,680 --> 00:03:23,280
is bulletproof

83
00:03:23,280 --> 00:03:26,080
i did it as a proof of concept so

84
00:03:26,080 --> 00:03:29,280
the the event was worldwide reported on

85
00:03:29,280 --> 00:03:31,360
online media in several languages

86
00:03:31,360 --> 00:03:34,480
including major antivirus companies like

87
00:03:34,480 --> 00:03:38,079
cymatic and kawasperski

88
00:03:38,799 --> 00:03:41,840
the prediction regarding the rise of

89
00:03:41,840 --> 00:03:43,519
reservoir for

90
00:03:43,519 --> 00:03:46,480
mac computers was accurate because three

91
00:03:46,480 --> 00:03:49,440
months later the first real restaurant

92
00:03:49,440 --> 00:03:52,159
attack targeting the

93
00:03:52,159 --> 00:03:56,560
this operation system happened

94
00:03:56,560 --> 00:03:58,799
so

95
00:03:59,040 --> 00:04:02,159
let's go to the what is important in

96
00:04:02,159 --> 00:04:05,200
this talk not talk about me so

97
00:04:05,200 --> 00:04:09,439
why ring three hooks are relevant today

98
00:04:09,439 --> 00:04:11,599
still relevant

99
00:04:11,599 --> 00:04:13,599
it's because

100
00:04:13,599 --> 00:04:16,720
ring 3 api hooks

101
00:04:16,720 --> 00:04:18,478
very well document

102
00:04:18,478 --> 00:04:21,680
documented and useful to the mowers used

103
00:04:21,680 --> 00:04:24,880
by the dark side of the force

104
00:04:24,880 --> 00:04:27,360
so it can be used to collect credential

105
00:04:27,360 --> 00:04:31,280
before encryption submission for example

106
00:04:31,280 --> 00:04:34,479
in forb grabbers we can collect

107
00:04:34,479 --> 00:04:36,240
passwords

108
00:04:36,240 --> 00:04:38,800
before encryption

109
00:04:38,800 --> 00:04:39,919
so

110
00:04:39,919 --> 00:04:42,240
and can be used to change application

111
00:04:42,240 --> 00:04:43,680
behaviors

112
00:04:43,680 --> 00:04:46,720
which is essential to create

113
00:04:46,720 --> 00:04:48,800
classic ring tree hood kits

114
00:04:48,800 --> 00:04:50,560
for example

115
00:04:50,560 --> 00:04:52,880
so regarding the light side of the force

116
00:04:52,880 --> 00:04:56,440
it can be extended

117
00:04:56,720 --> 00:04:58,560
we can it can extend legit

118
00:04:58,560 --> 00:05:01,360
functionalities of legacy application

119
00:05:01,360 --> 00:05:02,400
and

120
00:05:02,400 --> 00:05:04,720
it's used by several defense solutions

121
00:05:04,720 --> 00:05:08,080
to infer malicious activities so we can

122
00:05:08,080 --> 00:05:09,280
use

123
00:05:09,280 --> 00:05:10,639
those guys in

124
00:05:10,639 --> 00:05:12,080
both worlds

125
00:05:12,080 --> 00:05:16,000
and attack and defense sides

126
00:05:16,160 --> 00:05:17,360
so

127
00:05:17,360 --> 00:05:19,120
when the defense solutions cannot detect

128
00:05:19,120 --> 00:05:20,240
out hooks

129
00:05:20,240 --> 00:05:22,960
it can be useful because credentials are

130
00:05:22,960 --> 00:05:25,440
other sensitive information typically

131
00:05:25,440 --> 00:05:28,240
are available at username

132
00:05:28,240 --> 00:05:31,840
so ring 3 hooks are easy to code

133
00:05:31,840 --> 00:05:32,880
and it's

134
00:05:32,880 --> 00:05:36,840
good in in a way and are essentially

135
00:05:36,840 --> 00:05:40,400
helpful in the attack early stage while

136
00:05:40,400 --> 00:05:44,638
we do not have admin credentials

137
00:05:45,919 --> 00:05:47,680
moreover

138
00:05:47,680 --> 00:05:50,479
an excellent way to force defense

139
00:05:50,479 --> 00:05:52,560
solution to improve detection capability

140
00:05:52,560 --> 00:05:55,440
is by exposing new techniques

141
00:05:55,440 --> 00:05:57,680
that's that's the whole idea of of this

142
00:05:57,680 --> 00:05:58,639
talk

143
00:05:58,639 --> 00:06:00,800
we uh we will suppose some new

144
00:06:00,800 --> 00:06:02,960
techniques and i hope the defense

145
00:06:02,960 --> 00:06:04,160
solution

146
00:06:04,160 --> 00:06:05,600
get better

147
00:06:05,600 --> 00:06:08,080
so when new techniques get public and

148
00:06:08,080 --> 00:06:10,639
some guys provide a script at github for

149
00:06:10,639 --> 00:06:13,520
example skills that cannot discover zero

150
00:06:13,520 --> 00:06:15,840
days but can run scripts

151
00:06:15,840 --> 00:06:18,560
will be able to reproduce the attack

152
00:06:18,560 --> 00:06:20,960
and this scenario is bad for business in

153
00:06:20,960 --> 00:06:23,280
the defense solution if if the defense

154
00:06:23,280 --> 00:06:25,759
solution can't detect it

155
00:06:25,759 --> 00:06:28,080
so in my humble opinion critical

156
00:06:28,080 --> 00:06:30,720
vulnerabilities disclosure

157
00:06:30,720 --> 00:06:33,199
is the best way to motivate and improve

158
00:06:33,199 --> 00:06:35,840
defense solutions

159
00:06:36,000 --> 00:06:39,360
to get better

160
00:06:42,319 --> 00:06:44,080
so now let's

161
00:06:44,080 --> 00:06:46,160
level some basic knowledge concerning

162
00:06:46,160 --> 00:06:47,360
windows

163
00:06:47,360 --> 00:06:51,520
os ring 3 api hooks and some detection

164
00:06:51,520 --> 00:06:53,840
approaches

165
00:06:53,840 --> 00:06:57,840
api hooks is a runtime memory batching

166
00:06:57,840 --> 00:06:58,960
technique

167
00:06:58,960 --> 00:07:02,960
to act to change the api regular flow so

168
00:07:02,960 --> 00:07:05,680
api hooks in its essence it's not my

169
00:07:05,680 --> 00:07:06,800
issues guys

170
00:07:06,800 --> 00:07:09,039
for example microsoft provided an api

171
00:07:09,039 --> 00:07:11,440
hook library named detours

172
00:07:11,440 --> 00:07:13,919
which can easily instrument and extend

173
00:07:13,919 --> 00:07:16,080
existing operating systems and

174
00:07:16,080 --> 00:07:20,560
applications functionalities okay

175
00:07:21,919 --> 00:07:24,560
due to the time limitation we have to to

176
00:07:24,560 --> 00:07:27,520
talk we will not go through other hook

177
00:07:27,520 --> 00:07:29,280
techniques such as

178
00:07:29,280 --> 00:07:30,880
eighty hooking

179
00:07:30,880 --> 00:07:32,479
which is very well documented over the

180
00:07:32,479 --> 00:07:34,000
internet so you can find a lot of

181
00:07:34,000 --> 00:07:36,479
information around we will restrict the

182
00:07:36,479 --> 00:07:39,280
scope of the talk to inline and iet

183
00:07:39,280 --> 00:07:41,680
hooks because they are related to the

184
00:07:41,680 --> 00:07:43,680
hooks variations that we will present

185
00:07:43,680 --> 00:07:44,960
today

186
00:07:44,960 --> 00:07:47,280
okay

187
00:07:50,160 --> 00:07:52,080
a good approach to create an effective

188
00:07:52,080 --> 00:07:55,199
bypass is to avoid the distractions and

189
00:07:55,199 --> 00:07:57,280
famous libraries because defense

190
00:07:57,280 --> 00:07:59,520
signatures and the textual patterns

191
00:07:59,520 --> 00:08:01,520
eventually look for them

192
00:08:01,520 --> 00:08:03,120
so

193
00:08:03,120 --> 00:08:06,800
uh some behavior sorry some vendors

194
00:08:06,800 --> 00:08:08,960
even include library sequence of

195
00:08:08,960 --> 00:08:10,400
instructions

196
00:08:10,400 --> 00:08:13,840
in the roof which is bad uh

197
00:08:13,840 --> 00:08:16,560
it is a bad thing to do but eventually

198
00:08:16,560 --> 00:08:17,759
it happens

199
00:08:17,759 --> 00:08:20,479
and additionally that additionally uh

200
00:08:20,479 --> 00:08:22,400
you must think out of the box through

201
00:08:22,400 --> 00:08:24,960
circumvent detection and assembly

202
00:08:24,960 --> 00:08:28,080
provides you the necessary flexibility

203
00:08:28,080 --> 00:08:30,160
to accomplish this job

204
00:08:30,160 --> 00:08:32,159
due to the freedom provided by the

205
00:08:32,159 --> 00:08:33,919
language so

206
00:08:33,919 --> 00:08:36,159
uh

207
00:08:37,440 --> 00:08:39,120
it's good

208
00:08:39,120 --> 00:08:40,958
when you have freedom to

209
00:08:40,958 --> 00:08:43,200
to to do stuff

210
00:08:43,200 --> 00:08:45,519
when thinking outside the box and trying

211
00:08:45,519 --> 00:08:48,880
to do different stuff

212
00:08:49,920 --> 00:08:52,480
but it's my humble opinion

213
00:08:52,480 --> 00:08:56,080
it's not a rule or something else just

214
00:08:56,080 --> 00:08:57,440
just a tip

215
00:08:57,440 --> 00:08:58,800
now

216
00:08:58,800 --> 00:09:00,320
uh let's talk

217
00:09:00,320 --> 00:09:02,480
a bit about inline hooks

218
00:09:02,480 --> 00:09:05,519
uh this simple diagram

219
00:09:05,519 --> 00:09:08,399
illustrates the expected behavior of an

220
00:09:08,399 --> 00:09:12,320
api call x exclusion

221
00:09:12,320 --> 00:09:13,519
the the

222
00:09:13,519 --> 00:09:16,240
we have tried to simulate the idea that

223
00:09:16,240 --> 00:09:18,160
let's suppose we

224
00:09:18,160 --> 00:09:19,040
we

225
00:09:19,040 --> 00:09:20,880
using raggedy the

226
00:09:20,880 --> 00:09:23,200
window registry editor

227
00:09:23,200 --> 00:09:24,740
to enumerate some

228
00:09:24,740 --> 00:09:26,080
[Music]

229
00:09:26,080 --> 00:09:27,519
register keys

230
00:09:27,519 --> 00:09:30,720
okay so when rugged calls

231
00:09:30,720 --> 00:09:32,240
some

232
00:09:32,240 --> 00:09:34,560
api called nt

233
00:09:34,560 --> 00:09:36,959
enumerate value key

234
00:09:36,959 --> 00:09:37,839
it

235
00:09:37,839 --> 00:09:39,360
it

236
00:09:39,360 --> 00:09:42,000
jumps to the api instructions

237
00:09:42,000 --> 00:09:42,959
okay

238
00:09:42,959 --> 00:09:45,120
when you call it

239
00:09:45,120 --> 00:09:46,959
and execute what it's supposed to

240
00:09:46,959 --> 00:09:48,640
execute

241
00:09:48,640 --> 00:09:51,040
the instructions get some result and

242
00:09:51,040 --> 00:09:52,880
returns to the next instruction after

243
00:09:52,880 --> 00:09:54,480
the call in regular

244
00:09:54,480 --> 00:09:56,320
execution flow

245
00:09:56,320 --> 00:09:59,200
nothing new or special here just regular

246
00:09:59,200 --> 00:10:02,480
api usage

247
00:10:02,640 --> 00:10:04,560
now let's

248
00:10:04,560 --> 00:10:07,519
suppose the adversary wants to consist

249
00:10:07,519 --> 00:10:10,000
conceal some registered entries from the

250
00:10:10,000 --> 00:10:12,560
user when using rugged

251
00:10:12,560 --> 00:10:15,040
so the typical approach is to inject a

252
00:10:15,040 --> 00:10:16,320
trampoline

253
00:10:16,320 --> 00:10:17,360
function

254
00:10:17,360 --> 00:10:20,399
in patch dynamically the beginning of

255
00:10:20,399 --> 00:10:24,000
the api of interest they can see in red

256
00:10:24,000 --> 00:10:27,600
on the the green box

257
00:10:28,800 --> 00:10:31,360
that represents the api

258
00:10:31,360 --> 00:10:33,279
instructions

259
00:10:33,279 --> 00:10:35,760
which is widely usually

260
00:10:35,760 --> 00:10:37,519
by

261
00:10:37,519 --> 00:10:39,120
ring tree hook cheats to consume

262
00:10:39,120 --> 00:10:41,360
register crease this technique

263
00:10:41,360 --> 00:10:42,959
so

264
00:10:42,959 --> 00:10:45,360
the pro normally will patch in the

265
00:10:45,360 --> 00:10:46,480
problem

266
00:10:46,480 --> 00:10:48,800
of the function

267
00:10:48,800 --> 00:10:51,519
so firstly the trampoline is injected

268
00:10:51,519 --> 00:10:53,600
into the virtual memory of the process

269
00:10:53,600 --> 00:10:57,200
of interest in this case is rugged

270
00:10:57,200 --> 00:10:59,360
and the first instruction of the api and

271
00:10:59,360 --> 00:11:02,160
t enumerate value key

272
00:11:02,160 --> 00:11:05,120
are patched to change the execution flow

273
00:11:05,120 --> 00:11:06,800
to the trampoline function when

274
00:11:06,800 --> 00:11:08,720
regulated call

275
00:11:08,720 --> 00:11:09,760
the

276
00:11:09,760 --> 00:11:11,120
the api

277
00:11:11,120 --> 00:11:13,279
so after the api call

278
00:11:13,279 --> 00:11:15,760
and inside the trampoline function the

279
00:11:15,760 --> 00:11:18,000
adversary can grab

280
00:11:18,000 --> 00:11:20,320
parameters

281
00:11:20,320 --> 00:11:22,160
if the objective is to collect sensitive

282
00:11:22,160 --> 00:11:23,600
information

283
00:11:23,600 --> 00:11:25,920
however in this example we intend to

284
00:11:25,920 --> 00:11:29,600
conceal register keys from the user when

285
00:11:29,600 --> 00:11:33,600
using regulate so therefore we execute

286
00:11:33,600 --> 00:11:36,240
the original structure to get the api

287
00:11:36,240 --> 00:11:38,000
call result

288
00:11:38,000 --> 00:11:40,800
and next we manipulate the result in

289
00:11:40,800 --> 00:11:42,959
order to remove the entries

290
00:11:42,959 --> 00:11:45,040
we do not want to show

291
00:11:45,040 --> 00:11:45,920
so

292
00:11:45,920 --> 00:11:46,959
finally

293
00:11:46,959 --> 00:11:50,079
we jump back into empty enumerate value

294
00:11:50,079 --> 00:11:51,279
key

295
00:11:51,279 --> 00:11:54,240
in an opportune place it's just after

296
00:11:54,240 --> 00:11:57,279
the cisco that we

297
00:11:57,279 --> 00:11:59,360
call it in the in the trampoline

298
00:11:59,360 --> 00:12:01,600
function

299
00:12:01,600 --> 00:12:03,920
and

300
00:12:04,720 --> 00:12:07,360
and done that's it the whole idea behind

301
00:12:07,360 --> 00:12:08,880
inline hooks is

302
00:12:08,880 --> 00:12:11,839
it's simple like that

303
00:12:12,800 --> 00:12:16,320
iat hook is simple

304
00:12:16,320 --> 00:12:17,760
than

305
00:12:17,760 --> 00:12:20,880
simple as inline hooks let's do a faster

306
00:12:20,880 --> 00:12:25,040
review regarding them too uh

307
00:12:25,040 --> 00:12:27,120
those guys are very simple they the

308
00:12:27,120 --> 00:12:28,639
basic idea here

309
00:12:28,639 --> 00:12:31,600
is to take a model import at their

310
00:12:31,600 --> 00:12:32,800
stable

311
00:12:32,800 --> 00:12:34,959
where the loader put the function

312
00:12:34,959 --> 00:12:37,279
pointers so the hook

313
00:12:37,279 --> 00:12:39,519
is made by patching the pointer to the

314
00:12:39,519 --> 00:12:42,240
api of interest redirecting them to our

315
00:12:42,240 --> 00:12:44,320
trampoline function

316
00:12:44,320 --> 00:12:46,160
it's easy to code because the attacker

317
00:12:46,160 --> 00:12:48,399
just needs to find the correct

318
00:12:48,399 --> 00:12:49,920
id

319
00:12:49,920 --> 00:12:52,560
entry and change the pointer

320
00:12:52,560 --> 00:12:54,399
additionally we don't need to to change

321
00:12:54,399 --> 00:12:57,040
the api instructions this is interesting

322
00:12:57,040 --> 00:12:59,360
regarding detection

323
00:12:59,360 --> 00:13:02,160
mechanisms because we don't change the

324
00:13:02,160 --> 00:13:03,279
api

325
00:13:03,279 --> 00:13:05,519
instruction at all

326
00:13:05,519 --> 00:13:07,200
so

327
00:13:07,200 --> 00:13:09,200
in order to to

328
00:13:09,200 --> 00:13:10,880
to

329
00:13:10,880 --> 00:13:13,360
explain better what it's

330
00:13:13,360 --> 00:13:15,360
supposed to do

331
00:13:15,360 --> 00:13:17,760
this is the regular flow the application

332
00:13:17,760 --> 00:13:20,639
calls message box a

333
00:13:20,639 --> 00:13:21,839
in this case

334
00:13:21,839 --> 00:13:24,079
then it looks up the message box api

335
00:13:24,079 --> 00:13:26,079
address stored in the

336
00:13:26,079 --> 00:13:28,720
iet to jump into the message box

337
00:13:28,720 --> 00:13:31,680
instructions and execute the api this is

338
00:13:31,680 --> 00:13:37,199
a normal behavior okay how things works

339
00:13:38,240 --> 00:13:39,600
but

340
00:13:39,600 --> 00:13:41,199
no no no

341
00:13:41,199 --> 00:13:43,600
we present a scenario where the iet hook

342
00:13:43,600 --> 00:13:46,079
is installed

343
00:13:46,079 --> 00:13:49,040
we injected the trampoline function

344
00:13:49,040 --> 00:13:52,320
in the process virtual memory and

345
00:13:52,320 --> 00:13:56,160
exchange the message box address started

346
00:13:56,160 --> 00:13:58,320
at the respective

347
00:13:58,320 --> 00:14:01,440
iet pointer to the trampoline

348
00:14:01,440 --> 00:14:03,199
function address

349
00:14:03,199 --> 00:14:05,040
you can see in red

350
00:14:05,040 --> 00:14:06,880
in the orange box

351
00:14:06,880 --> 00:14:08,639
so

352
00:14:08,639 --> 00:14:09,839
instead

353
00:14:09,839 --> 00:14:12,639
jumping to the message box a we jump

354
00:14:12,639 --> 00:14:14,399
into trampoline

355
00:14:14,399 --> 00:14:17,839
do what you have to do maliciously

356
00:14:17,839 --> 00:14:20,800
instructions then jump back to the

357
00:14:20,800 --> 00:14:22,480
message box

358
00:14:22,480 --> 00:14:25,600
this kind of man in the middle but

359
00:14:25,600 --> 00:14:27,120
with hooks okay

360
00:14:27,120 --> 00:14:29,839
uh and done that that's it

361
00:14:29,839 --> 00:14:31,120
that's that's

362
00:14:31,120 --> 00:14:32,800
what you have to

363
00:14:32,800 --> 00:14:35,040
to to know the basic knowledge to

364
00:14:35,040 --> 00:14:36,320
understand

365
00:14:36,320 --> 00:14:38,399
what we are going to talk

366
00:14:38,399 --> 00:14:39,440
in

367
00:14:39,440 --> 00:14:41,760
in the near future here

368
00:14:41,760 --> 00:14:42,639
so

369
00:14:42,639 --> 00:14:44,880
uh

370
00:14:44,880 --> 00:14:48,720
well we we have to understand that

371
00:14:48,720 --> 00:14:50,560
let's talk about detection strategies

372
00:14:50,560 --> 00:14:51,360
now

373
00:14:51,360 --> 00:14:53,519
we have to understand that adversary

374
00:14:53,519 --> 00:14:56,839
detection strategy and how it works in

375
00:14:56,839 --> 00:14:58,880
details to

376
00:14:58,880 --> 00:15:01,199
to figure out how to bypass it

377
00:15:01,199 --> 00:15:03,279
so i will enumerate three typical

378
00:15:03,279 --> 00:15:06,240
detection approaches

379
00:15:06,240 --> 00:15:09,199
the most common approach is to check the

380
00:15:09,199 --> 00:15:11,120
first instructions

381
00:15:11,120 --> 00:15:14,000
of the api if they are related to a

382
00:15:14,000 --> 00:15:16,639
change of the flow execution for example

383
00:15:16,639 --> 00:15:18,560
below the fantastic

384
00:15:18,560 --> 00:15:21,120
earthquake the cat detection kit image

385
00:15:21,120 --> 00:15:23,680
from the our slide

386
00:15:23,680 --> 00:15:28,560
is nice eyes

387
00:15:31,040 --> 00:15:33,440
we have the simplest hook detection

388
00:15:33,440 --> 00:15:36,160
function in the world

389
00:15:36,160 --> 00:15:38,000
you can check it

390
00:15:38,000 --> 00:15:42,000
just below the image uh

391
00:15:42,000 --> 00:15:44,480
it will just check if the first op code

392
00:15:44,480 --> 00:15:47,600
of the function is a relative jump

393
00:15:47,600 --> 00:15:49,519
simple like that but

394
00:15:49,519 --> 00:15:50,880
this is not

395
00:15:50,880 --> 00:15:54,399
is e9 is is is result code for a

396
00:15:54,399 --> 00:15:57,199
relative jump so if you have in the

397
00:15:57,199 --> 00:15:59,839
beginning of the api ie9 is kind of

398
00:15:59,839 --> 00:16:01,440
suspicious

399
00:16:01,440 --> 00:16:05,120
but uh the dark side

400
00:16:05,120 --> 00:16:08,720
figure out that this kind of naive

401
00:16:08,720 --> 00:16:10,160
detection

402
00:16:10,160 --> 00:16:12,399
so they they put a knob

403
00:16:12,399 --> 00:16:15,040
uh just before and there are a lot of

404
00:16:15,040 --> 00:16:19,680
variations regarding this this detection

405
00:16:19,680 --> 00:16:22,399
a bit smart strategy is to compare the

406
00:16:22,399 --> 00:16:24,240
original api instructions with the

407
00:16:24,240 --> 00:16:26,560
actual api structures in the process

408
00:16:26,560 --> 00:16:29,279
memory for changes

409
00:16:29,279 --> 00:16:32,320
and edited one is is a bit smart

410
00:16:32,320 --> 00:16:34,560
so

411
00:16:34,720 --> 00:16:36,480
if we change the api

412
00:16:36,480 --> 00:16:37,519
probably

413
00:16:37,519 --> 00:16:39,920
the detection hook

414
00:16:39,920 --> 00:16:40,720
will

415
00:16:40,720 --> 00:16:44,079
the detection will happen so

416
00:16:44,079 --> 00:16:47,680
but it is a bit more expensive regarding

417
00:16:47,680 --> 00:16:48,959
results

418
00:16:48,959 --> 00:16:51,680
and we will see that

419
00:16:51,680 --> 00:16:54,160
uh

420
00:16:54,320 --> 00:16:56,800
a detection solution that spend a lot of

421
00:16:56,800 --> 00:16:59,360
resource is bad

422
00:16:59,360 --> 00:17:01,199
it's a bad solution because nobody will

423
00:17:01,199 --> 00:17:02,399
buy buy

424
00:17:02,399 --> 00:17:05,599
it so uh

425
00:17:05,599 --> 00:17:07,839
we have to to to balance between

426
00:17:07,839 --> 00:17:09,439
performance

427
00:17:09,439 --> 00:17:11,919
and and functionalities so

428
00:17:11,919 --> 00:17:14,400
uh last but not least a more robust

429
00:17:14,400 --> 00:17:17,919
approach is to compare if the binary on

430
00:17:17,919 --> 00:17:18,880
disk

431
00:17:18,880 --> 00:17:21,119
is compatible with the instructions

432
00:17:21,119 --> 00:17:22,799
loaded memory

433
00:17:22,799 --> 00:17:25,280
however keep in mind

434
00:17:25,280 --> 00:17:28,559
that this is not an exhaustive list of

435
00:17:28,559 --> 00:17:30,640
hook detection strategies there are a

436
00:17:30,640 --> 00:17:32,799
lot of

437
00:17:32,799 --> 00:17:34,559
different ones

438
00:17:34,559 --> 00:17:37,440
uh attacks and defense

439
00:17:37,440 --> 00:17:39,520
but we

440
00:17:39,520 --> 00:17:41,919
these are some basic ones

441
00:17:41,919 --> 00:17:42,880
so

442
00:17:42,880 --> 00:17:45,440
luckily for the aggressors

443
00:17:45,440 --> 00:17:47,679
defensive solutions tend to be related

444
00:17:47,679 --> 00:17:49,120
to business

445
00:17:49,120 --> 00:17:50,559
so

446
00:17:50,559 --> 00:17:51,440
if

447
00:17:51,440 --> 00:17:54,000
like i said before

448
00:17:54,000 --> 00:17:56,160
detection tools cannot require a lot of

449
00:17:56,160 --> 00:17:57,679
resource to run

450
00:17:57,679 --> 00:17:59,919
a heavy detection approach will spend

451
00:17:59,919 --> 00:18:01,440
many resource

452
00:18:01,440 --> 00:18:04,000
and this is not that good for business

453
00:18:04,000 --> 00:18:06,640
so usually they just address one or two

454
00:18:06,640 --> 00:18:08,720
detection approaches leaving some door

455
00:18:08,720 --> 00:18:10,080
open for us

456
00:18:10,080 --> 00:18:10,880
so

457
00:18:10,880 --> 00:18:12,880
we have to to find the weakness of the

458
00:18:12,880 --> 00:18:16,720
two we intend to defeat

459
00:18:16,720 --> 00:18:18,240
okay

460
00:18:18,240 --> 00:18:21,039
and this is how we we

461
00:18:21,039 --> 00:18:22,480
start to

462
00:18:22,480 --> 00:18:26,720
to to do stuff because no

463
00:18:26,720 --> 00:18:31,440
every solution have some weakness

464
00:18:32,240 --> 00:18:33,120
uh

465
00:18:33,120 --> 00:18:35,440
let's talk about our first hook

466
00:18:35,440 --> 00:18:40,799
variation we call it that as egg hook

467
00:18:40,799 --> 00:18:43,039
the name is not important like i said

468
00:18:43,039 --> 00:18:44,640
the idea here is to differentiate

469
00:18:44,640 --> 00:18:46,240
between the techniques we are going to

470
00:18:46,240 --> 00:18:47,600
present

471
00:18:47,600 --> 00:18:48,720
uh

472
00:18:48,720 --> 00:18:50,320
but uh

473
00:18:50,320 --> 00:18:54,080
let me say something in advance a naive

474
00:18:54,080 --> 00:18:56,960
usage of egg hook will be detected by

475
00:18:56,960 --> 00:18:59,840
some approaches but it is important to

476
00:18:59,840 --> 00:19:02,160
you to talk about egg hook

477
00:19:02,160 --> 00:19:03,280
because

478
00:19:03,280 --> 00:19:06,559
we will use it in the hollow hook is

479
00:19:06,559 --> 00:19:08,640
part of the hollow hook

480
00:19:08,640 --> 00:19:11,360
okay

481
00:19:11,360 --> 00:19:12,240
uh

482
00:19:12,240 --> 00:19:14,400
how it works uh

483
00:19:14,400 --> 00:19:17,840
the the the egg part of the name is true

484
00:19:17,840 --> 00:19:19,760
to

485
00:19:19,760 --> 00:19:23,360
is related to the shell code egghang

486
00:19:23,360 --> 00:19:25,679
which is a very useful in exploit

487
00:19:25,679 --> 00:19:27,919
development as you guys know if you

488
00:19:27,919 --> 00:19:29,039
don't know

489
00:19:29,039 --> 00:19:31,520
do some research on

490
00:19:31,520 --> 00:19:33,200
egg hunt

491
00:19:33,200 --> 00:19:35,360
that will be it's easy

492
00:19:35,360 --> 00:19:38,400
uh to to understand is is

493
00:19:38,400 --> 00:19:40,880
kind of similar what we do in this

494
00:19:40,880 --> 00:19:43,280
technique that we will show you

495
00:19:43,280 --> 00:19:46,080
the the hook technique is it's helpful

496
00:19:46,080 --> 00:19:48,559
to bypass some detection approaches

497
00:19:48,559 --> 00:19:50,960
that monitor changes in the api

498
00:19:50,960 --> 00:19:53,919
structures and do not care

499
00:19:53,919 --> 00:19:56,559
if we change the main module

500
00:19:56,559 --> 00:19:58,480
instructions

501
00:19:58,480 --> 00:19:59,919
so

502
00:19:59,919 --> 00:20:02,400
instead of looking for a shellco

503
00:20:02,400 --> 00:20:03,919
mark

504
00:20:03,919 --> 00:20:06,400
as in the show called deckhand

505
00:20:06,400 --> 00:20:09,039
we look for api calls inside the

506
00:20:09,039 --> 00:20:10,880
application main module

507
00:20:10,880 --> 00:20:14,559
and we patch it when we find them

508
00:20:14,559 --> 00:20:15,280
so

509
00:20:15,280 --> 00:20:18,559
this way we do not have to change a bit

510
00:20:18,559 --> 00:20:20,799
at the api instructions

511
00:20:20,799 --> 00:20:22,159
there

512
00:20:22,159 --> 00:20:24,000
because like

513
00:20:24,000 --> 00:20:26,400
like i said before well many detection

514
00:20:26,400 --> 00:20:27,679
approaches look

515
00:20:27,679 --> 00:20:29,600
carefully for

516
00:20:29,600 --> 00:20:33,520
changes in the api structure so

517
00:20:33,520 --> 00:20:35,120
uh for example

518
00:20:35,120 --> 00:20:36,159
uh

519
00:20:36,159 --> 00:20:37,919
let's say that we want to change the

520
00:20:37,919 --> 00:20:41,600
behavior of the beep api

521
00:20:41,760 --> 00:20:44,480
we will add some new functionalities

522
00:20:44,480 --> 00:20:46,720
without breaking or losing the original

523
00:20:46,720 --> 00:20:47,600
ones

524
00:20:47,600 --> 00:20:48,400
okay

525
00:20:48,400 --> 00:20:49,840
that's the the

526
00:20:49,840 --> 00:20:51,440
golden rule for

527
00:20:51,440 --> 00:20:53,039
for

528
00:20:53,039 --> 00:20:56,000
api hooks we we can't break it

529
00:20:56,000 --> 00:20:58,159
the the application

530
00:20:58,159 --> 00:21:00,559
so the main idea here is to demonstrate

531
00:21:00,559 --> 00:21:03,440
some palpable change of behavior

532
00:21:03,440 --> 00:21:05,840
we will call beep

533
00:21:05,840 --> 00:21:07,360
and includes

534
00:21:07,360 --> 00:21:10,559
some classic caulk

535
00:21:10,559 --> 00:21:13,600
payload to avoid bad luck with the demo

536
00:21:13,600 --> 00:21:16,559
god sorry guys another calc proof of

537
00:21:16,559 --> 00:21:17,520
concept

538
00:21:17,520 --> 00:21:18,799
my bad

539
00:21:18,799 --> 00:21:21,280
so first and foremost

540
00:21:21,280 --> 00:21:23,120
we have to inject the trampoline

541
00:21:23,120 --> 00:21:24,480
function

542
00:21:24,480 --> 00:21:27,039
and some code that will scan

543
00:21:27,039 --> 00:21:30,799
the main module for beat calls and

544
00:21:30,799 --> 00:21:32,559
patch it when it

545
00:21:32,559 --> 00:21:34,159
it finds it

546
00:21:34,159 --> 00:21:37,600
it doesn't matter if you do

547
00:21:37,600 --> 00:21:41,120
it with dll injection pe injection or

548
00:21:41,120 --> 00:21:43,200
other phase technique but we have to

549
00:21:43,200 --> 00:21:47,919
inject code in the process okay

550
00:21:49,039 --> 00:21:50,960
then

551
00:21:50,960 --> 00:21:52,000
be

552
00:21:52,000 --> 00:21:54,720
after injection

553
00:21:54,720 --> 00:21:56,799
our scan routine will start to seek for

554
00:21:56,799 --> 00:21:58,480
big calls

555
00:21:58,480 --> 00:22:02,720
is it's a ff15 knob code

556
00:22:02,720 --> 00:22:05,039
in this specific case

557
00:22:05,039 --> 00:22:07,280
uh therefore when an ability call is

558
00:22:07,280 --> 00:22:08,480
found

559
00:22:08,480 --> 00:22:11,120
like in this arrow

560
00:22:11,120 --> 00:22:14,320
the we change it we patch it to jump to

561
00:22:14,320 --> 00:22:17,280
the trampoline function

562
00:22:17,280 --> 00:22:19,440
okay keep searching

563
00:22:19,440 --> 00:22:22,960
another call but it's not big

564
00:22:22,960 --> 00:22:24,960
next

565
00:22:24,960 --> 00:22:26,320
okay a lot of

566
00:22:26,320 --> 00:22:27,280
patch

567
00:22:27,280 --> 00:22:28,320
and done

568
00:22:28,320 --> 00:22:29,760
that that's it

569
00:22:29,760 --> 00:22:31,840
that the patch is installed without

570
00:22:31,840 --> 00:22:34,559
breaking the api preserving the original

571
00:22:34,559 --> 00:22:37,039
parameters and providing functionalities

572
00:22:37,039 --> 00:22:39,280
to it without changing the single

573
00:22:39,280 --> 00:22:41,679
instruction inside the bpa api

574
00:22:41,679 --> 00:22:43,679
so the source codes of this example will

575
00:22:43,679 --> 00:22:46,240
be available for you guys to download

576
00:22:46,240 --> 00:22:46,960
and

577
00:22:46,960 --> 00:22:49,520
study it and

578
00:22:49,520 --> 00:22:50,799
see how

579
00:22:50,799 --> 00:22:51,760
my

580
00:22:51,760 --> 00:22:54,559
coding is bad no

581
00:22:54,559 --> 00:22:56,000
no no

582
00:22:56,000 --> 00:22:58,720
don't cancel me please so you guys can

583
00:22:58,720 --> 00:23:02,159
have more details regarding the egg hook

584
00:23:02,159 --> 00:23:04,080
we do not touch the api

585
00:23:04,080 --> 00:23:07,280
but we patch the main module which is

586
00:23:07,280 --> 00:23:09,440
can be suspicious for some detection

587
00:23:09,440 --> 00:23:12,080
tools like i said

588
00:23:12,080 --> 00:23:15,678
okay this is the egg hook

589
00:23:16,640 --> 00:23:18,880
now let's talk about hollow hook which

590
00:23:18,880 --> 00:23:20,840
is the fancy

591
00:23:20,840 --> 00:23:22,559
one

592
00:23:22,559 --> 00:23:24,559
okay

593
00:23:24,559 --> 00:23:26,559
this technique is more suitable to be

594
00:23:26,559 --> 00:23:28,960
used in a scenario where we can control

595
00:23:28,960 --> 00:23:30,640
the application execution like for

596
00:23:30,640 --> 00:23:32,240
example

597
00:23:32,240 --> 00:23:34,960
we can when you we can kill the process

598
00:23:34,960 --> 00:23:37,039
and create it again

599
00:23:37,039 --> 00:23:39,679
suspended for example do what you have

600
00:23:39,679 --> 00:23:40,559
to do

601
00:23:40,559 --> 00:23:44,720
and resume the process but in simple

602
00:23:44,720 --> 00:23:45,840
process

603
00:23:45,840 --> 00:23:48,799
we can do it

604
00:23:48,960 --> 00:23:51,840
a hot patch does doesn't matter

605
00:23:51,840 --> 00:23:55,279
if there's a cycle it depends on the

606
00:23:55,279 --> 00:23:56,799
the situation

607
00:23:56,799 --> 00:23:57,520
but

608
00:23:57,520 --> 00:23:59,440
the the

609
00:23:59,440 --> 00:24:02,000
the idea here is to speak about the

610
00:24:02,000 --> 00:24:03,200
strategy

611
00:24:03,200 --> 00:24:04,559
it's not about

612
00:24:04,559 --> 00:24:05,520
the

613
00:24:05,520 --> 00:24:07,360
how to code it

614
00:24:07,360 --> 00:24:09,840
the the the how to code is it's easy

615
00:24:09,840 --> 00:24:12,240
it's the the easy part of the strategy

616
00:24:12,240 --> 00:24:13,120
is

617
00:24:13,120 --> 00:24:15,520
the the important here

618
00:24:15,520 --> 00:24:17,360
uh hello hook

619
00:24:17,360 --> 00:24:19,760
strategy is to copy the main module

620
00:24:19,760 --> 00:24:22,559
instructions to another memory area

621
00:24:22,559 --> 00:24:23,760
that are not

622
00:24:23,760 --> 00:24:27,679
monitored by the detection tools

623
00:24:27,679 --> 00:24:30,640
because the the the most of the

624
00:24:30,640 --> 00:24:32,640
fancy detection tools

625
00:24:32,640 --> 00:24:34,799
uh load the the

626
00:24:34,799 --> 00:24:36,480
binary on disk

627
00:24:36,480 --> 00:24:39,919
and compare what we have on the memory

628
00:24:39,919 --> 00:24:41,120
so

629
00:24:41,120 --> 00:24:44,640
if they load and compare if the memory

630
00:24:44,640 --> 00:24:46,880
if you don't touch

631
00:24:46,880 --> 00:24:50,640
in the place where he is looking

632
00:24:50,640 --> 00:24:52,400
making the comparison

633
00:24:52,400 --> 00:24:54,159
will be fine

634
00:24:54,159 --> 00:24:55,840
so

635
00:24:55,840 --> 00:24:58,840
so the idea here

636
00:24:58,840 --> 00:25:02,159
uh we can hook the calls

637
00:25:02,159 --> 00:25:04,400
to the apis of interest

638
00:25:04,400 --> 00:25:06,720
in the copy that we made

639
00:25:06,720 --> 00:25:08,400
of the main module

640
00:25:08,400 --> 00:25:09,840
with the

641
00:25:09,840 --> 00:25:12,000
egg hook can patch it

642
00:25:12,000 --> 00:25:13,679
okay we copy

643
00:25:13,679 --> 00:25:15,679
and we allocate memory

644
00:25:15,679 --> 00:25:17,600
in the process copy the main module

645
00:25:17,600 --> 00:25:18,640
there

646
00:25:18,640 --> 00:25:20,480
uh

647
00:25:20,480 --> 00:25:21,520
and

648
00:25:21,520 --> 00:25:24,080
inject the trampoline function and the

649
00:25:24,080 --> 00:25:27,039
egg hook function

650
00:25:27,279 --> 00:25:29,279
execute the the

651
00:25:29,279 --> 00:25:30,799
egg hook

652
00:25:30,799 --> 00:25:32,159
to patch

653
00:25:32,159 --> 00:25:34,400
the the the copy

654
00:25:34,400 --> 00:25:37,520
and we redirect the execution flow to

655
00:25:37,520 --> 00:25:40,080
the main module

656
00:25:40,080 --> 00:25:41,360
copy

657
00:25:41,360 --> 00:25:44,240
uh entry point let me say

658
00:25:44,240 --> 00:25:47,120
another way

659
00:25:50,400 --> 00:25:52,960
the bypass happened here because we do

660
00:25:52,960 --> 00:25:55,760
not touch the main module or the api

661
00:25:55,760 --> 00:25:57,600
instructions

662
00:25:57,600 --> 00:26:00,000
let's put in the diagram so we can

663
00:26:00,000 --> 00:26:02,000
understand better

664
00:26:02,000 --> 00:26:05,840
uh first we create the process suspended

665
00:26:05,840 --> 00:26:08,080
okay we have some

666
00:26:08,080 --> 00:26:10,640
if you dot xg

667
00:26:10,640 --> 00:26:11,919
application

668
00:26:11,919 --> 00:26:15,919
and we create drag it from there

669
00:26:15,919 --> 00:26:20,000
in a suspended state

670
00:26:20,000 --> 00:26:20,880
then

671
00:26:20,880 --> 00:26:22,960
we allocate memory

672
00:26:22,960 --> 00:26:26,400
okay the memory location must be

673
00:26:26,400 --> 00:26:29,760
the same size we're going to scan also

674
00:26:29,760 --> 00:26:30,960
we have to

675
00:26:30,960 --> 00:26:31,919
to

676
00:26:31,919 --> 00:26:34,400
use the the pe

677
00:26:34,400 --> 00:26:36,000
instructions

678
00:26:36,000 --> 00:26:36,840
and

679
00:26:36,840 --> 00:26:39,600
metadata to

680
00:26:39,600 --> 00:26:41,520
to to

681
00:26:41,520 --> 00:26:43,120
to figure out

682
00:26:43,120 --> 00:26:45,039
the size we need

683
00:26:45,039 --> 00:26:47,919
to to allocate okay

684
00:26:47,919 --> 00:26:48,720
uh

685
00:26:48,720 --> 00:26:50,000
we inject

686
00:26:50,000 --> 00:26:51,679
the trampoline

687
00:26:51,679 --> 00:26:54,559
inject the egg hook function

688
00:26:54,559 --> 00:26:56,879
and

689
00:26:57,200 --> 00:27:01,360
we run we open the main module okay

690
00:27:01,360 --> 00:27:03,200
and we resume

691
00:27:03,200 --> 00:27:08,080
the execu with the execution of egg hook

692
00:27:08,400 --> 00:27:09,440
so

693
00:27:09,440 --> 00:27:11,760
when we resume the application is

694
00:27:11,760 --> 00:27:14,480
executing the hook function

695
00:27:14,480 --> 00:27:16,799
which will patch the allocated memory

696
00:27:16,799 --> 00:27:19,600
area regarding the call of the api of

697
00:27:19,600 --> 00:27:20,960
interest

698
00:27:20,960 --> 00:27:24,080
the the egg hook will jump

699
00:27:24,080 --> 00:27:25,919
to the same instruction

700
00:27:25,919 --> 00:27:28,320
of the original entry point executing

701
00:27:28,320 --> 00:27:30,480
the application normally

702
00:27:30,480 --> 00:27:32,480
okay

703
00:27:32,480 --> 00:27:34,720
eventually we have to fix something but

704
00:27:34,720 --> 00:27:37,679
it's it's just details that the idea is

705
00:27:37,679 --> 00:27:39,919
is this one

706
00:27:39,919 --> 00:27:41,600
uh

707
00:27:41,600 --> 00:27:43,918
okay

708
00:27:44,559 --> 00:27:49,039
uh now let's go to the the fun part guys

709
00:27:49,039 --> 00:27:50,080
uh

710
00:27:50,080 --> 00:27:52,480
just for the record uh

711
00:27:52,480 --> 00:27:56,960
all tools we bypass it are uh are cool

712
00:27:56,960 --> 00:28:00,320
and very useful guys i totally respect

713
00:28:00,320 --> 00:28:02,559
the tools and the developers

714
00:28:02,559 --> 00:28:06,159
uh i'm not pointing fingers here

715
00:28:06,159 --> 00:28:08,480
uh it's natural course of cyber security

716
00:28:08,480 --> 00:28:09,600
cycle

717
00:28:09,600 --> 00:28:12,240
some people call detection mechanisms i

718
00:28:12,240 --> 00:28:13,760
do eventually

719
00:28:13,760 --> 00:28:16,480
and other people try to defeat them

720
00:28:16,480 --> 00:28:19,679
i do eventually too so

721
00:28:19,679 --> 00:28:23,520
most of us playing the both sides

722
00:28:23,520 --> 00:28:25,440
when someone bypasses the detection

723
00:28:25,440 --> 00:28:28,240
mechanisms the tools are updated to

724
00:28:28,240 --> 00:28:31,279
address the new technique so it's a cat

725
00:28:31,279 --> 00:28:32,799
mouse relationship

726
00:28:32,799 --> 00:28:35,120
a healthy one okay

727
00:28:35,120 --> 00:28:37,520
the the source code provided as a proof

728
00:28:37,520 --> 00:28:40,080
of concept are not made to address some

729
00:28:40,080 --> 00:28:42,320
real life scenarios guys

730
00:28:42,320 --> 00:28:44,480
they do not inject in a remote process

731
00:28:44,480 --> 00:28:47,760
or do some other nice tricks they were

732
00:28:47,760 --> 00:28:50,000
specifically made to illustrate

733
00:28:50,000 --> 00:28:52,720
and improve the hook and then by fast

734
00:28:52,720 --> 00:28:55,679
strategy okay

735
00:28:55,760 --> 00:28:57,200
so

736
00:28:57,200 --> 00:28:59,679
the proof of concept idea for our

737
00:28:59,679 --> 00:29:02,159
example here is the same

738
00:29:02,159 --> 00:29:04,640
first we will call bit

739
00:29:04,640 --> 00:29:05,440
just

740
00:29:05,440 --> 00:29:09,039
a bit so you can hear it without the the

741
00:29:09,039 --> 00:29:10,559
hook install it

742
00:29:10,559 --> 00:29:12,559
then we will install the hook and call

743
00:29:12,559 --> 00:29:14,320
beep again

744
00:29:14,320 --> 00:29:16,559
but after the installed hook

745
00:29:16,559 --> 00:29:19,200
when we call beep the windows calculator

746
00:29:19,200 --> 00:29:21,039
will pop up okay

747
00:29:21,039 --> 00:29:22,159
oh

748
00:29:22,159 --> 00:29:24,880
caulk park again sorry again

749
00:29:24,880 --> 00:29:29,039
my bad but well we will test them with i

750
00:29:29,039 --> 00:29:29,919
guess

751
00:29:29,919 --> 00:29:31,360
pc

752
00:29:31,360 --> 00:29:34,080
because uh what's the most complete tool

753
00:29:34,080 --> 00:29:36,080
regarding the textual features that we

754
00:29:36,080 --> 00:29:38,320
found if you have one

755
00:29:38,320 --> 00:29:42,159
nice and i'm not aware please send me

756
00:29:42,159 --> 00:29:43,360
uh

757
00:29:43,360 --> 00:29:46,080
if you like to test your application or

758
00:29:46,080 --> 00:29:48,240
your detection tool

759
00:29:48,240 --> 00:29:51,279
just we can we can talk i can do a test

760
00:29:51,279 --> 00:29:55,520
with your tools okay but

761
00:29:55,520 --> 00:29:56,720
for today

762
00:29:56,720 --> 00:29:58,159
uh the best

763
00:29:58,159 --> 00:30:00,720
i i could figure out

764
00:30:00,720 --> 00:30:03,279
is pec

765
00:30:03,279 --> 00:30:04,159
uh

766
00:30:04,159 --> 00:30:06,720
we will show the execution against egg

767
00:30:06,720 --> 00:30:08,559
hook hollow hook

768
00:30:08,559 --> 00:30:11,360
uh off the api just

769
00:30:11,360 --> 00:30:12,720
but using

770
00:30:12,720 --> 00:30:14,559
iet

771
00:30:14,559 --> 00:30:15,840
techniques

772
00:30:15,840 --> 00:30:18,240
and to redirect the flow and and the

773
00:30:18,240 --> 00:30:22,480
full main module hollow hook okay

774
00:30:22,480 --> 00:30:23,279
so

775
00:30:23,279 --> 00:30:26,799
let's make a first pray to the demogods

776
00:30:26,799 --> 00:30:28,880
and hope for the best

777
00:30:28,880 --> 00:30:31,279
and stop talking and

778
00:30:31,279 --> 00:30:33,840
start to show the code

779
00:30:33,840 --> 00:30:36,158
okay

780
00:30:37,840 --> 00:30:41,439
let me change to my

781
00:30:43,919 --> 00:30:45,919
my virtual machine

782
00:30:45,919 --> 00:30:46,880
okay

783
00:30:46,880 --> 00:30:49,200
here we have

784
00:30:49,200 --> 00:30:51,440
psc

785
00:30:51,440 --> 00:30:54,080
and some

786
00:30:54,080 --> 00:30:56,399
egg hook hollow hook

787
00:30:56,399 --> 00:30:58,480
the with the main module and hollow hook

788
00:30:58,480 --> 00:31:00,960
with iag like let's take a look in the

789
00:31:00,960 --> 00:31:02,840
source codes a fast look

790
00:31:02,840 --> 00:31:06,240
just for you guys to understand what

791
00:31:06,240 --> 00:31:09,279
happens a bit small

792
00:31:09,279 --> 00:31:11,600
okay

793
00:31:11,600 --> 00:31:16,320
i think the size is enough here

794
00:31:17,360 --> 00:31:21,440
not not big deal guys just uh

795
00:31:21,440 --> 00:31:25,039
bad implementation but the idea will you

796
00:31:25,039 --> 00:31:26,159
get

797
00:31:26,159 --> 00:31:29,039
this is not the point here just dynamic

798
00:31:29,039 --> 00:31:32,039
ipi

799
00:31:32,159 --> 00:31:33,679
resolving

800
00:31:33,679 --> 00:31:36,000
let's jump

801
00:31:36,000 --> 00:31:38,080
uh here

802
00:31:38,080 --> 00:31:40,960
we start the egg hook okay

803
00:31:40,960 --> 00:31:43,200
uh

804
00:31:43,200 --> 00:31:45,519
even it will fine

805
00:31:45,519 --> 00:31:47,200
for

806
00:31:47,200 --> 00:31:49,039
a call

807
00:31:49,039 --> 00:31:50,960
ff15

808
00:31:50,960 --> 00:31:54,159
if it file will check if the bit

809
00:31:54,159 --> 00:31:56,240
if yes

810
00:31:56,240 --> 00:31:58,320
then it will

811
00:31:58,320 --> 00:32:01,760
create a relative jump

812
00:32:01,760 --> 00:32:04,080
and

813
00:32:04,080 --> 00:32:05,440
protect the

814
00:32:05,440 --> 00:32:07,279
memory area

815
00:32:07,279 --> 00:32:10,080
and you call the beep again

816
00:32:10,080 --> 00:32:12,960
but this time it will be patched here

817
00:32:12,960 --> 00:32:15,519
okay the first time i didn't show you

818
00:32:15,519 --> 00:32:17,039
sorry

819
00:32:17,039 --> 00:32:18,000
uh

820
00:32:18,000 --> 00:32:20,880
the first time is here in the beginning

821
00:32:20,880 --> 00:32:23,279
the first bit

822
00:32:23,279 --> 00:32:26,640
they are equal okay

823
00:32:27,039 --> 00:32:28,640
and the second beat

824
00:32:28,640 --> 00:32:29,760
okay

825
00:32:29,760 --> 00:32:32,000
and this is the trampoline function what

826
00:32:32,000 --> 00:32:33,600
will happen here

827
00:32:33,600 --> 00:32:34,880
uh

828
00:32:34,880 --> 00:32:36,720
it will grab the

829
00:32:36,720 --> 00:32:39,760
parameters from the original bit

830
00:32:39,760 --> 00:32:41,519
you call the b

831
00:32:41,519 --> 00:32:43,600
this one is not be called we will be

832
00:32:43,600 --> 00:32:45,279
redirected here

833
00:32:45,279 --> 00:32:47,919
we call the b the original one then we

834
00:32:47,919 --> 00:32:49,200
pop up

835
00:32:49,200 --> 00:32:51,200
the calculator

836
00:32:51,200 --> 00:32:53,679
and we will slip

837
00:32:53,679 --> 00:32:55,519
so we can

838
00:32:55,519 --> 00:32:58,559
execute pc okay to

839
00:32:58,559 --> 00:33:01,760
try to detect it while it is patched

840
00:33:01,760 --> 00:33:04,399
with the hook install it okay

841
00:33:04,399 --> 00:33:06,399
okay that's it

842
00:33:06,399 --> 00:33:08,080
let's do it

843
00:33:08,080 --> 00:33:11,840
i will execute here

844
00:33:14,000 --> 00:33:15,760
and

845
00:33:15,760 --> 00:33:18,399
let's do it

846
00:33:20,480 --> 00:33:22,620
i will run egg hook

847
00:33:22,620 --> 00:33:24,720
[Music]

848
00:33:24,720 --> 00:33:26,240
two beeps

849
00:33:26,240 --> 00:33:27,600
and a [ __ ]

850
00:33:27,600 --> 00:33:29,519
okay boards

851
00:33:29,519 --> 00:33:31,760
the process two running

852
00:33:31,760 --> 00:33:34,320
pid 4984

853
00:33:34,320 --> 00:33:36,559
let's try it

854
00:33:36,559 --> 00:33:39,039
with pse

855
00:33:39,039 --> 00:33:42,000
4984

856
00:33:45,600 --> 00:33:46,640
okay

857
00:33:46,640 --> 00:33:48,799
psiv detect

858
00:33:48,799 --> 00:33:51,279
okay egg hook

859
00:33:51,279 --> 00:33:53,519
let's hook it

860
00:33:53,519 --> 00:33:55,679
because we like i said

861
00:33:55,679 --> 00:33:59,600
it changes the main module

862
00:33:59,600 --> 00:34:01,519
no problem

863
00:34:01,519 --> 00:34:03,919
that's that's life

864
00:34:03,919 --> 00:34:07,919
we we are busted okay

865
00:34:07,919 --> 00:34:09,760
now let's

866
00:34:09,760 --> 00:34:13,679
let's see the hollow hook with iit

867
00:34:13,679 --> 00:34:15,440
just a fast

868
00:34:15,440 --> 00:34:19,720
look in the source code

869
00:34:20,000 --> 00:34:22,719
kind of similar it would be fast i would

870
00:34:22,719 --> 00:34:25,199
just show the ieg

871
00:34:25,199 --> 00:34:27,439
hook

872
00:34:29,119 --> 00:34:32,839
kind of the same

873
00:34:40,320 --> 00:34:44,719
but it's a bit different because we will

874
00:34:44,719 --> 00:34:46,320
hollow

875
00:34:46,320 --> 00:34:47,760
we we

876
00:34:47,760 --> 00:34:50,159
calculate the beep size the the function

877
00:34:50,159 --> 00:34:51,280
size

878
00:34:51,280 --> 00:34:53,760
then we

879
00:34:53,839 --> 00:34:55,280
then we clone it

880
00:34:55,280 --> 00:34:58,800
put it in in another we malloc here

881
00:34:58,800 --> 00:35:00,720
we unlock memory

882
00:35:00,720 --> 00:35:03,680
and put it copy the

883
00:35:03,680 --> 00:35:06,880
instructions of the api in this

884
00:35:06,880 --> 00:35:08,720
area where

885
00:35:08,720 --> 00:35:10,880
psv

886
00:35:10,880 --> 00:35:13,280
don't look fully

887
00:35:13,280 --> 00:35:15,839
in order to don't look okay then we just

888
00:35:15,839 --> 00:35:17,359
do

889
00:35:17,359 --> 00:35:18,560
a simple

890
00:35:18,560 --> 00:35:22,960
iet hook pointing to the new

891
00:35:22,960 --> 00:35:24,160
beat

892
00:35:24,160 --> 00:35:27,040
function okay

893
00:35:27,280 --> 00:35:28,480
and we

894
00:35:28,480 --> 00:35:31,119
have the trampoline here

895
00:35:31,119 --> 00:35:32,560
kind of the same

896
00:35:32,560 --> 00:35:33,440
but

897
00:35:33,440 --> 00:35:36,720
with the api

898
00:35:36,720 --> 00:35:38,640
uh

899
00:35:38,640 --> 00:35:42,560
in on different memory area okay

900
00:35:42,560 --> 00:35:45,839
so let's try

901
00:35:49,920 --> 00:35:51,440
two beeps

902
00:35:51,440 --> 00:35:54,400
the second beep pop calculator

903
00:35:54,400 --> 00:35:55,920
same

904
00:35:55,920 --> 00:35:59,200
four seven and two let's try it

905
00:35:59,200 --> 00:36:02,319
for seven night two

906
00:36:02,880 --> 00:36:04,560
bam

907
00:36:04,560 --> 00:36:06,800
no detection okay

908
00:36:06,800 --> 00:36:08,480
but wait

909
00:36:08,480 --> 00:36:12,800
basic i have some

910
00:36:12,800 --> 00:36:15,440
parameter

911
00:36:15,839 --> 00:36:17,839
specific one to

912
00:36:17,839 --> 00:36:20,160
iet

913
00:36:20,160 --> 00:36:22,879
detection

914
00:36:23,680 --> 00:36:25,760
okay

915
00:36:25,760 --> 00:36:28,560
we have to use it so

916
00:36:28,560 --> 00:36:32,640
let's do it again with the iet

917
00:36:34,079 --> 00:36:36,960
okay busted

918
00:36:37,200 --> 00:36:39,520
okay

919
00:36:39,680 --> 00:36:43,119
but it was because

920
00:36:43,119 --> 00:36:46,960
we changed the iit so pc

921
00:36:46,960 --> 00:36:48,640
detected

922
00:36:48,640 --> 00:36:50,560
is able to detect

923
00:36:50,560 --> 00:36:53,440
now let's do it with

924
00:36:53,440 --> 00:36:55,040
the

925
00:36:55,040 --> 00:36:57,520
hollow hook made module the way we would

926
00:36:57,520 --> 00:37:00,079
clone the whole

927
00:37:00,079 --> 00:37:02,160
main module

928
00:37:02,160 --> 00:37:05,720
it's too big

929
00:37:09,680 --> 00:37:12,720
it's a bit different this guy

930
00:37:12,720 --> 00:37:15,919
copied first

931
00:37:18,400 --> 00:37:19,280
some

932
00:37:19,280 --> 00:37:22,800
dynamic api resolving

933
00:37:22,800 --> 00:37:26,400
here we allocate the memory in this case

934
00:37:26,400 --> 00:37:28,079
guys i

935
00:37:28,079 --> 00:37:30,480
do for the sake of simplicity

936
00:37:30,480 --> 00:37:31,280
i

937
00:37:31,280 --> 00:37:32,880
define it

938
00:37:32,880 --> 00:37:34,160
an area

939
00:37:34,160 --> 00:37:37,760
to to do the egg hub at the hook and to

940
00:37:37,760 --> 00:37:40,320
copy the memory so in a real life

941
00:37:40,320 --> 00:37:42,160
scenario it will be

942
00:37:42,160 --> 00:37:45,119
more complex okay

943
00:37:45,119 --> 00:37:45,920
uh

944
00:37:45,920 --> 00:37:48,560
then we do the egg hook here

945
00:37:48,560 --> 00:37:51,839
the same one

946
00:37:52,240 --> 00:37:54,480
um

947
00:37:54,480 --> 00:37:56,400
and

948
00:37:56,400 --> 00:37:59,359
they call beep again

949
00:38:00,320 --> 00:38:01,520
and

950
00:38:01,520 --> 00:38:03,119
they sleep

951
00:38:03,119 --> 00:38:05,119
okay

952
00:38:05,119 --> 00:38:07,440
and here is the trampoline the car the

953
00:38:07,440 --> 00:38:11,599
same function same trampoline function

954
00:38:11,599 --> 00:38:14,240
okay but all the main module will be

955
00:38:14,240 --> 00:38:18,960
copied for different memory area

956
00:38:18,960 --> 00:38:22,079
okay let's run

957
00:38:23,839 --> 00:38:25,920
okay two beeps

958
00:38:25,920 --> 00:38:27,839
calculator

959
00:38:27,839 --> 00:38:29,760
again

960
00:38:29,760 --> 00:38:32,560
what is the name of the process

961
00:38:32,560 --> 00:38:34,960
sorry then the pid

962
00:38:34,960 --> 00:38:37,520
2660

963
00:38:37,520 --> 00:38:40,520
2660

964
00:38:42,240 --> 00:38:43,119
good

965
00:38:43,119 --> 00:38:46,079
we are good

966
00:38:46,079 --> 00:38:49,839
let's check with ig

967
00:38:52,079 --> 00:38:53,920
bam

968
00:38:53,920 --> 00:38:54,800
done

969
00:38:54,800 --> 00:38:56,160
with

970
00:38:56,160 --> 00:38:58,000
the bypass works

971
00:38:58,000 --> 00:39:00,480
and

972
00:39:00,480 --> 00:39:04,240
the pc can cannot detect us

973
00:39:04,240 --> 00:39:07,359
anymore okay

974
00:39:08,640 --> 00:39:10,320
um

975
00:39:10,320 --> 00:39:11,280
okay

976
00:39:11,280 --> 00:39:13,839
let's get back to the

977
00:39:13,839 --> 00:39:15,520
presentation

978
00:39:15,520 --> 00:39:17,200
i hope you

979
00:39:17,200 --> 00:39:18,480
understand

980
00:39:18,480 --> 00:39:19,359
that

981
00:39:19,359 --> 00:39:21,839
the main idea of the

982
00:39:21,839 --> 00:39:23,200
the codes

983
00:39:23,200 --> 00:39:26,240
and let's talk about some results

984
00:39:26,240 --> 00:39:28,800
we have uh

985
00:39:28,800 --> 00:39:30,079
until now

986
00:39:30,079 --> 00:39:32,240
okay

987
00:39:32,240 --> 00:39:33,200
so

988
00:39:33,200 --> 00:39:36,000
here's the actual results of an ongoing

989
00:39:36,000 --> 00:39:39,359
work this work will never stop because

990
00:39:39,359 --> 00:39:40,880
eventually

991
00:39:40,880 --> 00:39:44,560
this those techniques will be

992
00:39:45,839 --> 00:39:49,119
used in the detection

993
00:39:49,359 --> 00:39:51,119
mechanism so

994
00:39:51,119 --> 00:39:54,400
they will know about it and they will

995
00:39:54,400 --> 00:39:58,079
defend against it so the navy hook

996
00:39:58,079 --> 00:40:00,880
gets detected by some tools

997
00:40:00,880 --> 00:40:03,920
because it patches the main module okay

998
00:40:03,920 --> 00:40:08,400
but the psc pc hunter and windows kernel

999
00:40:08,400 --> 00:40:11,040
explorer can detect it

1000
00:40:11,040 --> 00:40:14,400
but ring 3 api hooks scanner no and

1001
00:40:14,400 --> 00:40:16,400
volatility

1002
00:40:16,400 --> 00:40:19,920
i can't see it okay

1003
00:40:21,599 --> 00:40:23,040
hollow hook

1004
00:40:23,040 --> 00:40:25,839
that copy just the ipis

1005
00:40:25,839 --> 00:40:27,680
and patch the

1006
00:40:27,680 --> 00:40:28,880
iit

1007
00:40:28,880 --> 00:40:32,800
just get detected by pace when just when

1008
00:40:32,800 --> 00:40:35,200
ait parameters use it

1009
00:40:35,200 --> 00:40:37,760
it makes sense

1010
00:40:37,760 --> 00:40:40,000
uh the hollow hook that copy the main

1011
00:40:40,000 --> 00:40:42,240
model today is by passing all of the

1012
00:40:42,240 --> 00:40:43,280
tools

1013
00:40:43,280 --> 00:40:46,560
i tested okay

1014
00:40:46,560 --> 00:40:48,560
um

1015
00:40:48,560 --> 00:40:50,880
i'm providing this slide with the

1016
00:40:50,880 --> 00:40:53,119
reference i use it to create the talk

1017
00:40:53,119 --> 00:40:55,839
and you guys can get more details

1018
00:40:55,839 --> 00:40:59,440
with me if you like and but

1019
00:40:59,440 --> 00:41:02,160
this is the sources and the source codes

1020
00:41:02,160 --> 00:41:06,480
are available here too

1021
00:41:06,480 --> 00:41:07,359
uh

1022
00:41:07,359 --> 00:41:10,079
and finishing the talk guys i think we

1023
00:41:10,079 --> 00:41:14,319
can use refuse idea to create a variant

1024
00:41:14,319 --> 00:41:16,800
uh we can say that there is a big

1025
00:41:16,800 --> 00:41:19,280
difference between making our and using

1026
00:41:19,280 --> 00:41:22,400
our we need to get rid of this stigma

1027
00:41:22,400 --> 00:41:24,960
that malware code is a negative in every

1028
00:41:24,960 --> 00:41:26,319
say every way

1029
00:41:26,319 --> 00:41:28,640
in every sense well without marvel

1030
00:41:28,640 --> 00:41:31,119
coders red team and pentax activity are

1031
00:41:31,119 --> 00:41:34,000
very limited sorry guys uh regarding

1032
00:41:34,000 --> 00:41:35,520
ring tree hooks

1033
00:41:35,520 --> 00:41:38,400
uh i'm sure that that

1034
00:41:38,400 --> 00:41:40,720
there are still many ways to bypass

1035
00:41:40,720 --> 00:41:45,280
defense tools just waiting to be found

1036
00:41:45,280 --> 00:41:46,839
never ending

1037
00:41:46,839 --> 00:41:49,839
so if anyone interested in asking

1038
00:41:49,839 --> 00:41:52,319
something or giving feedback

1039
00:41:52,319 --> 00:41:53,760
please

1040
00:41:53,760 --> 00:41:58,079
do it in the event question and answers

1041
00:41:58,079 --> 00:42:00,720
session or via the contact

1042
00:42:00,720 --> 00:42:04,079
on the screens uh

1043
00:42:04,079 --> 00:42:07,119
no problem contact you can contact me

1044
00:42:07,119 --> 00:42:09,760
every time it's fine

1045
00:42:09,760 --> 00:42:12,000
thank you for your time keep recording

1046
00:42:12,000 --> 00:42:13,599
guys see ya

1047
00:42:13,599 --> 00:42:14,800
till the next

1048
00:42:14,800 --> 00:42:17,839
bye bye

