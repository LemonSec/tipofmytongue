1
00:00:04,000 --> 00:00:07,839
aloha and welcome to bundles of joy uh

2
00:00:07,839 --> 00:00:11,200
talk about breaking mac os via subverted

3
00:00:11,200 --> 00:00:13,360
application bundles

4
00:00:13,360 --> 00:00:15,839
my name is patrick wardle i am a

5
00:00:15,839 --> 00:00:17,680
independent security researcher who

6
00:00:17,680 --> 00:00:20,400
focuses on all things related to mac

7
00:00:20,400 --> 00:00:22,400
security you might be familiar with my

8
00:00:22,400 --> 00:00:25,199
mac security website and tool suite

9
00:00:25,199 --> 00:00:26,400
objective-c

10
00:00:26,400 --> 00:00:28,240
my mac security conference objective by

11
00:00:28,240 --> 00:00:30,320
the sea or the book i'm writing about

12
00:00:30,320 --> 00:00:33,680
analyzing mac malware

13
00:00:33,680 --> 00:00:37,600
so today's talk is a story i wanted to

14
00:00:37,600 --> 00:00:41,280
share with you whose main character is a

15
00:00:41,280 --> 00:00:43,760
lovely bug that affected all recent

16
00:00:43,760 --> 00:00:46,320
versions of mac os

17
00:00:46,320 --> 00:00:48,879
so the majority of the talk is going to

18
00:00:48,879 --> 00:00:51,760
be about analyzing the flaw reverse

19
00:00:51,760 --> 00:00:53,600
engineering the operating system to

20
00:00:53,600 --> 00:00:56,399
ultimately uncover the root cause the

21
00:00:56,399 --> 00:00:59,120
reason for the vulnerability

22
00:00:59,120 --> 00:01:00,160
we're also going to talk about some

23
00:01:00,160 --> 00:01:02,559
other chapters or interesting aspects of

24
00:01:02,559 --> 00:01:04,479
the bug including the fact that we

25
00:01:04,479 --> 00:01:07,520
discovered it in the wild exploited as

26
00:01:07,520 --> 00:01:08,640
zero day

27
00:01:08,640 --> 00:01:10,080
and then we're going to also talk about

28
00:01:10,080 --> 00:01:13,439
some defensive measures mechanisms such

29
00:01:13,439 --> 00:01:17,280
as ways to detect exploitation attempts

30
00:01:17,280 --> 00:01:19,600
ways to protect the system and then

31
00:01:19,600 --> 00:01:21,759
we're going to end the talk by reverse

32
00:01:21,759 --> 00:01:24,240
engineering or analyzing apple's patch

33
00:01:24,240 --> 00:01:27,040
to see how they ultimately close the

34
00:01:27,040 --> 00:01:30,560
door on this vulnerability

35
00:01:30,560 --> 00:01:33,200
so first let's talk about how apple

36
00:01:33,200 --> 00:01:36,640
protects mac users from infection as the

37
00:01:36,640 --> 00:01:39,040
bug we're talking about today was able

38
00:01:39,040 --> 00:01:41,200
to neatly sidestep

39
00:01:41,200 --> 00:01:44,880
many of these protections

40
00:01:44,880 --> 00:01:46,560
first though it's important to

41
00:01:46,560 --> 00:01:49,280
understand how mac users generally

42
00:01:49,280 --> 00:01:52,320
become infected with malware computer

43
00:01:52,320 --> 00:01:55,280
viruses trojans etc etc

44
00:01:55,280 --> 00:01:58,479
so the vast majority of these infection

45
00:01:58,479 --> 00:02:01,280
vectors require some sort of user

46
00:02:01,280 --> 00:02:03,840
assistance it's very rare to see a pure

47
00:02:03,840 --> 00:02:06,880
remote zero day exploit being used to

48
00:02:06,880 --> 00:02:09,199
deploy malware to mac systems what is

49
00:02:09,199 --> 00:02:12,239
far more common is adversaries or

50
00:02:12,239 --> 00:02:15,680
malicious attackers coercing or

51
00:02:15,680 --> 00:02:19,120
tricking mac users essentially

52
00:02:19,120 --> 00:02:21,680
into infecting themselves so on the

53
00:02:21,680 --> 00:02:24,239
slide we have some examples uh you know

54
00:02:24,239 --> 00:02:25,840
a lot of times users might be browsing

55
00:02:25,840 --> 00:02:27,599
the internet and they come across a site

56
00:02:27,599 --> 00:02:30,720
that has malicious advertisements or has

57
00:02:30,720 --> 00:02:32,720
perhaps been infected

58
00:02:32,720 --> 00:02:35,280
and this website will display something

59
00:02:35,280 --> 00:02:37,920
like a fake update a very common one on

60
00:02:37,920 --> 00:02:40,959
mac os is an alert or a pop-up saying

61
00:02:40,959 --> 00:02:44,000
your flash player is out of date please

62
00:02:44,000 --> 00:02:47,519
download and install the required update

63
00:02:47,519 --> 00:02:49,760
of course this is not a legitimate flash

64
00:02:49,760 --> 00:02:52,239
update but instead malware but the user

65
00:02:52,239 --> 00:02:54,560
is tricked into downloading and

66
00:02:54,560 --> 00:02:56,239
installing what they believe is a

67
00:02:56,239 --> 00:02:58,800
required flash update they will have

68
00:02:58,800 --> 00:03:00,959
inadvertently infecting them infected

69
00:03:00,959 --> 00:03:04,239
themselves with malware computer virus

70
00:03:04,239 --> 00:03:06,000
malicious code

71
00:03:06,000 --> 00:03:07,599
other examples include pirated

72
00:03:07,599 --> 00:03:09,519
applications

73
00:03:09,519 --> 00:03:12,239
ethics aside a lot of pirated

74
00:03:12,239 --> 00:03:14,159
applications contain malicious codes so

75
00:03:14,159 --> 00:03:15,840
it's not a good idea to install such

76
00:03:15,840 --> 00:03:18,800
applications but a large number or some

77
00:03:18,800 --> 00:03:21,599
number of mac users unfortunately will

78
00:03:21,599 --> 00:03:23,599
download and install these these

79
00:03:23,599 --> 00:03:25,680
applications looking for popular ones

80
00:03:25,680 --> 00:03:27,680
things like free versions of photoshop

81
00:03:27,680 --> 00:03:30,879
etc etc again if the user downloads and

82
00:03:30,879 --> 00:03:33,519
runs these they will become infected so

83
00:03:33,519 --> 00:03:35,760
again really the main takeaway is the

84
00:03:35,760 --> 00:03:38,400
attackers are pushing malicious code but

85
00:03:38,400 --> 00:03:41,599
the user is essentially responsible for

86
00:03:41,599 --> 00:03:43,599
infecting themselves by ultimately

87
00:03:43,599 --> 00:03:45,920
running the infected application or

88
00:03:45,920 --> 00:03:47,760
binary

89
00:03:47,760 --> 00:03:50,799
now as mac's become more popular

90
00:03:50,799 --> 00:03:54,799
so too do attacks and users uh user

91
00:03:54,799 --> 00:03:57,599
infections uh so so apple really had to

92
00:03:57,599 --> 00:03:59,280
do something

93
00:03:59,280 --> 00:04:01,519
about that and uh

94
00:04:01,519 --> 00:04:02,799
what we're going to be talking about

95
00:04:02,799 --> 00:04:06,000
today are the anti-infection mechanisms

96
00:04:06,000 --> 00:04:07,599
that apple

97
00:04:07,599 --> 00:04:10,560
introduced in recent versions of mac os

98
00:04:10,560 --> 00:04:12,159
essentially designed to protect the

99
00:04:12,159 --> 00:04:14,799
users from themselves and so these are

100
00:04:14,799 --> 00:04:16,560
mechanisms which we'll talk about but

101
00:04:16,560 --> 00:04:18,639
include file quarantine

102
00:04:18,639 --> 00:04:21,199
gatekeeper and notarization again the

103
00:04:21,199 --> 00:04:23,440
aim is really to protect the user from

104
00:04:23,440 --> 00:04:25,919
infecting themselves

105
00:04:25,919 --> 00:04:27,759
now before we dive in and talk about

106
00:04:27,759 --> 00:04:30,160
those protection mechanisms that the

107
00:04:30,160 --> 00:04:32,560
operating system provides which again

108
00:04:32,560 --> 00:04:34,080
are important to our talk because the

109
00:04:34,080 --> 00:04:35,600
vulnerability we talked we're going to

110
00:04:35,600 --> 00:04:38,240
talk about is able to bypass these we

111
00:04:38,240 --> 00:04:40,080
need to understand the quarantine

112
00:04:40,080 --> 00:04:42,240
attribute the quarantine attribute is

113
00:04:42,240 --> 00:04:44,720
added to anything that's downloaded from

114
00:04:44,720 --> 00:04:46,160
the internet so if you download an

115
00:04:46,160 --> 00:04:48,400
application you download an email

116
00:04:48,400 --> 00:04:50,960
attachment you save something from a

117
00:04:50,960 --> 00:04:52,880
whatsapp message that someone sent you

118
00:04:52,880 --> 00:04:54,960
on your computer the operating system or

119
00:04:54,960 --> 00:04:56,560
the application is going to add

120
00:04:56,560 --> 00:04:58,400
something called the quarantine

121
00:04:58,400 --> 00:04:59,680
attribute

122
00:04:59,680 --> 00:05:01,440
this is an extended attribute you can

123
00:05:01,440 --> 00:05:03,520
examine it with the x adder command if

124
00:05:03,520 --> 00:05:05,680
you pop open a terminal for example on

125
00:05:05,680 --> 00:05:07,759
the slide we can see that this

126
00:05:07,759 --> 00:05:10,360
application i've downloaded has the

127
00:05:10,360 --> 00:05:12,560
com.apple.quarantine attribute and this

128
00:05:12,560 --> 00:05:14,880
also has information about where it was

129
00:05:14,880 --> 00:05:16,479
downloaded from

130
00:05:16,479 --> 00:05:18,880
the importance of this attribute as we

131
00:05:18,880 --> 00:05:22,160
can see on the slide is it really

132
00:05:22,160 --> 00:05:24,960
signifies or alerts to the operating

133
00:05:24,960 --> 00:05:28,800
system that this item should be

134
00:05:28,800 --> 00:05:32,080
uh checked by various anti-infection

135
00:05:32,080 --> 00:05:34,160
mechanisms when the user goes to launch

136
00:05:34,160 --> 00:05:36,240
that so it's kind of the catalyst or

137
00:05:36,240 --> 00:05:39,440
rather the trigger that says hey

138
00:05:39,440 --> 00:05:41,600
operating system mac os uh you know

139
00:05:41,600 --> 00:05:43,120
please do a gatekeeper check do a

140
00:05:43,120 --> 00:05:45,280
notarization check do a file quarantine

141
00:05:45,280 --> 00:05:46,400
check so again

142
00:05:46,400 --> 00:05:48,080
the quarantine attribute is is very

143
00:05:48,080 --> 00:05:49,520
important

144
00:05:49,520 --> 00:05:51,800
so now let's talk about some of the

145
00:05:51,800 --> 00:05:54,320
anti-malware anti-infection mechanisms

146
00:05:54,320 --> 00:05:56,800
that apple has added to recent versions

147
00:05:56,800 --> 00:05:59,440
of mac os again the goal here

148
00:05:59,440 --> 00:06:01,680
apple's goal was really to protect the

149
00:06:01,680 --> 00:06:03,759
user so even if the user was tricked

150
00:06:03,759 --> 00:06:06,080
into downloading something like a fake

151
00:06:06,080 --> 00:06:08,560
flash player update that was actually

152
00:06:08,560 --> 00:06:10,800
malware if they went to run it the

153
00:06:10,800 --> 00:06:13,440
operating system in theory would prevent

154
00:06:13,440 --> 00:06:14,240
that

155
00:06:14,240 --> 00:06:16,240
and thus you know spare the user from

156
00:06:16,240 --> 00:06:17,840
infecting themselves

157
00:06:17,840 --> 00:06:19,759
so first up we have file quarantine this

158
00:06:19,759 --> 00:06:24,479
was added all the way back in 2007.

159
00:06:24,479 --> 00:06:26,319
what file quarantine does is simply

160
00:06:26,319 --> 00:06:28,720
alert the user that something something

161
00:06:28,720 --> 00:06:31,360
they are opening is a from the internet

162
00:06:31,360 --> 00:06:34,160
and b something that contains malicious

163
00:06:34,160 --> 00:06:35,919
code so if the user double-clicks

164
00:06:35,919 --> 00:06:37,680
something and it has that quarantine

165
00:06:37,680 --> 00:06:39,680
attribute set which will be set for any

166
00:06:39,680 --> 00:06:42,080
downloading downloaded item they will

167
00:06:42,080 --> 00:06:44,880
see a file quarantine alert

168
00:06:44,880 --> 00:06:47,680
this was important because a lot of mac

169
00:06:47,680 --> 00:06:51,440
malware was masquerading as benign file

170
00:06:51,440 --> 00:06:53,599
types so for example on the slide we can

171
00:06:53,599 --> 00:06:56,240
see windtale that was being distributed

172
00:06:56,240 --> 00:06:57,680
to users

173
00:06:57,680 --> 00:07:00,240
with an icon representing microsoft

174
00:07:00,240 --> 00:07:02,479
powerpoint so you know a user might

175
00:07:02,479 --> 00:07:04,720
download this or open it in an email

176
00:07:04,720 --> 00:07:07,199
attachment thinking it's a benign

177
00:07:07,199 --> 00:07:09,759
powerpoint presentation well fire file

178
00:07:09,759 --> 00:07:11,520
quarantine will jump in the way and say

179
00:07:11,520 --> 00:07:13,759
hey just to let you know this is an item

180
00:07:13,759 --> 00:07:15,840
from the internet and also it is an

181
00:07:15,840 --> 00:07:17,919
application you know perhaps not the

182
00:07:17,919 --> 00:07:20,400
powerpoint presentation you are uh

183
00:07:20,400 --> 00:07:22,000
expecting

184
00:07:22,000 --> 00:07:23,840
the problem is

185
00:07:23,840 --> 00:07:25,039
the alert

186
00:07:25,039 --> 00:07:28,160
had an option to click open and so users

187
00:07:28,160 --> 00:07:30,000
would say yeah sure they wouldn't read

188
00:07:30,000 --> 00:07:31,680
the prompt they wouldn't read the alert

189
00:07:31,680 --> 00:07:33,440
and a lot of them would click open which

190
00:07:33,440 --> 00:07:35,520
would allow the payload to execute and

191
00:07:35,520 --> 00:07:37,280
if it was malware then the user would

192
00:07:37,280 --> 00:07:38,160
become

193
00:07:38,160 --> 00:07:40,800
infected nonetheless

194
00:07:40,800 --> 00:07:42,400
so apple said okay hey we need to

195
00:07:42,400 --> 00:07:44,160
introduce something a little more

196
00:07:44,160 --> 00:07:46,400
substantial something to protect the

197
00:07:46,400 --> 00:07:48,479
users even more because unfortunately

198
00:07:48,479 --> 00:07:51,199
they are still inadvertently infecting

199
00:07:51,199 --> 00:07:55,039
themselves so in 2012 apple introduced a

200
00:07:55,039 --> 00:07:57,680
technology known as gatekeeper

201
00:07:57,680 --> 00:07:59,599
gatekeeper again is triggered by the

202
00:07:59,599 --> 00:08:01,440
presence of the quarantine attribute if

203
00:08:01,440 --> 00:08:03,039
the user double-clicks something that

204
00:08:03,039 --> 00:08:05,440
has that attribute set gatekeeper will

205
00:08:05,440 --> 00:08:08,319
intercept and examine the item and

206
00:08:08,319 --> 00:08:10,560
essentially it's looking to see if the

207
00:08:10,560 --> 00:08:13,440
item has been signed with a legitimate

208
00:08:13,440 --> 00:08:15,520
developer id

209
00:08:15,520 --> 00:08:17,840
apple's reasoning was that malware

210
00:08:17,840 --> 00:08:19,440
wouldn't be signed

211
00:08:19,440 --> 00:08:22,639
whereas legitimate applications would be

212
00:08:22,639 --> 00:08:24,560
but you know there is a shortcoming or

213
00:08:24,560 --> 00:08:26,560
there was a shortcoming that once

214
00:08:26,560 --> 00:08:29,280
gatekeeper became popular and widespread

215
00:08:29,280 --> 00:08:31,520
malware authors simply began signing

216
00:08:31,520 --> 00:08:33,599
their their malware and thus you know

217
00:08:33,599 --> 00:08:36,240
essentially sidestepping gatekeeper

218
00:08:36,240 --> 00:08:38,640
one thing to point out though that the

219
00:08:38,640 --> 00:08:39,679
alert

220
00:08:39,679 --> 00:08:41,279
the gatekeeper prompt doesn't actually

221
00:08:41,279 --> 00:08:44,000
have an option to allow an item to run

222
00:08:44,000 --> 00:08:45,360
so if

223
00:08:45,360 --> 00:08:48,000
the user tries to launch an unsigned

224
00:08:48,000 --> 00:08:50,480
piece of malware gatekeeper will detect

225
00:08:50,480 --> 00:08:53,120
that it's not signed and display an

226
00:08:53,120 --> 00:08:55,040
alert and as we can see on the slide the

227
00:08:55,040 --> 00:08:57,200
only two options are move to trash or

228
00:08:57,200 --> 00:08:59,360
cancel so apple said hey we're not even

229
00:08:59,360 --> 00:09:01,680
allow the user to click ok and allow the

230
00:09:01,680 --> 00:09:03,839
item to run so this again was a good

231
00:09:03,839 --> 00:09:05,839
step in the right direction but as i

232
00:09:05,839 --> 00:09:07,279
mentioned

233
00:09:07,279 --> 00:09:09,360
malware authors simply began signing

234
00:09:09,360 --> 00:09:10,959
their their malware and even though

235
00:09:10,959 --> 00:09:12,560
gatekeeper would then check it since

236
00:09:12,560 --> 00:09:14,080
they would be validly signed they would

237
00:09:14,080 --> 00:09:15,839
be allowed to execute

238
00:09:15,839 --> 00:09:17,920
so apple said okay we need to raise the

239
00:09:17,920 --> 00:09:20,320
bar even more and we need to introduce a

240
00:09:20,320 --> 00:09:23,519
technology that can hopefully prevent

241
00:09:23,519 --> 00:09:27,000
even signed malware from running so in

242
00:09:27,000 --> 00:09:29,839
2019 they introduced

243
00:09:29,839 --> 00:09:32,320
something known as notarization and the

244
00:09:32,320 --> 00:09:34,080
idea is that

245
00:09:34,080 --> 00:09:37,360
in order for a application or executable

246
00:09:37,360 --> 00:09:41,600
code to run on a recent version of macos

247
00:09:41,600 --> 00:09:43,680
it has to be notarized and what

248
00:09:43,680 --> 00:09:45,920
notarization is is a mechanism where

249
00:09:45,920 --> 00:09:48,800
applications must be submitted to apple

250
00:09:48,800 --> 00:09:51,760
and scanned and approved by apple before

251
00:09:51,760 --> 00:09:53,760
they are allowed to run

252
00:09:53,760 --> 00:09:57,760
so even if a hacker fraudulently obtains

253
00:09:57,760 --> 00:10:00,399
a code signing certificate or steals one

254
00:10:00,399 --> 00:10:02,959
and signs their malware that now is not

255
00:10:02,959 --> 00:10:05,279
good enough they now have to submit that

256
00:10:05,279 --> 00:10:08,079
binary to to apple and the idea is apple

257
00:10:08,079 --> 00:10:10,079
will detect that it contains malicious

258
00:10:10,079 --> 00:10:13,200
code and not notarize this and this was

259
00:10:13,200 --> 00:10:16,320
actually a very strong security

260
00:10:16,320 --> 00:10:18,399
mechanism we can see for example on the

261
00:10:18,399 --> 00:10:21,519
slide hackers who slide into my dms

262
00:10:21,519 --> 00:10:23,839
sometimes say hey look like we're not

263
00:10:23,839 --> 00:10:25,600
able to get around notarization and this

264
00:10:25,600 --> 00:10:27,920
is impacting our hacking

265
00:10:27,920 --> 00:10:30,079
operations because generally speaking

266
00:10:30,079 --> 00:10:32,160
apple's not going to notarize malicious

267
00:10:32,160 --> 00:10:34,000
code

268
00:10:34,000 --> 00:10:36,399
so that kind of gives us

269
00:10:36,399 --> 00:10:38,560
a good overview of the security

270
00:10:38,560 --> 00:10:40,640
mechanisms that are built into modern

271
00:10:40,640 --> 00:10:43,440
versions of mac os specifically the ones

272
00:10:43,440 --> 00:10:46,240
that are designed to prevent users from

273
00:10:46,240 --> 00:10:49,120
inadvertently infecting themselves

274
00:10:49,120 --> 00:10:51,519
and looking at these seems like they are

275
00:10:51,519 --> 00:10:53,120
all well and good especially with the

276
00:10:53,120 --> 00:10:55,519
addition of notarization checks a lot of

277
00:10:55,519 --> 00:10:58,880
mac users and enterprise mac users felt

278
00:10:58,880 --> 00:11:01,680
fairly secure and and you know believe

279
00:11:01,680 --> 00:11:03,920
that okay maybe apple's protection

280
00:11:03,920 --> 00:11:06,320
mechanisms were sufficient but as we'll

281
00:11:06,320 --> 00:11:09,839
see unfortunately that was not the case

282
00:11:09,839 --> 00:11:11,600
so

283
00:11:11,600 --> 00:11:13,600
the way i came across the bug was one of

284
00:11:13,600 --> 00:11:16,079
my friends uh cedric owen pinged me and

285
00:11:16,079 --> 00:11:18,240
said hey you know i've basically built

286
00:11:18,240 --> 00:11:22,079
this application for a red team exercise

287
00:11:22,079 --> 00:11:24,480
and when i deploy it

288
00:11:24,480 --> 00:11:26,959
i don't see any of the expected alerts

289
00:11:26,959 --> 00:11:29,279
right there's no file quarantine alert

290
00:11:29,279 --> 00:11:31,360
there's no gatekeeper alert and there's

291
00:11:31,360 --> 00:11:32,079
no

292
00:11:32,079 --> 00:11:34,160
quarantine checks even though

293
00:11:34,160 --> 00:11:36,560
the application i'm deploying is neither

294
00:11:36,560 --> 00:11:39,440
signed nor notarized and yes is from the

295
00:11:39,440 --> 00:11:41,279
internet and as we can see on the slide

296
00:11:41,279 --> 00:11:43,440
the little animated gif i have here you

297
00:11:43,440 --> 00:11:45,440
can see yes indeed when i took his proof

298
00:11:45,440 --> 00:11:47,760
of concept and weaponized it into what

299
00:11:47,760 --> 00:11:50,399
appears to be a pdf document

300
00:11:50,399 --> 00:11:51,360
on

301
00:11:51,360 --> 00:11:53,200
what was at the time a fully patched

302
00:11:53,200 --> 00:11:55,279
version of mac os if the user would

303
00:11:55,279 --> 00:11:58,240
launch that item none of apple's

304
00:11:58,240 --> 00:12:00,079
security mechanisms seem to come into

305
00:12:00,079 --> 00:12:02,240
play right where are all of the alerts

306
00:12:02,240 --> 00:12:03,760
where is where is gatekeeper where's now

307
00:12:03,760 --> 00:12:05,839
quarantine where's notification

308
00:12:05,839 --> 00:12:07,839
so you know we were both confused

309
00:12:07,839 --> 00:12:10,959
because it seemed like this this bug or

310
00:12:10,959 --> 00:12:12,880
this application you had built somehow

311
00:12:12,880 --> 00:12:15,279
was bypassing all of these foundational

312
00:12:15,279 --> 00:12:17,680
security components

313
00:12:17,680 --> 00:12:19,120
so he reached out to me to verify the

314
00:12:19,120 --> 00:12:21,519
bug and also to figure out the root

315
00:12:21,519 --> 00:12:23,920
cause so now we're going to dive into

316
00:12:23,920 --> 00:12:25,600
triaging the vulnerability and

317
00:12:25,600 --> 00:12:28,880
ultimately figuring out where the flaw

318
00:12:28,880 --> 00:12:31,600
lay within the operating system

319
00:12:31,600 --> 00:12:32,720
so we've talked a lot about the

320
00:12:32,720 --> 00:12:35,040
quarantine attribute and how it is a

321
00:12:35,040 --> 00:12:37,519
mechanism that triggers all these checks

322
00:12:37,519 --> 00:12:39,440
so the first thing i wanted to do is

323
00:12:39,440 --> 00:12:42,000
make sure that this

324
00:12:42,000 --> 00:12:44,240
malicious or this you know interesting

325
00:12:44,240 --> 00:12:46,160
proof of concept application did have

326
00:12:46,160 --> 00:12:47,839
the quarantine attribute set you know

327
00:12:47,839 --> 00:12:50,480
maybe it was corrupted or something else

328
00:12:50,480 --> 00:12:51,839
however when i download it from the

329
00:12:51,839 --> 00:12:53,920
internet ran the x adder command we can

330
00:12:53,920 --> 00:12:57,519
see yes indeed it has the file

331
00:12:57,519 --> 00:12:59,839
quarantine attribute set uh it's also

332
00:12:59,839 --> 00:13:02,160
not signed meaning it's not notarized as

333
00:13:02,160 --> 00:13:05,440
well so again very perplexing because in

334
00:13:05,440 --> 00:13:08,399
theory mac os should resoundingly block

335
00:13:08,399 --> 00:13:10,320
it so what we have is an unsigned

336
00:13:10,320 --> 00:13:12,320
application that can bypass file

337
00:13:12,320 --> 00:13:14,959
quarantine gatekeeper and notarization

338
00:13:14,959 --> 00:13:16,639
requirements and again at the time this

339
00:13:16,639 --> 00:13:18,880
was a fully patched version of mac os so

340
00:13:18,880 --> 00:13:20,480
suffice to say i was very intrigued and

341
00:13:20,480 --> 00:13:22,320
i wanted to figure out you know what was

342
00:13:22,320 --> 00:13:24,880
the flaw what's going on

343
00:13:24,880 --> 00:13:26,560
so we take a closer look at the proof of

344
00:13:26,560 --> 00:13:29,120
concept application

345
00:13:29,120 --> 00:13:30,959
we find two

346
00:13:30,959 --> 00:13:32,880
two very interesting

347
00:13:32,880 --> 00:13:36,160
aspects of it which as we will see

348
00:13:36,160 --> 00:13:37,680
ultimately

349
00:13:37,680 --> 00:13:39,760
trigger the bug

350
00:13:39,760 --> 00:13:42,000
so if you're familiar with applications

351
00:13:42,000 --> 00:13:44,160
on mac os

352
00:13:44,160 --> 00:13:45,720
you might be familiar with the

353
00:13:45,720 --> 00:13:48,000
info.plist file so applications are

354
00:13:48,000 --> 00:13:50,720
essentially a bundle or a directory that

355
00:13:50,720 --> 00:13:53,760
have certain files and one common file

356
00:13:53,760 --> 00:13:56,240
is something known as an info.plist file

357
00:13:56,240 --> 00:13:58,560
it's an xml document that has metadata

358
00:13:58,560 --> 00:14:01,120
about the application things like the

359
00:14:01,120 --> 00:14:03,360
path to its executable what language it

360
00:14:03,360 --> 00:14:05,760
supports and this is the file i thought

361
00:14:05,760 --> 00:14:07,839
was required well it turns out this

362
00:14:07,839 --> 00:14:09,839
proof of concept application did not

363
00:14:09,839 --> 00:14:11,920
have an info.plist file okay that's

364
00:14:11,920 --> 00:14:13,519
interesting point number one

365
00:14:13,519 --> 00:14:14,880
number two

366
00:14:14,880 --> 00:14:17,760
it's main executable component was not a

367
00:14:17,760 --> 00:14:20,240
compiled binary which is generally the

368
00:14:20,240 --> 00:14:22,800
case with applications on mac os but was

369
00:14:22,800 --> 00:14:25,680
rather a posik shell script

370
00:14:25,680 --> 00:14:27,440
so what we have and i'll refer to this

371
00:14:27,440 --> 00:14:30,079
as a bare-boned application because it's

372
00:14:30,079 --> 00:14:32,320
missing an info.plist file and since

373
00:14:32,320 --> 00:14:34,800
it's a component is you know a script

374
00:14:34,800 --> 00:14:37,120
versus a standard executable again as i

375
00:14:37,120 --> 00:14:39,360
mentioned those two characteristics of

376
00:14:39,360 --> 00:14:42,320
this application are ultimately why a

377
00:14:42,320 --> 00:14:45,440
flaw in mac os was triggered

378
00:14:45,440 --> 00:14:47,120
so now i wanted to say i wanted to

379
00:14:47,120 --> 00:14:49,519
figure out what happened when i launched

380
00:14:49,519 --> 00:14:51,279
this application specifically why

381
00:14:51,279 --> 00:14:53,199
weren't file quark and gatekeeper and

382
00:14:53,199 --> 00:14:56,240
notarization checks being performed

383
00:14:56,240 --> 00:14:57,360
unfortunately when you click an

384
00:14:57,360 --> 00:15:00,959
application on mac os there are a myriad

385
00:15:00,959 --> 00:15:03,920
of components that all come into play

386
00:15:03,920 --> 00:15:06,480
say half a dozen uh you know user mode

387
00:15:06,480 --> 00:15:09,040
daemons frameworks even the kernel

388
00:15:09,040 --> 00:15:11,040
that you know enforce this different

389
00:15:11,040 --> 00:15:14,079
policies or check the application so you

390
00:15:14,079 --> 00:15:16,560
know the flaw could could lie in any of

391
00:15:16,560 --> 00:15:18,480
these components so you know i didn't

392
00:15:18,480 --> 00:15:20,720
want to reverse engineer all of them so

393
00:15:20,720 --> 00:15:24,000
i said okay what is a more efficient

394
00:15:24,000 --> 00:15:25,600
approach

395
00:15:25,600 --> 00:15:27,600
so my idea was simply this i was going

396
00:15:27,600 --> 00:15:29,519
to take three different applications and

397
00:15:29,519 --> 00:15:31,519
i'll talk about three different types

398
00:15:31,519 --> 00:15:33,839
run them and then simply look at the log

399
00:15:33,839 --> 00:15:36,480
message to log messages that the system

400
00:15:36,480 --> 00:15:38,480
would print out to see if there was a

401
00:15:38,480 --> 00:15:40,800
divergence that would ultimately point

402
00:15:40,800 --> 00:15:43,360
me at least to the binary or the

403
00:15:43,360 --> 00:15:46,399
executable component where the flaw lay

404
00:15:46,399 --> 00:15:49,120
so the three applications i chose they

405
00:15:49,120 --> 00:15:51,600
are all unsigned all from the internet

406
00:15:51,600 --> 00:15:53,199
meaning they would all have a quarantine

407
00:15:53,199 --> 00:15:55,759
attribute and in theory file quarantine

408
00:15:55,759 --> 00:15:58,160
gatekeeper and notarization check should

409
00:15:58,160 --> 00:16:00,720
pop up and block them the first

410
00:16:00,720 --> 00:16:02,880
application i used was a standard

411
00:16:02,880 --> 00:16:05,440
application meaning it had an info.plist

412
00:16:05,440 --> 00:16:08,240
file and its main executable component

413
00:16:08,240 --> 00:16:10,720
was a compiled binary and as we can see

414
00:16:10,720 --> 00:16:13,600
when we run this as expected mac os

415
00:16:13,600 --> 00:16:15,279
basically says hey wait a minute this is

416
00:16:15,279 --> 00:16:17,600
an unsigned application i'm not going to

417
00:16:17,600 --> 00:16:19,519
allow it to run as expected and we can

418
00:16:19,519 --> 00:16:22,160
see the alert the pop-up on the screen

419
00:16:22,160 --> 00:16:24,639
the second application i tried was

420
00:16:24,639 --> 00:16:26,880
similar to the first again it had a

421
00:16:26,880 --> 00:16:29,320
standard application bundle with an

422
00:16:29,320 --> 00:16:32,480
info.plist file but its main executable

423
00:16:32,480 --> 00:16:35,279
component was not a compiled executable

424
00:16:35,279 --> 00:16:37,279
but rather a script

425
00:16:37,279 --> 00:16:40,880
but again mac os was like i don't care i

426
00:16:40,880 --> 00:16:42,079
even though you're trying to run this

427
00:16:42,079 --> 00:16:43,920
this is unsigned it's from the internet

428
00:16:43,920 --> 00:16:46,320
i am not going to allow you to run which

429
00:16:46,320 --> 00:16:49,040
again was expected and then thirdly we

430
00:16:49,040 --> 00:16:51,360
have the proof of concept application

431
00:16:51,360 --> 00:16:53,120
this is the bare-boned application

432
00:16:53,120 --> 00:16:55,440
missing the info.plist file that also

433
00:16:55,440 --> 00:16:57,680
has a script-based

434
00:16:57,680 --> 00:16:59,279
executable component and as we've

435
00:16:59,279 --> 00:17:01,440
mentioned for some unknown reason this

436
00:17:01,440 --> 00:17:03,360
is allowed to run without any prompts

437
00:17:03,360 --> 00:17:04,640
any alerts

438
00:17:04,640 --> 00:17:05,919
so what we're now going to do is we're

439
00:17:05,919 --> 00:17:07,679
going to look at the log messages from

440
00:17:07,679 --> 00:17:09,679
each of these applications which will

441
00:17:09,679 --> 00:17:11,679
ultimately point us in the right

442
00:17:11,679 --> 00:17:13,119
direction

443
00:17:13,119 --> 00:17:15,280
before we do that though we need to talk

444
00:17:15,280 --> 00:17:17,839
about how to enable private logging on

445
00:17:17,839 --> 00:17:18,959
mac os

446
00:17:18,959 --> 00:17:21,679
so in recent versions of mac os

447
00:17:21,679 --> 00:17:24,319
apple rightfully said hey a lot of

448
00:17:24,319 --> 00:17:26,480
sensitive information gets leaked into

449
00:17:26,480 --> 00:17:28,799
the logs so what they actually do now is

450
00:17:28,799 --> 00:17:32,080
suppress things like file paths or other

451
00:17:32,080 --> 00:17:34,880
information other log messages that may

452
00:17:34,880 --> 00:17:38,320
contain sensitive or private information

453
00:17:38,320 --> 00:17:40,240
obviously in our analysis though we

454
00:17:40,240 --> 00:17:42,400
don't want these messages to be

455
00:17:42,400 --> 00:17:44,640
redacted so we want them to be fully

456
00:17:44,640 --> 00:17:45,760
printed out

457
00:17:45,760 --> 00:17:47,039
so what we need to do is tell the

458
00:17:47,039 --> 00:17:49,600
operating system please log everything

459
00:17:49,600 --> 00:17:51,200
yes we really know what we're doing this

460
00:17:51,200 --> 00:17:53,440
is our system i yes i want to see you

461
00:17:53,440 --> 00:17:56,000
know private messages everything

462
00:17:56,000 --> 00:17:57,280
and this is a good technique if you're

463
00:17:57,280 --> 00:17:58,559
reversing

464
00:17:58,559 --> 00:18:01,039
you know other malware or other versions

465
00:18:01,039 --> 00:18:02,799
or looking for other vulnerabilities in

466
00:18:02,799 --> 00:18:04,080
in mac os

467
00:18:04,080 --> 00:18:06,480
so the way you enable this is by

468
00:18:06,480 --> 00:18:08,880
installing what is known as a profile

469
00:18:08,880 --> 00:18:10,320
and there's a link on the slide how to

470
00:18:10,320 --> 00:18:11,840
do this but essentially it just

471
00:18:11,840 --> 00:18:14,559
instructs mac os to say hey please log

472
00:18:14,559 --> 00:18:17,039
everything for us

473
00:18:17,039 --> 00:18:19,200
all right so now we have private full

474
00:18:19,200 --> 00:18:21,679
logging enabled let's run the three

475
00:18:21,679 --> 00:18:24,320
applications and look for differences to

476
00:18:24,320 --> 00:18:25,520
hopefully figure out where the

477
00:18:25,520 --> 00:18:27,360
vulnerability lies

478
00:18:27,360 --> 00:18:29,600
so first up this is the standard

479
00:18:29,600 --> 00:18:31,039
application

480
00:18:31,039 --> 00:18:33,520
has an info.plist file its executable

481
00:18:33,520 --> 00:18:36,320
component is a compiled mock o binary

482
00:18:36,320 --> 00:18:39,440
again this one was blocked as expected

483
00:18:39,440 --> 00:18:41,840
if we run this and read through the log

484
00:18:41,840 --> 00:18:44,960
messages first we note that a daemon

485
00:18:44,960 --> 00:18:47,919
called cis policy d seems to be

486
00:18:47,919 --> 00:18:50,000
responsible for analyzing the

487
00:18:50,000 --> 00:18:52,320
application it has a lot of log messages

488
00:18:52,320 --> 00:18:55,039
like you know scanning the application

489
00:18:55,039 --> 00:18:57,679
evaluating it so this is good we've kind

490
00:18:57,679 --> 00:18:59,919
of already pinpointed the daemon that's

491
00:18:59,919 --> 00:19:01,840
responsible for

492
00:19:01,840 --> 00:19:03,919
scanning the application and as we'll

493
00:19:03,919 --> 00:19:05,600
eventually see this indeed is where the

494
00:19:05,600 --> 00:19:07,679
vulnerability lies

495
00:19:07,679 --> 00:19:09,039
if we continue to look at the log

496
00:19:09,039 --> 00:19:11,840
messages for this application we can see

497
00:19:11,840 --> 00:19:13,840
a log message that refers to a

498
00:19:13,840 --> 00:19:16,880
gatekeeper evaluation we can see the log

499
00:19:16,880 --> 00:19:20,799
message gk gatekeeper evaluation result

500
00:19:20,799 --> 00:19:22,720
and then it prints out the results of

501
00:19:22,720 --> 00:19:25,520
the evaluation we can see the evaluation

502
00:19:25,520 --> 00:19:27,840
type is zero this is important and we'll

503
00:19:27,840 --> 00:19:29,679
get to that in a second

504
00:19:29,679 --> 00:19:32,320
also right below that we can see a log

505
00:19:32,320 --> 00:19:35,360
message that says was allowed colon zero

506
00:19:35,360 --> 00:19:38,720
zero mean false or no should prompt set

507
00:19:38,720 --> 00:19:41,440
to one or zero and this is basically

508
00:19:41,440 --> 00:19:43,360
saying the operating system has decided

509
00:19:43,360 --> 00:19:45,360
that this application is invalid

510
00:19:45,360 --> 00:19:47,520
shouldn't be allowed and thus an alert

511
00:19:47,520 --> 00:19:49,520
should be shown to the user because it's

512
00:19:49,520 --> 00:19:52,000
unsigned it's unnotarized and again this

513
00:19:52,000 --> 00:19:54,160
lines up with what we saw this first

514
00:19:54,160 --> 00:19:56,559
application indeed was blocked and an

515
00:19:56,559 --> 00:19:59,360
alert was shown to the user

516
00:19:59,360 --> 00:20:00,320
all right what about the second

517
00:20:00,320 --> 00:20:02,720
application again the second application

518
00:20:02,720 --> 00:20:04,559
was a pretty standard application

519
00:20:04,559 --> 00:20:08,400
unsigned had an info.plist file but its

520
00:20:08,400 --> 00:20:11,039
executable component was a script not a

521
00:20:11,039 --> 00:20:13,039
compiled binary

522
00:20:13,039 --> 00:20:14,320
if you look at the log messages they

523
00:20:14,320 --> 00:20:16,159
look very similar to the previous one

524
00:20:16,159 --> 00:20:18,159
but there's one important difference

525
00:20:18,159 --> 00:20:20,720
there is a log message at the top of the

526
00:20:20,720 --> 00:20:24,080
slide saying script evaluation so this

527
00:20:24,080 --> 00:20:26,480
shows that there are at least two code

528
00:20:26,480 --> 00:20:28,720
paths in mac os for analyzing

529
00:20:28,720 --> 00:20:31,280
application one for applications that

530
00:20:31,280 --> 00:20:34,559
have standard compiled mock o binaries

531
00:20:34,559 --> 00:20:36,640
and one that is for handling

532
00:20:36,640 --> 00:20:38,960
applications whose executable component

533
00:20:38,960 --> 00:20:41,679
is a script so that's interesting

534
00:20:41,679 --> 00:20:43,039
again though if we look at the

535
00:20:43,039 --> 00:20:45,440
gatekeeper evaluation results they look

536
00:20:45,440 --> 00:20:48,159
identical to the previous application we

537
00:20:48,159 --> 00:20:50,559
can see an evaluation result of zero is

538
00:20:50,559 --> 00:20:52,559
returned and then there's another log

539
00:20:52,559 --> 00:20:54,960
message right below that saying was

540
00:20:54,960 --> 00:20:57,360
allowed equals zero or false it's not

541
00:20:57,360 --> 00:20:59,600
allowed and should show prompt is set to

542
00:20:59,600 --> 00:21:01,520
one or true and again this aligns with

543
00:21:01,520 --> 00:21:04,000
what we saw this application was also

544
00:21:04,000 --> 00:21:06,320
blocked and a prompt was shown to the

545
00:21:06,320 --> 00:21:07,679
user

546
00:21:07,679 --> 00:21:09,600
finally we have the bare bone proof of

547
00:21:09,600 --> 00:21:12,000
concept application which is allowed for

548
00:21:12,000 --> 00:21:14,720
some reason if we look at the

549
00:21:14,720 --> 00:21:16,720
log messages we can see they're fairly

550
00:21:16,720 --> 00:21:19,120
similar at the start we see that script

551
00:21:19,120 --> 00:21:21,440
evaluation log message being displayed

552
00:21:21,440 --> 00:21:23,120
which is not

553
00:21:23,120 --> 00:21:24,720
unexpected because

554
00:21:24,720 --> 00:21:25,840
you know it is a script-based

555
00:21:25,840 --> 00:21:26,960
application

556
00:21:26,960 --> 00:21:28,559
interestingly enough though if we look

557
00:21:28,559 --> 00:21:31,039
at the gatekeeper evaluation results we

558
00:21:31,039 --> 00:21:34,240
see an evaluation result of type 2 is

559
00:21:34,240 --> 00:21:35,200
shown

560
00:21:35,200 --> 00:21:37,679
also then we don't see that was allowed

561
00:21:37,679 --> 00:21:39,919
should show prompt log message

562
00:21:39,919 --> 00:21:42,799
which you know again kind of a lot

563
00:21:42,799 --> 00:21:44,799
aligns to what we saw because no prompt

564
00:21:44,799 --> 00:21:47,120
was shown we don't know why but you know

565
00:21:47,120 --> 00:21:48,640
it's missing in the logs and that's kind

566
00:21:48,640 --> 00:21:50,880
of what we saw

567
00:21:50,880 --> 00:21:52,640
so now we can summarize these three

568
00:21:52,640 --> 00:21:55,520
applications right the first two were

569
00:21:55,520 --> 00:21:57,760
blocked and specifically when they were

570
00:21:57,760 --> 00:22:00,640
blocked an evaluation result of type 0

571
00:22:00,640 --> 00:22:02,720
was returned whereas for the proof of

572
00:22:02,720 --> 00:22:05,360
concept application that was allowed to

573
00:22:05,360 --> 00:22:08,039
execute even though it was unsigned and

574
00:22:08,039 --> 00:22:11,600
non-notarized it returned a evaluation

575
00:22:11,600 --> 00:22:13,520
type of two

576
00:22:13,520 --> 00:22:14,880
interesting

577
00:22:14,880 --> 00:22:17,120
so now the question becomes what is

578
00:22:17,120 --> 00:22:19,840
evaluation type 2 because it seems that

579
00:22:19,840 --> 00:22:22,640
if an application is evaluated with this

580
00:22:22,640 --> 00:22:25,039
type it will be allowed to execute even

581
00:22:25,039 --> 00:22:26,960
though it's from the internet unsigned

582
00:22:26,960 --> 00:22:29,679
and non notarized

583
00:22:29,679 --> 00:22:32,080
so i set about reverse engineering sys

584
00:22:32,080 --> 00:22:34,400
policy d again this is the daemon that

585
00:22:34,400 --> 00:22:36,320
was printing out all these log messages

586
00:22:36,320 --> 00:22:38,000
so it seemed likely to be the one

587
00:22:38,000 --> 00:22:40,240
responsible for ultimately you know

588
00:22:40,240 --> 00:22:42,320
evaluating the applications and setting

589
00:22:42,320 --> 00:22:44,000
this type

590
00:22:44,000 --> 00:22:46,559
we find a method called evaluate scan

591
00:22:46,559 --> 00:22:49,600
result and it as one of its arguments

592
00:22:49,600 --> 00:22:52,159
gets an evaluation type and we can see

593
00:22:52,159 --> 00:22:54,640
in the disassembly or the decompilation

594
00:22:54,640 --> 00:22:58,080
of this system daemon that if the

595
00:22:58,080 --> 00:23:02,480
evaluation type is indeed set to 2

596
00:23:02,480 --> 00:23:03,440
it

597
00:23:03,440 --> 00:23:05,840
specifically allows the application to

598
00:23:05,840 --> 00:23:09,600
be allowed and then returns allowing the

599
00:23:09,600 --> 00:23:12,559
exec the application to execute

600
00:23:12,559 --> 00:23:14,240
we can confirm this in a debugger if we

601
00:23:14,240 --> 00:23:16,640
set a breakpoint on this and look at

602
00:23:16,640 --> 00:23:17,840
various

603
00:23:17,840 --> 00:23:20,320
instance variables or properties about

604
00:23:20,320 --> 00:23:22,640
the evaluation object and we can see

605
00:23:22,640 --> 00:23:25,120
that if we print out the allowed

606
00:23:25,120 --> 00:23:27,520
instance variable or property it has

607
00:23:27,520 --> 00:23:30,640
been set to one or true or yes

608
00:23:30,640 --> 00:23:33,520
and also if we look at the would prompt

609
00:23:33,520 --> 00:23:37,200
flag we can see that this is set to no

610
00:23:37,200 --> 00:23:39,360
so again this kind of just confirms that

611
00:23:39,360 --> 00:23:42,960
if an evaluation type of two is returned

612
00:23:42,960 --> 00:23:45,760
the system will allow the application to

613
00:23:45,760 --> 00:23:48,159
execute with no other prompts or

614
00:23:48,159 --> 00:23:50,720
questions asked

615
00:23:50,720 --> 00:23:53,919
so obviously we want to know why is this

616
00:23:53,919 --> 00:23:57,200
type 2 set because for this proof of

617
00:23:57,200 --> 00:23:59,520
concept application

618
00:23:59,520 --> 00:24:01,039
we think it shouldn't be right it's

619
00:24:01,039 --> 00:24:02,559
unsigned it's from the internet it

620
00:24:02,559 --> 00:24:04,960
should definitely be disallowed by the

621
00:24:04,960 --> 00:24:06,559
operating system

622
00:24:06,559 --> 00:24:09,039
so if we continue to reverse engineer

623
00:24:09,039 --> 00:24:11,760
cis policy d we can find a method called

624
00:24:11,760 --> 00:24:14,880
determine gatekeeper evaluation

625
00:24:14,880 --> 00:24:17,200
and we can see various

626
00:24:17,200 --> 00:24:19,760
if-then code blocks within that so let's

627
00:24:19,760 --> 00:24:21,600
kind of step through these and we can do

628
00:24:21,600 --> 00:24:23,600
this in a debugger as well to confirm

629
00:24:23,600 --> 00:24:24,320
this

630
00:24:24,320 --> 00:24:27,440
so first we see it calling a method is

631
00:24:27,440 --> 00:24:29,679
user approved

632
00:24:29,679 --> 00:24:32,159
since our application has not been user

633
00:24:32,159 --> 00:24:34,240
approved we're going to fall into the

634
00:24:34,240 --> 00:24:37,600
next code check which calls is script

635
00:24:37,600 --> 00:24:40,320
since our application does contain a

636
00:24:40,320 --> 00:24:43,440
script as its main executable component

637
00:24:43,440 --> 00:24:46,159
this will evaluate to 2 so again we

638
00:24:46,159 --> 00:24:48,960
continue into that code block

639
00:24:48,960 --> 00:24:51,120
interestingly enough if we do that the

640
00:24:51,120 --> 00:24:52,559
first thing we do

641
00:24:52,559 --> 00:24:55,919
we can see is that the evaluation type 2

642
00:24:55,919 --> 00:24:58,400
is set into the r15 register which

643
00:24:58,400 --> 00:25:00,799
ultimately gets returned

644
00:25:00,799 --> 00:25:04,720
however before that is returned it calls

645
00:25:04,720 --> 00:25:08,320
a method that is named is bundled and if

646
00:25:08,320 --> 00:25:11,039
is bundled returns false

647
00:25:11,039 --> 00:25:12,640
this method will return with that

648
00:25:12,640 --> 00:25:14,960
evaluation type set to 2 which again

649
00:25:14,960 --> 00:25:18,080
means the application will be allowed

650
00:25:18,080 --> 00:25:19,679
we step through this in a debugger and

651
00:25:19,679 --> 00:25:22,799
we execute over the is bundled function

652
00:25:22,799 --> 00:25:25,279
call this method we can see that for our

653
00:25:25,279 --> 00:25:27,440
proof of concept application the

654
00:25:27,440 --> 00:25:29,440
operating system has said no this is not

655
00:25:29,440 --> 00:25:31,760
a bundle and that's weird because a

656
00:25:31,760 --> 00:25:34,799
bundle is kind of a mac os specific term

657
00:25:34,799 --> 00:25:35,840
that

658
00:25:35,840 --> 00:25:37,919
refers to applications and we're an

659
00:25:37,919 --> 00:25:40,480
application so we would expect for us to

660
00:25:40,480 --> 00:25:43,520
be classified as a bundle so let's now

661
00:25:43,520 --> 00:25:45,919
dive into that to figure out why

662
00:25:45,919 --> 00:25:48,960
isbundle is not being set

663
00:25:48,960 --> 00:25:50,559
so if we look at the method that's named

664
00:25:50,559 --> 00:25:52,799
isbundle we see that regis returns a

665
00:25:52,799 --> 00:25:55,200
flag so that's not really very helpful

666
00:25:55,200 --> 00:25:57,200
but so what we need to do is go back and

667
00:25:57,200 --> 00:25:58,799
figure out where that flag was

668
00:25:58,799 --> 00:26:00,559
ultimately set

669
00:26:00,559 --> 00:26:01,600
so

670
00:26:01,600 --> 00:26:04,000
we find that in a method called evaluate

671
00:26:04,000 --> 00:26:06,159
code for user and i've highlighted that

672
00:26:06,159 --> 00:26:08,080
on the slide you can see that it calls

673
00:26:08,080 --> 00:26:11,279
an unnamed subroutine and the return

674
00:26:11,279 --> 00:26:14,240
value from that subroutine is passed to

675
00:26:14,240 --> 00:26:16,720
the set isbundled

676
00:26:16,720 --> 00:26:18,720
method call so that flag is ultimately

677
00:26:18,720 --> 00:26:21,600
set by the return value of that

678
00:26:21,600 --> 00:26:23,440
unnamed subroutine so we need to dig

679
00:26:23,440 --> 00:26:25,600
into that unnamed subroutine to figure

680
00:26:25,600 --> 00:26:28,320
out why our proof of concept application

681
00:26:28,320 --> 00:26:31,120
is not classified as a bundle

682
00:26:31,120 --> 00:26:33,600
so if we look at the decompilation of

683
00:26:33,600 --> 00:26:35,760
this method it should be very obvious

684
00:26:35,760 --> 00:26:37,760
exactly what is going on we can see in

685
00:26:37,760 --> 00:26:39,440
the code it's simply looking for an

686
00:26:39,440 --> 00:26:42,799
info.plist file recall though our proof

687
00:26:42,799 --> 00:26:44,960
of concept application does not have an

688
00:26:44,960 --> 00:26:47,520
info.plist file apparently this is not a

689
00:26:47,520 --> 00:26:49,919
required file to have in an application

690
00:26:49,919 --> 00:26:50,880
bundle

691
00:26:50,880 --> 00:26:54,240
so what this means then is that this

692
00:26:54,240 --> 00:26:56,640
unnamed subroutine is essentially

693
00:26:56,640 --> 00:26:59,279
misclassifying our proof of concept

694
00:26:59,279 --> 00:27:01,760
application as not being a bundle which

695
00:27:01,760 --> 00:27:04,159
means then that evaluation type 2 is

696
00:27:04,159 --> 00:27:06,400
ultimately returned meaning that the

697
00:27:06,400 --> 00:27:09,360
application is allowed

698
00:27:09,360 --> 00:27:11,919
so here let's briefly summarize that if

699
00:27:11,919 --> 00:27:15,360
you have or had an application whose

700
00:27:15,360 --> 00:27:18,159
main executable component was a script

701
00:27:18,159 --> 00:27:22,159
that did not have an info.plist file

702
00:27:22,159 --> 00:27:25,760
mac os would incorrectly classify that

703
00:27:25,760 --> 00:27:27,760
as not a bundle

704
00:27:27,760 --> 00:27:31,039
meaning the evaluation type 2 would be

705
00:27:31,039 --> 00:27:34,080
returned which ultimately means or meant

706
00:27:34,080 --> 00:27:37,120
that mac os would allow the application

707
00:27:37,120 --> 00:27:39,840
to run skipping the gatekeeper

708
00:27:39,840 --> 00:27:44,159
notarization or file quarantine prompts

709
00:27:44,159 --> 00:27:46,799
all right so now we know what the fly is

710
00:27:46,799 --> 00:27:49,919
right basically a misclassification of

711
00:27:49,919 --> 00:27:52,240
bare-bones script-based applications

712
00:27:52,240 --> 00:27:53,520
interesting

713
00:27:53,520 --> 00:27:54,880
so i reached out to some friends and

714
00:27:54,880 --> 00:27:56,320
said you know i have this really

715
00:27:56,320 --> 00:27:57,760
interesting vulnerability that was

716
00:27:57,760 --> 00:28:00,399
reported to me i'm wondering if it has

717
00:28:00,399 --> 00:28:02,080
been exploited in the wild because it's

718
00:28:02,080 --> 00:28:03,679
a very powerful technique that would

719
00:28:03,679 --> 00:28:06,000
allow malicious adversaries to neatly

720
00:28:06,000 --> 00:28:08,640
sidestep all of mac os's recent security

721
00:28:08,640 --> 00:28:11,039
mechanisms and really allow them to fall

722
00:28:11,039 --> 00:28:14,080
back to infecting mac os users in ways

723
00:28:14,080 --> 00:28:15,840
that they are very successful or were

724
00:28:15,840 --> 00:28:19,120
very successful in the path

725
00:28:19,440 --> 00:28:22,080
so basically we said okay

726
00:28:22,080 --> 00:28:24,080
we know what the flaw is and we

727
00:28:24,080 --> 00:28:26,159
therefore can write a fairly

728
00:28:26,159 --> 00:28:29,279
uh comprehensive detection algorithm

729
00:28:29,279 --> 00:28:31,360
basically we just want to look for

730
00:28:31,360 --> 00:28:33,200
applications that don't have an

731
00:28:33,200 --> 00:28:36,320
info.plist file whose executable is a

732
00:28:36,320 --> 00:28:37,840
script because again these are the two

733
00:28:37,840 --> 00:28:40,159
components that would trigger the flaw

734
00:28:40,159 --> 00:28:42,080
and ultimately allow unsigned

735
00:28:42,080 --> 00:28:44,640
non-notarization notarized applications

736
00:28:44,640 --> 00:28:47,039
to run even on the latest version of mac

737
00:28:47,039 --> 00:28:48,480
os

738
00:28:48,480 --> 00:28:51,200
so we did some searches

739
00:28:51,200 --> 00:28:52,399
and honestly

740
00:28:52,399 --> 00:28:56,000
i was not expecting to find anything but

741
00:28:56,000 --> 00:28:58,320
it turned out we actually found an

742
00:28:58,320 --> 00:29:00,880
application that conformed exactly to

743
00:29:00,880 --> 00:29:04,080
this necessary application bundle

744
00:29:04,080 --> 00:29:05,600
structure

745
00:29:05,600 --> 00:29:07,840
so the application itself was named

746
00:29:07,840 --> 00:29:09,520
1302.app

747
00:29:09,520 --> 00:29:11,279
uh you know that in itself is kind of a

748
00:29:11,279 --> 00:29:12,960
red flag it's kind of just some random

749
00:29:12,960 --> 00:29:16,559
numbers and if we look at the directory

750
00:29:16,559 --> 00:29:18,000
structure the files within the

751
00:29:18,000 --> 00:29:20,799
application bundle we can see two things

752
00:29:20,799 --> 00:29:24,559
a it is missing an info.plist file and b

753
00:29:24,559 --> 00:29:26,640
it's executable component is a

754
00:29:26,640 --> 00:29:28,880
script-based application we can also

755
00:29:28,880 --> 00:29:31,120
confirm that though this application is

756
00:29:31,120 --> 00:29:34,080
from the internet it is not signed

757
00:29:34,080 --> 00:29:38,000
and if we do execute it on what was at

758
00:29:38,000 --> 00:29:40,240
the time a fully patched version of mac

759
00:29:40,240 --> 00:29:43,440
os it was allowed to run

760
00:29:43,440 --> 00:29:46,159
so this is problematic right this

761
00:29:46,159 --> 00:29:48,799
basically means attackers adversaries

762
00:29:48,799 --> 00:29:51,120
hackers independently also discovered

763
00:29:51,120 --> 00:29:53,679
this vulnerability and were actively

764
00:29:53,679 --> 00:29:57,200
exploiting mac os users

765
00:29:57,200 --> 00:29:58,960
i wanted to know you know how users were

766
00:29:58,960 --> 00:30:01,600
being targeted with this turns out via

767
00:30:01,600 --> 00:30:04,240
poison search results on infected sites

768
00:30:04,240 --> 00:30:07,120
so for example if you googled alexa and

769
00:30:07,120 --> 00:30:09,360
disney the second search result would

770
00:30:09,360 --> 00:30:11,440
take you to a site that would have a

771
00:30:11,440 --> 00:30:12,799
pop-up saying that your flash player

772
00:30:12,799 --> 00:30:14,799
needed to be updated and if the user

773
00:30:14,799 --> 00:30:16,480
clicked on it it would download an

774
00:30:16,480 --> 00:30:18,159
application that had been packaged in

775
00:30:18,159 --> 00:30:20,240
this way that would bypass all of mac

776
00:30:20,240 --> 00:30:22,720
os's security mechanisms

777
00:30:22,720 --> 00:30:24,240
yikes

778
00:30:24,240 --> 00:30:25,760
so obviously this bug had been reported

779
00:30:25,760 --> 00:30:28,000
to apple by cedric but since we had

780
00:30:28,000 --> 00:30:29,840
discovered that it was also being

781
00:30:29,840 --> 00:30:31,919
exploited in the wild

782
00:30:31,919 --> 00:30:34,240
we said okay we need to figure out a way

783
00:30:34,240 --> 00:30:36,799
to provide a protection mechanism while

784
00:30:36,799 --> 00:30:39,760
apple is working on a patch

785
00:30:39,760 --> 00:30:42,000
so my idea was pretty straightforward

786
00:30:42,000 --> 00:30:45,279
and it was hey can i simply detect and

787
00:30:45,279 --> 00:30:47,679
then block any downloaded code that is

788
00:30:47,679 --> 00:30:49,279
not notarized

789
00:30:49,279 --> 00:30:51,039
i mean this is what apple is trying to

790
00:30:51,039 --> 00:30:53,520
do obviously they they messed it up but

791
00:30:53,520 --> 00:30:55,919
the idea is still very solid

792
00:30:55,919 --> 00:30:57,440
so now we're going to quickly walk

793
00:30:57,440 --> 00:30:59,919
through the four steps of how to

794
00:30:59,919 --> 00:31:01,519
implement this

795
00:31:01,519 --> 00:31:03,760
first off we need to detect any time the

796
00:31:03,760 --> 00:31:06,480
user launches a new process and we can

797
00:31:06,480 --> 00:31:08,399
do that by using apple's endpoint

798
00:31:08,399 --> 00:31:10,799
security framework or the esf there's

799
00:31:10,799 --> 00:31:13,519
some sample code on the slide basically

800
00:31:13,519 --> 00:31:15,440
though you tell the operating system

801
00:31:15,440 --> 00:31:17,919
you're interested in process events

802
00:31:17,919 --> 00:31:20,960
specifically the es event type auth exec

803
00:31:20,960 --> 00:31:22,960
once you've registered for these events

804
00:31:22,960 --> 00:31:25,120
the operating system will invoke your

805
00:31:25,120 --> 00:31:27,919
code your tool before the application is

806
00:31:27,919 --> 00:31:29,840
allowed to execute the operating system

807
00:31:29,840 --> 00:31:31,679
will wait for you to say yes this is

808
00:31:31,679 --> 00:31:35,200
okay or no i should block it

809
00:31:35,200 --> 00:31:37,840
now we have a callback or an alert from

810
00:31:37,840 --> 00:31:40,159
the operating system every time the user

811
00:31:40,159 --> 00:31:42,399
executes or attempts to execute an

812
00:31:42,399 --> 00:31:43,519
application

813
00:31:43,519 --> 00:31:45,200
we now need to determine if it's from

814
00:31:45,200 --> 00:31:47,840
the internet or not yes we could check

815
00:31:47,840 --> 00:31:50,159
for that quarantine attribute but we can

816
00:31:50,159 --> 00:31:52,080
also check to see if the application has

817
00:31:52,080 --> 00:31:55,440
been translocated at translocation is a

818
00:31:55,440 --> 00:31:57,679
mechanism that apple employed after a

819
00:31:57,679 --> 00:32:00,480
dilib hijack attack that i talked at

820
00:32:00,480 --> 00:32:02,880
defcon several years ago and the idea is

821
00:32:02,880 --> 00:32:05,039
they copy it to a read-only share and

822
00:32:05,039 --> 00:32:06,960
launch it from that to protect against

823
00:32:06,960 --> 00:32:09,120
dylab injection attacks

824
00:32:09,120 --> 00:32:10,720
what we can do is we can use a private

825
00:32:10,720 --> 00:32:13,519
api to query the application to see if

826
00:32:13,519 --> 00:32:16,640
it's been translocated and if so we know

827
00:32:16,640 --> 00:32:18,960
it's from the internet and the user is

828
00:32:18,960 --> 00:32:20,960
launching it

829
00:32:20,960 --> 00:32:22,799
at this point we want to do our final

830
00:32:22,799 --> 00:32:25,840
check to say is that item notarized

831
00:32:25,840 --> 00:32:27,600
again this is pretty straightforward

832
00:32:27,600 --> 00:32:30,000
there are apis that apple provides that

833
00:32:30,000 --> 00:32:31,360
you can query

834
00:32:31,360 --> 00:32:34,320
an application to see if indeed it has

835
00:32:34,320 --> 00:32:37,120
been notarized or not

836
00:32:37,120 --> 00:32:39,600
and if it hasn't we simply return deny

837
00:32:39,600 --> 00:32:43,039
from that callback the esf callback and

838
00:32:43,039 --> 00:32:44,640
then the operating system will prevent

839
00:32:44,640 --> 00:32:47,039
that application from running so i

840
00:32:47,039 --> 00:32:48,559
wrapped this into

841
00:32:48,559 --> 00:32:50,720
one of my free open source security

842
00:32:50,720 --> 00:32:53,360
tools on objective c called block block

843
00:32:53,360 --> 00:32:55,279
and we can see once it's been added if

844
00:32:55,279 --> 00:32:57,120
we launch the either the proof of

845
00:32:57,120 --> 00:32:59,919
concept application or the malware we

846
00:32:59,919 --> 00:33:01,679
discovered exploiting this vulnerability

847
00:33:01,679 --> 00:33:04,000
in the wild even though apple had not

848
00:33:04,000 --> 00:33:06,559
patched this flaw we can very easily

849
00:33:06,559 --> 00:33:09,120
detect that this code is not notarized

850
00:33:09,120 --> 00:33:12,000
and then simply allow it or sorry simply

851
00:33:12,000 --> 00:33:15,519
deny it preventing it from being able to

852
00:33:15,519 --> 00:33:17,840
execute

853
00:33:17,840 --> 00:33:20,720
we're now going to talk about detections

854
00:33:20,720 --> 00:33:23,039
because i also wanted to know you know

855
00:33:23,039 --> 00:33:26,240
have i been exploited or you know users

856
00:33:26,240 --> 00:33:28,159
could similarly answer this question

857
00:33:28,159 --> 00:33:31,200
again while awaiting apple's patch

858
00:33:31,200 --> 00:33:32,799
so i went back and i looked more at cis

859
00:33:32,799 --> 00:33:34,000
policy d

860
00:33:34,000 --> 00:33:36,000
which again recall is the daemon that is

861
00:33:36,000 --> 00:33:38,799
responsible for analyzing applications

862
00:33:38,799 --> 00:33:41,919
and ultimately where the flaw resided

863
00:33:41,919 --> 00:33:45,440
and i noticed that it would always log

864
00:33:45,440 --> 00:33:48,640
the results of its evaluation even the

865
00:33:48,640 --> 00:33:51,679
incorrect evaluation and it did this to

866
00:33:51,679 --> 00:33:53,760
an undocumented database called the exec

867
00:33:53,760 --> 00:33:56,159
policy database

868
00:33:56,159 --> 00:33:57,840
so what we can do is we can dump this

869
00:33:57,840 --> 00:33:59,600
database and we can see there are

870
00:33:59,600 --> 00:34:03,039
various events any time the cis policy

871
00:34:03,039 --> 00:34:06,159
daemon has performed an evaluation on an

872
00:34:06,159 --> 00:34:08,639
item that the user is running

873
00:34:08,639 --> 00:34:10,239
unfortunately they don't specify the

874
00:34:10,239 --> 00:34:14,079
path but just a file inode but we can

875
00:34:14,079 --> 00:34:16,399
implement some interesting logic to

876
00:34:16,399 --> 00:34:19,119
given a file node recover the ultimate

877
00:34:19,119 --> 00:34:22,079
path and so you know we can now figure

878
00:34:22,079 --> 00:34:24,879
out the paths of the items and the

879
00:34:24,879 --> 00:34:28,159
policy results in this database

880
00:34:28,159 --> 00:34:31,199
so i put together a simple python script

881
00:34:31,199 --> 00:34:32,639
this is open source if you want to dig

882
00:34:32,639 --> 00:34:35,839
into it it basically parses the sys

883
00:34:35,839 --> 00:34:37,918
policy database that exec policy

884
00:34:37,918 --> 00:34:40,480
database which again holds the results

885
00:34:40,480 --> 00:34:43,199
of any evaluations even the incorrect

886
00:34:43,199 --> 00:34:44,960
evaluations

887
00:34:44,960 --> 00:34:47,119
and from that pulls out all the paths

888
00:34:47,119 --> 00:34:49,520
and then checks if any of the items that

889
00:34:49,520 --> 00:34:52,560
were executed were a script-based

890
00:34:52,560 --> 00:34:55,119
application missing an info.plist file

891
00:34:55,119 --> 00:34:57,200
so if we run this we can see this on the

892
00:34:57,200 --> 00:34:59,440
slide after executing the malware in a

893
00:34:59,440 --> 00:35:02,160
virtual machine yes indeed this python

894
00:35:02,160 --> 00:35:05,359
script is able to query the system and

895
00:35:05,359 --> 00:35:06,960
you know basically answer the question

896
00:35:06,960 --> 00:35:09,760
hey yes a piece of malware had

897
00:35:09,760 --> 00:35:12,000
previously infected or rather was

898
00:35:12,000 --> 00:35:14,839
allowed to execute on this

899
00:35:14,839 --> 00:35:17,520
system so the last section of this talk

900
00:35:17,520 --> 00:35:19,359
before we wrap this up is briefly

901
00:35:19,359 --> 00:35:22,000
reverse engineering apple's patch

902
00:35:22,000 --> 00:35:25,520
so apple patched this as cde 2021

903
00:35:25,520 --> 00:35:28,480
3657

904
00:35:28,480 --> 00:35:30,640
i wanted to look at how they patch that

905
00:35:30,640 --> 00:35:32,400
because a lot of times apple doesn't

906
00:35:32,400 --> 00:35:34,720
sufficiently provide

907
00:35:34,720 --> 00:35:37,040
a comprehensive patch a lot of the cves

908
00:35:37,040 --> 00:35:40,000
i've received are by apple incorrectly

909
00:35:40,000 --> 00:35:41,359
patching something they won't patch the

910
00:35:41,359 --> 00:35:43,520
actual bug just one code path and if you

911
00:35:43,520 --> 00:35:46,160
can find another code path that is

912
00:35:46,160 --> 00:35:48,240
another security file

913
00:35:48,240 --> 00:35:50,320
so since i knew where the vulnerability

914
00:35:50,320 --> 00:35:53,040
lay specifically within cis policy d i

915
00:35:53,040 --> 00:35:54,800
simply installed the update and then

916
00:35:54,800 --> 00:35:57,119
differed the two binaries the unpatched

917
00:35:57,119 --> 00:35:59,440
version and the patched version

918
00:35:59,440 --> 00:36:02,079
recall again the vulnerability was in an

919
00:36:02,079 --> 00:36:03,920
unnamed subroutine that was

920
00:36:03,920 --> 00:36:05,440
misclassifying

921
00:36:05,440 --> 00:36:08,000
a bundle as not a bundle so i simply

922
00:36:08,000 --> 00:36:10,079
looked for that new subroutine in the

923
00:36:10,079 --> 00:36:12,480
patched version and if we look at

924
00:36:12,480 --> 00:36:15,200
various metadata about that as we can

925
00:36:15,200 --> 00:36:17,680
see on the slide we can see things like

926
00:36:17,680 --> 00:36:19,359
the size of that function was greatly

927
00:36:19,359 --> 00:36:21,839
increased as were the code blocks which

928
00:36:21,839 --> 00:36:24,800
indicates more checks were added

929
00:36:24,800 --> 00:36:26,480
so i reverse engineered the new

930
00:36:26,480 --> 00:36:28,000
implementation of that unnamed

931
00:36:28,000 --> 00:36:29,920
subroutine and figured out that apple

932
00:36:29,920 --> 00:36:32,079
had added additional checks to improve

933
00:36:32,079 --> 00:36:34,240
the is bundled algorithm

934
00:36:34,240 --> 00:36:36,079
first they check the items path

935
00:36:36,079 --> 00:36:38,560
extension for app this makes a lot of

936
00:36:38,560 --> 00:36:40,720
sense because for an application to

937
00:36:40,720 --> 00:36:42,800
launch when the user double clicks it it

938
00:36:42,800 --> 00:36:45,520
name it needs to be named dot app so now

939
00:36:45,520 --> 00:36:47,119
what they do is they just check the file

940
00:36:47,119 --> 00:36:49,040
extension and if it ends in dot app they

941
00:36:49,040 --> 00:36:50,640
say hey this is a bundle we don't need

942
00:36:50,640 --> 00:36:52,640
to do any checks

943
00:36:52,640 --> 00:36:54,960
good idea the second thing they check

944
00:36:54,960 --> 00:36:58,960
for is if the bundle contains contents

945
00:36:58,960 --> 00:37:02,240
mac os these are required files and this

946
00:37:02,240 --> 00:37:04,320
check also makes sense because you can

947
00:37:04,320 --> 00:37:06,079
have other type of bundles that aren't

948
00:37:06,079 --> 00:37:08,320
purely applications

949
00:37:08,320 --> 00:37:10,079
so similar to the previous check they

950
00:37:10,079 --> 00:37:12,560
basically look for this and if the item

951
00:37:12,560 --> 00:37:14,720
they're checking conforms to this they

952
00:37:14,720 --> 00:37:19,359
return yes meaning the item is bundled

953
00:37:19,359 --> 00:37:22,400
so to summarize the patch if the item

954
00:37:22,400 --> 00:37:24,320
that is being launched either ends in

955
00:37:24,320 --> 00:37:26,960
dot app or contains contents

956
00:37:26,960 --> 00:37:29,920
macos the is bundled algorithm will now

957
00:37:29,920 --> 00:37:32,960
return yes which means an evaluation

958
00:37:32,960 --> 00:37:37,119
type of zero not 2 is returned which

959
00:37:37,119 --> 00:37:39,040
ultimately then means that the operating

960
00:37:39,040 --> 00:37:41,520
system will block it and alert the user

961
00:37:41,520 --> 00:37:42,720
to the spec

962
00:37:42,720 --> 00:37:44,320
we can confirm this by installing the

963
00:37:44,320 --> 00:37:46,079
patch running the proof of concept

964
00:37:46,079 --> 00:37:48,079
application or the malware we found

965
00:37:48,079 --> 00:37:50,560
exploiting this and see yes indeed mac

966
00:37:50,560 --> 00:37:53,440
os now correctly identifies this item as

967
00:37:53,440 --> 00:37:55,760
a bundle and thus blocks it because it's

968
00:37:55,760 --> 00:37:58,079
from the internet is unsigned and is not

969
00:37:58,079 --> 00:38:00,240
notarized

970
00:38:00,240 --> 00:38:03,040
so we're good right well turns out there

971
00:38:03,040 --> 00:38:05,520
was actually another interesting flaw

972
00:38:05,520 --> 00:38:07,920
that was very similarly related that has

973
00:38:07,920 --> 00:38:10,480
just been patched in mac os 12 beta 6

974
00:38:10,480 --> 00:38:13,440
and in mac os 11. stay tuned uh this is

975
00:38:13,440 --> 00:38:15,680
a very similar flaw but in a completely

976
00:38:15,680 --> 00:38:17,440
different component of the operating

977
00:38:17,440 --> 00:38:19,200
system

978
00:38:19,200 --> 00:38:22,000
all right so let's wrap this up

979
00:38:22,000 --> 00:38:25,119
some conclusions uh first and foremost i

980
00:38:25,119 --> 00:38:27,280
really hope this illustrates that mac os

981
00:38:27,280 --> 00:38:30,560
has shallow bugs this isn't to take any

982
00:38:30,560 --> 00:38:32,720
credit away from cedric's discovery but

983
00:38:32,720 --> 00:38:34,880
he essentially stumbled across this bug

984
00:38:34,880 --> 00:38:36,400
while playing around with application

985
00:38:36,400 --> 00:38:37,920
bundles he didn't need an advanced

986
00:38:37,920 --> 00:38:40,079
fuzzer but was able to craft an

987
00:38:40,079 --> 00:38:42,560
application that was able to sidestep

988
00:38:42,560 --> 00:38:44,640
all of mac os's recent security

989
00:38:44,640 --> 00:38:46,560
mechanisms at least in the context of

990
00:38:46,560 --> 00:38:48,720
those protecting users from infecting

991
00:38:48,720 --> 00:38:50,640
themselves

992
00:38:50,640 --> 00:38:52,240
so in this talk we talked about the root

993
00:38:52,240 --> 00:38:54,320
cause analysis of the bug we talked

994
00:38:54,320 --> 00:38:56,960
about how we were able to find it being

995
00:38:56,960 --> 00:38:59,920
exploited in the wild as a zero day and

996
00:38:59,920 --> 00:39:02,480
also how to implement some protections

997
00:39:02,480 --> 00:39:04,400
and detections and how to analyze

998
00:39:04,400 --> 00:39:07,280
apple's path patch one other takeaway

999
00:39:07,280 --> 00:39:10,400
for you all is that i really want you to

1000
00:39:10,400 --> 00:39:12,480
also realize that many of the techniques

1001
00:39:12,480 --> 00:39:15,440
we talked about today also apply to the

1002
00:39:15,440 --> 00:39:16,960
analysis of

1003
00:39:16,960 --> 00:39:19,200
other mac os vulnerabilities operating

1004
00:39:19,200 --> 00:39:21,040
system internals or even reverse

1005
00:39:21,040 --> 00:39:24,000
engineering mac os malware

1006
00:39:24,000 --> 00:39:25,520
and if you are interested in learning

1007
00:39:25,520 --> 00:39:28,160
more specifically about mac maurer i've

1008
00:39:28,160 --> 00:39:30,640
written a free open source book on the

1009
00:39:30,640 --> 00:39:34,160
topic so just pop over to taomm.org

1010
00:39:34,160 --> 00:39:38,000
and read the art of mac malware analysis

1011
00:39:38,000 --> 00:39:39,680
finally i want to shout out the

1012
00:39:39,680 --> 00:39:41,920
companies and products who support me as

1013
00:39:41,920 --> 00:39:44,079
an independent security researcher

1014
00:39:44,079 --> 00:39:45,760
without their support i wouldn't be able

1015
00:39:45,760 --> 00:39:47,839
to find and analyze these bugs and i

1016
00:39:47,839 --> 00:39:49,119
wouldn't be here talking to you all

1017
00:39:49,119 --> 00:39:50,720
today

1018
00:39:50,720 --> 00:39:52,640
so that is a wrap these are the

1019
00:39:52,640 --> 00:39:55,119
resources again thank you so much for

1020
00:39:55,119 --> 00:39:57,040
virtually attending my talk i hope

1021
00:39:57,040 --> 00:39:58,960
you're all staying safe and i can't wait

1022
00:39:58,960 --> 00:40:02,800
to see you in person at echoparty 2022

1023
00:40:02,800 --> 00:40:06,839
aloha and mahalo

