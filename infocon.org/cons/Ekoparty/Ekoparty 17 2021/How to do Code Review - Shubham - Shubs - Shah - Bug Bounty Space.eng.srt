1
00:00:02,720 --> 00:00:04,560
hey everyone welcome to my talk today on

2
00:00:04,560 --> 00:00:06,160
how to do code review the offensive

3
00:00:06,160 --> 00:00:08,320
security way

4
00:00:08,320 --> 00:00:09,920
so the first thing that you need to do

5
00:00:09,920 --> 00:00:11,360
when you're doing code review is

6
00:00:11,360 --> 00:00:13,519
obtaining the source code this can often

7
00:00:13,519 --> 00:00:15,599
prove difficult because of some source

8
00:00:15,599 --> 00:00:17,760
code some source code being restricted

9
00:00:17,760 --> 00:00:20,240
behind the sales process or just being

10
00:00:20,240 --> 00:00:22,160
generally difficult to get your hands on

11
00:00:22,160 --> 00:00:23,680
so one of the first techniques that i

12
00:00:23,680 --> 00:00:25,840
want to get into is obtaining the source

13
00:00:25,840 --> 00:00:28,640
code through cloud marketplaces

14
00:00:28,640 --> 00:00:30,320
these days we're fortunate enough to

15
00:00:30,320 --> 00:00:32,238
have many vendors list their software on

16
00:00:32,238 --> 00:00:34,880
cloud marketplaces like aws azure and

17
00:00:34,880 --> 00:00:37,840
gcp in many cases trial licenses are

18
00:00:37,840 --> 00:00:39,760
available which lets us access software

19
00:00:39,760 --> 00:00:41,120
that would typically be gated by an

20
00:00:41,120 --> 00:00:43,440
enterprise sales process

21
00:00:43,440 --> 00:00:44,960
so this is pretty valuable because we

22
00:00:44,960 --> 00:00:46,800
can leverage these marketplace offerings

23
00:00:46,800 --> 00:00:48,399
to obtain the source code for enterprise

24
00:00:48,399 --> 00:00:49,680
software

25
00:00:49,680 --> 00:00:51,360
personally i have used cloud

26
00:00:51,360 --> 00:00:53,199
marketplaces to gain access to source

27
00:00:53,199 --> 00:00:55,520
code multiple times where it's typically

28
00:00:55,520 --> 00:00:57,680
behind some sort of sales process or is

29
00:00:57,680 --> 00:01:00,160
really difficult to get access to

30
00:01:00,160 --> 00:01:02,079
so here's an example

31
00:01:02,079 --> 00:01:03,920
there was this piece of software called

32
00:01:03,920 --> 00:01:06,640
teradissi pcoip manager

33
00:01:06,640 --> 00:01:08,560
and it was something that facebook were

34
00:01:08,560 --> 00:01:10,000
running so you can see in this

35
00:01:10,000 --> 00:01:11,200
screenshot

36
00:01:11,200 --> 00:01:14,159
there's a subdomain under fb.com where i

37
00:01:14,159 --> 00:01:16,799
identify that they are running pcoip

38
00:01:16,799 --> 00:01:18,479
connection manager

39
00:01:18,479 --> 00:01:19,280
now

40
00:01:19,280 --> 00:01:21,920
typically it's not so easy to get access

41
00:01:21,920 --> 00:01:23,360
to the source code

42
00:01:23,360 --> 00:01:24,799
or the software

43
00:01:24,799 --> 00:01:26,880
what i found was it was available on

44
00:01:26,880 --> 00:01:29,119
aws's marketplace like you can see in

45
00:01:29,119 --> 00:01:30,960
the screenshot below

46
00:01:30,960 --> 00:01:33,759
what this let me do was simply spin up

47
00:01:33,759 --> 00:01:36,479
an instance of teradc pcip manager on

48
00:01:36,479 --> 00:01:39,040
aws's marketplace and then obtain the

49
00:01:39,040 --> 00:01:42,799
source code to do source code analysis

50
00:01:42,799 --> 00:01:44,880
another method of obtaining the source

51
00:01:44,880 --> 00:01:48,000
code is container image registries

52
00:01:48,000 --> 00:01:50,399
so similar to cloud marketplaces you'd

53
00:01:50,399 --> 00:01:52,000
be surprised at some of the enterprise

54
00:01:52,000 --> 00:01:53,920
software which you can find pre-built

55
00:01:53,920 --> 00:01:56,880
docker containers for images for so if

56
00:01:56,880 --> 00:01:59,119
you go to hub.docker.com and you search

57
00:01:59,119 --> 00:02:00,320
for the software that you're interested

58
00:02:00,320 --> 00:02:02,399
in reverse engineering you'll often find

59
00:02:02,399 --> 00:02:05,200
something that is already on docker hub

60
00:02:05,200 --> 00:02:06,960
and can be used to reverse engineer the

61
00:02:06,960 --> 00:02:08,720
software

62
00:02:08,720 --> 00:02:10,318
if there's an image available you can

63
00:02:10,318 --> 00:02:12,319
simply spin up a docker container using

64
00:02:12,319 --> 00:02:14,239
that image and gain shell access to that

65
00:02:14,239 --> 00:02:16,560
container then you can obtain all of the

66
00:02:16,560 --> 00:02:17,840
source code once you're inside the

67
00:02:17,840 --> 00:02:19,760
container whether that's war files jar

68
00:02:19,760 --> 00:02:23,120
files or php files for further analysis

69
00:02:23,120 --> 00:02:24,800
so this technique i've been pretty

70
00:02:24,800 --> 00:02:27,200
successful with as well i've often found

71
00:02:27,200 --> 00:02:28,800
that there's enterprise software that

72
00:02:28,800 --> 00:02:31,120
typically requires a license that's

73
00:02:31,120 --> 00:02:32,400
pre-built

74
00:02:32,400 --> 00:02:34,319
as a docker image and posted on docker

75
00:02:34,319 --> 00:02:35,360
hub

76
00:02:35,360 --> 00:02:37,599
this is something that often you will

77
00:02:37,599 --> 00:02:40,319
find on docker hub because of you know

78
00:02:40,319 --> 00:02:42,080
whatever reason someone is trying to do

79
00:02:42,080 --> 00:02:44,160
devops for their company and they've

80
00:02:44,160 --> 00:02:46,160
pushed these images to docker hub for

81
00:02:46,160 --> 00:02:49,200
convenience but ultimately it's useful

82
00:02:49,200 --> 00:02:51,360
because you don't need to

83
00:02:51,360 --> 00:02:53,680
be able to get a copy of that software

84
00:02:53,680 --> 00:02:55,360
or even spin up the infrastructure you

85
00:02:55,360 --> 00:02:57,519
can simply pull down the docker image

86
00:02:57,519 --> 00:02:58,959
and start up a docker container

87
00:02:58,959 --> 00:03:02,080
containing that software

88
00:03:02,480 --> 00:03:04,560
so here's the little meme around docker

89
00:03:04,560 --> 00:03:06,959
hub you can see that um in the first

90
00:03:06,959 --> 00:03:09,280
window there's uh adobe experience

91
00:03:09,280 --> 00:03:11,040
manager you can contact sales to get

92
00:03:11,040 --> 00:03:13,519
access to the software but alternatively

93
00:03:13,519 --> 00:03:15,200
you can just get it on docker hub

94
00:03:15,200 --> 00:03:17,280
there's a container for adobe experience

95
00:03:17,280 --> 00:03:19,599
manager that was updated only two months

96
00:03:19,599 --> 00:03:22,159
ago on docker hub so sometimes you can

97
00:03:22,159 --> 00:03:24,239
really defeat the whole sales process

98
00:03:24,239 --> 00:03:26,400
and the whole gated software approach

99
00:03:26,400 --> 00:03:27,920
where it's possible to get access to the

100
00:03:27,920 --> 00:03:29,599
software without going through a sales

101
00:03:29,599 --> 00:03:31,599
process through something like docker

102
00:03:31,599 --> 00:03:33,840
hop

103
00:03:34,400 --> 00:03:35,440
another

104
00:03:35,440 --> 00:03:37,360
unfortunate way of getting

105
00:03:37,360 --> 00:03:39,040
access to source code is actually

106
00:03:39,040 --> 00:03:40,640
contacting sales

107
00:03:40,640 --> 00:03:42,239
now this is one of the more high

108
00:03:42,239 --> 00:03:45,200
friction high reward approaches because

109
00:03:45,200 --> 00:03:47,040
typically contacting sales is not

110
00:03:47,040 --> 00:03:48,560
something that is an enjoyable

111
00:03:48,560 --> 00:03:51,440
experience from my experience and often

112
00:03:51,440 --> 00:03:53,920
it is a long lengthy process where you

113
00:03:53,920 --> 00:03:55,840
need to explain to them why you want the

114
00:03:55,840 --> 00:03:57,519
software and why you are someone they

115
00:03:57,519 --> 00:03:59,599
should consider to give a trial or

116
00:03:59,599 --> 00:04:01,599
something like that so if the only

117
00:04:01,599 --> 00:04:03,200
possible way is to get access to the

118
00:04:03,200 --> 00:04:06,000
software by contacting sales

119
00:04:06,000 --> 00:04:09,360
this might still be a viable solution

120
00:04:09,360 --> 00:04:11,519
it also means that if that's the only

121
00:04:11,519 --> 00:04:13,680
way to get access to the software that

122
00:04:13,680 --> 00:04:15,439
it probably hasn't had many people

123
00:04:15,439 --> 00:04:17,199
looking at the software's source code in

124
00:04:17,199 --> 00:04:19,040
the past due to how difficult it is to

125
00:04:19,040 --> 00:04:20,320
get

126
00:04:20,320 --> 00:04:22,320
while this option is the has the highest

127
00:04:22,320 --> 00:04:24,320
friction involved if you can convince

128
00:04:24,320 --> 00:04:25,919
sales to give you a trial copy of the

129
00:04:25,919 --> 00:04:28,000
software it's pretty likely that you're

130
00:04:28,000 --> 00:04:29,600
going to be able to own the crap out of

131
00:04:29,600 --> 00:04:30,240
it

132
00:04:30,240 --> 00:04:31,840
this is my least favorite route of

133
00:04:31,840 --> 00:04:33,520
getting access to the software because

134
00:04:33,520 --> 00:04:35,520
who really wants to talk to sales but

135
00:04:35,520 --> 00:04:37,280
historically speaking this has had the

136
00:04:37,280 --> 00:04:38,880
highest rewards when it comes to finding

137
00:04:38,880 --> 00:04:42,280
critical vulnerabilities

138
00:04:42,560 --> 00:04:44,160
another approach to obtaining the

139
00:04:44,160 --> 00:04:46,960
software is through freelancing websites

140
00:04:46,960 --> 00:04:49,680
so um this is an example where i went on

141
00:04:49,680 --> 00:04:52,800
fiverr.com and i asked someone on fiverr

142
00:04:52,800 --> 00:04:54,400
if they had experience with the software

143
00:04:54,400 --> 00:04:56,240
called websphere webspherecommerce i

144
00:04:56,240 --> 00:04:58,000
asked them i said do you have experience

145
00:04:58,000 --> 00:04:59,360
with this do you have access to the

146
00:04:59,360 --> 00:05:01,120
installation files so that and can

147
00:05:01,120 --> 00:05:03,680
download them if you can i'd be happy to

148
00:05:03,680 --> 00:05:05,440
pay you to install them on a server and

149
00:05:05,440 --> 00:05:07,360
upload the files for me this is

150
00:05:07,360 --> 00:05:09,360
surprisingly surprisingly a pretty

151
00:05:09,360 --> 00:05:10,960
effective technique because there are a

152
00:05:10,960 --> 00:05:12,880
lot of professionals on fiverr on

153
00:05:12,880 --> 00:05:14,479
freelancer and other freelancing

154
00:05:14,479 --> 00:05:17,280
websites that have access to software

155
00:05:17,280 --> 00:05:19,600
that you typically don't they often have

156
00:05:19,600 --> 00:05:22,400
credentials for ibm or for vmware or

157
00:05:22,400 --> 00:05:24,080
whatever website that has a gated

158
00:05:24,080 --> 00:05:26,639
download process so you can often go to

159
00:05:26,639 --> 00:05:27,520
these

160
00:05:27,520 --> 00:05:30,240
freelancing websites and ask someone or

161
00:05:30,240 --> 00:05:32,240
pay someone to install a piece of

162
00:05:32,240 --> 00:05:33,919
software that's typically difficult to

163
00:05:33,919 --> 00:05:35,120
get

164
00:05:35,120 --> 00:05:37,120
so you can see that this ad was related

165
00:05:37,120 --> 00:05:39,360
to someone offering to install software

166
00:05:39,360 --> 00:05:41,759
related to websphere tomcat jboss

167
00:05:41,759 --> 00:05:44,000
wildfly and i just asked them i said hey

168
00:05:44,000 --> 00:05:45,440
do you have access to a copy of

169
00:05:45,440 --> 00:05:47,680
websphere commerce i'd be interested in

170
00:05:47,680 --> 00:05:49,919
buying that off you so this is another

171
00:05:49,919 --> 00:05:51,520
approach you can take to obtaining

172
00:05:51,520 --> 00:05:53,520
software

173
00:05:53,520 --> 00:05:55,680
another technique is obtaining source

174
00:05:55,680 --> 00:05:57,360
code through github

175
00:05:57,360 --> 00:06:00,240
now github has a way of searching for

176
00:06:00,240 --> 00:06:01,919
files that's pretty effective so if

177
00:06:01,919 --> 00:06:03,919
you've identified a unique file name in

178
00:06:03,919 --> 00:06:06,400
your software like for example here that

179
00:06:06,400 --> 00:06:09,600
we've got install cmstep1.aspx

180
00:06:09,600 --> 00:06:12,240
then on github i could search file name

181
00:06:12,240 --> 00:06:14,080
and that file name to see if there are

182
00:06:14,080 --> 00:06:16,080
any hits and this can be pretty

183
00:06:16,080 --> 00:06:18,240
effective when you're looking for net or

184
00:06:18,240 --> 00:06:20,240
java code bases because you can often

185
00:06:20,240 --> 00:06:23,759
find the jar files or the aspx files and

186
00:06:23,759 --> 00:06:26,160
the dll files for the software that

187
00:06:26,160 --> 00:06:27,600
you're looking for

188
00:06:27,600 --> 00:06:29,759
a lot of people post their entire web

189
00:06:29,759 --> 00:06:31,680
route on github for some reason a lot of

190
00:06:31,680 --> 00:06:33,120
people post a lot of sensitive

191
00:06:33,120 --> 00:06:35,919
information and software on github so

192
00:06:35,919 --> 00:06:38,240
this is a really good uh really good way

193
00:06:38,240 --> 00:06:39,600
of discovering software that you

194
00:06:39,600 --> 00:06:43,680
typically don't get don't have access to

195
00:06:44,160 --> 00:06:46,319
and lastly one other way of obtaining

196
00:06:46,319 --> 00:06:49,199
software is chaining vulnerabilities

197
00:06:49,199 --> 00:06:49,919
so

198
00:06:49,919 --> 00:06:51,280
when you can leverage other

199
00:06:51,280 --> 00:06:53,440
vulnerabilities to obtain the source

200
00:06:53,440 --> 00:06:55,120
code for the application

201
00:06:55,120 --> 00:06:56,720
some of the challenges include not

202
00:06:56,720 --> 00:06:58,720
knowing all of the local file locations

203
00:06:58,720 --> 00:07:00,880
of the source code and sometimes this

204
00:07:00,880 --> 00:07:02,720
isn't something that's allowed by vendor

205
00:07:02,720 --> 00:07:04,960
or bug bounty programs

206
00:07:04,960 --> 00:07:07,360
often local file disclosure is one of

207
00:07:07,360 --> 00:07:09,440
the easiest ways to for an attacker to

208
00:07:09,440 --> 00:07:10,960
read the source code from underlying

209
00:07:10,960 --> 00:07:12,560
systems

210
00:07:12,560 --> 00:07:14,639
external entity injection can also lead

211
00:07:14,639 --> 00:07:16,160
to local file disclosure and this is

212
00:07:16,160 --> 00:07:17,599
potentially another way to read the

213
00:07:17,599 --> 00:07:20,319
source code and obviously remote command

214
00:07:20,319 --> 00:07:21,919
execution will let you read the source

215
00:07:21,919 --> 00:07:23,599
code and execute as you can execute

216
00:07:23,599 --> 00:07:25,120
arbitrary commands

217
00:07:25,120 --> 00:07:27,440
on net systems particularly you can

218
00:07:27,440 --> 00:07:29,199
download the dll files from the bin

219
00:07:29,199 --> 00:07:31,199
folder and then decompile them to

220
00:07:31,199 --> 00:07:33,199
c-sharp source code there are some good

221
00:07:33,199 --> 00:07:34,960
blog posts on the internet about how you

222
00:07:34,960 --> 00:07:36,880
can do this and how you can

223
00:07:36,880 --> 00:07:38,960
essentially enumerate the dll files that

224
00:07:38,960 --> 00:07:41,840
you need to download

225
00:07:43,759 --> 00:07:45,199
so now that we've talked a little bit

226
00:07:45,199 --> 00:07:46,080
about

227
00:07:46,080 --> 00:07:48,720
obtaining the software um

228
00:07:48,720 --> 00:07:50,639
one of the other things that i want to

229
00:07:50,639 --> 00:07:52,479
go through is some of the source code

230
00:07:52,479 --> 00:07:54,400
analysis that needs to be done on the

231
00:07:54,400 --> 00:07:56,400
server side in order to discover

232
00:07:56,400 --> 00:07:58,879
vulnerabilities now remember this entire

233
00:07:58,879 --> 00:08:00,879
presentation is about

234
00:08:00,879 --> 00:08:02,720
source code analysis in an offensive

235
00:08:02,720 --> 00:08:04,879
security way what i find really

236
00:08:04,879 --> 00:08:07,280
difficult with approaching targets from

237
00:08:07,280 --> 00:08:09,759
a completely black box perspective is

238
00:08:09,759 --> 00:08:11,599
number one you don't have access to the

239
00:08:11,599 --> 00:08:13,520
source code so that should have been

240
00:08:13,520 --> 00:08:15,360
addressed by the first section of this

241
00:08:15,360 --> 00:08:17,599
presentation now in this section of the

242
00:08:17,599 --> 00:08:19,199
presentation i want to go through a

243
00:08:19,199 --> 00:08:20,720
little bit about what sort of

244
00:08:20,720 --> 00:08:22,319
vulnerabilities you can look for and

245
00:08:22,319 --> 00:08:24,080
what what the result of source code

246
00:08:24,080 --> 00:08:26,160
analysis can look like when you are

247
00:08:26,160 --> 00:08:28,720
successful

248
00:08:28,960 --> 00:08:31,680
so here's an example from teradici pcoip

249
00:08:31,680 --> 00:08:33,360
manager

250
00:08:33,360 --> 00:08:34,719
this was a vulnerability that i

251
00:08:34,719 --> 00:08:37,120
submitted to facebook a couple of years

252
00:08:37,120 --> 00:08:38,159
ago

253
00:08:38,159 --> 00:08:40,000
can you spot the vulnerability in this

254
00:08:40,000 --> 00:08:42,399
snippet of code

255
00:08:42,399 --> 00:08:44,480
well the vulnerability actually lies

256
00:08:44,480 --> 00:08:47,200
where it says random.next bytes

257
00:08:47,200 --> 00:08:48,720
in this section

258
00:08:48,720 --> 00:08:50,399
what it's actually doing is it's using

259
00:08:50,399 --> 00:08:52,880
java.util.random

260
00:08:52,880 --> 00:08:55,279
and that is essentially an insecure

261
00:08:55,279 --> 00:08:58,160
random function in java this means that

262
00:08:58,160 --> 00:09:00,560
an attacker can potentially crack the

263
00:09:00,560 --> 00:09:03,120
seed and then predict future sessions

264
00:09:03,120 --> 00:09:05,360
that are being made on teradici pcoip

265
00:09:05,360 --> 00:09:06,560
manager

266
00:09:06,560 --> 00:09:08,560
this wouldn't have been super obvious to

267
00:09:08,560 --> 00:09:09,920
you if you just looked at this source

268
00:09:09,920 --> 00:09:11,360
code and didn't have much knowledge

269
00:09:11,360 --> 00:09:14,160
about java or how random uh how the

270
00:09:14,160 --> 00:09:16,640
random util works in java but this is

271
00:09:16,640 --> 00:09:18,480
why it's really important to have a good

272
00:09:18,480 --> 00:09:20,480
base understanding of each programming

273
00:09:20,480 --> 00:09:23,200
language you are attempting to audit

274
00:09:23,200 --> 00:09:24,000
because there are going to be

275
00:09:24,000 --> 00:09:25,920
vulnerabilities that are nuanced and

276
00:09:25,920 --> 00:09:28,080
require a little bit more attention in

277
00:09:28,080 --> 00:09:30,720
order to discover

278
00:09:30,720 --> 00:09:32,800
so as i said earlier this is insecure

279
00:09:32,800 --> 00:09:34,640
randomness the sessions were generated

280
00:09:34,640 --> 00:09:37,120
by java.util.org instead of secure

281
00:09:37,120 --> 00:09:39,360
random due to this the sessions have an

282
00:09:39,360 --> 00:09:40,880
incredibly weak seed that can be

283
00:09:40,880 --> 00:09:42,800
determined allowing the attacker to

284
00:09:42,800 --> 00:09:44,880
predict future seeds

285
00:09:44,880 --> 00:09:46,640
future session ids

286
00:09:46,640 --> 00:09:48,320
this can be of critical impact because

287
00:09:48,320 --> 00:09:50,160
attackers can generate valid future

288
00:09:50,160 --> 00:09:52,720
sessions by knowing the seed value

289
00:09:52,720 --> 00:09:54,480
facebook paid four thousand dollars for

290
00:09:54,480 --> 00:09:58,080
this vulnerability in 2018.

291
00:09:58,399 --> 00:10:00,240
here's another example from terror to

292
00:10:00,240 --> 00:10:02,800
see pcoip manager

293
00:10:02,800 --> 00:10:05,279
you can see in this servlet it is

294
00:10:05,279 --> 00:10:07,760
accepting a post request and as a part

295
00:10:07,760 --> 00:10:09,760
of the post request it's parsing some

296
00:10:09,760 --> 00:10:11,440
xml

297
00:10:11,440 --> 00:10:13,519
you can see that it tries to sanitize

298
00:10:13,519 --> 00:10:16,320
the xml however ultimately

299
00:10:16,320 --> 00:10:20,640
it gets parsed by pars xml input

300
00:10:20,640 --> 00:10:23,200
the pass xml input function essentially

301
00:10:23,200 --> 00:10:26,720
creates a document and passes the xml

302
00:10:26,720 --> 00:10:29,279
without any other modifications

303
00:10:29,279 --> 00:10:31,279
if you can spot the vulnerability here

304
00:10:31,279 --> 00:10:32,959
essentially

305
00:10:32,959 --> 00:10:35,279
it's not the presence of something that

306
00:10:35,279 --> 00:10:36,880
indicates the vulnerability it's

307
00:10:36,880 --> 00:10:38,560
actually the lack of something that

308
00:10:38,560 --> 00:10:40,399
indicates the vulnerability

309
00:10:40,399 --> 00:10:42,000
typically when you

310
00:10:42,000 --> 00:10:44,800
parse xml in java

311
00:10:44,800 --> 00:10:46,640
and when you have a document that you

312
00:10:46,640 --> 00:10:49,040
use a document builder for or sacs or

313
00:10:49,040 --> 00:10:51,680
something like that to parse the xml

314
00:10:51,680 --> 00:10:54,160
you need to explicitly specify not to

315
00:10:54,160 --> 00:10:57,360
expand entities and explicitly specify

316
00:10:57,360 --> 00:11:00,560
that dtds are not allowed in this case

317
00:11:00,560 --> 00:11:02,720
that hasn't happened and essentially

318
00:11:02,720 --> 00:11:05,120
what's happening is the xml is being

319
00:11:05,120 --> 00:11:06,640
parsed directly without any

320
00:11:06,640 --> 00:11:08,160
modifications or settings or

321
00:11:08,160 --> 00:11:09,839
configuration items

322
00:11:09,839 --> 00:11:12,079
and it leads to external entity

323
00:11:12,079 --> 00:11:14,640
injection

324
00:11:14,640 --> 00:11:17,120
so this is what the poc looks like

325
00:11:17,120 --> 00:11:19,040
essentially you post to a specific

326
00:11:19,040 --> 00:11:21,760
endpoint and then you include an xml

327
00:11:21,760 --> 00:11:24,959
input that contains your dtd that this

328
00:11:24,959 --> 00:11:27,279
will ultimately exploit

329
00:11:27,279 --> 00:11:29,760
the when the xml is paused it will reach

330
00:11:29,760 --> 00:11:32,320
out to your dtd and then once that

331
00:11:32,320 --> 00:11:34,720
is done it will then evaluate your dtd's

332
00:11:34,720 --> 00:11:37,200
contents this leads to things like local

333
00:11:37,200 --> 00:11:39,120
file disclosure and server side request

334
00:11:39,120 --> 00:11:41,120
forgery

335
00:11:41,120 --> 00:11:43,200
so no protections were in place within

336
00:11:43,200 --> 00:11:45,440
the source code to protect from external

337
00:11:45,440 --> 00:11:46,959
entity expansion

338
00:11:46,959 --> 00:11:48,640
through the ftp server trick it was

339
00:11:48,640 --> 00:11:50,480
possible to obtain the full contents of

340
00:11:50,480 --> 00:11:52,639
files from this from the file system and

341
00:11:52,639 --> 00:11:55,600
directory listing was possible as well

342
00:11:55,600 --> 00:11:58,399
turn the c pcoip manager was at was and

343
00:11:58,399 --> 00:11:59,839
still is hosted on facebook's

344
00:11:59,839 --> 00:12:02,079
infrastructure this particular bug led

345
00:12:02,079 --> 00:12:03,760
to a bounty of five thousand five

346
00:12:03,760 --> 00:12:06,480
hundred dollars

347
00:12:07,600 --> 00:12:09,200
another bug that i want to quickly go

348
00:12:09,200 --> 00:12:11,040
through today is an employee management

349
00:12:11,040 --> 00:12:13,120
system zero day i can't really disclose

350
00:12:13,120 --> 00:12:14,800
the vendor as i've reported the bug to

351
00:12:14,800 --> 00:12:16,560
their bug bounty and it's not allowed to

352
00:12:16,560 --> 00:12:18,399
disclose who they are however they

353
00:12:18,399 --> 00:12:19,920
produce a software that a lot of

354
00:12:19,920 --> 00:12:21,920
companies use to manage payslips and

355
00:12:21,920 --> 00:12:24,560
other employee related data this source

356
00:12:24,560 --> 00:12:25,920
code was obtained through a friend of

357
00:12:25,920 --> 00:12:27,519
mine however it's definitely not

358
00:12:27,519 --> 00:12:29,120
something that was easily obtainable on

359
00:12:29,120 --> 00:12:30,240
the internet

360
00:12:30,240 --> 00:12:32,880
i discovered an xss0d through xml

361
00:12:32,880 --> 00:12:34,880
injection unfortunately i could not

362
00:12:34,880 --> 00:12:36,839
escalate it to

363
00:12:36,839 --> 00:12:39,600
xxe so here's the example of source code

364
00:12:39,600 --> 00:12:42,079
which i was looking at and you can see

365
00:12:42,079 --> 00:12:44,160
that it essentially takes in a few

366
00:12:44,160 --> 00:12:46,800
parameters and passes it to the system

367
00:12:46,800 --> 00:12:50,000
tree command function

368
00:12:50,800 --> 00:12:53,279
when the system tree command function is

369
00:12:53,279 --> 00:12:54,160
uh

370
00:12:54,160 --> 00:12:56,800
initialized it uses these parameters

371
00:12:56,800 --> 00:12:58,560
that it took in the first snippet of

372
00:12:58,560 --> 00:13:01,200
code and it replaces a bunch of xml on

373
00:13:01,200 --> 00:13:03,519
the local file system before evalua

374
00:13:03,519 --> 00:13:06,399
before returning the xml to the user

375
00:13:06,399 --> 00:13:09,519
you can see that the delphi guid is a

376
00:13:09,519 --> 00:13:11,600
user input from the previous piece of

377
00:13:11,600 --> 00:13:14,240
code that i showed and over here you can

378
00:13:14,240 --> 00:13:16,160
see that in the xml it replaces a

379
00:13:16,160 --> 00:13:18,880
variable in the xml with the contents of

380
00:13:18,880 --> 00:13:22,959
the user input delphi guid

381
00:13:23,440 --> 00:13:25,519
so what you could do is essentially

382
00:13:25,519 --> 00:13:28,320
provide a delphi guide that injects a c

383
00:13:28,320 --> 00:13:29,519
data

384
00:13:29,519 --> 00:13:32,399
xml element which contains arbitrary

385
00:13:32,399 --> 00:13:35,279
html now the reason this works is

386
00:13:35,279 --> 00:13:37,279
because the content type returned by

387
00:13:37,279 --> 00:13:39,519
this endpoint is text

388
00:13:39,519 --> 00:13:40,800
html

389
00:13:40,800 --> 00:13:43,040
so that's why this xss vulnerability

390
00:13:43,040 --> 00:13:45,760
works you can inject a delphi guid which

391
00:13:45,760 --> 00:13:46,560
has

392
00:13:46,560 --> 00:13:50,000
c data xml element and ultimately that c

393
00:13:50,000 --> 00:13:52,800
data xml element is evaluated as text

394
00:13:52,800 --> 00:13:56,160
html leading to cross-site scripting

395
00:13:56,160 --> 00:14:00,160
this was reflected across that scripting

396
00:14:00,639 --> 00:14:03,680
so lastly i just want to leave uh some

397
00:14:03,680 --> 00:14:06,800
tips for code reviewers now in the

398
00:14:06,800 --> 00:14:08,560
previous section i just showed you some

399
00:14:08,560 --> 00:14:10,480
examples of what code review looks like

400
00:14:10,480 --> 00:14:12,320
and what you can discover through source

401
00:14:12,320 --> 00:14:14,160
code analysis

402
00:14:14,160 --> 00:14:15,839
these are examples of source code

403
00:14:15,839 --> 00:14:18,079
analysis through the offensive security

404
00:14:18,079 --> 00:14:21,040
lens um often i didn't have access to

405
00:14:21,040 --> 00:14:22,480
the source code i had to figure out a

406
00:14:22,480 --> 00:14:24,480
way to get access to the source code and

407
00:14:24,480 --> 00:14:26,399
ultimately i always ultimately

408
00:14:26,399 --> 00:14:28,079
discovered vulnerabilities within the

409
00:14:28,079 --> 00:14:29,440
things that i was looking at after

410
00:14:29,440 --> 00:14:31,360
spending a bunch of time on it

411
00:14:31,360 --> 00:14:34,240
so before i wrap up this presentation i

412
00:14:34,240 --> 00:14:36,399
just want to give a few tips for people

413
00:14:36,399 --> 00:14:38,320
who are getting into source code review

414
00:14:38,320 --> 00:14:39,760
and people who may be a bit more

415
00:14:39,760 --> 00:14:42,079
experienced with source code review

416
00:14:42,079 --> 00:14:44,800
for novice code reviewers so beginners

417
00:14:44,800 --> 00:14:47,199
um what i suggest is you identify all

418
00:14:47,199 --> 00:14:49,440
the sources and syncs the sources are

419
00:14:49,440 --> 00:14:51,519
where data is being input and the syncs

420
00:14:51,519 --> 00:14:53,199
are where data and ends up being

421
00:14:53,199 --> 00:14:56,079
processed um spend time doing recon on

422
00:14:56,079 --> 00:14:58,240
the code base so for example identifying

423
00:14:58,240 --> 00:15:01,000
all the routes so the web.xml file the

424
00:15:01,000 --> 00:15:03,760
application.xml file the routes.rb file

425
00:15:03,760 --> 00:15:05,279
depending on what language it is there's

426
00:15:05,279 --> 00:15:06,800
going to be a different way to define

427
00:15:06,800 --> 00:15:08,560
the different routes and controllers for

428
00:15:08,560 --> 00:15:10,560
the application i suggest that you

429
00:15:10,560 --> 00:15:12,480
discover these and you go through them

430
00:15:12,480 --> 00:15:14,320
in depth and you understand how the

431
00:15:14,320 --> 00:15:16,720
sources and sinks work

432
00:15:16,720 --> 00:15:19,040
next i would map out these routes to the

433
00:15:19,040 --> 00:15:20,800
server-side functionality and make a

434
00:15:20,800 --> 00:15:22,639
note of all the inputs for each of these

435
00:15:22,639 --> 00:15:25,120
routes be thorough with it it's totally

436
00:15:25,120 --> 00:15:27,040
worth it if you can understand where all

437
00:15:27,040 --> 00:15:28,959
the user input is coming from and where

438
00:15:28,959 --> 00:15:30,880
it is going that is going to help you in

439
00:15:30,880 --> 00:15:32,720
your vulnerability discovery process and

440
00:15:32,720 --> 00:15:34,959
your source code analysis process

441
00:15:34,959 --> 00:15:36,880
and lastly go through a server-side flow

442
00:15:36,880 --> 00:15:40,079
from a http request from the source to

443
00:15:40,079 --> 00:15:41,519
point to the point in code where it's

444
00:15:41,519 --> 00:15:44,240
being processed the sync repeat this

445
00:15:44,240 --> 00:15:46,160
process for all the other places in the

446
00:15:46,160 --> 00:15:48,240
attack surface for all other attack

447
00:15:48,240 --> 00:15:49,279
surface

448
00:15:49,279 --> 00:15:50,800
so these are some of the tips that i

449
00:15:50,800 --> 00:15:52,639
would like to provide to beginner code

450
00:15:52,639 --> 00:15:54,399
reviewers and i think these are

451
00:15:54,399 --> 00:15:56,639
practical trip tips that they can employ

452
00:15:56,639 --> 00:15:59,040
in order to become better at code review

453
00:15:59,040 --> 00:16:01,839
ultimately code review is really based

454
00:16:01,839 --> 00:16:04,320
on experience and it's based on the

455
00:16:04,320 --> 00:16:06,560
ability to understand how a programming

456
00:16:06,560 --> 00:16:08,639
language works but also how the code

457
00:16:08,639 --> 00:16:10,560
base works and each code base is

458
00:16:10,560 --> 00:16:11,920
different

459
00:16:11,920 --> 00:16:13,920
in this presentation i

460
00:16:13,920 --> 00:16:15,680
what i can't really tell you is how to

461
00:16:15,680 --> 00:16:17,199
become a really great source code

462
00:16:17,199 --> 00:16:19,519
reviewer i can just give you tips on how

463
00:16:19,519 --> 00:16:21,360
to become more experienced at source

464
00:16:21,360 --> 00:16:23,680
code review which will ultimately lead

465
00:16:23,680 --> 00:16:25,360
to you being able to discover more

466
00:16:25,360 --> 00:16:27,279
vulnerabilities when you do source code

467
00:16:27,279 --> 00:16:30,399
review and my biggest takeaway when it

468
00:16:30,399 --> 00:16:32,399
comes to source code review is the more

469
00:16:32,399 --> 00:16:34,720
time you spend reviewing different code

470
00:16:34,720 --> 00:16:37,440
bases more patterns become familiar to

471
00:16:37,440 --> 00:16:39,519
you and you can start understanding how

472
00:16:39,519 --> 00:16:41,839
people structure their code bases and

473
00:16:41,839 --> 00:16:43,680
how certain things operate like

474
00:16:43,680 --> 00:16:46,399
controllers and views and models and

475
00:16:46,399 --> 00:16:47,680
things like that on different

476
00:16:47,680 --> 00:16:49,040
applications

477
00:16:49,040 --> 00:16:51,360
often applications are completely

478
00:16:51,360 --> 00:16:52,800
different to each other every time you

479
00:16:52,800 --> 00:16:54,560
approach a new code base it's completely

480
00:16:54,560 --> 00:16:56,720
different so what really helps is having

481
00:16:56,720 --> 00:16:58,240
the experience of doing source code

482
00:16:58,240 --> 00:17:00,399
review in the past on previous code

483
00:17:00,399 --> 00:17:04,319
bases that helps in the future

484
00:17:04,319 --> 00:17:06,720
for more experienced code reviewers what

485
00:17:06,720 --> 00:17:08,799
i would suggest is to understand the

486
00:17:08,799 --> 00:17:11,199
interoperation within the software and

487
00:17:11,199 --> 00:17:12,559
to make sure that you map out the

488
00:17:12,559 --> 00:17:14,959
potential attack surface thoroughly

489
00:17:14,959 --> 00:17:16,640
reviewing all the dependencies that are

490
00:17:16,640 --> 00:17:18,559
being used is also really important

491
00:17:18,559 --> 00:17:20,240
because you can audit these dependencies

492
00:17:20,240 --> 00:17:22,319
for security issues and you can take the

493
00:17:22,319 --> 00:17:24,959
concepts of syncs even further sometimes

494
00:17:24,959 --> 00:17:26,480
you have to get your hands dirty and

495
00:17:26,480 --> 00:17:28,720
fuzz binaries like for example there's

496
00:17:28,720 --> 00:17:30,480
mean vulnerabilities and binaries like

497
00:17:30,480 --> 00:17:33,039
image image magic and that's just the

498
00:17:33,039 --> 00:17:35,840
dependency of a product so sometimes you

499
00:17:35,840 --> 00:17:37,440
have to go deeper than just what the

500
00:17:37,440 --> 00:17:39,919
initial source code is if it's depending

501
00:17:39,919 --> 00:17:42,080
on certain things like image magic or

502
00:17:42,080 --> 00:17:44,160
exif tool for example then you might

503
00:17:44,160 --> 00:17:45,840
need to start auditing some of those

504
00:17:45,840 --> 00:17:47,679
binaries as well if you want to try and

505
00:17:47,679 --> 00:17:50,720
find vulnerabilities within those syncs

506
00:17:50,720 --> 00:17:52,720
another thing is not to make assumptions

507
00:17:52,720 --> 00:17:54,960
even for standard libraries so always

508
00:17:54,960 --> 00:17:57,360
read the documentation and code to fully

509
00:17:57,360 --> 00:17:58,720
understand how the functionality is

510
00:17:58,720 --> 00:18:00,880
being provided and sometimes

511
00:18:00,880 --> 00:18:02,799
even if it's a standard library read

512
00:18:02,799 --> 00:18:04,400
through the source code of that standard

513
00:18:04,400 --> 00:18:06,559
library function so you can understand

514
00:18:06,559 --> 00:18:08,320
exactly how it's operating sometimes

515
00:18:08,320 --> 00:18:10,240
this will shock you and you'll find

516
00:18:10,240 --> 00:18:11,919
there's some behavior that you didn't

517
00:18:11,919 --> 00:18:14,240
that was not something you expected even

518
00:18:14,240 --> 00:18:16,320
in the standard library

519
00:18:16,320 --> 00:18:18,000
another thing is ensuring that you're

520
00:18:18,000 --> 00:18:20,000
covering all attack surface so all

521
00:18:20,000 --> 00:18:22,160
internally and externally exposed ports

522
00:18:22,160 --> 00:18:24,400
protocols and services when considering

523
00:18:24,400 --> 00:18:26,720
attack chains so what do i mean by this

524
00:18:26,720 --> 00:18:28,880
essentially let's say you had a target

525
00:18:28,880 --> 00:18:29,679
that

526
00:18:29,679 --> 00:18:31,280
you were doing some source code review

527
00:18:31,280 --> 00:18:33,280
for and there was a reader's server and

528
00:18:33,280 --> 00:18:35,520
readers was being used then you need to

529
00:18:35,520 --> 00:18:38,080
also consider all of the possible attack

530
00:18:38,080 --> 00:18:40,160
vectors that involve the reader's server

531
00:18:40,160 --> 00:18:42,080
as well when you do all of your source

532
00:18:42,080 --> 00:18:44,080
code analysis so understand the

533
00:18:44,080 --> 00:18:45,760
interoperation between the different

534
00:18:45,760 --> 00:18:47,840
services and internally externally

535
00:18:47,840 --> 00:18:50,160
exposed ports and protocols when you're

536
00:18:50,160 --> 00:18:52,880
doing your source code analysis

537
00:18:52,880 --> 00:18:54,640
and lastly make an effort towards

538
00:18:54,640 --> 00:18:56,640
chaining the vulnerabilities for impact

539
00:18:56,640 --> 00:18:58,799
so if there's a white list for an ssrf

540
00:18:58,799 --> 00:19:00,960
do not stop there attempt to exploit

541
00:19:00,960 --> 00:19:02,400
this white list

542
00:19:02,400 --> 00:19:04,000
for things like open redirects to

543
00:19:04,000 --> 00:19:06,640
achieve an unbounded ssrf so this is

544
00:19:06,640 --> 00:19:08,080
something that i often do when i do

545
00:19:08,080 --> 00:19:09,440
source code analysis i find

546
00:19:09,440 --> 00:19:11,679
vulnerabilities that they they think

547
00:19:11,679 --> 00:19:12,880
they're protected against the

548
00:19:12,880 --> 00:19:14,960
vulnerability class but under closer

549
00:19:14,960 --> 00:19:17,440
analysis and deeper inspection you find

550
00:19:17,440 --> 00:19:19,600
that you can bypass the protections they

551
00:19:19,600 --> 00:19:21,520
have put in place

552
00:19:21,520 --> 00:19:23,520
and lastly gain a deep understanding

553
00:19:23,520 --> 00:19:25,120
about the application on its stack by

554
00:19:25,120 --> 00:19:27,280
reading the documentation thoroughly

555
00:19:27,280 --> 00:19:29,200
i cannot stress how important this is

556
00:19:29,200 --> 00:19:31,280
each framework and each application can

557
00:19:31,280 --> 00:19:33,360
have its quirks and can be different

558
00:19:33,360 --> 00:19:35,600
sometimes by understanding these nuances

559
00:19:35,600 --> 00:19:37,840
within these applications and frameworks

560
00:19:37,840 --> 00:19:39,440
you will find really good

561
00:19:39,440 --> 00:19:43,520
vulnerabilities due to those nuances

562
00:19:43,919 --> 00:19:46,160
so that's all that's all i have today

563
00:19:46,160 --> 00:19:47,760
but i really appreciate you taking the

564
00:19:47,760 --> 00:19:50,799
time to watch my presentation

565
00:19:50,799 --> 00:19:53,840
thanks so much for coming

