1
00:00:00,399 --> 00:00:02,320
so thank you very much for coming

2
00:00:02,320 --> 00:00:04,720
everybody this is a session about uh

3
00:00:04,720 --> 00:00:07,520
practical mobile app attacks by example

4
00:00:07,520 --> 00:00:10,320
um all the

5
00:00:10,320 --> 00:00:12,320
in the demos i'm going to show like some

6
00:00:12,320 --> 00:00:13,679
vulnerable applications and some

7
00:00:13,679 --> 00:00:15,120
vulnerabilities so these are all

8
00:00:15,120 --> 00:00:17,039
available for free this is

9
00:00:17,039 --> 00:00:20,480
not just a webinar but also a workshop

10
00:00:20,480 --> 00:00:24,480
so you can access all the applications

11
00:00:24,480 --> 00:00:26,400
that i'm going to demo

12
00:00:26,400 --> 00:00:28,800
free the slides the recording this is

13
00:00:28,800 --> 00:00:31,359
all on saturday security.com slash free

14
00:00:31,359 --> 00:00:33,760
so if you can you can go there and you

15
00:00:33,760 --> 00:00:35,600
know you can download everything this

16
00:00:35,600 --> 00:00:37,200
workshop and also there's other

17
00:00:37,200 --> 00:00:38,559
workshops there

18
00:00:38,559 --> 00:00:41,120
that we have if you are interested

19
00:00:41,120 --> 00:00:42,399
um

20
00:00:42,399 --> 00:00:44,800
okay so let's get started i'm abraham

21
00:00:44,800 --> 00:00:47,440
guring i'm the ceo of 70 security uh we

22
00:00:47,440 --> 00:00:49,440
have delivered training at blackhead usa

23
00:00:49,440 --> 00:00:51,600
hacking the bosque uh boasts global labs

24
00:00:51,600 --> 00:00:53,440
like noorcon hackfest

25
00:00:53,440 --> 00:00:55,840
and many other conferences

26
00:00:55,840 --> 00:00:57,039
um

27
00:00:57,039 --> 00:01:00,320
i've done stuff for q53 version one uh

28
00:01:00,320 --> 00:01:02,079
he learned security

29
00:01:02,079 --> 00:01:04,239
um i wrote this course a while back for

30
00:01:04,239 --> 00:01:06,400
for them for uh practical web defense

31
00:01:06,400 --> 00:01:08,720
about hacking and defending uh web

32
00:01:08,720 --> 00:01:10,320
applications

33
00:01:10,320 --> 00:01:12,080
i'm the founder and one of the project

34
00:01:12,080 --> 00:01:14,400
leaders for os wtf which is a noaa's

35
00:01:14,400 --> 00:01:16,080
flagship project so if you type in your

36
00:01:16,080 --> 00:01:18,960
browser wtf.org that takes you

37
00:01:18,960 --> 00:01:21,280
to the os project which is also

38
00:01:21,280 --> 00:01:22,880
completely free if you are interested

39
00:01:22,880 --> 00:01:24,960
about web security

40
00:01:24,960 --> 00:01:27,280
this is my slide and some

41
00:01:27,280 --> 00:01:29,600
certification so the certifications the

42
00:01:29,600 --> 00:01:31,040
background here is that i was a

43
00:01:31,040 --> 00:01:32,640
developer first and then i switched to

44
00:01:32,640 --> 00:01:35,040
security so i kind of can

45
00:01:35,040 --> 00:01:36,240
speak

46
00:01:36,240 --> 00:01:39,280
both languages let's say

47
00:01:39,280 --> 00:01:40,960
so if you're interested about this

48
00:01:40,960 --> 00:01:43,840
presentation i think the first i think

49
00:01:43,840 --> 00:01:45,920
this slide is going to be interesting

50
00:01:45,920 --> 00:01:47,119
right because

51
00:01:47,119 --> 00:01:50,560
um the first half of the slide is about

52
00:01:50,560 --> 00:01:52,720
smart sharif so this was an application

53
00:01:52,720 --> 00:01:54,880
mandated in the entire country of south

54
00:01:54,880 --> 00:01:58,159
korea so by law every parent and child

55
00:01:58,159 --> 00:02:00,479
in the country of south korea this is

56
00:02:00,479 --> 00:02:02,240
the good korea right there not the

57
00:02:02,240 --> 00:02:04,399
communist one

58
00:02:04,399 --> 00:02:06,880
so in this country every parent and

59
00:02:06,880 --> 00:02:08,399
child by law

60
00:02:08,399 --> 00:02:11,280
was forced to install this application

61
00:02:11,280 --> 00:02:12,239
so

62
00:02:12,239 --> 00:02:14,800
uh the idea was to help parents be

63
00:02:14,800 --> 00:02:17,200
parents so a parent would control during

64
00:02:17,200 --> 00:02:18,959
what times of the day the child can

65
00:02:18,959 --> 00:02:21,360
access the phone what applications

66
00:02:21,360 --> 00:02:23,599
they can have installed what websites

67
00:02:23,599 --> 00:02:25,760
they can visit and stuff like this so in

68
00:02:25,760 --> 00:02:26,800
theory

69
00:02:26,800 --> 00:02:28,959
a very nice idea to

70
00:02:28,959 --> 00:02:30,959
keep the children safe

71
00:02:30,959 --> 00:02:32,959
in practice horrible security

72
00:02:32,959 --> 00:02:34,800
implementation

73
00:02:34,800 --> 00:02:36,560
lots of security flaws

74
00:02:36,560 --> 00:02:39,680
so if you search on youtube for a smart

75
00:02:39,680 --> 00:02:40,800
sharing

76
00:02:40,800 --> 00:02:43,120
um

77
00:02:43,680 --> 00:02:45,920
smart sharif dumb idea

78
00:02:45,920 --> 00:02:46,959
uh

79
00:02:46,959 --> 00:02:50,800
on youtube that will show you um

80
00:02:50,800 --> 00:02:52,560
you know the the presentation so it was

81
00:02:52,560 --> 00:02:54,400
so bad that we even gave a talk about it

82
00:02:54,400 --> 00:02:56,959
right uh and also you can take these two

83
00:02:56,959 --> 00:02:58,800
public pentas reports so reading public

84
00:02:58,800 --> 00:03:01,440
panthers reports is a very good way

85
00:03:01,440 --> 00:03:04,239
to learn uh about

86
00:03:04,239 --> 00:03:06,640
you know security so this is pretty much

87
00:03:06,640 --> 00:03:08,239
everything you should never do when you

88
00:03:08,239 --> 00:03:09,920
implement your mobile application you

89
00:03:09,920 --> 00:03:12,159
can find you can find that in these two

90
00:03:12,159 --> 00:03:14,080
reports and we will go over

91
00:03:14,080 --> 00:03:15,760
some of the findings in this

92
00:03:15,760 --> 00:03:17,440
presentation

93
00:03:17,440 --> 00:03:19,920
and then the chinese police apps

94
00:03:19,920 --> 00:03:22,400
the background here was to help human

95
00:03:22,400 --> 00:03:24,480
rights activists to figure out if

96
00:03:24,480 --> 00:03:26,319
something was a human right violation or

97
00:03:26,319 --> 00:03:28,799
not that was their decision and we just

98
00:03:28,799 --> 00:03:30,400
held them on the technical side trying

99
00:03:30,400 --> 00:03:34,080
to find evidence so very quickly bxaq is

100
00:03:34,080 --> 00:03:36,080
an application chinese police use when

101
00:03:36,080 --> 00:03:37,920
you cross the border

102
00:03:37,920 --> 00:03:40,000
of china they install it in your phone

103
00:03:40,000 --> 00:03:41,840
they grab your contacts and all another

104
00:03:41,840 --> 00:03:44,000
stuff and then they push the data into a

105
00:03:44,000 --> 00:03:45,360
police server

106
00:03:45,360 --> 00:03:48,000
ijob is used by police officials

107
00:03:48,000 --> 00:03:50,159
particularly in a region of china called

108
00:03:50,159 --> 00:03:52,319
xinjiang where there is a minority in

109
00:03:52,319 --> 00:03:54,560
theory to

110
00:03:54,560 --> 00:03:56,879
reduce the chances of terrorism

111
00:03:56,879 --> 00:03:57,920
and

112
00:03:57,920 --> 00:04:00,159
then study the great nation is an

113
00:04:00,159 --> 00:04:02,000
application that

114
00:04:02,000 --> 00:04:04,640
is not mandated like smart sheriff right

115
00:04:04,640 --> 00:04:07,840
so this is kind of voluntary however

116
00:04:07,840 --> 00:04:10,319
it is encouraged because the more you

117
00:04:10,319 --> 00:04:12,159
know about the great leader of china the

118
00:04:12,159 --> 00:04:14,080
more points you get and then with these

119
00:04:14,080 --> 00:04:15,599
points you can do cool stuff in china

120
00:04:15,599 --> 00:04:17,199
right so that's the idea

121
00:04:17,199 --> 00:04:19,199
of those three apps so if you search on

122
00:04:19,199 --> 00:04:20,880
youtube for chinese police and cloud

123
00:04:20,880 --> 00:04:24,719
pets you can see i'll talk about that

124
00:04:24,960 --> 00:04:26,960
and there's a lot of other

125
00:04:26,960 --> 00:04:28,560
report on the website so you can go

126
00:04:28,560 --> 00:04:30,800
through this uh i'll learn a lot about

127
00:04:30,800 --> 00:04:32,479
mobile security

128
00:04:32,479 --> 00:04:33,600
there

129
00:04:33,600 --> 00:04:34,800
so

130
00:04:34,800 --> 00:04:36,560
we're going to see some

131
00:04:36,560 --> 00:04:39,280
interesting attack vectors found on

132
00:04:39,280 --> 00:04:41,280
mobile applications over the years so i

133
00:04:41,280 --> 00:04:42,639
hope you find

134
00:04:42,639 --> 00:04:44,960
this workshop entertaining

135
00:04:44,960 --> 00:04:47,040
so let's first start with something

136
00:04:47,040 --> 00:04:49,600
maybe familiar to everybody xss right so

137
00:04:49,600 --> 00:04:51,759
web news and data is filtration let's

138
00:04:51,759 --> 00:04:54,840
start with android so our webview is

139
00:04:54,840 --> 00:04:57,600
basically a small browser that the

140
00:04:57,600 --> 00:05:00,080
application has a webview is going to

141
00:05:00,080 --> 00:05:02,320
have as many permissions as the

142
00:05:02,320 --> 00:05:04,160
application that includes it

143
00:05:04,160 --> 00:05:05,680
they can be explicitly enabled to

144
00:05:05,680 --> 00:05:07,680
execute javascript and can load local

145
00:05:07,680 --> 00:05:10,000
files as well as remote web content

146
00:05:10,000 --> 00:05:11,759
depending on the settings

147
00:05:11,759 --> 00:05:14,080
and then sometimes this native android

148
00:05:14,080 --> 00:05:17,280
functions can like sometimes access like

149
00:05:17,280 --> 00:05:18,560
java

150
00:05:18,560 --> 00:05:21,280
code using javascript interface so this

151
00:05:21,280 --> 00:05:23,919
could sometimes get interesting as well

152
00:05:23,919 --> 00:05:26,400
so what can we do at bag-wise right so

153
00:05:26,400 --> 00:05:29,120
we can do html injection which doesn't

154
00:05:29,120 --> 00:05:31,360
sound very

155
00:05:31,360 --> 00:05:33,759
you know scary however in a mobile

156
00:05:33,759 --> 00:05:36,560
device since you don't see the url bar

157
00:05:36,560 --> 00:05:38,320
because things need to be pretty the

158
00:05:38,320 --> 00:05:40,960
screens are small and so on with html

159
00:05:40,960 --> 00:05:44,160
injection alone if you can craft a page

160
00:05:44,160 --> 00:05:47,120
that is like a believable login page

161
00:05:47,120 --> 00:05:49,600
this will

162
00:05:49,600 --> 00:05:51,039
you know

163
00:05:51,039 --> 00:05:53,120
could be very effective right so with

164
00:05:53,120 --> 00:05:55,520
html injection you can actually do quite

165
00:05:55,520 --> 00:05:57,759
some damage assuming you have like you

166
00:05:57,759 --> 00:05:59,919
know decent control on the page then

167
00:05:59,919 --> 00:06:01,680
with xss we can do more stuff like

168
00:06:01,680 --> 00:06:03,520
change the page invoke functionality and

169
00:06:03,520 --> 00:06:04,840
so on

170
00:06:04,840 --> 00:06:07,759
then sometimes you can also do data

171
00:06:07,759 --> 00:06:09,680
exfiltration which is what we will see

172
00:06:09,680 --> 00:06:12,080
uh today some of the examples and then

173
00:06:12,080 --> 00:06:14,080
in some cases you can even like do

174
00:06:14,080 --> 00:06:16,400
cross-request forgery using exercise but

175
00:06:16,400 --> 00:06:19,440
this again depends a little bit on

176
00:06:19,440 --> 00:06:21,759
you know how the application is put up

177
00:06:21,759 --> 00:06:24,240
so for this exercise we will use a

178
00:06:24,240 --> 00:06:26,479
modified version of android gold right

179
00:06:26,479 --> 00:06:28,240
so android is an open source project

180
00:06:28,240 --> 00:06:30,000
however if you use the open source

181
00:06:30,000 --> 00:06:32,160
project the demo that i'm going to show

182
00:06:32,160 --> 00:06:33,520
now won't work

183
00:06:33,520 --> 00:06:36,000
so you need to use the modified version

184
00:06:36,000 --> 00:06:37,600
that we did

185
00:06:37,600 --> 00:06:41,199
this was a re-enactment of

186
00:06:41,199 --> 00:06:42,880
some vulnerabilities we have found in

187
00:06:42,880 --> 00:06:43,919
practice

188
00:06:43,919 --> 00:06:45,759
so we took like an open source

189
00:06:45,759 --> 00:06:47,759
application changed it

190
00:06:47,759 --> 00:06:49,680
and created our own

191
00:06:49,680 --> 00:06:51,520
vulnerable application so you should use

192
00:06:51,520 --> 00:06:52,479
this

193
00:06:52,479 --> 00:06:54,160
if you're attending this workshop you

194
00:06:54,160 --> 00:06:56,720
should have access to all the materials

195
00:06:56,720 --> 00:07:00,960
already so just check your email for

196
00:07:00,960 --> 00:07:03,840
uh an email titled uh welcome to sound

197
00:07:03,840 --> 00:07:06,560
security training if not go to 7a

198
00:07:06,560 --> 00:07:09,520
security.com free and there you can get

199
00:07:09,520 --> 00:07:11,440
like all the workshops the slides the

200
00:07:11,440 --> 00:07:12,960
recordings all the vulnerable

201
00:07:12,960 --> 00:07:14,560
applications everything right so it's

202
00:07:14,560 --> 00:07:17,440
all there for free so uh

203
00:07:17,440 --> 00:07:20,639
the way it works is uh once you

204
00:07:20,639 --> 00:07:22,960
log in and download the slides from the

205
00:07:22,960 --> 00:07:24,720
slides while you're logged in you click

206
00:07:24,720 --> 00:07:26,240
on this link right so if you double get

207
00:07:26,240 --> 00:07:28,000
this it won't work you have to click

208
00:07:28,000 --> 00:07:29,680
from the slides and then this will

209
00:07:29,680 --> 00:07:31,199
download just fine right so just

210
00:07:31,199 --> 00:07:33,039
remember all these training service

211
00:07:33,039 --> 00:07:35,039
security.com just click from the slides

212
00:07:35,039 --> 00:07:36,560
so that this works

213
00:07:36,560 --> 00:07:39,360
okay so first uh since we're going to do

214
00:07:39,360 --> 00:07:41,440
a data exfiltration first we need to

215
00:07:41,440 --> 00:07:43,199
create some data files right so you go

216
00:07:43,199 --> 00:07:46,639
to securely storage share preferences

217
00:07:46,639 --> 00:07:49,120
uh part one and then here we are like my

218
00:07:49,120 --> 00:07:51,120
secret user my secret password we hit

219
00:07:51,120 --> 00:07:52,080
save

220
00:07:52,080 --> 00:07:54,639
and then we need to do the same with uh

221
00:07:54,639 --> 00:07:57,280
sqlite database right so we go to sqlite

222
00:07:57,280 --> 00:07:59,280
maybe sqlite user basically password

223
00:07:59,280 --> 00:08:01,680
whatever and click on save

224
00:08:01,680 --> 00:08:05,039
and then we should be able to uh you

225
00:08:05,039 --> 00:08:07,120
know start playing with access so first

226
00:08:07,120 --> 00:08:09,199
we go to input validations input

227
00:08:09,199 --> 00:08:11,280
validations xss

228
00:08:11,280 --> 00:08:13,440
this will make more sense when i show

229
00:08:13,440 --> 00:08:15,759
the demo but as you go through this you

230
00:08:15,759 --> 00:08:17,280
it will make more sense as well in the

231
00:08:17,280 --> 00:08:19,919
demo so first we're going to with h1

232
00:08:19,919 --> 00:08:22,400
hello so this should show like a bigger

233
00:08:22,400 --> 00:08:25,039
hello if there's html in action so we

234
00:08:25,039 --> 00:08:26,960
try that we see that a bigger hello so

235
00:08:26,960 --> 00:08:28,960
this means that this is working now the

236
00:08:28,960 --> 00:08:31,680
next step is to say okay we have html

237
00:08:31,680 --> 00:08:33,919
instruction but do we also have xss

238
00:08:33,919 --> 00:08:36,159
right so we can try image source section

239
00:08:36,159 --> 00:08:39,039
or alert one script dollar one and so on

240
00:08:39,039 --> 00:08:41,519
and we get the alert one then this means

241
00:08:41,519 --> 00:08:44,240
that we have access as well right so now

242
00:08:44,240 --> 00:08:46,399
the next question is what is the

243
00:08:46,399 --> 00:08:49,120
security contact in which this exercise

244
00:08:49,120 --> 00:08:50,640
is running right so

245
00:08:50,640 --> 00:08:52,800
the answer to that is something people

246
00:08:52,800 --> 00:08:54,800
know with alert location

247
00:08:54,800 --> 00:08:57,360
if we do a location

248
00:08:57,360 --> 00:08:59,040
how do you play this it doesn't matter

249
00:08:59,040 --> 00:09:00,959
if you use internal or external storage

250
00:09:00,959 --> 00:09:03,680
that's slightly different attack vectors

251
00:09:03,680 --> 00:09:05,200
and then here you can see that we have a

252
00:09:05,200 --> 00:09:07,200
file url right so a file url is very

253
00:09:07,200 --> 00:09:09,440
interesting because it means there's no

254
00:09:09,440 --> 00:09:11,519
same origin policy a file url is going

255
00:09:11,519 --> 00:09:14,000
to be able to read local files and send

256
00:09:14,000 --> 00:09:15,519
them to an attacker

257
00:09:15,519 --> 00:09:16,640
right

258
00:09:16,640 --> 00:09:17,920
this can be

259
00:09:17,920 --> 00:09:20,080
locked down with webview preferences and

260
00:09:20,080 --> 00:09:22,160
so on but in principle if you have a

261
00:09:22,160 --> 00:09:26,000
file url your lack for exfiltrating

262
00:09:26,000 --> 00:09:29,279
files from the phone is much much higher

263
00:09:29,279 --> 00:09:30,160
so

264
00:09:30,160 --> 00:09:32,320
in this vulnerable application that we

265
00:09:32,320 --> 00:09:34,080
modified we have

266
00:09:34,080 --> 00:09:36,080
two examples right because you could

267
00:09:36,080 --> 00:09:38,320
have two possibilities one possibility

268
00:09:38,320 --> 00:09:40,640
is that the affected file is on the

269
00:09:40,640 --> 00:09:43,040
internal storage so this data data

270
00:09:43,040 --> 00:09:44,480
directory is something that other

271
00:09:44,480 --> 00:09:46,880
android apps cannot access and then the

272
00:09:46,880 --> 00:09:48,800
other possibility is that it is on the

273
00:09:48,800 --> 00:09:52,000
external storage right on the sd card so

274
00:09:52,000 --> 00:09:54,160
if it is on the sd card then this is

275
00:09:54,160 --> 00:09:56,240
more risky because

276
00:09:56,240 --> 00:09:58,080
any other application on the same phone

277
00:09:58,080 --> 00:10:00,880
can right there so you have like access

278
00:10:00,880 --> 00:10:03,680
by by definition basically right even a

279
00:10:03,680 --> 00:10:05,600
physical attacker could extract the sd

280
00:10:05,600 --> 00:10:06,399
card

281
00:10:06,399 --> 00:10:09,279
modify the html file and then

282
00:10:09,279 --> 00:10:11,600
gain xss on

283
00:10:11,600 --> 00:10:13,920
the phone on the application that way

284
00:10:13,920 --> 00:10:16,000
that way right

285
00:10:16,000 --> 00:10:18,640
then since we're doing data x filtration

286
00:10:18,640 --> 00:10:21,440
with xss we need to figure out uh what

287
00:10:21,440 --> 00:10:23,440
is the location on the file system of

288
00:10:23,440 --> 00:10:25,839
the file that we want to fill

289
00:10:25,839 --> 00:10:26,640
so

290
00:10:26,640 --> 00:10:28,720
one way to do that could be to do adb

291
00:10:28,720 --> 00:10:31,360
shell and then ucd into

292
00:10:31,360 --> 00:10:34,880
the directory of the target application

293
00:10:34,880 --> 00:10:36,399
you run the find command for example

294
00:10:36,399 --> 00:10:37,920
that will show you all the files and in

295
00:10:37,920 --> 00:10:40,399
here we can see shared preferences users

296
00:10:40,399 --> 00:10:43,600
xml and databases a god right so

297
00:10:43,600 --> 00:10:46,320
with that we can do like um

298
00:10:46,320 --> 00:10:48,880
script then new xml http request and

299
00:10:48,880 --> 00:10:52,000
then get the location of these files and

300
00:10:52,000 --> 00:10:54,399
then if this works we should be able to

301
00:10:54,399 --> 00:10:57,360
get an alert that renders the contents

302
00:10:57,360 --> 00:10:58,959
of this file right so we should be able

303
00:10:58,959 --> 00:11:02,240
to something like this when we tried it

304
00:11:02,240 --> 00:11:03,279
um

305
00:11:03,279 --> 00:11:06,560
and then another possibility is to steal

306
00:11:06,560 --> 00:11:08,640
system and third-party files right so we

307
00:11:08,640 --> 00:11:10,399
can use for example the

308
00:11:10,399 --> 00:11:12,640
configuration file from the phone or

309
00:11:12,640 --> 00:11:15,120
even libraries from other applications

310
00:11:15,120 --> 00:11:17,519
as long as the permissions allow any

311
00:11:17,519 --> 00:11:19,920
application of the pho on the phone to

312
00:11:19,920 --> 00:11:21,440
read them right so we need to know the

313
00:11:21,440 --> 00:11:22,959
full location

314
00:11:22,959 --> 00:11:25,200
of the file that we want to read with

315
00:11:25,200 --> 00:11:28,480
xss but otherwise as long as that the

316
00:11:28,480 --> 00:11:30,640
application has permissions to read it

317
00:11:30,640 --> 00:11:32,640
we should be able to build it and fill

318
00:11:32,640 --> 00:11:34,959
right so this is the configuration file

319
00:11:34,959 --> 00:11:37,839
and it is the library from the other app

320
00:11:37,839 --> 00:11:40,640
right so we can do all that

321
00:11:40,640 --> 00:11:43,120
um so yeah i explained all that but

322
00:11:43,120 --> 00:11:44,880
first the methodology-wise we're looking

323
00:11:44,880 --> 00:11:46,800
to answer these questions so

324
00:11:46,800 --> 00:11:48,480
yeah do we get the alert one this means

325
00:11:48,480 --> 00:11:51,040
we have xss other location shows us the

326
00:11:51,040 --> 00:11:53,279
context so it's a file url so more

327
00:11:53,279 --> 00:11:54,639
privileged

328
00:11:54,639 --> 00:11:58,000
and then we have here like the the other

329
00:11:58,000 --> 00:11:59,600
payloads to read the local file thread

330
00:11:59,600 --> 00:12:03,440
users xml the sqlite database and so on

331
00:12:03,440 --> 00:12:05,120
it all works because all these things

332
00:12:05,120 --> 00:12:07,920
secure settings are set uh now by

333
00:12:07,920 --> 00:12:10,240
default this does no longer work on

334
00:12:10,240 --> 00:12:11,760
android believe it or not this was the

335
00:12:11,760 --> 00:12:12,959
default

336
00:12:12,959 --> 00:12:16,880
until android for something

337
00:12:16,880 --> 00:12:19,279
nowadays the developer kind of has to

338
00:12:19,279 --> 00:12:21,440
shoot themselves in the foot with this

339
00:12:21,440 --> 00:12:23,920
so they have to like enable all these

340
00:12:23,920 --> 00:12:26,959
things but otherwise this attack remains

341
00:12:26,959 --> 00:12:28,560
possible it's just

342
00:12:28,560 --> 00:12:31,279
less common nowadays because it's not

343
00:12:31,279 --> 00:12:33,040
the default right

344
00:12:33,040 --> 00:12:34,480
and then the other problem is that we

345
00:12:34,480 --> 00:12:36,959
have a file urls in there

346
00:12:36,959 --> 00:12:38,720
let's do a

347
00:12:38,720 --> 00:12:40,399
demo about this

348
00:12:40,399 --> 00:12:43,360
let me see if i'm sharing

349
00:12:43,360 --> 00:12:46,480
my entire screen

350
00:12:46,480 --> 00:12:50,480
okay i'll share my screen which i should

351
00:12:50,480 --> 00:12:53,920
okay so let's do the first demo exercise

352
00:12:53,920 --> 00:12:56,959
and data filtration on android

353
00:12:56,959 --> 00:12:58,240
so

354
00:12:58,240 --> 00:13:00,720
uh what we're doing here is we're trying

355
00:13:00,720 --> 00:13:01,680
uh

356
00:13:01,680 --> 00:13:02,370
to read

357
00:13:02,370 --> 00:13:03,600
[Music]

358
00:13:03,600 --> 00:13:05,360
the different files right

359
00:13:05,360 --> 00:13:07,839
so this is reading the secret password

360
00:13:07,839 --> 00:13:10,399
this is reading the sqlite

361
00:13:10,399 --> 00:13:11,839
file as well

362
00:13:11,839 --> 00:13:14,480
right so we can uh basically try the

363
00:13:14,480 --> 00:13:16,399
payloads there

364
00:13:16,399 --> 00:13:17,680
and

365
00:13:17,680 --> 00:13:19,440
undo that right so we basically just

366
00:13:19,440 --> 00:13:22,880
copy pasting the payloads from uh

367
00:13:22,880 --> 00:13:25,440
from our website in there you also have

368
00:13:25,440 --> 00:13:27,360
like a website with all these payloads

369
00:13:27,360 --> 00:13:29,200
from where you can paste them in the

370
00:13:29,200 --> 00:13:31,360
slides right so but you don't have like

371
00:13:31,360 --> 00:13:34,480
to type the whole thing and so on okay

372
00:13:34,480 --> 00:13:36,079
so that's this demo

373
00:13:36,079 --> 00:13:38,000
and let's continue because we have a lot

374
00:13:38,000 --> 00:13:39,279
more to go

375
00:13:39,279 --> 00:13:43,040
so now let's do the same on ios right so

376
00:13:43,040 --> 00:13:46,320
ios is basically

377
00:13:46,320 --> 00:13:48,079
you know the tag is kind of similar we

378
00:13:48,079 --> 00:13:49,760
have we will use them vulnerable in

379
00:13:49,760 --> 00:13:51,760
secure version two so you go to webview

380
00:13:51,760 --> 00:13:54,639
issues start calling here on what's your

381
00:13:54,639 --> 00:13:56,800
name we will be trying the payload so

382
00:13:56,800 --> 00:14:00,320
very similar methodology hello one with

383
00:14:00,320 --> 00:14:02,800
hello with h1 tags it's going to show up

384
00:14:02,800 --> 00:14:04,160
here hello

385
00:14:04,160 --> 00:14:06,079
and then we can try alert one other

386
00:14:06,079 --> 00:14:09,360
location and then try to read some local

387
00:14:09,360 --> 00:14:12,160
file like for example the you know

388
00:14:12,160 --> 00:14:14,720
the contacts or the data usage or stuff

389
00:14:14,720 --> 00:14:17,600
like this from like known locations on

390
00:14:17,600 --> 00:14:19,519
ios right

391
00:14:19,519 --> 00:14:21,519
their script otherwise looks the same

392
00:14:21,519 --> 00:14:24,399
what's going to change is the path

393
00:14:24,399 --> 00:14:26,160
and this is more or less how this looks

394
00:14:26,160 --> 00:14:27,600
right so this is the alert one this is

395
00:14:27,600 --> 00:14:29,519
the other location in this case instead

396
00:14:29,519 --> 00:14:31,680
of a file url we have an apple web data

397
00:14:31,680 --> 00:14:35,360
url which means basically that we have

398
00:14:35,360 --> 00:14:36,480
you know

399
00:14:36,480 --> 00:14:39,760
file privileges it's kind of the same as

400
00:14:39,760 --> 00:14:42,480
as an android the file url in ios you

401
00:14:42,480 --> 00:14:44,480
could also have a file url

402
00:14:44,480 --> 00:14:47,120
but both file or apple web data mean

403
00:14:47,120 --> 00:14:49,440
kind of the same thing like danger but

404
00:14:49,440 --> 00:14:51,760
you should be able to read local files

405
00:14:51,760 --> 00:14:55,199
especially if the application uses

406
00:14:55,199 --> 00:14:58,000
ui webviews as we will see and this

407
00:14:58,000 --> 00:15:00,160
proves that we can read sql lite

408
00:15:00,160 --> 00:15:01,839
databases from

409
00:15:01,839 --> 00:15:03,760
the exercise as well

410
00:15:03,760 --> 00:15:06,320
methodology white same questions can we

411
00:15:06,320 --> 00:15:08,720
run xss or if we get the other one yes

412
00:15:08,720 --> 00:15:10,560
the other location if we get apple with

413
00:15:10,560 --> 00:15:13,760
data or file that's exciting and then

414
00:15:13,760 --> 00:15:16,959
youtube cellular users and other places

415
00:15:16,959 --> 00:15:19,360
on the phone known locations on ios that

416
00:15:19,360 --> 00:15:20,959
we can try to create

417
00:15:20,959 --> 00:15:23,120
this is the vulnerable code so this is a

418
00:15:23,120 --> 00:15:25,040
string concatenation in swift which is

419
00:15:25,040 --> 00:15:27,040
kind of interesting because here it is

420
00:15:27,040 --> 00:15:29,519
not breaking out of the

421
00:15:29,519 --> 00:15:31,360
of the quotes it's like a backslash so

422
00:15:31,360 --> 00:15:34,399
this can be a little bit weird

423
00:15:34,399 --> 00:15:36,959
for those unfamiliar with swift

424
00:15:36,959 --> 00:15:39,440
and then the problem here is that this

425
00:15:39,440 --> 00:15:42,079
is using a ui webview which is

426
00:15:42,079 --> 00:15:45,279
vulnerable by default to this attack and

427
00:15:45,279 --> 00:15:47,839
the base url is empty so when the base

428
00:15:47,839 --> 00:15:52,079
url is empty the ui webview defaults to

429
00:15:52,079 --> 00:15:54,560
file permissions or apple web data

430
00:15:54,560 --> 00:15:56,720
right so that is the problem because it

431
00:15:56,720 --> 00:15:59,680
is apple web data or a kind of a file

432
00:15:59,680 --> 00:16:00,880
url

433
00:16:00,880 --> 00:16:02,880
then this is what is allowing us with

434
00:16:02,880 --> 00:16:05,440
the xss to x field paid

435
00:16:05,440 --> 00:16:08,800
local files right so this issue requires

436
00:16:08,800 --> 00:16:10,880
webkit allow universal access from file

437
00:16:10,880 --> 00:16:12,800
urls and webkit allow file access from

438
00:16:12,800 --> 00:16:14,399
file urls

439
00:16:14,399 --> 00:16:16,320
which both of which are turned on by

440
00:16:16,320 --> 00:16:18,399
default on ui web views

441
00:16:18,399 --> 00:16:20,720
and disabled by default on wkw views

442
00:16:20,720 --> 00:16:23,120
right so apple now recommends to uwk

443
00:16:23,120 --> 00:16:26,160
webviews because of this but until ios

444
00:16:26,160 --> 00:16:28,480
13 which is relatively recent like

445
00:16:28,480 --> 00:16:30,079
couple of years ago

446
00:16:30,079 --> 00:16:33,360
um ui web views were kind of you know

447
00:16:33,360 --> 00:16:35,839
common and now i think that they are uh

448
00:16:35,839 --> 00:16:37,839
deprecated but you can still use them

449
00:16:37,839 --> 00:16:39,120
right so

450
00:16:39,120 --> 00:16:41,040
they are not like completely eliminated

451
00:16:41,040 --> 00:16:43,680
so many old ios applications

452
00:16:43,680 --> 00:16:46,720
will still be uh vulnerable uh to this

453
00:16:46,720 --> 00:16:48,160
right

454
00:16:48,160 --> 00:16:51,199
so let's do a demo about this

455
00:16:51,199 --> 00:16:54,399
uh so this is the ios experience with

456
00:16:54,399 --> 00:16:56,160
data filtration

457
00:16:56,160 --> 00:16:58,079
so we're just copying the different

458
00:16:58,079 --> 00:17:01,519
payloads so this is the script alert one

459
00:17:01,519 --> 00:17:05,039
you get the script r1 right and now we

460
00:17:05,039 --> 00:17:07,760
can try svg on load alert location just

461
00:17:07,760 --> 00:17:10,400
to see what is the security context in

462
00:17:10,400 --> 00:17:11,280
which

463
00:17:11,280 --> 00:17:13,280
this is being rendered

464
00:17:13,280 --> 00:17:14,480
um

465
00:17:14,480 --> 00:17:16,400
and we can see that this is the apple

466
00:17:16,400 --> 00:17:17,919
web data context which is more

467
00:17:17,919 --> 00:17:20,319
privileged no same origin policy ability

468
00:17:20,319 --> 00:17:22,640
to read local files right

469
00:17:22,640 --> 00:17:24,400
for our purposes

470
00:17:24,400 --> 00:17:27,439
um and then after that we can try to to

471
00:17:27,439 --> 00:17:32,320
read a local file so this is trying

472
00:17:33,120 --> 00:17:35,760
trying that

473
00:17:43,120 --> 00:17:44,640
and you can see that we can read the

474
00:17:44,640 --> 00:17:47,520
sqlite databases from the phone and so

475
00:17:47,520 --> 00:17:48,320
on

476
00:17:48,320 --> 00:17:50,799
as well right so

477
00:17:50,799 --> 00:17:53,039
okay so that's enough

478
00:17:53,039 --> 00:17:56,160
um so let's continue right so

479
00:17:56,160 --> 00:18:00,240
um the problems with the sd card are so

480
00:18:00,240 --> 00:18:02,160
the sd card is kind of the wild west in

481
00:18:02,160 --> 00:18:04,000
android right because many apps can read

482
00:18:04,000 --> 00:18:05,760
on right here

483
00:18:05,760 --> 00:18:08,720
it can be extracted without unlocking

484
00:18:08,720 --> 00:18:10,960
the phone there's no encryption

485
00:18:10,960 --> 00:18:12,400
so

486
00:18:12,400 --> 00:18:14,559
you know lots of things can happen right

487
00:18:14,559 --> 00:18:16,160
so if you have a malicious application

488
00:18:16,160 --> 00:18:18,400
installed on the phone then many apps

489
00:18:18,400 --> 00:18:20,240
can read on right there so that's bad

490
00:18:20,240 --> 00:18:21,760
because you know

491
00:18:21,760 --> 00:18:23,600
you can like write some html that then

492
00:18:23,600 --> 00:18:25,039
another application loads and then you

493
00:18:25,039 --> 00:18:27,039
have xss and things like this

494
00:18:27,039 --> 00:18:28,640
it can be extracted without unlocking

495
00:18:28,640 --> 00:18:30,240
the phone so even a regular thief kind

496
00:18:30,240 --> 00:18:33,200
of like extract the sd card and

497
00:18:33,200 --> 00:18:35,280
whatever it's on the card right so this

498
00:18:35,280 --> 00:18:37,440
is like no security you don't even need

499
00:18:37,440 --> 00:18:38,160
to

500
00:18:38,160 --> 00:18:40,559
unlock the phone or anything and there's

501
00:18:40,559 --> 00:18:43,039
also uh no encryption right so by

502
00:18:43,039 --> 00:18:45,440
default so this is kind of a problem

503
00:18:45,440 --> 00:18:48,000
with the sd card on android

504
00:18:48,000 --> 00:18:49,440
um

505
00:18:49,440 --> 00:18:51,919
so let's get that sorry right so top

506
00:18:51,919 --> 00:18:54,000
example of saving temperature from the

507
00:18:54,000 --> 00:18:55,280
sd card

508
00:18:55,280 --> 00:18:58,240
this was a whittle blower application

509
00:18:58,240 --> 00:18:59,120
so

510
00:18:59,120 --> 00:19:01,280
in a country where basically the

511
00:19:01,280 --> 00:19:04,000
government is against the population

512
00:19:04,000 --> 00:19:05,280
and then

513
00:19:05,280 --> 00:19:06,880
some human rights activists developed

514
00:19:06,880 --> 00:19:08,799
this app that

515
00:19:08,799 --> 00:19:11,440
to help you know citizens to report

516
00:19:11,440 --> 00:19:14,720
human rights violations to some ngo

517
00:19:14,720 --> 00:19:16,720
however uh

518
00:19:16,720 --> 00:19:18,559
the implementation was not so good

519
00:19:18,559 --> 00:19:20,559
because the human rights violation

520
00:19:20,559 --> 00:19:22,480
reports were being saved on the sd card

521
00:19:22,480 --> 00:19:24,640
so in a country like this what could

522
00:19:24,640 --> 00:19:26,880
happen is that a police officer

523
00:19:26,880 --> 00:19:29,440
takes your phone extracts the sd card

524
00:19:29,440 --> 00:19:31,600
plus it into a computer then they notice

525
00:19:31,600 --> 00:19:33,200
you are reporting on these human right

526
00:19:33,200 --> 00:19:35,120
violations and then you go to prison get

527
00:19:35,120 --> 00:19:38,000
killed torture or whatever right so so

528
00:19:38,000 --> 00:19:40,400
this could be uh uh you know it's a

529
00:19:40,400 --> 00:19:42,080
security vulnerability that could turn

530
00:19:42,080 --> 00:19:43,919
into nasty things in the in the real

531
00:19:43,919 --> 00:19:46,000
world right so this was all the

532
00:19:46,000 --> 00:19:48,080
data that we're gathering

533
00:19:48,080 --> 00:19:50,400
with that and now this is another

534
00:19:50,400 --> 00:19:53,440
scenario with files so in principle

535
00:19:53,440 --> 00:19:56,559
looks like not harmful right loaded from

536
00:19:56,559 --> 00:19:58,480
the sd card so

537
00:19:58,480 --> 00:20:01,360
this is a loading adapter from the sd

538
00:20:01,360 --> 00:20:04,080
card then this is stored in a variable

539
00:20:04,080 --> 00:20:06,000
and then the variable is concatenated

540
00:20:06,000 --> 00:20:07,679
into html

541
00:20:07,679 --> 00:20:10,559
resulting in exercise right so you can

542
00:20:10,559 --> 00:20:12,000
hack vector

543
00:20:12,000 --> 00:20:14,480
which you can use uh in a browser this

544
00:20:14,480 --> 00:20:16,880
is by gareth hayes a friend of mine he

545
00:20:16,880 --> 00:20:18,640
works for bird now so there's also a

546
00:20:18,640 --> 00:20:20,400
burp extension for it

547
00:20:20,400 --> 00:20:21,360
um

548
00:20:21,360 --> 00:20:23,440
so this has like a lot of encoding and

549
00:20:23,440 --> 00:20:26,480
decoding tools so it's very handy

550
00:20:26,480 --> 00:20:28,320
so you can when you have trouble with

551
00:20:28,320 --> 00:20:30,320
like quotes in single quotes and the

552
00:20:30,320 --> 00:20:32,480
code is you know

553
00:20:32,480 --> 00:20:34,720
not really working you can try stuff

554
00:20:34,720 --> 00:20:36,159
like this right so you can evolve from

555
00:20:36,159 --> 00:20:37,600
chart code

556
00:20:37,600 --> 00:20:40,320
of the payload right so a new xml http

557
00:20:40,320 --> 00:20:42,799
request and then we read some database

558
00:20:42,799 --> 00:20:44,480
from the application

559
00:20:44,480 --> 00:20:46,640
and then we encode all these with eval

560
00:20:46,640 --> 00:20:49,280
from charcoal so this results in

561
00:20:49,280 --> 00:20:51,360
script eval stream from charcoal and you

562
00:20:51,360 --> 00:20:52,960
can see there's no single all double

563
00:20:52,960 --> 00:20:55,679
quotes here so then this allows the

564
00:20:55,679 --> 00:20:58,799
payload to work against the application

565
00:20:58,799 --> 00:21:03,760
so this was the alert at the time um

566
00:21:03,760 --> 00:21:06,880
then uh let's continue now other types

567
00:21:06,880 --> 00:21:09,120
of attacks are looking attacks

568
00:21:09,120 --> 00:21:11,120
so one possibility is that you show one

569
00:21:11,120 --> 00:21:13,520
url but then when the user clicks on it

570
00:21:13,520 --> 00:21:15,919
they really go to another url right so

571
00:21:15,919 --> 00:21:17,679
this can be interesting to obfuscate

572
00:21:17,679 --> 00:21:19,280
some effects

573
00:21:19,280 --> 00:21:21,440
and you can achieve this with right to

574
00:21:21,440 --> 00:21:22,799
left and left to right character

575
00:21:22,799 --> 00:21:24,640
sometimes so for example you can send a

576
00:21:24,640 --> 00:21:27,440
link with these characters here and then

577
00:21:27,440 --> 00:21:29,600
mock.evil.org so the victim is going to

578
00:21:29,600 --> 00:21:31,360
see grow.live.com

579
00:21:31,360 --> 00:21:32,880
but then when they click on this they

580
00:21:32,880 --> 00:21:34,799
really go to mog.they build.org rest of

581
00:21:34,799 --> 00:21:36,559
their reverse basically

582
00:21:36,559 --> 00:21:37,360
so

583
00:21:37,360 --> 00:21:39,360
you can use try to use this against

584
00:21:39,360 --> 00:21:42,000
email apps chat applications and stuff

585
00:21:42,000 --> 00:21:44,159
like this and this is like some report

586
00:21:44,159 --> 00:21:46,559
of this being used in the world so it's

587
00:21:46,559 --> 00:21:49,039
an interesting attack vector

588
00:21:49,039 --> 00:21:50,960
now something most people don't think

589
00:21:50,960 --> 00:21:52,480
about when they test the mobile

590
00:21:52,480 --> 00:21:54,400
application is that sometimes mobile

591
00:21:54,400 --> 00:21:57,280
applications implement local servers on

592
00:21:57,280 --> 00:21:58,880
the phone right so

593
00:21:58,880 --> 00:22:00,640
you should check with netstat like what

594
00:22:00,640 --> 00:22:03,200
are the services listening before you

595
00:22:03,200 --> 00:22:05,679
run the app then what are the services

596
00:22:05,679 --> 00:22:07,760
afterwards and then do a div

597
00:22:07,760 --> 00:22:09,840
to try to see like if the application is

598
00:22:09,840 --> 00:22:11,200
opening something

599
00:22:11,200 --> 00:22:13,039
if you're doing things black box for

600
00:22:13,039 --> 00:22:14,320
example right

601
00:22:14,320 --> 00:22:16,799
in this case it was a cordova ios

602
00:22:16,799 --> 00:22:19,200
application it used a plugin that was

603
00:22:19,200 --> 00:22:21,440
running a local server

604
00:22:21,440 --> 00:22:23,200
and this local tool server was

605
00:22:23,200 --> 00:22:25,120
vulnerable to past traversal attacks and

606
00:22:25,120 --> 00:22:27,440
did not require authentication so a

607
00:22:27,440 --> 00:22:30,480
malicious application on the same device

608
00:22:30,480 --> 00:22:32,320
would be able to

609
00:22:32,320 --> 00:22:34,799
you know like use a the path traversal

610
00:22:34,799 --> 00:22:37,039
to read like arbitrary files from the

611
00:22:37,039 --> 00:22:40,159
phone with the security privileges of

612
00:22:40,159 --> 00:22:42,400
the target application right so you can

613
00:22:42,400 --> 00:22:43,600
see this

614
00:22:43,600 --> 00:22:46,480
local host and so on right so but just

615
00:22:46,480 --> 00:22:48,159
by knowing that the port and then you

616
00:22:48,159 --> 00:22:50,480
can just do this right so these are some

617
00:22:50,480 --> 00:22:51,679
examples

618
00:22:51,679 --> 00:22:53,679
of um

619
00:22:53,679 --> 00:22:55,679
of what you could do with this uh with

620
00:22:55,679 --> 00:22:58,080
this issue so it was an interesting bug

621
00:22:58,080 --> 00:22:58,880
right

622
00:22:58,880 --> 00:23:01,200
so you could like weaponize this and

623
00:23:01,200 --> 00:23:03,440
dump all the files like this

624
00:23:03,440 --> 00:23:04,240
right

625
00:23:04,240 --> 00:23:06,640
with that a quick question to the group

626
00:23:06,640 --> 00:23:08,880
do you believe crosstalk request for

627
00:23:08,880 --> 00:23:11,360
degree exists in mobile apps or you are

628
00:23:11,360 --> 00:23:13,200
probably all familiar with crosstalk

629
00:23:13,200 --> 00:23:14,320
forgery

630
00:23:14,320 --> 00:23:16,720
on the web world but does crosshair

631
00:23:16,720 --> 00:23:18,960
request forgery x50 mobile apps what do

632
00:23:18,960 --> 00:23:20,400
you think yes no

633
00:23:20,400 --> 00:23:23,120
any tickers

634
00:23:23,120 --> 00:23:24,559
yes

635
00:23:24,559 --> 00:23:26,880
so yes you are correct

636
00:23:26,880 --> 00:23:27,600
so

637
00:23:27,600 --> 00:23:28,880
um

638
00:23:28,880 --> 00:23:31,360
we can achieve chronic weight four three

639
00:23:31,360 --> 00:23:33,760
uh typically with deep links right so

640
00:23:33,760 --> 00:23:36,480
deep links are interesting because this

641
00:23:36,480 --> 00:23:38,720
is a very recurring pattern they are

642
00:23:38,720 --> 00:23:42,240
very common lots of application use

643
00:23:42,240 --> 00:23:44,159
deep links and there's a lot of black

644
00:23:44,159 --> 00:23:46,559
bounties awarded awarded for this right

645
00:23:46,559 --> 00:23:48,000
so

646
00:23:48,000 --> 00:23:49,520
so let's see some dibling attacks

647
00:23:49,520 --> 00:23:51,520
achieving user impersonation and deep

648
00:23:51,520 --> 00:23:53,919
link attacks to bypass authorization

649
00:23:53,919 --> 00:23:55,039
controls

650
00:23:55,039 --> 00:23:57,360
dblink is basically a uri that can be

651
00:23:57,360 --> 00:23:58,880
used to navigate to different parts of

652
00:23:58,880 --> 00:24:01,279
the application both android and ios

653
00:24:01,279 --> 00:24:02,559
have this

654
00:24:02,559 --> 00:24:04,559
and deep links can have but do not need

655
00:24:04,559 --> 00:24:07,440
to have custom schemes right so

656
00:24:07,440 --> 00:24:08,480
uh

657
00:24:08,480 --> 00:24:10,559
for example a deep link could look like

658
00:24:10,559 --> 00:24:14,559
uh social app columns home page or uh

659
00:24:14,559 --> 00:24:16,480
you know the same thing profile profile

660
00:24:16,480 --> 00:24:19,360
picture so it's basically a url and then

661
00:24:19,360 --> 00:24:21,279
when you open this url on the mobile

662
00:24:21,279 --> 00:24:22,880
phone is going to take you to a certain

663
00:24:22,880 --> 00:24:24,480
screen

664
00:24:24,480 --> 00:24:26,400
on the mobile application right so that

665
00:24:26,400 --> 00:24:28,320
is basically atm

666
00:24:28,320 --> 00:24:29,919
and then when you're doing when you're

667
00:24:29,919 --> 00:24:33,440
indeed on android

668
00:24:33,440 --> 00:24:35,039
what you can do

669
00:24:35,039 --> 00:24:36,800
is to look for

670
00:24:36,800 --> 00:24:38,000
[Music]

671
00:24:38,000 --> 00:24:40,559
browseable activities right so

672
00:24:40,559 --> 00:24:41,760
deep links

673
00:24:41,760 --> 00:24:44,320
do not necessarily require

674
00:24:44,320 --> 00:24:46,640
the activity to be browseable

675
00:24:46,640 --> 00:24:48,799
however if it is browsable then things

676
00:24:48,799 --> 00:24:50,320
are more interesting because it can be

677
00:24:50,320 --> 00:24:51,919
attacked from the browser as well right

678
00:24:51,919 --> 00:24:54,240
so browseable browser that's a quick way

679
00:24:54,240 --> 00:24:55,760
for you

680
00:24:55,760 --> 00:24:57,840
to remember this

681
00:24:57,840 --> 00:24:58,720
so

682
00:24:58,720 --> 00:25:00,799
one way in which this can happen is that

683
00:25:00,799 --> 00:25:03,120
you have an activity then you can notice

684
00:25:03,120 --> 00:25:05,120
that here there's no exported true

685
00:25:05,120 --> 00:25:06,240
anywhere

686
00:25:06,240 --> 00:25:09,360
um however the the activity is

687
00:25:09,360 --> 00:25:11,279
implicitly exported because it has an

688
00:25:11,279 --> 00:25:12,799
intent filter right so when you have an

689
00:25:12,799 --> 00:25:14,480
intent filter this means

690
00:25:14,480 --> 00:25:17,760
that any other application on the phone

691
00:25:17,760 --> 00:25:19,840
can attack this activity right so that's

692
00:25:19,840 --> 00:25:21,840
basically the idea

693
00:25:21,840 --> 00:25:22,880
and then

694
00:25:22,880 --> 00:25:24,960
here this is browseable so it can also

695
00:25:24,960 --> 00:25:26,640
be attacked from the browser not just

696
00:25:26,640 --> 00:25:29,120
malicious applications on the device and

697
00:25:29,120 --> 00:25:31,520
then this is the structure of the diplex

698
00:25:31,520 --> 00:25:34,159
so in this case we have a scheme some

699
00:25:34,159 --> 00:25:36,400
app a host get credits and then path

700
00:25:36,400 --> 00:25:38,559
prefix user right so this translates to

701
00:25:38,559 --> 00:25:40,320
some app column slash slash get credits

702
00:25:40,320 --> 00:25:43,120
user so that's the structure of the deep

703
00:25:43,120 --> 00:25:45,279
link right based on this now in some

704
00:25:45,279 --> 00:25:48,000
cases you won't have browsable but there

705
00:25:48,000 --> 00:25:50,000
will still be a deep link that other

706
00:25:50,000 --> 00:25:52,720
applications could attack and you might

707
00:25:52,720 --> 00:25:54,799
not have this and then the application

708
00:25:54,799 --> 00:25:57,760
does this through code right so it can

709
00:25:57,760 --> 00:26:00,559
be done either way so don't just rely on

710
00:26:00,559 --> 00:26:01,520
this

711
00:26:01,520 --> 00:26:03,120
this is just one way in which

712
00:26:03,120 --> 00:26:05,200
applications can do it there's

713
00:26:05,200 --> 00:26:06,159
you know

714
00:26:06,159 --> 00:26:08,559
always no replacement to to look at the

715
00:26:08,559 --> 00:26:10,320
source code as well of the activity

716
00:26:10,320 --> 00:26:12,400
itself and that could give you more

717
00:26:12,400 --> 00:26:15,600
hints also don't forget to look at the

718
00:26:15,600 --> 00:26:17,919
code of the activity that the activity

719
00:26:17,919 --> 00:26:19,600
that you're looking at inherits because

720
00:26:19,600 --> 00:26:20,559
sometimes

721
00:26:20,559 --> 00:26:23,600
the relevant code is is there right so

722
00:26:23,600 --> 00:26:26,159
also uh interesting

723
00:26:26,159 --> 00:26:27,360
okay

724
00:26:27,360 --> 00:26:30,159
so uh for this next demo we're going to

725
00:26:30,159 --> 00:26:33,279
use uh very periscope cursor request

726
00:26:33,279 --> 00:26:34,559
forgery

727
00:26:34,559 --> 00:26:37,279
this was a real vulnerability

728
00:26:37,279 --> 00:26:38,960
on a very popular

729
00:26:38,960 --> 00:26:40,720
android application

730
00:26:40,720 --> 00:26:42,400
so to download the vulnerable version

731
00:26:42,400 --> 00:26:44,240
you can get it here

732
00:26:44,240 --> 00:26:46,799
it's the direct link

733
00:26:46,799 --> 00:26:48,640
you need to kind of use the vulnerable

734
00:26:48,640 --> 00:26:50,559
version for this to work then you

735
00:26:50,559 --> 00:26:52,559
basically create an account

736
00:26:52,559 --> 00:26:54,720
login in one of these ways

737
00:26:54,720 --> 00:26:56,240
and then

738
00:26:56,240 --> 00:26:58,080
methodology wise you would first look at

739
00:26:58,080 --> 00:26:58,880
the

740
00:26:58,880 --> 00:27:00,720
the android manifest so first we have to

741
00:27:00,720 --> 00:27:03,360
decompile the apk one way in which you

742
00:27:03,360 --> 00:27:06,000
can achieve that is with apk tool okay

743
00:27:06,000 --> 00:27:08,480
tool d for decompile and then the apk so

744
00:27:08,480 --> 00:27:09,760
this is going to

745
00:27:09,760 --> 00:27:12,400
give us uh the apk and then we can look

746
00:27:12,400 --> 00:27:14,240
at the android manifest right so if you

747
00:27:14,240 --> 00:27:15,840
look at the android manifest we can see

748
00:27:15,840 --> 00:27:17,679
lots of intense filters browserable

749
00:27:17,679 --> 00:27:18,880
activities

750
00:27:18,880 --> 00:27:21,200
android host so all these things are

751
00:27:21,200 --> 00:27:23,360
giving us hints about the structure of

752
00:27:23,360 --> 00:27:25,120
the deep links

753
00:27:25,120 --> 00:27:26,960
and so on right and they exported

754
00:27:26,960 --> 00:27:28,159
activities

755
00:27:28,159 --> 00:27:31,120
so not browsable equals only attackable

756
00:27:31,120 --> 00:27:32,640
from malicious applications on the

757
00:27:32,640 --> 00:27:36,159
device unbrowseable means it's also

758
00:27:36,159 --> 00:27:37,919
attackable from websites right so

759
00:27:37,919 --> 00:27:39,840
browseable browser

760
00:27:39,840 --> 00:27:40,880
so

761
00:27:40,880 --> 00:27:43,200
quick reminder of that and then there's

762
00:27:43,200 --> 00:27:44,559
several

763
00:27:44,559 --> 00:27:48,640
ways in which we can do this right now

764
00:27:48,640 --> 00:27:50,880
one thing is to do the adb command right

765
00:27:50,880 --> 00:27:51,760
so

766
00:27:51,760 --> 00:27:53,600
we can launch the command with a deep

767
00:27:53,600 --> 00:27:55,919
link like this another option is with

768
00:27:55,919 --> 00:27:58,480
trousers so withdraw you can run the

769
00:27:58,480 --> 00:28:00,880
scanner so it has a scanner for

770
00:28:00,880 --> 00:28:02,799
browseable activities now you will

771
00:28:02,799 --> 00:28:04,640
notice this is not very comprehensive

772
00:28:04,640 --> 00:28:06,000
and it misses

773
00:28:06,000 --> 00:28:07,440
time activity

774
00:28:07,440 --> 00:28:09,600
however it is still an automated

775
00:28:09,600 --> 00:28:11,520
starting point right so you should

776
00:28:11,520 --> 00:28:15,679
use it just remember this is not all

777
00:28:15,679 --> 00:28:18,480
and then for the actual request for

778
00:28:18,480 --> 00:28:21,600
three uh we need to

779
00:28:21,600 --> 00:28:23,840
add uh the following to the dublin right

780
00:28:23,840 --> 00:28:25,360
so this is the

781
00:28:25,360 --> 00:28:28,080
vulnerable url is psp column slash last

782
00:28:28,080 --> 00:28:30,960
user then the id of the user and then

783
00:28:30,960 --> 00:28:33,279
the actual vulnerability is when we add

784
00:28:33,279 --> 00:28:35,600
the follow right so what happens is the

785
00:28:35,600 --> 00:28:38,880
application goes to the user but it also

786
00:28:38,880 --> 00:28:42,320
follows the user without user consent so

787
00:28:42,320 --> 00:28:44,159
a malicious application on the phone or

788
00:28:44,159 --> 00:28:45,840
a malicious website

789
00:28:45,840 --> 00:28:46,720
can

790
00:28:46,720 --> 00:28:48,880
send a deep link to the user

791
00:28:48,880 --> 00:28:51,520
that when opened by the app is going to

792
00:28:51,520 --> 00:28:52,559
follow

793
00:28:52,559 --> 00:28:55,919
any user that we specify here without

794
00:28:55,919 --> 00:28:57,520
any user interaction right so that is

795
00:28:57,520 --> 00:29:00,159
the crosstalk request forgery

796
00:29:00,159 --> 00:29:02,799
so you can do that with linkmaster right

797
00:29:02,799 --> 00:29:03,760
so you

798
00:29:03,760 --> 00:29:05,840
hear the follow go to uri and you can

799
00:29:05,840 --> 00:29:08,480
see that you're following the user

800
00:29:08,480 --> 00:29:10,480
you can do it with individual rights or

801
00:29:10,480 --> 00:29:12,640
adb shell and so on and then you have

802
00:29:12,640 --> 00:29:14,080
the follow there

803
00:29:14,080 --> 00:29:15,679
and then with drawstr this would be the

804
00:29:15,679 --> 00:29:17,520
equivalent right so run up activity

805
00:29:17,520 --> 00:29:19,679
start and then you send the deep link

806
00:29:19,679 --> 00:29:21,840
with the follow as well

807
00:29:21,840 --> 00:29:23,120
and since the

808
00:29:23,120 --> 00:29:26,000
principle you can also use this url here

809
00:29:26,000 --> 00:29:28,159
that has like the the payloads to

810
00:29:28,159 --> 00:29:30,000
demonstrate the attack from a browser so

811
00:29:30,000 --> 00:29:31,840
you open that from the android browser

812
00:29:31,840 --> 00:29:33,440
and then click on the

813
00:29:33,440 --> 00:29:35,440
periscope cross request forgery demo and

814
00:29:35,440 --> 00:29:37,200
that will also work right so you click

815
00:29:37,200 --> 00:29:38,320
on preschool

816
00:29:38,320 --> 00:29:40,480
forgery demo and you will notice

817
00:29:40,480 --> 00:29:43,200
this will change to uh following as well

818
00:29:43,200 --> 00:29:46,240
right so we are basically able to follow

819
00:29:46,240 --> 00:29:48,880
arbitrary users with this

820
00:29:48,880 --> 00:29:50,480
this is the html of the page so

821
00:29:50,480 --> 00:29:52,640
basically open user

822
00:29:52,640 --> 00:29:54,080
doesn't have the follow and then the

823
00:29:54,080 --> 00:29:56,480
cursor request forgery is when you add

824
00:29:56,480 --> 00:29:59,600
the slide follow at the end

825
00:29:59,600 --> 00:30:01,440
let's do a

826
00:30:01,440 --> 00:30:04,399
quick demo of this

827
00:30:06,799 --> 00:30:08,960
so basically we're trying first deep

828
00:30:08,960 --> 00:30:10,799
link tester

829
00:30:10,799 --> 00:30:14,240
we add in there the slash follow

830
00:30:14,240 --> 00:30:16,960
then go to uri and you can see we change

831
00:30:16,960 --> 00:30:18,559
to following

832
00:30:18,559 --> 00:30:21,279
now we have to unfollow

833
00:30:21,279 --> 00:30:24,080
and minimize the uh or click on

834
00:30:24,080 --> 00:30:25,360
something on the

835
00:30:25,360 --> 00:30:26,640
application

836
00:30:26,640 --> 00:30:29,120
so that we are no longer following the

837
00:30:29,120 --> 00:30:30,320
user

838
00:30:30,320 --> 00:30:31,360
and then

839
00:30:31,360 --> 00:30:34,399
we can try uh you know with adb shell

840
00:30:34,399 --> 00:30:37,440
right so we do adb shell

841
00:30:37,440 --> 00:30:39,440
android intent action view and then we

842
00:30:39,440 --> 00:30:41,600
pass the dibling with the follow

843
00:30:41,600 --> 00:30:45,120
and then when we open the

844
00:30:46,240 --> 00:30:48,000
we open the phone

845
00:30:48,000 --> 00:30:51,679
so this was demonstrated on a real phone

846
00:30:51,679 --> 00:30:53,919
uh this is because there were some

847
00:30:53,919 --> 00:30:56,640
invisible characters so

848
00:30:56,640 --> 00:30:58,080
um

849
00:30:58,080 --> 00:31:00,159
yeah so you can see that the change to

850
00:31:00,159 --> 00:31:02,000
following

851
00:31:02,000 --> 00:31:04,880
and then you can do the same with uh

852
00:31:04,880 --> 00:31:06,320
browser as well right so you first

853
00:31:06,320 --> 00:31:08,799
unfollow click on something else and

854
00:31:08,799 --> 00:31:11,760
then you can go to browser

855
00:31:11,760 --> 00:31:14,799
and uh

856
00:31:14,960 --> 00:31:16,480
and then you can see that this changed

857
00:31:16,480 --> 00:31:19,360
to to following as well right

858
00:31:19,360 --> 00:31:21,519
then from the website we're basically

859
00:31:21,519 --> 00:31:24,399
just opening um

860
00:31:24,399 --> 00:31:25,919
a website

861
00:31:25,919 --> 00:31:28,240
on the on android

862
00:31:28,240 --> 00:31:29,200
um

863
00:31:29,200 --> 00:31:31,120
so we are unfollowing then click on

864
00:31:31,120 --> 00:31:32,399
something else

865
00:31:32,399 --> 00:31:33,679
and then

866
00:31:33,679 --> 00:31:35,519
click on the periscope cursor request

867
00:31:35,519 --> 00:31:38,000
forge redem and you can see that this

868
00:31:38,000 --> 00:31:39,519
changed as well

869
00:31:39,519 --> 00:31:42,480
to follow right so that's

870
00:31:42,480 --> 00:31:45,360
i think you know

871
00:31:45,679 --> 00:31:46,960
of that

872
00:31:46,960 --> 00:31:47,919
um

873
00:31:47,919 --> 00:31:51,360
so so yeah so deep links are interesting

874
00:31:51,360 --> 00:31:52,880
right so

875
00:31:52,880 --> 00:31:54,559
now let's see deep link attacks to make

876
00:31:54,559 --> 00:31:56,559
phone calls right so for this we will

877
00:31:56,559 --> 00:31:59,600
use them vulnerable insecure version 2.

878
00:31:59,600 --> 00:32:02,159
you can get it from the open source

879
00:32:02,159 --> 00:32:03,600
website or you can get it from the

880
00:32:03,600 --> 00:32:06,320
training portal

881
00:32:06,480 --> 00:32:09,600
and in here you are looking for url url

882
00:32:09,600 --> 00:32:12,159
schemes right so you have

883
00:32:12,159 --> 00:32:14,000
url schemes done vulnerable insecure

884
00:32:14,000 --> 00:32:15,600
then voter and secure shift this is on

885
00:32:15,600 --> 00:32:18,080
the info please of the application so

886
00:32:18,080 --> 00:32:19,519
this is going to

887
00:32:19,519 --> 00:32:21,200
you know give us some hints about what

888
00:32:21,200 --> 00:32:23,440
the deep link structure is in this case

889
00:32:23,440 --> 00:32:26,159
we only know the url scheme itself but

890
00:32:26,159 --> 00:32:28,159
we need to look at the source code to

891
00:32:28,159 --> 00:32:29,919
see the rest right

892
00:32:29,919 --> 00:32:32,240
so another way instead of looking at the

893
00:32:32,240 --> 00:32:34,159
info plus if you have the source code is

894
00:32:34,159 --> 00:32:36,960
to click on the project from xcode go to

895
00:32:36,960 --> 00:32:39,279
info and then you scroll all the way

896
00:32:39,279 --> 00:32:41,919
down to url types and

897
00:32:41,919 --> 00:32:43,760
here the url

898
00:32:43,760 --> 00:32:45,840
schemes right so then for scalable and

899
00:32:45,840 --> 00:32:47,760
secure swift

900
00:32:47,760 --> 00:32:48,880
and then

901
00:32:48,880 --> 00:32:51,279
to look at what comes after the url

902
00:32:51,279 --> 00:32:52,799
scheme we need to look at the app

903
00:32:52,799 --> 00:32:54,159
delegate right so we have the

904
00:32:54,159 --> 00:32:55,760
appdelegate.m

905
00:32:55,760 --> 00:32:57,279
if the application is written in

906
00:32:57,279 --> 00:32:59,440
objective c if the application is

907
00:32:59,440 --> 00:33:01,360
written in swift it's going to be app

908
00:33:01,360 --> 00:33:04,159
delegate dot shrift right so

909
00:33:04,159 --> 00:33:06,880
just fine i update the shrift and then

910
00:33:06,880 --> 00:33:08,559
we can look at the source code and this

911
00:33:08,559 --> 00:33:11,279
is basically the problem right so

912
00:33:11,279 --> 00:33:13,600
the application source code has this so

913
00:33:13,600 --> 00:33:15,200
this is the function

914
00:33:15,200 --> 00:33:16,799
when the application is open this is the

915
00:33:16,799 --> 00:33:19,039
url that is passed to it

916
00:33:19,039 --> 00:33:21,039
the url is

917
00:33:21,039 --> 00:33:23,200
split into chunks so this is basically

918
00:33:23,200 --> 00:33:25,360
the equivalent if you are familiar with

919
00:33:25,360 --> 00:33:27,600
php of explode if you are familiar with

920
00:33:27,600 --> 00:33:31,360
python this is the equivalent of split

921
00:33:31,360 --> 00:33:32,640
and

922
00:33:32,640 --> 00:33:33,760
basically

923
00:33:33,760 --> 00:33:35,919
this is looking for

924
00:33:35,919 --> 00:33:38,960
the phone called number string

925
00:33:38,960 --> 00:33:41,120
on the url passed and then it's going to

926
00:33:41,120 --> 00:33:43,279
split the string into chunks so the url

927
00:33:43,279 --> 00:33:44,880
scheme is going to be

928
00:33:44,880 --> 00:33:47,360
to the left so this will be position 0

929
00:33:47,360 --> 00:33:49,440
of the array and then the number is

930
00:33:49,440 --> 00:33:51,200
going to be to the right of this so this

931
00:33:51,200 --> 00:33:52,399
will be position

932
00:33:52,399 --> 00:33:53,200
one

933
00:33:53,200 --> 00:33:55,679
right so then it's going to cast

934
00:33:55,679 --> 00:33:59,120
the number to integer and if this works

935
00:33:59,120 --> 00:34:01,120
then it will try to call this number

936
00:34:01,120 --> 00:34:03,120
right so that is basically

937
00:34:03,120 --> 00:34:04,559
the logic

938
00:34:04,559 --> 00:34:06,559
here

939
00:34:06,559 --> 00:34:09,040
so if you click on appdelegate.drift

940
00:34:09,040 --> 00:34:11,839
this is how it looks uh the same code

941
00:34:11,839 --> 00:34:14,159
from xcode so application this is the

942
00:34:14,159 --> 00:34:16,320
split url this is the cast we integer

943
00:34:16,320 --> 00:34:17,199
and then

944
00:34:17,199 --> 00:34:20,320
the phone call afterwards right so with

945
00:34:20,320 --> 00:34:22,399
this after looking at the first code we

946
00:34:22,399 --> 00:34:24,320
know the structure of the urls is like

947
00:34:24,320 --> 00:34:26,079
this so then we'll know which constraint

948
00:34:26,079 --> 00:34:28,079
phone call number and the number and

949
00:34:28,079 --> 00:34:30,560
then we'll secure up a phone call number

950
00:34:30,560 --> 00:34:32,480
and the number right so you can go to

951
00:34:32,480 --> 00:34:36,079
this url open it on your ios device and

952
00:34:36,079 --> 00:34:38,879
try these urls from there

953
00:34:38,879 --> 00:34:41,918
this is the simple html

954
00:34:41,918 --> 00:34:44,800
on that page for demonstration purposes

955
00:34:44,800 --> 00:34:46,800
and then when you click on this you will

956
00:34:46,800 --> 00:34:48,480
get a dialogue like opening up

957
00:34:48,480 --> 00:34:50,079
automotive version two and when you

958
00:34:50,079 --> 00:34:52,719
click on open it will show you uh you

959
00:34:52,719 --> 00:34:53,760
know

960
00:34:53,760 --> 00:34:56,560
that this that the call is being made

961
00:34:56,560 --> 00:34:59,119
right so let's do um

962
00:34:59,119 --> 00:35:01,280
a quick demo about this

963
00:35:01,280 --> 00:35:02,090
so this is the

964
00:35:02,090 --> 00:35:03,680
[Music]

965
00:35:03,680 --> 00:35:07,040
ios device we go to this

966
00:35:07,040 --> 00:35:09,760
url that i mentioned and then we can

967
00:35:09,760 --> 00:35:10,960
click on the

968
00:35:10,960 --> 00:35:12,560
links

969
00:35:12,560 --> 00:35:15,040
and then when you click on open

970
00:35:15,040 --> 00:35:17,920
this is will be open on the application

971
00:35:17,920 --> 00:35:19,440
and you can see that

972
00:35:19,440 --> 00:35:21,760
this work right and the same if we click

973
00:35:21,760 --> 00:35:23,040
on the other

974
00:35:23,040 --> 00:35:25,040
url handler we are going to get the same

975
00:35:25,040 --> 00:35:26,480
alert and

976
00:35:26,480 --> 00:35:27,359
you know

977
00:35:27,359 --> 00:35:29,440
we are basically getting the

978
00:35:29,440 --> 00:35:30,800
the call

979
00:35:30,800 --> 00:35:33,200
working right so

980
00:35:33,200 --> 00:35:34,160
uh

981
00:35:34,160 --> 00:35:36,400
now let's see other scenarios from the

982
00:35:36,400 --> 00:35:38,640
field right so for the wild

983
00:35:38,640 --> 00:35:41,599
so url

984
00:35:41,599 --> 00:35:43,599
what happens if you send a deep link to

985
00:35:43,599 --> 00:35:45,760
an application but the application is a

986
00:35:45,760 --> 00:35:48,560
browser right so a browser is supposed

987
00:35:48,560 --> 00:35:50,400
to open

988
00:35:50,400 --> 00:35:53,280
you know any url that you passed with so

989
00:35:53,280 --> 00:35:55,680
what could go wrong with that so in this

990
00:35:55,680 --> 00:35:57,599
case we had an application that had

991
00:35:57,599 --> 00:36:00,560
browsing functionality so it actually

992
00:36:00,560 --> 00:36:03,200
expects other apps to send urls to it

993
00:36:03,200 --> 00:36:05,520
and it opens those urls and shows them

994
00:36:05,520 --> 00:36:07,200
to the user

995
00:36:07,200 --> 00:36:09,280
so this was an implicitly exported

996
00:36:09,280 --> 00:36:12,320
activity with an intent filter here now

997
00:36:12,320 --> 00:36:14,480
you can notice here that there's no

998
00:36:14,480 --> 00:36:16,960
structure of the url or anything this

999
00:36:16,960 --> 00:36:19,599
was all done inside of the code so just

1000
00:36:19,599 --> 00:36:22,640
to mention what i said before that don't

1001
00:36:22,640 --> 00:36:24,400
rely on this for the structure of the

1002
00:36:24,400 --> 00:36:26,720
url this is one such example where the

1003
00:36:26,720 --> 00:36:28,800
structure of the url you have no hints

1004
00:36:28,800 --> 00:36:30,400
on the android manifest you have to look

1005
00:36:30,400 --> 00:36:32,400
at the code

1006
00:36:32,400 --> 00:36:33,280
so

1007
00:36:33,280 --> 00:36:35,359
this is basically what is doing is

1008
00:36:35,359 --> 00:36:37,280
looking for an intent extra called

1009
00:36:37,280 --> 00:36:40,079
search query then it assigns it into a

1010
00:36:40,079 --> 00:36:43,359
url and then it will try to

1011
00:36:43,359 --> 00:36:44,480
load it

1012
00:36:44,480 --> 00:36:45,839
um

1013
00:36:45,839 --> 00:36:48,480
so we can send a deep link that goes to

1014
00:36:48,480 --> 00:36:51,440
the sd card and steals databases because

1015
00:36:51,440 --> 00:36:53,839
the regular expression with which

1016
00:36:53,839 --> 00:36:55,920
this was being validated allowed file

1017
00:36:55,920 --> 00:36:58,480
url so you could have a malicious

1018
00:36:58,480 --> 00:37:00,960
application on the phone that writes an

1019
00:37:00,960 --> 00:37:04,560
html file to the sd card and then sends

1020
00:37:04,560 --> 00:37:07,280
a file url to this browser application

1021
00:37:07,280 --> 00:37:10,320
that is meant to open these urls and

1022
00:37:10,320 --> 00:37:12,960
then this is will navigate to the html

1023
00:37:12,960 --> 00:37:15,440
file on the sd card and from there you

1024
00:37:15,440 --> 00:37:18,480
can repeat local files data x filtration

1025
00:37:18,480 --> 00:37:20,480
and so on right so we are putting

1026
00:37:20,480 --> 00:37:22,240
together that link with the exercises

1027
00:37:22,240 --> 00:37:23,839
that we saw before

1028
00:37:23,839 --> 00:37:26,800
so this is the actual uh call from the

1029
00:37:26,800 --> 00:37:29,119
test vulnerable application the test the

1030
00:37:29,119 --> 00:37:30,800
attacker application

1031
00:37:30,800 --> 00:37:33,599
so this is the string url so for example

1032
00:37:33,599 --> 00:37:37,520
uh mount uh sdcardsteel.html

1033
00:37:37,520 --> 00:37:39,359
and then put the intent extra for the

1034
00:37:39,359 --> 00:37:42,480
query start the activity and this was

1035
00:37:42,480 --> 00:37:44,640
basically uh you know

1036
00:37:44,640 --> 00:37:46,720
getting the

1037
00:37:46,720 --> 00:37:49,920
application to open the still html and

1038
00:37:49,920 --> 00:37:52,640
from here we can read the the local file

1039
00:37:52,640 --> 00:37:54,640
threshold all the databases and then we

1040
00:37:54,640 --> 00:37:55,760
read the

1041
00:37:55,760 --> 00:37:59,040
the files and so on so

1042
00:37:59,040 --> 00:38:02,160
this was the alert at the time

1043
00:38:02,160 --> 00:38:04,000
now another scenario would be like a

1044
00:38:04,000 --> 00:38:05,760
browser application goes to an attacker

1045
00:38:05,760 --> 00:38:07,760
website that goes to a deep link

1046
00:38:07,760 --> 00:38:08,960
so

1047
00:38:08,960 --> 00:38:11,200
in this case this was the onion browser

1048
00:38:11,200 --> 00:38:12,960
so this is a public report so we can

1049
00:38:12,960 --> 00:38:14,560
save the application

1050
00:38:14,560 --> 00:38:16,960
and basically the earlier browser

1051
00:38:16,960 --> 00:38:18,960
if it is browsing to an attacker control

1052
00:38:18,960 --> 00:38:20,640
website the attacker control website

1053
00:38:20,640 --> 00:38:21,680
could have

1054
00:38:21,680 --> 00:38:23,920
html like it is like image source or in

1055
00:38:23,920 --> 00:38:25,839
browser for squid and then the

1056
00:38:25,839 --> 00:38:28,560
application would close right so without

1057
00:38:28,560 --> 00:38:30,160
user interaction

1058
00:38:30,160 --> 00:38:31,599
so

1059
00:38:31,599 --> 00:38:34,160
this is a very interesting attack where

1060
00:38:34,160 --> 00:38:36,480
from html that the application loads you

1061
00:38:36,480 --> 00:38:38,880
can mess with you know the functions of

1062
00:38:38,880 --> 00:38:40,720
the application using deep links right

1063
00:38:40,720 --> 00:38:43,040
so it's another interesting attack

1064
00:38:43,040 --> 00:38:44,240
vector

1065
00:38:44,240 --> 00:38:46,560
now another interesting thing

1066
00:38:46,560 --> 00:38:50,000
involved is to use a deep link to then

1067
00:38:50,000 --> 00:38:52,000
exploit the sql injection and then turn

1068
00:38:52,000 --> 00:38:54,880
this into remote code execution

1069
00:38:54,880 --> 00:38:57,440
so let's see this right so this was a

1070
00:38:57,440 --> 00:38:59,200
crm application with google

1071
00:38:59,200 --> 00:39:00,560
authentication

1072
00:39:00,560 --> 00:39:02,800
so when you open the application it

1073
00:39:02,800 --> 00:39:05,440
shows you a pop-up to login with google

1074
00:39:05,440 --> 00:39:06,720
right and then when you log in with

1075
00:39:06,720 --> 00:39:08,720
google the pop-up closes and then you

1076
00:39:08,720 --> 00:39:11,040
redirect it back to the app

1077
00:39:11,040 --> 00:39:13,200
and you you know you use the app as

1078
00:39:13,200 --> 00:39:16,160
normal however this was vulnerable to

1079
00:39:16,160 --> 00:39:18,480
sql injection and then we can turn the

1080
00:39:18,480 --> 00:39:20,400
sql injection into code execution so

1081
00:39:20,400 --> 00:39:22,400
let's break it down on the android

1082
00:39:22,400 --> 00:39:24,720
manifest we have a login webview

1083
00:39:24,720 --> 00:39:26,839
uh in this case we just have the android

1084
00:39:26,839 --> 00:39:29,760
scheme now this would be another case

1085
00:39:29,760 --> 00:39:31,359
where you actually had to look at the

1086
00:39:31,359 --> 00:39:33,599
source code to figure out the structure

1087
00:39:33,599 --> 00:39:36,000
of the deep link

1088
00:39:36,000 --> 00:39:39,200
and here we can see that

1089
00:39:39,200 --> 00:39:41,359
this is updating the credentials with

1090
00:39:41,359 --> 00:39:43,920
the token that arrives from google after

1091
00:39:43,920 --> 00:39:45,280
authenticating

1092
00:39:45,280 --> 00:39:46,400
so

1093
00:39:46,400 --> 00:39:48,640
there's absolutely no sanitization here

1094
00:39:48,640 --> 00:39:50,640
we have a string concatenation so we

1095
00:39:50,640 --> 00:39:52,880
have sql injection on a mobile

1096
00:39:52,880 --> 00:39:54,640
application right so what can we with

1097
00:39:54,640 --> 00:39:55,520
this

1098
00:39:55,520 --> 00:39:58,720
we can first create a bad bad binary as

1099
00:39:58,720 --> 00:40:00,400
a proof of concept so we can go for

1100
00:40:00,400 --> 00:40:03,040
example to data data just trust me so

1101
00:40:03,040 --> 00:40:06,560
just a random application on the phone

1102
00:40:06,560 --> 00:40:08,880
and then you just echo a lot of a's and

1103
00:40:08,880 --> 00:40:11,920
save it to a file called test.so

1104
00:40:11,920 --> 00:40:13,440
this is important because it's a library

1105
00:40:13,440 --> 00:40:14,800
that we will use

1106
00:40:14,800 --> 00:40:17,680
for to prove the code execution then we

1107
00:40:17,680 --> 00:40:19,200
give it writeable permission by

1108
00:40:19,200 --> 00:40:21,520
basically permissions for everybody

1109
00:40:21,520 --> 00:40:25,520
and then we can send an intent uh to the

1110
00:40:25,520 --> 00:40:27,440
vulnerable um

1111
00:40:27,440 --> 00:40:30,000
dibling activity with the data

1112
00:40:30,000 --> 00:40:31,520
exploiting the deep link right so this

1113
00:40:31,520 --> 00:40:33,280
is the vulnerable app this is the data

1114
00:40:33,280 --> 00:40:36,160
doing the where unload extension and so

1115
00:40:36,160 --> 00:40:39,839
on now this is with url encoding

1116
00:40:39,839 --> 00:40:42,800
i'll show it uh here without url

1117
00:40:42,800 --> 00:40:44,880
encoding basically unlocked you could

1118
00:40:44,880 --> 00:40:45,760
see

1119
00:40:45,760 --> 00:40:47,599
uh the the

1120
00:40:47,599 --> 00:40:48,960
you know the string after the

1121
00:40:48,960 --> 00:40:52,400
concatenation so you can see this uh uh

1122
00:40:52,400 --> 00:40:55,040
an android runtime exception

1123
00:40:55,040 --> 00:40:57,440
dl open failed right so it's trying to

1124
00:40:57,440 --> 00:41:00,079
load the test.so library

1125
00:41:00,079 --> 00:41:02,880
uh because it has bad elf magic right so

1126
00:41:02,880 --> 00:41:05,520
this means that the magic bytes in the

1127
00:41:05,520 --> 00:41:06,480
binary

1128
00:41:06,480 --> 00:41:09,599
are not good enough for uh you know they

1129
00:41:09,599 --> 00:41:10,880
are they are not good because it's

1130
00:41:10,880 --> 00:41:13,440
basically just uh you know a lot of ace

1131
00:41:13,440 --> 00:41:15,760
is not a valid library however it is

1132
00:41:15,760 --> 00:41:17,040
trying to run it right so this

1133
00:41:17,040 --> 00:41:19,760
demonstrates that we have a code

1134
00:41:19,760 --> 00:41:22,079
execution which is pretty cool right so

1135
00:41:22,079 --> 00:41:23,680
this was very

1136
00:41:23,680 --> 00:41:26,240
a very nice vulnerability

1137
00:41:26,240 --> 00:41:27,119
and then

1138
00:41:27,119 --> 00:41:29,680
uh another attack variant since the

1139
00:41:29,680 --> 00:41:32,160
activity is browseable as well is that

1140
00:41:32,160 --> 00:41:33,440
we can

1141
00:41:33,440 --> 00:41:34,560
deliver

1142
00:41:34,560 --> 00:41:37,599
the library with a page right so this is

1143
00:41:37,599 --> 00:41:40,000
the attacker.com and then some page like

1144
00:41:40,000 --> 00:41:41,440
a.php

1145
00:41:41,440 --> 00:41:43,599
basically just sends the file and then

1146
00:41:43,599 --> 00:41:44,880
we can

1147
00:41:44,880 --> 00:41:47,440
create another attacker page which is

1148
00:41:47,440 --> 00:41:48,880
really that is where

1149
00:41:48,880 --> 00:41:51,680
the user would navigate to that exploits

1150
00:41:51,680 --> 00:41:54,800
the sql injection here so it's doing the

1151
00:41:54,800 --> 00:41:57,440
where one equals select load extension

1152
00:41:57,440 --> 00:41:59,839
of the test.so file which is going to be

1153
00:41:59,839 --> 00:42:02,720
on the download directory uh on the

1154
00:42:02,720 --> 00:42:05,040
phone on the sd card

1155
00:42:05,040 --> 00:42:08,079
and then we are loading the iframe that

1156
00:42:08,079 --> 00:42:09,680
will just download the file

1157
00:42:09,680 --> 00:42:10,960
automatically

1158
00:42:10,960 --> 00:42:13,040
and we wait five seconds for the

1159
00:42:13,040 --> 00:42:15,280
download to complete and then we will

1160
00:42:15,280 --> 00:42:17,760
send uh you know we set the source

1161
00:42:17,760 --> 00:42:18,880
property

1162
00:42:18,880 --> 00:42:22,240
of the second iframe to uh you know the

1163
00:42:22,240 --> 00:42:24,720
deep link so that uh

1164
00:42:24,720 --> 00:42:27,280
we are basically exploiting the um

1165
00:42:27,280 --> 00:42:29,440
sql injection and gaining code execution

1166
00:42:29,440 --> 00:42:30,400
right so

1167
00:42:30,400 --> 00:42:32,079
very nice attack and of course we get

1168
00:42:32,079 --> 00:42:34,720
the same error message so has bad elf

1169
00:42:34,720 --> 00:42:37,119
magic because i'm trying to run it right

1170
00:42:37,119 --> 00:42:38,400
so uh

1171
00:42:38,400 --> 00:42:40,880
so yeah sql injection and code execution

1172
00:42:40,880 --> 00:42:42,240
on android

1173
00:42:42,240 --> 00:42:43,680
now

1174
00:42:43,680 --> 00:42:46,079
url validation

1175
00:42:46,079 --> 00:42:48,160
we're back to the online browser so in

1176
00:42:48,160 --> 00:42:49,280
this case

1177
00:42:49,280 --> 00:42:50,560
this was a

1178
00:42:50,560 --> 00:42:52,960
an error here this is very common

1179
00:42:52,960 --> 00:42:55,440
because it's checking that the

1180
00:42:55,440 --> 00:42:57,440
url host

1181
00:42:57,440 --> 00:42:59,440
contains that onion somewhere right so

1182
00:42:59,440 --> 00:43:01,599
location is different but not found it's

1183
00:43:01,599 --> 00:43:03,280
a little bit of a stupid comparison

1184
00:43:03,280 --> 00:43:06,319
which really means location is found

1185
00:43:06,319 --> 00:43:08,560
right so basically this is checking if

1186
00:43:08,560 --> 00:43:11,280
that onion is found anywhere on the

1187
00:43:11,280 --> 00:43:13,920
string so not not is basically true

1188
00:43:13,920 --> 00:43:15,839
right so this is a stupid double

1189
00:43:15,839 --> 00:43:18,240
negation so this means that is found

1190
00:43:18,240 --> 00:43:20,560
right so if that onion is found

1191
00:43:20,560 --> 00:43:22,640
somewhere on the host

1192
00:43:22,640 --> 00:43:25,280
then all ssl errors will be ignored so

1193
00:43:25,280 --> 00:43:26,960
what can we do with this

1194
00:43:26,960 --> 00:43:28,560
uh we can

1195
00:43:28,560 --> 00:43:30,720
exploit this to ignore some warnings so

1196
00:43:30,720 --> 00:43:33,200
for example we could create a subdomain

1197
00:43:33,200 --> 00:43:36,439
like www.paypal.com.online.78.org

1198
00:43:37,359 --> 00:43:39,440
pointing to a google ip address and then

1199
00:43:39,440 --> 00:43:41,760
when you visit this url

1200
00:43:41,760 --> 00:43:44,079
from a normal browser you get security

1201
00:43:44,079 --> 00:43:46,720
warnings however if you visited this url

1202
00:43:46,720 --> 00:43:49,119
using the onion browser there were no

1203
00:43:49,119 --> 00:43:51,440
warnings because there was a dot onion

1204
00:43:51,440 --> 00:43:52,480
somewhere

1205
00:43:52,480 --> 00:43:54,720
right so this is a very interesting

1206
00:43:54,720 --> 00:43:57,839
logic bug that is very common uh you

1207
00:43:57,839 --> 00:43:59,680
know in many applications not just

1208
00:43:59,680 --> 00:44:01,760
mobile when developers use things like

1209
00:44:01,760 --> 00:44:04,319
includes contains string string and so

1210
00:44:04,319 --> 00:44:05,920
on

1211
00:44:05,920 --> 00:44:07,920
now very quickly some other interesting

1212
00:44:07,920 --> 00:44:09,760
attacks with xmpp

1213
00:44:09,760 --> 00:44:11,920
it's possible sometimes to downgrade to

1214
00:44:11,920 --> 00:44:13,119
clear text

1215
00:44:13,119 --> 00:44:14,720
so when you're doing money in the middle

1216
00:44:14,720 --> 00:44:16,160
effect mpp

1217
00:44:16,160 --> 00:44:18,400
in the handshake you can specify that

1218
00:44:18,400 --> 00:44:20,480
the only mechanism to authenticate is

1219
00:44:20,480 --> 00:44:22,560
plain normally there would be like a

1220
00:44:22,560 --> 00:44:24,880
challenge response which would be safer

1221
00:44:24,880 --> 00:44:27,280
um but if you specify that the mechanism

1222
00:44:27,280 --> 00:44:29,680
is plain then the application

1223
00:44:29,680 --> 00:44:32,160
might fall for this uh and send the

1224
00:44:32,160 --> 00:44:33,920
credentials in cleartext this is all

1225
00:44:33,920 --> 00:44:35,680
just base64 encoded but you can

1226
00:44:35,680 --> 00:44:37,920
basically for decode it and you have

1227
00:44:37,920 --> 00:44:39,839
the credentials there

1228
00:44:39,839 --> 00:44:41,760
another scenario would be at picking up

1229
00:44:41,760 --> 00:44:43,680
figures so in this case we have an

1230
00:44:43,680 --> 00:44:47,040
update like for the over clear text http

1231
00:44:47,040 --> 00:44:49,839
some json files so we can spoof that and

1232
00:44:49,839 --> 00:44:52,079
specify that the url for the update is a

1233
00:44:52,079 --> 00:44:54,240
phone number so this is an interesting

1234
00:44:54,240 --> 00:44:56,720
attack vector on mo on mobile to change

1235
00:44:56,720 --> 00:44:58,640
urls to phone numbers

1236
00:44:58,640 --> 00:45:01,599
and then you get a message saying that

1237
00:45:01,599 --> 00:45:03,200
there's a new version available and then

1238
00:45:03,200 --> 00:45:05,760
when you update it will basically make a

1239
00:45:05,760 --> 00:45:07,839
premium phone call right so it's an

1240
00:45:07,839 --> 00:45:09,680
interesting way for an attacker to

1241
00:45:09,680 --> 00:45:12,480
monetize the attack

1242
00:45:12,480 --> 00:45:14,800
another example a deep

1243
00:45:14,800 --> 00:45:15,920
party

1244
00:45:15,920 --> 00:45:18,800
c file retrieval right so we have an

1245
00:45:18,800 --> 00:45:20,800
info plus with

1246
00:45:20,800 --> 00:45:22,960
an insecure app transfer security

1247
00:45:22,960 --> 00:45:25,520
exception so this is a hint that the

1248
00:45:25,520 --> 00:45:28,720
application somehow requires

1249
00:45:28,720 --> 00:45:33,119
clear text http traffic to some amazon

1250
00:45:33,119 --> 00:45:34,400
domain

1251
00:45:34,400 --> 00:45:35,520
so

1252
00:45:35,520 --> 00:45:38,079
that we can try here it's that since the

1253
00:45:38,079 --> 00:45:40,480
zip file is retrieved over clear text

1254
00:45:40,480 --> 00:45:41,680
http

1255
00:45:41,680 --> 00:45:44,880
we can replace it with our own zip file

1256
00:45:44,880 --> 00:45:47,440
so when the file is uncompressed this

1257
00:45:47,440 --> 00:45:51,280
will replace all the zip files uh on you

1258
00:45:51,280 --> 00:45:53,280
know it will the contents of the zip

1259
00:45:53,280 --> 00:45:55,839
file can basically overwrite anything

1260
00:45:55,839 --> 00:45:58,160
that the application is trying to you

1261
00:45:58,160 --> 00:46:00,960
know application faster one basically

1262
00:46:00,960 --> 00:46:03,520
now some crypto attacks this was a

1263
00:46:03,520 --> 00:46:06,960
crypto messenger android app

1264
00:46:06,960 --> 00:46:08,560
it's a very interesting attack because

1265
00:46:08,560 --> 00:46:10,480
the application receives

1266
00:46:10,480 --> 00:46:12,160
encrypted files

1267
00:46:12,160 --> 00:46:14,800
the vulnerabilities here so target file

1268
00:46:14,800 --> 00:46:16,319
equals new file

1269
00:46:16,319 --> 00:46:17,920
and then the problem is with the

1270
00:46:17,920 --> 00:46:20,400
original file name right so new file

1271
00:46:20,400 --> 00:46:22,400
original file name so what can go wrong

1272
00:46:22,400 --> 00:46:23,680
with that

1273
00:46:23,680 --> 00:46:25,119
um

1274
00:46:25,119 --> 00:46:27,520
single original file name is going to be

1275
00:46:27,520 --> 00:46:29,680
used in the file system we can do stuff

1276
00:46:29,680 --> 00:46:33,200
like adding a lot of slash sequences and

1277
00:46:33,200 --> 00:46:36,400
then we have an arbitrary file right

1278
00:46:36,400 --> 00:46:38,160
on decryption

1279
00:46:38,160 --> 00:46:41,040
with a dot slash sequence on the file

1280
00:46:41,040 --> 00:46:43,680
name right so user a can create and

1281
00:46:43,680 --> 00:46:45,839
overwrite any file in the app story so

1282
00:46:45,839 --> 00:46:47,920
the context here was

1283
00:46:47,920 --> 00:46:50,480
you would encrypt the file

1284
00:46:50,480 --> 00:46:51,839
that you want

1285
00:46:51,839 --> 00:46:52,960
and then

1286
00:46:52,960 --> 00:46:55,200
the file name would contain these dots

1287
00:46:55,200 --> 00:46:56,880
last sequence so when the file is

1288
00:46:56,880 --> 00:46:58,800
decrypted by the application this would

1289
00:46:58,800 --> 00:47:00,079
overwrite

1290
00:47:00,079 --> 00:47:02,079
uh the files right so

1291
00:47:02,079 --> 00:47:05,359
another example a php email a heart

1292
00:47:05,359 --> 00:47:06,720
application

1293
00:47:06,720 --> 00:47:09,760
so uh the vulnerability here

1294
00:47:09,760 --> 00:47:12,160
was on this part of the

1295
00:47:12,160 --> 00:47:13,599
of the code so it's basically

1296
00:47:13,599 --> 00:47:15,440
concatenating the

1297
00:47:15,440 --> 00:47:17,680
string escape for javascript which was

1298
00:47:17,680 --> 00:47:19,680
not escape for javascript

1299
00:47:19,680 --> 00:47:21,760
into the message of the body right so

1300
00:47:21,760 --> 00:47:24,000
this is an application that was doing

1301
00:47:24,000 --> 00:47:27,520
pgp using javascript so

1302
00:47:27,520 --> 00:47:29,760
is first setting the private key then

1303
00:47:29,760 --> 00:47:32,000
setting the passphrase and then on the

1304
00:47:32,000 --> 00:47:34,880
message you could email some user

1305
00:47:34,880 --> 00:47:36,559
something like this like column

1306
00:47:36,559 --> 00:47:38,400
semicolon and then some

1307
00:47:38,400 --> 00:47:40,240
you know

1308
00:47:40,240 --> 00:47:42,640
javascript here to send the the

1309
00:47:42,640 --> 00:47:44,240
passphrase

1310
00:47:44,240 --> 00:47:46,400
to some attacker machine right so you

1311
00:47:46,400 --> 00:47:48,559
have the private key the passphrase and

1312
00:47:48,559 --> 00:47:52,000
then you can get the passphrase and send

1313
00:47:52,000 --> 00:47:54,559
and send it to an attacker the same way

1314
00:47:54,559 --> 00:47:56,880
with the private key right so you could

1315
00:47:56,880 --> 00:47:59,040
send the private key the passphrase to

1316
00:47:59,040 --> 00:48:00,880
an attacker using this attack just

1317
00:48:00,880 --> 00:48:02,800
sending an email to a user right so this

1318
00:48:02,800 --> 00:48:04,960
is a very very cool

1319
00:48:04,960 --> 00:48:06,640
attack

1320
00:48:06,640 --> 00:48:08,240
and then the attacker would of course

1321
00:48:08,240 --> 00:48:10,480
retrieve the the path phrase uh like

1322
00:48:10,480 --> 00:48:14,240
this right so this was a very nice

1323
00:48:14,240 --> 00:48:16,480
attack vector

1324
00:48:16,480 --> 00:48:18,480
so now let's talk about an application

1325
00:48:18,480 --> 00:48:20,559
very close to my heart

1326
00:48:20,559 --> 00:48:22,720
smart sharif right so this application

1327
00:48:22,720 --> 00:48:24,160
that i talked a little bit about the

1328
00:48:24,160 --> 00:48:25,359
beginning

1329
00:48:25,359 --> 00:48:28,400
um calls mercury mandated entire country

1330
00:48:28,400 --> 00:48:30,559
of south korea by law every parent and

1331
00:48:30,559 --> 00:48:31,760
child is forced to install this

1332
00:48:31,760 --> 00:48:34,160
application controls for usage controls

1333
00:48:34,160 --> 00:48:36,079
the installed application block websites

1334
00:48:36,079 --> 00:48:37,359
and stuff like this

1335
00:48:37,359 --> 00:48:39,119
so you can see the two public pen test

1336
00:48:39,119 --> 00:48:41,200
reports there the first time we tested

1337
00:48:41,200 --> 00:48:43,040
them we noticed that they were not using

1338
00:48:43,040 --> 00:48:45,040
ssl for anything so it was all clear

1339
00:48:45,040 --> 00:48:46,559
text http

1340
00:48:46,559 --> 00:48:49,440
so really bad so we reported this and

1341
00:48:49,440 --> 00:48:51,920
the second time it seems like they came

1342
00:48:51,920 --> 00:48:53,359
to um

1343
00:48:53,359 --> 00:48:54,800
the cell right because they were using

1344
00:48:54,800 --> 00:48:56,640
https however

1345
00:48:56,640 --> 00:48:59,680
uh this is the validation of the excel

1346
00:48:59,680 --> 00:49:02,000
right so basically when the application

1347
00:49:02,000 --> 00:49:04,160
receives an sslr is going to proceed

1348
00:49:04,160 --> 00:49:05,119
anyway

1349
00:49:05,119 --> 00:49:06,240
and then

1350
00:49:06,240 --> 00:49:09,760
when the hostname of the ssl doesn't

1351
00:49:09,760 --> 00:49:11,760
match the verification process is just

1352
00:49:11,760 --> 00:49:13,280
going to return true and that was

1353
00:49:13,280 --> 00:49:15,280
actually all the codes had just returned

1354
00:49:15,280 --> 00:49:17,599
true so basically if i have the

1355
00:49:17,599 --> 00:49:19,599
certificate for certain security.com i

1356
00:49:19,599 --> 00:49:22,400
can use it to for example manning the

1357
00:49:22,400 --> 00:49:24,319
middle google.com or facebook.com or

1358
00:49:24,319 --> 00:49:26,880
wherever else and this hostname verifier

1359
00:49:26,880 --> 00:49:29,280
will say yeah that's right right so it

1360
00:49:29,280 --> 00:49:32,160
will uh you know uh so that's basically

1361
00:49:32,160 --> 00:49:33,359
the problem right so it ignores the

1362
00:49:33,359 --> 00:49:36,559
sellers it ignores hosts the hostname

1363
00:49:36,559 --> 00:49:39,119
mismatches on the ssl

1364
00:49:39,119 --> 00:49:42,000
um certificate so basically is the same

1365
00:49:42,000 --> 00:49:44,079
as if you didn't have ssl because

1366
00:49:44,079 --> 00:49:45,920
anybody can run in the middle this with

1367
00:49:45,920 --> 00:49:47,680
a self send certificate and the

1368
00:49:47,680 --> 00:49:50,319
application won't complain about it

1369
00:49:50,319 --> 00:49:52,480
then the next problem that they had

1370
00:49:52,480 --> 00:49:55,920
was that they had a hardcoded xor key in

1371
00:49:55,920 --> 00:49:59,520
the code right so xor can be a secure

1372
00:49:59,520 --> 00:50:01,760
algorithm right so this for example the

1373
00:50:01,760 --> 00:50:03,200
one-time path

1374
00:50:03,200 --> 00:50:04,640
if you're familiar

1375
00:50:04,640 --> 00:50:05,760
um

1376
00:50:05,760 --> 00:50:09,440
during second world war i think

1377
00:50:09,440 --> 00:50:12,400
sometimes this was used

1378
00:50:12,400 --> 00:50:15,920
and it can be safe as long as the key

1379
00:50:15,920 --> 00:50:17,839
changes every time and so on however in

1380
00:50:17,839 --> 00:50:20,559
this case we have x4 with a hard-coded

1381
00:50:20,559 --> 00:50:21,680
key

1382
00:50:21,680 --> 00:50:23,839
on the application a hard-coded key on

1383
00:50:23,839 --> 00:50:26,240
the on the binary that anybody can

1384
00:50:26,240 --> 00:50:28,880
decompile and see right so this is

1385
00:50:28,880 --> 00:50:30,160
basically

1386
00:50:30,160 --> 00:50:33,040
uh stupid because the the server and the

1387
00:50:33,040 --> 00:50:34,880
mobile app are sharing a key that is

1388
00:50:34,880 --> 00:50:36,319
hardcoded

1389
00:50:36,319 --> 00:50:39,040
the app so anybody can actually see this

1390
00:50:39,040 --> 00:50:40,800
key by reversing the app so there's

1391
00:50:40,800 --> 00:50:43,280
absolutely no security in this right so

1392
00:50:43,280 --> 00:50:44,880
the proper way would be to use

1393
00:50:44,880 --> 00:50:46,880
asymmetric crypto but in this case you

1394
00:50:46,880 --> 00:50:48,559
have a symmetric

1395
00:50:48,559 --> 00:50:51,359
algorithm with a hardcoded key on the

1396
00:50:51,359 --> 00:50:54,480
application and then

1397
00:50:54,480 --> 00:50:56,640
we created uh basically a python script

1398
00:50:56,640 --> 00:50:58,480
with a hardcoded key to encrypt and

1399
00:50:58,480 --> 00:51:02,079
decrypt using using this so basically

1400
00:51:02,079 --> 00:51:04,160
this was the name of the key so moyba

1401
00:51:04,160 --> 00:51:07,520
was the company behind this so

1402
00:51:07,520 --> 00:51:08,480
this

1403
00:51:08,480 --> 00:51:11,440
is the xor key so you have this and it

1404
00:51:11,440 --> 00:51:13,280
goes through extra with a key and it

1405
00:51:13,280 --> 00:51:15,760
gives you back the phone number right so

1406
00:51:15,760 --> 00:51:17,760
this is the xor key with some null bytes

1407
00:51:17,760 --> 00:51:19,040
in there

1408
00:51:19,040 --> 00:51:21,359
maybe to try to make it harder to

1409
00:51:21,359 --> 00:51:23,119
reverse i'm not sure

1410
00:51:23,119 --> 00:51:26,720
and then the next time they added an aes

1411
00:51:26,720 --> 00:51:29,680
layer however now aes is a good

1412
00:51:29,680 --> 00:51:31,680
algorithm and so on peer-reviewed and

1413
00:51:31,680 --> 00:51:33,359
everything else however

1414
00:51:33,359 --> 00:51:34,319
again

1415
00:51:34,319 --> 00:51:35,920
the key was hard coded on the

1416
00:51:35,920 --> 00:51:38,000
application so you can see that the key

1417
00:51:38,000 --> 00:51:40,160
is being retrieved

1418
00:51:40,160 --> 00:51:41,119
from

1419
00:51:41,119 --> 00:51:44,000
you know from the application so this

1420
00:51:44,000 --> 00:51:46,640
again is insecure right so again a

1421
00:51:46,640 --> 00:51:48,480
secret between the server and the

1422
00:51:48,480 --> 00:51:50,800
application that anybody you know can

1423
00:51:50,800 --> 00:51:52,880
get a hold of by simply reversing the

1424
00:51:52,880 --> 00:51:55,200
application without much kill

1425
00:51:55,200 --> 00:51:57,440
this is the other layer

1426
00:51:57,440 --> 00:51:59,119
we have another hard-coded key through

1427
00:51:59,119 --> 00:52:01,280
aes this is the encrypted request and

1428
00:52:01,280 --> 00:52:03,599
this is like the decrypted request so

1429
00:52:03,599 --> 00:52:05,839
it's basically a useless aes layer with

1430
00:52:05,839 --> 00:52:07,359
a static key

1431
00:52:07,359 --> 00:52:10,400
so in summary we have the phone number

1432
00:52:10,400 --> 00:52:13,280
it encrypted with a first useless xor

1433
00:52:13,280 --> 00:52:15,200
key that is hardcoded in the application

1434
00:52:15,200 --> 00:52:16,720
and everybody knows

1435
00:52:16,720 --> 00:52:19,760
so this is the encrypted phone number

1436
00:52:19,760 --> 00:52:22,559
with the xor key then this request is

1437
00:52:22,559 --> 00:52:24,800
encrypted using aes with a second layer

1438
00:52:24,800 --> 00:52:27,119
of encryption that is again useless

1439
00:52:27,119 --> 00:52:30,640
because the as key is again hardcoded on

1440
00:52:30,640 --> 00:52:31,359
the

1441
00:52:31,359 --> 00:52:33,920
phone on the application

1442
00:52:33,920 --> 00:52:35,680
and then this request

1443
00:52:35,680 --> 00:52:36,960
goes to the

1444
00:52:36,960 --> 00:52:39,280
to the server however

1445
00:52:39,280 --> 00:52:41,599
the ssl verification i showed you before

1446
00:52:41,599 --> 00:52:43,839
is completely broken so all

1447
00:52:43,839 --> 00:52:46,160
failed certificate you know all failed

1448
00:52:46,160 --> 00:52:48,480
ssl errors are going to be ignored so

1449
00:52:48,480 --> 00:52:50,720
basically uh yeah anybody can money in

1450
00:52:50,720 --> 00:52:52,000
the middle that so this is all like

1451
00:52:52,000 --> 00:52:53,599
completely useless right and then you

1452
00:52:53,599 --> 00:52:55,760
get their response from the server

1453
00:52:55,760 --> 00:52:56,880
back so

1454
00:52:56,880 --> 00:53:00,160
uh horrible security implementation it's

1455
00:53:00,160 --> 00:53:03,359
just you know it's worthless summarizing

1456
00:53:03,359 --> 00:53:06,480
the catastrophe in a slide like this

1457
00:53:06,480 --> 00:53:08,240
now this wouldn't be complete without

1458
00:53:08,240 --> 00:53:10,559
talking a little bit about api so let's

1459
00:53:10,559 --> 00:53:12,640
see a couple of examples recruiting

1460
00:53:12,640 --> 00:53:14,559
files from the server very classic

1461
00:53:14,559 --> 00:53:15,520
attack

1462
00:53:15,520 --> 00:53:17,680
where a developer believes that

1463
00:53:17,680 --> 00:53:20,000
replacing dot dot slash with nothing is

1464
00:53:20,000 --> 00:53:22,960
going to prevent a path traversal but

1465
00:53:22,960 --> 00:53:26,240
what happens if you provide

1466
00:53:27,440 --> 00:53:28,960
what's going to happen is that you

1467
00:53:28,960 --> 00:53:30,000
provide

1468
00:53:30,000 --> 00:53:32,400
dot dot dot dot slash slash and then

1469
00:53:32,400 --> 00:53:34,400
this dot dot slash here is going to

1470
00:53:34,400 --> 00:53:36,960
disappear with the string replace and

1471
00:53:36,960 --> 00:53:39,359
you will end up with dot dot slash right

1472
00:53:39,359 --> 00:53:41,920
so you basically provide this

1473
00:53:41,920 --> 00:53:43,520
in this fashion and then when this is

1474
00:53:43,520 --> 00:53:45,839
removed you end up with a dot slash

1475
00:53:45,839 --> 00:53:47,839
sequence so you haven't solved anything

1476
00:53:47,839 --> 00:53:49,359
and you still have a path reversal

1477
00:53:49,359 --> 00:53:52,400
problem very classic uh you know web

1478
00:53:52,400 --> 00:53:55,520
application security attack vector

1479
00:53:55,520 --> 00:53:56,960
sometimes

1480
00:53:56,960 --> 00:53:59,599
then uploading files to the server

1481
00:53:59,599 --> 00:54:02,640
another interesting uh scenario here and

1482
00:54:02,640 --> 00:54:05,280
you've got an application managing pgp

1483
00:54:05,280 --> 00:54:07,119
fingerprints and so on so it's running a

1484
00:54:07,119 --> 00:54:08,079
command

1485
00:54:08,079 --> 00:54:09,920
and this is how it's running the command

1486
00:54:09,920 --> 00:54:12,160
is basically joining the the command

1487
00:54:12,160 --> 00:54:14,240
here is using shell true which is not

1488
00:54:14,240 --> 00:54:15,680
recommended by in the python

1489
00:54:15,680 --> 00:54:17,920
documentation

1490
00:54:17,920 --> 00:54:21,040
and uh basically this is being

1491
00:54:21,040 --> 00:54:23,599
run uh in there right so

1492
00:54:23,599 --> 00:54:25,359
this is like encoded and so on so

1493
00:54:25,359 --> 00:54:27,359
basically this is the cross request with

1494
00:54:27,359 --> 00:54:29,839
the encoded payload but basically you

1495
00:54:29,839 --> 00:54:32,000
can just use the pipe character to run

1496
00:54:32,000 --> 00:54:34,640
any command you want like wget whatever

1497
00:54:34,640 --> 00:54:38,240
uh so using this we could you know hold

1498
00:54:38,240 --> 00:54:40,960
a text file that contained a reverse

1499
00:54:40,960 --> 00:54:43,839
shell and then you can run curl

1500
00:54:43,839 --> 00:54:45,760
to

1501
00:54:45,760 --> 00:54:48,160
using the pgp fingerprint that the pipe

1502
00:54:48,160 --> 00:54:51,760
character to the w get of the attacker

1503
00:54:51,760 --> 00:54:53,440
text file and then

1504
00:54:53,440 --> 00:54:55,920
run with bash the the text file so we

1505
00:54:55,920 --> 00:54:57,920
have a shell and then we got

1506
00:54:57,920 --> 00:54:59,920
the reversal back and we were already

1507
00:54:59,920 --> 00:55:02,400
root so we didn't even have to escalate

1508
00:55:02,400 --> 00:55:05,040
privileges right so this was a very cool

1509
00:55:05,040 --> 00:55:06,559
example

1510
00:55:06,559 --> 00:55:07,520
so yeah

1511
00:55:07,520 --> 00:55:09,680
well interesting

1512
00:55:09,680 --> 00:55:12,000
and then a cursing application of

1513
00:55:12,000 --> 00:55:14,640
merchant was uh architectured

1514
00:55:14,640 --> 00:55:16,079
afterwards so

1515
00:55:16,079 --> 00:55:18,079
in every classroom that always needs a

1516
00:55:18,079 --> 00:55:19,760
battle that wants to mess with all the

1517
00:55:19,760 --> 00:55:22,240
children right so this kind of bad kid

1518
00:55:22,240 --> 00:55:24,240
that everybody hates and is afraid of in

1519
00:55:24,240 --> 00:55:25,280
the class

1520
00:55:25,280 --> 00:55:27,599
so this one this kind of people want to

1521
00:55:27,599 --> 00:55:29,440
make the life of all the children in the

1522
00:55:29,440 --> 00:55:32,240
classroom miserable right so

1523
00:55:32,240 --> 00:55:34,559
for this kind of child there was a

1524
00:55:34,559 --> 00:55:37,599
an api by a smart sheriff called that we

1525
00:55:37,599 --> 00:55:39,680
affectionately called the bully api or

1526
00:55:39,680 --> 00:55:40,960
so basically if you know the phone

1527
00:55:40,960 --> 00:55:42,640
number of a child

1528
00:55:42,640 --> 00:55:44,000
you would ask

1529
00:55:44,000 --> 00:55:47,440
uh well smasher if i have the the phone

1530
00:55:47,440 --> 00:55:49,520
number of the child i want to mess with

1531
00:55:49,520 --> 00:55:51,200
then the api will tell you okay this is

1532
00:55:51,200 --> 00:55:53,280
the apparent four numbers with this you

1533
00:55:53,280 --> 00:55:54,880
can already do some damage some prank

1534
00:55:54,880 --> 00:55:57,200
calls and so on

1535
00:55:57,200 --> 00:55:59,119
you also want like the paths were right

1536
00:55:59,119 --> 00:56:00,640
because to log in you needed the parent

1537
00:56:00,640 --> 00:56:02,720
you are the current phone number but

1538
00:56:02,720 --> 00:56:05,520
also the password so you would politely

1539
00:56:05,520 --> 00:56:07,440
ask mercury right you should always ask

1540
00:56:07,440 --> 00:56:08,960
questions you like so it will ask like

1541
00:56:08,960 --> 00:56:11,119
come on smash here give me the password

1542
00:56:11,119 --> 00:56:13,359
and then i give you the password with

1543
00:56:13,359 --> 00:56:16,400
the xor encryption that we saw before

1544
00:56:16,400 --> 00:56:19,920
so you got the api response with the

1545
00:56:19,920 --> 00:56:22,319
password export and you can basically

1546
00:56:22,319 --> 00:56:25,280
log in as the parent of any child in the

1547
00:56:25,280 --> 00:56:26,880
classroom and from there you can say

1548
00:56:26,880 --> 00:56:28,880
this child can never use the phone

1549
00:56:28,880 --> 00:56:31,119
during any time of the day cannot visit

1550
00:56:31,119 --> 00:56:33,040
any websites cannot have any application

1551
00:56:33,040 --> 00:56:34,319
installed

1552
00:56:34,319 --> 00:56:38,319
and so on right so this is how

1553
00:56:38,319 --> 00:56:41,280
it looked in practice

1554
00:56:41,280 --> 00:56:43,920
and i can see an application of mercury

1555
00:56:43,920 --> 00:56:45,680
was admired

1556
00:56:45,680 --> 00:56:47,440
so this was flagging like dangerous

1557
00:56:47,440 --> 00:56:49,200
words like for example if one child sent

1558
00:56:49,200 --> 00:56:51,440
a message to another with a word like

1559
00:56:51,440 --> 00:56:53,119
sex or something like that

1560
00:56:53,119 --> 00:56:54,720
then it would uh

1561
00:56:54,720 --> 00:56:56,960
mark that as harmful and it would save

1562
00:56:56,960 --> 00:57:00,079
it into an api right

1563
00:57:00,079 --> 00:57:04,480
so the problem with this was that um

1564
00:57:04,480 --> 00:57:07,200
was being taped

1565
00:57:07,200 --> 00:57:09,200
in this server and anybody could

1566
00:57:09,200 --> 00:57:11,599
retrieve it right so let me try

1567
00:57:11,599 --> 00:57:14,640
so this was the mercury

1568
00:57:14,640 --> 00:57:15,920
smoke first

1569
00:57:15,920 --> 00:57:19,119
basically trying uh random phone numbers

1570
00:57:19,119 --> 00:57:20,960
you can see

1571
00:57:20,960 --> 00:57:23,440
that you know you get the the parent

1572
00:57:23,440 --> 00:57:25,200
phone number the child and the parent

1573
00:57:25,200 --> 00:57:26,880
number and then from the parent you get

1574
00:57:26,880 --> 00:57:27,680
the

1575
00:57:27,680 --> 00:57:31,119
password of everybody and so on

1576
00:57:31,119 --> 00:57:33,200
and then the other one that i wanted to

1577
00:57:33,200 --> 00:57:36,000
show is smart dream you calling the api

1578
00:57:36,000 --> 00:57:38,559
you could actually

1579
00:57:38,559 --> 00:57:40,559
dump all the messages

1580
00:57:40,559 --> 00:57:43,359
from the api that every child in the

1581
00:57:43,359 --> 00:57:45,280
entire country of south korea that was

1582
00:57:45,280 --> 00:57:46,860
using this app

1583
00:57:46,860 --> 00:57:48,160
[Music]

1584
00:57:48,160 --> 00:57:50,319
typed right so this uh

1585
00:57:50,319 --> 00:57:51,760
now most of you probably don't speak

1586
00:57:51,760 --> 00:57:53,119
korean like me

1587
00:57:53,119 --> 00:57:55,680
so fabian who is the one that

1588
00:57:55,680 --> 00:57:57,760
wrote this script he actually replaced

1589
00:57:57,760 --> 00:57:59,440
the original korean characters with

1590
00:57:59,440 --> 00:58:00,880
other characters

1591
00:58:00,880 --> 00:58:01,920
but

1592
00:58:01,920 --> 00:58:04,079
the point is that you could actually

1593
00:58:04,079 --> 00:58:08,000
dump all the messages from the api

1594
00:58:08,000 --> 00:58:10,480
and then you got like the phone number

1595
00:58:10,480 --> 00:58:12,720
that wrote those messages and what the

1596
00:58:12,720 --> 00:58:15,359
text of those messages was right so this

1597
00:58:15,359 --> 00:58:17,599
was pretty pretty bad

1598
00:58:17,599 --> 00:58:20,400
uh yeah so lots of

1599
00:58:20,400 --> 00:58:24,400
bad stuff in there and uh and yeah with

1600
00:58:24,400 --> 00:58:26,720
that we have a couple of minutes for

1601
00:58:26,720 --> 00:58:29,760
questions maybe i'll show one more demo

1602
00:58:29,760 --> 00:58:32,559
the uh the alert right so

1603
00:58:32,559 --> 00:58:35,280
smarter if it was so bad that

1604
00:58:35,280 --> 00:58:37,839
when google index the because the report

1605
00:58:37,839 --> 00:58:40,720
is public google index the vulnerability

1606
00:58:40,720 --> 00:58:42,880
so you could actually search for the

1607
00:58:42,880 --> 00:58:45,440
host and then you get the alert was

1608
00:58:45,440 --> 00:58:47,200
still working

1609
00:58:47,200 --> 00:58:49,760
this was i think like one year or more

1610
00:58:49,760 --> 00:58:52,880
than one year after after the pen test

1611
00:58:52,880 --> 00:58:54,559
and you can see that the alert's still

1612
00:58:54,559 --> 00:58:57,119
working and you know

1613
00:58:57,119 --> 00:59:00,079
this is the actual injection in the in

1614
00:59:00,079 --> 00:59:02,480
the page right so it was pretty bad okay

1615
00:59:02,480 --> 00:59:06,160
so with that we have a minute or two for

1616
00:59:06,160 --> 00:59:08,240
questions so any questions before we

1617
00:59:08,240 --> 00:59:10,720
wrap up

1618
00:59:15,920 --> 00:59:17,599
now this workshop there's a longer

1619
00:59:17,599 --> 00:59:19,920
version that is four hours

1620
00:59:19,920 --> 00:59:22,319
and all the vulnerable applications the

1621
00:59:22,319 --> 00:59:24,960
slides and the longer like more relaxed

1622
00:59:24,960 --> 00:59:26,319
uh recording

1623
00:59:26,319 --> 00:59:28,240
four hours with more vulnerabilities

1624
00:59:28,240 --> 00:59:29,839
than i covered today

1625
00:59:29,839 --> 00:59:31,520
this is all available for free if you go

1626
00:59:31,520 --> 00:59:34,000
to seven security.com slash free you can

1627
00:59:34,000 --> 00:59:36,240
download everything from there right so

1628
00:59:36,240 --> 00:59:39,359
there you can watch the video

1629
00:59:39,359 --> 00:59:41,119
download the slides download the

1630
00:59:41,119 --> 00:59:43,119
vulnerable applications

1631
00:59:43,119 --> 00:59:44,720
and so on right so it's all available

1632
00:59:44,720 --> 00:59:47,440
for free there and if you found this

1633
00:59:47,440 --> 00:59:49,760
interesting maybe you can point some of

1634
00:59:49,760 --> 00:59:52,319
your friends there so they can get this

1635
00:59:52,319 --> 00:59:54,000
presentation and download everything and

1636
00:59:54,000 --> 00:59:56,160
play with with these demos and these

1637
00:59:56,160 --> 00:59:58,720
apps just tinker with and play with with

1638
00:59:58,720 --> 01:00:01,119
it getting your heads dirty

1639
01:00:01,119 --> 01:00:04,960
any questions before we wrap up

1640
01:00:05,119 --> 01:00:07,599
i don't see any question in the chat so

1641
01:00:07,599 --> 01:00:10,160
if there's no questions

1642
01:00:10,160 --> 01:00:12,000
there's a question here is there a way

1643
01:00:12,000 --> 01:00:13,119
to get

1644
01:00:13,119 --> 01:00:16,160
a vulnerable application yes this is all

1645
01:00:16,160 --> 01:00:18,319
just click on

1646
01:00:18,319 --> 01:00:19,920
on the slides

1647
01:00:19,920 --> 01:00:21,599
and you can download all the vulnerable

1648
01:00:21,599 --> 01:00:22,960
applications so all the vulnerable

1649
01:00:22,960 --> 01:00:24,640
applications that i

1650
01:00:24,640 --> 01:00:26,319
showed today they

1651
01:00:26,319 --> 01:00:29,359
they are on the slides for all ones this

1652
01:00:29,359 --> 01:00:33,359
is a website called api cure.com so

1653
01:00:33,359 --> 01:00:35,520
i think

1654
01:00:35,520 --> 01:00:38,240
epicure.com or similar

1655
01:00:38,240 --> 01:00:40,559
um

1656
01:00:40,559 --> 01:00:42,960
for old

1657
01:00:42,960 --> 01:00:45,839
versions uh so there's some websites

1658
01:00:45,839 --> 01:00:46,880
like this

1659
01:00:46,880 --> 01:00:48,720
uh i'm not sure if i misspelled but it's

1660
01:00:48,720 --> 01:00:50,400
called something like that

1661
01:00:50,400 --> 01:00:53,040
um so this can be handy like if you're

1662
01:00:53,040 --> 01:00:54,720
looking for an older version of a

1663
01:00:54,720 --> 01:00:56,559
specific absolutely you can find it

1664
01:00:56,559 --> 01:00:58,720
there

1665
01:01:00,400 --> 01:01:02,079
yeah our apk mirror there's several

1666
01:01:02,079 --> 01:01:03,200
websites

1667
01:01:03,200 --> 01:01:06,960
several websites like this right so

1668
01:01:06,960 --> 01:01:08,880
yeah and the

1669
01:01:08,880 --> 01:01:12,160
the chinese police apps and smart share

1670
01:01:12,160 --> 01:01:14,160
if these apps are part of our mobile

1671
01:01:14,160 --> 01:01:16,559
course if you are interested right so

1672
01:01:16,559 --> 01:01:20,079
these are not as as public or uh or

1673
01:01:20,079 --> 01:01:22,400
available with old versions but

1674
01:01:22,400 --> 01:01:23,440
but yeah

1675
01:01:23,440 --> 01:01:25,280
so yeah all this is available for free

1676
01:01:25,280 --> 01:01:28,000
there uh you can try this exercise on

1677
01:01:28,000 --> 01:01:29,839
your own if you if you run into any

1678
01:01:29,839 --> 01:01:31,280
problems you can email admin at

1679
01:01:31,280 --> 01:01:33,119
sevensecurity.com and we will help you

1680
01:01:33,119 --> 01:01:34,079
out

1681
01:01:34,079 --> 01:01:35,599
with the exercise will give you some

1682
01:01:35,599 --> 01:01:38,720
hints if you're into problems

1683
01:01:38,720 --> 01:01:40,480
so yeah the slides everything is

1684
01:01:40,480 --> 01:01:45,640
available on the on this page

1685
01:01:53,599 --> 01:01:56,480
so it is vulnerable i have to

1686
01:01:56,480 --> 01:01:58,240
connect it with

1687
01:01:58,240 --> 01:02:00,880
light recording

1688
01:02:00,880 --> 01:02:03,119
uh

1689
01:02:04,240 --> 01:02:06,880
so i hold it all in there

1690
01:02:06,880 --> 01:02:09,839
right so you can download it from there

1691
01:02:09,839 --> 01:02:12,000
and play with the apps and so on okay so

1692
01:02:12,000 --> 01:02:14,000
if there's no more questions we will

1693
01:02:14,000 --> 01:02:15,599
leave it here

1694
01:02:15,599 --> 01:02:17,680
thank you everybody for coming

1695
01:02:17,680 --> 01:02:21,039
uh have a very nice rest of your day

1696
01:02:21,039 --> 01:02:22,559
thank you everybody

1697
01:02:22,559 --> 01:02:25,559
bye

