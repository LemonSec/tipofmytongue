1
00:00:14,160 --> 00:00:17,160
cool

2
00:00:19,199 --> 00:00:22,160
okay um

3
00:00:22,880 --> 00:00:23,840
so

4
00:00:23,840 --> 00:00:26,240
hello everyone and welcome to our talk

5
00:00:26,240 --> 00:00:28,160
one click to infiltrate your

6
00:00:28,160 --> 00:00:30,400
organization via vulnerable vs code

7
00:00:30,400 --> 00:00:31,760
extensions

8
00:00:31,760 --> 00:00:33,840
so what are we going to cover first of

9
00:00:33,840 --> 00:00:36,079
all we'll do an intro then we'll talk

10
00:00:36,079 --> 00:00:38,480
about the motivation why did we do this

11
00:00:38,480 --> 00:00:39,520
research

12
00:00:39,520 --> 00:00:41,680
afterwards we will describe our

13
00:00:41,680 --> 00:00:44,000
processing pipeline followed by some

14
00:00:44,000 --> 00:00:47,039
vulnerable extension examples with demos

15
00:00:47,039 --> 00:00:49,360
and we will wrap it up with disclosures

16
00:00:49,360 --> 00:00:51,600
fixes and mitigations

17
00:00:51,600 --> 00:00:53,840
but first hello my name is raul i'm a

18
00:00:53,840 --> 00:00:56,879
security researcher in snake

19
00:00:56,879 --> 00:00:59,280
hi my name is kirill i'm security team

20
00:00:59,280 --> 00:01:00,719
lead

21
00:01:00,719 --> 00:01:03,120
sneak

22
00:01:03,680 --> 00:01:06,479
so why did we choose visual studio code

23
00:01:06,479 --> 00:01:08,960
but before we can answer that we need to

24
00:01:08,960 --> 00:01:11,200
ask ourselves different question

25
00:01:11,200 --> 00:01:14,720
why even try to attack developers

26
00:01:14,720 --> 00:01:17,280
so i guess we've all seen this sdlc

27
00:01:17,280 --> 00:01:20,400
diagram and developers are actually

28
00:01:20,400 --> 00:01:23,439
starting to shift right in it so instead

29
00:01:23,439 --> 00:01:25,600
of only editing code they're also

30
00:01:25,600 --> 00:01:28,320
building testing releasing and deploying

31
00:01:28,320 --> 00:01:31,439
applications while security has done the

32
00:01:31,439 --> 00:01:32,799
opposite way

33
00:01:32,799 --> 00:01:34,799
instead of only doing it at the end of

34
00:01:34,799 --> 00:01:37,759
the development cycle security testing

35
00:01:37,759 --> 00:01:40,560
is shifting left closer to when the code

36
00:01:40,560 --> 00:01:43,600
is written so it is easier to find bugs

37
00:01:43,600 --> 00:01:46,799
and fix them and it's less costly so now

38
00:01:46,799 --> 00:01:49,040
that responsibility is slowly

39
00:01:49,040 --> 00:01:50,640
transferring into the hands of

40
00:01:50,640 --> 00:01:51,920
developers

41
00:01:51,920 --> 00:01:53,680
and let's look at a couple of examples

42
00:01:53,680 --> 00:01:55,759
for this

43
00:01:55,759 --> 00:01:57,920
so i guess you've probably heard about

44
00:01:57,920 --> 00:02:00,880
dependency confusion a researcher it was

45
00:02:00,880 --> 00:02:01,920
able to

46
00:02:01,920 --> 00:02:04,640
infiltrate top companies by tricking

47
00:02:04,640 --> 00:02:07,680
package managers and to resolve private

48
00:02:07,680 --> 00:02:08,800
packages

49
00:02:08,800 --> 00:02:10,959
from other public ones with the same

50
00:02:10,959 --> 00:02:14,400
name so he was able to install his own

51
00:02:14,400 --> 00:02:17,200
uh packages in the organization and

52
00:02:17,200 --> 00:02:18,959
execute the code

53
00:02:18,959 --> 00:02:19,840
so

54
00:02:19,840 --> 00:02:22,239
now it turns out that there's a kind of

55
00:02:22,239 --> 00:02:25,520
a cat and mouse situation where

56
00:02:25,520 --> 00:02:27,520
you need to place some security holding

57
00:02:27,520 --> 00:02:29,520
packages in order for your private

58
00:02:29,520 --> 00:02:32,319
packages to not get squatted so

59
00:02:32,319 --> 00:02:35,120
developers need to be mindful of that

60
00:02:35,120 --> 00:02:37,680
in addition uh two years ago a research

61
00:02:37,680 --> 00:02:41,440
was published that said that uh 27 of

62
00:02:41,440 --> 00:02:42,879
organizations

63
00:02:42,879 --> 00:02:45,040
were breached as a result of unpatched

64
00:02:45,040 --> 00:02:46,400
vulnerabilities

65
00:02:46,400 --> 00:02:48,319
as and as we mentioned that

66
00:02:48,319 --> 00:02:50,160
responsibility lies in the hands of

67
00:02:50,160 --> 00:02:52,800
developers so if you get disclosed with

68
00:02:52,800 --> 00:02:54,400
a vulnerability

69
00:02:54,400 --> 00:02:55,519
you need to

70
00:02:55,519 --> 00:02:58,400
implement a click a fix and

71
00:02:58,400 --> 00:03:00,319
merge it into your code base in order

72
00:03:00,319 --> 00:03:02,840
for the vulnerability to be actually

73
00:03:02,840 --> 00:03:04,480
mitigated

74
00:03:04,480 --> 00:03:06,640
and last but not least we've seen kind

75
00:03:06,640 --> 00:03:08,640
of a recent event uh

76
00:03:08,640 --> 00:03:10,800
event builder is a platform for hosting

77
00:03:10,800 --> 00:03:13,280
webinars integrated into

78
00:03:13,280 --> 00:03:14,879
microsoft teams

79
00:03:14,879 --> 00:03:17,680
and it turns out that in a public bucket

80
00:03:17,680 --> 00:03:20,239
which was supposed to store recordings

81
00:03:20,239 --> 00:03:22,720
to be shared publicly

82
00:03:22,720 --> 00:03:25,440
also private data was shared and

83
00:03:25,440 --> 00:03:28,239
attackers were able to get hold of that

84
00:03:28,239 --> 00:03:29,040
this

85
00:03:29,040 --> 00:03:31,360
was as a result of a misconfiguration in

86
00:03:31,360 --> 00:03:32,560
the settings

87
00:03:32,560 --> 00:03:33,760
yet again

88
00:03:33,760 --> 00:03:36,159
something that developers are now doing

89
00:03:36,159 --> 00:03:38,879
more and more

90
00:03:39,040 --> 00:03:40,400
so while

91
00:03:40,400 --> 00:03:41,840
normal people

92
00:03:41,840 --> 00:03:44,000
spend most of their time in the browsers

93
00:03:44,000 --> 00:03:46,400
and in their mobile applications and

94
00:03:46,400 --> 00:03:48,319
lately netflix

95
00:03:48,319 --> 00:03:50,319
developers are doing

96
00:03:50,319 --> 00:03:52,480
most of the time code related stuff

97
00:03:52,480 --> 00:03:55,280
writing testing and improving and

98
00:03:55,280 --> 00:03:57,920
they're doing it inside a code editor or

99
00:03:57,920 --> 00:03:59,680
an ide

100
00:03:59,680 --> 00:04:00,560
so

101
00:04:00,560 --> 00:04:03,519
the ide is used for editing code

102
00:04:03,519 --> 00:04:06,720
building it and debugging it and

103
00:04:06,720 --> 00:04:09,519
integrating with various environments

104
00:04:09,519 --> 00:04:12,080
that allow for building applications so

105
00:04:12,080 --> 00:04:14,239
you have your version control systems

106
00:04:14,239 --> 00:04:16,959
like github and bitbucket ci cd

107
00:04:16,959 --> 00:04:19,358
pipelines and various

108
00:04:19,358 --> 00:04:22,560
cloud hosting and deployment ecosystems

109
00:04:22,560 --> 00:04:25,680
so all of these are bundled in the ide

110
00:04:25,680 --> 00:04:28,160
as well as maybe some other unrelated

111
00:04:28,160 --> 00:04:30,560
stuff that are more like fun but the

112
00:04:30,560 --> 00:04:32,400
idea is like the

113
00:04:32,400 --> 00:04:34,400
center of gravity for

114
00:04:34,400 --> 00:04:36,240
the work

115
00:04:36,240 --> 00:04:39,120
so if you will search for the top ides

116
00:04:39,120 --> 00:04:40,960
you will see that up there in the top

117
00:04:40,960 --> 00:04:43,520
three and you will see visual studio

118
00:04:43,520 --> 00:04:46,720
code with one of the most popular hits

119
00:04:46,720 --> 00:04:49,360
so if you look at it a bit closely and

120
00:04:49,360 --> 00:04:52,400
we can see that it has around 14 million

121
00:04:52,400 --> 00:04:55,040
active users out of the world's

122
00:04:55,040 --> 00:04:58,000
poor 24 million developers which is like

123
00:04:58,000 --> 00:04:59,120
pretty

124
00:04:59,120 --> 00:05:00,880
big numbers

125
00:05:00,880 --> 00:05:02,639
it has a fairly

126
00:05:02,639 --> 00:05:05,199
good industry adoption with more than 4k

127
00:05:05,199 --> 00:05:07,600
companies using it worldwide

128
00:05:07,600 --> 00:05:11,440
and it has an extension marketplace

129
00:05:11,440 --> 00:05:13,520
so you might argue yes visual studio

130
00:05:13,520 --> 00:05:16,639
code is not a full-blown ide but once

131
00:05:16,639 --> 00:05:19,280
you install extensions in it

132
00:05:19,280 --> 00:05:21,680
you can turn it from its out of the box

133
00:05:21,680 --> 00:05:24,960
features into this mighty environment

134
00:05:24,960 --> 00:05:26,720
and you can add language support

135
00:05:26,720 --> 00:05:29,759
debuggers parsers and all of the

136
00:05:29,759 --> 00:05:31,440
integrations that we've seen and

137
00:05:31,440 --> 00:05:33,840
essentially turn it into a kind of a

138
00:05:33,840 --> 00:05:36,720
full-blown ide

139
00:05:36,720 --> 00:05:39,120
so if we focus on its extension

140
00:05:39,120 --> 00:05:41,680
marketplace we see that it has the

141
00:05:41,680 --> 00:05:44,560
largest marketplace of all with almost

142
00:05:44,560 --> 00:05:46,400
25 000

143
00:05:46,400 --> 00:05:48,720
extensions which is around

144
00:05:48,720 --> 00:05:51,520
four times fold bigger than the follower

145
00:05:51,520 --> 00:05:55,360
which is jetbrains with almost 6000 so

146
00:05:55,360 --> 00:05:59,280
that is a lot a lot of extensions

147
00:05:59,280 --> 00:06:02,319
so essentially as an extension is an npm

148
00:06:02,319 --> 00:06:03,520
project

149
00:06:03,520 --> 00:06:05,919
with an added visual studio code

150
00:06:05,919 --> 00:06:08,560
extension api that allows your extension

151
00:06:08,560 --> 00:06:10,800
to integrate with visual studio code

152
00:06:10,800 --> 00:06:11,759
itself

153
00:06:11,759 --> 00:06:13,280
and the sources are written in

154
00:06:13,280 --> 00:06:15,520
javascript and typescript and you

155
00:06:15,520 --> 00:06:17,919
naturally define a package.json manifest

156
00:06:17,919 --> 00:06:20,479
file and everything is bundled into a

157
00:06:20,479 --> 00:06:22,319
zip archive

158
00:06:22,319 --> 00:06:25,199
which is called a vsix file

159
00:06:25,199 --> 00:06:27,120
another important thing to notice is

160
00:06:27,120 --> 00:06:29,280
that most of the extensions are open

161
00:06:29,280 --> 00:06:31,039
source projects so you can see the

162
00:06:31,039 --> 00:06:34,319
source code hosted on github and other

163
00:06:34,319 --> 00:06:36,479
platforms

164
00:06:36,479 --> 00:06:39,199
so how secure are these

165
00:06:39,199 --> 00:06:42,240
if we look at cve list we see that

166
00:06:42,240 --> 00:06:44,000
most of the vulnerabilities that are

167
00:06:44,000 --> 00:06:46,720
found in vs code are called execution

168
00:06:46,720 --> 00:06:49,440
ones which are pretty severe

169
00:06:49,440 --> 00:06:53,039
um like two examples of this uh

170
00:06:53,039 --> 00:06:55,120
one was done before we did our research

171
00:06:55,120 --> 00:06:56,960
the other was published published

172
00:06:56,960 --> 00:06:59,440
afterwards the first one is in a gitlab

173
00:06:59,440 --> 00:07:00,840
extension which

174
00:07:00,840 --> 00:07:04,800
allowed to clone a repository that had

175
00:07:04,800 --> 00:07:07,520
the gitlab a malicious gitlab binary in

176
00:07:07,520 --> 00:07:09,360
it and it was executed because the

177
00:07:09,360 --> 00:07:12,240
extension did not specified a specific

178
00:07:12,240 --> 00:07:15,120
path for which it run the binary so if

179
00:07:15,120 --> 00:07:18,240
we look in the clone directory and if it

180
00:07:18,240 --> 00:07:20,960
finds the binary there it can execute it

181
00:07:20,960 --> 00:07:24,319
this applies only on windows

182
00:07:24,319 --> 00:07:25,680
another

183
00:07:25,680 --> 00:07:27,599
example is in the visual studio called

184
00:07:27,599 --> 00:07:30,400
remote development extension so a call

185
00:07:30,400 --> 00:07:33,520
to the ssh binary which was supposed to

186
00:07:33,520 --> 00:07:36,080
connect to a remote host

187
00:07:36,080 --> 00:07:38,880
allowed an attacker

188
00:07:38,880 --> 00:07:41,280
to specify additional command line

189
00:07:41,280 --> 00:07:42,960
arguments

190
00:07:42,960 --> 00:07:45,919
and run arbitrary commands

191
00:07:45,919 --> 00:07:49,599
so 9 out of 29 is pretty good right it's

192
00:07:49,599 --> 00:07:52,080
like 30 something percent but if you

193
00:07:52,080 --> 00:07:54,800
look at it in comparison for for to the

194
00:07:54,800 --> 00:07:57,520
size of the marketplace that is pretty

195
00:07:57,520 --> 00:08:01,120
thin right nine out of 25 000 extensions

196
00:08:01,120 --> 00:08:03,680
we expect that there probably be more

197
00:08:03,680 --> 00:08:06,240
vulnerabilities there

198
00:08:06,240 --> 00:08:08,560
so our goal was to discover and exploit

199
00:08:08,560 --> 00:08:10,960
vulnerabilities in popular extensions

200
00:08:10,960 --> 00:08:12,879
that could potentially

201
00:08:12,879 --> 00:08:16,479
compromise an entire organization

202
00:08:16,479 --> 00:08:18,960
and we built a kind of a processing

203
00:08:18,960 --> 00:08:20,560
pipeline to

204
00:08:20,560 --> 00:08:22,800
help us digest this

205
00:08:22,800 --> 00:08:24,479
big data set

206
00:08:24,479 --> 00:08:27,520
so starting from the left we basically

207
00:08:27,520 --> 00:08:30,319
downloaded all of the extensions and

208
00:08:30,319 --> 00:08:32,880
stored them in google cloud storage so

209
00:08:32,880 --> 00:08:34,880
you can see here like a snippet of that

210
00:08:34,880 --> 00:08:37,839
just a bunch of vsix files

211
00:08:37,839 --> 00:08:40,479
and afterwards we extracted the sources

212
00:08:40,479 --> 00:08:43,599
along with the configs and at this point

213
00:08:43,599 --> 00:08:45,200
you can basically

214
00:08:45,200 --> 00:08:47,680
run whatever tools you want on this data

215
00:08:47,680 --> 00:08:50,560
set so you can run malware detections

216
00:08:50,560 --> 00:08:53,519
like yara maybe your static analysis

217
00:08:53,519 --> 00:08:56,240
tools some dynamic analysis and you can

218
00:08:56,240 --> 00:08:58,240
make it concurrent and really really

219
00:08:58,240 --> 00:09:00,640
fast by using a google cloud or any

220
00:09:00,640 --> 00:09:02,080
other cloud

221
00:09:02,080 --> 00:09:03,760
compute engine

222
00:09:03,760 --> 00:09:06,160
the results were uploaded into a google

223
00:09:06,160 --> 00:09:08,640
cloud big bigtable and we were able to

224
00:09:08,640 --> 00:09:11,519
run some queries on the data set and

225
00:09:11,519 --> 00:09:12,480
find

226
00:09:12,480 --> 00:09:15,200
some interesting stuff

227
00:09:15,200 --> 00:09:18,880
so to the findings tyrell back to you

228
00:09:18,880 --> 00:09:20,080
okay

229
00:09:20,080 --> 00:09:22,399
the first one is instant markdown

230
00:09:22,399 --> 00:09:27,040
extension it has like 10 um 100 000 more

231
00:09:27,040 --> 00:09:29,920
than 100 000 installs

232
00:09:29,920 --> 00:09:33,440
and essentially it is the preview for

233
00:09:33,440 --> 00:09:35,279
for markdown files

234
00:09:35,279 --> 00:09:36,399
on the left

235
00:09:36,399 --> 00:09:38,480
left side you can see visual studio code

236
00:09:38,480 --> 00:09:40,880
with installed extension and on the

237
00:09:40,880 --> 00:09:43,519
right right side you can see the browser

238
00:09:43,519 --> 00:09:45,279
where the

239
00:09:45,279 --> 00:09:47,760
markdown file is

240
00:09:47,760 --> 00:09:49,760
pre-rendered

241
00:09:49,760 --> 00:09:52,000
but before we start to talk about

242
00:09:52,000 --> 00:09:54,959
vulnerability of this extension

243
00:09:54,959 --> 00:09:57,839
let's have a quick recap about what is

244
00:09:57,839 --> 00:10:01,120
of traversal vulnerability

245
00:10:01,120 --> 00:10:02,320
basically

246
00:10:02,320 --> 00:10:06,000
whenever a user can control a file name

247
00:10:06,000 --> 00:10:08,320
uh like in this example you can see get

248
00:10:08,320 --> 00:10:11,320
parameter file name equals to

249
00:10:11,320 --> 00:10:12,880
gift.png

250
00:10:12,880 --> 00:10:14,160
and

251
00:10:14,160 --> 00:10:16,560
in a lot of cases with validation done

252
00:10:16,560 --> 00:10:19,920
not properly hiker can specify dot dot

253
00:10:19,920 --> 00:10:21,440
slash

254
00:10:21,440 --> 00:10:24,240
payload to get outside of the

255
00:10:24,240 --> 00:10:26,800
home directory of the server and

256
00:10:26,800 --> 00:10:28,320
eventually get

257
00:10:28,320 --> 00:10:30,880
any file from the server

258
00:10:30,880 --> 00:10:33,200
and then the in this case you can see

259
00:10:33,200 --> 00:10:36,240
etc pass vd file which contains

260
00:10:36,240 --> 00:10:39,040
uh user names and home directories kind

261
00:10:39,040 --> 00:10:42,079
of classical payload for uh of traversal

262
00:10:42,079 --> 00:10:44,160
vulnerability

263
00:10:44,160 --> 00:10:46,959
let's have a look at these codes needed

264
00:10:46,959 --> 00:10:50,160
it's a simple express application as you

265
00:10:50,160 --> 00:10:53,040
can see in line 5

266
00:10:53,040 --> 00:10:56,240
it works in a user studio server public

267
00:10:56,240 --> 00:10:58,320
html directory

268
00:10:58,320 --> 00:11:00,800
and online seven we have the only

269
00:11:00,800 --> 00:11:02,399
endpoint which

270
00:11:02,399 --> 00:11:04,560
um which is

271
00:11:04,560 --> 00:11:07,120
eventually going to solve any file from

272
00:11:07,120 --> 00:11:08,560
this directory

273
00:11:08,560 --> 00:11:11,440
uh using request url this server is

274
00:11:11,440 --> 00:11:14,480
listed on port 888

275
00:11:14,480 --> 00:11:17,360
and if we for example open it in the

276
00:11:17,360 --> 00:11:20,720
browser and specify slash index.html

277
00:11:20,720 --> 00:11:23,360
you can see that request url will be

278
00:11:23,360 --> 00:11:24,680
exactly slash

279
00:11:24,680 --> 00:11:26,240
index.html

280
00:11:26,240 --> 00:11:27,279
and

281
00:11:27,279 --> 00:11:31,760
the file variable line eight uh

282
00:11:31,760 --> 00:11:34,000
will be the the full path to the

283
00:11:34,000 --> 00:11:36,320
index.html so eventually we will sort

284
00:11:36,320 --> 00:11:38,240
this file to user

285
00:11:38,240 --> 00:11:41,040
but if you specify uh something like

286
00:11:41,040 --> 00:11:43,680
this basically question mark slash

287
00:11:43,680 --> 00:11:47,200
dot dot slash and so on ptc pass vd

288
00:11:47,200 --> 00:11:50,000
uh we're gonna have the like the path

289
00:11:50,000 --> 00:11:51,519
journey will

290
00:11:51,519 --> 00:11:54,160
uh produce this uh

291
00:11:54,160 --> 00:11:57,519
this path absolute path on your uh

292
00:11:57,519 --> 00:12:00,000
on your notebook or

293
00:12:00,000 --> 00:12:02,000
computer and eventually path resolve

294
00:12:02,000 --> 00:12:04,880
will resolve it to etc vd so

295
00:12:04,880 --> 00:12:08,079
far outside of the home directory

296
00:12:08,079 --> 00:12:10,959
um interesting trick here you may you

297
00:12:10,959 --> 00:12:13,279
may notice the question mark

298
00:12:13,279 --> 00:12:16,880
it's uh because browser by people try to

299
00:12:16,880 --> 00:12:20,560
resolve dot dot slash segments in off uh

300
00:12:20,560 --> 00:12:22,079
of the url

301
00:12:22,079 --> 00:12:25,040
and if you use the

302
00:12:25,040 --> 00:12:27,839
simply the slash dot slash uh

303
00:12:27,839 --> 00:12:31,360
payload uh browser will just uh throw

304
00:12:31,360 --> 00:12:34,240
away all the dot slash parts and

305
00:12:34,240 --> 00:12:38,000
your uh path uh will be etc pass vd

306
00:12:38,000 --> 00:12:40,480
directly but if you use question mark

307
00:12:40,480 --> 00:12:43,200
your path actually will be just a slash

308
00:12:43,200 --> 00:12:45,120
and everything that goes after the

309
00:12:45,120 --> 00:12:47,279
question mark will be query parameters

310
00:12:47,279 --> 00:12:49,360
and browser obviously will not sanitize

311
00:12:49,360 --> 00:12:52,800
the query parameters anyhow

312
00:12:52,800 --> 00:12:54,480
you may ask why

313
00:12:54,480 --> 00:12:56,959
why i'm talking about path traversal

314
00:12:56,959 --> 00:12:59,839
vulnerability in context of

315
00:12:59,839 --> 00:13:02,399
visual studio code extensions

316
00:13:02,399 --> 00:13:04,320
actually

317
00:13:04,320 --> 00:13:06,880
because the extension inside

318
00:13:06,880 --> 00:13:09,920
has the preview http server so we have

319
00:13:09,920 --> 00:13:12,639
the visual studio code inside we have

320
00:13:12,639 --> 00:13:15,040
instant markdown extension and inside we

321
00:13:15,040 --> 00:13:17,040
have preview http server which is

322
00:13:17,040 --> 00:13:21,000
vulnerable to but traversal

323
00:13:21,519 --> 00:13:24,320
again it is a local web server so so

324
00:13:24,320 --> 00:13:25,120
what

325
00:13:25,120 --> 00:13:28,079
um you may say you have the firewall

326
00:13:28,079 --> 00:13:30,079
maybe you don't have even static ap

327
00:13:30,079 --> 00:13:34,959
address or even work via vpn so no no

328
00:13:34,959 --> 00:13:37,519
direct connection to your laptop

329
00:13:37,519 --> 00:13:38,560
but

330
00:13:38,560 --> 00:13:40,399
actually if

331
00:13:40,399 --> 00:13:42,880
like any website can make requests to

332
00:13:42,880 --> 00:13:44,639
your localhost

333
00:13:44,639 --> 00:13:47,279
because of cross site requests

334
00:13:47,279 --> 00:13:48,959
functionality

335
00:13:48,959 --> 00:13:49,760
and

336
00:13:49,760 --> 00:13:52,720
you can see like if you open evil.com

337
00:13:52,720 --> 00:13:55,199
evil.com can make get requests to your

338
00:13:55,199 --> 00:13:57,519
localhost 888

339
00:13:57,519 --> 00:14:00,320
and eventually get some data out of it

340
00:14:00,320 --> 00:14:02,959
let's try this out um

341
00:14:02,959 --> 00:14:05,519
downstairs here you can see

342
00:14:05,519 --> 00:14:08,320
uh google chrome debugger

343
00:14:08,320 --> 00:14:09,440
the bugger

344
00:14:09,440 --> 00:14:10,560
console

345
00:14:10,560 --> 00:14:11,600
and

346
00:14:11,600 --> 00:14:14,839
you can see we are on the http

347
00:14:14,839 --> 00:14:17,120
example.com domain

348
00:14:17,120 --> 00:14:19,680
let's try to make the fetch request to

349
00:14:19,680 --> 00:14:21,760
localhost and you will see something

350
00:14:21,760 --> 00:14:25,040
like example.com has been blocked by

351
00:14:25,040 --> 00:14:26,639
course policy

352
00:14:26,639 --> 00:14:27,839
so

353
00:14:27,839 --> 00:14:31,519
course is cross origin resource sharing

354
00:14:31,519 --> 00:14:35,120
it's kind of security policy implemented

355
00:14:35,120 --> 00:14:36,639
by

356
00:14:36,639 --> 00:14:40,320
all modern browsers and

357
00:14:40,320 --> 00:14:43,519
if if we not go deep into details

358
00:14:43,519 --> 00:14:46,480
by by default it doesn't allow

359
00:14:46,480 --> 00:14:48,480
one domain make

360
00:14:48,480 --> 00:14:50,800
any request to another domain

361
00:14:50,800 --> 00:14:53,760
uh in this like on this picture you can

362
00:14:53,760 --> 00:14:55,600
see that domain a

363
00:14:55,600 --> 00:14:59,440
can do any request inside the domain a

364
00:14:59,440 --> 00:15:02,560
but cannot do any request to the main b

365
00:15:02,560 --> 00:15:03,440
but

366
00:15:03,440 --> 00:15:06,480
you can change this behavior by changing

367
00:15:06,480 --> 00:15:09,360
http headers

368
00:15:09,360 --> 00:15:10,320
so

369
00:15:10,320 --> 00:15:13,199
chrome you win nothing to do with that

370
00:15:13,199 --> 00:15:14,959
right no

371
00:15:14,959 --> 00:15:17,040
actually if you google how to bypass

372
00:15:17,040 --> 00:15:19,920
course uh top 10 answers from google

373
00:15:19,920 --> 00:15:22,880
will be like you need access on the

374
00:15:22,880 --> 00:15:24,720
website you want to hack

375
00:15:24,720 --> 00:15:27,279
and it makes a lot of sense right as we

376
00:15:27,279 --> 00:15:29,600
figure it out you cannot do

377
00:15:29,600 --> 00:15:32,079
uh get requests from evil.com to

378
00:15:32,079 --> 00:15:34,240
localhost because default

379
00:15:34,240 --> 00:15:36,560
because default course policy attacked

380
00:15:36,560 --> 00:15:38,480
you from doing that

381
00:15:38,480 --> 00:15:39,680
but

382
00:15:39,680 --> 00:15:43,120
if you have excesses uh vulnerability on

383
00:15:43,120 --> 00:15:44,399
localhost

384
00:15:44,399 --> 00:15:47,040
the payload can you get requests to your

385
00:15:47,040 --> 00:15:49,839
localhost because it's the same origin

386
00:15:49,839 --> 00:15:51,600
the same domain

387
00:15:51,600 --> 00:15:52,639
and

388
00:15:52,639 --> 00:15:54,720
it can make get our post request to

389
00:15:54,720 --> 00:15:57,759
evil.com because evil.com can explicitly

390
00:15:57,759 --> 00:16:01,519
specify headers to allow that

391
00:16:01,519 --> 00:16:04,720
so sounds like a plan right

392
00:16:04,720 --> 00:16:05,920
um

393
00:16:05,920 --> 00:16:08,320
the only question right now is how to

394
00:16:08,320 --> 00:16:12,079
get access vulnerability on um

395
00:16:12,079 --> 00:16:14,240
on this web server

396
00:16:14,240 --> 00:16:15,199
uh

397
00:16:15,199 --> 00:16:18,560
and one one uh thing allows us to do

398
00:16:18,560 --> 00:16:21,360
that basically as you've seen in line

399
00:16:21,360 --> 00:16:23,440
five we have uh

400
00:16:23,440 --> 00:16:26,160
in like we are in the working directory

401
00:16:26,160 --> 00:16:29,279
of the of current user and if you think

402
00:16:29,279 --> 00:16:32,720
about it all your projects opening in

403
00:16:32,720 --> 00:16:35,680
visual studio code will be inside your

404
00:16:35,680 --> 00:16:38,480
home folder so we are we always work

405
00:16:38,480 --> 00:16:40,720
relative to home folder

406
00:16:40,720 --> 00:16:43,839
and there is one folder we can uh

407
00:16:43,839 --> 00:16:46,800
we can put the payload it's a downloads

408
00:16:46,800 --> 00:16:50,000
folder basically if we can make your

409
00:16:50,000 --> 00:16:52,880
browser to download file

410
00:16:52,880 --> 00:16:56,480
uh we can craft a part traversal payload

411
00:16:56,480 --> 00:17:01,120
which will open this file in the browser

412
00:17:01,120 --> 00:17:03,759
and it's easy to do like this screenshot

413
00:17:03,759 --> 00:17:06,799
of google chrome browser and uh code

414
00:17:06,799 --> 00:17:08,880
snippet you can see

415
00:17:08,880 --> 00:17:12,799
super easy like we create a tag

416
00:17:12,799 --> 00:17:14,240
and

417
00:17:14,240 --> 00:17:18,559
we just set attribute href to data

418
00:17:18,559 --> 00:17:21,760
data url with the classical payload of

419
00:17:21,760 --> 00:17:24,000
script alert one classical exercise

420
00:17:24,000 --> 00:17:25,679
payload

421
00:17:25,679 --> 00:17:29,280
and importantly we call set attribute

422
00:17:29,280 --> 00:17:32,960
download to payload html and whenever we

423
00:17:32,960 --> 00:17:35,840
call a dot click basically browser will

424
00:17:35,840 --> 00:17:37,360
automatically

425
00:17:37,360 --> 00:17:39,440
download file and

426
00:17:39,440 --> 00:17:41,120
on mac

427
00:17:41,120 --> 00:17:43,120
for example it will be

428
00:17:43,120 --> 00:17:45,520
your home folder slash download slash

429
00:17:45,520 --> 00:17:47,840
payload.html

430
00:17:47,840 --> 00:17:50,080
so now you know that

431
00:17:50,080 --> 00:17:52,799
after this section user laptop probably

432
00:17:52,799 --> 00:17:55,280
have like in most of the cases will have

433
00:17:55,280 --> 00:17:56,000
the

434
00:17:56,000 --> 00:17:59,520
payload html file right into

435
00:17:59,520 --> 00:18:02,320
in the downloads folder

436
00:18:02,320 --> 00:18:05,200
and now we have all pieces of the puzzle

437
00:18:05,200 --> 00:18:07,360
together basically

438
00:18:07,360 --> 00:18:10,559
a hacker can trick or convince user to

439
00:18:10,559 --> 00:18:12,720
open evil.com

440
00:18:12,720 --> 00:18:16,559
then eval.com is uh used using the

441
00:18:16,559 --> 00:18:18,799
previous code snippet uh trigger

442
00:18:18,799 --> 00:18:20,160
download

443
00:18:20,160 --> 00:18:23,120
of payload.html file

444
00:18:23,120 --> 00:18:28,320
uh then we can open uh your localhost

445
00:18:28,320 --> 00:18:31,760
in iframe using the previous xss payload

446
00:18:31,760 --> 00:18:34,480
so now on your localhost you have the

447
00:18:34,480 --> 00:18:38,559
script from payload.html running

448
00:18:38,559 --> 00:18:42,080
this script can make get request to the

449
00:18:42,080 --> 00:18:44,160
local host because it's the same origin

450
00:18:44,160 --> 00:18:46,240
as as we talked

451
00:18:46,240 --> 00:18:49,600
and eventually the same access payload

452
00:18:49,600 --> 00:18:52,320
can make post requests directly to hiker

453
00:18:52,320 --> 00:18:55,200
and send data of your etc possibility in

454
00:18:55,200 --> 00:18:57,600
this case

455
00:18:57,600 --> 00:19:00,240
um let's have a look at the demo

456
00:19:00,240 --> 00:19:01,760
demos

457
00:19:01,760 --> 00:19:04,000
is two parts

458
00:19:04,000 --> 00:19:07,039
left side is how victims see the attack

459
00:19:07,039 --> 00:19:09,120
and the right side is how

460
00:19:09,120 --> 00:19:11,200
hikers see the attack

461
00:19:11,200 --> 00:19:14,240
let's start from from the victim one

462
00:19:14,240 --> 00:19:15,360
uh

463
00:19:15,360 --> 00:19:18,240
you can see again um

464
00:19:18,240 --> 00:19:20,000
visual studio code is running on the

465
00:19:20,000 --> 00:19:22,799
left side and user type something and it

466
00:19:22,799 --> 00:19:25,919
immediately renders inside the

467
00:19:25,919 --> 00:19:29,919
instant markdown extension in a browser

468
00:19:29,919 --> 00:19:33,520
and uh one more action happening here is

469
00:19:33,520 --> 00:19:36,240
in terminal we put

470
00:19:36,240 --> 00:19:40,400
secret uh text into ssh slash my secret

471
00:19:40,400 --> 00:19:43,360
key just to have something uh

472
00:19:43,360 --> 00:19:47,200
what hiker aims to store the steel

473
00:19:47,200 --> 00:19:50,480
and obviously a victim should click to

474
00:19:50,480 --> 00:19:52,210
malicious link

475
00:19:52,210 --> 00:19:53,840
[Music]

476
00:19:53,840 --> 00:19:56,480
it's happening here and immediately we

477
00:19:56,480 --> 00:19:59,280
can see rick actually picture

478
00:19:59,280 --> 00:20:02,159
in the browser and some obscure file

479
00:20:02,159 --> 00:20:04,720
name was downloaded

480
00:20:04,720 --> 00:20:07,440
basically nothing else happened so

481
00:20:07,440 --> 00:20:09,600
for the victim it's how exploit looks

482
00:20:09,600 --> 00:20:10,799
like

483
00:20:10,799 --> 00:20:12,080
and for

484
00:20:12,080 --> 00:20:14,159
uh for the hiker

485
00:20:14,159 --> 00:20:15,919
we just run

486
00:20:15,919 --> 00:20:18,559
a php server on the left side just to

487
00:20:18,559 --> 00:20:20,960
host and exploit

488
00:20:20,960 --> 00:20:22,559
and

489
00:20:22,559 --> 00:20:26,080
and listen for some logs from user

490
00:20:26,080 --> 00:20:28,400
and just in a couple of seconds we can

491
00:20:28,400 --> 00:20:29,760
see

492
00:20:29,760 --> 00:20:31,840
that user

493
00:20:31,840 --> 00:20:35,120
user opened the file opened the exploit

494
00:20:35,120 --> 00:20:37,919
using the chrome browser and we were

495
00:20:37,919 --> 00:20:40,880
able to steal

496
00:20:40,880 --> 00:20:43,840
my secret key which is equal to secret

497
00:20:43,840 --> 00:20:46,159
in this case

498
00:20:46,159 --> 00:20:47,360
so yeah

499
00:20:47,360 --> 00:20:48,480
in

500
00:20:48,480 --> 00:20:50,960
from from this point we can steal any

501
00:20:50,960 --> 00:20:54,320
file from the user's laptop

502
00:20:54,320 --> 00:20:57,679
um that's it about the instant markdown

503
00:20:57,679 --> 00:20:59,679
extension let's switch to another one

504
00:20:59,679 --> 00:21:01,600
another one is the latex workshop

505
00:21:01,600 --> 00:21:02,960
extension

506
00:21:02,960 --> 00:21:05,520
it has like one and a half million

507
00:21:05,520 --> 00:21:09,200
downloads a bit more than previous one

508
00:21:09,200 --> 00:21:10,799
um and

509
00:21:10,799 --> 00:21:14,000
um latex itself it's a marked

510
00:21:14,000 --> 00:21:16,799
markup language and one of the good

511
00:21:16,799 --> 00:21:19,440
features of this language is

512
00:21:19,440 --> 00:21:21,360
ability to

513
00:21:21,360 --> 00:21:23,280
render

514
00:21:23,280 --> 00:21:26,159
markup language to pdf

515
00:21:26,159 --> 00:21:29,039
and it's done almost the same way as

516
00:21:29,039 --> 00:21:31,520
we've seen in the previous

517
00:21:31,520 --> 00:21:34,159
extension basically

518
00:21:34,159 --> 00:21:36,320
inside the visual studio code we have

519
00:21:36,320 --> 00:21:38,960
latex workshop extension

520
00:21:38,960 --> 00:21:40,240
and

521
00:21:40,240 --> 00:21:44,159
it's on the http server to render pdf

522
00:21:44,159 --> 00:21:46,320
preview page

523
00:21:46,320 --> 00:21:48,320
with one addition

524
00:21:48,320 --> 00:21:51,200
actually pdf preview page is able to

525
00:21:51,200 --> 00:21:52,960
connect back to

526
00:21:52,960 --> 00:21:55,919
latex workshop extension via websocket

527
00:21:55,919 --> 00:21:58,799
server

528
00:21:58,799 --> 00:22:00,559
this is

529
00:22:00,559 --> 00:22:03,760
a code snippet kind of i'm doing it i'm

530
00:22:03,760 --> 00:22:06,559
showing it the same way as i did for uh

531
00:22:06,559 --> 00:22:09,440
for for instance markdown

532
00:22:09,440 --> 00:22:10,480
and

533
00:22:10,480 --> 00:22:12,559
this is super simplified version of

534
00:22:12,559 --> 00:22:14,720
vulnerable code

535
00:22:14,720 --> 00:22:17,120
you can see again express

536
00:22:17,120 --> 00:22:20,720
application with one end point

537
00:22:20,720 --> 00:22:22,320
on line six

538
00:22:22,320 --> 00:22:23,360
and

539
00:22:23,360 --> 00:22:26,240
it's just static file endpoint which

540
00:22:26,240 --> 00:22:30,240
serves the favicon.i ico

541
00:22:30,240 --> 00:22:33,280
and we have as well a websocket

542
00:22:33,280 --> 00:22:34,640
connection

543
00:22:34,640 --> 00:22:35,760
listening

544
00:22:35,760 --> 00:22:39,200
on the same port as the http server

545
00:22:39,200 --> 00:22:42,000
and on line 12 you can see vs code.n

546
00:22:42,000 --> 00:22:45,840
open external this is api of

547
00:22:45,840 --> 00:22:48,959
visual studio code

548
00:22:49,200 --> 00:22:50,480
and this

549
00:22:50,480 --> 00:22:53,919
socket on open actually listen for

550
00:22:53,919 --> 00:22:57,039
clicks inside pdf file

551
00:22:57,039 --> 00:23:00,799
let's have a look at open external api

552
00:23:00,799 --> 00:23:04,400
from visual studio code documentation

553
00:23:04,400 --> 00:23:07,440
which is able to open http and https

554
00:23:07,440 --> 00:23:08,799
links

555
00:23:08,799 --> 00:23:10,640
just in the browser it will open a

556
00:23:10,640 --> 00:23:13,360
browser new browser tab and

557
00:23:13,360 --> 00:23:15,039
render the

558
00:23:15,039 --> 00:23:18,480
html page which is able to open mail

559
00:23:18,480 --> 00:23:20,880
client via the mail to

560
00:23:20,880 --> 00:23:22,480
url schema

561
00:23:22,480 --> 00:23:25,200
and also it has like vs code for

562
00:23:25,200 --> 00:23:26,240
something

563
00:23:26,240 --> 00:23:29,440
but what if you specify file

564
00:23:29,440 --> 00:23:33,120
scheme in this case so actually uh it

565
00:23:33,120 --> 00:23:35,280
will use like visual studio code will

566
00:23:35,280 --> 00:23:37,840
use default action of your

567
00:23:37,840 --> 00:23:39,679
laptop for files

568
00:23:39,679 --> 00:23:41,120
and in

569
00:23:41,120 --> 00:23:43,679
case if it's binary file it's just gonna

570
00:23:43,679 --> 00:23:46,880
run this binary and like if you specify

571
00:23:46,880 --> 00:23:48,840
system applications

572
00:23:48,840 --> 00:23:50,400
calculator

573
00:23:50,400 --> 00:23:52,720
application is just gonna spawn the

574
00:23:52,720 --> 00:23:55,360
application so

575
00:23:55,360 --> 00:23:57,679
basically we have a common transaction

576
00:23:57,679 --> 00:24:00,480
vulnerability here because if we are

577
00:24:00,480 --> 00:24:02,559
able to connect to your

578
00:24:02,559 --> 00:24:05,520
websocket server we can execute any

579
00:24:05,520 --> 00:24:08,799
binary on your laptop

580
00:24:09,120 --> 00:24:11,760
and this is diagram what what we're

581
00:24:11,760 --> 00:24:13,760
going to do what we want to try to

582
00:24:13,760 --> 00:24:15,360
achieve

583
00:24:15,360 --> 00:24:17,440
actually if you open

584
00:24:17,440 --> 00:24:20,240
evil.com in chrome browser

585
00:24:20,240 --> 00:24:23,200
we need to connect your websocket server

586
00:24:23,200 --> 00:24:26,080
and execute malicious payload

587
00:24:26,080 --> 00:24:29,120
sounds like a plan again

588
00:24:29,120 --> 00:24:31,279
but one problem we have on the way to

589
00:24:31,279 --> 00:24:33,200
exploit it is

590
00:24:33,200 --> 00:24:36,640
uh that server actually starts on random

591
00:24:36,640 --> 00:24:37,679
port

592
00:24:37,679 --> 00:24:40,000
and um

593
00:24:40,000 --> 00:24:44,640
in mac we have like 16 000 ports

594
00:24:44,640 --> 00:24:46,400
in this random range

595
00:24:46,400 --> 00:24:48,159
so um

596
00:24:48,159 --> 00:24:51,520
let's try to simply brute force them

597
00:24:51,520 --> 00:24:54,000
and uh like this is

598
00:24:54,000 --> 00:24:56,080
really tiny javascript

599
00:24:56,080 --> 00:24:58,640
code snippet basically we

600
00:24:58,640 --> 00:25:01,679
go through all possible random ports and

601
00:25:01,679 --> 00:25:04,240
open web circuit connection

602
00:25:04,240 --> 00:25:07,360
and online 21 if

603
00:25:07,360 --> 00:25:10,159
if you are able to if we were successful

604
00:25:10,159 --> 00:25:12,799
to open the connection we can send

605
00:25:12,799 --> 00:25:15,520
malicious payload online 24.

606
00:25:15,520 --> 00:25:17,520
let's try this out

607
00:25:17,520 --> 00:25:20,230
actually it never finished and

608
00:25:20,230 --> 00:25:21,600
[Music]

609
00:25:21,600 --> 00:25:23,120
it works for

610
00:25:23,120 --> 00:25:25,120
firefox but

611
00:25:25,120 --> 00:25:28,320
chrome actually have a hidden mechanism

612
00:25:28,320 --> 00:25:29,279
to

613
00:25:29,279 --> 00:25:32,640
protect from uh brute forcing ports for

614
00:25:32,640 --> 00:25:36,000
uh web circuit connections uh and after

615
00:25:36,000 --> 00:25:38,799
tens attempt i believe like it will be

616
00:25:38,799 --> 00:25:41,120
throttling five seconds each attempt in

617
00:25:41,120 --> 00:25:43,520
each next attempt so it will take

618
00:25:43,520 --> 00:25:46,400
forever so chrome you did it again you

619
00:25:46,400 --> 00:25:47,200
win

620
00:25:47,200 --> 00:25:50,080
nothing to do with that no

621
00:25:50,080 --> 00:25:52,240
we can leverage the fact

622
00:25:52,240 --> 00:25:53,039
that

623
00:25:53,039 --> 00:25:56,320
http server is running on the same port

624
00:25:56,320 --> 00:25:58,799
as websocket server

625
00:25:58,799 --> 00:25:59,919
and

626
00:25:59,919 --> 00:26:02,960
like instead of brute forcing

627
00:26:02,960 --> 00:26:06,000
web socket server ports we can

628
00:26:06,000 --> 00:26:08,080
create uh

629
00:26:08,080 --> 00:26:10,320
15 uh

630
00:26:10,320 --> 00:26:12,880
16 000 images

631
00:26:12,880 --> 00:26:15,279
uh on the on the page and i believe like

632
00:26:15,279 --> 00:26:17,200
it's okay because

633
00:26:17,200 --> 00:26:20,480
most of modern website have more uh more

634
00:26:20,480 --> 00:26:24,000
images on the same page so uh at line

635
00:26:24,000 --> 00:26:25,360
four

636
00:26:25,360 --> 00:26:27,279
like you can see the same brute force

637
00:26:27,279 --> 00:26:30,960
attack we create uh 16 000 images at the

638
00:26:30,960 --> 00:26:33,279
same time they all hosted on the

639
00:26:33,279 --> 00:26:36,720
different ports and in line on line four

640
00:26:36,720 --> 00:26:39,120
if you were able to load one of these

641
00:26:39,120 --> 00:26:40,159
pictures

642
00:26:40,159 --> 00:26:44,159
we know now that your local host is

643
00:26:44,159 --> 00:26:48,080
running http server on the specific port

644
00:26:48,080 --> 00:26:49,360
and

645
00:26:49,360 --> 00:26:53,279
by by using this fact we can now

646
00:26:53,279 --> 00:26:56,960
uh in line five connect those to web

647
00:26:56,960 --> 00:27:00,400
circuit server which is as we know on on

648
00:27:00,400 --> 00:27:02,559
the same port as

649
00:27:02,559 --> 00:27:07,200
uh as the image and online nine send a

650
00:27:07,200 --> 00:27:09,679
malicious payload to your

651
00:27:09,679 --> 00:27:12,080
localhost

652
00:27:12,080 --> 00:27:14,960
let's have a look at the demo

653
00:27:14,960 --> 00:27:17,279
uh here again on the left side you can

654
00:27:17,279 --> 00:27:20,320
see the latex workshop extension

655
00:27:20,320 --> 00:27:22,240
installed and

656
00:27:22,240 --> 00:27:24,559
some text file

657
00:27:24,559 --> 00:27:26,320
with

658
00:27:26,320 --> 00:27:28,880
markup language here and on the right

659
00:27:28,880 --> 00:27:32,320
side we are opening malicious url

660
00:27:32,320 --> 00:27:33,200
and

661
00:27:33,200 --> 00:27:36,080
it takes couple of seconds because

662
00:27:36,080 --> 00:27:38,320
actually in the background to do brute

663
00:27:38,320 --> 00:27:41,039
force attack um

664
00:27:41,039 --> 00:27:42,880
as we just talked

665
00:27:42,880 --> 00:27:44,159
um but

666
00:27:44,159 --> 00:27:45,679
suddenly

667
00:27:45,679 --> 00:27:48,690
after a couple of seconds you may see

668
00:27:48,690 --> 00:27:51,440
[Music]

669
00:27:51,440 --> 00:27:54,080
calculator pops up and this is the

670
00:27:54,080 --> 00:27:56,320
attack we were able to

671
00:27:56,320 --> 00:27:59,360
by just opening a url in the browser we

672
00:27:59,360 --> 00:28:00,640
were able to

673
00:28:00,640 --> 00:28:04,480
execute binary on your laptop

674
00:28:04,480 --> 00:28:05,760
that's it

675
00:28:05,760 --> 00:28:08,000
back to your own

676
00:28:08,000 --> 00:28:09,039
thank you

677
00:28:09,039 --> 00:28:09,760
so

678
00:28:09,760 --> 00:28:12,080
as we've seen in instant markdown

679
00:28:12,080 --> 00:28:14,080
atlantic's workshop

680
00:28:14,080 --> 00:28:15,440
we've found

681
00:28:15,440 --> 00:28:17,120
additional two

682
00:28:17,120 --> 00:28:19,200
plugins that were vulnerable

683
00:28:19,200 --> 00:28:21,440
open in default browser which is just a

684
00:28:21,440 --> 00:28:24,000
browser previewing extension that had a

685
00:28:24,000 --> 00:28:26,880
similar issue as instant markdown

686
00:28:26,880 --> 00:28:29,679
and rainbow fart we had just to say it

687
00:28:29,679 --> 00:28:30,960
in the talk

688
00:28:30,960 --> 00:28:34,320
it's just a nice extension that makes

689
00:28:34,320 --> 00:28:36,000
sounds while you

690
00:28:36,000 --> 00:28:38,880
code and help you motivate you so it had

691
00:28:38,880 --> 00:28:42,880
an ssrf and a zip slip vulnerability

692
00:28:42,880 --> 00:28:45,440
so why is this a big deal and how it's

693
00:28:45,440 --> 00:28:47,919
related to developers so

694
00:28:47,919 --> 00:28:51,039
say you're a developer using vs code

695
00:28:51,039 --> 00:28:53,039
and you're installing a vulnerable

696
00:28:53,039 --> 00:28:55,360
extension from the marketplace as we've

697
00:28:55,360 --> 00:28:58,960
seen an attacker can exploit it

698
00:28:58,960 --> 00:29:00,559
enrich some

699
00:29:00,559 --> 00:29:03,120
other sensitive data on your machine

700
00:29:03,120 --> 00:29:06,640
such as ssh keys environment variables

701
00:29:06,640 --> 00:29:09,760
and maybe extract a source code or

702
00:29:09,760 --> 00:29:11,840
configurations

703
00:29:11,840 --> 00:29:14,320
but you're not working in vacuum usually

704
00:29:14,320 --> 00:29:16,880
you're part of an organization with

705
00:29:16,880 --> 00:29:18,320
other developers

706
00:29:18,320 --> 00:29:20,559
and by obtaining this

707
00:29:20,559 --> 00:29:23,120
an attacker can compromise other

708
00:29:23,120 --> 00:29:26,240
valuable valuable parts so they can

709
00:29:26,240 --> 00:29:28,399
steal some private data

710
00:29:28,399 --> 00:29:30,880
and maybe drop some

711
00:29:30,880 --> 00:29:33,440
more persistent binaries that can do

712
00:29:33,440 --> 00:29:35,600
additional malicious stuff

713
00:29:35,600 --> 00:29:38,960
and even issue a full-blown supply chain

714
00:29:38,960 --> 00:29:41,120
attack that can compromise other

715
00:29:41,120 --> 00:29:43,600
customers of that organization

716
00:29:43,600 --> 00:29:46,960
so while vulnerable extension aren't by

717
00:29:46,960 --> 00:29:48,320
themselves

718
00:29:48,320 --> 00:29:50,080
supply chain attacks

719
00:29:50,080 --> 00:29:52,640
they have surely the potential to be

720
00:29:52,640 --> 00:29:56,480
used to carry out once

721
00:29:57,279 --> 00:29:58,080
so

722
00:29:58,080 --> 00:29:59,120
after

723
00:29:59,120 --> 00:30:02,320
we wrapped up our research we started a

724
00:30:02,320 --> 00:30:05,840
responsible disclosure process we sent

725
00:30:05,840 --> 00:30:08,480
emails to all the extension maintainers

726
00:30:08,480 --> 00:30:09,279
and

727
00:30:09,279 --> 00:30:11,520
within two weeks

728
00:30:11,520 --> 00:30:14,480
all of the vulnerabilities were fixed so

729
00:30:14,480 --> 00:30:17,120
kudos to the maintainers and community

730
00:30:17,120 --> 00:30:19,760
for doing this really in a timely

731
00:30:19,760 --> 00:30:20,880
fashion

732
00:30:20,880 --> 00:30:24,159
and let's look at one example of a fix

733
00:30:24,159 --> 00:30:26,960
so latex workshop as kirill said had the

734
00:30:26,960 --> 00:30:29,440
command injection vulnerability so on

735
00:30:29,440 --> 00:30:31,840
the left hand side we see the vulnerable

736
00:30:31,840 --> 00:30:33,440
code which

737
00:30:33,440 --> 00:30:35,840
essentially allowed the user control the

738
00:30:35,840 --> 00:30:39,520
data dot url to be used unsanitized in

739
00:30:39,520 --> 00:30:42,159
the open external api call

740
00:30:42,159 --> 00:30:44,640
so on the right hand side we can see the

741
00:30:44,640 --> 00:30:46,960
fix which was basically

742
00:30:46,960 --> 00:30:48,799
eliminating this functionality

743
00:30:48,799 --> 00:30:51,120
altogether because it wasn't really

744
00:30:51,120 --> 00:30:53,840
necessary in other cases that you might

745
00:30:53,840 --> 00:30:56,480
need them you just need to sanitize the

746
00:30:56,480 --> 00:30:59,840
user controlled data

747
00:30:59,919 --> 00:31:02,960
so how to mitigate this basically

748
00:31:02,960 --> 00:31:05,840
extensions hygiene is pretty similar to

749
00:31:05,840 --> 00:31:08,000
third-party packages so if you're a

750
00:31:08,000 --> 00:31:11,600
developer using this use only maintained

751
00:31:11,600 --> 00:31:14,640
and popular extensions most of them are

752
00:31:14,640 --> 00:31:16,159
open source so

753
00:31:16,159 --> 00:31:18,640
look at the number of stars and when

754
00:31:18,640 --> 00:31:20,399
they were last committed and see that

755
00:31:20,399 --> 00:31:22,559
they're actively maintained

756
00:31:22,559 --> 00:31:24,640
in addition if you see extensions with

757
00:31:24,640 --> 00:31:27,519
unfixed security issues just don't use

758
00:31:27,519 --> 00:31:28,559
them

759
00:31:28,559 --> 00:31:30,840
on the other side if you're an extension

760
00:31:30,840 --> 00:31:33,760
maintainer then use the security best

761
00:31:33,760 --> 00:31:36,880
practices when developing your code and

762
00:31:36,880 --> 00:31:38,799
test your code with a vulnerability

763
00:31:38,799 --> 00:31:41,600
scanner and if you do get

764
00:31:41,600 --> 00:31:44,000
disclosed with vulnerabilities and fix

765
00:31:44,000 --> 00:31:46,320
them quickly enough because as you've

766
00:31:46,320 --> 00:31:48,960
seen they can affect a lot of other

767
00:31:48,960 --> 00:31:50,960
users

768
00:31:50,960 --> 00:31:53,120
so thanks everyone and i hope you

769
00:31:53,120 --> 00:31:55,519
enjoyed and thanks echo party for having

770
00:31:55,519 --> 00:31:58,840
us and don't run away join us for a q

771
00:31:58,840 --> 00:32:03,000
a thank you

