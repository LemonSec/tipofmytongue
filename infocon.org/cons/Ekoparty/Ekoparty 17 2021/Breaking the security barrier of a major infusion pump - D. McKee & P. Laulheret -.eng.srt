1
00:00:09,040 --> 00:00:10,719
welcome to our talk today we're so glad

2
00:00:10,719 --> 00:00:12,160
you could take a few minutes to watch

3
00:00:12,160 --> 00:00:14,080
our our latest presentation uh we're

4
00:00:14,080 --> 00:00:15,839
here to talk to you about some research

5
00:00:15,839 --> 00:00:17,119
that philippe and i've been doing over

6
00:00:17,119 --> 00:00:19,920
the last year or so

7
00:00:19,920 --> 00:00:21,199
so first off

8
00:00:21,199 --> 00:00:23,279
who are we we're a bunch of hackers that

9
00:00:23,279 --> 00:00:25,519
work for mcafee enterprise advanced

10
00:00:25,519 --> 00:00:27,279
threat research team we've been doing

11
00:00:27,279 --> 00:00:29,920
this a combined a little over 20 years

12
00:00:29,920 --> 00:00:31,439
and if you'd like to to look at some of

13
00:00:31,439 --> 00:00:33,280
our past or future research

14
00:00:33,280 --> 00:00:35,120
please feel free to follow us on social

15
00:00:35,120 --> 00:00:37,520
media

16
00:00:37,520 --> 00:00:39,440
so what are we here to talk about today

17
00:00:39,440 --> 00:00:41,360
well we decided to do some research into

18
00:00:41,360 --> 00:00:43,840
something called the bibram infusion map

19
00:00:43,840 --> 00:00:45,600
pump and what that is is that's an

20
00:00:45,600 --> 00:00:48,079
infusion pump which is a device that

21
00:00:48,079 --> 00:00:50,239
delivers fluids or medication to a

22
00:00:50,239 --> 00:00:52,000
patient through an iv

23
00:00:52,000 --> 00:00:54,079
we looked at two different components of

24
00:00:54,079 --> 00:00:56,399
that ecosystem we looked at the infusion

25
00:00:56,399 --> 00:00:58,000
pump itself which is the picture on the

26
00:00:58,000 --> 00:00:59,920
right hand side and we also looked at

27
00:00:59,920 --> 00:01:02,079
the component called the space station

28
00:01:02,079 --> 00:01:04,400
which is really just a fancy word for a

29
00:01:04,400 --> 00:01:06,000
docking station as you can see in the

30
00:01:06,000 --> 00:01:07,360
picture in the center there it holds

31
00:01:07,360 --> 00:01:09,840
approximately four pumps at a time

32
00:01:09,840 --> 00:01:11,280
and they run two completely different

33
00:01:11,280 --> 00:01:12,960
computer architectures which we'll get

34
00:01:12,960 --> 00:01:15,119
into here in a few moments

35
00:01:15,119 --> 00:01:16,479
last thing i want to mention about these

36
00:01:16,479 --> 00:01:18,479
devices is you might notice that the

37
00:01:18,479 --> 00:01:20,000
models that we looked at were released

38
00:01:20,000 --> 00:01:21,759
in 2017.

39
00:01:21,759 --> 00:01:24,159
in the world of vulnerability research

40
00:01:24,159 --> 00:01:26,240
that can be considered old however in

41
00:01:26,240 --> 00:01:27,759
the medical industry

42
00:01:27,759 --> 00:01:31,040
device life cycles are much longer and

43
00:01:31,040 --> 00:01:32,159
to make sure that we did our due

44
00:01:32,159 --> 00:01:33,200
diligence

45
00:01:33,200 --> 00:01:34,960
before our research we partnered with

46
00:01:34,960 --> 00:01:36,560
several industry medical partners and

47
00:01:36,560 --> 00:01:38,320
confirmed that these devices are still

48
00:01:38,320 --> 00:01:40,799
widely used throughout hospitals around

49
00:01:40,799 --> 00:01:42,240
the world and are very predominant

50
00:01:42,240 --> 00:01:43,280
devices

51
00:01:43,280 --> 00:01:46,240
i'll touch on this more later

52
00:01:46,240 --> 00:01:48,799
okay so we're not the first guys to look

53
00:01:48,799 --> 00:01:50,159
at things like infusion pumps in the

54
00:01:50,159 --> 00:01:52,560
medical industry i've highlighted two

55
00:01:52,560 --> 00:01:54,799
major resources that have happened uh

56
00:01:54,799 --> 00:01:56,320
relatively recently

57
00:01:56,320 --> 00:01:58,479
one is mannymed which is a group of

58
00:01:58,479 --> 00:02:00,719
german researchers that did an overview

59
00:02:00,719 --> 00:02:02,799
a broad overview of medical devices they

60
00:02:02,799 --> 00:02:05,200
did a fantastic job looking at all sorts

61
00:02:05,200 --> 00:02:06,640
of devices in the medical industry

62
00:02:06,640 --> 00:02:08,000
including the ones that we looked at

63
00:02:08,000 --> 00:02:10,080
today i will touch on their research

64
00:02:10,080 --> 00:02:11,280
here as we go throughout our

65
00:02:11,280 --> 00:02:12,560
presentation

66
00:02:12,560 --> 00:02:14,319
and then kind of the research that i

67
00:02:14,319 --> 00:02:16,480
like to say started it all uh was a

68
00:02:16,480 --> 00:02:18,319
pacemaker and insulin pump research by

69
00:02:18,319 --> 00:02:20,319
billy risos uh billy rios and jonathan

70
00:02:20,319 --> 00:02:22,720
butts from black hat 2018 you may be

71
00:02:22,720 --> 00:02:24,800
familiar with that presentation it

72
00:02:24,800 --> 00:02:28,560
actually sparked the fda to to create

73
00:02:28,560 --> 00:02:30,480
something called the cyber med safety

74
00:02:30,480 --> 00:02:32,640
expert analysis board uh we haven't seen

75
00:02:32,640 --> 00:02:34,080
a whole lot of movement on that but it's

76
00:02:34,080 --> 00:02:35,760
a great initiative and we hope that the

77
00:02:35,760 --> 00:02:39,200
fda continues to move forward with it

78
00:02:39,200 --> 00:02:40,800
so before

79
00:02:40,800 --> 00:02:41,840
uh

80
00:02:41,840 --> 00:02:43,760
before we dive into you know maybe the

81
00:02:43,760 --> 00:02:45,280
fun stuff and exploitation we got to

82
00:02:45,280 --> 00:02:46,720
start with the beginning

83
00:02:46,720 --> 00:02:48,480
and being the the good researchers that

84
00:02:48,480 --> 00:02:50,319
we are we start with just understanding

85
00:02:50,319 --> 00:02:52,560
the system design and the architecture

86
00:02:52,560 --> 00:02:54,400
and since we're we're hardware hackers

87
00:02:54,400 --> 00:02:55,519
the first thing we do when we get a

88
00:02:55,519 --> 00:02:57,360
bunch of devices in the lab is we like

89
00:02:57,360 --> 00:02:59,440
to take them apart and so we got a bunch

90
00:02:59,440 --> 00:03:01,120
of these different parts uh i'm sorry

91
00:03:01,120 --> 00:03:02,800
pumps and we stripped them down and you

92
00:03:02,800 --> 00:03:04,080
can see here are a couple of the

93
00:03:04,080 --> 00:03:05,440
motherboards

94
00:03:05,440 --> 00:03:07,760
from the infusion pumps themselves and

95
00:03:07,760 --> 00:03:09,280
i'm just going to highlight a few common

96
00:03:09,280 --> 00:03:10,959
components across the different versions

97
00:03:10,959 --> 00:03:12,959
that we looked at and so you have this

98
00:03:12,959 --> 00:03:14,720
microcontroller which is actually an

99
00:03:14,720 --> 00:03:17,440
m32c microcontroller a bit of a

100
00:03:17,440 --> 00:03:18,959
different microcontroller than some of

101
00:03:18,959 --> 00:03:20,319
the most common ones and felipe's going

102
00:03:20,319 --> 00:03:22,319
to dig into this extensively here in a

103
00:03:22,319 --> 00:03:23,680
few minutes

104
00:03:23,680 --> 00:03:26,799
of course they both have flash chips so

105
00:03:26,799 --> 00:03:28,319
we found various different types of

106
00:03:28,319 --> 00:03:30,480
flash chips we found some tsop flash

107
00:03:30,480 --> 00:03:32,799
chips and some bga flash chips

108
00:03:32,799 --> 00:03:34,720
and then they have this unique component

109
00:03:34,720 --> 00:03:36,640
it's uh this plug on the back of the

110
00:03:36,640 --> 00:03:38,400
pump and there's two of them and they're

111
00:03:38,400 --> 00:03:41,680
they're used for power and can bus

112
00:03:41,680 --> 00:03:44,640
so that allows the the device to speak

113
00:03:44,640 --> 00:03:46,879
to the maintenance software and to gain

114
00:03:46,879 --> 00:03:49,280
updates that way as well

115
00:03:49,280 --> 00:03:51,040
so we're going to look at the larger

116
00:03:51,040 --> 00:03:53,599
architecture of this ecosystem and from

117
00:03:53,599 --> 00:03:55,439
now on in the presentation when i talk

118
00:03:55,439 --> 00:03:57,439
about the device we're going to talk

119
00:03:57,439 --> 00:04:00,480
about when an infusion pump is docked

120
00:04:00,480 --> 00:04:02,159
inside the space station so it's going

121
00:04:02,159 --> 00:04:04,720
to look as one unit and so this is an

122
00:04:04,720 --> 00:04:07,840
architecture diagram of that one unit

123
00:04:07,840 --> 00:04:10,560
highlight just a few key components so

124
00:04:10,560 --> 00:04:12,239
if you notice we actually got to work

125
00:04:12,239 --> 00:04:14,000
with three uniquely different

126
00:04:14,000 --> 00:04:15,840
architectures which provided challenges

127
00:04:15,840 --> 00:04:18,320
at time so we have the m32 architecture

128
00:04:18,320 --> 00:04:20,560
we have the power pc and we have an arm

129
00:04:20,560 --> 00:04:23,280
cpu all within the same ecosystem

130
00:04:23,280 --> 00:04:25,520
and then another critical component is

131
00:04:25,520 --> 00:04:28,240
we have this can bus and that's the main

132
00:04:28,240 --> 00:04:29,840
link between the what i'm going to call

133
00:04:29,840 --> 00:04:31,759
the critical operating system or the

134
00:04:31,759 --> 00:04:34,320
rtos operating system of the of the pump

135
00:04:34,320 --> 00:04:37,680
itself and the spacecom operating system

136
00:04:37,680 --> 00:04:39,919
of the network connected component i

137
00:04:39,919 --> 00:04:41,120
also may refer to it as the

138
00:04:41,120 --> 00:04:43,040
communication module and these

139
00:04:43,040 --> 00:04:45,600
components exist in both the pump and

140
00:04:45,600 --> 00:04:47,840
the space station

141
00:04:47,840 --> 00:04:49,919
if we zoom in on the applications for a

142
00:04:49,919 --> 00:04:51,759
moment philippe and i got to dig into

143
00:04:51,759 --> 00:04:53,360
just about every single one of these but

144
00:04:53,360 --> 00:04:55,520
we do not have time to cover that today

145
00:04:55,520 --> 00:04:57,280
so we're going to focus on two main

146
00:04:57,280 --> 00:04:58,880
applications that are important for the

147
00:04:58,880 --> 00:05:01,360
critical attack chain we've got the json

148
00:05:01,360 --> 00:05:03,680
dbus bridge uh this is actually an open

149
00:05:03,680 --> 00:05:06,240
source application that listens on uh

150
00:05:06,240 --> 00:05:08,400
standard 80 and 443 ports for get and

151
00:05:08,400 --> 00:05:10,560
post request and it's mostly used for

152
00:05:10,560 --> 00:05:12,320
wi-fi configuration

153
00:05:12,320 --> 00:05:15,120
then we also have the pcs process which

154
00:05:15,120 --> 00:05:17,120
frankly i have no idea what that stands

155
00:05:17,120 --> 00:05:18,960
for but i can tell you that it's used

156
00:05:18,960 --> 00:05:20,639
mostly to process commands from the

157
00:05:20,639 --> 00:05:23,360
network which is a proprietary protocol

158
00:05:23,360 --> 00:05:26,240
by default listening on port 1500 and

159
00:05:26,240 --> 00:05:28,000
it's used for things like updating drug

160
00:05:28,000 --> 00:05:30,000
libraries calibration data and pump

161
00:05:30,000 --> 00:05:32,000
settings now this protocol is in plain

162
00:05:32,000 --> 00:05:33,280
text and this will become important

163
00:05:33,280 --> 00:05:36,638
later and we'll come back to this

164
00:05:36,720 --> 00:05:38,320
so if you if you can tell from the

165
00:05:38,320 --> 00:05:40,240
system architecture there's kind of two

166
00:05:40,240 --> 00:05:42,320
logical separations and if you haven't

167
00:05:42,320 --> 00:05:44,400
figured it out yet felipe and i work in

168
00:05:44,400 --> 00:05:46,240
two different parts of the world i'm in

169
00:05:46,240 --> 00:05:49,120
the united states in texas and philippe

170
00:05:49,120 --> 00:05:51,520
is in france and so we had to come away

171
00:05:51,520 --> 00:05:53,520
to kind of split this project up

172
00:05:53,520 --> 00:05:55,120
logically that made sense and so we

173
00:05:55,120 --> 00:05:57,680
split it in those two main components

174
00:05:57,680 --> 00:05:59,919
felipe became an expert in the critical

175
00:05:59,919 --> 00:06:02,319
r toss system reverse engineering m32

176
00:06:02,319 --> 00:06:04,400
architecture and i became an expert

177
00:06:04,400 --> 00:06:06,720
looking at the com and our hope was by

178
00:06:06,720 --> 00:06:08,160
by bringing looking at these two

179
00:06:08,160 --> 00:06:09,759
distinct areas that we would come

180
00:06:09,759 --> 00:06:11,440
together and be able to find a critical

181
00:06:11,440 --> 00:06:14,560
attack chain across the entire system

182
00:06:14,560 --> 00:06:16,000
and so now i'm going to turn this back

183
00:06:16,000 --> 00:06:17,039
over i'm going to turn this over to

184
00:06:17,039 --> 00:06:18,880
philippe who's going to take dive take a

185
00:06:18,880 --> 00:06:22,960
deep dive into that m32 architecture

186
00:06:22,960 --> 00:06:24,479
yeah thank you doug

187
00:06:24,479 --> 00:06:25,600
so um

188
00:06:25,600 --> 00:06:27,680
my part was focusing on on the pump

189
00:06:27,680 --> 00:06:30,160
firmware and this can be split in kind

190
00:06:30,160 --> 00:06:31,120
of like

191
00:06:31,120 --> 00:06:33,199
multiple angles so first we want to get

192
00:06:33,199 --> 00:06:36,720
started you know and get figure like

193
00:06:36,720 --> 00:06:38,400
how to start basically

194
00:06:38,400 --> 00:06:40,880
um and then when we we go with that we

195
00:06:40,880 --> 00:06:41,919
can start figuring like what's

196
00:06:41,919 --> 00:06:43,280
interesting inside this inside the

197
00:06:43,280 --> 00:06:44,319
firmware

198
00:06:44,319 --> 00:06:46,639
and after that we can abstract that a

199
00:06:46,639 --> 00:06:48,880
little and look at what we could pawn

200
00:06:48,880 --> 00:06:50,319
inside that firmware

201
00:06:50,319 --> 00:06:52,240
so i'm going to get

202
00:06:52,240 --> 00:06:53,680
i'm going to start looking at the

203
00:06:53,680 --> 00:06:55,440
getting started part and it's split in

204
00:06:55,440 --> 00:06:57,280
two direction one is you just recover

205
00:06:57,280 --> 00:06:59,360
like a bunch of documentation

206
00:06:59,360 --> 00:07:01,120
and then like another angle is like

207
00:07:01,120 --> 00:07:02,639
dumping the firmware and importing that

208
00:07:02,639 --> 00:07:04,000
in either

209
00:07:04,000 --> 00:07:05,120
so uh

210
00:07:05,120 --> 00:07:06,319
i'm going to talk about dumping the

211
00:07:06,319 --> 00:07:08,479
firmware first uh on the left side

212
00:07:08,479 --> 00:07:10,479
that's the motherboard of the pump

213
00:07:10,479 --> 00:07:12,880
and on the right side um it's the same

214
00:07:12,880 --> 00:07:14,639
but like inside the bg rework station

215
00:07:14,639 --> 00:07:17,120
under a lot of heat to remove the flash

216
00:07:17,120 --> 00:07:19,199
chip if you don't have a bj reward

217
00:07:19,199 --> 00:07:20,400
station at home

218
00:07:20,400 --> 00:07:22,560
you can always use like a heat gun to do

219
00:07:22,560 --> 00:07:24,080
that and that that works pretty well as

220
00:07:24,080 --> 00:07:25,039
well

221
00:07:25,039 --> 00:07:26,639
so uh if we look on the next slide you

222
00:07:26,639 --> 00:07:28,639
can see like the flash ship has been

223
00:07:28,639 --> 00:07:31,120
removed and not cooked

224
00:07:31,120 --> 00:07:34,479
and on the right side is a firmware dump

225
00:07:34,479 --> 00:07:36,479
of a flashlight i'm sorry of of the

226
00:07:36,479 --> 00:07:38,479
content of that chip at first we weren't

227
00:07:38,479 --> 00:07:40,639
quite sure what was on it

228
00:07:40,639 --> 00:07:42,479
but at least we can see

229
00:07:42,479 --> 00:07:44,639
like a new pointer string at the bottom

230
00:07:44,639 --> 00:07:46,879
of the of the screenshot and that's a

231
00:07:46,879 --> 00:07:48,879
good sign that you know we're looking at

232
00:07:48,879 --> 00:07:50,560
code stuff

233
00:07:50,560 --> 00:07:52,960
so the next logical step is to import in

234
00:07:52,960 --> 00:07:53,919
neither

235
00:07:53,919 --> 00:07:58,319
lucky for us either support m32c 80. the

236
00:07:58,319 --> 00:08:01,919
one we have is m32c83

237
00:08:01,919 --> 00:08:03,280
which is close enough it's going to be

238
00:08:03,280 --> 00:08:05,280
the same disassembly language it's just

239
00:08:05,280 --> 00:08:06,720
you know different peripherals and that

240
00:08:06,720 --> 00:08:08,319
kind of things

241
00:08:08,319 --> 00:08:10,560
ida likes to ask

242
00:08:10,560 --> 00:08:12,560
hard questions and in that case it's

243
00:08:12,560 --> 00:08:13,919
like oh what's the load address of your

244
00:08:13,919 --> 00:08:15,440
firmware you know if you have like an

245
00:08:15,440 --> 00:08:17,199
elf binary it's going to find it for you

246
00:08:17,199 --> 00:08:18,879
but when it's a firmware blob it's

247
00:08:18,879 --> 00:08:20,560
different so you need to tell it where

248
00:08:20,560 --> 00:08:22,639
to load it in memory usually the common

249
00:08:22,639 --> 00:08:24,080
way is to look for like absolute

250
00:08:24,080 --> 00:08:26,240
addresses like for strings or pointers

251
00:08:26,240 --> 00:08:28,560
or function pointers and whatnot and

252
00:08:28,560 --> 00:08:30,160
that will give you a hint of what's the

253
00:08:30,160 --> 00:08:32,320
best candidate in our case we are like

254
00:08:32,320 --> 00:08:34,000
documentation as i mentioned and

255
00:08:34,000 --> 00:08:35,760
especially datasheet so we can look at

256
00:08:35,760 --> 00:08:36,799
that

257
00:08:36,799 --> 00:08:37,599
um

258
00:08:37,599 --> 00:08:38,958
on the left side it's like just regular

259
00:08:38,958 --> 00:08:40,479
like data sheets

260
00:08:40,479 --> 00:08:42,159
on the center we have the software

261
00:08:42,159 --> 00:08:43,919
manual and it's like all nice and tells

262
00:08:43,919 --> 00:08:46,080
you about all the wonderful instruction

263
00:08:46,080 --> 00:08:48,320
of the m32c like the assembly

264
00:08:48,320 --> 00:08:49,360
instruction

265
00:08:49,360 --> 00:08:50,720
and on the right side we have the

266
00:08:50,720 --> 00:08:52,480
hardware manual that goes into like more

267
00:08:52,480 --> 00:08:54,720
technical details like uh

268
00:08:54,720 --> 00:08:55,760
time

269
00:08:55,760 --> 00:08:57,600
timing and

270
00:08:57,600 --> 00:08:59,440
peripherals and registers and that kind

271
00:08:59,440 --> 00:09:02,399
of things so all really useful stuff

272
00:09:02,399 --> 00:09:04,640
but if you deep dive in

273
00:09:04,640 --> 00:09:06,240
the hardware

274
00:09:06,240 --> 00:09:08,000
nice map there's like a lot of things

275
00:09:08,000 --> 00:09:09,279
going on there

276
00:09:09,279 --> 00:09:11,920
but it tells us a different mode of

277
00:09:11,920 --> 00:09:14,959
operation of the of the processor and

278
00:09:14,959 --> 00:09:17,200
where um what are the

279
00:09:17,200 --> 00:09:19,600
loading addresses for different things

280
00:09:19,600 --> 00:09:22,000
so we can see in red

281
00:09:22,000 --> 00:09:23,920
potential addresses for

282
00:09:23,920 --> 00:09:26,000
external spaces

283
00:09:26,000 --> 00:09:28,399
which would be basically um

284
00:09:28,399 --> 00:09:30,240
where like a flash could be mapped in

285
00:09:30,240 --> 00:09:32,080
memory so we have like a list of

286
00:09:32,080 --> 00:09:34,640
addresses and um if we look on the next

287
00:09:34,640 --> 00:09:36,320
slide we have that nice information as

288
00:09:36,320 --> 00:09:38,640
well from the datasheet that at the

289
00:09:38,640 --> 00:09:40,480
bottom of the memory map you're going to

290
00:09:40,480 --> 00:09:43,519
have a bunch of function pointers like a

291
00:09:43,519 --> 00:09:45,680
reset vector and whatnot and so we know

292
00:09:45,680 --> 00:09:47,920
that um if we load

293
00:09:47,920 --> 00:09:49,200
if we load it at the right address we

294
00:09:49,200 --> 00:09:51,040
will see them and that's what happened

295
00:09:51,040 --> 00:09:54,399
when we load it at address e000

296
00:09:54,399 --> 00:09:56,720
we can see uh on the screenshots like a

297
00:09:56,720 --> 00:09:58,240
bunch of function pointers and if we

298
00:09:58,240 --> 00:10:00,320
click on them it actually leads to code

299
00:10:00,320 --> 00:10:02,560
with proper like you know function uh ep

300
00:10:02,560 --> 00:10:04,399
log and prolog and all of that

301
00:10:04,399 --> 00:10:06,399
and i just named the function based on

302
00:10:06,399 --> 00:10:08,640
what was on the datasheet uh and as an

303
00:10:08,640 --> 00:10:10,880
extra bonus if we look elsewhere in the

304
00:10:10,880 --> 00:10:12,240
in the firmware we can find many

305
00:10:12,240 --> 00:10:14,640
references to that same address of e0

306
00:10:14,640 --> 00:10:17,360
and enable addresses and that's a good

307
00:10:17,360 --> 00:10:18,800
indication that that's where like

308
00:10:18,800 --> 00:10:20,320
interesting things are

309
00:10:20,320 --> 00:10:22,959
and valuable information

310
00:10:22,959 --> 00:10:27,599
so uh we can summary that uh

311
00:10:28,240 --> 00:10:30,959
in the green khaki uh things on the left

312
00:10:30,959 --> 00:10:35,040
side is data uh you would find unlike a

313
00:10:35,040 --> 00:10:36,560
font for instance for like display on

314
00:10:36,560 --> 00:10:39,440
screen translation for the menus uh

315
00:10:39,440 --> 00:10:41,040
disposable data

316
00:10:41,040 --> 00:10:42,880
calibration data and so on it's like all

317
00:10:42,880 --> 00:10:44,959
the files of the pump basically on the

318
00:10:44,959 --> 00:10:46,800
right side on the other hand you have

319
00:10:46,800 --> 00:10:49,200
blue which means like code in either

320
00:10:49,200 --> 00:10:50,880
and it's something that i think is

321
00:10:50,880 --> 00:10:52,240
really interesting is there is actually

322
00:10:52,240 --> 00:10:54,800
two chunks of code uh and the gap

323
00:10:54,800 --> 00:10:56,240
between them that i've highlighted with

324
00:10:56,240 --> 00:10:58,560
this like purple arrow so we have a main

325
00:10:58,560 --> 00:11:00,079
application and then we have like a

326
00:11:00,079 --> 00:11:01,600
bootloader code and i think it's just

327
00:11:01,600 --> 00:11:03,040
really interesting to

328
00:11:03,040 --> 00:11:05,120
be able to like figure to see that just

329
00:11:05,120 --> 00:11:07,680
by looking at how the memory is laid out

330
00:11:07,680 --> 00:11:10,320
and on top of that uh there's also like

331
00:11:10,320 --> 00:11:13,279
segments that we could defined in ada

332
00:11:13,279 --> 00:11:14,800
the special function registers were

333
00:11:14,800 --> 00:11:16,000
already there and that's for like the

334
00:11:16,000 --> 00:11:17,839
peripherals and i will revisit that in a

335
00:11:17,839 --> 00:11:18,880
sec

336
00:11:18,880 --> 00:11:20,640
and i think the most important one was

337
00:11:20,640 --> 00:11:22,079
the global memory which is like a

338
00:11:22,079 --> 00:11:23,760
segment i had to create

339
00:11:23,760 --> 00:11:26,000
and it's actually used

340
00:11:26,000 --> 00:11:28,000
by the firmware for like all the global

341
00:11:28,000 --> 00:11:29,839
variables uh used by the main

342
00:11:29,839 --> 00:11:32,399
application so by creating that segment

343
00:11:32,399 --> 00:11:34,560
we can then cross-reference stuff and

344
00:11:34,560 --> 00:11:36,640
also relabel like all of those so that's

345
00:11:36,640 --> 00:11:40,079
uh extremely useful and important

346
00:11:40,079 --> 00:11:42,399
so that's basically where we get started

347
00:11:42,399 --> 00:11:44,240
and we have like all stuff not nice and

348
00:11:44,240 --> 00:11:46,240
either but then we want to start looking

349
00:11:46,240 --> 00:11:48,399
and understanding how the firmware works

350
00:11:48,399 --> 00:11:49,920
and for that there's kind of like two

351
00:11:49,920 --> 00:11:52,880
angles one is we can look at peripherals

352
00:11:52,880 --> 00:11:54,079
and the other is just like clicking

353
00:11:54,079 --> 00:11:55,920
around in either and see if we see

354
00:11:55,920 --> 00:11:57,600
anything fun in it

355
00:11:57,600 --> 00:11:59,600
i'm going to start with peripherals

356
00:11:59,600 --> 00:12:01,839
and why as i cool it's because that's

357
00:12:01,839 --> 00:12:03,680
how the firmware communicate with the

358
00:12:03,680 --> 00:12:06,639
rest of the world so you know like

359
00:12:06,639 --> 00:12:08,160
other components on the board or like

360
00:12:08,160 --> 00:12:10,959
outside systems and so on so that

361
00:12:10,959 --> 00:12:12,399
actually tells us that we can find like

362
00:12:12,399 --> 00:12:15,680
keywords can bus lots of ios

363
00:12:15,680 --> 00:12:17,440
analog and digital and digital to analog

364
00:12:17,440 --> 00:12:19,440
converters so that's all really

365
00:12:19,440 --> 00:12:23,440
interesting things for us to look into

366
00:12:23,440 --> 00:12:24,880
but how would you find the code

367
00:12:24,880 --> 00:12:27,040
responsible for processing these uh is

368
00:12:27,040 --> 00:12:29,200
this like two possible ways one is the

369
00:12:29,200 --> 00:12:32,240
sfr and one is the interrupt and loss

370
00:12:32,240 --> 00:12:34,560
so like this sfr is for like special

371
00:12:34,560 --> 00:12:36,079
function registers and i have a

372
00:12:36,079 --> 00:12:37,920
screenshot on the right or like a part

373
00:12:37,920 --> 00:12:39,519
of the data sheet about that

374
00:12:39,519 --> 00:12:41,519
and basically it's a it's a special

375
00:12:41,519 --> 00:12:44,240
memory range from like zero to 400

376
00:12:44,240 --> 00:12:46,079
and you can read and write to this

377
00:12:46,079 --> 00:12:48,240
location like you would normally do but

378
00:12:48,240 --> 00:12:51,120
it's actually a proxy to actually

379
00:12:51,120 --> 00:12:54,079
interact with peripherals so to give an

380
00:12:54,079 --> 00:12:56,160
example like if we look at the uart for

381
00:12:56,160 --> 00:12:58,399
instance there is a special register to

382
00:12:58,399 --> 00:13:00,079
uh that you if you read from it it's

383
00:13:00,079 --> 00:13:02,079
going to retrieve data that was sent

384
00:13:02,079 --> 00:13:04,160
over you want and if you write to it it

385
00:13:04,160 --> 00:13:06,240
would send data over rewards and there

386
00:13:06,240 --> 00:13:07,839
will be like a configuration registers

387
00:13:07,839 --> 00:13:09,279
as well where you could change the baud

388
00:13:09,279 --> 00:13:12,000
rate if you write to it one

389
00:13:12,000 --> 00:13:13,600
and the good thing about that is they

390
00:13:13,600 --> 00:13:16,000
can be cross raft in ida so you know if

391
00:13:16,000 --> 00:13:17,360
you go to like the right location and

392
00:13:17,360 --> 00:13:19,120
press x it's going to tell you like all

393
00:13:19,120 --> 00:13:21,360
the places that are touching the uart so

394
00:13:21,360 --> 00:13:23,760
it's extremely useful for reversing and

395
00:13:23,760 --> 00:13:26,320
given that it's given like the addresses

396
00:13:26,320 --> 00:13:28,079
are given in the data sheets or like the

397
00:13:28,079 --> 00:13:29,360
hardware manual

398
00:13:29,360 --> 00:13:31,600
uh it's really handy

399
00:13:31,600 --> 00:13:34,720
the other one is the introduction

400
00:13:34,720 --> 00:13:36,880
like the address of the interrupt table

401
00:13:36,880 --> 00:13:39,519
is stored in the np register of the m32c

402
00:13:39,519 --> 00:13:40,720
processor

403
00:13:40,720 --> 00:13:43,600
and it's basically a big table that is

404
00:13:43,600 --> 00:13:46,079
full of functions that get triggers when

405
00:13:46,079 --> 00:13:48,079
something interesting happen so it can

406
00:13:48,079 --> 00:13:49,680
be like there is data on the out of the

407
00:13:49,680 --> 00:13:51,920
can or like a timer like triggers and

408
00:13:51,920 --> 00:13:54,079
that kind of stuff

409
00:13:54,079 --> 00:13:55,680
if we look at the next slide we can see

410
00:13:55,680 --> 00:13:56,880
that there is like

411
00:13:56,880 --> 00:13:58,720
tons of them

412
00:13:58,720 --> 00:14:00,880
it's kind of overwhelming

413
00:14:00,880 --> 00:14:03,199
but if we look on the next slide that's

414
00:14:03,199 --> 00:14:05,040
how it's actually implemented in the

415
00:14:05,040 --> 00:14:06,959
firmware and so we can see a bunch of

416
00:14:06,959 --> 00:14:09,199
like fff in many locations and that

417
00:14:09,199 --> 00:14:11,600
means um those interrupts are not

418
00:14:11,600 --> 00:14:13,440
implemented but the ones that are

419
00:14:13,440 --> 00:14:15,600
actually implemented are all extremely

420
00:14:15,600 --> 00:14:17,519
useful because that's our like entry

421
00:14:17,519 --> 00:14:19,839
point for really interesting stuff

422
00:14:19,839 --> 00:14:22,160
uh for instance back to the uart example

423
00:14:22,160 --> 00:14:23,920
if we look at the next slide we can see

424
00:14:23,920 --> 00:14:26,720
a really simple card uh i think that was

425
00:14:26,720 --> 00:14:28,079
the only one that actually fit in one

426
00:14:28,079 --> 00:14:30,560
slide so that's why i picked that one

427
00:14:30,560 --> 00:14:32,240
but the idea is it check if it's

428
00:14:32,240 --> 00:14:34,720
expecting bytes like uart remain bytes

429
00:14:34,720 --> 00:14:38,079
is a global variable um and if it's

430
00:14:38,079 --> 00:14:40,880
explaining bytes it's going to read data

431
00:14:40,880 --> 00:14:41,760
from

432
00:14:41,760 --> 00:14:43,279
like a special function register

433
00:14:43,279 --> 00:14:44,880
highlighted in yellow

434
00:14:44,880 --> 00:14:46,959
and it's going to save that in a global

435
00:14:46,959 --> 00:14:48,160
buffer

436
00:14:48,160 --> 00:14:50,000
and that's part is important you don't

437
00:14:50,000 --> 00:14:51,680
want to spend too much time like in your

438
00:14:51,680 --> 00:14:53,519
intro tunneler and that's why you're

439
00:14:53,519 --> 00:14:55,839
going to have like separate like data

440
00:14:55,839 --> 00:14:57,279
structures

441
00:14:57,279 --> 00:14:59,839
living in global memory and whatnot

442
00:14:59,839 --> 00:15:02,240
that are going to be used uh by other

443
00:15:02,240 --> 00:15:04,399
functions and so the idea is if you want

444
00:15:04,399 --> 00:15:07,600
to climb up uh the abstraction layers

445
00:15:07,600 --> 00:15:08,880
uh you know like

446
00:15:08,880 --> 00:15:10,079
special function registers and

447
00:15:10,079 --> 00:15:12,160
interplanners at the bottom but if

448
00:15:12,160 --> 00:15:13,920
you're looking for like the function

449
00:15:13,920 --> 00:15:16,320
that would be like serial.send of the

450
00:15:16,320 --> 00:15:18,079
main application you would be more

451
00:15:18,079 --> 00:15:20,639
likely to find that by cross-referencing

452
00:15:20,639 --> 00:15:22,320
the global buffers and associated

453
00:15:22,320 --> 00:15:24,079
structures

454
00:15:24,079 --> 00:15:26,639
so that's the idea um

455
00:15:26,639 --> 00:15:27,839
and

456
00:15:27,839 --> 00:15:29,680
basically to summaries to a summary that

457
00:15:29,680 --> 00:15:31,680
thanks to the documentation that leads

458
00:15:31,680 --> 00:15:34,079
us to like sfr and interrupts we can

459
00:15:34,079 --> 00:15:36,800
find a bunch of interesting um

460
00:15:36,800 --> 00:15:38,880
like peripherals and the code that's

461
00:15:38,880 --> 00:15:41,759
like ending them but now i was said uh

462
00:15:41,759 --> 00:15:43,279
this is also like we can just click

463
00:15:43,279 --> 00:15:45,600
around in ida because that's fun and

464
00:15:45,600 --> 00:15:47,759
it's you know different

465
00:15:47,759 --> 00:15:49,759
uh and i felt like a bunch of

466
00:15:49,759 --> 00:15:51,040
interesting things and i wanted to

467
00:15:51,040 --> 00:15:52,880
highlight one specifically

468
00:15:52,880 --> 00:15:55,519
uh which is like the internal database

469
00:15:55,519 --> 00:15:56,800
of the device

470
00:15:56,800 --> 00:15:58,959
so that's really interesting because

471
00:15:58,959 --> 00:16:01,360
it's used for storing data but also

472
00:16:01,360 --> 00:16:03,440
triggering actions

473
00:16:03,440 --> 00:16:05,440
and that's used both like internally by

474
00:16:05,440 --> 00:16:07,040
the firmware itself

475
00:16:07,040 --> 00:16:08,800
like if a piece of code inside the

476
00:16:08,800 --> 00:16:10,000
firmware wants to know what's the

477
00:16:10,000 --> 00:16:11,440
patient name it's going to retrieve that

478
00:16:11,440 --> 00:16:13,360
from the database

479
00:16:13,360 --> 00:16:16,399
but it's also exposed on the canvas

480
00:16:16,399 --> 00:16:19,600
which is really interesting for us

481
00:16:19,839 --> 00:16:23,360
and the key names in in that um

482
00:16:23,360 --> 00:16:25,440
database can be recovered from like an

483
00:16:25,440 --> 00:16:27,199
external like binary such as the pcs

484
00:16:27,199 --> 00:16:29,440
binary that dog was talking about so the

485
00:16:29,440 --> 00:16:31,120
idea is you know otherwise you'd have

486
00:16:31,120 --> 00:16:33,920
just like an id like a number but pcs is

487
00:16:33,920 --> 00:16:35,360
doing the translation from like the

488
00:16:35,360 --> 00:16:36,560
number to like something that you can

489
00:16:36,560 --> 00:16:37,920
actually read

490
00:16:37,920 --> 00:16:39,519
which is extremely useful for like

491
00:16:39,519 --> 00:16:41,839
reversing because you know it gives

492
00:16:41,839 --> 00:16:43,440
context like when the firmware is

493
00:16:43,440 --> 00:16:45,120
retrieving a key in the database it

494
00:16:45,120 --> 00:16:46,639
tells you what it's doing

495
00:16:46,639 --> 00:16:48,240
and then you have like other stuff like

496
00:16:48,240 --> 00:16:49,759
i don't know like hello allowed range

497
00:16:49,759 --> 00:16:52,320
like type of data stored in that key

498
00:16:52,320 --> 00:16:54,880
and as i said the most important one or

499
00:16:54,880 --> 00:16:56,160
the really important one is callback

500
00:16:56,160 --> 00:16:58,320
functions because certain keys are not

501
00:16:58,320 --> 00:17:00,000
really used for like storing data or

502
00:17:00,000 --> 00:17:02,160
retrieving data but more like if you

503
00:17:02,160 --> 00:17:03,519
write to that key it's going to trigger

504
00:17:03,519 --> 00:17:04,480
an action

505
00:17:04,480 --> 00:17:07,119
and then we can also follow up

506
00:17:07,119 --> 00:17:09,520
all of this function and find what

507
00:17:09,520 --> 00:17:12,640
interesting things can be triggered

508
00:17:12,640 --> 00:17:15,119
so that's the idea

509
00:17:15,119 --> 00:17:17,359
and is there like other things that were

510
00:17:17,359 --> 00:17:19,199
like interesting you know exploration uh

511
00:17:19,199 --> 00:17:21,119
like a drug library that i will revisit

512
00:17:21,119 --> 00:17:22,640
in like 10 minutes

513
00:17:22,640 --> 00:17:24,480
and also like the bootloader that i

514
00:17:24,480 --> 00:17:26,000
mentioned we don't really have time to

515
00:17:26,000 --> 00:17:27,919
talk about this one unfortunately and

516
00:17:27,919 --> 00:17:29,360
another one that was really interesting

517
00:17:29,360 --> 00:17:32,240
is like css because lots of data inside

518
00:17:32,240 --> 00:17:34,559
the the pump are like crc multiple time

519
00:17:34,559 --> 00:17:36,320
to make sure that they are like

520
00:17:36,320 --> 00:17:38,000
the integrity is right

521
00:17:38,000 --> 00:17:39,760
and reversing that was also extremely

522
00:17:39,760 --> 00:17:41,520
important and useful and i will i will

523
00:17:41,520 --> 00:17:44,880
get that back get about that in a minute

524
00:17:44,880 --> 00:17:46,880
but overall like if we

525
00:17:46,880 --> 00:17:49,120
some summary that like we have all this

526
00:17:49,120 --> 00:17:50,799
understanding of the firmware but that

527
00:17:50,799 --> 00:17:52,640
leads to the question in all of that

528
00:17:52,640 --> 00:17:54,240
what could we pawn

529
00:17:54,240 --> 00:17:56,400
so by reversing you know like figuring

530
00:17:56,400 --> 00:17:58,320
out the uart and the can you know we got

531
00:17:58,320 --> 00:18:00,000
like the io code and the higher end link

532
00:18:00,000 --> 00:18:02,400
code and one one of the hopes was maybe

533
00:18:02,400 --> 00:18:04,480
we can find vulnerabilities in like the

534
00:18:04,480 --> 00:18:05,840
audio card

535
00:18:05,840 --> 00:18:07,919
now it turns out it's the pub is doing a

536
00:18:07,919 --> 00:18:10,320
really good job at sanitizing the data

537
00:18:10,320 --> 00:18:12,000
making sure things are arriving in the

538
00:18:12,000 --> 00:18:13,600
right order that you could not like

539
00:18:13,600 --> 00:18:15,520
write beyond the bond of a buffer and

540
00:18:15,520 --> 00:18:17,440
that kind of things so at least nothing

541
00:18:17,440 --> 00:18:19,120
obvious sticked out

542
00:18:19,120 --> 00:18:21,280
another like angle i was hoping to find

543
00:18:21,280 --> 00:18:24,000
was by finding all the flash code that

544
00:18:24,000 --> 00:18:25,760
lets you read and write to the flash

545
00:18:25,760 --> 00:18:27,679
right to the flash

546
00:18:27,679 --> 00:18:29,200
maybe you could find you know like the

547
00:18:29,200 --> 00:18:30,799
function that was like a firmware update

548
00:18:30,799 --> 00:18:33,200
and trigger a rogue firmware update you

549
00:18:33,200 --> 00:18:35,360
know if you don't uh if you can just do

550
00:18:35,360 --> 00:18:37,120
that you don't really need to like find

551
00:18:37,120 --> 00:18:38,960
a vulnerability you can just modify the

552
00:18:38,960 --> 00:18:40,480
firmware

553
00:18:40,480 --> 00:18:42,400
it turns out that the application

554
00:18:42,400 --> 00:18:44,160
cannot refresh itself

555
00:18:44,160 --> 00:18:46,720
and only the bootloader can uh refresh

556
00:18:46,720 --> 00:18:48,400
the whole thing so that would be like an

557
00:18:48,400 --> 00:18:49,919
avenue to explore

558
00:18:49,919 --> 00:18:52,400
but instead we want like the root of

559
00:18:52,400 --> 00:18:55,200
like looking at critical data

560
00:18:55,200 --> 00:18:57,039
so database and drug library and that

561
00:18:57,039 --> 00:18:59,280
kind of stuff and that's nice because as

562
00:18:59,280 --> 00:19:00,640
i said the database is exposed on the

563
00:19:00,640 --> 00:19:03,440
canvas so that's really exciting uh

564
00:19:03,440 --> 00:19:05,919
however like the one problem now is like

565
00:19:05,919 --> 00:19:08,880
how do we messages on the canvas and dog

566
00:19:08,880 --> 00:19:11,280
is going to talk about that now

567
00:19:11,280 --> 00:19:12,799
so philippe did all this awesome

568
00:19:12,799 --> 00:19:15,039
research on the m32c or critical

569
00:19:15,039 --> 00:19:16,880
operating system side but it doesn't

570
00:19:16,880 --> 00:19:18,880
it's not fruitful if we can't get to it

571
00:19:18,880 --> 00:19:20,640
so we have to go through the networking

572
00:19:20,640 --> 00:19:22,400
component of the device in order to be

573
00:19:22,400 --> 00:19:25,760
able to access the can bus so part as i

574
00:19:25,760 --> 00:19:27,440
said earlier part of the vulnerability

575
00:19:27,440 --> 00:19:29,440
discovery process is always the recon

576
00:19:29,440 --> 00:19:31,280
phase and i think this is often uh

577
00:19:31,280 --> 00:19:33,120
quickly overlooked at how valuable it

578
00:19:33,120 --> 00:19:35,679
can be when doing vulnerability research

579
00:19:35,679 --> 00:19:37,360
and one of the applications we had was

580
00:19:37,360 --> 00:19:40,320
an open source application the json dbus

581
00:19:40,320 --> 00:19:41,200
bridge

582
00:19:41,200 --> 00:19:42,880
and because it's open source we're able

583
00:19:42,880 --> 00:19:44,160
to look through different commit logs

584
00:19:44,160 --> 00:19:45,840
that are on github to see if there's

585
00:19:45,840 --> 00:19:47,440
anything there that would be useful for

586
00:19:47,440 --> 00:19:50,400
us trying to exploit this this process

587
00:19:50,400 --> 00:19:51,200
so

588
00:19:51,200 --> 00:19:53,520
we come across this commit message that

589
00:19:53,520 --> 00:19:56,160
says fix sending json containing percent

590
00:19:56,160 --> 00:19:57,360
characters

591
00:19:57,360 --> 00:19:58,880
now if you've done vulnerability

592
00:19:58,880 --> 00:20:00,640
research very long if you see something

593
00:20:00,640 --> 00:20:02,480
that says percent characters it triggers

594
00:20:02,480 --> 00:20:04,559
a mind of hold on what about format

595
00:20:04,559 --> 00:20:06,720
string vulnerabilities and if we look at

596
00:20:06,720 --> 00:20:08,799
the commit itself that's exactly what

597
00:20:08,799 --> 00:20:10,640
they're attempting to mitigate here you

598
00:20:10,640 --> 00:20:12,960
can see that there's two calls to printf

599
00:20:12,960 --> 00:20:14,559
that are being replaced by a put

600
00:20:14,559 --> 00:20:16,640
statement and they were originally

601
00:20:16,640 --> 00:20:19,600
taking json likely directly off the the

602
00:20:19,600 --> 00:20:21,440
network and putting it into an object

603
00:20:21,440 --> 00:20:23,520
which is a prime case for format string

604
00:20:23,520 --> 00:20:25,600
vulnerability now this was quietly

605
00:20:25,600 --> 00:20:27,760
patched and not necessarily ever filed

606
00:20:27,760 --> 00:20:30,360
as a cve or anything and it was done in

607
00:20:30,360 --> 00:20:33,120
2015. there's a chance obviously with

608
00:20:33,120 --> 00:20:35,600
our device being from 2017 that this has

609
00:20:35,600 --> 00:20:37,120
already been patched they're using the

610
00:20:37,120 --> 00:20:39,039
new version but you should never

611
00:20:39,039 --> 00:20:40,720
underestimate the power of an old

612
00:20:40,720 --> 00:20:42,400
vulnerability and should always be

613
00:20:42,400 --> 00:20:44,480
checking your products

614
00:20:44,480 --> 00:20:47,360
or your targets before it's just shoving

615
00:20:47,360 --> 00:20:48,559
it under the rug

616
00:20:48,559 --> 00:20:50,159
and since this is a very simple thing to

617
00:20:50,159 --> 00:20:52,320
test we created a crawl request that

618
00:20:52,320 --> 00:20:54,320
contained some percent or some sorry

619
00:20:54,320 --> 00:20:56,799
some format string identifiers and we

620
00:20:56,799 --> 00:20:58,640
are presented back with an error message

621
00:20:58,640 --> 00:21:01,039
however that error message contains hex

622
00:21:01,039 --> 00:21:03,039
characters and it appears that they

623
00:21:03,039 --> 00:21:04,880
could be either addresses or components

624
00:21:04,880 --> 00:21:06,000
of memory

625
00:21:06,000 --> 00:21:07,120
now as i said earlier in the

626
00:21:07,120 --> 00:21:09,120
presentation philippe and i are working

627
00:21:09,120 --> 00:21:10,559
in two different parts of the world so

628
00:21:10,559 --> 00:21:12,320
we spent a lot of time on like video

629
00:21:12,320 --> 00:21:13,919
chat like slack and zoom and all that

630
00:21:13,919 --> 00:21:16,320
fun stuff during our research and i got

631
00:21:16,320 --> 00:21:18,240
a picture of philippe's face when this

632
00:21:18,240 --> 00:21:20,480
happened in real time and really thought

633
00:21:20,480 --> 00:21:22,320
this was important because it really

634
00:21:22,320 --> 00:21:24,960
expresses our feelings when we saw that

635
00:21:24,960 --> 00:21:27,120
we were actually able to get

636
00:21:27,120 --> 00:21:29,520
memory or hex back in that dump so

637
00:21:29,520 --> 00:21:32,240
needless to say we now dug in our heels

638
00:21:32,240 --> 00:21:34,400
to create a working exploit of this

639
00:21:34,400 --> 00:21:36,559
potential format string vulnerability i

640
00:21:36,559 --> 00:21:38,080
must admit this was harder than we

641
00:21:38,080 --> 00:21:39,440
actually initially thought it was going

642
00:21:39,440 --> 00:21:42,320
to be doing this completely black box

643
00:21:42,320 --> 00:21:45,200
but there was a couple critical con

644
00:21:45,200 --> 00:21:47,039
i'm sorry a couple critical concepts

645
00:21:47,039 --> 00:21:48,799
that really helped us out here so we're

646
00:21:48,799 --> 00:21:50,720
able to use the percent x for mastering

647
00:21:50,720 --> 00:21:52,559
variable to continuously dump memory and

648
00:21:52,559 --> 00:21:54,240
we dump memory from all over the stack

649
00:21:54,240 --> 00:21:55,679
to other areas of

650
00:21:55,679 --> 00:21:57,760
other aspects of memory to really get an

651
00:21:57,760 --> 00:21:59,840
idea of what the system was laid out as

652
00:21:59,840 --> 00:22:01,520
and then we're able to use the percent

653
00:22:01,520 --> 00:22:03,600
and format string identifier to

654
00:22:03,600 --> 00:22:05,679
overwrite sections of memory and in this

655
00:22:05,679 --> 00:22:07,679
case being at a power pc we're able to

656
00:22:07,679 --> 00:22:10,000
overwrite the plt and then we were able

657
00:22:10,000 --> 00:22:12,400
to do a classic return with c attack

658
00:22:12,400 --> 00:22:14,000
and we get really excited about all this

659
00:22:14,000 --> 00:22:16,000
we finally get it all working and i hate

660
00:22:16,000 --> 00:22:17,679
to break it to you but we ended up with

661
00:22:17,679 --> 00:22:19,760
user level access which was a little bit

662
00:22:19,760 --> 00:22:21,440
disappointing after putting a lot of

663
00:22:21,440 --> 00:22:23,600
time into getting this exploit working

664
00:22:23,600 --> 00:22:26,400
but it was obviously a critical step and

665
00:22:26,400 --> 00:22:28,480
so then we move to the logical next step

666
00:22:28,480 --> 00:22:30,880
of privilege escalation to give you a

667
00:22:30,880 --> 00:22:32,320
little bit more background about this

668
00:22:32,320 --> 00:22:34,960
device it has a web interface and in

669
00:22:34,960 --> 00:22:37,919
that web interface it has a feature for

670
00:22:37,919 --> 00:22:40,559
exporting and restoring settings it's a

671
00:22:40,559 --> 00:22:43,440
backup scenario also allows you to carry

672
00:22:43,440 --> 00:22:46,240
settings from one pump to the next

673
00:22:46,240 --> 00:22:48,640
well as that function it creates a tar

674
00:22:48,640 --> 00:22:51,039
file and so when you restore that tar

675
00:22:51,039 --> 00:22:53,039
file though they don't do any cleaning

676
00:22:53,039 --> 00:22:54,720
up of permissions and so they actually

677
00:22:54,720 --> 00:22:56,880
preserve the file system permissions

678
00:22:56,880 --> 00:22:59,840
from the tar file so if we set the set

679
00:22:59,840 --> 00:23:02,960
uid bit for example for a binary it's

680
00:23:02,960 --> 00:23:05,520
going to be preserved on the restore

681
00:23:05,520 --> 00:23:07,280
and furthermore what's interesting is

682
00:23:07,280 --> 00:23:09,120
during this process they use a binary

683
00:23:09,120 --> 00:23:11,760
called the config export binary and if

684
00:23:11,760 --> 00:23:13,360
we dig into that as you can see on the

685
00:23:13,360 --> 00:23:15,520
hex on the right hand side this is

686
00:23:15,520 --> 00:23:18,799
actually exec being a script itself so

687
00:23:18,799 --> 00:23:20,480
what we ended up doing to get root

688
00:23:20,480 --> 00:23:23,440
access is we binary patch the config

689
00:23:23,440 --> 00:23:25,440
export to run a different script an

690
00:23:25,440 --> 00:23:27,440
attacker controlled script and we

691
00:23:27,440 --> 00:23:29,840
therefore restore that with the set ui

692
00:23:29,840 --> 00:23:32,159
bitmap and we are able to gain root

693
00:23:32,159 --> 00:23:34,159
access i have to give a shout out here

694
00:23:34,159 --> 00:23:35,679
to that earlier report that i mentioned

695
00:23:35,679 --> 00:23:37,600
the mannymed report they actually were

696
00:23:37,600 --> 00:23:39,760
able to report this before we did

697
00:23:39,760 --> 00:23:42,240
and this became a very uh pivotal

698
00:23:42,240 --> 00:23:45,440
pivotal uh component to our attack chain

699
00:23:45,440 --> 00:23:48,080
so uh kudos to them and this was a great

700
00:23:48,080 --> 00:23:50,320
find

701
00:23:50,320 --> 00:23:52,240
so we've got root right game over time

702
00:23:52,240 --> 00:23:54,320
to pack up and go home except for that's

703
00:23:54,320 --> 00:23:56,640
not really the atr way of doing things

704
00:23:56,640 --> 00:23:58,799
so we're able to get root access but we

705
00:23:58,799 --> 00:24:00,720
want to actually leverage a realistic

706
00:24:00,720 --> 00:24:02,320
attack scenario we don't just want to

707
00:24:02,320 --> 00:24:04,480
poc that there's a there's root access

708
00:24:04,480 --> 00:24:06,559
here and remember we have two

709
00:24:06,559 --> 00:24:08,320
isolated for all intention purposes

710
00:24:08,320 --> 00:24:10,320
operating systems connected by can bus

711
00:24:10,320 --> 00:24:12,320
so the question becomes

712
00:24:12,320 --> 00:24:14,080
can we control the pumps critical

713
00:24:14,080 --> 00:24:16,400
operations with root access it actually

714
00:24:16,400 --> 00:24:18,080
been previously reported by the vendor

715
00:24:18,080 --> 00:24:20,080
that that was not a possibility that

716
00:24:20,080 --> 00:24:22,640
root access on spacecom was not able to

717
00:24:22,640 --> 00:24:25,039
influence patient safety so this gave us

718
00:24:25,039 --> 00:24:27,120
extra motivation to see if we were able

719
00:24:27,120 --> 00:24:27,840
to

720
00:24:27,840 --> 00:24:29,840
to hack the patient

721
00:24:29,840 --> 00:24:32,000
and so we start digging into how are we

722
00:24:32,000 --> 00:24:33,679
going to accomplish this okay we've got

723
00:24:33,679 --> 00:24:35,200
root we understand about a little bit

724
00:24:35,200 --> 00:24:38,400
how the the critical os works we could

725
00:24:38,400 --> 00:24:40,080
uh you might you may be considering we

726
00:24:40,080 --> 00:24:41,919
could with root access directly right to

727
00:24:41,919 --> 00:24:43,600
the can bus we could send our own

728
00:24:43,600 --> 00:24:45,600
messages over and that would be one way

729
00:24:45,600 --> 00:24:47,440
to approach the problem however philippe

730
00:24:47,440 --> 00:24:49,039
and i like to use a concept called

731
00:24:49,039 --> 00:24:50,640
living off the land

732
00:24:50,640 --> 00:24:52,720
and that is can we use the system's

733
00:24:52,720 --> 00:24:54,960
designed functionality and maybe an

734
00:24:54,960 --> 00:24:56,799
unintended way

735
00:24:56,799 --> 00:24:58,400
to leverage the

736
00:24:58,400 --> 00:25:00,080
applications on the system to do what we

737
00:25:00,080 --> 00:25:01,600
want instead of kind of reinventing the

738
00:25:01,600 --> 00:25:03,039
wheel if we were to write canned

739
00:25:03,039 --> 00:25:04,400
messages we'd have to understand the

740
00:25:04,400 --> 00:25:06,080
format we'd have to understand the

741
00:25:06,080 --> 00:25:08,640
conversation from one side to the next

742
00:25:08,640 --> 00:25:10,159
if we're able to leverage existing

743
00:25:10,159 --> 00:25:12,559
infrastructure it becomes a lot easier

744
00:25:12,559 --> 00:25:14,559
and so we have this pcs binary we've

745
00:25:14,559 --> 00:25:16,559
been talking about previously and we

746
00:25:16,559 --> 00:25:18,799
know that that's communicating back and

747
00:25:18,799 --> 00:25:20,880
forth between the two sides so i dug

748
00:25:20,880 --> 00:25:22,640
into the pcs binary to see what we could

749
00:25:22,640 --> 00:25:24,240
find that would be helpful

750
00:25:24,240 --> 00:25:25,760
now i must admit i had things a little

751
00:25:25,760 --> 00:25:27,679
bit easier than philippe as i was

752
00:25:27,679 --> 00:25:29,679
working with the c plus application and

753
00:25:29,679 --> 00:25:31,760
i had a bunch of hints inside

754
00:25:31,760 --> 00:25:34,080
to make things a little bit easier

755
00:25:34,080 --> 00:25:35,679
one would be now i did not have symbols

756
00:25:35,679 --> 00:25:37,200
but i had a lot of debugging log

757
00:25:37,200 --> 00:25:39,360
statements and then those log statements

758
00:25:39,360 --> 00:25:41,200
actually contain names of functions and

759
00:25:41,200 --> 00:25:42,480
names of functions can be very

760
00:25:42,480 --> 00:25:44,400
descriptive and helpful to understanding

761
00:25:44,400 --> 00:25:46,480
what's going on in an application so

762
00:25:46,480 --> 00:25:48,000
here for example we have the function

763
00:25:48,000 --> 00:25:50,480
prepare data upload

764
00:25:50,480 --> 00:25:52,000
the other thing that i had that was

765
00:25:52,000 --> 00:25:54,559
useful was c plus plus type information

766
00:25:54,559 --> 00:25:56,159
so remember what our goal is here our

767
00:25:56,159 --> 00:25:58,480
goal is to leverage pcs in some manner

768
00:25:58,480 --> 00:26:01,120
to talk on the can bus to the other side

769
00:26:01,120 --> 00:26:03,279
well we find these objects called can

770
00:26:03,279 --> 00:26:05,840
operator objects which was a great clue

771
00:26:05,840 --> 00:26:07,840
that these might be objects in memory

772
00:26:07,840 --> 00:26:09,520
that we could leverage to speak to the

773
00:26:09,520 --> 00:26:10,640
can bus

774
00:26:10,640 --> 00:26:12,640
and if we look at the v table for the

775
00:26:12,640 --> 00:26:14,880
pump config can operator and we combine

776
00:26:14,880 --> 00:26:16,559
that with our ability to use the logging

777
00:26:16,559 --> 00:26:18,960
statements we can actually get a really

778
00:26:18,960 --> 00:26:21,200
good general idea of what functions do

779
00:26:21,200 --> 00:26:23,279
what for each one of these operators and

780
00:26:23,279 --> 00:26:26,000
how we can leverage that uh to speak on

781
00:26:26,000 --> 00:26:27,919
the can bus

782
00:26:27,919 --> 00:26:30,320
and last certainly not least we can look

783
00:26:30,320 --> 00:26:32,799
at the under and understand the the

784
00:26:32,799 --> 00:26:34,640
function the main functionality of this

785
00:26:34,640 --> 00:26:36,799
application which is to receive network

786
00:26:36,799 --> 00:26:38,799
commands so this is the switch statement

787
00:26:38,799 --> 00:26:40,640
that we cleaned up a little bit uh using

788
00:26:40,640 --> 00:26:42,320
those context clues

789
00:26:42,320 --> 00:26:44,320
that receives incoming network traffic

790
00:26:44,320 --> 00:26:45,760
and then processes that networking

791
00:26:45,760 --> 00:26:47,279
traffic now remember that networking

792
00:26:47,279 --> 00:26:49,679
traffic is in clear text so

793
00:26:49,679 --> 00:26:51,360
using that we're able to actually name

794
00:26:51,360 --> 00:26:53,120
these commands and we break them down

795
00:26:53,120 --> 00:26:55,520
the two general categories for the most

796
00:26:55,520 --> 00:26:57,360
part we have upload and download

797
00:26:57,360 --> 00:26:58,480
commands

798
00:26:58,480 --> 00:26:59,919
and they're going to generate the

799
00:26:59,919 --> 00:27:02,000
respective can operators to need on the

800
00:27:02,000 --> 00:27:04,320
others to talk to the other side

801
00:27:04,320 --> 00:27:06,159
so if we look about the upload commands

802
00:27:06,159 --> 00:27:07,840
that's what requires us to provide

803
00:27:07,840 --> 00:27:09,440
something to the pump but if we have to

804
00:27:09,440 --> 00:27:10,960
provide something to the pump we have to

805
00:27:10,960 --> 00:27:12,799
understand what what it expects

806
00:27:12,799 --> 00:27:15,039
potentially go through validation and

807
00:27:15,039 --> 00:27:17,039
that sounds like a lot of work but if we

808
00:27:17,039 --> 00:27:19,039
use the download commands

809
00:27:19,039 --> 00:27:20,480
that's not expecting anything from us

810
00:27:20,480 --> 00:27:22,559
we're asking something from the pump and

811
00:27:22,559 --> 00:27:24,159
if that's the case it's still going to

812
00:27:24,159 --> 00:27:25,919
communicate over the the can bus and

813
00:27:25,919 --> 00:27:27,840
provide the objects that we need

814
00:27:27,840 --> 00:27:29,760
even more specifically we can find this

815
00:27:29,760 --> 00:27:32,080
command called the download pump config

816
00:27:32,080 --> 00:27:34,320
command which lo and behold creates a

817
00:27:34,320 --> 00:27:37,520
pump config can operator and so if we

818
00:27:37,520 --> 00:27:39,919
put all this together we're able to

819
00:27:39,919 --> 00:27:41,919
construct a call chain of what is

820
00:27:41,919 --> 00:27:44,559
necessary in order to make a read or

821
00:27:44,559 --> 00:27:46,080
write command on the critical operating

822
00:27:46,080 --> 00:27:48,720
system from the space com unit

823
00:27:48,720 --> 00:27:50,320
so we first have to activate something

824
00:27:50,320 --> 00:27:52,240
called service mode and this just means

825
00:27:52,240 --> 00:27:53,840
that we have the appropriate permissions

826
00:27:53,840 --> 00:27:56,240
to make changes then we have to disable

827
00:27:56,240 --> 00:27:58,240
the right protection by disabling flash

828
00:27:58,240 --> 00:27:59,279
protection

829
00:27:59,279 --> 00:28:01,039
then we're going to be able to we have

830
00:28:01,039 --> 00:28:03,120
to have that pump config cam operator

831
00:28:03,120 --> 00:28:04,960
object but we know how to create one by

832
00:28:04,960 --> 00:28:06,960
simply sending a download pump config

833
00:28:06,960 --> 00:28:08,640
command and since the pump's not

834
00:28:08,640 --> 00:28:10,480
authenticating us an attacker is able to

835
00:28:10,480 --> 00:28:11,600
do that

836
00:28:11,600 --> 00:28:13,760
then we want to write to it or read from

837
00:28:13,760 --> 00:28:15,760
it and we can use set service data to do

838
00:28:15,760 --> 00:28:17,600
that and then we simply set everything

839
00:28:17,600 --> 00:28:19,760
back in reverse by re-enabling the flash

840
00:28:19,760 --> 00:28:22,480
and deactivating service mode

841
00:28:22,480 --> 00:28:24,240
so great now we have that understanding

842
00:28:24,240 --> 00:28:26,640
we know how to bridge the gap between

843
00:28:26,640 --> 00:28:28,960
the the networking aspect or the

844
00:28:28,960 --> 00:28:31,120
communication module of spacecom and the

845
00:28:31,120 --> 00:28:32,880
critical rtos system

846
00:28:32,880 --> 00:28:34,960
and so if we were actually a malicious

847
00:28:34,960 --> 00:28:36,480
entity that would be time to write

848
00:28:36,480 --> 00:28:38,399
malware remember we have root access so

849
00:28:38,399 --> 00:28:40,480
writing malware that can hook processes

850
00:28:40,480 --> 00:28:41,840
is fair game

851
00:28:41,840 --> 00:28:44,000
however we can kind of cheat since we're

852
00:28:44,000 --> 00:28:45,840
not actually trying to weaponize this

853
00:28:45,840 --> 00:28:48,320
and we can use gdb and have that act as

854
00:28:48,320 --> 00:28:50,880
our malware there's nothing that gdb can

855
00:28:50,880 --> 00:28:52,960
not that can do that you couldn't do

856
00:28:52,960 --> 00:28:54,559
with malware as long as you had root

857
00:28:54,559 --> 00:28:55,520
access

858
00:28:55,520 --> 00:28:58,000
so we're going to use gdb attached to

859
00:28:58,000 --> 00:29:00,320
pcs put a breakpoint so we're able to

860
00:29:00,320 --> 00:29:02,399
capture that pump config can operator

861
00:29:02,399 --> 00:29:04,559
object and then we can use the gdb

862
00:29:04,559 --> 00:29:06,960
interface to execute function calls to

863
00:29:06,960 --> 00:29:08,640
modify data

864
00:29:08,640 --> 00:29:10,640
great we know what we know exactly what

865
00:29:10,640 --> 00:29:12,640
we need to do except for now there's the

866
00:29:12,640 --> 00:29:15,039
complicated question of what do we want

867
00:29:15,039 --> 00:29:16,720
to write and where the heck do we write

868
00:29:16,720 --> 00:29:18,559
it it's kind of like doing a got

869
00:29:18,559 --> 00:29:20,640
overripe and exploitation it's great

870
00:29:20,640 --> 00:29:22,559
that you have the capability to do it

871
00:29:22,559 --> 00:29:24,559
but until you know what to write where

872
00:29:24,559 --> 00:29:26,799
it's not very useful and so for this i

873
00:29:26,799 --> 00:29:28,000
have to turn this back over to the

874
00:29:28,000 --> 00:29:30,480
wizard himself in order to explain to us

875
00:29:30,480 --> 00:29:31,760
how does the critical data in this

876
00:29:31,760 --> 00:29:34,399
system work

877
00:29:34,720 --> 00:29:36,159
yeah thank you doug

878
00:29:36,159 --> 00:29:37,600
so um

879
00:29:37,600 --> 00:29:38,960
we were like in that situation where we

880
00:29:38,960 --> 00:29:40,799
wanted to mess with some data on the

881
00:29:40,799 --> 00:29:42,960
pump but the question was like here what

882
00:29:42,960 --> 00:29:47,360
can what can we mess with uh one of the

883
00:29:47,679 --> 00:29:50,799
feel like a safety net uh to avoid like

884
00:29:50,799 --> 00:29:53,200
improper improper like dosing

885
00:29:53,200 --> 00:29:55,200
when you know like a nurse enter like

886
00:29:55,200 --> 00:29:57,279
information on the pump

887
00:29:57,279 --> 00:29:59,840
um and so it's it's it's a solid safety

888
00:29:59,840 --> 00:30:01,600
net but there's also like lots of data

889
00:30:01,600 --> 00:30:03,120
structure to reverse

890
00:30:03,120 --> 00:30:05,200
and one of the realization we came into

891
00:30:05,200 --> 00:30:09,200
is probably most of the things that the

892
00:30:09,200 --> 00:30:11,760
drug library like could hold is

893
00:30:11,760 --> 00:30:12,960
something that's going to be shown on

894
00:30:12,960 --> 00:30:14,240
screen

895
00:30:14,240 --> 00:30:16,799
and in the process like nurses or

896
00:30:16,799 --> 00:30:18,640
doctors are expected to double check

897
00:30:18,640 --> 00:30:21,279
that the value on screen matches what's

898
00:30:21,279 --> 00:30:23,600
on there like medical sheets

899
00:30:23,600 --> 00:30:25,760
so if we sure we can remove you know

900
00:30:25,760 --> 00:30:28,720
like safety measures um well we might

901
00:30:28,720 --> 00:30:29,919
but um

902
00:30:29,919 --> 00:30:31,840
that would still rely on you know

903
00:30:31,840 --> 00:30:34,240
external errors to have like important

904
00:30:34,240 --> 00:30:36,559
impact so we also looked into something

905
00:30:36,559 --> 00:30:38,399
else which is the calibration data and

906
00:30:38,399 --> 00:30:40,799
disposable data those are like internal

907
00:30:40,799 --> 00:30:42,320
parameters that

908
00:30:42,320 --> 00:30:45,120
kind of govern how the device function

909
00:30:45,120 --> 00:30:46,960
and those are not exposed to the end

910
00:30:46,960 --> 00:30:49,440
user it's a moment for like servicing

911
00:30:49,440 --> 00:30:51,840
and configuring the device itself so by

912
00:30:51,840 --> 00:30:53,520
being invisible to the end user that's

913
00:30:53,520 --> 00:30:55,200
much more likely to be able to tamper

914
00:30:55,200 --> 00:30:57,039
with something that

915
00:30:57,039 --> 00:30:59,440
would remain unnoticed for longer

916
00:30:59,440 --> 00:31:01,360
so to share some of our like nice

917
00:31:01,360 --> 00:31:04,399
results um

918
00:31:04,399 --> 00:31:05,760
we um

919
00:31:05,760 --> 00:31:08,240
we we can look on the next slide um we

920
00:31:08,240 --> 00:31:11,039
have that's a screenshot from kaitai

921
00:31:11,039 --> 00:31:12,480
which might be a little confusing at

922
00:31:12,480 --> 00:31:14,559
first but uh basically it's a tool it's

923
00:31:14,559 --> 00:31:16,480
kind of like ida for reversing data

924
00:31:16,480 --> 00:31:19,360
structure so you can type you know you

925
00:31:19,360 --> 00:31:20,320
understand

926
00:31:20,320 --> 00:31:22,159
data type and it's automatically going

927
00:31:22,159 --> 00:31:23,760
to pass like the data you provide

928
00:31:23,760 --> 00:31:25,760
following those patterns so it's

929
00:31:25,760 --> 00:31:28,159
extremely useful for both understanding

930
00:31:28,159 --> 00:31:30,960
the data and making sure like when

931
00:31:30,960 --> 00:31:32,799
you're reversing like a data structure

932
00:31:32,799 --> 00:31:35,200
you like understand correctly what it

933
00:31:35,200 --> 00:31:37,039
does it's doing and you can verify that

934
00:31:37,039 --> 00:31:38,240
on live data

935
00:31:38,240 --> 00:31:40,480
uh so like in in that screenshot i was

936
00:31:40,480 --> 00:31:42,080
posting strings

937
00:31:42,080 --> 00:31:44,799
and that leads to that nice result where

938
00:31:44,799 --> 00:31:48,000
we were like able to patch um

939
00:31:48,000 --> 00:31:51,279
like a a word name inside a drug library

940
00:31:51,279 --> 00:31:54,000
fix all of the required crcs and push

941
00:31:54,000 --> 00:31:55,760
that to the pump and it would actually

942
00:31:55,760 --> 00:31:57,600
accept it and display our like our name

943
00:31:57,600 --> 00:31:59,200
on it so there's a really nice proof of

944
00:31:59,200 --> 00:32:00,960
concept that shows that we could tamper

945
00:32:00,960 --> 00:32:01,919
with

946
00:32:01,919 --> 00:32:04,240
uh the drug library and if we wanted we

947
00:32:04,240 --> 00:32:06,080
could like alter like the soft limits

948
00:32:06,080 --> 00:32:08,880
between and remove some protections so

949
00:32:08,880 --> 00:32:10,880
that's that that's enough to show like

950
00:32:10,880 --> 00:32:12,480
impact but um

951
00:32:12,480 --> 00:32:14,159
it was just nicer to like choose our

952
00:32:14,159 --> 00:32:15,600
name on the screen

953
00:32:15,600 --> 00:32:16,559
um

954
00:32:16,559 --> 00:32:19,279
the limitation of that as i said is uh

955
00:32:19,279 --> 00:32:21,120
we can only we pretty much only can

956
00:32:21,120 --> 00:32:24,159
modify uh things on screen so that's

957
00:32:24,159 --> 00:32:26,080
limited in that regard

958
00:32:26,080 --> 00:32:29,120
the other angle was uh the disposable

959
00:32:29,120 --> 00:32:31,519
data which is basically like the recipe

960
00:32:31,519 --> 00:32:34,240
for the pump to know how to uh handle

961
00:32:34,240 --> 00:32:36,480
like specific infusion tubes you know

962
00:32:36,480 --> 00:32:38,000
it's the same as if you had a printer

963
00:32:38,000 --> 00:32:40,159
and it had to know like oh is it like a

964
00:32:40,159 --> 00:32:43,919
a4 liter or like a for paper or later

965
00:32:43,919 --> 00:32:46,320
size paper and that kind of stuff

966
00:32:46,320 --> 00:32:48,159
on the left side it's a shot of the

967
00:32:48,159 --> 00:32:50,799
disposable data and all of those values

968
00:32:50,799 --> 00:32:52,880
are actually keys in the database i was

969
00:32:52,880 --> 00:32:54,559
talking about

970
00:32:54,559 --> 00:32:56,399
the most interesting one that sticks out

971
00:32:56,399 --> 00:32:59,120
to us is the tube head volume because

972
00:32:59,120 --> 00:33:01,360
it's basically uh the volume of the tube

973
00:33:01,360 --> 00:33:04,880
itself and that's how the pump knows uh

974
00:33:04,880 --> 00:33:07,120
every time it's like squeezed to like

975
00:33:07,120 --> 00:33:09,760
push the drug in through the tube it

976
00:33:09,760 --> 00:33:12,240
knows the the volume that's being pushed

977
00:33:12,240 --> 00:33:13,840
uh the pump itself doesn't know the

978
00:33:13,840 --> 00:33:14,880
volume

979
00:33:14,880 --> 00:33:16,720
by some measuring tools and instead it

980
00:33:16,720 --> 00:33:18,880
needs to be told if it can squeeze

981
00:33:18,880 --> 00:33:21,039
that's that much volume so if you tamper

982
00:33:21,039 --> 00:33:23,360
with that value uh which is used for

983
00:33:23,360 --> 00:33:25,200
like calculation

984
00:33:25,200 --> 00:33:26,960
uh it's going like the pump is going to

985
00:33:26,960 --> 00:33:28,799
do like completely wrong math

986
00:33:28,799 --> 00:33:30,640
and it's going to end up in over or

987
00:33:30,640 --> 00:33:33,440
under delivery of the drug

988
00:33:33,440 --> 00:33:35,840
so just as a quick summary of alcohol

989
00:33:35,840 --> 00:33:38,399
the whole process uh you can see on the

990
00:33:38,399 --> 00:33:40,159
right side dog ready to like hack the

991
00:33:40,159 --> 00:33:42,799
patient uh and you're gonna get that in

992
00:33:42,799 --> 00:33:45,120
a sec but what we want we're going to do

993
00:33:45,120 --> 00:33:47,200
is you know modify this possible data

994
00:33:47,200 --> 00:33:49,600
and specifically the tubebuddy volume

995
00:33:49,600 --> 00:33:52,320
this is stored in the flash memory and

996
00:33:52,320 --> 00:33:53,840
we interact with that through the

997
00:33:53,840 --> 00:33:57,120
internal database and to do so uh you

998
00:33:57,120 --> 00:33:59,279
know using pcs and

999
00:33:59,279 --> 00:34:01,760
being instrumented with gdb we can issue

1000
00:34:01,760 --> 00:34:04,320
our own sense service data that actually

1001
00:34:04,320 --> 00:34:06,240
writes a key to the database and

1002
00:34:06,240 --> 00:34:08,399
basically issue like cad messages that

1003
00:34:08,399 --> 00:34:10,159
reaches to the pump

1004
00:34:10,159 --> 00:34:12,079
the requirement for making that working

1005
00:34:12,079 --> 00:34:16,159
is we had to account for multiple css

1006
00:34:16,399 --> 00:34:17,760
because

1007
00:34:17,760 --> 00:34:19,760
the disposable data is

1008
00:34:19,760 --> 00:34:21,520
as like multiple accuracy to make sure

1009
00:34:21,520 --> 00:34:22,239
it's

1010
00:34:22,239 --> 00:34:24,480
its integrity is okay and so we had to

1011
00:34:24,480 --> 00:34:26,159
reverse that and reverse the data

1012
00:34:26,159 --> 00:34:27,760
structure of those which was like pretty

1013
00:34:27,760 --> 00:34:28,719
tricky

1014
00:34:28,719 --> 00:34:31,280
and also we had to first erase the

1015
00:34:31,280 --> 00:34:33,839
existing data disposable data stored on

1016
00:34:33,839 --> 00:34:35,918
the flash because otherwise it just

1017
00:34:35,918 --> 00:34:38,079
overwrites in place and everything gets

1018
00:34:38,079 --> 00:34:39,119
mangled

1019
00:34:39,119 --> 00:34:41,679
and we did a break one pump and barely

1020
00:34:41,679 --> 00:34:43,918
managed to salvage a small one and then

1021
00:34:43,918 --> 00:34:45,359
we understood what was going on and were

1022
00:34:45,359 --> 00:34:47,040
like able to move on but it was a little

1023
00:34:47,040 --> 00:34:49,760
stressful at first uh but yeah so now a

1024
00:34:49,760 --> 00:34:52,560
dog is going to show you uh the actual

1025
00:34:52,560 --> 00:34:55,760
uh hacking process in progress

1026
00:34:55,760 --> 00:34:56,800
right so

1027
00:34:56,800 --> 00:34:58,880
now we understand what data we need to

1028
00:34:58,880 --> 00:35:00,800
modify so we have the vehicle to get

1029
00:35:00,800 --> 00:35:03,520
initial access to the device we have the

1030
00:35:03,520 --> 00:35:05,839
method to speak over the can bus to send

1031
00:35:05,839 --> 00:35:07,359
commands to the other side and we know

1032
00:35:07,359 --> 00:35:08,960
what we want to change

1033
00:35:08,960 --> 00:35:10,720
so the best way to really culminate this

1034
00:35:10,720 --> 00:35:12,240
and to understand

1035
00:35:12,240 --> 00:35:14,320
what what needs to happen is to simply

1036
00:35:14,320 --> 00:35:16,800
show you a demo video of that of this

1037
00:35:16,800 --> 00:35:19,280
going on

1038
00:35:19,680 --> 00:35:21,760
so here what we have is we have the pump

1039
00:35:21,760 --> 00:35:24,079
and we've set it up as a base case so

1040
00:35:24,079 --> 00:35:26,400
this is going to show exactly what

1041
00:35:26,400 --> 00:35:28,400
should happen in normal operations so

1042
00:35:28,400 --> 00:35:30,320
we're following the manual the

1043
00:35:30,320 --> 00:35:32,079
recommended guidance on how to use this

1044
00:35:32,079 --> 00:35:34,480
device so first we're going to load it

1045
00:35:34,480 --> 00:35:36,000
we're going to load an iv line into the

1046
00:35:36,000 --> 00:35:38,160
pump and we've got it set up with 50

1047
00:35:38,160 --> 00:35:40,640
milliliters of of drug or liquid if you

1048
00:35:40,640 --> 00:35:42,560
will for our test cases we're just using

1049
00:35:42,560 --> 00:35:43,599
water

1050
00:35:43,599 --> 00:35:44,960
and we're going to use a very basic

1051
00:35:44,960 --> 00:35:47,119
infusion so we're going to use a hundred

1052
00:35:47,119 --> 00:35:49,760
milliliters an hour with a thousand vtpi

1053
00:35:49,760 --> 00:35:51,839
or volume to be infused and we're going

1054
00:35:51,839 --> 00:35:53,280
to start the pump and we're going to see

1055
00:35:53,280 --> 00:35:55,200
over just a few minutes how much drug is

1056
00:35:55,200 --> 00:35:57,359
released and our expected result would

1057
00:35:57,359 --> 00:35:59,359
be that the amount of drug that the pump

1058
00:35:59,359 --> 00:36:01,359
reports being released is exactly what's

1059
00:36:01,359 --> 00:36:03,599
being released and we can see this here

1060
00:36:03,599 --> 00:36:05,839
uh by the you look at the vial of how

1061
00:36:05,839 --> 00:36:08,320
much drug is gone and what the pump is

1062
00:36:08,320 --> 00:36:09,920
reporting and it's pretty clear that

1063
00:36:09,920 --> 00:36:12,240
it's approximately the same about five

1064
00:36:12,240 --> 00:36:13,920
milliliters

1065
00:36:13,920 --> 00:36:16,160
well now we want to leverage the attack

1066
00:36:16,160 --> 00:36:18,160
chain that philippe and i have created

1067
00:36:18,160 --> 00:36:19,920
to see if it actually makes a new

1068
00:36:19,920 --> 00:36:21,839
difference on the pump so we're first

1069
00:36:21,839 --> 00:36:23,359
going to use some python scripts we

1070
00:36:23,359 --> 00:36:25,920
created to exercise that format string

1071
00:36:25,920 --> 00:36:28,240
vulnerability to gain root privileges to

1072
00:36:28,240 --> 00:36:30,400
create an ssh session to load the tools

1073
00:36:30,400 --> 00:36:33,040
we need to use gdb to hook into the pcs

1074
00:36:33,040 --> 00:36:34,079
binary

1075
00:36:34,079 --> 00:36:35,839
and so then we need to have a send the

1076
00:36:35,839 --> 00:36:37,440
network command over the network to

1077
00:36:37,440 --> 00:36:39,280
create that pump config can operator

1078
00:36:39,280 --> 00:36:41,359
object that we talked about again that's

1079
00:36:41,359 --> 00:36:43,680
unauthenticated so it works for us and

1080
00:36:43,680 --> 00:36:45,200
now we're going to read into that

1081
00:36:45,200 --> 00:36:46,720
database that felipe was mentioning

1082
00:36:46,720 --> 00:36:48,400
let's just check to see what the value

1083
00:36:48,400 --> 00:36:50,960
is so it looks like it's 15c for that

1084
00:36:50,960 --> 00:36:52,400
tube head volume

1085
00:36:52,400 --> 00:36:54,720
now the attacker is going to first erase

1086
00:36:54,720 --> 00:36:56,800
and rewrite the database with the values

1087
00:36:56,800 --> 00:36:58,800
that they would like in there as you can

1088
00:36:58,800 --> 00:37:00,240
see on the right those lights are

1089
00:37:00,240 --> 00:37:02,000
flashing on the pump indicating the pump

1090
00:37:02,000 --> 00:37:04,079
is in service mode which by the way it

1091
00:37:04,079 --> 00:37:05,680
was supposedly that you can't do that

1092
00:37:05,680 --> 00:37:07,359
remotely

1093
00:37:07,359 --> 00:37:09,680
so here we are the attacker is rewriting

1094
00:37:09,680 --> 00:37:12,800
the database to their desired values and

1095
00:37:12,800 --> 00:37:14,960
they're making sure to set that tube

1096
00:37:14,960 --> 00:37:16,640
head volume to what they would like it

1097
00:37:16,640 --> 00:37:18,560
to be the attacker is then going to

1098
00:37:18,560 --> 00:37:20,000
reboot the pump

1099
00:37:20,000 --> 00:37:21,520
and they're doing this to ensure that

1100
00:37:21,520 --> 00:37:23,359
their changes take effect but also

1101
00:37:23,359 --> 00:37:24,880
there'll be some notifications that are

1102
00:37:24,880 --> 00:37:26,560
triggered that changes have happened and

1103
00:37:26,560 --> 00:37:28,640
we want to clear them to make sure that

1104
00:37:28,640 --> 00:37:30,400
staff is actually not notified that

1105
00:37:30,400 --> 00:37:32,079
anything's changed

1106
00:37:32,079 --> 00:37:33,680
and now we're going to take a second

1107
00:37:33,680 --> 00:37:35,119
look at that database we're going to

1108
00:37:35,119 --> 00:37:37,359
read to see what the what the value is

1109
00:37:37,359 --> 00:37:39,040
for tube head volume

1110
00:37:39,040 --> 00:37:40,800
and what we're going to get back is a

1111
00:37:40,800 --> 00:37:44,320
new value of 0 a e and for hex math that

1112
00:37:44,320 --> 00:37:46,079
literally means we have half of what we

1113
00:37:46,079 --> 00:37:47,520
had originally

1114
00:37:47,520 --> 00:37:49,440
so now we want to run our same basic

1115
00:37:49,440 --> 00:37:51,119
test case again and make sure that we

1116
00:37:51,119 --> 00:37:53,119
follow the exact same procedures being a

1117
00:37:53,119 --> 00:37:55,599
good scientist that we are to see if we

1118
00:37:55,599 --> 00:37:58,160
have a different different conclusion

1119
00:37:58,160 --> 00:38:00,079
so once again we're going to set up the

1120
00:38:00,079 --> 00:38:01,920
the pump following the manufacturer

1121
00:38:01,920 --> 00:38:04,240
guidelines on how to use the device

1122
00:38:04,240 --> 00:38:06,960
we're going to load a new infusion

1123
00:38:06,960 --> 00:38:08,720
and we're going to set it up to the same

1124
00:38:08,720 --> 00:38:11,599
test that we had before of a 100

1125
00:38:11,599 --> 00:38:14,000
milliliters an hour with a thousand vtpi

1126
00:38:14,000 --> 00:38:16,079
or volumes to be infused

1127
00:38:16,079 --> 00:38:18,320
now we should see the exact same result

1128
00:38:18,320 --> 00:38:20,400
we saw before but if our changes have

1129
00:38:20,400 --> 00:38:22,079
done anything we should we'll see a

1130
00:38:22,079 --> 00:38:24,000
different result and you can very

1131
00:38:24,000 --> 00:38:26,160
quickly already start to see there is a

1132
00:38:26,160 --> 00:38:28,079
big difference between what the pump is

1133
00:38:28,079 --> 00:38:30,640
reporting and what's actually happening

1134
00:38:30,640 --> 00:38:32,400
and by the time we take a snapshot at

1135
00:38:32,400 --> 00:38:34,800
the exact same point in time the pump

1136
00:38:34,800 --> 00:38:36,640
will have reported five milliliters

1137
00:38:36,640 --> 00:38:38,320
where we've actually dispensed 10

1138
00:38:38,320 --> 00:38:42,160
milliliters of medication to a patient

1139
00:38:42,160 --> 00:38:44,880
so we are successfully able to remotely

1140
00:38:44,880 --> 00:38:46,960
uh to remotely compromise the pump and

1141
00:38:46,960 --> 00:38:49,680
make a change that is effective uh to

1142
00:38:49,680 --> 00:38:52,240
the to the patient

1143
00:38:52,240 --> 00:38:54,880
so what does that mean in the context of

1144
00:38:54,880 --> 00:38:57,839
uh of these devices well we're able to

1145
00:38:57,839 --> 00:38:59,680
manipulate the dosage and once again we

1146
00:38:59,680 --> 00:39:01,520
want to make sure that our research is

1147
00:39:01,520 --> 00:39:03,680
as correct and relevant as possible so

1148
00:39:03,680 --> 00:39:06,560
we're going to consult industry experts

1149
00:39:06,560 --> 00:39:08,400
and so one of the experts we consulted

1150
00:39:08,400 --> 00:39:10,480
dr sean nordic it really helps us to

1151
00:39:10,480 --> 00:39:12,560
understand that it doesn't really take

1152
00:39:12,560 --> 00:39:14,560
much in modifying medication delivered

1153
00:39:14,560 --> 00:39:16,480
to a patient to cause

1154
00:39:16,480 --> 00:39:18,240
very big harm to a patient and

1155
00:39:18,240 --> 00:39:20,400
potentially even death

1156
00:39:20,400 --> 00:39:22,000
and if we zoom out for a minute and we

1157
00:39:22,000 --> 00:39:24,240
don't go as far as modifying medication

1158
00:39:24,240 --> 00:39:26,400
that's being delivered to a patient with

1159
00:39:26,400 --> 00:39:28,800
root access on spacecom we would be able

1160
00:39:28,800 --> 00:39:30,800
to install ransomware which we see

1161
00:39:30,800 --> 00:39:34,000
increasingly uh over the last couple of

1162
00:39:34,000 --> 00:39:36,000
years being more and more used in the

1163
00:39:36,000 --> 00:39:38,160
medical space in fact one example of

1164
00:39:38,160 --> 00:39:41,280
that is uh on october of 2020 at the

1165
00:39:41,280 --> 00:39:44,000
vermont medical center where 75 percent

1166
00:39:44,000 --> 00:39:45,680
of all chemo patients had to be turned

1167
00:39:45,680 --> 00:39:48,160
away uh due to the fact that of a

1168
00:39:48,160 --> 00:39:51,040
ransomware attack

1169
00:39:52,000 --> 00:39:54,160
so what does this all kind of culminate

1170
00:39:54,160 --> 00:39:55,440
to you know

1171
00:39:55,440 --> 00:39:56,400
philippe and i have done a lot of

1172
00:39:56,400 --> 00:39:57,760
different vulnerability research and we

1173
00:39:57,760 --> 00:39:59,839
correlate this compared to other uh

1174
00:39:59,839 --> 00:40:02,079
medical uh research done what are some

1175
00:40:02,079 --> 00:40:03,680
trends that we're seeing and here i've

1176
00:40:03,680 --> 00:40:05,040
got some common pitfalls that we're

1177
00:40:05,040 --> 00:40:06,400
seeing in the medical industry when it

1178
00:40:06,400 --> 00:40:08,000
comes to security and i'm just gonna

1179
00:40:08,000 --> 00:40:10,400
cover a couple really quick

1180
00:40:10,400 --> 00:40:11,760
and one is i want to go back to that

1181
00:40:11,760 --> 00:40:13,520
device life cycle i talked to in the

1182
00:40:13,520 --> 00:40:15,200
beginning you know we mentioned that

1183
00:40:15,200 --> 00:40:17,599
this device was from 2017 and still in

1184
00:40:17,599 --> 00:40:19,839
use and this is this is a big issue in

1185
00:40:19,839 --> 00:40:21,440
the medical industry we've got devices

1186
00:40:21,440 --> 00:40:23,920
that are still in use from 2008 and that

1187
00:40:23,920 --> 00:40:26,079
causes legacy vulnerabilities to still

1188
00:40:26,079 --> 00:40:27,520
be in existence

1189
00:40:27,520 --> 00:40:29,520
and part of that is because patching is

1190
00:40:29,520 --> 00:40:31,599
costly and when i say costly i mean

1191
00:40:31,599 --> 00:40:33,920
financially this isn't updating your

1192
00:40:33,920 --> 00:40:35,599
windows 10 box where you know you just

1193
00:40:35,599 --> 00:40:37,440
get a new update and it's automatically

1194
00:40:37,440 --> 00:40:38,480
installed

1195
00:40:38,480 --> 00:40:40,400
a lot of times this requires the devices

1196
00:40:40,400 --> 00:40:42,400
to be decommissioned or sent back to

1197
00:40:42,400 --> 00:40:44,400
vendors or pulled out of service and

1198
00:40:44,400 --> 00:40:46,000
that can cost the hospital or medical

1199
00:40:46,000 --> 00:40:48,480
facility millions of dollars

1200
00:40:48,480 --> 00:40:51,040
and so hospital hospitals really have to

1201
00:40:51,040 --> 00:40:53,760
kind of prioritize what they're able to

1202
00:40:53,760 --> 00:40:57,520
patch and they can't always do it often

1203
00:40:58,240 --> 00:40:59,520
so

1204
00:40:59,520 --> 00:41:01,040
you know we threw a lot of information

1205
00:41:01,040 --> 00:41:02,880
out there today in case you fell asleep

1206
00:41:02,880 --> 00:41:05,040
or you just want the highlights

1207
00:41:05,040 --> 00:41:06,960
this this is what we ended up

1208
00:41:06,960 --> 00:41:09,280
discovering is we have five cbes the

1209
00:41:09,280 --> 00:41:12,000
highest being a 9.7 that allows us to

1210
00:41:12,000 --> 00:41:14,240
remotely compromise the b-brom infusion

1211
00:41:14,240 --> 00:41:16,400
pump which exploitation can lead to

1212
00:41:16,400 --> 00:41:19,040
overdosing or under-dosing a patient

1213
00:41:19,040 --> 00:41:21,839
infusion pumps are insanely popular in a

1214
00:41:21,839 --> 00:41:24,400
year's time 54 billion dollars worldwide

1215
00:41:24,400 --> 00:41:26,880
are done in sales and infusion pumps

1216
00:41:26,880 --> 00:41:29,520
mitigations for medical devices are hard

1217
00:41:29,520 --> 00:41:31,599
but most importantly hacking around the

1218
00:41:31,599 --> 00:41:33,040
world with your friends is a whole lot

1219
00:41:33,040 --> 00:41:34,880
of fun

1220
00:41:34,880 --> 00:41:36,880
so uh

1221
00:41:36,880 --> 00:41:38,240
we're happy that you sat through our

1222
00:41:38,240 --> 00:41:40,720
talk today if you have any questions uh

1223
00:41:40,720 --> 00:41:42,400
please feel free to reach out to us on

1224
00:41:42,400 --> 00:41:45,119
social media and also visit our our

1225
00:41:45,119 --> 00:41:46,640
webpage where we have a lot of our other

1226
00:41:46,640 --> 00:41:48,560
research thank you again and have a nice

1227
00:41:48,560 --> 00:41:50,799
day

1228
00:41:51,359 --> 00:41:54,520
thank you

