1
00:00:01,630 --> 00:00:05,770
[Music]

2
00:00:10,580 --> 00:00:13,669
[Music]

3
00:00:19,279 --> 00:00:22,439
and 17 hours on the air to get here but

4
00:00:22,439 --> 00:00:25,019
it is uh it's a great feeling to finally

5
00:00:25,019 --> 00:00:26,340
be here I've heard so many good things

6
00:00:26,340 --> 00:00:28,380
about this conference and it is a real

7
00:00:28,380 --> 00:00:31,260
pleasure to present for you today what

8
00:00:31,260 --> 00:00:34,200
this talk is about is looking at uh

9
00:00:34,200 --> 00:00:36,480
finding zero days and riding exploits

10
00:00:36,480 --> 00:00:38,520
for embedded devices and really our

11
00:00:38,520 --> 00:00:40,559
approach that we use at infosec to find

12
00:00:40,559 --> 00:00:43,920
zero days and ride exploits so it's some

13
00:00:43,920 --> 00:00:46,680
case studies of embedded devices mostly

14
00:00:46,680 --> 00:00:49,140
focusing on routers Soho style routers

15
00:00:49,140 --> 00:00:51,120
but the same approach works on many

16
00:00:51,120 --> 00:00:52,680
types of embedded devices including

17
00:00:52,680 --> 00:00:55,980
security cameras nvrs all those types of

18
00:00:55,980 --> 00:00:57,719
things smart home assistance and so

19
00:00:57,719 --> 00:00:59,039
forth

20
00:00:59,039 --> 00:01:00,719
I'm going to talk about firmware

21
00:01:00,719 --> 00:01:02,820
analysis so downloading firmware looking

22
00:01:02,820 --> 00:01:04,799
at firmware extracting firmware to get

23
00:01:04,799 --> 00:01:05,900
software

24
00:01:05,900 --> 00:01:08,939
understanding what attack surface you

25
00:01:08,939 --> 00:01:10,680
have Exposed on a particular sort of set

26
00:01:10,680 --> 00:01:12,479
of devices whether it's a router and Nas

27
00:01:12,479 --> 00:01:15,420
security camera and NBR and so forth

28
00:01:15,420 --> 00:01:16,799
once you've got that soft when you

29
00:01:16,799 --> 00:01:17,880
understand what you're sort of looking

30
00:01:17,880 --> 00:01:19,740
for you want to actually find some bugs

31
00:01:19,740 --> 00:01:22,080
so a bit of vulnerability research a

32
00:01:22,080 --> 00:01:24,540
decompiling software static analysis

33
00:01:24,540 --> 00:01:26,939
fuzz testing and so forth to write an

34
00:01:26,939 --> 00:01:28,799
exploit that's often easier to work on

35
00:01:28,799 --> 00:01:30,659
an emulated environment as opposed to

36
00:01:30,659 --> 00:01:32,159
working on the real Hardware to start

37
00:01:32,159 --> 00:01:33,600
off with you want to migrate to the real

38
00:01:33,600 --> 00:01:35,759
Hardware eventually but it's much easier

39
00:01:35,759 --> 00:01:37,740
to do your export development in some

40
00:01:37,740 --> 00:01:39,240
sort of emulated environment so I'll

41
00:01:39,240 --> 00:01:40,979
talk about that and then I'll talk about

42
00:01:40,979 --> 00:01:42,960
writing exports the type of approaches

43
00:01:42,960 --> 00:01:44,700
that you would use to write exports

44
00:01:44,700 --> 00:01:46,680
against a typical iot device or an

45
00:01:46,680 --> 00:01:48,000
embedded device and then I'll conclude

46
00:01:48,000 --> 00:01:49,439
the presentation

47
00:01:49,439 --> 00:01:51,360
to give some context

48
00:01:51,360 --> 00:01:53,759
um you know what this sort of looks like

49
00:01:53,759 --> 00:01:55,860
and sort of an end result I'll look at

50
00:01:55,860 --> 00:01:57,899
one of the point to own Targets in 2020

51
00:01:57,899 --> 00:02:02,360
late 2020 an embedded uh Soho router

52
00:02:02,360 --> 00:02:04,619
this particular device that I'm looking

53
00:02:04,619 --> 00:02:05,520
at

54
00:02:05,520 --> 00:02:07,380
um the sort of the threat model is that

55
00:02:07,380 --> 00:02:09,239
you're on the network the Wi-Fi network

56
00:02:09,239 --> 00:02:10,919
perhaps maybe you've used a Wi-Fi

57
00:02:10,919 --> 00:02:12,660
pineapple or something like that or

58
00:02:12,660 --> 00:02:14,280
you're connected to a network port in an

59
00:02:14,280 --> 00:02:15,900
office or something like that but what

60
00:02:15,900 --> 00:02:18,180
you really want is is administrator root

61
00:02:18,180 --> 00:02:20,700
level access to that to that router and

62
00:02:20,700 --> 00:02:23,340
this is a zero day exploit that we wrote

63
00:02:23,340 --> 00:02:26,160
against this point to own Target often

64
00:02:26,160 --> 00:02:27,540
we'll ask the question can we you know

65
00:02:27,540 --> 00:02:29,220
when playing to own devices are released

66
00:02:29,220 --> 00:02:31,620
as targets you know can we write an

67
00:02:31,620 --> 00:02:33,599
exploit can we find some zero day bugs

68
00:02:33,599 --> 00:02:35,459
against these devices and for this one

69
00:02:35,459 --> 00:02:38,640
we were able to so

70
00:02:38,640 --> 00:02:40,620
this is a Netgear Nighthawk Crowder it's

71
00:02:40,620 --> 00:02:42,360
still shrink wraps so it's sort of we

72
00:02:42,360 --> 00:02:44,519
just ordered it brand new

73
00:02:44,519 --> 00:02:47,220
um I'm on the network Wi-Fi is typical

74
00:02:47,220 --> 00:02:48,660
sort of access you would have this is a

75
00:02:48,660 --> 00:02:50,940
landsite export so there are landsite

76
00:02:50,940 --> 00:02:52,140
exploits as well where you're over the

77
00:02:52,140 --> 00:02:54,180
internet but this is I'm on the network

78
00:02:54,180 --> 00:02:57,300
I run the exploit um and it immediately

79
00:02:57,300 --> 00:02:59,280
opens up a buy and shell listing on Port

80
00:02:59,280 --> 00:03:01,920
99999 I tell net to it and I'm running

81
00:03:01,920 --> 00:03:05,879
as root and then just for show I'll turn

82
00:03:05,879 --> 00:03:07,260
on the

83
00:03:07,260 --> 00:03:10,379
LEDs of the router so very quick to work

84
00:03:10,379 --> 00:03:12,780
it's only throwing one or two packets to

85
00:03:12,780 --> 00:03:15,060
the device and getting remote code

86
00:03:15,060 --> 00:03:17,519
execution

87
00:03:17,519 --> 00:03:19,800
so the rest of this talk

88
00:03:19,800 --> 00:03:21,659
is going to be how that carve out

89
00:03:21,659 --> 00:03:23,040
approach Works how do you actually find

90
00:03:23,040 --> 00:03:25,379
those sites of zero day bugs um how do

91
00:03:25,379 --> 00:03:26,700
you write exploits for these types of

92
00:03:26,700 --> 00:03:28,860
devices and it all really starts with

93
00:03:28,860 --> 00:03:30,840
firmware analysis

94
00:03:30,840 --> 00:03:32,099
um there are different approaches that

95
00:03:32,099 --> 00:03:33,659
you can use to get the firmware off an

96
00:03:33,659 --> 00:03:36,720
embedded device maybe you can intercept

97
00:03:36,720 --> 00:03:38,580
web traffic through a proxy like PF

98
00:03:38,580 --> 00:03:41,459
stands and capture plain text HTTP web

99
00:03:41,459 --> 00:03:43,319
requests and pull out a download link

100
00:03:43,319 --> 00:03:45,720
and download the firmware maybe you have

101
00:03:45,720 --> 00:03:47,280
to physically interface with the device

102
00:03:47,280 --> 00:03:49,920
maybe you have to attach some test Clips

103
00:03:49,920 --> 00:03:52,080
desolder some nand chips or something

104
00:03:52,080 --> 00:03:54,379
like that and pull off firmware that way

105
00:03:54,379 --> 00:03:57,540
the easiest approach and this works

106
00:03:57,540 --> 00:03:59,040
especially for routers is just go to the

107
00:03:59,040 --> 00:04:00,720
vendor website and download the firmware

108
00:04:00,720 --> 00:04:02,519
that's sort of your best case scenario

109
00:04:02,519 --> 00:04:03,980
that you can just download the firmware

110
00:04:03,980 --> 00:04:06,180
the worst case scenario if it's

111
00:04:06,180 --> 00:04:07,860
encrypted and it's encrypted on the

112
00:04:07,860 --> 00:04:09,720
flash and so even if it is solder it

113
00:04:09,720 --> 00:04:10,920
it's still encrypted so there's other

114
00:04:10,920 --> 00:04:12,720
ways you can get around that but in this

115
00:04:12,720 --> 00:04:14,400
particular case this Nakia Knight walk

116
00:04:14,400 --> 00:04:16,320
router we can just download the firmware

117
00:04:16,320 --> 00:04:19,560
off the internet from the vendor website

118
00:04:19,560 --> 00:04:21,478
uh the the firmware for this particular

119
00:04:21,478 --> 00:04:24,540
router is just in a zip file and you can

120
00:04:24,540 --> 00:04:26,160
just sort of download the the from the

121
00:04:26,160 --> 00:04:28,680
URL from the vendor link and pull this

122
00:04:28,680 --> 00:04:30,360
complete firmware including the root

123
00:04:30,360 --> 00:04:31,560
file system

124
00:04:31,560 --> 00:04:34,139
um off this router

125
00:04:34,139 --> 00:04:37,259
once you've got that download image I

126
00:04:37,259 --> 00:04:39,419
suppose a sort of a zip file you want to

127
00:04:39,419 --> 00:04:41,040
unzip it and then look at the image file

128
00:04:41,040 --> 00:04:42,720
and a common tool that you would use to

129
00:04:42,720 --> 00:04:44,160
pull out the root file system from that

130
00:04:44,160 --> 00:04:46,620
firmware is binwoc bin walk with the

131
00:04:46,620 --> 00:04:49,500
minor C to extract option the image file

132
00:04:49,500 --> 00:04:51,900
is as an argument and we do this on this

133
00:04:51,900 --> 00:04:53,520
particular firmware image that we pulled

134
00:04:53,520 --> 00:04:55,380
off the internet and we can see right at

135
00:04:55,380 --> 00:04:56,639
the end it's pretty small writing so

136
00:04:56,639 --> 00:04:58,080
you're not expected to be able to read

137
00:04:58,080 --> 00:04:59,940
all this but I can tell you it's sort of

138
00:04:59,940 --> 00:05:01,860
the end of this output there's a squash

139
00:05:01,860 --> 00:05:04,139
file system that's been detected and the

140
00:05:04,139 --> 00:05:06,600
root file system of that router has been

141
00:05:06,600 --> 00:05:10,259
extracted from binwall

142
00:05:10,259 --> 00:05:13,259
and if we look at what we extracted we

143
00:05:13,259 --> 00:05:15,240
can get all the files of the of the

144
00:05:15,240 --> 00:05:17,280
image we can see the root file system

145
00:05:17,280 --> 00:05:19,979
ATC Ben s Ben user all of those

146
00:05:19,979 --> 00:05:22,020
directories that we typically expect on

147
00:05:22,020 --> 00:05:24,539
a root file system of an embedded device

148
00:05:24,539 --> 00:05:27,240
squash FS is a very typical file system

149
00:05:27,240 --> 00:05:29,160
implementation that is used and there's

150
00:05:29,160 --> 00:05:30,660
a bunch of tools to extract that bin

151
00:05:30,660 --> 00:05:33,139
walk supports them already sometimes

152
00:05:33,139 --> 00:05:35,220
firmware might be modified use

153
00:05:35,220 --> 00:05:37,139
modifications of those of those sort of

154
00:05:37,139 --> 00:05:40,020
those common file system formats but you

155
00:05:40,020 --> 00:05:41,940
can get around that and binwalk is a

156
00:05:41,940 --> 00:05:43,500
great tool to look at these particular

157
00:05:43,500 --> 00:05:45,320
images

158
00:05:45,320 --> 00:05:47,699
uh you know you want to look around this

159
00:05:47,699 --> 00:05:49,979
file system image see what's there

160
00:05:49,979 --> 00:05:52,020
um a lot of people don't know this but

161
00:05:52,020 --> 00:05:53,580
some of the Netgear Nighthawk routers

162
00:05:53,580 --> 00:05:55,620
actually have this binary called AWS iot

163
00:05:55,620 --> 00:05:58,259
it's actually a service that runs

164
00:05:58,259 --> 00:06:00,900
viacron once a day on your neck ear

165
00:06:00,900 --> 00:06:02,340
Nighthawk router and it connects over

166
00:06:02,340 --> 00:06:05,220
the internet to these IP addresses that

167
00:06:05,220 --> 00:06:08,100
are hard-coded into these binaries over

168
00:06:08,100 --> 00:06:11,220
Amazon AWS and send statistics about the

169
00:06:11,220 --> 00:06:14,940
router to you know the vendor so they'll

170
00:06:14,940 --> 00:06:16,680
send information about the current load

171
00:06:16,680 --> 00:06:18,479
average on your system process listings

172
00:06:18,479 --> 00:06:19,979
and so forth and you might not even

173
00:06:19,979 --> 00:06:21,780
realize that this is happening but you

174
00:06:21,780 --> 00:06:24,060
know maybe your router is doing this

175
00:06:24,060 --> 00:06:26,340
um you know underneath the hood and

176
00:06:26,340 --> 00:06:27,720
there's hard-coded private Keys

177
00:06:27,720 --> 00:06:30,180
presumably to connect to those those

178
00:06:30,180 --> 00:06:33,120
trusted Amazon ec2 images that are out

179
00:06:33,120 --> 00:06:34,819
there

180
00:06:34,819 --> 00:06:37,380
uh you've got a file system image you

181
00:06:37,380 --> 00:06:38,699
know you want to do your typical sort of

182
00:06:38,699 --> 00:06:40,259
pen testing style approaches you know

183
00:06:40,259 --> 00:06:42,000
look for backdoor accounts Standard

184
00:06:42,000 --> 00:06:44,400
Security checks Etc password and Etc

185
00:06:44,400 --> 00:06:46,620
Shadow a lot of embedded devices will

186
00:06:46,620 --> 00:06:49,080
have backdoor accounts and sometimes

187
00:06:49,080 --> 00:06:50,639
there might be authentication if you get

188
00:06:50,639 --> 00:06:52,440
serial console access to it so if you've

189
00:06:52,440 --> 00:06:53,759
got the firmware you might be able to

190
00:06:53,759 --> 00:06:56,280
sort of crack the password or or get a

191
00:06:56,280 --> 00:06:58,020
bit more information about it maybe

192
00:06:58,020 --> 00:07:00,300
there's cryptographic Keys as well these

193
00:07:00,300 --> 00:07:01,380
are all things that you want to look for

194
00:07:01,380 --> 00:07:02,880
when you've got that file system image

195
00:07:02,880 --> 00:07:04,620
and very easy in this particular case

196
00:07:04,620 --> 00:07:08,180
that we just downloaded the the firmware

197
00:07:08,180 --> 00:07:10,380
on this particular device this is a

198
00:07:10,380 --> 00:07:12,479
unify again you don't have to read this

199
00:07:12,479 --> 00:07:14,699
I'll explain all the content on on these

200
00:07:14,699 --> 00:07:16,979
sort of these compressed slides but this

201
00:07:16,979 --> 00:07:18,600
is a unify

202
00:07:18,600 --> 00:07:21,860
um sort of Wi-Fi access uh sort of

203
00:07:21,860 --> 00:07:24,180
universal dream machine devices there's

204
00:07:24,180 --> 00:07:26,520
the sort of ubiquity series of devices

205
00:07:26,520 --> 00:07:28,199
that are out there and this is the

206
00:07:28,199 --> 00:07:29,880
default firmware and if you look at the

207
00:07:29,880 --> 00:07:33,120
ETC sort of um Shadow file which

208
00:07:33,120 --> 00:07:36,120
includes passwords or hash passwords and

209
00:07:36,120 --> 00:07:37,800
usernames and so forth we can actually

210
00:07:37,800 --> 00:07:40,139
see that there's a hash password in here

211
00:07:40,139 --> 00:07:41,460
for the root account and it's just

212
00:07:41,460 --> 00:07:43,139
unified it's a default pathway that you

213
00:07:43,139 --> 00:07:45,840
have on first install this is okay for

214
00:07:45,840 --> 00:07:47,759
this unified device because after you

215
00:07:47,759 --> 00:07:49,020
install it you have to change the

216
00:07:49,020 --> 00:07:51,240
password but if you just you know if all

217
00:07:51,240 --> 00:07:52,860
devices aren't like this they might not

218
00:07:52,860 --> 00:07:54,419
force you to change that password on

219
00:07:54,419 --> 00:07:56,520
first login and there is a default

220
00:07:56,520 --> 00:07:58,680
password that that you need to sort of

221
00:07:58,680 --> 00:08:01,380
log into the device before you do that

222
00:08:01,380 --> 00:08:02,220
foreign

223
00:08:02,220 --> 00:08:04,139
once you've got the file system image

224
00:08:04,139 --> 00:08:05,699
and the root for the root file system as

225
00:08:05,699 --> 00:08:07,560
well you probably want to look at the

226
00:08:07,560 --> 00:08:09,720
ETC and net D files these are all the

227
00:08:09,720 --> 00:08:12,120
startup files that sort of initialize

228
00:08:12,120 --> 00:08:15,960
and or start on boot up init tab RCS is

229
00:08:15,960 --> 00:08:17,460
sort of your standard thing that you

230
00:08:17,460 --> 00:08:18,360
look at

231
00:08:18,360 --> 00:08:20,160
um anything in this init directory are

232
00:08:20,160 --> 00:08:21,720
the programs or services that get

233
00:08:21,720 --> 00:08:24,539
started when the device boots they're

234
00:08:24,539 --> 00:08:28,379
not always default on boot they need to

235
00:08:28,379 --> 00:08:29,940
be enabled sometimes but there is a sort

236
00:08:29,940 --> 00:08:31,379
of a default set that you probably want

237
00:08:31,379 --> 00:08:34,200
to look at if you have a you know if

238
00:08:34,200 --> 00:08:35,820
you're looking for a zero day or an

239
00:08:35,820 --> 00:08:38,700
exploit in default services

240
00:08:38,700 --> 00:08:40,979
another good option if you actually have

241
00:08:40,979 --> 00:08:42,958
serial console access to the device on a

242
00:08:42,958 --> 00:08:45,060
running system just run netstat see what

243
00:08:45,060 --> 00:08:47,160
services are listening on TCP and UDP

244
00:08:47,160 --> 00:08:49,320
ports see which processes they're

245
00:08:49,320 --> 00:08:51,000
attached to and those are the things

246
00:08:51,000 --> 00:08:52,440
that you want to audit this is really

247
00:08:52,440 --> 00:08:54,420
sort of the the you know the goal of

248
00:08:54,420 --> 00:08:56,160
this is to know what to audit for you've

249
00:08:56,160 --> 00:08:57,839
got the firmware you know it's a big

250
00:08:57,839 --> 00:09:00,060
sort of set of files what are particular

251
00:09:00,060 --> 00:09:02,399
services that that have bugs that if you

252
00:09:02,399 --> 00:09:04,200
find something useful in you can get

253
00:09:04,200 --> 00:09:05,880
some sort of remote code execution in

254
00:09:05,880 --> 00:09:07,800
some sort of default configuration this

255
00:09:07,800 --> 00:09:09,180
is this is where you want to focus your

256
00:09:09,180 --> 00:09:10,620
time

257
00:09:10,620 --> 00:09:12,480
and in this particular device this

258
00:09:12,480 --> 00:09:15,899
Netgear Nighthawk xr500 it has a bunch

259
00:09:15,899 --> 00:09:19,080
of services in in the initi directory

260
00:09:19,080 --> 00:09:20,339
um not all of these are going to be

261
00:09:20,339 --> 00:09:22,019
enabled on Startup

262
00:09:22,019 --> 00:09:23,940
um but you want to look at that RCS file

263
00:09:23,940 --> 00:09:25,140
it's sort of your default thing that

264
00:09:25,140 --> 00:09:27,240
runs on on boot up

265
00:09:27,240 --> 00:09:30,420
um but you know you can see Samba afpd a

266
00:09:30,420 --> 00:09:32,339
bunch of other things all of these are

267
00:09:32,339 --> 00:09:35,540
very useful things to audit

268
00:09:35,640 --> 00:09:37,140
so you know we've got a sort of a

269
00:09:37,140 --> 00:09:38,519
concept now that you know we've got the

270
00:09:38,519 --> 00:09:40,200
firmware we have sort of an inkling of

271
00:09:40,200 --> 00:09:43,019
what things we want to audit for

272
00:09:43,019 --> 00:09:43,740
um

273
00:09:43,740 --> 00:09:45,660
so that that's a pretty good basis to

274
00:09:45,660 --> 00:09:46,800
start out sort of a vulnerability

275
00:09:46,800 --> 00:09:49,140
research process and start out a quest

276
00:09:49,140 --> 00:09:50,760
of finding some sort of remote code

277
00:09:50,760 --> 00:09:52,920
execution or something like that but

278
00:09:52,920 --> 00:09:54,660
really we can also take a step back

279
00:09:54,660 --> 00:09:57,240
inside of start to sort of see patterns

280
00:09:57,240 --> 00:09:59,399
in sort of General classes of devices a

281
00:09:59,399 --> 00:10:01,380
lot of routers for example have very

282
00:10:01,380 --> 00:10:03,420
similar services that they run most

283
00:10:03,420 --> 00:10:05,220
nasas will have a sort of a similar

284
00:10:05,220 --> 00:10:06,540
construct as well and they'll have a

285
00:10:06,540 --> 00:10:08,040
sort of a standard attack surface

286
00:10:08,040 --> 00:10:09,899
security cameras have a sort of a

287
00:10:09,899 --> 00:10:12,120
standard design pattern as well or nvrs

288
00:10:12,120 --> 00:10:14,279
have standard design so if we understand

289
00:10:14,279 --> 00:10:15,959
the category of device that we're

290
00:10:15,959 --> 00:10:18,240
looking at we have a much better idea of

291
00:10:18,240 --> 00:10:19,620
where to focus our time in the

292
00:10:19,620 --> 00:10:22,860
vulnerability research process

293
00:10:22,860 --> 00:10:25,260
um most iot devices that we look at at

294
00:10:25,260 --> 00:10:28,680
least are going to be Linux based it's a

295
00:10:28,680 --> 00:10:30,240
very Universal operating system that

296
00:10:30,240 --> 00:10:33,060
gets used for embedded devices typically

297
00:10:33,060 --> 00:10:34,920
the Linux kernel version that they're

298
00:10:34,920 --> 00:10:36,540
running is going to be much older than

299
00:10:36,540 --> 00:10:38,940
Mainline it's just a standard practice

300
00:10:38,940 --> 00:10:41,040
for it devices and embedded devices that

301
00:10:41,040 --> 00:10:42,899
they're running older Linux this is

302
00:10:42,899 --> 00:10:44,579
sometimes useful if you have some sort

303
00:10:44,579 --> 00:10:46,800
of you know application whitelisting or

304
00:10:46,800 --> 00:10:48,779
secure good process and you want to sort

305
00:10:48,779 --> 00:10:52,380
of Prevost and avoid all of those things

306
00:10:52,380 --> 00:10:53,820
um you know an end day in a kernel is

307
00:10:53,820 --> 00:10:56,279
probably going to be useful

308
00:10:56,279 --> 00:10:58,440
um most iot devices and embedded devices

309
00:10:58,440 --> 00:11:00,380
do have some sort of management

310
00:11:00,380 --> 00:11:03,680
interface or management

311
00:11:03,680 --> 00:11:05,700
portal I suppose

312
00:11:05,700 --> 00:11:06,899
um so a lot of them do have web

313
00:11:06,899 --> 00:11:08,279
interfaces routers are a very common

314
00:11:08,279 --> 00:11:09,839
example of this you go to sort of the

315
00:11:09,839 --> 00:11:12,060
you know the router you know page that

316
00:11:12,060 --> 00:11:14,160
you that your device has and you can set

317
00:11:14,160 --> 00:11:16,079
configuration options set passwords

318
00:11:16,079 --> 00:11:18,660
usernames configure different services

319
00:11:18,660 --> 00:11:22,079
and so forth most so most I.T devices

320
00:11:22,079 --> 00:11:23,700
are running a web server and if they're

321
00:11:23,700 --> 00:11:25,320
not running a sort of a just a web

322
00:11:25,320 --> 00:11:27,060
service a web server portal they're

323
00:11:27,060 --> 00:11:28,380
using some sort of web server

324
00:11:28,380 --> 00:11:30,899
infrastructure to do you know RPC

325
00:11:30,899 --> 00:11:33,480
mechanisms to to enable services or do

326
00:11:33,480 --> 00:11:36,000
certain things on the network

327
00:11:36,000 --> 00:11:38,339
um generally if it is using some sort of

328
00:11:38,339 --> 00:11:40,140
web server portal it's probably some

329
00:11:40,140 --> 00:11:41,760
variant of a web server that you already

330
00:11:41,760 --> 00:11:45,240
know so uhcbd Lighty is another one

331
00:11:45,240 --> 00:11:47,700
micro httpd all of these things are sort

332
00:11:47,700 --> 00:11:49,980
of customized for this particular device

333
00:11:49,980 --> 00:11:51,660
so that most of the time they don't

334
00:11:51,660 --> 00:11:53,220
write a web server from scratch they

335
00:11:53,220 --> 00:11:54,720
take some sort of off-the-shelf web

336
00:11:54,720 --> 00:11:56,640
server and then customize it for their

337
00:11:56,640 --> 00:11:58,800
situation so learning those different

338
00:11:58,800 --> 00:12:01,019
web servers and how that code it is a

339
00:12:01,019 --> 00:12:02,779
very good thing to spend your time on

340
00:12:02,779 --> 00:12:07,140
CGI handlers are very common in embedded

341
00:12:07,140 --> 00:12:09,300
devices you know this is sort of just

342
00:12:09,300 --> 00:12:11,519
the way it's done to sort of to sort of

343
00:12:11,519 --> 00:12:12,959
interact with it with the operating

344
00:12:12,959 --> 00:12:15,060
system or these devices by sending cgo

345
00:12:15,060 --> 00:12:18,120
requests and often the CDR requests are

346
00:12:18,120 --> 00:12:20,519
a good attack surface to send untrusted

347
00:12:20,519 --> 00:12:22,860
input you know create buffer overflows

348
00:12:22,860 --> 00:12:24,720
memory corruption and all of those types

349
00:12:24,720 --> 00:12:26,279
of things

350
00:12:26,279 --> 00:12:28,620
a lot of devices as well today will have

351
00:12:28,620 --> 00:12:30,720
some sort of USB port associated with

352
00:12:30,720 --> 00:12:32,220
them maybe it's to do a firmware upgrade

353
00:12:32,220 --> 00:12:33,779
maybe it's for removable Media or

354
00:12:33,779 --> 00:12:35,820
something like that it does open the

355
00:12:35,820 --> 00:12:37,320
attack surface to say well you've got to

356
00:12:37,320 --> 00:12:39,839
you you can you know you you have

357
00:12:39,839 --> 00:12:42,360
um you can put a USB 6 a touching file

358
00:12:42,360 --> 00:12:44,040
systems you're touching USB drivers and

359
00:12:44,040 --> 00:12:46,980
so forth in practice a very useful thing

360
00:12:46,980 --> 00:12:49,440
for USB and removable media it's just

361
00:12:49,440 --> 00:12:51,540
copying files back and forth across from

362
00:12:51,540 --> 00:12:53,100
yourself to the embedded device so if

363
00:12:53,100 --> 00:12:54,420
you want to pull the file system off the

364
00:12:54,420 --> 00:12:56,220
embedded device you'll get serial

365
00:12:56,220 --> 00:12:58,260
console access to it and then copy it to

366
00:12:58,260 --> 00:13:00,959
USB stick or if you want to copy your

367
00:13:00,959 --> 00:13:02,760
your um your tool chains that you're

368
00:13:02,760 --> 00:13:04,980
doing export development on or or VR

369
00:13:04,980 --> 00:13:06,600
processors or debugging you'll put them

370
00:13:06,600 --> 00:13:08,399
on USB stick and then copy them onto the

371
00:13:08,399 --> 00:13:10,560
embedded device if you don't have USB

372
00:13:10,560 --> 00:13:12,600
you can just use tftp or some other sort

373
00:13:12,600 --> 00:13:14,339
of approach but USB is a really good

374
00:13:14,339 --> 00:13:18,060
option the TCP IP stack is almost always

375
00:13:18,060 --> 00:13:19,920
exposed they're you know their iot

376
00:13:19,920 --> 00:13:21,420
devices embedded devices they're Network

377
00:13:21,420 --> 00:13:23,300
connected generally

378
00:13:23,300 --> 00:13:25,560
generally not always the case and I

379
00:13:25,560 --> 00:13:26,820
think there's another talk to this week

380
00:13:26,820 --> 00:13:29,040
where this isn't the case but generally

381
00:13:29,040 --> 00:13:31,320
the network attack isn't you're sort of

382
00:13:31,320 --> 00:13:34,019
your first go-to you know attack Vector

383
00:13:34,019 --> 00:13:35,060
on a device

384
00:13:35,060 --> 00:13:37,320
sometimes firewall configurations might

385
00:13:37,320 --> 00:13:39,779
be weak you might be able to turn a land

386
00:13:39,779 --> 00:13:41,820
side bug into a sort of a landslide

387
00:13:41,820 --> 00:13:43,680
internet sort of connected bug if

388
00:13:43,680 --> 00:13:44,820
there's some sort of weak firewall

389
00:13:44,820 --> 00:13:47,279
configuration but in general specific

390
00:13:47,279 --> 00:13:49,260
Network Services running on the device

391
00:13:49,260 --> 00:13:50,820
are generally the thing that you're

392
00:13:50,820 --> 00:13:52,200
going after those are the things that

393
00:13:52,200 --> 00:13:55,320
have most likely sort of the easier to

394
00:13:55,320 --> 00:13:57,300
exploit bugs that you can find a zero

395
00:13:57,300 --> 00:14:00,360
day and get code execution on

396
00:14:00,360 --> 00:14:04,139
um now for General I.T the ATP is you

397
00:14:04,139 --> 00:14:05,579
know pretty standard networking protocol

398
00:14:05,579 --> 00:14:07,680
most devices need to be able to

399
00:14:07,680 --> 00:14:09,540
dynamically obtain an IP address on the

400
00:14:09,540 --> 00:14:12,480
network and so it devices have a DHCP

401
00:14:12,480 --> 00:14:14,820
client this is good attack surface if

402
00:14:14,820 --> 00:14:16,800
your it device it's say a router or an

403
00:14:16,800 --> 00:14:18,839
NVR or something like that it probably

404
00:14:18,839 --> 00:14:21,959
also has a DHCP server and that's a very

405
00:14:21,959 --> 00:14:24,420
good attack surface as well there's

406
00:14:24,420 --> 00:14:26,639
often standard tools and services like

407
00:14:26,639 --> 00:14:29,420
DNS mask udh

408
00:14:29,420 --> 00:14:32,399
udhcp C and D these are very common

409
00:14:32,399 --> 00:14:34,680
Upstream softwares that are generally

410
00:14:34,680 --> 00:14:37,200
modified or customized for that specific

411
00:14:37,200 --> 00:14:38,940
device that specific embedded device

412
00:14:38,940 --> 00:14:40,980
where the vendor wants to add their own

413
00:14:40,980 --> 00:14:42,000
features

414
00:14:42,000 --> 00:14:43,980
universal plug and play is sometimes

415
00:14:43,980 --> 00:14:45,899
common in embedded devices you see it on

416
00:14:45,899 --> 00:14:48,720
routers quite commonly and a particular

417
00:14:48,720 --> 00:14:51,180
interest a lot of vendors are now going

418
00:14:51,180 --> 00:14:52,860
towards their own custom zero

419
00:14:52,860 --> 00:14:54,899
configuration networking protocols as

420
00:14:54,899 --> 00:14:57,360
well so the idea of this is if you have

421
00:14:57,360 --> 00:14:59,760
a vendor and you've got you know one of

422
00:14:59,760 --> 00:15:01,620
their devices and maybe you've got five

423
00:15:01,620 --> 00:15:03,060
of their devices on your network you

424
00:15:03,060 --> 00:15:04,800
want to go to your mobile phone app and

425
00:15:04,800 --> 00:15:06,660
say what are all my you know tp-link

426
00:15:06,660 --> 00:15:08,579
devices on my network and there's often

427
00:15:08,579 --> 00:15:09,899
these zero configuration style

428
00:15:09,899 --> 00:15:12,420
networking services that broadcast

429
00:15:12,420 --> 00:15:14,579
across the network detect other devices

430
00:15:14,579 --> 00:15:16,980
by the same vendor and report all of

431
00:15:16,980 --> 00:15:18,540
this information there's also classic

432
00:15:18,540 --> 00:15:20,820
zero configuration networking like mdns

433
00:15:20,820 --> 00:15:23,040
where you don't have you know all of

434
00:15:23,040 --> 00:15:24,240
these things are supported by most

435
00:15:24,240 --> 00:15:26,000
embedded devices

436
00:15:26,000 --> 00:15:28,139
so they don't you don't have to have a

437
00:15:28,139 --> 00:15:29,940
dhtp server or a DNS server on your

438
00:15:29,940 --> 00:15:32,220
network if it uses something like mdns

439
00:15:32,220 --> 00:15:35,579
avahi is a common Upstream provider of

440
00:15:35,579 --> 00:15:37,620
this service and used to implement these

441
00:15:37,620 --> 00:15:39,480
features

442
00:15:39,480 --> 00:15:42,660
now most it devices not all it devices

443
00:15:42,660 --> 00:15:44,760
but most it devices run all their

444
00:15:44,760 --> 00:15:46,800
Network Services as roots so if you get

445
00:15:46,800 --> 00:15:48,959
a security camera off you know you're a

446
00:15:48,959 --> 00:15:50,279
local consumer electronics store

447
00:15:50,279 --> 00:15:52,139
probably all of those Services running

448
00:15:52,139 --> 00:15:53,760
on that device are running as with the

449
00:15:53,760 --> 00:15:56,220
network services and so if you exploit a

450
00:15:56,220 --> 00:15:58,199
network service in one of these devices

451
00:15:58,199 --> 00:15:59,940
you're probably going to get root access

452
00:15:59,940 --> 00:16:03,120
to begin with a lot of IDs of IIT

453
00:16:03,120 --> 00:16:05,639
devices don't also use the curable or

454
00:16:05,639 --> 00:16:07,139
application white listing so generally

455
00:16:07,139 --> 00:16:09,120
once you've got code execution it's

456
00:16:09,120 --> 00:16:10,500
pretty easy to move around the system

457
00:16:10,500 --> 00:16:12,480
and do so if some devices do have secure

458
00:16:12,480 --> 00:16:15,300
Boot and you know and there's not all

459
00:16:15,300 --> 00:16:16,560
vendors are going to be the same and

460
00:16:16,560 --> 00:16:18,420
there's you might need some additional

461
00:16:18,420 --> 00:16:20,639
steps but a lot of it devices in the

462
00:16:20,639 --> 00:16:22,199
consumer space at least in the Soho

463
00:16:22,199 --> 00:16:23,940
space at least don't use those those

464
00:16:23,940 --> 00:16:27,000
types of mitigations or controls a lot

465
00:16:27,000 --> 00:16:29,279
of it devices are your home router for

466
00:16:29,279 --> 00:16:31,079
example probably doesn't use stack

467
00:16:31,079 --> 00:16:32,519
canaries for most of the network

468
00:16:32,519 --> 00:16:35,160
services that that are compiled on it

469
00:16:35,160 --> 00:16:36,899
um they're probably not using railroad

470
00:16:36,899 --> 00:16:38,399
or using the full capabilities of

471
00:16:38,399 --> 00:16:39,779
address space layout randomization

472
00:16:39,779 --> 00:16:42,779
they're probably using a variant of libc

473
00:16:42,779 --> 00:16:44,519
that doesn't have much Heap hardening so

474
00:16:44,519 --> 00:16:46,800
Heap exploitation is easier as well and

475
00:16:46,800 --> 00:16:48,360
that's just standard across the board I

476
00:16:48,360 --> 00:16:50,100
mean and I think one of the reasons for

477
00:16:50,100 --> 00:16:52,440
this is that the common tools that we

478
00:16:52,440 --> 00:16:54,959
use to build embedded systems um the

479
00:16:54,959 --> 00:16:56,459
default configuration is that these

480
00:16:56,459 --> 00:16:58,440
mitigations aren't enabled I think once

481
00:16:58,440 --> 00:17:00,060
Upstream enables these mitigations

482
00:17:00,060 --> 00:17:02,300
vendors will just do the default install

483
00:17:02,300 --> 00:17:04,919
and then it'll they'll magically get

484
00:17:04,919 --> 00:17:07,980
more secure overnight like I said most

485
00:17:07,980 --> 00:17:11,280
it devices are probably using UC libc or

486
00:17:11,280 --> 00:17:13,140
some something like that they don't use

487
00:17:13,140 --> 00:17:16,020
glibc typically they don't have strong

488
00:17:16,020 --> 00:17:17,880
Heap hardening so old school Heap

489
00:17:17,880 --> 00:17:20,220
attacks you don't have to use you know

490
00:17:20,220 --> 00:17:22,199
much modern stuff most of the old school

491
00:17:22,199 --> 00:17:25,380
Heap attacks will work even a lot of

492
00:17:25,380 --> 00:17:26,880
devices out there are still running on

493
00:17:26,880 --> 00:17:28,439
mips so routers are a good example of

494
00:17:28,439 --> 00:17:30,059
this again it's not all just arm out

495
00:17:30,059 --> 00:17:32,580
there mips is still very common only in

496
00:17:32,580 --> 00:17:34,559
recent sort of past couple of year years

497
00:17:34,559 --> 00:17:36,539
recent Linux Kernels have they had

498
00:17:36,539 --> 00:17:38,940
non-executable stack and data in the

499
00:17:38,940 --> 00:17:41,640
mips sort of Linux kernel so in practice

500
00:17:41,640 --> 00:17:44,220
if you have a mips device on your

501
00:17:44,220 --> 00:17:46,559
network probably doesn't have depth

502
00:17:46,559 --> 00:17:48,360
enabled or depth possible because the

503
00:17:48,360 --> 00:17:49,679
kernel doesn't support it because it's

504
00:17:49,679 --> 00:17:51,299
running an older kernel that doesn't

505
00:17:51,299 --> 00:17:55,080
have that type of mitigation in it

506
00:17:55,080 --> 00:17:57,840
modems and routers are common it devices

507
00:17:57,840 --> 00:18:00,059
in home networks um you know Soho

508
00:18:00,059 --> 00:18:03,360
routers are very common modems and often

509
00:18:03,360 --> 00:18:04,919
combined with router functionality so

510
00:18:04,919 --> 00:18:06,480
your Wi-Fi routers the gate you know

511
00:18:06,480 --> 00:18:09,120
Gateway it sort of all merge together in

512
00:18:09,120 --> 00:18:10,860
practice the more expensive your Soho

513
00:18:10,860 --> 00:18:12,539
router the more feature-rich the devices

514
00:18:12,539 --> 00:18:14,460
the more likely it is to be exploitable

515
00:18:14,460 --> 00:18:15,840
because you just have a bigger attack

516
00:18:15,840 --> 00:18:18,360
surface attack surface there's always

517
00:18:18,360 --> 00:18:19,980
gen well there's generally going to be

518
00:18:19,980 --> 00:18:21,419
some sort of web server or web

519
00:18:21,419 --> 00:18:22,919
management so there's a web server

520
00:18:22,919 --> 00:18:25,140
running and they'll probably use some

521
00:18:25,140 --> 00:18:27,780
sort of a DHCP server based on udacpd

522
00:18:27,780 --> 00:18:29,760
they'll often have Samba or other

523
00:18:29,760 --> 00:18:31,620
network file systems sometimes they'll

524
00:18:31,620 --> 00:18:34,220
have FTP access more attack surface

525
00:18:34,220 --> 00:18:36,299
sometimes they'll have media streaming

526
00:18:36,299 --> 00:18:38,580
or downloading functionality and they'll

527
00:18:38,580 --> 00:18:40,140
probably support universal plug and play

528
00:18:40,140 --> 00:18:42,059
as well so all of these things a good

529
00:18:42,059 --> 00:18:44,940
attack surface to to to work with

530
00:18:44,940 --> 00:18:48,059
and the typical types of bugs um this is

531
00:18:48,059 --> 00:18:49,080
um you know you don't have to read this

532
00:18:49,080 --> 00:18:50,820
I'll just explain it to you but these

533
00:18:50,820 --> 00:18:52,559
are sort of sample cves that are in the

534
00:18:52,559 --> 00:18:54,840
public sort of domain this is a stack

535
00:18:54,840 --> 00:18:57,419
based buffer overflow in a in a web

536
00:18:57,419 --> 00:18:59,760
server um and you get code execution so

537
00:18:59,760 --> 00:19:01,860
really old school bugs

538
00:19:01,860 --> 00:19:04,559
um work on these types of devices

539
00:19:04,559 --> 00:19:06,360
this is the Netgear Nighthawk router

540
00:19:06,360 --> 00:19:07,980
there's a few quite a few variants of

541
00:19:07,980 --> 00:19:09,360
Nike and Nighthawk routers this is one

542
00:19:09,360 --> 00:19:12,059
bearing of it the DHCP service so you

543
00:19:12,059 --> 00:19:13,799
can get an access by having a host name

544
00:19:13,799 --> 00:19:15,360
of your device that's registering across

545
00:19:15,360 --> 00:19:16,820
DHCP

546
00:19:16,820 --> 00:19:19,140
universal plug and play a stack based

547
00:19:19,140 --> 00:19:20,460
buffer overflow

548
00:19:20,460 --> 00:19:22,500
generally stack-based buffer overflow is

549
00:19:22,500 --> 00:19:24,059
a pretty good well you know they're

550
00:19:24,059 --> 00:19:25,679
pretty reasonably mitigated on Modern

551
00:19:25,679 --> 00:19:28,080
desktops but on embedded devices they're

552
00:19:28,080 --> 00:19:30,360
probably going to be exploitable

553
00:19:30,360 --> 00:19:33,840
Nas is another sort of good class of

554
00:19:33,840 --> 00:19:35,880
devices a set of devices to look at

555
00:19:35,880 --> 00:19:37,799
they'll probably have some sort of web

556
00:19:37,799 --> 00:19:39,840
management interface it's very standard

557
00:19:39,840 --> 00:19:42,120
typical vendors are qnap Synology

558
00:19:42,120 --> 00:19:44,580
Western Digital and so forth and they'll

559
00:19:44,580 --> 00:19:46,500
have dhtp clients media streaming

560
00:19:46,500 --> 00:19:49,860
downloaders customized web servers CGI

561
00:19:49,860 --> 00:19:51,720
functionality is pretty standard to sort

562
00:19:51,720 --> 00:19:54,000
of interoperate with these things or or

563
00:19:54,000 --> 00:19:56,100
integrate with these things they'll have

564
00:19:56,100 --> 00:19:58,559
customized FTP implementation Samba

565
00:19:58,559 --> 00:20:01,020
customized NFS all really good attack

566
00:20:01,020 --> 00:20:04,500
surface to find zero days in

567
00:20:04,500 --> 00:20:06,720
um here's a sort of a sort of a bug um

568
00:20:06,720 --> 00:20:09,539
in in qnap which is pretty common Naz

569
00:20:09,539 --> 00:20:12,179
and this is just um a command execution

570
00:20:12,179 --> 00:20:14,460
bug in in sort of one of the CGI

571
00:20:14,460 --> 00:20:16,200
functionalities in in one of the modules

572
00:20:16,200 --> 00:20:18,179
that they run command injections are

573
00:20:18,179 --> 00:20:20,160
super common in embedded devices this is

574
00:20:20,160 --> 00:20:21,780
really probably the first thing that you

575
00:20:21,780 --> 00:20:23,100
want to audit for

576
00:20:23,100 --> 00:20:24,480
um you know why bother about memory

577
00:20:24,480 --> 00:20:25,679
corruption when you can get a command

578
00:20:25,679 --> 00:20:27,780
injection but memory corruption is is

579
00:20:27,780 --> 00:20:30,120
easy on easy on these devices than

580
00:20:30,120 --> 00:20:32,100
desktop so it's pretty good it's a

581
00:20:32,100 --> 00:20:34,679
pretty good thing as well

582
00:20:34,679 --> 00:20:36,600
so we sort of know now that you know

583
00:20:36,600 --> 00:20:38,400
what sort of we're working with we've

584
00:20:38,400 --> 00:20:39,840
got the firmware we know that these

585
00:20:39,840 --> 00:20:41,580
Network Services are sort of interesting

586
00:20:41,580 --> 00:20:43,799
targets sort of to look at we have an

587
00:20:43,799 --> 00:20:45,780
idea of the attack surface of us you

588
00:20:45,780 --> 00:20:47,400
know some of the devices that we talked

589
00:20:47,400 --> 00:20:49,380
about so Soho routers we've briefly

590
00:20:49,380 --> 00:20:51,240
mentioned about NASA's but the same is

591
00:20:51,240 --> 00:20:53,100
true for other devices as well you just

592
00:20:53,100 --> 00:20:55,080
have to learn your sort of your category

593
00:20:55,080 --> 00:20:56,460
of device that you're working with for

594
00:20:56,460 --> 00:20:57,960
how they're sort of implemented in

595
00:20:57,960 --> 00:20:59,640
practice

596
00:20:59,640 --> 00:21:01,799
so you know now we want to find some

597
00:21:01,799 --> 00:21:03,900
bugs you know we've got some things to

598
00:21:03,900 --> 00:21:06,480
audit we've got some binaries

599
00:21:06,480 --> 00:21:08,520
um we might even have sauce on occasion

600
00:21:08,520 --> 00:21:11,220
but we want to find some bugs

601
00:21:11,220 --> 00:21:13,260
the main approach is to find bugs that

602
00:21:13,260 --> 00:21:14,520
are you know that we're going to exploit

603
00:21:14,520 --> 00:21:16,679
code review So reading the code or

604
00:21:16,679 --> 00:21:19,140
reverse engineering the code fuzz

605
00:21:19,140 --> 00:21:21,360
testing so using some automated testing

606
00:21:21,360 --> 00:21:22,980
there's a lot of harnessing involved in

607
00:21:22,980 --> 00:21:24,840
required to sort of get your network

608
00:21:24,840 --> 00:21:26,940
service to be fuzzable that's sort of

609
00:21:26,940 --> 00:21:29,159
the the the the the craft of fuzzing I

610
00:21:29,159 --> 00:21:31,020
suppose and there's also static analysis

611
00:21:31,020 --> 00:21:33,059
so some tools that will analyze our

612
00:21:33,059 --> 00:21:34,980
binaries or our source code to find bugs

613
00:21:34,980 --> 00:21:37,020
as well sometimes we have the source

614
00:21:37,020 --> 00:21:38,460
code that's good

615
00:21:38,460 --> 00:21:39,720
um you know that's sort of the easier

616
00:21:39,720 --> 00:21:42,120
approach but if not we've got binaries

617
00:21:42,120 --> 00:21:43,740
as well from the firmware that we we

618
00:21:43,740 --> 00:21:45,419
pulled off the device or downloaded or

619
00:21:45,419 --> 00:21:47,280
whatever we have

620
00:21:47,280 --> 00:21:49,679
uh this was another router in the point

621
00:21:49,679 --> 00:21:53,280
to own uh 2020 this is a tp-link AC 1750

622
00:21:53,280 --> 00:21:55,320
Smart Wi-Fi router

623
00:21:55,320 --> 00:21:58,020
um this is it does a lot of routers as

624
00:21:58,020 --> 00:21:59,520
they sort of you spend more money on

625
00:21:59,520 --> 00:22:01,140
them they get more sort of exotic in

626
00:22:01,140 --> 00:22:02,760
looking in shape and they end up looking

627
00:22:02,760 --> 00:22:04,500
like spaceships by the you know once you

628
00:22:04,500 --> 00:22:06,240
start paying sort of the top end money

629
00:22:06,240 --> 00:22:07,919
for it well this is a pretty standard

630
00:22:07,919 --> 00:22:10,320
looking you know conservative router I

631
00:22:10,320 --> 00:22:11,760
suppose

632
00:22:11,760 --> 00:22:14,280
now tp-link routers do have a zero

633
00:22:14,280 --> 00:22:15,419
configuration Network management

634
00:22:15,419 --> 00:22:17,220
capability like I said you want to go

635
00:22:17,220 --> 00:22:18,780
onto your mobile phone app and you want

636
00:22:18,780 --> 00:22:20,400
to say oh what are all my tp-link

637
00:22:20,400 --> 00:22:24,059
devices in my tp-link cloud at home and

638
00:22:24,059 --> 00:22:26,820
the way that these devices implement

639
00:22:26,820 --> 00:22:29,039
this feature is by having extra Network

640
00:22:29,039 --> 00:22:31,919
Services that run on on these devices so

641
00:22:31,919 --> 00:22:34,380
tp-link routers have their service you

642
00:22:34,380 --> 00:22:37,620
know present in them uh we can acquire

643
00:22:37,620 --> 00:22:39,299
the firmware for these this particular

644
00:22:39,299 --> 00:22:41,340
Target router which is the tp-link tcac

645
00:22:41,340 --> 00:22:43,860
750 and we can analyze the network

646
00:22:43,860 --> 00:22:45,780
services or demons that Implement these

647
00:22:45,780 --> 00:22:48,960
services and for this particular service

648
00:22:48,960 --> 00:22:51,120
the the source code is it's closed

649
00:22:51,120 --> 00:22:53,280
Source because it's not based off any

650
00:22:53,280 --> 00:22:55,440
existing Upstream implementations it's

651
00:22:55,440 --> 00:22:57,539
TP links very you know proprietary

652
00:22:57,539 --> 00:22:58,860
implementation of their zero

653
00:22:58,860 --> 00:23:01,140
configuration networking management tool

654
00:23:01,140 --> 00:23:02,340
or whatever it is

655
00:23:02,340 --> 00:23:05,340
and the Demons Run as native executables

656
00:23:05,340 --> 00:23:07,140
um they're originally written in C as

657
00:23:07,140 --> 00:23:09,419
most things are in embedded devices at

658
00:23:09,419 --> 00:23:12,559
least at this level the binary is called

659
00:23:12,559 --> 00:23:15,299
tddp it's tp-link device Discovery

660
00:23:15,299 --> 00:23:17,700
protocol and pretty standard you just

661
00:23:17,700 --> 00:23:19,500
pull it engage right decompile it and

662
00:23:19,500 --> 00:23:21,000
start reversing it to try to find some

663
00:23:21,000 --> 00:23:23,220
bugs obviously the source code from

664
00:23:23,220 --> 00:23:25,200
ghidra is good but not as good as you

665
00:23:25,200 --> 00:23:26,159
would have if you had the original

666
00:23:26,159 --> 00:23:28,919
source code and what I wanted to do and

667
00:23:28,919 --> 00:23:31,679
what I did was I looked at all parts of

668
00:23:31,679 --> 00:23:33,299
the network protocol that were

669
00:23:33,299 --> 00:23:34,740
pre-authentication so there's an

670
00:23:34,740 --> 00:23:36,600
authentication process that goes on with

671
00:23:36,600 --> 00:23:39,120
these devices but there's a set of

672
00:23:39,120 --> 00:23:40,860
commands that you can sort of request of

673
00:23:40,860 --> 00:23:42,960
these sort of devices on this router

674
00:23:42,960 --> 00:23:45,059
from this service that is

675
00:23:45,059 --> 00:23:46,679
pre-authentication so you can get you

676
00:23:46,679 --> 00:23:48,179
know different types of information from

677
00:23:48,179 --> 00:23:50,520
it and it's a very simple protocol it's

678
00:23:50,520 --> 00:23:52,500
basically again you don't have to read

679
00:23:52,500 --> 00:23:54,000
this I'll explain what it is and in fact

680
00:23:54,000 --> 00:23:55,620
even if you could read this you'd not

681
00:23:55,620 --> 00:23:57,240
expect it to you know read line by line

682
00:23:57,240 --> 00:23:59,340
here I'll explain what it is but the way

683
00:23:59,340 --> 00:24:00,840
this protocol works is you send a

684
00:24:00,840 --> 00:24:01,980
request with you know some sort of

685
00:24:01,980 --> 00:24:04,980
command request and then it responds and

686
00:24:04,980 --> 00:24:06,179
some of these commands need

687
00:24:06,179 --> 00:24:07,919
authentication and some of the commands

688
00:24:07,919 --> 00:24:09,720
don't need Authentication

689
00:24:09,720 --> 00:24:12,179
but if we look at on this disassembled

690
00:24:12,179 --> 00:24:14,760
output or decompiled output rather we

691
00:24:14,760 --> 00:24:15,960
can actually see that there's a bit of

692
00:24:15,960 --> 00:24:17,940
error message Printing printf and it

693
00:24:17,940 --> 00:24:20,700
says tddp exact command and then there's

694
00:24:20,700 --> 00:24:22,799
an exact fee of bnsh later on down below

695
00:24:22,799 --> 00:24:24,480
and what this is is just a

696
00:24:24,480 --> 00:24:26,400
re-implementation of the system Library

697
00:24:26,400 --> 00:24:28,080
call that will execute a shell command

698
00:24:28,080 --> 00:24:30,840
that is passed to it as an argument and

699
00:24:30,840 --> 00:24:32,159
they just added some extra sort of

700
00:24:32,159 --> 00:24:33,659
instrumentation to do some debugging

701
00:24:33,659 --> 00:24:35,220
around that but it's basically an

702
00:24:35,220 --> 00:24:36,960
implementation of system which basically

703
00:24:36,960 --> 00:24:39,179
executes shell commands that are passed

704
00:24:39,179 --> 00:24:40,559
to this function

705
00:24:40,559 --> 00:24:43,020
now if we look at the main part of our

706
00:24:43,020 --> 00:24:44,760
sort of our service which is sort of the

707
00:24:44,760 --> 00:24:46,919
you know the request handling and you

708
00:24:46,919 --> 00:24:48,120
know looks at the command that's being

709
00:24:48,120 --> 00:24:50,039
requested of it processes it sends back

710
00:24:50,039 --> 00:24:52,679
a response one of these commands and a

711
00:24:52,679 --> 00:24:53,940
few of them are pre-authentication but

712
00:24:53,940 --> 00:24:55,679
one command in particular that is

713
00:24:55,679 --> 00:24:57,780
pre-authentication is the command f-test

714
00:24:57,780 --> 00:25:00,000
config function and I know that's what

715
00:25:00,000 --> 00:25:02,100
the command sort of is because there's

716
00:25:02,100 --> 00:25:03,659
debugging information around it that

717
00:25:03,659 --> 00:25:05,820
says this is what this particular

718
00:25:05,820 --> 00:25:10,020
request is and if we look at this code

719
00:25:10,020 --> 00:25:12,000
in a little bit more detail and we see

720
00:25:12,000 --> 00:25:13,679
what actually implements this this

721
00:25:13,679 --> 00:25:16,140
request or this Handler there's actually

722
00:25:16,140 --> 00:25:19,080
a bit of code at the bottom that calls

723
00:25:19,080 --> 00:25:19,919
um

724
00:25:19,919 --> 00:25:23,700
that calls tftp with an argument that's

725
00:25:23,700 --> 00:25:25,940
passed to it from this command request

726
00:25:25,940 --> 00:25:28,740
and it uses our system implementation

727
00:25:28,740 --> 00:25:30,539
re-implementation of system to execute

728
00:25:30,539 --> 00:25:32,520
this shell command and what we have here

729
00:25:32,520 --> 00:25:35,220
is the ability to pass untrusted input

730
00:25:35,220 --> 00:25:37,620
into a shell command that's passed a

731
00:25:37,620 --> 00:25:39,179
system and that's pretty much your

732
00:25:39,179 --> 00:25:41,279
classic command injection sort of

733
00:25:41,279 --> 00:25:43,500
vulnerability so very you know very easy

734
00:25:43,500 --> 00:25:45,860
way to send untrusted input from a a

735
00:25:45,860 --> 00:25:49,500
device on the network to the router and

736
00:25:49,500 --> 00:25:51,000
the router will just execute this TFT

737
00:25:51,000 --> 00:25:52,559
command pull something called sort of

738
00:25:52,559 --> 00:25:54,659
configuration file but we injected a

739
00:25:54,659 --> 00:25:56,100
cell command by using shell Mana

740
00:25:56,100 --> 00:25:57,900
characters like semicolon or backticks

741
00:25:57,900 --> 00:25:59,820
or dollar signs and so forth

742
00:25:59,820 --> 00:26:02,580
and under emulation you know this is how

743
00:26:02,580 --> 00:26:03,960
I sort of tested this bug initially I

744
00:26:03,960 --> 00:26:05,279
didn't run it on the real device I

745
00:26:05,279 --> 00:26:07,620
emulated it to sort of see if this this

746
00:26:07,620 --> 00:26:09,720
export would work and it's entirely

747
00:26:09,720 --> 00:26:11,520
legitimate and works as expected I can

748
00:26:11,520 --> 00:26:13,440
execute arbitrary commands from an

749
00:26:13,440 --> 00:26:17,159
unauthenticated user on the Lan but

750
00:26:17,159 --> 00:26:19,620
there's some problems

751
00:26:19,620 --> 00:26:22,500
um this service is only started when

752
00:26:22,500 --> 00:26:24,720
factory mode is enabled on the router

753
00:26:24,720 --> 00:26:26,400
and it seems to be after a sort of a

754
00:26:26,400 --> 00:26:27,840
reset or when the device is sort of

755
00:26:27,840 --> 00:26:31,200
fairly new and so this is you know a bug

756
00:26:31,200 --> 00:26:33,419
that's you know it's a good bug if it

757
00:26:33,419 --> 00:26:35,460
was a default configuration but it's not

758
00:26:35,460 --> 00:26:37,559
a default configuration so ultimately

759
00:26:37,559 --> 00:26:40,440
it's not that useful at all and it's

760
00:26:40,440 --> 00:26:41,880
actually more interesting than that it's

761
00:26:41,880 --> 00:26:43,799
not even it turns out that this bug

762
00:26:43,799 --> 00:26:45,539
isn't even a zero day so I found this

763
00:26:45,539 --> 00:26:47,159
bug by you know auditing this theme and

764
00:26:47,159 --> 00:26:48,299
I thought oh I've got a pretty good bug

765
00:26:48,299 --> 00:26:50,279
here and then I started Googling to see

766
00:26:50,279 --> 00:26:52,200
if anyone else knew about this this

767
00:26:52,200 --> 00:26:53,760
protocol or this zero configuration

768
00:26:53,760 --> 00:26:55,679
networking and it seems that someone

769
00:26:55,679 --> 00:26:58,080
wrote a blog post about this exact bug

770
00:26:58,080 --> 00:27:00,900
on another router the SRS the SR20

771
00:27:00,900 --> 00:27:03,240
router by tp-link and in this particular

772
00:27:03,240 --> 00:27:05,580
blog post they they talked about that um

773
00:27:05,580 --> 00:27:08,039
the TP Link had fixed you know 20 of

774
00:27:08,039 --> 00:27:09,960
these routers that had this bug but they

775
00:27:09,960 --> 00:27:11,760
clearly didn't know that this particular

776
00:27:11,760 --> 00:27:13,380
router this pointer own Target router

777
00:27:13,380 --> 00:27:15,419
had exactly the same bug except it

778
00:27:15,419 --> 00:27:16,620
wasn't enabled in the default

779
00:27:16,620 --> 00:27:20,220
configuration so not a zero okay but um

780
00:27:20,220 --> 00:27:23,039
maybe TP link and generally that's a

781
00:27:23,039 --> 00:27:24,480
very common practice that the the

782
00:27:24,480 --> 00:27:26,820
development practice of these it vendors

783
00:27:26,820 --> 00:27:28,620
tends to be really ad hoc and they'll

784
00:27:28,620 --> 00:27:30,480
backport stuff between different trees

785
00:27:30,480 --> 00:27:33,059
and it's it's really chaotic and I would

786
00:27:33,059 --> 00:27:35,279
say it's very difficult to know

787
00:27:35,279 --> 00:27:36,600
um without

788
00:27:36,600 --> 00:27:37,220
um

789
00:27:37,220 --> 00:27:40,200
sort of larger scale analysis

790
00:27:40,200 --> 00:27:41,940
um if one bug that you have in one

791
00:27:41,940 --> 00:27:43,919
device applies you know applies to which

792
00:27:43,919 --> 00:27:45,659
routers because a lot of these bugs are

793
00:27:45,659 --> 00:27:47,940
shared across devices

794
00:27:47,940 --> 00:27:50,100
but there's another bug it seems there's

795
00:27:50,100 --> 00:27:51,600
a developer back door in this

796
00:27:51,600 --> 00:27:54,240
initialization so this particular

797
00:27:54,240 --> 00:27:55,679
initialization

798
00:27:55,679 --> 00:27:56,820
um

799
00:27:56,820 --> 00:28:00,419
tries to tftp a file from this IP

800
00:28:00,419 --> 00:28:02,700
address a hard-coded IP address it's

801
00:28:02,700 --> 00:28:03,980
called

802
00:28:03,980 --> 00:28:06,000
autocal2g.sh it's actually a shell

803
00:28:06,000 --> 00:28:07,980
script and I don't show you executing

804
00:28:07,980 --> 00:28:09,179
the shell script here but when it

805
00:28:09,179 --> 00:28:10,980
downloads it and it's present on this

806
00:28:10,980 --> 00:28:12,539
hard-coded IP address it will just

807
00:28:12,539 --> 00:28:13,679
execute it

808
00:28:13,679 --> 00:28:15,360
um so yeah that's probably not a good

809
00:28:15,360 --> 00:28:17,400
idea for a production device to have

810
00:28:17,400 --> 00:28:21,419
that but it's okay the developer

811
00:28:21,419 --> 00:28:24,539
backdoor is only enabled when the

812
00:28:24,539 --> 00:28:26,400
tp-link device Discovery protocol is

813
00:28:26,400 --> 00:28:27,900
enabled so it's sort of default

814
00:28:27,900 --> 00:28:30,600
configuration so it's not really a major

815
00:28:30,600 --> 00:28:33,059
problem and having these sort of

816
00:28:33,059 --> 00:28:34,679
constraints on a zero day that you have

817
00:28:34,679 --> 00:28:36,000
to have some sort of configuration

818
00:28:36,000 --> 00:28:38,220
enabled is not really a good position to

819
00:28:38,220 --> 00:28:40,440
be in and you certainly wouldn't be able

820
00:28:40,440 --> 00:28:42,000
to compete in point to own with with

821
00:28:42,000 --> 00:28:43,799
these types of bugs and really the

822
00:28:43,799 --> 00:28:45,600
solution is just to look for better bugs

823
00:28:45,600 --> 00:28:48,059
look for more Network Services look

824
00:28:48,059 --> 00:28:49,679
deeper in the network services that you

825
00:28:49,679 --> 00:28:51,120
have available to you and there are

826
00:28:51,120 --> 00:28:52,500
better bugs in most of these devices

827
00:28:52,500 --> 00:28:54,539
most of the time

828
00:28:54,539 --> 00:28:57,840
so okay so let's just assume and I'll

829
00:28:57,840 --> 00:28:59,580
talk about some sort of some some more

830
00:28:59,580 --> 00:29:00,779
successful

831
00:29:00,779 --> 00:29:02,880
um zero days later on but let's just

832
00:29:02,880 --> 00:29:04,559
assume that we found some useful bugs

833
00:29:04,559 --> 00:29:06,179
from our vulnerability research process

834
00:29:06,179 --> 00:29:07,740
you know we've ordered some Network

835
00:29:07,740 --> 00:29:09,779
Services we've done some reverse

836
00:29:09,779 --> 00:29:11,100
engineering we've done some code review

837
00:29:11,100 --> 00:29:12,720
we maybe did a little bit of fuzz

838
00:29:12,720 --> 00:29:14,700
testing we've got some bugs and we want

839
00:29:14,700 --> 00:29:16,919
to write an exploit now and really I

840
00:29:16,919 --> 00:29:18,899
would say the easiest approach for most

841
00:29:18,899 --> 00:29:22,020
I.T devices is to emulate the the

842
00:29:22,020 --> 00:29:23,880
network services and develop your

843
00:29:23,880 --> 00:29:25,620
exploit around that emulated environment

844
00:29:25,620 --> 00:29:27,720
you don't always have the ability to do

845
00:29:27,720 --> 00:29:30,720
that some embedded devices do have sort

846
00:29:30,720 --> 00:29:32,700
of exotic Hardware that is hard to

847
00:29:32,700 --> 00:29:34,260
emulate there are other approaches to

848
00:29:34,260 --> 00:29:36,240
work with that maybe snapshot fuzzing or

849
00:29:36,240 --> 00:29:37,740
something like that is is an approach

850
00:29:37,740 --> 00:29:39,899
but really if you can emulate it you're

851
00:29:39,899 --> 00:29:41,340
going to be much better off and you'll

852
00:29:41,340 --> 00:29:42,539
probably be able to fuzz it as well

853
00:29:42,539 --> 00:29:43,799
which is probably going to support you

854
00:29:43,799 --> 00:29:46,080
finding more boats

855
00:29:46,080 --> 00:29:48,000
um the assumption is that you've

856
00:29:48,000 --> 00:29:49,740
acquired the firmware whether you know

857
00:29:49,740 --> 00:29:51,179
from physically interfacing these

858
00:29:51,179 --> 00:29:53,460
soldering chips um you know chip off or

859
00:29:53,460 --> 00:29:54,720
downloading the firmware image or

860
00:29:54,720 --> 00:29:56,940
intercepting web traffic or dumping from

861
00:29:56,940 --> 00:29:59,039
the bootload or whatever it might be and

862
00:29:59,039 --> 00:30:00,779
you pulled out the file system of the it

863
00:30:00,779 --> 00:30:03,059
device the root file system and you've

864
00:30:03,059 --> 00:30:04,559
got you know access to all the network

865
00:30:04,559 --> 00:30:07,200
services that are in there and it's

866
00:30:07,200 --> 00:30:08,399
going to be Linux based that's our

867
00:30:08,399 --> 00:30:10,080
assumption that's not always true of

868
00:30:10,080 --> 00:30:11,940
course but for a lot of devices that you

869
00:30:11,940 --> 00:30:13,799
will see in sort of the you know this

870
00:30:13,799 --> 00:30:15,539
consumer electronics even Enterprise of

871
00:30:15,539 --> 00:30:17,340
course and we'll have Linux based

872
00:30:17,340 --> 00:30:18,659
systems and that's what we're focusing

873
00:30:18,659 --> 00:30:21,380
on in this talk

874
00:30:22,140 --> 00:30:24,000
um generally you just want to find out

875
00:30:24,000 --> 00:30:25,559
what architecture it's running

876
00:30:25,559 --> 00:30:26,640
um so that you can emulate it

877
00:30:26,640 --> 00:30:28,440
appropriately and write your exploit

878
00:30:28,440 --> 00:30:31,080
appropriately Army is very common mips

879
00:30:31,080 --> 00:30:32,820
is also very common even though it's a

880
00:30:32,820 --> 00:30:34,679
little bit older x86 is out there on

881
00:30:34,679 --> 00:30:37,140
some devices as well and for arm and

882
00:30:37,140 --> 00:30:38,700
mips there's different variants of these

883
00:30:38,700 --> 00:30:40,140
architectures that you have to know

884
00:30:40,140 --> 00:30:44,039
before you emulate it appropriately

885
00:30:44,039 --> 00:30:46,260
you can use the file command to see a

886
00:30:46,260 --> 00:30:47,640
little bit of information about an

887
00:30:47,640 --> 00:30:49,440
executable on that root file system that

888
00:30:49,440 --> 00:30:51,600
you've extracted we can run read elf

889
00:30:51,600 --> 00:30:54,059
with the minus a for all option or the

890
00:30:54,059 --> 00:30:55,799
minus capital A to show you architecture

891
00:30:55,799 --> 00:30:57,659
information as well on a particular

892
00:30:57,659 --> 00:30:59,580
binary and executable in that root file

893
00:30:59,580 --> 00:31:00,899
system

894
00:31:00,899 --> 00:31:04,020
and so here we've got um this xr500 neck

895
00:31:04,020 --> 00:31:06,960
unitawk xr500 router and we've just run

896
00:31:06,960 --> 00:31:11,220
file on user s bin U httbd which is the

897
00:31:11,220 --> 00:31:12,720
web server that's running on it and it

898
00:31:12,720 --> 00:31:15,240
says to us it's an arm binary and that's

899
00:31:15,240 --> 00:31:16,620
a pretty good you know we pretty much

900
00:31:16,620 --> 00:31:19,679
say the architecture from this

901
00:31:19,679 --> 00:31:21,539
we can run read elf as well which gives

902
00:31:21,539 --> 00:31:23,279
us sort of similar information we learn

903
00:31:23,279 --> 00:31:24,480
a little bit about a bit of information

904
00:31:24,480 --> 00:31:26,340
about the architecture and we'll also

905
00:31:26,340 --> 00:31:28,200
confirm that once we start to emulate it

906
00:31:28,200 --> 00:31:30,179
and try to emulate some simple binaries

907
00:31:30,179 --> 00:31:32,039
like bin LS or something like that we'll

908
00:31:32,039 --> 00:31:33,840
see if we've we've appropriately

909
00:31:33,840 --> 00:31:35,159
determined the architecture and our

910
00:31:35,159 --> 00:31:38,299
emulation works correctly

911
00:31:38,580 --> 00:31:41,159
um qmu or quick emulator can emulate a

912
00:31:41,159 --> 00:31:42,720
variety of architectures

913
00:31:42,720 --> 00:31:46,679
um including arm mips x86 and so forth

914
00:31:46,679 --> 00:31:47,360
um

915
00:31:47,360 --> 00:31:51,720
qmu Can emulate a whole system it can

916
00:31:51,720 --> 00:31:53,399
build an operating system from a disk or

917
00:31:53,399 --> 00:31:56,399
or a ram image or something like that or

918
00:31:56,399 --> 00:31:59,039
it can emulate user mode applique user

919
00:31:59,039 --> 00:32:00,600
mode applications using the host

920
00:32:00,600 --> 00:32:03,000
operating system kernel to emulate sort

921
00:32:03,000 --> 00:32:05,940
of to to run those real system calls for

922
00:32:05,940 --> 00:32:07,679
quick testing this user mode emulation

923
00:32:07,679 --> 00:32:10,020
is is the way to go and is a good start

924
00:32:10,020 --> 00:32:11,580
but once you've done that user mode

925
00:32:11,580 --> 00:32:13,940
emulation is and you've got that working

926
00:32:13,940 --> 00:32:16,260
to do sort of exploit development you

927
00:32:16,260 --> 00:32:17,880
probably want to transition into whole

928
00:32:17,880 --> 00:32:19,559
system emulation you have a much better

929
00:32:19,559 --> 00:32:22,020
opportunity to use native tool chains

930
00:32:22,020 --> 00:32:23,960
without all this emulating

931
00:32:23,960 --> 00:32:26,279
things that you have to sort of proxy in

932
00:32:26,279 --> 00:32:28,399
between

933
00:32:28,500 --> 00:32:30,299
there's a couple of ways you can do user

934
00:32:30,299 --> 00:32:32,940
mode emulation in kumu you can basically

935
00:32:32,940 --> 00:32:34,500
just go into the root file system that

936
00:32:34,500 --> 00:32:36,059
you've extracted of your of your

937
00:32:36,059 --> 00:32:38,220
firmware of your device use the minus

938
00:32:38,220 --> 00:32:40,440
capital L option to say that my my

939
00:32:40,440 --> 00:32:42,960
library path starts here

940
00:32:42,960 --> 00:32:46,080
um and then run your binary and it

941
00:32:46,080 --> 00:32:47,940
should be able to emulate it otherwise

942
00:32:47,940 --> 00:32:50,279
you might be able to CH root into that

943
00:32:50,279 --> 00:32:52,140
file system image or file system

944
00:32:52,140 --> 00:32:53,580
directory tree that you've pulled out

945
00:32:53,580 --> 00:32:56,120
and then execute

946
00:32:56,120 --> 00:32:59,760
your emulator and then run a shell to

947
00:32:59,760 --> 00:33:01,500
emulate that cell or whatever binary

948
00:33:01,500 --> 00:33:03,840
you're executing

949
00:33:03,840 --> 00:33:05,880
again just to sort of reiterate the

950
00:33:05,880 --> 00:33:07,500
minus L option specifies the library

951
00:33:07,500 --> 00:33:09,000
path to you so that when your binary

952
00:33:09,000 --> 00:33:10,740
that you're emulating say bin LS users

953
00:33:10,740 --> 00:33:13,260
using libc it knows how to load that

954
00:33:13,260 --> 00:33:14,880
Library correctly so that's why you need

955
00:33:14,880 --> 00:33:17,340
to use that minus L option most binaries

956
00:33:17,340 --> 00:33:19,019
on these systems

957
00:33:19,019 --> 00:33:20,700
um well to start with that we're looking

958
00:33:20,700 --> 00:33:21,960
at are going to be dynamically linked

959
00:33:21,960 --> 00:33:23,340
but there's obviously statically linked

960
00:33:23,340 --> 00:33:27,000
ones as well that don't need this option

961
00:33:27,000 --> 00:33:29,460
and we run cumu um with the minus L

962
00:33:29,460 --> 00:33:31,260
option of just the current directory in

963
00:33:31,260 --> 00:33:34,559
our squash FS route and we run bin LS

964
00:33:34,559 --> 00:33:36,899
and we're able to emulate that binary so

965
00:33:36,899 --> 00:33:39,659
we can emulate a simple firmware binary

966
00:33:39,659 --> 00:33:42,179
using qmu arm that's a pretty good

967
00:33:42,179 --> 00:33:43,620
position to be in that's going to help

968
00:33:43,620 --> 00:33:46,019
our export development but we'll

969
00:33:46,019 --> 00:33:47,519
probably want to transition into whole

970
00:33:47,519 --> 00:33:49,380
system emulation soon so that we can use

971
00:33:49,380 --> 00:33:51,120
our sort of our bigger tool chains and

972
00:33:51,120 --> 00:33:53,940
bigger development kits with that

973
00:33:53,940 --> 00:33:56,340
another option sometimes you might want

974
00:33:56,340 --> 00:33:58,380
to do this if the network service that

975
00:33:58,380 --> 00:34:00,720
you're using makes references into the

976
00:34:00,720 --> 00:34:02,399
file system so that the root file system

977
00:34:02,399 --> 00:34:05,399
is in its correct place and you

978
00:34:05,399 --> 00:34:08,159
basically copy a static version of qmu

979
00:34:08,159 --> 00:34:10,800
into the firmware's root file system CH

980
00:34:10,800 --> 00:34:12,418
root into that root file system and

981
00:34:12,418 --> 00:34:14,399
execute the emulator with the target

982
00:34:14,399 --> 00:34:16,320
program at bin sh or whatever network

983
00:34:16,320 --> 00:34:17,699
service you're running and now you've

984
00:34:17,699 --> 00:34:20,460
got an emulated binary that you're

985
00:34:20,460 --> 00:34:22,139
running

986
00:34:22,139 --> 00:34:24,060
and we can do that here we've copied

987
00:34:24,060 --> 00:34:26,040
Kumi arm static that's just a package

988
00:34:26,040 --> 00:34:27,480
that that's part of a package that we

989
00:34:27,480 --> 00:34:30,540
installed on Linux we CH root into the

990
00:34:30,540 --> 00:34:32,280
current directory which is our squash FS

991
00:34:32,280 --> 00:34:34,440
route that we extracted we'll call our

992
00:34:34,440 --> 00:34:36,060
emulator our statically compiled

993
00:34:36,060 --> 00:34:37,500
emulator and then we've just executed

994
00:34:37,500 --> 00:34:40,379
bin sh from our squash FS route our file

995
00:34:40,379 --> 00:34:42,659
system and we've able to emulate that

996
00:34:42,659 --> 00:34:45,440
quite easily

997
00:34:46,460 --> 00:34:49,080
now this is sort of a good place to be

998
00:34:49,080 --> 00:34:50,520
but you really want to do whole system

999
00:34:50,520 --> 00:34:53,040
emulation I think um if you're fuzzing

1000
00:34:53,040 --> 00:34:54,839
you might want not want to do this maybe

1001
00:34:54,839 --> 00:34:56,399
you want to stick to user mode emulation

1002
00:34:56,399 --> 00:34:57,960
there's different pros and cons to

1003
00:34:57,960 --> 00:34:59,940
different things here but the export

1004
00:34:59,940 --> 00:35:01,619
development whole system emulation is

1005
00:35:01,619 --> 00:35:03,720
probably the way to go

1006
00:35:03,720 --> 00:35:07,080
um you need to have a disk image for us

1007
00:35:07,080 --> 00:35:09,000
a q cow file is there's a sort of

1008
00:35:09,000 --> 00:35:11,220
calling from you you need to start cumu

1009
00:35:11,220 --> 00:35:13,680
with the right architecture

1010
00:35:13,680 --> 00:35:14,820
um probably want to set up port

1011
00:35:14,820 --> 00:35:17,700
forwarding so you can SSH into your your

1012
00:35:17,700 --> 00:35:20,220
your guest and you know interact with

1013
00:35:20,220 --> 00:35:23,520
your emulated environment and there's

1014
00:35:23,520 --> 00:35:24,900
some good sort of resources online

1015
00:35:24,900 --> 00:35:27,960
there's some um this person from Debian

1016
00:35:27,960 --> 00:35:30,540
has has made a bunch of qcat images and

1017
00:35:30,540 --> 00:35:32,160
kernel images provided that you can just

1018
00:35:32,160 --> 00:35:33,839
download off the internet you know and

1019
00:35:33,839 --> 00:35:35,700
immediately start emulating an armed

1020
00:35:35,700 --> 00:35:38,099
Linux system or a mips a Linux system

1021
00:35:38,099 --> 00:35:41,220
without really much work at all

1022
00:35:41,220 --> 00:35:43,800
uh you start your immune system

1023
00:35:43,800 --> 00:35:46,339
um not that qmu user application anymore

1024
00:35:46,339 --> 00:35:48,660
and if you're able to do that you can

1025
00:35:48,660 --> 00:35:51,060
emulate um you can emulate mips and run

1026
00:35:51,060 --> 00:35:53,339
a Linux system that boots up just like a

1027
00:35:53,339 --> 00:35:55,079
normal Linux system but running whatever

1028
00:35:55,079 --> 00:35:56,700
architecture architecture you're

1029
00:35:56,700 --> 00:35:58,320
emulating

1030
00:35:58,320 --> 00:36:00,240
and it looks just like a normal Linux

1031
00:36:00,240 --> 00:36:01,920
system we've got a GUI here you don't

1032
00:36:01,920 --> 00:36:04,079
always need a GUI but it's nice to sort

1033
00:36:04,079 --> 00:36:05,339
of look at you don't need to read that

1034
00:36:05,339 --> 00:36:07,140
it's just Linux booting in this

1035
00:36:07,140 --> 00:36:08,760
particular image which is arm or mips or

1036
00:36:08,760 --> 00:36:10,859
whatever it might be

1037
00:36:10,859 --> 00:36:14,040
and we can SSH into this guest and now

1038
00:36:14,040 --> 00:36:16,619
we've got an armed guest they were able

1039
00:36:16,619 --> 00:36:19,800
to run arm binaries on all we really

1040
00:36:19,800 --> 00:36:22,140
need to do is you know copy our firmware

1041
00:36:22,140 --> 00:36:24,359
across CH root into it and we're able to

1042
00:36:24,359 --> 00:36:27,359
emulate a network service

1043
00:36:27,359 --> 00:36:29,460
and that's that's all we do we SCP the

1044
00:36:29,460 --> 00:36:31,380
firmware image we've got that SSH

1045
00:36:31,380 --> 00:36:33,839
forwarding to our guests our entire that

1046
00:36:33,839 --> 00:36:36,180
file system route with ch root into that

1047
00:36:36,180 --> 00:36:38,760
that that file system and we run bnsh

1048
00:36:38,760 --> 00:36:40,859
and now we've got sort of a shell that's

1049
00:36:40,859 --> 00:36:44,700
running in our arm emulated environment

1050
00:36:44,700 --> 00:36:46,560
and you know this is a really good place

1051
00:36:46,560 --> 00:36:48,300
to be now we're able to emulate a

1052
00:36:48,300 --> 00:36:50,040
network service we're able to emulate a

1053
00:36:50,040 --> 00:36:51,060
shell

1054
00:36:51,060 --> 00:36:52,380
um you know we found a bug through our

1055
00:36:52,380 --> 00:36:54,480
vulnerability research process

1056
00:36:54,480 --> 00:36:55,079
um

1057
00:36:55,079 --> 00:36:58,859
now we want to write an export and I'll

1058
00:36:58,859 --> 00:37:01,020
talk about one particular exploit that I

1059
00:37:01,020 --> 00:37:02,579
wrote or one particular zero day that I

1060
00:37:02,579 --> 00:37:04,200
that I wrote

1061
00:37:04,200 --> 00:37:08,480
um are for a uh a router a common router

1062
00:37:08,480 --> 00:37:11,099
and the background for this is that

1063
00:37:11,099 --> 00:37:12,839
through manual code review and sort of

1064
00:37:12,839 --> 00:37:14,339
the vulnerable vulnerability research

1065
00:37:14,339 --> 00:37:16,079
process I discovered a

1066
00:37:16,079 --> 00:37:17,820
pre-authentication stack based buffer

1067
00:37:17,820 --> 00:37:19,320
overflow in the web server

1068
00:37:19,320 --> 00:37:21,720
implementation the attack only requires

1069
00:37:21,720 --> 00:37:26,220
one single HTTP get request and this web

1070
00:37:26,220 --> 00:37:29,040
server is enabled on by default on the

1071
00:37:29,040 --> 00:37:31,380
land side of the router but can be

1072
00:37:31,380 --> 00:37:32,760
enabled on the wand site as well if you

1073
00:37:32,760 --> 00:37:34,020
go to Showdown or whatever it might be

1074
00:37:34,020 --> 00:37:35,520
and start looking for these routers on

1075
00:37:35,520 --> 00:37:37,140
the internet you'll probably find open

1076
00:37:37,140 --> 00:37:40,980
one sometimes internet service providers

1077
00:37:40,980 --> 00:37:43,619
badly enable some sort of you know some

1078
00:37:43,619 --> 00:37:45,119
of these web servers on the routers they

1079
00:37:45,119 --> 00:37:47,579
give to customers

1080
00:37:47,579 --> 00:37:49,560
now generally the first step in the

1081
00:37:49,560 --> 00:37:51,359
export development process is to trigger

1082
00:37:51,359 --> 00:37:52,980
the bug and cause the crash just to sort

1083
00:37:52,980 --> 00:37:54,839
of put your mind at ease yes you know

1084
00:37:54,839 --> 00:37:56,520
it's a bug I definitely found something

1085
00:37:56,520 --> 00:37:58,500
I'm not imagining it here

1086
00:37:58,500 --> 00:38:00,240
um the way that I did this um which is

1087
00:38:00,240 --> 00:38:02,880
sort of a dubious way was I suppose I

1088
00:38:02,880 --> 00:38:04,320
just compiled the router source code I

1089
00:38:04,320 --> 00:38:06,240
had that available to me I compiled it

1090
00:38:06,240 --> 00:38:08,460
with debug symbols and then I tried to

1091
00:38:08,460 --> 00:38:09,960
sort of trigger a crash and I was able

1092
00:38:09,960 --> 00:38:11,700
to do Source line source code sort of

1093
00:38:11,700 --> 00:38:13,500
debugging Source level debugging on it

1094
00:38:13,500 --> 00:38:15,960
and make it much easier to work with the

1095
00:38:15,960 --> 00:38:17,820
main result I got from this was that you

1096
00:38:17,820 --> 00:38:19,980
needed needed a referrer header as part

1097
00:38:19,980 --> 00:38:21,839
of the web request to trigger the

1098
00:38:21,839 --> 00:38:23,760
appropriate code path and you also

1099
00:38:23,760 --> 00:38:25,619
needed to add a timestamp as part of a

1100
00:38:25,619 --> 00:38:28,500
sort of a web request and and it needed

1101
00:38:28,500 --> 00:38:30,300
this concept needed to be within a

1102
00:38:30,300 --> 00:38:31,980
couple of minutes of the web server's

1103
00:38:31,980 --> 00:38:34,440
real time and this seems sort of um you

1104
00:38:34,440 --> 00:38:35,820
know maybe this is annoying but it's

1105
00:38:35,820 --> 00:38:37,320
actually a really good thing because it

1106
00:38:37,320 --> 00:38:39,119
means that fuzzing probably isn't going

1107
00:38:39,119 --> 00:38:41,520
to be able to find this type of bug or

1108
00:38:41,520 --> 00:38:43,320
at least not reliably reproduce the

1109
00:38:43,320 --> 00:38:45,300
crash and so this is one thing that

1110
00:38:45,300 --> 00:38:47,400
manual code review is probably going to

1111
00:38:47,400 --> 00:38:49,200
be be more fruitful it'll probably be a

1112
00:38:49,200 --> 00:38:52,200
longer living bug than if it was found

1113
00:38:52,200 --> 00:38:54,359
by fuzzing

1114
00:38:54,359 --> 00:38:58,320
now on x86 the buffer overflow cleanly

1115
00:38:58,320 --> 00:38:59,880
overwrites the return address of the

1116
00:38:59,880 --> 00:39:01,380
function on this act this is my compiled

1117
00:39:01,380 --> 00:39:02,460
version that I was just using for

1118
00:39:02,460 --> 00:39:04,859
testing and it allows control flow to be

1119
00:39:04,859 --> 00:39:06,599
hijacked so that's that's pretty good I

1120
00:39:06,599 --> 00:39:07,920
mean it's a pretty good position to be

1121
00:39:07,920 --> 00:39:08,940
in

1122
00:39:08,940 --> 00:39:11,460
The Next Step I wanted to do was emulate

1123
00:39:11,460 --> 00:39:13,680
the real web server firmware under qmu

1124
00:39:13,680 --> 00:39:15,780
the target architecture is armed the

1125
00:39:15,780 --> 00:39:18,359
firmware binary use depth so data

1126
00:39:18,359 --> 00:39:19,560
execution prevention you have to

1127
00:39:19,560 --> 00:39:21,060
basically drop if you're getting sort of

1128
00:39:21,060 --> 00:39:22,740
memory crops in here or do data only

1129
00:39:22,740 --> 00:39:25,200
attacks whatever it might be and it does

1130
00:39:25,200 --> 00:39:28,500
use aslr the binary isn't Pi so the

1131
00:39:28,500 --> 00:39:30,960
application code and data isn't using

1132
00:39:30,960 --> 00:39:32,820
address space layout randomization so we

1133
00:39:32,820 --> 00:39:34,320
might have a lot of fixed gadgets that

1134
00:39:34,320 --> 00:39:36,720
we can drop into which is a good thing

1135
00:39:36,720 --> 00:39:38,940
for export development

1136
00:39:38,940 --> 00:39:41,940
now in an ideal world for um I would

1137
00:39:41,940 --> 00:39:43,859
just overwrite the return address

1138
00:39:43,859 --> 00:39:46,320
um on the stack with the gadget to move

1139
00:39:46,320 --> 00:39:47,760
the stack pointer into the argument

1140
00:39:47,760 --> 00:39:49,680
register and then drop into the system

1141
00:39:49,680 --> 00:39:51,420
Library call that is almost certainly

1142
00:39:51,420 --> 00:39:53,579
available on this particular binary most

1143
00:39:53,579 --> 00:39:55,260
of these Network Services have system

1144
00:39:55,260 --> 00:39:57,839
available to them because they use them

1145
00:39:57,839 --> 00:40:00,119
for IPC mechanisms you know it's in a

1146
00:40:00,119 --> 00:40:02,520
pseudo sort of way and that would allow

1147
00:40:02,520 --> 00:40:04,200
you to execute arbitrary shell commands

1148
00:40:04,200 --> 00:40:06,119
and then what you would do you'd

1149
00:40:06,119 --> 00:40:08,220
normally start a telnet binder telnet

1150
00:40:08,220 --> 00:40:10,320
service running on a high port with the

1151
00:40:10,320 --> 00:40:12,420
bin sh as a login and then you just tell

1152
00:40:12,420 --> 00:40:15,060
that into it and you've got a root shell

1153
00:40:15,060 --> 00:40:17,460
um now the text segment for these um

1154
00:40:17,460 --> 00:40:20,520
gadgets contain an old white so the code

1155
00:40:20,520 --> 00:40:22,200
and data of the application even though

1156
00:40:22,200 --> 00:40:25,920
it's non-pi does contain null bytes and

1157
00:40:25,920 --> 00:40:27,420
this is problematic because we can't

1158
00:40:27,420 --> 00:40:29,460
build a rock chain because we need

1159
00:40:29,460 --> 00:40:31,200
multiple null whites in our addresses

1160
00:40:31,200 --> 00:40:33,240
for this buffer overflowing it's the

1161
00:40:33,240 --> 00:40:35,099
string based buffer overflow attack so

1162
00:40:35,099 --> 00:40:37,560
this is problematic

1163
00:40:37,560 --> 00:40:40,320
and there's even more problems on x86 it

1164
00:40:40,320 --> 00:40:42,119
was a clean return address stack

1165
00:40:42,119 --> 00:40:44,700
override now on the real Target the web

1166
00:40:44,700 --> 00:40:46,680
server crashes before it overwrites a

1167
00:40:46,680 --> 00:40:48,660
return address and what's happening is

1168
00:40:48,660 --> 00:40:50,460
that there's an application pointer on

1169
00:40:50,460 --> 00:40:52,520
the stack before the return address

1170
00:40:52,520 --> 00:40:55,440
that points to a Json object and this

1171
00:40:55,440 --> 00:40:58,380
Json object is passed and because we've

1172
00:40:58,380 --> 00:41:00,119
corrupted the stack this application

1173
00:41:00,119 --> 00:41:01,980
pointer is corrupt and now it's pointing

1174
00:41:01,980 --> 00:41:03,900
to a invalid Json object and we're

1175
00:41:03,900 --> 00:41:05,640
getting sort of a crash before that so

1176
00:41:05,640 --> 00:41:07,140
that's a real problem out you know your

1177
00:41:07,140 --> 00:41:10,440
classic oscp style you know overwrite

1178
00:41:10,440 --> 00:41:11,940
the return address doesn't really work

1179
00:41:11,940 --> 00:41:14,240
in this particular case

1180
00:41:14,240 --> 00:41:18,720
now because the web server isn't Pi the

1181
00:41:18,720 --> 00:41:20,880
text and data at a fixed addresses and

1182
00:41:20,880 --> 00:41:22,560
you can actually sort of

1183
00:41:22,560 --> 00:41:23,220
um

1184
00:41:23,220 --> 00:41:26,520
makes them HTTP headers with the user

1185
00:41:26,520 --> 00:41:28,500
agent and so forth point to these fixed

1186
00:41:28,500 --> 00:41:30,240
addresses in memory and so we can

1187
00:41:30,240 --> 00:41:32,280
actually put you know data into sort of

1188
00:41:32,280 --> 00:41:34,200
the address space that we control

1189
00:41:34,200 --> 00:41:35,940
um using this and what we're going to do

1190
00:41:35,940 --> 00:41:38,339
is corrupt that application pointer with

1191
00:41:38,339 --> 00:41:40,740
a pointer to a fake Json object that

1192
00:41:40,740 --> 00:41:42,660
we're going to sort of smuggle into our

1193
00:41:42,660 --> 00:41:45,480
user agent and and build it that way and

1194
00:41:45,480 --> 00:41:47,220
we'll modify our export to overwrite

1195
00:41:47,220 --> 00:41:49,140
that application pointer pointing to our

1196
00:41:49,140 --> 00:41:51,240
fake Json object and hopefully we can

1197
00:41:51,240 --> 00:41:52,800
make some progress and not crash our

1198
00:41:52,800 --> 00:41:53,700
program

1199
00:41:53,700 --> 00:41:55,859
and it turns out this is even better

1200
00:41:55,859 --> 00:41:59,099
this fake Json object also stores a kind

1201
00:41:59,099 --> 00:42:01,680
of virtual function table or v-table and

1202
00:42:01,680 --> 00:42:03,359
we can hijack control flow not by

1203
00:42:03,359 --> 00:42:04,859
overwriting the return address on the

1204
00:42:04,859 --> 00:42:07,740
stack but by making a fake function

1205
00:42:07,740 --> 00:42:10,440
pointer in our Json object that is in a

1206
00:42:10,440 --> 00:42:13,700
user agent part of the the the memory

1207
00:42:13,700 --> 00:42:16,140
this is also good because if stacking

1208
00:42:16,140 --> 00:42:17,700
areas were used on this particular

1209
00:42:17,700 --> 00:42:19,859
network service we would be able to

1210
00:42:19,859 --> 00:42:21,839
bypass them even if that mitigation was

1211
00:42:21,839 --> 00:42:24,060
was in effect

1212
00:42:24,060 --> 00:42:27,060
now the first exploit I wrote um I sort

1213
00:42:27,060 --> 00:42:29,220
of just assuming that aslr wasn't turned

1214
00:42:29,220 --> 00:42:32,280
on we'll assume we'll eliminate that

1215
00:42:32,280 --> 00:42:34,740
caveat shortly but let's let's make some

1216
00:42:34,740 --> 00:42:35,880
progress

1217
00:42:35,880 --> 00:42:37,980
um lib C in this particular network

1218
00:42:37,980 --> 00:42:39,900
service doesn't include any null Watts

1219
00:42:39,900 --> 00:42:42,480
it's in the high address space so we can

1220
00:42:42,480 --> 00:42:45,540
write our exploit using romp we don't

1221
00:42:45,540 --> 00:42:47,220
have any null wipes in our in our chain

1222
00:42:47,220 --> 00:42:48,660
and our exploit works and we're able to

1223
00:42:48,660 --> 00:42:51,060
get code execution uh it's not very good

1224
00:42:51,060 --> 00:42:52,920
though we need to you know real devices

1225
00:42:52,920 --> 00:42:54,780
are going to have aslr turned on so we

1226
00:42:54,780 --> 00:42:56,760
need to be able to bypass that for this

1227
00:42:56,760 --> 00:42:59,720
export to be useful

1228
00:42:59,880 --> 00:43:01,560
um I audited the web server in more

1229
00:43:01,560 --> 00:43:04,619
detail and I found that if I put a

1230
00:43:04,619 --> 00:43:07,560
courage return as part of a HTTP header

1231
00:43:07,560 --> 00:43:09,960
the web server will actually search for

1232
00:43:09,960 --> 00:43:11,640
that carriage return and replace it with

1233
00:43:11,640 --> 00:43:14,160
the null white as part of its processing

1234
00:43:14,160 --> 00:43:16,619
of text strings and so we can actually

1235
00:43:16,619 --> 00:43:19,560
get null bytes into our chain Now by

1236
00:43:19,560 --> 00:43:21,420
putting appropriate use of carriage

1237
00:43:21,420 --> 00:43:23,520
returns into our into our Shell Code

1238
00:43:23,520 --> 00:43:25,400
basically our Rock chain

1239
00:43:25,400 --> 00:43:27,720
so that's pretty good we can get Pi

1240
00:43:27,720 --> 00:43:30,300
addresses into our exploit and this is a

1241
00:43:30,300 --> 00:43:33,180
pretty good position because Pi well we

1242
00:43:33,180 --> 00:43:34,680
can get um

1243
00:43:34,680 --> 00:43:36,900
we can get pointers to sort of the

1244
00:43:36,900 --> 00:43:39,000
application code and data for a non-ply

1245
00:43:39,000 --> 00:43:40,859
binary there are fixed addresses that

1246
00:43:40,859 --> 00:43:42,540
include null bytes

1247
00:43:42,540 --> 00:43:45,480
and we can't use our Gadget anymore that

1248
00:43:45,480 --> 00:43:47,220
like our traditional Gadget to move the

1249
00:43:47,220 --> 00:43:48,480
stack Point into the first argument

1250
00:43:48,480 --> 00:43:49,680
because we're using that V table

1251
00:43:49,680 --> 00:43:52,020
function pointer we're not using sort of

1252
00:43:52,020 --> 00:43:54,180
that that classic thing anymore but what

1253
00:43:54,180 --> 00:43:56,579
we can do is there's a register pointing

1254
00:43:56,579 --> 00:43:58,800
to attack a controlled data and we can

1255
00:43:58,800 --> 00:44:01,560
pivot our argument we can pivot our

1256
00:44:01,560 --> 00:44:03,420
argument register and returning to

1257
00:44:03,420 --> 00:44:07,260
system in our binary bypassing aslr

1258
00:44:07,260 --> 00:44:09,359
because we're using fixed addresses for

1259
00:44:09,359 --> 00:44:11,819
code and data in our non-pi binary we're

1260
00:44:11,819 --> 00:44:14,819
able to put arbitrary payloads for our

1261
00:44:14,819 --> 00:44:17,220
system Library call and execute shell

1262
00:44:17,220 --> 00:44:18,900
commands we can start a telnet service

1263
00:44:18,900 --> 00:44:21,599
and running on a high port with the

1264
00:44:21,599 --> 00:44:24,720
login as bin sh and get a root Shelf

1265
00:44:24,720 --> 00:44:27,359
so we've finally got a 100 reliable

1266
00:44:27,359 --> 00:44:29,160
exploit

1267
00:44:29,160 --> 00:44:31,500
um this particular Network this

1268
00:44:31,500 --> 00:44:32,819
particular device doesn't actually have

1269
00:44:32,819 --> 00:44:35,460
telnet D on the file system most

1270
00:44:35,460 --> 00:44:37,200
embedded devices do have telnet T

1271
00:44:37,200 --> 00:44:39,060
available to them it's just a default

1272
00:44:39,060 --> 00:44:40,500
way that the sort of this build

1273
00:44:40,500 --> 00:44:42,180
environment works for when embedded

1274
00:44:42,180 --> 00:44:43,980
devices are built but this particular

1275
00:44:43,980 --> 00:44:46,200
device doesn't have telnet present but

1276
00:44:46,200 --> 00:44:48,000
we're just going to create a file

1277
00:44:48,000 --> 00:44:50,099
ourselves by echoing

1278
00:44:50,099 --> 00:44:52,800
Escape characters hexadecimal characters

1279
00:44:52,800 --> 00:44:54,359
writing a binary that creates a bind

1280
00:44:54,359 --> 00:44:56,280
shell and then we can tell net to it

1281
00:44:56,280 --> 00:44:58,800
this exploit is 100 reliable and would

1282
00:44:58,800 --> 00:45:00,900
also work if stack canaries were used

1283
00:45:00,900 --> 00:45:02,339
since it doesn't overwrite the return

1284
00:45:02,339 --> 00:45:04,740
address so it's a very useful exploit

1285
00:45:04,740 --> 00:45:08,299
now for this particular Target

1286
00:45:08,520 --> 00:45:10,260
and that's that's pretty much the end of

1287
00:45:10,260 --> 00:45:13,200
that zero day but let's look at a router

1288
00:45:13,200 --> 00:45:14,940
in in one last vendor it's a different

1289
00:45:14,940 --> 00:45:17,040
vendor D-Link and

1290
00:45:17,040 --> 00:45:19,920
this this router just a video that I'm

1291
00:45:19,920 --> 00:45:22,140
not going through the export itself but

1292
00:45:22,140 --> 00:45:23,940
I went to my sort of my local Consumer

1293
00:45:23,940 --> 00:45:25,500
Electronic store and I said oh you know

1294
00:45:25,500 --> 00:45:27,119
I'll buy the most expensive router that

1295
00:45:27,119 --> 00:45:29,579
they have available to me and I'll buy

1296
00:45:29,579 --> 00:45:31,200
that and I'll take it home and I'll see

1297
00:45:31,200 --> 00:45:32,520
if I can find a zero day and write an

1298
00:45:32,520 --> 00:45:35,220
export for it and when I took it home

1299
00:45:35,220 --> 00:45:36,060
um

1300
00:45:36,060 --> 00:45:38,400
I I sort of looked on the internet and

1301
00:45:38,400 --> 00:45:40,560
this device was actually end of life

1302
00:45:40,560 --> 00:45:42,660
um maybe that says badly for my my

1303
00:45:42,660 --> 00:45:44,220
electronic store that I was using but

1304
00:45:44,220 --> 00:45:46,500
this device was end of life and a lot of

1305
00:45:46,500 --> 00:45:48,119
these vendors end of life means that

1306
00:45:48,119 --> 00:45:49,619
there will never be any more patches

1307
00:45:49,619 --> 00:45:51,480
against these devices again they'll

1308
00:45:51,480 --> 00:45:52,980
never they'll never do any security

1309
00:45:52,980 --> 00:45:54,359
fixes

1310
00:45:54,359 --> 00:45:56,220
um and if you have any bugs or zero days

1311
00:45:56,220 --> 00:45:58,319
in these devices they'll be ever present

1312
00:45:58,319 --> 00:45:59,940
so long as there are devices still on

1313
00:45:59,940 --> 00:46:00,780
the internet

1314
00:46:00,780 --> 00:46:02,400
and

1315
00:46:02,400 --> 00:46:04,800
this is that as you get more expensive

1316
00:46:04,800 --> 00:46:06,300
they start to look like spaceships these

1317
00:46:06,300 --> 00:46:07,740
these routers

1318
00:46:07,740 --> 00:46:09,300
um this is connected over a network

1319
00:46:09,300 --> 00:46:11,180
cable but Wi-Fi is equally applicable

1320
00:46:11,180 --> 00:46:13,500
I'm listening I'm setting a netcat

1321
00:46:13,500 --> 00:46:16,800
listener on Port 4444 and the the idea

1322
00:46:16,800 --> 00:46:18,180
is that the router is going to be

1323
00:46:18,180 --> 00:46:20,040
exploited and telnet back into me with

1324
00:46:20,040 --> 00:46:23,220
the connect shell if the multi-stage

1325
00:46:23,220 --> 00:46:24,660
that's what I sort of building the

1326
00:46:24,660 --> 00:46:26,579
payload as I go so it takes a little bit

1327
00:46:26,579 --> 00:46:28,920
longer than you know single web requests

1328
00:46:28,920 --> 00:46:30,839
or anything like that

1329
00:46:30,839 --> 00:46:33,799
uh but

1330
00:46:34,500 --> 00:46:37,760
it's building the exploit

1331
00:46:38,520 --> 00:46:42,839
and it's completed when I go to my other

1332
00:46:42,839 --> 00:46:46,079
terminal and I should have a shell now I

1333
00:46:46,079 --> 00:46:48,420
run unit minus a and it's running an

1334
00:46:48,420 --> 00:46:51,180
ancient kernel I'm running as root

1335
00:46:51,180 --> 00:46:52,800
on the device

1336
00:46:52,800 --> 00:46:55,260
and I'm on the root file system

1337
00:46:55,260 --> 00:46:57,180
again you know this is a really sort of

1338
00:46:57,180 --> 00:46:59,339
common problem with it devices and

1339
00:46:59,339 --> 00:47:01,020
embedded devices is that management of

1340
00:47:01,020 --> 00:47:02,579
their their sort of their life their

1341
00:47:02,579 --> 00:47:04,260
security life cycle is pretty bad and

1342
00:47:04,260 --> 00:47:06,119
once these devices become end of life

1343
00:47:06,119 --> 00:47:08,339
you know and there's tons out there you

1344
00:47:08,339 --> 00:47:09,960
know what happens to them

1345
00:47:09,960 --> 00:47:11,640
um they're just sitting out there on the

1346
00:47:11,640 --> 00:47:13,619
internet waiting for exploitation I

1347
00:47:13,619 --> 00:47:15,859
suppose

1348
00:47:17,400 --> 00:47:20,160
so that's pretty much the end of my talk

1349
00:47:20,160 --> 00:47:22,680
IIT zero day engineering does take some

1350
00:47:22,680 --> 00:47:24,359
work there are you know approaches you

1351
00:47:24,359 --> 00:47:27,060
can use and processes and methodologies

1352
00:47:27,060 --> 00:47:29,640
that that make it easier it is

1353
00:47:29,640 --> 00:47:31,800
achievable and it is an important part

1354
00:47:31,800 --> 00:47:33,780
if you want to sort of you know see if

1355
00:47:33,780 --> 00:47:35,400
you can you know find a zero a day and

1356
00:47:35,400 --> 00:47:36,720
write an exploit for some of these

1357
00:47:36,720 --> 00:47:39,420
devices like you have at pone to own we

1358
00:47:39,420 --> 00:47:40,920
actually do training and info sect and

1359
00:47:40,920 --> 00:47:42,180
these are a bunch of routers that we we

1360
00:47:42,180 --> 00:47:44,579
saw for that training but thank you very

1361
00:47:44,579 --> 00:47:46,079
much I hope you enjoyed my talk it's

1362
00:47:46,079 --> 00:47:48,480
great to be in Argentina and um if

1363
00:47:48,480 --> 00:47:50,099
there's any questions I'm happy to take

1364
00:47:50,099 --> 00:47:51,780
them

1365
00:47:51,780 --> 00:47:54,780
foreign

