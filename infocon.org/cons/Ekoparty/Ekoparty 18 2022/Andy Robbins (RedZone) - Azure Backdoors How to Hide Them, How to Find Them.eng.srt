1
00:00:00,690 --> 00:00:03,790
[Music]

2
00:00:08,600 --> 00:00:10,940
[Music]

3
00:00:10,940 --> 00:00:13,940
thank you

4
00:00:14,599 --> 00:00:18,180
yeah okay how was everybody today a

5
00:00:18,180 --> 00:00:20,220
little hungover Maybe

6
00:00:20,220 --> 00:00:22,260
a little tired me too

7
00:00:22,260 --> 00:00:25,560
so today we are talking about Azure we

8
00:00:25,560 --> 00:00:27,420
are talking about Azure backdoors how to

9
00:00:27,420 --> 00:00:30,960
hide them how to find them anybody using

10
00:00:30,960 --> 00:00:34,620
Azure like attacking Azure defending it

11
00:00:34,620 --> 00:00:36,600
okay a couple of people okay cool all

12
00:00:36,600 --> 00:00:39,000
right so hopefully hopefully some of us

13
00:00:39,000 --> 00:00:41,219
will learn something uh during this talk

14
00:00:41,219 --> 00:00:43,739
uh so

15
00:00:43,739 --> 00:00:46,440
uh this is me Javi thank you for the the

16
00:00:46,440 --> 00:00:48,719
nice introduction so I think I heard a

17
00:00:48,719 --> 00:00:50,280
couple things and understood a couple of

18
00:00:50,280 --> 00:00:52,079
things how he said so I'm a co-creator

19
00:00:52,079 --> 00:00:54,300
of a piece of software called bloodhound

20
00:00:54,300 --> 00:00:55,860
now my full-time job is I'm product

21
00:00:55,860 --> 00:00:57,960
architect of Bloodhound and the

22
00:00:57,960 --> 00:01:00,360
commercial version Bloodhound Enterprise

23
00:01:00,360 --> 00:01:02,100
I work at a company called Specter Ops

24
00:01:02,100 --> 00:01:03,539
in the US

25
00:01:03,539 --> 00:01:05,220
and on Twitter you can find me at

26
00:01:05,220 --> 00:01:08,220
underscore Waldo with a zero

27
00:01:08,220 --> 00:01:10,799
here's our agenda a little intro some

28
00:01:10,799 --> 00:01:12,119
opening thoughts

29
00:01:12,119 --> 00:01:15,240
how we can hide and find persistent

30
00:01:15,240 --> 00:01:16,619
access

31
00:01:16,619 --> 00:01:18,900
and how we can hide and find stealthy

32
00:01:18,900 --> 00:01:20,460
Privileges and then a conclusion at the

33
00:01:20,460 --> 00:01:21,360
end

34
00:01:21,360 --> 00:01:24,780
there are a lot of links in this deck

35
00:01:24,780 --> 00:01:26,640
there are a lot of references in this

36
00:01:26,640 --> 00:01:27,540
deck

37
00:01:27,540 --> 00:01:29,460
so if you look at the bottom there is a

38
00:01:29,460 --> 00:01:31,500
bitly link that you can use to pull up

39
00:01:31,500 --> 00:01:33,180
on your phone or pull up on your laptop

40
00:01:33,180 --> 00:01:34,860
whatever and follow along

41
00:01:34,860 --> 00:01:36,600
I recommend that you do that there's

42
00:01:36,600 --> 00:01:38,640
also like a lot of like small text that

43
00:01:38,640 --> 00:01:39,900
might be kind of hard to read on the

44
00:01:39,900 --> 00:01:41,880
screen

45
00:01:41,880 --> 00:01:44,400
so by way of introduction let's talk

46
00:01:44,400 --> 00:01:47,460
about the perception in the offensive

47
00:01:47,460 --> 00:01:50,220
security and defensive security world

48
00:01:50,220 --> 00:01:52,079
I think a perception is that a lot of

49
00:01:52,079 --> 00:01:54,000
times the red team comes in

50
00:01:54,000 --> 00:01:55,259
they

51
00:01:55,259 --> 00:01:57,720
beat the out of the blue team and

52
00:01:57,720 --> 00:01:59,880
then the blue team you know laments the

53
00:01:59,880 --> 00:02:01,320
fact that they're always playing

54
00:02:01,320 --> 00:02:03,299
catch-up with the red team they're

55
00:02:03,299 --> 00:02:06,180
always trying to catch up maybe one day

56
00:02:06,180 --> 00:02:09,060
stay ahead of the red team so the blue

57
00:02:09,060 --> 00:02:10,020
team they have their detection

58
00:02:10,020 --> 00:02:12,000
engineering they have their prevention

59
00:02:12,000 --> 00:02:13,739
tactics and techniques they have their

60
00:02:13,739 --> 00:02:16,620
Tools Red teams got their our ttps our

61
00:02:16,620 --> 00:02:19,080
tools and our research

62
00:02:19,080 --> 00:02:20,760
so this is I think the perception does

63
00:02:20,760 --> 00:02:22,680
anybody agree with this or did anybody

64
00:02:22,680 --> 00:02:24,959
see it this way

65
00:02:24,959 --> 00:02:26,640
I think the reality is actually closer

66
00:02:26,640 --> 00:02:27,720
to this

67
00:02:27,720 --> 00:02:29,040
I think the blue team and the red team

68
00:02:29,040 --> 00:02:31,020
are in fact on the same team if you

69
00:02:31,020 --> 00:02:32,400
think about it don't we work for the

70
00:02:32,400 --> 00:02:33,480
same people

71
00:02:33,480 --> 00:02:35,760
if you're a red team at a bank your

72
00:02:35,760 --> 00:02:37,020
employer is a bank they pay your

73
00:02:37,020 --> 00:02:40,260
paycheck and if you're going against

74
00:02:40,260 --> 00:02:41,819
your employer that's probably not a very

75
00:02:41,819 --> 00:02:44,700
very great tactic for your career

76
00:02:44,700 --> 00:02:46,200
so I think the reality is the blue team

77
00:02:46,200 --> 00:02:47,519
and the red team are constantly

78
00:02:47,519 --> 00:02:49,620
improving each other like iron sharpens

79
00:02:49,620 --> 00:02:50,700
iron

80
00:02:50,700 --> 00:02:53,519
and in fact it is the red team in the

81
00:02:53,519 --> 00:02:55,140
blue team that are constantly playing

82
00:02:55,140 --> 00:02:56,400
catch-up

83
00:02:56,400 --> 00:02:59,280
with the emergent risk that is being

84
00:02:59,280 --> 00:03:02,099
created all the time by a combination of

85
00:03:02,099 --> 00:03:03,780
software vendors

86
00:03:03,780 --> 00:03:07,260
Legacy Technologies new technologies and

87
00:03:07,260 --> 00:03:09,900
common configurations that emerge out of

88
00:03:09,900 --> 00:03:12,500
all those things

89
00:03:13,739 --> 00:03:16,140
so we're talking about back doors let's

90
00:03:16,140 --> 00:03:17,459
give a little definition to what that

91
00:03:17,459 --> 00:03:20,280
means so during the talk we'll just

92
00:03:20,280 --> 00:03:22,440
agree that this is what a backdoor means

93
00:03:22,440 --> 00:03:24,840
so any system or mechanism whose

94
00:03:24,840 --> 00:03:27,420
legitimate purpose can be subverted to

95
00:03:27,420 --> 00:03:32,119
provide long-term illegitimate access

96
00:03:33,480 --> 00:03:36,420
here's the point of this talk

97
00:03:36,420 --> 00:03:39,300
I want to help us understand how these

98
00:03:39,300 --> 00:03:41,640
new services and features particularly

99
00:03:41,640 --> 00:03:46,080
in azure can be abused by adversaries

100
00:03:46,080 --> 00:03:49,019
to install long-term persistence and

101
00:03:49,019 --> 00:03:52,560
maintain stealthy privilege

102
00:03:52,560 --> 00:03:54,620
so let's do that

103
00:03:54,620 --> 00:03:56,940
first we're going to talk about hiding

104
00:03:56,940 --> 00:03:59,459
and finding or hunting for persistent

105
00:03:59,459 --> 00:04:00,959
access

106
00:04:00,959 --> 00:04:02,280
the first thing that we're going to look

107
00:04:02,280 --> 00:04:06,599
at are some living off the land ttps So

108
00:04:06,599 --> 00:04:09,299
based on services that are legitimately

109
00:04:09,299 --> 00:04:11,340
supposed to be used basically for

110
00:04:11,340 --> 00:04:14,220
command and control purposes

111
00:04:14,220 --> 00:04:16,918
and there are many of those Services

112
00:04:16,918 --> 00:04:19,858
where you can legitimately access an API

113
00:04:19,858 --> 00:04:23,400
endpoint and have some kind of compute

114
00:04:23,400 --> 00:04:26,220
resource in Azure resource manager do a

115
00:04:26,220 --> 00:04:28,080
thing run a command run a Powershell

116
00:04:28,080 --> 00:04:29,580
script run a batch script whatever

117
00:04:29,580 --> 00:04:31,740
whatever you like

118
00:04:31,740 --> 00:04:33,360
there are a lot of those we're going to

119
00:04:33,360 --> 00:04:36,120
look at one example with the virtual

120
00:04:36,120 --> 00:04:38,759
machine run command API endpoint has

121
00:04:38,759 --> 00:04:40,740
anybody heard of this anybody familiar

122
00:04:40,740 --> 00:04:42,479
with this

123
00:04:42,479 --> 00:04:46,259
see one hand okay cool

124
00:04:46,259 --> 00:04:49,139
in Azure resource manager which is

125
00:04:49,139 --> 00:04:50,580
Microsoft's

126
00:04:50,580 --> 00:04:52,740
let's say infrastructure as a service

127
00:04:52,740 --> 00:04:54,660
product

128
00:04:54,660 --> 00:04:57,360
when you create a virtual machine there

129
00:04:57,360 --> 00:04:59,940
will be a virtual machine object that

130
00:04:59,940 --> 00:05:03,240
exists in Azure resource manager you can

131
00:05:03,240 --> 00:05:04,919
read this and you can interpret it as a

132
00:05:04,919 --> 00:05:06,660
Json object and there are different

133
00:05:06,660 --> 00:05:08,699
features on that object and there are

134
00:05:08,699 --> 00:05:10,199
different endpoints that you can access

135
00:05:10,199 --> 00:05:12,780
through that object as well

136
00:05:12,780 --> 00:05:15,540
what you also have is the actual virtual

137
00:05:15,540 --> 00:05:17,400
machine the actual system that's running

138
00:05:17,400 --> 00:05:19,380
an operating system like Windows or

139
00:05:19,380 --> 00:05:21,960
Linux or whatever

140
00:05:21,960 --> 00:05:24,600
on that virtual machine

141
00:05:24,600 --> 00:05:28,100
there is a process called Windows Azure

142
00:05:28,100 --> 00:05:30,900
guest agent

143
00:05:30,900 --> 00:05:33,900
this thing has a pretty important job

144
00:05:33,900 --> 00:05:35,639
and the way that it accomplishes that

145
00:05:35,639 --> 00:05:38,460
job is every 15 seconds this process

146
00:05:38,460 --> 00:05:42,600
will send a post request to a special

147
00:05:42,600 --> 00:05:46,320
public IP address owned by Microsoft

148
00:05:46,320 --> 00:05:49,259
that is more or less guaranteed to

149
00:05:49,259 --> 00:05:51,360
always be accessible from a virtual

150
00:05:51,360 --> 00:05:54,300
machine so even if your target is doing

151
00:05:54,300 --> 00:05:57,180
some kind of like air gapping or if they

152
00:05:57,180 --> 00:05:59,880
are filtering egress traffic or whatever

153
00:05:59,880 --> 00:06:02,100
this IP address is almost guaranteed to

154
00:06:02,100 --> 00:06:04,680
be accessible from the virtual machine

155
00:06:04,680 --> 00:06:06,419
that heartbeat includes information

156
00:06:06,419 --> 00:06:08,699
about

157
00:06:08,699 --> 00:06:12,180
disk space usage CPU usage memory

158
00:06:12,180 --> 00:06:14,520
utilization it also includes information

159
00:06:14,520 --> 00:06:17,340
about the most recent jobs that have

160
00:06:17,340 --> 00:06:19,380
executed on that machine

161
00:06:19,380 --> 00:06:23,300
and with the output of that job was

162
00:06:23,520 --> 00:06:26,160
as an attacker from the internet not

163
00:06:26,160 --> 00:06:28,259
having any kind of initial access

164
00:06:28,259 --> 00:06:31,319
given the right privileges we can submit

165
00:06:31,319 --> 00:06:34,080
a run command job to the VM object

166
00:06:34,080 --> 00:06:37,020
through the Run command API endpoint

167
00:06:37,020 --> 00:06:38,400
foreign

168
00:06:38,400 --> 00:06:41,220
that will then create information

169
00:06:41,220 --> 00:06:43,680
uh not necessarily on the VM but related

170
00:06:43,680 --> 00:06:45,900
to the VM with some information about

171
00:06:45,900 --> 00:06:48,720
that job so there'll be a job ID what

172
00:06:48,720 --> 00:06:50,160
the command is that you actually want to

173
00:06:50,160 --> 00:06:50,819
run

174
00:06:50,819 --> 00:06:52,860
what the result is the output and the

175
00:06:52,860 --> 00:06:55,020
and if there's an error then through

176
00:06:55,020 --> 00:06:58,680
that endpoint you just pull for output

177
00:06:58,680 --> 00:07:00,600
until finally there is some kind of

178
00:07:00,600 --> 00:07:02,960
output

179
00:07:03,120 --> 00:07:05,460
the heartbeat mechanism from the virtual

180
00:07:05,460 --> 00:07:07,919
machine will pick up this job

181
00:07:07,919 --> 00:07:11,419
information from the same source

182
00:07:11,419 --> 00:07:14,400
it will run that job it will execute so

183
00:07:14,400 --> 00:07:17,400
here we're just running like who am I

184
00:07:17,400 --> 00:07:20,400
and then it will post back after like at

185
00:07:20,400 --> 00:07:22,620
the next 15 second heartbeat interval it

186
00:07:22,620 --> 00:07:24,900
will post back the result of that job

187
00:07:24,900 --> 00:07:27,840
was it an error what was the output

188
00:07:27,840 --> 00:07:29,639
Etc

189
00:07:29,639 --> 00:07:32,039
and then as an attacker or as an admin

190
00:07:32,039 --> 00:07:34,080
or whoever you can then read that output

191
00:07:34,080 --> 00:07:36,960
so doesn't this kind of look like

192
00:07:36,960 --> 00:07:38,940
command and control by Design doesn't

193
00:07:38,940 --> 00:07:40,740
this look like command and control as a

194
00:07:40,740 --> 00:07:42,539
service that is

195
00:07:42,539 --> 00:07:45,360
uh maintained patched and has guaranteed

196
00:07:45,360 --> 00:07:48,840
uptime from the vendor isn't that nice

197
00:07:48,840 --> 00:07:50,400
so if you don't even need to install a

198
00:07:50,400 --> 00:07:52,500
malicious agent on the system

199
00:07:52,500 --> 00:07:55,080
why do it in the first place

200
00:07:55,080 --> 00:07:57,840
so you can use you can abuse this

201
00:07:57,840 --> 00:07:59,580
legitimate access or this legitimate

202
00:07:59,580 --> 00:08:01,319
system

203
00:08:01,319 --> 00:08:05,039
so you can use the Azure portal GUI to

204
00:08:05,039 --> 00:08:06,240
do this

205
00:08:06,240 --> 00:08:08,099
it doesn't have to be fancy

206
00:08:08,099 --> 00:08:09,840
and the way you navigate to this is you

207
00:08:09,840 --> 00:08:11,460
go to the VM object you go to run

208
00:08:11,460 --> 00:08:13,919
command run Powershell script and then

209
00:08:13,919 --> 00:08:15,539
just type whatever command you want to

210
00:08:15,539 --> 00:08:18,180
run it will run it in a Powershell run

211
00:08:18,180 --> 00:08:20,099
space but you have access to all the dos

212
00:08:20,099 --> 00:08:22,080
commands there as well

213
00:08:22,080 --> 00:08:24,120
and then if we run like who am I for

214
00:08:24,120 --> 00:08:25,620
example then the job output will

215
00:08:25,620 --> 00:08:27,479
eventually display in the portal GUI

216
00:08:27,479 --> 00:08:29,220
like this

217
00:08:29,220 --> 00:08:31,740
so this is the easy way and this is the

218
00:08:31,740 --> 00:08:33,479
way that

219
00:08:33,479 --> 00:08:35,580
um let's say is a little more user

220
00:08:35,580 --> 00:08:37,919
friendly but there are also significant

221
00:08:37,919 --> 00:08:41,640
drawbacks to relying on this GUI

222
00:08:41,640 --> 00:08:43,500
so the question is

223
00:08:43,500 --> 00:08:46,800
why not just use the GUI why go fancy

224
00:08:46,800 --> 00:08:48,899
into the details about the API endpoint

225
00:08:48,899 --> 00:08:50,100
and understanding how this actually

226
00:08:50,100 --> 00:08:52,500
works what's the point

227
00:08:52,500 --> 00:08:55,680
the point is that you can't always use

228
00:08:55,680 --> 00:08:57,360
the portal GUI

229
00:08:57,360 --> 00:09:00,660
if you're authenticating as a user then

230
00:09:00,660 --> 00:09:02,760
there is a token exchange flow that

231
00:09:02,760 --> 00:09:04,500
happens when you access the portal GUI

232
00:09:04,500 --> 00:09:06,180
that gives you all the tokens you need

233
00:09:06,180 --> 00:09:08,519
to access everything there and it works

234
00:09:08,519 --> 00:09:10,380
if you're authenticating as a service

235
00:09:10,380 --> 00:09:13,560
principal which is going to be most

236
00:09:13,560 --> 00:09:15,839
likely the case if you are executing an

237
00:09:15,839 --> 00:09:18,899
attack path in Azure you can't use the

238
00:09:18,899 --> 00:09:20,940
Azure portal GUI as a service principle

239
00:09:20,940 --> 00:09:24,360
your only option is the API endpoint

240
00:09:24,360 --> 00:09:27,720
your user might also not be allowed to

241
00:09:27,720 --> 00:09:29,820
use the Azure portal

242
00:09:29,820 --> 00:09:32,459
and finally there may be some kind of

243
00:09:32,459 --> 00:09:35,100
conditional access or continuing access

244
00:09:35,100 --> 00:09:37,860
evaluation that prevents you from

245
00:09:37,860 --> 00:09:40,160
accessing the portal from the Internet

246
00:09:40,160 --> 00:09:42,959
or even accessing these API endpoints

247
00:09:42,959 --> 00:09:44,220
from the internet

248
00:09:44,220 --> 00:09:45,839
and so then you start talking about

249
00:09:45,839 --> 00:09:47,399
tunneling your traffic through the

250
00:09:47,399 --> 00:09:49,019
target LAN

251
00:09:49,019 --> 00:09:51,000
which you can do that and you can abuse

252
00:09:51,000 --> 00:09:53,220
like the debug protocol on the Chrome

253
00:09:53,220 --> 00:09:56,580
browser to hijack like a chrome session

254
00:09:56,580 --> 00:09:58,320
but that gets really finicky and that

255
00:09:58,320 --> 00:09:59,459
gets really

256
00:09:59,459 --> 00:10:02,580
uh unstable so doing this through just

257
00:10:02,580 --> 00:10:05,880
rest method requests is a lot easier and

258
00:10:05,880 --> 00:10:08,760
you can use a much Dumber agent uh to uh

259
00:10:08,760 --> 00:10:10,980
to bend that traffic through the Lan and

260
00:10:10,980 --> 00:10:14,000
then back up into azure

261
00:10:14,160 --> 00:10:15,480
here's a little example of how this

262
00:10:15,480 --> 00:10:18,480
works so these are all just uh rest API

263
00:10:18,480 --> 00:10:20,519
endpoints or something fancy here but

264
00:10:20,519 --> 00:10:22,440
I'm just doing this in Powershell

265
00:10:22,440 --> 00:10:25,019
so first we do a post request to a

266
00:10:25,019 --> 00:10:27,540
particular URI where we submit the Run

267
00:10:27,540 --> 00:10:29,240
command job

268
00:10:29,240 --> 00:10:33,540
then when that's done we get a URI back

269
00:10:33,540 --> 00:10:35,820
from that endpoint that tells us here's

270
00:10:35,820 --> 00:10:37,200
where you need to go to check the status

271
00:10:37,200 --> 00:10:38,880
of this job

272
00:10:38,880 --> 00:10:40,800
and then we wait and we just keep

273
00:10:40,800 --> 00:10:42,720
checking that over and over and then

274
00:10:42,720 --> 00:10:46,500
usually be like after 10 to 60 Seconds

275
00:10:46,500 --> 00:10:50,160
you can actually get the job output so

276
00:10:50,160 --> 00:10:53,399
here's how we pull for the job

277
00:10:53,399 --> 00:10:55,800
and then when it's actually complete we

278
00:10:55,800 --> 00:10:57,120
can

279
00:10:57,120 --> 00:11:00,480
return the job output and I cut off that

280
00:11:00,480 --> 00:11:02,100
screenshot so you can't see what it

281
00:11:02,100 --> 00:11:03,720
actually was but we'll look at this

282
00:11:03,720 --> 00:11:06,380
video here and you'll be able to see it

283
00:11:06,380 --> 00:11:10,140
so I'm trying to use this thing

284
00:11:10,140 --> 00:11:12,740
nice

285
00:11:12,959 --> 00:11:14,519
so there we're getting a token that is

286
00:11:14,519 --> 00:11:16,200
scoped for Azure RM

287
00:11:16,200 --> 00:11:18,540
retarding or targeting a particular

288
00:11:18,540 --> 00:11:20,399
virtual machine and we're telling it we

289
00:11:20,399 --> 00:11:22,740
want to run the who am I command and as

290
00:11:22,740 --> 00:11:25,620
you could see in that job output

291
00:11:25,620 --> 00:11:29,300
sorry I'm getting used to this Clicker

292
00:11:29,399 --> 00:11:31,500
as you can see finally when the job is

293
00:11:31,500 --> 00:11:33,300
done

294
00:11:33,300 --> 00:11:35,100
we get the output and it's running as NT

295
00:11:35,100 --> 00:11:36,959
Authority systems so that's what that's

296
00:11:36,959 --> 00:11:39,959
the user that that process runs as

297
00:11:39,959 --> 00:11:42,720
honestly I can't think of a more ideal

298
00:11:42,720 --> 00:11:46,200
Trojan or rat uh so thank you to our

299
00:11:46,200 --> 00:11:47,640
friends at Microsoft for uh for giving

300
00:11:47,640 --> 00:11:49,019
us this is anybody here work at

301
00:11:49,019 --> 00:11:50,279
Microsoft

302
00:11:50,279 --> 00:11:53,540
anybody want to admit it

303
00:11:56,820 --> 00:11:58,620
okay

304
00:11:58,620 --> 00:12:00,000
there's a lot more out there to be

305
00:12:00,000 --> 00:12:01,320
discovered to be discovered with

306
00:12:01,320 --> 00:12:03,300
legitimate services that can be abused

307
00:12:03,300 --> 00:12:04,500
in this way

308
00:12:04,500 --> 00:12:06,959
Microsoft is also making changes to and

309
00:12:06,959 --> 00:12:10,399
adding features to this set of products

310
00:12:10,399 --> 00:12:12,899
all the time

311
00:12:12,899 --> 00:12:15,420
I think every month there is like a new

312
00:12:15,420 --> 00:12:17,579
compute service API that's either coming

313
00:12:17,579 --> 00:12:20,760
out or has changed fundamentally

314
00:12:20,760 --> 00:12:22,440
the research that we've done we've

315
00:12:22,440 --> 00:12:23,820
barely scratched the surface of what's

316
00:12:23,820 --> 00:12:25,140
out there

317
00:12:25,140 --> 00:12:28,200
there's a talk I did at insomnia hack in

318
00:12:28,200 --> 00:12:29,220
Geneva

319
00:12:29,220 --> 00:12:31,740
that talks through how you can do this

320
00:12:31,740 --> 00:12:33,500
kind of research yourself

321
00:12:33,500 --> 00:12:36,959
to discover what these services are how

322
00:12:36,959 --> 00:12:39,540
they can be abused and how to create

323
00:12:39,540 --> 00:12:43,139
your own Easy POC to

324
00:12:43,139 --> 00:12:46,260
um uh to prove out that that thing

325
00:12:46,260 --> 00:12:47,880
actually can be abused and understand it

326
00:12:47,880 --> 00:12:49,620
and then on the Spectros blog we've

327
00:12:49,620 --> 00:12:51,779
covered like function apps logic apps

328
00:12:51,779 --> 00:12:53,519
automation accounts and some other stuff

329
00:12:53,519 --> 00:12:55,740
so those links are there

330
00:12:55,740 --> 00:12:57,420
okay

331
00:12:57,420 --> 00:12:59,100
now let's talk about abusing alternative

332
00:12:59,100 --> 00:13:01,620
authentication mechanisms this is a

333
00:13:01,620 --> 00:13:02,880
really fun one because some of this is

334
00:13:02,880 --> 00:13:03,980
kind of new

335
00:13:03,980 --> 00:13:07,560
and uh everything that I've seen so far

336
00:13:07,560 --> 00:13:09,660
I think I've seen one resource out there

337
00:13:09,660 --> 00:13:11,040
that has talked about abusing these

338
00:13:11,040 --> 00:13:13,139
Services everything else is just about

339
00:13:13,139 --> 00:13:15,420
like how wonderful and magical

340
00:13:15,420 --> 00:13:17,519
passwordless authentication is and how

341
00:13:17,519 --> 00:13:19,019
it's the future and everybody should be

342
00:13:19,019 --> 00:13:20,519
doing it and all that

343
00:13:20,519 --> 00:13:22,860
well guess what we as an attacker we can

344
00:13:22,860 --> 00:13:24,660
abuse these legitimate Services as well

345
00:13:24,660 --> 00:13:27,480
for our own evil purposes

346
00:13:27,480 --> 00:13:29,760
we're going to talk about two of these

347
00:13:29,760 --> 00:13:32,339
we're going to talk about SMS and we're

348
00:13:32,339 --> 00:13:33,660
also going to talk about certificate

349
00:13:33,660 --> 00:13:36,019
base authentication there are other

350
00:13:36,019 --> 00:13:38,160
passwordless authentication mechanisms

351
00:13:38,160 --> 00:13:40,260
as well and these are future research

352
00:13:40,260 --> 00:13:43,139
areas for us phyto2 Microsoft

353
00:13:43,139 --> 00:13:44,760
authenticator and something called

354
00:13:44,760 --> 00:13:47,339
temporary access pass

355
00:13:47,339 --> 00:13:50,720
first let's talk about SMS

356
00:13:52,139 --> 00:13:54,660
when you have an Azure active directory

357
00:13:54,660 --> 00:13:57,360
tenant there is something called a trust

358
00:13:57,360 --> 00:14:00,540
boundary that is established around that

359
00:14:00,540 --> 00:14:01,740
tenant

360
00:14:01,740 --> 00:14:04,200
and what that means is that any resource

361
00:14:04,200 --> 00:14:06,240
that lives in that tenant

362
00:14:06,240 --> 00:14:08,459
if you own that tenant you own

363
00:14:08,459 --> 00:14:11,820
everything in that trust boundary

364
00:14:11,820 --> 00:14:13,980
what it also means is that by default

365
00:14:13,980 --> 00:14:16,860
that trust boundary remains

366
00:14:16,860 --> 00:14:20,459
solid like a like a wall around a or

367
00:14:20,459 --> 00:14:22,860
like a moat I guess you could say

368
00:14:22,860 --> 00:14:25,800
but we can invite people in across that

369
00:14:25,800 --> 00:14:28,019
trust boundary and we can create trust

370
00:14:28,019 --> 00:14:30,000
relationships admins do this all the

371
00:14:30,000 --> 00:14:33,300
time for legitimate purposes we can do

372
00:14:33,300 --> 00:14:35,100
this for evil purposes depending on how

373
00:14:35,100 --> 00:14:36,899
much privilege we have

374
00:14:36,899 --> 00:14:39,720
during our attack path

375
00:14:39,720 --> 00:14:42,420
is anybody familiar with like on-prem

376
00:14:42,420 --> 00:14:45,240
active directory if so a good analogy

377
00:14:45,240 --> 00:14:47,820
would be like an active directory domain

378
00:14:47,820 --> 00:14:50,579
or rather a forest an active directory

379
00:14:50,579 --> 00:14:53,339
Forest establishes a trust boundary not

380
00:14:53,339 --> 00:14:55,920
a domain a forest

381
00:14:55,920 --> 00:14:57,899
so in this example we have a tenant that

382
00:14:57,899 --> 00:15:02,279
contains a Azure active directory user

383
00:15:02,279 --> 00:15:05,579
and as the attacker we are going to add

384
00:15:05,579 --> 00:15:09,300
a phone number to this user's object as

385
00:15:09,300 --> 00:15:12,600
an alternative authentication mechanism

386
00:15:12,600 --> 00:15:14,579
this means that we can authenticate not

387
00:15:14,579 --> 00:15:17,120
with a password but with a phone

388
00:15:17,120 --> 00:15:20,339
with an SMS challenge

389
00:15:20,339 --> 00:15:21,779
what this

390
00:15:21,779 --> 00:15:24,199
creates is kind of this limited

391
00:15:24,199 --> 00:15:27,180
Federated identity Trust

392
00:15:27,180 --> 00:15:31,440
so the tenant trusts a phone

393
00:15:31,440 --> 00:15:34,920
to be an authentication Authority for

394
00:15:34,920 --> 00:15:37,440
this particular user

395
00:15:37,440 --> 00:15:39,600
so imagine all the possibilities with

396
00:15:39,600 --> 00:15:41,399
adversaries targeting

397
00:15:41,399 --> 00:15:45,320
telcos and targeting mobile uh Carrier

398
00:15:45,320 --> 00:15:48,600
Services and companies

399
00:15:48,600 --> 00:15:52,139
owning a phone is not that hard

400
00:15:52,139 --> 00:15:54,899
and uh so there's risk not only from the

401
00:15:54,899 --> 00:15:56,639
perspective of an admin doing this

402
00:15:56,639 --> 00:15:59,399
legitimately but also this being planted

403
00:15:59,399 --> 00:16:01,980
by an adversary and ignored and never

404
00:16:01,980 --> 00:16:05,480
audited and never found

405
00:16:06,300 --> 00:16:09,380
so here's how this works

406
00:16:11,100 --> 00:16:14,519
in this video we are going to install

407
00:16:14,519 --> 00:16:18,360
our back door on a user so we are

408
00:16:18,360 --> 00:16:20,040
getting a token that we can use to

409
00:16:20,040 --> 00:16:22,800
authenticate to the tenant here

410
00:16:22,800 --> 00:16:25,740
then we're constructing a Json body

411
00:16:25,740 --> 00:16:29,100
uh so we're saying that SMS

412
00:16:29,100 --> 00:16:31,440
authentication method configuration

413
00:16:31,440 --> 00:16:33,660
we're going to add the SMS

414
00:16:33,660 --> 00:16:36,600
authentication method to that user and

415
00:16:36,600 --> 00:16:38,880
the user is specified here in this part

416
00:16:38,880 --> 00:16:42,839
of the object this is the ID of the user

417
00:16:42,839 --> 00:16:46,519
this is the display name of the user

418
00:16:48,839 --> 00:16:51,180
so there we are enabling the user to

419
00:16:51,180 --> 00:16:55,680
actually use SMS based Authentication

420
00:16:55,680 --> 00:16:57,300
then the next step is we're actually

421
00:16:57,300 --> 00:17:00,060
going to add the phone number to that

422
00:17:00,060 --> 00:17:01,800
user

423
00:17:01,800 --> 00:17:05,880
which we're doing here so

424
00:17:05,880 --> 00:17:08,160
I filtered out the phone number because

425
00:17:08,160 --> 00:17:10,260
it's actually my phone number and I

426
00:17:10,260 --> 00:17:11,699
don't want a bunch of evil hackers to

427
00:17:11,699 --> 00:17:13,140
see my phone number

428
00:17:13,140 --> 00:17:15,720
but now

429
00:17:15,720 --> 00:17:19,280
oops I screwed that up

430
00:17:19,439 --> 00:17:22,400
let's try this again

431
00:17:26,160 --> 00:17:28,439
nope

432
00:17:28,439 --> 00:17:30,000
okay we're gonna wait patiently for the

433
00:17:30,000 --> 00:17:32,660
video to catch up

434
00:17:44,220 --> 00:17:46,679
this is why you don't do live demos

435
00:17:46,679 --> 00:17:49,580
videos are better

436
00:17:51,600 --> 00:17:54,080
okay

437
00:17:54,360 --> 00:17:55,919
so at that point the back door is

438
00:17:55,919 --> 00:17:57,200
installed

439
00:17:57,200 --> 00:18:01,080
and we can go on so now that the back

440
00:18:01,080 --> 00:18:04,440
door is installed we can maintain access

441
00:18:04,440 --> 00:18:07,020
to this user so even if the user changes

442
00:18:07,020 --> 00:18:08,640
their password

443
00:18:08,640 --> 00:18:10,559
we are going to be able to log in and

444
00:18:10,559 --> 00:18:13,320
authenticate as that user just with the

445
00:18:13,320 --> 00:18:15,780
access that we have to a phone that

446
00:18:15,780 --> 00:18:19,020
we've implanted on that user

447
00:18:19,020 --> 00:18:21,600
the way you do this to actually use the

448
00:18:21,600 --> 00:18:22,679
back door

449
00:18:22,679 --> 00:18:25,980
is go to the Azure portal

450
00:18:25,980 --> 00:18:28,200
or some other kind of Office 365

451
00:18:28,200 --> 00:18:30,780
authentication uh

452
00:18:30,780 --> 00:18:32,220
uh page

453
00:18:32,220 --> 00:18:34,260
put in the phone number that you put on

454
00:18:34,260 --> 00:18:36,539
the user as the back door

455
00:18:36,539 --> 00:18:38,160
and then if you get this prompt select

456
00:18:38,160 --> 00:18:40,620
work thing it will send you a text

457
00:18:40,620 --> 00:18:42,360
message on your phone

458
00:18:42,360 --> 00:18:43,860
and then you

459
00:18:43,860 --> 00:18:47,640
put that code into this text box

460
00:18:47,640 --> 00:18:49,260
and then after you do that and hit sign

461
00:18:49,260 --> 00:18:52,200
in you are authenticated you can do this

462
00:18:52,200 --> 00:18:53,820
with the Azure portal GUI you can do

463
00:18:53,820 --> 00:18:56,280
this with the oauth token acquisition

464
00:18:56,280 --> 00:18:59,580
endpoints and the token exchange flow is

465
00:18:59,580 --> 00:19:02,840
also available to you after that

466
00:19:04,380 --> 00:19:06,900
and so next

467
00:19:06,900 --> 00:19:08,580
we're going to talk about

468
00:19:08,580 --> 00:19:10,380
uh

469
00:19:10,380 --> 00:19:12,480
uh let's go to the next slide there we

470
00:19:12,480 --> 00:19:14,700
go so here's everything that we just did

471
00:19:14,700 --> 00:19:17,580
but laid out in text form so the first

472
00:19:17,580 --> 00:19:19,740
step is we enabled SMS authentication

473
00:19:19,740 --> 00:19:21,780
for the entire tenant

474
00:19:21,780 --> 00:19:24,120
we activated a license for the Target

475
00:19:24,120 --> 00:19:25,679
user

476
00:19:25,679 --> 00:19:27,720
we enabled SMS authentication for the

477
00:19:27,720 --> 00:19:30,299
Target user and then we added our own

478
00:19:30,299 --> 00:19:32,700
attacker controlled phone number to the

479
00:19:32,700 --> 00:19:35,460
Target user's authentication methods

480
00:19:35,460 --> 00:19:38,640
in this first step this is the uh this

481
00:19:38,640 --> 00:19:40,200
is the atomic action that we actually

482
00:19:40,200 --> 00:19:43,500
took and I would say that

483
00:19:43,500 --> 00:19:45,720
99 of the time this action is going to

484
00:19:45,720 --> 00:19:47,039
be performed from an attacker control

485
00:19:47,039 --> 00:19:49,020
machine not a Defender control machine

486
00:19:49,020 --> 00:19:51,660
so EDR is not going to help in this

487
00:19:51,660 --> 00:19:53,700
circumstance

488
00:19:53,700 --> 00:19:55,740
the Privileges that you need here are

489
00:19:55,740 --> 00:19:57,480
pretty high you need a lot of privilege

490
00:19:57,480 --> 00:19:59,400
to be able to do this so you either need

491
00:19:59,400 --> 00:20:02,000
this Ms graph app role called

492
00:20:02,000 --> 00:20:04,080
policy.readwrite.authentication method

493
00:20:04,080 --> 00:20:06,419
or you need Global admin or the

494
00:20:06,419 --> 00:20:08,700
authentication policy administrator role

495
00:20:08,700 --> 00:20:11,640
that's a pretty high level of privilege

496
00:20:11,640 --> 00:20:13,679
there are artifacts created by this step

497
00:20:13,679 --> 00:20:16,260
as well so in the Azure activity logs

498
00:20:16,260 --> 00:20:17,700
there will be a log called

499
00:20:17,700 --> 00:20:20,039
authentication methods policy update

500
00:20:20,039 --> 00:20:22,080
that if you're a Defender you can start

501
00:20:22,080 --> 00:20:23,880
to collect those and you can start to

502
00:20:23,880 --> 00:20:27,860
parse those to see if an attacker or if

503
00:20:27,860 --> 00:20:32,039
a upset it admin or whoever is

504
00:20:32,039 --> 00:20:33,900
installing some kind of back door onto

505
00:20:33,900 --> 00:20:35,820
one of your users

506
00:20:35,820 --> 00:20:37,740
we activated a license for the Target

507
00:20:37,740 --> 00:20:40,679
user so we do a patch request to that

508
00:20:40,679 --> 00:20:41,940
URI

509
00:20:41,940 --> 00:20:45,360
this requires not as much privilege so a

510
00:20:45,360 --> 00:20:47,400
global admin can do this Global oven can

511
00:20:47,400 --> 00:20:49,380
do anything but also the user

512
00:20:49,380 --> 00:20:51,000
administrator role lets you do this the

513
00:20:51,000 --> 00:20:52,740
license administrator role lets you do

514
00:20:52,740 --> 00:20:54,840
this so these roles that are not going

515
00:20:54,840 --> 00:20:57,660
to be as well protected ideally as the

516
00:20:57,660 --> 00:21:00,299
global admin role can do these malicious

517
00:21:00,299 --> 00:21:01,740
actions

518
00:21:01,740 --> 00:21:04,260
this will create an artifact in Azure

519
00:21:04,260 --> 00:21:06,179
active active directory activity

520
00:21:06,179 --> 00:21:10,320
activity log called change user license

521
00:21:10,320 --> 00:21:12,660
the third step we did a patch to that

522
00:21:12,660 --> 00:21:14,100
URI

523
00:21:14,100 --> 00:21:17,340
you need that privilege in order to do

524
00:21:17,340 --> 00:21:19,500
that

525
00:21:19,500 --> 00:21:23,220
and it creates that artifact

526
00:21:23,220 --> 00:21:25,980
the fourth step that we did we actually

527
00:21:25,980 --> 00:21:27,660
added the phone number to the user's

528
00:21:27,660 --> 00:21:31,380
object that's a post method to that URI

529
00:21:31,380 --> 00:21:33,299
and the level of privilege that you need

530
00:21:33,299 --> 00:21:35,940
here is kind of similar to one before

531
00:21:35,940 --> 00:21:37,799
and it will create that artifact there

532
00:21:37,799 --> 00:21:40,200
now what's important to understand

533
00:21:40,200 --> 00:21:42,419
is that

534
00:21:42,419 --> 00:21:44,880
along that path

535
00:21:44,880 --> 00:21:47,640
we could have started at step four or we

536
00:21:47,640 --> 00:21:49,260
could have started a step two it just

537
00:21:49,260 --> 00:21:53,220
depends on what licenses the target user

538
00:21:53,220 --> 00:21:55,260
already has it depends on if SMS

539
00:21:55,260 --> 00:21:58,200
authentication is already turned on for

540
00:21:58,200 --> 00:21:59,640
the tenant

541
00:21:59,640 --> 00:22:01,500
and it depends on whether the user

542
00:22:01,500 --> 00:22:03,600
already has SMS authentication enabled

543
00:22:03,600 --> 00:22:06,539
if those things are already set then you

544
00:22:06,539 --> 00:22:08,220
don't have to go through all those steps

545
00:22:08,220 --> 00:22:11,280
you can just start at the end you can

546
00:22:11,280 --> 00:22:13,620
start at step four by just making this

547
00:22:13,620 --> 00:22:16,440
one simple request so this back door can

548
00:22:16,440 --> 00:22:18,679
be installed with one

549
00:22:18,679 --> 00:22:21,960
uh post request to a particular URI just

550
00:22:21,960 --> 00:22:23,880
depending on how much privilege the

551
00:22:23,880 --> 00:22:25,919
attacker has and what configurations

552
00:22:25,919 --> 00:22:28,440
already exist

553
00:22:28,440 --> 00:22:31,500
you can find these back doors using

554
00:22:31,500 --> 00:22:33,720
various tools this is how you can do it

555
00:22:33,720 --> 00:22:36,900
with a tool that I created called bark

556
00:22:36,900 --> 00:22:39,419
and so to do that you acquire a token

557
00:22:39,419 --> 00:22:41,880
for Ms graph as your legitimate audit

558
00:22:41,880 --> 00:22:43,559
account whatever doesn't need a whole

559
00:22:43,559 --> 00:22:44,880
lot of privilege

560
00:22:44,880 --> 00:22:47,820
create a user's object and Powershell by

561
00:22:47,820 --> 00:22:49,980
collecting all the users from the tenant

562
00:22:49,980 --> 00:22:54,000
and then just filter by what users have

563
00:22:54,000 --> 00:22:55,740
a phone number specified as an

564
00:22:55,740 --> 00:22:58,020
alternative authentication method

565
00:22:58,020 --> 00:23:00,419
and so by doing this on a regular basis

566
00:23:00,419 --> 00:23:03,539
maybe you can find these back doors as

567
00:23:03,539 --> 00:23:06,140
they are created

568
00:23:06,179 --> 00:23:08,100
next let's talk about certificate-based

569
00:23:08,100 --> 00:23:09,840
Authentication

570
00:23:09,840 --> 00:23:11,400
all of this is going to be based on this

571
00:23:11,400 --> 00:23:13,620
blog post right here by this super smart

572
00:23:13,620 --> 00:23:16,220
guy named mariu sobakin

573
00:23:16,220 --> 00:23:19,080
so Mario's did this blog post talking

574
00:23:19,080 --> 00:23:22,740
about CBA as a potential backdoor method

575
00:23:22,740 --> 00:23:25,080
uh I went through the process of

576
00:23:25,080 --> 00:23:26,580
actually doing this in a test

577
00:23:26,580 --> 00:23:28,799
environment and I almost pulled my hair

578
00:23:28,799 --> 00:23:31,260
out because it is so incredibly hard to

579
00:23:31,260 --> 00:23:32,340
actually get right

580
00:23:32,340 --> 00:23:34,620
but uh yeah let's let's see how we do

581
00:23:34,620 --> 00:23:35,940
that there's also a link to his blog

582
00:23:35,940 --> 00:23:37,500
post here if you want to see the details

583
00:23:37,500 --> 00:23:39,539
uh that he wrote up

584
00:23:39,539 --> 00:23:41,400
so again we have this trust boundary

585
00:23:41,400 --> 00:23:45,080
okay uh we can have a evil

586
00:23:45,080 --> 00:23:47,100
attacker-controlled root certificate

587
00:23:47,100 --> 00:23:50,100
Authority that exists outside of the

588
00:23:50,100 --> 00:23:51,960
purview of the Defenders

589
00:23:51,960 --> 00:23:54,480
and we can install that as a trusted

590
00:23:54,480 --> 00:23:56,280
certificate Authority on the Azure

591
00:23:56,280 --> 00:23:58,080
active directory tenant

592
00:23:58,080 --> 00:24:00,960
that then becomes a completely Federated

593
00:24:00,960 --> 00:24:03,720
identity trust where the tenant will

594
00:24:03,720 --> 00:24:06,780
totally trust that CA

595
00:24:06,780 --> 00:24:10,159
so then that CA becomes an alternative

596
00:24:10,159 --> 00:24:12,659
Authority for

597
00:24:12,659 --> 00:24:14,960
every user and every service principal

598
00:24:14,960 --> 00:24:17,580
uh in the environment depending on

599
00:24:17,580 --> 00:24:20,899
depending on the configuration

600
00:24:20,940 --> 00:24:24,720
so the first step here is to create a

601
00:24:24,720 --> 00:24:26,580
certificate Authority

602
00:24:26,580 --> 00:24:28,020
who here has created their own

603
00:24:28,020 --> 00:24:30,419
certificate Authority

604
00:24:30,419 --> 00:24:33,659
few people okay it's not that hard

605
00:24:33,659 --> 00:24:35,700
um so you can do this with like openssl

606
00:24:35,700 --> 00:24:37,980
you can do this with adcs there are

607
00:24:37,980 --> 00:24:39,059
various different ways that you can

608
00:24:39,059 --> 00:24:41,640
create your own CA so in this screenshot

609
00:24:41,640 --> 00:24:44,640
we've already created the CA and we are

610
00:24:44,640 --> 00:24:47,640
printing the cas certificate so this is

611
00:24:47,640 --> 00:24:50,100
the public certificate for the ca

612
00:24:50,100 --> 00:24:52,559
and what we're going to do with that is

613
00:24:52,559 --> 00:24:54,780
we are going to upload it to the Azure

614
00:24:54,780 --> 00:24:57,539
active directory tenant via a particular

615
00:24:57,539 --> 00:25:00,539
endpoint

616
00:25:02,220 --> 00:25:04,400
foreign

617
00:25:09,480 --> 00:25:11,100
so here

618
00:25:11,100 --> 00:25:13,200
we get a token for a user that has a

619
00:25:13,200 --> 00:25:15,059
privilege to do this

620
00:25:15,059 --> 00:25:17,580
we have a Powershell variable that we're

621
00:25:17,580 --> 00:25:20,880
assigning to the value of the cert

622
00:25:20,880 --> 00:25:27,179
we build this Json payload to match the

623
00:25:27,179 --> 00:25:31,380
expected input that the API expects

624
00:25:31,380 --> 00:25:34,620
and then we post that to this URI right

625
00:25:34,620 --> 00:25:35,580
here

626
00:25:35,580 --> 00:25:38,100
the end point here is certificate based

627
00:25:38,100 --> 00:25:40,260
auth configuration and in the output

628
00:25:40,260 --> 00:25:43,020
that we get tells us that this has been

629
00:25:43,020 --> 00:25:45,600
installed as a root Authority on the

630
00:25:45,600 --> 00:25:48,559
Azure ad tenant

631
00:25:58,320 --> 00:26:01,640
then here we are enabling

632
00:26:01,640 --> 00:26:03,360
certificate-based authentication and

633
00:26:03,360 --> 00:26:06,240
we're just doing it for all users in the

634
00:26:06,240 --> 00:26:08,100
Azure ad tenant you can configure this

635
00:26:08,100 --> 00:26:09,960
like on a per user basis or a per

636
00:26:09,960 --> 00:26:12,059
service principle basis but here we're

637
00:26:12,059 --> 00:26:13,380
just saying that it's going to be valid

638
00:26:13,380 --> 00:26:16,500
for all users and we're also saying that

639
00:26:16,500 --> 00:26:19,500
the property in the ticket that will

640
00:26:19,500 --> 00:26:21,419
identify the user

641
00:26:21,419 --> 00:26:23,580
is going to be its user principal name

642
00:26:23,580 --> 00:26:27,240
so this would be like Andy echoparty.com

643
00:26:27,240 --> 00:26:29,760
it would be that kind of format

644
00:26:29,760 --> 00:26:31,919
that lets Azure ad know that when it is

645
00:26:31,919 --> 00:26:33,840
inspecting that ticket it knows what to

646
00:26:33,840 --> 00:26:36,960
look for to make sure that the ticket is

647
00:26:36,960 --> 00:26:40,320
valid for authenticating the Target user

648
00:26:40,320 --> 00:26:42,980
okay

649
00:26:45,419 --> 00:26:48,960
now that the back door is installed here

650
00:26:48,960 --> 00:26:51,720
is how we actually use it and here we

651
00:26:51,720 --> 00:26:54,059
are operating from like an attacker VM

652
00:26:54,059 --> 00:26:58,639
or like our own evil hacker machine

653
00:27:00,659 --> 00:27:02,220
the configuration

654
00:27:02,220 --> 00:27:04,320
for openssl

655
00:27:04,320 --> 00:27:06,600
needs to look something like that

656
00:27:06,600 --> 00:27:08,880
I'm not going to pause this but

657
00:27:08,880 --> 00:27:10,919
yeah it needs to look like that and it

658
00:27:10,919 --> 00:27:13,740
took me a long time to figure that out

659
00:27:13,740 --> 00:27:16,980
so we will assign user principal name to

660
00:27:16,980 --> 00:27:18,960
our user that we're targeting we'll

661
00:27:18,960 --> 00:27:23,120
create a a CSR

662
00:27:23,940 --> 00:27:26,340
and then we need to sign that CSR with

663
00:27:26,340 --> 00:27:29,220
the ca the ca is on this computer so we

664
00:27:29,220 --> 00:27:32,120
just sign it here

665
00:27:33,539 --> 00:27:36,360
then we create a pfx file and this is

666
00:27:36,360 --> 00:27:37,799
the file that we will actually be using

667
00:27:37,799 --> 00:27:41,360
to authenticate as that user

668
00:27:43,320 --> 00:27:47,600
so we'll install that cert in Windows

669
00:27:47,900 --> 00:27:50,700
or reload the cert manager nmc and we

670
00:27:50,700 --> 00:27:53,279
can see that that cert is there and you

671
00:27:53,279 --> 00:27:55,500
can see that the user principal name is

672
00:27:55,500 --> 00:27:59,640
part of the subject alternative names uh

673
00:27:59,640 --> 00:28:02,220
property on the ticket

674
00:28:02,220 --> 00:28:06,500
we'll open the portal GUI in a browser

675
00:28:06,539 --> 00:28:08,580
type out the username that we want to

676
00:28:08,580 --> 00:28:10,919
log in as select the cert that we just

677
00:28:10,919 --> 00:28:12,419
created

678
00:28:12,419 --> 00:28:14,700
and now we are logged in

679
00:28:14,700 --> 00:28:17,460
again this will persist through password

680
00:28:17,460 --> 00:28:18,960
changes

681
00:28:18,960 --> 00:28:21,360
and so it doesn't matter like if the

682
00:28:21,360 --> 00:28:22,860
user is changing their password and

683
00:28:22,860 --> 00:28:25,080
depending on configuration you can also

684
00:28:25,080 --> 00:28:27,539
you can also use this to bypass MFA

685
00:28:27,539 --> 00:28:29,940
configurations given the right given the

686
00:28:29,940 --> 00:28:32,539
right circumstance

687
00:28:35,940 --> 00:28:37,980
that's the video we just watched

688
00:28:37,980 --> 00:28:40,980
so there's only two steps to this

689
00:28:40,980 --> 00:28:43,860
first is we added a root CA cert to the

690
00:28:43,860 --> 00:28:46,140
Azure ad tenant and then we enabled cert

691
00:28:46,140 --> 00:28:48,000
based authentication for all users in

692
00:28:48,000 --> 00:28:49,440
that tenant

693
00:28:49,440 --> 00:28:53,460
this first step we do a post to that URI

694
00:28:53,460 --> 00:28:56,159
we need that level of privilege so it's

695
00:28:56,159 --> 00:28:59,279
a pretty high level of privilege

696
00:28:59,279 --> 00:29:01,440
and it will create that artifact in the

697
00:29:01,440 --> 00:29:03,539
Azure ad activity log

698
00:29:03,539 --> 00:29:05,279
I say it's a high level of privilege but

699
00:29:05,279 --> 00:29:07,700
to be honest with you

700
00:29:07,700 --> 00:29:10,020
policy.readwrite.authentication method

701
00:29:10,020 --> 00:29:12,240
uh I would say it's probably not as well

702
00:29:12,240 --> 00:29:13,799
monitored as it should be because I

703
00:29:13,799 --> 00:29:16,080
don't know that it's understood that

704
00:29:16,080 --> 00:29:17,760
that privilege allows you to do

705
00:29:17,760 --> 00:29:19,559
something like this

706
00:29:19,559 --> 00:29:21,000
so you may not be able to escalate the

707
00:29:21,000 --> 00:29:22,320
global admin

708
00:29:22,320 --> 00:29:25,380
but you can escalate to this privilege

709
00:29:25,380 --> 00:29:26,760
and then you can escalate to Global

710
00:29:26,760 --> 00:29:28,860
admin by targeting one of them with cert

711
00:29:28,860 --> 00:29:31,080
base authentication so this can be a way

712
00:29:31,080 --> 00:29:32,760
to escalate yourself higher than you

713
00:29:32,760 --> 00:29:35,159
would be able to otherwise

714
00:29:35,159 --> 00:29:37,320
second step is we enabled cert based

715
00:29:37,320 --> 00:29:38,940
auth for all the users

716
00:29:38,940 --> 00:29:42,360
we do a patch to that URI

717
00:29:42,360 --> 00:29:43,919
the privilege is required so if you're

718
00:29:43,919 --> 00:29:45,360
doing this as a service principal and

719
00:29:45,360 --> 00:29:46,440
you're doing this with application

720
00:29:46,440 --> 00:29:48,779
permissions the documentation says that

721
00:29:48,779 --> 00:29:50,940
this is quote unquote not supported

722
00:29:50,940 --> 00:29:52,980
I'm not quite sure if that's true but I

723
00:29:52,980 --> 00:29:54,840
need to test exhaustively and see if it

724
00:29:54,840 --> 00:29:56,100
actually is true

725
00:29:56,100 --> 00:29:57,960
otherwise you need either Global admin

726
00:29:57,960 --> 00:30:00,299
or authentication policy admin again

727
00:30:00,299 --> 00:30:01,860
that second role is not going to be as

728
00:30:01,860 --> 00:30:04,260
well protected as Global admin

729
00:30:04,260 --> 00:30:06,059
and it will create that artifact when

730
00:30:06,059 --> 00:30:08,779
you do that action

731
00:30:11,279 --> 00:30:12,539
okay

732
00:30:12,539 --> 00:30:15,240
so last persistent access mechanism that

733
00:30:15,240 --> 00:30:16,380
we're going to talk about

734
00:30:16,380 --> 00:30:18,840
is something that I refer to as implicit

735
00:30:18,840 --> 00:30:22,220
trust via oidc

736
00:30:22,980 --> 00:30:25,380
again we're starting off the way we have

737
00:30:25,380 --> 00:30:27,779
with the other two we have an Azure ad

738
00:30:27,779 --> 00:30:31,500
trust boundary that is solid not pierced

739
00:30:31,500 --> 00:30:34,740
and in this Azure ad tenant within that

740
00:30:34,740 --> 00:30:36,480
trust boundary we have the tenant object

741
00:30:36,480 --> 00:30:38,640
and we have a service principle

742
00:30:38,640 --> 00:30:41,399
a service principle is

743
00:30:41,399 --> 00:30:43,440
a principle

744
00:30:43,440 --> 00:30:46,260
that is able to authenticate to Azure ad

745
00:30:46,260 --> 00:30:48,240
it's able to get tokens and it's able to

746
00:30:48,240 --> 00:30:51,000
do things like it can do privileged

747
00:30:51,000 --> 00:30:52,620
actions it can read from privileged

748
00:30:52,620 --> 00:30:55,080
endpoints and so you can think of a

749
00:30:55,080 --> 00:30:57,240
service Principle as being kind of

750
00:30:57,240 --> 00:30:59,880
analogous to a user kind of there there

751
00:30:59,880 --> 00:31:02,580
are differences in how they behave but

752
00:31:02,580 --> 00:31:04,020
they just think of it as a user

753
00:31:04,020 --> 00:31:07,620
basically or like a service account

754
00:31:07,620 --> 00:31:10,080
so here what we are going to do is we're

755
00:31:10,080 --> 00:31:12,059
going to Target the service principle

756
00:31:12,059 --> 00:31:13,799
specifically

757
00:31:13,799 --> 00:31:17,279
by configuring an oidc connector

758
00:31:17,279 --> 00:31:21,179
from a external GitHub repository

759
00:31:21,179 --> 00:31:24,120
to this particular service principle and

760
00:31:24,120 --> 00:31:26,159
installing this back door

761
00:31:26,159 --> 00:31:28,799
we don't touch the tenant at all

762
00:31:28,799 --> 00:31:30,240
so this one is actually one of my

763
00:31:30,240 --> 00:31:32,399
favorites

764
00:31:32,399 --> 00:31:34,279
what that will do is that will create

765
00:31:34,279 --> 00:31:38,460
this kind of limited implicit Trust

766
00:31:38,460 --> 00:31:41,580
from the tenant to this GitHub repo

767
00:31:41,580 --> 00:31:44,580
if you were to look at the tenant object

768
00:31:44,580 --> 00:31:46,080
and look at like the alternative

769
00:31:46,080 --> 00:31:47,820
authentication mechanisms or look at the

770
00:31:47,820 --> 00:31:50,159
security panel this GitHub repo won't

771
00:31:50,159 --> 00:31:51,899
show up anywhere if you're trying to

772
00:31:51,899 --> 00:31:54,299
audit for this it will only show up on

773
00:31:54,299 --> 00:31:56,520
the service principle

774
00:31:56,520 --> 00:31:59,100
uh Azure ad tenants that are around long

775
00:31:59,100 --> 00:31:59,940
enough

776
00:31:59,940 --> 00:32:01,980
the number of server service principles

777
00:32:01,980 --> 00:32:03,659
that exist in a tenant can be in the

778
00:32:03,659 --> 00:32:06,179
hundreds or even in the thousands so

779
00:32:06,179 --> 00:32:07,620
auditing for this kind of thing can be

780
00:32:07,620 --> 00:32:11,239
very very hard without automation

781
00:32:11,940 --> 00:32:17,779
here is how we do this so in this video

782
00:32:18,059 --> 00:32:21,120
we have already installed the back door

783
00:32:21,120 --> 00:32:22,679
I'll show you details on how we did that

784
00:32:22,679 --> 00:32:24,720
before

785
00:32:24,720 --> 00:32:26,460
on the GitHub repo

786
00:32:26,460 --> 00:32:30,059
we are going to run this yaml file

787
00:32:30,059 --> 00:32:33,960
uh through a GitHub uh jobs worker or

788
00:32:33,960 --> 00:32:35,760
whatever it's called a GitHub actions

789
00:32:35,760 --> 00:32:37,740
worker

790
00:32:37,740 --> 00:32:40,020
in this example at the very bottom there

791
00:32:40,020 --> 00:32:41,279
you can see that it is running the

792
00:32:41,279 --> 00:32:44,100
command Azad group list

793
00:32:44,100 --> 00:32:47,520
so this repo has this yaml file that

794
00:32:47,520 --> 00:32:49,140
doesn't have credentials for the service

795
00:32:49,140 --> 00:32:51,179
principle in it there are no creds for

796
00:32:51,179 --> 00:32:53,640
the service principle the fact that the

797
00:32:53,640 --> 00:32:56,700
repo is making the request to the Token

798
00:32:56,700 --> 00:32:58,559
acquisition endpoint is enough that it

799
00:32:58,559 --> 00:33:01,140
can get a token

800
00:33:01,140 --> 00:33:05,159
so we changed that command to export and

801
00:33:05,159 --> 00:33:07,440
print the token

802
00:33:07,440 --> 00:33:10,919
uh from uh from the result of this

803
00:33:10,919 --> 00:33:14,279
GitHub actions uh job as you can see

804
00:33:14,279 --> 00:33:16,080
this is actually kind of censored out

805
00:33:16,080 --> 00:33:18,059
there are three stars there instead of

806
00:33:18,059 --> 00:33:19,380
the token

807
00:33:19,380 --> 00:33:22,200
a GitHub action worker is an ephemeral

808
00:33:22,200 --> 00:33:24,480
virtual machine so you can do anything

809
00:33:24,480 --> 00:33:26,820
on that thing it's just running Bash

810
00:33:26,820 --> 00:33:29,960
and so we can we can evade this

811
00:33:29,960 --> 00:33:32,519
obfuscation by introducing our own

812
00:33:32,519 --> 00:33:34,200
obfuscation

813
00:33:34,200 --> 00:33:36,740
so it will defeat their mechanism

814
00:33:36,740 --> 00:33:39,480
basically with itself

815
00:33:39,480 --> 00:33:42,899
so we will pipe the result of that token

816
00:33:42,899 --> 00:33:46,500
acquisition command to base64

817
00:33:46,500 --> 00:33:48,360
and then we will

818
00:33:48,360 --> 00:33:52,860
uh print out the base64 payload in the

819
00:33:52,860 --> 00:33:54,179
GitHub action

820
00:33:54,179 --> 00:33:56,760
when that is done

821
00:33:56,760 --> 00:34:00,299
we can see the result and it's there so

822
00:34:00,299 --> 00:34:03,419
this is the base64 encoded

823
00:34:03,419 --> 00:34:06,360
Ms graph scoped token for the service

824
00:34:06,360 --> 00:34:08,580
principle we never supplied any

825
00:34:08,580 --> 00:34:10,500
credential whatsoever we don't need the

826
00:34:10,500 --> 00:34:12,418
credential when we have an oidc

827
00:34:12,418 --> 00:34:13,918
connector

828
00:34:13,918 --> 00:34:16,859
if we D base64 this you can see we have

829
00:34:16,859 --> 00:34:18,899
the token there

830
00:34:18,899 --> 00:34:20,580
this token is what we use to

831
00:34:20,580 --> 00:34:22,199
authenticate to all these different API

832
00:34:22,199 --> 00:34:24,239
endpoints so at this point we

833
00:34:24,239 --> 00:34:26,280
effectively are authenticated to Azure

834
00:34:26,280 --> 00:34:29,339
ad as the service principle

835
00:34:29,339 --> 00:34:33,480
we can prove that just very simply by uh

836
00:34:33,480 --> 00:34:35,820
collecting the service principles from

837
00:34:35,820 --> 00:34:37,080
the tenant and the selecting the first

838
00:34:37,080 --> 00:34:38,399
one just to prove that we are

839
00:34:38,399 --> 00:34:41,960
authenticated to the to the tenant

840
00:34:48,980 --> 00:34:52,800
this is how we install the back door

841
00:34:52,800 --> 00:34:54,480
we get a token

842
00:34:54,480 --> 00:34:57,960
we create a Json payload and that was it

843
00:34:57,960 --> 00:35:00,060
that actually went really fast it's just

844
00:35:00,060 --> 00:35:01,859
one simple request

845
00:35:01,859 --> 00:35:05,598
so let's pause this when it finishes

846
00:35:06,180 --> 00:35:07,740
okay

847
00:35:07,740 --> 00:35:10,380
so as the attacker we are acquiring a

848
00:35:10,380 --> 00:35:11,460
token

849
00:35:11,460 --> 00:35:14,780
we're creating this Json payload to

850
00:35:14,780 --> 00:35:17,880
uh add

851
00:35:17,880 --> 00:35:20,280
the GitHub repository

852
00:35:20,280 --> 00:35:22,260
the GitHub organization

853
00:35:22,260 --> 00:35:26,000
and the branch name

854
00:35:27,900 --> 00:35:30,960
to the service Principle as an oidc

855
00:35:30,960 --> 00:35:32,880
connection

856
00:35:32,880 --> 00:35:35,700
then we make that request here

857
00:35:35,700 --> 00:35:39,060
and the output is that uh it just

858
00:35:39,060 --> 00:35:40,320
confirms back to us what we just wrote

859
00:35:40,320 --> 00:35:42,420
to it some API endpoints will do that

860
00:35:42,420 --> 00:35:44,160
most of them do not most of the time you

861
00:35:44,160 --> 00:35:45,480
don't get any output from these

862
00:35:45,480 --> 00:35:46,740
endpoints

863
00:35:46,740 --> 00:35:48,480
you'll get like a 200 and you know that

864
00:35:48,480 --> 00:35:50,339
it was okay

865
00:35:50,339 --> 00:35:52,440
so installing this back door is super

866
00:35:52,440 --> 00:35:55,099
easy it is super fast it is one request

867
00:35:55,099 --> 00:35:59,339
and it is very hard to find uh by

868
00:35:59,339 --> 00:36:04,079
Defenders so One Step all we did was not

869
00:36:04,079 --> 00:36:05,700
that

870
00:36:05,700 --> 00:36:07,560
nope that's not what we did

871
00:36:07,560 --> 00:36:09,720
so I need to fix that slide all we did

872
00:36:09,720 --> 00:36:12,660
in Step One is we added the

873
00:36:12,660 --> 00:36:15,060
oadc connector information to the

874
00:36:15,060 --> 00:36:16,980
service principle

875
00:36:16,980 --> 00:36:19,380
that is the correct URI for what we just

876
00:36:19,380 --> 00:36:21,660
did so we're posting to the Federated

877
00:36:21,660 --> 00:36:24,839
identity credentials endpoint for an app

878
00:36:24,839 --> 00:36:26,640
registration actually not the service

879
00:36:26,640 --> 00:36:28,859
principle

880
00:36:28,859 --> 00:36:30,240
I can talk more about that if there's a

881
00:36:30,240 --> 00:36:32,160
question about that later but it's

882
00:36:32,160 --> 00:36:33,660
really confusing the relation between

883
00:36:33,660 --> 00:36:35,640
those objects

884
00:36:35,640 --> 00:36:37,500
so the level of privilege you need here

885
00:36:37,500 --> 00:36:40,260
is much lower than what you need for the

886
00:36:40,260 --> 00:36:41,700
other backdoor Primitives that we talked

887
00:36:41,700 --> 00:36:42,660
about

888
00:36:42,660 --> 00:36:44,599
you either need

889
00:36:44,599 --> 00:36:46,440
application.readwrite.all which admins

890
00:36:46,440 --> 00:36:48,000
give out like candy

891
00:36:48,000 --> 00:36:49,859
or you need one of these Azure admin

892
00:36:49,859 --> 00:36:52,200
roles like Cloud application

893
00:36:52,200 --> 00:36:53,700
administrator or application

894
00:36:53,700 --> 00:36:54,900
administrator

895
00:36:54,900 --> 00:36:56,880
when you start auditing Azure ad tenants

896
00:36:56,880 --> 00:36:58,380
or you start attacking them or whatever

897
00:36:58,380 --> 00:37:00,359
you're going to see people have this

898
00:37:00,359 --> 00:37:01,380
role

899
00:37:01,380 --> 00:37:03,599
all the time and everywhere not only

900
00:37:03,599 --> 00:37:05,520
users but also third-party applications

901
00:37:05,520 --> 00:37:07,920
ask for these privileges too so this

902
00:37:07,920 --> 00:37:10,320
back door is the most accessible

903
00:37:10,320 --> 00:37:12,660
is as simplest to install and it's the

904
00:37:12,660 --> 00:37:14,460
hardest for Defenders to find so this

905
00:37:14,460 --> 00:37:16,560
one that's why I like this one the most

906
00:37:16,560 --> 00:37:18,660
here's the artifact that's created a log

907
00:37:18,660 --> 00:37:20,280
that says quote-unquote update

908
00:37:20,280 --> 00:37:21,359
application

909
00:37:21,359 --> 00:37:24,660
that's helpful uh or not so you actually

910
00:37:24,660 --> 00:37:26,280
have to parse this event log to

911
00:37:26,280 --> 00:37:28,680
understand what property was changed how

912
00:37:28,680 --> 00:37:30,180
has it changed what did it look like

913
00:37:30,180 --> 00:37:33,540
before so detecting this

914
00:37:33,540 --> 00:37:36,000
is very hard to do

915
00:37:36,000 --> 00:37:40,280
preventing it is much easier I think

916
00:37:40,440 --> 00:37:43,079
okay we have seven and a half minutes

917
00:37:43,079 --> 00:37:44,400
left and I think we're doing pretty good

918
00:37:44,400 --> 00:37:45,900
on time

919
00:37:45,900 --> 00:37:48,780
so with all of these different backdoor

920
00:37:48,780 --> 00:37:51,000
mechanisms that will let us re-establish

921
00:37:51,000 --> 00:37:54,839
access after we've been kicked out or if

922
00:37:54,839 --> 00:37:56,220
we just want to log back into it after

923
00:37:56,220 --> 00:37:57,660
we haven't been there for a year

924
00:37:57,660 --> 00:37:58,920
whatever

925
00:37:58,920 --> 00:38:01,020
we also want privilege

926
00:38:01,020 --> 00:38:04,320
and there are various ways that we can

927
00:38:04,320 --> 00:38:06,960
hide our privilege

928
00:38:06,960 --> 00:38:09,839
that have varying degrees of difficulty

929
00:38:09,839 --> 00:38:12,540
for the Defenders to catch

930
00:38:12,540 --> 00:38:14,640
so I'm only going to talk about one of

931
00:38:14,640 --> 00:38:16,020
those methods

932
00:38:16,020 --> 00:38:18,060
because it also just like the back door

933
00:38:18,060 --> 00:38:20,040
installer that we just saw this also

934
00:38:20,040 --> 00:38:22,560
meets all the criteria for being super

935
00:38:22,560 --> 00:38:25,740
easy to install and super hard for

936
00:38:25,740 --> 00:38:27,900
Defenders to find and I'm going to

937
00:38:27,900 --> 00:38:30,960
explain why that is

938
00:38:30,960 --> 00:38:33,060
if you have ever used Azure active

939
00:38:33,060 --> 00:38:34,980
directory you have probably seen this

940
00:38:34,980 --> 00:38:35,940
screen

941
00:38:35,940 --> 00:38:37,980
this screen is showing us the Azure

942
00:38:37,980 --> 00:38:40,980
active directory admin roles that exist

943
00:38:40,980 --> 00:38:42,900
in the tenant

944
00:38:42,900 --> 00:38:45,119
and so as an admin you might use this

945
00:38:45,119 --> 00:38:47,280
GUI to audit and like you know let me

946
00:38:47,280 --> 00:38:49,920
click on the global admins role and let

947
00:38:49,920 --> 00:38:51,660
me see who has that kind of active

948
00:38:51,660 --> 00:38:54,240
assignment on that role and we can audit

949
00:38:54,240 --> 00:38:55,859
for this and we can say all right does

950
00:38:55,859 --> 00:38:57,599
does Nate really need to be a global

951
00:38:57,599 --> 00:39:00,900
admin no absolutely not do I need to be

952
00:39:00,900 --> 00:39:03,240
a global admin yeah I think I think so I

953
00:39:03,240 --> 00:39:05,099
think I think I earned it

954
00:39:05,099 --> 00:39:07,920
so admins will typically use this GUI to

955
00:39:07,920 --> 00:39:09,480
do this kind of auditing on a regular

956
00:39:09,480 --> 00:39:10,920
basis

957
00:39:10,920 --> 00:39:12,960
but there's a problem

958
00:39:12,960 --> 00:39:15,180
there is a role in Azure active

959
00:39:15,180 --> 00:39:18,660
directory called partner tier 2 support

960
00:39:18,660 --> 00:39:23,040
and if we read this it says do not use

961
00:39:23,040 --> 00:39:24,480
admins

962
00:39:24,480 --> 00:39:26,460
are so good at reading instructions

963
00:39:26,460 --> 00:39:27,839
aren't they

964
00:39:27,839 --> 00:39:30,720
and every kind of best practice admin is

965
00:39:30,720 --> 00:39:33,240
always follow to the letter there's no

966
00:39:33,240 --> 00:39:34,680
reason an admin would ever use this

967
00:39:34,680 --> 00:39:37,560
right wrong

968
00:39:37,560 --> 00:39:39,599
so it says this role has been deprecated

969
00:39:39,599 --> 00:39:42,480
and will be removed from Azure ad in the

970
00:39:42,480 --> 00:39:43,680
future I don't know how long that

971
00:39:43,680 --> 00:39:45,180
statement has been there but this role

972
00:39:45,180 --> 00:39:46,680
is still there

973
00:39:46,680 --> 00:39:49,140
uh it's an older one but it still checks

974
00:39:49,140 --> 00:39:50,579
out

975
00:39:50,579 --> 00:39:53,579
now the Privileges that this role gives

976
00:39:53,579 --> 00:39:54,720
you

977
00:39:54,720 --> 00:39:57,359
are pretty powerful you can see some

978
00:39:57,359 --> 00:40:00,540
examples here where we have like

979
00:40:00,540 --> 00:40:02,460
um Microsoft dot directory slash

980
00:40:02,460 --> 00:40:04,980
applications slash credentials slash

981
00:40:04,980 --> 00:40:06,119
update

982
00:40:06,119 --> 00:40:07,760
so that would let us

983
00:40:07,760 --> 00:40:10,859
add credentials to an application object

984
00:40:10,859 --> 00:40:12,839
and then authenticate as the service

985
00:40:12,839 --> 00:40:15,060
principle associated with that

986
00:40:15,060 --> 00:40:17,640
application that's pretty nice it's even

987
00:40:17,640 --> 00:40:19,619
better if the target service principle

988
00:40:19,619 --> 00:40:21,839
is like a global admin or something

989
00:40:21,839 --> 00:40:23,339
but there's an even better privilege

990
00:40:23,339 --> 00:40:25,260
that this rule gives you

991
00:40:25,260 --> 00:40:27,780
that privilege is Microsoft dot

992
00:40:27,780 --> 00:40:31,380
directory slash role assignments slash

993
00:40:31,380 --> 00:40:34,140
all properties slash all tasks anybody

994
00:40:34,140 --> 00:40:37,819
guess what this role lets you do

995
00:40:40,079 --> 00:40:41,220
everything

996
00:40:41,220 --> 00:40:42,960
everything

997
00:40:42,960 --> 00:40:45,060
this role lets you promote yourself to

998
00:40:45,060 --> 00:40:46,260
Global admin

999
00:40:46,260 --> 00:40:48,900
so it is not Global admin but it's just

1000
00:40:48,900 --> 00:40:50,280
as good

1001
00:40:50,280 --> 00:40:52,560
even better if you are trying to hide

1002
00:40:52,560 --> 00:40:54,960
your level of privilege

1003
00:40:54,960 --> 00:40:57,300
why is that

1004
00:40:57,300 --> 00:41:00,119
that's because that role does not show

1005
00:41:00,119 --> 00:41:01,560
up in the GUI

1006
00:41:01,560 --> 00:41:03,180
it's there

1007
00:41:03,180 --> 00:41:06,540
and when the page makes the request to

1008
00:41:06,540 --> 00:41:10,440
build the table showing those roles that

1009
00:41:10,440 --> 00:41:14,040
role does come back in the payload

1010
00:41:14,040 --> 00:41:16,740
but it doesn't show up in this table why

1011
00:41:16,740 --> 00:41:18,060
is that

1012
00:41:18,060 --> 00:41:20,839
I'll tell you

1013
00:41:21,660 --> 00:41:23,520
this is a bit of JavaScript that is

1014
00:41:23,520 --> 00:41:27,599
involved in building this table on this

1015
00:41:27,599 --> 00:41:28,740
page

1016
00:41:28,740 --> 00:41:31,200
and if we zoom in a little bit

1017
00:41:31,200 --> 00:41:32,640
we get this little bit of JavaScript

1018
00:41:32,640 --> 00:41:35,099
right here

1019
00:41:35,099 --> 00:41:39,180
there is a list called allow listed role

1020
00:41:39,180 --> 00:41:41,220
template IDs

1021
00:41:41,220 --> 00:41:43,320
and as you can see

1022
00:41:43,320 --> 00:41:44,760
here

1023
00:41:44,760 --> 00:41:49,920
this is evaluating whether the role is a

1024
00:41:49,920 --> 00:41:51,480
built-in role

1025
00:41:51,480 --> 00:41:54,660
and whether it is part of this allow

1026
00:41:54,660 --> 00:41:56,040
listed

1027
00:41:56,040 --> 00:41:59,579
set of role IDs

1028
00:41:59,579 --> 00:42:01,200
if it is built in

1029
00:42:01,200 --> 00:42:03,660
and it is not in that list it will not

1030
00:42:03,660 --> 00:42:06,240
show up in that list

1031
00:42:06,240 --> 00:42:08,339
that allow listed role template IDs

1032
00:42:08,339 --> 00:42:11,700
lives here

1033
00:42:11,700 --> 00:42:14,579
so that's fun

1034
00:42:14,579 --> 00:42:17,579
and that's the part of the Json that

1035
00:42:17,579 --> 00:42:20,040
lists out what those IDs actually are

1036
00:42:20,040 --> 00:42:22,200
the partner tier 2 support role is not

1037
00:42:22,200 --> 00:42:24,900
there there are several other roles that

1038
00:42:24,900 --> 00:42:27,240
are not there as well that can be

1039
00:42:27,240 --> 00:42:29,460
not as dangerous as partner tier 2

1040
00:42:29,460 --> 00:42:32,220
support but dangerous enough

1041
00:42:32,220 --> 00:42:33,599
uh that you would want to know about

1042
00:42:33,599 --> 00:42:35,900
this

1043
00:42:36,599 --> 00:42:40,680
so this is what this creates if we have

1044
00:42:40,680 --> 00:42:42,599
if we have an oibc connection which is

1045
00:42:42,599 --> 00:42:44,220
super sneaky

1046
00:42:44,220 --> 00:42:46,020
and then we grant that service principle

1047
00:42:46,020 --> 00:42:48,780
this partner tier 2 support role we have

1048
00:42:48,780 --> 00:42:51,420
a back door and a level of privilege

1049
00:42:51,420 --> 00:42:54,960
that is very hard for admins to find

1050
00:42:54,960 --> 00:42:57,140
without automation without actually

1051
00:42:57,140 --> 00:43:00,240
using the API endpoints or maybe without

1052
00:43:00,240 --> 00:43:02,099
using a commercial tool

1053
00:43:02,099 --> 00:43:03,540
you're not going to be able to find this

1054
00:43:03,540 --> 00:43:04,560
back door

1055
00:43:04,560 --> 00:43:06,780
or at least not very easily

1056
00:43:06,780 --> 00:43:08,460
so this service principle if we give it

1057
00:43:08,460 --> 00:43:10,560
this hidden role called partner tier 2

1058
00:43:10,560 --> 00:43:13,560
support is that five minutes left

1059
00:43:13,560 --> 00:43:15,480
okay

1060
00:43:15,480 --> 00:43:16,980
that means that that service principle

1061
00:43:16,980 --> 00:43:19,440
can then promote itself to Global admin

1062
00:43:19,440 --> 00:43:20,880
Global admin has full control of the

1063
00:43:20,880 --> 00:43:23,099
tenant so we have this very very nice

1064
00:43:23,099 --> 00:43:27,260
sneaky backdoor and privilege

1065
00:43:27,359 --> 00:43:30,060
here's how you can audit for this

1066
00:43:30,060 --> 00:43:32,400
you want to gather all of the Azure

1067
00:43:32,400 --> 00:43:34,440
admin role assignments you can do this

1068
00:43:34,440 --> 00:43:36,920
with bark

1069
00:43:37,140 --> 00:43:38,880
then you want to filter those role

1070
00:43:38,880 --> 00:43:40,680
assignments to find role assignments

1071
00:43:40,680 --> 00:43:43,500
that match the partner tier 2 support ID

1072
00:43:43,500 --> 00:43:44,880
and then the result there that you see

1073
00:43:44,880 --> 00:43:46,920
at the bottom where it says ID principal

1074
00:43:46,920 --> 00:43:49,500
ID directory scope ID that's telling you

1075
00:43:49,500 --> 00:43:52,260
that there is a principal whose ID

1076
00:43:52,260 --> 00:43:56,339
starts with 2c537 Etc that has that role

1077
00:43:56,339 --> 00:43:59,040
if you find this this is

1078
00:43:59,040 --> 00:44:01,560
bad this is very very bad

1079
00:44:01,560 --> 00:44:03,300
even if a legitimate admin has done this

1080
00:44:03,300 --> 00:44:05,579
they should not do this they absolutely

1081
00:44:05,579 --> 00:44:07,020
should not do this

1082
00:44:07,020 --> 00:44:08,460
telling the difference between something

1083
00:44:08,460 --> 00:44:10,079
that is legitimate and illegitimate

1084
00:44:10,079 --> 00:44:11,700
forget it

1085
00:44:11,700 --> 00:44:13,980
just tell them don't do this force them

1086
00:44:13,980 --> 00:44:17,280
not to do this this is a back door

1087
00:44:17,280 --> 00:44:18,359
okay

1088
00:44:18,359 --> 00:44:22,279
let's have a conclusion

1089
00:44:24,020 --> 00:44:26,520
I would say that right now there has

1090
00:44:26,520 --> 00:44:29,099
never been a better time

1091
00:44:29,099 --> 00:44:31,740
to get involved in Azure abuse research

1092
00:44:31,740 --> 00:44:34,980
Azure has been around for over 10 years

1093
00:44:34,980 --> 00:44:37,800
but the offense of security research in

1094
00:44:37,800 --> 00:44:40,140
this area is still very new

1095
00:44:40,140 --> 00:44:42,359
so remember earlier I talked about how

1096
00:44:42,359 --> 00:44:43,619
the red team and the blue team were

1097
00:44:43,619 --> 00:44:46,260
still catching up to the vendors the

1098
00:44:46,260 --> 00:44:48,300
configurations and the admins

1099
00:44:48,300 --> 00:44:50,339
and the risk that that all creates

1100
00:44:50,339 --> 00:44:52,560
that's so true in Azure we are still

1101
00:44:52,560 --> 00:44:54,180
just playing catch-up with even

1102
00:44:54,180 --> 00:44:56,280
understanding the basic mechanics of how

1103
00:44:56,280 --> 00:44:58,319
this system actually works

1104
00:44:58,319 --> 00:44:59,579
so if you're looking to get into

1105
00:44:59,579 --> 00:45:01,380
research and you're looking for an area

1106
00:45:01,380 --> 00:45:04,020
to do that in I highly recommend that

1107
00:45:04,020 --> 00:45:07,280
you look at azure

1108
00:45:07,319 --> 00:45:09,420
if you have existing expertise with like

1109
00:45:09,420 --> 00:45:12,720
databases devops web apps whatever

1110
00:45:12,720 --> 00:45:15,540
that probably exists in Azure like in

1111
00:45:15,540 --> 00:45:17,819
Microsoft's own special flavor so you

1112
00:45:17,819 --> 00:45:20,760
can build on your existing expertise to

1113
00:45:20,760 --> 00:45:22,980
dive into this research and have a

1114
00:45:22,980 --> 00:45:25,319
pretty easy time of it I would say and

1115
00:45:25,319 --> 00:45:26,819
if you're an expert in databases or

1116
00:45:26,819 --> 00:45:28,800
you're an expert in devops or whatever

1117
00:45:28,800 --> 00:45:32,040
you are super well equipped to find

1118
00:45:32,040 --> 00:45:35,339
interesting attack Primitives abuses

1119
00:45:35,339 --> 00:45:37,140
Etc

1120
00:45:37,140 --> 00:45:39,900
you can see the full maybe list of

1121
00:45:39,900 --> 00:45:42,480
services at that URL in reality there

1122
00:45:42,480 --> 00:45:43,859
are more services than what that page

1123
00:45:43,859 --> 00:45:45,740
shows

1124
00:45:45,740 --> 00:45:47,880
if you're interested in more research

1125
00:45:47,880 --> 00:45:49,859
follow these people who work at

1126
00:45:49,859 --> 00:45:51,540
Microsoft

1127
00:45:51,540 --> 00:45:53,640
these are the people who are setting the

1128
00:45:53,640 --> 00:45:54,540
pace

1129
00:45:54,540 --> 00:45:57,060
for Microsoft as a vendor

1130
00:45:57,060 --> 00:45:58,680
the features that go out there talking

1131
00:45:58,680 --> 00:46:00,780
about them and so if you want to stay

1132
00:46:00,780 --> 00:46:02,099
ahead if you want to catch up follow

1133
00:46:02,099 --> 00:46:04,980
these people and see what they're saying

1134
00:46:04,980 --> 00:46:07,140
follow these people on Twitter they do

1135
00:46:07,140 --> 00:46:08,940
offensive and defensive security

1136
00:46:08,940 --> 00:46:11,460
research in Azure and in other platforms

1137
00:46:11,460 --> 00:46:13,980
they are super smart I highly recommend

1138
00:46:13,980 --> 00:46:16,700
that you follow them

1139
00:46:16,920 --> 00:46:19,460
foreign

1140
00:46:20,240 --> 00:46:23,520
bookmark those

1141
00:46:23,520 --> 00:46:25,619
that one in the middle AZ Advertiser is

1142
00:46:25,619 --> 00:46:26,940
super interesting because it tells you

1143
00:46:26,940 --> 00:46:29,099
whenever a change was made in azure

1144
00:46:29,099 --> 00:46:32,839
which happens all the time

1145
00:46:34,619 --> 00:46:36,240
and I would say thank you very much for

1146
00:46:36,240 --> 00:46:39,240
your time and uh if you uh have

1147
00:46:39,240 --> 00:46:40,619
questions I think we do have time for

1148
00:46:40,619 --> 00:46:42,180
questions

1149
00:46:42,180 --> 00:46:45,200
no we don't

1150
00:46:49,980 --> 00:46:52,200
yeah so questions I think what Javi is

1151
00:46:52,200 --> 00:46:54,780
saying like I'm gonna go outside

1152
00:46:54,780 --> 00:46:56,520
and if you have questions you can ask me

1153
00:46:56,520 --> 00:46:58,980
there also if you want to follow me on

1154
00:46:58,980 --> 00:47:00,119
Twitter that's my handle is at

1155
00:47:00,119 --> 00:47:03,000
underscore Waldo and I've got stickers

1156
00:47:03,000 --> 00:47:04,980
with me so if you want a sticker come

1157
00:47:04,980 --> 00:47:06,420
get a sticker

1158
00:47:06,420 --> 00:47:07,810
thank you

1159
00:47:07,810 --> 00:47:11,380
[Applause]

