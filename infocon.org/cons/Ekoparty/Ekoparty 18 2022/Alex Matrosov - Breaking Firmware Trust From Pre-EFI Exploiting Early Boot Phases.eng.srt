1
00:00:00,000 --> 00:00:04,130
[Music]

2
00:00:11,120 --> 00:00:14,759
hello everyone my name is Alex machos

3
00:00:14,759 --> 00:00:17,640
and today we will be discussing a lot of

4
00:00:17,640 --> 00:00:20,340
firmer vulnerabilities and one of the

5
00:00:20,340 --> 00:00:22,380
major topics of my presentation about

6
00:00:22,380 --> 00:00:25,619
how actually attack Show faces from

7
00:00:25,619 --> 00:00:29,699
pre-5 boot is very dangerous for from

8
00:00:29,699 --> 00:00:32,220
the perspective of attacking firmware

9
00:00:32,220 --> 00:00:34,020
but not only

10
00:00:34,020 --> 00:00:37,200
okay let's start a few words about me so

11
00:00:37,200 --> 00:00:40,920
I been working on cyber security as a

12
00:00:40,920 --> 00:00:43,860
security researcher 20 plus years break

13
00:00:43,860 --> 00:00:46,500
a few CPUs and gpus in the past and

14
00:00:46,500 --> 00:00:48,719
dedicating all my free time to the

15
00:00:48,719 --> 00:00:50,879
surfing and my company

16
00:00:50,879 --> 00:00:53,419
all right

17
00:00:56,460 --> 00:00:59,940
So This research has been preparing not

18
00:00:59,940 --> 00:01:02,100
only me the whole binary research team

19
00:01:02,100 --> 00:01:06,119
participating and also give a kudos to

20
00:01:06,119 --> 00:01:07,740
all these guys on this flight which has

21
00:01:07,740 --> 00:01:09,479
been working hard to make this research

22
00:01:09,479 --> 00:01:12,740
very interesting and get all these bugs

23
00:01:12,740 --> 00:01:15,060
discovered which we'll be discussing

24
00:01:15,060 --> 00:01:19,140
here so This research actually combines

25
00:01:19,140 --> 00:01:23,340
22 different vulnerabilities and this is

26
00:01:23,340 --> 00:01:25,740
the last conference in this year for

27
00:01:25,740 --> 00:01:28,619
binary research team and 2020 second

28
00:01:28,619 --> 00:01:31,259
year ends for us with a presentation

29
00:01:31,259 --> 00:01:34,200
which combines 22 bucks we are disclosed

30
00:01:34,200 --> 00:01:37,799
at blackhead it's been at 12 CVS at

31
00:01:37,799 --> 00:01:40,680
webscon it's seven and three more

32
00:01:40,680 --> 00:01:43,860
actually very very interesting ones and

33
00:01:43,860 --> 00:01:47,960
high severity we'll be discussing today

34
00:01:48,900 --> 00:01:51,960
so we will start with some brief fire

35
00:01:51,960 --> 00:01:55,380
attack surfaces and talk about how they

36
00:01:55,380 --> 00:01:57,780
are dangerous and also what kind of

37
00:01:57,780 --> 00:02:00,000
attack vectors they are exposing of

38
00:02:00,000 --> 00:02:01,740
course it will be land some interesting

39
00:02:01,740 --> 00:02:04,799
vulnerabilities about by bypassing the

40
00:02:04,799 --> 00:02:07,500
modern security features from Intel

41
00:02:07,500 --> 00:02:10,440
Corporation but then we go down with

42
00:02:10,440 --> 00:02:12,660
more vulnerabilities and how actually

43
00:02:12,660 --> 00:02:14,879
you can automate your research let's

44
00:02:14,879 --> 00:02:18,300
talk about repeatable failures first

45
00:02:18,300 --> 00:02:23,220
it is actually a very interesting how

46
00:02:23,220 --> 00:02:25,260
many vulnerabilities actually exist in

47
00:02:25,260 --> 00:02:27,959
the single firmware and how many

48
00:02:27,959 --> 00:02:30,660
vulnerabilities single research team can

49
00:02:30,660 --> 00:02:33,599
publicly discuss like during this year

50
00:02:33,599 --> 00:02:36,780
we already discussed 71 High severity

51
00:02:36,780 --> 00:02:38,940
vulnerabilities and of course it's

52
00:02:38,940 --> 00:02:41,220
because code complexity in modern

53
00:02:41,220 --> 00:02:43,680
firmware is just increasing and of

54
00:02:43,680 --> 00:02:46,680
course code complexity is winding new

55
00:02:46,680 --> 00:02:50,099
attack surfaces and opens the doors for

56
00:02:50,099 --> 00:02:52,500
new vulnerabilities but of course like

57
00:02:52,500 --> 00:02:54,920
it's not everything what we discussed

58
00:02:54,920 --> 00:02:58,260
publicly known right now it's 50 plus

59
00:02:58,260 --> 00:03:00,540
bucks from this year it's still under

60
00:03:00,540 --> 00:03:03,319
the disclosure

61
00:03:04,680 --> 00:03:07,860
so this vulnerabilities which as we

62
00:03:07,860 --> 00:03:10,140
discussed at black hat and as you can

63
00:03:10,140 --> 00:03:12,720
see it's combined into reference code

64
00:03:12,720 --> 00:03:14,819
it's combined American megatrons

65
00:03:14,819 --> 00:03:18,300
reference code and some of the vendors

66
00:03:18,300 --> 00:03:21,140
like HP

67
00:03:21,540 --> 00:03:23,280
so but

68
00:03:23,280 --> 00:03:24,959
interestingly

69
00:03:24,959 --> 00:03:28,080
not always vulnerability get patched

70
00:03:28,080 --> 00:03:30,239
even if the vendor aware of it

71
00:03:30,239 --> 00:03:33,659
after we presented at blackhead just for

72
00:03:33,659 --> 00:03:36,480
curiosity we double check if

73
00:03:36,480 --> 00:03:38,280
vulnerabilities we are disclosed to the

74
00:03:38,280 --> 00:03:40,739
vendor it's been coordinated disclosure

75
00:03:40,739 --> 00:03:43,680
all the dates about the disclosure being

76
00:03:43,680 --> 00:03:46,640
agreed with the vendor but

77
00:03:46,640 --> 00:03:49,980
interestingly we discovered half of

78
00:03:49,980 --> 00:03:52,739
vulnerabilities we report that still

79
00:03:52,739 --> 00:03:55,379
unpatched that's mean

80
00:03:55,379 --> 00:03:58,760
oh thank you

81
00:03:59,220 --> 00:04:02,459
so that's mean not always vendor

82
00:04:02,459 --> 00:04:05,099
actually can sculpt the impact over

83
00:04:05,099 --> 00:04:08,040
their own device lines and products and

84
00:04:08,040 --> 00:04:10,920
actually make all these users patched

85
00:04:10,920 --> 00:04:13,319
right but that's very interesting

86
00:04:13,319 --> 00:04:14,519
observation

87
00:04:14,519 --> 00:04:15,720
so

88
00:04:15,720 --> 00:04:17,459
basically

89
00:04:17,459 --> 00:04:18,839
um

90
00:04:18,839 --> 00:04:22,440
all this impact discussing in this

91
00:04:22,440 --> 00:04:25,139
presentation it's on one slide so we

92
00:04:25,139 --> 00:04:27,060
have American Mega Trends we have Intel

93
00:04:27,060 --> 00:04:30,180
HP Lenovo and we have Insight which is

94
00:04:30,180 --> 00:04:32,040
another independent bias developer it's

95
00:04:32,040 --> 00:04:33,300
a reference code which is actually

96
00:04:33,300 --> 00:04:35,880
impacting Cisco NetApp

97
00:04:35,880 --> 00:04:39,960
many many different Juniper HP Dell

98
00:04:39,960 --> 00:04:42,199
Etc Lenovo again

99
00:04:42,199 --> 00:04:45,240
so basically it's a lot of interesting

100
00:04:45,240 --> 00:04:48,479
attack vectors will be presented today

101
00:04:48,479 --> 00:04:51,900
but one of the main thing why I'm doing

102
00:04:51,900 --> 00:04:54,000
that I wanted to actually increase an

103
00:04:54,000 --> 00:04:56,699
awareness increasing attention to the

104
00:04:56,699 --> 00:04:58,560
problem which is happening again and

105
00:04:58,560 --> 00:05:01,259
again and seeing all these repeatable

106
00:05:01,259 --> 00:05:04,020
failures it's very important to actually

107
00:05:04,020 --> 00:05:07,080
make them fix finally because we are not

108
00:05:07,080 --> 00:05:10,199
talking about new attack vectors some of

109
00:05:10,199 --> 00:05:14,340
them are new but majority of them not

110
00:05:14,340 --> 00:05:16,320
so basically

111
00:05:16,320 --> 00:05:18,540
this is the least vulnerabilities I will

112
00:05:18,540 --> 00:05:20,400
be discussing today and these three

113
00:05:20,400 --> 00:05:22,620
exclusively disclosure date it's

114
00:05:22,620 --> 00:05:25,020
literally today so all the information

115
00:05:25,020 --> 00:05:27,240
will be available public after my talk

116
00:05:27,240 --> 00:05:28,800
and

117
00:05:28,800 --> 00:05:31,440
as you can see we still have the stack

118
00:05:31,440 --> 00:05:34,680
buffer overflows in 2020 in Dixie

119
00:05:34,680 --> 00:05:37,380
drivers which is actually supposed to be

120
00:05:37,380 --> 00:05:40,259
landed on many vendors which I mentioned

121
00:05:40,259 --> 00:05:42,539
before

122
00:05:42,539 --> 00:05:46,080
so but before we land on the details

123
00:05:46,080 --> 00:05:48,060
about these vulnerabilities let's talk

124
00:05:48,060 --> 00:05:49,380
about the attack

125
00:05:49,380 --> 00:05:52,800
uh attack your threat model and

126
00:05:52,800 --> 00:05:55,320
what's the impact the attacker can make

127
00:05:55,320 --> 00:05:59,000
it from previous

128
00:05:59,280 --> 00:06:02,340
surface so first of all preview 5 boot

129
00:06:02,340 --> 00:06:05,520
it's very early happening and it is a

130
00:06:05,520 --> 00:06:07,560
different type of the drivers

131
00:06:07,560 --> 00:06:09,539
firmware modules which is responsible

132
00:06:09,539 --> 00:06:10,620
for that

133
00:06:10,620 --> 00:06:14,000
basically if you have this module

134
00:06:14,000 --> 00:06:17,160
attacked or like code execution gained

135
00:06:17,160 --> 00:06:19,620
from the operating system you can attack

136
00:06:19,620 --> 00:06:22,080
everything what is happening earlier

137
00:06:22,080 --> 00:06:24,539
than previous

138
00:06:24,539 --> 00:06:27,539
and when we first time disclose such

139
00:06:27,539 --> 00:06:29,759
vulnerabilities to the vendors they said

140
00:06:29,759 --> 00:06:32,220
oh you know what it's very complicated

141
00:06:32,220 --> 00:06:34,919
to attack everything uh which is

142
00:06:34,919 --> 00:06:37,259
happening on later phase but I will show

143
00:06:37,259 --> 00:06:39,120
you the POC which is actually will be

144
00:06:39,120 --> 00:06:42,000
remove all these questions

145
00:06:42,000 --> 00:06:44,400
so another thing

146
00:06:44,400 --> 00:06:46,500
I wanted to pay attention and it's very

147
00:06:46,500 --> 00:06:48,780
connects to preview fireface it's

148
00:06:48,780 --> 00:06:52,860
enviram spy flash storage because it's

149
00:06:52,860 --> 00:06:55,979
actually contained a lot of different

150
00:06:55,979 --> 00:06:58,199
environment variables basically it's a

151
00:06:58,199 --> 00:07:00,539
data which is can be used during the

152
00:07:00,539 --> 00:07:05,340
boot include early Boot and attack the

153
00:07:05,340 --> 00:07:07,919
firmware of course because if it will be

154
00:07:07,919 --> 00:07:10,680
malicious it can be used as an attacker

155
00:07:10,680 --> 00:07:13,259
for secure systems because this data is

156
00:07:13,259 --> 00:07:15,199
a persistence on the firmware storage

157
00:07:15,199 --> 00:07:19,259
and another thing it is no

158
00:07:19,259 --> 00:07:22,099
features which is actually covered

159
00:07:22,099 --> 00:07:24,780
identification for this variable that

160
00:07:24,780 --> 00:07:27,900
early it's happening later on and

161
00:07:27,900 --> 00:07:31,979
another thing boot guard it's Intel

162
00:07:31,979 --> 00:07:33,479
security feature which is responsible

163
00:07:33,479 --> 00:07:35,639
for armor and secure boot will be also

164
00:07:35,639 --> 00:07:39,000
not authentificate such storage

165
00:07:39,000 --> 00:07:41,580
so and on this

166
00:07:41,580 --> 00:07:46,080
diagram you can see how environment

167
00:07:46,080 --> 00:07:48,259
variables get used during different

168
00:07:48,259 --> 00:07:54,300
boot phases and operating system even so

169
00:07:54,300 --> 00:07:57,660
that's very important knowledge for what

170
00:07:57,660 --> 00:08:01,319
I will be discussing later and of course

171
00:08:01,319 --> 00:08:03,180
just a reminder

172
00:08:03,180 --> 00:08:05,880
the payloads which will be happening in

173
00:08:05,880 --> 00:08:09,539
runtime will not measure it by TPM uh

174
00:08:09,539 --> 00:08:11,639
your fence at the station system

175
00:08:11,639 --> 00:08:13,860
Integrity checking monitoring whatever

176
00:08:13,860 --> 00:08:18,199
there will be don't see that

177
00:08:20,639 --> 00:08:21,840
so

178
00:08:21,840 --> 00:08:23,460
this is

179
00:08:23,460 --> 00:08:25,500
very important scheme because it

180
00:08:25,500 --> 00:08:28,080
actually shows how you can

181
00:08:28,080 --> 00:08:29,639
attack

182
00:08:29,639 --> 00:08:33,620
and what you can do from the previous

183
00:08:33,620 --> 00:08:37,740
vulnerability basically first of all on

184
00:08:37,740 --> 00:08:40,140
that early stage even the features like

185
00:08:40,140 --> 00:08:43,679
bios lock enable when bias region it's

186
00:08:43,679 --> 00:08:46,920
locked to write is not happening yet a

187
00:08:46,920 --> 00:08:49,560
lot of other things

188
00:08:49,560 --> 00:08:52,320
and a lot of other security features are

189
00:08:52,320 --> 00:08:55,080
not even initialized yet so this is

190
00:08:55,080 --> 00:08:56,940
create a very sweet spot for the

191
00:08:56,940 --> 00:08:59,940
attacker not only to persist but also to

192
00:08:59,940 --> 00:09:02,160
bypass a lot of things which is

193
00:09:02,160 --> 00:09:05,339
happening for protect your platform

194
00:09:05,339 --> 00:09:08,339
it's your laptop it's server H compute

195
00:09:08,339 --> 00:09:10,740
and iot devices Network appliances and a

196
00:09:10,740 --> 00:09:12,180
lot of other stuff

197
00:09:12,180 --> 00:09:13,620
and

198
00:09:13,620 --> 00:09:17,160
if you look on this one this is

199
00:09:17,160 --> 00:09:20,640
shows exactly how the payroll can

200
00:09:20,640 --> 00:09:23,399
survive from the platform initialization

201
00:09:23,399 --> 00:09:26,100
phase and during the later boot phases

202
00:09:26,100 --> 00:09:27,839
and

203
00:09:27,839 --> 00:09:29,880
this is very

204
00:09:29,880 --> 00:09:32,700
interesting because you always have an

205
00:09:32,700 --> 00:09:35,760
opportunity with some

206
00:09:35,760 --> 00:09:38,160
event which is happening just right

207
00:09:38,160 --> 00:09:41,459
before next phase will be get a control

208
00:09:41,459 --> 00:09:44,339
that's mean if the attacker will be able

209
00:09:44,339 --> 00:09:48,000
to hook to this event he will be able to

210
00:09:48,000 --> 00:09:51,000
actually catch this in

211
00:09:51,000 --> 00:09:54,660
this is jump to next phase of the boot

212
00:09:54,660 --> 00:09:57,600
and actually make this transition happen

213
00:09:57,600 --> 00:09:59,940
that's exactly what this diagram talking

214
00:09:59,940 --> 00:10:02,899
about but more interestingly

215
00:10:02,899 --> 00:10:05,700
interestingly to see the demo

216
00:10:05,700 --> 00:10:07,080
so

217
00:10:07,080 --> 00:10:08,279
thank you

218
00:10:08,279 --> 00:10:11,420
this is one of the Enterprise

219
00:10:11,420 --> 00:10:15,260
laptops so basically we attack

220
00:10:15,260 --> 00:10:17,000
pre-ify

221
00:10:17,000 --> 00:10:22,140
module and after that what happening it

222
00:10:22,140 --> 00:10:24,839
scans the pages for some interesting

223
00:10:24,839 --> 00:10:27,660
data and if you look from the

224
00:10:27,660 --> 00:10:30,120
exploitation loading the payload and

225
00:10:30,120 --> 00:10:32,100
finding something interesting it takes

226
00:10:32,100 --> 00:10:34,140
seconds it's a real it's like it's not

227
00:10:34,140 --> 00:10:38,160
like increase the timeline uh speed up

228
00:10:38,160 --> 00:10:40,200
the timeline for this video it's a real

229
00:10:40,200 --> 00:10:41,820
time

230
00:10:41,820 --> 00:10:43,279
uh

231
00:10:43,279 --> 00:10:46,260
workflow for this particular proof of

232
00:10:46,260 --> 00:10:47,700
concept

233
00:10:47,700 --> 00:10:51,120
and it's how fast it is and how

234
00:10:51,120 --> 00:10:53,640
dangerous it is and I don't know why

235
00:10:53,640 --> 00:10:55,560
vendors has been not considering before

236
00:10:55,560 --> 00:10:58,440
platform neutralization phase as very

237
00:10:58,440 --> 00:11:01,860
dangerous spot for the attacker but now

238
00:11:01,860 --> 00:11:04,339
they are

239
00:11:05,399 --> 00:11:08,760
another thing I wanted to cover in my

240
00:11:08,760 --> 00:11:12,540
presentation it is Intel policy engine

241
00:11:12,540 --> 00:11:15,180
which is responsible for configuring

242
00:11:15,180 --> 00:11:18,540
different smm drivers with an access and

243
00:11:18,540 --> 00:11:20,940
actually is awaiting them

244
00:11:20,940 --> 00:11:24,300
of course it's a great feature and it's

245
00:11:24,300 --> 00:11:26,399
actually raising the bar of exploitation

246
00:11:26,399 --> 00:11:28,579
but in the same time of course

247
00:11:28,579 --> 00:11:31,140
particular implementations are always

248
00:11:31,140 --> 00:11:34,380
failing and let's talk about that

249
00:11:34,380 --> 00:11:36,720
so

250
00:11:36,720 --> 00:11:38,579
first of all this security feature is

251
00:11:38,579 --> 00:11:42,060
being created for

252
00:11:42,060 --> 00:11:47,160
improving isolation of one driver from

253
00:11:47,160 --> 00:11:49,500
another and actually

254
00:11:49,500 --> 00:11:53,040
if you think about Intel been probably

255
00:11:53,040 --> 00:11:56,100
try to re-implement the concept which

256
00:11:56,100 --> 00:11:58,019
has been implemented in arm trust Zone

257
00:11:58,019 --> 00:12:00,240
when you have trusted app which is

258
00:12:00,240 --> 00:12:02,339
related from others and if you attack

259
00:12:02,339 --> 00:12:04,500
one trusted app you will be not exposing

260
00:12:04,500 --> 00:12:06,959
the flat memory space with all other

261
00:12:06,959 --> 00:12:10,079
trusted app loaded and it's exactly why

262
00:12:10,079 --> 00:12:12,899
intro probably implemented Intel

263
00:12:12,899 --> 00:12:16,200
properties assessment module P Prime but

264
00:12:16,200 --> 00:12:19,620
unfortunately not everything what is

265
00:12:19,620 --> 00:12:22,820
written by security Architects got

266
00:12:22,820 --> 00:12:27,320
implemented as they think it should be

267
00:12:28,079 --> 00:12:33,360
so of course like whole concept of

268
00:12:33,360 --> 00:12:36,480
isolation of smm drivers it's go down to

269
00:12:36,480 --> 00:12:40,980
early 2000s when basically weinshoff uh

270
00:12:40,980 --> 00:12:43,440
security Architects from Intel Implement

271
00:12:43,440 --> 00:12:47,240
some concept called SMI transfer Monitor

272
00:12:47,240 --> 00:12:50,760
and this concept it's exactly been stand

273
00:12:50,760 --> 00:12:54,360
for uh is await intrusive virtualization

274
00:12:54,360 --> 00:12:58,079
technology VTX from window different smm

275
00:12:58,079 --> 00:12:59,459
drivers of course

276
00:12:59,459 --> 00:13:02,820
it doesn't work at the beginning if you

277
00:13:02,820 --> 00:13:05,040
enable this feature as a proof of

278
00:13:05,040 --> 00:13:07,500
concept it's been taken like I don't

279
00:13:07,500 --> 00:13:09,480
know probably 15 minutes to boot to

280
00:13:09,480 --> 00:13:12,320
operating system but in the end

281
00:13:12,320 --> 00:13:15,540
silicon get improvements and they did

282
00:13:15,540 --> 00:13:17,959
some interesting

283
00:13:17,959 --> 00:13:20,220
improvements of this technology to move

284
00:13:20,220 --> 00:13:24,540
further so but what is a ppam right so

285
00:13:24,540 --> 00:13:27,380
this is exactly how the implementation

286
00:13:27,380 --> 00:13:30,180
looks like in

287
00:13:30,180 --> 00:13:32,940
in the reference code so basically the

288
00:13:32,940 --> 00:13:35,639
reverse engineer this technology and we

289
00:13:35,639 --> 00:13:38,519
try to recover what is happening but

290
00:13:38,519 --> 00:13:39,779
look on here

291
00:13:39,779 --> 00:13:42,420
on this diagram

292
00:13:42,420 --> 00:13:45,839
and here's a lot of complexity it's a

293
00:13:45,839 --> 00:13:48,899
lot of parsing happening like first of

294
00:13:48,899 --> 00:13:51,899
all people and policy it's policy which

295
00:13:51,899 --> 00:13:54,420
is stored in the driver itself right it

296
00:13:54,420 --> 00:13:56,820
can be parsed and it can be open

297
00:13:56,820 --> 00:13:58,980
interesting attack surfaces on these

298
00:13:58,980 --> 00:14:02,760
parsers as well but even that if you

299
00:14:02,760 --> 00:14:06,779
look we have some of the bits which is

300
00:14:06,779 --> 00:14:08,579
responsible for the policies being

301
00:14:08,579 --> 00:14:12,779
enabled and disabled right so my

302
00:14:12,779 --> 00:14:14,639
colleague Claudio todres have been

303
00:14:14,639 --> 00:14:16,579
talking about Windows instrumentation

304
00:14:16,579 --> 00:14:19,740
attacks before when you can change one

305
00:14:19,740 --> 00:14:20,639
bit

306
00:14:20,639 --> 00:14:23,220
and it will be changed the whole

307
00:14:23,220 --> 00:14:26,519
security feature enabling but same thing

308
00:14:26,519 --> 00:14:30,680
happening in the firmware look on that

309
00:14:33,000 --> 00:14:36,300
this is particular implementation of HP

310
00:14:36,300 --> 00:14:38,579
whitebook which is pretty expensive

311
00:14:38,579 --> 00:14:42,180
Enterprise laptop and and also called

312
00:14:42,180 --> 00:14:43,980
the light right it's cool to break a

313
00:14:43,980 --> 00:14:45,360
light left

314
00:14:45,360 --> 00:14:46,800
so

315
00:14:46,800 --> 00:14:48,540
um and if you look on this

316
00:14:48,540 --> 00:14:50,880
implementation on the right side we can

317
00:14:50,880 --> 00:14:54,600
see the implementation of original inter

318
00:14:54,600 --> 00:14:57,420
reference code and on the left side it

319
00:14:57,420 --> 00:15:00,620
is HP implementation

320
00:15:00,620 --> 00:15:04,399
interestingly the HP probably for

321
00:15:04,399 --> 00:15:07,019
functional purposes they keep the room

322
00:15:07,019 --> 00:15:10,459
of this feature will be not locked down

323
00:15:10,459 --> 00:15:13,440
without firmware activity basically you

324
00:15:13,440 --> 00:15:16,500
have this feature enable it and disable

325
00:15:16,500 --> 00:15:18,199
it

326
00:15:18,199 --> 00:15:21,120
firmware what's it mean

327
00:15:21,120 --> 00:15:24,060
if you have enough privileges you can

328
00:15:24,060 --> 00:15:26,519
disable it

329
00:15:26,519 --> 00:15:29,339
and it's exactly what we

330
00:15:29,339 --> 00:15:33,120
make it for blackhead presentation we

331
00:15:33,120 --> 00:15:36,060
found versus data start hope data it's

332
00:15:36,060 --> 00:15:38,220
not Secure Storage for storing any sort

333
00:15:38,220 --> 00:15:42,120
of configurational data and we see

334
00:15:42,120 --> 00:15:47,880
if basically this value are used so then

335
00:15:47,880 --> 00:15:51,120
it can be used by the attacker as well

336
00:15:51,120 --> 00:15:53,360
right

337
00:15:54,120 --> 00:15:57,540
and basically we try experimenting we

338
00:15:57,540 --> 00:15:59,220
actually been thinking at some point we

339
00:15:59,220 --> 00:16:01,980
break the device but we are not we

340
00:16:01,980 --> 00:16:04,620
actually found the way how we can

341
00:16:04,620 --> 00:16:07,139
disable this feature uh POC it's

342
00:16:07,139 --> 00:16:09,180
available in our blog so you can find

343
00:16:09,180 --> 00:16:10,320
that

344
00:16:10,320 --> 00:16:14,459
um interesting part this vulnerability

345
00:16:14,459 --> 00:16:17,360
it's very hard to fix because

346
00:16:17,360 --> 00:16:20,160
functionally it's very looks very easy

347
00:16:20,160 --> 00:16:22,800
right but if you think about the

348
00:16:22,800 --> 00:16:24,839
complexity of the whole thing it's not

349
00:16:24,839 --> 00:16:27,060
that easy to fix or remove this feature

350
00:16:27,060 --> 00:16:29,699
to something else unfortunately we still

351
00:16:29,699 --> 00:16:31,920
see a lot of devices are affected to

352
00:16:31,920 --> 00:16:33,839
this vulnerability

353
00:16:33,839 --> 00:16:35,279
so

354
00:16:35,279 --> 00:16:40,019
and another important information I

355
00:16:40,019 --> 00:16:43,019
wanted to discuss with you today it is

356
00:16:43,019 --> 00:16:47,360
actually manifest of Intel people

357
00:16:47,360 --> 00:16:51,000
modules so they contain the private key

358
00:16:51,000 --> 00:16:53,940
from window Corporation but

359
00:16:53,940 --> 00:16:56,759
unfortunately this private key it's been

360
00:16:56,759 --> 00:16:59,220
expired

361
00:16:59,220 --> 00:17:01,699
this certificate

362
00:17:01,699 --> 00:17:06,780
stored inside the firmware and think is

363
00:17:06,780 --> 00:17:09,980
if you look on it it shows like

364
00:17:09,980 --> 00:17:13,520
2021 August which is actually last year

365
00:17:13,520 --> 00:17:16,500
and of course we try to check all the

366
00:17:16,500 --> 00:17:19,260
devices at scale and what we figure it

367
00:17:19,260 --> 00:17:21,720
out it's only three different versions

368
00:17:21,720 --> 00:17:24,240
of such certificate is available in the

369
00:17:24,240 --> 00:17:27,780
wild so basically one of those It Is

370
00:17:27,780 --> 00:17:30,299
2020 and it's one of the first

371
00:17:30,299 --> 00:17:32,700
iterations of Intel people I'm landed

372
00:17:32,700 --> 00:17:34,940
just on the few devices

373
00:17:34,940 --> 00:17:39,780
the second one 2020 August contain a bit

374
00:17:39,780 --> 00:17:43,380
more of the devices but of course

375
00:17:43,380 --> 00:17:46,080
the main one it's been from the last

376
00:17:46,080 --> 00:17:50,039
year when kind of like Intel uh released

377
00:17:50,039 --> 00:17:51,960
their new iteration of Intel ppam

378
00:17:51,960 --> 00:17:54,419
security feature and it's landed on a

379
00:17:54,419 --> 00:17:56,340
lot of devices it's just how many

380
00:17:56,340 --> 00:18:00,900
devices we checked it doesn't mean it's

381
00:18:00,900 --> 00:18:05,340
only 177 use this technology it's much

382
00:18:05,340 --> 00:18:06,419
more

383
00:18:06,419 --> 00:18:10,640
but interestingly it's also show how

384
00:18:10,640 --> 00:18:14,280
vendors cares and and vendors actually

385
00:18:14,280 --> 00:18:16,380
enable the whole complete feature on

386
00:18:16,380 --> 00:18:19,080
their devices what does that mean for

387
00:18:19,080 --> 00:18:21,480
you guys of this exploration of the

388
00:18:21,480 --> 00:18:24,059
certificate that's mean it will be not

389
00:18:24,059 --> 00:18:27,720
used for attestation on your machine so

390
00:18:27,720 --> 00:18:29,820
basically this security feature will be

391
00:18:29,820 --> 00:18:32,640
not a part of device attestation because

392
00:18:32,640 --> 00:18:34,919
it's hard to validate certificate is

393
00:18:34,919 --> 00:18:37,460
expired

394
00:18:38,100 --> 00:18:39,539
so

395
00:18:39,539 --> 00:18:42,840
that's been about Intel PPM story but

396
00:18:42,840 --> 00:18:47,659
let's come back on more vulnerabilities

397
00:18:48,240 --> 00:18:50,520
so but before we dig into

398
00:18:50,520 --> 00:18:52,200
vulnerabilities I wanted to present

399
00:18:52,200 --> 00:18:54,960
today I want to also talk about the

400
00:18:54,960 --> 00:18:57,480
supply chain problems and probably

401
00:18:57,480 --> 00:18:58,919
you're seeing

402
00:18:58,919 --> 00:19:02,419
a week before or two weeks ago like

403
00:19:02,419 --> 00:19:06,299
the leak for the public happen of Intel

404
00:19:06,299 --> 00:19:09,299
Adler wake reference code and also it's

405
00:19:09,299 --> 00:19:12,380
been inside caught inside this leakage

406
00:19:12,380 --> 00:19:15,480
think is of course it's not happened at

407
00:19:15,480 --> 00:19:17,280
like two weeks ago it's happened earlier

408
00:19:17,280 --> 00:19:20,100
in September but it's impacted a lot of

409
00:19:20,100 --> 00:19:22,440
different vendors

410
00:19:22,440 --> 00:19:26,400
not only Intel and it's exactly about

411
00:19:26,400 --> 00:19:29,700
supply chain complexity so it's actually

412
00:19:29,700 --> 00:19:32,580
opens the door for that hikers to dig

413
00:19:32,580 --> 00:19:34,320
into the new

414
00:19:34,320 --> 00:19:36,780
um architectures and try to find the

415
00:19:36,780 --> 00:19:39,179
bugs there intellectually play cool they

416
00:19:39,179 --> 00:19:42,539
say if researchers will be dug into this

417
00:19:42,539 --> 00:19:45,000
leakage and find the Box will be based

418
00:19:45,000 --> 00:19:46,380
and bound I don't know if it's ever

419
00:19:46,380 --> 00:19:48,480
happened or not but at least it's their

420
00:19:48,480 --> 00:19:50,640
comment and media

421
00:19:50,640 --> 00:19:53,400
so another comment it's been a lot of

422
00:19:53,400 --> 00:19:55,919
speculations around the private key of

423
00:19:55,919 --> 00:19:59,039
boot Garden League that's mean all the

424
00:19:59,039 --> 00:20:01,080
Lenovo devices which has been released

425
00:20:01,080 --> 00:20:03,360
on Adler way compromise blah blah blah

426
00:20:03,360 --> 00:20:05,580
whatever boot guard is broken

427
00:20:05,580 --> 00:20:09,720
but not that easy first of all like wood

428
00:20:09,720 --> 00:20:12,480
guard private key not stored on the

429
00:20:12,480 --> 00:20:16,380
platform right so but it contains the

430
00:20:16,380 --> 00:20:19,140
hash on the platform to validate uh

431
00:20:19,140 --> 00:20:21,480
through the fuse and boot guard can

432
00:20:21,480 --> 00:20:25,100
manifest houses actually

433
00:20:25,100 --> 00:20:30,620
relevant to actual private key

434
00:20:31,620 --> 00:20:33,360
we

435
00:20:33,360 --> 00:20:36,480
analyze all the devices exposing the

436
00:20:36,480 --> 00:20:38,340
firmware on the website from the from

437
00:20:38,340 --> 00:20:41,280
the Lenovo and we didn't find any

438
00:20:41,280 --> 00:20:47,299
confirmations about this liquid key from

439
00:20:47,299 --> 00:20:50,660
this particular

440
00:20:51,980 --> 00:20:55,080
odm om device vendor which has actually

441
00:20:55,080 --> 00:20:57,240
been responsible developing the firmers

442
00:20:57,240 --> 00:21:00,299
for Lenovo is relevant to actual product

443
00:21:00,299 --> 00:21:02,820
lines we don't know exactly it's maybe

444
00:21:02,820 --> 00:21:05,400
just this platform has been not released

445
00:21:05,400 --> 00:21:08,700
yet but intellectual gas maybe this

446
00:21:08,700 --> 00:21:10,440
leakage not happen from the production

447
00:21:10,440 --> 00:21:12,299
device firm where it's happened with the

448
00:21:12,299 --> 00:21:14,520
development firmware and it's why this

449
00:21:14,520 --> 00:21:18,780
boot guard key it's not appears on uh in

450
00:21:18,780 --> 00:21:20,160
the wild

451
00:21:20,160 --> 00:21:22,559
but

452
00:21:22,559 --> 00:21:24,419
very important

453
00:21:24,419 --> 00:21:27,720
taught here it is before we claim

454
00:21:27,720 --> 00:21:30,179
something validate the data points

455
00:21:30,179 --> 00:21:32,400
because sometimes obvious conclusions

456
00:21:32,400 --> 00:21:36,620
can be not relevant to reality

457
00:21:37,559 --> 00:21:41,658
so trust what validate right

458
00:21:46,080 --> 00:21:48,900
so let's focus on vulnerabilities and

459
00:21:48,900 --> 00:21:51,539
basically we have

460
00:21:51,539 --> 00:21:54,900
um a lot of vulnerabilities to discuss

461
00:21:54,900 --> 00:21:57,539
today in this one in particular it's

462
00:21:57,539 --> 00:21:59,960
pretty interesting it is actually

463
00:21:59,960 --> 00:22:03,299
classicalism clouds what does that mean

464
00:22:03,299 --> 00:22:05,840
you have the pointer

465
00:22:05,840 --> 00:22:08,539
basically smm

466
00:22:08,539 --> 00:22:11,760
SMI Handler it is a callback function

467
00:22:11,760 --> 00:22:13,440
which is can be used from operating

468
00:22:13,440 --> 00:22:16,620
system layer or somewhere else

469
00:22:16,620 --> 00:22:18,299
and uh

470
00:22:18,299 --> 00:22:20,580
this contains a pointer

471
00:22:20,580 --> 00:22:22,620
which is actually

472
00:22:22,620 --> 00:22:26,280
get out of system management mode which

473
00:22:26,280 --> 00:22:28,380
is pretty privileged mode in your

474
00:22:28,380 --> 00:22:29,700
firmware

475
00:22:29,700 --> 00:22:32,220
and if you control the pointer out of

476
00:22:32,220 --> 00:22:34,919
course you can manipulate some data and

477
00:22:34,919 --> 00:22:37,140
actually do the code execution if you

478
00:22:37,140 --> 00:22:38,580
like enough

479
00:22:38,580 --> 00:22:41,400
so it's exactly what's been happening in

480
00:22:41,400 --> 00:22:43,919
early 2000s and this vulnerabilities are

481
00:22:43,919 --> 00:22:46,740
not new it's been discovered in 2010 and

482
00:22:46,740 --> 00:22:49,080
later and invisible thing swaps even

483
00:22:49,080 --> 00:22:53,100
been working on that so basically

484
00:22:53,100 --> 00:22:56,880
it's very old Vector today it's 20 20

485
00:22:56,880 --> 00:22:59,580
end of 2022nd and we still see these

486
00:22:59,580 --> 00:23:02,760
vulnerabilities is happening and what is

487
00:23:02,760 --> 00:23:06,120
more odd in this situation these

488
00:23:06,120 --> 00:23:09,240
vulnerabilities are still exploitable

489
00:23:09,240 --> 00:23:10,740
so

490
00:23:10,740 --> 00:23:13,260
these two vulnerabilities

491
00:23:13,260 --> 00:23:17,280
is actually not can be attacked from the

492
00:23:17,280 --> 00:23:20,340
operating system where but if you have

493
00:23:20,340 --> 00:23:23,580
the privileges in a ufi shell usually

494
00:23:23,580 --> 00:23:26,039
it's very limited privileges you can

495
00:23:26,039 --> 00:23:27,360
attack this

496
00:23:27,360 --> 00:23:30,539
two vulnerabilities to actually get

497
00:23:30,539 --> 00:23:33,600
system management mod privileges or you

498
00:23:33,600 --> 00:23:36,840
can use and load any Signet Dixie driver

499
00:23:36,840 --> 00:23:39,059
which will be actually not privileged

500
00:23:39,059 --> 00:23:40,799
Dixie driver to attack this

501
00:23:40,799 --> 00:23:43,380
vulnerabilities as well

502
00:23:43,380 --> 00:23:48,120
cool let's move to the next ones and

503
00:23:48,120 --> 00:23:49,440
this

504
00:23:49,440 --> 00:23:52,100
particularly too it's not that critical

505
00:23:52,100 --> 00:23:55,980
but it's memory leak classical memory

506
00:23:55,980 --> 00:23:58,200
leaks which is help you to understand

507
00:23:58,200 --> 00:24:01,260
and dump the whole smm region and if it

508
00:24:01,260 --> 00:24:03,360
is any uh

509
00:24:03,360 --> 00:24:05,700
sensitive information available there

510
00:24:05,700 --> 00:24:08,400
you can dump it another thing this

511
00:24:08,400 --> 00:24:10,020
vulnerabilities can be used to attack

512
00:24:10,020 --> 00:24:12,480
authenticated variables which is of

513
00:24:12,480 --> 00:24:16,260
course create already more security

514
00:24:16,260 --> 00:24:17,700
impact

515
00:24:17,700 --> 00:24:19,320
but

516
00:24:19,320 --> 00:24:21,600
if you pay attention it's the same

517
00:24:21,600 --> 00:24:24,900
modules which we discussed before one

518
00:24:24,900 --> 00:24:28,260
related to the same modules

519
00:24:28,260 --> 00:24:30,780
it's part of the functionality of these

520
00:24:30,780 --> 00:24:34,440
particular packages anyway so

521
00:24:34,440 --> 00:24:35,280
um

522
00:24:35,280 --> 00:24:37,260
this vulnerability

523
00:24:37,260 --> 00:24:41,039
is classical memory corruption and if

524
00:24:41,039 --> 00:24:44,240
you see here this one

525
00:24:44,240 --> 00:24:46,860
basically about the complexity of the

526
00:24:46,860 --> 00:24:50,240
buffers which is comes

527
00:24:50,240 --> 00:24:54,539
unsignitized to smm again it's

528
00:24:54,539 --> 00:24:56,760
this vulnerabilities

529
00:24:56,760 --> 00:24:58,380
it's not new

530
00:24:58,380 --> 00:25:01,200
like concept or the class of problems

531
00:25:01,200 --> 00:25:03,120
it's been happening again and again and

532
00:25:03,120 --> 00:25:05,159
again and we have fancy static analysis

533
00:25:05,159 --> 00:25:07,980
tools why it's happening in the firmware

534
00:25:07,980 --> 00:25:11,760
why we have still this problem if we

535
00:25:11,760 --> 00:25:14,520
have so many uh automation Force product

536
00:25:14,520 --> 00:25:16,980
security available first of all not all

537
00:25:16,980 --> 00:25:18,900
of this automation relevant to the

538
00:25:18,900 --> 00:25:22,860
firmware not all tools used by security

539
00:25:22,860 --> 00:25:24,960
teams or even if security teams are

540
00:25:24,960 --> 00:25:27,840
exist in in the firmware development

541
00:25:27,840 --> 00:25:31,679
teams so but it's what happening also

542
00:25:31,679 --> 00:25:34,740
just a few slides before I show you guys

543
00:25:34,740 --> 00:25:37,140
complexity of the supply chain for

544
00:25:37,140 --> 00:25:39,360
delivering the firmware and fixes right

545
00:25:39,360 --> 00:25:43,260
and basically in many cases the device

546
00:25:43,260 --> 00:25:46,559
vendor like Lenovo hpdel and whatever

547
00:25:46,559 --> 00:25:49,980
others they're committing just probably

548
00:25:49,980 --> 00:25:53,279
about like five to ten percent of who

549
00:25:53,279 --> 00:25:56,820
firmware base the rest is covered by

550
00:25:56,820 --> 00:25:59,100
different type of reference code comes

551
00:25:59,100 --> 00:26:02,760
from Silicon vendor like Intel AMD or it

552
00:26:02,760 --> 00:26:04,860
is independent bias developer like

553
00:26:04,860 --> 00:26:08,940
American Mega Trends Phoenix or inside

554
00:26:08,940 --> 00:26:12,960
and this is created very

555
00:26:12,960 --> 00:26:15,419
huge attack surface and complexity for

556
00:26:15,419 --> 00:26:17,940
the whole ecosystem right because if you

557
00:26:17,940 --> 00:26:20,539
break into reference code you attack

558
00:26:20,539 --> 00:26:23,700
Generations which is this real reference

559
00:26:23,700 --> 00:26:26,779
code is relevant if your talk

560
00:26:26,779 --> 00:26:30,900
ibv the same thing

561
00:26:30,900 --> 00:26:33,840
and basically

562
00:26:33,840 --> 00:26:36,779
also it's a different teams writing this

563
00:26:36,779 --> 00:26:38,940
card different teams responsible for

564
00:26:38,940 --> 00:26:42,140
that and if as example you report

565
00:26:42,140 --> 00:26:46,260
vulnerability to Lenovo or HP or Dell or

566
00:26:46,260 --> 00:26:49,260
other vendors so basically it doesn't

567
00:26:49,260 --> 00:26:50,240
mean

568
00:26:50,240 --> 00:26:52,679
you report in vulnerability which will

569
00:26:52,679 --> 00:26:54,600
be fixed by Lenovo maybe they need to

570
00:26:54,600 --> 00:26:56,460
communicate with third party and then

571
00:26:56,460 --> 00:27:00,360
this fix will be available but also if

572
00:27:00,360 --> 00:27:02,279
this fix will be available exclusively

573
00:27:02,279 --> 00:27:04,620
only for Lenovo devices if it is attack

574
00:27:04,620 --> 00:27:07,320
reference code any other devices will be

575
00:27:07,320 --> 00:27:10,879
impacted right scary

576
00:27:10,980 --> 00:27:12,419
so

577
00:27:12,419 --> 00:27:16,500
yeah this again uh two memory corruption

578
00:27:16,500 --> 00:27:21,059
box so this is a sweet ones set ma'am

579
00:27:21,059 --> 00:27:23,520
and it's a wrapper around the set mem

580
00:27:23,520 --> 00:27:25,679
functionality not exactly like a leap C

581
00:27:25,679 --> 00:27:28,260
set mam but similar functionality

582
00:27:28,260 --> 00:27:31,500
implemented in edk reference code at

583
00:27:31,500 --> 00:27:34,740
Intel so used without any sanitization

584
00:27:34,740 --> 00:27:37,740
many cases by firmware developers and

585
00:27:37,740 --> 00:27:41,220
boom right so again firmware block

586
00:27:41,220 --> 00:27:45,059
service smm firmware service runtime dxc

587
00:27:45,059 --> 00:27:49,320
like do you see some similarity with the

588
00:27:49,320 --> 00:27:51,299
previous slide it's the same modules to

589
00:27:51,299 --> 00:27:53,159
memory corruption in the same flows

590
00:27:53,159 --> 00:27:56,059
crazy right

591
00:27:56,220 --> 00:27:57,539
so

592
00:27:57,539 --> 00:27:59,640
but this is a three new vulnerabilities

593
00:27:59,640 --> 00:28:01,980
I wanted to pay a bit more attention

594
00:28:01,980 --> 00:28:03,559
so first

595
00:28:03,559 --> 00:28:06,120
this is exactly exclusively disclosing

596
00:28:06,120 --> 00:28:09,539
today and this tree vulnerabilities are

597
00:28:09,539 --> 00:28:12,360
affecting 10 years of different chipset

598
00:28:12,360 --> 00:28:15,480
generations and if you look on these

599
00:28:15,480 --> 00:28:20,100
ones it's also contain the fancy

600
00:28:20,100 --> 00:28:22,500
security Awards like secure button Force

601
00:28:22,500 --> 00:28:26,100
blah blah blah and others so which is

602
00:28:26,100 --> 00:28:28,679
kind of like it's a security features

603
00:28:28,679 --> 00:28:31,080
related wise vendors doesn't pay

604
00:28:31,080 --> 00:28:35,659
attention enough and actually validate

605
00:28:35,659 --> 00:28:38,299
their code better in terms of

606
00:28:38,299 --> 00:28:42,419
non-vulnerabilities right so basically

607
00:28:42,419 --> 00:28:44,159
oops

608
00:28:44,159 --> 00:28:46,860
uh basically this is a classical tree

609
00:28:46,860 --> 00:28:49,740
vulnerabilities with get variable

610
00:28:49,740 --> 00:28:53,159
and if you can see here we have a data

611
00:28:53,159 --> 00:28:56,120
size and data Size Doesn't

612
00:28:56,120 --> 00:28:59,340
initialize before the second call of get

613
00:28:59,340 --> 00:29:00,720
variable

614
00:29:00,720 --> 00:29:04,620
and basically what does it mean get

615
00:29:04,620 --> 00:29:07,140
variable implementation get variable

616
00:29:07,140 --> 00:29:08,880
function first of all it's responsible

617
00:29:08,880 --> 00:29:11,700
for to read some of the data from

618
00:29:11,700 --> 00:29:13,440
inverum

619
00:29:13,440 --> 00:29:17,100
it's been discussed before and this data

620
00:29:17,100 --> 00:29:20,700
can be manipulated by the attacker so if

621
00:29:20,700 --> 00:29:23,399
the data size doesn't change on the

622
00:29:23,399 --> 00:29:26,340
second call this this problem leads to

623
00:29:26,340 --> 00:29:28,620
the classical stack overflow

624
00:29:28,620 --> 00:29:32,039
because the get variable will be assumed

625
00:29:32,039 --> 00:29:34,320
it will be the same size but if it is

626
00:29:34,320 --> 00:29:36,779
another variable we can just change it

627
00:29:36,779 --> 00:29:39,840
right and boom

628
00:29:39,840 --> 00:29:43,559
it's exactly what's happening and

629
00:29:43,559 --> 00:29:45,960
we reported a lot of such problems

630
00:29:45,960 --> 00:29:48,120
similar problems even to the same

631
00:29:48,120 --> 00:29:50,760
vendors we released the free tool which

632
00:29:50,760 --> 00:29:52,620
is finding these vulnerabilities nobody

633
00:29:52,620 --> 00:29:56,340
using it but actually I want to give a

634
00:29:56,340 --> 00:29:58,260
kudos to a set research team which has

635
00:29:58,260 --> 00:30:01,559
been using A5 Explorer and finds uh I

636
00:30:01,559 --> 00:30:03,840
believe three or four vulnerabilities in

637
00:30:03,840 --> 00:30:07,559
Lenovo laptops so basically I want more

638
00:30:07,559 --> 00:30:09,659
people to look to this problem I want

639
00:30:09,659 --> 00:30:10,679
more

640
00:30:10,679 --> 00:30:13,260
problems discovered and make vendors to

641
00:30:13,260 --> 00:30:15,960
fix them because it's ridiculous like

642
00:30:15,960 --> 00:30:18,000
free tooling available nobody pay

643
00:30:18,000 --> 00:30:20,299
attention

644
00:30:20,340 --> 00:30:22,740
so this is exactly three vulnerabilities

645
00:30:22,740 --> 00:30:25,919
here is a vendor advisory and our

646
00:30:25,919 --> 00:30:29,899
advisories will be follow up in short

647
00:30:30,299 --> 00:30:32,460
so basically we not releasing our

648
00:30:32,460 --> 00:30:34,200
advisors today because these three

649
00:30:34,200 --> 00:30:36,000
vulnerability is really impacting a lot

650
00:30:36,000 --> 00:30:38,220
of Enterprise vendors it's impacting a

651
00:30:38,220 --> 00:30:41,039
lot of different devices and actually

652
00:30:41,039 --> 00:30:45,200
not only laptops it's servers as well so

653
00:30:45,200 --> 00:30:47,520
we need to

654
00:30:47,520 --> 00:30:51,000
kind of pay more attention about the

655
00:30:51,000 --> 00:30:53,760
subway chain but

656
00:30:53,760 --> 00:30:56,100
here we go all the details being

657
00:30:56,100 --> 00:31:00,020
discussed just on the previous slide

658
00:31:00,659 --> 00:31:03,380
and

659
00:31:03,380 --> 00:31:06,659
this is our plugin called EFI Explorer

660
00:31:06,659 --> 00:31:08,659
so we will

661
00:31:08,659 --> 00:31:12,179
this functionality available from 2000

662
00:31:12,179 --> 00:31:15,779
uh from 2020 actually from flower

663
00:31:15,779 --> 00:31:18,539
presentation at black hat Europe and we

664
00:31:18,539 --> 00:31:19,620
still keep finding the same

665
00:31:19,620 --> 00:31:21,960
vulnerabilities this plugin can find

666
00:31:21,960 --> 00:31:24,179
vulnerabilities in Dixie drivers and

667
00:31:24,179 --> 00:31:26,520
platform initialization drivers but

668
00:31:26,520 --> 00:31:30,799
looks like vendors ignoring to use it

669
00:31:32,700 --> 00:31:36,000
um at the end I want to spend a bit of

670
00:31:36,000 --> 00:31:38,340
more time about automation

671
00:31:38,340 --> 00:31:41,100
and of course like automation is

672
00:31:41,100 --> 00:31:42,779
important for vulnerability research

673
00:31:42,779 --> 00:31:46,140
it's important for detection and we knew

674
00:31:46,140 --> 00:31:48,179
that we actually wanted to help to the

675
00:31:48,179 --> 00:31:49,980
community and we developed this plugin

676
00:31:49,980 --> 00:31:52,620
called EFI Explorer so recently at

677
00:31:52,620 --> 00:31:54,980
webscon we had also their arm support

678
00:31:54,980 --> 00:31:58,799
and this will be an interesting Journey

679
00:31:58,799 --> 00:32:02,279
for us for New attack vectors

680
00:32:02,279 --> 00:32:04,740
another thing that black hat represented

681
00:32:04,740 --> 00:32:06,500
the whole approach how we can use

682
00:32:06,500 --> 00:32:09,120
symbolic execution lightweight static

683
00:32:09,120 --> 00:32:12,360
Checkers to detect these vulnerabilities

684
00:32:12,360 --> 00:32:17,460
and here's a blog post on the bottom so

685
00:32:17,460 --> 00:32:20,340
this approach it works very fast

686
00:32:20,340 --> 00:32:23,279
let's take four to six uh seconds to

687
00:32:23,279 --> 00:32:25,440
analyze the cool firmware image

688
00:32:25,440 --> 00:32:28,080
yeah let's look

689
00:32:28,080 --> 00:32:30,360
so basically it's unbox the firmware

690
00:32:30,360 --> 00:32:32,100
analyze all the drivers and boom it

691
00:32:32,100 --> 00:32:36,299
finds is my call out

692
00:32:36,299 --> 00:32:37,860
right so

693
00:32:37,860 --> 00:32:41,340
I again it's a real-time demo it's how

694
00:32:41,340 --> 00:32:43,939
fast it is

695
00:32:45,600 --> 00:32:48,960
also for keep supply chain more secure

696
00:32:48,960 --> 00:32:51,480
and actually don't leave the vendors

697
00:32:51,480 --> 00:32:53,700
with their problems alone we created the

698
00:32:53,700 --> 00:32:55,440
whole approach for detecting known of

699
00:32:55,440 --> 00:32:57,659
vulnerabilities on the semantic level

700
00:32:57,659 --> 00:33:00,720
called firmware hand also it is a

701
00:33:00,720 --> 00:33:02,460
firmware hand dot run servers available

702
00:33:02,460 --> 00:33:04,460
for free for the community

703
00:33:04,460 --> 00:33:07,500
thermohan community scanner open source

704
00:33:07,500 --> 00:33:10,559
feel free to use it and uh

705
00:33:10,559 --> 00:33:13,620
except these three bugs every all other

706
00:33:13,620 --> 00:33:15,600
bugs we discussed on this presentation

707
00:33:15,600 --> 00:33:19,260
uh is available as a community rules so

708
00:33:19,260 --> 00:33:20,880
you can scan it you can check your

709
00:33:20,880 --> 00:33:22,980
firmware if you are vulnerable and get

710
00:33:22,980 --> 00:33:24,720
patched

711
00:33:24,720 --> 00:33:29,460
if patch is available right so

712
00:33:29,460 --> 00:33:31,320
here is um

713
00:33:31,320 --> 00:33:34,440
some example of the report on HP device

714
00:33:34,440 --> 00:33:36,960
and

715
00:33:36,960 --> 00:33:39,240
one of the closing

716
00:33:39,240 --> 00:33:41,519
thoughts so

717
00:33:41,519 --> 00:33:44,760
really we see complexity

718
00:33:44,760 --> 00:33:46,799
on the firmware side and it's creating

719
00:33:46,799 --> 00:33:49,580
more and more and if you think about

720
00:33:49,580 --> 00:33:52,799
your laptop you fly firmware it's like

721
00:33:52,799 --> 00:33:56,279
six million lines of code nowadays it's

722
00:33:56,279 --> 00:33:58,200
actually more than six millions

723
00:33:58,200 --> 00:34:02,460
but mtos kernel it's actually smaller we

724
00:34:02,460 --> 00:34:06,840
have so much complexity and very

725
00:34:06,840 --> 00:34:09,480
dangerous attack surfaces but not many

726
00:34:09,480 --> 00:34:11,580
mitigations are available there right

727
00:34:11,580 --> 00:34:14,639
and of course complexity in many cases

728
00:34:14,639 --> 00:34:16,859
it's an enemy of security because it's

729
00:34:16,859 --> 00:34:19,859
hard to develop new tools to follow up

730
00:34:19,859 --> 00:34:22,260
on new code being produced by firmware

731
00:34:22,260 --> 00:34:25,859
developers and device vendors Etc so we

732
00:34:25,859 --> 00:34:28,500
really need to pay way more attention to

733
00:34:28,500 --> 00:34:31,040
device security

734
00:34:31,619 --> 00:34:35,659
as mentioned it we developed some

735
00:34:35,659 --> 00:34:38,940
tooling and automation for arm so

736
00:34:38,940 --> 00:34:41,879
recently we reported nine High severity

737
00:34:41,879 --> 00:34:44,280
vulnerabilities to Lenovo but it's been

738
00:34:44,280 --> 00:34:48,060
not only Lenovo impacted some spoiler so

739
00:34:48,060 --> 00:34:50,399
maybe to offensive con the disclosure

740
00:34:50,399 --> 00:34:52,739
will be finished in the next year so

741
00:34:52,739 --> 00:34:54,540
it's going to be public but this

742
00:34:54,540 --> 00:34:57,000
disclosure will be huge

743
00:34:57,000 --> 00:35:00,540
so stay tuned gracias and I really

744
00:35:00,540 --> 00:35:04,859
appreciate being here at Echo party and

745
00:35:04,859 --> 00:35:05,940
closing

746
00:35:05,940 --> 00:35:09,720
main track today for Echo party 2022nd

747
00:35:09,720 --> 00:35:11,180
thank you very much

748
00:35:11,180 --> 00:35:15,180
[Applause]

749
00:35:15,180 --> 00:35:19,319
[Music]

