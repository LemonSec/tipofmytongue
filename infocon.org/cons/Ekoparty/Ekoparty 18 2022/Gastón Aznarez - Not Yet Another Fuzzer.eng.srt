1
00:00:01,710 --> 00:00:06,809


2
00:00:10,340 --> 00:00:13,679


3
00:00:13,679 --> 00:00:15,260


4
00:00:15,260 --> 00:00:18,240


5
00:00:18,240 --> 00:00:20,060


6
00:00:20,060 --> 00:00:23,820


7
00:00:23,820 --> 00:00:27,800


8
00:00:28,099 --> 00:00:33,059


9
00:00:33,059 --> 00:00:34,260


10
00:00:34,260 --> 00:00:35,579


11
00:00:35,579 --> 00:00:39,059


12
00:00:39,059 --> 00:00:40,680


13
00:00:40,680 --> 00:00:43,500


14
00:00:43,500 --> 00:00:47,100


15
00:00:47,100 --> 00:00:48,600


16
00:00:48,600 --> 00:00:50,899


17
00:00:50,899 --> 00:00:53,640


18
00:00:53,640 --> 00:00:56,640


19
00:00:56,640 --> 00:00:59,219


20
00:00:59,219 --> 00:01:01,620


21
00:01:01,620 --> 00:01:02,760


22
00:01:02,760 --> 00:01:05,339


23
00:01:05,339 --> 00:01:08,700


24
00:01:08,700 --> 00:01:10,880


25
00:01:10,880 --> 00:01:12,900


26
00:01:12,900 --> 00:01:16,140


27
00:01:16,140 --> 00:01:19,759


28
00:01:19,759 --> 00:01:22,820


29
00:01:22,820 --> 00:01:25,680


30
00:01:25,680 --> 00:01:29,100


31
00:01:29,100 --> 00:01:31,020


32
00:01:31,020 --> 00:01:32,840


33
00:01:32,840 --> 00:01:35,100


34
00:01:35,100 --> 00:01:39,780


35
00:01:39,780 --> 00:01:42,320


36
00:01:42,659 --> 00:01:45,740


37
00:01:47,400 --> 00:01:50,040


38
00:01:50,040 --> 00:01:52,920


39
00:01:52,920 --> 00:01:54,960


40
00:01:54,960 --> 00:01:56,899


41
00:01:56,899 --> 00:02:00,360


42
00:02:00,360 --> 00:02:02,520


43
00:02:02,520 --> 00:02:05,700


44
00:02:05,700 --> 00:02:07,200


45
00:02:07,200 --> 00:02:09,119


46
00:02:09,119 --> 00:02:12,480


47
00:02:12,480 --> 00:02:15,959


48
00:02:15,959 --> 00:02:19,319


49
00:02:19,319 --> 00:02:22,200


50
00:02:22,200 --> 00:02:24,020


51
00:02:24,020 --> 00:02:27,599


52
00:02:27,599 --> 00:02:29,780


53
00:02:29,780 --> 00:02:33,420


54
00:02:33,420 --> 00:02:35,819


55
00:02:35,819 --> 00:02:38,760


56
00:02:38,760 --> 00:02:43,280


57
00:02:44,360 --> 00:02:47,760


58
00:02:47,760 --> 00:02:50,819


59
00:02:50,819 --> 00:02:52,220


60
00:02:52,220 --> 00:02:54,360


61
00:02:54,360 --> 00:03:00,120


62
00:03:00,120 --> 00:03:02,900


63
00:03:02,900 --> 00:03:06,360


64
00:03:06,360 --> 00:03:09,060


65
00:03:09,060 --> 00:03:11,659


66
00:03:11,659 --> 00:03:15,060


67
00:03:15,060 --> 00:03:17,400


68
00:03:17,400 --> 00:03:20,879


69
00:03:20,879 --> 00:03:22,980


70
00:03:22,980 --> 00:03:24,300


71
00:03:24,300 --> 00:03:26,720


72
00:03:26,720 --> 00:03:30,200


73
00:03:30,200 --> 00:03:34,319


74
00:03:34,319 --> 00:03:36,540


75
00:03:36,540 --> 00:03:38,400


76
00:03:38,400 --> 00:03:40,860


77
00:03:40,860 --> 00:03:43,200


78
00:03:43,200 --> 00:03:45,599


79
00:03:45,599 --> 00:03:48,180


80
00:03:48,180 --> 00:03:51,620


81
00:03:52,500 --> 00:03:56,340


82
00:03:56,340 --> 00:03:57,959


83
00:03:57,959 --> 00:04:00,000


84
00:04:00,000 --> 00:04:03,239


85
00:04:03,239 --> 00:04:06,180


86
00:04:06,180 --> 00:04:09,180


87
00:04:09,780 --> 00:04:12,239


88
00:04:12,239 --> 00:04:14,700


89
00:04:14,700 --> 00:04:17,579


90
00:04:17,579 --> 00:04:19,320


91
00:04:19,320 --> 00:04:23,340


92
00:04:23,340 --> 00:04:25,199


93
00:04:25,199 --> 00:04:28,880


94
00:04:29,280 --> 00:04:32,840


95
00:04:33,840 --> 00:04:36,479


96
00:04:36,479 --> 00:04:37,979


97
00:04:37,979 --> 00:04:40,160


98
00:04:40,160 --> 00:04:44,160


99
00:04:44,160 --> 00:04:46,020


100
00:04:46,020 --> 00:04:49,020


101
00:04:49,020 --> 00:04:49,880


102
00:04:49,880 --> 00:04:52,259


103
00:04:52,259 --> 00:04:54,360


104
00:04:54,360 --> 00:04:58,259


105
00:04:58,259 --> 00:05:00,780


106
00:05:00,780 --> 00:05:03,060


107
00:05:03,060 --> 00:05:04,919


108
00:05:04,919 --> 00:05:07,919


109
00:05:07,919 --> 00:05:11,180


110
00:05:11,419 --> 00:05:14,419


111
00:05:14,720 --> 00:05:17,880


112
00:05:17,880 --> 00:05:19,919


113
00:05:19,919 --> 00:05:21,780


114
00:05:21,780 --> 00:05:23,280


115
00:05:23,280 --> 00:05:24,440


116
00:05:24,440 --> 00:05:27,300


117
00:05:27,300 --> 00:05:29,280


118
00:05:29,280 --> 00:05:31,740


119
00:05:31,740 --> 00:05:34,139


120
00:05:34,139 --> 00:05:36,900


121
00:05:36,900 --> 00:05:40,320


122
00:05:40,320 --> 00:05:42,000


123
00:05:42,000 --> 00:05:45,180


124
00:05:45,180 --> 00:05:46,639


125
00:05:46,639 --> 00:05:51,060


126
00:05:51,060 --> 00:05:53,460


127
00:05:53,460 --> 00:05:55,979


128
00:05:55,979 --> 00:05:57,479


129
00:05:57,479 --> 00:06:00,000


130
00:06:00,000 --> 00:06:01,440


131
00:06:01,440 --> 00:06:03,479


132
00:06:03,479 --> 00:06:05,759


133
00:06:05,759 --> 00:06:08,100


134
00:06:08,100 --> 00:06:11,400


135
00:06:11,400 --> 00:06:14,100


136
00:06:14,100 --> 00:06:15,840


137
00:06:15,840 --> 00:06:19,320


138
00:06:19,320 --> 00:06:23,460


139
00:06:23,460 --> 00:06:24,500


140
00:06:24,500 --> 00:06:27,539


141
00:06:27,539 --> 00:06:29,880


142
00:06:29,880 --> 00:06:32,699


143
00:06:32,699 --> 00:06:36,060


144
00:06:36,060 --> 00:06:38,580


145
00:06:38,580 --> 00:06:41,120


146
00:06:42,600 --> 00:06:45,240


147
00:06:45,240 --> 00:06:47,639


148
00:06:47,639 --> 00:06:50,699


149
00:06:50,699 --> 00:06:53,180


150
00:06:53,220 --> 00:06:57,300


151
00:06:57,300 --> 00:06:58,639


152
00:06:58,639 --> 00:07:02,699


153
00:07:02,699 --> 00:07:05,660


154
00:07:08,660 --> 00:07:13,080


155
00:07:13,080 --> 00:07:17,340


156
00:07:17,340 --> 00:07:20,220


157
00:07:20,220 --> 00:07:23,340


158
00:07:23,340 --> 00:07:27,119


159
00:07:27,419 --> 00:07:31,139


160
00:07:31,139 --> 00:07:33,479


161
00:07:33,479 --> 00:07:35,759


162
00:07:35,759 --> 00:07:38,220


163
00:07:38,220 --> 00:07:42,000


164
00:07:42,000 --> 00:07:45,419


165
00:07:45,419 --> 00:07:48,740


166
00:07:49,259 --> 00:07:51,780


167
00:07:51,780 --> 00:07:53,940


168
00:07:53,940 --> 00:07:56,479


169
00:07:56,479 --> 00:07:59,940


170
00:07:59,940 --> 00:08:01,380


171
00:08:01,380 --> 00:08:03,800


172
00:08:04,380 --> 00:08:07,800


173
00:08:07,800 --> 00:08:10,680


174
00:08:10,680 --> 00:08:13,919


175
00:08:13,919 --> 00:08:15,599


176
00:08:15,599 --> 00:08:19,500


177
00:08:19,500 --> 00:08:21,360


178
00:08:21,360 --> 00:08:24,080


179
00:08:24,080 --> 00:08:26,400


180
00:08:26,400 --> 00:08:28,319


181
00:08:28,319 --> 00:08:30,180


182
00:08:30,180 --> 00:08:34,440


183
00:08:34,440 --> 00:08:37,020


184
00:08:37,020 --> 00:08:39,299


185
00:08:39,299 --> 00:08:42,479


186
00:08:42,479 --> 00:08:45,720


187
00:08:45,720 --> 00:08:48,779


188
00:08:48,779 --> 00:08:52,620


189
00:08:52,620 --> 00:08:55,200


190
00:08:55,200 --> 00:08:57,560


191
00:08:58,820 --> 00:09:02,420


192
00:09:02,420 --> 00:09:03,980


193
00:09:03,980 --> 00:09:08,600


194
00:09:09,560 --> 00:09:13,080


195
00:09:13,080 --> 00:09:15,660


196
00:09:15,660 --> 00:09:16,459


197
00:09:16,459 --> 00:09:19,980


198
00:09:19,980 --> 00:09:22,680


199
00:09:22,680 --> 00:09:25,019


200
00:09:25,019 --> 00:09:28,160


201
00:09:28,320 --> 00:09:30,800


202
00:09:30,800 --> 00:09:34,140


203
00:09:34,140 --> 00:09:36,620


204
00:09:36,620 --> 00:09:39,540


205
00:09:39,540 --> 00:09:41,760


206
00:09:41,760 --> 00:09:47,720


207
00:09:47,720 --> 00:09:50,339


208
00:09:50,339 --> 00:09:51,800


209
00:09:51,800 --> 00:09:54,240


210
00:09:54,240 --> 00:09:57,000


211
00:09:57,000 --> 00:09:59,760


212
00:09:59,760 --> 00:10:03,839


213
00:10:03,839 --> 00:10:06,000


214
00:10:06,000 --> 00:10:08,040


215
00:10:08,040 --> 00:10:10,800


216
00:10:10,800 --> 00:10:14,040


217
00:10:14,040 --> 00:10:16,279


218
00:10:16,279 --> 00:10:19,560


219
00:10:19,560 --> 00:10:21,660


220
00:10:21,660 --> 00:10:24,660


221
00:10:24,660 --> 00:10:27,000


222
00:10:27,000 --> 00:10:30,360


223
00:10:30,360 --> 00:10:33,540


224
00:10:33,540 --> 00:10:36,240


225
00:10:36,240 --> 00:10:39,540


226
00:10:39,540 --> 00:10:42,959


227
00:10:42,959 --> 00:10:46,079


228
00:10:46,079 --> 00:10:49,140


229
00:10:49,140 --> 00:10:51,260


230
00:10:51,260 --> 00:10:53,540


231
00:10:53,540 --> 00:10:57,620


232
00:10:57,620 --> 00:11:01,200


233
00:11:01,200 --> 00:11:04,380


234
00:11:04,380 --> 00:11:06,480


235
00:11:06,480 --> 00:11:09,240


236
00:11:09,240 --> 00:11:11,339


237
00:11:11,339 --> 00:11:13,380


238
00:11:13,380 --> 00:11:15,560


239
00:11:15,560 --> 00:11:19,560


240
00:11:19,560 --> 00:11:22,380


241
00:11:22,380 --> 00:11:24,060


242
00:11:24,060 --> 00:11:25,079


243
00:11:25,079 --> 00:11:27,120


244
00:11:27,120 --> 00:11:29,100


245
00:11:29,100 --> 00:11:30,720


246
00:11:30,720 --> 00:11:32,940


247
00:11:32,940 --> 00:11:36,740


248
00:11:41,160 --> 00:11:43,800


249
00:11:43,800 --> 00:11:46,140


250
00:11:46,140 --> 00:11:50,160


251
00:11:50,160 --> 00:11:53,339


252
00:11:53,339 --> 00:11:55,320


253
00:11:55,320 --> 00:11:58,079


254
00:11:58,079 --> 00:12:00,899


255
00:12:00,899 --> 00:12:02,279


256
00:12:02,279 --> 00:12:04,560


257
00:12:04,560 --> 00:12:07,440


258
00:12:07,440 --> 00:12:10,860


259
00:12:10,860 --> 00:12:12,540


260
00:12:12,540 --> 00:12:14,339


261
00:12:14,339 --> 00:12:16,980


262
00:12:16,980 --> 00:12:20,279


263
00:12:20,279 --> 00:12:23,339


264
00:12:23,339 --> 00:12:25,680


265
00:12:25,680 --> 00:12:28,200


266
00:12:28,200 --> 00:12:32,640


267
00:12:32,640 --> 00:12:35,160


268
00:12:35,160 --> 00:12:37,500


269
00:12:37,500 --> 00:12:39,320


270
00:12:39,320 --> 00:12:42,120


271
00:12:42,120 --> 00:12:45,300


272
00:12:45,300 --> 00:12:47,880


273
00:12:47,880 --> 00:12:50,760


274
00:12:50,760 --> 00:12:53,519


275
00:12:53,519 --> 00:12:56,459


276
00:12:56,459 --> 00:12:59,399


277
00:12:59,399 --> 00:13:01,860


278
00:13:01,860 --> 00:13:05,639


279
00:13:05,639 --> 00:13:07,920


280
00:13:07,920 --> 00:13:10,139


281
00:13:10,139 --> 00:13:13,880


282
00:13:15,959 --> 00:13:20,100


283
00:13:20,100 --> 00:13:22,680


284
00:13:22,680 --> 00:13:26,639


285
00:13:26,639 --> 00:13:28,940


286
00:13:29,720 --> 00:13:34,579


287
00:13:34,579 --> 00:13:38,940


288
00:13:38,940 --> 00:13:42,660


289
00:13:42,660 --> 00:13:45,660


290
00:13:45,660 --> 00:13:48,800


291
00:13:48,800 --> 00:13:52,260


292
00:13:52,260 --> 00:13:55,079


293
00:13:55,079 --> 00:13:57,300


294
00:13:57,300 --> 00:14:00,180


295
00:14:00,180 --> 00:14:02,399


296
00:14:02,399 --> 00:14:03,980


297
00:14:03,980 --> 00:14:06,779


298
00:14:06,779 --> 00:14:11,339


299
00:14:11,339 --> 00:14:16,560


300
00:14:16,560 --> 00:14:20,339


301
00:14:20,339 --> 00:14:22,760


302
00:14:24,959 --> 00:14:27,839


303
00:14:27,839 --> 00:14:33,720


304
00:14:33,720 --> 00:14:36,720


305
00:14:36,720 --> 00:14:39,540


306
00:14:39,540 --> 00:14:44,180


307
00:14:45,540 --> 00:14:47,880


308
00:14:47,880 --> 00:14:49,860


309
00:14:49,860 --> 00:14:51,839


310
00:14:51,839 --> 00:14:54,060


311
00:14:54,060 --> 00:14:57,300


312
00:14:57,300 --> 00:14:59,820


313
00:14:59,820 --> 00:15:01,920


314
00:15:01,920 --> 00:15:04,860


315
00:15:04,860 --> 00:15:07,620


316
00:15:07,620 --> 00:15:12,120


317
00:15:12,120 --> 00:15:14,459


318
00:15:14,459 --> 00:15:18,779


319
00:15:18,779 --> 00:15:21,600


320
00:15:21,600 --> 00:15:24,560


321
00:15:24,560 --> 00:15:27,620


322
00:15:27,620 --> 00:15:30,480


323
00:15:30,480 --> 00:15:32,399


324
00:15:32,399 --> 00:15:36,300


325
00:15:36,300 --> 00:15:41,940


326
00:15:41,940 --> 00:15:45,380


327
00:15:46,740 --> 00:15:49,760


328
00:15:49,760 --> 00:15:53,760


329
00:15:53,760 --> 00:15:55,680


330
00:15:55,680 --> 00:15:59,399


331
00:15:59,399 --> 00:16:01,680


332
00:16:01,680 --> 00:16:03,060


333
00:16:03,060 --> 00:16:05,880


334
00:16:05,880 --> 00:16:09,420


335
00:16:09,420 --> 00:16:12,060


336
00:16:12,060 --> 00:16:13,560


337
00:16:13,560 --> 00:16:14,760


338
00:16:14,760 --> 00:16:17,579


339
00:16:17,579 --> 00:16:21,060


340
00:16:21,060 --> 00:16:23,239


341
00:16:23,639 --> 00:16:26,279


342
00:16:26,279 --> 00:16:29,399


343
00:16:29,399 --> 00:16:32,699


344
00:16:32,699 --> 00:16:35,100


345
00:16:35,100 --> 00:16:37,380


346
00:16:37,380 --> 00:16:38,880


347
00:16:38,880 --> 00:16:43,279


348
00:16:44,459 --> 00:16:45,560


349
00:16:45,560 --> 00:16:48,839


350
00:16:48,839 --> 00:16:51,480


351
00:16:51,480 --> 00:16:55,220


352
00:16:57,959 --> 00:16:59,000


353
00:16:59,000 --> 00:17:01,139


354
00:17:01,139 --> 00:17:03,860


355
00:17:03,860 --> 00:17:05,419


356
00:17:05,419 --> 00:17:07,919


357
00:17:07,919 --> 00:17:11,699


358
00:17:11,699 --> 00:17:13,679


359
00:17:13,679 --> 00:17:15,240


360
00:17:15,240 --> 00:17:18,419


361
00:17:18,419 --> 00:17:21,740


362
00:17:21,740 --> 00:17:24,419


363
00:17:24,419 --> 00:17:28,740


364
00:17:28,740 --> 00:17:32,340


365
00:17:32,340 --> 00:17:35,760


366
00:17:35,760 --> 00:17:38,220


367
00:17:38,220 --> 00:17:42,020


368
00:17:42,020 --> 00:17:45,140


369
00:17:45,140 --> 00:17:49,220


370
00:17:49,440 --> 00:17:51,660


371
00:17:51,660 --> 00:17:53,940


372
00:17:53,940 --> 00:17:56,760


373
00:17:56,760 --> 00:17:59,480


374
00:17:59,539 --> 00:18:04,919


375
00:18:04,919 --> 00:18:08,400


376
00:18:08,400 --> 00:18:09,440


377
00:18:09,440 --> 00:18:12,799


378
00:18:12,799 --> 00:18:16,440


379
00:18:16,440 --> 00:18:18,440


380
00:18:18,440 --> 00:18:21,780


381
00:18:21,780 --> 00:18:24,360


382
00:18:24,360 --> 00:18:26,539


383
00:18:27,600 --> 00:18:29,940


384
00:18:29,940 --> 00:18:33,120


385
00:18:33,120 --> 00:18:35,460


386
00:18:35,460 --> 00:18:39,299


387
00:18:39,299 --> 00:18:42,059


388
00:18:42,059 --> 00:18:45,059


389
00:18:45,059 --> 00:18:49,500


390
00:18:49,500 --> 00:18:52,500


391
00:18:52,500 --> 00:18:56,460


392
00:18:56,460 --> 00:18:58,500


393
00:18:58,500 --> 00:19:00,600


394
00:19:00,600 --> 00:19:03,600


395
00:19:03,960 --> 00:19:05,480


396
00:19:05,480 --> 00:19:08,580


397
00:19:08,580 --> 00:19:10,860


398
00:19:10,860 --> 00:19:13,559


399
00:19:13,559 --> 00:19:15,600


400
00:19:15,600 --> 00:19:17,520


401
00:19:17,520 --> 00:19:20,820


402
00:19:20,820 --> 00:19:25,200


403
00:19:25,200 --> 00:19:27,780


404
00:19:27,780 --> 00:19:29,820


405
00:19:29,820 --> 00:19:33,720


406
00:19:33,720 --> 00:19:35,580


407
00:19:35,580 --> 00:19:38,039


408
00:19:38,039 --> 00:19:41,400


409
00:19:41,400 --> 00:19:43,260


410
00:19:43,260 --> 00:19:46,620


411
00:19:46,620 --> 00:19:49,340


412
00:19:49,340 --> 00:19:53,460


413
00:19:53,460 --> 00:19:56,039


414
00:19:56,039 --> 00:20:01,320


415
00:20:01,320 --> 00:20:04,440


416
00:20:04,440 --> 00:20:05,280


417
00:20:05,280 --> 00:20:07,580


418
00:20:07,580 --> 00:20:10,380


419
00:20:10,380 --> 00:20:13,919


420
00:20:13,919 --> 00:20:15,059


421
00:20:15,059 --> 00:20:17,100


422
00:20:17,100 --> 00:20:19,860


423
00:20:19,860 --> 00:20:22,080


424
00:20:22,080 --> 00:20:24,120


425
00:20:24,120 --> 00:20:26,580


426
00:20:26,580 --> 00:20:28,140


427
00:20:28,140 --> 00:20:31,500


428
00:20:31,500 --> 00:20:34,140


429
00:20:34,140 --> 00:20:37,679


430
00:20:37,679 --> 00:20:40,860


431
00:20:40,860 --> 00:20:42,539


432
00:20:42,539 --> 00:20:44,820


433
00:20:44,820 --> 00:20:46,980


434
00:20:46,980 --> 00:20:48,539


435
00:20:48,539 --> 00:20:51,600


436
00:20:51,600 --> 00:20:54,240


437
00:20:54,240 --> 00:20:56,820


438
00:20:56,820 --> 00:20:59,480


439
00:21:00,919 --> 00:21:05,820


440
00:21:05,820 --> 00:21:06,799


441
00:21:06,799 --> 00:21:10,440


442
00:21:10,440 --> 00:21:12,419


443
00:21:12,419 --> 00:21:14,600


444
00:21:14,600 --> 00:21:17,880


445
00:21:17,880 --> 00:21:20,039


446
00:21:20,039 --> 00:21:22,919


447
00:21:22,919 --> 00:21:25,580


448
00:21:25,580 --> 00:21:28,679


449
00:21:28,679 --> 00:21:31,980


450
00:21:31,980 --> 00:21:33,900


451
00:21:33,900 --> 00:21:37,440


452
00:21:37,440 --> 00:21:41,460


453
00:21:41,460 --> 00:21:44,520


454
00:21:44,520 --> 00:21:47,120


455
00:21:47,120 --> 00:21:50,760


456
00:21:50,760 --> 00:21:52,820


457
00:21:52,820 --> 00:21:56,340


458
00:21:56,340 --> 00:21:58,679


459
00:21:58,679 --> 00:22:00,860


460
00:22:00,860 --> 00:22:02,900


461
00:22:02,900 --> 00:22:06,480


462
00:22:06,480 --> 00:22:08,520


463
00:22:08,520 --> 00:22:10,980


464
00:22:10,980 --> 00:22:14,460


465
00:22:14,460 --> 00:22:17,520


466
00:22:17,520 --> 00:22:21,000


467
00:22:21,000 --> 00:22:24,900


468
00:22:24,900 --> 00:22:27,720


469
00:22:27,720 --> 00:22:29,400


470
00:22:29,400 --> 00:22:32,580


471
00:22:32,580 --> 00:22:36,140


472
00:22:36,140 --> 00:22:38,840


473
00:22:38,840 --> 00:22:43,080


474
00:22:43,080 --> 00:22:44,880


475
00:22:44,880 --> 00:22:47,520


476
00:22:47,520 --> 00:22:49,340


477
00:22:49,340 --> 00:22:52,020


478
00:22:52,020 --> 00:22:54,360


479
00:22:54,360 --> 00:22:58,200


480
00:22:58,200 --> 00:23:00,120


481
00:23:00,120 --> 00:23:02,460


482
00:23:02,460 --> 00:23:05,340


483
00:23:05,340 --> 00:23:07,200


484
00:23:07,200 --> 00:23:09,600


485
00:23:09,600 --> 00:23:12,659


486
00:23:12,659 --> 00:23:14,700


487
00:23:14,700 --> 00:23:16,919


488
00:23:16,919 --> 00:23:19,700


489
00:23:20,039 --> 00:23:23,039


490
00:23:23,820 --> 00:23:26,820


491
00:23:26,820 --> 00:23:29,100


492
00:23:29,100 --> 00:23:31,919


493
00:23:31,919 --> 00:23:35,059


494
00:23:35,940 --> 00:23:38,400


495
00:23:38,400 --> 00:23:40,620


496
00:23:40,620 --> 00:23:43,080


497
00:23:43,080 --> 00:23:47,220


498
00:23:47,220 --> 00:23:49,980


499
00:23:49,980 --> 00:23:53,480


500
00:23:54,559 --> 00:23:56,700


501
00:23:56,700 --> 00:23:59,280


502
00:23:59,280 --> 00:24:02,400


503
00:24:02,400 --> 00:24:05,400


504
00:24:05,400 --> 00:24:07,500


505
00:24:07,500 --> 00:24:09,600


506
00:24:09,600 --> 00:24:12,059


507
00:24:12,059 --> 00:24:14,100


508
00:24:14,100 --> 00:24:17,580


509
00:24:17,580 --> 00:24:21,299


510
00:24:21,299 --> 00:24:24,480


511
00:24:24,480 --> 00:24:26,700


512
00:24:26,700 --> 00:24:29,820


513
00:24:29,820 --> 00:24:31,320


514
00:24:31,320 --> 00:24:34,679


515
00:24:34,679 --> 00:24:37,980


516
00:24:37,980 --> 00:24:40,919


517
00:24:40,919 --> 00:24:42,960


518
00:24:42,960 --> 00:24:45,419


519
00:24:45,419 --> 00:24:48,059


520
00:24:48,059 --> 00:24:51,900


521
00:24:51,900 --> 00:24:54,059


522
00:24:54,059 --> 00:24:58,440


523
00:24:58,440 --> 00:25:01,520


524
00:25:01,520 --> 00:25:05,100


525
00:25:05,100 --> 00:25:07,760


526
00:25:11,460 --> 00:25:13,220


527
00:25:13,220 --> 00:25:16,820


528
00:25:16,940 --> 00:25:19,799


529
00:25:19,799 --> 00:25:22,740


530
00:25:22,740 --> 00:25:24,240


531
00:25:24,240 --> 00:25:26,760


532
00:25:26,760 --> 00:25:28,919


533
00:25:28,919 --> 00:25:32,039


534
00:25:32,039 --> 00:25:33,600


535
00:25:33,600 --> 00:25:35,820


536
00:25:35,820 --> 00:25:38,120


537
00:25:38,120 --> 00:25:41,760


538
00:25:41,760 --> 00:25:44,880


539
00:25:44,880 --> 00:25:47,880


540
00:25:47,880 --> 00:25:50,460


541
00:25:50,460 --> 00:25:53,100


542
00:25:53,100 --> 00:25:56,340


543
00:25:56,340 --> 00:25:59,940


544
00:25:59,940 --> 00:26:01,620


545
00:26:01,620 --> 00:26:04,380


546
00:26:04,380 --> 00:26:07,450


547
00:26:07,450 --> 00:26:08,820


548
00:26:08,820 --> 00:26:11,220


549
00:26:11,220 --> 00:26:14,700


550
00:26:14,700 --> 00:26:16,799


551
00:26:16,799 --> 00:26:19,980


552
00:26:19,980 --> 00:26:21,419


553
00:26:21,419 --> 00:26:23,580


554
00:26:23,580 --> 00:26:26,220


555
00:26:26,220 --> 00:26:27,799


556
00:26:27,799 --> 00:26:33,620


557
00:26:33,919 --> 00:26:36,659


558
00:26:36,659 --> 00:26:39,720


559
00:26:39,720 --> 00:26:42,779


560
00:26:42,779 --> 00:26:45,900


561
00:26:45,900 --> 00:26:48,179


562
00:26:48,179 --> 00:26:50,820


563
00:26:50,820 --> 00:26:53,400


564
00:26:53,400 --> 00:26:56,279


565
00:26:56,279 --> 00:26:59,039


566
00:26:59,039 --> 00:27:02,460


567
00:27:02,460 --> 00:27:05,700


568
00:27:05,700 --> 00:27:09,059


569
00:27:09,059 --> 00:27:10,980


570
00:27:10,980 --> 00:27:14,400


571
00:27:14,400 --> 00:27:17,659


572
00:27:18,059 --> 00:27:20,400


573
00:27:20,400 --> 00:27:23,220


574
00:27:23,220 --> 00:27:25,200


575
00:27:25,200 --> 00:27:26,600


576
00:27:26,600 --> 00:27:29,760


577
00:27:29,760 --> 00:27:32,940


578
00:27:32,940 --> 00:27:35,640


579
00:27:35,640 --> 00:27:37,140


580
00:27:37,140 --> 00:27:40,380


581
00:27:40,380 --> 00:27:42,600


582
00:27:42,600 --> 00:27:45,960


583
00:27:45,960 --> 00:27:47,460


584
00:27:47,460 --> 00:27:50,340


585
00:27:50,340 --> 00:27:53,340


586
00:27:53,340 --> 00:27:56,460


587
00:27:56,460 --> 00:27:59,400


588
00:27:59,400 --> 00:28:04,080


589
00:28:04,080 --> 00:28:06,360


590
00:28:06,360 --> 00:28:08,279


591
00:28:08,279 --> 00:28:11,480


592
00:28:12,480 --> 00:28:15,539


593
00:28:15,539 --> 00:28:18,840


594
00:28:18,840 --> 00:28:20,100


595
00:28:20,100 --> 00:28:23,760


596
00:28:23,760 --> 00:28:27,000


597
00:28:27,000 --> 00:28:29,460


598
00:28:29,460 --> 00:28:33,179


599
00:28:33,179 --> 00:28:36,539


600
00:28:36,539 --> 00:28:38,820


601
00:28:38,820 --> 00:28:42,960


602
00:28:42,960 --> 00:28:45,539


603
00:28:45,539 --> 00:28:47,039


604
00:28:47,039 --> 00:28:49,320


605
00:28:49,320 --> 00:28:52,140


606
00:28:52,140 --> 00:28:55,080


607
00:28:55,080 --> 00:28:57,539


608
00:28:57,539 --> 00:28:58,860


609
00:28:58,860 --> 00:29:01,919


610
00:29:01,919 --> 00:29:05,279


611
00:29:05,279 --> 00:29:07,860


612
00:29:07,860 --> 00:29:10,620


613
00:29:10,620 --> 00:29:13,380


614
00:29:13,380 --> 00:29:15,860


615
00:29:15,860 --> 00:29:19,260


616
00:29:19,260 --> 00:29:23,340


617
00:29:25,380 --> 00:29:27,980


618
00:29:29,340 --> 00:29:31,940


619
00:29:31,940 --> 00:29:36,539


620
00:29:36,539 --> 00:29:38,640


621
00:29:38,640 --> 00:29:42,600


622
00:29:42,600 --> 00:29:45,140


623
00:29:45,140 --> 00:29:48,539


624
00:29:48,539 --> 00:29:49,880


625
00:29:49,880 --> 00:29:53,279


626
00:29:53,279 --> 00:29:55,200


627
00:29:55,200 --> 00:29:58,440


628
00:29:58,440 --> 00:30:02,760


629
00:30:02,760 --> 00:30:05,279


630
00:30:05,279 --> 00:30:08,460


631
00:30:08,460 --> 00:30:10,260


632
00:30:10,260 --> 00:30:12,179


633
00:30:12,179 --> 00:30:14,520


634
00:30:14,520 --> 00:30:17,220


635
00:30:17,220 --> 00:30:20,039


636
00:30:20,039 --> 00:30:23,220


637
00:30:23,220 --> 00:30:25,260


638
00:30:25,260 --> 00:30:28,320


639
00:30:28,320 --> 00:30:31,679


640
00:30:31,679 --> 00:30:35,299


641
00:30:35,299 --> 00:30:37,159


642
00:30:37,159 --> 00:30:41,100


643
00:30:41,100 --> 00:30:43,980


644
00:30:43,980 --> 00:30:46,980


645
00:30:46,980 --> 00:30:48,720


646
00:30:48,720 --> 00:30:51,559


647
00:30:52,039 --> 00:30:55,860


648
00:30:55,860 --> 00:30:59,520


649
00:30:59,520 --> 00:31:02,460


650
00:31:02,460 --> 00:31:04,940


651
00:31:04,940 --> 00:31:08,419


652
00:31:08,419 --> 00:31:10,559


653
00:31:10,559 --> 00:31:12,918


654
00:31:13,080 --> 00:31:16,080


655
00:31:16,080 --> 00:31:20,520


656
00:31:20,520 --> 00:31:23,460


657
00:31:23,460 --> 00:31:27,240


658
00:31:27,240 --> 00:31:29,760


659
00:31:29,760 --> 00:31:32,039


660
00:31:32,039 --> 00:31:35,580


661
00:31:35,580 --> 00:31:37,140


662
00:31:37,140 --> 00:31:40,080


663
00:31:40,080 --> 00:31:43,320


664
00:31:43,320 --> 00:31:44,880


665
00:31:44,880 --> 00:31:46,860


666
00:31:46,860 --> 00:31:50,039


667
00:31:50,039 --> 00:31:52,620


668
00:31:52,620 --> 00:31:55,860


669
00:31:55,860 --> 00:31:58,620


670
00:31:58,620 --> 00:32:00,919


671
00:32:00,919 --> 00:32:05,000


672
00:32:05,460 --> 00:32:08,159


673
00:32:08,159 --> 00:32:10,620


674
00:32:10,620 --> 00:32:12,240


675
00:32:12,240 --> 00:32:15,360


676
00:32:15,360 --> 00:32:18,299


677
00:32:18,299 --> 00:32:20,460


678
00:32:20,460 --> 00:32:23,279


679
00:32:23,279 --> 00:32:25,260


680
00:32:25,260 --> 00:32:27,799


681
00:32:28,500 --> 00:32:32,039


682
00:32:32,039 --> 00:32:34,020


683
00:32:34,020 --> 00:32:35,940


684
00:32:35,940 --> 00:32:39,120


685
00:32:39,120 --> 00:32:41,240


686
00:32:41,240 --> 00:32:44,399


687
00:32:44,399 --> 00:32:47,760


688
00:32:47,760 --> 00:32:50,640


689
00:32:50,640 --> 00:32:51,899


690
00:32:51,899 --> 00:32:55,260


691
00:32:55,260 --> 00:32:57,840


692
00:32:57,840 --> 00:33:00,360


693
00:33:00,360 --> 00:33:03,678


694
00:33:03,840 --> 00:33:06,240


695
00:33:06,240 --> 00:33:08,880


696
00:33:08,880 --> 00:33:12,179


697
00:33:12,179 --> 00:33:17,779


698
00:33:22,559 --> 00:33:25,460


699
00:33:25,460 --> 00:33:28,440


700
00:33:28,440 --> 00:33:32,100


701
00:33:32,100 --> 00:33:33,480


702
00:33:33,480 --> 00:33:35,580


703
00:33:35,580 --> 00:33:39,179


704
00:33:39,179 --> 00:33:41,519


705
00:33:41,519 --> 00:33:45,419


706
00:33:45,419 --> 00:33:47,940


707
00:33:47,940 --> 00:33:50,299


708
00:33:50,760 --> 00:33:53,820


709
00:33:53,820 --> 00:33:56,460


710
00:33:56,460 --> 00:33:59,299


711
00:33:59,299 --> 00:34:02,779


712
00:34:02,779 --> 00:34:05,760


713
00:34:05,760 --> 00:34:09,359


714
00:34:09,359 --> 00:34:12,918


715
00:34:14,960 --> 00:34:17,580


716
00:34:17,580 --> 00:34:22,320


717
00:34:22,320 --> 00:34:24,899


718
00:34:24,899 --> 00:34:27,440


719
00:34:27,440 --> 00:34:30,980


720
00:34:34,560 --> 00:34:37,460


721
00:34:40,320 --> 00:34:43,679


722
00:34:43,679 --> 00:34:46,800


723
00:34:46,800 --> 00:34:52,679


724
00:34:52,679 --> 00:34:55,199


725
00:34:55,199 --> 00:34:57,300


726
00:34:57,300 --> 00:35:00,000


727
00:35:00,000 --> 00:35:02,720


728
00:35:03,720 --> 00:35:06,960


729
00:35:06,960 --> 00:35:10,520


730
00:35:10,520 --> 00:35:12,720


731
00:35:12,720 --> 00:35:16,279


732
00:35:17,880 --> 00:35:20,660


733
00:35:22,200 --> 00:35:25,098


734
00:35:30,359 --> 00:35:33,380


735
00:35:37,810 --> 00:35:40,860


736
00:35:40,980 --> 00:35:44,160


737
00:35:44,160 --> 00:35:47,779


738
00:35:49,020 --> 00:35:51,000


739
00:35:51,000 --> 00:35:53,460


740
00:35:53,460 --> 00:35:55,380


741
00:35:55,380 --> 00:35:59,099


742
00:35:59,099 --> 00:36:02,099


743
00:36:02,099 --> 00:36:05,460


744
00:36:05,460 --> 00:36:07,320


745
00:36:07,320 --> 00:36:10,160


746
00:36:10,859 --> 00:36:13,020


747
00:36:13,020 --> 00:36:14,180


748
00:36:14,180 --> 00:36:17,700


749
00:36:17,700 --> 00:36:20,099


750
00:36:20,099 --> 00:36:22,440


751
00:36:22,440 --> 00:36:23,579


752
00:36:23,579 --> 00:36:26,820


753
00:36:26,820 --> 00:36:29,880


754
00:36:29,880 --> 00:36:32,160


755
00:36:32,160 --> 00:36:36,480


756
00:36:36,480 --> 00:36:38,700


757
00:36:38,700 --> 00:36:41,520


758
00:36:41,520 --> 00:36:44,160


759
00:36:44,160 --> 00:36:46,500


760
00:36:46,500 --> 00:36:48,960


761
00:36:48,960 --> 00:36:53,460


762
00:36:53,460 --> 00:36:57,060


763
00:36:57,060 --> 00:37:01,140


764
00:37:01,140 --> 00:37:03,240


765
00:37:03,240 --> 00:37:06,359


766
00:37:06,359 --> 00:37:08,760


767
00:37:08,760 --> 00:37:10,920


768
00:37:10,920 --> 00:37:12,359


769
00:37:12,359 --> 00:37:16,440


770
00:37:16,440 --> 00:37:20,160


771
00:37:20,160 --> 00:37:22,680


772
00:37:22,680 --> 00:37:23,880


773
00:37:23,880 --> 00:37:25,520


774
00:37:25,520 --> 00:37:29,579


775
00:37:29,579 --> 00:37:31,440


776
00:37:31,440 --> 00:37:33,839


777
00:37:33,839 --> 00:37:37,040


778
00:37:37,040 --> 00:37:40,560


779
00:37:40,560 --> 00:37:43,200


780
00:37:43,200 --> 00:37:45,660


781
00:37:45,660 --> 00:37:47,820


782
00:37:47,820 --> 00:37:49,859


783
00:37:49,859 --> 00:37:52,079


784
00:37:52,079 --> 00:37:54,300


785
00:37:54,300 --> 00:37:56,599


786
00:37:57,000 --> 00:38:00,240


787
00:38:00,240 --> 00:38:01,920


788
00:38:01,920 --> 00:38:06,720


789
00:38:06,720 --> 00:38:09,420


790
00:38:09,420 --> 00:38:11,599


791
00:38:11,599 --> 00:38:14,460


792
00:38:14,460 --> 00:38:16,260


793
00:38:16,260 --> 00:38:17,640


794
00:38:17,640 --> 00:38:19,859


795
00:38:19,859 --> 00:38:23,160


796
00:38:23,160 --> 00:38:24,660


797
00:38:24,660 --> 00:38:27,540


798
00:38:27,540 --> 00:38:31,940


799
00:38:32,700 --> 00:38:36,420


800
00:38:36,420 --> 00:38:38,700


801
00:38:38,700 --> 00:38:40,380


802
00:38:40,380 --> 00:38:44,940


803
00:38:44,940 --> 00:38:49,200


804
00:38:49,200 --> 00:38:50,400


805
00:38:50,400 --> 00:38:52,079


806
00:38:52,079 --> 00:38:54,260


807
00:38:54,359 --> 00:38:57,920


808
00:39:10,560 --> 00:39:12,780


809
00:39:12,780 --> 00:39:15,960


810
00:39:15,960 --> 00:39:19,640


811
00:39:21,420 --> 00:39:24,619


812
00:39:26,700 --> 00:39:29,040


813
00:39:29,040 --> 00:39:30,839


814
00:39:30,839 --> 00:39:33,420


815
00:39:33,420 --> 00:39:35,520


816
00:39:35,520 --> 00:39:38,099


817
00:39:38,099 --> 00:39:41,339


818
00:39:41,339 --> 00:39:42,540


819
00:39:42,540 --> 00:39:45,060


820
00:39:45,060 --> 00:39:47,460


821
00:39:47,460 --> 00:39:50,099


822
00:39:50,099 --> 00:39:53,099


823
00:39:53,099 --> 00:39:54,720


824
00:39:54,720 --> 00:39:57,720


825
00:39:57,720 --> 00:39:59,880


826
00:39:59,880 --> 00:40:02,040


827
00:40:02,040 --> 00:40:04,500


828
00:40:04,500 --> 00:40:06,780


829
00:40:06,780 --> 00:40:09,119


830
00:40:09,119 --> 00:40:12,300


831
00:40:12,300 --> 00:40:15,060


832
00:40:15,060 --> 00:40:16,800


833
00:40:16,800 --> 00:40:18,119


834
00:40:18,119 --> 00:40:20,339


835
00:40:20,339 --> 00:40:21,599


836
00:40:21,599 --> 00:40:22,760


837
00:40:22,760 --> 00:40:25,500


838
00:40:25,500 --> 00:40:28,320


839
00:40:28,320 --> 00:40:30,420


840
00:40:30,420 --> 00:40:32,460


841
00:40:32,460 --> 00:40:33,660


842
00:40:33,660 --> 00:40:35,700


843
00:40:35,700 --> 00:40:38,160


844
00:40:38,160 --> 00:40:41,940


845
00:40:41,940 --> 00:40:44,940


846
00:40:44,940 --> 00:40:47,280


847
00:40:47,280 --> 00:40:49,560


848
00:40:49,560 --> 00:40:51,180


849
00:40:51,180 --> 00:40:53,460


850
00:40:53,460 --> 00:40:58,400


851
00:40:58,500 --> 00:41:00,480


852
00:41:00,480 --> 00:41:01,400


853
00:41:01,400 --> 00:41:06,079


854
00:41:06,599 --> 00:41:11,040


855
00:41:11,040 --> 00:41:15,020


856
00:41:15,480 --> 00:41:18,020


857
00:41:18,320 --> 00:41:21,660


858
00:41:21,660 --> 00:41:23,280


859
00:41:23,280 --> 00:41:27,180


860
00:41:27,180 --> 00:41:30,259


861
00:41:30,480 --> 00:41:33,660


862
00:41:33,660 --> 00:41:34,760


863
00:41:34,760 --> 00:41:37,820


864
00:41:37,820 --> 00:41:40,260


865
00:41:40,260 --> 00:41:42,200


866
00:41:42,200 --> 00:41:46,380


867
00:41:46,380 --> 00:41:48,560


868
00:41:48,560 --> 00:41:52,140


869
00:41:52,140 --> 00:41:55,500


870
00:41:55,500 --> 00:41:56,220


871
00:41:56,220 --> 00:41:57,599


872
00:41:57,599 --> 00:42:01,320


873
00:42:01,320 --> 00:42:04,220


874
00:42:04,500 --> 00:42:07,079


875
00:42:07,079 --> 00:42:09,900


876
00:42:09,900 --> 00:42:13,400


877
00:42:14,040 --> 00:42:17,119


878
00:42:17,119 --> 00:42:21,980


879
00:42:23,520 --> 00:42:26,420


880
00:42:30,440 --> 00:42:35,060


881
00:42:56,460 --> 00:42:58,260


882
00:42:58,260 --> 00:43:02,760


883
00:43:02,760 --> 00:43:05,420


884
00:43:08,339 --> 00:43:10,680


885
00:43:10,680 --> 00:43:12,359


886
00:43:12,359 --> 00:43:16,140


887
00:43:16,140 --> 00:43:18,839


888
00:43:18,839 --> 00:43:21,180


889
00:43:21,180 --> 00:43:23,160


890
00:43:23,160 --> 00:43:27,119


891
00:43:27,119 --> 00:43:30,420


892
00:43:30,420 --> 00:43:34,619


893
00:43:34,619 --> 00:43:36,720


894
00:43:36,720 --> 00:43:38,640


895
00:43:38,640 --> 00:43:41,540


896
00:43:41,540 --> 00:43:44,640


897
00:43:44,640 --> 00:43:47,480


898
00:43:47,520 --> 00:43:51,780


899
00:43:51,780 --> 00:43:54,240


900
00:43:54,240 --> 00:43:58,098


901
00:44:02,940 --> 00:44:05,420


902
00:44:05,420 --> 00:44:07,859


903
00:44:07,859 --> 00:44:09,200


904
00:44:09,200 --> 00:44:11,339


905
00:44:11,339 --> 00:44:12,839


906
00:44:12,839 --> 00:44:15,500


907
00:44:16,700 --> 00:44:19,700


908
00:44:20,420 --> 00:44:25,020


909
00:44:25,020 --> 00:44:27,599


910
00:44:27,599 --> 00:44:29,280


911
00:44:29,280 --> 00:44:33,079


912
00:44:33,440 --> 00:44:35,880


913
00:44:35,880 --> 00:44:37,859


914
00:44:37,859 --> 00:44:40,740


915
00:44:40,740 --> 00:44:42,839


916
00:44:42,839 --> 00:44:45,660


917
00:44:45,660 --> 00:44:48,480


918
00:44:48,480 --> 00:44:51,540


919
00:44:51,540 --> 00:44:54,960


920
00:44:54,960 --> 00:44:58,280


921
00:44:58,280 --> 00:45:01,619


922
00:45:01,619 --> 00:45:04,260


923
00:45:04,260 --> 00:45:06,420


924
00:45:06,420 --> 00:45:09,599


925
00:45:09,599 --> 00:45:11,700


926
00:45:11,700 --> 00:45:14,099


927
00:45:14,099 --> 00:45:15,680


928
00:45:15,680 --> 00:45:21,000


929
00:45:21,000 --> 00:45:25,200


930
00:45:25,200 --> 00:45:26,240


931
00:45:26,240 --> 00:45:28,920


932
00:45:28,920 --> 00:45:33,260


933
00:45:33,260 --> 00:45:36,420


934
00:45:36,420 --> 00:45:37,859


935
00:45:37,859 --> 00:45:39,480


936
00:45:39,480 --> 00:45:42,900


937
00:45:42,900 --> 00:45:45,359


938
00:45:45,359 --> 00:45:47,599


939
00:45:47,599 --> 00:45:50,960


940
00:45:50,960 --> 00:45:54,060
[Applause] Hi, sorry for the delay, a couple of technical problems. My name is Gastón Aznares. Today we are going to talk about nother that does not arrive.  a work in progress is not finished yet and the idea is to release it to the public so they can contribute and use it in a couple of months so good First of all about me yes believe me or not that's me with short hair in glasses but I'm  I am a student of the degree in computer science at famab of the National University of Córdoba and I work as a software Security automation engineer in ecliption, by the way, thank you very much eclipsection Thank you, I am here and Well, there are things like programmatic analysis, binary analysis  and certain things like that there are my email my Twitter and linkedin I don't know why But if you want to contact me you are all welcome  If Gastón is looking for the ships anywhere, I'm like this, no difficult man, the same if he wants to go through, let's go through it like this. So, what?  I am going to introduce you to what is notredanotherfacer, we are going to take a tour of the implementation, and we are going to explain certain concepts that are necessary to understand it, and finally, we are going to give a demo that I hope will turn out well, we are going to see if Murphy's law is not fulfilled.  There it is good What is easy the definition of easy hard would be that it is an automatic fault injection testing technique in which we try to give random or invalid unexpected inputs to a program trying to make it fail the name easy is kind of weird  The origins of the name, that is, Fast, was used for the first time by Dr. Barton Miller at the University of Wisconsin in 1988, it is quite old.  Barton Miller tells the story that one dark night with an electrical storm he was working from home connected to the university through a telephone line and when he was testing things and sending messages by lightning there was interference and  one of the messages gets corrupted So the program you were using crackea breaks and where a lot of people would see an error is from a chance and he got his University of Wisconsin computer science class to do a summer project  which consisted of making a program that gives random inputs to others to try to break it actually the easy one is a very familiar concept for those of us who make ourselves Calling hackers is literally trying to break things For example if we have a basic function that  we give a number and it returns another for example I don't know that we give it 5 1 2 8 and we are like that we are going to try to give it a -1 or a  very large number and try to break the same function that you give it a name and greets you for example of echo and we are going to try to break it in some way Well there are three ways to categorize the facers I think it is important to highlight the first one  of generation that this has to do with how new test cases are generated, those that are of mutation obtain a first initial Test case because it can be called a seed and it makes modifications so that it generates new ones and those of generation create the cases  of Test from scratch can now be categorized into knowledge of the input is what is the knowledge about the structure of the input that the facer has, for example, a structured fazer that knows the structure can be one about PDF files that the inputs are PDF files and  know where to modify so as not to alter the format more and an unstructured one has no idea of ​​this now about the knowledge of the program ta  It is also knowledge about the structure of the program how it is made here they are divided into Black Box if you have no idea about the program like it is a black box that gives you input and tries to break it it may be White Box otherwise it has a lot of information about  the structure and there is an intermediate, as always, which is the Gray Box that has certain information, such as what parts of the program it reached, what is the input, what test cases, an example of a widely used facer is the FL American fusilup, which would be a non-mutation  structured and Gray Box because it obtains information about the places that input would reach And that in our case we are going to be interested in the unstructured mutation fazer and White box Well after introduction I think we can now present what I am currently working on which is Note  10 data from Facebook Well, how did this project come about? What is the motivation? There is a fazer called zague de scalable that has been  izo specifically at Microsoft is closed source and is strictly to make it easy on Windows x86 architecture binaries and that take files as input So we said Che for we like how this fazer works we want to do something similar but we want to do it for architecture binaries  of RM and even more difficult in RM architecture binaries from an x86 host from my computer and at the same time with these targets that we had that required this we realized that we need to get some hardware independence that all the majority fans  Of the fazers, it was good, given that we set ourselves the objectives, which are to make a facer that is as efficient as possible because there are many, many requirements that it be easy to use, that it be configurable, multi and cross platform, multicross architecture, and finally, the independence of the hardware.  we were talking about saying I don't want to have to make it easy  il on the original Hardware where the program should run because it may be that it is not efficient or it is Slow and it is not accessible for example we have a program in a bmc that is a server controller we do not want to merge there we want to take it out and do it outside good  given this comes the implementation to move the internals that Facebook has well we are going to separate it into several items to organize the first is the emulation second is sanitaiser third generation of Test And finally we are going to see the complete pass do not worry I am going to explain  each one that would be good for emulation we realized that for this we are going to need yes or simulation because Because we want to run programs from another architecture it was a fundamental requirement and we chose among many here killing is a python library is a framework that is a framework  of advanced binary emulation that we chose for several reasons first it has a pyt action  hon very complete at the operating system level that allows us to do things like save the system state reload it things like that at the operating system level that allows us to replace system calls allows us to change libraries for example in Linux of the ellipse and allows us  do things at a lower level still like changing memory registers and stuff Besides that it allows us an instrumentation with hooks well it's multiplatform Here are a couple of examples that it's Windows Mac Linux and more it has many supported platforms very architecture are also examples  because it has more like 80 86 armx 86 mips and better the fazer relies so much on this framework that I thought it important to show you how it works and we are going to do a demo not so much demo because they are slides But well due to time constraints we are going to do it quickly  The objective of This will first be to emulate the binary in any binary and secondly the binary will be instrumental  o here it was difficult to choose an example to show you that is simple enough to give it quickly and expressive enough for you to understand but well suppose we have that code in super basic C it is a hello world like any now how do we formulate it we make a Script  very small a couple of lines the only thing I did is initialize the framework it tells it where the binary is and tells it gives it a directory that in this case is root Fest which is the one that the binary will believe is the root of the system  operative and we run it what it does is print Hello world now we do not want to say hello world what we are going to want to do is change this we are going to make it say hello echo we are going to have to lengthen the Script a bit but don't be scared  We just add a function in the penultimate line called jucadress that what it will do is tell it when a certain memory address is reached in the execution, let's go  to launch a function we are going to run a function that is patcher and the memory location This is the entry point of the binary which is the first memory address that is executed What does this function do the only thing it is going to do as you can see there  It is to search in all the parts of the binary where the word world is and it will later change it to echo if we run we can see if it runs There it is we see that it says hello Well then with a couple of lines of code we were able to emulate and implement a binary  Well, we come to the sanitaisers part, it is a fundamental part in a fazer because there are certain waltzes that cannot be observed with the naked eye or when you are executing the program, for example, some memory overflow that does not corrupt the execution cannot simply be observed. So  The sanitaiser is that part of the program that is in charge of finding these backs. In our case, what we implemented first, which was the first thing necessary, was u  n adr with the aim of finding waltz of Us after free of Hip over Flow and the Double free good first before anything else What a common alock looks like in a program It is that I ask the system for a portion of memory that it can use  which in our case is going to be of size 6 and the system is going to return a pointer which in our case we are going to call p So I can freely use this function this piece of memory and when I don't use it anymore I free it with free good for  detect the chip overflow and the Hip underflow what we are going to do is we are going to add a space after and before the local memory for this we are going to have to make a Hook on the alock to these pieces of memory we are going to mark it as protected for  read write and obviously execute So when an overflow is about to be performed it will try to work on protected memory and it will be a cpu Crash and we will be able to find the ship How how do we recognize bags of use  after free what we are going to do is we are going to completely replace the free function we are not going to execute the free itself But what we are going to do is that when it is called we are going to put all that memory that we wanted to free as protected in that way we have  that we can find when we want to use that memory again. Of course, having an overhead in memory that is acceptable for our objectives And finally, the double free is totally simple, we are going to keep a record of which places were freed in memory and if they want to free  the same system is created twice For example we have two memory locations we may want to free one so we may want to free the other and then if we try to free the same an error occurs well here comes the part that I think is most interesting is that of  Test generation because we have that our easy is going to be emulated and that is going to have a very important execution overjeden the execution is going to be a lot  slower So we need to find a way that is much more efficient to achieve Our objective, which is to have a coverage or a higher program scan with fewer executions, for that we choose the algorithm that was used in the fazer that I told you about before is the algorithm  call generation search in generations or generation al search to explain that algorithm. First I would like to give an introduction on What is symbolic execution because it is used by this code? Well, symbolic execution in is is nothing more than performing an interpretation of the program having as  input not concrete inputs but symbols that are these symbols is a set of equations or conditions that that value has to meet for example in concrete execution if we have a function that adds 2 to a number we are going to give it a concrete input that is 3  and it returns 5 in symbolic execution we are going to have an input a and what it is going to give you  lver is going to be for 2 a + 2 sorry that it is not a specific value and and good And we can deduce that we can have opus is any number plus two good now there is the symbolic execution it is a static binary analysis technique because we are not executing  the program itself but we are interpreting it But there is one let's say a success another technique that comes from the symbolic execution that is the dynamic symbolic execution What is this about trying to have a dynamic execution a symbolic execution next to a concrete execution it is said  that is guided by the concrete execution we are going to see an example that we are going to have this program called Bull that takes two integers a and b and does a couple of things that doesn't make sense But they made everything easier for me so let's see how I said it is an execution  concrete that we are going to have the concrete state on the left side of the table on the middle side we are going to have the symbolic state of the system  ema and on the right we are going to have something called Paz build what are these pads contrains they are nothing more than conditions that the symbolic state has to meet for the execution to continue along this path and not another Well let's start by testing  this giving any input in this case is equal to 22 B = 7 It was totally arbitrary and the symbolic execution in the symbolic state will say that a simply has the initial value of a does not know anymore and b has the initial value of B Now if  we execute the first line we have a new variable in the state that is x that is x that x is going to be worth B times 2 in the concrete state it is equivalent to 14 in the symbolic state x is going to be worth B 0 times 2 now if we go to the next line we have  that we have an If a condition that is fulfilled the program continues executing if not the program exits the function ends in our case we have that the condition x equal to is not fulfilled So we do not exit executing and the pad co  Contrasting is that x, which is equal to B 0 times 2, is different from zero, which was the symbolic value of a, but we said that we want to discover more, we want to explore the program more, so what we are going to do is that we are going to grab an smt solver and  Excuse me for the simplification but it is a program that we give it certain equations and it gives us a possible solution if it exists. So we are going to say we want to enter If We are going to give it the opposite condition to the negation of the peace constraint and it is going to give us a value that  in this case it is this is a 0 equal to 2 B 0 = 1 that we can see if we run it fast in our mind we can see that it satisfies the If and we are going to run it again we are going to go faster now x is equal to b times 2x  b0 times 2 is equal to zero is fulfilled and we enter the next one and and we are going to do exactly the same thing we are going to give it to a solver sm we are going to ask him if an equation exists and that he gives us a solution and that he gives us and we go  to give this of e  That way if we execute this we can see that we reached a line that we wanted to reach that our case is an abortion but we can think of it as a ship So we accomplished the objective following certain heuristics in the execution with colic dynamic symbolic execution good Now yes Now that  we understood the symbolic execution a bit we can continue with the generation of Test which is the generational algorithm Why is this algorithm good or why we chose it Because first it is designed to explore systematically and not completely In other words, partial programs with  long execution paths What does this mean that it is systematic and partial first systematic is that it has a process to do it that is always the same and that it is partial means that it is not total that it will not go through all the paths this is useful for us  to make it more efficient it now also maximizes the number of Test cases per test run  In the text this means that since symbolic execution is expensive we are going to try to perform as little symbolic execution as possible to generate as much Test as possible, it also uses heuristics to improve this coverage as best as possible, which is more or less what  what we did we just said we want to go that way we want to do that thing And finally it is Divergent it is resistant to divergences What does this mean that if the easy one takes a path from a program that is not very useful it can go through the rest of the  those of the paths Well at a very high level at a very high level you can see the algorithm between a seed or initial Test case that we are going to tell you if an expand function enters this function that is going to be moved then generates a new case  of Tests that are run and checked to see if they contain bags or not after this, each of these cases goes through a function that gives it a value, a score, and that goes one  priority queue where the best of the Test cases is selected and sent again to the function expand in this way it is fulfilled This is the easy cycle, let's say, of test case generation and now we are going to go into a little detail  that it does each thing first it works expand [Music] the functions well this This is a lot of code and nobody wants it no this is the pseudo code of The search algorithm that nobody wants to see because it's 2 in the afternoon and they just had lunch  all So let's move on I'm going to explain the expand that I have no choice but what it does at a high level is it stores the pad constrain of a run and those pads against 30 it will grab and it will negate the conditions one by one and with  Each of these denials will generate a voucher, it will request an smt solver to solve it and it will generate a new test case. Now, a detail that is important to each of these new Test cases will set a limit, a bone.  there it says that this  What does it do? That is to say, that since that Peace trains you back, they are not denied again in new generations. In this way, generations are generated, generations are created, and here comes the name like that in the head, it is quite difficult to assimilate it. So what we are going to do  to do is Show an example This example I took from the zague paper where the phasor is shown and it is simple enough to allow us to see it step by step we have a function ok I always give it that name I don't know why that takes an input that is  an array of four characters and for each one of those characters it will ask if they have a certain value, which is Bad with a little exclamation point, simple bad And if that array has these values, then an abortion will appear, which for us we are going to say is  a Back because what we are looking for, well, we suppose that we have this word as a seed or as the first case of Test a good.  constraint for the left is not fulfilled for the right it is fulfilled as we can see the seed was very badly chosen because the worst one that could be chosen and all the steps bring are like they are not fulfilled what we are going to do now is to take each one of  those pads contrains and deny them and we are going to generate new Test cases in this case it generates four new Test cases that we can see there are now these new Test cases we are going to deny the pads contrains after the last one denied because we had set this limit  We are going to generate a new test case, we do it again And finally we arrived at what we wanted, which is the word Bad, sorry I am. Well there Abad, well, we could see the emulation, we can see the sanitazer, we could see how new test cases are generated.  Test And finally, what we are going to see is a high level, how is the fashing process here, how is it easy, we are going to tell you the first step to make it easy is that we must inj  ect the case of Test at some point there are some phases that we have to do for a specific program to do it there are others that we have to give have to be programs that take command line arguments or files or a bunch of stuff Well but we  We are emulating we have full control So we can do pretty much whatever we want so killing allows us and we do implement all possible forms of hair injection or Test cases as standard file input can be sockets can be in memory directly  everything in records If we see the execution process of a Test case, it would be something like this: the program starts at some point in the execution, the hair is injected and the program ends up crashing with a bar or exiting normally, ending normally, well, from there what we do is  run the program again And that cycle does continue and continues and continues now this I don't know it's like there are many steps  Parts of the program that we really do not want to execute Why are we going to execute them is inefficient apart from that what we want to do is make it easy on a single function so what we are going to do is make a snapshot that is a snapshot is a complete capture of the  program running in a certain memory location now that it is saved in a snapshot if memories and file System records are saved, for example a file that is opened by the program itself and thus our Loop becomes much smaller we have the beginning of the program the point from where  the snapshot is taken and the injection ends but when it ends we don't go back to the beginning we restore the state of the snapshot again and we can make a much more localized easy.  run emulation on a Hardware just my little one so what we are going to do is try to divide this process and we will  We are going to divide the beginning and the snapshot into two parts that will be dependent on the Hardware and then we will divide the fusing Loop that will be emulated. This allows us to make it easy on other targets that are more complicated, such as on the Raspberry  or a bnc, whatever it was, we're going to see it and Well, so far we've seen emulation, we've seen the sanitazer, we've seen Test generation, we've seen the Easy Loop And that gives us that we have another, which is a facer guided by dynamic symbolic execution on already compiled binaries that  It allows us some traction of the Hardware Well now it's time for the demo if everything works well I'm going to show you I brought a raspberry running a program that is a tcp server only and that we are going to try to make it easy wait for me while you leave  learning well in this way what we are going to do is make it easy on a Target that is not our computer and that on top of that has another architecture to connect to it.  If it connects, there it is. We have one missing, the other without Murphy, wants everything to come out. Yes Ok, first of all we are going to connect to the raspberry.  we are going to give a port we see that there the server was turned on to which we can communicate things like for example I know it works it is wrong it is wrong the address [Music] may be missing it may malice and now we are going to give it a command for example Leon we can  see that the server turns on the led but due to a logistics problem I didn't bring my finger, they'll have to believe that it turns on.  What we are going to do now is go inside the prompt again and we are going to run a Script that what it is going to do is it is going to get a string of the program in a place that we tell it this string is going to be  rvir then to create the snapshot So in this way we are going to run the program that we have to tell it what the ID of the process is, which in this case is the ID of the process called server, we are going to tell it where we want the Y string to be  how to save it now this this address where we want the string to be made we got it by reverse engineering the binary and where we decided what was going to be the target that we were going to dive let's say which one works in this case it's a function So we run it and we can say  it says Waiting to barks good This is because we put an address that is not running now but we need to send it a command so that it arrives I think yes So we are going to send it any command we can see that the program has finished And if we see the files we have  a new file called Core ok now what follows is to transfer it to our computer to the Core but since it takes a long time No I don't have it like this  I'm going to have to use it, we're going to bring that file, it's going to take a while because I forgot to save it, and OK, but let's explain what we're going to do now, now we have a file that is a string, but we have to modify that because our program  It doesn't understand Jordan, that's why we created a Script that grabs this string and creates a snapshot. Now, all of this is worth mentioning that the address is not magical, nor that we did it, but rather that there is a reverse engineering process before that, which I don't show here.  because there isn't time but believe me it's easy Don't believe someone who tells you they believe Well let's see if I have it no no Well we're going to have to end it turn off the lie And on top of that I'm running out of time Well let's move on to something else  Meanwhile, the easy one has to be configured in some way and what we are going to do is I am going to show the configuration is quite simple, first we tell it what Command is going to be executed in our case the servi  dor on port 8081 which is really not needed here after the Fest Root which was what I had told you which is the directory that the binary will think is the root of the operating system now it comes in easy in the easy configuration we choose  the strategy that is the only one we have is search for generations this is a matter of parallelism How many processes do we want to have running after the seed that I am going to show you is information that is in a file and the snapshot that we have to do now  then Star address which is where we want the emulation to start in our case it is not important because we have the snapshot all we do is continue the execution and to make it more efficient we can put stop parents which is a list of addresses where if the emulation reaches the  execution is finished And finally the injection that the method we chose in a function because we previously did the work is ingenious  It would be reversed and it is at the same address where we did the Snapchat, since if it ends Well, I am going to show you the seed that is, this is barcoman as it was before as was the message that we had sent and well, now that it is finished we are going to run the Script that  it is used for this it is called a short Snap where we give it a string and it returns a snapshot it does not find it good There it is we can see that it finished these are all the things that it read the records the memory mapping everything and we can see what the server generated for us point  Snap Well now all that remains is to run the phasor So we are going to run facer we are going to tell it where the configuration is and where we want it to save all the results of the process we run it and it starts running perfect Well on the right we can see that there are a couple  of messages that are kind of weird, it didn't break, it's the place, we're going to check to see what could have happened, we had told him that it was in the fossil folder and it wasn't there and oh  pray Well now we have more suitable outputs and well while it runs we can see that at some point of execution what it is going to do now There it is I found a bar down here on the right we can see so we can grab it and go to easy which is where our output is  our output that generated a back and now what we can do as we always like is to give it to the server We are going to give it this as we can see the program finished and the input was hold the fernet So that says good with that we are Now there is a  space for questions I don't know if anyone has questions if someone has a question you can approach the microphone in the middle if you can't raise your hand Hello I wanted to ask you about emulating outside of Target It's good because you have to think about that but what happens if there is in your Loop  things that depend on the Hardware there are two questions there two questions that can be done one that has been done now which is to try that in the engineering process  Inversely, it is within these limits and it is a matter of not getting there, such as the Stop parents. But later it is future work, it should be possible to implement jugs or we are going to tell you modules that emulate this hardware, so you can easily emulate it with a python script  a memory place or some peripheral like a gpio or anything but good future work perfect and they plan to take it to other architectures Look for now it works with RM 32 bits and 64 x 86 also 32 bits and 64 emulation works with more architectures  like mipso many more the subject is the symbolic execution library that we are using that I take advantage of to name it is called Tritón it is very good but we do not support other architectures it is in future plans to change it so that it supports more good very good Thank you very much thank you anyone has any  another question not

941
00:45:54,060 --> 00:45:55,859
good We say goodbye to Gastón in the

942
00:45:55,859 --> 00:45:58,640
nose With a loud applause

943
00:46:01,260 --> 00:46:03,839
and then we will receive Car  ol

944
00:46:03,839 --> 00:46:05,960
valencia

